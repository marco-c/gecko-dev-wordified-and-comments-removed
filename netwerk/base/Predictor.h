#
ifndef
mozilla_net_Predictor_h
#
define
mozilla_net_Predictor_h
#
include
"
nsINetworkPredictor
.
h
"
#
include
"
nsINetworkPredictorVerifier
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsICacheEntry
.
h
"
#
include
"
nsICacheEntryOpenCallback
.
h
"
#
include
"
nsICacheStorageService
.
h
"
#
include
"
nsICacheStorageVisitor
.
h
"
#
include
"
nsIDNSListener
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISpeculativeConnect
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
class
nsICacheStorage
;
class
nsIDNSService
;
class
nsIIOService
;
class
nsILoadContextInfo
;
class
nsITimer
;
namespace
mozilla
{
namespace
net
{
class
nsHttpRequestHead
;
class
nsHttpResponseHead
;
class
Predictor
:
public
nsINetworkPredictor
public
nsIObserver
public
nsISpeculativeConnectionOverrider
public
nsIInterfaceRequestor
public
nsICacheEntryMetaDataVisitor
public
nsINetworkPredictorVerifier
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSINETWORKPREDICTOR
NS_DECL_NSIOBSERVER
NS_DECL_NSISPECULATIVECONNECTIONOVERRIDER
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSICACHEENTRYMETADATAVISITOR
NS_DECL_NSINETWORKPREDICTORVERIFIER
Predictor
(
)
;
nsresult
Init
(
)
;
void
Shutdown
(
)
;
static
nsresult
Create
(
nsISupports
*
outer
const
nsIID
&
iid
void
*
*
result
)
;
static
void
UpdateCacheability
(
nsIURI
*
sourceURI
nsIURI
*
targetURI
uint32_t
httpStatus
nsHttpRequestHead
&
requestHead
nsHttpResponseHead
*
reqponseHead
nsILoadContextInfo
*
lci
bool
isTracking
)
;
private
:
virtual
~
Predictor
(
)
;
nsCOMPtr
<
nsINetworkPredictorVerifier
>
mChildVerifier
;
union
Reason
{
PredictorLearnReason
mLearn
;
PredictorPredictReason
mPredict
;
}
;
class
DNSListener
:
public
nsIDNSListener
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIDNSLISTENER
DNSListener
(
)
{
}
private
:
virtual
~
DNSListener
(
)
{
}
}
;
class
Action
:
public
nsICacheEntryOpenCallback
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICACHEENTRYOPENCALLBACK
Action
(
bool
fullUri
bool
predict
Reason
reason
nsIURI
*
targetURI
nsIURI
*
sourceURI
nsINetworkPredictorVerifier
*
verifier
Predictor
*
predictor
)
;
Action
(
bool
fullUri
bool
predict
Reason
reason
nsIURI
*
targetURI
nsIURI
*
sourceURI
nsINetworkPredictorVerifier
*
verifier
Predictor
*
predictor
uint8_t
stackCount
)
;
static
const
bool
IS_FULL_URI
=
true
;
static
const
bool
IS_ORIGIN
=
false
;
static
const
bool
DO_PREDICT
=
true
;
static
const
bool
DO_LEARN
=
false
;
private
:
virtual
~
Action
(
)
;
bool
mFullUri
:
1
;
bool
mPredict
:
1
;
union
{
PredictorPredictReason
mPredictReason
;
PredictorLearnReason
mLearnReason
;
}
;
nsCOMPtr
<
nsIURI
>
mTargetURI
;
nsCOMPtr
<
nsIURI
>
mSourceURI
;
nsCOMPtr
<
nsINetworkPredictorVerifier
>
mVerifier
;
TimeStamp
mStartTime
;
uint8_t
mStackCount
;
RefPtr
<
Predictor
>
mPredictor
;
}
;
class
CacheabilityAction
:
public
nsICacheEntryOpenCallback
public
nsICacheEntryMetaDataVisitor
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICACHEENTRYOPENCALLBACK
NS_DECL_NSICACHEENTRYMETADATAVISITOR
CacheabilityAction
(
nsIURI
*
targetURI
uint32_t
httpStatus
const
nsCString
&
method
bool
isTracking
bool
couldVary
bool
isNoStore
Predictor
*
predictor
)
:
mTargetURI
(
targetURI
)
mHttpStatus
(
httpStatus
)
mMethod
(
method
)
mIsTracking
(
isTracking
)
mCouldVary
(
couldVary
)
mIsNoStore
(
isNoStore
)
mPredictor
(
predictor
)
{
}
private
:
virtual
~
CacheabilityAction
(
)
{
}
nsCOMPtr
<
nsIURI
>
mTargetURI
;
uint32_t
mHttpStatus
;
nsCString
mMethod
;
bool
mIsTracking
;
bool
mCouldVary
;
bool
mIsNoStore
;
RefPtr
<
Predictor
>
mPredictor
;
nsTArray
<
nsCString
>
mKeysToCheck
;
nsTArray
<
nsCString
>
mValuesToCheck
;
}
;
class
Resetter
:
public
nsICacheEntryOpenCallback
public
nsICacheEntryMetaDataVisitor
public
nsICacheStorageVisitor
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICACHEENTRYOPENCALLBACK
NS_DECL_NSICACHEENTRYMETADATAVISITOR
NS_DECL_NSICACHESTORAGEVISITOR
explicit
Resetter
(
Predictor
*
predictor
)
;
private
:
virtual
~
Resetter
(
)
{
}
void
Complete
(
)
;
uint32_t
mEntriesToVisit
;
nsTArray
<
nsCString
>
mKeysToDelete
;
RefPtr
<
Predictor
>
mPredictor
;
nsTArray
<
nsCOMPtr
<
nsIURI
>
>
mURIsToVisit
;
nsTArray
<
nsCOMPtr
<
nsILoadContextInfo
>
>
mInfosToVisit
;
}
;
class
SpaceCleaner
:
public
nsICacheEntryMetaDataVisitor
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICACHEENTRYMETADATAVISITOR
explicit
SpaceCleaner
(
Predictor
*
predictor
)
:
mLRUStamp
(
0
)
mLRUKeyToDelete
(
nullptr
)
mPredictor
(
predictor
)
{
}
void
Finalize
(
nsICacheEntry
*
entry
)
;
private
:
virtual
~
SpaceCleaner
(
)
{
}
uint32_t
mLRUStamp
;
const
char
*
mLRUKeyToDelete
;
nsTArray
<
nsCString
>
mLongKeysToDelete
;
RefPtr
<
Predictor
>
mPredictor
;
}
;
class
PrefetchListener
:
public
nsIStreamListener
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
PrefetchListener
(
nsINetworkPredictorVerifier
*
verifier
nsIURI
*
uri
Predictor
*
predictor
)
:
mVerifier
(
verifier
)
mURI
(
uri
)
mPredictor
(
predictor
)
{
}
private
:
virtual
~
PrefetchListener
(
)
{
}
nsCOMPtr
<
nsINetworkPredictorVerifier
>
mVerifier
;
nsCOMPtr
<
nsIURI
>
mURI
;
RefPtr
<
Predictor
>
mPredictor
;
TimeStamp
mStartTime
;
}
;
nsresult
InstallObserver
(
)
;
void
RemoveObserver
(
)
;
void
MaybeCleanupOldDBFiles
(
)
;
bool
PredictInternal
(
PredictorPredictReason
reason
nsICacheEntry
*
entry
bool
isNew
bool
fullUri
nsIURI
*
targetURI
nsINetworkPredictorVerifier
*
verifier
uint8_t
stackCount
)
;
void
PredictForLink
(
nsIURI
*
targetURI
nsIURI
*
sourceURI
const
OriginAttributes
&
originAttributes
nsINetworkPredictorVerifier
*
verifier
)
;
bool
PredictForPageload
(
nsICacheEntry
*
entry
nsIURI
*
targetURI
uint8_t
stackCount
bool
fullUri
nsINetworkPredictorVerifier
*
verifier
)
;
bool
PredictForStartup
(
nsICacheEntry
*
entry
bool
fullUri
nsINetworkPredictorVerifier
*
verifier
)
;
void
UpdateRollingLoadCount
(
nsICacheEntry
*
entry
const
uint32_t
flags
const
char
*
key
const
uint32_t
hitCount
const
uint32_t
lastHit
)
;
int32_t
CalculateGlobalDegradation
(
uint32_t
lastLoad
)
;
int32_t
CalculateConfidence
(
uint32_t
hitCount
uint32_t
hitsPossible
uint32_t
lastHit
uint32_t
lastPossible
int32_t
globalDegradation
)
;
void
CalculatePredictions
(
nsICacheEntry
*
entry
nsIURI
*
referrer
uint32_t
lastLoad
uint32_t
loadCount
int32_t
globalDegradation
bool
fullUri
)
;
enum
PrefetchIgnoreReason
{
PREFETCH_OK
NOT_FULL_URI
NO_REFERRER
MISSED_A_LOAD
PREFETCH_DISABLED
PREFETCH_DISABLED_VIA_COUNT
CONFIDENCE_TOO_LOW
}
;
void
SetupPrediction
(
int32_t
confidence
uint32_t
flags
const
nsCString
&
uri
PrefetchIgnoreReason
reason
)
;
nsresult
Prefetch
(
nsIURI
*
uri
nsIURI
*
referrer
const
OriginAttributes
&
originAttributes
nsINetworkPredictorVerifier
*
verifier
)
;
bool
RunPredictions
(
nsIURI
*
referrer
const
OriginAttributes
&
originAttributes
nsINetworkPredictorVerifier
*
verifier
)
;
bool
WouldRedirect
(
nsICacheEntry
*
entry
uint32_t
loadCount
uint32_t
lastLoad
int32_t
globalDegradation
nsIURI
*
*
redirectURI
)
;
void
LearnInternal
(
PredictorLearnReason
reason
nsICacheEntry
*
entry
bool
isNew
bool
fullUri
nsIURI
*
targetURI
nsIURI
*
sourceURI
)
;
void
LearnForSubresource
(
nsICacheEntry
*
entry
nsIURI
*
targetURI
)
;
void
LearnForRedirect
(
nsICacheEntry
*
entry
nsIURI
*
targetURI
)
;
void
MaybeLearnForStartup
(
nsIURI
*
uri
bool
fullUri
const
OriginAttributes
&
originAttributes
)
;
void
LearnForStartup
(
nsICacheEntry
*
entry
nsIURI
*
targetURI
)
;
bool
ParseMetaDataEntry
(
const
char
*
key
const
char
*
value
nsCString
&
uri
uint32_t
&
hitCount
uint32_t
&
lastHit
uint32_t
&
flags
)
;
void
UpdateCacheabilityInternal
(
nsIURI
*
sourceURI
nsIURI
*
targetURI
uint32_t
httpStatus
const
nsCString
&
method
const
OriginAttributes
&
originAttributes
bool
isTracking
bool
couldVary
bool
isNoStore
)
;
void
SanitizePrefs
(
)
;
bool
mInitialized
;
bool
mEnabled
;
bool
mEnableHoverOnSSL
;
bool
mEnablePrefetch
;
int32_t
mPageDegradationDay
;
int32_t
mPageDegradationWeek
;
int32_t
mPageDegradationMonth
;
int32_t
mPageDegradationYear
;
int32_t
mPageDegradationMax
;
int32_t
mSubresourceDegradationDay
;
int32_t
mSubresourceDegradationWeek
;
int32_t
mSubresourceDegradationMonth
;
int32_t
mSubresourceDegradationYear
;
int32_t
mSubresourceDegradationMax
;
int32_t
mPrefetchRollingLoadCount
;
int32_t
mPrefetchMinConfidence
;
int32_t
mPreconnectMinConfidence
;
int32_t
mPreresolveMinConfidence
;
int32_t
mPrefetchForceValidFor
;
int32_t
mMaxResourcesPerEntry
;
bool
mCleanedUp
;
nsCOMPtr
<
nsITimer
>
mCleanupTimer
;
nsTArray
<
nsCString
>
mKeysToOperateOn
;
nsTArray
<
nsCString
>
mValuesToOperateOn
;
nsCOMPtr
<
nsICacheStorageService
>
mCacheStorageService
;
nsCOMPtr
<
nsIIOService
>
mIOService
;
nsCOMPtr
<
nsISpeculativeConnect
>
mSpeculativeService
;
nsCOMPtr
<
nsIURI
>
mStartupURI
;
uint32_t
mStartupTime
;
uint32_t
mLastStartupTime
;
int32_t
mStartupCount
;
uint32_t
mMaxURILength
;
nsCOMPtr
<
nsIDNSService
>
mDnsService
;
RefPtr
<
DNSListener
>
mDNSListener
;
nsTArray
<
nsCOMPtr
<
nsIURI
>
>
mPrefetches
;
nsTArray
<
nsCOMPtr
<
nsIURI
>
>
mPreconnects
;
nsTArray
<
nsCOMPtr
<
nsIURI
>
>
mPreresolves
;
bool
mDoingTests
;
static
Predictor
*
sSelf
;
}
;
}
}
#
endif
