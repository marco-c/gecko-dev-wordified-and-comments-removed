#
include
"
nsChannelClassifier
.
h
"
#
include
"
mozIThirdPartyUtil
.
h
"
#
include
"
nsCharSeparatedTokenizer
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsICacheEntry
.
h
"
#
include
"
nsICachingChannel
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIIOService
.
h
"
#
include
"
nsIParentChannel
.
h
"
#
include
"
nsIPermissionManager
.
h
"
#
include
"
nsIPrivateBrowsingTrackingProtectionWhitelist
.
h
"
#
include
"
nsIProtocolHandler
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsISecureBrowserUI
.
h
"
#
include
"
nsISecurityEventSink
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
ErrorNames
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
namespace
mozilla
{
namespace
net
{
static
LazyLogModule
gChannelClassifierLog
(
"
nsChannelClassifier
"
)
;
#
undef
LOG
#
define
LOG
(
args
)
MOZ_LOG
(
gChannelClassifierLog
LogLevel
:
:
Debug
args
)
#
define
LOG_ENABLED
(
)
MOZ_LOG_TEST
(
gChannelClassifierLog
LogLevel
:
:
Debug
)
NS_IMPL_ISUPPORTS
(
nsChannelClassifier
nsIURIClassifierCallback
)
nsChannelClassifier
:
:
nsChannelClassifier
(
)
:
mIsAllowListed
(
false
)
mSuspendedChannel
(
false
)
{
}
nsresult
nsChannelClassifier
:
:
ShouldEnableTrackingProtection
(
nsIChannel
*
aChannel
bool
*
result
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
NS_ENSURE_ARG
(
result
)
;
*
result
=
false
;
nsCOMPtr
<
nsILoadContext
>
loadContext
;
NS_QueryNotificationCallbacks
(
aChannel
loadContext
)
;
if
(
!
loadContext
|
|
!
(
loadContext
-
>
UseTrackingProtection
(
)
)
)
{
return
NS_OK
;
}
nsresult
rv
;
nsCOMPtr
<
mozIThirdPartyUtil
>
thirdPartyUtil
=
do_GetService
(
THIRDPARTYUTIL_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIHttpChannelInternal
>
chan
=
do_QueryInterface
(
aChannel
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIURI
>
topWinURI
;
rv
=
chan
-
>
GetTopWindowURI
(
getter_AddRefs
(
topWinURI
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
topWinURI
)
{
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
No
window
URI
\
n
"
this
)
)
;
}
nsCOMPtr
<
nsIURI
>
chanURI
;
rv
=
aChannel
-
>
GetURI
(
getter_AddRefs
(
chanURI
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
isThirdPartyChannel
=
true
;
bool
isThirdPartyWindow
=
true
;
thirdPartyUtil
-
>
IsThirdPartyURI
(
chanURI
topWinURI
&
isThirdPartyWindow
)
;
thirdPartyUtil
-
>
IsThirdPartyChannel
(
aChannel
nullptr
&
isThirdPartyChannel
)
;
if
(
!
isThirdPartyWindow
|
|
!
isThirdPartyChannel
)
{
*
result
=
false
;
if
(
LOG_ENABLED
(
)
)
{
nsAutoCString
spec
;
chanURI
-
>
GetSpec
(
spec
)
;
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
Skipping
tracking
protection
checks
"
"
for
first
party
or
top
-
level
load
channel
[
%
p
]
with
uri
%
s
"
this
aChannel
spec
.
get
(
)
)
)
;
}
return
NS_OK
;
}
nsCOMPtr
<
nsIIOService
>
ios
=
do_GetService
(
NS_IOSERVICE_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
const
char
ALLOWLIST_EXAMPLE_PREF
[
]
=
"
channelclassifier
.
allowlist_example
"
;
if
(
!
topWinURI
&
&
Preferences
:
:
GetBool
(
ALLOWLIST_EXAMPLE_PREF
false
)
)
{
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
Allowlisting
test
domain
\
n
"
this
)
)
;
rv
=
ios
-
>
NewURI
(
NS_LITERAL_CSTRING
(
"
http
:
/
/
allowlisted
.
example
.
com
"
)
nullptr
nullptr
getter_AddRefs
(
topWinURI
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsCOMPtr
<
nsIURL
>
url
=
do_QueryInterface
(
topWinURI
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCString
escaped
(
NS_LITERAL_CSTRING
(
"
https
:
/
/
"
)
)
;
nsAutoCString
temp
;
rv
=
url
-
>
GetHostPort
(
temp
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
escaped
.
Append
(
temp
)
;
rv
=
ios
-
>
NewURI
(
escaped
nullptr
nullptr
getter_AddRefs
(
topWinURI
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIPermissionManager
>
permMgr
=
do_GetService
(
NS_PERMISSIONMANAGER_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
uint32_t
permissions
=
nsIPermissionManager
:
:
UNKNOWN_ACTION
;
rv
=
permMgr
-
>
TestPermission
(
topWinURI
"
trackingprotection
"
&
permissions
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
permissions
=
=
nsIPermissionManager
:
:
ALLOW_ACTION
)
{
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
Allowlisting
channel
[
%
p
]
for
%
s
"
this
aChannel
escaped
.
get
(
)
)
)
;
mIsAllowListed
=
true
;
*
result
=
false
;
}
else
{
*
result
=
true
;
}
if
(
NS_UsePrivateBrowsing
(
aChannel
)
)
{
nsCOMPtr
<
nsIPrivateBrowsingTrackingProtectionWhitelist
>
pbmtpWhitelist
=
do_GetService
(
NS_PBTRACKINGPROTECTIONWHITELIST_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
exists
=
false
;
rv
=
pbmtpWhitelist
-
>
ExistsInAllowList
(
topWinURI
&
exists
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
exists
)
{
mIsAllowListed
=
true
;
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
Allowlisting
channel
[
%
p
]
in
PBM
for
%
s
"
this
aChannel
escaped
.
get
(
)
)
)
;
}
*
result
=
!
exists
;
}
if
(
*
result
)
{
if
(
LOG_ENABLED
(
)
)
{
nsAutoCString
topspec
spec
;
topWinURI
-
>
GetSpec
(
topspec
)
;
chanURI
-
>
GetSpec
(
spec
)
;
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
Enabling
tracking
protection
checks
on
"
"
channel
[
%
p
]
with
uri
%
s
for
toplevel
window
%
s
"
this
aChannel
spec
.
get
(
)
topspec
.
get
(
)
)
)
;
}
return
NS_OK
;
}
return
NotifyTrackingProtectionDisabled
(
aChannel
)
;
}
nsresult
nsChannelClassifier
:
:
NotifyTrackingProtectionDisabled
(
nsIChannel
*
aChannel
)
{
nsCOMPtr
<
nsIParentChannel
>
parentChannel
;
NS_QueryNotificationCallbacks
(
aChannel
parentChannel
)
;
if
(
parentChannel
)
{
parentChannel
-
>
NotifyTrackingProtectionDisabled
(
)
;
return
NS_OK
;
}
nsresult
rv
;
nsCOMPtr
<
mozIThirdPartyUtil
>
thirdPartyUtil
=
do_GetService
(
THIRDPARTYUTIL_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
mozIDOMWindowProxy
>
win
;
rv
=
thirdPartyUtil
-
>
GetTopWindowForChannel
(
aChannel
getter_AddRefs
(
win
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
auto
*
pwin
=
nsPIDOMWindowOuter
:
:
From
(
win
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
pwin
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIDocument
>
doc
=
docShell
-
>
GetDocument
(
)
;
NS_ENSURE_TRUE
(
doc
NS_OK
)
;
nsCOMPtr
<
nsISecurityEventSink
>
eventSink
=
do_QueryInterface
(
docShell
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
NS_OK
)
;
uint32_t
state
=
0
;
nsCOMPtr
<
nsISecureBrowserUI
>
securityUI
;
docShell
-
>
GetSecurityUI
(
getter_AddRefs
(
securityUI
)
)
;
if
(
!
securityUI
)
{
return
NS_OK
;
}
doc
-
>
SetHasTrackingContentLoaded
(
true
)
;
securityUI
-
>
GetState
(
&
state
)
;
state
|
=
nsIWebProgressListener
:
:
STATE_LOADED_TRACKING_CONTENT
;
eventSink
-
>
OnSecurityChange
(
nullptr
state
)
;
return
NS_OK
;
}
void
nsChannelClassifier
:
:
Start
(
nsIChannel
*
aChannel
)
{
mChannel
=
aChannel
;
nsresult
rv
=
StartInternal
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
OnClassifyComplete
(
NS_OK
)
;
}
}
nsresult
nsChannelClassifier
:
:
StartInternal
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
nsresult
status
;
mChannel
-
>
GetStatus
(
&
status
)
;
if
(
NS_FAILED
(
status
)
)
return
status
;
if
(
HasBeenClassified
(
mChannel
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
mChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
hasFlags
;
rv
=
NS_URIChainHasFlags
(
uri
nsIProtocolHandler
:
:
URI_DANGEROUS_TO_LOAD
&
hasFlags
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
hasFlags
)
return
NS_ERROR_UNEXPECTED
;
rv
=
NS_URIChainHasFlags
(
uri
nsIProtocolHandler
:
:
URI_IS_LOCAL_FILE
&
hasFlags
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
hasFlags
)
return
NS_ERROR_UNEXPECTED
;
rv
=
NS_URIChainHasFlags
(
uri
nsIProtocolHandler
:
:
URI_IS_UI_RESOURCE
&
hasFlags
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
hasFlags
)
return
NS_ERROR_UNEXPECTED
;
rv
=
NS_URIChainHasFlags
(
uri
nsIProtocolHandler
:
:
URI_IS_LOCAL_RESOURCE
&
hasFlags
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
hasFlags
)
return
NS_ERROR_UNEXPECTED
;
nsAutoCString
whitelisted
;
Preferences
:
:
GetCString
(
"
urlclassifier
.
skipHostnames
"
&
whitelisted
)
;
if
(
!
whitelisted
.
IsEmpty
(
)
)
{
ToLowerCase
(
whitelisted
)
;
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
StartInternal
whitelisted
hostnames
=
%
s
"
this
whitelisted
.
get
(
)
)
)
;
if
(
IsHostnameWhitelisted
(
uri
whitelisted
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
}
nsCOMPtr
<
nsIURIClassifier
>
uriClassifier
=
do_GetService
(
NS_URICLASSIFIERSERVICE_CONTRACTID
&
rv
)
;
if
(
rv
=
=
NS_ERROR_FACTORY_NOT_REGISTERED
|
|
rv
=
=
NS_ERROR_NOT_AVAILABLE
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIScriptSecurityManager
>
securityManager
=
do_GetService
(
NS_SCRIPTSECURITYMANAGER_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
;
rv
=
securityManager
-
>
GetChannelURIPrincipal
(
mChannel
getter_AddRefs
(
principal
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
expectCallback
;
bool
trackingProtectionEnabled
=
false
;
(
void
)
ShouldEnableTrackingProtection
(
mChannel
&
trackingProtectionEnabled
)
;
if
(
LOG_ENABLED
(
)
)
{
nsAutoCString
uriSpec
principalSpec
;
uri
-
>
GetSpec
(
uriSpec
)
;
nsCOMPtr
<
nsIURI
>
principalURI
;
principal
-
>
GetURI
(
getter_AddRefs
(
principalURI
)
)
;
principalURI
-
>
GetSpec
(
principalSpec
)
;
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
Classifying
principal
%
s
on
channel
with
"
"
uri
%
s
"
this
principalSpec
.
get
(
)
uriSpec
.
get
(
)
)
)
;
}
rv
=
uriClassifier
-
>
Classify
(
principal
trackingProtectionEnabled
this
&
expectCallback
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
expectCallback
)
{
rv
=
mChannel
-
>
Suspend
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
Couldn
'
t
suspend
channel
"
this
)
)
;
return
rv
;
}
mSuspendedChannel
=
true
;
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
suspended
channel
%
p
"
this
mChannel
.
get
(
)
)
)
;
}
else
{
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
not
expecting
callback
"
this
)
)
;
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
bool
nsChannelClassifier
:
:
IsHostnameWhitelisted
(
nsIURI
*
aUri
const
nsACString
&
aWhitelisted
)
{
nsAutoCString
host
;
nsresult
rv
=
aUri
-
>
GetHost
(
host
)
;
if
(
NS_FAILED
(
rv
)
|
|
host
.
IsEmpty
(
)
)
{
return
false
;
}
ToLowerCase
(
host
)
;
nsCCharSeparatedTokenizer
tokenizer
(
aWhitelisted
'
'
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
const
nsCSubstring
&
token
=
tokenizer
.
nextToken
(
)
;
if
(
token
.
Equals
(
host
)
)
{
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
StartInternal
skipping
%
s
(
whitelisted
)
"
this
host
.
get
(
)
)
)
;
return
true
;
}
}
return
false
;
}
void
nsChannelClassifier
:
:
MarkEntryClassified
(
nsresult
status
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
status
=
=
NS_ERROR_TRACKING_URI
|
|
mIsAllowListed
)
{
return
;
}
if
(
LOG_ENABLED
(
)
)
{
nsAutoCString
errorName
;
GetErrorName
(
status
errorName
)
;
nsCOMPtr
<
nsIURI
>
uri
;
mChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
nsAutoCString
spec
;
uri
-
>
GetAsciiSpec
(
spec
)
;
LOG
(
(
"
nsChannelClassifier
:
:
MarkEntryClassified
[
%
s
]
%
s
"
errorName
.
get
(
)
spec
.
get
(
)
)
)
;
}
nsCOMPtr
<
nsICachingChannel
>
cachingChannel
=
do_QueryInterface
(
mChannel
)
;
if
(
!
cachingChannel
)
{
return
;
}
nsCOMPtr
<
nsISupports
>
cacheToken
;
cachingChannel
-
>
GetCacheToken
(
getter_AddRefs
(
cacheToken
)
)
;
if
(
!
cacheToken
)
{
return
;
}
nsCOMPtr
<
nsICacheEntry
>
cacheEntry
=
do_QueryInterface
(
cacheToken
)
;
if
(
!
cacheEntry
)
{
return
;
}
cacheEntry
-
>
SetMetaDataElement
(
"
necko
:
classified
"
NS_SUCCEEDED
(
status
)
?
"
1
"
:
nullptr
)
;
}
bool
nsChannelClassifier
:
:
HasBeenClassified
(
nsIChannel
*
aChannel
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
nsCOMPtr
<
nsICachingChannel
>
cachingChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
!
cachingChannel
)
{
return
false
;
}
bool
fromCache
;
if
(
NS_FAILED
(
cachingChannel
-
>
IsFromCache
(
&
fromCache
)
)
|
|
!
fromCache
)
{
return
false
;
}
nsCOMPtr
<
nsISupports
>
cacheToken
;
cachingChannel
-
>
GetCacheToken
(
getter_AddRefs
(
cacheToken
)
)
;
if
(
!
cacheToken
)
{
return
false
;
}
nsCOMPtr
<
nsICacheEntry
>
cacheEntry
=
do_QueryInterface
(
cacheToken
)
;
if
(
!
cacheEntry
)
{
return
false
;
}
nsXPIDLCString
tag
;
cacheEntry
-
>
GetMetaDataElement
(
"
necko
:
classified
"
getter_Copies
(
tag
)
)
;
return
tag
.
EqualsLiteral
(
"
1
"
)
;
}
bool
nsChannelClassifier
:
:
SameLoadingURI
(
nsIDocument
*
aDoc
nsIChannel
*
aChannel
)
{
nsCOMPtr
<
nsIURI
>
docURI
=
aDoc
-
>
GetDocumentURI
(
)
;
nsCOMPtr
<
nsILoadInfo
>
channelLoadInfo
=
aChannel
-
>
GetLoadInfo
(
)
;
if
(
!
channelLoadInfo
|
|
!
docURI
)
{
return
false
;
}
nsCOMPtr
<
nsIPrincipal
>
channelLoadingPrincipal
=
channelLoadInfo
-
>
LoadingPrincipal
(
)
;
if
(
!
channelLoadingPrincipal
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
channelLoadingURI
;
channelLoadingPrincipal
-
>
GetURI
(
getter_AddRefs
(
channelLoadingURI
)
)
;
if
(
!
channelLoadingURI
)
{
return
false
;
}
bool
equals
=
false
;
nsresult
rv
=
docURI
-
>
EqualsExceptRef
(
channelLoadingURI
&
equals
)
;
return
NS_SUCCEEDED
(
rv
)
&
&
equals
;
}
nsresult
nsChannelClassifier
:
:
SetBlockedTrackingContent
(
nsIChannel
*
channel
)
{
nsCOMPtr
<
nsIParentChannel
>
parentChannel
;
NS_QueryNotificationCallbacks
(
channel
parentChannel
)
;
if
(
parentChannel
)
{
return
NS_OK
;
}
nsresult
rv
;
nsCOMPtr
<
mozIDOMWindowProxy
>
win
;
nsCOMPtr
<
mozIThirdPartyUtil
>
thirdPartyUtil
=
do_GetService
(
THIRDPARTYUTIL_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
NS_OK
)
;
rv
=
thirdPartyUtil
-
>
GetTopWindowForChannel
(
channel
getter_AddRefs
(
win
)
)
;
NS_ENSURE_SUCCESS
(
rv
NS_OK
)
;
auto
*
pwin
=
nsPIDOMWindowOuter
:
:
From
(
win
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
pwin
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIDocument
>
doc
=
docShell
-
>
GetDocument
(
)
;
NS_ENSURE_TRUE
(
doc
NS_OK
)
;
if
(
!
SameLoadingURI
(
doc
channel
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsISecurityEventSink
>
eventSink
=
do_QueryInterface
(
docShell
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
NS_OK
)
;
uint32_t
state
=
0
;
nsCOMPtr
<
nsISecureBrowserUI
>
securityUI
;
docShell
-
>
GetSecurityUI
(
getter_AddRefs
(
securityUI
)
)
;
if
(
!
securityUI
)
{
return
NS_OK
;
}
doc
-
>
SetHasTrackingContentBlocked
(
true
)
;
securityUI
-
>
GetState
(
&
state
)
;
state
|
=
nsIWebProgressListener
:
:
STATE_BLOCKED_TRACKING_CONTENT
;
eventSink
-
>
OnSecurityChange
(
nullptr
state
)
;
nsCOMPtr
<
nsIURI
>
uri
;
channel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
nsCString
utf8spec
;
uri
-
>
GetSpec
(
utf8spec
)
;
NS_ConvertUTF8toUTF16
spec
(
utf8spec
)
;
const
char16_t
*
params
[
]
=
{
spec
.
get
(
)
}
;
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
Tracking
Protection
"
)
doc
nsContentUtils
:
:
eNECKO_PROPERTIES
"
TrackingUriBlocked
"
params
ArrayLength
(
params
)
)
;
return
NS_OK
;
}
nsresult
nsChannelClassifier
:
:
IsTrackerWhitelisted
(
)
{
nsresult
rv
;
nsCOMPtr
<
nsIURIClassifier
>
uriClassifier
=
do_GetService
(
NS_URICLASSIFIERSERVICE_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
tables
;
Preferences
:
:
GetCString
(
"
urlclassifier
.
trackingWhitelistTable
"
&
tables
)
;
if
(
tables
.
IsEmpty
(
)
)
{
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
IsTrackerWhitelisted
whitelist
disabled
"
this
)
)
;
return
NS_ERROR_TRACKING_URI
;
}
nsCOMPtr
<
nsIHttpChannelInternal
>
chan
=
do_QueryInterface
(
mChannel
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIURI
>
topWinURI
;
rv
=
chan
-
>
GetTopWindowURI
(
getter_AddRefs
(
topWinURI
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
topWinURI
)
{
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
No
window
URI
"
this
)
)
;
return
NS_ERROR_TRACKING_URI
;
}
nsCOMPtr
<
nsIScriptSecurityManager
>
securityManager
=
do_GetService
(
NS_SCRIPTSECURITYMANAGER_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIPrincipal
>
chanPrincipal
;
rv
=
securityManager
-
>
GetChannelURIPrincipal
(
mChannel
getter_AddRefs
(
chanPrincipal
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
pageHostname
resourceDomain
;
rv
=
topWinURI
-
>
GetHost
(
pageHostname
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
chanPrincipal
-
>
GetBaseDomain
(
resourceDomain
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
whitelistEntry
=
NS_LITERAL_CSTRING
(
"
http
:
/
/
"
)
+
pageHostname
+
NS_LITERAL_CSTRING
(
"
/
?
resource
=
"
)
+
resourceDomain
;
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
Looking
for
%
s
in
the
whitelist
"
this
whitelistEntry
.
get
(
)
)
)
;
nsCOMPtr
<
nsIURI
>
whitelistURI
;
rv
=
NS_NewURI
(
getter_AddRefs
(
whitelistURI
)
whitelistEntry
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
results
;
rv
=
uriClassifier
-
>
ClassifyLocalWithTables
(
whitelistURI
tables
results
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
results
.
IsEmpty
(
)
)
{
return
NS_OK
;
}
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
%
s
is
not
in
the
whitelist
"
this
whitelistEntry
.
get
(
)
)
)
;
return
NS_ERROR_TRACKING_URI
;
}
NS_IMETHODIMP
nsChannelClassifier
:
:
OnClassifyComplete
(
nsresult
aErrorCode
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
aErrorCode
=
=
NS_ERROR_TRACKING_URI
&
&
NS_SUCCEEDED
(
IsTrackerWhitelisted
(
)
)
)
{
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
OnClassifyComplete
tracker
found
"
"
in
whitelist
so
we
won
'
t
block
it
"
this
)
)
;
aErrorCode
=
NS_OK
;
}
if
(
mSuspendedChannel
)
{
nsAutoCString
errorName
;
if
(
LOG_ENABLED
(
)
)
{
GetErrorName
(
aErrorCode
errorName
)
;
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
OnClassifyComplete
%
s
(
suspended
channel
)
"
this
errorName
.
get
(
)
)
)
;
}
MarkEntryClassified
(
aErrorCode
)
;
if
(
NS_FAILED
(
aErrorCode
)
)
{
if
(
LOG_ENABLED
(
)
)
{
nsCOMPtr
<
nsIURI
>
uri
;
mChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
nsAutoCString
spec
;
uri
-
>
GetSpec
(
spec
)
;
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
cancelling
channel
%
p
for
%
s
"
"
with
error
code
%
s
"
this
mChannel
.
get
(
)
spec
.
get
(
)
errorName
.
get
(
)
)
)
;
}
if
(
aErrorCode
=
=
NS_ERROR_TRACKING_URI
)
{
SetBlockedTrackingContent
(
mChannel
)
;
}
mChannel
-
>
Cancel
(
aErrorCode
)
;
}
LOG
(
(
"
nsChannelClassifier
[
%
p
]
:
resuming
channel
%
p
from
"
"
OnClassifyComplete
"
this
mChannel
.
get
(
)
)
)
;
mChannel
-
>
Resume
(
)
;
}
mChannel
=
nullptr
;
return
NS_OK
;
}
}
}
