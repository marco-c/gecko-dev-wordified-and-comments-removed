#
include
"
SimpleURIUnknownSchemes
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
static
mozilla
:
:
LazyLogModule
gURLLog
(
"
URL
"
)
;
namespace
mozilla
:
:
net
{
nsTArray
<
nsCString
>
ParseUriSchemes
(
const
nsCString
&
inputStrList
)
{
nsTArray
<
nsCString
>
result
;
for
(
const
auto
&
scheme
:
inputStrList
.
Split
(
'
'
)
)
{
nsCString
*
str
=
result
.
AppendElement
(
scheme
)
;
str
-
>
StripWhitespace
(
)
;
}
return
result
;
}
void
SimpleURIUnknownSchemes
:
:
ParseAndMergePrefSchemes
(
)
{
AutoWriteLock
lock
(
mSchemeLock
)
;
ParseAndMergePrefSchemesLocked
(
)
;
}
void
SimpleURIUnknownSchemes
:
:
ParseAndMergePrefSchemesLocked
(
)
{
nsAutoCString
prefListStr
;
Preferences
:
:
GetCString
(
SIMPLE_URI_SCHEMES_PREF
prefListStr
)
;
nsTArray
<
nsCString
>
prefSchemes
=
ParseUriSchemes
(
prefListStr
)
;
MergeSimpleURISchemes
(
prefSchemes
mRemoteSettingsURISchemes
)
;
}
void
SimpleURIUnknownSchemes
:
:
SetAndMergeRemoteSchemes
(
const
nsTArray
<
nsCString
>
&
remoteSettingsList
)
{
MOZ_LOG
(
gURLLog
LogLevel
:
:
Debug
(
"
SimpleURIUnknownSchemes
:
:
SetAndMergeRemoteSchemes
(
)
"
)
)
;
AutoWriteLock
lock
(
mSchemeLock
)
;
mRemoteSettingsURISchemes
=
remoteSettingsList
.
Clone
(
)
;
ParseAndMergePrefSchemesLocked
(
)
;
}
void
SimpleURIUnknownSchemes
:
:
MergeSimpleURISchemes
(
const
nsTArray
<
nsCString
>
&
prefList
const
nsTArray
<
nsCString
>
&
remoteSettingsList
)
{
mSimpleURISchemes
.
Clear
(
)
;
for
(
const
nsCString
&
scheme
:
prefList
)
{
mSimpleURISchemes
.
Insert
(
scheme
)
;
}
for
(
const
nsCString
&
scheme
:
remoteSettingsList
)
{
mSimpleURISchemes
.
Insert
(
scheme
)
;
}
}
bool
SimpleURIUnknownSchemes
:
:
IsSimpleURIUnknownScheme
(
const
nsACString
&
aScheme
)
{
AutoReadLock
lock
(
mSchemeLock
)
;
return
mSimpleURISchemes
.
Contains
(
aScheme
)
;
}
void
SimpleURIUnknownSchemes
:
:
GetRemoteSchemes
(
nsTArray
<
nsCString
>
&
aArray
)
{
aArray
.
Clear
(
)
;
AutoReadLock
lock
(
mSchemeLock
)
;
for
(
const
auto
&
uri
:
mRemoteSettingsURISchemes
)
{
aArray
.
AppendElement
(
uri
)
;
}
}
}
