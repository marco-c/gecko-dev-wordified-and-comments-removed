#
ifndef
HostRecordQueue_h__
#
define
HostRecordQueue_h__
#
include
<
functional
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsHostRecord
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
namespace
mozilla
{
namespace
net
{
class
HostRecordQueue
final
{
public
:
HostRecordQueue
(
)
=
default
;
~
HostRecordQueue
(
)
=
default
;
HostRecordQueue
(
const
HostRecordQueue
&
aCopy
)
=
delete
;
HostRecordQueue
&
operator
=
(
const
HostRecordQueue
&
aCopy
)
=
delete
;
uint32_t
PendingCount
(
)
const
{
return
mPendingCount
;
}
uint32_t
EvictionQSize
(
)
const
{
return
mEvictionQSize
;
}
void
InsertRecord
(
nsHostRecord
*
aRec
nsIDNSService
:
:
DNSFlags
aFlags
const
MutexAutoLock
&
aProofOfLock
)
;
void
AddToEvictionQ
(
nsHostRecord
*
aRec
uint32_t
aMaxCacheEntries
nsRefPtrHashtable
<
nsGenericHashKey
<
nsHostKey
>
nsHostRecord
>
&
aDB
const
MutexAutoLock
&
aProofOfLock
)
;
void
MaybeRenewHostRecord
(
nsHostRecord
*
aRec
const
MutexAutoLock
&
aProofOfLock
)
;
void
FlushEvictionQ
(
nsRefPtrHashtable
<
nsGenericHashKey
<
nsHostKey
>
nsHostRecord
>
&
aDB
const
MutexAutoLock
&
aProofOfLock
)
;
void
MaybeRemoveFromQ
(
nsHostRecord
*
aRec
const
MutexAutoLock
&
aProofOfLock
)
;
void
MoveToAnotherPendingQ
(
nsHostRecord
*
aRec
nsIDNSService
:
:
DNSFlags
aFlags
const
MutexAutoLock
&
aProofOfLock
)
;
already_AddRefed
<
nsHostRecord
>
Dequeue
(
bool
aHighQOnly
const
MutexAutoLock
&
aProofOfLock
)
;
void
ClearAll
(
const
std
:
:
function
<
void
(
nsHostRecord
*
)
>
&
aCallback
const
MutexAutoLock
&
aProofOfLock
)
;
private
:
Atomic
<
uint32_t
>
mPendingCount
{
0
}
;
Atomic
<
uint32_t
>
mEvictionQSize
{
0
}
;
LinkedList
<
RefPtr
<
nsHostRecord
>
>
mHighQ
;
LinkedList
<
RefPtr
<
nsHostRecord
>
>
mMediumQ
;
LinkedList
<
RefPtr
<
nsHostRecord
>
>
mLowQ
;
LinkedList
<
RefPtr
<
nsHostRecord
>
>
mEvictionQ
;
}
;
}
}
#
endif
