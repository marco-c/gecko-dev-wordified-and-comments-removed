#
ifndef
TRRServiceBase_h_
#
define
TRRServiceBase_h_
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
net
/
rust_helper
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIDNSService
.
h
"
#
include
"
nsIProtocolProxyService2
.
h
"
class
nsICancelable
;
class
nsIProxyInfo
;
namespace
mozilla
{
namespace
net
{
class
nsHttpConnectionInfo
;
static
const
char
kRolloutURIPref
[
]
=
"
doh
-
rollout
.
uri
"
;
static
const
char
kRolloutModePref
[
]
=
"
doh
-
rollout
.
mode
"
;
class
TRRServiceBase
:
public
nsIProxyConfigChangedCallback
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
TRRServiceBase
(
)
;
nsIDNSService
:
:
ResolverMode
Mode
(
)
{
return
mMode
;
}
virtual
void
GetURI
(
nsACString
&
result
)
=
0
;
already_AddRefed
<
nsHttpConnectionInfo
>
TRRConnectionInfo
(
)
;
virtual
void
InitTRRConnectionInfo
(
)
;
bool
TRRConnectionInfoInited
(
)
const
{
return
mTRRConnectionInfoInited
;
}
protected
:
virtual
~
TRRServiceBase
(
)
;
virtual
bool
MaybeSetPrivateURI
(
const
nsACString
&
aURI
)
=
0
;
void
ProcessURITemplate
(
nsACString
&
aURI
)
;
void
CheckURIPrefs
(
)
;
void
OnTRRModeChange
(
)
;
void
OnTRRURIChange
(
)
;
void
DoReadEtcHostsFile
(
ParsingCallback
aCallback
)
;
virtual
void
ReadEtcHostsFile
(
)
=
0
;
void
AsyncCreateTRRConnectionInfo
(
const
nsACString
&
aURI
)
;
void
AsyncCreateTRRConnectionInfoInternal
(
const
nsACString
&
aURI
)
;
virtual
void
SetDefaultTRRConnectionInfo
(
nsHttpConnectionInfo
*
aConnInfo
)
;
void
RegisterProxyChangeListener
(
)
;
void
UnregisterProxyChangeListener
(
)
;
nsCString
mPrivateURI
;
nsCString
mURIPref
;
nsCString
mRolloutURIPref
;
nsCString
mDefaultURIPref
;
nsCString
mOHTTPURIPref
;
Atomic
<
nsIDNSService
:
:
ResolverMode
Relaxed
>
mMode
{
nsIDNSService
:
:
MODE_NATIVEONLY
}
;
Atomic
<
bool
Relaxed
>
mURISetByDetection
{
false
}
;
Atomic
<
bool
Relaxed
>
mTRRConnectionInfoInited
{
false
}
;
DataMutex
<
RefPtr
<
nsHttpConnectionInfo
>
>
mDefaultTRRConnectionInfo
;
}
;
}
}
#
endif
