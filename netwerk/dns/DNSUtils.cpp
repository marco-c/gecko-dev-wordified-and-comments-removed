#
include
"
DNSUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsHttpHandler
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIIOService
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
TRRServiceChannel
.
h
"
#
include
"
TRRLoadInfo
.
h
"
namespace
mozilla
{
namespace
net
{
static
void
InitHttpHandler
(
)
{
nsresult
rv
;
nsCOMPtr
<
nsIIOService
>
ios
=
do_GetIOService
(
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
nsCOMPtr
<
nsIProtocolHandler
>
handler
;
rv
=
ios
-
>
GetProtocolHandler
(
"
http
"
getter_AddRefs
(
handler
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
}
nsresult
DNSUtils
:
:
CreateChannelHelper
(
nsIURI
*
aUri
nsIChannel
*
*
aResult
)
{
*
aResult
=
nullptr
;
if
(
NS_IsMainThread
(
)
&
&
!
XRE_IsSocketProcess
(
)
)
{
nsresult
rv
;
nsCOMPtr
<
nsIIOService
>
ios
(
do_GetIOService
(
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_NewChannel
(
aResult
aUri
nsContentUtils
:
:
GetSystemPrincipal
(
)
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
nsIContentPolicy
:
:
TYPE_OTHER
nullptr
nullptr
nullptr
nullptr
nsIRequest
:
:
LOAD_NORMAL
ios
)
;
}
if
(
!
gHttpHandler
)
{
nsCOMPtr
<
nsIEventTarget
>
main
=
GetMainThreadEventTarget
(
)
;
if
(
main
)
{
SyncRunnable
:
:
DispatchToThread
(
main
new
SyncRunnable
(
NS_NewRunnableFunction
(
"
InitHttpHandler
"
[
]
(
)
{
InitHttpHandler
(
)
;
}
)
)
)
;
}
}
if
(
!
gHttpHandler
)
{
return
NS_ERROR_UNEXPECTED
;
}
RefPtr
<
TRRLoadInfo
>
loadInfo
=
new
TRRLoadInfo
(
aUri
nsIContentPolicy
:
:
TYPE_OTHER
)
;
return
gHttpHandler
-
>
CreateTRRServiceChannel
(
aUri
nullptr
0
nullptr
loadInfo
aResult
)
;
}
}
}
