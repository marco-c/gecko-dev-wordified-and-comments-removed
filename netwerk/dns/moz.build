with
Files
(
'
*
*
'
)
:
BUG_COMPONENT
=
(
'
Core
'
'
Networking
:
DNS
'
)
DIRS
+
=
[
'
mdns
'
'
tests
'
]
XPIDL_SOURCES
+
=
[
'
nsIDNSByTypeRecord
.
idl
'
'
nsIDNSListener
.
idl
'
'
nsIDNSRecord
.
idl
'
'
nsIDNSService
.
idl
'
'
nsIEffectiveTLDService
.
idl
'
'
nsIIDNService
.
idl
'
'
nsINativeDNSResolverOverride
.
idl
'
'
nsPIDNSService
.
idl
'
]
XPIDL_MODULE
=
'
necko_dns
'
EXTRA_JS_MODULES
[
'
netwerk
-
dns
'
]
+
=
[
'
PublicSuffixList
.
jsm
'
]
XPCSHELL_TESTS_MANIFESTS
+
=
[
'
tests
/
unit
/
xpcshell
.
ini
'
]
EXPORTS
+
=
[
'
nsEffectiveTLDService
.
h
'
]
EXPORTS
.
mozilla
.
net
+
=
[
'
ChildDNSService
.
h
'
'
DNS
.
h
'
'
DNSListenerProxy
.
h
'
'
DNSRequestChild
.
h
'
'
DNSRequestParent
.
h
'
'
IDNBlocklistUtils
.
h
'
'
PDNSParams
.
h
'
'
TRRService
.
h
'
]
SOURCES
+
=
[
'
nsEffectiveTLDService
.
cpp
'
'
nsHostResolver
.
cpp
'
]
UNIFIED_SOURCES
+
=
[
'
ChildDNSService
.
cpp
'
'
DNS
.
cpp
'
'
DNSListenerProxy
.
cpp
'
'
DNSRequestChild
.
cpp
'
'
DNSRequestParent
.
cpp
'
'
GetAddrInfo
.
cpp
'
'
IDNBlocklistUtils
.
cpp
'
'
nsDNSService2
.
cpp
'
'
nsIDNService
.
cpp
'
'
punycode
.
c
'
'
TRR
.
cpp
'
'
TRRService
.
cpp
'
]
IPDL_SOURCES
=
[
'
PDNSRequest
.
ipdl
'
'
PDNSRequestParams
.
ipdlh
'
]
include
(
'
/
ipc
/
chromium
/
chromium
-
config
.
mozbuild
'
)
FINAL_LIBRARY
=
'
xul
'
GeneratedFile
(
'
etld_data
.
inc
'
script
=
'
prepare_tlds
.
py
'
inputs
=
[
'
effective_tld_names
.
dat
'
]
)
LOCAL_INCLUDES
+
=
[
'
/
netwerk
/
base
'
'
/
netwerk
/
protocol
/
http
'
]
USE_LIBS
+
=
[
'
icu
'
]
if
CONFIG
[
'
CC_TYPE
'
]
in
(
'
clang
'
'
gcc
'
)
:
CXXFLAGS
+
=
[
'
-
Wno
-
error
=
shadow
'
]
