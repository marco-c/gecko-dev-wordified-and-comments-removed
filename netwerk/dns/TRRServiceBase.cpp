#
include
"
TRRServiceBase
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsHostResolver
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsIOService
.
h
"
#
include
"
nsIDNSService
.
h
"
#
include
"
DNSLogging
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
namespace
mozilla
{
namespace
net
{
TRRServiceBase
:
:
TRRServiceBase
(
)
:
mMode
(
nsIDNSService
:
:
MODE_NATIVEONLY
)
mURISetByDetection
(
false
)
{
}
void
TRRServiceBase
:
:
ProcessURITemplate
(
nsACString
&
aURI
)
{
if
(
aURI
.
IsEmpty
(
)
)
{
return
;
}
nsAutoCString
scheme
;
nsCOMPtr
<
nsIIOService
>
ios
(
do_GetIOService
(
)
)
;
if
(
ios
)
{
ios
-
>
ExtractScheme
(
aURI
scheme
)
;
}
if
(
!
scheme
.
Equals
(
"
https
"
)
)
{
LOG
(
(
"
TRRService
TRR
URI
%
s
is
not
https
.
Not
used
.
\
n
"
PromiseFlatCString
(
aURI
)
.
get
(
)
)
)
;
aURI
.
Truncate
(
)
;
return
;
}
nsAutoCString
uri
(
aURI
)
;
do
{
nsCCharSeparatedTokenizer
openBrace
(
uri
'
{
'
)
;
if
(
openBrace
.
hasMoreTokens
(
)
)
{
nsAutoCString
prefix
(
openBrace
.
nextToken
(
)
)
;
const
nsACString
&
endBrace
=
openBrace
.
nextToken
(
)
;
nsCCharSeparatedTokenizer
closeBrace
(
endBrace
'
}
'
)
;
if
(
closeBrace
.
hasMoreTokens
(
)
)
{
closeBrace
.
nextToken
(
)
;
nsAutoCString
suffix
(
closeBrace
.
nextToken
(
)
)
;
uri
=
prefix
+
suffix
;
}
else
{
break
;
}
}
else
{
break
;
}
}
while
(
true
)
;
aURI
=
uri
;
}
void
TRRServiceBase
:
:
CheckURIPrefs
(
)
{
mURISetByDetection
=
false
;
if
(
!
mURIPref
.
IsEmpty
(
)
)
{
MaybeSetPrivateURI
(
mURIPref
)
;
return
;
}
if
(
!
mRolloutURIPref
.
IsEmpty
(
)
)
{
MaybeSetPrivateURI
(
mRolloutURIPref
)
;
return
;
}
MaybeSetPrivateURI
(
mDefaultURIPref
)
;
}
nsIDNSService
:
:
ResolverMode
ModeFromPrefs
(
)
{
auto
processPrefValue
=
[
]
(
uint32_t
value
)
-
>
nsIDNSService
:
:
ResolverMode
{
if
(
value
=
=
nsIDNSService
:
:
MODE_RESERVED1
|
|
value
=
=
nsIDNSService
:
:
MODE_RESERVED4
|
|
value
>
nsIDNSService
:
:
MODE_TRROFF
)
{
return
nsIDNSService
:
:
MODE_TRROFF
;
}
return
static_cast
<
nsIDNSService
:
:
ResolverMode
>
(
value
)
;
}
;
uint32_t
tmp
;
if
(
NS_FAILED
(
Preferences
:
:
GetUint
(
"
network
.
trr
.
mode
"
&
tmp
)
)
)
{
tmp
=
0
;
}
nsIDNSService
:
:
ResolverMode
modeFromPref
=
processPrefValue
(
tmp
)
;
if
(
modeFromPref
!
=
nsIDNSService
:
:
MODE_NATIVEONLY
)
{
return
modeFromPref
;
}
if
(
NS_FAILED
(
Preferences
:
:
GetUint
(
kRolloutModePref
&
tmp
)
)
)
{
tmp
=
0
;
}
modeFromPref
=
processPrefValue
(
tmp
)
;
return
modeFromPref
;
}
void
TRRServiceBase
:
:
OnTRRModeChange
(
)
{
uint32_t
oldMode
=
mMode
;
mMode
=
ModeFromPrefs
(
)
;
if
(
mMode
!
=
oldMode
)
{
LOG
(
(
"
TRR
Mode
changed
from
%
d
to
%
d
"
oldMode
int
(
mMode
)
)
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
NotifyObservers
(
nullptr
NS_NETWORK_TRR_MODE_CHANGED_TOPIC
nullptr
)
;
}
}
static
bool
readHosts
=
false
;
if
(
(
mMode
=
=
nsIDNSService
:
:
MODE_TRRFIRST
|
|
mMode
=
=
nsIDNSService
:
:
MODE_TRRONLY
)
&
&
!
readHosts
)
{
readHosts
=
true
;
ReadEtcHostsFile
(
)
;
}
}
void
TRRServiceBase
:
:
OnTRRURIChange
(
)
{
Preferences
:
:
GetCString
(
"
network
.
trr
.
uri
"
mURIPref
)
;
Preferences
:
:
GetCString
(
kRolloutURIPref
mRolloutURIPref
)
;
Preferences
:
:
GetCString
(
"
network
.
trr
.
default_provider_uri
"
mDefaultURIPref
)
;
CheckURIPrefs
(
)
;
}
}
}
