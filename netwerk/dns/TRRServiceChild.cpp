#
include
"
mozilla
/
net
/
TRRServiceChild
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
DataStorage
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsIDNService
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
TRRService
.
h
"
namespace
mozilla
{
namespace
net
{
static
StaticRefPtr
<
nsIDNSService
>
sDNSService
;
void
TRRServiceChild
:
:
Init
(
const
bool
&
aCaptiveIsPassed
const
bool
&
aParentalControlEnabled
nsTArray
<
nsCString
>
&
&
aDNSSuffixList
)
{
nsCOMPtr
<
nsIDNSService
>
dns
=
do_GetService
(
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
)
;
sDNSService
=
dns
;
ClearOnShutdown
(
&
sDNSService
)
;
MOZ_ASSERT
(
sDNSService
)
;
MOZ_ASSERT
(
gTRRService
)
;
gTRRService
-
>
mCaptiveIsPassed
=
aCaptiveIsPassed
;
gTRRService
-
>
mParentalControlEnabled
=
aParentalControlEnabled
;
gTRRService
-
>
RebuildSuffixList
(
std
:
:
move
(
aDNSSuffixList
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
TRRServiceChild
:
:
RecvNotifyObserver
(
const
nsCString
&
aTopic
const
nsString
&
aData
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
NotifyObservers
(
nullptr
aTopic
.
get
(
)
aData
.
get
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
TRRServiceChild
:
:
RecvUpdatePlatformDNSInformation
(
nsTArray
<
nsCString
>
&
&
aDNSSuffixList
const
bool
&
aPlatformDisabledTRR
)
{
gTRRService
-
>
RebuildSuffixList
(
std
:
:
move
(
aDNSSuffixList
)
)
;
gTRRService
-
>
mPlatformDisabledTRR
=
aPlatformDisabledTRR
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
TRRServiceChild
:
:
RecvInitTRRBLStorage
(
const
psm
:
:
DataStorageEntry
&
aEntry
const
FileDescriptor
&
aWriteFd
)
{
RefPtr
<
DataStorage
>
storage
=
DataStorage
:
:
Get
(
DataStorageClass
:
:
TRRBlacklist
)
;
if
(
storage
)
{
storage
-
>
Init
(
&
aEntry
.
items
(
)
aWriteFd
)
;
}
return
IPC_OK
(
)
;
}
}
}
