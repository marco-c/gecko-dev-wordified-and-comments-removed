#
ifndef
DNSListenerProxy_h__
#
define
DNSListenerProxy_h__
#
include
"
nsIDNSListener
.
h
"
#
include
"
nsIDNSRecord
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsThreadUtils
.
h
"
class
nsIEventTarget
;
class
nsICancelable
;
namespace
mozilla
{
namespace
net
{
#
define
DNS_LISTENER_PROXY_IID
\
{
\
0x8f172ca3
0x7a7f
0x4941
{
\
0xa7
0x0b
0xbc
0x72
0x80
0x2e
0x9d
0x9b
\
}
\
}
class
DNSListenerProxy
final
:
public
nsIDNSListener
{
public
:
DNSListenerProxy
(
nsIDNSListener
*
aListener
nsIEventTarget
*
aTargetThread
)
:
mListener
(
aListener
)
mTargetThread
(
aTargetThread
)
mListenerAddress
(
reinterpret_cast
<
uintptr_t
>
(
aListener
)
)
{
MOZ_ASSERT
(
mListener
)
;
MOZ_ASSERT
(
mTargetThread
)
;
}
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIDNSLISTENER
NS_DECLARE_STATIC_IID_ACCESSOR
(
DNS_LISTENER_PROXY_IID
)
uintptr_t
GetOriginalListenerAddress
(
)
const
{
return
mListenerAddress
;
}
private
:
~
DNSListenerProxy
(
)
{
NS_ProxyRelease
(
"
DNSListenerProxy
:
:
mListener
"
mTargetThread
mListener
.
forget
(
)
)
;
}
nsCOMPtr
<
nsIDNSListener
>
mListener
;
nsCOMPtr
<
nsIEventTarget
>
mTargetThread
;
uintptr_t
mListenerAddress
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
DNSListenerProxy
DNS_LISTENER_PROXY_IID
)
}
}
#
endif
