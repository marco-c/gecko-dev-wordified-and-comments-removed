#
ifndef
netwerk_dns_GetAddrInfo_h
#
define
netwerk_dns_GetAddrInfo_h
#
include
"
nsError
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsINativeDNSResolverOverride
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
mozilla
/
RWLock
.
h
"
#
if
defined
(
XP_WIN
)
#
define
DNSQUERY_AVAILABLE
1
#
else
#
undef
DNSQUERY_AVAILABLE
#
endif
namespace
mozilla
{
namespace
net
{
class
AddrInfo
;
nsresult
GetAddrInfo
(
const
nsACString
&
aHost
uint16_t
aAddressFamily
uint16_t
aFlags
AddrInfo
*
*
aAddrInfo
bool
aGetTtl
)
;
nsresult
GetAddrInfoInit
(
)
;
nsresult
GetAddrInfoShutdown
(
)
;
class
NativeDNSResolverOverride
:
public
nsINativeDNSResolverOverride
{
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSINATIVEDNSRESOLVEROVERRIDE
public
:
NativeDNSResolverOverride
(
)
:
mLock
(
"
NativeDNSResolverOverride
"
)
{
}
static
already_AddRefed
<
nsINativeDNSResolverOverride
>
GetSingleton
(
)
;
private
:
virtual
~
NativeDNSResolverOverride
(
)
=
default
;
mozilla
:
:
RWLock
mLock
;
nsDataHashtable
<
nsCStringHashKey
nsTArray
<
PRNetAddr
>
>
mOverrides
;
nsDataHashtable
<
nsCStringHashKey
nsCString
>
mCnames
;
friend
bool
FindAddrOverride
(
const
nsACString
&
aHost
uint16_t
aAddressFamily
uint16_t
aFlags
AddrInfo
*
*
aAddrInfo
)
;
}
;
}
}
#
endif
