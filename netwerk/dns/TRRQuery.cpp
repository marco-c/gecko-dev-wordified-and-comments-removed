#
include
"
TRRQuery
.
h
"
#
include
"
TRR
.
h
"
#
include
"
ODoH
.
h
"
namespace
mozilla
{
namespace
net
{
#
undef
LOG
extern
mozilla
:
:
LazyLogModule
gHostResolverLog
;
#
define
LOG
(
args
)
MOZ_LOG
(
gHostResolverLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
static
already_AddRefed
<
AddrInfo
>
merge_rrset
(
AddrInfo
*
rrto
AddrInfo
*
rrfrom
)
{
MOZ_ASSERT
(
rrto
&
&
rrfrom
)
;
bool
isIPv6
=
rrfrom
-
>
Addresses
(
)
.
Length
(
)
>
0
&
&
rrfrom
-
>
Addresses
(
)
[
0
]
.
raw
.
family
=
=
PR_AF_INET6
;
nsTArray
<
NetAddr
>
addresses
;
if
(
isIPv6
)
{
addresses
=
rrfrom
-
>
Addresses
(
)
.
Clone
(
)
;
addresses
.
AppendElements
(
rrto
-
>
Addresses
(
)
)
;
}
else
{
addresses
=
rrto
-
>
Addresses
(
)
.
Clone
(
)
;
addresses
.
AppendElements
(
rrfrom
-
>
Addresses
(
)
)
;
}
auto
builder
=
rrto
-
>
Build
(
)
;
builder
.
SetAddresses
(
std
:
:
move
(
addresses
)
)
;
return
builder
.
Finish
(
)
;
}
void
TRRQuery
:
:
Cancel
(
nsresult
aStatus
)
{
MutexAutoLock
trrlock
(
mTrrLock
)
;
if
(
mTrrA
)
{
mTrrA
-
>
Cancel
(
aStatus
)
;
mTrrA
=
nullptr
;
}
if
(
mTrrAAAA
)
{
mTrrAAAA
-
>
Cancel
(
aStatus
)
;
mTrrAAAA
=
nullptr
;
}
if
(
mTrrByType
)
{
mTrrByType
-
>
Cancel
(
aStatus
)
;
mTrrByType
=
nullptr
;
}
}
nsresult
TRRQuery
:
:
DispatchLookup
(
TRR
*
pushedTRR
bool
aUseODoH
)
{
if
(
aUseODoH
&
&
pushedTRR
)
{
MOZ_ASSERT
(
false
"
ODoH
should
not
support
push
"
)
;
return
NS_ERROR_UNKNOWN_HOST
;
}
mTrrStart
=
TimeStamp
:
:
Now
(
)
;
RefPtr
<
AddrHostRecord
>
addrRec
;
RefPtr
<
TypeHostRecord
>
typeRec
;
if
(
mRecord
-
>
IsAddrRecord
(
)
)
{
addrRec
=
do_QueryObject
(
mRecord
)
;
MOZ_ASSERT
(
addrRec
)
;
}
else
{
typeRec
=
do_QueryObject
(
mRecord
)
;
MOZ_ASSERT
(
typeRec
)
;
}
mTrrStart
=
TimeStamp
:
:
Now
(
)
;
bool
madeQuery
=
false
;
if
(
addrRec
)
{
mTrrAUsed
=
INIT
;
mTrrAAAAUsed
=
INIT
;
enum
TrrType
rectype
=
(
mRecord
-
>
af
=
=
AF_INET6
)
?
TRRTYPE_AAAA
:
TRRTYPE_A
;
if
(
pushedTRR
)
{
rectype
=
pushedTRR
-
>
Type
(
)
;
}
bool
sendAgain
;
do
{
sendAgain
=
false
;
if
(
(
TRRTYPE_AAAA
=
=
rectype
)
&
&
gTRRService
&
&
(
gTRRService
-
>
DisableIPv6
(
)
|
|
(
StaticPrefs
:
:
network_trr_skip_AAAA_when_not_supported
(
)
&
&
mHostResolver
-
>
GetNCS
(
)
&
&
mHostResolver
-
>
GetNCS
(
)
-
>
GetIPv6
(
)
=
=
nsINetworkConnectivityService
:
:
NOT_AVAILABLE
)
)
)
{
break
;
}
LOG
(
(
"
TRR
Resolve
%
s
type
%
d
\
n
"
addrRec
-
>
host
.
get
(
)
(
int
)
rectype
)
)
;
RefPtr
<
TRR
>
trr
;
if
(
aUseODoH
)
{
trr
=
new
ODoH
(
this
mRecord
rectype
)
;
}
else
{
trr
=
pushedTRR
?
pushedTRR
:
new
TRR
(
this
mRecord
rectype
)
;
}
if
(
pushedTRR
|
|
NS_SUCCEEDED
(
gTRRService
-
>
DispatchTRRRequest
(
trr
)
)
)
{
MutexAutoLock
trrlock
(
mTrrLock
)
;
if
(
rectype
=
=
TRRTYPE_A
)
{
MOZ_ASSERT
(
!
mTrrA
)
;
mTrrA
=
trr
;
mTrrAUsed
=
STARTED
;
}
else
if
(
rectype
=
=
TRRTYPE_AAAA
)
{
MOZ_ASSERT
(
!
mTrrAAAA
)
;
mTrrAAAA
=
trr
;
mTrrAAAAUsed
=
STARTED
;
}
else
{
LOG
(
(
"
TrrLookup
called
with
bad
type
set
:
%
d
\
n
"
rectype
)
)
;
MOZ_ASSERT
(
0
)
;
}
madeQuery
=
true
;
if
(
!
pushedTRR
&
&
(
mRecord
-
>
af
=
=
AF_UNSPEC
)
&
&
(
rectype
=
=
TRRTYPE_A
)
)
{
rectype
=
TRRTYPE_AAAA
;
sendAgain
=
true
;
}
}
}
while
(
sendAgain
)
;
}
else
{
typeRec
-
>
mStart
=
TimeStamp
:
:
Now
(
)
;
enum
TrrType
rectype
;
if
(
mRecord
-
>
type
=
=
nsIDNSService
:
:
RESOLVE_TYPE_TXT
)
{
rectype
=
TRRTYPE_TXT
;
}
else
if
(
mRecord
-
>
type
=
=
nsIDNSService
:
:
RESOLVE_TYPE_HTTPSSVC
)
{
rectype
=
TRRTYPE_HTTPSSVC
;
}
else
if
(
pushedTRR
)
{
rectype
=
pushedTRR
-
>
Type
(
)
;
}
else
{
MOZ_ASSERT
(
false
"
Not
an
expected
request
type
"
)
;
return
NS_ERROR_UNKNOWN_HOST
;
}
LOG
(
(
"
TRR
Resolve
%
s
type
%
d
\
n
"
typeRec
-
>
host
.
get
(
)
(
int
)
rectype
)
)
;
RefPtr
<
TRR
>
trr
;
if
(
aUseODoH
)
{
trr
=
new
ODoH
(
this
mRecord
rectype
)
;
}
else
{
trr
=
pushedTRR
?
pushedTRR
:
new
TRR
(
this
mRecord
rectype
)
;
}
if
(
pushedTRR
|
|
NS_SUCCEEDED
(
gTRRService
-
>
DispatchTRRRequest
(
trr
)
)
)
{
MutexAutoLock
trrlock
(
mTrrLock
)
;
MOZ_ASSERT
(
!
mTrrByType
)
;
mTrrByType
=
trr
;
madeQuery
=
true
;
}
}
return
madeQuery
?
NS_OK
:
NS_ERROR_UNKNOWN_HOST
;
}
AHostResolver
:
:
LookupStatus
TRRQuery
:
:
CompleteLookup
(
nsHostRecord
*
rec
nsresult
status
AddrInfo
*
aNewRRSet
bool
pb
const
nsACString
&
aOriginsuffix
nsHostRecord
:
:
TRRSkippedReason
aReason
TRR
*
aTRRRequest
)
{
if
(
rec
!
=
mRecord
)
{
return
mHostResolver
-
>
CompleteLookup
(
rec
status
aNewRRSet
pb
aOriginsuffix
aReason
aTRRRequest
)
;
}
RefPtr
<
AddrInfo
>
newRRSet
(
aNewRRSet
)
;
DNSResolverType
resolverType
=
newRRSet
-
>
ResolverType
(
)
;
bool
pendingARequest
=
false
;
bool
pendingAAAARequest
=
false
;
{
MutexAutoLock
trrlock
(
mTrrLock
)
;
if
(
newRRSet
-
>
TRRType
(
)
=
=
TRRTYPE_A
)
{
MOZ_ASSERT
(
mTrrA
)
;
mTRRAFailReason
=
aReason
;
mTrrA
=
nullptr
;
mTrrAUsed
=
NS_SUCCEEDED
(
status
)
?
OK
:
FAILED
;
}
else
if
(
newRRSet
-
>
TRRType
(
)
=
=
TRRTYPE_AAAA
)
{
MOZ_ASSERT
(
mTrrAAAA
)
;
mTRRAAAAFailReason
=
aReason
;
mTrrAAAA
=
nullptr
;
mTrrAAAAUsed
=
NS_SUCCEEDED
(
status
)
?
OK
:
FAILED
;
}
else
{
MOZ_ASSERT
(
0
)
;
}
if
(
mTrrA
)
{
pendingARequest
=
true
;
}
if
(
mTrrAAAA
)
{
pendingAAAARequest
=
true
;
}
}
if
(
NS_SUCCEEDED
(
status
)
)
{
mTRRSuccess
+
+
;
if
(
mTRRSuccess
=
=
1
)
{
mTrrDuration
=
TimeStamp
:
:
Now
(
)
-
mTrrStart
;
}
}
if
(
pendingARequest
|
|
pendingAAAARequest
)
{
mFirstTRRresult
=
status
;
if
(
NS_FAILED
(
status
)
)
{
return
LOOKUP_OK
;
}
MOZ_ASSERT
(
!
mFirstTRR
&
&
newRRSet
)
;
mFirstTRR
.
swap
(
newRRSet
)
;
MOZ_ASSERT
(
mFirstTRR
&
&
!
newRRSet
)
;
LOG
(
(
"
CompleteLookup
:
waiting
for
all
responses
!
\
n
"
)
)
;
return
LOOKUP_OK
;
}
else
{
if
(
mFirstTRR
)
{
if
(
NS_SUCCEEDED
(
status
)
)
{
LOG
(
(
"
Merging
responses
"
)
)
;
newRRSet
=
merge_rrset
(
newRRSet
mFirstTRR
)
;
}
else
{
LOG
(
(
"
Will
use
previous
response
"
)
)
;
newRRSet
.
swap
(
mFirstTRR
)
;
status
=
mFirstTRRresult
;
}
mFirstTRR
=
nullptr
;
}
else
{
if
(
NS_FAILED
(
status
)
&
&
status
!
=
NS_ERROR_DEFINITIVE_UNKNOWN_HOST
&
&
mFirstTRRresult
=
=
NS_ERROR_DEFINITIVE_UNKNOWN_HOST
)
{
status
=
NS_ERROR_DEFINITIVE_UNKNOWN_HOST
;
}
}
if
(
mTRRSuccess
&
&
mHostResolver
-
>
GetNCS
(
)
&
&
(
mHostResolver
-
>
GetNCS
(
)
-
>
GetNAT64
(
)
=
=
nsINetworkConnectivityService
:
:
OK
)
&
&
newRRSet
)
{
newRRSet
=
mHostResolver
-
>
GetNCS
(
)
-
>
MapNAT64IPs
(
newRRSet
)
;
}
}
if
(
resolverType
=
=
DNSResolverType
:
:
TRR
)
{
if
(
mTrrAUsed
=
=
OK
)
{
AccumulateCategoricalKeyed
(
TRRService
:
:
AutoDetectedKey
(
)
Telemetry
:
:
LABELS_DNS_LOOKUP_DISPOSITION2
:
:
trrAOK
)
;
}
else
if
(
mTrrAUsed
=
=
FAILED
)
{
AccumulateCategoricalKeyed
(
TRRService
:
:
AutoDetectedKey
(
)
Telemetry
:
:
LABELS_DNS_LOOKUP_DISPOSITION2
:
:
trrAFail
)
;
}
if
(
mTrrAAAAUsed
=
=
OK
)
{
AccumulateCategoricalKeyed
(
TRRService
:
:
AutoDetectedKey
(
)
Telemetry
:
:
LABELS_DNS_LOOKUP_DISPOSITION2
:
:
trrAAAAOK
)
;
}
else
if
(
mTrrAAAAUsed
=
=
FAILED
)
{
AccumulateCategoricalKeyed
(
TRRService
:
:
AutoDetectedKey
(
)
Telemetry
:
:
LABELS_DNS_LOOKUP_DISPOSITION2
:
:
trrAAAAFail
)
;
}
}
return
mHostResolver
-
>
CompleteLookup
(
rec
status
newRRSet
pb
aOriginsuffix
aReason
aTRRRequest
)
;
}
AHostResolver
:
:
LookupStatus
TRRQuery
:
:
CompleteLookupByType
(
nsHostRecord
*
rec
nsresult
status
mozilla
:
:
net
:
:
TypeRecordResultType
&
aResult
uint32_t
aTtl
bool
pb
)
{
if
(
rec
=
=
mRecord
)
{
MutexAutoLock
trrlock
(
mTrrLock
)
;
mTrrByType
=
nullptr
;
}
return
mHostResolver
-
>
CompleteLookupByType
(
rec
status
aResult
aTtl
pb
)
;
}
}
}
