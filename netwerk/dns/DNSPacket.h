#
ifndef
mozilla_net_DNSPacket_h__
#
define
mozilla_net_DNSPacket_h__
#
include
"
mozilla
/
Result
.
h
"
#
include
"
nsHostResolver
.
h
"
namespace
mozilla
{
namespace
net
{
class
DOHresp
{
public
:
nsresult
Add
(
uint32_t
TTL
unsigned
char
const
*
dns
unsigned
int
index
uint16_t
len
bool
aLocalAllowed
)
;
nsTArray
<
NetAddr
>
mAddresses
;
uint32_t
mTtl
=
UINT32_MAX
;
}
;
enum
TrrType
{
TRRTYPE_A
=
1
TRRTYPE_NS
=
2
TRRTYPE_CNAME
=
5
TRRTYPE_AAAA
=
28
TRRTYPE_OPT
=
41
TRRTYPE_TXT
=
16
TRRTYPE_HTTPSSVC
=
nsIDNSService
:
:
RESOLVE_TYPE_HTTPSSVC
}
;
class
DNSPacket
{
public
:
DNSPacket
(
)
=
default
;
virtual
~
DNSPacket
(
)
=
default
;
nsresult
OnDataAvailable
(
nsIRequest
*
aRequest
nsIInputStream
*
aInputStream
uint64_t
aOffset
const
uint32_t
aCount
)
;
virtual
nsresult
EncodeRequest
(
nsCString
&
aBody
const
nsACString
&
aHost
uint16_t
aType
bool
aDisableECS
)
;
virtual
nsresult
Decode
(
nsCString
&
aHost
enum
TrrType
aType
nsCString
&
aCname
bool
aAllowRFC1918
nsHostRecord
:
:
TRRSkippedReason
&
reason
DOHresp
&
aResp
TypeRecordResultType
&
aTypeResult
nsClassHashtable
<
nsCStringHashKey
DOHresp
>
&
aAdditionalRecords
uint32_t
&
aTTL
)
;
protected
:
static
const
unsigned
int
MAX_SIZE
=
3200
;
nsresult
PassQName
(
unsigned
int
&
index
)
;
nsresult
GetQname
(
nsACString
&
aQname
unsigned
int
&
aIndex
)
;
nsresult
ParseSvcParam
(
unsigned
int
svcbIndex
uint16_t
key
SvcFieldValue
&
field
uint16_t
length
)
;
unsigned
char
mResponse
[
MAX_SIZE
]
{
}
;
unsigned
int
mBodySize
=
0
;
}
;
class
ODoHDNSPacket
final
:
public
DNSPacket
{
public
:
ODoHDNSPacket
(
)
{
}
virtual
~
ODoHDNSPacket
(
)
;
static
bool
ParseODoHConfigs
(
const
nsCString
&
aRawODoHConfig
nsTArray
<
ObliviousDoHConfig
>
&
aOut
)
;
virtual
nsresult
EncodeRequest
(
nsCString
&
aBody
const
nsACString
&
aHost
uint16_t
aType
bool
aDisableECS
)
override
;
virtual
nsresult
Decode
(
nsCString
&
aHost
enum
TrrType
aType
nsCString
&
aCname
bool
aAllowRFC1918
nsHostRecord
:
:
TRRSkippedReason
&
reason
DOHresp
&
aResp
TypeRecordResultType
&
aTypeResult
nsClassHashtable
<
nsCStringHashKey
DOHresp
>
&
aAdditionalRecords
uint32_t
&
aTTL
)
override
;
protected
:
}
;
}
}
#
endif
