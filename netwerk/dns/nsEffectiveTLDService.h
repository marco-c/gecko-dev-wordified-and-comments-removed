#
ifndef
EffectiveTLDService_h
#
define
EffectiveTLDService_h
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Dafsa
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
MruCache
.
h
"
class
nsIIDNService
;
class
nsEffectiveTLDService
final
:
public
nsIEffectiveTLDService
public
nsIMemoryReporter
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIEFFECTIVETLDSERVICE
NS_DECL_NSIMEMORYREPORTER
nsEffectiveTLDService
(
)
;
nsresult
Init
(
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
;
private
:
nsresult
GetBaseDomainInternal
(
nsCString
&
aHostname
int32_t
aAdditionalParts
nsACString
&
aBaseDomain
)
;
nsresult
NormalizeHostname
(
nsCString
&
aHostname
)
;
~
nsEffectiveTLDService
(
)
;
nsCOMPtr
<
nsIIDNService
>
mIDNService
;
mozilla
:
:
Dafsa
mGraph
;
struct
TLDCacheEntry
{
nsCString
mHost
;
nsCString
mBaseDomain
;
nsresult
mResult
;
}
;
struct
TldCache
:
public
mozilla
:
:
MruCache
<
nsACString
TLDCacheEntry
TldCache
>
{
static
mozilla
:
:
HashNumber
Hash
(
const
nsACString
&
aKey
)
{
return
mozilla
:
:
HashString
(
aKey
)
;
}
static
bool
Match
(
const
nsACString
&
aKey
const
TLDCacheEntry
&
aVal
)
{
return
aKey
=
=
aVal
.
mHost
;
}
}
;
TldCache
mMruTable
;
}
;
#
endif
