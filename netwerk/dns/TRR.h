#
ifndef
mozilla_net_TRR_h
#
define
mozilla_net_TRR_h
#
include
"
nsIChannel
.
h
"
#
include
"
nsIHttpPushListener
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIStreamListener
.
h
"
namespace
mozilla
{
namespace
net
{
enum
TrrType
{
TRRTYPE_A
=
1
TRRTYPE_NS
=
2
TRRTYPE_CNAME
=
5
TRRTYPE_AAAA
=
28
TRRTYPE_TXT
=
16
}
;
class
DOHaddr
:
public
LinkedListElement
<
DOHaddr
>
{
public
:
NetAddr
mNet
;
uint32_t
mTtl
;
}
;
class
TRRService
;
extern
TRRService
*
gTRRService
;
class
DOHresp
{
public
:
~
DOHresp
(
)
{
DOHaddr
*
el
;
while
(
(
el
=
mAddresses
.
popLast
(
)
)
)
{
delete
el
;
}
}
nsresult
Add
(
uint32_t
TTL
unsigned
char
*
dns
int
index
uint16_t
len
bool
aLocalAllowed
)
;
LinkedList
<
DOHaddr
>
mAddresses
;
}
;
class
TRR
:
public
Runnable
public
nsITimerCallback
public
nsIHttpPushListener
public
nsIInterfaceRequestor
public
nsIStreamListener
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIHTTPPUSHLISTENER
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSITIMERCALLBACK
static
const
unsigned
int
kMaxSize
=
3200
;
static
const
unsigned
int
kCnameChaseMax
=
64
;
explicit
TRR
(
AHostResolver
*
aResolver
nsHostRecord
*
aRec
enum
TrrType
aType
)
:
mozilla
:
:
Runnable
(
"
TRR
"
)
mRec
(
aRec
)
mHostResolver
(
aResolver
)
mType
(
aType
)
mBodySize
(
0
)
mFailed
(
false
)
mCnameLoop
(
kCnameChaseMax
)
mAllowRFC1918
(
false
)
mTxtTtl
(
UINT32_MAX
)
{
mHost
=
aRec
-
>
host
;
mPB
=
aRec
-
>
pb
;
}
explicit
TRR
(
AHostResolver
*
aResolver
nsHostRecord
*
aRec
nsCString
&
aHost
enum
TrrType
&
aType
unsigned
int
aLoopCount
bool
aPB
)
:
mozilla
:
:
Runnable
(
"
TRR
"
)
mHost
(
aHost
)
mRec
(
aRec
)
mHostResolver
(
aResolver
)
mType
(
aType
)
mBodySize
(
0
)
mFailed
(
false
)
mPB
(
aPB
)
mCnameLoop
(
aLoopCount
)
mAllowRFC1918
(
false
)
mTxtTtl
(
UINT32_MAX
)
{
}
explicit
TRR
(
AHostResolver
*
aResolver
bool
aPB
)
:
mozilla
:
:
Runnable
(
"
TRR
"
)
mHostResolver
(
aResolver
)
mType
(
TRRTYPE_A
)
mBodySize
(
0
)
mFailed
(
false
)
mPB
(
aPB
)
mCnameLoop
(
kCnameChaseMax
)
mAllowRFC1918
(
false
)
mTxtTtl
(
UINT32_MAX
)
{
}
explicit
TRR
(
AHostResolver
*
aResolver
nsACString
&
aHost
enum
TrrType
aType
bool
aPB
)
:
mozilla
:
:
Runnable
(
"
TRR
"
)
mHost
(
aHost
)
mHostResolver
(
aResolver
)
mType
(
aType
)
mBodySize
(
0
)
mFailed
(
false
)
mPB
(
aPB
)
mCnameLoop
(
kCnameChaseMax
)
mAllowRFC1918
(
false
)
mTxtTtl
(
UINT32_MAX
)
{
}
NS_IMETHOD
Run
(
)
override
;
void
Cancel
(
)
;
enum
TrrType
Type
(
)
{
return
mType
;
}
nsCString
mHost
;
RefPtr
<
nsHostRecord
>
mRec
;
RefPtr
<
AHostResolver
>
mHostResolver
;
private
:
~
TRR
(
)
=
default
;
nsresult
SendHTTPRequest
(
)
;
nsresult
DohEncode
(
nsCString
&
target
bool
aDisableECS
)
;
nsresult
PassQName
(
unsigned
int
&
index
)
;
nsresult
GetQname
(
nsAutoCString
&
aQname
unsigned
int
&
aIndex
)
;
nsresult
DohDecode
(
nsCString
&
aHost
)
;
nsresult
ReturnData
(
)
;
nsresult
FailData
(
nsresult
error
)
;
nsresult
DohDecodeQuery
(
const
nsCString
&
query
nsCString
&
host
enum
TrrType
&
type
)
;
nsresult
ReceivePush
(
nsIHttpChannel
*
pushed
nsHostRecord
*
pushedRec
)
;
nsresult
On200Response
(
)
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
enum
TrrType
mType
;
TimeStamp
mStartTime
;
unsigned
char
mResponse
[
kMaxSize
]
;
unsigned
int
mBodySize
;
bool
mFailed
;
bool
mPB
;
DOHresp
mDNS
;
nsCOMPtr
<
nsITimer
>
mTimeout
;
nsCString
mCname
;
uint32_t
mCnameLoop
;
bool
mAllowRFC1918
;
nsTArray
<
nsCString
>
mTxt
;
uint32_t
mTxtTtl
;
}
;
}
}
#
endif
