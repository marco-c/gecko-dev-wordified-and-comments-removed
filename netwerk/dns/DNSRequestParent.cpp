#
include
"
mozilla
/
net
/
DNSRequestParent
.
h
"
#
include
"
nsIDNSService
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsICancelable
.
h
"
#
include
"
nsIDNSRecord
.
h
"
#
include
"
nsHostResolver
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
net
{
DNSRequestParent
:
:
DNSRequestParent
(
)
:
mFlags
(
0
)
mIPCClosed
(
false
)
{
}
DNSRequestParent
:
:
~
DNSRequestParent
(
)
{
}
void
DNSRequestParent
:
:
DoAsyncResolve
(
const
nsACString
&
hostname
const
OriginAttributes
&
originAttributes
uint32_t
flags
const
nsACString
&
networkInterface
)
{
nsresult
rv
;
mFlags
=
flags
;
nsCOMPtr
<
nsIDNSService
>
dns
=
do_GetService
(
NS_DNSSERVICE_CONTRACTID
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
nsIThread
>
mainThread
=
do_GetMainThread
(
)
;
nsCOMPtr
<
nsICancelable
>
unused
;
rv
=
dns
-
>
AsyncResolveExtendedNative
(
hostname
flags
networkInterface
this
mainThread
originAttributes
getter_AddRefs
(
unused
)
)
;
}
if
(
NS_FAILED
(
rv
)
&
&
!
mIPCClosed
)
{
mIPCClosed
=
true
;
Unused
<
<
SendLookupCompleted
(
DNSRequestResponse
(
rv
)
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
DNSRequestParent
:
:
RecvCancelDNSRequest
(
const
nsCString
&
hostName
const
OriginAttributes
&
originAttributes
const
uint32_t
&
flags
const
nsCString
&
networkInterface
const
nsresult
&
reason
)
{
nsresult
rv
;
nsCOMPtr
<
nsIDNSService
>
dns
=
do_GetService
(
NS_DNSSERVICE_CONTRACTID
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
dns
-
>
CancelAsyncResolveExtendedNative
(
hostName
flags
networkInterface
this
reason
originAttributes
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DNSRequestParent
:
:
Recv__delete__
(
)
{
mIPCClosed
=
true
;
return
IPC_OK
(
)
;
}
void
DNSRequestParent
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
mIPCClosed
=
true
;
}
NS_IMPL_ISUPPORTS
(
DNSRequestParent
nsIDNSListener
)
NS_IMETHODIMP
DNSRequestParent
:
:
OnLookupComplete
(
nsICancelable
*
request
nsIDNSRecord
*
rec
nsresult
status
)
{
if
(
mIPCClosed
)
{
return
NS_OK
;
}
if
(
NS_SUCCEEDED
(
status
)
)
{
MOZ_ASSERT
(
rec
)
;
nsAutoCString
cname
;
if
(
mFlags
&
nsHostResolver
:
:
RES_CANON_NAME
)
{
rec
-
>
GetCanonicalName
(
cname
)
;
}
NetAddrArray
array
;
NetAddr
addr
;
while
(
NS_SUCCEEDED
(
rec
-
>
GetNextAddr
(
80
&
addr
)
)
)
{
array
.
AppendElement
(
addr
)
;
}
Unused
<
<
SendLookupCompleted
(
DNSRequestResponse
(
DNSRecord
(
cname
array
)
)
)
;
}
else
{
Unused
<
<
SendLookupCompleted
(
DNSRequestResponse
(
status
)
)
;
}
mIPCClosed
=
true
;
return
NS_OK
;
}
}
}
