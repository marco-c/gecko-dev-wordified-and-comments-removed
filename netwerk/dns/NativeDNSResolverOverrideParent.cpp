#
include
"
NativeDNSResolverOverrideParent
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
net
/
SocketProcessParent
.
h
"
#
include
"
nsIOService
.
h
"
namespace
mozilla
{
namespace
net
{
NS_IMPL_ISUPPORTS
(
NativeDNSResolverOverrideParent
nsINativeDNSResolverOverride
)
static
StaticRefPtr
<
NativeDNSResolverOverrideParent
>
gNativeDNSResolverOverrideParent
;
already_AddRefed
<
nsINativeDNSResolverOverride
>
NativeDNSResolverOverrideParent
:
:
GetSingleton
(
)
{
if
(
gNativeDNSResolverOverrideParent
)
{
return
do_AddRef
(
gNativeDNSResolverOverrideParent
)
;
}
if
(
!
gIOService
)
{
return
nullptr
;
}
gNativeDNSResolverOverrideParent
=
new
NativeDNSResolverOverrideParent
(
)
;
ClearOnShutdown
(
&
gNativeDNSResolverOverrideParent
)
;
auto
initTask
=
[
]
(
)
{
Unused
<
<
SocketProcessParent
:
:
GetSingleton
(
)
-
>
SendPNativeDNSResolverOverrideConstructor
(
gNativeDNSResolverOverrideParent
)
;
}
;
gIOService
-
>
CallOrWaitForSocketProcess
(
initTask
)
;
return
do_AddRef
(
gNativeDNSResolverOverrideParent
)
;
}
NS_IMETHODIMP
NativeDNSResolverOverrideParent
:
:
AddIPOverride
(
const
nsACString
&
aHost
const
nsACString
&
aIPLiteral
)
{
PRNetAddr
tempAddr
;
memset
(
&
tempAddr
0
sizeof
(
PRNetAddr
)
)
;
if
(
!
aIPLiteral
.
Equals
(
"
N
/
A
"
_ns
)
&
&
PR_StringToNetAddr
(
nsCString
(
aIPLiteral
)
.
get
(
)
&
tempAddr
)
!
=
PR_SUCCESS
)
{
return
NS_ERROR_UNEXPECTED
;
}
RefPtr
<
NativeDNSResolverOverrideParent
>
self
=
this
;
nsCString
host
(
aHost
)
;
nsCString
ip
(
aIPLiteral
)
;
auto
task
=
[
self
{
std
:
:
move
(
self
)
}
host
ip
]
(
)
{
Unused
<
<
self
-
>
SendAddIPOverride
(
host
ip
)
;
}
;
gIOService
-
>
CallOrWaitForSocketProcess
(
task
)
;
return
NS_OK
;
}
NS_IMETHODIMP
NativeDNSResolverOverrideParent
:
:
SetCnameOverride
(
const
nsACString
&
aHost
const
nsACString
&
aCNAME
)
{
if
(
aCNAME
.
IsEmpty
(
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
RefPtr
<
NativeDNSResolverOverrideParent
>
self
=
this
;
nsCString
host
(
aHost
)
;
nsCString
cname
(
aCNAME
)
;
auto
task
=
[
self
{
std
:
:
move
(
self
)
}
host
cname
]
(
)
{
Unused
<
<
self
-
>
SendSetCnameOverride
(
host
cname
)
;
}
;
gIOService
-
>
CallOrWaitForSocketProcess
(
task
)
;
return
NS_OK
;
}
NS_IMETHODIMP
NativeDNSResolverOverrideParent
:
:
ClearHostOverride
(
const
nsACString
&
aHost
)
{
RefPtr
<
NativeDNSResolverOverrideParent
>
self
=
this
;
nsCString
host
(
aHost
)
;
auto
task
=
[
self
{
std
:
:
move
(
self
)
}
host
]
(
)
{
Unused
<
<
self
-
>
SendClearHostOverride
(
host
)
;
}
;
gIOService
-
>
CallOrWaitForSocketProcess
(
task
)
;
return
NS_OK
;
}
NS_IMETHODIMP
NativeDNSResolverOverrideParent
:
:
ClearOverrides
(
)
{
RefPtr
<
NativeDNSResolverOverrideParent
>
self
=
this
;
auto
task
=
[
self
{
std
:
:
move
(
self
)
}
]
(
)
{
Unused
<
<
self
-
>
SendClearOverrides
(
)
;
}
;
gIOService
-
>
CallOrWaitForSocketProcess
(
task
)
;
return
NS_OK
;
}
}
}
