#
ifndef
TRRService_h_
#
define
TRRService_h_
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
DataStorage
.
h
"
#
include
"
nsHostResolver
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsIPrefBranch
;
namespace
mozilla
{
namespace
net
{
class
TRRService
:
public
nsIObserver
public
nsSupportsWeakReference
public
AHostResolver
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
TRRService
(
)
;
nsresult
Init
(
)
;
nsresult
Start
(
)
;
bool
Enabled
(
)
;
uint32_t
Mode
(
)
{
return
mMode
;
}
bool
AllowRFC1918
(
)
{
return
mRfc1918
;
}
bool
UseGET
(
)
{
return
mUseGET
;
}
bool
EarlyAAAA
(
)
{
return
mEarlyAAAA
;
}
nsresult
GetURI
(
nsCString
&
result
)
;
nsresult
GetCredentials
(
nsCString
&
result
)
;
uint32_t
GetRequestTimeout
(
)
{
return
mTRRTimeout
;
}
LookupStatus
CompleteLookup
(
nsHostRecord
*
nsresult
mozilla
:
:
net
:
:
AddrInfo
*
bool
pb
)
override
;
void
TRRBlacklist
(
const
nsACString
&
host
bool
privateBrowsing
bool
aParentsToo
)
;
bool
IsTRRBlacklisted
(
const
nsACString
&
host
bool
privateBrowsing
bool
fullhost
)
;
bool
MaybeBootstrap
(
const
nsACString
&
possible
nsACString
&
result
)
;
private
:
virtual
~
TRRService
(
)
;
nsresult
ReadPrefs
(
const
char
*
name
)
;
void
GetPrefBranch
(
nsIPrefBranch
*
*
result
)
;
void
MaybeConfirm
(
)
;
bool
mInitialized
;
Atomic
<
uint32_t
Relaxed
>
mMode
;
Atomic
<
uint32_t
Relaxed
>
mTRRBlacklistExpireTime
;
Atomic
<
uint32_t
Relaxed
>
mTRRTimeout
;
Mutex
mLock
;
nsCString
mPrivateURI
;
nsCString
mPrivateCred
;
nsCString
mConfirmationNS
;
nsCString
mBootstrapAddr
;
Atomic
<
bool
Relaxed
>
mWaitForCaptive
;
Atomic
<
bool
Relaxed
>
mRfc1918
;
Atomic
<
bool
Relaxed
>
mCaptiveIsPassed
;
Atomic
<
bool
Relaxed
>
mUseGET
;
Atomic
<
bool
Relaxed
>
mEarlyAAAA
;
RefPtr
<
DataStorage
>
mTRRBLStorage
;
Atomic
<
bool
Relaxed
>
mClearTRRBLStorage
;
enum
ConfirmationState
{
CONFIRM_INIT
=
0
CONFIRM_TRYING
=
1
CONFIRM_OK
=
2
CONFIRM_FAILED
=
3
}
;
Atomic
<
ConfirmationState
Relaxed
>
mConfirmationState
;
RefPtr
<
TRR
>
mConfirmer
;
}
;
extern
TRRService
*
gTRRService
;
}
}
#
endif
