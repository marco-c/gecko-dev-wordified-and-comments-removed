#
ifndef
TRRService_h_
#
define
TRRService_h_
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
nsHostResolver
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
ODoHService
.
h
"
#
include
"
TRRServiceBase
.
h
"
#
include
"
nsICaptivePortalService
.
h
"
class
nsDNSService
;
class
nsIPrefBranch
;
class
nsINetworkLinkService
;
class
nsIObserverService
;
namespace
mozilla
{
namespace
net
{
class
TRRServiceChild
;
class
TRRServiceParent
;
class
TRRService
:
public
TRRServiceBase
public
nsIObserver
public
nsITimerCallback
public
nsSupportsWeakReference
public
AHostResolver
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSITIMERCALLBACK
TRRService
(
)
;
nsresult
Init
(
)
;
nsresult
Start
(
)
;
bool
Enabled
(
nsIRequest
:
:
TRRMode
aRequestMode
=
nsIRequest
:
:
TRR_DEFAULT_MODE
)
;
bool
IsConfirmed
(
)
{
return
mConfirmation
.
State
(
)
=
=
CONFIRM_OK
;
}
uint32_t
ConfirmationState
(
)
{
return
mConfirmation
.
State
(
)
;
}
bool
DisableIPv6
(
)
{
return
mDisableIPv6
;
}
nsresult
GetURI
(
nsACString
&
result
)
;
nsresult
GetCredentials
(
nsCString
&
result
)
;
uint32_t
GetRequestTimeout
(
)
;
LookupStatus
CompleteLookup
(
nsHostRecord
*
nsresult
mozilla
:
:
net
:
:
AddrInfo
*
bool
pb
const
nsACString
&
aOriginSuffix
TRRSkippedReason
aReason
TRR
*
aTrrRequest
)
override
;
LookupStatus
CompleteLookupByType
(
nsHostRecord
*
nsresult
mozilla
:
:
net
:
:
TypeRecordResultType
&
uint32_t
bool
pb
)
override
;
void
AddToBlocklist
(
const
nsACString
&
host
const
nsACString
&
originSuffix
bool
privateBrowsing
bool
aParentsToo
)
;
bool
IsTemporarilyBlocked
(
const
nsACString
&
aHost
const
nsACString
&
aOriginSuffix
bool
aPrivateBrowsing
bool
aParentsToo
)
;
bool
IsExcludedFromTRR
(
const
nsACString
&
aHost
)
;
bool
MaybeBootstrap
(
const
nsACString
&
possible
nsACString
&
result
)
;
void
TRRIsOkay
(
nsresult
aChannelStatus
)
;
bool
ParentalControlEnabled
(
)
const
{
return
mParentalControlEnabled
;
}
nsresult
DispatchTRRRequest
(
TRR
*
aTrrRequest
)
;
already_AddRefed
<
nsIThread
>
TRRThread
(
)
;
bool
IsOnTRRThread
(
)
;
bool
IsUsingAutoDetectedURL
(
)
{
return
mURISetByDetection
;
}
static
const
nsCString
&
ProviderKey
(
)
;
private
:
virtual
~
TRRService
(
)
;
friend
class
TRRServiceChild
;
friend
class
TRRServiceParent
;
friend
class
ODoHService
;
static
void
AddObserver
(
nsIObserver
*
aObserver
nsIObserverService
*
aObserverService
=
nullptr
)
;
static
bool
CheckCaptivePortalIsPassed
(
)
;
static
bool
GetParentalControlEnabledInternal
(
)
;
static
bool
CheckPlatformDNSStatus
(
nsINetworkLinkService
*
aLinkService
)
;
nsresult
ReadPrefs
(
const
char
*
name
)
;
void
GetPrefBranch
(
nsIPrefBranch
*
*
result
)
;
friend
class
:
:
nsDNSService
;
void
SetDetectedTrrURI
(
const
nsACString
&
aURI
)
;
bool
IsDomainBlocked
(
const
nsACString
&
aHost
const
nsACString
&
aOriginSuffix
bool
aPrivateBrowsing
)
;
bool
IsExcludedFromTRR_unlocked
(
const
nsACString
&
aHost
)
;
void
RebuildSuffixList
(
nsTArray
<
nsCString
>
&
&
aSuffixList
)
;
nsresult
DispatchTRRRequestInternal
(
TRR
*
aTrrRequest
bool
aWithLock
)
;
already_AddRefed
<
nsIThread
>
TRRThread_locked
(
)
;
already_AddRefed
<
nsIThread
>
MainThreadOrTRRThread
(
bool
aWithLock
=
true
)
;
bool
MaybeSetPrivateURI
(
const
nsACString
&
aURI
)
override
;
void
ClearEntireCache
(
)
;
virtual
void
ReadEtcHostsFile
(
)
override
;
void
AddEtcHosts
(
const
nsTArray
<
nsCString
>
&
)
;
void
CompleteConfirmation
(
nsresult
aStatus
TRR
*
aTrrRequest
)
;
bool
mInitialized
{
false
}
;
Atomic
<
uint32_t
Relaxed
>
mBlocklistDurationSeconds
{
60
}
;
Mutex
mLock
{
"
TRRService
"
}
;
nsCString
mPrivateCred
;
nsCString
mConfirmationNS
{
"
example
.
com
"
_ns
}
;
nsCString
mBootstrapAddr
;
Atomic
<
bool
Relaxed
>
mCaptiveIsPassed
{
false
}
;
Atomic
<
bool
Relaxed
>
mDisableIPv6
;
DataMutex
<
nsTHashMap
<
nsCStringHashKey
int32_t
>
>
mTRRBLStorage
{
"
DataMutex
:
:
TRRBlocklist
"
}
;
nsTHashtable
<
nsCStringHashKey
>
mExcludedDomains
;
nsTHashtable
<
nsCStringHashKey
>
mDNSSuffixDomains
;
nsTHashtable
<
nsCStringHashKey
>
mEtcHostsDomains
;
enum
class
ConfirmationEvent
{
Init
PrefChange
Retry
FailedLookups
URIChange
CaptivePortalConnectivity
NetworkUp
ConfirmOK
ConfirmFail
}
;
void
HandleConfirmationEvent
(
ConfirmationEvent
aEvent
)
;
void
HandleConfirmationEvent
(
ConfirmationEvent
aEvent
const
MutexAutoLock
&
)
;
enum
ConfirmationState
{
CONFIRM_OFF
=
0
CONFIRM_TRYING_OK
=
1
CONFIRM_OK
=
2
CONFIRM_FAILED
=
3
CONFIRM_TRYING_FAILED
=
4
CONFIRM_DISABLED
=
5
}
;
class
ConfirmationContext
{
friend
void
TRRService
:
:
HandleConfirmationEvent
(
ConfirmationEvent
const
MutexAutoLock
&
)
;
public
:
static
const
size_t
RESULTS_SIZE
=
32
;
RefPtr
<
TRR
>
mTask
;
nsCOMPtr
<
nsITimer
>
mTimer
;
uint32_t
mRetryInterval
=
125
;
Atomic
<
uint32_t
Relaxed
>
mTRRFailures
{
0
}
;
char
mFailureReasons
[
RESULTS_SIZE
]
=
{
0
}
;
uint32_t
mAttemptCount
=
0
;
char
mResults
[
RESULTS_SIZE
]
=
{
0
}
;
TimeStamp
mFirstRequestTime
;
nsCString
mNetworkId
;
int32_t
mCaptivePortalStatus
=
nsICaptivePortalService
:
:
UNKNOWN
;
nsCString
mContextChangeReason
;
nsCString
mTrigger
;
nsCString
mFailedLookups
;
void
RecordEvent
(
const
char
*
aReason
)
;
void
RequestCompleted
(
nsresult
aLookupStatus
nsresult
aChannelStatus
)
;
enum
ConfirmationState
State
(
)
{
return
mState
;
}
private
:
Atomic
<
enum
ConfirmationState
Relaxed
>
mState
{
CONFIRM_OFF
}
;
}
;
ConfirmationContext
mConfirmation
;
bool
mParentalControlEnabled
{
false
}
;
RefPtr
<
ODoHService
>
mODoHService
;
nsCOMPtr
<
nsINetworkLinkService
>
mLinkService
;
}
;
extern
TRRService
*
gTRRService
;
}
}
#
endif
