#
include
"
mozilla
/
net
/
TRRServiceParent
.
h
"
#
include
"
mozilla
/
ipc
/
FileDescriptor
.
h
"
#
include
"
mozilla
/
net
/
SocketProcessParent
.
h
"
#
include
"
mozilla
/
psm
/
PSMIPCTypes
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsICaptivePortalService
.
h
"
#
include
"
nsIParentalControlsService
.
h
"
#
include
"
nsINetworkLinkService
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIOService
.
h
"
#
include
"
TRRService
.
h
"
namespace
mozilla
{
namespace
net
{
NS_IMPL_ISUPPORTS
(
TRRServiceParent
nsIObserver
nsISupportsWeakReference
)
void
TRRServiceParent
:
:
Init
(
)
{
MOZ_ASSERT
(
gIOService
)
;
if
(
!
gIOService
-
>
SocketProcessReady
(
)
)
{
RefPtr
<
TRRServiceParent
>
self
=
this
;
gIOService
-
>
CallOrWaitForSocketProcess
(
[
self
]
(
)
{
self
-
>
Init
(
)
;
}
)
;
return
;
}
SocketProcessParent
*
socketParent
=
SocketProcessParent
:
:
GetSingleton
(
)
;
if
(
!
socketParent
)
{
return
;
}
TRRService
:
:
AddObserver
(
this
)
;
bool
captiveIsPassed
=
TRRService
:
:
CheckCaptivePortalIsPassed
(
)
;
bool
parentalControlEnabled
=
TRRService
:
:
GetParentalControlEnabledInternal
(
)
;
nsCOMPtr
<
nsINetworkLinkService
>
nls
=
do_GetService
(
NS_NETWORK_LINK_SERVICE_CONTRACTID
)
;
nsTArray
<
nsCString
>
suffixList
;
if
(
nls
)
{
nls
-
>
GetDnsSuffixList
(
suffixList
)
;
}
Unused
<
<
socketParent
-
>
SendPTRRServiceConstructor
(
this
captiveIsPassed
parentalControlEnabled
suffixList
)
;
}
NS_IMETHODIMP
TRRServiceParent
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
strcmp
(
aTopic
kOpenCaptivePortalLoginEvent
)
)
{
Unused
<
<
SendNotifyObserver
(
nsDependentCString
(
aTopic
)
aData
?
nsDependentString
(
aData
)
:
VoidString
(
)
)
;
}
else
if
(
!
strcmp
(
aTopic
NS_CAPTIVE_PORTAL_CONNECTIVITY
)
)
{
if
(
!
mTRRBLStorageInited
)
{
RefPtr
<
DataStorage
>
storage
=
DataStorage
:
:
Get
(
DataStorageClass
:
:
TRRBlacklist
)
;
if
(
storage
)
{
nsresult
rv
=
storage
-
>
Init
(
nullptr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Unused
<
<
SendNotifyObserver
(
nsDependentCString
(
aTopic
)
aData
?
nsDependentString
(
aData
)
:
VoidString
(
)
)
;
return
NS_OK
;
}
psm
:
:
DataStorageEntry
entry
;
storage
-
>
GetAll
(
&
entry
.
items
(
)
)
;
RefPtr
<
TRRServiceParent
>
self
=
this
;
nsCString
topic
(
aTopic
)
;
nsString
data
(
aData
)
;
rv
=
storage
-
>
AsyncTakeFileDesc
(
[
self
entry
topic
data
]
(
ipc
:
:
FileDescriptor
&
&
aWriteFd
)
{
Unused
<
<
self
-
>
SendInitTRRBLStorage
(
entry
aWriteFd
)
;
Unused
<
<
self
-
>
SendNotifyObserver
(
topic
data
)
;
self
-
>
mTRRBLStorageInited
=
true
;
}
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
return
NS_OK
;
}
}
}
Unused
<
<
SendNotifyObserver
(
nsDependentCString
(
aTopic
)
aData
?
nsDependentString
(
aData
)
:
VoidString
(
)
)
;
}
else
if
(
!
strcmp
(
aTopic
kClearPrivateData
)
|
|
!
strcmp
(
aTopic
kPurge
)
)
{
Unused
<
<
SendNotifyObserver
(
nsDependentCString
(
aTopic
)
aData
?
nsDependentString
(
aData
)
:
VoidString
(
)
)
;
}
else
if
(
!
strcmp
(
aTopic
NS_DNS_SUFFIX_LIST_UPDATED_TOPIC
)
|
|
!
strcmp
(
aTopic
NS_NETWORK_LINK_TOPIC
)
)
{
nsCOMPtr
<
nsINetworkLinkService
>
link
=
do_QueryInterface
(
aSubject
)
;
if
(
link
)
{
nsTArray
<
nsCString
>
suffixList
;
link
-
>
GetDnsSuffixList
(
suffixList
)
;
bool
platformDisabledTRR
=
TRRService
:
:
CheckPlatformDNSStatus
(
link
)
;
Unused
<
<
SendUpdatePlatformDNSInformation
(
suffixList
platformDisabledTRR
)
;
}
}
return
NS_OK
;
}
}
}
