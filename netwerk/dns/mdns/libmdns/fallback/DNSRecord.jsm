'
use
strict
'
;
this
.
EXPORTED_SYMBOLS
=
[
'
DNSRecord
'
]
;
const
{
utils
:
Cu
}
=
Components
;
ChromeUtils
.
import
(
'
resource
:
/
/
gre
/
modules
/
DataWriter
.
jsm
'
)
;
ChromeUtils
.
import
(
'
resource
:
/
/
gre
/
modules
/
DNSTypes
.
jsm
'
)
;
class
DNSRecord
{
constructor
(
properties
=
{
}
)
{
this
.
name
=
properties
.
name
|
|
'
'
;
this
.
recordType
=
properties
.
recordType
|
|
DNS_RECORD_TYPES
.
ANY
;
this
.
classCode
=
properties
.
classCode
|
|
DNS_CLASS_CODES
.
IN
;
this
.
cacheFlush
=
properties
.
cacheFlush
|
|
false
;
}
static
parseFromPacketReader
(
reader
)
{
let
name
=
reader
.
getLabel
(
)
;
let
recordType
=
reader
.
getValue
(
2
)
;
let
classCode
=
reader
.
getValue
(
2
)
;
let
cacheFlush
=
(
classCode
&
0x8000
)
?
true
:
false
;
classCode
&
=
0xff
;
return
new
this
(
{
name
:
name
recordType
:
recordType
classCode
:
classCode
cacheFlush
:
cacheFlush
}
)
;
}
serialize
(
)
{
let
writer
=
new
DataWriter
(
)
;
writer
.
putLabel
(
this
.
name
)
;
writer
.
putValue
(
this
.
recordType
2
)
;
let
classCode
=
this
.
classCode
;
if
(
this
.
cacheFlush
)
{
classCode
|
=
0x8000
;
}
writer
.
putValue
(
classCode
2
)
;
return
writer
.
data
;
}
toJSON
(
)
{
return
JSON
.
stringify
(
this
.
toJSONObject
(
)
)
;
}
toJSONObject
(
)
{
return
{
name
:
this
.
name
recordType
:
this
.
recordType
classCode
:
this
.
classCode
cacheFlush
:
this
.
cacheFlush
}
;
}
}
