#
ifndef
nsDNSService2_h__
#
define
nsDNSService2_h__
#
include
"
nsPIDNSService
.
h
"
#
include
"
nsIIDNService
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsHostResolver
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsAuthSSPI
;
class
nsDNSService
final
:
public
nsPIDNSService
public
nsIObserver
public
nsIMemoryReporter
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSPIDNSSERVICE
NS_DECL_NSIDNSSERVICE
NS_DECL_NSIOBSERVER
NS_DECL_NSIMEMORYREPORTER
nsDNSService
(
)
;
static
nsIDNSService
*
GetXPCOMSingleton
(
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
bool
GetOffline
(
)
const
;
protected
:
friend
class
nsAuthSSPI
;
nsresult
DeprecatedSyncResolve
(
const
nsACString
&
aHostname
uint32_t
flags
const
mozilla
:
:
OriginAttributes
&
aOriginAttributes
nsIDNSRecord
*
*
result
)
;
private
:
~
nsDNSService
(
)
;
static
nsDNSService
*
GetSingleton
(
)
;
uint16_t
GetAFForLookup
(
const
nsACString
&
host
uint32_t
flags
)
;
nsresult
PreprocessHostname
(
bool
aLocalDomain
const
nsACString
&
aInput
nsIIDNService
*
aIDN
nsACString
&
aACE
)
;
nsresult
ResolveInternal
(
const
nsACString
&
aHostname
uint32_t
flags
const
mozilla
:
:
OriginAttributes
&
aOriginAttributes
nsIDNSRecord
*
*
result
)
;
RefPtr
<
nsHostResolver
>
mResolver
;
nsCOMPtr
<
nsIIDNService
>
mIDN
;
mozilla
:
:
Mutex
mLock
;
nsCString
mIPv4OnlyDomains
;
nsCString
mForceResolve
;
bool
mDisableIPv6
;
bool
mDisablePrefetch
;
bool
mBlockDotOnion
;
bool
mFirstTime
;
bool
mNotifyResolution
;
bool
mOfflineLocalhost
;
bool
mForceResolveOn
;
nsTHashtable
<
nsCStringHashKey
>
mLocalDomains
;
}
;
#
endif
