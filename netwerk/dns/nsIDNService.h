#
ifndef
nsIDNService_h__
#
define
nsIDNService_h__
#
include
"
nsIIDNService
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWeakReference
.
h
"
#
ifdef
IDNA2008
#
include
"
unicode
/
uidna
.
h
"
#
else
#
include
"
nsIUnicodeNormalizer
.
h
"
#
include
"
nsIDNKitInterface
.
h
"
#
endif
#
include
"
nsString
.
h
"
class
nsIPrefBranch
;
class
nsIDNService
final
:
public
nsIIDNService
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIIDNSERVICE
NS_DECL_NSIOBSERVER
nsIDNService
(
)
;
nsresult
Init
(
)
;
protected
:
virtual
~
nsIDNService
(
)
;
private
:
enum
stringPrepFlag
{
eStringPrepForDNS
eStringPrepForUI
eStringPrepIgnoreErrors
}
;
void
normalizeFullStops
(
nsAString
&
s
)
;
nsresult
stringPrepAndACE
(
const
nsAString
&
in
nsACString
&
out
stringPrepFlag
flag
)
;
nsresult
stringPrep
(
const
nsAString
&
in
nsAString
&
out
stringPrepFlag
flag
)
;
nsresult
decodeACE
(
const
nsACString
&
in
nsACString
&
out
stringPrepFlag
flag
)
;
nsresult
UTF8toACE
(
const
nsACString
&
input
nsACString
&
ace
stringPrepFlag
flag
)
;
nsresult
ACEtoUTF8
(
const
nsACString
&
input
nsACString
&
_retval
stringPrepFlag
flag
)
;
bool
isInWhitelist
(
const
nsACString
&
host
)
;
void
prefsChanged
(
nsIPrefBranch
*
prefBranch
const
char16_t
*
pref
)
;
bool
isLabelSafe
(
const
nsAString
&
label
)
;
bool
illegalScriptCombo
(
int32_t
script
int32_t
&
savedScript
)
;
#
ifdef
IDNA2008
nsresult
IDNA2008ToUnicode
(
const
nsACString
&
input
nsAString
&
output
)
;
nsresult
IDNA2008StringPrep
(
const
nsAString
&
input
nsAString
&
output
stringPrepFlag
flag
)
;
UIDNA
*
mIDNA
;
#
else
idn_nameprep_t
mNamePrepHandle
;
nsCOMPtr
<
nsIUnicodeNormalizer
>
mNormalizer
;
#
endif
nsXPIDLString
mIDNBlacklist
;
bool
mShowPunycode
;
enum
restrictionProfile
{
eASCIIOnlyProfile
eHighlyRestrictiveProfile
eModeratelyRestrictiveProfile
}
;
restrictionProfile
mRestrictionProfile
;
nsCOMPtr
<
nsIPrefBranch
>
mIDNWhitelistPrefBranch
;
bool
mIDNUseWhitelist
;
}
;
#
endif
