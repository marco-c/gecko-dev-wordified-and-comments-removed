#
ifndef
nsIDNService_h__
#
define
nsIDNService_h__
#
include
"
nsIIDNService
.
h
"
#
include
"
mozilla
/
RWLock
.
h
"
#
include
"
mozilla
/
intl
/
UnicodeScriptCodes
.
h
"
#
include
"
mozilla
/
net
/
IDNBlocklistUtils
.
h
"
#
include
"
mozilla
/
Span
.
h
"
class
nsIPrefBranch
;
namespace
mozilla
:
:
net
{
enum
ScriptCombo
:
int32_t
;
}
class
nsIDNService
final
:
public
nsIIDNService
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIIDNSERVICE
nsIDNService
(
)
;
nsresult
Init
(
)
;
protected
:
virtual
~
nsIDNService
(
)
;
private
:
void
prefsChanged
(
const
char
*
pref
)
;
static
void
PrefChanged
(
const
char
*
aPref
void
*
aSelf
)
{
auto
*
self
=
static_cast
<
nsIDNService
*
>
(
aSelf
)
;
self
-
>
prefsChanged
(
aPref
)
;
}
public
:
bool
IsLabelSafe
(
mozilla
:
:
Span
<
const
char32_t
>
aLabel
mozilla
:
:
Span
<
const
char32_t
>
aTLD
)
MOZ_EXCLUDES
(
mLock
)
;
private
:
enum
restrictionProfile
{
eASCIIOnlyProfile
eHighlyRestrictiveProfile
eModeratelyRestrictiveProfile
}
;
bool
illegalScriptCombo
(
restrictionProfile
profile
mozilla
:
:
intl
:
:
Script
script
mozilla
:
:
net
:
:
ScriptCombo
&
savedScript
)
;
mozilla
:
:
RWLock
mLock
{
"
nsIDNService
"
}
;
nsTArray
<
mozilla
:
:
net
:
:
BlocklistRange
>
mIDNBlocklist
MOZ_GUARDED_BY
(
mLock
)
;
restrictionProfile
mRestrictionProfile
MOZ_GUARDED_BY
(
mLock
)
{
eASCIIOnlyProfile
}
;
}
;
extern
"
C
"
MOZ_EXPORT
bool
mozilla_net_is_label_safe
(
const
char32_t
*
aLabel
size_t
aLabelLen
const
char32_t
*
aTld
size_t
aTldLen
)
;
#
endif
