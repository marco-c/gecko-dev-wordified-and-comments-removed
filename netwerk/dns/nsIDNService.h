#
ifndef
nsIDNService_h__
#
define
nsIDNService_h__
#
include
"
nsIIDNService
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
intl
/
UnicodeScriptCodes
.
h
"
#
include
"
mozilla
/
net
/
IDNBlocklistUtils
.
h
"
#
include
"
mozilla
/
intl
/
IDNA
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsString
.
h
"
class
nsIPrefBranch
;
class
nsIDNService
final
:
public
nsIIDNService
public
nsSupportsWeakReference
public
mozilla
:
:
SingleWriterLockOwner
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIIDNSERVICE
nsIDNService
(
)
;
bool
OnWritingThread
(
)
const
override
{
return
NS_IsMainThread
(
)
;
}
nsresult
Init
(
)
;
protected
:
virtual
~
nsIDNService
(
)
;
private
:
enum
stringPrepFlag
{
eStringPrepForDNS
eStringPrepForUI
eStringPrepIgnoreErrors
}
;
void
normalizeFullStops
(
nsAString
&
s
)
;
nsresult
stringPrepAndACE
(
const
nsAString
&
in
nsACString
&
out
stringPrepFlag
flag
)
;
nsresult
stringPrep
(
const
nsAString
&
in
nsAString
&
out
stringPrepFlag
flag
)
;
nsresult
decodeACE
(
const
nsACString
&
in
nsACString
&
out
stringPrepFlag
flag
)
;
nsresult
UTF8toACE
(
const
nsACString
&
input
nsACString
&
ace
stringPrepFlag
flag
)
;
nsresult
ACEtoUTF8
(
const
nsACString
&
input
nsACString
&
_retval
stringPrepFlag
flag
)
;
bool
isInWhitelist
(
const
nsACString
&
host
)
;
void
prefsChanged
(
const
char
*
pref
)
;
static
void
PrefChanged
(
const
char
*
aPref
void
*
aSelf
)
{
auto
*
self
=
static_cast
<
nsIDNService
*
>
(
aSelf
)
;
mozilla
:
:
MutexSingleWriterAutoLock
lock
(
self
-
>
mLock
)
;
self
-
>
prefsChanged
(
aPref
)
;
}
bool
isLabelSafe
(
const
nsAString
&
label
)
;
bool
illegalScriptCombo
(
mozilla
:
:
intl
:
:
Script
script
int32_t
&
savedScript
)
;
nsresult
IDNA2008ToUnicode
(
const
nsACString
&
input
nsAString
&
output
)
;
nsresult
IDNA2008StringPrep
(
const
nsAString
&
input
nsAString
&
output
stringPrepFlag
flag
)
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
intl
:
:
IDNA
>
mIDNA
;
mozilla
:
:
MutexSingleWriter
mLock
;
nsTArray
<
mozilla
:
:
net
:
:
BlocklistRange
>
mIDNBlocklist
GUARDED_BY
(
mLock
)
;
bool
mShowPunycode
GUARDED_BY
(
mLock
)
=
false
;
enum
restrictionProfile
{
eASCIIOnlyProfile
eHighlyRestrictiveProfile
eModeratelyRestrictiveProfile
}
;
restrictionProfile
mRestrictionProfile
GUARDED_BY
(
mLock
)
{
eASCIIOnlyProfile
}
;
nsCOMPtr
<
nsIPrefBranch
>
mIDNWhitelistPrefBranch
GUARDED_BY
(
mLock
)
;
bool
mIDNUseWhitelist
GUARDED_BY
(
mLock
)
=
false
;
}
;
#
endif
