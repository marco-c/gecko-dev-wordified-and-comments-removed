#
ifndef
NETWERK_SCTP_DATACHANNEL_DATACHANNEL_H_
#
define
NETWERK_SCTP_DATACHANNEL_DATACHANNEL_H_
#
ifdef
MOZ_WEBRTC_SIGNALING
#
define
SCTP_DTLS_SUPPORTED
1
#
endif
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
<
errno
.
h
>
#
include
"
nsISupports
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsDeque
.
h
"
#
include
"
mozilla
/
dom
/
Blob
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
DataChannelProtocol
.
h
"
#
include
"
DataChannelListener
.
h
"
#
include
"
mozilla
/
net
/
NeckoTargetHolder
.
h
"
#
include
"
DataChannelLog
.
h
"
#
ifdef
SCTP_DTLS_SUPPORTED
#
include
"
transport
/
sigslot
.
h
"
#
include
"
transport
/
transportlayer
.
h
"
#
endif
#
ifndef
EALREADY
#
define
EALREADY
WSAEALREADY
#
endif
extern
"
C
"
{
struct
socket
;
struct
sctp_rcvinfo
;
}
namespace
mozilla
{
class
DataChannelConnection
;
class
DataChannel
;
class
DataChannelOnMessageAvailable
;
class
MediaPacket
;
class
MediaTransportHandler
;
namespace
dom
{
struct
RTCStatsCollection
;
}
;
enum
class
DataChannelState
{
Connecting
Open
Closing
Closed
}
;
enum
class
DataChannelConnectionState
{
Connecting
Open
Closed
}
;
class
OutgoingMsg
{
public
:
OutgoingMsg
(
struct
sctp_sendv_spa
&
info
const
uint8_t
*
data
size_t
length
)
;
~
OutgoingMsg
(
)
=
default
;
;
void
Advance
(
size_t
offset
)
;
struct
sctp_sendv_spa
&
GetInfo
(
)
{
return
*
mInfo
;
}
;
size_t
GetLength
(
)
const
{
return
mLength
;
}
;
size_t
GetLeft
(
)
const
{
return
mLength
-
mPos
;
}
;
const
uint8_t
*
GetData
(
)
{
return
(
const
uint8_t
*
)
(
mData
+
mPos
)
;
}
;
protected
:
OutgoingMsg
(
)
:
mLength
(
0
)
mData
(
nullptr
)
mInfo
(
nullptr
)
mPos
(
0
)
{
}
;
size_t
mLength
;
const
uint8_t
*
mData
;
struct
sctp_sendv_spa
*
mInfo
;
size_t
mPos
;
}
;
class
BufferedOutgoingMsg
:
public
OutgoingMsg
{
public
:
explicit
BufferedOutgoingMsg
(
OutgoingMsg
&
message
)
;
~
BufferedOutgoingMsg
(
)
;
}
;
class
QueuedDataMessage
{
public
:
QueuedDataMessage
(
uint16_t
stream
uint32_t
ppid
int
flags
const
void
*
data
uint32_t
length
)
:
mStream
(
stream
)
mPpid
(
ppid
)
mFlags
(
flags
)
mLength
(
length
)
{
mData
=
static_cast
<
uint8_t
*
>
(
moz_xmalloc
(
(
size_t
)
length
)
)
;
memcpy
(
mData
data
(
size_t
)
length
)
;
}
~
QueuedDataMessage
(
)
{
free
(
mData
)
;
}
uint16_t
mStream
;
uint32_t
mPpid
;
int
mFlags
;
uint32_t
mLength
;
uint8_t
*
mData
;
}
;
class
DataChannelConnection
final
:
public
net
:
:
NeckoTargetHolder
#
ifdef
SCTP_DTLS_SUPPORTED
public
sigslot
:
:
has_slots
<
>
#
endif
{
friend
class
DataChannel
;
friend
class
DataChannelOnMessageAvailable
;
friend
class
DataChannelConnectRunnable
;
virtual
~
DataChannelConnection
(
)
;
public
:
enum
{
PENDING_NONE
=
0U
PENDING_DCEP
=
1U
PENDING_DATA
=
2U
}
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
DataChannelConnection
)
class
DataConnectionListener
:
public
SupportsWeakPtr
{
public
:
virtual
~
DataConnectionListener
(
)
=
default
;
virtual
void
NotifyDataChannel
(
already_AddRefed
<
DataChannel
>
channel
)
=
0
;
virtual
void
NotifyDataChannelOpen
(
DataChannel
*
aChannel
)
=
0
;
virtual
void
NotifyDataChannelClosed
(
DataChannel
*
aChannel
)
=
0
;
virtual
void
NotifySctpConnected
(
)
=
0
;
virtual
void
NotifySctpClosed
(
)
=
0
;
}
;
static
Maybe
<
RefPtr
<
DataChannelConnection
>
>
Create
(
DataConnectionListener
*
aListener
nsISerialEventTarget
*
aTarget
MediaTransportHandler
*
aHandler
const
uint16_t
aLocalPort
const
uint16_t
aNumStreams
const
Maybe
<
uint64_t
>
&
aMaxMessageSize
)
;
void
Destroy
(
)
;
void
DestroyOnSTS
(
struct
socket
*
aMasterSocket
struct
socket
*
aSocket
)
;
void
DestroyOnSTSFinal
(
)
;
void
SetMaxMessageSize
(
bool
aMaxMessageSizeSet
uint64_t
aMaxMessageSize
)
;
uint64_t
GetMaxMessageSize
(
)
;
void
AppendStatsToReport
(
const
UniquePtr
<
dom
:
:
RTCStatsCollection
>
&
aReport
const
DOMHighResTimeStamp
aTimestamp
)
const
;
#
ifdef
ALLOW_DIRECT_SCTP_LISTEN_CONNECT
bool
Listen
(
unsigned
short
port
)
;
bool
Connect
(
const
char
*
addr
unsigned
short
port
)
;
#
endif
#
ifdef
SCTP_DTLS_SUPPORTED
bool
ConnectToTransport
(
const
std
:
:
string
&
aTransportId
const
bool
aClient
const
uint16_t
aLocalPort
const
uint16_t
aRemotePort
)
;
void
TransportStateChange
(
const
std
:
:
string
&
aTransportId
TransportLayer
:
:
State
aState
)
;
void
CompleteConnect
(
)
;
void
SetSignals
(
const
std
:
:
string
&
aTransportId
)
;
#
endif
typedef
enum
{
RELIABLE
=
0
PARTIAL_RELIABLE_REXMIT
=
1
PARTIAL_RELIABLE_TIMED
=
2
}
Type
;
[
[
nodiscard
]
]
already_AddRefed
<
DataChannel
>
Open
(
const
nsACString
&
label
const
nsACString
&
protocol
Type
type
bool
inOrder
uint32_t
prValue
DataChannelListener
*
aListener
nsISupports
*
aContext
bool
aExternalNegotiated
uint16_t
aStream
)
;
void
Stop
(
)
;
void
Close
(
DataChannel
*
aChannel
)
;
void
CloseLocked
(
DataChannel
*
aChannel
)
MOZ_REQUIRES
(
mLock
)
;
void
CloseAll
(
)
;
int
SendMsg
(
uint16_t
stream
const
nsACString
&
aMsg
)
{
return
SendDataMsgCommon
(
stream
aMsg
false
)
;
}
int
SendBinaryMsg
(
uint16_t
stream
const
nsACString
&
aMsg
)
{
return
SendDataMsgCommon
(
stream
aMsg
true
)
;
}
int
SendBlob
(
uint16_t
stream
nsIInputStream
*
aBlob
)
;
int
ReceiveCallback
(
struct
socket
*
sock
void
*
data
size_t
datalen
struct
sctp_rcvinfo
rcv
int
flags
)
;
Mutex
mLock
;
void
ReadBlob
(
already_AddRefed
<
DataChannelConnection
>
aThis
uint16_t
aStream
nsIInputStream
*
aBlob
)
;
bool
SendDeferredMessages
(
)
MOZ_REQUIRES
(
mLock
)
;
#
ifdef
SCTP_DTLS_SUPPORTED
int
SctpDtlsOutput
(
void
*
addr
void
*
buffer
size_t
length
uint8_t
tos
uint8_t
set_df
)
;
#
endif
bool
InShutdown
(
)
const
{
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
return
mShutdown
;
#
else
return
false
;
#
endif
}
protected
:
WeakPtr
<
DataConnectionListener
>
mListener
;
private
:
DataChannelConnection
(
DataConnectionListener
*
aListener
nsISerialEventTarget
*
aTarget
MediaTransportHandler
*
aHandler
)
;
bool
Init
(
const
uint16_t
aLocalPort
const
uint16_t
aNumStreams
const
Maybe
<
uint64_t
>
&
aMaxMessageSize
)
;
DataChannelConnectionState
GetState
(
)
const
MOZ_REQUIRES
(
mLock
)
{
mLock
.
AssertCurrentThreadOwns
(
)
;
return
mState
;
}
void
SetState
(
DataChannelConnectionState
aState
)
MOZ_REQUIRES
(
mLock
)
;
#
ifdef
SCTP_DTLS_SUPPORTED
static
void
DTLSConnectThread
(
void
*
data
)
;
void
SendPacket
(
std
:
:
unique_ptr
<
MediaPacket
>
&
&
packet
)
;
void
SctpDtlsInput
(
const
std
:
:
string
&
aTransportId
const
MediaPacket
&
packet
)
;
#
endif
DataChannel
*
FindChannelByStream
(
uint16_t
stream
)
MOZ_REQUIRES
(
mLock
)
;
uint16_t
FindFreeStream
(
)
MOZ_REQUIRES
(
mLock
)
;
bool
RequestMoreStreams
(
int32_t
aNeeded
=
16
)
MOZ_REQUIRES
(
mLock
)
;
uint32_t
UpdateCurrentStreamIndex
(
)
MOZ_REQUIRES
(
mLock
)
;
uint32_t
GetCurrentStreamIndex
(
)
MOZ_REQUIRES
(
mLock
)
;
int
SendControlMessage
(
const
uint8_t
*
data
uint32_t
len
uint16_t
stream
)
MOZ_REQUIRES
(
mLock
)
;
int
SendOpenAckMessage
(
uint16_t
stream
)
MOZ_REQUIRES
(
mLock
)
;
int
SendOpenRequestMessage
(
const
nsACString
&
label
const
nsACString
&
protocol
uint16_t
stream
bool
unordered
uint16_t
prPolicy
uint32_t
prValue
)
MOZ_REQUIRES
(
mLock
)
;
bool
SendBufferedMessages
(
nsTArray
<
UniquePtr
<
BufferedOutgoingMsg
>
>
&
buffer
size_t
*
aWritten
)
;
int
SendMsgInternal
(
OutgoingMsg
&
msg
size_t
*
aWritten
)
;
int
SendMsgInternalOrBuffer
(
nsTArray
<
UniquePtr
<
BufferedOutgoingMsg
>
>
&
buffer
OutgoingMsg
&
msg
bool
&
buffered
size_t
*
aWritten
)
MOZ_REQUIRES
(
mLock
)
;
int
SendDataMsgInternalOrBuffer
(
DataChannel
&
channel
const
uint8_t
*
data
size_t
len
uint32_t
ppid
)
MOZ_REQUIRES
(
mLock
)
;
int
SendDataMsg
(
DataChannel
&
channel
const
uint8_t
*
data
size_t
len
uint32_t
ppidPartial
uint32_t
ppidFinal
)
MOZ_REQUIRES
(
mLock
)
;
int
SendDataMsgCommon
(
uint16_t
stream
const
nsACString
&
aMsg
bool
isBinary
)
;
void
DeliverQueuedData
(
uint16_t
stream
)
MOZ_REQUIRES
(
mLock
)
;
already_AddRefed
<
DataChannel
>
OpenFinish
(
already_AddRefed
<
DataChannel
>
&
&
aChannel
)
MOZ_REQUIRES
(
mLock
)
;
void
ProcessQueuedOpens
(
)
MOZ_REQUIRES
(
mLock
)
;
void
ClearResets
(
)
MOZ_REQUIRES
(
mLock
)
;
void
SendOutgoingStreamReset
(
)
MOZ_REQUIRES
(
mLock
)
;
void
ResetOutgoingStream
(
uint16_t
stream
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleOpenRequestMessage
(
const
struct
rtcweb_datachannel_open_request
*
req
uint32_t
length
uint16_t
stream
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleOpenAckMessage
(
const
struct
rtcweb_datachannel_ack
*
ack
uint32_t
length
uint16_t
stream
)
;
void
HandleUnknownMessage
(
uint32_t
ppid
uint32_t
length
uint16_t
stream
)
MOZ_REQUIRES
(
mLock
)
;
uint8_t
BufferMessage
(
nsACString
&
recvBuffer
const
void
*
data
uint32_t
length
uint32_t
ppid
int
flags
)
;
void
HandleDataMessage
(
const
void
*
buffer
size_t
length
uint32_t
ppid
uint16_t
stream
int
flags
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleDCEPMessage
(
const
void
*
buffer
size_t
length
uint32_t
ppid
uint16_t
stream
int
flags
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleMessage
(
const
void
*
buffer
size_t
length
uint32_t
ppid
uint16_t
stream
int
flags
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleAssociationChangeEvent
(
const
struct
sctp_assoc_change
*
sac
)
MOZ_REQUIRES
(
mLock
)
;
void
HandlePeerAddressChangeEvent
(
const
struct
sctp_paddr_change
*
spc
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleRemoteErrorEvent
(
const
struct
sctp_remote_error
*
sre
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleShutdownEvent
(
const
struct
sctp_shutdown_event
*
sse
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleAdaptationIndication
(
const
struct
sctp_adaptation_event
*
sai
)
MOZ_REQUIRES
(
mLock
)
;
void
HandlePartialDeliveryEvent
(
const
struct
sctp_pdapi_event
*
spde
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleSendFailedEvent
(
const
struct
sctp_send_failed_event
*
ssfe
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleStreamResetEvent
(
const
struct
sctp_stream_reset_event
*
strrst
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleStreamChangeEvent
(
const
struct
sctp_stream_change_event
*
strchg
)
MOZ_REQUIRES
(
mLock
)
;
void
HandleNotification
(
const
union
sctp_notification
*
notif
size_t
n
)
MOZ_REQUIRES
(
mLock
)
;
#
ifdef
SCTP_DTLS_SUPPORTED
bool
IsSTSThread
(
)
const
{
bool
on
=
false
;
if
(
mSTS
)
{
mSTS
-
>
IsOnCurrentThread
(
&
on
)
;
}
return
on
;
}
#
endif
class
Channels
{
public
:
Channels
(
)
:
mMutex
(
"
DataChannelConnection
:
:
Channels
:
:
mMutex
"
)
{
}
void
Insert
(
const
RefPtr
<
DataChannel
>
&
aChannel
)
;
bool
Remove
(
const
RefPtr
<
DataChannel
>
&
aChannel
)
;
RefPtr
<
DataChannel
>
Get
(
uint16_t
aId
)
const
;
typedef
AutoTArray
<
RefPtr
<
DataChannel
>
16
>
ChannelArray
;
ChannelArray
GetAll
(
)
const
{
MutexAutoLock
lock
(
mMutex
)
;
return
mChannels
.
Clone
(
)
;
}
RefPtr
<
DataChannel
>
GetNextChannel
(
uint16_t
aCurrentId
)
const
;
private
:
struct
IdComparator
{
bool
Equals
(
const
RefPtr
<
DataChannel
>
&
aChannel
uint16_t
aId
)
const
;
bool
LessThan
(
const
RefPtr
<
DataChannel
>
&
aChannel
uint16_t
aId
)
const
;
bool
Equals
(
const
RefPtr
<
DataChannel
>
&
a1
const
RefPtr
<
DataChannel
>
&
a2
)
const
;
bool
LessThan
(
const
RefPtr
<
DataChannel
>
&
a1
const
RefPtr
<
DataChannel
>
&
a2
)
const
;
}
;
mutable
Mutex
mMutex
;
ChannelArray
mChannels
MOZ_GUARDED_BY
(
mMutex
)
;
}
;
bool
mSendInterleaved
MOZ_GUARDED_BY
(
mLock
)
=
false
;
bool
mMaxMessageSizeSet
=
false
;
uint64_t
mMaxMessageSize
MOZ_GUARDED_BY
(
mLock
)
=
0
;
Maybe
<
bool
>
mAllocateEven
;
Channels
mChannels
;
uint32_t
mCurrentStream
=
0
;
nsRefPtrDeque
<
DataChannel
>
mPending
;
size_t
mNegotiatedIdLimit
MOZ_GUARDED_BY
(
mLock
)
=
0
;
uint8_t
mPendingType
MOZ_GUARDED_BY
(
mLock
)
=
PENDING_NONE
;
nsTArray
<
UniquePtr
<
QueuedDataMessage
>
>
mQueuedData
MOZ_GUARDED_BY
(
mLock
)
;
nsTArray
<
UniquePtr
<
BufferedOutgoingMsg
>
>
mBufferedControl
MOZ_GUARDED_BY
(
mLock
)
;
AutoTArray
<
uint16_t
4
>
mStreamsResetting
MOZ_GUARDED_BY
(
mLock
)
;
struct
socket
*
mMasterSocket
=
nullptr
;
struct
socket
*
mSocket
=
nullptr
;
DataChannelConnectionState
mState
MOZ_GUARDED_BY
(
mLock
)
=
DataChannelConnectionState
:
:
Closed
;
#
ifdef
SCTP_DTLS_SUPPORTED
std
:
:
string
mTransportId
;
bool
mConnectedToTransportHandler
=
false
;
RefPtr
<
MediaTransportHandler
>
mTransportHandler
;
nsCOMPtr
<
nsIEventTarget
>
mSTS
;
#
endif
uint16_t
mLocalPort
=
0
;
uint16_t
mRemotePort
=
0
;
nsCOMPtr
<
nsIThread
>
mInternalIOThread
=
nullptr
;
nsCString
mRecvBuffer
;
bool
mDeferSend
=
false
;
std
:
:
vector
<
std
:
:
unique_ptr
<
MediaPacket
>
>
mDeferredSend
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
bool
mShutdown
;
#
endif
uintptr_t
mId
=
0
;
}
;
#
define
ENSURE_DATACONNECTION
\
do
{
\
MOZ_ASSERT
(
mConnection
)
;
\
if
(
!
mConnection
)
{
\
return
;
\
}
\
}
while
(
0
)
class
DataChannel
{
friend
class
DataChannelOnMessageAvailable
;
friend
class
DataChannelConnection
;
public
:
DataChannel
(
DataChannelConnection
*
connection
uint16_t
stream
DataChannelState
state
const
nsACString
&
label
const
nsACString
&
protocol
uint16_t
policy
uint32_t
value
bool
ordered
bool
negotiated
DataChannelListener
*
aListener
nsISupports
*
aContext
)
:
mListener
(
aListener
)
mContext
(
aContext
)
mConnection
(
connection
)
mLabel
(
label
)
mProtocol
(
protocol
)
mReadyState
(
state
)
mStream
(
stream
)
mPrPolicy
(
policy
)
mPrValue
(
value
)
mNegotiated
(
negotiated
)
mOrdered
(
ordered
)
mFlags
(
0
)
mIsRecvBinary
(
false
)
mBufferedThreshold
(
0
)
mBufferedAmount
(
0
)
mMainThreadEventTarget
(
connection
-
>
GetNeckoTarget
(
)
)
mStatsLock
(
"
netwer
:
:
sctp
:
:
DataChannel
:
:
mStatsLock
"
)
{
NS_ASSERTION
(
mConnection
"
NULL
connection
"
)
;
}
private
:
~
DataChannel
(
)
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
DataChannel
)
void
StreamClosedLocked
(
)
;
void
ReleaseConnection
(
)
;
void
Close
(
)
;
void
SetListener
(
DataChannelListener
*
aListener
nsISupports
*
aContext
)
;
static
void
SendErrnoToErrorResult
(
int
error
size_t
aMessageSize
ErrorResult
&
aRv
)
;
void
SendMsg
(
const
nsACString
&
aMsg
ErrorResult
&
aRv
)
;
void
SendBinaryMsg
(
const
nsACString
&
aMsg
ErrorResult
&
aRv
)
;
void
SendBinaryBlob
(
dom
:
:
Blob
&
aBlob
ErrorResult
&
aRv
)
;
uint16_t
GetType
(
)
const
{
return
mPrPolicy
;
}
dom
:
:
Nullable
<
uint16_t
>
GetMaxPacketLifeTime
(
)
const
;
dom
:
:
Nullable
<
uint16_t
>
GetMaxRetransmits
(
)
const
;
bool
GetNegotiated
(
)
const
{
return
mNegotiated
;
}
bool
GetOrdered
(
)
const
{
return
mOrdered
;
}
void
IncrementBufferedAmount
(
uint32_t
aSize
ErrorResult
&
aRv
)
;
void
DecrementBufferedAmount
(
uint32_t
aSize
)
;
uint32_t
GetBufferedAmount
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mBufferedAmount
;
}
uint32_t
GetBufferedAmountLowThreshold
(
)
const
;
void
SetBufferedAmountLowThreshold
(
uint32_t
aThreshold
)
;
void
AnnounceOpen
(
)
;
void
AnnounceClosed
(
)
;
DataChannelState
GetReadyState
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mReadyState
;
}
void
SetReadyState
(
DataChannelState
aState
)
;
void
GetLabel
(
nsAString
&
aLabel
)
{
CopyUTF8toUTF16
(
mLabel
aLabel
)
;
}
void
GetProtocol
(
nsAString
&
aProtocol
)
{
CopyUTF8toUTF16
(
mProtocol
aProtocol
)
;
}
uint16_t
GetStream
(
)
const
{
return
mStream
;
}
void
SendOrQueue
(
DataChannelOnMessageAvailable
*
aMessage
)
;
struct
TrafficCounters
{
uint32_t
mMessagesSent
=
0
;
uint64_t
mBytesSent
=
0
;
uint32_t
mMessagesReceived
=
0
;
uint64_t
mBytesReceived
=
0
;
}
;
TrafficCounters
GetTrafficCounters
(
)
const
;
protected
:
DataChannelListener
*
mListener
;
nsCOMPtr
<
nsISupports
>
mContext
;
private
:
nsresult
AddDataToBinaryMsg
(
const
char
*
data
uint32_t
size
)
;
bool
EnsureValidStream
(
ErrorResult
&
aRv
)
;
void
WithTrafficCounters
(
const
std
:
:
function
<
void
(
TrafficCounters
&
)
>
&
)
;
RefPtr
<
DataChannelConnection
>
mConnection
;
bool
mEverOpened
=
false
;
nsCString
mLabel
;
nsCString
mProtocol
;
DataChannelState
mReadyState
;
uint16_t
mStream
;
uint16_t
mPrPolicy
;
uint32_t
mPrValue
;
const
bool
mNegotiated
;
const
bool
mOrdered
;
uint32_t
mFlags
;
bool
mIsRecvBinary
;
size_t
mBufferedThreshold
;
size_t
mBufferedAmount
;
nsCString
mRecvBuffer
;
nsTArray
<
UniquePtr
<
BufferedOutgoingMsg
>
>
mBufferedData
;
nsCOMPtr
<
nsISerialEventTarget
>
mMainThreadEventTarget
;
mutable
Mutex
mStatsLock
;
TrafficCounters
mTrafficCounters
MOZ_GUARDED_BY
(
mStatsLock
)
;
}
;
class
DataChannelOnMessageAvailable
:
public
Runnable
{
public
:
enum
class
EventType
{
OnConnection
OnDisconnected
OnChannelCreated
OnDataString
OnDataBinary
}
;
DataChannelOnMessageAvailable
(
EventType
aType
DataChannelConnection
*
aConnection
DataChannel
*
aChannel
nsCString
&
aData
)
:
Runnable
(
"
DataChannelOnMessageAvailable
"
)
mType
(
aType
)
mChannel
(
aChannel
)
mConnection
(
aConnection
)
mData
(
aData
)
{
}
DataChannelOnMessageAvailable
(
EventType
aType
DataChannel
*
aChannel
)
:
Runnable
(
"
DataChannelOnMessageAvailable
"
)
mType
(
aType
)
mChannel
(
aChannel
)
{
}
DataChannelOnMessageAvailable
(
EventType
aType
DataChannelConnection
*
aConnection
DataChannel
*
aChannel
)
:
Runnable
(
"
DataChannelOnMessageAvailable
"
)
mType
(
aType
)
mChannel
(
aChannel
)
mConnection
(
aConnection
)
{
}
DataChannelOnMessageAvailable
(
EventType
aType
DataChannelConnection
*
aConnection
)
:
Runnable
(
"
DataChannelOnMessageAvailable
"
)
mType
(
aType
)
mConnection
(
aConnection
)
{
}
NS_IMETHOD
Run
(
)
override
;
private
:
~
DataChannelOnMessageAvailable
(
)
=
default
;
EventType
mType
;
RefPtr
<
DataChannel
>
mChannel
;
RefPtr
<
DataChannelConnection
>
mConnection
;
nsCString
mData
;
}
;
}
#
endif
