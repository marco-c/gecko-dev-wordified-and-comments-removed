#
ifndef
NETWERK_SCTP_DATACHANNEL_DATACHANNELPROTOCOL_H_
#
define
NETWERK_SCTP_DATACHANNEL_DATACHANNELPROTOCOL_H_
#
if
defined
(
__GNUC__
)
#
define
SCTP_PACKED
__attribute__
(
(
packed
)
)
#
elif
defined
(
_MSC_VER
)
#
pragma
pack
(
push
1
)
#
define
SCTP_PACKED
#
else
#
error
"
Unsupported
compiler
"
#
endif
#
define
WEBRTC_DATACHANNEL_STREAMS_DEFAULT
256
#
define
WEBRTC_DATACHANNEL_PORT_DEFAULT
5000
#
define
WEBRTC_DATACHANNEL_MAX_MESSAGE_SIZE_LOCAL
1073741823
#
define
WEBRTC_DATACHANNEL_MAX_MESSAGE_SIZE_REMOTE_DEFAULT
65536
#
define
WEBRTC_DATACHANNEL_MAX_MESSAGE_SIZE_REMOTE
2147483637
#
define
DATA_CHANNEL_PPID_CONTROL
50
#
define
DATA_CHANNEL_PPID_BINARY_PARTIAL
52
#
define
DATA_CHANNEL_PPID_BINARY
53
#
define
DATA_CHANNEL_PPID_DOMSTRING_PARTIAL
54
#
define
DATA_CHANNEL_PPID_DOMSTRING
51
#
define
DATA_CHANNEL_PPID_DOMSTRING_EMPTY
56
#
define
DATA_CHANNEL_PPID_BINARY_EMPTY
57
#
define
DATA_CHANNEL_MAX_BINARY_FRAGMENT
0x4000
#
define
DATA_CHANNEL_BUFFER_MESSAGE_FLAGS_TOO_LARGE
0x01
#
define
DATA_CHANNEL_BUFFER_MESSAGE_FLAGS_BUFFERED
0x02
#
define
DATA_CHANNEL_BUFFER_MESSAGE_FLAGS_COMPLETE
0x04
#
define
INVALID_STREAM
(
0xFFFF
)
#
define
MAX_NUM_STREAMS
(
2048
)
struct
rtcweb_datachannel_open_request
{
uint8_t
msg_type
;
uint8_t
channel_type
;
int16_t
priority
;
uint32_t
reliability_param
;
uint16_t
label_length
;
uint16_t
protocol_length
;
char
label
[
1
]
;
}
SCTP_PACKED
;
struct
rtcweb_datachannel_ack
{
uint8_t
msg_type
;
}
SCTP_PACKED
;
#
define
DATA_CHANNEL_ACK
2
#
define
DATA_CHANNEL_OPEN_REQUEST
3
#
define
DATA_CHANNEL_RELIABLE
0x00
#
define
DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT
0x01
#
define
DATA_CHANNEL_PARTIAL_RELIABLE_TIMED
0x02
#
define
DATA_CHANNEL_RELIABLE_UNORDERED
0x80
#
define
DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED
0x81
#
define
DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED
0x82
#
define
ERR_DATA_CHANNEL_ALREADY_OPEN
1
#
define
ERR_DATA_CHANNEL_NONE_AVAILABLE
2
#
if
defined
(
_MSC_VER
)
#
pragma
pack
(
pop
)
#
undef
SCTP_PACKED
#
endif
#
endif
