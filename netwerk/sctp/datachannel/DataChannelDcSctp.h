#
ifndef
NETWERK_SCTP_DATACHANNEL_DATACHANNELDCSCTP_H_
#
define
NETWERK_SCTP_DATACHANNEL_DATACHANNELDCSCTP_H_
#
include
"
DataChannel
.
h
"
#
include
"
net
/
dcsctp
/
public
/
dcsctp_socket
.
h
"
#
include
"
net
/
dcsctp
/
public
/
dcsctp_socket_factory
.
h
"
namespace
mozilla
{
using
namespace
dcsctp
;
class
DataChannelConnectionDcSctp
:
public
DataChannelConnection
public
DcSctpSocketCallbacks
{
public
:
DataChannelConnectionDcSctp
(
DataConnectionListener
*
aListener
nsISerialEventTarget
*
aTarget
MediaTransportHandler
*
aHandler
)
;
void
Destroy
(
)
override
;
bool
RaiseStreamLimitTo
(
uint16_t
aNewLimit
)
override
;
void
OnTransportReady
(
)
override
;
bool
Init
(
const
uint16_t
aLocalPort
const
uint16_t
aNumStreams
const
Maybe
<
uint64_t
>
&
aMaxMessageSize
)
override
;
int
SendMessage
(
DataChannel
&
aChannel
OutgoingMsg
&
&
aMsg
)
override
;
void
OnSctpPacketReceived
(
const
MediaPacket
&
aPacket
)
override
;
void
ResetStreams
(
nsTArray
<
uint16_t
>
&
aStreams
)
override
;
void
OnStreamOpen
(
uint16_t
aStream
)
override
;
SendPacketStatus
SendPacketWithStatus
(
webrtc
:
:
ArrayView
<
const
uint8_t
>
aData
)
override
;
std
:
:
unique_ptr
<
Timeout
>
CreateTimeout
(
webrtc
:
:
TaskQueueBase
:
:
DelayPrecision
aPrecision
)
override
;
void
HandleTimeout
(
TimeoutID
aId
)
;
uint32_t
GetRandomInt
(
uint32_t
aLow
uint32_t
aHigh
)
override
;
void
OnMessageReceived
(
DcSctpMessage
aMessage
)
override
;
void
OnError
(
ErrorKind
aError
absl
:
:
string_view
aMessage
)
override
;
void
OnAborted
(
ErrorKind
aError
absl
:
:
string_view
aMessage
)
override
;
void
OnConnected
(
)
override
;
void
OnClosed
(
)
override
;
void
OnConnectionRestarted
(
)
override
;
void
OnStreamsResetFailed
(
webrtc
:
:
ArrayView
<
const
StreamID
>
aOutgoingStreams
absl
:
:
string_view
aReason
)
override
;
void
OnStreamsResetPerformed
(
webrtc
:
:
ArrayView
<
const
StreamID
>
aOutgoingStreams
)
override
;
void
OnIncomingStreamsReset
(
webrtc
:
:
ArrayView
<
const
StreamID
>
aIncomingStreams
)
override
;
void
OnBufferedAmountLow
(
StreamID
aStreamId
)
override
;
void
OnLifecycleMessageFullySent
(
LifecycleId
aLifecycleId
)
override
;
void
OnLifecycleMessageExpired
(
LifecycleId
aLifecycleId
bool
aMaybeDelivered
)
override
;
private
:
void
UpdateBufferedAmount
(
StreamID
aStreamId
)
;
void
OnDCEPMessageDone
(
LifecycleId
aLifecycleId
)
;
std
:
:
unique_ptr
<
DcSctpSocketInterface
>
mDcSctp
;
std
:
:
set
<
uint16_t
>
mStreamsAwaitingAck
;
std
:
:
map
<
uint16_t
size_t
>
mBufferedAmounts
;
std
:
:
map
<
uint16_t
int
>
mDCEPBytesSent
;
uint64_t
mNextLifecycleId
=
1
;
std
:
:
map
<
uint64_t
std
:
:
pair
<
uint16_t
size_t
>
>
mBufferedDCEPBytes
;
std
:
:
vector
<
IncomingMsg
>
mPreChannelData
;
}
;
}
#
endif
