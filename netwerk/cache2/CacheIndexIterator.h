#
ifndef
CacheIndexIterator__h__
#
define
CacheIndexIterator__h__
#
include
"
nsTArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
SHA1
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
namespace
mozilla
{
namespace
net
{
class
CacheIndex
;
class
CacheIndexRecordWrapper
;
class
CacheIndexIterator
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CacheIndexIterator
)
CacheIndexIterator
(
CacheIndex
*
aIndex
bool
aAddNew
)
;
protected
:
virtual
~
CacheIndexIterator
(
)
;
public
:
nsresult
GetNextHash
(
SHA1Sum
:
:
Hash
*
aHash
)
;
nsresult
Close
(
)
;
protected
:
friend
class
CacheIndex
;
nsresult
CloseInternal
(
nsresult
aStatus
)
;
bool
ShouldBeNewAdded
(
)
{
return
mAddNew
;
}
virtual
void
AddRecord
(
CacheIndexRecordWrapper
*
aRecord
const
StaticMutexAutoLock
&
aProofOfLock
)
;
bool
RemoveRecord
(
CacheIndexRecordWrapper
*
aRecord
const
StaticMutexAutoLock
&
aProofOfLock
)
;
bool
ReplaceRecord
(
CacheIndexRecordWrapper
*
aOldRecord
CacheIndexRecordWrapper
*
aNewRecord
const
StaticMutexAutoLock
&
aProofOfLock
)
;
void
ClearRecords
(
const
StaticMutexAutoLock
&
aProofOfLock
)
;
nsresult
mStatus
;
RefPtr
<
CacheIndex
>
mIndex
;
nsTArray
<
RefPtr
<
CacheIndexRecordWrapper
>
>
mRecords
;
bool
mAddNew
;
}
;
}
}
#
endif
