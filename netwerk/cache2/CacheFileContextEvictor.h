#
ifndef
CacheFileContextEvictor__h__
#
define
CacheFileContextEvictor__h__
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
class
nsIFile
;
class
nsILoadContextInfo
;
namespace
mozilla
{
namespace
net
{
class
CacheIndexIterator
;
struct
CacheFileContextEvictorEntry
{
nsCOMPtr
<
nsILoadContextInfo
>
mInfo
;
bool
mPinned
;
nsString
mOrigin
;
PRTime
mTimeStamp
;
RefPtr
<
CacheIndexIterator
>
mIterator
;
}
;
class
CacheFileContextEvictor
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CacheFileContextEvictor
)
CacheFileContextEvictor
(
)
;
private
:
virtual
~
CacheFileContextEvictor
(
)
;
public
:
nsresult
Init
(
nsIFile
*
aCacheDirectory
)
;
void
Shutdown
(
)
;
uint32_t
ContextsCount
(
)
;
nsresult
AddContext
(
nsILoadContextInfo
*
aLoadContextInfo
bool
aPinned
const
nsAString
&
aOrigin
)
;
void
CacheIndexStateChanged
(
)
;
void
WasEvicted
(
const
nsACString
&
aKey
nsIFile
*
aFile
bool
*
aEvictedAsPinned
bool
*
aEvictedAsNonPinned
)
;
private
:
nsresult
PersistEvictionInfoToDisk
(
nsILoadContextInfo
*
aLoadContextInfo
bool
aPinned
const
nsAString
&
aOrigin
)
;
nsresult
RemoveEvictInfoFromDisk
(
nsILoadContextInfo
*
aLoadContextInfo
bool
aPinned
const
nsAString
&
aOrigin
)
;
nsresult
LoadEvictInfoFromDisk
(
)
;
nsresult
GetContextFile
(
nsILoadContextInfo
*
aLoadContextInfo
bool
aPinned
const
nsAString
&
aOrigin
nsIFile
*
*
_retval
)
;
void
CreateIterators
(
)
;
void
CloseIterators
(
)
;
void
StartEvicting
(
)
;
void
EvictEntries
(
)
;
bool
mEvicting
;
bool
mIndexIsUpToDate
;
static
bool
sDiskAlreadySearched
;
nsTArray
<
UniquePtr
<
CacheFileContextEvictorEntry
>
>
mEntries
;
nsCOMPtr
<
nsIFile
>
mCacheDirectory
;
nsCOMPtr
<
nsIFile
>
mEntriesDir
;
}
;
}
}
#
endif
