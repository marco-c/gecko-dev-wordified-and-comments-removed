#
ifndef
CacheObserver__h__
#
define
CacheObserver__h__
#
include
"
nsIObserver
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
include
"
mozilla
/
StaticPrefs_privacy
.
h
"
#
include
<
algorithm
>
namespace
mozilla
{
namespace
net
{
class
CacheObserver
:
public
nsIObserver
public
nsSupportsWeakReference
{
virtual
~
CacheObserver
(
)
=
default
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
static
nsresult
Init
(
)
;
static
nsresult
Shutdown
(
)
;
static
CacheObserver
*
Self
(
)
{
return
sSelf
;
}
static
bool
UseDiskCache
(
)
{
return
StaticPrefs
:
:
browser_cache_disk_enable
(
)
;
}
static
bool
UseMemoryCache
(
)
{
return
StaticPrefs
:
:
browser_cache_memory_enable
(
)
;
}
static
uint32_t
MetadataMemoryLimit
(
)
{
return
StaticPrefs
:
:
browser_cache_disk_metadata_memory_limit
(
)
;
}
static
uint32_t
MemoryCacheCapacity
(
)
;
static
uint32_t
DiskCacheCapacity
(
)
{
return
sDiskCacheCapacity
;
}
static
void
SetDiskCacheCapacity
(
uint32_t
)
;
static
uint32_t
DiskFreeSpaceSoftLimit
(
)
{
return
StaticPrefs
:
:
browser_cache_disk_free_space_soft_limit
(
)
;
}
static
uint32_t
DiskFreeSpaceHardLimit
(
)
{
return
StaticPrefs
:
:
browser_cache_disk_free_space_hard_limit
(
)
;
}
static
bool
SmartCacheSizeEnabled
(
)
{
return
StaticPrefs
:
:
browser_cache_disk_smart_size_enabled
(
)
;
}
static
uint32_t
PreloadChunkCount
(
)
{
return
StaticPrefs
:
:
browser_cache_disk_preload_chunk_count
(
)
;
}
static
uint32_t
MaxMemoryEntrySize
(
)
{
return
StaticPrefs
:
:
browser_cache_memory_max_entry_size
(
)
;
}
static
uint32_t
MaxDiskEntrySize
(
)
{
return
StaticPrefs
:
:
browser_cache_disk_max_entry_size
(
)
;
}
static
uint32_t
MaxDiskChunksMemoryUsage
(
bool
aPriority
)
{
return
aPriority
?
StaticPrefs
:
:
browser_cache_disk_max_priority_chunks_memory_usage
(
)
:
StaticPrefs
:
:
browser_cache_disk_max_chunks_memory_usage
(
)
;
}
static
uint32_t
HalfLifeSeconds
(
)
{
return
sHalfLifeHours
*
60
.
0F
*
60
.
0F
;
}
static
bool
ClearCacheOnShutdown
(
)
{
return
StaticPrefs
:
:
privacy_sanitize_sanitizeOnShutdown
(
)
&
&
StaticPrefs
:
:
privacy_clearOnShutdown_cache
(
)
;
}
static
bool
CacheFSReported
(
)
{
return
sCacheFSReported
;
}
static
void
SetCacheFSReported
(
)
;
static
bool
HashStatsReported
(
)
{
return
sHashStatsReported
;
}
static
void
SetHashStatsReported
(
)
;
static
uint32_t
CacheAmountWritten
(
)
{
return
sCacheAmountWritten
;
}
static
void
SetCacheAmountWritten
(
uint32_t
)
;
static
void
ParentDirOverride
(
nsIFile
*
*
aDir
)
;
static
bool
EntryIsTooBig
(
int64_t
aSize
bool
aUsingDisk
)
;
static
uint32_t
MaxShutdownIOLag
(
)
{
return
StaticPrefs
:
:
browser_cache_max_shutdown_io_lag
(
)
;
}
static
bool
IsPastShutdownIOLag
(
)
;
static
bool
ShuttingDown
(
)
{
return
sShutdownDemandedTime
!
=
PR_INTERVAL_NO_TIMEOUT
;
}
private
:
static
StaticRefPtr
<
CacheObserver
>
sSelf
;
void
StoreDiskCacheCapacity
(
)
;
void
StoreCacheFSReported
(
)
;
void
StoreHashStatsReported
(
)
;
void
StoreCacheAmountWritten
(
)
;
void
AttachToPreferences
(
)
;
static
int32_t
sAutoMemoryCacheCapacity
;
static
Atomic
<
uint32_t
Relaxed
>
sDiskCacheCapacity
;
static
float
sHalfLifeHours
;
static
bool
sCacheFSReported
;
static
bool
sHashStatsReported
;
static
Atomic
<
PRIntervalTime
>
sShutdownDemandedTime
;
static
Atomic
<
uint32_t
Relaxed
>
sCacheAmountWritten
;
nsCOMPtr
<
nsIFile
>
mCacheParentDirectoryOverride
;
}
;
}
}
#
endif
