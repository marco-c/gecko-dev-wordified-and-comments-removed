with
Files
(
"
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
Networking
:
Cache
"
)
XPIDL_SOURCES
+
=
[
"
nsICacheEntry
.
idl
"
"
nsICacheEntryDoomCallback
.
idl
"
"
nsICacheEntryOpenCallback
.
idl
"
"
nsICachePurgeLock
.
idl
"
"
nsICacheStorage
.
idl
"
"
nsICacheStorageService
.
idl
"
"
nsICacheStorageVisitor
.
idl
"
"
nsICacheTesting
.
idl
"
]
XPIDL_MODULE
=
"
necko_cache2
"
EXPORTS
+
=
[
"
CacheObserver
.
h
"
"
CacheStorageService
.
h
"
]
EXPORTS
.
mozilla
.
net
+
=
[
"
CachePurgeLock
.
h
"
]
SOURCES
+
=
[
"
CacheStorage
.
cpp
"
]
UNIFIED_SOURCES
+
=
[
"
CacheEntry
.
cpp
"
"
CacheFile
.
cpp
"
"
CacheFileChunk
.
cpp
"
"
CacheFileContextEvictor
.
cpp
"
"
CacheFileInputStream
.
cpp
"
"
CacheFileIOManager
.
cpp
"
"
CacheFileMetadata
.
cpp
"
"
CacheFileOutputStream
.
cpp
"
"
CacheFileUtils
.
cpp
"
"
CacheHashUtils
.
cpp
"
"
CacheIndex
.
cpp
"
"
CacheIndexContextIterator
.
cpp
"
"
CacheIndexIterator
.
cpp
"
"
CacheIOThread
.
cpp
"
"
CacheLog
.
cpp
"
"
CacheObserver
.
cpp
"
"
CacheStorageService
.
cpp
"
]
if
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
!
=
"
android
"
:
UNIFIED_SOURCES
+
=
[
"
CachePurgeLock
.
cpp
"
]
LOCAL_INCLUDES
+
=
[
"
/
netwerk
/
base
"
"
/
netwerk
/
cache
"
]
FINAL_LIBRARY
=
"
xul
"
if
CONFIG
[
"
MOZ_BACKGROUNDTASKS
"
]
:
EXTRA_JS_MODULES
.
backgroundtasks
+
=
[
"
BackgroundTask_purgeHTTPCache
.
sys
.
mjs
"
]
DEFINES
[
"
MOZ_BACKGROUNDTASKS
"
]
=
True
