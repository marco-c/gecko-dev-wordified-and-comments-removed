#
include
"
nsISupports
.
idl
"
interface
nsIInterfaceRequestor
;
interface
nsIX509Cert
;
%
{
C
+
+
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
%
}
[
ref
]
native
nsCStringTArrayRef
(
nsTArray
<
nsCString
>
)
;
[
scriptable
builtinclass
uuid
(
418265c8
-
654e
-
4fbb
-
ba62
-
4eed27de1f03
)
]
interface
nsISSLSocketControl
:
nsISupports
{
attribute
nsIInterfaceRequestor
notificationCallbacks
;
void
proxyStartSSL
(
)
;
void
StartTLS
(
)
;
[
noscript
]
void
setNPNList
(
in
nsCStringTArrayRef
aNPNList
)
;
ACString
getAlpnEarlySelection
(
)
;
readonly
attribute
bool
earlyDataAccepted
;
void
driveHandshake
(
)
;
boolean
joinConnection
(
in
ACString
npnProtocol
in
ACString
hostname
in
long
port
)
;
boolean
testJoinConnection
(
in
ACString
npnProtocol
in
ACString
hostname
in
long
port
)
;
boolean
isAcceptableForHost
(
in
ACString
hostname
)
;
[
infallible
]
readonly
attribute
short
KEAUsed
;
[
infallible
]
readonly
attribute
unsigned
long
KEAKeyBits
;
const
short
KEY_EXCHANGE_UNKNOWN
=
-
1
;
readonly
attribute
uint32_t
providerFlags
;
readonly
attribute
uint32_t
providerTlsFlags
;
const
short
SSL_VERSION_3
=
0x0300
;
const
short
TLS_VERSION_1
=
0x0301
;
const
short
TLS_VERSION_1_1
=
0x0302
;
const
short
TLS_VERSION_1_2
=
0x0303
;
const
short
TLS_VERSION_1_3
=
0x0304
;
const
short
SSL_VERSION_UNKNOWN
=
-
1
;
[
infallible
]
readonly
attribute
short
SSLVersionUsed
;
[
infallible
]
readonly
attribute
short
SSLVersionOffered
;
const
short
SSL_MAC_UNKNOWN
=
-
1
;
const
short
SSL_MAC_NULL
=
0
;
const
short
SSL_MAC_MD5
=
1
;
const
short
SSL_MAC_SHA
=
2
;
const
short
SSL_HMAC_MD5
=
3
;
const
short
SSL_HMAC_SHA
=
4
;
const
short
SSL_HMAC_SHA256
=
5
;
const
short
SSL_MAC_AEAD
=
6
;
[
infallible
]
readonly
attribute
short
MACAlgorithmUsed
;
[
notxpcom
nostdcall
]
attribute
boolean
denyClientCert
;
attribute
nsIX509Cert
clientCert
;
[
infallible
]
readonly
attribute
boolean
clientCertSent
;
[
infallible
]
readonly
attribute
boolean
failedVerification
;
attribute
ACString
esniTxt
;
readonly
attribute
ACString
peerId
;
}
;
