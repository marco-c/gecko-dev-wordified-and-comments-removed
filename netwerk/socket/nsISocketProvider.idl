#
include
"
nsISupports
.
idl
"
interface
nsIProxyInfo
;
interface
nsITLSSocketControl
;
[
ptr
]
native
PRFileDescStar
(
struct
PRFileDesc
)
;
native
OriginAttributes
(
mozilla
:
:
OriginAttributes
)
;
[
ref
]
native
const_OriginAttributesRef
(
const
mozilla
:
:
OriginAttributes
)
;
%
{
C
+
+
#
include
"
mozilla
/
BasePrincipal
.
h
"
%
}
[
scriptable
uuid
(
508d5469
-
9e1e
-
4a08
-
b5b0
-
7cfebba1e51a
)
]
interface
nsISocketProvider
:
nsISupports
{
[
noscript
]
void
newSocket
(
in
long
aFamily
in
string
aHost
in
long
aPort
in
nsIProxyInfo
aProxy
in
const_OriginAttributesRef
aOriginAttributes
in
unsigned
long
aFlags
in
unsigned
long
aTlsFlags
out
PRFileDescStar
aFileDesc
out
nsITLSSocketControl
aTLSSocketControl
)
;
[
noscript
]
void
addToSocket
(
in
long
aFamily
in
string
aHost
in
long
aPort
in
nsIProxyInfo
aProxy
in
const_OriginAttributesRef
aOriginAttributes
in
unsigned
long
aFlags
in
unsigned
long
aTlsFlags
in
PRFileDescStar
aFileDesc
out
nsITLSSocketControl
aTLSSocketControl
)
;
const
long
PROXY_RESOLVES_HOST
=
1
<
<
0
;
const
long
ANONYMOUS_CONNECT
=
1
<
<
1
;
const
unsigned
long
NO_PERMANENT_STORAGE
=
1
<
<
2
;
const
unsigned
long
BE_CONSERVATIVE
=
1
<
<
3
;
const
long
ANONYMOUS_CONNECT_ALLOW_CLIENT_CERT
=
1
<
<
4
;
const
unsigned
long
DONT_TRY_ECH
=
(
1
<
<
10
)
;
const
unsigned
long
IS_RETRY
=
(
1
<
<
11
)
;
const
unsigned
long
USED_PRIVATE_DNS
=
(
1
<
<
12
)
;
}
;
