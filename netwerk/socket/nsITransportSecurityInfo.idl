#
include
"
nsISupports
.
idl
"
interface
nsIX509Cert
;
%
{
C
+
+
namespace
IPC
{
class
MessageWriter
;
class
MessageReader
;
}
%
}
[
ptr
]
native
IpcMessageWriterPtr
(
IPC
:
:
MessageWriter
)
;
[
ptr
]
native
IpcMessageReaderPtr
(
IPC
:
:
MessageReader
)
;
[
builtinclass
scriptable
uuid
(
216112d3
-
28bc
-
4671
-
b057
-
f98cc09ba1ea
)
]
interface
nsITransportSecurityInfo
:
nsISupports
{
cenum
OverridableErrorCategory
:
32
{
ERROR_UNSET
ERROR_TRUST
ERROR_DOMAIN
ERROR_TIME
}
;
readonly
attribute
unsigned
long
securityState
;
readonly
attribute
long
errorCode
;
readonly
attribute
AString
errorCodeString
;
readonly
attribute
Array
<
nsIX509Cert
>
failedCertChain
;
readonly
attribute
nsIX509Cert
serverCert
;
readonly
attribute
Array
<
nsIX509Cert
>
succeededCertChain
;
[
must_use
]
readonly
attribute
ACString
cipherName
;
[
must_use
]
readonly
attribute
unsigned
long
keyLength
;
[
must_use
]
readonly
attribute
unsigned
long
secretKeyLength
;
[
must_use
]
readonly
attribute
ACString
keaGroupName
;
[
must_use
]
readonly
attribute
ACString
signatureSchemeName
;
const
short
SSL_VERSION_3
=
0
;
const
short
TLS_VERSION_1
=
1
;
const
short
TLS_VERSION_1_1
=
2
;
const
short
TLS_VERSION_1_2
=
3
;
const
short
TLS_VERSION_1_3
=
4
;
[
must_use
]
readonly
attribute
unsigned
short
protocolVersion
;
const
short
CERTIFICATE_TRANSPARENCY_NOT_APPLICABLE
=
0
;
const
short
CERTIFICATE_TRANSPARENCY_POLICY_COMPLIANT
=
5
;
const
short
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
=
6
;
const
short
CERTIFICATE_TRANSPARENCY_POLICY_NOT_DIVERSE_SCTS
=
7
;
[
must_use
]
readonly
attribute
unsigned
short
certificateTransparencyStatus
;
[
must_use
]
readonly
attribute
boolean
isAcceptedEch
;
[
must_use
]
readonly
attribute
boolean
isDelegatedCredential
;
[
must_use
]
readonly
attribute
nsITransportSecurityInfo_OverridableErrorCategory
overridableErrorCategory
;
[
must_use
]
readonly
attribute
boolean
madeOCSPRequests
;
[
must_use
]
readonly
attribute
boolean
usedPrivateDNS
;
[
must_use
]
readonly
attribute
boolean
isExtendedValidation
;
[
notxpcom
noscript
]
void
SerializeToIPC
(
in
IpcMessageWriterPtr
aWriter
)
;
[
notxpcom
noscript
]
bool
DeserializeFromIPC
(
in
IpcMessageReaderPtr
aReader
)
;
readonly
attribute
ACString
negotiatedNPN
;
readonly
attribute
boolean
resumed
;
attribute
boolean
isBuiltCertChainRootBuiltInRoot
;
readonly
attribute
ACString
peerId
;
}
;
