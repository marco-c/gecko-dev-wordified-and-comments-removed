#
ifndef
NSNETWORKLINKSERVICEMAC_H_
#
define
NSNETWORKLINKSERVICEMAC_H_
#
include
"
nsINetworkLinkService
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
SHA1
.
h
"
#
include
<
SystemConfiguration
/
SCNetworkReachability
.
h
>
#
include
<
SystemConfiguration
/
SystemConfiguration
.
h
>
using
prefix_and_netmask
=
std
:
:
pair
<
in6_addr
in6_addr
>
;
class
nsNetworkLinkService
:
public
nsINetworkLinkService
public
nsIObserver
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSINETWORKLINKSERVICE
NS_DECL_NSIOBSERVER
nsNetworkLinkService
(
)
;
nsresult
Init
(
)
;
nsresult
Shutdown
(
)
;
static
void
HashSortedPrefixesAndNetmasks
(
std
:
:
vector
<
prefix_and_netmask
>
prefixAndNetmaskStore
mozilla
:
:
SHA1Sum
*
sha1
)
;
protected
:
virtual
~
nsNetworkLinkService
(
)
;
private
:
bool
mLinkUp
;
bool
mStatusKnown
;
SCNetworkReachabilityRef
mReachability
;
CFRunLoopRef
mCFRunLoop
;
CFRunLoopSourceRef
mRunLoopSource
;
SCDynamicStoreRef
mStoreRef
;
void
UpdateReachability
(
)
;
void
SendEvent
(
bool
aNetworkChanged
)
;
static
void
ReachabilityChanged
(
SCNetworkReachabilityRef
target
SCNetworkConnectionFlags
flags
void
*
info
)
;
static
void
IPConfigChanged
(
SCDynamicStoreRef
store
CFArrayRef
changedKeys
void
*
info
)
;
void
calculateNetworkId
(
void
)
;
void
calculateNetworkIdInternal
(
void
)
;
mozilla
:
:
Mutex
mMutex
;
nsCString
mNetworkId
;
mozilla
:
:
TimeStamp
mNetworkChangeTime
;
}
;
#
endif
