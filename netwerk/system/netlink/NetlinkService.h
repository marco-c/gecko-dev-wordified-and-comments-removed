#
ifndef
NETLINKSERVICE_H_
#
define
NETLINKSERVICE_H_
#
include
<
netinet
/
in
.
h
>
#
include
<
linux
/
netlink
.
h
>
#
include
"
nsINetworkLinkService
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
mozilla
/
SHA1
.
h
"
namespace
mozilla
{
namespace
net
{
#
if
defined
(
NIGHTLY_BUILD
)
|
|
defined
(
MOZ_DEV_EDITION
)
|
|
defined
(
DEBUG
)
#
define
NL_DEBUG_LOG
#
endif
class
NetlinkAddress
;
class
NetlinkNeighbor
;
class
NetlinkLink
;
class
NetlinkRoute
;
class
NetlinkMsg
;
class
NetlinkServiceListener
:
public
nsISupports
{
public
:
virtual
void
OnNetworkChanged
(
)
=
0
;
virtual
void
OnLinkUp
(
)
=
0
;
virtual
void
OnLinkDown
(
)
=
0
;
virtual
void
OnLinkStatusKnown
(
)
=
0
;
protected
:
virtual
~
NetlinkServiceListener
(
)
=
default
;
}
;
class
NetlinkService
:
public
nsIRunnable
{
virtual
~
NetlinkService
(
)
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIRUNNABLE
NetlinkService
(
)
;
nsresult
Init
(
NetlinkServiceListener
*
aListener
)
;
nsresult
Shutdown
(
)
;
void
GetNetworkID
(
nsACString
&
aNetworkID
)
;
void
GetIsLinkUp
(
bool
*
aIsUp
)
;
private
:
void
EnqueueGenMsg
(
uint16_t
aMsgType
uint8_t
aFamily
)
;
void
EnqueueRtMsg
(
uint8_t
aFamily
void
*
aAddress
)
;
void
RemovePendingMsg
(
)
;
mozilla
:
:
Mutex
mMutex
;
void
OnNetlinkMessage
(
int
aNetlinkSocket
)
;
void
OnLinkMessage
(
struct
nlmsghdr
*
aNlh
)
;
void
OnAddrMessage
(
struct
nlmsghdr
*
aNlh
)
;
void
OnRouteMessage
(
struct
nlmsghdr
*
aNlh
)
;
void
OnNeighborMessage
(
struct
nlmsghdr
*
aNlh
)
;
void
OnRouteCheckResult
(
struct
nlmsghdr
*
aNlh
)
;
void
CheckLinks
(
)
;
void
TriggerNetworkIDCalculation
(
)
;
int
GetPollWait
(
)
;
bool
CalculateIDForFamily
(
uint8_t
aFamily
mozilla
:
:
SHA1Sum
*
aSHA1
)
;
void
CalculateNetworkID
(
)
;
nsCOMPtr
<
nsIThread
>
mThread
;
bool
mInitialScanFinished
;
int
mShutdownPipe
[
2
]
;
bool
mDoRouteCheckIPv4
;
struct
in_addr
mRouteCheckIPv4
;
bool
mDoRouteCheckIPv6
;
struct
in6_addr
mRouteCheckIPv6
;
pid_t
mPid
;
uint32_t
mMsgId
;
bool
mLinkUp
;
bool
mRecalculateNetworkId
;
mozilla
:
:
TimeStamp
mTriggerTime
;
nsCString
mNetworkId
;
nsTArray
<
nsAutoPtr
<
NetlinkAddress
>
>
mAddresses
;
nsClassHashtable
<
nsCStringHashKey
NetlinkNeighbor
>
mNeighbors
;
nsClassHashtable
<
nsUint32HashKey
NetlinkLink
>
mLinks
;
nsTArray
<
nsAutoPtr
<
NetlinkRoute
>
>
mIPv4Routes
;
nsTArray
<
nsAutoPtr
<
NetlinkRoute
>
>
mIPv6Routes
;
nsAutoPtr
<
NetlinkRoute
>
mIPv4RouteCheckResult
;
nsAutoPtr
<
NetlinkRoute
>
mIPv6RouteCheckResult
;
nsTArray
<
nsAutoPtr
<
NetlinkMsg
>
>
mOutgoingMessages
;
RefPtr
<
NetlinkServiceListener
>
mListener
;
}
;
}
}
#
endif
