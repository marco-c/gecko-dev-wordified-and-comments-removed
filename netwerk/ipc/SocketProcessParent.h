#
ifndef
mozilla_net_SocketProcessParent_h
#
define
mozilla_net_SocketProcessParent_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
net
/
PSocketProcessParent
.
h
"
namespace
mozilla
{
namespace
dom
{
class
MemoryReport
;
class
MemoryReportRequestHost
;
}
namespace
ipc
{
class
CrashReporterHost
;
}
namespace
net
{
class
SocketProcessHost
;
class
SocketProcessParent
final
:
public
PSocketProcessParent
{
public
:
friend
class
SocketProcessHost
;
explicit
SocketProcessParent
(
SocketProcessHost
*
aHost
)
;
~
SocketProcessParent
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitCrashReporter
(
Shmem
&
&
aShmem
const
NativeThreadId
&
aThreadId
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAddMemoryReport
(
const
MemoryReport
&
aReport
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFinishMemoryReport
(
const
uint32_t
&
aGeneration
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
bool
SendRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
MaybeFileDesc
&
aDMDFile
)
;
private
:
SocketProcessHost
*
mHost
;
UniquePtr
<
ipc
:
:
CrashReporterHost
>
mCrashReporter
;
UniquePtr
<
dom
:
:
MemoryReportRequestHost
>
mMemoryReportRequest
;
static
void
Destroy
(
UniquePtr
<
SocketProcessParent
>
&
&
aParent
)
;
}
;
}
}
#
endif
