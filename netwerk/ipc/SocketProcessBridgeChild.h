#
ifndef
mozilla_net_SocketProcessBridgeChild_h
#
define
mozilla_net_SocketProcessBridgeChild_h
#
include
<
functional
>
#
include
"
mozilla
/
net
/
PSocketProcessBridgeChild
.
h
"
#
include
"
nsIObserver
.
h
"
namespace
mozilla
{
namespace
net
{
class
SocketProcessBridgeChild
final
:
public
PSocketProcessBridgeChild
public
nsIObserver
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
static
already_AddRefed
<
SocketProcessBridgeChild
>
GetSingleton
(
)
;
typedef
MozPromise
<
RefPtr
<
SocketProcessBridgeChild
>
nsCString
false
>
GetPromise
;
static
RefPtr
<
GetPromise
>
GetSocketProcessBridge
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvTest
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
DeferredDestroy
(
)
;
bool
IsShuttingDown
(
)
const
{
return
mShuttingDown
;
}
;
bool
Inited
(
)
const
{
return
mInited
;
}
;
ProcessId
SocketProcessPid
(
)
const
{
return
mSocketProcessPid
;
}
;
private
:
DISALLOW_COPY_AND_ASSIGN
(
SocketProcessBridgeChild
)
;
static
bool
Create
(
Endpoint
<
PSocketProcessBridgeChild
>
&
&
aEndpoint
)
;
explicit
SocketProcessBridgeChild
(
Endpoint
<
PSocketProcessBridgeChild
>
&
&
aEndpoint
)
;
virtual
~
SocketProcessBridgeChild
(
)
;
static
StaticRefPtr
<
SocketProcessBridgeChild
>
sSocketProcessBridgeChild
;
bool
mShuttingDown
;
bool
mInited
=
false
;
ProcessId
mSocketProcessPid
;
}
;
}
}
#
endif
