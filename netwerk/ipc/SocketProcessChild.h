#
ifndef
mozilla_net_SocketProcessChild_h
#
define
mozilla_net_SocketProcessChild_h
#
include
"
mozilla
/
net
/
PSocketProcessChild
.
h
"
#
include
"
mozilla
/
ipc
/
InputStreamUtils
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
namespace
mozilla
{
class
ChildProfilerController
;
}
namespace
mozilla
{
namespace
net
{
class
SocketProcessBridgeParent
;
class
SocketProcessChild
final
:
public
PSocketProcessChild
public
mozilla
:
:
ipc
:
:
ChildToParentStreamActorManager
{
public
:
SocketProcessChild
(
)
;
~
SocketProcessChild
(
)
;
static
SocketProcessChild
*
GetSingleton
(
)
;
bool
Init
(
base
:
:
ProcessId
aParentPid
const
char
*
aParentBuildID
MessageLoop
*
aIOLoop
IPC
:
:
Channel
*
aChannel
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPreferenceUpdate
(
const
Pref
&
aPref
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestMemoryReport
(
const
uint32_t
&
generation
const
bool
&
anonymize
const
bool
&
minimizeMemoryUsage
const
Maybe
<
mozilla
:
:
ipc
:
:
FileDescriptor
>
&
DMDFile
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetOffline
(
const
bool
&
aOffline
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitSocketProcessBridgeParent
(
const
ProcessId
&
aContentProcessId
Endpoint
<
mozilla
:
:
net
:
:
PSocketProcessBridgeParent
>
&
&
aEndpoint
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitProfiler
(
Endpoint
<
mozilla
:
:
PProfilerChild
>
&
&
aEndpoint
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSocketProcessTelemetryPing
(
)
;
PWebrtcTCPSocketChild
*
AllocPWebrtcTCPSocketChild
(
const
Maybe
<
TabId
>
&
tabId
)
;
bool
DeallocPWebrtcTCPSocketChild
(
PWebrtcTCPSocketChild
*
aActor
)
;
already_AddRefed
<
PHttpTransactionChild
>
AllocPHttpTransactionChild
(
)
;
PFileDescriptorSetChild
*
AllocPFileDescriptorSetChild
(
const
FileDescriptor
&
fd
)
;
bool
DeallocPFileDescriptorSetChild
(
PFileDescriptorSetChild
*
aActor
)
;
PChildToParentStreamChild
*
AllocPChildToParentStreamChild
(
)
;
bool
DeallocPChildToParentStreamChild
(
PChildToParentStreamChild
*
aActor
)
;
PParentToChildStreamChild
*
AllocPParentToChildStreamChild
(
)
;
bool
DeallocPParentToChildStreamChild
(
PParentToChildStreamChild
*
aActor
)
;
void
CleanUp
(
)
;
void
DestroySocketProcessBridgeParent
(
ProcessId
aId
)
;
PChildToParentStreamChild
*
SendPChildToParentStreamConstructor
(
PChildToParentStreamChild
*
aActor
)
override
;
PFileDescriptorSetChild
*
SendPFileDescriptorSetConstructor
(
const
FileDescriptor
&
aFD
)
override
;
private
:
nsRefPtrHashtable
<
nsUint32HashKey
SocketProcessBridgeParent
>
mSocketProcessBridgeParentMap
;
#
ifdef
MOZ_GECKO_PROFILER
RefPtr
<
ChildProfilerController
>
mProfilerController
;
#
endif
}
;
}
}
#
endif
