#
include
"
ParentChannelWrapper
.
h
"
#
include
"
mozilla
/
net
/
UrlClassifierCommon
.
h
"
#
include
"
nsIRedirectChannelRegistrar
.
h
"
namespace
mozilla
{
namespace
net
{
NS_IMPL_ISUPPORTS
(
ParentChannelWrapper
nsIParentChannel
nsIStreamListener
nsIRequestObserver
)
;
void
ParentChannelWrapper
:
:
Register
(
uint64_t
aRegistrarId
)
{
nsCOMPtr
<
nsIRedirectChannelRegistrar
>
registrar
=
RedirectChannelRegistrar
:
:
GetOrCreate
(
)
;
nsCOMPtr
<
nsIChannel
>
dummy
;
MOZ_ALWAYS_SUCCEEDS
(
NS_LinkRedirectChannels
(
aRegistrarId
this
getter_AddRefs
(
dummy
)
)
)
;
MOZ_ASSERT
(
dummy
=
=
mChannel
)
;
}
NS_IMETHODIMP
ParentChannelWrapper
:
:
SetParentListener
(
mozilla
:
:
net
:
:
ParentChannelListener
*
listener
)
{
return
NS_OK
;
}
NS_IMETHODIMP
ParentChannelWrapper
:
:
NotifyFlashPluginStateChanged
(
nsIHttpChannel
:
:
FlashPluginState
aState
)
{
RefPtr
<
HttpBaseChannel
>
httpChannel
=
do_QueryObject
(
mChannel
)
;
if
(
httpChannel
)
{
httpChannel
-
>
SetFlashPluginState
(
aState
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
ParentChannelWrapper
:
:
SetClassifierMatchedInfo
(
const
nsACString
&
aList
const
nsACString
&
aProvider
const
nsACString
&
aFullHash
)
{
nsCOMPtr
<
nsIClassifiedChannel
>
classifiedChannel
=
do_QueryInterface
(
mChannel
)
;
if
(
classifiedChannel
)
{
classifiedChannel
-
>
SetMatchedInfo
(
aList
aProvider
aFullHash
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
ParentChannelWrapper
:
:
SetClassifierMatchedTrackingInfo
(
const
nsACString
&
aLists
const
nsACString
&
aFullHash
)
{
nsCOMPtr
<
nsIClassifiedChannel
>
classifiedChannel
=
do_QueryInterface
(
mChannel
)
;
if
(
classifiedChannel
)
{
nsTArray
<
nsCString
>
lists
fullhashes
;
for
(
const
nsACString
&
token
:
aLists
.
Split
(
'
'
)
)
{
lists
.
AppendElement
(
token
)
;
}
for
(
const
nsACString
&
token
:
aFullHash
.
Split
(
'
'
)
)
{
fullhashes
.
AppendElement
(
token
)
;
}
classifiedChannel
-
>
SetMatchedTrackingInfo
(
lists
fullhashes
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
ParentChannelWrapper
:
:
NotifyClassificationFlags
(
uint32_t
aClassificationFlags
bool
aIsThirdParty
)
{
UrlClassifierCommon
:
:
SetClassificationFlagsHelper
(
mChannel
aClassificationFlags
aIsThirdParty
)
;
return
NS_OK
;
}
NS_IMETHODIMP
ParentChannelWrapper
:
:
Delete
(
)
{
return
NS_OK
;
}
NS_IMETHODIMP
ParentChannelWrapper
:
:
GetRemoteType
(
nsACString
&
aRemoteType
)
{
aRemoteType
=
NOT_REMOTE_TYPE
;
return
NS_OK
;
}
}
}
#
undef
LOG
