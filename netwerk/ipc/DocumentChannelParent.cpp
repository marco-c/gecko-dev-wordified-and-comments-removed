#
include
"
DocumentChannelParent
.
h
"
namespace
mozilla
{
namespace
net
{
bool
DocumentChannelParent
:
:
Init
(
const
DocumentChannelCreationArgs
&
aArgs
)
{
RefPtr
<
nsDocShellLoadState
>
loadState
=
new
nsDocShellLoadState
(
aArgs
.
loadState
(
)
)
;
RefPtr
<
class
LoadInfo
>
loadInfo
;
nsresult
rv
=
mozilla
:
:
ipc
:
:
LoadInfoArgsToLoadInfo
(
Some
(
aArgs
.
loadInfo
(
)
)
getter_AddRefs
(
loadInfo
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
NS_ERROR_UNEXPECTED
;
if
(
!
mParent
-
>
Open
(
loadState
loadInfo
aArgs
.
initiatorType
(
)
.
ptrOr
(
nullptr
)
aArgs
.
loadFlags
(
)
aArgs
.
loadType
(
)
aArgs
.
cacheKey
(
)
aArgs
.
isActive
(
)
aArgs
.
isTopLevelDoc
(
)
aArgs
.
hasNonEmptySandboxingFlags
(
)
aArgs
.
topWindowURI
(
)
aArgs
.
contentBlockingAllowListPrincipal
(
)
aArgs
.
customUserAgent
(
)
aArgs
.
channelId
(
)
aArgs
.
asyncOpenTime
(
)
&
rv
)
)
{
return
SendFailedAsyncOpen
(
rv
)
;
}
return
true
;
}
RefPtr
<
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
>
DocumentChannelParent
:
:
RedirectToRealChannel
(
uint32_t
aRedirectFlags
uint32_t
aLoadFlags
)
{
RedirectToRealChannelArgs
args
;
mParent
-
>
SerializeRedirectData
(
args
false
aRedirectFlags
aLoadFlags
)
;
return
SendRedirectToRealChannel
(
args
)
;
}
}
}
