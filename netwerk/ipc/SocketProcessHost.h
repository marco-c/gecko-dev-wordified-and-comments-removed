#
ifndef
mozilla_net_SocketProcessHost_h
#
define
mozilla_net_SocketProcessHost_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
ipc
/
GeckoChildProcessHost
.
h
"
#
include
"
mozilla
/
MemoryReportingProcess
.
h
"
#
include
"
mozilla
/
ipc
/
TaskFactory
.
h
"
namespace
mozilla
{
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
class
SandboxBroker
;
#
endif
namespace
net
{
class
OfflineObserver
;
class
SocketProcessParent
;
class
SocketProcessHost
final
:
public
mozilla
:
:
ipc
:
:
GeckoChildProcessHost
{
friend
class
SocketProcessParent
;
public
:
class
Listener
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
Listener
)
virtual
void
OnProcessLaunchComplete
(
SocketProcessHost
*
aHost
bool
aSucceeded
)
=
0
;
virtual
void
OnProcessUnexpectedShutdown
(
SocketProcessHost
*
aHost
)
=
0
;
protected
:
virtual
~
Listener
(
)
=
default
;
}
;
explicit
SocketProcessHost
(
Listener
*
listener
)
;
bool
Launch
(
)
;
void
Shutdown
(
)
;
SocketProcessParent
*
GetActor
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mSocketProcessParent
.
get
(
)
;
}
bool
IsConnected
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
!
!
mSocketProcessParent
;
}
void
OnChannelConnected
(
int32_t
peer_pid
)
override
;
void
OnChannelError
(
)
override
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
static
bool
StaticFillMacSandboxInfo
(
MacSandboxInfo
&
aInfo
)
;
static
MacSandboxType
GetMacSandboxType
(
)
;
#
endif
private
:
~
SocketProcessHost
(
)
;
void
OnChannelConnectedTask
(
)
;
void
OnChannelErrorTask
(
)
;
void
InitAfterConnect
(
bool
aSucceeded
)
;
void
OnChannelClosed
(
)
;
void
DestroyProcess
(
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
static
bool
sLaunchWithMacSandbox
;
bool
IsMacSandboxLaunchEnabled
(
)
override
{
return
sLaunchWithMacSandbox
;
}
bool
FillMacSandboxInfo
(
MacSandboxInfo
&
aInfo
)
override
;
#
endif
DISALLOW_COPY_AND_ASSIGN
(
SocketProcessHost
)
;
RefPtr
<
Listener
>
mListener
;
mozilla
:
:
ipc
:
:
TaskFactory
<
SocketProcessHost
>
mTaskFactory
;
enum
class
LaunchPhase
{
Unlaunched
Waiting
Complete
}
;
LaunchPhase
mLaunchPhase
;
UniquePtr
<
SocketProcessParent
>
mSocketProcessParent
;
bool
mShutdownRequested
;
bool
mChannelClosed
;
RefPtr
<
OfflineObserver
>
mOfflineObserver
;
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
UniquePtr
<
SandboxBroker
>
mSandboxBroker
;
#
endif
}
;
class
SocketProcessMemoryReporter
:
public
MemoryReportingProcess
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SocketProcessMemoryReporter
override
)
SocketProcessMemoryReporter
(
)
=
default
;
bool
IsAlive
(
)
const
override
;
bool
SendRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
Maybe
<
mozilla
:
:
ipc
:
:
FileDescriptor
>
&
aDMDFile
)
override
;
int32_t
Pid
(
)
const
override
;
protected
:
virtual
~
SocketProcessMemoryReporter
(
)
=
default
;
}
;
}
}
#
endif
