#
include
"
ParentProcessDocumentChannel
.
h
"
#
include
"
nsIObserverService
.
h
"
extern
mozilla
:
:
LazyLogModule
gDocumentChannelLog
;
#
define
LOG
(
fmt
)
MOZ_LOG
(
gDocumentChannelLog
mozilla
:
:
LogLevel
:
:
Verbose
fmt
)
namespace
mozilla
{
namespace
net
{
NS_IMPL_ISUPPORTS_INHERITED
(
ParentProcessDocumentChannel
DocumentChannel
nsIAsyncVerifyRedirectCallback
nsIObserver
)
ParentProcessDocumentChannel
:
:
ParentProcessDocumentChannel
(
nsDocShellLoadState
*
aLoadState
class
LoadInfo
*
aLoadInfo
nsLoadFlags
aLoadFlags
uint32_t
aCacheKey
)
:
DocumentChannel
(
aLoadState
aLoadInfo
aLoadFlags
aCacheKey
)
{
LOG
(
(
"
ParentProcessDocumentChannel
ctor
[
this
=
%
p
]
"
this
)
)
;
}
ParentProcessDocumentChannel
:
:
~
ParentProcessDocumentChannel
(
)
{
LOG
(
(
"
ParentProcessDocumentChannel
dtor
[
this
=
%
p
]
"
this
)
)
;
}
RefPtr
<
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
>
ParentProcessDocumentChannel
:
:
RedirectToRealChannel
(
nsTArray
<
ipc
:
:
Endpoint
<
extensions
:
:
PStreamFilterParent
>
>
&
&
aStreamFilterEndpoints
uint32_t
aRedirectFlags
uint32_t
aLoadFlags
)
{
LOG
(
(
"
ParentProcessDocumentChannel
RedirectToRealChannel
[
this
=
%
p
]
"
this
)
)
;
nsCOMPtr
<
nsIChannel
>
channel
=
mDocumentLoadListener
-
>
GetChannel
(
)
;
channel
-
>
SetLoadFlags
(
aLoadFlags
)
;
channel
-
>
SetNotificationCallbacks
(
mCallbacks
)
;
if
(
mLoadGroup
)
{
channel
-
>
SetLoadGroup
(
mLoadGroup
)
;
}
mLastVisitInfo
=
mDocumentLoadListener
-
>
LastVisitInfo
(
)
;
mRedirects
=
mDocumentLoadListener
-
>
Redirects
(
)
;
mStreamFilterEndpoints
=
std
:
:
move
(
aStreamFilterEndpoints
)
;
RefPtr
<
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
>
p
=
mPromise
.
Ensure
(
__func__
)
;
nsresult
rv
=
gHttpHandler
-
>
AsyncOnChannelRedirect
(
this
channel
aRedirectFlags
)
;
if
(
NS_FAILED
(
rv
)
)
{
OnRedirectVerifyCallback
(
rv
)
;
}
return
p
;
}
NS_IMETHODIMP
ParentProcessDocumentChannel
:
:
OnRedirectVerifyCallback
(
nsresult
aResult
)
{
LOG
(
(
"
ParentProcessDocumentChannel
OnRedirectVerifyCallback
[
this
=
%
p
"
"
aResult
=
%
d
]
"
this
int
(
aResult
)
)
)
;
MOZ_ASSERT
(
mDocumentLoadListener
)
;
if
(
NS_FAILED
(
aResult
)
)
{
Cancel
(
aResult
)
;
}
else
if
(
mCanceled
&
&
NS_SUCCEEDED
(
aResult
)
)
{
aResult
=
NS_BINDING_ABORTED
;
}
else
{
const
nsCOMPtr
<
nsIChannel
>
channel
=
mDocumentLoadListener
-
>
GetChannel
(
)
;
mLoadGroup
-
>
AddRequest
(
channel
nullptr
)
;
if
(
!
mCanceled
)
{
mLoadGroup
-
>
RemoveRequest
(
this
nullptr
NS_BINDING_REDIRECTED
)
;
for
(
auto
&
endpoint
:
mStreamFilterEndpoints
)
{
extensions
:
:
StreamFilterParent
:
:
Attach
(
channel
std
:
:
move
(
endpoint
)
)
;
}
if
(
!
mDocumentLoadListener
-
>
ResumeSuspendedChannel
(
mListener
)
)
{
nsresult
status
=
NS_OK
;
channel
-
>
GetStatus
(
&
status
)
;
mLoadGroup
-
>
RemoveRequest
(
channel
nullptr
status
)
;
}
}
}
mLoadGroup
=
nullptr
;
mListener
=
nullptr
;
mCallbacks
=
nullptr
;
DisconnectDocumentLoadListener
(
)
;
mPromise
.
ResolveIfExists
(
aResult
__func__
)
;
return
NS_OK
;
}
NS_IMETHODIMP
ParentProcessDocumentChannel
:
:
AsyncOpen
(
nsIStreamListener
*
aListener
)
{
LOG
(
(
"
ParentProcessDocumentChannel
AsyncOpen
[
this
=
%
p
]
"
this
)
)
;
mDocumentLoadListener
=
new
DocumentLoadListener
(
GetDocShell
(
)
-
>
GetBrowsingContext
(
)
-
>
Canonical
(
)
this
)
;
LOG
(
(
"
Created
PPDocumentChannel
with
listener
=
%
p
"
mDocumentLoadListener
.
get
(
)
)
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
MOZ_ALWAYS_SUCCEEDS
(
observerService
-
>
AddObserver
(
this
NS_HTTP_ON_MODIFY_REQUEST_TOPIC
false
)
)
;
}
gHttpHandler
-
>
OnOpeningDocumentRequest
(
this
)
;
nsresult
rv
=
NS_OK
;
Maybe
<
dom
:
:
ClientInfo
>
initialClientInfo
=
mInitialClientInfo
;
if
(
!
mDocumentLoadListener
-
>
Open
(
mLoadState
mLoadFlags
mCacheKey
Some
(
mChannelId
)
mAsyncOpenTime
mTiming
std
:
:
move
(
initialClientInfo
)
GetDocShell
(
)
-
>
GetOuterWindowID
(
)
GetDocShell
(
)
-
>
GetBrowsingContext
(
)
-
>
HasValidTransientUserGestureActivation
(
)
&
rv
)
)
{
MOZ_ASSERT
(
NS_FAILED
(
rv
)
)
;
DisconnectDocumentLoadListener
(
)
;
return
rv
;
}
mListener
=
aListener
;
if
(
mLoadGroup
)
{
mLoadGroup
-
>
AddRequest
(
this
nullptr
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
ParentProcessDocumentChannel
:
:
Cancel
(
nsresult
aStatus
)
{
LOG
(
(
"
ParentProcessDocumentChannel
Cancel
[
this
=
%
p
]
"
this
)
)
;
if
(
mCanceled
)
{
return
NS_OK
;
}
mCanceled
=
true
;
mDocumentLoadListener
-
>
Cancel
(
aStatus
)
;
ShutdownListeners
(
aStatus
)
;
return
NS_OK
;
}
void
ParentProcessDocumentChannel
:
:
DisconnectDocumentLoadListener
(
)
{
if
(
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
)
{
observerService
-
>
RemoveObserver
(
this
NS_HTTP_ON_MODIFY_REQUEST_TOPIC
)
;
}
mDocumentLoadListener
-
>
DocumentChannelBridgeDisconnected
(
)
;
mDocumentLoadListener
=
nullptr
;
}
NS_IMETHODIMP
ParentProcessDocumentChannel
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mRequestObserversCalled
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIChannel
>
channel
=
do_QueryInterface
(
aSubject
)
;
if
(
!
channel
|
|
mDocumentLoadListener
-
>
GetChannel
(
)
!
=
channel
)
{
return
NS_OK
;
}
LOG
(
(
"
DocumentChannelParent
Observe
[
this
=
%
p
aChannel
=
%
p
]
"
this
channel
.
get
(
)
)
)
;
if
(
!
nsCRT
:
:
strcmp
(
aTopic
NS_HTTP_ON_MODIFY_REQUEST_TOPIC
)
)
{
mRequestObserversCalled
=
true
;
gHttpHandler
-
>
OnModifyDocumentRequest
(
this
)
;
}
return
NS_OK
;
}
}
}
#
undef
LOG
