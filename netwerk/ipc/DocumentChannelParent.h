#
ifndef
mozilla_net_DocumentChannelParent_h
#
define
mozilla_net_DocumentChannelParent_h
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
mozilla
/
net
/
NeckoCommon
.
h
"
#
include
"
mozilla
/
net
/
NeckoParent
.
h
"
#
include
"
mozilla
/
net
/
PDocumentChannelParent
.
h
"
#
include
"
mozilla
/
net
/
ParentChannelListener
.
h
"
#
include
"
nsICrossProcessSwitchChannel
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIParentChannel
.
h
"
#
include
"
nsIParentRedirectingChannel
.
h
"
#
include
"
nsIRedirectResultListener
.
h
"
#
define
DOCUMENT_CHANNEL_PARENT_IID
\
{
\
0x3b393c56
0x9e01
0x11e9
{
\
0xa2
0xa3
0x2a
0x2a
0xe2
0xdb
0xcc
0xe4
\
}
\
}
namespace
mozilla
{
namespace
net
{
class
DocumentChannelParent
:
public
nsIInterfaceRequestor
public
PDocumentChannelParent
public
nsIAsyncVerifyRedirectReadyCallback
public
nsIParentChannel
public
nsIChannelEventSink
public
nsICrossProcessSwitchChannel
public
HttpChannelSecurityWarningReporter
{
public
:
explicit
DocumentChannelParent
(
const
dom
:
:
PBrowserOrId
&
iframeEmbedding
nsILoadContext
*
aLoadContext
PBOverrideStatus
aOverrideStatus
)
;
bool
Init
(
const
DocumentChannelCreationArgs
&
aArgs
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIPARENTCHANNEL
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSIASYNCVERIFYREDIRECTREADYCALLBACK
NS_DECL_NSICHANNELEVENTSINK
NS_DECL_NSICROSSPROCESSSWITCHCHANNEL
NS_DECLARE_STATIC_IID_ACCESSOR
(
DOCUMENT_CHANNEL_PARENT_IID
)
bool
RecvCancel
(
const
nsresult
&
status
)
;
bool
RecvSuspend
(
)
;
bool
RecvResume
(
)
;
nsresult
ReportSecurityMessage
(
const
nsAString
&
aMessageTag
const
nsAString
&
aMessageCategory
)
override
{
ReportSecurityMessageParams
params
;
params
.
mMessageTag
=
aMessageTag
;
params
.
mMessageCategory
=
aMessageCategory
;
mSecurityWarningFunctions
.
AppendElement
(
SecurityWarningFunction
{
VariantIndex
<
0
>
{
}
std
:
:
move
(
params
)
}
)
;
return
NS_OK
;
}
nsresult
LogBlockedCORSRequest
(
const
nsAString
&
aMessage
const
nsACString
&
aCategory
)
override
{
LogBlockedCORSRequestParams
params
;
params
.
mMessage
=
aMessage
;
params
.
mCategory
=
aCategory
;
mSecurityWarningFunctions
.
AppendElement
(
SecurityWarningFunction
{
VariantIndex
<
1
>
{
}
std
:
:
move
(
params
)
}
)
;
return
NS_OK
;
}
nsresult
LogMimeTypeMismatch
(
const
nsACString
&
aMessageName
bool
aWarning
const
nsAString
&
aURL
const
nsAString
&
aContentType
)
override
{
LogMimeTypeMismatchParams
params
;
params
.
mMessageName
=
aMessageName
;
params
.
mWarning
=
aWarning
;
params
.
mURL
=
aURL
;
params
.
mContentType
=
aContentType
;
mSecurityWarningFunctions
.
AppendElement
(
SecurityWarningFunction
{
VariantIndex
<
2
>
{
}
std
:
:
move
(
params
)
}
)
;
return
NS_OK
;
}
virtual
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
void
CancelChildForProcessSwitch
(
)
;
private
:
virtual
~
DocumentChannelParent
(
)
=
default
;
void
TriggerRedirectToRealChannel
(
nsIChannel
*
aChannel
const
Maybe
<
uint64_t
>
&
aDestinationProcess
=
Nothing
(
)
uint64_t
aIdentifier
=
0
)
;
void
RedirectToRealChannelFinished
(
nsresult
aRv
)
;
void
FinishReplacementChannelSetup
(
bool
aSucceeded
)
;
struct
ClassifierMatchedInfoParams
{
nsCString
mList
;
nsCString
mProvider
;
nsCString
mFullHash
;
}
;
struct
ClassifierMatchedTrackingInfoParams
{
nsCString
mLists
;
nsCString
mFullHashes
;
}
;
struct
ClassificationFlagsParams
{
uint32_t
mClassificationFlags
;
bool
mIsThirdParty
;
}
;
typedef
mozilla
:
:
Variant
<
nsIHttpChannel
:
:
FlashPluginState
ClassifierMatchedInfoParams
ClassifierMatchedTrackingInfoParams
ClassificationFlagsParams
>
IParentChannelFunction
;
nsTArray
<
IParentChannelFunction
>
mIParentChannelFunctions
;
struct
ReportSecurityMessageParams
{
nsString
mMessageTag
;
nsString
mMessageCategory
;
}
;
struct
LogBlockedCORSRequestParams
{
nsString
mMessage
;
nsCString
mCategory
;
}
;
struct
LogMimeTypeMismatchParams
{
nsCString
mMessageName
;
bool
mWarning
;
nsString
mURL
;
nsString
mContentType
;
}
;
typedef
mozilla
:
:
Variant
<
ReportSecurityMessageParams
LogBlockedCORSRequestParams
LogMimeTypeMismatchParams
>
SecurityWarningFunction
;
nsTArray
<
SecurityWarningFunction
>
mSecurityWarningFunctions
;
struct
OnDataAvailableRequest
{
nsCString
data
;
uint64_t
offset
;
uint32_t
count
;
}
;
nsTArray
<
OnDataAvailableRequest
>
mPendingRequests
;
Maybe
<
nsresult
>
mStopRequestValue
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
RefPtr
<
ParentChannelListener
>
mListener
;
nsCOMPtr
<
nsILoadContext
>
mLoadContext
;
PBOverrideStatus
mPBOverride
;
nsCOMPtr
<
nsIURI
>
mChannelCreationURI
;
RefPtr
<
mozilla
:
:
dom
:
:
BrowserParent
>
mBrowserParent
;
uint32_t
mRedirectChannelId
=
0
;
bool
mSuspendedChannel
=
false
;
bool
mDoingProcessSwitch
=
false
;
bool
mOldApplyConversion
=
false
;
bool
mDidUpstreamRedirect
=
false
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
DocumentChannelParent
DOCUMENT_CHANNEL_PARENT_IID
)
}
}
#
endif
