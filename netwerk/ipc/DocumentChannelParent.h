#
ifndef
mozilla_net_DocumentChannelParent_h
#
define
mozilla_net_DocumentChannelParent_h
#
include
"
mozilla
/
net
/
PDocumentChannelParent
.
h
"
#
include
"
mozilla
/
net
/
DocumentLoadListener
.
h
"
namespace
mozilla
{
namespace
dom
{
class
CanonicalBrowsingContext
;
}
namespace
net
{
class
DocumentChannelParent
final
:
public
ADocumentChannelBridge
public
PDocumentChannelParent
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
DocumentChannelParent
override
)
;
explicit
DocumentChannelParent
(
dom
:
:
CanonicalBrowsingContext
*
aContext
nsILoadContext
*
aLoadContext
)
;
bool
Init
(
const
DocumentChannelCreationArgs
&
aArgs
)
;
bool
RecvCancel
(
const
nsresult
&
aStatus
)
{
if
(
mParent
)
{
mParent
-
>
Cancel
(
aStatus
)
;
}
return
true
;
}
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
{
if
(
mParent
)
{
mParent
-
>
DocumentChannelBridgeDisconnected
(
)
;
mParent
=
nullptr
;
}
}
private
:
void
DisconnectChildListeners
(
nsresult
aStatus
nsresult
aLoadGroupStatus
)
override
{
if
(
CanSend
(
)
)
{
Unused
<
<
SendDisconnectChildListeners
(
aStatus
aLoadGroupStatus
)
;
}
mParent
=
nullptr
;
}
void
Delete
(
)
override
{
if
(
CanSend
(
)
)
{
Unused
<
<
SendDeleteSelf
(
)
;
}
}
void
CSPViolation
(
nsCSPContext
*
aContext
bool
aIsCspToInherit
nsIURI
*
aBlockedURI
nsCSPContext
:
:
BlockedContentSource
aBlockedContentSource
nsIURI
*
aOriginalURI
const
nsAString
&
aViolatedDirective
uint32_t
aViolatedPolicyIndex
const
nsAString
&
aObserverSubject
)
override
;
virtual
ProcessId
OtherPid
(
)
const
override
{
return
IProtocol
:
:
OtherPid
(
)
;
}
virtual
bool
AttachStreamFilter
(
Endpoint
<
mozilla
:
:
extensions
:
:
PStreamFilterParent
>
&
&
aEndpoint
)
override
{
return
SendAttachStreamFilter
(
std
:
:
move
(
aEndpoint
)
)
;
}
RefPtr
<
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
>
RedirectToRealChannel
(
uint32_t
aRedirectFlags
uint32_t
aLoadFlags
)
override
;
~
DocumentChannelParent
(
)
;
RefPtr
<
DocumentLoadListener
>
mParent
;
}
;
}
}
#
endif
