#
include
"
SocketProcessBridgeParent
.
h
"
#
include
"
SocketProcessLogging
.
h
"
#
include
"
SocketProcessChild
.
h
"
namespace
mozilla
{
namespace
net
{
SocketProcessBridgeParent
:
:
SocketProcessBridgeParent
(
ProcessId
aId
Endpoint
<
PSocketProcessBridgeParent
>
&
&
aEndpoint
)
:
mId
(
aId
)
{
LOG
(
(
"
CONSTRUCT
SocketProcessBridgeParent
:
:
SocketProcessBridgeParent
mId
=
%
d
\
n
"
mId
)
)
;
MOZ_COUNT_CTOR
(
SocketProcessBridgeParent
)
;
DebugOnly
<
bool
>
ok
=
aEndpoint
.
Bind
(
this
)
;
MOZ_ASSERT
(
ok
)
;
}
SocketProcessBridgeParent
:
:
~
SocketProcessBridgeParent
(
)
{
LOG
(
(
"
DESTRUCT
SocketProcessBridgeParent
:
:
SocketProcessBridgeParent
\
n
"
)
)
;
MOZ_COUNT_DTOR
(
SocketProcessBridgeParent
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
SocketProcessBridgeParent
:
:
RecvTest
(
)
{
LOG
(
(
"
SocketProcessBridgeParent
:
:
RecvTest
\
n
"
)
)
;
Unused
<
<
SendTest
(
)
;
return
IPC_OK
(
)
;
}
void
SocketProcessBridgeParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
LOG
(
(
"
SocketProcessBridgeParent
:
:
ActorDestroy
mId
=
%
d
\
n
"
mId
)
)
;
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
net
:
:
SocketProcessBridgeParent
:
:
DeferredDestroy
"
this
&
SocketProcessBridgeParent
:
:
DeferredDestroy
)
)
;
}
void
SocketProcessBridgeParent
:
:
DeferredDestroy
(
)
{
SocketProcessChild
:
:
GetSingleton
(
)
-
>
DestroySocketProcessBridgeParent
(
mId
)
;
}
}
}
