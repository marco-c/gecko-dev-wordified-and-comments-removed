#
include
"
ProxyConfigLookup
.
h
"
#
include
"
ProxyConfigLookupChild
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsICancelable
.
h
"
#
include
"
nsIProtocolProxyService
.
h
"
#
include
"
nsIProtocolProxyService2
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsIChannel
.
h
"
namespace
mozilla
{
namespace
net
{
nsresult
ProxyConfigLookup
:
:
Create
(
std
:
:
function
<
void
(
nsIProxyInfo
*
nsresult
)
>
&
&
aCallback
nsIURI
*
aURI
uint32_t
aProxyResolveFlags
nsICancelable
*
*
aLookupCancellable
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
ProxyConfigLookup
>
lookUp
=
new
ProxyConfigLookup
(
std
:
:
move
(
aCallback
)
aURI
aProxyResolveFlags
)
;
return
lookUp
-
>
DoProxyResolve
(
aLookupCancellable
)
;
}
ProxyConfigLookup
:
:
ProxyConfigLookup
(
std
:
:
function
<
void
(
nsIProxyInfo
*
nsresult
)
>
&
&
aCallback
nsIURI
*
aURI
uint32_t
aProxyResolveFlags
)
:
mCallback
(
std
:
:
move
(
aCallback
)
)
mURI
(
aURI
)
mProxyResolveFlags
(
aProxyResolveFlags
)
{
}
ProxyConfigLookup
:
:
~
ProxyConfigLookup
(
)
=
default
;
nsresult
ProxyConfigLookup
:
:
DoProxyResolve
(
nsICancelable
*
*
aLookupCancellable
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
RefPtr
<
ProxyConfigLookup
>
self
=
this
;
bool
result
=
ProxyConfigLookupChild
:
:
Create
(
mURI
mProxyResolveFlags
[
self
]
(
nsIProxyInfo
*
aProxyinfo
nsresult
aResult
)
{
self
-
>
OnProxyAvailable
(
nullptr
nullptr
aProxyinfo
aResult
)
;
}
)
;
return
result
?
NS_OK
:
NS_ERROR_FAILURE
;
}
nsresult
rv
;
nsCOMPtr
<
nsIChannel
>
channel
;
rv
=
NS_NewChannel
(
getter_AddRefs
(
channel
)
mURI
nsContentUtils
:
:
GetSystemPrincipal
(
)
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
nsIContentPolicy
:
:
TYPE_OTHER
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIProtocolProxyService
>
pps
;
pps
=
mozilla
:
:
components
:
:
ProtocolProxy
:
:
Service
(
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsICancelable
>
proxyRequest
;
nsCOMPtr
<
nsIProtocolProxyService2
>
pps2
=
do_QueryInterface
(
pps
)
;
if
(
pps2
)
{
rv
=
pps2
-
>
AsyncResolve2
(
channel
mProxyResolveFlags
this
nullptr
getter_AddRefs
(
proxyRequest
)
)
;
}
else
{
rv
=
pps
-
>
AsyncResolve
(
channel
mProxyResolveFlags
this
nullptr
getter_AddRefs
(
proxyRequest
)
)
;
}
if
(
aLookupCancellable
)
{
proxyRequest
.
forget
(
aLookupCancellable
)
;
}
return
rv
;
}
NS_IMETHODIMP
ProxyConfigLookup
:
:
OnProxyAvailable
(
nsICancelable
*
aRequest
nsIChannel
*
aChannel
nsIProxyInfo
*
aProxyinfo
nsresult
aResult
)
{
mCallback
(
aProxyinfo
aResult
)
;
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
ProxyConfigLookup
nsIProtocolProxyCallback
)
}
}
