include
protocol
PHttpChannel
;
include
ClientIPCTypes
;
include
URIParams
;
include
IPCServiceWorkerDescriptor
;
include
IPCStream
;
include
PBackgroundSharedTypes
;
include
DOMTypes
;
include
ProtocolTypes
;
include
"
mozilla
/
dom
/
DomSecurityIPCUtils
.
h
"
;
include
"
mozilla
/
dom
/
FetchIPCTypes
.
h
"
;
include
"
mozilla
/
dom
/
FeaturePolicyUtils
.
h
"
;
include
"
mozilla
/
dom
/
NavigationAPIIPCUtils
.
h
"
;
include
"
mozilla
/
dom
/
PropertyBagUtils
.
h
"
;
include
"
mozilla
/
dom
/
ReferrerInfoUtils
.
h
"
;
include
"
mozilla
/
ipc
/
URIUtils
.
h
"
;
include
"
mozilla
/
net
/
CacheInfoIPCTypes
.
h
"
;
include
"
mozilla
/
AntiTrackingIPCUtils
.
h
"
;
include
"
mozilla
/
net
/
ClassOfService
.
h
"
;
using
mozilla
:
:
OriginAttributes
from
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
;
using
mozilla
:
:
net
:
:
RequestHeaderTuples
from
"
mozilla
/
net
/
PHttpChannelParams
.
h
"
;
using
struct
nsHttpAtom
from
"
nsHttp
.
h
"
;
[
MoveOnly
]
using
class
mozilla
:
:
net
:
:
nsHttpResponseHead
from
"
nsHttpResponseHead
.
h
"
;
using
class
mozilla
:
:
TimeStamp
from
"
mozilla
/
TimeStamp
.
h
"
;
[
RefCounted
]
using
class
nsIPropertyBag2
from
"
nsIPropertyBag2
.
h
"
;
[
RefCounted
]
using
class
nsDOMNavigationTiming
from
"
nsDOMNavigationTiming
.
h
"
;
[
RefCounted
]
using
class
nsDocShellLoadState
from
"
nsDocShellLoadState
.
h
"
;
using
nsContentPolicyType
from
"
nsIContentPolicy
.
h
"
;
using
mozilla
:
:
net
:
:
PreferredAlternativeDataDeliveryTypeIPC
from
"
nsICacheInfoChannel
.
h
"
;
using
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
from
"
nsILoadInfo
.
h
"
;
using
nsILoadInfo
:
:
StoragePermissionState
from
"
nsILoadInfo
.
h
"
;
using
nsILoadInfo
:
:
IPAddressSpace
from
"
nsILoadInfo
.
h
"
;
using
struct
mozilla
:
:
dom
:
:
LoadingSessionHistoryInfo
from
"
mozilla
/
dom
/
SessionHistoryEntry
.
h
"
;
using
mozilla
:
:
dom
:
:
RequestMode
from
"
mozilla
/
dom
/
RequestBinding
.
h
"
;
using
mozilla
:
:
net
:
:
LinkHeader
from
"
nsNetUtil
.
h
"
;
using
mozilla
:
:
dom
:
:
FeaturePolicyInfo
from
"
mozilla
/
dom
/
FeaturePolicy
.
h
"
;
using
nsILoadInfo
:
:
HTTPSUpgradeTelemetryType
from
"
nsILoadInfo
.
h
"
;
using
nsILoadInfo
:
:
SchemelessInputType
from
"
nsILoadInfo
.
h
"
;
using
mozilla
:
:
dom
:
:
UserNavigationInvolvement
from
"
mozilla
/
dom
/
UserNavigationInvolvement
.
h
"
;
using
mozilla
:
:
RFPTargetSet
from
"
nsRFPService
.
h
"
;
namespace
mozilla
{
namespace
net
{
struct
CookiePermissionData
{
PrincipalInfo
principalInfo
;
uint32_t
cookiePermission
;
}
;
struct
CookieJarSettingsArgs
{
uint32_t
cookieBehavior
;
bool
isFirstPartyIsolated
;
bool
shouldResistFingerprinting
;
bool
isOnContentBlockingAllowList
;
CookiePermissionData
[
]
cookiePermissions
;
bool
isFixed
;
nsString
partitionKey
;
bool
hasFingerprintingRandomizationKey
;
uint8_t
[
]
fingerprintingRandomizationKey
;
uint64_t
topLevelWindowContextId
;
}
;
struct
PreferredAlternativeDataTypeParams
{
nsCString
type
;
nsCString
contentType
;
PreferredAlternativeDataDeliveryTypeIPC
deliverAltData
;
}
;
struct
RedirectHistoryEntryInfo
{
PrincipalInfo
principalInfo
;
URIParams
?
referrerUri
;
nsCString
remoteAddress
;
}
;
struct
InterceptionInfoArg
{
PrincipalInfo
?
triggeringPrincipalInfo
;
nsContentPolicyType
contentPolicyType
;
RedirectHistoryEntryInfo
[
]
redirectChain
;
bool
fromThirdParty
;
}
;
struct
LoadInfoArgs
{
PrincipalInfo
?
requestingPrincipalInfo
;
PrincipalInfo
triggeringPrincipalInfo
;
PrincipalInfo
?
principalToInheritInfo
;
PrincipalInfo
?
topLevelPrincipalInfo
;
URIParams
?
resultPrincipalURI
;
nsCString
triggeringRemoteType
;
nsID
sandboxedNullPrincipalID
;
uint32_t
securityFlags
;
uint32_t
sandboxFlags
;
uint32_t
triggeringSandboxFlags
;
uint64_t
triggeringWindowId
;
bool
triggeringStorageAccess
;
uint32_t
triggeringFirstPartyClassificationFlags
;
uint32_t
triggeringThirdPartyClassificationFlags
;
nsContentPolicyType
contentPolicyType
;
uint32_t
tainting
;
bool
blockAllMixedContent
;
bool
upgradeInsecureRequests
;
bool
browserUpgradeInsecureRequests
;
bool
browserDidUpgradeInsecureRequests
;
bool
browserWouldUpgradeInsecureRequests
;
bool
forceAllowDataURI
;
bool
allowInsecureRedirectToDataURI
;
bool
skipContentPolicyCheckForWebRequest
;
bool
originalFrameSrcLoad
;
bool
forceInheritPrincipalDropped
;
uint64_t
innerWindowID
;
uint64_t
browsingContextID
;
uint64_t
frameBrowsingContextID
;
bool
initialSecurityCheckDone
;
bool
isInThirdPartyContext
;
bool
?
isThirdPartyContextToTopWindow
;
bool
isOn3PCBExceptionList
;
bool
isFormSubmission
;
bool
isGETRequest
;
bool
sendCSPViolationEvents
;
OriginAttributes
originAttributes
;
RedirectHistoryEntryInfo
[
]
redirectChainIncludingInternalRedirects
;
RedirectHistoryEntryInfo
[
]
redirectChain
;
bool
hasInjectedCookieForCookieBannerHandling
;
SchemelessInputType
schemelessInput
;
HTTPSUpgradeTelemetryType
httpsUpgradeTelemetry
;
IPCClientInfo
?
clientInfo
;
IPCClientInfo
?
reservedClientInfo
;
IPCClientInfo
?
initialClientInfo
;
IPCServiceWorkerDescriptor
?
controller
;
nsCString
[
]
corsUnsafeHeaders
;
bool
forcePreflight
;
bool
isPreflight
;
bool
loadTriggeredFromExternal
;
bool
serviceWorkerTaintingSynthesized
;
bool
documentHasUserInteracted
;
bool
allowListFutureDocumentsCreatedFromThisRedirectChain
;
bool
needForCheckingAntiTrackingHeuristic
;
nsString
cspNonce
;
nsString
integrityMetadata
;
bool
skipContentSniffing
;
uint32_t
httpsOnlyStatus
;
bool
hstsStatus
;
bool
hasValidUserGestureActivation
;
bool
textDirectiveUserActivation
;
bool
allowDeprecatedSystemRequests
;
bool
isInDevToolsContext
;
bool
parserCreatedScript
;
RequestMode
?
requestMode
;
bool
isFromProcessingFrameAttributes
;
bool
isMediaRequest
;
bool
isMediaInitialRequest
;
bool
isFromObjectOrEmbed
;
CookieJarSettingsArgs
cookieJarSettings
;
uint32_t
requestBlockingReason
;
PolicyContainerArgs
?
policyContainerToInherit
;
StoragePermissionState
storagePermission
;
IPAddressSpace
parentIPAddressSpace
;
IPAddressSpace
ipAddressSpace
;
RFPTargetSet
?
overriddenFingerprintingSettings
;
bool
isMetaRefresh
;
CrossOriginEmbedderPolicy
loadingEmbedderPolicy
;
bool
originTrialCoepCredentiallessEnabledForTopLevel
;
nullable
nsIURI
unstrippedURI
;
InterceptionInfoArg
?
interceptionInfo
;
bool
isNewWindowTarget
;
UserNavigationInvolvement
userNavigationInvolvement
;
}
;
struct
ParentLoadInfoForwarderArgs
{
bool
allowInsecureRedirectToDataURI
;
IPCServiceWorkerDescriptor
?
controller
;
uint32_t
tainting
;
bool
skipContentSniffing
;
uint32_t
httpsOnlyStatus
;
SchemelessInputType
schemelessInput
;
HTTPSUpgradeTelemetryType
httpsUpgradeTelemetry
;
bool
hstsStatus
;
bool
hasValidUserGestureActivation
;
bool
textDirectiveUserActivation
;
bool
allowDeprecatedSystemRequests
;
bool
isInDevToolsContext
;
bool
parserCreatedScript
;
RequestMode
?
requestMode
;
uint32_t
triggeringSandboxFlags
;
uint64_t
triggeringWindowId
;
bool
triggeringStorageAccess
;
bool
serviceWorkerTaintingSynthesized
;
bool
documentHasUserInteracted
;
bool
allowListFutureDocumentsCreatedFromThisRedirectChain
;
CookieJarSettingsArgs
?
cookieJarSettings
;
FeaturePolicyInfo
?
containerFeaturePolicyInfo
;
uint32_t
requestBlockingReason
;
StoragePermissionState
storagePermission
;
RFPTargetSet
?
overriddenFingerprintingSettings
;
bool
isMetaRefresh
;
bool
?
isThirdPartyContextToTopWindow
;
bool
isInThirdPartyContext
;
bool
isOn3PCBExceptionList
;
nullable
nsIURI
unstrippedURI
;
UserNavigationInvolvement
userNavigationInvolvement
;
}
;
struct
ChildLoadInfoForwarderArgs
{
IPCClientInfo
?
reservedClientInfo
;
IPCClientInfo
?
initialClientInfo
;
IPCServiceWorkerDescriptor
?
controller
;
uint32_t
requestBlockingReason
;
}
;
struct
CorsPreflightArgs
{
nsCString
[
]
unsafeHeaders
;
}
;
struct
HttpChannelOpenArgs
{
nullable
nsIURI
uri
;
nullable
nsIURI
original
;
nullable
nsIURI
doc
;
nullable
nsIReferrerInfo
referrerInfo
;
nullable
nsIURI
apiRedirectTo
;
nullable
nsIURI
topWindowURI
;
RequestHeaderTuples
requestHeaders
;
PreferredAlternativeDataTypeParams
[
]
preferredAlternativeTypes
;
TimeStamp
launchServiceWorkerStart
;
TimeStamp
launchServiceWorkerEnd
;
TimeStamp
dispatchFetchEventStart
;
TimeStamp
dispatchFetchEventEnd
;
TimeStamp
handleFetchEventStart
;
TimeStamp
handleFetchEventEnd
;
TimeStamp
navigationStartTimeStamp
;
uint64_t
startPos
;
uint64_t
requestContextID
;
uint64_t
channelId
;
uint64_t
contentWindowId
;
uint64_t
browserId
;
uint64_t
earlyHintPreloaderId
;
nsCString
requestMethod
;
ClassOfService
classOfService
;
nsCString
entityID
;
nsCString
appCacheClientID
;
CorsPreflightArgs
?
preflightArgs
;
nsCString
contentTypeHint
;
IPCStream
?
uploadStream
;
LoadInfoArgs
loadInfo
;
uint32_t
loadFlags
;
uint32_t
thirdPartyFlags
;
uint32_t
tlsFlags
;
uint32_t
cacheKey
;
uint32_t
initialRwin
;
uint32_t
redirectMode
;
int16_t
priority
;
bool
uploadStreamHasHeaders
;
bool
allowSTS
;
bool
resumeAt
;
bool
allowSpdy
;
bool
allowHttp3
;
bool
allowAltSvc
;
bool
beConservative
;
bool
bypassProxy
;
bool
blockAuthPrompt
;
bool
allowStaleCacheContent
;
RequestMode
requestMode
;
bool
forceValidateCacheContent
;
bool
preferCacheLoadOverBypass
;
bool
forceMainDocumentChannel
;
uint8_t
redirectionLimit
;
nsString
classicScriptHintCharset
;
nsString
documentCharacterSet
;
bool
isUserAgentHeaderModified
;
nsString
initiatorType
;
}
;
struct
HttpChannelConnectArgs
{
uint32_t
registrarId
;
}
;
union
HttpChannelCreationArgs
{
HttpChannelOpenArgs
;
HttpChannelConnectArgs
;
}
;
struct
ProxyInfoCloneArgs
{
nsCString
type
;
nsCString
host
;
int32_t
port
;
nsCString
username
;
nsCString
password
;
uint32_t
flags
;
uint32_t
timeout
;
uint32_t
resolveFlags
;
nsCString
proxyAuthorizationHeader
;
nsCString
connectionIsolationKey
;
}
;
struct
HttpConnectionInfoCloneArgs
{
nsCString
host
;
int32_t
port
;
nsCString
npnToken
;
nsCString
username
;
OriginAttributes
originAttributes
;
bool
endToEndSSL
;
nsCString
routedHost
;
int32_t
routedPort
;
bool
anonymous
;
bool
aPrivate
;
bool
insecureScheme
;
bool
noSpdy
;
bool
beConservative
;
bool
bypassProxy
;
bool
anonymousAllowClientCert
;
bool
fallbackConnection
;
uint32_t
tlsFlags
;
bool
isolated
;
bool
isTrrServiceChannel
;
uint8_t
trrMode
;
bool
isIPv4Disabled
;
bool
isIPv6Disabled
;
nsCString
topWindowOrigin
;
bool
isHttp3
;
bool
webTransport
;
uint64_t
webTransportId
;
bool
hasIPHintAddress
;
nsCString
echConfig
;
ProxyInfoCloneArgs
[
]
proxyInfo
;
}
;
struct
ConsoleReportCollected
{
uint32_t
errorFlags
;
nsCString
category
;
uint32_t
propertiesFile
;
nsCString
sourceFileURI
;
uint32_t
lineNumber
;
uint32_t
columnNumber
;
nsCString
messageName
;
nsString
[
]
stringParams
;
}
;
struct
CookieStruct
{
nsCString
name
;
nsCString
value
;
nsCString
host
;
nsCString
path
;
int64_t
expiry
;
int64_t
lastAccessed
;
int64_t
creationTime
;
bool
isHttpOnly
;
bool
isSession
;
bool
isSecure
;
bool
isPartitioned
;
int32_t
sameSite
;
uint8_t
schemeMap
;
}
;
struct
CookieStructTable
{
OriginAttributes
attrs
;
CookieStruct
[
]
cookies
;
}
;
struct
DocumentCreationArgs
{
uint32_t
loadFlags
;
bool
uriModified
;
bool
isEmbeddingBlockedError
;
}
;
struct
ObjectCreationArgs
{
uint32_t
loadFlags
;
uint64_t
embedderInnerWindowId
;
nsContentPolicyType
contentPolicyType
;
bool
isUrgentStart
;
}
;
union
DocumentChannelElementCreationArgs
{
DocumentCreationArgs
;
ObjectCreationArgs
;
}
;
struct
DocumentChannelCreationArgs
{
nsDocShellLoadState
loadState
;
TimeStamp
asyncOpenTime
;
uint64_t
channelId
;
uint32_t
cacheKey
;
nullable
nsDOMNavigationTiming
timing
;
IPCClientInfo
?
initialClientInfo
;
DocumentChannelElementCreationArgs
elementCreationArgs
;
uint64_t
parentInitiatedNavigationEpoch
;
}
;
struct
EarlyHintConnectArgs
{
LinkHeader
link
;
uint64_t
earlyHintPreloaderId
;
}
;
struct
RedirectToRealChannelArgs
{
uint32_t
registrarId
;
nullable
nsIURI
uri
;
uint32_t
newLoadFlags
;
ReplacementChannelConfigInit
?
init
;
LoadInfoArgs
loadInfo
;
uint64_t
channelId
;
nullable
nsIURI
originalURI
;
uint32_t
redirectMode
;
uint32_t
redirectFlags
;
uint32_t
?
contentDisposition
;
nsString
?
contentDispositionFilename
;
nullable
nsIPropertyBag2
properties
;
uint32_t
loadStateExternalLoadFlags
;
uint32_t
loadStateInternalLoadFlags
;
uint32_t
loadStateLoadType
;
nullable
nsDOMNavigationTiming
timing
;
nsString
srcdocData
;
nullable
nsIURI
baseUri
;
LoadingSessionHistoryInfo
?
loadingSessionHistoryInfo
;
uint64_t
loadIdentifier
;
nsCString
?
originalUriString
;
EarlyHintConnectArgs
[
]
earlyHints
;
uint32_t
earlyHintLinkType
;
}
;
struct
TimingStructArgs
{
TimeStamp
domainLookupStart
;
TimeStamp
domainLookupEnd
;
TimeStamp
connectStart
;
TimeStamp
tcpConnectEnd
;
TimeStamp
secureConnectionStart
;
TimeStamp
connectEnd
;
TimeStamp
requestStart
;
TimeStamp
responseStart
;
TimeStamp
responseEnd
;
TimeStamp
transactionPending
;
}
;
struct
ResourceTimingStructArgs
{
TimeStamp
domainLookupStart
;
TimeStamp
domainLookupEnd
;
TimeStamp
connectStart
;
TimeStamp
tcpConnectEnd
;
TimeStamp
secureConnectionStart
;
TimeStamp
connectEnd
;
TimeStamp
requestStart
;
TimeStamp
responseStart
;
TimeStamp
responseEnd
;
TimeStamp
fetchStart
;
TimeStamp
redirectStart
;
TimeStamp
redirectEnd
;
uint64_t
transferSize
;
uint64_t
encodedBodySize
;
TimeStamp
cacheReadStart
;
TimeStamp
cacheReadEnd
;
TimeStamp
transactionPending
;
}
;
struct
HttpActivity
{
nsCString
host
;
int32_t
port
;
bool
endToEndSSL
;
}
;
struct
HttpConnectionActivity
{
nsCString
connInfoKey
;
nsCString
host
;
int32_t
port
;
bool
ssl
;
bool
hasECH
;
bool
isHttp3
;
}
;
union
HttpActivityArgs
{
uint64_t
;
HttpActivity
;
HttpConnectionActivity
;
}
;
struct
TransactionObserverResult
{
bool
versionOk
;
bool
authOk
;
nsresult
closeReason
;
}
;
struct
SpeculativeConnectionOverriderArgs
{
uint32_t
parallelSpeculativeConnectLimit
;
bool
ignoreIdle
;
bool
isFromPredictor
;
bool
allow1918
;
}
;
struct
GIOChannelOpenArgs
{
URIParams
uri
;
uint64_t
startPos
;
nsCString
entityID
;
IPCStream
?
uploadStream
;
LoadInfoArgs
loadInfo
;
uint32_t
loadFlags
;
}
;
struct
GIOChannelConnectArgs
{
uint32_t
channelId
;
}
;
union
GIOChannelCreationArgs
{
GIOChannelOpenArgs
;
GIOChannelConnectArgs
;
}
;
struct
FileChannelInfo
{
nullable
nsIURI
uri
;
nullable
nsIURI
originalURI
;
uint32_t
loadFlags
;
LoadInfoArgs
loadInfo
;
nsCString
contentType
;
uint64_t
channelId
;
}
;
struct
GeckoViewContentChannelOpenArgs
{
URIParams
uri
;
LoadInfoArgs
loadInfo
;
uint32_t
loadFlags
;
}
;
struct
GeckoViewContentChannelConnectArgs
{
uint32_t
channelId
;
}
;
union
GeckoViewContentChannelArgs
{
GeckoViewContentChannelOpenArgs
;
GeckoViewContentChannelConnectArgs
;
}
;
struct
RemoteStreamInfo
{
nullable
nsIInputStream
inputStream
;
nsCString
contentType
;
int64_t
contentLength
;
}
;
}
}
