#
ifndef
mozilla_net_DocumentLoadListener_h
#
define
mozilla_net_DocumentLoadListener_h
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
mozilla
/
net
/
NeckoCommon
.
h
"
#
include
"
mozilla
/
net
/
NeckoParent
.
h
"
#
include
"
mozilla
/
net
/
PDocumentChannelParent
.
h
"
#
include
"
mozilla
/
net
/
ParentChannelListener
.
h
"
#
include
"
mozilla
/
net
/
ADocumentChannelBridge
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIParentChannel
.
h
"
#
include
"
nsIParentRedirectingChannel
.
h
"
#
include
"
nsIProcessSwitchRequestor
.
h
"
#
include
"
nsIRedirectResultListener
.
h
"
#
define
DOCUMENT_LOAD_LISTENER_IID
\
{
\
0x3b393c56
0x9e01
0x11e9
{
\
0xa2
0xa3
0x2a
0x2a
0xe2
0xdb
0xcc
0xe4
\
}
\
}
namespace
mozilla
{
namespace
net
{
class
DocumentLoadListener
:
public
nsIInterfaceRequestor
public
nsIAsyncVerifyRedirectReadyCallback
public
nsIParentChannel
public
nsIChannelEventSink
public
HttpChannelSecurityWarningReporter
public
nsIProcessSwitchRequestor
{
public
:
explicit
DocumentLoadListener
(
const
dom
:
:
PBrowserOrId
&
aIframeEmbedding
nsILoadContext
*
aLoadContext
PBOverrideStatus
aOverrideStatus
ADocumentChannelBridge
*
aBridge
)
;
bool
Open
(
nsDocShellLoadState
*
aLoadState
class
LoadInfo
*
aLoadInfo
const
nsString
*
aInitiatorType
nsLoadFlags
aLoadFlags
uint32_t
aLoadType
uint32_t
aCacheKey
bool
aIsActive
bool
aIsTopLevelDoc
bool
aHasNonEmptySandboxingFlags
const
Maybe
<
ipc
:
:
URIParams
>
&
aTopWindowURI
const
Maybe
<
ipc
:
:
PrincipalInfo
>
&
aContentBlockingAllowListPrincipal
const
nsString
&
aCustomUserAgent
const
uint64_t
&
aChannelId
const
TimeStamp
&
aAsyncOpenTime
nsresult
*
aRv
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIPARENTCHANNEL
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSIASYNCVERIFYREDIRECTREADYCALLBACK
NS_DECL_NSICHANNELEVENTSINK
NS_DECL_NSIPROCESSSWITCHREQUESTOR
void
ResumeSuspendedChannel
(
nsIStreamListener
*
aListener
)
;
NS_DECLARE_STATIC_IID_ACCESSOR
(
DOCUMENT_LOAD_LISTENER_IID
)
void
Cancel
(
const
nsresult
&
status
)
;
void
Suspend
(
)
;
void
Resume
(
)
;
nsresult
ReportSecurityMessage
(
const
nsAString
&
aMessageTag
const
nsAString
&
aMessageCategory
)
override
{
ReportSecurityMessageParams
params
;
params
.
mMessageTag
=
aMessageTag
;
params
.
mMessageCategory
=
aMessageCategory
;
mSecurityWarningFunctions
.
AppendElement
(
SecurityWarningFunction
{
VariantIndex
<
0
>
{
}
std
:
:
move
(
params
)
}
)
;
return
NS_OK
;
}
nsresult
LogBlockedCORSRequest
(
const
nsAString
&
aMessage
const
nsACString
&
aCategory
)
override
{
LogBlockedCORSRequestParams
params
;
params
.
mMessage
=
aMessage
;
params
.
mCategory
=
aCategory
;
mSecurityWarningFunctions
.
AppendElement
(
SecurityWarningFunction
{
VariantIndex
<
1
>
{
}
std
:
:
move
(
params
)
}
)
;
return
NS_OK
;
}
nsresult
LogMimeTypeMismatch
(
const
nsACString
&
aMessageName
bool
aWarning
const
nsAString
&
aURL
const
nsAString
&
aContentType
)
override
{
LogMimeTypeMismatchParams
params
;
params
.
mMessageName
=
aMessageName
;
params
.
mWarning
=
aWarning
;
params
.
mURL
=
aURL
;
params
.
mContentType
=
aContentType
;
mSecurityWarningFunctions
.
AppendElement
(
SecurityWarningFunction
{
VariantIndex
<
2
>
{
}
std
:
:
move
(
params
)
}
)
;
return
NS_OK
;
}
void
DocumentChannelBridgeDisconnected
(
)
;
base
:
:
ProcessId
OtherPid
(
)
const
{
if
(
mDocumentChannelBridge
)
{
return
mDocumentChannelBridge
-
>
OtherPid
(
)
;
}
return
0
;
}
bool
AttachStreamFilter
(
ipc
:
:
Endpoint
<
mozilla
:
:
extensions
:
:
PStreamFilterParent
>
&
&
aEndpoint
)
{
if
(
mDocumentChannelBridge
)
{
return
mDocumentChannelBridge
-
>
AttachStreamFilter
(
std
:
:
move
(
aEndpoint
)
)
;
}
return
false
;
}
void
SerializeRedirectData
(
RedirectToRealChannelArgs
&
aArgs
bool
aIsCrossProcess
uint32_t
aRedirectFlags
uint32_t
aLoadFlags
)
;
protected
:
virtual
~
DocumentLoadListener
(
)
=
default
;
void
TriggerRedirectToRealChannel
(
const
Maybe
<
uint64_t
>
&
aDestinationProcess
=
Nothing
(
)
)
;
void
RedirectToRealChannelFinished
(
nsresult
aRv
)
;
void
FinishReplacementChannelSetup
(
bool
aSucceeded
)
;
void
TriggerCrossProcessSwitch
(
)
;
RefPtr
<
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
>
RedirectToRealChannel
(
uint32_t
aRedirectFlags
uint32_t
aLoadFlags
const
Maybe
<
uint64_t
>
&
aDestinationProcess
)
;
struct
ClassifierMatchedInfoParams
{
nsCString
mList
;
nsCString
mProvider
;
nsCString
mFullHash
;
}
;
struct
ClassifierMatchedTrackingInfoParams
{
nsCString
mLists
;
nsCString
mFullHashes
;
}
;
struct
ClassificationFlagsParams
{
uint32_t
mClassificationFlags
;
bool
mIsThirdParty
;
}
;
struct
NotifyChannelClassifierProtectionDisabledParams
{
uint32_t
mAcceptedReason
;
}
;
struct
NotifyCookieAllowedParams
{
}
;
struct
NotifyCookieBlockedParams
{
uint32_t
mRejectedReason
;
}
;
typedef
mozilla
:
:
Variant
<
nsIHttpChannel
:
:
FlashPluginState
ClassifierMatchedInfoParams
ClassifierMatchedTrackingInfoParams
ClassificationFlagsParams
NotifyChannelClassifierProtectionDisabledParams
NotifyCookieAllowedParams
NotifyCookieBlockedParams
>
IParentChannelFunction
;
nsTArray
<
IParentChannelFunction
>
mIParentChannelFunctions
;
struct
ReportSecurityMessageParams
{
nsString
mMessageTag
;
nsString
mMessageCategory
;
}
;
struct
LogBlockedCORSRequestParams
{
nsString
mMessage
;
nsCString
mCategory
;
}
;
struct
LogMimeTypeMismatchParams
{
nsCString
mMessageName
;
bool
mWarning
;
nsString
mURL
;
nsString
mContentType
;
}
;
typedef
mozilla
:
:
Variant
<
ReportSecurityMessageParams
LogBlockedCORSRequestParams
LogMimeTypeMismatchParams
>
SecurityWarningFunction
;
nsTArray
<
SecurityWarningFunction
>
mSecurityWarningFunctions
;
struct
OnDataAvailableRequest
{
nsCString
data
;
uint64_t
offset
;
uint32_t
count
;
}
;
nsTArray
<
OnDataAvailableRequest
>
mPendingRequests
;
Maybe
<
nsresult
>
mStopRequestValue
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
RefPtr
<
ParentChannelListener
>
mParentChannelListener
;
RefPtr
<
ADocumentChannelBridge
>
mDocumentChannelBridge
;
nsCOMPtr
<
nsILoadContext
>
mLoadContext
;
PBOverrideStatus
mPBOverride
;
nsCOMPtr
<
nsIURI
>
mChannelCreationURI
;
nsTArray
<
DocumentChannelRedirect
>
mRedirects
;
uint32_t
mRedirectChannelId
=
0
;
bool
mSuspendedChannel
=
false
;
bool
mDoingProcessSwitch
=
false
;
bool
mOldApplyConversion
=
false
;
bool
mHasCrossOriginOpenerPolicyMismatch
=
false
;
typedef
MozPromise
<
uint64_t
nsresult
true
>
ContentProcessIdPromise
;
RefPtr
<
ContentProcessIdPromise
>
mRedirectContentProcessIdPromise
;
uint64_t
mCrossProcessRedirectIdentifier
=
0
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
DocumentLoadListener
DOCUMENT_LOAD_LISTENER_IID
)
}
}
#
endif
