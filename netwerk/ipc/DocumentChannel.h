#
ifndef
mozilla_net_DocumentChannel_h
#
define
mozilla_net_DocumentChannel_h
#
include
"
mozilla
/
dom
/
ClientInfo
.
h
"
#
include
"
mozilla
/
net
/
NeckoChannelParams
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIChildChannel
.
h
"
#
include
"
nsITraceableChannel
.
h
"
#
define
DOCUMENT_CHANNEL_IID
\
{
\
0x6977bc44
0xb1db
0x41b7
{
\
0xb5
0xc5
0xe2
0x13
0x68
0x22
0xc9
0x8f
\
}
\
}
namespace
mozilla
{
namespace
net
{
class
DocumentChannel
:
public
nsIIdentChannel
public
nsITraceableChannel
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUEST
NS_DECL_NSICHANNEL
NS_DECL_NSIIDENTCHANNEL
NS_DECL_NSITRACEABLECHANNEL
NS_DECLARE_STATIC_IID_ACCESSOR
(
DOCUMENT_CHANNEL_IID
)
DocumentChannel
(
nsDocShellLoadState
*
aLoadState
class
LoadInfo
*
aLoadInfo
nsLoadFlags
aLoadFlags
uint32_t
aCacheKey
)
;
const
nsTArray
<
DocumentChannelRedirect
>
&
GetRedirectChain
(
)
const
{
return
mRedirects
;
}
void
GetLastVisit
(
nsIURI
*
*
aURI
uint32_t
*
aChannelRedirectFlags
)
const
{
*
aURI
=
do_AddRef
(
mLastVisitInfo
.
uri
(
)
)
.
take
(
)
;
*
aChannelRedirectFlags
=
mLastVisitInfo
.
previousFlags
(
)
;
}
void
SetNavigationTiming
(
nsDOMNavigationTiming
*
aTiming
)
{
mTiming
=
aTiming
;
}
void
SetInitialClientInfo
(
const
Maybe
<
dom
:
:
ClientInfo
>
&
aInfo
)
{
mInitialClientInfo
=
aInfo
;
}
protected
:
void
ShutdownListeners
(
nsresult
aStatusCode
)
;
void
DisconnectChildListeners
(
const
nsresult
&
aStatus
const
nsresult
&
aLoadGroupStatus
)
;
virtual
void
DeleteIPDL
(
)
{
}
nsDocShell
*
GetDocShell
(
)
;
virtual
~
DocumentChannel
(
)
=
default
;
LastVisitInfo
mLastVisitInfo
;
nsTArray
<
DocumentChannelRedirect
>
mRedirects
;
const
TimeStamp
mAsyncOpenTime
;
const
RefPtr
<
nsDocShellLoadState
>
mLoadState
;
const
uint32_t
mCacheKey
;
nsresult
mStatus
=
NS_OK
;
bool
mCanceled
=
false
;
bool
mIsPending
=
false
;
bool
mWasOpened
=
false
;
uint64_t
mChannelId
;
uint32_t
mLoadFlags
=
LOAD_NORMAL
;
const
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsILoadGroup
>
mLoadGroup
;
nsCOMPtr
<
nsILoadInfo
>
mLoadInfo
;
nsCOMPtr
<
nsIInterfaceRequestor
>
mCallbacks
;
nsCOMPtr
<
nsIStreamListener
>
mListener
;
nsCOMPtr
<
nsISupports
>
mOwner
;
RefPtr
<
nsDOMNavigationTiming
>
mTiming
;
Maybe
<
dom
:
:
ClientInfo
>
mInitialClientInfo
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
DocumentChannel
DOCUMENT_CHANNEL_IID
)
}
}
#
endif
