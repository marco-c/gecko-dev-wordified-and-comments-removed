#
include
"
SocketProcessChild
.
h
"
#
include
"
SocketProcessLogging
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ipc
/
ProcessChild
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsDebugImpl
.
h
"
#
include
"
nsThreadManager
.
h
"
#
include
"
ProcessUtils
.
h
"
namespace
mozilla
{
namespace
net
{
using
namespace
ipc
;
SocketProcessChild
:
:
SocketProcessChild
(
)
{
LOG
(
(
"
CONSTRUCT
SocketProcessChild
:
:
SocketProcessChild
\
n
"
)
)
;
nsDebugImpl
:
:
SetMultiprocessMode
(
"
Socket
"
)
;
MOZ_COUNT_CTOR
(
SocketProcessChild
)
;
}
SocketProcessChild
:
:
~
SocketProcessChild
(
)
{
LOG
(
(
"
DESTRUCT
SocketProcessChild
:
:
SocketProcessChild
\
n
"
)
)
;
MOZ_COUNT_DTOR
(
SocketProcessChild
)
;
}
bool
SocketProcessChild
:
:
Init
(
base
:
:
ProcessId
aParentPid
const
char
*
aParentBuildID
MessageLoop
*
aIOLoop
IPC
:
:
Channel
*
aChannel
)
{
if
(
NS_WARN_IF
(
NS_FAILED
(
nsThreadManager
:
:
get
(
)
.
Init
(
)
)
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
!
Open
(
aChannel
aParentPid
aIOLoop
)
)
)
{
return
false
;
}
MessageChannel
*
channel
=
GetIPCChannel
(
)
;
if
(
channel
&
&
!
channel
-
>
SendBuildIDsMatchMessage
(
aParentBuildID
)
)
{
ProcessChild
:
:
QuickExit
(
)
;
}
SetThisProcessName
(
"
Socket
Process
"
)
;
return
true
;
}
void
SocketProcessChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
LOG
(
(
"
SocketProcessChild
:
:
ActorDestroy
\
n
"
)
)
;
if
(
AbnormalShutdown
=
=
aWhy
)
{
NS_WARNING
(
"
Shutting
down
Socket
process
early
due
to
a
crash
!
"
)
;
ProcessChild
:
:
QuickExit
(
)
;
}
XRE_ShutdownChildProcess
(
)
;
}
void
SocketProcessChild
:
:
CleanUp
(
)
{
LOG
(
(
"
SocketProcessChild
:
:
CleanUp
\
n
"
)
)
;
NS_ShutdownXPCOM
(
nullptr
)
;
}
IPCResult
SocketProcessChild
:
:
RecvPreferenceUpdate
(
const
Pref
&
aPref
)
{
Preferences
:
:
SetPreference
(
aPref
)
;
return
IPC_OK
(
)
;
}
}
}
