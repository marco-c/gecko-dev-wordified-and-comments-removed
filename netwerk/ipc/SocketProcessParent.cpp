#
include
"
SocketProcessParent
.
h
"
#
include
"
SocketProcessHost
.
h
"
#
include
"
mozilla
/
ipc
/
CrashReporterHost
.
h
"
namespace
mozilla
{
namespace
net
{
static
SocketProcessParent
*
sSocketProcessParent
;
SocketProcessParent
:
:
SocketProcessParent
(
SocketProcessHost
*
aHost
)
:
mHost
(
aHost
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mHost
)
;
MOZ_COUNT_CTOR
(
SocketProcessParent
)
;
sSocketProcessParent
=
this
;
}
SocketProcessParent
:
:
~
SocketProcessParent
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_COUNT_DTOR
(
SocketProcessParent
)
;
sSocketProcessParent
=
nullptr
;
}
SocketProcessParent
*
SocketProcessParent
:
:
GetSingleton
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
sSocketProcessParent
;
}
mozilla
:
:
ipc
:
:
IPCResult
SocketProcessParent
:
:
RecvInitCrashReporter
(
Shmem
&
&
aShmem
const
NativeThreadId
&
aThreadId
)
{
mCrashReporter
=
MakeUnique
<
CrashReporterHost
>
(
GeckoProcessType_Content
aShmem
aThreadId
)
;
return
IPC_OK
(
)
;
}
void
SocketProcessParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
aWhy
=
=
AbnormalShutdown
)
{
if
(
mCrashReporter
)
{
mCrashReporter
-
>
GenerateCrashReport
(
OtherPid
(
)
)
;
mCrashReporter
=
nullptr
;
}
}
if
(
mHost
)
{
mHost
-
>
OnChannelClosed
(
)
;
}
}
bool
SocketProcessParent
:
:
SendRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
MaybeFileDesc
&
aDMDFile
)
{
mMemoryReportRequest
=
MakeUnique
<
dom
:
:
MemoryReportRequestHost
>
(
aGeneration
)
;
Unused
<
<
PSocketProcessParent
:
:
SendRequestMemoryReport
(
aGeneration
aAnonymize
aMinimizeMemoryUsage
aDMDFile
)
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
SocketProcessParent
:
:
RecvAddMemoryReport
(
const
MemoryReport
&
aReport
)
{
if
(
mMemoryReportRequest
)
{
mMemoryReportRequest
-
>
RecvReport
(
aReport
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
SocketProcessParent
:
:
RecvFinishMemoryReport
(
const
uint32_t
&
aGeneration
)
{
if
(
mMemoryReportRequest
)
{
mMemoryReportRequest
-
>
Finish
(
aGeneration
)
;
mMemoryReportRequest
=
nullptr
;
}
return
IPC_OK
(
)
;
}
class
DeferredDeleteSocketProcessParent
:
public
Runnable
{
public
:
explicit
DeferredDeleteSocketProcessParent
(
UniquePtr
<
SocketProcessParent
>
&
&
aParent
)
:
Runnable
(
"
net
:
:
DeferredDeleteSocketProcessParent
"
)
mParent
(
std
:
:
move
(
aParent
)
)
{
}
NS_IMETHODIMP
Run
(
)
override
{
return
NS_OK
;
}
private
:
UniquePtr
<
SocketProcessParent
>
mParent
;
}
;
void
SocketProcessParent
:
:
Destroy
(
UniquePtr
<
SocketProcessParent
>
&
&
aParent
)
{
NS_DispatchToMainThread
(
new
DeferredDeleteSocketProcessParent
(
std
:
:
move
(
aParent
)
)
)
;
}
}
}
