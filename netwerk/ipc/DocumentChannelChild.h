#
ifndef
mozilla_net_DocumentChannelChild_h
#
define
mozilla_net_DocumentChannelChild_h
#
include
"
mozilla
/
net
/
PDocumentChannelChild
.
h
"
#
include
"
mozilla
/
net
/
DocumentChannel
.
h
"
#
include
"
nsIAsyncVerifyRedirectCallback
.
h
"
#
include
"
mozilla
/
dom
/
nsCSPContext
.
h
"
namespace
mozilla
{
namespace
net
{
class
DocumentChannelChild
final
:
public
DocumentChannel
public
nsIAsyncVerifyRedirectCallback
public
PDocumentChannelChild
{
public
:
DocumentChannelChild
(
nsDocShellLoadState
*
aLoadState
class
LoadInfo
*
aLoadInfo
nsLoadFlags
aLoadFlags
uint32_t
aCacheKey
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIASYNCVERIFYREDIRECTCALLBACK
NS_IMETHOD
AsyncOpen
(
nsIStreamListener
*
aListener
)
override
;
NS_IMETHOD
Cancel
(
nsresult
aStatusCode
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFailedAsyncOpen
(
const
nsresult
&
aStatusCode
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDisconnectChildListeners
(
const
nsresult
&
aStatus
const
nsresult
&
aLoadGroupStatus
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDeleteSelf
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRedirectToRealChannel
(
RedirectToRealChannelArgs
&
&
aArgs
RedirectToRealChannelResolver
&
&
aResolve
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAttachStreamFilter
(
Endpoint
<
extensions
:
:
PStreamFilterParent
>
&
&
aEndpoint
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCSPViolation
(
const
CSPInfo
&
aCSP
bool
aIsCspToInherit
nsIURI
*
aBlockedURI
uint32_t
aBlockedContentSource
nsIURI
*
aOriginalURI
const
nsAString
&
aViolatedDirective
uint32_t
aViolatedPolicyIndex
const
nsAString
&
aObserverSubject
)
;
private
:
void
ShutdownListeners
(
nsresult
aStatusCode
)
;
~
DocumentChannelChild
(
)
;
nsCOMPtr
<
nsIChannel
>
mRedirectChannel
;
RedirectToRealChannelResolver
mRedirectResolver
;
}
;
}
}
#
endif
