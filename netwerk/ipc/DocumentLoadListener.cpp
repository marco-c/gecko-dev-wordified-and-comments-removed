#
include
"
DocumentLoadListener
.
h
"
#
include
"
mozilla
/
AntiTrackingUtils
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
LoadInfo
.
h
"
#
include
"
mozilla
/
MozPromiseInlines
.
h
"
#
include
"
mozilla
/
StaticPrefs_extensions
.
h
"
#
include
"
mozilla
/
StaticPrefs_fission
.
h
"
#
include
"
mozilla
/
StaticPrefs_security
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
ChildProcessChannelListener
.
h
"
#
include
"
mozilla
/
dom
/
ClientChannelHelper
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentProcessManager
.
h
"
#
include
"
mozilla
/
dom
/
nsHTTPSOnlyUtils
.
h
"
#
include
"
mozilla
/
dom
/
SessionHistoryEntry
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
net
/
CookieJarSettings
.
h
"
#
include
"
mozilla
/
net
/
HttpChannelParent
.
h
"
#
include
"
mozilla
/
net
/
RedirectChannelRegistrar
.
h
"
#
include
"
nsContentSecurityUtils
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsDocShellLoadState
.
h
"
#
include
"
nsDocShellLoadTypes
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsExternalHelperAppService
.
h
"
#
include
"
nsHttpChannel
.
h
"
#
include
"
nsIBrowser
.
h
"
#
include
"
nsIE10SUtils
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIStreamConverterService
.
h
"
#
include
"
nsIViewSourceChannel
.
h
"
#
include
"
nsImportModule
.
h
"
#
include
"
nsMimeTypes
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsRedirectHistoryEntry
.
h
"
#
include
"
nsSandboxFlags
.
h
"
#
include
"
nsStringStream
.
h
"
#
include
"
nsURILoader
.
h
"
#
include
"
nsWebNavigationInfo
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
nsHTTPSOnlyUtils
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWebProgress
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWebProgressRequest
.
h
"
#
include
"
mozilla
/
net
/
UrlClassifierFeatureFactory
.
h
"
#
include
"
mozilla
/
ExtensionPolicyService
.
h
"
#
ifdef
ANDROID
#
include
"
mozilla
/
widget
/
nsWindow
.
h
"
#
endif
mozilla
:
:
LazyLogModule
gDocumentChannelLog
(
"
DocumentChannel
"
)
;
#
define
LOG
(
fmt
)
MOZ_LOG
(
gDocumentChannelLog
mozilla
:
:
LogLevel
:
:
Verbose
fmt
)
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
namespace
net
{
static
void
SetNeedToAddURIVisit
(
nsIChannel
*
aChannel
bool
aNeedToAddURIVisit
)
{
nsCOMPtr
<
nsIWritablePropertyBag2
>
props
(
do_QueryInterface
(
aChannel
)
)
;
if
(
!
props
)
{
return
;
}
props
-
>
SetPropertyAsBool
(
u
"
docshell
.
needToAddURIVisit
"
_ns
aNeedToAddURIVisit
)
;
}
static
auto
SecurityFlagsForLoadInfo
(
nsDocShellLoadState
*
aLoadState
)
-
>
nsSecurityFlags
{
nsSecurityFlags
securityFlags
=
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
;
if
(
aLoadState
-
>
LoadType
(
)
=
=
LOAD_ERROR_PAGE
)
{
securityFlags
|
=
nsILoadInfo
:
:
SEC_LOAD_ERROR_PAGE
;
}
if
(
aLoadState
-
>
PrincipalToInherit
(
)
)
{
bool
isSrcdoc
=
aLoadState
-
>
HasLoadFlags
(
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_IS_SRCDOC
)
;
bool
inheritAttrs
=
nsContentUtils
:
:
ChannelShouldInheritPrincipal
(
aLoadState
-
>
PrincipalToInherit
(
)
aLoadState
-
>
URI
(
)
true
isSrcdoc
)
;
bool
isURIUniqueOrigin
=
StaticPrefs
:
:
security_data_uri_unique_opaque_origin
(
)
&
&
SchemeIsData
(
aLoadState
-
>
URI
(
)
)
;
if
(
inheritAttrs
&
&
!
isURIUniqueOrigin
)
{
securityFlags
|
=
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
;
}
}
return
securityFlags
;
}
static
auto
CreateDocumentLoadInfo
(
CanonicalBrowsingContext
*
aBrowsingContext
nsDocShellLoadState
*
aLoadState
)
-
>
already_AddRefed
<
LoadInfo
>
{
uint32_t
sandboxFlags
=
aBrowsingContext
-
>
GetSandboxFlags
(
)
;
RefPtr
<
LoadInfo
>
loadInfo
;
auto
securityFlags
=
SecurityFlagsForLoadInfo
(
aLoadState
)
;
if
(
aBrowsingContext
-
>
GetParent
(
)
)
{
loadInfo
=
LoadInfo
:
:
CreateForFrame
(
aBrowsingContext
aLoadState
-
>
TriggeringPrincipal
(
)
securityFlags
sandboxFlags
)
;
}
else
{
OriginAttributes
attrs
;
aBrowsingContext
-
>
GetOriginAttributes
(
attrs
)
;
loadInfo
=
LoadInfo
:
:
CreateForDocument
(
aBrowsingContext
aLoadState
-
>
TriggeringPrincipal
(
)
attrs
securityFlags
sandboxFlags
)
;
}
loadInfo
-
>
SetTriggeringSandboxFlags
(
aLoadState
-
>
TriggeringSandboxFlags
(
)
)
;
loadInfo
-
>
SetHasValidUserGestureActivation
(
aLoadState
-
>
HasValidUserGestureActivation
(
)
)
;
return
loadInfo
.
forget
(
)
;
}
static
auto
CreateObjectLoadInfo
(
nsDocShellLoadState
*
aLoadState
uint64_t
aInnerWindowId
nsContentPolicyType
aContentPolicyType
uint32_t
aSandboxFlags
)
-
>
already_AddRefed
<
LoadInfo
>
{
RefPtr
<
WindowGlobalParent
>
wgp
=
WindowGlobalParent
:
:
GetByInnerWindowId
(
aInnerWindowId
)
;
MOZ_RELEASE_ASSERT
(
wgp
)
;
auto
securityFlags
=
SecurityFlagsForLoadInfo
(
aLoadState
)
;
RefPtr
<
LoadInfo
>
loadInfo
=
LoadInfo
:
:
CreateForNonDocument
(
wgp
wgp
-
>
DocumentPrincipal
(
)
aContentPolicyType
securityFlags
aSandboxFlags
)
;
loadInfo
-
>
SetHasValidUserGestureActivation
(
aLoadState
-
>
HasValidUserGestureActivation
(
)
)
;
loadInfo
-
>
SetTriggeringSandboxFlags
(
aLoadState
-
>
TriggeringSandboxFlags
(
)
)
;
return
loadInfo
.
forget
(
)
;
}
static
auto
WebProgressForBrowsingContext
(
CanonicalBrowsingContext
*
aBrowsingContext
)
-
>
already_AddRefed
<
BrowsingContextWebProgress
>
{
return
RefPtr
<
BrowsingContextWebProgress
>
(
aBrowsingContext
-
>
GetWebProgress
(
)
)
.
forget
(
)
;
}
class
ParentProcessDocumentOpenInfo
final
:
public
nsDocumentOpenInfo
public
nsIMultiPartChannelListener
{
public
:
ParentProcessDocumentOpenInfo
(
ParentChannelListener
*
aListener
uint32_t
aFlags
mozilla
:
:
dom
:
:
BrowsingContext
*
aBrowsingContext
bool
aIsDocumentLoad
)
:
nsDocumentOpenInfo
(
aFlags
false
)
mBrowsingContext
(
aBrowsingContext
)
mListener
(
aListener
)
mIsDocumentLoad
(
aIsDocumentLoad
)
{
LOG
(
(
"
ParentProcessDocumentOpenInfo
ctor
[
this
=
%
p
]
"
this
)
)
;
}
NS_DECL_ISUPPORTS_INHERITED
bool
TryDefaultContentListener
(
nsIChannel
*
aChannel
const
nsCString
&
aContentType
)
{
uint32_t
canHandle
=
nsWebNavigationInfo
:
:
IsTypeSupported
(
aContentType
mBrowsingContext
-
>
GetAllowPlugins
(
)
)
;
if
(
canHandle
!
=
nsIWebNavigationInfo
:
:
UNSUPPORTED
)
{
m_targetStreamListener
=
mListener
;
nsLoadFlags
loadFlags
=
0
;
aChannel
-
>
GetLoadFlags
(
&
loadFlags
)
;
aChannel
-
>
SetLoadFlags
(
loadFlags
|
nsIChannel
:
:
LOAD_TARGETED
)
;
return
true
;
}
return
false
;
}
bool
TryDefaultContentListener
(
nsIChannel
*
aChannel
)
override
{
return
TryDefaultContentListener
(
aChannel
mContentType
)
;
}
nsresult
TryStreamConversion
(
nsIChannel
*
aChannel
)
override
{
if
(
mContentType
.
LowerCaseEqualsASCII
(
UNKNOWN_CONTENT_TYPE
)
)
{
return
nsDocumentOpenInfo
:
:
TryStreamConversion
(
aChannel
)
;
}
nsresult
rv
;
nsCOMPtr
<
nsIStreamConverterService
>
streamConvService
=
do_GetService
(
NS_STREAMCONVERTERSERVICE_CONTRACTID
&
rv
)
;
nsAutoCString
str
;
rv
=
streamConvService
-
>
ConvertedType
(
mContentType
aChannel
str
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
TryDefaultContentListener
(
aChannel
str
)
)
{
mContentType
=
str
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
nsresult
TryExternalHelperApp
(
nsIExternalHelperAppService
*
aHelperAppService
nsIChannel
*
aChannel
)
override
{
RefPtr
<
nsIStreamListener
>
listener
;
nsresult
rv
=
aHelperAppService
-
>
CreateListener
(
mContentType
aChannel
mBrowsingContext
false
nullptr
getter_AddRefs
(
listener
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
m_targetStreamListener
=
listener
;
}
return
rv
;
}
nsDocumentOpenInfo
*
Clone
(
)
override
{
mCloned
=
true
;
return
new
ParentProcessDocumentOpenInfo
(
mListener
mFlags
mBrowsingContext
mIsDocumentLoad
)
;
}
nsresult
OnDocumentStartRequest
(
nsIRequest
*
request
)
{
LOG
(
(
"
ParentProcessDocumentOpenInfo
OnDocumentStartRequest
[
this
=
%
p
]
"
this
)
)
;
nsresult
rv
=
nsDocumentOpenInfo
:
:
OnStartRequest
(
request
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
mUsedContentHandler
&
&
!
m_targetStreamListener
)
{
m_targetStreamListener
=
mListener
;
return
m_targetStreamListener
-
>
OnStartRequest
(
request
)
;
}
if
(
m_targetStreamListener
!
=
mListener
)
{
LOG
(
(
"
ParentProcessDocumentOpenInfo
targeted
to
non
-
default
listener
"
"
[
this
=
%
p
]
"
this
)
)
;
nsCOMPtr
<
nsIMultiPartChannel
>
multiPartChannel
=
do_QueryInterface
(
request
)
;
if
(
!
multiPartChannel
&
&
!
mCloned
)
{
DisconnectChildListeners
(
NS_FAILED
(
rv
)
?
rv
:
NS_BINDING_RETARGETED
rv
)
;
}
}
return
rv
;
}
nsresult
OnObjectStartRequest
(
nsIRequest
*
request
)
{
LOG
(
(
"
ParentProcessDocumentOpenInfo
OnObjectStartRequest
[
this
=
%
p
]
"
this
)
)
;
m_targetStreamListener
=
mListener
;
return
m_targetStreamListener
-
>
OnStartRequest
(
request
)
;
}
NS_IMETHOD
OnStartRequest
(
nsIRequest
*
request
)
override
{
LOG
(
(
"
ParentProcessDocumentOpenInfo
OnStartRequest
[
this
=
%
p
]
"
this
)
)
;
if
(
mIsDocumentLoad
)
{
return
OnDocumentStartRequest
(
request
)
;
}
return
OnObjectStartRequest
(
request
)
;
}
NS_IMETHOD
OnAfterLastPart
(
nsresult
aStatus
)
override
{
mListener
-
>
OnAfterLastPart
(
aStatus
)
;
return
NS_OK
;
}
private
:
virtual
~
ParentProcessDocumentOpenInfo
(
)
{
LOG
(
(
"
ParentProcessDocumentOpenInfo
dtor
[
this
=
%
p
]
"
this
)
)
;
}
void
DisconnectChildListeners
(
nsresult
aStatus
nsresult
aLoadGroupStatus
)
{
RefPtr
<
DocumentLoadListener
>
doc
=
do_GetInterface
(
ToSupports
(
mListener
)
)
;
MOZ_ASSERT
(
doc
)
;
doc
-
>
DisconnectListeners
(
aStatus
aLoadGroupStatus
)
;
mListener
-
>
SetListenerAfterRedirect
(
nullptr
)
;
}
RefPtr
<
mozilla
:
:
dom
:
:
BrowsingContext
>
mBrowsingContext
;
RefPtr
<
ParentChannelListener
>
mListener
;
const
bool
mIsDocumentLoad
;
bool
mCloned
=
false
;
}
;
NS_IMPL_ADDREF_INHERITED
(
ParentProcessDocumentOpenInfo
nsDocumentOpenInfo
)
NS_IMPL_RELEASE_INHERITED
(
ParentProcessDocumentOpenInfo
nsDocumentOpenInfo
)
NS_INTERFACE_MAP_BEGIN
(
ParentProcessDocumentOpenInfo
)
NS_INTERFACE_MAP_ENTRY
(
nsIMultiPartChannelListener
)
NS_INTERFACE_MAP_END_INHERITING
(
nsDocumentOpenInfo
)
NS_IMPL_ADDREF
(
DocumentLoadListener
)
NS_IMPL_RELEASE
(
DocumentLoadListener
)
NS_INTERFACE_MAP_BEGIN
(
DocumentLoadListener
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIInterfaceRequestor
)
NS_INTERFACE_MAP_ENTRY
(
nsIInterfaceRequestor
)
NS_INTERFACE_MAP_ENTRY
(
nsIRequestObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIStreamListener
)
NS_INTERFACE_MAP_ENTRY
(
nsIParentChannel
)
NS_INTERFACE_MAP_ENTRY
(
nsIAsyncVerifyRedirectReadyCallback
)
NS_INTERFACE_MAP_ENTRY
(
nsIChannelEventSink
)
NS_INTERFACE_MAP_ENTRY
(
nsIMultiPartChannelListener
)
NS_INTERFACE_MAP_ENTRY
(
nsIProgressEventSink
)
NS_INTERFACE_MAP_ENTRY_CONCRETE
(
DocumentLoadListener
)
NS_INTERFACE_MAP_END
DocumentLoadListener
:
:
DocumentLoadListener
(
CanonicalBrowsingContext
*
aLoadingBrowsingContext
bool
aIsDocumentLoad
)
:
mIsDocumentLoad
(
aIsDocumentLoad
)
{
LOG
(
(
"
DocumentLoadListener
ctor
[
this
=
%
p
]
"
this
)
)
;
mParentChannelListener
=
new
ParentChannelListener
(
this
aLoadingBrowsingContext
aLoadingBrowsingContext
-
>
UsePrivateBrowsing
(
)
)
;
}
DocumentLoadListener
:
:
~
DocumentLoadListener
(
)
{
LOG
(
(
"
DocumentLoadListener
dtor
[
this
=
%
p
]
"
this
)
)
;
}
void
DocumentLoadListener
:
:
AddURIVisit
(
nsIChannel
*
aChannel
uint32_t
aLoadFlags
)
{
if
(
mLoadStateLoadType
=
=
LOAD_ERROR_PAGE
|
|
mLoadStateLoadType
=
=
LOAD_BYPASS_HISTORY
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
uri
;
NS_GetFinalChannelURI
(
aChannel
getter_AddRefs
(
uri
)
)
;
nsCOMPtr
<
nsIURI
>
previousURI
;
uint32_t
previousFlags
=
0
;
if
(
mLoadStateLoadType
&
nsIDocShell
:
:
LOAD_CMD_RELOAD
)
{
previousURI
=
uri
;
}
else
{
nsDocShell
:
:
ExtractLastVisit
(
aChannel
getter_AddRefs
(
previousURI
)
&
previousFlags
)
;
}
uint32_t
responseStatus
=
0
;
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
httpChannel
)
{
Unused
<
<
httpChannel
-
>
GetResponseStatus
(
&
responseStatus
)
;
}
RefPtr
<
CanonicalBrowsingContext
>
browsingContext
=
GetDocumentBrowsingContext
(
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
browsingContext
-
>
GetParentProcessWidgetContaining
(
)
;
nsDocShell
:
:
InternalAddURIVisit
(
uri
previousURI
previousFlags
responseStatus
browsingContext
widget
mLoadStateLoadType
)
;
}
CanonicalBrowsingContext
*
DocumentLoadListener
:
:
GetLoadingBrowsingContext
(
)
const
{
return
mParentChannelListener
?
mParentChannelListener
-
>
GetBrowsingContext
(
)
:
nullptr
;
}
CanonicalBrowsingContext
*
DocumentLoadListener
:
:
GetDocumentBrowsingContext
(
)
const
{
return
mIsDocumentLoad
?
GetLoadingBrowsingContext
(
)
:
nullptr
;
}
CanonicalBrowsingContext
*
DocumentLoadListener
:
:
GetTopBrowsingContext
(
)
const
{
auto
*
loadingContext
=
GetLoadingBrowsingContext
(
)
;
return
loadingContext
?
loadingContext
-
>
Top
(
)
:
nullptr
;
}
auto
DocumentLoadListener
:
:
Open
(
nsDocShellLoadState
*
aLoadState
LoadInfo
*
aLoadInfo
nsLoadFlags
aLoadFlags
uint32_t
aCacheKey
const
Maybe
<
uint64_t
>
&
aChannelId
const
TimeStamp
&
aAsyncOpenTime
nsDOMNavigationTiming
*
aTiming
Maybe
<
ClientInfo
>
&
&
aInfo
bool
aHasGesture
bool
aUrgentStart
base
:
:
ProcessId
aPid
nsresult
*
aRv
)
-
>
RefPtr
<
OpenPromise
>
{
auto
*
loadingContext
=
GetLoadingBrowsingContext
(
)
;
MOZ_DIAGNOSTIC_ASSERT_IF
(
loadingContext
-
>
GetParent
(
)
loadingContext
-
>
GetParentWindowContext
(
)
)
;
OriginAttributes
attrs
;
loadingContext
-
>
GetOriginAttributes
(
attrs
)
;
mLoadIdentifier
=
aLoadState
-
>
GetLoadIdentifier
(
)
;
if
(
!
nsDocShell
:
:
CreateAndConfigureRealChannelForLoadState
(
loadingContext
aLoadState
aLoadInfo
mParentChannelListener
nullptr
attrs
aLoadFlags
aCacheKey
*
aRv
getter_AddRefs
(
mChannel
)
)
)
{
LOG
(
(
"
DocumentLoadListener
:
:
Open
failed
to
create
channel
[
this
=
%
p
]
"
this
)
)
;
mParentChannelListener
=
nullptr
;
return
nullptr
;
}
nsCOMPtr
<
nsIURI
>
uriBeingLoaded
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
mChannel
-
>
GetURI
(
getter_AddRefs
(
uriBeingLoaded
)
)
)
)
;
RefPtr
<
HttpBaseChannel
>
httpBaseChannel
=
do_QueryObject
(
mChannel
aRv
)
;
if
(
uriBeingLoaded
&
&
httpBaseChannel
)
{
nsCOMPtr
<
nsIURI
>
topWindowURI
;
if
(
loadingContext
-
>
IsTop
(
)
)
{
topWindowURI
=
uriBeingLoaded
;
}
else
if
(
RefPtr
<
WindowGlobalParent
>
topWindow
=
AntiTrackingUtils
:
:
GetTopWindowExcludingExtensionAccessibleContentFrames
(
loadingContext
uriBeingLoaded
)
)
{
nsCOMPtr
<
nsIPrincipal
>
topWindowPrincipal
=
topWindow
-
>
DocumentPrincipal
(
)
;
if
(
topWindowPrincipal
&
&
!
topWindowPrincipal
-
>
GetIsNullPrincipal
(
)
)
{
auto
*
basePrin
=
BasePrincipal
:
:
Cast
(
topWindowPrincipal
)
;
basePrin
-
>
GetURI
(
getter_AddRefs
(
topWindowURI
)
)
;
}
}
httpBaseChannel
-
>
SetTopWindowURI
(
topWindowURI
)
;
}
nsCOMPtr
<
nsIIdentChannel
>
identChannel
=
do_QueryInterface
(
mChannel
)
;
if
(
identChannel
&
&
aChannelId
)
{
Unused
<
<
identChannel
-
>
SetChannelId
(
*
aChannelId
)
;
}
RefPtr
<
nsHttpChannel
>
httpChannelImpl
=
do_QueryObject
(
mChannel
)
;
if
(
httpChannelImpl
)
{
httpChannelImpl
-
>
SetWarningReporter
(
this
)
;
}
nsCOMPtr
<
nsITimedChannel
>
timedChannel
=
do_QueryInterface
(
mChannel
)
;
if
(
timedChannel
)
{
timedChannel
-
>
SetAsyncOpen
(
aAsyncOpenTime
)
;
}
if
(
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
mChannel
)
)
{
Unused
<
<
httpChannel
-
>
SetRequestContextID
(
loadingContext
-
>
GetRequestContextId
(
)
)
;
nsCOMPtr
<
nsIClassOfService
>
cos
(
do_QueryInterface
(
httpChannel
)
)
;
if
(
cos
&
&
aUrgentStart
)
{
cos
-
>
AddClassFlags
(
nsIClassOfService
:
:
UrgentStart
)
;
}
}
nsCOMPtr
<
nsIViewSourceChannel
>
viewSourceChannel
;
if
(
aPid
&
&
(
viewSourceChannel
=
do_QueryInterface
(
mChannel
)
)
)
{
viewSourceChannel
-
>
SetReplaceRequest
(
false
)
;
}
AddClientChannelHelperInParent
(
mChannel
std
:
:
move
(
aInfo
)
)
;
auto
*
documentContext
=
GetDocumentBrowsingContext
(
)
;
if
(
documentContext
&
&
!
documentContext
-
>
StartDocumentLoad
(
this
)
)
{
LOG
(
(
"
DocumentLoadListener
:
:
Open
failed
StartDocumentLoad
[
this
=
%
p
]
"
this
)
)
;
*
aRv
=
NS_BINDING_ABORTED
;
mParentChannelListener
=
nullptr
;
mChannel
=
nullptr
;
return
nullptr
;
}
MOZ_ASSERT
(
!
aLoadState
-
>
GetPendingRedirectedChannel
(
)
)
;
uint32_t
openFlags
=
nsDocShell
:
:
ComputeURILoaderFlags
(
loadingContext
aLoadState
-
>
LoadType
(
)
)
;
RefPtr
<
ParentProcessDocumentOpenInfo
>
openInfo
=
new
ParentProcessDocumentOpenInfo
(
mParentChannelListener
openFlags
loadingContext
mIsDocumentLoad
)
;
openInfo
-
>
Prepare
(
)
;
#
ifdef
ANDROID
RefPtr
<
MozPromise
<
bool
bool
false
>
>
promise
;
if
(
documentContext
&
&
aLoadState
-
>
LoadType
(
)
!
=
LOAD_ERROR_PAGE
&
&
!
(
aLoadState
-
>
HasLoadFlags
(
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_BYPASS_LOAD_URI_DELEGATE
)
)
&
&
!
(
aLoadState
-
>
LoadType
(
)
&
LOAD_HISTORY
)
)
{
nsCOMPtr
<
nsIWidget
>
widget
=
documentContext
-
>
GetParentProcessWidgetContaining
(
)
;
RefPtr
<
nsWindow
>
window
=
nsWindow
:
:
From
(
widget
)
;
if
(
window
)
{
promise
=
window
-
>
OnLoadRequest
(
aLoadState
-
>
URI
(
)
nsIBrowserDOMWindow
:
:
OPEN_CURRENTWINDOW
aLoadState
-
>
LoadFlags
(
)
aLoadState
-
>
TriggeringPrincipal
(
)
aHasGesture
documentContext
-
>
IsTopContent
(
)
)
;
}
}
if
(
promise
)
{
RefPtr
<
DocumentLoadListener
>
self
=
this
;
promise
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
=
]
(
const
MozPromise
<
bool
bool
false
>
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsResolve
(
)
)
{
bool
handled
=
aValue
.
ResolveValue
(
)
;
if
(
handled
)
{
self
-
>
DisconnectListeners
(
NS_ERROR_ABORT
NS_ERROR_ABORT
)
;
mParentChannelListener
=
nullptr
;
}
else
{
nsresult
rv
=
mChannel
-
>
AsyncOpen
(
openInfo
)
;
if
(
NS_FAILED
(
rv
)
)
{
self
-
>
DisconnectListeners
(
rv
rv
)
;
mParentChannelListener
=
nullptr
;
}
}
}
}
)
;
}
else
#
endif
{
*
aRv
=
mChannel
-
>
AsyncOpen
(
openInfo
)
;
if
(
NS_FAILED
(
*
aRv
)
)
{
LOG
(
(
"
DocumentLoadListener
:
:
Open
failed
AsyncOpen
[
this
=
%
p
rv
=
%
"
PRIx32
"
]
"
this
static_cast
<
uint32_t
>
(
*
aRv
)
)
)
;
if
(
documentContext
)
{
documentContext
-
>
EndDocumentLoad
(
false
)
;
}
mParentChannelListener
=
nullptr
;
return
nullptr
;
}
}
mOtherPid
=
aPid
;
mChannelCreationURI
=
aLoadState
-
>
URI
(
)
;
mLoadStateLoadFlags
=
aLoadState
-
>
LoadFlags
(
)
;
mLoadStateLoadType
=
aLoadState
-
>
LoadType
(
)
;
mTiming
=
aTiming
;
mSrcdocData
=
aLoadState
-
>
SrcdocData
(
)
;
mBaseURI
=
aLoadState
-
>
BaseURI
(
)
;
mOriginalUriString
=
aLoadState
-
>
GetOriginalURIString
(
)
;
if
(
documentContext
&
&
StaticPrefs
:
:
fission_sessionHistoryInParent
(
)
)
{
mSessionHistoryInfo
=
documentContext
-
>
CreateSessionHistoryEntryForLoad
(
aLoadState
mChannel
)
;
}
*
aRv
=
NS_OK
;
mOpenPromise
=
new
OpenPromise
:
:
Private
(
__func__
)
;
mOpenPromise
-
>
UseDirectTaskDispatch
(
__func__
)
;
return
mOpenPromise
;
}
auto
DocumentLoadListener
:
:
OpenDocument
(
nsDocShellLoadState
*
aLoadState
uint32_t
aCacheKey
const
Maybe
<
uint64_t
>
&
aChannelId
const
TimeStamp
&
aAsyncOpenTime
nsDOMNavigationTiming
*
aTiming
Maybe
<
dom
:
:
ClientInfo
>
&
&
aInfo
bool
aHasGesture
Maybe
<
bool
>
aUriModified
Maybe
<
bool
>
aIsXFOError
base
:
:
ProcessId
aPid
nsresult
*
aRv
)
-
>
RefPtr
<
OpenPromise
>
{
LOG
(
(
"
DocumentLoadListener
[
%
p
]
OpenDocument
[
uri
=
%
s
]
"
this
aLoadState
-
>
URI
(
)
-
>
GetSpecOrDefault
(
)
.
get
(
)
)
)
;
MOZ_ASSERT
(
mIsDocumentLoad
)
;
RefPtr
<
CanonicalBrowsingContext
>
browsingContext
=
GetDocumentBrowsingContext
(
)
;
RefPtr
<
LoadInfo
>
loadInfo
=
CreateDocumentLoadInfo
(
browsingContext
aLoadState
)
;
nsLoadFlags
loadFlags
=
aLoadState
-
>
CalculateChannelLoadFlags
(
browsingContext
std
:
:
move
(
aUriModified
)
std
:
:
move
(
aIsXFOError
)
)
;
return
Open
(
aLoadState
loadInfo
loadFlags
aCacheKey
aChannelId
aAsyncOpenTime
aTiming
std
:
:
move
(
aInfo
)
aHasGesture
false
aPid
aRv
)
;
}
auto
DocumentLoadListener
:
:
OpenObject
(
nsDocShellLoadState
*
aLoadState
uint32_t
aCacheKey
const
Maybe
<
uint64_t
>
&
aChannelId
const
TimeStamp
&
aAsyncOpenTime
nsDOMNavigationTiming
*
aTiming
Maybe
<
dom
:
:
ClientInfo
>
&
&
aInfo
uint64_t
aInnerWindowId
nsLoadFlags
aLoadFlags
nsContentPolicyType
aContentPolicyType
bool
aHasGesture
bool
aUrgentStart
base
:
:
ProcessId
aPid
nsresult
*
aRv
)
-
>
RefPtr
<
OpenPromise
>
{
LOG
(
(
"
DocumentLoadListener
[
%
p
]
OpenObject
[
uri
=
%
s
]
"
this
aLoadState
-
>
URI
(
)
-
>
GetSpecOrDefault
(
)
.
get
(
)
)
)
;
MOZ_ASSERT
(
!
mIsDocumentLoad
)
;
auto
sandboxFlags
=
GetLoadingBrowsingContext
(
)
-
>
GetSandboxFlags
(
)
;
RefPtr
<
LoadInfo
>
loadInfo
=
CreateObjectLoadInfo
(
aLoadState
aInnerWindowId
aContentPolicyType
sandboxFlags
)
;
return
Open
(
aLoadState
loadInfo
aLoadFlags
aCacheKey
aChannelId
aAsyncOpenTime
aTiming
std
:
:
move
(
aInfo
)
aHasGesture
aUrgentStart
aPid
aRv
)
;
}
auto
DocumentLoadListener
:
:
OpenInParent
(
nsDocShellLoadState
*
aLoadState
bool
aSupportsRedirectToRealChannel
)
-
>
RefPtr
<
OpenPromise
>
{
auto
*
browsingContext
=
GetDocumentBrowsingContext
(
)
;
if
(
!
browsingContext
-
>
IsTopContent
(
)
|
|
!
browsingContext
-
>
GetContentParent
(
)
)
{
LOG
(
(
"
DocumentLoadListener
:
:
OpenInParent
failed
because
of
subdoc
"
)
)
;
return
nullptr
;
}
if
(
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
=
aLoadState
-
>
Csp
(
)
)
{
bool
allowsNavigateTo
=
false
;
nsresult
rv
=
csp
-
>
GetAllowsNavigateTo
(
aLoadState
-
>
URI
(
)
aLoadState
-
>
IsFormSubmission
(
)
false
false
&
allowsNavigateTo
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
allowsNavigateTo
)
{
return
nullptr
;
}
}
auto
loadType
=
aLoadState
-
>
LoadType
(
)
;
if
(
loadType
=
=
LOAD_HISTORY
|
|
loadType
=
=
LOAD_RELOAD_NORMAL
|
|
loadType
=
=
LOAD_RELOAD_CHARSET_CHANGE
|
|
loadType
=
=
LOAD_RELOAD_CHARSET_CHANGE_BYPASS_CACHE
|
|
loadType
=
=
LOAD_RELOAD_CHARSET_CHANGE_BYPASS_PROXY_AND_CACHE
)
{
LOG
(
(
"
DocumentLoadListener
:
:
OpenInParent
failed
because
of
history
"
"
load
"
)
)
;
return
nullptr
;
}
RefPtr
<
nsDocShellLoadState
>
loadState
=
new
nsDocShellLoadState
(
*
aLoadState
)
;
loadState
-
>
CalculateLoadURIFlags
(
)
;
RefPtr
<
nsDOMNavigationTiming
>
timing
=
new
nsDOMNavigationTiming
(
nullptr
)
;
timing
-
>
NotifyNavigationStart
(
browsingContext
-
>
GetIsActive
(
)
?
nsDOMNavigationTiming
:
:
DocShellState
:
:
eActive
:
nsDOMNavigationTiming
:
:
DocShellState
:
:
eInactive
)
;
uint32_t
cacheKey
=
0
;
Maybe
<
uint64_t
>
channelId
=
Nothing
(
)
;
Maybe
<
dom
:
:
ClientInfo
>
initialClientInfo
;
mSupportsRedirectToRealChannel
=
aSupportsRedirectToRealChannel
;
RefPtr
<
LoadInfo
>
loadInfo
=
CreateDocumentLoadInfo
(
browsingContext
aLoadState
)
;
nsLoadFlags
loadFlags
=
loadState
-
>
CalculateChannelLoadFlags
(
browsingContext
Nothing
(
)
Nothing
(
)
)
;
nsresult
rv
;
return
Open
(
loadState
loadInfo
loadFlags
cacheKey
channelId
TimeStamp
:
:
Now
(
)
timing
std
:
:
move
(
initialClientInfo
)
false
false
browsingContext
-
>
GetContentParent
(
)
-
>
OtherPid
(
)
&
rv
)
;
}
void
DocumentLoadListener
:
:
FireStateChange
(
uint32_t
aStateFlags
nsresult
aStatus
)
{
nsCOMPtr
<
nsIChannel
>
request
=
GetChannel
(
)
;
nsCOMPtr
<
nsIWebProgress
>
webProgress
=
new
RemoteWebProgress
(
GetLoadType
(
)
true
true
)
;
RefPtr
<
BrowsingContextWebProgress
>
loadingWebProgress
=
WebProgressForBrowsingContext
(
GetLoadingBrowsingContext
(
)
)
;
if
(
loadingWebProgress
)
{
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
DocumentLoadListener
:
:
FireStateChange
"
[
=
]
(
)
{
loadingWebProgress
-
>
OnStateChange
(
webProgress
request
aStateFlags
aStatus
)
;
}
)
)
;
}
}
static
void
SetNavigating
(
CanonicalBrowsingContext
*
aBrowsingContext
bool
aNavigating
)
{
nsCOMPtr
<
nsIBrowser
>
browser
;
if
(
RefPtr
<
Element
>
currentElement
=
aBrowsingContext
-
>
GetEmbedderElement
(
)
)
{
browser
=
currentElement
-
>
AsBrowser
(
)
;
}
if
(
!
browser
)
{
return
;
}
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
DocumentLoadListener
:
:
SetNavigating
"
[
browser
aNavigating
]
(
)
{
browser
-
>
SetIsNavigating
(
aNavigating
)
;
}
)
)
;
}
bool
DocumentLoadListener
:
:
LoadInParent
(
CanonicalBrowsingContext
*
aBrowsingContext
nsDocShellLoadState
*
aLoadState
bool
aSetNavigating
)
{
SetNavigating
(
aBrowsingContext
aSetNavigating
)
;
RefPtr
<
DocumentLoadListener
>
load
=
new
DocumentLoadListener
(
aBrowsingContext
true
)
;
RefPtr
<
DocumentLoadListener
:
:
OpenPromise
>
promise
=
load
-
>
OpenInParent
(
aLoadState
false
)
;
if
(
!
promise
)
{
SetNavigating
(
aBrowsingContext
false
)
;
return
false
;
}
promise
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
load
]
(
DocumentLoadListener
:
:
OpenPromise
:
:
ResolveOrRejectValue
&
&
aValue
)
{
MOZ_ASSERT
(
aValue
.
IsReject
(
)
)
;
DocumentLoadListener
:
:
OpenPromiseFailedType
&
rejectValue
=
aValue
.
RejectValue
(
)
;
if
(
!
rejectValue
.
mSwitchedProcess
)
{
load
-
>
FireStateChange
(
nsIWebProgressListener
:
:
STATE_STOP
|
nsIWebProgressListener
:
:
STATE_IS_WINDOW
|
nsIWebProgressListener
:
:
STATE_IS_NETWORK
rejectValue
.
mStatus
)
;
}
}
)
;
load
-
>
FireStateChange
(
nsIWebProgressListener
:
:
STATE_START
|
nsIWebProgressListener
:
:
STATE_IS_DOCUMENT
|
nsIWebProgressListener
:
:
STATE_IS_REQUEST
|
nsIWebProgressListener
:
:
STATE_IS_WINDOW
|
nsIWebProgressListener
:
:
STATE_IS_NETWORK
NS_OK
)
;
SetNavigating
(
aBrowsingContext
false
)
;
return
true
;
}
bool
DocumentLoadListener
:
:
SpeculativeLoadInParent
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsDocShellLoadState
*
aLoadState
)
{
LOG
(
(
"
DocumentLoadListener
:
:
OpenFromParent
"
)
)
;
RefPtr
<
DocumentLoadListener
>
listener
=
new
DocumentLoadListener
(
aBrowsingContext
true
)
;
auto
promise
=
listener
-
>
OpenInParent
(
aLoadState
true
)
;
if
(
promise
)
{
nsCOMPtr
<
nsIRedirectChannelRegistrar
>
registrar
=
RedirectChannelRegistrar
:
:
GetOrCreate
(
)
;
uint64_t
loadIdentifier
=
aLoadState
-
>
GetLoadIdentifier
(
)
;
DebugOnly
<
nsresult
>
rv
=
registrar
-
>
RegisterChannel
(
nullptr
loadIdentifier
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
registrar
-
>
LinkChannels
(
loadIdentifier
listener
nullptr
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
return
!
!
promise
;
}
void
DocumentLoadListener
:
:
CleanupParentLoadAttempt
(
uint64_t
aLoadIdent
)
{
nsCOMPtr
<
nsIRedirectChannelRegistrar
>
registrar
=
RedirectChannelRegistrar
:
:
GetOrCreate
(
)
;
nsCOMPtr
<
nsIParentChannel
>
parentChannel
;
registrar
-
>
GetParentChannel
(
aLoadIdent
getter_AddRefs
(
parentChannel
)
)
;
RefPtr
<
DocumentLoadListener
>
loadListener
=
do_QueryObject
(
parentChannel
)
;
if
(
loadListener
)
{
loadListener
-
>
NotifyDocumentChannelFailed
(
)
;
}
registrar
-
>
DeregisterChannels
(
aLoadIdent
)
;
}
auto
DocumentLoadListener
:
:
ClaimParentLoad
(
DocumentLoadListener
*
*
aListener
uint64_t
aLoadIdent
)
-
>
RefPtr
<
OpenPromise
>
{
nsCOMPtr
<
nsIRedirectChannelRegistrar
>
registrar
=
RedirectChannelRegistrar
:
:
GetOrCreate
(
)
;
nsCOMPtr
<
nsIParentChannel
>
parentChannel
;
registrar
-
>
GetParentChannel
(
aLoadIdent
getter_AddRefs
(
parentChannel
)
)
;
RefPtr
<
DocumentLoadListener
>
loadListener
=
do_QueryObject
(
parentChannel
)
;
registrar
-
>
DeregisterChannels
(
aLoadIdent
)
;
MOZ_ASSERT
(
loadListener
&
&
loadListener
-
>
mOpenPromise
)
;
loadListener
.
forget
(
aListener
)
;
return
(
*
aListener
)
-
>
mOpenPromise
;
}
void
DocumentLoadListener
:
:
NotifyDocumentChannelFailed
(
)
{
LOG
(
(
"
DocumentLoadListener
NotifyDocumentChannelFailed
[
this
=
%
p
]
"
this
)
)
;
mOpenPromise
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
]
(
DocumentLoadListener
:
:
OpenPromiseSucceededType
&
&
aResolveValue
)
{
aResolveValue
.
mPromise
-
>
Resolve
(
NS_BINDING_ABORTED
__func__
)
;
}
[
]
(
)
{
}
)
;
Cancel
(
NS_BINDING_ABORTED
)
;
}
void
DocumentLoadListener
:
:
Disconnect
(
)
{
LOG
(
(
"
DocumentLoadListener
Disconnect
[
this
=
%
p
]
"
this
)
)
;
RefPtr
<
nsHttpChannel
>
httpChannelImpl
=
do_QueryObject
(
mChannel
)
;
if
(
httpChannelImpl
)
{
httpChannelImpl
-
>
SetWarningReporter
(
nullptr
)
;
}
if
(
auto
*
ctx
=
GetDocumentBrowsingContext
(
)
)
{
ctx
-
>
EndDocumentLoad
(
mDoingProcessSwitch
)
;
}
}
void
DocumentLoadListener
:
:
Cancel
(
const
nsresult
&
aStatusCode
)
{
LOG
(
(
"
DocumentLoadListener
Cancel
[
this
=
%
p
"
"
aStatusCode
=
%
"
PRIx32
"
]
"
this
static_cast
<
uint32_t
>
(
aStatusCode
)
)
)
;
if
(
mOpenPromiseResolved
)
{
return
;
}
if
(
mChannel
)
{
mChannel
-
>
Cancel
(
aStatusCode
)
;
}
DisconnectListeners
(
aStatusCode
aStatusCode
)
;
}
void
DocumentLoadListener
:
:
DisconnectListeners
(
nsresult
aStatus
nsresult
aLoadGroupStatus
bool
aSwitchedProcess
)
{
LOG
(
(
"
DocumentLoadListener
DisconnectListener
[
this
=
%
p
"
"
aStatus
=
%
"
PRIx32
"
aLoadGroupStatus
=
%
"
PRIx32
"
]
"
this
static_cast
<
uint32_t
>
(
aStatus
)
static_cast
<
uint32_t
>
(
aLoadGroupStatus
)
)
)
;
RejectOpenPromise
(
aStatus
aLoadGroupStatus
aSwitchedProcess
__func__
)
;
Disconnect
(
)
;
if
(
!
aSwitchedProcess
)
{
mStreamFilterRequests
.
Clear
(
)
;
}
}
void
DocumentLoadListener
:
:
RedirectToRealChannelFinished
(
nsresult
aRv
)
{
LOG
(
(
"
DocumentLoadListener
RedirectToRealChannelFinished
[
this
=
%
p
"
"
aRv
=
%
"
PRIx32
"
]
"
this
static_cast
<
uint32_t
>
(
aRv
)
)
)
;
if
(
NS_FAILED
(
aRv
)
)
{
FinishReplacementChannelSetup
(
aRv
)
;
return
;
}
nsCOMPtr
<
nsIRedirectChannelRegistrar
>
redirectReg
=
RedirectChannelRegistrar
:
:
GetOrCreate
(
)
;
MOZ_ASSERT
(
redirectReg
)
;
nsCOMPtr
<
nsIParentChannel
>
redirectParentChannel
;
redirectReg
-
>
GetParentChannel
(
mRedirectChannelId
getter_AddRefs
(
redirectParentChannel
)
)
;
if
(
!
redirectParentChannel
)
{
FinishReplacementChannelSetup
(
NS_ERROR_FAILURE
)
;
return
;
}
nsCOMPtr
<
nsIParentRedirectingChannel
>
redirectingParent
=
do_QueryInterface
(
redirectParentChannel
)
;
if
(
!
redirectingParent
)
{
FinishReplacementChannelSetup
(
NS_OK
)
;
return
;
}
redirectingParent
-
>
ContinueVerification
(
this
)
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
ReadyToVerify
(
nsresult
aResultCode
)
{
FinishReplacementChannelSetup
(
aResultCode
)
;
return
NS_OK
;
}
void
DocumentLoadListener
:
:
FinishReplacementChannelSetup
(
nsresult
aResult
)
{
LOG
(
(
"
DocumentLoadListener
FinishReplacementChannelSetup
[
this
=
%
p
"
"
aResult
=
%
x
]
"
this
int
(
aResult
)
)
)
;
auto
endDocumentLoad
=
MakeScopeExit
(
[
&
]
(
)
{
if
(
auto
*
ctx
=
GetDocumentBrowsingContext
(
)
)
{
ctx
-
>
EndDocumentLoad
(
false
)
;
}
}
)
;
mStreamFilterRequests
.
Clear
(
)
;
nsCOMPtr
<
nsIRedirectChannelRegistrar
>
registrar
=
RedirectChannelRegistrar
:
:
GetOrCreate
(
)
;
MOZ_ASSERT
(
registrar
)
;
nsCOMPtr
<
nsIParentChannel
>
redirectChannel
;
nsresult
rv
=
registrar
-
>
GetParentChannel
(
mRedirectChannelId
getter_AddRefs
(
redirectChannel
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
redirectChannel
)
{
aResult
=
NS_ERROR_FAILURE
;
}
registrar
-
>
DeregisterChannels
(
mRedirectChannelId
)
;
mRedirectChannelId
=
0
;
if
(
NS_FAILED
(
aResult
)
)
{
if
(
redirectChannel
)
{
redirectChannel
-
>
Delete
(
)
;
}
mChannel
-
>
Cancel
(
aResult
)
;
mChannel
-
>
Resume
(
)
;
return
;
}
MOZ_ASSERT
(
!
SameCOMIdentity
(
redirectChannel
static_cast
<
nsIParentChannel
*
>
(
this
)
)
)
;
redirectChannel
-
>
SetParentListener
(
mParentChannelListener
)
;
ApplyPendingFunctions
(
redirectChannel
)
;
if
(
!
ResumeSuspendedChannel
(
redirectChannel
)
)
{
nsCOMPtr
<
nsILoadGroup
>
loadGroup
;
mChannel
-
>
GetLoadGroup
(
getter_AddRefs
(
loadGroup
)
)
;
if
(
loadGroup
)
{
nsresult
status
=
NS_OK
;
mChannel
-
>
GetStatus
(
&
status
)
;
loadGroup
-
>
RemoveRequest
(
mChannel
nullptr
status
)
;
}
}
}
void
DocumentLoadListener
:
:
ApplyPendingFunctions
(
nsIParentChannel
*
aChannel
)
const
{
nsCOMPtr
<
nsIParentChannel
>
parentChannel
=
aChannel
;
for
(
const
auto
&
variant
:
mIParentChannelFunctions
)
{
variant
.
match
(
[
parentChannel
]
(
const
nsIHttpChannel
:
:
FlashPluginState
&
aState
)
{
parentChannel
-
>
NotifyFlashPluginStateChanged
(
aState
)
;
}
[
parentChannel
]
(
const
ClassifierMatchedInfoParams
&
aParams
)
{
parentChannel
-
>
SetClassifierMatchedInfo
(
aParams
.
mList
aParams
.
mProvider
aParams
.
mFullHash
)
;
}
[
parentChannel
]
(
const
ClassifierMatchedTrackingInfoParams
&
aParams
)
{
parentChannel
-
>
SetClassifierMatchedTrackingInfo
(
aParams
.
mLists
aParams
.
mFullHashes
)
;
}
[
parentChannel
]
(
const
ClassificationFlagsParams
&
aParams
)
{
parentChannel
-
>
NotifyClassificationFlags
(
aParams
.
mClassificationFlags
aParams
.
mIsThirdParty
)
;
}
)
;
}
RefPtr
<
HttpChannelSecurityWarningReporter
>
reporter
;
if
(
RefPtr
<
HttpChannelParent
>
httpParent
=
do_QueryObject
(
aChannel
)
)
{
reporter
=
httpParent
;
}
else
if
(
RefPtr
<
nsHttpChannel
>
httpChannel
=
do_QueryObject
(
aChannel
)
)
{
reporter
=
httpChannel
-
>
GetWarningReporter
(
)
;
}
if
(
reporter
)
{
for
(
const
auto
&
variant
:
mSecurityWarningFunctions
)
{
variant
.
match
(
[
reporter
]
(
const
ReportSecurityMessageParams
&
aParams
)
{
Unused
<
<
reporter
-
>
ReportSecurityMessage
(
aParams
.
mMessageTag
aParams
.
mMessageCategory
)
;
}
[
reporter
]
(
const
LogBlockedCORSRequestParams
&
aParams
)
{
Unused
<
<
reporter
-
>
LogBlockedCORSRequest
(
aParams
.
mMessage
aParams
.
mCategory
)
;
}
[
reporter
]
(
const
LogMimeTypeMismatchParams
&
aParams
)
{
Unused
<
<
reporter
-
>
LogMimeTypeMismatch
(
aParams
.
mMessageName
aParams
.
mWarning
aParams
.
mURL
aParams
.
mContentType
)
;
}
)
;
}
}
}
bool
DocumentLoadListener
:
:
ResumeSuspendedChannel
(
nsIStreamListener
*
aListener
)
{
LOG
(
(
"
DocumentLoadListener
ResumeSuspendedChannel
[
this
=
%
p
]
"
this
)
)
;
RefPtr
<
nsHttpChannel
>
httpChannel
=
do_QueryObject
(
mChannel
)
;
if
(
httpChannel
)
{
httpChannel
-
>
SetApplyConversion
(
mOldApplyConversion
)
;
}
if
(
!
mIsFinished
)
{
mParentChannelListener
-
>
SetListenerAfterRedirect
(
aListener
)
;
}
nsTArray
<
StreamListenerFunction
>
streamListenerFunctions
=
std
:
:
move
(
mStreamListenerFunctions
)
;
if
(
!
aListener
)
{
streamListenerFunctions
.
Clear
(
)
;
}
nsresult
rv
=
NS_OK
;
for
(
auto
&
variant
:
streamListenerFunctions
)
{
variant
.
match
(
[
&
]
(
const
OnStartRequestParams
&
aParams
)
{
rv
=
aListener
-
>
OnStartRequest
(
aParams
.
request
)
;
if
(
NS_FAILED
(
rv
)
)
{
aParams
.
request
-
>
Cancel
(
rv
)
;
}
}
[
&
]
(
const
OnDataAvailableParams
&
aParams
)
{
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
nsCOMPtr
<
nsIInputStream
>
stringStream
;
rv
=
NS_NewByteInputStream
(
getter_AddRefs
(
stringStream
)
Span
<
const
char
>
(
aParams
.
data
.
get
(
)
aParams
.
count
)
NS_ASSIGNMENT_DEPEND
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
aListener
-
>
OnDataAvailable
(
aParams
.
request
stringStream
aParams
.
offset
aParams
.
count
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
aParams
.
request
-
>
Cancel
(
rv
)
;
}
}
[
&
]
(
const
OnStopRequestParams
&
aParams
)
{
if
(
NS_SUCCEEDED
(
rv
)
)
{
aListener
-
>
OnStopRequest
(
aParams
.
request
aParams
.
status
)
;
}
else
{
aListener
-
>
OnStopRequest
(
aParams
.
request
rv
)
;
}
rv
=
NS_OK
;
}
[
&
]
(
const
OnAfterLastPartParams
&
aParams
)
{
nsCOMPtr
<
nsIMultiPartChannelListener
>
multiListener
=
do_QueryInterface
(
aListener
)
;
if
(
multiListener
)
{
if
(
NS_SUCCEEDED
(
rv
)
)
{
multiListener
-
>
OnAfterLastPart
(
aParams
.
status
)
;
}
else
{
multiListener
-
>
OnAfterLastPart
(
rv
)
;
}
}
}
)
;
}
NS_ASSERTION
(
mStreamListenerFunctions
.
IsEmpty
(
)
"
Should
not
have
added
new
stream
listener
function
!
"
)
;
mChannel
-
>
Resume
(
)
;
if
(
auto
*
ctx
=
GetDocumentBrowsingContext
(
)
)
{
ctx
-
>
EndDocumentLoad
(
mDoingProcessSwitch
)
;
}
return
!
mIsFinished
;
}
void
DocumentLoadListener
:
:
SerializeRedirectData
(
RedirectToRealChannelArgs
&
aArgs
bool
aIsCrossProcess
uint32_t
aRedirectFlags
uint32_t
aLoadFlags
ContentParent
*
aParent
)
const
{
aArgs
.
uri
(
)
=
mChannelCreationURI
;
if
(
!
aArgs
.
uri
(
)
)
{
mChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
aArgs
.
uri
(
)
)
)
;
}
aArgs
.
loadIdentifier
(
)
=
mLoadIdentifier
;
nsCOMPtr
<
nsILoadInfo
>
channelLoadInfo
;
mChannel
-
>
GetLoadInfo
(
getter_AddRefs
(
channelLoadInfo
)
)
;
nsCOMPtr
<
nsIPrincipal
>
principalToInherit
;
channelLoadInfo
-
>
GetPrincipalToInherit
(
getter_AddRefs
(
principalToInherit
)
)
;
const
RefPtr
<
nsHttpChannel
>
baseChannel
=
do_QueryObject
(
mChannel
)
;
nsCOMPtr
<
nsILoadContext
>
loadContext
;
NS_QueryNotificationCallbacks
(
mChannel
loadContext
)
;
nsCOMPtr
<
nsILoadInfo
>
redirectLoadInfo
;
if
(
baseChannel
&
&
loadContext
)
{
redirectLoadInfo
=
baseChannel
-
>
CloneLoadInfoForRedirect
(
aArgs
.
uri
(
)
nsIChannelEventSink
:
:
REDIRECT_INTERNAL
)
;
redirectLoadInfo
-
>
SetResultPrincipalURI
(
aArgs
.
uri
(
)
)
;
if
(
principalToInherit
)
{
redirectLoadInfo
-
>
SetPrincipalToInherit
(
principalToInherit
)
;
}
}
else
{
redirectLoadInfo
=
static_cast
<
mozilla
:
:
net
:
:
LoadInfo
*
>
(
channelLoadInfo
.
get
(
)
)
-
>
Clone
(
)
;
nsCOMPtr
<
nsIPrincipal
>
uriPrincipal
;
nsIScriptSecurityManager
*
sm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
sm
-
>
GetChannelURIPrincipal
(
mChannel
getter_AddRefs
(
uriPrincipal
)
)
;
nsCOMPtr
<
nsIRedirectHistoryEntry
>
entry
=
new
nsRedirectHistoryEntry
(
uriPrincipal
nullptr
EmptyCString
(
)
)
;
redirectLoadInfo
-
>
AppendRedirectHistoryEntry
(
entry
true
)
;
}
const
Maybe
<
ClientInfo
>
&
reservedClientInfo
=
channelLoadInfo
-
>
GetReservedClientInfo
(
)
;
if
(
reservedClientInfo
)
{
redirectLoadInfo
-
>
SetReservedClientInfo
(
*
reservedClientInfo
)
;
}
aArgs
.
registrarId
(
)
=
mRedirectChannelId
;
MOZ_ALWAYS_SUCCEEDS
(
ipc
:
:
LoadInfoToLoadInfoArgs
(
redirectLoadInfo
&
aArgs
.
loadInfo
(
)
)
)
;
mChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
aArgs
.
originalURI
(
)
)
)
;
if
(
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
mChannel
)
)
{
MOZ_ALWAYS_SUCCEEDS
(
httpChannel
-
>
GetChannelId
(
&
aArgs
.
channelId
(
)
)
)
;
}
aArgs
.
redirectMode
(
)
=
nsIHttpChannelInternal
:
:
REDIRECT_MODE_FOLLOW
;
nsCOMPtr
<
nsIHttpChannelInternal
>
httpChannelInternal
=
do_QueryInterface
(
mChannel
)
;
if
(
httpChannelInternal
)
{
MOZ_ALWAYS_SUCCEEDS
(
httpChannelInternal
-
>
GetRedirectMode
(
&
aArgs
.
redirectMode
(
)
)
)
;
}
if
(
baseChannel
)
{
aArgs
.
init
(
)
=
Some
(
baseChannel
-
>
CloneReplacementChannelConfig
(
true
aRedirectFlags
HttpBaseChannel
:
:
ReplacementReason
:
:
DocumentChannel
)
.
Serialize
(
aParent
)
)
;
}
uint32_t
contentDispositionTemp
;
nsresult
rv
=
mChannel
-
>
GetContentDisposition
(
&
contentDispositionTemp
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
aArgs
.
contentDisposition
(
)
=
Some
(
contentDispositionTemp
)
;
}
nsString
contentDispositionFilenameTemp
;
rv
=
mChannel
-
>
GetContentDispositionFilename
(
contentDispositionFilenameTemp
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
aArgs
.
contentDispositionFilename
(
)
=
Some
(
contentDispositionFilenameTemp
)
;
}
SetNeedToAddURIVisit
(
mChannel
false
)
;
aArgs
.
newLoadFlags
(
)
=
aLoadFlags
;
aArgs
.
redirectFlags
(
)
=
aRedirectFlags
;
aArgs
.
properties
(
)
=
do_QueryObject
(
mChannel
)
;
aArgs
.
srcdocData
(
)
=
mSrcdocData
;
aArgs
.
baseUri
(
)
=
mBaseURI
;
aArgs
.
loadStateLoadFlags
(
)
=
mLoadStateLoadFlags
;
aArgs
.
loadStateLoadType
(
)
=
mLoadStateLoadType
;
aArgs
.
originalUriString
(
)
=
mOriginalUriString
;
if
(
mSessionHistoryInfo
)
{
aArgs
.
sessionHistoryInfo
(
)
.
emplace
(
*
mSessionHistoryInfo
)
;
}
}
static
bool
IsLargeAllocationLoad
(
CanonicalBrowsingContext
*
aBrowsingContext
nsIChannel
*
aChannel
)
{
if
(
!
StaticPrefs
:
:
dom_largeAllocationHeader_enabled
(
)
|
|
aBrowsingContext
-
>
UseRemoteSubframes
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
!
httpChannel
)
{
return
false
;
}
nsAutoCString
ignoredHeaderValue
;
nsresult
rv
=
httpChannel
-
>
GetResponseHeader
(
"
Large
-
Allocation
"
_ns
ignoredHeaderValue
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
#
if
defined
(
XP_WIN
)
&
&
defined
(
_X86_
)
return
true
;
#
else
return
StaticPrefs
:
:
dom_largeAllocation_forceEnable
(
)
;
#
endif
}
static
bool
ContextCanProcessSwitch
(
CanonicalBrowsingContext
*
aBrowsingContext
)
{
if
(
NS_WARN_IF
(
!
aBrowsingContext
)
)
{
LOG
(
(
"
Process
Switch
Abort
:
no
browsing
context
"
)
)
;
return
false
;
}
if
(
!
aBrowsingContext
-
>
IsContent
(
)
)
{
LOG
(
(
"
Process
Switch
Abort
:
non
-
content
browsing
context
"
)
)
;
return
false
;
}
if
(
aBrowsingContext
-
>
GetParent
(
)
&
&
!
aBrowsingContext
-
>
UseRemoteSubframes
(
)
)
{
LOG
(
(
"
Process
Switch
Abort
:
remote
subframes
disabled
"
)
)
;
return
false
;
}
if
(
aBrowsingContext
-
>
GetParentWindowContext
(
)
&
&
aBrowsingContext
-
>
GetParentWindowContext
(
)
-
>
IsInProcess
(
)
)
{
LOG
(
(
"
Process
Switch
Abort
:
Subframe
with
in
-
process
parent
"
)
)
;
return
false
;
}
Element
*
browserElement
=
aBrowsingContext
-
>
Top
(
)
-
>
GetEmbedderElement
(
)
;
if
(
!
browserElement
)
{
LOG
(
(
"
Process
Switch
Abort
:
cannot
get
embedder
element
"
)
)
;
return
false
;
}
nsCOMPtr
<
nsIBrowser
>
browser
=
browserElement
-
>
AsBrowser
(
)
;
if
(
!
browser
)
{
LOG
(
(
"
Process
Switch
Abort
:
not
loaded
within
nsIBrowser
"
)
)
;
return
false
;
}
nsIBrowser
:
:
ProcessBehavior
processBehavior
=
nsIBrowser
:
:
PROCESS_BEHAVIOR_DISABLED
;
nsresult
rv
=
browser
-
>
GetProcessSwitchBehavior
(
&
processBehavior
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
nsIBrowser
:
:
GetProcessSwitchBehavior
shouldn
'
t
fail
"
)
;
LOG
(
(
"
Process
Switch
Abort
:
failed
to
get
process
switch
behavior
"
)
)
;
return
false
;
}
if
(
processBehavior
=
=
nsIBrowser
:
:
PROCESS_BEHAVIOR_DISABLED
)
{
LOG
(
(
"
Process
Switch
Abort
:
switch
disabled
by
<
browser
>
"
)
)
;
return
false
;
}
if
(
aBrowsingContext
-
>
IsTop
(
)
&
&
processBehavior
=
=
nsIBrowser
:
:
PROCESS_BEHAVIOR_SUBFRAME_ONLY
)
{
LOG
(
(
"
Process
Switch
Abort
:
toplevel
switch
disabled
by
<
browser
>
"
)
)
;
return
false
;
}
return
true
;
}
bool
DocumentLoadListener
:
:
MaybeTriggerProcessSwitch
(
bool
*
aWillSwitchToRemote
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mDoingProcessSwitch
"
Already
in
the
middle
of
switching
?
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mChannel
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mParentChannelListener
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aWillSwitchToRemote
)
;
LOG
(
(
"
DocumentLoadListener
MaybeTriggerProcessSwitch
[
this
=
%
p
]
"
this
)
)
;
if
(
!
mIsDocumentLoad
)
{
LOG
(
(
"
Process
Switch
Abort
:
non
-
document
load
"
)
)
;
return
false
;
}
RefPtr
<
CanonicalBrowsingContext
>
browsingContext
=
mParentChannelListener
-
>
GetBrowsingContext
(
)
;
if
(
!
ContextCanProcessSwitch
(
browsingContext
)
)
{
return
false
;
}
nsCOMPtr
<
nsIPrincipal
>
resultPrincipal
;
nsresult
rv
=
nsContentUtils
:
:
GetSecurityManager
(
)
-
>
GetChannelResultPrincipal
(
mChannel
getter_AddRefs
(
resultPrincipal
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
LOG
(
(
"
Process
Switch
Abort
:
failed
to
get
channel
result
principal
"
)
)
;
return
false
;
}
nsAutoCString
currentRemoteType
(
NOT_REMOTE_TYPE
)
;
if
(
RefPtr
<
ContentParent
>
contentParent
=
browsingContext
-
>
GetContentParent
(
)
)
{
currentRemoteType
=
contentParent
-
>
GetRemoteType
(
)
;
}
MOZ_ASSERT_IF
(
currentRemoteType
.
IsEmpty
(
)
!
OtherPid
(
)
)
;
nsAutoCString
preferredRemoteType
(
currentRemoteType
)
;
bool
replaceBrowsingContext
=
false
;
uint64_t
specificGroupId
=
0
;
{
Element
*
browserElement
=
browsingContext
-
>
Top
(
)
-
>
GetEmbedderElement
(
)
;
nsAutoString
isPreloadBrowserStr
;
if
(
browserElement
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
preloadedState
isPreloadBrowserStr
)
&
&
isPreloadBrowserStr
.
EqualsLiteral
(
"
consumed
"
)
)
{
nsCOMPtr
<
nsIURI
>
originalURI
;
if
(
NS_SUCCEEDED
(
mChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
originalURI
)
)
)
&
&
!
originalURI
-
>
GetSpecOrDefault
(
)
.
EqualsLiteral
(
"
about
:
newtab
"
)
)
{
LOG
(
(
"
Process
Switch
:
leaving
preloaded
browser
"
)
)
;
replaceBrowsingContext
=
true
;
browserElement
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
preloadedState
true
)
;
}
}
}
{
bool
isCOOPSwitch
=
HasCrossOriginOpenerPolicyMismatch
(
)
;
replaceBrowsingContext
|
=
isCOOPSwitch
;
nsILoadInfo
:
:
CrossOriginOpenerPolicy
coop
=
nsILoadInfo
:
:
OPENER_POLICY_UNSAFE_NONE
;
if
(
!
browsingContext
-
>
IsTop
(
)
)
{
coop
=
browsingContext
-
>
Top
(
)
-
>
GetOpenerPolicy
(
)
;
}
else
if
(
nsCOMPtr
<
nsIHttpChannelInternal
>
httpChannel
=
do_QueryInterface
(
mChannel
)
)
{
MOZ_ALWAYS_SUCCEEDS
(
httpChannel
-
>
GetCrossOriginOpenerPolicy
(
&
coop
)
)
;
}
if
(
coop
=
=
nsILoadInfo
:
:
OPENER_POLICY_SAME_ORIGIN_EMBEDDER_POLICY_REQUIRE_CORP
)
{
nsAutoCString
siteOrigin
;
resultPrincipal
-
>
GetSiteOrigin
(
siteOrigin
)
;
preferredRemoteType
=
WITH_COOP_COEP_REMOTE_TYPE_PREFIX
;
preferredRemoteType
.
Append
(
siteOrigin
)
;
}
else
if
(
isCOOPSwitch
)
{
preferredRemoteType
=
DEFAULT_REMOTE_TYPE
;
}
}
if
(
browsingContext
-
>
IsTop
(
)
&
&
browsingContext
-
>
Group
(
)
-
>
Toplevels
(
)
.
Length
(
)
=
=
1
)
{
if
(
IsLargeAllocationLoad
(
browsingContext
mChannel
)
)
{
preferredRemoteType
=
LARGE_ALLOCATION_REMOTE_TYPE
;
replaceBrowsingContext
=
true
;
}
else
if
(
preferredRemoteType
=
=
LARGE_ALLOCATION_REMOTE_TYPE
)
{
preferredRemoteType
=
DEFAULT_REMOTE_TYPE
;
replaceBrowsingContext
=
true
;
}
}
if
(
auto
*
addonPolicy
=
BasePrincipal
:
:
Cast
(
resultPrincipal
)
-
>
AddonPolicy
(
)
)
{
if
(
browsingContext
-
>
IsTop
(
)
)
{
if
(
ExtensionPolicyService
:
:
GetSingleton
(
)
.
UseRemoteExtensions
(
)
)
{
preferredRemoteType
=
EXTENSION_REMOTE_TYPE
;
}
else
{
preferredRemoteType
=
NOT_REMOTE_TYPE
;
}
if
(
browsingContext
-
>
Group
(
)
-
>
Id
(
)
!
=
addonPolicy
-
>
GetBrowsingContextGroupId
(
)
)
{
replaceBrowsingContext
=
true
;
specificGroupId
=
addonPolicy
-
>
GetBrowsingContextGroupId
(
)
;
}
}
else
{
preferredRemoteType
=
browsingContext
-
>
GetParentWindowContext
(
)
-
>
GetRemoteType
(
)
;
}
}
LOG
(
(
"
DocumentLoadListener
GetRemoteTypeForPrincipal
"
"
[
this
=
%
p
contentParent
=
%
s
preferredRemoteType
=
%
s
]
"
this
currentRemoteType
.
get
(
)
preferredRemoteType
.
get
(
)
)
)
;
nsCOMPtr
<
nsIE10SUtils
>
e10sUtils
=
do_ImportModule
(
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
"
E10SUtils
"
)
;
if
(
!
e10sUtils
)
{
LOG
(
(
"
Process
Switch
Abort
:
Could
not
import
E10SUtils
"
)
)
;
return
false
;
}
nsCOMPtr
<
nsIPrincipal
>
currentPrincipal
;
RefPtr
<
WindowGlobalParent
>
wgp
=
browsingContext
-
>
GetCurrentWindowGlobal
(
)
;
if
(
wgp
)
{
currentPrincipal
=
wgp
-
>
DocumentPrincipal
(
)
;
}
nsAutoCString
remoteType
;
rv
=
e10sUtils
-
>
GetRemoteTypeForPrincipal
(
resultPrincipal
mChannelCreationURI
browsingContext
-
>
UseRemoteTabs
(
)
browsingContext
-
>
UseRemoteSubframes
(
)
preferredRemoteType
currentPrincipal
browsingContext
-
>
GetParent
(
)
remoteType
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
LOG
(
(
"
Process
Switch
Abort
:
getRemoteTypeForPrincipal
threw
an
exception
"
)
)
;
return
false
;
}
if
(
browsingContext
-
>
IsTop
(
)
&
&
currentRemoteType
!
=
remoteType
&
&
currentRemoteType
=
=
EXTENSION_REMOTE_TYPE
)
{
replaceBrowsingContext
=
true
;
}
LOG
(
(
"
GetRemoteTypeForPrincipal
-
>
current
:
%
s
remoteType
:
%
s
"
currentRemoteType
.
get
(
)
remoteType
.
get
(
)
)
)
;
if
(
currentRemoteType
=
=
remoteType
&
&
!
replaceBrowsingContext
)
{
LOG
(
(
"
Process
Switch
Abort
:
type
(
%
s
)
is
compatible
"
remoteType
.
get
(
)
)
)
;
return
false
;
}
if
(
NS_WARN_IF
(
!
browsingContext
-
>
IsTop
(
)
&
&
remoteType
.
IsEmpty
(
)
)
)
{
LOG
(
(
"
Process
Switch
Abort
:
non
-
remote
target
process
for
subframe
"
)
)
;
return
false
;
}
*
aWillSwitchToRemote
=
!
remoteType
.
IsEmpty
(
)
;
LOG
(
(
"
Process
Switch
:
Changing
Remoteness
from
'
%
s
'
to
'
%
s
'
"
currentRemoteType
.
get
(
)
remoteType
.
get
(
)
)
)
;
mDoingProcessSwitch
=
true
;
if
(
wgp
&
&
wgp
-
>
IsProcessRoot
(
)
)
{
if
(
RefPtr
<
BrowserParent
>
browserParent
=
wgp
-
>
GetBrowserParent
(
)
)
{
browserParent
-
>
SuspendProgressEventsUntilAfterNextLoadStarts
(
)
;
}
}
DisconnectListeners
(
NS_BINDING_ABORTED
NS_BINDING_ABORTED
true
)
;
LOG
(
(
"
Process
Switch
:
Calling
ChangeRemoteness
"
)
)
;
browsingContext
-
>
ChangeRemoteness
(
remoteType
mLoadIdentifier
replaceBrowsingContext
specificGroupId
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
=
RefPtr
{
this
}
]
(
BrowserParent
*
aBrowserParent
)
{
MOZ_ASSERT
(
self
-
>
mChannel
"
Something
went
wrong
channel
got
cancelled
"
)
;
self
-
>
TriggerRedirectToRealChannel
(
Some
(
aBrowserParent
?
aBrowserParent
-
>
Manager
(
)
-
>
ChildID
(
)
:
0
)
)
;
}
[
self
=
RefPtr
{
this
}
]
(
nsresult
aStatusCode
)
{
MOZ_ASSERT
(
NS_FAILED
(
aStatusCode
)
"
Status
should
be
error
"
)
;
self
-
>
RedirectToRealChannelFinished
(
aStatusCode
)
;
}
)
;
return
true
;
}
RefPtr
<
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
>
DocumentLoadListener
:
:
RedirectToParentProcess
(
uint32_t
aRedirectFlags
uint32_t
aLoadFlags
)
{
RefPtr
<
nsDocShellLoadState
>
loadState
;
nsDocShellLoadState
:
:
CreateFromPendingChannel
(
mChannel
mLoadIdentifier
mRedirectChannelId
getter_AddRefs
(
loadState
)
)
;
loadState
-
>
SetLoadFlags
(
mLoadStateLoadFlags
)
;
loadState
-
>
SetLoadType
(
mLoadStateLoadType
)
;
if
(
mSessionHistoryInfo
)
{
loadState
-
>
SetSessionHistoryInfo
(
*
mSessionHistoryInfo
)
;
}
RefPtr
<
ChildProcessChannelListener
>
processListener
=
ChildProcessChannelListener
:
:
GetSingleton
(
)
;
auto
promise
=
MakeRefPtr
<
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
:
:
Private
>
(
__func__
)
;
promise
-
>
UseDirectTaskDispatch
(
__func__
)
;
auto
resolve
=
[
promise
]
(
nsresult
aResult
)
{
promise
-
>
Resolve
(
aResult
__func__
)
;
}
;
nsTArray
<
ipc
:
:
Endpoint
<
extensions
:
:
PStreamFilterParent
>
>
endpoints
;
processListener
-
>
OnChannelReady
(
loadState
mLoadIdentifier
std
:
:
move
(
endpoints
)
mTiming
std
:
:
move
(
resolve
)
)
;
return
promise
;
}
RefPtr
<
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
>
DocumentLoadListener
:
:
RedirectToRealChannel
(
uint32_t
aRedirectFlags
uint32_t
aLoadFlags
const
Maybe
<
uint64_t
>
&
aDestinationProcess
nsTArray
<
ParentEndpoint
>
&
&
aStreamFilterEndpoints
)
{
LOG
(
(
"
DocumentLoadListener
RedirectToRealChannel
[
this
=
%
p
]
"
"
aRedirectFlags
=
%
"
PRIx32
"
aLoadFlags
=
%
"
PRIx32
this
aRedirectFlags
aLoadFlags
)
)
;
if
(
mIsDocumentLoad
)
{
nsresult
status
=
NS_OK
;
mChannel
-
>
GetStatus
(
&
status
)
;
bool
updateGHistory
=
nsDocShell
:
:
ShouldUpdateGlobalHistory
(
mLoadStateLoadType
)
;
if
(
NS_SUCCEEDED
(
status
)
&
&
updateGHistory
&
&
!
net
:
:
ChannelIsPost
(
mChannel
)
)
{
AddURIVisit
(
mChannel
aLoadFlags
)
;
}
}
nsCOMPtr
<
nsIRedirectChannelRegistrar
>
registrar
=
RedirectChannelRegistrar
:
:
GetOrCreate
(
)
;
MOZ_ASSERT
(
registrar
)
;
mRedirectChannelId
=
nsContentUtils
:
:
GenerateLoadIdentifier
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
registrar
-
>
RegisterChannel
(
mChannel
mRedirectChannelId
)
)
;
if
(
aDestinationProcess
)
{
if
(
!
*
aDestinationProcess
)
{
MOZ_ASSERT
(
aStreamFilterEndpoints
.
IsEmpty
(
)
)
;
return
RedirectToParentProcess
(
aRedirectFlags
aLoadFlags
)
;
}
dom
:
:
ContentParent
*
cp
=
dom
:
:
ContentProcessManager
:
:
GetSingleton
(
)
-
>
GetContentProcessById
(
ContentParentId
{
*
aDestinationProcess
}
)
;
if
(
!
cp
)
{
return
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
:
:
CreateAndReject
(
ipc
:
:
ResponseRejectReason
:
:
SendError
__func__
)
;
}
RedirectToRealChannelArgs
args
;
SerializeRedirectData
(
args
!
!
aDestinationProcess
aRedirectFlags
aLoadFlags
cp
)
;
if
(
mTiming
)
{
mTiming
-
>
Anonymize
(
args
.
uri
(
)
)
;
args
.
timing
(
)
=
Some
(
std
:
:
move
(
mTiming
)
)
;
}
auto
loadInfo
=
args
.
loadInfo
(
)
;
if
(
loadInfo
.
isNothing
(
)
)
{
return
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
:
:
CreateAndReject
(
ipc
:
:
ResponseRejectReason
:
:
SendError
__func__
)
;
}
auto
triggeringPrincipalOrErr
=
PrincipalInfoToPrincipal
(
loadInfo
.
ref
(
)
.
triggeringPrincipalInfo
(
)
)
;
if
(
triggeringPrincipalOrErr
.
isOk
(
)
)
{
nsCOMPtr
<
nsIPrincipal
>
triggeringPrincipal
=
triggeringPrincipalOrErr
.
unwrap
(
)
;
cp
-
>
TransmitBlobDataIfBlobURL
(
args
.
uri
(
)
triggeringPrincipal
)
;
}
return
cp
-
>
SendCrossProcessRedirect
(
args
std
:
:
move
(
aStreamFilterEndpoints
)
)
;
}
if
(
mOpenPromiseResolved
)
{
LOG
(
(
"
DocumentLoadListener
RedirectToRealChannel
[
this
=
%
p
]
"
"
promise
already
resolved
.
Aborting
.
"
this
)
)
;
return
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
:
:
CreateAndResolve
(
NS_BINDING_ABORTED
__func__
)
;
}
auto
promise
=
MakeRefPtr
<
PDocumentChannelParent
:
:
RedirectToRealChannelPromise
:
:
Private
>
(
__func__
)
;
mOpenPromise
-
>
Resolve
(
OpenPromiseSucceededType
(
{
std
:
:
move
(
aStreamFilterEndpoints
)
aRedirectFlags
aLoadFlags
promise
}
)
__func__
)
;
mOpenPromiseResolved
=
true
;
return
promise
;
}
void
DocumentLoadListener
:
:
TriggerRedirectToRealChannel
(
const
Maybe
<
uint64_t
>
&
aDestinationProcess
)
{
LOG
(
(
"
DocumentLoadListener
:
:
TriggerRedirectToRealChannel
[
this
=
%
p
]
"
"
aDestinationProcess
=
%
"
PRId64
this
aDestinationProcess
?
int64_t
(
*
aDestinationProcess
)
:
int64_t
(
-
1
)
)
)
;
nsTArray
<
ParentEndpoint
>
parentEndpoints
(
mStreamFilterRequests
.
Length
(
)
)
;
if
(
!
mStreamFilterRequests
.
IsEmpty
(
)
)
{
base
:
:
ProcessId
pid
=
OtherPid
(
)
;
if
(
aDestinationProcess
)
{
if
(
*
aDestinationProcess
)
{
dom
:
:
ContentParent
*
cp
=
dom
:
:
ContentProcessManager
:
:
GetSingleton
(
)
-
>
GetContentProcessById
(
ContentParentId
(
*
aDestinationProcess
)
)
;
if
(
cp
)
{
pid
=
cp
-
>
OtherPid
(
)
;
}
}
else
{
pid
=
0
;
}
}
for
(
StreamFilterRequest
&
request
:
mStreamFilterRequests
)
{
if
(
!
pid
)
{
request
.
mPromise
-
>
Reject
(
false
__func__
)
;
request
.
mPromise
=
nullptr
;
continue
;
}
ParentEndpoint
parent
;
nsresult
rv
=
extensions
:
:
PStreamFilter
:
:
CreateEndpoints
(
pid
request
.
mChildProcessId
&
parent
&
request
.
mChildEndpoint
)
;
if
(
NS_FAILED
(
rv
)
)
{
request
.
mPromise
-
>
Reject
(
false
__func__
)
;
request
.
mPromise
=
nullptr
;
}
else
{
parentEndpoints
.
AppendElement
(
std
:
:
move
(
parent
)
)
;
}
}
}
uint32_t
redirectFlags
=
0
;
if
(
!
mHaveVisibleRedirect
)
{
redirectFlags
=
nsIChannelEventSink
:
:
REDIRECT_INTERNAL
;
}
uint32_t
newLoadFlags
=
nsIRequest
:
:
LOAD_NORMAL
;
MOZ_ALWAYS_SUCCEEDS
(
mChannel
-
>
GetLoadFlags
(
&
newLoadFlags
)
)
;
if
(
mIsDocumentLoad
)
{
newLoadFlags
|
=
nsIChannel
:
:
LOAD_DOCUMENT_URI
;
}
if
(
!
aDestinationProcess
)
{
newLoadFlags
|
=
nsIChannel
:
:
LOAD_REPLACE
;
}
nsCOMPtr
<
nsIURI
>
uri
;
mChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
uri
&
&
uri
-
>
SchemeIs
(
"
https
"
)
)
{
newLoadFlags
&
=
~
nsIRequest
:
:
INHIBIT_PERSISTENT_CACHING
;
}
RefPtr
<
DocumentLoadListener
>
self
=
this
;
RedirectToRealChannel
(
redirectFlags
newLoadFlags
aDestinationProcess
std
:
:
move
(
parentEndpoints
)
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
requests
=
std
:
:
move
(
mStreamFilterRequests
)
]
(
const
nsresult
&
aResponse
)
mutable
{
for
(
StreamFilterRequest
&
request
:
requests
)
{
if
(
request
.
mPromise
)
{
request
.
mPromise
-
>
Resolve
(
std
:
:
move
(
request
.
mChildEndpoint
)
__func__
)
;
request
.
mPromise
=
nullptr
;
}
}
self
-
>
RedirectToRealChannelFinished
(
aResponse
)
;
}
[
self
]
(
const
mozilla
:
:
ipc
:
:
ResponseRejectReason
)
{
self
-
>
RedirectToRealChannelFinished
(
NS_ERROR_FAILURE
)
;
}
)
;
}
void
DocumentLoadListener
:
:
MaybeReportBlockedByURLClassifier
(
nsresult
aStatus
)
{
auto
*
browsingContext
=
GetDocumentBrowsingContext
(
)
;
if
(
!
browsingContext
|
|
browsingContext
-
>
IsTop
(
)
|
|
!
StaticPrefs
:
:
privacy_trackingprotection_testing_report_blocked_node
(
)
)
{
return
;
}
if
(
!
UrlClassifierFeatureFactory
:
:
IsClassifierBlockingErrorCode
(
aStatus
)
)
{
return
;
}
RefPtr
<
WindowGlobalParent
>
parent
=
browsingContext
-
>
GetParentWindowContext
(
)
;
if
(
parent
)
{
Unused
<
<
parent
-
>
SendAddBlockedFrameNodeByClassifier
(
GetLoadingBrowsingContext
(
)
)
;
}
}
bool
DocumentLoadListener
:
:
DocShellWillDisplayContent
(
nsresult
aStatus
)
{
if
(
NS_SUCCEEDED
(
aStatus
)
)
{
return
true
;
}
auto
*
loadingContext
=
GetLoadingBrowsingContext
(
)
;
bool
isInitialDocument
=
true
;
if
(
WindowGlobalParent
*
currentWindow
=
loadingContext
-
>
GetCurrentWindowGlobal
(
)
)
{
isInitialDocument
=
currentWindow
-
>
IsInitialDocument
(
)
;
}
nsresult
rv
=
nsDocShell
:
:
FilterStatusForErrorPage
(
aStatus
mChannel
mLoadStateLoadType
loadingContext
-
>
IsTop
(
)
loadingContext
-
>
GetUseErrorPages
(
)
isInitialDocument
nullptr
)
;
return
NS_FAILED
(
rv
)
;
}
bool
DocumentLoadListener
:
:
MaybeHandleLoadErrorWithURIFixup
(
nsresult
aStatus
)
{
auto
*
bc
=
GetDocumentBrowsingContext
(
)
;
if
(
!
bc
)
{
return
false
;
}
nsCOMPtr
<
nsIInputStream
>
newPostData
;
nsCOMPtr
<
nsIURI
>
newURI
=
nsDocShell
:
:
AttemptURIFixup
(
mChannel
aStatus
mOriginalUriString
mLoadStateLoadType
bc
-
>
IsTop
(
)
mLoadStateLoadFlags
&
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP
bc
-
>
UsePrivateBrowsing
(
)
true
getter_AddRefs
(
newPostData
)
)
;
if
(
!
newURI
)
{
return
false
;
}
DisconnectListeners
(
NS_BINDING_ABORTED
NS_BINDING_ABORTED
)
;
RefPtr
<
nsDocShellLoadState
>
loadState
=
new
nsDocShellLoadState
(
newURI
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
mChannel
-
>
LoadInfo
(
)
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
cspToInherit
=
loadInfo
-
>
GetCspToInherit
(
)
;
loadState
-
>
SetCsp
(
cspToInherit
)
;
nsCOMPtr
<
nsIPrincipal
>
triggeringPrincipal
=
loadInfo
-
>
TriggeringPrincipal
(
)
;
loadState
-
>
SetTriggeringPrincipal
(
triggeringPrincipal
)
;
loadState
-
>
SetPostDataStream
(
newPostData
)
;
bc
-
>
LoadURI
(
loadState
false
)
;
return
true
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
OnStartRequest
(
nsIRequest
*
aRequest
)
{
LOG
(
(
"
DocumentLoadListener
OnStartRequest
[
this
=
%
p
]
"
this
)
)
;
nsCOMPtr
<
nsIMultiPartChannel
>
multiPartChannel
=
do_QueryInterface
(
aRequest
)
;
if
(
multiPartChannel
)
{
multiPartChannel
-
>
GetBaseChannel
(
getter_AddRefs
(
mChannel
)
)
;
}
else
{
mChannel
=
do_QueryInterface
(
aRequest
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mChannel
)
;
RefPtr
<
nsHttpChannel
>
httpChannel
=
do_QueryObject
(
mChannel
)
;
nsContentSecurityUtils
:
:
PerformCSPFrameAncestorAndXFOCheck
(
mChannel
)
;
auto
*
loadingContext
=
GetLoadingBrowsingContext
(
)
;
if
(
!
loadingContext
|
|
loadingContext
-
>
IsDiscarded
(
)
)
{
DisconnectListeners
(
NS_ERROR_UNEXPECTED
NS_ERROR_UNEXPECTED
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsresult
status
=
NS_OK
;
aRequest
-
>
GetStatus
(
&
status
)
;
if
(
status
=
=
NS_ERROR_NO_CONTENT
)
{
DisconnectListeners
(
status
status
)
;
return
NS_OK
;
}
if
(
MaybeHandleLoadErrorWithURIFixup
(
status
)
)
{
return
NS_OK
;
}
mStreamListenerFunctions
.
AppendElement
(
StreamListenerFunction
{
VariantIndex
<
0
>
{
}
OnStartRequestParams
{
aRequest
}
}
)
;
if
(
mOpenPromiseResolved
|
|
mInitiatedRedirectToRealChannel
)
{
return
NS_OK
;
}
mChannel
-
>
Suspend
(
)
;
mInitiatedRedirectToRealChannel
=
true
;
MaybeReportBlockedByURLClassifier
(
status
)
;
bool
willBeRemote
=
false
;
if
(
!
DocShellWillDisplayContent
(
status
)
|
|
!
MaybeTriggerProcessSwitch
(
&
willBeRemote
)
)
{
if
(
!
mSupportsRedirectToRealChannel
)
{
mDoingProcessSwitch
=
true
;
MOZ_ASSERT
(
loadingContext
-
>
GetCurrentWindowGlobal
(
)
)
;
RefPtr
<
BrowserParent
>
browserParent
=
loadingContext
-
>
GetCurrentWindowGlobal
(
)
-
>
GetBrowserParent
(
)
;
browserParent
-
>
SuspendProgressEventsUntilAfterNextLoadStarts
(
)
;
browserParent
-
>
ResumeLoad
(
mLoadIdentifier
)
;
TriggerRedirectToRealChannel
(
Some
(
loadingContext
-
>
OwnerProcessId
(
)
)
)
;
}
else
{
TriggerRedirectToRealChannel
(
Nothing
(
)
)
;
}
if
(
auto
*
bc
=
GetDocumentBrowsingContext
(
)
;
bc
&
&
bc
-
>
GetContentParent
(
)
)
{
willBeRemote
=
true
;
}
}
if
(
httpChannel
)
{
Unused
<
<
httpChannel
-
>
GetApplyConversion
(
&
mOldApplyConversion
)
;
if
(
willBeRemote
)
{
httpChannel
-
>
SetApplyConversion
(
false
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
OnStopRequest
(
nsIRequest
*
aRequest
nsresult
aStatusCode
)
{
LOG
(
(
"
DocumentLoadListener
OnStopRequest
[
this
=
%
p
]
"
this
)
)
;
mStreamListenerFunctions
.
AppendElement
(
StreamListenerFunction
{
VariantIndex
<
2
>
{
}
OnStopRequestParams
{
aRequest
aStatusCode
}
}
)
;
nsCOMPtr
<
nsIMultiPartChannel
>
multiPartChannel
=
do_QueryInterface
(
aRequest
)
;
if
(
!
multiPartChannel
)
{
mIsFinished
=
true
;
}
mStreamFilterRequests
.
Clear
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
OnDataAvailable
(
nsIRequest
*
aRequest
nsIInputStream
*
aInputStream
uint64_t
aOffset
uint32_t
aCount
)
{
LOG
(
(
"
DocumentLoadListener
OnDataAvailable
[
this
=
%
p
]
"
this
)
)
;
nsCString
data
;
nsresult
rv
=
NS_ReadInputStreamToString
(
aInputStream
data
aCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mStreamListenerFunctions
.
AppendElement
(
StreamListenerFunction
{
VariantIndex
<
1
>
{
}
OnDataAvailableParams
{
aRequest
data
aOffset
aCount
}
}
)
;
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
OnAfterLastPart
(
nsresult
aStatus
)
{
LOG
(
(
"
DocumentLoadListener
OnAfterLastPart
[
this
=
%
p
]
"
this
)
)
;
if
(
!
mInitiatedRedirectToRealChannel
)
{
LOG
(
(
"
DocumentLoadListener
Disconnecting
child
"
)
)
;
DisconnectListeners
(
NS_BINDING_RETARGETED
NS_OK
)
;
return
NS_OK
;
}
mStreamListenerFunctions
.
AppendElement
(
StreamListenerFunction
{
VariantIndex
<
3
>
{
}
OnAfterLastPartParams
{
aStatus
}
}
)
;
mIsFinished
=
true
;
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
GetInterface
(
const
nsIID
&
aIID
void
*
*
result
)
{
RefPtr
<
CanonicalBrowsingContext
>
browsingContext
=
GetDocumentBrowsingContext
(
)
;
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsILoadContext
)
)
&
&
browsingContext
)
{
browsingContext
.
forget
(
result
)
;
return
NS_OK
;
}
return
QueryInterface
(
aIID
result
)
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
SetParentListener
(
mozilla
:
:
net
:
:
ParentChannelListener
*
listener
)
{
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
NotifyFlashPluginStateChanged
(
nsIHttpChannel
:
:
FlashPluginState
aState
)
{
mIParentChannelFunctions
.
AppendElement
(
IParentChannelFunction
{
VariantIndex
<
0
>
{
}
aState
}
)
;
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
SetClassifierMatchedInfo
(
const
nsACString
&
aList
const
nsACString
&
aProvider
const
nsACString
&
aFullHash
)
{
ClassifierMatchedInfoParams
params
;
params
.
mList
=
aList
;
params
.
mProvider
=
aProvider
;
params
.
mFullHash
=
aFullHash
;
mIParentChannelFunctions
.
AppendElement
(
IParentChannelFunction
{
VariantIndex
<
1
>
{
}
std
:
:
move
(
params
)
}
)
;
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
SetClassifierMatchedTrackingInfo
(
const
nsACString
&
aLists
const
nsACString
&
aFullHash
)
{
ClassifierMatchedTrackingInfoParams
params
;
params
.
mLists
=
aLists
;
params
.
mFullHashes
=
aFullHash
;
mIParentChannelFunctions
.
AppendElement
(
IParentChannelFunction
{
VariantIndex
<
2
>
{
}
std
:
:
move
(
params
)
}
)
;
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
NotifyClassificationFlags
(
uint32_t
aClassificationFlags
bool
aIsThirdParty
)
{
mIParentChannelFunctions
.
AppendElement
(
IParentChannelFunction
{
VariantIndex
<
3
>
{
}
ClassificationFlagsParams
{
aClassificationFlags
aIsThirdParty
}
}
)
;
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
Delete
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
This
method
is
unused
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
GetRemoteType
(
nsACString
&
aRemoteType
)
{
RefPtr
<
CanonicalBrowsingContext
>
browsingContext
=
GetDocumentBrowsingContext
(
)
;
if
(
!
browsingContext
)
{
return
NS_ERROR_UNEXPECTED
;
}
ErrorResult
error
;
browsingContext
-
>
GetCurrentRemoteType
(
aRemoteType
error
)
;
if
(
error
.
Failed
(
)
)
{
aRemoteType
=
NOT_REMOTE_TYPE
;
}
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
AsyncOnChannelRedirect
(
nsIChannel
*
aOldChannel
nsIChannel
*
aNewChannel
uint32_t
aFlags
nsIAsyncVerifyRedirectCallback
*
aCallback
)
{
LOG
(
(
"
DocumentLoadListener
:
:
AsyncOnChannelRedirect
[
this
=
%
p
flags
=
%
"
PRIu32
"
]
"
this
aFlags
)
)
;
mChannel
=
aNewChannel
;
nsCOMPtr
<
nsIHttpChannelInternal
>
httpChannel
=
do_QueryInterface
(
aOldChannel
)
;
if
(
httpChannel
)
{
bool
isCOOPMismatch
=
false
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
httpChannel
-
>
HasCrossOriginOpenerPolicyMismatch
(
&
isCOOPMismatch
)
)
)
;
mHasCrossOriginOpenerPolicyMismatch
|
=
isCOOPMismatch
;
}
RefPtr
<
CanonicalBrowsingContext
>
bc
=
mParentChannelListener
-
>
GetBrowsingContext
(
)
;
nsCOMPtr
<
nsILoadInfo
>
channelLoadInfo
=
mChannel
-
>
LoadInfo
(
)
;
bool
isPrivateWin
=
channelLoadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
if
(
nsHTTPSOnlyUtils
:
:
IsHttpsOnlyModeEnabled
(
isPrivateWin
)
&
&
bc
&
&
bc
-
>
IsTop
(
)
)
{
bool
isHttpsOnlyExempt
=
false
;
if
(
httpChannel
)
{
nsCOMPtr
<
nsIPrincipal
>
resultPrincipal
;
nsresult
rv
=
nsContentUtils
:
:
GetSecurityManager
(
)
-
>
GetChannelResultPrincipal
(
mChannel
getter_AddRefs
(
resultPrincipal
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
isHttpsOnlyExempt
=
nsHTTPSOnlyUtils
:
:
TestHttpsOnlySitePermission
(
resultPrincipal
)
;
}
}
uint32_t
httpsOnlyStatus
=
channelLoadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
isHttpsOnlyExempt
)
{
httpsOnlyStatus
|
=
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
;
}
else
{
httpsOnlyStatus
&
=
~
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
;
}
channelLoadInfo
-
>
SetHttpsOnlyStatus
(
httpsOnlyStatus
)
;
}
if
(
aFlags
&
nsIChannelEventSink
:
:
REDIRECT_INTERNAL
)
{
LOG
(
(
"
DocumentLoadListener
AsyncOnChannelRedirect
[
this
=
%
p
]
"
"
flags
=
REDIRECT_INTERNAL
"
this
)
)
;
aCallback
-
>
OnRedirectVerifyCallback
(
NS_OK
)
;
return
NS_OK
;
}
if
(
GetDocumentBrowsingContext
(
)
&
&
!
net
:
:
ChannelIsPost
(
aOldChannel
)
)
{
AddURIVisit
(
aOldChannel
0
)
;
nsCOMPtr
<
nsIURI
>
oldURI
;
aOldChannel
-
>
GetURI
(
getter_AddRefs
(
oldURI
)
)
;
nsDocShell
:
:
SaveLastVisit
(
aNewChannel
oldURI
aFlags
)
;
}
mHaveVisibleRedirect
|
=
true
;
LOG
(
(
"
DocumentLoadListener
AsyncOnChannelRedirect
[
this
=
%
p
]
"
"
mHaveVisibleRedirect
=
%
c
"
this
mHaveVisibleRedirect
?
'
T
'
:
'
F
'
)
)
;
nsresult
rv
=
nsContentUtils
:
:
CheckSameOrigin
(
aOldChannel
aNewChannel
)
;
if
(
NS_FAILED
(
rv
)
)
{
if
(
mLoadStateLoadType
=
=
LOAD_NORMAL_ALLOW_MIXED_CONTENT
)
{
mLoadStateLoadType
=
LOAD_NORMAL
;
}
else
if
(
mLoadStateLoadType
=
=
LOAD_RELOAD_ALLOW_MIXED_CONTENT
)
{
mLoadStateLoadType
=
LOAD_RELOAD_NORMAL
;
}
MOZ_ASSERT
(
!
LOAD_TYPE_HAS_FLAGS
(
mLoadStateLoadType
nsIWebNavigation
:
:
LOAD_FLAGS_ALLOW_MIXED_CONTENT
)
)
;
}
aNewChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
mChannelCreationURI
)
)
;
mIParentChannelFunctions
.
Clear
(
)
;
#
ifdef
ANDROID
nsCOMPtr
<
nsIURI
>
uriBeingLoaded
=
AntiTrackingUtils
:
:
MaybeGetDocumentURIBeingLoaded
(
mChannel
)
;
RefPtr
<
MozPromise
<
bool
bool
false
>
>
promise
;
nsCOMPtr
<
nsIWidget
>
widget
=
bc
?
bc
-
>
GetParentProcessWidgetContaining
(
)
:
nullptr
;
RefPtr
<
nsWindow
>
window
=
nsWindow
:
:
From
(
widget
)
;
if
(
window
)
{
promise
=
window
-
>
OnLoadRequest
(
uriBeingLoaded
nsIBrowserDOMWindow
:
:
OPEN_CURRENTWINDOW
nsIWebNavigation
:
:
LOAD_FLAGS_IS_REDIRECT
nullptr
false
bc
-
>
IsTopContent
(
)
)
;
}
if
(
promise
)
{
RefPtr
<
nsIAsyncVerifyRedirectCallback
>
cb
=
aCallback
;
promise
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
=
]
(
const
MozPromise
<
bool
bool
false
>
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsResolve
(
)
)
{
bool
handled
=
aValue
.
ResolveValue
(
)
;
if
(
handled
)
{
cb
-
>
OnRedirectVerifyCallback
(
NS_ERROR_ABORT
)
;
}
else
{
cb
-
>
OnRedirectVerifyCallback
(
NS_OK
)
;
}
}
}
)
;
}
else
#
endif
{
aCallback
-
>
OnRedirectVerifyCallback
(
NS_OK
)
;
}
return
NS_OK
;
}
bool
DocumentLoadListener
:
:
HasCrossOriginOpenerPolicyMismatch
(
)
const
{
if
(
mHasCrossOriginOpenerPolicyMismatch
)
{
return
true
;
}
nsCOMPtr
<
nsIHttpChannelInternal
>
httpChannel
=
do_QueryInterface
(
mChannel
)
;
if
(
!
httpChannel
)
{
return
false
;
}
bool
isCOOPMismatch
=
false
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
httpChannel
-
>
HasCrossOriginOpenerPolicyMismatch
(
&
isCOOPMismatch
)
)
)
;
return
isCOOPMismatch
;
}
auto
DocumentLoadListener
:
:
AttachStreamFilter
(
base
:
:
ProcessId
aChildProcessId
)
-
>
RefPtr
<
ChildEndpointPromise
>
{
LOG
(
(
"
DocumentLoadListener
AttachStreamFilter
[
this
=
%
p
]
"
this
)
)
;
StreamFilterRequest
*
request
=
mStreamFilterRequests
.
AppendElement
(
)
;
request
-
>
mPromise
=
new
ChildEndpointPromise
:
:
Private
(
__func__
)
;
request
-
>
mChildProcessId
=
aChildProcessId
;
return
request
-
>
mPromise
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
OnProgress
(
nsIRequest
*
aRequest
int64_t
aProgress
int64_t
aProgressMax
)
{
return
NS_OK
;
}
NS_IMETHODIMP
DocumentLoadListener
:
:
OnStatus
(
nsIRequest
*
aRequest
nsresult
aStatus
const
char16_t
*
aStatusArg
)
{
nsCOMPtr
<
nsIChannel
>
channel
=
mChannel
;
nsCOMPtr
<
nsIWebProgress
>
webProgress
=
new
RemoteWebProgress
(
mLoadStateLoadType
true
true
)
;
RefPtr
<
BrowsingContextWebProgress
>
topWebProgress
=
WebProgressForBrowsingContext
(
GetTopBrowsingContext
(
)
)
;
const
nsString
message
(
aStatusArg
)
;
if
(
topWebProgress
)
{
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
DocumentLoadListener
:
:
OnStatus
"
[
=
]
(
)
{
topWebProgress
-
>
OnStatusChange
(
webProgress
channel
aStatus
message
.
get
(
)
)
;
}
)
)
;
}
return
NS_OK
;
}
}
}
#
undef
LOG
