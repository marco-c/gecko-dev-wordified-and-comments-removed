#
include
"
gtest
/
gtest
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsNetUtil
.
h
"
TEST
(
TestReadStreamToString
SyncStreamFullSize
)
{
nsCString
buffer
;
buffer
.
AssignLiteral
(
"
Hello
world
!
"
)
;
nsCOMPtr
<
nsIInputStream
>
stream
;
ASSERT_EQ
(
NS_OK
NS_NewCStringInputStream
(
getter_AddRefs
(
stream
)
buffer
)
)
;
uint64_t
written
;
nsAutoCString
result
;
ASSERT_EQ
(
NS_OK
NS_ReadInputStreamToString
(
stream
result
buffer
.
Length
(
)
&
written
)
)
;
ASSERT_EQ
(
buffer
.
Length
(
)
written
)
;
ASSERT_TRUE
(
buffer
.
Equals
(
result
)
)
;
}
TEST
(
TestReadStreamToString
SyncStreamLessThan
)
{
nsCString
buffer
;
buffer
.
AssignLiteral
(
"
Hello
world
!
"
)
;
nsCOMPtr
<
nsIInputStream
>
stream
;
ASSERT_EQ
(
NS_OK
NS_NewCStringInputStream
(
getter_AddRefs
(
stream
)
buffer
)
)
;
uint64_t
written
;
nsAutoCString
result
;
ASSERT_EQ
(
NS_OK
NS_ReadInputStreamToString
(
stream
result
5
&
written
)
)
;
ASSERT_EQ
(
(
uint64_t
)
5
written
)
;
ASSERT_TRUE
(
nsCString
(
buffer
.
get
(
)
5
)
.
Equals
(
result
)
)
;
}
TEST
(
TestReadStreamToString
SyncStreamMoreThan
)
{
nsCString
buffer
;
buffer
.
AssignLiteral
(
"
Hello
world
!
"
)
;
nsCOMPtr
<
nsIInputStream
>
stream
;
ASSERT_EQ
(
NS_OK
NS_NewCStringInputStream
(
getter_AddRefs
(
stream
)
buffer
)
)
;
uint64_t
written
;
nsAutoCString
result
;
ASSERT_EQ
(
NS_OK
NS_ReadInputStreamToString
(
stream
result
buffer
.
Length
(
)
+
5
&
written
)
)
;
ASSERT_EQ
(
buffer
.
Length
(
)
written
)
;
ASSERT_TRUE
(
buffer
.
Equals
(
result
)
)
;
}
TEST
(
TestReadStreamToString
SyncStreamUnknownSize
)
{
nsCString
buffer
;
buffer
.
AssignLiteral
(
"
Hello
world
!
"
)
;
nsCOMPtr
<
nsIInputStream
>
stream
;
ASSERT_EQ
(
NS_OK
NS_NewCStringInputStream
(
getter_AddRefs
(
stream
)
buffer
)
)
;
uint64_t
written
;
nsAutoCString
result
;
ASSERT_EQ
(
NS_OK
NS_ReadInputStreamToString
(
stream
result
-
1
&
written
)
)
;
ASSERT_EQ
(
buffer
.
Length
(
)
written
)
;
ASSERT_TRUE
(
buffer
.
Equals
(
result
)
)
;
}
TEST
(
TestReadStreamToString
AsyncStreamFullSize
)
{
nsCString
buffer
;
buffer
.
AssignLiteral
(
"
Hello
world
!
"
)
;
nsCOMPtr
<
nsIInputStream
>
stream
=
new
testing
:
:
AsyncStringStream
(
buffer
)
;
uint64_t
written
;
nsAutoCString
result
;
ASSERT_EQ
(
NS_OK
NS_ReadInputStreamToString
(
stream
result
buffer
.
Length
(
)
&
written
)
)
;
ASSERT_EQ
(
buffer
.
Length
(
)
written
)
;
ASSERT_TRUE
(
buffer
.
Equals
(
result
)
)
;
}
TEST
(
TestReadStreamToString
AsyncStreamLessThan
)
{
nsCString
buffer
;
buffer
.
AssignLiteral
(
"
Hello
world
!
"
)
;
nsCOMPtr
<
nsIInputStream
>
stream
=
new
testing
:
:
AsyncStringStream
(
buffer
)
;
uint64_t
written
;
nsAutoCString
result
;
ASSERT_EQ
(
NS_OK
NS_ReadInputStreamToString
(
stream
result
5
&
written
)
)
;
ASSERT_EQ
(
(
uint64_t
)
5
written
)
;
ASSERT_TRUE
(
nsCString
(
buffer
.
get
(
)
5
)
.
Equals
(
result
)
)
;
}
TEST
(
TestReadStreamToString
AsyncStreamMoreThan
)
{
nsCString
buffer
;
buffer
.
AssignLiteral
(
"
Hello
world
!
"
)
;
nsCOMPtr
<
nsIInputStream
>
stream
=
new
testing
:
:
AsyncStringStream
(
buffer
)
;
uint64_t
written
;
nsAutoCString
result
;
ASSERT_EQ
(
NS_OK
NS_ReadInputStreamToString
(
stream
result
buffer
.
Length
(
)
+
5
&
written
)
)
;
ASSERT_EQ
(
buffer
.
Length
(
)
written
)
;
ASSERT_TRUE
(
buffer
.
Equals
(
result
)
)
;
}
TEST
(
TestReadStreamToString
AsyncStreamUnknownSize
)
{
nsCString
buffer
;
buffer
.
AssignLiteral
(
"
Hello
world
!
"
)
;
nsCOMPtr
<
nsIInputStream
>
stream
=
new
testing
:
:
AsyncStringStream
(
buffer
)
;
uint64_t
written
;
nsAutoCString
result
;
ASSERT_EQ
(
NS_OK
NS_ReadInputStreamToString
(
stream
result
-
1
&
written
)
)
;
ASSERT_EQ
(
buffer
.
Length
(
)
written
)
;
ASSERT_TRUE
(
buffer
.
Equals
(
result
)
)
;
}
TEST
(
TestReadStreamToString
AsyncStreamUnknownBigSize
)
{
nsCString
buffer
;
buffer
.
SetLength
(
4096
*
2
)
;
for
(
uint32_t
i
=
0
;
i
<
4096
*
2
;
+
+
i
)
{
buffer
.
BeginWriting
(
)
[
i
]
=
i
%
10
;
}
nsCOMPtr
<
nsIInputStream
>
stream
=
new
testing
:
:
AsyncStringStream
(
buffer
)
;
uint64_t
written
;
nsAutoCString
result
;
ASSERT_EQ
(
NS_OK
NS_ReadInputStreamToString
(
stream
result
-
1
&
written
)
)
;
ASSERT_EQ
(
buffer
.
Length
(
)
written
)
;
ASSERT_TRUE
(
buffer
.
Equals
(
result
)
)
;
}
