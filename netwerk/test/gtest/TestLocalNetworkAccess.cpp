#
include
"
TestCommon
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
gtest
/
MozAssertions
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
net
/
DNS
.
h
"
TEST
(
TestNetAddrLNAUtil
IPAddressSpaceCategorization
)
{
using
namespace
mozilla
:
:
net
;
struct
TestCase
{
const
char
*
mIp
;
nsILoadInfo
:
:
IPAddressSpace
mExpectedSpace
;
}
;
std
:
:
vector
<
TestCase
>
testCases
=
{
{
"
127
.
0
.
0
.
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Local
}
{
"
198
.
18
.
0
.
0
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Local
}
{
"
198
.
19
.
255
.
255
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Local
}
{
"
10
.
0
.
0
.
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
100
.
64
.
0
.
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
100
.
127
.
255
.
254
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
172
.
16
.
0
.
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
172
.
31
.
255
.
255
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
192
.
168
.
1
.
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
169
.
254
.
0
.
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
169
.
254
.
255
.
254
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
:
:
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Local
}
{
"
fc00
:
:
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
fdff
:
ffff
:
ffff
:
ffff
:
ffff
:
ffff
:
ffff
:
ffff
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
fe80
:
:
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
:
:
ffff
:
127
.
0
.
0
.
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Local
}
{
"
:
:
ffff
:
10
.
0
.
0
.
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Private
}
{
"
:
:
ffff
:
1
.
1
.
1
.
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Public
}
{
"
8
.
8
.
8
.
8
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Public
}
{
"
1
.
1
.
1
.
1
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Public
}
{
"
2001
:
4860
:
4860
:
:
8888
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Public
}
{
"
2606
:
4700
:
4700
:
:
1111
"
nsILoadInfo
:
:
IPAddressSpace
:
:
Public
}
}
;
for
(
const
auto
&
testCase
:
testCases
)
{
NetAddr
addr
;
addr
.
InitFromString
(
nsCString
(
testCase
.
mIp
)
)
;
if
(
addr
.
raw
.
family
=
=
AF_INET
)
{
EXPECT_EQ
(
addr
.
GetIpAddressSpace
(
)
testCase
.
mExpectedSpace
)
<
<
"
Failed
for
IP
:
"
<
<
testCase
.
mIp
;
}
else
if
(
addr
.
GetIpAddressSpace
(
)
=
=
AF_INET6
)
{
EXPECT_EQ
(
addr
.
GetIpAddressSpace
(
)
testCase
.
mExpectedSpace
)
<
<
"
Failed
for
IP
:
"
<
<
testCase
.
mIp
;
}
}
}
