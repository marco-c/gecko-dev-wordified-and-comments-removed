#
include
<
ostream
>
#
include
"
gtest
/
gtest
-
param
-
test
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
gtest
/
MozAssertions
.
h
"
#
include
"
nsNetUtil
.
h
"
using
namespace
mozilla
:
:
net
;
struct
TestData
{
bool
mResult
;
const
nsCString
mHeader
;
const
nsCString
mMatchVal
;
const
nsCString
mMatchIdVal
;
const
nsCString
mTypeVal
;
const
nsCString
mMatchDestVal
[
5
]
;
}
;
TEST
(
TestUseAsDictionary
Match
)
{
const
struct
TestData
gTestArray
[
]
=
{
{
true
"
match
=
\
"
/
app
/
*
/
main
.
js
\
"
"
_ns
"
/
app
/
*
/
main
.
js
"
_ns
"
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
app
/
*
/
main
.
js
\
"
id
=
\
"
some_id
\
"
"
_ns
"
/
app
/
*
/
main
.
js
"
_ns
"
some_id
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
false
"
id
=
\
"
some_id
\
"
"
_ns
"
"
_ns
"
some_id
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
app
/
*
/
main
.
js
\
"
id
=
\
"
some_id
\
"
type
=
raw
"
_ns
"
/
app
/
*
/
main
.
js
"
_ns
"
some_id
"
_ns
"
raw
"
_ns
{
"
"
_ns
}
}
{
false
"
match
=
\
"
/
app
/
*
/
main
.
js
\
"
id
=
\
"
some_id
\
"
type
=
not_raw
"
_ns
"
/
app
/
*
/
main
.
js
"
_ns
"
some_id
"
_ns
"
raw
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
app
/
*
/
main
.
js
\
"
id
=
\
"
some_id
\
"
match
-
dest
=
(
\
"
style
\
"
)
"
_ns
"
/
app
/
*
/
main
.
js
"
_ns
"
some_id
"
_ns
"
"
_ns
{
"
style
"
_ns
"
"
_ns
}
}
{
true
"
match
=
\
"
/
app
/
*
/
main
.
js
\
"
id
=
\
"
some_id
\
"
match
-
dest
=
(
\
"
style
\
"
)
type
=
raw
"
_ns
"
/
app
/
*
/
main
.
js
"
_ns
"
some_id
"
_ns
"
raw
"
_ns
{
"
style
"
_ns
"
"
_ns
}
}
{
true
"
match
=
\
"
/
app
/
*
/
main
.
js
\
"
id
=
\
"
some_id
\
"
match
-
dest
=
(
\
"
style
\
"
\
"
document
\
"
)
type
=
raw
"
_ns
"
/
app
/
*
/
main
.
js
"
_ns
"
some_id
"
_ns
"
raw
"
_ns
{
"
style
"
_ns
"
document
"
_ns
"
"
_ns
}
}
{
false
"
match
=
\
"
/
app
/
*
/
main
.
js
\
"
id
=
\
"
some_id
\
"
match
-
dest
=
(
\
"
style
\
"
\
"
document
\
"
)
type
=
raw
"
_ns
"
/
app
/
*
/
main
.
js
"
_ns
"
some_id
"
_ns
"
raw
"
_ns
{
"
style
"
_ns
"
document
"
_ns
"
"
_ns
}
}
{
false
"
match
=
/
app
/
*
/
main
.
js
id
=
\
"
id1
\
"
"
_ns
"
"
_ns
"
id1
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
foo
.
js
\
"
foo
=
bar
"
_ns
"
/
foo
.
js
"
_ns
"
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
foo
.
js
\
"
id
=
\
"
id2
\
"
"
_ns
"
/
foo
.
js
"
_ns
"
id2
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
false
"
match
=
\
"
\
"
"
_ns
"
"
_ns
"
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
foo
.
js
\
"
match
=
\
"
/
bar
.
js
\
"
"
_ns
"
/
bar
.
js
"
_ns
"
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
foo
.
js
\
"
id
=
\
"
id1
\
"
id
=
\
"
id2
\
"
"
_ns
"
/
foo
.
js
"
_ns
"
id2
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
true
"
id
=
\
"
id3
\
"
match
=
\
"
/
foo
.
js
\
"
"
_ns
"
/
foo
.
js
"
_ns
"
id3
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
false
"
match
=
\
"
/
foo
.
js
\
"
type
=
compressed
"
_ns
"
/
foo
.
js
"
_ns
"
"
_ns
"
raw
"
_ns
{
"
"
_ns
}
}
{
false
"
"
_ns
"
"
_ns
"
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
foo
.
js
\
"
match
-
dest
=
(
)
"
_ns
"
/
foo
.
js
"
_ns
"
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
foo
.
js
\
"
match
-
dest
=
(
\
"
a
\
"
\
"
b
\
"
)
"
_ns
"
/
foo
.
js
"
_ns
"
"
_ns
"
"
_ns
{
"
a
"
_ns
"
b
"
_ns
"
"
_ns
}
}
{
false
"
match
=
\
"
/
foo
.
js
\
"
match
-
dest
=
(
a
)
"
_ns
"
/
foo
.
js
"
_ns
"
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
foo
.
js
\
"
match
-
dest
=
(
\
"
a
\
"
\
"
a
\
"
)
"
_ns
"
/
foo
.
js
"
_ns
"
"
_ns
"
"
_ns
{
"
a
"
_ns
"
a
"
_ns
"
"
_ns
}
}
{
false
"
match
=
\
"
/
foo
.
js
\
"
type
=
RAW
"
_ns
"
/
foo
.
js
"
_ns
"
"
_ns
"
raw
"
_ns
{
"
"
_ns
}
}
{
true
"
match
=
\
"
/
foo
.
js
\
"
match
-
dest
=
(
\
"
a
\
"
)
"
_ns
"
/
foo
.
js
"
_ns
"
"
_ns
"
"
_ns
{
"
a
"
_ns
"
"
_ns
}
}
{
true
"
match
=
\
"
/
foo
.
js
\
"
match
-
dest
=
(
)
"
_ns
"
/
foo
.
js
"
_ns
"
"
_ns
"
"
_ns
{
"
"
_ns
}
}
{
false
"
match
=
\
"
/
foo
.
js
\
"
match
-
dest
=
(
\
"
a
\
"
\
"
b
\
"
)
"
_ns
"
/
foo
.
js
"
_ns
"
"
_ns
"
"
_ns
{
"
a
"
_ns
"
b
"
_ns
"
"
_ns
}
}
}
;
for
(
auto
&
test
:
gTestArray
)
{
nsCString
match
matchId
type
;
nsTArray
<
nsCString
>
matchDest
;
nsTArray
<
nsCString
>
matchDestVal
;
for
(
auto
&
dest
:
test
.
mMatchDestVal
)
{
if
(
dest
.
IsEmpty
(
)
)
{
break
;
}
matchDestVal
.
AppendElement
(
dest
)
;
}
fprintf
(
stderr
"
Testing
%
s
\
n
"
test
.
mHeader
.
get
(
)
)
;
ASSERT_EQ
(
NS_ParseUseAsDictionary
(
test
.
mHeader
match
matchId
matchDest
type
)
test
.
mResult
)
;
if
(
test
.
mResult
)
{
ASSERT_EQ
(
match
test
.
mMatchVal
)
;
ASSERT_EQ
(
matchId
test
.
mMatchIdVal
)
;
ASSERT_EQ
(
matchDest
.
Length
(
)
matchDestVal
.
Length
(
)
)
;
for
(
size_t
i
=
0
;
i
<
matchDest
.
Length
(
)
;
i
+
+
)
{
ASSERT_EQ
(
matchDest
[
i
]
matchDestVal
[
i
]
)
;
}
ASSERT_EQ
(
type
test
.
mTypeVal
)
;
}
}
}
