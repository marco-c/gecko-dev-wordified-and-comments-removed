"
use
strict
"
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
Services
.
prefs
.
setCharPref
(
"
dom
.
securecontext
.
allowlist
"
"
example
.
com
example
.
net
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
early
-
hints
.
enabled
"
true
)
;
async
function
test_hint_preload
(
testName
requestFrom
imgUrl
expectedRequestCount
uuid
=
undefined
)
{
if
(
uuid
=
=
undefined
)
{
uuid
=
Services
.
uuid
.
generateUUID
(
)
;
}
await
test_hint_preload_internal
(
testName
requestFrom
[
[
imgUrl
uuid
.
toString
(
)
]
]
expectedRequestCount
)
;
}
async
function
test_hint_preload_internal
(
testName
requestFrom
imgUrls
expectedRequestCount
)
{
let
headers
=
new
Headers
(
)
;
headers
.
append
(
"
X
-
Early
-
Hint
-
Count
-
Start
"
"
"
)
;
await
fetch
(
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
{
headers
}
)
;
let
requestUrl
=
requestFrom
+
"
/
browser
/
netwerk
/
test
/
browser
/
early_hint_main_html
.
sjs
?
"
+
new
URLSearchParams
(
imgUrls
)
.
toString
(
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
requestUrl
waitForLoad
:
true
}
async
function
(
)
{
}
)
;
let
gotRequestCount
=
await
fetch
(
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
)
.
then
(
response
=
>
response
.
json
(
)
)
;
await
Assert
.
deepEqual
(
gotRequestCount
expectedRequestCount
testName
+
"
:
Unexpected
amount
of
requests
made
"
)
;
}
add_task
(
async
function
test_103_two_preload_header
(
)
{
await
test_hint_preload_internal
(
"
103_two_preload_header
"
"
http
:
/
/
example
.
com
"
[
[
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
[
"
"
"
new_response
"
]
[
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
]
{
hinted
:
2
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_two_preload_header
(
)
{
await
test_hint_preload_internal
(
"
103_two_preload_header
"
"
http
:
/
/
example
.
com
"
[
[
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
[
"
"
"
"
]
[
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
]
{
hinted
:
2
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_two_preload_header
(
)
{
await
test_hint_preload_internal
(
"
103_two_preload_header
"
"
http
:
/
/
example
.
com
"
[
[
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
[
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
]
{
hinted
:
2
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_twice
(
)
{
let
uuid
=
Services
.
uuid
.
generateUUID
(
)
;
await
test_hint_preload
(
"
test_103_preload
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
uuid
)
;
await
test_hint_preload
(
"
test_103_preload
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
0
}
uuid
)
;
}
)
;
add_task
(
async
function
test_103_preload
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
early
-
hints
.
enabled
"
false
)
;
await
test_hint_preload
(
"
test_103_preload
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
1
}
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
early
-
hints
.
enabled
"
true
)
;
}
)
;
add_task
(
async
function
test_103_preload_https
(
)
{
await
test_hint_preload
(
"
test_103_preload_https
"
"
https
:
/
/
example
.
org
"
"
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_preload
(
)
{
await
test_hint_preload
(
"
test_103_preload
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_cor
(
)
{
await
test_hint_preload
(
"
test_103_preload_cor
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
net
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_insecure_cor
(
)
{
await
test_hint_preload
(
"
test_103_preload_insecure_cor
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_relative_preload
(
)
{
await
test_hint_preload
(
"
test_103_relative_preload
"
"
http
:
/
/
example
.
com
"
"
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_insecure_preload
(
)
{
await
test_hint_preload
(
"
test_103_insecure_preload
"
"
http
:
/
/
mochi
.
test
:
8888
"
"
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_redirect_same_origin
(
)
{
await
test_hint_preload
(
"
test_103_redirect_same_origin
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_redirect
.
sjs
?
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
2
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_redirect_cross_origin
(
)
{
await
test_hint_preload
(
"
test_103_redirect_cross_origin
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_redirect
.
sjs
?
http
:
/
/
example
.
net
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_redirect_insecure_cross_origin
(
)
{
await
test_hint_preload
(
"
test_103_redirect_insecure_cross_origin
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_redirect
.
sjs
?
http
:
/
/
mochi
.
test
:
8888
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_mixed_content
(
)
{
await
test_hint_preload
(
"
test_103_preload_mixed_content
"
"
https
:
/
/
example
.
org
"
"
http
:
/
/
example
.
org
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_redirect_mixed_content
(
)
{
await
test_hint_preload
(
"
test_103_preload_redirect_mixed_content
"
"
https
:
/
/
example
.
org
"
"
https
:
/
/
example
.
org
/
browser
/
netwerk
/
test
/
browser
/
early_hint_redirect
.
sjs
?
http
:
/
/
example
.
org
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_only_file
(
)
{
await
test_hint_preload
(
"
test_103_preload_only_file
"
"
http
:
/
/
example
.
com
"
"
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_preload_csp_imgsrc_none
(
)
{
let
headers
=
new
Headers
(
)
;
headers
.
append
(
"
X
-
Early
-
Hint
-
Count
-
Start
"
"
"
)
;
await
fetch
(
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
{
headers
}
)
;
let
requestUrl
=
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
103_preload_csp_imgsrc_none
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
requestUrl
waitForLoad
:
true
}
async
function
(
browser
)
{
let
noImgLoaded
=
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
let
loadInfo
=
content
.
performance
.
getEntriesByName
(
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
?
1ac2a5e1
-
90c7
-
4171
-
b0f0
-
676f7d899af3
"
)
;
return
loadInfo
.
every
(
entry
=
>
entry
.
decodedBodySize
=
=
=
0
)
;
}
)
;
await
Assert
.
ok
(
noImgLoaded
"
test_preload_csp_imgsrc_none
:
Image
dislpayed
unexpectedly
"
)
;
}
)
;
let
gotRequestCount
=
await
fetch
(
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
)
.
then
(
response
=
>
response
.
json
(
)
)
;
await
Assert
.
deepEqual
(
gotRequestCount
{
hinted
:
1
normal
:
0
}
"
test_preload_csp_imgsrc_none
:
Unexpected
amount
of
requests
made
"
)
;
}
)
;
add_task
(
async
function
test_103_error_400
(
)
{
await
test_hint_preload
(
"
test_103_error_400
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
400
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_error_401
(
)
{
await
test_hint_preload
(
"
test_103_error_401
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
401
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_error_403
(
)
{
await
test_hint_preload
(
"
test_103_error_403
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
403
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_error_404
(
)
{
await
test_hint_preload
(
"
test_103_error_404
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
404
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_error_408
(
)
{
await
test_hint_preload
(
"
test_103_error_408
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
408
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_error_410
(
)
{
await
test_hint_preload
(
"
test_103_error_410
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
410
"
{
hinted
:
1
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_error_429
(
)
{
await
test_hint_preload
(
"
test_103_error_429
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
429
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_error_500
(
)
{
await
test_hint_preload
(
"
test_103_error_500
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
500
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_error_502
(
)
{
await
test_hint_preload
(
"
test_103_error_502
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
502
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_error_503
(
)
{
await
test_hint_preload
(
"
test_103_error_503
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
503
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_error_504
(
)
{
await
test_hint_preload
(
"
test_103_error_504
"
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_error
.
sjs
?
504
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_iframe
(
)
{
let
headers
=
new
Headers
(
)
;
headers
.
append
(
"
X
-
Early
-
Hint
-
Count
-
Start
"
"
"
)
;
await
fetch
(
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
{
headers
}
)
;
let
iframeUri
=
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
103_preload_iframe
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
iframeUri
waitForLoad
:
true
}
async
function
(
)
{
}
)
;
let
gotRequestCount
=
await
fetch
(
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
)
.
then
(
response
=
>
response
.
json
(
)
)
;
await
Assert
.
deepEqual
(
gotRequestCount
{
hinted
:
0
normal
:
1
}
"
test_103_iframe
:
Unexpected
amount
of
requests
made
"
)
;
}
)
;
