"
use
strict
"
;
Services
.
prefs
.
setBoolPref
(
"
network
.
early
-
hints
.
enabled
"
true
)
;
const
{
lax_request_count_checking
test_hint_preload_internal
test_hint_preload
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
early_hint_preload_test_helper
.
jsm
"
)
;
add_task
(
async
function
test_103_two_preload_responses
(
)
{
await
test_hint_preload_internal
(
"
103_two_preload_responses
"
"
https
:
/
/
example
.
com
"
[
[
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
[
"
"
"
new_response
"
]
[
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
]
{
hinted
:
2
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_two_link_header
(
)
{
await
test_hint_preload_internal
(
"
103_two_link_header
"
"
https
:
/
/
example
.
com
"
[
[
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
[
"
"
"
"
]
[
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
]
{
hinted
:
2
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_two_links
(
)
{
await
test_hint_preload_internal
(
"
103_two_links
"
"
https
:
/
/
example
.
com
"
[
[
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
[
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
]
]
{
hinted
:
2
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_twice
(
)
{
let
uuid
=
Services
.
uuid
.
generateUUID
(
)
;
await
test_hint_preload
(
"
test_103_preload_twice_1
"
"
https
:
/
/
example
.
com
"
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
uuid
)
;
await
test_hint_preload
(
"
test_103_preload_twice_2
"
"
https
:
/
/
example
.
com
"
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
0
}
uuid
)
;
}
)
;
add_task
(
async
function
test_103_preload_disabled
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
early
-
hints
.
enabled
"
false
)
;
await
test_hint_preload
(
"
test_103_preload_disabled
"
"
https
:
/
/
example
.
com
"
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
1
}
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
early
-
hints
.
enabled
"
true
)
;
}
)
;
add_task
(
async
function
test_103_preload_https
(
)
{
await
test_hint_preload
(
"
test_103_preload_https
"
"
https
:
/
/
example
.
org
"
"
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_preload
(
)
{
await
test_hint_preload
(
"
test_103_preload
"
"
https
:
/
/
example
.
com
"
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_cor
(
)
{
await
test_hint_preload
(
"
test_103_preload_cor
"
"
https
:
/
/
example
.
com
"
"
https
:
/
/
example
.
net
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_insecure_cor
(
)
{
await
test_hint_preload
(
"
test_103_preload_insecure_cor
"
"
https
:
/
/
example
.
com
"
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_relative_preload
(
)
{
await
test_hint_preload
(
"
test_103_relative_preload
"
"
https
:
/
/
example
.
com
"
"
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_insecure_preload
(
)
{
await
test_hint_preload
(
"
test_103_insecure_preload
"
"
http
:
/
/
mochi
.
test
:
8888
"
"
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_redirect_same_origin
(
)
{
await
test_hint_preload
(
"
test_103_redirect_same_origin
"
"
https
:
/
/
example
.
com
"
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_redirect
.
sjs
?
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
2
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_redirect_cross_origin
(
)
{
await
test_hint_preload
(
"
test_103_redirect_cross_origin
"
"
https
:
/
/
example
.
com
"
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_redirect
.
sjs
?
https
:
/
/
example
.
net
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
2
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_103_redirect_insecure_cross_origin
(
)
{
await
test_hint_preload
(
"
test_103_redirect_insecure_cross_origin
"
"
https
:
/
/
example
.
com
"
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_redirect
.
sjs
?
http
:
/
/
mochi
.
test
:
8888
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_mixed_content
(
)
{
await
test_hint_preload
(
"
test_103_preload_mixed_content
"
"
https
:
/
/
example
.
org
"
"
http
:
/
/
example
.
org
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
0
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_redirect_mixed_content
(
)
{
await
test_hint_preload
(
"
test_103_preload_redirect_mixed_content
"
"
https
:
/
/
example
.
org
"
"
https
:
/
/
example
.
org
/
browser
/
netwerk
/
test
/
browser
/
early_hint_redirect
.
sjs
?
http
:
/
/
example
.
org
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
1
}
)
;
}
)
;
add_task
(
async
function
test_103_preload_only_file
(
)
{
await
test_hint_preload
(
"
test_103_preload_only_file
"
"
https
:
/
/
example
.
com
"
"
early_hint_pixel
.
sjs
"
{
hinted
:
1
normal
:
0
}
)
;
}
)
;
add_task
(
async
function
test_preload_csp_imgsrc_none
(
)
{
let
headers
=
new
Headers
(
)
;
headers
.
append
(
"
X
-
Early
-
Hint
-
Count
-
Start
"
"
"
)
;
await
fetch
(
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
{
headers
}
)
;
let
requestUrl
=
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
103_preload_csp_imgsrc_none
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
requestUrl
waitForLoad
:
true
}
async
function
(
browser
)
{
let
noImgLoaded
=
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
let
loadInfo
=
content
.
performance
.
getEntriesByName
(
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel
.
sjs
?
1ac2a5e1
-
90c7
-
4171
-
b0f0
-
676f7d899af3
"
)
;
return
loadInfo
.
every
(
entry
=
>
entry
.
decodedBodySize
=
=
=
0
)
;
}
)
;
await
Assert
.
ok
(
noImgLoaded
"
test_preload_csp_imgsrc_none
:
Image
dislpayed
unexpectedly
"
)
;
}
)
;
let
gotRequestCount
=
await
fetch
(
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
)
.
then
(
response
=
>
response
.
json
(
)
)
;
let
expectedRequestCount
=
{
hinted
:
1
normal
:
0
}
;
await
lax_request_count_checking
(
"
test_preload_csp_imgsrc_none
"
gotRequestCount
expectedRequestCount
)
;
Services
.
cache2
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_103_iframe
(
)
{
let
headers
=
new
Headers
(
)
;
headers
.
append
(
"
X
-
Early
-
Hint
-
Count
-
Start
"
"
"
)
;
await
fetch
(
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
{
headers
}
)
;
let
iframeUri
=
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
103_preload_iframe
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
iframeUri
waitForLoad
:
true
}
async
function
(
)
{
}
)
;
let
gotRequestCount
=
await
fetch
(
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
)
.
then
(
response
=
>
response
.
json
(
)
)
;
let
expectedRequestCount
=
{
hinted
:
0
normal
:
1
}
;
await
lax_request_count_checking
(
"
test_103_iframe
"
gotRequestCount
expectedRequestCount
)
;
Services
.
cache2
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_103_anchor
(
)
{
let
headers
=
new
Headers
(
)
;
headers
.
append
(
"
X
-
Early
-
Hint
-
Count
-
Start
"
"
"
)
;
await
fetch
(
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
{
headers
}
)
;
let
anchorUri
=
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
103_preload_anchor
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
anchorUri
waitForLoad
:
true
}
async
function
(
)
{
}
)
;
let
gotRequestCount
=
await
fetch
(
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
early_hint_pixel_count
.
sjs
"
)
.
then
(
response
=
>
response
.
json
(
)
)
;
await
Assert
.
deepEqual
(
gotRequestCount
{
hinted
:
1
normal
:
0
}
"
test_103_anchor
:
Unexpected
amount
of
requests
made
"
)
;
}
)
;
