"
use
strict
"
;
const
{
HTTPS_EXAMPLE_ORG
HTTPS_EXAMPLE_COM
HTTP_EXAMPLE_COM
browserTestPath
waitForAllExpectedTests
cleanupObservers
checkExpectedCookies
preclean_test
cleanup_test
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
cookie_filtering_helper
.
jsm
"
)
;
async
function
runSuiteWithContentListener
(
name
trigger_suite_func
expected
)
{
return
async
function
(
browser
)
{
info
(
"
Running
content
suite
:
"
+
name
)
;
await
SpecialPowers
.
spawn
(
browser
[
expected
name
]
checkExpectedCookies
)
;
await
trigger_suite_func
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
waitForAllExpectedTests
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
cleanupObservers
)
;
info
(
"
Complete
content
suite
:
"
+
name
)
;
}
;
}
async
function
test_cross_origin_resource_com
(
)
{
let
comExpected
=
[
]
;
comExpected
.
push
(
"
test
-
cookie
=
comhtml
"
)
;
comExpected
.
push
(
"
test
-
cookie
=
png
"
)
;
comExpected
.
push
(
"
test
-
cookie
=
orghtml
"
)
;
comExpected
.
push
(
"
test
-
cookie
=
png
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
browserTestPath
(
HTTPS_EXAMPLE_COM
)
}
await
runSuiteWithContentListener
(
"
COR
example
.
com
"
triggerCrossOriginSuite
comExpected
)
)
;
Services
.
cookies
.
removeAll
(
)
;
}
async
function
test_cross_origin_resource_org
(
)
{
let
orgExpected
=
[
]
;
orgExpected
.
push
(
"
test
-
cookie
=
png
"
)
;
orgExpected
.
push
(
"
test
-
cookie
=
orghtml
"
)
;
orgExpected
.
push
(
"
test
-
cookie
=
png
"
)
;
orgExpected
.
push
(
"
test
-
cookie
=
comhtml
"
)
;
orgExpected
.
push
(
"
test
-
cookie
=
png
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
browserTestPath
(
HTTPS_EXAMPLE_ORG
)
}
await
runSuiteWithContentListener
(
"
COR
example
.
org
"
triggerCrossOriginSuite
orgExpected
)
)
;
}
async
function
requestBrowserPageWithFilename
(
testName
requestFrom
filename
param
=
"
"
)
{
let
url
=
requestFrom
+
"
/
browser
/
netwerk
/
test
/
browser
/
"
+
filename
;
if
(
param
!
=
"
"
)
{
url
+
=
"
?
"
+
param
;
}
info
(
"
requesting
"
+
url
+
"
(
"
+
testName
+
"
)
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
(
)
=
>
{
}
)
;
}
async
function
triggerCrossOriginSuite
(
)
{
await
requestBrowserPageWithFilename
(
"
SameSite
resource
(
com
)
"
HTTPS_EXAMPLE_COM
"
cookie_filtering_secure_resource_com
.
html
"
)
;
await
requestBrowserPageWithFilename
(
"
COR
(
com
-
org
)
"
HTTPS_EXAMPLE_COM
"
cookie_filtering_secure_resource_org
.
html
"
)
;
await
requestBrowserPageWithFilename
(
"
SameSite
resource
(
org
)
"
HTTPS_EXAMPLE_ORG
"
cookie_filtering_secure_resource_org
.
html
"
)
;
await
requestBrowserPageWithFilename
(
"
SameSite
resource
(
org
-
com
)
"
HTTPS_EXAMPLE_ORG
"
cookie_filtering_secure_resource_com
.
html
"
)
;
await
requestBrowserPageWithFilename
(
"
COR
sentinel
"
HTTPS_EXAMPLE_ORG
"
cookie_filtering_square
.
png
"
)
;
}
add_task
(
preclean_test
)
;
add_task
(
test_cross_origin_resource_com
)
;
add_task
(
test_cross_origin_resource_org
)
;
add_task
(
cleanup_test
)
;
