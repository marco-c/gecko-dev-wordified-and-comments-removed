const
gDashboard
=
Cc
[
"
mozilla
.
org
/
network
/
dashboard
;
1
"
]
.
getService
(
Ci
.
nsIDashboard
)
;
let
existingPACScript
=
Services
.
prefs
.
getCharPref
(
"
network
.
proxy
.
autoconfig_url
"
)
;
let
findProxyForURLFunction
=
"
function
FindProxyForURL
(
url
host
)
{
"
;
let
directDnsPacScript
=
existingPACScript
.
replace
(
findProxyForURLFunction
{
findProxyForURLFunction
}
dnsResolve
(
host
)
;
)
;
Services
.
prefs
.
setStringPref
(
"
network
.
proxy
.
autoconfig_url
"
directDnsPacScript
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
dns
.
prefetch_via_proxy
"
true
)
;
let
initialHttpsFirst
=
Services
.
prefs
.
getBoolPref
(
"
dom
.
security
.
https_first
"
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
security
.
https_first
"
false
)
;
Services
.
dns
.
QueryInterface
(
Ci
.
nsPIDNSService
)
.
prefetchEnabled
=
true
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
setCharPref
(
"
network
.
proxy
.
autoconfig_url
"
existingPACScript
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
prefetch_via_proxy
"
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
security
.
https_first
"
initialHttpsFirst
)
;
Services
.
dns
.
QueryInterface
(
Ci
.
nsPIDNSService
)
.
prefetchEnabled
=
false
;
}
)
;
async
function
isRecordFound
(
hostname
)
{
return
new
Promise
(
resolve
=
>
{
gDashboard
.
requestDNSInfo
(
function
(
data
)
{
let
found
=
false
;
for
(
let
i
=
0
;
i
<
data
.
entries
.
length
;
i
+
+
)
{
if
(
data
.
entries
[
i
]
.
hostname
=
=
hostname
)
{
found
=
true
;
break
;
}
}
resolve
(
found
)
;
}
)
;
}
)
;
}
let
https_requestUrl
=
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
file_link_dns_prefetch
.
sjs
;
let
http_requestUrl
=
http
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
file_link_dns_prefetch
.
sjs
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
test
.
wait300msAfterTabSwitch
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_https_dns_prefetch
(
)
{
Services
.
dns
.
clearCache
(
true
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
https_requestUrl
waitForLoad
:
true
}
async
function
(
)
{
}
)
;
Assert
.
ok
(
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
isRecordFound
(
"
example
.
org
"
)
;
}
)
"
Record
from
link
rel
=
dns
-
prefetch
element
should
be
found
"
)
;
Assert
.
ok
(
await
isRecordFound
(
"
example
.
com
"
)
"
Host
record
should
be
found
"
)
;
}
)
;
add_task
(
async
function
test_http_dns_prefetch
(
)
{
Services
.
dns
.
clearCache
(
true
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
http_requestUrl
waitForLoad
:
true
}
async
function
(
)
{
}
)
;
Assert
.
ok
(
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
isRecordFound
(
"
example
.
org
"
)
;
}
)
"
Record
from
link
rel
=
dns
-
prefetch
element
should
be
found
"
)
;
Assert
.
ok
(
await
isRecordFound
(
"
example
.
com
"
)
"
Host
record
should
be
found
"
)
;
}
)
;
add_task
(
async
function
test_https_dns_prefetch_disabled
(
)
{
Services
.
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
dns
.
disablePrefetchFromHTTPS
"
true
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
https_requestUrl
waitForLoad
:
true
}
async
function
(
)
{
}
)
;
Assert
.
ok
(
await
isRecordFound
(
"
example
.
com
"
)
"
Host
record
should
be
found
"
)
;
Assert
.
ok
(
!
(
await
isRecordFound
(
"
example
.
org
"
)
)
"
Record
from
link
rel
=
dns
-
prefetch
element
should
not
be
found
with
disablePrefetchFromHTTPS
set
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
disablePrefetchFromHTTPS
"
)
;
}
)
;
add_task
(
async
function
test_http_dns_prefetch_disabled
(
)
{
Services
.
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
dns
.
disablePrefetchFromHTTPS
"
true
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
http_requestUrl
waitForLoad
:
true
}
async
function
(
)
{
}
)
;
Assert
.
ok
(
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
isRecordFound
(
"
example
.
org
"
)
;
}
)
"
Record
from
link
rel
=
dns
-
prefetch
element
should
be
found
on
http
page
with
disablePrefetchFromHTTPS
set
"
)
;
Assert
.
ok
(
await
isRecordFound
(
"
example
.
com
"
)
"
Host
record
should
be
found
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
disablePrefetchFromHTTPS
"
)
;
}
)
;
add_task
(
async
function
test_https_anchor_speculative_dns_prefetch
(
)
{
Services
.
dns
.
clearCache
(
true
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
https_requestUrl
waitForLoad
:
true
}
async
function
(
)
{
Assert
.
ok
(
await
isRecordFound
(
"
example
.
com
"
)
"
Host
record
should
be
found
"
)
;
Assert
.
ok
(
!
(
await
isRecordFound
(
"
www
.
mozilla
.
org
"
)
)
"
By
default
we
do
not
speculatively
prefetch
dns
for
anchor
elements
on
https
documents
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
prefetch_dns_for_anchor_https_document
"
true
)
;
Services
.
dns
.
clearCache
(
true
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
https_requestUrl
waitForLoad
:
true
}
async
function
(
)
{
Assert
.
ok
(
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
isRecordFound
(
"
www
.
mozilla
.
org
"
)
;
}
)
"
Speculatively
prefetch
dns
for
anchor
elements
on
https
documents
"
)
;
Assert
.
ok
(
await
isRecordFound
(
"
example
.
com
"
)
"
Host
record
should
be
found
"
)
;
}
)
;
Services
.
prefs
.
clearUserPref
(
"
dom
.
prefetch_dns_for_anchor_https_document
"
)
;
}
)
;
add_task
(
async
function
test_http_anchor_speculative_dns_prefetch
(
)
{
Services
.
dns
.
clearCache
(
true
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
http_requestUrl
waitForLoad
:
true
}
async
function
(
)
{
Assert
.
ok
(
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
isRecordFound
(
"
example
.
org
"
)
;
}
)
"
Record
from
link
rel
=
dns
-
prefetch
element
should
be
found
"
)
;
Assert
.
ok
(
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
isRecordFound
(
"
www
.
mozilla
.
org
"
)
;
}
)
"
By
default
we
speculatively
prefetch
dns
for
anchor
elements
on
http
documents
"
)
;
Assert
.
ok
(
await
isRecordFound
(
"
example
.
com
"
)
"
Host
record
should
be
found
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
prefetch_dns_for_anchor_http_document
"
false
)
;
Services
.
dns
.
clearCache
(
true
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
http_requestUrl
waitForLoad
:
true
}
async
function
(
)
{
Assert
.
ok
(
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
isRecordFound
(
"
example
.
org
"
)
;
}
)
"
Record
from
link
rel
=
dns
-
prefetch
element
should
be
found
"
)
;
Assert
.
ok
(
!
(
await
isRecordFound
(
"
www
.
mozilla
.
org
"
)
)
"
We
disabled
speculative
prefetch
dns
for
anchor
elements
on
http
documents
"
)
;
Assert
.
ok
(
await
isRecordFound
(
"
example
.
com
"
)
"
Host
record
should
be
found
"
)
;
}
)
;
Services
.
prefs
.
clearUserPref
(
"
dom
.
prefetch_dns_for_anchor_http_document
"
)
;
}
)
;
