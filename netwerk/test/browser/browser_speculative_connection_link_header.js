Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
debug
-
observations
"
true
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
debug
-
observations
"
)
;
}
)
;
add_task
(
async
function
test_link_preconnect
(
)
{
let
requestUrl
=
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
file_link_header
.
sjs
;
let
observed
=
"
"
;
let
observer
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
speculative
-
connect
-
request
"
)
{
Services
.
obs
.
removeObserver
(
observer
"
speculative
-
connect
-
request
"
)
;
observed
=
aData
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
speculative
-
connect
-
request
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
requestUrl
waitForLoad
:
true
}
async
function
(
)
{
}
)
;
let
hostPortRegex
=
/
\
[
.
*
\
]
(
.
*
?
)
\
^
/
;
let
hostPortMatch
=
hostPortRegex
.
exec
(
observed
)
;
let
hostPort
=
hostPortMatch
?
hostPortMatch
[
1
]
:
"
"
;
let
partitionKeyRegex
=
/
\
^
partitionKey
=
(
.
*
)
/
;
let
partitionKeyMatch
=
partitionKeyRegex
.
exec
(
observed
)
;
let
partitionKey
=
partitionKeyMatch
?
partitionKeyMatch
[
1
]
:
"
"
;
Assert
.
equal
(
hostPort
"
localhost
:
443
"
)
;
Assert
.
equal
(
partitionKey
"
%
28https
%
2Cexample
.
com
%
29
"
)
;
}
)
;
