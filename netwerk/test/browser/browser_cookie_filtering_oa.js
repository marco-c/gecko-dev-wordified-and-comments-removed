"
use
strict
"
;
const
{
HTTPS_EXAMPLE_ORG
HTTPS_EXAMPLE_COM
HTTP_EXAMPLE_COM
browserTestPath
waitForAllExpectedTests
cleanupObservers
checkExpectedCookies
triggerSetCookieFromHttp
triggerSetCookieFromHttpPrivate
preclean_test
cleanup_test
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
cookie_filtering_helper
.
sys
.
mjs
"
)
;
async
function
test_origin_attributes
(
)
{
var
suite
=
oaSuite
(
)
;
let
t2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
browserTestPath
(
HTTPS_EXAMPLE_COM
)
)
;
let
testStruct2
=
{
name
:
"
OA
example
.
com
"
browser
:
gBrowser
.
getBrowserForTab
(
t2
)
tab
:
t2
expected
:
[
suite
[
0
]
suite
[
4
]
]
}
;
let
t4
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
(
function
(
)
{
return
function
(
)
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
HTTPS_EXAMPLE_COM
{
userContextId
:
1
}
)
;
}
;
}
)
(
)
}
)
;
let
testStruct4
=
{
name
:
"
OA
example
.
com
(
contextId
)
"
browser
:
gBrowser
.
getBrowserForTab
(
t4
)
tab
:
t4
expected
:
[
suite
[
2
]
suite
[
5
]
]
}
;
await
SpecialPowers
.
spawn
(
testStruct2
.
browser
[
testStruct2
.
expected
testStruct2
.
name
]
checkExpectedCookies
)
;
await
SpecialPowers
.
spawn
(
testStruct4
.
browser
[
testStruct4
.
expected
testStruct4
.
name
]
checkExpectedCookies
)
;
await
triggerOriginAttributesEmulatedSuite
(
)
;
await
SpecialPowers
.
spawn
(
testStruct2
.
browser
[
]
waitForAllExpectedTests
)
;
await
SpecialPowers
.
spawn
(
testStruct4
.
browser
[
]
waitForAllExpectedTests
)
;
await
SpecialPowers
.
spawn
(
testStruct2
.
browser
[
]
cleanupObservers
)
;
await
SpecialPowers
.
spawn
(
testStruct4
.
browser
[
]
cleanupObservers
)
;
BrowserTestUtils
.
removeTab
(
testStruct2
.
tab
)
;
BrowserTestUtils
.
removeTab
(
testStruct4
.
tab
)
;
}
async
function
test_private
(
)
{
var
suite
=
oaSuite
(
)
;
let
t2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
browserTestPath
(
HTTPS_EXAMPLE_COM
)
)
;
let
testStruct2
=
{
name
:
"
non
-
priv
example
.
com
"
browser
:
gBrowser
.
getBrowserForTab
(
t2
)
tab
:
t2
expected
:
[
suite
[
0
]
suite
[
4
]
]
}
;
let
privateBrowserWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
let
privateTab
=
(
privateBrowserWindow
.
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
privateBrowserWindow
.
gBrowser
browserTestPath
(
HTTPS_EXAMPLE_COM
)
)
)
;
let
testStruct5
=
{
name
:
"
private
example
.
com
"
browser
:
privateBrowserWindow
.
gBrowser
.
getBrowserForTab
(
privateTab
)
tab
:
privateTab
expected
:
[
suite
[
3
]
suite
[
6
]
]
}
;
await
BrowserTestUtils
.
browserLoaded
(
testStruct5
.
tab
.
linkedBrowser
)
;
let
parentpid
=
Services
.
appinfo
.
processID
;
let
privatePid
=
testStruct5
.
browser
.
frameLoader
.
remoteTab
.
osPid
;
let
pid
=
testStruct2
.
browser
.
frameLoader
.
remoteTab
.
osPid
;
ok
(
parentpid
!
=
privatePid
"
Parent
and
private
processes
are
unique
"
)
;
ok
(
parentpid
!
=
pid
"
Parent
and
non
-
private
processes
are
unique
"
)
;
ok
(
privatePid
!
=
pid
"
Private
and
non
-
private
processes
are
unique
"
)
;
await
SpecialPowers
.
spawn
(
testStruct2
.
browser
[
testStruct2
.
expected
testStruct2
.
name
]
checkExpectedCookies
)
;
await
SpecialPowers
.
spawn
(
testStruct5
.
browser
[
testStruct5
.
expected
testStruct5
.
name
]
checkExpectedCookies
)
;
await
triggerOriginAttributesEmulatedSuite
(
)
;
await
SpecialPowers
.
spawn
(
testStruct2
.
browser
[
]
waitForAllExpectedTests
)
;
await
SpecialPowers
.
spawn
(
testStruct5
.
browser
[
]
waitForAllExpectedTests
)
;
await
SpecialPowers
.
spawn
(
testStruct2
.
browser
[
]
cleanupObservers
)
;
await
SpecialPowers
.
spawn
(
testStruct5
.
browser
[
]
cleanupObservers
)
;
BrowserTestUtils
.
removeTab
(
testStruct2
.
tab
)
;
BrowserTestUtils
.
removeTab
(
testStruct5
.
tab
)
;
await
BrowserTestUtils
.
closeWindow
(
privateBrowserWindow
)
;
}
function
oaSuite
(
)
{
var
suite
=
[
]
;
suite
.
push
(
"
test
-
cookie
=
orgwontsee
"
)
;
suite
.
push
(
"
test
-
cookie
=
firstparty
"
)
;
suite
.
push
(
"
test
-
cookie
=
usercontext
"
)
;
suite
.
push
(
"
test
-
cookie
=
privateonly
"
)
;
suite
.
push
(
"
test
-
cookie
=
sentinelcom
"
)
;
suite
.
push
(
"
test
-
cookie
=
sentineloa
"
)
;
suite
.
push
(
"
test
-
cookie
=
sentinelprivate
"
)
;
return
suite
;
}
async
function
triggerOriginAttributesEmulatedSuite
(
)
{
var
suite
=
oaSuite
(
)
;
let
uriCom
=
NetUtil
.
newURI
(
HTTPS_EXAMPLE_COM
)
;
triggerSetCookieFromHttp
(
uriCom
suite
[
0
]
)
;
triggerSetCookieFromHttp
(
uriCom
suite
[
1
]
"
foo
.
com
"
)
;
triggerSetCookieFromHttp
(
uriCom
suite
[
2
]
"
"
1
)
;
triggerSetCookieFromHttpPrivate
(
uriCom
suite
[
3
]
)
;
triggerSetCookieFromHttp
(
uriCom
suite
[
4
]
)
;
triggerSetCookieFromHttp
(
uriCom
suite
[
5
]
"
"
1
)
;
triggerSetCookieFromHttpPrivate
(
uriCom
suite
[
6
]
)
;
}
add_task
(
preclean_test
)
;
add_task
(
test_origin_attributes
)
;
add_task
(
test_private
)
;
add_task
(
cleanup_test
)
;
