"
use
strict
"
;
Services
.
prefs
.
setBoolPref
(
"
network
.
early
-
hints
.
enabled
"
true
)
;
add_task
(
async
function
test_103_cancel_parent_connect
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
early
-
hints
.
parent
-
connect
-
timeout
"
1
]
]
}
)
;
let
callback
;
let
promise
=
new
Promise
(
resolve
=
>
{
callback
=
resolve
;
}
)
;
let
observed_cancel_reason
=
"
"
;
let
observer
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
observe
(
aSubject
aTopic
)
{
aSubject
=
aSubject
.
QueryInterface
(
Ci
.
nsIRequest
)
;
if
(
aTopic
=
=
"
http
-
on
-
stop
-
request
"
&
&
aSubject
.
name
=
=
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
square
.
png
"
)
{
observed_cancel_reason
=
aSubject
.
canceledReason
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
stop
-
request
"
)
;
callback
(
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
stop
-
request
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
103_preload_no_img
.
html
"
waitForLoad
:
true
}
async
function
(
)
{
}
)
;
await
promise
;
Assert
.
equal
(
observed_cancel_reason
"
parent
-
connect
-
timeout
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
early
-
hints
.
parent
-
connect
-
timeout
"
)
;
}
)
;
