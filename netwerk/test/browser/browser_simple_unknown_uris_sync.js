"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
}
)
;
const
{
checkInputAndSerializationMatch
checkInputAndSerializationMatchChild
checkSerializationMissingSecondColon
checkSerializationMissingSecondColonChild
removeSecondColon
runParentTestSuite
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
simple_unknown_uri_helpers
.
sys
.
mjs
"
)
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
url
.
useDefaultURI
"
true
]
[
"
network
.
url
.
simple_uri_unknown_schemes_enabled
"
true
]
[
"
network
.
url
.
simple_uri_unknown_schemes
"
"
simpleprotocol
otherproto
"
]
]
}
)
;
}
)
;
const
bypassCollectionName
=
"
url
-
parser
-
default
-
unknown
-
schemes
-
interventions
"
;
let
newData
=
[
{
id
:
"
111
"
scheme
:
"
testinitscheme
"
}
{
id
:
"
112
"
scheme
:
"
testsyncscheme
"
}
]
;
add_task
(
async
function
test_bypass_list_update_sync_parent
(
)
{
const
settings
=
await
RemoteSettings
(
bypassCollectionName
)
;
let
stub
=
sinon
.
stub
(
settings
"
get
"
)
.
returns
(
newData
)
;
registerCleanupFunction
(
async
function
(
)
{
stub
.
restore
(
)
;
}
)
;
await
RemoteSettings
(
bypassCollectionName
)
.
emit
(
"
sync
"
{
}
)
;
runParentTestSuite
(
)
;
stub
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_bypass_list_update_sync_child
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
allow_eval_with_system_principal
"
true
]
]
}
)
;
const
settings
=
await
RemoteSettings
(
bypassCollectionName
)
;
let
stub
=
sinon
.
stub
(
settings
"
get
"
)
.
returns
(
newData
)
;
registerCleanupFunction
(
async
function
(
)
{
stub
.
restore
(
)
;
}
)
;
const
URL_EXAMPLE
=
"
https
:
/
/
example
.
com
"
;
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_EXAMPLE
)
;
const
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
RemoteSettings
(
bypassCollectionName
)
.
emit
(
"
sync
"
{
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
removeSecondColon
.
toString
(
)
checkSerializationMissingSecondColonChild
.
toString
(
)
checkInputAndSerializationMatchChild
.
toString
(
)
]
(
rscSource
csmscSource
ciasmcSource
)
=
>
{
let
removeSecondColon
=
eval
(
(
{
rscSource
}
)
)
;
let
checkSerializationMissingSecondColonChild
=
eval
(
(
{
csmscSource
}
)
)
;
let
checkInputAndSerializationMatchChild
=
eval
(
(
{
ciasmcSource
}
)
)
;
checkInputAndSerializationMatchChild
(
"
https
:
/
/
example
.
com
/
"
)
;
checkSerializationMissingSecondColonChild
(
"
https
:
/
/
https
:
/
/
example
.
com
"
)
;
checkSerializationMissingSecondColonChild
(
"
defaulturischeme
:
/
/
https
:
/
/
example
.
com
"
)
;
checkInputAndSerializationMatchChild
(
"
testsyncscheme
:
/
/
https
:
/
/
example
.
com
"
)
;
checkInputAndSerializationMatchChild
(
"
simpleprotocol
:
/
/
https
:
/
/
example
.
com
"
)
;
}
)
;
stub
.
restore
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_bypass_list_update_sync_parent_long_string
(
)
{
let
longSchemeList
=
[
"
testinitscheme
"
"
testsyncscheme
"
]
;
let
num
=
100
;
for
(
let
i
=
0
;
i
<
=
num
;
i
+
+
)
{
longSchemeList
.
push
(
scheme
{
i
}
)
;
}
let
newData
=
[
]
;
for
(
const
i
in
longSchemeList
)
{
newData
.
push
(
{
id
:
i
scheme
:
longSchemeList
[
i
]
}
)
;
}
const
settings
=
await
RemoteSettings
(
bypassCollectionName
)
;
let
stub
=
sinon
.
stub
(
settings
"
get
"
)
.
returns
(
newData
)
;
registerCleanupFunction
(
async
function
(
)
{
stub
.
restore
(
)
;
}
)
;
await
RemoteSettings
(
bypassCollectionName
)
.
emit
(
"
sync
"
{
}
)
;
runParentTestSuite
(
)
;
checkInputAndSerializationMatch
(
"
scheme50
:
/
/
https
:
/
/
example
.
com
"
)
;
checkInputAndSerializationMatch
(
"
scheme100
:
/
/
https
:
/
/
example
.
com
"
)
;
stub
.
restore
(
)
;
}
)
;
