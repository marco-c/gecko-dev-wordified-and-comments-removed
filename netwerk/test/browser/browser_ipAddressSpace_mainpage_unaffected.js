"
use
strict
"
;
const
{
HttpServer
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
httpd
.
sys
.
mjs
"
)
;
let
mainBrowsingContext
=
null
;
let
iframeBrowsingContext
=
null
;
add_task
(
async
function
test_main_ipAddressSpace_unaffected_by_iframe
(
)
{
let
server1
=
new
HttpServer
(
)
;
server1
.
start
(
-
1
)
;
const
server1Port
=
server1
.
identity
.
primaryPort
;
const
server1Base
=
http
:
/
/
localhost
:
{
server1Port
}
;
let
server2
=
new
HttpServer
(
)
;
server2
.
start
(
-
1
)
;
const
server2Port
=
server2
.
identity
.
primaryPort
;
const
server2Base
=
http
:
/
/
localhost
:
{
server2Port
}
;
var
override_value
=
127
.
0
.
0
.
1
:
{
server2Port
}
;
Services
.
prefs
.
setCharPref
(
"
network
.
lna
.
address_space
.
public
.
override
"
override_value
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
lna
.
blocking
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
localhost
.
prompt
.
testing
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
localhost
.
prompt
.
testing
.
allow
"
false
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
server1
.
stop
(
)
;
await
server2
.
stop
(
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
lna
.
address_space
.
public
.
override
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
lna
.
blocking
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
localhost
.
prompt
.
testing
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
localhost
.
prompt
.
testing
.
allow
"
)
;
}
)
;
server1
.
registerPathHandler
(
"
/
test
"
(
request
response
)
=
>
{
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
false
)
;
response
.
write
(
<
!
DOCTYPE
html
>
<
html
>
<
body
>
<
iframe
src
=
"
{
server2Base
}
/
iframe
"
id
=
"
childframe1
"
onload
=
"
loadSecondIframe
(
)
"
>
<
/
iframe
>
<
script
>
function
loadSecondIframe
(
)
{
const
iframe
=
document
.
createElement
(
'
iframe
'
)
;
iframe
.
src
=
"
{
server1Base
}
/
test2
"
;
iframe
.
id
=
"
childframe2
"
;
document
.
body
.
appendChild
(
iframe
)
;
}
<
/
script
>
<
/
body
>
<
/
html
>
)
;
}
)
;
server1
.
registerPathHandler
(
"
/
test2
"
(
request
response
)
=
>
{
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
false
)
;
response
.
write
(
"
<
!
DOCTYPE
html
>
<
html
>
<
body
>
<
p
>
Dummy
content
<
/
p
>
<
/
body
>
<
/
html
>
"
)
;
}
)
;
server2
.
registerPathHandler
(
"
/
iframe
"
(
request
response
)
=
>
{
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
false
)
;
response
.
write
(
"
<
!
DOCTYPE
html
>
<
html
>
<
body
>
<
p
>
Iframe
content
<
/
p
>
<
/
body
>
<
/
html
>
"
)
;
}
)
;
const
testURLs
=
new
Set
(
[
{
server1Base
}
/
test
{
server2Base
}
/
iframe
{
server1Base
}
/
test2
]
)
;
let
observerPromise
=
new
Promise
(
resolve
=
>
{
let
seen
=
new
Set
(
)
;
var
httpObserver
=
{
observe
(
subject
topic
)
{
if
(
topic
!
=
=
"
http
-
on
-
stop
-
request
"
)
{
return
;
}
let
channel
=
subject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
if
(
!
channel
|
|
!
testURLs
.
has
(
channel
.
URI
.
spec
)
)
{
return
;
}
info
(
Observed
load
of
:
{
channel
.
URI
.
spec
}
)
;
is
(
channel
.
status
Cr
.
NS_OK
"
Channel
should
have
loaded
successfully
"
)
;
seen
.
add
(
channel
.
URI
.
spec
)
;
if
(
seen
.
size
=
=
=
3
)
{
resolve
(
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
httpObserver
"
http
-
on
-
stop
-
request
"
)
;
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
{
server1Base
}
/
test
)
;
await
observerPromise
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
