"
use
strict
"
;
const
{
HTTPS_EXAMPLE_ORG
HTTPS_EXAMPLE_COM
HTTP_EXAMPLE_COM
browserTestPath
waitForAllExpectedTests
cleanupObservers
checkExpectedCookies
fetchHelper
preclean_test
cleanup_test
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
cookie_filtering_helper
.
jsm
"
)
;
async
function
runSuiteWithContentListener
(
name
trigger_suite_func
expected
)
{
return
async
function
(
browser
)
{
info
(
"
Running
content
suite
:
"
+
name
)
;
await
SpecialPowers
.
spawn
(
browser
[
expected
name
]
checkExpectedCookies
)
;
await
trigger_suite_func
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
waitForAllExpectedTests
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
cleanupObservers
)
;
info
(
"
Complete
content
suite
:
"
+
name
)
;
}
;
}
async
function
test_insecure_suite_insecure_com
(
)
{
var
expected
=
[
]
;
expected
.
push
(
"
test
-
cookie
=
png1
"
)
;
expected
.
push
(
"
test
-
cookie
=
png2
"
)
;
expected
.
push
(
"
"
)
;
expected
.
push
(
"
test
-
cookie
=
png3
"
)
;
info
(
expected
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
browserTestPath
(
HTTP_EXAMPLE_COM
)
}
await
runSuiteWithContentListener
(
"
insecure
suite
insecure
com
"
triggerInsecureSuite
expected
)
)
;
}
async
function
test_insecure_suite_secure_com
(
)
{
var
expected
=
[
]
;
expected
.
push
(
"
test
-
cookie
=
png1
"
)
;
expected
.
push
(
"
test
-
cookie
=
png2
"
)
;
expected
.
push
(
"
test
-
cookie
=
secure
-
png
"
)
;
expected
.
push
(
"
test
-
cookie
=
png3
"
)
;
info
(
expected
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
browserTestPath
(
HTTPS_EXAMPLE_COM
)
}
await
runSuiteWithContentListener
(
"
insecure
suite
secure
com
"
triggerInsecureSuite
expected
)
)
;
}
async
function
triggerInsecureSuite
(
)
{
const
cookieSjsFilename
=
"
cookie_filtering_resource
.
sjs
"
;
var
url
=
browserTestPath
(
HTTP_EXAMPLE_COM
)
+
cookieSjsFilename
;
await
fetchHelper
(
url
"
test
-
cookie
=
png1
"
false
)
;
url
=
browserTestPath
(
HTTPS_EXAMPLE_COM
)
+
cookieSjsFilename
;
await
fetchHelper
(
url
"
test
-
cookie
=
png2
"
false
)
;
url
=
browserTestPath
(
HTTPS_EXAMPLE_COM
)
+
cookieSjsFilename
;
await
fetchHelper
(
url
"
test
-
cookie
=
secure
-
png
"
true
)
;
url
=
browserTestPath
(
HTTPS_EXAMPLE_COM
)
+
cookieSjsFilename
;
await
fetchHelper
(
url
"
test
-
cookie
=
png3
"
false
)
;
}
add_task
(
preclean_test
)
;
add_task
(
test_insecure_suite_insecure_com
)
;
add_task
(
test_insecure_suite_secure_com
)
;
add_task
(
cleanup_test
)
;
