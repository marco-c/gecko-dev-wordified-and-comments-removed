"
use
strict
"
;
const
{
PromptTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromptTestUtils
.
sys
.
mjs
"
)
;
add_task
(
async
function
(
)
{
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
auth
.
supress_auth_prompt_for_XFO_failures
"
true
]
]
}
)
;
let
URL
=
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
test_1629307
.
html
"
;
let
hasPrompt
=
false
;
PromptTestUtils
.
handleNextPrompt
(
window
{
modalType
:
Services
.
prefs
.
getIntPref
(
"
prompts
.
modalType
.
httpAuth
"
)
promptType
:
"
promptUserAndPass
"
}
{
buttonNumClick
:
1
}
)
.
then
(
function
(
)
{
hasPrompt
=
true
;
}
)
.
catch
(
function
(
)
{
}
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
true
URL
)
;
Assert
.
equal
(
hasPrompt
false
"
no
prompt
when
loading
page
via
iframe
with
x
-
auth
options
"
)
;
}
)
;
add_task
(
async
function
(
)
{
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
auth
.
supress_auth_prompt_for_XFO_failures
"
false
]
]
}
)
;
let
URL
=
"
https
:
/
/
example
.
com
/
browser
/
netwerk
/
test
/
browser
/
test_1629307
.
html
"
;
let
hasPrompt
=
false
;
PromptTestUtils
.
handleNextPrompt
(
window
{
modalType
:
Services
.
prefs
.
getIntPref
(
"
prompts
.
modalType
.
httpAuth
"
)
promptType
:
"
promptUserAndPass
"
}
{
buttonNumClick
:
1
}
)
.
then
(
function
(
)
{
hasPrompt
=
true
;
}
)
.
catch
(
function
(
)
{
}
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
true
URL
)
;
Assert
.
equal
(
hasPrompt
true
"
prompt
when
loading
page
via
iframe
with
x
-
auth
options
with
pref
network
.
auth
.
supress_auth_prompt_for_XFO_failures
disabled
"
)
;
}
)
;
