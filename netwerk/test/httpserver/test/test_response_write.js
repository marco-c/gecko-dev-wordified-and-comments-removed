ChromeUtils
.
defineLazyGetter
(
this
"
tests
"
function
(
)
{
return
[
new
Test
(
"
http
:
/
/
localhost
:
"
+
srv
.
identity
.
primaryPort
+
"
/
writeString
"
null
check_1234
succeeded
)
new
Test
(
"
http
:
/
/
localhost
:
"
+
srv
.
identity
.
primaryPort
+
"
/
writeInt
"
null
check_1234
succeeded
)
]
;
}
)
;
var
srv
;
function
run_test
(
)
{
srv
=
createServer
(
)
;
srv
.
registerPathHandler
(
"
/
writeString
"
writeString
)
;
srv
.
registerPathHandler
(
"
/
writeInt
"
writeInt
)
;
srv
.
start
(
-
1
)
;
runHttpTests
(
tests
testComplete
(
srv
)
)
;
}
function
succeeded
(
ch
status
data
)
{
Assert
.
ok
(
Components
.
isSuccessCode
(
status
)
)
;
Assert
.
equal
(
data
.
map
(
v
=
>
String
.
fromCharCode
(
v
)
)
.
join
(
"
"
)
"
1234
"
)
;
}
function
check_1234
(
ch
)
{
Assert
.
equal
(
ch
.
getResponseHeader
(
"
Content
-
Length
"
)
"
4
"
)
;
}
function
writeString
(
metadata
response
)
{
response
.
write
(
"
1234
"
)
;
}
function
writeInt
(
metadata
response
)
{
response
.
write
(
1234
)
;
}
