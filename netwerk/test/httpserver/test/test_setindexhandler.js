var
srv
serverBasePath
;
function
run_test
(
)
{
srv
=
createServer
(
)
;
serverBasePath
=
do_get_profile
(
)
;
srv
.
registerDirectory
(
"
/
"
serverBasePath
)
;
srv
.
setIndexHandler
(
myIndexHandler
)
;
srv
.
start
(
-
1
)
;
runHttpTests
(
tests
testComplete
(
srv
)
)
;
}
ChromeUtils
.
defineLazyGetter
(
this
"
URL
"
function
(
)
{
return
"
http
:
/
/
localhost
:
"
+
srv
.
identity
.
primaryPort
+
"
/
"
;
}
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
tests
"
function
(
)
{
return
[
new
Test
(
URL
init
startCustomIndexHandler
stopCustomIndexHandler
)
new
Test
(
URL
init
startDefaultIndexHandler
stopDefaultIndexHandler
)
]
;
}
)
;
function
init
(
ch
)
{
ch
.
loadFlags
|
=
Ci
.
nsIRequest
.
LOAD_BYPASS_CACHE
;
}
function
startCustomIndexHandler
(
ch
)
{
Assert
.
equal
(
ch
.
getResponseHeader
(
"
Content
-
Length
"
)
"
10
"
)
;
srv
.
setIndexHandler
(
null
)
;
}
function
stopCustomIndexHandler
(
ch
status
data
)
{
Assert
.
ok
(
Components
.
isSuccessCode
(
status
)
)
;
Assert
.
equal
(
String
.
fromCharCode
.
apply
(
null
data
)
"
directory
!
"
)
;
}
function
startDefaultIndexHandler
(
ch
)
{
Assert
.
equal
(
ch
.
responseStatus
200
)
;
}
function
stopDefaultIndexHandler
(
ch
status
data
)
{
Assert
.
ok
(
Components
.
isSuccessCode
(
status
)
)
;
}
function
myIndexHandler
(
metadata
response
)
{
var
dir
=
metadata
.
getProperty
(
"
directory
"
)
;
Assert
.
ok
(
dir
!
=
null
)
;
Assert
.
ok
(
dir
instanceof
Ci
.
nsIFile
)
;
Assert
.
ok
(
dir
.
equals
(
serverBasePath
)
)
;
response
.
write
(
"
directory
!
"
)
;
}
