add_setup
(
function
test_setup
(
)
{
do_get_profile
(
)
;
Services
.
fog
.
initializeFOG
(
)
;
}
)
;
add_task
(
async
function
test_purge_counting_per_host
(
)
{
let
profile
=
do_get_profile
(
)
;
let
dbFile
=
do_get_cookie_file
(
profile
)
;
Assert
.
ok
(
!
dbFile
.
exists
(
)
)
;
let
schema12db
=
new
CookieDatabaseConnection
(
dbFile
12
)
;
let
now
=
Date
.
now
(
)
*
1000
;
let
pastExpiry
=
Math
.
round
(
now
/
1e3
-
1000
)
;
let
futureExpiry
=
Math
.
round
(
now
/
1e3
+
1000
)
;
let
host
=
"
cookie
-
host1
.
com
"
;
let
cookieCountMax
=
180
;
let
cookieCountPurgeTo
=
150
;
let
cookiesPurged
=
cookieCountMax
-
cookieCountPurgeTo
+
1
;
for
(
let
i
=
0
;
i
<
cookieCountMax
;
i
+
+
)
{
let
cookie
=
new
Cookie
(
"
cookie
-
name
"
+
i
"
cookie
-
value
"
+
i
host
"
/
"
pastExpiry
now
now
false
false
false
)
;
schema12db
.
insertCookie
(
cookie
)
;
}
Assert
.
equal
(
do_count_cookies_in_db
(
schema12db
.
db
)
cookieCountMax
)
;
Assert
.
equal
(
do_count_cookies_in_db
(
schema12db
.
db
"
cookie
-
host1
.
com
"
)
cookieCountMax
)
;
let
validCookies
=
Services
.
cookies
.
countCookiesFromHost
(
host
)
;
Assert
.
equal
(
validCookies
cookieCountMax
)
;
const
cv
=
Services
.
cookies
.
add
(
host
"
/
"
"
cookie
-
name
-
x
"
"
cookie
-
value
-
x
"
false
true
true
futureExpiry
{
}
Ci
.
nsICookie
.
SAMESITE_UNSET
Ci
.
nsICookie
.
SCHEME_HTTPS
)
;
Assert
.
equal
(
cv
.
result
Ci
.
nsICookieValidation
.
eOK
"
Valid
cookie
"
)
;
validCookies
=
Services
.
cookies
.
countCookiesFromHost
(
host
)
;
Assert
.
equal
(
validCookies
cookieCountPurgeTo
)
;
let
cpem
=
await
Glean
.
networking
.
cookiePurgeEntryMax
.
testGetValue
(
)
;
Assert
.
equal
(
cpem
.
sum
cookiesPurged
"
Purge
the
expected
number
of
cookies
"
)
;
schema12db
.
close
(
)
;
}
)
;
