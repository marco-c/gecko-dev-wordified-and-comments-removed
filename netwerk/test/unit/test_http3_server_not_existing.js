"
use
strict
"
;
let
httpsUri
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
http3
.
enable
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
disableIPv6
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
http3
.
alt
-
svc
-
mapping
-
for
-
testing
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
http3
.
backup_timer_delay
"
)
;
dump
(
"
cleanup
done
\
n
"
)
;
}
)
;
function
makeChan
(
)
{
let
chan
=
NetUtil
.
newChannel
(
{
uri
:
httpsUri
loadUsingSystemPrincipal
:
true
}
)
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
chan
.
loadFlags
=
Ci
.
nsIChannel
.
LOAD_INITIAL_DOCUMENT_URI
;
return
chan
;
}
function
altsvcSetupPromise
(
chan
listener
)
{
return
new
Promise
(
resolve
=
>
{
function
finish
(
result
)
{
resolve
(
result
)
;
}
listener
.
finish
=
finish
;
chan
.
asyncOpen
(
listener
)
;
}
)
;
}
add_task
(
async
function
test_fatal_error
(
)
{
let
h2Port
=
Services
.
env
.
get
(
"
MOZHTTP2_PORT
"
)
;
Assert
.
notEqual
(
h2Port
null
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http3
.
enable
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
foo
.
example
.
com
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
dns
.
disableIPv6
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
http
.
http3
.
alt
-
svc
-
mapping
-
for
-
testing
"
"
foo
.
example
.
com
;
h3
-
29
=
:
443
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
http
.
http3
.
backup_timer_delay
"
0
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
httpsUri
=
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
"
;
}
)
;
add_task
(
async
function
test_fatal_stream_error
(
)
{
let
result
=
1
;
do
{
Services
.
obs
.
notifyObservers
(
null
"
net
:
prune
-
all
-
connections
"
)
;
let
chan
=
makeChan
(
)
;
let
listener
=
new
CheckOnlyHttp2Listener
(
)
;
await
altsvcSetupPromise
(
chan
listener
)
;
result
+
+
;
}
while
(
result
<
5
)
;
}
)
;
let
CheckOnlyHttp2Listener
=
function
(
)
{
}
;
CheckOnlyHttp2Listener
.
prototype
=
{
onStartRequest
:
function
testOnStartRequest
(
request
)
{
}
onDataAvailable
:
function
testOnDataAvailable
(
request
stream
off
cnt
)
{
read_stream
(
stream
cnt
)
;
}
onStopRequest
:
function
testOnStopRequest
(
request
status
)
{
Assert
.
equal
(
status
Cr
.
NS_OK
)
;
let
httpVersion
=
"
"
;
try
{
httpVersion
=
request
.
protocolVersion
;
}
catch
(
e
)
{
}
Assert
.
equal
(
httpVersion
"
h2
"
)
;
this
.
finish
(
)
;
}
}
;
add_task
(
async
function
test_no_http3_after_error
(
)
{
let
chan
=
makeChan
(
)
;
let
listener
=
new
CheckOnlyHttp2Listener
(
)
;
await
altsvcSetupPromise
(
chan
listener
)
;
}
)
;
add_task
(
async
function
test_no_http3_after_error2
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
net
:
prune
-
all
-
connections
"
)
;
let
chan
=
makeChan
(
)
;
let
listener
=
new
CheckOnlyHttp2Listener
(
)
;
await
altsvcSetupPromise
(
chan
listener
)
;
}
)
;
