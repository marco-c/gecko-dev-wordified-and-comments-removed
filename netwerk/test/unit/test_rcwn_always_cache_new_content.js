"
use
strict
"
;
const
{
HttpServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
var
httpserver
=
new
HttpServer
(
)
;
httpserver
.
start
(
-
1
)
;
const
PORT
=
httpserver
.
identity
.
primaryPort
;
function
make_channel
(
url
)
{
return
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
}
let
gFirstResponseBody
=
"
first
version
"
;
let
gSecondResponseBody
=
"
second
version
"
;
let
gRequestCounter
=
0
;
function
test_handler
(
metadata
response
)
{
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
response
.
setHeader
(
"
Cache
-
Control
"
"
max
-
age
=
3600
"
)
;
response
.
setHeader
(
"
ETag
"
"
test
-
etag1
"
)
;
switch
(
gRequestCounter
)
{
case
0
:
response
.
bodyOutputStream
.
write
(
gFirstResponseBody
gFirstResponseBody
.
length
)
;
break
;
case
1
:
response
.
bodyOutputStream
.
write
(
gSecondResponseBody
gSecondResponseBody
.
length
)
;
break
;
default
:
do_throw
(
"
Unexpected
request
"
)
;
}
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
OK
"
)
;
}
function
checkContent
(
request
buffer
context
isFromCache
)
{
let
isRacing
=
request
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
.
isRacing
(
)
;
switch
(
gRequestCounter
)
{
case
0
:
Assert
.
equal
(
buffer
gFirstResponseBody
)
;
Assert
.
ok
(
!
isFromCache
)
;
Assert
.
ok
(
!
isRacing
)
;
break
;
case
1
:
Assert
.
equal
(
buffer
gSecondResponseBody
)
;
Assert
.
ok
(
!
isFromCache
)
;
Assert
.
ok
(
isRacing
)
;
break
;
case
2
:
Assert
.
equal
(
buffer
gSecondResponseBody
)
;
Assert
.
ok
(
isFromCache
)
;
Assert
.
ok
(
!
isRacing
)
;
break
;
default
:
do_throw
(
"
Unexpected
request
"
)
;
}
gRequestCounter
+
+
;
executeSoon
(
(
)
=
>
{
testGenerator
.
next
(
)
;
}
)
;
}
function
run_test
(
)
{
do_get_profile
(
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
rcwn
.
enabled
"
false
)
;
httpserver
.
registerPathHandler
(
"
/
rcwn
"
test_handler
)
;
testGenerator
.
next
(
)
;
do_test_pending
(
)
;
}
let
testGenerator
=
testSteps
(
)
;
function
*
testSteps
(
)
{
let
channel
=
make_channel
(
"
http
:
/
/
localhost
:
"
+
PORT
+
"
/
rcwn
"
)
;
channel
.
asyncOpen
(
new
ChannelListener
(
checkContent
null
)
)
;
yield
undefined
;
equal
(
gRequestCounter
1
)
;
channel
=
make_channel
(
"
http
:
/
/
localhost
:
"
+
PORT
+
"
/
rcwn
"
)
;
channel
.
QueryInterface
(
Ci
.
nsIRaceCacheWithNetwork
)
.
test_delayCacheEntryOpeningBy
(
100000
)
;
channel
.
asyncOpen
(
new
ChannelListener
(
checkContent
null
)
)
;
channel
.
QueryInterface
(
Ci
.
nsIRaceCacheWithNetwork
)
.
test_triggerNetwork
(
50
)
;
yield
undefined
;
equal
(
gRequestCounter
2
)
;
channel
=
make_channel
(
"
http
:
/
/
localhost
:
"
+
PORT
+
"
/
rcwn
"
)
;
channel
.
loadFlags
=
Ci
.
nsIRequest
.
VALIDATE_NEVER
;
channel
.
asyncOpen
(
new
ChannelListener
(
checkContent
null
)
)
;
yield
undefined
;
equal
(
gRequestCounter
3
)
;
httpserver
.
stop
(
do_test_finished
)
;
}
