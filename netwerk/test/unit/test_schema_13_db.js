"
use
strict
"
;
add_task
(
async
function
test_schema_13_db
(
)
{
let
profile
=
do_get_profile
(
)
;
Services
.
cookies
.
sessionCookies
;
Assert
.
ok
(
do_get_cookie_file
(
profile
)
.
exists
(
)
)
;
let
dbConnection
=
Services
.
storage
.
openDatabase
(
do_get_cookie_file
(
profile
)
)
;
let
version
=
dbConnection
.
schemaVersion
;
dbConnection
.
close
(
)
;
Assert
.
ok
(
version
>
=
13
)
;
await
promise_close_profile
(
)
;
do_get_cookie_file
(
profile
)
.
remove
(
false
)
;
let
schema13db
=
new
CookieDatabaseConnection
(
do_get_cookie_file
(
profile
)
13
)
;
let
now
=
Date
.
now
(
)
*
1000
;
let
futureExpiry
=
Math
.
round
(
now
/
1e6
+
1000
)
;
let
N
=
20
;
for
(
let
i
=
0
;
i
<
N
;
+
+
i
)
{
let
cookie
=
new
Cookie
(
"
test
"
+
i
"
Some
data
"
"
foo
.
com
"
"
/
"
futureExpiry
now
now
false
false
false
false
{
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_UNSET
!
!
(
i
%
2
)
)
;
schema13db
.
insertCookie
(
cookie
)
;
}
schema13db
.
close
(
)
;
schema13db
=
null
;
await
promise_load_profile
(
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
foo
.
com
"
)
N
)
;
dbConnection
=
Services
.
storage
.
openDatabase
(
do_get_cookie_file
(
profile
)
)
;
Assert
.
ok
(
dbConnection
.
schemaVersion
>
=
13
)
;
let
stmt
=
dbConnection
.
createStatement
(
"
SELECT
COUNT
(
1
)
FROM
moz_cookies
WHERE
isPartitionedAttributeSet
=
1
"
)
;
let
success
=
stmt
.
executeStep
(
)
;
Assert
.
ok
(
success
)
;
let
isPartitionedAttributeSetCount
=
stmt
.
getInt32
(
0
)
;
stmt
.
finalize
(
)
;
Assert
.
equal
(
isPartitionedAttributeSetCount
N
/
2
)
;
Services
.
cookies
.
removeAll
(
)
;
stmt
.
finalize
(
)
;
dbConnection
.
close
(
)
;
do_close_profile
(
)
;
}
)
;
