Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
LoadContextInfo
.
jsm
'
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
var
packagedAppRequestsMade
=
0
;
function
packagedAppContentHandler
(
metadata
response
)
{
packagedAppRequestsMade
+
+
;
if
(
packagedAppRequestsMade
=
=
2
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
304
"
Not
Modified
"
)
;
response
.
bodyOutputStream
.
write
(
"
"
0
)
;
return
;
}
response
.
setHeader
(
"
Content
-
Type
"
'
application
/
package
'
)
;
var
body
=
testData
.
getData
(
)
;
if
(
packagedAppRequestsMade
=
=
3
)
{
body
=
body
.
replace
(
/
\
.
\
.
\
.
/
g
'
xxx
'
)
;
}
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
function
getChannelForURL
(
url
)
{
let
uri
=
createURI
(
url
)
;
let
ssm
=
Cc
[
"
mozilla
.
org
/
scriptsecuritymanager
;
1
"
]
.
getService
(
Ci
.
nsIScriptSecurityManager
)
;
let
principal
=
ssm
.
createCodebasePrincipal
(
uri
{
}
)
;
let
tmpChannel
=
NetUtil
.
newChannel
(
{
uri
:
url
loadingPrincipal
:
principal
contentPolicyType
:
Ci
.
nsIContentPolicy
.
TYPE_OTHER
}
)
;
tmpChannel
.
notificationCallbacks
=
new
LoadContextCallback
(
principal
.
appId
principal
.
isInBrowserElement
false
false
)
;
return
tmpChannel
;
}
var
testData
=
{
content
:
[
{
headers
:
[
"
Content
-
Location
:
/
index
.
html
"
"
Content
-
Type
:
text
/
html
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
{
headers
:
[
"
Content
-
Location
:
/
scripts
/
app
.
js
"
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
module
Math
from
'
/
scripts
/
helpers
/
math
.
js
'
;
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
{
headers
:
[
"
Content
-
Location
:
/
scripts
/
helpers
/
math
.
js
"
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
export
function
sum
(
nums
)
{
.
.
.
}
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
]
token
:
"
gc0pJq0M
:
08jU534c0p
"
getData
:
function
(
)
{
var
str
=
"
"
;
for
(
var
i
in
this
.
content
)
{
str
+
=
"
-
-
"
+
this
.
token
+
"
\
r
\
n
"
;
for
(
var
j
in
this
.
content
[
i
]
.
headers
)
{
str
+
=
this
.
content
[
i
]
.
headers
[
j
]
+
"
\
r
\
n
"
;
}
str
+
=
"
\
r
\
n
"
;
str
+
=
this
.
content
[
i
]
.
data
+
"
\
r
\
n
"
;
}
str
+
=
"
-
-
"
+
this
.
token
+
"
-
-
"
;
return
str
;
}
}
XPCOMUtils
.
defineLazyGetter
(
this
"
uri
"
function
(
)
{
return
"
http
:
/
/
localhost
:
"
+
httpserver
.
identity
.
primaryPort
;
}
)
;
var
httpserver
=
null
;
var
paservice
=
null
;
var
packagePath
=
null
;
function
run_test
(
)
{
httpserver
=
new
HttpServer
(
)
;
httpserver
.
registerPathHandler
(
"
/
package
"
packagedAppContentHandler
)
;
httpserver
.
registerPathHandler
(
"
/
304Package
"
packagedAppContentHandler
)
;
httpserver
.
registerPathHandler
(
"
/
badPackage
"
packagedAppBadContentHandler
)
;
let
worsePackageNum
=
6
;
for
(
let
i
=
0
;
i
<
worsePackageNum
;
i
+
+
)
{
httpserver
.
registerPathHandler
(
"
/
worsePackage_
"
+
i
packagedAppWorseContentHandler
.
bind
(
null
i
)
)
;
}
httpserver
.
start
(
-
1
)
;
paservice
=
Cc
[
"
mozilla
.
org
/
network
/
packaged
-
app
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPackagedAppService
)
;
ok
(
!
!
paservice
"
test
service
exists
"
)
;
add_test
(
test_bad_args
)
;
add_test
(
test_callback_gets_called
)
;
add_test
(
test_same_content
)
;
add_test
(
test_request_number
)
;
add_test
(
test_updated_package
)
;
add_test
(
test_package_does_not_exist
)
;
add_test
(
test_file_does_not_exist
)
;
add_test
(
test_bad_package
)
;
add_test
(
test_bad_package_404
)
;
if
(
Components
.
classes
[
"
mozilla
.
org
/
xpcom
/
debug
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIDebug2
)
.
isDebugBuild
=
=
false
)
{
add_test
(
test_channel_no_loadinfo
)
;
}
add_test
(
test_worse_package_0
)
;
add_test
(
test_worse_package_1
)
;
add_test
(
test_worse_package_2
)
;
add_test
(
test_worse_package_3
)
;
add_test
(
test_worse_package_4
)
;
add_test
(
test_worse_package_5
)
;
run_next_test
(
)
;
}
var
metadataListener
=
{
onMetaDataElement
:
function
(
key
value
)
{
if
(
key
=
=
'
response
-
head
'
)
{
var
kExpectedResponseHead
=
"
HTTP
/
1
.
1
200
\
r
\
nContent
-
Location
:
/
index
.
html
\
r
\
nContent
-
Type
:
text
/
html
\
r
\
n
"
;
ok
(
0
=
=
=
value
.
indexOf
(
kExpectedResponseHead
)
'
The
cached
response
header
not
matched
'
)
;
}
else
if
(
key
=
=
'
request
-
method
'
)
equal
(
value
"
GET
"
)
;
else
ok
(
false
"
unexpected
metadata
key
"
)
}
}
function
packagedResourceListener
(
content
)
{
this
.
content
=
content
;
}
packagedResourceListener
.
prototype
=
{
QueryInterface
:
function
(
iid
)
{
if
(
iid
.
equals
(
Ci
.
nsICacheEntryOpenCallback
)
|
|
iid
.
equals
(
Ci
.
nsISupports
)
)
return
this
;
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
onCacheEntryCheck
:
function
(
)
{
return
Ci
.
nsICacheEntryOpenCallback
.
ENTRY_WANTED
;
}
onCacheEntryAvailable
:
function
(
entry
isnew
appcache
status
)
{
equal
(
status
Cr
.
NS_OK
"
status
is
NS_OK
"
)
;
ok
(
!
!
entry
"
Needs
to
have
an
entry
"
)
;
equal
(
entry
.
key
uri
+
packagePath
+
"
!
/
/
index
.
html
"
"
Check
entry
has
correct
name
"
)
;
entry
.
visitMetaData
(
metadataListener
)
;
var
inputStream
=
entry
.
openInputStream
(
0
)
;
pumpReadStream
(
inputStream
(
read
)
=
>
{
inputStream
.
close
(
)
;
equal
(
read
this
.
content
)
;
run_next_test
(
)
;
}
)
;
}
}
;
var
cacheListener
=
new
packagedResourceListener
(
testData
.
content
[
0
]
.
data
)
;
function
test_bad_args
(
)
{
Assert
.
throws
(
(
)
=
>
{
paservice
.
getResource
(
getChannelForURL
(
"
http
:
/
/
test
.
com
"
)
cacheListener
)
;
}
"
url
'
s
with
no
!
/
/
aren
'
t
allowed
"
)
;
Assert
.
throws
(
(
)
=
>
{
paservice
.
getResource
(
getChannelForURL
(
"
http
:
/
/
test
.
com
/
package
!
/
/
test
"
)
null
)
;
}
"
should
have
a
callback
"
)
;
Assert
.
throws
(
(
)
=
>
{
paservice
.
getResource
(
null
cacheListener
)
;
}
"
should
have
a
channel
"
)
;
run_next_test
(
)
;
}
function
test_callback_gets_called
(
)
{
packagePath
=
"
/
package
"
;
let
url
=
uri
+
packagePath
+
"
!
/
/
index
.
html
"
;
paservice
.
getResource
(
getChannelForURL
(
url
)
cacheListener
)
;
}
function
test_same_content
(
)
{
packagePath
=
"
/
package
"
;
let
url
=
uri
+
packagePath
+
"
!
/
/
index
.
html
"
;
paservice
.
getResource
(
getChannelForURL
(
url
)
cacheListener
)
;
}
function
test_request_number
(
)
{
equal
(
packagedAppRequestsMade
2
"
2
requests
are
expected
.
First
with
content
second
is
a
304
not
modified
.
"
)
;
run_next_test
(
)
;
}
function
test_updated_package
(
)
{
packagePath
=
"
/
package
"
;
let
url
=
uri
+
packagePath
+
"
!
/
/
index
.
html
"
;
paservice
.
getResource
(
getChannelForURL
(
url
)
new
packagedResourceListener
(
testData
.
content
[
0
]
.
data
.
replace
(
/
\
.
\
.
\
.
/
g
'
xxx
'
)
)
)
;
}
var
listener404
=
{
onCacheEntryCheck
:
function
(
)
{
return
Ci
.
nsICacheEntryOpenCallback
.
ENTRY_WANTED
;
}
onCacheEntryAvailable
:
function
(
entry
isnew
appcache
status
)
{
notEqual
(
status
Cr
.
NS_OK
"
NOT
FOUND
"
)
;
ok
(
!
entry
"
There
should
be
no
entry
"
)
;
run_next_test
(
)
;
}
}
;
function
test_package_does_not_exist
(
)
{
packagePath
=
"
/
package_non_existent
"
;
let
url
=
uri
+
packagePath
+
"
!
/
/
index
.
html
"
;
paservice
.
getResource
(
getChannelForURL
(
url
)
listener404
)
;
}
function
test_file_does_not_exist
(
)
{
packagePath
=
"
/
package
"
;
let
url
=
uri
+
packagePath
+
"
!
/
/
file_non_existent
.
html
"
;
paservice
.
getResource
(
getChannelForURL
(
url
)
listener404
)
;
}
var
badTestData
=
{
content
:
[
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
module
Math
from
'
/
scripts
/
helpers
/
math
.
js
'
;
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
{
headers
:
[
"
Content
-
Location
:
/
index
.
html
"
"
Content
-
Type
:
text
/
html
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
export
function
sum
(
nums
)
{
.
.
.
}
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
]
token
:
"
gc0pJq0M
:
08jU534c0p
"
getData
:
function
(
)
{
var
str
=
"
"
;
for
(
var
i
in
this
.
content
)
{
str
+
=
"
-
-
"
+
this
.
token
+
"
\
r
\
n
"
;
for
(
var
j
in
this
.
content
[
i
]
.
headers
)
{
str
+
=
this
.
content
[
i
]
.
headers
[
j
]
+
"
\
r
\
n
"
;
}
str
+
=
"
\
r
\
n
"
;
str
+
=
this
.
content
[
i
]
.
data
+
"
\
r
\
n
"
;
}
str
+
=
"
-
-
"
+
this
.
token
+
"
-
-
"
;
return
str
;
}
}
function
packagedAppBadContentHandler
(
metadata
response
)
{
response
.
setHeader
(
"
Content
-
Type
"
'
application
/
package
'
)
;
var
body
=
badTestData
.
getData
(
)
;
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
function
test_bad_package
(
)
{
packagePath
=
"
/
badPackage
"
;
let
url
=
uri
+
packagePath
+
"
!
/
/
index
.
html
"
;
paservice
.
getResource
(
getChannelForURL
(
url
)
cacheListener
)
;
}
function
test_bad_package_404
(
)
{
packagePath
=
"
/
badPackage
"
;
let
url
=
uri
+
packagePath
+
"
!
/
/
file_non_existent
.
html
"
;
paservice
.
getResource
(
getChannelForURL
(
url
)
listener404
)
;
}
function
test_channel_no_loadinfo
(
)
{
packagePath
=
"
/
package
"
;
let
url
=
uri
+
packagePath
+
"
!
/
/
index
.
html
"
;
let
channel
=
getChannelForURL
(
url
)
;
channel
.
loadInfo
=
null
;
paservice
.
getResource
(
channel
cacheListener
)
;
}
function
getData
(
aTestingData
)
{
var
str
=
"
"
;
for
(
var
i
in
aTestingData
.
content
)
{
str
+
=
"
-
-
"
+
aTestingData
.
token
+
"
\
r
\
n
"
;
for
(
var
j
in
aTestingData
.
content
[
i
]
.
headers
)
{
str
+
=
aTestingData
.
content
[
i
]
.
headers
[
j
]
+
"
\
r
\
n
"
;
}
str
+
=
"
\
r
\
n
"
;
str
+
=
aTestingData
.
content
[
i
]
.
data
+
"
\
r
\
n
"
;
}
str
+
=
"
-
-
"
+
aTestingData
.
token
+
"
-
-
"
;
return
str
;
}
var
worseTestData
=
[
{
content
:
[
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
module
Math
from
'
/
scripts
/
helpers
/
math
.
js
'
;
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
]
token
:
"
gc0pJq0M
:
08jU534c0p
"
}
{
content
:
[
{
headers
:
[
"
Content
-
Location
:
/
index
.
html
"
"
Content
-
Type
:
text
/
html
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
]
token
:
"
gc0pJq0M
:
08jU534c0p
"
}
{
content
:
[
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
module
Math
from
'
/
scripts
/
helpers
/
math
.
js
'
;
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
export
function
sum
(
nums
)
{
.
.
.
}
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
]
token
:
"
gc0pJq0M
:
08jU534c0p
"
}
{
content
:
[
{
headers
:
[
"
Content
-
Location
:
/
index
.
html
"
"
Content
-
Type
:
text
/
html
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
module
Math
from
'
/
scripts
/
helpers
/
math
.
js
'
;
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
export
function
sum
(
nums
)
{
.
.
.
}
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
]
token
:
"
gc0pJq0M
:
08jU534c0p
"
}
{
content
:
[
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
module
Math
from
'
/
scripts
/
helpers
/
math
.
js
'
;
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
export
function
sum
(
nums
)
{
.
.
.
}
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
{
headers
:
[
"
Content
-
Location
:
/
index
.
html
"
"
Content
-
Type
:
text
/
html
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
]
token
:
"
gc0pJq0M
:
08jU534c0p
"
}
{
content
:
[
{
headers
:
[
"
Content
-
Location
:
/
whatever
.
html
"
"
Content
-
Type
:
text
/
html
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
module
Math
from
'
/
scripts
/
helpers
/
math
.
js
'
;
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
{
headers
:
[
"
Content
-
Type
:
text
/
javascript
"
]
data
:
"
export
function
sum
(
nums
)
{
.
.
.
}
\
r
\
n
.
.
.
\
r
\
n
"
type
:
"
text
/
javascript
"
}
{
headers
:
[
"
Content
-
Location
:
/
index
.
html
"
"
Content
-
Type
:
text
/
html
"
]
data
:
"
<
html
>
\
r
\
n
<
head
>
\
r
\
n
<
script
src
=
\
"
/
scripts
/
app
.
js
\
"
>
<
/
script
>
\
r
\
n
.
.
.
\
r
\
n
<
/
head
>
\
r
\
n
.
.
.
\
r
\
n
<
/
html
>
\
r
\
n
"
type
:
"
text
/
html
"
}
]
token
:
"
gc0pJq0M
:
08jU534c0p
"
}
]
;
function
packagedAppWorseContentHandler
(
index
metadata
response
)
{
response
.
setHeader
(
"
Content
-
Type
"
'
application
/
package
'
)
;
var
body
=
getData
(
worseTestData
[
index
]
)
;
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
function
test_worse_package
(
index
success
)
{
packagePath
=
"
/
worsePackage_
"
+
index
;
let
url
=
uri
+
packagePath
+
"
!
/
/
index
.
html
"
;
let
channel
=
getChannelForURL
(
url
)
;
paservice
.
getResource
(
channel
{
QueryInterface
:
function
(
iid
)
{
if
(
iid
.
equals
(
Ci
.
nsICacheEntryOpenCallback
)
|
|
iid
.
equals
(
Ci
.
nsISupports
)
)
return
this
;
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
onCacheEntryCheck
:
function
(
)
{
return
Ci
.
nsICacheEntryOpenCallback
.
ENTRY_WANTED
;
}
onCacheEntryAvailable
:
function
(
entry
isnew
appcache
status
)
{
let
cacheSuccess
=
(
status
=
=
=
Cr
.
NS_OK
)
;
equal
(
success
status
=
=
=
Cr
.
NS_OK
"
Check
status
"
)
;
run_next_test
(
)
;
}
}
)
;
}
function
test_worse_package_0
(
)
{
test_worse_package
(
0
false
)
;
}
function
test_worse_package_1
(
)
{
test_worse_package
(
1
true
)
;
}
function
test_worse_package_2
(
)
{
test_worse_package
(
2
false
)
;
}
function
test_worse_package_3
(
)
{
test_worse_package
(
3
true
)
;
}
function
test_worse_package_4
(
)
{
test_worse_package
(
4
true
)
;
}
function
test_worse_package_5
(
)
{
test_worse_package
(
5
true
)
;
}
