"
use
strict
"
;
const
{
setTimeout
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
)
;
const
{
NodeHTTPServer
NodeHTTPSServer
NodeHTTP2Server
NodeHTTP2ProxyServer
with_node_servers
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
NodeServer
.
sys
.
mjs
"
)
;
add_setup
(
async
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
proxy
.
allow_hijacking_localhost
"
true
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
addCertFromFile
(
certdb
"
proxy
-
ca
.
pem
"
"
CTu
u
u
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
allow_hijacking_localhost
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
allow_hijacking_localhost
"
)
;
}
)
;
}
)
;
function
makeChan
(
uri
)
{
let
chan
=
NetUtil
.
newChannel
(
{
uri
loadUsingSystemPrincipal
:
true
}
)
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
chan
.
loadFlags
=
Ci
.
nsIChannel
.
LOAD_INITIAL_DOCUMENT_URI
;
return
chan
;
}
function
channelOpenPromise
(
chan
flags
)
{
return
new
Promise
(
resolve
=
>
{
function
finish
(
req
buffer
)
{
resolve
(
[
req
buffer
]
)
;
}
chan
.
asyncOpen
(
new
ChannelListener
(
finish
null
flags
)
)
;
}
)
;
}
function
regiisterServerNamePathHandler
(
server
path
)
{
return
server
.
registerPathHandler
(
path
(
req
resp
)
=
>
{
setTimeout
(
(
)
=
>
{
resp
.
writeHead
(
200
)
;
resp
.
end
(
global
.
server_name
)
;
}
1000
)
;
}
)
;
}
async
function
run_http2_proxy_test
(
maxConcurrentStreams
maxStreamId
)
{
Services
.
obs
.
notifyObservers
(
null
"
net
:
prune
-
all
-
connections
"
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
1000
)
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
http
.
http2
.
max_stream_id
"
maxStreamId
)
;
let
proxy
=
new
NodeHTTP2ProxyServer
(
)
;
await
proxy
.
start
(
0
false
maxConcurrentStreams
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
proxy
.
stop
(
)
;
}
)
;
await
with_node_servers
(
[
NodeHTTPServer
NodeHTTPSServer
NodeHTTP2Server
]
async
server
=
>
{
await
server
.
execute
(
global
.
server_name
=
"
{
server
.
constructor
.
name
}
"
;
)
;
await
regiisterServerNamePathHandler
(
server
"
/
test
"
)
;
await
channelOpenPromise
(
makeChan
(
{
server
.
origin
(
)
}
/
test
)
CL_ALLOW_UNKNOWN_CL
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
1000
)
)
;
let
promises
=
[
]
;
for
(
let
i
=
0
;
i
<
20
;
i
+
+
)
{
let
promise
=
channelOpenPromise
(
makeChan
(
{
server
.
origin
(
)
}
/
test
)
CL_ALLOW_UNKNOWN_CL
)
;
promises
.
push
(
promise
)
;
}
let
results
=
await
Promise
.
all
(
promises
)
;
for
(
let
[
req
buff
]
of
results
)
{
equal
(
req
.
status
Cr
.
NS_OK
)
;
equal
(
req
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
.
responseStatus
200
)
;
equal
(
buff
server
.
constructor
.
name
)
;
}
await
server
.
stop
(
)
;
}
)
;
await
proxy
.
stop
(
)
;
}
add_task
(
async
function
test_high_concurrency_high_stream_id
(
)
{
await
run_http2_proxy_test
(
100
0x7800000
)
;
}
)
;
add_task
(
async
function
test_low_concurrency_high_stream_id
(
)
{
await
run_http2_proxy_test
(
3
0x7800000
)
;
}
)
;
add_task
(
async
function
test_high_concurrency_low_stream_id
(
)
{
await
run_http2_proxy_test
(
100
10
)
;
}
)
;
add_task
(
async
function
test_low_concurrency_low_stream_id
(
)
{
await
run_http2_proxy_test
(
3
10
)
;
}
)
;
