"
use
strict
"
;
const
gDashboard
=
Cc
[
"
mozilla
.
org
/
network
/
dashboard
;
1
"
]
.
getService
(
Ci
.
nsIDashboard
)
;
const
{
NodeHTTP2Server
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
NodeServer
.
sys
.
mjs
"
)
;
const
{
TestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
)
;
function
makeChan
(
uri
)
{
let
chan
=
NetUtil
.
newChannel
(
{
uri
loadUsingSystemPrincipal
:
true
}
)
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
chan
.
loadFlags
=
Ci
.
nsIChannel
.
LOAD_INITIAL_DOCUMENT_URI
;
return
chan
;
}
function
channelOpenPromise
(
chan
flags
)
{
return
new
Promise
(
resolve
=
>
{
function
finish
(
req
buffer
)
{
resolve
(
[
req
buffer
]
)
;
}
chan
.
asyncOpen
(
new
ChannelListener
(
finish
null
flags
)
)
;
}
)
;
}
async
function
registerSimplePathHandler
(
server
path
)
{
return
server
.
registerPathHandler
(
path
(
req
resp
)
=
>
{
resp
.
writeHead
(
200
)
;
resp
.
end
(
"
done
"
)
;
}
)
;
}
add_task
(
async
function
test_verify_traffic_for_http2
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http2
.
move_to_pending_list_after_network_change
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
http
.
speculative
-
parallel
-
limit
"
0
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
let
server
=
new
NodeHTTP2Server
(
)
;
await
server
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
http2
.
move_to_pending_list_after_network_change
"
)
;
await
server
.
stop
(
)
;
}
)
;
try
{
await
server
.
registerPathHandler
(
"
/
longDelay
"
(
req
resp
)
=
>
{
setTimeout
(
function
(
)
{
resp
.
writeHead
(
200
)
;
resp
.
end
(
"
done
"
)
;
}
8000
)
;
}
)
;
}
catch
(
e
)
{
}
await
registerSimplePathHandler
(
server
"
/
test
"
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
let
chan
=
makeChan
(
https
:
/
/
localhost
:
{
server
.
port
(
)
}
/
test
)
;
await
channelOpenPromise
(
chan
CL_ALLOW_UNKNOWN_CL
)
;
}
let
sessionCount
=
await
server
.
sessionCount
(
)
;
Assert
.
equal
(
sessionCount
1
)
;
let
res
=
await
new
Promise
(
resolve
=
>
{
let
chan
=
makeChan
(
https
:
/
/
localhost
:
{
server
.
port
(
)
}
/
longDelay
)
;
chan
.
asyncOpen
(
new
ChannelListener
(
resolve
null
CL_ALLOW_UNKNOWN_CL
)
)
;
Services
.
obs
.
notifyObservers
(
null
"
network
:
link
-
status
-
changed
"
"
changed
"
)
;
let
chan1
=
makeChan
(
https
:
/
/
localhost
:
{
server
.
port
(
)
}
/
test
)
;
chan1
.
asyncOpen
(
new
ChannelListener
(
(
)
=
>
{
}
null
CL_ALLOW_UNKNOWN_CL
)
)
;
}
)
;
Assert
.
equal
(
res
.
status
Cr
.
NS_OK
)
;
Assert
.
equal
(
res
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
.
responseStatus
200
)
;
sessionCount
=
await
server
.
sessionCount
(
)
;
Assert
.
equal
(
sessionCount
2
)
;
res
=
await
new
Promise
(
resolve
=
>
{
let
chan
=
makeChan
(
https
:
/
/
localhost
:
{
server
.
port
(
)
}
/
longDelay
)
;
chan
.
asyncOpen
(
new
ChannelListener
(
resolve
null
CL_ALLOW_UNKNOWN_CL
)
)
;
Services
.
obs
.
notifyObservers
(
null
"
network
:
link
-
status
-
changed
"
"
changed
"
)
;
}
)
;
Assert
.
equal
(
res
.
status
Cr
.
NS_OK
)
;
Assert
.
equal
(
res
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
.
responseStatus
200
)
;
async
function
getSocketCount
(
)
{
return
new
Promise
(
resolve
=
>
{
gDashboard
.
requestSockets
(
function
(
data
)
{
resolve
(
data
.
sockets
.
length
)
;
}
)
;
}
)
;
}
await
TestUtils
.
waitForCondition
(
async
(
)
=
>
{
const
socketCount
=
await
getSocketCount
(
)
;
return
socketCount
=
=
=
0
;
}
"
Socket
count
should
be
0
"
)
;
await
server
.
stop
(
)
;
}
)
;
