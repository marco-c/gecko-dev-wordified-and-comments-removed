"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
let
prefs
;
let
h2Port
;
let
listen
;
const
dns
=
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
;
const
threadManager
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIThreadManager
)
;
const
mainThread
=
threadManager
.
currentThread
;
const
defaultOriginAttributes
=
{
}
;
function
setup
(
)
{
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
h2Port
=
env
.
get
(
"
MOZHTTP2_PORT
"
)
;
Assert
.
notEqual
(
h2Port
null
)
;
Assert
.
notEqual
(
h2Port
"
"
)
;
do_get_profile
(
)
;
prefs
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefBranch
)
;
prefs
.
setBoolPref
(
"
network
.
security
.
esni
.
enabled
"
false
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
"
true
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
true
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
bootstrapAddress
"
"
127
.
0
.
0
.
1
"
)
;
prefs
.
setBoolPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
true
)
;
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
false
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
clear
-
cache
-
on
-
pref
-
change
"
false
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
}
setup
(
)
;
registerCleanupFunction
(
(
)
=
>
{
prefs
.
clearUserPref
(
"
network
.
security
.
esni
.
enabled
"
)
;
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
"
)
;
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
)
;
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
prefs
.
clearUserPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
mode
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
credentials
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
allow
-
rfc1918
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
useGET
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
confirmationNS
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
blacklist
-
duration
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
request
-
timeout
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
clear
-
cache
-
on
-
pref
-
change
"
)
;
}
)
;
let
test_answer
=
"
bXkgdm9pY2UgaXMgbXkgcGFzc3dvcmQ
=
"
;
let
test_answer_addr
=
"
127
.
0
.
0
.
1
"
;
class
DNSListener
{
constructor
(
)
{
this
.
promise
=
new
Promise
(
resolve
=
>
{
this
.
resolve
=
resolve
;
}
)
;
}
onLookupComplete
(
inRequest
inRecord
inStatus
)
{
this
.
resolve
(
[
inRequest
inRecord
inStatus
]
)
;
}
then
(
)
{
return
this
.
promise
.
then
.
apply
(
this
.
promise
arguments
)
;
}
}
DNSListener
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIDNSListener
"
]
)
;
add_task
(
async
function
testEsniRequest
(
)
{
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
doh
"
)
;
let
listenerEsni
=
new
DNSListener
(
)
;
let
request
=
dns
.
asyncResolve
(
"
_esni
.
example
.
com
"
dns
.
RESOLVE_TYPE_TXT
0
null
listenerEsni
mainThread
defaultOriginAttributes
)
;
let
[
inRequest
inRecord
inStatus
]
=
await
listenerEsni
;
Assert
.
equal
(
inRequest
request
"
correct
request
was
used
"
)
;
Assert
.
equal
(
inStatus
Cr
.
NS_OK
"
status
OK
"
)
;
let
answer
=
inRecord
.
QueryInterface
(
Ci
.
nsIDNSTXTRecord
)
.
getRecordsAsOneString
(
)
;
Assert
.
equal
(
answer
test_answer
"
got
correct
answer
"
)
;
}
)
;
add_task
(
async
function
testEsniPushPart1
(
)
{
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
esni
-
dns
-
push
"
)
;
let
listenerAddr
=
new
DNSListener
(
)
;
let
request
=
dns
.
asyncResolve
(
"
_esni_push
.
example
.
com
"
dns
.
RESOLVE_TYPE_DEFAULT
0
null
listenerAddr
mainThread
defaultOriginAttributes
)
;
let
[
inRequest
inRecord
inStatus
]
=
await
listenerAddr
;
Assert
.
equal
(
inRequest
request
"
correct
request
was
used
"
)
;
Assert
.
equal
(
inStatus
Cr
.
NS_OK
"
status
OK
"
)
;
inRecord
.
QueryInterface
(
Ci
.
nsIDNSAddrRecord
)
;
let
answer
=
inRecord
.
getNextAddrAsString
(
)
;
Assert
.
equal
(
answer
test_answer_addr
"
got
correct
answer
"
)
;
}
)
;
add_task
(
async
function
testEsniPushPart2
(
)
{
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
404
"
)
;
let
listenerEsni
=
new
DNSListener
(
)
;
let
request
=
dns
.
asyncResolve
(
"
_esni_push
.
example
.
com
"
dns
.
RESOLVE_TYPE_TXT
0
null
listenerEsni
mainThread
defaultOriginAttributes
)
;
let
[
inRequest
inRecord
inStatus
]
=
await
listenerEsni
;
Assert
.
equal
(
inRequest
request
"
correct
request
was
used
"
)
;
Assert
.
equal
(
inStatus
Cr
.
NS_OK
"
status
OK
"
)
;
let
answer
=
inRecord
.
QueryInterface
(
Ci
.
nsIDNSTXTRecord
)
.
getRecordsAsOneString
(
)
;
Assert
.
equal
(
answer
test_answer
"
got
correct
answer
"
)
;
}
)
;
add_task
(
async
function
testEsniHTTPSSVC
(
)
{
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
doh
"
)
;
let
listenerEsni
=
new
DNSListener
(
)
;
let
request
=
dns
.
asyncResolve
(
"
httpssvc_esni
.
example
.
com
"
dns
.
RESOLVE_TYPE_HTTPSSVC
0
null
listenerEsni
mainThread
defaultOriginAttributes
)
;
let
[
inRequest
inRecord
inStatus
]
=
await
listenerEsni
;
Assert
.
equal
(
inRequest
request
"
correct
request
was
used
"
)
;
Assert
.
equal
(
inStatus
Cr
.
NS_OK
"
status
OK
"
)
;
let
answer
=
inRecord
.
QueryInterface
(
Ci
.
nsIDNSHTTPSSVCRecord
)
.
records
;
let
esni
=
answer
[
0
]
.
values
[
0
]
.
QueryInterface
(
Ci
.
nsISVCParamEchConfig
)
;
Assert
.
equal
(
esni
.
echconfig
"
testytestystringstring
"
"
got
correct
answer
"
)
;
}
)
;
