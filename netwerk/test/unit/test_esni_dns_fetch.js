Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
var
prefs
;
var
h2Port
;
var
listen
;
var
dns
=
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
;
var
threadManager
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIThreadManager
)
;
var
mainThread
=
threadManager
.
currentThread
;
const
defaultOriginAttributes
=
{
}
;
function
run_test
(
)
{
var
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
h2Port
=
env
.
get
(
"
MOZHTTP2_PORT
"
)
;
Assert
.
notEqual
(
h2Port
null
)
;
Assert
.
notEqual
(
h2Port
"
"
)
;
do_get_profile
(
)
;
prefs
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefBranch
)
;
prefs
.
setBoolPref
(
"
network
.
security
.
esni
.
enabled
"
true
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
"
true
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
true
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
bootstrapAddress
"
"
127
.
0
.
0
.
1
"
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
esni
-
dns
"
)
;
prefs
.
setBoolPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
true
)
;
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
false
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
CA
.
cert
.
der
"
"
CTu
u
u
"
)
;
do_test_pending
(
)
;
listen
=
dns
.
asyncResolveByType
(
"
_esni
.
example
.
com
"
dns
.
RESOLVE_TYPE_TXT
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
registerCleanupFunction
(
(
)
=
>
{
prefs
.
clearUserPref
(
"
network
.
security
.
esni
.
enabled
"
)
;
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
"
)
;
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
)
;
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
prefs
.
clearUserPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
mode
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
credentials
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
allow
-
rfc1918
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
useGET
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
confirmationNS
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
blacklist
-
duration
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
request
-
timeout
"
)
;
}
)
;
function
readFile
(
file
)
{
let
fstream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileInputStream
)
;
fstream
.
init
(
file
-
1
0
0
)
;
let
data
=
NetUtil
.
readInputStreamToString
(
fstream
fstream
.
available
(
)
)
;
fstream
.
close
(
)
;
return
data
;
}
function
addCertFromFile
(
certdb
filename
trustString
)
{
let
certFile
=
do_get_file
(
filename
false
)
;
let
der
=
readFile
(
certFile
)
;
certdb
.
addCert
(
der
trustString
)
;
}
var
test_answer
=
"
bXkgdm9pY2UgaXMgbXkgcGFzc3dvcmQ
=
"
;
var
listenerFine
=
{
onLookupByTypeComplete
:
function
(
inRequest
inRecord
inStatus
)
{
if
(
inRequest
=
=
listen
)
{
Assert
.
ok
(
!
inStatus
)
;
var
answer
=
inRecord
.
getRecordsAsOneString
(
)
;
Assert
.
equal
(
answer
test_answer
)
;
do_test_finished
(
)
;
}
}
QueryInterface
:
function
(
aIID
)
{
if
(
aIID
.
equals
(
Ci
.
nsIDNSListener
)
|
|
aIID
.
equals
(
Ci
.
nsISupports
)
)
{
return
this
;
}
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
}
;
