Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
LoadContextInfo
.
jsm
'
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
var
first
=
true
;
function
contentHandler
(
metadata
response
)
{
response
.
setHeader
(
"
Content
-
Type
"
'
text
/
plain
'
)
;
var
body
=
"
first
"
;
if
(
!
first
)
{
body
=
"
second
"
;
}
first
=
false
;
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
XPCOMUtils
.
defineLazyGetter
(
this
"
uri
"
function
(
)
{
return
"
http
:
/
/
localhost
:
"
+
httpserver
.
identity
.
primaryPort
;
}
)
;
var
httpserver
=
null
;
function
run_test
(
)
{
httpserver
=
new
HttpServer
(
)
;
httpserver
.
registerPathHandler
(
"
/
test
"
contentHandler
)
;
httpserver
.
start
(
-
1
)
;
add_test
(
test_first_response
)
;
add_test
(
test_inhibit_caching
)
;
run_next_test
(
)
;
}
function
test_first_response
(
)
{
var
chan
=
NetUtil
.
newChannel
(
{
uri
:
uri
+
"
/
test
"
loadUsingSystemPrincipal
:
true
}
)
;
chan
.
asyncOpen2
(
new
ChannelListener
(
check_first_response
null
)
)
;
}
function
check_first_response
(
request
buffer
)
{
request
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
Assert
.
equal
(
request
.
responseStatus
200
)
;
Assert
.
equal
(
buffer
"
first
"
)
;
asyncOpenCacheEntry
(
uri
+
"
/
test
"
"
disk
"
Ci
.
nsICacheStorage
.
OPEN_READONLY
null
cache_entry_callback
)
;
}
function
cache_entry_callback
(
status
entry
)
{
equal
(
status
Cr
.
NS_OK
)
;
var
inputStream
=
entry
.
openInputStream
(
0
)
;
pumpReadStream
(
inputStream
function
(
read
)
{
inputStream
.
close
(
)
;
equal
(
read
"
first
"
)
;
run_next_test
(
)
;
}
)
;
}
function
test_inhibit_caching
(
)
{
var
chan
=
NetUtil
.
newChannel
(
{
uri
:
uri
+
"
/
test
"
loadUsingSystemPrincipal
:
true
}
)
;
chan
.
QueryInterface
(
Ci
.
nsIRequest
)
.
loadFlags
|
=
Ci
.
nsIRequest
.
INHIBIT_CACHING
;
chan
.
asyncOpen2
(
new
ChannelListener
(
check_second_response
null
)
)
;
}
function
check_second_response
(
request
buffer
)
{
request
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
Assert
.
equal
(
request
.
responseStatus
200
)
;
Assert
.
equal
(
buffer
"
second
"
)
;
asyncOpenCacheEntry
(
uri
+
"
/
test
"
"
disk
"
Ci
.
nsICacheStorage
.
OPEN_READONLY
null
cache_entry_callback
)
;
}
