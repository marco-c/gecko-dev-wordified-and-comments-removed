Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
gIoService
=
Cc
[
"
mozilla
.
org
/
network
/
io
-
service
;
1
"
]
.
getService
(
Ci
.
nsIIOService
)
;
var
gPrefs
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPrefBranch
)
;
var
gVerifier
=
Cc
[
"
mozilla
.
org
/
network
/
packaged
-
app
-
verifier
;
1
"
]
.
createInstance
(
Ci
.
nsIPackagedAppVerifier
)
;
var
gCacheStorageService
=
Cc
[
"
mozilla
.
org
/
netwerk
/
cache
-
storage
-
service
;
1
"
]
.
getService
(
Ci
.
nsICacheStorageService
)
;
;
var
gLoadContextInfoFactory
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoadContextInfo
.
jsm
"
{
}
)
.
LoadContextInfo
;
const
kUriIdx
=
0
;
const
kStatusCodeIdx
=
1
;
const
kVerificationSuccessIdx
=
2
;
const
kContentIdx
=
3
;
function
enable_developer_mode
(
)
{
gPrefs
.
setBoolPref
(
"
network
.
http
.
packaged
-
apps
-
developer
-
mode
"
true
)
;
}
function
reset_developer_mode
(
)
{
gPrefs
.
clearUserPref
(
"
network
.
http
.
packaged
-
apps
-
developer
-
mode
"
)
;
}
function
createVerifierListener
(
aExpecetedCallbacks
aExpectedPackageId
aExpectedIsSigned
aPackageCacheEntry
)
{
let
cnt
=
0
;
return
{
onVerified
:
function
(
aIsManifest
aUri
aCacheEntry
aStatusCode
aIsLastPart
aVerificationSuccess
)
{
cnt
+
+
;
let
expectedCallback
=
aExpecetedCallbacks
[
cnt
-
1
]
;
let
isManifest
=
(
cnt
=
=
=
1
)
;
let
isLastPart
=
(
cnt
=
=
=
aExpecetedCallbacks
.
length
)
;
equal
(
aIsManifest
isManifest
'
is
manifest
'
)
;
equal
(
aUri
.
asciiSpec
expectedCallback
[
kUriIdx
]
'
URL
'
)
;
equal
(
aStatusCode
expectedCallback
[
kStatusCodeIdx
]
'
status
code
'
)
;
equal
(
aIsLastPart
isLastPart
'
is
lastPart
'
)
;
equal
(
aVerificationSuccess
expectedCallback
[
kVerificationSuccessIdx
]
'
verification
result
'
)
;
if
(
isManifest
)
{
equal
(
gVerifier
.
packageIdentifier
aExpectedPackageId
'
package
identifier
'
)
;
equal
(
gVerifier
.
isPackageSigned
aExpectedIsSigned
'
is
package
signed
'
)
;
ok
(
!
!
aPackageCacheEntry
aPackageCacheEntry
.
key
)
;
let
signePakIdInCache
=
aPackageCacheEntry
.
getMetaDataElement
(
'
package
-
id
'
)
;
equal
(
signePakIdInCache
(
aExpectedIsSigned
?
aExpectedPackageId
:
'
'
)
'
package
-
id
in
cache
'
)
;
}
if
(
isLastPart
)
{
reset_developer_mode
(
)
;
run_next_test
(
)
;
}
}
}
;
}
;
function
feedData
(
aString
)
{
let
stringStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
stringStream
.
setData
(
aString
aString
.
length
)
;
gVerifier
.
onDataAvailable
(
null
null
stringStream
0
aString
.
length
)
;
}
function
feedResources
(
aExpectedCallbacks
aSignature
)
{
for
(
let
i
=
0
;
i
<
aExpectedCallbacks
.
length
;
i
+
+
)
{
let
expectedCallback
=
aExpectedCallbacks
[
i
]
;
let
isLastPart
=
(
i
=
=
=
aExpectedCallbacks
.
length
-
1
)
;
let
uri
=
gIoService
.
newURI
(
expectedCallback
[
kUriIdx
]
null
null
)
;
gVerifier
.
onStartRequest
(
null
uri
)
;
let
contentString
=
expectedCallback
[
kContentIdx
]
;
if
(
contentString
!
=
=
undefined
)
{
feedData
(
contentString
)
;
}
let
info
=
gVerifier
.
createResourceCacheInfo
(
uri
null
expectedCallback
[
kStatusCodeIdx
]
isLastPart
)
;
gVerifier
.
onStopRequest
(
null
info
expectedCallback
[
kStatusCodeIdx
]
)
;
}
}
function
createPackageCache
(
aPackageUriAsAscii
aLoadContextInfo
)
{
let
cacheStorage
=
gCacheStorageService
.
memoryCacheStorage
(
aLoadContextInfo
)
;
let
uri
=
gIoService
.
newURI
(
aPackageUriAsAscii
null
null
)
;
return
cacheStorage
.
openTruncate
(
uri
'
'
)
;
}
function
test_no_signature
(
aDeveloperMode
)
{
const
kOrigin
=
'
http
:
/
/
foo
.
com
'
;
aDeveloperMode
=
!
!
aDeveloperMode
;
const
expectedCallbacks
=
[
[
kOrigin
+
'
/
manifest
'
Cr
.
NS_OK
true
]
[
kOrigin
+
'
/
1
.
html
'
Cr
.
NS_OK
true
]
[
kOrigin
+
'
/
2
.
js
'
Cr
.
NS_OK
true
]
[
kOrigin
+
'
/
3
.
jpg
'
Cr
.
NS_OK
true
]
[
kOrigin
+
'
/
4
.
html
'
Cr
.
NS_OK
true
]
[
kOrigin
+
'
/
5
.
css
'
Cr
.
NS_OK
true
]
]
;
let
isPackageSigned
=
false
;
let
packageUriString
=
kOrigin
+
'
/
pak
'
+
(
aDeveloperMode
?
'
-
dev
'
:
'
'
)
;
let
packageCacheEntry
=
createPackageCache
(
packageUriString
gLoadContextInfoFactory
.
default
)
;
let
verifierListener
=
createVerifierListener
(
expectedCallbacks
'
'
isPackageSigned
packageCacheEntry
)
;
gVerifier
.
init
(
verifierListener
'
'
packageCacheEntry
)
;
feedResources
(
expectedCallbacks
'
'
)
;
}
function
test_invalid_signature
(
aDeveloperMode
)
{
const
kOrigin
=
'
http
:
/
/
bar
.
com
'
;
aDeveloperMode
=
!
!
aDeveloperMode
;
let
verificationResult
=
aDeveloperMode
;
let
isPackageSigned
=
aDeveloperMode
;
const
kPackagedId
=
'
611FC2FE
-
491D
-
4A47
-
B3B3
-
43FBDF6F404F
'
;
const
kManifestContent
=
'
Content
-
Location
:
manifest
.
webapp
\
r
\
n
'
+
'
Content
-
Type
:
application
/
x
-
web
-
app
-
manifest
+
json
\
r
\
n
'
+
'
\
r
\
n
'
+
'
{
"
package
-
identifier
"
:
"
'
+
kPackagedId
+
'
"
}
'
;
const
expectedCallbacks
=
[
[
kOrigin
+
'
/
manifest
'
Cr
.
NS_OK
verificationResult
kManifestContent
]
[
kOrigin
+
'
/
1
.
html
'
Cr
.
NS_OK
verificationResult
]
[
kOrigin
+
'
/
2
.
js
'
Cr
.
NS_OK
verificationResult
]
[
kOrigin
+
'
/
3
.
jpg
'
Cr
.
NS_OK
verificationResult
]
[
kOrigin
+
'
/
4
.
html
'
Cr
.
NS_OK
verificationResult
]
[
kOrigin
+
'
/
5
.
css
'
Cr
.
NS_OK
verificationResult
]
]
;
let
packageUriString
=
kOrigin
+
'
/
pak
'
+
(
aDeveloperMode
?
'
-
dev
'
:
'
'
)
;
let
packageCacheEntry
=
createPackageCache
(
packageUriString
gLoadContextInfoFactory
.
private
)
;
let
verifierListener
=
createVerifierListener
(
expectedCallbacks
aDeveloperMode
?
kPackagedId
:
'
'
isPackageSigned
packageCacheEntry
)
;
let
signature
=
'
manifest
-
signature
:
11111111111111111111111
'
;
gVerifier
.
init
(
verifierListener
signature
packageCacheEntry
)
;
feedResources
(
expectedCallbacks
signature
)
;
}
function
test_no_signature_developer_mode
(
)
{
enable_developer_mode
(
)
test_no_signature
(
true
)
;
}
function
test_invalid_signature_developer_mode
(
)
{
enable_developer_mode
(
)
test_invalid_signature
(
true
)
;
}
function
run_test
(
)
{
ok
(
!
!
gVerifier
)
;
add_test
(
test_no_signature
)
;
add_test
(
test_invalid_signature
)
;
add_test
(
test_no_signature_developer_mode
)
;
add_test
(
test_invalid_signature_developer_mode
)
;
run_next_test
(
)
;
}
