add_task
(
async
function
run_test
(
)
{
let
profile
=
do_get_profile
(
)
;
Services
.
cookies
.
sessionCookies
;
await
promise_close_profile
(
)
;
let
schema14db
=
new
CookieDatabaseConnection
(
do_get_cookie_file
(
profile
)
14
)
;
let
now
=
Math
.
round
(
Date
.
now
(
)
/
1000
)
;
let
invalidFPCookie
=
new
Cookie
(
"
invalid
"
"
bad
"
"
example
.
com
"
"
/
"
now
+
34560000
now
now
false
true
false
false
{
partitionKey
:
"
(
https
example
.
com
)
"
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_UNSET
false
)
;
schema14db
.
insertCookie
(
invalidFPCookie
)
;
let
valid1stCHIPS
=
new
Cookie
(
"
valid1stCHIPS
"
"
good
"
"
example
.
com
"
"
/
"
now
+
34560000
now
now
false
true
false
false
{
partitionKey
:
"
(
https
example
.
com
)
"
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_UNSET
true
)
;
schema14db
.
insertCookie
(
valid1stCHIPS
)
;
let
unpartitionedCookie
=
new
Cookie
(
"
valid
"
"
good
"
"
example
.
com
"
"
/
"
now
+
34560000
now
now
false
true
false
false
{
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_UNSET
false
)
;
schema14db
.
insertCookie
(
unpartitionedCookie
)
;
let
valid3rdTCPCookie
=
new
Cookie
(
"
valid3rdTCP
"
"
good
"
"
example
.
com
"
"
/
"
now
+
34560000
now
now
false
true
false
false
{
partitionKey
:
"
(
https
example
.
org
)
"
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_UNSET
false
)
;
schema14db
.
insertCookie
(
valid3rdTCPCookie
)
;
let
valid3rdCHIPSCookie
=
new
Cookie
(
"
valid3rdCHIPS
"
"
good
"
"
example
.
com
"
"
/
"
now
+
34560000
now
now
false
true
false
false
{
partitionKey
:
"
(
https
example
.
org
)
"
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_UNSET
true
)
;
schema14db
.
insertCookie
(
valid3rdCHIPSCookie
)
;
schema14db
.
close
(
)
;
schema14db
=
null
;
{
const
dbConnection
=
Services
.
storage
.
openDatabase
(
do_get_cookie_file
(
profile
)
)
;
const
stmt
=
dbConnection
.
createStatement
(
"
SELECT
count
(
name
)
FROM
moz_cookies
WHERE
host
=
'
example
.
com
'
;
"
)
;
const
success
=
stmt
.
executeStep
(
)
;
Assert
.
ok
(
success
)
;
const
count
=
stmt
.
getInt32
(
0
)
;
Assert
.
equal
(
count
5
)
;
stmt
.
finalize
(
)
;
dbConnection
.
close
(
)
;
}
await
promise_load_profile
(
)
;
let
cookies
=
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
}
)
;
Assert
.
equal
(
cookies
.
length
1
)
;
for
(
const
cookie
of
cookies
)
{
Assert
.
equal
(
cookie
.
value
"
good
"
)
;
}
cookies
=
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
partitionKey
:
"
(
https
example
.
com
)
"
}
)
;
Assert
.
equal
(
cookies
.
length
1
)
;
for
(
const
cookie
of
cookies
)
{
Assert
.
equal
(
cookie
.
value
"
good
"
)
;
}
cookies
=
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
partitionKey
:
"
(
https
example
.
org
)
"
}
)
;
Assert
.
equal
(
cookies
.
length
2
)
;
for
(
const
cookie
of
cookies
)
{
Assert
.
equal
(
cookie
.
value
"
good
"
)
;
}
{
const
dbConnection
=
Services
.
storage
.
openDatabase
(
do_get_cookie_file
(
profile
)
)
;
const
stmt
=
dbConnection
.
createStatement
(
"
SELECT
count
(
name
)
FROM
moz_cookies
WHERE
value
=
'
bad
'
;
"
)
;
const
success
=
stmt
.
executeStep
(
)
;
Assert
.
ok
(
success
)
;
const
count
=
stmt
.
getInt32
(
0
)
;
Assert
.
equal
(
count
0
)
;
stmt
.
finalize
(
)
;
dbConnection
.
close
(
)
;
}
Services
.
cookies
.
removeAll
(
)
;
do_close_profile
(
)
;
}
)
;
