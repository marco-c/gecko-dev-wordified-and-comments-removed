"
use
strict
"
;
Services
.
prefs
.
setBoolPref
(
"
network
.
proxy
.
allow_hijacking_localhost
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
allow_hijacking_localhost
"
)
;
}
)
;
var
CC
=
Components
.
Constructor
;
const
ServerSocket
=
CC
(
"
mozilla
.
org
/
network
/
server
-
socket
;
1
"
"
nsIServerSocket
"
"
init
"
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
add_setup
(
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http2
.
websockets
"
true
)
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
http2
.
websockets
"
)
;
}
)
;
async
function
test_tls_fail_on_direct_ws_server_handshake
(
)
{
let
wss
=
new
NodeWebSocketServer
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
wss
.
stop
(
)
;
}
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
let
chan
=
makeWebSocketChan
(
)
;
let
url
=
wss
:
/
/
localhost
:
{
wss
.
port
(
)
}
;
const
msg
=
"
test
tls
handshake
with
direct
ws
server
fails
"
;
let
[
status
]
=
await
openWebSocketChannelPromise
(
chan
url
msg
)
;
if
(
status
=
=
2152398930
)
{
Assert
.
equal
(
status
0x804b0052
)
;
}
else
{
Assert
.
equal
(
status
0x804b0057
)
;
}
}
async
function
test_tls_fail_on_proxy_handshake
(
)
{
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
let
proxy
=
new
NodeHTTPSProxyServer
(
)
;
await
proxy
.
start
(
)
;
let
wss
=
new
NodeWebSocketServer
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
wss
.
stop
(
)
;
await
proxy
.
stop
(
)
;
}
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
let
chan
=
makeWebSocketChan
(
)
;
let
url
=
wss
:
/
/
localhost
:
{
wss
.
port
(
)
}
;
const
msg
=
"
test
tls
failure
on
proxy
handshake
"
;
let
[
status
]
=
await
openWebSocketChannelPromise
(
chan
url
msg
)
;
if
(
status
=
=
2152398930
)
{
Assert
.
equal
(
status
0x804b0052
)
;
}
else
{
Assert
.
equal
(
status
0x804b0057
)
;
}
await
proxy
.
stop
(
)
;
}
async
function
test_non_responsive_ws_server_closed_port
(
)
{
let
randomPort
=
666
;
let
chan
=
makeWebSocketChan
(
)
;
let
url
=
wss
:
/
/
localhost
:
{
randomPort
}
;
const
msg
=
"
test
non
-
responsive
ws
server
closed
port
"
;
let
[
status
]
=
await
openWebSocketChannelPromise
(
chan
url
msg
)
;
Assert
.
equal
(
status
0x804b0057
)
;
}
async
function
test_non_responsive_ws_server_open_port
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
websocket
.
timeout
.
open
"
1
)
;
var
server
=
ServerSocket
(
-
1
true
-
1
)
;
var
port
=
server
.
port
;
info
(
"
server
:
listening
on
"
+
server
.
port
)
;
server
.
asyncListen
(
{
}
)
;
registerCleanupFunction
(
(
)
=
>
{
server
.
close
(
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
websocket
.
timeout
.
open
"
)
;
}
)
;
let
chan
=
makeWebSocketChan
(
)
;
let
url
=
wss
:
/
/
localhost
:
{
port
}
;
const
msg
=
"
test
non
-
responsive
ws
server
open
port
"
;
let
[
status
]
=
await
openWebSocketChannelPromise
(
chan
url
msg
)
;
Assert
.
equal
(
status
Cr
.
NS_ERROR_NET_TIMEOUT_EXTERNAL
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
websocket
.
timeout
.
open
"
)
;
}
async
function
test_proxy_doesnt_respond
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
websocket
.
timeout
.
open
"
1
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http2
.
websockets
"
false
)
;
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
addCertFromFile
(
certdb
"
proxy
-
ca
.
pem
"
"
CTu
u
u
"
)
;
info
(
"
spinning
up
proxy
"
)
;
let
proxy
=
new
NodeHTTPSProxyServer
(
)
;
await
proxy
.
start
(
)
;
const
pps
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
-
proxy
-
service
;
1
"
]
.
getService
(
)
;
let
randomPort
=
proxy
.
port
(
)
+
1
;
var
filter
=
new
NodeProxyFilter
(
proxy
.
protocol
(
)
"
localhost
"
randomPort
0
)
;
pps
.
registerFilter
(
filter
10
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
proxy
.
stop
(
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
websocket
.
timeout
.
open
"
)
;
}
)
;
info
(
"
spinning
up
websocket
server
"
)
;
let
wss
=
new
NodeWebSocketServer
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
(
)
=
>
{
wss
.
stop
(
)
;
}
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
await
wss
.
registerMessageHandler
(
(
data
ws
)
=
>
{
ws
.
send
(
data
)
;
}
)
;
info
(
"
creating
and
connecting
websocket
"
)
;
let
url
=
wss
:
/
/
localhost
:
{
wss
.
port
(
)
}
;
let
conn
=
new
WebSocketConnection
(
)
;
conn
.
open
(
url
)
;
info
(
"
checking
proxy
info
"
)
;
let
proxyInfoPromise
=
conn
.
getProxyInfo
(
)
;
let
proxyInfo
=
await
proxyInfoPromise
;
Assert
.
equal
(
proxyInfo
.
type
"
https
"
)
;
let
{
status
}
=
await
conn
.
finished
(
)
;
info
(
"
stats
:
"
+
status
)
;
Assert
.
equal
(
status
0x804b0057
)
;
}
add_task
(
test_tls_fail_on_direct_ws_server_handshake
)
;
add_task
(
test_tls_fail_on_proxy_handshake
)
;
add_task
(
test_non_responsive_ws_server_closed_port
)
;
add_task
(
test_non_responsive_ws_server_open_port
)
;
add_task
(
test_proxy_doesnt_respond
)
;
