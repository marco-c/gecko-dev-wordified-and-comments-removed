"
use
strict
"
;
const
{
NodeServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
function
trr_test_setup
(
)
{
dump
(
"
start
!
\
n
"
)
;
do_get_profile
(
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
bootstrapAddress
"
"
127
.
0
.
0
.
1
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
A
-
and
-
AAAA
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
clear
-
cache
-
on
-
pref
-
change
"
false
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
}
function
trr_clear_prefs
(
)
{
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
mode
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
credentials
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
allow
-
rfc1918
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
useGET
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
confirmationNS
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
blacklist
-
duration
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
request_timeout_ms
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
request_timeout_mode_trronly_ms
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
disable
-
ECS
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
early
-
AAAA
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
skip
-
AAAA
-
when
-
not
-
supported
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
wait
-
for
-
A
-
and
-
AAAA
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
excluded
-
domains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
clear
-
cache
-
on
-
pref
-
change
"
)
;
Services
.
prefs
.
clearUserPref
(
"
captivedetect
.
canonicalURL
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
send_empty_accept
-
encoding_headers
"
)
;
}
class
TRRDNSListener
{
constructor
(
name
expectedAnswer
expectedSuccess
=
true
delay
trrServer
=
"
"
expectEarlyFail
=
false
)
{
this
.
name
=
name
;
this
.
expectedAnswer
=
expectedAnswer
;
this
.
expectedSuccess
=
expectedSuccess
;
this
.
delay
=
delay
;
this
.
promise
=
new
Promise
(
resolve
=
>
{
this
.
resolve
=
resolve
;
}
)
;
const
dns
=
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
;
if
(
trrServer
=
=
"
"
)
{
this
.
request
=
dns
.
asyncResolve
(
name
0
this
Services
.
tm
.
currentThread
{
}
)
;
}
else
{
try
{
this
.
request
=
dns
.
asyncResolveWithTrrServer
(
name
trrServer
0
this
Services
.
tm
.
currentThread
{
}
)
;
Assert
.
ok
(
!
expectEarlyFail
)
;
}
catch
(
e
)
{
Assert
.
ok
(
expectEarlyFail
)
;
this
.
resolve
(
[
e
]
)
;
}
}
}
onLookupComplete
(
inRequest
inRecord
inStatus
)
{
Assert
.
ok
(
inRequest
=
=
this
.
request
"
Checking
that
this
is
the
correct
callback
"
)
;
if
(
!
this
.
expectedSuccess
)
{
this
.
resolve
(
[
inRequest
inRecord
inStatus
]
)
;
return
;
}
Assert
.
equal
(
inStatus
Cr
.
NS_OK
"
Checking
status
"
)
;
let
answer
=
inRecord
.
getNextAddrAsString
(
)
;
Assert
.
equal
(
answer
this
.
expectedAnswer
Checking
result
for
{
this
.
name
}
)
;
if
(
this
.
delay
!
=
=
undefined
)
{
Assert
.
greaterOrEqual
(
inRecord
.
trrFetchDurationNetworkOnly
this
.
delay
the
response
should
take
at
least
{
this
.
delay
}
)
;
Assert
.
greaterOrEqual
(
inRecord
.
trrFetchDuration
this
.
delay
the
response
should
take
at
least
{
this
.
delay
}
)
;
if
(
this
.
delay
=
=
0
)
{
Assert
.
equal
(
inRecord
.
trrFetchDurationNetworkOnly
0
the
response
time
should
be
0
)
;
Assert
.
equal
(
inRecord
.
trrFetchDuration
this
.
delay
the
response
time
should
be
0
)
;
}
}
this
.
resolve
(
[
inRequest
inRecord
inStatus
]
)
;
}
QueryInterface
(
aIID
)
{
if
(
aIID
.
equals
(
Ci
.
nsIDNSListener
)
|
|
aIID
.
equals
(
Ci
.
nsISupports
)
)
{
return
this
;
}
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NO_INTERFACE
)
;
}
then
(
)
{
return
this
.
promise
.
then
.
apply
(
this
.
promise
arguments
)
;
}
}
class
TRRServerCode
{
static
async
startServer
(
port
)
{
const
fs
=
require
(
"
fs
"
)
;
const
options
=
{
key
:
fs
.
readFileSync
(
__dirname
+
"
/
http2
-
cert
.
key
"
)
cert
:
fs
.
readFileSync
(
__dirname
+
"
/
http2
-
cert
.
pem
"
)
}
;
const
url
=
require
(
"
url
"
)
;
global
.
path_handlers
=
{
}
;
global
.
handler
=
(
req
resp
)
=
>
{
const
path
=
req
.
headers
[
global
.
http2
.
constants
.
HTTP2_HEADER_PATH
]
;
let
u
=
url
.
parse
(
req
.
url
true
)
;
let
handler
=
global
.
path_handlers
[
u
.
pathname
]
;
if
(
handler
)
{
return
handler
(
req
resp
u
)
;
}
let
response
=
<
h1
>
404
Path
not
found
:
{
path
}
<
/
h1
>
;
resp
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
)
;
resp
.
setHeader
(
"
Content
-
Length
"
response
.
length
)
;
resp
.
writeHead
(
404
)
;
resp
.
end
(
response
)
;
}
;
global
.
dns_query_answers
=
{
}
;
global
.
http2
=
require
(
"
http2
"
)
;
global
.
server
=
global
.
http2
.
createSecureServer
(
options
global
.
handler
)
;
await
global
.
server
.
listen
(
port
)
;
global
.
dnsPacket
=
require
(
{
__dirname
}
/
.
.
/
dns
-
packet
)
;
global
.
ip
=
require
(
{
__dirname
}
/
.
.
/
node
-
ip
)
;
return
global
.
server
.
address
(
)
.
port
;
}
}
function
trrQueryHandler
(
req
resp
url
)
{
let
requestBody
=
Buffer
.
from
(
"
"
)
;
let
method
=
req
.
headers
[
global
.
http2
.
constants
.
HTTP2_HEADER_METHOD
]
;
if
(
method
=
=
"
POST
"
)
{
req
.
on
(
"
data
"
chunk
=
>
{
requestBody
=
Buffer
.
concat
(
[
requestBody
chunk
]
)
;
}
)
.
on
(
"
end
"
(
)
=
>
{
return
processRequest
(
req
resp
requestBody
)
;
}
)
;
}
else
if
(
method
=
=
"
GET
"
)
{
if
(
!
url
.
query
.
dns
)
{
resp
.
writeHead
(
400
)
;
resp
.
end
(
"
Missing
dns
parameter
"
)
;
return
;
}
requestBody
=
Buffer
.
from
(
url
.
query
.
dns
"
base64
"
)
;
return
processRequest
(
req
resp
requestBody
)
;
}
else
{
resp
.
writeHead
(
405
)
;
resp
.
end
(
"
Unexpected
method
"
)
;
}
function
processRequest
(
req
resp
payload
)
{
let
dnsQuery
=
global
.
dnsPacket
.
decode
(
payload
)
;
let
answers
=
global
.
dns_query_answers
[
{
dnsQuery
.
questions
[
0
]
.
name
}
/
{
dnsQuery
.
questions
[
0
]
.
type
}
]
|
|
[
]
;
let
buf
=
global
.
dnsPacket
.
encode
(
{
type
:
"
response
"
id
:
dnsQuery
.
id
flags
:
global
.
dnsPacket
.
RECURSION_DESIRED
questions
:
dnsQuery
.
questions
answers
}
)
;
resp
.
setHeader
(
"
Content
-
Length
"
buf
.
length
)
;
resp
.
writeHead
(
200
{
"
Content
-
Type
"
:
"
application
/
dns
-
message
"
}
)
;
resp
.
write
(
buf
)
;
resp
.
end
(
"
"
)
;
}
}
class
TRRServer
{
async
start
(
port
=
0
)
{
this
.
processId
=
await
NodeServer
.
fork
(
)
;
await
this
.
execute
(
TRRServerCode
)
;
this
.
port
=
await
this
.
execute
(
TRRServerCode
.
startServer
(
{
port
}
)
)
;
await
this
.
registerPathHandler
(
"
/
dns
-
query
"
trrQueryHandler
)
;
}
async
execute
(
command
)
{
return
NodeServer
.
execute
(
this
.
processId
command
)
;
}
async
stop
(
)
{
if
(
this
.
processId
)
{
await
NodeServer
.
kill
(
this
.
processId
)
;
this
.
processId
=
undefined
;
}
}
async
registerPathHandler
(
path
handler
)
{
return
this
.
execute
(
global
.
path_handlers
[
"
{
path
}
"
]
=
{
handler
.
toString
(
)
}
)
;
}
async
registerDoHAnswers
(
name
type
answers
)
{
let
text
=
global
.
dns_query_answers
[
"
{
name
}
/
{
type
}
"
]
=
{
JSON
.
stringify
(
answers
)
}
;
return
this
.
execute
(
text
)
;
}
}
