var
test_generator
=
do_run_test
(
)
;
function
run_test
(
)
{
do_test_pending
(
)
;
test_generator
.
next
(
)
;
}
function
finish_test
(
)
{
executeSoon
(
function
(
)
{
test_generator
.
return
(
)
;
do_test_finished
(
)
;
}
)
;
}
function
*
do_run_test
(
)
{
let
profile
=
do_get_profile
(
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
0
)
;
Services
.
cookies
;
let
uri
=
NetUtil
.
newURI
(
"
http
:
/
/
foo
.
com
"
)
;
Services
.
cookies
.
setCookieString
(
uri
null
"
oh
=
hai
;
max
-
age
=
1000
"
null
)
;
let
enumerator
=
Services
.
cookiemgr
.
enumerator
;
Assert
.
ok
(
enumerator
.
hasMoreElements
(
)
)
;
let
cookie
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie
)
;
Assert
.
ok
(
!
enumerator
.
hasMoreElements
(
)
)
;
do_close_profile
(
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookieString
(
uri
null
)
"
"
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookieStringFromHttp
(
uri
null
null
)
"
"
)
;
Services
.
cookies
.
setCookieString
(
uri
null
"
oh2
=
hai
"
null
)
;
Services
.
cookies
.
setCookieStringFromHttp
(
uri
null
null
"
oh3
=
hai
"
null
null
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookieString
(
uri
null
)
"
"
)
;
do_check_throws
(
function
(
)
{
Services
.
cookiemgr
.
removeAll
(
)
;
}
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
do_check_throws
(
function
(
)
{
Services
.
cookiemgr
.
enumerator
;
}
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
do_check_throws
(
function
(
)
{
Services
.
cookiemgr
.
add
(
"
foo
.
com
"
"
"
"
oh4
"
"
hai
"
false
false
false
0
{
}
Ci
.
nsICookie
.
SAMESITE_NONE
)
;
}
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
do_check_throws
(
function
(
)
{
Services
.
cookiemgr
.
remove
(
"
foo
.
com
"
"
"
"
oh4
"
{
}
)
;
}
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
do_check_throws
(
function
(
)
{
let
file
=
profile
.
clone
(
)
;
file
.
append
(
"
cookies
.
txt
"
)
;
Services
.
cookiemgr
.
importCookies
(
file
)
;
}
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
do_check_throws
(
function
(
)
{
Services
.
cookiemgr
.
cookieExists
(
cookie
.
host
cookie
.
path
cookie
.
name
{
}
)
;
}
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
do_check_throws
(
function
(
)
{
Services
.
cookies
.
countCookiesFromHost
(
"
foo
.
com
"
)
;
}
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
do_check_throws
(
function
(
)
{
Services
.
cookies
.
getCookiesFromHost
(
"
foo
.
com
"
{
}
)
;
}
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
new
_observer
(
test_generator
"
cookie
-
db
-
closed
"
)
;
yield
;
do_load_profile
(
)
;
Assert
.
ok
(
Services
.
cookiemgr
.
cookieExists
(
cookie
.
host
cookie
.
path
cookie
.
name
{
}
)
)
;
finish_test
(
)
;
}
