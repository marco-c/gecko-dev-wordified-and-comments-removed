"
use
strict
"
;
add_task
(
async
function
test_chips_migration
(
)
{
let
profile
=
do_get_profile
(
)
;
Services
.
cookies
.
sessionCookies
;
await
promise_close_profile
(
)
;
do_get_cookie_file
(
profile
)
.
remove
(
false
)
;
let
database
=
new
CookieDatabaseConnection
(
do_get_cookie_file
(
profile
)
14
)
;
let
now
=
Date
.
now
(
)
*
1000
;
let
expiry
=
Math
.
round
(
now
/
1e6
+
1000
)
;
let
cookie
=
new
Cookie
(
"
test
"
"
Some
data
"
"
example
.
com
"
"
/
"
expiry
now
now
false
false
false
false
{
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_UNSET
false
)
;
database
.
insertCookie
(
cookie
)
;
cookie
=
new
Cookie
(
"
test
partitioned
"
"
Some
data
"
"
example
.
com
"
"
/
"
expiry
now
now
false
false
false
false
{
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_UNSET
true
)
;
database
.
insertCookie
(
cookie
)
;
cookie
=
new
Cookie
(
"
test
overwrite
"
"
Overwritten
"
"
example
.
com
"
"
/
"
expiry
now
now
false
false
false
false
{
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_UNSET
true
)
;
database
.
insertCookie
(
cookie
)
;
cookie
=
new
Cookie
(
"
test
overwrite
"
"
Did
not
overwrite
"
"
example
.
com
"
"
/
"
expiry
now
now
false
false
false
false
{
partitionKey
:
"
(
https
example
.
com
)
"
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_UNSET
true
)
;
database
.
insertCookie
(
cookie
)
;
database
.
close
(
)
;
database
=
null
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
cookie
.
CHIPS
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
cookie
.
CHIPS
.
migrateDatabase
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
CHIPS
.
enabled
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
CHIPS
.
lastMigrateDatabase
"
0
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
CHIPS
.
migrateDatabaseTarget
"
0
)
;
await
promise_load_profile
(
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
}
)
.
length
3
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
}
)
.
filter
(
cookie
=
>
cookie
.
name
=
=
"
test
"
)
.
length
1
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
}
)
.
filter
(
cookie
=
>
cookie
.
name
=
=
"
test
partitioned
"
)
.
length
1
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
}
)
.
filter
(
cookie
=
>
cookie
.
name
=
=
"
test
overwrite
"
)
.
length
1
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
partitionKey
:
"
(
https
example
.
com
)
"
}
)
.
length
1
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
}
)
.
filter
(
cookie
=
>
cookie
.
name
=
=
"
test
overwrite
"
)
.
length
1
)
;
await
promise_close_profile
(
)
;
await
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
CHIPS
.
enabled
"
true
)
;
await
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
CHIPS
.
migrateDatabaseTarget
"
1000
)
;
await
promise_load_profile
(
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
}
)
.
filter
(
cookie
=
>
cookie
.
name
=
=
"
test
"
)
.
length
1
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
}
)
.
length
1
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
partitionKey
:
"
(
https
example
.
com
)
"
}
)
.
length
2
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
partitionKey
:
"
(
https
example
.
com
)
"
}
)
.
filter
(
cookie
=
>
cookie
.
name
=
=
"
test
"
)
.
length
0
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
partitionKey
:
"
(
https
example
.
com
)
"
}
)
.
filter
(
cookie
=
>
cookie
.
name
=
=
"
test
partitioned
"
)
.
length
1
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
partitionKey
:
"
(
https
example
.
com
)
"
}
)
.
filter
(
cookie
=
>
cookie
.
name
=
=
"
test
overwrite
"
)
.
length
1
)
;
Assert
.
equal
(
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
{
partitionKey
:
"
(
https
example
.
com
)
"
}
)
.
filter
(
cookie
=
>
cookie
.
name
=
=
"
test
overwrite
"
)
[
0
]
.
value
"
Overwritten
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
"
network
.
cookie
.
CHIPS
.
lastMigrateDatabase
"
)
1000
)
;
Services
.
cookies
.
removeAll
(
)
;
do_close_profile
(
)
;
}
)
;
