"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
ObjectUtils
:
"
resource
:
/
/
gre
/
modules
/
ObjectUtils
.
sys
.
mjs
"
}
)
;
const
{
WebSocketConnection
NodeWebSocketHttp2Server
NodeWebSocketServer
NodeHTTPProxyServer
NodeHTTPSProxyServer
NodeHTTP2ProxyServer
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
NodeServer
.
sys
.
mjs
"
)
;
add_setup
(
async
function
(
)
{
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
foo
.
example
.
com
"
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
addCertFromFile
(
certdb
"
proxy
-
ca
.
pem
"
"
CTu
u
u
"
)
;
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
}
)
;
async
function
channelOpenPromise
(
url
msg
)
{
let
conn
=
new
WebSocketConnection
(
)
;
await
conn
.
open
(
url
)
;
conn
.
send
(
msg
)
;
let
res
=
await
conn
.
receiveMessages
(
)
;
conn
.
close
(
)
;
let
{
status
}
=
await
conn
.
finished
(
)
;
return
[
status
res
]
;
}
async
function
sendDataAndCheck
(
url
)
{
let
data
=
"
a
"
.
repeat
(
500000
)
;
let
[
status
res
]
=
await
channelOpenPromise
(
url
data
)
;
Assert
.
equal
(
status
Cr
.
NS_OK
)
;
Assert
.
ok
(
ObjectUtils
.
deepEqual
(
res
[
data
]
)
)
;
}
add_task
(
async
function
test_h2_websocket_500k
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http2
.
websockets
"
true
)
;
let
wss
=
new
NodeWebSocketHttp2Server
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
wss
.
stop
(
)
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
await
wss
.
registerMessageHandler
(
(
data
ws
)
=
>
{
ws
.
send
(
data
)
;
}
)
;
let
url
=
wss
:
/
/
foo
.
example
.
com
:
{
wss
.
port
(
)
}
;
await
sendDataAndCheck
(
url
)
;
}
)
;
add_task
(
async
function
test_h1_websocket_direct
(
)
{
let
wss
=
new
NodeWebSocketServer
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
wss
.
stop
(
)
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
await
wss
.
registerMessageHandler
(
(
data
ws
)
=
>
{
ws
.
send
(
data
)
;
}
)
;
let
url
=
wss
:
/
/
localhost
:
{
wss
.
port
(
)
}
;
await
sendDataAndCheck
(
url
)
;
}
)
;
add_task
(
async
function
test_h1_ws_with_h1_insecure_proxy
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http2
.
websockets
"
false
)
;
let
proxy
=
new
NodeHTTPProxyServer
(
)
;
await
proxy
.
start
(
)
;
let
wss
=
new
NodeWebSocketServer
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
wss
.
stop
(
)
;
await
proxy
.
stop
(
)
;
}
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
await
wss
.
registerMessageHandler
(
(
data
ws
)
=
>
{
ws
.
send
(
data
)
;
}
)
;
let
url
=
wss
:
/
/
localhost
:
{
wss
.
port
(
)
}
;
await
sendDataAndCheck
(
url
)
;
}
)
;
add_task
(
async
function
test_h1_ws_with_secure_h1_proxy
(
)
{
let
proxy
=
new
NodeHTTPSProxyServer
(
)
;
await
proxy
.
start
(
)
;
let
wss
=
new
NodeWebSocketServer
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
wss
.
stop
(
)
;
await
proxy
.
stop
(
)
;
}
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
await
wss
.
registerMessageHandler
(
(
data
ws
)
=
>
{
ws
.
send
(
data
)
;
}
)
;
let
url
=
wss
:
/
/
localhost
:
{
wss
.
port
(
)
}
;
await
sendDataAndCheck
(
url
)
;
await
proxy
.
stop
(
)
;
}
)
;
add_task
(
async
function
test_h1_ws_with_h2_proxy
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http2
.
websockets
"
false
)
;
let
proxy
=
new
NodeHTTP2ProxyServer
(
)
;
await
proxy
.
start
(
)
;
let
wss
=
new
NodeWebSocketServer
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
wss
.
stop
(
)
;
await
proxy
.
stop
(
)
;
}
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
await
wss
.
registerMessageHandler
(
(
data
ws
)
=
>
{
ws
.
send
(
data
)
;
}
)
;
let
url
=
wss
:
/
/
localhost
:
{
wss
.
port
(
)
}
;
await
sendDataAndCheck
(
url
)
;
await
proxy
.
stop
(
)
;
}
)
;
add_task
(
async
function
test_h2_ws_with_h1_insecure_proxy
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http2
.
websockets
"
true
)
;
let
proxy
=
new
NodeHTTPProxyServer
(
)
;
await
proxy
.
start
(
)
;
let
wss
=
new
NodeWebSocketHttp2Server
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
wss
.
stop
(
)
;
await
proxy
.
stop
(
)
;
}
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
await
wss
.
registerMessageHandler
(
(
data
ws
)
=
>
{
ws
.
send
(
data
)
;
}
)
;
let
url
=
wss
:
/
/
localhost
:
{
wss
.
port
(
)
}
;
await
sendDataAndCheck
(
url
)
;
await
proxy
.
stop
(
)
;
}
)
;
add_task
(
async
function
test_h2_ws_with_h1_secure_proxy
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http2
.
websockets
"
true
)
;
let
proxy
=
new
NodeHTTPSProxyServer
(
)
;
await
proxy
.
start
(
)
;
let
wss
=
new
NodeWebSocketHttp2Server
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
wss
.
stop
(
)
;
await
proxy
.
stop
(
)
;
}
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
await
wss
.
registerMessageHandler
(
(
data
ws
)
=
>
{
ws
.
send
(
data
)
;
}
)
;
let
url
=
wss
:
/
/
localhost
:
{
wss
.
port
(
)
}
;
await
sendDataAndCheck
(
url
)
;
await
proxy
.
stop
(
)
;
}
)
;
add_task
(
async
function
test_h2_ws_with_h2_proxy
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http2
.
websockets
"
true
)
;
let
proxy
=
new
NodeHTTP2ProxyServer
(
)
;
await
proxy
.
start
(
)
;
let
wss
=
new
NodeWebSocketHttp2Server
(
)
;
await
wss
.
start
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
wss
.
stop
(
)
;
await
proxy
.
stop
(
)
;
}
)
;
Assert
.
notEqual
(
wss
.
port
(
)
null
)
;
await
wss
.
registerMessageHandler
(
(
data
ws
)
=
>
{
ws
.
send
(
data
)
;
}
)
;
let
url
=
wss
:
/
/
localhost
:
{
wss
.
port
(
)
}
;
await
sendDataAndCheck
(
url
)
;
await
proxy
.
stop
(
)
;
}
)
;
