function
count_IsPartitioned
(
bool
)
{
var
cookieCountIsPartitioned
=
0
;
Services
.
cookies
.
cookies
.
forEach
(
cookie
=
>
{
if
(
cookie
.
isPartitioned
=
=
=
bool
)
{
cookieCountIsPartitioned
+
=
1
;
}
}
)
;
return
cookieCountIsPartitioned
;
}
add_task
(
async
function
test_IsPartitioned
(
)
{
let
profile
=
do_get_profile
(
)
;
let
dbFile
=
do_get_cookie_file
(
profile
)
;
Assert
.
ok
(
!
dbFile
.
exists
(
)
)
;
let
schema13db
=
new
CookieDatabaseConnection
(
dbFile
13
)
;
let
now
=
Date
.
now
(
)
*
1000
;
let
nUnpartitioned
=
5
;
let
hostNonPartitioned
=
"
cookie
-
host
-
non
-
partitioned
.
com
"
;
for
(
let
i
=
0
;
i
<
nUnpartitioned
;
i
+
+
)
{
let
cookie
=
new
Cookie
(
"
cookie
-
name
"
+
i
"
cookie
-
value
"
+
i
hostNonPartitioned
"
/
"
now
now
now
false
false
false
false
{
}
)
;
schema13db
.
insertCookie
(
cookie
)
;
}
let
nPartitioned
=
5
;
let
hostPartitioned
=
"
host
-
partitioned
.
com
"
;
for
(
let
i
=
0
;
i
<
nPartitioned
;
i
+
+
)
{
let
cookie
=
new
Cookie
(
"
cookie
-
name
"
+
i
"
cookie
-
value
"
+
i
hostPartitioned
"
/
"
now
now
now
false
false
false
false
{
partitionKey
:
"
(
https
example
.
com
)
"
}
)
;
schema13db
.
insertCookie
(
cookie
)
;
}
Assert
.
equal
(
do_count_cookies_in_db
(
schema13db
.
db
)
10
)
;
let
cookieCountNonPart
=
Services
.
cookies
.
countCookiesFromHost
(
hostNonPartitioned
)
;
Assert
.
equal
(
cookieCountNonPart
nUnpartitioned
)
;
let
cookieCountPart
=
Services
.
cookies
.
getCookiesFromHost
(
hostPartitioned
{
partitionKey
:
"
(
https
example
.
com
)
"
}
)
.
length
;
Assert
.
equal
(
cookieCountPart
nPartitioned
)
;
Assert
.
equal
(
count_IsPartitioned
(
false
)
nUnpartitioned
)
;
Assert
.
equal
(
count_IsPartitioned
(
true
)
nPartitioned
)
;
schema13db
.
close
(
)
;
}
)
;
