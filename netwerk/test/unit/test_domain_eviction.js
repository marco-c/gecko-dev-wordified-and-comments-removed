"
use
strict
"
;
var
test_generator
=
do_run_test
(
)
;
function
run_test
(
)
{
do_test_pending
(
)
;
do_run_generator
(
test_generator
)
;
}
function
continue_test
(
)
{
do_run_generator
(
test_generator
)
;
}
function
*
do_run_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
quotaPerHost
"
50
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
maxPerHost
"
50
)
;
let
futureExpiry
=
Date
.
now
(
)
+
1000
*
1000
;
setCookies
(
"
foo
.
bar
"
100
futureExpiry
)
;
Assert
.
equal
(
countCookies
(
"
foo
.
bar
"
"
foo
.
bar
"
)
50
)
;
setCookies
(
"
foo
.
baz
"
10
futureExpiry
)
;
setCookies
(
"
.
foo
.
baz
"
10
futureExpiry
)
;
setCookies
(
"
bar
.
foo
.
baz
"
10
futureExpiry
)
;
setCookies
(
"
baz
.
bar
.
foo
.
baz
"
10
futureExpiry
)
;
setCookies
(
"
unrelated
.
domain
"
50
futureExpiry
)
;
Assert
.
equal
(
countCookies
(
"
foo
.
baz
"
"
baz
.
bar
.
foo
.
baz
"
)
40
)
;
setCookies
(
"
foo
.
baz
"
20
futureExpiry
)
;
Assert
.
equal
(
countCookies
(
"
foo
.
baz
"
"
baz
.
bar
.
foo
.
baz
"
)
50
)
;
setCookies
(
"
horse
.
radish
"
10
futureExpiry
)
;
do_timeout
(
100
continue_test
)
;
yield
;
setCookies
(
"
tasty
.
horse
.
radish
"
50
futureExpiry
)
;
Assert
.
equal
(
countCookies
(
"
horse
.
radish
"
"
horse
.
radish
"
)
50
)
;
for
(
let
cookie
of
Services
.
cookies
.
cookies
)
{
if
(
cookie
.
host
=
=
"
horse
.
radish
"
)
{
do_throw
(
"
cookies
not
evicted
by
lastAccessed
order
"
)
;
}
}
let
shortExpiry
=
Date
.
now
(
)
+
1000
*
2
;
setCookies
(
"
captchart
.
com
"
49
futureExpiry
)
;
let
cv
=
Services
.
cookies
.
add
(
"
captchart
.
com
"
"
"
"
test100
"
"
eviction
"
false
false
false
shortExpiry
{
}
Ci
.
nsICookie
.
SAMESITE_UNSET
Ci
.
nsICookie
.
SCHEME_HTTPS
)
;
Assert
.
equal
(
cv
.
result
Ci
.
nsICookieValidation
.
eOK
"
Valid
cookie
"
)
;
do_timeout
(
2100
continue_test
)
;
yield
;
Assert
.
equal
(
countCookies
(
"
captchart
.
com
"
"
captchart
.
com
"
)
50
)
;
cv
=
Services
.
cookies
.
add
(
"
captchart
.
com
"
"
"
"
test200
"
"
eviction
"
false
false
false
futureExpiry
{
}
Ci
.
nsICookie
.
SAMESITE_UNSET
Ci
.
nsICookie
.
SCHEME_HTTPS
)
;
Assert
.
equal
(
cv
.
result
Ci
.
nsICookieValidation
.
eOK
"
Valid
cookie
"
)
;
Assert
.
equal
(
countCookies
(
"
captchart
.
com
"
"
captchart
.
com
"
)
50
)
;
for
(
let
cookie
of
Services
.
cookies
.
getCookiesFromHost
(
"
captchart
.
com
"
{
}
)
)
{
Assert
.
equal
(
cookie
.
expiry
futureExpiry
)
;
}
do_finish_generator_test
(
test_generator
)
;
}
function
setCookies
(
aHost
aNumber
aExpiry
)
{
for
(
let
i
=
0
;
i
<
aNumber
;
+
+
i
)
{
const
cv
=
Services
.
cookies
.
add
(
aHost
"
"
"
test
"
+
i
"
eviction
"
false
false
false
aExpiry
{
}
Ci
.
nsICookie
.
SAMESITE_UNSET
Ci
.
nsICookie
.
SCHEME_HTTPS
)
;
Assert
.
equal
(
cv
.
result
Ci
.
nsICookieValidation
.
eOK
"
Valid
cookie
"
)
;
}
}
function
countCookies
(
aBaseDomain
aHost
)
{
let
cookies
=
[
]
;
for
(
let
cookie
of
Services
.
cookies
.
cookies
)
{
if
(
cookie
.
host
.
length
>
=
aBaseDomain
.
length
&
&
cookie
.
host
.
slice
(
cookie
.
host
.
length
-
aBaseDomain
.
length
)
=
=
aBaseDomain
)
{
cookies
.
push
(
cookie
)
;
}
}
let
result
=
cookies
.
length
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
aBaseDomain
)
cookies
.
length
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
aHost
)
cookies
.
length
)
;
for
(
let
cookie
of
Services
.
cookies
.
getCookiesFromHost
(
aHost
{
}
)
)
{
if
(
cookie
.
host
.
length
>
=
aBaseDomain
.
length
&
&
cookie
.
host
.
slice
(
cookie
.
host
.
length
-
aBaseDomain
.
length
)
=
=
aBaseDomain
)
{
let
found
=
false
;
for
(
let
i
=
0
;
i
<
cookies
.
length
;
+
+
i
)
{
if
(
cookies
[
i
]
.
host
=
=
cookie
.
host
&
&
cookies
[
i
]
.
name
=
=
cookie
.
name
)
{
found
=
true
;
cookies
.
splice
(
i
1
)
;
break
;
}
}
if
(
!
found
)
{
do_throw
(
"
cookie
"
+
cookie
.
name
+
"
not
found
in
master
cookies
"
)
;
}
}
else
{
do_throw
(
"
cookie
host
"
+
cookie
.
host
+
"
not
within
domain
"
+
aBaseDomain
)
;
}
}
Assert
.
equal
(
cookies
.
length
0
)
;
return
result
;
}
