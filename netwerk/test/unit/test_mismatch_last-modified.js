"
use
strict
"
;
const
BinaryInputStream
=
Components
.
Constructor
(
"
mozilla
.
org
/
binaryinputstream
;
1
"
"
nsIBinaryInputStream
"
"
setInputStream
"
)
;
const
{
HttpServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
var
httpserver
=
new
HttpServer
(
)
;
var
listener_3
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIStreamListener
"
"
nsIRequestObserver
"
]
)
onStartRequest
:
function
test_onStartR
(
request
)
{
}
onDataAvailable
:
function
test_ODA
(
request
inputStream
offset
count
)
{
var
data
=
new
BinaryInputStream
(
inputStream
)
.
readByteArray
(
count
)
;
Assert
.
equal
(
data
[
0
]
"
B
"
.
charCodeAt
(
0
)
)
;
}
onStopRequest
:
function
test_onStopR
(
request
status
)
{
httpserver
.
stop
(
do_test_finished
)
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
this
"
listener_2
"
function
(
)
{
return
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIStreamListener
"
"
nsIRequestObserver
"
]
)
onStartRequest
:
function
test_onStartR
(
request
)
{
}
onDataAvailable
:
function
test_ODA
(
request
inputStream
offset
count
)
{
var
data
=
new
BinaryInputStream
(
inputStream
)
.
readByteArray
(
count
)
;
Assert
.
equal
(
data
[
0
]
"
A
"
.
charCodeAt
(
0
)
)
;
}
onStopRequest
:
function
test_onStopR
(
request
status
)
{
request
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
var
chan
=
NetUtil
.
newChannel
(
{
uri
:
"
http
:
/
/
localhost
:
"
+
httpserver
.
identity
.
primaryPort
+
"
/
test1
"
loadUsingSystemPrincipal
:
true
}
)
;
chan
.
asyncOpen
(
listener_3
)
;
}
}
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
listener_1
"
function
(
)
{
return
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIStreamListener
"
"
nsIRequestObserver
"
]
)
onStartRequest
:
function
test_onStartR
(
request
)
{
}
onDataAvailable
:
function
test_ODA
(
request
inputStream
offset
count
)
{
var
data
=
new
BinaryInputStream
(
inputStream
)
.
readByteArray
(
count
)
;
Assert
.
equal
(
data
[
0
]
"
A
"
.
charCodeAt
(
0
)
)
;
}
onStopRequest
:
function
test_onStopR
(
request
status
)
{
request
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
var
chan
=
NetUtil
.
newChannel
(
{
uri
:
"
http
:
/
/
localhost
:
"
+
httpserver
.
identity
.
primaryPort
+
"
/
test1
"
loadUsingSystemPrincipal
:
true
}
)
;
chan
.
asyncOpen
(
listener_2
)
;
}
}
;
}
)
;
function
run_test
(
)
{
do_get_profile
(
)
;
evict_cache_entries
(
)
;
httpserver
.
registerPathHandler
(
"
/
test1
"
handler
)
;
httpserver
.
start
(
-
1
)
;
var
port
=
httpserver
.
identity
.
primaryPort
;
var
chan
=
NetUtil
.
newChannel
(
{
uri
:
"
http
:
/
/
localhost
:
"
+
port
+
"
/
test1
"
loadUsingSystemPrincipal
:
true
}
)
;
chan
.
asyncOpen
(
listener_1
)
;
do_test_pending
(
)
;
}
var
iter
=
0
;
function
handler
(
metadata
response
)
{
iter
+
+
;
if
(
metadata
.
hasHeader
(
"
If
-
Modified
-
Since
"
)
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
304
"
Not
Modified
"
)
;
response
.
setHeader
(
"
Last
-
Modified
"
"
Tue
15
Nov
1994
12
:
45
:
26
GMT
"
false
)
;
}
else
{
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Cache
-
Control
"
"
max
-
age
=
0
"
false
)
;
if
(
iter
=
=
1
)
{
response
.
setHeader
(
"
Last
-
Modified
"
"
Wed
16
Nov
1994
00
:
00
:
00
GMT
"
false
)
;
response
.
bodyOutputStream
.
write
(
"
A
"
1
)
;
}
if
(
iter
=
=
3
)
{
response
.
setHeader
(
"
Last
-
Modified
"
"
Tue
15
Nov
1994
12
:
45
:
26
GMT
"
false
)
;
response
.
bodyOutputStream
.
write
(
"
B
"
1
)
;
}
}
}
