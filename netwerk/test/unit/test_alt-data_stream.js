"
use
strict
"
;
const
{
HttpServer
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
httpd
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
URL
"
function
(
)
{
return
"
http
:
/
/
localhost
:
"
+
httpServer
.
identity
.
primaryPort
+
"
/
content
"
;
}
)
;
var
httpServer
=
null
;
function
make_channel
(
url
)
{
return
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
;
}
const
responseContent
=
"
response
body
"
;
const
altContent
=
"
a
"
.
repeat
(
128
*
1024
)
+
"
b
"
.
repeat
(
128
*
1024
)
+
"
c
"
.
repeat
(
128
*
1024
)
+
"
d
"
.
repeat
(
128
*
1024
)
+
"
e
"
.
repeat
(
128
*
1024
)
+
"
f
"
.
repeat
(
128
*
1024
)
+
"
g
"
.
repeat
(
128
*
1024
)
+
"
h
"
.
repeat
(
128
*
1024
)
+
"
i
"
.
repeat
(
13
)
;
const
firstChunkSize
=
Math
.
floor
(
altContent
.
length
/
4
)
;
const
altContentType
=
"
text
/
binary
"
;
function
contentHandler
(
metadata
response
)
{
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
response
.
setHeader
(
"
Cache
-
Control
"
"
max
-
age
=
86400
"
)
;
response
.
bodyOutputStream
.
write
(
responseContent
responseContent
.
length
)
;
}
function
run_test
(
)
{
do_get_profile
(
)
;
httpServer
=
new
HttpServer
(
)
;
httpServer
.
registerPathHandler
(
"
/
content
"
contentHandler
)
;
httpServer
.
start
(
-
1
)
;
var
chan
=
make_channel
(
URL
)
;
var
cc
=
chan
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
;
cc
.
preferAlternativeDataType
(
altContentType
"
"
Ci
.
nsICacheInfoChannel
.
ASYNC
)
;
chan
.
asyncOpen
(
new
ChannelListener
(
readServerContent
null
)
)
;
do_test_pending
(
)
;
}
var
os
;
function
readServerContent
(
request
buffer
)
{
var
cc
=
request
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
;
Assert
.
equal
(
buffer
responseContent
)
;
Assert
.
equal
(
cc
.
alternativeDataType
"
"
)
;
executeSoon
(
(
)
=
>
{
os
=
cc
.
openAlternativeOutputStream
(
altContentType
altContent
.
length
)
;
os
.
write
(
altContent
firstChunkSize
)
;
executeSoon
(
openAltChannel
)
;
}
)
;
}
function
openAltChannel
(
)
{
var
chan
=
make_channel
(
URL
)
;
var
cc
=
chan
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
;
cc
.
preferAlternativeDataType
(
altContentType
"
"
Ci
.
nsICacheInfoChannel
.
ASYNC
)
;
chan
.
asyncOpen
(
altDataListener
)
;
}
var
altDataListener
=
{
buffer
:
"
"
onStartRequest
(
request
)
{
}
onDataAvailable
(
request
stream
offset
count
)
{
let
string
=
NetUtil
.
readInputStreamToString
(
stream
count
)
;
this
.
buffer
+
=
string
;
if
(
this
.
buffer
.
length
=
=
firstChunkSize
)
{
os
.
write
(
altContent
.
substring
(
firstChunkSize
altContent
.
length
)
altContent
.
length
-
firstChunkSize
)
;
os
.
close
(
)
;
}
}
onStopRequest
(
request
status
)
{
var
cc
=
request
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
;
Assert
.
equal
(
cc
.
alternativeDataType
altContentType
)
;
Assert
.
equal
(
this
.
buffer
.
length
altContent
.
length
)
;
Assert
.
equal
(
this
.
buffer
altContent
)
;
openAltChannelWithOriginalContent
(
)
;
}
}
;
function
openAltChannelWithOriginalContent
(
)
{
var
chan
=
make_channel
(
URL
)
;
var
cc
=
chan
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
;
cc
.
preferAlternativeDataType
(
altContentType
"
"
Ci
.
nsICacheInfoChannel
.
SERIALIZE
)
;
chan
.
asyncOpen
(
originalListener
)
;
}
var
originalListener
=
{
buffer
:
"
"
onStartRequest
(
request
)
{
}
onDataAvailable
(
request
stream
offset
count
)
{
let
string
=
NetUtil
.
readInputStreamToString
(
stream
count
)
;
this
.
buffer
+
=
string
;
}
onStopRequest
(
request
status
)
{
var
cc
=
request
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
;
Assert
.
equal
(
cc
.
alternativeDataType
altContentType
)
;
Assert
.
equal
(
this
.
buffer
.
length
responseContent
.
length
)
;
Assert
.
equal
(
this
.
buffer
responseContent
)
;
testAltDataStream
(
cc
)
;
}
}
;
function
testAltDataStream
(
cc
)
{
Assert
.
ok
(
!
!
cc
.
alternativeDataInputStream
)
;
httpServer
.
stop
(
do_test_finished
)
;
}
