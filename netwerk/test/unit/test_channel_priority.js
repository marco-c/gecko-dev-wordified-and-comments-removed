'
use
strict
'
;
Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
'
)
;
Cu
.
import
(
'
resource
:
/
/
testing
-
common
/
httpd
.
js
'
)
;
let
httpserver
;
let
port
;
function
startHttpServer
(
)
{
httpserver
=
new
HttpServer
(
)
;
httpserver
.
registerPathHandler
(
'
/
resource
'
(
metadata
response
)
=
>
{
response
.
setStatusLine
(
metadata
.
httpVersion
200
'
OK
'
)
;
response
.
setHeader
(
'
Content
-
Type
'
'
text
/
plain
'
false
)
;
response
.
setHeader
(
'
Cache
-
Control
'
'
no
-
cache
'
false
)
;
response
.
bodyOutputStream
.
write
(
"
data
"
4
)
;
}
)
;
httpserver
.
registerPathHandler
(
'
/
redirect
'
(
metadata
response
)
=
>
{
response
.
setStatusLine
(
metadata
.
httpVersion
302
'
Redirect
'
)
;
response
.
setHeader
(
'
Location
'
'
/
resource
'
false
)
;
response
.
setHeader
(
'
Cache
-
Control
'
'
no
-
cache
'
false
)
;
}
)
;
httpserver
.
start
(
-
1
)
;
port
=
httpserver
.
identity
.
primaryPort
;
}
function
stopHttpServer
(
)
{
httpserver
.
stop
(
(
)
=
>
{
}
)
;
}
function
makeRequest
(
uri
)
{
let
requestChannel
=
NetUtil
.
newChannel
(
{
uri
loadUsingSystemPrincipal
:
true
}
)
;
requestChannel
.
QueryInterface
(
Ci
.
nsISupportsPriority
)
;
requestChannel
.
priority
=
Ci
.
nsISupportsPriority
.
PRIORITY_HIGHEST
;
requestChannel
.
asyncOpen2
(
new
ChannelListener
(
checkResponse
requestChannel
)
)
;
}
function
checkResponse
(
request
buffer
requestChannel
)
{
requestChannel
.
QueryInterface
(
Ci
.
nsISupportsPriority
)
;
Assert
.
equal
(
requestChannel
.
priority
Ci
.
nsISupportsPriority
.
PRIORITY_HIGHEST
)
;
let
responseChannel
=
request
.
QueryInterface
(
Ci
.
nsISupportsPriority
)
;
Assert
.
equal
(
responseChannel
.
priority
Ci
.
nsISupportsPriority
.
PRIORITY_HIGHEST
)
;
run_next_test
(
)
;
}
add_test
(
function
test_regular_request
(
)
{
makeRequest
(
http
:
/
/
localhost
:
{
port
}
/
resource
)
;
}
)
;
add_test
(
function
test_redirect
(
)
{
makeRequest
(
http
:
/
/
localhost
:
{
port
}
/
redirect
)
;
}
)
;
function
run_test
(
)
{
if
(
!
runningInParent
)
{
add_test
(
function
(
)
{
do_send_remote_message
(
'
finished
'
)
;
run_next_test
(
)
;
}
)
;
return
;
}
startHttpServer
(
)
;
do_register_cleanup
(
stopHttpServer
)
;
run_next_test
(
)
;
}
function
configPort
(
serverPort
)
{
port
=
serverPort
;
run_next_test
(
)
;
}
