const
{
HttpServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
function
make_channel
(
url
callback
ctx
)
{
return
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
;
}
const
REMAPPED_PORT
=
8765
;
add_task
(
async
function
check_protocols
(
)
{
function
contentHandler
(
metadata
response
)
{
let
responseBody
=
"
The
server
should
never
return
this
!
"
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
response
.
bodyOutputStream
.
write
(
responseBody
responseBody
.
length
)
;
}
const
httpserv
=
new
HttpServer
(
)
;
httpserv
.
registerPathHandler
(
"
/
content
"
contentHandler
)
;
httpserv
.
start
(
-
1
)
;
do_get_profile
(
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
socket
.
forcePort
"
{
REMAPPED_PORT
}
=
{
httpserv
.
identity
.
primaryPort
}
)
;
function
get_response
(
)
{
return
new
Promise
(
resolve
=
>
{
const
URL
=
http
:
/
/
localhost
:
{
REMAPPED_PORT
}
/
content
;
const
channel
=
make_channel
(
URL
)
;
channel
.
asyncOpen
(
new
ChannelListener
(
(
request
data
)
=
>
{
resolve
(
data
)
;
}
)
)
;
}
)
;
}
Assert
.
equal
(
await
get_response
(
)
"
Bad
request
\
n
"
)
;
await
new
Promise
(
resolve
=
>
httpserv
.
stop
(
resolve
)
)
;
}
)
;
