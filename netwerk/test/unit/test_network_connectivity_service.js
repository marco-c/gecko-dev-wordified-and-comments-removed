"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
connectivity
-
service
.
DNSv4
.
domain
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
connectivity
-
service
.
DNSv6
.
domain
"
)
;
}
)
;
const
DEFAULT_WAIT_TIME
=
200
;
add_task
(
async
function
testDNS
(
)
{
let
ncs
=
Cc
[
"
mozilla
.
org
/
network
/
network
-
connectivity
-
service
;
1
"
]
.
getService
(
Ci
.
nsINetworkConnectivityService
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
connectivity
-
service
.
DNSv4
.
domain
"
"
example
.
org
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
connectivity
-
service
.
DNSv6
.
domain
"
"
example
.
org
"
)
;
ncs
.
recheckDNS
(
)
;
await
new
Promise
(
resolve
=
>
do_timeout
(
DEFAULT_WAIT_TIME
resolve
)
)
;
equal
(
ncs
.
DNSv4
Ci
.
nsINetworkConnectivityService
.
OK
"
Check
DNSv4
support
(
expect
OK
)
"
)
;
equal
(
ncs
.
DNSv6
Ci
.
nsINetworkConnectivityService
.
OK
"
Check
DNSv6
support
(
expect
OK
)
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
connectivity
-
service
.
DNSv4
.
domain
"
"
does
-
not
-
exist
.
example
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
connectivity
-
service
.
DNSv6
.
domain
"
"
does
-
not
-
exist
.
example
"
)
;
ncs
.
recheckDNS
(
)
;
await
new
Promise
(
resolve
=
>
do_timeout
(
DEFAULT_WAIT_TIME
resolve
)
)
;
equal
(
ncs
.
DNSv4
Ci
.
nsINetworkConnectivityService
.
NOT_AVAILABLE
"
Check
DNSv4
support
(
expect
N
/
A
)
"
)
;
equal
(
ncs
.
DNSv6
Ci
.
nsINetworkConnectivityService
.
NOT_AVAILABLE
"
Check
DNSv6
support
(
expect
N
/
A
)
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
connectivity
-
service
.
DNSv4
.
domain
"
"
example
.
org
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
connectivity
-
service
.
DNSv6
.
domain
"
"
example
.
org
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
network
:
captive
-
portal
-
connectivity
"
null
)
;
equal
(
ncs
.
DNSv4
Ci
.
nsINetworkConnectivityService
.
UNKNOWN
"
Check
DNSv4
support
(
expect
UNKNOWN
)
"
)
;
equal
(
ncs
.
DNSv6
Ci
.
nsINetworkConnectivityService
.
UNKNOWN
"
Check
DNSv6
support
(
expect
UNKNOWN
)
"
)
;
await
new
Promise
(
resolve
=
>
do_timeout
(
DEFAULT_WAIT_TIME
resolve
)
)
;
equal
(
ncs
.
DNSv4
Ci
.
nsINetworkConnectivityService
.
OK
"
Check
DNSv4
support
(
expect
OK
)
"
)
;
equal
(
ncs
.
DNSv6
Ci
.
nsINetworkConnectivityService
.
OK
"
Check
DNSv6
support
(
expect
OK
)
"
)
;
}
)
;
