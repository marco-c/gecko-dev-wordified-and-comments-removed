"
use
strict
"
;
function
run_test
(
)
{
function
stringToURL
(
str
)
{
return
Cc
[
"
mozilla
.
org
/
network
/
standard
-
url
-
mutator
;
1
"
]
.
createInstance
(
Ci
.
nsIStandardURLMutator
)
.
init
(
Ci
.
nsIStandardURL
.
URLTYPE_AUTHORITY
80
str
"
UTF
-
8
"
null
)
.
finalize
(
)
.
QueryInterface
(
Ci
.
nsIStandardURL
)
;
}
var
origUrlStr
=
"
http
:
/
/
foo
.
com
/
"
;
var
stdUrl
=
stringToURL
(
origUrlStr
)
;
Assert
.
equal
(
-
1
stdUrl
.
port
)
;
let
def100Url
=
stdUrl
.
mutate
(
)
.
QueryInterface
(
Ci
.
nsIStandardURLMutator
)
.
setDefaultPort
(
100
)
.
finalize
(
)
;
Assert
.
equal
(
-
1
def100Url
.
port
)
;
Assert
.
equal
(
def100Url
.
spec
origUrlStr
)
;
let
port200Url
=
stdUrl
.
mutate
(
)
.
setPort
(
"
200
"
)
.
finalize
(
)
;
Assert
.
equal
(
200
port200Url
.
port
)
;
Assert
.
equal
(
port200Url
.
spec
"
http
:
/
/
foo
.
com
:
200
/
"
)
;
let
def200Url
=
port200Url
.
mutate
(
)
.
QueryInterface
(
Ci
.
nsIStandardURLMutator
)
.
setDefaultPort
(
200
)
.
finalize
(
)
;
Assert
.
equal
(
-
1
def200Url
.
port
)
;
Assert
.
equal
(
def200Url
.
spec
origUrlStr
)
;
let
def300Url
=
def200Url
.
mutate
(
)
.
QueryInterface
(
Ci
.
nsIStandardURLMutator
)
.
setDefaultPort
(
300
)
.
finalize
(
)
;
Assert
.
equal
(
-
1
def300Url
.
port
)
;
Assert
.
equal
(
def300Url
.
spec
origUrlStr
)
;
}
