"
use
strict
"
;
var
testpath
=
"
/
bug672448
"
;
function
run_test
(
)
{
let
intlPrefs
=
Services
.
prefs
.
getBranch
(
"
intl
.
"
)
;
let
oldPref
=
intlPrefs
.
getCharPref
(
"
accept_languages
"
)
;
let
acceptLangTests
=
[
"
qaa
"
"
qaa
qab
"
"
qaa
qab
qac
qad
"
"
qaa
qab
qac
qad
qae
qaf
qag
qah
"
"
qaa
qab
qac
qad
qae
qaf
qag
qah
qai
qaj
"
"
qaa
qab
qac
qad
qae
qaf
qag
qah
qai
qaj
qak
"
"
qaa
qab
qac
qad
qae
qaf
qag
qah
qai
qaj
qak
qal
qam
qan
qao
qap
qaq
qar
qas
qat
qau
"
oldPref
]
;
let
acceptLangTestsNum
=
acceptLangTests
.
length
;
for
(
let
i
=
0
;
i
<
acceptLangTestsNum
;
i
+
+
)
{
intlPrefs
.
setCharPref
(
"
accept_languages
"
acceptLangTests
[
i
]
)
;
test_accepted_languages
(
)
;
}
}
function
test_accepted_languages
(
)
{
let
channel
=
setupChannel
(
testpath
)
;
let
AcceptLanguage
=
channel
.
getRequestHeader
(
"
Accept
-
Language
"
)
;
let
acceptedLanguages
=
AcceptLanguage
.
split
(
"
"
)
;
let
acceptedLanguagesLength
=
acceptedLanguages
.
length
;
for
(
let
i
=
0
;
i
<
acceptedLanguagesLength
;
i
+
+
)
{
let
qualityValue
;
try
{
[
qualityValue
]
=
acceptedLanguages
[
i
]
.
trim
(
)
.
match
(
/
^
(
[
a
-
z0
-
9_
-
]
*
?
)
(
?
:
;
q
=
(
1
(
?
:
\
.
0
{
0
3
}
)
?
|
0
(
?
:
\
.
[
0
-
9
]
{
0
3
}
)
)
)
?
/
i
)
;
}
catch
(
e
)
{
do_throw
(
"
Invalid
language
tag
or
quality
value
:
"
+
e
)
;
}
if
(
i
=
=
0
)
{
Assert
.
equal
(
qualityValue
undefined
)
;
}
else
{
let
decimalPlaces
;
if
(
acceptedLanguagesLength
<
10
)
{
Assert
.
equal
(
qualityValue
.
length
3
)
;
decimalPlaces
=
1
;
}
else
{
Assert
.
greaterOrEqual
(
qualityValue
.
length
3
)
;
Assert
.
lessOrEqual
(
qualityValue
.
length
4
)
;
decimalPlaces
=
2
;
}
Assert
.
equal
(
parseFloat
(
qualityValue
)
.
toFixed
(
decimalPlaces
)
(
1
.
0
-
(
1
/
acceptedLanguagesLength
)
*
i
)
.
toFixed
(
decimalPlaces
)
)
;
}
}
}
function
setupChannel
(
path
)
{
let
chan
=
NetUtil
.
newChannel
(
{
uri
:
"
http
:
/
/
localhost
:
4444
"
+
path
loadUsingSystemPrincipal
:
true
}
)
;
chan
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
return
chan
;
}
