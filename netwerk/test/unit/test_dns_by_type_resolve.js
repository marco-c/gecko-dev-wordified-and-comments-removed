"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
let
h2Port
;
const
dns
=
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
;
const
{
TestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
add_setup
(
async
function
setup
(
)
{
h2Port
=
Services
.
env
.
get
(
"
MOZHTTP2_PORT
"
)
;
Assert
.
notEqual
(
h2Port
null
)
;
Assert
.
notEqual
(
h2Port
"
"
)
;
trr_test_setup
(
)
;
registerCleanupFunction
(
(
)
=
>
{
trr_clear_prefs
(
)
;
}
)
;
if
(
mozinfo
.
socketprocess_networking
)
{
await
TestUtils
.
waitForCondition
(
(
)
=
>
Services
.
io
.
socketProcessLaunched
)
;
}
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
Ci
.
nsIDNSService
.
MODE_TRRFIRST
)
;
}
)
;
let
test_answer
=
"
bXkgdm9pY2UgaXMgbXkgcGFzc3dvcmQ
=
"
;
let
test_answer_addr
=
"
127
.
0
.
0
.
1
"
;
add_task
(
async
function
testTXTResolve
(
)
{
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
doh
"
)
;
let
{
inRecord
}
=
await
new
TRRDNSListener
(
"
_esni
.
example
.
com
"
{
type
:
dns
.
RESOLVE_TYPE_TXT
}
)
;
let
answer
=
inRecord
.
QueryInterface
(
Ci
.
nsIDNSTXTRecord
)
.
getRecordsAsOneString
(
)
;
Assert
.
equal
(
answer
test_answer
"
got
correct
answer
"
)
;
}
)
;
add_task
(
async
function
testTXTRecordPushPart1
(
)
{
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
txt
-
dns
-
push
"
)
;
let
{
inRecord
}
=
await
new
TRRDNSListener
(
"
_esni_push
.
example
.
com
"
{
type
:
dns
.
RESOLVE_TYPE_DEFAULT
expectedAnswer
:
"
127
.
0
.
0
.
1
"
}
)
;
inRecord
.
QueryInterface
(
Ci
.
nsIDNSAddrRecord
)
;
let
answer
=
inRecord
.
getNextAddrAsString
(
)
;
Assert
.
equal
(
answer
test_answer_addr
"
got
correct
answer
"
)
;
}
)
;
add_task
(
async
function
testTXTRecordPushPart2
(
)
{
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
404
"
)
;
let
{
inRecord
}
=
await
new
TRRDNSListener
(
"
_esni_push
.
example
.
com
"
{
type
:
dns
.
RESOLVE_TYPE_TXT
}
)
;
let
answer
=
inRecord
.
QueryInterface
(
Ci
.
nsIDNSTXTRecord
)
.
getRecordsAsOneString
(
)
;
Assert
.
equal
(
answer
test_answer
"
got
correct
answer
"
)
;
}
)
;
