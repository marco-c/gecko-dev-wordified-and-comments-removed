"
use
strict
"
;
const
{
HttpServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
var
httpServer
=
new
HttpServer
(
)
;
httpServer
.
start
(
-
1
)
;
const
PORT
=
httpServer
.
identity
.
primaryPort
;
var
fullLoopPath
=
"
/
fullLoop
"
;
var
fullLoopURI
=
"
http
:
/
/
localhost
:
"
+
PORT
+
fullLoopPath
;
var
relativeLoopPath
=
"
/
relativeLoop
"
;
var
relativeLoopURI
=
"
http
:
/
/
localhost
:
"
+
PORT
+
relativeLoopPath
;
var
emptyLoopPath
=
"
/
empty
/
"
;
var
emptyLoopURI
=
"
http
:
/
/
localhost
:
"
+
PORT
+
emptyLoopPath
;
function
make_channel
(
url
callback
ctx
)
{
return
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
;
}
function
fullLoopHandler
(
metadata
response
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
301
"
Moved
"
)
;
response
.
setHeader
(
"
Location
"
"
http
:
/
/
localhost
:
"
+
PORT
+
"
/
fullLoop
"
false
)
;
}
function
relativeLoopHandler
(
metadata
response
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
301
"
Moved
"
)
;
response
.
setHeader
(
"
Location
"
"
relativeLoop
"
false
)
;
}
function
emptyLoopHandler
(
metadata
response
)
{
response
.
seizePower
(
)
;
response
.
write
(
"
HTTP
/
1
.
0
301
Moved
\
r
\
n
"
)
;
response
.
write
(
"
Location
:
\
r
\
n
"
)
;
response
.
write
(
"
Content
-
Length
:
4
\
r
\
n
"
)
;
response
.
write
(
"
\
r
\
n
"
)
;
response
.
write
(
"
oops
"
)
;
response
.
finish
(
)
;
}
function
testFullLoop
(
request
buffer
)
{
Assert
.
equal
(
request
.
status
Cr
.
NS_ERROR_REDIRECT_LOOP
)
;
var
chan
=
make_channel
(
relativeLoopURI
)
;
chan
.
asyncOpen
(
new
ChannelListener
(
testRelativeLoop
null
CL_EXPECT_FAILURE
)
)
;
}
function
testRelativeLoop
(
request
buffer
)
{
Assert
.
equal
(
request
.
status
Cr
.
NS_ERROR_REDIRECT_LOOP
)
;
var
chan
=
make_channel
(
emptyLoopURI
)
;
chan
.
asyncOpen
(
new
ChannelListener
(
testEmptyLoop
null
CL_EXPECT_FAILURE
)
)
;
}
function
testEmptyLoop
(
request
buffer
)
{
Assert
.
equal
(
request
.
status
Cr
.
NS_ERROR_REDIRECT_LOOP
)
;
httpServer
.
stop
(
do_test_finished
)
;
}
function
run_test
(
)
{
httpServer
.
registerPathHandler
(
fullLoopPath
fullLoopHandler
)
;
httpServer
.
registerPathHandler
(
relativeLoopPath
relativeLoopHandler
)
;
httpServer
.
registerPathHandler
(
emptyLoopPath
emptyLoopHandler
)
;
var
chan
=
make_channel
(
fullLoopURI
)
;
chan
.
asyncOpen
(
new
ChannelListener
(
testFullLoop
null
CL_EXPECT_FAILURE
)
)
;
do_test_pending
(
)
;
}
