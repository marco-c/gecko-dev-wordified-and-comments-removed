"
use
strict
"
;
const
{
HttpServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
URL
"
function
(
)
{
return
"
http
:
/
/
localhost
:
"
+
httpserver
.
identity
.
primaryPort
;
}
)
;
var
setCookiePath
=
"
/
setcookie
"
;
var
checkCookiePath
=
"
/
checkcookie
"
;
var
safebrowsingUpdatePath
=
"
/
safebrowsingUpdate
"
;
var
safebrowsingGethashPath
=
"
/
safebrowsingGethash
"
;
var
httpserver
;
function
inChildProcess
(
)
{
return
Services
.
appinfo
.
processType
!
=
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
;
}
function
cookieSetHandler
(
metadata
response
)
{
var
cookieName
=
metadata
.
getHeader
(
"
set
-
cookie
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
Ok
"
)
;
response
.
setHeader
(
"
set
-
Cookie
"
cookieName
+
"
=
1
;
Path
=
/
"
false
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
response
.
bodyOutputStream
.
write
(
"
Ok
"
"
Ok
"
.
length
)
;
}
function
cookieCheckHandler
(
metadata
response
)
{
var
cookies
=
metadata
.
getHeader
(
"
Cookie
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
Ok
"
)
;
response
.
setHeader
(
"
saw
-
cookies
"
cookies
false
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
response
.
bodyOutputStream
.
write
(
"
Ok
"
"
Ok
"
.
length
)
;
}
function
safebrowsingUpdateHandler
(
metadata
response
)
{
var
cookieName
=
"
sb
-
update
-
cookie
"
;
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
Ok
"
)
;
response
.
setHeader
(
"
set
-
Cookie
"
cookieName
+
"
=
1
;
Path
=
/
"
false
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
response
.
bodyOutputStream
.
write
(
"
Ok
"
"
Ok
"
.
length
)
;
}
function
safebrowsingGethashHandler
(
metadata
response
)
{
var
cookieName
=
"
sb
-
gethash
-
cookie
"
;
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
Ok
"
)
;
response
.
setHeader
(
"
set
-
Cookie
"
cookieName
+
"
=
1
;
Path
=
/
"
false
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
let
msg
=
"
test
-
phish
-
simplea
:
1
:
32
\
n
"
+
"
a
"
.
repeat
(
32
)
;
response
.
bodyOutputStream
.
write
(
msg
msg
.
length
)
;
}
function
setupChannel
(
path
originAttributes
)
{
var
channel
=
NetUtil
.
newChannel
(
{
uri
:
URL
+
path
loadUsingSystemPrincipal
:
true
}
)
;
channel
.
loadInfo
.
originAttributes
=
originAttributes
;
channel
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
return
channel
;
}
function
run_test
(
)
{
do_get_profile
(
)
;
if
(
!
inChildProcess
(
)
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
0
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookieJarSettings
.
unblocked_for_testing
"
true
)
;
}
httpserver
=
new
HttpServer
(
)
;
httpserver
.
registerPathHandler
(
setCookiePath
cookieSetHandler
)
;
httpserver
.
registerPathHandler
(
checkCookiePath
cookieCheckHandler
)
;
httpserver
.
registerPathHandler
(
safebrowsingUpdatePath
safebrowsingUpdateHandler
)
;
httpserver
.
registerPathHandler
(
safebrowsingGethashPath
safebrowsingGethashHandler
)
;
httpserver
.
start
(
-
1
)
;
run_next_test
(
)
;
}
add_test
(
function
test_safebrowsing_update
(
)
{
var
streamUpdater
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
streamupdater
;
1
"
]
.
getService
(
Ci
.
nsIUrlClassifierStreamUpdater
)
;
function
onSuccess
(
)
{
run_next_test
(
)
;
}
function
onUpdateError
(
)
{
do_throw
(
"
ERROR
:
received
onUpdateError
!
"
)
;
}
function
onDownloadError
(
)
{
do_throw
(
"
ERROR
:
received
onDownloadError
!
"
)
;
}
streamUpdater
.
downloadUpdates
(
"
test
-
phish
-
simple
test
-
malware
-
simple
"
"
"
true
URL
+
safebrowsingUpdatePath
onSuccess
onUpdateError
onDownloadError
)
;
}
)
;
add_test
(
function
test_safebrowsing_gethash
(
)
{
var
hashCompleter
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
hashcompleter
;
1
"
]
.
getService
(
Ci
.
nsIUrlClassifierHashCompleter
)
;
hashCompleter
.
complete
(
"
aaaa
"
URL
+
safebrowsingGethashPath
"
test
-
phish
-
simple
"
{
completionV2
(
hash
table
chunkId
)
{
}
completionFinished
(
status
)
{
Assert
.
equal
(
status
Cr
.
NS_OK
)
;
run_next_test
(
)
;
}
}
)
;
}
)
;
add_test
(
function
test_non_safebrowsing_cookie
(
)
{
var
cookieName
=
"
regCookie_id0
"
;
var
originAttributes
=
new
OriginAttributes
(
0
false
0
)
;
function
setNonSafeBrowsingCookie
(
)
{
var
channel
=
setupChannel
(
setCookiePath
originAttributes
)
;
channel
.
setRequestHeader
(
"
set
-
cookie
"
cookieName
false
)
;
channel
.
asyncOpen
(
new
ChannelListener
(
checkNonSafeBrowsingCookie
null
)
)
;
}
function
checkNonSafeBrowsingCookie
(
)
{
var
channel
=
setupChannel
(
checkCookiePath
originAttributes
)
;
channel
.
asyncOpen
(
new
ChannelListener
(
completeCheckNonSafeBrowsingCookie
null
)
)
;
}
function
completeCheckNonSafeBrowsingCookie
(
request
data
context
)
{
var
expectedCookie
=
cookieName
+
"
=
1
"
;
request
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
var
cookiesSeen
=
request
.
getResponseHeader
(
"
saw
-
cookies
"
)
;
Assert
.
equal
(
cookiesSeen
expectedCookie
)
;
run_next_test
(
)
;
}
setNonSafeBrowsingCookie
(
)
;
}
)
;
add_test
(
function
test_safebrowsing_cookie
(
)
{
var
cookieName
=
"
sbCookie_id4294967294
"
;
var
originAttributes
=
new
OriginAttributes
(
0
false
0
)
;
originAttributes
.
firstPartyDomain
=
"
safebrowsing
.
86868755
-
6b82
-
4842
-
b301
-
72671a0db32e
.
mozilla
"
;
function
setSafeBrowsingCookie
(
)
{
var
channel
=
setupChannel
(
setCookiePath
originAttributes
)
;
channel
.
setRequestHeader
(
"
set
-
cookie
"
cookieName
false
)
;
channel
.
asyncOpen
(
new
ChannelListener
(
checkSafeBrowsingCookie
null
)
)
;
}
function
checkSafeBrowsingCookie
(
)
{
var
channel
=
setupChannel
(
checkCookiePath
originAttributes
)
;
channel
.
asyncOpen
(
new
ChannelListener
(
completeCheckSafeBrowsingCookie
null
)
)
;
}
function
completeCheckSafeBrowsingCookie
(
request
data
context
)
{
var
expectedCookies
=
"
sb
-
update
-
cookie
=
1
;
"
;
expectedCookies
+
=
"
sb
-
gethash
-
cookie
=
1
;
"
;
expectedCookies
+
=
cookieName
+
"
=
1
"
;
request
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
var
cookiesSeen
=
request
.
getResponseHeader
(
"
saw
-
cookies
"
)
;
Assert
.
equal
(
cookiesSeen
expectedCookies
)
;
httpserver
.
stop
(
do_test_finished
)
;
}
setSafeBrowsingCookie
(
)
;
}
)
;
