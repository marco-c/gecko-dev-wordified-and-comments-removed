Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
var
prefs
;
var
origin
;
var
h2Port
;
var
dns
=
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
;
var
threadManager
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIThreadManager
)
;
var
mainThread
=
threadManager
.
currentThread
;
const
defaultOriginAttributes
=
{
}
;
function
run_test
(
)
{
dump
(
"
start
!
\
n
"
)
;
var
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
h2Port
=
env
.
get
(
"
MOZHTTP2_PORT
"
)
;
Assert
.
notEqual
(
h2Port
null
)
;
Assert
.
notEqual
(
h2Port
"
"
)
;
do_get_profile
(
)
;
prefs
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefBranch
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
"
true
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
true
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
bootstrapAddress
"
"
127
.
0
.
0
.
1
"
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
"
)
;
prefs
.
setBoolPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
true
)
;
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
false
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
do_test_pending
(
)
;
run_dns_tests
(
)
;
}
function
resetTRRPrefs
(
)
{
prefs
.
clearUserPref
(
"
network
.
trr
.
mode
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
credentials
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
allow
-
rfc1918
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
useGET
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
confirmationNS
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
blacklist
-
duration
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
request
-
timeout
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
disable
-
ECS
"
)
;
}
registerCleanupFunction
(
(
)
=
>
{
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
"
)
;
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
)
;
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
prefs
.
clearUserPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
)
;
resetTRRPrefs
(
)
;
}
)
;
function
testsDone
(
)
{
do_test_finished
(
)
;
do_test_finished
(
)
;
}
var
test_loops
;
var
test_answer
=
"
127
.
0
.
0
.
1
"
;
var
listenerFine
=
{
onLookupComplete
:
function
(
inRequest
inRecord
inStatus
)
{
if
(
inRequest
=
=
listen
)
{
Assert
.
ok
(
!
inStatus
)
;
var
answer
=
inRecord
.
getNextAddrAsString
(
)
;
Assert
.
equal
(
answer
test_answer
)
;
do_test_finished
(
)
;
run_dns_tests
(
)
;
}
}
QueryInterface
:
function
(
aIID
)
{
if
(
aIID
.
equals
(
Ci
.
nsIDNSListener
)
|
|
aIID
.
equals
(
Ci
.
nsISupports
)
)
{
return
this
;
}
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
}
;
var
listenerFails
=
{
onLookupComplete
:
function
(
inRequest
inRecord
inStatus
)
{
if
(
inRequest
=
=
listen
)
{
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
)
;
do_test_finished
(
)
;
run_dns_tests
(
)
;
}
}
QueryInterface
:
function
(
aIID
)
{
if
(
aIID
.
equals
(
Ci
.
nsIDNSListener
)
|
|
aIID
.
equals
(
Ci
.
nsISupports
)
)
{
return
this
;
}
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
}
;
var
listenerUntilFine
=
{
onLookupComplete
:
function
(
inRequest
inRecord
inStatus
)
{
if
(
(
inRequest
=
=
listen
)
&
&
(
inRecord
!
=
null
)
)
{
var
answer
=
inRecord
.
getNextAddrAsString
(
)
;
if
(
answer
=
=
test_answer
)
{
Assert
.
equal
(
answer
test_answer
)
;
dump
(
"
Got
what
we
were
waiting
for
!
\
n
"
)
;
}
}
else
{
dump
(
"
Waiting
for
"
+
test_answer
+
"
but
got
"
+
answer
+
"
\
n
"
)
;
-
-
test_loops
;
Assert
.
ok
(
test_loops
!
=
0
)
;
current_test
-
-
;
}
do_test_finished
(
)
;
run_dns_tests
(
)
;
}
QueryInterface
:
function
(
aIID
)
{
if
(
aIID
.
equals
(
Ci
.
nsIDNSListener
)
|
|
aIID
.
equals
(
Ci
.
nsISupports
)
)
{
return
this
;
}
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
}
;
var
listen
;
function
test1
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
bar
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test1b
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
foo
.
example
.
com
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
bar
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test2
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
404
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
bar
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test3
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
auth
"
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
credentials
"
"
user
:
password
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
bar
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test4
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
auth
"
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
credentials
"
"
evil
:
person
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
wrong
.
example
.
com
"
0
listenerFails
mainThread
defaultOriginAttributes
)
;
}
function
test5
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
push
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
first
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test5b
(
)
{
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
404
"
)
;
dump
(
"
test5b
-
resolve
push
.
example
.
now
please
\
n
"
)
;
test_answer
=
"
2018
:
:
2018
"
;
listen
=
dns
.
asyncResolve
(
"
push
.
example
.
com
"
0
listenerUntilFine
mainThread
defaultOriginAttributes
)
;
}
function
test6
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
aaaa
"
)
;
test_answer
=
"
2020
:
2020
:
:
2020
"
;
listen
=
dns
.
asyncResolve
(
"
aaaa
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test7
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
rfc1918
"
)
;
listen
=
dns
.
asyncResolve
(
"
rfc1918
.
example
.
com
"
0
listenerFails
mainThread
defaultOriginAttributes
)
;
}
function
test8
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
rfc1918
"
)
;
prefs
.
setBoolPref
(
"
network
.
trr
.
allow
-
rfc1918
"
true
)
;
test_answer
=
"
192
.
168
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
rfc1918
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test8b
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
ecs
{
?
dns
}
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
allow
-
rfc1918
"
)
;
prefs
.
setBoolPref
(
"
network
.
trr
.
useGET
"
true
)
;
prefs
.
setBoolPref
(
"
network
.
trr
.
disable
-
ECS
"
true
)
;
test_answer
=
"
5
.
5
.
5
.
5
"
;
listen
=
dns
.
asyncResolve
(
"
ecs
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test9
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
get
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
allow
-
rfc1918
"
)
;
prefs
.
setBoolPref
(
"
network
.
trr
.
useGET
"
true
)
;
prefs
.
setBoolPref
(
"
network
.
trr
.
disable
-
ECS
"
false
)
;
test_answer
=
"
1
.
2
.
3
.
4
"
;
listen
=
dns
.
asyncResolve
(
"
get
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test10
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
useGET
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
disable
-
ECS
"
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
confirm
"
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
confirm
.
example
.
com
"
)
;
test_loops
=
100
;
try
{
listen
=
dns
.
asyncResolve
(
"
wrong
.
example
.
com
"
0
listenerFails
mainThread
defaultOriginAttributes
)
;
}
catch
(
e
)
{
do_test_finished
(
)
;
do_timeout
(
200
run_dns_tests
)
;
}
}
function
test10b
(
)
{
print
(
"
test
confirmationNS
retry
until
the
confirmed
NS
works
"
)
;
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
test_answer
=
"
1
:
:
ffff
"
try
{
listen
=
dns
.
asyncResolve
(
"
10b
-
"
+
test_loops
+
"
.
example
.
com
"
0
listenerUntilFine
mainThread
defaultOriginAttributes
)
;
}
catch
(
e
)
{
test_loops
-
-
;
do_timeout
(
200
test10b
)
;
}
}
function
test11
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
750ms
"
)
;
prefs
.
setIntPref
(
"
network
.
trr
.
request
-
timeout
"
10
)
;
listen
=
dns
.
asyncResolve
(
"
test11
.
example
.
com
"
0
listenerFails
mainThread
defaultOriginAttributes
)
;
}
function
test12
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
ns
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
request
-
timeout
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
test12
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test13
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
404
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
test13
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test14
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
4
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
404
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
test14
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test15
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
4
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
750ms
"
)
;
prefs
.
setIntPref
(
"
network
.
trr
.
request
-
timeout
"
10
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
test15
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test16
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
750ms
"
)
;
prefs
.
setIntPref
(
"
network
.
trr
.
request
-
timeout
"
10
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
test16
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test17
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
cname
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
request
-
timeout
"
)
;
test_answer
=
"
99
.
88
.
77
.
66
"
;
listen
=
dns
.
asyncResolve
(
"
cname
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test18
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
cname
-
loop
"
)
;
listen
=
dns
.
asyncResolve
(
"
test18
.
example
.
com
"
0
listenerFails
mainThread
defaultOriginAttributes
)
;
}
function
test19
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
1
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
cname
-
loop
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
test19
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test20
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
cname
-
loop
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
test20
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test21
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
4
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
cname
-
loop
"
)
;
test_answer
=
"
127
.
0
.
0
.
1
"
;
listen
=
dns
.
asyncResolve
(
"
test21
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
function
test22
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
"
)
;
listen
=
dns
.
asyncResolve
(
"
mismatch
.
example
.
com
"
0
listenerFails
mainThread
defaultOriginAttributes
)
;
}
function
test23
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
dns
-
cname
-
a
"
)
;
test_answer
=
"
9
.
8
.
7
.
6
"
;
listen
=
dns
.
asyncResolve
(
"
cname
-
a
.
example
.
com
"
0
listenerFine
mainThread
defaultOriginAttributes
)
;
}
var
tests
=
[
test1
test1b
test2
test3
test4
test5
test5b
test6
test7
test8
test8b
test9
test10
test10b
test11
test12
test13
test14
test15
test16
test17
test18
test19
test20
test21
test22
test23
testsDone
]
;
var
current_test
=
0
;
function
run_dns_tests
(
)
{
if
(
current_test
<
tests
.
length
)
{
dump
(
"
starting
test
"
+
current_test
+
"
\
n
"
)
;
do_test_pending
(
)
;
tests
[
current_test
+
+
]
(
)
;
}
}
