"
use
strict
"
;
const
gDefaultPref
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
SetParentalControlEnabled
(
false
)
;
function
setup
(
)
{
h2Port
=
trr_test_setup
(
)
;
runningODoHTests
=
false
;
}
setup
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
trr_clear_prefs
(
)
;
}
)
;
async
function
waitForConfirmation
(
expectedResponseIP
confirmationShouldFail
)
{
let
count
=
100
;
while
(
count
>
0
)
{
if
(
count
=
=
50
|
|
count
=
=
10
)
{
await
new
Promise
(
resolve
=
>
do_timeout
(
100
*
(
100
/
count
)
resolve
)
)
;
}
let
[
inRecord
]
=
await
new
TRRDNSListener
(
ip
{
count
}
.
example
.
org
undefined
false
)
;
inRecord
.
QueryInterface
(
Ci
.
nsIDNSAddrRecord
)
;
let
responseIP
=
inRecord
.
getNextAddrAsString
(
)
;
Assert
.
ok
(
true
responseIP
)
;
if
(
responseIP
=
=
expectedResponseIP
)
{
break
;
}
count
-
-
;
}
if
(
confirmationShouldFail
)
{
Assert
.
equal
(
count
0
"
Confirmation
did
not
finish
after
100
iterations
"
)
;
return
;
}
Assert
.
greater
(
count
0
"
Finished
confirmation
before
100
iterations
"
)
;
}
function
setModeAndURI
(
mode
path
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
mode
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
{
TRR_Domain
}
:
{
h2Port
}
/
{
path
}
)
;
}
function
makeChan
(
url
mode
bypassCache
)
{
let
chan
=
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
chan
.
loadFlags
|
=
Ci
.
nsIRequest
.
LOAD_BYPASS_CACHE
;
chan
.
loadFlags
|
=
Ci
.
nsIRequest
.
INHIBIT_CACHING
;
chan
.
setTRRMode
(
mode
)
;
return
chan
;
}
add_task
(
async
function
test_server_up
(
)
{
await
NodeServer
.
execute
(
"
bad_id
"
"
hello
"
)
.
then
(
(
)
=
>
ok
(
false
"
expecting
to
throw
"
)
)
.
catch
(
e
=
>
equal
(
e
.
message
"
Error
:
could
not
find
id
"
)
)
;
}
)
;
add_task
(
async
function
test_trr_flags
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
fallback
-
on
-
zero
-
response
"
true
)
;
let
httpserv
=
new
HttpServer
(
)
;
httpserv
.
registerPathHandler
(
"
/
"
function
handler
(
metadata
response
)
{
let
content
=
"
ok
"
;
response
.
setHeader
(
"
Content
-
Length
"
{
content
.
length
}
)
;
response
.
bodyOutputStream
.
write
(
content
content
.
length
)
;
}
)
;
httpserv
.
start
(
-
1
)
;
const
URL
=
http
:
/
/
example
.
com
:
{
httpserv
.
identity
.
primaryPort
}
/
;
for
(
let
mode
of
[
0
1
2
3
4
5
]
)
{
setModeAndURI
(
mode
"
doh
?
responseIP
=
127
.
0
.
0
.
1
"
)
;
for
(
let
flag
of
[
Ci
.
nsIRequest
.
TRR_DEFAULT_MODE
Ci
.
nsIRequest
.
TRR_DISABLED_MODE
Ci
.
nsIRequest
.
TRR_FIRST_MODE
Ci
.
nsIRequest
.
TRR_ONLY_MODE
]
)
{
dns
.
clearCache
(
true
)
;
let
chan
=
makeChan
(
URL
flag
)
;
let
expectTRR
=
(
[
2
3
]
.
includes
(
mode
)
&
&
flag
!
=
Ci
.
nsIRequest
.
TRR_DISABLED_MODE
)
|
|
(
mode
=
=
0
&
&
[
Ci
.
nsIRequest
.
TRR_FIRST_MODE
Ci
.
nsIRequest
.
TRR_ONLY_MODE
]
.
includes
(
flag
)
)
;
await
new
Promise
(
resolve
=
>
chan
.
asyncOpen
(
new
ChannelListener
(
resolve
)
)
)
;
equal
(
chan
.
getTRRMode
(
)
flag
)
;
equal
(
expectTRR
chan
.
QueryInterface
(
Ci
.
nsIHttpChannelInternal
)
.
isResolvedByTRR
)
;
}
}
await
new
Promise
(
resolve
=
>
httpserv
.
stop
(
resolve
)
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
fallback
-
on
-
zero
-
response
"
)
;
}
)
;
add_task
(
test_A_record
)
;
add_task
(
async
function
test_push
(
)
{
info
(
"
Verify
DOH
push
"
)
;
dns
.
clearCache
(
true
)
;
info
(
"
Asking
server
to
push
us
a
record
"
)
;
setModeAndURI
(
3
"
doh
?
responseIP
=
5
.
5
.
5
.
5
&
push
=
true
"
)
;
await
new
TRRDNSListener
(
"
first
.
example
.
com
"
"
5
.
5
.
5
.
5
"
)
;
setModeAndURI
(
3
"
404
"
)
;
await
new
TRRDNSListener
(
"
push
.
example
.
org
"
"
2018
:
:
2018
"
)
;
}
)
;
add_task
(
test_AAAA_records
)
;
add_task
(
test_RFC1918
)
;
add_task
(
test_GET_ECS
)
;
add_task
(
test_timeout_mode3
)
;
add_task
(
test_no_answers_fallback
)
;
add_task
(
test_404_fallback
)
;
add_task
(
test_mode_1_and_4
)
;
add_task
(
test_CNAME
)
;
add_task
(
test_name_mismatch
)
;
add_task
(
test_mode_2
)
;
add_task
(
test_excluded_domains
)
;
add_task
(
test_captiveportal_canonicalURL
)
;
add_task
(
test_parentalcontrols
)
;
add_task
(
test_builtin_excluded_domains
)
;
add_task
(
test_excluded_domains_mode3
)
;
add_task
(
test25e
)
;
add_task
(
test_parentalcontrols_mode3
)
;
add_task
(
test_builtin_excluded_domains_mode3
)
;
add_task
(
count_cookies
)
;
add_task
(
test_connection_closed
)
;
add_task
(
async
function
test_clearCacheOnURIChange
(
)
{
info
(
"
Check
that
the
TRR
cache
should
be
cleared
by
a
pref
change
.
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
clear
-
cache
-
on
-
pref
-
change
"
true
)
;
setModeAndURI
(
2
"
doh
?
responseIP
=
7
.
7
.
7
.
7
"
)
;
await
new
TRRDNSListener
(
"
bar
.
example
.
com
"
"
7
.
7
.
7
.
7
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
localhost
:
{
h2Port
}
/
doh
?
responseIP
=
8
.
8
.
8
.
8
)
;
await
new
TRRDNSListener
(
"
bar
.
example
.
com
"
"
8
.
8
.
8
.
8
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
clear
-
cache
-
on
-
pref
-
change
"
false
)
;
}
)
;
add_task
(
async
function
test_dnsSuffix
(
)
{
info
(
"
Checking
that
domains
matching
dns
suffix
list
use
Do53
"
)
;
async
function
checkDnsSuffixInMode
(
mode
)
{
dns
.
clearCache
(
true
)
;
setModeAndURI
(
mode
"
doh
?
responseIP
=
1
.
2
.
3
.
4
&
push
=
true
"
)
;
await
new
TRRDNSListener
(
"
example
.
org
"
"
1
.
2
.
3
.
4
"
)
;
await
new
TRRDNSListener
(
"
push
.
example
.
org
"
"
2018
:
:
2018
"
)
;
await
new
TRRDNSListener
(
"
test
.
com
"
"
1
.
2
.
3
.
4
"
)
;
let
networkLinkService
=
{
dnsSuffixList
:
[
"
example
.
org
"
]
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsINetworkLinkService
"
]
)
}
;
Services
.
obs
.
notifyObservers
(
networkLinkService
"
network
:
dns
-
suffix
-
list
-
updated
"
)
;
await
new
TRRDNSListener
(
"
test
.
com
"
"
1
.
2
.
3
.
4
"
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
network
.
trr
.
split_horizon_mitigations
"
)
)
{
await
new
TRRDNSListener
(
"
example
.
org
"
"
127
.
0
.
0
.
1
"
)
;
await
new
TRRDNSListener
(
"
push
.
example
.
org
"
"
127
.
0
.
0
.
1
"
)
;
}
else
{
await
new
TRRDNSListener
(
"
example
.
org
"
"
1
.
2
.
3
.
4
"
)
;
await
new
TRRDNSListener
(
"
push
.
example
.
org
"
"
2018
:
:
2018
"
)
;
}
networkLinkService
.
dnsSuffixList
=
[
]
;
Services
.
obs
.
notifyObservers
(
networkLinkService
"
network
:
dns
-
suffix
-
list
-
updated
"
)
;
}
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
split_horizon_mitigations
"
true
)
;
await
checkDnsSuffixInMode
(
2
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
bootstrapAddr
"
"
127
.
0
.
0
.
1
"
)
;
await
checkDnsSuffixInMode
(
3
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
split_horizon_mitigations
"
false
)
;
await
checkDnsSuffixInMode
(
2
)
;
await
checkDnsSuffixInMode
(
3
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
split_horizon_mitigations
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddr
"
)
;
}
)
;
add_task
(
async
function
test_async_resolve_with_trr_server
(
)
{
info
(
"
Checking
asyncResolveWithTrrServer
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
0
)
;
await
new
TRRDNSListener
(
"
bar_with_trr1
.
example
.
com
"
"
2
.
2
.
2
.
2
"
true
undefined
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2
.
2
.
2
.
2
)
;
await
new
TRRDNSListener
(
"
bar_with_trr1
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
2
"
doh
?
responseIP
=
2
.
2
.
2
.
2
"
)
;
await
new
TRRDNSListener
(
"
bar_with_trr2
.
example
.
com
"
"
3
.
3
.
3
.
3
"
true
undefined
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
)
;
await
new
TRRDNSListener
(
"
bar_with_trr2
.
example
.
com
"
"
2
.
2
.
2
.
2
"
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
3
"
doh
?
responseIP
=
2
.
2
.
2
.
2
"
)
;
await
new
TRRDNSListener
(
"
bar_with_trr3
.
example
.
com
"
"
3
.
3
.
3
.
3
"
true
undefined
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
)
;
await
new
TRRDNSListener
(
"
bar_with_trr3
.
example
.
com
"
"
2
.
2
.
2
.
2
"
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
5
"
doh
?
responseIP
=
2
.
2
.
2
.
2
"
)
;
let
inSocketProcess
=
mozinfo
.
socketprocess_networking
;
await
new
TRRDNSListener
(
"
bar_with_trr3
.
example
.
com
"
undefined
false
undefined
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
!
inSocketProcess
)
;
await
new
TRRDNSListener
(
"
bar_with_trr3
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
3
"
doh
?
responseIP
=
2
.
2
.
2
.
2
"
)
;
await
new
TRRDNSListener
(
"
bar_with_trr4
.
example
.
com
"
"
2
.
2
.
2
.
2
"
true
)
;
await
new
TRRDNSListener
(
"
bar_with_trr4
.
example
.
com
"
"
3
.
3
.
3
.
3
"
true
undefined
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
)
;
await
new
TRRDNSListener
(
"
bar_with_trr5
.
example
.
com
"
"
4
.
4
.
4
.
4
"
true
undefined
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
4
.
4
.
4
.
4
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
2
"
doh
?
responseIP
=
2
.
2
.
2
.
2
"
)
;
let
[
inStatus
]
=
await
new
TRRDNSListener
(
"
bar_with_trr6
.
example
.
com
"
undefined
false
undefined
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
404
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
await
new
TRRDNSListener
(
"
bar_with_trr6
.
example
.
com
"
"
2
.
2
.
2
.
2
"
true
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
2
"
doh
?
responseIP
=
2
.
2
.
2
.
2
"
)
;
await
new
TRRDNSListener
(
"
bar_with_trr7
.
example
.
com
"
"
3
.
3
.
3
.
3
"
true
undefined
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
&
push
=
true
)
;
setModeAndURI
(
2
"
404
"
)
;
await
new
TRRDNSListener
(
"
push
.
example
.
org
"
"
3
.
3
.
3
.
3
"
true
undefined
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
&
push
=
true
)
;
await
new
TRRDNSListener
(
"
push
.
example
.
org
"
"
127
.
0
.
0
.
1
"
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
2
"
doh
?
responseIP
=
1
:
:
ffff
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
useGET
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
disable
-
ECS
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
confirm
.
example
.
com
"
)
;
await
new
TRRDNSListener
(
"
bar_with_trr8
.
example
.
com
"
"
3
.
3
.
3
.
3
"
true
undefined
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
2
"
doh
?
responseIP
=
2
.
2
.
2
.
2
"
)
;
[
inStatus
]
=
await
new
TRRDNSListener
(
"
only_once
.
example
.
com
"
undefined
false
undefined
https
:
/
/
target
.
example
.
com
:
666
/
404
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
)
;
add_task
(
test_fetch_time
)
;
add_task
(
async
function
test_content_encoding_gzip
(
)
{
info
(
"
Checking
gzip
content
encoding
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
send_empty_accept
-
encoding_headers
"
false
)
;
setModeAndURI
(
3
"
doh
?
responseIP
=
2
.
2
.
2
.
2
"
)
;
await
new
TRRDNSListener
(
"
bar
.
example
.
com
"
"
2
.
2
.
2
.
2
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
send_empty_accept
-
encoding_headers
"
)
;
}
)
;
add_task
(
async
function
test_redirect
(
)
{
info
(
"
Check
handling
of
redirect
"
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
3
"
doh
?
redirect
=
4
.
4
.
4
.
4
{
&
dns
}
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
useGET
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
disable
-
ECS
"
true
)
;
await
new
TRRDNSListener
(
"
ecs
.
example
.
com
"
"
4
.
4
.
4
.
4
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
useGET
"
false
)
;
setModeAndURI
(
3
"
doh
?
redirect
=
4
.
4
.
4
.
4
"
)
;
await
new
TRRDNSListener
(
"
bar
.
example
.
com
"
"
4
.
4
.
4
.
4
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
useGET
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
disable
-
ECS
"
)
;
}
)
;
add_task
(
async
function
test_confirmation
(
)
{
info
(
"
Checking
that
we
fall
back
correctly
when
confirmation
is
pending
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
confirmation
"
true
)
;
setModeAndURI
(
2
"
doh
?
responseIP
=
7
.
7
.
7
.
7
&
slowConfirm
=
true
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
confirm
.
example
.
com
"
)
;
await
new
TRRDNSListener
(
"
example
.
org
"
"
127
.
0
.
0
.
1
"
)
;
await
new
Promise
(
resolve
=
>
do_timeout
(
1000
resolve
)
)
;
await
waitForConfirmation
(
"
7
.
7
.
7
.
7
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
info
(
"
Check
that
confirmation
is
skipped
in
mode
3
"
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
3
"
doh
?
responseIP
=
1
:
:
ffff
&
slowConfirm
=
true
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
confirm
.
example
.
com
"
)
;
await
new
TRRDNSListener
(
"
skipConfirmationForMode3
.
example
.
com
"
"
1
:
:
ffff
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
confirmation
"
false
)
;
setModeAndURI
(
2
"
doh
?
responseIP
=
7
.
7
.
7
.
7
&
slowConfirm
=
true
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
confirm
.
example
.
com
"
)
;
await
new
TRRDNSListener
(
"
example
.
org
"
"
7
.
7
.
7
.
7
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
confirmation
"
true
)
;
setModeAndURI
(
2
"
404
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
confirm
.
example
.
com
"
)
;
await
waitForConfirmation
(
"
7
.
7
.
7
.
7
"
true
)
;
await
new
TRRDNSListener
(
"
example
.
org
"
"
127
.
0
.
0
.
1
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
wait
-
for
-
confirmation
"
)
;
}
)
;
add_task
(
test_fqdn
)
;
add_task
(
async
function
test_detected_uri
(
)
{
info
(
"
Test
setDetectedTrrURI
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
let
defaultURI
=
gDefaultPref
.
getCharPref
(
"
network
.
trr
.
default_provider_uri
"
)
;
gDefaultPref
.
setCharPref
(
"
network
.
trr
.
default_provider_uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
4
.
5
.
6
)
;
await
new
TRRDNSListener
(
"
domainA
.
example
.
org
.
"
"
3
.
4
.
5
.
6
"
)
;
dns
.
setDetectedTrrURI
(
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
1
.
2
.
3
.
4
)
;
await
new
TRRDNSListener
(
"
domainB
.
example
.
org
.
"
"
1
.
2
.
3
.
4
"
)
;
gDefaultPref
.
setCharPref
(
"
network
.
trr
.
default_provider_uri
"
defaultURI
)
;
dns
.
clearCache
(
true
)
;
setModeAndURI
(
2
"
doh
?
responseIP
=
4
.
5
.
6
.
7
"
)
;
await
new
TRRDNSListener
(
"
domainA
.
example
.
org
.
"
"
4
.
5
.
6
.
7
"
)
;
dns
.
setDetectedTrrURI
(
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
1
.
2
.
3
.
4
)
;
await
new
TRRDNSListener
(
"
domainB
.
example
.
org
.
"
"
4
.
5
.
6
.
7
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
gDefaultPref
.
setCharPref
(
"
network
.
trr
.
default_provider_uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
4
.
5
.
6
)
;
await
new
TRRDNSListener
(
"
domainA
.
example
.
org
.
"
"
3
.
4
.
5
.
6
"
)
;
dns
.
setDetectedTrrURI
(
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
1
.
2
.
3
.
4
)
;
await
new
TRRDNSListener
(
"
domainB
.
example
.
org
.
"
"
1
.
2
.
3
.
4
"
)
;
let
networkLinkService
=
{
platformDNSIndications
:
0
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsINetworkLinkService
"
]
)
}
;
Services
.
obs
.
notifyObservers
(
networkLinkService
"
network
:
link
-
status
-
changed
"
"
changed
"
)
;
await
new
TRRDNSListener
(
"
domainC
.
example
.
org
.
"
"
3
.
4
.
5
.
6
"
)
;
gDefaultPref
.
setCharPref
(
"
network
.
trr
.
default_provider_uri
"
defaultURI
)
;
}
)
;
add_task
(
async
function
test_pref_changes
(
)
{
info
(
"
Testing
pref
change
handling
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
let
defaultURI
=
gDefaultPref
.
getCharPref
(
"
network
.
trr
.
default_provider_uri
"
)
;
async
function
doThenCheckURI
(
closure
expectedURI
expectChange
=
true
)
{
let
uriChanged
;
if
(
expectChange
)
{
uriChanged
=
topicObserved
(
"
network
:
trr
-
uri
-
changed
"
)
;
}
closure
(
)
;
if
(
expectChange
)
{
await
uriChanged
;
}
equal
(
dns
.
currentTrrURI
expectedURI
)
;
}
await
doThenCheckURI
(
(
)
=
>
{
gDefaultPref
.
setCharPref
(
"
network
.
trr
.
default_provider_uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
default
)
;
}
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
default
)
;
await
doThenCheckURI
(
(
)
=
>
{
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
user
)
;
}
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
user
)
;
await
doThenCheckURI
(
(
)
=
>
{
Services
.
prefs
.
setCharPref
(
"
doh
-
rollout
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
rollout
)
;
}
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
user
false
)
;
await
doThenCheckURI
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
}
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
rollout
)
;
await
doThenCheckURI
(
(
)
=
>
{
dns
.
setDetectedTrrURI
(
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
detected
)
;
}
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
detected
)
;
await
doThenCheckURI
(
(
)
=
>
{
let
networkLinkService
=
{
platformDNSIndications
:
0
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsINetworkLinkService
"
]
)
}
;
Services
.
obs
.
notifyObservers
(
networkLinkService
"
network
:
link
-
status
-
changed
"
"
changed
"
)
;
}
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
rollout
)
;
await
doThenCheckURI
(
(
)
=
>
{
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
user
)
;
}
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
user
)
;
await
doThenCheckURI
(
(
)
=
>
{
dns
.
setDetectedTrrURI
(
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
detected
)
;
}
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
user
false
)
;
await
doThenCheckURI
(
(
)
=
>
{
let
networkLinkService
=
{
platformDNSIndications
:
0
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsINetworkLinkService
"
]
)
}
;
Services
.
obs
.
notifyObservers
(
networkLinkService
"
network
:
link
-
status
-
changed
"
"
changed
"
)
;
}
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
user
false
)
;
gDefaultPref
.
setCharPref
(
"
network
.
trr
.
default_provider_uri
"
defaultURI
)
;
}
)
;
add_task
(
async
function
test_dohrollout_mode
(
)
{
info
(
"
Testing
doh
-
rollout
.
mode
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
mode
"
)
;
Services
.
prefs
.
clearUserPref
(
"
doh
-
rollout
.
mode
"
)
;
equal
(
dns
.
currentTrrMode
0
)
;
async
function
doThenCheckMode
(
trrMode
rolloutMode
expectedMode
message
)
{
let
modeChanged
;
if
(
dns
.
currentTrrMode
!
=
expectedMode
)
{
modeChanged
=
topicObserved
(
"
network
:
trr
-
mode
-
changed
"
)
;
}
if
(
trrMode
!
=
undefined
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
trrMode
)
;
}
if
(
rolloutMode
!
=
undefined
)
{
Services
.
prefs
.
setIntPref
(
"
doh
-
rollout
.
mode
"
rolloutMode
)
;
}
if
(
modeChanged
)
{
await
modeChanged
;
}
equal
(
dns
.
currentTrrMode
expectedMode
message
)
;
}
await
doThenCheckMode
(
2
undefined
2
)
;
await
doThenCheckMode
(
3
undefined
3
)
;
await
doThenCheckMode
(
5
undefined
5
)
;
await
doThenCheckMode
(
2
undefined
2
)
;
await
doThenCheckMode
(
0
undefined
0
)
;
await
doThenCheckMode
(
1
undefined
5
)
;
await
doThenCheckMode
(
6
undefined
5
)
;
await
doThenCheckMode
(
2
0
2
)
;
await
doThenCheckMode
(
2
1
2
)
;
await
doThenCheckMode
(
2
2
2
)
;
await
doThenCheckMode
(
2
3
2
)
;
await
doThenCheckMode
(
2
5
2
)
;
await
doThenCheckMode
(
3
2
3
)
;
await
doThenCheckMode
(
5
2
5
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
mode
"
)
;
Services
.
prefs
.
clearUserPref
(
"
doh
-
rollout
.
mode
"
)
;
await
doThenCheckMode
(
undefined
2
2
)
;
await
doThenCheckMode
(
undefined
3
3
)
;
await
doThenCheckMode
(
undefined
5
5
)
;
await
doThenCheckMode
(
undefined
4
5
)
;
await
doThenCheckMode
(
undefined
6
5
)
;
await
doThenCheckMode
(
undefined
2
2
)
;
await
doThenCheckMode
(
3
undefined
3
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
mode
"
)
;
equal
(
dns
.
currentTrrMode
2
)
;
Services
.
prefs
.
clearUserPref
(
"
doh
-
rollout
.
mode
"
)
;
equal
(
dns
.
currentTrrMode
0
)
;
}
)
;
add_task
(
test_ipv6_trr_fallback
)
;
add_task
(
test_no_retry_without_doh
)
;
add_task
(
async
function
test_purge_trr_cache_on_mode_change
(
)
{
info
(
"
Checking
that
we
purge
cache
when
TRR
is
turned
off
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
clear
-
cache
-
on
-
pref
-
change
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
0
)
;
Services
.
prefs
.
setIntPref
(
"
doh
-
rollout
.
mode
"
2
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
)
;
await
new
TRRDNSListener
(
"
cached
.
example
.
com
"
"
3
.
3
.
3
.
3
"
)
;
Services
.
prefs
.
clearUserPref
(
"
doh
-
rollout
.
mode
"
)
;
await
new
TRRDNSListener
(
"
cached
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
clear
-
cache
-
on
-
pref
-
change
"
false
)
;
Services
.
prefs
.
clearUserPref
(
"
doh
-
rollout
.
mode
"
)
;
}
)
;
add_task
(
async
function
test_old_bootstrap_pref
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
bootstrapAddress
"
"
1
.
1
.
1
.
1
"
)
;
setModeAndURI
(
Ci
.
nsIDNSService
.
MODE_TRRONLY
doh
?
responseIP
=
4
.
4
.
4
.
4
)
;
await
new
TRRDNSListener
(
"
testytest
.
com
"
"
4
.
4
.
4
.
4
"
)
;
}
)
;
