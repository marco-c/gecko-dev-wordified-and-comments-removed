"
use
strict
"
;
const
dns
=
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
;
const
{
MockRegistrar
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
jsm
"
)
;
const
mainThread
=
Services
.
tm
.
currentThread
;
const
defaultOriginAttributes
=
{
}
;
let
h2Port
=
null
;
async
function
SetParentalControlEnabled
(
aEnabled
)
{
let
parentalControlsService
=
{
parentalControlsEnabled
:
aEnabled
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIParentalControlsService
]
)
}
;
let
cid
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
parental
-
controls
-
service
;
1
"
parentalControlsService
)
;
dns
.
reloadParentalControlEnabled
(
)
;
MockRegistrar
.
unregister
(
cid
)
;
}
add_task
(
function
setup
(
)
{
dump
(
"
start
!
\
n
"
)
;
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
h2Port
=
env
.
get
(
"
MOZHTTP2_PORT
"
)
;
Assert
.
notEqual
(
h2Port
null
)
;
Assert
.
notEqual
(
h2Port
"
"
)
;
do_get_profile
(
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
bootstrapAddress
"
"
127
.
0
.
0
.
1
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
A
-
and
-
AAAA
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
SetParentalControlEnabled
(
false
)
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
mode
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
credentials
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
allow
-
rfc1918
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
useGET
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
confirmationNS
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
blacklist
-
duration
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
request_timeout_ms
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
request_timeout_mode_trronly_ms
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
disable
-
ECS
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
early
-
AAAA
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
skip
-
AAAA
-
when
-
not
-
supported
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
wait
-
for
-
A
-
and
-
AAAA
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
excluded
-
domains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
captivedetect
.
canonicalURL
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
)
;
}
)
;
class
DNSListener
{
constructor
(
name
expectedAnswer
expectedSuccess
=
true
)
{
this
.
name
=
name
;
this
.
expectedAnswer
=
expectedAnswer
;
this
.
expectedSuccess
=
expectedSuccess
;
this
.
promise
=
new
Promise
(
resolve
=
>
{
this
.
resolve
=
resolve
;
}
)
;
this
.
request
=
dns
.
asyncResolve
(
name
0
this
mainThread
defaultOriginAttributes
)
;
}
onLookupComplete
(
inRequest
inRecord
inStatus
)
{
Assert
.
ok
(
inRequest
=
=
this
.
request
)
;
if
(
!
this
.
expectedSuccess
)
{
this
.
resolve
(
[
inRequest
inRecord
inStatus
]
)
;
return
;
}
Assert
.
equal
(
inStatus
Cr
.
NS_OK
)
;
let
answer
=
inRecord
.
getNextAddrAsString
(
)
;
Assert
.
equal
(
answer
this
.
expectedAnswer
)
;
this
.
resolve
(
[
inRequest
inRecord
inStatus
]
)
;
}
QueryInterface
(
aIID
)
{
if
(
aIID
.
equals
(
Ci
.
nsIDNSListener
)
|
|
aIID
.
equals
(
Ci
.
nsISupports
)
)
{
return
this
;
}
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
then
(
)
{
return
this
.
promise
.
then
.
apply
(
this
.
promise
arguments
)
;
}
}
add_task
(
async
function
test1
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2
.
2
.
2
.
2
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
2
.
2
.
2
.
2
"
)
;
}
)
;
add_task
(
async
function
test1b
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
foo
.
example
.
com
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
3
.
3
.
3
.
3
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
bootstrapAddress
"
"
127
.
0
.
0
.
1
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
}
)
;
add_task
(
async
function
test2
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
404
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
3
.
3
.
3
.
3
"
)
;
}
)
;
add_task
(
async
function
test3
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
4
.
4
.
4
.
4
&
auth
=
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
credentials
"
"
user
:
password
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
4
.
4
.
4
.
4
"
)
;
}
)
;
add_task
(
async
function
test4
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
4
.
4
.
4
.
4
&
auth
=
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
credentials
"
"
evil
:
person
"
)
;
let
[
inStatus
]
=
await
new
DNSListener
(
"
wrong
.
example
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
)
;
add_task
(
async
function
test5
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
5
.
5
.
5
.
5
&
push
=
true
)
;
await
new
DNSListener
(
"
first
.
example
.
com
"
"
5
.
5
.
5
.
5
"
)
;
}
)
;
add_task
(
async
function
test5b
(
)
{
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
404
)
;
dump
(
"
test5b
-
resolve
push
.
example
.
now
please
\
n
"
)
;
await
new
DNSListener
(
"
push
.
example
.
com
"
"
2018
:
:
2018
"
)
;
}
)
;
add_task
(
async
function
test6
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
A
-
and
-
AAAA
"
true
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2020
&
delayIPv4
=
100
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2020
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
false
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2030
&
delayIPv4
=
100
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2030
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2020
&
delayIPv6
=
100
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2020
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
false
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2030
&
delayIPv6
=
100
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2030
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2020
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2020
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
false
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2030
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2030
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
A
-
and
-
AAAA
"
false
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2020
&
delayIPv4
=
100
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2020
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
false
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2030
&
delayIPv4
=
100
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2030
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2020
&
delayIPv6
=
100
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2020
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
false
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2030
&
delayIPv6
=
100
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2030
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2020
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2020
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
early
-
AAAA
"
false
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2020
:
2020
:
:
2030
)
;
await
new
DNSListener
(
"
aaaa
.
example
.
com
"
"
2020
:
2020
:
:
2030
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
early
-
AAAA
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
wait
-
for
-
A
-
and
-
AAAA
"
)
;
}
)
;
add_task
(
async
function
test7
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
168
.
0
.
1
)
;
let
[
inStatus
]
=
await
new
DNSListener
(
"
rfc1918
.
example
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
)
;
add_task
(
async
function
test8
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
168
.
0
.
1
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
allow
-
rfc1918
"
true
)
;
await
new
DNSListener
(
"
rfc1918
.
example
.
com
"
"
192
.
168
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test8b
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
{
?
dns
}
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
allow
-
rfc1918
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
useGET
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
disable
-
ECS
"
true
)
;
await
new
DNSListener
(
"
ecs
.
example
.
com
"
"
5
.
5
.
5
.
5
"
)
;
}
)
;
add_task
(
async
function
test9
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
allow
-
rfc1918
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
useGET
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
disable
-
ECS
"
false
)
;
await
new
DNSListener
(
"
get
.
example
.
com
"
"
5
.
5
.
5
.
5
"
)
;
}
)
;
add_task
(
async
function
test10
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
useGET
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
disable
-
ECS
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
1
:
:
ffff
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
confirm
.
example
.
com
"
)
;
try
{
let
[
inStatus
]
=
await
new
DNSListener
(
"
wrong
.
example
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
catch
(
e
)
{
await
new
Promise
(
resolve
=
>
do_timeout
(
200
resolve
)
)
;
}
let
test_loops
=
100
;
print
(
"
test
confirmationNS
retry
until
the
confirmed
NS
works
"
)
;
while
(
test_loops
>
0
)
{
print
(
loops
remaining
:
{
test_loops
}
\
n
)
;
try
{
let
[
inRecord
inStatus
]
=
await
new
DNSListener
(
10b
-
{
test_loops
}
.
example
.
com
undefined
false
)
;
if
(
inRecord
)
{
Assert
.
equal
(
inStatus
Cr
.
NS_OK
)
;
let
answer
=
inRecord
.
getNextAddrAsString
(
)
;
Assert
.
equal
(
answer
"
1
:
:
ffff
"
)
;
break
;
}
}
catch
(
e
)
{
dump
(
e
)
;
}
test_loops
-
-
;
await
new
Promise
(
resolve
=
>
do_timeout
(
0
resolve
)
)
;
}
Assert
.
notEqual
(
test_loops
0
)
;
}
)
;
add_task
(
async
function
test11
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
dns
-
750ms
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
request_timeout_mode_trronly_ms
"
10
)
;
let
[
inStatus
]
=
await
new
DNSListener
(
"
test11
.
example
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
)
;
add_task
(
async
function
test12
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
request_timeout_ms
"
10
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
none
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
request_timeout_ms
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
request_timeout_mode_trronly_ms
"
)
;
await
new
DNSListener
(
"
confirm
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test13
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
404
)
;
await
new
DNSListener
(
"
test13
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test14
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
4
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
404
)
;
await
new
DNSListener
(
"
test14
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
4
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2
.
2
.
2
.
2
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test15
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
4
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
dns
-
750ms
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
request_timeout_ms
"
10
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
request_timeout_mode_trronly_ms
"
10
)
;
await
new
DNSListener
(
"
test15
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
4
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2
.
2
.
2
.
2
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test16
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
dns
-
750ms
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
request_timeout_ms
"
10
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
request_timeout_mode_trronly_ms
"
10
)
;
await
new
DNSListener
(
"
test16
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test17
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
dns
-
cname
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
request_timeout_ms
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
request_timeout_mode_trronly_ms
"
)
;
await
new
DNSListener
(
"
cname
.
example
.
com
"
"
99
.
88
.
77
.
66
"
)
;
}
)
;
add_task
(
async
function
test18
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
none
&
cnameloop
=
true
)
;
let
[
inStatus
]
=
await
new
DNSListener
(
"
test18
.
example
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
)
;
add_task
(
async
function
test19
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
1
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
none
&
cnameloop
=
true
)
;
await
new
DNSListener
(
"
test19
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
1
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2
.
2
.
2
.
2
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test20
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
none
&
cnameloop
=
true
)
;
await
new
DNSListener
(
"
test20
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test21
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
4
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
none
&
cnameloop
=
true
)
;
await
new
DNSListener
(
"
test21
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
4
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2
.
2
.
2
.
2
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test22
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
hostname
=
bar
.
example
.
com
)
;
let
[
inStatus
]
=
await
new
DNSListener
(
"
mismatch
.
example
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
)
;
add_task
(
async
function
test23
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
dns
-
cname
-
a
)
;
await
new
DNSListener
(
"
cname
-
a
.
example
.
com
"
"
9
.
8
.
7
.
6
"
)
;
}
)
;
add_task
(
async
function
test24
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
"
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
192
.
192
.
192
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
192
.
192
.
192
.
192
"
)
;
}
)
;
add_task
(
async
function
test24b
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
bar
.
example
.
com
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test24c
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
example
.
com
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test24d
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
foo
.
test
.
com
bar
.
example
.
com
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test24e
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
bar
.
example
.
com
foo
.
test
.
com
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test24f
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
captivedetect
.
canonicalURL
"
"
http
:
/
/
test
.
detectportal
.
com
/
success
.
txt
"
)
;
await
new
DNSListener
(
"
test
.
detectportal
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test24g
(
)
{
dns
.
clearCache
(
true
)
;
await
SetParentalControlEnabled
(
true
)
;
await
new
DNSListener
(
"
www
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
await
SetParentalControlEnabled
(
false
)
;
}
)
;
add_task
(
async
function
test24h
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
"
bar
.
example
.
com
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test24i
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
"
example
.
com
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test24j
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
"
foo
.
test
.
com
bar
.
example
.
com
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test24k
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
"
bar
.
example
.
com
foo
.
test
.
com
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test25
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
"
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
192
.
192
.
192
)
;
await
new
DNSListener
(
"
localhost
"
"
192
.
192
.
192
.
192
"
true
)
;
}
)
;
add_task
(
async
function
test25b
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
localhost
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
192
.
192
.
192
)
;
await
new
DNSListener
(
"
localhost
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test25c
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
localhost
local
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
192
.
192
.
192
)
;
await
new
DNSListener
(
"
test
.
local
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test25d
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
localhost
local
other
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
192
.
192
.
192
)
;
await
new
DNSListener
(
"
domain
.
other
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test25e
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
captivedetect
.
canonicalURL
"
"
http
:
/
/
test
.
detectportal
.
com
/
success
.
txt
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
192
.
192
.
192
)
;
await
new
DNSListener
(
"
test
.
detectportal
.
com
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test25f
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
await
SetParentalControlEnabled
(
true
)
;
await
new
DNSListener
(
"
www
.
example
.
com
"
"
127
.
0
.
0
.
1
"
)
;
await
SetParentalControlEnabled
(
false
)
;
}
)
;
add_task
(
async
function
test25g
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
"
localhost
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
192
.
192
.
192
)
;
await
new
DNSListener
(
"
localhost
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test25h
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
"
localhost
local
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
192
.
192
.
192
)
;
await
new
DNSListener
(
"
test
.
local
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
test25i
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
"
localhost
local
other
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
192
.
192
.
192
.
192
)
;
await
new
DNSListener
(
"
domain
.
other
"
"
127
.
0
.
0
.
1
"
)
;
}
)
;
add_task
(
async
function
count_cookies
(
)
{
let
cm
=
Cc
[
"
mozilla
.
org
/
cookiemanager
;
1
"
]
.
getService
(
Ci
.
nsICookieManager
)
;
Assert
.
equal
(
cm
.
countCookiesFromHost
(
"
example
.
com
"
)
0
)
;
Assert
.
equal
(
cm
.
countCookiesFromHost
(
"
foo
.
example
.
com
.
"
)
0
)
;
}
)
;
add_task
(
async
function
test_connection_closed
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
request_timeout_mode_trronly_ms
"
500
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
2
.
2
.
2
.
2
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
bootstrapAddress
"
"
127
.
0
.
0
.
1
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
2
.
2
.
2
.
2
"
)
;
let
[
inStatus
]
=
await
new
DNSListener
(
"
closeme
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
await
new
DNSListener
(
"
bar2
.
example
.
com
"
"
2
.
2
.
2
.
2
"
)
;
}
)
;
add_task
(
async
function
test_connection_closed_no_bootstrap
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
localhost
local
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
foo
.
example
.
com
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
3
.
3
.
3
.
3
"
)
;
let
[
inStatus
]
=
await
new
DNSListener
(
"
closeme
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
await
new
DNSListener
(
"
bar2
.
example
.
com
"
"
3
.
3
.
3
.
3
"
)
;
}
)
;
add_task
(
async
function
test_connection_closed_no_bootstrap_localhost
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
localhost
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
localhost
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
3
.
3
.
3
.
3
"
)
;
let
[
inStatus
]
=
await
new
DNSListener
(
"
closeme
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
await
new
DNSListener
(
"
bar2
.
example
.
com
"
"
3
.
3
.
3
.
3
"
)
;
}
)
;
add_task
(
async
function
test_connection_closed_no_bootstrap_no_excluded
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
excluded
-
domains
"
"
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
builtin
-
excluded
-
domains
"
"
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
localhost
:
{
h2Port
}
/
doh
?
responseIP
=
3
.
3
.
3
.
3
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
3
.
3
.
3
.
3
"
)
;
let
[
inStatus
]
=
await
new
DNSListener
(
"
closeme
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
[
inStatus
]
=
await
new
DNSListener
(
"
bar2
.
example
.
com
"
undefined
false
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
)
;
add_task
(
async
function
test_connection_closed_trr_first
(
)
{
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
localhost
:
{
h2Port
}
/
doh
?
responseIP
=
9
.
9
.
9
.
9
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
closeme
.
com
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddress
"
)
;
await
new
DNSListener
(
"
bar
.
example
.
com
"
"
9
.
9
.
9
.
9
"
)
;
await
new
DNSListener
(
"
closeme
.
com
"
"
127
.
0
.
0
.
1
"
)
;
await
new
DNSListener
(
"
bar2
.
example
.
com
"
"
9
.
9
.
9
.
9
"
)
;
}
)
;
