"
use
strict
"
;
var
firstTest
=
1
;
var
lastTest
=
4
;
const
{
HttpServer
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
httpd
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
URL
"
function
(
)
{
return
"
http
:
/
/
localhost
:
"
+
httpserver
.
identity
.
primaryPort
;
}
)
;
var
httpserver
=
new
HttpServer
(
)
;
var
nextTest
=
firstTest
;
var
test_flags
=
[
]
;
var
testPathBase
=
"
/
test_headers
"
;
function
run_test
(
)
{
httpserver
.
start
(
-
1
)
;
do_test_pending
(
)
;
run_test_number
(
nextTest
)
;
}
function
runNextTest
(
)
{
if
(
nextTest
=
=
lastTest
)
{
endTests
(
)
;
return
;
}
nextTest
+
+
;
if
(
globalThis
[
"
handler
"
+
nextTest
]
=
=
undefined
)
{
do_throw
(
"
handler
"
+
nextTest
+
"
undefined
!
"
)
;
}
if
(
globalThis
[
"
completeTest
"
+
nextTest
]
=
=
undefined
)
{
do_throw
(
"
completeTest
"
+
nextTest
+
"
undefined
!
"
)
;
}
run_test_number
(
nextTest
)
;
}
function
run_test_number
(
num
)
{
let
testPath
=
testPathBase
+
num
;
httpserver
.
registerPathHandler
(
testPath
globalThis
[
"
handler
"
+
num
]
)
;
var
channel
=
setupChannel
(
testPath
)
;
let
flags
=
test_flags
[
num
]
;
channel
.
asyncOpen
(
new
ChannelListener
(
globalThis
[
"
completeTest
"
+
num
]
channel
flags
)
)
;
}
function
setupChannel
(
url
)
{
var
chan
=
NetUtil
.
newChannel
(
{
uri
:
URL
+
url
loadUsingSystemPrincipal
:
true
}
)
;
var
httpChan
=
chan
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
return
httpChan
;
}
function
endTests
(
)
{
httpserver
.
stop
(
do_test_finished
)
;
}
function
handler1
(
metadata
response
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Disposition
"
"
attachment
;
filename
=
foo
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
false
)
;
}
function
completeTest1
(
request
)
{
try
{
var
chan
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
Assert
.
equal
(
chan
.
contentDisposition
chan
.
DISPOSITION_ATTACHMENT
)
;
Assert
.
equal
(
chan
.
contentDispositionFilename
"
foo
"
)
;
Assert
.
equal
(
chan
.
contentDispositionHeader
"
attachment
;
filename
=
foo
"
)
;
}
catch
(
ex
)
{
do_throw
(
"
error
parsing
Content
-
Disposition
:
"
+
ex
)
;
}
runNextTest
(
)
;
}
function
handler2
(
metadata
response
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
false
)
;
response
.
setHeader
(
"
Content
-
Disposition
"
"
attachment
"
)
;
var
body
=
"
foo
"
;
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
function
completeTest2
(
request
)
{
try
{
var
chan
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
Assert
.
equal
(
chan
.
contentDisposition
chan
.
DISPOSITION_ATTACHMENT
)
;
Assert
.
equal
(
chan
.
contentDispositionHeader
"
attachment
"
)
;
chan
.
contentDispositionFilename
;
do_throw
(
"
Should
have
failed
getting
Content
-
Disposition
filename
"
)
;
}
catch
(
ex
)
{
info
(
"
correctly
ate
exception
"
)
;
}
runNextTest
(
)
;
}
function
handler3
(
metadata
response
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
false
)
;
response
.
setHeader
(
"
Content
-
Disposition
"
"
attachment
;
filename
=
"
)
;
var
body
=
"
foo
"
;
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
function
completeTest3
(
request
)
{
try
{
var
chan
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
Assert
.
equal
(
chan
.
contentDisposition
chan
.
DISPOSITION_ATTACHMENT
)
;
Assert
.
equal
(
chan
.
contentDispositionHeader
"
attachment
;
filename
=
"
)
;
chan
.
contentDispositionFilename
;
do_throw
(
"
Should
have
failed
getting
Content
-
Disposition
filename
"
)
;
}
catch
(
ex
)
{
info
(
"
correctly
ate
exception
"
)
;
}
runNextTest
(
)
;
}
function
handler4
(
metadata
response
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
false
)
;
response
.
setHeader
(
"
Content
-
Disposition
"
"
inline
"
)
;
var
body
=
"
foo
"
;
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
function
completeTest4
(
request
)
{
try
{
var
chan
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
Assert
.
equal
(
chan
.
contentDisposition
chan
.
DISPOSITION_INLINE
)
;
Assert
.
equal
(
chan
.
contentDispositionHeader
"
inline
"
)
;
chan
.
contentDispositionFilename
;
do_throw
(
"
Should
have
failed
getting
Content
-
Disposition
filename
"
)
;
}
catch
(
ex
)
{
info
(
"
correctly
ate
exception
"
)
;
}
runNextTest
(
)
;
}
