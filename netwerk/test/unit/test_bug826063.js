var
URIs
=
[
"
http
:
/
/
example
.
org
"
"
https
:
/
/
example
.
org
"
"
ftp
:
/
/
example
.
org
"
]
;
function
*
getChannels
(
)
{
for
(
let
u
of
URIs
)
{
yield
NetUtil
.
newChannel
(
{
uri
:
u
loadUsingSystemPrincipal
:
true
}
)
;
}
}
function
checkPrivate
(
channel
shouldBePrivate
)
{
Assert
.
equal
(
channel
.
QueryInterface
(
Ci
.
nsIPrivateBrowsingChannel
)
.
isChannelPrivate
shouldBePrivate
)
;
}
add_test
(
function
test_plain
(
)
{
for
(
let
c
of
getChannels
(
)
)
{
checkPrivate
(
c
false
)
;
}
run_next_test
(
)
;
}
)
;
add_test
(
function
test_setPrivate_private
(
)
{
for
(
let
c
of
getChannels
(
)
)
{
c
.
QueryInterface
(
Ci
.
nsIPrivateBrowsingChannel
)
.
setPrivate
(
true
)
;
checkPrivate
(
c
true
)
;
}
run_next_test
(
)
;
}
)
;
add_test
(
function
test_setPrivate_regular
(
)
{
for
(
let
c
of
getChannels
(
)
)
{
c
.
QueryInterface
(
Ci
.
nsIPrivateBrowsingChannel
)
.
setPrivate
(
false
)
;
checkPrivate
(
c
false
)
;
}
run_next_test
(
)
;
}
)
;
add_test
(
function
test_LoadContextPrivate
(
)
{
let
ctx
=
Cu
.
createPrivateLoadContext
(
)
;
for
(
let
c
of
getChannels
(
)
)
{
c
.
notificationCallbacks
=
ctx
;
checkPrivate
(
c
true
)
;
}
run_next_test
(
)
;
}
)
;
add_test
(
function
test_LoadContextRegular
(
)
{
let
ctx
=
Cu
.
createLoadContext
(
)
;
for
(
let
c
of
getChannels
(
)
)
{
c
.
notificationCallbacks
=
ctx
;
checkPrivate
(
c
false
)
;
}
run_next_test
(
)
;
}
)
;
function
run_test
(
)
{
run_next_test
(
)
;
}
