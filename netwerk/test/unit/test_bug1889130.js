"
use
strict
"
;
const
{
HttpServer
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
httpd
.
sys
.
mjs
"
)
;
var
{
setTimeout
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
)
;
const
ip
=
"
0
.
0
.
0
.
0
"
;
let
httpserver
=
new
HttpServer
(
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
URL
"
function
(
)
{
return
http
:
/
/
{
ip
}
:
{
httpserver
.
identity
.
primaryPort
}
/
;
}
)
;
function
plainResponse
(
metadata
response
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
Ok
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
)
;
response
.
setHeader
(
"
Content
-
Length
"
"
2
"
)
;
response
.
bodyOutputStream
.
write
(
"
Ok
"
"
Ok
"
.
length
)
;
}
add_setup
(
function
(
)
{
httpserver
.
registerPathHandler
(
"
/
"
plainResponse
)
;
httpserver
.
_start
(
-
1
ip
)
;
httpserver
.
identity
.
setPrimary
(
"
http
"
"
0
.
0
.
0
.
0
"
httpserver
.
identity
.
primaryPort
)
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
"
network
.
socket
.
ip_addr_any
.
disabled
"
true
)
;
await
httpserver
.
stop
(
(
)
=
>
{
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_ipaddrany_allow
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
socket
.
ip_addr_any
.
disabled
"
false
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
5000
)
)
;
var
chan
=
NetUtil
.
newChannel
(
{
uri
:
URL
loadUsingSystemPrincipal
:
true
}
)
;
await
new
Promise
(
resolve
=
>
{
chan
.
asyncOpen
(
new
ChannelListener
(
resolve
)
)
;
}
)
;
Assert
.
equal
(
chan
.
status
Cr
.
NS_OK
)
;
}
)
;
add_task
(
async
function
test_ipaddrany_deny
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
socket
.
ip_addr_any
.
disabled
"
true
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
5000
)
)
;
var
chan
=
NetUtil
.
newChannel
(
{
uri
:
URL
loadUsingSystemPrincipal
:
true
}
)
;
await
new
Promise
(
resolve
=
>
{
chan
.
asyncOpen
(
new
ChannelListener
(
resolve
null
CL_EXPECT_FAILURE
)
)
;
}
)
;
Assert
.
equal
(
chan
.
status
Cr
.
NS_ERROR_CONNECTION_REFUSED
)
;
}
)
;
