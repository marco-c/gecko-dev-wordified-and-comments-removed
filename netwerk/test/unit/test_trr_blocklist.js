"
use
strict
"
;
const
override
=
Cc
[
"
mozilla
.
org
/
network
/
native
-
dns
-
override
;
1
"
]
.
getService
(
Ci
.
nsINativeDNSResolverOverride
)
;
function
setup
(
)
{
trr_test_setup
(
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
temp_blocklist
"
true
)
;
}
setup
(
)
;
async
function
waitUntil
(
predicate
retry
=
20
)
{
let
count
=
0
;
while
(
count
+
+
<
retry
)
{
if
(
await
predicate
(
)
)
{
return
true
;
}
await
new
Promise
(
resolve
=
>
do_timeout
(
100
resolve
)
)
;
}
return
false
;
}
add_task
(
async
function
checkBlocklisting
(
)
{
let
trrServer
=
new
TRRServer
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
trrServer
.
stop
(
)
;
}
)
;
await
trrServer
.
start
(
)
;
info
(
port
=
{
trrServer
.
port
(
)
}
\
n
)
;
Services
.
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
trrServer
.
port
(
)
}
/
dns
-
query
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
Ci
.
nsIDNSService
.
MODE_TRRFIRST
)
;
await
trrServer
.
registerDoHAnswers
(
"
top
.
test
.
com
"
"
NS
"
{
}
)
;
override
.
addIPOverride
(
"
sub
.
top
.
test
.
com
"
"
2
.
2
.
2
.
2
"
)
;
override
.
addIPOverride
(
"
sub2
.
top
.
test
.
com
"
"
2
.
2
.
2
.
2
"
)
;
await
new
TRRDNSListener
(
"
sub
.
top
.
test
.
com
"
{
expectedAnswer
:
"
2
.
2
.
2
.
2
"
}
)
;
equal
(
await
trrServer
.
requestCount
(
"
sub
.
top
.
test
.
com
"
"
A
"
)
1
)
;
Services
.
dns
.
clearCache
(
true
)
;
await
new
TRRDNSListener
(
"
sub
.
top
.
test
.
com
"
{
expectedAnswer
:
"
2
.
2
.
2
.
2
"
}
)
;
equal
(
await
trrServer
.
requestCount
(
"
sub
.
top
.
test
.
com
"
"
A
"
)
1
"
Request
should
go
directly
to
native
because
result
is
still
in
blocklist
"
)
;
equal
(
await
trrServer
.
requestCount
(
"
top
.
test
.
com
"
"
NS
"
)
1
"
Should
have
checked
parent
domain
"
)
;
await
new
TRRDNSListener
(
"
sub2
.
top
.
test
.
com
"
{
expectedAnswer
:
"
2
.
2
.
2
.
2
"
}
)
;
equal
(
await
trrServer
.
requestCount
(
"
sub2
.
top
.
test
.
com
"
"
A
"
)
0
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
temp_blocklist_duration_sec
"
0
)
;
Services
.
dns
.
clearCache
(
true
)
;
await
new
TRRDNSListener
(
"
sub
.
top
.
test
.
com
"
{
expectedAnswer
:
"
2
.
2
.
2
.
2
"
}
)
;
equal
(
await
trrServer
.
requestCount
(
"
sub
.
top
.
test
.
com
"
"
A
"
)
2
"
We
should
do
another
TRR
request
because
the
bloclist
expired
"
)
;
}
)
;
add_task
(
async
function
test_blocklist_cname
(
)
{
let
trrServer
=
new
TRRServer
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
trrServer
.
stop
(
)
;
}
)
;
await
trrServer
.
start
(
)
;
info
(
port
=
{
trrServer
.
port
(
)
}
\
n
)
;
Services
.
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
trrServer
.
port
(
)
}
/
dns
-
query
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
Ci
.
nsIDNSService
.
MODE_TRRFIRST
)
;
await
trrServer
.
registerDoHAnswers
(
top
.
test
.
com
"
NS
"
{
answers
:
[
{
name
:
"
top
.
test
.
com
"
ttl
:
55
type
:
"
CNAME
"
flush
:
false
data
:
"
other
.
foo
"
}
]
}
)
;
await
trrServer
.
registerDoHAnswers
(
other
.
foo
"
NS
"
{
answers
:
[
{
name
:
"
other
.
foo
"
ttl
:
55
type
:
"
NS
"
flush
:
false
data
:
"
ns
.
other
.
foo
"
}
]
}
)
;
override
.
addIPOverride
(
"
sub
.
top
.
test
.
com
"
"
2
.
2
.
2
.
2
"
)
;
await
new
TRRDNSListener
(
"
sub
.
top
.
test
.
com
"
{
expectedAnswer
:
"
2
.
2
.
2
.
2
"
}
)
;
await
waitUntil
(
async
(
)
=
>
{
return
(
await
trrServer
.
requestCount
(
"
top
.
test
.
com
"
"
NS
"
)
)
=
=
1
;
}
)
;
}
)
;
