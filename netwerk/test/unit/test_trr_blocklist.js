"
use
strict
"
;
const
dns
=
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
;
const
override
=
Cc
[
"
mozilla
.
org
/
network
/
native
-
dns
-
override
;
1
"
]
.
getService
(
Ci
.
nsINativeDNSResolverOverride
)
;
function
setup
(
)
{
trr_test_setup
(
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
trr
.
temp_blocklist
"
true
)
;
}
setup
(
)
;
add_task
(
async
function
checkBlocklisting
(
)
{
let
trrServer
=
new
TRRServer
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
trrServer
.
stop
(
)
;
}
)
;
await
trrServer
.
start
(
)
;
info
(
port
=
{
trrServer
.
port
}
\
n
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
trrServer
.
port
}
/
dns
-
query
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
Ci
.
nsIDNSService
.
MODE_TRRFIRST
)
;
await
trrServer
.
registerDoHAnswers
(
"
top
.
test
.
com
"
"
NS
"
{
}
)
;
override
.
addIPOverride
(
"
sub
.
top
.
test
.
com
"
"
2
.
2
.
2
.
2
"
)
;
override
.
addIPOverride
(
"
sub2
.
top
.
test
.
com
"
"
2
.
2
.
2
.
2
"
)
;
await
new
TRRDNSListener
(
"
sub
.
top
.
test
.
com
"
{
expectedAnswer
:
"
2
.
2
.
2
.
2
"
}
)
;
equal
(
await
trrServer
.
requestCount
(
"
sub
.
top
.
test
.
com
"
"
A
"
)
1
)
;
dns
.
clearCache
(
true
)
;
await
new
TRRDNSListener
(
"
sub
.
top
.
test
.
com
"
{
expectedAnswer
:
"
2
.
2
.
2
.
2
"
}
)
;
equal
(
await
trrServer
.
requestCount
(
"
sub
.
top
.
test
.
com
"
"
A
"
)
1
"
Request
should
go
directly
to
native
because
result
is
still
in
blocklist
"
)
;
equal
(
await
trrServer
.
requestCount
(
"
top
.
test
.
com
"
"
NS
"
)
1
"
Should
have
checked
parent
domain
"
)
;
await
new
TRRDNSListener
(
"
sub2
.
top
.
test
.
com
"
{
expectedAnswer
:
"
2
.
2
.
2
.
2
"
}
)
;
equal
(
await
trrServer
.
requestCount
(
"
sub2
.
top
.
test
.
com
"
"
A
"
)
0
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
temp_blocklist_duration_sec
"
0
)
;
dns
.
clearCache
(
true
)
;
await
new
TRRDNSListener
(
"
sub
.
top
.
test
.
com
"
{
expectedAnswer
:
"
2
.
2
.
2
.
2
"
}
)
;
equal
(
await
trrServer
.
requestCount
(
"
sub
.
top
.
test
.
com
"
"
A
"
)
2
"
We
should
do
another
TRR
request
because
the
bloclist
expired
"
)
;
}
)
;
