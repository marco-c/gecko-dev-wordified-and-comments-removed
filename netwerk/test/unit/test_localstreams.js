"
use
strict
"
;
const
PR_RDONLY
=
0x1
;
function
test_stream
(
stream
)
{
Assert
.
equal
(
stream
.
isNonBlocking
(
)
false
)
;
Assert
.
equal
(
Cc
[
"
mozilla
.
org
/
io
-
util
;
1
"
]
.
getService
(
Ci
.
nsIIOUtil
)
.
inputStreamIsBuffered
(
stream
)
false
)
;
var
binstream
=
Cc
[
"
mozilla
.
org
/
binaryinputstream
;
1
"
]
.
createInstance
(
Ci
.
nsIBinaryInputStream
)
;
binstream
.
setInputStream
(
stream
)
;
var
numread
=
0
;
for
(
;
;
)
{
Assert
.
equal
(
stream
.
available
(
)
binstream
.
available
(
)
)
;
var
avail
=
stream
.
available
(
)
;
Assert
.
notEqual
(
avail
-
1
)
;
Assert
.
notEqual
(
avail
Math
.
pow
(
2
32
)
-
1
)
;
Assert
.
notEqual
(
avail
Math
.
pow
(
2
31
)
-
1
)
;
if
(
!
avail
)
{
var
could_read
=
false
;
try
{
binstream
.
readByteArray
(
1
)
;
could_read
=
true
;
}
catch
(
e
)
{
}
if
(
could_read
)
{
do_throw
(
"
Data
readable
when
available
indicated
EOF
!
"
)
;
}
return
numread
;
}
dump
(
"
Trying
to
read
"
+
avail
+
"
bytes
\
n
"
)
;
binstream
.
readByteArray
(
avail
)
;
numread
+
=
avail
;
}
}
function
stream_for_file
(
file
)
{
var
str
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileInputStream
)
;
str
.
init
(
file
PR_RDONLY
0
0
)
;
return
str
;
}
function
stream_from_channel
(
file
)
{
var
uri
=
Services
.
io
.
newFileURI
(
file
)
;
return
NetUtil
.
newChannel
(
{
uri
loadUsingSystemPrincipal
:
true
}
)
.
open
(
)
;
}
function
run_test
(
)
{
var
file
=
do_get_file
(
"
.
.
/
unit
/
data
/
test_readline6
.
txt
"
)
;
var
len
=
file
.
fileSize
;
Assert
.
equal
(
test_stream
(
stream_for_file
(
file
)
)
len
)
;
Assert
.
equal
(
test_stream
(
stream_from_channel
(
file
)
)
len
)
;
var
dir
=
file
.
parent
;
test_stream
(
stream_from_channel
(
dir
)
)
;
}
