"
use
strict
"
;
const
kENTRYCOUNT
=
10
;
function
log_
(
msg
)
{
if
(
true
)
{
dump
(
"
>
>
>
>
>
>
>
>
>
>
>
>
>
"
+
msg
+
"
\
n
"
)
;
}
}
function
run_test
(
)
{
do_get_profile
(
)
;
var
lci
=
Services
.
loadContextInfo
.
default
;
var
testingInterface
=
Services
.
cache2
.
QueryInterface
(
Ci
.
nsICacheTesting
)
;
Assert
.
ok
(
testingInterface
)
;
var
mc
=
new
MultipleCallbacks
(
1
function
(
)
{
mc
=
new
MultipleCallbacks
(
1
finish_cache2_test
)
;
gc
(
)
;
gc
(
)
;
executeSoon
(
(
)
=
>
{
gc
(
)
;
gc
(
)
;
log_
(
"
purging
"
)
;
Services
.
cache2
.
purgeFromMemory
(
Ci
.
nsICacheStorageService
.
PURGE_EVERYTHING
)
;
}
)
;
}
true
)
;
log_
(
"
first
set
of
opens
"
)
;
var
i
;
for
(
i
=
0
;
i
<
kENTRYCOUNT
;
+
+
i
)
{
mc
.
add
(
)
;
asyncOpenCacheEntry
(
"
http
:
/
/
pinned
"
+
i
+
"
/
"
"
pin
"
Ci
.
nsICacheStorage
.
OPEN_TRUNCATE
lci
new
OpenCallback
(
NEW
|
WAITFORWRITE
"
m
"
+
i
"
p
"
+
i
function
(
entry
)
{
mc
.
fired
(
)
;
}
)
)
;
mc
.
add
(
)
;
asyncOpenCacheEntry
(
"
http
:
/
/
common
"
+
i
+
"
/
"
"
disk
"
Ci
.
nsICacheStorage
.
OPEN_TRUNCATE
lci
new
OpenCallback
(
NEW
|
WAITFORWRITE
"
m
"
+
i
"
d
"
+
i
function
(
entry
)
{
mc
.
fired
(
)
;
}
)
)
;
}
mc
.
fired
(
)
;
Services
.
obs
.
addObserver
(
{
observe
(
subject
topic
data
)
{
log_
(
"
after
purge
"
)
;
testingInterface
.
suspendCacheIOThread
(
7
)
;
log_
(
"
clearing
"
)
;
Services
.
cache2
.
clear
(
)
;
log_
(
"
cleared
"
)
;
log_
(
"
second
set
of
opens
"
)
;
for
(
i
=
0
;
i
<
kENTRYCOUNT
;
+
+
i
)
{
mc
.
add
(
)
;
asyncOpenCacheEntry
(
"
http
:
/
/
pinned
"
+
i
+
"
/
"
"
disk
"
Ci
.
nsICacheStorage
.
OPEN_NORMALLY
lci
new
OpenCallback
(
NORMAL
"
m
"
+
i
"
p
"
+
i
function
(
entry
)
{
mc
.
fired
(
)
;
}
)
)
;
mc
.
add
(
)
;
asyncOpenCacheEntry
(
"
http
:
/
/
common
"
+
i
+
"
/
"
"
disk
"
Ci
.
nsICacheStorage
.
OPEN_NORMALLY
lci
new
OpenCallback
(
NEW
"
m2
"
+
i
"
d2
"
+
i
function
(
entry
)
{
mc
.
fired
(
)
;
}
)
)
;
}
log_
(
"
resuming
"
)
;
testingInterface
.
resumeCacheIOThread
(
)
;
log_
(
"
resumed
"
)
;
mc
.
fired
(
)
;
}
}
"
cacheservice
:
purge
-
memory
-
pools
"
)
;
do_test_pending
(
)
;
}
