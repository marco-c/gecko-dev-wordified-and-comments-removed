"
use
strict
"
;
function
inChildProcess
(
)
{
return
Services
.
appinfo
.
processType
!
=
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
;
}
function
run_test
(
)
{
if
(
!
inChildProcess
(
)
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
url
.
useDefaultURI
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
url
.
some_schemes_bypass_defaultURI_fallback
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
url
.
simple_uri_schemes
"
"
simpleprotocol
otherproto
"
)
;
}
let
uri
=
NetUtil
.
newURI
(
"
https
:
/
/
example
.
com
/
"
)
;
Assert
.
equal
(
uri
.
spec
"
https
:
/
/
example
.
com
/
"
)
;
let
uri1
=
NetUtil
.
newURI
(
"
https
:
/
/
https
:
/
/
example
.
com
/
"
)
;
Assert
.
equal
(
uri1
.
spec
"
https
:
/
/
https
/
/
example
.
com
/
"
)
;
let
uri2
=
NetUtil
.
newURI
(
"
nonsimpleprotocol
:
/
/
https
:
/
/
example
.
com
"
)
;
Assert
.
equal
(
uri2
.
spec
"
nonsimpleprotocol
:
/
/
https
/
/
example
.
com
"
)
;
let
same
=
"
simpleprotocol
:
/
/
https
:
/
/
example
.
com
"
;
let
uri3
=
NetUtil
.
newURI
(
same
)
;
Assert
.
equal
(
uri3
.
spec
same
)
;
if
(
!
inChildProcess
(
)
)
{
Services
.
prefs
.
setCharPref
(
"
network
.
url
.
simple_uri_schemes
"
"
otherproto
"
)
;
let
uri4
=
NetUtil
.
newURI
(
"
simpleprotocol
:
/
/
https
:
/
/
example
.
com
"
)
;
Assert
.
equal
(
uri4
.
spec
"
simpleprotocol
:
/
/
https
/
/
example
.
com
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
url
.
simple_uri_schemes
"
"
simpleprotocol
otherproto
"
)
;
let
uri5
=
NetUtil
.
newURI
(
"
simpleprotocol
:
/
/
https
:
/
/
example
.
com
"
)
;
Assert
.
equal
(
uri5
.
spec
"
simpleprotocol
:
/
/
https
:
/
/
example
.
com
"
)
;
let
uri6
=
NetUtil
.
newURI
(
"
otherproto
:
/
/
https
:
/
/
example
.
com
"
)
;
Assert
.
equal
(
uri6
.
spec
"
otherproto
:
/
/
https
:
/
/
example
.
com
"
)
;
}
}
