Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
var
Cc
=
Components
.
classes
;
var
Ci
=
Components
.
interfaces
;
var
server
=
new
HttpServer
(
)
;
server
.
start
(
-
1
)
;
var
baseURL
=
"
http
:
/
/
localhost
:
"
+
server
.
identity
.
primaryPort
+
"
/
"
;
var
maxConnections
=
0
;
var
urgentRequests
=
0
;
var
totalRequests
=
0
;
var
debug
=
false
;
function
log
(
msg
)
{
if
(
!
debug
)
{
return
;
}
if
(
msg
)
{
dump
(
"
TEST
INFO
|
"
+
msg
+
"
\
n
"
)
;
}
}
function
make_channel
(
url
)
{
var
request
=
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
;
request
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
return
request
;
}
function
serverStopListener
(
)
{
server
.
stop
(
)
;
}
function
commonHttpRequest
(
id
)
{
let
uri
=
baseURL
;
var
chan
=
make_channel
(
uri
)
;
var
listner
=
new
HttpResponseListener
(
id
)
;
chan
.
setRequestHeader
(
"
X
-
ID
"
id
false
)
;
chan
.
setRequestHeader
(
"
Cache
-
control
"
"
no
-
store
"
false
)
;
chan
.
asyncOpen2
(
listner
)
;
log
(
"
Create
common
http
request
id
=
"
+
id
)
;
}
function
urgentStartHttpRequest
(
id
)
{
let
uri
=
baseURL
;
var
chan
=
make_channel
(
uri
)
;
var
listner
=
new
HttpResponseListener
(
id
)
;
var
cos
=
chan
.
QueryInterface
(
Ci
.
nsIClassOfService
)
;
cos
.
addClassFlags
(
Ci
.
nsIClassOfService
.
UrgentStart
)
;
chan
.
setRequestHeader
(
"
X
-
ID
"
id
false
)
;
chan
.
setRequestHeader
(
"
Cache
-
control
"
"
no
-
store
"
false
)
;
chan
.
asyncOpen2
(
listner
)
;
log
(
"
Create
urgent
-
start
http
request
id
=
"
+
id
)
;
}
function
setup_httpRequests
(
)
{
log
(
"
setup_httpRequests
"
)
;
for
(
var
i
=
0
;
i
<
maxConnections
;
i
+
+
)
{
commonHttpRequest
(
i
)
;
do_test_pending
(
)
;
}
}
function
setup_urgentStartRequests
(
)
{
for
(
var
i
=
0
;
i
<
urgentRequests
;
i
+
+
)
{
urgentStartHttpRequest
(
1000
+
i
)
;
do_test_pending
(
)
;
}
}
function
HttpResponseListener
(
id
)
{
this
.
id
=
id
}
;
var
testOrder
=
0
;
HttpResponseListener
.
prototype
=
{
onStartRequest
:
function
(
request
ctx
)
{
}
onDataAvailable
:
function
(
request
ctx
stream
off
cnt
)
{
}
onStopRequest
:
function
(
request
ctx
status
)
{
log
(
"
STOP
id
=
"
+
this
.
id
)
;
do_test_finished
(
)
;
}
}
;
var
responseQueue
=
new
Array
(
)
;
function
setup_http_server
(
)
{
log
(
"
setup_http_server
"
)
;
var
prefs
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefBranch
)
;
maxConnections
=
prefs
.
getIntPref
(
"
network
.
http
.
max
-
persistent
-
connections
-
per
-
server
"
)
;
urgentRequests
=
2
;
totalRequests
=
maxConnections
+
urgentRequests
;
var
allCommonHttpRequestReceived
=
false
;
server
.
registerPathHandler
(
'
/
'
function
(
metadata
response
)
{
var
id
=
metadata
.
getHeader
(
"
X
-
ID
"
)
;
log
(
"
Server
recived
the
response
id
=
"
+
id
)
;
response
.
processAsync
(
)
;
responseQueue
.
push
(
response
)
;
if
(
responseQueue
.
length
=
=
maxConnections
&
&
!
allCommonHttpRequestReceived
)
{
allCommonHttpRequestReceived
=
true
;
setup_urgentStartRequests
(
)
;
}
if
(
responseQueue
.
length
=
=
maxConnections
+
urgentRequests
)
{
processResponse
(
)
;
}
}
)
;
do_register_cleanup
(
function
(
)
{
server
.
stop
(
serverStopListener
)
;
}
)
;
}
function
processResponse
(
)
{
while
(
responseQueue
.
length
)
{
var
resposne
=
responseQueue
.
pop
(
)
;
resposne
.
finish
(
)
;
}
}
function
run_test
(
)
{
setup_http_server
(
)
;
setup_httpRequests
(
)
;
}
