var
test_generator
=
do_run_test
(
)
;
function
run_test
(
)
{
do_test_pending
(
)
;
do_run_generator
(
test_generator
)
;
}
function
finish_test
(
)
{
executeSoon
(
function
(
)
{
test_generator
.
return
(
)
;
do_test_finished
(
)
;
}
)
;
}
function
make_channel
(
url
)
{
return
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
}
function
*
do_run_test
(
)
{
let
profile
=
do_get_profile
(
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookieSettings
.
unblocked_for_testing
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
0
)
;
let
uri1
=
NetUtil
.
newURI
(
"
http
:
/
/
foo
.
com
/
foo
.
html
"
)
;
let
uri2
=
NetUtil
.
newURI
(
"
http
:
/
/
bar
.
com
/
bar
.
html
"
)
;
Services
.
cookies
.
setCookieString
(
uri1
null
"
oh
=
hai
;
max
-
age
=
1000
"
null
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
countCookiesFromHost
(
uri1
.
host
)
1
)
;
var
chan1
=
make_channel
(
uri1
.
spec
)
;
chan1
.
QueryInterface
(
Ci
.
nsIPrivateBrowsingChannel
)
;
chan1
.
setPrivate
(
true
)
;
var
chan2
=
make_channel
(
uri2
.
spec
)
;
chan2
.
QueryInterface
(
Ci
.
nsIPrivateBrowsingChannel
)
;
chan2
.
setPrivate
(
true
)
;
Services
.
cookies
.
setCookieString
(
uri2
null
"
oh
=
hai
;
max
-
age
=
1000
"
chan2
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri1
chan1
)
"
"
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri2
chan2
)
"
oh
=
hai
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
last
-
pb
-
context
-
exited
"
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri1
chan1
)
"
"
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri2
chan2
)
"
"
)
;
Services
.
cookies
.
setCookieString
(
uri2
null
"
oh
=
hai
;
max
-
age
=
1000
"
chan2
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri2
chan2
)
"
oh
=
hai
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
last
-
pb
-
context
-
exited
"
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
countCookiesFromHost
(
uri1
.
host
)
1
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
countCookiesFromHost
(
uri2
.
host
)
0
)
;
do_close_profile
(
test_generator
)
;
yield
;
do_load_profile
(
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
countCookiesFromHost
(
uri1
.
host
)
1
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
countCookiesFromHost
(
uri2
.
host
)
0
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri1
chan1
)
"
"
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri2
chan2
)
"
"
)
;
Services
.
cookies
.
setCookieString
(
uri2
null
"
oh
=
hai
;
max
-
age
=
1000
"
chan2
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri2
chan2
)
"
oh
=
hai
"
)
;
do_close_profile
(
test_generator
)
;
yield
;
do_load_profile
(
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri1
chan1
)
"
"
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri2
chan2
)
"
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
last
-
pb
-
context
-
exited
"
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
countCookiesFromHost
(
uri1
.
host
)
1
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
countCookiesFromHost
(
uri2
.
host
)
0
)
;
do_close_profile
(
test_generator
)
;
yield
;
do_load_profile
(
test_generator
)
;
yield
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri1
chan1
)
"
"
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
getCookieString
(
uri2
chan2
)
"
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
last
-
pb
-
context
-
exited
"
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
countCookiesFromHost
(
uri1
.
host
)
1
)
;
Assert
.
equal
(
Services
.
cookiemgr
.
countCookiesFromHost
(
uri2
.
host
)
0
)
;
finish_test
(
)
;
}
