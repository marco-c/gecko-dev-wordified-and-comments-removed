"
use
strict
"
;
const
pps
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
-
proxy
-
service
;
1
"
]
.
getService
(
)
;
let
filter
;
class
ProxyFilter
{
constructor
(
type
host
port
flags
)
{
this
.
_type
=
type
;
this
.
_host
=
host
;
this
.
_port
=
port
;
this
.
_flags
=
flags
;
this
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIProtocolProxyFilter
"
]
)
;
}
applyFilter
(
uri
pi
cb
)
{
cb
.
onProxyFilterResult
(
pps
.
newProxyInfo
(
this
.
_type
this
.
_host
this
.
_port
null
null
this
.
_flags
1000
null
)
)
;
}
}
function
createPrincipal
(
url
)
{
var
ssm
=
Services
.
scriptSecurityManager
;
try
{
return
ssm
.
createContentPrincipal
(
Services
.
io
.
newURI
(
url
)
{
}
)
;
}
catch
(
e
)
{
return
null
;
}
}
function
make_channel
(
url
)
{
return
Services
.
io
.
newChannelFromURIWithProxyFlags
(
Services
.
io
.
newURI
(
url
)
null
16
null
createPrincipal
(
url
)
createPrincipal
(
url
)
Ci
.
nsILoadInfo
.
SEC_ALLOW_CROSS_ORIGIN_INHERITS_SEC_CONTEXT
Ci
.
nsIContentPolicy
.
TYPE_OTHER
)
;
}
function
get_response
(
channel
flags
=
CL_ALLOW_UNKNOWN_CL
delay
=
0
)
{
return
new
Promise
(
resolve
=
>
{
var
listener
=
new
ChannelListener
(
(
request
data
)
=
>
{
request
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
const
status
=
request
.
status
;
const
http_code
=
status
?
undefined
:
request
.
responseStatus
;
request
.
QueryInterface
(
Ci
.
nsIProxiedChannel
)
;
const
proxy_connect_response_code
=
request
.
httpProxyConnectResponseCode
;
resolve
(
{
status
http_code
data
proxy_connect_response_code
}
)
;
}
null
flags
)
;
if
(
delay
>
0
)
{
do_timeout
(
delay
function
(
)
{
channel
.
asyncOpen
(
listener
)
;
}
)
;
}
else
{
channel
.
asyncOpen
(
listener
)
;
}
}
)
;
}
add_task
(
async
function
setup
(
)
{
do_get_profile
(
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
proxy_port
=
env
.
get
(
"
MOZHTTP2_PORT
"
)
;
Assert
.
notEqual
(
proxy_port
null
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
http2
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
true
)
;
filter
=
new
ProxyFilter
(
"
https
"
"
localhost
"
proxy_port
16
)
;
pps
.
registerFilter
(
filter
10
)
;
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
http2
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
)
;
pps
.
unregisterFilter
(
filter
)
;
}
)
;
add_task
(
async
function
proxy_server_stream_soft_failure_multiple_streams_not_affected
(
)
{
let
should_succeed
=
get_response
(
make_channel
(
http
:
/
/
750
.
example
.
com
)
)
;
const
failed
=
await
get_response
(
make_channel
(
http
:
/
/
illegalhpacksoft
.
example
.
com
)
CL_EXPECT_FAILURE
20
)
;
const
succeeded
=
await
should_succeed
;
Assert
.
equal
(
failed
.
status
Cr
.
NS_ERROR_ILLEGAL_VALUE
)
;
Assert
.
equal
(
failed
.
proxy_connect_response_code
0
)
;
Assert
.
equal
(
failed
.
http_code
undefined
)
;
Assert
.
equal
(
succeeded
.
status
Cr
.
NS_OK
)
;
Assert
.
equal
(
succeeded
.
proxy_connect_response_code
200
)
;
Assert
.
equal
(
succeeded
.
http_code
200
)
;
}
)
;
add_task
(
async
function
proxy_server_stream_hard_failure_multiple_streams_affected
(
)
{
let
should_failed
=
get_response
(
make_channel
(
http
:
/
/
750
.
example
.
com
)
CL_EXPECT_FAILURE
)
;
const
failed1
=
await
get_response
(
make_channel
(
http
:
/
/
illegalhpackhard
.
example
.
com
)
CL_EXPECT_FAILURE
)
;
const
failed2
=
await
should_failed
;
Assert
.
equal
(
failed1
.
status
0x804b0053
)
;
Assert
.
equal
(
failed1
.
proxy_connect_response_code
0
)
;
Assert
.
equal
(
failed1
.
http_code
undefined
)
;
Assert
.
equal
(
failed2
.
status
0x804b0053
)
;
Assert
.
equal
(
failed2
.
proxy_connect_response_code
0
)
;
Assert
.
equal
(
failed2
.
http_code
undefined
)
;
}
)
;
