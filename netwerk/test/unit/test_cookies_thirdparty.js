"
use
strict
"
;
add_task
(
async
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
"
network
.
cookieJarSettings
.
unblocked_for_testing
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
rejectForeignWithExceptions
.
enabled
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
security
.
https_first
"
false
)
;
CookieXPCShellUtils
.
createServer
(
{
hosts
:
[
"
foo
.
com
"
"
bar
.
com
"
"
third
.
com
"
]
}
)
;
function
createChannel
(
uri
principal
=
null
)
{
const
channel
=
NetUtil
.
newChannel
(
{
uri
loadingPrincipal
:
principal
|
|
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
}
)
securityFlags
:
Ci
.
nsILoadInfo
.
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
contentPolicyType
:
Ci
.
nsIContentPolicy
.
TYPE_OTHER
}
)
;
return
channel
.
QueryInterface
(
Ci
.
nsIHttpChannelInternal
)
;
}
let
spec1
=
"
http
:
/
/
foo
.
com
/
foo
.
html
"
;
let
spec2
=
"
http
:
/
/
bar
.
com
/
bar
.
html
"
;
let
uri1
=
NetUtil
.
newURI
(
spec1
)
;
let
uri2
=
NetUtil
.
newURI
(
spec2
)
;
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
Ci
.
nsICookieService
.
BEHAVIOR_ACCEPT
)
;
let
channel1
=
createChannel
(
uri1
)
;
let
channel2
=
createChannel
(
uri2
)
;
await
do_set_cookies
(
uri1
channel1
true
[
1
2
]
)
;
Services
.
cookies
.
removeAll
(
)
;
await
do_set_cookies
(
uri1
channel2
true
[
1
2
]
)
;
Services
.
cookies
.
removeAll
(
)
;
}
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_FOREIGN
)
;
let
channel1
=
createChannel
(
uri1
)
;
let
channel2
=
createChannel
(
uri2
)
;
await
do_set_cookies
(
uri1
channel1
true
[
0
1
]
)
;
Services
.
cookies
.
removeAll
(
)
;
await
do_set_cookies
(
uri1
channel2
true
[
0
0
]
)
;
Services
.
cookies
.
removeAll
(
)
;
}
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_FOREIGN
)
;
let
channel1
=
createChannel
(
uri1
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
let
channel2
=
createChannel
(
uri2
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
await
do_set_cookies
(
uri1
channel1
true
[
0
1
]
)
;
Services
.
cookies
.
removeAll
(
)
;
await
do_set_cookies
(
uri1
channel2
true
[
0
0
]
)
;
Services
.
cookies
.
removeAll
(
)
;
}
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
Ci
.
nsICookieService
.
BEHAVIOR_ACCEPT
)
;
let
channel1
=
createChannel
(
uri1
)
;
channel1
.
forceAllowThirdPartyCookie
=
true
;
let
channel2
=
createChannel
(
uri2
)
;
channel2
.
forceAllowThirdPartyCookie
=
true
;
await
do_set_cookies
(
uri1
channel1
true
[
1
2
]
)
;
Services
.
cookies
.
removeAll
(
)
;
await
do_set_cookies
(
uri1
channel2
true
[
1
2
]
)
;
Services
.
cookies
.
removeAll
(
)
;
}
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_FOREIGN
)
;
let
channel1
=
createChannel
(
uri1
)
;
channel1
.
forceAllowThirdPartyCookie
=
true
;
let
channel2
=
createChannel
(
uri2
)
;
channel2
.
forceAllowThirdPartyCookie
=
true
;
await
do_set_cookies
(
uri1
channel1
true
[
0
1
]
)
;
Services
.
cookies
.
removeAll
(
)
;
await
do_set_cookies
(
uri1
channel2
true
[
0
0
]
)
;
Services
.
cookies
.
removeAll
(
)
;
}
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
Ci
.
nsICookieService
.
BEHAVIOR_LIMIT_FOREIGN
)
;
let
channel1
=
createChannel
(
uri1
)
;
channel1
.
forceAllowThirdPartyCookie
=
true
;
let
channel2
=
createChannel
(
uri2
)
;
channel2
.
forceAllowThirdPartyCookie
=
true
;
await
do_set_cookies
(
uri1
channel1
true
[
0
1
]
)
;
Services
.
cookies
.
removeAll
(
)
;
await
do_set_cookies
(
uri1
channel2
true
[
0
0
]
)
;
Services
.
cookies
.
removeAll
(
)
;
do_set_single_http_cookie
(
uri1
channel1
1
)
;
await
do_set_cookies
(
uri1
channel2
true
[
1
2
]
)
;
Services
.
cookies
.
removeAll
(
)
;
}
Services
.
prefs
.
clearUserPref
(
"
dom
.
security
.
https_first
"
)
;
}
)
;
