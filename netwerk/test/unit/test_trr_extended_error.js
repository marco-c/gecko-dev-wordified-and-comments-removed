"
use
strict
"
;
const
dns
=
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
;
trr_test_setup
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
trr_clear_prefs
(
)
;
}
)
;
function
makeChan
(
url
)
{
let
chan
=
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
return
chan
;
}
let
processId
;
function
channelOpenPromise
(
chan
)
{
return
new
Promise
(
resolve
=
>
{
function
finish
(
req
buffer
)
{
resolve
(
[
req
buffer
]
)
;
}
chan
.
asyncOpen
(
new
ChannelListener
(
finish
)
)
;
}
)
;
}
let
trrServer
;
add_task
(
async
function
setup
(
)
{
trrServer
=
new
TRRServer
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
trrServer
.
stop
(
)
;
}
)
;
await
trrServer
.
start
(
)
;
dump
(
port
=
{
trrServer
.
port
}
\
n
)
;
let
chan
=
makeChan
(
https
:
/
/
localhost
:
{
trrServer
.
port
}
/
test
?
bla
=
some
)
;
let
[
resp
]
=
await
channelOpenPromise
(
chan
)
;
equal
(
resp
"
<
h1
>
404
Path
not
found
:
/
test
?
bla
=
some
<
/
h1
>
"
)
;
dns
.
clearCache
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
2
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
trrServer
.
port
}
/
dns
-
query
)
;
}
)
;
add_task
(
async
function
test_extended_error_bogus
(
)
{
await
trrServer
.
registerDoHAnswers
(
"
something
.
foo
"
"
A
"
{
answers
:
[
{
name
:
"
something
.
foo
"
ttl
:
55
type
:
"
A
"
flush
:
false
data
:
"
1
.
2
.
3
.
4
"
}
]
}
)
;
await
new
TRRDNSListener
(
"
something
.
foo
"
{
expectedAnswer
:
"
1
.
2
.
3
.
4
"
}
)
;
await
trrServer
.
registerDoHAnswers
(
"
a
.
foo
"
"
A
"
{
answers
:
[
]
additionals
:
[
{
name
:
"
.
"
type
:
"
OPT
"
class
:
"
IN
"
options
:
[
{
code
:
"
EDNS_ERROR
"
extended_error
:
6
text
:
"
DNSSec
bogus
"
}
]
}
]
flags
:
2
}
)
;
let
[
inStatus
]
=
await
new
TRRDNSListener
(
"
a
.
foo
"
{
expectedSuccess
:
false
}
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
)
;
add_task
(
async
function
test_extended_error_filtered
(
)
{
await
trrServer
.
registerDoHAnswers
(
"
b
.
foo
"
"
A
"
{
answers
:
[
]
additionals
:
[
{
name
:
"
.
"
type
:
"
OPT
"
class
:
"
IN
"
options
:
[
{
code
:
"
EDNS_ERROR
"
extended_error
:
17
text
:
"
Filtered
"
}
]
}
]
}
)
;
let
[
inStatus
]
=
await
new
TRRDNSListener
(
"
b
.
foo
"
{
expectedSuccess
:
false
}
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
)
;
add_task
(
async
function
test_extended_error_not_ready
(
)
{
await
trrServer
.
registerDoHAnswers
(
"
c
.
foo
"
"
A
"
{
answers
:
[
]
additionals
:
[
{
name
:
"
.
"
type
:
"
OPT
"
class
:
"
IN
"
options
:
[
{
code
:
"
EDNS_ERROR
"
extended_error
:
14
text
:
"
Not
ready
"
}
]
}
]
}
)
;
await
new
TRRDNSListener
(
"
c
.
foo
"
{
expectedAnswer
:
"
127
.
0
.
0
.
1
"
}
)
;
}
)
;
add_task
(
async
function
ipv6_answer_and_delayed_ipv4_error
(
)
{
await
trrServer
.
registerDoHAnswers
(
"
delay1
.
com
"
"
AAAA
"
{
answers
:
[
{
name
:
"
delay1
.
com
"
ttl
:
55
type
:
"
AAAA
"
flush
:
false
data
:
"
:
:
a
:
b
:
c
:
d
"
}
]
}
)
;
await
trrServer
.
registerDoHAnswers
(
"
delay1
.
com
"
"
A
"
{
answers
:
[
]
additionals
:
[
{
name
:
"
.
"
type
:
"
OPT
"
class
:
"
IN
"
options
:
[
{
code
:
"
EDNS_ERROR
"
extended_error
:
17
text
:
"
Filtered
"
}
]
}
]
delay
:
200
}
)
;
await
new
TRRDNSListener
(
"
delay1
.
com
"
{
expectedAnswer
:
"
:
:
a
:
b
:
c
:
d
"
}
)
;
}
)
;
add_task
(
async
function
ipv4_error_and_delayed_ipv6_answer
(
)
{
await
trrServer
.
registerDoHAnswers
(
"
delay2
.
com
"
"
AAAA
"
{
answers
:
[
{
name
:
"
delay2
.
com
"
ttl
:
55
type
:
"
AAAA
"
flush
:
false
data
:
"
:
:
a
:
b
:
c
:
d
"
}
]
delay
:
200
}
)
;
await
trrServer
.
registerDoHAnswers
(
"
delay2
.
com
"
"
A
"
{
answers
:
[
]
additionals
:
[
{
name
:
"
.
"
type
:
"
OPT
"
class
:
"
IN
"
options
:
[
{
code
:
"
EDNS_ERROR
"
extended_error
:
17
text
:
"
Filtered
"
}
]
}
]
}
)
;
await
new
TRRDNSListener
(
"
delay2
.
com
"
{
expectedAnswer
:
"
:
:
a
:
b
:
c
:
d
"
}
)
;
}
)
;
add_task
(
async
function
ipv4_answer_and_delayed_ipv6_error
(
)
{
await
trrServer
.
registerDoHAnswers
(
"
delay3
.
com
"
"
A
"
{
answers
:
[
{
name
:
"
delay3
.
com
"
ttl
:
55
type
:
"
A
"
flush
:
false
data
:
"
1
.
2
.
3
.
4
"
}
]
}
)
;
await
trrServer
.
registerDoHAnswers
(
"
delay3
.
com
"
"
AAAA
"
{
answers
:
[
]
additionals
:
[
{
name
:
"
.
"
type
:
"
OPT
"
class
:
"
IN
"
options
:
[
{
code
:
"
EDNS_ERROR
"
extended_error
:
17
text
:
"
Filtered
"
}
]
}
]
delay
:
200
}
)
;
await
new
TRRDNSListener
(
"
delay3
.
com
"
{
expectedAnswer
:
"
1
.
2
.
3
.
4
"
}
)
;
}
)
;
add_task
(
async
function
delayed_ipv4_answer_and_ipv6_error
(
)
{
await
trrServer
.
registerDoHAnswers
(
"
delay4
.
com
"
"
A
"
{
answers
:
[
{
name
:
"
delay4
.
com
"
ttl
:
55
type
:
"
A
"
flush
:
false
data
:
"
1
.
2
.
3
.
4
"
}
]
delay
:
200
}
)
;
await
trrServer
.
registerDoHAnswers
(
"
delay4
.
com
"
"
AAAA
"
{
answers
:
[
]
additionals
:
[
{
name
:
"
.
"
type
:
"
OPT
"
class
:
"
IN
"
options
:
[
{
code
:
"
EDNS_ERROR
"
extended_error
:
17
text
:
"
Filtered
"
}
]
}
]
}
)
;
await
new
TRRDNSListener
(
"
delay4
.
com
"
{
expectedAnswer
:
"
1
.
2
.
3
.
4
"
}
)
;
}
)
;
add_task
(
async
function
test_only_ipv4_extended_error
(
)
{
Services
.
prefs
.
setBoolPref
(
"
network
.
dns
.
disableIPv6
"
true
)
;
await
trrServer
.
registerDoHAnswers
(
"
only
.
com
"
"
A
"
{
answers
:
[
]
additionals
:
[
{
name
:
"
.
"
type
:
"
OPT
"
class
:
"
IN
"
options
:
[
{
code
:
"
EDNS_ERROR
"
extended_error
:
17
text
:
"
Filtered
"
}
]
}
]
}
)
;
let
[
inStatus
]
=
await
new
TRRDNSListener
(
"
only
.
com
"
{
expectedSuccess
:
false
}
)
;
Assert
.
ok
(
!
Components
.
isSuccessCode
(
inStatus
)
{
inStatus
}
should
be
an
error
code
)
;
}
)
;
