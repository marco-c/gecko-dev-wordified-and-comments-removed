const
{
NetUtil
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
var
h2Port
;
var
prefs
;
var
spdypref
;
var
http2pref
;
var
extpref
;
function
run_test
(
)
{
var
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
h2Port
=
env
.
get
(
"
MOZHTTP2_PORT
"
)
;
Assert
.
notEqual
(
h2Port
null
)
;
Assert
.
notEqual
(
h2Port
"
"
)
;
do_get_profile
(
)
;
prefs
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefBranch
)
;
spdypref
=
prefs
.
getBoolPref
(
"
network
.
http
.
spdy
.
enabled
"
)
;
http2pref
=
prefs
.
getBoolPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
)
;
extpref
=
prefs
.
getBoolPref
(
"
network
.
http
.
originextension
"
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
"
true
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
true
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
originextension
"
true
)
;
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
foo
.
example
.
com
alt1
.
example
.
com
"
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
CA
.
cert
.
der
"
"
CTu
u
u
"
)
;
doTest1
(
)
;
}
function
resetPrefs
(
)
{
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
"
spdypref
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
http2pref
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
originextension
"
extpref
)
;
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
}
function
readFile
(
file
)
{
let
fstream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileInputStream
)
;
fstream
.
init
(
file
-
1
0
0
)
;
let
data
=
NetUtil
.
readInputStreamToString
(
fstream
fstream
.
available
(
)
)
;
fstream
.
close
(
)
;
return
data
;
}
function
addCertFromFile
(
certdb
filename
trustString
)
{
let
certFile
=
do_get_file
(
filename
false
)
;
let
der
=
readFile
(
certFile
)
;
certdb
.
addCert
(
der
trustString
)
;
}
function
makeChan
(
origin
)
{
return
NetUtil
.
newChannel
(
{
uri
:
origin
loadUsingSystemPrincipal
:
true
}
)
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
}
var
nextTest
;
var
origin
;
var
nextPortExpectedToBeSame
=
false
;
var
currentPort
=
0
;
var
forceReload
=
false
;
var
anonymous
=
false
;
var
Listener
=
function
(
)
{
}
;
Listener
.
prototype
.
clientPort
=
0
;
Listener
.
prototype
=
{
onStartRequest
:
function
testOnStartRequest
(
request
)
{
Assert
.
ok
(
request
instanceof
Ci
.
nsIHttpChannel
)
;
if
(
!
Components
.
isSuccessCode
(
request
.
status
)
)
{
do_throw
(
"
Channel
should
have
a
success
code
!
(
"
+
request
.
status
+
"
)
"
)
;
}
Assert
.
equal
(
request
.
responseStatus
200
)
;
this
.
clientPort
=
parseInt
(
request
.
getResponseHeader
(
"
x
-
client
-
port
"
)
)
;
}
onDataAvailable
:
function
testOnDataAvailable
(
request
stream
off
cnt
)
{
read_stream
(
stream
cnt
)
;
}
onStopRequest
:
function
testOnStopRequest
(
request
status
)
{
Assert
.
ok
(
Components
.
isSuccessCode
(
status
)
)
;
if
(
nextPortExpectedToBeSame
)
{
Assert
.
equal
(
currentPort
this
.
clientPort
)
;
}
else
{
Assert
.
notEqual
(
currentPort
this
.
clientPort
)
;
}
currentPort
=
this
.
clientPort
;
nextTest
(
)
;
do_test_finished
(
)
;
}
}
;
function
testsDone
(
)
{
dump
(
"
testsDone
\
n
"
)
;
resetPrefs
(
)
;
}
function
doTest
(
)
{
dump
(
"
execute
doTest
"
+
origin
+
"
\
n
"
)
;
var
loadFlags
=
Ci
.
nsIChannel
.
LOAD_INITIAL_DOCUMENT_URI
;
if
(
anonymous
)
{
loadFlags
|
=
Ci
.
nsIRequest
.
LOAD_ANONYMOUS
;
}
anonymous
=
false
;
if
(
forceReload
)
{
loadFlags
|
=
Ci
.
nsIRequest
.
LOAD_FRESH_CONNECTION
;
}
forceReload
=
false
;
var
chan
=
makeChan
(
origin
)
;
chan
.
loadFlags
=
loadFlags
;
var
listener
=
new
Listener
(
)
;
chan
.
asyncOpen
(
listener
)
;
}
function
doTest1
(
)
{
dump
(
"
doTest1
(
)
\
n
"
)
;
origin
=
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
origin
-
1
"
;
nextTest
=
doTest2
;
nextPortExpectedToBeSame
=
false
;
do_test_pending
(
)
;
doTest
(
)
;
}
function
doTest2
(
)
{
dump
(
"
doTest2
(
)
\
n
"
)
;
origin
=
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
origin
-
2
"
;
nextTest
=
doTest3
;
nextPortExpectedToBeSame
=
true
;
anonymous
=
true
;
do_test_pending
(
)
;
doTest
(
)
;
}
function
doTest3
(
)
{
dump
(
"
doTest3
(
)
\
n
"
)
;
origin
=
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
origin
-
3
"
;
nextTest
=
doTest4
;
nextPortExpectedToBeSame
=
false
;
forceReload
=
true
;
anonymous
=
true
;
do_test_pending
(
)
;
doTest
(
)
;
}
function
doTest4
(
)
{
dump
(
"
doTest4
(
)
\
n
"
)
;
origin
=
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
origin
-
4
"
;
nextTest
=
testsDone
;
nextPortExpectedToBeSame
=
true
;
do_test_pending
(
)
;
doTest
(
)
;
}
