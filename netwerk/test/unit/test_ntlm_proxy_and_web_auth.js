Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
URL
"
function
(
)
{
return
"
http
:
/
/
localhost
:
"
+
httpserver
.
identity
.
primaryPort
;
}
)
;
const
nsIAuthPrompt2
=
Components
.
interfaces
.
nsIAuthPrompt2
;
const
nsIAuthInformation
=
Components
.
interfaces
.
nsIAuthInformation
;
function
AuthPrompt
(
)
{
}
AuthPrompt
.
prototype
=
{
user
:
"
guest
"
pass
:
"
guest
"
QueryInterface
:
function
authprompt_qi
(
iid
)
{
if
(
iid
.
equals
(
Components
.
interfaces
.
nsISupports
)
|
|
iid
.
equals
(
Components
.
interfaces
.
nsIAuthPrompt2
)
)
return
this
;
throw
Components
.
results
.
NS_ERROR_NO_INTERFACE
;
}
promptAuth
:
function
ap_promptAuth
(
channel
level
authInfo
)
{
authInfo
.
username
=
this
.
user
;
authInfo
.
password
=
this
.
pass
;
return
true
;
}
asyncPromptAuth
:
function
ap_async
(
chan
cb
ctx
lvl
info
)
{
throw
Components
.
results
.
NS_ERROR_NOT_IMPLEMENTED
;
}
}
;
function
Requestor
(
)
{
}
Requestor
.
prototype
=
{
QueryInterface
:
function
requestor_qi
(
iid
)
{
if
(
iid
.
equals
(
Components
.
interfaces
.
nsISupports
)
|
|
iid
.
equals
(
Components
.
interfaces
.
nsIInterfaceRequestor
)
)
return
this
;
throw
Components
.
results
.
NS_ERROR_NO_INTERFACE
;
}
getInterface
:
function
requestor_gi
(
iid
)
{
if
(
iid
.
equals
(
Components
.
interfaces
.
nsIAuthPrompt2
)
)
{
if
(
!
this
.
prompt
)
this
.
prompt
=
new
AuthPrompt
(
)
;
return
this
.
prompt
;
}
throw
Components
.
results
.
NS_ERROR_NO_INTERFACE
;
}
prompt
:
null
}
;
function
makeChan
(
url
loadingUrl
)
{
var
ios
=
Cc
[
"
mozilla
.
org
/
network
/
io
-
service
;
1
"
]
.
getService
(
Ci
.
nsIIOService
)
;
var
ssm
=
Cc
[
"
mozilla
.
org
/
scriptsecuritymanager
;
1
"
]
.
getService
(
Ci
.
nsIScriptSecurityManager
)
;
var
principal
=
ssm
.
createCodebasePrincipal
(
ios
.
newURI
(
loadingUrl
null
null
)
{
}
)
;
return
NetUtil
.
newChannel
(
{
uri
:
url
loadingPrincipal
:
principal
securityFlags
:
Ci
.
nsILoadInfo
.
SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL
contentPolicyType
:
Components
.
interfaces
.
nsIContentPolicy
.
TYPE_OTHER
}
)
;
}
function
TestListener
(
)
{
}
TestListener
.
prototype
.
onStartRequest
=
function
(
request
context
)
{
if
(
!
(
request
instanceof
Components
.
interfaces
.
nsIHttpChannel
)
)
do_print
(
"
Expecting
an
HTTP
channel
"
)
;
Assert
.
equal
(
expectedResponse
request
.
responseStatus
"
HTTP
Status
code
"
)
;
}
TestListener
.
prototype
.
onStopRequest
=
function
(
request
context
status
)
{
Assert
.
equal
(
expectedRequests
requestsMade
"
Number
of
requests
made
"
)
;
if
(
current_test
<
(
tests
.
length
-
1
)
)
{
current_test
+
+
;
tests
[
current_test
]
(
)
;
}
else
{
do_test_pending
(
)
;
httpserver
.
stop
(
do_test_finished
)
;
}
do_test_finished
(
)
;
}
TestListener
.
prototype
.
onDataAvaiable
=
function
(
request
context
stream
offset
count
)
{
var
data
=
read_stream
(
stream
count
)
;
}
const
NTLM_TYPE1_PREFIX
=
"
NTLM
TlRMTVNTUAABAAAA
"
;
const
NTLM_TYPE2_PREFIX
=
"
NTLM
TlRMTVNTUAACAAAA
"
;
const
NTLM_TYPE3_PREFIX
=
"
NTLM
TlRMTVNTUAADAAAA
"
;
const
NTLM_PREFIX_LEN
=
21
;
const
NTLM_CHALLENGE
=
NTLM_TYPE2_PREFIX
+
"
DAAMADAAAAABAoEAASNFZ4mrze8AAAAAAAAAAGIAYgA8AAAAR
"
+
"
ABPAE0AQQBJAE4AAgAMAEQATwBNAEEASQBOAAEADABTAEUAUg
"
+
"
BWAEUAUgAEABQAZABvAG0AYQBpAG4ALgBjAG8AbQADACIAcwB
"
+
"
lAHIAdgBlAHIALgBkAG8AbQBhAGkAbgAuAGMAbwBtAAAAAAA
=
"
;
const
PROXY_CHALLENGE
=
NTLM_TYPE2_PREFIX
+
"
DgAOADgAAAAFgooCqLNOPe2aZOAAAAAAAAAAAFAAUABGAAAA
"
+
"
BgEAAAAAAA9HAFcATAAtAE0ATwBaAAIADgBHAFcATAAtAE0A
"
+
"
TwBaAAEADgBHAFcATAAtAE0ATwBaAAQAAgAAAAMAEgBsAG8A
"
+
"
YwBhAGwAaABvAHMAdAAHAAgAOKEwGEZL0gEAAAAA
"
;
function
authHandler
(
metadata
response
)
{
switch
(
requestsMade
)
{
case
0
:
response
.
setStatusLine
(
metadata
.
httpVersion
407
"
Unauthorized
"
)
;
response
.
setHeader
(
"
Proxy
-
Authenticate
"
"
NTLM
"
false
)
;
break
;
case
1
:
var
authorization
=
metadata
.
getHeader
(
"
Proxy
-
Authorization
"
)
;
var
authPrefix
=
authorization
.
substring
(
0
NTLM_PREFIX_LEN
)
;
Assert
.
equal
(
NTLM_TYPE1_PREFIX
authPrefix
"
Expecting
a
Type
1
message
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
407
"
Unauthorized
"
)
;
response
.
setHeader
(
"
Proxy
-
Authenticate
"
PROXY_CHALLENGE
false
)
;
break
;
case
2
:
var
authorization
=
metadata
.
getHeader
(
"
Proxy
-
Authorization
"
)
;
var
authPrefix
=
authorization
.
substring
(
0
NTLM_PREFIX_LEN
)
;
Assert
.
equal
(
NTLM_TYPE3_PREFIX
authPrefix
"
Expecting
a
Type
3
message
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
401
"
Unauthorized
"
)
;
response
.
setHeader
(
"
WWW
-
Authenticate
"
"
NTLM
"
false
)
;
break
;
case
3
:
var
authorization
=
metadata
.
getHeader
(
"
Authorization
"
)
;
var
authPrefix
=
authorization
.
substring
(
0
NTLM_PREFIX_LEN
)
;
Assert
.
equal
(
NTLM_TYPE1_PREFIX
authPrefix
"
Expecting
a
Type
1
message
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
401
"
Unauthorized
"
)
;
response
.
setHeader
(
"
WWW
-
Authenticate
"
NTLM_CHALLENGE
false
)
;
break
;
case
4
:
var
authorization
=
metadata
.
getHeader
(
"
Authorization
"
)
;
var
authPrefix
=
authorization
.
substring
(
0
NTLM_PREFIX_LEN
)
;
Assert
.
equal
(
NTLM_TYPE3_PREFIX
authPrefix
"
Expecting
a
Type
3
message
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
Successful
"
)
;
break
;
default
:
var
authorization
=
metadata
.
getHeader
(
"
Authorization
"
)
;
var
authorization
=
metadata
.
getHeader
(
"
Proxy
-
Authorization
"
)
;
Assert
.
isnull
(
authorization
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
Successful
"
)
;
}
requestsMade
+
+
;
}
function
authHandlerInvalidProxyPassword
(
metadata
response
)
{
switch
(
requestsMade
)
{
case
0
:
response
.
setStatusLine
(
metadata
.
httpVersion
407
"
Unauthorized
"
)
;
response
.
setHeader
(
"
Proxy
-
Authenticate
"
"
NTLM
"
false
)
;
break
;
case
1
:
var
authorization
=
metadata
.
getHeader
(
"
Proxy
-
Authorization
"
)
;
var
authPrefix
=
authorization
.
substring
(
0
NTLM_PREFIX_LEN
)
;
Assert
.
equal
(
NTLM_TYPE1_PREFIX
authPrefix
"
Expecting
a
Type
1
message
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
407
"
Unauthorized
"
)
;
response
.
setHeader
(
"
Proxy
-
Authenticate
"
PROXY_CHALLENGE
false
)
;
break
;
case
2
:
var
authorization
=
metadata
.
getHeader
(
"
Proxy
-
Authorization
"
)
;
var
authPrefix
=
authorization
.
substring
(
0
NTLM_PREFIX_LEN
)
;
Assert
.
equal
(
NTLM_TYPE3_PREFIX
authPrefix
"
Expecting
a
Type
3
message
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
407
"
Unauthorized
"
)
;
response
.
setHeader
(
"
Proxy
-
Authenticate
"
"
NTLM
"
false
)
;
break
;
default
:
response
.
setStatusLine
(
metadata
.
httpVersion
407
"
Unauthorized
"
)
;
}
requestsMade
+
+
;
}
function
authHandlerInvalidWebPassword
(
metadata
response
)
{
switch
(
requestsMade
)
{
case
0
:
response
.
setStatusLine
(
metadata
.
httpVersion
407
"
Unauthorized
"
)
;
response
.
setHeader
(
"
Proxy
-
Authenticate
"
"
NTLM
"
false
)
;
break
;
case
1
:
var
authorization
=
metadata
.
getHeader
(
"
Proxy
-
Authorization
"
)
;
var
authPrefix
=
authorization
.
substring
(
0
NTLM_PREFIX_LEN
)
;
Assert
.
equal
(
NTLM_TYPE1_PREFIX
authPrefix
"
Expecting
a
Type
1
message
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
407
"
Unauthorized
"
)
;
response
.
setHeader
(
"
Proxy
-
Authenticate
"
NTLM_CHALLENGE
false
)
;
break
;
case
2
:
var
authorization
=
metadata
.
getHeader
(
"
Proxy
-
Authorization
"
)
;
var
authPrefix
=
authorization
.
substring
(
0
NTLM_PREFIX_LEN
)
;
Assert
.
equal
(
NTLM_TYPE3_PREFIX
authPrefix
"
Expecting
a
Type
3
message
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
401
"
Unauthorized
"
)
;
response
.
setHeader
(
"
WWW
-
Authenticate
"
"
NTLM
"
false
)
;
break
;
case
3
:
var
authorization
=
metadata
.
getHeader
(
"
Authorization
"
)
;
var
authPrefix
=
authorization
.
substring
(
0
NTLM_PREFIX_LEN
)
;
Assert
.
equal
(
NTLM_TYPE1_PREFIX
authPrefix
"
Expecting
a
Type
1
message
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
401
"
Unauthorized
"
)
;
response
.
setHeader
(
"
WWW
-
Authenticate
"
NTLM_CHALLENGE
false
)
;
break
;
case
4
:
var
authorization
=
metadata
.
getHeader
(
"
Authorization
"
)
;
var
authPrefix
=
authorization
.
substring
(
0
NTLM_PREFIX_LEN
)
;
Assert
.
equal
(
NTLM_TYPE3_PREFIX
authPrefix
"
Expecting
a
Type
1
message
"
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
401
"
Unauthorized
"
)
;
break
;
default
:
do_print
(
"
ERROR
:
NTLM
Auth
failed
connection
should
not
be
reused
"
)
;
Assert
.
fail
(
)
;
}
requestsMade
+
+
;
}
var
tests
=
[
test_happy_path
test_bad_proxy_pass_stage01
test_bad_proxy_pass_stage02
test_bad_web_pass_stage01
test_bad_web_pass_stage02
]
;
var
current_test
=
0
;
var
httpserver
=
null
;
function
run_test
(
)
{
httpserver
=
new
HttpServer
(
)
httpserver
.
start
(
-
1
)
;
const
prefs
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefBranch
)
;
prefs
.
setCharPref
(
"
network
.
proxy
.
http
"
"
localhost
"
)
;
prefs
.
setIntPref
(
"
network
.
proxy
.
http_port
"
httpserver
.
identity
.
primaryPort
)
;
prefs
.
setCharPref
(
"
network
.
proxy
.
no_proxies_on
"
"
"
)
;
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
1
)
;
tests
[
0
]
(
)
;
}
var
expectedRequests
=
0
;
var
requestsMade
=
0
;
var
expectedResponse
=
0
;
function
setupTest
(
path
handler
requests
response
clearCache
)
{
requestsMade
=
0
;
expectedRequests
=
requests
;
expectedResponse
=
response
;
if
(
clearCache
)
{
do_print
(
"
Clearing
auth
cache
"
)
;
Cc
[
"
mozilla
.
org
/
network
/
http
-
auth
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIHttpAuthManager
)
.
clearAll
(
)
;
}
var
chan
=
makeChan
(
URL
+
path
URL
)
;
httpserver
.
registerPathHandler
(
path
handler
)
;
chan
.
notificationCallbacks
=
new
Requestor
(
)
;
chan
.
asyncOpen2
(
new
TestListener
(
)
)
;
return
chan
;
}
function
test_happy_path
(
)
{
do_print
(
"
RUNNING
TEST
:
test_happy_path
"
)
;
var
chan
=
setupTest
(
"
/
auth
"
authHandler
5
200
1
)
;
do_test_pending
(
)
;
}
function
test_bad_proxy_pass_stage01
(
)
{
do_print
(
"
RUNNING
TEST
:
test_bad_proxy_pass_stage01
"
)
;
var
chan
=
setupTest
(
"
/
auth
"
authHandlerInvalidProxyPassword
4
407
1
)
;
do_test_pending
(
)
;
}
function
test_bad_proxy_pass_stage02
(
)
{
do_print
(
"
RUNNING
TEST
:
test_bad_proxy_pass_stage02
"
)
;
var
chan
=
setupTest
(
"
/
auth
"
authHandler
5
200
0
)
;
do_test_pending
(
)
;
}
function
test_bad_web_pass_stage01
(
)
{
do_print
(
"
RUNNING
TEST
:
test_bad_web_pass_stage01
"
)
;
var
chan
=
setupTest
(
"
/
auth
"
authHandlerInvalidWebPassword
5
401
1
)
;
do_test_pending
(
)
;
}
function
test_bad_web_pass_stage02
(
)
{
do_print
(
"
RUNNING
TEST
:
test_bad_web_pass_stage02
"
)
;
var
chan
=
setupTest
(
"
/
auth
"
authHandler
5
200
0
)
;
do_test_pending
(
)
;
}
