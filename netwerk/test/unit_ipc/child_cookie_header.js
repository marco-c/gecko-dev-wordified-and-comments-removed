"
use
strict
"
;
const
{
NetUtil
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
function
inChildProcess
(
)
{
return
Cc
[
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
]
.
getService
(
Ci
.
nsIXULRuntime
)
.
processType
!
=
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
;
}
let
URL
=
null
;
function
makeChan
(
)
{
return
NetUtil
.
newChannel
(
{
uri
:
URL
loadUsingSystemPrincipal
:
true
}
)
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
}
function
OpenChannelPromise
(
aChannel
aClosure
)
{
return
new
Promise
(
resolve
=
>
{
function
processResponse
(
request
buffer
context
)
{
aClosure
(
request
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
buffer
context
)
;
resolve
(
)
;
}
aChannel
.
asyncOpen
(
new
ChannelListener
(
processResponse
null
)
)
;
}
)
;
}
add_task
(
async
function
setup
(
)
{
ok
(
inChildProcess
(
)
"
Sanity
check
.
This
should
run
in
the
child
process
"
)
;
do_send_remote_message
(
"
start
-
test
"
)
;
URL
=
await
do_await_remote_message
(
"
start
-
test
-
done
"
)
;
}
)
;
add_task
(
async
function
test1
(
)
{
let
chan
=
makeChan
(
)
;
await
OpenChannelPromise
(
chan
(
request
buffer
)
=
>
{
equal
(
buffer
"
response
"
)
;
Assert
.
throws
(
(
)
=
>
request
.
getRequestHeader
(
"
Cookie
"
)
/
NS_ERROR_NOT_AVAILABLE
/
"
Cookie
header
should
not
be
visible
on
request
in
the
child
"
)
;
Assert
.
throws
(
(
)
=
>
request
.
getResponseHeader
(
"
Set
-
Cookie
"
)
/
NS_ERROR_NOT_AVAILABLE
/
"
Cookie
header
should
not
be
visible
on
response
in
the
child
"
)
;
}
)
;
do_send_remote_message
(
"
check
-
cookie
-
count
"
)
;
let
count
=
await
do_await_remote_message
(
"
check
-
cookie
-
count
-
done
"
)
;
equal
(
count
1
)
;
}
)
;
add_task
(
async
function
test2
(
)
{
do_send_remote_message
(
"
set
-
cookie
"
)
;
await
do_await_remote_message
(
'
set
-
cookie
-
done
'
)
;
let
chan
=
makeChan
(
)
;
await
OpenChannelPromise
(
chan
(
request
buffer
)
=
>
{
equal
(
buffer
"
response
"
)
;
Assert
.
throws
(
(
)
=
>
request
.
getRequestHeader
(
"
Cookie
"
)
/
NS_ERROR_NOT_AVAILABLE
/
"
Cookie
header
should
not
be
visible
on
request
in
the
child
"
)
;
Assert
.
throws
(
(
)
=
>
request
.
getResponseHeader
(
"
Set
-
Cookie
"
)
/
NS_ERROR_NOT_AVAILABLE
/
"
Cookie
header
should
not
be
visible
on
response
in
the
child
"
)
;
}
)
;
do_send_remote_message
(
"
second
-
check
-
cookie
-
count
"
)
;
let
count
=
await
do_await_remote_message
(
"
second
-
check
-
cookie
-
count
-
done
"
)
;
equal
(
count
2
)
;
}
)
;
