"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
let
gData
=
null
;
function
observer
(
subject
topic
state
)
{
info
(
"
observer
called
with
"
+
topic
)
;
let
chan
=
subject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
equal
(
chan
.
channelId
gData
.
channelId
)
;
equal
(
chan
.
hasCrossOriginOpenerPolicyMismatch
(
)
gData
.
expectedResult
check
for
mismatch
testing
{
gData
.
policyA
}
{
gData
.
originA
}
{
gData
.
policyB
}
{
gData
.
originB
}
{
gData
.
expectedResult
}
)
;
}
function
waitForTest
(
)
{
do_await_remote_message
(
"
prepare
-
test
"
)
.
then
(
(
data
)
=
>
{
info
(
prepare
test
:
{
data
}
)
;
gData
=
data
;
do_send_remote_message
(
"
test
-
ready
"
)
;
if
(
!
data
)
{
info
(
"
parent
test
finishing
"
)
;
return
;
}
waitForTest
(
)
;
}
)
;
}
function
run_test
(
)
{
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
examine
-
response
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
foo
.
example
.
com
example
.
com
example
.
org
"
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
examine
-
response
"
)
;
}
)
;
waitForTest
(
)
;
run_test_in_child
(
"
.
.
/
unit
/
test_crossOriginOpenerPolicy
.
js
"
)
;
}
