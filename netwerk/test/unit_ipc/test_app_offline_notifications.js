Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
var
test_index
=
0
;
var
APP_ID
=
42
;
var
events_observed_no
=
0
;
function
set_app_offline
(
appId
offline
)
{
let
ioservice
=
Cc
[
'
mozilla
.
org
/
network
/
io
-
service
;
1
'
]
.
getService
(
Ci
.
nsIIOService
)
;
ioservice
.
setAppOffline
(
appId
offline
)
;
}
function
is_app_offline
(
appId
)
{
let
ioservice
=
Cc
[
'
mozilla
.
org
/
network
/
io
-
service
;
1
'
]
.
getService
(
Ci
.
nsIIOService
)
;
return
ioservice
.
isAppOffline
(
appId
)
;
}
let
expected_offline
=
[
false
true
true
false
false
]
;
let
callbacks
=
[
test1
test2
test3
test4
finished
]
;
function
observer
(
aSubject
aTopic
aData
)
{
events_observed_no
+
+
;
let
info
=
aSubject
.
QueryInterface
(
Ci
.
nsIAppOfflineInfo
)
;
dump
(
"
ParentObserver
-
subject
:
{
"
+
aSubject
.
appId
+
"
"
+
aSubject
.
mode
+
"
}
"
+
"
topic
:
"
+
aTopic
+
"
\
n
"
)
;
do_check_eq
(
is_app_offline
(
APP_ID
)
expected_offline
[
test_index
]
)
;
do_execute_soon
(
callbacks
[
test_index
]
)
;
}
function
run_test
(
)
{
Services
.
obs
.
addObserver
(
observer
"
network
:
app
-
offline
-
status
-
changed
"
false
)
;
test_index
=
0
;
do_check_eq
(
is_app_offline
(
APP_ID
)
expected_offline
[
test_index
]
)
run_test_in_child
(
"
child_app_offline_notifications
.
js
"
test0
)
;
}
function
test0
(
)
{
dump
(
"
parent
:
RUNNING
:
test0
\
n
"
)
;
test_index
=
0
;
sendCommand
(
'
check_status
(
'
+
APP_ID
+
'
'
+
Ci
.
nsIAppOfflineInfo
.
ONLINE
+
'
)
;
\
n
'
test1
)
;
}
function
test1
(
)
{
dump
(
"
parent
:
RUNNING
:
test1
\
n
"
)
;
test_index
=
1
;
set_app_offline
(
APP_ID
Ci
.
nsIAppOfflineInfo
.
OFFLINE
)
;
}
function
test2
(
)
{
dump
(
"
parent
:
RUNNING
:
test2
\
n
"
)
;
test_index
=
2
;
sendCommand
(
'
check_notification_and_status
(
'
+
APP_ID
+
'
'
+
Ci
.
nsIAppOfflineInfo
.
OFFLINE
+
'
)
;
\
n
'
test3
)
;
}
function
test3
(
)
{
dump
(
"
parent
:
RUNNING
:
test3
\
n
"
)
;
test_index
=
3
;
set_app_offline
(
APP_ID
Ci
.
nsIAppOfflineInfo
.
ONLINE
)
;
}
function
test4
(
)
{
dump
(
"
parent
:
RUNNING
:
test4
\
n
"
)
;
test_index
=
4
;
sendCommand
(
'
check_notification_and_status
(
'
+
APP_ID
+
'
'
+
Ci
.
nsIAppOfflineInfo
.
ONLINE
+
'
)
;
\
n
'
function
(
)
{
sendCommand
(
'
finished
(
)
;
\
n
'
finished
)
;
}
)
;
}
function
finished
(
)
{
dump
(
"
parent
:
RUNNING
:
finished
\
n
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
network
:
app
-
offline
-
status
-
changed
"
)
;
do_check_eq
(
events_observed_no
2
)
;
do_test_finished
(
)
;
}
