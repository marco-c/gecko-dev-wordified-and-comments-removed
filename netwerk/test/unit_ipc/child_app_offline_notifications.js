Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
function
is_app_offline
(
appId
)
{
let
ioservice
=
Cc
[
'
mozilla
.
org
/
network
/
io
-
service
;
1
'
]
.
getService
(
Ci
.
nsIIOService
)
;
return
ioservice
.
isAppOffline
(
appId
)
;
}
var
events_observed_no
=
0
;
var
info
=
null
;
function
observer
(
aSubject
aTopic
aData
)
{
events_observed_no
+
+
;
info
=
aSubject
.
QueryInterface
(
Ci
.
nsIAppOfflineInfo
)
;
dump
(
"
ChildObserver
-
subject
:
{
"
+
aSubject
.
appId
+
"
"
+
aSubject
.
mode
+
"
}
"
)
;
}
function
run_test
(
)
{
Services
.
obs
.
addObserver
(
observer
"
network
:
app
-
offline
-
status
-
changed
"
false
)
;
}
function
check_status
(
appId
status
)
{
do_check_eq
(
is_app_offline
(
appId
)
status
=
=
Ci
.
nsIAppOfflineInfo
.
OFFLINE
)
;
}
function
check_notification_and_status
(
appId
status
)
{
do_check_eq
(
info
.
appId
appId
)
;
do_check_eq
(
info
.
mode
status
)
;
do_check_eq
(
is_app_offline
(
appId
)
status
=
=
Ci
.
nsIAppOfflineInfo
.
OFFLINE
)
;
}
function
finished
(
)
{
Services
.
obs
.
removeObserver
(
observer
"
network
:
app
-
offline
-
status
-
changed
"
)
;
do_check_eq
(
events_observed_no
2
)
;
}
