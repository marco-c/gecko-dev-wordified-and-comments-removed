"
use
strict
"
;
let
h2Port
;
let
prefs
;
const
dns
=
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
;
function
setup
(
)
{
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
h2Port
=
env
.
get
(
"
MOZHTTP2_PORT
"
)
;
Assert
.
notEqual
(
h2Port
null
)
;
Assert
.
notEqual
(
h2Port
"
"
)
;
do_get_profile
(
)
;
prefs
=
Services
.
prefs
;
prefs
.
setBoolPref
(
"
network
.
security
.
esni
.
enabled
"
false
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
"
true
)
;
prefs
.
setBoolPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
true
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
bootstrapAddr
"
"
127
.
0
.
0
.
1
"
)
;
prefs
.
setBoolPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
true
)
;
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setBoolPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
false
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
confirmationNS
"
"
skip
"
)
;
prefs
.
setBoolPref
(
"
network
.
trr
.
clear
-
cache
-
on
-
pref
-
change
"
false
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
.
.
/
unit
/
http2
-
ca
.
pem
"
"
CTu
u
u
"
)
;
}
setup
(
)
;
registerCleanupFunction
(
(
)
=
>
{
prefs
.
clearUserPref
(
"
network
.
security
.
esni
.
enabled
"
)
;
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
"
)
;
prefs
.
clearUserPref
(
"
network
.
http
.
spdy
.
enabled
.
http2
"
)
;
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
prefs
.
clearUserPref
(
"
network
.
dns
.
native
-
is
-
localhost
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
mode
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
credentials
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
wait
-
for
-
portal
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
allow
-
rfc1918
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
useGET
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
confirmationNS
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
bootstrapAddr
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
temp_blocklist_duration_sec
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
request
-
timeout
"
)
;
prefs
.
clearUserPref
(
"
network
.
trr
.
clear
-
cache
-
on
-
pref
-
change
"
)
;
}
)
;
function
run_test
(
)
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
"
https
:
/
/
foo
.
example
.
com
:
"
+
h2Port
+
"
/
httpssvc
"
)
;
do_await_remote_message
(
"
mode3
-
port
"
)
.
then
(
port
=
>
{
prefs
.
setIntPref
(
"
network
.
trr
.
mode
"
3
)
;
prefs
.
setCharPref
(
"
network
.
trr
.
uri
"
https
:
/
/
foo
.
example
.
com
:
{
port
}
/
dns
-
query
)
;
do_send_remote_message
(
"
mode3
-
port
-
done
"
)
;
}
)
;
do_await_remote_message
(
"
clearCache
"
)
.
then
(
(
)
=
>
{
dns
.
clearCache
(
true
)
;
do_send_remote_message
(
"
clearCache
-
done
"
)
;
}
)
;
run_test_in_child
(
"
.
.
/
unit
/
test_trr_httpssvc
.
js
"
)
;
}
