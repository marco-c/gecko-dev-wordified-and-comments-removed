var
cacheFlushObserver
=
{
observe
(
)
{
cacheFlushObserver
=
null
;
do_send_remote_message
(
"
flushed
"
)
;
}
}
;
var
url
=
null
;
var
cacheFlushObserver2
=
{
observe
(
)
{
cacheFlushObserver2
=
null
;
openAltChannel
(
)
;
}
}
;
function
run_test
(
)
{
do_get_profile
(
)
;
do_await_remote_message
(
"
flush
"
)
.
then
(
(
)
=
>
{
Services
.
cache2
.
QueryInterface
(
Ci
.
nsICacheTesting
)
.
flush
(
cacheFlushObserver
)
;
}
)
;
do_await_remote_message
(
"
done
"
)
.
then
(
(
)
=
>
{
sendCommand
(
"
URL
;
"
load_channel
)
;
}
)
;
run_test_in_child
(
"
.
.
/
unit
/
test_alt
-
data_cross_process
.
js
"
)
;
}
function
load_channel
(
channelUrl
)
{
ok
(
channelUrl
)
;
url
=
channelUrl
;
var
chan
=
make_channel
(
channelUrl
)
;
var
cc
=
chan
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
;
cc
.
preferAlternativeDataType
(
"
text
/
binary
"
"
"
Ci
.
nsICacheInfoChannel
.
ASYNC
)
;
chan
.
asyncOpen
(
new
ChannelListener
(
readTextData
null
)
)
;
}
function
make_channel
(
channelUrl
)
{
return
NetUtil
.
newChannel
(
{
uri
:
channelUrl
loadUsingSystemPrincipal
:
true
}
)
;
}
function
readTextData
(
request
buffer
)
{
var
cc
=
request
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
;
Assert
.
equal
(
cc
.
alternativeDataType
"
"
)
;
Assert
.
equal
(
buffer
"
response
body
"
)
;
var
altContent
=
"
altContentParentGenerated
"
;
executeSoon
(
(
)
=
>
{
var
os
=
cc
.
openAlternativeOutputStream
(
"
text
/
parent
-
binary
"
altContent
.
length
)
;
os
.
write
(
altContent
altContent
.
length
)
;
os
.
close
(
)
;
executeSoon
(
(
)
=
>
{
Services
.
cache2
.
QueryInterface
(
Ci
.
nsICacheTesting
)
.
flush
(
cacheFlushObserver2
)
;
}
)
;
}
)
;
}
function
openAltChannel
(
)
{
var
chan
=
make_channel
(
url
)
;
var
cc
=
chan
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
;
cc
.
preferAlternativeDataType
(
"
text
/
parent
-
binary
"
"
"
Ci
.
nsICacheInfoChannel
.
ASYNC
)
;
chan
.
asyncOpen
(
new
ChannelListener
(
readAltData
null
)
)
;
}
function
readAltData
(
request
buffer
)
{
var
cc
=
request
.
QueryInterface
(
Ci
.
nsICacheInfoChannel
)
;
Assert
.
equal
(
buffer
"
altContentParentGenerated
"
)
;
Assert
.
equal
(
cc
.
alternativeDataType
"
text
/
parent
-
binary
"
)
;
do_send_remote_message
(
"
finish
"
)
;
}
