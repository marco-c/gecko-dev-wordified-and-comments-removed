function
ERR
(
response
responseCode
responseCodeStr
msg
)
{
setState
(
"
expectedRequestType
"
"
"
)
;
dump
(
"
SERVER
ERROR
:
"
+
msg
+
"
\
n
"
)
;
response
.
write
(
"
HTTP
/
1
.
1
"
+
responseCode
+
"
"
+
responseCodeStr
+
"
\
r
\
n
"
)
;
response
.
write
(
"
Content
-
Type
:
text
/
html
;
charset
=
UTF
-
8
\
r
\
n
"
)
;
response
.
write
(
"
Content
-
Length
:
"
+
msg
.
length
+
"
\
r
\
n
"
)
;
response
.
write
(
"
\
r
\
n
"
)
;
response
.
write
(
msg
)
;
}
function
DBG
(
msg
)
{
dump
(
"
SERVER
DEBUG
:
"
+
msg
+
"
\
n
"
)
;
}
function
handleRequest
(
request
response
)
{
DBG
(
"
Trying
to
seize
power
"
)
;
response
.
seizePower
(
)
;
DBG
(
"
About
to
check
state
vars
"
)
;
var
expectedRequestType
;
var
lastModified
;
if
(
getState
(
"
expectedRequestType
"
)
=
=
=
"
"
)
{
DBG
(
"
First
call
:
Should
be
requesting
full
content
.
"
)
;
expectedRequestType
=
"
fullRequest
"
;
setState
(
"
expectedRequestType
"
"
partialRequest
"
)
;
lastModified
=
new
Date
(
)
.
toUTCString
(
)
;
setState
(
"
lastModified
"
lastModified
)
;
}
else
if
(
getState
(
"
expectedRequestType
"
)
=
=
=
"
partialRequest
"
)
{
DBG
(
"
Second
call
:
Should
be
requesting
undelivered
content
.
"
)
;
expectedRequestType
=
"
partialRequest
"
;
setState
(
"
expectedRequestType
"
"
"
)
;
lastModified
=
getState
(
"
lastModified
"
)
;
}
else
{
ERR
(
response
500
"
Internal
Server
Error
"
'
Invalid
expectedRequestType
"
'
+
expectedRequestType
+
'
"
in
'
+
"
server
state
db
.
"
)
;
return
;
}
var
range
=
request
.
hasHeader
(
"
Range
"
)
?
request
.
getHeader
(
"
Range
"
)
:
"
"
;
var
ifRange
=
request
.
hasHeader
(
"
If
-
Range
"
)
?
request
.
getHeader
(
"
If
-
Range
"
)
:
"
"
;
if
(
expectedRequestType
=
=
=
"
fullRequest
"
)
{
if
(
range
&
&
range
.
length
>
0
)
{
ERR
(
response
400
"
Bad
Request
"
'
Should
not
receive
"
Range
:
'
+
range
+
'
"
for
first
full
request
.
'
)
;
return
;
}
if
(
ifRange
&
&
ifRange
.
length
>
0
)
{
ERR
(
response
400
"
Bad
Request
"
'
Should
not
receive
"
Range
:
'
+
range
+
'
"
for
first
full
request
.
'
)
;
return
;
}
}
else
if
(
expectedRequestType
=
=
=
"
partialRequest
"
)
{
if
(
!
range
)
{
ERR
(
response
400
"
Bad
Request
"
'
Should
receive
"
Range
:
"
for
second
partial
request
.
'
)
;
return
;
}
if
(
!
ifRange
)
{
ERR
(
response
400
"
Bad
Request
"
'
Should
receive
"
If
-
Range
:
"
for
second
partial
request
.
'
)
;
return
;
}
}
else
{
ERR
(
response
500
"
Internal
Server
Error
"
'
expectedRequestType
not
set
correctly
:
"
'
+
expectedRequestType
+
'
"
'
)
;
return
;
}
var
partialContent
=
'
<
html
>
<
head
>
<
/
head
>
<
body
>
<
p
id
=
"
firstResponse
"
>
'
+
"
First
response
<
/
p
>
"
;
var
remainderContent
=
'
<
p
id
=
"
secondResponse
"
>
Second
response
<
/
p
>
'
+
"
<
/
body
>
<
/
html
>
"
;
var
totalLength
=
partialContent
.
length
+
remainderContent
.
length
;
DBG
(
"
totalLength
:
"
+
totalLength
)
;
date
=
new
Date
(
)
;
DBG
(
"
Date
:
"
+
date
.
toUTCString
(
)
+
"
Last
-
Modified
:
"
+
lastModified
)
;
var
commonHeaders
=
"
Date
:
"
+
date
.
toUTCString
(
)
+
"
\
r
\
n
"
+
"
Last
-
Modified
:
"
+
lastModified
+
"
\
r
\
n
"
+
"
Content
-
Type
:
text
/
html
;
charset
=
UTF
-
8
\
r
\
n
"
+
"
ETag
:
abcd0123
\
r
\
n
"
+
"
Accept
-
Ranges
:
bytes
\
r
\
n
"
;
if
(
expectedRequestType
=
=
=
"
fullRequest
"
)
{
DBG
(
"
First
response
:
Sending
partial
content
with
a
full
header
"
)
;
response
.
write
(
"
HTTP
/
1
.
1
200
OK
\
r
\
n
"
)
;
response
.
write
(
commonHeaders
)
;
response
.
write
(
"
Content
-
Length
:
"
+
totalLength
+
"
\
r
\
n
"
)
;
response
.
write
(
"
\
r
\
n
"
)
;
response
.
write
(
partialContent
)
;
}
else
if
(
expectedRequestType
=
=
=
"
partialRequest
"
)
{
DBG
(
"
Second
response
:
Sending
remaining
content
with
a
range
header
"
)
;
response
.
write
(
"
HTTP
/
1
.
1
206
Partial
Content
\
r
\
n
"
)
;
response
.
write
(
commonHeaders
)
;
response
.
write
(
"
Content
-
Length
:
"
+
remainderContent
.
length
+
"
\
r
\
n
"
)
;
response
.
write
(
"
Content
-
Range
:
bytes
"
+
partialContent
.
length
+
"
-
"
+
(
totalLength
-
1
)
+
"
/
"
+
totalLength
+
"
\
r
\
n
"
)
;
response
.
write
(
"
\
r
\
n
"
)
;
response
.
write
(
remainderContent
)
;
}
else
{
ERR
(
response
500
"
Internal
Server
Error
"
"
Something
very
bad
happened
here
:
expectedRequestType
is
invalid
"
+
'
towards
the
end
of
handleRequest
!
-
"
'
+
expectedRequestType
+
'
"
'
)
;
return
;
}
response
.
finish
(
)
;
}
