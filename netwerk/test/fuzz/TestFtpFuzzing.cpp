#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
NullPrincipal
.
h
"
#
include
"
nsCycleCollector
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsSandboxFlags
.
h
"
#
include
"
nsFtpProtocolHandler
.
h
"
#
include
"
FuzzingInterface
.
h
"
#
include
"
FuzzingStreamListener
.
h
"
#
include
"
FuzzyLayer
.
h
"
namespace
mozilla
{
namespace
net
{
static
nsAutoCString
ftpSpec
;
static
int
FuzzingInitNetworkFtp
(
int
*
argc
char
*
*
*
argv
)
{
Preferences
:
:
SetBool
(
"
network
.
dns
.
native
-
is
-
localhost
"
true
)
;
Preferences
:
:
SetBool
(
"
fuzzing
.
necko
.
enabled
"
true
)
;
Preferences
:
:
SetBool
(
"
network
.
connectivity
-
service
.
enabled
"
false
)
;
if
(
ftpSpec
.
IsEmpty
(
)
)
{
ftpSpec
=
"
ftp
:
/
/
127
.
0
.
0
.
1
/
"
;
}
return
0
;
}
static
int
FuzzingInitNetworkFtpDownload
(
int
*
argc
char
*
*
*
argv
)
{
ftpSpec
=
"
ftp
:
/
/
127
.
0
.
0
.
1
/
test
.
txt
"
;
return
FuzzingInitNetworkFtp
(
argc
argv
)
;
}
static
int
FuzzingRunNetworkFtp
(
const
uint8_t
*
data
size_t
size
)
{
if
(
size
>
1024
)
{
addNetworkFuzzingBuffer
(
data
1024
true
)
;
addNetworkFuzzingBuffer
(
data
+
1024
size
-
1024
true
true
)
;
}
else
{
addNetworkFuzzingBuffer
(
data
size
true
)
;
}
nsWeakPtr
channelRef
;
{
nsCOMPtr
<
nsIURI
>
url
;
nsAutoCString
spec
;
nsresult
rv
;
if
(
NS_NewURI
(
getter_AddRefs
(
url
)
ftpSpec
)
!
=
NS_OK
)
{
MOZ_CRASH
(
"
Call
to
NS_NewURI
failed
.
"
)
;
}
nsLoadFlags
loadFlags
;
loadFlags
=
nsIRequest
:
:
LOAD_BACKGROUND
|
nsIRequest
:
:
LOAD_BYPASS_CACHE
|
nsIRequest
:
:
INHIBIT_CACHING
|
nsIRequest
:
:
LOAD_FRESH_CONNECTION
|
nsIChannel
:
:
LOAD_INITIAL_DOCUMENT_URI
;
nsSecurityFlags
secFlags
;
secFlags
=
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
;
uint32_t
sandboxFlags
=
SANDBOXED_ORIGIN
;
nsCOMPtr
<
nsIChannel
>
channel
;
rv
=
NS_NewChannel
(
getter_AddRefs
(
channel
)
url
nsContentUtils
:
:
GetSystemPrincipal
(
)
secFlags
nsIContentPolicy
:
:
TYPE_INTERNAL_XMLHTTPREQUEST
nullptr
nullptr
nullptr
nullptr
loadFlags
nullptr
sandboxFlags
)
;
if
(
rv
!
=
NS_OK
)
{
MOZ_CRASH
(
"
Call
to
NS_NewChannel
failed
.
"
)
;
}
RefPtr
<
FuzzingStreamListener
>
gStreamListener
;
gStreamListener
=
new
FuzzingStreamListener
(
)
;
rv
=
channel
-
>
AsyncOpen
(
gStreamListener
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
asyncOpen
failed
"
)
;
}
FUZZING_LOG
(
(
"
Spinning
for
StopRequest
"
)
)
;
gStreamListener
-
>
waitUntilDone
(
)
;
gFtpHandler
-
>
Observe
(
nullptr
"
net
:
clear
-
active
-
logins
"
nullptr
)
;
channelRef
=
do_GetWeakReference
(
channel
)
;
}
FUZZING_LOG
(
(
"
Spinning
for
channel
=
=
nullptr
"
)
)
;
SpinEventLoopUntil
(
[
&
]
(
)
-
>
bool
{
nsCycleCollector_collect
(
nullptr
)
;
nsCOMPtr
<
nsIChannel
>
channel
=
do_QueryReferent
(
channelRef
)
;
return
channel
=
=
nullptr
;
}
)
;
if
(
!
signalNetworkFuzzingDone
(
)
)
{
FUZZING_LOG
(
(
"
Spinning
for
gFuzzingConnClosed
"
)
)
;
SpinEventLoopUntil
(
[
&
]
(
)
-
>
bool
{
return
gFuzzingConnClosed
;
}
)
;
}
FUZZING_LOG
(
(
"
End
of
iteration
"
)
)
;
return
0
;
}
MOZ_FUZZING_INTERFACE_RAW
(
FuzzingInitNetworkFtp
FuzzingRunNetworkFtp
NetworkFtp
)
;
MOZ_FUZZING_INTERFACE_RAW
(
FuzzingInitNetworkFtpDownload
FuzzingRunNetworkFtp
NetworkFtpDownload
)
;
}
}
