#
ifndef
SHA1_H
#
define
SHA1_H
#
ifdef
HAVE_CONFIG_H
#
include
<
config
.
h
>
#
endif
#
include
"
err
.
h
"
#
ifdef
OPENSSL
#
include
<
openssl
/
evp
.
h
>
#
include
<
stdint
.
h
>
#
else
#
include
"
datatypes
.
h
"
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
ifdef
OPENSSL
#
if
OPENSSL_VERSION_NUMBER
<
0x10100000L
typedef
EVP_MD_CTX
srtp_sha1_ctx_t
;
static
inline
void
srtp_sha1_init
(
srtp_sha1_ctx_t
*
ctx
)
{
EVP_MD_CTX_init
(
ctx
)
;
EVP_DigestInit
(
ctx
EVP_sha1
(
)
)
;
}
static
inline
void
srtp_sha1_update
(
srtp_sha1_ctx_t
*
ctx
const
uint8_t
*
M
int
octets_in_msg
)
{
EVP_DigestUpdate
(
ctx
M
octets_in_msg
)
;
}
static
inline
void
srtp_sha1_final
(
srtp_sha1_ctx_t
*
ctx
uint32_t
*
output
)
{
unsigned
int
len
=
0
;
EVP_DigestFinal
(
ctx
(
unsigned
char
*
)
output
&
len
)
;
EVP_MD_CTX_cleanup
(
ctx
)
;
}
#
else
typedef
EVP_MD_CTX
*
srtp_sha1_ctx_t
;
static
inline
void
srtp_sha1_init
(
srtp_sha1_ctx_t
*
ctx
)
{
*
ctx
=
EVP_MD_CTX_new
(
)
;
EVP_DigestInit
(
*
ctx
EVP_sha1
(
)
)
;
}
static
inline
void
srtp_sha1_update
(
srtp_sha1_ctx_t
*
ctx
const
uint8_t
*
M
int
octets_in_msg
)
{
EVP_DigestUpdate
(
*
ctx
M
octets_in_msg
)
;
}
static
inline
void
srtp_sha1_final
(
srtp_sha1_ctx_t
*
ctx
uint32_t
*
output
)
{
unsigned
int
len
=
0
;
EVP_DigestFinal
(
*
ctx
(
unsigned
char
*
)
output
&
len
)
;
EVP_MD_CTX_free
(
*
ctx
)
;
}
#
endif
#
else
typedef
struct
{
uint32_t
H
[
5
]
;
uint32_t
M
[
16
]
;
int
octets_in_buffer
;
uint32_t
num_bits_in_msg
;
}
srtp_sha1_ctx_t
;
void
srtp_sha1_init
(
srtp_sha1_ctx_t
*
ctx
)
;
void
srtp_sha1_update
(
srtp_sha1_ctx_t
*
ctx
const
uint8_t
*
M
int
octets_in_msg
)
;
void
srtp_sha1_final
(
srtp_sha1_ctx_t
*
ctx
uint32_t
output
[
5
]
)
;
void
srtp_sha1_core
(
const
uint32_t
M
[
16
]
uint32_t
hash_value
[
5
]
)
;
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
