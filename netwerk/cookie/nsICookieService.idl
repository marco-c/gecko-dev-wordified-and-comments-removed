#
include
"
nsISupports
.
idl
"
interface
nsIURI
;
interface
nsIChannel
;
interface
nsIPrincipal
;
webidl
Document
;
[
scriptable
function
uuid
(
0fc41ffb
-
f1b7
-
42d9
-
9a42
-
8dc420c158c1
)
]
interface
nsICookieTransactionCallback
:
nsISupports
{
void
callback
(
)
;
}
;
[
scriptable
uuid
(
1e94e283
-
2811
-
4f43
-
b947
-
d22b1549d824
)
]
interface
nsICookieService
:
nsISupports
{
const
uint32_t
BEHAVIOR_ACCEPT
=
0
;
const
uint32_t
BEHAVIOR_REJECT_FOREIGN
=
1
;
const
uint32_t
BEHAVIOR_REJECT
=
2
;
const
uint32_t
BEHAVIOR_LIMIT_FOREIGN
=
3
;
const
uint32_t
BEHAVIOR_REJECT_TRACKER
=
4
;
const
uint32_t
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
=
5
;
const
uint32_t
BEHAVIOR_LAST
=
5
;
const
uint32_t
ACCEPT_NORMALLY
=
0
;
const
uint32_t
ACCEPT_SESSION
=
2
;
ACString
getCookieStringForPrincipal
(
in
nsIPrincipal
aPrincipal
)
;
ACString
getCookieStringFromHttp
(
in
nsIURI
aURI
in
nsIChannel
aChannel
)
;
void
setCookieStringFromDocument
(
in
Document
aDocument
in
ACString
aCookie
)
;
void
setCookieStringFromHttp
(
in
nsIURI
aURI
in
ACString
aCookie
in
nsIChannel
aChannel
)
;
void
runInTransaction
(
in
nsICookieTransactionCallback
aCallback
)
;
}
;
