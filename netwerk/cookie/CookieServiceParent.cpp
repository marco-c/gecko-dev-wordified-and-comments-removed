#
include
"
mozilla
/
net
/
CookieServiceParent
.
h
"
#
include
"
mozilla
/
dom
/
PContentParent
.
h
"
#
include
"
mozilla
/
net
/
NeckoParent
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
ipc
/
URIUtils
.
h
"
#
include
"
nsArrayUtils
.
h
"
#
include
"
nsCookieService
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsIPrivateBrowsingChannel
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsPrintfCString
.
h
"
using
namespace
mozilla
:
:
ipc
;
using
mozilla
:
:
BasePrincipal
;
using
mozilla
:
:
OriginAttributes
;
using
mozilla
:
:
dom
:
:
PContentParent
;
using
mozilla
:
:
net
:
:
NeckoParent
;
namespace
{
void
CreateDummyChannel
(
nsIURI
*
aHostURI
nsIURI
*
aChannelURI
OriginAttributes
&
aAttrs
nsIChannel
*
*
aChannel
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
=
BasePrincipal
:
:
CreateCodebasePrincipal
(
aHostURI
aAttrs
)
;
if
(
!
principal
)
{
return
;
}
nsCOMPtr
<
nsIChannel
>
dummyChannel
;
NS_NewChannel
(
getter_AddRefs
(
dummyChannel
)
aChannelURI
principal
nsILoadInfo
:
:
SEC_REQUIRE_SAME_ORIGIN_DATA_IS_BLOCKED
nsIContentPolicy
:
:
TYPE_INVALID
)
;
nsCOMPtr
<
nsIPrivateBrowsingChannel
>
pbChannel
=
do_QueryInterface
(
dummyChannel
)
;
if
(
!
pbChannel
)
{
return
;
}
pbChannel
-
>
SetPrivate
(
aAttrs
.
mPrivateBrowsingId
>
0
)
;
dummyChannel
.
forget
(
aChannel
)
;
}
}
namespace
mozilla
{
namespace
net
{
CookieServiceParent
:
:
CookieServiceParent
(
)
{
nsCOMPtr
<
nsICookieService
>
cs
=
do_GetService
(
NS_COOKIESERVICE_CONTRACTID
)
;
mCookieService
=
nsCookieService
:
:
GetSingleton
(
)
;
NS_ASSERTION
(
mCookieService
"
couldn
'
t
get
nsICookieService
"
)
;
}
CookieServiceParent
:
:
~
CookieServiceParent
(
)
{
}
void
GetInfoFromCookie
(
nsCookie
*
aCookie
CookieStruct
&
aCookieStruct
)
{
aCookieStruct
.
name
(
)
=
aCookie
-
>
Name
(
)
;
aCookieStruct
.
value
(
)
=
aCookie
-
>
Value
(
)
;
aCookieStruct
.
host
(
)
=
aCookie
-
>
Host
(
)
;
aCookieStruct
.
path
(
)
=
aCookie
-
>
Path
(
)
;
aCookieStruct
.
expiry
(
)
=
aCookie
-
>
Expiry
(
)
;
aCookieStruct
.
lastAccessed
(
)
=
aCookie
-
>
LastAccessed
(
)
;
aCookieStruct
.
creationTime
(
)
=
aCookie
-
>
CreationTime
(
)
;
aCookieStruct
.
isSession
(
)
=
aCookie
-
>
IsSession
(
)
;
aCookieStruct
.
isSecure
(
)
=
aCookie
-
>
IsSecure
(
)
;
aCookieStruct
.
isHttpOnly
(
)
=
aCookie
-
>
IsHttpOnly
(
)
;
aCookieStruct
.
sameSite
(
)
=
aCookie
-
>
SameSite
(
)
;
}
void
CookieServiceParent
:
:
RemoveBatchDeletedCookies
(
nsIArray
*
aCookieList
)
{
uint32_t
len
=
0
;
aCookieList
-
>
GetLength
(
&
len
)
;
OriginAttributes
attrs
;
CookieStruct
cookieStruct
;
nsTArray
<
CookieStruct
>
cookieStructList
;
nsTArray
<
OriginAttributes
>
attrsList
;
for
(
uint32_t
i
=
0
;
i
<
len
;
i
+
+
)
{
nsCOMPtr
<
nsICookie
>
xpcCookie
=
do_QueryElementAt
(
aCookieList
i
)
;
auto
cookie
=
static_cast
<
nsCookie
*
>
(
xpcCookie
.
get
(
)
)
;
attrs
=
cookie
-
>
OriginAttributesRef
(
)
;
GetInfoFromCookie
(
cookie
cookieStruct
)
;
if
(
!
cookie
-
>
IsHttpOnly
(
)
)
{
cookieStructList
.
AppendElement
(
cookieStruct
)
;
attrsList
.
AppendElement
(
attrs
)
;
}
}
Unused
<
<
SendRemoveBatchDeletedCookies
(
cookieStructList
attrsList
)
;
}
void
CookieServiceParent
:
:
RemoveAll
(
)
{
Unused
<
<
SendRemoveAll
(
)
;
}
void
CookieServiceParent
:
:
RemoveCookie
(
nsICookie
*
aCookie
)
{
auto
cookie
=
static_cast
<
nsCookie
*
>
(
aCookie
)
;
OriginAttributes
attrs
=
cookie
-
>
OriginAttributesRef
(
)
;
CookieStruct
cookieStruct
;
GetInfoFromCookie
(
cookie
cookieStruct
)
;
if
(
!
cookie
-
>
IsHttpOnly
(
)
)
{
Unused
<
<
SendRemoveCookie
(
cookieStruct
attrs
)
;
}
}
void
CookieServiceParent
:
:
AddCookie
(
nsICookie
*
aCookie
)
{
auto
cookie
=
static_cast
<
nsCookie
*
>
(
aCookie
)
;
OriginAttributes
attrs
=
cookie
-
>
OriginAttributesRef
(
)
;
CookieStruct
cookieStruct
;
GetInfoFromCookie
(
cookie
cookieStruct
)
;
Unused
<
<
SendAddCookie
(
cookieStruct
attrs
)
;
}
void
CookieServiceParent
:
:
TrackCookieLoad
(
nsIChannel
*
aChannel
)
{
nsCOMPtr
<
nsIURI
>
uri
;
aChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
GetLoadInfo
(
)
;
mozilla
:
:
OriginAttributes
attrs
;
if
(
loadInfo
)
{
attrs
=
loadInfo
-
>
GetOriginAttributes
(
)
;
}
bool
isSafeTopLevelNav
=
NS_IsSafeTopLevelNav
(
aChannel
)
;
bool
aIsSameSiteForeign
=
NS_IsSameSiteForeign
(
aChannel
uri
)
;
nsCOMPtr
<
mozIThirdPartyUtil
>
thirdPartyUtil
;
thirdPartyUtil
=
do_GetService
(
THIRDPARTYUTIL_CONTRACTID
)
;
bool
isForeign
=
true
;
thirdPartyUtil
-
>
IsThirdPartyChannel
(
aChannel
uri
&
isForeign
)
;
nsTArray
<
nsCookie
*
>
foundCookieList
;
mCookieService
-
>
GetCookiesForURI
(
uri
isForeign
isSafeTopLevelNav
aIsSameSiteForeign
false
attrs
foundCookieList
)
;
nsTArray
<
CookieStruct
>
matchingCookiesList
;
SerialializeCookieList
(
foundCookieList
matchingCookiesList
uri
)
;
Unused
<
<
SendTrackCookiesLoad
(
matchingCookiesList
attrs
)
;
}
void
CookieServiceParent
:
:
SerialializeCookieList
(
const
nsTArray
<
nsCookie
*
>
&
aFoundCookieList
nsTArray
<
CookieStruct
>
&
aCookiesList
nsIURI
*
aHostURI
)
{
for
(
uint32_t
i
=
0
;
i
<
aFoundCookieList
.
Length
(
)
;
i
+
+
)
{
nsCookie
*
cookie
=
aFoundCookieList
.
ElementAt
(
i
)
;
CookieStruct
*
cookieStruct
=
aCookiesList
.
AppendElement
(
)
;
cookieStruct
-
>
name
(
)
=
cookie
-
>
Name
(
)
;
cookieStruct
-
>
value
(
)
=
cookie
-
>
Value
(
)
;
cookieStruct
-
>
host
(
)
=
cookie
-
>
Host
(
)
;
cookieStruct
-
>
path
(
)
=
cookie
-
>
Path
(
)
;
cookieStruct
-
>
expiry
(
)
=
cookie
-
>
Expiry
(
)
;
cookieStruct
-
>
lastAccessed
(
)
=
cookie
-
>
LastAccessed
(
)
;
cookieStruct
-
>
creationTime
(
)
=
cookie
-
>
CreationTime
(
)
;
cookieStruct
-
>
isSession
(
)
=
cookie
-
>
IsSession
(
)
;
cookieStruct
-
>
isSecure
(
)
=
cookie
-
>
IsSecure
(
)
;
cookieStruct
-
>
sameSite
(
)
=
cookie
-
>
SameSite
(
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
CookieServiceParent
:
:
RecvPrepareCookieList
(
const
URIParams
&
aHost
const
bool
&
aIsForeign
const
bool
&
aIsSafeTopLevelNav
const
bool
&
aIsSameSiteForeign
const
OriginAttributes
&
aAttrs
)
{
nsCOMPtr
<
nsIURI
>
hostURI
=
DeserializeURI
(
aHost
)
;
nsTArray
<
nsCookie
*
>
foundCookieList
;
mCookieService
-
>
GetCookiesForURI
(
hostURI
aIsForeign
aIsSafeTopLevelNav
aIsSameSiteForeign
false
aAttrs
foundCookieList
)
;
nsTArray
<
CookieStruct
>
matchingCookiesList
;
SerialializeCookieList
(
foundCookieList
matchingCookiesList
hostURI
)
;
Unused
<
<
SendTrackCookiesLoad
(
matchingCookiesList
aAttrs
)
;
return
IPC_OK
(
)
;
}
void
CookieServiceParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
}
mozilla
:
:
ipc
:
:
IPCResult
CookieServiceParent
:
:
RecvGetCookieString
(
const
URIParams
&
aHost
const
bool
&
aIsForeign
const
bool
&
aIsSafeTopLevelNav
const
bool
&
aIsSameSiteForeign
const
OriginAttributes
&
aAttrs
nsCString
*
aResult
)
{
if
(
!
mCookieService
)
return
IPC_OK
(
)
;
nsCOMPtr
<
nsIURI
>
hostURI
=
DeserializeURI
(
aHost
)
;
if
(
!
hostURI
)
return
IPC_FAIL_NO_REASON
(
this
)
;
mCookieService
-
>
GetCookieStringInternal
(
hostURI
aIsForeign
aIsSafeTopLevelNav
aIsSameSiteForeign
false
aAttrs
*
aResult
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CookieServiceParent
:
:
RecvSetCookieString
(
const
URIParams
&
aHost
const
URIParams
&
aChannelURI
const
bool
&
aIsForeign
const
nsCString
&
aCookieString
const
nsCString
&
aServerTime
const
OriginAttributes
&
aAttrs
const
bool
&
aFromHttp
)
{
if
(
!
mCookieService
)
return
IPC_OK
(
)
;
nsCOMPtr
<
nsIURI
>
hostURI
=
DeserializeURI
(
aHost
)
;
if
(
!
hostURI
)
return
IPC_FAIL_NO_REASON
(
this
)
;
nsCOMPtr
<
nsIURI
>
channelURI
=
DeserializeURI
(
aChannelURI
)
;
if
(
!
channelURI
)
return
IPC_FAIL_NO_REASON
(
this
)
;
nsCOMPtr
<
nsIChannel
>
dummyChannel
;
CreateDummyChannel
(
hostURI
channelURI
const_cast
<
OriginAttributes
&
>
(
aAttrs
)
getter_AddRefs
(
dummyChannel
)
)
;
nsDependentCString
cookieString
(
aCookieString
0
)
;
mCookieService
-
>
SetCookieStringInternal
(
hostURI
aIsForeign
cookieString
aServerTime
aFromHttp
true
aAttrs
dummyChannel
)
;
return
IPC_OK
(
)
;
}
}
}
