#
include
"
CookieParser
.
h
"
#
include
"
CookieLogging
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
dom
/
nsMixedContentBlocker
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
#
include
"
mozilla
/
net
/
Cookie
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
#
include
"
mozilla
/
TextUtils
.
h
"
#
include
"
nsIConsoleReportCollector
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
prprf
.
h
"
constexpr
char
ATTRIBUTE_PATH
[
]
=
"
path
"
;
constexpr
uint64_t
ATTRIBUTE_MAX_LENGTH
=
1024
;
constexpr
auto
CONSOLE_CHIPS_CATEGORY
=
"
cookiesCHIPS
"
_ns
;
constexpr
auto
CONSOLE_OVERSIZE_CATEGORY
=
"
cookiesOversize
"
_ns
;
constexpr
auto
CONSOLE_REJECTION_CATEGORY
=
"
cookiesRejection
"
_ns
;
constexpr
auto
CONSOLE_SAMESITE_CATEGORY
=
"
cookieSameSite
"
_ns
;
constexpr
auto
CONSOLE_INVALID_ATTRIBUTE_CATEGORY
=
"
cookieInvalidAttribute
"
_ns
;
constexpr
auto
SAMESITE_MDN_URL
=
"
https
:
/
/
developer
.
mozilla
.
org
/
docs
/
Web
/
HTTP
/
Headers
/
Set
-
Cookie
/
"
u
"
SameSite
"
_ns
;
namespace
mozilla
{
namespace
net
{
CookieParser
:
:
CookieParser
(
nsIConsoleReportCollector
*
aCRC
nsIURI
*
aHostURI
)
:
mCRC
(
aCRC
)
mHostURI
(
aHostURI
)
{
MOZ_COUNT_CTOR
(
CookieParser
)
;
MOZ_ASSERT
(
aCRC
)
;
MOZ_ASSERT
(
aHostURI
)
;
}
CookieParser
:
:
~
CookieParser
(
)
{
MOZ_COUNT_DTOR
(
CookieParser
)
;
#
define
COOKIE_LOGGING_WITH_NAME
(
category
x
)
\
CookieLogging
:
:
LogMessageToConsole
(
\
mCRC
mHostURI
nsIScriptError
:
:
errorFlag
category
x
\
AutoTArray
<
nsString
1
>
{
NS_ConvertUTF8toUTF16
(
mCookieData
.
name
(
)
)
}
)
;
switch
(
mRejection
)
{
case
NoRejection
:
break
;
case
RejectedInvalidCharAttributes
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedInvalidCharAttributes
"
_ns
)
;
break
;
case
RejectedNoneRequiresSecure
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_SAMESITE_CATEGORY
"
CookieRejectedNonRequiresSecure2
"
_ns
)
;
break
;
case
RejectedPartitionedRequiresSecure
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedPartitionedRequiresSecure
"
_ns
)
;
break
;
case
RejectedEmptyNameAndValue
:
CookieLogging
:
:
LogMessageToConsole
(
mCRC
mHostURI
nsIScriptError
:
:
warningFlag
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedEmptyNameAndValue
"
_ns
nsTArray
<
nsString
>
(
)
)
;
break
;
case
RejectedNameValueOversize
:
{
AutoTArray
<
nsString
2
>
params
=
{
NS_ConvertUTF8toUTF16
(
mCookieData
.
name
(
)
)
}
;
nsString
size
;
size
.
AppendInt
(
kMaxBytesPerCookie
)
;
params
.
AppendElement
(
size
)
;
CookieLogging
:
:
LogMessageToConsole
(
mCRC
mHostURI
nsIScriptError
:
:
warningFlag
CONSOLE_OVERSIZE_CATEGORY
"
CookieOversize
"
_ns
params
)
;
break
;
}
case
RejectedInvalidCharName
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedInvalidCharName
"
_ns
)
;
break
;
case
RejectedInvalidDomain
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedInvalidDomain
"
_ns
)
;
break
;
case
RejectedInvalidPrefix
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedInvalidPrefix
"
_ns
)
;
break
;
case
RejectedInvalidCharValue
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedInvalidCharValue
"
_ns
)
;
break
;
case
RejectedHttpOnlyButFromScript
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedHttpOnlyButFromScript
"
_ns
)
;
break
;
case
RejectedSecureButNonHttps
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedSecureButNonHttps
"
_ns
)
;
break
;
case
RejectedForNonSameSiteness
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_SAMESITE_CATEGORY
"
CookieRejectedForNonSameSiteness
"
_ns
)
;
break
;
case
RejectedForeignNoPartitionedError
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_CHIPS_CATEGORY
"
CookieForeignNoPartitionedError
"
_ns
)
;
break
;
case
RejectedByPermissionManager
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedByPermissionManager
"
_ns
)
;
break
;
case
RejectedNonsecureOverSecure
:
COOKIE_LOGGING_WITH_NAME
(
CONSOLE_REJECTION_CATEGORY
"
CookieRejectedNonsecureOverSecure
"
_ns
)
;
break
;
}
#
undef
COOKIE_LOGGING_WITH_NAME
if
(
mRejection
!
=
NoRejection
|
|
!
mContainsCookie
)
{
return
;
}
for
(
const
char
*
attribute
:
mWarnings
.
mAttributeOversize
)
{
AutoTArray
<
nsString
3
>
params
=
{
NS_ConvertUTF8toUTF16
(
mCookieData
.
name
(
)
)
NS_ConvertUTF8toUTF16
(
attribute
)
}
;
nsString
size
;
size
.
AppendInt
(
ATTRIBUTE_MAX_LENGTH
)
;
params
.
AppendElement
(
size
)
;
CookieLogging
:
:
LogMessageToConsole
(
mCRC
mHostURI
nsIScriptError
:
:
warningFlag
CONSOLE_OVERSIZE_CATEGORY
"
CookieAttributeIgnored
"
_ns
params
)
;
}
for
(
const
char
*
attribute
:
mWarnings
.
mAttributeOverwritten
)
{
CookieLogging
:
:
LogMessageToConsole
(
mCRC
mHostURI
nsIScriptError
:
:
warningFlag
CONSOLE_INVALID_ATTRIBUTE_CATEGORY
"
CookieAttributeOverwritten
"
_ns
AutoTArray
<
nsString
2
>
{
NS_ConvertUTF8toUTF16
(
mCookieData
.
name
(
)
)
NS_ConvertUTF8toUTF16
(
attribute
)
}
)
;
}
if
(
mWarnings
.
mInvalidSameSiteAttribute
)
{
CookieLogging
:
:
LogMessageToConsole
(
mCRC
mHostURI
nsIScriptError
:
:
infoFlag
CONSOLE_SAMESITE_CATEGORY
"
CookieSameSiteValueInvalid2
"
_ns
AutoTArray
<
nsString
1
>
{
NS_ConvertUTF8toUTF16
(
mCookieData
.
name
(
)
)
}
)
;
}
if
(
mWarnings
.
mInvalidMaxAgeAttribute
)
{
CookieLogging
:
:
LogMessageToConsole
(
mCRC
mHostURI
nsIScriptError
:
:
infoFlag
CONSOLE_INVALID_ATTRIBUTE_CATEGORY
"
CookieInvalidMaxAgeAttribute
"
_ns
AutoTArray
<
nsString
1
>
{
NS_ConvertUTF8toUTF16
(
mCookieData
.
name
(
)
)
}
)
;
}
if
(
mWarnings
.
mSameSiteNoneRequiresSecureForBeta
)
{
CookieLogging
:
:
LogMessageToConsole
(
mCRC
mHostURI
nsIScriptError
:
:
warningFlag
CONSOLE_SAMESITE_CATEGORY
"
CookieRejectedNonRequiresSecureForBeta3
"
_ns
AutoTArray
<
nsString
2
>
{
NS_ConvertUTF8toUTF16
(
mCookieData
.
name
(
)
)
SAMESITE_MDN_URL
}
)
;
}
if
(
mWarnings
.
mSameSiteLaxForced
)
{
CookieLogging
:
:
LogMessageToConsole
(
mCRC
mHostURI
nsIScriptError
:
:
infoFlag
CONSOLE_SAMESITE_CATEGORY
"
CookieLaxForced2
"
_ns
AutoTArray
<
nsString
1
>
{
NS_ConvertUTF8toUTF16
(
mCookieData
.
name
(
)
)
}
)
;
}
if
(
mWarnings
.
mSameSiteLaxForcedForBeta
)
{
CookieLogging
:
:
LogMessageToConsole
(
mCRC
mHostURI
nsIScriptError
:
:
warningFlag
CONSOLE_SAMESITE_CATEGORY
"
CookieLaxForcedForBeta2
"
_ns
AutoTArray
<
nsString
2
>
{
NS_ConvertUTF8toUTF16
(
mCookieData
.
name
(
)
)
SAMESITE_MDN_URL
}
)
;
}
if
(
mWarnings
.
mForeignNoPartitionedWarning
)
{
CookieLogging
:
:
LogMessageToConsole
(
mCRC
mHostURI
nsIScriptError
:
:
warningFlag
CONSOLE_CHIPS_CATEGORY
"
CookieForeignNoPartitionedWarning
"
_ns
AutoTArray
<
nsString
1
>
{
NS_ConvertUTF8toUTF16
(
mCookieData
.
name
(
)
)
}
)
;
}
}
static
inline
bool
iswhitespace
(
char
c
)
{
return
c
=
=
'
'
|
|
c
=
=
'
\
t
'
;
}
static
inline
bool
isterminator
(
char
c
)
{
return
c
=
=
'
\
n
'
|
|
c
=
=
'
\
r
'
;
}
static
inline
bool
isvalueseparator
(
char
c
)
{
return
isterminator
(
c
)
|
|
c
=
=
'
;
'
;
}
static
inline
bool
istokenseparator
(
char
c
)
{
return
isvalueseparator
(
c
)
|
|
c
=
=
'
=
'
;
}
bool
CookieParser
:
:
GetTokenValue
(
nsACString
:
:
const_char_iterator
&
aIter
nsACString
:
:
const_char_iterator
&
aEndIter
nsDependentCSubstring
&
aTokenString
nsDependentCSubstring
&
aTokenValue
bool
&
aEqualsFound
)
{
nsACString
:
:
const_char_iterator
start
;
nsACString
:
:
const_char_iterator
lastSpace
;
aTokenValue
.
Rebind
(
aIter
aIter
)
;
while
(
aIter
!
=
aEndIter
&
&
iswhitespace
(
*
aIter
)
)
{
+
+
aIter
;
}
start
=
aIter
;
while
(
aIter
!
=
aEndIter
&
&
!
istokenseparator
(
*
aIter
)
)
{
+
+
aIter
;
}
lastSpace
=
aIter
;
if
(
lastSpace
!
=
start
)
{
while
(
-
-
lastSpace
!
=
start
&
&
iswhitespace
(
*
lastSpace
)
)
{
}
+
+
lastSpace
;
}
aTokenString
.
Rebind
(
start
lastSpace
)
;
aEqualsFound
=
(
*
aIter
=
=
'
=
'
)
;
if
(
aEqualsFound
)
{
while
(
+
+
aIter
!
=
aEndIter
&
&
iswhitespace
(
*
aIter
)
)
{
}
start
=
aIter
;
while
(
aIter
!
=
aEndIter
&
&
!
isvalueseparator
(
*
aIter
)
)
{
+
+
aIter
;
}
if
(
aIter
!
=
start
)
{
lastSpace
=
aIter
;
while
(
-
-
lastSpace
!
=
start
&
&
iswhitespace
(
*
lastSpace
)
)
{
}
aTokenValue
.
Rebind
(
start
+
+
lastSpace
)
;
}
}
if
(
aIter
!
=
aEndIter
)
{
if
(
isterminator
(
*
aIter
)
)
{
+
+
aIter
;
return
true
;
}
+
+
aIter
;
}
return
false
;
}
static
inline
void
SetSameSiteAttribute
(
CookieStruct
&
aCookieData
int32_t
aValue
)
{
aCookieData
.
sameSite
(
)
=
aValue
;
aCookieData
.
rawSameSite
(
)
=
aValue
;
}
static
bool
ContainsControlChars
(
const
nsACString
&
aString
)
{
const
auto
*
start
=
aString
.
BeginReading
(
)
;
const
auto
*
end
=
aString
.
EndReading
(
)
;
return
std
:
:
find_if
(
start
end
[
]
(
unsigned
char
c
)
{
return
(
c
<
=
0x1F
&
&
c
!
=
0x09
)
|
|
c
=
=
0x7F
;
}
)
!
=
end
;
}
static
inline
void
SetSameSiteAttributeDefault
(
CookieStruct
&
aCookieData
)
{
aCookieData
.
sameSite
(
)
=
nsICookie
:
:
SAMESITE_LAX
;
aCookieData
.
rawSameSite
(
)
=
nsICookie
:
:
SAMESITE_NONE
;
}
bool
CookieParser
:
:
CheckAttributeSize
(
const
nsACString
&
currentValue
const
char
*
aAttribute
const
nsACString
&
aValue
)
{
if
(
aValue
.
Length
(
)
>
ATTRIBUTE_MAX_LENGTH
)
{
mWarnings
.
mAttributeOversize
.
AppendElement
(
aAttribute
)
;
return
false
;
}
if
(
!
currentValue
.
IsEmpty
(
)
)
{
mWarnings
.
mAttributeOverwritten
.
AppendElement
(
aAttribute
)
;
}
return
true
;
}
bool
CookieParser
:
:
ParseAttributes
(
nsCString
&
aCookieHeader
nsACString
&
aExpires
nsACString
&
aMaxage
bool
&
aAcceptedByParser
)
{
aAcceptedByParser
=
false
;
static
const
char
kDomain
[
]
=
"
domain
"
;
static
const
char
kExpires
[
]
=
"
expires
"
;
static
const
char
kMaxage
[
]
=
"
max
-
age
"
;
static
const
char
kSecure
[
]
=
"
secure
"
;
static
const
char
kHttpOnly
[
]
=
"
httponly
"
;
static
const
char
kSameSite
[
]
=
"
samesite
"
;
static
const
char
kSameSiteLax
[
]
=
"
lax
"
;
static
const
char
kSameSiteNone
[
]
=
"
none
"
;
static
const
char
kSameSiteStrict
[
]
=
"
strict
"
;
static
const
char
kPartitioned
[
]
=
"
partitioned
"
;
nsACString
:
:
const_char_iterator
cookieStart
;
aCookieHeader
.
BeginReading
(
cookieStart
)
;
nsACString
:
:
const_char_iterator
cookieEnd
;
aCookieHeader
.
EndReading
(
cookieEnd
)
;
mCookieData
.
isSecure
(
)
=
false
;
mCookieData
.
isHttpOnly
(
)
=
false
;
SetSameSiteAttributeDefault
(
mCookieData
)
;
nsDependentCSubstring
tokenString
(
cookieStart
cookieStart
)
;
nsDependentCSubstring
tokenValue
(
cookieStart
cookieStart
)
;
bool
newCookie
;
bool
equalsFound
;
newCookie
=
GetTokenValue
(
cookieStart
cookieEnd
tokenString
tokenValue
equalsFound
)
;
if
(
equalsFound
)
{
mCookieData
.
name
(
)
=
tokenString
;
mCookieData
.
value
(
)
=
tokenValue
;
}
else
{
mCookieData
.
value
(
)
=
tokenString
;
}
while
(
cookieStart
!
=
cookieEnd
&
&
!
newCookie
)
{
newCookie
=
GetTokenValue
(
cookieStart
cookieEnd
tokenString
tokenValue
equalsFound
)
;
if
(
ContainsControlChars
(
tokenString
)
|
|
ContainsControlChars
(
tokenValue
)
)
{
RejectCookie
(
RejectedInvalidCharAttributes
)
;
return
newCookie
;
}
if
(
tokenString
.
LowerCaseEqualsLiteral
(
ATTRIBUTE_PATH
)
)
{
if
(
CheckAttributeSize
(
mCookieData
.
path
(
)
ATTRIBUTE_PATH
tokenValue
)
)
{
mCookieData
.
path
(
)
=
tokenValue
;
}
}
else
if
(
tokenString
.
LowerCaseEqualsLiteral
(
kDomain
)
)
{
if
(
CheckAttributeSize
(
mCookieData
.
host
(
)
kDomain
tokenValue
)
)
{
mCookieData
.
host
(
)
=
tokenValue
;
}
}
else
if
(
tokenString
.
LowerCaseEqualsLiteral
(
kExpires
)
)
{
if
(
CheckAttributeSize
(
aExpires
kExpires
tokenValue
)
)
{
aExpires
=
tokenValue
;
}
}
else
if
(
tokenString
.
LowerCaseEqualsLiteral
(
kMaxage
)
)
{
if
(
CheckAttributeSize
(
aMaxage
kMaxage
tokenValue
)
)
{
aMaxage
=
tokenValue
;
}
}
else
if
(
tokenString
.
LowerCaseEqualsLiteral
(
kSecure
)
)
{
mCookieData
.
isSecure
(
)
=
true
;
}
else
if
(
tokenString
.
LowerCaseEqualsLiteral
(
kPartitioned
)
)
{
mCookieData
.
isPartitioned
(
)
=
true
;
}
else
if
(
tokenString
.
LowerCaseEqualsLiteral
(
kHttpOnly
)
)
{
mCookieData
.
isHttpOnly
(
)
=
true
;
}
else
if
(
tokenString
.
LowerCaseEqualsLiteral
(
kSameSite
)
)
{
if
(
tokenValue
.
LowerCaseEqualsLiteral
(
kSameSiteLax
)
)
{
SetSameSiteAttribute
(
mCookieData
nsICookie
:
:
SAMESITE_LAX
)
;
}
else
if
(
tokenValue
.
LowerCaseEqualsLiteral
(
kSameSiteStrict
)
)
{
SetSameSiteAttribute
(
mCookieData
nsICookie
:
:
SAMESITE_STRICT
)
;
}
else
if
(
tokenValue
.
LowerCaseEqualsLiteral
(
kSameSiteNone
)
)
{
SetSameSiteAttribute
(
mCookieData
nsICookie
:
:
SAMESITE_NONE
)
;
}
else
{
SetSameSiteAttributeDefault
(
mCookieData
)
;
mWarnings
.
mInvalidSameSiteAttribute
=
true
;
}
}
}
aCookieHeader
.
Assign
(
Substring
(
cookieStart
cookieEnd
)
)
;
if
(
!
mCookieData
.
isSecure
(
)
&
&
mCookieData
.
sameSite
(
)
=
=
nsICookie
:
:
SAMESITE_NONE
)
{
if
(
StaticPrefs
:
:
network_cookie_sameSite_noneRequiresSecure
(
)
)
{
RejectCookie
(
RejectedNoneRequiresSecure
)
;
return
newCookie
;
}
mWarnings
.
mSameSiteNoneRequiresSecureForBeta
=
true
;
}
if
(
StaticPrefs
:
:
network_cookie_CHIPS_enabled
(
)
&
&
mCookieData
.
isPartitioned
(
)
&
&
!
mCookieData
.
isSecure
(
)
)
{
RejectCookie
(
RejectedPartitionedRequiresSecure
)
;
return
newCookie
;
}
if
(
mCookieData
.
rawSameSite
(
)
=
=
nsICookie
:
:
SAMESITE_NONE
&
&
mCookieData
.
sameSite
(
)
=
=
nsICookie
:
:
SAMESITE_LAX
)
{
bool
laxByDefault
=
StaticPrefs
:
:
network_cookie_sameSite_laxByDefault
(
)
&
&
!
nsContentUtils
:
:
IsURIInPrefList
(
mHostURI
"
network
.
cookie
.
sameSite
.
laxByDefault
.
disabledHosts
"
)
;
if
(
laxByDefault
)
{
mWarnings
.
mSameSiteLaxForced
=
true
;
}
else
{
mWarnings
.
mSameSiteLaxForcedForBeta
=
true
;
}
}
aAcceptedByParser
=
true
;
MOZ_ASSERT
(
Cookie
:
:
ValidateSameSite
(
mCookieData
)
)
;
return
newCookie
;
}
namespace
{
nsAutoCString
GetPathFromURI
(
nsIURI
*
aHostURI
)
{
nsAutoCString
path
;
nsCOMPtr
<
nsIURL
>
hostURL
=
do_QueryInterface
(
aHostURI
)
;
if
(
hostURL
)
{
hostURL
-
>
GetDirectory
(
path
)
;
}
else
{
aHostURI
-
>
GetPathQueryRef
(
path
)
;
int32_t
slash
=
path
.
RFindChar
(
'
/
'
)
;
if
(
slash
!
=
kNotFound
)
{
path
.
Truncate
(
slash
+
1
)
;
}
}
int32_t
lastSlash
=
path
.
RFindChar
(
'
/
'
)
;
int32_t
firstSlash
=
path
.
FindChar
(
'
/
'
)
;
if
(
lastSlash
!
=
firstSlash
&
&
lastSlash
!
=
kNotFound
&
&
lastSlash
=
=
static_cast
<
int32_t
>
(
path
.
Length
(
)
-
1
)
)
{
path
.
Truncate
(
lastSlash
)
;
}
return
path
;
}
}
bool
CookieParser
:
:
CheckPath
(
)
{
if
(
mCookieData
.
path
(
)
.
IsEmpty
(
)
|
|
mCookieData
.
path
(
)
.
First
(
)
!
=
'
/
'
)
{
nsAutoCString
path
=
GetPathFromURI
(
mHostURI
)
;
if
(
CheckAttributeSize
(
mCookieData
.
path
(
)
ATTRIBUTE_PATH
path
)
)
{
mCookieData
.
path
(
)
=
path
;
}
}
MOZ_ASSERT
(
CookieCommons
:
:
CheckPathSize
(
mCookieData
)
)
;
return
!
mCookieData
.
path
(
)
.
Contains
(
'
\
t
'
)
;
}
bool
CookieParser
:
:
HasSecurePrefix
(
const
nsACString
&
aString
)
{
return
StringBeginsWith
(
aString
"
__Secure
-
"
_ns
nsCaseInsensitiveCStringComparator
)
;
}
bool
CookieParser
:
:
HasHostPrefix
(
const
nsACString
&
aString
)
{
return
StringBeginsWith
(
aString
"
__Host
-
"
_ns
nsCaseInsensitiveCStringComparator
)
;
}
bool
CookieParser
:
:
CheckPrefixes
(
CookieStruct
&
aCookieData
bool
aSecureRequest
)
{
bool
hasSecurePrefix
=
HasSecurePrefix
(
aCookieData
.
name
(
)
)
;
bool
hasHostPrefix
=
HasHostPrefix
(
aCookieData
.
name
(
)
)
;
if
(
!
hasSecurePrefix
&
&
!
hasHostPrefix
)
{
return
true
;
}
if
(
!
aSecureRequest
|
|
!
aCookieData
.
isSecure
(
)
)
{
return
false
;
}
if
(
hasHostPrefix
)
{
if
(
aCookieData
.
host
(
)
[
0
]
=
=
'
.
'
|
|
!
aCookieData
.
path
(
)
.
EqualsLiteral
(
"
/
"
)
)
{
return
false
;
}
}
return
true
;
}
bool
CookieParser
:
:
ParseMaxAgeAttribute
(
const
nsACString
&
aMaxage
int64_t
*
aValue
)
{
MOZ_ASSERT
(
aValue
)
;
if
(
aMaxage
.
IsEmpty
(
)
)
{
return
false
;
}
nsACString
:
:
const_char_iterator
iter
;
aMaxage
.
BeginReading
(
iter
)
;
nsACString
:
:
const_char_iterator
end
;
aMaxage
.
EndReading
(
end
)
;
if
(
*
iter
=
=
'
-
'
)
{
*
aValue
=
INT64_MIN
;
return
true
;
}
CheckedInt
<
int64_t
>
value
(
0
)
;
for
(
;
iter
!
=
end
;
+
+
iter
)
{
if
(
!
mozilla
:
:
IsAsciiDigit
(
*
iter
)
)
{
mWarnings
.
mInvalidMaxAgeAttribute
=
true
;
return
false
;
}
value
*
=
10
;
if
(
!
value
.
isValid
(
)
)
{
*
aValue
=
INT64_MAX
;
return
true
;
}
value
+
=
*
iter
-
'
0
'
;
if
(
!
value
.
isValid
(
)
)
{
*
aValue
=
INT64_MAX
;
return
true
;
}
}
*
aValue
=
value
.
value
(
)
;
return
true
;
}
bool
CookieParser
:
:
GetExpiry
(
CookieStruct
&
aCookieData
const
nsACString
&
aExpires
const
nsACString
&
aMaxage
int64_t
aCurrentTime
bool
aFromHttp
)
{
int64_t
maxageCap
=
aFromHttp
?
0
:
StaticPrefs
:
:
privacy_documentCookies_maxage
(
)
;
int64_t
maxage
=
0
;
if
(
ParseMaxAgeAttribute
(
aMaxage
&
maxage
)
)
{
if
(
maxage
=
=
INT64_MIN
|
|
maxage
=
=
INT64_MAX
)
{
aCookieData
.
expiry
(
)
=
maxage
;
}
else
{
CheckedInt
<
int64_t
>
value
(
aCurrentTime
)
;
value
+
=
maxageCap
?
std
:
:
min
(
maxage
maxageCap
)
:
maxage
;
aCookieData
.
expiry
(
)
=
value
.
isValid
(
)
?
value
.
value
(
)
:
INT64_MAX
;
}
return
false
;
}
if
(
!
aExpires
.
IsEmpty
(
)
)
{
PRTime
expires
;
if
(
PR_ParseTimeString
(
aExpires
.
BeginReading
(
)
true
&
expires
)
!
=
PR_SUCCESS
)
{
return
true
;
}
if
(
maxageCap
)
{
aCookieData
.
expiry
(
)
=
std
:
:
min
(
expires
/
int64_t
(
PR_USEC_PER_SEC
)
aCurrentTime
+
maxageCap
)
;
}
else
{
aCookieData
.
expiry
(
)
=
expires
/
int64_t
(
PR_USEC_PER_SEC
)
;
}
return
false
;
}
return
true
;
}
static
inline
bool
IsSubdomainOf
(
const
nsACString
&
a
const
nsACString
&
b
)
{
if
(
a
=
=
b
)
{
return
true
;
}
if
(
a
.
Length
(
)
>
b
.
Length
(
)
)
{
return
a
[
a
.
Length
(
)
-
b
.
Length
(
)
-
1
]
=
=
'
.
'
&
&
StringEndsWith
(
a
b
)
;
}
return
false
;
}
bool
CookieParser
:
:
CheckDomain
(
CookieStruct
&
aCookieData
nsIURI
*
aHostURI
const
nsACString
&
aBaseDomain
bool
aRequireHostMatch
)
{
nsAutoCString
hostFromURI
;
nsContentUtils
:
:
GetHostOrIPv6WithBrackets
(
aHostURI
hostFromURI
)
;
if
(
!
aCookieData
.
host
(
)
.
IsEmpty
(
)
)
{
if
(
aCookieData
.
host
(
)
.
Length
(
)
>
1
&
&
aCookieData
.
host
(
)
.
First
(
)
=
=
'
.
'
)
{
aCookieData
.
host
(
)
.
Cut
(
0
1
)
;
}
ToLowerCase
(
aCookieData
.
host
(
)
)
;
if
(
aRequireHostMatch
)
{
return
hostFromURI
.
Equals
(
aCookieData
.
host
(
)
)
;
}
if
(
IsSubdomainOf
(
aCookieData
.
host
(
)
aBaseDomain
)
&
&
IsSubdomainOf
(
hostFromURI
aCookieData
.
host
(
)
)
)
{
aCookieData
.
host
(
)
.
InsertLiteral
(
"
.
"
0
)
;
return
true
;
}
return
false
;
}
aCookieData
.
host
(
)
=
hostFromURI
;
return
true
;
}
static
void
RecordPartitionedTelemetry
(
const
CookieStruct
&
aCookieData
bool
aIsForeign
)
{
mozilla
:
:
glean
:
:
networking
:
:
set_cookie
.
Add
(
1
)
;
if
(
aCookieData
.
isPartitioned
(
)
)
{
mozilla
:
:
glean
:
:
networking
:
:
set_cookie_partitioned
.
AddToNumerator
(
1
)
;
}
if
(
aIsForeign
)
{
mozilla
:
:
glean
:
:
networking
:
:
set_cookie_foreign
.
AddToNumerator
(
1
)
;
}
if
(
aIsForeign
&
&
aCookieData
.
isPartitioned
(
)
)
{
mozilla
:
:
glean
:
:
networking
:
:
set_cookie_foreign_partitioned
.
AddToNumerator
(
1
)
;
}
}
bool
CookieParser
:
:
Parse
(
const
nsACString
&
aBaseDomain
bool
aRequireHostMatch
CookieStatus
aStatus
nsCString
&
aCookieHeader
bool
aFromHttp
bool
aIsForeignAndNotAddon
bool
aPartitionedOnly
bool
aIsInPrivateBrowsing
)
{
MOZ_ASSERT
(
!
mContainsCookie
)
;
mCookieData
.
expiry
(
)
=
INT64_MAX
;
mCookieData
.
schemeMap
(
)
=
CookieCommons
:
:
URIToSchemeType
(
mHostURI
)
;
mCookieString
.
Assign
(
aCookieHeader
)
;
nsAutoCString
expires
;
nsAutoCString
maxage
;
bool
acceptedByParser
=
false
;
bool
newCookie
=
ParseAttributes
(
aCookieHeader
expires
maxage
acceptedByParser
)
;
if
(
!
acceptedByParser
)
{
return
newCookie
;
}
bool
potentiallyTrustworthy
=
nsMixedContentBlocker
:
:
IsPotentiallyTrustworthyOrigin
(
mHostURI
)
;
int64_t
currentTimeInUsec
=
PR_Now
(
)
;
mCookieData
.
isSession
(
)
=
GetExpiry
(
mCookieData
expires
maxage
currentTimeInUsec
/
PR_USEC_PER_SEC
aFromHttp
)
;
if
(
aStatus
=
=
STATUS_ACCEPT_SESSION
)
{
mCookieData
.
isSession
(
)
=
true
;
}
if
(
mCookieData
.
name
(
)
.
IsEmpty
(
)
&
&
mCookieData
.
value
(
)
.
IsEmpty
(
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
cookie
name
and
value
are
empty
"
)
;
RejectCookie
(
RejectedEmptyNameAndValue
)
;
return
newCookie
;
}
if
(
!
CookieCommons
:
:
CheckNameAndValueSize
(
mCookieData
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
cookie
too
big
(
>
4kb
)
"
)
;
RejectCookie
(
RejectedNameValueOversize
)
;
return
newCookie
;
}
CookieCommons
:
:
RecordUnicodeTelemetry
(
mCookieData
)
;
if
(
XRE_IsParentProcess
(
)
|
|
!
aFromHttp
)
{
RecordPartitionedTelemetry
(
mCookieData
aIsForeignAndNotAddon
)
;
}
if
(
!
CookieCommons
:
:
CheckName
(
mCookieData
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
invalid
name
character
"
)
;
RejectCookie
(
RejectedInvalidCharName
)
;
return
newCookie
;
}
if
(
!
CheckDomain
(
mCookieData
mHostURI
aBaseDomain
aRequireHostMatch
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
failed
the
domain
tests
"
)
;
RejectCookie
(
RejectedInvalidDomain
)
;
return
newCookie
;
}
if
(
!
CheckPath
(
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
failed
the
path
tests
"
)
;
return
newCookie
;
}
if
(
mCookieData
.
name
(
)
.
IsEmpty
(
)
&
&
(
HasSecurePrefix
(
mCookieData
.
value
(
)
)
|
|
HasHostPrefix
(
mCookieData
.
value
(
)
)
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
failed
hidden
prefix
tests
"
)
;
RejectCookie
(
RejectedInvalidPrefix
)
;
return
newCookie
;
}
if
(
!
CheckPrefixes
(
mCookieData
potentiallyTrustworthy
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
failed
the
prefix
tests
"
)
;
RejectCookie
(
RejectedInvalidPrefix
)
;
return
newCookie
;
}
if
(
!
CookieCommons
:
:
CheckValue
(
mCookieData
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
invalid
value
character
"
)
;
RejectCookie
(
RejectedInvalidCharValue
)
;
return
newCookie
;
}
if
(
!
aFromHttp
&
&
mCookieData
.
isHttpOnly
(
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
cookie
is
httponly
;
coming
from
script
"
)
;
RejectCookie
(
RejectedHttpOnlyButFromScript
)
;
return
newCookie
;
}
if
(
mCookieData
.
isSecure
(
)
&
&
!
potentiallyTrustworthy
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
aCookieHeader
"
non
-
https
cookie
can
'
t
set
secure
flag
"
)
;
RejectCookie
(
RejectedSecureButNonHttps
)
;
return
newCookie
;
}
bool
laxByDefault
=
StaticPrefs
:
:
network_cookie_sameSite_laxByDefault
(
)
&
&
!
nsContentUtils
:
:
IsURIInPrefList
(
mHostURI
"
network
.
cookie
.
sameSite
.
laxByDefault
.
disabledHosts
"
)
;
auto
effectiveSameSite
=
laxByDefault
?
mCookieData
.
sameSite
(
)
:
mCookieData
.
rawSameSite
(
)
;
if
(
(
effectiveSameSite
!
=
nsICookie
:
:
SAMESITE_NONE
)
&
&
aIsForeignAndNotAddon
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
failed
the
samesite
tests
"
)
;
RejectCookie
(
RejectedForNonSameSiteness
)
;
return
newCookie
;
}
if
(
aPartitionedOnly
&
&
!
mCookieData
.
isPartitioned
(
)
&
&
aIsForeignAndNotAddon
)
{
if
(
StaticPrefs
:
:
network_cookie_cookieBehavior_optInPartitioning
(
)
|
|
(
aIsInPrivateBrowsing
&
&
StaticPrefs
:
:
network_cookie_cookieBehavior_optInPartitioning_pbmode
(
)
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
mHostURI
mCookieString
"
foreign
cookies
must
be
partitioned
"
)
;
RejectCookie
(
RejectedForeignNoPartitionedError
)
;
return
newCookie
;
}
mWarnings
.
mForeignNoPartitionedWarning
=
true
;
}
mContainsCookie
=
true
;
return
newCookie
;
}
void
CookieParser
:
:
RejectCookie
(
Rejection
aRejection
)
{
MOZ_ASSERT
(
mRejection
=
=
NoRejection
)
;
MOZ_ASSERT
(
aRejection
!
=
NoRejection
)
;
mRejection
=
aRejection
;
}
void
CookieParser
:
:
GetCookieString
(
nsACString
&
aCookieString
)
const
{
aCookieString
.
Assign
(
mCookieString
)
;
}
}
}
