#
ifndef
mozilla_net_CookieStorage_h
#
define
mozilla_net_CookieStorage_h
#
include
"
CookieKey
.
h
"
#
include
"
mozIStorageCompletionCallback
.
h
"
#
include
"
mozIStorageStatement
.
h
"
#
include
"
mozIStorageStatementCallback
.
h
"
#
include
"
nsTHashtable
.
h
"
namespace
mozilla
{
namespace
net
{
class
CookieEntry
:
public
CookieKey
{
public
:
typedef
nsTArray
<
RefPtr
<
mozilla
:
:
net
:
:
Cookie
>
>
ArrayType
;
typedef
ArrayType
:
:
index_type
IndexType
;
explicit
CookieEntry
(
KeyTypePointer
aKey
)
:
CookieKey
(
aKey
)
{
}
CookieEntry
(
const
CookieEntry
&
toCopy
)
{
MOZ_ASSERT_UNREACHABLE
(
"
CookieEntry
copy
constructor
is
forbidden
!
"
)
;
}
~
CookieEntry
(
)
=
default
;
inline
ArrayType
&
GetCookies
(
)
{
return
mCookies
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
ArrayType
mCookies
;
}
;
class
CookieStorage
final
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
CookieStorage
)
CookieStorage
(
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
enum
CorruptFlag
{
OK
CLOSING_FOR_REBUILD
REBUILDING
}
;
nsTHashtable
<
CookieEntry
>
hostTable
;
uint32_t
cookieCount
;
int64_t
cookieOldestTime
;
nsCOMPtr
<
nsIFile
>
cookieFile
;
nsCOMPtr
<
mozIStorageConnection
>
dbConn
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtInsert
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtDelete
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtUpdate
;
CorruptFlag
corruptFlag
;
nsCOMPtr
<
mozIStorageConnection
>
syncConn
;
nsCOMPtr
<
mozIStorageStatement
>
stmtReadDomain
;
nsCOMPtr
<
mozIStorageStatementCallback
>
insertListener
;
nsCOMPtr
<
mozIStorageStatementCallback
>
updateListener
;
nsCOMPtr
<
mozIStorageStatementCallback
>
removeListener
;
nsCOMPtr
<
mozIStorageCompletionCallback
>
closeListener
;
private
:
~
CookieStorage
(
)
;
}
;
}
}
#
endif
