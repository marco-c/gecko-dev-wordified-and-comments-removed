#
ifndef
mozilla_net_CookieStorage_h
#
define
mozilla_net_CookieStorage_h
#
include
"
CookieKey
.
h
"
#
include
"
mozIStorageBindingParamsArray
.
h
"
#
include
"
mozIStorageCompletionCallback
.
h
"
#
include
"
mozIStorageStatement
.
h
"
#
include
"
mozIStorageStatementCallback
.
h
"
#
include
"
nsTHashtable
.
h
"
namespace
mozilla
{
namespace
net
{
class
CookieEntry
:
public
CookieKey
{
public
:
typedef
nsTArray
<
RefPtr
<
Cookie
>
>
ArrayType
;
typedef
ArrayType
:
:
index_type
IndexType
;
explicit
CookieEntry
(
KeyTypePointer
aKey
)
:
CookieKey
(
aKey
)
{
}
CookieEntry
(
const
CookieEntry
&
toCopy
)
{
MOZ_ASSERT_UNREACHABLE
(
"
CookieEntry
copy
constructor
is
forbidden
!
"
)
;
}
~
CookieEntry
(
)
=
default
;
inline
ArrayType
&
GetCookies
(
)
{
return
mCookies
;
}
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
ArrayType
mCookies
;
}
;
struct
CookieListIter
{
CookieListIter
(
)
=
default
;
explicit
CookieListIter
(
CookieEntry
*
aEntry
CookieEntry
:
:
IndexType
aIndex
)
:
entry
(
aEntry
)
index
(
aIndex
)
{
}
Cookie
*
Cookie
(
)
const
{
return
entry
-
>
GetCookies
(
)
[
index
]
;
}
CookieEntry
*
entry
;
CookieEntry
:
:
IndexType
index
;
}
;
class
CookieStorage
final
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
CookieStorage
)
explicit
CookieStorage
(
bool
aPrivateStorage
)
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
void
GetCookies
(
nsTArray
<
RefPtr
<
nsICookie
>
>
&
aCookies
)
const
;
void
GetSessionCookies
(
nsTArray
<
RefPtr
<
nsICookie
>
>
&
aCookies
)
const
;
bool
FindCookie
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aHost
const
nsACString
&
aName
const
nsACString
&
aPath
CookieListIter
&
aIter
)
;
uint32_t
CountCookiesFromHost
(
const
nsACString
&
aBaseDomain
uint32_t
aPrivateBrowsingId
)
;
void
GetAll
(
nsTArray
<
RefPtr
<
nsICookie
>
>
&
aResult
)
const
;
const
nsTArray
<
RefPtr
<
Cookie
>
>
*
GetCookiesFromHost
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
)
;
void
GetCookiesWithOriginAttributes
(
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
const
nsACString
&
aBaseDomain
nsTArray
<
RefPtr
<
nsICookie
>
>
&
aResult
)
;
void
RemoveCookie
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aHost
const
nsACString
&
aName
const
nsACString
&
aPath
)
;
void
RemoveCookiesWithOriginAttributes
(
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
const
nsACString
&
aBaseDomain
)
;
void
RemoveCookiesFromExactHost
(
const
nsACString
&
aHost
const
nsACString
&
aBaseDomain
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
)
;
void
RemoveAll
(
)
;
void
NotifyChanged
(
nsISupports
*
aSubject
const
char16_t
*
aData
bool
aOldCookieIsSession
=
false
bool
aFromHttp
=
false
)
;
void
HandleCorruptDB
(
)
;
void
CleanupCachedStatements
(
)
;
void
CleanupDefaultDBConnection
(
)
;
void
AddCookie
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
Cookie
*
aCookie
int64_t
aCurrentTimeInUsec
nsIURI
*
aHostURI
const
nsACString
&
aCookieHeader
bool
aFromHttp
uint16_t
aMaxNumberOfCookies
uint16_t
aMaxCookiesPerHost
uint16_t
aCookieQuotaPerHost
int64_t
aCookiePurgeAge
)
;
void
AddCookieToList
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
mozilla
:
:
net
:
:
Cookie
*
aCookie
mozIStorageBindingParamsArray
*
aParamsArray
bool
aWriteToDB
=
true
)
;
void
RemoveCookieFromList
(
const
CookieListIter
&
aIter
mozIStorageBindingParamsArray
*
aParamsArray
=
nullptr
)
;
void
FindStaleCookies
(
CookieEntry
*
aEntry
int64_t
aCurrentTime
bool
aIsSecure
nsTArray
<
CookieListIter
>
&
aOutput
uint32_t
aLimit
)
;
void
CreateOrUpdatePurgeList
(
nsIArray
*
*
aPurgeList
nsICookie
*
aCookie
)
;
already_AddRefed
<
nsIArray
>
PurgeCookies
(
int64_t
aCurrentTimeInUsec
uint16_t
aMaxNumberOfCookies
int64_t
aCookiePurgeAge
)
;
nsresult
ImportCookies
(
nsIFile
*
aCookieFile
nsIEffectiveTLDService
*
aTLDService
uint16_t
aMaxNumberOfCookies
uint16_t
aMaxCookiesPerHost
uint16_t
aCookieQuotaPerHost
int64_t
aCookiePurgeAge
)
;
void
StaleCookies
(
const
nsTArray
<
Cookie
*
>
&
aCookieList
int64_t
aCurrentTimeInUsec
)
;
void
Close
(
)
;
enum
CorruptFlag
{
OK
CLOSING_FOR_REBUILD
REBUILDING
}
;
nsTHashtable
<
CookieEntry
>
hostTable
;
uint32_t
cookieCount
;
int64_t
cookieOldestTime
;
nsCOMPtr
<
nsIFile
>
cookieFile
;
nsCOMPtr
<
mozIStorageConnection
>
dbConn
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtInsert
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtDelete
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtUpdate
;
CorruptFlag
corruptFlag
;
nsCOMPtr
<
mozIStorageConnection
>
syncConn
;
nsCOMPtr
<
mozIStorageStatement
>
stmtReadDomain
;
nsCOMPtr
<
mozIStorageStatementCallback
>
insertListener
;
nsCOMPtr
<
mozIStorageStatementCallback
>
updateListener
;
nsCOMPtr
<
mozIStorageStatementCallback
>
removeListener
;
nsCOMPtr
<
mozIStorageCompletionCallback
>
closeListener
;
private
:
~
CookieStorage
(
)
;
bool
FindSecureCookie
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
Cookie
*
aCookie
)
;
void
UpdateCookieOldestTime
(
Cookie
*
aCookie
)
;
already_AddRefed
<
nsIArray
>
CreatePurgeList
(
nsICookie
*
aCookie
)
;
void
UpdateCookieInList
(
Cookie
*
aCookie
int64_t
aLastAccessed
mozIStorageBindingParamsArray
*
aParamsArray
)
;
bool
mPrivateStorage
;
}
;
}
}
#
endif
