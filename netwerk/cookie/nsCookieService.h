#
ifndef
nsCookieService_h__
#
define
nsCookieService_h__
#
include
"
nsICookieService
.
h
"
#
include
"
nsICookieManager
.
h
"
#
include
"
nsICookieManager2
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsCookie
.
h
"
#
include
"
nsCookieKey
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
mozIStorageStatement
.
h
"
#
include
"
mozIStorageAsyncStatement
.
h
"
#
include
"
mozIStoragePendingStatement
.
h
"
#
include
"
mozIStorageConnection
.
h
"
#
include
"
mozIStorageRow
.
h
"
#
include
"
mozIStorageCompletionCallback
.
h
"
#
include
"
mozIStorageStatementCallback
.
h
"
#
include
"
mozIStorageFunction
.
h
"
#
include
"
nsIVariant
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
using
mozilla
:
:
OriginAttributes
;
class
nsICookiePermission
;
class
nsIEffectiveTLDService
;
class
nsIIDNService
;
class
nsIPrefBranch
;
class
nsIObserverService
;
class
nsIURI
;
class
nsIChannel
;
class
nsIArray
;
class
mozIStorageService
;
class
mozIThirdPartyUtil
;
class
ReadCookieDBListener
;
struct
nsCookieAttributes
;
struct
nsListIter
;
namespace
mozilla
{
namespace
net
{
class
nsCookieKey
;
class
CookieServiceParent
;
}
}
using
mozilla
:
:
net
:
:
nsCookieKey
;
class
nsCookieEntry
:
public
nsCookieKey
{
public
:
typedef
nsTArray
<
RefPtr
<
nsCookie
>
>
ArrayType
;
typedef
ArrayType
:
:
index_type
IndexType
;
explicit
nsCookieEntry
(
KeyTypePointer
aKey
)
:
nsCookieKey
(
aKey
)
{
}
nsCookieEntry
(
const
nsCookieEntry
&
toCopy
)
{
NS_NOTREACHED
(
"
nsCookieEntry
copy
constructor
is
forbidden
!
"
)
;
}
~
nsCookieEntry
(
)
{
}
inline
ArrayType
&
GetCookies
(
)
{
return
mCookies
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
ArrayType
mCookies
;
}
;
struct
CookieDomainTuple
{
nsCookieKey
key
;
RefPtr
<
nsCookie
>
cookie
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
}
;
struct
DBState
final
{
DBState
(
)
:
cookieCount
(
0
)
cookieOldestTime
(
INT64_MAX
)
corruptFlag
(
OK
)
{
}
private
:
~
DBState
(
)
{
}
public
:
NS_INLINE_DECL_REFCOUNTING
(
DBState
)
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
enum
CorruptFlag
{
OK
CLOSING_FOR_REBUILD
REBUILDING
}
;
nsTHashtable
<
nsCookieEntry
>
hostTable
;
uint32_t
cookieCount
;
int64_t
cookieOldestTime
;
nsCOMPtr
<
nsIFile
>
cookieFile
;
nsCOMPtr
<
mozIStorageConnection
>
dbConn
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtInsert
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtDelete
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtUpdate
;
CorruptFlag
corruptFlag
;
nsCOMPtr
<
mozIStorageConnection
>
syncConn
;
nsCOMPtr
<
mozIStorageStatement
>
stmtReadDomain
;
nsCOMPtr
<
mozIStoragePendingStatement
>
pendingRead
;
ReadCookieDBListener
*
readListener
;
nsTArray
<
CookieDomainTuple
>
hostArray
;
nsTHashtable
<
nsCookieKey
>
readSet
;
nsCOMPtr
<
mozIStorageStatementCallback
>
insertListener
;
nsCOMPtr
<
mozIStorageStatementCallback
>
updateListener
;
nsCOMPtr
<
mozIStorageStatementCallback
>
removeListener
;
nsCOMPtr
<
mozIStorageCompletionCallback
>
closeListener
;
}
;
enum
CookieStatus
{
STATUS_ACCEPTED
STATUS_ACCEPT_SESSION
STATUS_REJECTED
STATUS_REJECTED_WITH_ERROR
}
;
enum
OpenDBResult
{
RESULT_OK
RESULT_RETRY
RESULT_FAILURE
}
;
class
nsCookieService
final
:
public
nsICookieService
public
nsICookieManager2
public
nsIObserver
public
nsSupportsWeakReference
public
nsIMemoryReporter
{
private
:
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSICOOKIESERVICE
NS_DECL_NSICOOKIEMANAGER
NS_DECL_NSICOOKIEMANAGER2
NS_DECL_NSIMEMORYREPORTER
nsCookieService
(
)
;
static
nsICookieService
*
GetXPCOMSingleton
(
)
;
nsresult
Init
(
)
;
static
void
AppClearDataObserverInit
(
)
;
static
nsCString
GetPathFromURI
(
nsIURI
*
aHostURI
)
;
static
nsresult
GetBaseDomain
(
nsIEffectiveTLDService
*
aTLDService
nsIURI
*
aHostURI
nsCString
&
aBaseDomain
bool
&
aRequireHostMatch
)
;
static
nsresult
GetBaseDomainFromHost
(
nsIEffectiveTLDService
*
aTLDService
const
nsACString
&
aHost
nsCString
&
aBaseDomain
)
;
static
bool
DomainMatches
(
nsCookie
*
aCookie
const
nsACString
&
aHost
)
;
static
bool
PathMatches
(
nsCookie
*
aCookie
const
nsACString
&
aPath
)
;
void
GetCookiesForURI
(
nsIURI
*
aHostURI
bool
aIsForeign
bool
aHttpBound
const
OriginAttributes
&
aOriginAttrs
nsTArray
<
nsCookie
*
>
&
aCookieList
)
;
protected
:
virtual
~
nsCookieService
(
)
;
void
PrefChanged
(
nsIPrefBranch
*
aPrefBranch
)
;
void
InitDBStates
(
)
;
OpenDBResult
TryInitDB
(
bool
aDeleteExistingDB
)
;
nsresult
CreateTableWorker
(
const
char
*
aName
)
;
nsresult
CreateIndex
(
)
;
nsresult
CreateTable
(
)
;
nsresult
CreateTableForSchemaVersion6
(
)
;
nsresult
CreateTableForSchemaVersion5
(
)
;
void
CloseDBStates
(
)
;
void
CleanupCachedStatements
(
)
;
void
CleanupDefaultDBConnection
(
)
;
void
HandleDBClosed
(
DBState
*
aDBState
)
;
void
HandleCorruptDB
(
DBState
*
aDBState
)
;
void
RebuildCorruptDB
(
DBState
*
aDBState
)
;
OpenDBResult
Read
(
)
;
template
<
class
T
>
nsCookie
*
GetCookieFromRow
(
T
&
aRow
const
OriginAttributes
&
aOriginAttributes
)
;
void
AsyncReadComplete
(
)
;
void
CancelAsyncRead
(
bool
aPurgeReadSet
)
;
void
EnsureReadDomain
(
const
nsCookieKey
&
aKey
)
;
void
EnsureReadComplete
(
)
;
nsresult
NormalizeHost
(
nsCString
&
aHost
)
;
nsresult
GetCookieStringCommon
(
nsIURI
*
aHostURI
nsIChannel
*
aChannel
bool
aHttpBound
char
*
*
aCookie
)
;
void
GetCookieStringInternal
(
nsIURI
*
aHostURI
bool
aIsForeign
bool
aHttpBound
const
OriginAttributes
&
aOriginAttrs
nsCString
&
aCookie
)
;
nsresult
SetCookieStringCommon
(
nsIURI
*
aHostURI
const
char
*
aCookieHeader
const
char
*
aServerTime
nsIChannel
*
aChannel
bool
aFromHttp
)
;
void
SetCookieStringInternal
(
nsIURI
*
aHostURI
bool
aIsForeign
nsDependentCString
&
aCookieHeader
const
nsCString
&
aServerTime
bool
aFromHttp
const
OriginAttributes
&
aOriginAttrs
nsIChannel
*
aChannel
)
;
bool
SetCookieInternal
(
nsIURI
*
aHostURI
const
nsCookieKey
&
aKey
bool
aRequireHostMatch
CookieStatus
aStatus
nsDependentCString
&
aCookieHeader
int64_t
aServerTime
bool
aFromHttp
nsIChannel
*
aChannel
)
;
void
AddInternal
(
const
nsCookieKey
&
aKey
nsCookie
*
aCookie
int64_t
aCurrentTimeInUsec
nsIURI
*
aHostURI
const
char
*
aCookieHeader
bool
aFromHttp
)
;
void
RemoveCookieFromList
(
const
nsListIter
&
aIter
mozIStorageBindingParamsArray
*
aParamsArray
=
nullptr
)
;
void
AddCookieToList
(
const
nsCookieKey
&
aKey
nsCookie
*
aCookie
DBState
*
aDBState
mozIStorageBindingParamsArray
*
aParamsArray
bool
aWriteToDB
=
true
)
;
void
UpdateCookieInList
(
nsCookie
*
aCookie
int64_t
aLastAccessed
mozIStorageBindingParamsArray
*
aParamsArray
)
;
static
bool
GetTokenValue
(
nsACString
:
:
const_char_iterator
&
aIter
nsACString
:
:
const_char_iterator
&
aEndIter
nsDependentCSubstring
&
aTokenString
nsDependentCSubstring
&
aTokenValue
bool
&
aEqualsFound
)
;
static
bool
ParseAttributes
(
nsDependentCString
&
aCookieHeader
nsCookieAttributes
&
aCookie
)
;
bool
RequireThirdPartyCheck
(
)
;
CookieStatus
CheckPrefs
(
nsIURI
*
aHostURI
bool
aIsForeign
const
char
*
aCookieHeader
)
;
bool
CheckDomain
(
nsCookieAttributes
&
aCookie
nsIURI
*
aHostURI
const
nsCString
&
aBaseDomain
bool
aRequireHostMatch
)
;
static
bool
CheckPath
(
nsCookieAttributes
&
aCookie
nsIURI
*
aHostURI
)
;
static
bool
CheckPrefixes
(
nsCookieAttributes
&
aCookie
bool
aSecureRequest
)
;
static
bool
GetExpiry
(
nsCookieAttributes
&
aCookie
int64_t
aServerTime
int64_t
aCurrentTime
)
;
void
RemoveAllFromMemory
(
)
;
already_AddRefed
<
nsIArray
>
PurgeCookies
(
int64_t
aCurrentTimeInUsec
)
;
bool
FindCookie
(
const
nsCookieKey
&
aKey
const
nsCString
&
aHost
const
nsCString
&
aName
const
nsCString
&
aPath
nsListIter
&
aIter
)
;
bool
FindSecureCookie
(
const
nsCookieKey
&
aKey
nsCookie
*
aCookie
)
;
int64_t
FindStaleCookie
(
nsCookieEntry
*
aEntry
int64_t
aCurrentTime
nsIURI
*
aSource
const
mozilla
:
:
Maybe
<
bool
>
&
aIsSecure
nsListIter
&
aIter
)
;
void
TelemetryForEvictingStaleCookie
(
nsCookie
*
aEvicted
int64_t
oldestCookieTime
)
;
void
NotifyRejected
(
nsIURI
*
aHostURI
)
;
void
NotifyThirdParty
(
nsIURI
*
aHostURI
bool
aAccepted
nsIChannel
*
aChannel
)
;
void
NotifyChanged
(
nsISupports
*
aSubject
const
char16_t
*
aData
bool
aOldCookieIsSession
=
false
)
;
void
NotifyPurged
(
nsICookie2
*
aCookie
)
;
already_AddRefed
<
nsIArray
>
CreatePurgeList
(
nsICookie2
*
aCookie
)
;
void
UpdateCookieOldestTime
(
DBState
*
aDBState
nsCookie
*
aCookie
)
;
nsresult
GetCookiesWithOriginAttributes
(
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
const
nsCString
&
aBaseDomain
nsISimpleEnumerator
*
*
aEnumerator
)
;
nsresult
RemoveCookiesWithOriginAttributes
(
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
const
nsCString
&
aBaseDomain
)
;
nsresult
Remove
(
const
nsACString
&
aHost
const
OriginAttributes
&
aAttrs
const
nsACString
&
aName
const
nsACString
&
aPath
bool
aBlocked
)
;
protected
:
nsCOMPtr
<
nsICookiePermission
>
mPermissionService
;
nsCOMPtr
<
mozIThirdPartyUtil
>
mThirdPartyUtil
;
nsCOMPtr
<
nsIEffectiveTLDService
>
mTLDService
;
nsCOMPtr
<
nsIIDNService
>
mIDNService
;
nsCOMPtr
<
mozIStorageService
>
mStorageService
;
DBState
*
mDBState
;
RefPtr
<
DBState
>
mDefaultDBState
;
RefPtr
<
DBState
>
mPrivateDBState
;
uint8_t
mCookieBehavior
;
bool
mThirdPartySession
;
bool
mLeaveSecureAlone
;
uint16_t
mMaxNumberOfCookies
;
uint16_t
mMaxCookiesPerHost
;
int64_t
mCookiePurgeAge
;
friend
class
DBListenerErrorHandler
;
friend
class
ReadCookieDBListener
;
friend
class
CloseCookieDBListener
;
static
nsCookieService
*
GetSingleton
(
)
;
friend
class
mozilla
:
:
net
:
:
CookieServiceParent
;
}
;
#
endif
