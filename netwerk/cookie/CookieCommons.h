#
ifndef
mozilla_net_CookieCommons_h
#
define
mozilla_net_CookieCommons_h
#
include
<
cstdint
>
#
include
<
functional
>
#
include
"
prtime
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsICookie
.
h
"
class
nsIChannel
;
class
nsIConsoleReportCollector
;
class
nsICookieJarSettings
;
class
nsIEffectiveTLDService
;
class
nsIPrincipal
;
class
nsIURI
;
namespace
mozilla
{
namespace
dom
{
class
Document
;
}
namespace
net
{
enum
CookieOperation
{
OPERATION_READ
OPERATION_WRITE
}
;
enum
CookieStatus
{
STATUS_ACCEPTED
STATUS_ACCEPT_SESSION
STATUS_REJECTED
STATUS_REJECTED_WITH_ERROR
}
;
class
Cookie
;
static
const
char
kPrefMaxNumberOfCookies
[
]
=
"
network
.
cookie
.
maxNumber
"
;
static
const
char
kPrefMaxCookiesPerHost
[
]
=
"
network
.
cookie
.
maxPerHost
"
;
static
const
char
kPrefCookieQuotaPerHost
[
]
=
"
network
.
cookie
.
quotaPerHost
"
;
static
const
char
kPrefCookiePurgeAge
[
]
=
"
network
.
cookie
.
purgeAge
"
;
static
const
uint32_t
kMaxCookiesPerHost
=
180
;
static
const
uint32_t
kCookieQuotaPerHost
=
150
;
static
const
uint32_t
kMaxNumberOfCookies
=
3000
;
static
const
uint32_t
kMaxBytesPerCookie
=
4096
;
static
const
uint32_t
kMaxBytesPerPath
=
1024
;
static
const
int64_t
kCookiePurgeAge
=
int64_t
(
30
*
24
*
60
*
60
)
*
PR_USEC_PER_SEC
;
class
CookieCommons
final
{
public
:
static
bool
DomainMatches
(
Cookie
*
aCookie
const
nsACString
&
aHost
)
;
static
bool
PathMatches
(
Cookie
*
aCookie
const
nsACString
&
aPath
)
;
static
nsresult
GetBaseDomain
(
nsIEffectiveTLDService
*
aTLDService
nsIURI
*
aHostURI
nsACString
&
aBaseDomain
bool
&
aRequireHostMatch
)
;
static
nsresult
GetBaseDomain
(
nsIPrincipal
*
aPrincipal
nsACString
&
aBaseDomain
)
;
static
nsresult
GetBaseDomainFromHost
(
nsIEffectiveTLDService
*
aTLDService
const
nsACString
&
aHost
nsCString
&
aBaseDomain
)
;
static
void
NotifyRejected
(
nsIURI
*
aHostURI
nsIChannel
*
aChannel
uint32_t
aRejectedReason
CookieOperation
aOperation
)
;
static
bool
CheckPathSize
(
const
CookieStruct
&
aCookieData
)
;
static
bool
CheckNameAndValueSize
(
const
CookieStruct
&
aCookieData
)
;
static
bool
CheckName
(
const
CookieStruct
&
aCookieData
)
;
static
bool
CheckHttpValue
(
const
CookieStruct
&
aCookieData
)
;
static
bool
CheckCookiePermission
(
nsIChannel
*
aChannel
CookieStruct
&
aCookieData
)
;
static
bool
CheckCookiePermission
(
nsIPrincipal
*
aPrincipal
nsICookieJarSettings
*
aCookieJarSettings
CookieStruct
&
aCookieData
)
;
static
already_AddRefed
<
Cookie
>
CreateCookieFromDocument
(
dom
:
:
Document
*
aDocument
const
nsACString
&
aCookieString
int64_t
aCurrentTimeInUsec
nsIEffectiveTLDService
*
aTLDService
mozIThirdPartyUtil
*
aThirdPartyUtil
std
:
:
function
<
bool
(
const
nsACString
&
const
OriginAttributes
&
)
>
&
&
aHasExistingCookiesLambda
nsIURI
*
*
aDocumentURI
nsACString
&
aBaseDomain
OriginAttributes
&
aAttrs
)
;
static
already_AddRefed
<
nsICookieJarSettings
>
GetCookieJarSettings
(
nsIChannel
*
aChannel
)
;
static
bool
ShouldIncludeCrossSiteCookieForDocument
(
Cookie
*
aCookie
)
;
static
bool
MaybeCompareSchemeWithLogging
(
nsIConsoleReportCollector
*
aCRC
nsIURI
*
aHostURI
Cookie
*
aCookie
nsICookie
:
:
schemeType
aSchemeType
)
;
static
bool
MaybeCompareScheme
(
Cookie
*
aCookie
nsICookie
:
:
schemeType
aSchemeType
)
;
static
bool
IsSchemeSupported
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
IsSchemeSupported
(
nsIURI
*
aURI
)
;
static
bool
IsSchemeSupported
(
const
nsACString
&
aScheme
)
;
static
nsICookie
:
:
schemeType
URIToSchemeType
(
nsIURI
*
aURI
)
;
static
nsICookie
:
:
schemeType
PrincipalToSchemeType
(
nsIPrincipal
*
aPrincipal
)
;
static
nsICookie
:
:
schemeType
SchemeToSchemeType
(
const
nsACString
&
aScheme
)
;
static
bool
IsSafeTopLevelNav
(
nsIChannel
*
aChannel
)
;
static
bool
IsSameSiteForeign
(
nsIChannel
*
aChannel
nsIURI
*
aHostURI
)
;
}
;
}
}
#
endif
