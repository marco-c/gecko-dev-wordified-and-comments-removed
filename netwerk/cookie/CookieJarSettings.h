#
ifndef
mozilla_net_CookieJarSettings_h
#
define
mozilla_net_CookieJarSettings_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsICookieJarSettings
.
h
"
#
include
"
nsTArray
.
h
"
#
define
COOKIEJARSETTINGS_CONTRACTID
"
mozilla
.
org
/
cookieJarSettings
;
1
"
#
define
COOKIEJARSETTINGS_CID
\
{
\
0x4ce234f1
0x52e8
0x47a9
{
\
0x8c
0x8d
0xb0
0x2f
0x81
0x57
0x33
0xc7
\
}
\
}
class
nsIPermission
;
namespace
mozilla
{
namespace
net
{
class
CookieJarSettingsArgs
;
class
CookieJarSettings
final
:
public
nsICookieJarSettings
{
public
:
typedef
nsTArray
<
RefPtr
<
nsIPermission
>
>
CookiePermissionList
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICOOKIEJARSETTINGS
NS_DECL_NSISERIALIZABLE
static
already_AddRefed
<
nsICookieJarSettings
>
GetBlockingAll
(
bool
aShouldResistFingerprinting
)
;
enum
CreateMode
{
eRegular
ePrivate
}
;
static
already_AddRefed
<
nsICookieJarSettings
>
Create
(
CreateMode
aMode
bool
aShouldResistFingerprinting
)
;
static
already_AddRefed
<
nsICookieJarSettings
>
Create
(
nsIPrincipal
*
aPrincipal
)
;
static
already_AddRefed
<
nsICookieJarSettings
>
CreateForXPCOM
(
)
;
static
already_AddRefed
<
nsICookieJarSettings
>
Create
(
uint32_t
aCookieBehavior
const
nsAString
&
aPartitionKey
bool
aIsFirstPartyIsolated
bool
aIsOnContentBlockingAllowList
bool
aShouldResistFingerprinting
)
;
static
CookieJarSettings
*
Cast
(
nsICookieJarSettings
*
aCS
)
{
return
static_cast
<
CookieJarSettings
*
>
(
aCS
)
;
}
void
Serialize
(
CookieJarSettingsArgs
&
aData
)
;
static
void
Deserialize
(
const
CookieJarSettingsArgs
&
aData
nsICookieJarSettings
*
*
aCookieJarSettings
)
;
void
Merge
(
const
CookieJarSettingsArgs
&
aData
)
;
bool
HasBeenChanged
(
)
const
{
return
mToBeMerged
;
}
void
UpdateIsOnContentBlockingAllowList
(
nsIChannel
*
aChannel
)
;
void
SetPartitionKey
(
nsIURI
*
aURI
bool
aForeignByAncestorContext
)
;
void
SetPartitionKey
(
const
nsAString
&
aPartitionKey
)
{
mPartitionKey
=
aPartitionKey
;
}
const
nsAString
&
GetPartitionKey
(
)
{
return
mPartitionKey
;
}
;
void
UpdatePartitionKeyForDocumentLoadedByChannel
(
nsIChannel
*
aChannel
)
;
void
SetFingerprintingRandomizationKey
(
const
nsTArray
<
uint8_t
>
&
aKey
)
{
mFingerprintingRandomKey
.
reset
(
)
;
mFingerprintingRandomKey
.
emplace
(
aKey
.
Clone
(
)
)
;
}
static
bool
IsRejectThirdPartyContexts
(
uint32_t
aCookieBehavior
)
;
void
SetTopLevelWindowContextId
(
uint64_t
aId
)
{
mTopLevelWindowContextId
=
aId
;
}
uint64_t
GetTopLevelWindowContextId
(
)
{
return
mTopLevelWindowContextId
;
}
private
:
enum
State
{
eFixed
eProgressive
}
;
CookieJarSettings
(
uint32_t
aCookieBehavior
bool
aIsFirstPartyIsolated
bool
aShouldResistFingerprinting
State
aState
)
;
~
CookieJarSettings
(
)
;
uint32_t
mCookieBehavior
;
bool
mIsFirstPartyIsolated
;
CookiePermissionList
mCookiePermissions
;
bool
mIsOnContentBlockingAllowList
;
bool
mIsOnContentBlockingAllowListUpdated
;
nsString
mPartitionKey
;
State
mState
;
bool
mToBeMerged
;
bool
mShouldResistFingerprinting
;
Maybe
<
nsTArray
<
uint8_t
>
>
mFingerprintingRandomKey
;
uint64_t
mTopLevelWindowContextId
;
}
;
}
}
#
endif
