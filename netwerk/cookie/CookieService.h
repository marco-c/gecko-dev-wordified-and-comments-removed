#
ifndef
mozilla_net_CookieService_h
#
define
mozilla_net_CookieService_h
#
include
"
nsICookieService
.
h
"
#
include
"
nsICookieManager
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
Cookie
.
h
"
#
include
"
CookieCommons
.
h
"
#
include
"
ThirdPartyCookieBlockingExceptions
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
class
nsIConsoleReportCollector
;
class
nsICookieJarSettings
;
class
nsIEffectiveTLDService
;
class
nsIURI
;
class
nsIChannel
;
class
mozIThirdPartyUtil
;
namespace
mozilla
{
namespace
net
{
class
CookiePersistentStorage
;
class
CookiePrivateStorage
;
class
CookieStorage
;
class
CookieService
final
:
public
nsICookieService
public
nsICookieManager
public
nsIObserver
public
nsSupportsWeakReference
public
nsIMemoryReporter
{
private
:
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSICOOKIESERVICE
NS_DECL_NSICOOKIEMANAGER
NS_DECL_NSIMEMORYREPORTER
static
already_AddRefed
<
CookieService
>
GetSingleton
(
)
;
CookieService
(
)
;
static
already_AddRefed
<
nsICookieService
>
GetXPCOMSingleton
(
)
;
nsresult
Init
(
)
;
static
void
Update3PCBExceptionInfo
(
nsIChannel
*
aChannel
)
;
ThirdPartyCookieBlockingExceptions
&
ThirdPartyCookieBlockingExceptionsRef
(
)
{
return
mThirdPartyCookieBlockingExceptions
;
}
static
CookieStatus
CheckPrefs
(
nsIConsoleReportCollector
*
aCRC
nsICookieJarSettings
*
aCookieJarSettings
nsIURI
*
aHostURI
bool
aIsForeign
bool
aIsThirdPartyTrackingResource
bool
aIsThirdPartySocialTrackingResource
bool
aStorageAccessPermissionGranted
const
nsACString
&
aCookieHeader
const
int
aNumOfCookies
const
OriginAttributes
&
aOriginAttrs
uint32_t
*
aRejectedReason
)
;
void
GetCookiesForURI
(
nsIURI
*
aHostURI
nsIChannel
*
aChannel
bool
aIsForeign
bool
aIsThirdPartyTrackingResource
bool
aIsThirdPartySocialTrackingResource
bool
aStorageAccessPermissionGranted
uint32_t
aRejectedReason
bool
aIsSafeTopLevelNav
bool
aIsSameSiteForeign
bool
aHadCrossSiteRedirects
bool
aHttpBound
bool
aAllowSecureCookiesToInsecureOrigin
const
nsTArray
<
OriginAttributes
>
&
aOriginAttrsList
nsTArray
<
RefPtr
<
Cookie
>
>
&
aCookieList
)
;
nsresult
Remove
(
const
nsACString
&
aHost
const
OriginAttributes
&
aAttrs
const
nsACString
&
aName
const
nsACString
&
aPath
const
nsID
*
aOperationID
)
;
bool
SetCookiesFromIPC
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aAttrs
nsIURI
*
aHostURI
bool
aFromHttp
bool
aIsThirdParty
const
nsTArray
<
CookieStruct
>
&
aCookies
dom
:
:
BrowsingContext
*
aBrowsingContext
)
;
protected
:
virtual
~
CookieService
(
)
;
bool
IsInitialized
(
)
const
;
void
InitCookieStorages
(
)
;
void
CloseCookieStorages
(
)
;
nsresult
NormalizeHost
(
nsCString
&
aHost
)
;
void
NotifyAccepted
(
nsIChannel
*
aChannel
)
;
nsresult
GetCookiesWithOriginAttributes
(
const
OriginAttributesPattern
&
aPattern
const
nsCString
&
aBaseDomain
bool
aSorted
nsTArray
<
RefPtr
<
nsICookie
>
>
&
aResult
)
;
nsresult
RemoveCookiesWithOriginAttributes
(
const
OriginAttributesPattern
&
aPattern
const
nsCString
&
aBaseDomain
)
;
protected
:
CookieStorage
*
PickStorage
(
const
OriginAttributes
&
aAttrs
)
;
CookieStorage
*
PickStorage
(
const
OriginAttributesPattern
&
aAttrs
)
;
nsresult
RemoveCookiesFromExactHost
(
const
nsACString
&
aHost
const
OriginAttributesPattern
&
aPattern
)
;
nsCOMPtr
<
mozIThirdPartyUtil
>
mThirdPartyUtil
;
nsCOMPtr
<
nsIEffectiveTLDService
>
mTLDService
;
ThirdPartyCookieBlockingExceptions
mThirdPartyCookieBlockingExceptions
;
RefPtr
<
CookieStorage
>
mPersistentStorage
;
RefPtr
<
CookieStorage
>
mPrivateStorage
;
}
;
}
}
#
endif
