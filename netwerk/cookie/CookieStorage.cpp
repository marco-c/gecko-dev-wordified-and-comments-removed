#
include
"
CookieCommons
.
h
"
#
include
"
CookieLogging
.
h
"
#
include
"
CookieStorage
.
h
"
#
include
"
mozStorageHelper
.
h
"
#
include
"
nsILineInputStream
.
h
"
#
include
"
nsIMutableArray
.
h
"
#
include
"
nsTPriorityQueue
.
h
"
#
include
"
prprf
.
h
"
#
undef
ADD_TEN_PERCENT
#
define
ADD_TEN_PERCENT
(
i
)
static_cast
<
uint32_t
>
(
(
i
)
+
(
i
)
/
10
)
#
undef
LIMIT
#
define
LIMIT
(
x
low
high
default
)
\
(
(
x
)
>
=
(
low
)
&
&
(
x
)
<
=
(
high
)
?
(
x
)
:
(
default
)
)
#
define
HTTP_ONLY_PREFIX
"
#
HttpOnly_
"
namespace
mozilla
{
namespace
net
{
namespace
{
class
CompareCookiesByAge
{
public
:
bool
Equals
(
const
CookieListIter
&
a
const
CookieListIter
&
b
)
const
{
return
a
.
Cookie
(
)
-
>
LastAccessed
(
)
=
=
b
.
Cookie
(
)
-
>
LastAccessed
(
)
&
&
a
.
Cookie
(
)
-
>
CreationTime
(
)
=
=
b
.
Cookie
(
)
-
>
CreationTime
(
)
;
}
bool
LessThan
(
const
CookieListIter
&
a
const
CookieListIter
&
b
)
const
{
int64_t
result
=
a
.
Cookie
(
)
-
>
LastAccessed
(
)
-
b
.
Cookie
(
)
-
>
LastAccessed
(
)
;
if
(
result
!
=
0
)
return
result
<
0
;
return
a
.
Cookie
(
)
-
>
CreationTime
(
)
<
b
.
Cookie
(
)
-
>
CreationTime
(
)
;
}
}
;
class
CookieIterComparator
{
private
:
CompareCookiesByAge
mAgeComparator
;
int64_t
mCurrentTime
;
public
:
explicit
CookieIterComparator
(
int64_t
aTime
)
:
mCurrentTime
(
aTime
)
{
}
bool
LessThan
(
const
CookieListIter
&
lhs
const
CookieListIter
&
rhs
)
{
bool
lExpired
=
lhs
.
Cookie
(
)
-
>
Expiry
(
)
<
=
mCurrentTime
;
bool
rExpired
=
rhs
.
Cookie
(
)
-
>
Expiry
(
)
<
=
mCurrentTime
;
if
(
lExpired
&
&
!
rExpired
)
{
return
true
;
}
if
(
!
lExpired
&
&
rExpired
)
{
return
false
;
}
return
mAgeComparator
.
LessThan
(
lhs
rhs
)
;
}
}
;
class
CompareCookiesByIndex
{
public
:
bool
Equals
(
const
CookieListIter
&
a
const
CookieListIter
&
b
)
const
{
NS_ASSERTION
(
a
.
entry
!
=
b
.
entry
|
|
a
.
index
!
=
b
.
index
"
cookie
indexes
should
never
be
equal
"
)
;
return
false
;
}
bool
LessThan
(
const
CookieListIter
&
a
const
CookieListIter
&
b
)
const
{
if
(
a
.
entry
!
=
b
.
entry
)
return
a
.
entry
<
b
.
entry
;
return
a
.
index
<
b
.
index
;
}
}
;
void
BindCookieParameters
(
mozIStorageBindingParamsArray
*
aParamsArray
const
CookieKey
&
aKey
const
Cookie
*
aCookie
)
{
NS_ASSERTION
(
aParamsArray
"
Null
params
array
passed
to
BindCookieParameters
!
"
)
;
NS_ASSERTION
(
aCookie
"
Null
cookie
passed
to
BindCookieParameters
!
"
)
;
nsCOMPtr
<
mozIStorageBindingParams
>
params
;
DebugOnly
<
nsresult
>
rv
=
aParamsArray
-
>
NewBindingParams
(
getter_AddRefs
(
params
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
nsAutoCString
suffix
;
aKey
.
mOriginAttributes
.
CreateSuffix
(
suffix
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
originAttributes
"
)
suffix
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
name
"
)
aCookie
-
>
Name
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
value
"
)
aCookie
-
>
Value
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
host
"
)
aCookie
-
>
Host
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
path
"
)
aCookie
-
>
Path
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindInt64ByName
(
NS_LITERAL_CSTRING
(
"
expiry
"
)
aCookie
-
>
Expiry
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindInt64ByName
(
NS_LITERAL_CSTRING
(
"
lastAccessed
"
)
aCookie
-
>
LastAccessed
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindInt64ByName
(
NS_LITERAL_CSTRING
(
"
creationTime
"
)
aCookie
-
>
CreationTime
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindInt32ByName
(
NS_LITERAL_CSTRING
(
"
isSecure
"
)
aCookie
-
>
IsSecure
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindInt32ByName
(
NS_LITERAL_CSTRING
(
"
isHttpOnly
"
)
aCookie
-
>
IsHttpOnly
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindInt32ByName
(
NS_LITERAL_CSTRING
(
"
sameSite
"
)
aCookie
-
>
SameSite
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindInt32ByName
(
NS_LITERAL_CSTRING
(
"
rawSameSite
"
)
aCookie
-
>
RawSameSite
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
aParamsArray
-
>
AddParams
(
params
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
}
size_t
CookieEntry
:
:
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
amount
=
CookieKey
:
:
SizeOfExcludingThis
(
aMallocSizeOf
)
;
amount
+
=
mCookies
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
for
(
uint32_t
i
=
0
;
i
<
mCookies
.
Length
(
)
;
+
+
i
)
{
amount
+
=
mCookies
[
i
]
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
return
amount
;
}
NS_IMPL_ISUPPORTS
(
CookieStorage
nsIObserver
nsISupportsWeakReference
)
CookieStorage
:
:
CookieStorage
(
)
:
cookieCount
(
0
)
cookieOldestTime
(
INT64_MAX
)
mMaxNumberOfCookies
(
kMaxNumberOfCookies
)
mMaxCookiesPerHost
(
kMaxCookiesPerHost
)
mCookieQuotaPerHost
(
kCookieQuotaPerHost
)
mCookiePurgeAge
(
kCookiePurgeAge
)
{
}
CookieStorage
:
:
~
CookieStorage
(
)
=
default
;
void
CookieStorage
:
:
Init
(
)
{
nsCOMPtr
<
nsIPrefBranch
>
prefBranch
=
do_GetService
(
NS_PREFSERVICE_CONTRACTID
)
;
if
(
prefBranch
)
{
prefBranch
-
>
AddObserver
(
kPrefMaxNumberOfCookies
this
true
)
;
prefBranch
-
>
AddObserver
(
kPrefMaxCookiesPerHost
this
true
)
;
prefBranch
-
>
AddObserver
(
kPrefCookiePurgeAge
this
true
)
;
PrefChanged
(
prefBranch
)
;
}
}
size_t
CookieStorage
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
amount
=
0
;
amount
+
=
aMallocSizeOf
(
this
)
;
amount
+
=
hostTable
.
SizeOfExcludingThis
(
aMallocSizeOf
)
;
return
amount
;
}
void
CookieStorage
:
:
GetCookies
(
nsTArray
<
RefPtr
<
nsICookie
>
>
&
aCookies
)
const
{
aCookies
.
SetCapacity
(
cookieCount
)
;
for
(
auto
iter
=
hostTable
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
CookieEntry
:
:
ArrayType
&
cookies
=
iter
.
Get
(
)
-
>
GetCookies
(
)
;
for
(
CookieEntry
:
:
IndexType
i
=
0
;
i
<
cookies
.
Length
(
)
;
+
+
i
)
{
aCookies
.
AppendElement
(
cookies
[
i
]
)
;
}
}
}
void
CookieStorage
:
:
GetSessionCookies
(
nsTArray
<
RefPtr
<
nsICookie
>
>
&
aCookies
)
const
{
aCookies
.
SetCapacity
(
cookieCount
)
;
for
(
auto
iter
=
hostTable
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
CookieEntry
:
:
ArrayType
&
cookies
=
iter
.
Get
(
)
-
>
GetCookies
(
)
;
for
(
CookieEntry
:
:
IndexType
i
=
0
;
i
<
cookies
.
Length
(
)
;
+
+
i
)
{
Cookie
*
cookie
=
cookies
[
i
]
;
if
(
cookie
-
>
IsSession
(
)
)
{
aCookies
.
AppendElement
(
cookie
)
;
}
}
}
}
bool
CookieStorage
:
:
FindCookie
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aHost
const
nsACString
&
aName
const
nsACString
&
aPath
CookieListIter
&
aIter
)
{
CookieEntry
*
entry
=
hostTable
.
GetEntry
(
CookieKey
(
aBaseDomain
aOriginAttributes
)
)
;
if
(
!
entry
)
{
return
false
;
}
const
CookieEntry
:
:
ArrayType
&
cookies
=
entry
-
>
GetCookies
(
)
;
for
(
CookieEntry
:
:
IndexType
i
=
0
;
i
<
cookies
.
Length
(
)
;
+
+
i
)
{
Cookie
*
cookie
=
cookies
[
i
]
;
if
(
aHost
.
Equals
(
cookie
-
>
Host
(
)
)
&
&
aPath
.
Equals
(
cookie
-
>
Path
(
)
)
&
&
aName
.
Equals
(
cookie
-
>
Name
(
)
)
)
{
aIter
=
CookieListIter
(
entry
i
)
;
return
true
;
}
}
return
false
;
}
bool
CookieStorage
:
:
FindSecureCookie
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
Cookie
*
aCookie
)
{
CookieEntry
*
entry
=
hostTable
.
GetEntry
(
CookieKey
(
aBaseDomain
aOriginAttributes
)
)
;
if
(
!
entry
)
return
false
;
const
CookieEntry
:
:
ArrayType
&
cookies
=
entry
-
>
GetCookies
(
)
;
for
(
CookieEntry
:
:
IndexType
i
=
0
;
i
<
cookies
.
Length
(
)
;
+
+
i
)
{
Cookie
*
cookie
=
cookies
[
i
]
;
if
(
!
cookie
-
>
IsSecure
(
)
|
|
!
aCookie
-
>
Name
(
)
.
Equals
(
cookie
-
>
Name
(
)
)
)
continue
;
if
(
nsCookieService
:
:
DomainMatches
(
cookie
aCookie
-
>
Host
(
)
)
|
|
nsCookieService
:
:
DomainMatches
(
aCookie
cookie
-
>
Host
(
)
)
)
{
if
(
nsCookieService
:
:
PathMatches
(
cookie
aCookie
-
>
GetFilePath
(
)
)
)
{
return
true
;
}
}
}
return
false
;
}
uint32_t
CookieStorage
:
:
CountCookiesFromHost
(
const
nsACString
&
aBaseDomain
uint32_t
aPrivateBrowsingId
)
{
OriginAttributes
attrs
;
attrs
.
mPrivateBrowsingId
=
aPrivateBrowsingId
;
CookieEntry
*
entry
=
hostTable
.
GetEntry
(
CookieKey
(
aBaseDomain
attrs
)
)
;
return
entry
?
entry
-
>
GetCookies
(
)
.
Length
(
)
:
0
;
}
void
CookieStorage
:
:
GetAll
(
nsTArray
<
RefPtr
<
nsICookie
>
>
&
aResult
)
const
{
aResult
.
SetCapacity
(
cookieCount
)
;
for
(
auto
iter
=
hostTable
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
CookieEntry
:
:
ArrayType
&
cookies
=
iter
.
Get
(
)
-
>
GetCookies
(
)
;
for
(
CookieEntry
:
:
IndexType
i
=
0
;
i
<
cookies
.
Length
(
)
;
+
+
i
)
{
aResult
.
AppendElement
(
cookies
[
i
]
)
;
}
}
}
const
nsTArray
<
RefPtr
<
Cookie
>
>
*
CookieStorage
:
:
GetCookiesFromHost
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
)
{
CookieEntry
*
entry
=
hostTable
.
GetEntry
(
CookieKey
(
aBaseDomain
aOriginAttributes
)
)
;
return
entry
?
&
entry
-
>
GetCookies
(
)
:
nullptr
;
}
void
CookieStorage
:
:
GetCookiesWithOriginAttributes
(
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
const
nsACString
&
aBaseDomain
nsTArray
<
RefPtr
<
nsICookie
>
>
&
aResult
)
{
for
(
auto
iter
=
hostTable
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
CookieEntry
*
entry
=
iter
.
Get
(
)
;
if
(
!
aBaseDomain
.
IsEmpty
(
)
&
&
!
aBaseDomain
.
Equals
(
entry
-
>
mBaseDomain
)
)
{
continue
;
}
if
(
!
aPattern
.
Matches
(
entry
-
>
mOriginAttributes
)
)
{
continue
;
}
const
CookieEntry
:
:
ArrayType
&
entryCookies
=
entry
-
>
GetCookies
(
)
;
for
(
CookieEntry
:
:
IndexType
i
=
0
;
i
<
entryCookies
.
Length
(
)
;
+
+
i
)
{
aResult
.
AppendElement
(
entryCookies
[
i
]
)
;
}
}
}
void
CookieStorage
:
:
RemoveCookie
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aHost
const
nsACString
&
aName
const
nsACString
&
aPath
)
{
CookieListIter
matchIter
;
RefPtr
<
Cookie
>
cookie
;
if
(
FindCookie
(
aBaseDomain
aOriginAttributes
aHost
aName
aPath
matchIter
)
)
{
cookie
=
matchIter
.
Cookie
(
)
;
RemoveCookieFromList
(
matchIter
)
;
}
if
(
cookie
)
{
NotifyChanged
(
cookie
u
"
deleted
"
)
;
}
}
void
CookieStorage
:
:
RemoveCookiesWithOriginAttributes
(
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
const
nsACString
&
aBaseDomain
)
{
for
(
auto
iter
=
hostTable
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
CookieEntry
*
entry
=
iter
.
Get
(
)
;
if
(
!
aBaseDomain
.
IsEmpty
(
)
&
&
!
aBaseDomain
.
Equals
(
entry
-
>
mBaseDomain
)
)
{
continue
;
}
if
(
!
aPattern
.
Matches
(
entry
-
>
mOriginAttributes
)
)
{
continue
;
}
uint32_t
cookiesCount
=
entry
-
>
GetCookies
(
)
.
Length
(
)
;
for
(
CookieEntry
:
:
IndexType
i
=
0
;
i
<
cookiesCount
;
+
+
i
)
{
CookieListIter
iter
(
entry
0
)
;
RefPtr
<
Cookie
>
cookie
=
iter
.
Cookie
(
)
;
RemoveCookieFromList
(
iter
)
;
if
(
cookie
)
{
NotifyChanged
(
cookie
u
"
deleted
"
)
;
}
}
}
}
void
CookieStorage
:
:
RemoveCookiesFromExactHost
(
const
nsACString
&
aHost
const
nsACString
&
aBaseDomain
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
)
{
for
(
auto
iter
=
hostTable
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
CookieEntry
*
entry
=
iter
.
Get
(
)
;
if
(
!
aBaseDomain
.
Equals
(
entry
-
>
mBaseDomain
)
)
{
continue
;
}
if
(
!
aPattern
.
Matches
(
entry
-
>
mOriginAttributes
)
)
{
continue
;
}
uint32_t
cookiesCount
=
entry
-
>
GetCookies
(
)
.
Length
(
)
;
for
(
CookieEntry
:
:
IndexType
i
=
cookiesCount
;
i
!
=
0
;
-
-
i
)
{
CookieListIter
iter
(
entry
i
-
1
)
;
RefPtr
<
Cookie
>
cookie
=
iter
.
Cookie
(
)
;
if
(
!
aHost
.
Equals
(
cookie
-
>
RawHost
(
)
)
)
{
continue
;
}
RemoveCookieFromList
(
iter
)
;
if
(
cookie
)
{
NotifyChanged
(
cookie
u
"
deleted
"
)
;
}
}
}
}
void
CookieStorage
:
:
RemoveAll
(
)
{
hostTable
.
Clear
(
)
;
cookieCount
=
0
;
cookieOldestTime
=
INT64_MAX
;
RemoveAllInternal
(
)
;
NotifyChanged
(
nullptr
u
"
cleared
"
)
;
}
void
CookieStorage
:
:
NotifyChanged
(
nsISupports
*
aSubject
const
char16_t
*
aData
bool
aOldCookieIsSession
bool
aFromHttp
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
!
os
)
{
return
;
}
os
-
>
NotifyObservers
(
aSubject
NotificationTopic
(
)
aData
)
;
NotifyChangedInternal
(
aSubject
aData
aOldCookieIsSession
)
;
}
void
CookieStorage
:
:
AddCookie
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
Cookie
*
aCookie
int64_t
aCurrentTimeInUsec
nsIURI
*
aHostURI
const
nsACString
&
aCookieHeader
bool
aFromHttp
)
{
int64_t
currentTime
=
aCurrentTimeInUsec
/
PR_USEC_PER_SEC
;
CookieListIter
exactIter
;
bool
foundCookie
=
false
;
foundCookie
=
FindCookie
(
aBaseDomain
aOriginAttributes
aCookie
-
>
Host
(
)
aCookie
-
>
Name
(
)
aCookie
-
>
Path
(
)
exactIter
)
;
bool
foundSecureExact
=
foundCookie
&
&
exactIter
.
Cookie
(
)
-
>
IsSecure
(
)
;
bool
isSecure
=
true
;
if
(
aHostURI
)
{
isSecure
=
aHostURI
-
>
SchemeIs
(
"
https
"
)
;
}
bool
oldCookieIsSession
=
false
;
if
(
!
aCookie
-
>
IsSecure
(
)
&
&
(
foundSecureExact
|
|
FindSecureCookie
(
aBaseDomain
aOriginAttributes
aCookie
)
)
&
&
!
isSecure
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
aHostURI
aCookieHeader
"
cookie
can
'
t
save
because
older
cookie
is
secure
"
"
cookie
but
newer
cookie
is
non
-
secure
cookie
"
)
;
return
;
}
RefPtr
<
Cookie
>
oldCookie
;
nsCOMPtr
<
nsIArray
>
purgedList
;
if
(
foundCookie
)
{
oldCookie
=
exactIter
.
Cookie
(
)
;
oldCookieIsSession
=
oldCookie
-
>
IsSession
(
)
;
if
(
oldCookie
-
>
Expiry
(
)
<
=
currentTime
)
{
if
(
aCookie
-
>
Expiry
(
)
<
=
currentTime
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
aHostURI
aCookieHeader
"
cookie
has
already
expired
"
)
;
return
;
}
RemoveCookieFromList
(
exactIter
)
;
COOKIE_LOGFAILURE
(
SET_COOKIE
aHostURI
aCookieHeader
"
stale
cookie
was
purged
"
)
;
purgedList
=
CreatePurgeList
(
oldCookie
)
;
foundCookie
=
false
;
}
else
{
if
(
!
aFromHttp
&
&
oldCookie
-
>
IsHttpOnly
(
)
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
aHostURI
aCookieHeader
"
previously
stored
cookie
is
httponly
;
coming
from
script
"
)
;
return
;
}
if
(
oldCookie
-
>
Value
(
)
.
Equals
(
aCookie
-
>
Value
(
)
)
&
&
oldCookie
-
>
Expiry
(
)
=
=
aCookie
-
>
Expiry
(
)
&
&
oldCookie
-
>
IsSecure
(
)
=
=
aCookie
-
>
IsSecure
(
)
&
&
oldCookie
-
>
IsSession
(
)
=
=
aCookie
-
>
IsSession
(
)
&
&
oldCookie
-
>
IsHttpOnly
(
)
=
=
aCookie
-
>
IsHttpOnly
(
)
&
&
oldCookie
-
>
SameSite
(
)
=
=
aCookie
-
>
SameSite
(
)
&
&
!
oldCookie
-
>
IsStale
(
)
)
{
oldCookie
-
>
SetLastAccessed
(
aCookie
-
>
LastAccessed
(
)
)
;
UpdateCookieOldestTime
(
oldCookie
)
;
return
;
}
RemoveCookieFromList
(
exactIter
)
;
if
(
aCookie
-
>
Expiry
(
)
<
=
currentTime
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
aHostURI
aCookieHeader
"
previously
stored
cookie
was
deleted
"
)
;
NotifyChanged
(
oldCookie
u
"
deleted
"
oldCookieIsSession
aFromHttp
)
;
return
;
}
aCookie
-
>
SetCreationTime
(
oldCookie
-
>
CreationTime
(
)
)
;
}
}
else
{
if
(
aCookie
-
>
Expiry
(
)
<
=
currentTime
)
{
COOKIE_LOGFAILURE
(
SET_COOKIE
aHostURI
aCookieHeader
"
cookie
has
already
expired
"
)
;
return
;
}
CookieEntry
*
entry
=
hostTable
.
GetEntry
(
CookieKey
(
aBaseDomain
aOriginAttributes
)
)
;
if
(
entry
&
&
entry
-
>
GetCookies
(
)
.
Length
(
)
>
=
mMaxCookiesPerHost
)
{
nsTArray
<
CookieListIter
>
removedIterList
;
uint32_t
limit
=
mMaxCookiesPerHost
-
mCookieQuotaPerHost
;
FindStaleCookies
(
entry
currentTime
false
removedIterList
limit
)
;
if
(
removedIterList
.
Length
(
)
=
=
0
)
{
if
(
aCookie
-
>
IsSecure
(
)
)
{
FindStaleCookies
(
entry
currentTime
true
removedIterList
limit
)
;
}
else
{
COOKIE_LOGEVICTED
(
aCookie
"
Too
many
cookies
for
this
domain
and
the
new
"
"
cookie
is
not
a
secure
cookie
"
)
;
return
;
}
}
MOZ_ASSERT
(
!
removedIterList
.
IsEmpty
(
)
)
;
removedIterList
.
Sort
(
CompareCookiesByIndex
(
)
)
;
for
(
auto
it
=
removedIterList
.
rbegin
(
)
;
it
!
=
removedIterList
.
rend
(
)
;
it
+
+
)
{
RefPtr
<
Cookie
>
evictedCookie
=
(
*
it
)
.
Cookie
(
)
;
COOKIE_LOGEVICTED
(
evictedCookie
"
Too
many
cookies
for
this
domain
"
)
;
RemoveCookieFromList
(
*
it
)
;
CreateOrUpdatePurgeList
(
getter_AddRefs
(
purgedList
)
evictedCookie
)
;
MOZ_ASSERT
(
(
*
it
)
.
entry
)
;
}
}
else
if
(
cookieCount
>
=
ADD_TEN_PERCENT
(
mMaxNumberOfCookies
)
)
{
int64_t
maxAge
=
aCurrentTimeInUsec
-
cookieOldestTime
;
int64_t
purgeAge
=
ADD_TEN_PERCENT
(
mCookiePurgeAge
)
;
if
(
maxAge
>
=
purgeAge
)
{
purgedList
=
PurgeCookies
(
aCurrentTimeInUsec
mMaxNumberOfCookies
mCookiePurgeAge
)
;
}
}
}
AddCookieToList
(
aBaseDomain
aOriginAttributes
aCookie
nullptr
)
;
COOKIE_LOGSUCCESS
(
SET_COOKIE
aHostURI
aCookieHeader
aCookie
foundCookie
)
;
if
(
purgedList
)
{
NotifyChanged
(
purgedList
u
"
batch
-
deleted
"
)
;
}
NotifyChanged
(
aCookie
foundCookie
?
u
"
changed
"
:
u
"
added
"
oldCookieIsSession
aFromHttp
)
;
}
void
CookieStorage
:
:
UpdateCookieOldestTime
(
Cookie
*
aCookie
)
{
if
(
aCookie
-
>
LastAccessed
(
)
<
cookieOldestTime
)
{
cookieOldestTime
=
aCookie
-
>
LastAccessed
(
)
;
}
}
void
CookieStorage
:
:
AddCookieToList
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
Cookie
*
aCookie
mozIStorageBindingParamsArray
*
aParamsArray
bool
aWriteToDB
)
{
if
(
!
aCookie
)
{
NS_WARNING
(
"
Attempting
to
AddCookieToList
with
null
cookie
"
)
;
return
;
}
CookieKey
key
(
aBaseDomain
aOriginAttributes
)
;
CookieEntry
*
entry
=
hostTable
.
PutEntry
(
key
)
;
NS_ASSERTION
(
entry
"
can
'
t
insert
element
into
a
null
entry
!
"
)
;
entry
-
>
GetCookies
(
)
.
AppendElement
(
aCookie
)
;
+
+
cookieCount
;
UpdateCookieOldestTime
(
aCookie
)
;
if
(
aWriteToDB
&
&
!
aCookie
-
>
IsSession
(
)
)
{
WriteCookieToDB
(
aBaseDomain
aOriginAttributes
aCookie
aParamsArray
)
;
}
}
already_AddRefed
<
nsIArray
>
CookieStorage
:
:
CreatePurgeList
(
nsICookie
*
aCookie
)
{
nsCOMPtr
<
nsIMutableArray
>
removedList
=
do_CreateInstance
(
NS_ARRAY_CONTRACTID
)
;
removedList
-
>
AppendElement
(
aCookie
)
;
return
removedList
.
forget
(
)
;
}
void
CookieStorage
:
:
FindStaleCookies
(
CookieEntry
*
aEntry
int64_t
aCurrentTime
bool
aIsSecure
nsTArray
<
CookieListIter
>
&
aOutput
uint32_t
aLimit
)
{
MOZ_ASSERT
(
aLimit
)
;
const
CookieEntry
:
:
ArrayType
&
cookies
=
aEntry
-
>
GetCookies
(
)
;
aOutput
.
Clear
(
)
;
CookieIterComparator
comp
(
aCurrentTime
)
;
nsTPriorityQueue
<
CookieListIter
CookieIterComparator
>
queue
(
comp
)
;
for
(
CookieEntry
:
:
IndexType
i
=
0
;
i
<
cookies
.
Length
(
)
;
+
+
i
)
{
Cookie
*
cookie
=
cookies
[
i
]
;
if
(
cookie
-
>
Expiry
(
)
<
=
aCurrentTime
)
{
queue
.
Push
(
CookieListIter
(
aEntry
i
)
)
;
continue
;
}
if
(
!
aIsSecure
)
{
if
(
cookie
-
>
IsSecure
(
)
)
{
continue
;
}
}
queue
.
Push
(
CookieListIter
(
aEntry
i
)
)
;
}
uint32_t
count
=
0
;
while
(
!
queue
.
IsEmpty
(
)
&
&
count
<
aLimit
)
{
aOutput
.
AppendElement
(
queue
.
Pop
(
)
)
;
count
+
+
;
}
}
void
CookieStorage
:
:
CreateOrUpdatePurgeList
(
nsIArray
*
*
aPurgedList
nsICookie
*
aCookie
)
{
if
(
!
*
aPurgedList
)
{
COOKIE_LOGSTRING
(
LogLevel
:
:
Debug
(
"
Creating
new
purge
list
"
)
)
;
nsCOMPtr
<
nsIArray
>
purgedList
=
CreatePurgeList
(
aCookie
)
;
purgedList
.
forget
(
aPurgedList
)
;
return
;
}
nsCOMPtr
<
nsIMutableArray
>
purgedList
=
do_QueryInterface
(
*
aPurgedList
)
;
if
(
purgedList
)
{
COOKIE_LOGSTRING
(
LogLevel
:
:
Debug
(
"
Updating
existing
purge
list
"
)
)
;
purgedList
-
>
AppendElement
(
aCookie
)
;
}
else
{
COOKIE_LOGSTRING
(
LogLevel
:
:
Debug
(
"
Could
not
QI
aPurgedList
!
"
)
)
;
}
}
already_AddRefed
<
nsIArray
>
CookieStorage
:
:
PurgeCookies
(
int64_t
aCurrentTimeInUsec
uint16_t
aMaxNumberOfCookies
int64_t
aCookiePurgeAge
)
{
NS_ASSERTION
(
hostTable
.
Count
(
)
>
0
"
table
is
empty
"
)
;
uint32_t
initialCookieCount
=
cookieCount
;
COOKIE_LOGSTRING
(
LogLevel
:
:
Debug
(
"
PurgeCookies
(
)
:
beginning
purge
with
%
"
PRIu32
"
cookies
and
%
"
PRId64
"
oldest
age
"
cookieCount
aCurrentTimeInUsec
-
cookieOldestTime
)
)
;
typedef
nsTArray
<
CookieListIter
>
PurgeList
;
PurgeList
purgeList
(
kMaxNumberOfCookies
)
;
nsCOMPtr
<
nsIMutableArray
>
removedList
=
do_CreateInstance
(
NS_ARRAY_CONTRACTID
)
;
nsCOMPtr
<
mozIStorageBindingParamsArray
>
paramsArray
;
MaybeCreateDeleteBindingParamsArray
(
getter_AddRefs
(
paramsArray
)
)
;
int64_t
currentTime
=
aCurrentTimeInUsec
/
PR_USEC_PER_SEC
;
int64_t
purgeTime
=
aCurrentTimeInUsec
-
aCookiePurgeAge
;
int64_t
oldestTime
=
INT64_MAX
;
for
(
auto
iter
=
hostTable
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
CookieEntry
*
entry
=
iter
.
Get
(
)
;
const
CookieEntry
:
:
ArrayType
&
cookies
=
entry
-
>
GetCookies
(
)
;
auto
length
=
cookies
.
Length
(
)
;
for
(
CookieEntry
:
:
IndexType
i
=
0
;
i
<
length
;
)
{
CookieListIter
iter
(
entry
i
)
;
Cookie
*
cookie
=
cookies
[
i
]
;
if
(
cookie
-
>
Expiry
(
)
<
=
currentTime
)
{
removedList
-
>
AppendElement
(
cookie
)
;
COOKIE_LOGEVICTED
(
cookie
"
Cookie
expired
"
)
;
RemoveCookieFromList
(
iter
paramsArray
)
;
if
(
i
=
=
-
-
length
)
{
break
;
}
}
else
{
if
(
cookie
-
>
LastAccessed
(
)
<
=
purgeTime
)
{
purgeList
.
AppendElement
(
iter
)
;
}
else
if
(
cookie
-
>
LastAccessed
(
)
<
oldestTime
)
{
oldestTime
=
cookie
-
>
LastAccessed
(
)
;
}
+
+
i
;
}
MOZ_ASSERT
(
length
=
=
cookies
.
Length
(
)
)
;
}
}
uint32_t
postExpiryCookieCount
=
cookieCount
;
purgeList
.
Sort
(
CompareCookiesByAge
(
)
)
;
uint32_t
excess
=
cookieCount
>
aMaxNumberOfCookies
?
cookieCount
-
aMaxNumberOfCookies
:
0
;
if
(
purgeList
.
Length
(
)
>
excess
)
{
oldestTime
=
purgeList
[
excess
]
.
Cookie
(
)
-
>
LastAccessed
(
)
;
purgeList
.
SetLength
(
excess
)
;
}
purgeList
.
Sort
(
CompareCookiesByIndex
(
)
)
;
for
(
PurgeList
:
:
index_type
i
=
purgeList
.
Length
(
)
;
i
-
-
;
)
{
Cookie
*
cookie
=
purgeList
[
i
]
.
Cookie
(
)
;
removedList
-
>
AppendElement
(
cookie
)
;
COOKIE_LOGEVICTED
(
cookie
"
Cookie
too
old
"
)
;
RemoveCookieFromList
(
purgeList
[
i
]
paramsArray
)
;
}
DeleteFromDB
(
paramsArray
)
;
cookieOldestTime
=
oldestTime
;
COOKIE_LOGSTRING
(
LogLevel
:
:
Debug
(
"
PurgeCookies
(
)
:
%
"
PRIu32
"
expired
;
%
"
PRIu32
"
purged
;
%
"
PRIu32
"
remain
;
%
"
PRId64
"
oldest
age
"
initialCookieCount
-
postExpiryCookieCount
postExpiryCookieCount
-
cookieCount
cookieCount
aCurrentTimeInUsec
-
cookieOldestTime
)
)
;
return
removedList
.
forget
(
)
;
}
void
CookieStorage
:
:
RemoveCookieFromList
(
const
CookieListIter
&
aIter
mozIStorageBindingParamsArray
*
aParamsArray
)
{
RemoveCookieFromListInternal
(
aIter
aParamsArray
)
;
if
(
aIter
.
entry
-
>
GetCookies
(
)
.
Length
(
)
=
=
1
)
{
hostTable
.
RawRemoveEntry
(
aIter
.
entry
)
;
}
else
{
aIter
.
entry
-
>
GetCookies
(
)
.
RemoveElementAt
(
aIter
.
index
)
;
}
-
-
cookieCount
;
}
void
CookieStorage
:
:
PrefChanged
(
nsIPrefBranch
*
aPrefBranch
)
{
int32_t
val
;
if
(
NS_SUCCEEDED
(
aPrefBranch
-
>
GetIntPref
(
kPrefMaxNumberOfCookies
&
val
)
)
)
mMaxNumberOfCookies
=
(
uint16_t
)
LIMIT
(
val
1
0xFFFF
kMaxNumberOfCookies
)
;
if
(
NS_SUCCEEDED
(
aPrefBranch
-
>
GetIntPref
(
kPrefCookieQuotaPerHost
&
val
)
)
)
{
mCookieQuotaPerHost
=
(
uint16_t
)
LIMIT
(
val
1
mMaxCookiesPerHost
-
1
kCookieQuotaPerHost
)
;
}
if
(
NS_SUCCEEDED
(
aPrefBranch
-
>
GetIntPref
(
kPrefMaxCookiesPerHost
&
val
)
)
)
{
mMaxCookiesPerHost
=
(
uint16_t
)
LIMIT
(
val
mCookieQuotaPerHost
+
1
0xFFFF
kMaxCookiesPerHost
)
;
}
if
(
NS_SUCCEEDED
(
aPrefBranch
-
>
GetIntPref
(
kPrefCookiePurgeAge
&
val
)
)
)
{
mCookiePurgeAge
=
int64_t
(
LIMIT
(
val
0
INT32_MAX
INT32_MAX
)
)
*
PR_USEC_PER_SEC
;
}
}
NS_IMETHODIMP
CookieStorage
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
strcmp
(
aTopic
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
)
)
{
nsCOMPtr
<
nsIPrefBranch
>
prefBranch
=
do_QueryInterface
(
aSubject
)
;
if
(
prefBranch
)
{
PrefChanged
(
prefBranch
)
;
}
}
return
NS_OK
;
}
already_AddRefed
<
CookiePrivateStorage
>
CookiePrivateStorage
:
:
Create
(
)
{
RefPtr
<
CookiePrivateStorage
>
storage
=
new
CookiePrivateStorage
(
)
;
storage
-
>
Init
(
)
;
return
storage
.
forget
(
)
;
}
void
CookiePrivateStorage
:
:
StaleCookies
(
const
nsTArray
<
Cookie
*
>
&
aCookieList
int64_t
aCurrentTimeInUsec
)
{
int32_t
count
=
aCookieList
.
Length
(
)
;
for
(
int32_t
i
=
0
;
i
<
count
;
+
+
i
)
{
Cookie
*
cookie
=
aCookieList
.
ElementAt
(
i
)
;
if
(
cookie
-
>
IsStale
(
)
)
{
cookie
-
>
SetLastAccessed
(
aCurrentTimeInUsec
)
;
}
}
}
already_AddRefed
<
CookieDefaultStorage
>
CookieDefaultStorage
:
:
Create
(
)
{
RefPtr
<
CookieDefaultStorage
>
storage
=
new
CookieDefaultStorage
(
)
;
storage
-
>
Init
(
)
;
return
storage
.
forget
(
)
;
}
CookieDefaultStorage
:
:
CookieDefaultStorage
(
)
:
corruptFlag
(
OK
)
{
}
void
CookieDefaultStorage
:
:
NotifyChangedInternal
(
nsISupports
*
aSubject
const
char16_t
*
aData
bool
aOldCookieIsSession
)
{
if
(
NS_LITERAL_STRING
(
"
changed
"
)
.
Equals
(
aData
)
|
|
NS_LITERAL_STRING
(
"
deleted
"
)
.
Equals
(
aData
)
|
|
NS_LITERAL_STRING
(
"
added
"
)
.
Equals
(
aData
)
)
{
nsCOMPtr
<
nsICookie
>
xpcCookie
=
do_QueryInterface
(
aSubject
)
;
MOZ_ASSERT
(
xpcCookie
)
;
auto
cookie
=
static_cast
<
Cookie
*
>
(
xpcCookie
.
get
(
)
)
;
if
(
!
cookie
-
>
IsSession
(
)
&
&
!
aOldCookieIsSession
)
{
return
;
}
}
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
aSubject
"
session
-
cookie
-
changed
"
aData
)
;
}
}
void
CookieDefaultStorage
:
:
RemoveAllInternal
(
)
{
if
(
dbConn
)
{
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt
;
nsresult
rv
=
dbConn
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
DELETE
FROM
moz_cookies
"
)
getter_AddRefs
(
stmt
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
mozIStoragePendingStatement
>
handle
;
rv
=
stmt
-
>
ExecuteAsync
(
removeListener
getter_AddRefs
(
handle
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
else
{
COOKIE_LOGSTRING
(
LogLevel
:
:
Debug
(
"
RemoveAll
(
)
:
corruption
detected
with
rv
0x
%
"
PRIx32
static_cast
<
uint32_t
>
(
rv
)
)
)
;
HandleCorruptDB
(
)
;
}
}
}
void
CookieDefaultStorage
:
:
WriteCookieToDB
(
const
nsACString
&
aBaseDomain
const
OriginAttributes
&
aOriginAttributes
mozilla
:
:
net
:
:
Cookie
*
aCookie
mozIStorageBindingParamsArray
*
aParamsArray
)
{
if
(
dbConn
)
{
mozIStorageAsyncStatement
*
stmt
=
stmtInsert
;
nsCOMPtr
<
mozIStorageBindingParamsArray
>
paramsArray
(
aParamsArray
)
;
if
(
!
paramsArray
)
{
stmt
-
>
NewBindingParamsArray
(
getter_AddRefs
(
paramsArray
)
)
;
}
CookieKey
key
(
aBaseDomain
aOriginAttributes
)
;
BindCookieParameters
(
paramsArray
key
aCookie
)
;
if
(
!
aParamsArray
)
{
DebugOnly
<
nsresult
>
rv
=
stmt
-
>
BindParameters
(
paramsArray
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
nsCOMPtr
<
mozIStoragePendingStatement
>
handle
;
rv
=
stmt
-
>
ExecuteAsync
(
insertListener
getter_AddRefs
(
handle
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
}
}
void
CookieDefaultStorage
:
:
HandleCorruptDB
(
)
{
COOKIE_LOGSTRING
(
LogLevel
:
:
Debug
(
"
HandleCorruptDB
(
)
:
CookieStorage
%
p
has
corruptFlag
%
u
"
this
corruptFlag
)
)
;
switch
(
corruptFlag
)
{
case
OK
:
{
corruptFlag
=
CLOSING_FOR_REBUILD
;
CleanupCachedStatements
(
)
;
dbConn
-
>
AsyncClose
(
closeListener
)
;
CleanupDefaultDBConnection
(
)
;
break
;
}
case
CLOSING_FOR_REBUILD
:
{
return
;
}
case
REBUILDING
:
{
CleanupCachedStatements
(
)
;
if
(
dbConn
)
{
dbConn
-
>
AsyncClose
(
closeListener
)
;
}
CleanupDefaultDBConnection
(
)
;
break
;
}
}
}
void
CookieDefaultStorage
:
:
RemoveCookiesWithOriginAttributes
(
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
const
nsACString
&
aBaseDomain
)
{
mozStorageTransaction
transaction
(
dbConn
false
)
;
CookieStorage
:
:
RemoveCookiesWithOriginAttributes
(
aPattern
aBaseDomain
)
;
DebugOnly
<
nsresult
>
rv
=
transaction
.
Commit
(
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
void
CookieDefaultStorage
:
:
RemoveCookiesFromExactHost
(
const
nsACString
&
aHost
const
nsACString
&
aBaseDomain
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
)
{
mozStorageTransaction
transaction
(
dbConn
false
)
;
CookieStorage
:
:
RemoveCookiesFromExactHost
(
aHost
aBaseDomain
aPattern
)
;
DebugOnly
<
nsresult
>
rv
=
transaction
.
Commit
(
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
void
CookieDefaultStorage
:
:
RemoveCookieFromListInternal
(
const
CookieListIter
&
aIter
mozIStorageBindingParamsArray
*
aParamsArray
)
{
if
(
!
aIter
.
Cookie
(
)
-
>
IsSession
(
)
&
&
dbConn
)
{
mozIStorageAsyncStatement
*
stmt
=
stmtDelete
;
nsCOMPtr
<
mozIStorageBindingParamsArray
>
paramsArray
(
aParamsArray
)
;
if
(
!
paramsArray
)
{
stmt
-
>
NewBindingParamsArray
(
getter_AddRefs
(
paramsArray
)
)
;
}
nsCOMPtr
<
mozIStorageBindingParams
>
params
;
paramsArray
-
>
NewBindingParams
(
getter_AddRefs
(
params
)
)
;
DebugOnly
<
nsresult
>
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
name
"
)
aIter
.
Cookie
(
)
-
>
Name
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
host
"
)
aIter
.
Cookie
(
)
-
>
Host
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
path
"
)
aIter
.
Cookie
(
)
-
>
Path
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
nsAutoCString
suffix
;
aIter
.
Cookie
(
)
-
>
OriginAttributesRef
(
)
.
CreateSuffix
(
suffix
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
originAttributes
"
)
suffix
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
paramsArray
-
>
AddParams
(
params
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
if
(
!
aParamsArray
)
{
rv
=
stmt
-
>
BindParameters
(
paramsArray
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
nsCOMPtr
<
mozIStoragePendingStatement
>
handle
;
rv
=
stmt
-
>
ExecuteAsync
(
removeListener
getter_AddRefs
(
handle
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
}
}
void
CookieDefaultStorage
:
:
CleanupCachedStatements
(
)
{
stmtInsert
=
nullptr
;
stmtDelete
=
nullptr
;
stmtUpdate
=
nullptr
;
}
void
CookieDefaultStorage
:
:
CleanupDefaultDBConnection
(
)
{
MOZ_ASSERT
(
!
stmtInsert
"
stmtInsert
has
been
cleaned
up
"
)
;
MOZ_ASSERT
(
!
stmtDelete
"
stmtDelete
has
been
cleaned
up
"
)
;
MOZ_ASSERT
(
!
stmtUpdate
"
stmtUpdate
has
been
cleaned
up
"
)
;
dbConn
=
nullptr
;
insertListener
=
nullptr
;
updateListener
=
nullptr
;
removeListener
=
nullptr
;
closeListener
=
nullptr
;
}
void
CookieDefaultStorage
:
:
Close
(
)
{
CleanupCachedStatements
(
)
;
if
(
dbConn
)
{
dbConn
-
>
AsyncClose
(
closeListener
)
;
}
CleanupDefaultDBConnection
(
)
;
}
nsresult
CookieDefaultStorage
:
:
ImportCookies
(
nsIFile
*
aCookieFile
nsIEffectiveTLDService
*
aTLDService
)
{
MOZ_ASSERT
(
aCookieFile
)
;
MOZ_ASSERT
(
aTLDService
)
;
nsresult
rv
;
nsCOMPtr
<
nsIInputStream
>
fileInputStream
;
rv
=
NS_NewLocalFileInputStream
(
getter_AddRefs
(
fileInputStream
)
aCookieFile
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsILineInputStream
>
lineInputStream
=
do_QueryInterface
(
fileInputStream
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
static
const
char
kTrue
[
]
=
"
TRUE
"
;
nsAutoCString
buffer
baseDomain
;
bool
isMore
=
true
;
int32_t
hostIndex
isDomainIndex
pathIndex
secureIndex
expiresIndex
nameIndex
cookieIndex
;
int32_t
numInts
;
int64_t
expires
;
bool
isDomain
isHttpOnly
=
false
;
uint32_t
originalCookieCount
=
cookieCount
;
int64_t
currentTimeInUsec
=
PR_Now
(
)
;
int64_t
currentTime
=
currentTimeInUsec
/
PR_USEC_PER_SEC
;
int64_t
lastAccessedCounter
=
currentTimeInUsec
;
nsCOMPtr
<
mozIStorageBindingParamsArray
>
paramsArray
;
if
(
originalCookieCount
=
=
0
&
&
dbConn
)
{
stmtInsert
-
>
NewBindingParamsArray
(
getter_AddRefs
(
paramsArray
)
)
;
}
while
(
isMore
&
&
NS_SUCCEEDED
(
lineInputStream
-
>
ReadLine
(
buffer
&
isMore
)
)
)
{
if
(
StringBeginsWith
(
buffer
NS_LITERAL_CSTRING
(
HTTP_ONLY_PREFIX
)
)
)
{
isHttpOnly
=
true
;
hostIndex
=
sizeof
(
HTTP_ONLY_PREFIX
)
-
1
;
}
else
if
(
buffer
.
IsEmpty
(
)
|
|
buffer
.
First
(
)
=
=
'
#
'
)
{
continue
;
}
else
{
isHttpOnly
=
false
;
hostIndex
=
0
;
}
if
(
(
isDomainIndex
=
buffer
.
FindChar
(
'
\
t
'
hostIndex
)
+
1
)
=
=
0
|
|
(
pathIndex
=
buffer
.
FindChar
(
'
\
t
'
isDomainIndex
)
+
1
)
=
=
0
|
|
(
secureIndex
=
buffer
.
FindChar
(
'
\
t
'
pathIndex
)
+
1
)
=
=
0
|
|
(
expiresIndex
=
buffer
.
FindChar
(
'
\
t
'
secureIndex
)
+
1
)
=
=
0
|
|
(
nameIndex
=
buffer
.
FindChar
(
'
\
t
'
expiresIndex
)
+
1
)
=
=
0
|
|
(
cookieIndex
=
buffer
.
FindChar
(
'
\
t
'
nameIndex
)
+
1
)
=
=
0
)
{
continue
;
}
auto
iter
=
buffer
.
BeginWriting
(
)
+
nameIndex
-
1
;
*
iter
=
char
(
0
)
;
numInts
=
PR_sscanf
(
buffer
.
get
(
)
+
expiresIndex
"
%
lld
"
&
expires
)
;
if
(
numInts
!
=
1
|
|
expires
<
currentTime
)
{
continue
;
}
isDomain
=
Substring
(
buffer
isDomainIndex
pathIndex
-
isDomainIndex
-
1
)
.
EqualsLiteral
(
kTrue
)
;
const
nsACString
&
host
=
Substring
(
buffer
hostIndex
isDomainIndex
-
hostIndex
-
1
)
;
if
(
(
isDomain
&
&
!
host
.
IsEmpty
(
)
&
&
host
.
First
(
)
!
=
'
.
'
)
|
|
host
.
Contains
(
'
:
'
)
)
{
continue
;
}
rv
=
nsCookieService
:
:
GetBaseDomainFromHost
(
aTLDService
host
baseDomain
)
;
if
(
NS_FAILED
(
rv
)
)
continue
;
RefPtr
<
Cookie
>
newCookie
=
Cookie
:
:
Create
(
Substring
(
buffer
nameIndex
cookieIndex
-
nameIndex
-
1
)
Substring
(
buffer
cookieIndex
buffer
.
Length
(
)
-
cookieIndex
)
host
Substring
(
buffer
pathIndex
secureIndex
-
pathIndex
-
1
)
expires
lastAccessedCounter
Cookie
:
:
GenerateUniqueCreationTime
(
currentTimeInUsec
)
false
Substring
(
buffer
secureIndex
expiresIndex
-
secureIndex
-
1
)
.
EqualsLiteral
(
kTrue
)
isHttpOnly
OriginAttributes
(
)
nsICookie
:
:
SAMESITE_NONE
nsICookie
:
:
SAMESITE_NONE
)
;
if
(
!
newCookie
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
lastAccessedCounter
-
-
;
if
(
originalCookieCount
=
=
0
)
{
AddCookieToList
(
baseDomain
OriginAttributes
(
)
newCookie
paramsArray
)
;
}
else
{
AddCookie
(
baseDomain
OriginAttributes
(
)
newCookie
currentTimeInUsec
nullptr
VoidCString
(
)
true
)
;
}
}
if
(
paramsArray
)
{
uint32_t
length
;
paramsArray
-
>
GetLength
(
&
length
)
;
if
(
length
)
{
rv
=
stmtInsert
-
>
BindParameters
(
paramsArray
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
nsCOMPtr
<
mozIStoragePendingStatement
>
handle
;
rv
=
stmtInsert
-
>
ExecuteAsync
(
insertListener
getter_AddRefs
(
handle
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
}
COOKIE_LOGSTRING
(
LogLevel
:
:
Debug
(
"
ImportCookies
(
)
:
%
"
PRIu32
"
cookies
imported
"
cookieCount
)
)
;
return
NS_OK
;
}
void
CookieDefaultStorage
:
:
StaleCookies
(
const
nsTArray
<
Cookie
*
>
&
aCookieList
int64_t
aCurrentTimeInUsec
)
{
nsCOMPtr
<
mozIStorageBindingParamsArray
>
paramsArray
;
mozIStorageAsyncStatement
*
stmt
=
stmtUpdate
;
if
(
dbConn
)
{
stmt
-
>
NewBindingParamsArray
(
getter_AddRefs
(
paramsArray
)
)
;
}
int32_t
count
=
aCookieList
.
Length
(
)
;
for
(
int32_t
i
=
0
;
i
<
count
;
+
+
i
)
{
Cookie
*
cookie
=
aCookieList
.
ElementAt
(
i
)
;
if
(
cookie
-
>
IsStale
(
)
)
{
UpdateCookieInList
(
cookie
aCurrentTimeInUsec
paramsArray
)
;
}
}
if
(
paramsArray
)
{
uint32_t
length
;
paramsArray
-
>
GetLength
(
&
length
)
;
if
(
length
)
{
DebugOnly
<
nsresult
>
rv
=
stmt
-
>
BindParameters
(
paramsArray
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
nsCOMPtr
<
mozIStoragePendingStatement
>
handle
;
rv
=
stmt
-
>
ExecuteAsync
(
updateListener
getter_AddRefs
(
handle
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
}
}
void
CookieDefaultStorage
:
:
UpdateCookieInList
(
Cookie
*
aCookie
int64_t
aLastAccessed
mozIStorageBindingParamsArray
*
aParamsArray
)
{
MOZ_ASSERT
(
aCookie
)
;
aCookie
-
>
SetLastAccessed
(
aLastAccessed
)
;
if
(
!
aCookie
-
>
IsSession
(
)
&
&
aParamsArray
)
{
nsCOMPtr
<
mozIStorageBindingParams
>
params
;
aParamsArray
-
>
NewBindingParams
(
getter_AddRefs
(
params
)
)
;
DebugOnly
<
nsresult
>
rv
=
params
-
>
BindInt64ByName
(
NS_LITERAL_CSTRING
(
"
lastAccessed
"
)
aLastAccessed
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
name
"
)
aCookie
-
>
Name
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
host
"
)
aCookie
-
>
Host
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
path
"
)
aCookie
-
>
Path
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
nsAutoCString
suffix
;
aCookie
-
>
OriginAttributesRef
(
)
.
CreateSuffix
(
suffix
)
;
rv
=
params
-
>
BindUTF8StringByName
(
NS_LITERAL_CSTRING
(
"
originAttributes
"
)
suffix
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
aParamsArray
-
>
AddParams
(
params
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
}
void
CookieDefaultStorage
:
:
MaybeCreateDeleteBindingParamsArray
(
mozIStorageBindingParamsArray
*
*
aParamsArray
)
{
if
(
dbConn
)
{
stmtDelete
-
>
NewBindingParamsArray
(
aParamsArray
)
;
}
}
void
CookieDefaultStorage
:
:
DeleteFromDB
(
mozIStorageBindingParamsArray
*
aParamsArray
)
{
uint32_t
length
;
aParamsArray
-
>
GetLength
(
&
length
)
;
if
(
length
)
{
DebugOnly
<
nsresult
>
rv
=
stmtDelete
-
>
BindParameters
(
aParamsArray
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
nsCOMPtr
<
mozIStoragePendingStatement
>
handle
;
rv
=
stmtDelete
-
>
ExecuteAsync
(
removeListener
getter_AddRefs
(
handle
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
}
}
}
