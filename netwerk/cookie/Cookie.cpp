#
include
"
Cookie
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
#
include
"
nsIURLParser
.
h
"
#
include
"
nsURLHelper
.
h
"
#
include
<
stdlib
.
h
>
namespace
mozilla
{
namespace
net
{
static
int64_t
gLastCreationTime
;
int64_t
Cookie
:
:
GenerateUniqueCreationTime
(
int64_t
aCreationTime
)
{
if
(
aCreationTime
>
gLastCreationTime
)
{
gLastCreationTime
=
aCreationTime
;
return
aCreationTime
;
}
return
+
+
gLastCreationTime
;
}
already_AddRefed
<
Cookie
>
Cookie
:
:
Create
(
const
nsACString
&
aName
const
nsACString
&
aValue
const
nsACString
&
aHost
const
nsACString
&
aPath
int64_t
aExpiry
int64_t
aLastAccessed
int64_t
aCreationTime
bool
aIsSession
bool
aIsSecure
bool
aIsHttpOnly
const
OriginAttributes
&
aOriginAttributes
int32_t
aSameSite
int32_t
aRawSameSite
)
{
mozilla
:
:
net
:
:
CookieStruct
cookieData
(
nsCString
(
aName
)
nsCString
(
aValue
)
nsCString
(
aHost
)
nsCString
(
aPath
)
aExpiry
aLastAccessed
aCreationTime
aIsHttpOnly
aIsSession
aIsSecure
aSameSite
aRawSameSite
)
;
return
Create
(
cookieData
aOriginAttributes
)
;
}
already_AddRefed
<
Cookie
>
Cookie
:
:
Create
(
const
mozilla
:
:
net
:
:
CookieStruct
&
aCookieData
const
OriginAttributes
&
aOriginAttributes
)
{
RefPtr
<
Cookie
>
cookie
=
new
Cookie
(
aCookieData
aOriginAttributes
)
;
UTF_8_ENCODING
-
>
DecodeWithoutBOMHandling
(
aCookieData
.
value
(
)
cookie
-
>
mData
.
value
(
)
)
;
if
(
cookie
-
>
mData
.
creationTime
(
)
>
gLastCreationTime
)
{
gLastCreationTime
=
cookie
-
>
mData
.
creationTime
(
)
;
}
if
(
cookie
-
>
mData
.
sameSite
(
)
<
0
|
|
cookie
-
>
mData
.
sameSite
(
)
>
nsICookie
:
:
SAMESITE_STRICT
)
{
cookie
-
>
mData
.
sameSite
(
)
=
nsICookie
:
:
SAMESITE_STRICT
;
}
if
(
!
Cookie
:
:
ValidateRawSame
(
cookie
-
>
mData
)
)
{
cookie
-
>
mData
.
rawSameSite
(
)
=
nsICookie
:
:
SAMESITE_NONE
;
}
return
cookie
.
forget
(
)
;
}
size_t
Cookie
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
mData
.
name
(
)
.
SizeOfExcludingThisIfUnshared
(
MallocSizeOf
)
+
mData
.
value
(
)
.
SizeOfExcludingThisIfUnshared
(
MallocSizeOf
)
+
mData
.
host
(
)
.
SizeOfExcludingThisIfUnshared
(
MallocSizeOf
)
+
mData
.
path
(
)
.
SizeOfExcludingThisIfUnshared
(
MallocSizeOf
)
+
mFilePathCache
.
SizeOfExcludingThisIfUnshared
(
MallocSizeOf
)
;
}
bool
Cookie
:
:
IsStale
(
)
const
{
int64_t
currentTimeInUsec
=
PR_Now
(
)
;
return
currentTimeInUsec
-
LastAccessed
(
)
>
mozilla
:
:
StaticPrefs
:
:
network_cookie_staleThreshold
(
)
*
PR_USEC_PER_SEC
;
}
NS_IMETHODIMP
Cookie
:
:
GetName
(
nsACString
&
aName
)
{
aName
=
Name
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetValue
(
nsACString
&
aValue
)
{
aValue
=
Value
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetHost
(
nsACString
&
aHost
)
{
aHost
=
Host
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetRawHost
(
nsACString
&
aHost
)
{
aHost
=
RawHost
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetPath
(
nsACString
&
aPath
)
{
aPath
=
Path
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetExpiry
(
int64_t
*
aExpiry
)
{
*
aExpiry
=
Expiry
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetIsSession
(
bool
*
aIsSession
)
{
*
aIsSession
=
IsSession
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetIsDomain
(
bool
*
aIsDomain
)
{
*
aIsDomain
=
IsDomain
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetIsSecure
(
bool
*
aIsSecure
)
{
*
aIsSecure
=
IsSecure
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetIsHttpOnly
(
bool
*
aHttpOnly
)
{
*
aHttpOnly
=
IsHttpOnly
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetCreationTime
(
int64_t
*
aCreation
)
{
*
aCreation
=
CreationTime
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetLastAccessed
(
int64_t
*
aTime
)
{
*
aTime
=
LastAccessed
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetSameSite
(
int32_t
*
aSameSite
)
{
if
(
mozilla
:
:
StaticPrefs
:
:
network_cookie_sameSite_laxByDefault
(
)
)
{
*
aSameSite
=
SameSite
(
)
;
}
else
{
*
aSameSite
=
RawSameSite
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
Cookie
:
:
GetOriginAttributes
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aVal
)
{
if
(
NS_WARN_IF
(
!
ToJSValue
(
aCx
mOriginAttributes
aVal
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
const
nsCString
&
Cookie
:
:
GetFilePath
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
Path
(
)
.
IsEmpty
(
)
)
{
return
mFilePathCache
;
}
if
(
!
mFilePathCache
.
IsEmpty
(
)
)
{
return
mFilePathCache
;
}
nsIURLParser
*
parser
=
net_GetStdURLParser
(
)
;
NS_ENSURE_TRUE
(
parser
mFilePathCache
)
;
int32_t
pathLen
=
Path
(
)
.
Length
(
)
filepathLen
=
0
;
uint32_t
filepathPos
=
0
;
nsresult
rv
=
parser
-
>
ParsePath
(
PromiseFlatCString
(
Path
(
)
)
.
get
(
)
pathLen
&
filepathPos
&
filepathLen
nullptr
nullptr
nullptr
nullptr
)
;
NS_ENSURE_SUCCESS
(
rv
mFilePathCache
)
;
mFilePathCache
=
Substring
(
Path
(
)
filepathPos
filepathLen
)
;
return
mFilePathCache
;
}
NS_IMETHODIMP
Cookie
:
:
GetExpires
(
uint64_t
*
aExpires
)
{
if
(
IsSession
(
)
)
{
*
aExpires
=
0
;
}
else
{
*
aExpires
=
Expiry
(
)
>
0
?
Expiry
(
)
:
1
;
}
return
NS_OK
;
}
bool
Cookie
:
:
ValidateRawSame
(
const
mozilla
:
:
net
:
:
CookieStruct
&
aCookieData
)
{
return
aCookieData
.
rawSameSite
(
)
=
=
aCookieData
.
sameSite
(
)
|
|
aCookieData
.
rawSameSite
(
)
=
=
nsICookie
:
:
SAMESITE_NONE
;
}
NS_IMPL_ISUPPORTS
(
Cookie
nsICookie
)
}
}
