#
ifndef
mozilla_net_Cookie_h
#
define
mozilla_net_Cookie_h
#
include
"
nsICookie
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
net
/
NeckoChannelParams
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
using
mozilla
:
:
OriginAttributes
;
namespace
mozilla
{
namespace
net
{
class
Cookie
final
:
public
nsICookie
{
MOZ_DEFINE_MALLOC_SIZE_OF
(
MallocSizeOf
)
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICOOKIE
private
:
Cookie
(
const
mozilla
:
:
net
:
:
CookieStruct
&
aCookieData
const
OriginAttributes
&
aOriginAttributes
)
:
mData
(
aCookieData
)
mOriginAttributes
(
aOriginAttributes
)
{
}
public
:
static
bool
ValidateRawSame
(
const
mozilla
:
:
net
:
:
CookieStruct
&
aCookieData
)
;
static
int64_t
GenerateUniqueCreationTime
(
int64_t
aCreationTime
)
;
static
already_AddRefed
<
Cookie
>
Create
(
const
nsACString
&
aName
const
nsACString
&
aValue
const
nsACString
&
aHost
const
nsACString
&
aPath
int64_t
aExpiry
int64_t
aLastAccessed
int64_t
aCreationTime
bool
aIsSession
bool
aIsSecure
bool
aIsHttpOnly
const
OriginAttributes
&
aOriginAttributes
int32_t
aSameSite
int32_t
aRawSameSite
)
;
static
already_AddRefed
<
Cookie
>
Create
(
const
mozilla
:
:
net
:
:
CookieStruct
&
aCookieData
const
OriginAttributes
&
aOriginAttributes
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
inline
const
nsCString
&
Name
(
)
const
{
return
mData
.
name
(
)
;
}
inline
const
nsCString
&
Value
(
)
const
{
return
mData
.
value
(
)
;
}
inline
const
nsCString
&
Host
(
)
const
{
return
mData
.
host
(
)
;
}
inline
nsDependentCSubstring
RawHost
(
)
const
{
return
nsDependentCSubstring
(
mData
.
host
(
)
IsDomain
(
)
?
1
:
0
)
;
}
inline
const
nsCString
&
Path
(
)
const
{
return
mData
.
path
(
)
;
}
const
nsCString
&
GetFilePath
(
)
;
inline
int64_t
Expiry
(
)
const
{
return
mData
.
expiry
(
)
;
}
inline
int64_t
LastAccessed
(
)
const
{
return
mData
.
lastAccessed
(
)
;
}
inline
int64_t
CreationTime
(
)
const
{
return
mData
.
creationTime
(
)
;
}
inline
bool
IsSession
(
)
const
{
return
mData
.
isSession
(
)
;
}
inline
bool
IsDomain
(
)
const
{
return
*
mData
.
host
(
)
.
get
(
)
=
=
'
.
'
;
}
inline
bool
IsSecure
(
)
const
{
return
mData
.
isSecure
(
)
;
}
inline
bool
IsHttpOnly
(
)
const
{
return
mData
.
isHttpOnly
(
)
;
}
inline
const
OriginAttributes
&
OriginAttributesRef
(
)
const
{
return
mOriginAttributes
;
}
inline
int32_t
SameSite
(
)
const
{
return
mData
.
sameSite
(
)
;
}
inline
int32_t
RawSameSite
(
)
const
{
return
mData
.
rawSameSite
(
)
;
}
inline
void
SetExpiry
(
int64_t
aExpiry
)
{
mData
.
expiry
(
)
=
aExpiry
;
}
inline
void
SetLastAccessed
(
int64_t
aTime
)
{
mData
.
lastAccessed
(
)
=
aTime
;
}
inline
void
SetIsSession
(
bool
aIsSession
)
{
mData
.
isSession
(
)
=
aIsSession
;
}
inline
void
SetCreationTime
(
int64_t
aTime
)
{
mData
.
creationTime
(
)
=
aTime
;
}
bool
IsStale
(
)
const
;
const
mozilla
:
:
net
:
:
CookieStruct
&
ToIPC
(
)
const
{
return
mData
;
}
protected
:
virtual
~
Cookie
(
)
=
default
;
private
:
mozilla
:
:
net
:
:
CookieStruct
mData
;
mozilla
:
:
OriginAttributes
mOriginAttributes
;
nsCString
mFilePathCache
;
}
;
class
CompareCookiesForSending
{
public
:
bool
Equals
(
const
Cookie
*
aCookie1
const
Cookie
*
aCookie2
)
const
{
return
aCookie1
-
>
CreationTime
(
)
=
=
aCookie2
-
>
CreationTime
(
)
&
&
aCookie2
-
>
Path
(
)
.
Length
(
)
=
=
aCookie1
-
>
Path
(
)
.
Length
(
)
;
}
bool
LessThan
(
const
Cookie
*
aCookie1
const
Cookie
*
aCookie2
)
const
{
int32_t
result
=
aCookie2
-
>
Path
(
)
.
Length
(
)
-
aCookie1
-
>
Path
(
)
.
Length
(
)
;
if
(
result
!
=
0
)
return
result
<
0
;
return
aCookie1
-
>
CreationTime
(
)
<
aCookie2
-
>
CreationTime
(
)
;
}
}
;
}
}
#
endif
