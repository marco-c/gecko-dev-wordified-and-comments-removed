#
include
"
Cookie
.
h
"
#
include
"
CookieCommons
.
h
"
#
include
"
CookieLogging
.
h
"
#
include
"
CookieService
.
h
"
#
include
"
mozilla
/
ContentBlocking
.
h
"
#
include
"
mozilla
/
ConsoleReportCollector
.
h
"
#
include
"
mozilla
/
ContentBlockingNotifier
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
nsMixedContentBlocker
.
h
"
#
include
"
mozilla
/
net
/
CookieJarSettings
.
h
"
#
include
"
mozIThirdPartyUtil
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsICookiePermission
.
h
"
#
include
"
nsICookieService
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsIRedirectHistoryEntry
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
constexpr
auto
CONSOLE_SCHEMEFUL_CATEGORY
=
"
cookieSchemeful
"
_ns
;
namespace
mozilla
{
using
dom
:
:
Document
;
namespace
net
{
bool
CookieCommons
:
:
DomainMatches
(
Cookie
*
aCookie
const
nsACString
&
aHost
)
{
return
aCookie
-
>
RawHost
(
)
=
=
aHost
|
|
(
aCookie
-
>
IsDomain
(
)
&
&
StringEndsWith
(
aHost
aCookie
-
>
Host
(
)
)
)
;
}
bool
CookieCommons
:
:
PathMatches
(
Cookie
*
aCookie
const
nsACString
&
aPath
)
{
nsCString
cookiePath
(
aCookie
-
>
GetFilePath
(
)
)
;
if
(
cookiePath
.
IsEmpty
(
)
)
{
return
false
;
}
if
(
cookiePath
.
Equals
(
aPath
)
)
{
return
true
;
}
bool
isPrefix
=
StringBeginsWith
(
aPath
cookiePath
)
;
if
(
isPrefix
&
&
cookiePath
.
Last
(
)
=
=
'
/
'
)
{
return
true
;
}
uint32_t
cookiePathLen
=
cookiePath
.
Length
(
)
;
return
isPrefix
&
&
aPath
[
cookiePathLen
]
=
=
'
/
'
;
}
nsresult
CookieCommons
:
:
GetBaseDomain
(
nsIEffectiveTLDService
*
aTLDService
nsIURI
*
aHostURI
nsACString
&
aBaseDomain
bool
&
aRequireHostMatch
)
{
nsresult
rv
=
aTLDService
-
>
GetBaseDomain
(
aHostURI
0
aBaseDomain
)
;
aRequireHostMatch
=
rv
=
=
NS_ERROR_HOST_IS_IP_ADDRESS
|
|
rv
=
=
NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS
;
if
(
aRequireHostMatch
)
{
rv
=
nsContentUtils
:
:
GetHostOrIPv6WithBrackets
(
aHostURI
aBaseDomain
)
;
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aBaseDomain
.
Length
(
)
=
=
1
&
&
aBaseDomain
.
Last
(
)
=
=
'
.
'
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
aBaseDomain
.
IsEmpty
(
)
&
&
!
aHostURI
-
>
SchemeIs
(
"
file
"
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
return
NS_OK
;
}
nsresult
CookieCommons
:
:
GetBaseDomain
(
nsIPrincipal
*
aPrincipal
nsACString
&
aBaseDomain
)
{
MOZ_ASSERT
(
aPrincipal
)
;
if
(
aPrincipal
-
>
SchemeIs
(
"
file
"
)
)
{
return
nsContentUtils
:
:
GetHostOrIPv6WithBrackets
(
aPrincipal
aBaseDomain
)
;
}
nsresult
rv
=
aPrincipal
-
>
GetBaseDomain
(
aBaseDomain
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsContentUtils
:
:
MaybeFixIPv6Host
(
aBaseDomain
)
;
return
NS_OK
;
}
nsresult
CookieCommons
:
:
GetBaseDomainFromHost
(
nsIEffectiveTLDService
*
aTLDService
const
nsACString
&
aHost
nsCString
&
aBaseDomain
)
{
if
(
aHost
.
Length
(
)
=
=
1
&
&
aHost
.
Last
(
)
=
=
'
.
'
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
domain
=
!
aHost
.
IsEmpty
(
)
&
&
aHost
.
First
(
)
=
=
'
.
'
;
nsresult
rv
=
aTLDService
-
>
GetBaseDomainFromHost
(
Substring
(
aHost
domain
)
0
aBaseDomain
)
;
if
(
rv
=
=
NS_ERROR_HOST_IS_IP_ADDRESS
|
|
rv
=
=
NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS
)
{
if
(
domain
)
{
return
NS_ERROR_INVALID_ARG
;
}
aBaseDomain
=
aHost
;
return
NS_OK
;
}
return
rv
;
}
namespace
{
void
NotifyRejectionToObservers
(
nsIURI
*
aHostURI
CookieOperation
aOperation
)
{
if
(
aOperation
=
=
OPERATION_WRITE
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
aHostURI
"
cookie
-
rejected
"
nullptr
)
;
}
}
else
{
MOZ_ASSERT
(
aOperation
=
=
OPERATION_READ
)
;
}
}
}
void
CookieCommons
:
:
NotifyRejected
(
nsIURI
*
aHostURI
nsIChannel
*
aChannel
uint32_t
aRejectedReason
CookieOperation
aOperation
)
{
NotifyRejectionToObservers
(
aHostURI
aOperation
)
;
ContentBlockingNotifier
:
:
OnDecision
(
aChannel
ContentBlockingNotifier
:
:
BlockingDecision
:
:
eBlock
aRejectedReason
)
;
}
bool
CookieCommons
:
:
CheckPathSize
(
const
CookieStruct
&
aCookieData
)
{
return
aCookieData
.
path
(
)
.
Length
(
)
<
=
kMaxBytesPerPath
;
}
bool
CookieCommons
:
:
CheckNameAndValueSize
(
const
CookieStruct
&
aCookieData
)
{
return
(
aCookieData
.
name
(
)
.
Length
(
)
+
aCookieData
.
value
(
)
.
Length
(
)
)
<
=
kMaxBytesPerCookie
;
}
bool
CookieCommons
:
:
CheckName
(
const
CookieStruct
&
aCookieData
)
{
const
char
illegalNameCharacters
[
]
=
{
0x01
0x02
0x03
0x04
0x05
0x06
0x07
0x08
0x09
0x0A
0x0B
0x0C
0x0D
0x0E
0x0F
0x10
0x11
0x12
0x13
0x14
0x15
0x16
0x17
0x18
0x19
0x1A
0x1B
0x1C
0x1D
0x1E
0x1F
0x00
}
;
return
aCookieData
.
name
(
)
.
FindCharInSet
(
illegalNameCharacters
0
)
=
=
-
1
;
}
bool
CookieCommons
:
:
CheckHttpValue
(
const
CookieStruct
&
aCookieData
)
{
const
char
illegalCharacters
[
]
=
{
0x01
0x02
0x03
0x04
0x05
0x06
0x07
0x08
0x0A
0x0B
0x0C
0x0D
0x0E
0x0F
0x10
0x11
0x12
0x13
0x14
0x15
0x16
0x17
0x18
0x19
0x1A
0x1B
0x1C
0x1D
0x1E
0x1F
0x3B
0x00
}
;
return
aCookieData
.
value
(
)
.
FindCharInSet
(
illegalCharacters
0
)
=
=
-
1
;
}
bool
CookieCommons
:
:
CheckCookiePermission
(
nsIChannel
*
aChannel
CookieStruct
&
aCookieData
)
{
if
(
!
aChannel
)
{
return
true
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsCOMPtr
<
nsICookieJarSettings
>
cookieJarSettings
;
nsresult
rv
=
loadInfo
-
>
GetCookieJarSettings
(
getter_AddRefs
(
cookieJarSettings
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
true
;
}
nsIScriptSecurityManager
*
ssm
=
nsScriptSecurityManager
:
:
GetScriptSecurityManager
(
)
;
MOZ_ASSERT
(
ssm
)
;
nsCOMPtr
<
nsIPrincipal
>
channelPrincipal
;
rv
=
ssm
-
>
GetChannelURIPrincipal
(
aChannel
getter_AddRefs
(
channelPrincipal
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
return
CheckCookiePermission
(
channelPrincipal
cookieJarSettings
aCookieData
)
;
}
bool
CookieCommons
:
:
CheckCookiePermission
(
nsIPrincipal
*
aPrincipal
nsICookieJarSettings
*
aCookieJarSettings
CookieStruct
&
aCookieData
)
{
MOZ_ASSERT
(
aPrincipal
)
;
MOZ_ASSERT
(
aCookieJarSettings
)
;
if
(
!
aPrincipal
-
>
GetIsContentPrincipal
(
)
)
{
return
true
;
}
uint32_t
cookiePermission
=
nsICookiePermission
:
:
ACCESS_DEFAULT
;
nsresult
rv
=
aCookieJarSettings
-
>
CookiePermission
(
aPrincipal
&
cookiePermission
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
true
;
}
if
(
cookiePermission
=
=
nsICookiePermission
:
:
ACCESS_ALLOW
)
{
return
true
;
}
if
(
cookiePermission
=
=
nsICookiePermission
:
:
ACCESS_SESSION
)
{
aCookieData
.
isSession
(
)
=
true
;
return
true
;
}
if
(
cookiePermission
=
=
nsICookiePermission
:
:
ACCESS_DENY
)
{
return
false
;
}
if
(
StaticPrefs
:
:
network_cookie_lifetimePolicy
(
)
=
=
nsICookieService
:
:
ACCEPT_NORMALLY
)
{
return
true
;
}
int64_t
currentTime
=
PR_Now
(
)
/
PR_USEC_PER_SEC
;
int64_t
delta
=
aCookieData
.
expiry
(
)
-
currentTime
;
if
(
!
aCookieData
.
isSession
(
)
&
&
delta
>
0
)
{
if
(
StaticPrefs
:
:
network_cookie_lifetimePolicy
(
)
=
=
nsICookieService
:
:
ACCEPT_SESSION
)
{
aCookieData
.
isSession
(
)
=
true
;
}
}
return
true
;
}
namespace
{
CookieStatus
CookieStatusForWindow
(
nsPIDOMWindowInner
*
aWindow
nsIURI
*
aDocumentURI
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aDocumentURI
)
;
if
(
!
nsContentUtils
:
:
IsThirdPartyWindowOrChannel
(
aWindow
nullptr
aDocumentURI
)
)
{
return
STATUS_ACCEPTED
;
}
if
(
StaticPrefs
:
:
network_cookie_thirdparty_sessionOnly
(
)
)
{
return
STATUS_ACCEPT_SESSION
;
}
if
(
StaticPrefs
:
:
network_cookie_thirdparty_nonsecureSessionOnly
(
)
&
&
!
nsMixedContentBlocker
:
:
IsPotentiallyTrustworthyOrigin
(
aDocumentURI
)
)
{
return
STATUS_ACCEPT_SESSION
;
}
return
STATUS_ACCEPTED
;
}
}
already_AddRefed
<
Cookie
>
CookieCommons
:
:
CreateCookieFromDocument
(
Document
*
aDocument
const
nsACString
&
aCookieString
int64_t
currentTimeInUsec
nsIEffectiveTLDService
*
aTLDService
mozIThirdPartyUtil
*
aThirdPartyUtil
std
:
:
function
<
bool
(
const
nsACString
&
const
OriginAttributes
&
)
>
&
&
aHasExistingCookiesLambda
nsIURI
*
*
aDocumentURI
nsACString
&
aBaseDomain
OriginAttributes
&
aAttrs
)
{
nsCOMPtr
<
nsIPrincipal
>
storagePrincipal
=
aDocument
-
>
EffectiveStoragePrincipal
(
)
;
MOZ_ASSERT
(
storagePrincipal
)
;
nsCOMPtr
<
nsIURI
>
principalURI
;
auto
*
basePrincipal
=
BasePrincipal
:
:
Cast
(
aDocument
-
>
NodePrincipal
(
)
)
;
basePrincipal
-
>
GetURI
(
getter_AddRefs
(
principalURI
)
)
;
if
(
NS_WARN_IF
(
!
principalURI
)
)
{
return
nullptr
;
}
if
(
!
CookieCommons
:
:
IsSchemeSupported
(
principalURI
)
)
{
return
nullptr
;
}
nsAutoCString
baseDomain
;
bool
requireHostMatch
=
false
;
nsresult
rv
=
CookieCommons
:
:
GetBaseDomain
(
aTLDService
principalURI
baseDomain
requireHostMatch
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
nsPIDOMWindowInner
*
innerWindow
=
aDocument
-
>
GetInnerWindow
(
)
;
if
(
NS_WARN_IF
(
!
innerWindow
)
)
{
return
nullptr
;
}
uint32_t
dummyRejectedReason
=
0
;
if
(
aDocument
-
>
CookieJarSettings
(
)
-
>
GetLimitForeignContexts
(
)
&
&
!
aHasExistingCookiesLambda
(
baseDomain
storagePrincipal
-
>
OriginAttributesRef
(
)
)
&
&
!
ContentBlocking
:
:
ShouldAllowAccessFor
(
innerWindow
principalURI
&
dummyRejectedReason
)
)
{
return
nullptr
;
}
bool
isForeignAndNotAddon
=
false
;
if
(
!
BasePrincipal
:
:
Cast
(
aDocument
-
>
NodePrincipal
(
)
)
-
>
AddonPolicy
(
)
)
{
rv
=
aThirdPartyUtil
-
>
IsThirdPartyWindow
(
innerWindow
-
>
GetOuterWindow
(
)
principalURI
&
isForeignAndNotAddon
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
isForeignAndNotAddon
=
true
;
}
}
CookieStatus
cookieStatus
=
CookieStatusForWindow
(
innerWindow
principalURI
)
;
MOZ_ASSERT
(
cookieStatus
=
=
STATUS_ACCEPTED
|
|
cookieStatus
=
=
STATUS_ACCEPT_SESSION
)
;
RefPtr
<
ConsoleReportCollector
>
crc
=
new
ConsoleReportCollector
(
)
;
auto
scopeExit
=
MakeScopeExit
(
[
&
]
{
crc
-
>
FlushConsoleReports
(
aDocument
)
;
}
)
;
nsCString
cookieString
(
aCookieString
)
;
CookieStruct
cookieData
;
bool
canSetCookie
=
false
;
CookieService
:
:
CanSetCookie
(
principalURI
baseDomain
cookieData
requireHostMatch
cookieStatus
cookieString
false
isForeignAndNotAddon
crc
canSetCookie
)
;
if
(
!
canSetCookie
)
{
return
nullptr
;
}
if
(
!
CookieCommons
:
:
CheckCookiePermission
(
aDocument
-
>
NodePrincipal
(
)
aDocument
-
>
CookieJarSettings
(
)
cookieData
)
)
{
NotifyRejectionToObservers
(
principalURI
OPERATION_WRITE
)
;
ContentBlockingNotifier
:
:
OnDecision
(
innerWindow
ContentBlockingNotifier
:
:
BlockingDecision
:
:
eBlock
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_BY_PERMISSION
)
;
return
nullptr
;
}
RefPtr
<
Cookie
>
cookie
=
Cookie
:
:
Create
(
cookieData
storagePrincipal
-
>
OriginAttributesRef
(
)
)
;
MOZ_ASSERT
(
cookie
)
;
cookie
-
>
SetLastAccessed
(
currentTimeInUsec
)
;
cookie
-
>
SetCreationTime
(
Cookie
:
:
GenerateUniqueCreationTime
(
currentTimeInUsec
)
)
;
aBaseDomain
=
baseDomain
;
aAttrs
=
storagePrincipal
-
>
OriginAttributesRef
(
)
;
principalURI
.
forget
(
aDocumentURI
)
;
return
cookie
.
forget
(
)
;
}
already_AddRefed
<
nsICookieJarSettings
>
CookieCommons
:
:
GetCookieJarSettings
(
nsIChannel
*
aChannel
)
{
nsCOMPtr
<
nsICookieJarSettings
>
cookieJarSettings
;
if
(
aChannel
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsresult
rv
=
loadInfo
-
>
GetCookieJarSettings
(
getter_AddRefs
(
cookieJarSettings
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
cookieJarSettings
=
CookieJarSettings
:
:
GetBlockingAll
(
)
;
}
}
else
{
cookieJarSettings
=
CookieJarSettings
:
:
Create
(
CookieJarSettings
:
:
eRegular
)
;
}
MOZ_ASSERT
(
cookieJarSettings
)
;
return
cookieJarSettings
.
forget
(
)
;
}
bool
CookieCommons
:
:
ShouldIncludeCrossSiteCookieForDocument
(
Cookie
*
aCookie
)
{
MOZ_ASSERT
(
aCookie
)
;
int32_t
sameSiteAttr
=
0
;
aCookie
-
>
GetSameSite
(
&
sameSiteAttr
)
;
return
sameSiteAttr
=
=
nsICookie
:
:
SAMESITE_NONE
;
}
bool
CookieCommons
:
:
IsSafeTopLevelNav
(
nsIChannel
*
aChannel
)
{
if
(
!
aChannel
)
{
return
false
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
if
(
loadInfo
-
>
GetExternalContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
&
&
loadInfo
-
>
GetExternalContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_SAVEAS_DOWNLOAD
)
{
return
false
;
}
return
NS_IsSafeMethodNav
(
aChannel
)
;
}
bool
CookieCommons
:
:
IsSameSiteForeign
(
nsIChannel
*
aChannel
nsIURI
*
aHostURI
)
{
if
(
!
aChannel
)
{
return
false
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsCOMPtr
<
nsIURI
>
channelURI
;
NS_GetFinalChannelURI
(
aChannel
getter_AddRefs
(
channelURI
)
)
;
RefPtr
<
BasePrincipal
>
triggeringPrincipal
=
BasePrincipal
:
:
Cast
(
loadInfo
-
>
TriggeringPrincipal
(
)
)
;
if
(
triggeringPrincipal
-
>
AddonPolicy
(
)
&
&
triggeringPrincipal
-
>
AddonAllowsLoad
(
channelURI
)
)
{
return
false
;
}
bool
isForeign
=
true
;
nsresult
rv
;
if
(
loadInfo
-
>
GetExternalContentPolicyType
(
)
=
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
|
|
loadInfo
-
>
GetExternalContentPolicyType
(
)
=
=
ExtContentPolicy
:
:
TYPE_SAVEAS_DOWNLOAD
)
{
rv
=
triggeringPrincipal
-
>
IsThirdPartyChannel
(
aChannel
&
isForeign
)
;
}
else
{
nsCOMPtr
<
mozIThirdPartyUtil
>
thirdPartyUtil
=
do_GetService
(
THIRDPARTYUTIL_CONTRACTID
)
;
if
(
!
thirdPartyUtil
)
{
return
true
;
}
rv
=
thirdPartyUtil
-
>
IsThirdPartyChannel
(
aChannel
aHostURI
&
isForeign
)
;
}
if
(
NS_FAILED
(
rv
)
|
|
isForeign
)
{
return
true
;
}
if
(
loadInfo
-
>
GetExternalContentPolicyType
(
)
=
=
ExtContentPolicy
:
:
TYPE_SUBDOCUMENT
)
{
rv
=
loadInfo
-
>
TriggeringPrincipal
(
)
-
>
IsThirdPartyChannel
(
aChannel
&
isForeign
)
;
if
(
NS_FAILED
(
rv
)
|
|
isForeign
)
{
return
true
;
}
}
nsCOMPtr
<
nsIPrincipal
>
redirectPrincipal
;
for
(
nsIRedirectHistoryEntry
*
entry
:
loadInfo
-
>
RedirectChain
(
)
)
{
entry
-
>
GetPrincipal
(
getter_AddRefs
(
redirectPrincipal
)
)
;
if
(
redirectPrincipal
)
{
rv
=
redirectPrincipal
-
>
IsThirdPartyChannel
(
aChannel
&
isForeign
)
;
if
(
NS_FAILED
(
rv
)
|
|
isForeign
)
{
return
true
;
}
}
}
return
isForeign
;
}
namespace
{
bool
MaybeCompareSchemeInternal
(
Cookie
*
aCookie
nsICookie
:
:
schemeType
aSchemeType
)
{
MOZ_ASSERT
(
aCookie
)
;
if
(
aCookie
-
>
SchemeMap
(
)
=
=
nsICookie
:
:
SCHEME_UNSET
)
{
return
true
;
}
return
!
!
(
aCookie
-
>
SchemeMap
(
)
&
aSchemeType
)
;
}
}
bool
CookieCommons
:
:
MaybeCompareSchemeWithLogging
(
nsIConsoleReportCollector
*
aCRC
nsIURI
*
aHostURI
Cookie
*
aCookie
nsICookie
:
:
schemeType
aSchemeType
)
{
MOZ_ASSERT
(
aCookie
)
;
MOZ_ASSERT
(
aHostURI
)
;
if
(
MaybeCompareSchemeInternal
(
aCookie
aSchemeType
)
)
{
return
true
;
}
nsAutoCString
uri
;
nsresult
rv
=
aHostURI
-
>
GetSpec
(
uri
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
!
StaticPrefs
:
:
network_cookie_sameSite_schemeful
(
)
;
}
if
(
!
StaticPrefs
:
:
network_cookie_sameSite_schemeful
(
)
)
{
CookieLogging
:
:
LogMessageToConsole
(
aCRC
aHostURI
nsIScriptError
:
:
warningFlag
CONSOLE_SCHEMEFUL_CATEGORY
"
CookieSchemefulRejectForBeta
"
_ns
AutoTArray
<
nsString
2
>
{
NS_ConvertUTF8toUTF16
(
aCookie
-
>
Name
(
)
)
NS_ConvertUTF8toUTF16
(
uri
)
}
)
;
return
true
;
}
CookieLogging
:
:
LogMessageToConsole
(
aCRC
aHostURI
nsIScriptError
:
:
warningFlag
CONSOLE_SCHEMEFUL_CATEGORY
"
CookieSchemefulReject
"
_ns
AutoTArray
<
nsString
2
>
{
NS_ConvertUTF8toUTF16
(
aCookie
-
>
Name
(
)
)
NS_ConvertUTF8toUTF16
(
uri
)
}
)
;
return
false
;
}
bool
CookieCommons
:
:
MaybeCompareScheme
(
Cookie
*
aCookie
nsICookie
:
:
schemeType
aSchemeType
)
{
MOZ_ASSERT
(
aCookie
)
;
if
(
!
StaticPrefs
:
:
network_cookie_sameSite_schemeful
(
)
)
{
return
true
;
}
return
MaybeCompareSchemeInternal
(
aCookie
aSchemeType
)
;
}
nsICookie
:
:
schemeType
CookieCommons
:
:
URIToSchemeType
(
nsIURI
*
aURI
)
{
MOZ_ASSERT
(
aURI
)
;
nsAutoCString
scheme
;
nsresult
rv
=
aURI
-
>
GetScheme
(
scheme
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nsICookie
:
:
SCHEME_UNSET
;
}
return
SchemeToSchemeType
(
scheme
)
;
}
nsICookie
:
:
schemeType
CookieCommons
:
:
PrincipalToSchemeType
(
nsIPrincipal
*
aPrincipal
)
{
MOZ_ASSERT
(
aPrincipal
)
;
nsAutoCString
scheme
;
nsresult
rv
=
aPrincipal
-
>
GetScheme
(
scheme
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nsICookie
:
:
SCHEME_UNSET
;
}
return
SchemeToSchemeType
(
scheme
)
;
}
nsICookie
:
:
schemeType
CookieCommons
:
:
SchemeToSchemeType
(
const
nsACString
&
aScheme
)
{
MOZ_ASSERT
(
IsSchemeSupported
(
aScheme
)
)
;
if
(
aScheme
.
Equals
(
"
https
"
)
)
{
return
nsICookie
:
:
SCHEME_HTTPS
;
}
if
(
aScheme
.
Equals
(
"
http
"
)
)
{
return
nsICookie
:
:
SCHEME_HTTP
;
}
if
(
aScheme
.
Equals
(
"
file
"
)
)
{
return
nsICookie
:
:
SCHEME_FILE
;
}
MOZ_CRASH
(
"
Unsupported
scheme
type
"
)
;
}
bool
CookieCommons
:
:
IsSchemeSupported
(
nsIPrincipal
*
aPrincipal
)
{
MOZ_ASSERT
(
aPrincipal
)
;
nsAutoCString
scheme
;
nsresult
rv
=
aPrincipal
-
>
GetScheme
(
scheme
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
return
IsSchemeSupported
(
scheme
)
;
}
bool
CookieCommons
:
:
IsSchemeSupported
(
nsIURI
*
aURI
)
{
MOZ_ASSERT
(
aURI
)
;
nsAutoCString
scheme
;
nsresult
rv
=
aURI
-
>
GetScheme
(
scheme
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
return
IsSchemeSupported
(
scheme
)
;
}
bool
CookieCommons
:
:
IsSchemeSupported
(
const
nsACString
&
aScheme
)
{
return
aScheme
.
Equals
(
"
https
"
)
|
|
aScheme
.
Equals
(
"
http
"
)
|
|
aScheme
.
Equals
(
"
file
"
)
;
}
}
}
