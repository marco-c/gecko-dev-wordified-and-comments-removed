#
include
"
Cookie
.
h
"
#
include
"
CookieCommons
.
h
"
#
include
"
CookieLogging
.
h
"
#
include
"
CookieParser
.
h
"
#
include
"
CookieService
.
h
"
#
include
"
mozilla
/
ContentBlockingNotifier
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
#
include
"
mozilla
/
StorageAccess
.
h
"
#
include
"
mozilla
/
dom
/
nsMixedContentBlocker
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
net
/
CookieJarSettings
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozIThirdPartyUtil
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsICookiePermission
.
h
"
#
include
"
nsICookieService
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIRedirectHistoryEntry
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
#
include
"
ThirdPartyUtil
.
h
"
namespace
mozilla
{
using
dom
:
:
Document
;
namespace
net
{
bool
CookieCommons
:
:
DomainMatches
(
Cookie
*
aCookie
const
nsACString
&
aHost
)
{
return
aCookie
-
>
RawHost
(
)
=
=
aHost
|
|
(
aCookie
-
>
IsDomain
(
)
&
&
StringEndsWith
(
aHost
aCookie
-
>
Host
(
)
)
)
;
}
bool
CookieCommons
:
:
PathMatches
(
Cookie
*
aCookie
const
nsACString
&
aPath
)
{
const
nsCString
&
cookiePath
(
aCookie
-
>
Path
(
)
)
;
if
(
cookiePath
.
IsEmpty
(
)
)
{
return
false
;
}
if
(
cookiePath
.
Equals
(
aPath
)
)
{
return
true
;
}
bool
isPrefix
=
StringBeginsWith
(
aPath
cookiePath
)
;
if
(
isPrefix
&
&
cookiePath
.
Last
(
)
=
=
'
/
'
)
{
return
true
;
}
uint32_t
cookiePathLen
=
cookiePath
.
Length
(
)
;
return
isPrefix
&
&
aPath
[
cookiePathLen
]
=
=
'
/
'
;
}
nsresult
CookieCommons
:
:
GetBaseDomain
(
nsIEffectiveTLDService
*
aTLDService
nsIURI
*
aHostURI
nsACString
&
aBaseDomain
bool
&
aRequireHostMatch
)
{
nsresult
rv
=
aTLDService
-
>
GetBaseDomain
(
aHostURI
0
aBaseDomain
)
;
aRequireHostMatch
=
rv
=
=
NS_ERROR_HOST_IS_IP_ADDRESS
|
|
rv
=
=
NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS
;
if
(
aRequireHostMatch
)
{
rv
=
nsContentUtils
:
:
GetHostOrIPv6WithBrackets
(
aHostURI
aBaseDomain
)
;
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aBaseDomain
.
Length
(
)
=
=
1
&
&
aBaseDomain
.
Last
(
)
=
=
'
.
'
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
aBaseDomain
.
IsEmpty
(
)
&
&
!
aHostURI
-
>
SchemeIs
(
"
file
"
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
return
NS_OK
;
}
nsresult
CookieCommons
:
:
GetBaseDomain
(
nsIPrincipal
*
aPrincipal
nsACString
&
aBaseDomain
)
{
MOZ_ASSERT
(
aPrincipal
)
;
if
(
aPrincipal
-
>
SchemeIs
(
"
file
"
)
)
{
return
nsContentUtils
:
:
GetHostOrIPv6WithBrackets
(
aPrincipal
aBaseDomain
)
;
}
nsresult
rv
=
aPrincipal
-
>
GetBaseDomain
(
aBaseDomain
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsContentUtils
:
:
MaybeFixIPv6Host
(
aBaseDomain
)
;
return
NS_OK
;
}
nsresult
CookieCommons
:
:
GetBaseDomainFromHost
(
nsIEffectiveTLDService
*
aTLDService
const
nsACString
&
aHost
nsCString
&
aBaseDomain
)
{
if
(
aHost
.
Length
(
)
=
=
1
&
&
aHost
.
Last
(
)
=
=
'
.
'
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
domain
=
!
aHost
.
IsEmpty
(
)
&
&
aHost
.
First
(
)
=
=
'
.
'
;
nsresult
rv
=
aTLDService
-
>
GetBaseDomainFromHost
(
Substring
(
aHost
domain
)
0
aBaseDomain
)
;
if
(
rv
=
=
NS_ERROR_HOST_IS_IP_ADDRESS
|
|
rv
=
=
NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS
)
{
if
(
domain
)
{
return
NS_ERROR_INVALID_ARG
;
}
aBaseDomain
=
aHost
;
return
NS_OK
;
}
return
rv
;
}
bool
CookieCommons
:
:
IsIPv6BaseDomain
(
const
nsACString
&
aBaseDomain
)
{
return
aBaseDomain
.
Contains
(
'
:
'
)
;
}
namespace
{
void
NotifyRejectionToObservers
(
nsIURI
*
aHostURI
CookieOperation
aOperation
)
{
if
(
aOperation
=
=
OPERATION_WRITE
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
aHostURI
"
cookie
-
rejected
"
nullptr
)
;
}
}
else
{
MOZ_ASSERT
(
aOperation
=
=
OPERATION_READ
)
;
}
}
}
void
CookieCommons
:
:
NotifyRejected
(
nsIURI
*
aHostURI
nsIChannel
*
aChannel
uint32_t
aRejectedReason
CookieOperation
aOperation
)
{
NotifyRejectionToObservers
(
aHostURI
aOperation
)
;
ContentBlockingNotifier
:
:
OnDecision
(
aChannel
ContentBlockingNotifier
:
:
BlockingDecision
:
:
eBlock
aRejectedReason
)
;
}
bool
CookieCommons
:
:
CheckPathSize
(
const
CookieStruct
&
aCookieData
)
{
return
aCookieData
.
path
(
)
.
Length
(
)
<
=
kMaxBytesPerPath
;
}
bool
CookieCommons
:
:
CheckNameAndValueSize
(
const
CookieStruct
&
aCookieData
)
{
return
(
aCookieData
.
name
(
)
.
Length
(
)
+
aCookieData
.
value
(
)
.
Length
(
)
)
<
=
kMaxBytesPerCookie
;
}
bool
CookieCommons
:
:
CheckName
(
const
CookieStruct
&
aCookieData
)
{
const
char
illegalNameCharacters
[
]
=
{
0x01
0x02
0x03
0x04
0x05
0x06
0x07
0x08
0x09
0x0A
0x0B
0x0C
0x0D
0x0E
0x0F
0x10
0x11
0x12
0x13
0x14
0x15
0x16
0x17
0x18
0x19
0x1A
0x1B
0x1C
0x1D
0x1E
0x1F
0x3B
0x3D
0x7F
0x00
}
;
const
auto
*
start
=
aCookieData
.
name
(
)
.
BeginReading
(
)
;
const
auto
*
end
=
aCookieData
.
name
(
)
.
EndReading
(
)
;
auto
charFilter
=
[
&
]
(
unsigned
char
c
)
{
if
(
StaticPrefs
:
:
network_cookie_blockUnicode
(
)
&
&
c
>
=
0x80
)
{
return
true
;
}
return
std
:
:
find
(
std
:
:
begin
(
illegalNameCharacters
)
std
:
:
end
(
illegalNameCharacters
)
c
)
!
=
std
:
:
end
(
illegalNameCharacters
)
;
}
;
return
std
:
:
find_if
(
start
end
charFilter
)
=
=
end
;
}
bool
CookieCommons
:
:
CheckValue
(
const
CookieStruct
&
aCookieData
)
{
const
char
illegalCharacters
[
]
=
{
0x01
0x02
0x03
0x04
0x05
0x06
0x07
0x08
0x0A
0x0B
0x0C
0x0D
0x0E
0x0F
0x10
0x11
0x12
0x13
0x14
0x15
0x16
0x17
0x18
0x19
0x1A
0x1B
0x1C
0x1D
0x1E
0x1F
0x3B
0x7F
0x00
}
;
const
auto
*
start
=
aCookieData
.
value
(
)
.
BeginReading
(
)
;
const
auto
*
end
=
aCookieData
.
value
(
)
.
EndReading
(
)
;
auto
charFilter
=
[
&
]
(
unsigned
char
c
)
{
if
(
StaticPrefs
:
:
network_cookie_blockUnicode
(
)
&
&
c
>
=
0x80
)
{
return
true
;
}
return
std
:
:
find
(
std
:
:
begin
(
illegalCharacters
)
std
:
:
end
(
illegalCharacters
)
c
)
!
=
std
:
:
end
(
illegalCharacters
)
;
}
;
return
std
:
:
find_if
(
start
end
charFilter
)
=
=
end
;
}
bool
CookieCommons
:
:
CheckCookiePermission
(
nsIChannel
*
aChannel
CookieStruct
&
aCookieData
)
{
if
(
!
aChannel
)
{
return
true
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsCOMPtr
<
nsICookieJarSettings
>
cookieJarSettings
;
nsresult
rv
=
loadInfo
-
>
GetCookieJarSettings
(
getter_AddRefs
(
cookieJarSettings
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
true
;
}
nsIScriptSecurityManager
*
ssm
=
nsScriptSecurityManager
:
:
GetScriptSecurityManager
(
)
;
MOZ_ASSERT
(
ssm
)
;
nsCOMPtr
<
nsIPrincipal
>
channelPrincipal
;
rv
=
ssm
-
>
GetChannelURIPrincipal
(
aChannel
getter_AddRefs
(
channelPrincipal
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
return
CheckCookiePermission
(
channelPrincipal
cookieJarSettings
aCookieData
)
;
}
bool
CookieCommons
:
:
CheckCookiePermission
(
nsIPrincipal
*
aPrincipal
nsICookieJarSettings
*
aCookieJarSettings
CookieStruct
&
aCookieData
)
{
MOZ_ASSERT
(
aPrincipal
)
;
MOZ_ASSERT
(
aCookieJarSettings
)
;
if
(
!
aPrincipal
-
>
GetIsContentPrincipal
(
)
)
{
return
true
;
}
uint32_t
cookiePermission
=
nsICookiePermission
:
:
ACCESS_DEFAULT
;
nsresult
rv
=
aCookieJarSettings
-
>
CookiePermission
(
aPrincipal
&
cookiePermission
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
true
;
}
if
(
cookiePermission
=
=
nsICookiePermission
:
:
ACCESS_ALLOW
)
{
return
true
;
}
if
(
cookiePermission
=
=
nsICookiePermission
:
:
ACCESS_SESSION
)
{
aCookieData
.
isSession
(
)
=
true
;
return
true
;
}
if
(
cookiePermission
=
=
nsICookiePermission
:
:
ACCESS_DENY
)
{
return
false
;
}
return
true
;
}
namespace
{
CookieStatus
CookieStatusForWindow
(
nsPIDOMWindowInner
*
aWindow
nsIURI
*
aDocumentURI
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aDocumentURI
)
;
ThirdPartyUtil
*
thirdPartyUtil
=
ThirdPartyUtil
:
:
GetInstance
(
)
;
if
(
thirdPartyUtil
)
{
bool
isThirdParty
=
true
;
nsresult
rv
=
thirdPartyUtil
-
>
IsThirdPartyWindow
(
aWindow
-
>
GetOuterWindow
(
)
aDocumentURI
&
isThirdParty
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Third
-
party
window
check
failed
.
"
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
isThirdParty
)
{
return
STATUS_ACCEPTED
;
}
}
return
STATUS_ACCEPTED
;
}
bool
CheckCookieStringFromDocument
(
const
nsACString
&
aCookieString
)
{
const
char
illegalCharacters
[
]
=
{
0x01
0x02
0x03
0x04
0x05
0x06
0x07
0x08
0x0A
0x0B
0x0C
0x0D
0x0E
0x0F
0x10
0x11
0x12
0x13
0x14
0x15
0x16
0x17
0x18
0x19
0x1A
0x1B
0x1C
0x1D
0x1E
0x1F
0x7F
0x00
}
;
const
auto
*
start
=
aCookieString
.
BeginReading
(
)
;
const
auto
*
end
=
aCookieString
.
EndReading
(
)
;
auto
charFilter
=
[
&
]
(
unsigned
char
c
)
{
if
(
StaticPrefs
:
:
network_cookie_blockUnicode
(
)
&
&
c
>
=
0x80
)
{
return
true
;
}
return
std
:
:
find
(
std
:
:
begin
(
illegalCharacters
)
std
:
:
end
(
illegalCharacters
)
c
)
!
=
std
:
:
end
(
illegalCharacters
)
;
}
;
return
std
:
:
find_if
(
start
end
charFilter
)
=
=
end
;
}
}
already_AddRefed
<
Cookie
>
CookieCommons
:
:
CreateCookieFromDocument
(
CookieParser
&
aCookieParser
Document
*
aDocument
const
nsACString
&
aCookieString
int64_t
currentTimeInUsec
nsIEffectiveTLDService
*
aTLDService
mozIThirdPartyUtil
*
aThirdPartyUtil
nsACString
&
aBaseDomain
OriginAttributes
&
aAttrs
)
{
if
(
!
CookieCommons
:
:
IsSchemeSupported
(
aCookieParser
.
HostURI
(
)
)
)
{
return
nullptr
;
}
if
(
!
CheckCookieStringFromDocument
(
aCookieString
)
)
{
return
nullptr
;
}
nsAutoCString
baseDomain
;
bool
requireHostMatch
=
false
;
nsresult
rv
=
CookieCommons
:
:
GetBaseDomain
(
aTLDService
aCookieParser
.
HostURI
(
)
baseDomain
requireHostMatch
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
nsPIDOMWindowInner
*
innerWindow
=
aDocument
-
>
GetInnerWindow
(
)
;
if
(
NS_WARN_IF
(
!
innerWindow
)
)
{
return
nullptr
;
}
bool
isForeignAndNotAddon
=
false
;
if
(
!
BasePrincipal
:
:
Cast
(
aDocument
-
>
NodePrincipal
(
)
)
-
>
AddonPolicy
(
)
)
{
rv
=
aThirdPartyUtil
-
>
IsThirdPartyWindow
(
innerWindow
-
>
GetOuterWindow
(
)
aCookieParser
.
HostURI
(
)
&
isForeignAndNotAddon
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
isForeignAndNotAddon
=
true
;
}
}
bool
mustBePartitioned
=
isForeignAndNotAddon
&
&
aDocument
-
>
CookieJarSettings
(
)
-
>
GetCookieBehavior
(
)
=
=
nsICookieService
:
:
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
&
&
!
aDocument
-
>
UsingStorageAccess
(
)
;
CookieStatus
cookieStatus
=
CookieStatusForWindow
(
innerWindow
aCookieParser
.
HostURI
(
)
)
;
MOZ_ASSERT
(
cookieStatus
=
=
STATUS_ACCEPTED
|
|
cookieStatus
=
=
STATUS_ACCEPT_SESSION
)
;
nsCString
cookieString
(
aCookieString
)
;
aCookieParser
.
Parse
(
baseDomain
requireHostMatch
cookieStatus
cookieString
EmptyCString
(
)
false
isForeignAndNotAddon
mustBePartitioned
aDocument
-
>
IsInPrivateBrowsing
(
)
)
;
if
(
!
aCookieParser
.
ContainsCookie
(
)
)
{
return
nullptr
;
}
if
(
!
CookieCommons
:
:
CheckCookiePermission
(
aDocument
-
>
NodePrincipal
(
)
aDocument
-
>
CookieJarSettings
(
)
aCookieParser
.
CookieData
(
)
)
)
{
NotifyRejectionToObservers
(
aCookieParser
.
HostURI
(
)
OPERATION_WRITE
)
;
ContentBlockingNotifier
:
:
OnDecision
(
innerWindow
ContentBlockingNotifier
:
:
BlockingDecision
:
:
eBlock
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_BY_PERMISSION
)
;
return
nullptr
;
}
bool
needPartitioned
=
StaticPrefs
:
:
network_cookie_CHIPS_enabled
(
)
&
&
aCookieParser
.
CookieData
(
)
.
isPartitioned
(
)
;
nsCOMPtr
<
nsIPrincipal
>
cookiePrincipal
=
needPartitioned
?
aDocument
-
>
PartitionedPrincipal
(
)
:
aDocument
-
>
EffectiveCookiePrincipal
(
)
;
MOZ_ASSERT
(
cookiePrincipal
)
;
nsCOMPtr
<
nsICookieService
>
service
=
do_GetService
(
NS_COOKIESERVICE_CONTRACTID
)
;
if
(
!
service
)
{
return
nullptr
;
}
uint32_t
dummyRejectedReason
=
0
;
if
(
aDocument
-
>
CookieJarSettings
(
)
-
>
GetLimitForeignContexts
(
)
&
&
!
service
-
>
HasExistingCookies
(
baseDomain
cookiePrincipal
-
>
OriginAttributesRef
(
)
)
&
&
!
ShouldAllowAccessFor
(
innerWindow
aCookieParser
.
HostURI
(
)
&
dummyRejectedReason
)
)
{
return
nullptr
;
}
RefPtr
<
Cookie
>
cookie
=
Cookie
:
:
Create
(
aCookieParser
.
CookieData
(
)
cookiePrincipal
-
>
OriginAttributesRef
(
)
)
;
MOZ_ASSERT
(
cookie
)
;
cookie
-
>
SetLastAccessed
(
currentTimeInUsec
)
;
cookie
-
>
SetCreationTime
(
Cookie
:
:
GenerateUniqueCreationTime
(
currentTimeInUsec
)
)
;
aBaseDomain
=
baseDomain
;
aAttrs
=
cookiePrincipal
-
>
OriginAttributesRef
(
)
;
return
cookie
.
forget
(
)
;
}
already_AddRefed
<
nsICookieJarSettings
>
CookieCommons
:
:
GetCookieJarSettings
(
nsIChannel
*
aChannel
)
{
nsCOMPtr
<
nsICookieJarSettings
>
cookieJarSettings
;
bool
shouldResistFingerprinting
=
nsContentUtils
:
:
ShouldResistFingerprinting
(
aChannel
RFPTarget
:
:
IsAlwaysEnabledForPrecompute
)
;
if
(
aChannel
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsresult
rv
=
loadInfo
-
>
GetCookieJarSettings
(
getter_AddRefs
(
cookieJarSettings
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
cookieJarSettings
=
CookieJarSettings
:
:
GetBlockingAll
(
shouldResistFingerprinting
)
;
}
}
else
{
cookieJarSettings
=
CookieJarSettings
:
:
Create
(
CookieJarSettings
:
:
eRegular
shouldResistFingerprinting
)
;
}
MOZ_ASSERT
(
cookieJarSettings
)
;
return
cookieJarSettings
.
forget
(
)
;
}
bool
CookieCommons
:
:
ShouldIncludeCrossSiteCookieForDocument
(
Cookie
*
aCookie
dom
:
:
Document
*
aDocument
)
{
MOZ_ASSERT
(
aCookie
)
;
MOZ_ASSERT
(
aDocument
)
;
int32_t
sameSiteAttr
=
0
;
aCookie
-
>
GetSameSite
(
&
sameSiteAttr
)
;
if
(
aDocument
-
>
CookieJarSettings
(
)
-
>
GetPartitionForeign
(
)
&
&
(
StaticPrefs
:
:
network_cookie_cookieBehavior_optInPartitioning
(
)
|
|
(
aDocument
-
>
IsInPrivateBrowsing
(
)
&
&
StaticPrefs
:
:
network_cookie_cookieBehavior_optInPartitioning_pbmode
(
)
)
)
&
&
!
(
aCookie
-
>
IsPartitioned
(
)
&
&
aCookie
-
>
RawIsPartitioned
(
)
)
&
&
!
aDocument
-
>
UsingStorageAccess
(
)
)
{
return
false
;
}
return
sameSiteAttr
=
=
nsICookie
:
:
SAMESITE_NONE
;
}
bool
CookieCommons
:
:
IsSafeTopLevelNav
(
nsIChannel
*
aChannel
)
{
if
(
!
aChannel
)
{
return
false
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsCOMPtr
<
nsIInterceptionInfo
>
interceptionInfo
=
loadInfo
-
>
InterceptionInfo
(
)
;
if
(
(
loadInfo
-
>
GetExternalContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
&
&
loadInfo
-
>
GetExternalContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_SAVEAS_DOWNLOAD
)
&
&
!
interceptionInfo
)
{
return
false
;
}
if
(
interceptionInfo
&
&
interceptionInfo
-
>
GetExtContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
&
&
interceptionInfo
-
>
GetExtContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_SAVEAS_DOWNLOAD
&
&
interceptionInfo
-
>
GetExtContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_INVALID
)
{
return
false
;
}
return
NS_IsSafeMethodNav
(
aChannel
)
;
}
bool
IsSameSiteSchemeEqual
(
const
nsACString
&
aFirstScheme
const
nsACString
&
aSecondScheme
)
{
if
(
!
StaticPrefs
:
:
network_cookie_sameSite_schemeful
(
)
)
{
return
true
;
}
auto
isSchemeHttpOrHttps
=
[
]
(
const
nsACString
&
scheme
)
-
>
bool
{
return
scheme
.
EqualsLiteral
(
"
http
"
)
|
|
scheme
.
EqualsLiteral
(
"
https
"
)
;
}
;
if
(
!
isSchemeHttpOrHttps
(
aFirstScheme
)
|
|
!
isSchemeHttpOrHttps
(
aSecondScheme
)
)
{
return
true
;
}
return
aFirstScheme
.
Equals
(
aSecondScheme
)
;
}
bool
CookieCommons
:
:
IsSameSiteForeign
(
nsIChannel
*
aChannel
nsIURI
*
aHostURI
bool
*
aHadCrossSiteRedirects
)
{
*
aHadCrossSiteRedirects
=
false
;
if
(
!
aChannel
)
{
return
false
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsCOMPtr
<
nsIURI
>
channelURI
;
NS_GetFinalChannelURI
(
aChannel
getter_AddRefs
(
channelURI
)
)
;
nsCOMPtr
<
nsIInterceptionInfo
>
interceptionInfo
=
loadInfo
-
>
InterceptionInfo
(
)
;
RefPtr
<
BasePrincipal
>
triggeringPrincipal
;
ExtContentPolicy
contentPolicyType
;
if
(
interceptionInfo
&
&
interceptionInfo
-
>
TriggeringPrincipal
(
)
)
{
triggeringPrincipal
=
BasePrincipal
:
:
Cast
(
interceptionInfo
-
>
TriggeringPrincipal
(
)
)
;
contentPolicyType
=
interceptionInfo
-
>
GetExtContentPolicyType
(
)
;
}
else
{
triggeringPrincipal
=
BasePrincipal
:
:
Cast
(
loadInfo
-
>
TriggeringPrincipal
(
)
)
;
contentPolicyType
=
loadInfo
-
>
GetExternalContentPolicyType
(
)
;
if
(
triggeringPrincipal
-
>
AddonPolicy
(
)
&
&
triggeringPrincipal
-
>
AddonAllowsLoad
(
channelURI
)
)
{
return
false
;
}
}
const
nsTArray
<
nsCOMPtr
<
nsIRedirectHistoryEntry
>
>
&
redirectChain
(
interceptionInfo
&
&
interceptionInfo
-
>
TriggeringPrincipal
(
)
?
interceptionInfo
-
>
RedirectChain
(
)
:
loadInfo
-
>
RedirectChain
(
)
)
;
nsAutoCString
hostScheme
otherScheme
;
aHostURI
-
>
GetScheme
(
hostScheme
)
;
bool
isForeign
=
true
;
nsresult
rv
;
if
(
contentPolicyType
=
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
|
|
contentPolicyType
=
=
ExtContentPolicy
:
:
TYPE_SAVEAS_DOWNLOAD
)
{
rv
=
triggeringPrincipal
-
>
IsThirdPartyChannel
(
aChannel
&
isForeign
)
;
triggeringPrincipal
-
>
GetScheme
(
otherScheme
)
;
}
else
{
if
(
interceptionInfo
&
&
interceptionInfo
-
>
TriggeringPrincipal
(
)
)
{
isForeign
=
interceptionInfo
-
>
FromThirdParty
(
)
;
if
(
isForeign
)
{
return
true
;
}
}
nsCOMPtr
<
mozIThirdPartyUtil
>
thirdPartyUtil
=
do_GetService
(
THIRDPARTYUTIL_CONTRACTID
)
;
if
(
!
thirdPartyUtil
)
{
return
true
;
}
rv
=
thirdPartyUtil
-
>
IsThirdPartyChannel
(
aChannel
aHostURI
&
isForeign
)
;
channelURI
-
>
GetScheme
(
otherScheme
)
;
}
if
(
NS_FAILED
(
rv
)
|
|
isForeign
)
{
return
true
;
}
if
(
!
IsSameSiteSchemeEqual
(
otherScheme
hostScheme
)
)
{
return
true
;
}
if
(
contentPolicyType
=
=
ExtContentPolicy
:
:
TYPE_SUBDOCUMENT
)
{
rv
=
triggeringPrincipal
-
>
IsThirdPartyChannel
(
aChannel
&
isForeign
)
;
if
(
NS_FAILED
(
rv
)
|
|
isForeign
)
{
return
true
;
}
}
nsCOMPtr
<
nsIPrincipal
>
redirectPrincipal
;
for
(
nsIRedirectHistoryEntry
*
entry
:
redirectChain
)
{
entry
-
>
GetPrincipal
(
getter_AddRefs
(
redirectPrincipal
)
)
;
if
(
redirectPrincipal
)
{
rv
=
redirectPrincipal
-
>
IsThirdPartyChannel
(
aChannel
&
isForeign
)
;
if
(
NS_FAILED
(
rv
)
|
|
isForeign
)
{
*
aHadCrossSiteRedirects
=
isForeign
;
return
true
;
}
nsAutoCString
redirectScheme
;
redirectPrincipal
-
>
GetScheme
(
redirectScheme
)
;
if
(
!
IsSameSiteSchemeEqual
(
redirectScheme
hostScheme
)
)
{
*
aHadCrossSiteRedirects
=
true
;
return
true
;
}
}
}
return
isForeign
;
}
nsICookie
:
:
schemeType
CookieCommons
:
:
URIToSchemeType
(
nsIURI
*
aURI
)
{
MOZ_ASSERT
(
aURI
)
;
nsAutoCString
scheme
;
nsresult
rv
=
aURI
-
>
GetScheme
(
scheme
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nsICookie
:
:
SCHEME_UNSET
;
}
return
SchemeToSchemeType
(
scheme
)
;
}
nsICookie
:
:
schemeType
CookieCommons
:
:
PrincipalToSchemeType
(
nsIPrincipal
*
aPrincipal
)
{
MOZ_ASSERT
(
aPrincipal
)
;
nsAutoCString
scheme
;
nsresult
rv
=
aPrincipal
-
>
GetScheme
(
scheme
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nsICookie
:
:
SCHEME_UNSET
;
}
return
SchemeToSchemeType
(
scheme
)
;
}
nsICookie
:
:
schemeType
CookieCommons
:
:
SchemeToSchemeType
(
const
nsACString
&
aScheme
)
{
MOZ_ASSERT
(
IsSchemeSupported
(
aScheme
)
)
;
if
(
aScheme
.
Equals
(
"
https
"
)
)
{
return
nsICookie
:
:
SCHEME_HTTPS
;
}
if
(
aScheme
.
Equals
(
"
http
"
)
)
{
return
nsICookie
:
:
SCHEME_HTTP
;
}
if
(
aScheme
.
Equals
(
"
file
"
)
)
{
return
nsICookie
:
:
SCHEME_FILE
;
}
MOZ_CRASH
(
"
Unsupported
scheme
type
"
)
;
}
bool
CookieCommons
:
:
IsSchemeSupported
(
nsIPrincipal
*
aPrincipal
)
{
MOZ_ASSERT
(
aPrincipal
)
;
nsAutoCString
scheme
;
nsresult
rv
=
aPrincipal
-
>
GetScheme
(
scheme
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
return
IsSchemeSupported
(
scheme
)
;
}
bool
CookieCommons
:
:
IsSchemeSupported
(
nsIURI
*
aURI
)
{
MOZ_ASSERT
(
aURI
)
;
nsAutoCString
scheme
;
nsresult
rv
=
aURI
-
>
GetScheme
(
scheme
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
return
IsSchemeSupported
(
scheme
)
;
}
bool
CookieCommons
:
:
IsSchemeSupported
(
const
nsACString
&
aScheme
)
{
return
aScheme
.
Equals
(
"
https
"
)
|
|
aScheme
.
Equals
(
"
http
"
)
|
|
aScheme
.
Equals
(
"
file
"
)
;
}
bool
CookieCommons
:
:
ChipsLimitEnabledAndChipsCookie
(
const
Cookie
&
cookie
dom
:
:
BrowsingContext
*
aBrowsingContext
)
{
bool
tcpEnabled
=
false
;
if
(
aBrowsingContext
)
{
dom
:
:
CanonicalBrowsingContext
*
canonBC
=
aBrowsingContext
-
>
Canonical
(
)
;
if
(
canonBC
)
{
dom
:
:
WindowGlobalParent
*
windowParent
=
canonBC
-
>
GetCurrentWindowGlobal
(
)
;
if
(
windowParent
)
{
nsCOMPtr
<
nsICookieJarSettings
>
cjs
=
windowParent
-
>
CookieJarSettings
(
)
;
tcpEnabled
=
cjs
-
>
GetPartitionForeign
(
)
;
}
}
}
else
{
nsCOMPtr
<
nsICookieJarSettings
>
cjs
;
cjs
=
CookieJarSettings
:
:
Create
(
CookieJarSettings
:
:
eRegular
false
)
;
tcpEnabled
=
cjs
-
>
GetPartitionForeign
(
)
;
}
return
StaticPrefs
:
:
network_cookie_CHIPS_enabled
(
)
&
&
StaticPrefs
:
:
network_cookie_chips_partitionLimitEnabled
(
)
&
&
cookie
.
IsPartitioned
(
)
&
&
cookie
.
RawIsPartitioned
(
)
&
&
tcpEnabled
;
}
void
CookieCommons
:
:
ComposeCookieString
(
nsTArray
<
RefPtr
<
Cookie
>
>
&
aCookieList
nsACString
&
aCookieString
)
{
for
(
Cookie
*
cookie
:
aCookieList
)
{
if
(
!
cookie
-
>
Name
(
)
.
IsEmpty
(
)
|
|
!
cookie
-
>
Value
(
)
.
IsEmpty
(
)
)
{
if
(
!
aCookieString
.
IsEmpty
(
)
)
{
aCookieString
.
AppendLiteral
(
"
;
"
)
;
}
if
(
!
cookie
-
>
Name
(
)
.
IsEmpty
(
)
)
{
aCookieString
+
=
cookie
-
>
Name
(
)
+
"
=
"
_ns
+
cookie
-
>
Value
(
)
;
}
else
{
aCookieString
+
=
cookie
-
>
Value
(
)
;
}
}
}
}
void
CookieCommons
:
:
GetServerDateHeader
(
nsIChannel
*
aChannel
nsACString
&
aServerDateHeader
)
{
if
(
!
aChannel
)
{
return
;
}
nsCOMPtr
<
nsIHttpChannel
>
channel
=
do_QueryInterface
(
aChannel
)
;
if
(
NS_WARN_IF
(
!
channel
)
)
{
return
;
}
Unused
<
<
channel
-
>
GetResponseHeader
(
"
Date
"
_ns
aServerDateHeader
)
;
}
}
}
