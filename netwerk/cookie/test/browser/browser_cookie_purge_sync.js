const
URL_EXAMPLE
=
"
https
:
/
/
example
.
com
"
;
const
COOKIE_NAMEVALUE
=
"
name
=
value
"
;
const
COOKIE_NAMEVALUE_2
=
COOKIE_NAMEVALUE
+
"
2
"
;
const
COOKIE_STRING
=
COOKIE_NAMEVALUE
+
"
;
Secure
;
SameSite
=
None
"
;
const
COOKIE_STRING_2
=
COOKIE_NAMEVALUE_2
+
"
;
Secure
;
SameSite
=
None
"
;
const
MAX_AGE_OLD
=
2
;
const
MAX_AGE_NEW
=
100
;
registerCleanupFunction
(
(
)
=
>
{
info
(
"
Cleaning
up
the
test
setup
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
cookie
.
sameSite
.
laxByDefault
"
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
add_setup
(
async
function
(
)
{
info
(
"
Setting
up
the
test
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
sameSite
.
laxByDefault
"
false
)
;
}
)
;
function
waitForNotificationPromise
(
notification
expected
)
{
return
new
Promise
(
resolve
=
>
{
function
observer
(
subject
topic
data
)
{
is
(
content
.
document
.
cookie
expected
)
;
Services
.
obs
.
removeObserver
(
observer
notification
)
;
resolve
(
)
;
}
Services
.
obs
.
addObserver
(
observer
notification
)
;
}
)
;
}
add_task
(
async
function
test_purge_sync_batch_and_deleted
(
)
{
const
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_EXAMPLE
)
;
const
browser
=
gBrowser
.
getBrowserForTab
(
tab1
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
const
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_EXAMPLE
)
;
const
browser2
=
gBrowser
.
getBrowserForTab
(
tab2
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser2
)
;
let
firstCookieAdded
=
SpecialPowers
.
spawn
(
browser2
[
"
content
-
added
-
cookie
"
COOKIE_NAMEVALUE
]
waitForNotificationPromise
)
;
await
TestUtils
.
waitForTick
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
COOKIE_STRING
MAX_AGE_OLD
]
(
cookie
max_age
)
=
>
{
content
.
document
.
cookie
=
cookie
+
"
;
Max
-
Age
=
"
+
max_age
;
}
)
;
await
firstCookieAdded
;
await
SpecialPowers
.
spawn
(
browser2
[
]
(
)
=
>
{
return
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
cookie
=
=
"
"
"
cookie
did
not
expire
in
time
"
200
)
.
catch
(
msg
=
>
{
is
(
false
"
Cookie
did
not
expire
in
time
"
)
;
}
)
;
}
)
;
let
batchDeletedPromise
=
SpecialPowers
.
spawn
(
browser
[
"
content
-
batch
-
deleted
-
cookies
"
COOKIE_NAMEVALUE_2
]
waitForNotificationPromise
)
;
await
TestUtils
.
waitForTick
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
COOKIE_STRING_2
MAX_AGE_NEW
]
(
cookie
max_age
)
=
>
{
content
.
document
.
cookie
=
cookie
+
"
;
Max
-
Age
=
"
+
max_age
;
}
)
;
await
batchDeletedPromise
;
let
cookieRemovedPromise
=
SpecialPowers
.
spawn
(
browser
[
"
content
-
removed
-
cookie
"
"
"
]
waitForNotificationPromise
)
;
let
cookieRemovedPromise2
=
SpecialPowers
.
spawn
(
browser2
[
"
content
-
removed
-
cookie
"
"
"
]
waitForNotificationPromise
)
;
await
TestUtils
.
waitForTick
(
)
;
Services
.
cookies
.
removeCookiesFromExactHost
(
"
example
.
com
"
JSON
.
stringify
(
{
}
)
)
;
await
cookieRemovedPromise
;
await
cookieRemovedPromise2
;
let
anotherCookieAdded
=
SpecialPowers
.
spawn
(
browser2
[
"
content
-
added
-
cookie
"
COOKIE_NAMEVALUE
]
waitForNotificationPromise
)
;
await
TestUtils
.
waitForTick
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
COOKIE_STRING
MAX_AGE_NEW
]
(
cookie
max_age
)
=
>
{
content
.
document
.
cookie
=
cookie
+
"
;
Max
-
Age
=
"
+
max_age
;
}
)
;
await
anotherCookieAdded
;
let
cleanup
=
SpecialPowers
.
spawn
(
browser2
[
"
content
-
removed
-
all
-
cookies
"
"
"
]
waitForNotificationPromise
)
;
await
TestUtils
.
waitForTick
(
)
;
Services
.
cookies
.
removeAll
(
)
;
await
cleanup
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
