"
use
strict
"
;
const
{
RemoteSettings
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
)
;
const
COLLECTION_NAME
=
"
third
-
party
-
cookie
-
blocking
-
exempt
-
urls
"
;
const
PREF_NAME
=
"
network
.
cookie
.
cookieBehavior
.
optInPartitioning
.
skip_list
"
;
const
FIRST_PARTY_DOMAIN
=
"
example
.
com
"
;
const
THIRD_PARTY_DOMAIN
=
"
example
.
org
"
;
const
ANOTHER_THIRD_PARTY_DOMAIN
=
"
example
.
net
"
;
const
FIRST_PARTY_SITE
=
https
:
/
/
{
FIRST_PARTY_DOMAIN
}
;
const
THIRD_PARTY_SITE
=
https
:
/
/
{
THIRD_PARTY_DOMAIN
}
;
const
ANOTHER_THIRD_PARTY_SITE
=
https
:
/
/
{
ANOTHER_THIRD_PARTY_DOMAIN
}
;
const
FIRST_PARTY_URL
=
{
FIRST_PARTY_SITE
}
/
{
TEST_PATH
}
/
file_empty
.
html
;
const
THIRD_PARTY_URL
=
{
THIRD_PARTY_SITE
}
/
{
TEST_PATH
}
/
file_empty
.
html
;
let
db
;
async
function
remoteSettingsSync
(
{
created
updated
deleted
}
)
{
await
RemoteSettings
(
COLLECTION_NAME
)
.
emit
(
"
sync
"
{
data
:
{
created
updated
deleted
}
}
)
;
}
const
strArrayMatches
=
(
arr1
arr2
)
=
>
arr1
.
length
=
=
=
arr2
.
length
&
&
arr1
.
sort
(
)
.
every
(
(
value
index
)
=
>
value
=
=
=
arr2
.
sort
(
)
[
index
]
)
;
async
function
waitForAllowListState
(
expected
)
{
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
strArrayMatches
(
Services
.
cookies
.
testGet3PCBExceptions
(
)
expected
)
;
}
"
Waiting
for
exceptions
to
be
imported
.
"
)
;
Assert
.
deepEqual
(
Services
.
cookies
.
testGet3PCBExceptions
(
)
.
sort
(
)
expected
.
sort
(
)
"
Imported
the
correct
site
host
exceptions
"
)
;
}
async
function
createNestedIframes
(
browser
firstPartyURL
thirdPartyURL
)
{
return
SpecialPowers
.
spawn
(
browser
[
firstPartyURL
thirdPartyURL
]
async
(
firstPartyURL
thirdPartyURL
)
=
>
{
let
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
thirdPartyURL
;
await
new
Promise
(
resolve
=
>
{
iframe
.
onload
=
resolve
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
}
)
;
let
ABABC
=
await
SpecialPowers
.
spawn
(
iframe
[
firstPartyURL
]
async
firstPartyURL
=
>
{
let
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
firstPartyURL
;
await
new
Promise
(
resolve
=
>
{
iframe
.
onload
=
resolve
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
}
)
;
return
iframe
.
browsingContext
;
}
)
;
return
{
iframeBC
:
iframe
.
browsingContext
ABABC
}
;
}
)
;
}
async
function
setThirdPartyCookie
(
browser
iframeBC
ABABC
)
{
const
THIRD_PARTY_FETCH_COOKIE_URL
=
{
THIRD_PARTY_SITE
}
/
{
TEST_PATH
}
/
setFetchCookie
.
sjs
;
await
SpecialPowers
.
spawn
(
browser
[
THIRD_PARTY_FETCH_COOKIE_URL
]
async
url
=
>
{
await
content
.
fetch
(
url
{
credentials
:
"
include
"
}
)
;
}
)
;
await
SpecialPowers
.
spawn
(
iframeBC
[
]
async
_
=
>
{
content
.
document
.
cookie
=
"
thirdPartyIframe
=
value
;
SameSite
=
None
;
Secure
;
"
;
}
)
;
await
SpecialPowers
.
spawn
(
ABABC
[
]
async
_
=
>
{
content
.
document
.
cookie
=
"
ABAIframe
=
value
;
SameSite
=
None
;
Secure
;
"
;
}
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
cookieBehavior
.
optInPartitioning
"
true
]
]
}
)
;
db
=
RemoteSettings
(
COLLECTION_NAME
)
.
db
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
[
]
{
clear
:
true
}
)
;
}
)
;
add_task
(
async
function
test_3pcb_no_exception
(
)
{
Services
.
cookies
.
removeAll
(
)
;
info
(
"
Opening
a
new
tab
.
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
FIRST_PARTY_URL
)
;
let
browser
=
tab
.
linkedBrowser
;
info
(
"
Creating
iframes
and
setting
third
-
party
cookies
.
"
)
;
let
{
iframeBC
ABABC
}
=
await
createNestedIframes
(
browser
FIRST_PARTY_URL
THIRD_PARTY_URL
)
;
await
setThirdPartyCookie
(
browser
iframeBC
ABABC
)
;
info
(
"
Verifying
cookies
.
"
)
;
await
SpecialPowers
.
spawn
(
iframeBC
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
"
"
No
cookies
should
be
set
in
the
iframeBC
"
)
;
}
)
;
await
SpecialPowers
.
spawn
(
ABABC
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
"
"
No
cookies
should
be
set
in
the
ABA
iframe
"
)
;
}
)
;
info
(
"
Clean
up
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_3pcb_pref_exception
(
)
{
Services
.
cookies
.
removeAll
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_NAME
{
FIRST_PARTY_SITE
}
{
THIRD_PARTY_SITE
}
;
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
]
]
}
)
;
info
(
"
Opening
a
new
tab
.
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
FIRST_PARTY_URL
)
;
let
browser
=
tab
.
linkedBrowser
;
info
(
"
Creating
iframes
and
setting
third
-
party
cookies
.
"
)
;
let
{
iframeBC
ABABC
}
=
await
createNestedIframes
(
browser
FIRST_PARTY_URL
THIRD_PARTY_URL
)
;
await
setThirdPartyCookie
(
browser
iframeBC
ABABC
)
;
info
(
"
Verifying
cookies
.
"
)
;
await
SpecialPowers
.
spawn
(
iframeBC
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
thirdPartyFetch
=
value
;
thirdPartyIframe
=
value
"
"
Cookies
should
be
set
in
the
iframeBC
"
)
;
}
)
;
await
SpecialPowers
.
spawn
(
ABABC
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
ABAIframe
=
value
"
"
No
cookies
should
be
set
in
the
ABA
iframe
"
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
info
(
"
Clear
exceptions
and
verify
cookies
are
still
valid
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_NAME
"
"
]
]
}
)
;
info
(
"
Opening
the
tab
again
.
"
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
FIRST_PARTY_URL
)
;
browser
=
tab
.
linkedBrowser
;
let
{
iframeBC
:
iframeBCNew
ABABC
:
ABABCNew
}
=
await
createNestedIframes
(
browser
FIRST_PARTY_URL
THIRD_PARTY_URL
)
;
await
SpecialPowers
.
spawn
(
iframeBCNew
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
thirdPartyFetch
=
value
;
thirdPartyIframe
=
value
"
"
Cookies
should
be
set
in
the
iframeBC
"
)
;
}
)
;
await
SpecialPowers
.
spawn
(
ABABCNew
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
ABAIframe
=
value
"
"
No
cookies
should
be
set
in
the
ABA
iframe
"
)
;
}
)
;
info
(
"
Clean
up
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_3pcb_pref_wildcard_exception
(
)
{
Services
.
cookies
.
removeAll
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_NAME
*
{
THIRD_PARTY_SITE
}
;
*
{
FIRST_PARTY_SITE
}
]
]
}
)
;
info
(
"
Opening
a
new
tab
.
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
FIRST_PARTY_URL
)
;
let
browser
=
tab
.
linkedBrowser
;
info
(
"
Creating
iframes
and
setting
third
-
party
cookies
.
"
)
;
let
{
iframeBC
ABABC
}
=
await
createNestedIframes
(
browser
FIRST_PARTY_URL
THIRD_PARTY_URL
)
;
await
setThirdPartyCookie
(
browser
iframeBC
ABABC
)
;
info
(
"
Verifying
cookies
.
"
)
;
await
SpecialPowers
.
spawn
(
iframeBC
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
thirdPartyFetch
=
value
;
thirdPartyIframe
=
value
"
"
Cookies
should
be
set
in
the
iframeBC
"
)
;
}
)
;
await
SpecialPowers
.
spawn
(
ABABC
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
ABAIframe
=
value
"
"
Cookies
should
be
set
in
the
ABA
iframe
"
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
info
(
"
Clear
exceptions
and
verify
cookies
are
still
valid
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_NAME
"
"
]
]
}
)
;
info
(
"
Opening
the
tab
again
.
"
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
FIRST_PARTY_URL
)
;
browser
=
tab
.
linkedBrowser
;
let
{
iframeBC
:
iframeBCNew
ABABC
:
ABABCNew
}
=
await
createNestedIframes
(
browser
FIRST_PARTY_URL
THIRD_PARTY_URL
)
;
await
SpecialPowers
.
spawn
(
iframeBCNew
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
thirdPartyFetch
=
value
;
thirdPartyIframe
=
value
"
"
Cookies
should
be
set
in
the
iframeBC
"
)
;
}
)
;
await
SpecialPowers
.
spawn
(
ABABCNew
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
ABAIframe
=
value
"
"
No
cookies
should
be
set
in
the
ABA
iframe
"
)
;
}
)
;
info
(
"
Clean
up
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_3pcb_pref_exception_updates
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_NAME
"
"
]
]
}
)
;
info
(
"
Set
initial
pref
value
"
)
;
Services
.
prefs
.
setStringPref
(
PREF_NAME
{
FIRST_PARTY_SITE
}
{
THIRD_PARTY_SITE
}
;
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
)
;
await
waitForAllowListState
(
[
{
FIRST_PARTY_SITE
}
{
THIRD_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
]
)
;
info
(
"
Update
the
pref
exception
"
)
;
Services
.
prefs
.
setStringPref
(
PREF_NAME
{
FIRST_PARTY_SITE
}
{
ANOTHER_THIRD_PARTY_SITE
}
;
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
)
;
await
waitForAllowListState
(
[
{
FIRST_PARTY_SITE
}
{
ANOTHER_THIRD_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
]
)
;
info
(
"
Remove
one
exception
"
)
;
Services
.
prefs
.
setStringPref
(
PREF_NAME
{
FIRST_PARTY_SITE
}
{
ANOTHER_THIRD_PARTY_SITE
}
)
;
await
waitForAllowListState
(
[
{
FIRST_PARTY_SITE
}
{
ANOTHER_THIRD_PARTY_SITE
}
]
)
;
info
(
"
Remove
all
exceptions
"
)
;
Services
.
prefs
.
setStringPref
(
PREF_NAME
"
"
)
;
await
waitForAllowListState
(
[
]
)
;
info
(
"
Cleanup
"
)
;
Services
.
prefs
.
clearUserPref
(
PREF_NAME
)
;
}
)
;
add_task
(
async
function
test_3pcb_rs_exception
(
)
{
Services
.
cookies
.
removeAll
(
)
;
info
(
"
Import
RS
entries
.
"
)
;
let
thirdPartyEntry
=
await
db
.
create
(
{
fpSite
:
FIRST_PARTY_SITE
tpSite
:
THIRD_PARTY_SITE
}
)
;
let
ABAEntry
=
await
db
.
create
(
{
fpSite
:
FIRST_PARTY_SITE
tpSite
:
FIRST_PARTY_SITE
}
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
created
:
[
thirdPartyEntry
ABAEntry
]
}
)
;
await
waitForAllowListState
(
[
{
FIRST_PARTY_SITE
}
{
THIRD_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
]
)
;
info
(
"
Opening
a
new
tab
.
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
FIRST_PARTY_URL
)
;
let
browser
=
tab
.
linkedBrowser
;
info
(
"
Creating
iframes
and
setting
third
-
party
cookies
.
"
)
;
let
{
iframeBC
ABABC
}
=
await
createNestedIframes
(
browser
FIRST_PARTY_URL
THIRD_PARTY_URL
)
;
await
setThirdPartyCookie
(
browser
iframeBC
ABABC
)
;
info
(
"
Verifying
cookies
.
"
)
;
await
SpecialPowers
.
spawn
(
iframeBC
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
thirdPartyFetch
=
value
;
thirdPartyIframe
=
value
"
"
Cookies
should
be
set
in
the
iframeBC
"
)
;
}
)
;
await
SpecialPowers
.
spawn
(
ABABC
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
ABAIframe
=
value
"
"
No
cookies
should
be
set
in
the
ABA
iframe
"
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
info
(
"
Clear
exceptions
and
verify
cookies
are
still
valid
"
)
;
await
db
.
delete
(
thirdPartyEntry
.
id
)
;
await
db
.
delete
(
ABAEntry
.
id
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
deleted
:
[
thirdPartyEntry
ABAEntry
]
}
)
;
await
waitForAllowListState
(
[
]
)
;
info
(
"
Opening
the
tab
again
.
"
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
FIRST_PARTY_URL
)
;
browser
=
tab
.
linkedBrowser
;
let
{
iframeBC
:
iframeBCNew
ABABC
:
ABABCNew
}
=
await
createNestedIframes
(
browser
FIRST_PARTY_URL
THIRD_PARTY_URL
)
;
await
SpecialPowers
.
spawn
(
iframeBCNew
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
thirdPartyFetch
=
value
;
thirdPartyIframe
=
value
"
"
Cookies
should
be
set
in
the
iframeBC
"
)
;
}
)
;
await
SpecialPowers
.
spawn
(
ABABCNew
[
]
async
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
is
(
cookies
"
ABAIframe
=
value
"
"
No
cookies
should
be
set
in
the
ABA
iframe
"
)
;
}
)
;
info
(
"
Clean
up
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
db
.
clear
(
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
}
)
;
add_task
(
async
function
test_3pcb_rs_exception_updates
(
)
{
info
(
"
Create
the
third
-
party
entry
and
the
ABA
entry
.
"
)
;
let
thirdPartyEntry
=
await
db
.
create
(
{
fpSite
:
FIRST_PARTY_SITE
tpSite
:
THIRD_PARTY_SITE
}
)
;
let
ABAEntry
=
await
db
.
create
(
{
fpSite
:
FIRST_PARTY_SITE
tpSite
:
FIRST_PARTY_SITE
}
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
created
:
[
thirdPartyEntry
ABAEntry
]
}
)
;
await
waitForAllowListState
(
[
{
FIRST_PARTY_SITE
}
{
THIRD_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
]
)
;
info
(
"
Update
third
-
party
entry
with
a
different
third
-
party
site
.
"
)
;
let
thirdPartyEntryUpdated
=
{
.
.
.
thirdPartyEntry
}
;
thirdPartyEntryUpdated
.
tpSite
=
ANOTHER_THIRD_PARTY_SITE
;
await
db
.
update
(
thirdPartyEntry
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
updated
:
[
{
old
:
thirdPartyEntry
new
:
thirdPartyEntryUpdated
}
]
}
)
;
await
waitForAllowListState
(
[
{
FIRST_PARTY_SITE
}
{
ANOTHER_THIRD_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
]
)
;
info
(
"
Create
another
entry
and
remove
the
ABA
entry
.
"
)
;
let
anotherThirdPartyEntry
=
await
db
.
create
(
{
fpSite
:
ANOTHER_THIRD_PARTY_SITE
tpSite
:
THIRD_PARTY_SITE
}
)
;
await
db
.
delete
(
ABAEntry
.
id
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
created
:
[
anotherThirdPartyEntry
]
deleted
:
[
ABAEntry
]
}
)
;
await
waitForAllowListState
(
[
{
FIRST_PARTY_SITE
}
{
ANOTHER_THIRD_PARTY_SITE
}
{
ANOTHER_THIRD_PARTY_SITE
}
{
THIRD_PARTY_SITE
}
]
)
;
info
(
"
Remove
all
RS
entries
.
"
)
;
await
db
.
delete
(
thirdPartyEntryUpdated
.
id
)
;
await
db
.
delete
(
anotherThirdPartyEntry
.
id
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
deleted
:
[
thirdPartyEntryUpdated
anotherThirdPartyEntry
]
}
)
;
await
waitForAllowListState
(
[
]
)
;
info
(
"
Clean
up
"
)
;
await
db
.
clear
(
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
}
)
;
add_task
(
async
function
test_3pcb_rs_precedence_over_pref
(
)
{
info
(
"
Create
the
third
-
party
entry
and
the
ABA
entry
.
"
)
;
let
thirdPartyEntry
=
await
db
.
create
(
{
fpSite
:
FIRST_PARTY_SITE
tpSite
:
THIRD_PARTY_SITE
}
)
;
let
ABAEntry
=
await
db
.
create
(
{
fpSite
:
FIRST_PARTY_SITE
tpSite
:
FIRST_PARTY_SITE
}
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
created
:
[
thirdPartyEntry
ABAEntry
]
}
)
;
await
waitForAllowListState
(
[
{
FIRST_PARTY_SITE
}
{
THIRD_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
]
)
;
info
(
"
Set
the
duplicate
pref
exception
.
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_NAME
{
FIRST_PARTY_SITE
}
{
THIRD_PARTY_SITE
}
;
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
]
]
}
)
;
await
waitForAllowListState
(
[
{
FIRST_PARTY_SITE
}
{
THIRD_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
]
)
;
info
(
"
Remove
the
pref
exception
.
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_NAME
"
"
]
]
}
)
;
await
waitForAllowListState
(
[
{
FIRST_PARTY_SITE
}
{
THIRD_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
{
FIRST_PARTY_SITE
}
]
)
;
info
(
"
Clean
up
"
)
;
await
db
.
delete
(
thirdPartyEntry
.
id
)
;
await
db
.
delete
(
ABAEntry
.
id
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
deleted
:
[
thirdPartyEntry
ABAEntry
]
}
)
;
await
waitForAllowListState
(
[
]
)
;
await
db
.
clear
(
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
}
)
;
