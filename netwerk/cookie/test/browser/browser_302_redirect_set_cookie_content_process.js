"
use
strict
"
;
add_setup
(
async
function
(
)
{
Services
.
cookies
.
removeAll
(
)
;
}
)
;
registerCleanupFunction
(
async
function
(
)
{
Services
.
cookies
.
removeAll
(
)
;
}
)
;
add_task
(
async
function
test_302_redirect_cookies_set_everywhere
(
)
{
const
kRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
https
:
/
/
example
.
com
/
"
)
;
const
kRedirectURL
=
kRoot
+
"
redirect_with_cookie
.
sjs
"
;
const
kSimplePageURL
=
kRoot
+
"
file_empty
.
html
"
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
kSimplePageURL
forceNewProcess
:
true
}
)
;
await
ContentTask
.
spawn
(
tab1
.
linkedBrowser
[
kRedirectURL
]
async
function
(
redirectURL
)
{
Assert
.
equal
(
content
.
document
.
cookie
"
"
"
No
cookies
should
be
set
initially
"
)
;
const
response
=
await
content
.
fetch
(
redirectURL
)
;
Assert
.
ok
(
response
.
url
.
includes
(
"
redirected
=
true
"
)
"
Fetch
was
redirected
"
)
;
Assert
.
equal
(
content
.
document
.
cookie
"
test
-
cookie
=
redirect
-
value
"
"
Cookie
set
from
302
redirect
in
first
content
process
"
)
;
}
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
kSimplePageURL
forceNewProcess
:
true
}
)
;
let
browser2
=
gBrowser
.
getBrowserForTab
(
tab2
)
;
await
ContentTask
.
spawn
(
browser2
[
]
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
cookie
"
test
-
cookie
=
redirect
-
value
"
"
Cookie
visible
in
second
content
process
"
)
;
}
)
;
let
cookies
=
Services
.
cookies
.
getCookiesFromHost
(
"
example
.
com
"
browser2
.
contentPrincipal
.
originAttributes
)
;
let
foundCookie
=
false
;
for
(
let
cookie
of
cookies
)
{
if
(
cookie
.
name
=
=
=
"
test
-
cookie
"
&
&
cookie
.
value
=
=
=
"
redirect
-
value
"
)
{
foundCookie
=
true
;
break
;
}
}
Assert
.
ok
(
foundCookie
"
Cookie
from
302
redirect
is
accessible
from
parent
process
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
