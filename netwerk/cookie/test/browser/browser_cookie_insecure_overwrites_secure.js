let
{
HttpServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
const
urlPath
=
"
/
browser
/
netwerk
/
cookie
/
test
/
browser
/
file_empty
.
html
"
;
const
baseDomain
=
"
example
.
com
"
;
const
URL_INSECURE_COM
=
"
http
:
/
/
"
+
baseDomain
+
urlPath
;
const
URL_SECURE_COM
=
"
https
:
/
/
"
+
baseDomain
+
urlPath
;
const
COOKIE_BASIC
=
"
foo
=
one
"
;
const
COOKIE_OTHER
=
"
foo
=
two
"
;
const
COOKIE_THIRD
=
"
foo
=
three
"
;
const
COOKIE_FORTH
=
"
foo
=
four
"
;
function
securify
(
cookie
)
{
return
cookie
+
"
;
Secure
"
;
}
registerCleanupFunction
(
(
)
=
>
{
info
(
"
Cleaning
up
the
test
"
)
;
}
)
;
async
function
setup
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
0
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookieJarSettings
.
unblocked_for_testing
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
sameSite
.
laxByDefault
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
sameSite
.
noneRequiresSecure
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
sameSite
.
schemeful
"
true
)
;
Services
.
cookies
.
removeAll
(
)
;
}
add_task
(
setup
)
;
add_task
(
async
function
test_insecure_cant_overwrite_secure_via_doc
(
)
{
const
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_INSECURE_COM
)
;
const
browser
=
gBrowser
.
getBrowserForTab
(
tab1
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
const
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_SECURE_COM
)
;
const
browser2
=
gBrowser
.
getBrowserForTab
(
tab2
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser2
)
;
await
SpecialPowers
.
spawn
(
browser
[
COOKIE_BASIC
COOKIE_BASIC
]
(
cookie
expected
)
=
>
{
content
.
document
.
cookie
=
cookie
;
is
(
content
.
document
.
cookie
expected
)
;
}
)
;
await
SpecialPowers
.
spawn
(
browser2
[
COOKIE_BASIC
]
expected
=
>
{
is
(
content
.
document
.
cookie
expected
)
;
}
)
;
await
SpecialPowers
.
spawn
(
browser2
[
securify
(
COOKIE_OTHER
)
COOKIE_OTHER
]
(
cookie
expected
)
=
>
{
content
.
document
.
cookie
=
cookie
;
is
(
content
.
document
.
cookie
expected
)
;
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
COOKIE_THIRD
"
"
]
(
cookie
expected
)
=
>
{
content
.
document
.
cookie
=
cookie
;
is
(
content
.
document
.
cookie
expected
)
;
}
)
;
await
SpecialPowers
.
spawn
(
browser2
[
COOKIE_FORTH
COOKIE_FORTH
]
(
cookie
expected
)
=
>
{
content
.
document
.
cookie
=
cookie
;
is
(
content
.
document
.
cookie
expected
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
