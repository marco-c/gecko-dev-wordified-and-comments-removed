"
use
strict
"
;
add_setup
(
(
)
=
>
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
Ci
.
nsICookieService
.
BEHAVIOR_ACCEPT
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookieJarSettings
.
unblocked_for_testing
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
cookieBehavior
.
optInPartitioning
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
CHIPS
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
storage_access
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
storage_access
.
prompt
.
testing
"
true
)
;
Services
.
cookies
.
removeAll
(
)
;
Services
.
perms
.
removeAll
(
)
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
cookie
.
cookieBehavior
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
cookieJarSettings
.
unblocked_for_testing
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
cookie
.
cookieBehavior
.
optInPartitioning
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
cookie
.
CHIPS
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
dom
.
storage_access
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
dom
.
storage_access
.
prompt
.
testing
"
)
;
Services
.
cookies
.
removeAll
(
)
;
Services
.
perms
.
removeAll
(
)
;
}
)
;
const
COOKIE_PARTITIONED
=
"
cookie
=
partitioned
;
Partitioned
;
Secure
;
SameSite
=
None
;
"
;
const
COOKIE_UNPARTITIONED
=
"
cookie
=
unpartitioned
;
Secure
;
SameSite
=
None
;
"
;
const
PATH
=
"
/
browser
/
netwerk
/
cookie
/
test
/
browser
/
"
;
const
PATH_EMPTY
=
PATH
+
"
file_empty
.
html
"
;
const
HTTP_COOKIE_SET
=
PATH
+
"
chips
.
sjs
?
set
"
;
const
HTTP_COOKIE_GET
=
PATH
+
"
chips
.
sjs
?
get
"
;
const
FIRST_PARTY
=
"
example
.
com
"
;
const
THIRD_PARTY
=
"
example
.
org
"
;
const
URL_DOCUMENT_FIRSTPARTY
=
"
https
:
/
/
"
+
FIRST_PARTY
+
PATH_EMPTY
;
const
URL_DOCUMENT_THIRDPARTY
=
"
https
:
/
/
"
+
THIRD_PARTY
+
PATH_EMPTY
;
const
URL_HTTP_FIRSTPARTY
=
"
https
:
/
/
"
+
FIRST_PARTY
+
"
/
"
+
HTTP_COOKIE_SET
;
const
URL_HTTP_THIRDPARTY
=
"
https
:
/
/
"
+
THIRD_PARTY
+
"
/
"
+
HTTP_COOKIE_SET
;
function
createOriginAttributes
(
partitionKey
)
{
return
JSON
.
stringify
(
{
firstPartyDomain
:
"
"
geckoViewSessionContextId
:
"
"
inIsolatedMozBrowser
:
false
partitionKey
privateBrowsingId
:
0
userContextId
:
0
}
)
;
}
function
createPartitonKey
(
url
)
{
let
uri
=
NetUtil
.
newURI
(
url
)
;
return
(
{
uri
.
scheme
}
{
uri
.
host
}
)
;
}
const
partitionedOAs
=
createOriginAttributes
(
createPartitonKey
(
URL_DOCUMENT_FIRSTPARTY
)
)
;
const
unpartitionedOAs
=
createOriginAttributes
(
"
"
)
;
add_task
(
async
function
test_chips_store_partitioned_document_first_party_child
(
)
{
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_DOCUMENT_FIRSTPARTY
)
;
const
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
COOKIE_PARTITIONED
COOKIE_UNPARTITIONED
]
(
partitioned
unpartitioned
)
=
>
{
content
.
document
.
cookie
=
partitioned
;
content
.
document
.
cookie
=
unpartitioned
;
}
)
;
let
partitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
partitionedOAs
FIRST_PARTY
)
;
let
unpartitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
unpartitionedOAs
FIRST_PARTY
)
;
Assert
.
equal
(
partitioned
.
length
1
)
;
Assert
.
equal
(
partitioned
[
0
]
.
value
"
partitioned
"
)
;
Assert
.
equal
(
unpartitioned
.
length
1
)
;
Assert
.
equal
(
unpartitioned
[
0
]
.
value
"
unpartitioned
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
add_task
(
async
function
test_chips_store_partitioned_document_third_party_storage_access_child
(
)
{
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_DOCUMENT_FIRSTPARTY
)
;
const
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
URL_DOCUMENT_THIRDPARTY
COOKIE_PARTITIONED
COOKIE_UNPARTITIONED
]
async
(
url
partitioned
unpartitioned
)
=
>
{
let
ifr
=
content
.
document
.
createElement
(
"
iframe
"
)
;
ifr
.
src
=
url
;
content
.
document
.
body
.
appendChild
(
ifr
)
;
await
ContentTaskUtils
.
waitForEvent
(
ifr
"
load
"
)
;
await
SpecialPowers
.
spawn
(
await
ifr
.
browsingContext
[
partitioned
unpartitioned
]
async
(
partitioned
unpartitioned
)
=
>
{
ok
(
await
content
.
document
.
hasStorageAccess
(
)
"
example
.
org
should
have
storageAccess
by
CookieBehavior
0
/
test
setup
"
)
;
content
.
document
.
cookie
=
partitioned
;
content
.
document
.
cookie
=
unpartitioned
;
}
)
;
}
)
;
let
partitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
partitionedOAs
THIRD_PARTY
)
;
let
unpartitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
unpartitionedOAs
THIRD_PARTY
)
;
Assert
.
equal
(
partitioned
.
length
1
)
;
Assert
.
equal
(
partitioned
[
0
]
.
value
"
partitioned
"
)
;
Assert
.
equal
(
unpartitioned
.
length
1
)
;
Assert
.
equal
(
unpartitioned
[
0
]
.
value
"
unpartitioned
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
add_task
(
async
function
test_chips_store_partitioned_http_first_party_parent
(
)
{
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_HTTP_FIRSTPARTY
)
;
const
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
partitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
partitionedOAs
FIRST_PARTY
)
;
let
unpartitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
unpartitionedOAs
FIRST_PARTY
)
;
Assert
.
equal
(
partitioned
.
length
1
)
;
Assert
.
equal
(
partitioned
[
0
]
.
value
"
partitioned
"
)
;
Assert
.
equal
(
unpartitioned
.
length
1
)
;
Assert
.
equal
(
unpartitioned
[
0
]
.
value
"
unpartitioned
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
add_task
(
async
function
test_chips_store_partitioned_http_third_party_storage_access_parent
(
)
{
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_DOCUMENT_FIRSTPARTY
)
;
const
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
URL_HTTP_THIRDPARTY
]
async
url
=
>
{
let
ifr
=
content
.
document
.
createElement
(
"
iframe
"
)
;
ifr
.
src
=
url
;
content
.
document
.
body
.
appendChild
(
ifr
)
;
await
ContentTaskUtils
.
waitForEvent
(
ifr
"
load
"
)
;
await
SpecialPowers
.
spawn
(
await
ifr
.
browsingContext
[
]
async
(
)
=
>
{
ok
(
await
content
.
document
.
hasStorageAccess
(
)
"
example
.
org
should
have
storageAccess
by
CookieBehavior
0
/
test
setup
"
)
;
}
)
;
}
)
;
let
partitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
partitionedOAs
THIRD_PARTY
)
;
let
unpartitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
unpartitionedOAs
THIRD_PARTY
)
;
Assert
.
equal
(
partitioned
.
length
1
)
;
Assert
.
equal
(
partitioned
[
0
]
.
value
"
partitioned
"
)
;
Assert
.
equal
(
unpartitioned
.
length
1
)
;
Assert
.
equal
(
unpartitioned
[
0
]
.
value
"
unpartitioned
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
add_task
(
async
function
test_chips_send_partitioned_and_unpartitioned_document_child
(
)
{
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_DOCUMENT_FIRSTPARTY
)
;
const
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
COOKIE_PARTITIONED
COOKIE_UNPARTITIONED
]
async
(
partitioned
unpartitioned
)
=
>
{
content
.
document
.
cookie
=
partitioned
;
content
.
document
.
cookie
=
unpartitioned
;
let
cookies
=
content
.
document
.
cookie
;
ok
(
cookies
.
includes
(
"
cookie
=
partitioned
"
)
"
Cookie
from
partitioned
jar
was
sent
.
"
)
;
ok
(
cookies
.
includes
(
"
cookie
=
unpartitioned
"
)
"
Cookie
from
unpartitioned
jar
was
sent
.
"
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
add_task
(
async
function
test_chips_send_partitioned_and_unpartitioned_on_storage_access_child
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
5
)
;
await
BrowserTestUtils
.
withNewTab
(
URL_DOCUMENT_THIRDPARTY
async
browser
=
>
{
info
(
"
Set
a
first
party
cookie
via
document
.
cookie
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
COOKIE_UNPARTITIONED
]
async
unpartitioned
=
>
{
content
.
document
.
cookie
=
unpartitioned
;
is
(
content
.
document
.
cookie
"
cookie
=
unpartitioned
"
"
Unpartitioned
cookie
was
set
.
"
)
;
}
)
;
}
)
;
let
unpartitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
unpartitionedOAs
THIRD_PARTY
)
;
Assert
.
equal
(
unpartitioned
.
length
1
)
;
Assert
.
equal
(
unpartitioned
[
0
]
.
value
"
unpartitioned
"
)
;
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_DOCUMENT_FIRSTPARTY
)
;
const
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
URL_DOCUMENT_THIRDPARTY
COOKIE_PARTITIONED
]
async
(
url
partitioned
)
=
>
{
let
ifr
=
content
.
document
.
createElement
(
"
iframe
"
)
;
ifr
.
src
=
url
;
content
.
document
.
body
.
appendChild
(
ifr
)
;
await
ContentTaskUtils
.
waitForEvent
(
ifr
"
load
"
)
;
await
SpecialPowers
.
spawn
(
await
ifr
.
browsingContext
[
partitioned
]
async
partitioned
=
>
{
ok
(
!
(
await
content
.
document
.
hasStorageAccess
(
)
)
"
example
.
org
should
not
have
storageAccess
initially
.
"
)
;
content
.
document
.
cookie
=
partitioned
;
is
(
content
.
document
.
cookie
"
cookie
=
partitioned
"
"
Partitioned
cookie
was
set
.
"
)
;
info
(
"
Simulate
user
activation
.
"
)
;
SpecialPowers
.
wrap
(
content
.
document
)
.
notifyUserGestureActivation
(
)
;
info
(
"
Request
storage
access
.
"
)
;
await
content
.
document
.
requestStorageAccess
(
)
;
ok
(
await
content
.
document
.
hasStorageAccess
(
)
"
example
.
org
should
now
have
storageAccess
.
"
)
;
let
cookies
=
content
.
document
.
cookie
;
ok
(
cookies
.
includes
(
"
cookie
=
partitioned
"
)
"
Cookie
from
partitioned
jar
was
sent
.
"
)
;
ok
(
cookies
.
includes
(
"
cookie
=
unpartitioned
"
)
"
Cookie
from
unpartitioned
jar
was
sent
.
"
)
;
}
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
cookies
.
removeAll
(
)
;
Services
.
perms
.
removeAll
(
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
0
)
;
}
)
;
add_task
(
async
function
test_chips_send_partitioned_and_unpartitioned_document_parent
(
)
{
await
BrowserTestUtils
.
withNewTab
(
URL_DOCUMENT_FIRSTPARTY
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
COOKIE_PARTITIONED
COOKIE_UNPARTITIONED
]
async
(
partitioned
unpartitioned
)
=
>
{
content
.
document
.
cookie
=
unpartitioned
;
content
.
document
.
cookie
=
partitioned
;
let
cookies
=
content
.
document
.
cookie
;
ok
(
cookies
.
includes
(
"
cookie
=
unpartitioned
"
)
"
Unpartitioned
cookie
was
set
.
"
)
;
ok
(
cookies
.
includes
(
"
cookie
=
partitioned
"
)
"
Partitioned
cookie
was
set
.
"
)
;
}
)
;
}
)
;
let
partitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
partitionedOAs
FIRST_PARTY
)
;
let
unpartitioned
=
Services
.
cookies
.
getCookiesWithOriginAttributes
(
unpartitionedOAs
FIRST_PARTY
)
;
Assert
.
equal
(
partitioned
.
length
1
)
;
Assert
.
equal
(
partitioned
[
0
]
.
value
"
partitioned
"
)
;
Assert
.
equal
(
unpartitioned
.
length
1
)
;
Assert
.
equal
(
unpartitioned
[
0
]
.
value
"
unpartitioned
"
)
;
await
BrowserTestUtils
.
withNewTab
(
URL_DOCUMENT_FIRSTPARTY
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
let
cookies
=
content
.
document
.
cookie
;
ok
(
cookies
.
includes
(
"
cookie
=
unpartitioned
"
)
"
Unpartitioned
cookie
was
sent
.
"
)
;
ok
(
cookies
.
includes
(
"
cookie
=
partitioned
"
)
"
Partitioned
cookie
was
sent
.
"
)
;
}
)
;
}
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
add_task
(
async
function
test_chips_send_partitioned_and_unpartitioned_http_parent
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL_DOCUMENT_FIRSTPARTY
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
HTTP_COOKIE_SET
HTTP_COOKIE_GET
]
async
(
set
get
)
=
>
{
await
content
.
fetch
(
set
)
;
let
cookies
=
content
.
document
.
cookie
;
ok
(
cookies
.
includes
(
"
cookie
=
unpartitioned
"
)
"
Unpartitioned
cookie
was
set
to
document
.
"
)
;
ok
(
cookies
.
includes
(
"
cookie
=
partitioned
"
)
"
Partitioned
cookie
was
set
to
document
.
"
)
;
await
content
.
fetch
(
get
)
.
then
(
response
=
>
response
.
text
(
)
)
.
then
(
requestCookies
=
>
{
ok
(
requestCookies
.
includes
(
"
cookie
=
unpartitioned
"
)
"
Unpartitioned
cookie
was
sent
in
http
request
.
"
)
;
ok
(
requestCookies
.
includes
(
"
cookie
=
partitioned
"
)
"
Partitioned
cookie
was
sent
in
http
request
.
"
)
;
}
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
