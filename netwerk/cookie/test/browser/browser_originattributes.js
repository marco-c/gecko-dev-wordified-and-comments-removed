let
{
classes
:
Cc
interfaces
:
Ci
}
=
Components
;
const
USER_CONTEXTS
=
[
"
default
"
"
personal
"
"
work
"
]
;
const
COOKIE_NAMES
=
[
"
cookie0
"
"
cookie1
"
"
cookie2
"
]
;
const
TEST_URL
=
"
http
:
/
/
example
.
com
/
browser
/
netwerk
/
cookie
/
test
/
browser
/
file_empty
.
html
"
;
let
cm
=
Cc
[
"
mozilla
.
org
/
cookiemanager
;
1
"
]
.
getService
(
Ci
.
nsICookieManager2
)
;
function
*
openTabInUserContext
(
uri
userContextId
)
{
let
tab
=
gBrowser
.
addTab
(
uri
{
userContextId
}
)
;
gBrowser
.
selectedTab
=
tab
;
tab
.
ownerGlobal
.
focus
(
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
return
{
tab
browser
}
;
}
add_task
(
function
*
setup
(
)
{
yield
new
Promise
(
resolve
=
>
{
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
privacy
.
userContext
.
enabled
"
true
]
]
}
resolve
)
;
}
)
;
}
)
;
add_task
(
function
*
test
(
)
{
for
(
let
userContextId
of
Object
.
keys
(
USER_CONTEXTS
)
)
{
let
{
tab
browser
}
=
yield
*
openTabInUserContext
(
TEST_URL
userContextId
)
;
yield
ContentTask
.
spawn
(
browser
{
names
:
COOKIE_NAMES
value
:
USER_CONTEXTS
[
userContextId
]
}
function
(
opts
)
{
for
(
let
name
of
opts
.
names
)
{
content
.
document
.
cookie
=
name
+
"
=
"
+
opts
.
value
;
}
}
)
;
gBrowser
.
removeTab
(
tab
)
;
}
let
expectedValues
=
USER_CONTEXTS
.
slice
(
0
)
;
yield
checkCookies
(
expectedValues
"
before
removal
"
)
;
cm
.
removeCookiesWithOriginAttributes
(
JSON
.
stringify
(
{
userContextId
:
1
}
)
)
;
expectedValues
[
1
]
=
undefined
;
yield
checkCookies
(
expectedValues
"
after
removal
"
)
;
}
)
;
function
*
checkCookies
(
expectedValues
time
)
{
for
(
let
userContextId
of
Object
.
keys
(
expectedValues
)
)
{
let
cookiesFromTitle
=
yield
*
getCookiesFromJS
(
userContextId
)
;
let
cookiesFromManager
=
getCookiesFromManager
(
userContextId
)
;
let
expectedValue
=
expectedValues
[
userContextId
]
;
for
(
let
name
of
COOKIE_NAMES
)
{
is
(
cookiesFromTitle
[
name
]
expectedValue
User
context
{
userContextId
}
:
{
name
}
should
be
correct
from
title
{
time
}
)
;
is
(
cookiesFromManager
[
name
]
expectedValue
User
context
{
userContextId
}
:
{
name
}
should
be
correct
from
manager
{
time
}
)
;
}
}
}
function
getCookiesFromManager
(
userContextId
)
{
let
cookies
=
{
}
;
let
enumerator
=
cm
.
getCookiesWithOriginAttributes
(
JSON
.
stringify
(
{
userContextId
}
)
)
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
let
cookie
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie
)
;
cookies
[
cookie
.
name
]
=
cookie
.
value
;
}
return
cookies
;
}
function
*
getCookiesFromJS
(
userContextId
)
{
let
{
tab
browser
}
=
yield
*
openTabInUserContext
(
TEST_URL
userContextId
)
;
let
cookieString
=
yield
ContentTask
.
spawn
(
browser
null
function
(
)
{
return
content
.
document
.
cookie
;
}
)
;
let
cookies
=
{
}
;
for
(
let
cookie
of
cookieString
.
split
(
"
;
"
)
)
{
let
[
name
value
]
=
cookie
.
trim
(
)
.
split
(
"
=
"
)
;
cookies
[
name
]
=
value
;
}
gBrowser
.
removeTab
(
tab
)
;
return
cookies
;
}
