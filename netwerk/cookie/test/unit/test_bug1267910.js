ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
BASE_URL
=
"
http
:
/
/
example
.
org
/
"
;
const
COOKIE
=
{
host
:
BASE_URL
path
:
"
/
"
name
:
"
test1
"
value
:
"
yes
"
isSecure
:
false
isHttpOnly
:
false
isSession
:
true
expiry
:
2145934800
}
;
const
COOKIE_OA_DEFAULT
=
{
host
:
BASE_URL
path
:
"
/
"
name
:
"
test0
"
value
:
"
yes0
"
isSecure
:
false
isHttpOnly
:
false
isSession
:
true
expiry
:
2145934800
originAttributes
:
{
}
}
;
const
COOKIE_OA_1
=
{
host
:
BASE_URL
path
:
"
/
"
name
:
"
test1
"
value
:
"
yes1
"
isSecure
:
false
isHttpOnly
:
false
isSession
:
true
expiry
:
2145934800
originAttributes
:
{
userContextId
:
1
}
}
;
function
checkCookie
(
cookie
cookieObj
)
{
for
(
let
prop
of
Object
.
keys
(
cookieObj
)
)
{
if
(
prop
=
=
=
"
originAttributes
"
)
{
ok
(
ChromeUtils
.
isOriginAttributesEqual
(
cookie
[
prop
]
cookieObj
[
prop
]
)
"
Check
cookie
:
"
+
prop
)
;
}
else
{
equal
(
cookie
[
prop
]
cookieObj
[
prop
]
"
Check
cookie
:
"
+
prop
)
;
}
}
}
function
countCookies
(
enumerator
)
{
let
cnt
=
0
;
for
(
let
cookie
of
enumerator
)
{
void
cookie
;
cnt
+
+
;
}
return
cnt
;
}
function
run_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
0
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
userContext
.
enabled
"
true
)
;
add_test
(
test_backward_compatiability
)
;
add_test
(
test_originAttributes
)
;
run_next_test
(
)
;
}
function
test_backward_compatiability
(
)
{
Services
.
cookies
.
removeAll
(
)
;
Services
.
cookies
.
add
(
COOKIE
.
host
COOKIE
.
path
COOKIE
.
name
COOKIE
.
value
COOKIE
.
isSecure
COOKIE
.
isHttpOnly
COOKIE
.
isSession
COOKIE
.
expiry
)
;
let
enumerator
=
Services
.
cookies
.
getCookiesFromHost
(
BASE_URL
)
;
ok
(
enumerator
.
hasMoreElements
(
)
"
Cookies
available
"
)
;
let
foundCookie
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie2
)
;
checkCookie
(
foundCookie
COOKIE
)
;
ok
(
!
enumerator
.
hasMoreElements
(
)
"
We
should
get
only
one
cookie
"
)
;
run_next_test
(
)
;
}
function
test_originAttributes
(
)
{
Services
.
cookies
.
removeAll
(
)
;
Services
.
cookies
.
add
(
COOKIE_OA_DEFAULT
.
host
COOKIE_OA_DEFAULT
.
path
COOKIE_OA_DEFAULT
.
name
COOKIE_OA_DEFAULT
.
value
COOKIE_OA_DEFAULT
.
isSecure
COOKIE_OA_DEFAULT
.
isHttpOnly
COOKIE_OA_DEFAULT
.
isSession
COOKIE_OA_DEFAULT
.
expiry
COOKIE_OA_DEFAULT
.
originAttributes
)
;
let
enumerator
=
Services
.
cookies
.
getCookiesFromHost
(
BASE_URL
COOKIE_OA_DEFAULT
.
originAttributes
)
;
ok
(
enumerator
.
hasMoreElements
(
)
"
Cookies
available
"
)
;
let
foundCookie
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie2
)
;
checkCookie
(
foundCookie
COOKIE_OA_DEFAULT
)
;
ok
(
!
enumerator
.
hasMoreElements
(
)
"
We
should
get
only
one
cookie
"
)
;
enumerator
=
Services
.
cookies
.
getCookiesFromHost
(
BASE_URL
COOKIE_OA_1
.
originAttributes
)
;
ok
(
!
enumerator
.
hasMoreElements
(
)
"
No
cookie
should
be
here
"
)
;
Services
.
cookies
.
add
(
COOKIE_OA_1
.
host
COOKIE_OA_1
.
path
COOKIE_OA_1
.
name
COOKIE_OA_1
.
value
COOKIE_OA_1
.
isSecure
COOKIE_OA_1
.
isHttpOnly
COOKIE_OA_1
.
isSession
COOKIE_OA_1
.
expiry
COOKIE_OA_1
.
originAttributes
)
;
enumerator
=
Services
.
cookies
.
getCookiesFromHost
(
BASE_URL
COOKIE_OA_1
.
originAttributes
)
;
ok
(
enumerator
.
hasMoreElements
(
)
"
Cookies
available
"
)
;
foundCookie
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie2
)
;
checkCookie
(
foundCookie
COOKIE_OA_1
)
;
ok
(
!
enumerator
.
hasMoreElements
(
)
"
We
should
get
only
one
cookie
"
)
;
enumerator
=
Services
.
cookies
.
getCookiesFromHost
(
BASE_URL
COOKIE_OA_DEFAULT
.
originAttributes
)
;
equal
(
countCookies
(
enumerator
)
1
"
We
should
get
only
one
cookie
for
default
originAttributes
"
)
;
Services
.
cookies
.
remove
(
COOKIE_OA_1
.
host
COOKIE_OA_1
.
name
COOKIE_OA_1
.
path
false
COOKIE_OA_1
.
originAttributes
)
;
enumerator
=
Services
.
cookies
.
getCookiesFromHost
(
BASE_URL
COOKIE_OA_DEFAULT
.
originAttributes
)
;
equal
(
countCookies
(
enumerator
)
1
"
Get
one
cookie
for
default
originAttributes
.
"
)
;
enumerator
=
Services
.
cookies
.
getCookiesFromHost
(
BASE_URL
COOKIE_OA_1
.
originAttributes
)
;
equal
(
countCookies
(
enumerator
)
0
"
No
cookie
shold
be
here
"
)
;
Services
.
cookies
.
remove
(
COOKIE_OA_DEFAULT
.
host
COOKIE_OA_DEFAULT
.
name
COOKIE_OA_DEFAULT
.
path
false
COOKIE_OA_DEFAULT
.
originAttributes
)
;
enumerator
=
Services
.
cookies
.
getCookiesFromHost
(
BASE_URL
COOKIE_OA_DEFAULT
.
originAttributes
)
;
equal
(
countCookies
(
enumerator
)
0
"
No
cookie
shold
be
here
"
)
;
run_next_test
(
)
;
}
