const
{
NetUtil
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
const
URI
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
org
/
"
)
;
function
run_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
0
)
;
Services
.
cookies
.
removeAll
(
)
;
setCookie
(
"
foo
=
bar
"
{
type
:
"
added
"
isSession
:
true
isSecure
:
false
isHttpOnly
:
false
}
)
;
setCookie
(
"
foo
=
bar
;
HttpOnly
"
{
type
:
"
changed
"
isSession
:
true
isSecure
:
false
isHttpOnly
:
true
}
)
;
setCookie
(
"
foo
=
bar
;
Secure
"
{
type
:
"
changed
"
isSession
:
true
isSecure
:
true
isHttpOnly
:
false
}
)
;
let
expiry
=
new
Date
(
)
;
expiry
.
setUTCFullYear
(
expiry
.
getUTCFullYear
(
)
+
2
)
;
setCookie
(
foo
=
bar
;
Expires
=
{
expiry
.
toGMTString
(
)
}
{
type
:
"
changed
"
isSession
:
false
isSecure
:
false
isHttpOnly
:
false
}
)
;
setCookie
(
"
foo
=
bar
"
{
type
:
"
changed
"
isSession
:
true
isSecure
:
false
isHttpOnly
:
false
}
)
;
}
function
setCookie
(
value
expected
)
{
function
setCookieInternal
(
valueInternal
expectedInternal
=
null
)
{
function
observer
(
subject
topic
data
)
{
if
(
!
expectedInternal
)
{
do_throw
(
"
no
notification
expected
"
)
;
return
;
}
Assert
.
equal
(
data
expectedInternal
.
type
)
;
let
cookie
=
subject
.
QueryInterface
(
Ci
.
nsICookie
)
;
Assert
.
equal
(
cookie
.
isSession
expectedInternal
.
isSession
)
;
Assert
.
equal
(
cookie
.
isSecure
expectedInternal
.
isSecure
)
;
Assert
.
equal
(
cookie
.
isHttpOnly
expectedInternal
.
isHttpOnly
)
;
}
Services
.
obs
.
addObserver
(
observer
"
cookie
-
changed
"
)
;
let
channel
=
NetUtil
.
newChannel
(
{
uri
:
URI
loadUsingSystemPrincipal
:
true
contentPolicyType
:
Ci
.
nsIContentPolicy
.
TYPE_DOCUMENT
}
)
;
Services
.
cookies
.
setCookieStringFromHttp
(
URI
valueInternal
channel
)
;
Services
.
obs
.
removeObserver
(
observer
"
cookie
-
changed
"
)
;
}
setCookieInternal
(
value
expected
)
;
setCookieInternal
(
value
)
;
}
