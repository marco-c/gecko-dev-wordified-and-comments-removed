"
use
strict
"
;
module
.
exports
=
{
"
plugins
"
:
[
"
react
"
]
"
globals
"
:
{
"
atob
"
:
true
"
btoa
"
:
true
"
Components
"
:
true
"
CSSRule
"
:
true
"
clearInterval
"
:
true
"
clearTimeout
"
:
true
"
console
"
:
true
"
CSS
"
:
true
"
DocumentFragment
"
:
true
"
DOMParser
"
:
true
"
dump
"
:
true
"
Element
"
:
true
"
exports
"
:
true
"
isWorker
"
:
true
"
indexedDB
"
:
true
"
loader
"
:
true
"
module
"
:
true
"
Node
"
:
true
"
reportError
"
:
true
"
require
"
:
true
"
setInterval
"
:
true
"
setTimeout
"
:
true
"
uneval
"
:
true
"
TextDecoder
"
:
true
"
TextEncoder
"
:
true
"
URL
"
:
true
"
WebSocket
"
:
true
"
XMLHttpRequest
"
:
true
}
"
rules
"
:
{
"
mozilla
/
no
-
aArgs
"
:
"
error
"
"
mozilla
/
no
-
cpows
-
in
-
tests
"
:
"
error
"
"
mozilla
/
no
-
single
-
arg
-
cu
-
import
"
:
"
error
"
"
mozilla
/
reject
-
importGlobalProperties
"
:
"
error
"
"
mozilla
/
reject
-
some
-
requires
"
:
[
"
error
"
"
^
devtools
/
shared
/
platform
/
(
chome
|
content
)
/
"
]
"
mozilla
/
var
-
only
-
at
-
top
-
level
"
:
"
error
"
"
react
/
display
-
name
"
:
"
error
"
"
react
/
no
-
danger
"
:
"
error
"
"
react
/
no
-
did
-
mount
-
set
-
state
"
:
"
error
"
"
react
/
no
-
did
-
update
-
set
-
state
"
:
"
error
"
"
react
/
no
-
direct
-
mutation
-
state
"
:
"
error
"
"
react
/
no
-
unknown
-
property
"
:
"
error
"
"
react
/
prefer
-
es6
-
class
"
:
[
"
error
"
"
never
"
]
"
react
/
prop
-
types
"
:
"
error
"
"
react
/
sort
-
comp
"
:
[
"
error
"
{
order
:
[
"
lifecycle
"
"
everything
-
else
"
"
render
"
]
groups
:
{
lifecycle
:
[
"
displayName
"
"
propTypes
"
"
contextTypes
"
"
childContextTypes
"
"
mixins
"
"
statics
"
"
defaultProps
"
"
constructor
"
"
getDefaultProps
"
"
getInitialState
"
"
state
"
"
getChildContext
"
"
componentWillMount
"
"
componentDidMount
"
"
componentWillReceiveProps
"
"
shouldComponentUpdate
"
"
componentWillUpdate
"
"
componentDidUpdate
"
"
componentWillUnmount
"
]
}
}
]
"
block
-
scoped
-
var
"
:
"
error
"
"
brace
-
style
"
:
[
"
error
"
"
1tbs
"
{
"
allowSingleLine
"
:
false
}
]
"
camelcase
"
:
"
error
"
"
comma
-
dangle
"
:
"
off
"
"
comma
-
spacing
"
:
[
"
error
"
{
"
before
"
:
false
"
after
"
:
true
}
]
"
comma
-
style
"
:
[
"
error
"
"
last
"
]
"
complexity
"
:
[
"
error
"
35
]
"
consistent
-
return
"
:
"
error
"
"
consistent
-
this
"
:
"
off
"
"
curly
"
:
"
error
"
"
default
-
case
"
:
"
off
"
"
dot
-
location
"
:
[
"
error
"
"
property
"
]
"
dot
-
notation
"
:
"
error
"
"
eol
-
last
"
:
"
error
"
"
eqeqeq
"
:
"
off
"
"
func
-
names
"
:
"
off
"
"
func
-
style
"
:
"
off
"
"
generator
-
star
"
:
"
off
"
"
generator
-
star
-
spacing
"
:
[
"
error
"
"
after
"
]
"
global
-
strict
"
:
"
off
"
"
handle
-
callback
-
err
"
:
"
off
"
"
indent
"
:
[
"
error
"
2
{
"
SwitchCase
"
:
1
"
ArrayExpression
"
:
"
first
"
"
ObjectExpression
"
:
"
first
"
}
]
"
key
-
spacing
"
:
[
"
error
"
{
"
beforeColon
"
:
false
"
afterColon
"
:
true
}
]
"
linebreak
-
style
"
:
[
"
error
"
"
unix
"
]
"
max
-
depth
"
:
"
off
"
"
max
-
len
"
:
[
"
error
"
90
2
{
"
ignoreUrls
"
:
true
"
ignorePattern
"
:
"
data
:
image
\
/
|
\
\
s
*
require
\
\
s
*
\
\
(
|
^
\
\
s
*
loader
\
\
.
lazy
|
-
\
\
*
-
"
}
]
"
max
-
nested
-
callbacks
"
:
[
"
error
"
3
]
"
max
-
params
"
:
"
off
"
"
max
-
statements
"
:
"
off
"
"
new
-
cap
"
:
[
"
error
"
{
"
capIsNew
"
:
false
}
]
"
new
-
parens
"
:
"
error
"
"
no
-
array
-
constructor
"
:
"
error
"
"
no
-
bitwise
"
:
"
off
"
"
no
-
caller
"
:
"
error
"
"
no
-
catch
-
shadow
"
:
"
error
"
"
no
-
comma
-
dangle
"
:
"
off
"
"
no
-
cond
-
assign
"
:
"
error
"
"
no
-
console
"
:
"
off
"
"
no
-
constant
-
condition
"
:
"
off
"
"
no
-
continue
"
:
"
off
"
"
no
-
control
-
regex
"
:
"
error
"
"
no
-
debugger
"
:
"
error
"
"
no
-
delete
-
var
"
:
"
error
"
"
no
-
div
-
regex
"
:
"
off
"
"
no
-
dupe
-
args
"
:
"
error
"
"
no
-
dupe
-
keys
"
:
"
error
"
"
no
-
duplicate
-
case
"
:
"
error
"
"
no
-
else
-
return
"
:
"
error
"
"
no
-
empty
"
:
"
error
"
"
no
-
empty
-
character
-
class
"
:
"
error
"
"
no
-
eval
"
:
"
error
"
"
no
-
ex
-
assign
"
:
"
error
"
"
no
-
extend
-
native
"
:
"
error
"
"
no
-
extra
-
bind
"
:
"
error
"
"
no
-
extra
-
boolean
-
cast
"
:
"
error
"
"
no
-
extra
-
parens
"
:
"
off
"
"
no
-
extra
-
semi
"
:
"
error
"
"
no
-
extra
-
strict
"
:
"
off
"
"
no
-
fallthrough
"
:
"
error
"
"
no
-
floating
-
decimal
"
:
"
off
"
"
no
-
implied
-
eval
"
:
"
error
"
"
no
-
inline
-
comments
"
:
"
off
"
"
no
-
lonely
-
if
"
:
"
error
"
"
no
-
mixed
-
requires
"
:
"
off
"
"
no
-
mixed
-
spaces
-
and
-
tabs
"
:
"
error
"
"
no
-
multi
-
spaces
"
:
"
error
"
"
no
-
multi
-
str
"
:
"
error
"
"
no
-
multiple
-
empty
-
lines
"
:
[
"
error
"
{
"
max
"
:
1
}
]
"
no
-
native
-
reassign
"
:
"
error
"
"
no
-
nested
-
ternary
"
:
"
error
"
"
no
-
new
-
require
"
:
"
off
"
"
no
-
octal
"
:
"
error
"
"
no
-
param
-
reassign
"
:
"
off
"
"
no
-
path
-
concat
"
:
"
off
"
"
no
-
plusplus
"
:
"
off
"
"
no
-
process
-
env
"
:
"
off
"
"
no
-
process
-
exit
"
:
"
off
"
"
no
-
proto
"
:
"
error
"
"
no
-
redeclare
"
:
"
error
"
"
no
-
regex
-
spaces
"
:
"
off
"
"
no
-
reserved
-
keys
"
:
"
off
"
"
no
-
restricted
-
modules
"
:
"
off
"
"
no
-
return
-
assign
"
:
"
error
"
"
no
-
script
-
url
"
:
"
off
"
"
no
-
self
-
assign
"
:
"
error
"
"
no
-
self
-
compare
"
:
"
error
"
"
no
-
sequences
"
:
"
error
"
"
no
-
shadow
"
:
"
error
"
"
no
-
shadow
-
restricted
-
names
"
:
"
error
"
"
no
-
space
-
before
-
semi
"
:
"
off
"
"
no
-
spaced
-
func
"
:
"
error
"
"
no
-
sparse
-
arrays
"
:
"
error
"
"
no
-
sync
"
:
"
off
"
"
no
-
ternary
"
:
"
off
"
"
no
-
throw
-
literal
"
:
"
error
"
"
no
-
trailing
-
spaces
"
:
"
error
"
"
no
-
undef
"
:
"
error
"
"
no
-
underscore
-
dangle
"
:
"
off
"
"
no
-
undefined
"
:
"
off
"
"
no
-
unneeded
-
ternary
"
:
"
error
"
"
no
-
unreachable
"
:
"
error
"
"
no
-
unused
-
vars
"
:
[
"
error
"
{
"
vars
"
:
"
all
"
"
args
"
:
"
none
"
}
]
"
no
-
unsafe
-
finally
"
:
"
error
"
"
no
-
use
-
before
-
define
"
:
"
off
"
"
no
-
useless
-
call
"
:
"
error
"
"
no
-
useless
-
return
"
:
"
error
"
"
no
-
var
"
:
"
off
"
"
no
-
warning
-
comments
"
:
"
off
"
"
no
-
with
"
:
"
error
"
"
object
-
shorthand
"
:
"
off
"
"
one
-
var
"
:
"
off
"
"
padded
-
blocks
"
:
[
"
error
"
"
never
"
]
"
quote
-
props
"
:
"
off
"
"
quotes
"
:
[
"
error
"
"
double
"
{
"
avoidEscape
"
:
true
"
allowTemplateLiterals
"
:
true
}
]
"
radix
"
:
"
error
"
"
semi
"
:
[
"
error
"
"
always
"
]
"
semi
-
spacing
"
:
[
"
error
"
{
"
before
"
:
false
"
after
"
:
true
}
]
"
sort
-
vars
"
:
"
off
"
"
space
-
after
-
function
-
name
"
:
"
off
"
"
keyword
-
spacing
"
:
"
error
"
"
space
-
before
-
blocks
"
:
[
"
error
"
"
always
"
]
"
space
-
before
-
function
-
parentheses
"
:
"
off
"
"
space
-
before
-
function
-
paren
"
:
[
"
error
"
{
"
anonymous
"
:
"
always
"
"
named
"
:
"
never
"
}
]
"
space
-
in
-
brackets
"
:
"
off
"
"
space
-
in
-
parens
"
:
[
"
error
"
"
never
"
]
"
space
-
infix
-
ops
"
:
[
"
error
"
{
"
int32Hint
"
:
true
}
]
"
space
-
unary
-
ops
"
:
[
"
error
"
{
"
words
"
:
true
"
nonwords
"
:
false
}
]
"
space
-
unary
-
word
-
ops
"
:
"
off
"
"
spaced
-
comment
"
:
[
"
error
"
"
always
"
]
"
strict
"
:
[
"
error
"
"
global
"
]
"
use
-
isnan
"
:
"
error
"
"
valid
-
jsdoc
"
:
"
off
"
"
valid
-
typeof
"
:
"
error
"
"
vars
-
on
-
top
"
:
"
off
"
"
wrap
-
iife
"
:
"
off
"
"
wrap
-
regex
"
:
"
off
"
"
yoda
"
:
"
error
"
"
arrow
-
spacing
"
:
"
off
"
"
computed
-
property
-
spacing
"
:
"
off
"
"
guard
-
for
-
in
"
:
"
off
"
"
newline
-
after
-
var
"
:
"
off
"
"
no
-
alert
"
:
"
off
"
"
no
-
eq
-
null
"
:
"
off
"
"
no
-
func
-
assign
"
:
"
off
"
"
no
-
inner
-
declarations
"
:
"
off
"
"
no
-
invalid
-
regexp
"
:
"
off
"
"
no
-
irregular
-
whitespace
"
:
"
off
"
"
no
-
iterator
"
:
"
off
"
"
no
-
label
-
var
"
:
"
off
"
"
no
-
labels
"
:
"
error
"
"
no
-
lone
-
blocks
"
:
"
off
"
"
no
-
loop
-
func
"
:
"
off
"
"
no
-
negated
-
in
-
lhs
"
:
"
off
"
"
no
-
new
"
:
"
off
"
"
no
-
new
-
func
"
:
"
off
"
"
no
-
new
-
object
"
:
"
off
"
"
no
-
new
-
wrappers
"
:
"
off
"
"
no
-
obj
-
calls
"
:
"
off
"
"
no
-
octal
-
escape
"
:
"
off
"
"
no
-
undef
-
init
"
:
"
off
"
"
no
-
unused
-
expressions
"
:
"
off
"
"
no
-
useless
-
concat
"
:
"
off
"
"
no
-
void
"
:
"
off
"
"
no
-
wrap
-
func
"
:
"
off
"
"
operator
-
assignment
"
:
"
off
"
"
operator
-
linebreak
"
:
"
off
"
}
}
;
