"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Sniffer
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
gPrefs
=
{
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
gPrefs
"
gEnabled
"
"
devtools
.
jsonview
.
enabled
"
)
;
const
JSON_VIEW_MIME_TYPE
=
"
application
/
vnd
.
mozilla
.
json
.
view
"
;
function
getContentDisposition
(
channel
)
{
try
{
return
channel
.
contentDisposition
;
}
catch
(
e
)
{
return
null
;
}
}
class
Sniffer
{
getMIMETypeFromContent
(
request
data
length
)
{
if
(
request
instanceof
Ci
.
nsIChannel
)
{
if
(
gPrefs
.
gEnabled
&
&
request
.
loadInfo
?
.
isTopLevelLoad
&
&
request
.
loadFlags
&
Ci
.
nsIChannel
.
LOAD_DOCUMENT_URI
&
&
getContentDisposition
(
request
)
!
=
Ci
.
nsIChannel
.
DISPOSITION_ATTACHMENT
)
{
if
(
/
^
application
\
/
(
?
:
.
+
\
+
)
?
json
/
.
test
(
request
.
contentType
)
)
{
return
JSON_VIEW_MIME_TYPE
;
}
}
else
if
(
request
.
contentType
=
=
=
JSON_VIEW_MIME_TYPE
)
{
return
"
application
/
json
"
;
}
}
return
"
"
;
}
}
Sniffer
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIContentSniffer
"
]
)
;
