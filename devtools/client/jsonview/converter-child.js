"
use
strict
"
;
const
{
Cc
Ci
Cu
}
=
require
(
"
chrome
"
)
;
const
{
XPCOMUtils
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
{
}
)
;
const
Services
=
require
(
"
Services
"
)
;
loader
.
lazyRequireGetter
(
this
"
NetworkHelper
"
"
devtools
/
shared
/
webconsole
/
network
-
helper
"
)
;
loader
.
lazyRequireGetter
(
this
"
JsonViewUtils
"
"
devtools
/
client
/
jsonview
/
utils
"
)
;
const
childProcessMessageManager
=
Cc
[
"
mozilla
.
org
/
childprocessmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsISyncMessageSender
)
;
loader
.
lazyGetter
(
this
"
jsonViewStrings
"
(
)
=
>
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
jsonview
.
properties
"
)
;
}
)
;
function
Converter
(
)
{
}
Converter
.
prototype
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIStreamConverter
Ci
.
nsIStreamListener
Ci
.
nsIRequestObserver
]
)
get
wrappedJSObject
(
)
{
return
this
;
}
convert
:
function
(
fromStream
fromType
toType
ctx
)
{
return
fromStream
;
}
asyncConvertData
:
function
(
fromType
toType
listener
ctx
)
{
this
.
listener
=
listener
;
}
onDataAvailable
:
function
(
request
context
inputStream
offset
count
)
{
this
.
listener
.
onDataAvailable
(
.
.
.
arguments
)
;
}
onStartRequest
:
function
(
request
context
)
{
this
.
channel
=
request
;
let
originalType
;
if
(
request
instanceof
Ci
.
nsIHttpChannel
)
{
try
{
let
header
=
request
.
getResponseHeader
(
"
Content
-
Type
"
)
;
originalType
=
header
.
split
(
"
;
"
)
[
0
]
;
}
catch
(
err
)
{
}
}
else
{
let
uri
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
.
URI
.
spec
;
let
match
=
uri
.
match
(
/
^
data
:
(
.
*
?
)
[
;
]
/
)
;
if
(
match
)
{
originalType
=
match
[
1
]
;
}
}
const
JSON_TYPES
=
[
"
application
/
json
"
"
application
/
manifest
+
json
"
]
;
if
(
!
JSON_TYPES
.
includes
(
originalType
)
)
{
originalType
=
JSON_TYPES
[
0
]
;
}
request
.
QueryInterface
(
Ci
.
nsIWritablePropertyBag
)
;
request
.
setProperty
(
"
contentType
"
originalType
)
;
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
request
.
contentType
=
JSON_TYPES
[
0
]
;
this
.
charset
=
request
.
contentCharset
=
"
UTF
-
8
"
;
request
.
loadInfo
.
resetPrincipalToInheritToNullPrincipal
(
)
;
this
.
listener
.
onStartRequest
(
request
context
)
;
}
onStopRequest
:
function
(
request
context
statusCode
)
{
let
Locale
=
{
STR
:
key
=
>
{
try
{
return
jsonViewStrings
.
GetStringFromName
(
key
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
return
undefined
;
}
}
}
;
let
headers
=
{
response
:
[
]
request
:
[
]
}
;
if
(
request
instanceof
Ci
.
nsIHttpChannel
)
{
request
.
visitResponseHeaders
(
{
visitHeader
:
function
(
name
value
)
{
headers
.
response
.
push
(
{
name
:
name
value
:
value
}
)
;
}
}
)
;
request
.
visitRequestHeaders
(
{
visitHeader
:
function
(
name
value
)
{
headers
.
request
.
push
(
{
name
:
name
value
:
value
}
)
;
}
}
)
;
}
let
win
=
NetworkHelper
.
getWindowForRequest
(
request
)
;
JsonViewUtils
.
exportIntoContentScope
(
win
Locale
"
Locale
"
)
;
JsonViewUtils
.
exportIntoContentScope
(
win
headers
"
headers
"
)
;
win
.
addEventListener
(
"
DOMContentLoaded
"
event
=
>
{
win
.
addEventListener
(
"
contentMessage
"
onContentMessage
.
bind
(
this
)
false
true
)
;
loadJsonViewer
(
win
.
document
)
;
}
{
once
:
true
}
)
;
this
.
listener
.
onStopRequest
(
this
.
channel
context
statusCode
)
;
this
.
listener
=
null
;
}
}
;
function
onContentMessage
(
e
)
{
let
win
=
NetworkHelper
.
getWindowForRequest
(
this
.
channel
)
;
if
(
win
!
=
e
.
target
)
{
return
;
}
let
value
=
e
.
detail
.
value
;
switch
(
e
.
detail
.
type
)
{
case
"
copy
"
:
copyString
(
win
value
)
;
break
;
case
"
copy
-
headers
"
:
copyHeaders
(
win
value
)
;
break
;
case
"
save
"
:
let
windowID
=
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
.
outerWindowID
;
childProcessMessageManager
.
sendAsyncMessage
(
"
devtools
:
jsonview
:
save
"
{
url
:
value
windowID
:
windowID
}
)
;
}
}
function
loadJsonViewer
(
doc
)
{
function
addStyleSheet
(
url
)
{
let
link
=
doc
.
createElement
(
"
link
"
)
;
link
.
rel
=
"
stylesheet
"
;
link
.
type
=
"
text
/
css
"
;
link
.
href
=
url
;
doc
.
head
.
appendChild
(
link
)
;
}
let
os
;
let
platform
=
Services
.
appinfo
.
OS
;
if
(
platform
.
startsWith
(
"
WINNT
"
)
)
{
os
=
"
win
"
;
}
else
if
(
platform
.
startsWith
(
"
Darwin
"
)
)
{
os
=
"
mac
"
;
}
else
{
os
=
"
linux
"
;
}
doc
.
documentElement
.
setAttribute
(
"
platform
"
os
)
;
doc
.
documentElement
.
dataset
.
contentType
=
doc
.
contentType
;
doc
.
documentElement
.
classList
.
add
(
"
theme
-
"
+
JsonViewUtils
.
getCurrentTheme
(
)
)
;
doc
.
documentElement
.
dir
=
Services
.
locale
.
isAppLocaleRTL
?
"
rtl
"
:
"
ltr
"
;
let
base
=
doc
.
createElement
(
"
base
"
)
;
base
.
href
=
"
resource
:
/
/
devtools
/
client
/
jsonview
/
"
;
doc
.
head
.
appendChild
(
base
)
;
addStyleSheet
(
"
.
.
/
themes
/
variables
.
css
"
)
;
addStyleSheet
(
"
.
.
/
themes
/
common
.
css
"
)
;
addStyleSheet
(
"
.
.
/
themes
/
toolbars
.
css
"
)
;
addStyleSheet
(
"
css
/
main
.
css
"
)
;
let
json
=
doc
.
querySelector
(
"
pre
"
)
;
json
.
id
=
"
json
"
;
let
content
=
doc
.
createElement
(
"
div
"
)
;
content
.
id
=
"
content
"
;
content
.
appendChild
(
json
)
;
doc
.
body
.
appendChild
(
content
)
;
let
script
=
doc
.
createElement
(
"
script
"
)
;
script
.
src
=
"
lib
/
require
.
js
"
;
script
.
dataset
.
main
=
"
viewer
-
config
"
;
doc
.
body
.
appendChild
(
script
)
;
}
function
copyHeaders
(
win
headers
)
{
let
value
=
"
"
;
let
eol
=
(
Services
.
appinfo
.
OS
!
=
=
"
WINNT
"
)
?
"
\
n
"
:
"
\
r
\
n
"
;
let
responseHeaders
=
headers
.
response
;
for
(
let
i
=
0
;
i
<
responseHeaders
.
length
;
i
+
+
)
{
let
header
=
responseHeaders
[
i
]
;
value
+
=
header
.
name
+
"
:
"
+
header
.
value
+
eol
;
}
value
+
=
eol
;
let
requestHeaders
=
headers
.
request
;
for
(
let
i
=
0
;
i
<
requestHeaders
.
length
;
i
+
+
)
{
let
header
=
requestHeaders
[
i
]
;
value
+
=
header
.
name
+
"
:
"
+
header
.
value
+
eol
;
}
copyString
(
win
value
)
;
}
function
copyString
(
win
string
)
{
win
.
document
.
addEventListener
(
"
copy
"
event
=
>
{
event
.
clipboardData
.
setData
(
"
text
/
plain
"
string
)
;
event
.
preventDefault
(
)
;
}
{
once
:
true
}
)
;
win
.
document
.
execCommand
(
"
copy
"
false
null
)
;
}
function
createInstance
(
)
{
return
new
Converter
(
)
;
}
exports
.
JsonViewService
=
{
createInstance
:
createInstance
}
;
