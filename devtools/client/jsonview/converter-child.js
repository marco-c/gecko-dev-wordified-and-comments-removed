"
use
strict
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
NetworkHelper
:
"
resource
:
/
/
devtools
/
shared
/
webconsole
/
NetworkHelper
.
sys
.
mjs
"
}
)
;
const
{
getTheme
addThemeObserver
removeThemeObserver
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
theme
.
js
"
)
;
const
BinaryInput
=
Components
.
Constructor
(
"
mozilla
.
org
/
binaryinputstream
;
1
"
"
nsIBinaryInputStream
"
"
setInputStream
"
)
;
const
BufferStream
=
Components
.
Constructor
(
"
mozilla
.
org
/
io
/
arraybuffer
-
input
-
stream
;
1
"
"
nsIArrayBufferInputStream
"
"
setData
"
)
;
const
kCSP
=
"
default
-
src
'
none
'
;
script
-
src
resource
:
;
"
;
loader
.
lazyGetter
(
this
"
jsonViewStrings
"
(
)
=
>
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
jsonview
.
properties
"
)
;
}
)
;
function
Converter
(
)
{
}
Converter
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIStreamConverter
"
"
nsIStreamListener
"
"
nsIRequestObserver
"
]
)
get
wrappedJSObject
(
)
{
return
this
;
}
convert
(
fromStream
fromType
toType
ctx
)
{
return
fromStream
;
}
asyncConvertData
(
fromType
toType
listener
ctx
)
{
this
.
listener
=
listener
;
}
getConvertedType
(
fromType
channel
)
{
return
"
text
/
html
"
;
}
onDataAvailable
(
request
inputStream
offset
count
)
{
const
buffer
=
new
ArrayBuffer
(
count
)
;
new
BinaryInput
(
inputStream
)
.
readArrayBuffer
(
count
buffer
)
;
this
.
decodeAndInsertBuffer
(
buffer
)
;
}
onStartRequest
(
request
)
{
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
request
.
contentType
=
"
text
/
html
"
;
const
headers
=
getHttpHeaders
(
request
)
;
try
{
request
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
request
.
setResponseHeader
(
"
Content
-
Security
-
Policy
"
kCSP
false
)
;
request
.
setResponseHeader
(
"
Content
-
Security
-
Policy
-
Report
-
Only
"
"
"
false
)
;
}
catch
(
ex
)
{
}
request
.
contentCharset
=
"
UTF
-
8
"
;
this
.
decoder
=
new
TextDecoder
(
"
UTF
-
8
"
)
;
fixSave
(
request
)
;
request
.
loadInfo
.
resetPrincipalToInheritToNullPrincipal
(
)
;
this
.
listener
.
onStartRequest
(
request
)
;
const
win
=
lazy
.
NetworkHelper
.
getWindowForRequest
(
request
)
;
if
(
!
win
|
|
!
Components
.
isSuccessCode
(
request
.
status
)
)
{
return
;
}
if
(
win
.
document
.
nodePrincipal
!
=
request
.
loadInfo
.
principalToInherit
)
{
request
.
cancel
(
Cr
.
NS_BINDING_ABORTED
)
;
return
;
}
this
.
data
=
exportData
(
win
headers
)
;
insertJsonData
(
win
this
.
data
.
json
)
;
win
.
addEventListener
(
"
contentMessage
"
onContentMessage
false
true
)
;
keepThemeUpdated
(
win
)
;
const
buffer
=
new
TextEncoder
(
)
.
encode
(
initialHTML
(
win
.
document
)
)
.
buffer
;
const
stream
=
new
BufferStream
(
buffer
0
buffer
.
byteLength
)
;
this
.
listener
.
onDataAvailable
(
request
stream
0
stream
.
available
(
)
)
;
}
onStopRequest
(
request
statusCode
)
{
if
(
Components
.
isSuccessCode
(
statusCode
)
)
{
this
.
decodeAndInsertBuffer
(
new
ArrayBuffer
(
0
)
true
)
;
}
this
.
listener
.
onStopRequest
(
request
statusCode
)
;
this
.
listener
=
null
;
this
.
decoder
=
null
;
this
.
data
=
null
;
}
decodeAndInsertBuffer
(
buffer
flush
=
false
)
{
const
data
=
this
.
decoder
.
decode
(
buffer
{
stream
:
!
flush
}
)
;
this
.
data
.
json
.
appendData
(
data
)
;
}
}
;
function
fixSave
(
request
)
{
let
match
;
if
(
request
instanceof
Ci
.
nsIHttpChannel
)
{
try
{
const
header
=
request
.
getResponseHeader
(
"
Content
-
Type
"
)
;
match
=
header
.
match
(
/
^
(
application
\
/
(
?
:
[
^
;
]
+
\
+
)
?
json
)
(
?
:
;
|
)
/
)
;
}
catch
(
err
)
{
}
}
else
{
const
uri
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
.
URI
.
spec
;
match
=
uri
.
match
(
/
^
data
:
(
application
\
/
(
?
:
[
^
;
]
+
\
+
)
?
json
)
[
;
]
/
)
;
}
let
originalType
;
if
(
match
)
{
originalType
=
match
[
1
]
;
}
else
{
originalType
=
"
application
/
json
"
;
}
request
.
QueryInterface
(
Ci
.
nsIWritablePropertyBag
)
;
request
.
setProperty
(
"
contentType
"
originalType
)
;
}
function
getHttpHeaders
(
request
)
{
const
headers
=
{
response
:
[
]
request
:
[
]
}
;
if
(
request
instanceof
Ci
.
nsIHttpChannel
)
{
request
.
visitResponseHeaders
(
{
visitHeader
(
name
value
)
{
headers
.
response
.
push
(
{
name
value
}
)
;
}
}
)
;
request
.
visitRequestHeaders
(
{
visitHeader
(
name
value
)
{
headers
.
request
.
push
(
{
name
value
}
)
;
}
}
)
;
}
return
headers
;
}
let
jsonViewStringDict
=
null
;
function
getAllStrings
(
)
{
if
(
!
jsonViewStringDict
)
{
jsonViewStringDict
=
{
}
;
for
(
const
string
of
jsonViewStrings
.
getSimpleEnumeration
(
)
)
{
jsonViewStringDict
[
string
.
key
]
=
string
.
value
;
}
}
return
jsonViewStringDict
;
}
function
exportData
(
win
headers
)
{
const
json
=
new
win
.
Text
(
)
;
const
JSONView
=
Cu
.
cloneInto
(
{
headers
json
readyState
:
"
uninitialized
"
Locale
:
getAllStrings
(
)
}
win
{
wrapReflectors
:
true
}
)
;
try
{
Object
.
defineProperty
(
Cu
.
waiveXrays
(
win
)
"
JSONView
"
{
value
:
JSONView
configurable
:
true
enumerable
:
true
writable
:
true
}
)
;
}
catch
(
error
)
{
Cu
.
reportError
(
error
)
;
}
return
{
json
}
;
}
function
initialHTML
(
doc
)
{
function
element
(
type
attributes
=
{
}
children
=
[
]
)
{
const
el
=
doc
.
createElement
(
type
)
;
for
(
const
[
attr
value
]
of
Object
.
entries
(
attributes
)
)
{
el
.
setAttribute
(
attr
value
)
;
}
el
.
append
(
.
.
.
children
)
;
return
el
;
}
let
os
;
const
platform
=
Services
.
appinfo
.
OS
;
if
(
platform
.
startsWith
(
"
WINNT
"
)
)
{
os
=
"
win
"
;
}
else
if
(
platform
.
startsWith
(
"
Darwin
"
)
)
{
os
=
"
mac
"
;
}
else
{
os
=
"
linux
"
;
}
const
baseURI
=
"
resource
:
/
/
devtools
-
client
-
jsonview
/
"
;
return
(
"
<
!
DOCTYPE
html
>
\
n
"
+
element
(
"
html
"
{
platform
:
os
class
:
"
theme
-
"
+
getTheme
(
)
dir
:
Services
.
locale
.
isAppLocaleRTL
?
"
rtl
"
:
"
ltr
"
}
[
element
(
"
head
"
{
}
[
element
(
"
meta
"
{
"
http
-
equiv
"
:
"
Content
-
Security
-
Policy
"
content
:
kCSP
}
)
element
(
"
link
"
{
rel
:
"
stylesheet
"
type
:
"
text
/
css
"
href
:
"
chrome
:
/
/
devtools
-
jsonview
-
styles
/
content
/
main
.
css
"
}
)
]
)
element
(
"
body
"
{
}
[
element
(
"
div
"
{
id
:
"
content
"
}
[
element
(
"
div
"
{
id
:
"
json
"
}
)
]
)
element
(
"
script
"
{
src
:
baseURI
+
"
lib
/
require
.
js
"
"
data
-
main
"
:
baseURI
+
"
viewer
-
config
.
js
"
}
)
]
)
]
)
.
outerHTML
)
;
}
function
insertJsonData
(
win
json
)
{
new
win
.
MutationObserver
(
function
(
mutations
observer
)
{
for
(
const
{
target
addedNodes
}
of
mutations
)
{
if
(
target
.
nodeType
=
=
1
&
&
target
.
id
=
=
"
content
"
)
{
for
(
const
node
of
addedNodes
)
{
if
(
node
.
nodeType
=
=
1
&
&
node
.
id
=
=
"
json
"
)
{
observer
.
disconnect
(
)
;
node
.
append
(
json
)
;
return
;
}
}
}
}
}
)
.
observe
(
win
.
document
{
childList
:
true
subtree
:
true
}
)
;
}
function
keepThemeUpdated
(
win
)
{
const
listener
=
function
(
)
{
win
.
document
.
documentElement
.
className
=
"
theme
-
"
+
getTheme
(
)
;
}
;
addThemeObserver
(
listener
)
;
win
.
addEventListener
(
"
unload
"
function
(
event
)
{
removeThemeObserver
(
listener
)
;
win
=
null
;
}
{
once
:
true
}
)
;
}
function
onContentMessage
(
e
)
{
const
win
=
this
;
if
(
win
!
=
e
.
target
)
{
return
;
}
const
value
=
e
.
detail
.
value
;
switch
(
e
.
detail
.
type
)
{
case
"
save
"
:
win
.
docShell
.
messageManager
.
sendAsyncMessage
(
"
devtools
:
jsonview
:
save
"
value
)
;
}
}
function
createInstance
(
)
{
return
new
Converter
(
)
;
}
exports
.
JsonViewService
=
{
createInstance
}
;
