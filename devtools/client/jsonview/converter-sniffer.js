"
use
strict
"
;
const
{
Cc
Ci
Cu
Cm
Cr
components
}
=
require
(
"
chrome
"
)
;
const
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
const
{
XPCOMUtils
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
{
}
)
;
const
categoryManager
=
Cc
[
"
mozilla
.
org
/
categorymanager
;
1
"
]
.
getService
(
Ci
.
nsICategoryManager
)
;
const
JSON_TYPES
=
[
"
application
/
json
"
"
application
/
manifest
+
json
"
]
;
const
JSON_SNIFFER_CONTRACT_ID
=
"
mozilla
.
org
/
devtools
/
jsonview
-
sniffer
;
1
"
;
const
JSON_SNIFFER_CLASS_ID
=
components
.
ID
(
"
{
4148c488
-
dca1
-
49fc
-
a621
-
2a0097a62422
}
"
)
;
const
JSON_SNIFFER_CLASS_DESCRIPTION
=
"
JSONView
content
sniffer
"
;
const
JSON_VIEW_MIME_TYPE
=
"
application
/
vnd
.
mozilla
.
json
.
view
"
;
const
JSON_VIEW_TYPE
=
"
JSON
View
"
;
const
CONTENT_SNIFFER_CATEGORY
=
"
net
-
content
-
sniffers
"
;
function
isTopLevelLoad
(
request
)
{
let
loadInfo
=
request
.
loadInfo
;
if
(
loadInfo
&
&
loadInfo
.
isTopLevelLoad
)
{
return
(
request
.
loadFlags
&
Ci
.
nsIChannel
.
LOAD_DOCUMENT_URI
)
;
}
return
false
;
}
function
JsonSniffer
(
)
{
}
JsonSniffer
.
prototype
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIContentSniffer
]
)
get
wrappedJSObject
(
)
{
return
this
;
}
getMIMETypeFromContent
:
function
(
request
data
length
)
{
if
(
request
instanceof
Ci
.
nsIChannel
)
{
if
(
!
isTopLevelLoad
(
request
)
)
{
return
"
"
;
}
try
{
if
(
request
.
contentDisposition
=
=
Ci
.
nsIChannel
.
DISPOSITION_ATTACHMENT
)
{
return
"
"
;
}
}
catch
(
e
)
{
}
if
(
JSON_TYPES
.
includes
(
request
.
contentType
)
)
{
return
JSON_VIEW_MIME_TYPE
;
}
}
return
"
"
;
}
}
;
const
JsonSnifferFactory
=
{
createInstance
:
function
(
outer
iid
)
{
if
(
outer
)
{
throw
Cr
.
NS_ERROR_NO_AGGREGATION
;
}
return
new
JsonSniffer
(
)
;
}
}
;
function
register
(
)
{
if
(
!
registrar
.
isCIDRegistered
(
JSON_SNIFFER_CLASS_ID
)
)
{
registrar
.
registerFactory
(
JSON_SNIFFER_CLASS_ID
JSON_SNIFFER_CLASS_DESCRIPTION
JSON_SNIFFER_CONTRACT_ID
JsonSnifferFactory
)
;
categoryManager
.
addCategoryEntry
(
CONTENT_SNIFFER_CATEGORY
JSON_VIEW_TYPE
JSON_SNIFFER_CONTRACT_ID
false
false
)
;
return
true
;
}
return
false
;
}
function
unregister
(
)
{
if
(
registrar
.
isCIDRegistered
(
JSON_SNIFFER_CLASS_ID
)
)
{
registrar
.
unregisterFactory
(
JSON_SNIFFER_CLASS_ID
JsonSnifferFactory
)
;
categoryManager
.
deleteCategoryEntry
(
CONTENT_SNIFFER_CATEGORY
JSON_VIEW_TYPE
false
)
;
return
true
;
}
return
false
;
}
exports
.
JsonViewSniffer
=
{
register
:
register
unregister
:
unregister
}
;
