"
use
strict
"
;
const
{
Cc
Ci
components
}
=
require
(
"
chrome
"
)
;
const
xpcom
=
require
(
"
sdk
/
platform
/
xpcom
"
)
;
const
{
Unknown
}
=
require
(
"
sdk
/
platform
/
xpcom
"
)
;
const
{
Class
}
=
require
(
"
sdk
/
core
/
heritage
"
)
;
const
categoryManager
=
Cc
[
"
mozilla
.
org
/
categorymanager
;
1
"
]
.
getService
(
Ci
.
nsICategoryManager
)
;
loader
.
lazyRequireGetter
(
this
"
NetworkHelper
"
"
devtools
/
shared
/
webconsole
/
network
-
helper
"
)
;
const
JSON_TYPE
=
"
application
/
json
"
;
const
CONTRACT_ID
=
"
mozilla
.
org
/
devtools
/
jsonview
-
sniffer
;
1
"
;
const
CLASS_ID
=
"
{
4148c488
-
dca1
-
49fc
-
a621
-
2a0097a62422
}
"
;
const
JSON_VIEW_MIME_TYPE
=
"
application
/
vnd
.
mozilla
.
json
.
view
"
;
const
JSON_VIEW_TYPE
=
"
JSON
View
"
;
const
CONTENT_SNIFFER_CATEGORY
=
"
net
-
content
-
sniffers
"
;
var
Sniffer
=
Class
(
{
extends
:
Unknown
interfaces
:
[
"
nsIContentSniffer
"
]
get
wrappedJSObject
(
)
{
return
this
;
}
getMIMETypeFromContent
:
function
(
request
data
length
)
{
if
(
!
NetworkHelper
.
isTopLevelLoad
(
request
)
)
{
return
"
"
;
}
if
(
request
instanceof
Ci
.
nsIChannel
)
{
try
{
if
(
request
.
contentDisposition
=
=
Ci
.
nsIChannel
.
DISPOSITION_ATTACHMENT
)
{
return
"
"
;
}
}
catch
(
e
)
{
}
if
(
request
.
contentType
=
=
JSON_TYPE
)
{
return
JSON_VIEW_MIME_TYPE
;
}
}
return
"
"
;
}
}
)
;
var
service
=
xpcom
.
Service
(
{
id
:
components
.
ID
(
CLASS_ID
)
contract
:
CONTRACT_ID
Component
:
Sniffer
register
:
false
unregister
:
false
}
)
;
function
register
(
)
{
if
(
!
xpcom
.
isRegistered
(
service
)
)
{
xpcom
.
register
(
service
)
;
categoryManager
.
addCategoryEntry
(
CONTENT_SNIFFER_CATEGORY
JSON_VIEW_TYPE
CONTRACT_ID
false
false
)
;
return
true
;
}
return
false
;
}
function
unregister
(
)
{
if
(
xpcom
.
isRegistered
(
service
)
)
{
categoryManager
.
deleteCategoryEntry
(
CONTENT_SNIFFER_CATEGORY
JSON_VIEW_TYPE
false
)
;
xpcom
.
unregister
(
service
)
;
return
true
;
}
return
false
;
}
exports
.
JsonViewSniffer
=
{
register
:
register
unregister
:
unregister
}
;
