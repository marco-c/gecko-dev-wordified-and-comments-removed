import
{
Component
}
from
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
mjs
"
;
import
*
as
PropTypes
from
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
mjs
"
;
import
{
createFactories
}
from
"
resource
:
/
/
devtools
/
client
/
shared
/
react
-
utils
.
mjs
"
;
import
JsonPanelClass
from
"
resource
:
/
/
devtools
/
client
/
jsonview
/
components
/
JsonPanel
.
mjs
"
;
const
{
JsonPanel
}
=
createFactories
(
JsonPanelClass
)
;
import
TextPanelClass
from
"
resource
:
/
/
devtools
/
client
/
jsonview
/
components
/
TextPanel
.
mjs
"
;
const
{
TextPanel
}
=
createFactories
(
TextPanelClass
)
;
import
HeadersPanelClass
from
"
resource
:
/
/
devtools
/
client
/
jsonview
/
components
/
HeadersPanel
.
mjs
"
;
const
{
HeadersPanel
}
=
createFactories
(
HeadersPanelClass
)
;
import
*
as
TabsClass
from
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
tabs
/
Tabs
.
mjs
"
;
const
{
Tabs
TabPanel
}
=
createFactories
(
TabsClass
)
;
class
MainTabbedArea
extends
Component
{
static
get
propTypes
(
)
{
return
{
jsonText
:
PropTypes
.
instanceOf
(
Text
)
activeTab
:
PropTypes
.
number
actions
:
PropTypes
.
object
headers
:
PropTypes
.
object
searchFilter
:
PropTypes
.
string
json
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
object
PropTypes
.
array
PropTypes
.
bool
PropTypes
.
number
]
)
expandedNodes
:
PropTypes
.
instanceOf
(
Set
)
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
json
:
props
.
json
expandedNodes
:
props
.
expandedNodes
jsonText
:
props
.
jsonText
activeTab
:
props
.
activeTab
}
;
this
.
onTabChanged
=
this
.
onTabChanged
.
bind
(
this
)
;
}
onTabChanged
(
index
)
{
this
.
setState
(
{
activeTab
:
index
}
)
;
window
.
dispatchEvent
(
new
CustomEvent
(
"
TabChanged
"
{
detail
:
{
index
}
}
)
)
;
}
render
(
)
{
return
Tabs
(
{
activeTab
:
this
.
state
.
activeTab
onAfterChange
:
this
.
onTabChanged
tall
:
true
}
TabPanel
(
{
id
:
"
json
"
className
:
"
json
"
title
:
JSONView
.
Locale
[
"
jsonViewer
.
tab
.
JSON
"
]
}
JsonPanel
(
{
data
:
this
.
state
.
json
expandedNodes
:
this
.
state
.
expandedNodes
actions
:
this
.
props
.
actions
searchFilter
:
this
.
state
.
searchFilter
dataSize
:
this
.
state
.
jsonText
.
length
}
)
)
TabPanel
(
{
id
:
"
rawdata
"
className
:
"
rawdata
"
title
:
JSONView
.
Locale
[
"
jsonViewer
.
tab
.
RawData
"
]
}
TextPanel
(
{
isValidJson
:
!
(
this
.
state
.
json
instanceof
Error
)
&
&
document
.
readyState
!
=
"
loading
"
data
:
this
.
state
.
jsonText
errorMessage
:
this
.
state
.
json
instanceof
Error
?
this
.
state
.
json
+
"
"
:
null
actions
:
this
.
props
.
actions
}
)
)
TabPanel
(
{
id
:
"
headers
"
className
:
"
headers
"
title
:
JSONView
.
Locale
[
"
jsonViewer
.
tab
.
Headers
"
]
}
HeadersPanel
(
{
data
:
this
.
props
.
headers
actions
:
this
.
props
.
actions
searchFilter
:
this
.
props
.
searchFilter
}
)
)
)
;
}
}
export
default
{
MainTabbedArea
}
;
