"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
{
DOM
:
dom
createFactory
createClass
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
rep
-
utils
"
)
;
const
TreeView
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
tree
/
tree
-
view
"
)
)
;
const
{
Rep
}
=
createFactories
(
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
rep
"
)
)
;
const
{
SearchBox
}
=
createFactories
(
require
(
"
.
/
search
-
box
"
)
)
;
const
{
Toolbar
ToolbarButton
}
=
createFactories
(
require
(
"
.
/
reps
/
toolbar
"
)
)
;
const
{
div
}
=
dom
;
const
AUTO_EXPAND_MAX_SIZE
=
100
*
1024
;
const
AUTO_EXPAND_MAX_LEVEL
=
7
;
let
JsonPanel
=
createClass
(
{
displayName
:
"
JsonPanel
"
propTypes
:
{
data
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
array
PropTypes
.
object
]
)
jsonTextLength
:
PropTypes
.
number
searchFilter
:
PropTypes
.
string
actions
:
PropTypes
.
object
}
getInitialState
:
function
(
)
{
return
{
}
;
}
componentDidMount
:
function
(
)
{
document
.
addEventListener
(
"
keypress
"
this
.
onKeyPress
true
)
;
}
componentWillUnmount
:
function
(
)
{
document
.
removeEventListener
(
"
keypress
"
this
.
onKeyPress
true
)
;
}
onKeyPress
:
function
(
e
)
{
}
onFilter
:
function
(
object
)
{
if
(
!
this
.
props
.
searchFilter
)
{
return
true
;
}
let
json
=
JSON
.
stringify
(
object
)
.
toLowerCase
(
)
;
return
json
.
indexOf
(
this
.
props
.
searchFilter
.
toLowerCase
(
)
)
>
=
0
;
}
getExpandedNodes
:
function
(
object
path
=
"
"
level
=
0
)
{
if
(
typeof
object
!
=
"
object
"
)
{
return
null
;
}
if
(
level
>
AUTO_EXPAND_MAX_LEVEL
)
{
return
null
;
}
let
expandedNodes
=
new
Set
(
)
;
for
(
let
prop
in
object
)
{
let
nodePath
=
path
+
"
/
"
+
prop
;
expandedNodes
.
add
(
nodePath
)
;
let
nodes
=
this
.
getExpandedNodes
(
object
[
prop
]
nodePath
level
+
1
)
;
if
(
nodes
)
{
expandedNodes
=
new
Set
(
[
.
.
.
expandedNodes
.
.
.
nodes
]
)
;
}
}
return
expandedNodes
;
}
renderValue
:
props
=
>
{
let
member
=
props
.
member
;
if
(
typeof
member
.
value
=
=
"
object
"
&
&
member
.
open
)
{
return
null
;
}
return
Rep
(
Object
.
assign
(
{
}
props
{
cropLimit
:
50
}
)
)
;
}
renderTree
:
function
(
)
{
let
columns
=
[
{
id
:
"
value
"
width
:
"
100
%
"
}
]
;
let
expandedNodes
=
new
Set
(
)
;
if
(
this
.
props
.
jsonTextLength
<
=
AUTO_EXPAND_MAX_SIZE
)
{
expandedNodes
=
this
.
getExpandedNodes
(
this
.
props
.
data
)
;
}
return
TreeView
(
{
object
:
this
.
props
.
data
mode
:
"
tiny
"
onFilter
:
this
.
onFilter
columns
:
columns
renderValue
:
this
.
renderValue
expandedNodes
:
expandedNodes
}
)
;
}
render
:
function
(
)
{
let
content
;
let
data
=
this
.
props
.
data
;
try
{
if
(
typeof
data
=
=
"
object
"
)
{
content
=
this
.
renderTree
(
)
;
}
else
{
content
=
div
(
{
className
:
"
jsonParseError
"
}
data
+
"
"
)
;
}
}
catch
(
err
)
{
content
=
div
(
{
className
:
"
jsonParseError
"
}
err
+
"
"
)
;
}
return
(
div
(
{
className
:
"
jsonPanelBox
"
}
JsonToolbar
(
{
actions
:
this
.
props
.
actions
}
)
div
(
{
className
:
"
panelContent
"
}
content
)
)
)
;
}
}
)
;
let
JsonToolbar
=
createFactory
(
createClass
(
{
displayName
:
"
JsonToolbar
"
propTypes
:
{
actions
:
PropTypes
.
object
}
onSave
:
function
(
event
)
{
this
.
props
.
actions
.
onSaveJson
(
)
;
}
onCopy
:
function
(
event
)
{
this
.
props
.
actions
.
onCopyJson
(
)
;
}
render
:
function
(
)
{
return
(
Toolbar
(
{
}
ToolbarButton
(
{
className
:
"
btn
save
"
onClick
:
this
.
onSave
}
Locale
.
STR
(
"
jsonViewer
.
Save
"
)
)
ToolbarButton
(
{
className
:
"
btn
copy
"
onClick
:
this
.
onCopy
}
Locale
.
STR
(
"
jsonViewer
.
Copy
"
)
)
SearchBox
(
{
actions
:
this
.
props
.
actions
}
)
)
)
;
}
}
)
)
;
exports
.
JsonPanel
=
JsonPanel
;
}
)
;
