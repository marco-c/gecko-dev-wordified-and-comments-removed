"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
react
"
)
;
const
{
createFactories
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
ObjectBox
}
=
createFactories
(
require
(
"
.
/
object
-
box
"
)
)
;
const
{
Caption
}
=
createFactories
(
require
(
"
.
/
caption
"
)
)
;
const
DOM
=
React
.
DOM
;
const
Obj
=
React
.
createClass
(
{
displayName
:
"
Obj
"
render
:
function
(
)
{
var
object
=
this
.
props
.
object
;
var
props
=
this
.
shortPropIterator
(
object
)
;
return
(
ObjectBox
(
{
className
:
"
object
"
}
DOM
.
span
(
{
className
:
"
objectTitle
"
}
this
.
getTitle
(
object
)
)
DOM
.
span
(
{
className
:
"
objectLeftBrace
"
role
:
"
presentation
"
}
"
{
"
)
props
DOM
.
span
(
{
className
:
"
objectRightBrace
"
}
"
}
"
)
)
)
}
getTitle
:
function
(
)
{
return
"
"
;
}
longPropIterator
:
function
(
object
)
{
try
{
return
this
.
propIterator
(
object
100
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
}
shortPropIterator
:
function
(
object
)
{
try
{
return
this
.
propIterator
(
object
3
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
}
propIterator
:
function
(
object
max
)
{
function
isInterestingProp
(
t
value
)
{
return
(
t
=
=
"
boolean
"
|
|
t
=
=
"
number
"
|
|
(
t
=
=
"
string
"
&
&
value
)
|
|
(
t
=
=
"
object
"
&
&
value
&
&
value
.
toString
)
)
;
}
if
(
Object
.
prototype
.
toString
.
call
(
object
)
=
=
=
"
[
object
Generator
]
"
)
{
object
=
Object
.
getPrototypeOf
(
object
)
;
}
var
props
=
[
]
;
this
.
getProps
(
props
object
max
isInterestingProp
)
;
if
(
props
.
length
<
=
max
)
{
this
.
getProps
(
props
object
max
function
(
t
value
)
{
return
!
isInterestingProp
(
t
value
)
;
}
)
;
}
if
(
props
.
length
>
max
)
{
props
.
pop
(
)
;
props
.
push
(
Caption
(
{
key
:
"
more
"
object
:
Locale
.
STR
(
"
jsonViewer
.
reps
.
more
"
)
}
)
)
;
}
else
if
(
props
.
length
>
0
)
{
props
[
props
.
length
-
1
]
=
React
.
cloneElement
(
props
[
props
.
length
-
1
]
{
delim
:
"
"
}
)
;
}
return
props
;
}
getProps
:
function
(
props
object
max
filter
)
{
max
=
max
|
|
3
;
if
(
!
object
)
{
return
[
]
;
}
var
len
=
0
;
var
mode
=
this
.
props
.
mode
;
try
{
for
(
var
name
in
object
)
{
if
(
props
.
length
>
max
)
{
return
;
}
var
value
;
try
{
value
=
object
[
name
]
;
}
catch
(
exc
)
{
continue
;
}
var
t
=
typeof
(
value
)
;
if
(
filter
(
t
value
)
)
{
props
.
push
(
PropRep
(
{
key
:
name
mode
:
"
short
"
name
:
name
object
:
value
equal
:
"
:
"
delim
:
"
"
mode
:
mode
}
)
)
;
}
}
}
catch
(
exc
)
{
}
}
}
)
;
var
PropRep
=
React
.
createFactory
(
React
.
createClass
(
{
displayName
:
"
PropRep
"
render
:
function
(
)
{
var
{
Rep
}
=
createFactories
(
require
(
"
.
/
rep
"
)
)
;
var
object
=
this
.
props
.
object
;
var
mode
=
this
.
props
.
mode
;
return
(
DOM
.
span
(
{
}
DOM
.
span
(
{
"
className
"
:
"
nodeName
"
}
this
.
props
.
name
)
DOM
.
span
(
{
"
className
"
:
"
objectEqual
"
role
:
"
presentation
"
}
this
.
props
.
equal
)
Rep
(
{
object
:
object
mode
:
mode
}
)
DOM
.
span
(
{
"
className
"
:
"
objectComma
"
role
:
"
presentation
"
}
this
.
props
.
delim
)
)
)
;
}
}
)
)
;
function
supportsObject
(
object
type
)
{
return
true
;
}
exports
.
Obj
=
{
rep
:
Obj
supportsObject
:
supportsObject
}
;
}
)
;
