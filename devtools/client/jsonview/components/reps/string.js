"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
ObjectBox
}
=
createFactories
(
require
(
"
.
/
object
-
box
"
)
)
;
const
StringRep
=
React
.
createClass
(
{
displayName
:
"
StringRep
"
render
:
function
(
)
{
var
text
=
this
.
props
.
object
;
var
member
=
this
.
props
.
member
;
if
(
member
&
&
member
.
open
)
{
return
(
ObjectBox
(
{
className
:
"
string
"
}
"
\
"
"
+
text
+
"
\
"
"
)
)
}
else
{
return
(
ObjectBox
(
{
className
:
"
string
"
}
"
\
"
"
+
cropMultipleLines
(
text
)
+
"
\
"
"
)
)
}
}
}
)
;
function
escapeNewLines
(
value
)
{
return
value
.
replace
(
/
\
r
/
gm
"
\
\
r
"
)
.
replace
(
/
\
n
/
gm
"
\
\
n
"
)
;
}
;
function
cropMultipleLines
(
text
limit
)
{
return
escapeNewLines
(
cropString
(
text
limit
)
)
;
}
;
function
cropString
(
text
limit
alternativeText
)
{
if
(
!
alternativeText
)
{
alternativeText
=
"
.
.
.
"
;
}
text
=
text
+
"
"
;
if
(
!
limit
)
{
limit
=
50
;
}
if
(
limit
<
=
0
)
{
return
text
;
}
if
(
limit
<
=
alternativeText
.
length
)
{
limit
=
alternativeText
.
length
+
1
;
}
var
halfLimit
=
(
limit
-
alternativeText
.
length
)
/
2
;
if
(
text
.
length
>
limit
)
{
return
text
.
substr
(
0
Math
.
ceil
(
halfLimit
)
)
+
alternativeText
+
text
.
substr
(
text
.
length
-
Math
.
floor
(
halfLimit
)
)
;
}
return
text
;
}
;
function
isCropped
(
value
)
{
var
cropLength
=
50
;
return
typeof
(
value
)
=
=
"
string
"
&
&
value
.
length
>
cropLength
;
}
function
supportsObject
(
object
type
)
{
return
(
type
=
=
"
string
"
)
;
}
exports
.
StringRep
=
{
rep
:
StringRep
supportsObject
:
supportsObject
isCropped
:
isCropped
}
;
}
)
;
