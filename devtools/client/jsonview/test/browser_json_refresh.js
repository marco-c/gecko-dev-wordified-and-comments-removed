"
use
strict
"
;
const
TEST_JSON_FILE
=
"
simple_json
.
json
"
;
add_task
(
function
*
(
)
{
info
(
"
Test
JSON
refresh
started
"
)
;
let
dir
=
getChromeDir
(
getResolvedURI
(
gTestPath
)
)
;
dir
.
append
(
TEST_JSON_FILE
)
;
let
uri
=
Services
.
io
.
newFileURI
(
dir
)
;
let
tab
=
yield
addJsonViewTab
(
uri
.
spec
)
;
yield
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
TEST_JSON_FILE
}
function
*
(
{
TEST_JSON_FILE
}
)
{
let
channel
=
content
.
document
.
docShell
.
currentDocumentChannel
;
let
channelURI
=
channel
.
URI
.
spec
;
ok
(
channelURI
.
startsWith
(
"
file
:
/
/
"
)
&
&
channelURI
.
includes
(
TEST_JSON_FILE
)
"
sanity
:
correct
channel
uri
"
)
;
let
contentPolicyType
=
channel
.
loadInfo
.
externalContentPolicyType
;
is
(
contentPolicyType
Ci
.
nsIContentPolicy
.
TYPE_DOCUMENT
"
sanity
:
correct
contentPolicyType
"
)
;
let
loadingPrincipal
=
channel
.
loadInfo
.
loadingPrincipal
;
is
(
loadingPrincipal
null
"
sanity
:
correct
loadingPrincipal
"
)
;
let
triggeringPrincipal
=
channel
.
loadInfo
.
triggeringPrincipal
;
ok
(
Services
.
scriptSecurityManager
.
isSystemPrincipal
(
triggeringPrincipal
)
"
sanity
:
correct
triggeringPrincipal
"
)
;
let
principalToInherit
=
channel
.
loadInfo
.
principalToInherit
;
ok
(
principalToInherit
.
isNullPrincipal
"
sanity
:
correct
principalToInherit
"
)
;
ok
(
content
.
document
.
nodePrincipal
.
isNullPrincipal
"
sanity
:
correct
doc
.
nodePrincipal
"
)
;
}
)
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
tab
.
linkedBrowser
.
reload
(
)
;
yield
loaded
;
yield
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
TEST_JSON_FILE
}
function
*
(
{
TEST_JSON_FILE
}
)
{
let
channel
=
content
.
document
.
docShell
.
currentDocumentChannel
;
let
channelURI
=
channel
.
URI
.
spec
;
ok
(
channelURI
.
startsWith
(
"
file
:
/
/
"
)
&
&
channelURI
.
includes
(
TEST_JSON_FILE
)
"
reloaded
:
correct
channel
uri
"
)
;
let
contentPolicyType
=
channel
.
loadInfo
.
externalContentPolicyType
;
is
(
contentPolicyType
Ci
.
nsIContentPolicy
.
TYPE_DOCUMENT
"
reloaded
:
correct
contentPolicyType
"
)
;
let
loadingPrincipal
=
channel
.
loadInfo
.
loadingPrincipal
;
is
(
loadingPrincipal
null
"
reloaded
:
correct
loadingPrincipal
"
)
;
let
triggeringPrincipal
=
channel
.
loadInfo
.
triggeringPrincipal
;
ok
(
Services
.
scriptSecurityManager
.
isSystemPrincipal
(
triggeringPrincipal
)
"
reloaded
:
correct
triggeringPrincipal
"
)
;
let
principalToInherit
=
channel
.
loadInfo
.
principalToInherit
;
ok
(
principalToInherit
.
isNullPrincipal
"
reloaded
:
correct
principalToInherit
"
)
;
ok
(
content
.
document
.
nodePrincipal
.
isNullPrincipal
"
reloaded
:
correct
doc
.
nodePrincipal
"
)
;
}
)
;
}
)
;
