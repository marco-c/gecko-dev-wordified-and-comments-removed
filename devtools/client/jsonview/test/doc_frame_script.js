"
use
strict
"
;
let
EventUtils
=
{
}
;
EventUtils
.
window
=
content
;
EventUtils
.
parent
=
EventUtils
.
window
;
EventUtils
.
_EU_Ci
=
Components
.
interfaces
;
EventUtils
.
_EU_Cc
=
Components
.
classes
;
EventUtils
.
navigator
=
content
.
navigator
;
EventUtils
.
KeyboardEvent
=
content
.
KeyboardEvent
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
EventUtils
)
;
content
.
addEventListener
(
"
JSONViewInitialized
"
(
)
=
>
{
sendAsyncMessage
(
"
Test
:
JsonView
:
JSONViewInitialized
"
)
;
}
)
;
content
.
addEventListener
(
"
load
"
(
)
=
>
{
sendAsyncMessage
(
"
Test
:
JsonView
:
load
"
)
;
}
)
;
addMessageListener
(
"
Test
:
JsonView
:
GetElementCount
"
function
(
msg
)
{
let
{
selector
}
=
msg
.
data
;
let
nodeList
=
content
.
document
.
querySelectorAll
(
selector
)
;
sendAsyncMessage
(
msg
.
name
{
count
:
nodeList
.
length
}
)
;
}
)
;
addMessageListener
(
"
Test
:
JsonView
:
GetElementText
"
function
(
msg
)
{
let
{
selector
}
=
msg
.
data
;
let
element
=
content
.
document
.
querySelector
(
selector
)
;
let
text
=
element
?
element
.
textContent
:
null
;
sendAsyncMessage
(
msg
.
name
{
text
:
text
}
)
;
}
)
;
addMessageListener
(
"
Test
:
JsonView
:
GetElementVisibleText
"
function
(
msg
)
{
let
{
selector
}
=
msg
.
data
;
let
element
=
content
.
document
.
querySelector
(
selector
)
;
let
text
=
element
?
element
.
innerText
:
null
;
sendAsyncMessage
(
msg
.
name
{
text
:
text
}
)
;
}
)
;
addMessageListener
(
"
Test
:
JsonView
:
GetElementAttr
"
function
(
msg
)
{
let
{
selector
attr
}
=
msg
.
data
;
let
element
=
content
.
document
.
querySelector
(
selector
)
;
let
text
=
element
?
element
.
getAttribute
(
attr
)
:
null
;
sendAsyncMessage
(
msg
.
name
{
text
:
text
}
)
;
}
)
;
addMessageListener
(
"
Test
:
JsonView
:
FocusElement
"
function
(
msg
)
{
let
{
selector
}
=
msg
.
data
;
let
element
=
content
.
document
.
querySelector
(
selector
)
;
if
(
element
)
{
element
.
focus
(
)
;
}
sendAsyncMessage
(
msg
.
name
)
;
}
)
;
addMessageListener
(
"
Test
:
JsonView
:
SendString
"
function
(
msg
)
{
let
{
selector
str
}
=
msg
.
data
;
if
(
selector
)
{
let
element
=
content
.
document
.
querySelector
(
selector
)
;
if
(
element
)
{
element
.
focus
(
)
;
}
}
EventUtils
.
sendString
(
str
content
)
;
sendAsyncMessage
(
msg
.
name
)
;
}
)
;
addMessageListener
(
"
Test
:
JsonView
:
WaitForFilter
"
function
(
msg
)
{
let
firstRow
=
content
.
document
.
querySelector
(
"
.
jsonPanelBox
.
treeTable
.
treeRow
"
)
;
if
(
firstRow
.
classList
.
contains
(
"
hidden
"
)
)
{
sendAsyncMessage
(
msg
.
name
)
;
return
;
}
let
observer
=
new
content
.
MutationObserver
(
function
(
mutations
)
{
for
(
let
i
=
0
;
i
<
mutations
.
length
;
i
+
+
)
{
let
mutation
=
mutations
[
i
]
;
if
(
mutation
.
attributeName
=
=
"
class
"
)
{
if
(
firstRow
.
classList
.
contains
(
"
hidden
"
)
)
{
observer
.
disconnect
(
)
;
sendAsyncMessage
(
msg
.
name
)
;
break
;
}
}
}
}
)
;
observer
.
observe
(
firstRow
{
attributes
:
true
}
)
;
}
)
;
addMessageListener
(
"
Test
:
JsonView
:
Eval
"
function
(
msg
)
{
let
result
=
content
.
eval
(
msg
.
data
.
code
)
;
sendAsyncMessage
(
msg
.
name
{
result
}
)
;
}
)
;
Components
.
utils
.
exportFunction
(
content
.
document
.
querySelector
.
bind
(
content
.
document
)
content
{
defineAs
:
"
"
}
)
;
Components
.
utils
.
exportFunction
(
content
.
document
.
querySelectorAll
.
bind
(
content
.
document
)
content
{
defineAs
:
"
"
}
)
;
