"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
head
.
js
"
this
)
;
const
JSON_VIEW_PREF
=
"
devtools
.
jsonview
.
enabled
"
;
Services
.
prefs
.
setBoolPref
(
JSON_VIEW_PREF
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
JSON_VIEW_PREF
)
;
}
)
;
async
function
addJsonViewTab
(
url
timeout
=
-
1
)
{
info
(
"
Adding
a
new
JSON
tab
with
URL
:
'
"
+
url
+
"
'
"
)
;
let
tab
=
await
addTab
(
url
)
;
let
browser
=
tab
.
linkedBrowser
;
getFrameScript
(
)
;
let
rootDir
=
getRootDirectory
(
gTestPath
)
;
let
frameScriptUrl
=
rootDir
+
"
doc_frame_script
.
js
"
;
browser
.
messageManager
.
loadFrameScript
(
frameScriptUrl
false
)
;
if
(
!
content
.
window
.
wrappedJSObject
.
JSONView
)
{
throw
new
Error
(
"
JSON
Viewer
did
not
load
.
"
)
;
}
if
(
content
.
window
.
wrappedJSObject
.
JSONView
.
initialized
)
{
return
tab
;
}
const
onJSONViewInitialized
=
waitForContentMessage
(
"
Test
:
JsonView
:
JSONViewInitialized
"
)
.
then
(
(
)
=
>
tab
)
;
if
(
!
(
timeout
>
=
0
)
)
{
return
onJSONViewInitialized
;
}
if
(
content
.
window
.
document
.
readyState
!
=
=
"
complete
"
)
{
await
waitForContentMessage
(
"
Test
:
JsonView
:
load
"
)
;
}
let
onTimeout
=
new
Promise
(
(
_
reject
)
=
>
setTimeout
(
(
)
=
>
reject
(
new
Error
(
"
JSON
Viewer
did
not
load
.
"
)
)
timeout
)
)
;
return
Promise
.
race
(
[
onJSONViewInitialized
onTimeout
]
)
;
}
function
clickJsonNode
(
selector
)
{
info
(
"
Expanding
node
:
'
"
+
selector
+
"
'
"
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
return
BrowserTestUtils
.
synthesizeMouseAtCenter
(
selector
{
}
browser
)
;
}
function
selectJsonViewContentTab
(
name
)
{
info
(
"
Selecting
tab
:
'
"
+
name
+
"
'
"
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
let
selector
=
"
.
tabs
-
menu
.
tabs
-
menu
-
item
.
"
+
name
+
"
a
"
;
return
BrowserTestUtils
.
synthesizeMouseAtCenter
(
selector
{
}
browser
)
;
}
function
getElementCount
(
selector
)
{
info
(
"
Get
element
count
:
'
"
+
selector
+
"
'
"
)
;
let
data
=
{
selector
:
selector
}
;
return
executeInContent
(
"
Test
:
JsonView
:
GetElementCount
"
data
)
.
then
(
result
=
>
{
return
result
.
count
;
}
)
;
}
function
getElementText
(
selector
)
{
info
(
"
Get
element
text
:
'
"
+
selector
+
"
'
"
)
;
let
data
=
{
selector
:
selector
}
;
return
executeInContent
(
"
Test
:
JsonView
:
GetElementText
"
data
)
.
then
(
result
=
>
{
return
result
.
text
;
}
)
;
}
function
getElementAttr
(
selector
attr
)
{
info
(
"
Get
attribute
'
"
+
attr
+
"
'
for
element
'
"
+
selector
+
"
'
"
)
;
let
data
=
{
selector
attr
}
;
return
executeInContent
(
"
Test
:
JsonView
:
GetElementAttr
"
data
)
.
then
(
result
=
>
result
.
text
)
;
}
function
focusElement
(
selector
)
{
info
(
"
Focus
element
:
'
"
+
selector
+
"
'
"
)
;
let
data
=
{
selector
:
selector
}
;
return
executeInContent
(
"
Test
:
JsonView
:
FocusElement
"
data
)
;
}
function
sendString
(
str
selector
)
{
info
(
"
Send
string
:
'
"
+
str
+
"
'
"
)
;
let
data
=
{
selector
:
selector
str
:
str
}
;
return
executeInContent
(
"
Test
:
JsonView
:
SendString
"
data
)
;
}
function
waitForTime
(
delay
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
delay
)
)
;
}
function
waitForFilter
(
)
{
return
executeInContent
(
"
Test
:
JsonView
:
WaitForFilter
"
)
;
}
function
normalizeNewLines
(
value
)
{
return
value
.
replace
(
"
(
\
r
\
n
|
\
n
)
"
"
\
n
"
)
;
}
function
evalInContent
(
code
)
{
return
executeInContent
(
"
Test
:
JsonView
:
Eval
"
{
code
}
)
.
then
(
result
=
>
result
.
result
)
;
}
