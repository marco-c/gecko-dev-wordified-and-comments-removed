"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
head
.
js
"
this
)
;
const
JSON_VIEW_PREF
=
"
devtools
.
jsonview
.
enabled
"
;
Services
.
prefs
.
setBoolPref
(
JSON_VIEW_PREF
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
JSON_VIEW_PREF
)
;
}
)
;
async
function
addJsonViewTab
(
url
{
appReadyState
=
"
complete
"
docReadyState
=
"
complete
"
}
=
{
}
)
{
info
(
"
Adding
a
new
JSON
tab
with
URL
:
'
"
+
url
+
"
'
"
)
;
let
tabLoaded
=
addTab
(
url
)
;
let
tab
=
gBrowser
.
selectedTab
;
let
browser
=
tab
.
linkedBrowser
;
await
Promise
.
race
(
[
tabLoaded
new
Promise
(
resolve
=
>
{
browser
.
webProgress
.
addProgressListener
(
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
"
nsISupportsWeakReference
"
]
)
onLocationChange
(
webProgress
)
{
webProgress
.
removeProgressListener
(
this
)
;
resolve
(
)
;
}
}
Ci
.
nsIWebProgress
.
NOTIFY_LOCATION
)
;
}
)
]
)
;
loadFrameScriptUtils
(
)
;
let
rootDir
=
getRootDirectory
(
gTestPath
)
;
let
error
=
tabLoaded
.
then
(
(
)
=
>
ContentTask
.
spawn
(
browser
null
function
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
{
requirejs
}
=
content
.
wrappedJSObject
;
if
(
requirejs
)
{
requirejs
.
onError
=
err
=
>
{
info
(
err
)
;
ok
(
false
"
RequireJS
error
"
)
;
reject
(
err
)
;
}
;
}
}
)
;
}
)
)
;
let
data
=
{
rootDir
appReadyState
docReadyState
}
;
await
Promise
.
race
(
[
error
ContentTask
.
spawn
(
browser
data
async
function
(
data
)
{
let
{
JSONView
}
=
content
.
wrappedJSObject
;
if
(
!
JSONView
)
{
throw
new
Error
(
"
The
JSON
Viewer
did
not
load
.
"
)
;
}
let
frameScriptUrl
=
data
.
rootDir
+
"
doc_frame_script
.
js
"
;
Services
.
scriptloader
.
loadSubScript
(
frameScriptUrl
{
}
"
UTF
-
8
"
)
;
let
docReadyStates
=
[
"
loading
"
"
interactive
"
"
complete
"
]
;
let
docReadyIndex
=
docReadyStates
.
indexOf
(
data
.
docReadyState
)
;
let
appReadyStates
=
[
"
uninitialized
"
.
.
.
docReadyStates
]
;
let
appReadyIndex
=
appReadyStates
.
indexOf
(
data
.
appReadyState
)
;
if
(
docReadyIndex
<
0
|
|
appReadyIndex
<
0
)
{
throw
new
Error
(
"
Invalid
app
or
doc
readyState
parameter
.
"
)
;
}
let
{
document
}
=
content
;
while
(
docReadyStates
.
indexOf
(
document
.
readyState
)
<
docReadyIndex
)
{
info
(
DocReadyState
is
"
{
document
.
readyState
}
"
.
Await
"
{
data
.
docReadyState
}
"
)
;
await
new
Promise
(
resolve
=
>
{
document
.
addEventListener
(
"
readystatechange
"
resolve
{
once
:
true
}
)
;
}
)
;
}
while
(
appReadyStates
.
indexOf
(
JSONView
.
readyState
)
<
appReadyIndex
)
{
info
(
AppReadyState
is
"
{
JSONView
.
readyState
}
"
.
Await
"
{
data
.
appReadyState
}
"
)
;
await
new
Promise
(
resolve
=
>
{
content
.
addEventListener
(
"
AppReadyStateChange
"
resolve
{
once
:
true
}
)
;
}
)
;
}
}
)
]
)
;
return
tab
;
}
function
clickJsonNode
(
selector
)
{
info
(
"
Expanding
node
:
'
"
+
selector
+
"
'
"
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
return
BrowserTestUtils
.
synthesizeMouseAtCenter
(
selector
{
}
browser
)
;
}
function
selectJsonViewContentTab
(
name
)
{
info
(
"
Selecting
tab
:
'
"
+
name
+
"
'
"
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
let
selector
=
"
.
tabs
-
menu
.
tabs
-
menu
-
item
.
"
+
name
+
"
a
"
;
return
BrowserTestUtils
.
synthesizeMouseAtCenter
(
selector
{
}
browser
)
;
}
function
getElementCount
(
selector
)
{
info
(
"
Get
element
count
:
'
"
+
selector
+
"
'
"
)
;
let
data
=
{
selector
:
selector
}
;
return
executeInContent
(
"
Test
:
JsonView
:
GetElementCount
"
data
)
.
then
(
result
=
>
{
return
result
.
count
;
}
)
;
}
function
getElementText
(
selector
)
{
info
(
"
Get
element
text
:
'
"
+
selector
+
"
'
"
)
;
let
data
=
{
selector
:
selector
}
;
return
executeInContent
(
"
Test
:
JsonView
:
GetElementText
"
data
)
.
then
(
result
=
>
{
return
result
.
text
;
}
)
;
}
function
getElementAttr
(
selector
attr
)
{
info
(
"
Get
attribute
'
"
+
attr
+
"
'
for
element
'
"
+
selector
+
"
'
"
)
;
let
data
=
{
selector
attr
}
;
return
executeInContent
(
"
Test
:
JsonView
:
GetElementAttr
"
data
)
.
then
(
result
=
>
result
.
text
)
;
}
function
focusElement
(
selector
)
{
info
(
"
Focus
element
:
'
"
+
selector
+
"
'
"
)
;
let
data
=
{
selector
:
selector
}
;
return
executeInContent
(
"
Test
:
JsonView
:
FocusElement
"
data
)
;
}
function
sendString
(
str
selector
)
{
info
(
"
Send
string
:
'
"
+
str
+
"
'
"
)
;
let
data
=
{
selector
:
selector
str
:
str
}
;
return
executeInContent
(
"
Test
:
JsonView
:
SendString
"
data
)
;
}
function
waitForTime
(
delay
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
delay
)
)
;
}
function
waitForFilter
(
)
{
return
executeInContent
(
"
Test
:
JsonView
:
WaitForFilter
"
)
;
}
function
normalizeNewLines
(
value
)
{
return
value
.
replace
(
"
(
\
r
\
n
|
\
n
)
"
"
\
n
"
)
;
}
function
evalInContent
(
code
)
{
return
executeInContent
(
"
Test
:
JsonView
:
Eval
"
{
code
}
)
.
then
(
result
=
>
result
.
result
)
;
}
