"
use
strict
"
;
add_task
(
async
function
(
)
{
info
(
"
Test
1
JSON
row
selection
started
"
)
;
let
numRows
=
1e3
;
let
json
=
JSON
.
stringify
(
Array
(
numRows
)
.
fill
(
)
.
map
(
(
_
i
)
=
>
i
)
)
;
let
tab
=
await
addJsonViewTab
(
"
data
:
application
/
json
"
+
json
)
;
is
(
await
getElementCount
(
"
.
treeRow
"
)
numRows
"
Got
the
expected
number
of
rows
.
"
)
;
await
assertRowSelected
(
null
)
;
await
evalInContent
(
"
var
scroller
=
(
'
.
jsonPanelBox
.
panelContent
'
)
"
)
;
ok
(
await
evalInContent
(
"
scroller
.
clientHeight
<
scroller
.
scrollHeight
"
)
"
There
is
a
scrollbar
.
"
)
;
is
(
await
evalInContent
(
"
scroller
.
scrollTop
"
)
0
"
Initially
scrolled
to
the
top
.
"
)
;
await
evalInContent
(
"
(
'
.
treeRow
:
last
-
child
'
)
.
click
(
)
"
)
;
await
assertRowSelected
(
numRows
)
;
is
(
await
evalInContent
(
"
scroller
.
scrollTop
+
scroller
.
clientHeight
"
)
await
evalInContent
(
"
scroller
.
scrollHeight
"
)
"
Scrolled
to
the
bottom
.
"
)
;
await
evalInContent
(
"
(
'
.
treeRow
:
nth
-
child
(
2
)
'
)
.
click
(
)
"
)
;
await
assertRowSelected
(
2
)
;
ok
(
await
evalInContent
(
"
scroller
.
scrollTop
>
0
"
)
"
Not
scrolled
to
the
top
.
"
)
;
await
evalInContent
(
"
(
'
.
treeTable
'
)
.
focus
(
)
"
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
tab
.
linkedBrowser
)
;
await
assertRowSelected
(
1
)
;
is
(
await
evalInContent
(
"
scroller
.
scrollTop
"
)
0
"
Scrolled
to
the
top
.
"
)
;
}
)
;
add_task
(
async
function
(
)
{
info
(
"
Test
2
JSON
row
selection
started
"
)
;
let
numRows
=
4
;
let
tab
=
await
addJsonViewTab
(
"
data
:
application
/
json
[
0
1
2
3
]
"
)
;
is
(
await
getElementCount
(
"
.
treeRow
"
)
numRows
"
Got
the
expected
number
of
rows
.
"
)
;
await
assertRowSelected
(
null
)
;
await
clickJsonNode
(
"
.
treeRow
:
first
-
child
"
)
;
await
assertRowSelected
(
1
)
;
for
(
let
i
=
2
;
i
<
numRows
;
+
+
i
)
{
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
type
:
"
keydown
"
}
tab
.
linkedBrowser
)
;
await
assertRowSelected
(
i
)
;
}
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
type
:
"
keyup
"
}
tab
.
linkedBrowser
)
;
await
assertRowSelected
(
numRows
-
1
)
;
}
)
;
async
function
assertRowSelected
(
rowNum
)
{
let
idx
=
evalInContent
(
"
[
]
.
indexOf
.
call
(
(
'
.
treeRow
'
)
(
'
.
treeRow
.
selected
'
)
)
"
)
;
is
(
await
idx
+
1
+
rowNum
{
rowNum
?
"
The
row
#
"
+
rowNum
:
"
No
row
"
}
is
selected
.
)
;
}
