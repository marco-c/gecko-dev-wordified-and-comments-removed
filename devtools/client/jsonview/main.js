"
use
strict
"
;
const
{
Cu
Cc
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
XPCOMUtils
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
{
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
chrome
"
function
(
)
{
return
Cc
[
"
mozilla
.
org
/
appshell
/
window
-
mediator
;
1
"
]
.
getService
(
Ci
.
nsIWindowMediator
)
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
JsonViewUtils
"
function
(
)
{
return
require
(
"
devtools
/
client
/
jsonview
/
utils
"
)
;
}
)
;
var
JsonView
=
{
initialize
:
function
(
)
{
Services
.
ppmm
.
loadProcessScript
(
"
resource
:
/
/
devtools
/
client
/
jsonview
/
converter
-
observer
.
js
"
true
)
;
this
.
onSaveListener
=
this
.
onSave
.
bind
(
this
)
;
Services
.
ppmm
.
addMessageListener
(
"
devtools
:
jsonview
:
save
"
this
.
onSaveListener
)
;
}
destroy
:
function
(
)
{
Services
.
ppmm
.
removeMessageListener
(
"
devtools
:
jsonview
:
save
"
this
.
onSaveListener
)
;
}
onSave
:
function
(
message
)
{
let
browser
=
chrome
.
gBrowser
.
selectedBrowser
;
if
(
message
.
data
.
url
=
=
=
null
)
{
chrome
.
saveBrowser
(
browser
false
message
.
data
.
windowID
)
;
}
else
{
let
persistable
=
browser
.
QueryInterface
(
Ci
.
nsIFrameLoaderOwner
)
.
frameLoader
.
QueryInterface
(
Ci
.
nsIWebBrowserPersistable
)
;
persistable
.
startPersistence
(
message
.
data
.
windowID
{
onDocumentReady
(
doc
)
{
let
uri
=
chrome
.
makeURI
(
doc
.
documentURI
doc
.
characterSet
)
;
let
filename
=
chrome
.
getDefaultFileName
(
undefined
uri
doc
null
)
;
chrome
.
internalSave
(
message
.
data
.
url
doc
filename
null
doc
.
contentType
false
null
null
null
doc
false
null
undefined
)
;
}
onError
(
status
)
{
throw
new
Error
(
"
JSON
Viewer
'
s
onSave
failed
in
startPersistence
"
)
;
}
}
)
;
}
}
}
;
module
.
exports
.
JsonView
=
JsonView
;
