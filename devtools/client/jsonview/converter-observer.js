"
use
strict
"
;
const
Cm
=
Components
.
manager
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
devtools
"
function
(
)
{
const
{
devtools
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
return
devtools
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
JsonViewService
"
function
(
)
{
const
{
JsonViewService
}
=
devtools
.
require
(
"
devtools
/
client
/
jsonview
/
converter
-
child
"
)
;
return
JsonViewService
;
}
)
;
const
JSON_VIEW_PREF
=
"
devtools
.
jsonview
.
enabled
"
;
const
JSON_VIEW_MIME_TYPE
=
"
application
/
vnd
.
mozilla
.
json
.
view
"
;
const
JSON_VIEW_CONTRACT_ID
=
"
mozilla
.
org
/
streamconv
;
1
?
from
=
"
+
JSON_VIEW_MIME_TYPE
+
"
&
to
=
*
/
*
"
;
const
JSON_VIEW_CLASS_ID
=
Components
.
ID
(
"
{
d8c9acee
-
dec5
-
11e4
-
8c75
-
1681e6b88ec1
}
"
)
;
const
JSON_VIEW_CLASS_DESCRIPTION
=
"
JSONView
converter
"
;
const
JSON_SNIFFER_CONTRACT_ID
=
"
mozilla
.
org
/
devtools
/
jsonview
-
sniffer
;
1
"
;
const
JSON_SNIFFER_CLASS_ID
=
Components
.
ID
(
"
{
4148c488
-
dca1
-
49fc
-
a621
-
2a0097a62422
}
"
)
;
const
JSON_SNIFFER_CLASS_DESCRIPTION
=
"
JSONView
content
sniffer
"
;
const
JSON_VIEW_TYPE
=
"
JSON
View
"
;
const
CONTENT_SNIFFER_CATEGORY
=
"
net
-
content
-
sniffers
"
;
function
JsonViewSniffer
(
)
{
}
JsonViewSniffer
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIContentSniffer
]
)
get
wrappedJSObject
(
)
{
return
this
;
}
isTopLevelLoad
:
function
(
request
)
{
const
loadInfo
=
request
.
loadInfo
;
if
(
loadInfo
&
&
loadInfo
.
isTopLevelLoad
)
{
return
request
.
loadFlags
&
Ci
.
nsIChannel
.
LOAD_DOCUMENT_URI
;
}
return
false
;
}
getMIMETypeFromContent
:
function
(
request
data
length
)
{
if
(
request
instanceof
Ci
.
nsIChannel
)
{
if
(
!
this
.
isTopLevelLoad
(
request
)
)
{
if
(
request
.
contentType
=
=
=
JSON_VIEW_MIME_TYPE
)
{
return
"
application
/
json
"
;
}
return
"
"
;
}
try
{
if
(
request
.
contentDisposition
=
=
Ci
.
nsIChannel
.
DISPOSITION_ATTACHMENT
)
{
return
"
"
;
}
}
catch
(
e
)
{
}
if
(
/
^
application
\
/
(
?
:
.
+
\
+
)
?
json
/
.
test
(
request
.
contentType
)
)
{
return
JSON_VIEW_MIME_TYPE
;
}
}
return
"
"
;
}
}
;
const
JsonSnifferFactory
=
{
createInstance
:
function
(
outer
iid
)
{
if
(
outer
)
{
throw
Cr
.
NS_ERROR_NO_AGGREGATION
;
}
return
new
JsonViewSniffer
(
)
.
QueryInterface
(
iid
)
;
}
}
;
const
JsonViewFactory
=
{
createInstance
:
function
(
outer
iid
)
{
if
(
outer
)
{
throw
Cr
.
NS_ERROR_NO_AGGREGATION
;
}
return
JsonViewService
.
createInstance
(
)
.
QueryInterface
(
iid
)
;
}
}
;
function
ConverterObserver
(
)
{
}
ConverterObserver
.
prototype
=
{
initialize
:
function
(
)
{
if
(
this
.
isEnabled
(
)
)
{
this
.
register
(
)
;
}
Services
.
prefs
.
addObserver
(
JSON_VIEW_PREF
this
)
;
Services
.
obs
.
addObserver
(
this
"
xpcom
-
shutdown
"
)
;
}
observe
:
function
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
xpcom
-
shutdown
"
:
this
.
onShutdown
(
)
;
break
;
case
"
nsPref
:
changed
"
:
this
.
onPrefChanged
(
)
;
break
;
}
}
onShutdown
:
function
(
)
{
Services
.
prefs
.
removeObserver
(
JSON_VIEW_PREF
observer
)
;
Services
.
obs
.
removeObserver
(
observer
"
xpcom
-
shutdown
"
)
;
}
onPrefChanged
:
function
(
)
{
if
(
this
.
isEnabled
(
)
)
{
this
.
register
(
)
;
}
else
{
this
.
unregister
(
)
;
}
}
register
:
function
(
)
{
const
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
if
(
!
registrar
.
isCIDRegistered
(
JSON_SNIFFER_CLASS_ID
)
)
{
registrar
.
registerFactory
(
JSON_SNIFFER_CLASS_ID
JSON_SNIFFER_CLASS_DESCRIPTION
JSON_SNIFFER_CONTRACT_ID
JsonSnifferFactory
)
;
Services
.
catMan
.
addCategoryEntry
(
CONTENT_SNIFFER_CATEGORY
JSON_VIEW_TYPE
JSON_SNIFFER_CONTRACT_ID
false
false
)
;
}
if
(
!
registrar
.
isCIDRegistered
(
JSON_VIEW_CLASS_ID
)
)
{
registrar
.
registerFactory
(
JSON_VIEW_CLASS_ID
JSON_VIEW_CLASS_DESCRIPTION
JSON_VIEW_CONTRACT_ID
JsonViewFactory
)
;
}
}
unregister
:
function
(
)
{
const
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
if
(
registrar
.
isCIDRegistered
(
JSON_SNIFFER_CLASS_ID
)
)
{
registrar
.
unregisterFactory
(
JSON_SNIFFER_CLASS_ID
JsonSnifferFactory
)
;
Services
.
catMan
.
deleteCategoryEntry
(
CONTENT_SNIFFER_CATEGORY
JSON_VIEW_TYPE
false
)
;
}
if
(
registrar
.
isCIDRegistered
(
JSON_VIEW_CLASS_ID
)
)
{
registrar
.
unregisterFactory
(
JSON_VIEW_CLASS_ID
JsonViewFactory
)
;
}
}
isEnabled
:
function
(
)
{
return
Services
.
prefs
.
getBoolPref
(
JSON_VIEW_PREF
)
;
}
}
;
var
observer
=
new
ConverterObserver
(
)
;
observer
.
initialize
(
)
;
