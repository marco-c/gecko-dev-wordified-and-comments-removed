"
use
strict
"
;
const
Cu
=
Components
.
utils
;
const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
const
{
XPCOMUtils
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
{
}
)
;
const
{
Services
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
const
categoryManager
=
Cc
[
"
mozilla
.
org
/
categorymanager
;
1
"
]
.
getService
(
Ci
.
nsICategoryManager
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
JsonViewService
"
function
(
)
{
const
{
devtools
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
JsonViewService
}
=
devtools
.
require
(
"
devtools
/
client
/
jsonview
/
converter
-
child
"
)
;
return
JsonViewService
;
}
)
;
const
JSON_TYPE
=
"
application
/
json
"
;
const
GECKO_VIEWER
=
"
Gecko
-
Content
-
Viewers
"
;
const
JSON_VIEW_PREF
=
"
devtools
.
jsonview
.
enabled
"
;
const
GECKO_TYPE_MAPPING
=
"
ext
-
to
-
type
-
mapping
"
;
function
ConverterObserver
(
)
{
}
ConverterObserver
.
prototype
=
{
initialize
:
function
(
)
{
this
.
geckoViewer
=
categoryManager
.
getCategoryEntry
(
GECKO_VIEWER
JSON_TYPE
)
;
if
(
this
.
isEnabled
(
)
)
{
this
.
register
(
)
;
}
Services
.
prefs
.
addObserver
(
JSON_VIEW_PREF
this
false
)
;
Services
.
obs
.
addObserver
(
this
"
xpcom
-
shutdown
"
false
)
;
}
observe
:
function
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
xpcom
-
shutdown
"
:
this
.
onShutdown
(
)
;
break
;
case
"
nsPref
:
changed
"
:
this
.
onPrefChanged
(
)
;
break
;
}
;
}
onShutdown
:
function
(
)
{
Services
.
prefs
.
removeObserver
(
JSON_VIEW_PREF
observer
)
;
Services
.
obs
.
removeObserver
(
observer
"
xpcom
-
shutdown
"
)
;
}
onPrefChanged
:
function
(
)
{
if
(
this
.
isEnabled
(
)
)
{
this
.
register
(
)
;
}
else
{
this
.
unregister
(
)
;
}
}
register
:
function
(
)
{
if
(
JsonViewService
.
register
(
)
)
{
categoryManager
.
deleteCategoryEntry
(
GECKO_VIEWER
JSON_TYPE
false
)
;
this
.
geckoMapping
=
categoryManager
.
addCategoryEntry
(
GECKO_TYPE_MAPPING
"
json
"
JSON_TYPE
false
true
)
;
}
}
unregister
:
function
(
)
{
if
(
JsonViewService
.
unregister
(
)
)
{
categoryManager
.
addCategoryEntry
(
GECKO_VIEWER
JSON_TYPE
this
.
geckoViewer
false
false
)
;
if
(
this
.
geckoMapping
)
{
categoryManager
.
addCategoryEntry
(
GECKO_TYPE_MAPPING
"
json
"
this
.
geckoMapping
false
true
)
;
}
else
{
categoryManager
.
deleteCategoryEntry
(
GECKO_TYPE_MAPPING
JSON_TYPE
false
)
}
}
}
isEnabled
:
function
(
)
{
return
Services
.
prefs
.
getBoolPref
(
JSON_VIEW_PREF
)
;
}
}
;
var
observer
=
new
ConverterObserver
(
)
;
observer
.
initialize
(
)
;
