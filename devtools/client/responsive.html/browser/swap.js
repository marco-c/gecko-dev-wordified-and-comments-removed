"
use
strict
"
;
const
promise
=
require
(
"
promise
"
)
;
const
{
Task
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
function
swapToInnerBrowser
(
{
tab
containerURL
getInnerBrowser
}
)
{
let
gBrowser
=
tab
.
ownerDocument
.
defaultView
.
gBrowser
;
let
innerBrowser
;
return
{
start
:
Task
.
async
(
function
*
(
)
{
let
containerTab
=
gBrowser
.
addTab
(
containerURL
{
skipAnimation
:
true
}
)
;
gBrowser
.
hideTab
(
containerTab
)
;
let
containerBrowser
=
containerTab
.
linkedBrowser
;
containerBrowser
.
docShellIsActive
=
true
;
yield
tabLoaded
(
containerTab
)
;
innerBrowser
=
yield
getInnerBrowser
(
containerBrowser
)
;
addXULBrowserDecorations
(
innerBrowser
)
;
if
(
innerBrowser
.
isRemoteBrowser
!
=
tab
.
linkedBrowser
.
isRemoteBrowser
)
{
throw
new
Error
(
"
The
inner
browser
'
s
remoteness
must
match
the
"
+
"
original
tab
.
"
)
;
}
gBrowser
.
_swapBrowserDocShells
(
tab
innerBrowser
)
;
gBrowser
.
updateBrowserRemoteness
(
tab
.
linkedBrowser
false
)
;
gBrowser
.
swapBrowsersAndCloseOther
(
tab
containerTab
)
;
}
)
stop
(
)
{
let
contentTab
=
gBrowser
.
addTab
(
"
about
:
blank
"
{
skipAnimation
:
true
}
)
;
gBrowser
.
hideTab
(
contentTab
)
;
let
contentBrowser
=
contentTab
.
linkedBrowser
;
contentBrowser
.
docShellIsActive
=
true
;
gBrowser
.
_swapBrowserDocShells
(
contentTab
innerBrowser
)
;
innerBrowser
=
null
;
gBrowser
.
updateBrowserRemoteness
(
tab
.
linkedBrowser
true
)
;
gBrowser
.
swapBrowsersAndCloseOther
(
tab
contentTab
)
;
gBrowser
=
null
;
}
}
;
}
function
addXULBrowserDecorations
(
browser
)
{
if
(
browser
.
isRemoteBrowser
=
=
undefined
)
{
Object
.
defineProperty
(
browser
"
isRemoteBrowser
"
{
get
(
)
{
return
this
.
getAttribute
(
"
remote
"
)
=
=
"
true
"
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
if
(
browser
.
messageManager
=
=
undefined
)
{
Object
.
defineProperty
(
browser
"
messageManager
"
{
get
(
)
{
return
this
.
frameLoader
.
messageManager
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
if
(
browser
.
_remoteWebNavigationImpl
=
=
undefined
)
{
browser
.
_remoteWebNavigationImpl
=
{
swapBrowser
(
)
{
}
}
;
}
if
(
browser
.
_remoteWebProgressManager
=
=
undefined
)
{
browser
.
_remoteWebProgressManager
=
{
swapBrowser
(
)
{
}
}
;
}
}
function
tabLoaded
(
tab
)
{
let
deferred
=
promise
.
defer
(
)
;
function
handle
(
event
)
{
if
(
event
.
originalTarget
!
=
tab
.
linkedBrowser
.
contentDocument
|
|
event
.
target
.
location
.
href
=
=
"
about
:
blank
"
)
{
return
;
}
tab
.
linkedBrowser
.
removeEventListener
(
"
load
"
handle
true
)
;
deferred
.
resolve
(
event
)
;
}
tab
.
linkedBrowser
.
addEventListener
(
"
load
"
handle
true
)
;
return
deferred
.
promise
;
}
exports
.
swapToInnerBrowser
=
swapToInnerBrowser
;
