"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
{
tunnelToInnerBrowser
}
=
require
(
"
.
/
tunnel
"
)
;
function
debug
(
msg
)
{
}
function
swapToInnerBrowser
(
{
tab
containerURL
getInnerBrowser
}
)
{
let
browserWindow
=
tab
.
ownerGlobal
;
let
gBrowser
=
browserWindow
.
gBrowser
;
let
innerBrowser
;
let
tunnel
;
let
dispatchDevToolsBrowserSwap
=
(
from
to
)
=
>
{
let
CustomEvent
=
browserWindow
.
CustomEvent
;
let
event
=
new
CustomEvent
(
"
DevTools
:
BrowserSwap
"
{
detail
:
to
bubbles
:
true
}
)
;
from
.
dispatchEvent
(
event
)
;
}
;
let
addTabSilently
=
(
uri
options
)
=
>
{
browserWindow
.
addEventListener
(
"
TabOpen
"
event
=
>
{
event
.
stopImmediatePropagation
(
)
;
}
{
capture
:
true
once
:
true
}
)
;
return
gBrowser
.
addTab
(
uri
options
)
;
}
;
let
swapBrowsersAndCloseOtherSilently
=
(
ourTab
otherTab
)
=
>
{
browserWindow
.
addEventListener
(
"
TabClose
"
event
=
>
{
event
.
stopImmediatePropagation
(
)
;
}
{
capture
:
true
once
:
true
}
)
;
gBrowser
.
swapBrowsersAndCloseOther
(
ourTab
otherTab
)
;
}
;
let
swapBrowserDocShells
=
(
ourTab
otherBrowser
)
=
>
{
if
(
!
ourTab
.
linkedBrowser
.
isRemoteBrowser
|
|
!
otherBrowser
.
isRemoteBrowser
)
{
throw
new
Error
(
"
Both
browsers
should
be
remote
before
swapping
.
"
)
;
}
let
contentTabId
=
ourTab
.
linkedBrowser
.
frameLoader
.
tabParent
.
tabId
;
gBrowser
.
_swapBrowserDocShells
(
ourTab
otherBrowser
)
;
if
(
otherBrowser
.
frameLoader
.
tabParent
.
tabId
!
=
contentTabId
)
{
throw
new
Error
(
"
Swapping
tab
content
between
browsers
failed
.
"
)
;
}
}
;
return
{
async
start
(
)
{
tab
.
isResponsiveDesignMode
=
true
;
tab
.
linkedBrowser
.
style
.
visibility
=
"
hidden
"
;
freezeNavigationState
(
tab
)
;
debug
(
"
Add
blank
tool
tab
"
)
;
let
containerTab
=
addTabSilently
(
"
about
:
blank
"
{
skipAnimation
:
true
forceNotRemote
:
true
}
)
;
gBrowser
.
hideTab
(
containerTab
)
;
let
containerBrowser
=
containerTab
.
linkedBrowser
;
containerBrowser
.
messageManager
.
sendAsyncMessage
(
"
SessionStore
:
flush
"
{
epoch
:
-
1
}
)
;
debug
(
"
Load
container
URL
"
)
;
containerBrowser
.
loadURIWithFlags
(
containerURL
{
flags
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_HISTORY
}
)
;
let
stateFlags
=
gBrowser
.
_tabListeners
.
get
(
tab
)
.
mStateFlags
;
gBrowser
.
_tabListeners
.
get
(
containerTab
)
.
mStateFlags
=
stateFlags
;
debug
(
"
Set
container
docShell
active
"
)
;
containerBrowser
.
docShellIsActive
=
true
;
debug
(
"
Wait
until
container
tab
loaded
"
)
;
await
tabLoaded
(
containerTab
)
;
debug
(
"
Wait
until
inner
browser
available
"
)
;
innerBrowser
=
await
getInnerBrowser
(
containerBrowser
)
;
addXULBrowserDecorations
(
innerBrowser
)
;
if
(
innerBrowser
.
isRemoteBrowser
!
=
tab
.
linkedBrowser
.
isRemoteBrowser
)
{
throw
new
Error
(
"
The
inner
browser
'
s
remoteness
must
match
the
"
+
"
original
tab
.
"
)
;
}
dispatchDevToolsBrowserSwap
(
tab
.
linkedBrowser
innerBrowser
)
;
debug
(
"
Swap
content
to
inner
browser
"
)
;
swapBrowserDocShells
(
tab
innerBrowser
)
;
debug
(
"
Flip
original
tab
to
remote
false
"
)
;
gBrowser
.
updateBrowserRemoteness
(
tab
.
linkedBrowser
false
)
;
debug
(
"
Swap
tool
UI
to
original
tab
"
)
;
swapBrowsersAndCloseOtherSilently
(
tab
containerTab
)
;
tunnel
=
tunnelToInnerBrowser
(
tab
.
linkedBrowser
innerBrowser
)
;
debug
(
"
Wait
until
tunnel
start
"
)
;
await
tunnel
.
start
(
)
;
if
(
gBrowser
.
isFindBarInitialized
(
tab
)
)
{
let
findBar
=
gBrowser
.
getFindBar
(
tab
)
;
findBar
.
browser
=
tab
.
linkedBrowser
;
if
(
!
findBar
.
hidden
)
{
findBar
.
onFindCommand
(
)
;
}
}
thawNavigationState
(
tab
)
;
gBrowser
.
setTabTitle
(
tab
)
;
gBrowser
.
updateCurrentBrowser
(
true
)
;
tab
.
linkedBrowser
.
style
.
visibility
=
"
"
;
}
stop
(
)
{
tab
.
linkedBrowser
.
style
.
visibility
=
"
hidden
"
;
tunnel
.
stop
(
)
;
tunnel
=
null
;
let
contentTab
=
addTabSilently
(
"
about
:
blank
"
{
skipAnimation
:
true
}
)
;
gBrowser
.
hideTab
(
contentTab
)
;
let
contentBrowser
=
contentTab
.
linkedBrowser
;
contentBrowser
.
docShellIsActive
=
true
;
dispatchDevToolsBrowserSwap
(
innerBrowser
contentBrowser
)
;
swapBrowserDocShells
(
contentTab
innerBrowser
)
;
innerBrowser
=
null
;
let
stateFlags
=
gBrowser
.
_tabListeners
.
get
(
tab
)
.
mStateFlags
;
gBrowser
.
_tabListeners
.
get
(
contentTab
)
.
mStateFlags
=
stateFlags
;
gBrowser
.
updateBrowserRemoteness
(
tab
.
linkedBrowser
true
{
remoteType
:
contentBrowser
.
remoteType
}
)
;
dispatchDevToolsBrowserSwap
(
contentBrowser
tab
.
linkedBrowser
)
;
swapBrowsersAndCloseOtherSilently
(
tab
contentTab
)
;
if
(
gBrowser
.
isFindBarInitialized
(
tab
)
)
{
let
findBar
=
gBrowser
.
getFindBar
(
tab
)
;
findBar
.
browser
=
tab
.
linkedBrowser
;
if
(
!
findBar
.
hidden
)
{
findBar
.
onFindCommand
(
)
;
}
}
gBrowser
=
null
;
browserWindow
=
null
;
tab
.
linkedBrowser
.
frameLoader
.
activateRemoteFrame
(
)
;
delete
tab
.
isResponsiveDesignMode
;
tab
.
linkedBrowser
.
style
.
visibility
=
"
"
;
}
}
;
}
const
NAVIGATION_PROPERTIES
=
[
"
currentURI
"
"
contentTitle
"
"
securityUI
"
]
;
function
freezeNavigationState
(
tab
)
{
for
(
let
property
of
NAVIGATION_PROPERTIES
)
{
let
value
=
tab
.
linkedBrowser
[
property
]
;
Object
.
defineProperty
(
tab
.
linkedBrowser
property
{
get
(
)
{
return
value
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
}
function
thawNavigationState
(
tab
)
{
for
(
let
property
of
NAVIGATION_PROPERTIES
)
{
delete
tab
.
linkedBrowser
[
property
]
;
}
}
function
addXULBrowserDecorations
(
browser
)
{
if
(
browser
.
isRemoteBrowser
=
=
undefined
)
{
Object
.
defineProperty
(
browser
"
isRemoteBrowser
"
{
get
(
)
{
return
this
.
getAttribute
(
"
remote
"
)
=
=
"
true
"
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
if
(
browser
.
remoteType
=
=
undefined
)
{
Object
.
defineProperty
(
browser
"
remoteType
"
{
get
(
)
{
return
this
.
getAttribute
(
"
remoteType
"
)
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
if
(
browser
.
messageManager
=
=
undefined
)
{
Object
.
defineProperty
(
browser
"
messageManager
"
{
get
(
)
{
return
this
.
frameLoader
.
messageManager
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
if
(
browser
.
outerWindowID
=
=
undefined
)
{
Object
.
defineProperty
(
browser
"
outerWindowID
"
{
get
(
)
{
return
browser
.
_outerWindowID
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
if
(
browser
.
_remoteWebNavigationImpl
=
=
undefined
)
{
browser
.
_remoteWebNavigationImpl
=
{
swapBrowser
(
)
{
}
}
;
}
if
(
browser
.
_remoteWebProgressManager
=
=
undefined
)
{
browser
.
_remoteWebProgressManager
=
{
swapBrowser
(
)
{
}
}
;
}
}
function
tabLoaded
(
tab
)
{
return
new
Promise
(
resolve
=
>
{
function
handle
(
event
)
{
if
(
event
.
originalTarget
!
=
tab
.
linkedBrowser
.
contentDocument
|
|
event
.
target
.
location
.
href
=
=
"
about
:
blank
"
)
{
return
;
}
tab
.
linkedBrowser
.
removeEventListener
(
"
load
"
handle
true
)
;
resolve
(
event
)
;
}
tab
.
linkedBrowser
.
addEventListener
(
"
load
"
handle
true
)
;
}
)
;
}
exports
.
swapToInnerBrowser
=
swapToInnerBrowser
;
