"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
BrowserElementWebNavigation
}
=
require
(
"
.
/
web
-
navigation
"
)
;
const
{
getStack
}
=
require
(
"
devtools
/
shared
/
platform
/
stack
"
)
;
const
FRAME_LOADER
=
Symbol
(
"
devtools
/
responsive
/
frame
-
loader
"
)
;
exports
.
OUTER_FRAME_LOADER_SYMBOL
=
FRAME_LOADER
;
function
debug
(
msg
)
{
}
const
SWAPPED_BROWSER_STATE
=
[
"
_remoteFinder
"
"
_securityUI
"
"
_documentURI
"
"
_documentContentType
"
"
_contentTitle
"
"
_characterSet
"
"
_contentPrincipal
"
"
_imageDocument
"
"
_fullZoom
"
"
_textZoom
"
"
_isSyntheticDocument
"
"
_innerWindowID
"
"
_manifestURI
"
]
;
const
PROPERTIES_FROM_BROWSER_WINDOW
=
[
"
PopupNotifications
"
"
whereToOpenLink
"
]
;
function
tunnelToInnerBrowser
(
outer
inner
)
{
let
browserWindow
=
outer
.
ownerDocument
.
defaultView
;
let
gBrowser
=
browserWindow
.
gBrowser
;
let
mmTunnel
;
return
{
start
:
Task
.
async
(
function
*
(
)
{
if
(
outer
.
isRemoteBrowser
)
{
throw
new
Error
(
"
The
outer
browser
must
be
non
-
remote
.
"
)
;
}
if
(
!
inner
.
isRemoteBrowser
)
{
throw
new
Error
(
"
The
inner
browser
must
be
remote
.
"
)
;
}
outer
[
FRAME_LOADER
]
=
outer
.
frameLoader
;
Object
.
defineProperty
(
outer
"
frameLoader
"
{
get
(
)
{
let
stack
=
getStack
(
)
;
if
(
stack
.
caller
.
filename
.
endsWith
(
"
SessionStore
.
jsm
"
)
)
{
return
outer
[
FRAME_LOADER
]
;
}
return
inner
.
frameLoader
;
}
configurable
:
true
enumerable
:
true
}
)
;
Object
.
defineProperty
(
outer
"
outerWindowID
"
{
get
(
)
{
return
inner
.
outerWindowID
;
}
configurable
:
true
enumerable
:
true
}
)
;
debug
(
"
Copy
inner
permanentKey
to
outer
browser
"
)
;
outer
.
permanentKey
=
inner
.
permanentKey
;
mmTunnel
=
new
MessageManagerTunnel
(
outer
inner
)
;
outer
.
setAttribute
(
"
remote
"
"
true
"
)
;
outer
.
setAttribute
(
"
remoteType
"
inner
.
remoteType
)
;
outer
.
destroy
(
)
;
outer
.
style
.
MozBinding
=
"
url
(
chrome
:
/
/
browser
/
content
/
tabbrowser
.
xml
"
+
"
#
tabbrowser
-
remote
-
browser
)
"
;
Services
.
tm
.
spinEventLoopUntil
(
(
)
=
>
{
return
outer
.
_remoteWebNavigation
;
}
)
;
let
webNavigation
=
new
BrowserElementWebNavigation
(
inner
)
;
webNavigation
.
copyStateFrom
(
inner
.
_remoteWebNavigationImpl
)
;
outer
.
_remoteWebNavigation
=
webNavigation
;
outer
.
_remoteWebNavigationImpl
=
webNavigation
;
let
tab
=
gBrowser
.
getTabForBrowser
(
outer
)
;
let
filteredProgressListener
=
gBrowser
.
_tabFilters
.
get
(
tab
)
;
outer
.
webProgress
.
addProgressListener
(
filteredProgressListener
)
;
gBrowser
.
_tabForBrowser
.
set
(
inner
tab
)
;
for
(
let
property
of
SWAPPED_BROWSER_STATE
)
{
outer
[
property
]
=
inner
[
property
]
;
}
for
(
let
property
of
PROPERTIES_FROM_BROWSER_WINDOW
)
{
Object
.
defineProperty
(
inner
.
ownerGlobal
property
{
get
(
)
{
return
outer
.
ownerGlobal
[
property
]
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
inner
.
addEventListener
(
"
mozbrowseropenwindow
"
this
)
;
}
)
handleEvent
(
event
)
{
if
(
event
.
type
!
=
"
mozbrowseropenwindow
"
)
{
return
;
}
let
{
detail
}
=
event
;
event
.
preventDefault
(
)
;
let
uri
=
Services
.
io
.
newURI
(
detail
.
url
)
;
browserWindow
.
browserDOMWindow
.
openURI
(
uri
null
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWTAB
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEW
outer
.
contentPrincipal
)
;
}
stop
(
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
outer
)
;
let
filteredProgressListener
=
gBrowser
.
_tabFilters
.
get
(
tab
)
;
for
(
let
property
of
SWAPPED_BROWSER_STATE
)
{
inner
[
property
]
=
outer
[
property
]
;
}
gBrowser
.
_tabForBrowser
.
delete
(
inner
)
;
outer
.
webProgress
.
removeProgressListener
(
filteredProgressListener
)
;
outer
.
destroy
(
)
;
outer
.
style
.
MozBinding
=
"
"
;
outer
.
setAttribute
(
"
remote
"
"
false
"
)
;
outer
.
removeAttribute
(
"
remoteType
"
)
;
for
(
let
property
of
PROPERTIES_FROM_BROWSER_WINDOW
)
{
delete
inner
.
ownerGlobal
[
property
]
;
}
inner
.
removeEventListener
(
"
mozbrowseropenwindow
"
this
)
;
mmTunnel
.
destroy
(
)
;
mmTunnel
=
null
;
delete
outer
.
frameLoader
;
delete
outer
[
FRAME_LOADER
]
;
delete
outer
.
outerWindowID
;
outer
.
permanentKey
=
{
id
:
"
zombie
"
}
;
browserWindow
=
null
;
gBrowser
=
null
;
}
}
;
}
exports
.
tunnelToInnerBrowser
=
tunnelToInnerBrowser
;
function
MessageManagerTunnel
(
outer
inner
)
{
if
(
outer
.
isRemoteBrowser
)
{
throw
new
Error
(
"
The
outer
browser
must
be
non
-
remote
.
"
)
;
}
this
.
outer
=
outer
;
this
.
inner
=
inner
;
this
.
tunneledMessageNames
=
new
Set
(
)
;
this
.
init
(
)
;
}
MessageManagerTunnel
.
prototype
=
{
PASS_THROUGH_METHODS
:
[
"
removeDelayedFrameScript
"
"
getDelayedFrameScripts
"
"
loadProcessScript
"
"
removeDelayedProcessScript
"
"
getDelayedProcessScripts
"
"
addWeakMessageListener
"
"
removeWeakMessageListener
"
]
OVERRIDDEN_METHODS
:
[
"
loadFrameScript
"
"
addMessageListener
"
"
removeMessageListener
"
"
sendAsyncMessage
"
]
OUTER_TO_INNER_MESSAGES
:
[
"
Browser
:
PurgeSessionHistory
"
"
InPermitUnload
"
"
PermitUnload
"
"
Browser
:
Reload
"
"
Forms
:
DismissedDropDown
"
"
Forms
:
MouseOut
"
"
Forms
:
MouseOver
"
"
Forms
:
SelectDropDownItem
"
"
SessionStore
:
flush
"
]
INNER_TO_OUTER_MESSAGES
:
[
"
Content
:
LoadURIResult
"
"
Content
:
LocationChange
"
"
Content
:
ProgressChange
"
"
Content
:
SecurityChange
"
"
Content
:
StateChange
"
"
Content
:
StatusChange
"
"
DOMTitleChanged
"
"
ImageDocumentLoaded
"
"
Forms
:
ShowDropDown
"
"
Forms
:
HideDropDown
"
"
InPermitUnload
"
"
PermitUnload
"
"
contextmenu
"
"
Forms
:
UpdateDropDown
"
"
PageVisibility
:
Hide
"
"
PageVisibility
:
Show
"
"
SessionStore
:
update
"
"
browser
-
test
-
utils
:
loadEvent
"
]
OUTER_TO_INNER_MESSAGE_PREFIXES
:
[
"
ContextMenu
:
"
"
debug
:
"
"
Findbar
:
"
"
Finder
:
"
"
InlineSpellChecker
:
"
"
PageInfo
:
"
"
Printing
:
"
"
Social
:
"
"
PageMetadata
:
"
"
ViewSource
:
"
]
INNER_TO_OUTER_MESSAGE_PREFIXES
:
[
"
ContextMenu
:
"
"
debug
:
"
"
Findbar
:
"
"
Finder
:
"
"
PageInfo
:
"
"
Printing
:
"
"
Social
:
"
"
PageMetadata
:
"
"
ViewSource
:
"
]
OUTER_TO_INNER_FRAME_SCRIPTS
:
[
"
resource
:
/
/
devtools
/
server
/
child
.
js
"
]
get
outerParentMM
(
)
{
if
(
!
this
.
outer
[
FRAME_LOADER
]
)
{
return
null
;
}
return
this
.
outer
[
FRAME_LOADER
]
.
messageManager
;
}
get
outerChildMM
(
)
{
let
docShell
=
this
.
outer
[
FRAME_LOADER
]
.
docShell
;
return
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIContentFrameMessageManager
)
;
}
get
innerParentMM
(
)
{
if
(
!
this
.
inner
.
frameLoader
)
{
return
null
;
}
return
this
.
inner
.
frameLoader
.
messageManager
;
}
init
(
)
{
for
(
let
method
of
this
.
PASS_THROUGH_METHODS
)
{
this
[
method
]
=
(
.
.
.
args
)
=
>
{
if
(
!
this
.
outerParentMM
)
{
return
null
;
}
return
this
.
outerParentMM
[
method
]
(
.
.
.
args
)
;
}
;
}
for
(
let
name
of
this
.
INNER_TO_OUTER_MESSAGES
)
{
this
.
innerParentMM
.
addMessageListener
(
name
this
)
;
this
.
tunneledMessageNames
.
add
(
name
)
;
}
Services
.
obs
.
addObserver
(
this
"
message
-
manager
-
close
"
)
;
Object
.
defineProperty
(
this
.
outer
"
messageManager
"
{
value
:
this
writable
:
false
configurable
:
true
enumerable
:
true
}
)
;
}
destroy
(
)
{
if
(
this
.
destroyed
)
{
return
;
}
this
.
destroyed
=
true
;
debug
(
"
Destroy
tunnel
"
)
;
Services
.
obs
.
removeObserver
(
this
"
message
-
manager
-
close
"
)
;
delete
this
.
outer
.
messageManager
;
for
(
let
name
of
this
.
tunneledMessageNames
)
{
this
.
innerParentMM
.
removeMessageListener
(
name
this
)
;
}
for
(
let
method
of
this
.
OVERRIDDEN_METHODS
)
{
this
[
method
]
=
(
.
.
.
args
)
=
>
{
if
(
!
this
.
outerParentMM
)
{
return
null
;
}
return
this
.
outerParentMM
[
method
]
(
.
.
.
args
)
;
}
;
}
}
observe
(
subject
topic
data
)
{
if
(
topic
!
=
"
message
-
manager
-
close
"
)
{
return
;
}
if
(
subject
=
=
this
.
innerParentMM
)
{
debug
(
"
Inner
messageManager
has
closed
"
)
;
this
.
destroy
(
)
;
}
if
(
subject
=
=
this
.
outerParentMM
)
{
debug
(
"
Outer
messageManager
has
closed
"
)
;
this
.
destroy
(
)
;
}
}
loadFrameScript
(
url
.
.
.
args
)
{
debug
(
Calling
loadFrameScript
for
{
url
}
)
;
if
(
!
this
.
OUTER_TO_INNER_FRAME_SCRIPTS
.
includes
(
url
)
)
{
debug
(
Should
load
{
url
}
into
inner
?
)
;
this
.
outerParentMM
.
loadFrameScript
(
url
.
.
.
args
)
;
return
;
}
debug
(
Load
{
url
}
into
inner
)
;
this
.
innerParentMM
.
loadFrameScript
(
url
.
.
.
args
)
;
}
addMessageListener
(
name
.
.
.
args
)
{
debug
(
Calling
addMessageListener
for
{
name
}
)
;
debug
(
Add
outer
listener
for
{
name
}
)
;
this
.
outerParentMM
.
addMessageListener
(
name
.
.
.
args
)
;
if
(
this
.
INNER_TO_OUTER_MESSAGE_PREFIXES
.
some
(
prefix
=
>
name
.
startsWith
(
prefix
)
)
)
{
debug
(
Add
inner
listener
for
{
name
}
)
;
this
.
innerParentMM
.
addMessageListener
(
name
this
)
;
this
.
tunneledMessageNames
.
add
(
name
)
;
}
}
removeMessageListener
(
name
.
.
.
args
)
{
debug
(
Calling
removeMessageListener
for
{
name
}
)
;
debug
(
Remove
outer
listener
for
{
name
}
)
;
this
.
outerParentMM
.
removeMessageListener
(
name
.
.
.
args
)
;
}
sendAsyncMessage
(
name
.
.
.
args
)
{
debug
(
Calling
sendAsyncMessage
for
{
name
}
)
;
if
(
!
this
.
_shouldTunnelOuterToInner
(
name
)
)
{
debug
(
Should
{
name
}
go
to
inner
?
)
;
this
.
outerParentMM
.
sendAsyncMessage
(
name
.
.
.
args
)
;
return
;
}
debug
(
{
name
}
outer
-
>
inner
)
;
this
.
innerParentMM
.
sendAsyncMessage
(
name
.
.
.
args
)
;
}
receiveMessage
(
{
name
data
objects
principal
sync
}
)
{
if
(
!
this
.
_shouldTunnelInnerToOuter
(
name
)
)
{
debug
(
Received
unexpected
message
{
name
}
)
;
return
undefined
;
}
debug
(
{
name
}
inner
-
>
outer
sync
:
{
sync
}
)
;
if
(
sync
)
{
return
this
.
outerChildMM
.
sendSyncMessage
(
name
data
objects
principal
)
;
}
this
.
outerChildMM
.
sendAsyncMessage
(
name
data
objects
principal
)
;
return
undefined
;
}
_shouldTunnelOuterToInner
(
name
)
{
return
this
.
OUTER_TO_INNER_MESSAGES
.
includes
(
name
)
|
|
this
.
OUTER_TO_INNER_MESSAGE_PREFIXES
.
some
(
prefix
=
>
name
.
startsWith
(
prefix
)
)
;
}
_shouldTunnelInnerToOuter
(
name
)
{
return
this
.
INNER_TO_OUTER_MESSAGES
.
includes
(
name
)
|
|
this
.
INNER_TO_OUTER_MESSAGE_PREFIXES
.
some
(
prefix
=
>
name
.
startsWith
(
prefix
)
)
;
}
}
;
