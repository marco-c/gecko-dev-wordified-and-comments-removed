"
use
strict
"
;
const
throttlingProfiles
=
require
(
"
devtools
/
client
/
shared
/
network
-
throttling
-
profiles
"
)
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
Network
throttling
test
"
;
addRDMTask
(
TEST_URL
function
*
(
{
ui
manager
}
)
{
let
{
store
}
=
ui
.
toolWindow
;
yield
waitUntilState
(
store
state
=
>
state
.
viewports
.
length
=
=
1
)
;
testNetworkThrottlingSelectorLabel
(
ui
"
No
throttling
"
)
;
yield
testNetworkThrottlingState
(
ui
null
)
;
yield
testThrottlingProfile
(
ui
"
Wi
-
Fi
"
)
;
yield
testThrottlingProfile
(
ui
"
Regular
3G
"
)
;
let
changed
=
once
(
ui
"
network
-
throttling
-
changed
"
)
;
yield
switchNetworkThrottling
(
ui
"
No
throttling
"
)
;
yield
changed
;
testNetworkThrottlingSelectorLabel
(
ui
"
No
throttling
"
)
;
yield
testNetworkThrottlingState
(
ui
null
)
;
}
)
;
function
testNetworkThrottlingSelectorLabel
(
ui
expected
)
{
let
selector
=
"
#
global
-
network
-
throttling
-
selector
"
;
let
select
=
ui
.
toolWindow
.
document
.
querySelector
(
selector
)
;
is
(
select
.
selectedOptions
[
0
]
.
textContent
expected
Select
label
should
be
changed
to
{
expected
}
)
;
}
var
testNetworkThrottlingState
=
Task
.
async
(
function
*
(
ui
expected
)
{
let
state
=
yield
ui
.
emulationFront
.
getNetworkThrottling
(
)
;
Assert
.
deepEqual
(
state
expected
"
Network
throttling
state
should
be
"
+
JSON
.
stringify
(
expected
null
2
)
)
;
}
)
;
var
testThrottlingProfile
=
Task
.
async
(
function
*
(
ui
profile
)
{
let
changed
=
once
(
ui
"
network
-
throttling
-
changed
"
)
;
yield
switchNetworkThrottling
(
ui
profile
)
;
yield
changed
;
testNetworkThrottlingSelectorLabel
(
ui
profile
)
;
let
data
=
throttlingProfiles
.
find
(
(
{
id
}
)
=
>
id
=
=
profile
)
;
let
{
download
upload
latency
}
=
data
;
yield
testNetworkThrottlingState
(
ui
{
downloadThroughput
:
download
uploadThroughput
:
upload
latency
}
)
;
}
)
;
