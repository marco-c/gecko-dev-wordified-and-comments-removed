"
use
strict
"
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
;
addRDMTask
(
TEST_URL
async
function
(
.
.
.
args
)
{
await
testExitButton
(
.
.
.
args
)
;
}
)
;
add_task
(
async
function
(
)
{
let
tab
=
await
addTab
(
TEST_URL
)
;
const
{
ui
manager
}
=
await
openRDM
(
tab
)
;
await
waitBootstrap
(
ui
)
;
const
waitTabIsDetached
=
Promise
.
all
(
[
once
(
tab
"
TabClose
"
)
once
(
tab
.
linkedBrowser
"
SwapDocShells
"
)
]
)
;
const
newWindow
=
gBrowser
.
replaceTabWithWindow
(
tab
)
;
await
waitTabIsDetached
;
await
newWindow
.
delayedStartupPromise
;
tab
=
newWindow
.
gBrowser
.
tabs
[
0
]
;
ok
(
!
manager
.
isActiveForTab
(
tab
)
"
Responsive
Design
Mode
is
not
active
for
the
tab
"
)
;
await
testExitButton
(
await
openRDM
(
tab
)
)
;
await
BrowserTestUtils
.
closeWindow
(
newWindow
)
;
}
)
;
async
function
waitBootstrap
(
ui
)
{
const
{
toolWindow
tab
}
=
ui
;
const
{
store
}
=
toolWindow
;
const
url
=
String
(
tab
.
linkedBrowser
.
currentURI
.
spec
)
;
await
waitUntilState
(
store
state
=
>
state
.
viewports
.
length
=
=
1
)
;
await
waitForFrameLoad
(
ui
url
)
;
}
async
function
testExitButton
(
{
ui
manager
}
)
{
await
waitBootstrap
(
ui
)
;
const
exitButton
=
ui
.
toolWindow
.
document
.
getElementById
(
"
global
-
exit
-
button
"
)
;
ok
(
manager
.
isActiveForTab
(
ui
.
tab
)
"
Responsive
Design
Mode
active
for
the
tab
"
)
;
exitButton
.
click
(
)
;
await
once
(
manager
"
off
"
)
;
ok
(
!
manager
.
isActiveForTab
(
ui
.
tab
)
"
Responsive
Design
Mode
is
not
active
for
the
tab
"
)
;
}
