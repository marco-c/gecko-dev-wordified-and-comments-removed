"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
shared
-
redux
-
head
.
js
"
this
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
responsive
.
html
.
enabled
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
responsive
.
html
.
enabled
"
)
;
}
)
;
var
openRDM
=
Task
.
async
(
function
*
(
tab
)
{
info
(
"
Opening
responsive
design
mode
"
)
;
let
manager
=
ResponsiveUI
.
ResponsiveUIManager
;
let
ui
=
yield
manager
.
openIfNeeded
(
window
tab
)
;
info
(
"
Responsive
design
mode
opened
"
)
;
return
{
ui
manager
}
;
}
)
;
var
closeRDM
=
Task
.
async
(
function
*
(
tab
)
{
info
(
"
Closing
responsive
design
mode
"
)
;
let
manager
=
ResponsiveUI
.
ResponsiveUIManager
;
manager
.
closeIfNeeded
(
window
tab
)
;
info
(
"
Responsive
design
mode
closed
"
)
;
}
)
;
function
addRDMTask
(
url
generator
)
{
add_task
(
function
*
(
)
{
const
tab
=
yield
addTab
(
url
)
;
const
results
=
yield
openRDM
(
tab
)
;
try
{
yield
*
generator
(
results
)
;
}
catch
(
err
)
{
ok
(
false
"
Got
an
error
:
"
+
DevToolsUtils
.
safeErrorString
(
err
)
)
;
}
yield
closeRDM
(
tab
)
;
yield
removeTab
(
tab
)
;
}
)
;
}
var
waitForFrameLoad
=
Task
.
async
(
function
*
(
frame
targetURL
)
{
let
window
=
frame
.
contentWindow
;
if
(
(
window
.
document
.
readyState
=
=
"
complete
"
|
|
window
.
document
.
readyState
=
=
"
interactive
"
)
&
&
window
.
location
.
href
=
=
targetURL
)
{
return
;
}
yield
once
(
frame
"
load
"
)
;
}
)
;
