"
use
strict
"
;
const
TEST_URL
=
"
http
:
/
/
example
.
com
/
"
;
const
CONTAINER_URL
=
"
chrome
:
/
/
devtools
/
content
/
responsive
.
html
/
index
.
xhtml
"
;
const
{
TabStateFlusher
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
TabStateFlusher
.
jsm
"
{
}
)
;
const
{
OUTER_FRAME_LOADER_SYMBOL
}
=
require
(
"
devtools
/
client
/
responsive
.
html
/
browser
/
tunnel
"
)
;
function
flushContainerTabState
(
tab
)
{
const
browser
=
tab
.
linkedBrowser
;
const
outerBrowser
=
{
permanentKey
:
browser
.
permanentKey
messageManager
:
browser
[
OUTER_FRAME_LOADER_SYMBOL
]
.
messageManager
}
;
return
new
Promise
(
resolve
=
>
{
TabStateFlusher
.
flush
(
outerBrowser
)
.
then
(
resolve
)
;
waitForTime
(
10000
)
.
then
(
resolve
)
;
}
)
;
}
add_task
(
async
function
(
)
{
const
tab
=
await
addTab
(
TEST_URL
)
;
const
browser
=
tab
.
linkedBrowser
;
let
history
=
await
getSessionHistory
(
browser
)
;
is
(
history
.
index
-
1
0
"
At
page
0
in
history
"
)
;
is
(
history
.
entries
.
length
1
"
1
page
in
history
"
)
;
is
(
history
.
entries
[
0
]
.
url
TEST_URL
"
Page
0
URL
matches
"
)
;
await
openRDM
(
tab
)
;
history
=
await
getSessionHistory
(
browser
)
;
is
(
history
.
index
-
1
0
"
At
page
0
in
history
"
)
;
is
(
history
.
entries
.
length
1
"
1
page
in
history
"
)
;
is
(
history
.
entries
[
0
]
.
url
CONTAINER_URL
"
Page
0
URL
matches
"
)
;
await
flushContainerTabState
(
tab
)
;
const
tabState
=
JSON
.
parse
(
SessionStore
.
getTabState
(
tab
)
)
;
is
(
tabState
.
index
-
1
0
"
At
page
0
in
history
"
)
;
is
(
tabState
.
entries
.
length
1
"
1
page
in
history
"
)
;
is
(
tabState
.
entries
[
0
]
.
url
TEST_URL
"
Page
0
URL
matches
"
)
;
await
closeRDM
(
tab
)
;
await
removeTab
(
tab
)
;
}
)
;
