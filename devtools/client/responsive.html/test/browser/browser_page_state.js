"
use
strict
"
;
const
DUMMY_1_URL
=
"
http
:
/
/
example
.
com
/
"
;
const
TEST_URL
=
{
URL_ROOT
}
doc_page_state
.
html
;
const
DUMMY_2_URL
=
"
http
:
/
/
example
.
com
/
browser
/
"
;
add_task
(
function
*
(
)
{
let
tab
=
yield
addTab
(
DUMMY_1_URL
)
;
let
browser
=
tab
.
linkedBrowser
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_URL
)
;
browser
.
loadURI
(
TEST_URL
null
null
)
;
yield
loaded
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
DUMMY_2_URL
)
;
browser
.
loadURI
(
DUMMY_2_URL
null
null
)
;
yield
loaded
;
let
history
=
yield
getSessionHistory
(
browser
)
;
is
(
history
.
index
2
"
At
page
2
in
history
"
)
;
is
(
history
.
entries
.
length
3
"
3
pages
in
history
"
)
;
is
(
history
.
entries
[
0
]
.
uri
DUMMY_1_URL
"
Page
0
URL
matches
"
)
;
is
(
history
.
entries
[
1
]
.
uri
TEST_URL
"
Page
1
URL
matches
"
)
;
is
(
history
.
entries
[
2
]
.
uri
DUMMY_2_URL
"
Page
2
URL
matches
"
)
;
let
shown
=
waitForPageShow
(
browser
)
;
browser
.
goBack
(
)
;
yield
shown
;
history
=
yield
getSessionHistory
(
browser
)
;
is
(
history
.
index
1
"
At
page
1
in
history
"
)
;
is
(
history
.
entries
.
length
3
"
3
pages
in
history
"
)
;
is
(
history
.
entries
[
0
]
.
uri
DUMMY_1_URL
"
Page
0
URL
matches
"
)
;
is
(
history
.
entries
[
1
]
.
uri
TEST_URL
"
Page
1
URL
matches
"
)
;
is
(
history
.
entries
[
2
]
.
uri
DUMMY_2_URL
"
Page
2
URL
matches
"
)
;
yield
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
body
"
{
}
browser
)
;
let
{
ui
}
=
yield
openRDM
(
tab
)
;
let
color
=
yield
spawnViewportTask
(
ui
{
}
function
*
(
)
{
return
content
.
getComputedStyle
(
content
.
document
.
body
)
.
getPropertyValue
(
"
background
-
color
"
)
;
}
)
;
is
(
color
"
rgb
(
0
128
0
)
"
"
Content
is
still
modified
from
click
in
viewport
"
)
;
yield
closeRDM
(
tab
)
;
color
=
yield
ContentTask
.
spawn
(
browser
{
}
function
*
(
)
{
return
content
.
getComputedStyle
(
content
.
document
.
body
)
.
getPropertyValue
(
"
background
-
color
"
)
;
}
)
;
is
(
color
"
rgb
(
0
128
0
)
"
"
Content
is
still
modified
from
click
in
browser
tab
"
)
;
history
=
yield
getSessionHistory
(
browser
)
;
is
(
history
.
index
1
"
At
page
1
in
history
"
)
;
is
(
history
.
entries
.
length
3
"
3
pages
in
history
"
)
;
is
(
history
.
entries
[
0
]
.
uri
DUMMY_1_URL
"
Page
0
URL
matches
"
)
;
is
(
history
.
entries
[
1
]
.
uri
TEST_URL
"
Page
1
URL
matches
"
)
;
is
(
history
.
entries
[
2
]
.
uri
DUMMY_2_URL
"
Page
2
URL
matches
"
)
;
yield
removeTab
(
tab
)
;
}
)
;
function
getSessionHistory
(
browser
)
{
return
ContentTask
.
spawn
(
browser
{
}
function
*
(
)
{
let
{
interfaces
:
Ci
}
=
Components
;
let
webNav
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
let
sessionHistory
=
webNav
.
sessionHistory
;
let
result
=
{
index
:
sessionHistory
.
index
entries
:
[
]
}
;
for
(
let
i
=
0
;
i
<
sessionHistory
.
count
;
i
+
+
)
{
let
entry
=
sessionHistory
.
getEntryAtIndex
(
i
false
)
;
result
.
entries
.
push
(
{
uri
:
entry
.
URI
.
spec
title
:
entry
.
title
}
)
;
}
return
result
;
}
)
;
}
function
waitForPageShow
(
browser
)
{
let
mm
=
browser
.
messageManager
;
return
new
Promise
(
resolve
=
>
{
let
onShow
=
message
=
>
{
if
(
message
.
target
!
=
browser
)
{
return
;
}
mm
.
removeMessageListener
(
"
PageVisibility
:
Show
"
onShow
)
;
resolve
(
)
;
}
;
mm
.
addMessageListener
(
"
PageVisibility
:
Show
"
onShow
)
;
}
)
;
}
