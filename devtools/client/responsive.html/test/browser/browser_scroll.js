"
use
strict
"
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
"
<
div
style
=
\
"
background
:
blue
;
width
:
200px
;
height
:
200px
\
"
>
<
/
div
>
"
;
addRDMTask
(
TEST_URL
async
function
(
{
ui
manager
}
)
{
info
(
"
Turning
off
keyboard
APZ
for
this
test
.
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
apz
.
keyboard
.
enabled
"
false
]
]
}
)
;
await
setViewportSize
(
ui
manager
100
100
)
;
const
browser
=
ui
.
getViewportBrowser
(
)
;
info
(
"
Setting
focus
on
the
browser
.
"
)
;
browser
.
focus
(
)
;
info
(
"
Testing
scroll
behavior
with
touch
simulation
OFF
.
"
)
;
await
testScrollingOfContent
(
ui
)
;
const
reloadNeeded
=
await
ui
.
updateTouchSimulation
(
true
)
;
if
(
reloadNeeded
)
{
info
(
"
Reload
is
needed
-
-
waiting
for
it
.
"
)
;
const
reload
=
waitForViewportLoad
(
ui
)
;
browser
.
reload
(
)
;
await
reload
;
await
ContentTask
.
spawn
(
browser
null
(
)
=
>
{
content
.
scrollTo
(
0
0
)
;
}
)
;
}
info
(
"
Testing
scroll
behavior
with
touch
simulation
ON
.
"
)
;
await
testScrollingOfContent
(
ui
)
;
}
)
;
async
function
testScrollingOfContent
(
ui
)
{
let
scroll
;
info
(
"
Checking
initial
scroll
conditions
.
"
)
;
const
viewportScroll
=
await
getViewportScroll
(
ui
)
;
is
(
viewportScroll
.
x
0
"
Content
should
load
with
scrollX
0
.
"
)
;
is
(
viewportScroll
.
y
0
"
Content
should
load
with
scrollY
0
.
"
)
;
scroll
=
waitForViewportScroll
(
ui
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
await
scroll
;
info
(
"
Scroll
event
was
fired
after
arrow
key
down
.
"
)
;
scroll
=
waitForViewportScroll
(
ui
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowRight
"
)
;
await
scroll
;
info
(
"
Scroll
event
was
fired
after
arrow
key
right
.
"
)
;
}
