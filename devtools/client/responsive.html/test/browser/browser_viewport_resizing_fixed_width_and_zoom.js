"
use
strict
"
;
async
function
setTouchAndMetaViewportSupport
(
ui
value
)
{
const
reloadNeeded
=
await
ui
.
updateTouchSimulation
(
value
)
;
if
(
reloadNeeded
)
{
info
(
"
Reload
is
needed
-
-
waiting
for
it
.
"
)
;
const
reload
=
waitForViewportLoad
(
ui
)
;
const
browser
=
ui
.
getViewportBrowser
(
)
;
browser
.
reload
(
)
;
await
reload
;
}
}
async
function
testViewportZoomWidthAndHeight
(
message
ui
zoom
width
height
)
{
const
resolution
=
await
spawnViewportTask
(
ui
{
}
function
(
)
{
return
content
.
windowUtils
.
getResolution
(
)
;
}
)
;
is
(
resolution
zoom
message
+
"
should
have
expected
zoom
.
"
)
;
const
layoutSize
=
await
spawnViewportTask
(
ui
{
}
function
(
)
{
return
{
width
:
content
.
screen
.
width
height
:
content
.
screen
.
height
}
;
}
)
;
is
(
layoutSize
.
width
width
message
+
"
should
have
expected
layout
width
.
"
)
;
is
(
layoutSize
.
height
height
message
+
"
should
have
expected
layout
height
.
"
)
;
}
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
"
<
head
>
<
meta
name
=
\
"
viewport
\
"
content
=
\
"
width
=
device
-
width
"
+
"
initial
-
scale
=
1
.
0
minimum
-
scale
=
1
.
0
maximum
-
scale
=
1
.
0
\
"
>
<
/
head
>
"
+
"
<
body
>
meta
viewport
scaled
locked
at
1
.
0
<
/
body
>
"
;
addRDMTask
(
TEST_URL
async
function
(
{
ui
manager
}
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
devtools
.
responsive
.
metaViewport
.
enabled
"
true
]
]
}
)
;
const
store
=
ui
.
toolWindow
.
store
;
await
waitUntilState
(
store
state
=
>
state
.
viewports
.
length
=
=
1
)
;
info
(
"
-
-
-
Starting
viewport
test
output
-
-
-
"
)
;
const
expected
=
[
{
metaSupport
:
false
before
:
{
zoom
:
1
.
0
width
:
300
height
:
600
}
after
:
{
zoom
:
1
.
0
width
:
600
height
:
300
}
}
{
metaSupport
:
true
before
:
{
zoom
:
1
.
0
width
:
300
height
:
600
}
after
:
{
zoom
:
1
.
0
width
:
600
height
:
300
}
}
]
;
for
(
const
e
of
expected
)
{
const
b
=
e
.
before
;
const
a
=
e
.
after
;
const
message
=
"
Meta
Viewport
"
+
(
e
.
metaSupport
?
"
ON
"
:
"
OFF
"
)
;
info
(
message
+
"
setting
meta
viewport
support
.
"
)
;
await
setTouchAndMetaViewportSupport
(
ui
e
.
metaSupport
)
;
await
setViewportSize
(
ui
manager
300
600
)
;
await
testViewportZoomWidthAndHeight
(
message
+
"
before
resize
"
ui
b
.
zoom
b
.
width
b
.
height
)
;
await
setViewportSize
(
ui
manager
600
300
)
;
await
testViewportZoomWidthAndHeight
(
message
+
"
after
resize
"
ui
a
.
zoom
a
.
width
a
.
height
)
;
await
setViewportSize
(
ui
manager
300
600
)
;
await
testViewportZoomWidthAndHeight
(
message
+
"
return
to
initial
size
"
ui
b
.
zoom
b
.
width
b
.
height
)
;
}
}
)
;
