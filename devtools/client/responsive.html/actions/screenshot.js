"
use
strict
"
;
const
{
TAKE_SCREENSHOT_START
TAKE_SCREENSHOT_END
}
=
require
(
"
.
/
index
"
)
;
const
{
getFormatStr
}
=
require
(
"
.
.
/
utils
/
l10n
"
)
;
const
{
getToplevelWindow
}
=
require
(
"
sdk
/
window
/
utils
"
)
;
const
{
Task
:
{
spawn
}
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
e10s
=
require
(
"
.
.
/
utils
/
e10s
"
)
;
const
audioCamera
=
new
window
.
Audio
(
"
resource
:
/
/
devtools
/
client
/
themes
/
audio
/
shutter
.
wav
"
)
;
const
animationFrame
=
(
)
=
>
new
Promise
(
resolve
=
>
{
window
.
requestAnimationFrame
(
resolve
)
;
}
)
;
function
getFileName
(
)
{
let
date
=
new
Date
(
)
;
let
month
=
(
"
0
"
+
(
date
.
getMonth
(
)
+
1
)
)
.
substr
(
-
2
)
;
let
day
=
(
"
0
"
+
date
.
getDate
(
)
)
.
substr
(
-
2
)
;
let
dateString
=
[
date
.
getFullYear
(
)
month
day
]
.
join
(
"
-
"
)
;
let
timeString
=
date
.
toTimeString
(
)
.
replace
(
/
:
/
g
"
.
"
)
.
split
(
"
"
)
[
0
]
;
return
getFormatStr
(
"
responsive
.
screenshotGeneratedFilename
"
dateString
timeString
)
;
}
function
createScreenshotFor
(
node
)
{
let
mm
=
node
.
frameLoader
.
messageManager
;
return
e10s
.
request
(
mm
"
RequestScreenshot
"
)
;
}
function
saveToFile
(
data
filename
)
{
return
spawn
(
function
*
(
)
{
const
chromeWindow
=
getToplevelWindow
(
window
)
;
const
chromeDocument
=
chromeWindow
.
document
;
filename
=
filename
.
replace
(
/
\
.
png
|
/
i
"
.
png
"
)
;
chromeWindow
.
saveURL
(
data
filename
null
true
true
chromeDocument
.
documentURIObject
chromeDocument
)
;
}
)
;
}
function
simulateCameraEffects
(
node
)
{
audioCamera
.
play
(
)
;
node
.
animate
(
{
opacity
:
[
0
1
]
}
500
)
;
}
module
.
exports
=
{
takeScreenshot
(
)
{
return
function
*
(
dispatch
getState
)
{
yield
dispatch
(
{
type
:
TAKE_SCREENSHOT_START
}
)
;
yield
animationFrame
(
)
;
let
iframe
=
document
.
querySelector
(
"
iframe
"
)
;
let
data
=
yield
createScreenshotFor
(
iframe
)
;
simulateCameraEffects
(
iframe
)
;
yield
saveToFile
(
data
getFileName
(
)
)
;
dispatch
(
{
type
:
TAKE_SCREENSHOT_END
}
)
;
}
;
}
}
;
