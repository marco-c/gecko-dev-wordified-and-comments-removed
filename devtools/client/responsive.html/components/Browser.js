"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
flags
=
require
(
"
devtools
/
shared
/
flags
"
)
;
const
{
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
e10s
=
require
(
"
.
.
/
utils
/
e10s
"
)
;
const
message
=
require
(
"
.
.
/
utils
/
message
"
)
;
const
{
getToplevelWindow
}
=
require
(
"
.
.
/
utils
/
window
"
)
;
const
FRAME_SCRIPT
=
"
resource
:
/
/
devtools
/
client
/
responsive
.
html
/
browser
/
content
.
js
"
;
class
Browser
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
swapAfterMount
:
PropTypes
.
bool
.
isRequired
onBrowserMounted
:
PropTypes
.
func
.
isRequired
onContentResize
:
PropTypes
.
func
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
onContentResize
=
this
.
onContentResize
.
bind
(
this
)
;
}
componentWillMount
(
)
{
this
.
browserShown
=
new
Promise
(
resolve
=
>
{
let
handler
=
frameLoader
=
>
{
let
browser
=
this
.
refs
.
browserContainer
.
querySelector
(
"
iframe
.
browser
"
)
;
if
(
frameLoader
.
ownerElement
!
=
browser
)
{
return
;
}
Services
.
obs
.
removeObserver
(
handler
"
remote
-
browser
-
shown
"
)
;
resolve
(
)
;
}
;
Services
.
obs
.
addObserver
(
handler
"
remote
-
browser
-
shown
"
)
;
}
)
;
}
async
componentDidMount
(
)
{
if
(
!
this
.
props
.
swapAfterMount
)
{
await
this
.
startFrameScript
(
)
;
}
await
this
.
browserShown
;
this
.
props
.
onBrowserMounted
(
)
;
if
(
this
.
props
.
swapAfterMount
)
{
await
message
.
wait
(
window
"
start
-
frame
-
script
"
)
;
await
this
.
startFrameScript
(
)
;
message
.
post
(
window
"
start
-
frame
-
script
:
done
"
)
;
}
message
.
wait
(
window
"
stop
-
frame
-
script
"
)
.
then
(
(
)
=
>
{
this
.
stopFrameScript
(
)
;
}
)
;
}
onContentResize
(
msg
)
{
let
{
onContentResize
}
=
this
.
props
;
let
{
width
height
}
=
msg
.
data
;
onContentResize
(
{
width
height
}
)
;
}
async
startFrameScript
(
)
{
let
{
onContentResize
}
=
this
;
let
browser
=
this
.
refs
.
browserContainer
.
querySelector
(
"
iframe
.
browser
"
)
;
let
mm
=
browser
.
frameLoader
.
messageManager
;
e10s
.
on
(
mm
"
OnContentResize
"
onContentResize
)
;
let
ready
=
e10s
.
once
(
mm
"
ChildScriptReady
"
)
;
mm
.
loadFrameScript
(
FRAME_SCRIPT
true
)
;
await
ready
;
let
browserWindow
=
getToplevelWindow
(
window
)
;
let
requiresFloatingScrollbars
=
!
browserWindow
.
matchMedia
(
"
(
-
moz
-
overlay
-
scrollbars
)
"
)
.
matches
;
await
e10s
.
request
(
mm
"
Start
"
{
requiresFloatingScrollbars
notifyOnResize
:
flags
.
testing
}
)
;
}
async
stopFrameScript
(
)
{
let
{
onContentResize
}
=
this
;
let
browser
=
this
.
refs
.
browserContainer
.
querySelector
(
"
iframe
.
browser
"
)
;
let
mm
=
browser
.
frameLoader
.
messageManager
;
e10s
.
off
(
mm
"
OnContentResize
"
onContentResize
)
;
await
e10s
.
request
(
mm
"
Stop
"
)
;
message
.
post
(
window
"
stop
-
frame
-
script
:
done
"
)
;
}
render
(
)
{
return
dom
.
div
(
{
ref
:
"
browserContainer
"
className
:
"
browser
-
container
"
}
dom
.
iframe
(
{
allowFullScreen
:
"
true
"
className
:
"
browser
"
height
:
"
100
%
"
mozbrowser
:
"
true
"
noisolation
:
"
true
"
remote
:
"
true
"
remotetype
:
"
web
"
src
:
"
about
:
blank
"
width
:
"
100
%
"
}
)
)
;
}
}
module
.
exports
=
Browser
;
