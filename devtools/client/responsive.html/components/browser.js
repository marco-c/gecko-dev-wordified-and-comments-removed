"
use
strict
"
;
const
{
Task
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
getToplevelWindow
}
=
require
(
"
sdk
/
window
/
utils
"
)
;
const
{
DOM
:
dom
createClass
addons
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
Types
=
require
(
"
.
.
/
types
"
)
;
const
{
waitForMessage
}
=
require
(
"
.
.
/
utils
/
e10s
"
)
;
module
.
exports
=
createClass
(
{
displayName
:
"
Browser
"
mixins
:
[
addons
.
PureRenderMixin
]
propTypes
:
{
location
:
Types
.
location
.
isRequired
onBrowserMounted
:
PropTypes
.
func
.
isRequired
onContentResize
:
PropTypes
.
func
.
isRequired
}
componentDidMount
:
Task
.
async
(
function
*
(
)
{
let
{
onContentResize
}
=
this
;
let
browser
=
this
.
refs
.
browserContainer
.
querySelector
(
"
iframe
.
browser
"
)
;
let
mm
=
browser
.
frameLoader
.
messageManager
;
mm
.
addMessageListener
(
"
ResponsiveMode
:
OnContentResize
"
onContentResize
)
;
let
ready
=
waitForMessage
(
mm
"
ResponsiveMode
:
ChildScriptReady
"
)
;
mm
.
loadFrameScript
(
"
resource
:
/
/
devtools
/
client
/
responsivedesign
/
"
+
"
responsivedesign
-
child
.
js
"
true
)
;
yield
ready
;
let
browserWindow
=
getToplevelWindow
(
window
)
;
let
requiresFloatingScrollbars
=
!
browserWindow
.
matchMedia
(
"
(
-
moz
-
overlay
-
scrollbars
)
"
)
.
matches
;
let
started
=
waitForMessage
(
mm
"
ResponsiveMode
:
Start
:
Done
"
)
;
mm
.
sendAsyncMessage
(
"
ResponsiveMode
:
Start
"
{
requiresFloatingScrollbars
notifyOnResize
:
DevToolsUtils
.
testing
}
)
;
yield
started
;
this
.
props
.
onBrowserMounted
(
)
;
}
)
componentWillUnmount
(
)
{
let
{
onContentResize
}
=
this
;
let
browser
=
this
.
refs
.
browserContainer
.
querySelector
(
"
iframe
.
browser
"
)
;
let
mm
=
browser
.
frameLoader
.
messageManager
;
mm
.
removeMessageListener
(
"
ResponsiveMode
:
OnContentResize
"
onContentResize
)
;
mm
.
sendAsyncMessage
(
"
ResponsiveMode
:
Stop
"
)
;
}
onContentResize
(
msg
)
{
let
{
onContentResize
}
=
this
.
props
;
let
{
width
height
}
=
msg
.
data
;
onContentResize
(
{
width
height
}
)
;
}
render
(
)
{
let
{
location
}
=
this
.
props
;
location
=
location
.
replace
(
/
&
/
g
"
&
amp
;
"
)
;
return
dom
.
div
(
{
ref
:
"
browserContainer
"
className
:
"
browser
-
container
"
dangerouslySetInnerHTML
:
{
__html
:
<
iframe
class
=
"
browser
"
mozbrowser
=
"
true
"
remote
=
"
true
"
noisolation
=
"
true
"
src
=
"
{
location
}
"
width
=
"
100
%
"
height
=
"
100
%
"
>
<
/
iframe
>
}
}
)
;
}
}
)
;
