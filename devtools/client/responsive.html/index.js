"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
const
{
BrowserLoader
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
{
}
)
;
const
{
require
}
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
responsive
.
html
/
"
window
:
this
}
)
;
const
{
Task
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
{
loadSheet
}
=
require
(
"
sdk
/
stylesheet
/
utils
"
)
;
const
{
createFactory
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
initDevices
}
=
require
(
"
.
/
devices
"
)
;
const
App
=
createFactory
(
require
(
"
.
/
app
"
)
)
;
const
Store
=
require
(
"
.
/
store
"
)
;
const
{
changeLocation
}
=
require
(
"
.
/
actions
/
location
"
)
;
const
{
addViewport
resizeViewport
}
=
require
(
"
.
/
actions
/
viewports
"
)
;
let
bootstrap
=
{
telemetry
:
new
Telemetry
(
)
store
:
null
init
:
Task
.
async
(
function
*
(
)
{
loadSheet
(
window
"
resource
:
/
/
devtools
/
client
/
responsive
.
html
/
responsive
-
ua
.
css
"
"
agent
"
)
;
this
.
telemetry
.
toolOpened
(
"
responsive
"
)
;
let
store
=
this
.
store
=
Store
(
)
;
yield
initDevices
(
this
.
dispatch
.
bind
(
this
)
)
;
let
provider
=
createElement
(
Provider
{
store
}
App
(
)
)
;
ReactDOM
.
render
(
provider
document
.
querySelector
(
"
#
root
"
)
)
;
window
.
postMessage
(
{
type
:
"
init
"
}
"
*
"
)
;
}
)
destroy
(
)
{
this
.
store
=
null
;
this
.
telemetry
.
toolClosed
(
"
responsive
"
)
;
this
.
telemetry
=
null
;
}
dispatch
(
action
)
{
if
(
!
this
.
store
)
{
return
;
}
this
.
store
.
dispatch
(
action
)
;
}
}
;
window
.
addEventListener
(
"
load
"
function
onLoad
(
)
{
window
.
removeEventListener
(
"
load
"
onLoad
)
;
bootstrap
.
init
(
)
;
}
)
;
window
.
addEventListener
(
"
unload
"
function
onUnload
(
)
{
window
.
removeEventListener
(
"
unload
"
onUnload
)
;
bootstrap
.
destroy
(
)
;
}
)
;
window
.
dispatch
=
action
=
>
bootstrap
.
dispatch
(
action
)
;
Object
.
defineProperty
(
window
"
store
"
{
get
:
(
)
=
>
bootstrap
.
store
enumerable
:
true
}
)
;
window
.
addInitialViewport
=
contentURI
=
>
{
try
{
bootstrap
.
dispatch
(
changeLocation
(
contentURI
)
)
;
bootstrap
.
dispatch
(
addViewport
(
)
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
;
window
.
getViewportSize
=
(
)
=
>
{
let
{
width
height
}
=
bootstrap
.
store
.
getState
(
)
.
viewports
[
0
]
;
return
{
width
height
}
;
}
;
window
.
setViewportSize
=
(
width
height
)
=
>
{
try
{
bootstrap
.
dispatch
(
resizeViewport
(
0
width
height
)
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
;
window
.
getViewportMessageManager
=
(
)
=
>
{
let
{
messageManager
}
=
document
.
querySelector
(
"
iframe
.
browser
"
)
.
frameLoader
;
return
{
messageManager
}
;
}
;
