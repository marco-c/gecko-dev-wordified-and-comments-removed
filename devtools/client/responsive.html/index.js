"
use
strict
"
;
const
{
BrowserLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
{
}
)
;
const
{
require
}
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
responsive
.
html
/
"
window
}
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
{
createFactory
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
message
=
require
(
"
.
/
utils
/
message
"
)
;
const
App
=
createFactory
(
require
(
"
.
/
components
/
App
"
)
)
;
const
Store
=
require
(
"
.
/
store
"
)
;
const
{
loadDevices
restoreDeviceState
}
=
require
(
"
.
/
actions
/
devices
"
)
;
const
{
addViewport
resizeViewport
}
=
require
(
"
.
/
actions
/
viewports
"
)
;
const
{
changeDisplayPixelRatio
}
=
require
(
"
.
/
actions
/
ui
"
)
;
window
.
require
=
require
;
const
bootstrap
=
{
telemetry
:
new
Telemetry
(
)
store
:
null
async
init
(
)
{
this
.
telemetry
.
toolOpened
(
"
responsive
"
-
1
this
)
;
const
store
=
this
.
store
=
Store
(
)
;
const
provider
=
createElement
(
Provider
{
store
}
App
(
)
)
;
ReactDOM
.
render
(
provider
document
.
querySelector
(
"
#
root
"
)
)
;
message
.
post
(
window
"
init
:
done
"
)
;
}
destroy
(
)
{
this
.
store
=
null
;
this
.
telemetry
.
toolClosed
(
"
responsive
"
-
1
this
)
;
this
.
telemetry
=
null
;
}
dispatch
(
action
)
{
if
(
!
this
.
store
)
{
return
;
}
this
.
store
.
dispatch
(
action
)
;
}
}
;
message
.
wait
(
window
"
init
"
)
.
then
(
(
)
=
>
bootstrap
.
init
(
)
)
;
message
.
wait
(
window
"
post
-
init
"
)
.
then
(
(
)
=
>
{
bootstrap
.
store
.
dispatch
(
loadDevices
(
)
)
.
then
(
(
)
=
>
{
bootstrap
.
dispatch
(
restoreDeviceState
(
)
)
;
}
)
;
}
)
;
window
.
addEventListener
(
"
unload
"
function
(
)
{
bootstrap
.
destroy
(
)
;
}
{
once
:
true
}
)
;
window
.
dispatch
=
action
=
>
bootstrap
.
dispatch
(
action
)
;
Object
.
defineProperty
(
window
"
store
"
{
get
:
(
)
=
>
bootstrap
.
store
enumerable
:
true
}
)
;
function
onDevicePixelRatioChange
(
)
{
const
dpr
=
window
.
devicePixelRatio
;
const
mql
=
window
.
matchMedia
(
(
resolution
:
{
dpr
}
dppx
)
)
;
function
listener
(
)
{
bootstrap
.
dispatch
(
changeDisplayPixelRatio
(
window
.
devicePixelRatio
)
)
;
mql
.
removeListener
(
listener
)
;
onDevicePixelRatioChange
(
)
;
}
mql
.
addListener
(
listener
)
;
}
window
.
addInitialViewport
=
(
{
uri
userContextId
}
)
=
>
{
try
{
onDevicePixelRatioChange
(
)
;
bootstrap
.
dispatch
(
changeDisplayPixelRatio
(
window
.
devicePixelRatio
)
)
;
bootstrap
.
dispatch
(
addViewport
(
userContextId
)
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
;
window
.
getViewportSize
=
(
)
=
>
{
const
{
viewports
}
=
bootstrap
.
store
.
getState
(
)
;
if
(
!
viewports
.
length
)
{
return
null
;
}
const
{
width
height
}
=
viewports
[
0
]
;
return
{
width
height
}
;
}
;
window
.
setViewportSize
=
(
{
width
height
}
)
=
>
{
try
{
bootstrap
.
dispatch
(
resizeViewport
(
0
width
height
)
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
;
window
.
getViewportBrowser
=
(
)
=
>
{
const
browser
=
document
.
querySelector
(
"
iframe
.
browser
"
)
;
if
(
!
browser
.
messageManager
)
{
Object
.
defineProperty
(
browser
"
messageManager
"
{
get
(
)
{
return
this
.
frameLoader
.
messageManager
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
return
browser
;
}
;
