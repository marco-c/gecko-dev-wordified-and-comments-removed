"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
promise
=
require
(
"
promise
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
old
-
event
-
emitter
"
)
;
const
TOOL_URL
=
"
chrome
:
/
/
devtools
/
content
/
responsive
.
html
/
index
.
xhtml
"
;
loader
.
lazyRequireGetter
(
this
"
DebuggerClient
"
"
devtools
/
shared
/
client
/
debugger
-
client
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerServer
"
"
devtools
/
server
/
main
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
TargetFactory
"
"
devtools
/
client
/
framework
/
target
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
throttlingProfiles
"
"
devtools
/
client
/
shared
/
network
-
throttling
-
profiles
"
)
;
loader
.
lazyRequireGetter
(
this
"
swapToInnerBrowser
"
"
devtools
/
client
/
responsive
.
html
/
browser
/
swap
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
startup
"
"
devtools
/
client
/
responsive
.
html
/
utils
/
window
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
message
"
"
devtools
/
client
/
responsive
.
html
/
utils
/
message
"
)
;
loader
.
lazyRequireGetter
(
this
"
getStr
"
"
devtools
/
client
/
responsive
.
html
/
utils
/
l10n
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
EmulationFront
"
"
devtools
/
shared
/
fronts
/
emulation
"
true
)
;
function
debug
(
msg
)
{
}
const
ResponsiveUIManager
=
exports
.
ResponsiveUIManager
=
{
activeTabs
:
new
Map
(
)
toggle
(
window
tab
options
)
{
let
action
=
this
.
isActiveForTab
(
tab
)
?
"
close
"
:
"
open
"
;
let
completed
=
this
[
action
+
"
IfNeeded
"
]
(
window
tab
options
)
;
completed
.
catch
(
console
.
error
)
;
return
completed
;
}
openIfNeeded
:
Task
.
async
(
function
*
(
window
tab
options
)
{
if
(
!
tab
.
linkedBrowser
.
isRemoteBrowser
)
{
this
.
showRemoteOnlyNotification
(
window
tab
options
)
;
return
promise
.
reject
(
new
Error
(
"
RDM
only
available
for
remote
tabs
.
"
)
)
;
}
if
(
tab
.
linkedBrowser
.
hasAttribute
(
"
usercontextid
"
)
)
{
this
.
showNoContainerTabsNotification
(
window
tab
options
)
;
return
promise
.
reject
(
new
Error
(
"
RDM
not
available
for
container
tabs
.
"
)
)
;
}
if
(
!
this
.
isActiveForTab
(
tab
)
)
{
this
.
initMenuCheckListenerFor
(
window
)
;
let
ui
=
new
ResponsiveUI
(
window
tab
)
;
this
.
activeTabs
.
set
(
tab
ui
)
;
yield
this
.
setMenuCheckFor
(
tab
window
)
;
yield
ui
.
inited
;
this
.
emit
(
"
on
"
{
tab
}
)
;
}
return
this
.
getResponsiveUIForTab
(
tab
)
;
}
)
closeIfNeeded
:
Task
.
async
(
function
*
(
window
tab
options
)
{
if
(
this
.
isActiveForTab
(
tab
)
)
{
let
ui
=
this
.
activeTabs
.
get
(
tab
)
;
let
destroyed
=
yield
ui
.
destroy
(
options
)
;
if
(
!
destroyed
)
{
return
;
}
this
.
activeTabs
.
delete
(
tab
)
;
if
(
!
this
.
isActiveForWindow
(
window
)
)
{
this
.
removeMenuCheckListenerFor
(
window
)
;
}
this
.
emit
(
"
off
"
{
tab
}
)
;
yield
this
.
setMenuCheckFor
(
tab
window
)
;
}
}
)
isActiveForTab
(
tab
)
{
return
this
.
activeTabs
.
has
(
tab
)
;
}
isActiveForWindow
(
window
)
{
return
[
.
.
.
this
.
activeTabs
.
keys
(
)
]
.
some
(
t
=
>
t
.
ownerGlobal
=
=
=
window
)
;
}
getResponsiveUIForTab
(
tab
)
{
return
this
.
activeTabs
.
get
(
tab
)
;
}
handleGcliCommand
(
window
tab
command
args
)
{
let
completed
;
switch
(
command
)
{
case
"
resize
to
"
:
completed
=
this
.
openIfNeeded
(
window
tab
{
command
:
true
}
)
;
this
.
activeTabs
.
get
(
tab
)
.
setViewportSize
(
args
)
;
break
;
case
"
resize
on
"
:
completed
=
this
.
openIfNeeded
(
window
tab
{
command
:
true
}
)
;
break
;
case
"
resize
off
"
:
completed
=
this
.
closeIfNeeded
(
window
tab
{
command
:
true
}
)
;
break
;
case
"
resize
toggle
"
:
completed
=
this
.
toggle
(
window
tab
{
command
:
true
}
)
;
break
;
default
:
}
completed
.
catch
(
console
.
error
)
;
}
handleMenuCheck
(
{
target
}
)
{
ResponsiveUIManager
.
setMenuCheckFor
(
target
)
;
}
initMenuCheckListenerFor
(
window
)
{
let
{
tabContainer
}
=
window
.
gBrowser
;
tabContainer
.
addEventListener
(
"
TabSelect
"
this
.
handleMenuCheck
)
;
}
removeMenuCheckListenerFor
(
window
)
{
if
(
window
&
&
window
.
gBrowser
&
&
window
.
gBrowser
.
tabContainer
)
{
let
{
tabContainer
}
=
window
.
gBrowser
;
tabContainer
.
removeEventListener
(
"
TabSelect
"
this
.
handleMenuCheck
)
;
}
}
setMenuCheckFor
:
Task
.
async
(
function
*
(
tab
window
=
tab
.
ownerGlobal
)
{
yield
startup
(
window
)
;
let
menu
=
window
.
document
.
getElementById
(
"
menu_responsiveUI
"
)
;
if
(
menu
)
{
menu
.
setAttribute
(
"
checked
"
this
.
isActiveForTab
(
tab
)
)
;
}
}
)
showRemoteOnlyNotification
(
window
tab
options
)
{
this
.
showErrorNotification
(
window
tab
options
getStr
(
"
responsive
.
remoteOnly
"
)
)
;
}
showNoContainerTabsNotification
(
window
tab
options
)
{
this
.
showErrorNotification
(
window
tab
options
getStr
(
"
responsive
.
noContainerTabs
"
)
)
;
}
showErrorNotification
(
window
tab
{
command
}
=
{
}
msg
)
{
let
nbox
=
window
.
gBrowser
.
getNotificationBox
(
tab
.
linkedBrowser
)
;
if
(
command
)
{
let
target
=
TargetFactory
.
forTab
(
tab
)
;
let
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
if
(
toolbox
)
{
nbox
=
toolbox
.
notificationBox
;
}
}
let
value
=
"
devtools
-
responsive
-
error
"
;
if
(
nbox
.
getNotificationWithValue
(
value
)
)
{
return
;
}
nbox
.
appendNotification
(
msg
value
null
nbox
.
PRIORITY_CRITICAL_MEDIUM
[
]
)
;
}
}
;
EventEmitter
.
decorate
(
ResponsiveUIManager
)
;
function
ResponsiveUI
(
window
tab
)
{
this
.
browserWindow
=
window
;
this
.
tab
=
tab
;
this
.
inited
=
this
.
init
(
)
;
}
ResponsiveUI
.
prototype
=
{
browserWindow
:
null
tab
:
null
inited
:
null
destroying
:
false
destroyed
:
false
toolWindow
:
null
init
:
Task
.
async
(
function
*
(
)
{
debug
(
"
Init
start
"
)
;
let
ui
=
this
;
this
.
tab
.
addEventListener
(
"
TabClose
"
this
)
;
this
.
browserWindow
.
addEventListener
(
"
unload
"
this
)
;
debug
(
"
Create
browser
swapper
"
)
;
this
.
swap
=
swapToInnerBrowser
(
{
tab
:
this
.
tab
containerURL
:
TOOL_URL
getInnerBrowser
:
Task
.
async
(
function
*
(
containerBrowser
)
{
let
toolWindow
=
ui
.
toolWindow
=
containerBrowser
.
contentWindow
;
toolWindow
.
addEventListener
(
"
message
"
ui
)
;
debug
(
"
Yield
to
init
from
inner
"
)
;
yield
message
.
request
(
toolWindow
"
init
"
)
;
toolWindow
.
addInitialViewport
(
"
about
:
blank
"
)
;
debug
(
"
Yield
to
browser
mounted
"
)
;
yield
message
.
wait
(
toolWindow
"
browser
-
mounted
"
)
;
return
ui
.
getViewportBrowser
(
)
;
}
)
}
)
;
debug
(
"
Yield
to
swap
start
"
)
;
yield
this
.
swap
.
start
(
)
;
this
.
tab
.
addEventListener
(
"
BeforeTabRemotenessChange
"
this
)
;
debug
(
"
Yield
to
start
frame
script
"
)
;
yield
message
.
request
(
this
.
toolWindow
"
start
-
frame
-
script
"
)
;
debug
(
"
Yield
to
RDP
server
connect
"
)
;
yield
this
.
connectToServer
(
)
;
message
.
post
(
this
.
toolWindow
"
post
-
init
"
)
;
debug
(
"
Init
done
"
)
;
}
)
destroy
:
Task
.
async
(
function
*
(
options
)
{
if
(
this
.
destroying
)
{
return
false
;
}
this
.
destroying
=
true
;
let
isWindowClosing
=
options
&
&
options
.
reason
=
=
=
"
unload
"
;
let
isTabContentDestroying
=
isWindowClosing
|
|
(
options
&
&
(
options
.
reason
=
=
=
"
TabClose
"
|
|
options
.
reason
=
=
=
"
BeforeTabRemotenessChange
"
)
)
;
if
(
!
isTabContentDestroying
)
{
yield
this
.
inited
;
}
this
.
tab
.
removeEventListener
(
"
TabClose
"
this
)
;
this
.
tab
.
removeEventListener
(
"
BeforeTabRemotenessChange
"
this
)
;
this
.
browserWindow
.
removeEventListener
(
"
unload
"
this
)
;
this
.
toolWindow
.
removeEventListener
(
"
message
"
this
)
;
if
(
!
isTabContentDestroying
)
{
yield
message
.
request
(
this
.
toolWindow
"
stop
-
frame
-
script
"
)
;
}
let
swap
=
this
.
swap
;
this
.
browserWindow
=
null
;
this
.
tab
=
null
;
this
.
inited
=
null
;
this
.
toolWindow
=
null
;
this
.
swap
=
null
;
let
clientClosed
=
this
.
client
.
close
(
)
;
if
(
!
isTabContentDestroying
)
{
yield
clientClosed
;
}
this
.
client
=
this
.
emulationFront
=
null
;
if
(
!
isWindowClosing
)
{
swap
.
stop
(
)
;
}
this
.
destroyed
=
true
;
return
true
;
}
)
connectToServer
:
Task
.
async
(
function
*
(
)
{
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerActors
(
{
browser
:
true
root
:
true
tab
:
true
}
)
;
this
.
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
yield
this
.
client
.
connect
(
)
;
let
{
tab
}
=
yield
this
.
client
.
getTab
(
)
;
this
.
emulationFront
=
EmulationFront
(
this
.
client
tab
)
;
}
)
handleEvent
(
event
)
{
let
{
browserWindow
tab
}
=
this
;
switch
(
event
.
type
)
{
case
"
message
"
:
this
.
handleMessage
(
event
)
;
break
;
case
"
BeforeTabRemotenessChange
"
:
case
"
TabClose
"
:
case
"
unload
"
:
ResponsiveUIManager
.
closeIfNeeded
(
browserWindow
tab
{
reason
:
event
.
type
}
)
;
break
;
}
}
handleMessage
(
event
)
{
if
(
event
.
origin
!
=
=
"
chrome
:
/
/
devtools
"
)
{
return
;
}
switch
(
event
.
data
.
type
)
{
case
"
change
-
device
"
:
this
.
onChangeDevice
(
event
)
;
break
;
case
"
change
-
network
-
throtting
"
:
this
.
onChangeNetworkThrottling
(
event
)
;
break
;
case
"
change
-
pixel
-
ratio
"
:
this
.
onChangePixelRatio
(
event
)
;
break
;
case
"
change
-
touch
-
simulation
"
:
this
.
onChangeTouchSimulation
(
event
)
;
break
;
case
"
content
-
resize
"
:
this
.
onContentResize
(
event
)
;
break
;
case
"
exit
"
:
this
.
onExit
(
)
;
break
;
case
"
remove
-
device
-
association
"
:
this
.
onRemoveDeviceAssociation
(
event
)
;
break
;
}
}
onChangeDevice
:
Task
.
async
(
function
*
(
event
)
{
let
{
userAgent
pixelRatio
touch
}
=
event
.
data
.
device
;
yield
this
.
updateUserAgent
(
userAgent
)
;
yield
this
.
updateDPPX
(
pixelRatio
)
;
yield
this
.
updateTouchSimulation
(
touch
)
;
this
.
emit
(
"
device
-
changed
"
)
;
}
)
onChangeNetworkThrottling
:
Task
.
async
(
function
*
(
event
)
{
let
{
enabled
profile
}
=
event
.
data
;
yield
this
.
updateNetworkThrottling
(
enabled
profile
)
;
this
.
emit
(
"
network
-
throttling
-
changed
"
)
;
}
)
onChangePixelRatio
(
event
)
{
let
{
pixelRatio
}
=
event
.
data
;
this
.
updateDPPX
(
pixelRatio
)
;
}
onChangeTouchSimulation
(
event
)
{
let
{
enabled
}
=
event
.
data
;
this
.
updateTouchSimulation
(
enabled
)
;
this
.
emit
(
"
touch
-
simulation
-
changed
"
)
;
}
onContentResize
(
event
)
{
let
{
width
height
}
=
event
.
data
;
this
.
emit
(
"
content
-
resize
"
{
width
height
}
)
;
}
onExit
(
)
{
let
{
browserWindow
tab
}
=
this
;
ResponsiveUIManager
.
closeIfNeeded
(
browserWindow
tab
)
;
}
onRemoveDeviceAssociation
:
Task
.
async
(
function
*
(
event
)
{
yield
this
.
updateUserAgent
(
)
;
yield
this
.
updateDPPX
(
)
;
yield
this
.
updateTouchSimulation
(
)
;
this
.
emit
(
"
device
-
association
-
removed
"
)
;
}
)
updateDPPX
:
Task
.
async
(
function
*
(
dppx
)
{
if
(
!
dppx
)
{
yield
this
.
emulationFront
.
clearDPPXOverride
(
)
;
return
;
}
yield
this
.
emulationFront
.
setDPPXOverride
(
dppx
)
;
}
)
updateNetworkThrottling
:
Task
.
async
(
function
*
(
enabled
profile
)
{
if
(
!
enabled
)
{
yield
this
.
emulationFront
.
clearNetworkThrottling
(
)
;
return
;
}
let
data
=
throttlingProfiles
.
find
(
(
{
id
}
)
=
>
id
=
=
profile
)
;
let
{
download
upload
latency
}
=
data
;
yield
this
.
emulationFront
.
setNetworkThrottling
(
{
downloadThroughput
:
download
uploadThroughput
:
upload
latency
}
)
;
}
)
updateUserAgent
:
Task
.
async
(
function
*
(
userAgent
)
{
if
(
!
userAgent
)
{
yield
this
.
emulationFront
.
clearUserAgentOverride
(
)
;
return
;
}
yield
this
.
emulationFront
.
setUserAgentOverride
(
userAgent
)
;
}
)
updateTouchSimulation
:
Task
.
async
(
function
*
(
enabled
)
{
let
reloadNeeded
;
if
(
enabled
)
{
reloadNeeded
=
yield
this
.
emulationFront
.
setTouchEventsOverride
(
Ci
.
nsIDocShell
.
TOUCHEVENTS_OVERRIDE_ENABLED
)
;
}
else
{
reloadNeeded
=
yield
this
.
emulationFront
.
clearTouchEventsOverride
(
)
;
}
if
(
reloadNeeded
)
{
this
.
getViewportBrowser
(
)
.
reload
(
)
;
}
}
)
getViewportSize
(
)
{
return
this
.
toolWindow
.
getViewportSize
(
)
;
}
setViewportSize
:
Task
.
async
(
function
*
(
size
)
{
yield
this
.
inited
;
this
.
toolWindow
.
setViewportSize
(
size
)
;
}
)
getViewportBrowser
(
)
{
return
this
.
toolWindow
.
getViewportBrowser
(
)
;
}
getViewportMessageManager
(
)
{
return
this
.
getViewportBrowser
(
)
.
messageManager
;
}
}
;
EventEmitter
.
decorate
(
ResponsiveUI
.
prototype
)
;
