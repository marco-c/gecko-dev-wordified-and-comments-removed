"
use
strict
"
;
const
promise
=
require
(
"
promise
"
)
;
const
{
Task
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
TOOL_URL
=
"
chrome
:
/
/
devtools
/
content
/
responsive
.
html
/
index
.
xhtml
"
;
exports
.
ResponsiveUIManager
=
{
activeTabs
:
new
Map
(
)
toggle
(
window
tab
)
{
let
action
=
this
.
isActiveForTab
(
tab
)
?
"
close
"
:
"
open
"
;
return
this
[
action
+
"
IfNeeded
"
]
(
window
tab
)
;
}
openIfNeeded
:
Task
.
async
(
function
*
(
window
tab
)
{
if
(
!
this
.
isActiveForTab
(
tab
)
)
{
let
ui
=
new
ResponsiveUI
(
window
tab
)
;
this
.
activeTabs
.
set
(
tab
ui
)
;
yield
ui
.
inited
;
this
.
emit
(
"
on
"
{
tab
}
)
;
}
return
this
.
getResponsiveUIForTab
(
tab
)
;
}
)
closeIfNeeded
(
window
tab
)
{
if
(
this
.
isActiveForTab
(
tab
)
)
{
this
.
activeTabs
.
get
(
tab
)
.
destroy
(
)
;
this
.
activeTabs
.
delete
(
tab
)
;
this
.
emit
(
"
off
"
{
tab
}
)
;
}
return
promise
.
resolve
(
)
;
}
isActiveForTab
(
tab
)
{
return
this
.
activeTabs
.
has
(
tab
)
;
}
getResponsiveUIForTab
(
tab
)
{
return
this
.
activeTabs
.
get
(
tab
)
;
}
handleGcliCommand
:
function
(
window
tab
command
args
)
{
let
completed
;
switch
(
command
)
{
case
"
resize
to
"
:
completed
=
this
.
openIfNeeded
(
window
tab
)
;
this
.
activeTabs
.
get
(
tab
)
.
setSize
(
args
.
width
args
.
height
)
;
break
;
case
"
resize
on
"
:
completed
=
this
.
openIfNeeded
(
window
tab
)
;
break
;
case
"
resize
off
"
:
completed
=
this
.
closeIfNeeded
(
window
tab
)
;
break
;
case
"
resize
toggle
"
:
completed
=
this
.
toggle
(
window
tab
)
;
break
;
default
:
}
completed
.
catch
(
e
=
>
console
.
error
(
e
)
)
;
}
}
;
EventEmitter
.
decorate
(
exports
.
ResponsiveUIManager
)
;
function
ResponsiveUI
(
window
tab
)
{
this
.
browserWindow
=
window
;
this
.
tab
=
tab
;
this
.
inited
=
this
.
init
(
)
;
}
ResponsiveUI
.
prototype
=
{
browserWindow
:
null
tab
:
null
inited
:
null
toolWindow
:
null
init
:
Task
.
async
(
function
*
(
)
{
let
tabBrowser
=
this
.
tab
.
linkedBrowser
;
let
contentURI
=
tabBrowser
.
documentURI
.
spec
;
tabBrowser
.
loadURI
(
TOOL_URL
)
;
yield
tabLoaded
(
this
.
tab
)
;
let
toolWindow
=
this
.
toolWindow
=
tabBrowser
.
contentWindow
;
toolWindow
.
addInitialViewport
(
contentURI
)
;
}
)
destroy
(
)
{
let
tabBrowser
=
this
.
tab
.
linkedBrowser
;
tabBrowser
.
goBack
(
)
;
this
.
window
=
null
;
this
.
tab
=
null
;
this
.
inited
=
null
;
this
.
toolWindow
=
null
;
}
}
;
function
tabLoaded
(
tab
)
{
let
deferred
=
promise
.
defer
(
)
;
function
handle
(
event
)
{
if
(
event
.
originalTarget
!
=
tab
.
linkedBrowser
.
contentDocument
|
|
event
.
target
.
location
.
href
=
=
"
about
:
blank
"
)
{
return
;
}
tab
.
linkedBrowser
.
removeEventListener
(
"
load
"
handle
true
)
;
deferred
.
resolve
(
event
)
;
}
tab
.
linkedBrowser
.
addEventListener
(
"
load
"
handle
true
)
;
return
deferred
.
promise
;
}
