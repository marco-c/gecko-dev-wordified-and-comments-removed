"
use
strict
"
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
const
KeyShortcuts
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
key
-
shortcuts
.
js
"
)
;
const
{
l10n
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
utils
/
messages
.
js
"
)
;
const
{
BrowserLoader
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
browser
-
loader
.
sys
.
mjs
"
)
;
const
{
getAdHocFrontOrPrimitiveGrip
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
fronts
/
object
.
js
"
)
;
const
{
PREFS
FILTERS
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
constants
.
js
"
)
;
const
FirefoxDataProvider
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
connector
/
firefox
-
data
-
provider
.
js
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
}
)
;
loader
.
lazyRequireGetter
(
this
"
START_IGNORE_ACTION
"
"
resource
:
/
/
devtools
/
client
/
shared
/
redux
/
middleware
/
ignore
.
js
"
true
)
;
const
ZoomKeys
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
zoom
-
keys
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
TRACER_LOG_METHODS
"
"
resource
:
/
/
devtools
/
shared
/
specs
/
tracer
.
js
"
true
)
;
const
PREF_SIDEBAR_ENABLED
=
"
devtools
.
webconsole
.
sidebarToggle
"
;
const
PREF_BROWSERTOOLBOX_SCOPE
=
"
devtools
.
browsertoolbox
.
scope
"
;
class
WebConsoleUI
{
constructor
(
hud
)
{
this
.
hud
=
hud
;
this
.
hudId
=
this
.
hud
.
hudId
;
this
.
isBrowserConsole
=
this
.
hud
.
isBrowserConsole
;
this
.
isBrowserToolboxConsole
=
this
.
hud
.
commands
.
descriptorFront
.
isBrowserProcessDescriptor
&
&
!
this
.
isBrowserConsole
;
this
.
window
=
this
.
hud
.
iframeWindow
;
this
.
_onPanelSelected
=
this
.
_onPanelSelected
.
bind
(
this
)
;
this
.
_onChangeSplitConsoleState
=
this
.
_onChangeSplitConsoleState
.
bind
(
this
)
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
this
.
_onResourceAvailable
=
this
.
_onResourceAvailable
.
bind
(
this
)
;
this
.
_onNetworkResourceUpdated
=
this
.
_onNetworkResourceUpdated
.
bind
(
this
)
;
this
.
_onScopePrefChanged
=
this
.
_onScopePrefChanged
.
bind
(
this
)
;
this
.
_onShowConsoleEvaluation
=
this
.
_onShowConsoleEvaluation
.
bind
(
this
)
;
if
(
this
.
isBrowserConsole
)
{
Services
.
prefs
.
addObserver
(
PREF_BROWSERTOOLBOX_SCOPE
this
.
_onScopePrefChanged
)
;
}
EventEmitter
.
decorate
(
this
)
;
}
init
(
)
{
if
(
this
.
_initializer
)
{
return
this
.
_initializer
;
}
this
.
_initializer
=
(
async
(
)
=
>
{
this
.
_initUI
(
)
;
if
(
this
.
isBrowserConsole
)
{
await
this
.
hud
.
commands
.
targetCommand
.
startListening
(
)
;
if
(
this
.
_destroyed
)
{
return
;
}
}
await
this
.
wrapper
.
init
(
)
;
if
(
this
.
_destroyed
)
{
return
;
}
await
this
.
_attachTargets
(
)
;
if
(
this
.
_destroyed
)
{
return
;
}
await
this
.
wrapper
.
waitAsyncDispatches
(
)
;
this
.
_initNotifications
(
)
;
}
)
(
)
;
return
this
.
_initializer
;
}
destroy
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
this
.
React
=
this
.
ReactDOM
=
this
.
FrameView
=
null
;
if
(
this
.
wrapper
)
{
this
.
wrapper
.
getStore
(
)
?
.
dispatch
(
START_IGNORE_ACTION
)
;
this
.
wrapper
.
destroy
(
)
;
}
if
(
this
.
jsterm
)
{
this
.
jsterm
.
destroy
(
)
;
this
.
jsterm
=
null
;
}
const
{
toolbox
}
=
this
.
hud
;
if
(
toolbox
)
{
toolbox
.
off
(
"
webconsole
-
selected
"
this
.
_onPanelSelected
)
;
toolbox
.
off
(
"
split
-
console
"
this
.
_onChangeSplitConsoleState
)
;
toolbox
.
off
(
"
select
"
this
.
_onChangeSplitConsoleState
)
;
toolbox
.
off
(
"
show
-
original
-
variable
-
mapping
-
warnings
"
this
.
_onShowConsoleEvaluation
)
;
}
if
(
this
.
isBrowserConsole
)
{
Services
.
prefs
.
removeObserver
(
PREF_BROWSERTOOLBOX_SCOPE
this
.
_onScopePrefChanged
)
;
}
this
.
hud
.
commands
.
targetCommand
.
unwatchTargets
(
{
types
:
this
.
hud
.
commands
.
targetCommand
.
ALL_TYPES
onAvailable
:
this
.
_onTargetAvailable
onDestroyed
:
this
.
_onTargetDestroyed
}
)
;
const
resourceCommand
=
this
.
hud
.
resourceCommand
;
if
(
this
.
_watchedResources
)
{
resourceCommand
.
unwatchResources
(
this
.
_watchedResources
{
onAvailable
:
this
.
_onResourceAvailable
}
)
;
}
this
.
stopWatchingNetworkResources
(
)
;
if
(
this
.
networkDataProvider
)
{
this
.
networkDataProvider
.
destroy
(
)
;
this
.
networkDataProvider
=
null
;
}
this
.
window
=
this
.
hud
=
this
.
wrapper
=
null
;
}
async
clearOutput
(
clearStorage
event
)
{
if
(
event
)
{
event
.
preventDefault
(
)
;
}
if
(
this
.
wrapper
)
{
this
.
wrapper
.
dispatchMessagesClear
(
)
;
}
if
(
clearStorage
)
{
await
this
.
clearMessagesCache
(
)
;
}
this
.
emitForTests
(
"
messages
-
cleared
"
)
;
}
async
clearMessagesCache
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
try
{
const
consoleFronts
=
await
this
.
hud
.
commands
.
targetCommand
.
getAllFronts
(
this
.
hud
.
commands
.
targetCommand
.
ALL_TYPES
"
console
"
)
;
const
promises
=
[
]
;
for
(
const
consoleFront
of
consoleFronts
)
{
promises
.
push
(
consoleFront
.
clearMessagesCacheAsync
(
)
)
;
}
await
Promise
.
all
(
promises
)
;
this
.
emitForTests
(
"
messages
-
cache
-
cleared
"
)
;
}
catch
(
e
)
{
console
.
warn
(
"
Exception
in
clearMessagesCache
"
e
)
;
}
}
clearPrivateMessages
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
wrapper
.
dispatchPrivateMessagesClear
(
)
;
this
.
emitForTests
(
"
private
-
messages
-
cleared
"
)
;
}
inspectObjectActor
(
objectActor
)
{
const
{
targetFront
}
=
this
.
hud
.
commands
.
targetCommand
;
this
.
wrapper
.
dispatchMessageAdd
(
{
helperResult
:
{
type
:
"
inspectObject
"
object
:
objectActor
&
&
objectActor
.
getGrip
?
objectActor
:
getAdHocFrontOrPrimitiveGrip
(
objectActor
targetFront
)
}
}
true
)
;
return
this
.
wrapper
;
}
disableAllNetworkMessages
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
wrapper
.
dispatchNetworkMessagesDisable
(
)
;
}
getPanelWindow
(
)
{
return
this
.
window
;
}
logWarningAboutReplacedAPI
(
)
{
return
this
.
hud
.
currentTarget
.
logWarningInPage
(
l10n
.
getStr
(
"
ConsoleAPIDisabled
"
)
"
ConsoleAPIDisabled
"
)
;
}
async
_attachTargets
(
)
{
const
{
commands
resourceCommand
}
=
this
.
hud
;
this
.
networkDataProvider
=
new
FirefoxDataProvider
(
{
commands
actions
:
{
updateRequest
:
(
id
data
)
=
>
this
.
wrapper
.
batchedRequestUpdates
(
{
id
data
}
)
}
owner
:
this
}
)
;
await
commands
.
targetCommand
.
watchTargets
(
{
types
:
this
.
hud
.
commands
.
targetCommand
.
ALL_TYPES
onAvailable
:
this
.
_onTargetAvailable
onDestroyed
:
this
.
_onTargetDestroyed
}
)
;
this
.
_watchedResources
=
[
resourceCommand
.
TYPES
.
CONSOLE_MESSAGE
resourceCommand
.
TYPES
.
ERROR_MESSAGE
resourceCommand
.
TYPES
.
PLATFORM_MESSAGE
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
resourceCommand
.
TYPES
.
LAST_PRIVATE_CONTEXT_EXIT
resourceCommand
.
TYPES
.
JSTRACER_TRACE
resourceCommand
.
TYPES
.
JSTRACER_STATE
]
;
const
shouldShowCssWarnings
=
this
.
wrapper
.
getFilterState
(
FILTERS
.
CSS
)
;
if
(
shouldShowCssWarnings
)
{
this
.
_watchedResources
.
push
(
resourceCommand
.
TYPES
.
CSS_MESSAGE
)
;
}
await
resourceCommand
.
watchResources
(
this
.
_watchedResources
{
onAvailable
:
this
.
_onResourceAvailable
}
)
;
if
(
this
.
isBrowserConsole
|
|
this
.
isBrowserToolboxConsole
)
{
const
shouldEnableNetworkMonitoring
=
Services
.
prefs
.
getBoolPref
(
PREFS
.
UI
.
ENABLE_NETWORK_MONITORING
)
;
if
(
shouldEnableNetworkMonitoring
)
{
await
this
.
startWatchingNetworkResources
(
)
;
}
else
{
await
this
.
stopWatchingNetworkResources
(
)
;
}
}
else
{
await
this
.
startWatchingNetworkResources
(
)
;
}
}
async
startWatchingNetworkResources
(
)
{
const
{
commands
resourceCommand
}
=
this
.
hud
;
await
resourceCommand
.
watchResources
(
[
resourceCommand
.
TYPES
.
NETWORK_EVENT
resourceCommand
.
TYPES
.
NETWORK_EVENT_STACKTRACE
]
{
onAvailable
:
this
.
_onResourceAvailable
onUpdated
:
this
.
_onNetworkResourceUpdated
}
)
;
if
(
commands
.
targetCommand
.
hasTargetWatcherSupport
(
)
)
{
const
networkFront
=
await
commands
.
watcherFront
.
getNetworkParentActor
(
)
;
const
saveBodies
=
!
this
.
isBrowserConsole
&
&
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
saveRequestAndResponseBodies
"
)
;
await
networkFront
.
setSaveRequestAndResponseBodies
(
saveBodies
)
;
}
}
async
stopWatchingNetworkResources
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
await
this
.
hud
.
resourceCommand
.
unwatchResources
(
[
this
.
hud
.
resourceCommand
.
TYPES
.
NETWORK_EVENT
this
.
hud
.
resourceCommand
.
TYPES
.
NETWORK_EVENT_STACKTRACE
]
{
onAvailable
:
this
.
_onResourceAvailable
onUpdated
:
this
.
_onNetworkResourceUpdated
}
)
;
}
handleDocumentEvent
(
resource
)
{
if
(
!
resource
.
targetFront
.
isTopLevel
)
{
return
;
}
if
(
resource
.
name
=
=
"
will
-
navigate
"
)
{
this
.
handleWillNavigate
(
{
timeStamp
:
resource
.
time
url
:
resource
.
newURI
}
)
;
}
else
if
(
resource
.
name
=
=
"
dom
-
complete
"
)
{
this
.
handleNavigated
(
{
hasNativeConsoleAPI
:
resource
.
hasNativeConsoleAPI
}
)
;
}
}
async
handleNavigated
(
{
hasNativeConsoleAPI
}
)
{
this
.
wrapper
.
dispatchUpdateInstantEvaluationResultForCurrentExpression
(
)
;
await
this
.
wrapper
.
waitAsyncDispatches
(
)
;
if
(
!
hasNativeConsoleAPI
)
{
this
.
logWarningAboutReplacedAPI
(
)
;
}
this
.
emit
(
"
reloaded
"
)
;
}
handleWillNavigate
(
{
timeStamp
url
}
)
{
this
.
wrapper
.
dispatchTabWillNavigate
(
{
timeStamp
url
}
)
;
}
async
watchCssMessages
(
)
{
const
{
resourceCommand
}
=
this
.
hud
;
if
(
this
.
_watchedResources
.
includes
(
resourceCommand
.
TYPES
.
CSS_MESSAGE
)
)
{
return
;
}
await
resourceCommand
.
watchResources
(
[
resourceCommand
.
TYPES
.
CSS_MESSAGE
]
{
onAvailable
:
this
.
_onResourceAvailable
}
)
;
this
.
_watchedResources
.
push
(
resourceCommand
.
TYPES
.
CSS_MESSAGE
)
;
}
_onResourceAvailable
(
resources
)
{
if
(
this
.
_destroyed
)
{
return
;
}
const
{
logMethod
}
=
this
.
hud
.
commands
.
tracerCommand
.
getTracingOptions
(
)
;
const
messages
=
[
]
;
for
(
const
resource
of
resources
)
{
const
{
TYPES
}
=
this
.
hud
.
resourceCommand
;
if
(
resource
.
resourceType
=
=
=
TYPES
.
DOCUMENT_EVENT
)
{
this
.
handleDocumentEvent
(
resource
)
;
continue
;
}
if
(
resource
.
resourceType
=
=
TYPES
.
LAST_PRIVATE_CONTEXT_EXIT
)
{
if
(
this
.
isBrowserConsole
|
|
this
.
isBrowserToolboxConsole
)
{
this
.
clearPrivateMessages
(
)
;
}
continue
;
}
if
(
!
this
.
wrapper
|
|
(
(
resource
.
resourceType
=
=
=
TYPES
.
ERROR_MESSAGE
|
|
resource
.
resourceType
=
=
=
TYPES
.
CSS_MESSAGE
)
&
&
resource
.
pageError
?
.
isForwardedFromContentProcess
&
&
(
this
.
isBrowserToolboxConsole
|
|
this
.
isBrowserConsole
)
)
)
{
continue
;
}
if
(
(
this
.
isBrowserToolboxConsole
|
|
this
.
isBrowserConsole
)
&
&
resource
.
isAlreadyExistingResource
&
&
(
resource
.
pageError
?
.
private
|
|
(
resource
.
message
|
|
resource
)
?
.
private
)
)
{
continue
;
}
if
(
resource
.
resourceType
=
=
=
TYPES
.
JSTRACER_TRACE
&
&
logMethod
!
=
TRACER_LOG_METHODS
.
CONSOLE
)
{
continue
;
}
if
(
resource
.
resourceType
=
=
=
TYPES
.
NETWORK_EVENT_STACKTRACE
)
{
this
.
networkDataProvider
?
.
onStackTraceAvailable
(
resource
)
;
continue
;
}
if
(
resource
.
resourceType
=
=
=
TYPES
.
NETWORK_EVENT
)
{
this
.
networkDataProvider
?
.
onNetworkResourceAvailable
(
resource
)
;
}
messages
.
push
(
resource
)
;
}
this
.
wrapper
.
dispatchMessagesAdd
(
messages
)
;
}
_onNetworkResourceUpdated
(
updates
)
{
if
(
this
.
_destroyed
)
{
return
;
}
const
messageUpdates
=
[
]
;
for
(
const
{
resource
}
of
updates
)
{
if
(
resource
.
resourceType
=
=
this
.
hud
.
resourceCommand
.
TYPES
.
NETWORK_EVENT
)
{
this
.
networkDataProvider
?
.
onNetworkResourceUpdated
(
resource
)
;
messageUpdates
.
push
(
resource
)
;
}
}
this
.
wrapper
.
dispatchMessagesUpdate
(
messageUpdates
)
;
}
async
_onTargetAvailable
(
)
{
}
_onTargetDestroyed
(
{
targetFront
isModeSwitching
}
)
{
if
(
this
.
_destroyed
)
{
return
;
}
if
(
isModeSwitching
)
{
this
.
wrapper
.
dispatchTargetMessagesRemove
(
targetFront
)
;
}
}
_initUI
(
)
{
this
.
document
=
this
.
window
.
document
;
this
.
rootElement
=
this
.
document
.
documentElement
;
this
.
outputNode
=
this
.
document
.
getElementById
(
"
app
-
wrapper
"
)
;
const
{
toolbox
}
=
this
.
hud
;
const
WebConsoleWrapper
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
webconsole
/
"
window
:
this
.
window
}
)
.
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
webconsole
-
wrapper
.
js
"
)
;
this
.
wrapper
=
new
WebConsoleWrapper
(
this
.
outputNode
this
toolbox
this
.
document
)
;
this
.
_initShortcuts
(
)
;
this
.
_initOutputSyntaxHighlighting
(
)
;
if
(
toolbox
)
{
toolbox
.
on
(
"
webconsole
-
selected
"
this
.
_onPanelSelected
)
;
toolbox
.
on
(
"
split
-
console
"
this
.
_onChangeSplitConsoleState
)
;
toolbox
.
on
(
"
select
"
this
.
_onChangeSplitConsoleState
)
;
}
}
_initOutputSyntaxHighlighting
(
)
{
const
syntaxHighlightNode
=
node
=
>
{
const
editor
=
this
.
jsterm
&
&
this
.
jsterm
.
editor
;
if
(
node
&
&
editor
)
{
node
.
classList
.
add
(
"
cm
-
s
-
mozilla
"
)
;
editor
.
CodeMirror
.
runMode
(
node
.
textContent
"
application
/
javascript
"
node
)
;
}
}
;
const
win
=
this
.
window
;
win
.
customElements
.
define
(
"
syntax
-
highlighted
"
class
extends
win
.
HTMLElement
{
connectedCallback
(
)
{
if
(
!
this
.
connected
)
{
this
.
connected
=
true
;
syntaxHighlightNode
(
this
)
;
this
.
observer
=
new
win
.
MutationObserver
(
(
mutations
observer
)
=
>
{
observer
.
disconnect
(
)
;
syntaxHighlightNode
(
this
)
;
observer
.
observe
(
this
{
childList
:
true
}
)
;
}
)
;
this
.
observer
.
observe
(
this
{
childList
:
true
}
)
;
}
}
}
)
;
}
_initNotifications
(
)
{
if
(
this
.
hud
.
toolbox
)
{
this
.
wrapper
.
toggleOriginalVariableMappingEvaluationNotification
(
!
!
this
.
hud
.
toolbox
.
getPanel
(
"
jsdebugger
"
)
?
.
shouldShowOriginalVariableMappingWarnings
(
)
)
;
this
.
hud
.
toolbox
.
on
(
"
show
-
original
-
variable
-
mapping
-
warnings
"
this
.
_onShowConsoleEvaluation
)
;
}
}
_initShortcuts
(
)
{
const
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
window
}
)
;
let
clearShortcut
;
if
(
lazy
.
AppConstants
.
platform
=
=
=
"
macosx
"
)
{
const
alternativaClearShortcut
=
l10n
.
getStr
(
"
webconsole
.
clear
.
alternativeKeyOSX
"
)
;
shortcuts
.
on
(
alternativaClearShortcut
event
=
>
this
.
clearOutput
(
true
event
)
)
;
clearShortcut
=
l10n
.
getStr
(
"
webconsole
.
clear
.
keyOSX
"
)
;
}
else
{
clearShortcut
=
l10n
.
getStr
(
"
webconsole
.
clear
.
key
"
)
;
}
shortcuts
.
on
(
clearShortcut
event
=
>
this
.
clearOutput
(
true
event
)
)
;
if
(
this
.
isBrowserConsole
)
{
this
.
window
.
focus
(
)
;
shortcuts
.
on
(
l10n
.
getStr
(
"
webconsole
.
close
.
key
"
)
this
.
window
.
close
.
bind
(
this
.
window
)
)
;
ZoomKeys
.
register
(
this
.
window
shortcuts
)
;
shortcuts
.
on
(
"
CmdOrCtrl
+
Alt
+
R
"
(
)
=
>
{
this
.
hud
.
commands
.
targetCommand
.
reloadTopLevelTarget
(
)
;
}
)
;
}
else
if
(
Services
.
prefs
.
getBoolPref
(
PREF_SIDEBAR_ENABLED
)
)
{
shortcuts
.
on
(
"
Esc
"
(
)
=
>
{
this
.
wrapper
.
dispatchSidebarClose
(
)
;
if
(
this
.
jsterm
)
{
this
.
jsterm
.
focus
(
)
;
}
}
)
;
}
}
_onPanelSelected
(
)
{
if
(
this
.
jsterm
)
{
this
.
jsterm
.
focus
(
)
;
}
}
_onChangeSplitConsoleState
(
)
{
this
.
wrapper
.
dispatchSplitConsoleCloseButtonToggle
(
)
;
}
_onScopePrefChanged
(
)
{
if
(
this
.
isBrowserConsole
)
{
this
.
hud
.
updateWindowTitle
(
)
;
}
}
_onShowConsoleEvaluation
(
isOriginalVariableMappingEnabled
)
{
this
.
wrapper
.
toggleOriginalVariableMappingEvaluationNotification
(
isOriginalVariableMappingEnabled
)
;
}
getInputCursor
(
)
{
return
this
.
jsterm
&
&
this
.
jsterm
.
getSelectionStart
(
)
;
}
getJsTermTooltipAnchor
(
)
{
return
this
.
outputNode
.
querySelector
(
"
.
CodeMirror
-
cursor
"
)
;
}
attachRef
(
id
node
)
{
this
[
id
]
=
node
;
}
getSelectedNodeActorID
(
)
{
const
inspectorSelection
=
this
.
hud
.
getInspectorSelection
(
)
;
return
inspectorSelection
?
.
nodeFront
?
.
actorID
;
}
}
exports
.
WebConsoleUI
=
WebConsoleUI
;
