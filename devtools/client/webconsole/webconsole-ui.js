"
use
strict
"
;
const
{
Utils
:
WebConsoleUtils
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
WebConsoleConnectionProxy
}
=
require
(
"
devtools
/
client
/
webconsole
/
webconsole
-
connection
-
proxy
"
)
;
const
KeyShortcuts
=
require
(
"
devtools
/
client
/
shared
/
key
-
shortcuts
"
)
;
const
{
l10n
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
)
;
var
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
BrowserLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
PREFS
"
"
devtools
/
client
/
webconsole
/
constants
"
true
)
;
const
ZoomKeys
=
require
(
"
devtools
/
client
/
shared
/
zoom
-
keys
"
)
;
const
PREF_SIDEBAR_ENABLED
=
"
devtools
.
webconsole
.
sidebarToggle
"
;
class
WebConsoleUI
{
constructor
(
hud
)
{
this
.
hud
=
hud
;
this
.
hudId
=
this
.
hud
.
hudId
;
this
.
isBrowserConsole
=
this
.
hud
.
isBrowserConsole
;
this
.
isBrowserToolboxConsole
=
this
.
hud
.
currentTarget
&
&
this
.
hud
.
currentTarget
.
isParentProcess
&
&
!
this
.
hud
.
currentTarget
.
isAddon
;
this
.
window
=
this
.
hud
.
iframeWindow
;
this
.
_onPanelSelected
=
this
.
_onPanelSelected
.
bind
(
this
)
;
this
.
_onChangeSplitConsoleState
=
this
.
_onChangeSplitConsoleState
.
bind
(
this
)
;
this
.
_listProcessesAndCreateProxies
=
this
.
_listProcessesAndCreateProxies
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
get
webConsoleFront
(
)
{
const
proxy
=
this
.
getProxy
(
)
;
if
(
!
proxy
)
{
return
null
;
}
return
proxy
.
webConsoleFront
;
}
getProxy
(
)
{
return
this
.
proxy
;
}
getAllProxies
(
filterDisconnectedProxies
=
true
)
{
let
proxies
=
[
this
.
getProxy
(
)
]
;
if
(
this
.
additionalProxies
)
{
proxies
=
proxies
.
concat
(
this
.
additionalProxies
)
;
}
if
(
filterDisconnectedProxies
)
{
proxies
=
proxies
.
filter
(
proxy
=
>
{
return
proxy
.
webConsoleFront
&
&
!
!
proxy
.
webConsoleFront
.
actorID
;
}
)
;
}
return
proxies
;
}
init
(
)
{
if
(
this
.
_initializer
)
{
return
this
.
_initializer
;
}
this
.
_initializer
=
(
async
(
)
=
>
{
this
.
_initUI
(
)
;
await
this
.
_attachTargets
(
)
;
await
this
.
wrapper
.
init
(
)
;
const
id
=
WebConsoleUtils
.
supportsString
(
this
.
hudId
)
;
if
(
Services
.
obs
)
{
Services
.
obs
.
notifyObservers
(
id
"
web
-
console
-
created
"
)
;
}
}
)
(
)
;
return
this
.
_initializer
;
}
destroy
(
)
{
if
(
!
this
.
hud
)
{
return
;
}
this
.
React
=
this
.
ReactDOM
=
this
.
FrameView
=
null
;
if
(
this
.
outputNode
)
{
this
.
outputNode
.
innerHTML
=
"
"
;
}
if
(
this
.
jsterm
)
{
this
.
jsterm
.
destroy
(
)
;
this
.
jsterm
=
null
;
}
const
toolbox
=
this
.
hud
.
toolbox
;
if
(
toolbox
)
{
toolbox
.
off
(
"
webconsole
-
selected
"
this
.
_onPanelSelected
)
;
toolbox
.
off
(
"
split
-
console
"
this
.
_onChangeSplitConsoleState
)
;
toolbox
.
off
(
"
select
"
this
.
_onChangeSplitConsoleState
)
;
}
const
target
=
this
.
hud
.
currentTarget
;
if
(
target
)
{
target
.
client
.
mainRoot
.
off
(
"
processListChanged
"
this
.
_listProcessesAndCreateProxies
)
;
}
for
(
const
proxy
of
this
.
getAllProxies
(
)
)
{
proxy
.
disconnect
(
)
;
}
this
.
proxy
=
null
;
this
.
additionalProxies
=
null
;
this
.
window
=
this
.
hud
=
this
.
wrapper
=
null
;
}
async
switchToTarget
(
newTarget
)
{
const
packet
=
{
url
:
newTarget
.
url
title
:
newTarget
.
title
nativeConsoleAPI
:
true
}
;
this
.
handleTabWillNavigate
(
packet
)
;
for
(
const
proxy
of
this
.
getAllProxies
(
)
)
{
proxy
.
disconnect
(
)
;
}
this
.
proxy
=
null
;
this
.
additionalProxies
=
[
]
;
await
this
.
_attachTargets
(
)
;
this
.
handleTabNavigated
(
packet
)
;
}
clearOutput
(
clearStorage
event
)
{
if
(
event
)
{
event
.
preventDefault
(
)
;
}
if
(
this
.
wrapper
)
{
this
.
wrapper
.
dispatchMessagesClear
(
)
;
}
this
.
clearNetworkRequests
(
)
;
if
(
clearStorage
)
{
this
.
clearMessagesCache
(
)
;
}
this
.
emit
(
"
messages
-
cleared
"
)
;
}
clearNetworkRequests
(
)
{
for
(
const
proxy
of
this
.
getAllProxies
(
)
)
{
proxy
.
webConsoleFront
.
clearNetworkRequests
(
)
;
}
}
clearMessagesCache
(
)
{
for
(
const
proxy
of
this
.
getAllProxies
(
)
)
{
proxy
.
webConsoleFront
.
clearMessagesCache
(
)
;
}
}
clearPrivateMessages
(
)
{
if
(
this
.
wrapper
)
{
this
.
wrapper
.
dispatchPrivateMessagesClear
(
)
;
this
.
emit
(
"
private
-
messages
-
cleared
"
)
;
}
}
inspectObjectActor
(
objectActor
)
{
this
.
wrapper
.
dispatchMessageAdd
(
{
helperResult
:
{
type
:
"
inspectObject
"
object
:
objectActor
}
}
true
)
;
return
this
.
wrapper
;
}
getPanelWindow
(
)
{
return
this
.
window
;
}
logWarningAboutReplacedAPI
(
)
{
return
this
.
hud
.
currentTarget
.
logWarningInPage
(
l10n
.
getStr
(
"
ConsoleAPIDisabled
"
)
"
ConsoleAPIDisabled
"
)
;
}
async
setSaveRequestAndResponseBodies
(
value
)
{
if
(
!
this
.
webConsoleFront
)
{
return
null
;
}
const
newValue
=
!
!
value
;
const
toSet
=
{
"
NetworkMonitor
.
saveRequestAndResponseBodies
"
:
newValue
}
;
return
this
.
webConsoleFront
.
setPreferences
(
toSet
)
;
}
async
_attachTargets
(
)
{
const
target
=
this
.
hud
.
currentTarget
;
const
fissionSupport
=
Services
.
prefs
.
getBoolPref
(
PREFS
.
FEATURES
.
BROWSER_TOOLBOX_FISSION
)
;
const
needContentProcessMessagesListener
=
target
.
isParentProcess
&
&
!
target
.
isAddon
&
&
!
fissionSupport
;
this
.
proxy
=
new
WebConsoleConnectionProxy
(
this
target
needContentProcessMessagesListener
)
;
const
onConnect
=
this
.
proxy
.
connect
(
)
;
if
(
fissionSupport
&
&
target
.
isParentProcess
&
&
!
target
.
isAddon
)
{
this
.
additionalProxies
=
[
]
;
await
this
.
_listProcessesAndCreateProxies
(
)
;
target
.
client
.
mainRoot
.
on
(
"
processListChanged
"
this
.
_listProcessesAndCreateProxies
)
;
}
await
onConnect
;
}
async
_listProcessesAndCreateProxies
(
)
{
const
target
=
this
.
hud
.
currentTarget
;
const
{
mainRoot
}
=
target
.
client
;
const
{
processes
}
=
await
mainRoot
.
listProcesses
(
)
;
if
(
!
this
.
additionalProxies
)
{
return
;
}
const
newProxies
=
[
]
;
for
(
const
processDescriptor
of
processes
)
{
const
targetFront
=
await
processDescriptor
.
getTarget
(
)
;
if
(
targetFront
=
=
=
target
)
{
continue
;
}
if
(
!
targetFront
)
{
console
.
warn
(
"
Can
'
t
retrieve
the
target
front
for
process
"
processDescriptor
)
;
continue
;
}
if
(
this
.
additionalProxies
.
some
(
proxy
=
>
proxy
.
target
=
=
targetFront
)
)
{
continue
;
}
const
proxy
=
new
WebConsoleConnectionProxy
(
this
targetFront
)
;
newProxies
.
push
(
proxy
)
;
this
.
additionalProxies
.
push
(
proxy
)
;
}
await
Promise
.
all
(
newProxies
.
map
(
proxy
=
>
proxy
.
connect
(
)
)
)
;
}
_initUI
(
)
{
this
.
document
=
this
.
window
.
document
;
this
.
rootElement
=
this
.
document
.
documentElement
;
this
.
outputNode
=
this
.
document
.
getElementById
(
"
app
-
wrapper
"
)
;
const
toolbox
=
this
.
hud
.
toolbox
;
const
WebConsoleWrapper
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
webconsole
/
"
window
:
this
.
window
}
)
.
require
(
"
.
/
webconsole
-
wrapper
"
)
;
this
.
wrapper
=
new
WebConsoleWrapper
(
this
.
outputNode
this
toolbox
this
.
document
)
;
this
.
_initShortcuts
(
)
;
this
.
_initOutputSyntaxHighlighting
(
)
;
if
(
toolbox
)
{
toolbox
.
on
(
"
webconsole
-
selected
"
this
.
_onPanelSelected
)
;
toolbox
.
on
(
"
split
-
console
"
this
.
_onChangeSplitConsoleState
)
;
toolbox
.
on
(
"
select
"
this
.
_onChangeSplitConsoleState
)
;
}
}
_initOutputSyntaxHighlighting
(
)
{
const
syntaxHighlightNode
=
node
=
>
{
const
editor
=
this
.
jsterm
&
&
this
.
jsterm
.
editor
;
if
(
node
&
&
editor
)
{
node
.
classList
.
add
(
"
cm
-
s
-
mozilla
"
)
;
editor
.
CodeMirror
.
runMode
(
node
.
textContent
"
application
/
javascript
"
node
)
;
}
}
;
const
win
=
this
.
window
;
win
.
customElements
.
define
(
"
syntax
-
highlighted
"
class
extends
win
.
HTMLElement
{
connectedCallback
(
)
{
if
(
!
this
.
connected
)
{
this
.
connected
=
true
;
syntaxHighlightNode
(
this
)
;
}
}
}
)
;
}
_initShortcuts
(
)
{
const
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
window
}
)
;
let
clearShortcut
;
if
(
AppConstants
.
platform
=
=
=
"
macosx
"
)
{
const
alternativaClearShortcut
=
l10n
.
getStr
(
"
webconsole
.
clear
.
alternativeKeyOSX
"
)
;
shortcuts
.
on
(
alternativaClearShortcut
event
=
>
this
.
clearOutput
(
true
event
)
)
;
clearShortcut
=
l10n
.
getStr
(
"
webconsole
.
clear
.
keyOSX
"
)
;
}
else
{
clearShortcut
=
l10n
.
getStr
(
"
webconsole
.
clear
.
key
"
)
;
}
shortcuts
.
on
(
clearShortcut
event
=
>
this
.
clearOutput
(
true
event
)
)
;
if
(
this
.
isBrowserConsole
)
{
this
.
window
.
focus
(
)
;
shortcuts
.
on
(
l10n
.
getStr
(
"
webconsole
.
close
.
key
"
)
this
.
window
.
close
.
bind
(
this
.
window
)
)
;
ZoomKeys
.
register
(
this
.
window
shortcuts
)
;
shortcuts
.
on
(
"
CmdOrCtrl
+
Alt
+
R
"
quickRestart
)
;
}
else
if
(
Services
.
prefs
.
getBoolPref
(
PREF_SIDEBAR_ENABLED
)
)
{
shortcuts
.
on
(
"
Esc
"
event
=
>
{
this
.
wrapper
.
dispatchSidebarClose
(
)
;
if
(
this
.
jsterm
)
{
this
.
jsterm
.
focus
(
)
;
}
}
)
;
}
}
releaseActor
(
actor
)
{
const
proxy
=
this
.
getProxy
(
)
;
if
(
!
proxy
)
{
return
null
;
}
return
proxy
.
releaseActor
(
actor
)
;
}
evaluateJSAsync
(
expression
options
)
{
return
this
.
getProxy
(
)
.
webConsoleFront
.
evaluateJSAsync
(
expression
options
)
;
}
getLongString
(
grip
)
{
this
.
getProxy
(
)
.
webConsoleFront
.
getString
(
grip
)
;
}
_onPanelSelected
(
)
{
if
(
this
.
jsterm
)
{
this
.
jsterm
.
focus
(
)
;
}
}
_onChangeSplitConsoleState
(
)
{
this
.
wrapper
.
dispatchSplitConsoleCloseButtonToggle
(
)
;
}
async
handleTabNavigated
(
packet
)
{
if
(
!
packet
.
nativeConsoleAPI
)
{
this
.
logWarningAboutReplacedAPI
(
)
;
}
await
this
.
wrapper
.
waitAsyncDispatches
(
)
;
this
.
emit
(
"
reloaded
"
)
;
}
handleTabWillNavigate
(
packet
)
{
this
.
wrapper
.
dispatchTabWillNavigate
(
packet
)
;
}
getInputCursor
(
)
{
return
this
.
jsterm
&
&
this
.
jsterm
.
getSelectionStart
(
)
;
}
getJsTermTooltipAnchor
(
)
{
return
this
.
outputNode
.
querySelector
(
"
.
CodeMirror
-
cursor
"
)
;
}
attachRef
(
id
node
)
{
this
[
id
]
=
node
;
}
getFrameActor
(
)
{
const
state
=
this
.
hud
.
getDebuggerFrames
(
)
;
if
(
!
state
)
{
return
{
frameActor
:
null
webConsoleFront
:
this
.
webConsoleFront
}
;
}
const
grip
=
state
.
frames
[
state
.
selected
]
;
if
(
!
grip
)
{
return
{
frameActor
:
null
webConsoleFront
:
this
.
webConsoleFront
}
;
}
return
{
frameActor
:
grip
.
actor
webConsoleFront
:
state
.
target
.
activeConsole
}
;
}
getSelectedNodeFront
(
)
{
const
inspectorSelection
=
this
.
hud
.
getInspectorSelection
(
)
;
if
(
inspectorSelection
)
{
return
inspectorSelection
.
nodeFront
;
}
return
null
;
}
onMessageHover
(
type
message
)
{
this
.
emit
(
"
message
-
hover
"
type
message
)
;
}
}
function
quickRestart
(
)
{
const
{
Cc
Ci
}
=
require
(
"
chrome
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
startupcache
-
invalidate
"
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
env
.
set
(
"
MOZ_DISABLE_SAFE_MODE_KEY
"
"
1
"
)
;
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eAttemptQuit
|
Ci
.
nsIAppStartup
.
eRestart
)
;
}
exports
.
WebConsoleUI
=
WebConsoleUI
;
