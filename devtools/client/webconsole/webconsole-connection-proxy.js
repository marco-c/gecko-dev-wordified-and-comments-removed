"
use
strict
"
;
const
{
Cc
Ci
Cu
}
=
require
(
"
chrome
"
)
;
const
{
Utils
:
WebConsoleUtils
CONSOLE_WORKER_IDS
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
"
)
;
const
{
getSourceNames
}
=
require
(
"
devtools
/
client
/
shared
/
source
-
utils
"
)
;
const
BrowserLoaderModule
=
{
}
;
Cu
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
BrowserLoaderModule
)
;
const
promise
=
require
(
"
promise
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
ErrorDocs
=
require
(
"
devtools
/
server
/
actors
/
errordocs
"
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
loader
.
lazyServiceGetter
(
this
"
clipboardHelper
"
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
"
nsIClipboardHelper
"
)
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
loader
.
lazyRequireGetter
(
this
"
AutocompletePopup
"
"
devtools
/
client
/
shared
/
autocomplete
-
popup
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ToolSidebar
"
"
devtools
/
client
/
framework
/
sidebar
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ConsoleOutput
"
"
devtools
/
client
/
webconsole
/
console
-
output
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
Messages
"
"
devtools
/
client
/
webconsole
/
console
-
output
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
EnvironmentClient
"
"
devtools
/
shared
/
client
/
main
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ObjectClient
"
"
devtools
/
shared
/
client
/
main
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
system
"
"
devtools
/
shared
/
system
"
)
;
loader
.
lazyRequireGetter
(
this
"
JSTerm
"
"
devtools
/
client
/
webconsole
/
jsterm
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
gSequenceId
"
"
devtools
/
client
/
webconsole
/
jsterm
"
true
)
;
loader
.
lazyImporter
(
this
"
VariablesView
"
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
VariablesView
.
jsm
"
)
;
loader
.
lazyImporter
(
this
"
VariablesViewController
"
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
VariablesViewController
.
jsm
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
KeyShortcuts
"
"
devtools
/
client
/
shared
/
key
-
shortcuts
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ZoomKeys
"
"
devtools
/
client
/
shared
/
zoom
-
keys
"
)
;
const
{
PluralForm
}
=
require
(
"
devtools
/
shared
/
plural
-
form
"
)
;
const
STRINGS_URI
=
"
devtools
/
client
/
locales
/
webconsole
.
properties
"
;
var
l10n
=
new
WebConsoleUtils
.
L10n
(
STRINGS_URI
)
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
MIXED_CONTENT_LEARN_MORE
=
"
https
:
/
/
developer
.
mozilla
.
org
/
docs
/
Web
/
Security
/
Mixed_content
"
;
const
IGNORED_SOURCE_URLS
=
[
"
debugger
eval
code
"
]
;
const
SEARCH_DELAY
=
200
;
const
DEFAULT_LOG_LIMIT
=
1000
;
const
CATEGORY_NETWORK
=
0
;
const
CATEGORY_CSS
=
1
;
const
CATEGORY_JS
=
2
;
const
CATEGORY_WEBDEV
=
3
;
const
CATEGORY_INPUT
=
4
;
const
CATEGORY_OUTPUT
=
5
;
const
CATEGORY_SECURITY
=
6
;
const
CATEGORY_SERVER
=
7
;
const
SEVERITY_ERROR
=
0
;
const
SEVERITY_WARNING
=
1
;
const
SEVERITY_INFO
=
2
;
const
SEVERITY_LOG
=
3
;
const
CATEGORY_CLASS_FRAGMENTS
=
[
"
network
"
"
cssparser
"
"
exception
"
"
console
"
"
input
"
"
output
"
"
security
"
"
server
"
]
;
const
SEVERITY_CLASS_FRAGMENTS
=
[
"
error
"
"
warn
"
"
info
"
"
log
"
]
;
const
MESSAGE_PREFERENCE_KEYS
=
[
[
"
network
"
"
netwarn
"
"
netxhr
"
"
networkinfo
"
]
[
"
csserror
"
"
cssparser
"
null
"
csslog
"
]
[
"
exception
"
"
jswarn
"
null
"
jslog
"
]
[
"
error
"
"
warn
"
"
info
"
"
log
"
]
[
null
null
null
null
]
[
null
null
null
null
]
[
"
secerror
"
"
secwarn
"
null
null
]
[
"
servererror
"
"
serverwarn
"
"
serverinfo
"
"
serverlog
"
]
]
;
const
LEVELS
=
{
error
:
SEVERITY_ERROR
exception
:
SEVERITY_ERROR
assert
:
SEVERITY_ERROR
warn
:
SEVERITY_WARNING
info
:
SEVERITY_INFO
log
:
SEVERITY_LOG
clear
:
SEVERITY_LOG
trace
:
SEVERITY_LOG
table
:
SEVERITY_LOG
debug
:
SEVERITY_LOG
dir
:
SEVERITY_LOG
dirxml
:
SEVERITY_LOG
group
:
SEVERITY_LOG
groupCollapsed
:
SEVERITY_LOG
groupEnd
:
SEVERITY_LOG
time
:
SEVERITY_LOG
timeEnd
:
SEVERITY_LOG
count
:
SEVERITY_LOG
}
;
const
WORKERTYPES_PREFKEYS
=
[
"
sharedworkers
"
"
serviceworkers
"
"
windowlessworkers
"
]
;
const
MIN_HTTP_ERROR_CODE
=
400
;
const
MAX_HTTP_ERROR_CODE
=
599
;
const
GROUP_INDENT
=
12
;
const
MESSAGES_IN_INTERVAL
=
DEFAULT_LOG_LIMIT
;
const
OUTPUT_INTERVAL
=
20
;
const
MAX_CLEANUP_TIME
=
10
;
const
THROTTLE_UPDATES
=
1000
;
const
FILTER_PREFS_PREFIX
=
"
devtools
.
webconsole
.
filter
.
"
;
const
MIN_FONT_SIZE
=
10
;
const
PREF_CONNECTION_TIMEOUT
=
"
devtools
.
debugger
.
remote
-
timeout
"
;
const
PREF_PERSISTLOG
=
"
devtools
.
webconsole
.
persistlog
"
;
const
PREF_MESSAGE_TIMESTAMP
=
"
devtools
.
webconsole
.
timestampMessages
"
;
const
PREF_NEW_FRONTEND_ENABLED
=
"
devtools
.
webconsole
.
new
-
frontend
-
enabled
"
;
function
WebConsoleConnectionProxy
(
webConsoleFrame
target
)
{
this
.
webConsoleFrame
=
webConsoleFrame
;
this
.
target
=
target
;
this
.
_onPageError
=
this
.
_onPageError
.
bind
(
this
)
;
this
.
_onLogMessage
=
this
.
_onLogMessage
.
bind
(
this
)
;
this
.
_onConsoleAPICall
=
this
.
_onConsoleAPICall
.
bind
(
this
)
;
this
.
_onNetworkEvent
=
this
.
_onNetworkEvent
.
bind
(
this
)
;
this
.
_onNetworkEventUpdate
=
this
.
_onNetworkEventUpdate
.
bind
(
this
)
;
this
.
_onFileActivity
=
this
.
_onFileActivity
.
bind
(
this
)
;
this
.
_onReflowActivity
=
this
.
_onReflowActivity
.
bind
(
this
)
;
this
.
_onServerLogCall
=
this
.
_onServerLogCall
.
bind
(
this
)
;
this
.
_onTabNavigated
=
this
.
_onTabNavigated
.
bind
(
this
)
;
this
.
_onAttachConsole
=
this
.
_onAttachConsole
.
bind
(
this
)
;
this
.
_onCachedMessages
=
this
.
_onCachedMessages
.
bind
(
this
)
;
this
.
_connectionTimeout
=
this
.
_connectionTimeout
.
bind
(
this
)
;
this
.
_onLastPrivateContextExited
=
this
.
_onLastPrivateContextExited
.
bind
(
this
)
;
}
WebConsoleConnectionProxy
.
prototype
=
{
webConsoleFrame
:
null
target
:
null
client
:
null
webConsoleClient
:
null
connected
:
false
_connectTimer
:
null
_connectDefer
:
null
_disconnecter
:
null
_consoleActor
:
null
_hasNativeConsoleAPI
:
false
connect
:
function
(
)
{
if
(
this
.
_connectDefer
)
{
return
this
.
_connectDefer
.
promise
;
}
this
.
_connectDefer
=
promise
.
defer
(
)
;
let
timeout
=
Services
.
prefs
.
getIntPref
(
PREF_CONNECTION_TIMEOUT
)
;
this
.
_connectTimer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
this
.
_connectTimer
.
initWithCallback
(
this
.
_connectionTimeout
timeout
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
let
connPromise
=
this
.
_connectDefer
.
promise
;
connPromise
.
then
(
(
)
=
>
{
this
.
_connectTimer
.
cancel
(
)
;
this
.
_connectTimer
=
null
;
}
(
)
=
>
{
this
.
_connectTimer
=
null
;
}
)
;
let
client
=
this
.
client
=
this
.
target
.
client
;
if
(
this
.
target
.
isWorkerTarget
)
{
}
else
{
client
.
addListener
(
"
logMessage
"
this
.
_onLogMessage
)
;
client
.
addListener
(
"
pageError
"
this
.
_onPageError
)
;
client
.
addListener
(
"
consoleAPICall
"
this
.
_onConsoleAPICall
)
;
client
.
addListener
(
"
fileActivity
"
this
.
_onFileActivity
)
;
client
.
addListener
(
"
reflowActivity
"
this
.
_onReflowActivity
)
;
client
.
addListener
(
"
serverLogCall
"
this
.
_onServerLogCall
)
;
client
.
addListener
(
"
lastPrivateContextExited
"
this
.
_onLastPrivateContextExited
)
;
}
this
.
target
.
on
(
"
will
-
navigate
"
this
.
_onTabNavigated
)
;
this
.
target
.
on
(
"
navigate
"
this
.
_onTabNavigated
)
;
this
.
_consoleActor
=
this
.
target
.
form
.
consoleActor
;
if
(
this
.
target
.
isTabActor
)
{
let
tab
=
this
.
target
.
form
;
this
.
webConsoleFrame
.
onLocationChange
(
tab
.
url
tab
.
title
)
;
}
this
.
_attachConsole
(
)
;
return
connPromise
;
}
_connectionTimeout
:
function
(
)
{
let
error
=
{
error
:
"
timeout
"
message
:
l10n
.
getStr
(
"
connectionTimeout
"
)
}
;
this
.
_connectDefer
.
reject
(
error
)
;
}
_attachConsole
:
function
(
)
{
let
listeners
=
[
"
PageError
"
"
ConsoleAPI
"
"
NetworkActivity
"
"
FileActivity
"
]
;
this
.
client
.
attachConsole
(
this
.
_consoleActor
listeners
this
.
_onAttachConsole
)
;
}
_onAttachConsole
:
function
(
response
webConsoleClient
)
{
if
(
response
.
error
)
{
console
.
error
(
"
attachConsole
failed
:
"
+
response
.
error
+
"
"
+
response
.
message
)
;
this
.
_connectDefer
.
reject
(
response
)
;
return
;
}
this
.
webConsoleClient
=
webConsoleClient
;
this
.
_hasNativeConsoleAPI
=
response
.
nativeConsoleAPI
;
let
saveBodies
=
!
this
.
webConsoleFrame
.
isBrowserConsole
;
this
.
webConsoleFrame
.
setSaveRequestAndResponseBodies
(
saveBodies
)
;
this
.
webConsoleClient
.
on
(
"
networkEvent
"
this
.
_onNetworkEvent
)
;
this
.
webConsoleClient
.
on
(
"
networkEventUpdate
"
this
.
_onNetworkEventUpdate
)
;
let
msgs
=
[
"
PageError
"
"
ConsoleAPI
"
]
;
this
.
webConsoleClient
.
getCachedMessages
(
msgs
this
.
_onCachedMessages
)
;
this
.
webConsoleFrame
.
_onUpdateListeners
(
)
;
}
dispatchMessageAdd
:
function
(
packet
)
{
this
.
webConsoleFrame
.
newConsoleOutput
.
dispatchMessageAdd
(
packet
)
;
}
dispatchMessagesAdd
:
function
(
packets
)
{
this
.
webConsoleFrame
.
newConsoleOutput
.
dispatchMessagesAdd
(
packets
)
;
}
_onCachedMessages
:
function
(
response
)
{
if
(
response
.
error
)
{
console
.
error
(
"
Web
Console
getCachedMessages
error
:
"
+
response
.
error
+
"
"
+
response
.
message
)
;
this
.
_connectDefer
.
reject
(
response
)
;
return
;
}
if
(
!
this
.
_connectTimer
)
{
console
.
error
(
"
Web
Console
getCachedMessages
error
:
invalid
state
.
"
)
;
}
let
messages
=
response
.
messages
.
concat
(
.
.
.
this
.
webConsoleClient
.
getNetworkEvents
(
)
)
;
messages
.
sort
(
(
a
b
)
=
>
a
.
timeStamp
-
b
.
timeStamp
)
;
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
this
.
dispatchMessagesAdd
(
messages
)
;
}
else
{
this
.
webConsoleFrame
.
displayCachedMessages
(
messages
)
;
if
(
!
this
.
_hasNativeConsoleAPI
)
{
this
.
webConsoleFrame
.
logWarningAboutReplacedAPI
(
)
;
}
}
this
.
connected
=
true
;
this
.
_connectDefer
.
resolve
(
this
)
;
}
_onPageError
:
function
(
type
packet
)
{
if
(
this
.
webConsoleFrame
&
&
packet
.
from
=
=
this
.
_consoleActor
)
{
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
this
.
dispatchMessageAdd
(
packet
)
;
return
;
}
this
.
webConsoleFrame
.
handlePageError
(
packet
.
pageError
)
;
}
}
_onLogMessage
:
function
(
type
packet
)
{
if
(
this
.
webConsoleFrame
&
&
packet
.
from
=
=
this
.
_consoleActor
)
{
this
.
webConsoleFrame
.
handleLogMessage
(
packet
)
;
}
}
_onConsoleAPICall
:
function
(
type
packet
)
{
if
(
this
.
webConsoleFrame
&
&
packet
.
from
=
=
this
.
_consoleActor
)
{
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
this
.
dispatchMessageAdd
(
packet
)
;
}
else
{
this
.
webConsoleFrame
.
handleConsoleAPICall
(
packet
.
message
)
;
}
}
}
_onNetworkEvent
:
function
(
type
networkInfo
)
{
if
(
this
.
webConsoleFrame
)
{
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
this
.
dispatchMessageAdd
(
networkInfo
)
;
}
else
{
this
.
webConsoleFrame
.
handleNetworkEvent
(
networkInfo
)
;
}
}
}
_onNetworkEventUpdate
:
function
(
type
{
packet
networkInfo
}
)
{
if
(
this
.
webConsoleFrame
)
{
this
.
webConsoleFrame
.
handleNetworkEventUpdate
(
networkInfo
packet
)
;
}
}
_onFileActivity
:
function
(
type
packet
)
{
if
(
this
.
webConsoleFrame
&
&
packet
.
from
=
=
this
.
_consoleActor
)
{
this
.
webConsoleFrame
.
handleFileActivity
(
packet
.
uri
)
;
}
}
_onReflowActivity
:
function
(
type
packet
)
{
if
(
this
.
webConsoleFrame
&
&
packet
.
from
=
=
this
.
_consoleActor
)
{
this
.
webConsoleFrame
.
handleReflowActivity
(
packet
)
;
}
}
_onServerLogCall
:
function
(
type
packet
)
{
if
(
this
.
webConsoleFrame
&
&
packet
.
from
=
=
this
.
_consoleActor
)
{
this
.
webConsoleFrame
.
handleConsoleAPICall
(
packet
.
message
)
;
}
}
_onLastPrivateContextExited
:
function
(
type
packet
)
{
if
(
this
.
webConsoleFrame
&
&
packet
.
from
=
=
this
.
_consoleActor
)
{
this
.
webConsoleFrame
.
jsterm
.
clearPrivateMessages
(
)
;
}
}
_onTabNavigated
:
function
(
event
packet
)
{
if
(
!
this
.
webConsoleFrame
)
{
return
;
}
this
.
webConsoleFrame
.
handleTabNavigated
(
event
packet
)
;
}
releaseActor
:
function
(
actor
)
{
if
(
this
.
client
)
{
this
.
client
.
release
(
actor
)
;
}
}
disconnect
:
function
(
)
{
if
(
this
.
_disconnecter
)
{
return
this
.
_disconnecter
.
promise
;
}
this
.
_disconnecter
=
promise
.
defer
(
)
;
if
(
!
this
.
client
)
{
this
.
_disconnecter
.
resolve
(
null
)
;
return
this
.
_disconnecter
.
promise
;
}
this
.
client
.
removeListener
(
"
logMessage
"
this
.
_onLogMessage
)
;
this
.
client
.
removeListener
(
"
pageError
"
this
.
_onPageError
)
;
this
.
client
.
removeListener
(
"
consoleAPICall
"
this
.
_onConsoleAPICall
)
;
this
.
client
.
removeListener
(
"
fileActivity
"
this
.
_onFileActivity
)
;
this
.
client
.
removeListener
(
"
reflowActivity
"
this
.
_onReflowActivity
)
;
this
.
client
.
removeListener
(
"
serverLogCall
"
this
.
_onServerLogCall
)
;
this
.
client
.
removeListener
(
"
lastPrivateContextExited
"
this
.
_onLastPrivateContextExited
)
;
this
.
webConsoleClient
.
off
(
"
networkEvent
"
this
.
_onNetworkEvent
)
;
this
.
webConsoleClient
.
off
(
"
networkEventUpdate
"
this
.
_onNetworkEventUpdate
)
;
this
.
target
.
off
(
"
will
-
navigate
"
this
.
_onTabNavigated
)
;
this
.
target
.
off
(
"
navigate
"
this
.
_onTabNavigated
)
;
this
.
client
=
null
;
this
.
webConsoleClient
=
null
;
this
.
target
=
null
;
this
.
connected
=
false
;
this
.
webConsoleFrame
=
null
;
this
.
_disconnecter
.
resolve
(
null
)
;
return
this
.
_disconnecter
.
promise
;
}
}
;
exports
.
WebConsoleConnectionProxy
=
WebConsoleConnectionProxy
;
