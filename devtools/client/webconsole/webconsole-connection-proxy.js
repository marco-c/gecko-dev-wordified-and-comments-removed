"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
l10n
=
require
(
"
devtools
/
client
/
webconsole
/
utils
/
l10n
"
)
;
const
PREF_CONNECTION_TIMEOUT
=
"
devtools
.
debugger
.
remote
-
timeout
"
;
class
WebConsoleConnectionProxy
{
constructor
(
webConsoleUI
target
)
{
this
.
webConsoleUI
=
webConsoleUI
;
this
.
target
=
target
;
this
.
_connecter
=
null
;
this
.
_onTabNavigated
=
this
.
_onTabNavigated
.
bind
(
this
)
;
this
.
_onTabWillNavigate
=
this
.
_onTabWillNavigate
.
bind
(
this
)
;
this
.
_onLastPrivateContextExited
=
this
.
_onLastPrivateContextExited
.
bind
(
this
)
;
}
connect
(
)
{
if
(
this
.
_connecter
)
{
return
this
.
_connecter
;
}
if
(
this
.
target
.
isDestroyed
(
)
)
{
return
Promise
.
reject
(
"
target
was
destroyed
"
)
;
}
this
.
target
.
on
(
"
will
-
navigate
"
this
.
_onTabWillNavigate
)
;
this
.
target
.
on
(
"
navigate
"
this
.
_onTabNavigated
)
;
const
connection
=
(
async
(
)
=
>
{
this
.
webConsoleFront
=
await
this
.
target
.
getFront
(
"
console
"
)
;
const
saveBodies
=
!
this
.
webConsoleUI
.
isBrowserConsole
&
&
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
saveRequestAndResponseBodies
"
)
;
await
this
.
webConsoleUI
.
setSaveRequestAndResponseBodies
(
saveBodies
)
;
this
.
_addWebConsoleFrontEventListeners
(
)
;
if
(
this
.
webConsoleFront
&
&
!
this
.
webConsoleFront
.
hasNativeConsoleAPI
)
{
await
this
.
webConsoleUI
.
logWarningAboutReplacedAPI
(
)
;
}
}
)
(
)
;
let
timeoutId
;
const
connectionTimeout
=
new
Promise
(
(
_
reject
)
=
>
{
timeoutId
=
setTimeout
(
(
)
=
>
{
reject
(
{
error
:
"
timeout
"
message
:
l10n
.
getStr
(
"
connectionTimeout
"
)
}
)
;
}
Services
.
prefs
.
getIntPref
(
PREF_CONNECTION_TIMEOUT
)
)
;
}
)
;
this
.
_connecter
=
Promise
.
race
(
[
connection
connectionTimeout
]
)
;
connection
.
then
(
(
)
=
>
clearTimeout
(
timeoutId
)
)
;
return
this
.
_connecter
;
}
getConnectionPromise
(
)
{
return
this
.
_connecter
;
}
_addWebConsoleFrontEventListeners
(
)
{
if
(
!
this
.
webConsoleFront
)
{
return
;
}
this
.
webConsoleFront
.
on
(
"
lastPrivateContextExited
"
this
.
_onLastPrivateContextExited
)
;
}
_removeWebConsoleFrontEventListeners
(
)
{
this
.
webConsoleFront
.
off
(
"
lastPrivateContextExited
"
this
.
_onLastPrivateContextExited
)
;
}
_onLastPrivateContextExited
(
packet
)
{
if
(
this
.
webConsoleUI
)
{
this
.
webConsoleUI
.
clearPrivateMessages
(
)
;
}
}
_onTabNavigated
(
packet
)
{
if
(
!
this
.
webConsoleUI
)
{
return
;
}
this
.
webConsoleUI
.
handleTabNavigated
(
packet
)
;
}
_onTabWillNavigate
(
packet
)
{
if
(
!
this
.
webConsoleUI
)
{
return
;
}
this
.
webConsoleUI
.
handleTabWillNavigate
(
packet
)
;
}
disconnect
(
)
{
if
(
!
this
.
webConsoleFront
)
{
return
;
}
this
.
_removeWebConsoleFrontEventListeners
(
)
;
this
.
target
.
off
(
"
will
-
navigate
"
this
.
_onTabWillNavigate
)
;
this
.
target
.
off
(
"
navigate
"
this
.
_onTabNavigated
)
;
this
.
webConsoleFront
=
null
;
}
}
exports
.
WebConsoleConnectionProxy
=
WebConsoleConnectionProxy
;
