"
use
strict
"
;
const
{
Utils
:
WebConsoleUtils
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
l10n
=
require
(
"
devtools
/
client
/
webconsole
/
webconsole
-
l10n
"
)
;
const
PREF_CONNECTION_TIMEOUT
=
"
devtools
.
debugger
.
remote
-
timeout
"
;
function
WebConsoleConnectionProxy
(
webConsoleFrame
target
)
{
this
.
webConsoleFrame
=
webConsoleFrame
;
this
.
target
=
target
;
this
.
_onPageError
=
this
.
_onPageError
.
bind
(
this
)
;
this
.
_onLogMessage
=
this
.
_onLogMessage
.
bind
(
this
)
;
this
.
_onConsoleAPICall
=
this
.
_onConsoleAPICall
.
bind
(
this
)
;
this
.
_onNetworkEvent
=
this
.
_onNetworkEvent
.
bind
(
this
)
;
this
.
_onNetworkEventUpdate
=
this
.
_onNetworkEventUpdate
.
bind
(
this
)
;
this
.
_onFileActivity
=
this
.
_onFileActivity
.
bind
(
this
)
;
this
.
_onReflowActivity
=
this
.
_onReflowActivity
.
bind
(
this
)
;
this
.
_onServerLogCall
=
this
.
_onServerLogCall
.
bind
(
this
)
;
this
.
_onTabNavigated
=
this
.
_onTabNavigated
.
bind
(
this
)
;
this
.
_onAttachConsole
=
this
.
_onAttachConsole
.
bind
(
this
)
;
this
.
_onCachedMessages
=
this
.
_onCachedMessages
.
bind
(
this
)
;
this
.
_connectionTimeout
=
this
.
_connectionTimeout
.
bind
(
this
)
;
this
.
_onLastPrivateContextExited
=
this
.
_onLastPrivateContextExited
.
bind
(
this
)
;
}
WebConsoleConnectionProxy
.
prototype
=
{
webConsoleFrame
:
null
target
:
null
client
:
null
webConsoleClient
:
null
connected
:
false
_connectTimer
:
null
_connectDefer
:
null
_disconnecter
:
null
_consoleActor
:
null
_hasNativeConsoleAPI
:
false
connect
:
function
(
)
{
if
(
this
.
_connectDefer
)
{
return
this
.
_connectDefer
.
promise
;
}
this
.
_connectDefer
=
defer
(
)
;
let
timeout
=
Services
.
prefs
.
getIntPref
(
PREF_CONNECTION_TIMEOUT
)
;
this
.
_connectTimer
=
setTimeout
(
this
.
_connectionTimeout
timeout
)
;
let
connPromise
=
this
.
_connectDefer
.
promise
;
connPromise
.
then
(
(
)
=
>
{
clearTimeout
(
this
.
_connectTimer
)
;
this
.
_connectTimer
=
null
;
}
(
)
=
>
{
clearTimeout
(
this
.
_connectTimer
)
;
this
.
_connectTimer
=
null
;
}
)
;
let
client
=
this
.
client
=
this
.
target
.
client
;
client
.
addListener
(
"
logMessage
"
this
.
_onLogMessage
)
;
client
.
addListener
(
"
pageError
"
this
.
_onPageError
)
;
client
.
addListener
(
"
consoleAPICall
"
this
.
_onConsoleAPICall
)
;
client
.
addListener
(
"
fileActivity
"
this
.
_onFileActivity
)
;
client
.
addListener
(
"
reflowActivity
"
this
.
_onReflowActivity
)
;
client
.
addListener
(
"
serverLogCall
"
this
.
_onServerLogCall
)
;
client
.
addListener
(
"
lastPrivateContextExited
"
this
.
_onLastPrivateContextExited
)
;
this
.
target
.
on
(
"
will
-
navigate
"
this
.
_onTabNavigated
)
;
this
.
target
.
on
(
"
navigate
"
this
.
_onTabNavigated
)
;
this
.
_consoleActor
=
this
.
target
.
form
.
consoleActor
;
if
(
this
.
target
.
isTabActor
)
{
let
tab
=
this
.
target
.
form
;
this
.
webConsoleFrame
.
onLocationChange
(
tab
.
url
tab
.
title
)
;
}
this
.
_attachConsole
(
)
;
return
connPromise
;
}
_connectionTimeout
:
function
(
)
{
let
error
=
{
error
:
"
timeout
"
message
:
l10n
.
getStr
(
"
connectionTimeout
"
)
}
;
this
.
_connectDefer
.
reject
(
error
)
;
}
_attachConsole
:
function
(
)
{
let
listeners
=
[
"
PageError
"
"
ConsoleAPI
"
"
NetworkActivity
"
"
FileActivity
"
]
;
if
(
this
.
target
.
chrome
&
&
!
this
.
target
.
isAddon
)
{
listeners
.
push
(
"
ContentProcessMessages
"
)
;
}
this
.
client
.
attachConsole
(
this
.
_consoleActor
listeners
this
.
_onAttachConsole
)
;
}
_onAttachConsole
:
function
(
response
webConsoleClient
)
{
if
(
response
.
error
)
{
console
.
error
(
"
attachConsole
failed
:
"
+
response
.
error
+
"
"
+
response
.
message
)
;
this
.
_connectDefer
.
reject
(
response
)
;
return
;
}
this
.
webConsoleClient
=
webConsoleClient
;
this
.
_hasNativeConsoleAPI
=
response
.
nativeConsoleAPI
;
let
saveBodies
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
saveRequestAndResponseBodies
"
)
;
if
(
this
.
webConsoleFrame
.
isBrowserConsole
)
{
saveBodies
=
false
;
}
this
.
webConsoleFrame
.
setSaveRequestAndResponseBodies
(
saveBodies
)
;
this
.
webConsoleClient
.
on
(
"
networkEvent
"
this
.
_onNetworkEvent
)
;
this
.
webConsoleClient
.
on
(
"
networkEventUpdate
"
this
.
_onNetworkEventUpdate
)
;
let
msgs
=
[
"
PageError
"
"
ConsoleAPI
"
]
;
this
.
webConsoleClient
.
getCachedMessages
(
msgs
this
.
_onCachedMessages
)
;
this
.
webConsoleFrame
.
_onUpdateListeners
(
)
;
}
dispatchMessageAdd
:
function
(
packet
)
{
this
.
webConsoleFrame
.
newConsoleOutput
.
dispatchMessageAdd
(
packet
)
;
}
dispatchMessagesAdd
:
function
(
packets
)
{
this
.
webConsoleFrame
.
newConsoleOutput
.
dispatchMessagesAdd
(
packets
)
;
}
dispatchMessageUpdate
:
function
(
networkInfo
response
)
{
this
.
webConsoleFrame
.
newConsoleOutput
.
dispatchMessageUpdate
(
networkInfo
response
)
;
}
dispatchRequestUpdate
:
function
(
id
data
)
{
this
.
webConsoleFrame
.
newConsoleOutput
.
dispatchRequestUpdate
(
id
data
)
;
}
_onCachedMessages
:
function
(
response
)
{
if
(
response
.
error
)
{
console
.
error
(
"
Web
Console
getCachedMessages
error
:
"
+
response
.
error
+
"
"
+
response
.
message
)
;
this
.
_connectDefer
.
reject
(
response
)
;
return
;
}
if
(
!
this
.
_connectTimer
)
{
console
.
error
(
"
Web
Console
getCachedMessages
error
:
invalid
state
.
"
)
;
}
let
messages
=
response
.
messages
.
concat
(
.
.
.
this
.
webConsoleClient
.
getNetworkEvents
(
)
)
;
messages
.
sort
(
(
a
b
)
=
>
a
.
timeStamp
-
b
.
timeStamp
)
;
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
this
.
dispatchMessagesAdd
(
messages
)
;
}
else
{
this
.
webConsoleFrame
.
displayCachedMessages
(
messages
)
;
}
if
(
!
this
.
_hasNativeConsoleAPI
)
{
this
.
webConsoleFrame
.
logWarningAboutReplacedAPI
(
)
;
}
this
.
connected
=
true
;
this
.
_connectDefer
.
resolve
(
this
)
;
}
_onPageError
:
function
(
type
packet
)
{
if
(
!
this
.
webConsoleFrame
|
|
packet
.
from
!
=
this
.
_consoleActor
)
{
return
;
}
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
this
.
dispatchMessageAdd
(
packet
)
;
}
else
{
this
.
webConsoleFrame
.
handlePageError
(
packet
.
pageError
)
;
}
}
_onLogMessage
:
function
(
type
packet
)
{
if
(
!
this
.
webConsoleFrame
|
|
packet
.
from
!
=
this
.
_consoleActor
)
{
return
;
}
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
this
.
dispatchMessageAdd
(
packet
)
;
}
else
{
this
.
webConsoleFrame
.
handleLogMessage
(
packet
)
;
}
}
_onConsoleAPICall
:
function
(
type
packet
)
{
if
(
!
this
.
webConsoleFrame
|
|
packet
.
from
!
=
this
.
_consoleActor
)
{
return
;
}
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
this
.
dispatchMessageAdd
(
packet
)
;
}
else
{
this
.
webConsoleFrame
.
handleConsoleAPICall
(
packet
.
message
)
;
}
}
_onNetworkEvent
:
function
(
type
networkInfo
)
{
if
(
!
this
.
webConsoleFrame
)
{
return
;
}
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
this
.
dispatchMessageAdd
(
networkInfo
)
;
}
else
{
this
.
webConsoleFrame
.
handleNetworkEvent
(
networkInfo
)
;
}
}
_onNetworkEventUpdate
:
function
(
type
response
)
{
if
(
!
this
.
webConsoleFrame
)
{
return
;
}
let
{
packet
networkInfo
}
=
response
;
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
this
.
dispatchMessageUpdate
(
networkInfo
response
)
;
}
else
{
this
.
webConsoleFrame
.
handleNetworkEventUpdate
(
networkInfo
packet
)
;
}
}
_onFileActivity
:
function
(
type
packet
)
{
if
(
!
this
.
webConsoleFrame
|
|
packet
.
from
!
=
this
.
_consoleActor
)
{
return
;
}
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
}
else
{
this
.
webConsoleFrame
.
handleFileActivity
(
packet
.
uri
)
;
}
}
_onReflowActivity
:
function
(
type
packet
)
{
if
(
!
this
.
webConsoleFrame
|
|
packet
.
from
!
=
this
.
_consoleActor
)
{
return
;
}
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
}
else
{
this
.
webConsoleFrame
.
handleReflowActivity
(
packet
)
;
}
}
_onServerLogCall
:
function
(
type
packet
)
{
if
(
!
this
.
webConsoleFrame
|
|
packet
.
from
!
=
this
.
_consoleActor
)
{
return
;
}
if
(
this
.
webConsoleFrame
.
NEW_CONSOLE_OUTPUT_ENABLED
)
{
}
else
{
this
.
webConsoleFrame
.
handleConsoleAPICall
(
packet
.
message
)
;
}
}
_onLastPrivateContextExited
:
function
(
type
packet
)
{
if
(
this
.
webConsoleFrame
&
&
packet
.
from
=
=
this
.
_consoleActor
)
{
this
.
webConsoleFrame
.
jsterm
.
clearPrivateMessages
(
)
;
}
}
_onTabNavigated
:
function
(
event
packet
)
{
if
(
!
this
.
webConsoleFrame
)
{
return
;
}
this
.
webConsoleFrame
.
handleTabNavigated
(
event
packet
)
;
}
releaseActor
:
function
(
actor
)
{
if
(
this
.
client
)
{
this
.
client
.
release
(
actor
)
;
}
}
disconnect
:
function
(
)
{
if
(
this
.
_disconnecter
)
{
return
this
.
_disconnecter
.
promise
;
}
this
.
_disconnecter
=
defer
(
)
;
if
(
!
this
.
client
)
{
this
.
_disconnecter
.
resolve
(
null
)
;
return
this
.
_disconnecter
.
promise
;
}
this
.
client
.
removeListener
(
"
logMessage
"
this
.
_onLogMessage
)
;
this
.
client
.
removeListener
(
"
pageError
"
this
.
_onPageError
)
;
this
.
client
.
removeListener
(
"
consoleAPICall
"
this
.
_onConsoleAPICall
)
;
this
.
client
.
removeListener
(
"
fileActivity
"
this
.
_onFileActivity
)
;
this
.
client
.
removeListener
(
"
reflowActivity
"
this
.
_onReflowActivity
)
;
this
.
client
.
removeListener
(
"
serverLogCall
"
this
.
_onServerLogCall
)
;
this
.
client
.
removeListener
(
"
lastPrivateContextExited
"
this
.
_onLastPrivateContextExited
)
;
this
.
webConsoleClient
.
off
(
"
networkEvent
"
this
.
_onNetworkEvent
)
;
this
.
webConsoleClient
.
off
(
"
networkEventUpdate
"
this
.
_onNetworkEventUpdate
)
;
this
.
target
.
off
(
"
will
-
navigate
"
this
.
_onTabNavigated
)
;
this
.
target
.
off
(
"
navigate
"
this
.
_onTabNavigated
)
;
this
.
client
=
null
;
this
.
webConsoleClient
=
null
;
this
.
target
=
null
;
this
.
connected
=
false
;
this
.
webConsoleFrame
=
null
;
this
.
_disconnecter
.
resolve
(
null
)
;
return
this
.
_disconnecter
.
promise
;
}
}
;
exports
.
WebConsoleConnectionProxy
=
WebConsoleConnectionProxy
;
