"
use
strict
"
;
const
{
getAllNetworkMessagesUpdateById
}
=
require
(
"
devtools
/
client
/
webconsole
/
selectors
/
messages
"
)
;
const
{
getMessage
getAllMessagesUiById
}
=
require
(
"
devtools
/
client
/
webconsole
/
selectors
/
messages
"
)
;
const
{
MESSAGE_OPEN
NETWORK_MESSAGES_UPDATE
}
=
require
(
"
devtools
/
client
/
webconsole
/
constants
"
)
;
function
enableNetProvider
(
webConsoleUI
)
{
return
next
=
>
(
reducer
initialState
enhancer
)
=
>
{
function
netProviderEnhancer
(
state
action
)
{
const
dataProvider
=
webConsoleUI
&
&
webConsoleUI
.
wrapper
&
&
webConsoleUI
.
wrapper
.
networkDataProvider
;
if
(
!
dataProvider
)
{
return
reducer
(
state
action
)
;
}
const
{
type
}
=
action
;
const
newState
=
reducer
(
state
action
)
;
if
(
type
=
=
MESSAGE_OPEN
)
{
const
updates
=
getAllNetworkMessagesUpdateById
(
newState
)
;
const
message
=
updates
[
action
.
id
]
;
if
(
message
&
&
!
message
.
openedOnce
&
&
message
.
source
=
=
"
network
"
)
{
dataProvider
.
onNetworkResourceAvailable
(
message
)
;
dataProvider
.
onNetworkResourceUpdated
(
message
)
;
}
}
if
(
type
=
=
NETWORK_MESSAGES_UPDATE
)
{
const
allMessages
=
getAllMessagesUiById
(
newState
)
;
for
(
const
{
actor
}
of
action
.
messages
)
{
const
open
=
allMessages
.
includes
(
actor
)
;
if
(
open
)
{
const
message
=
getMessage
(
newState
actor
)
;
dataProvider
.
onNetworkResourceUpdated
(
message
)
;
}
}
}
return
newState
;
}
return
next
(
netProviderEnhancer
initialState
enhancer
)
;
}
;
}
module
.
exports
=
enableNetProvider
;
