"
use
strict
"
;
const
DataProvider
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
connector
/
firefox
-
data
-
provider
"
)
;
const
{
getAllNetworkMessagesUpdateById
}
=
require
(
"
devtools
/
client
/
webconsole
/
selectors
/
messages
"
)
;
const
{
getMessage
getAllMessagesUiById
}
=
require
(
"
devtools
/
client
/
webconsole
/
selectors
/
messages
"
)
;
const
{
MESSAGE_OPEN
NETWORK_MESSAGE_UPDATE
}
=
require
(
"
devtools
/
client
/
webconsole
/
constants
"
)
;
function
enableNetProvider
(
webConsoleUI
)
{
let
dataProvider
;
return
next
=
>
(
reducer
initialState
enhancer
)
=
>
{
function
netProviderEnhancer
(
state
action
)
{
const
proxy
=
webConsoleUI
?
webConsoleUI
.
getProxy
(
)
:
null
;
if
(
!
proxy
)
{
return
reducer
(
state
action
)
;
}
const
actions
=
{
updateRequest
:
(
id
data
batch
)
=
>
{
return
proxy
.
dispatchRequestUpdate
(
id
data
)
;
}
}
;
if
(
!
dataProvider
&
&
proxy
.
webConsoleClient
)
{
dataProvider
=
new
DataProvider
(
{
actions
webConsoleClient
:
proxy
.
webConsoleClient
}
)
;
proxy
.
networkDataProvider
=
dataProvider
;
}
const
type
=
action
.
type
;
const
newState
=
reducer
(
state
action
)
;
if
(
type
=
=
MESSAGE_OPEN
)
{
const
updates
=
getAllNetworkMessagesUpdateById
(
newState
)
;
const
message
=
updates
[
action
.
id
]
;
if
(
message
&
&
!
message
.
openedOnce
&
&
message
.
source
=
=
"
network
"
)
{
dataProvider
.
onNetworkEvent
(
message
)
;
message
.
updates
.
forEach
(
updateType
=
>
{
dataProvider
.
onNetworkEventUpdate
(
{
packet
:
{
updateType
:
updateType
}
networkInfo
:
message
}
)
;
}
)
;
}
}
if
(
type
=
=
NETWORK_MESSAGE_UPDATE
)
{
const
actor
=
action
.
response
.
networkInfo
.
actor
;
const
open
=
getAllMessagesUiById
(
state
)
.
includes
(
actor
)
;
if
(
open
)
{
const
message
=
getMessage
(
state
actor
)
;
message
.
updates
.
forEach
(
updateType
=
>
{
dataProvider
.
onNetworkEventUpdate
(
{
packet
:
{
updateType
}
networkInfo
:
message
}
)
;
}
)
;
}
}
return
newState
;
}
return
next
(
netProviderEnhancer
initialState
enhancer
)
;
}
;
}
module
.
exports
=
enableNetProvider
;
