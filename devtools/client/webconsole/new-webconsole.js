"
use
strict
"
;
const
{
Utils
:
WebConsoleUtils
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
old
-
event
-
emitter
"
)
;
const
promise
=
require
(
"
promise
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
{
JSTerm
}
=
require
(
"
devtools
/
client
/
webconsole
/
jsterm
"
)
;
const
{
WebConsoleConnectionProxy
}
=
require
(
"
devtools
/
client
/
webconsole
/
webconsole
-
connection
-
proxy
"
)
;
const
KeyShortcuts
=
require
(
"
devtools
/
client
/
shared
/
key
-
shortcuts
"
)
;
const
{
l10n
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
utils
/
messages
"
)
;
const
system
=
require
(
"
devtools
/
shared
/
system
"
)
;
const
ZoomKeys
=
require
(
"
devtools
/
client
/
shared
/
zoom
-
keys
"
)
;
const
PREF_MESSAGE_TIMESTAMP
=
"
devtools
.
webconsole
.
timestampMessages
"
;
const
PREF_PERSISTLOG
=
"
devtools
.
webconsole
.
persistlog
"
;
const
PREF_SIDEBAR_ENABLED
=
"
devtools
.
webconsole
.
sidebarToggle
"
;
function
NewWebConsoleFrame
(
webConsoleOwner
)
{
this
.
owner
=
webConsoleOwner
;
this
.
hudId
=
this
.
owner
.
hudId
;
this
.
isBrowserConsole
=
this
.
owner
.
_browserConsole
;
this
.
NEW_CONSOLE_OUTPUT_ENABLED
=
true
;
this
.
window
=
this
.
owner
.
iframeWindow
;
this
.
_onToolboxPrefChanged
=
this
.
_onToolboxPrefChanged
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
NewWebConsoleFrame
.
prototype
=
{
get
webConsoleClient
(
)
{
return
this
.
proxy
?
this
.
proxy
.
webConsoleClient
:
null
;
}
get
persistLog
(
)
{
return
this
.
isBrowserConsole
|
|
Services
.
prefs
.
getBoolPref
(
PREF_PERSISTLOG
)
;
}
async
init
(
)
{
this
.
_initUI
(
)
;
let
connectionInited
=
this
.
_initConnection
(
)
;
let
onJsTermHistoryLoaded
=
this
.
jsterm
.
historyLoaded
.
catch
(
(
)
=
>
{
}
)
;
await
Promise
.
all
(
[
connectionInited
onJsTermHistoryLoaded
]
)
;
await
this
.
newConsoleOutput
.
init
(
)
;
let
id
=
WebConsoleUtils
.
supportsString
(
this
.
hudId
)
;
if
(
Services
.
obs
)
{
Services
.
obs
.
notifyObservers
(
id
"
web
-
console
-
created
"
)
;
}
}
destroy
(
)
{
if
(
this
.
_destroyer
)
{
return
this
.
_destroyer
.
promise
;
}
this
.
_destroyer
=
defer
(
)
;
Services
.
prefs
.
removeObserver
(
PREF_MESSAGE_TIMESTAMP
this
.
_onToolboxPrefChanged
)
;
this
.
React
=
this
.
ReactDOM
=
this
.
FrameView
=
null
;
if
(
this
.
jsterm
)
{
this
.
jsterm
.
off
(
"
sidebar
-
opened
"
this
.
resize
)
;
this
.
jsterm
.
off
(
"
sidebar
-
closed
"
this
.
resize
)
;
this
.
jsterm
.
destroy
(
)
;
this
.
jsterm
=
null
;
}
let
toolbox
=
gDevTools
.
getToolbox
(
this
.
owner
.
target
)
;
if
(
toolbox
)
{
toolbox
.
off
(
"
webconsole
-
selected
"
this
.
_onPanelSelected
)
;
}
this
.
window
=
this
.
owner
=
this
.
newConsoleOutput
=
null
;
let
onDestroy
=
(
)
=
>
{
this
.
_destroyer
.
resolve
(
null
)
;
}
;
if
(
this
.
proxy
)
{
this
.
proxy
.
disconnect
(
)
.
then
(
onDestroy
)
;
this
.
proxy
=
null
;
}
else
{
onDestroy
(
)
;
}
return
this
.
_destroyer
.
promise
;
}
_onUpdateListeners
(
)
{
}
logWarningAboutReplacedAPI
(
)
{
this
.
owner
.
target
.
logErrorInPage
(
l10n
.
getStr
(
"
ConsoleAPIDisabled
"
)
"
ConsoleAPIDisabled
"
)
;
}
handleNetworkEventUpdate
(
)
{
}
setSaveRequestAndResponseBodies
(
value
)
{
if
(
!
this
.
webConsoleClient
)
{
return
promise
.
resolve
(
null
)
;
}
let
deferred
=
defer
(
)
;
let
newValue
=
!
!
value
;
let
toSet
=
{
"
NetworkMonitor
.
saveRequestAndResponseBodies
"
:
newValue
}
;
this
.
webConsoleClient
.
setPreferences
(
toSet
response
=
>
{
if
(
!
response
.
error
)
{
this
.
_saveRequestAndResponseBodies
=
newValue
;
deferred
.
resolve
(
response
)
;
}
else
{
deferred
.
reject
(
response
.
error
)
;
}
}
)
;
return
deferred
.
promise
;
}
_initConnection
:
function
(
)
{
if
(
this
.
_initDefer
)
{
return
this
.
_initDefer
.
promise
;
}
this
.
_initDefer
=
defer
(
)
;
this
.
proxy
=
new
WebConsoleConnectionProxy
(
this
this
.
owner
.
target
)
;
this
.
proxy
.
connect
(
)
.
then
(
(
)
=
>
{
this
.
_initDefer
.
resolve
(
this
)
;
}
(
reason
)
=
>
{
this
.
_initDefer
.
reject
(
reason
)
;
}
)
;
return
this
.
_initDefer
.
promise
;
}
_initUI
:
function
(
)
{
this
.
document
=
this
.
window
.
document
;
this
.
rootElement
=
this
.
document
.
documentElement
;
this
.
outputNode
=
this
.
document
.
getElementById
(
"
output
-
container
"
)
;
this
.
completeNode
=
this
.
document
.
querySelector
(
"
.
jsterm
-
complete
-
node
"
)
;
this
.
inputNode
=
this
.
document
.
querySelector
(
"
.
jsterm
-
input
-
node
"
)
;
this
.
jsterm
=
new
JSTerm
(
this
)
;
this
.
jsterm
.
init
(
)
;
let
toolbox
=
gDevTools
.
getToolbox
(
this
.
owner
.
target
)
;
this
.
window
.
jsterm
=
this
.
jsterm
;
let
Wrapper
=
this
.
owner
.
NewConsoleOutputWrapper
|
|
this
.
window
.
NewConsoleOutput
;
this
.
newConsoleOutput
=
new
Wrapper
(
this
.
outputNode
this
.
jsterm
toolbox
this
.
owner
this
.
document
)
;
Services
.
prefs
.
addObserver
(
PREF_MESSAGE_TIMESTAMP
this
.
_onToolboxPrefChanged
)
;
this
.
_onToolboxPrefChanged
(
)
;
this
.
_initShortcuts
(
)
;
}
_initShortcuts
:
function
(
)
{
let
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
window
}
)
;
shortcuts
.
on
(
l10n
.
getStr
(
"
webconsole
.
find
.
key
"
)
(
name
event
)
=
>
{
this
.
filterBox
.
focus
(
)
;
event
.
preventDefault
(
)
;
}
)
;
let
clearShortcut
;
if
(
system
.
constants
.
platform
=
=
=
"
macosx
"
)
{
clearShortcut
=
l10n
.
getStr
(
"
webconsole
.
clear
.
keyOSX
"
)
;
}
else
{
clearShortcut
=
l10n
.
getStr
(
"
webconsole
.
clear
.
key
"
)
;
}
shortcuts
.
on
(
clearShortcut
(
)
=
>
this
.
jsterm
.
clearOutput
(
true
)
)
;
if
(
this
.
isBrowserConsole
)
{
shortcuts
.
on
(
l10n
.
getStr
(
"
webconsole
.
close
.
key
"
)
this
.
window
.
close
.
bind
(
this
.
window
)
)
;
ZoomKeys
.
register
(
this
.
window
)
;
}
else
if
(
Services
.
prefs
.
getBoolPref
(
PREF_SIDEBAR_ENABLED
)
)
{
shortcuts
.
on
(
"
Esc
"
(
name
event
)
=
>
{
if
(
!
this
.
jsterm
.
autocompletePopup
|
|
!
this
.
jsterm
.
autocompletePopup
.
isOpen
)
{
this
.
newConsoleOutput
.
dispatchSidebarClose
(
)
;
}
}
)
;
}
}
onLocationChange
:
function
(
uri
title
)
{
this
.
contentLocation
=
uri
;
if
(
this
.
owner
.
onLocationChange
)
{
this
.
owner
.
onLocationChange
(
uri
title
)
;
}
}
_releaseObject
:
function
(
actor
)
{
if
(
this
.
proxy
)
{
this
.
proxy
.
releaseActor
(
actor
)
;
}
}
_onToolboxPrefChanged
:
function
(
)
{
let
newValue
=
Services
.
prefs
.
getBoolPref
(
PREF_MESSAGE_TIMESTAMP
)
;
this
.
newConsoleOutput
.
dispatchTimestampsToggle
(
newValue
)
;
}
handleTabNavigated
:
async
function
(
event
packet
)
{
if
(
event
=
=
"
will
-
navigate
"
)
{
if
(
this
.
persistLog
)
{
packet
.
_type
=
true
;
this
.
newConsoleOutput
.
dispatchMessageAdd
(
packet
)
;
}
else
{
this
.
jsterm
.
clearOutput
(
false
)
;
}
}
if
(
packet
.
url
)
{
this
.
onLocationChange
(
packet
.
url
packet
.
title
)
;
}
if
(
event
=
=
"
navigate
"
&
&
!
packet
.
nativeConsoleAPI
)
{
this
.
logWarningAboutReplacedAPI
(
)
;
}
if
(
event
=
=
"
navigate
"
)
{
await
this
.
newConsoleOutput
.
waitAsyncDispatches
(
)
;
this
.
emit
(
"
reloaded
"
)
;
}
}
}
;
exports
.
NewWebConsoleFrame
=
NewWebConsoleFrame
;
