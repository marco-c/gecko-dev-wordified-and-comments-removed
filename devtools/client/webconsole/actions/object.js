"
use
strict
"
;
loader
.
lazyServiceGetter
(
this
"
clipboardHelper
"
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
"
nsIClipboardHelper
"
)
;
loader
.
lazyRequireGetter
(
this
"
l10n
"
"
resource
:
/
/
devtools
/
client
/
webconsole
/
utils
/
messages
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
actions
"
"
resource
:
/
/
devtools
/
client
/
webconsole
/
actions
/
index
.
js
"
false
)
;
loader
.
lazyRequireGetter
(
this
"
PriorityLevels
"
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
NotificationBox
.
js
"
true
)
;
function
storeAsGlobal
(
actor
)
{
return
async
(
{
commands
hud
}
)
=
>
{
const
evalString
=
{
let
i
=
0
;
while
(
this
.
hasOwnProperty
(
"
temp
"
+
i
)
&
&
i
<
1000
)
{
i
+
+
;
}
this
[
"
temp
"
+
i
]
=
_self
;
"
temp
"
+
i
;
}
;
const
res
=
await
commands
.
scriptCommand
.
execute
(
evalString
{
selectedObjectActor
:
actor
disableBreaks
:
true
preferConsoleCommandsOverLocalSymbols
:
true
}
)
;
if
(
hud
.
toolbox
)
{
const
objectFront
=
commands
.
client
.
getFrontByID
(
actor
)
;
if
(
objectFront
)
{
const
targetActorID
=
objectFront
.
targetFront
?
.
actorID
;
if
(
targetActorID
)
{
hud
.
toolbox
.
selectTarget
(
targetActorID
)
;
}
}
}
hud
.
focusInput
(
)
;
hud
.
setInputValue
(
res
.
result
)
;
}
;
}
function
copyMessageObject
(
actor
variableText
)
{
return
async
(
{
commands
dispatch
}
)
=
>
{
if
(
actor
)
{
const
res
=
await
commands
.
scriptCommand
.
execute
(
"
copy
(
_self
)
"
{
selectedObjectActor
:
actor
disableBreaks
:
true
preferConsoleCommandsOverLocalSymbols
:
true
}
)
;
if
(
res
.
helperResult
.
type
=
=
=
"
copyValueToClipboard
"
)
{
clipboardHelper
.
copyString
(
res
.
helperResult
.
value
)
;
}
else
if
(
res
.
helperResult
.
type
=
=
=
"
error
"
)
{
const
nofificationName
=
"
copy
-
value
-
to
-
clipboard
-
notification
"
;
dispatch
(
actions
.
appendNotification
(
l10n
.
getFormatStr
(
res
.
helperResult
.
message
res
.
helperResult
.
messageArgs
)
nofificationName
null
PriorityLevels
.
PRIORITY_CRITICAL_HIGH
null
(
)
=
>
dispatch
(
actions
.
removeNotification
(
nofificationName
)
)
)
)
;
}
}
else
{
clipboardHelper
.
copyString
(
variableText
)
;
}
}
;
}
module
.
exports
=
{
storeAsGlobal
copyMessageObject
}
;
