"
use
strict
"
;
var
Services
=
require
(
"
Services
"
)
;
loader
.
lazyRequireGetter
(
this
"
Tools
"
"
devtools
/
client
/
definitions
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerClient
"
"
devtools
/
shared
/
client
/
debugger
-
client
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
l10n
"
"
devtools
/
client
/
webconsole
/
webconsole
-
l10n
"
)
;
loader
.
lazyRequireGetter
(
this
"
WebConsole
"
"
devtools
/
client
/
webconsole
/
webconsole
"
)
;
loader
.
lazyRequireGetter
(
this
"
BrowserConsole
"
"
devtools
/
client
/
webconsole
/
browser
-
console
"
)
;
const
BC_WINDOW_FEATURES
=
"
chrome
titlebar
toolbar
centerscreen
resizable
dialog
=
no
"
;
function
HUDService
(
)
{
this
.
consoles
=
new
Map
(
)
;
this
.
lastFinishedRequest
=
{
callback
:
null
}
;
}
HUDService
.
prototype
=
{
_browserConsoleID
:
null
_browserConsoleInitializing
:
null
consoles
:
null
_browerConsoleSessionState
:
false
storeBrowserConsoleSessionState
(
)
{
this
.
_browerConsoleSessionState
=
!
!
this
.
getBrowserConsole
(
)
;
}
getBrowserConsoleSessionState
(
)
{
return
this
.
_browerConsoleSessionState
;
}
lastFinishedRequest
:
null
currentContext
(
)
{
return
Services
.
wm
.
getMostRecentWindow
(
gDevTools
.
chromeWindowType
)
;
}
openWebConsole
(
target
iframeWindow
chromeWindow
)
{
const
hud
=
new
WebConsole
(
target
iframeWindow
chromeWindow
this
)
;
this
.
consoles
.
set
(
hud
.
hudId
hud
)
;
return
hud
.
init
(
)
;
}
openBrowserConsole
(
target
iframeWindow
chromeWindow
)
{
const
hud
=
new
BrowserConsole
(
target
iframeWindow
chromeWindow
this
)
;
this
.
_browserConsoleID
=
hud
.
hudId
;
this
.
consoles
.
set
(
hud
.
hudId
hud
)
;
return
hud
.
init
(
)
;
}
getHudReferenceById
(
id
)
{
return
this
.
consoles
.
get
(
id
)
;
}
async
toggleBrowserConsole
(
)
{
if
(
this
.
_browserConsoleID
)
{
const
hud
=
this
.
getHudReferenceById
(
this
.
_browserConsoleID
)
;
return
hud
.
destroy
(
)
;
}
if
(
this
.
_browserConsoleInitializing
)
{
return
this
.
_browserConsoleInitializing
;
}
async
function
connect
(
)
{
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
loader
=
new
DevToolsLoader
(
)
;
loader
.
freshCompartment
=
true
;
const
{
DebuggerServer
}
=
loader
.
require
(
"
devtools
/
server
/
main
"
)
;
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerActors
(
{
root
:
true
target
:
true
}
)
;
DebuggerServer
.
allowChromeProcess
=
true
;
const
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
await
client
.
connect
(
)
;
return
client
.
mainRoot
.
getMainProcess
(
)
;
}
async
function
openWindow
(
t
)
{
const
win
=
Services
.
ww
.
openWindow
(
null
Tools
.
webConsole
.
url
"
_blank
"
BC_WINDOW_FEATURES
null
)
;
await
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
DOMContentLoaded
"
resolve
{
once
:
true
}
)
;
}
)
;
win
.
document
.
title
=
l10n
.
getStr
(
"
browserConsole
.
title
"
)
;
return
{
iframeWindow
:
win
chromeWindow
:
win
}
;
}
this
.
_browserConsoleInitializing
=
(
async
(
)
=
>
{
const
target
=
await
connect
(
)
;
await
target
.
attach
(
)
;
const
{
iframeWindow
chromeWindow
}
=
await
openWindow
(
target
)
;
const
browserConsole
=
await
this
.
openBrowserConsole
(
target
iframeWindow
chromeWindow
)
;
return
browserConsole
;
}
)
(
)
;
const
browserConsole
=
await
this
.
_browserConsoleInitializing
;
this
.
_browserConsoleInitializing
=
null
;
return
browserConsole
;
}
openBrowserConsoleOrFocus
(
)
{
const
hud
=
this
.
getBrowserConsole
(
)
;
if
(
hud
)
{
hud
.
iframeWindow
.
focus
(
)
;
return
Promise
.
resolve
(
hud
)
;
}
return
this
.
toggleBrowserConsole
(
)
;
}
getBrowserConsole
(
)
{
return
this
.
getHudReferenceById
(
this
.
_browserConsoleID
)
;
}
}
;
exports
.
HUDService
=
new
HUDService
(
)
;
