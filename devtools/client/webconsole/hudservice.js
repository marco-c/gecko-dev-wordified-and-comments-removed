"
use
strict
"
;
var
WebConsoleUtils
=
require
(
"
devtools
/
client
/
webconsole
/
utils
"
)
.
Utils
;
const
{
extend
}
=
require
(
"
devtools
/
shared
/
extend
"
)
;
var
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
var
{
gDevToolsBrowser
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
-
browser
"
)
;
var
{
Tools
}
=
require
(
"
devtools
/
client
/
definitions
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
var
promise
=
require
(
"
promise
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
var
Services
=
require
(
"
Services
"
)
;
loader
.
lazyRequireGetter
(
this
"
Telemetry
"
"
devtools
/
client
/
shared
/
telemetry
"
)
;
loader
.
lazyRequireGetter
(
this
"
WebConsoleFrame
"
"
devtools
/
client
/
webconsole
/
webconsole
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
NewWebConsoleFrame
"
"
devtools
/
client
/
webconsole
/
new
-
webconsole
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerServer
"
"
devtools
/
server
/
main
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerClient
"
"
devtools
/
shared
/
client
/
debugger
-
client
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
showDoorhanger
"
"
devtools
/
client
/
shared
/
doorhanger
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
viewSource
"
"
devtools
/
client
/
shared
/
view
-
source
"
)
;
const
l10n
=
require
(
"
devtools
/
client
/
webconsole
/
webconsole
-
l10n
"
)
;
const
BC_WINDOW_FEATURES
=
"
chrome
titlebar
toolbar
centerscreen
resizable
dialog
=
no
"
;
const
BC_FILTER_PREFS_PREFIX
=
"
devtools
.
browserconsole
.
filter
.
"
;
var
gHudId
=
0
;
function
HUD_SERVICE
(
)
{
this
.
consoles
=
new
Map
(
)
;
this
.
lastFinishedRequest
=
{
callback
:
null
}
;
}
HUD_SERVICE
.
prototype
=
{
_browserConsoleID
:
null
_browserConsoleDefer
:
null
consoles
:
null
_browerConsoleSessionState
:
false
storeBrowserConsoleSessionState
(
)
{
this
.
_browerConsoleSessionState
=
!
!
this
.
getBrowserConsole
(
)
;
}
getBrowserConsoleSessionState
(
)
{
return
this
.
_browerConsoleSessionState
;
}
lastFinishedRequest
:
null
currentContext
(
)
{
return
Services
.
wm
.
getMostRecentWindow
(
gDevTools
.
chromeWindowType
)
;
}
openWebConsole
(
target
iframeWindow
chromeWindow
)
{
let
hud
=
new
WebConsole
(
target
iframeWindow
chromeWindow
)
;
this
.
consoles
.
set
(
hud
.
hudId
hud
)
;
return
hud
.
init
(
)
;
}
openBrowserConsole
(
target
iframeWindow
chromeWindow
)
{
let
hud
=
new
BrowserConsole
(
target
iframeWindow
chromeWindow
)
;
this
.
_browserConsoleID
=
hud
.
hudId
;
this
.
consoles
.
set
(
hud
.
hudId
hud
)
;
return
hud
.
init
(
)
;
}
getHudByWindow
(
contentWindow
)
{
for
(
let
[
hud
]
of
this
.
consoles
)
{
let
target
=
hud
.
target
;
if
(
target
&
&
target
.
tab
&
&
target
.
window
=
=
=
contentWindow
)
{
return
hud
;
}
}
return
null
;
}
getHudReferenceById
(
id
)
{
return
this
.
consoles
.
get
(
id
)
;
}
getOpenWebConsole
(
)
{
let
tab
=
this
.
currentContext
(
)
.
gBrowser
.
selectedTab
;
if
(
!
tab
|
|
!
TargetFactory
.
isKnownTab
(
tab
)
)
{
return
null
;
}
let
target
=
TargetFactory
.
forTab
(
tab
)
;
let
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
let
panel
=
toolbox
?
toolbox
.
getPanel
(
"
webconsole
"
)
:
null
;
return
panel
?
panel
.
hud
:
null
;
}
toggleBrowserConsole
(
)
{
if
(
this
.
_browserConsoleID
)
{
let
hud
=
this
.
getHudReferenceById
(
this
.
_browserConsoleID
)
;
return
hud
.
destroy
(
)
;
}
if
(
this
.
_browserConsoleDefer
)
{
return
this
.
_browserConsoleDefer
.
promise
;
}
this
.
_browserConsoleDefer
=
defer
(
)
;
function
connect
(
)
{
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerActors
(
{
root
:
true
tab
:
true
}
)
;
DebuggerServer
.
allowChromeProcess
=
true
;
let
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
return
client
.
connect
(
)
.
then
(
(
)
=
>
client
.
getProcess
(
)
)
.
then
(
response
=
>
{
return
{
form
:
response
.
form
client
chrome
:
true
isTabActor
:
true
}
;
}
)
;
}
let
target
;
function
getTarget
(
connection
)
{
return
TargetFactory
.
forRemoteTab
(
connection
)
;
}
function
openWindow
(
t
)
{
target
=
t
;
return
new
Promise
(
resolve
=
>
{
let
browserConsoleURL
=
Tools
.
webConsole
.
browserConsoleURL
;
let
win
=
Services
.
ww
.
openWindow
(
null
browserConsoleURL
"
_blank
"
BC_WINDOW_FEATURES
null
)
;
win
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
win
.
document
.
title
=
l10n
.
getStr
(
"
browserConsole
.
title
"
)
;
if
(
browserConsoleURL
=
=
=
Tools
.
webConsole
.
oldWebConsoleURL
)
{
resolve
(
{
iframeWindow
:
win
chromeWindow
:
win
}
)
;
}
else
{
win
.
document
.
querySelector
(
"
iframe
"
)
.
addEventListener
(
"
DOMContentLoaded
"
e
=
>
resolve
(
{
iframeWindow
:
e
.
target
.
defaultView
chromeWindow
:
win
}
)
{
once
:
true
}
)
;
}
}
{
once
:
true
}
)
;
}
)
;
}
connect
(
)
.
then
(
getTarget
)
.
then
(
openWindow
)
.
then
(
(
{
iframeWindow
chromeWindow
}
)
=
>
{
return
this
.
openBrowserConsole
(
target
iframeWindow
chromeWindow
)
.
then
(
browserConsole
=
>
{
this
.
_browserConsoleDefer
.
resolve
(
browserConsole
)
;
this
.
_browserConsoleDefer
=
null
;
}
)
;
}
console
.
error
.
bind
(
console
)
)
;
return
this
.
_browserConsoleDefer
.
promise
;
}
openBrowserConsoleOrFocus
(
)
{
let
hud
=
this
.
getBrowserConsole
(
)
;
if
(
hud
)
{
hud
.
iframeWindow
.
focus
(
)
;
return
promise
.
resolve
(
hud
)
;
}
return
this
.
toggleBrowserConsole
(
)
;
}
getBrowserConsole
(
)
{
return
this
.
getHudReferenceById
(
this
.
_browserConsoleID
)
;
}
}
;
function
WebConsole
(
target
iframeWindow
chromeWindow
)
{
this
.
iframeWindow
=
iframeWindow
;
this
.
chromeWindow
=
chromeWindow
;
this
.
hudId
=
"
hud_
"
+
+
+
gHudId
;
this
.
target
=
target
;
this
.
browserWindow
=
this
.
chromeWindow
.
top
;
let
element
=
this
.
browserWindow
.
document
.
documentElement
;
if
(
element
.
getAttribute
(
"
windowtype
"
)
!
=
gDevTools
.
chromeWindowType
)
{
this
.
browserWindow
=
HUDService
.
currentContext
(
)
;
}
if
(
iframeWindow
.
location
.
href
=
=
=
Tools
.
webConsole
.
newWebConsoleURL
)
{
this
.
ui
=
new
NewWebConsoleFrame
(
this
)
;
}
else
{
this
.
ui
=
new
WebConsoleFrame
(
this
)
;
}
}
WebConsole
.
prototype
=
{
iframeWindow
:
null
chromeWindow
:
null
browserWindow
:
null
hudId
:
null
target
:
null
ui
:
null
_browserConsole
:
false
_destroyer
:
null
get
lastFinishedRequestCallback
(
)
{
return
HUDService
.
lastFinishedRequest
.
callback
;
}
get
chromeUtilsWindow
(
)
{
if
(
this
.
browserWindow
)
{
return
this
.
browserWindow
;
}
return
this
.
chromeWindow
.
top
;
}
get
mainPopupSet
(
)
{
return
this
.
chromeUtilsWindow
.
document
.
getElementById
(
"
mainPopupSet
"
)
;
}
get
outputNode
(
)
{
return
this
.
ui
?
this
.
ui
.
outputNode
:
null
;
}
get
gViewSourceUtils
(
)
{
return
this
.
chromeUtilsWindow
.
gViewSourceUtils
;
}
init
(
)
{
return
this
.
ui
.
init
(
)
.
then
(
(
)
=
>
this
)
;
}
getPanelTitle
(
)
{
let
url
=
this
.
ui
?
this
.
ui
.
contentLocation
:
"
"
;
return
l10n
.
getFormatStr
(
"
webConsoleWindowTitleAndURL
"
[
url
]
)
;
}
get
jsterm
(
)
{
return
this
.
ui
?
this
.
ui
.
jsterm
:
null
;
}
_onClearButton
(
)
{
if
(
this
.
target
.
isLocalTab
)
{
gDevToolsBrowser
.
getDeveloperToolbar
(
this
.
browserWindow
)
.
resetErrorsCount
(
this
.
target
.
tab
)
;
}
}
setFilterState
(
)
{
this
.
ui
&
&
this
.
ui
.
setFilterState
.
apply
(
this
.
ui
arguments
)
;
}
openLink
(
link
e
)
{
let
isOSX
=
Services
.
appinfo
.
OS
=
=
"
Darwin
"
;
if
(
e
&
&
(
e
.
button
=
=
=
1
|
|
(
e
.
button
=
=
=
0
&
&
(
isOSX
?
e
.
metaKey
:
e
.
ctrlKey
)
)
)
)
{
this
.
chromeUtilsWindow
.
openUILinkIn
(
link
"
tabshifted
"
)
;
}
else
{
this
.
chromeUtilsWindow
.
openUILinkIn
(
link
"
tab
"
)
;
}
}
viewSource
(
sourceURL
sourceLine
)
{
let
browserWin
=
Services
.
wm
.
getMostRecentWindow
(
gDevTools
.
chromeWindowType
)
;
if
(
browserWin
&
&
browserWin
.
BrowserViewSourceOfDocument
)
{
return
browserWin
.
BrowserViewSourceOfDocument
(
{
URL
:
sourceURL
lineNumber
:
sourceLine
}
)
;
}
return
this
.
gViewSourceUtils
.
viewSource
(
sourceURL
null
this
.
iframeWindow
.
document
sourceLine
|
|
0
)
;
}
viewSourceInStyleEditor
(
sourceURL
sourceLine
)
{
let
toolbox
=
gDevTools
.
getToolbox
(
this
.
target
)
;
if
(
!
toolbox
)
{
this
.
viewSource
(
sourceURL
sourceLine
)
;
return
;
}
toolbox
.
viewSourceInStyleEditor
(
sourceURL
sourceLine
)
;
}
viewSourceInDebugger
(
sourceURL
sourceLine
)
{
let
toolbox
=
gDevTools
.
getToolbox
(
this
.
target
)
;
if
(
!
toolbox
)
{
this
.
viewSource
(
sourceURL
sourceLine
)
;
return
;
}
toolbox
.
viewSourceInDebugger
(
sourceURL
sourceLine
)
.
then
(
(
)
=
>
{
this
.
ui
.
emit
(
"
source
-
in
-
debugger
-
opened
"
)
;
}
)
;
}
viewSourceInScratchpad
(
sourceURL
sourceLine
)
{
viewSource
.
viewSourceInScratchpad
(
sourceURL
sourceLine
)
;
}
getDebuggerFrames
(
)
{
let
toolbox
=
gDevTools
.
getToolbox
(
this
.
target
)
;
if
(
!
toolbox
)
{
return
null
;
}
let
panel
=
toolbox
.
getPanel
(
"
jsdebugger
"
)
;
if
(
!
panel
)
{
return
null
;
}
return
panel
.
getFrames
(
)
;
}
getInspectorSelection
(
)
{
let
toolbox
=
gDevTools
.
getToolbox
(
this
.
target
)
;
if
(
!
toolbox
)
{
return
null
;
}
let
panel
=
toolbox
.
getPanel
(
"
inspector
"
)
;
if
(
!
panel
|
|
!
panel
.
selection
)
{
return
null
;
}
return
panel
.
selection
;
}
destroy
(
)
{
if
(
this
.
_destroyer
)
{
return
this
.
_destroyer
.
promise
;
}
HUDService
.
consoles
.
delete
(
this
.
hudId
)
;
this
.
_destroyer
=
defer
(
)
;
if
(
this
.
chromeUtilsWindow
&
&
this
.
mainPopupSet
)
{
let
popupset
=
this
.
mainPopupSet
;
let
panels
=
popupset
.
querySelectorAll
(
"
panel
[
hudId
=
"
+
this
.
hudId
+
"
]
"
)
;
for
(
let
panel
of
panels
)
{
panel
.
hidePopup
(
)
;
}
}
let
onDestroy
=
Task
.
async
(
function
*
(
)
{
if
(
!
this
.
_browserConsole
)
{
try
{
yield
this
.
target
.
activeTab
.
focus
(
)
;
}
catch
(
ex
)
{
}
}
let
id
=
WebConsoleUtils
.
supportsString
(
this
.
hudId
)
;
Services
.
obs
.
notifyObservers
(
id
"
web
-
console
-
destroyed
"
)
;
this
.
_destroyer
.
resolve
(
null
)
;
}
.
bind
(
this
)
)
;
if
(
this
.
ui
)
{
this
.
ui
.
destroy
(
)
.
then
(
onDestroy
)
;
}
else
{
onDestroy
(
)
;
}
return
this
.
_destroyer
.
promise
;
}
}
;
function
BrowserConsole
(
)
{
WebConsole
.
apply
(
this
arguments
)
;
this
.
_telemetry
=
new
Telemetry
(
)
;
}
BrowserConsole
.
prototype
=
extend
(
WebConsole
.
prototype
{
_browserConsole
:
true
_bcInit
:
null
_bcDestroyer
:
null
init
:
WebConsole
.
prototype
.
init
init
(
)
{
if
(
this
.
_bcInit
)
{
return
this
.
_bcInit
;
}
ShutdownObserver
.
init
(
)
;
this
.
ui
.
_filterPrefsPrefix
=
BC_FILTER_PREFS_PREFIX
;
let
window
=
this
.
iframeWindow
;
let
onClose
=
(
)
=
>
{
window
.
removeEventListener
(
"
unload
"
onClose
)
;
window
.
removeEventListener
(
"
focus
"
onFocus
)
;
this
.
destroy
(
)
;
}
;
window
.
addEventListener
(
"
unload
"
onClose
)
;
this
.
_telemetry
.
toolOpened
(
"
browserconsole
"
)
;
let
onFocus
=
(
)
=
>
showDoorhanger
(
{
window
type
:
"
deveditionpromo
"
}
)
;
window
.
addEventListener
(
"
focus
"
onFocus
)
;
this
.
_bcInit
=
this
.
init
(
)
;
return
this
.
_bcInit
;
}
destroy
:
WebConsole
.
prototype
.
destroy
destroy
(
)
{
if
(
this
.
_bcDestroyer
)
{
return
this
.
_bcDestroyer
.
promise
;
}
this
.
_telemetry
.
toolClosed
(
"
browserconsole
"
)
;
this
.
_bcDestroyer
=
defer
(
)
;
let
chromeWindow
=
this
.
chromeWindow
;
this
.
destroy
(
)
.
then
(
(
)
=
>
this
.
target
.
client
.
close
(
)
.
then
(
(
)
=
>
{
HUDService
.
_browserConsoleID
=
null
;
chromeWindow
.
close
(
)
;
this
.
_bcDestroyer
.
resolve
(
null
)
;
}
)
)
;
return
this
.
_bcDestroyer
.
promise
;
}
}
)
;
const
HUDService
=
new
HUD_SERVICE
(
)
;
exports
.
HUDService
=
HUDService
;
var
ShutdownObserver
=
{
_initialized
:
false
init
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
Services
.
obs
.
addObserver
(
this
"
quit
-
application
-
granted
"
)
;
this
.
_initialized
=
true
;
}
observe
(
message
topic
)
{
if
(
topic
=
=
"
quit
-
application
-
granted
"
)
{
HUDService
.
storeBrowserConsoleSessionState
(
)
;
this
.
uninit
(
)
;
}
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
"
quit
-
application
-
granted
"
)
;
}
}
;
