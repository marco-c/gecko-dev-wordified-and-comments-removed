"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
redux
/
visibility
-
handler
-
connect
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
webconsole
/
actions
/
index
"
)
;
const
ConsoleOutput
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
components
/
ConsoleOutput
"
)
)
;
const
FilterBar
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
components
/
FilterBar
"
)
)
;
const
SideBar
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
components
/
SideBar
"
)
)
;
const
JSTerm
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
components
/
JSTerm
"
)
)
;
const
NotificationBox
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
NotificationBox
"
)
.
NotificationBox
)
;
const
l10n
=
require
(
"
devtools
/
client
/
webconsole
/
webconsole
-
l10n
"
)
;
const
{
Utils
:
WebConsoleUtils
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
"
)
;
const
SELF_XSS_OK
=
l10n
.
getStr
(
"
selfxss
.
okstring
"
)
;
const
SELF_XSS_MSG
=
l10n
.
getFormatStr
(
"
selfxss
.
msg
"
[
SELF_XSS_OK
]
)
;
const
{
getNotificationWithValue
PriorityLevels
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
NotificationBox
"
)
;
const
{
getAllNotifications
}
=
require
(
"
devtools
/
client
/
webconsole
/
selectors
/
notifications
"
)
;
const
{
div
}
=
dom
;
class
App
extends
Component
{
static
get
propTypes
(
)
{
return
{
attachRefToHud
:
PropTypes
.
func
.
isRequired
dispatch
:
PropTypes
.
func
.
isRequired
hud
:
PropTypes
.
object
.
isRequired
notifications
:
PropTypes
.
object
onFirstMeaningfulPaint
:
PropTypes
.
func
.
isRequired
serviceContainer
:
PropTypes
.
object
.
isRequired
closeSplitConsole
:
PropTypes
.
func
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
onPaste
=
this
.
onPaste
.
bind
(
this
)
;
}
onPaste
(
event
)
{
const
{
dispatch
hud
notifications
}
=
this
.
props
;
const
{
usageCount
CONSOLE_ENTRY_THRESHOLD
}
=
WebConsoleUtils
;
if
(
hud
.
isBrowserConsole
|
|
usageCount
>
=
CONSOLE_ENTRY_THRESHOLD
)
{
return
;
}
event
.
preventDefault
(
)
;
event
.
stopPropagation
(
)
;
if
(
getNotificationWithValue
(
notifications
"
selfxss
-
notification
"
)
)
{
return
;
}
const
inputField
=
this
.
node
.
querySelector
(
"
.
jsterm
-
input
-
node
"
)
;
const
removeCallback
=
(
eventType
)
=
>
{
if
(
eventType
=
=
"
removed
"
)
{
inputField
.
removeEventListener
(
"
keyup
"
pasteKeyUpHandler
)
;
dispatch
(
actions
.
removeNotification
(
"
selfxss
-
notification
"
)
)
;
}
}
;
dispatch
(
actions
.
appendNotification
(
SELF_XSS_MSG
"
selfxss
-
notification
"
null
PriorityLevels
.
PRIORITY_WARNING_HIGH
null
removeCallback
)
)
;
function
pasteKeyUpHandler
(
)
{
let
value
=
inputField
.
value
|
|
inputField
.
textContent
;
if
(
value
.
includes
(
SELF_XSS_OK
)
)
{
dispatch
(
actions
.
removeNotification
(
"
selfxss
-
notification
"
)
)
;
inputField
.
removeEventListener
(
"
keyup
"
pasteKeyUpHandler
)
;
WebConsoleUtils
.
usageCount
=
WebConsoleUtils
.
CONSOLE_ENTRY_THRESHOLD
;
}
}
inputField
.
addEventListener
(
"
keyup
"
pasteKeyUpHandler
)
;
}
render
(
)
{
const
{
attachRefToHud
hud
notifications
onFirstMeaningfulPaint
serviceContainer
closeSplitConsole
}
=
this
.
props
;
return
(
div
(
{
className
:
"
webconsole
-
output
-
wrapper
"
ref
:
node
=
>
{
this
.
node
=
node
;
}
}
FilterBar
(
{
hidePersistLogsCheckbox
:
hud
.
isBrowserConsole
serviceContainer
:
{
attachRefToHud
}
closeSplitConsole
}
)
ConsoleOutput
(
{
serviceContainer
onFirstMeaningfulPaint
}
)
SideBar
(
{
serviceContainer
}
)
NotificationBox
(
{
id
:
"
webconsole
-
notificationbox
"
notifications
}
)
JSTerm
(
{
hud
onPaste
:
this
.
onPaste
}
)
)
)
;
}
}
const
mapStateToProps
=
state
=
>
(
{
notifications
:
getAllNotifications
(
state
)
}
)
;
const
mapDispatchToProps
=
dispatch
=
>
(
{
dispatch
}
)
;
module
.
exports
=
connect
(
mapStateToProps
mapDispatchToProps
)
(
App
)
;
