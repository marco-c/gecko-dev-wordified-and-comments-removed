"
use
strict
"
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
GripMessageBody
=
require
(
"
devtools
/
client
/
webconsole
/
components
/
Output
/
GripMessageBody
"
)
;
const
ConsoleTable
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
components
/
Output
/
ConsoleTable
"
)
)
;
const
{
isGroupType
l10n
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
)
;
const
Message
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
components
/
Output
/
Message
"
)
)
;
ConsoleApiCall
.
displayName
=
"
ConsoleApiCall
"
;
ConsoleApiCall
.
propTypes
=
{
dispatch
:
PropTypes
.
func
.
isRequired
message
:
PropTypes
.
object
.
isRequired
open
:
PropTypes
.
bool
serviceContainer
:
PropTypes
.
object
.
isRequired
timestampsVisible
:
PropTypes
.
bool
.
isRequired
maybeScrollToBottom
:
PropTypes
.
func
}
;
ConsoleApiCall
.
defaultProps
=
{
open
:
false
}
;
function
ConsoleApiCall
(
props
)
{
const
{
dispatch
message
open
serviceContainer
timestampsVisible
repeat
maybeScrollToBottom
setExpanded
}
=
props
;
const
{
id
:
messageId
indent
source
type
level
stacktrace
frame
timeStamp
parameters
messageText
prefix
userProvidedStyles
}
=
message
;
let
messageBody
;
const
messageBodyConfig
=
{
dispatch
messageId
parameters
userProvidedStyles
serviceContainer
type
maybeScrollToBottom
setExpanded
customFormat
:
type
!
=
=
"
dir
"
}
;
if
(
type
=
=
=
"
trace
"
)
{
const
traceParametersBody
=
Array
.
isArray
(
parameters
)
&
&
parameters
.
length
>
0
?
[
"
"
]
.
concat
(
formatReps
(
messageBodyConfig
)
)
:
[
]
;
messageBody
=
[
dom
.
span
(
{
className
:
"
cm
-
variable
"
}
"
console
.
trace
(
)
"
)
.
.
.
traceParametersBody
]
;
}
else
if
(
type
=
=
=
"
assert
"
)
{
const
reps
=
formatReps
(
messageBodyConfig
)
;
messageBody
=
dom
.
span
(
{
}
"
Assertion
failed
:
"
reps
)
;
}
else
if
(
type
=
=
=
"
table
"
)
{
messageBody
=
dom
.
span
(
{
className
:
"
cm
-
variable
"
}
"
console
.
table
(
)
"
)
;
}
else
if
(
parameters
)
{
messageBody
=
formatReps
(
messageBodyConfig
)
;
if
(
prefix
)
{
messageBody
.
unshift
(
dom
.
span
(
{
className
:
"
console
-
message
-
prefix
"
}
{
prefix
}
:
)
)
;
}
}
else
if
(
typeof
messageText
=
=
=
"
string
"
)
{
messageBody
=
messageText
;
}
else
if
(
messageText
)
{
messageBody
=
GripMessageBody
(
{
dispatch
messageId
grip
:
messageText
serviceContainer
useQuotes
:
false
transformEmptyString
:
true
setExpanded
type
}
)
;
}
let
attachment
=
null
;
if
(
type
=
=
=
"
table
"
)
{
attachment
=
ConsoleTable
(
{
dispatch
id
:
message
.
id
serviceContainer
parameters
:
message
.
parameters
}
)
;
}
let
collapseTitle
=
null
;
if
(
isGroupType
(
type
)
)
{
collapseTitle
=
l10n
.
getStr
(
"
groupToggle
"
)
;
}
const
collapsible
=
isGroupType
(
type
)
|
|
(
type
=
=
=
"
error
"
&
&
Array
.
isArray
(
stacktrace
)
)
;
const
topLevelClasses
=
[
"
cm
-
s
-
mozilla
"
]
;
return
Message
(
{
messageId
open
collapsible
collapseTitle
source
type
level
topLevelClasses
messageBody
repeat
frame
stacktrace
attachment
serviceContainer
dispatch
indent
timeStamp
timestampsVisible
parameters
message
maybeScrollToBottom
}
)
;
}
function
formatReps
(
options
=
{
}
)
{
const
{
dispatch
loadedObjectProperties
loadedObjectEntries
messageId
parameters
serviceContainer
userProvidedStyles
type
maybeScrollToBottom
setExpanded
customFormat
}
=
options
;
const
elements
=
[
]
;
const
parametersLength
=
parameters
.
length
;
for
(
let
i
=
0
;
i
<
parametersLength
;
i
+
+
)
{
elements
.
push
(
GripMessageBody
(
{
dispatch
messageId
grip
:
parameters
[
i
]
key
:
i
userProvidedStyle
:
userProvidedStyles
?
userProvidedStyles
[
i
]
:
null
serviceContainer
useQuotes
:
false
loadedObjectProperties
loadedObjectEntries
type
maybeScrollToBottom
setExpanded
customFormat
}
)
)
;
if
(
i
!
=
=
parametersLength
-
1
&
&
(
!
userProvidedStyles
|
|
userProvidedStyles
[
i
]
=
=
=
undefined
|
|
userProvidedStyles
[
i
+
1
]
=
=
=
undefined
)
)
{
elements
.
push
(
"
"
)
;
}
}
return
elements
;
}
module
.
exports
=
ConsoleApiCall
;
