"
use
strict
"
;
const
{
createFactory
createElement
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
ToolboxProvider
=
require
(
"
resource
:
/
/
devtools
/
client
/
framework
/
store
-
provider
.
js
"
)
;
const
Message
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
components
/
Output
/
Message
.
js
"
)
)
;
const
actions
=
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
actions
/
index
.
js
"
)
;
const
{
isMessageNetworkError
l10n
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
utils
/
messages
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
TabboxPanel
"
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
components
/
TabboxPanel
.
js
"
)
;
const
{
getHTTPStatusCodeURL
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
doc
-
utils
.
js
"
)
;
const
{
getUnicodeUrl
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
unicode
-
url
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
getBlockedReasonString
"
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
true
)
;
const
LEARN_MORE
=
l10n
.
getStr
(
"
webConsoleMoreInfoLabel
"
)
;
const
isMacOS
=
Services
.
appinfo
.
OS
=
=
=
"
Darwin
"
;
NetworkEventMessage
.
displayName
=
"
NetworkEventMessage
"
;
NetworkEventMessage
.
propTypes
=
{
message
:
PropTypes
.
object
.
isRequired
serviceContainer
:
PropTypes
.
shape
(
{
openNetworkPanel
:
PropTypes
.
func
.
isRequired
resendNetworkRequest
:
PropTypes
.
func
.
isRequired
}
)
timestampsVisible
:
PropTypes
.
bool
.
isRequired
networkMessageUpdate
:
PropTypes
.
object
.
isRequired
}
;
function
NetworkEventMessage
(
{
message
=
{
}
serviceContainer
timestampsVisible
networkMessageUpdate
=
{
}
networkMessageActiveTabId
dispatch
open
disabled
}
)
{
const
{
id
indent
source
type
level
url
method
isXHR
timeStamp
blockedReason
blockingExtension
httpVersion
status
statusText
totalTime
}
=
message
;
const
topLevelClasses
=
[
"
cm
-
s
-
mozilla
"
]
;
if
(
isMessageNetworkError
(
message
)
)
{
topLevelClasses
.
push
(
"
error
"
)
;
}
let
statusCode
statusInfo
;
if
(
httpVersion
&
&
status
&
&
statusText
!
=
=
undefined
&
&
totalTime
!
=
=
undefined
)
{
const
statusCodeDocURL
=
getHTTPStatusCodeURL
(
status
.
toString
(
)
"
webconsole
"
)
;
statusCode
=
dom
.
span
(
{
className
:
"
status
-
code
"
"
data
-
code
"
:
status
title
:
LEARN_MORE
onClick
:
e
=
>
{
e
.
stopPropagation
(
)
;
e
.
preventDefault
(
)
;
serviceContainer
.
openLink
(
statusCodeDocURL
e
)
;
}
}
status
)
;
statusInfo
=
dom
.
span
(
{
className
:
"
status
-
info
"
}
[
{
httpVersion
}
statusCode
{
statusText
}
{
totalTime
}
ms
]
)
;
}
if
(
blockedReason
)
{
statusInfo
=
dom
.
span
(
{
className
:
"
status
-
info
"
}
getBlockedReasonString
(
blockedReason
blockingExtension
)
)
;
topLevelClasses
.
push
(
"
network
-
message
-
blocked
"
)
;
}
const
requestMethod
=
dom
.
span
(
{
className
:
"
method
"
}
method
)
;
const
xhr
=
isXHR
?
dom
.
span
(
{
className
:
"
xhr
"
}
l10n
.
getStr
(
"
webConsoleXhrIndicator
"
)
)
:
null
;
const
unicodeURL
=
getUnicodeUrl
(
url
)
;
const
requestUrl
=
dom
.
a
(
{
className
:
"
url
"
title
:
unicodeURL
href
:
url
onClick
:
e
=
>
{
e
.
preventDefault
(
)
;
const
shouldOpenLink
=
(
isMacOS
&
&
e
.
metaKey
)
|
|
(
!
isMacOS
&
&
e
.
ctrlKey
)
;
if
(
shouldOpenLink
)
{
e
.
stopPropagation
(
)
;
serviceContainer
.
openLink
(
url
e
)
;
}
}
}
unicodeURL
)
;
const
statusBody
=
statusInfo
?
dom
.
a
(
{
className
:
"
status
"
}
statusInfo
)
:
null
;
const
messageBody
=
[
xhr
requestMethod
requestUrl
statusBody
]
;
const
connector
=
{
viewSourceInDebugger
:
(
srcUrl
line
column
)
=
>
{
serviceContainer
.
onViewSourceInDebugger
(
{
url
:
srcUrl
line
column
}
)
;
}
getLongString
:
grip
=
>
{
return
serviceContainer
.
getLongString
(
grip
)
;
}
triggerActivity
:
(
)
=
>
{
}
requestData
:
(
requestId
dataType
)
=
>
{
return
serviceContainer
.
requestData
(
requestId
dataType
)
;
}
}
;
const
attachment
=
open
&
&
!
disabled
&
&
dom
.
div
(
{
className
:
"
network
-
info
network
-
monitor
"
}
createElement
(
ToolboxProvider
{
store
:
serviceContainer
.
getToolboxStore
(
)
}
createElement
(
TabboxPanel
{
connector
activeTabId
:
networkMessageActiveTabId
request
:
networkMessageUpdate
sourceMapURLService
:
serviceContainer
.
sourceMapURLService
openLink
:
serviceContainer
.
openLink
selectTab
:
tabId
=
>
{
dispatch
(
actions
.
selectNetworkMessageTab
(
tabId
)
)
;
}
openNetworkDetails
:
enabled
=
>
{
if
(
!
enabled
)
{
dispatch
(
actions
.
messageClose
(
id
)
)
;
}
}
hideToggleButton
:
true
showMessagesView
:
false
targetSearchResult
:
null
}
)
)
)
;
const
request
=
{
url
method
}
;
return
Message
(
{
dispatch
messageId
:
id
source
type
level
indent
collapsible
:
true
open
disabled
attachment
topLevelClasses
timeStamp
messageBody
serviceContainer
request
timestampsVisible
isBlockedNetworkMessage
:
!
!
blockedReason
message
}
)
;
}
module
.
exports
=
NetworkEventMessage
;
