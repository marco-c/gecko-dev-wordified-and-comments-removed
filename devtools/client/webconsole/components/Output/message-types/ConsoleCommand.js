"
use
strict
"
;
const
{
createElement
createFactory
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
{
ELLIPSIS
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
l10n
.
js
"
)
;
const
Message
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
components
/
Output
/
Message
.
js
"
)
)
;
ConsoleCommand
.
displayName
=
"
ConsoleCommand
"
;
ConsoleCommand
.
propTypes
=
{
message
:
PropTypes
.
object
.
isRequired
timestampsVisible
:
PropTypes
.
bool
.
isRequired
serviceContainer
:
PropTypes
.
object
maybeScrollToBottom
:
PropTypes
.
func
open
:
PropTypes
.
bool
}
;
ConsoleCommand
.
defaultProps
=
{
open
:
false
}
;
function
ConsoleCommand
(
props
)
{
const
{
message
timestampsVisible
serviceContainer
maybeScrollToBottom
dispatch
open
}
=
props
;
const
{
indent
source
type
level
timeStamp
id
:
messageId
}
=
message
;
const
messageText
=
trimCode
(
message
.
messageText
)
;
const
messageLines
=
messageText
.
split
(
"
\
n
"
)
;
const
collapsible
=
messageLines
.
length
>
5
;
const
visibleMessageText
=
collapsible
&
&
!
open
?
{
messageLines
.
slice
(
0
5
)
.
join
(
"
\
n
"
)
}
{
ELLIPSIS
}
:
messageText
;
const
messageBody
=
createElement
(
"
syntax
-
highlighted
"
null
visibleMessageText
)
;
return
Message
(
{
messageId
source
type
level
topLevelClasses
:
[
]
messageBody
collapsible
open
dispatch
serviceContainer
indent
timeStamp
timestampsVisible
maybeScrollToBottom
message
}
)
;
}
module
.
exports
=
ConsoleCommand
;
function
trimCode
(
input
)
{
if
(
typeof
input
!
=
=
"
string
"
)
{
return
input
;
}
if
(
input
.
trim
(
)
.
includes
(
"
\
n
"
)
=
=
=
false
)
{
return
input
.
trim
(
)
;
}
return
input
.
replace
(
/
^
\
s
*
\
n
/
"
"
)
.
trimEnd
(
)
;
}
