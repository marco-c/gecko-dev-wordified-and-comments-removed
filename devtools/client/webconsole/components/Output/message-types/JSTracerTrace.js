"
use
strict
"
;
const
{
createFactory
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
GripMessageBody
=
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
components
/
Output
/
GripMessageBody
.
js
"
)
;
const
{
MESSAGE_TYPE
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
constants
.
js
"
)
;
const
Message
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
components
/
Output
/
Message
.
js
"
)
)
;
JSTracerTrace
.
displayName
=
"
JSTracerTrace
"
;
JSTracerTrace
.
propTypes
=
{
dispatch
:
PropTypes
.
func
.
isRequired
message
:
PropTypes
.
object
.
isRequired
serviceContainer
:
PropTypes
.
object
.
isRequired
timestampsVisible
:
PropTypes
.
bool
.
isRequired
maybeScrollToBottom
:
PropTypes
.
func
}
;
function
JSTracerTrace
(
props
)
{
const
{
dispatch
message
serviceContainer
timestampsVisible
repeat
maybeScrollToBottom
setExpanded
}
=
props
;
const
{
timeStamp
prefix
depth
source
eventName
frame
implementation
displayName
parameters
}
=
message
;
const
messageBody
=
eventName
?
[
dom
.
span
(
{
className
:
"
jstracer
-
dom
-
event
"
}
eventName
)
]
:
[
dom
.
span
(
{
className
:
"
jstracer
-
implementation
"
}
implementation
)
"
"
dom
.
span
(
{
className
:
"
jstracer
-
display
-
name
"
}
displayName
)
]
;
if
(
parameters
)
{
const
messageBodyConfig
=
{
dispatch
parameters
serviceContainer
type
:
"
"
maybeScrollToBottom
setExpanded
customFormat
:
false
}
;
messageBody
.
push
(
"
(
"
.
.
.
formatReps
(
messageBodyConfig
)
"
)
"
)
;
}
if
(
prefix
)
{
messageBody
.
unshift
(
dom
.
span
(
{
className
:
"
console
-
message
-
prefix
"
}
{
prefix
}
)
)
;
}
const
topLevelClasses
=
[
"
cm
-
s
-
mozilla
"
]
;
return
Message
(
{
collapsible
:
false
source
level
:
MESSAGE_TYPE
.
JSTRACER
topLevelClasses
messageBody
repeat
frame
stacktrace
:
null
attachment
:
null
serviceContainer
dispatch
indent
:
depth
timeStamp
timestampsVisible
parameters
message
maybeScrollToBottom
}
)
;
}
function
formatReps
(
options
=
{
}
)
{
const
{
dispatch
loadedObjectProperties
loadedObjectEntries
parameters
serviceContainer
type
maybeScrollToBottom
setExpanded
customFormat
}
=
options
;
const
elements
=
[
]
;
const
parametersLength
=
parameters
.
length
;
for
(
let
i
=
0
;
i
<
parametersLength
;
i
+
+
)
{
elements
.
push
(
GripMessageBody
(
{
dispatch
grip
:
parameters
[
i
]
key
:
i
serviceContainer
useQuotes
:
true
loadedObjectProperties
loadedObjectEntries
type
maybeScrollToBottom
setExpanded
customFormat
}
)
)
;
if
(
i
!
=
=
parametersLength
-
1
)
{
elements
.
push
(
"
"
)
;
}
}
return
elements
;
}
module
.
exports
=
JSTracerTrace
;
