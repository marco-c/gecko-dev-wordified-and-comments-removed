"
use
strict
"
;
const
{
Fragment
Component
createElement
createRef
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
PropTypes
"
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
class
LazyMessageList
extends
Component
{
static
get
propTypes
(
)
{
return
{
viewportRef
:
PropTypes
.
shape
(
{
current
:
PropTypes
.
instanceOf
(
Element
)
}
)
.
isRequired
items
:
PropTypes
.
array
.
isRequired
itemsToKeepAlive
:
PropTypes
.
shape
(
{
has
:
PropTypes
.
func
keys
:
PropTypes
.
func
size
:
PropTypes
.
number
}
)
.
isRequired
editorMode
:
PropTypes
.
bool
.
isRequired
itemDefaultHeight
:
PropTypes
.
number
.
isRequired
scrollOverdrawCount
:
PropTypes
.
number
.
isRequired
renderItem
:
PropTypes
.
func
.
isRequired
shouldScrollBottom
:
PropTypes
.
func
.
isRequired
cacheGeneration
:
PropTypes
.
number
.
isRequired
serviceContainer
:
PropTypes
.
shape
(
{
emitForTests
:
PropTypes
.
func
.
isRequired
}
)
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
#
initialized
=
false
;
this
.
#
topBufferRef
=
createRef
(
)
;
this
.
#
bottomBufferRef
=
createRef
(
)
;
this
.
#
viewportHeight
=
window
.
innerHeight
;
this
.
#
startIndex
=
0
;
this
.
#
resizeObserver
=
null
;
this
.
#
cachedHeights
=
[
]
;
this
.
#
scrollHandlerBinding
=
this
.
#
scrollHandler
.
bind
(
this
)
;
}
UNSAFE_componentWillUpdate
(
nextProps
nextState
)
{
if
(
nextProps
.
cacheGeneration
!
=
=
this
.
props
.
cacheGeneration
)
{
this
.
#
cachedHeights
=
[
]
;
this
.
#
startIndex
=
0
;
}
else
if
(
(
this
.
props
.
shouldScrollBottom
(
)
&
&
nextProps
.
items
.
length
>
this
.
props
.
items
.
length
)
|
|
this
.
#
startIndex
>
nextProps
.
items
.
length
-
this
.
#
numItemsToDraw
)
{
this
.
#
startIndex
=
Math
.
max
(
0
nextProps
.
items
.
length
-
this
.
#
numItemsToDraw
)
;
}
}
componentDidUpdate
(
prevProps
)
{
const
{
viewportRef
serviceContainer
}
=
this
.
props
;
if
(
!
viewportRef
.
current
|
|
!
this
.
#
topBufferRef
.
current
)
{
return
;
}
if
(
!
this
.
#
initialized
)
{
this
.
#
addListeners
(
)
;
}
if
(
!
this
.
#
initialized
|
|
prevProps
.
editorMode
!
=
=
this
.
props
.
editorMode
)
{
this
.
#
resizeObserver
.
observe
(
viewportRef
.
current
)
;
}
this
.
#
initialized
=
true
;
let
index
=
this
.
#
startIndex
;
let
element
=
this
.
#
topBufferRef
.
current
.
nextSibling
;
let
elementRect
=
element
?
.
getBoundingClientRect
(
)
;
while
(
Element
.
isInstance
(
element
)
&
&
index
<
this
.
#
clampedEndIndex
&
&
element
!
=
=
this
.
#
bottomBufferRef
.
current
)
{
const
next
=
element
.
nextSibling
;
const
nextRect
=
next
.
getBoundingClientRect
(
)
;
this
.
#
cachedHeights
[
index
]
=
nextRect
.
top
-
elementRect
.
top
;
element
=
next
;
elementRect
=
nextRect
;
index
+
+
;
}
serviceContainer
.
emitForTests
(
"
lazy
-
message
-
list
-
updated
-
or
-
noop
"
)
;
}
componentWillUnmount
(
)
{
this
.
#
removeListeners
(
)
;
}
#
initialized
;
#
topBufferRef
;
#
bottomBufferRef
;
#
viewportHeight
;
#
startIndex
;
#
resizeObserver
;
#
cachedHeights
;
#
scrollHandlerBinding
;
get
#
overdrawHeight
(
)
{
return
this
.
props
.
scrollOverdrawCount
*
this
.
props
.
itemDefaultHeight
;
}
get
#
numItemsToDraw
(
)
{
const
scrollingWindowCount
=
Math
.
ceil
(
this
.
#
viewportHeight
/
this
.
props
.
itemDefaultHeight
)
;
return
scrollingWindowCount
+
2
*
this
.
props
.
scrollOverdrawCount
;
}
get
#
unclampedEndIndex
(
)
{
return
this
.
#
startIndex
+
this
.
#
numItemsToDraw
;
}
get
#
clampedEndIndex
(
)
{
return
Math
.
min
(
this
.
#
unclampedEndIndex
this
.
props
.
items
.
length
)
;
}
#
increaseStartIndex
(
startIndex
deltaPx
)
{
for
(
let
i
=
startIndex
+
1
;
i
<
this
.
props
.
items
.
length
;
i
+
+
)
{
deltaPx
-
=
this
.
#
cachedHeights
[
i
]
;
startIndex
=
i
;
if
(
deltaPx
<
=
0
)
{
break
;
}
}
return
startIndex
;
}
#
decreaseStartIndex
(
startIndex
diff
)
{
for
(
let
i
=
startIndex
-
1
;
i
>
=
0
;
i
-
-
)
{
diff
-
=
this
.
#
cachedHeights
[
i
]
;
startIndex
=
i
;
if
(
diff
<
=
0
)
{
break
;
}
}
return
startIndex
;
}
#
scrollHandler
(
)
{
if
(
!
this
.
props
.
viewportRef
.
current
|
|
!
this
.
#
topBufferRef
.
current
)
{
return
;
}
const
scrollportMin
=
this
.
props
.
viewportRef
.
current
.
getBoundingClientRect
(
)
.
top
-
this
.
#
overdrawHeight
;
const
uppermostItemRect
=
this
.
#
topBufferRef
.
current
.
nextSibling
.
getBoundingClientRect
(
)
;
const
uppermostItemMin
=
uppermostItemRect
.
top
;
const
uppermostItemMax
=
uppermostItemRect
.
bottom
;
let
nextStartIndex
=
this
.
#
startIndex
;
const
downwardPx
=
scrollportMin
-
uppermostItemMax
;
const
upwardPx
=
uppermostItemMin
-
scrollportMin
;
if
(
downwardPx
>
0
)
{
nextStartIndex
=
this
.
#
increaseStartIndex
(
nextStartIndex
downwardPx
)
;
}
else
if
(
upwardPx
>
0
)
{
nextStartIndex
=
this
.
#
decreaseStartIndex
(
nextStartIndex
upwardPx
)
;
}
nextStartIndex
=
Math
.
max
(
0
Math
.
min
(
nextStartIndex
this
.
props
.
items
.
length
-
this
.
#
numItemsToDraw
)
)
;
if
(
nextStartIndex
!
=
=
this
.
#
startIndex
)
{
this
.
#
startIndex
=
nextStartIndex
;
this
.
forceUpdate
(
)
;
}
else
{
const
{
serviceContainer
}
=
this
.
props
;
serviceContainer
.
emitForTests
(
"
lazy
-
message
-
list
-
updated
-
or
-
noop
"
)
;
}
}
#
addListeners
(
)
{
const
{
viewportRef
}
=
this
.
props
;
viewportRef
.
current
.
addEventListener
(
"
scroll
"
this
.
#
scrollHandlerBinding
)
;
this
.
#
resizeObserver
=
new
ResizeObserver
(
entries
=
>
{
this
.
#
viewportHeight
=
viewportRef
.
current
.
parentNode
.
parentNode
.
clientHeight
;
this
.
forceUpdate
(
)
;
}
)
;
}
#
removeListeners
(
)
{
const
{
viewportRef
}
=
this
.
props
;
this
.
#
resizeObserver
?
.
disconnect
(
)
;
viewportRef
.
current
?
.
removeEventListener
(
"
scroll
"
this
.
#
scrollHandlerBinding
)
;
}
get
bottomBuffer
(
)
{
return
this
.
#
bottomBufferRef
.
current
;
}
isItemNearBottom
(
index
)
{
return
index
>
=
this
.
props
.
items
.
length
-
this
.
#
numItemsToDraw
;
}
render
(
)
{
const
{
items
itemDefaultHeight
renderItem
itemsToKeepAlive
}
=
this
.
props
;
if
(
!
items
.
length
)
{
return
createElement
(
Fragment
{
key
:
"
LazyMessageList
"
}
)
;
}
const
countUncached
=
items
.
length
-
this
.
#
cachedHeights
.
length
;
if
(
countUncached
>
0
)
{
this
.
#
cachedHeights
.
push
(
.
.
.
Array
(
countUncached
)
.
fill
(
itemDefaultHeight
)
)
;
}
let
topBufferHeight
=
0
;
let
bottomBufferHeight
=
0
;
let
bottomBufferIndex
=
0
;
let
currentChild
=
0
;
const
startIndex
=
this
.
#
startIndex
;
const
endIndex
=
this
.
#
clampedEndIndex
;
const
children
=
new
Array
(
endIndex
-
startIndex
+
2
)
;
const
pushChild
=
c
=
>
{
if
(
currentChild
>
=
children
.
length
)
{
children
.
push
(
c
)
;
}
else
{
children
[
currentChild
]
=
c
;
}
return
currentChild
+
+
;
}
;
for
(
let
i
=
0
;
i
<
items
.
length
;
i
+
+
)
{
const
itemId
=
items
[
i
]
;
if
(
i
<
startIndex
)
{
if
(
i
=
=
0
|
|
itemsToKeepAlive
.
has
(
itemId
)
)
{
pushChild
(
renderItem
(
itemId
i
)
)
;
}
else
{
topBufferHeight
+
=
this
.
#
cachedHeights
[
i
]
;
}
}
else
if
(
i
<
endIndex
)
{
if
(
i
=
=
startIndex
)
{
pushChild
(
createElement
(
"
div
"
{
key
:
"
LazyMessageListTop
"
className
:
"
lazy
-
message
-
list
-
top
"
ref
:
this
.
#
topBufferRef
style
:
{
height
:
topBufferHeight
}
}
)
)
;
}
pushChild
(
renderItem
(
itemId
i
)
)
;
if
(
i
=
=
endIndex
-
1
)
{
bottomBufferIndex
=
pushChild
(
null
)
;
}
}
else
if
(
i
=
=
items
.
length
-
1
|
|
itemsToKeepAlive
.
has
(
itemId
)
)
{
pushChild
(
renderItem
(
itemId
i
)
)
;
}
else
{
bottomBufferHeight
+
=
this
.
#
cachedHeights
[
i
]
;
}
}
children
[
bottomBufferIndex
]
=
createElement
(
"
div
"
{
key
:
"
LazyMessageListBottom
"
className
:
"
lazy
-
message
-
list
-
bottom
"
ref
:
this
.
#
bottomBufferRef
style
:
{
height
:
bottomBufferHeight
}
}
)
;
return
createElement
(
Fragment
{
key
:
"
LazyMessageList
"
}
children
)
;
}
}
module
.
exports
=
LazyMessageList
;
