"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
PropTypes
"
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
HTMLTooltip
"
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
HTMLTooltip
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
createPortal
"
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
true
)
;
const
{
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
getAutocompleteState
}
=
require
(
"
devtools
/
client
/
webconsole
/
selectors
/
autocomplete
"
)
;
const
autocompleteActions
=
require
(
"
devtools
/
client
/
webconsole
/
actions
/
autocomplete
"
)
;
const
{
l10n
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
)
;
const
utmParams
=
new
URLSearchParams
(
{
"
utm_source
"
:
"
mozilla
"
"
utm_medium
"
:
"
devtools
-
webconsole
"
"
utm_campaign
"
:
"
default
"
}
)
;
const
LEARN_MORE_URL
=
https
:
/
/
developer
.
mozilla
.
org
/
docs
/
Tools
/
Web_Console
/
Invoke_getters_from_autocomplete
?
{
utmParams
}
;
class
ConfirmDialog
extends
Component
{
static
get
propTypes
(
)
{
return
{
hud
:
PropTypes
.
object
.
isRequired
autocompleteUpdate
:
PropTypes
.
func
.
isRequired
autocompleteClear
:
PropTypes
.
func
.
isRequired
getterPath
:
PropTypes
.
array
.
isRequired
serviceContainer
:
PropTypes
.
object
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
const
{
hud
}
=
props
;
hud
.
confirmDialog
=
this
;
this
.
cancel
=
this
.
cancel
.
bind
(
this
)
;
this
.
confirm
=
this
.
confirm
.
bind
(
this
)
;
this
.
onLearnMoreClick
=
this
.
onLearnMoreClick
.
bind
(
this
)
;
}
componentDidMount
(
)
{
const
doc
=
this
.
props
.
hud
.
document
;
const
toolbox
=
gDevTools
.
getToolbox
(
this
.
props
.
hud
.
owner
.
target
)
;
const
tooltipDoc
=
toolbox
?
toolbox
.
doc
:
doc
;
this
.
tooltip
=
new
HTMLTooltip
(
tooltipDoc
{
className
:
"
invoke
-
confirm
"
}
)
;
}
componentDidUpdate
(
)
{
const
{
getterPath
serviceContainer
}
=
this
.
props
;
if
(
getterPath
)
{
this
.
tooltip
.
show
(
serviceContainer
.
getJsTermTooltipAnchor
(
)
{
y
:
5
}
)
;
this
.
tooltip
.
focus
(
)
;
}
else
{
this
.
tooltip
.
hide
(
)
;
this
.
props
.
hud
.
jsterm
.
focus
(
)
;
}
}
componentDidThrow
(
e
)
{
console
.
error
(
"
Error
in
ConfirmDialog
"
e
)
;
this
.
setState
(
state
=
>
(
{
.
.
.
state
hasError
:
true
}
)
)
;
}
onLearnMoreClick
(
e
)
{
this
.
props
.
serviceContainer
.
openLink
(
LEARN_MORE_URL
e
)
;
}
cancel
(
)
{
this
.
tooltip
.
hide
(
)
;
this
.
props
.
autocompleteClear
(
)
;
}
confirm
(
)
{
this
.
tooltip
.
hide
(
)
;
this
.
props
.
autocompleteUpdate
(
this
.
props
.
getterPath
)
;
}
render
(
)
{
if
(
(
this
.
state
&
&
this
.
state
.
hasError
)
|
|
(
!
this
.
props
|
|
!
this
.
props
.
getterPath
)
)
{
return
null
;
}
const
{
getterPath
}
=
this
.
props
;
const
getterName
=
getterPath
.
join
(
"
.
"
)
;
const
description
=
l10n
.
getStr
(
"
webconsole
.
confirmDialog
.
getter
.
label
"
)
;
const
[
descriptionPrefix
descriptionSuffix
]
=
description
.
split
(
"
%
S
"
)
;
const
learnMoreElement
=
dom
.
a
(
{
className
:
"
learn
-
more
-
link
"
title
:
LEARN_MORE_URL
.
split
(
"
?
"
)
[
0
]
onClick
:
this
.
onLearnMoreClick
}
l10n
.
getStr
(
"
webConsoleMoreInfoLabel
"
)
)
;
return
createPortal
(
[
dom
.
p
(
{
className
:
"
confirm
-
label
"
}
dom
.
span
(
{
}
descriptionPrefix
)
dom
.
span
(
{
className
:
"
emphasized
"
}
getterName
)
dom
.
span
(
{
}
descriptionSuffix
)
)
dom
.
button
(
{
className
:
"
confirm
-
button
"
onBlur
:
(
)
=
>
this
.
cancel
(
)
onKeyDown
:
event
=
>
{
const
{
key
}
=
event
;
if
(
[
"
Escape
"
"
ArrowLeft
"
"
Backspace
"
]
.
includes
(
key
)
)
{
this
.
cancel
(
)
;
event
.
stopPropagation
(
)
;
return
;
}
if
(
[
"
Tab
"
"
Enter
"
"
"
]
.
includes
(
key
)
)
{
this
.
confirm
(
)
;
event
.
stopPropagation
(
)
;
}
if
(
key
=
=
=
"
?
"
)
{
this
.
onLearnMoreClick
(
)
;
event
.
stopPropagation
(
)
;
}
}
onMouseDown
:
this
.
confirm
}
l10n
.
getStr
(
"
webconsole
.
confirmDialog
.
getter
.
invokeButtonLabel
"
)
)
learnMoreElement
]
this
.
tooltip
.
panel
)
;
}
}
function
mapStateToProps
(
state
)
{
const
autocompleteData
=
getAutocompleteState
(
state
)
;
return
{
getterPath
:
autocompleteData
.
getterPath
}
;
}
function
mapDispatchToProps
(
dispatch
)
{
return
{
autocompleteUpdate
:
getterPath
=
>
dispatch
(
autocompleteActions
.
autocompleteUpdate
(
true
getterPath
)
)
autocompleteClear
:
(
)
=
>
dispatch
(
autocompleteActions
.
autocompleteClear
(
)
)
}
;
}
module
.
exports
=
connect
(
mapStateToProps
mapDispatchToProps
)
(
ConfirmDialog
)
;
