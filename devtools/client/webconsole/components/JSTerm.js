"
use
strict
"
;
const
{
Utils
:
WebConsoleUtils
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
"
)
;
const
Services
=
require
(
"
Services
"
)
;
loader
.
lazyServiceGetter
(
this
"
clipboardHelper
"
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
"
nsIClipboardHelper
"
)
;
loader
.
lazyRequireGetter
(
this
"
Debugger
"
"
Debugger
"
)
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
loader
.
lazyRequireGetter
(
this
"
AutocompletePopup
"
"
devtools
/
client
/
shared
/
autocomplete
-
popup
"
)
;
loader
.
lazyRequireGetter
(
this
"
PropTypes
"
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
KeyCodes
"
"
devtools
/
client
/
shared
/
keycodes
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
Editor
"
"
devtools
/
client
/
sourceeditor
/
editor
"
)
;
loader
.
lazyRequireGetter
(
this
"
Telemetry
"
"
devtools
/
client
/
shared
/
telemetry
"
)
;
loader
.
lazyRequireGetter
(
this
"
processScreenshot
"
"
devtools
/
shared
/
webconsole
/
screenshot
-
helper
"
)
;
const
l10n
=
require
(
"
devtools
/
client
/
webconsole
/
webconsole
-
l10n
"
)
;
const
HELP_URL
=
"
https
:
/
/
developer
.
mozilla
.
org
/
docs
/
Tools
/
Web_Console
/
Helpers
"
;
function
gSequenceId
(
)
{
return
gSequenceId
.
n
+
+
;
}
gSequenceId
.
n
=
0
;
const
{
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
getHistory
getHistoryValue
}
=
require
(
"
devtools
/
client
/
webconsole
/
selectors
/
history
"
)
;
const
historyActions
=
require
(
"
devtools
/
client
/
webconsole
/
actions
/
history
"
)
;
const
{
HISTORY_BACK
HISTORY_FORWARD
}
=
require
(
"
devtools
/
client
/
webconsole
/
constants
"
)
;
class
JSTerm
extends
Component
{
static
get
propTypes
(
)
{
return
{
appendToHistory
:
PropTypes
.
func
.
isRequired
clearHistory
:
PropTypes
.
func
.
isRequired
getValueFromHistory
:
PropTypes
.
func
.
isRequired
history
:
PropTypes
.
object
.
isRequired
hud
:
PropTypes
.
object
.
isRequired
serviceContainer
:
PropTypes
.
object
.
isRequired
onPaste
:
PropTypes
.
func
codeMirrorEnabled
:
PropTypes
.
bool
updateHistoryPosition
:
PropTypes
.
func
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
const
{
hud
}
=
props
;
this
.
hud
=
hud
;
this
.
hudId
=
this
.
hud
.
hudId
;
this
.
_keyPress
=
this
.
_keyPress
.
bind
(
this
)
;
this
.
_inputEventHandler
=
this
.
_inputEventHandler
.
bind
(
this
)
;
this
.
_blurEventHandler
=
this
.
_blurEventHandler
.
bind
(
this
)
;
this
.
onContextMenu
=
this
.
onContextMenu
.
bind
(
this
)
;
this
.
SELECTED_FRAME
=
-
1
;
this
.
_autocompleteCache
=
null
;
this
.
_autocompleteQuery
=
null
;
this
.
_lastFrameActorId
=
null
;
this
.
lastInputValue
=
"
"
;
this
.
currentAutoCompletionRequestId
=
null
;
this
.
autocompletePopup
=
null
;
this
.
inputNode
=
null
;
this
.
completeNode
=
null
;
this
.
_telemetry
=
new
Telemetry
(
)
;
EventEmitter
.
decorate
(
this
)
;
hud
.
jsterm
=
this
;
}
componentDidMount
(
)
{
const
autocompleteOptions
=
{
onSelect
:
this
.
onAutocompleteSelect
.
bind
(
this
)
onClick
:
this
.
acceptProposedCompletion
.
bind
(
this
)
listId
:
"
webConsole_autocompletePopupListBox
"
position
:
"
top
"
autoSelect
:
true
}
;
const
doc
=
this
.
hud
.
document
;
const
toolbox
=
gDevTools
.
getToolbox
(
this
.
hud
.
owner
.
target
)
;
const
tooltipDoc
=
toolbox
?
toolbox
.
doc
:
doc
;
this
.
autocompletePopup
=
new
AutocompletePopup
(
tooltipDoc
autocompleteOptions
)
;
if
(
this
.
props
.
codeMirrorEnabled
)
{
if
(
this
.
node
)
{
this
.
editor
=
new
Editor
(
{
autofocus
:
true
enableCodeFolding
:
false
gutters
:
[
]
lineWrapping
:
true
mode
:
Editor
.
modes
.
js
styleActiveLine
:
false
tabIndex
:
"
0
"
viewportMargin
:
Infinity
extraKeys
:
{
"
Enter
"
:
(
)
=
>
{
const
hasSuggestion
=
this
.
hasAutocompletionSuggestion
(
)
;
if
(
!
hasSuggestion
&
&
!
Debugger
.
isCompilableUnit
(
this
.
getInputValue
(
)
)
)
{
return
"
CodeMirror
.
Pass
"
;
}
if
(
hasSuggestion
)
{
return
this
.
acceptProposedCompletion
(
)
;
}
this
.
execute
(
)
;
return
null
;
}
"
Tab
"
:
(
)
=
>
{
if
(
this
.
hasEmptyInput
(
)
)
{
this
.
editor
.
codeMirror
.
getInputField
(
)
.
blur
(
)
;
return
false
;
}
const
isSomethingSelected
=
this
.
editor
.
somethingSelected
(
)
;
const
hasSuggestion
=
this
.
hasAutocompletionSuggestion
(
)
;
if
(
hasSuggestion
&
&
!
isSomethingSelected
)
{
this
.
acceptProposedCompletion
(
)
;
return
false
;
}
if
(
!
isSomethingSelected
)
{
this
.
insertStringAtCursor
(
"
\
t
"
)
;
return
false
;
}
return
true
;
}
"
Up
"
:
(
)
=
>
{
let
inputUpdated
;
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectPreviousItem
(
)
;
return
null
;
}
if
(
this
.
canCaretGoPrevious
(
)
)
{
inputUpdated
=
this
.
historyPeruse
(
HISTORY_BACK
)
;
}
if
(
!
inputUpdated
)
{
return
"
CodeMirror
.
Pass
"
;
}
return
null
;
}
"
Down
"
:
(
)
=
>
{
let
inputUpdated
;
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectNextItem
(
)
;
return
null
;
}
if
(
this
.
canCaretGoNext
(
)
)
{
inputUpdated
=
this
.
historyPeruse
(
HISTORY_FORWARD
)
;
}
if
(
!
inputUpdated
)
{
return
"
CodeMirror
.
Pass
"
;
}
return
null
;
}
"
Left
"
:
(
)
=
>
{
if
(
this
.
autocompletePopup
.
isOpen
|
|
this
.
getAutoCompletionText
(
)
)
{
this
.
clearCompletion
(
)
;
}
return
"
CodeMirror
.
Pass
"
;
}
"
Right
"
:
(
)
=
>
{
if
(
this
.
getAutoCompletionText
(
)
)
{
this
.
acceptProposedCompletion
(
)
;
return
null
;
}
this
.
clearCompletion
(
)
;
return
"
CodeMirror
.
Pass
"
;
}
"
Ctrl
-
N
"
:
(
)
=
>
{
if
(
Services
.
appinfo
.
OS
=
=
=
"
Darwin
"
&
&
this
.
canCaretGoNext
(
)
&
&
this
.
historyPeruse
(
HISTORY_FORWARD
)
)
{
return
null
;
}
this
.
clearCompletion
(
)
;
return
"
CodeMirror
.
Pass
"
;
}
"
Ctrl
-
P
"
:
(
)
=
>
{
if
(
Services
.
appinfo
.
OS
=
=
=
"
Darwin
"
&
&
this
.
canCaretGoPrevious
(
)
&
&
this
.
historyPeruse
(
HISTORY_BACK
)
)
{
return
null
;
}
this
.
clearCompletion
(
)
;
return
"
CodeMirror
.
Pass
"
;
}
"
PageUp
"
:
(
)
=
>
{
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectPreviousPageItem
(
)
;
return
null
;
}
return
"
CodeMirror
.
Pass
"
;
}
"
PageDown
"
:
(
)
=
>
{
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectNextPageItem
(
)
;
return
null
;
}
return
"
CodeMirror
.
Pass
"
;
}
"
Home
"
:
(
)
=
>
{
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectedIndex
=
0
;
return
null
;
}
return
"
CodeMirror
.
Pass
"
;
}
"
End
"
:
(
)
=
>
{
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectedIndex
=
this
.
autocompletePopup
.
itemCount
-
1
;
return
null
;
}
return
"
CodeMirror
.
Pass
"
;
}
"
Esc
"
:
false
}
}
)
;
this
.
editor
.
on
(
"
changes
"
this
.
_inputEventHandler
)
;
this
.
editor
.
appendToLocalElement
(
this
.
node
)
;
const
cm
=
this
.
editor
.
codeMirror
;
cm
.
on
(
"
paste
"
(
_
event
)
=
>
this
.
props
.
onPaste
(
event
)
)
;
cm
.
on
(
"
drop
"
(
_
event
)
=
>
this
.
props
.
onPaste
(
event
)
)
;
this
.
node
.
addEventListener
(
"
keydown
"
event
=
>
{
if
(
event
.
keyCode
=
=
=
KeyCodes
.
DOM_VK_ESCAPE
&
&
this
.
autocompletePopup
.
isOpen
)
{
this
.
clearCompletion
(
)
;
event
.
preventDefault
(
)
;
event
.
stopPropagation
(
)
;
}
}
)
;
}
}
else
if
(
this
.
inputNode
)
{
this
.
inputNode
.
addEventListener
(
"
keypress
"
this
.
_keyPress
)
;
this
.
inputNode
.
addEventListener
(
"
input
"
this
.
_inputEventHandler
)
;
this
.
inputNode
.
addEventListener
(
"
keyup
"
this
.
_inputEventHandler
)
;
this
.
focus
(
)
;
}
this
.
inputBorderSize
=
this
.
inputNode
?
this
.
inputNode
.
getBoundingClientRect
(
)
.
height
-
this
.
inputNode
.
clientHeight
:
0
;
this
.
_inputCharWidth
=
this
.
_getInputCharWidth
(
)
;
this
.
_chevronWidth
=
this
.
editor
?
null
:
this
.
_getChevronWidth
(
)
;
this
.
hud
.
window
.
addEventListener
(
"
blur
"
this
.
_blurEventHandler
)
;
this
.
lastInputValue
&
&
this
.
setInputValue
(
this
.
lastInputValue
)
;
}
shouldComponentUpdate
(
nextProps
nextState
)
{
return
false
;
}
get
outputNode
(
)
{
return
this
.
hud
.
outputNode
;
}
get
webConsoleClient
(
)
{
return
this
.
hud
.
webConsoleClient
;
}
focus
(
)
{
if
(
this
.
editor
)
{
this
.
editor
.
focus
(
)
;
}
else
if
(
this
.
inputNode
&
&
!
this
.
inputNode
.
getAttribute
(
"
focused
"
)
)
{
this
.
inputNode
.
focus
(
)
;
}
}
async
_executeResultCallback
(
response
)
{
if
(
!
this
.
hud
)
{
return
null
;
}
if
(
response
.
error
)
{
console
.
error
(
"
Evaluation
error
"
+
response
.
error
+
"
:
"
+
response
.
message
)
;
return
null
;
}
let
errorMessage
=
response
.
exceptionMessage
;
if
(
typeof
response
.
exception
=
=
=
"
string
"
)
{
errorMessage
=
new
Error
(
errorMessage
)
.
toString
(
)
;
}
const
result
=
response
.
result
;
const
helperResult
=
response
.
helperResult
;
const
helperHasRawOutput
=
!
!
(
helperResult
|
|
{
}
)
.
rawOutput
;
if
(
helperResult
&
&
helperResult
.
type
)
{
switch
(
helperResult
.
type
)
{
case
"
clearOutput
"
:
this
.
hud
.
clearOutput
(
)
;
break
;
case
"
clearHistory
"
:
this
.
props
.
clearHistory
(
)
;
break
;
case
"
inspectObject
"
:
this
.
inspectObjectActor
(
helperResult
.
object
)
;
break
;
case
"
error
"
:
try
{
errorMessage
=
l10n
.
getStr
(
helperResult
.
message
)
;
}
catch
(
ex
)
{
errorMessage
=
helperResult
.
message
;
}
break
;
case
"
help
"
:
this
.
hud
.
owner
.
openLink
(
HELP_URL
)
;
break
;
case
"
copyValueToClipboard
"
:
clipboardHelper
.
copyString
(
helperResult
.
value
)
;
break
;
case
"
screenshotOutput
"
:
const
{
args
value
}
=
helperResult
;
const
results
=
await
processScreenshot
(
this
.
hud
.
window
args
value
)
;
this
.
screenshotNotify
(
results
)
;
return
null
;
}
}
if
(
!
errorMessage
&
&
result
&
&
typeof
result
=
=
"
object
"
&
&
result
.
type
=
=
"
undefined
"
&
&
helperResult
&
&
!
helperHasRawOutput
)
{
return
null
;
}
if
(
this
.
hud
.
consoleOutput
)
{
return
this
.
hud
.
consoleOutput
.
dispatchMessageAdd
(
response
true
)
;
}
return
null
;
}
inspectObjectActor
(
objectActor
)
{
this
.
hud
.
consoleOutput
.
dispatchMessageAdd
(
{
helperResult
:
{
type
:
"
inspectObject
"
object
:
objectActor
}
}
true
)
;
return
this
.
hud
.
consoleOutput
;
}
screenshotNotify
(
results
)
{
const
wrappedResults
=
results
.
map
(
message
=
>
(
{
message
type
:
"
logMessage
"
}
)
)
;
this
.
hud
.
consoleOutput
.
dispatchMessagesAdd
(
wrappedResults
)
;
}
async
execute
(
executeString
)
{
executeString
=
executeString
|
|
this
.
getInputValue
(
)
;
if
(
!
executeString
)
{
return
null
;
}
this
.
props
.
appendToHistory
(
executeString
)
;
WebConsoleUtils
.
usageCount
+
+
;
this
.
setInputValue
(
"
"
)
;
this
.
clearCompletion
(
)
;
let
selectedNodeActor
=
null
;
const
inspectorSelection
=
this
.
hud
.
owner
.
getInspectorSelection
(
)
;
if
(
inspectorSelection
&
&
inspectorSelection
.
nodeFront
)
{
selectedNodeActor
=
inspectorSelection
.
nodeFront
.
actorID
;
}
const
{
ConsoleCommand
}
=
require
(
"
devtools
/
client
/
webconsole
/
types
"
)
;
const
cmdMessage
=
new
ConsoleCommand
(
{
messageText
:
executeString
}
)
;
this
.
hud
.
proxy
.
dispatchMessageAdd
(
cmdMessage
)
;
const
options
=
{
frame
:
this
.
SELECTED_FRAME
selectedNodeActor
}
;
const
mappedString
=
await
this
.
hud
.
owner
.
getMappedExpression
(
executeString
)
;
const
onEvaluated
=
this
.
requestEvaluation
(
mappedString
options
)
.
then
(
res
=
>
res
res
=
>
res
)
;
const
response
=
await
onEvaluated
;
return
this
.
_executeResultCallback
(
response
)
;
}
requestEvaluation
(
str
options
=
{
}
)
{
this
.
props
.
serviceContainer
.
recordTelemetryEvent
(
"
execute_js
"
{
"
lines
"
:
str
.
split
(
/
\
n
/
)
.
length
}
)
;
let
frameActor
=
null
;
if
(
"
frame
"
in
options
)
{
frameActor
=
this
.
getFrameActor
(
options
.
frame
)
;
}
const
evalOptions
=
{
bindObjectActor
:
options
.
bindObjectActor
frameActor
selectedNodeActor
:
options
.
selectedNodeActor
selectedObjectActor
:
options
.
selectedObjectActor
}
;
return
this
.
webConsoleClient
.
evaluateJSAsync
(
str
null
evalOptions
)
;
}
copyObject
(
evalString
evalOptions
)
{
return
this
.
webConsoleClient
.
evaluateJSAsync
(
copy
(
{
evalString
}
)
null
evalOptions
)
;
}
getFrameActor
(
frame
)
{
const
state
=
this
.
hud
.
owner
.
getDebuggerFrames
(
)
;
if
(
!
state
)
{
return
null
;
}
let
grip
;
if
(
frame
=
=
this
.
SELECTED_FRAME
)
{
grip
=
state
.
frames
[
state
.
selected
]
;
}
else
{
grip
=
state
.
frames
[
frame
]
;
}
return
grip
?
grip
.
actor
:
null
;
}
resizeInput
(
)
{
if
(
this
.
props
.
codeMirrorEnabled
)
{
return
;
}
if
(
!
this
.
inputNode
)
{
return
;
}
const
inputNode
=
this
.
inputNode
;
inputNode
.
style
.
height
=
"
auto
"
;
const
scrollHeight
=
inputNode
.
scrollHeight
;
if
(
scrollHeight
>
0
)
{
inputNode
.
style
.
height
=
(
scrollHeight
+
this
.
inputBorderSize
)
+
"
px
"
;
}
}
setInputValue
(
newValue
=
"
"
)
{
if
(
this
.
props
.
codeMirrorEnabled
)
{
if
(
this
.
editor
)
{
this
.
editor
.
codeMirror
.
operation
(
(
)
=
>
{
this
.
editor
.
setText
(
newValue
)
;
const
lines
=
newValue
.
split
(
"
\
n
"
)
;
this
.
editor
.
setCursor
(
{
line
:
lines
.
length
-
1
ch
:
lines
[
lines
.
length
-
1
]
.
length
}
)
;
this
.
editor
.
setAutoCompletionText
(
)
;
}
)
;
}
}
else
{
if
(
!
this
.
inputNode
)
{
return
;
}
this
.
inputNode
.
value
=
newValue
;
this
.
completeNode
.
value
=
"
"
;
}
this
.
lastInputValue
=
newValue
;
this
.
resizeInput
(
)
;
this
.
emit
(
"
set
-
input
-
value
"
)
;
}
getInputValue
(
)
{
if
(
this
.
props
.
codeMirrorEnabled
)
{
return
this
.
editor
?
this
.
editor
.
getText
(
)
|
|
"
"
:
"
"
;
}
return
this
.
inputNode
?
this
.
inputNode
.
value
|
|
"
"
:
"
"
;
}
getSelectionStart
(
)
{
if
(
this
.
props
.
codeMirrorEnabled
)
{
return
this
.
getInputValueBeforeCursor
(
)
.
length
;
}
return
this
.
inputNode
?
this
.
inputNode
.
selectionStart
:
null
;
}
_inputEventHandler
(
)
{
const
value
=
this
.
getInputValue
(
)
;
if
(
this
.
lastInputValue
!
=
=
value
)
{
this
.
resizeInput
(
)
;
this
.
updateAutocompletion
(
)
;
this
.
lastInputValue
=
value
;
}
}
_blurEventHandler
(
)
{
if
(
this
.
autocompletePopup
)
{
this
.
clearCompletion
(
)
;
}
}
_keyPress
(
event
)
{
const
inputNode
=
this
.
inputNode
;
const
inputValue
=
this
.
getInputValue
(
)
;
let
inputUpdated
=
false
;
if
(
event
.
ctrlKey
)
{
switch
(
event
.
charCode
)
{
case
101
:
if
(
Services
.
appinfo
.
OS
=
=
"
WINNT
"
)
{
break
;
}
let
lineEndPos
=
inputValue
.
length
;
if
(
this
.
hasMultilineInput
(
)
)
{
for
(
let
i
=
inputNode
.
selectionEnd
;
i
<
lineEndPos
;
i
+
+
)
{
if
(
inputValue
.
charAt
(
i
)
=
=
"
\
r
"
|
|
inputValue
.
charAt
(
i
)
=
=
"
\
n
"
)
{
lineEndPos
=
i
;
break
;
}
}
}
inputNode
.
setSelectionRange
(
lineEndPos
lineEndPos
)
;
event
.
preventDefault
(
)
;
this
.
clearCompletion
(
)
;
break
;
case
110
:
if
(
Services
.
appinfo
.
OS
=
=
"
Darwin
"
&
&
this
.
canCaretGoNext
(
)
&
&
this
.
historyPeruse
(
HISTORY_FORWARD
)
)
{
event
.
preventDefault
(
)
;
this
.
focus
(
)
;
}
this
.
clearCompletion
(
)
;
break
;
case
112
:
if
(
Services
.
appinfo
.
OS
=
=
"
Darwin
"
&
&
this
.
canCaretGoPrevious
(
)
&
&
this
.
historyPeruse
(
HISTORY_BACK
)
)
{
event
.
preventDefault
(
)
;
this
.
focus
(
)
;
}
this
.
clearCompletion
(
)
;
break
;
default
:
break
;
}
return
;
}
else
if
(
event
.
keyCode
=
=
KeyCodes
.
DOM_VK_RETURN
)
{
if
(
!
this
.
autocompletePopup
.
isOpen
&
&
(
event
.
shiftKey
|
|
!
Debugger
.
isCompilableUnit
(
this
.
getInputValue
(
)
)
)
)
{
return
;
}
}
switch
(
event
.
keyCode
)
{
case
KeyCodes
.
DOM_VK_ESCAPE
:
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
clearCompletion
(
)
;
event
.
preventDefault
(
)
;
event
.
stopPropagation
(
)
;
}
break
;
case
KeyCodes
.
DOM_VK_RETURN
:
if
(
this
.
hasAutocompletionSuggestion
(
)
)
{
this
.
acceptProposedCompletion
(
)
;
}
else
{
this
.
execute
(
)
;
}
event
.
preventDefault
(
)
;
break
;
case
KeyCodes
.
DOM_VK_UP
:
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectPreviousItem
(
)
;
event
.
preventDefault
(
)
;
}
else
if
(
this
.
canCaretGoPrevious
(
)
)
{
inputUpdated
=
this
.
historyPeruse
(
HISTORY_BACK
)
;
}
if
(
inputUpdated
)
{
event
.
preventDefault
(
)
;
}
break
;
case
KeyCodes
.
DOM_VK_DOWN
:
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectNextItem
(
)
;
event
.
preventDefault
(
)
;
}
else
if
(
this
.
canCaretGoNext
(
)
)
{
inputUpdated
=
this
.
historyPeruse
(
HISTORY_FORWARD
)
;
}
if
(
inputUpdated
)
{
event
.
preventDefault
(
)
;
}
break
;
case
KeyCodes
.
DOM_VK_PAGE_UP
:
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectPreviousPageItem
(
)
;
}
else
{
this
.
hud
.
outputScroller
.
scrollTop
=
Math
.
max
(
0
this
.
hud
.
outputScroller
.
scrollTop
-
this
.
hud
.
outputScroller
.
clientHeight
)
;
}
event
.
preventDefault
(
)
;
break
;
case
KeyCodes
.
DOM_VK_PAGE_DOWN
:
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectNextPageItem
(
)
;
}
else
{
this
.
hud
.
outputScroller
.
scrollTop
=
Math
.
min
(
this
.
hud
.
outputScroller
.
scrollHeight
this
.
hud
.
outputScroller
.
scrollTop
+
this
.
hud
.
outputScroller
.
clientHeight
)
;
}
event
.
preventDefault
(
)
;
break
;
case
KeyCodes
.
DOM_VK_HOME
:
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectedIndex
=
0
;
event
.
preventDefault
(
)
;
}
else
if
(
inputValue
.
length
<
=
0
)
{
this
.
hud
.
outputScroller
.
scrollTop
=
0
;
event
.
preventDefault
(
)
;
}
break
;
case
KeyCodes
.
DOM_VK_END
:
if
(
this
.
autocompletePopup
.
isOpen
)
{
this
.
autocompletePopup
.
selectedIndex
=
this
.
autocompletePopup
.
itemCount
-
1
;
event
.
preventDefault
(
)
;
}
else
if
(
inputValue
.
length
<
=
0
)
{
this
.
hud
.
outputScroller
.
scrollTop
=
this
.
hud
.
outputScroller
.
scrollHeight
;
event
.
preventDefault
(
)
;
}
break
;
case
KeyCodes
.
DOM_VK_LEFT
:
if
(
this
.
autocompletePopup
.
isOpen
|
|
this
.
getAutoCompletionText
(
)
)
{
this
.
clearCompletion
(
)
;
}
break
;
case
KeyCodes
.
DOM_VK_RIGHT
:
if
(
this
.
getAutoCompletionText
(
)
)
{
this
.
acceptProposedCompletion
(
)
;
event
.
preventDefault
(
)
;
}
this
.
clearCompletion
(
)
;
break
;
case
KeyCodes
.
DOM_VK_TAB
:
if
(
this
.
hasAutocompletionSuggestion
(
)
)
{
this
.
acceptProposedCompletion
(
)
;
event
.
preventDefault
(
)
;
}
else
if
(
!
this
.
hasEmptyInput
(
)
)
{
if
(
!
event
.
shiftKey
)
{
this
.
insertStringAtCursor
(
"
\
t
"
)
;
}
event
.
preventDefault
(
)
;
}
break
;
default
:
break
;
}
}
historyPeruse
(
direction
)
{
const
{
history
updateHistoryPosition
getValueFromHistory
}
=
this
.
props
;
if
(
!
history
.
entries
.
length
)
{
return
false
;
}
const
newInputValue
=
getValueFromHistory
(
direction
)
;
const
expression
=
this
.
getInputValue
(
)
;
updateHistoryPosition
(
direction
expression
)
;
if
(
newInputValue
!
=
null
)
{
this
.
setInputValue
(
newInputValue
)
;
return
true
;
}
return
false
;
}
hasEmptyInput
(
)
{
return
this
.
getInputValue
(
)
=
=
=
"
"
;
}
hasMultilineInput
(
)
{
return
/
[
\
r
\
n
]
/
.
test
(
this
.
getInputValue
(
)
)
;
}
canCaretGoPrevious
(
)
{
const
inputValue
=
this
.
getInputValue
(
)
;
if
(
this
.
editor
)
{
const
{
line
ch
}
=
this
.
editor
.
getCursor
(
)
;
return
(
line
=
=
=
0
&
&
ch
=
=
=
0
)
|
|
(
line
=
=
=
0
&
&
ch
=
=
=
inputValue
.
length
)
;
}
const
node
=
this
.
inputNode
;
if
(
node
.
selectionStart
!
=
node
.
selectionEnd
)
{
return
false
;
}
const
multiline
=
/
[
\
r
\
n
]
/
.
test
(
inputValue
)
;
return
node
.
selectionStart
=
=
0
?
true
:
node
.
selectionStart
=
=
inputValue
.
length
&
&
!
multiline
;
}
canCaretGoNext
(
)
{
const
inputValue
=
this
.
getInputValue
(
)
;
const
multiline
=
/
[
\
r
\
n
]
/
.
test
(
inputValue
)
;
if
(
this
.
editor
)
{
const
{
line
ch
}
=
this
.
editor
.
getCursor
(
)
;
return
(
!
multiline
&
&
ch
=
=
=
0
)
|
|
this
.
editor
.
getDoc
(
)
.
getRange
(
{
line
:
0
ch
:
0
}
{
line
ch
}
)
.
length
=
=
=
inputValue
.
length
;
}
const
node
=
this
.
inputNode
;
if
(
node
.
selectionStart
!
=
node
.
selectionEnd
)
{
return
false
;
}
return
node
.
selectionStart
=
=
node
.
value
.
length
?
true
:
node
.
selectionStart
=
=
0
&
&
!
multiline
;
}
async
updateAutocompletion
(
)
{
const
inputValue
=
this
.
getInputValue
(
)
;
const
{
editor
inputNode
}
=
this
;
const
frameActor
=
this
.
getFrameActor
(
this
.
SELECTED_FRAME
)
;
if
(
!
inputValue
|
|
(
inputNode
&
&
inputNode
.
selectionStart
!
=
inputNode
.
selectionEnd
)
|
|
(
editor
&
&
editor
.
getSelection
(
)
)
|
|
(
this
.
lastInputValue
=
=
=
inputValue
&
&
frameActor
=
=
=
this
.
_lastFrameActorId
)
)
{
this
.
clearCompletion
(
)
;
this
.
emit
(
"
autocomplete
-
updated
"
)
;
return
;
}
const
cursor
=
this
.
getSelectionStart
(
)
;
const
input
=
inputValue
.
substring
(
0
cursor
)
;
if
(
!
/
[
a
-
zA
-
Z0
-
9
]
/
.
test
(
input
)
|
|
frameActor
!
=
this
.
_lastFrameActorId
)
{
this
.
_autocompleteQuery
=
null
;
this
.
_autocompleteCache
=
null
;
}
if
(
this
.
_autocompleteQuery
&
&
input
.
startsWith
(
this
.
_autocompleteQuery
)
)
{
let
filterBy
=
input
;
const
lastNonAlpha
=
input
.
match
(
/
[
^
a
-
zA
-
Z0
-
9_
:
]
[
a
-
zA
-
Z0
-
9_
:
]
*
/
)
;
if
(
lastNonAlpha
)
{
filterBy
=
input
.
substring
(
input
.
lastIndexOf
(
lastNonAlpha
)
+
1
)
;
}
const
newList
=
this
.
_autocompleteCache
.
sort
(
)
.
filter
(
l
=
>
l
.
startsWith
(
filterBy
)
)
;
this
.
_receiveAutocompleteProperties
(
null
{
matches
:
newList
matchProp
:
filterBy
}
)
;
return
;
}
const
requestId
=
gSequenceId
(
)
;
this
.
_lastFrameActorId
=
frameActor
;
this
.
currentAutoCompletionRequestId
=
requestId
;
const
message
=
await
this
.
webConsoleClient
.
autocomplete
(
input
cursor
frameActor
)
;
this
.
_receiveAutocompleteProperties
(
requestId
message
)
;
}
_receiveAutocompleteProperties
(
requestId
message
)
{
if
(
this
.
currentAutoCompletionRequestId
!
=
=
requestId
)
{
return
;
}
this
.
currentAutoCompletionRequestId
=
null
;
const
inputUntilCursor
=
this
.
getInputValueBeforeCursor
(
)
;
if
(
requestId
!
=
null
&
&
/
[
a
-
zA
-
Z0
-
9
.
]
/
.
test
(
inputUntilCursor
)
)
{
this
.
_autocompleteCache
=
message
.
matches
;
this
.
_autocompleteQuery
=
inputUntilCursor
;
}
const
matches
=
message
.
matches
;
const
lastPart
=
message
.
matchProp
;
if
(
!
matches
.
length
)
{
this
.
clearCompletion
(
)
;
this
.
emit
(
"
autocomplete
-
updated
"
)
;
return
;
}
const
popup
=
this
.
autocompletePopup
;
const
items
=
matches
.
map
(
match
=
>
(
{
preLabel
:
lastPart
label
:
match
}
)
)
;
popup
.
setItems
(
items
)
;
const
minimumAutoCompleteLength
=
2
;
if
(
items
.
length
>
=
minimumAutoCompleteLength
)
{
let
popupAlignElement
;
let
xOffset
;
let
yOffset
;
if
(
this
.
editor
)
{
popupAlignElement
=
this
.
node
.
querySelector
(
"
.
CodeMirror
-
cursor
"
)
;
xOffset
=
-
1
*
lastPart
.
length
*
this
.
_inputCharWidth
;
yOffset
=
5
;
}
else
if
(
this
.
inputNode
)
{
const
offset
=
inputUntilCursor
.
length
-
(
inputUntilCursor
.
lastIndexOf
(
"
\
n
"
)
+
1
)
-
lastPart
.
length
;
xOffset
=
(
offset
*
this
.
_inputCharWidth
)
+
this
.
_chevronWidth
;
popupAlignElement
=
this
.
inputNode
;
}
if
(
popupAlignElement
)
{
popup
.
openPopup
(
popupAlignElement
xOffset
yOffset
)
;
}
}
else
if
(
items
.
length
<
minimumAutoCompleteLength
&
&
popup
.
isOpen
)
{
popup
.
hidePopup
(
)
;
}
if
(
items
.
length
>
0
)
{
const
suffix
=
items
[
0
]
.
label
.
substring
(
lastPart
.
length
)
;
this
.
setAutoCompletionText
(
suffix
)
;
}
this
.
emit
(
"
autocomplete
-
updated
"
)
;
}
onAutocompleteSelect
(
)
{
const
{
selectedItem
}
=
this
.
autocompletePopup
;
if
(
selectedItem
)
{
const
suffix
=
selectedItem
.
label
.
substring
(
selectedItem
.
preLabel
.
length
)
;
this
.
setAutoCompletionText
(
suffix
)
;
}
else
{
this
.
setAutoCompletionText
(
"
"
)
;
}
}
clearCompletion
(
)
{
this
.
setAutoCompletionText
(
"
"
)
;
if
(
this
.
autocompletePopup
)
{
this
.
autocompletePopup
.
clearItems
(
)
;
if
(
this
.
autocompletePopup
.
isOpen
)
{
if
(
this
.
inputNode
)
{
this
.
inputNode
.
blur
(
)
;
}
this
.
autocompletePopup
.
once
(
"
popup
-
closed
"
(
)
=
>
{
this
.
focus
(
)
;
}
)
;
this
.
autocompletePopup
.
hidePopup
(
)
;
}
}
}
acceptProposedCompletion
(
)
{
let
completionText
=
this
.
getAutoCompletionText
(
)
;
if
(
!
completionText
&
&
this
.
autocompletePopup
.
isOpen
&
&
this
.
autocompletePopup
.
selectedItem
)
{
const
{
selectedItem
}
=
this
.
autocompletePopup
;
completionText
=
selectedItem
.
label
.
substring
(
selectedItem
.
preLabel
.
length
)
;
}
if
(
!
completionText
)
{
return
false
;
}
this
.
insertStringAtCursor
(
completionText
)
;
this
.
clearCompletion
(
)
;
return
true
;
}
getInputValueBeforeCursor
(
)
{
if
(
this
.
editor
)
{
return
this
.
editor
.
getDoc
(
)
.
getRange
(
{
line
:
0
ch
:
0
}
this
.
editor
.
getCursor
(
)
)
;
}
if
(
this
.
inputNode
)
{
const
cursor
=
this
.
inputNode
.
selectionStart
;
return
this
.
getInputValue
(
)
.
substring
(
0
cursor
)
;
}
return
null
;
}
insertStringAtCursor
(
str
)
{
const
value
=
this
.
getInputValue
(
)
;
const
prefix
=
this
.
getInputValueBeforeCursor
(
)
;
const
suffix
=
value
.
replace
(
prefix
"
"
)
;
const
editorCursor
=
this
.
editor
&
&
this
.
editor
.
getCursor
(
)
;
this
.
setInputValue
(
prefix
+
str
+
suffix
)
;
if
(
this
.
inputNode
)
{
const
newCursor
=
prefix
.
length
+
str
.
length
;
this
.
inputNode
.
selectionStart
=
this
.
inputNode
.
selectionEnd
=
newCursor
;
}
else
if
(
this
.
editor
)
{
this
.
editor
.
setCursor
(
{
line
:
editorCursor
.
line
ch
:
editorCursor
.
ch
+
str
.
length
}
)
;
}
}
setAutoCompletionText
(
suffix
)
{
if
(
suffix
&
&
!
this
.
canDisplayAutoCompletionText
(
)
)
{
suffix
=
"
"
;
}
if
(
this
.
completeNode
)
{
const
lines
=
this
.
getInputValueBeforeCursor
(
)
.
split
(
"
\
n
"
)
;
const
lastLine
=
lines
[
lines
.
length
-
1
]
;
const
prefix
=
(
"
\
n
"
.
repeat
(
lines
.
length
-
1
)
)
+
lastLine
.
replace
(
/
[
\
S
]
/
g
"
"
)
;
this
.
completeNode
.
value
=
suffix
?
prefix
+
suffix
:
"
"
;
}
if
(
this
.
editor
)
{
this
.
editor
.
setAutoCompletionText
(
suffix
)
;
}
}
getAutoCompletionText
(
)
{
if
(
this
.
completeNode
)
{
return
this
.
completeNode
.
value
.
replace
(
/
^
\
s
+
/
gm
"
"
)
;
}
if
(
this
.
editor
)
{
return
this
.
editor
.
getAutoCompletionText
(
)
;
}
return
null
;
}
hasAutocompletionSuggestion
(
)
{
return
this
.
getAutoCompletionText
(
)
|
|
(
this
.
autocompletePopup
.
isOpen
&
&
Number
.
isInteger
(
this
.
autocompletePopup
.
selectedIndex
)
&
&
this
.
autocompletePopup
.
selectedIndex
>
-
1
)
;
}
canDisplayAutoCompletionText
(
)
{
if
(
this
.
editor
)
{
const
{
ch
line
}
=
this
.
editor
.
getCursor
(
)
;
const
lineContent
=
this
.
editor
.
getLine
(
line
)
;
const
textAfterCursor
=
lineContent
.
substring
(
ch
)
;
return
textAfterCursor
=
=
=
"
"
;
}
if
(
this
.
inputNode
)
{
const
value
=
this
.
getInputValue
(
)
;
const
textAfterCursor
=
value
.
substring
(
this
.
inputNode
.
selectionStart
)
;
return
textAfterCursor
.
split
(
"
\
n
"
)
[
0
]
=
=
=
"
"
;
}
return
false
;
}
_getInputCharWidth
(
)
{
if
(
!
this
.
inputNode
&
&
!
this
.
node
)
{
return
null
;
}
if
(
this
.
editor
)
{
return
this
.
editor
.
defaultCharWidth
(
)
;
}
const
doc
=
this
.
hud
.
document
;
const
tempLabel
=
doc
.
createElement
(
"
span
"
)
;
const
style
=
tempLabel
.
style
;
style
.
position
=
"
fixed
"
;
style
.
padding
=
"
0
"
;
style
.
margin
=
"
0
"
;
style
.
width
=
"
auto
"
;
style
.
color
=
"
transparent
"
;
WebConsoleUtils
.
copyTextStyles
(
this
.
inputNode
tempLabel
)
;
tempLabel
.
textContent
=
"
x
"
;
doc
.
documentElement
.
appendChild
(
tempLabel
)
;
const
width
=
tempLabel
.
offsetWidth
;
tempLabel
.
remove
(
)
;
return
width
;
}
_getChevronWidth
(
)
{
if
(
!
this
.
inputNode
)
{
return
null
;
}
const
doc
=
this
.
hud
.
document
;
return
doc
.
defaultView
.
getComputedStyle
(
this
.
inputNode
)
.
paddingLeft
.
replace
(
/
[
^
0
-
9
.
]
/
g
"
"
)
-
4
;
}
onContextMenu
(
e
)
{
if
(
this
.
props
.
hud
.
isBrowserConsole
)
{
this
.
props
.
serviceContainer
.
openEditContextMenu
(
e
)
;
}
}
destroy
(
)
{
this
.
clearCompletion
(
)
;
this
.
webConsoleClient
.
clearNetworkRequests
(
)
;
if
(
this
.
hud
.
outputNode
)
{
this
.
hud
.
outputNode
.
innerHTML
=
"
"
;
}
if
(
this
.
autocompletePopup
)
{
this
.
autocompletePopup
.
destroy
(
)
;
this
.
autocompletePopup
=
null
;
}
if
(
this
.
inputNode
)
{
this
.
inputNode
.
removeEventListener
(
"
keypress
"
this
.
_keyPress
)
;
this
.
inputNode
.
removeEventListener
(
"
input
"
this
.
_inputEventHandler
)
;
this
.
inputNode
.
removeEventListener
(
"
keyup
"
this
.
_inputEventHandler
)
;
this
.
hud
.
window
.
removeEventListener
(
"
blur
"
this
.
_blurEventHandler
)
;
}
if
(
this
.
editor
)
{
this
.
editor
.
destroy
(
)
;
this
.
editor
=
null
;
}
this
.
hud
=
null
;
}
render
(
)
{
if
(
this
.
props
.
hud
.
isBrowserConsole
&
&
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
chrome
.
enabled
"
)
)
{
return
null
;
}
if
(
this
.
props
.
codeMirrorEnabled
)
{
return
dom
.
div
(
{
className
:
"
jsterm
-
input
-
container
devtools
-
monospace
"
key
:
"
jsterm
-
container
"
style
:
{
direction
:
"
ltr
"
}
"
aria
-
live
"
:
"
off
"
onContextMenu
:
this
.
onContextMenu
ref
:
node
=
>
{
this
.
node
=
node
;
}
}
)
;
}
const
{
onPaste
}
=
this
.
props
;
return
(
dom
.
div
(
{
className
:
"
jsterm
-
input
-
container
"
key
:
"
jsterm
-
container
"
style
:
{
direction
:
"
ltr
"
}
"
aria
-
live
"
:
"
off
"
}
dom
.
textarea
(
{
className
:
"
jsterm
-
complete
-
node
devtools
-
monospace
"
key
:
"
complete
"
tabIndex
:
"
-
1
"
ref
:
node
=
>
{
this
.
completeNode
=
node
;
}
}
)
dom
.
textarea
(
{
className
:
"
jsterm
-
input
-
node
devtools
-
monospace
"
key
:
"
input
"
tabIndex
:
"
0
"
rows
:
"
1
"
"
aria
-
autocomplete
"
:
"
list
"
ref
:
node
=
>
{
this
.
inputNode
=
node
;
}
onPaste
:
onPaste
onDrop
:
onPaste
onContextMenu
:
this
.
onContextMenu
}
)
)
)
;
}
}
function
mapStateToProps
(
state
)
{
return
{
history
:
getHistory
(
state
)
getValueFromHistory
:
(
direction
)
=
>
getHistoryValue
(
state
direction
)
}
;
}
function
mapDispatchToProps
(
dispatch
)
{
return
{
appendToHistory
:
(
expr
)
=
>
dispatch
(
historyActions
.
appendToHistory
(
expr
)
)
clearHistory
:
(
)
=
>
dispatch
(
historyActions
.
clearHistory
(
)
)
updateHistoryPosition
:
(
direction
expression
)
=
>
dispatch
(
historyActions
.
updateHistoryPosition
(
direction
expression
)
)
}
;
}
module
.
exports
=
connect
(
mapStateToProps
mapDispatchToProps
)
(
JSTerm
)
;
