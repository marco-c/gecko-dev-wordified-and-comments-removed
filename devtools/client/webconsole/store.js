"
use
strict
"
;
const
{
FilterState
}
=
require
(
"
devtools
/
client
/
webconsole
/
reducers
/
filters
"
)
;
const
{
PrefState
}
=
require
(
"
devtools
/
client
/
webconsole
/
reducers
/
prefs
"
)
;
const
{
UiState
}
=
require
(
"
devtools
/
client
/
webconsole
/
reducers
/
ui
"
)
;
const
{
applyMiddleware
compose
createStore
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
PREFS
}
=
require
(
"
devtools
/
client
/
webconsole
/
constants
"
)
;
const
{
getPrefsService
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
/
prefs
"
)
;
const
{
reducers
}
=
require
(
"
.
/
reducers
/
index
"
)
;
const
eventTelemetry
=
require
(
"
.
/
middleware
/
event
-
telemetry
"
)
;
const
historyPersistence
=
require
(
"
.
/
middleware
/
history
-
persistence
"
)
;
const
thunk
=
require
(
"
.
/
middleware
/
thunk
"
)
;
const
enableBatching
=
require
(
"
.
/
enhancers
/
batching
"
)
;
const
enableActorReleaser
=
require
(
"
.
/
enhancers
/
actor
-
releaser
"
)
;
const
ensureCSSErrorReportingEnabled
=
require
(
"
.
/
enhancers
/
css
-
error
-
reporting
"
)
;
const
enableNetProvider
=
require
(
"
.
/
enhancers
/
net
-
provider
"
)
;
const
enableMessagesCacheClearing
=
require
(
"
.
/
enhancers
/
message
-
cache
-
clearing
"
)
;
function
configureStore
(
hud
options
=
{
}
)
{
const
prefsService
=
getPrefsService
(
hud
)
;
const
{
getBoolPref
getIntPref
}
=
prefsService
;
const
logLimit
=
options
.
logLimit
|
|
Math
.
max
(
getIntPref
(
"
devtools
.
hud
.
loglimit
"
)
1
)
;
const
sidebarToggle
=
getBoolPref
(
PREFS
.
FEATURES
.
SIDEBAR_TOGGLE
)
;
const
jstermCodeMirror
=
getBoolPref
(
PREFS
.
FEATURES
.
JSTERM_CODE_MIRROR
)
;
const
historyCount
=
getIntPref
(
PREFS
.
UI
.
INPUT_HISTORY_COUNT
)
;
const
initialState
=
{
prefs
:
PrefState
(
{
logLimit
sidebarToggle
jstermCodeMirror
historyCount
}
)
filters
:
FilterState
(
{
error
:
getBoolPref
(
PREFS
.
FILTER
.
ERROR
)
warn
:
getBoolPref
(
PREFS
.
FILTER
.
WARN
)
info
:
getBoolPref
(
PREFS
.
FILTER
.
INFO
)
debug
:
getBoolPref
(
PREFS
.
FILTER
.
DEBUG
)
log
:
getBoolPref
(
PREFS
.
FILTER
.
LOG
)
css
:
getBoolPref
(
PREFS
.
FILTER
.
CSS
)
net
:
getBoolPref
(
PREFS
.
FILTER
.
NET
)
netxhr
:
getBoolPref
(
PREFS
.
FILTER
.
NETXHR
)
}
)
ui
:
UiState
(
{
filterBarVisible
:
getBoolPref
(
PREFS
.
UI
.
FILTER_BAR
)
networkMessageActiveTabId
:
"
headers
"
persistLogs
:
getBoolPref
(
PREFS
.
UI
.
PERSIST
)
}
)
}
;
const
middleware
=
applyMiddleware
(
thunk
.
bind
(
null
{
prefsService
client
:
(
options
.
services
|
|
{
}
)
}
)
historyPersistence
eventTelemetry
.
bind
(
null
options
.
telemetry
options
.
sessionId
)
)
;
return
createStore
(
createRootReducer
(
)
initialState
compose
(
middleware
enableActorReleaser
(
hud
)
enableBatching
(
)
enableNetProvider
(
hud
)
enableMessagesCacheClearing
(
hud
)
ensureCSSErrorReportingEnabled
(
hud
)
)
)
;
}
function
createRootReducer
(
)
{
return
function
rootReducer
(
state
action
)
{
const
newState
=
[
.
.
.
Object
.
entries
(
reducers
)
]
.
reduce
(
(
res
[
key
reducer
]
)
=
>
{
if
(
key
!
=
=
"
messages
"
&
&
key
!
=
=
"
history
"
)
{
res
[
key
]
=
reducer
(
state
[
key
]
action
)
;
}
return
res
;
}
{
}
)
;
newState
.
history
=
reducers
.
history
(
state
.
history
action
newState
.
prefs
)
;
return
Object
.
assign
(
newState
{
messages
:
reducers
.
messages
(
state
.
messages
action
newState
.
filters
newState
.
prefs
)
}
)
;
}
;
}
module
.
exports
.
configureStore
=
configureStore
;
