"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
old
/
"
+
"
test
/
test
-
consoleiframes
.
html
"
;
const
expectedMessages
=
[
{
text
:
"
main
file
"
category
:
CATEGORY_WEBDEV
severity
:
SEVERITY_LOG
}
{
text
:
"
blah
"
category
:
CATEGORY_JS
severity
:
SEVERITY_ERROR
}
{
text
:
"
iframe
2
"
category
:
CATEGORY_WEBDEV
severity
:
SEVERITY_LOG
}
{
text
:
"
iframe
3
"
category
:
CATEGORY_WEBDEV
severity
:
SEVERITY_LOG
}
]
;
const
expectedMessagesAny
=
[
{
name
:
"
iframe
1
(
count
:
2
)
"
text
:
"
iframe
1
"
category
:
CATEGORY_WEBDEV
severity
:
SEVERITY_LOG
count
:
2
}
{
name
:
"
iframe
1
(
repeats
:
2
)
"
text
:
"
iframe
1
"
category
:
CATEGORY_WEBDEV
severity
:
SEVERITY_LOG
repeats
:
2
}
]
;
add_task
(
function
*
(
)
{
if
(
!
Services
.
appinfo
.
browserTabsRemoteAutostart
)
{
expectUncaughtException
(
)
;
}
yield
loadTab
(
TEST_URI
)
;
let
hud
=
yield
openConsole
(
)
;
ok
(
hud
"
web
console
opened
"
)
;
yield
testWebConsole
(
hud
)
;
yield
closeConsole
(
)
;
info
(
"
web
console
closed
"
)
;
hud
=
yield
HUDService
.
toggleBrowserConsole
(
)
;
yield
testBrowserConsole
(
hud
)
;
yield
closeConsole
(
)
;
}
)
;
function
*
testWebConsole
(
hud
)
{
yield
waitForMessages
(
{
webconsole
:
hud
messages
:
expectedMessages
}
)
;
info
(
"
first
messages
matched
"
)
;
yield
waitForMessages
(
{
webconsole
:
hud
messages
:
expectedMessagesAny
matchCondition
:
"
any
"
}
)
;
}
function
*
testBrowserConsole
(
hud
)
{
ok
(
hud
"
browser
console
opened
"
)
;
if
(
Services
.
appinfo
.
browserTabsRemoteAutostart
)
{
todo
(
false
"
Bug
1241289
"
)
;
return
;
}
yield
waitForMessages
(
{
webconsole
:
hud
messages
:
expectedMessages
}
)
;
info
(
"
first
messages
matched
"
)
;
yield
waitForMessages
(
{
webconsole
:
hud
messages
:
expectedMessagesAny
matchCondition
:
"
any
"
}
)
;
}
