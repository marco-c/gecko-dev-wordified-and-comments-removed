"
use
strict
"
;
var
Services
=
require
(
"
Services
"
)
;
loader
.
lazyRequireGetter
(
this
"
Utils
"
"
devtools
/
client
/
webconsole
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
WebConsoleFrame
"
"
devtools
/
client
/
webconsole
/
webconsole
-
frame
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
viewSource
"
"
devtools
/
client
/
shared
/
view
-
source
"
)
;
loader
.
lazyRequireGetter
(
this
"
openDocLink
"
"
devtools
/
client
/
shared
/
link
"
true
)
;
var
gHudId
=
0
;
function
WebConsole
(
target
iframeWindow
chromeWindow
hudService
)
{
this
.
iframeWindow
=
iframeWindow
;
this
.
chromeWindow
=
chromeWindow
;
this
.
hudId
=
"
hud_
"
+
+
+
gHudId
;
this
.
target
=
target
;
this
.
browserWindow
=
this
.
chromeWindow
.
top
;
this
.
hudService
=
hudService
;
const
element
=
this
.
browserWindow
.
document
.
documentElement
;
if
(
element
.
getAttribute
(
"
windowtype
"
)
!
=
gDevTools
.
chromeWindowType
)
{
this
.
browserWindow
=
this
.
hudService
.
currentContext
(
)
;
}
this
.
ui
=
new
WebConsoleFrame
(
this
)
;
}
WebConsole
.
prototype
=
{
iframeWindow
:
null
chromeWindow
:
null
browserWindow
:
null
hudId
:
null
target
:
null
ui
:
null
_browserConsole
:
false
_destroyer
:
null
get
lastFinishedRequestCallback
(
)
{
return
this
.
hudService
.
lastFinishedRequest
.
callback
;
}
get
chromeUtilsWindow
(
)
{
if
(
this
.
browserWindow
)
{
return
this
.
browserWindow
;
}
return
this
.
chromeWindow
.
top
;
}
get
outputNode
(
)
{
return
this
.
ui
?
this
.
ui
.
outputNode
:
null
;
}
get
gViewSourceUtils
(
)
{
return
this
.
chromeUtilsWindow
.
gViewSourceUtils
;
}
init
(
)
{
return
this
.
ui
.
init
(
)
.
then
(
(
)
=
>
this
)
;
}
get
jsterm
(
)
{
return
this
.
ui
?
this
.
ui
.
jsterm
:
null
;
}
setFilterState
(
)
{
this
.
ui
&
&
this
.
ui
.
setFilterState
.
apply
(
this
.
ui
arguments
)
;
}
openLink
(
link
e
)
{
openDocLink
(
link
)
;
}
viewSource
(
sourceURL
sourceLine
)
{
this
.
gViewSourceUtils
.
viewSource
(
{
URL
:
sourceURL
lineNumber
:
sourceLine
|
|
0
}
)
;
}
viewSourceInStyleEditor
(
sourceURL
sourceLine
)
{
const
toolbox
=
gDevTools
.
getToolbox
(
this
.
target
)
;
if
(
!
toolbox
)
{
this
.
viewSource
(
sourceURL
sourceLine
)
;
return
;
}
toolbox
.
viewSourceInStyleEditor
(
sourceURL
sourceLine
)
;
}
viewSourceInDebugger
(
sourceURL
sourceLine
)
{
const
toolbox
=
gDevTools
.
getToolbox
(
this
.
target
)
;
if
(
!
toolbox
)
{
this
.
viewSource
(
sourceURL
sourceLine
)
;
return
;
}
toolbox
.
viewSourceInDebugger
(
sourceURL
sourceLine
)
.
then
(
(
)
=
>
{
this
.
ui
.
emit
(
"
source
-
in
-
debugger
-
opened
"
)
;
}
)
;
}
viewSourceInScratchpad
(
sourceURL
sourceLine
)
{
viewSource
.
viewSourceInScratchpad
(
sourceURL
sourceLine
)
;
}
getDebuggerFrames
(
)
{
const
toolbox
=
gDevTools
.
getToolbox
(
this
.
target
)
;
if
(
!
toolbox
)
{
return
null
;
}
const
panel
=
toolbox
.
getPanel
(
"
jsdebugger
"
)
;
if
(
!
panel
)
{
return
null
;
}
return
panel
.
getFrames
(
)
;
}
getMappedExpression
(
expression
)
{
const
toolbox
=
gDevTools
.
getToolbox
(
this
.
target
)
;
const
panel
=
toolbox
&
&
toolbox
.
getPanel
(
"
jsdebugger
"
)
;
if
(
panel
)
{
return
panel
.
getMappedExpression
(
expression
)
;
}
if
(
this
.
parserService
&
&
expression
.
includes
(
"
await
"
)
)
{
return
this
.
parserService
.
mapExpression
(
expression
)
;
}
return
null
;
}
get
parserService
(
)
{
if
(
this
.
_parserService
)
{
return
this
.
_parserService
;
}
this
.
_parserService
=
require
(
"
devtools
/
client
/
debugger
/
new
/
src
/
workers
/
parser
/
index
"
)
;
this
.
_parserService
.
start
(
"
resource
:
/
/
devtools
/
client
/
debugger
/
new
/
dist
/
parser
-
worker
.
js
"
this
.
browserWindow
)
;
return
this
.
_parserService
;
}
getInspectorSelection
(
)
{
const
toolbox
=
gDevTools
.
getToolbox
(
this
.
target
)
;
if
(
!
toolbox
)
{
return
null
;
}
const
panel
=
toolbox
.
getPanel
(
"
inspector
"
)
;
if
(
!
panel
|
|
!
panel
.
selection
)
{
return
null
;
}
return
panel
.
selection
;
}
async
destroy
(
)
{
if
(
this
.
_destroyer
)
{
return
this
.
_destroyer
;
}
this
.
_destroyer
=
(
async
(
)
=
>
{
this
.
hudService
.
consoles
.
delete
(
this
.
hudId
)
;
if
(
this
.
ui
)
{
await
this
.
ui
.
destroy
(
)
;
}
if
(
!
this
.
_browserConsole
)
{
try
{
await
this
.
target
.
activeTab
.
focus
(
)
;
}
catch
(
ex
)
{
}
}
if
(
this
.
_parserService
)
{
this
.
_parserService
.
stop
(
)
;
this
.
_parserService
=
null
;
}
const
id
=
Utils
.
supportsString
(
this
.
hudId
)
;
Services
.
obs
.
notifyObservers
(
id
"
web
-
console
-
destroyed
"
)
;
}
)
(
)
;
return
this
.
_destroyer
;
}
}
;
module
.
exports
=
WebConsole
;
