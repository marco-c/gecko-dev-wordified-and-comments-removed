"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
createElement
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
webconsole
/
actions
/
index
"
)
;
const
{
createContextMenu
createEditContextMenu
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
/
context
-
menu
"
)
;
const
{
configureStore
}
=
require
(
"
devtools
/
client
/
webconsole
/
store
"
)
;
const
{
isPacketPrivate
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
)
;
const
{
getAllMessagesById
getMessage
}
=
require
(
"
devtools
/
client
/
webconsole
/
selectors
/
messages
"
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
App
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
components
/
App
"
)
)
;
const
ObjectClient
=
require
(
"
devtools
/
shared
/
client
/
object
-
client
"
)
;
const
LongStringClient
=
require
(
"
devtools
/
shared
/
client
/
long
-
string
-
client
"
)
;
let
store
=
null
;
function
WebConsoleOutputWrapper
(
parentNode
hud
toolbox
owner
document
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
parentNode
=
parentNode
;
this
.
hud
=
hud
;
this
.
toolbox
=
toolbox
;
this
.
owner
=
owner
;
this
.
document
=
document
;
this
.
init
=
this
.
init
.
bind
(
this
)
;
this
.
queuedMessageAdds
=
[
]
;
this
.
queuedMessageUpdates
=
[
]
;
this
.
queuedRequestUpdates
=
[
]
;
this
.
throttledDispatchPromise
=
null
;
this
.
telemetry
=
new
Telemetry
(
)
;
}
WebConsoleOutputWrapper
.
prototype
=
{
init
:
function
(
)
{
return
new
Promise
(
(
resolve
)
=
>
{
const
attachRefToHud
=
(
id
node
)
=
>
{
this
.
hud
[
id
]
=
node
;
}
;
const
{
hud
}
=
this
;
const
debuggerClient
=
this
.
owner
.
target
.
client
;
const
serviceContainer
=
{
attachRefToHud
emitNewMessage
:
(
node
messageId
timeStamp
)
=
>
{
hud
.
emit
(
"
new
-
messages
"
new
Set
(
[
{
node
messageId
timeStamp
}
]
)
)
;
}
hudProxy
:
hud
.
proxy
openLink
:
(
url
e
)
=
>
{
hud
.
owner
.
openLink
(
url
e
)
;
}
canRewind
:
(
)
=
>
{
if
(
!
hud
.
owner
.
target
.
activeTab
)
{
return
false
;
}
return
hud
.
owner
.
target
.
activeTab
.
traits
.
canRewind
;
}
createElement
:
nodename
=
>
{
return
this
.
document
.
createElement
(
nodename
)
;
}
getLongString
:
(
grip
)
=
>
{
return
hud
.
proxy
.
webConsoleClient
.
getString
(
grip
)
;
}
requestData
(
id
type
)
{
return
hud
.
proxy
.
networkDataProvider
.
requestData
(
id
type
)
;
}
onViewSource
(
frame
)
{
if
(
hud
&
&
hud
.
owner
&
&
hud
.
owner
.
viewSource
)
{
hud
.
owner
.
viewSource
(
frame
.
url
frame
.
line
)
;
}
}
recordTelemetryEvent
:
(
eventName
extra
=
{
}
)
=
>
{
this
.
telemetry
.
recordEvent
(
eventName
"
webconsole
"
null
{
.
.
.
extra
"
session_id
"
:
this
.
toolbox
&
&
this
.
toolbox
.
sessionId
|
|
-
1
}
)
;
}
createObjectClient
:
(
object
)
=
>
{
return
new
ObjectClient
(
debuggerClient
object
)
;
}
createLongStringClient
:
(
object
)
=
>
{
return
new
LongStringClient
(
debuggerClient
object
)
;
}
releaseActor
:
(
actor
)
=
>
{
if
(
!
actor
)
{
return
null
;
}
return
debuggerClient
.
release
(
actor
)
;
}
}
;
serviceContainer
.
openContextMenu
=
(
e
message
)
=
>
{
const
{
screenX
screenY
target
}
=
e
;
const
messageEl
=
target
.
closest
(
"
.
message
"
)
;
const
clipboardText
=
messageEl
?
messageEl
.
textContent
:
null
;
const
messageVariable
=
target
.
closest
(
"
.
objectBox
"
)
;
const
variableText
=
(
messageVariable
&
&
!
(
messageEl
.
classList
.
contains
(
"
startGroup
"
)
)
&
&
!
(
messageEl
.
classList
.
contains
(
"
startGroupCollapsed
"
)
)
)
?
messageVariable
.
textContent
:
null
;
const
actorEl
=
target
.
closest
(
"
[
data
-
link
-
actor
-
id
]
"
)
|
|
target
.
querySelector
(
"
[
data
-
link
-
actor
-
id
]
"
)
;
const
actor
=
actorEl
?
actorEl
.
dataset
.
linkActorId
:
null
;
const
rootObjectInspector
=
target
.
closest
(
"
.
object
-
inspector
"
)
;
const
rootActor
=
rootObjectInspector
?
rootObjectInspector
.
querySelector
(
"
[
data
-
link
-
actor
-
id
]
"
)
:
null
;
const
rootActorId
=
rootActor
?
rootActor
.
dataset
.
linkActorId
:
null
;
const
sidebarTogglePref
=
store
.
getState
(
)
.
prefs
.
sidebarToggle
;
const
openSidebar
=
sidebarTogglePref
?
(
messageId
)
=
>
{
store
.
dispatch
(
actions
.
showMessageObjectInSidebar
(
rootActorId
messageId
)
)
;
}
:
null
;
const
messageData
=
getMessage
(
store
.
getState
(
)
message
.
messageId
)
;
const
executionPoint
=
messageData
&
&
messageData
.
executionPoint
;
const
menu
=
createContextMenu
(
this
.
hud
this
.
parentNode
{
actor
clipboardText
variableText
message
serviceContainer
openSidebar
rootActorId
executionPoint
toolbox
:
this
.
toolbox
}
)
;
menu
.
once
(
"
open
"
(
)
=
>
this
.
emit
(
"
menu
-
open
"
)
)
;
menu
.
popup
(
screenX
screenY
{
doc
:
this
.
owner
.
chromeWindow
.
document
}
)
;
return
menu
;
}
;
serviceContainer
.
openEditContextMenu
=
(
e
)
=
>
{
const
{
screenX
screenY
}
=
e
;
const
menu
=
createEditContextMenu
(
)
;
menu
.
once
(
"
open
"
(
)
=
>
this
.
emit
(
"
menu
-
open
"
)
)
;
menu
.
popup
(
screenX
screenY
{
doc
:
this
.
owner
.
chromeWindow
.
document
}
)
;
return
menu
;
}
;
if
(
this
.
toolbox
)
{
this
.
toolbox
.
threadClient
.
addListener
(
"
paused
"
this
.
dispatchPaused
.
bind
(
this
)
)
;
this
.
toolbox
.
threadClient
.
addListener
(
"
resumed
"
this
.
dispatchResumed
.
bind
(
this
)
)
;
Object
.
assign
(
serviceContainer
{
onViewSourceInDebugger
:
frame
=
>
{
this
.
toolbox
.
viewSourceInDebugger
(
frame
.
url
frame
.
line
)
.
then
(
(
)
=
>
{
this
.
telemetry
.
recordEvent
(
"
jump_to_source
"
"
webconsole
"
null
{
"
session_id
"
:
this
.
toolbox
.
sessionId
}
)
;
this
.
hud
.
emit
(
"
source
-
in
-
debugger
-
opened
"
)
;
}
)
;
}
onViewSourceInScratchpad
:
frame
=
>
this
.
toolbox
.
viewSourceInScratchpad
(
frame
.
url
frame
.
line
)
.
then
(
(
)
=
>
{
this
.
telemetry
.
recordEvent
(
"
jump_to_source
"
"
webconsole
"
null
{
"
session_id
"
:
this
.
toolbox
.
sessionId
}
)
;
}
)
onViewSourceInStyleEditor
:
frame
=
>
this
.
toolbox
.
viewSourceInStyleEditor
(
frame
.
url
frame
.
line
)
.
then
(
(
)
=
>
{
this
.
telemetry
.
recordEvent
(
"
jump_to_source
"
"
webconsole
"
null
{
"
session_id
"
:
this
.
toolbox
.
sessionId
}
)
;
}
)
openNetworkPanel
:
(
requestId
)
=
>
{
return
this
.
toolbox
.
selectTool
(
"
netmonitor
"
)
.
then
(
(
panel
)
=
>
{
return
panel
.
panelWin
.
Netmonitor
.
inspectRequest
(
requestId
)
;
}
)
;
}
sourceMapService
:
this
.
toolbox
?
this
.
toolbox
.
sourceMapURLService
:
null
highlightDomElement
:
(
grip
options
=
{
}
)
=
>
{
return
this
.
toolbox
.
highlighterUtils
?
this
.
toolbox
.
highlighterUtils
.
highlightDomValueGrip
(
grip
options
)
:
null
;
}
unHighlightDomElement
:
(
forceHide
=
false
)
=
>
{
return
this
.
toolbox
.
highlighterUtils
?
this
.
toolbox
.
highlighterUtils
.
unhighlight
(
forceHide
)
:
null
;
}
openNodeInInspector
:
async
(
grip
)
=
>
{
const
onSelectInspector
=
this
.
toolbox
.
selectTool
(
"
inspector
"
"
inspect_dom
"
)
;
const
onGripNodeToFront
=
this
.
toolbox
.
highlighterUtils
.
gripToNodeFront
(
grip
)
;
const
[
front
inspector
]
=
await
Promise
.
all
(
[
onGripNodeToFront
onSelectInspector
]
)
;
const
onInspectorUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
const
onNodeFrontSet
=
this
.
toolbox
.
selection
.
setNodeFront
(
front
{
reason
:
"
console
"
}
)
;
return
Promise
.
all
(
[
onNodeFrontSet
onInspectorUpdated
]
)
;
}
jumpToExecutionPoint
:
executionPoint
=
>
this
.
toolbox
.
threadClient
.
timeWarp
(
executionPoint
)
}
)
;
}
store
=
configureStore
(
this
.
hud
{
sessionId
:
this
.
toolbox
&
&
this
.
toolbox
.
sessionId
|
|
-
1
telemetry
:
this
.
telemetry
services
:
serviceContainer
}
)
;
const
{
prefs
}
=
store
.
getState
(
)
;
const
app
=
App
(
{
attachRefToHud
serviceContainer
hud
onFirstMeaningfulPaint
:
resolve
closeSplitConsole
:
this
.
closeSplitConsole
.
bind
(
this
)
jstermCodeMirror
:
prefs
.
jstermCodeMirror
&
&
!
Services
.
appinfo
.
accessibilityEnabled
jstermReverseSearch
:
prefs
.
jstermReverseSearch
}
)
;
if
(
this
.
parentNode
)
{
const
provider
=
createElement
(
Provider
{
store
}
app
)
;
this
.
body
=
ReactDOM
.
render
(
provider
this
.
parentNode
)
;
}
else
{
resolve
(
)
;
}
}
)
;
}
dispatchMessageAdd
:
function
(
packet
waitForResponse
)
{
let
promise
;
if
(
waitForResponse
&
&
document
.
visibilityState
=
=
=
"
visible
"
)
{
const
timeStampToMatch
=
packet
.
message
?
packet
.
message
.
timeStamp
:
packet
.
timestamp
;
promise
=
new
Promise
(
resolve
=
>
{
this
.
hud
.
on
(
"
new
-
messages
"
function
onThisMessage
(
messages
)
{
for
(
const
m
of
messages
)
{
if
(
m
.
timeStamp
=
=
=
timeStampToMatch
)
{
resolve
(
m
.
node
)
;
this
.
hud
.
off
(
"
new
-
messages
"
onThisMessage
)
;
return
;
}
}
}
.
bind
(
this
)
)
;
}
)
;
}
else
{
promise
=
Promise
.
resolve
(
)
;
}
this
.
batchedMessageAdd
(
packet
)
;
return
promise
;
}
dispatchMessagesAdd
:
function
(
messages
)
{
this
.
batchedMessagesAdd
(
messages
)
;
}
dispatchMessagesClear
:
function
(
)
{
this
.
queuedMessageAdds
=
[
]
;
this
.
queuedMessageUpdates
=
[
]
;
this
.
queuedRequestUpdates
=
[
]
;
store
.
dispatch
(
actions
.
messagesClear
(
)
)
;
}
dispatchPrivateMessagesClear
:
function
(
)
{
const
messages
=
[
.
.
.
getAllMessagesById
(
store
.
getState
(
)
)
.
values
(
)
]
;
this
.
queuedMessageUpdates
=
this
.
queuedMessageUpdates
.
filter
(
(
{
networkInfo
}
)
=
>
{
const
{
actor
}
=
networkInfo
;
const
queuedNetworkMessage
=
this
.
queuedMessageAdds
.
find
(
p
=
>
p
.
actor
=
=
=
actor
)
;
if
(
queuedNetworkMessage
&
&
isPacketPrivate
(
queuedNetworkMessage
)
)
{
return
false
;
}
const
requestMessage
=
messages
.
find
(
message
=
>
actor
=
=
=
message
.
actor
)
;
if
(
requestMessage
&
&
requestMessage
.
private
=
=
=
true
)
{
return
false
;
}
return
true
;
}
)
;
this
.
queuedRequestUpdates
=
this
.
queuedRequestUpdates
.
filter
(
(
{
id
}
)
=
>
{
const
requestMessage
=
getMessage
(
store
.
getState
(
)
id
)
;
if
(
requestMessage
&
&
requestMessage
.
private
=
=
=
true
)
{
return
false
;
}
return
true
;
}
)
;
this
.
queuedMessageAdds
=
this
.
queuedMessageAdds
.
filter
(
p
=
>
!
isPacketPrivate
(
p
)
)
;
store
.
dispatch
(
actions
.
privateMessagesClear
(
)
)
;
}
dispatchTimestampsToggle
:
function
(
enabled
)
{
store
.
dispatch
(
actions
.
timestampsToggle
(
enabled
)
)
;
}
dispatchPaused
:
function
(
_
packet
)
{
if
(
packet
.
executionPoint
)
{
store
.
dispatch
(
actions
.
setPauseExecutionPoint
(
packet
.
executionPoint
)
)
;
}
}
dispatchResumed
:
function
(
_
packet
)
{
store
.
dispatch
(
actions
.
setPauseExecutionPoint
(
null
)
)
;
}
dispatchMessageUpdate
:
function
(
message
res
)
{
const
NUMBER_OF_NETWORK_UPDATE
=
8
;
let
expectedLength
=
NUMBER_OF_NETWORK_UPDATE
;
if
(
this
.
hud
.
proxy
.
webConsoleClient
.
traits
.
fetchCacheDescriptor
&
&
res
.
networkInfo
.
updates
.
includes
(
"
responseCache
"
)
)
{
expectedLength
+
+
;
}
if
(
res
.
networkInfo
.
updates
.
includes
(
"
requestPostData
"
)
)
{
expectedLength
+
+
;
}
if
(
res
.
networkInfo
.
updates
.
length
=
=
=
expectedLength
)
{
this
.
batchedMessageUpdates
(
{
res
message
}
)
;
}
}
dispatchRequestUpdate
:
function
(
id
data
)
{
this
.
batchedRequestUpdates
(
{
id
data
}
)
;
}
dispatchSidebarClose
:
function
(
)
{
store
.
dispatch
(
actions
.
sidebarClose
(
)
)
;
}
dispatchSplitConsoleCloseButtonToggle
:
function
(
)
{
store
.
dispatch
(
actions
.
splitConsoleCloseButtonToggle
(
this
.
toolbox
&
&
this
.
toolbox
.
currentToolId
!
=
=
"
webconsole
"
)
)
;
}
batchedMessageUpdates
:
function
(
info
)
{
this
.
queuedMessageUpdates
.
push
(
info
)
;
this
.
setTimeoutIfNeeded
(
)
;
}
batchedRequestUpdates
:
function
(
message
)
{
this
.
queuedRequestUpdates
.
push
(
message
)
;
this
.
setTimeoutIfNeeded
(
)
;
}
batchedMessageAdd
:
function
(
message
)
{
this
.
queuedMessageAdds
.
push
(
message
)
;
this
.
setTimeoutIfNeeded
(
)
;
}
batchedMessagesAdd
:
function
(
messages
)
{
this
.
queuedMessageAdds
=
this
.
queuedMessageAdds
.
concat
(
messages
)
;
this
.
setTimeoutIfNeeded
(
)
;
}
dispatchClearHistory
:
function
(
)
{
store
.
dispatch
(
actions
.
clearHistory
(
)
)
;
}
waitAsyncDispatches
:
function
(
)
{
if
(
!
this
.
throttledDispatchPromise
)
{
return
Promise
.
resolve
(
)
;
}
return
this
.
throttledDispatchPromise
;
}
setTimeoutIfNeeded
:
function
(
)
{
if
(
this
.
throttledDispatchPromise
)
{
return
;
}
this
.
throttledDispatchPromise
=
new
Promise
(
done
=
>
{
setTimeout
(
(
)
=
>
{
this
.
throttledDispatchPromise
=
null
;
store
.
dispatch
(
actions
.
messagesAdd
(
this
.
queuedMessageAdds
)
)
;
const
length
=
this
.
queuedMessageAdds
.
length
;
if
(
this
.
toolbox
)
{
this
.
telemetry
.
addEventProperty
(
this
.
toolbox
"
enter
"
"
webconsole
"
null
"
message_count
"
length
)
;
}
this
.
queuedMessageAdds
=
[
]
;
if
(
this
.
queuedMessageUpdates
.
length
>
0
)
{
this
.
queuedMessageUpdates
.
forEach
(
(
{
message
res
}
)
=
>
{
store
.
dispatch
(
actions
.
networkMessageUpdate
(
message
null
res
)
)
;
this
.
hud
.
emit
(
"
network
-
message
-
updated
"
res
)
;
}
)
;
this
.
queuedMessageUpdates
=
[
]
;
}
if
(
this
.
queuedRequestUpdates
.
length
>
0
)
{
this
.
queuedRequestUpdates
.
forEach
(
(
{
id
data
}
)
=
>
{
store
.
dispatch
(
actions
.
networkUpdateRequest
(
id
data
)
)
;
}
)
;
this
.
queuedRequestUpdates
=
[
]
;
this
.
hud
.
emit
(
"
network
-
request
-
payload
-
ready
"
)
;
}
done
(
)
;
}
50
)
;
}
)
;
}
getStore
:
function
(
)
{
return
store
;
}
closeSplitConsole
(
)
{
this
.
toolbox
.
closeSplitConsole
(
)
;
}
}
;
module
.
exports
=
WebConsoleOutputWrapper
;
