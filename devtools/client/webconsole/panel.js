"
use
strict
"
;
const
promise
=
require
(
"
promise
"
)
;
loader
.
lazyGetter
(
this
"
HUDService
"
(
)
=
>
require
(
"
devtools
/
client
/
webconsole
/
hudservice
"
)
)
;
loader
.
lazyGetter
(
this
"
EventEmitter
"
(
)
=
>
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
)
;
function
WebConsolePanel
(
iframeWindow
toolbox
)
{
this
.
_frameWindow
=
iframeWindow
;
this
.
_toolbox
=
toolbox
;
EventEmitter
.
decorate
(
this
)
;
}
exports
.
WebConsolePanel
=
WebConsolePanel
;
WebConsolePanel
.
prototype
=
{
hud
:
null
focusInput
(
)
{
this
.
hud
.
jsterm
.
focus
(
)
;
}
open
(
)
{
let
parentDoc
=
this
.
_toolbox
.
doc
;
let
iframe
=
parentDoc
.
getElementById
(
"
toolbox
-
panel
-
iframe
-
webconsole
"
)
;
let
deferredIframe
=
promise
.
defer
(
)
;
let
win
doc
;
if
(
(
win
=
iframe
.
contentWindow
)
&
&
(
doc
=
win
.
document
)
&
&
doc
.
readyState
=
=
"
complete
"
)
{
deferredIframe
.
resolve
(
null
)
;
}
else
{
iframe
.
addEventListener
(
"
load
"
function
onIframeLoad
(
)
{
iframe
.
removeEventListener
(
"
load
"
onIframeLoad
true
)
;
deferredIframe
.
resolve
(
null
)
;
}
true
)
;
}
let
promiseTarget
;
if
(
!
this
.
target
.
isRemote
)
{
promiseTarget
=
this
.
target
.
makeRemote
(
)
;
}
else
{
promiseTarget
=
promise
.
resolve
(
this
.
target
)
;
}
return
deferredIframe
.
promise
.
then
(
(
)
=
>
promiseTarget
)
.
then
(
(
target
)
=
>
{
this
.
_frameWindow
.
_remoteTarget
=
target
;
let
webConsoleUIWindow
=
iframe
.
contentWindow
.
wrappedJSObject
;
let
chromeWindow
=
iframe
.
ownerDocument
.
defaultView
;
return
HUDService
.
openWebConsole
(
this
.
target
webConsoleUIWindow
chromeWindow
)
;
}
)
.
then
(
(
webConsole
)
=
>
{
this
.
hud
=
webConsole
;
this
.
_isReady
=
true
;
this
.
emit
(
"
ready
"
)
;
return
this
;
}
(
reason
)
=
>
{
let
msg
=
"
WebConsolePanel
open
failed
.
"
+
reason
.
error
+
"
:
"
+
reason
.
message
;
dump
(
msg
+
"
\
n
"
)
;
console
.
error
(
msg
)
;
}
)
;
}
get
target
(
)
{
return
this
.
_toolbox
.
target
;
}
_isReady
:
false
get
isReady
(
)
{
return
this
.
_isReady
;
}
destroy
(
)
{
if
(
this
.
_destroyer
)
{
return
this
.
_destroyer
;
}
this
.
_destroyer
=
this
.
hud
.
destroy
(
)
;
this
.
_destroyer
.
then
(
(
)
=
>
{
this
.
_frameWindow
=
null
;
this
.
_toolbox
=
null
;
this
.
emit
(
"
destroyed
"
)
;
}
)
;
return
this
.
_destroyer
;
}
}
;
