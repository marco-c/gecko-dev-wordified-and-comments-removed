"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
WebConsole
"
"
devtools
/
client
/
webconsole
/
webconsole
"
)
;
loader
.
lazyGetter
(
this
"
EventEmitter
"
(
)
=
>
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
)
;
function
WebConsolePanel
(
iframeWindow
toolbox
)
{
this
.
_frameWindow
=
iframeWindow
;
this
.
_toolbox
=
toolbox
;
EventEmitter
.
decorate
(
this
)
;
}
exports
.
WebConsolePanel
=
WebConsolePanel
;
WebConsolePanel
.
prototype
=
{
hud
:
null
focusInput
:
function
(
)
{
this
.
hud
.
jsterm
.
focus
(
)
;
}
open
:
async
function
(
)
{
try
{
const
parentDoc
=
this
.
_toolbox
.
doc
;
const
iframe
=
parentDoc
.
getElementById
(
"
toolbox
-
panel
-
iframe
-
webconsole
"
)
;
const
win
=
iframe
.
contentWindow
;
const
doc
=
win
&
&
win
.
document
;
if
(
!
doc
|
|
doc
.
readyState
!
=
=
"
complete
"
)
{
await
new
Promise
(
resolve
=
>
{
iframe
.
addEventListener
(
"
load
"
resolve
{
capture
:
true
once
:
true
}
)
;
}
)
;
}
const
webConsoleUIWindow
=
iframe
.
contentWindow
.
wrappedJSObject
;
const
chromeWindow
=
iframe
.
ownerDocument
.
defaultView
;
this
.
hud
=
new
WebConsole
(
this
.
_toolbox
webConsoleUIWindow
chromeWindow
)
;
await
this
.
hud
.
init
(
)
;
this
.
hud
.
ui
.
on
(
"
reloaded
"
(
)
=
>
{
this
.
emit
(
"
reloaded
"
)
;
}
)
;
this
.
_isReady
=
true
;
this
.
emit
(
"
ready
"
)
;
}
catch
(
e
)
{
const
msg
=
"
WebConsolePanel
open
failed
.
"
+
e
.
error
+
"
:
"
+
e
.
message
;
dump
(
msg
+
"
\
n
"
)
;
console
.
error
(
msg
e
)
;
}
return
this
;
}
get
target
(
)
{
return
this
.
_toolbox
.
target
;
}
_isReady
:
false
get
isReady
(
)
{
return
this
.
_isReady
;
}
destroy
:
function
(
)
{
if
(
!
this
.
_toolbox
)
{
return
;
}
this
.
hud
.
destroy
(
)
;
this
.
hud
=
null
;
this
.
_frameWindow
=
null
;
this
.
_toolbox
=
null
;
this
.
emit
(
"
destroyed
"
)
;
}
}
;
