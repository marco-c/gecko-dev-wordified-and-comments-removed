"
use
strict
"
;
const
{
messageAdd
messagesClear
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
actions
/
messages
"
)
;
const
{
getRepeatId
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
utils
/
messages
"
)
;
const
{
stubConsoleMessages
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
fixtures
/
stubs
"
)
;
const
constants
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
constants
"
)
;
const
expect
=
require
(
"
expect
"
)
;
describe
(
"
Message
actions
:
"
(
)
=
>
{
describe
(
"
messageAdd
"
(
)
=
>
{
it
(
"
creates
expected
action
given
a
packet
"
(
)
=
>
{
const
packet
=
{
"
from
"
:
"
server1
.
conn4
.
child1
/
consoleActor2
"
"
type
"
:
"
consoleAPICall
"
"
message
"
:
{
"
arguments
"
:
[
"
foobar
"
"
test
"
]
"
columnNumber
"
:
1
"
counter
"
:
null
"
filename
"
:
"
file
:
/
/
/
test
.
html
"
"
functionName
"
:
"
"
"
groupName
"
:
"
"
"
level
"
:
"
log
"
"
lineNumber
"
:
1
"
private
"
:
false
"
styles
"
:
[
]
"
timeStamp
"
:
1455064271115
"
timer
"
:
null
"
workerType
"
:
"
none
"
"
category
"
:
"
webdev
"
}
}
;
const
action
=
messageAdd
(
packet
)
;
const
expected
=
{
type
:
constants
.
MESSAGE_ADD
message
:
stubConsoleMessages
.
get
(
"
console
.
log
(
'
foobar
'
'
test
'
)
"
)
}
;
expected
.
message
=
expected
.
message
.
set
(
"
repeatId
"
getRepeatId
(
expected
.
message
)
)
;
expected
.
message
=
expected
.
message
.
set
(
"
id
"
"
0
"
)
;
expect
(
action
)
.
toEqual
(
expected
)
;
}
)
;
}
)
;
describe
(
"
messagesClear
"
(
)
=
>
{
it
(
"
creates
expected
action
"
(
)
=
>
{
const
action
=
messagesClear
(
)
;
const
expected
=
{
type
:
constants
.
MESSAGES_CLEAR
}
;
expect
(
action
)
.
toEqual
(
expected
)
;
}
)
;
}
)
;
}
)
;
