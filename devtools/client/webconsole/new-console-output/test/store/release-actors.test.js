"
use
strict
"
;
const
{
clonePacket
getFirstMessage
setupActions
setupStore
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
helpers
"
)
;
const
{
stubPackets
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
fixtures
/
stubs
/
index
"
)
;
const
expect
=
require
(
"
expect
"
)
;
describe
(
"
Release
actor
enhancer
:
"
(
)
=
>
{
let
actions
;
before
(
(
)
=
>
{
actions
=
setupActions
(
)
;
}
)
;
describe
(
"
Client
proxy
"
(
)
=
>
{
it
(
"
releases
backend
actors
when
limit
reached
adding
a
single
message
"
(
)
=
>
{
const
logLimit
=
100
;
let
releasedActors
=
[
]
;
const
{
dispatch
getState
}
=
setupStore
(
[
]
{
proxy
:
{
releaseActor
:
(
actor
)
=
>
{
releasedActors
.
push
(
actor
)
;
}
}
}
{
logLimit
}
)
;
dispatch
(
actions
.
messagesAdd
(
[
stubPackets
.
get
(
"
console
.
log
(
'
myarray
'
[
'
red
'
'
green
'
'
blue
'
]
)
"
)
]
)
)
;
const
firstMessage
=
getFirstMessage
(
getState
(
)
)
;
const
firstMessageActor
=
firstMessage
.
parameters
[
1
]
.
actor
;
const
evaluationResultPacket
=
stubPackets
.
get
(
"
new
Date
(
0
)
"
)
;
dispatch
(
actions
.
messagesAdd
(
[
evaluationResultPacket
]
)
)
;
const
secondMessageActor
=
evaluationResultPacket
.
result
.
actor
;
const
logCount
=
logLimit
+
1
;
const
packet
=
clonePacket
(
stubPackets
.
get
(
"
console
.
assert
(
false
{
message
:
'
foobar
'
}
)
"
)
)
;
const
thirdMessageActor
=
packet
.
message
.
arguments
[
0
]
.
actor
;
for
(
let
i
=
1
;
i
<
=
logCount
;
i
+
+
)
{
packet
.
message
.
arguments
.
push
(
message
num
{
i
}
)
;
dispatch
(
actions
.
messagesAdd
(
[
packet
]
)
)
;
}
expect
(
releasedActors
.
length
)
.
toBe
(
3
)
;
expect
(
releasedActors
)
.
toInclude
(
firstMessageActor
)
;
expect
(
releasedActors
)
.
toInclude
(
secondMessageActor
)
;
expect
(
releasedActors
)
.
toInclude
(
thirdMessageActor
)
;
}
)
;
it
(
"
releases
backend
actors
when
limit
reached
adding
multiple
messages
"
(
)
=
>
{
const
logLimit
=
100
;
let
releasedActors
=
[
]
;
const
{
dispatch
getState
}
=
setupStore
(
[
]
{
proxy
:
{
releaseActor
:
(
actor
)
=
>
{
releasedActors
.
push
(
actor
)
;
}
}
}
{
logLimit
}
)
;
dispatch
(
actions
.
messagesAdd
(
[
stubPackets
.
get
(
"
console
.
log
(
'
myarray
'
[
'
red
'
'
green
'
'
blue
'
]
)
"
)
]
)
)
;
const
firstMessage
=
getFirstMessage
(
getState
(
)
)
;
const
firstMessageActor
=
firstMessage
.
parameters
[
1
]
.
actor
;
const
evaluationResultPacket
=
stubPackets
.
get
(
"
new
Date
(
0
)
"
)
;
dispatch
(
actions
.
messagesAdd
(
[
evaluationResultPacket
]
)
)
;
const
secondMessageActor
=
evaluationResultPacket
.
result
.
actor
;
const
assertPacket
=
stubPackets
.
get
(
"
console
.
assert
(
false
{
message
:
'
foobar
'
}
)
"
)
;
dispatch
(
actions
.
messagesAdd
(
[
assertPacket
]
)
)
;
const
thirdMessageActor
=
assertPacket
.
message
.
arguments
[
0
]
.
actor
;
const
packets
=
[
]
;
const
oddPacket
=
stubPackets
.
get
(
"
console
.
log
(
undefined
)
"
)
;
const
evenPacket
=
stubPackets
.
get
(
"
console
.
log
(
'
foobar
'
'
test
'
)
"
)
;
for
(
let
i
=
0
;
i
<
logLimit
;
i
+
+
)
{
const
packet
=
i
%
2
=
=
=
0
?
evenPacket
:
oddPacket
;
packets
.
push
(
packet
)
;
}
dispatch
(
actions
.
messagesAdd
(
packets
)
)
;
expect
(
releasedActors
.
length
)
.
toBe
(
3
)
;
expect
(
releasedActors
)
.
toInclude
(
firstMessageActor
)
;
expect
(
releasedActors
)
.
toInclude
(
secondMessageActor
)
;
expect
(
releasedActors
)
.
toInclude
(
thirdMessageActor
)
;
}
)
;
it
(
"
properly
releases
backend
actors
after
clear
"
(
)
=
>
{
let
releasedActors
=
[
]
;
const
{
dispatch
getState
}
=
setupStore
(
[
]
{
proxy
:
{
releaseActor
:
(
actor
)
=
>
{
releasedActors
.
push
(
actor
)
;
}
}
}
)
;
dispatch
(
actions
.
messagesAdd
(
[
stubPackets
.
get
(
"
console
.
log
(
'
myarray
'
[
'
red
'
'
green
'
'
blue
'
]
)
"
)
]
)
)
;
const
firstMessage
=
getFirstMessage
(
getState
(
)
)
;
const
firstMessageActor
=
firstMessage
.
parameters
[
1
]
.
actor
;
const
packet
=
clonePacket
(
stubPackets
.
get
(
"
console
.
assert
(
false
{
message
:
'
foobar
'
}
)
"
)
)
;
const
secondMessageActor
=
packet
.
message
.
arguments
[
0
]
.
actor
;
dispatch
(
actions
.
messagesAdd
(
[
packet
]
)
)
;
const
evaluationResultPacket
=
stubPackets
.
get
(
"
new
Date
(
0
)
"
)
;
dispatch
(
actions
.
messagesAdd
(
[
evaluationResultPacket
]
)
)
;
const
thirdMessageActor
=
evaluationResultPacket
.
result
.
actor
;
const
longStringPacket
=
stubPackets
.
get
(
"
TypeError
longString
message
"
)
;
dispatch
(
actions
.
messagesAdd
(
[
longStringPacket
]
)
)
;
const
fourthMessageActor
=
longStringPacket
.
pageError
.
errorMessage
.
actor
;
dispatch
(
actions
.
messagesClear
(
)
)
;
expect
(
releasedActors
.
length
)
.
toBe
(
4
)
;
expect
(
releasedActors
)
.
toInclude
(
firstMessageActor
)
;
expect
(
releasedActors
)
.
toInclude
(
secondMessageActor
)
;
expect
(
releasedActors
)
.
toInclude
(
thirdMessageActor
)
;
expect
(
releasedActors
)
.
toInclude
(
fourthMessageActor
)
;
}
)
;
}
)
;
}
)
;
