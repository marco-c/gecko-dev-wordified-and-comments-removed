"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
webconsole
.
new
-
frontend
-
enabled
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
webconsole
.
new
-
frontend
-
enabled
"
)
;
}
)
;
const
{
prepareMessage
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
utils
/
messages
"
)
;
const
{
stubPackets
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
fixtures
/
stubs
/
index
.
js
"
)
;
const
BASE_PATH
=
"
.
.
/
.
.
/
.
.
/
.
.
/
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
fixtures
"
;
const
TEMP_FILE_PATH
=
OS
.
Path
.
join
(
{
BASE_PATH
}
/
stub
-
generators
"
test
-
tempfile
.
js
"
)
;
const
TEMP_CSS_FILE_PATH
=
OS
.
Path
.
join
(
{
BASE_PATH
}
/
stub
-
generators
"
test
-
tempfile
.
css
"
)
;
let
cachedPackets
=
{
}
;
function
getCleanedPacket
(
key
packet
)
{
if
(
Object
.
keys
(
cachedPackets
)
.
includes
(
key
)
)
{
return
cachedPackets
[
key
]
;
}
let
safeKey
=
key
.
replace
(
/
\
\
n
/
g
"
\
n
"
)
.
replace
(
/
\
\
r
/
g
"
\
r
"
)
.
replace
(
/
\
\
\
"
/
g
\
"
)
.
replace
(
/
\
\
\
'
/
g
\
'
)
;
let
res
;
if
(
stubPackets
.
has
(
safeKey
)
)
{
let
existingPacket
=
stubPackets
.
get
(
safeKey
)
;
res
=
Object
.
assign
(
{
}
packet
{
from
:
existingPacket
.
from
}
)
;
if
(
res
.
timestamp
)
{
res
.
timestamp
=
existingPacket
.
timestamp
;
}
if
(
res
.
message
)
{
res
.
message
.
timeStamp
=
existingPacket
.
message
.
timeStamp
;
if
(
res
.
message
.
timer
)
{
if
(
res
.
message
.
timer
.
started
)
{
res
.
message
.
timer
.
started
=
existingPacket
.
message
.
timer
.
started
;
}
if
(
res
.
message
.
timer
.
duration
)
{
res
.
message
.
timer
.
duration
=
existingPacket
.
message
.
timer
.
duration
;
}
}
if
(
Array
.
isArray
(
res
.
message
.
arguments
)
)
{
res
.
message
.
arguments
.
forEach
(
(
argument
i
)
=
>
{
if
(
argument
&
&
argument
.
actor
)
{
argument
.
actor
=
existingPacket
.
message
.
arguments
[
i
]
.
actor
;
}
}
)
;
}
}
if
(
res
.
result
)
{
res
.
result
.
actor
=
existingPacket
.
result
.
actor
;
if
(
res
.
result
.
preview
)
{
if
(
res
.
result
.
preview
.
timestamp
)
{
res
.
result
.
preview
.
timestamp
=
existingPacket
.
result
.
preview
.
timestamp
;
}
}
}
if
(
res
.
exception
)
{
res
.
exception
.
actor
=
existingPacket
.
exception
.
actor
;
if
(
res
.
exception
.
preview
)
{
if
(
res
.
exception
.
preview
.
timestamp
)
{
res
.
exception
.
preview
.
timestamp
=
existingPacket
.
exception
.
preview
.
timestamp
;
}
}
}
if
(
res
.
eventActor
)
{
res
.
eventActor
.
actor
=
existingPacket
.
eventActor
.
actor
;
res
.
eventActor
.
startedDateTime
=
existingPacket
.
eventActor
.
startedDateTime
;
res
.
eventActor
.
timeStamp
=
existingPacket
.
eventActor
.
timeStamp
;
}
if
(
res
.
pageError
)
{
res
.
pageError
.
timeStamp
=
existingPacket
.
pageError
.
timeStamp
;
}
}
else
{
res
=
packet
;
}
cachedPackets
[
key
]
=
res
;
return
res
;
}
function
formatPacket
(
key
packet
)
{
return
stubPackets
.
set
(
"
{
key
}
"
{
JSON
.
stringify
(
getCleanedPacket
(
key
packet
)
null
"
\
t
"
)
}
)
;
;
}
function
formatStub
(
key
packet
)
{
let
prepared
=
prepareMessage
(
getCleanedPacket
(
key
packet
)
{
getNextId
:
(
)
=
>
"
1
"
}
)
;
return
stubPreparedMessages
.
set
(
"
{
key
}
"
new
ConsoleMessage
(
{
JSON
.
stringify
(
prepared
null
"
\
t
"
)
}
)
)
;
;
}
function
formatNetworkStub
(
key
packet
)
{
let
actor
=
packet
.
eventActor
;
let
networkInfo
=
{
_type
:
"
NetworkEvent
"
timeStamp
:
actor
.
timeStamp
node
:
null
actor
:
actor
.
actor
discardRequestBody
:
true
discardResponseBody
:
true
startedDateTime
:
actor
.
startedDateTime
request
:
{
url
:
actor
.
url
method
:
actor
.
method
}
isXHR
:
actor
.
isXHR
cause
:
actor
.
cause
response
:
{
}
timings
:
{
}
updates
:
[
]
private
:
actor
.
private
fromCache
:
actor
.
fromCache
fromServiceWorker
:
actor
.
fromServiceWorker
}
;
let
prepared
=
prepareMessage
(
networkInfo
{
getNextId
:
(
)
=
>
"
1
"
}
)
;
return
stubPreparedMessages
.
set
(
"
{
key
}
"
new
NetworkEventMessage
(
{
JSON
.
stringify
(
prepared
null
"
\
t
"
)
}
)
)
;
;
}
function
formatFile
(
stubs
)
{
return
/
*
Any
copyright
is
dedicated
to
the
Public
Domain
.
http
:
/
/
creativecommons
.
org
/
publicdomain
/
zero
/
1
.
0
/
*
/
"
use
strict
"
;
/
*
*
THIS
FILE
IS
AUTOGENERATED
.
DO
NOT
MODIFY
BY
HAND
.
RUN
TESTS
IN
FIXTURES
/
TO
UPDATE
.
*
/
const
{
ConsoleMessage
NetworkEventMessage
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
types
"
)
;
let
stubPreparedMessages
=
new
Map
(
)
;
let
stubPackets
=
new
Map
(
)
;
{
stubs
.
preparedMessages
.
join
(
"
"
)
}
{
stubs
.
packets
.
join
(
"
"
)
}
module
.
exports
=
{
stubPreparedMessages
stubPackets
}
;
}
