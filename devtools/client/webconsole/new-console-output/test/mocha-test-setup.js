"
use
strict
"
;
const
mcRoot
=
{
__dirname
}
/
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
;
const
getModule
=
mcPath
=
>
module
.
exports
=
require
(
"
{
mcRoot
}
{
mcPath
}
"
)
;
;
const
requireHacker
=
require
(
"
require
-
hacker
"
)
;
requireHacker
.
global_hook
(
"
default
"
(
path
module
)
=
>
{
switch
(
path
)
{
case
"
react
-
dom
"
:
return
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
case
"
react
-
dom
/
server
"
:
return
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
server
"
)
;
case
"
react
-
dom
/
test
-
utils
"
:
return
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
test
-
utils
-
dev
"
)
;
case
"
react
-
redux
"
:
return
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
case
"
react
"
:
case
"
devtools
/
client
/
shared
/
vendor
/
react
"
:
return
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dev
"
)
;
}
switch
(
path
)
{
case
"
devtools
/
shared
/
l10n
"
:
return
getModule
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
fixtures
/
LocalizationHelper
"
)
;
case
"
devtools
/
shared
/
plural
-
form
"
:
return
getModule
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
fixtures
/
PluralForm
"
)
;
case
"
Services
"
:
case
"
Services
.
default
"
:
return
getModule
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
fixtures
/
Services
"
)
;
case
"
devtools
/
shared
/
client
/
object
-
client
"
:
return
(
)
=
>
{
}
;
case
"
devtools
/
client
/
netmonitor
/
src
/
components
/
TabboxPanel
"
:
return
"
{
}
"
;
}
if
(
path
.
startsWith
(
"
devtools
/
"
)
)
{
return
getModule
(
path
)
;
}
return
undefined
;
}
)
;
const
Enzyme
=
require
(
"
enzyme
"
)
;
const
Adapter
=
require
(
"
enzyme
-
adapter
-
react
-
16
"
)
;
Enzyme
.
configure
(
{
adapter
:
new
Adapter
(
)
}
)
;
