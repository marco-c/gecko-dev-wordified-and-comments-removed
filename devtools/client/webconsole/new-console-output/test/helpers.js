"
use
strict
"
;
let
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
let
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
createElement
}
=
React
;
const
TestUtils
=
ReactDOM
.
TestUtils
;
const
actions
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
actions
/
index
"
)
;
const
{
configureStore
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
store
"
)
;
const
{
IdGenerator
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
utils
/
id
-
generator
"
)
;
const
{
stubPackets
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
fixtures
/
stubs
/
index
"
)
;
const
{
getAllMessagesById
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
selectors
/
messages
"
)
;
function
setupActions
(
)
{
const
wrappedActions
=
Object
.
assign
(
{
}
actions
)
;
const
idGenerator
=
new
IdGenerator
(
)
;
wrappedActions
.
messagesAdd
=
(
packets
)
=
>
{
return
actions
.
messagesAdd
(
packets
idGenerator
)
;
}
;
return
{
.
.
.
actions
messagesAdd
:
packets
=
>
actions
.
messagesAdd
(
packets
idGenerator
)
}
;
}
function
setupStore
(
input
=
[
]
hud
options
wrappedActions
)
{
const
store
=
configureStore
(
hud
options
)
;
const
messagesAdd
=
wrappedActions
?
wrappedActions
.
messagesAdd
:
actions
.
messagesAdd
;
store
.
dispatch
(
messagesAdd
(
input
.
map
(
cmd
=
>
stubPackets
.
get
(
cmd
)
)
)
)
;
return
store
;
}
function
renderComponent
(
component
props
)
{
const
el
=
createElement
(
component
props
{
}
)
;
const
wrappedEl
=
dom
.
span
(
{
}
[
el
]
)
;
const
renderedComponent
=
TestUtils
.
renderIntoDocument
(
wrappedEl
)
;
return
ReactDOM
.
findDOMNode
(
renderedComponent
)
.
children
[
0
]
;
}
function
shallowRenderComponent
(
component
props
)
{
const
el
=
createElement
(
component
props
)
;
const
renderer
=
TestUtils
.
createRenderer
(
)
;
renderer
.
render
(
el
{
}
)
;
return
renderer
.
getRenderOutput
(
)
;
}
function
clonePacket
(
packet
)
{
return
JSON
.
parse
(
JSON
.
stringify
(
packet
)
)
;
}
function
getMessageAt
(
state
index
)
{
const
messages
=
getAllMessagesById
(
state
)
;
return
messages
.
get
(
[
.
.
.
messages
.
keys
(
)
]
[
index
]
)
;
}
function
getFirstMessage
(
state
)
{
return
getMessageAt
(
state
0
)
;
}
function
getLastMessage
(
state
)
{
const
lastIndex
=
getAllMessagesById
(
state
)
.
size
-
1
;
return
getMessageAt
(
state
lastIndex
)
;
}
module
.
exports
=
{
clonePacket
getMessageAt
getFirstMessage
getLastMessage
renderComponent
setupActions
setupStore
shallowRenderComponent
}
;
