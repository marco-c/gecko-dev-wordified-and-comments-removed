"
use
strict
"
;
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
requireHelper
"
)
(
)
;
let
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
let
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
var
TestUtils
=
React
.
addons
.
TestUtils
;
const
actions
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
actions
/
messages
"
)
;
const
{
configureStore
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
store
"
)
;
const
{
IdGenerator
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
utils
/
id
-
generator
"
)
;
const
{
stubConsoleMessages
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
fixtures
/
stubs
"
)
;
const
Services
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
test
/
fixtures
/
Services
"
)
;
function
setupActions
(
)
{
const
wrappedActions
=
Object
.
assign
(
{
}
actions
)
;
const
idGenerator
=
new
IdGenerator
(
)
;
wrappedActions
.
messageAdd
=
(
packet
)
=
>
{
return
actions
.
messageAdd
(
packet
idGenerator
)
;
}
;
return
wrappedActions
;
}
function
setupStore
(
input
)
{
const
store
=
configureStore
(
Services
)
;
input
.
forEach
(
(
cmd
)
=
>
{
store
.
dispatch
(
actions
.
messageAdd
(
stubConsoleMessages
.
get
(
cmd
)
)
)
;
}
)
;
return
store
;
}
function
renderComponent
(
component
props
)
{
const
el
=
React
.
createElement
(
component
props
{
}
)
;
const
wrappedEl
=
React
.
DOM
.
span
(
{
}
[
el
]
)
;
const
renderedComponent
=
TestUtils
.
renderIntoDocument
(
wrappedEl
)
;
return
ReactDOM
.
findDOMNode
(
renderedComponent
)
.
children
[
0
]
;
}
function
shallowRenderComponent
(
component
props
)
{
const
el
=
React
.
createElement
(
component
props
)
;
const
renderer
=
TestUtils
.
createRenderer
(
)
;
renderer
.
render
(
el
{
}
)
;
return
renderer
.
getRenderOutput
(
)
;
}
module
.
exports
=
{
setupActions
setupStore
renderComponent
shallowRenderComponent
}
;
