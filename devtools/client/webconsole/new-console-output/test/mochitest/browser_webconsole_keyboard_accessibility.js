"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
;
charset
=
utf
-
8
<
p
>
Test
keyboard
accessibility
<
/
p
>
<
script
>
for
(
let
i
=
1
;
i
<
=
100
;
i
+
+
)
{
console
.
log
(
"
console
message
"
+
i
)
;
}
<
/
script
>
;
add_task
(
async
function
(
)
{
let
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
info
(
"
Web
Console
opened
"
)
;
const
outputScroller
=
hud
.
ui
.
outputScroller
;
await
waitFor
(
(
)
=
>
findMessages
(
hud
"
"
)
.
length
=
=
100
)
;
let
currentPosition
=
outputScroller
.
scrollTop
;
const
bottom
=
currentPosition
;
hud
.
jsterm
.
inputNode
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_PageUp
"
)
;
isnot
(
outputScroller
.
scrollTop
currentPosition
"
scroll
position
changed
after
page
up
"
)
;
currentPosition
=
outputScroller
.
scrollTop
;
EventUtils
.
synthesizeKey
(
"
KEY_PageDown
"
)
;
ok
(
outputScroller
.
scrollTop
>
currentPosition
"
scroll
position
now
at
bottom
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Home
"
)
;
is
(
outputScroller
.
scrollTop
0
"
scroll
position
now
at
top
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_End
"
)
;
let
scrollTop
=
outputScroller
.
scrollTop
;
ok
(
scrollTop
>
0
&
&
Math
.
abs
(
scrollTop
-
bottom
)
<
=
5
"
scroll
position
now
at
bottom
"
)
;
info
(
"
try
ctrl
-
l
to
clear
output
"
)
;
let
clearShortcut
;
if
(
Services
.
appinfo
.
OS
=
=
=
"
Darwin
"
)
{
clearShortcut
=
WCUL10n
.
getStr
(
"
webconsole
.
clear
.
keyOSX
"
)
;
}
else
{
clearShortcut
=
WCUL10n
.
getStr
(
"
webconsole
.
clear
.
key
"
)
;
}
synthesizeKeyShortcut
(
clearShortcut
)
;
await
waitFor
(
(
)
=
>
findMessages
(
hud
"
"
)
.
length
=
=
0
)
;
ok
(
hasFocus
(
hud
.
jsterm
.
inputNode
)
"
jsterm
input
is
focused
"
)
;
info
(
"
try
ctrl
-
f
to
focus
filter
"
)
;
synthesizeKeyShortcut
(
WCUL10n
.
getStr
(
"
webconsole
.
find
.
key
"
)
)
;
ok
(
!
hasFocus
(
hud
.
jsterm
.
inputNode
)
"
jsterm
input
is
not
focused
"
)
;
is
(
hud
.
ui
.
filterBox
outputScroller
.
ownerDocument
.
activeElement
"
filter
input
is
focused
"
)
;
}
)
;
