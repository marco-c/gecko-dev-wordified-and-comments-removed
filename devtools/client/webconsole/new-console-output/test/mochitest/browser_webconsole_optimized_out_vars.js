"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
new
-
console
-
output
/
test
/
mochitest
/
"
+
"
test
-
closure
-
optimized
-
out
.
html
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
debugger
.
new
-
debugger
-
frontend
"
false
)
;
let
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
let
{
toolbox
panel
:
debuggerPanel
}
=
await
openDebugger
(
)
;
let
sources
=
debuggerPanel
.
panelWin
.
DebuggerView
.
Sources
;
await
debuggerPanel
.
addBreakpoint
(
{
actor
:
sources
.
values
[
0
]
line
:
18
}
)
;
await
ensureThreadClientState
(
debuggerPanel
"
resumed
"
)
;
let
{
FETCHED_SCOPES
}
=
debuggerPanel
.
panelWin
.
EVENTS
;
let
fetchedScopes
=
debuggerPanel
.
panelWin
.
once
(
FETCHED_SCOPES
)
;
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
async
function
(
)
{
let
button
=
content
.
document
.
querySelector
(
"
button
"
)
;
button
.
click
(
)
;
}
)
;
await
fetchedScopes
;
ok
(
true
"
Scopes
were
fetched
"
)
;
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
let
onMessage
=
waitForMessage
(
hud
"
optimized
out
"
)
;
hud
.
jsterm
.
execute
(
"
upvar
"
)
;
info
(
"
Waiting
for
optimized
out
message
"
)
;
await
onMessage
;
ok
(
true
"
Optimized
out
message
logged
"
)
;
}
)
;
async
function
ensureThreadClientState
(
debuggerPanel
state
)
{
let
thread
=
debuggerPanel
.
panelWin
.
gThreadClient
;
info
(
Thread
is
:
'
{
thread
.
state
}
'
.
)
;
if
(
thread
.
state
!
=
state
)
{
info
(
"
Waiting
for
thread
event
:
'
{
state
}
'
.
"
)
;
await
thread
.
addOneTimeListener
(
state
)
;
}
}
