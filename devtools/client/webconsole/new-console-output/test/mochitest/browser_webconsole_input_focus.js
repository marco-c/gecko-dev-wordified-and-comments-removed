"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
;
charset
=
utf
-
8
Test
input
focused
<
script
>
console
.
log
(
"
console
message
1
"
)
;
<
/
script
>
;
add_task
(
function
*
(
)
{
let
hud
=
yield
openNewTabAndConsole
(
TEST_URI
)
;
hud
.
jsterm
.
clearOutput
(
)
;
let
inputNode
=
hud
.
jsterm
.
inputNode
;
ok
(
inputNode
.
getAttribute
(
"
focused
"
)
"
input
node
is
focused
after
output
is
cleared
"
)
;
info
(
"
Focus
during
message
logging
"
)
;
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
function
*
(
)
{
content
.
wrappedJSObject
.
console
.
log
(
"
console
message
2
"
)
;
}
)
;
let
msg
=
yield
waitFor
(
(
)
=
>
findMessage
(
hud
"
console
message
2
"
)
)
;
ok
(
inputNode
.
getAttribute
(
"
focused
"
)
"
input
node
is
focused
first
time
"
)
;
info
(
"
Focus
after
clicking
in
the
output
area
"
)
;
yield
waitForBlurredInput
(
hud
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
msg
)
;
ok
(
inputNode
.
getAttribute
(
"
focused
"
)
"
input
node
is
focused
second
time
"
)
;
info
(
"
Setting
a
text
selection
and
making
sure
a
click
does
not
re
-
focus
"
)
;
yield
waitForBlurredInput
(
hud
)
;
let
selection
=
hud
.
iframeWindow
.
getSelection
(
)
;
selection
.
selectAllChildren
(
msg
.
querySelector
(
"
.
message
-
body
"
)
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
msg
)
;
ok
(
!
inputNode
.
getAttribute
(
"
focused
"
)
"
input
node
not
focused
after
text
is
selected
"
)
;
}
)
;
function
waitForBlurredInput
(
hud
)
{
let
inputNode
=
hud
.
jsterm
.
inputNode
;
return
new
Promise
(
resolve
=
>
{
let
lostFocus
=
(
)
=
>
{
ok
(
!
inputNode
.
getAttribute
(
"
focused
"
)
"
input
node
is
not
focused
"
)
;
resolve
(
)
;
}
;
inputNode
.
addEventListener
(
"
blur
"
lostFocus
{
once
:
true
}
)
;
document
.
getElementById
(
"
urlbar
"
)
.
click
(
)
;
}
)
;
}
