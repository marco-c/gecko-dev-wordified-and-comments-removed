"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
shared
-
head
.
js
"
this
)
;
var
{
Utils
:
WebConsoleUtils
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
"
)
;
const
WEBCONSOLE_STRINGS_URI
=
"
devtools
/
client
/
locales
/
webconsole
.
properties
"
;
var
WCUL10n
=
new
WebConsoleUtils
.
L10n
(
WEBCONSOLE_STRINGS_URI
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
webconsole
.
new
-
frontend
-
enabled
"
true
)
;
registerCleanupFunction
(
function
*
(
)
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
webconsole
.
new
-
frontend
-
enabled
"
)
;
let
browserConsole
=
HUDService
.
getBrowserConsole
(
)
;
if
(
browserConsole
)
{
if
(
browserConsole
.
jsterm
)
{
browserConsole
.
jsterm
.
clearOutput
(
true
)
;
}
yield
HUDService
.
toggleBrowserConsole
(
)
;
}
}
)
;
var
openNewTabAndConsole
=
Task
.
async
(
function
*
(
url
)
{
let
toolbox
=
yield
openNewTabAndToolbox
(
url
"
webconsole
"
)
;
let
hud
=
toolbox
.
getCurrentPanel
(
)
.
hud
;
hud
.
jsterm
.
_lazyVariablesView
=
false
;
return
hud
;
}
)
;
function
waitForMessages
(
{
hud
messages
}
)
{
return
new
Promise
(
resolve
=
>
{
let
numMatched
=
0
;
let
receivedLog
=
hud
.
ui
.
on
(
"
new
-
messages
"
function
messagesReceieved
(
e
newMessages
)
{
for
(
let
message
of
messages
)
{
if
(
message
.
matched
)
{
continue
;
}
for
(
let
newMessage
of
newMessages
)
{
let
messageBody
=
newMessage
.
node
.
querySelector
(
"
.
message
-
body
"
)
;
if
(
messageBody
.
textContent
=
=
message
.
text
)
{
numMatched
+
+
;
message
.
matched
=
true
;
info
(
"
Matched
a
message
with
text
:
"
+
message
.
text
+
"
still
waiting
for
"
+
(
messages
.
length
-
numMatched
)
+
"
messages
"
)
;
break
;
}
}
if
(
numMatched
=
=
=
messages
.
length
)
{
hud
.
ui
.
off
(
"
new
-
messages
"
messagesReceieved
)
;
resolve
(
receivedLog
)
;
return
;
}
}
}
)
;
}
)
;
}
async
function
waitFor
(
condition
message
=
"
waitFor
"
interval
=
10
maxTries
=
500
)
{
await
BrowserTestUtils
.
waitForCondition
(
condition
message
interval
maxTries
)
;
return
condition
(
)
;
}
function
findMessage
(
hud
text
selector
=
"
.
message
"
)
{
const
elements
=
findMessages
(
hud
text
selector
)
;
return
elements
.
pop
(
)
;
}
function
findMessages
(
hud
text
selector
=
"
.
message
"
)
{
const
messages
=
hud
.
ui
.
experimentalOutputNode
.
querySelectorAll
(
selector
)
;
const
elements
=
Array
.
prototype
.
filter
.
call
(
messages
(
el
)
=
>
el
.
textContent
.
includes
(
text
)
)
;
return
elements
;
}
function
*
openContextMenu
(
hud
element
)
{
let
onConsoleMenuOpened
=
hud
.
ui
.
newConsoleOutput
.
once
(
"
menu
-
open
"
)
;
synthesizeContextMenuEvent
(
element
)
;
yield
onConsoleMenuOpened
;
return
hud
.
ui
.
newConsoleOutput
.
toolbox
.
doc
.
getElementById
(
"
webconsole
-
menu
"
)
;
}
function
hideContextMenu
(
hud
)
{
let
popup
=
hud
.
ui
.
newConsoleOutput
.
toolbox
.
doc
.
getElementById
(
"
webconsole
-
menu
"
)
;
if
(
!
popup
)
{
return
Promise
.
resolve
(
)
;
}
let
onPopupHidden
=
once
(
popup
"
popuphidden
"
)
;
popup
.
hidePopup
(
)
;
return
onPopupHidden
;
}
