"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
shared
-
head
.
js
"
this
)
;
var
{
HUDService
}
=
require
(
"
devtools
/
client
/
webconsole
/
hudservice
"
)
;
var
WCUL10n
=
require
(
"
devtools
/
client
/
webconsole
/
webconsole
-
l10n
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
webconsole
.
new
-
frontend
-
enabled
"
true
)
;
registerCleanupFunction
(
function
*
(
)
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
webconsole
.
new
-
frontend
-
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
webconsole
.
ui
.
filterbar
"
)
;
yield
SpecialPowers
.
flushPrefEnv
(
)
;
Services
.
prefs
.
getChildList
(
"
devtools
.
webconsole
.
filter
"
)
.
forEach
(
pref
=
>
{
Services
.
prefs
.
clearUserPref
(
pref
)
;
}
)
;
let
browserConsole
=
HUDService
.
getBrowserConsole
(
)
;
if
(
browserConsole
)
{
if
(
browserConsole
.
jsterm
)
{
browserConsole
.
jsterm
.
clearOutput
(
true
)
;
}
yield
HUDService
.
toggleBrowserConsole
(
)
;
}
}
)
;
async
function
openNewTabAndConsole
(
url
clearJstermHistory
=
true
)
{
let
toolbox
=
await
openNewTabAndToolbox
(
url
"
webconsole
"
)
;
let
hud
=
toolbox
.
getCurrentPanel
(
)
.
hud
;
hud
.
jsterm
.
_lazyVariablesView
=
false
;
if
(
clearJstermHistory
)
{
await
hud
.
jsterm
.
clearHistory
(
)
;
}
return
hud
;
}
function
waitForMessages
(
{
hud
messages
}
)
{
return
new
Promise
(
resolve
=
>
{
const
matchedMessages
=
[
]
;
hud
.
ui
.
on
(
"
new
-
messages
"
function
messagesReceived
(
e
newMessages
)
{
for
(
let
message
of
messages
)
{
if
(
message
.
matched
)
{
continue
;
}
for
(
let
newMessage
of
newMessages
)
{
let
messageBody
=
newMessage
.
node
.
querySelector
(
"
.
message
-
body
"
)
;
if
(
messageBody
.
textContent
.
includes
(
message
.
text
)
)
{
matchedMessages
.
push
(
newMessage
)
;
message
.
matched
=
true
;
const
messagesLeft
=
messages
.
length
-
matchedMessages
.
length
;
info
(
Matched
a
message
with
text
:
"
{
message
.
text
}
"
+
(
messagesLeft
>
0
?
still
waiting
for
{
messagesLeft
}
messages
.
:
all
messages
received
.
)
)
;
break
;
}
}
if
(
matchedMessages
.
length
=
=
=
messages
.
length
)
{
hud
.
ui
.
off
(
"
new
-
messages
"
messagesReceived
)
;
resolve
(
matchedMessages
)
;
return
;
}
}
}
)
;
}
)
;
}
async
function
waitForMessage
(
hud
text
)
{
const
messages
=
await
waitForMessages
(
{
hud
messages
:
[
{
text
}
]
}
)
;
return
messages
[
0
]
;
}
async
function
waitFor
(
condition
message
=
"
waitFor
"
interval
=
10
maxTries
=
500
)
{
await
BrowserTestUtils
.
waitForCondition
(
condition
message
interval
maxTries
)
;
return
condition
(
)
;
}
function
findMessage
(
hud
text
selector
=
"
.
message
"
)
{
const
elements
=
findMessages
(
hud
text
selector
)
;
return
elements
.
pop
(
)
;
}
function
findMessages
(
hud
text
selector
=
"
.
message
"
)
{
const
messages
=
hud
.
ui
.
outputNode
.
querySelectorAll
(
selector
)
;
const
elements
=
Array
.
prototype
.
filter
.
call
(
messages
(
el
)
=
>
el
.
textContent
.
includes
(
text
)
)
;
return
elements
;
}
async
function
openContextMenu
(
hud
element
)
{
let
onConsoleMenuOpened
=
hud
.
ui
.
newConsoleOutput
.
once
(
"
menu
-
open
"
)
;
synthesizeContextMenuEvent
(
element
)
;
await
onConsoleMenuOpened
;
return
hud
.
ui
.
newConsoleOutput
.
toolbox
.
doc
.
getElementById
(
"
webconsole
-
menu
"
)
;
}
function
hideContextMenu
(
hud
)
{
let
popup
=
hud
.
ui
.
newConsoleOutput
.
toolbox
.
doc
.
getElementById
(
"
webconsole
-
menu
"
)
;
if
(
!
popup
)
{
return
Promise
.
resolve
(
)
;
}
let
onPopupHidden
=
once
(
popup
"
popuphidden
"
)
;
popup
.
hidePopup
(
)
;
return
onPopupHidden
;
}
function
loadDocument
(
url
browser
=
gBrowser
.
selectedBrowser
)
{
return
new
Promise
(
resolve
=
>
{
browser
.
addEventListener
(
"
load
"
resolve
{
capture
:
true
once
:
true
}
)
;
BrowserTestUtils
.
loadURI
(
browser
url
)
;
}
)
;
}
function
waitForNodeMutation
(
node
observeConfig
=
{
}
)
{
return
new
Promise
(
resolve
=
>
{
const
observer
=
new
MutationObserver
(
mutations
=
>
{
resolve
(
mutations
)
;
observer
.
disconnect
(
)
;
}
)
;
observer
.
observe
(
node
observeConfig
)
;
}
)
;
}
async
function
testOpenInDebugger
(
hud
toolbox
text
)
{
info
(
Finding
message
for
open
-
in
-
debugger
test
;
text
is
"
{
text
}
"
)
;
let
messageNode
=
await
waitFor
(
(
)
=
>
findMessage
(
hud
text
)
)
;
let
frameLinkNode
=
messageNode
.
querySelector
(
"
.
message
-
location
.
frame
-
link
"
)
;
ok
(
frameLinkNode
"
The
message
does
have
a
location
link
"
)
;
await
checkClickOnNode
(
hud
toolbox
frameLinkNode
)
;
}
async
function
checkClickOnNode
(
hud
toolbox
frameLinkNode
)
{
info
(
"
checking
click
on
node
location
"
)
;
let
url
=
frameLinkNode
.
getAttribute
(
"
data
-
url
"
)
;
ok
(
url
source
url
found
(
"
{
url
}
"
)
)
;
let
line
=
frameLinkNode
.
getAttribute
(
"
data
-
line
"
)
;
ok
(
line
source
line
found
(
"
{
line
}
"
)
)
;
let
onSourceInDebuggerOpened
=
once
(
hud
.
ui
"
source
-
in
-
debugger
-
opened
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
frameLinkNode
.
querySelector
(
"
.
frame
-
link
-
filename
"
)
)
;
await
onSourceInDebuggerOpened
;
let
dbg
=
toolbox
.
getPanel
(
"
jsdebugger
"
)
;
is
(
dbg
.
_selectors
.
getSelectedSource
(
dbg
.
_getState
(
)
)
.
get
(
"
url
"
)
url
"
expected
source
url
"
)
;
}
function
hasFocus
(
node
)
{
return
node
.
ownerDocument
.
activeElement
=
=
node
&
&
node
.
ownerDocument
.
hasFocus
(
)
;
}
function
jstermSetValueAndComplete
(
jsterm
value
caretIndexOffset
=
0
)
{
const
{
inputNode
}
=
jsterm
;
inputNode
.
value
=
value
;
let
index
=
value
.
length
+
caretIndexOffset
;
inputNode
.
setSelectionRange
(
index
index
)
;
const
updated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
jsterm
.
complete
(
jsterm
.
COMPLETE_HINT_ONLY
)
;
return
updated
;
}
async
function
openDebugger
(
options
=
{
}
)
{
if
(
!
options
.
tab
)
{
options
.
tab
=
gBrowser
.
selectedTab
;
}
let
target
=
TargetFactory
.
forTab
(
options
.
tab
)
;
let
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
let
dbgPanelAlreadyOpen
=
toolbox
&
&
toolbox
.
getPanel
(
"
jsdebugger
"
)
;
if
(
dbgPanelAlreadyOpen
)
{
await
toolbox
.
selectTool
(
"
jsdebugger
"
)
;
return
{
target
toolbox
panel
:
toolbox
.
getCurrentPanel
(
)
}
;
}
toolbox
=
await
gDevTools
.
showToolbox
(
target
"
jsdebugger
"
)
;
let
panel
=
toolbox
.
getCurrentPanel
(
)
;
panel
.
_view
.
Variables
.
lazyEmpty
=
false
;
await
panel
.
panelWin
.
DebuggerController
.
waitForSourcesLoaded
(
)
;
return
{
target
toolbox
panel
}
;
}
async
function
openConsole
(
tab
)
{
let
target
=
TargetFactory
.
forTab
(
tab
|
|
gBrowser
.
selectedTab
)
;
const
toolbox
=
await
gDevTools
.
showToolbox
(
target
"
webconsole
"
)
;
return
toolbox
.
getCurrentPanel
(
)
.
hud
;
}
;
