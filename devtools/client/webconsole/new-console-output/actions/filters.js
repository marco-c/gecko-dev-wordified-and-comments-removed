"
use
strict
"
;
const
{
getAllFilters
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
selectors
/
filters
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
FILTER_TEXT_SET
FILTER_TOGGLE
FILTERS_CLEAR
DEFAULT_FILTERS_RESET
PREFS
FILTERS
DEFAULT_FILTERS
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
constants
"
)
;
function
filterTextSet
(
text
)
{
return
{
type
:
FILTER_TEXT_SET
text
}
;
}
function
filterToggle
(
filter
)
{
return
(
dispatch
getState
)
=
>
{
dispatch
(
{
type
:
FILTER_TOGGLE
filter
}
)
;
const
filterState
=
getAllFilters
(
getState
(
)
)
;
Services
.
prefs
.
setBoolPref
(
PREFS
.
FILTER
[
filter
.
toUpperCase
(
)
]
filterState
.
get
(
filter
)
)
;
}
;
}
function
filtersClear
(
)
{
return
(
dispatch
getState
)
=
>
{
dispatch
(
{
type
:
FILTERS_CLEAR
}
)
;
const
filterState
=
getAllFilters
(
getState
(
)
)
.
toJS
(
)
;
for
(
let
filter
in
filterState
)
{
if
(
filter
!
=
=
FILTERS
.
TEXT
)
{
Services
.
prefs
.
clearUserPref
(
PREFS
.
FILTER
[
filter
.
toUpperCase
(
)
]
)
;
}
}
}
;
}
function
defaultFiltersReset
(
)
{
return
(
dispatch
getState
)
=
>
{
const
filterState
=
getAllFilters
(
getState
(
)
)
;
dispatch
(
{
type
:
DEFAULT_FILTERS_RESET
}
)
;
DEFAULT_FILTERS
.
forEach
(
filter
=
>
{
if
(
filterState
[
filter
]
=
=
=
false
)
{
Services
.
prefs
.
clearUserPref
(
PREFS
.
FILTER
[
filter
.
toUpperCase
(
)
]
)
;
}
}
)
;
}
;
}
module
.
exports
=
{
filterTextSet
filterToggle
filtersClear
defaultFiltersReset
}
;
