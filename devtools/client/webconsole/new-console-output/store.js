"
use
strict
"
;
const
Immutable
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
immutable
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
Filters
=
Immutable
.
Record
(
{
error
:
true
warn
:
true
info
:
true
log
:
true
searchText
:
"
"
}
)
;
const
Prefs
=
Immutable
.
Record
(
{
logLimit
:
1000
}
)
;
const
Ui
=
Immutable
.
Record
(
{
configFilterBarVisible
:
false
filteredMessageVisible
:
false
}
)
;
module
.
exports
.
Prefs
=
Prefs
;
module
.
exports
.
Filters
=
Filters
;
module
.
exports
.
Ui
=
Ui
;
const
{
combineReducers
createStore
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
reducers
}
=
require
(
"
.
/
reducers
/
index
"
)
;
function
storeFactory
(
)
{
const
initialState
=
{
messages
:
Immutable
.
List
(
)
prefs
:
new
Prefs
(
{
logLimit
:
Math
.
max
(
Services
.
prefs
.
getIntPref
(
"
devtools
.
hud
.
loglimit
"
)
1
)
}
)
filters
:
new
Filters
(
{
error
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
webconsole
.
filter
.
error
"
)
warn
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
webconsole
.
filter
.
warn
"
)
info
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
webconsole
.
filter
.
info
"
)
log
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
webconsole
.
filter
.
log
"
)
searchText
:
"
"
}
)
ui
:
new
Ui
(
{
configFilterBarVisible
:
false
filteredMessageVisible
:
false
}
)
}
;
return
createStore
(
combineReducers
(
reducers
)
initialState
)
;
}
module
.
exports
.
store
=
storeFactory
(
)
;
module
.
exports
.
storeFactory
=
storeFactory
;
