"
use
strict
"
;
const
{
createClass
createFactory
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
MESSAGE_SOURCE
MESSAGE_TYPE
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
constants
"
)
;
const
componentMap
=
new
Map
(
[
[
"
ConsoleApiCall
"
require
(
"
.
/
message
-
types
/
console
-
api
-
call
"
)
.
ConsoleApiCall
]
[
"
ConsoleCommand
"
require
(
"
.
/
message
-
types
/
console
-
command
"
)
.
ConsoleCommand
]
[
"
DefaultRenderer
"
require
(
"
.
/
message
-
types
/
default
-
renderer
"
)
.
DefaultRenderer
]
[
"
EvaluationResult
"
require
(
"
.
/
message
-
types
/
evaluation
-
result
"
)
.
EvaluationResult
]
[
"
PageError
"
require
(
"
.
/
message
-
types
/
page
-
error
"
)
.
PageError
]
]
)
;
const
MessageContainer
=
createClass
(
{
displayName
:
"
MessageContainer
"
propTypes
:
{
message
:
PropTypes
.
object
.
isRequired
sourceMapService
:
PropTypes
.
object
onViewSourceInDebugger
:
PropTypes
.
func
.
isRequired
open
:
PropTypes
.
bool
.
isRequired
}
getDefaultProps
:
function
(
)
{
return
{
open
:
false
}
;
}
shouldComponentUpdate
(
nextProps
nextState
)
{
return
this
.
props
.
message
.
repeat
!
=
=
nextProps
.
message
.
repeat
|
|
this
.
props
.
open
!
=
=
nextProps
.
open
;
}
render
(
)
{
const
{
dispatch
message
sourceMapService
onViewSourceInDebugger
open
}
=
this
.
props
;
let
MessageComponent
=
createFactory
(
getMessageComponent
(
message
)
)
;
return
MessageComponent
(
{
dispatch
message
sourceMapService
onViewSourceInDebugger
open
}
)
;
}
}
)
;
function
getMessageComponent
(
message
)
{
switch
(
message
.
source
)
{
case
MESSAGE_SOURCE
.
CONSOLE_API
:
return
componentMap
.
get
(
"
ConsoleApiCall
"
)
;
case
MESSAGE_SOURCE
.
JAVASCRIPT
:
switch
(
message
.
type
)
{
case
MESSAGE_TYPE
.
COMMAND
:
return
componentMap
.
get
(
"
ConsoleCommand
"
)
;
case
MESSAGE_TYPE
.
RESULT
:
return
componentMap
.
get
(
"
EvaluationResult
"
)
;
case
MESSAGE_TYPE
.
LOG
:
return
componentMap
.
get
(
"
PageError
"
)
;
default
:
return
componentMap
.
get
(
"
DefaultRenderer
"
)
;
}
}
return
componentMap
.
get
(
"
DefaultRenderer
"
)
;
}
module
.
exports
.
MessageContainer
=
MessageContainer
;
module
.
exports
.
getMessageComponent
=
getMessageComponent
;
