"
use
strict
"
;
if
(
typeof
define
=
=
=
"
undefined
"
)
{
require
(
"
amd
-
loader
"
)
;
}
const
{
createFactory
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
rep
-
utils
"
)
;
const
{
Rep
}
=
createFactories
(
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
rep
"
)
)
;
const
StringRep
=
createFactories
(
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
string
"
)
.
StringRep
)
.
rep
;
const
VariablesViewLink
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
components
/
variables
-
view
-
link
"
)
)
;
const
{
Grip
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
grip
"
)
;
GripMessageBody
.
displayName
=
"
GripMessageBody
"
;
GripMessageBody
.
propTypes
=
{
grip
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
number
PropTypes
.
object
]
)
.
isRequired
serviceContainer
:
PropTypes
.
shape
(
{
createElement
:
PropTypes
.
func
.
isRequired
}
)
userProvidedStyle
:
PropTypes
.
string
}
;
function
GripMessageBody
(
props
)
{
const
{
grip
userProvidedStyle
serviceContainer
}
=
props
;
let
styleObject
;
if
(
userProvidedStyle
&
&
userProvidedStyle
!
=
=
"
"
)
{
styleObject
=
cleanupStyle
(
userProvidedStyle
serviceContainer
.
createElement
)
;
}
return
(
typeof
grip
=
=
=
"
string
"
?
StringRep
(
{
object
:
grip
useQuotes
:
false
mode
:
props
.
mode
style
:
styleObject
}
)
:
Rep
(
{
object
:
grip
objectLink
:
VariablesViewLink
defaultRep
:
Grip
mode
:
props
.
mode
}
)
)
;
}
function
cleanupStyle
(
userProvidedStyle
createElement
)
{
const
allowedStylesRegex
=
new
RegExp
(
"
^
(
?
:
-
moz
-
)
?
(
?
:
background
|
border
|
box
|
clear
|
color
|
cursor
|
display
|
float
|
font
|
line
|
"
+
"
margin
|
padding
|
text
|
transition
|
outline
|
white
-
space
|
word
|
writing
|
"
+
"
(
?
:
min
-
|
max
-
)
?
width
|
(
?
:
min
-
|
max
-
)
?
height
)
"
)
;
const
forbiddenValuesRegexs
=
[
/
\
b
(
?
:
url
|
(
?
:
-
moz
-
)
?
element
)
[
\
s
(
'
"
]
+
/
gi
/
[
'
"
(
]
*
(
?
:
chrome
|
resource
|
about
|
app
|
data
|
https
?
|
ftp
|
file
)
:
+
\
/
*
/
gi
]
;
let
dummy
=
createElement
(
"
div
"
)
;
dummy
.
style
=
userProvidedStyle
;
return
[
.
.
.
dummy
.
style
]
.
filter
(
name
=
>
{
return
allowedStylesRegex
.
test
(
name
)
&
&
!
forbiddenValuesRegexs
.
some
(
regex
=
>
regex
.
test
(
dummy
.
style
[
name
]
)
)
;
}
)
.
reduce
(
(
object
name
)
=
>
{
return
Object
.
assign
(
{
[
name
]
:
dummy
.
style
[
name
]
}
object
)
;
}
{
}
)
;
}
module
.
exports
=
GripMessageBody
;
