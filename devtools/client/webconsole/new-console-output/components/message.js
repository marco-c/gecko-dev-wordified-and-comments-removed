"
use
strict
"
;
const
{
createClass
createFactory
DOM
:
dom
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
actions
/
index
"
)
;
const
CollapseButton
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
components
/
collapse
-
button
"
)
)
;
const
MessageIcon
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
components
/
message
-
icon
"
)
)
;
const
MessageRepeat
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
components
/
message
-
repeat
"
)
)
;
const
FrameView
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
frame
"
)
)
;
const
StackTrace
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
stack
-
trace
"
)
)
;
const
Message
=
createClass
(
{
displayName
:
"
Message
"
propTypes
:
{
open
:
PropTypes
.
bool
source
:
PropTypes
.
string
.
isRequired
type
:
PropTypes
.
string
.
isRequired
level
:
PropTypes
.
string
.
isRequired
topLevelClasses
:
PropTypes
.
array
.
isRequired
messageBody
:
PropTypes
.
any
.
isRequired
repeat
:
PropTypes
.
any
frame
:
PropTypes
.
any
attachment
:
PropTypes
.
any
stacktrace
:
PropTypes
.
any
messageId
:
PropTypes
.
string
scrollToMessage
:
PropTypes
.
bool
onViewSourceInDebugger
:
PropTypes
.
func
sourceMapService
:
PropTypes
.
any
}
componentDidMount
(
)
{
if
(
this
.
props
.
scrollToMessage
&
&
this
.
messageNode
)
{
this
.
messageNode
.
scrollIntoView
(
)
;
}
}
render
(
)
{
const
{
messageId
open
source
type
level
topLevelClasses
messageBody
frame
stacktrace
onViewSourceInDebugger
sourceMapService
dispatch
}
=
this
.
props
;
topLevelClasses
.
push
(
"
message
"
source
type
level
)
;
if
(
open
)
{
topLevelClasses
.
push
(
"
open
"
)
;
}
const
icon
=
MessageIcon
(
{
level
}
)
;
let
attachment
=
null
;
if
(
this
.
props
.
attachment
)
{
attachment
=
this
.
props
.
attachment
;
}
else
if
(
stacktrace
)
{
const
child
=
open
?
StackTrace
(
{
stacktrace
:
stacktrace
onViewSourceInDebugger
:
onViewSourceInDebugger
}
)
:
null
;
attachment
=
dom
.
div
(
{
className
:
"
stacktrace
devtools
-
monospace
"
}
child
)
;
}
let
collapse
=
null
;
if
(
attachment
)
{
collapse
=
CollapseButton
(
{
open
onClick
:
function
(
)
{
if
(
open
)
{
dispatch
(
actions
.
messageClose
(
messageId
)
)
;
}
else
{
dispatch
(
actions
.
messageOpen
(
messageId
)
)
;
}
}
}
)
;
}
const
repeat
=
this
.
props
.
repeat
?
MessageRepeat
(
{
repeat
:
this
.
props
.
repeat
}
)
:
null
;
const
shouldRenderFrame
=
frame
&
&
frame
.
source
!
=
=
"
debugger
eval
code
"
;
const
location
=
dom
.
span
(
{
className
:
"
message
-
location
devtools
-
monospace
"
}
shouldRenderFrame
?
FrameView
(
{
frame
onClick
:
onViewSourceInDebugger
showEmptyPathAsHost
:
true
sourceMapService
}
)
:
null
)
;
return
dom
.
div
(
{
className
:
topLevelClasses
.
join
(
"
"
)
ref
:
node
=
>
{
this
.
messageNode
=
node
;
}
}
icon
collapse
dom
.
span
(
{
className
:
"
message
-
body
-
wrapper
"
}
dom
.
span
(
{
className
:
"
message
-
flex
-
body
"
}
dom
.
span
(
{
className
:
"
message
-
body
devtools
-
monospace
"
}
messageBody
)
repeat
location
)
attachment
)
)
;
}
}
)
;
module
.
exports
=
Message
;
