"
use
strict
"
;
const
{
createFactory
DOM
:
dom
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
Message
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
components
/
message
"
)
)
;
const
actions
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
actions
/
index
"
)
;
const
{
l10n
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
utils
/
messages
"
)
;
const
TabboxPanel
=
createFactory
(
require
(
"
devtools
/
client
/
netmonitor
/
src
/
components
/
tabbox
-
panel
"
)
)
;
NetworkEventMessage
.
displayName
=
"
NetworkEventMessage
"
;
NetworkEventMessage
.
propTypes
=
{
message
:
PropTypes
.
object
.
isRequired
serviceContainer
:
PropTypes
.
shape
(
{
openNetworkPanel
:
PropTypes
.
func
.
isRequired
}
)
timestampsVisible
:
PropTypes
.
bool
.
isRequired
networkMessageUpdate
:
PropTypes
.
object
.
isRequired
}
;
function
NetworkEventMessage
(
{
message
=
{
}
serviceContainer
timestampsVisible
networkMessageUpdate
=
{
}
networkMessageActiveTabId
dispatch
open
}
)
{
const
{
id
actor
indent
source
type
level
request
isXHR
timeStamp
}
=
message
;
const
{
response
=
{
}
totalTime
}
=
networkMessageUpdate
;
const
{
httpVersion
status
statusText
}
=
response
;
const
topLevelClasses
=
[
"
cm
-
s
-
mozilla
"
]
;
let
statusInfo
;
if
(
httpVersion
&
&
status
&
&
statusText
!
=
=
undefined
&
&
totalTime
!
=
=
undefined
)
{
statusInfo
=
[
{
httpVersion
}
{
status
}
{
statusText
}
{
totalTime
}
ms
]
;
}
const
openNetworkMonitor
=
serviceContainer
.
openNetworkPanel
?
(
)
=
>
serviceContainer
.
openNetworkPanel
(
actor
)
:
null
;
const
method
=
dom
.
span
(
{
className
:
"
method
"
}
request
.
method
)
;
const
xhr
=
isXHR
?
dom
.
span
(
{
className
:
"
xhr
"
}
l10n
.
getStr
(
"
webConsoleXhrIndicator
"
)
)
:
null
;
const
url
=
dom
.
a
(
{
className
:
"
url
"
title
:
request
.
url
onClick
:
openNetworkMonitor
}
request
.
url
.
replace
(
/
\
?
.
+
/
"
"
)
)
;
const
statusBody
=
statusInfo
?
dom
.
a
(
{
className
:
"
status
"
onClick
:
openNetworkMonitor
}
statusInfo
)
:
null
;
const
messageBody
=
[
method
xhr
url
statusBody
]
;
const
attachment
=
open
&
&
dom
.
div
(
{
className
:
"
network
-
info
devtools
-
monospace
"
}
TabboxPanel
(
{
activeTabId
:
networkMessageActiveTabId
request
:
networkMessageUpdate
sourceMapService
:
serviceContainer
.
sourceMapService
cloneSelectedRequest
:
(
)
=
>
{
}
selectTab
:
(
tabId
)
=
>
{
dispatch
(
actions
.
selectNetworkMessageTab
(
tabId
)
)
;
}
}
)
)
;
return
Message
(
{
dispatch
messageId
:
id
source
type
level
indent
collapsible
:
true
open
attachment
topLevelClasses
timeStamp
messageBody
serviceContainer
request
timestampsVisible
}
)
;
}
module
.
exports
=
NetworkEventMessage
;
