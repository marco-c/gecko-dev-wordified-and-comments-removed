"
use
strict
"
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
Message
=
createFactory
(
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
components
/
Message
"
)
)
;
const
actions
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
actions
/
index
"
)
;
const
{
l10n
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
utils
/
messages
"
)
;
const
TabboxPanel
=
createFactory
(
require
(
"
devtools
/
client
/
netmonitor
/
src
/
components
/
TabboxPanel
"
)
)
;
const
{
getHTTPStatusCodeURL
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
mdn
-
utils
"
)
;
const
LEARN_MORE
=
l10n
.
getStr
(
"
webConsoleMoreInfoLabel
"
)
;
NetworkEventMessage
.
displayName
=
"
NetworkEventMessage
"
;
NetworkEventMessage
.
propTypes
=
{
message
:
PropTypes
.
object
.
isRequired
serviceContainer
:
PropTypes
.
shape
(
{
openNetworkPanel
:
PropTypes
.
func
.
isRequired
}
)
timestampsVisible
:
PropTypes
.
bool
.
isRequired
networkMessageUpdate
:
PropTypes
.
object
.
isRequired
}
;
function
NetworkEventMessage
(
{
message
=
{
}
serviceContainer
timestampsVisible
networkMessageUpdate
=
{
}
networkMessageActiveTabId
dispatch
open
}
)
{
const
{
id
indent
source
type
level
request
isXHR
timeStamp
}
=
message
;
const
{
response
=
{
}
totalTime
}
=
networkMessageUpdate
;
const
{
httpVersion
status
statusText
}
=
response
;
const
topLevelClasses
=
[
"
cm
-
s
-
mozilla
"
]
;
let
statusCode
statusInfo
;
if
(
httpVersion
&
&
status
&
&
statusText
!
=
=
undefined
&
&
totalTime
!
=
=
undefined
)
{
let
statusCodeDocURL
=
getHTTPStatusCodeURL
(
status
.
toString
(
)
"
webconsole
"
)
;
statusCode
=
dom
.
span
(
{
className
:
"
status
-
code
"
"
data
-
code
"
:
status
title
:
LEARN_MORE
onClick
:
(
e
)
=
>
{
e
.
stopPropagation
(
)
;
e
.
preventDefault
(
)
;
serviceContainer
.
openLink
(
statusCodeDocURL
e
)
;
}
}
status
)
;
statusInfo
=
dom
.
span
(
{
className
:
"
status
-
info
"
}
[
{
httpVersion
}
statusCode
{
statusText
}
{
totalTime
}
ms
]
)
;
}
const
toggle
=
(
)
=
>
{
if
(
open
)
{
dispatch
(
actions
.
messageClose
(
id
)
)
;
}
else
{
dispatch
(
actions
.
messageOpen
(
id
)
)
;
}
}
;
const
method
=
dom
.
span
(
{
className
:
"
method
"
}
request
.
method
)
;
const
xhr
=
isXHR
?
dom
.
span
(
{
className
:
"
xhr
"
}
l10n
.
getStr
(
"
webConsoleXhrIndicator
"
)
)
:
null
;
const
requestUrl
=
dom
.
a
(
{
className
:
"
url
"
title
:
request
.
url
onClick
:
toggle
}
request
.
url
)
;
const
statusBody
=
statusInfo
?
dom
.
a
(
{
className
:
"
status
"
onClick
:
toggle
}
statusInfo
)
:
null
;
const
messageBody
=
[
xhr
method
requestUrl
statusBody
]
;
let
connector
=
{
viewSourceInDebugger
:
(
url
line
)
=
>
{
serviceContainer
.
onViewSourceInDebugger
(
{
url
line
}
)
;
}
getLongString
:
(
grip
)
=
>
{
return
serviceContainer
.
getLongString
(
grip
)
;
}
getTabTarget
:
(
)
=
>
{
}
getNetworkRequest
:
(
)
=
>
{
}
sendHTTPRequest
:
(
)
=
>
{
}
setPreferences
:
(
)
=
>
{
}
triggerActivity
:
(
)
=
>
{
}
requestData
:
(
requestId
dataType
)
=
>
{
return
serviceContainer
.
requestData
(
requestId
dataType
)
;
}
}
;
const
attachment
=
open
&
&
dom
.
div
(
{
className
:
"
network
-
info
network
-
monitor
devtools
-
monospace
"
}
TabboxPanel
(
{
connector
activeTabId
:
networkMessageActiveTabId
request
:
networkMessageUpdate
sourceMapService
:
serviceContainer
.
sourceMapService
openLink
:
serviceContainer
.
openLink
selectTab
:
(
tabId
)
=
>
{
dispatch
(
actions
.
selectNetworkMessageTab
(
tabId
)
)
;
}
}
)
)
;
return
Message
(
{
dispatch
messageId
:
id
source
type
level
indent
collapsible
:
true
open
attachment
topLevelClasses
timeStamp
messageBody
serviceContainer
request
timestampsVisible
}
)
;
}
module
.
exports
=
NetworkEventMessage
;
