"
use
strict
"
;
const
Immutable
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
immutable
"
)
;
const
{
l10n
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
utils
/
messages
"
)
;
const
constants
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
constants
"
)
;
const
{
isGroupType
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
utils
/
messages
"
)
;
const
{
MESSAGE_TYPE
MESSAGE_SOURCE
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
constants
"
)
;
const
{
getGripPreviewItems
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
"
)
;
const
{
getSourceNames
}
=
require
(
"
devtools
/
client
/
shared
/
source
-
utils
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
logLimit
=
Math
.
max
(
Services
.
prefs
.
getIntPref
(
"
devtools
.
hud
.
loglimit
"
)
1
)
;
const
MessageState
=
Immutable
.
Record
(
{
messagesById
:
Immutable
.
OrderedMap
(
)
visibleMessages
:
[
]
messagesUiById
:
Immutable
.
List
(
)
messagesTableDataById
:
Immutable
.
Map
(
)
groupsById
:
Immutable
.
Map
(
)
currentGroup
:
null
removedMessages
:
[
]
}
)
;
function
messages
(
state
=
new
MessageState
(
)
action
filtersState
)
{
const
{
messagesById
messagesUiById
messagesTableDataById
groupsById
currentGroup
visibleMessages
}
=
state
;
switch
(
action
.
type
)
{
case
constants
.
MESSAGE_ADD
:
let
newMessage
=
action
.
message
;
if
(
newMessage
.
type
=
=
=
constants
.
MESSAGE_TYPE
.
NULL_MESSAGE
)
{
return
state
;
}
if
(
newMessage
.
type
=
=
=
constants
.
MESSAGE_TYPE
.
END_GROUP
)
{
return
state
.
set
(
"
currentGroup
"
getNewCurrentGroup
(
currentGroup
groupsById
)
)
;
}
if
(
newMessage
.
allowRepeating
&
&
messagesById
.
size
>
0
)
{
let
lastMessage
=
messagesById
.
last
(
)
;
if
(
lastMessage
.
repeatId
=
=
=
newMessage
.
repeatId
)
{
return
state
.
set
(
"
messagesById
"
messagesById
.
set
(
lastMessage
.
id
lastMessage
.
set
(
"
repeat
"
lastMessage
.
repeat
+
1
)
)
)
;
}
}
return
state
.
withMutations
(
function
(
record
)
{
let
parentGroups
=
getParentGroups
(
currentGroup
groupsById
)
;
const
addedMessage
=
newMessage
.
withMutations
(
function
(
message
)
{
message
.
set
(
"
groupId
"
currentGroup
)
;
message
.
set
(
"
indent
"
parentGroups
.
length
)
;
}
)
;
record
.
set
(
"
messagesById
"
messagesById
.
set
(
newMessage
.
id
addedMessage
)
)
;
if
(
newMessage
.
type
=
=
=
"
trace
"
)
{
record
.
set
(
"
messagesUiById
"
messagesUiById
.
push
(
newMessage
.
id
)
)
;
}
else
if
(
isGroupType
(
newMessage
.
type
)
)
{
record
.
set
(
"
currentGroup
"
newMessage
.
id
)
;
record
.
set
(
"
groupsById
"
groupsById
.
set
(
newMessage
.
id
parentGroups
)
)
;
if
(
newMessage
.
type
=
=
=
constants
.
MESSAGE_TYPE
.
START_GROUP
)
{
record
.
set
(
"
messagesUiById
"
messagesUiById
.
push
(
newMessage
.
id
)
)
;
}
}
if
(
shouldMessageBeVisible
(
addedMessage
record
filtersState
)
)
{
record
.
set
(
"
visibleMessages
"
[
.
.
.
visibleMessages
newMessage
.
id
]
)
;
}
if
(
record
.
messagesById
.
size
>
logLimit
)
{
limitTopLevelMessageCount
(
state
record
)
;
}
}
)
;
case
constants
.
MESSAGES_CLEAR
:
return
new
MessageState
(
{
"
removedMessages
"
:
[
.
.
.
state
.
messagesById
]
.
reduce
(
(
res
[
id
msg
]
)
=
>
{
if
(
msg
.
parameters
)
{
res
.
push
(
msg
)
;
}
return
res
;
}
[
]
)
}
)
;
case
constants
.
MESSAGE_OPEN
:
return
state
.
withMutations
(
function
(
record
)
{
record
.
set
(
"
messagesUiById
"
messagesUiById
.
push
(
action
.
id
)
)
;
if
(
isGroupType
(
messagesById
.
get
(
action
.
id
)
.
type
)
)
{
const
messagesToShow
=
[
.
.
.
messagesById
]
.
reduce
(
(
res
[
id
message
]
)
=
>
{
if
(
!
visibleMessages
.
includes
(
message
.
id
)
&
&
getParentGroups
(
message
.
groupId
groupsById
)
.
includes
(
action
.
id
)
&
&
shouldMessageBeVisible
(
message
record
filtersState
message
.
groupId
!
=
=
action
.
id
)
)
{
res
.
push
(
id
)
;
}
return
res
;
}
[
]
)
;
const
insertIndex
=
visibleMessages
.
indexOf
(
action
.
id
)
+
1
;
record
.
set
(
"
visibleMessages
"
[
.
.
.
visibleMessages
.
slice
(
0
insertIndex
)
.
.
.
messagesToShow
.
.
.
visibleMessages
.
slice
(
insertIndex
)
]
)
;
}
}
)
;
case
constants
.
MESSAGE_CLOSE
:
return
state
.
withMutations
(
function
(
record
)
{
let
messageId
=
action
.
id
;
let
index
=
record
.
messagesUiById
.
indexOf
(
messageId
)
;
record
.
deleteIn
(
[
"
messagesUiById
"
index
]
)
;
if
(
isGroupType
(
messagesById
.
get
(
messageId
)
.
type
)
)
{
record
.
set
(
"
visibleMessages
"
[
.
.
.
visibleMessages
]
.
filter
(
id
=
>
getParentGroups
(
messagesById
.
get
(
id
)
.
groupId
groupsById
)
.
includes
(
messageId
)
=
=
=
false
)
)
;
}
}
)
;
case
constants
.
MESSAGE_TABLE_RECEIVE
:
const
{
id
data
}
=
action
;
return
state
.
set
(
"
messagesTableDataById
"
messagesTableDataById
.
set
(
id
data
)
)
;
case
constants
.
NETWORK_MESSAGE_UPDATE
:
let
updateMessage
=
action
.
message
;
return
state
.
set
(
"
messagesById
"
messagesById
.
set
(
updateMessage
.
id
updateMessage
)
)
;
case
constants
.
REMOVED_MESSAGES_CLEAR
:
return
state
.
set
(
"
removedMessages
"
[
]
)
;
case
constants
.
FILTER_TOGGLE
:
case
constants
.
FILTER_TEXT_SET
:
return
state
.
set
(
"
visibleMessages
"
[
.
.
.
messagesById
]
.
reduce
(
(
res
[
messageId
message
]
)
=
>
{
if
(
shouldMessageBeVisible
(
message
state
filtersState
)
)
{
res
.
push
(
messageId
)
;
}
return
res
;
}
[
]
)
)
;
}
return
state
;
}
function
getNewCurrentGroup
(
currentGoup
groupsById
)
{
let
newCurrentGroup
=
null
;
if
(
currentGoup
)
{
let
parents
=
groupsById
.
get
(
currentGoup
)
;
if
(
Array
.
isArray
(
parents
)
&
&
parents
.
length
>
0
)
{
newCurrentGroup
=
parents
[
0
]
;
}
}
return
newCurrentGroup
;
}
function
getParentGroups
(
currentGroup
groupsById
)
{
let
groups
=
[
]
;
if
(
currentGroup
)
{
groups
=
[
currentGroup
]
;
let
parentGroups
=
groupsById
.
get
(
currentGroup
)
;
if
(
Array
.
isArray
(
parentGroups
)
&
&
parentGroups
.
length
>
0
)
{
groups
=
groups
.
concat
(
parentGroups
)
;
}
}
return
groups
;
}
function
limitTopLevelMessageCount
(
state
record
)
{
let
tempRecord
=
{
messagesById
:
record
.
messagesById
messagesUiById
:
record
.
messagesUiById
messagesTableDataById
:
record
.
messagesTableDataById
groupsById
:
record
.
groupsById
}
;
let
removedMessages
=
state
.
removedMessages
;
let
topLevelCount
=
getToplevelMessageCount
(
tempRecord
)
;
while
(
topLevelCount
>
logLimit
)
{
removedMessages
.
push
(
.
.
.
removeFirstMessage
(
tempRecord
)
)
;
topLevelCount
-
-
;
}
removedMessages
=
state
.
removedMessages
.
filter
(
msg
=
>
msg
.
parameters
)
;
record
.
set
(
"
messagesById
"
tempRecord
.
messagesById
)
;
record
.
set
(
"
messagesUiById
"
tempRecord
.
messagesUiById
)
;
record
.
set
(
"
messagesTableDataById
"
tempRecord
.
messagesTableDataById
)
;
record
.
set
(
"
groupsById
"
tempRecord
.
groupsById
)
;
record
.
set
(
"
removedMessages
"
removedMessages
)
;
}
function
getToplevelMessageCount
(
record
)
{
return
[
.
.
.
record
.
messagesById
]
.
filter
(
message
=
>
!
message
.
groupId
)
.
length
;
}
function
removeFirstMessage
(
record
)
{
let
firstMessage
=
record
.
messagesById
.
first
(
)
;
record
.
messagesById
=
record
.
messagesById
.
shift
(
)
;
let
uiIndex
=
record
.
messagesUiById
.
indexOf
(
firstMessage
)
;
if
(
uiIndex
>
=
0
)
{
record
.
messagesUiById
=
record
.
messagesUiById
.
delete
(
uiIndex
)
;
}
if
(
record
.
messagesTableDataById
.
has
(
firstMessage
.
id
)
)
{
record
.
messagesTableDataById
=
record
.
messagesTableDataById
.
delete
(
firstMessage
.
id
)
;
}
if
(
record
.
groupsById
.
has
(
firstMessage
.
id
)
)
{
record
.
groupsById
=
record
.
groupsById
.
delete
(
firstMessage
.
id
)
;
}
let
removedMessages
=
[
firstMessage
]
;
let
message
=
record
.
messagesById
.
first
(
)
;
while
(
message
.
groupId
=
=
firstMessage
.
id
)
{
removedMessages
.
push
(
.
.
.
removeFirstMessage
(
record
)
)
;
message
=
record
.
messagesById
.
first
(
)
;
}
return
removedMessages
;
}
function
shouldMessageBeVisible
(
message
messagesState
filtersState
checkGroup
=
true
)
{
return
(
(
checkGroup
=
=
=
false
|
|
isInOpenedGroup
(
message
messagesState
.
groupsById
messagesState
.
messagesUiById
)
)
&
&
(
isUnfilterable
(
message
)
|
|
(
matchLevelFilters
(
message
filtersState
)
&
&
matchCssFilters
(
message
filtersState
)
&
&
matchNetworkFilters
(
message
filtersState
)
&
&
matchSearchFilters
(
message
filtersState
)
)
)
)
;
}
function
isUnfilterable
(
message
)
{
return
[
MESSAGE_TYPE
.
COMMAND
MESSAGE_TYPE
.
RESULT
MESSAGE_TYPE
.
START_GROUP
MESSAGE_TYPE
.
START_GROUP_COLLAPSED
]
.
includes
(
message
.
type
)
;
}
function
isInOpenedGroup
(
message
groupsById
messagesUI
)
{
return
!
message
.
groupId
|
|
(
!
isGroupClosed
(
message
.
groupId
messagesUI
)
&
&
!
hasClosedParentGroup
(
groupsById
.
get
(
message
.
groupId
)
messagesUI
)
)
;
}
function
hasClosedParentGroup
(
group
messagesUI
)
{
return
group
.
some
(
groupId
=
>
isGroupClosed
(
groupId
messagesUI
)
)
;
}
function
isGroupClosed
(
groupId
messagesUI
)
{
return
messagesUI
.
includes
(
groupId
)
=
=
=
false
;
}
function
matchLevelFilters
(
message
filters
)
{
return
filters
.
get
(
message
.
level
)
=
=
=
true
;
}
function
matchNetworkFilters
(
message
filters
)
{
return
(
message
.
source
!
=
=
MESSAGE_SOURCE
.
NETWORK
|
|
(
filters
.
get
(
"
net
"
)
=
=
=
true
&
&
message
.
isXHR
=
=
=
false
)
|
|
(
filters
.
get
(
"
netxhr
"
)
=
=
=
true
&
&
message
.
isXHR
=
=
=
true
)
)
;
}
function
matchCssFilters
(
message
filters
)
{
return
(
message
.
source
!
=
MESSAGE_SOURCE
.
CSS
|
|
filters
.
get
(
"
css
"
)
=
=
=
true
)
;
}
function
matchSearchFilters
(
message
filters
)
{
let
text
=
filters
.
text
|
|
"
"
;
return
(
text
=
=
=
"
"
|
|
isTextInParameters
(
text
message
.
parameters
)
|
|
isTextInFrame
(
text
message
.
frame
)
|
|
isTextInNetEvent
(
text
message
.
request
)
|
|
isTextInStackTrace
(
text
message
.
stacktrace
)
|
|
isTextInMessageText
(
text
message
.
messageText
)
|
|
isTextInNotes
(
text
message
.
notes
)
)
;
}
function
isTextInFrame
(
text
frame
)
{
if
(
!
frame
)
{
return
false
;
}
const
{
functionName
line
column
source
}
=
frame
;
const
{
short
}
=
getSourceNames
(
source
)
;
return
{
functionName
?
functionName
+
"
"
:
"
"
}
{
short
}
:
{
line
}
:
{
column
}
.
toLocaleLowerCase
(
)
.
includes
(
text
.
toLocaleLowerCase
(
)
)
;
}
function
isTextInParameters
(
text
parameters
)
{
if
(
!
parameters
)
{
return
false
;
}
text
=
text
.
toLocaleLowerCase
(
)
;
return
getAllProps
(
parameters
)
.
some
(
prop
=
>
(
prop
+
"
"
)
.
toLocaleLowerCase
(
)
.
includes
(
text
)
)
;
}
function
isTextInNetEvent
(
text
request
)
{
if
(
!
request
)
{
return
false
;
}
text
=
text
.
toLocaleLowerCase
(
)
;
let
method
=
request
.
method
.
toLocaleLowerCase
(
)
;
let
url
=
request
.
url
.
toLocaleLowerCase
(
)
;
return
method
.
includes
(
text
)
|
|
url
.
includes
(
text
)
;
}
function
isTextInStackTrace
(
text
stacktrace
)
{
if
(
!
Array
.
isArray
(
stacktrace
)
)
{
return
false
;
}
return
stacktrace
.
some
(
frame
=
>
isTextInFrame
(
text
{
functionName
:
frame
.
functionName
|
|
l10n
.
getStr
(
"
stacktrace
.
anonymousFunction
"
)
source
:
frame
.
filename
lineNumber
:
frame
.
lineNumber
columnNumber
:
frame
.
columnNumber
}
)
)
;
}
function
isTextInMessageText
(
text
messageText
)
{
if
(
!
messageText
)
{
return
false
;
}
return
messageText
.
toLocaleLowerCase
(
)
.
includes
(
text
.
toLocaleLowerCase
(
)
)
;
}
function
isTextInNotes
(
text
notes
)
{
if
(
!
Array
.
isArray
(
notes
)
)
{
return
false
;
}
return
notes
.
some
(
note
=
>
isTextInFrame
(
text
note
.
frame
)
|
|
(
note
.
messageBody
&
&
note
.
messageBody
.
toLocaleLowerCase
(
)
.
includes
(
text
.
toLocaleLowerCase
(
)
)
)
)
;
}
function
getAllProps
(
grips
)
{
let
result
=
grips
.
reduce
(
(
res
grip
)
=
>
{
let
previewItems
=
getGripPreviewItems
(
grip
)
;
let
allProps
=
previewItems
.
length
>
0
?
getAllProps
(
previewItems
)
:
[
]
;
return
[
.
.
.
res
grip
grip
.
class
.
.
.
allProps
]
;
}
[
]
)
;
result
=
result
.
filter
(
grip
=
>
typeof
grip
!
=
"
object
"
&
&
typeof
grip
!
=
"
undefined
"
)
;
return
[
.
.
.
new
Set
(
result
)
]
;
}
exports
.
messages
=
messages
;
