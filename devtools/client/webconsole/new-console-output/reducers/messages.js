"
use
strict
"
;
const
{
isGroupType
l10n
}
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
utils
/
messages
"
)
;
const
constants
=
require
(
"
devtools
/
client
/
webconsole
/
new
-
console
-
output
/
constants
"
)
;
const
{
DEFAULT_FILTERS
FILTERS
MESSAGE_TYPE
MESSAGE_SOURCE
}
=
constants
;
const
{
getGripPreviewItems
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
"
)
;
const
{
getSourceNames
}
=
require
(
"
devtools
/
client
/
shared
/
source
-
utils
"
)
;
const
{
UPDATE_REQUEST
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
const
{
processNetworkUpdates
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
request
-
utils
"
)
;
const
MessageState
=
overrides
=
>
Object
.
freeze
(
Object
.
assign
(
{
messagesById
:
new
Map
(
)
visibleMessages
:
[
]
filteredMessagesCount
:
getDefaultFiltersCounter
(
)
messagesUiById
:
[
]
messagesTableDataById
:
new
Map
(
)
groupsById
:
new
Map
(
)
currentGroup
:
null
removedActors
:
[
]
repeatById
:
{
}
networkMessagesUpdateById
:
{
}
}
overrides
)
)
;
function
addMessage
(
state
filtersState
prefsState
newMessage
)
{
const
{
messagesById
messagesUiById
groupsById
currentGroup
repeatById
visibleMessages
filteredMessagesCount
}
=
state
;
if
(
newMessage
.
type
=
=
=
constants
.
MESSAGE_TYPE
.
NULL_MESSAGE
)
{
return
state
;
}
if
(
newMessage
.
type
=
=
=
constants
.
MESSAGE_TYPE
.
END_GROUP
)
{
return
{
.
.
.
state
currentGroup
:
getNewCurrentGroup
(
currentGroup
groupsById
)
}
;
}
if
(
newMessage
.
allowRepeating
&
&
messagesById
.
size
>
0
)
{
let
lastMessage
=
[
.
.
.
messagesById
.
values
(
)
]
[
messagesById
.
size
-
1
]
;
if
(
lastMessage
.
repeatId
=
=
=
newMessage
.
repeatId
&
&
lastMessage
.
groupId
=
=
=
currentGroup
)
{
return
{
.
.
.
state
repeatById
:
{
.
.
.
repeatById
[
lastMessage
.
id
]
:
(
repeatById
[
lastMessage
.
id
]
|
|
1
)
+
1
}
}
;
}
}
let
newState
=
{
.
.
.
state
}
;
let
parentGroups
=
getParentGroups
(
currentGroup
groupsById
)
;
newMessage
.
groupId
=
currentGroup
;
newMessage
.
indent
=
parentGroups
.
length
;
const
addedMessage
=
Object
.
freeze
(
newMessage
)
;
newState
.
messagesById
=
(
new
Map
(
newState
.
messagesById
)
)
.
set
(
newMessage
.
id
addedMessage
)
;
if
(
newMessage
.
type
=
=
=
"
trace
"
)
{
newState
.
messagesUiById
=
[
.
.
.
messagesUiById
newMessage
.
id
]
;
}
else
if
(
isGroupType
(
newMessage
.
type
)
)
{
newState
.
currentGroup
=
newMessage
.
id
;
newState
.
groupsById
=
(
new
Map
(
newState
.
groupsById
)
)
.
set
(
newMessage
.
id
parentGroups
)
;
if
(
newMessage
.
type
=
=
=
constants
.
MESSAGE_TYPE
.
START_GROUP
)
{
newState
.
messagesUiById
=
[
.
.
.
messagesUiById
newMessage
.
id
]
;
}
}
const
{
visible
cause
}
=
getMessageVisibility
(
addedMessage
newState
filtersState
)
;
if
(
visible
)
{
newState
.
visibleMessages
=
[
.
.
.
visibleMessages
newMessage
.
id
]
;
}
else
if
(
DEFAULT_FILTERS
.
includes
(
cause
)
)
{
newState
.
filteredMessagesCount
=
{
.
.
.
filteredMessagesCount
global
:
filteredMessagesCount
.
global
+
1
[
cause
]
:
filteredMessagesCount
[
cause
]
+
1
}
;
}
return
newState
;
}
function
messages
(
state
=
MessageState
(
)
action
filtersState
prefsState
)
{
const
{
messagesById
messagesUiById
messagesTableDataById
networkMessagesUpdateById
groupsById
visibleMessages
}
=
state
;
const
{
logLimit
}
=
prefsState
;
let
newState
;
switch
(
action
.
type
)
{
case
constants
.
MESSAGES_ADD
:
newState
=
state
;
let
list
=
[
]
;
let
prunableCount
=
0
;
let
lastMessageRepeatId
=
-
1
;
for
(
let
i
=
action
.
messages
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
let
message
=
action
.
messages
[
i
]
;
if
(
!
message
.
groupId
&
&
!
isGroupType
(
message
.
type
)
&
&
message
.
type
!
=
=
MESSAGE_TYPE
.
END_GROUP
)
{
if
(
message
.
repeatId
!
=
=
lastMessageRepeatId
)
{
prunableCount
+
+
;
}
if
(
prunableCount
<
=
logLimit
|
|
message
.
repeatId
=
=
lastMessageRepeatId
)
{
list
.
unshift
(
action
.
messages
[
i
]
)
;
}
else
{
break
;
}
}
else
{
list
.
unshift
(
message
)
;
}
lastMessageRepeatId
=
message
.
repeatId
;
}
list
.
forEach
(
message
=
>
{
newState
=
addMessage
(
newState
filtersState
prefsState
message
)
;
}
)
;
return
limitTopLevelMessageCount
(
newState
logLimit
)
;
case
constants
.
MESSAGE_ADD
:
newState
=
addMessage
(
state
filtersState
prefsState
action
.
message
)
;
return
limitTopLevelMessageCount
(
newState
logLimit
)
;
case
constants
.
MESSAGES_CLEAR
:
return
MessageState
(
{
removedActors
:
[
.
.
.
state
.
messagesById
.
values
(
)
]
.
reduce
(
(
res
msg
)
=
>
{
res
.
push
(
.
.
.
getAllActorsInMessage
(
msg
state
)
)
;
return
res
;
}
[
]
)
}
)
;
case
constants
.
MESSAGE_OPEN
:
const
openState
=
{
.
.
.
state
}
;
openState
.
messagesUiById
=
[
.
.
.
messagesUiById
action
.
id
]
;
let
currMessage
=
messagesById
.
get
(
action
.
id
)
;
if
(
isGroupType
(
currMessage
.
type
)
)
{
const
messagesToShow
=
[
.
.
.
messagesById
]
.
reduce
(
(
res
[
id
message
]
)
=
>
{
if
(
!
visibleMessages
.
includes
(
message
.
id
)
&
&
getParentGroups
(
message
.
groupId
groupsById
)
.
includes
(
action
.
id
)
&
&
getMessageVisibility
(
message
openState
filtersState
message
.
groupId
!
=
=
action
.
id
)
.
visible
)
{
res
.
push
(
id
)
;
}
return
res
;
}
[
]
)
;
const
insertIndex
=
visibleMessages
.
indexOf
(
action
.
id
)
+
1
;
openState
.
visibleMessages
=
[
.
.
.
visibleMessages
.
slice
(
0
insertIndex
)
.
.
.
messagesToShow
.
.
.
visibleMessages
.
slice
(
insertIndex
)
]
;
}
if
(
currMessage
.
source
=
=
"
network
"
)
{
openState
.
messagesById
=
(
new
Map
(
messagesById
)
)
.
set
(
action
.
id
{
.
.
.
currMessage
openedOnce
:
true
}
)
;
}
return
openState
;
case
constants
.
MESSAGE_CLOSE
:
const
closeState
=
{
.
.
.
state
}
;
let
messageId
=
action
.
id
;
let
index
=
closeState
.
messagesUiById
.
indexOf
(
messageId
)
;
closeState
.
messagesUiById
.
splice
(
index
1
)
;
closeState
.
messagesUiById
=
[
.
.
.
closeState
.
messagesUiById
]
;
if
(
isGroupType
(
messagesById
.
get
(
messageId
)
.
type
)
)
{
closeState
.
visibleMessages
=
visibleMessages
.
filter
(
id
=
>
getParentGroups
(
messagesById
.
get
(
id
)
.
groupId
groupsById
)
.
includes
(
messageId
)
=
=
=
false
)
;
}
return
closeState
;
case
constants
.
MESSAGE_TABLE_RECEIVE
:
const
{
id
data
}
=
action
;
return
{
.
.
.
state
messagesTableDataById
:
(
new
Map
(
messagesTableDataById
)
)
.
set
(
id
data
)
}
;
case
constants
.
NETWORK_MESSAGE_UPDATE
:
return
{
.
.
.
state
networkMessagesUpdateById
:
{
.
.
.
networkMessagesUpdateById
[
action
.
message
.
id
]
:
action
.
message
}
}
;
case
UPDATE_REQUEST
:
case
constants
.
NETWORK_UPDATE_REQUEST
:
{
let
request
=
networkMessagesUpdateById
[
action
.
id
]
;
if
(
!
request
)
{
return
state
;
}
return
{
.
.
.
state
networkMessagesUpdateById
:
{
.
.
.
networkMessagesUpdateById
[
action
.
id
]
:
{
.
.
.
request
.
.
.
processNetworkUpdates
(
action
.
data
)
}
}
}
;
}
case
constants
.
REMOVED_ACTORS_CLEAR
:
return
{
.
.
.
state
removedActors
:
[
]
}
;
case
constants
.
FILTER_TOGGLE
:
case
constants
.
FILTER_TEXT_SET
:
case
constants
.
FILTERS_CLEAR
:
case
constants
.
DEFAULT_FILTERS_RESET
:
const
messagesToShow
=
[
]
;
const
filtered
=
getDefaultFiltersCounter
(
)
;
messagesById
.
forEach
(
(
message
msgId
)
=
>
{
const
{
visible
cause
}
=
getMessageVisibility
(
message
state
filtersState
)
;
if
(
visible
)
{
messagesToShow
.
push
(
msgId
)
;
}
else
if
(
DEFAULT_FILTERS
.
includes
(
cause
)
)
{
filtered
.
global
=
filtered
.
global
+
1
;
filtered
[
cause
]
=
filtered
[
cause
]
+
1
;
}
}
)
;
return
{
.
.
.
state
visibleMessages
:
messagesToShow
filteredMessagesCount
:
filtered
}
;
}
return
state
;
}
function
getNewCurrentGroup
(
currentGoup
groupsById
)
{
let
newCurrentGroup
=
null
;
if
(
currentGoup
)
{
let
parents
=
groupsById
.
get
(
currentGoup
)
;
if
(
Array
.
isArray
(
parents
)
&
&
parents
.
length
>
0
)
{
newCurrentGroup
=
parents
[
0
]
;
}
}
return
newCurrentGroup
;
}
function
getParentGroups
(
currentGroup
groupsById
)
{
let
groups
=
[
]
;
if
(
currentGroup
)
{
groups
=
[
currentGroup
]
;
let
parentGroups
=
groupsById
.
get
(
currentGroup
)
;
if
(
Array
.
isArray
(
parentGroups
)
&
&
parentGroups
.
length
>
0
)
{
groups
=
groups
.
concat
(
parentGroups
)
;
}
}
return
groups
;
}
function
limitTopLevelMessageCount
(
newState
logLimit
)
{
let
topLevelCount
=
newState
.
groupsById
.
size
=
=
=
0
?
newState
.
messagesById
.
size
:
getToplevelMessageCount
(
newState
)
;
if
(
topLevelCount
<
=
logLimit
)
{
return
newState
;
}
const
removedMessagesId
=
[
]
;
const
removedActors
=
[
]
;
let
visibleMessages
=
[
.
.
.
newState
.
visibleMessages
]
;
let
cleaningGroup
=
false
;
for
(
let
[
id
message
]
of
newState
.
messagesById
)
{
if
(
cleaningGroup
=
=
=
true
&
&
!
message
.
groupId
)
{
cleaningGroup
=
false
;
}
if
(
cleaningGroup
=
=
=
false
&
&
topLevelCount
<
=
logLimit
)
{
break
;
}
if
(
cleaningGroup
=
=
=
false
&
&
newState
.
groupsById
.
has
(
id
)
)
{
cleaningGroup
=
true
;
}
if
(
!
message
.
groupId
)
{
topLevelCount
-
-
;
}
removedMessagesId
.
push
(
id
)
;
removedActors
.
push
(
.
.
.
getAllActorsInMessage
(
message
newState
)
)
;
const
index
=
visibleMessages
.
indexOf
(
id
)
;
if
(
index
>
-
1
)
{
visibleMessages
.
splice
(
index
1
)
;
}
}
if
(
removedActors
.
length
>
0
)
{
newState
.
removedActors
=
newState
.
removedActors
.
concat
(
removedActors
)
;
}
if
(
newState
.
visibleMessages
.
length
>
visibleMessages
.
length
)
{
newState
.
visibleMessages
=
visibleMessages
;
}
const
isInRemovedId
=
id
=
>
removedMessagesId
.
includes
(
id
)
;
const
mapHasRemovedIdKey
=
map
=
>
removedMessagesId
.
some
(
id
=
>
map
.
has
(
id
)
)
;
const
objectHasRemovedIdKey
=
obj
=
>
Object
.
keys
(
obj
)
.
findIndex
(
isInRemovedId
)
!
=
=
-
1
;
const
cleanUpMap
=
map
=
>
{
const
clonedMap
=
new
Map
(
map
)
;
removedMessagesId
.
forEach
(
id
=
>
clonedMap
.
delete
(
id
)
)
;
return
clonedMap
;
}
;
const
cleanUpObject
=
object
=
>
[
.
.
.
Object
.
entries
(
object
)
]
.
reduce
(
(
res
[
id
value
]
)
=
>
{
if
(
!
isInRemovedId
(
id
)
)
{
res
[
id
]
=
value
;
}
return
res
;
}
{
}
)
;
newState
.
messagesById
=
cleanUpMap
(
newState
.
messagesById
)
;
if
(
newState
.
messagesUiById
.
find
(
isInRemovedId
)
)
{
newState
.
messagesUiById
=
newState
.
messagesUiById
.
filter
(
id
=
>
!
isInRemovedId
(
id
)
)
;
}
if
(
mapHasRemovedIdKey
(
newState
.
messagesTableDataById
)
)
{
newState
.
messagesTableDataById
=
cleanUpMap
(
newState
.
messagesTableDataById
)
;
}
if
(
mapHasRemovedIdKey
(
newState
.
groupsById
)
)
{
newState
.
groupsById
=
cleanUpMap
(
newState
.
groupsById
)
;
}
if
(
objectHasRemovedIdKey
(
newState
.
repeatById
)
)
{
newState
.
repeatById
=
cleanUpObject
(
newState
.
repeatById
)
;
}
if
(
objectHasRemovedIdKey
(
newState
.
networkMessagesUpdateById
)
)
{
newState
.
networkMessagesUpdateById
=
cleanUpObject
(
newState
.
networkMessagesUpdateById
)
;
}
return
newState
;
}
function
getAllActorsInMessage
(
message
state
)
{
const
{
parameters
messageText
}
=
message
;
let
actors
=
[
]
;
if
(
Array
.
isArray
(
parameters
)
)
{
message
.
parameters
.
forEach
(
parameter
=
>
{
if
(
parameter
.
actor
)
{
actors
.
push
(
parameter
.
actor
)
;
}
}
)
;
}
if
(
messageText
&
&
messageText
.
actor
)
{
actors
.
push
(
messageText
.
actor
)
;
}
return
actors
;
}
function
getToplevelMessageCount
(
state
)
{
let
count
=
0
;
state
.
messagesById
.
forEach
(
message
=
>
{
if
(
!
message
.
groupId
)
{
count
+
+
;
}
}
)
;
return
count
;
}
function
getMessageVisibility
(
message
messagesState
filtersState
checkGroup
=
true
)
{
if
(
checkGroup
&
&
!
isInOpenedGroup
(
message
messagesState
.
groupsById
messagesState
.
messagesUiById
)
)
{
return
{
visible
:
false
cause
:
"
closedGroup
"
}
;
}
if
(
isUnfilterable
(
message
)
)
{
return
{
visible
:
true
}
;
}
if
(
!
passSearchFilters
(
message
filtersState
)
)
{
return
{
visible
:
false
cause
:
FILTERS
.
TEXT
}
;
}
if
(
!
passLevelFilters
(
message
filtersState
)
)
{
return
{
visible
:
false
cause
:
message
.
level
}
;
}
if
(
!
passCssFilters
(
message
filtersState
)
)
{
return
{
visible
:
false
cause
:
FILTERS
.
CSS
}
;
}
if
(
!
passNetworkFilter
(
message
filtersState
)
)
{
return
{
visible
:
false
cause
:
FILTERS
.
NET
}
;
}
if
(
!
passXhrFilter
(
message
filtersState
)
)
{
return
{
visible
:
false
cause
:
FILTERS
.
NETXHR
}
;
}
return
{
visible
:
true
}
;
}
function
isUnfilterable
(
message
)
{
return
[
MESSAGE_TYPE
.
COMMAND
MESSAGE_TYPE
.
RESULT
MESSAGE_TYPE
.
START_GROUP
MESSAGE_TYPE
.
START_GROUP_COLLAPSED
]
.
includes
(
message
.
type
)
;
}
function
isInOpenedGroup
(
message
groupsById
messagesUI
)
{
return
!
message
.
groupId
|
|
(
!
isGroupClosed
(
message
.
groupId
messagesUI
)
&
&
!
hasClosedParentGroup
(
groupsById
.
get
(
message
.
groupId
)
messagesUI
)
)
;
}
function
hasClosedParentGroup
(
group
messagesUI
)
{
return
group
.
some
(
groupId
=
>
isGroupClosed
(
groupId
messagesUI
)
)
;
}
function
isGroupClosed
(
groupId
messagesUI
)
{
return
messagesUI
.
includes
(
groupId
)
=
=
=
false
;
}
function
passNetworkFilter
(
message
filters
)
{
return
(
message
.
source
!
=
=
MESSAGE_SOURCE
.
NETWORK
|
|
message
.
isXHR
=
=
=
true
|
|
filters
[
FILTERS
.
NET
]
=
=
=
true
)
;
}
function
passXhrFilter
(
message
filters
)
{
return
(
message
.
source
!
=
=
MESSAGE_SOURCE
.
NETWORK
|
|
message
.
isXHR
=
=
=
false
|
|
filters
[
FILTERS
.
NETXHR
]
=
=
=
true
)
;
}
function
passLevelFilters
(
message
filters
)
{
return
(
(
message
.
source
!
=
=
MESSAGE_SOURCE
.
CONSOLE_API
&
&
message
.
source
!
=
=
MESSAGE_SOURCE
.
JAVASCRIPT
)
|
|
filters
[
message
.
level
]
=
=
=
true
)
;
}
function
passCssFilters
(
message
filters
)
{
return
(
message
.
source
!
=
=
MESSAGE_SOURCE
.
CSS
|
|
filters
.
css
=
=
=
true
)
;
}
function
passSearchFilters
(
message
filters
)
{
let
text
=
(
filters
.
text
|
|
"
"
)
.
trim
(
)
;
if
(
!
text
)
{
return
true
;
}
return
(
isTextInParameters
(
text
message
.
parameters
)
|
|
isTextInFrame
(
text
message
.
frame
)
|
|
isTextInNetEvent
(
text
message
.
request
)
|
|
isTextInStackTrace
(
text
message
.
stacktrace
)
|
|
isTextInMessageText
(
text
message
.
messageText
)
|
|
isTextInNotes
(
text
message
.
notes
)
)
;
}
function
isTextInFrame
(
text
frame
)
{
if
(
!
frame
)
{
return
false
;
}
const
{
functionName
line
column
source
}
=
frame
;
const
{
short
}
=
getSourceNames
(
source
)
;
return
{
functionName
?
functionName
+
"
"
:
"
"
}
{
short
}
:
{
line
}
:
{
column
}
.
toLocaleLowerCase
(
)
.
includes
(
text
.
toLocaleLowerCase
(
)
)
;
}
function
isTextInParameters
(
text
parameters
)
{
if
(
!
parameters
)
{
return
false
;
}
text
=
text
.
toLocaleLowerCase
(
)
;
return
getAllProps
(
parameters
)
.
some
(
prop
=
>
(
prop
+
"
"
)
.
toLocaleLowerCase
(
)
.
includes
(
text
)
)
;
}
function
isTextInNetEvent
(
text
request
)
{
if
(
!
request
)
{
return
false
;
}
text
=
text
.
toLocaleLowerCase
(
)
;
let
method
=
request
.
method
.
toLocaleLowerCase
(
)
;
let
url
=
request
.
url
.
toLocaleLowerCase
(
)
;
return
method
.
includes
(
text
)
|
|
url
.
includes
(
text
)
;
}
function
isTextInStackTrace
(
text
stacktrace
)
{
if
(
!
Array
.
isArray
(
stacktrace
)
)
{
return
false
;
}
return
stacktrace
.
some
(
frame
=
>
isTextInFrame
(
text
{
functionName
:
frame
.
functionName
|
|
l10n
.
getStr
(
"
stacktrace
.
anonymousFunction
"
)
source
:
frame
.
filename
lineNumber
:
frame
.
lineNumber
columnNumber
:
frame
.
columnNumber
}
)
)
;
}
function
isTextInMessageText
(
text
messageText
)
{
if
(
!
messageText
)
{
return
false
;
}
return
messageText
.
toLocaleLowerCase
(
)
.
includes
(
text
.
toLocaleLowerCase
(
)
)
;
}
function
isTextInNotes
(
text
notes
)
{
if
(
!
Array
.
isArray
(
notes
)
)
{
return
false
;
}
return
notes
.
some
(
note
=
>
isTextInFrame
(
text
note
.
frame
)
|
|
(
note
.
messageBody
&
&
note
.
messageBody
.
toLocaleLowerCase
(
)
.
includes
(
text
.
toLocaleLowerCase
(
)
)
)
)
;
}
function
getAllProps
(
grips
)
{
let
result
=
grips
.
reduce
(
(
res
grip
)
=
>
{
let
previewItems
=
getGripPreviewItems
(
grip
)
;
let
allProps
=
previewItems
.
length
>
0
?
getAllProps
(
previewItems
)
:
[
]
;
return
[
.
.
.
res
grip
grip
.
class
.
.
.
allProps
]
;
}
[
]
)
;
result
=
result
.
filter
(
grip
=
>
typeof
grip
!
=
"
object
"
&
&
typeof
grip
!
=
"
undefined
"
)
;
return
[
.
.
.
new
Set
(
result
)
]
;
}
function
getDefaultFiltersCounter
(
)
{
const
count
=
DEFAULT_FILTERS
.
reduce
(
(
res
filter
)
=
>
{
res
[
filter
]
=
0
;
return
res
;
}
{
}
)
;
count
.
global
=
0
;
return
count
;
}
exports
.
messages
=
messages
;
