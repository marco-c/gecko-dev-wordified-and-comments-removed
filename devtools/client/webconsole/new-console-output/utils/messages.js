"
use
strict
"
;
const
{
MESSAGE_SOURCE
MESSAGE_TYPE
MESSAGE_LEVEL
CATEGORY_JS
CATEGORY_OUTPUT
CATEGORY_WEBDEV
LEVELS
SEVERITY_LOG
}
=
require
(
"
.
.
/
constants
"
)
;
const
WebConsoleUtils
=
require
(
"
devtools
/
shared
/
webconsole
/
utils
"
)
.
Utils
;
const
STRINGS_URI
=
"
chrome
:
/
/
devtools
/
locale
/
webconsole
.
properties
"
;
const
l10n
=
new
WebConsoleUtils
.
L10n
(
STRINGS_URI
)
;
const
{
ConsoleMessage
}
=
require
(
"
.
.
/
types
"
)
;
let
messageId
=
0
;
function
getNextMessageId
(
)
{
return
"
"
+
messageId
+
+
;
}
function
prepareMessage
(
packet
)
{
if
(
packet
.
source
)
{
return
packet
;
}
return
transformPacket
(
packet
)
;
}
function
transformPacket
(
packet
)
{
if
(
packet
.
_type
)
{
packet
=
convertCachedPacket
(
packet
)
;
}
switch
(
packet
.
type
)
{
case
"
consoleAPICall
"
:
{
let
{
message
}
=
packet
;
let
parameters
=
message
.
arguments
;
let
type
=
message
.
level
;
let
level
=
LEVELS
[
type
]
|
|
MESSAGE_TYPE
.
LOG
;
let
messageText
=
null
;
switch
(
type
)
{
case
"
clear
"
:
parameters
=
[
l10n
.
getStr
(
"
consoleCleared
"
)
]
;
break
;
case
"
count
"
:
type
=
MESSAGE_TYPE
.
LOG
;
level
=
MESSAGE_LEVEL
.
DEBUG
;
let
{
counter
}
=
message
;
let
label
=
counter
.
label
?
counter
.
label
:
l10n
.
getStr
(
"
noCounterLabel
"
)
;
messageText
=
{
label
}
:
{
counter
.
count
}
;
parameters
=
null
;
break
;
}
return
new
ConsoleMessage
(
{
source
:
MESSAGE_SOURCE
.
CONSOLE_API
type
level
parameters
messageText
repeatId
:
getRepeatId
(
message
)
category
:
CATEGORY_WEBDEV
severity
:
level
id
:
getNextMessageId
(
)
}
)
;
}
case
"
pageError
"
:
{
let
{
pageError
}
=
packet
;
let
level
=
MESSAGE_LEVEL
.
ERROR
;
if
(
pageError
.
warning
|
|
pageError
.
strict
)
{
level
=
MESSAGE_LEVEL
.
WARN
;
}
else
if
(
pageError
.
info
)
{
level
=
MESSAGE_LEVEL
.
INFO
;
}
return
new
ConsoleMessage
(
{
source
:
MESSAGE_SOURCE
.
JAVASCRIPT
type
:
MESSAGE_TYPE
.
LOG
messageText
:
pageError
.
errorMessage
repeatId
:
getRepeatId
(
pageError
)
category
:
CATEGORY_JS
severity
:
level
id
:
getNextMessageId
(
)
}
)
;
}
case
"
evaluationResult
"
:
default
:
{
let
{
result
}
=
packet
;
return
new
ConsoleMessage
(
{
source
:
MESSAGE_SOURCE
.
JAVASCRIPT
type
:
MESSAGE_TYPE
.
RESULT
level
:
MESSAGE_LEVEL
.
LOG
parameters
:
result
repeatId
:
getRepeatId
(
result
)
category
:
CATEGORY_OUTPUT
severity
:
SEVERITY_LOG
id
:
getNextMessageId
(
)
}
)
;
}
}
}
function
getRepeatId
(
message
)
{
let
clonedMessage
=
JSON
.
parse
(
JSON
.
stringify
(
message
)
)
;
delete
clonedMessage
.
id
;
delete
clonedMessage
.
timeStamp
;
return
JSON
.
stringify
(
clonedMessage
)
;
}
function
convertCachedPacket
(
packet
)
{
let
convertPacket
=
{
}
;
if
(
packet
.
_type
=
=
=
"
ConsoleAPI
"
)
{
convertPacket
.
message
=
packet
;
convertPacket
.
type
=
"
consoleAPICall
"
;
}
else
if
(
packet
.
_type
=
=
=
"
PageError
"
)
{
convertPacket
.
pageError
=
packet
;
convertPacket
.
type
=
"
pageError
"
;
}
else
{
throw
new
Error
(
"
Unexpected
packet
type
"
)
;
}
return
convertPacket
;
}
exports
.
prepareMessage
=
prepareMessage
;
exports
.
getRepeatId
=
getRepeatId
;
exports
.
l10n
=
l10n
;
