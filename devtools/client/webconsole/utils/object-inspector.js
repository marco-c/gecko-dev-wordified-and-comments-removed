"
use
strict
"
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ObjectClient
=
require
(
"
devtools
/
shared
/
client
/
object
-
client
"
)
;
const
LongStringClient
=
require
(
"
devtools
/
shared
/
client
/
long
-
string
-
client
"
)
;
const
reps
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
"
)
;
const
{
REPS
MODE
}
=
reps
;
const
ObjectInspector
=
createFactory
(
reps
.
ObjectInspector
)
;
const
{
Grip
}
=
REPS
;
function
getObjectInspector
(
grip
serviceContainer
override
=
{
}
)
{
let
onDOMNodeMouseOver
;
let
onDOMNodeMouseOut
;
let
onInspectIconClick
;
if
(
serviceContainer
)
{
onDOMNodeMouseOver
=
serviceContainer
.
highlightDomElement
?
(
object
)
=
>
serviceContainer
.
highlightDomElement
(
object
)
:
null
;
onDOMNodeMouseOut
=
serviceContainer
.
unHighlightDomElement
;
onInspectIconClick
=
serviceContainer
.
openNodeInInspector
?
(
object
e
)
=
>
{
e
.
stopPropagation
(
)
;
serviceContainer
.
openNodeInInspector
(
object
)
;
}
:
null
;
}
const
roots
=
createRootsFromGrip
(
grip
)
;
const
objectInspectorProps
=
{
autoExpandDepth
:
0
mode
:
MODE
.
LONG
roots
createObjectClient
:
object
=
>
new
ObjectClient
(
serviceContainer
.
hudProxy
.
client
object
)
createLongStringClient
:
object
=
>
new
LongStringClient
(
serviceContainer
.
hudProxy
.
client
object
)
releaseActor
:
actor
=
>
{
if
(
!
actor
|
|
!
serviceContainer
.
hudProxy
.
releaseActor
)
{
return
;
}
serviceContainer
.
hudProxy
.
releaseActor
(
actor
)
;
}
onViewSourceInDebugger
:
serviceContainer
.
onViewSourceInDebugger
openLink
:
serviceContainer
.
openLink
}
;
if
(
!
(
typeof
grip
=
=
=
"
string
"
|
|
(
grip
&
&
grip
.
type
=
=
=
"
longString
"
)
)
)
{
Object
.
assign
(
objectInspectorProps
{
onDOMNodeMouseOver
onDOMNodeMouseOut
onInspectIconClick
defaultRep
:
Grip
}
)
;
}
if
(
override
.
autoFocusRoot
)
{
Object
.
assign
(
objectInspectorProps
{
focusedItem
:
roots
[
0
]
}
)
;
}
return
ObjectInspector
(
{
.
.
.
objectInspectorProps
.
.
.
override
}
)
;
}
function
createRootsFromGrip
(
grip
)
{
return
[
{
path
:
(
grip
&
&
grip
.
actor
)
|
|
JSON
.
stringify
(
grip
)
contents
:
{
value
:
grip
}
}
]
;
}
module
.
exports
=
{
getObjectInspector
}
;
