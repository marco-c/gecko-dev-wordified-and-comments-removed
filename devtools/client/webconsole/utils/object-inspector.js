"
use
strict
"
;
const
{
createFactory
createElement
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
loader
.
lazyGetter
(
this
"
REPS
"
function
(
)
{
return
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
index
.
js
"
)
.
REPS
;
}
)
;
loader
.
lazyGetter
(
this
"
MODE
"
function
(
)
{
return
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
index
.
js
"
)
.
MODE
;
}
)
;
loader
.
lazyGetter
(
this
"
ObjectInspector
"
function
(
)
{
const
reps
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
index
.
js
"
)
;
return
createFactory
(
reps
.
objectInspector
.
ObjectInspector
)
;
}
)
;
loader
.
lazyRequireGetter
(
this
"
SmartTrace
"
"
devtools
/
client
/
shared
/
components
/
SmartTrace
"
)
;
loader
.
lazyRequireGetter
(
this
"
LongStringFront
"
"
devtools
/
client
/
fronts
/
string
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ObjectFront
"
"
devtools
/
client
/
fronts
/
object
"
true
)
;
function
getObjectInspector
(
frontOrPrimitiveGrip
serviceContainer
override
=
{
}
)
{
let
onDOMNodeMouseOver
;
let
onDOMNodeMouseOut
;
let
onInspectIconClick
;
if
(
serviceContainer
)
{
onDOMNodeMouseOver
=
serviceContainer
.
highlightDomElement
?
object
=
>
serviceContainer
.
highlightDomElement
(
object
)
:
null
;
onDOMNodeMouseOut
=
serviceContainer
.
unHighlightDomElement
?
object
=
>
serviceContainer
.
unHighlightDomElement
(
object
)
:
null
;
onInspectIconClick
=
serviceContainer
.
openNodeInInspector
?
(
object
e
)
=
>
{
e
.
stopPropagation
(
)
;
serviceContainer
.
openNodeInInspector
(
object
)
;
}
:
null
;
}
const
roots
=
createRoots
(
frontOrPrimitiveGrip
override
.
pathPrefix
)
;
const
objectInspectorProps
=
{
autoExpandDepth
:
0
mode
:
MODE
.
LONG
standalone
:
true
roots
onViewSourceInDebugger
:
serviceContainer
.
onViewSourceInDebugger
recordTelemetryEvent
:
serviceContainer
.
recordTelemetryEvent
openLink
:
serviceContainer
.
openLink
sourceMapURLService
:
serviceContainer
.
sourceMapURLService
customFormat
:
override
.
customFormat
!
=
=
false
setExpanded
:
override
.
setExpanded
initiallyExpanded
:
override
.
initiallyExpanded
queueActorsForCleanup
:
override
.
queueActorsForCleanup
cachedNodes
:
override
.
cachedNodes
urlCropLimit
:
120
renderStacktrace
:
stacktrace
=
>
{
const
attrs
=
{
key
:
"
stacktrace
"
stacktrace
onViewSourceInDebugger
:
serviceContainer
?
serviceContainer
.
onViewSourceInDebugger
|
|
serviceContainer
.
onViewSource
:
null
onViewSource
:
serviceContainer
.
onViewSource
onReady
:
override
.
maybeScrollToBottom
sourceMapURLService
:
serviceContainer
?
serviceContainer
.
sourceMapURLService
:
null
}
;
if
(
serviceContainer
?
.
preventStacktraceInitialRenderDelay
)
{
attrs
.
initialRenderDelay
=
0
;
}
return
createElement
(
SmartTrace
attrs
)
;
}
onDOMNodeMouseOver
onDOMNodeMouseOut
onInspectIconClick
defaultRep
:
REPS
.
Grip
createElement
:
serviceContainer
?
.
createElement
mayUseCustomFormatter
:
true
.
.
.
override
}
;
if
(
override
.
autoFocusRoot
)
{
Object
.
assign
(
objectInspectorProps
{
focusedItem
:
objectInspectorProps
.
roots
[
0
]
}
)
;
}
return
ObjectInspector
(
objectInspectorProps
)
;
}
function
createRoots
(
frontOrPrimitiveGrip
pathPrefix
=
"
"
)
{
const
isFront
=
frontOrPrimitiveGrip
instanceof
ObjectFront
|
|
frontOrPrimitiveGrip
instanceof
LongStringFront
;
const
grip
=
isFront
?
frontOrPrimitiveGrip
.
getGrip
(
)
:
frontOrPrimitiveGrip
;
return
[
{
path
:
{
pathPrefix
}
{
frontOrPrimitiveGrip
?
frontOrPrimitiveGrip
.
actorID
|
|
frontOrPrimitiveGrip
.
actor
:
null
}
contents
:
{
value
:
grip
front
:
isFront
?
frontOrPrimitiveGrip
:
null
}
}
]
;
}
module
.
exports
=
{
getObjectInspector
}
;
