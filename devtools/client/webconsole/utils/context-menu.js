"
use
strict
"
;
const
Menu
=
require
(
"
devtools
/
client
/
framework
/
menu
"
)
;
const
MenuItem
=
require
(
"
devtools
/
client
/
framework
/
menu
-
item
"
)
;
const
{
MESSAGE_SOURCE
}
=
require
(
"
devtools
/
client
/
webconsole
/
constants
"
)
;
const
clipboardHelper
=
require
(
"
devtools
/
shared
/
platform
/
clipboard
"
)
;
const
{
l10n
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
)
;
loader
.
lazyRequireGetter
(
this
"
openContentLink
"
"
devtools
/
client
/
shared
/
link
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getElementText
"
"
devtools
/
client
/
webconsole
/
utils
/
clipboard
"
true
)
;
function
createContextMenu
(
hud
parentNode
{
actor
clipboardText
variableText
message
serviceContainer
openSidebar
rootActorId
executionPoint
toolbox
}
)
{
const
win
=
parentNode
.
ownerDocument
.
defaultView
;
const
selection
=
win
.
getSelection
(
)
;
const
{
source
request
}
=
message
|
|
{
}
;
const
menu
=
new
Menu
(
{
id
:
"
webconsole
-
menu
"
}
)
;
menu
.
append
(
new
MenuItem
(
{
id
:
"
console
-
menu
-
copy
-
url
"
label
:
l10n
.
getStr
(
"
webconsole
.
menu
.
copyURL
.
label
"
)
accesskey
:
l10n
.
getStr
(
"
webconsole
.
menu
.
copyURL
.
accesskey
"
)
visible
:
source
=
=
=
MESSAGE_SOURCE
.
NETWORK
click
:
(
)
=
>
{
if
(
!
request
)
{
return
;
}
clipboardHelper
.
copyString
(
request
.
url
)
;
}
}
)
)
;
if
(
serviceContainer
.
openNetworkPanel
&
&
request
)
{
menu
.
append
(
new
MenuItem
(
{
id
:
"
console
-
menu
-
open
-
in
-
network
-
panel
"
label
:
l10n
.
getStr
(
"
webconsole
.
menu
.
openInNetworkPanel
.
label
"
)
accesskey
:
l10n
.
getStr
(
"
webconsole
.
menu
.
openInNetworkPanel
.
accesskey
"
)
visible
:
source
=
=
=
MESSAGE_SOURCE
.
NETWORK
click
:
(
)
=
>
serviceContainer
.
openNetworkPanel
(
message
.
messageId
)
}
)
)
;
}
menu
.
append
(
new
MenuItem
(
{
id
:
"
console
-
menu
-
open
-
url
"
label
:
l10n
.
getStr
(
"
webconsole
.
menu
.
openURL
.
label
"
)
accesskey
:
l10n
.
getStr
(
"
webconsole
.
menu
.
openURL
.
accesskey
"
)
visible
:
source
=
=
=
MESSAGE_SOURCE
.
NETWORK
click
:
(
)
=
>
{
if
(
!
request
)
{
return
;
}
openContentLink
(
request
.
url
)
;
}
}
)
)
;
menu
.
append
(
new
MenuItem
(
{
id
:
"
console
-
menu
-
store
"
label
:
l10n
.
getStr
(
"
webconsole
.
menu
.
storeAsGlobalVar
.
label
"
)
accesskey
:
l10n
.
getStr
(
"
webconsole
.
menu
.
storeAsGlobalVar
.
accesskey
"
)
disabled
:
!
actor
click
:
(
)
=
>
{
const
evalString
=
{
let
i
=
0
;
while
(
this
.
hasOwnProperty
(
"
temp
"
+
i
)
&
&
i
<
1000
)
{
i
+
+
;
}
this
[
"
temp
"
+
i
]
=
_self
;
"
temp
"
+
i
;
}
;
const
options
=
{
selectedObjectActor
:
actor
}
;
hud
.
jsterm
.
requestEvaluation
(
evalString
options
)
.
then
(
(
res
)
=
>
{
hud
.
jsterm
.
focus
(
)
;
hud
.
jsterm
.
setInputValue
(
res
.
result
)
;
}
)
;
}
}
)
)
;
menu
.
append
(
new
MenuItem
(
{
id
:
"
console
-
menu
-
copy
"
label
:
l10n
.
getStr
(
"
webconsole
.
menu
.
copyMessage
.
label
"
)
accesskey
:
l10n
.
getStr
(
"
webconsole
.
menu
.
copyMessage
.
accesskey
"
)
disabled
:
selection
.
isCollapsed
&
&
!
clipboardText
click
:
(
)
=
>
{
if
(
selection
.
isCollapsed
)
{
clipboardHelper
.
copyString
(
clipboardText
)
;
}
else
{
clipboardHelper
.
copyString
(
selection
.
toString
(
)
)
;
}
}
}
)
)
;
menu
.
append
(
new
MenuItem
(
{
id
:
"
console
-
menu
-
copy
-
object
"
label
:
l10n
.
getStr
(
"
webconsole
.
menu
.
copyObject
.
label
"
)
accesskey
:
l10n
.
getStr
(
"
webconsole
.
menu
.
copyObject
.
accesskey
"
)
disabled
:
(
!
actor
&
&
!
variableText
)
click
:
(
)
=
>
{
if
(
actor
)
{
hud
.
jsterm
.
copyObject
(
_self
{
selectedObjectActor
:
actor
}
)
.
then
(
(
res
)
=
>
{
clipboardHelper
.
copyString
(
res
.
helperResult
.
value
)
;
}
)
;
}
else
{
clipboardHelper
.
copyString
(
variableText
)
;
}
}
}
)
)
;
menu
.
append
(
new
MenuItem
(
{
id
:
"
console
-
menu
-
select
"
label
:
l10n
.
getStr
(
"
webconsole
.
menu
.
selectAll
.
label
"
)
accesskey
:
l10n
.
getStr
(
"
webconsole
.
menu
.
selectAll
.
accesskey
"
)
disabled
:
false
click
:
(
)
=
>
{
const
webconsoleOutput
=
parentNode
.
querySelector
(
"
.
webconsole
-
output
"
)
;
selection
.
selectAllChildren
(
webconsoleOutput
)
;
}
}
)
)
;
menu
.
append
(
new
MenuItem
(
{
id
:
"
console
-
menu
-
export
-
clipboard
"
label
:
l10n
.
getStr
(
"
webconsole
.
menu
.
exportClipboard
.
label
"
)
disabled
:
false
click
:
(
)
=
>
{
const
webconsoleOutput
=
parentNode
.
querySelector
(
"
.
webconsole
-
output
"
)
;
clipboardHelper
.
copyString
(
getElementText
(
webconsoleOutput
)
)
;
}
}
)
)
;
if
(
openSidebar
)
{
menu
.
append
(
new
MenuItem
(
{
id
:
"
console
-
menu
-
open
-
sidebar
"
label
:
l10n
.
getStr
(
"
webconsole
.
menu
.
openInSidebar
.
label
"
)
accesskey
:
l10n
.
getStr
(
"
webconsole
.
menu
.
openInSidebar
.
accesskey
"
)
disabled
:
!
rootActorId
click
:
(
)
=
>
openSidebar
(
message
.
messageId
)
}
)
)
;
}
if
(
executionPoint
)
{
menu
.
append
(
new
MenuItem
(
{
id
:
"
console
-
menu
-
time
-
warp
"
label
:
l10n
.
getStr
(
"
webconsole
.
menu
.
timeWarp
.
label
"
)
disabled
:
false
click
:
(
)
=
>
{
const
threadClient
=
toolbox
.
threadClient
;
threadClient
.
timeWarp
(
executionPoint
)
;
}
}
)
)
;
}
return
menu
;
}
exports
.
createContextMenu
=
createContextMenu
;
