"
use
strict
"
;
const
promise
=
require
(
"
promise
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
var
promises
=
new
Map
(
)
;
var
DataProvider
=
{
hasPendingRequests
:
function
(
)
{
return
promises
.
size
>
0
;
}
requestData
:
function
(
client
actor
method
)
{
let
key
=
actor
+
"
:
"
+
method
;
let
p
=
promises
.
get
(
key
)
;
if
(
p
)
{
return
p
;
}
let
deferred
=
promise
.
defer
(
)
;
let
realMethodName
=
"
get
"
+
method
.
charAt
(
0
)
.
toUpperCase
(
)
+
method
.
slice
(
1
)
;
if
(
!
client
[
realMethodName
]
)
{
return
null
;
}
client
[
realMethodName
]
(
actor
response
=
>
{
promises
.
delete
(
key
)
;
deferred
.
resolve
(
response
)
;
}
)
;
promises
.
set
(
key
deferred
.
promise
)
;
return
deferred
.
promise
;
}
resolveString
:
function
(
client
stringGrip
)
{
let
key
=
stringGrip
.
actor
+
"
:
getString
"
;
let
p
=
promises
.
get
(
key
)
;
if
(
p
)
{
return
p
;
}
p
=
client
.
getString
(
stringGrip
)
.
then
(
result
=
>
{
promises
.
delete
(
key
)
;
return
result
;
}
)
;
promises
.
set
(
key
p
)
;
return
p
;
}
}
;
module
.
exports
=
DataProvider
;
