"
use
strict
"
;
const
TEST_PAGE_URL
=
URL_ROOT
+
"
page_basic
.
html
"
;
const
JSON_XHR_URL
=
URL_ROOT
+
"
test
.
json
"
;
add_task
(
function
*
(
)
{
info
(
"
Test
XHR
Spy
params
started
"
)
;
let
{
hud
}
=
yield
addTestTab
(
TEST_PAGE_URL
)
;
let
netInfoBody
=
yield
executeAndInspectXhr
(
hud
{
method
:
"
GET
"
url
:
JSON_XHR_URL
queryString
:
"
?
foo
=
bar
"
}
)
;
let
tabBody
=
yield
selectNetInfoTab
(
hud
netInfoBody
"
params
"
)
;
let
paramName
=
tabBody
.
querySelector
(
"
.
netInfoParamName
>
span
[
title
=
'
foo
'
]
"
)
;
ok
(
paramName
"
Header
name
must
exist
"
)
;
is
(
paramName
.
textContent
"
foo
"
"
The
param
name
must
have
proper
value
"
)
;
let
paramValue
=
paramName
.
parentNode
.
nextSibling
;
ok
(
paramValue
"
param
value
must
exist
"
)
;
is
(
paramValue
.
textContent
"
bar
"
"
The
param
value
must
have
proper
value
"
)
;
}
)
;
add_task
(
function
*
(
)
{
info
(
"
Test
XHR
Spy
params
started
"
)
;
let
{
hud
}
=
yield
addTestTab
(
TEST_PAGE_URL
)
;
let
netInfoBody
=
yield
executeAndInspectXhr
(
hud
{
method
:
"
GET
"
url
:
JSON_XHR_URL
queryString
:
"
?
box
[
]
=
123
&
box
[
]
=
456
"
}
)
;
let
tabBody
=
yield
selectNetInfoTab
(
hud
netInfoBody
"
params
"
)
;
let
params
=
tabBody
.
querySelectorAll
(
"
.
netInfoParamName
>
span
[
title
=
'
box
[
]
'
]
"
)
;
is
(
params
.
length
2
"
Two
URI
parameters
must
exist
"
)
;
let
values
=
tabBody
.
querySelectorAll
(
"
.
netInfoParamValue
>
code
"
)
;
is
(
values
[
0
]
.
textContent
123
"
First
value
must
match
"
)
;
is
(
values
[
1
]
.
textContent
456
"
Second
value
must
match
"
)
;
}
)
;
