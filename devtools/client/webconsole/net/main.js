"
use
strict
"
;
var
{
utils
:
Cu
}
=
Components
;
const
rootUrl
=
"
resource
:
/
/
devtools
/
client
/
webconsole
/
net
/
"
;
const
require
=
BrowserLoader
(
{
baseURI
:
rootUrl
window
}
)
.
require
;
const
NetRequest
=
require
(
"
.
/
net
-
request
"
)
;
const
{
loadSheet
}
=
require
(
"
sdk
/
stylesheet
/
utils
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
locale
/
netmonitor
.
properties
"
)
;
var
styleSheets
=
[
"
resource
:
/
/
devtools
/
client
/
jsonview
/
css
/
toolbar
.
css
"
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
tree
/
tree
-
view
.
css
"
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
.
css
"
"
resource
:
/
/
devtools
/
client
/
webconsole
/
net
/
net
-
request
.
css
"
"
resource
:
/
/
devtools
/
client
/
webconsole
/
net
/
components
/
size
-
limit
.
css
"
"
resource
:
/
/
devtools
/
client
/
webconsole
/
net
/
components
/
net
-
info
-
body
.
css
"
"
resource
:
/
/
devtools
/
client
/
webconsole
/
net
/
components
/
net
-
info
-
group
.
css
"
"
resource
:
/
/
devtools
/
client
/
webconsole
/
net
/
components
/
net
-
info
-
params
.
css
"
"
resource
:
/
/
devtools
/
client
/
webconsole
/
net
/
components
/
response
-
tab
.
css
"
]
;
styleSheets
.
forEach
(
url
=
>
{
loadSheet
(
this
url
"
author
"
)
;
}
)
;
this
.
Locale
=
{
STR
:
key
=
>
{
try
{
return
L10N
.
getStr
(
key
)
;
}
catch
(
err
)
{
console
.
error
(
key
+
"
:
"
+
err
)
;
}
}
}
;
var
netRequests
=
new
Map
(
)
;
function
onNetworkEvent
(
log
)
{
let
response
=
log
.
response
;
let
netRequest
=
response
.
from
?
netRequests
.
get
(
response
.
from
)
:
null
;
if
(
!
netRequest
&
&
!
log
.
update
)
{
netRequest
=
new
NetRequest
(
log
)
;
netRequests
.
set
(
response
.
actor
netRequest
)
;
}
if
(
!
netRequest
)
{
return
;
}
if
(
log
.
update
)
{
netRequest
.
updateBody
(
response
)
;
}
return
;
}
this
.
NetRequest
=
{
onNetworkEvent
:
onNetworkEvent
}
;
