"
use
strict
"
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
rep
-
utils
"
)
;
const
{
Tabs
TabPanel
}
=
createFactories
(
require
(
"
devtools
/
client
/
shared
/
components
/
tabs
/
tabs
"
)
)
;
const
HeadersTab
=
React
.
createFactory
(
require
(
"
.
/
headers
-
tab
"
)
)
;
const
ResponseTab
=
React
.
createFactory
(
require
(
"
.
/
response
-
tab
"
)
)
;
const
ParamsTab
=
React
.
createFactory
(
require
(
"
.
/
params
-
tab
"
)
)
;
const
CookiesTab
=
React
.
createFactory
(
require
(
"
.
/
cookies
-
tab
"
)
)
;
const
PostTab
=
React
.
createFactory
(
require
(
"
.
/
post
-
tab
"
)
)
;
const
StackTraceTab
=
React
.
createFactory
(
require
(
"
.
/
stacktrace
-
tab
"
)
)
;
const
NetUtils
=
require
(
"
.
.
/
utils
/
net
"
)
;
const
PropTypes
=
React
.
PropTypes
;
var
NetInfoBody
=
React
.
createClass
(
{
propTypes
:
{
tabActive
:
PropTypes
.
number
.
isRequired
actions
:
PropTypes
.
object
.
isRequired
data
:
PropTypes
.
shape
(
{
request
:
PropTypes
.
object
.
isRequired
response
:
PropTypes
.
object
.
isRequired
}
)
}
displayName
:
"
NetInfoBody
"
getDefaultProps
(
)
{
return
{
tabActive
:
1
}
;
}
getInitialState
(
)
{
return
{
data
:
{
request
:
{
}
response
:
{
}
}
tabActive
:
this
.
props
.
tabActive
}
;
}
onTabChanged
(
index
)
{
this
.
setState
(
{
tabActive
:
index
}
)
;
}
hasCookies
(
)
{
let
{
request
response
}
=
this
.
state
.
data
;
return
NetUtils
.
getHeaderValue
(
request
.
headers
"
Cookie
"
)
|
|
NetUtils
.
getHeaderValue
(
response
.
headers
"
Cookie
"
)
;
}
hasStackTrace
(
)
{
let
{
cause
}
=
this
.
state
.
data
;
return
cause
&
&
cause
.
stacktrace
&
&
cause
.
stacktrace
.
length
>
0
;
}
getTabPanels
(
)
{
let
actions
=
this
.
props
.
actions
;
let
data
=
this
.
state
.
data
;
let
{
request
}
=
data
;
let
hasParams
=
request
.
queryString
&
&
request
.
queryString
.
length
;
let
hasPostData
=
request
.
bodySize
>
0
;
let
panels
=
[
]
;
panels
.
push
(
TabPanel
(
{
className
:
"
headers
"
key
:
"
headers
"
title
:
Locale
.
STR
(
"
netRequest
.
headers
"
)
}
HeadersTab
(
{
data
:
data
actions
:
actions
}
)
)
)
;
if
(
hasParams
)
{
panels
.
push
(
TabPanel
(
{
className
:
"
params
"
key
:
"
params
"
title
:
Locale
.
STR
(
"
netRequest
.
params
"
)
}
ParamsTab
(
{
data
:
data
actions
:
actions
}
)
)
)
;
}
if
(
hasPostData
)
{
panels
.
push
(
TabPanel
(
{
className
:
"
post
"
key
:
"
post
"
title
:
Locale
.
STR
(
"
netRequest
.
post
"
)
}
PostTab
(
{
data
:
data
actions
:
actions
}
)
)
)
;
}
panels
.
push
(
TabPanel
(
{
className
:
"
response
"
key
:
"
response
"
title
:
Locale
.
STR
(
"
netRequest
.
response
"
)
}
ResponseTab
(
{
data
:
data
actions
:
actions
}
)
)
)
;
if
(
this
.
hasCookies
(
)
)
{
panels
.
push
(
TabPanel
(
{
className
:
"
cookies
"
key
:
"
cookies
"
title
:
Locale
.
STR
(
"
netRequest
.
cookies
"
)
}
CookiesTab
(
{
data
:
data
actions
:
actions
}
)
)
)
;
}
if
(
this
.
hasStackTrace
(
)
)
{
panels
.
push
(
TabPanel
(
{
className
:
"
stacktrace
-
tab
"
key
:
"
stacktrace
"
title
:
Locale
.
STR
(
"
netRequest
.
callstack
"
)
}
StackTraceTab
(
{
data
:
data
actions
:
actions
}
)
)
)
;
}
return
panels
;
}
render
(
)
{
let
tabActive
=
this
.
state
.
tabActive
;
let
tabPanels
=
this
.
getTabPanels
(
)
;
return
(
Tabs
(
{
tabActive
:
tabActive
onAfterChange
:
this
.
onTabChanged
}
tabPanels
)
)
;
}
}
)
;
module
.
exports
=
NetInfoBody
;
