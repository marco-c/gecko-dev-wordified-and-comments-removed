"
use
strict
"
;
var
Services
=
require
(
"
Services
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
loader
.
lazyRequireGetter
(
this
"
Tools
"
"
devtools
/
client
/
definitions
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
DevToolsClient
"
"
devtools
/
client
/
devtools
-
client
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
l10n
"
"
devtools
/
client
/
webconsole
/
utils
/
l10n
"
)
;
loader
.
lazyRequireGetter
(
this
"
BrowserConsole
"
"
devtools
/
client
/
webconsole
/
browser
-
console
"
)
;
loader
.
lazyRequireGetter
(
this
"
PREFS
"
"
devtools
/
client
/
webconsole
/
constants
"
true
)
;
const
BC_WINDOW_FEATURES
=
"
chrome
titlebar
toolbar
centerscreen
resizable
dialog
=
no
"
;
class
BrowserConsoleManager
{
constructor
(
)
{
this
.
_browserConsole
=
null
;
this
.
_browserConsoleInitializing
=
null
;
this
.
_browerConsoleSessionState
=
false
;
this
.
_devToolsClient
=
null
;
}
storeBrowserConsoleSessionState
(
)
{
this
.
_browerConsoleSessionState
=
!
!
this
.
getBrowserConsole
(
)
;
}
getBrowserConsoleSessionState
(
)
{
return
this
.
_browerConsoleSessionState
;
}
async
openBrowserConsole
(
target
win
)
{
const
hud
=
new
BrowserConsole
(
target
win
win
)
;
this
.
_browserConsole
=
hud
;
await
hud
.
init
(
)
;
return
hud
;
}
async
closeBrowserConsole
(
)
{
if
(
!
this
.
_browserConsole
)
{
return
;
}
await
this
.
_browserConsole
.
destroy
(
)
;
this
.
_browserConsole
=
null
;
await
this
.
_devToolsClient
.
close
(
)
;
this
.
_devToolsClient
=
null
;
}
async
toggleBrowserConsole
(
)
{
if
(
this
.
_browserConsole
)
{
return
this
.
closeBrowserConsole
(
)
;
}
if
(
this
.
_browserConsoleInitializing
)
{
return
this
.
_browserConsoleInitializing
;
}
this
.
_browserConsoleInitializing
=
(
async
(
)
=
>
{
const
target
=
await
this
.
connect
(
)
;
await
target
.
attach
(
)
;
const
win
=
await
this
.
openWindow
(
)
;
const
browserConsole
=
await
this
.
openBrowserConsole
(
target
win
)
;
return
browserConsole
;
}
)
(
)
;
const
browserConsole
=
await
this
.
_browserConsoleInitializing
;
this
.
_browserConsoleInitializing
=
null
;
return
browserConsole
;
}
async
connect
(
)
{
const
loader
=
new
DevToolsLoader
(
{
freshCompartment
:
true
}
)
;
const
{
DevToolsServer
}
=
loader
.
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerActors
(
{
root
:
true
target
:
true
}
)
;
DevToolsServer
.
allowChromeProcess
=
true
;
this
.
_devToolsClient
=
new
DevToolsClient
(
DevToolsServer
.
connectPipe
(
)
)
;
await
this
.
_devToolsClient
.
connect
(
)
;
const
descriptor
=
await
this
.
_devToolsClient
.
mainRoot
.
getMainProcess
(
)
;
return
descriptor
.
getTarget
(
)
;
}
async
openWindow
(
)
{
const
win
=
Services
.
ww
.
openWindow
(
null
Tools
.
webConsole
.
url
"
_blank
"
BC_WINDOW_FEATURES
null
)
;
await
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
DOMContentLoaded
"
resolve
{
once
:
true
}
)
;
}
)
;
win
.
addEventListener
(
"
unload
"
this
.
closeBrowserConsole
.
bind
(
this
)
{
once
:
true
}
)
;
const
fissionSupport
=
Services
.
prefs
.
getBoolPref
(
PREFS
.
FEATURES
.
BROWSER_TOOLBOX_FISSION
)
;
const
title
=
fissionSupport
?
l10n
.
getStr
(
"
multiProcessBrowserConsole
.
title
"
)
:
l10n
.
getStr
(
"
browserConsole
.
title
"
)
;
win
.
document
.
title
=
title
;
return
win
;
}
openBrowserConsoleOrFocus
(
)
{
const
hud
=
this
.
getBrowserConsole
(
)
;
if
(
hud
)
{
hud
.
iframeWindow
.
focus
(
)
;
return
Promise
.
resolve
(
hud
)
;
}
return
this
.
toggleBrowserConsole
(
)
;
}
getBrowserConsole
(
)
{
return
this
.
_browserConsole
;
}
}
exports
.
BrowserConsoleManager
=
new
BrowserConsoleManager
(
)
;
