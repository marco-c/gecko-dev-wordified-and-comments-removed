"
use
strict
"
;
const
{
CommandsFactory
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
commands
/
commands
-
factory
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
Tools
"
"
resource
:
/
/
devtools
/
client
/
definitions
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
l10n
"
"
resource
:
/
/
devtools
/
client
/
webconsole
/
utils
/
l10n
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
BrowserConsole
"
"
resource
:
/
/
devtools
/
client
/
webconsole
/
browser
-
console
.
js
"
)
;
const
BC_WINDOW_FEATURES
=
"
chrome
titlebar
toolbar
centerscreen
resizable
dialog
=
no
"
;
class
BrowserConsoleManager
{
constructor
(
)
{
this
.
_browserConsole
=
null
;
this
.
_browserConsoleInitializing
=
null
;
this
.
_browerConsoleSessionState
=
false
;
}
storeBrowserConsoleSessionState
(
)
{
this
.
_browerConsoleSessionState
=
!
!
this
.
getBrowserConsole
(
)
;
}
getBrowserConsoleSessionState
(
)
{
return
this
.
_browerConsoleSessionState
;
}
async
openBrowserConsole
(
win
)
{
const
hud
=
new
BrowserConsole
(
this
.
commands
win
win
)
;
this
.
_browserConsole
=
hud
;
await
hud
.
init
(
)
;
return
hud
;
}
async
closeBrowserConsole
(
)
{
if
(
!
this
.
_browserConsole
)
{
return
;
}
await
this
.
_browserConsole
.
destroy
(
)
;
this
.
_browserConsole
=
null
;
await
this
.
commands
.
destroy
(
)
;
this
.
commands
=
null
;
}
async
toggleBrowserConsole
(
)
{
if
(
this
.
_browserConsole
)
{
return
this
.
closeBrowserConsole
(
)
;
}
if
(
this
.
_browserConsoleInitializing
)
{
return
this
.
_browserConsoleInitializing
;
}
this
.
_browserConsoleInitializing
=
(
async
(
)
=
>
{
this
.
commands
=
await
CommandsFactory
.
forBrowserConsole
(
)
;
const
win
=
await
this
.
openWindow
(
)
;
const
browserConsole
=
await
this
.
openBrowserConsole
(
win
)
;
return
browserConsole
;
}
)
(
)
;
const
browserConsole
=
await
this
.
_browserConsoleInitializing
;
this
.
_browserConsoleInitializing
=
null
;
return
browserConsole
;
}
async
openWindow
(
)
{
const
win
=
Services
.
ww
.
openWindow
(
null
Tools
.
webConsole
.
url
"
_blank
"
BC_WINDOW_FEATURES
null
)
;
await
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
DOMContentLoaded
"
resolve
{
once
:
true
}
)
;
}
)
;
win
.
addEventListener
(
"
unload
"
this
.
closeBrowserConsole
.
bind
(
this
)
{
once
:
true
}
)
;
this
.
updateWindowTitle
(
win
)
;
return
win
;
}
openBrowserConsoleOrFocus
(
)
{
const
hud
=
this
.
getBrowserConsole
(
)
;
if
(
hud
)
{
hud
.
iframeWindow
.
focus
(
)
;
return
Promise
.
resolve
(
hud
)
;
}
return
this
.
toggleBrowserConsole
(
)
;
}
getBrowserConsole
(
)
{
return
this
.
_browserConsole
;
}
updateWindowTitle
(
win
)
{
let
title
;
const
mode
=
Services
.
prefs
.
getCharPref
(
"
devtools
.
browsertoolbox
.
scope
"
null
)
;
if
(
mode
=
=
"
everything
"
)
{
title
=
l10n
.
getStr
(
"
multiProcessBrowserConsole
.
title
"
)
;
}
else
if
(
mode
=
=
"
parent
-
process
"
)
{
title
=
l10n
.
getStr
(
"
parentProcessBrowserConsole
.
title
"
)
;
}
else
{
throw
new
Error
(
"
Unsupported
mode
:
"
+
mode
)
;
}
win
.
document
.
title
=
title
;
}
}
exports
.
BrowserConsoleManager
=
new
BrowserConsoleManager
(
)
;
