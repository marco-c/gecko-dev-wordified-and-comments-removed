"
use
strict
"
;
const
{
isGroupType
l10n
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
)
;
const
constants
=
require
(
"
devtools
/
client
/
webconsole
/
constants
"
)
;
const
{
DEFAULT_FILTERS
FILTERS
MESSAGE_TYPE
MESSAGE_SOURCE
}
=
constants
;
loader
.
lazyRequireGetter
(
this
"
getGripPreviewItems
"
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getUnicodeUrlPath
"
"
devtools
/
client
/
shared
/
unicode
-
url
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getSourceNames
"
"
devtools
/
client
/
shared
/
source
-
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
createWarningGroupMessage
"
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
isWarningGroup
"
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getWarningGroupType
"
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getDescriptorValue
"
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getParentWarningGroupMessageId
"
"
devtools
/
client
/
webconsole
/
utils
/
messages
"
true
)
;
const
{
UPDATE_REQUEST
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
const
{
processNetworkUpdates
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
request
-
utils
"
)
;
const
MessageState
=
overrides
=
>
Object
.
freeze
(
Object
.
assign
(
{
messagesById
:
new
Map
(
)
messagesPayloadById
:
new
Map
(
)
visibleMessages
:
[
]
filteredMessagesCount
:
getDefaultFiltersCounter
(
)
messagesUiById
:
[
]
groupsById
:
new
Map
(
)
currentGroup
:
null
warningGroupsById
:
new
Map
(
)
frontsToRelease
:
[
]
repeatById
:
{
}
networkMessagesUpdateById
:
{
}
lastMessageId
:
null
}
overrides
)
)
;
function
cloneState
(
state
)
{
return
{
messagesById
:
new
Map
(
state
.
messagesById
)
visibleMessages
:
[
.
.
.
state
.
visibleMessages
]
filteredMessagesCount
:
{
.
.
.
state
.
filteredMessagesCount
}
messagesUiById
:
[
.
.
.
state
.
messagesUiById
]
messagesPayloadById
:
new
Map
(
state
.
messagesPayloadById
)
groupsById
:
new
Map
(
state
.
groupsById
)
currentGroup
:
state
.
currentGroup
frontsToRelease
:
[
.
.
.
state
.
frontsToRelease
]
repeatById
:
{
.
.
.
state
.
repeatById
}
networkMessagesUpdateById
:
{
.
.
.
state
.
networkMessagesUpdateById
}
warningGroupsById
:
new
Map
(
state
.
warningGroupsById
)
lastMessageId
:
state
.
lastMessageId
}
;
}
function
addMessage
(
newMessage
state
filtersState
prefsState
uiState
)
{
const
{
messagesById
groupsById
currentGroup
repeatById
}
=
state
;
if
(
newMessage
.
type
=
=
=
constants
.
MESSAGE_TYPE
.
NULL_MESSAGE
)
{
return
state
;
}
if
(
newMessage
.
type
=
=
=
constants
.
MESSAGE_TYPE
.
END_GROUP
)
{
state
.
currentGroup
=
getNewCurrentGroup
(
currentGroup
groupsById
)
;
return
state
;
}
const
lastMessage
=
messagesById
.
get
(
state
.
lastMessageId
)
;
if
(
lastMessage
&
&
newMessage
.
allowRepeating
&
&
messagesById
.
size
>
0
)
{
if
(
lastMessage
.
repeatId
=
=
=
newMessage
.
repeatId
&
&
lastMessage
.
groupId
=
=
=
currentGroup
)
{
state
.
repeatById
[
lastMessage
.
id
]
=
(
repeatById
[
lastMessage
.
id
]
|
|
1
)
+
1
;
return
state
;
}
}
state
.
lastMessageId
=
newMessage
.
id
;
const
parentGroups
=
getParentGroups
(
currentGroup
groupsById
)
;
if
(
!
isWarningGroup
(
newMessage
)
)
{
newMessage
.
groupId
=
currentGroup
;
newMessage
.
indent
=
parentGroups
.
length
;
}
const
removedIds
=
[
]
;
const
warningGroupType
=
getWarningGroupType
(
newMessage
)
;
if
(
prefsState
.
groupWarnings
&
&
warningGroupType
!
=
=
null
)
{
const
warningGroupMessageId
=
getParentWarningGroupMessageId
(
newMessage
)
;
if
(
!
state
.
messagesById
.
has
(
warningGroupMessageId
)
)
{
const
groupMessage
=
createWarningGroupMessage
(
warningGroupMessageId
warningGroupType
newMessage
)
;
state
=
addMessage
(
groupMessage
state
filtersState
prefsState
uiState
)
;
}
state
.
warningGroupsById
.
get
(
warningGroupMessageId
)
.
push
(
newMessage
.
id
)
;
if
(
!
state
.
visibleMessages
.
includes
(
warningGroupMessageId
)
&
&
getMessageVisibility
(
state
.
messagesById
.
get
(
warningGroupMessageId
)
{
messagesState
:
state
filtersState
prefsState
uiState
}
)
.
visible
)
{
const
firstWarningMessageId
=
state
.
warningGroupsById
.
get
(
warningGroupMessageId
)
[
0
]
;
const
firstWarningMessage
=
state
.
messagesById
.
get
(
firstWarningMessageId
)
;
const
outermostGroupId
=
getOutermostGroup
(
firstWarningMessage
groupsById
)
;
const
groupIndex
=
state
.
visibleMessages
.
indexOf
(
outermostGroupId
)
;
const
warningMessageIndex
=
state
.
visibleMessages
.
indexOf
(
firstWarningMessageId
)
;
if
(
groupIndex
>
-
1
)
{
if
(
warningMessageIndex
>
-
1
)
{
state
.
visibleMessages
.
splice
(
warningMessageIndex
1
)
;
}
state
.
visibleMessages
.
splice
(
groupIndex
0
warningGroupMessageId
)
;
}
else
{
state
.
visibleMessages
.
splice
(
warningMessageIndex
1
warningGroupMessageId
)
;
}
}
}
if
(
isWarningGroup
(
newMessage
)
)
{
state
.
warningGroupsById
.
set
(
newMessage
.
id
[
]
)
;
}
const
addedMessage
=
Object
.
freeze
(
newMessage
)
;
state
.
messagesById
.
set
(
newMessage
.
id
addedMessage
)
;
if
(
newMessage
.
type
=
=
=
"
trace
"
)
{
state
.
messagesUiById
.
push
(
newMessage
.
id
)
;
}
else
if
(
isGroupType
(
newMessage
.
type
)
)
{
state
.
currentGroup
=
newMessage
.
id
;
state
.
groupsById
.
set
(
newMessage
.
id
parentGroups
)
;
if
(
newMessage
.
type
=
=
=
constants
.
MESSAGE_TYPE
.
START_GROUP
)
{
state
.
messagesUiById
.
push
(
newMessage
.
id
)
;
}
}
const
{
visible
cause
}
=
getMessageVisibility
(
addedMessage
{
messagesState
:
state
filtersState
prefsState
uiState
}
)
;
if
(
visible
)
{
const
warningGroupId
=
getParentWarningGroupMessageId
(
newMessage
)
;
if
(
warningGroupId
&
&
state
.
visibleMessages
.
includes
(
warningGroupId
)
)
{
let
index
=
state
.
visibleMessages
.
indexOf
(
warningGroupId
)
;
const
messagesInWarningGroup
=
state
.
warningGroupsById
.
get
(
warningGroupId
)
;
for
(
let
i
=
messagesInWarningGroup
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
const
idx
=
state
.
visibleMessages
.
indexOf
(
messagesInWarningGroup
[
i
]
)
;
if
(
idx
>
-
1
)
{
index
=
idx
;
break
;
}
}
state
.
visibleMessages
.
splice
(
index
+
1
0
newMessage
.
id
)
;
}
else
{
state
.
visibleMessages
.
push
(
newMessage
.
id
)
;
}
maybeSortVisibleMessages
(
state
false
)
;
}
else
if
(
DEFAULT_FILTERS
.
includes
(
cause
)
)
{
state
.
filteredMessagesCount
.
global
+
+
;
state
.
filteredMessagesCount
[
cause
]
+
+
;
}
if
(
newMessage
.
source
=
=
"
network
"
)
{
state
.
networkMessagesUpdateById
[
newMessage
.
actor
]
=
newMessage
;
}
return
removeMessagesFromState
(
state
removedIds
)
;
}
function
messages
(
state
=
MessageState
(
)
action
filtersState
prefsState
uiState
)
{
const
{
messagesById
messagesPayloadById
messagesUiById
networkMessagesUpdateById
groupsById
visibleMessages
}
=
state
;
const
{
logLimit
}
=
prefsState
;
let
newState
;
switch
(
action
.
type
)
{
case
constants
.
MESSAGES_ADD
:
const
list
=
[
]
;
let
prunableCount
=
0
;
let
lastMessageRepeatId
=
-
1
;
for
(
let
i
=
action
.
messages
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
const
message
=
action
.
messages
[
i
]
;
if
(
!
message
.
groupId
&
&
!
isGroupType
(
message
.
type
)
&
&
message
.
type
!
=
=
MESSAGE_TYPE
.
END_GROUP
)
{
if
(
message
.
repeatId
!
=
=
lastMessageRepeatId
)
{
prunableCount
+
+
;
}
if
(
prunableCount
<
=
logLimit
|
|
message
.
repeatId
=
=
lastMessageRepeatId
)
{
list
.
unshift
(
action
.
messages
[
i
]
)
;
}
else
{
break
;
}
}
else
{
list
.
unshift
(
message
)
;
}
lastMessageRepeatId
=
message
.
repeatId
;
}
newState
=
cloneState
(
state
)
;
list
.
forEach
(
message
=
>
{
newState
=
addMessage
(
message
newState
filtersState
prefsState
uiState
)
;
}
)
;
return
limitTopLevelMessageCount
(
newState
logLimit
)
;
case
constants
.
MESSAGES_CLEAR
:
return
MessageState
(
{
frontsToRelease
:
[
.
.
.
state
.
messagesById
.
values
(
)
]
.
reduce
(
(
res
msg
)
=
>
{
res
.
push
(
.
.
.
getAllFrontsInMessage
(
msg
)
)
;
return
res
;
}
[
]
)
}
)
;
case
constants
.
PRIVATE_MESSAGES_CLEAR
:
{
const
removedIds
=
[
]
;
for
(
const
[
id
message
]
of
messagesById
)
{
if
(
message
.
private
=
=
=
true
)
{
removedIds
.
push
(
id
)
;
}
}
if
(
removedIds
.
length
=
=
=
0
)
{
return
state
;
}
return
removeMessagesFromState
(
{
.
.
.
state
}
removedIds
)
;
}
case
constants
.
MESSAGE_OPEN
:
const
openState
=
{
.
.
.
state
}
;
openState
.
messagesUiById
=
[
.
.
.
messagesUiById
action
.
id
]
;
const
currMessage
=
messagesById
.
get
(
action
.
id
)
;
if
(
isGroupType
(
currMessage
.
type
)
|
|
isWarningGroup
(
currMessage
)
)
{
const
messagesToShow
=
[
.
.
.
messagesById
]
.
reduce
(
(
res
[
id
message
]
)
=
>
{
if
(
!
visibleMessages
.
includes
(
message
.
id
)
&
&
(
(
isWarningGroup
(
currMessage
)
&
&
!
!
getWarningGroupType
(
message
)
)
|
|
(
isGroupType
(
currMessage
.
type
)
&
&
getParentGroups
(
message
.
groupId
groupsById
)
.
includes
(
action
.
id
)
)
)
&
&
getMessageVisibility
(
message
{
messagesState
:
openState
filtersState
prefsState
uiState
checkGroup
:
message
.
groupId
!
=
=
action
.
id
}
)
.
visible
)
{
res
.
push
(
id
)
;
}
return
res
;
}
[
]
)
;
const
insertIndex
=
visibleMessages
.
indexOf
(
action
.
id
)
+
1
;
openState
.
visibleMessages
=
[
.
.
.
visibleMessages
.
slice
(
0
insertIndex
)
.
.
.
messagesToShow
.
.
.
visibleMessages
.
slice
(
insertIndex
)
]
;
}
if
(
currMessage
.
source
=
=
"
network
"
)
{
openState
.
messagesById
=
new
Map
(
messagesById
)
.
set
(
action
.
id
{
.
.
.
currMessage
openedOnce
:
true
}
)
;
}
return
openState
;
case
constants
.
MESSAGE_CLOSE
:
const
closeState
=
{
.
.
.
state
}
;
const
messageId
=
action
.
id
;
const
index
=
closeState
.
messagesUiById
.
indexOf
(
messageId
)
;
closeState
.
messagesUiById
.
splice
(
index
1
)
;
closeState
.
messagesUiById
=
[
.
.
.
closeState
.
messagesUiById
]
;
if
(
isGroupType
(
messagesById
.
get
(
messageId
)
.
type
)
)
{
closeState
.
visibleMessages
=
visibleMessages
.
filter
(
(
id
i
arr
)
=
>
{
const
message
=
messagesById
.
get
(
id
)
;
const
warningGroupMessage
=
messagesById
.
get
(
getParentWarningGroupMessageId
(
message
)
)
;
if
(
shouldGroupWarningMessages
(
warningGroupMessage
closeState
prefsState
)
)
{
return
arr
.
includes
(
id
)
;
}
const
parentGroups
=
getParentGroups
(
message
.
groupId
groupsById
)
;
return
parentGroups
.
includes
(
messageId
)
=
=
=
false
;
}
)
;
}
else
if
(
isWarningGroup
(
messagesById
.
get
(
messageId
)
)
)
{
const
groupMessages
=
closeState
.
warningGroupsById
.
get
(
messageId
)
;
closeState
.
visibleMessages
=
visibleMessages
.
filter
(
id
=
>
!
groupMessages
.
includes
(
id
)
)
;
}
return
closeState
;
case
constants
.
MESSAGE_UPDATE_PAYLOAD
:
return
{
.
.
.
state
messagesPayloadById
:
new
Map
(
messagesPayloadById
)
.
set
(
action
.
id
action
.
data
)
}
;
case
constants
.
NETWORK_MESSAGE_UPDATE
:
return
{
.
.
.
state
networkMessagesUpdateById
:
{
.
.
.
networkMessagesUpdateById
[
action
.
message
.
id
]
:
action
.
message
}
}
;
case
UPDATE_REQUEST
:
case
constants
.
NETWORK_UPDATE_REQUEST
:
{
const
request
=
networkMessagesUpdateById
[
action
.
id
]
;
if
(
!
request
)
{
return
state
;
}
return
{
.
.
.
state
networkMessagesUpdateById
:
{
.
.
.
networkMessagesUpdateById
[
action
.
id
]
:
{
.
.
.
request
.
.
.
processNetworkUpdates
(
action
.
data
request
)
}
}
}
;
}
case
constants
.
FRONTS_TO_RELEASE_CLEAR
:
return
{
.
.
.
state
frontsToRelease
:
[
]
}
;
case
constants
.
WARNING_GROUPS_TOGGLE
:
if
(
!
prefsState
.
groupWarnings
&
&
state
.
warningGroupsById
.
size
=
=
=
0
)
{
return
state
;
}
let
needSort
=
false
;
const
messageEntries
=
state
.
messagesById
.
entries
(
)
;
for
(
const
[
msgId
message
]
of
messageEntries
)
{
const
warningGroupType
=
getWarningGroupType
(
message
)
;
if
(
warningGroupType
)
{
const
warningGroupMessageId
=
getParentWarningGroupMessageId
(
message
)
;
if
(
!
state
.
messagesById
.
has
(
warningGroupMessageId
)
)
{
const
groupMessage
=
createWarningGroupMessage
(
warningGroupMessageId
warningGroupType
message
)
;
state
=
addMessage
(
groupMessage
state
filtersState
prefsState
uiState
)
;
}
const
warningGroup
=
state
.
warningGroupsById
.
get
(
warningGroupMessageId
)
;
if
(
warningGroup
&
&
!
warningGroup
.
includes
(
msgId
)
)
{
warningGroup
.
push
(
msgId
)
;
}
needSort
=
true
;
}
}
if
(
!
needSort
)
{
return
state
;
}
return
setVisibleMessages
(
{
messagesState
:
state
filtersState
prefsState
uiState
forceTimestampSort
:
!
prefsState
.
groupWarnings
}
)
;
case
constants
.
FILTER_TOGGLE
:
case
constants
.
FILTER_TEXT_SET
:
case
constants
.
FILTERS_CLEAR
:
case
constants
.
DEFAULT_FILTERS_RESET
:
case
constants
.
SHOW_CONTENT_MESSAGES_TOGGLE
:
return
setVisibleMessages
(
{
messagesState
:
state
filtersState
prefsState
uiState
}
)
;
}
return
state
;
}
function
setVisibleMessages
(
{
messagesState
filtersState
prefsState
uiState
forceTimestampSort
=
false
}
)
{
const
{
messagesById
}
=
messagesState
;
const
messagesToShow
=
[
]
;
const
filtered
=
getDefaultFiltersCounter
(
)
;
messagesById
.
forEach
(
(
message
msgId
)
=
>
{
const
{
visible
cause
}
=
getMessageVisibility
(
message
{
messagesState
filtersState
prefsState
uiState
}
)
;
if
(
visible
)
{
messagesToShow
.
push
(
msgId
)
;
}
else
if
(
DEFAULT_FILTERS
.
includes
(
cause
)
)
{
filtered
.
global
=
filtered
.
global
+
1
;
filtered
[
cause
]
=
filtered
[
cause
]
+
1
;
}
}
)
;
const
newState
=
{
.
.
.
messagesState
visibleMessages
:
messagesToShow
filteredMessagesCount
:
filtered
}
;
maybeSortVisibleMessages
(
newState
prefsState
.
groupWarnings
forceTimestampSort
)
;
return
newState
;
}
function
getNewCurrentGroup
(
currentGroup
groupsById
ignoredIds
=
[
]
)
{
if
(
!
currentGroup
)
{
return
null
;
}
const
parents
=
groupsById
.
get
(
currentGroup
)
;
if
(
Array
.
isArray
(
parents
)
&
&
parents
.
length
>
0
)
{
if
(
ignoredIds
.
includes
(
parents
[
0
]
)
)
{
return
getNewCurrentGroup
(
parents
[
0
]
groupsById
ignoredIds
)
;
}
return
parents
[
0
]
;
}
return
null
;
}
function
getParentGroups
(
currentGroup
groupsById
)
{
let
groups
=
[
]
;
if
(
currentGroup
)
{
groups
=
[
currentGroup
]
;
const
parentGroups
=
groupsById
.
get
(
currentGroup
)
;
if
(
Array
.
isArray
(
parentGroups
)
&
&
parentGroups
.
length
>
0
)
{
groups
=
groups
.
concat
(
parentGroups
)
;
}
}
return
groups
;
}
function
getOutermostGroup
(
message
groupsById
)
{
const
groups
=
getParentGroups
(
message
.
groupId
groupsById
)
;
if
(
groups
.
length
=
=
=
0
)
{
return
null
;
}
return
groups
[
groups
.
length
-
1
]
;
}
function
limitTopLevelMessageCount
(
newState
logLimit
)
{
let
topLevelCount
=
newState
.
groupsById
.
size
=
=
=
0
?
newState
.
messagesById
.
size
:
getToplevelMessageCount
(
newState
)
;
if
(
topLevelCount
<
=
logLimit
)
{
return
newState
;
}
const
removedMessagesId
=
[
]
;
let
cleaningGroup
=
false
;
for
(
const
[
id
message
]
of
newState
.
messagesById
)
{
if
(
cleaningGroup
=
=
=
true
&
&
!
message
.
groupId
)
{
cleaningGroup
=
false
;
}
if
(
cleaningGroup
=
=
=
false
&
&
topLevelCount
<
=
logLimit
)
{
break
;
}
if
(
cleaningGroup
=
=
=
false
&
&
newState
.
groupsById
.
has
(
id
)
)
{
cleaningGroup
=
true
;
}
if
(
!
message
.
groupId
)
{
topLevelCount
-
-
;
}
removedMessagesId
.
push
(
id
)
;
}
return
removeMessagesFromState
(
newState
removedMessagesId
)
;
}
function
removeMessagesFromState
(
state
removedMessagesIds
)
{
if
(
!
Array
.
isArray
(
removedMessagesIds
)
|
|
removedMessagesIds
.
length
=
=
=
0
)
{
return
state
;
}
const
frontsToRelease
=
[
]
;
const
visibleMessages
=
[
.
.
.
state
.
visibleMessages
]
;
removedMessagesIds
.
forEach
(
id
=
>
{
const
index
=
visibleMessages
.
indexOf
(
id
)
;
if
(
index
>
-
1
)
{
visibleMessages
.
splice
(
index
1
)
;
}
frontsToRelease
.
push
(
.
.
.
getAllFrontsInMessage
(
state
.
messagesById
.
get
(
id
)
)
)
;
}
)
;
if
(
state
.
visibleMessages
.
length
>
visibleMessages
.
length
)
{
state
.
visibleMessages
=
visibleMessages
;
}
if
(
frontsToRelease
.
length
>
0
)
{
state
.
frontsToRelease
=
state
.
frontsToRelease
.
concat
(
frontsToRelease
)
;
}
const
isInRemovedId
=
id
=
>
removedMessagesIds
.
includes
(
id
)
;
const
mapHasRemovedIdKey
=
map
=
>
removedMessagesIds
.
some
(
id
=
>
map
.
has
(
id
)
)
;
const
objectHasRemovedIdKey
=
obj
=
>
Object
.
keys
(
obj
)
.
findIndex
(
isInRemovedId
)
!
=
=
-
1
;
const
cleanUpMap
=
map
=
>
{
const
clonedMap
=
new
Map
(
map
)
;
removedMessagesIds
.
forEach
(
id
=
>
clonedMap
.
delete
(
id
)
)
;
return
clonedMap
;
}
;
const
cleanUpObject
=
object
=
>
[
.
.
.
Object
.
entries
(
object
)
]
.
reduce
(
(
res
[
id
value
]
)
=
>
{
if
(
!
isInRemovedId
(
id
)
)
{
res
[
id
]
=
value
;
}
return
res
;
}
{
}
)
;
state
.
messagesById
=
cleanUpMap
(
state
.
messagesById
)
;
if
(
state
.
messagesUiById
.
find
(
isInRemovedId
)
)
{
state
.
messagesUiById
=
state
.
messagesUiById
.
filter
(
id
=
>
!
isInRemovedId
(
id
)
)
;
}
if
(
isInRemovedId
(
state
.
currentGroup
)
)
{
state
.
currentGroup
=
getNewCurrentGroup
(
state
.
currentGroup
state
.
groupsById
removedMessagesIds
)
;
}
if
(
mapHasRemovedIdKey
(
state
.
messagesPayloadById
)
)
{
state
.
messagesPayloadById
=
cleanUpMap
(
state
.
messagesPayloadById
)
;
}
if
(
mapHasRemovedIdKey
(
state
.
groupsById
)
)
{
state
.
groupsById
=
cleanUpMap
(
state
.
groupsById
)
;
}
if
(
mapHasRemovedIdKey
(
state
.
groupsById
)
)
{
state
.
groupsById
=
cleanUpMap
(
state
.
groupsById
)
;
}
if
(
objectHasRemovedIdKey
(
state
.
repeatById
)
)
{
state
.
repeatById
=
cleanUpObject
(
state
.
repeatById
)
;
}
if
(
objectHasRemovedIdKey
(
state
.
networkMessagesUpdateById
)
)
{
state
.
networkMessagesUpdateById
=
cleanUpObject
(
state
.
networkMessagesUpdateById
)
;
}
return
state
;
}
function
getAllFrontsInMessage
(
message
)
{
const
{
parameters
messageText
}
=
message
;
const
fronts
=
[
]
;
const
isFront
=
p
=
>
p
&
&
typeof
p
.
release
=
=
=
"
function
"
;
if
(
Array
.
isArray
(
parameters
)
)
{
message
.
parameters
.
forEach
(
parameter
=
>
{
if
(
isFront
(
parameter
)
)
{
fronts
.
push
(
parameter
)
;
}
}
)
;
}
if
(
isFront
(
messageText
)
)
{
fronts
.
push
(
messageText
)
;
}
return
fronts
;
}
function
getToplevelMessageCount
(
state
)
{
let
count
=
0
;
state
.
messagesById
.
forEach
(
message
=
>
{
if
(
!
message
.
groupId
)
{
count
+
+
;
}
}
)
;
return
count
;
}
function
getMessageVisibility
(
message
{
messagesState
filtersState
prefsState
uiState
checkGroup
=
true
checkParentWarningGroupVisibility
=
true
}
)
{
if
(
!
uiState
.
showContentMessages
&
&
message
.
chromeContext
=
=
=
false
&
&
message
.
type
!
=
=
MESSAGE_TYPE
.
COMMAND
&
&
message
.
type
!
=
=
MESSAGE_TYPE
.
RESULT
)
{
return
{
visible
:
false
cause
:
"
contentMessage
"
}
;
}
const
warningGroupMessageId
=
getParentWarningGroupMessageId
(
message
)
;
const
parentWarningGroupMessage
=
messagesState
.
messagesById
.
get
(
warningGroupMessageId
)
;
if
(
checkGroup
&
&
!
isInOpenedGroup
(
message
messagesState
.
groupsById
messagesState
.
messagesUiById
)
&
&
!
shouldGroupWarningMessages
(
parentWarningGroupMessage
messagesState
prefsState
)
)
{
return
{
visible
:
false
cause
:
"
closedGroup
"
}
;
}
if
(
isWarningGroup
(
message
)
)
{
if
(
!
shouldGroupWarningMessages
(
message
messagesState
prefsState
)
)
{
return
{
visible
:
false
cause
:
"
warningGroupHeuristicNotMet
"
}
;
}
if
(
!
filtersState
[
FILTERS
.
WARN
]
)
{
return
{
visible
:
false
}
;
}
const
childrenMessages
=
messagesState
.
warningGroupsById
.
get
(
message
.
id
)
;
const
hasVisibleChild
=
childrenMessages
&
&
childrenMessages
.
some
(
id
=
>
{
const
child
=
messagesState
.
messagesById
.
get
(
id
)
;
if
(
!
child
)
{
return
false
;
}
const
{
visible
cause
}
=
getMessageVisibility
(
child
{
messagesState
filtersState
prefsState
uiState
checkParentWarningGroupVisibility
:
false
}
)
;
return
visible
&
&
cause
!
=
=
"
visibleWarningGroup
"
;
}
)
;
if
(
hasVisibleChild
)
{
return
{
visible
:
true
cause
:
"
visibleChild
"
}
;
}
}
if
(
parentWarningGroupMessage
&
&
shouldGroupWarningMessages
(
parentWarningGroupMessage
messagesState
prefsState
)
&
&
!
messagesState
.
messagesUiById
.
includes
(
warningGroupMessageId
)
)
{
return
{
visible
:
false
cause
:
"
closedWarningGroup
"
}
;
}
const
parentVisibility
=
parentWarningGroupMessage
&
&
checkParentWarningGroupVisibility
?
getMessageVisibility
(
parentWarningGroupMessage
{
messagesState
filtersState
prefsState
uiState
checkGroup
checkParentWarningGroupVisibility
}
)
:
null
;
if
(
parentVisibility
&
&
parentVisibility
.
visible
&
&
parentVisibility
.
cause
!
=
=
"
visibleChild
"
)
{
return
{
visible
:
true
cause
:
"
visibleWarningGroup
"
}
;
}
if
(
isUnfilterable
(
message
)
)
{
return
{
visible
:
true
}
;
}
if
(
!
passLevelFilters
(
message
filtersState
)
)
{
return
{
visible
:
false
cause
:
message
.
level
}
;
}
if
(
!
passCssFilters
(
message
filtersState
)
)
{
return
{
visible
:
false
cause
:
FILTERS
.
CSS
}
;
}
if
(
!
passNetworkFilter
(
message
filtersState
)
)
{
return
{
visible
:
false
cause
:
FILTERS
.
NET
}
;
}
if
(
!
passXhrFilter
(
message
filtersState
)
)
{
return
{
visible
:
false
cause
:
FILTERS
.
NETXHR
}
;
}
if
(
!
passSearchFilters
(
message
filtersState
)
)
{
return
{
visible
:
false
cause
:
FILTERS
.
TEXT
}
;
}
return
{
visible
:
true
}
;
}
function
isUnfilterable
(
message
)
{
return
[
MESSAGE_TYPE
.
COMMAND
MESSAGE_TYPE
.
RESULT
MESSAGE_TYPE
.
START_GROUP
MESSAGE_TYPE
.
START_GROUP_COLLAPSED
MESSAGE_TYPE
.
NAVIGATION_MARKER
]
.
includes
(
message
.
type
)
;
}
function
isInOpenedGroup
(
message
groupsById
messagesUI
)
{
return
(
!
message
.
groupId
|
|
(
!
isGroupClosed
(
message
.
groupId
messagesUI
)
&
&
!
hasClosedParentGroup
(
groupsById
.
get
(
message
.
groupId
)
messagesUI
)
)
)
;
}
function
hasClosedParentGroup
(
group
messagesUI
)
{
return
group
.
some
(
groupId
=
>
isGroupClosed
(
groupId
messagesUI
)
)
;
}
function
isGroupClosed
(
groupId
messagesUI
)
{
return
messagesUI
.
includes
(
groupId
)
=
=
=
false
;
}
function
passNetworkFilter
(
message
filters
)
{
return
(
message
.
source
!
=
=
MESSAGE_SOURCE
.
NETWORK
|
|
message
.
isXHR
=
=
=
true
|
|
filters
[
FILTERS
.
NET
]
=
=
=
true
)
;
}
function
passXhrFilter
(
message
filters
)
{
return
(
message
.
source
!
=
=
MESSAGE_SOURCE
.
NETWORK
|
|
message
.
isXHR
=
=
=
false
|
|
filters
[
FILTERS
.
NETXHR
]
=
=
=
true
)
;
}
function
passLevelFilters
(
message
filters
)
{
return
(
(
message
.
source
!
=
=
MESSAGE_SOURCE
.
CONSOLE_API
&
&
message
.
source
!
=
=
MESSAGE_SOURCE
.
JAVASCRIPT
)
|
|
filters
[
message
.
level
]
=
=
=
true
)
;
}
function
passCssFilters
(
message
filters
)
{
return
message
.
source
!
=
=
MESSAGE_SOURCE
.
CSS
|
|
filters
.
css
=
=
=
true
;
}
function
passSearchFilters
(
message
filters
)
{
const
trimmed
=
(
filters
.
text
|
|
"
"
)
.
trim
(
)
.
toLocaleLowerCase
(
)
;
const
exclude
=
trimmed
.
startsWith
(
"
-
"
)
;
const
term
=
exclude
?
trimmed
.
slice
(
1
)
:
trimmed
;
let
regex
;
if
(
term
.
startsWith
(
"
/
"
)
&
&
term
.
endsWith
(
"
/
"
)
&
&
term
.
length
>
2
)
{
try
{
regex
=
new
RegExp
(
term
.
slice
(
1
-
1
)
"
im
"
)
;
}
catch
(
e
)
{
}
}
const
matchStr
=
regex
?
str
=
>
regex
.
test
(
str
)
:
str
=
>
str
.
toLocaleLowerCase
(
)
.
includes
(
term
)
;
if
(
!
term
)
{
return
true
;
}
const
matched
=
isTextInParameters
(
matchStr
message
.
parameters
)
|
|
isTextInFrame
(
matchStr
message
.
frame
)
|
|
isTextInNetEvent
(
matchStr
message
.
request
)
|
|
isTextInStackTrace
(
matchStr
message
.
stacktrace
)
|
|
isTextInMessageText
(
matchStr
message
.
messageText
)
|
|
isTextInNotes
(
matchStr
message
.
notes
)
|
|
isTextInPrefix
(
matchStr
message
.
prefix
)
;
return
matched
?
!
exclude
:
exclude
;
}
function
isTextInFrame
(
matchStr
frame
)
{
if
(
!
frame
)
{
return
false
;
}
const
{
functionName
line
column
source
}
=
frame
;
const
{
short
}
=
getSourceNames
(
source
)
;
const
unicodeShort
=
getUnicodeUrlPath
(
short
)
;
const
str
=
{
functionName
?
functionName
+
"
"
:
"
"
}
{
unicodeShort
}
:
{
line
}
:
{
column
}
;
return
matchStr
(
str
)
;
}
function
isTextInParameters
(
matchStr
parameters
)
{
if
(
!
parameters
)
{
return
false
;
}
return
parameters
.
some
(
parameter
=
>
isTextInParameter
(
matchStr
parameter
)
)
;
}
function
isTextInParameter
(
matchStr
parameter
)
{
const
paramGrip
=
parameter
&
&
parameter
.
getGrip
?
parameter
.
getGrip
(
)
:
parameter
;
if
(
paramGrip
&
&
paramGrip
.
class
&
&
matchStr
(
paramGrip
.
class
)
)
{
return
true
;
}
const
parameterType
=
typeof
parameter
;
if
(
parameterType
!
=
=
"
object
"
&
&
parameterType
!
=
=
"
undefined
"
)
{
const
str
=
paramGrip
+
"
"
;
if
(
matchStr
(
str
)
)
{
return
true
;
}
}
const
previewItems
=
getGripPreviewItems
(
paramGrip
)
;
for
(
const
item
of
previewItems
)
{
if
(
isTextInParameter
(
matchStr
item
)
)
{
return
true
;
}
}
if
(
paramGrip
&
&
paramGrip
.
ownProperties
)
{
for
(
const
[
key
desc
]
of
Object
.
entries
(
paramGrip
.
ownProperties
)
)
{
if
(
matchStr
(
key
)
)
{
return
true
;
}
if
(
isTextInParameter
(
matchStr
getDescriptorValue
(
desc
)
)
)
{
return
true
;
}
}
}
return
false
;
}
function
isTextInNetEvent
(
matchStr
request
)
{
if
(
!
request
)
{
return
false
;
}
const
method
=
request
.
method
;
const
url
=
request
.
url
;
return
matchStr
(
method
)
|
|
matchStr
(
url
)
;
}
function
isTextInStackTrace
(
matchStr
stacktrace
)
{
if
(
!
Array
.
isArray
(
stacktrace
)
)
{
return
false
;
}
return
stacktrace
.
some
(
frame
=
>
isTextInFrame
(
matchStr
{
functionName
:
frame
.
functionName
|
|
l10n
.
getStr
(
"
stacktrace
.
anonymousFunction
"
)
source
:
frame
.
filename
lineNumber
:
frame
.
lineNumber
columnNumber
:
frame
.
columnNumber
}
)
)
;
}
function
isTextInMessageText
(
matchStr
messageText
)
{
if
(
!
messageText
)
{
return
false
;
}
if
(
typeof
messageText
=
=
=
"
string
"
)
{
return
matchStr
(
messageText
)
;
}
const
grip
=
messageText
&
&
messageText
.
getGrip
?
messageText
.
getGrip
(
)
:
messageText
;
if
(
grip
&
&
grip
.
type
=
=
=
"
longString
"
)
{
return
matchStr
(
grip
.
initial
)
;
}
return
true
;
}
function
isTextInNotes
(
matchStr
notes
)
{
if
(
!
Array
.
isArray
(
notes
)
)
{
return
false
;
}
return
notes
.
some
(
note
=
>
isTextInFrame
(
matchStr
note
.
frame
)
|
|
(
note
.
messageBody
&
&
matchStr
(
note
.
messageBody
)
)
)
;
}
function
isTextInPrefix
(
matchStr
prefix
)
{
if
(
!
prefix
)
{
return
false
;
}
return
matchStr
(
{
prefix
}
:
)
;
}
function
getDefaultFiltersCounter
(
)
{
const
count
=
DEFAULT_FILTERS
.
reduce
(
(
res
filter
)
=
>
{
res
[
filter
]
=
0
;
return
res
;
}
{
}
)
;
count
.
global
=
0
;
return
count
;
}
function
maybeSortVisibleMessages
(
state
sortWarningGroupMessage
=
false
timeStampSort
=
false
)
{
if
(
state
.
warningGroupsById
.
size
>
0
&
&
sortWarningGroupMessage
)
{
function
getNaturalOrder
(
messageA
messageB
)
{
const
aFirst
=
-
1
;
const
bFirst
=
1
;
if
(
messageA
.
timeStamp
=
=
=
messageB
.
timeStamp
&
&
!
Number
.
isNaN
(
parseInt
(
messageA
.
id
10
)
)
&
&
!
Number
.
isNaN
(
parseInt
(
messageB
.
id
10
)
)
)
{
return
parseInt
(
messageA
.
id
10
)
<
parseInt
(
messageB
.
id
10
)
?
aFirst
:
bFirst
;
}
return
messageA
.
timeStamp
<
messageB
.
timeStamp
?
aFirst
:
bFirst
;
}
state
.
visibleMessages
.
sort
(
(
a
b
)
=
>
{
const
messageA
=
state
.
messagesById
.
get
(
a
)
;
const
messageB
=
state
.
messagesById
.
get
(
b
)
;
const
warningGroupIdA
=
getParentWarningGroupMessageId
(
messageA
)
;
const
warningGroupIdB
=
getParentWarningGroupMessageId
(
messageB
)
;
const
warningGroupA
=
state
.
messagesById
.
get
(
warningGroupIdA
)
;
const
warningGroupB
=
state
.
messagesById
.
get
(
warningGroupIdB
)
;
const
aFirst
=
-
1
;
const
bFirst
=
1
;
if
(
(
warningGroupA
&
&
warningGroupB
)
|
|
(
!
warningGroupA
&
&
!
warningGroupB
)
)
{
return
getNaturalOrder
(
messageA
messageB
)
;
}
if
(
warningGroupA
)
{
if
(
warningGroupIdA
=
=
=
messageB
.
id
)
{
return
bFirst
;
}
return
getNaturalOrder
(
warningGroupA
messageB
)
;
}
if
(
warningGroupB
)
{
if
(
warningGroupIdB
=
=
=
messageA
.
id
)
{
return
aFirst
;
}
return
getNaturalOrder
(
messageA
warningGroupB
)
;
}
return
0
;
}
)
;
}
if
(
timeStampSort
)
{
state
.
visibleMessages
.
sort
(
(
a
b
)
=
>
{
const
messageA
=
state
.
messagesById
.
get
(
a
)
;
const
messageB
=
state
.
messagesById
.
get
(
b
)
;
return
messageA
.
timeStamp
<
messageB
.
timeStamp
?
-
1
:
1
;
}
)
;
}
}
function
shouldGroupWarningMessages
(
warningGroupMessage
messagesState
prefsState
)
{
if
(
!
warningGroupMessage
)
{
return
false
;
}
if
(
!
prefsState
.
groupWarnings
)
{
return
false
;
}
const
warningGroup
=
messagesState
.
warningGroupsById
.
get
(
warningGroupMessage
.
id
)
;
if
(
!
warningGroup
|
|
!
Array
.
isArray
(
warningGroup
)
)
{
return
false
;
}
return
warningGroup
.
length
>
1
;
}
exports
.
messages
=
messages
;
