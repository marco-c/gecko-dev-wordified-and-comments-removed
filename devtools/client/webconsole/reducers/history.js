"
use
strict
"
;
const
{
APPEND_TO_HISTORY
CLEAR_HISTORY
HISTORY_LOADED
UPDATE_HISTORY_POSITION
HISTORY_BACK
HISTORY_FORWARD
}
=
require
(
"
devtools
/
client
/
webconsole
/
constants
"
)
;
function
getInitialState
(
)
{
return
{
entries
:
[
]
position
:
undefined
originalUserValue
:
null
}
;
}
function
history
(
state
=
getInitialState
(
)
action
prefsState
)
{
switch
(
action
.
type
)
{
case
APPEND_TO_HISTORY
:
return
appendToHistory
(
state
prefsState
action
.
expression
)
;
case
CLEAR_HISTORY
:
return
clearHistory
(
state
)
;
case
HISTORY_LOADED
:
return
historyLoaded
(
state
action
.
entries
)
;
case
UPDATE_HISTORY_POSITION
:
return
updateHistoryPosition
(
state
action
.
direction
action
.
expression
)
;
}
return
state
;
}
function
appendToHistory
(
state
prefsState
expression
)
{
state
=
{
.
.
.
state
}
;
state
.
entries
=
[
.
.
.
state
.
entries
]
;
if
(
expression
.
trim
(
)
!
=
state
.
entries
[
state
.
entries
.
length
-
1
]
)
{
state
.
entries
.
push
(
expression
)
;
}
if
(
state
.
entries
.
length
>
prefsState
.
historyCount
)
{
state
.
entries
.
splice
(
0
state
.
entries
.
length
-
prefsState
.
historyCount
)
;
}
state
.
position
=
state
.
entries
.
length
;
state
.
originalUserValue
=
null
;
return
state
;
}
function
clearHistory
(
state
)
{
return
getInitialState
(
)
;
}
function
historyLoaded
(
state
entries
)
{
const
newEntries
=
[
.
.
.
entries
.
.
.
state
.
entries
]
;
return
{
.
.
.
state
entries
:
newEntries
position
:
newEntries
.
length
originalUserValue
:
null
}
;
}
function
updateHistoryPosition
(
state
direction
expression
)
{
if
(
direction
=
=
HISTORY_BACK
)
{
if
(
state
.
position
<
=
0
)
{
return
state
;
}
state
=
{
.
.
.
state
}
;
if
(
state
.
position
=
=
state
.
entries
.
length
)
{
state
.
originalUserValue
=
expression
|
|
"
"
;
}
state
.
position
-
-
;
}
else
if
(
direction
=
=
HISTORY_FORWARD
)
{
if
(
state
.
position
>
=
state
.
entries
.
length
)
{
return
state
;
}
state
=
{
.
.
.
state
position
:
state
.
position
+
1
}
;
}
return
state
;
}
exports
.
history
=
history
;
