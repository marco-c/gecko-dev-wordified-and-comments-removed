"
use
strict
"
;
const
WebConsole
=
require
(
"
devtools
/
client
/
webconsole
/
webconsole
"
)
;
const
{
Utils
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
"
)
;
loader
.
lazyRequireGetter
(
this
"
Telemetry
"
"
devtools
/
client
/
shared
/
telemetry
"
)
;
loader
.
lazyRequireGetter
(
this
"
BrowserConsoleManager
"
"
devtools
/
client
/
webconsole
/
browser
-
console
-
manager
"
true
)
;
class
BrowserConsole
extends
WebConsole
{
#
bcInitializer
=
null
;
#
bcDestroyer
=
null
;
#
telemetry
;
constructor
(
commands
iframeWindow
chromeWindow
)
{
super
(
null
commands
iframeWindow
chromeWindow
true
)
;
this
.
#
telemetry
=
new
Telemetry
(
)
;
}
init
(
)
{
if
(
this
.
#
bcInitializer
)
{
return
this
.
#
bcInitializer
;
}
this
.
#
bcInitializer
=
(
async
(
)
=
>
{
ShutdownObserver
.
init
(
)
;
this
.
#
telemetry
.
toolOpened
(
"
browserconsole
"
-
1
this
)
;
await
super
.
init
(
false
)
;
const
id
=
Utils
.
supportsString
(
this
.
hudId
)
;
Services
.
obs
.
notifyObservers
(
id
"
web
-
console
-
created
"
)
;
}
)
(
)
;
return
this
.
#
bcInitializer
;
}
destroy
(
)
{
if
(
this
.
#
bcDestroyer
)
{
return
this
.
#
bcDestroyer
;
}
this
.
#
bcDestroyer
=
(
async
(
)
=
>
{
this
.
#
telemetry
.
toolClosed
(
"
browserconsole
"
-
1
this
)
;
this
.
commands
.
targetCommand
.
destroy
(
)
;
await
super
.
destroy
(
)
;
await
this
.
currentTarget
.
destroy
(
)
;
this
.
chromeWindow
.
close
(
)
;
}
)
(
)
;
return
this
.
#
bcDestroyer
;
}
updateWindowTitle
(
)
{
BrowserConsoleManager
.
updateWindowTitle
(
this
.
chromeWindow
)
;
}
}
var
ShutdownObserver
=
{
_initialized
:
false
init
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
Services
.
obs
.
addObserver
(
this
"
quit
-
application
-
granted
"
)
;
this
.
_initialized
=
true
;
}
observe
(
message
topic
)
{
if
(
topic
=
=
"
quit
-
application
-
granted
"
)
{
BrowserConsoleManager
.
storeBrowserConsoleSessionState
(
)
;
this
.
uninit
(
)
;
}
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
"
quit
-
application
-
granted
"
)
;
}
}
;
module
.
exports
=
BrowserConsole
;
