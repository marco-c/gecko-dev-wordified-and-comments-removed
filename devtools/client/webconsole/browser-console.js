"
use
strict
"
;
var
Services
=
require
(
"
Services
"
)
;
var
WebConsole
=
require
(
"
devtools
/
client
/
webconsole
/
webconsole
"
)
;
loader
.
lazyRequireGetter
(
this
"
Telemetry
"
"
devtools
/
client
/
shared
/
telemetry
"
)
;
class
BrowserConsole
extends
WebConsole
{
constructor
(
target
iframeWindow
chromeWindow
hudService
fissionSupport
=
false
)
{
super
(
target
iframeWindow
chromeWindow
hudService
true
fissionSupport
)
;
this
.
_telemetry
=
new
Telemetry
(
)
;
this
.
_bcInitializer
=
null
;
this
.
_bcDestroyer
=
null
;
}
init
(
)
{
if
(
this
.
_bcInitializer
)
{
return
this
.
_bcInitializer
;
}
ShutdownObserver
.
init
(
this
.
hudService
)
;
const
window
=
this
.
iframeWindow
;
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
this
.
destroy
(
)
;
}
{
once
:
true
}
)
;
this
.
_telemetry
.
toolOpened
(
"
browserconsole
"
-
1
this
)
;
this
.
_bcInitializer
=
super
.
init
(
)
;
return
this
.
_bcInitializer
;
}
destroy
(
)
{
if
(
this
.
_bcDestroyer
)
{
return
this
.
_bcDestroyer
;
}
this
.
_bcDestroyer
=
(
async
(
)
=
>
{
this
.
_telemetry
.
toolClosed
(
"
browserconsole
"
-
1
this
)
;
await
super
.
destroy
(
)
;
await
this
.
target
.
destroy
(
)
;
this
.
hudService
.
_browserConsoleID
=
null
;
this
.
chromeWindow
.
close
(
)
;
}
)
(
)
;
return
this
.
_bcDestroyer
;
}
}
var
ShutdownObserver
=
{
_initialized
:
false
init
(
hudService
)
{
if
(
this
.
_initialized
)
{
return
;
}
Services
.
obs
.
addObserver
(
this
"
quit
-
application
-
granted
"
)
;
this
.
_initialized
=
true
;
this
.
hudService
=
hudService
;
}
observe
(
message
topic
)
{
if
(
topic
=
=
"
quit
-
application
-
granted
"
)
{
this
.
hudService
.
storeBrowserConsoleSessionState
(
)
;
this
.
uninit
(
)
;
}
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
"
quit
-
application
-
granted
"
)
;
}
}
;
module
.
exports
=
BrowserConsole
;
