"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
Web
Console
network
"
+
"
logging
tests
"
;
const
TEST_NETWORK_REQUEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
test
/
"
+
"
test
-
network
-
request
.
html
"
;
var
hud
;
function
test
(
)
{
loadTab
(
TEST_URI
)
.
then
(
(
tab
)
=
>
{
HUDService
.
openBrowserConsoleOrFocus
(
)
.
then
(
aHud
=
>
{
hud
=
aHud
;
HUDService
.
lastFinishedRequest
.
callback
=
testResponse
;
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
TEST_NETWORK_REQUEST_URI
)
;
}
)
;
}
)
;
}
function
testResponse
(
request
)
{
hud
.
ui
.
webConsoleClient
.
getResponseContent
(
request
.
actor
function
(
contentPacket
)
{
hud
.
ui
.
webConsoleClient
.
getRequestPostData
(
request
.
actor
function
(
postDataPacket
)
{
ok
(
request
"
Page
load
was
logged
"
)
;
is
(
request
.
request
.
url
TEST_NETWORK_REQUEST_URI
"
Logged
network
entry
is
page
load
"
)
;
is
(
request
.
request
.
method
"
GET
"
"
Method
is
correct
"
)
;
ok
(
!
postDataPacket
.
postData
.
text
"
No
request
body
was
stored
"
)
;
ok
(
postDataPacket
.
postDataDiscarded
"
Request
body
was
discarded
"
)
;
ok
(
!
contentPacket
.
content
.
text
"
No
response
body
was
stored
"
)
;
ok
(
contentPacket
.
contentDiscarded
|
|
request
.
fromCache
"
Response
body
was
discarded
or
response
came
from
the
cache
"
)
;
executeSoon
(
finishTest
)
;
}
)
;
}
)
;
}
