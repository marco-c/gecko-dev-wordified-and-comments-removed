"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf8
test
for
console
output
-
05
"
;
const
{
ELLIPSIS
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
var
testDate
=
-
310435200000
;
var
inputTests
=
[
{
input
:
"
/
foo
?
b
*
\
\
s
\
"
ar
/
igym
"
output
:
"
/
foo
?
b
*
\
\
s
\
"
ar
/
gimy
"
printOutput
:
"
/
foo
?
b
*
\
\
s
\
"
ar
/
gimy
"
inspectable
:
true
}
{
input
:
"
null
"
output
:
"
null
"
}
{
input
:
"
undefined
"
output
:
"
undefined
"
}
{
input
:
"
true
"
output
:
"
true
"
}
{
input
:
"
new
Boolean
(
false
)
"
output
:
"
Boolean
{
false
}
"
printOutput
:
"
false
"
inspectable
:
true
variablesViewLabel
:
"
Boolean
{
false
}
"
}
{
input
:
"
new
Date
(
"
+
testDate
+
"
)
"
output
:
"
Date
"
+
(
new
Date
(
testDate
)
)
.
toISOString
(
)
printOutput
:
(
new
Date
(
testDate
)
)
.
toString
(
)
inspectable
:
true
}
{
input
:
"
new
Date
(
'
test
'
)
"
output
:
"
Invalid
Date
"
printOutput
:
"
Invalid
Date
"
inspectable
:
true
variablesViewLabel
:
"
Invalid
Date
"
}
{
input
:
"
new
Number
(
43
)
"
output
:
"
Number
{
43
}
"
printOutput
:
"
43
"
inspectable
:
true
variablesViewLabel
:
"
Number
{
43
}
"
}
{
input
:
"
new
String
(
'
hello
'
)
"
output
:
/
String
{
"
hello
"
6
more
.
*
}
/
printOutput
:
"
hello
"
inspectable
:
true
variablesViewLabel
:
"
String
"
}
{
input
:
"
(
function
(
)
{
var
s
=
new
String
(
'
hello
'
)
;
s
.
whatever
=
23
;
"
+
"
return
s
;
}
)
(
)
"
output
:
/
String
{
"
hello
"
whatever
:
23
6
more
.
*
}
/
printOutput
:
"
hello
"
inspectable
:
true
variablesViewLabel
:
"
String
"
}
{
input
:
"
(
function
(
)
{
var
s
=
new
String
(
'
hello
'
)
;
s
[
8
]
=
'
x
'
;
"
+
"
return
s
;
}
)
(
)
"
output
:
/
String
{
"
hello
"
8
:
"
x
"
6
more
.
*
}
/
printOutput
:
"
hello
"
inspectable
:
true
variablesViewLabel
:
"
String
"
}
{
input
:
"
new
Promise
(
function
(
)
{
}
)
"
output
:
'
Promise
{
<
state
>
:
"
pending
"
}
'
printOutput
:
"
[
object
Promise
]
"
inspectable
:
true
variablesViewLabel
:
"
Promise
"
}
{
input
:
"
(
function
(
)
{
var
p
=
new
Promise
(
function
(
)
{
}
)
;
"
+
"
p
.
foo
=
1
;
return
p
;
}
(
)
)
"
output
:
'
Promise
{
<
state
>
:
"
pending
"
foo
:
1
}
'
printOutput
:
"
[
object
Promise
]
"
inspectable
:
true
variablesViewLabel
:
"
Promise
"
}
{
input
:
"
new
Object
(
{
1
:
'
this
\
\
nis
\
\
nsupposed
\
\
nto
\
\
nbe
\
\
na
\
\
nvery
"
+
"
\
\
nlong
\
\
nstring
\
\
n
shown
\
\
non
\
\
na
\
\
nsingle
\
\
nline
'
"
+
"
2
:
'
a
shorter
string
'
3
:
100
}
)
"
output
:
'
[
<
1
empty
slot
>
"
this
is
supposed
to
be
a
very
long
'
+
ELLIPSIS
+
'
"
"
a
shorter
string
"
100
]
'
printOutput
:
"
[
object
Object
]
"
inspectable
:
true
variablesViewLabel
:
"
Object
[
4
]
"
}
{
input
:
"
new
Proxy
(
{
a
:
1
}
[
1
2
3
]
)
"
output
:
'
Proxy
{
<
target
>
:
Object
<
handler
>
:
Array
[
3
]
}
'
printOutput
:
"
[
object
Object
]
"
inspectable
:
true
variablesViewLabel
:
"
Proxy
"
}
]
;
function
test
(
)
{
requestLongerTimeout
(
2
)
;
Task
.
spawn
(
function
*
(
)
{
let
{
tab
}
=
yield
loadTab
(
TEST_URI
)
;
let
hud
=
yield
openConsole
(
tab
)
;
return
checkOutputForInputs
(
hud
inputTests
)
;
}
)
.
then
(
finishUp
)
;
}
function
finishUp
(
)
{
inputTests
=
testDate
=
null
;
finishTest
(
)
;
}
