"
use
strict
"
;
const
TEST_FILE
=
"
test
-
network
-
request
.
html
"
;
const
TEST_PATH
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
browser
/
"
;
const
TEST_URI
=
TEST_PATH
+
TEST_FILE
;
registerCleanupFunction
(
async
function
(
)
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
)
;
add_task
(
async
function
task
(
)
{
await
pushPref
(
"
devtools
.
webconsole
.
filter
.
net
"
false
)
;
await
pushPref
(
"
devtools
.
webconsole
.
filter
.
netxhr
"
true
)
;
await
openNewTabAndToolbox
(
TEST_URI
"
netmonitor
"
)
;
const
currentTab
=
gBrowser
.
selectedTab
;
const
target
=
await
TargetFactory
.
forTab
(
currentTab
)
;
const
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
const
monitor
=
toolbox
.
getCurrentPanel
(
)
;
const
netReady
=
monitor
.
panelWin
.
api
.
once
(
"
NetMonitor
:
PayloadReady
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
content
.
wrappedJSObject
.
testXhrGet
(
)
;
}
)
;
info
(
"
XHR
executed
"
)
;
await
netReady
;
info
(
"
NetMonitor
:
PayloadReady
received
"
)
;
const
{
hud
}
=
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
const
xhrUrl
=
TEST_PATH
+
"
test
-
data
.
json
"
;
const
messageNode
=
await
waitFor
(
(
)
=
>
findMessage
(
hud
xhrUrl
)
)
;
const
urlNode
=
messageNode
.
querySelector
(
"
.
url
"
)
;
info
(
"
Network
message
found
.
"
)
;
const
onReady
=
new
Promise
(
resolve
=
>
{
function
onPayloadReady
(
)
{
hud
.
ui
.
off
(
"
network
-
request
-
payload
-
ready
"
onPayloadReady
)
;
resolve
(
)
;
}
hud
.
ui
.
on
(
"
network
-
request
-
payload
-
ready
"
onPayloadReady
)
;
}
)
;
urlNode
.
click
(
)
;
await
onReady
;
info
(
"
network
-
request
-
payload
-
ready
received
"
)
;
await
testNetworkMessage
(
messageNode
)
;
await
waitForLazyRequests
(
toolbox
)
;
}
)
;
async
function
testNetworkMessage
(
messageNode
)
{
const
headersTab
=
messageNode
.
querySelector
(
"
#
headers
-
tab
"
)
;
ok
(
headersTab
"
Headers
tab
is
available
"
)
;
await
waitUntil
(
(
)
=
>
messageNode
.
querySelector
(
"
#
headers
-
panel
.
headers
-
overview
"
)
)
;
}
