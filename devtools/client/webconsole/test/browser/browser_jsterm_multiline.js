"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
test
/
browser
/
test
-
console
.
html
"
;
const
SHOULD_ENTER_MULTILINE
=
[
{
input
:
"
function
foo
(
)
{
"
}
{
input
:
"
var
a
=
1
"
}
{
input
:
"
var
a
=
1
;
"
shiftKey
:
true
}
{
input
:
"
function
foo
(
)
{
}
"
shiftKey
:
true
}
{
input
:
"
function
"
}
{
input
:
"
(
x
)
=
>
"
}
{
input
:
"
let
b
=
{
"
}
{
input
:
"
let
a
=
[
"
}
{
input
:
"
{
"
}
{
input
:
"
{
bob
:
3343
"
}
{
input
:
"
function
x
(
y
=
"
}
{
input
:
"
Array
.
from
(
"
}
{
input
:
"
{
2
}
"
shiftKey
:
true
}
]
;
const
SHOULD_EXECUTE
=
[
{
input
:
"
function
foo
(
)
{
}
"
}
{
input
:
"
var
a
=
1
;
"
}
{
input
:
"
function
foo
(
)
{
var
a
=
1
;
}
"
}
{
input
:
'
"
asdf
"
'
}
{
input
:
"
99
+
3
"
}
{
input
:
"
1
2
3
"
}
{
input
:
"
function
f
(
x
)
{
let
y
=
1
}
"
}
{
input
:
"
function
f
(
x
=
)
{
"
}
{
input
:
"
{
2
}
"
}
]
;
add_task
(
async
function
(
)
{
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
for
(
const
{
input
shiftKey
}
of
SHOULD_ENTER_MULTILINE
)
{
setInputValue
(
hud
input
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
shiftKey
}
)
;
const
newValue
=
getInputValue
(
hud
)
.
replace
(
/
+
/
g
"
"
)
;
is
(
newValue
input
+
"
\
n
"
"
A
new
line
was
added
"
)
;
}
for
(
const
{
input
shiftKey
}
of
SHOULD_EXECUTE
)
{
setInputValue
(
hud
input
)
;
const
onMessage
=
waitForMessage
(
hud
"
"
"
.
result
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
shiftKey
}
)
;
await
onMessage
;
await
waitFor
(
(
)
=
>
!
getInputValue
(
hud
)
)
;
is
(
getInputValue
(
hud
)
"
"
"
Input
is
cleared
"
)
;
}
}
)
;
