"
use
strict
"
;
const
{
JSObjectsTestUtils
CONTEXTS
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
JSObjectsTestUtils
.
sys
.
mjs
"
)
;
add_setup
(
function
(
)
{
JSObjectsTestUtils
.
init
(
this
)
;
}
)
;
const
EXPECTED_VALUES_FILE
=
"
browser_webconsole_object_inspector_entries
.
snapshot
.
mjs
"
;
add_task
(
async
function
(
)
{
const
hud
=
await
openNewTabAndConsole
(
"
http
:
/
/
example
.
com
"
)
;
let
count
=
0
;
await
JSObjectsTestUtils
.
runTest
(
EXPECTED_VALUES_FILE
async
function
(
{
context
expression
}
)
{
if
(
context
=
=
CONTEXTS
.
CHROME
)
{
return
undefined
;
}
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
expression
count
]
async
function
(
exp
i
)
{
let
value
;
try
{
value
=
content
.
eval
(
exp
)
;
}
catch
(
e
)
{
value
=
e
;
}
content
.
console
.
log
(
"
test
message
"
+
i
value
)
;
}
)
;
const
messageNode
=
await
waitFor
(
(
)
=
>
findConsoleAPIMessage
(
hud
"
test
message
"
+
count
)
)
;
count
+
+
;
const
oi
=
messageNode
.
querySelector
(
"
.
tree
"
)
;
if
(
oi
)
{
const
preview
=
[
]
;
await
expandObjectInspectorNode
(
oi
.
querySelector
(
"
.
tree
-
node
"
)
)
;
for
(
const
node
of
oi
.
querySelectorAll
(
"
.
tree
-
node
"
)
)
{
const
label
=
node
.
textContent
.
replace
(
/
\
u200B
/
g
"
"
)
;
if
(
label
=
=
"
<
entries
>
"
)
{
await
expandObjectInspectorNode
(
node
)
;
const
firstEntry
=
node
.
nextSibling
;
if
(
isObjectInspectorNodeExpandable
(
firstEntry
)
)
{
await
expandObjectInspectorNode
(
firstEntry
)
;
}
}
}
for
(
const
node
of
oi
.
querySelectorAll
(
"
.
tree
-
node
"
)
)
{
const
label
=
node
.
textContent
.
replace
(
/
\
u200B
/
g
"
"
)
;
let
icon
=
"
\
u251C
"
;
if
(
isObjectInspectorNodeExpandable
(
node
)
)
{
icon
=
node
.
querySelector
(
"
.
theme
-
twisty
"
)
.
classList
.
contains
(
"
open
"
)
?
"
"
:
"
"
;
}
const
level
=
node
.
getAttribute
(
"
aria
-
level
"
)
;
const
indent
=
"
"
.
repeat
(
parseInt
(
level
10
)
-
1
)
;
preview
.
push
(
indent
+
icon
+
label
)
;
}
const
nodes
=
oi
.
querySelectorAll
(
"
.
node
"
)
;
const
lastNode
=
nodes
[
nodes
.
length
-
1
]
;
lastNode
.
scrollIntoView
(
)
;
return
preview
;
}
const
object
=
messageNode
.
querySelectorAll
(
"
.
message
-
body
>
*
"
)
[
1
]
;
return
object
.
textContent
;
}
)
;
}
)
;
