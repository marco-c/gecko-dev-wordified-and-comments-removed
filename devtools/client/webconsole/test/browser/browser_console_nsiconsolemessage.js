"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
;
charset
=
utf8
<
!
DOCTYPE
html
>
<
title
>
browser_console_nsiconsolemessage
.
js
<
/
title
>
<
p
>
hello
world
<
p
>
nsIConsoleMessages
ftw
!
;
add_task
(
async
function
(
)
{
await
addTab
(
TEST_URI
)
;
Services
.
console
.
logStringMessage
(
"
cachedBrowserConsoleMessage
"
)
;
info
(
"
open
web
console
"
)
;
let
hud
=
await
openConsole
(
)
;
ok
(
hud
"
web
console
opened
"
)
;
Services
.
console
.
logStringMessage
(
"
liveBrowserConsoleMessage
"
)
;
let
text
=
"
foobarz
"
;
const
onFooBarzMessage
=
waitForMessage
(
hud
text
)
;
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
text
]
function
(
msg
)
{
content
.
console
.
log
(
msg
)
;
}
)
;
await
onFooBarzMessage
;
ok
(
true
"
{
text
}
"
log
is
displayed
in
the
Web
Console
as
expected
)
;
text
=
hud
.
ui
.
outputNode
.
textContent
;
ok
(
!
text
.
includes
(
"
cachedBrowserConsoleMessage
"
)
"
cached
nsIConsoleMessages
are
not
displayed
"
)
;
ok
(
!
text
.
includes
(
"
liveBrowserConsoleMessage
"
)
"
nsIConsoleMessages
are
not
displayed
"
)
;
await
closeConsole
(
)
;
info
(
"
web
console
closed
"
)
;
hud
=
await
BrowserConsoleManager
.
toggleBrowserConsole
(
)
;
ok
(
hud
"
browser
console
opened
"
)
;
await
waitFor
(
(
)
=
>
findMessage
(
hud
"
cachedBrowserConsoleMessage
"
)
)
;
Services
.
console
.
logStringMessage
(
"
liveBrowserConsoleMessage2
"
)
;
await
waitFor
(
(
)
=
>
findMessage
(
hud
"
liveBrowserConsoleMessage2
"
)
)
;
const
msg
=
await
waitFor
(
(
)
=
>
findMessage
(
hud
"
liveBrowserConsoleMessage
"
)
)
;
ok
(
msg
"
message
element
for
liveBrowserConsoleMessage
(
nsIConsoleMessage
)
"
)
;
await
setFilterState
(
hud
{
log
:
false
}
)
;
await
waitFor
(
(
)
=
>
findMessages
(
hud
"
cachedBrowserConsoleMessage
"
)
.
length
=
=
=
0
)
;
await
waitFor
(
(
)
=
>
findMessages
(
hud
"
liveBrowserConsoleMessage
"
)
.
length
=
=
=
0
)
;
await
waitFor
(
(
)
=
>
findMessages
(
hud
"
liveBrowserConsoleMessage2
"
)
.
length
=
=
=
0
)
;
resetFilters
(
hud
)
;
}
)
;
