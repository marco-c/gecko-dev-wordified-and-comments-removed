"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
browser
/
test
-
console
-
filters
.
html
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
dom
.
security
.
https_first
"
false
)
;
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
filterState
=
await
getFilterState
(
hud
)
;
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
const
url
=
"
.
/
sjs_slow
-
response
-
test
-
server
.
sjs
"
;
content
.
fetch
(
{
url
}
?
status
=
300
&
delay
=
100
)
;
content
.
fetch
(
{
url
}
?
status
=
404
&
delay
=
500
)
;
content
.
fetch
(
{
url
}
?
status
=
500
&
delay
=
500
)
;
}
)
;
await
waitFor
(
(
)
=
>
findErrorMessage
(
hud
"
status
=
404
"
"
.
network
"
)
)
;
await
waitFor
(
(
)
=
>
findErrorMessage
(
hud
"
status
=
500
"
"
.
network
"
)
)
;
for
(
const
category
of
[
"
error
"
"
warn
"
"
log
"
"
info
"
"
debug
"
]
)
{
const
state
=
filterState
[
category
]
;
ok
(
state
Filter
button
for
{
category
}
is
on
by
default
)
;
}
for
(
const
category
of
[
"
css
"
"
net
"
"
netxhr
"
]
)
{
const
state
=
filterState
[
category
]
;
ok
(
!
state
Filter
button
for
{
category
}
is
off
by
default
)
;
}
is
(
findMessages
(
hud
"
"
)
.
length
7
"
Messages
of
all
levels
shown
when
filters
are
on
.
"
)
;
await
setFilterState
(
hud
{
error
:
false
}
)
;
await
waitFor
(
(
)
=
>
findMessages
(
hud
"
"
)
.
length
=
=
4
)
;
ok
(
true
"
When
a
filter
is
turned
off
its
messages
are
not
shown
.
"
)
;
await
closeTabAndToolbox
(
)
;
await
testFilterPersistence
(
)
;
}
)
;
function
filterIsEnabled
(
button
)
{
return
button
.
classList
.
contains
(
"
checked
"
)
;
}
async
function
testFilterPersistence
(
)
{
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
outputNode
=
hud
.
ui
.
outputNode
;
const
filterBar
=
await
waitFor
(
(
)
=
>
{
return
outputNode
.
querySelector
(
"
.
webconsole
-
filterbar
-
secondary
"
)
;
}
)
;
ok
(
filterBar
"
Filter
bar
ui
setting
is
persisted
.
"
)
;
ok
(
!
filterIsEnabled
(
filterBar
.
querySelector
(
"
[
data
-
category
=
'
error
'
]
"
)
)
"
Filter
button
setting
is
persisted
"
)
;
is
(
findMessages
(
hud
"
"
)
.
length
4
"
testFilterPersistence
:
Messages
of
all
levels
but
error
shown
.
"
)
;
await
resetFilters
(
hud
)
;
}
