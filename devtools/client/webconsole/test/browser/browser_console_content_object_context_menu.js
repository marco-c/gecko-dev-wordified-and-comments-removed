"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
<
meta
charset
=
utf8
>
console
API
calls
<
script
>
console
.
log
(
{
contentObject
:
"
YAY
!
"
deep
:
[
"
hello
"
"
world
"
]
}
)
;
<
/
script
>
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browserconsole
.
contentMessages
"
true
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
fission
"
true
)
;
await
addTab
(
TEST_URI
)
;
info
(
"
Open
the
Browser
Console
"
)
;
const
hud
=
await
BrowserConsoleManager
.
toggleBrowserConsole
(
)
;
info
(
"
Wait
until
the
content
object
is
displayed
"
)
;
const
objectMessage
=
await
waitFor
(
(
)
=
>
findMessage
(
hud
Object
{
contentObject
:
"
YAY
!
"
deep
:
(
2
)
[
]
}
)
)
;
ok
(
true
"
Content
object
is
displayed
in
the
Browser
Console
"
)
;
info
(
"
Expand
the
object
"
)
;
const
oi
=
objectMessage
.
querySelector
(
"
.
tree
"
)
;
oi
.
querySelector
(
"
.
arrow
"
)
.
click
(
)
;
await
waitFor
(
(
)
=
>
oi
.
querySelectorAll
(
"
.
node
"
)
.
length
=
=
=
4
)
;
ok
(
true
"
The
ObjectInspector
was
expanded
"
)
;
oi
.
scrollIntoView
(
)
;
info
(
"
Check
that
the
object
can
be
copied
to
clipboard
"
)
;
await
testCopyObject
(
hud
oi
.
querySelector
(
"
.
objectBox
-
object
"
)
JSON
.
stringify
(
{
contentObject
:
"
YAY
!
"
deep
:
[
"
hello
"
"
world
"
]
}
null
2
)
)
;
info
(
"
Check
that
inner
object
can
be
copied
to
clipboard
"
)
;
await
testCopyObject
(
hud
oi
.
querySelectorAll
(
"
.
node
"
)
[
2
]
.
querySelector
(
"
.
objectBox
-
array
"
)
JSON
.
stringify
(
[
"
hello
"
"
world
"
]
null
2
)
)
;
}
)
;
async
function
testCopyObject
(
hud
element
expected
)
{
info
(
"
Check
Copy
object
is
enabled
"
)
;
const
menuPopup
=
await
openContextMenu
(
hud
element
)
;
const
copyObjectMenuItem
=
menuPopup
.
querySelector
(
"
#
console
-
menu
-
copy
-
object
"
)
;
ok
(
!
copyObjectMenuItem
.
disabled
"
Copy
object
is
enabled
"
)
;
info
(
"
Click
on
Copy
object
"
)
;
await
waitForClipboardPromise
(
(
)
=
>
copyObjectMenuItem
.
click
(
)
expected
)
;
await
hideContextMenu
(
hud
)
;
}
