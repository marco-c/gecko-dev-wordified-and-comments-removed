"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
browser
/
test
-
console
-
iframes
.
html
"
;
const
expectedMessages
=
[
"
main
file
"
"
blah
"
"
iframe
2
"
"
iframe
3
"
]
;
const
expectedDupedMessage
=
"
iframe
1
"
;
add_task
(
async
function
(
)
{
if
(
!
Services
.
appinfo
.
browserTabsRemoteAutostart
)
{
expectUncaughtException
(
)
;
}
let
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
await
testMessages
(
hud
)
;
await
closeConsole
(
)
;
info
(
"
web
console
closed
"
)
;
await
pushPref
(
"
devtools
.
browserconsole
.
contentMessages
"
true
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
fission
"
true
)
;
hud
=
await
BrowserConsoleManager
.
toggleBrowserConsole
(
)
;
ok
(
hud
"
browser
console
opened
"
)
;
await
testMessages
(
hud
)
;
await
clearOutput
(
hud
)
;
await
waitForTick
(
)
;
await
safeCloseBrowserConsole
(
)
;
}
)
;
async
function
testMessages
(
hud
)
{
for
(
const
message
of
expectedMessages
)
{
info
(
checking
that
the
message
"
{
message
}
"
exists
)
;
await
waitFor
(
(
)
=
>
findMessage
(
hud
message
)
)
;
}
ok
(
true
"
Found
expected
unique
messages
"
)
;
await
waitFor
(
(
)
=
>
findMessages
(
hud
expectedDupedMessage
)
.
length
=
=
2
)
;
ok
(
true
{
expectedDupedMessage
}
is
present
twice
)
;
}
