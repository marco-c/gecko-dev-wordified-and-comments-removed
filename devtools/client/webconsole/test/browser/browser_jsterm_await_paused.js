"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
;
charset
=
utf
-
8
Web
Console
test
top
-
level
await
when
debugger
paused
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
debugger
.
features
.
map
-
await
-
expression
"
true
)
;
await
pushPref
(
"
devtools
.
toolbox
.
splitconsoleEnabled
"
false
)
;
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
pauseExpression
=
(
(
)
=
>
{
var
inPausedExpression
=
[
"
bar
"
]
;
/
*
Will
pause
the
script
and
open
the
debugger
panel
*
/
debugger
;
return
"
pauseExpression
-
res
"
;
}
)
(
)
;
execute
(
hud
pauseExpression
)
;
const
target
=
await
TargetFactory
.
forTab
(
gBrowser
.
selectedTab
)
;
const
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
await
waitFor
(
(
)
=
>
toolbox
.
getPanel
(
"
jsdebugger
"
)
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForPaused
(
dbg
)
;
await
toolbox
.
openSplitConsole
(
)
;
const
awaitExpression
=
await
new
Promise
(
res
=
>
{
const
result
=
[
"
res
"
.
.
.
inPausedExpression
]
;
setTimeout
(
(
)
=
>
res
(
result
)
1000
)
;
}
)
;
const
onAwaitResultMessage
=
waitForMessage
(
hud
[
"
res
"
"
bar
"
]
"
.
message
.
result
"
)
;
execute
(
hud
awaitExpression
)
;
await
executeAndWaitForMessage
(
hud
"
smoke
"
"
smoke
"
"
.
result
"
)
;
await
waitForTick
(
)
;
await
resume
(
dbg
)
;
info
(
"
Wait
for
the
paused
expression
result
to
be
displayed
"
)
;
await
waitFor
(
(
)
=
>
findMessage
(
hud
"
pauseExpression
-
res
"
"
.
result
"
)
)
;
await
onAwaitResultMessage
;
const
messages
=
hud
.
ui
.
outputNode
.
querySelectorAll
(
"
.
message
.
result
.
message
-
body
"
)
;
const
messagesText
=
Array
.
from
(
messages
)
.
map
(
n
=
>
n
.
textContent
)
;
const
expectedMessages
=
[
"
smoke
"
"
pauseExpression
-
res
"
Array
[
"
res
"
"
bar
"
]
]
;
is
(
JSON
.
stringify
(
messagesText
null
2
)
JSON
.
stringify
(
expectedMessages
null
2
)
"
The
output
contains
the
the
expected
messages
in
the
expected
order
"
)
;
}
)
;
