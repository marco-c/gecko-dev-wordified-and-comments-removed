"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
;
charset
=
utf8
<
script
>
x
=
Object
.
create
(
null
Object
.
getOwnPropertyDescriptors
(
{
dog
:
"
woof
"
dos
:
"
-
"
dot
:
"
.
"
duh
:
1
wut
:
2
}
)
)
<
/
script
>
;
add_task
(
async
function
(
)
{
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
{
jsterm
}
=
hud
;
const
{
autocompletePopup
:
popup
}
=
jsterm
;
const
jstermComplete
=
(
value
pos
)
=
>
setInputValueForAutocompletion
(
hud
value
pos
)
;
await
jstermComplete
(
"
x
.
"
)
;
is
(
getAutocompletePopupLabels
(
popup
)
.
toString
(
)
[
"
dog
"
"
dos
"
"
dot
"
"
duh
"
"
wut
"
]
.
toString
(
)
"
'
x
.
'
gave
a
list
of
suggestions
"
)
;
ok
(
popup
.
isOpen
"
popup
is
opened
"
)
;
info
(
"
Add
a
property
on
the
object
"
)
;
let
{
result
}
=
await
hud
.
evaluateJSAsync
(
x
.
docfoobar
=
"
added
"
;
x
.
docfoobar
)
;
is
(
result
"
added
"
"
The
property
was
added
on
the
window
object
"
)
;
info
(
"
Test
typing
d
(
i
.
e
.
input
is
now
'
x
.
d
'
)
"
)
;
let
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
d
"
)
;
await
onUpdated
;
is
(
getAutocompletePopupLabels
(
popup
)
.
toString
(
)
[
"
dog
"
"
dos
"
"
dot
"
"
duh
"
]
.
toString
(
)
"
autocomplete
popup
does
not
contain
docfoobar
.
List
has
not
been
updated
"
)
;
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
o
"
)
;
await
onUpdated
;
is
(
getAutocompletePopupLabels
(
popup
)
.
toString
(
)
[
"
dog
"
"
dos
"
"
dot
"
]
.
toString
(
)
"
autocomplete
popup
still
does
not
contain
docfoobar
.
List
has
not
been
updated
"
)
;
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
await
onUpdated
;
is
(
getAutocompletePopupLabels
(
popup
)
.
toString
(
)
[
"
dog
"
"
dos
"
"
dot
"
"
duh
"
]
.
toString
(
)
"
autocomplete
does
not
contain
docfoobar
.
list
has
not
been
updated
on
backspace
"
)
;
(
{
result
}
=
await
hud
.
evaluateJSAsync
(
delete
x
.
docfoobar
;
x
.
docfoobar
)
)
;
is
(
result
.
type
"
undefined
"
"
The
property
was
removed
"
)
;
await
jstermComplete
(
"
window
.
"
)
;
await
jstermComplete
(
"
window
.
getC
"
)
;
ok
(
getAutocompletePopupLabels
(
popup
)
.
includes
(
"
getComputedStyle
"
)
"
autocomplete
results
do
contain
getComputedStyle
"
)
;
await
jstermComplete
(
"
dump
(
d
"
)
;
ok
(
popup
.
getItems
(
)
.
length
>
0
"
'
dump
(
d
'
gives
non
-
zero
results
"
)
;
await
jstermComplete
(
"
dump
(
x
)
"
-
1
)
;
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
sendString
(
"
.
"
)
;
await
onUpdated
;
is
(
getAutocompletePopupLabels
(
popup
)
.
toString
(
)
[
"
dog
"
"
dos
"
"
dot
"
"
duh
"
"
wut
"
]
.
toString
(
)
"
'
dump
(
x
.
'
gave
a
list
of
suggestions
"
)
;
info
(
"
Add
a
property
on
the
x
object
"
)
;
(
{
result
}
=
await
hud
.
evaluateJSAsync
(
x
.
docfoobar
=
"
added
"
;
x
.
docfoobar
)
)
;
is
(
result
"
added
"
"
The
property
was
added
on
the
x
object
again
"
)
;
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
sendString
(
"
d
"
)
;
await
onUpdated
;
is
(
getAutocompletePopupLabels
(
popup
)
.
toString
(
)
[
"
dog
"
"
dos
"
"
dot
"
"
duh
"
]
.
toString
(
)
"
autocomplete
cached
results
do
not
contain
docfoobar
.
list
has
not
been
updated
"
)
;
info
(
"
Ensure
filtering
from
the
cache
does
work
"
)
;
execute
(
hud
window
.
testObject
=
Object
.
create
(
null
)
;
window
.
testObject
.
zz
=
"
zz
"
;
window
.
testObject
.
zzz
=
"
zzz
"
;
window
.
testObject
.
zzzz
=
"
zzzz
"
;
)
;
await
jstermComplete
(
"
window
.
testObject
.
"
)
;
await
jstermComplete
(
"
window
.
testObject
.
z
"
)
;
is
(
getAutocompletePopupLabels
(
popup
)
.
join
(
"
-
"
)
"
zz
-
zzz
-
zzzz
"
"
results
are
the
expected
ones
"
)
;
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
sendString
(
"
z
"
)
;
await
onUpdated
;
is
(
getAutocompletePopupLabels
(
popup
)
.
join
(
"
-
"
)
"
zz
-
zzz
-
zzzz
"
"
filtering
from
the
cache
works
-
step
1
"
)
;
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
sendString
(
"
z
"
)
;
await
onUpdated
;
is
(
getAutocompletePopupLabels
(
popup
)
.
join
(
"
-
"
)
"
zzz
-
zzzz
"
"
filtering
from
the
cache
works
-
step
2
"
)
;
}
)
;
