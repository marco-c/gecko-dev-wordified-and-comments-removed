"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
!
DOCTYPE
html
>
Test
content
focus
after
closing
console
"
;
add_task
(
async
function
(
)
{
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
info
(
"
Focus
after
console
is
opened
"
)
;
ok
(
isInputFocused
(
hud
)
"
input
node
is
focused
after
console
is
opened
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
content
.
onFocus
=
new
Promise
(
resolve
=
>
{
content
.
addEventListener
(
"
focus
"
resolve
{
once
:
true
}
)
;
}
)
;
}
)
;
info
(
"
Closing
console
"
)
;
await
closeConsole
(
)
;
const
isFocused
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
await
content
.
onFocus
;
return
Services
.
focus
.
focusedWindow
=
=
content
;
}
)
;
ok
(
isFocused
"
content
document
has
focus
after
closing
the
console
"
)
;
}
)
;
add_task
(
async
function
testSeparateWindowToolbox
(
)
{
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
true
"
window
"
)
;
info
(
"
Focus
after
console
is
opened
"
)
;
ok
(
isInputFocused
(
hud
)
"
input
node
is
focused
after
console
is
opened
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
content
.
onFocus
=
new
Promise
(
resolve
=
>
{
content
.
addEventListener
(
"
focus
"
resolve
{
once
:
true
}
)
;
}
)
;
}
)
;
info
(
"
Closing
console
"
)
;
await
closeConsole
(
)
;
const
isFocused
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
await
content
.
onFocus
;
return
Services
.
focus
.
focusedWindow
=
=
content
;
}
)
;
ok
(
isFocused
"
content
document
has
focus
after
closing
the
console
"
)
;
}
)
;
add_task
(
async
function
testSeparateWindowToolboxInactiveTab
(
)
{
await
openNewTabAndConsole
(
TEST_URI
true
"
window
"
)
;
info
(
"
Focus
after
console
is
opened
"
)
;
const
firstTab
=
gBrowser
.
selectedTab
;
await
addTab
(
data
:
text
/
html
<
!
DOCTYPE
html
>
<
meta
charset
=
utf8
>
New
tab
XXX
)
;
await
SpecialPowers
.
spawn
(
firstTab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
!
content
.
browsingContext
.
isActive
&
&
!
content
.
document
.
hasFocus
(
)
"
Waiting
for
first
tab
to
become
inactive
"
)
;
content
.
onFocus
=
new
Promise
(
resolve
=
>
{
content
.
addEventListener
(
"
focus
"
resolve
{
once
:
true
}
)
;
}
)
;
}
)
;
info
(
"
Closing
console
"
)
;
await
closeConsole
(
firstTab
)
;
const
onFirstTabFocus
=
SpecialPowers
.
spawn
(
firstTab
.
linkedBrowser
[
]
async
function
(
)
{
await
content
.
onFocus
;
return
"
focused
"
;
}
)
;
const
timeoutRes
=
"
time
'
s
out
"
;
const
onTimeout
=
wait
(
2000
)
.
then
(
(
)
=
>
timeoutRes
)
;
const
res
=
await
Promise
.
race
(
[
onFirstTabFocus
onTimeout
]
)
;
is
(
res
timeoutRes
"
original
tab
wasn
'
t
focused
when
closing
the
toolbox
window
"
)
;
}
)
;
