"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
;
charset
=
utf
-
8
<
!
DOCTYPE
html
>
<
body
>
<
div
>
<
h1
>
Testing
trace
command
<
/
h1
>
<
script
>
function
main
(
)
{
}
function
someNoise
(
)
{
}
<
/
script
>
<
/
div
>
<
div
>
<
p
>
<
/
p
>
<
/
div
>
<
/
body
>
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
debugger
.
features
.
javascript
-
tracing
"
true
)
;
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
ok
(
hud
"
web
console
opened
"
)
;
info
(
"
Test
unsupported
param
error
message
"
)
;
let
msg
=
await
evaluateExpressionInConsole
(
hud
"
:
trace
-
-
unsupported
-
param
"
"
console
-
api
"
)
;
is
(
msg
.
textContent
.
trim
(
)
"
:
trace
command
doesn
'
t
support
'
unsupported
-
param
'
argument
.
"
)
;
info
(
"
Test
the
help
argument
"
)
;
msg
=
await
evaluateExpressionInConsole
(
hud
"
:
trace
-
-
help
"
"
console
-
api
"
)
;
ok
(
msg
.
textContent
.
includes
(
"
Toggles
the
JavaScript
tracer
"
)
)
;
info
(
"
Test
toggling
the
tracer
ON
"
)
;
msg
=
await
evaluateExpressionInConsole
(
hud
"
:
trace
-
-
logMethod
console
-
-
prefix
foo
-
-
values
-
-
on
-
next
-
interaction
"
"
console
-
api
"
)
;
is
(
msg
.
textContent
.
trim
(
)
"
Started
tracing
to
Web
Console
"
)
;
info
(
"
Trigger
some
code
before
the
user
interaction
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
content
.
wrappedJSObject
.
someNoise
(
)
;
}
)
;
info
(
"
Simulate
a
user
interaction
by
trigerring
a
key
event
on
the
page
"
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
a
"
{
}
gBrowser
.
selectedBrowser
)
;
info
(
"
Trigger
some
code
to
log
some
traces
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
content
.
wrappedJSObject
.
main
(
"
arg
"
2
)
;
}
)
;
await
waitFor
(
(
)
=
>
!
!
findTracerMessages
(
hud
foo
:
interpreter
main
(
"
arg
"
2
)
)
.
length
)
;
is
(
findTracerMessages
(
hud
someNoise
)
.
length
0
"
The
code
running
before
the
key
press
should
not
be
traced
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
content
.
wrappedJSObject
.
someNoise
(
)
;
}
)
;
await
waitFor
(
(
)
=
>
!
!
findTracerMessages
(
hud
foo
:
interpreter
someNoise
(
)
)
.
length
)
;
info
(
"
Test
toggling
the
tracer
OFF
"
)
;
msg
=
await
evaluateExpressionInConsole
(
hud
"
:
trace
"
"
console
-
api
"
)
;
is
(
msg
.
textContent
.
trim
(
)
"
Stopped
tracing
"
)
;
info
(
"
Clear
past
traces
"
)
;
hud
.
ui
.
clearOutput
(
)
;
await
waitFor
(
(
)
=
>
!
findTracerMessages
(
hud
foo
:
interpreter
main
(
"
arg
"
2
)
)
.
length
)
;
ok
(
"
Console
was
cleared
"
)
;
info
(
"
Trigger
some
code
again
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
content
.
wrappedJSObject
.
main
(
)
;
}
)
;
await
wait
(
1000
)
;
ok
(
!
findTracerMessages
(
hud
foo
:
interpreter
main
(
"
arg
"
2
)
)
.
length
"
We
really
stopped
recording
traces
and
no
trace
appear
in
the
console
"
)
;
}
)
;
