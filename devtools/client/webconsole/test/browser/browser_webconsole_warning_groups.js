"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
TEST_FILE
=
"
browser
/
devtools
/
client
/
webconsole
/
test
/
browser
/
test
-
warning
-
groups
.
html
"
;
const
TEST_URI
=
"
https
:
/
/
example
.
org
/
"
+
TEST_FILE
;
const
TRACKER_URL
=
"
https
:
/
/
tracking
.
example
.
com
/
"
;
const
BLOCKED_URL
=
TRACKER_URL
+
"
browser
/
devtools
/
client
/
webconsole
/
test
/
browser
/
test
-
image
.
png
"
;
const
{
UrlClassifierTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
UrlClassifierTestUtils
.
jsm
"
)
;
UrlClassifierTestUtils
.
addTestTrackers
(
)
;
registerCleanupFunction
(
function
(
)
{
UrlClassifierTestUtils
.
cleanupTestTrackers
(
)
;
}
)
;
pushPref
(
"
privacy
.
trackingprotection
.
enabled
"
true
)
;
pushPref
(
"
devtools
.
webconsole
.
groupWarningMessages
"
true
)
;
const
CONTENT_BLOCKING_GROUP_LABEL
=
"
The
resource
at
<
URL
>
was
blocked
because
content
blocking
is
enabled
.
"
;
add_task
(
async
function
testContentBlockingMessage
(
)
{
await
pushPref
(
"
devtools
.
webconsole
.
persistlog
"
true
)
;
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
info
(
"
Log
a
tracking
protection
message
to
check
a
single
message
isn
'
t
grouped
"
)
;
let
onContentBlockingWarningMessage
=
waitForMessage
(
hud
BLOCKED_URL
"
.
warn
"
)
;
emitContentBlockedMessage
(
hud
)
;
let
{
node
}
=
await
onContentBlockingWarningMessage
;
is
(
node
.
querySelector
(
"
.
warning
-
indent
"
)
null
"
The
message
has
the
expected
style
"
)
;
is
(
node
.
querySelector
(
"
.
indent
"
)
.
getAttribute
(
"
data
-
indent
"
)
"
0
"
"
The
message
has
the
expected
indent
"
)
;
info
(
"
Log
a
simple
message
"
)
;
await
logString
(
hud
"
simple
message
1
"
)
;
info
(
"
Log
a
second
tracking
protection
message
to
check
that
it
causes
the
grouping
"
)
;
let
onContentBlockingWarningGroupMessage
=
waitForMessage
(
hud
CONTENT_BLOCKING_GROUP_LABEL
"
.
warn
"
)
;
emitContentBlockedMessage
(
hud
)
;
(
{
node
}
=
await
onContentBlockingWarningGroupMessage
)
;
is
(
node
.
querySelector
(
"
.
warning
-
group
-
badge
"
)
.
textContent
"
2
"
"
The
badge
has
the
expected
text
"
)
;
checkConsoleOutputForWarningGroup
(
hud
[
{
CONTENT_BLOCKING_GROUP_LABEL
}
simple
message
1
]
)
;
info
(
"
Log
another
simple
message
"
)
;
await
logString
(
hud
"
simple
message
2
"
)
;
checkConsoleOutputForWarningGroup
(
hud
[
{
CONTENT_BLOCKING_GROUP_LABEL
}
simple
message
1
simple
message
2
]
)
;
info
(
"
Log
a
third
tracking
protection
message
to
check
that
the
badge
updates
"
)
;
emitContentBlockedMessage
(
hud
)
;
await
waitFor
(
(
)
=
>
node
.
querySelector
(
"
.
warning
-
group
-
badge
"
)
.
textContent
=
=
"
3
"
)
;
checkConsoleOutputForWarningGroup
(
hud
[
{
CONTENT_BLOCKING_GROUP_LABEL
}
simple
message
1
simple
message
2
]
)
;
info
(
"
Open
the
group
"
)
;
node
.
querySelector
(
"
.
arrow
"
)
.
click
(
)
;
await
waitFor
(
(
)
=
>
findMessage
(
hud
BLOCKED_URL
)
)
;
checkConsoleOutputForWarningGroup
(
hud
[
{
CONTENT_BLOCKING_GROUP_LABEL
}
|
{
BLOCKED_URL
}
?
1
|
{
BLOCKED_URL
}
?
2
|
{
BLOCKED_URL
}
?
3
simple
message
1
simple
message
2
]
)
;
info
(
"
Log
a
new
tracking
protection
message
to
check
it
appears
inside
the
group
"
)
;
onContentBlockingWarningMessage
=
waitForMessage
(
hud
BLOCKED_URL
"
.
warn
"
)
;
emitContentBlockedMessage
(
hud
)
;
await
onContentBlockingWarningMessage
;
ok
(
true
"
The
new
tracking
protection
message
is
displayed
"
)
;
checkConsoleOutputForWarningGroup
(
hud
[
{
CONTENT_BLOCKING_GROUP_LABEL
}
|
{
BLOCKED_URL
}
?
1
|
{
BLOCKED_URL
}
?
2
|
{
BLOCKED_URL
}
?
3
|
{
BLOCKED_URL
}
?
4
simple
message
1
simple
message
2
]
)
;
info
(
"
Reload
the
page
and
wait
for
it
to
be
ready
"
)
;
await
reloadPage
(
)
;
await
waitFor
(
(
)
=
>
findMessage
(
hud
"
Navigated
to
"
)
)
;
info
(
"
Log
a
tracking
protection
message
to
check
it
is
not
grouped
"
)
;
onContentBlockingWarningMessage
=
waitForMessage
(
hud
BLOCKED_URL
"
.
warn
"
)
;
emitContentBlockedMessage
(
hud
)
;
await
onContentBlockingWarningMessage
;
await
logString
(
hud
"
simple
message
3
"
)
;
checkConsoleOutputForWarningGroup
(
hud
[
{
CONTENT_BLOCKING_GROUP_LABEL
}
|
{
BLOCKED_URL
}
?
1
|
{
BLOCKED_URL
}
?
2
|
{
BLOCKED_URL
}
?
3
|
{
BLOCKED_URL
}
?
4
simple
message
1
simple
message
2
"
Navigated
to
"
{
BLOCKED_URL
}
?
5
simple
message
3
]
)
;
info
(
"
Log
a
second
tracking
protection
message
to
check
that
it
causes
the
grouping
"
)
;
onContentBlockingWarningGroupMessage
=
waitForMessage
(
hud
CONTENT_BLOCKING_GROUP_LABEL
"
.
warn
"
)
;
emitContentBlockedMessage
(
hud
)
;
(
{
node
}
=
await
onContentBlockingWarningGroupMessage
)
;
is
(
node
.
querySelector
(
"
.
warning
-
group
-
badge
"
)
.
textContent
"
2
"
"
The
badge
has
the
expected
text
"
)
;
checkConsoleOutputForWarningGroup
(
hud
[
{
CONTENT_BLOCKING_GROUP_LABEL
}
|
{
BLOCKED_URL
}
?
1
|
{
BLOCKED_URL
}
?
2
|
{
BLOCKED_URL
}
?
3
|
{
BLOCKED_URL
}
?
4
simple
message
1
simple
message
2
Navigated
to
{
CONTENT_BLOCKING_GROUP_LABEL
}
simple
message
3
]
)
;
info
(
"
Check
that
opening
this
group
works
"
)
;
node
.
querySelector
(
"
.
arrow
"
)
.
click
(
)
;
await
waitFor
(
(
)
=
>
findMessages
(
hud
BLOCKED_URL
)
.
length
=
=
=
6
)
;
checkConsoleOutputForWarningGroup
(
hud
[
{
CONTENT_BLOCKING_GROUP_LABEL
}
|
{
BLOCKED_URL
}
?
1
|
{
BLOCKED_URL
}
?
2
|
{
BLOCKED_URL
}
?
3
|
{
BLOCKED_URL
}
?
4
simple
message
1
simple
message
2
Navigated
to
{
CONTENT_BLOCKING_GROUP_LABEL
}
|
{
BLOCKED_URL
}
?
5
|
{
BLOCKED_URL
}
?
6
simple
message
3
]
)
;
info
(
"
Check
that
closing
this
group
works
and
let
the
other
one
open
"
)
;
node
.
querySelector
(
"
.
arrow
"
)
.
click
(
)
;
await
waitFor
(
(
)
=
>
findMessages
(
hud
BLOCKED_URL
)
.
length
=
=
=
4
)
;
checkConsoleOutputForWarningGroup
(
hud
[
{
CONTENT_BLOCKING_GROUP_LABEL
}
|
{
BLOCKED_URL
}
?
1
|
{
BLOCKED_URL
}
?
2
|
{
BLOCKED_URL
}
?
3
|
{
BLOCKED_URL
}
?
4
simple
message
1
simple
message
2
Navigated
to
{
CONTENT_BLOCKING_GROUP_LABEL
}
simple
message
3
]
)
;
info
(
"
Log
a
third
tracking
protection
message
to
check
that
the
badge
updates
"
)
;
emitContentBlockedMessage
(
hud
)
;
await
waitFor
(
(
)
=
>
node
.
querySelector
(
"
.
warning
-
group
-
badge
"
)
.
textContent
=
=
"
3
"
)
;
checkConsoleOutputForWarningGroup
(
hud
[
{
CONTENT_BLOCKING_GROUP_LABEL
}
|
{
BLOCKED_URL
}
?
1
|
{
BLOCKED_URL
}
?
2
|
{
BLOCKED_URL
}
?
3
|
{
BLOCKED_URL
}
?
4
simple
message
1
simple
message
2
Navigated
to
{
CONTENT_BLOCKING_GROUP_LABEL
}
simple
message
3
]
)
;
}
)
;
let
cpt
=
0
;
function
emitContentBlockedMessage
(
)
{
const
url
=
{
BLOCKED_URL
}
?
{
+
+
cpt
}
;
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
url
]
function
(
innerURL
)
{
content
.
wrappedJSObject
.
loadImage
(
innerURL
)
;
}
)
;
}
function
logString
(
hud
str
)
{
const
onMessage
=
waitForMessage
(
hud
str
)
;
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
str
]
function
(
arg
)
{
content
.
console
.
log
(
arg
)
;
}
)
;
return
onMessage
;
}
