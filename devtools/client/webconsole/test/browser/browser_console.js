"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
browser
/
test
-
console
.
html
?
"
+
Date
.
now
(
)
;
const
TEST_FILE
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
"
+
"
webconsole
/
test
/
browser
/
"
+
"
test
-
cu
-
reporterror
.
js
"
;
const
TEST_XHR_ERROR_URI
=
http
:
/
/
example
.
com
/
404
.
html
?
{
Date
.
now
(
)
}
;
const
TEST_IMAGE
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
test
-
image
.
png
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
security
.
allow_parent_unrestricted_js_loads
"
true
)
;
await
pushPref
(
"
devtools
.
browserconsole
.
contentMessages
"
true
)
;
const
tab
=
await
addTab
(
TEST_URI
)
;
info
(
"
Check
browser
console
messages
with
devtools
.
browsertoolbox
.
fission
set
to
false
"
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
fission
"
false
)
;
await
testMessages
(
)
;
info
(
"
Check
browser
console
messages
with
devtools
.
browsertoolbox
.
fission
set
to
true
"
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
fission
"
true
)
;
await
testMessages
(
)
;
info
(
"
Close
tab
"
)
;
await
removeTab
(
tab
)
;
}
)
;
async
function
testMessages
(
)
{
const
opened
=
waitForBrowserConsole
(
)
;
let
hud
=
BrowserConsoleManager
.
getBrowserConsole
(
)
;
ok
(
!
hud
"
browser
console
is
not
open
"
)
;
const
overriddenConsole
=
globalThis
.
console
;
globalThis
.
console
=
globalThis
.
nativeConsole
;
info
(
"
wait
for
the
browser
console
to
open
with
ctrl
-
shift
-
j
"
)
;
EventUtils
.
synthesizeKey
(
"
j
"
{
accelKey
:
true
shiftKey
:
true
}
window
)
;
hud
=
await
opened
;
ok
(
hud
"
browser
console
opened
"
)
;
info
(
"
Check
that
we
don
'
t
display
the
non
-
native
console
API
warning
"
)
;
await
wait
(
1000
)
;
is
(
await
findMessageVirtualizedByType
(
{
hud
text
:
"
The
Web
Console
logging
API
"
typeSelector
:
"
.
warn
"
}
)
undefined
"
The
message
about
disabled
console
API
is
not
displayed
"
)
;
globalThis
.
console
=
overriddenConsole
;
await
clearOutput
(
hud
)
;
await
setFilterState
(
hud
{
netxhr
:
true
css
:
true
}
)
;
executeSoon
(
(
)
=
>
{
expectUncaughtException
(
)
;
foobarException
(
)
;
}
)
;
hud
.
iframeWindow
.
console
.
log
(
"
message
from
chrome
window
"
)
;
const
workerCode
=
console
.
log
(
"
message
in
parent
worker
"
)
;
throw
new
Error
(
"
error
in
parent
worker
"
)
;
;
const
blob
=
new
hud
.
iframeWindow
.
Blob
(
[
workerCode
]
{
type
:
"
application
/
javascript
"
}
)
;
const
chromeSpawnedWorker
=
new
hud
.
iframeWindow
.
Worker
(
URL
.
createObjectURL
(
blob
)
)
;
Services
.
scriptloader
.
loadSubScript
(
TEST_FILE
hud
.
iframeWindow
)
;
const
sandbox
=
new
Cu
.
Sandbox
(
null
{
wantComponents
:
false
wantGlobalProperties
:
[
"
URL
"
"
URLSearchParams
"
]
}
)
;
const
error
=
Cu
.
evalInSandbox
(
new
Error
(
"
error
from
nuked
globals
"
)
;
sandbox
)
;
Cu
.
reportError
(
error
)
;
Cu
.
nukeSandbox
(
sandbox
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
Cu
.
reportError
(
"
privileged
content
process
error
message
"
)
;
}
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
content
.
wrappedJSObject
.
console
.
log
(
"
message
from
content
window
"
)
;
content
.
wrappedJSObject
.
throwError
(
"
error
from
content
window
"
)
;
content
.
testWorker
=
new
content
.
Worker
(
"
.
/
test
-
worker
.
js
"
)
;
content
.
testWorker
.
postMessage
(
{
type
:
"
log
"
message
:
"
message
in
content
worker
"
}
)
;
content
.
testWorker
.
postMessage
(
{
type
:
"
error
"
message
:
"
error
in
content
worker
"
}
)
;
}
)
;
execute
(
hud
"
Parent
Process
Location
:
{
document
.
location
.
href
}
"
)
;
gBrowser
.
selectedBrowser
.
messageManager
.
loadFrameScript
(
data
:
application
/
javascript
console
.
log
(
"
framescript
-
message
"
)
false
)
;
const
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
onload
=
(
)
=
>
console
.
log
(
"
xhr
loaded
status
is
:
"
+
xhr
.
status
)
;
xhr
.
open
(
"
get
"
TEST_URI
true
)
;
xhr
.
send
(
)
;
const
xhrErr
=
new
XMLHttpRequest
(
)
;
xhrErr
.
onload
=
(
)
=
>
{
console
.
log
(
"
xhr
error
loaded
status
is
:
"
+
xhrErr
.
status
)
;
}
;
xhrErr
.
open
(
"
get
"
TEST_XHR_ERROR_URI
true
)
;
xhrErr
.
send
(
)
;
await
fetch
(
TEST_IMAGE
)
;
console
.
log
(
"
fetch
loaded
"
)
;
const
scriptErrorMessage
=
Cc
[
"
mozilla
.
org
/
scripterror
;
1
"
]
.
createInstance
(
Ci
.
nsIScriptError
)
;
scriptErrorMessage
.
initWithWindowID
(
"
Error
from
Services
.
console
.
logMessage
"
gBrowser
.
currentURI
.
prePath
null
0
0
Ci
.
nsIScriptError
.
warningFlag
"
chrome
javascript
"
gBrowser
.
selectedBrowser
.
innerWindowID
)
;
Services
.
console
.
logMessage
(
scriptErrorMessage
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
const
{
Log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
logger
=
Log
.
repository
.
getLogger
(
"
TEST_LOGGER_
"
+
Date
.
now
(
)
)
;
logger
.
addAppender
(
new
Log
.
ConsoleAppender
(
new
Log
.
BasicFormatter
(
)
)
)
;
logger
.
level
=
Log
.
Level
.
Info
;
logger
.
info
(
"
Log
.
jsm
content
process
messsage
"
)
;
}
)
;
await
execute
(
hud
document
.
body
.
style
.
backgroundColor
=
"
rainbow
"
)
;
await
wait
(
1000
)
;
await
checkUniqueMessageExists
(
hud
"
message
from
chrome
window
"
"
.
console
-
api
"
)
;
await
checkUniqueMessageExists
(
hud
"
error
thrown
from
test
-
cu
-
reporterror
.
js
via
Cu
.
reportError
(
)
"
"
.
error
"
)
;
await
checkUniqueMessageExists
(
hud
"
error
from
nuked
globals
"
"
.
error
"
)
;
await
checkUniqueMessageExists
(
hud
"
privileged
content
process
error
message
"
"
.
error
"
)
;
await
checkUniqueMessageExists
(
hud
"
message
from
content
window
"
"
.
console
-
api
"
)
;
await
checkUniqueMessageExists
(
hud
"
error
from
content
window
"
"
.
error
"
)
;
await
checkUniqueMessageExists
(
hud
"
Parent
Process
Location
:
chrome
:
/
/
browser
/
content
/
browser
.
xhtml
"
"
.
result
"
)
;
await
checkUniqueMessageExists
(
hud
"
framescript
-
message
"
"
.
console
-
api
"
)
;
await
checkUniqueMessageExists
(
hud
"
Error
from
Services
.
console
.
logMessage
"
"
.
warn
"
)
;
await
checkUniqueMessageExists
(
hud
"
foobarException
"
"
.
error
"
)
;
await
checkUniqueMessageExists
(
hud
"
test
-
console
.
html
"
"
.
network
"
)
;
await
checkUniqueMessageExists
(
hud
"
404
.
html
"
"
.
network
"
)
;
await
checkUniqueMessageExists
(
hud
"
test
-
image
.
png
"
"
.
network
"
)
;
await
checkUniqueMessageExists
(
hud
"
Log
.
jsm
content
process
messsage
"
"
.
console
-
api
"
)
;
await
checkUniqueMessageExists
(
hud
"
message
in
content
worker
"
"
.
console
-
api
"
)
;
await
checkUniqueMessageExists
(
hud
"
error
in
content
worker
"
"
.
error
"
)
;
await
checkUniqueMessageExists
(
hud
"
message
in
parent
worker
"
"
.
console
-
api
"
)
;
await
checkUniqueMessageExists
(
hud
"
error
in
parent
worker
"
"
.
error
"
)
;
await
checkUniqueMessageExists
(
hud
"
Expected
color
but
found
rainbow
"
"
.
warn
"
)
;
if
(
SpecialPowers
.
getBoolPref
(
"
devtools
.
browsertoolbox
.
fission
"
false
)
)
{
await
checkUniqueMessageExists
(
hud
"
Expected
color
but
found
bled
"
"
.
warn
"
)
;
}
await
resetFilters
(
hud
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
content
.
testWorker
.
terminate
(
)
;
delete
content
.
testWorker
;
}
)
;
chromeSpawnedWorker
.
terminate
(
)
;
info
(
"
Close
the
Browser
Console
"
)
;
await
safeCloseBrowserConsole
(
)
;
}
