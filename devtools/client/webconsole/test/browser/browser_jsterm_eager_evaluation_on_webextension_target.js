"
use
strict
"
;
const
{
DevToolsClient
}
=
require
(
"
devtools
/
client
/
devtools
-
client
"
)
;
const
{
DevToolsServer
}
=
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
add_task
(
async
function
test_webextension_target_allowSource_on_eager_eval
(
)
{
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
temporary
"
background
:
function
(
)
{
this
.
browser
.
test
.
sendMessage
(
"
bg
-
ready
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
bg
-
ready
"
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerAllActors
(
)
;
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
const
client
=
new
DevToolsClient
(
transport
)
;
await
client
.
connect
(
)
;
const
addonDescriptor
=
await
client
.
mainRoot
.
getAddon
(
{
id
:
extension
.
id
}
)
;
ok
(
addonDescriptor
"
webextension
addon
description
has
been
found
"
)
;
const
toolbox
=
await
gDevTools
.
showToolbox
(
addonDescriptor
{
toolId
:
"
webconsole
"
hostType
:
Toolbox
.
HostType
.
WINDOW
}
)
;
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
info
(
"
Start
listening
for
console
messages
"
)
;
SpecialPowers
.
registerConsoleListener
(
msg
=
>
{
if
(
msg
.
message
&
&
msg
.
message
.
includes
(
"
Unexpected
invalid
url
:
debugger
eager
eval
code
"
)
)
{
ok
(
false
"
webextension
targetActor
.
_allowSource
should
not
log
an
error
on
debugger
eager
eval
code
"
)
;
}
}
)
;
registerCleanupFunction
(
(
)
=
>
{
SpecialPowers
.
postConsoleSentinel
(
)
;
}
)
;
const
hud
=
toolbox
.
getPanel
(
"
webconsole
"
)
.
hud
;
setInputValue
(
hud
browser
)
;
info
(
"
Wait
for
eager
eval
element
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
getEagerEvaluationElement
(
hud
)
)
;
info
(
"
Select
the
debugger
panel
to
force
webextension
actor
to
list
sources
"
)
;
await
toolbox
.
selectTool
(
"
jsdebugger
"
)
;
await
wait
(
2000
)
;
await
toolbox
.
destroy
(
)
;
await
client
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
