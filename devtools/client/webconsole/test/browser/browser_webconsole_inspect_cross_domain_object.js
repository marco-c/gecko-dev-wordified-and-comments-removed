"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
browser
/
test
-
inspect
-
cross
-
domain
-
objects
-
top
.
html
"
;
add_task
(
async
function
(
)
{
requestLongerTimeout
(
2
)
;
Cu
.
forceShrinkingGC
(
)
;
const
hud
=
await
openNewTabAndConsole
(
"
data
:
text
/
html
;
charset
=
utf8
<
p
>
hello
"
)
;
info
(
"
Wait
for
the
'
foobar
'
message
to
be
logged
by
the
frame
"
)
;
const
onMessage
=
waitForMessage
(
hud
"
foobar
"
)
;
await
loadDocument
(
hud
.
toolbox
TEST_URI
gBrowser
.
selectedBrowser
)
;
const
{
node
}
=
await
onMessage
;
const
objectInspectors
=
[
.
.
.
node
.
querySelectorAll
(
"
.
tree
"
)
]
;
is
(
objectInspectors
.
length
3
"
There
is
the
expected
number
of
object
inspectors
"
)
;
const
[
oi1
oi2
oi3
]
=
objectInspectors
;
info
(
"
Expanding
the
first
object
inspector
"
)
;
await
expandObjectInspector
(
oi1
)
;
const
oi1Nodes
=
oi1
.
querySelectorAll
(
"
.
node
"
)
;
is
(
oi1Nodes
.
length
4
"
There
is
the
expected
number
of
nodes
in
the
tree
"
)
;
ok
(
oi1
.
textContent
.
includes
(
"
bug
:
869003
"
)
"
Expected
content
"
)
;
ok
(
oi1
.
textContent
.
includes
(
'
hello
:
"
world
!
"
'
)
"
Expected
content
"
)
;
info
(
"
Expanding
the
second
object
inspector
"
)
;
await
expandObjectInspector
(
oi2
)
;
const
oi2Nodes
=
oi2
.
querySelectorAll
(
"
.
node
"
)
;
is
(
oi2Nodes
.
length
9
"
There
is
the
expected
number
of
nodes
in
the
tree
"
)
;
ok
(
oi2
.
textContent
.
includes
(
"
arguments
:
null
"
)
"
Expected
content
"
)
;
ok
(
oi2
.
textContent
.
includes
(
"
bug
:
869003
"
)
"
Expected
content
"
)
;
ok
(
oi2
.
textContent
.
includes
(
"
caller
:
null
"
)
"
Expected
content
"
)
;
ok
(
oi2
.
textContent
.
includes
(
'
hello
:
"
world
!
"
'
)
"
Expected
content
"
)
;
ok
(
oi2
.
textContent
.
includes
(
"
length
:
1
"
)
"
Expected
content
"
)
;
ok
(
oi2
.
textContent
.
includes
(
'
name
:
"
func
"
'
)
"
Expected
content
"
)
;
info
(
"
Check
that
the
logged
element
can
be
highlighted
and
clicked
to
jump
to
inspector
"
)
;
const
toolbox
=
hud
.
toolbox
;
await
toolbox
.
loadTool
(
"
inspector
"
)
;
const
elementNode
=
oi3
.
querySelector
(
"
.
objectBox
-
node
"
)
;
ok
(
elementNode
!
=
=
null
"
Node
was
logged
as
expected
"
)
;
const
view
=
node
.
ownerDocument
.
defaultView
;
info
(
"
Highlight
the
node
by
moving
the
cursor
on
it
"
)
;
const
inspectorFront
=
await
toolbox
.
target
.
getFront
(
"
inspector
"
)
;
const
onNodeHighlight
=
inspectorFront
.
highlighter
.
once
(
"
node
-
highlight
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
elementNode
{
type
:
"
mousemove
"
}
view
)
;
await
onNodeHighlight
;
ok
(
true
"
Highlighter
is
displayed
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oi1
{
type
:
"
mousemove
"
}
view
)
;
const
openInInspectorIcon
=
elementNode
.
querySelector
(
"
.
open
-
inspector
"
)
;
ok
(
openInInspectorIcon
!
=
=
null
"
There
is
an
open
in
inspector
icon
"
)
;
info
(
"
Clicking
on
the
inspector
icon
and
waiting
for
the
inspector
to
be
selected
"
)
;
const
onNewNode
=
toolbox
.
selection
.
once
(
"
new
-
node
-
front
"
)
;
openInInspectorIcon
.
click
(
)
;
const
inspectorSelectedNodeFront
=
await
onNewNode
;
ok
(
true
"
Inspector
selected
and
new
node
got
selected
"
)
;
is
(
inspectorSelectedNodeFront
.
id
"
testEl
"
"
The
expected
node
was
selected
"
)
;
}
)
;
function
expandObjectInspector
(
oi
)
{
const
onMutation
=
waitForNodeMutation
(
oi
{
childList
:
true
}
)
;
oi
.
querySelector
(
"
.
arrow
"
)
.
click
(
)
;
return
onMutation
;
}
