"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
browser
/
test
-
autocomplete
-
in
-
stackframe
.
html
"
;
requestLongerTimeout
(
20
)
;
add_task
(
async
function
(
)
{
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
{
jsterm
}
=
hud
;
const
{
autocompletePopup
:
popup
}
=
jsterm
;
const
target
=
await
TargetFactory
.
forTab
(
gBrowser
.
selectedTab
)
;
const
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
const
jstermComplete
=
value
=
>
setInputValueForAutocompletion
(
hud
value
)
;
await
jstermComplete
(
"
document
.
title
.
"
)
;
const
newItemsLabels
=
getAutocompletePopupLabels
(
popup
)
;
ok
(
newItemsLabels
.
length
>
0
"
'
document
.
title
.
'
gave
a
list
of
suggestions
"
)
;
ok
(
newItemsLabels
.
includes
(
"
substr
"
)
results
do
contain
"
substr
"
)
;
ok
(
newItemsLabels
.
includes
(
"
toLowerCase
"
)
results
do
contain
"
toLowerCase
"
)
;
ok
(
newItemsLabels
.
includes
(
"
strike
"
)
results
do
contain
"
strike
"
)
;
await
jstermComplete
(
"
foo
"
)
;
is
(
getAutocompletePopupLabels
(
popup
)
.
join
(
"
-
"
)
"
foo1
-
foo1Obj
"
"
foo
"
gave
the
expected
suggestions
)
;
await
jstermComplete
(
"
foo1Obj
.
"
)
;
checkInputCompletionValue
(
hud
"
prop1
"
"
foo1Obj
completion
"
)
;
is
(
getAutocompletePopupLabels
(
popup
)
.
join
(
"
-
"
)
"
prop1
-
prop2
"
"
foo1Obj
.
"
gave
the
expected
suggestions
)
;
await
jstermComplete
(
"
foo1Obj
.
prop2
.
"
)
;
ok
(
getAutocompletePopupLabels
(
popup
)
.
includes
(
"
prop21
"
)
"
foo1Obj
.
prop2
.
"
gave
the
expected
suggestions
)
;
info
(
"
Opening
Debugger
"
)
;
await
openDebugger
(
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
info
(
"
Waiting
for
pause
"
)
;
await
pauseDebugger
(
dbg
)
;
const
stackFrames
=
dbg
.
selectors
.
getCallStackFrames
(
)
;
info
(
"
Opening
Console
again
"
)
;
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
await
jstermComplete
(
"
foo
"
)
;
is
(
getAutocompletePopupLabels
(
popup
)
.
join
(
"
-
"
)
"
foo1
-
foo1Obj
-
foo3
-
foo3Obj
"
"
foo
"
gave
the
expected
suggestions
)
;
await
openDebugger
(
)
;
await
selectFrame
(
dbg
stackFrames
[
1
]
)
;
info
(
"
openConsole
"
)
;
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
await
jstermComplete
(
"
foo
"
)
;
is
(
getAutocompletePopupLabels
(
popup
)
.
join
(
"
-
"
)
"
foo1
-
foo1Obj
-
foo2
-
foo2Obj
"
"
foo
"
gave
the
expected
suggestions
)
;
await
jstermComplete
(
"
foo2Obj
.
"
)
;
ok
(
getAutocompletePopupLabels
(
popup
)
.
includes
(
"
prop1
"
)
"
foo2Obj
.
"
returns
"
prop1
"
)
;
await
jstermComplete
(
"
foo2Obj
.
prop1
.
"
)
;
ok
(
getAutocompletePopupLabels
(
popup
)
.
includes
(
"
prop11
"
)
"
foo2Obj
.
prop1
"
returns
"
prop11
"
)
;
await
jstermComplete
(
"
foo2Obj
.
prop1
.
prop11
.
"
)
;
ok
(
getAutocompletePopupLabels
(
popup
)
.
includes
(
"
length
"
)
results
do
contain
"
length
"
)
;
await
jstermComplete
(
"
foo2Obj
[
0
]
.
"
)
;
is
(
getAutocompletePopupLabels
(
popup
)
.
length
0
"
no
items
for
foo2Obj
[
0
]
"
)
;
}
)
;
