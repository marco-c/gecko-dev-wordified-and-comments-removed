"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
browser
/
test
-
time
-
methods
.
html
"
;
const
TEST_URI2
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
script
>
"
+
"
console
.
timeEnd
(
'
bTimer
'
)
;
<
/
script
>
"
;
const
TEST_URI3
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
script
>
"
+
"
console
.
time
(
'
bTimer
'
)
;
console
.
log
(
'
smoke
signal
'
)
;
<
/
script
>
"
;
const
TEST_URI4
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
"
<
script
>
console
.
timeEnd
(
'
bTimer
'
)
;
<
/
script
>
"
;
add_task
(
async
function
(
)
{
const
hud1
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
aTimerCompleted
=
await
waitFor
(
(
)
=
>
findMessage
(
hud1
"
aTimer
:
"
)
)
;
ok
(
aTimerCompleted
.
textContent
.
includes
(
"
-
timer
ended
"
)
"
Calling
"
+
"
console
.
time
(
'
a
'
)
and
console
.
timeEnd
(
'
a
'
)
ends
the
'
a
'
timer
"
)
;
const
hud2
=
await
openNewTabAndConsole
(
TEST_URI2
)
;
const
error1
=
await
waitFor
(
(
)
=
>
findMessage
(
hud2
"
bTimer
"
"
.
message
.
timeEnd
.
warn
"
)
)
;
ok
(
error1
"
Timers
with
the
same
name
but
in
separate
tabs
do
not
contain
"
+
"
the
same
value
"
)
;
await
navigateTo
(
TEST_URI3
)
;
await
waitFor
(
(
)
=
>
findMessage
(
hud2
"
smoke
signal
"
)
)
;
is
(
findMessage
(
hud2
"
bTimer
started
"
)
null
"
No
message
is
printed
to
"
+
"
the
console
when
the
timer
starts
"
)
;
await
clearOutput
(
hud2
)
;
await
navigateTo
(
TEST_URI4
)
;
const
error2
=
await
waitFor
(
(
)
=
>
findMessage
(
hud2
"
bTimer
"
"
.
message
.
timeEnd
.
warn
"
)
)
;
ok
(
error2
"
Timers
with
the
same
name
but
in
separate
pages
do
not
contain
"
+
"
the
same
value
"
)
;
}
)
;
