"
use
strict
"
;
requestLongerTimeout
(
4
)
;
const
TEST_URI
=
data
:
text
/
html
<
!
DOCTYPE
html
>
<
meta
charset
=
utf8
>
console
API
calls
<
script
>
console
.
log
(
"
Data
Message
"
)
;
<
/
script
>
;
const
EXAMPLE_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
browser
/
test
-
console
.
html
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
browser
-
toolbox
/
test
/
helpers
-
browser
-
toolbox
.
js
"
this
)
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
security
.
allow_parent_unrestricted_js_loads
"
true
)
;
await
addTab
(
TEST_URI
)
;
const
ToolboxTask
=
await
initBrowserToolboxTask
(
)
;
await
ToolboxTask
.
importFunctions
(
{
findMessagesVirtualized
findMessageVirtualizedByType
waitUntil
}
)
;
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
await
gToolbox
.
selectTool
(
"
webconsole
"
)
;
const
hud
=
gToolbox
.
getCurrentPanel
(
)
.
hud
;
await
waitUntil
(
(
)
=
>
findMessageVirtualizedByType
(
{
hud
text
:
"
Data
Message
"
typeSelector
:
"
.
console
-
api
"
}
)
)
;
}
)
;
ok
(
true
"
First
message
appeared
in
toolbox
"
)
;
await
addTab
(
EXAMPLE_URI
)
;
invokeInTab
(
"
stringLog
"
)
;
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
const
hud
=
gToolbox
.
getCurrentPanel
(
)
.
hud
;
await
waitUntil
(
(
)
=
>
findMessageVirtualizedByType
(
{
hud
text
:
"
stringLog
"
typeSelector
:
"
.
console
-
api
"
}
)
)
;
}
)
;
ok
(
true
"
New
message
appeared
in
toolbox
"
)
;
await
ToolboxTask
.
destroy
(
)
;
}
)
;
