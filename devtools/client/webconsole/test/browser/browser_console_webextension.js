"
use
strict
"
;
const
TEST_URI
=
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
browser
/
test
-
console
.
html
?
"
+
Date
.
now
(
)
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browserconsole
.
contentMessages
"
true
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
scope
"
"
everything
"
)
;
await
addTab
(
TEST_URI
)
;
info
(
"
Check
with
devtools
.
browsertoolbox
.
fission
set
to
false
"
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
fission
"
false
)
;
await
testWebExtensionMessages
(
false
)
;
await
testWebExtensionMessages
(
true
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
fission
"
true
)
;
const
hud
=
await
BrowserConsoleManager
.
toggleBrowserConsole
(
)
;
await
clearOutput
(
hud
)
;
await
safeCloseBrowserConsole
(
)
;
info
(
"
Check
with
devtools
.
browsertoolbox
.
fission
set
to
true
"
)
;
await
testWebExtensionMessages
(
false
)
;
await
testWebExtensionMessages
(
true
)
;
}
)
;
async
function
testWebExtensionMessages
(
createWebExtensionBeforeOpeningBrowserConsole
=
false
)
{
let
extension
;
if
(
createWebExtensionBeforeOpeningBrowserConsole
)
{
extension
=
await
loadExtension
(
)
;
}
const
hud
=
await
BrowserConsoleManager
.
toggleBrowserConsole
(
)
;
if
(
!
createWebExtensionBeforeOpeningBrowserConsole
)
{
extension
=
await
loadExtension
(
)
;
}
await
wait
(
1000
)
;
if
(
!
createWebExtensionBeforeOpeningBrowserConsole
|
|
Services
.
prefs
.
getBoolPref
(
"
devtools
.
browsertoolbox
.
fission
"
false
)
)
{
await
checkUniqueMessageExists
(
hud
"
content
console
API
message
"
"
.
console
-
api
"
)
;
await
checkUniqueMessageExists
(
hud
"
background
console
API
message
"
"
.
console
-
api
"
)
;
}
await
checkUniqueMessageExists
(
hud
"
content
error
"
"
.
error
"
)
;
await
checkUniqueMessageExists
(
hud
"
background
error
"
"
.
error
"
)
;
await
clearOutput
(
hud
)
;
info
(
"
Close
the
Browser
Console
"
)
;
await
safeCloseBrowserConsole
(
)
;
await
extension
.
unload
(
)
;
}
async
function
loadExtension
(
)
{
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
background
:
{
scripts
:
[
"
background
.
js
"
]
}
browser_action
:
{
default_popup
:
"
popup
.
html
"
}
content_scripts
:
[
{
matches
:
[
TEST_URI
]
js
:
[
"
content
-
script
.
js
"
]
}
]
}
useAddonManager
:
"
temporary
"
files
:
{
"
background
.
js
"
:
function
(
)
{
console
.
log
(
"
background
console
API
message
"
)
;
throw
new
Error
(
"
background
error
"
)
;
}
"
popup
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
/
head
>
<
body
>
Popup
<
/
body
>
<
script
src
=
"
popup
.
js
"
>
<
/
script
>
<
/
html
>
"
popup
.
js
"
:
function
(
)
{
console
.
log
(
"
popup
console
API
message
"
)
;
setTimeout
(
(
)
=
>
{
throw
new
Error
(
"
popup
error
"
)
;
}
5
)
;
setTimeout
(
(
)
=
>
{
browser
.
test
.
sendMessage
(
popup
-
ready
)
;
}
10
)
;
}
"
content
-
script
.
js
"
:
function
(
)
{
console
.
log
(
"
content
console
API
message
"
)
;
throw
new
Error
(
"
content
error
"
)
;
}
}
}
)
;
await
extension
.
startup
(
)
;
return
extension
;
}
