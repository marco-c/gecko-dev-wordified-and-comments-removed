"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf8
<
!
DOCTYPE
html
>
<
p
>
test
inspect
(
)
command
"
;
add_task
(
async
function
(
)
{
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
info
(
"
Test
inspect
(
window
)
"
)
;
await
executeAndWaitForResultMessage
(
hud
"
testProp
=
'
testValue
'
"
"
testValue
"
)
;
const
{
node
:
inspectWindowNode
}
=
await
executeAndWaitForResultMessage
(
hud
"
inspect
(
window
)
"
"
Window
"
)
;
const
objectInspectors
=
[
.
.
.
inspectWindowNode
.
querySelectorAll
(
"
.
tree
"
)
]
;
is
(
objectInspectors
.
length
1
"
There
is
the
expected
number
of
object
inspectors
"
)
;
const
[
windowOi
]
=
objectInspectors
;
let
windowOiNodes
=
windowOi
.
querySelectorAll
(
"
.
node
"
)
;
if
(
windowOiNodes
.
length
=
=
=
1
)
{
await
waitForNodeMutation
(
windowOi
{
childList
:
true
}
)
;
windowOiNodes
=
windowOi
.
querySelectorAll
(
"
.
node
"
)
;
}
const
propertiesNodes
=
[
.
.
.
windowOi
.
querySelectorAll
(
"
.
object
-
label
"
)
]
;
const
testPropertyLabelNode
=
propertiesNodes
.
find
(
el
=
>
el
.
textContent
=
=
=
"
testProp
"
)
;
ok
(
testPropertyLabelNode
"
The
testProp
property
label
is
displayed
as
expected
"
)
;
const
testPropertyValueNode
=
testPropertyLabelNode
.
closest
(
"
.
node
"
)
.
querySelector
(
"
.
objectBox
"
)
;
is
(
testPropertyValueNode
.
textContent
'
"
testValue
"
'
"
The
testProp
property
value
is
displayed
as
expected
"
)
;
info
(
"
Test
inspect
(
1
)
"
)
;
execute
(
hud
"
inspect
(
1
)
"
)
;
const
inspectPrimitiveNode
=
await
waitFor
(
(
)
=
>
findInspectResultMessage
(
hud
.
ui
.
outputNode
2
)
)
;
is
(
parseInt
(
inspectPrimitiveNode
.
textContent
10
)
1
"
The
primitive
is
displayed
as
expected
"
)
;
}
)
;
function
findInspectResultMessage
(
node
index
)
{
return
node
.
querySelectorAll
(
"
.
message
.
result
"
)
[
index
]
;
}
