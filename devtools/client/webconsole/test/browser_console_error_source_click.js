"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf8
<
p
>
hello
world
from
bug
877778
"
+
"
<
button
onclick
=
'
foobar
.
explode
(
)
'
"
+
"
style
=
'
test
-
color
:
green
-
please
'
>
click
!
<
/
button
>
"
;
add_task
(
function
*
(
)
{
yield
new
Promise
(
resolve
=
>
{
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
devtools
.
browserconsole
.
filter
.
cssparser
"
true
]
]
}
resolve
)
;
}
)
;
yield
loadTab
(
TEST_URI
)
;
let
hud
=
yield
HUDService
.
toggleBrowserConsole
(
)
;
ok
(
hud
"
browser
console
opened
"
)
;
if
(
!
Services
.
appinfo
.
browserTabsRemoteAutostart
)
{
expectUncaughtException
(
)
;
}
info
(
"
generate
exception
and
wait
for
the
message
"
)
;
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
function
*
(
)
{
let
button
=
content
.
document
.
querySelector
(
"
button
"
)
;
button
.
click
(
)
;
}
)
;
let
results
=
yield
waitForMessages
(
{
webconsole
:
hud
messages
:
[
{
text
:
"
ReferenceError
:
foobar
is
not
defined
"
category
:
CATEGORY_JS
severity
:
SEVERITY_ERROR
}
{
text
:
"
Unknown
property
\
u2018test
-
color
\
u2019
"
category
:
CATEGORY_CSS
severity
:
SEVERITY_WARNING
}
]
}
)
;
let
viewSourceCalled
=
false
;
let
viewSource
=
hud
.
viewSource
;
hud
.
viewSource
=
(
)
=
>
{
viewSourceCalled
=
true
;
}
;
for
(
let
result
of
results
)
{
viewSourceCalled
=
false
;
let
msg
=
[
.
.
.
result
.
matched
]
[
0
]
;
ok
(
msg
"
message
element
found
for
:
"
+
result
.
text
)
;
ok
(
!
msg
.
classList
.
contains
(
"
filtered
-
by
-
type
"
)
"
message
element
is
not
filtered
"
)
;
let
selector
=
"
.
message
.
message
-
location
.
frame
-
link
-
source
"
;
let
locationNode
=
msg
.
querySelector
(
selector
)
;
ok
(
locationNode
"
message
location
element
found
"
)
;
EventUtils
.
synthesizeMouse
(
locationNode
2
2
{
}
hud
.
iframeWindow
)
;
ok
(
viewSourceCalled
"
view
source
opened
"
)
;
}
hud
.
viewSource
=
viewSource
;
yield
finishTest
(
)
;
}
)
;
