"
use
strict
"
;
require
(
"
babel
/
register
"
)
(
{
ignore
:
[
/
node_modules
/
]
}
)
;
const
mcRoot
=
{
__dirname
}
/
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
;
const
getModule
=
mcPath
=
>
module
.
exports
=
require
(
"
{
(
mcRoot
+
mcPath
)
.
replace
(
/
\
\
/
gi
"
/
"
)
}
"
)
;
;
const
{
pref
}
=
require
(
mcRoot
+
"
devtools
/
client
/
shared
/
test
-
helpers
/
jest
-
fixtures
/
Services
"
)
;
pref
(
"
devtools
.
debugger
.
remote
-
timeout
"
10000
)
;
pref
(
"
devtools
.
hud
.
loglimit
"
10000
)
;
pref
(
"
devtools
.
webconsole
.
filter
.
error
"
true
)
;
pref
(
"
devtools
.
webconsole
.
filter
.
warn
"
true
)
;
pref
(
"
devtools
.
webconsole
.
filter
.
info
"
true
)
;
pref
(
"
devtools
.
webconsole
.
filter
.
log
"
true
)
;
pref
(
"
devtools
.
webconsole
.
filter
.
debug
"
true
)
;
pref
(
"
devtools
.
webconsole
.
filter
.
css
"
false
)
;
pref
(
"
devtools
.
webconsole
.
filter
.
net
"
false
)
;
pref
(
"
devtools
.
webconsole
.
filter
.
netxhr
"
false
)
;
pref
(
"
devtools
.
webconsole
.
inputHistoryCount
"
300
)
;
pref
(
"
devtools
.
webconsole
.
persistlog
"
false
)
;
pref
(
"
devtools
.
webconsole
.
timestampMessages
"
false
)
;
pref
(
"
devtools
.
webconsole
.
sidebarToggle
"
true
)
;
pref
(
"
devtools
.
webconsole
.
groupWarningMessages
"
false
)
;
pref
(
"
devtools
.
webconsole
.
input
.
editor
"
false
)
;
pref
(
"
devtools
.
webconsole
.
input
.
autocomplete
"
true
)
;
pref
(
"
devtools
.
webconsole
.
input
.
eagerEvaluation
"
true
)
;
pref
(
"
devtools
.
browserconsole
.
contentMessages
"
true
)
;
pref
(
"
devtools
.
browserconsole
.
enableNetworkMonitoring
"
false
)
;
pref
(
"
devtools
.
webconsole
.
input
.
editorWidth
"
800
)
;
pref
(
"
devtools
.
webconsole
.
input
.
editorOnboarding
"
true
)
;
pref
(
"
devtools
.
webconsole
.
input
.
context
"
false
)
;
global
.
loader
=
{
lazyServiceGetter
:
(
)
=
>
{
}
lazyGetter
:
(
context
name
fn
)
=
>
{
try
{
global
[
name
]
=
fn
(
)
;
}
catch
(
_
)
{
}
}
lazyRequireGetter
:
(
context
names
path
destruct
)
=
>
{
const
excluded
=
[
"
Debugger
"
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
"
resource
:
/
/
devtools
/
client
/
shared
/
autocomplete
-
popup
.
js
"
"
resource
:
/
/
devtools
/
client
/
framework
/
devtools
.
js
"
"
resource
:
/
/
devtools
/
client
/
shared
/
keycodes
.
js
"
"
resource
:
/
/
devtools
/
client
/
shared
/
sourceeditor
/
editor
.
js
"
"
resource
:
/
/
devtools
/
client
/
shared
/
telemetry
.
js
"
"
resource
:
/
/
devtools
/
client
/
shared
/
screenshot
.
js
"
"
resource
:
/
/
devtools
/
client
/
shared
/
focus
.
js
"
"
resource
:
/
/
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
processes
-
watcher
.
js
"
"
resource
:
/
/
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
workers
-
watcher
.
js
"
"
resource
:
/
/
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
sharedworkers
-
watcher
.
js
"
"
resource
:
/
/
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
serviceworkers
-
watcher
.
js
"
]
;
if
(
!
excluded
.
includes
(
path
)
)
{
if
(
!
Array
.
isArray
(
names
)
)
{
names
=
[
names
]
;
}
for
(
const
name
of
names
)
{
Object
.
defineProperty
(
global
name
{
get
(
)
{
const
module
=
require
(
path
)
;
return
destruct
?
module
[
name
]
:
module
;
}
configurable
:
true
}
)
;
}
}
}
}
;
global
.
isWorker
=
false
;
global
.
indexedDB
=
{
open
:
(
)
=
>
(
{
}
)
}
;
if
(
!
global
.
URLSearchParams
)
{
global
.
URLSearchParams
=
require
(
"
url
"
)
.
URLSearchParams
;
}
if
(
!
global
.
ResizeObserver
)
{
global
.
ResizeObserver
=
class
ResizeObserver
{
observe
(
)
{
}
unobserve
(
)
{
}
disconnect
(
)
{
}
}
;
}
global
.
Services
=
require
(
mcRoot
+
"
devtools
/
client
/
shared
/
test
-
helpers
/
jest
-
fixtures
/
Services
"
)
;
global
.
ChromeUtils
=
{
import
:
(
)
=
>
{
}
defineModuleGetter
:
(
)
=
>
{
}
addProfilerMarker
:
(
)
=
>
{
}
}
;
global
.
Cc
=
{
}
;
global
.
Ci
=
{
}
;
global
.
Cu
=
{
isInAutomation
:
true
now
:
(
)
=
>
{
}
}
;
global
.
Components
=
{
stack
:
{
caller
:
"
"
}
}
;
global
.
define
=
function
(
)
{
}
;
global
.
document
.
nodePrincipal
=
{
isSystemPrincipal
:
false
}
;
const
requireHacker
=
require
(
"
require
-
hacker
"
)
;
requireHacker
.
global_hook
(
"
default
"
(
path
module
)
=
>
{
if
(
path
.
startsWith
(
"
resource
:
/
/
devtools
/
"
)
)
{
path
=
path
.
replace
(
"
resource
:
/
/
"
"
"
)
;
}
if
(
path
.
endsWith
(
"
.
js
"
)
)
{
path
=
path
.
replace
(
"
.
js
"
"
"
)
;
}
const
paths
=
{
"
react
-
dom
"
:
(
)
=
>
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
"
react
-
dom
/
server
"
:
(
)
=
>
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
server
"
)
"
react
-
dom
/
test
-
utils
"
:
(
)
=
>
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
test
-
utils
-
dev
"
)
"
react
-
redux
"
:
(
)
=
>
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
react
:
(
)
=
>
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dev
"
)
"
devtools
/
client
/
shared
/
vendor
/
react
"
:
(
)
=
>
getModule
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dev
"
)
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
webconsole
/
test
/
browser
/
stub
-
generator
-
helpers
"
:
(
)
=
>
getModule
(
"
devtools
/
client
/
webconsole
/
test
/
browser
/
stub
-
generator
-
helpers
"
)
"
devtools
/
server
/
devtools
-
server
"
:
(
)
=
>
module
.
exports
=
{
DevToolsServer
:
{
}
}
"
devtools
/
client
/
shared
/
components
/
SmartTrace
"
:
(
)
=
>
"
module
.
exports
=
(
)
=
>
null
;
"
"
devtools
/
client
/
netmonitor
/
src
/
components
/
TabboxPanel
"
:
(
)
=
>
"
{
}
"
"
devtools
/
client
/
webconsole
/
utils
/
context
-
menu
"
:
(
)
=
>
"
{
}
"
"
devtools
/
client
/
shared
/
telemetry
"
:
(
)
=
>
module
.
exports
=
function
(
)
{
this
.
recordEvent
=
(
)
=
>
{
}
;
this
.
getKeyedHistogramById
=
(
)
=
>
(
{
add
:
(
)
=
>
{
}
}
)
;
}
"
devtools
/
client
/
shared
/
unicode
-
url
"
:
(
)
=
>
getModule
(
"
devtools
/
client
/
shared
/
test
-
helpers
/
jest
-
fixtures
/
unicode
-
url
"
)
"
devtools
/
shared
/
DevToolsUtils
"
:
(
)
=
>
getModule
(
"
devtools
/
client
/
webconsole
/
test
/
node
/
fixtures
/
DevToolsUtils
"
)
"
devtools
/
server
/
actors
/
reflow
"
:
(
)
=
>
"
{
}
"
"
devtools
/
shared
/
layout
/
utils
"
:
(
)
=
>
"
{
getCurrentZoom
=
(
)
=
>
{
}
}
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
:
(
)
=
>
"
module
.
exports
=
{
}
;
"
"
devtools
/
client
/
framework
/
devtools
"
:
(
)
=
>
module
.
exports
=
{
gDevTools
:
{
}
}
;
"
devtools
/
shared
/
async
-
storage
"
:
(
)
=
>
getModule
(
"
devtools
/
client
/
webconsole
/
test
/
node
/
fixtures
/
async
-
storage
"
)
"
devtools
/
shared
/
generate
-
uuid
"
:
(
)
=
>
getModule
(
"
devtools
/
client
/
shared
/
test
-
helpers
/
jest
-
fixtures
/
generate
-
uuid
"
)
}
;
if
(
paths
.
hasOwnProperty
(
path
)
)
{
return
paths
[
path
]
(
)
;
}
if
(
path
.
startsWith
(
"
devtools
/
"
)
)
{
return
getModule
(
path
)
;
}
return
undefined
;
}
)
;
const
MessageChannel
=
global
.
MessageChannel
;
delete
global
.
MessageChannel
;
const
Enzyme
=
require
(
"
enzyme
"
)
;
const
Adapter
=
require
(
"
enzyme
-
adapter
-
react
-
16
"
)
;
Enzyme
.
configure
(
{
adapter
:
new
Adapter
(
)
}
)
;
global
.
MessageChannel
=
MessageChannel
;
