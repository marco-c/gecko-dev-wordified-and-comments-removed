"
use
strict
"
;
const
expect
=
require
(
"
expect
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
webconsole
/
actions
/
index
"
)
;
const
{
getFilteredMessagesCount
}
=
require
(
"
devtools
/
client
/
webconsole
/
selectors
/
messages
"
)
;
const
{
setupStore
}
=
require
(
"
devtools
/
client
/
webconsole
/
test
/
node
/
helpers
"
)
;
const
{
FILTERS
}
=
require
(
"
devtools
/
client
/
webconsole
/
constants
"
)
;
const
{
stubPackets
}
=
require
(
"
devtools
/
client
/
webconsole
/
test
/
node
/
fixtures
/
stubs
/
index
"
)
;
describe
(
"
Filtering
-
Hidden
messages
"
(
)
=
>
{
let
store
;
beforeEach
(
(
)
=
>
{
store
=
prepareBaseStore
(
)
;
store
.
dispatch
(
actions
.
filtersClear
(
)
)
;
store
.
dispatch
(
actions
.
filterToggle
(
FILTERS
.
DEBUG
)
)
;
store
.
dispatch
(
actions
.
filterToggle
(
FILTERS
.
ERROR
)
)
;
store
.
dispatch
(
actions
.
filterToggle
(
FILTERS
.
INFO
)
)
;
store
.
dispatch
(
actions
.
filterToggle
(
FILTERS
.
LOG
)
)
;
store
.
dispatch
(
actions
.
filterToggle
(
FILTERS
.
WARN
)
)
;
}
)
;
it
(
"
has
the
expected
numbers
"
(
)
=
>
{
const
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
BASIC_TEST_CASE_FILTERED_MESSAGE_COUNT
)
;
}
)
;
it
(
"
has
the
expected
numbers
when
there
is
a
text
search
"
(
)
=
>
{
store
.
dispatch
(
actions
.
filtersClear
(
)
)
;
store
.
dispatch
(
actions
.
filterToggle
(
FILTERS
.
INFO
)
)
;
store
.
dispatch
(
actions
.
filterTextSet
(
"
danger
will
robinson
!
"
)
)
;
let
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
{
[
FILTERS
.
ERROR
]
:
0
[
FILTERS
.
WARN
]
:
0
[
FILTERS
.
LOG
]
:
0
[
FILTERS
.
INFO
]
:
1
[
FILTERS
.
DEBUG
]
:
0
[
FILTERS
.
TEXT
]
:
9
global
:
10
}
)
;
store
.
dispatch
(
actions
.
filterTextSet
(
"
"
)
)
;
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
{
[
FILTERS
.
ERROR
]
:
0
[
FILTERS
.
WARN
]
:
0
[
FILTERS
.
LOG
]
:
0
[
FILTERS
.
INFO
]
:
1
[
FILTERS
.
DEBUG
]
:
0
[
FILTERS
.
TEXT
]
:
0
global
:
1
}
)
;
}
)
;
it
(
"
has
the
expected
numbers
when
there
'
s
a
text
search
on
disabled
categories
"
(
)
=
>
{
store
.
dispatch
(
actions
.
filterTextSet
(
"
danger
will
robinson
!
"
)
)
;
let
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
{
[
FILTERS
.
ERROR
]
:
3
[
FILTERS
.
WARN
]
:
1
[
FILTERS
.
LOG
]
:
5
[
FILTERS
.
INFO
]
:
1
[
FILTERS
.
DEBUG
]
:
1
[
FILTERS
.
TEXT
]
:
0
global
:
11
}
)
;
store
.
dispatch
(
actions
.
filterTextSet
(
"
"
)
)
;
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
BASIC_TEST_CASE_FILTERED_MESSAGE_COUNT
)
;
}
)
;
it
(
"
updates
when
messages
are
added
"
(
)
=
>
{
const
packets
=
MESSAGES
.
map
(
key
=
>
stubPackets
.
get
(
key
)
)
;
store
.
dispatch
(
actions
.
messagesAdd
(
packets
)
)
;
const
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
{
[
FILTERS
.
ERROR
]
:
6
[
FILTERS
.
WARN
]
:
2
[
FILTERS
.
LOG
]
:
10
[
FILTERS
.
INFO
]
:
2
[
FILTERS
.
DEBUG
]
:
2
[
FILTERS
.
TEXT
]
:
0
global
:
22
}
)
;
}
)
;
it
(
"
updates
when
filters
are
toggled
"
(
)
=
>
{
store
.
dispatch
(
actions
.
filterToggle
(
FILTERS
.
LOG
)
)
;
let
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
Object
.
assign
(
{
}
BASIC_TEST_CASE_FILTERED_MESSAGE_COUNT
{
[
FILTERS
.
LOG
]
:
0
global
:
6
}
)
)
;
store
.
dispatch
(
actions
.
filterToggle
(
FILTERS
.
ERROR
)
)
;
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
Object
.
assign
(
{
}
BASIC_TEST_CASE_FILTERED_MESSAGE_COUNT
{
[
FILTERS
.
ERROR
]
:
0
[
FILTERS
.
LOG
]
:
0
global
:
3
}
)
)
;
store
.
dispatch
(
actions
.
filterToggle
(
FILTERS
.
LOG
)
)
;
store
.
dispatch
(
actions
.
filterToggle
(
FILTERS
.
ERROR
)
)
;
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
BASIC_TEST_CASE_FILTERED_MESSAGE_COUNT
)
;
}
)
;
it
(
"
has
the
expected
numbers
after
message
clear
"
(
)
=
>
{
store
.
dispatch
(
actions
.
filterTextSet
(
"
danger
will
robinson
!
"
)
)
;
store
.
dispatch
(
actions
.
messagesClear
(
)
)
;
const
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
{
[
FILTERS
.
ERROR
]
:
0
[
FILTERS
.
WARN
]
:
0
[
FILTERS
.
LOG
]
:
0
[
FILTERS
.
INFO
]
:
0
[
FILTERS
.
DEBUG
]
:
0
[
FILTERS
.
TEXT
]
:
0
global
:
0
}
)
;
}
)
;
it
(
"
has
the
expected
numbers
after
filter
clear
"
(
)
=
>
{
store
.
dispatch
(
actions
.
filterTextSet
(
"
danger
will
robinson
!
"
)
)
;
store
.
dispatch
(
actions
.
filtersClear
(
)
)
;
const
counter
=
getFilteredMessagesCount
(
store
.
getState
(
)
)
;
expect
(
counter
)
.
toEqual
(
{
[
FILTERS
.
ERROR
]
:
0
[
FILTERS
.
WARN
]
:
0
[
FILTERS
.
LOG
]
:
0
[
FILTERS
.
INFO
]
:
0
[
FILTERS
.
DEBUG
]
:
0
[
FILTERS
.
TEXT
]
:
0
global
:
0
}
)
;
}
)
;
}
)
;
const
MESSAGES
=
[
"
ReferenceError
:
asdf
is
not
defined
"
"
console
.
error
(
'
error
message
'
)
;
"
"
console
.
assert
(
false
{
message
:
'
foobar
'
}
)
"
"
console
.
warn
(
'
danger
will
robinson
!
'
)
"
"
console
.
log
(
'
foobar
'
'
test
'
)
"
"
console
.
log
(
undefined
)
"
"
console
.
count
(
'
bar
'
)
"
"
console
.
log
(
'
'
)
"
"
console
.
table
(
[
'
red
'
'
green
'
'
blue
'
]
)
;
"
"
console
.
info
(
'
info
message
'
)
;
"
"
console
.
debug
(
'
debug
message
'
)
;
"
]
;
const
BASIC_TEST_CASE_FILTERED_MESSAGE_COUNT
=
{
[
FILTERS
.
ERROR
]
:
3
[
FILTERS
.
WARN
]
:
1
[
FILTERS
.
LOG
]
:
5
[
FILTERS
.
INFO
]
:
1
[
FILTERS
.
DEBUG
]
:
1
[
FILTERS
.
TEXT
]
:
0
global
:
11
}
;
function
prepareBaseStore
(
)
{
return
setupStore
(
MESSAGES
)
;
}
