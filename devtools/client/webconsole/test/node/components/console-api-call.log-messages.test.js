"
use
strict
"
;
const
expect
=
require
(
"
expect
"
)
;
const
{
render
}
=
require
(
"
enzyme
"
)
;
const
{
createFactory
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
{
setupStore
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
test
/
node
/
helpers
.
js
"
)
;
const
Provider
=
createFactory
(
require
(
"
react
-
redux
"
)
.
Provider
)
;
const
ConsoleApiCall
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
components
/
Output
/
message
-
types
/
ConsoleApiCall
.
js
"
)
)
;
const
{
stubPreparedMessages
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
test
/
node
/
fixtures
/
stubs
/
index
.
js
"
)
;
const
serviceContainer
=
require
(
"
resource
:
/
/
devtools
/
client
/
webconsole
/
test
/
node
/
fixtures
/
serviceContainer
.
js
"
)
;
describe
(
"
ConsoleAPICall
component
for
platform
message
"
(
)
=
>
{
describe
(
"
Services
.
console
.
logStringMessage
"
(
)
=
>
{
it
(
"
renders
logMessage
grips
"
(
)
=
>
{
const
message
=
stubPreparedMessages
.
get
(
"
platform
-
simple
-
message
"
)
;
const
wrapper
=
render
(
ConsoleApiCall
(
{
message
serviceContainer
}
)
)
;
expect
(
wrapper
.
find
(
"
.
message
-
body
"
)
.
text
(
)
)
.
toBe
(
"
foobar
test
"
)
;
expect
(
wrapper
.
find
(
"
.
message
-
location
"
)
.
text
(
)
)
.
toBe
(
"
"
)
;
}
)
;
it
(
"
renders
longString
logMessage
grips
"
(
)
=
>
{
const
message
=
stubPreparedMessages
.
get
(
"
platform
-
longString
-
message
"
)
;
const
wrapper
=
render
(
Provider
(
{
store
:
setupStore
(
)
}
ConsoleApiCall
(
{
message
serviceContainer
}
)
)
)
;
expect
(
wrapper
.
find
(
"
.
message
-
body
"
)
.
text
(
)
)
.
toInclude
(
a
\
n
{
"
a
"
.
repeat
(
100
)
}
)
;
}
)
;
}
)
;
}
)
;
