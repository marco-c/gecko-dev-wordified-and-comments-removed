"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf8
Bug
1005909
-
Clickable
URLS
"
;
var
inputTests
=
[
{
input
:
"
'
http
:
/
/
example
.
com
'
"
output
:
"
http
:
/
/
example
.
com
"
expectedTab
:
"
http
:
/
/
example
.
com
/
"
}
{
input
:
"
'
https
:
/
/
example
.
com
'
"
output
:
"
https
:
/
/
example
.
com
"
expectedTab
:
"
https
:
/
/
example
.
com
/
"
}
{
input
:
"
'
https
:
/
/
example
.
com
:
443
'
"
output
:
"
https
:
/
/
example
.
com
:
443
"
expectedTab
:
"
https
:
/
/
example
.
com
/
"
}
{
input
:
"
'
http
:
/
/
example
.
com
/
foo
'
"
output
:
"
http
:
/
/
example
.
com
/
foo
"
expectedTab
:
"
http
:
/
/
example
.
com
/
foo
"
}
{
input
:
"
'
foo
http
:
/
/
example
.
com
bar
'
"
output
:
"
foo
http
:
/
/
example
.
com
bar
"
expectedTab
:
"
http
:
/
/
example
.
com
/
"
}
{
input
:
"
'
foo
\
\
nhttp
:
/
/
example
.
com
\
\
nbar
'
"
output
:
"
foo
\
nhttp
:
/
/
example
.
com
\
nbar
"
expectedTab
:
"
http
:
/
/
example
.
com
/
"
}
{
input
:
"
'
http
:
/
/
example
.
com
http
:
/
/
example
.
com
'
"
output
:
"
http
:
/
/
example
.
com
http
:
/
/
example
.
com
"
expectedTab
:
"
http
:
/
/
example
.
com
/
"
}
{
input
:
"
'
example
.
com
'
"
output
:
"
example
.
com
"
}
{
input
:
"
'
foo
:
/
/
example
.
com
'
"
output
:
"
foo
:
/
/
example
.
com
"
}
{
input
:
"
[
'
http
:
/
/
example
.
com
/
abcdefghijabcdefghij
some
other
text
'
]
"
output
:
"
Array
[
\
"
http
:
/
/
example
.
com
/
abcdefghijabcdef
\
u2026
\
"
]
"
printOutput
:
"
http
:
/
/
example
.
com
/
abcdefghijabcdefghij
some
other
text
"
expectedTab
:
"
http
:
/
/
example
.
com
/
abcdefghijabcdefghij
"
getClickableNode
:
(
msg
)
=
>
msg
.
querySelectorAll
(
"
a
"
)
[
1
]
}
{
input
:
"
{
test
:
'
http
:
/
/
example
.
com
/
abcdefghijabcdefghij
some
other
text
'
}
"
output
:
"
Object
{
test
:
\
"
http
:
/
/
example
.
com
/
abcdefghijabcdef
\
u2026
\
"
}
"
printOutput
:
"
[
object
Object
]
"
evalOutput
:
"
http
:
/
/
example
.
com
/
abcdefghijabcdefghij
some
other
text
"
noClick
:
true
consoleLogClick
:
true
expectedTab
:
"
http
:
/
/
example
.
com
/
abcdefghijabcdefghij
"
getClickableNode
:
(
msg
)
=
>
msg
.
querySelectorAll
(
"
a
"
)
[
1
]
}
]
;
function
test
(
)
{
Task
.
spawn
(
function
*
(
)
{
let
{
tab
}
=
yield
loadTab
(
TEST_URI
)
;
let
hud
=
yield
openConsole
(
tab
)
;
yield
checkOutputForInputs
(
hud
inputTests
)
;
inputTests
=
null
;
}
)
.
then
(
finishTest
)
;
}
