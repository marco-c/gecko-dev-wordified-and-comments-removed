"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
mochitest
/
test
-
eval
-
in
-
stackframe
.
html
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
debugger
.
new
-
debugger
-
frontend
"
false
)
;
info
(
"
open
the
console
"
)
;
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
{
jsterm
}
=
hud
;
info
(
"
open
the
debugger
"
)
;
const
{
panel
}
=
await
openDebugger
(
)
;
const
{
activeThread
}
=
panel
.
panelWin
.
DebuggerController
;
const
onFirstCallFramesAdded
=
activeThread
.
addOneTimeListener
(
"
framesadded
"
)
;
const
onFirstCallMessageReceived
=
waitForMessage
(
hud
"
undefined
"
)
;
const
unresolvedSymbol
=
Symbol
(
)
;
let
firstCallEvaluationResult
=
unresolvedSymbol
;
onFirstCallMessageReceived
.
then
(
message
=
>
{
firstCallEvaluationResult
=
message
;
}
)
;
jsterm
.
execute
(
"
firstCall
(
)
"
)
;
info
(
"
Waiting
for
a
frame
to
be
added
"
)
;
await
onFirstCallFramesAdded
;
info
(
"
frames
added
select
the
console
again
"
)
;
await
openConsole
(
)
;
info
(
"
Executing
basic
command
while
paused
"
)
;
let
onMessageReceived
=
waitForMessage
(
hud
"
3
"
)
;
jsterm
.
execute
(
"
1
+
2
"
)
;
let
message
=
await
onMessageReceived
;
ok
(
message
"
1
+
2
was
evaluated
whith
debugger
paused
"
)
;
info
(
"
Executing
command
using
scoped
variables
while
paused
"
)
;
onMessageReceived
=
waitForMessage
(
hud
"
globalFooBug783499foo2SecondCall
"
)
;
jsterm
.
execute
(
"
foo
+
foo2
"
)
;
message
=
await
onMessageReceived
;
ok
(
message
"
foo
+
foo2
was
evaluated
as
expected
with
debugger
paused
"
)
;
info
(
"
Checking
the
first
command
which
is
the
last
to
resolve
since
it
paused
"
)
;
ok
(
firstCallEvaluationResult
=
=
=
unresolvedSymbol
"
firstCall
was
not
evaluated
yet
"
)
;
info
(
"
Resuming
the
thread
"
)
;
activeThread
.
resume
(
)
;
message
=
await
onFirstCallMessageReceived
;
ok
(
firstCallEvaluationResult
!
=
=
unresolvedSymbol
"
firstCall
(
)
returned
correct
value
"
)
;
}
)
;
