"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
;
charset
=
utf8
<
p
>
test
code
completion
on
_
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
webconsole
.
jsterm
.
codeMirror
"
false
)
;
await
performTests
(
)
;
await
pushPref
(
"
devtools
.
webconsole
.
jsterm
.
codeMirror
"
true
)
;
await
performTests
(
)
;
}
)
;
async
function
performTests
(
)
{
const
{
jsterm
}
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
{
autocompletePopup
}
=
jsterm
;
info
(
"
Test
that
there
'
s
no
issue
when
trying
to
do
an
autocompletion
without
last
"
+
"
evaluation
result
"
)
;
await
setInputValueForAutocompletion
(
jsterm
"
_
.
"
)
;
is
(
autocompletePopup
.
items
.
length
0
"
autocomplete
popup
has
no
items
"
)
;
is
(
autocompletePopup
.
isOpen
false
"
autocomplete
popup
is
not
open
"
)
;
info
(
"
Populate
_
by
executing
a
command
"
)
;
await
jsterm
.
execute
(
Object
.
create
(
null
Object
.
getOwnPropertyDescriptors
(
{
x
:
1
y
:
"
hello
"
}
)
)
)
;
await
setInputValueForAutocompletion
(
jsterm
"
_
.
"
)
;
checkJsTermCompletionValue
(
jsterm
"
x
"
"
'
_
.
'
completion
(
completeNode
)
"
)
;
is
(
getAutocompletePopupLabels
(
autocompletePopup
)
.
join
(
"
|
"
)
"
x
|
y
"
"
autocomplete
popup
has
expected
items
"
)
;
is
(
autocompletePopup
.
isOpen
true
"
autocomplete
popup
is
open
"
)
;
await
setInputValueForAutocompletion
(
jsterm
"
_
.
x
.
"
)
;
is
(
autocompletePopup
.
isOpen
true
"
autocomplete
popup
is
open
"
)
;
is
(
getAutocompletePopupLabels
(
autocompletePopup
)
.
includes
(
"
toExponential
"
)
true
"
autocomplete
popup
has
expected
items
"
)
;
await
setInputValueForAutocompletion
(
jsterm
"
_
.
y
.
"
)
;
is
(
autocompletePopup
.
isOpen
true
"
autocomplete
popup
is
open
"
)
;
is
(
getAutocompletePopupLabels
(
autocompletePopup
)
.
includes
(
"
trim
"
)
true
"
autocomplete
popup
has
expected
items
"
)
;
}
function
getAutocompletePopupLabels
(
autocompletePopup
)
{
return
autocompletePopup
.
items
.
map
(
i
=
>
i
.
label
)
;
}
