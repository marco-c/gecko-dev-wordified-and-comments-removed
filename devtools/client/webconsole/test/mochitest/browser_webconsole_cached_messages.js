"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
mochitest
/
"
+
"
test
-
webconsole
-
error
-
observer
.
html
"
;
add_task
(
async
function
(
)
{
if
(
!
Services
.
appinfo
.
browserTabsRemoteAutostart
)
{
expectUncaughtException
(
)
;
}
await
pushPref
(
"
devtools
.
webconsole
.
filter
.
css
"
true
)
;
await
addTab
(
TEST_URI
)
;
info
(
"
Open
the
console
"
)
;
let
hud
=
await
openConsole
(
)
;
await
testMessagesVisibility
(
hud
true
)
;
info
(
"
Close
the
toolbox
"
)
;
await
closeToolbox
(
)
;
info
(
"
Open
the
console
again
"
)
;
hud
=
await
openConsole
(
)
;
await
testMessagesVisibility
(
hud
false
)
;
}
)
;
async
function
testMessagesVisibility
(
hud
waitForCSSMessage
)
{
let
message
=
findMessage
(
hud
"
log
Bazzle
"
"
.
message
.
log
"
)
;
ok
(
message
"
console
.
log
message
is
visible
"
)
;
message
=
findMessage
(
hud
"
error
Bazzle
"
"
.
message
.
error
"
)
;
ok
(
message
"
console
.
error
message
is
visible
"
)
;
message
=
findMessage
(
hud
"
bazBug611032
"
"
.
message
.
error
"
)
;
ok
(
message
"
exception
message
is
visible
"
)
;
if
(
waitForCSSMessage
)
{
await
waitForMessage
(
hud
"
cssColorBug611032
"
)
;
}
message
=
findMessage
(
hud
"
cssColorBug611032
"
"
.
message
.
warn
.
css
"
)
;
ok
(
message
"
css
warning
message
is
visible
"
)
;
}
