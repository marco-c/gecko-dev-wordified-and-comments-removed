"
use
strict
"
;
add_task
(
async
function
(
)
{
await
performTests
(
)
;
await
pushPref
(
"
devtools
.
webconsole
.
jsterm
.
codeMirror
"
true
)
;
await
performTests
(
)
;
}
)
;
async
function
performTests
(
)
{
let
browserConsole
webConsole
objInspector
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
chrome
.
enabled
"
true
)
;
browserConsole
=
await
HUDService
.
toggleBrowserConsole
(
)
;
objInspector
=
await
getObjectInspector
(
browserConsole
)
;
testJSTermIsVisible
(
browserConsole
)
;
await
testObjectInspectorPropertiesAreSet
(
objInspector
)
;
const
browserTab
=
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf8
hello
world
"
)
;
webConsole
=
await
openConsole
(
browserTab
)
;
objInspector
=
await
getObjectInspector
(
webConsole
)
;
testJSTermIsVisible
(
webConsole
)
;
await
testObjectInspectorPropertiesAreSet
(
objInspector
)
;
await
closeConsole
(
browserTab
)
;
await
HUDService
.
toggleBrowserConsole
(
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
chrome
.
enabled
"
false
)
;
browserConsole
=
await
HUDService
.
toggleBrowserConsole
(
)
;
objInspector
=
await
getObjectInspector
(
browserConsole
)
;
testJSTermIsNotVisible
(
browserConsole
)
;
webConsole
=
await
openConsole
(
browserTab
)
;
objInspector
=
await
getObjectInspector
(
webConsole
)
;
testJSTermIsVisible
(
webConsole
)
;
await
testObjectInspectorPropertiesAreSet
(
objInspector
)
;
info
(
"
Close
webconsole
and
browser
console
"
)
;
await
closeConsole
(
browserTab
)
;
await
HUDService
.
toggleBrowserConsole
(
)
;
}
async
function
getObjectInspector
(
hud
)
{
const
{
ui
jsterm
}
=
hud
;
ui
.
filterBox
.
value
=
"
browser_console_hide_jsterm_test
"
;
hud
.
ui
.
clearOutput
(
)
;
jsterm
.
execute
(
"
new
Object
(
{
browser_console_hide_jsterm_test
:
true
}
)
"
)
;
const
message
=
await
waitFor
(
(
)
=
>
findMessage
(
hud
"
Object
{
browser_console_hide_jsterm_test
:
true
}
"
)
)
;
const
objInspector
=
message
.
querySelector
(
"
.
tree
"
)
;
return
objInspector
;
}
function
testJSTermIsVisible
(
hud
)
{
const
inputContainer
=
hud
.
ui
.
window
.
document
.
querySelector
(
"
.
jsterm
-
input
-
container
"
)
;
isnot
(
inputContainer
.
style
.
display
"
none
"
"
input
is
visible
"
)
;
}
async
function
testObjectInspectorPropertiesAreSet
(
objInspector
)
{
const
onMutation
=
waitForNodeMutation
(
objInspector
{
childList
:
true
}
)
;
const
arrow
=
objInspector
.
querySelector
(
"
.
arrow
"
)
;
arrow
.
click
(
)
;
await
onMutation
;
ok
(
arrow
.
classList
.
contains
(
"
expanded
"
)
"
The
arrow
of
the
root
node
of
the
tree
is
expanded
after
clicking
on
it
"
)
;
const
nameNode
=
objInspector
.
querySelector
(
"
.
node
:
not
(
.
lessen
)
.
object
-
label
"
)
;
const
container
=
nameNode
.
parentNode
;
const
name
=
nameNode
.
textContent
;
const
value
=
container
.
querySelector
(
"
.
objectBox
"
)
.
textContent
;
is
(
name
"
browser_console_hide_jsterm_test
"
"
name
is
set
correctly
"
)
;
is
(
value
"
true
"
"
value
is
set
correctly
"
)
;
}
function
testJSTermIsNotVisible
(
hud
)
{
const
inputContainer
=
hud
.
ui
.
window
.
document
.
querySelector
(
"
.
jsterm
-
input
-
container
"
)
;
is
(
inputContainer
null
"
input
is
not
in
dom
"
)
;
}
