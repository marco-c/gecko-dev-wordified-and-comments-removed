"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
<
meta
charset
=
utf8
>
<
script
>
console
.
log
(
"
test
message
"
)
;
<
/
script
>
;
const
OPTOUT
=
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTOUT
;
add_task
(
async
function
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
const
snapshot
=
Services
.
telemetry
.
snapshotEvents
(
OPTOUT
true
)
;
ok
(
!
snapshot
.
parent
"
No
events
have
been
logged
for
the
main
process
"
)
;
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
info
(
"
Click
on
the
'
log
'
filter
"
)
;
await
setFilterState
(
hud
{
log
:
false
}
)
;
checkTelemetryEvent
(
{
trigger
:
"
log
"
active
:
"
error
warn
info
debug
"
inactive
:
"
text
log
css
net
netxhr
"
}
)
;
info
(
"
Click
on
the
'
netxhr
'
filter
"
)
;
await
setFilterState
(
hud
{
netxhr
:
true
}
)
;
checkTelemetryEvent
(
{
trigger
:
"
netxhr
"
active
:
"
error
warn
info
debug
netxhr
"
inactive
:
"
text
log
css
net
"
}
)
;
info
(
"
Filter
the
output
using
the
text
filter
input
"
)
;
hud
.
ui
.
filterBox
.
focus
(
)
;
hud
.
ui
.
filterBox
.
select
(
)
;
EventUtils
.
sendString
(
"
no
match
"
)
;
checkTelemetryEvent
(
{
trigger
:
"
text
"
active
:
"
text
error
warn
info
debug
netxhr
"
inactive
:
"
log
css
net
"
}
)
;
info
(
"
Clear
the
filters
using
the
'
Reset
filters
'
button
"
)
;
const
resetButton
=
await
waitFor
(
(
)
=
>
hud
.
ui
.
window
.
document
.
querySelector
(
"
.
reset
-
filters
-
button
"
)
)
;
const
onResetButtonHidden
=
waitFor
(
(
)
=
>
!
hud
.
ui
.
window
.
document
.
querySelector
(
"
.
reset
-
filters
-
button
"
)
)
;
resetButton
.
click
(
)
;
await
onResetButtonHidden
;
checkTelemetryEvent
(
{
trigger
:
"
reset
"
active
:
"
error
warn
log
info
debug
netxhr
"
inactive
:
"
text
css
net
"
}
)
;
}
)
;
function
checkTelemetryEvent
(
expectedEvent
)
{
const
events
=
getFiltersChangedEventsExtra
(
)
;
is
(
events
.
length
1
"
There
was
only
1
event
logged
"
)
;
const
[
event
]
=
events
;
ok
(
event
.
session_id
>
0
"
There
is
a
valid
session_id
in
the
logged
event
"
)
;
const
f
=
e
=
>
JSON
.
stringify
(
e
null
2
)
;
is
(
f
(
event
)
f
(
{
.
.
.
expectedEvent
"
session_id
"
:
event
.
session_id
}
)
"
The
event
has
the
expected
data
"
)
;
}
function
getFiltersChangedEventsExtra
(
)
{
const
snapshot
=
Services
.
telemetry
.
snapshotEvents
(
OPTOUT
true
)
;
const
filtersChangedEvents
=
snapshot
.
parent
.
filter
(
event
=
>
event
[
1
]
=
=
=
"
devtools
.
main
"
&
&
event
[
2
]
=
=
=
"
filters_changed
"
&
&
event
[
3
]
=
=
=
"
webconsole
"
)
;
return
filtersChangedEvents
.
map
(
event
=
>
event
[
5
]
)
;
}
