"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
;
charset
=
utf
-
8
Autocomplete
await
expression
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
webconsole
.
jsterm
.
codeMirror
"
false
)
;
await
performTests
(
)
;
await
pushPref
(
"
devtools
.
webconsole
.
jsterm
.
codeMirror
"
true
)
;
await
performTests
(
)
;
}
)
;
async
function
performTests
(
)
{
const
{
jsterm
}
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
{
autocompletePopup
}
=
jsterm
;
info
(
"
Check
that
the
await
keyword
is
in
the
autocomplete
"
)
;
await
setInputValueForAutocompletion
(
jsterm
"
aw
"
)
;
checkJsTermCompletionValue
(
jsterm
"
ait
"
"
completeNode
has
expected
value
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
is
(
jsterm
.
getInputValue
(
)
"
await
"
"
'
await
'
tab
completion
"
)
;
const
updated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
sendString
(
"
"
)
;
await
updated
;
info
(
"
Check
that
the
autocomplete
popup
is
displayed
"
)
;
const
onPopUpOpen
=
autocompletePopup
.
once
(
"
popup
-
opened
"
)
;
EventUtils
.
sendString
(
"
P
"
)
;
await
onPopUpOpen
;
ok
(
autocompletePopup
.
isOpen
"
popup
is
open
"
)
;
ok
(
autocompletePopup
.
items
.
some
(
item
=
>
item
.
label
=
=
=
"
Promise
"
)
"
popup
has
expected
Promise
item
"
)
;
}
