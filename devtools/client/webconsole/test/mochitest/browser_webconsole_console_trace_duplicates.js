"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
mochitest
/
"
+
"
test
-
console
-
trace
-
duplicates
.
html
"
;
add_task
(
async
function
testTraceMessages
(
)
{
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
message
=
await
waitFor
(
(
)
=
>
findMessage
(
hud
"
foo1
"
)
)
;
const
stackInfo
=
getStackInfo
(
message
)
;
checkStackInfo
(
stackInfo
{
variable
:
"
console
.
trace
(
)
"
repeats
:
3
filename
:
"
test
-
console
-
trace
-
duplicates
.
html
"
line
:
24
column
:
3
stack
:
[
{
functionName
:
"
foo3
"
filename
:
TEST_URI
line
:
24
column
:
3
}
{
functionName
:
"
foo2
"
filename
:
TEST_URI
line
:
20
column
:
3
}
{
functionName
:
"
foo1
"
filename
:
TEST_URI
line
:
12
column
:
3
}
{
functionName
:
"
<
anonymous
>
"
filename
:
TEST_URI
line
:
27
column
:
1
}
]
}
)
;
}
)
;
function
getStackInfo
(
message
)
{
const
lineNode
=
message
.
querySelector
(
"
.
frame
-
link
-
line
"
)
;
const
lc
=
getLineAndColumn
(
lineNode
)
;
const
result
=
{
variable
:
message
.
querySelector
(
"
.
cm
-
variable
"
)
.
textContent
repeats
:
message
.
querySelector
(
"
.
message
-
repeats
"
)
.
textContent
filename
:
message
.
querySelector
(
"
.
frame
-
link
-
filename
"
)
.
textContent
line
:
lc
.
line
column
:
lc
.
column
stack
:
[
]
}
;
const
stack
=
message
.
querySelector
(
"
.
stack
-
trace
"
)
;
if
(
stack
)
{
const
filenameNodes
=
stack
.
querySelectorAll
(
"
.
frame
-
link
-
filename
"
)
;
const
lineNodes
=
stack
.
querySelectorAll
(
"
.
frame
-
link
-
line
"
)
;
const
funcNodes
=
stack
.
querySelectorAll
(
"
.
frame
-
link
-
function
-
display
-
name
"
)
;
for
(
let
i
=
0
;
i
<
filenameNodes
.
length
;
i
+
+
)
{
const
filename
=
filenameNodes
[
i
]
.
textContent
;
const
functionName
=
funcNodes
[
i
]
.
textContent
;
const
{
line
column
}
=
getLineAndColumn
(
lineNodes
[
i
]
)
;
result
.
stack
.
push
(
{
functionName
filename
line
:
line
column
:
column
}
)
;
}
}
return
result
;
}
function
checkStackInfo
(
stackInfo
expected
)
{
is
(
stackInfo
.
variable
expected
.
variable
"
(
expected
.
variable
}
"
command
logged
)
;
is
(
stackInfo
.
repeats
expected
.
repeats
"
expected
number
of
repeats
are
displayed
"
)
;
is
(
stackInfo
.
filename
expected
.
filename
"
expected
filename
is
displayed
"
)
;
is
(
stackInfo
.
line
expected
.
line
"
expected
line
is
displayed
"
)
;
is
(
stackInfo
.
column
expected
.
column
"
expected
column
is
displayed
"
)
;
ok
(
stackInfo
.
stack
.
length
>
0
"
a
stack
is
displayed
"
)
;
is
(
stackInfo
.
stack
.
length
expected
.
stack
.
length
"
the
stack
is
the
expected
length
"
)
;
for
(
let
i
=
0
;
i
<
stackInfo
.
stack
.
length
;
i
+
+
)
{
const
actual
=
stackInfo
.
stack
[
i
]
;
const
stackExpected
=
expected
.
stack
[
i
]
;
is
(
actual
.
functionName
stackExpected
.
functionName
expected
function
name
is
displayed
for
index
{
i
}
)
;
is
(
actual
.
filename
stackExpected
.
filename
expected
filename
is
displayed
for
index
{
i
}
)
;
is
(
actual
.
line
stackExpected
.
line
expected
line
is
displayed
for
index
{
i
}
)
;
is
(
actual
.
column
stackExpected
.
column
expected
column
is
displayed
for
index
{
i
}
)
;
}
}
function
getLineAndColumn
(
node
)
{
let
lineAndColumn
=
node
.
textContent
;
let
line
=
0
;
let
column
=
0
;
if
(
lineAndColumn
.
startsWith
(
"
:
"
)
)
{
lineAndColumn
=
lineAndColumn
.
substr
(
1
)
;
[
line
column
]
=
lineAndColumn
.
split
(
"
:
"
)
;
}
return
{
line
:
line
*
1
column
:
column
*
1
}
;
}
