"
use
strict
"
;
const
HTML
=
<
!
DOCTYPE
html
>
<
html
>
<
body
>
<
h1
>
Select
node
in
inspector
test
<
/
h1
>
<
/
body
>
<
script
>
function
logNode
(
selector
)
{
console
.
log
(
document
.
querySelector
(
selector
)
)
;
}
<
/
script
>
<
/
html
>
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURI
(
HTML
)
;
add_task
(
async
function
(
)
{
const
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
toolbox
=
gDevTools
.
getToolbox
(
hud
.
target
)
;
await
toolbox
.
loadTool
(
"
inspector
"
)
;
const
inspector
=
toolbox
.
getPanel
(
"
inspector
"
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
(
)
=
>
{
content
.
wrappedJSObject
.
logNode
(
"
h1
"
)
;
}
)
;
let
msg
=
await
waitFor
(
(
)
=
>
findMessage
(
hud
"
<
h1
>
"
)
)
;
let
node
=
msg
.
querySelector
(
"
.
objectBox
-
node
"
)
;
ok
(
node
!
=
=
null
"
Node
was
logged
as
expected
"
)
;
let
openInInspectorIcon
=
node
.
querySelector
(
"
.
open
-
inspector
"
)
;
ok
(
openInInspectorIcon
!
=
=
null
"
The
is
an
open
in
inspector
icon
"
)
;
info
(
"
Clicking
on
the
inspector
icon
and
waiting
for
the
"
+
"
inspector
to
be
selected
"
)
;
let
onInspectorSelected
=
toolbox
.
once
(
"
inspector
-
selected
"
)
;
let
onInspectorUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
let
onNewNode
=
toolbox
.
selection
.
once
(
"
new
-
node
-
front
"
)
;
openInInspectorIcon
.
click
(
)
;
await
onInspectorSelected
;
await
onInspectorUpdated
;
let
nodeFront
=
await
onNewNode
;
ok
(
true
"
Inspector
selected
and
new
node
got
selected
"
)
;
is
(
nodeFront
.
displayName
"
h1
"
"
The
expected
node
was
selected
"
)
;
is
(
msg
.
querySelector
(
"
.
arrow
"
)
.
classList
.
contains
(
"
expanded
"
)
false
"
The
object
inspector
wasn
'
t
expanded
"
)
;
}
)
;
