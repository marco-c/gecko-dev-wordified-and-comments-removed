"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
Test
editor
mode
toggle
keyboard
shortcut
"
;
const
EDITOR_PREF
=
"
devtools
.
webconsole
.
input
.
editor
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
webconsole
.
input
.
editor
"
true
)
;
info
(
"
Test
legacy
JsTerm
"
)
;
await
pushPref
(
"
devtools
.
webconsole
.
jsterm
.
codeMirror
"
false
)
;
await
performTest
(
)
;
info
(
"
Test
codeMirror
JsTerm
"
)
;
await
pushPref
(
"
devtools
.
webconsole
.
jsterm
.
codeMirror
"
true
)
;
await
performTest
(
)
;
}
)
;
async
function
performTest
(
)
{
await
pushPref
(
EDITOR_PREF
false
)
;
let
hud
=
await
openNewTabAndConsole
(
TEST_URI
)
;
is
(
isEditorModeEnabled
(
hud
)
false
"
The
console
isn
'
t
in
editor
mode
"
)
;
info
(
"
Enable
the
editor
mode
"
)
;
await
toggleLayout
(
hud
)
;
is
(
isEditorModeEnabled
(
hud
)
true
"
Editor
mode
is
enabled
"
)
;
info
(
"
Close
the
console
and
reopen
it
"
)
;
await
closeConsole
(
)
;
hud
=
await
openConsole
(
)
;
is
(
isEditorModeEnabled
(
hud
)
true
"
Editor
mode
is
still
enabled
"
)
;
info
(
"
Disable
the
editor
mode
"
)
;
await
toggleLayout
(
hud
)
;
is
(
isEditorModeEnabled
(
hud
)
false
"
Editor
was
disabled
"
)
;
info
(
"
Enable
the
editor
mode
again
"
)
;
await
toggleLayout
(
hud
)
;
is
(
isEditorModeEnabled
(
hud
)
true
"
Editor
mode
was
enabled
again
"
)
;
Services
.
prefs
.
clearUserPref
(
EDITOR_PREF
)
;
}
function
toggleLayout
(
hud
)
{
const
isMacOS
=
Services
.
appinfo
.
OS
=
=
=
"
Darwin
"
;
const
enabled
=
isEditorModeEnabled
(
hud
)
;
EventUtils
.
synthesizeKey
(
"
b
"
{
[
isMacOS
?
"
metaKey
"
:
"
ctrlKey
"
]
:
true
}
)
;
return
waitFor
(
(
)
=
>
isEditorModeEnabled
(
hud
)
=
=
=
!
enabled
)
;
}
