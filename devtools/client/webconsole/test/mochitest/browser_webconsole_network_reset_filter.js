"
use
strict
"
;
const
TEST_PATH
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
mochitest
/
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf8
<
p
>
test
file
URI
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
webconsole
.
filter
.
net
"
true
)
;
const
toolbox
=
await
openNewTabAndToolbox
(
TEST_URI
"
webconsole
"
)
;
const
hud
=
toolbox
.
getCurrentPanel
(
)
.
hud
;
const
onMessages
=
waitForMessages
(
{
hud
messages
:
[
{
text
:
"
running
network
console
logging
tests
"
}
{
text
:
"
test
-
network
.
html
"
}
{
text
:
"
testscript
.
js
"
}
]
}
)
;
info
(
"
Wait
for
document
to
load
"
)
;
await
loadDocument
(
TEST_PATH
+
"
test
-
network
.
html
"
)
;
info
(
"
Wait
for
expected
messages
to
appear
"
)
;
await
onMessages
;
const
url
=
TEST_PATH
+
"
testscript
.
js
?
foo
"
;
const
shortUrl
=
TEST_PATH
+
"
testscript
.
js
"
;
info
(
"
Open
the
testscript
.
js
request
in
the
network
monitor
"
)
;
await
openMessageInNetmonitor
(
toolbox
hud
url
shortUrl
)
;
info
(
"
Filter
out
the
current
request
"
)
;
const
panel
=
toolbox
.
getCurrentPanel
(
)
;
const
{
store
windowRequire
}
=
panel
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
toggleRequestFilterType
(
"
js
"
)
)
;
info
(
"
Select
back
the
webconsole
"
)
;
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
is
(
toolbox
.
currentToolId
"
webconsole
"
"
Web
console
was
selected
"
)
;
info
(
"
Open
the
testscript
.
js
request
again
in
the
network
monitor
"
)
;
await
openMessageInNetmonitor
(
toolbox
hud
url
shortUrl
)
;
}
)
;
