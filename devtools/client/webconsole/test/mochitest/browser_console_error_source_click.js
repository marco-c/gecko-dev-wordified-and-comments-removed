"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf8
<
p
>
hello
world
"
+
"
<
button
onclick
=
'
foobar
.
explode
(
)
'
"
+
"
style
=
'
test
-
color
:
green
-
please
'
>
click
!
<
/
button
>
"
;
add_task
(
async
function
(
)
{
await
addTab
(
TEST_URI
)
;
let
hud
=
await
HUDService
.
toggleBrowserConsole
(
)
;
ok
(
hud
"
browser
console
opened
"
)
;
await
setFilterState
(
hud
{
css
:
true
}
)
;
if
(
!
Services
.
appinfo
.
browserTabsRemoteAutostart
)
{
expectUncaughtException
(
)
;
}
info
(
"
generate
exception
and
wait
for
the
message
"
)
;
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
(
)
=
>
{
let
button
=
content
.
document
.
querySelector
(
"
button
"
)
;
button
.
click
(
)
;
}
)
;
await
waitForMessageAndViewSource
(
hud
"
ReferenceError
:
foobar
is
not
defined
"
)
;
await
waitForMessageAndViewSource
(
hud
"
Unknown
property
\
u2018test
-
color
\
u2019
.
"
)
;
await
resetFilters
(
hud
)
;
}
)
;
async
function
waitForMessageAndViewSource
(
hud
message
)
{
let
msg
=
await
waitFor
(
(
)
=
>
findMessage
(
hud
message
)
)
;
ok
(
msg
Message
found
:
"
{
message
}
"
)
;
let
locationNode
=
msg
.
querySelector
(
"
.
message
-
location
.
frame
-
link
-
source
"
)
;
ok
(
locationNode
"
Message
location
link
element
found
"
)
;
let
onTabOpen
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
null
true
)
;
locationNode
.
click
(
)
;
let
newTab
=
await
onTabOpen
;
ok
(
true
"
The
view
source
tab
was
opened
in
response
to
clicking
the
link
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
}
