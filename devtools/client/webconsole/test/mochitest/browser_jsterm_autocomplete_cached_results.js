"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf8
<
p
>
test
cached
autocompletion
results
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
webconsole
.
jsterm
.
codeMirror
"
false
)
;
await
performTests
(
)
;
await
pushPref
(
"
devtools
.
webconsole
.
jsterm
.
codeMirror
"
true
)
;
await
performTests
(
)
;
}
)
;
async
function
performTests
(
)
{
const
{
jsterm
}
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
{
autocompletePopup
:
popup
}
=
jsterm
;
const
jstermComplete
=
(
value
caretPosition
)
=
>
setInputValueForAutocompletion
(
jsterm
value
caretPosition
)
;
await
jstermComplete
(
"
doc
"
)
;
is
(
jsterm
.
getInputValue
(
)
"
doc
"
"
'
docu
'
completion
(
input
.
value
)
"
)
;
checkJsTermCompletionValue
(
jsterm
"
ument
"
"
'
docu
'
completion
(
completeNode
)
"
)
;
await
jstermComplete
(
"
window
.
"
)
;
ok
(
popup
.
getItems
(
)
.
length
>
0
"
'
window
.
'
gave
a
list
of
suggestions
"
)
;
info
(
"
Add
a
property
on
the
window
object
"
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
(
)
=
>
{
content
.
wrappedJSObject
.
window
.
docfoobar
=
true
;
}
)
;
let
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
d
"
)
;
await
onUpdated
;
ok
(
!
getPopupLabels
(
popup
)
.
includes
(
"
docfoobar
"
)
"
autocomplete
popup
does
not
contain
docfoobar
.
List
has
not
been
updated
"
)
;
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
o
"
)
;
await
onUpdated
;
ok
(
!
getPopupLabels
(
popup
)
.
includes
(
"
docfoobar
"
)
"
autocomplete
popup
does
not
contain
docfoobar
.
List
has
not
been
updated
"
)
;
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
await
onUpdated
;
ok
(
!
getPopupLabels
(
popup
)
.
includes
(
"
docfoobar
"
)
"
autocomplete
cached
results
do
not
contain
docfoobar
.
list
has
not
been
updated
"
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
(
)
=
>
{
delete
content
.
wrappedJSObject
.
window
.
docfoobar
;
}
)
;
await
jstermComplete
(
"
window
.
"
)
;
await
jstermComplete
(
"
window
.
getC
"
)
;
ok
(
getPopupLabels
(
popup
)
.
includes
(
"
getComputedStyle
"
)
"
autocomplete
results
do
contain
getComputedStyle
"
)
;
await
jstermComplete
(
"
dump
(
d
"
)
;
ok
(
popup
.
getItems
(
)
.
length
>
0
"
'
dump
(
d
'
gives
non
-
zero
results
"
)
;
await
jstermComplete
(
"
dump
(
window
)
"
-
1
)
;
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
sendString
(
"
.
"
)
;
await
onUpdated
;
ok
(
popup
.
getItems
(
)
.
length
>
0
"
'
dump
(
window
.
'
gave
a
list
of
suggestions
"
)
;
info
(
"
Add
a
property
on
the
window
object
"
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
(
)
=
>
{
content
.
wrappedJSObject
.
window
.
docfoobar
=
true
;
}
)
;
onUpdated
=
jsterm
.
once
(
"
autocomplete
-
updated
"
)
;
EventUtils
.
sendString
(
"
d
"
)
;
await
onUpdated
;
ok
(
!
getPopupLabels
(
popup
)
.
includes
(
"
docfoobar
"
)
"
autocomplete
cached
results
do
not
contain
docfoobar
.
list
has
not
been
updated
"
)
;
}
function
getPopupLabels
(
popup
)
{
return
popup
.
getItems
(
)
.
map
(
item
=
>
item
.
label
)
;
}
