"
use
strict
"
;
const
TEST_URI
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
webconsole
/
"
+
"
test
/
mochitest
/
test
-
autocomplete
-
in
-
stackframe
.
html
"
;
add_task
(
async
function
(
)
{
await
performTests
(
)
;
await
pushPref
(
"
devtools
.
webconsole
.
jsterm
.
codeMirror
"
true
)
;
await
performTests
(
)
;
}
)
;
async
function
performTests
(
)
{
await
pushPref
(
"
devtools
.
debugger
.
new
-
debugger
-
frontend
"
false
)
;
const
{
jsterm
}
=
await
openNewTabAndConsole
(
TEST_URI
)
;
const
{
autocompletePopup
:
popup
}
=
jsterm
;
const
target
=
TargetFactory
.
forTab
(
gBrowser
.
selectedTab
)
;
const
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
const
jstermComplete
=
value
=
>
jstermSetValueAndComplete
(
jsterm
value
)
;
await
jstermComplete
(
"
document
.
title
.
"
)
;
const
newItemsLabels
=
getPopupLabels
(
popup
)
;
ok
(
newItemsLabels
.
length
>
0
"
'
document
.
title
.
'
gave
a
list
of
suggestions
"
)
;
ok
(
newItemsLabels
.
includes
(
"
substr
"
)
results
do
contain
"
substr
"
)
;
ok
(
newItemsLabels
.
includes
(
"
toLowerCase
"
)
results
do
contain
"
toLowerCase
"
)
;
ok
(
newItemsLabels
.
includes
(
"
strike
"
)
results
do
contain
"
strike
"
)
;
await
jstermComplete
(
"
foo
"
)
;
is
(
getPopupLabels
(
popup
)
.
join
(
"
-
"
)
"
foo1Obj
-
foo1
"
"
foo
"
gave
the
expected
suggestions
)
;
await
jstermComplete
(
"
foo1Obj
.
"
)
;
is
(
getPopupLabels
(
popup
)
.
join
(
"
-
"
)
"
prop2
-
prop1
"
"
foo1Obj
.
"
gave
the
expected
suggestions
)
;
await
jstermComplete
(
"
foo1Obj
.
prop2
.
"
)
;
ok
(
getPopupLabels
(
popup
)
.
includes
(
"
prop21
"
)
"
foo1Obj
.
prop2
.
"
gave
the
expected
suggestions
)
;
info
(
"
Opening
Debugger
"
)
;
const
{
panel
}
=
await
openDebugger
(
)
;
info
(
"
Waiting
for
pause
"
)
;
const
stackFrames
=
await
pauseDebugger
(
panel
)
;
info
(
"
Opening
Console
again
"
)
;
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
await
jstermComplete
(
"
foo
"
)
;
is
(
getPopupLabels
(
popup
)
.
join
(
"
-
"
)
"
foo3Obj
-
foo3
-
foo1Obj
-
foo1
"
"
foo
"
gave
the
expected
suggestions
)
;
await
openDebugger
(
)
;
stackFrames
.
selectFrame
(
1
)
;
info
(
"
openConsole
"
)
;
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
await
jstermComplete
(
"
foo
"
)
;
is
(
getPopupLabels
(
popup
)
.
join
(
"
-
"
)
"
foo2Obj
-
foo2
-
foo1Obj
-
foo1
"
"
foo
"
gave
the
expected
suggestions
)
;
await
jstermComplete
(
"
foo2Obj
.
"
)
;
ok
(
getPopupLabels
(
popup
)
.
includes
(
"
prop1
"
)
"
foo2Obj
.
"
returns
"
prop1
"
)
;
await
jstermComplete
(
"
foo2Obj
.
prop1
.
"
)
;
ok
(
getPopupLabels
(
popup
)
.
includes
(
"
prop11
"
)
"
foo2Obj
.
prop1
"
returns
"
prop11
"
)
;
await
jstermComplete
(
"
foo2Obj
.
prop1
.
prop11
.
"
)
;
ok
(
getPopupLabels
(
popup
)
.
includes
(
"
length
"
)
results
do
contain
"
length
"
)
;
await
jstermComplete
(
"
foo2Obj
[
0
]
.
"
)
;
is
(
getPopupLabels
(
popup
)
.
length
0
"
no
items
for
foo2Obj
[
0
]
"
)
;
}
function
getPopupLabels
(
popup
)
{
return
popup
.
getItems
(
)
.
map
(
item
=
>
item
.
label
)
;
}
function
pauseDebugger
(
debuggerPanel
)
{
const
debuggerWin
=
debuggerPanel
.
panelWin
;
const
debuggerController
=
debuggerWin
.
DebuggerController
;
const
thread
=
debuggerController
.
activeThread
;
return
new
Promise
(
resolve
=
>
{
thread
.
addOneTimeListener
(
"
framesadded
"
(
)
=
>
resolve
(
debuggerController
.
StackFrames
)
)
;
info
(
"
firstCall
(
)
"
)
;
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
function
(
)
{
content
.
wrappedJSObject
.
firstCall
(
)
;
}
)
;
}
)
;
}
