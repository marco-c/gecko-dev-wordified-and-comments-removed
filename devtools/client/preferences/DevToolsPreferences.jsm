"
use
strict
"
;
const
Cu
=
Components
.
utils
;
const
{
NetUtil
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
{
}
)
;
const
{
Services
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
DevToolsPreferences
"
]
;
function
readURI
(
uri
)
{
let
stream
=
NetUtil
.
newChannel
(
{
uri
:
NetUtil
.
newURI
(
uri
"
UTF
-
8
"
)
loadUsingSystemPrincipal
:
true
}
)
.
open2
(
)
;
let
count
=
stream
.
available
(
)
;
let
data
=
NetUtil
.
readInputStreamToString
(
stream
count
{
charset
:
"
UTF
-
8
"
}
)
;
stream
.
close
(
)
;
return
data
;
}
function
cleanupPreferencesFileContent
(
content
)
{
let
lines
=
content
.
split
(
"
\
n
"
)
;
let
newLines
=
[
]
;
let
continuation
=
false
;
for
(
let
line
of
lines
)
{
let
isPrefLine
=
/
^
*
pref
\
(
"
(
[
^
"
]
+
)
"
/
.
test
(
line
)
;
if
(
continuation
|
|
isPrefLine
)
{
newLines
.
push
(
line
)
;
continuation
=
!
/
\
)
;
/
.
test
(
line
)
;
}
}
return
newLines
.
join
(
"
\
n
"
)
;
}
function
processPrefFile
(
url
)
{
let
content
=
readURI
(
url
)
;
content
=
cleanupPreferencesFileContent
(
content
)
;
content
.
match
(
/
pref
\
(
"
[
^
"
]
+
"
\
s
*
.
+
\
s
*
\
)
/
g
)
.
forEach
(
item
=
>
{
let
m
=
item
.
match
(
/
pref
\
(
"
(
[
^
"
]
+
)
"
\
s
*
(
.
+
)
\
s
*
\
)
/
)
;
let
name
=
m
[
1
]
;
let
val
=
m
[
2
]
.
trim
(
)
;
if
(
Services
.
prefs
.
prefHasUserValue
(
name
)
)
{
return
;
}
let
defaultBranch
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
if
(
(
val
.
startsWith
(
"
\
"
"
)
&
&
val
.
endsWith
(
"
\
"
"
)
)
|
|
(
val
.
startsWith
(
"
'
"
)
&
&
val
.
endsWith
(
"
'
"
)
)
)
{
val
=
val
.
substr
(
1
val
.
length
-
2
)
;
val
=
val
.
replace
(
/
\
\
"
/
g
'
"
'
)
;
defaultBranch
.
setCharPref
(
name
val
)
;
}
else
if
(
val
.
match
(
/
[
0
-
9
]
+
/
)
)
{
defaultBranch
.
setIntPref
(
name
parseInt
(
val
10
)
)
;
}
else
if
(
val
=
=
"
true
"
|
|
val
=
=
"
false
"
)
{
defaultBranch
.
setBoolPref
(
name
val
=
=
"
true
"
)
;
}
else
{
console
.
log
(
"
Unable
to
match
preference
type
for
value
:
"
val
)
;
}
}
)
;
}
this
.
DevToolsPreferences
=
{
loadPrefs
:
function
(
)
{
processPrefFile
(
"
chrome
:
/
/
devtools
/
content
/
preferences
/
devtools
.
js
"
)
;
processPrefFile
(
"
chrome
:
/
/
devtools
/
content
/
preferences
/
debugger
.
js
"
)
;
processPrefFile
(
"
chrome
:
/
/
devtools
/
content
/
webide
/
webide
-
prefs
.
js
"
)
;
}
}
;
