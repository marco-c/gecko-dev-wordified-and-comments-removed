"
use
strict
"
;
const
{
Cc
Ci
Cu
Cr
}
=
require
(
"
chrome
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
CanvasFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
canvas
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
function
CanvasDebuggerPanel
(
iframeWindow
toolbox
)
{
this
.
panelWin
=
iframeWindow
;
this
.
_toolbox
=
toolbox
;
this
.
_destroyer
=
null
;
EventEmitter
.
decorate
(
this
)
;
}
exports
.
CanvasDebuggerPanel
=
CanvasDebuggerPanel
;
CanvasDebuggerPanel
.
prototype
=
{
open
:
function
(
)
{
let
targetPromise
;
if
(
!
this
.
target
.
isRemote
)
{
targetPromise
=
this
.
target
.
makeRemote
(
)
;
}
else
{
targetPromise
=
Promise
.
resolve
(
this
.
target
)
;
}
return
targetPromise
.
then
(
(
)
=
>
{
this
.
panelWin
.
gToolbox
=
this
.
_toolbox
;
this
.
panelWin
.
gTarget
=
this
.
target
;
this
.
panelWin
.
gFront
=
new
CanvasFront
(
this
.
target
.
client
this
.
target
.
form
)
;
return
this
.
panelWin
.
startupCanvasDebugger
(
)
;
}
)
.
then
(
(
)
=
>
{
this
.
isReady
=
true
;
this
.
emit
(
"
ready
"
)
;
return
this
;
}
)
.
catch
(
function
onError
(
aReason
)
{
DevToolsUtils
.
reportException
(
"
CanvasDebuggerPanel
.
prototype
.
open
"
aReason
)
;
}
)
;
}
get
target
(
)
{
return
this
.
_toolbox
.
target
;
}
destroy
:
function
(
)
{
if
(
this
.
_destroyer
)
{
return
this
.
_destroyer
;
}
return
this
.
_destroyer
=
this
.
panelWin
.
shutdownCanvasDebugger
(
)
.
then
(
(
)
=
>
{
this
.
panelWin
.
gFront
.
destroy
(
)
;
this
.
emit
(
"
destroyed
"
)
;
}
)
;
}
}
;
