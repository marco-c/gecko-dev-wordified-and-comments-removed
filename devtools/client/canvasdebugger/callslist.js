"
use
strict
"
;
const
{
METHOD_FUNCTION
}
=
require
(
"
devtools
/
shared
/
fronts
/
function
-
call
"
)
;
var
CallsListView
=
extend
(
WidgetMethods
{
initialize
:
function
(
)
{
this
.
widget
=
new
SideMenuWidget
(
(
"
#
calls
-
list
"
)
)
;
this
.
_searchbox
=
(
"
#
calls
-
searchbox
"
)
;
this
.
_filmstrip
=
(
"
#
snapshot
-
filmstrip
"
)
;
this
.
_onSelect
=
this
.
_onSelect
.
bind
(
this
)
;
this
.
_onSearch
=
this
.
_onSearch
.
bind
(
this
)
;
this
.
_onScroll
=
this
.
_onScroll
.
bind
(
this
)
;
this
.
_onExpand
=
this
.
_onExpand
.
bind
(
this
)
;
this
.
_onStackFileClick
=
this
.
_onStackFileClick
.
bind
(
this
)
;
this
.
_onThumbnailClick
=
this
.
_onThumbnailClick
.
bind
(
this
)
;
this
.
widget
.
addEventListener
(
"
select
"
this
.
_onSelect
)
;
this
.
_searchbox
.
addEventListener
(
"
input
"
this
.
_onSearch
)
;
this
.
_filmstrip
.
addEventListener
(
"
wheel
"
this
.
_onScroll
)
;
}
destroy
:
function
(
)
{
this
.
widget
.
removeEventListener
(
"
select
"
this
.
_onSelect
)
;
this
.
_searchbox
.
removeEventListener
(
"
input
"
this
.
_onSearch
)
;
this
.
_filmstrip
.
removeEventListener
(
"
wheel
"
this
.
_onScroll
)
;
}
showCalls
:
function
(
functionCalls
)
{
this
.
empty
(
)
;
for
(
let
i
=
0
len
=
functionCalls
.
length
;
i
<
len
;
i
+
+
)
{
const
call
=
functionCalls
[
i
]
;
const
view
=
document
.
createElement
(
"
vbox
"
)
;
view
.
className
=
"
call
-
item
-
view
devtools
-
monospace
"
;
view
.
setAttribute
(
"
flex
"
"
1
"
)
;
const
contents
=
document
.
createElement
(
"
hbox
"
)
;
contents
.
className
=
"
call
-
item
-
contents
"
;
contents
.
setAttribute
(
"
align
"
"
center
"
)
;
contents
.
addEventListener
(
"
dblclick
"
this
.
_onExpand
)
;
view
.
appendChild
(
contents
)
;
const
index
=
document
.
createElement
(
"
label
"
)
;
index
.
className
=
"
plain
call
-
item
-
index
"
;
index
.
setAttribute
(
"
flex
"
"
1
"
)
;
index
.
setAttribute
(
"
value
"
i
+
1
)
;
const
gutter
=
document
.
createElement
(
"
hbox
"
)
;
gutter
.
className
=
"
call
-
item
-
gutter
"
;
gutter
.
appendChild
(
index
)
;
contents
.
appendChild
(
gutter
)
;
if
(
call
.
callerPreview
)
{
const
context
=
document
.
createElement
(
"
label
"
)
;
context
.
className
=
"
plain
call
-
item
-
context
"
;
context
.
setAttribute
(
"
value
"
call
.
callerPreview
)
;
contents
.
appendChild
(
context
)
;
const
separator
=
document
.
createElement
(
"
label
"
)
;
separator
.
className
=
"
plain
call
-
item
-
separator
"
;
separator
.
setAttribute
(
"
value
"
"
.
"
)
;
contents
.
appendChild
(
separator
)
;
}
const
name
=
document
.
createElement
(
"
label
"
)
;
name
.
className
=
"
plain
call
-
item
-
name
"
;
name
.
setAttribute
(
"
value
"
call
.
name
)
;
contents
.
appendChild
(
name
)
;
const
argsPreview
=
document
.
createElement
(
"
label
"
)
;
argsPreview
.
className
=
"
plain
call
-
item
-
args
"
;
argsPreview
.
setAttribute
(
"
crop
"
"
end
"
)
;
argsPreview
.
setAttribute
(
"
flex
"
"
100
"
)
;
if
(
call
.
type
=
=
METHOD_FUNCTION
)
{
argsPreview
.
setAttribute
(
"
value
"
"
(
"
+
call
.
argsPreview
+
"
)
"
)
;
}
else
{
argsPreview
.
setAttribute
(
"
value
"
"
=
"
+
call
.
argsPreview
)
;
}
contents
.
appendChild
(
argsPreview
)
;
const
location
=
document
.
createElement
(
"
label
"
)
;
location
.
className
=
"
plain
call
-
item
-
location
"
;
location
.
setAttribute
(
"
value
"
getFileName
(
call
.
file
)
+
"
:
"
+
call
.
line
)
;
location
.
setAttribute
(
"
crop
"
"
start
"
)
;
location
.
setAttribute
(
"
flex
"
"
1
"
)
;
location
.
addEventListener
(
"
mousedown
"
this
.
_onExpand
)
;
contents
.
appendChild
(
location
)
;
this
.
push
(
[
view
]
{
staged
:
true
attachment
:
{
actor
:
call
}
}
)
;
if
(
CanvasFront
.
DRAW_CALLS
.
has
(
call
.
name
)
)
{
view
.
setAttribute
(
"
draw
-
call
"
"
"
)
;
}
if
(
CanvasFront
.
INTERESTING_CALLS
.
has
(
call
.
name
)
)
{
view
.
setAttribute
(
"
interesting
-
call
"
"
"
)
;
}
}
this
.
commit
(
)
;
window
.
emit
(
EVENTS
.
CALL_LIST_POPULATED
)
;
}
showScreenshot
:
function
(
screenshot
)
{
const
{
index
width
height
scaling
flipped
pixels
}
=
screenshot
;
const
screenshotNode
=
(
"
#
screenshot
-
image
"
)
;
screenshotNode
.
setAttribute
(
"
flipped
"
flipped
)
;
drawBackground
(
"
screenshot
-
rendering
"
width
height
pixels
)
;
const
dimensionsNode
=
(
"
#
screenshot
-
dimensions
"
)
;
const
actualWidth
=
(
width
/
scaling
)
|
0
;
const
actualHeight
=
(
height
/
scaling
)
|
0
;
dimensionsNode
.
setAttribute
(
"
value
"
SHARED_L10N
.
getFormatStr
(
"
dimensions
"
actualWidth
actualHeight
)
)
;
window
.
emit
(
EVENTS
.
CALL_SCREENSHOT_DISPLAYED
)
;
}
showThumbnails
:
function
(
thumbnails
)
{
while
(
this
.
_filmstrip
.
hasChildNodes
(
)
)
{
this
.
_filmstrip
.
firstChild
.
remove
(
)
;
}
for
(
const
thumbnail
of
thumbnails
)
{
this
.
appendThumbnail
(
thumbnail
)
;
}
window
.
emit
(
EVENTS
.
THUMBNAILS_DISPLAYED
)
;
}
appendThumbnail
:
function
(
thumbnail
)
{
const
{
index
width
height
flipped
pixels
}
=
thumbnail
;
const
thumbnailNode
=
document
.
createElementNS
(
HTML_NS
"
canvas
"
)
;
thumbnailNode
.
setAttribute
(
"
flipped
"
flipped
)
;
thumbnailNode
.
width
=
Math
.
max
(
CanvasFront
.
THUMBNAIL_SIZE
width
)
;
thumbnailNode
.
height
=
Math
.
max
(
CanvasFront
.
THUMBNAIL_SIZE
height
)
;
drawImage
(
thumbnailNode
width
height
pixels
{
centered
:
true
}
)
;
thumbnailNode
.
className
=
"
filmstrip
-
thumbnail
"
;
thumbnailNode
.
onmousedown
=
e
=
>
this
.
_onThumbnailClick
(
e
index
)
;
thumbnailNode
.
setAttribute
(
"
index
"
index
)
;
this
.
_filmstrip
.
appendChild
(
thumbnailNode
)
;
}
set
highlightedThumbnail
(
index
)
{
const
currHighlightedThumbnail
=
(
"
.
filmstrip
-
thumbnail
[
index
=
'
"
+
index
+
"
'
]
"
)
;
if
(
currHighlightedThumbnail
=
=
null
)
{
return
;
}
const
prevIndex
=
this
.
_highlightedThumbnailIndex
;
const
prevHighlightedThumbnail
=
(
"
.
filmstrip
-
thumbnail
[
index
=
'
"
+
prevIndex
+
"
'
]
"
)
;
if
(
prevHighlightedThumbnail
)
{
prevHighlightedThumbnail
.
removeAttribute
(
"
highlighted
"
)
;
}
currHighlightedThumbnail
.
setAttribute
(
"
highlighted
"
"
"
)
;
currHighlightedThumbnail
.
scrollIntoView
(
)
;
this
.
_highlightedThumbnailIndex
=
index
;
}
get
highlightedThumbnail
(
)
{
return
this
.
_highlightedThumbnailIndex
;
}
_onSelect
:
function
(
{
detail
:
callItem
}
)
{
if
(
!
callItem
)
{
return
;
}
if
(
this
.
selectedIndex
=
=
this
.
itemCount
-
1
)
{
(
"
#
resume
"
)
.
setAttribute
(
"
disabled
"
"
true
"
)
;
(
"
#
step
-
over
"
)
.
setAttribute
(
"
disabled
"
"
true
"
)
;
(
"
#
step
-
out
"
)
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
else
{
(
"
#
resume
"
)
.
removeAttribute
(
"
disabled
"
)
;
(
"
#
step
-
over
"
)
.
removeAttribute
(
"
disabled
"
)
;
(
"
#
step
-
out
"
)
.
removeAttribute
(
"
disabled
"
)
;
}
if
(
callItem
.
attachment
.
actor
.
isLoadedFromDisk
)
{
return
;
}
setConditionalTimeout
(
"
screenshot
-
display
"
SCREENSHOT_DISPLAY_DELAY
(
)
=
>
{
return
!
this
.
_isSliding
;
}
(
)
=
>
{
const
frameSnapshot
=
SnapshotsListView
.
selectedItem
.
attachment
.
actor
;
const
functionCall
=
callItem
.
attachment
.
actor
;
frameSnapshot
.
generateScreenshotFor
(
functionCall
)
.
then
(
screenshot
=
>
{
this
.
showScreenshot
(
screenshot
)
;
this
.
highlightedThumbnail
=
screenshot
.
index
;
}
)
.
catch
(
console
.
error
)
;
}
)
;
}
_onSearch
:
function
(
e
)
{
const
lowerCaseSearchToken
=
this
.
_searchbox
.
value
.
toLowerCase
(
)
;
this
.
filterContents
(
e
=
>
{
const
call
=
e
.
attachment
.
actor
;
const
name
=
call
.
name
.
toLowerCase
(
)
;
const
file
=
call
.
file
.
toLowerCase
(
)
;
const
line
=
call
.
line
.
toString
(
)
.
toLowerCase
(
)
;
const
args
=
call
.
argsPreview
.
toLowerCase
(
)
;
return
name
.
includes
(
lowerCaseSearchToken
)
|
|
file
.
includes
(
lowerCaseSearchToken
)
|
|
line
.
includes
(
lowerCaseSearchToken
)
|
|
args
.
includes
(
lowerCaseSearchToken
)
;
}
)
;
}
_onScroll
:
function
(
e
)
{
this
.
_filmstrip
.
scrollLeft
+
=
e
.
deltaX
;
}
_onExpand
:
function
(
e
)
{
const
callItem
=
this
.
getItemForElement
(
e
.
target
)
;
const
view
=
(
"
.
call
-
item
-
view
"
callItem
.
target
)
;
if
(
view
.
hasAttribute
(
"
call
-
stack
-
populated
"
)
)
{
const
isExpanded
=
view
.
getAttribute
(
"
call
-
stack
-
expanded
"
)
=
=
"
true
"
;
if
(
e
.
target
.
classList
.
contains
(
"
call
-
item
-
location
"
)
)
{
const
{
file
line
}
=
callItem
.
attachment
.
actor
;
this
.
_viewSourceInDebugger
(
file
line
)
;
return
;
}
view
.
setAttribute
(
"
call
-
stack
-
expanded
"
!
isExpanded
)
;
(
"
.
call
-
item
-
stack
"
view
)
.
hidden
=
isExpanded
;
return
;
}
const
list
=
document
.
createElement
(
"
vbox
"
)
;
list
.
className
=
"
call
-
item
-
stack
"
;
view
.
setAttribute
(
"
call
-
stack
-
populated
"
"
"
)
;
view
.
setAttribute
(
"
call
-
stack
-
expanded
"
"
true
"
)
;
view
.
appendChild
(
list
)
;
const
display
=
stack
=
>
{
for
(
let
i
=
1
;
i
<
stack
.
length
;
i
+
+
)
{
const
call
=
stack
[
i
]
;
const
contents
=
document
.
createElement
(
"
hbox
"
)
;
contents
.
className
=
"
call
-
item
-
stack
-
fn
"
;
contents
.
style
.
paddingInlineStart
=
(
i
*
STACK_FUNC_INDENTATION
)
+
"
px
"
;
const
name
=
document
.
createElement
(
"
label
"
)
;
name
.
className
=
"
plain
call
-
item
-
stack
-
fn
-
name
"
;
name
.
setAttribute
(
"
value
"
"
"
+
call
.
name
+
"
(
)
"
)
;
contents
.
appendChild
(
name
)
;
const
spacer
=
document
.
createElement
(
"
spacer
"
)
;
spacer
.
setAttribute
(
"
flex
"
"
100
"
)
;
contents
.
appendChild
(
spacer
)
;
const
location
=
document
.
createElement
(
"
label
"
)
;
location
.
className
=
"
plain
call
-
item
-
stack
-
fn
-
location
"
;
location
.
setAttribute
(
"
value
"
getFileName
(
call
.
file
)
+
"
:
"
+
call
.
line
)
;
location
.
setAttribute
(
"
crop
"
"
start
"
)
;
location
.
setAttribute
(
"
flex
"
"
1
"
)
;
location
.
addEventListener
(
"
mousedown
"
e
=
>
this
.
_onStackFileClick
(
e
call
)
)
;
contents
.
appendChild
(
location
)
;
list
.
appendChild
(
contents
)
;
}
window
.
emit
(
EVENTS
.
CALL_STACK_DISPLAYED
)
;
}
;
const
functionCall
=
callItem
.
attachment
.
actor
;
if
(
functionCall
.
isLoadedFromDisk
)
{
display
(
functionCall
.
stack
)
;
}
else
{
callItem
.
attachment
.
actor
.
getDetails
(
)
.
then
(
fn
=
>
display
(
fn
.
stack
)
)
;
}
}
_onStackFileClick
:
function
(
e
{
file
line
}
)
{
this
.
_viewSourceInDebugger
(
file
line
)
;
}
_onThumbnailClick
:
function
(
e
index
)
{
this
.
selectedIndex
=
index
;
}
_onResume
:
function
(
)
{
const
drawCall
=
getNextDrawCall
(
this
.
items
this
.
selectedItem
)
;
if
(
drawCall
)
{
this
.
selectedItem
=
drawCall
;
return
;
}
this
.
_onStepOut
(
)
;
}
_onStepOver
:
function
(
)
{
this
.
selectedIndex
+
+
;
}
_onStepIn
:
function
(
)
{
if
(
this
.
selectedIndex
=
=
-
1
)
{
this
.
_onResume
(
)
;
return
;
}
const
callItem
=
this
.
selectedItem
;
const
{
file
line
}
=
callItem
.
attachment
.
actor
;
this
.
_viewSourceInDebugger
(
file
line
)
;
}
_onStepOut
:
function
(
)
{
this
.
selectedIndex
=
this
.
itemCount
-
1
;
}
_viewSourceInDebugger
:
function
(
file
line
)
{
gToolbox
.
viewSourceInDebugger
(
file
line
)
.
then
(
success
=
>
{
if
(
success
)
{
window
.
emit
(
EVENTS
.
SOURCE_SHOWN_IN_JS_DEBUGGER
)
;
}
else
{
window
.
emit
(
EVENTS
.
SOURCE_NOT_FOUND_IN_JS_DEBUGGER
)
;
}
}
)
;
}
}
)
;
