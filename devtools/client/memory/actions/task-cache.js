"
use
strict
"
;
const
{
assert
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
TaskCache
=
(
module
.
exports
=
class
TaskCache
{
constructor
(
)
{
this
.
_cache
=
new
Map
(
)
;
}
get
(
key
)
{
return
this
.
_cache
.
get
(
key
)
;
}
put
(
key
promise
)
{
assert
(
!
this
.
_cache
.
has
(
key
)
"
We
should
not
override
extant
entries
"
)
;
this
.
_cache
.
set
(
key
promise
)
;
}
remove
(
key
)
{
assert
(
this
.
_cache
.
has
(
key
)
Should
have
an
extant
entry
for
key
=
{
key
}
)
;
this
.
_cache
.
delete
(
key
)
;
}
}
)
;
TaskCache
.
declareCacheableTask
=
function
(
{
getCacheKey
task
}
)
{
const
cache
=
new
TaskCache
(
)
;
return
function
(
.
.
.
args
)
{
return
async
function
(
{
dispatch
getState
}
)
{
const
key
=
getCacheKey
(
.
.
.
args
)
;
const
extantResult
=
cache
.
get
(
key
)
;
if
(
extantResult
)
{
return
extantResult
;
}
let
resolve
;
cache
.
put
(
key
new
Promise
(
r
=
>
{
resolve
=
r
;
}
)
)
;
resolve
(
dispatch
(
async
function
(
)
{
try
{
args
.
push
(
(
)
=
>
cache
.
remove
(
key
)
dispatch
getState
)
;
return
await
task
(
.
.
.
args
)
;
}
catch
(
error
)
{
if
(
cache
.
get
(
key
)
)
{
cache
.
remove
(
key
)
;
}
throw
error
;
}
}
)
)
;
return
cache
.
get
(
key
)
;
}
;
}
;
}
;
