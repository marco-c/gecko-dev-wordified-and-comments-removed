"
use
strict
"
;
const
{
assert
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
getSnapshot
breakdownEquals
createSnapshot
}
=
require
(
"
.
.
/
utils
"
)
;
const
{
actions
snapshotState
:
states
}
=
require
(
"
.
.
/
constants
"
)
;
const
takeSnapshotAndCensus
=
exports
.
takeSnapshotAndCensus
=
function
(
front
heapWorker
)
{
return
function
*
(
dispatch
getState
)
{
let
snapshot
=
yield
dispatch
(
takeSnapshot
(
front
)
)
;
yield
dispatch
(
readSnapshot
(
heapWorker
snapshot
)
)
;
yield
dispatch
(
takeCensus
(
heapWorker
snapshot
)
)
;
}
;
}
;
const
selectSnapshotAndRefresh
=
exports
.
selectSnapshotAndRefresh
=
function
(
heapWorker
snapshot
)
{
return
function
*
(
dispatch
getState
)
{
dispatch
(
selectSnapshot
(
snapshot
)
)
;
yield
dispatch
(
takeCensus
(
heapWorker
snapshot
)
)
;
}
;
}
;
const
takeSnapshot
=
exports
.
takeSnapshot
=
function
(
front
)
{
return
function
*
(
dispatch
getState
)
{
let
snapshot
=
createSnapshot
(
)
;
dispatch
(
{
type
:
actions
.
TAKE_SNAPSHOT_START
snapshot
}
)
;
dispatch
(
selectSnapshot
(
snapshot
)
)
;
let
path
=
yield
front
.
saveHeapSnapshot
(
)
;
dispatch
(
{
type
:
actions
.
TAKE_SNAPSHOT_END
snapshot
path
}
)
;
return
snapshot
;
}
;
}
;
const
readSnapshot
=
exports
.
readSnapshot
=
function
readSnapshot
(
heapWorker
snapshot
)
{
return
function
*
(
dispatch
getState
)
{
assert
(
snapshot
.
state
=
=
=
states
.
SAVED
"
Should
only
read
a
snapshot
once
"
)
;
dispatch
(
{
type
:
actions
.
READ_SNAPSHOT_START
snapshot
}
)
;
yield
heapWorker
.
readHeapSnapshot
(
snapshot
.
path
)
;
dispatch
(
{
type
:
actions
.
READ_SNAPSHOT_END
snapshot
}
)
;
}
;
}
;
const
takeCensus
=
exports
.
takeCensus
=
function
(
heapWorker
snapshot
)
{
return
function
*
(
dispatch
getState
)
{
assert
(
[
states
.
READ
states
.
SAVED_CENSUS
]
.
includes
(
snapshot
.
state
)
"
Can
only
take
census
of
snapshots
in
READ
or
SAVED_CENSUS
state
"
)
;
let
census
;
let
inverted
=
getState
(
)
.
inverted
;
let
breakdown
=
getState
(
)
.
breakdown
;
if
(
inverted
=
=
=
snapshot
.
inverted
&
&
breakdownEquals
(
breakdown
snapshot
.
breakdown
)
)
{
return
;
}
do
{
inverted
=
getState
(
)
.
inverted
;
breakdown
=
getState
(
)
.
breakdown
;
dispatch
(
{
type
:
actions
.
TAKE_CENSUS_START
snapshot
inverted
breakdown
}
)
;
let
opts
=
inverted
?
{
asInvertedTreeNode
:
true
}
:
{
asTreeNode
:
true
}
;
census
=
yield
heapWorker
.
takeCensus
(
snapshot
.
path
{
breakdown
}
opts
)
;
}
while
(
inverted
!
=
=
getState
(
)
.
inverted
|
|
!
breakdownEquals
(
breakdown
getState
(
)
.
breakdown
)
)
;
dispatch
(
{
type
:
actions
.
TAKE_CENSUS_END
snapshot
breakdown
inverted
census
}
)
;
}
;
}
;
const
refreshSelectedCensus
=
exports
.
refreshSelectedCensus
=
function
(
heapWorker
)
{
return
function
*
(
dispatch
getState
)
{
let
snapshot
=
getState
(
)
.
snapshots
.
find
(
s
=
>
s
.
selected
)
;
if
(
snapshot
&
&
snapshot
.
state
=
=
=
states
.
SAVED_CENSUS
)
{
yield
dispatch
(
takeCensus
(
heapWorker
snapshot
)
)
;
}
}
;
}
;
const
selectSnapshot
=
exports
.
selectSnapshot
=
function
(
snapshot
)
{
return
{
type
:
actions
.
SELECT_SNAPSHOT
snapshot
}
;
}
;
