"
use
strict
"
;
const
{
assert
reportException
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
censusIsUpToDate
getSnapshot
breakdownEquals
createSnapshot
}
=
require
(
"
.
.
/
utils
"
)
;
const
{
actions
snapshotState
:
states
}
=
require
(
"
.
.
/
constants
"
)
;
const
{
toggleDiffing
}
=
require
(
"
.
/
diffing
"
)
;
const
takeSnapshotAndCensus
=
exports
.
takeSnapshotAndCensus
=
function
(
front
heapWorker
)
{
return
function
*
(
dispatch
getState
)
{
const
id
=
yield
dispatch
(
takeSnapshot
(
front
)
)
;
if
(
id
=
=
=
null
)
{
return
;
}
yield
dispatch
(
readSnapshot
(
heapWorker
id
)
)
;
if
(
getSnapshot
(
getState
(
)
id
)
.
state
=
=
=
states
.
READ
)
{
yield
dispatch
(
takeCensus
(
heapWorker
id
)
)
;
}
}
;
}
;
const
selectSnapshotAndRefresh
=
exports
.
selectSnapshotAndRefresh
=
function
(
heapWorker
id
)
{
return
function
*
(
dispatch
getState
)
{
if
(
getState
(
)
.
diffing
)
{
dispatch
(
toggleDiffing
(
)
)
;
}
dispatch
(
selectSnapshot
(
id
)
)
;
yield
dispatch
(
refreshSelectedCensus
(
heapWorker
)
)
;
}
;
}
;
const
takeSnapshot
=
exports
.
takeSnapshot
=
function
(
front
)
{
return
function
*
(
dispatch
getState
)
{
if
(
getState
(
)
.
diffing
)
{
dispatch
(
toggleDiffing
(
)
)
;
}
const
snapshot
=
createSnapshot
(
)
;
const
id
=
snapshot
.
id
;
dispatch
(
{
type
:
actions
.
TAKE_SNAPSHOT_START
snapshot
}
)
;
dispatch
(
selectSnapshot
(
id
)
)
;
let
path
;
try
{
path
=
yield
front
.
saveHeapSnapshot
(
)
;
}
catch
(
error
)
{
reportException
(
"
takeSnapshot
"
error
)
;
dispatch
(
{
type
:
actions
.
SNAPSHOT_ERROR
id
error
}
)
;
return
null
;
}
dispatch
(
{
type
:
actions
.
TAKE_SNAPSHOT_END
id
path
}
)
;
return
snapshot
.
id
;
}
;
}
;
const
readSnapshot
=
exports
.
readSnapshot
=
function
readSnapshot
(
heapWorker
id
)
{
return
function
*
(
dispatch
getState
)
{
const
snapshot
=
getSnapshot
(
getState
(
)
id
)
;
assert
(
[
states
.
SAVED
states
.
IMPORTING
]
.
includes
(
snapshot
.
state
)
Should
only
read
a
snapshot
once
.
Found
snapshot
in
state
{
snapshot
.
state
}
)
;
let
creationTime
;
dispatch
(
{
type
:
actions
.
READ_SNAPSHOT_START
id
}
)
;
try
{
yield
heapWorker
.
readHeapSnapshot
(
snapshot
.
path
)
;
creationTime
=
yield
heapWorker
.
getCreationTime
(
snapshot
.
path
)
;
}
catch
(
error
)
{
reportException
(
"
readSnapshot
"
error
)
;
dispatch
(
{
type
:
actions
.
SNAPSHOT_ERROR
id
error
}
)
;
return
;
}
dispatch
(
{
type
:
actions
.
READ_SNAPSHOT_END
id
creationTime
}
)
;
}
;
}
;
const
takeCensus
=
exports
.
takeCensus
=
function
(
heapWorker
id
)
{
return
function
*
(
dispatch
getState
)
{
const
snapshot
=
getSnapshot
(
getState
(
)
id
)
;
assert
(
[
states
.
READ
states
.
SAVED_CENSUS
]
.
includes
(
snapshot
.
state
)
Can
only
take
census
of
snapshots
in
READ
or
SAVED_CENSUS
state
found
{
snapshot
.
state
}
)
;
let
report
;
let
inverted
=
getState
(
)
.
inverted
;
let
breakdown
=
getState
(
)
.
breakdown
;
let
filter
=
getState
(
)
.
filter
;
if
(
censusIsUpToDate
(
inverted
filter
breakdown
snapshot
.
census
)
)
{
return
;
}
do
{
inverted
=
getState
(
)
.
inverted
;
breakdown
=
getState
(
)
.
breakdown
;
filter
=
getState
(
)
.
filter
;
dispatch
(
{
type
:
actions
.
TAKE_CENSUS_START
id
inverted
filter
breakdown
}
)
;
let
opts
=
inverted
?
{
asInvertedTreeNode
:
true
}
:
{
asTreeNode
:
true
}
;
opts
.
filter
=
filter
|
|
null
;
try
{
report
=
yield
heapWorker
.
takeCensus
(
snapshot
.
path
{
breakdown
}
opts
)
;
}
catch
(
error
)
{
reportException
(
"
takeCensus
"
error
)
;
dispatch
(
{
type
:
actions
.
SNAPSHOT_ERROR
id
error
}
)
;
return
;
}
}
while
(
inverted
!
=
=
getState
(
)
.
inverted
|
|
filter
!
=
=
getState
(
)
.
filter
|
|
!
breakdownEquals
(
breakdown
getState
(
)
.
breakdown
)
)
;
dispatch
(
{
type
:
actions
.
TAKE_CENSUS_END
id
breakdown
inverted
filter
report
}
)
;
}
;
}
;
const
refreshSelectedCensus
=
exports
.
refreshSelectedCensus
=
function
(
heapWorker
)
{
return
function
*
(
dispatch
getState
)
{
let
snapshot
=
getState
(
)
.
snapshots
.
find
(
s
=
>
s
.
selected
)
;
if
(
snapshot
&
&
snapshot
.
state
=
=
=
states
.
SAVED_CENSUS
)
{
yield
dispatch
(
takeCensus
(
heapWorker
snapshot
.
id
)
)
;
}
}
;
}
;
const
selectSnapshot
=
exports
.
selectSnapshot
=
function
(
id
)
{
return
{
type
:
actions
.
SELECT_SNAPSHOT
id
}
;
}
;
