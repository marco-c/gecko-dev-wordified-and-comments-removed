"
use
strict
"
;
const
{
dominatorTreeState
viewState
treeMapState
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
memory
/
constants
.
js
"
)
;
const
{
takeSnapshotAndCensus
selectSnapshotAndRefresh
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
memory
/
actions
/
snapshot
.
js
"
)
;
const
{
changeView
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
memory
/
actions
/
view
.
js
"
)
;
add_task
(
async
function
(
)
{
const
front
=
new
StubbedMemoryFront
(
)
;
const
heapWorker
=
new
HeapAnalysesClient
(
)
;
await
front
.
attach
(
)
;
const
store
=
Store
(
)
;
const
{
getState
dispatch
}
=
store
;
dispatch
(
takeSnapshotAndCensus
(
front
heapWorker
)
)
;
dispatch
(
takeSnapshotAndCensus
(
front
heapWorker
)
)
;
await
waitUntilCensusState
(
store
s
=
>
s
.
treeMap
[
treeMapState
.
SAVED
treeMapState
.
SAVED
]
)
;
ok
(
getState
(
)
.
snapshots
[
1
]
.
selected
"
The
second
snapshot
is
selected
"
)
;
dispatch
(
changeView
(
viewState
.
DOMINATOR_TREE
)
)
;
await
waitUntilState
(
store
state
=
>
state
.
snapshots
[
1
]
.
dominatorTree
&
&
state
.
snapshots
[
1
]
.
dominatorTree
.
state
=
=
=
dominatorTreeState
.
LOADED
)
;
ok
(
true
"
The
second
snapshot
'
s
dominator
tree
was
fetched
"
)
;
dispatch
(
selectSnapshotAndRefresh
(
heapWorker
getState
(
)
.
snapshots
[
0
]
.
id
)
)
;
await
waitUntilState
(
store
state
=
>
state
.
snapshots
[
0
]
.
dominatorTree
&
&
state
.
snapshots
[
0
]
.
dominatorTree
.
state
=
=
=
dominatorTreeState
.
LOADED
)
;
ok
(
true
"
The
first
snapshot
'
s
dominator
tree
was
fetched
"
)
;
heapWorker
.
destroy
(
)
;
await
front
.
detach
(
)
;
}
)
;
