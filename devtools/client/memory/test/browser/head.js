"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
shared
-
redux
-
head
.
js
"
this
)
;
var
{
snapshotState
:
states
}
=
require
(
"
devtools
/
client
/
memory
/
constants
"
)
;
var
{
breakdownEquals
breakdownNameToSpec
}
=
require
(
"
devtools
/
client
/
memory
/
utils
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
memory
.
enabled
"
true
)
;
this
.
openMemoryPanel
=
Task
.
async
(
function
*
(
tab
)
{
info
(
"
Opening
memory
panel
.
"
)
;
const
target
=
TargetFactory
.
forTab
(
tab
)
;
const
toolbox
=
yield
gDevTools
.
showToolbox
(
target
"
memory
"
)
;
info
(
"
Memory
panel
shown
successfully
.
"
)
;
let
panel
=
toolbox
.
getCurrentPanel
(
)
;
return
{
tab
panel
}
;
}
)
;
this
.
closeMemoryPanel
=
Task
.
async
(
function
*
(
tab
)
{
info
(
"
Closing
memory
panel
.
"
)
;
const
target
=
TargetFactory
.
forTab
(
tab
)
;
const
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
yield
toolbox
.
destroy
(
)
;
info
(
"
Closed
memory
panel
successfully
.
"
)
;
}
)
;
function
makeMemoryTest
(
url
generator
)
{
return
Task
.
async
(
function
*
(
)
{
waitForExplicitFinish
(
)
;
const
tab
=
yield
addTab
(
url
)
;
const
results
=
yield
openMemoryPanel
(
tab
)
;
try
{
yield
*
generator
(
results
)
;
}
catch
(
err
)
{
ok
(
false
"
Got
an
error
:
"
+
DevToolsUtils
.
safeErrorString
(
err
)
)
;
}
yield
closeMemoryPanel
(
tab
)
;
yield
removeTab
(
tab
)
;
finish
(
)
;
}
)
;
}
function
waitUntilDominatorTreeState
(
store
expected
)
{
let
predicate
=
(
)
=
>
{
let
snapshots
=
store
.
getState
(
)
.
snapshots
;
return
snapshots
.
length
=
=
=
expected
.
length
&
&
expected
.
every
(
(
state
i
)
=
>
{
return
snapshots
[
i
]
.
dominatorTree
&
&
snapshots
[
i
]
.
dominatorTree
.
state
=
=
=
state
;
}
)
;
}
;
info
(
Waiting
for
dominator
trees
to
be
of
state
:
{
expected
}
)
;
return
waitUntilState
(
store
predicate
)
;
}
function
takeSnapshot
(
window
)
{
let
{
gStore
document
}
=
window
;
let
snapshotCount
=
gStore
.
getState
(
)
.
snapshots
.
length
;
info
(
Taking
snapshot
.
.
.
)
;
document
.
querySelector
(
"
.
devtools
-
toolbar
.
take
-
snapshot
"
)
.
click
(
)
;
return
waitUntilState
(
gStore
(
)
=
>
gStore
.
getState
(
)
.
snapshots
.
length
=
=
=
snapshotCount
+
1
)
;
}
function
clearSnapshots
(
window
)
{
let
{
gStore
document
}
=
window
;
document
.
querySelector
(
"
.
devtools
-
toolbar
.
clear
-
snapshots
"
)
.
click
(
)
;
return
waitUntilState
(
gStore
(
)
=
>
gStore
.
getState
(
)
.
snapshots
.
every
(
(
snapshot
)
=
>
snapshot
.
state
!
=
=
states
.
SAVED_CENSUS
)
)
;
}
function
setBreakdown
(
window
type
)
{
info
(
Setting
breakdown
to
{
type
}
.
.
.
)
;
let
{
gStore
gHeapAnalysesClient
}
=
window
;
gStore
.
dispatch
(
require
(
"
devtools
/
client
/
memory
/
actions
/
breakdown
"
)
.
setBreakdownAndRefresh
(
gHeapAnalysesClient
breakdownNameToSpec
(
type
)
)
)
;
return
waitUntilState
(
window
.
gStore
(
)
=
>
{
let
selected
=
window
.
gStore
.
getState
(
)
.
snapshots
.
find
(
s
=
>
s
.
selected
)
;
return
selected
.
state
=
=
=
states
.
SAVED_CENSUS
&
&
breakdownEquals
(
breakdownNameToSpec
(
type
)
selected
.
census
.
breakdown
)
;
}
)
;
}
function
getDisplayedSnapshotStatus
(
document
)
{
const
status
=
document
.
querySelector
(
"
.
snapshot
-
status
"
)
;
return
status
?
status
.
textContent
.
trim
(
)
:
null
;
}
function
getSelectedSnapshotIndex
(
store
)
{
let
snapshots
=
store
.
getState
(
)
.
snapshots
;
let
selectedSnapshot
=
snapshots
.
find
(
s
=
>
s
.
selected
)
;
return
snapshots
.
indexOf
(
selectedSnapshot
)
;
}
function
waitUntilSnapshotSelected
(
store
snapshotIndex
)
{
return
waitUntilState
(
store
state
=
>
state
.
snapshots
[
snapshotIndex
]
&
&
state
.
snapshots
[
snapshotIndex
]
.
selected
=
=
=
true
)
;
}
