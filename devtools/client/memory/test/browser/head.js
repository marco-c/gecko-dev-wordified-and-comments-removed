"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
redux
-
head
.
js
"
this
)
;
var
{
censusDisplays
censusState
snapshotState
:
states
}
=
require
(
"
devtools
/
client
/
memory
/
constants
"
)
;
var
{
L10N
}
=
require
(
"
devtools
/
client
/
memory
/
utils
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
memory
.
enabled
"
true
)
;
this
.
openMemoryPanel
=
async
function
(
tab
)
{
info
(
"
Opening
memory
panel
.
"
)
;
const
target
=
await
TargetFactory
.
forTab
(
tab
)
;
const
toolbox
=
await
gDevTools
.
showToolbox
(
target
"
memory
"
)
;
info
(
"
Memory
panel
shown
successfully
.
"
)
;
const
panel
=
toolbox
.
getCurrentPanel
(
)
;
return
{
tab
panel
}
;
}
;
this
.
closeMemoryPanel
=
async
function
(
tab
)
{
info
(
"
Closing
memory
panel
.
"
)
;
const
target
=
await
TargetFactory
.
forTab
(
tab
)
;
const
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
await
toolbox
.
destroy
(
)
;
info
(
"
Closed
memory
panel
successfully
.
"
)
;
}
;
function
makeMemoryTest
(
url
generator
)
{
return
async
function
(
)
{
waitForExplicitFinish
(
)
;
requestLongerTimeout
(
2
)
;
const
tab
=
await
addTab
(
url
)
;
const
results
=
await
openMemoryPanel
(
tab
)
;
try
{
await
generator
(
results
)
;
}
catch
(
err
)
{
ok
(
false
"
Got
an
error
:
"
+
DevToolsUtils
.
safeErrorString
(
err
)
)
;
}
await
closeMemoryPanel
(
tab
)
;
await
removeTab
(
tab
)
;
finish
(
)
;
}
;
}
function
dumpn
(
msg
)
{
dump
(
MEMORY
-
TEST
:
{
msg
}
\
n
)
;
}
function
waitUntilDominatorTreeState
(
store
expected
)
{
const
predicate
=
(
)
=
>
{
const
snapshots
=
store
.
getState
(
)
.
snapshots
;
return
snapshots
.
length
=
=
=
expected
.
length
&
&
expected
.
every
(
(
state
i
)
=
>
{
return
snapshots
[
i
]
.
dominatorTree
&
&
snapshots
[
i
]
.
dominatorTree
.
state
=
=
=
state
;
}
)
;
}
;
info
(
Waiting
for
dominator
trees
to
be
of
state
:
{
expected
}
)
;
return
waitUntilState
(
store
predicate
)
;
}
function
takeSnapshot
(
window
)
{
const
{
gStore
document
}
=
window
;
const
snapshotCount
=
gStore
.
getState
(
)
.
snapshots
.
length
;
info
(
"
Taking
snapshot
.
.
.
"
)
;
document
.
querySelector
(
"
.
devtools
-
toolbar
.
take
-
snapshot
"
)
.
click
(
)
;
return
waitUntilState
(
gStore
(
)
=
>
gStore
.
getState
(
)
.
snapshots
.
length
=
=
=
snapshotCount
+
1
)
;
}
function
clearSnapshots
(
window
)
{
const
{
gStore
document
}
=
window
;
document
.
querySelector
(
"
.
devtools
-
toolbar
.
clear
-
snapshots
"
)
.
click
(
)
;
return
waitUntilState
(
gStore
(
)
=
>
gStore
.
getState
(
)
.
snapshots
.
every
(
(
snapshot
)
=
>
snapshot
.
state
!
=
=
states
.
READ
)
)
;
}
function
setCensusDisplay
(
window
display
)
{
info
(
Setting
census
display
to
{
display
}
.
.
.
)
;
const
{
gStore
gHeapAnalysesClient
}
=
window
;
gStore
.
dispatch
(
require
(
"
devtools
/
client
/
memory
/
actions
/
census
-
display
"
)
.
setCensusDisplayAndRefresh
(
gHeapAnalysesClient
display
)
)
;
return
waitUntilState
(
window
.
gStore
(
)
=
>
{
const
selected
=
window
.
gStore
.
getState
(
)
.
snapshots
.
find
(
s
=
>
s
.
selected
)
;
return
selected
.
state
=
=
=
states
.
READ
&
&
selected
.
census
&
&
selected
.
census
.
state
=
=
=
censusState
.
SAVED
&
&
selected
.
census
.
display
=
=
=
display
;
}
)
;
}
function
getDisplayedSnapshotStatus
(
document
)
{
const
status
=
document
.
querySelector
(
"
.
snapshot
-
status
"
)
;
return
status
?
status
.
textContent
.
trim
(
)
:
null
;
}
function
getSelectedSnapshotIndex
(
store
)
{
const
snapshots
=
store
.
getState
(
)
.
snapshots
;
const
selectedSnapshot
=
snapshots
.
find
(
s
=
>
s
.
selected
)
;
return
snapshots
.
indexOf
(
selectedSnapshot
)
;
}
function
waitUntilSnapshotSelected
(
store
snapshotIndex
)
{
return
waitUntilState
(
store
state
=
>
state
.
snapshots
[
snapshotIndex
]
&
&
state
.
snapshots
[
snapshotIndex
]
.
selected
=
=
=
true
)
;
}
function
waitUntilCensusState
(
store
getCensus
expected
)
{
const
predicate
=
(
)
=
>
{
const
snapshots
=
store
.
getState
(
)
.
snapshots
;
info
(
"
Current
census
state
:
"
+
snapshots
.
map
(
x
=
>
getCensus
(
x
)
?
getCensus
(
x
)
.
state
:
null
)
)
;
return
snapshots
.
length
=
=
=
expected
.
length
&
&
expected
.
every
(
(
state
i
)
=
>
{
const
census
=
getCensus
(
snapshots
[
i
]
)
;
return
(
state
=
=
=
"
*
"
)
|
|
(
!
census
&
&
!
state
)
|
|
(
census
&
&
census
.
state
=
=
=
state
)
;
}
)
;
}
;
info
(
Waiting
for
snapshot
censuses
to
be
of
state
:
{
expected
}
)
;
return
waitUntilState
(
store
predicate
)
;
}
function
createRAFMock
(
)
{
let
queuedFns
=
[
]
;
const
mock
=
{
timesCalled
:
0
}
;
mock
.
nextFrame
=
function
(
)
{
const
thisQueue
=
queuedFns
;
queuedFns
=
[
]
;
for
(
let
i
=
0
;
i
<
thisQueue
.
length
;
i
+
+
)
{
thisQueue
[
i
]
(
)
;
}
}
;
mock
.
raf
=
function
(
fn
)
{
mock
.
timesCalled
+
+
;
queuedFns
.
push
(
fn
)
;
}
;
return
mock
;
}
function
floatEquality
(
a
b
)
{
const
EPSILON
=
0
.
00000000001
;
const
equals
=
Math
.
abs
(
a
-
b
)
<
EPSILON
;
if
(
!
equals
)
{
info
(
{
a
}
not
equal
to
{
b
}
)
;
}
return
equals
;
}
