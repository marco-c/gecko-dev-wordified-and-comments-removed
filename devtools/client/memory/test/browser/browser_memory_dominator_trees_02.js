"
use
strict
"
;
const
{
dominatorTreeState
viewState
}
=
require
(
"
devtools
/
client
/
memory
/
constants
"
)
;
const
{
changeView
}
=
require
(
"
devtools
/
client
/
memory
/
actions
/
view
"
)
;
const
TEST_URL
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
memory
/
test
/
browser
/
doc_steady_allocation
.
html
"
;
function
clickOnNodeArrow
(
node
panel
)
{
EventUtils
.
synthesizeMouseAtCenter
(
node
.
querySelector
(
"
.
arrow
"
)
{
}
panel
.
panelWin
)
;
}
this
.
test
=
makeMemoryTest
(
TEST_URL
async
function
(
{
panel
}
)
{
requestLongerTimeout
(
4
)
;
const
store
=
panel
.
panelWin
.
gStore
;
const
{
getState
dispatch
}
=
store
;
const
doc
=
panel
.
panelWin
.
document
;
dispatch
(
changeView
(
viewState
.
DOMINATOR_TREE
)
)
;
const
takeSnapshotButton
=
doc
.
getElementById
(
"
take
-
snapshot
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
takeSnapshotButton
{
}
panel
.
panelWin
)
;
await
waitUntilState
(
store
state
=
>
state
.
snapshots
[
0
]
&
&
state
.
snapshots
[
0
]
.
dominatorTree
&
&
state
.
snapshots
[
0
]
.
dominatorTree
.
state
=
=
=
dominatorTreeState
.
LOADED
)
;
ok
(
true
"
Computed
and
fetched
the
dominator
tree
.
"
)
;
const
root
=
getState
(
)
.
snapshots
[
0
]
.
dominatorTree
.
root
;
ok
(
getState
(
)
.
snapshots
[
0
]
.
dominatorTree
.
expanded
.
has
(
root
.
nodeId
)
"
Root
node
is
expanded
by
default
"
)
;
const
rootNode
=
doc
.
querySelector
(
.
node
-
{
root
.
nodeId
}
)
;
clickOnNodeArrow
(
rootNode
panel
)
;
await
waitUntilState
(
store
state
=
>
state
.
snapshots
[
0
]
&
&
state
.
snapshots
[
0
]
.
dominatorTree
&
&
!
state
.
snapshots
[
0
]
.
dominatorTree
.
expanded
.
has
(
root
.
nodeId
)
)
;
ok
(
true
"
Root
node
collapsed
"
)
;
clickOnNodeArrow
(
rootNode
panel
)
;
await
waitUntilState
(
store
state
=
>
state
.
snapshots
[
0
]
&
&
state
.
snapshots
[
0
]
.
dominatorTree
&
&
state
.
snapshots
[
0
]
.
dominatorTree
.
expanded
.
has
(
root
.
nodeId
)
)
;
ok
(
true
"
Root
node
is
expanded
again
"
)
;
}
)
;
