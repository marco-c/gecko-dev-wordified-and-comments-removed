const
{
assert
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
Preferences
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
const
CUSTOM_BREAKDOWN_PREF
=
"
devtools
.
memory
.
custom
-
breakdowns
"
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
snapshotState
:
states
breakdowns
}
=
require
(
"
.
/
constants
"
)
;
const
SAVING_SNAPSHOT_TEXT
=
"
Saving
snapshot
.
.
.
"
;
const
READING_SNAPSHOT_TEXT
=
"
Reading
snapshot
.
.
.
"
;
const
SAVING_CENSUS_TEXT
=
"
Taking
heap
census
.
.
.
"
;
exports
.
getBreakdownDisplayData
=
function
(
)
{
return
exports
.
getBreakdownNames
(
)
.
map
(
name
=
>
{
let
preset
=
breakdowns
[
name
]
;
let
displayName
=
name
;
if
(
preset
&
&
preset
.
displayName
)
{
displayName
=
preset
.
displayName
;
}
return
{
name
displayName
}
;
}
)
;
}
;
exports
.
getBreakdownNames
=
function
(
)
{
let
custom
=
exports
.
getCustomBreakdowns
(
)
;
return
Object
.
keys
(
Object
.
assign
(
{
}
breakdowns
custom
)
)
;
}
;
exports
.
getCustomBreakdowns
=
function
(
)
{
let
customBreakdowns
=
Object
.
create
(
null
)
;
try
{
customBreakdowns
=
JSON
.
parse
(
Preferences
.
get
(
CUSTOM_BREAKDOWN_PREF
)
)
|
|
Object
.
create
(
null
)
;
}
catch
(
e
)
{
DevToolsUtils
.
reportException
(
String
stored
in
"
{
CUSTOM_BREAKDOWN_PREF
}
"
pref
cannot
be
parsed
by
\
JSON
.
parse
(
)
\
.
)
;
}
return
customBreakdowns
;
}
exports
.
breakdownNameToSpec
=
function
(
name
)
{
let
customBreakdowns
=
exports
.
getCustomBreakdowns
(
)
;
if
(
typeof
name
=
=
=
"
object
"
)
{
return
name
;
}
else
if
(
name
in
customBreakdowns
)
{
return
customBreakdowns
[
name
]
;
}
else
if
(
name
in
breakdowns
)
{
return
breakdowns
[
name
]
.
breakdown
;
}
return
Object
.
create
(
null
)
;
}
;
exports
.
getSnapshotStatusText
=
function
(
snapshot
)
{
assert
(
(
snapshot
|
|
{
}
)
.
state
Snapshot
must
have
expected
state
found
{
(
snapshot
|
|
{
}
)
.
state
}
.
)
;
switch
(
snapshot
.
state
)
{
case
states
.
SAVING
:
return
SAVING_SNAPSHOT_TEXT
;
case
states
.
SAVED
:
case
states
.
READING
:
return
READING_SNAPSHOT_TEXT
;
case
states
.
SAVING_CENSUS
:
return
SAVING_CENSUS_TEXT
;
case
states
.
READ
:
case
states
.
SAVED_CENSUS
:
return
"
"
;
}
DevToolsUtils
.
reportException
(
Snapshot
in
unexpected
state
:
{
snapshot
.
state
}
)
;
return
"
"
;
}
exports
.
getSnapshot
=
function
getSnapshot
(
snapshots
snapshot
)
{
let
found
=
snapshots
.
find
(
s
=
>
s
.
id
=
=
=
snapshot
.
id
)
;
if
(
!
found
)
{
DevToolsUtils
.
reportException
(
No
matching
snapshot
found
for
{
snapshot
.
id
}
)
;
}
return
found
|
|
null
;
}
;
let
INC_ID
=
0
;
exports
.
createSnapshot
=
function
createSnapshot
(
)
{
let
id
=
+
+
INC_ID
;
return
{
id
state
:
states
.
SAVING
census
:
null
path
:
null
}
;
}
;
exports
.
breakdownEquals
=
function
(
obj1
obj2
)
{
let
type1
=
typeof
obj1
;
let
type2
=
typeof
obj2
;
if
(
type1
!
=
=
type2
|
|
(
Array
.
isArray
(
obj1
)
!
=
=
Array
.
isArray
(
obj2
)
)
)
{
return
false
;
}
if
(
obj1
=
=
=
obj2
)
{
return
true
;
}
if
(
Array
.
isArray
(
obj1
)
)
{
if
(
obj1
.
length
!
=
=
obj2
.
length
)
{
return
false
;
}
return
obj1
.
every
(
(
_
i
)
=
>
exports
.
breakdownEquals
(
obj
[
1
]
obj2
[
i
]
)
)
;
}
else
if
(
type1
=
=
=
"
object
"
)
{
let
k1
=
Object
.
keys
(
obj1
)
;
let
k2
=
Object
.
keys
(
obj2
)
;
if
(
k1
.
length
!
=
=
k2
.
length
)
{
return
false
;
}
return
k1
.
every
(
k
=
>
exports
.
breakdownEquals
(
obj1
[
k
]
obj2
[
k
]
)
)
;
}
return
false
;
}
;
