const
{
telemetry
}
=
require
(
"
Services
"
)
;
const
{
makeInfallible
immutableUpdate
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
dominatorTreeBreakdowns
breakdowns
}
=
require
(
"
.
/
constants
"
)
;
exports
.
countTakeSnapshot
=
makeInfallible
(
function
(
)
{
const
histogram
=
telemetry
.
getHistogramById
(
"
DEVTOOLS_MEMORY_TAKE_SNAPSHOT_COUNT
"
)
;
histogram
.
add
(
1
)
;
}
"
devtools
/
client
/
memory
/
telemetry
#
countTakeSnapshot
"
)
;
exports
.
countImportSnapshot
=
makeInfallible
(
function
(
)
{
const
histogram
=
telemetry
.
getHistogramById
(
"
DEVTOOLS_MEMORY_IMPORT_SNAPSHOT_COUNT
"
)
;
histogram
.
add
(
1
)
;
}
"
devtools
/
client
/
memory
/
telemetry
#
countImportSnapshot
"
)
;
exports
.
countExportSnapshot
=
makeInfallible
(
function
(
)
{
const
histogram
=
telemetry
.
getHistogramById
(
"
DEVTOOLS_MEMORY_EXPORT_SNAPSHOT_COUNT
"
)
;
histogram
.
add
(
1
)
;
}
"
devtools
/
client
/
memory
/
telemetry
#
countExportSnapshot
"
)
;
const
COARSE_TYPE
=
"
Coarse
Type
"
;
const
ALLOCATION_STACK
=
"
Allocation
Stack
"
;
const
OBJECT_CLASS
=
"
Object
Class
"
;
const
INTERNAL_TYPE
=
"
Internal
Type
"
;
const
CUSTOM
=
"
Custom
"
;
exports
.
countCensus
=
makeInfallible
(
function
(
{
inverted
filter
diffing
breakdown
}
)
{
let
histogram
=
telemetry
.
getHistogramById
(
"
DEVTOOLS_MEMORY_INVERTED_CENSUS
"
)
;
histogram
.
add
(
!
!
inverted
)
;
histogram
=
telemetry
.
getHistogramById
(
"
DEVTOOLS_MEMORY_FILTER_CENSUS
"
)
;
histogram
.
add
(
!
!
filter
)
;
histogram
=
telemetry
.
getHistogramById
(
"
DEVTOOLS_MEMORY_DIFF_CENSUS
"
)
;
histogram
.
add
(
!
!
diffing
)
;
histogram
=
telemetry
.
getKeyedHistogramById
(
"
DEVTOOLS_MEMORY_BREAKDOWN_CENSUS_COUNT
"
)
;
if
(
breakdown
=
=
=
breakdowns
.
coarseType
.
breakdown
)
{
histogram
.
add
(
COARSE_TYPE
)
;
}
else
if
(
breakdown
=
=
=
breakdowns
.
allocationStack
.
breakdown
)
{
histogram
.
add
(
ALLOCATION_STACK
)
;
}
else
{
histogram
.
add
(
CUSTOM
)
;
}
}
"
devtools
/
client
/
memory
/
telemetry
#
countCensus
"
)
;
exports
.
countDiff
=
makeInfallible
(
function
(
opts
)
{
exports
.
countCensus
(
immutableUpdate
(
opts
{
diffing
:
true
}
)
)
;
}
"
devtools
/
client
/
memory
/
telemetry
#
countDiff
"
)
;
exports
.
countDominatorTree
=
makeInfallible
(
function
(
{
breakdown
}
)
{
let
histogram
=
telemetry
.
getHistogramById
(
"
DEVTOOLS_MEMORY_DOMINATOR_TREE_COUNT
"
)
;
histogram
.
add
(
1
)
;
histogram
=
telemetry
.
getKeyedHistogramById
(
"
DEVTOOLS_MEMORY_BREAKDOWN_DOMINATOR_TREE_COUNT
"
)
;
if
(
breakdown
=
=
=
dominatorTreeBreakdowns
.
coarseType
.
breakdown
)
{
histogram
.
add
(
COARSE_TYPE
)
;
}
else
if
(
breakdown
=
=
=
dominatorTreeBreakdowns
.
allocationStack
.
breakdown
)
{
histogram
.
add
(
ALLOCATION_STACK
)
;
}
else
{
histogram
.
add
(
CUSTOM
)
;
}
}
"
devtools
/
client
/
memory
/
telemetry
#
countDominatorTree
"
)
;
