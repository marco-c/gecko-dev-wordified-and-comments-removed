"
use
strict
"
;
const
{
createFactory
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
App
=
createFactory
(
require
(
"
devtools
/
client
/
memory
/
app
"
)
)
;
const
Store
=
require
(
"
devtools
/
client
/
memory
/
store
"
)
;
const
{
assert
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
let
root
store
unsubscribe
;
const
initialize
=
async
function
(
)
{
let
{
gFront
gToolbox
gHeapAnalysesClient
}
=
window
;
root
=
document
.
querySelector
(
"
#
app
"
)
;
store
=
Store
(
)
;
const
app
=
createElement
(
App
{
toolbox
:
gToolbox
front
:
gFront
heapWorker
:
gHeapAnalysesClient
}
)
;
const
provider
=
createElement
(
Provider
{
store
}
app
)
;
ReactDOM
.
render
(
provider
root
)
;
unsubscribe
=
store
.
subscribe
(
onStateChange
)
;
window
.
gStore
=
store
;
}
;
const
destroy
=
async
function
(
)
{
const
ok
=
ReactDOM
.
unmountComponentAtNode
(
root
)
;
assert
(
ok
"
Should
successfully
unmount
the
memory
tool
'
s
top
level
React
component
"
)
;
unsubscribe
(
)
;
}
;
let
isHighlighted
;
function
onStateChange
(
)
{
let
{
gToolbox
}
=
window
;
let
isRecording
=
store
.
getState
(
)
.
allocations
.
recording
;
if
(
isRecording
=
=
=
isHighlighted
)
{
return
;
}
if
(
isRecording
)
{
gToolbox
.
highlightTool
(
"
memory
"
)
;
}
else
{
gToolbox
.
unhighlightTool
(
"
memory
"
)
;
}
isHighlighted
=
isRecording
;
}
module
.
exports
=
{
initialize
destroy
}
;
