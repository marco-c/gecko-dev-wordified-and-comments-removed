"
use
strict
"
;
const
{
Cc
Ci
Cu
Cr
}
=
require
(
"
chrome
"
)
;
const
{
L10N
}
=
require
(
"
devtools
/
client
/
performance
/
modules
/
global
"
)
;
const
{
Heritage
}
=
require
(
"
resource
:
/
/
/
modules
/
devtools
/
client
/
shared
/
widgets
/
ViewHelpers
.
jsm
"
)
;
const
{
AbstractTreeItem
}
=
require
(
"
resource
:
/
/
/
modules
/
devtools
/
client
/
shared
/
widgets
/
AbstractTreeItem
.
jsm
"
)
;
const
INDENTATION
=
exports
.
INDENTATION
=
16
;
const
DEFAULT_AUTO_EXPAND_DEPTH
=
2
;
const
COURSE_TYPES
=
[
"
objects
"
"
scripts
"
"
strings
"
"
other
"
]
;
function
CensusView
(
{
caller
censusTreeNode
level
hidden
autoExpandDepth
}
)
{
AbstractTreeItem
.
call
(
this
{
parent
:
caller
level
:
level
|
0
-
(
hidden
?
1
:
0
)
}
)
;
this
.
autoExpandDepth
=
autoExpandDepth
!
=
null
?
autoExpandDepth
:
caller
?
caller
.
autoExpandDepth
:
DEFAULT_AUTO_EXPAND_DEPTH
;
this
.
caller
=
caller
;
this
.
censusTreeNode
=
censusTreeNode
;
this
.
hidden
=
hidden
;
}
;
CensusView
.
prototype
=
Heritage
.
extend
(
AbstractTreeItem
.
prototype
{
_displaySelf
:
function
(
document
arrowNode
)
{
let
data
=
this
.
censusTreeNode
;
let
cells
=
[
]
;
if
(
data
.
children
&
&
data
.
children
.
length
)
{
cells
.
push
(
arrowNode
)
;
}
cells
.
push
(
this
.
_createCell
(
document
data
.
name
"
name
"
)
)
;
if
(
data
.
bytes
!
=
null
)
{
cells
.
push
(
this
.
_createCell
(
document
data
.
bytes
"
bytes
"
)
)
;
}
if
(
data
.
count
!
=
null
)
{
cells
.
push
(
this
.
_createCell
(
document
data
.
count
"
count
"
)
)
;
}
let
targetNode
=
document
.
createElement
(
"
li
"
)
;
targetNode
.
className
=
"
heap
-
tree
-
item
"
;
targetNode
.
style
.
MozMarginStart
=
{
this
.
level
*
INDENTATION
}
px
;
if
(
this
.
hidden
)
{
targetNode
.
style
.
display
=
"
none
"
;
}
for
(
let
i
=
0
;
i
<
cells
.
length
;
i
+
+
)
{
targetNode
.
appendChild
(
cells
[
i
]
)
;
}
return
targetNode
;
}
_populateSelf
:
function
(
children
)
{
let
newLevel
=
this
.
level
+
1
;
let
data
=
this
.
censusTreeNode
;
if
(
data
.
children
)
{
for
(
let
node
of
data
.
children
)
{
children
.
push
(
new
CensusView
(
{
caller
:
this
level
:
newLevel
censusTreeNode
:
node
}
)
)
;
}
}
}
_createCell
:
function
(
doc
value
type
)
{
let
cell
=
doc
.
createElement
(
"
span
"
)
;
cell
.
className
=
"
plain
heap
-
tree
-
cell
"
;
cell
.
setAttribute
(
"
type
"
type
)
;
cell
.
innerHTML
=
value
;
return
cell
;
}
}
)
;
exports
.
CensusView
=
CensusView
;
