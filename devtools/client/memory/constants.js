"
use
strict
"
;
exports
.
ALLOCATION_RECORDING_OPTIONS
=
{
probability
:
1
maxLogLength
:
1
}
;
exports
.
TREE_ROW_HEIGHT
=
14
;
const
actions
=
exports
.
actions
=
{
}
;
actions
.
TAKE_SNAPSHOT_START
=
"
take
-
snapshot
-
start
"
;
actions
.
TAKE_SNAPSHOT_END
=
"
take
-
snapshot
-
end
"
;
actions
.
READ_SNAPSHOT_START
=
"
read
-
snapshot
-
start
"
;
actions
.
READ_SNAPSHOT_END
=
"
read
-
snapshot
-
end
"
;
actions
.
TAKE_CENSUS_START
=
"
take
-
census
-
start
"
;
actions
.
TAKE_CENSUS_END
=
"
take
-
census
-
end
"
;
actions
.
TOGGLE_RECORD_ALLOCATION_STACKS_START
=
"
toggle
-
record
-
allocation
-
stacks
-
start
"
;
actions
.
TOGGLE_RECORD_ALLOCATION_STACKS_END
=
"
toggle
-
record
-
allocation
-
stacks
-
end
"
;
actions
.
EXPORT_SNAPSHOT_START
=
"
export
-
snapshot
-
start
"
;
actions
.
EXPORT_SNAPSHOT_END
=
"
export
-
snapshot
-
end
"
;
actions
.
EXPORT_SNAPSHOT_ERROR
=
"
export
-
snapshot
-
error
"
;
actions
.
IMPORT_SNAPSHOT_START
=
"
import
-
snapshot
-
start
"
;
actions
.
IMPORT_SNAPSHOT_END
=
"
import
-
snapshot
-
end
"
;
actions
.
IMPORT_SNAPSHOT_ERROR
=
"
import
-
snapshot
-
error
"
;
actions
.
SELECT_SNAPSHOT
=
"
select
-
snapshot
"
;
actions
.
DELETE_SNAPSHOTS_START
=
"
delete
-
snapshots
-
start
"
;
actions
.
DELETE_SNAPSHOTS_END
=
"
delete
-
snapshots
-
end
"
;
actions
.
TOGGLE_INVERTED
=
"
toggle
-
inverted
"
;
actions
.
SELECT_SNAPSHOT_FOR_DIFFING
=
"
select
-
snapshot
-
for
-
diffing
"
;
actions
.
TAKE_CENSUS_DIFF_START
=
"
take
-
census
-
diff
-
start
"
;
actions
.
TAKE_CENSUS_DIFF_END
=
"
take
-
census
-
diff
-
end
"
;
actions
.
DIFFING_ERROR
=
"
diffing
-
error
"
;
actions
.
SET_BREAKDOWN
=
"
set
-
breakdown
"
;
actions
.
SET_DOMINATOR_TREE_BREAKDOWN
=
"
set
-
dominator
-
tree
-
breakdown
"
;
actions
.
CHANGE_VIEW
=
"
change
-
view
"
;
actions
.
SNAPSHOT_ERROR
=
"
snapshot
-
error
"
;
actions
.
SET_FILTER_STRING
=
"
set
-
filter
-
string
"
;
actions
.
EXPAND_CENSUS_NODE
=
"
expand
-
census
-
node
"
;
actions
.
EXPAND_DIFFING_CENSUS_NODE
=
"
expand
-
diffing
-
census
-
node
"
;
actions
.
COLLAPSE_CENSUS_NODE
=
"
collapse
-
census
-
node
"
;
actions
.
COLLAPSE_DIFFING_CENSUS_NODE
=
"
collapse
-
diffing
-
census
-
node
"
;
actions
.
FOCUS_CENSUS_NODE
=
"
focus
-
census
-
node
"
;
actions
.
FOCUS_DIFFING_CENSUS_NODE
=
"
focus
-
diffing
-
census
-
node
"
;
actions
.
FOCUS_DOMINATOR_TREE_NODE
=
"
focus
-
dominator
-
tree
-
node
"
;
actions
.
COMPUTE_DOMINATOR_TREE_START
=
"
compute
-
dominator
-
tree
-
start
"
;
actions
.
COMPUTE_DOMINATOR_TREE_END
=
"
compute
-
dominator
-
tree
-
end
"
;
actions
.
FETCH_DOMINATOR_TREE_START
=
"
fetch
-
dominator
-
tree
-
start
"
;
actions
.
FETCH_DOMINATOR_TREE_END
=
"
fetch
-
dominator
-
tree
-
end
"
;
actions
.
DOMINATOR_TREE_ERROR
=
"
dominator
-
tree
-
error
"
;
actions
.
FETCH_IMMEDIATELY_DOMINATED_START
=
"
fetch
-
immediately
-
dominated
-
start
"
;
actions
.
FETCH_IMMEDIATELY_DOMINATED_END
=
"
fetch
-
immediately
-
dominated
-
end
"
;
actions
.
EXPAND_DOMINATOR_TREE_NODE
=
"
expand
-
dominator
-
tree
-
node
"
;
actions
.
COLLAPSE_DOMINATOR_TREE_NODE
=
"
collapse
-
dominator
-
tree
-
node
"
;
const
COUNT
=
{
by
:
"
count
"
count
:
true
bytes
:
true
}
;
const
INTERNAL_TYPE
=
{
by
:
"
internalType
"
then
:
COUNT
}
;
const
ALLOCATION_STACK
=
{
by
:
"
allocationStack
"
then
:
COUNT
noStack
:
COUNT
}
;
const
OBJECT_CLASS
=
{
by
:
"
objectClass
"
then
:
COUNT
other
:
COUNT
}
;
const
breakdowns
=
exports
.
breakdowns
=
{
coarseType
:
{
displayName
:
"
Type
"
get
tooltip
(
)
{
const
{
L10N
}
=
require
(
"
.
/
utils
"
)
;
return
L10N
.
getStr
(
"
breakdowns
.
coarseType
.
tooltip
"
)
;
}
breakdown
:
{
by
:
"
coarseType
"
objects
:
OBJECT_CLASS
strings
:
COUNT
scripts
:
{
by
:
"
filename
"
then
:
INTERNAL_TYPE
noFilename
:
INTERNAL_TYPE
}
other
:
INTERNAL_TYPE
}
}
allocationStack
:
{
displayName
:
"
Call
Stack
"
get
tooltip
(
)
{
const
{
L10N
}
=
require
(
"
.
/
utils
"
)
;
return
L10N
.
getStr
(
"
breakdowns
.
allocationStack
.
tooltip
"
)
;
}
breakdown
:
ALLOCATION_STACK
}
}
;
const
DOMINATOR_TREE_LABEL_COARSE_TYPE
=
{
by
:
"
coarseType
"
objects
:
OBJECT_CLASS
scripts
:
{
by
:
"
internalType
"
then
:
{
by
:
"
filename
"
then
:
COUNT
noFilename
:
COUNT
}
}
strings
:
INTERNAL_TYPE
other
:
INTERNAL_TYPE
}
;
const
dominatorTreeBreakdowns
=
exports
.
dominatorTreeBreakdowns
=
{
coarseType
:
{
displayName
:
"
Type
"
get
tooltip
(
)
{
const
{
L10N
}
=
require
(
"
.
/
utils
"
)
;
return
L10N
.
getStr
(
"
dominatorTreeBreakdowns
.
coarseType
.
tooltip
"
)
;
}
breakdown
:
DOMINATOR_TREE_LABEL_COARSE_TYPE
}
allocationStack
:
{
displayName
:
"
Call
Stack
"
get
tooltip
(
)
{
const
{
L10N
}
=
require
(
"
.
/
utils
"
)
;
return
L10N
.
getStr
(
"
dominatorTreeBreakdowns
.
allocationStack
.
tooltip
"
)
;
}
breakdown
:
{
by
:
"
allocationStack
"
then
:
DOMINATOR_TREE_LABEL_COARSE_TYPE
noStack
:
DOMINATOR_TREE_LABEL_COARSE_TYPE
}
}
}
;
const
viewState
=
exports
.
viewState
=
Object
.
create
(
null
)
;
viewState
.
CENSUS
=
"
view
-
state
-
census
"
;
viewState
.
DIFFING
=
"
view
-
state
-
diffing
"
;
viewState
.
DOMINATOR_TREE
=
"
view
-
state
-
dominator
-
tree
"
;
const
snapshotState
=
exports
.
snapshotState
=
Object
.
create
(
null
)
;
snapshotState
.
ERROR
=
"
snapshot
-
state
-
error
"
;
snapshotState
.
IMPORTING
=
"
snapshot
-
state
-
importing
"
;
snapshotState
.
SAVING
=
"
snapshot
-
state
-
saving
"
;
snapshotState
.
SAVED
=
"
snapshot
-
state
-
saved
"
;
snapshotState
.
READING
=
"
snapshot
-
state
-
reading
"
;
snapshotState
.
READ
=
"
snapshot
-
state
-
read
"
;
snapshotState
.
SAVING_CENSUS
=
"
snapshot
-
state
-
saving
-
census
"
;
snapshotState
.
SAVED_CENSUS
=
"
snapshot
-
state
-
saved
-
census
"
;
const
diffingState
=
exports
.
diffingState
=
Object
.
create
(
null
)
;
diffingState
.
SELECTING
=
"
diffing
-
state
-
selecting
"
;
diffingState
.
TAKING_DIFF
=
"
diffing
-
state
-
taking
-
diff
"
;
diffingState
.
TOOK_DIFF
=
"
diffing
-
state
-
took
-
diff
"
;
diffingState
.
ERROR
=
"
diffing
-
state
-
error
"
;
const
dominatorTreeState
=
exports
.
dominatorTreeState
=
Object
.
create
(
null
)
;
dominatorTreeState
.
COMPUTING
=
"
dominator
-
tree
-
state
-
computing
"
;
dominatorTreeState
.
COMPUTED
=
"
dominator
-
tree
-
state
-
computed
"
;
dominatorTreeState
.
FETCHING
=
"
dominator
-
tree
-
state
-
fetching
"
;
dominatorTreeState
.
LOADED
=
"
dominator
-
tree
-
state
-
loaded
"
;
dominatorTreeState
.
INCREMENTAL_FETCHING
=
"
dominator
-
tree
-
state
-
incremental
-
fetching
"
;
dominatorTreeState
.
ERROR
=
"
dominator
-
tree
-
state
-
error
"
;
