const
{
isSavedFrame
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
DOM
:
dom
createClass
createFactory
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
FrameView
=
createFactory
(
require
(
"
.
/
frame
"
)
)
;
const
INDENT
=
10
;
const
MAX_SOURCE_LENGTH
=
200
;
const
TreeItem
=
module
.
exports
=
createClass
(
{
displayName
:
"
tree
-
item
"
render
(
)
{
let
{
item
depth
arrow
focused
toolbox
}
=
this
.
props
;
return
dom
.
div
(
{
className
:
heap
-
tree
-
item
{
focused
?
"
focused
"
:
"
"
}
}
dom
.
span
(
{
className
:
"
heap
-
tree
-
item
-
field
heap
-
tree
-
item
-
bytes
"
}
item
.
bytes
)
dom
.
span
(
{
className
:
"
heap
-
tree
-
item
-
field
heap
-
tree
-
item
-
count
"
}
item
.
count
)
dom
.
span
(
{
className
:
"
heap
-
tree
-
item
-
field
heap
-
tree
-
item
-
total
-
bytes
"
}
item
.
totalBytes
)
dom
.
span
(
{
className
:
"
heap
-
tree
-
item
-
field
heap
-
tree
-
item
-
total
-
count
"
}
item
.
totalCount
)
dom
.
span
(
{
className
:
"
heap
-
tree
-
item
-
field
heap
-
tree
-
item
-
name
"
style
:
{
marginLeft
:
depth
*
INDENT
}
}
arrow
this
.
toLabel
(
item
.
name
toolbox
)
)
)
;
}
toLabel
(
name
toolbox
)
{
return
isSavedFrame
(
name
)
?
FrameView
(
{
frame
:
name
toolbox
}
)
:
String
(
name
)
;
}
}
)
;
