"
use
strict
"
;
const
{
debounce
}
=
require
(
"
sdk
/
lang
/
functional
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
FULLSCREEN_STYLE
=
{
width
:
"
100
%
"
height
:
"
100
%
"
position
:
"
absolute
"
}
;
function
Canvases
(
parentEl
debounceRate
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
container
=
createContainingDiv
(
parentEl
)
;
this
.
main
=
createCanvas
(
this
.
container
"
main
"
)
;
this
.
zoom
=
createCanvas
(
this
.
container
"
zoom
"
)
;
this
.
removeHandlers
=
handleResizes
(
this
debounceRate
)
;
}
Canvases
.
prototype
=
{
destroy
:
function
(
)
{
this
.
removeHandlers
(
)
;
this
.
container
.
removeChild
(
this
.
main
.
canvas
)
;
this
.
container
.
removeChild
(
this
.
zoom
.
canvas
)
;
}
}
;
module
.
exports
=
Canvases
;
function
createContainingDiv
(
parentEl
)
{
let
div
=
parentEl
.
ownerDocument
.
createElementNS
(
HTML_NS
"
div
"
)
;
Object
.
assign
(
div
.
style
FULLSCREEN_STYLE
)
;
parentEl
.
appendChild
(
div
)
;
return
div
;
}
function
createCanvas
(
container
className
)
{
let
window
=
container
.
ownerDocument
.
defaultView
;
let
canvas
=
container
.
ownerDocument
.
createElementNS
(
HTML_NS
"
canvas
"
)
;
container
.
appendChild
(
canvas
)
;
canvas
.
width
=
container
.
offsetWidth
*
window
.
devicePixelRatio
;
canvas
.
height
=
container
.
offsetHeight
*
window
.
devicePixelRatio
;
canvas
.
className
=
className
;
Object
.
assign
(
canvas
.
style
FULLSCREEN_STYLE
{
pointerEvents
:
"
none
"
}
)
;
let
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
return
{
canvas
ctx
}
;
}
function
handleResizes
(
canvases
debounceRate
)
{
let
{
container
main
zoom
}
=
canvases
;
let
window
=
container
.
ownerDocument
.
defaultView
;
function
resize
(
)
{
let
width
=
container
.
offsetWidth
*
window
.
devicePixelRatio
;
let
height
=
container
.
offsetHeight
*
window
.
devicePixelRatio
;
main
.
canvas
.
width
=
width
;
main
.
canvas
.
height
=
height
;
zoom
.
canvas
.
width
=
width
;
zoom
.
canvas
.
height
=
height
;
canvases
.
emit
(
"
resize
"
)
;
}
let
debouncedResize
=
debounceRate
>
0
?
debounce
(
resize
debounceRate
)
:
resize
;
window
.
addEventListener
(
"
resize
"
debouncedResize
false
)
;
resize
(
)
;
return
function
removeResizeHandlers
(
)
{
window
.
removeEventListener
(
"
resize
"
debouncedResize
false
)
;
}
;
}
