const
{
DOM
:
dom
createClass
PropTypes
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
assert
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
createParentMap
}
=
require
(
"
devtools
/
shared
/
heapsnapshot
/
CensusUtils
"
)
;
const
Tree
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
tree
"
)
)
;
const
DominatorTreeItem
=
createFactory
(
require
(
"
.
/
dominator
-
tree
-
item
"
)
)
;
const
{
L10N
}
=
require
(
"
.
.
/
utils
"
)
;
const
{
TREE_ROW_HEIGHT
}
=
require
(
"
.
.
/
constants
"
)
;
const
models
=
require
(
"
.
.
/
models
"
)
;
const
Individuals
=
module
.
exports
=
createClass
(
{
displayName
:
"
Individuals
"
propTypes
:
{
onViewSourceInDebugger
:
PropTypes
.
func
.
isRequired
onFocus
:
PropTypes
.
func
.
isRequired
individuals
:
models
.
individuals
dominatorTree
:
models
.
dominatorTreeModel
}
render
(
)
{
const
{
individuals
dominatorTree
onViewSourceInDebugger
onFocus
}
=
this
.
props
;
return
Tree
(
{
key
:
"
individuals
-
tree
"
autoExpandDepth
:
0
focused
:
individuals
.
focused
getParent
:
node
=
>
null
getChildren
:
node
=
>
[
]
isExpanded
:
node
=
>
false
onExpand
:
(
)
=
>
{
}
onCollapse
:
(
)
=
>
{
}
onFocus
renderItem
:
(
item
depth
focused
_
expanded
)
=
>
{
return
DominatorTreeItem
(
{
item
depth
focused
arrow
:
undefined
expanded
getPercentSize
:
size
=
>
(
size
/
dominatorTree
.
root
.
retainedSize
)
*
100
onViewSourceInDebugger
}
)
;
}
getRoots
:
(
)
=
>
individuals
.
nodes
getKey
:
node
=
>
node
.
nodeId
itemHeight
:
TREE_ROW_HEIGHT
}
)
;
}
}
)
;
