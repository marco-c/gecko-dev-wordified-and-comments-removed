"
use
strict
"
;
const
{
require
loader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
try
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
telemetry
-
test
-
helpers
.
js
"
this
)
;
}
catch
(
e
)
{
ok
(
false
"
MISSING
DEPENDENCY
ON
telemetry
-
test
-
helpers
.
js
\
n
"
+
"
Please
add
the
following
line
in
browser
.
ini
:
\
n
"
+
"
!
/
devtools
/
client
/
shared
/
test
/
telemetry
-
test
-
helpers
.
js
\
n
"
)
;
throw
e
;
}
waitForExplicitFinish
(
)
;
requestLongerTimeout
(
3
)
;
const
either
=
(
value
a
b
message
)
=
>
{
if
(
value
=
=
a
)
{
is
(
value
a
message
)
;
}
else
if
(
value
=
=
b
)
{
is
(
value
b
message
)
;
}
else
{
ok
(
false
message
)
;
}
}
;
const
click
=
(
node
win
=
window
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
node
win
)
;
}
;
const
dblclick
=
(
node
win
=
window
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
node
win
)
;
}
;
const
mousedown
=
(
node
win
=
window
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
node
win
)
;
}
;
const
rightMousedown
=
(
node
win
=
window
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
button
:
2
}
node
win
)
;
}
;
const
key
=
(
id
win
=
window
)
=
>
{
EventUtils
.
synthesizeKey
(
id
{
}
win
)
;
}
;
(
(
)
=
>
{
const
PrefUtils
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
prefs
"
)
;
const
stopObservingPrefs
=
PrefUtils
.
whenUnknownPrefChanged
(
"
devtools
.
performance
"
pref
=
>
{
ok
(
false
Unknown
pref
changed
:
{
pref
}
.
Please
add
it
to
test
/
helpers
/
prefs
.
js
+
"
to
make
sure
it
'
s
reverted
to
its
default
value
when
the
tests
finishes
"
+
"
and
avoid
interfering
with
future
tests
.
\
n
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
PrefUtils
.
UI_ENABLE_MEMORY_FLAME_CHART
true
)
;
registerCleanupFunction
(
(
)
=
>
{
info
(
"
finish
(
)
was
called
cleaning
up
.
.
.
"
)
;
PrefUtils
.
rollbackPrefsToDefault
(
)
;
stopObservingPrefs
(
)
;
Services
.
profiler
.
StopProfiler
(
)
;
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
Cu
.
forceShrinkingGC
(
)
;
}
)
;
}
)
(
)
;
