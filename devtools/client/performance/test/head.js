"
use
strict
"
;
const
{
require
loader
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
waitForExplicitFinish
(
)
;
requestLongerTimeout
(
3
)
;
const
either
=
(
value
a
b
message
)
=
>
{
if
(
value
=
=
a
)
{
is
(
value
a
message
)
;
}
else
if
(
value
=
=
b
)
{
is
(
value
b
message
)
;
}
else
{
ok
(
false
message
)
;
}
}
const
click
=
(
node
win
=
window
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
node
win
)
;
}
;
const
dblclick
=
(
node
win
=
window
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
node
win
)
;
}
;
const
mousedown
=
(
node
win
=
window
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
node
win
)
;
}
;
const
rightMousedown
=
(
node
win
=
window
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
button
:
2
}
node
win
)
;
}
;
const
key
=
(
id
win
=
window
)
=
>
{
EventUtils
.
synthesizeKey
(
id
{
}
win
)
;
}
;
(
(
)
=
>
{
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
PrefUtils
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
prefs
"
)
;
DevToolsUtils
.
testing
=
true
;
let
stopObservingPrefs
=
PrefUtils
.
whenUnknownPrefChanged
(
"
devtools
.
performance
"
pref
=
>
{
ok
(
false
Unknown
pref
changed
:
{
pref
}
.
Please
add
it
to
test
/
helpers
/
prefs
.
js
+
"
to
make
sure
it
'
s
reverted
to
its
default
value
when
the
tests
finishes
"
+
"
and
avoid
interfering
with
future
tests
.
\
n
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
PrefUtils
.
UI_ENABLE_MEMORY_FLAME_CHART
true
)
;
registerCleanupFunction
(
(
)
=
>
{
info
(
finish
(
)
was
called
cleaning
up
.
.
.
)
;
DevToolsUtils
.
testing
=
false
;
PrefUtils
.
rollbackPrefsToDefault
(
)
;
stopObservingPrefs
(
)
;
let
nsIProfilerModule
=
Cc
[
"
mozilla
.
org
/
tools
/
profiler
;
1
"
]
.
getService
(
Ci
.
nsIProfiler
)
;
nsIProfilerModule
.
StopProfiler
(
)
;
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
Cu
.
forceShrinkingGC
(
)
;
}
)
;
}
)
(
)
;
