"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
tabs
=
require
(
"
sdk
/
tabs
"
)
;
const
tabUtils
=
require
(
"
sdk
/
tabs
/
utils
"
)
;
const
{
viewFor
}
=
require
(
"
sdk
/
view
/
core
"
)
;
const
{
waitForDelayedStartupFinished
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
wait
-
utils
"
)
;
function
getRandomInt
(
min
max
)
{
return
Math
.
floor
(
Math
.
random
(
)
*
(
max
-
min
+
1
)
)
+
min
;
}
exports
.
addTab
=
function
(
{
url
win
}
options
=
{
}
)
{
let
id
=
getRandomInt
(
0
Number
.
MAX_SAFE_INTEGER
-
1
)
;
url
+
=
#
{
id
}
;
dump
(
Adding
tab
with
url
:
{
url
}
.
\
n
)
;
return
new
Promise
(
resolve
=
>
{
let
tab
;
tabs
.
on
(
"
ready
"
function
onOpen
(
model
)
{
if
(
tab
!
=
viewFor
(
model
)
)
{
return
;
}
dump
(
Tab
added
and
finished
loading
:
{
model
.
url
}
.
\
n
)
;
tabs
.
off
(
"
ready
"
onOpen
)
;
resolve
(
tab
)
;
}
)
;
win
.
focus
(
)
;
tab
=
tabUtils
.
openTab
(
win
url
)
;
if
(
options
.
dontWaitForTabReady
)
{
resolve
(
tab
)
;
}
}
)
;
}
;
exports
.
removeTab
=
function
(
tab
options
=
{
}
)
{
dump
(
Removing
tab
:
{
tabUtils
.
getURI
(
tab
)
}
.
\
n
)
;
return
new
Promise
(
resolve
=
>
{
tabs
.
on
(
"
close
"
function
onClose
(
model
)
{
if
(
tab
!
=
viewFor
(
model
)
)
{
return
;
}
dump
(
Tab
removed
and
finished
closing
:
{
model
.
url
}
.
\
n
)
;
tabs
.
off
(
"
close
"
onClose
)
;
resolve
(
tab
)
;
}
)
;
tabUtils
.
closeTab
(
tab
)
;
if
(
options
.
dontWaitForTabClose
)
{
resolve
(
tab
)
;
}
}
)
;
}
;
exports
.
addWindow
=
function
*
(
options
)
{
let
{
OpenBrowserWindow
}
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
let
win
=
OpenBrowserWindow
(
options
)
;
yield
waitForDelayedStartupFinished
(
win
)
;
return
win
;
}
;
