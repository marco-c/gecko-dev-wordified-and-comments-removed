"
use
strict
"
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
const
{
addTab
removeTab
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
tab
-
utils
"
)
;
const
{
once
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
event
-
utils
"
)
;
exports
.
initPanelInNewTab
=
function
*
(
{
tool
url
win
}
options
=
{
}
)
{
let
tab
=
yield
addTab
(
{
url
win
}
options
)
;
return
(
yield
exports
.
initPanelInTab
(
{
tool
tab
}
)
)
;
}
;
exports
.
initPanelInTab
=
function
*
(
{
tool
tab
}
)
{
dump
(
Initializing
a
{
tool
}
panel
.
\
n
)
;
let
target
=
TargetFactory
.
forTab
(
tab
)
;
yield
target
.
makeRemote
(
)
;
let
toolbox
=
yield
gDevTools
.
showToolbox
(
target
tool
)
;
yield
toolbox
.
initPerformance
(
)
;
let
panel
=
toolbox
.
getCurrentPanel
(
)
;
return
{
target
toolbox
panel
}
;
}
;
exports
.
initPerformanceInNewTab
=
function
*
(
{
url
win
}
options
=
{
}
)
{
let
tab
=
yield
addTab
(
{
url
win
}
options
)
;
return
(
yield
exports
.
initPerformanceInTab
(
{
tab
}
)
)
;
}
;
exports
.
initPerformanceInTab
=
function
*
(
{
tab
}
)
{
return
(
yield
exports
.
initPanelInTab
(
{
tool
:
"
performance
"
tab
}
)
)
;
}
;
exports
.
initConsoleInNewTab
=
function
*
(
{
url
win
}
options
=
{
}
)
{
let
tab
=
yield
addTab
(
{
url
win
}
options
)
;
return
(
yield
exports
.
initConsoleInTab
(
{
tab
}
)
)
;
}
;
exports
.
initConsoleInTab
=
function
*
(
{
tab
}
)
{
let
{
target
toolbox
panel
}
=
yield
exports
.
initPanelInTab
(
{
tool
:
"
webconsole
"
tab
}
)
;
let
consoleMethod
=
function
*
(
method
label
event
)
{
let
recordingEventReceived
=
once
(
toolbox
.
performance
event
)
;
if
(
label
=
=
=
undefined
)
{
yield
panel
.
hud
.
jsterm
.
execute
(
console
.
{
method
}
(
)
)
;
}
else
{
yield
panel
.
hud
.
jsterm
.
execute
(
console
.
{
method
}
(
"
{
label
}
"
)
)
;
}
yield
recordingEventReceived
;
}
;
let
profile
=
function
*
(
label
)
{
return
yield
consoleMethod
(
"
profile
"
label
"
recording
-
started
"
)
;
}
;
let
profileEnd
=
function
*
(
label
)
{
return
yield
consoleMethod
(
"
profileEnd
"
label
"
recording
-
stopped
"
)
;
}
;
return
{
target
toolbox
panel
console
:
{
profile
profileEnd
}
}
;
}
;
exports
.
teardownToolboxAndRemoveTab
=
function
*
(
panel
options
)
{
dump
(
"
Destroying
panel
.
\
n
"
)
;
let
tab
=
panel
.
target
.
tab
;
yield
panel
.
toolbox
.
destroy
(
)
;
yield
removeTab
(
tab
options
)
;
}
;
