"
use
strict
"
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
{
addTab
removeTab
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
tab
-
utils
"
)
;
const
{
once
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
event
-
utils
"
)
;
exports
.
initPanelInNewTab
=
async
function
(
{
tool
url
win
}
options
=
{
}
)
{
const
tab
=
await
addTab
(
{
url
win
}
options
)
;
return
exports
.
initPanelInTab
(
{
tool
tab
}
)
;
}
;
exports
.
initPanelInTab
=
async
function
(
{
tool
tab
}
)
{
dump
(
Initializing
a
{
tool
}
panel
.
\
n
)
;
const
toolbox
=
await
gDevTools
.
showToolboxForTab
(
tab
{
toolId
:
tool
}
)
;
const
target
=
toolbox
.
target
;
await
target
.
getFront
(
"
performance
"
)
;
const
panel
=
toolbox
.
getCurrentPanel
(
)
;
return
{
target
toolbox
panel
}
;
}
;
exports
.
initPerformanceInNewTab
=
async
function
(
{
url
win
}
options
=
{
}
)
{
const
tab
=
await
addTab
(
{
url
win
}
options
)
;
return
exports
.
initPerformanceInTab
(
{
tab
}
)
;
}
;
exports
.
initPerformanceInTab
=
async
function
(
{
tab
}
)
{
return
exports
.
initPanelInTab
(
{
tool
:
"
performance
"
tab
:
tab
}
)
;
}
;
exports
.
initConsoleInNewTab
=
async
function
(
{
url
win
}
options
=
{
}
)
{
const
tab
=
await
addTab
(
{
url
win
}
options
)
;
return
exports
.
initConsoleInTab
(
{
tab
}
)
;
}
;
exports
.
initConsoleInTab
=
async
function
(
{
tab
}
)
{
const
{
target
toolbox
panel
}
=
await
exports
.
initPanelInTab
(
{
tool
:
"
webconsole
"
tab
:
tab
}
)
;
const
consoleMethod
=
async
function
(
method
label
event
)
{
const
performanceFront
=
await
toolbox
.
target
.
getFront
(
"
performance
"
)
;
const
recordingEventReceived
=
once
(
performanceFront
event
)
;
const
expression
=
label
?
console
.
{
method
}
(
"
{
label
}
"
)
:
console
.
{
method
}
(
)
;
await
panel
.
hud
.
ui
.
wrapper
.
dispatchEvaluateExpression
(
expression
)
;
await
recordingEventReceived
;
}
;
const
profile
=
async
function
(
label
)
{
return
consoleMethod
(
"
profile
"
label
"
recording
-
started
"
)
;
}
;
const
profileEnd
=
async
function
(
label
)
{
return
consoleMethod
(
"
profileEnd
"
label
"
recording
-
stopped
"
)
;
}
;
return
{
target
toolbox
panel
console
:
{
profile
profileEnd
}
}
;
}
;
exports
.
teardownToolboxAndRemoveTab
=
async
function
(
panel
)
{
dump
(
"
Destroying
panel
.
\
n
"
)
;
const
tab
=
panel
.
target
.
localTab
;
await
panel
.
toolbox
.
destroy
(
)
;
await
removeTab
(
tab
)
;
}
;
