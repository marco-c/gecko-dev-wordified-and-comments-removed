"
use
strict
"
;
const
{
Constants
}
=
require
(
"
devtools
/
client
/
performance
/
modules
/
constants
"
)
;
const
{
SIMPLE_URL
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
urls
"
)
;
const
{
initPerformanceInTab
initConsoleInNewTab
teardownToolboxAndRemoveTab
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
panel
-
utils
"
)
;
const
{
waitForRecordingStartedEvents
waitForRecordingStoppedEvents
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
actions
"
)
;
const
{
times
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
event
-
utils
"
)
;
const
{
getSelectedRecording
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
recording
-
utils
"
)
;
add_task
(
function
*
(
)
{
let
{
target
console
}
=
yield
initConsoleInNewTab
(
{
url
:
SIMPLE_URL
win
:
window
}
)
;
let
{
panel
}
=
yield
initPerformanceInTab
(
{
tab
:
target
.
tab
}
)
;
let
{
EVENTS
PerformanceController
OverviewView
}
=
panel
.
panelWin
;
let
started
=
waitForRecordingStartedEvents
(
panel
{
skipWaitingForBackendReady
:
true
}
)
;
yield
console
.
profile
(
"
rust
"
)
;
yield
started
;
let
recordings
=
PerformanceController
.
getRecordings
(
)
;
is
(
recordings
.
length
1
"
A
recording
found
in
the
performance
panel
.
"
)
;
is
(
getSelectedRecording
(
panel
)
recordings
[
0
]
"
The
first
console
recording
should
be
selected
.
"
)
;
yield
times
(
OverviewView
EVENTS
.
UI_OVERVIEW_RENDERED
3
{
expectedArgs
:
{
"
1
"
:
Constants
.
FRAMERATE_GRAPH_LOW_RES_INTERVAL
}
}
)
;
started
=
waitForRecordingStartedEvents
(
panel
{
skipWaitingForBackendReady
:
true
skipWaitingForOverview
:
true
skipWaitingForViewState
:
true
}
)
;
yield
console
.
profile
(
"
golang
"
)
;
yield
started
;
recordings
=
PerformanceController
.
getRecordings
(
)
;
is
(
recordings
.
length
2
"
Two
recordings
found
in
the
performance
panel
.
"
)
;
is
(
getSelectedRecording
(
panel
)
recordings
[
0
]
"
The
first
console
recording
should
still
be
selected
.
"
)
;
yield
times
(
OverviewView
EVENTS
.
UI_OVERVIEW_RENDERED
3
{
expectedArgs
:
{
"
1
"
:
Constants
.
FRAMERATE_GRAPH_LOW_RES_INTERVAL
}
}
)
;
let
stopped
=
waitForRecordingStoppedEvents
(
panel
{
skipWaitingForBackendReady
:
true
}
)
;
yield
console
.
profileEnd
(
"
rust
"
)
;
yield
stopped
;
recordings
=
PerformanceController
.
getRecordings
(
)
;
is
(
recordings
.
length
2
"
Two
recordings
found
in
the
performance
panel
.
"
)
;
is
(
getSelectedRecording
(
panel
)
recordings
[
0
]
"
The
first
console
recording
should
still
be
selected
.
"
)
;
is
(
recordings
[
0
]
.
isRecording
(
)
false
"
The
first
console
recording
should
no
longer
be
recording
.
"
)
;
stopped
=
waitForRecordingStoppedEvents
(
panel
{
skipWaitingForBackendReady
:
true
skipWaitingForOverview
:
true
skipWaitingForSubview
:
true
}
)
;
yield
console
.
profileEnd
(
"
golang
"
)
;
yield
stopped
;
recordings
=
PerformanceController
.
getRecordings
(
)
;
is
(
recordings
.
length
2
"
Two
recordings
found
in
the
performance
panel
.
"
)
;
is
(
getSelectedRecording
(
panel
)
recordings
[
0
]
"
The
first
console
recording
should
still
be
selected
.
"
)
;
is
(
recordings
[
1
]
.
isRecording
(
)
false
"
The
second
console
recording
should
no
longer
be
recording
.
"
)
;
yield
teardownToolboxAndRemoveTab
(
panel
)
;
}
)
;
