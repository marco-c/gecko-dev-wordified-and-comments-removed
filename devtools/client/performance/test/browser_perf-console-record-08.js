"
use
strict
"
;
const
{
Constants
}
=
require
(
"
devtools
/
client
/
performance
/
modules
/
constants
"
)
;
const
{
SIMPLE_URL
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
urls
"
)
;
const
{
initPerformanceInTab
initConsoleInNewTab
teardownToolboxAndRemoveTab
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
panel
-
utils
"
)
;
const
{
startRecording
stopRecording
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
actions
"
)
;
const
{
waitForRecordingStartedEvents
waitForRecordingStoppedEvents
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
actions
"
)
;
const
{
once
times
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
event
-
utils
"
)
;
const
{
setSelectedRecording
}
=
require
(
"
devtools
/
client
/
performance
/
test
/
helpers
/
recording
-
utils
"
)
;
const
MANUAL
=
0
;
const
CONSOLE
=
1
;
const
RECORDING
=
2
;
const
SELECTED
=
4
;
function
hasBitFlag
(
expected
actual
)
{
return
!
!
(
expected
&
actual
)
;
}
add_task
(
async
function
(
)
{
requestLongerTimeout
(
4
)
;
let
{
target
console
}
=
await
initConsoleInNewTab
(
{
url
:
SIMPLE_URL
win
:
window
}
)
;
let
{
panel
}
=
await
initPerformanceInTab
(
{
tab
:
target
.
tab
}
)
;
let
{
EVENTS
PerformanceController
OverviewView
}
=
panel
.
panelWin
;
info
(
"
Recording
1
-
Starting
console
.
profile
(
)
.
.
.
"
)
;
let
started
=
waitForRecordingStartedEvents
(
panel
{
skipWaitingForBackendReady
:
true
}
)
;
await
console
.
profile
(
"
rust
"
)
;
await
started
;
testRecordings
(
PerformanceController
[
CONSOLE
+
SELECTED
+
RECORDING
]
)
;
info
(
"
Recording
2
-
Starting
manual
recording
.
.
.
"
)
;
await
startRecording
(
panel
)
;
testRecordings
(
PerformanceController
[
CONSOLE
+
RECORDING
MANUAL
+
RECORDING
+
SELECTED
]
)
;
info
(
"
Recording
3
-
Starting
console
.
profile
(
\
"
3
\
"
)
.
.
.
"
)
;
started
=
waitForRecordingStartedEvents
(
panel
{
skipWaitingForBackendReady
:
true
skipWaitingForOverview
:
true
skipWaitingForViewState
:
true
}
)
;
await
console
.
profile
(
"
3
"
)
;
await
started
;
testRecordings
(
PerformanceController
[
CONSOLE
+
RECORDING
MANUAL
+
RECORDING
+
SELECTED
CONSOLE
+
RECORDING
]
)
;
info
(
"
Recording
4
-
Starting
console
.
profile
(
\
"
4
\
"
)
.
.
.
"
)
;
started
=
waitForRecordingStartedEvents
(
panel
{
skipWaitingForBackendReady
:
true
skipWaitingForOverview
:
true
skipWaitingForViewState
:
true
}
)
;
await
console
.
profile
(
"
4
"
)
;
await
started
;
testRecordings
(
PerformanceController
[
CONSOLE
+
RECORDING
MANUAL
+
RECORDING
+
SELECTED
CONSOLE
+
RECORDING
CONSOLE
+
RECORDING
]
)
;
info
(
"
Recording
4
-
Ending
console
.
profileEnd
(
)
.
.
.
"
)
;
let
stopped
=
waitForRecordingStoppedEvents
(
panel
{
skipWaitingForBackendReady
:
true
skipWaitingForOverview
:
true
skipWaitingForSubview
:
true
skipWaitingForViewState
:
true
}
)
;
await
console
.
profileEnd
(
)
;
await
stopped
;
testRecordings
(
PerformanceController
[
CONSOLE
+
RECORDING
MANUAL
+
RECORDING
+
SELECTED
CONSOLE
+
RECORDING
CONSOLE
]
)
;
info
(
"
Recording
4
-
Select
last
recording
.
.
.
"
)
;
let
recordingSelected
=
once
(
PerformanceController
EVENTS
.
RECORDING_SELECTED
)
;
setSelectedRecording
(
panel
3
)
;
await
recordingSelected
;
testRecordings
(
PerformanceController
[
CONSOLE
+
RECORDING
MANUAL
+
RECORDING
CONSOLE
+
RECORDING
CONSOLE
+
SELECTED
]
)
;
ok
(
!
OverviewView
.
isRendering
(
)
"
Stop
rendering
overview
when
a
completed
recording
is
selected
.
"
)
;
info
(
"
Recording
2
-
Stop
manual
recording
.
"
)
;
await
stopRecording
(
panel
)
;
testRecordings
(
PerformanceController
[
CONSOLE
+
RECORDING
MANUAL
+
SELECTED
CONSOLE
+
RECORDING
CONSOLE
]
)
;
ok
(
!
OverviewView
.
isRendering
(
)
"
Stop
rendering
overview
when
a
completed
recording
is
selected
.
"
)
;
info
(
"
Recording
1
-
Select
first
recording
.
"
)
;
recordingSelected
=
once
(
PerformanceController
EVENTS
.
RECORDING_SELECTED
)
;
setSelectedRecording
(
panel
0
)
;
await
recordingSelected
;
testRecordings
(
PerformanceController
[
CONSOLE
+
RECORDING
+
SELECTED
MANUAL
CONSOLE
+
RECORDING
CONSOLE
]
)
;
ok
(
OverviewView
.
isRendering
(
)
"
Should
be
rendering
overview
a
recording
in
progress
is
selected
.
"
)
;
await
times
(
OverviewView
EVENTS
.
UI_OVERVIEW_RENDERED
3
{
expectedArgs
:
{
"
1
"
:
Constants
.
FRAMERATE_GRAPH_LOW_RES_INTERVAL
}
}
)
;
info
(
"
Ending
console
.
profileEnd
(
)
.
.
.
"
)
;
stopped
=
waitForRecordingStoppedEvents
(
panel
{
skipWaitingForBackendReady
:
true
skipWaitingForOverview
:
true
skipWaitingForSubview
:
true
skipWaitingForViewState
:
true
}
)
;
await
console
.
profileEnd
(
)
;
await
stopped
;
testRecordings
(
PerformanceController
[
CONSOLE
+
RECORDING
+
SELECTED
MANUAL
CONSOLE
CONSOLE
]
)
;
ok
(
OverviewView
.
isRendering
(
)
"
Should
be
rendering
overview
a
recording
in
progress
is
selected
.
"
)
;
await
times
(
OverviewView
EVENTS
.
UI_OVERVIEW_RENDERED
3
{
expectedArgs
:
{
"
1
"
:
Constants
.
FRAMERATE_GRAPH_LOW_RES_INTERVAL
}
}
)
;
info
(
"
Recording
5
-
Start
one
more
manual
recording
.
"
)
;
await
startRecording
(
panel
)
;
testRecordings
(
PerformanceController
[
CONSOLE
+
RECORDING
MANUAL
CONSOLE
CONSOLE
MANUAL
+
RECORDING
+
SELECTED
]
)
;
ok
(
OverviewView
.
isRendering
(
)
"
Should
be
rendering
overview
a
recording
in
progress
is
selected
.
"
)
;
await
times
(
OverviewView
EVENTS
.
UI_OVERVIEW_RENDERED
3
{
expectedArgs
:
{
"
1
"
:
Constants
.
FRAMERATE_GRAPH_LOW_RES_INTERVAL
}
}
)
;
info
(
"
Recording
5
-
Stop
manual
recording
.
"
)
;
await
stopRecording
(
panel
)
;
testRecordings
(
PerformanceController
[
CONSOLE
+
RECORDING
MANUAL
CONSOLE
CONSOLE
MANUAL
+
SELECTED
]
)
;
ok
(
!
OverviewView
.
isRendering
(
)
"
Stop
rendering
overview
when
a
completed
recording
is
selected
.
"
)
;
info
(
"
Recording
1
-
Ending
console
.
profileEnd
(
)
.
.
.
"
)
;
stopped
=
waitForRecordingStoppedEvents
(
panel
{
skipWaitingForBackendReady
:
true
skipWaitingForOverview
:
true
skipWaitingForSubview
:
true
skipWaitingForViewState
:
true
}
)
;
await
console
.
profileEnd
(
)
;
await
stopped
;
testRecordings
(
PerformanceController
[
CONSOLE
MANUAL
CONSOLE
CONSOLE
MANUAL
+
SELECTED
]
)
;
ok
(
!
OverviewView
.
isRendering
(
)
"
Stop
rendering
overview
when
a
completed
recording
is
selected
.
"
)
;
await
teardownToolboxAndRemoveTab
(
panel
)
;
}
)
;
function
testRecordings
(
controller
expectedBitFlags
)
{
let
recordings
=
controller
.
getRecordings
(
)
;
let
current
=
controller
.
getCurrentRecording
(
)
;
is
(
recordings
.
length
expectedBitFlags
.
length
"
Expected
number
of
recordings
.
"
)
;
recordings
.
forEach
(
(
recording
i
)
=
>
{
const
expected
=
expectedBitFlags
[
i
]
;
is
(
recording
.
isConsole
(
)
hasBitFlag
(
expected
CONSOLE
)
Recording
{
i
+
1
}
has
expected
console
state
.
)
;
is
(
recording
.
isRecording
(
)
hasBitFlag
(
expected
RECORDING
)
Recording
{
i
+
1
}
has
expected
console
state
.
)
;
is
(
(
recording
=
=
current
)
hasBitFlag
(
expected
SELECTED
)
Recording
{
i
+
1
}
has
expected
selected
state
.
)
;
}
)
;
}
