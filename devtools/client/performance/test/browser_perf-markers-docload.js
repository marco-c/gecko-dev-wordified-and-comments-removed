function
*
spawnTest
(
)
{
let
{
panel
}
=
yield
initPerformance
(
SIMPLE_URL
)
;
let
{
PerformanceController
}
=
panel
.
panelWin
;
loadFrameScripts
(
)
;
yield
startRecording
(
panel
)
;
ok
(
true
"
Recording
has
started
.
"
)
;
evalInDebuggee
(
"
document
.
location
.
reload
(
)
"
)
;
yield
waitUntil
(
(
)
=
>
{
let
markers
=
PerformanceController
.
getCurrentRecording
(
)
.
getMarkers
(
)
;
if
(
!
markers
.
some
(
m
=
>
m
.
name
=
=
"
document
:
:
DOMContentLoaded
"
)
|
|
!
markers
.
some
(
m
=
>
m
.
name
=
=
"
document
:
:
Load
"
)
)
{
return
false
;
}
ok
(
markers
.
filter
(
m
=
>
m
.
name
=
=
"
document
:
:
DOMContentLoaded
"
)
.
length
=
=
1
"
There
should
only
be
one
DOMContentLoaded
marker
.
"
)
;
ok
(
markers
.
filter
(
m
=
>
m
.
name
=
=
"
document
:
:
Load
"
)
.
length
=
=
1
"
There
should
only
be
one
load
marker
.
"
)
;
return
true
;
}
)
;
yield
stopRecording
(
panel
)
;
ok
(
true
"
Recording
has
ended
.
"
)
;
yield
teardown
(
panel
)
;
finish
(
)
;
}
function
evalInDebuggee
(
script
)
{
let
{
generateUUID
}
=
Cc
[
'
mozilla
.
org
/
uuid
-
generator
;
1
'
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
let
deferred
=
Promise
.
defer
(
)
;
if
(
!
mm
)
{
throw
new
Error
(
"
loadFrameScripts
(
)
must
be
called
when
using
MessageManager
.
"
)
;
}
let
id
=
generateUUID
(
)
.
toString
(
)
;
mm
.
sendAsyncMessage
(
"
devtools
:
test
:
eval
"
{
script
:
script
id
:
id
}
)
;
mm
.
addMessageListener
(
"
devtools
:
test
:
eval
:
response
"
handler
)
;
function
handler
(
{
data
}
)
{
if
(
id
!
=
=
data
.
id
)
{
return
;
}
mm
.
removeMessageListener
(
"
devtools
:
test
:
eval
:
response
"
handler
)
;
deferred
.
resolve
(
data
.
value
)
;
}
return
deferred
.
promise
;
}
