"
use
strict
"
;
const
{
L10N
PREFS
}
=
require
(
"
devtools
/
client
/
performance
/
modules
/
global
"
)
;
const
{
MarkerBlueprintUtils
}
=
require
(
"
devtools
/
client
/
performance
/
modules
/
marker
-
blueprint
-
utils
"
)
;
const
{
getSourceNames
}
=
require
(
"
devtools
/
client
/
shared
/
source
-
utils
"
)
;
exports
.
MarkerDOMUtils
=
{
buildFields
:
function
(
doc
marker
)
{
const
fields
=
MarkerBlueprintUtils
.
getMarkerFields
(
marker
)
;
return
fields
.
map
(
(
{
label
value
}
)
=
>
this
.
buildNameValueLabel
(
doc
label
value
)
)
;
}
buildTitle
:
function
(
doc
marker
)
{
const
blueprint
=
MarkerBlueprintUtils
.
getBlueprintFor
(
marker
)
;
const
hbox
=
doc
.
createXULElement
(
"
hbox
"
)
;
hbox
.
setAttribute
(
"
align
"
"
center
"
)
;
const
bullet
=
doc
.
createXULElement
(
"
hbox
"
)
;
bullet
.
className
=
marker
-
details
-
bullet
marker
-
color
-
{
blueprint
.
colorName
}
;
const
title
=
MarkerBlueprintUtils
.
getMarkerLabel
(
marker
)
;
const
label
=
doc
.
createXULElement
(
"
label
"
)
;
label
.
className
=
"
marker
-
details
-
type
"
;
label
.
setAttribute
(
"
value
"
title
)
;
hbox
.
appendChild
(
bullet
)
;
hbox
.
appendChild
(
label
)
;
return
hbox
;
}
buildDuration
:
function
(
doc
marker
)
{
const
label
=
L10N
.
getStr
(
"
marker
.
field
.
duration
"
)
;
const
start
=
L10N
.
getFormatStrWithNumbers
(
"
timeline
.
tick
"
marker
.
start
)
;
const
end
=
L10N
.
getFormatStrWithNumbers
(
"
timeline
.
tick
"
marker
.
end
)
;
const
duration
=
L10N
.
getFormatStrWithNumbers
(
"
timeline
.
tick
"
marker
.
end
-
marker
.
start
)
;
const
el
=
this
.
buildNameValueLabel
(
doc
label
duration
)
;
el
.
classList
.
add
(
"
marker
-
details
-
duration
"
)
;
el
.
setAttribute
(
"
tooltiptext
"
{
start
}
{
end
}
)
;
return
el
;
}
buildNameValueLabel
:
function
(
doc
field
value
)
{
const
hbox
=
doc
.
createXULElement
(
"
hbox
"
)
;
hbox
.
className
=
"
marker
-
details
-
labelcontainer
"
;
const
nameLabel
=
doc
.
createXULElement
(
"
label
"
)
;
nameLabel
.
className
=
"
plain
marker
-
details
-
name
-
label
"
;
nameLabel
.
setAttribute
(
"
value
"
field
)
;
hbox
.
appendChild
(
nameLabel
)
;
const
valueLabel
=
doc
.
createXULElement
(
"
label
"
)
;
valueLabel
.
className
=
"
plain
marker
-
details
-
value
-
label
"
;
valueLabel
.
setAttribute
(
"
value
"
value
)
;
hbox
.
appendChild
(
valueLabel
)
;
return
hbox
;
}
buildStackTrace
:
function
(
doc
{
type
frameIndex
frames
}
)
{
const
container
=
doc
.
createXULElement
(
"
vbox
"
)
;
container
.
className
=
"
marker
-
details
-
stack
"
;
container
.
setAttribute
(
"
type
"
type
)
;
const
nameLabel
=
doc
.
createXULElement
(
"
label
"
)
;
nameLabel
.
className
=
"
plain
marker
-
details
-
name
-
label
"
;
nameLabel
.
setAttribute
(
"
value
"
L10N
.
getStr
(
marker
.
field
.
{
type
}
)
)
;
container
.
appendChild
(
nameLabel
)
;
let
wasAsyncParent
=
false
;
const
seen
=
new
Set
(
)
;
while
(
frameIndex
>
0
)
{
if
(
seen
.
has
(
frameIndex
)
)
{
break
;
}
seen
.
add
(
frameIndex
)
;
const
frame
=
frames
[
frameIndex
]
;
const
url
=
frame
.
source
;
const
displayName
=
frame
.
functionDisplayName
;
const
line
=
frame
.
line
;
if
(
wasAsyncParent
)
{
const
asyncStr
=
L10N
.
getFormatStr
(
"
marker
.
field
.
asyncStack
"
frame
.
asyncCause
)
;
const
asyncBox
=
doc
.
createXULElement
(
"
hbox
"
)
;
const
asyncLabel
=
doc
.
createXULElement
(
"
label
"
)
;
asyncLabel
.
className
=
"
devtools
-
monospace
"
;
asyncLabel
.
setAttribute
(
"
value
"
asyncStr
)
;
asyncBox
.
appendChild
(
asyncLabel
)
;
container
.
appendChild
(
asyncBox
)
;
wasAsyncParent
=
false
;
}
const
hbox
=
doc
.
createXULElement
(
"
hbox
"
)
;
if
(
displayName
)
{
const
functionLabel
=
doc
.
createXULElement
(
"
label
"
)
;
functionLabel
.
className
=
"
devtools
-
monospace
"
;
functionLabel
.
setAttribute
(
"
value
"
displayName
)
;
hbox
.
appendChild
(
functionLabel
)
;
}
if
(
url
)
{
const
linkNode
=
doc
.
createXULElement
(
"
a
"
)
;
linkNode
.
className
=
"
waterfall
-
marker
-
location
devtools
-
source
-
link
"
;
linkNode
.
href
=
url
;
linkNode
.
draggable
=
false
;
linkNode
.
setAttribute
(
"
title
"
url
)
;
const
urlLabel
=
doc
.
createXULElement
(
"
label
"
)
;
urlLabel
.
className
=
"
filename
"
;
urlLabel
.
setAttribute
(
"
value
"
getSourceNames
(
url
)
.
short
)
;
linkNode
.
appendChild
(
urlLabel
)
;
const
lineLabel
=
doc
.
createXULElement
(
"
label
"
)
;
lineLabel
.
className
=
"
line
-
number
"
;
lineLabel
.
setAttribute
(
"
value
"
:
{
line
}
)
;
linkNode
.
appendChild
(
lineLabel
)
;
hbox
.
appendChild
(
linkNode
)
;
linkNode
.
setAttribute
(
"
data
-
action
"
JSON
.
stringify
(
{
url
:
url
line
:
line
action
:
"
view
-
source
"
}
)
)
;
}
if
(
!
displayName
&
&
!
url
)
{
const
unknownLabel
=
doc
.
createXULElement
(
"
label
"
)
;
unknownLabel
.
setAttribute
(
"
value
"
L10N
.
getStr
(
"
marker
.
value
.
unknownFrame
"
)
)
;
hbox
.
appendChild
(
unknownLabel
)
;
}
container
.
appendChild
(
hbox
)
;
if
(
frame
.
asyncParent
)
{
frameIndex
=
frame
.
asyncParent
;
wasAsyncParent
=
true
;
}
else
{
frameIndex
=
frame
.
parent
;
}
}
return
container
;
}
buildCustom
:
function
(
doc
marker
options
)
{
const
elements
=
[
]
;
if
(
options
.
allocations
&
&
shouldShowAllocationsTrigger
(
marker
)
)
{
const
hbox
=
doc
.
createXULElement
(
"
hbox
"
)
;
hbox
.
className
=
"
marker
-
details
-
customcontainer
"
;
const
label
=
doc
.
createXULElement
(
"
label
"
)
;
label
.
className
=
"
custom
-
button
"
;
label
.
setAttribute
(
"
value
"
"
Show
allocation
triggers
"
)
;
label
.
setAttribute
(
"
type
"
"
show
-
allocations
"
)
;
label
.
setAttribute
(
"
data
-
action
"
JSON
.
stringify
(
{
endTime
:
marker
.
start
action
:
"
show
-
allocations
"
}
)
)
;
hbox
.
appendChild
(
label
)
;
elements
.
push
(
hbox
)
;
}
return
elements
;
}
}
;
function
shouldShowAllocationsTrigger
(
marker
)
{
if
(
marker
.
name
=
=
"
GarbageCollection
"
)
{
const
showTriggers
=
PREFS
[
"
show
-
triggers
-
for
-
gc
-
types
"
]
;
return
showTriggers
.
split
(
"
"
)
.
includes
(
marker
.
causeName
)
;
}
return
false
;
}
