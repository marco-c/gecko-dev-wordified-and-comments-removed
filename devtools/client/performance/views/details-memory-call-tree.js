"
use
strict
"
;
const
{
extend
}
=
require
(
"
devtools
/
shared
/
extend
"
)
;
const
EVENTS
=
require
(
"
.
.
/
events
"
)
;
const
{
ThreadNode
}
=
require
(
"
.
.
/
modules
/
logic
/
tree
-
model
"
)
;
const
{
CallView
}
=
require
(
"
.
.
/
modules
/
widgets
/
tree
-
view
"
)
;
const
{
DetailsSubview
}
=
require
(
"
.
/
details
-
abstract
-
subview
"
)
;
const
RecordingUtils
=
require
(
"
devtools
/
shared
/
performance
/
recording
-
utils
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
MemoryCallTreeView
=
extend
(
DetailsSubview
{
rerenderPrefs
:
[
"
invert
-
call
-
tree
"
]
rangeChangeDebounceTime
:
100
initialize
:
function
(
)
{
DetailsSubview
.
initialize
.
call
(
this
)
;
this
.
_onLink
=
this
.
_onLink
.
bind
(
this
)
;
this
.
container
=
(
"
#
memory
-
calltree
-
view
>
.
call
-
tree
-
cells
-
container
"
)
;
}
destroy
:
function
(
)
{
DetailsSubview
.
destroy
.
call
(
this
)
;
}
render
:
function
(
interval
=
{
}
)
{
const
options
=
{
invertTree
:
PerformanceController
.
getOption
(
"
invert
-
call
-
tree
"
)
}
;
const
recording
=
PerformanceController
.
getCurrentRecording
(
)
;
const
allocations
=
recording
.
getAllocations
(
)
;
const
threadNode
=
this
.
_prepareCallTree
(
allocations
interval
options
)
;
this
.
_populateCallTree
(
threadNode
options
)
;
this
.
emit
(
EVENTS
.
UI_MEMORY_CALL_TREE_RENDERED
)
;
}
_onLink
:
function
(
treeItem
)
{
const
{
url
line
}
=
treeItem
.
frame
.
getInfo
(
)
;
PerformanceController
.
toolbox
.
viewSourceInDebugger
(
url
line
)
.
then
(
success
=
>
{
if
(
success
)
{
this
.
emit
(
EVENTS
.
SOURCE_SHOWN_IN_JS_DEBUGGER
)
;
}
else
{
this
.
emit
(
EVENTS
.
SOURCE_NOT_FOUND_IN_JS_DEBUGGER
)
;
}
}
)
;
}
_prepareCallTree
:
function
(
allocations
{
startTime
endTime
}
options
)
{
const
thread
=
RecordingUtils
.
getProfileThreadFromAllocations
(
allocations
)
;
const
{
invertTree
}
=
options
;
return
new
ThreadNode
(
thread
{
startTime
endTime
invertTree
}
)
;
}
_populateCallTree
:
function
(
frameNode
options
=
{
}
)
{
const
inverted
=
options
.
invertTree
&
&
frameNode
.
samples
>
0
;
const
root
=
new
CallView
(
{
frame
:
frameNode
inverted
:
inverted
hidden
:
inverted
autoExpandDepth
:
inverted
?
0
:
undefined
visibleCells
:
{
selfCount
:
true
count
:
true
selfSize
:
true
size
:
true
selfCountPercentage
:
true
countPercentage
:
true
selfSizePercentage
:
true
sizePercentage
:
true
function
:
true
}
}
)
;
root
.
on
(
"
link
"
this
.
_onLink
)
;
root
.
on
(
"
focus
"
(
)
=
>
this
.
emit
(
"
focus
"
)
)
;
this
.
container
.
innerHTML
=
"
"
;
root
.
attachTo
(
this
.
container
)
;
root
.
toggleCategories
(
false
)
;
}
toString
:
(
)
=
>
"
[
object
MemoryCallTreeView
]
"
}
)
;
EventEmitter
.
decorate
(
MemoryCallTreeView
)
;
exports
.
MemoryCallTreeView
=
MemoryCallTreeView
;
