"
use
strict
"
;
const
{
extend
}
=
require
(
"
devtools
/
shared
/
extend
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
setNamedTimeout
clearNamedTimeout
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
view
-
helpers
"
)
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
EVENTS
=
require
(
"
devtools
/
client
/
performance
/
events
"
)
;
const
WaterfallUtils
=
require
(
"
devtools
/
client
/
performance
/
modules
/
logic
/
waterfall
-
utils
"
)
;
const
{
TickUtils
}
=
require
(
"
devtools
/
client
/
performance
/
modules
/
waterfall
-
ticks
"
)
;
const
{
MarkerDetails
}
=
require
(
"
devtools
/
client
/
performance
/
modules
/
widgets
/
marker
-
details
"
)
;
const
{
DetailsSubview
}
=
require
(
"
devtools
/
client
/
performance
/
views
/
details
-
abstract
-
subview
"
)
;
const
Waterfall
=
React
.
createFactory
(
require
(
"
devtools
/
client
/
performance
/
components
/
Waterfall
"
)
)
;
const
MARKER_DETAILS_WIDTH
=
200
;
const
WATERFALL_RESIZE_EVENTS_DRAIN
=
100
;
const
WaterfallView
=
extend
(
DetailsSubview
{
MARKER_EPSILON
:
0
.
000000000001
WATERFALL_MARKER_SIDEBAR_WIDTH
:
175
WATERFALL_MARKER_SIDEBAR_SAFE_BOUNDS
:
20
observedPrefs
:
[
"
hidden
-
markers
"
]
rerenderPrefs
:
[
"
hidden
-
markers
"
]
rangeChangeDebounceTime
:
75
initialize
:
function
(
)
{
DetailsSubview
.
initialize
.
call
(
this
)
;
this
.
_cache
=
new
WeakMap
(
)
;
this
.
_onMarkerSelected
=
this
.
_onMarkerSelected
.
bind
(
this
)
;
this
.
_onResize
=
this
.
_onResize
.
bind
(
this
)
;
this
.
_onViewSource
=
this
.
_onViewSource
.
bind
(
this
)
;
this
.
_onShowAllocations
=
this
.
_onShowAllocations
.
bind
(
this
)
;
this
.
_hiddenMarkers
=
PerformanceController
.
getPref
(
"
hidden
-
markers
"
)
;
this
.
treeContainer
=
(
"
#
waterfall
-
tree
"
)
;
this
.
detailsContainer
=
(
"
#
waterfall
-
details
"
)
;
this
.
detailsSplitter
=
(
"
#
waterfall
-
view
>
splitter
"
)
;
this
.
details
=
new
MarkerDetails
(
(
"
#
waterfall
-
details
"
)
(
"
#
waterfall
-
view
>
splitter
"
)
)
;
this
.
details
.
hidden
=
true
;
this
.
details
.
on
(
"
resize
"
this
.
_onResize
)
;
this
.
details
.
on
(
"
view
-
source
"
this
.
_onViewSource
)
;
this
.
details
.
on
(
"
show
-
allocations
"
this
.
_onShowAllocations
)
;
window
.
addEventListener
(
"
resize
"
this
.
_onResize
)
;
this
.
details
.
width
=
MARKER_DETAILS_WIDTH
;
}
destroy
:
function
(
)
{
DetailsSubview
.
destroy
.
call
(
this
)
;
clearNamedTimeout
(
"
waterfall
-
resize
"
)
;
this
.
_cache
=
null
;
this
.
details
.
off
(
"
resize
"
this
.
_onResize
)
;
this
.
details
.
off
(
"
view
-
source
"
this
.
_onViewSource
)
;
this
.
details
.
off
(
"
show
-
allocations
"
this
.
_onShowAllocations
)
;
window
.
removeEventListener
(
"
resize
"
this
.
_onResize
)
;
ReactDOM
.
unmountComponentAtNode
(
this
.
treeContainer
)
;
}
render
:
function
(
interval
=
{
}
)
{
const
recording
=
PerformanceController
.
getCurrentRecording
(
)
;
if
(
recording
.
isRecording
(
)
)
{
return
;
}
const
startTime
=
interval
.
startTime
|
|
0
;
const
endTime
=
interval
.
endTime
|
|
recording
.
getDuration
(
)
;
const
markers
=
recording
.
getMarkers
(
)
;
const
rootMarkerNode
=
this
.
_prepareWaterfallTree
(
markers
)
;
this
.
_populateWaterfallTree
(
rootMarkerNode
{
startTime
endTime
}
)
;
this
.
emit
(
EVENTS
.
UI_WATERFALL_RENDERED
)
;
}
_onMarkerSelected
:
function
(
event
marker
)
{
const
recording
=
PerformanceController
.
getCurrentRecording
(
)
;
const
frames
=
recording
.
getFrames
(
)
;
const
allocations
=
recording
.
getConfiguration
(
)
.
withAllocations
;
if
(
event
=
=
=
"
selected
"
)
{
this
.
details
.
render
(
{
marker
frames
allocations
}
)
;
this
.
details
.
hidden
=
false
;
}
if
(
event
=
=
=
"
unselected
"
)
{
this
.
details
.
empty
(
)
;
}
}
_onResize
:
function
(
)
{
setNamedTimeout
(
"
waterfall
-
resize
"
WATERFALL_RESIZE_EVENTS_DRAIN
(
)
=
>
{
this
.
render
(
OverviewView
.
getTimeInterval
(
)
)
;
}
)
;
}
_onObservedPrefChange
:
function
(
prefName
)
{
this
.
_hiddenMarkers
=
PerformanceController
.
getPref
(
"
hidden
-
markers
"
)
;
this
.
_cache
=
new
WeakMap
(
)
;
}
_onViewSource
:
function
(
data
)
{
PerformanceController
.
viewSourceInDebugger
(
data
.
url
data
.
line
data
.
column
)
;
}
_onShowAllocations
:
function
(
data
)
{
let
{
endTime
}
=
data
;
let
startTime
=
0
;
const
recording
=
PerformanceController
.
getCurrentRecording
(
)
;
const
markers
=
recording
.
getMarkers
(
)
;
let
lastGCMarkerFromPreviousCycle
=
null
;
let
lastGCMarker
=
null
;
for
(
const
marker
of
markers
)
{
if
(
marker
.
start
=
=
=
endTime
)
{
break
;
}
if
(
marker
.
name
=
=
=
"
GarbageCollection
"
)
{
if
(
lastGCMarker
&
&
lastGCMarker
.
cycle
!
=
=
marker
.
cycle
)
{
lastGCMarkerFromPreviousCycle
=
lastGCMarker
;
}
lastGCMarker
=
marker
;
}
}
if
(
lastGCMarkerFromPreviousCycle
)
{
startTime
=
lastGCMarkerFromPreviousCycle
.
end
;
}
endTime
-
=
this
.
MARKER_EPSILON
;
startTime
+
=
startTime
!
=
=
0
?
this
.
MARKER_EPSILON
:
0
;
OverviewView
.
setTimeInterval
(
{
startTime
endTime
}
)
;
DetailsView
.
selectView
(
"
memory
-
calltree
"
)
;
}
_prepareWaterfallTree
:
function
(
markers
)
{
const
cached
=
this
.
_cache
.
get
(
markers
)
;
if
(
cached
)
{
return
cached
;
}
const
rootMarkerNode
=
WaterfallUtils
.
createParentNode
(
{
name
:
"
(
root
)
"
}
)
;
WaterfallUtils
.
collapseMarkersIntoNode
(
{
rootNode
:
rootMarkerNode
markersList
:
markers
filter
:
this
.
_hiddenMarkers
}
)
;
this
.
_cache
.
set
(
markers
rootMarkerNode
)
;
return
rootMarkerNode
;
}
_recalculateBounds
:
function
(
)
{
this
.
waterfallWidth
=
this
.
treeContainer
.
clientWidth
-
this
.
WATERFALL_MARKER_SIDEBAR_WIDTH
-
this
.
WATERFALL_MARKER_SIDEBAR_SAFE_BOUNDS
;
}
_populateWaterfallTree
:
function
(
rootMarkerNode
interval
)
{
this
.
_recalculateBounds
(
)
;
const
doc
=
this
.
treeContainer
.
ownerDocument
;
const
startTime
=
interval
.
startTime
|
0
;
const
endTime
=
interval
.
endTime
|
0
;
const
dataScale
=
this
.
waterfallWidth
/
(
endTime
-
startTime
)
;
this
.
canvas
=
TickUtils
.
drawWaterfallBackground
(
doc
dataScale
this
.
waterfallWidth
)
;
const
treeView
=
Waterfall
(
{
marker
:
rootMarkerNode
startTime
endTime
dataScale
sidebarWidth
:
this
.
WATERFALL_MARKER_SIDEBAR_WIDTH
waterfallWidth
:
this
.
waterfallWidth
onFocus
:
node
=
>
this
.
_onMarkerSelected
(
"
selected
"
node
)
}
)
;
ReactDOM
.
render
(
treeView
this
.
treeContainer
)
;
}
toString
:
(
)
=
>
"
[
object
WaterfallView
]
"
}
)
;
EventEmitter
.
decorate
(
WaterfallView
)
;
exports
.
WaterfallView
=
WaterfallView
;
