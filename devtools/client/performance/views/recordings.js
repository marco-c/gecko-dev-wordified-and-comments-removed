"
use
strict
"
;
var
RecordingsView
=
Heritage
.
extend
(
WidgetMethods
{
initialize
:
function
(
)
{
this
.
widget
=
new
SideMenuWidget
(
(
"
#
recordings
-
list
"
)
)
;
this
.
_onSelect
=
this
.
_onSelect
.
bind
(
this
)
;
this
.
_onRecordingStateChange
=
this
.
_onRecordingStateChange
.
bind
(
this
)
;
this
.
_onNewRecording
=
this
.
_onNewRecording
.
bind
(
this
)
;
this
.
_onSaveButtonClick
=
this
.
_onSaveButtonClick
.
bind
(
this
)
;
this
.
_onRecordingDeleted
=
this
.
_onRecordingDeleted
.
bind
(
this
)
;
this
.
_onRecordingExported
=
this
.
_onRecordingExported
.
bind
(
this
)
;
this
.
emptyText
=
L10N
.
getStr
(
"
noRecordingsText
"
)
;
PerformanceController
.
on
(
EVENTS
.
RECORDING_STATE_CHANGE
this
.
_onRecordingStateChange
)
;
PerformanceController
.
on
(
EVENTS
.
NEW_RECORDING
this
.
_onNewRecording
)
;
PerformanceController
.
on
(
EVENTS
.
RECORDING_DELETED
this
.
_onRecordingDeleted
)
;
PerformanceController
.
on
(
EVENTS
.
RECORDING_EXPORTED
this
.
_onRecordingExported
)
;
this
.
widget
.
addEventListener
(
"
select
"
this
.
_onSelect
false
)
;
}
destroy
:
function
(
)
{
PerformanceController
.
off
(
EVENTS
.
RECORDING_STATE_CHANGE
this
.
_onRecordingStateChange
)
;
PerformanceController
.
off
(
EVENTS
.
NEW_RECORDING
this
.
_onNewRecording
)
;
PerformanceController
.
off
(
EVENTS
.
RECORDING_DELETED
this
.
_onRecordingDeleted
)
;
PerformanceController
.
off
(
EVENTS
.
RECORDING_EXPORTED
this
.
_onRecordingExported
)
;
this
.
widget
.
removeEventListener
(
"
select
"
this
.
_onSelect
false
)
;
}
addEmptyRecording
:
function
(
recording
)
{
let
titleNode
=
document
.
createElement
(
"
label
"
)
;
titleNode
.
className
=
"
plain
recording
-
item
-
title
"
;
titleNode
.
setAttribute
(
"
value
"
recording
.
getLabel
(
)
|
|
L10N
.
getFormatStr
(
"
recordingsList
.
itemLabel
"
this
.
itemCount
+
1
)
)
;
let
durationNode
=
document
.
createElement
(
"
label
"
)
;
durationNode
.
className
=
"
plain
recording
-
item
-
duration
"
;
durationNode
.
setAttribute
(
"
value
"
L10N
.
getStr
(
"
recordingsList
.
recordingLabel
"
)
)
;
let
saveNode
=
document
.
createElement
(
"
label
"
)
;
saveNode
.
className
=
"
plain
recording
-
item
-
save
"
;
saveNode
.
addEventListener
(
"
click
"
this
.
_onSaveButtonClick
)
;
let
hspacer
=
document
.
createElement
(
"
spacer
"
)
;
hspacer
.
setAttribute
(
"
flex
"
"
1
"
)
;
let
footerNode
=
document
.
createElement
(
"
hbox
"
)
;
footerNode
.
className
=
"
recording
-
item
-
footer
"
;
footerNode
.
appendChild
(
durationNode
)
;
footerNode
.
appendChild
(
hspacer
)
;
footerNode
.
appendChild
(
saveNode
)
;
let
vspacer
=
document
.
createElement
(
"
spacer
"
)
;
vspacer
.
setAttribute
(
"
flex
"
"
1
"
)
;
let
contentsNode
=
document
.
createElement
(
"
vbox
"
)
;
contentsNode
.
className
=
"
recording
-
item
"
;
contentsNode
.
setAttribute
(
"
flex
"
"
1
"
)
;
contentsNode
.
appendChild
(
titleNode
)
;
contentsNode
.
appendChild
(
vspacer
)
;
contentsNode
.
appendChild
(
footerNode
)
;
return
this
.
push
(
[
contentsNode
]
{
attachment
:
recording
}
)
;
}
_onNewRecording
:
function
(
_
recording
)
{
this
.
_onRecordingStateChange
(
_
null
recording
)
;
}
_onRecordingStateChange
:
function
(
_
state
recording
)
{
let
recordingItem
=
this
.
getItemForPredicate
(
e
=
>
e
.
attachment
=
=
=
recording
)
;
if
(
!
recordingItem
)
{
recordingItem
=
this
.
addEmptyRecording
(
recording
)
;
if
(
!
recording
.
isConsole
(
)
|
|
this
.
selectedIndex
=
=
=
-
1
)
{
this
.
selectedItem
=
recordingItem
;
}
}
recordingItem
.
isRecording
=
recording
.
isRecording
(
)
;
if
(
!
recording
.
isRecording
(
)
&
&
!
recording
.
isCompleted
(
)
)
{
let
durationNode
=
(
"
.
recording
-
item
-
duration
"
recordingItem
.
target
)
;
durationNode
.
setAttribute
(
"
value
"
L10N
.
getStr
(
"
recordingsList
.
loadingLabel
"
)
)
;
}
if
(
recording
.
isCompleted
(
)
&
&
!
recordingItem
.
finalized
)
{
this
.
finalizeRecording
(
recordingItem
)
;
if
(
!
recording
.
isConsole
(
)
)
{
this
.
forceSelect
(
recordingItem
)
;
}
}
if
(
recording
.
isImported
(
)
)
{
this
.
selectedItem
=
recordingItem
;
}
}
_onRecordingDeleted
:
function
(
_
recording
)
{
let
recordingItem
=
this
.
getItemForPredicate
(
e
=
>
e
.
attachment
=
=
=
recording
)
;
this
.
remove
(
recordingItem
)
;
}
finalizeRecording
:
function
(
recordingItem
)
{
let
model
=
recordingItem
.
attachment
;
recordingItem
.
finalized
=
true
;
let
saveNode
=
(
"
.
recording
-
item
-
save
"
recordingItem
.
target
)
;
saveNode
.
setAttribute
(
"
value
"
L10N
.
getStr
(
"
recordingsList
.
saveLabel
"
)
)
;
let
durationMillis
=
model
.
getDuration
(
)
.
toFixed
(
0
)
;
let
durationNode
=
(
"
.
recording
-
item
-
duration
"
recordingItem
.
target
)
;
durationNode
.
setAttribute
(
"
value
"
L10N
.
getFormatStr
(
"
recordingsList
.
durationLabel
"
durationMillis
)
)
;
}
_onSelect
:
Task
.
async
(
function
*
(
{
detail
:
recordingItem
}
)
{
if
(
!
recordingItem
)
{
return
;
}
let
model
=
recordingItem
.
attachment
;
this
.
emit
(
EVENTS
.
RECORDING_SELECTED
model
)
;
}
)
_onSaveButtonClick
:
function
(
e
)
{
let
fp
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
Ci
.
nsIFilePicker
)
;
fp
.
init
(
window
L10N
.
getStr
(
"
recordingsList
.
saveDialogTitle
"
)
Ci
.
nsIFilePicker
.
modeSave
)
;
fp
.
appendFilter
(
L10N
.
getStr
(
"
recordingsList
.
saveDialogJSONFilter
"
)
"
*
.
json
"
)
;
fp
.
appendFilter
(
L10N
.
getStr
(
"
recordingsList
.
saveDialogAllFilter
"
)
"
*
.
*
"
)
;
fp
.
defaultString
=
"
profile
.
json
"
;
fp
.
open
(
{
done
:
result
=
>
{
if
(
result
=
=
Ci
.
nsIFilePicker
.
returnCancel
)
{
return
;
}
let
recordingItem
=
this
.
getItemForElement
(
e
.
target
)
;
this
.
emit
(
EVENTS
.
UI_EXPORT_RECORDING
recordingItem
.
attachment
fp
.
file
)
;
}
}
)
;
}
_onRecordingExported
:
function
(
_
recording
file
)
{
if
(
recording
.
isConsole
(
)
)
{
return
;
}
let
recordingItem
=
this
.
getItemForPredicate
(
e
=
>
e
.
attachment
=
=
=
recording
)
;
let
titleNode
=
(
"
.
recording
-
item
-
title
"
recordingItem
.
target
)
;
titleNode
.
setAttribute
(
"
value
"
file
.
leafName
.
replace
(
/
\
.
.
+
/
"
"
)
)
;
}
toString
:
(
)
=
>
"
[
object
RecordingsView
]
"
}
)
;
EventEmitter
.
decorate
(
RecordingsView
)
;
