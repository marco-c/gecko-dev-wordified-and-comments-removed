"
use
strict
"
;
const
{
extend
}
=
require
(
"
devtools
/
shared
/
extend
"
)
;
const
EVENTS
=
require
(
"
devtools
/
client
/
performance
/
events
"
)
;
const
{
L10N
}
=
require
(
"
devtools
/
client
/
performance
/
modules
/
global
"
)
;
const
{
DetailsSubview
}
=
require
(
"
devtools
/
client
/
performance
/
views
/
details
-
abstract
-
subview
"
)
;
const
{
FlameGraph
FlameGraphUtils
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
FlameGraph
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
JsFlameGraphView
=
extend
(
DetailsSubview
{
shouldUpdateWhileMouseIsActive
:
true
rerenderPrefs
:
[
"
invert
-
flame
-
graph
"
"
flatten
-
tree
-
recursion
"
"
show
-
platform
-
data
"
"
show
-
idle
-
blocks
"
]
async
initialize
(
)
{
DetailsSubview
.
initialize
.
call
(
this
)
;
this
.
graph
=
new
FlameGraph
(
(
"
#
js
-
flamegraph
-
view
"
)
)
;
this
.
graph
.
timelineTickUnits
=
L10N
.
getStr
(
"
graphs
.
ms
"
)
;
this
.
graph
.
setTheme
(
PerformanceController
.
getTheme
(
)
)
;
await
this
.
graph
.
ready
(
)
;
this
.
_onRangeChangeInGraph
=
this
.
_onRangeChangeInGraph
.
bind
(
this
)
;
this
.
_onThemeChanged
=
this
.
_onThemeChanged
.
bind
(
this
)
;
PerformanceController
.
on
(
EVENTS
.
THEME_CHANGED
this
.
_onThemeChanged
)
;
this
.
graph
.
on
(
"
selecting
"
this
.
_onRangeChangeInGraph
)
;
}
async
destroy
(
)
{
DetailsSubview
.
destroy
.
call
(
this
)
;
PerformanceController
.
off
(
EVENTS
.
THEME_CHANGED
this
.
_onThemeChanged
)
;
this
.
graph
.
off
(
"
selecting
"
this
.
_onRangeChangeInGraph
)
;
await
this
.
graph
.
destroy
(
)
;
}
render
:
function
(
interval
=
{
}
)
{
const
recording
=
PerformanceController
.
getCurrentRecording
(
)
;
const
duration
=
recording
.
getDuration
(
)
;
const
profile
=
recording
.
getProfile
(
)
;
const
thread
=
profile
.
threads
[
0
]
;
const
data
=
FlameGraphUtils
.
createFlameGraphDataFromThread
(
thread
{
invertTree
:
PerformanceController
.
getOption
(
"
invert
-
flame
-
graph
"
)
flattenRecursion
:
PerformanceController
.
getOption
(
"
flatten
-
tree
-
recursion
"
)
contentOnly
:
!
PerformanceController
.
getOption
(
"
show
-
platform
-
data
"
)
showIdleBlocks
:
PerformanceController
.
getOption
(
"
show
-
idle
-
blocks
"
)
&
&
L10N
.
getStr
(
"
table
.
idle
"
)
}
)
;
this
.
graph
.
setData
(
{
data
bounds
:
{
startTime
:
0
endTime
:
duration
}
visible
:
{
startTime
:
interval
.
startTime
|
|
0
endTime
:
interval
.
endTime
|
|
duration
}
}
)
;
this
.
graph
.
focus
(
)
;
this
.
emit
(
EVENTS
.
UI_JS_FLAMEGRAPH_RENDERED
)
;
}
_onRangeChangeInGraph
:
function
(
)
{
const
interval
=
this
.
graph
.
getViewRange
(
)
;
this
.
requiresUpdateOnRangeChange
=
false
;
OverviewView
.
setTimeInterval
(
interval
)
;
this
.
requiresUpdateOnRangeChange
=
true
;
}
_onRerenderPrefChanged
:
function
(
)
{
const
recording
=
PerformanceController
.
getCurrentRecording
(
)
;
const
profile
=
recording
.
getProfile
(
)
;
const
thread
=
profile
.
threads
[
0
]
;
FlameGraphUtils
.
removeFromCache
(
thread
)
;
}
_onThemeChanged
:
function
(
theme
)
{
this
.
graph
.
setTheme
(
theme
)
;
this
.
graph
.
refresh
(
{
force
:
true
}
)
;
}
toString
:
(
)
=
>
"
[
object
JsFlameGraphView
]
"
}
)
;
EventEmitter
.
decorate
(
JsFlameGraphView
)
;
exports
.
JsFlameGraphView
=
JsFlameGraphView
;
