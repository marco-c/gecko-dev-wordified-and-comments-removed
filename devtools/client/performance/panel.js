"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
function
PerformancePanel
(
iframeWindow
toolbox
commands
)
{
this
.
panelWin
=
iframeWindow
;
this
.
toolbox
=
toolbox
;
this
.
commands
=
commands
;
this
.
_targetAvailablePromise
=
Promise
.
resolve
(
)
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
exports
.
PerformancePanel
=
PerformancePanel
;
PerformancePanel
.
prototype
=
{
async
open
(
)
{
if
(
this
.
_opening
)
{
return
this
.
_opening
;
}
this
.
_checkRecordingStatus
=
this
.
_checkRecordingStatus
.
bind
(
this
)
;
const
{
PerformanceController
EVENTS
}
=
this
.
panelWin
;
PerformanceController
.
on
(
EVENTS
.
RECORDING_ADDED
this
.
_checkRecordingStatus
)
;
PerformanceController
.
on
(
EVENTS
.
RECORDING_STATE_CHANGE
this
.
_checkRecordingStatus
)
;
await
this
.
commands
.
targetCommand
.
watchTargets
(
[
this
.
commands
.
targetCommand
.
TYPES
.
FRAME
]
this
.
_onTargetAvailable
)
;
this
.
_checkRecordingStatus
(
)
;
this
.
isReady
=
true
;
this
.
emit
(
"
ready
"
)
;
this
.
_opening
=
new
Promise
(
resolve
=
>
{
resolve
(
this
)
;
}
)
;
return
this
.
_opening
;
}
get
target
(
)
{
return
this
.
toolbox
.
target
;
}
async
destroy
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
const
{
PerformanceController
PerformanceView
EVENTS
}
=
this
.
panelWin
;
PerformanceController
.
off
(
EVENTS
.
RECORDING_ADDED
this
.
_checkRecordingStatus
)
;
PerformanceController
.
off
(
EVENTS
.
RECORDING_STATE_CHANGE
this
.
_checkRecordingStatus
)
;
this
.
commands
.
targetCommand
.
unwatchTargets
(
[
this
.
commands
.
targetCommand
.
TYPES
.
FRAME
]
this
.
_onTargetAvailable
)
;
await
PerformanceController
.
destroy
(
)
;
await
PerformanceView
.
destroy
(
)
;
PerformanceController
.
disableFrontEventListeners
(
)
;
this
.
emit
(
"
destroyed
"
)
;
this
.
_destroyed
=
true
;
}
_checkRecordingStatus
:
function
(
)
{
if
(
this
.
panelWin
.
PerformanceController
.
isRecording
(
)
)
{
this
.
toolbox
.
highlightTool
(
"
performance
"
)
;
}
else
{
this
.
toolbox
.
unhighlightTool
(
"
performance
"
)
;
}
}
async
_handleTargetAvailable
(
{
targetFront
}
)
{
if
(
targetFront
.
isTopLevel
)
{
const
{
PerformanceController
PerformanceView
}
=
this
.
panelWin
;
const
performanceFront
=
await
targetFront
.
getFront
(
"
performance
"
)
;
if
(
!
this
.
_isPanelInitialized
)
{
await
PerformanceController
.
initialize
(
this
.
toolbox
targetFront
performanceFront
)
;
await
PerformanceView
.
initialize
(
)
;
PerformanceController
.
enableFrontEventListeners
(
)
;
this
.
_isPanelInitialized
=
true
;
}
else
{
const
isRecording
=
PerformanceController
.
isRecording
(
)
;
if
(
isRecording
)
{
await
PerformanceController
.
stopRecording
(
)
;
}
PerformanceView
.
resetBufferStatus
(
)
;
PerformanceController
.
updateFronts
(
targetFront
performanceFront
)
;
if
(
isRecording
)
{
await
PerformanceController
.
startRecording
(
)
;
}
}
}
}
_onTargetAvailable
(
parameters
)
{
this
.
_targetAvailablePromise
=
this
.
_targetAvailablePromise
.
then
(
(
)
=
>
this
.
_handleTargetAvailable
(
parameters
)
)
;
return
this
.
_targetAvailablePromise
;
}
}
;
