"
use
strict
"
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
function
PerformancePanel
(
iframeWindow
toolbox
)
{
this
.
panelWin
=
iframeWindow
;
this
.
toolbox
=
toolbox
;
EventEmitter
.
decorate
(
this
)
;
}
exports
.
PerformancePanel
=
PerformancePanel
;
PerformancePanel
.
prototype
=
{
async
open
(
)
{
if
(
this
.
_opening
)
{
return
this
.
_opening
;
}
const
deferred
=
defer
(
)
;
this
.
_opening
=
deferred
.
promise
;
this
.
panelWin
.
gToolbox
=
this
.
toolbox
;
this
.
panelWin
.
gTarget
=
this
.
target
;
this
.
_checkRecordingStatus
=
this
.
_checkRecordingStatus
.
bind
(
this
)
;
const
front
=
await
this
.
panelWin
.
gToolbox
.
initPerformance
(
)
;
if
(
!
front
)
{
console
.
error
(
"
No
PerformanceFront
found
in
toolbox
.
"
)
;
}
this
.
panelWin
.
gFront
=
front
;
const
{
PerformanceController
EVENTS
}
=
this
.
panelWin
;
PerformanceController
.
on
(
EVENTS
.
RECORDING_ADDED
this
.
_checkRecordingStatus
)
;
PerformanceController
.
on
(
EVENTS
.
RECORDING_STATE_CHANGE
this
.
_checkRecordingStatus
)
;
await
this
.
panelWin
.
startupPerformance
(
)
;
this
.
_checkRecordingStatus
(
)
;
this
.
isReady
=
true
;
this
.
emit
(
"
ready
"
)
;
deferred
.
resolve
(
this
)
;
return
this
.
_opening
;
}
get
target
(
)
{
return
this
.
toolbox
.
target
;
}
async
destroy
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
const
{
PerformanceController
EVENTS
}
=
this
.
panelWin
;
PerformanceController
.
off
(
EVENTS
.
RECORDING_ADDED
this
.
_checkRecordingStatus
)
;
PerformanceController
.
off
(
EVENTS
.
RECORDING_STATE_CHANGE
this
.
_checkRecordingStatus
)
;
await
this
.
panelWin
.
shutdownPerformance
(
)
;
this
.
emit
(
"
destroyed
"
)
;
this
.
_destroyed
=
true
;
}
_checkRecordingStatus
:
function
(
)
{
if
(
this
.
panelWin
.
PerformanceController
.
isRecording
(
)
)
{
this
.
toolbox
.
highlightTool
(
"
performance
"
)
;
}
else
{
this
.
toolbox
.
unhighlightTool
(
"
performance
"
)
;
}
}
}
;
