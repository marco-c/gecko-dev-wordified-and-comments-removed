var
gScratchpad
;
var
gFile
;
var
gFileName
=
"
testFileForBug751744
.
tmp
"
;
var
gFileContent
=
"
/
*
this
file
is
already
saved
*
/
\
n
"
+
"
function
foo
(
)
{
alert
(
'
bar
'
)
}
"
;
var
menu
;
function
startTest
(
)
{
gScratchpad
=
gScratchpadWindow
.
Scratchpad
;
menu
=
gScratchpadWindow
.
document
.
getElementById
(
"
sp
-
cmd
-
revert
"
)
;
createAndLoadTemporaryFile
(
)
;
}
function
testAfterSaved
(
)
{
ok
(
menu
.
hasAttribute
(
"
disabled
"
)
"
The
revert
menu
entry
is
disabled
.
"
)
;
gScratchpad
.
setText
(
gScratchpad
.
getText
(
)
+
"
\
nfoo
(
)
;
"
)
;
is
(
gScratchpad
.
getText
(
)
gFileContent
+
"
\
nfoo
(
)
;
"
"
The
text
changed
the
first
time
.
"
)
;
ok
(
!
menu
.
hasAttribute
(
"
disabled
"
)
"
The
revert
menu
entry
is
enabled
after
changing
text
first
time
"
)
;
gScratchpad
.
revertFile
(
testAfterRevert
)
;
}
function
testAfterRevert
(
)
{
is
(
gScratchpad
.
getText
(
)
gFileContent
"
The
text
reverted
back
to
original
text
.
"
)
;
ok
(
menu
.
hasAttribute
(
"
disabled
"
)
"
The
revert
menu
entry
is
disabled
after
reverting
.
"
)
;
gScratchpad
.
setText
(
gScratchpad
.
getText
(
)
+
"
\
nalert
(
foo
.
toSource
(
)
)
;
"
)
;
gScratchpad
.
saveFile
(
testAfterSecondSave
)
;
}
function
testAfterSecondSave
(
)
{
ok
(
menu
.
hasAttribute
(
"
disabled
"
)
"
The
revert
menu
entry
is
disabled
after
saving
.
"
)
;
gScratchpad
.
setText
(
gScratchpad
.
getText
(
)
+
"
\
nfoo
(
)
;
"
)
;
ok
(
!
menu
.
hasAttribute
(
"
disabled
"
)
"
The
revert
menu
entry
is
enabled
after
changing
text
third
time
"
)
;
gScratchpad
.
revertFile
(
testAfterSecondRevert
)
;
}
function
testAfterSecondRevert
(
)
{
is
(
gScratchpad
.
getText
(
)
gFileContent
+
"
\
nalert
(
foo
.
toSource
(
)
)
;
"
"
The
text
reverted
back
to
the
changed
saved
text
.
"
)
;
ok
(
menu
.
hasAttribute
(
"
disabled
"
)
"
Revert
menu
entry
is
disabled
after
reverting
to
changed
saved
state
.
"
)
;
gFile
.
remove
(
false
)
;
gFile
=
gScratchpad
=
menu
=
null
;
finish
(
)
;
}
function
createAndLoadTemporaryFile
(
)
{
gFile
=
FileUtils
.
getFile
(
"
TmpD
"
[
gFileName
]
)
;
gFile
.
createUnique
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
0o666
)
;
let
fout
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
fout
.
init
(
gFile
.
QueryInterface
(
Ci
.
nsIFile
)
0x02
|
0x08
|
0x20
0o644
fout
.
DEFER_OPEN
)
;
let
converter
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
converter
.
charset
=
"
UTF
-
8
"
;
let
fileContentStream
=
converter
.
convertToInputStream
(
gFileContent
)
;
NetUtil
.
asyncCopy
(
fileContentStream
fout
tempFileSaved
)
;
}
function
tempFileSaved
(
aStatus
)
{
ok
(
Components
.
isSuccessCode
(
aStatus
)
"
the
temporary
file
was
saved
successfully
"
)
;
gScratchpad
.
setFilename
(
gFile
.
path
)
;
gScratchpad
.
importFromFile
(
gFile
.
QueryInterface
(
Ci
.
nsIFile
)
true
testAfterSaved
)
;
}
function
test
(
)
{
waitForExplicitFinish
(
)
;
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
.
then
(
function
(
)
{
openScratchpad
(
startTest
)
;
}
)
;
gBrowser
.
loadURI
(
"
data
:
text
/
html
<
p
>
test
reverting
to
last
saved
state
of
"
+
"
a
file
<
/
p
>
"
)
;
}
