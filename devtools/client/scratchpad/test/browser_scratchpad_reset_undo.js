var
gScratchpadWindow
;
var
gScratchpad
;
var
gFileA
;
var
gFileB
;
var
gFileAContent
=
"
/
/
File
A
*
*
Hello
World
!
"
;
var
gFileBContent
=
"
/
/
File
B
*
*
Goodbye
All
"
;
var
gFirstFileSaved
=
false
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
gBrowser
.
selectedBrowser
.
addEventListener
(
"
load
"
function
(
)
{
openScratchpad
(
runTests
)
;
}
{
capture
:
true
once
:
true
}
)
;
content
.
location
=
"
data
:
text
/
html
<
p
>
test
that
undo
get
'
s
reset
after
file
load
in
Scratchpad
"
;
}
function
runTests
(
)
{
gScratchpad
=
gScratchpadWindow
.
Scratchpad
;
gFileA
=
FileUtils
.
getFile
(
"
TmpD
"
[
"
fileAForBug684546
.
tmp
"
]
)
;
gFileA
.
createUnique
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
0o666
)
;
gFileB
=
FileUtils
.
getFile
(
"
TmpD
"
[
"
fileBForBug684546
.
tmp
"
]
)
;
gFileB
.
createUnique
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
0o666
)
;
let
foutA
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
foutA
.
init
(
gFileA
.
QueryInterface
(
Ci
.
nsILocalFile
)
0x02
|
0x08
|
0x20
0o644
foutA
.
DEFER_OPEN
)
;
let
foutB
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
foutB
.
init
(
gFileB
.
QueryInterface
(
Ci
.
nsILocalFile
)
0x02
|
0x08
|
0x20
0o644
foutB
.
DEFER_OPEN
)
;
let
converter
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
converter
.
charset
=
"
UTF
-
8
"
;
let
fileContentStreamA
=
converter
.
convertToInputStream
(
gFileAContent
)
;
let
fileContentStreamB
=
converter
.
convertToInputStream
(
gFileBContent
)
;
NetUtil
.
asyncCopy
(
fileContentStreamA
foutA
tempFileSaved
)
;
NetUtil
.
asyncCopy
(
fileContentStreamB
foutB
tempFileSaved
)
;
}
function
tempFileSaved
(
aStatus
)
{
let
success
=
Components
.
isSuccessCode
(
aStatus
)
;
ok
(
success
"
a
temporary
file
was
saved
successfully
"
)
;
if
(
!
success
)
{
finish
(
)
;
return
;
}
if
(
gFirstFileSaved
&
&
success
)
{
ok
(
(
gFirstFileSaved
&
&
success
)
"
Both
files
loaded
"
)
;
gScratchpad
.
importFromFile
(
gFileA
.
QueryInterface
(
Ci
.
nsILocalFile
)
true
fileAImported
)
;
}
gFirstFileSaved
=
success
;
}
function
fileAImported
(
aStatus
aFileContent
)
{
ok
(
Components
.
isSuccessCode
(
aStatus
)
"
the
temporary
file
A
was
imported
successfully
with
Scratchpad
"
)
;
is
(
aFileContent
gFileAContent
"
received
data
is
correct
"
)
;
is
(
gScratchpad
.
getText
(
)
gFileAContent
"
the
editor
content
is
correct
"
)
;
gScratchpad
.
editor
.
replaceText
(
"
new
text
"
gScratchpad
.
editor
.
getPosition
(
gScratchpad
.
getText
(
)
.
length
)
)
;
is
(
gScratchpad
.
getText
(
)
gFileAContent
+
"
new
text
"
"
text
updated
correctly
"
)
;
gScratchpad
.
undo
(
)
;
is
(
gScratchpad
.
getText
(
)
gFileAContent
"
undo
works
"
)
;
gScratchpad
.
redo
(
)
;
is
(
gScratchpad
.
getText
(
)
gFileAContent
+
"
new
text
"
"
redo
works
"
)
;
gScratchpad
.
importFromFile
(
gFileB
.
QueryInterface
(
Ci
.
nsILocalFile
)
true
fileBImported
)
;
}
function
fileBImported
(
aStatus
aFileContent
)
{
ok
(
Components
.
isSuccessCode
(
aStatus
)
"
the
temporary
file
B
was
imported
successfully
with
Scratchpad
"
)
;
is
(
aFileContent
gFileBContent
"
received
data
is
correct
"
)
;
is
(
gScratchpad
.
getText
(
)
gFileBContent
"
the
editor
content
is
correct
"
)
;
ok
(
!
gScratchpad
.
editor
.
canUndo
(
)
"
editor
cannot
undo
after
load
"
)
;
gScratchpad
.
undo
(
)
;
is
(
gScratchpad
.
getText
(
)
gFileBContent
"
the
editor
content
is
still
correct
after
undo
"
)
;
gScratchpad
.
editor
.
replaceText
(
"
new
text
"
gScratchpad
.
editor
.
getPosition
(
gScratchpad
.
getText
(
)
.
length
)
)
;
is
(
gScratchpad
.
getText
(
)
gFileBContent
+
"
new
text
"
"
text
updated
correctly
"
)
;
gScratchpad
.
undo
(
)
;
is
(
gScratchpad
.
getText
(
)
gFileBContent
"
undo
works
"
)
;
ok
(
!
gScratchpad
.
editor
.
canUndo
(
)
"
editor
cannot
undo
after
load
(
again
)
"
)
;
gScratchpad
.
redo
(
)
;
is
(
gScratchpad
.
getText
(
)
gFileBContent
+
"
new
text
"
"
redo
works
"
)
;
finish
(
)
;
}
registerCleanupFunction
(
function
(
)
{
if
(
gFileA
&
&
gFileA
.
exists
(
)
)
{
gFileA
.
remove
(
false
)
;
gFileA
=
null
;
}
if
(
gFileB
&
&
gFileB
.
exists
(
)
)
{
gFileB
.
remove
(
false
)
;
gFileB
=
null
;
}
gScratchpad
=
null
;
}
)
;
