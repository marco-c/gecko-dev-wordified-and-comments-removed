var
gScratchpad
;
var
gFile01
;
var
gFile02
;
var
gFile03
;
var
gFile04
;
var
lists
=
{
recentFiles01
:
null
recentFiles02
:
null
recentFiles03
:
null
recentFiles04
:
null
}
;
var
gFileName01
=
"
file01_ForBug651942
.
tmp
"
;
var
gFileName02
=
"
"
;
var
gFileName03
=
"
file03_ForBug651942
.
tmp
"
;
var
gFileName04
=
"
file04_ForBug651942
.
tmp
"
;
var
gFileContent01
=
"
hello
.
world
.
01
(
'
bug651942
'
)
;
"
;
var
gFileContent02
=
"
hello
.
world
.
02
(
'
bug651942
'
)
;
"
;
var
gFileContent03
=
"
hello
.
world
.
03
(
'
bug651942
'
)
;
"
;
var
gFileContent04
=
"
hello
.
world
.
04
(
'
bug651942
'
)
;
"
;
async
function
startTest
(
)
{
gScratchpad
=
gScratchpadWindow
.
Scratchpad
;
gFile01
=
await
createAndLoadTemporaryFile
(
gFileName01
gFileContent01
)
;
gFile02
=
await
createAndLoadTemporaryFile
(
gFileName02
gFileContent02
)
;
gFile03
=
await
createAndLoadTemporaryFile
(
gFileName03
gFileContent03
)
;
}
async
function
testAddedToRecent
(
)
{
lists
.
recentFiles01
=
gScratchpad
.
getRecentFiles
(
)
;
is
(
lists
.
recentFiles01
.
length
3
"
Temporary
files
created
successfully
and
added
to
list
of
recent
files
.
"
)
;
gFile04
=
await
createAndLoadTemporaryFile
(
gFileName04
gFileContent04
)
;
}
function
testOverwriteRecent
(
)
{
lists
.
recentFiles02
=
gScratchpad
.
getRecentFiles
(
)
;
is
(
lists
.
recentFiles02
[
0
]
lists
.
recentFiles01
[
1
]
"
File02
was
reordered
successfully
in
the
'
recent
files
'
-
list
.
"
)
;
is
(
lists
.
recentFiles02
[
1
]
lists
.
recentFiles01
[
2
]
"
File03
was
reordered
successfully
in
the
'
recent
files
'
-
list
.
"
)
;
isnot
(
lists
.
recentFiles02
[
2
]
lists
.
recentFiles01
[
2
]
"
File04
:
was
added
successfully
.
"
)
;
gScratchpad
.
openFile
(
0
)
;
}
function
testOpenOldestRecent
(
)
{
lists
.
recentFiles03
=
gScratchpad
.
getRecentFiles
(
)
;
is
(
lists
.
recentFiles02
[
0
]
lists
.
recentFiles03
[
2
]
"
File04
was
reordered
successfully
in
the
'
recent
files
'
-
list
.
"
)
;
is
(
lists
.
recentFiles02
[
1
]
lists
.
recentFiles03
[
0
]
"
File03
was
reordered
successfully
in
the
'
recent
files
'
-
list
.
"
)
;
is
(
lists
.
recentFiles02
[
2
]
lists
.
recentFiles03
[
1
]
"
File02
was
reordered
successfully
in
the
'
recent
files
'
-
list
.
"
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
scratchpad
.
recentFilesMax
"
0
)
;
}
function
testHideMenu
(
)
{
const
menu
=
gScratchpadWindow
.
document
.
getElementById
(
"
sp
-
open_recent
-
menu
"
)
;
ok
(
menu
.
hasAttribute
(
"
hidden
"
)
"
The
menu
was
hidden
successfully
.
"
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
scratchpad
.
recentFilesMax
"
2
)
;
}
function
testChangedMaxRecent
(
)
{
const
menu
=
gScratchpadWindow
.
document
.
getElementById
(
"
sp
-
open_recent
-
menu
"
)
;
ok
(
!
menu
.
hasAttribute
(
"
hidden
"
)
"
The
menu
is
visible
.
\
\
o
/
"
)
;
lists
.
recentFiles04
=
gScratchpad
.
getRecentFiles
(
)
;
is
(
lists
.
recentFiles04
.
length
2
"
Two
recent
files
were
successfully
removed
from
the
'
recent
files
'
-
list
"
)
;
const
doc
=
gScratchpadWindow
.
document
;
const
popup
=
doc
.
getElementById
(
"
sp
-
menu
-
open_recentPopup
"
)
;
const
menuitemLabel
=
popup
.
children
[
0
]
.
getAttribute
(
"
label
"
)
;
let
correctMenuItem
=
false
;
if
(
menuitemLabel
=
=
=
lists
.
recentFiles03
[
2
]
&
&
menuitemLabel
=
=
=
lists
.
recentFiles04
[
1
]
)
{
correctMenuItem
=
true
;
}
is
(
correctMenuItem
true
"
Two
recent
files
were
successfully
removed
from
the
'
Open
Recent
'
-
menu
"
)
;
gFile04
.
remove
(
false
)
;
waitForFileDeletion
(
)
;
}
function
waitForFileDeletion
(
)
{
if
(
gFile04
.
exists
(
)
)
{
executeSoon
(
waitForFileDeletion
)
;
return
;
}
gFile04
=
null
;
gScratchpad
.
openFile
(
0
)
;
}
function
testOpenDeletedFile
(
)
{
const
doc
=
gScratchpadWindow
.
document
;
const
popup
=
doc
.
getElementById
(
"
sp
-
menu
-
open_recentPopup
"
)
;
is
(
gScratchpad
.
getRecentFiles
(
)
.
length
1
"
The
missing
file
was
successfully
removed
from
the
list
.
"
)
;
is
(
popup
.
children
.
length
3
"
The
missing
file
was
successfully
removed
from
the
menu
.
"
)
;
ok
(
gScratchpad
.
notificationBox
.
currentNotification
"
The
notification
was
successfully
displayed
.
"
)
;
is
(
gScratchpad
.
notificationBox
.
currentNotification
.
label
gScratchpad
.
strings
.
GetStringFromName
(
"
fileNoLongerExists
.
notification
"
)
"
The
notification
label
is
correct
.
"
)
;
gScratchpad
.
clearRecentFiles
(
)
;
}
function
testClearedAll
(
)
{
const
doc
=
gScratchpadWindow
.
document
;
const
menu
=
doc
.
getElementById
(
"
sp
-
open_recent
-
menu
"
)
;
const
popup
=
doc
.
getElementById
(
"
sp
-
menu
-
open_recentPopup
"
)
;
is
(
gScratchpad
.
getRecentFiles
(
)
.
length
0
"
All
recent
files
removed
successfully
.
"
)
;
is
(
popup
.
children
.
length
0
"
All
menuitems
removed
successfully
.
"
)
;
ok
(
menu
.
hasAttribute
(
"
disabled
"
)
"
No
files
in
the
menu
it
was
disabled
successfully
.
"
)
;
finishTest
(
)
;
}
async
function
createAndLoadTemporaryFile
(
aFileName
aFileContent
)
{
info
(
Create
file
:
{
aFileName
}
)
;
const
aFile
=
FileUtils
.
getFile
(
"
TmpD
"
[
aFileName
]
)
;
aFile
.
createUnique
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
0o666
)
;
await
OS
.
File
.
writeAtomic
(
aFile
.
path
aFileContent
)
;
gScratchpad
.
setFilename
(
aFile
.
path
)
;
let
[
status
]
=
await
gScratchpad
.
importFromFile
(
aFile
.
QueryInterface
(
Ci
.
nsIFile
)
true
)
;
ok
(
Components
.
isSuccessCode
(
status
)
"
the
temporary
file
was
imported
successfully
with
Scratchpad
"
)
;
status
=
await
gScratchpad
.
saveFile
(
)
;
ok
(
Components
.
isSuccessCode
(
status
)
"
the
temporary
file
was
saved
successfully
with
Scratchpad
"
)
;
checkIfMenuIsPopulated
(
)
;
info
(
File
created
:
{
aFileName
}
)
;
return
aFile
;
}
function
checkIfMenuIsPopulated
(
)
{
const
doc
=
gScratchpadWindow
.
document
;
const
expectedMenuitemCount
=
doc
.
getElementById
(
"
sp
-
menu
-
open_recentPopup
"
)
.
children
.
length
;
const
recentFilesPlusExtra
=
gScratchpad
.
getRecentFiles
(
)
.
length
+
2
;
if
(
expectedMenuitemCount
>
2
)
{
is
(
expectedMenuitemCount
recentFilesPlusExtra
"
the
recent
files
menu
was
populated
successfully
.
"
)
;
}
}
var
PreferenceObserver
=
{
_initialized
:
false
_timesFired
:
0
set
timesFired
(
aNewValue
)
{
this
.
_timesFired
=
aNewValue
;
}
get
timesFired
(
)
{
return
this
.
_timesFired
;
}
init
:
function
PO_init
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
this
.
branch
=
Services
.
prefs
.
getBranch
(
"
devtools
.
scratchpad
.
"
)
;
this
.
branch
.
addObserver
(
"
"
this
)
;
this
.
_initialized
=
true
;
}
observe
:
async
function
PO_observe
(
aMessage
aTopic
aData
)
{
if
(
aTopic
!
=
"
nsPref
:
changed
"
)
{
return
;
}
if
(
this
.
_inProgress
)
{
await
this
.
_inProgress
;
}
this
.
_inProgress
=
new
Promise
(
async
resolve
=
>
{
info
(
Times
fired
:
{
this
.
timesFired
}
)
;
switch
(
this
.
timesFired
)
{
case
0
:
this
.
timesFired
=
1
;
break
;
case
1
:
this
.
timesFired
=
2
;
break
;
case
2
:
this
.
timesFired
=
3
;
await
testAddedToRecent
(
)
;
break
;
case
3
:
this
.
timesFired
=
4
;
testOverwriteRecent
(
)
;
break
;
case
4
:
this
.
timesFired
=
5
;
testOpenOldestRecent
(
)
;
break
;
case
5
:
this
.
timesFired
=
6
;
testHideMenu
(
)
;
break
;
case
6
:
this
.
timesFired
=
7
;
testChangedMaxRecent
(
)
;
break
;
case
7
:
this
.
timesFired
=
8
;
testOpenDeletedFile
(
)
;
break
;
case
8
:
this
.
timesFired
=
9
;
testClearedAll
(
)
;
break
;
}
this
.
_inProgress
=
null
;
resolve
(
)
;
}
)
;
}
uninit
:
function
PO_uninit
(
)
{
this
.
branch
.
removeObserver
(
"
"
this
)
;
}
}
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
registerCleanupFunction
(
function
(
)
{
gFile01
.
remove
(
false
)
;
gFile01
=
null
;
gFile02
.
remove
(
false
)
;
gFile02
=
null
;
gFile03
.
remove
(
false
)
;
gFile03
=
null
;
lists
.
recentFiles01
=
null
;
lists
.
recentFiles02
=
null
;
lists
.
recentFiles03
=
null
;
lists
.
recentFiles04
=
null
;
gScratchpad
=
null
;
PreferenceObserver
.
uninit
(
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
scratchpad
.
recentFilesMax
"
)
;
}
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
scratchpad
.
recentFilesMax
"
3
)
;
PreferenceObserver
.
init
(
)
;
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
.
then
(
function
(
)
{
openScratchpad
(
startTest
)
;
}
)
;
gBrowser
.
loadURI
(
"
data
:
text
/
html
<
p
>
test
recent
files
in
Scratchpad
"
)
;
}
function
finishTest
(
)
{
finish
(
)
;
}
