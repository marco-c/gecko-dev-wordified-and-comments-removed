"
use
strict
"
;
const
{
NetUtil
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
{
}
)
;
const
{
FileUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
{
}
)
;
const
{
ScratchpadManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
scratchpad
/
scratchpad
-
manager
.
jsm
"
{
}
)
;
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
promise
=
require
(
"
promise
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
var
gScratchpadWindow
;
function
openScratchpad
(
aReadyCallback
aOptions
=
{
}
)
{
const
win
=
aOptions
.
window
|
|
ScratchpadManager
.
openScratchpad
(
aOptions
.
state
)
;
if
(
!
win
)
{
return
;
}
const
onLoad
=
function
(
)
{
win
.
removeEventListener
(
"
load
"
onLoad
)
;
win
.
Scratchpad
.
addObserver
(
{
onReady
:
function
(
aScratchpad
)
{
aScratchpad
.
removeObserver
(
this
)
;
if
(
aOptions
.
noFocus
)
{
aReadyCallback
(
win
aScratchpad
)
;
}
else
{
waitForFocus
(
aReadyCallback
.
bind
(
null
win
aScratchpad
)
win
)
;
}
}
}
)
;
}
;
if
(
aReadyCallback
)
{
win
.
addEventListener
(
"
load
"
onLoad
)
;
}
gScratchpadWindow
=
win
;
return
gScratchpadWindow
;
}
function
openTabAndScratchpad
(
aOptions
=
{
}
)
{
waitForExplicitFinish
(
)
;
return
new
promise
(
resolve
=
>
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
const
{
selectedBrowser
}
=
gBrowser
;
BrowserTestUtils
.
browserLoaded
(
selectedBrowser
)
.
then
(
function
(
)
{
openScratchpad
(
(
win
sp
)
=
>
resolve
(
[
win
sp
]
)
aOptions
)
;
}
)
;
gBrowser
.
loadURI
(
"
data
:
text
/
html
;
charset
=
utf8
"
+
(
aOptions
.
tabContent
|
|
"
"
)
)
;
}
)
;
}
function
createTempFile
(
aName
aContent
aCallback
=
function
(
)
{
}
)
{
const
file
=
FileUtils
.
getFile
(
"
TmpD
"
[
aName
]
)
;
file
.
createUnique
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
parseInt
(
"
666
"
8
)
)
;
const
fout
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
fout
.
init
(
file
.
QueryInterface
(
Ci
.
nsIFile
)
0x02
|
0x08
|
0x20
parseInt
(
"
644
"
8
)
fout
.
DEFER_OPEN
)
;
const
converter
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
converter
.
charset
=
"
UTF
-
8
"
;
const
fileContentStream
=
converter
.
convertToInputStream
(
aContent
)
;
NetUtil
.
asyncCopy
(
fileContentStream
fout
function
(
aStatus
)
{
aCallback
(
aStatus
file
)
;
}
)
;
}
function
runAsyncTests
(
aScratchpad
aTests
)
{
const
deferred
=
defer
(
)
;
(
function
runTest
(
)
{
if
(
aTests
.
length
)
{
const
test
=
aTests
.
shift
(
)
;
aScratchpad
.
setText
(
test
.
code
)
;
aScratchpad
[
test
.
method
]
(
)
.
then
(
function
success
(
)
{
is
(
aScratchpad
.
getText
(
)
test
.
result
test
.
label
)
;
runTest
(
)
;
}
function
failure
(
error
)
{
ok
(
false
error
.
stack
+
"
"
+
test
.
label
)
;
runTest
(
)
;
}
)
;
}
else
{
deferred
.
resolve
(
)
;
}
}
)
(
)
;
return
deferred
.
promise
;
}
var
runAsyncCallbackTests
=
async
function
(
aScratchpad
aTests
)
{
for
(
const
{
prepare
method
then
}
of
aTests
)
{
await
prepare
(
)
;
const
res
=
await
aScratchpad
[
method
]
(
)
;
await
then
(
res
)
;
}
}
;
function
inContent
(
generator
)
{
return
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
generator
)
;
}
function
cleanup
(
)
{
if
(
gScratchpadWindow
)
{
gScratchpadWindow
.
close
(
)
;
gScratchpadWindow
=
null
;
}
while
(
gBrowser
.
tabs
.
length
>
1
)
{
gBrowser
.
removeCurrentTab
(
)
;
}
}
registerCleanupFunction
(
cleanup
)
;
