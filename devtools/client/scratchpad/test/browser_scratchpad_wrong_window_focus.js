function
test
(
)
{
waitForExplicitFinish
(
)
;
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
.
then
(
function
(
)
{
openScratchpad
(
function
(
)
{
const
sw
=
gScratchpadWindow
;
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
openScratchpad
(
function
(
)
{
const
target
=
TargetFactory
.
forTab
(
gBrowser
.
selectedTab
)
;
gDevTools
.
showToolbox
(
target
"
webconsole
"
)
.
then
(
(
toolbox
)
=
>
{
const
hud
=
toolbox
.
getCurrentPanel
(
)
.
hud
;
hud
.
ui
.
clearOutput
(
true
)
;
testFocus
(
sw
hud
)
;
}
)
;
}
)
;
}
)
;
}
)
;
BrowserTestUtils
.
loadURI
(
gBrowser
"
data
:
text
/
html
;
charset
=
utf8
<
p
>
test
window
focus
for
Scratchpad
.
"
)
;
}
function
testFocus
(
sw
hud
)
{
const
sp
=
sw
.
Scratchpad
;
function
onMessage
(
messages
)
{
const
msg
=
[
.
.
.
messages
]
[
0
]
;
const
node
=
msg
.
node
;
var
loc
=
node
.
querySelector
(
"
.
frame
-
link
"
)
;
ok
(
loc
"
location
element
exists
"
)
;
is
(
loc
.
getAttribute
(
"
data
-
url
"
)
sw
.
Scratchpad
.
uniqueName
"
location
value
is
correct
"
)
;
is
(
loc
.
getAttribute
(
"
data
-
line
"
)
"
1
"
"
line
value
is
correct
"
)
;
is
(
loc
.
getAttribute
(
"
data
-
column
"
)
"
1
"
"
column
value
is
correct
"
)
;
sw
.
addEventListener
(
"
focus
"
function
(
)
{
const
win
=
Services
.
wm
.
getMostRecentWindow
(
"
devtools
:
scratchpad
"
)
;
ok
(
win
"
there
are
active
Scratchpad
windows
"
)
;
is
(
win
.
Scratchpad
.
uniqueName
sw
.
Scratchpad
.
uniqueName
"
correct
window
is
in
focus
"
)
;
sw
.
close
(
)
;
finish
(
)
;
}
{
capture
:
true
once
:
true
}
)
;
EventUtils
.
synthesizeMouse
(
loc
2
2
{
}
hud
.
iframeWindow
)
;
}
hud
.
ui
.
once
(
"
new
-
messages
"
onMessage
)
;
sp
.
setText
(
"
console
.
log
(
'
foo
'
)
;
"
)
;
sp
.
run
(
)
.
then
(
function
(
[
selection
error
result
]
)
{
is
(
selection
"
console
.
log
(
'
foo
'
)
;
"
"
selection
is
correct
"
)
;
is
(
error
undefined
"
error
is
correct
"
)
;
is
(
result
.
type
"
undefined
"
"
result
is
correct
"
)
;
}
)
;
}
