"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ScratchpadManager
"
]
;
const
SCRATCHPAD_WINDOW_URL
=
"
chrome
:
/
/
devtools
/
content
/
scratchpad
/
scratchpad
.
xul
"
;
const
SCRATCHPAD_WINDOW_FEATURES
=
"
chrome
titlebar
toolbar
centerscreen
resizable
dialog
=
no
"
;
const
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
Services
=
require
(
"
Services
"
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
this
.
ScratchpadManager
=
{
_nextUid
:
1
_scratchpads
:
[
]
_telemetry
:
new
Telemetry
(
)
getSessionState
:
function
SPM_getSessionState
(
)
{
return
this
.
_scratchpads
;
}
restoreSession
:
function
SPM_restoreSession
(
aSession
)
{
if
(
!
Array
.
isArray
(
aSession
)
)
{
return
[
]
;
}
let
wins
=
[
]
;
aSession
.
forEach
(
function
(
state
)
{
let
win
=
this
.
openScratchpad
(
state
)
;
wins
.
push
(
win
)
;
}
this
)
;
return
wins
;
}
saveOpenWindows
:
function
SPM_saveOpenWindows
(
)
{
this
.
_scratchpads
=
[
]
;
function
clone
(
src
)
{
let
dest
=
{
}
;
for
(
let
key
in
src
)
{
if
(
src
.
hasOwnProperty
(
key
)
)
{
dest
[
key
]
=
src
[
key
]
;
}
}
return
dest
;
}
let
enumerator
=
Services
.
wm
.
getEnumerator
(
"
devtools
:
scratchpad
"
)
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
let
win
=
enumerator
.
getNext
(
)
;
if
(
!
win
.
closed
&
&
win
.
Scratchpad
.
initialized
)
{
this
.
_scratchpads
.
push
(
clone
(
win
.
Scratchpad
.
getState
(
)
)
)
;
}
}
}
openScratchpad
:
function
SPM_openScratchpad
(
aState
)
{
let
params
=
Cc
[
"
mozilla
.
org
/
embedcomp
/
dialogparam
;
1
"
]
.
createInstance
(
Ci
.
nsIDialogParamBlock
)
;
params
.
SetNumberStrings
(
2
)
;
params
.
SetString
(
0
this
.
createUid
(
)
)
;
if
(
aState
)
{
if
(
typeof
aState
!
=
"
object
"
)
{
return
;
}
params
.
SetString
(
1
JSON
.
stringify
(
aState
)
)
;
}
let
win
=
Services
.
ww
.
openWindow
(
null
SCRATCHPAD_WINDOW_URL
"
_blank
"
SCRATCHPAD_WINDOW_FEATURES
params
)
;
this
.
_telemetry
.
toolOpened
(
"
scratchpad
-
window
"
)
;
let
onClose
=
(
)
=
>
{
this
.
_telemetry
.
toolClosed
(
"
scratchpad
-
window
"
)
;
}
;
win
.
addEventListener
(
"
unload
"
onClose
)
;
ShutdownObserver
.
init
(
)
;
return
win
;
}
createUid
:
function
SPM_createUid
(
)
{
return
JSON
.
stringify
(
this
.
_nextUid
+
+
)
;
}
}
;
var
ShutdownObserver
=
{
_initialized
:
false
init
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
Services
.
obs
.
addObserver
(
this
"
quit
-
application
-
granted
"
)
;
this
.
_initialized
=
true
;
}
observe
(
message
topic
)
{
if
(
topic
=
=
"
quit
-
application
-
granted
"
)
{
ScratchpadManager
.
saveOpenWindows
(
)
;
this
.
uninit
(
)
;
}
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
"
quit
-
application
-
granted
"
)
;
}
}
;
