"
use
strict
"
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
mediaRuleSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
media
-
rule
"
)
;
const
{
styleSheetSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
style
-
sheet
"
)
;
const
{
styleSheetsSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
style
-
sheets
"
)
;
const
promise
=
require
(
"
promise
"
)
;
loader
.
lazyRequireGetter
(
this
[
"
getIndentationFromPrefs
"
"
getIndentationFromString
"
]
"
devtools
/
shared
/
indentation
"
true
)
;
class
MediaRuleFront
extends
FrontClassWithSpec
(
mediaRuleSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_onMatchesChange
=
this
.
_onMatchesChange
.
bind
(
this
)
;
this
.
on
(
"
matches
-
change
"
this
.
_onMatchesChange
)
;
}
_onMatchesChange
(
matches
)
{
this
.
_form
.
matches
=
matches
;
}
form
(
form
)
{
this
.
actorID
=
form
.
actor
;
this
.
_form
=
form
;
}
get
mediaText
(
)
{
return
this
.
_form
.
mediaText
;
}
get
conditionText
(
)
{
return
this
.
_form
.
conditionText
;
}
get
matches
(
)
{
return
this
.
_form
.
matches
;
}
get
line
(
)
{
return
this
.
_form
.
line
|
|
-
1
;
}
get
column
(
)
{
return
this
.
_form
.
column
|
|
-
1
;
}
get
parentStyleSheet
(
)
{
return
this
.
conn
.
getFrontByID
(
this
.
_form
.
parentStyleSheet
)
;
}
}
exports
.
MediaRuleFront
=
MediaRuleFront
;
registerFront
(
MediaRuleFront
)
;
class
StyleSheetFront
extends
FrontClassWithSpec
(
styleSheetSpec
)
{
constructor
(
conn
targetFront
parentFront
)
{
super
(
conn
targetFront
parentFront
)
;
this
.
_onPropertyChange
=
this
.
_onPropertyChange
.
bind
(
this
)
;
this
.
on
(
"
property
-
change
"
this
.
_onPropertyChange
)
;
}
destroy
(
)
{
this
.
off
(
"
property
-
change
"
this
.
_onPropertyChange
)
;
super
.
destroy
(
)
;
}
_onPropertyChange
(
property
value
)
{
this
[
property
]
=
value
;
}
form
(
form
)
{
this
.
actorID
=
form
.
actor
;
this
.
href
=
form
.
href
;
this
.
nodeHref
=
form
.
nodeHref
;
this
.
disabled
=
form
.
disabled
;
this
.
title
=
form
.
title
;
this
.
system
=
form
.
system
;
this
.
styleSheetIndex
=
form
.
styleSheetIndex
;
this
.
ruleCount
=
form
.
ruleCount
;
this
.
sourceMapURL
=
form
.
sourceMapURL
;
this
.
_sourceMapBaseURL
=
form
.
sourceMapBaseURL
;
}
get
isSystem
(
)
{
return
this
.
system
;
}
get
sourceMapBaseURL
(
)
{
if
(
this
.
_sourceMapBaseURL
=
=
=
undefined
)
{
return
this
.
href
|
|
this
.
nodeHref
;
}
return
this
.
_sourceMapBaseURL
;
}
set
sourceMapBaseURL
(
sourceMapBaseURL
)
{
this
.
_sourceMapBaseURL
=
sourceMapBaseURL
;
}
guessIndentation
(
)
{
const
prefIndent
=
getIndentationFromPrefs
(
)
;
if
(
prefIndent
)
{
const
{
indentUnit
indentWithTabs
}
=
prefIndent
;
return
promise
.
resolve
(
indentWithTabs
?
"
\
t
"
:
"
"
.
repeat
(
indentUnit
)
)
;
}
return
async
function
(
)
{
const
longStr
=
await
this
.
getText
(
)
;
const
source
=
await
longStr
.
string
(
)
;
const
{
indentUnit
indentWithTabs
}
=
getIndentationFromString
(
source
)
;
return
indentWithTabs
?
"
\
t
"
:
"
"
.
repeat
(
indentUnit
)
;
}
.
bind
(
this
)
(
)
;
}
}
exports
.
StyleSheetFront
=
StyleSheetFront
;
registerFront
(
StyleSheetFront
)
;
class
StyleSheetsFront
extends
FrontClassWithSpec
(
styleSheetsSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
formAttributeName
=
"
styleSheetsActor
"
;
}
async
getTraits
(
)
{
if
(
this
.
_traits
)
{
return
this
.
_traits
;
}
try
{
const
{
traits
}
=
await
super
.
getTraits
(
)
;
this
.
_traits
=
traits
;
}
catch
(
e
)
{
this
.
_traits
=
{
}
;
}
return
this
.
_traits
;
}
}
exports
.
StyleSheetsFront
=
StyleSheetsFront
;
registerFront
(
StyleSheetsFront
)
;
