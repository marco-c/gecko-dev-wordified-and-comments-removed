"
use
strict
"
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
propertyIteratorSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
property
-
iterator
.
js
"
)
;
const
{
getAdHocFrontOrPrimitiveGrip
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
fronts
/
object
.
js
"
)
;
class
PropertyIteratorFront
extends
FrontClassWithSpec
(
propertyIteratorSpec
)
{
form
(
data
)
{
this
.
actorID
=
data
.
actor
;
this
.
count
=
data
.
count
;
}
async
slice
(
start
count
)
{
const
result
=
await
super
.
slice
(
{
start
count
}
)
;
return
this
.
_onResult
(
result
)
;
}
async
all
(
)
{
const
result
=
await
super
.
all
(
)
;
return
this
.
_onResult
(
result
)
;
}
_onResult
(
result
)
{
if
(
!
result
.
ownProperties
)
{
return
result
;
}
const
gripKeys
=
[
"
value
"
"
getterValue
"
"
get
"
"
set
"
]
;
Object
.
entries
(
result
.
ownProperties
)
.
forEach
(
(
[
key
descriptor
]
)
=
>
{
if
(
descriptor
)
{
for
(
const
gripKey
of
gripKeys
)
{
if
(
descriptor
.
hasOwnProperty
(
gripKey
)
)
{
result
.
ownProperties
[
key
]
[
gripKey
]
=
getAdHocFrontOrPrimitiveGrip
(
descriptor
[
gripKey
]
this
)
;
}
}
}
}
)
;
return
result
;
}
}
exports
.
PropertyIteratorFront
=
PropertyIteratorFront
;
registerFront
(
PropertyIteratorFront
)
;
