"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
getFront
"
"
devtools
/
shared
/
protocol
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getThreadOptions
"
"
devtools
/
client
/
shared
/
thread
-
utils
"
true
)
;
function
TargetMixin
(
parentClass
)
{
class
Target
extends
parentClass
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_forceChrome
=
false
;
this
.
destroy
=
this
.
destroy
.
bind
(
this
)
;
this
.
threadFront
=
null
;
this
.
shouldCloseClient
=
false
;
this
.
_client
=
client
;
this
.
fronts
=
new
Map
(
)
;
this
.
_resourceCache
=
[
]
;
this
.
_onResourceAvailable
=
this
.
_onResourceAvailable
.
bind
(
this
)
;
super
.
on
(
"
resource
-
available
-
form
"
this
.
_onResourceAvailable
)
;
this
.
_addListeners
(
)
;
}
on
(
eventName
listener
)
{
if
(
eventName
=
=
=
"
resource
-
available
-
form
"
&
&
this
.
_resourceCache
)
{
this
.
off
(
"
resource
-
available
-
form
"
this
.
_onResourceAvailable
)
;
for
(
const
cache
of
this
.
_resourceCache
)
{
listener
(
cache
)
;
}
this
.
_resourceCache
=
null
;
}
super
.
on
(
eventName
listener
)
;
}
get
isTargetFront
(
)
{
return
true
;
}
get
descriptorFront
(
)
{
if
(
this
.
isDestroyed
(
)
)
{
throw
new
Error
(
"
Descriptor
already
destroyed
for
target
:
"
+
this
)
;
}
if
(
this
.
isWorkerTarget
)
{
return
this
;
}
if
(
this
.
parentFront
.
typeName
.
endsWith
(
"
Descriptor
"
)
)
{
return
this
.
parentFront
;
}
throw
new
Error
(
"
Missing
descriptor
for
target
:
"
+
this
)
;
}
get
targetType
(
)
{
return
this
.
_targetType
;
}
get
isTopLevel
(
)
{
if
(
!
this
.
getTrait
(
"
supportsTopLevelTargetFlag
"
)
)
{
return
this
.
_isTopLevel
;
}
return
this
.
targetForm
.
isTopLevelTarget
;
}
setTargetType
(
type
)
{
this
.
_targetType
=
type
;
}
setIsTopLevel
(
isTopLevel
)
{
if
(
!
this
.
getTrait
(
"
supportsTopLevelTargetFlag
"
)
)
{
this
.
_isTopLevel
=
isTopLevel
;
}
}
getWatcherFront
(
)
{
if
(
this
.
parentFront
.
typeName
=
=
"
watcher
"
)
{
return
this
.
parentFront
;
}
if
(
this
.
parentFront
.
typeName
.
endsWith
(
"
Descriptor
"
)
&
&
this
.
parentFront
.
traits
&
&
this
.
parentFront
.
traits
.
watcher
)
{
return
this
.
parentFront
.
getWatcher
(
)
;
}
return
null
;
}
async
getParentTarget
(
)
{
const
watcherFront
=
await
this
.
getWatcherFront
(
)
;
if
(
watcherFront
)
{
if
(
watcherFront
.
traits
.
frame
)
{
return
watcherFront
.
getParentBrowsingContextTarget
(
this
.
browsingContextID
)
;
}
return
null
;
}
if
(
this
.
parentFront
.
getParentTarget
)
{
return
this
.
parentFront
.
getParentTarget
(
)
;
}
return
null
;
}
async
getBrowsingContextTarget
(
browsingContextID
)
{
const
watcherFront
=
await
this
.
getWatcherFront
(
)
;
if
(
watcherFront
)
{
if
(
watcherFront
.
traits
.
frame
)
{
return
watcherFront
.
getBrowsingContextTarget
(
browsingContextID
)
;
}
return
null
;
}
throw
new
Error
(
Unable
to
call
getBrowsingContextTarget
for
{
this
.
actorID
}
)
;
}
hasActor
(
actorName
)
{
if
(
this
.
targetForm
)
{
return
!
!
this
.
targetForm
[
actorName
+
"
Actor
"
]
;
}
return
false
;
}
getTrait
(
traitName
)
{
if
(
this
.
targetForm
.
traits
&
&
traitName
in
this
.
targetForm
.
traits
)
{
return
this
.
targetForm
.
traits
[
traitName
]
;
}
return
this
.
client
.
traits
[
traitName
]
;
}
get
isLocalTab
(
)
{
if
(
this
.
isWorkerTarget
)
{
return
false
;
}
return
!
!
this
.
descriptorFront
?
.
isLocalTab
;
}
get
localTab
(
)
{
if
(
this
.
isWorkerTarget
)
{
return
null
;
}
return
this
.
descriptorFront
?
.
localTab
|
|
null
;
}
get
root
(
)
{
return
this
.
client
.
mainRoot
.
rootForm
;
}
async
getFront
(
typeName
)
{
let
front
=
this
.
fronts
.
get
(
typeName
)
;
if
(
front
)
{
const
isFrontInitializing
=
typeof
front
.
then
=
=
=
"
function
"
;
const
isFrontAlive
=
!
isFrontInitializing
&
&
!
front
.
isDestroyed
(
)
;
if
(
isFrontInitializing
|
|
isFrontAlive
)
{
return
front
;
}
}
front
=
getFront
(
this
.
client
typeName
this
.
targetForm
this
)
;
this
.
fronts
.
set
(
typeName
front
)
;
front
=
await
front
;
this
.
fronts
.
set
(
typeName
front
)
;
return
front
;
}
getCachedFront
(
typeName
)
{
const
front
=
this
.
fronts
.
get
(
typeName
)
;
if
(
front
?
.
actorID
)
{
return
front
;
}
return
null
;
}
get
client
(
)
{
return
this
.
_client
;
}
get
chrome
(
)
{
return
(
this
.
isAddon
|
|
this
.
isContentProcess
|
|
this
.
isParentProcess
|
|
this
.
_forceChrome
)
;
}
forceChrome
(
)
{
this
.
_forceChrome
=
true
;
}
get
isBrowsingContext
(
)
{
return
this
.
typeName
=
=
=
"
browsingContextTarget
"
;
}
get
name
(
)
{
if
(
this
.
isAddon
|
|
this
.
isContentProcess
)
{
return
this
.
targetForm
.
name
;
}
return
this
.
title
;
}
get
title
(
)
{
return
this
.
_title
|
|
this
.
url
;
}
get
url
(
)
{
return
this
.
_url
;
}
get
isAddon
(
)
{
return
this
.
isLegacyAddon
|
|
this
.
isWebExtension
;
}
get
isWorkerTarget
(
)
{
return
(
this
.
typeName
=
=
=
"
workerTarget
"
|
|
this
.
typeName
=
=
=
"
workerDescriptor
"
)
;
}
get
isLegacyAddon
(
)
{
return
!
!
(
this
.
targetForm
&
&
this
.
targetForm
.
actor
&
&
this
.
targetForm
.
actor
.
match
(
/
conn
\
d
+
\
.
addon
(
Target
)
?
\
d
+
/
)
)
;
}
get
isWebExtension
(
)
{
return
!
!
(
this
.
targetForm
&
&
this
.
targetForm
.
actor
&
&
(
this
.
targetForm
.
actor
.
match
(
/
conn
\
d
+
\
.
webExtension
(
Target
)
?
\
d
+
/
)
|
|
this
.
targetForm
.
actor
.
match
(
/
child
\
d
+
\
/
webExtension
(
Target
)
?
\
d
+
/
)
)
)
;
}
get
isContentProcess
(
)
{
return
!
!
(
this
.
targetForm
&
&
this
.
targetForm
.
actor
&
&
this
.
targetForm
.
actor
.
match
(
/
conn
\
d
+
\
.
(
content
-
process
\
d
+
\
/
)
?
contentProcessTarget
\
d
+
/
)
)
;
}
get
isParentProcess
(
)
{
return
!
!
(
this
.
targetForm
&
&
this
.
targetForm
.
actor
&
&
this
.
targetForm
.
actor
.
match
(
/
conn
\
d
+
\
.
parentProcessTarget
\
d
+
/
)
)
;
}
get
isMultiProcess
(
)
{
return
!
this
.
window
;
}
getExtensionPathName
(
url
)
{
if
(
!
this
.
isWebExtension
)
{
throw
new
Error
(
"
Target
is
not
a
WebExtension
"
)
;
}
try
{
const
parsedURL
=
new
URL
(
url
)
;
if
(
parsedURL
.
protocol
!
=
=
"
moz
-
extension
:
"
)
{
return
url
;
}
return
parsedURL
.
pathname
;
}
catch
(
e
)
{
return
url
;
}
}
async
attachConsole
(
)
{
const
consoleFront
=
await
this
.
getFront
(
"
console
"
)
;
if
(
this
.
isDestroyedOrBeingDestroyed
(
)
)
{
return
;
}
await
consoleFront
.
startListeners
(
[
]
)
;
this
.
_onInspectObject
=
packet
=
>
this
.
emit
(
"
inspect
-
object
"
packet
)
;
this
.
removeOnInspectObjectListener
=
consoleFront
.
on
(
"
inspectObject
"
this
.
_onInspectObject
)
;
}
attachAndInitThread
(
targetList
)
{
if
(
this
.
_onThreadInitialized
)
{
return
this
.
_onThreadInitialized
;
}
this
.
_onThreadInitialized
=
this
.
_attachAndInitThread
(
targetList
)
;
return
this
.
_onThreadInitialized
;
}
async
_attachAndInitThread
(
targetList
)
{
if
(
this
.
isDestroyedOrBeingDestroyed
(
)
)
{
return
;
}
if
(
this
.
attach
)
{
await
this
.
attach
(
)
;
}
const
isBrowserToolbox
=
targetList
.
targetFront
.
isParentProcess
;
const
isNonTopLevelFrameTarget
=
!
this
.
isTopLevel
&
&
this
.
targetType
=
=
=
targetList
.
TYPES
.
FRAME
;
if
(
isBrowserToolbox
&
&
isNonTopLevelFrameTarget
)
{
return
;
}
if
(
targetList
.
descriptorFront
.
createdForBrowserConsole
)
{
return
;
}
const
options
=
await
getThreadOptions
(
)
;
if
(
this
.
isDestroyedOrBeingDestroyed
(
)
)
{
return
;
}
const
threadFront
=
await
this
.
attachThread
(
options
)
;
if
(
this
.
getTrait
(
"
noPauseOnThreadActorAttach
"
)
)
{
return
;
}
try
{
if
(
this
.
isDestroyedOrBeingDestroyed
(
)
|
|
threadFront
.
isDestroyed
(
)
)
{
return
;
}
await
threadFront
.
resume
(
)
;
}
catch
(
ex
)
{
if
(
ex
.
error
=
=
=
"
wrongOrder
"
)
{
targetList
.
emit
(
"
target
-
thread
-
wrong
-
order
-
on
-
resume
"
)
;
}
else
{
throw
ex
;
}
}
}
async
attachThread
(
options
=
{
}
)
{
if
(
!
this
.
targetForm
|
|
!
this
.
targetForm
.
threadActor
)
{
throw
new
Error
(
"
TargetMixin
sub
class
should
set
targetForm
.
threadActor
before
calling
"
+
"
attachThread
"
)
;
}
this
.
threadFront
=
await
this
.
getFront
(
"
thread
"
)
;
const
isAttached
=
this
.
getTrait
(
"
supportsThreadActorIsAttached
"
)
&
&
(
await
this
.
threadFront
.
isAttached
(
)
)
;
if
(
isAttached
)
{
await
this
.
threadFront
.
reconfigure
(
options
)
;
return
this
.
threadFront
;
}
if
(
this
.
isDestroyedOrBeingDestroyed
(
)
|
|
this
.
threadFront
.
isDestroyed
(
)
)
{
return
this
.
threadFront
;
}
await
this
.
threadFront
.
attach
(
options
)
;
return
this
.
threadFront
;
}
_addListeners
(
)
{
this
.
client
.
on
(
"
closed
"
this
.
destroy
)
;
this
.
on
(
"
tabDetached
"
this
.
destroy
)
;
}
_removeListeners
(
)
{
if
(
this
.
client
)
{
this
.
client
.
off
(
"
closed
"
this
.
destroy
)
;
}
this
.
off
(
"
tabDetached
"
this
.
destroy
)
;
if
(
this
.
removeOnInspectObjectListener
)
{
this
.
removeOnInspectObjectListener
(
)
;
this
.
removeOnInspectObjectListener
=
null
;
}
}
isDestroyedOrBeingDestroyed
(
)
{
return
this
.
isDestroyed
(
)
|
|
this
.
_destroyer
;
}
destroy
(
)
{
if
(
this
.
_destroyer
)
{
return
this
.
_destroyer
;
}
let
destroyerResolve
;
this
.
_destroyer
=
new
Promise
(
r
=
>
(
destroyerResolve
=
r
)
)
;
this
.
_destroyTarget
(
)
.
then
(
destroyerResolve
)
;
return
this
.
_destroyer
;
}
async
_destroyTarget
(
)
{
if
(
this
.
_onThreadInitialized
)
{
try
{
await
this
.
_onThreadInitialized
;
}
catch
(
e
)
{
}
}
for
(
let
[
name
front
]
of
this
.
fronts
)
{
try
{
if
(
front
instanceof
Promise
)
{
front
=
await
front
;
}
front
.
destroy
(
)
;
}
catch
(
e
)
{
console
.
warn
(
"
Error
while
destroying
front
:
"
name
e
)
;
}
}
this
.
_removeListeners
(
)
;
this
.
threadFront
=
null
;
if
(
this
.
shouldCloseClient
)
{
try
{
await
this
.
_client
.
close
(
)
;
}
catch
(
e
)
{
console
.
warn
(
"
Error
while
closing
client
:
"
e
)
;
}
}
else
if
(
this
.
detach
&
&
!
this
.
isDestroyed
(
)
)
{
try
{
await
this
.
detach
(
)
;
}
catch
(
e
)
{
this
.
logDetachError
(
e
)
;
}
}
this
.
emit
(
"
target
-
destroyed
"
)
;
super
.
destroy
(
)
;
this
.
_cleanup
(
)
;
}
logDetachError
(
e
targetType
)
{
const
ignoredError
=
e
?
.
message
.
includes
(
"
noSuchActor
"
)
|
|
e
?
.
message
.
includes
(
"
Connection
closed
"
)
;
if
(
ignoredError
)
{
return
;
}
const
message
=
targetType
?
Error
while
detaching
the
{
targetType
}
target
:
:
"
Error
while
detaching
target
:
"
;
console
.
warn
(
message
e
)
;
}
_cleanup
(
)
{
this
.
threadFront
=
null
;
this
.
_client
=
null
;
this
.
_attach
=
null
;
this
.
_title
=
null
;
this
.
_url
=
null
;
}
_onResourceAvailable
(
resources
)
{
if
(
this
.
_resourceCache
)
{
this
.
_resourceCache
.
push
(
resources
)
;
}
}
toString
(
)
{
const
id
=
this
.
targetForm
?
this
.
targetForm
.
actor
:
null
;
return
Target
:
{
id
}
;
}
dumpPools
(
)
{
return
this
.
threadFront
.
dumpPools
(
)
;
}
logErrorInPage
(
text
category
)
{
if
(
this
.
traits
.
logInPage
)
{
const
errorFlag
=
0
;
return
this
.
logInPage
(
{
text
category
flags
:
errorFlag
}
)
;
}
return
Promise
.
resolve
(
)
;
}
logWarningInPage
(
text
category
)
{
if
(
this
.
traits
.
logInPage
)
{
const
warningFlag
=
1
;
return
this
.
logInPage
(
{
text
category
flags
:
warningFlag
}
)
;
}
return
Promise
.
resolve
(
)
;
}
}
return
Target
;
}
exports
.
TargetMixin
=
TargetMixin
;
