"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
TargetFactory
"
"
devtools
/
client
/
framework
/
target
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
BrowsingContextTargetFront
"
"
devtools
/
client
/
fronts
/
targets
/
browsing
-
context
"
true
)
;
class
LocalTabTargetFront
extends
BrowsingContextTargetFront
{
constructor
(
client
targetFront
parentFront
tab
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_teardownTabListeners
=
this
.
_teardownTabListeners
.
bind
(
this
)
;
this
.
_handleTabEvent
=
this
.
_handleTabEvent
.
bind
(
this
)
;
this
.
isDevToolsExtensionContext
=
false
;
this
.
_tab
=
tab
;
this
.
_setupTabListeners
(
)
;
this
.
once
(
"
close
"
this
.
_teardownTabListeners
)
;
}
get
isLocalTab
(
)
{
return
true
;
}
get
localTab
(
)
{
return
this
.
_tab
;
}
toString
(
)
{
return
Target
:
{
this
.
localTab
}
;
}
_setupTabListeners
(
)
{
this
.
localTab
.
addEventListener
(
"
TabClose
"
this
.
_handleTabEvent
)
;
this
.
localTab
.
addEventListener
(
"
TabRemotenessChange
"
this
.
_handleTabEvent
)
;
}
_teardownTabListeners
(
)
{
this
.
localTab
.
removeEventListener
(
"
TabClose
"
this
.
_handleTabEvent
)
;
this
.
localTab
.
removeEventListener
(
"
TabRemotenessChange
"
this
.
_handleTabEvent
)
;
}
async
_handleTabEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
TabClose
"
:
const
toolbox
=
gDevTools
.
getToolbox
(
this
)
;
if
(
toolbox
)
{
await
toolbox
.
destroy
(
)
;
}
break
;
case
"
TabRemotenessChange
"
:
this
.
_onRemotenessChange
(
)
;
break
;
}
}
async
_onRemotenessChange
(
)
{
if
(
this
.
localTab
.
isResponsiveDesignMode
)
{
return
;
}
if
(
this
.
isDevToolsExtensionContext
)
{
return
;
}
const
toolbox
=
gDevTools
.
getToolbox
(
this
)
;
const
targetSwitchingEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
target
-
switching
.
enabled
"
false
)
;
const
client
=
this
.
client
;
if
(
targetSwitchingEnabled
)
{
this
.
shouldCloseClient
=
false
;
await
this
.
once
(
"
target
-
destroyed
"
)
;
}
else
{
await
toolbox
.
destroy
(
)
;
}
const
newTarget
=
await
TargetFactory
.
forTab
(
this
.
localTab
targetSwitchingEnabled
?
client
:
null
)
;
if
(
targetSwitchingEnabled
)
{
toolbox
.
targetList
.
switchToTarget
(
newTarget
)
;
}
else
{
gDevTools
.
showToolbox
(
newTarget
)
;
}
}
}
exports
.
LocalTabTargetFront
=
LocalTabTargetFront
;
