"
use
strict
"
;
const
{
windowGlobalTargetSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
targets
/
window
-
global
.
js
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
TargetMixin
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
fronts
/
targets
/
target
-
mixin
.
js
"
)
;
class
WindowGlobalTargetFront
extends
TargetMixin
(
FrontClassWithSpec
(
windowGlobalTargetSpec
)
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_javascriptEnabled
=
null
;
this
.
_parentNodeFront
=
null
;
this
.
_onTabNavigated
=
this
.
_onTabNavigated
.
bind
(
this
)
;
this
.
_onFrameUpdate
=
this
.
_onFrameUpdate
.
bind
(
this
)
;
this
.
on
(
"
tabNavigated
"
this
.
_onTabNavigated
)
;
this
.
on
(
"
frameUpdate
"
this
.
_onFrameUpdate
)
;
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
browsingContextID
=
json
.
browsingContextID
;
this
.
innerWindowId
=
json
.
innerWindowId
;
this
.
processID
=
json
.
processID
;
this
.
isFallbackExtensionDocument
=
json
.
isFallbackExtensionDocument
;
this
.
addonId
=
json
.
addonId
;
this
.
targetForm
=
json
;
this
.
outerWindowID
=
json
.
outerWindowID
;
this
.
favicon
=
json
.
favicon
;
this
.
setTitle
(
json
.
title
)
;
this
.
setUrl
(
json
.
url
)
;
}
_onFrameUpdate
(
packet
)
{
this
.
emit
(
"
frame
-
update
"
packet
)
;
}
_onTabNavigated
(
packet
)
{
const
event
=
Object
.
create
(
null
)
;
event
.
url
=
packet
.
url
;
event
.
title
=
packet
.
title
;
event
.
isFrameSwitching
=
packet
.
isFrameSwitching
;
if
(
!
packet
.
isFrameSwitching
)
{
this
.
setTitle
(
packet
.
title
)
;
this
.
setUrl
(
packet
.
url
)
;
}
if
(
packet
.
state
=
=
"
start
"
)
{
this
.
emit
(
"
will
-
navigate
"
event
)
;
}
else
{
this
.
emit
(
"
navigate
"
event
)
;
}
}
getParentNodeFront
(
)
{
return
this
.
_parentNodeFront
;
}
setParentNodeFront
(
nodeFront
)
{
this
.
_parentNodeFront
=
nodeFront
;
}
setUrl
(
url
)
{
this
.
_url
=
url
;
}
setTitle
(
title
)
{
this
.
_title
=
title
;
}
async
detach
(
)
{
if
(
this
.
_isDetaching
)
{
return
;
}
this
.
_isDetaching
=
true
;
this
.
off
(
"
tabNavigated
"
this
.
_onTabNavigated
)
;
this
.
off
(
"
frameUpdate
"
this
.
_onFrameUpdate
)
;
try
{
await
super
.
detach
(
)
;
}
catch
(
e
)
{
this
.
logDetachError
(
e
"
browsing
context
"
)
;
}
if
(
!
this
.
isDestroyedOrBeingDestroyed
(
)
)
{
this
.
destroy
(
)
;
}
}
destroy
(
)
{
const
promise
=
super
.
destroy
(
)
;
this
.
_parentNodeFront
=
null
;
this
.
off
(
"
tabNavigated
"
this
.
_onTabNavigated
)
;
this
.
off
(
"
frameUpdate
"
this
.
_onFrameUpdate
)
;
return
promise
;
}
}
exports
.
WindowGlobalTargetFront
=
WindowGlobalTargetFront
;
registerFront
(
exports
.
WindowGlobalTargetFront
)
;
