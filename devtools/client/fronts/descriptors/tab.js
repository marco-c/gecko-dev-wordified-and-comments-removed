"
use
strict
"
;
const
{
tabDescriptorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
descriptors
/
tab
"
)
;
loader
.
lazyRequireGetter
(
this
"
BrowsingContextTargetFront
"
"
devtools
/
client
/
fronts
/
targets
/
browsing
-
context
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
LocalTabTargetFront
"
"
devtools
/
client
/
fronts
/
targets
/
local
-
tab
"
true
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
class
TabDescriptorFront
extends
FrontClassWithSpec
(
tabDescriptorSpec
)
{
constructor
(
client
targetFront
parentFront
options
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_client
=
client
;
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
traits
=
json
.
traits
|
|
{
}
;
}
_createTabTarget
(
form
filter
)
{
let
front
;
if
(
filter
?
.
tab
?
.
tagName
=
=
"
tab
"
)
{
front
=
new
LocalTabTargetFront
(
this
.
_client
null
this
filter
.
tab
)
;
}
else
{
front
=
new
BrowsingContextTargetFront
(
this
.
_client
null
this
)
;
}
front
.
actorID
=
form
.
actor
;
front
.
form
(
form
)
;
this
.
manage
(
front
)
;
return
front
;
}
async
getTarget
(
filter
)
{
const
form
=
await
super
.
getTarget
(
)
;
let
front
=
this
.
actor
(
form
.
actor
)
;
if
(
front
)
{
front
.
form
(
form
)
;
return
front
;
}
front
=
this
.
_createTabTarget
(
form
filter
)
;
await
front
.
attach
(
)
;
return
front
;
}
}
exports
.
TabDescriptorFront
=
TabDescriptorFront
;
registerFront
(
TabDescriptorFront
)
;
