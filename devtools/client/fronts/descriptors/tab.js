"
use
strict
"
;
const
{
tabDescriptorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
descriptors
/
tab
"
)
;
loader
.
lazyRequireGetter
(
this
"
BrowsingContextTargetFront
"
"
devtools
/
client
/
fronts
/
targets
/
browsing
-
context
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
LocalTabTargetFront
"
"
devtools
/
client
/
fronts
/
targets
/
local
-
tab
"
true
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
class
TabDescriptorFront
extends
FrontClassWithSpec
(
tabDescriptorSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_client
=
client
;
this
.
_localTab
=
null
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
_form
=
json
;
this
.
traits
=
json
.
traits
|
|
{
}
;
}
setLocalTab
(
localTab
)
{
this
.
_localTab
=
localTab
;
}
get
isZombieTab
(
)
{
return
this
.
_form
.
isZombieTab
;
}
get
outerWindowID
(
)
{
return
this
.
_form
.
outerWindowID
;
}
get
selected
(
)
{
return
this
.
_form
.
selected
;
}
get
title
(
)
{
return
this
.
_form
.
title
;
}
get
url
(
)
{
return
this
.
_form
.
url
;
}
get
favicon
(
)
{
return
this
.
_form
.
favicon
;
}
_createTabTarget
(
form
)
{
let
front
;
if
(
this
.
_localTab
)
{
front
=
new
LocalTabTargetFront
(
this
.
_client
null
this
this
.
_localTab
)
;
}
else
{
front
=
new
BrowsingContextTargetFront
(
this
.
_client
null
this
)
;
}
front
.
actorID
=
form
.
actor
;
front
.
form
(
form
)
;
this
.
manage
(
front
)
;
front
.
on
(
"
target
-
destroyed
"
this
.
_onTargetDestroyed
)
;
return
front
;
}
_onTargetDestroyed
(
)
{
this
.
_targetFront
=
null
;
}
async
retrieveAsyncFormData
(
)
{
try
{
if
(
!
this
.
traits
.
hasTabInfo
)
{
const
targetForm
=
await
super
.
getTarget
(
)
;
this
.
_form
.
outerWindowID
=
targetForm
.
outerWindowID
;
this
.
_form
.
title
=
targetForm
.
title
;
this
.
_form
.
url
=
targetForm
.
url
;
if
(
!
this
.
traits
.
getFavicon
)
{
this
.
_form
.
favicon
=
targetForm
.
favicon
;
}
}
if
(
this
.
traits
.
getFavicon
)
{
this
.
_form
.
favicon
=
await
this
.
getFavicon
(
)
;
}
}
catch
(
e
)
{
if
(
!
this
.
isDestroyed
(
)
)
{
console
.
error
(
"
Failed
to
retrieve
the
async
form
data
for
"
+
this
.
url
e
)
;
}
}
}
async
getTarget
(
)
{
if
(
this
.
_targetFront
&
&
!
this
.
_targetFront
.
isDestroyed
(
)
)
{
return
this
.
_targetFront
;
}
if
(
this
.
_targetFrontPromise
)
{
return
this
.
_targetFrontPromise
;
}
this
.
_targetFrontPromise
=
(
async
(
)
=
>
{
let
targetFront
=
null
;
try
{
const
targetForm
=
await
super
.
getTarget
(
)
;
targetFront
=
this
.
_createTabTarget
(
targetForm
)
;
await
targetFront
.
attach
(
)
;
}
catch
(
e
)
{
console
.
log
(
Request
to
connect
to
TabDescriptor
"
{
this
.
id
}
"
failed
:
{
e
}
)
;
}
this
.
_targetFront
=
targetFront
;
this
.
_targetFrontPromise
=
null
;
return
targetFront
;
}
)
(
)
;
return
this
.
_targetFrontPromise
;
}
getCachedWatcher
(
)
{
for
(
const
child
of
this
.
poolChildren
(
)
)
{
if
(
child
.
typeName
=
=
"
watcher
"
)
{
return
child
;
}
}
return
null
;
}
}
exports
.
TabDescriptorFront
=
TabDescriptorFront
;
registerFront
(
TabDescriptorFront
)
;
