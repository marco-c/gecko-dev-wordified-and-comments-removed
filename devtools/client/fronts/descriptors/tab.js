"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
tabDescriptorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
descriptors
/
tab
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
WindowGlobalTargetFront
"
"
devtools
/
client
/
fronts
/
targets
/
window
-
global
"
true
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
DescriptorMixin
}
=
require
(
"
devtools
/
client
/
fronts
/
descriptors
/
descriptor
-
mixin
"
)
;
const
SERVER_TARGET_SWITCHING_ENABLED_PREF
=
"
devtools
.
target
-
switching
.
server
.
enabled
"
;
const
POPUP_DEBUG_PREF
=
"
devtools
.
popups
.
debug
"
;
class
TabDescriptorFront
extends
DescriptorMixin
(
FrontClassWithSpec
(
tabDescriptorSpec
)
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_localTab
=
null
;
this
.
_disableTargetSwitching
=
false
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
this
.
_handleTabEvent
=
this
.
_handleTabEvent
.
bind
(
this
)
;
if
(
this
.
isServerTargetSwitchingEnabled
(
)
)
{
this
.
_targetFrontPromise
=
new
Promise
(
r
=
>
(
this
.
_resolveTargetFrontPromise
=
r
)
)
;
}
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
_form
=
json
;
this
.
traits
=
json
.
traits
|
|
{
}
;
}
destroy
(
{
isServerDestroyEvent
=
false
}
=
{
}
)
{
if
(
this
.
isDestroyed
(
)
)
{
return
;
}
if
(
!
isServerDestroyEvent
)
{
this
.
emit
(
"
descriptor
-
destroyed
"
)
;
}
if
(
this
.
isLocalTab
)
{
this
.
_teardownLocalTabListeners
(
)
;
}
super
.
destroy
(
)
;
}
getWatcher
(
)
{
const
isPopupDebuggingEnabled
=
Services
.
prefs
.
getBoolPref
(
POPUP_DEBUG_PREF
false
)
;
return
super
.
getWatcher
(
{
isServerTargetSwitchingEnabled
:
this
.
isServerTargetSwitchingEnabled
(
)
isPopupDebuggingEnabled
}
)
;
}
setLocalTab
(
localTab
)
{
this
.
_localTab
=
localTab
;
this
.
_setupLocalTabListeners
(
)
;
this
.
shouldCloseClient
=
true
;
}
get
isTabDescriptor
(
)
{
return
true
;
}
get
isLocalTab
(
)
{
return
!
!
this
.
_localTab
;
}
get
localTab
(
)
{
return
this
.
_localTab
;
}
_setupLocalTabListeners
(
)
{
this
.
localTab
.
addEventListener
(
"
TabClose
"
this
.
_handleTabEvent
)
;
this
.
localTab
.
addEventListener
(
"
TabRemotenessChange
"
this
.
_handleTabEvent
)
;
}
_teardownLocalTabListeners
(
)
{
this
.
localTab
.
removeEventListener
(
"
TabClose
"
this
.
_handleTabEvent
)
;
this
.
localTab
.
removeEventListener
(
"
TabRemotenessChange
"
this
.
_handleTabEvent
)
;
}
isServerTargetSwitchingEnabled
(
)
{
const
isEnabled
=
Services
.
prefs
.
getBoolPref
(
SERVER_TARGET_SWITCHING_ENABLED_PREF
false
)
;
const
enabled
=
isEnabled
&
&
!
this
.
_disableTargetSwitching
;
return
enabled
;
}
setIsForWebExtension
(
)
{
this
.
disableTargetSwitching
(
)
;
}
disableTargetSwitching
(
)
{
this
.
_disableTargetSwitching
=
true
;
delete
this
.
_targetFrontPromise
;
delete
this
.
_resolveTargetFrontPromise
;
}
get
isZombieTab
(
)
{
return
this
.
_form
.
isZombieTab
;
}
get
browserId
(
)
{
return
this
.
_form
.
browserId
;
}
get
outerWindowID
(
)
{
return
this
.
_form
.
outerWindowID
;
}
get
selected
(
)
{
return
this
.
_form
.
selected
;
}
get
title
(
)
{
return
this
.
_form
.
title
;
}
get
url
(
)
{
return
this
.
_form
.
url
;
}
get
favicon
(
)
{
return
this
.
_form
.
favicon
;
}
_createTabTarget
(
form
)
{
const
front
=
new
WindowGlobalTargetFront
(
this
.
_client
null
this
)
;
front
.
actorID
=
form
.
actor
;
front
.
form
(
form
)
;
this
.
manage
(
front
)
;
return
front
;
}
_onTargetDestroyed
(
)
{
this
.
_targetFront
=
null
;
}
async
retrieveFavicon
(
)
{
try
{
this
.
_form
.
favicon
=
await
this
.
getFavicon
(
)
;
}
catch
(
e
)
{
if
(
!
this
.
isDestroyed
(
)
)
{
console
.
error
(
"
Failed
to
retrieve
the
favicon
for
"
+
this
.
url
e
)
;
}
}
}
setTarget
(
targetFront
)
{
if
(
this
.
_targetFront
)
{
this
.
_targetFront
.
off
(
"
target
-
destroyed
"
this
.
_onTargetDestroyed
)
;
}
this
.
_targetFront
=
targetFront
;
targetFront
.
setDescriptor
(
this
)
;
targetFront
.
on
(
"
target
-
destroyed
"
this
.
_onTargetDestroyed
)
;
if
(
this
.
isServerTargetSwitchingEnabled
(
)
)
{
this
.
_resolveTargetFrontPromise
(
targetFront
)
;
this
.
_targetFrontPromise
=
new
Promise
(
r
=
>
(
this
.
_resolveTargetFrontPromise
=
r
)
)
;
}
}
getCachedTarget
(
)
{
return
this
.
_targetFront
;
}
async
getTarget
(
)
{
if
(
this
.
_targetFront
&
&
!
this
.
_targetFront
.
isDestroyed
(
)
)
{
return
this
.
_targetFront
;
}
if
(
this
.
_targetFrontPromise
)
{
return
this
.
_targetFrontPromise
;
}
this
.
_targetFrontPromise
=
(
async
(
)
=
>
{
let
newTargetFront
=
null
;
try
{
const
targetForm
=
await
super
.
getTarget
(
)
;
newTargetFront
=
this
.
_createTabTarget
(
targetForm
)
;
this
.
setTarget
(
newTargetFront
)
;
}
catch
(
e
)
{
console
.
log
(
Request
to
connect
to
TabDescriptor
"
{
this
.
id
}
"
failed
:
{
e
}
)
;
}
this
.
_targetFrontPromise
=
null
;
return
newTargetFront
;
}
)
(
)
;
return
this
.
_targetFrontPromise
;
}
async
_handleTabEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
TabClose
"
:
const
toolbox
=
gDevTools
.
getToolboxForDescriptor
(
this
)
;
if
(
toolbox
)
{
await
toolbox
.
destroy
(
)
;
}
break
;
case
"
TabRemotenessChange
"
:
this
.
_onRemotenessChange
(
)
;
break
;
}
}
async
_onRemotenessChange
(
)
{
this
.
emit
(
"
remoteness
-
change
"
this
.
_targetFront
)
;
}
}
exports
.
TabDescriptorFront
=
TabDescriptorFront
;
registerFront
(
TabDescriptorFront
)
;
