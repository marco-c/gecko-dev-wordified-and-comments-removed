"
use
strict
"
;
const
{
webExtensionDescriptorSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
descriptors
/
webextension
.
js
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
DescriptorMixin
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
fronts
/
descriptors
/
descriptor
-
mixin
.
js
"
)
;
const
DESCRIPTOR_TYPES
=
require
(
"
resource
:
/
/
devtools
/
client
/
fronts
/
descriptors
/
descriptor
-
types
.
js
"
)
;
class
WebExtensionDescriptorFront
extends
DescriptorMixin
(
FrontClassWithSpec
(
webExtensionDescriptorSpec
)
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
traits
=
{
}
;
}
descriptorType
=
DESCRIPTOR_TYPES
.
EXTENSION
;
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
_form
=
json
;
this
.
traits
=
json
.
traits
|
|
{
}
;
}
setTarget
(
targetFront
)
{
this
.
_targetFront
=
targetFront
;
}
get
backgroundScriptStatus
(
)
{
return
this
.
_form
.
backgroundScriptStatus
;
}
get
debuggable
(
)
{
return
this
.
_form
.
debuggable
;
}
get
hidden
(
)
{
return
this
.
_form
.
hidden
;
}
get
iconDataURL
(
)
{
return
this
.
_form
.
iconDataURL
;
}
get
iconURL
(
)
{
return
this
.
_form
.
iconURL
;
}
get
id
(
)
{
return
this
.
_form
.
id
;
}
get
isSystem
(
)
{
return
this
.
_form
.
isSystem
;
}
get
isWebExtensionDescriptor
(
)
{
return
true
;
}
get
isWebExtension
(
)
{
return
this
.
_form
.
isWebExtension
;
}
get
manifestURL
(
)
{
return
this
.
_form
.
manifestURL
;
}
get
name
(
)
{
return
this
.
_form
.
name
;
}
get
persistentBackgroundScript
(
)
{
return
this
.
_form
.
persistentBackgroundScript
;
}
get
temporarilyInstalled
(
)
{
return
this
.
_form
.
temporarilyInstalled
;
}
get
url
(
)
{
return
this
.
_form
.
url
;
}
get
warnings
(
)
{
return
this
.
_form
.
warnings
;
}
isServerTargetSwitchingEnabled
(
)
{
return
true
;
}
getWatcher
(
)
{
return
super
.
getWatcher
(
{
isServerTargetSwitchingEnabled
:
this
.
isServerTargetSwitchingEnabled
(
)
}
)
;
}
async
getTarget
(
)
{
if
(
!
this
.
isWebExtension
)
{
throw
new
Error
(
"
Tried
to
create
a
target
for
an
addon
which
is
not
a
webextension
:
"
+
this
.
actorID
)
;
}
if
(
this
.
_targetFront
&
&
!
this
.
_targetFront
.
isDestroyed
(
)
)
{
return
this
.
_targetFront
;
}
throw
new
Error
(
"
Missing
webextension
target
actor
front
.
TargetCommand
did
not
notify
it
(
yet
?
)
to
the
descriptor
"
)
;
}
}
exports
.
WebExtensionDescriptorFront
=
WebExtensionDescriptorFront
;
registerFront
(
WebExtensionDescriptorFront
)
;
