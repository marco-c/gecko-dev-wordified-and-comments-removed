"
use
strict
"
;
const
{
frameDescriptorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
descriptors
/
frame
"
)
;
loader
.
lazyRequireGetter
(
this
"
BrowsingContextTargetFront
"
"
devtools
/
client
/
fronts
/
targets
/
browsing
-
context
"
true
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
class
FrameDescriptorFront
extends
FrontClassWithSpec
(
frameDescriptorSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_frameDescriptorFront
=
null
;
this
.
_targetFrontPromise
=
null
;
this
.
_client
=
client
;
}
form
(
json
)
{
this
.
id
=
json
.
id
;
this
.
url
=
json
.
url
;
this
.
parentID
=
json
.
parentID
;
}
async
_createFrameTarget
(
form
)
{
let
front
=
null
;
front
=
new
BrowsingContextTargetFront
(
this
.
_client
null
this
)
;
front
.
actorID
=
form
.
actor
;
front
.
form
(
form
)
;
this
.
manage
(
front
)
;
return
front
;
}
async
getTarget
(
)
{
if
(
this
.
_frameTargetFront
&
&
this
.
_frameTargetFront
.
actorID
)
{
return
this
.
_frameTargetFront
;
}
if
(
this
.
_targetFrontPromise
)
{
return
this
.
_targetFrontPromise
;
}
this
.
_targetFrontPromise
=
(
async
(
)
=
>
{
let
target
=
null
;
try
{
const
targetForm
=
await
super
.
getTarget
(
)
;
if
(
targetForm
.
error
)
{
throw
new
Error
(
targetForm
.
error
)
;
}
target
=
await
this
.
_createFrameTarget
(
targetForm
)
;
await
target
.
attach
(
)
;
}
catch
(
e
)
{
console
.
log
(
Request
to
connect
to
frameDescriptor
"
{
this
.
id
}
"
failed
:
{
e
}
)
;
}
this
.
_frameTargetFront
=
target
;
this
.
_targetFrontPromise
=
null
;
return
target
;
}
)
(
)
;
return
this
.
_targetFrontPromise
;
}
async
getParentTarget
(
)
{
if
(
!
this
.
parentID
)
{
return
null
;
}
const
parentDescriptor
=
await
this
.
_client
.
mainRoot
.
getBrowsingContextDescriptor
(
this
.
parentID
)
;
return
parentDescriptor
.
getTarget
(
)
;
}
getCachedWatcher
(
)
{
for
(
const
child
of
this
.
poolChildren
(
)
)
{
if
(
child
.
typeName
=
=
"
watcher
"
)
{
return
child
;
}
}
return
null
;
}
destroy
(
)
{
this
.
_frameTargetFront
=
null
;
this
.
_targetFrontPromise
=
null
;
super
.
destroy
(
)
;
}
}
exports
.
FrameDescriptorFront
=
FrameDescriptorFront
;
registerFront
(
FrameDescriptorFront
)
;
