"
use
strict
"
;
const
{
processDescriptorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
descriptors
/
process
"
)
;
const
{
WindowGlobalTargetFront
}
=
require
(
"
devtools
/
client
/
fronts
/
targets
/
window
-
global
"
)
;
const
{
ContentProcessTargetFront
}
=
require
(
"
devtools
/
client
/
fronts
/
targets
/
content
-
process
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
DescriptorMixin
}
=
require
(
"
devtools
/
client
/
fronts
/
descriptors
/
descriptor
-
mixin
"
)
;
class
ProcessDescriptorFront
extends
DescriptorMixin
(
FrontClassWithSpec
(
processDescriptorSpec
)
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_isParent
=
false
;
this
.
_processTargetFront
=
null
;
this
.
_targetFrontPromise
=
null
;
}
form
(
json
)
{
this
.
id
=
json
.
id
;
this
.
_isParent
=
json
.
isParent
;
this
.
_isWindowlessParent
=
json
.
isWindowlessParent
;
this
.
traits
=
json
.
traits
|
|
{
}
;
}
async
_createProcessTargetFront
(
form
)
{
let
front
=
null
;
if
(
form
.
actor
.
includes
(
"
parentProcessTarget
"
)
)
{
front
=
new
WindowGlobalTargetFront
(
this
.
_client
null
this
)
;
}
else
{
front
=
new
ContentProcessTargetFront
(
this
.
_client
null
this
)
;
}
front
.
actorID
=
form
.
actor
;
front
.
form
(
form
)
;
if
(
!
front
.
processID
)
{
front
.
processID
=
this
.
id
;
}
this
.
manage
(
front
)
;
return
front
;
}
get
isBrowserProcessDescriptor
(
)
{
return
this
.
_isParent
&
&
!
this
.
_isWindowlessParent
;
}
get
isParentProcessDescriptor
(
)
{
return
this
.
_isParent
;
}
get
isProcessDescriptor
(
)
{
return
true
;
}
getCachedTarget
(
)
{
return
this
.
_processTargetFront
;
}
async
getTarget
(
)
{
if
(
this
.
_processTargetFront
&
&
!
this
.
_processTargetFront
.
isDestroyed
(
)
)
{
return
this
.
_processTargetFront
;
}
if
(
this
.
_targetFrontPromise
)
{
return
this
.
_targetFrontPromise
;
}
this
.
_targetFrontPromise
=
(
async
(
)
=
>
{
let
targetFront
=
null
;
try
{
const
targetForm
=
await
super
.
getTarget
(
)
;
targetFront
=
await
this
.
_createProcessTargetFront
(
targetForm
)
;
await
targetFront
.
attach
(
)
;
}
catch
(
e
)
{
console
.
log
(
Request
to
connect
to
ProcessDescriptor
"
{
this
.
id
}
"
failed
:
{
e
}
)
;
}
this
.
_processTargetFront
=
targetFront
;
this
.
_targetFrontPromise
=
null
;
return
targetFront
;
}
)
(
)
;
return
this
.
_targetFrontPromise
;
}
destroy
(
)
{
if
(
this
.
_processTargetFront
)
{
this
.
_processTargetFront
.
destroy
(
)
;
this
.
_processTargetFront
=
null
;
}
this
.
_targetFrontPromise
=
null
;
super
.
destroy
(
)
;
}
}
exports
.
ProcessDescriptorFront
=
ProcessDescriptorFront
;
registerFront
(
ProcessDescriptorFront
)
;
