"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
{
workerDescriptorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
descriptors
/
worker
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
TargetMixin
}
=
require
(
"
devtools
/
client
/
fronts
/
targets
/
target
-
mixin
"
)
;
const
{
DescriptorMixin
}
=
require
(
"
devtools
/
client
/
fronts
/
descriptors
/
descriptor
-
mixin
"
)
;
const
DESCRIPTOR_TYPES
=
require
(
"
devtools
/
client
/
fronts
/
descriptors
/
descriptor
-
types
"
)
;
class
WorkerDescriptorFront
extends
DescriptorMixin
(
TargetMixin
(
FrontClassWithSpec
(
workerDescriptorSpec
)
)
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
traits
=
{
}
;
}
descriptorType
=
DESCRIPTOR_TYPES
.
WORKER
;
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
id
=
json
.
id
;
this
.
targetForm
=
json
;
this
.
_url
=
json
.
url
;
this
.
type
=
json
.
type
;
this
.
scope
=
json
.
scope
;
this
.
fetch
=
json
.
fetch
;
this
.
traits
=
json
.
traits
;
}
get
name
(
)
{
if
(
!
this
.
url
)
{
return
null
;
}
return
this
.
url
.
split
(
"
/
"
)
.
pop
(
)
;
}
get
isWorkerDescriptor
(
)
{
return
true
;
}
get
isDedicatedWorker
(
)
{
return
this
.
type
=
=
=
Ci
.
nsIWorkerDebugger
.
TYPE_DEDICATED
;
}
get
isSharedWorker
(
)
{
return
this
.
type
=
=
=
Ci
.
nsIWorkerDebugger
.
TYPE_SHARED
;
}
get
isServiceWorker
(
)
{
return
this
.
type
=
=
=
Ci
.
nsIWorkerDebugger
.
TYPE_SERVICE
;
}
async
morphWorkerDescriptorIntoWorkerTarget
(
)
{
return
this
.
getTarget
(
)
;
}
async
getTarget
(
)
{
if
(
this
.
_attach
)
{
return
this
.
_attach
;
}
this
.
_attach
=
(
async
(
)
=
>
{
if
(
this
.
isDestroyedOrBeingDestroyed
(
)
)
{
return
this
;
}
if
(
this
.
isServiceWorker
)
{
this
.
registration
=
await
this
.
_getRegistrationIfActive
(
)
;
if
(
this
.
registration
)
{
await
this
.
registration
.
preventShutdown
(
)
;
}
}
if
(
this
.
isDestroyedOrBeingDestroyed
(
)
)
{
return
this
;
}
const
workerTargetForm
=
await
super
.
getTarget
(
)
;
this
.
targetForm
.
consoleActor
=
workerTargetForm
.
consoleActor
;
this
.
targetForm
.
threadActor
=
workerTargetForm
.
threadActor
;
if
(
this
.
isDestroyedOrBeingDestroyed
(
)
)
{
return
this
;
}
return
this
;
}
)
(
)
;
return
this
.
_attach
;
}
async
detach
(
)
{
try
{
await
super
.
detach
(
)
;
if
(
this
.
registration
)
{
await
this
.
registration
.
allowShutdown
(
)
;
this
.
registration
=
null
;
}
}
catch
(
e
)
{
this
.
logDetachError
(
e
"
worker
"
)
;
}
}
async
_getRegistrationIfActive
(
)
{
const
{
registrations
}
=
await
this
.
client
.
mainRoot
.
listServiceWorkerRegistrations
(
)
;
return
registrations
.
find
(
(
{
activeWorker
}
)
=
>
{
return
activeWorker
&
&
this
.
id
=
=
=
activeWorker
.
id
;
}
)
;
}
reconfigure
(
)
{
return
Promise
.
resolve
(
)
;
}
}
exports
.
WorkerDescriptorFront
=
WorkerDescriptorFront
;
registerFront
(
exports
.
WorkerDescriptorFront
)
;
