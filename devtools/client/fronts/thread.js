"
use
strict
"
;
const
{
ThreadStateTypes
}
=
require
(
"
devtools
/
client
/
constants
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
threadSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
thread
"
)
;
loader
.
lazyRequireGetter
(
this
"
ObjectFront
"
"
devtools
/
client
/
fronts
/
object
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
FrameFront
"
"
devtools
/
client
/
fronts
/
frame
"
)
;
loader
.
lazyRequireGetter
(
this
"
SourceFront
"
"
devtools
/
client
/
fronts
/
source
"
true
)
;
class
ThreadFront
extends
FrontClassWithSpec
(
threadSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
client
=
client
;
this
.
_pauseGrips
=
{
}
;
this
.
_threadGrips
=
{
}
;
this
.
_state
=
"
paused
"
;
this
.
_beforePaused
=
this
.
_beforePaused
.
bind
(
this
)
;
this
.
_beforeResumed
=
this
.
_beforeResumed
.
bind
(
this
)
;
this
.
before
(
"
paused
"
this
.
_beforePaused
)
;
this
.
before
(
"
resumed
"
this
.
_beforeResumed
)
;
this
.
targetFront
.
on
(
"
will
-
navigate
"
this
.
_onWillNavigate
.
bind
(
this
)
)
;
this
.
formAttributeName
=
"
threadActor
"
;
}
get
state
(
)
{
return
this
.
_state
;
}
get
paused
(
)
{
return
this
.
_state
=
=
=
"
paused
"
;
}
get
actor
(
)
{
return
this
.
actorID
;
}
getWebconsoleFront
(
)
{
return
this
.
targetFront
.
getFront
(
"
console
"
)
;
}
_assertPaused
(
command
)
{
if
(
!
this
.
paused
)
{
throw
Error
(
command
+
"
command
sent
while
not
paused
.
Currently
"
+
this
.
_state
)
;
}
}
getFrames
(
start
count
)
{
return
super
.
frames
(
start
count
)
;
}
async
_doResume
(
resumeLimit
frameActorID
)
{
this
.
_assertPaused
(
"
resume
"
)
;
this
.
_previousState
=
this
.
_state
;
this
.
_state
=
"
resuming
"
;
try
{
await
super
.
resume
(
resumeLimit
frameActorID
)
;
}
catch
(
e
)
{
if
(
this
.
_state
=
=
"
resuming
"
)
{
if
(
e
.
state
)
{
this
.
_state
=
ThreadStateTypes
[
e
.
state
]
;
}
else
{
this
.
_state
=
this
.
_previousState
;
}
}
}
delete
this
.
_previousState
;
}
resume
(
)
{
return
this
.
_doResume
(
null
)
;
}
resumeThenPause
(
)
{
return
this
.
_doResume
(
{
type
:
"
break
"
}
)
;
}
stepOver
(
frameActorID
)
{
return
this
.
_doResume
(
{
type
:
"
next
"
}
frameActorID
)
;
}
stepIn
(
frameActorID
)
{
return
this
.
_doResume
(
{
type
:
"
step
"
}
frameActorID
)
;
}
stepOut
(
frameActorID
)
{
return
this
.
_doResume
(
{
type
:
"
finish
"
}
frameActorID
)
;
}
restart
(
frameActorID
)
{
return
this
.
_doResume
(
{
type
:
"
restart
"
}
frameActorID
)
;
}
interrupt
(
)
{
return
this
.
_doInterrupt
(
null
)
;
}
breakOnNext
(
)
{
return
this
.
_doInterrupt
(
"
onNext
"
)
;
}
_doInterrupt
(
when
)
{
return
super
.
interrupt
(
when
)
;
}
async
getSources
(
)
{
let
sources
=
[
]
;
try
{
sources
=
await
super
.
sources
(
)
;
}
catch
(
e
)
{
console
.
log
(
getSources
failed
.
Connection
may
have
closed
:
{
e
}
)
;
}
return
{
sources
}
;
}
async
attach
(
options
)
{
const
onPaused
=
this
.
once
(
"
paused
"
)
;
await
super
.
attach
(
options
)
;
await
onPaused
;
}
pauseGrip
(
grip
)
{
if
(
grip
.
actor
in
this
.
_pauseGrips
)
{
return
this
.
_pauseGrips
[
grip
.
actor
]
;
}
const
objectFront
=
new
ObjectFront
(
this
.
conn
this
.
targetFront
this
grip
)
;
this
.
_pauseGrips
[
grip
.
actor
]
=
objectFront
;
return
objectFront
;
}
_clearObjectFronts
(
gripCacheName
)
{
for
(
const
id
in
this
[
gripCacheName
]
)
{
this
[
gripCacheName
]
[
id
]
.
valid
=
false
;
}
this
[
gripCacheName
]
=
{
}
;
}
_clearPauseGrips
(
)
{
this
.
_clearObjectFronts
(
"
_pauseGrips
"
)
;
}
_beforePaused
(
packet
)
{
this
.
_state
=
"
paused
"
;
this
.
_onThreadState
(
packet
)
;
}
_beforeResumed
(
)
{
this
.
_state
=
"
attached
"
;
this
.
_onThreadState
(
null
)
;
this
.
unmanageChildren
(
FrameFront
)
;
}
_onWillNavigate
(
)
{
this
.
unmanageChildren
(
SourceFront
)
;
}
_onThreadState
(
packet
)
{
this
.
_lastPausePacket
=
packet
;
this
.
_clearPauseGrips
(
)
;
}
getLastPausePacket
(
)
{
return
this
.
_lastPausePacket
;
}
source
(
form
)
{
if
(
form
.
actor
in
this
.
_threadGrips
)
{
return
this
.
_threadGrips
[
form
.
actor
]
;
}
const
sourceFront
=
new
SourceFront
(
this
.
client
form
)
;
this
.
manage
(
sourceFront
)
;
this
.
_threadGrips
[
form
.
actor
]
=
sourceFront
;
return
sourceFront
;
}
}
exports
.
ThreadFront
=
ThreadFront
;
registerFront
(
ThreadFront
)
;
