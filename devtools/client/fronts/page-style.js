"
use
strict
"
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
pageStyleSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
page
-
style
"
)
;
class
PageStyleFront
extends
FrontClassWithSpec
(
pageStyleSpec
)
{
_attributesCache
=
new
Map
(
)
;
constructor
(
conn
targetFront
parentFront
)
{
super
(
conn
targetFront
parentFront
)
;
this
.
inspector
=
this
.
getParent
(
)
;
this
.
_clearAttributesCache
=
this
.
_clearAttributesCache
.
bind
(
this
)
;
this
.
on
(
"
stylesheet
-
updated
"
this
.
_clearAttributesCache
)
;
this
.
walker
.
on
(
"
new
-
mutations
"
this
.
_clearAttributesCache
)
;
}
form
(
form
)
{
this
.
_form
=
form
;
}
get
walker
(
)
{
return
this
.
inspector
.
walker
;
}
get
supportsFontStretchLevel4
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
fontStretchLevel4
;
}
get
supportsFontStyleLevel4
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
fontStyleLevel4
;
}
get
supportsFontVariations
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
fontVariations
;
}
get
supportsFontWeightLevel4
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
fontWeightLevel4
;
}
getMatchedSelectors
(
node
property
options
)
{
return
super
.
getMatchedSelectors
(
node
property
options
)
.
then
(
ret
=
>
{
return
ret
.
matched
;
}
)
;
}
async
getApplied
(
node
options
=
{
}
)
{
const
ret
=
await
super
.
getApplied
(
node
options
)
;
return
ret
.
entries
;
}
addNewRule
(
node
pseudoClasses
)
{
return
super
.
addNewRule
(
node
pseudoClasses
)
.
then
(
ret
=
>
{
return
ret
.
entries
[
0
]
;
}
)
;
}
async
getAttributesInOwnerDocument
(
search
attributeType
node
)
{
if
(
!
attributeType
)
{
throw
new
Error
(
"
type
should
not
be
empty
"
)
;
}
if
(
!
this
.
_form
.
traits
.
getAttributesInOwnerDocument
|
|
!
search
)
{
return
[
]
;
}
const
lcFilter
=
search
.
toLowerCase
(
)
;
if
(
this
.
_attributesCache
&
&
this
.
_attributesCache
.
has
(
attributeType
)
&
&
search
.
startsWith
(
this
.
_attributesCache
.
get
(
attributeType
)
.
search
)
)
{
const
cachedResults
=
this
.
_attributesCache
.
get
(
attributeType
)
.
results
.
filter
(
item
=
>
item
.
toLowerCase
(
)
.
startsWith
(
lcFilter
)
)
;
this
.
emitForTests
(
"
getAttributesInOwnerDocument
-
cache
-
hit
"
cachedResults
)
;
return
cachedResults
;
}
const
results
=
await
super
.
getAttributesInOwnerDocument
(
search
attributeType
node
)
;
this
.
_attributesCache
.
set
(
attributeType
{
search
results
}
)
;
return
results
;
}
_clearAttributesCache
(
)
{
this
.
_attributesCache
.
clear
(
)
;
}
}
exports
.
PageStyleFront
=
PageStyleFront
;
registerFront
(
PageStyleFront
)
;
