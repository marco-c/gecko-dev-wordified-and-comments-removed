"
use
strict
"
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
pageStyleSpec
styleRuleSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
styles
"
)
;
const
promise
=
require
(
"
promise
"
)
;
loader
.
lazyRequireGetter
(
this
"
RuleRewriter
"
"
devtools
/
client
/
fronts
/
inspector
/
rule
-
rewriter
"
)
;
class
PageStyleFront
extends
FrontClassWithSpec
(
pageStyleSpec
)
{
_attributesCache
=
new
Map
(
)
;
constructor
(
conn
targetFront
parentFront
)
{
super
(
conn
targetFront
parentFront
)
;
this
.
inspector
=
this
.
getParent
(
)
;
this
.
_clearAttributesCache
=
this
.
_clearAttributesCache
.
bind
(
this
)
;
this
.
on
(
"
stylesheet
-
updated
"
this
.
_clearAttributesCache
)
;
this
.
walker
.
on
(
"
new
-
mutations
"
this
.
_clearAttributesCache
)
;
}
form
(
form
)
{
this
.
_form
=
form
;
}
get
walker
(
)
{
return
this
.
inspector
.
walker
;
}
get
supportsFontStretchLevel4
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
fontStretchLevel4
;
}
get
supportsFontStyleLevel4
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
fontStyleLevel4
;
}
get
supportsFontVariations
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
fontVariations
;
}
get
supportsFontWeightLevel4
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
fontWeightLevel4
;
}
getMatchedSelectors
(
node
property
options
)
{
return
super
.
getMatchedSelectors
(
node
property
options
)
.
then
(
ret
=
>
{
return
ret
.
matched
;
}
)
;
}
async
getApplied
(
node
options
=
{
}
)
{
const
ret
=
await
super
.
getApplied
(
node
options
)
;
return
ret
.
entries
;
}
addNewRule
(
node
pseudoClasses
)
{
return
super
.
addNewRule
(
node
pseudoClasses
)
.
then
(
ret
=
>
{
return
ret
.
entries
[
0
]
;
}
)
;
}
async
getAttributesInOwnerDocument
(
search
attributeType
node
)
{
if
(
!
attributeType
)
{
throw
new
Error
(
"
type
should
not
be
empty
"
)
;
}
if
(
!
this
.
_form
.
traits
.
getAttributesInOwnerDocument
|
|
!
search
)
{
return
[
]
;
}
const
lcFilter
=
search
.
toLowerCase
(
)
;
if
(
this
.
_attributesCache
&
&
this
.
_attributesCache
.
has
(
attributeType
)
&
&
search
.
startsWith
(
this
.
_attributesCache
.
get
(
attributeType
)
.
search
)
)
{
const
cachedResults
=
this
.
_attributesCache
.
get
(
attributeType
)
.
results
.
filter
(
item
=
>
item
.
toLowerCase
(
)
.
startsWith
(
lcFilter
)
)
;
this
.
emitForTests
(
"
getAttributesInOwnerDocument
-
cache
-
hit
"
cachedResults
)
;
return
cachedResults
;
}
const
results
=
await
super
.
getAttributesInOwnerDocument
(
search
attributeType
node
)
;
this
.
_attributesCache
.
set
(
attributeType
{
search
results
}
)
;
return
results
;
}
_clearAttributesCache
(
)
{
this
.
_attributesCache
.
clear
(
)
;
}
}
exports
.
PageStyleFront
=
PageStyleFront
;
registerFront
(
PageStyleFront
)
;
class
StyleRuleFront
extends
FrontClassWithSpec
(
styleRuleSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
before
(
"
location
-
changed
"
this
.
_locationChangedPre
.
bind
(
this
)
)
;
}
form
(
form
)
{
this
.
actorID
=
form
.
actor
;
this
.
_form
=
form
;
this
.
traits
=
form
.
traits
|
|
{
}
;
if
(
this
.
_mediaText
)
{
this
.
_mediaText
=
null
;
}
}
_locationChangedPre
(
line
column
)
{
this
.
_clearOriginalLocation
(
)
;
this
.
_form
.
line
=
line
;
this
.
_form
.
column
=
column
;
}
startModifyingProperties
(
cssProperties
)
{
if
(
this
.
canSetRuleText
)
{
return
new
RuleRewriter
(
cssProperties
.
isKnown
this
this
.
authoredText
)
;
}
return
new
RuleModificationList
(
this
)
;
}
get
type
(
)
{
return
this
.
_form
.
type
;
}
get
line
(
)
{
return
this
.
_form
.
line
|
|
-
1
;
}
get
column
(
)
{
return
this
.
_form
.
column
|
|
-
1
;
}
get
cssText
(
)
{
return
this
.
_form
.
cssText
;
}
get
authoredText
(
)
{
return
typeof
this
.
_form
.
authoredText
=
=
=
"
string
"
?
this
.
_form
.
authoredText
:
this
.
_form
.
cssText
;
}
get
compatibilityIssues
(
)
{
return
this
.
_form
.
compatibilityIssues
|
|
[
]
;
}
get
declarations
(
)
{
return
this
.
_form
.
declarations
|
|
[
]
;
}
get
keyText
(
)
{
return
this
.
_form
.
keyText
;
}
get
name
(
)
{
return
this
.
_form
.
name
;
}
get
selectors
(
)
{
return
this
.
_form
.
selectors
;
}
get
media
(
)
{
return
this
.
_form
.
media
;
}
get
mediaText
(
)
{
if
(
!
this
.
_form
.
media
)
{
return
null
;
}
if
(
this
.
_mediaText
)
{
return
this
.
_mediaText
;
}
this
.
_mediaText
=
this
.
media
.
join
(
"
"
)
;
return
this
.
_mediaText
;
}
get
parentRule
(
)
{
return
this
.
conn
.
getFrontByID
(
this
.
_form
.
parentRule
)
;
}
get
parentStyleSheet
(
)
{
return
this
.
conn
.
getFrontByID
(
this
.
_form
.
parentStyleSheet
)
;
}
get
element
(
)
{
return
this
.
conn
.
getFrontByID
(
this
.
_form
.
element
)
;
}
get
href
(
)
{
if
(
this
.
_form
.
href
)
{
return
this
.
_form
.
href
;
}
const
sheet
=
this
.
parentStyleSheet
;
return
sheet
?
sheet
.
href
:
"
"
;
}
get
nodeHref
(
)
{
const
sheet
=
this
.
parentStyleSheet
;
return
sheet
?
sheet
.
nodeHref
:
"
"
;
}
get
canSetRuleText
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
canSetRuleText
;
}
get
location
(
)
{
return
{
source
:
this
.
parentStyleSheet
href
:
this
.
href
line
:
this
.
line
column
:
this
.
column
}
;
}
_clearOriginalLocation
(
)
{
this
.
_originalLocation
=
null
;
}
getOriginalLocation
(
)
{
if
(
this
.
_originalLocation
)
{
return
promise
.
resolve
(
this
.
_originalLocation
)
;
}
const
parentSheet
=
this
.
parentStyleSheet
;
if
(
!
parentSheet
)
{
return
promise
.
resolve
(
this
.
location
)
;
}
return
parentSheet
.
getOriginalLocation
(
this
.
line
this
.
column
)
.
then
(
(
{
fromSourceMap
source
line
column
}
)
=
>
{
const
location
=
{
href
:
source
line
:
line
column
:
column
mediaText
:
this
.
mediaText
}
;
if
(
fromSourceMap
=
=
=
false
)
{
location
.
source
=
this
.
parentStyleSheet
;
}
if
(
!
source
)
{
location
.
href
=
this
.
href
;
}
this
.
_originalLocation
=
location
;
return
location
;
}
)
;
}
async
modifySelector
(
node
value
)
{
const
response
=
await
super
.
modifySelector
(
node
value
this
.
canSetRuleText
)
;
if
(
response
.
ruleProps
)
{
response
.
ruleProps
=
response
.
ruleProps
.
entries
[
0
]
;
}
return
response
;
}
setRuleText
(
newText
modifications
)
{
this
.
_form
.
authoredText
=
newText
;
return
super
.
setRuleText
(
newText
modifications
)
;
}
}
exports
.
StyleRuleFront
=
StyleRuleFront
;
registerFront
(
StyleRuleFront
)
;
class
RuleModificationList
{
constructor
(
rule
)
{
this
.
rule
=
rule
;
this
.
modifications
=
[
]
;
}
apply
(
)
{
return
this
.
rule
.
modifyProperties
(
this
.
modifications
)
;
}
setProperty
(
index
name
value
priority
)
{
this
.
modifications
.
push
(
{
type
:
"
set
"
index
name
value
priority
}
)
;
}
removeProperty
(
index
name
)
{
this
.
modifications
.
push
(
{
type
:
"
remove
"
index
name
}
)
;
}
renameProperty
(
index
name
)
{
this
.
removeProperty
(
index
name
)
;
}
setPropertyEnabled
(
index
name
isEnabled
)
{
if
(
!
isEnabled
)
{
this
.
modifications
.
push
(
{
type
:
"
disable
"
index
name
}
)
;
}
}
createProperty
(
)
{
}
}
