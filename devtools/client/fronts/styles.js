"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
{
Front
FrontClassWithSpec
custom
}
=
require
(
"
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
pageStyleSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
styles
.
js
"
)
;
const
{
Task
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
const
PageStyleFront
=
FrontClassWithSpec
(
pageStyleSpec
{
initialize
:
function
(
conn
form
ctx
detail
)
{
Front
.
prototype
.
initialize
.
call
(
this
conn
form
ctx
detail
)
;
this
.
inspector
=
this
.
parent
(
)
;
}
form
:
function
(
form
detail
)
{
if
(
detail
=
=
=
"
actorid
"
)
{
this
.
actorID
=
form
;
return
;
}
this
.
_form
=
form
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
get
walker
(
)
{
return
this
.
inspector
.
walker
;
}
get
supportsAuthoredStyles
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
authoredStyles
;
}
getMatchedSelectors
:
custom
(
function
(
node
property
options
)
{
return
this
.
_getMatchedSelectors
(
node
property
options
)
.
then
(
ret
=
>
{
return
ret
.
matched
;
}
)
;
}
{
impl
:
"
_getMatchedSelectors
"
}
)
getApplied
:
custom
(
Task
.
async
(
function
*
(
node
options
=
{
}
)
{
if
(
!
this
.
_form
.
traits
|
|
!
this
.
_form
.
traits
.
getAppliedCreatesStyleCache
)
{
yield
this
.
getLayout
(
node
)
;
}
let
ret
=
yield
this
.
_getApplied
(
node
options
)
;
return
ret
.
entries
;
}
)
{
impl
:
"
_getApplied
"
}
)
addNewRule
:
custom
(
function
(
node
pseudoClasses
)
{
let
addPromise
;
if
(
this
.
supportsAuthoredStyles
)
{
addPromise
=
this
.
_addNewRule
(
node
pseudoClasses
true
)
;
}
else
{
addPromise
=
this
.
_addNewRule
(
node
pseudoClasses
)
;
}
return
addPromise
.
then
(
ret
=
>
{
return
ret
.
entries
[
0
]
;
}
)
;
}
{
impl
:
"
_addNewRule
"
}
)
}
)
;
exports
.
PageStyleFront
=
PageStyleFront
;
