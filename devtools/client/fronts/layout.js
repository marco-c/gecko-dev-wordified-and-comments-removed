"
use
strict
"
;
const
{
safeAsyncMethod
}
=
require
(
"
devtools
/
shared
/
async
-
utils
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
flexboxSpec
flexItemSpec
gridSpec
layoutSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
layout
"
)
;
class
FlexboxFront
extends
FrontClassWithSpec
(
flexboxSpec
)
{
form
(
form
)
{
this
.
_form
=
form
;
}
get
containerNodeFront
(
)
{
if
(
!
this
.
_form
.
containerNodeActorID
)
{
return
null
;
}
return
this
.
conn
.
getFrontByID
(
this
.
_form
.
containerNodeActorID
)
;
}
get
walkerFront
(
)
{
return
this
.
parentFront
.
walkerFront
;
}
get
properties
(
)
{
return
this
.
_form
.
properties
;
}
}
class
FlexItemFront
extends
FrontClassWithSpec
(
flexItemSpec
)
{
form
(
form
)
{
this
.
_form
=
form
;
}
get
flexItemSizing
(
)
{
return
this
.
_form
.
flexItemSizing
;
}
get
nodeFront
(
)
{
if
(
!
this
.
_form
.
nodeActorID
)
{
return
null
;
}
return
this
.
conn
.
getFrontByID
(
this
.
_form
.
nodeActorID
)
;
}
get
walkerFront
(
)
{
return
this
.
parentFront
.
walkerFront
;
}
get
computedStyle
(
)
{
return
this
.
_form
.
computedStyle
;
}
get
properties
(
)
{
return
this
.
_form
.
properties
;
}
}
class
GridFront
extends
FrontClassWithSpec
(
gridSpec
)
{
form
(
form
)
{
this
.
_form
=
form
;
}
get
containerNodeFront
(
)
{
if
(
!
this
.
_form
.
containerNodeActorID
)
{
return
null
;
}
return
this
.
conn
.
getFrontByID
(
this
.
_form
.
containerNodeActorID
)
;
}
get
walkerFront
(
)
{
return
this
.
parentFront
.
walkerFront
;
}
get
direction
(
)
{
return
this
.
_form
.
direction
;
}
get
gridFragments
(
)
{
return
this
.
_form
.
gridFragments
;
}
get
isSubgrid
(
)
{
return
!
!
this
.
_form
.
isSubgrid
;
}
get
writingMode
(
)
{
return
this
.
_form
.
writingMode
;
}
}
class
LayoutFront
extends
FrontClassWithSpec
(
layoutSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
getAllGrids
=
safeAsyncMethod
(
this
.
getAllGrids
.
bind
(
this
)
(
)
=
>
this
.
isDestroyed
(
)
[
]
)
;
}
get
walkerFront
(
)
{
return
this
.
parentFront
;
}
getAllGrids
(
)
{
if
(
!
this
.
walkerFront
.
rootNode
)
{
return
[
]
;
}
return
this
.
getGrids
(
this
.
walkerFront
.
rootNode
)
;
}
}
exports
.
FlexboxFront
=
FlexboxFront
;
registerFront
(
FlexboxFront
)
;
exports
.
FlexItemFront
=
FlexItemFront
;
registerFront
(
FlexItemFront
)
;
exports
.
GridFront
=
GridFront
;
registerFront
(
GridFront
)
;
exports
.
LayoutFront
=
LayoutFront
;
registerFront
(
LayoutFront
)
;
