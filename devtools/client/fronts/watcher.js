"
use
strict
"
;
const
{
watcherSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
watcher
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
loader
.
lazyRequireGetter
(
this
"
WindowGlobalTargetFront
"
"
devtools
/
client
/
fronts
/
targets
/
window
-
global
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ContentProcessTargetFront
"
"
devtools
/
client
/
fronts
/
targets
/
content
-
process
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
WorkerTargetFront
"
"
devtools
/
client
/
fronts
/
targets
/
worker
"
true
)
;
class
WatcherFront
extends
FrontClassWithSpec
(
watcherSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
this
.
on
(
"
target
-
available
-
form
"
this
.
_onTargetAvailable
)
;
this
.
on
(
"
target
-
destroyed
-
form
"
this
.
_onTargetDestroyed
)
;
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
traits
=
json
.
traits
;
}
_onTargetAvailable
(
form
)
{
let
front
;
if
(
form
.
actor
.
includes
(
"
/
contentProcessTarget
"
)
)
{
front
=
new
ContentProcessTargetFront
(
this
.
conn
null
this
)
;
}
else
if
(
form
.
actor
.
includes
(
"
/
workerTarget
"
)
)
{
front
=
new
WorkerTargetFront
(
this
.
conn
null
this
)
;
}
else
{
front
=
new
WindowGlobalTargetFront
(
this
.
conn
null
this
)
;
}
front
.
actorID
=
form
.
actor
;
front
.
form
(
form
)
;
this
.
manage
(
front
)
;
this
.
emit
(
"
target
-
available
"
front
)
;
}
_onTargetDestroyed
(
form
)
{
const
front
=
this
.
_getTargetFront
(
form
)
;
if
(
front
)
{
this
.
emit
(
"
target
-
destroyed
"
front
)
;
}
}
_getTargetFront
(
form
)
{
let
front
=
this
.
getActorByID
(
form
.
actor
)
;
if
(
!
front
)
{
front
=
this
.
parentFront
.
getActorByID
(
form
.
actor
)
;
}
return
front
;
}
async
getParentWindowGlobalTarget
(
browsingContextID
)
{
const
id
=
await
this
.
getParentBrowsingContextID
(
browsingContextID
)
;
if
(
!
id
)
{
return
null
;
}
return
this
.
getWindowGlobalTarget
(
id
)
;
}
async
getBlackboxingActor
(
)
{
if
(
!
this
.
_blackboxingActor
)
{
this
.
_blackboxingActor
=
await
super
.
getBlackboxingActor
(
)
;
}
return
this
.
_blackboxingActor
;
}
async
getBreakpointListActor
(
)
{
if
(
!
this
.
_breakpointListActor
)
{
this
.
_breakpointListActor
=
await
super
.
getBreakpointListActor
(
)
;
}
return
this
.
_breakpointListActor
;
}
async
getTargetConfigurationActor
(
)
{
if
(
!
this
.
_targetConfigurationActor
)
{
this
.
_targetConfigurationActor
=
await
super
.
getTargetConfigurationActor
(
)
;
}
return
this
.
_targetConfigurationActor
;
}
async
getThreadConfigurationActor
(
)
{
if
(
!
this
.
_threadConfigurationActor
)
{
this
.
_threadConfigurationActor
=
await
super
.
getThreadConfigurationActor
(
)
;
}
return
this
.
_threadConfigurationActor
;
}
async
getWindowGlobalTarget
(
id
)
{
for
(
const
front
of
this
.
poolChildren
(
)
)
{
if
(
front
.
browsingContextID
=
=
id
)
{
return
front
;
}
}
const
topLevelTarget
=
await
this
.
parentFront
.
getTarget
(
)
;
if
(
topLevelTarget
?
.
browsingContextID
=
=
id
)
{
return
topLevelTarget
;
}
const
parentBrowsingContextID
=
await
this
.
getParentBrowsingContextID
(
id
)
;
if
(
parentBrowsingContextID
&
&
parentBrowsingContextID
!
=
=
id
)
{
return
this
.
getWindowGlobalTarget
(
parentBrowsingContextID
)
;
}
return
null
;
}
getWindowGlobalTargetByInnerWindowId
(
innerWindowId
)
{
for
(
const
front
of
this
.
poolChildren
(
)
)
{
if
(
front
.
innerWindowId
=
=
innerWindowId
)
{
return
front
;
}
}
const
topLevelTarget
=
this
.
parentFront
.
getCachedTarget
(
)
;
if
(
topLevelTarget
?
.
innerWindowId
=
=
innerWindowId
)
{
return
topLevelTarget
;
}
console
.
error
(
"
Unable
to
find
target
with
innerWindowId
:
"
+
innerWindowId
)
;
return
null
;
}
async
getNetworkParentActor
(
)
{
if
(
!
this
.
_networkParentActor
)
{
this
.
_networkParentActor
=
await
super
.
getNetworkParentActor
(
)
;
}
return
this
.
_networkParentActor
;
}
}
registerFront
(
WatcherFront
)
;
