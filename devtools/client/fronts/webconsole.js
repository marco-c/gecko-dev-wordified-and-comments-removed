"
use
strict
"
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
webconsoleSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
webconsole
.
js
"
)
;
const
{
getAdHocFrontOrPrimitiveGrip
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
fronts
/
object
.
js
"
)
;
class
WebConsoleFront
extends
FrontClassWithSpec
(
webconsoleSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_client
=
client
;
this
.
events
=
[
]
;
this
.
formAttributeName
=
"
consoleActor
"
;
this
.
before
(
"
consoleAPICall
"
this
.
beforeConsoleAPICall
)
;
this
.
before
(
"
pageError
"
this
.
beforePageError
)
;
}
get
actor
(
)
{
return
this
.
actorID
;
}
beforeConsoleAPICall
(
packet
)
{
if
(
packet
.
message
&
&
Array
.
isArray
(
packet
.
message
.
arguments
)
)
{
packet
.
message
.
arguments
=
packet
.
message
.
arguments
.
map
(
arg
=
>
getAdHocFrontOrPrimitiveGrip
(
arg
this
)
)
;
}
return
packet
;
}
beforePageError
(
packet
)
{
if
(
packet
?
.
pageError
?
.
errorMessage
)
{
packet
.
pageError
.
errorMessage
=
getAdHocFrontOrPrimitiveGrip
(
packet
.
pageError
.
errorMessage
this
)
;
}
if
(
packet
?
.
pageError
?
.
exception
)
{
packet
.
pageError
.
exception
=
getAdHocFrontOrPrimitiveGrip
(
packet
.
pageError
.
exception
this
)
;
}
return
packet
;
}
async
getCachedMessages
(
messageTypes
)
{
const
response
=
await
super
.
getCachedMessages
(
messageTypes
)
;
if
(
Array
.
isArray
(
response
.
messages
)
)
{
response
.
messages
=
response
.
messages
.
map
(
packet
=
>
{
if
(
Array
.
isArray
(
packet
?
.
message
?
.
arguments
)
)
{
packet
.
message
.
arguments
=
packet
.
message
.
arguments
.
map
(
arg
=
>
getAdHocFrontOrPrimitiveGrip
(
arg
this
)
)
;
}
if
(
packet
.
pageError
?
.
exception
)
{
packet
.
pageError
.
exception
=
getAdHocFrontOrPrimitiveGrip
(
packet
.
pageError
.
exception
this
)
;
}
return
packet
;
}
)
;
}
return
response
;
}
destroy
(
)
{
if
(
!
this
.
_client
)
{
return
null
;
}
this
.
_client
=
null
;
return
super
.
destroy
(
)
;
}
}
exports
.
WebConsoleFront
=
WebConsoleFront
;
registerFront
(
WebConsoleFront
)
;
