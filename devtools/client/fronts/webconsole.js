"
use
strict
"
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
LongStringFront
}
=
require
(
"
devtools
/
client
/
fronts
/
string
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
webconsoleSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
webconsole
"
)
;
const
{
getAdHocFrontOrPrimitiveGrip
}
=
require
(
"
devtools
/
client
/
fronts
/
object
"
)
;
class
WebConsoleFront
extends
FrontClassWithSpec
(
webconsoleSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_client
=
client
;
this
.
traits
=
{
}
;
this
.
_longStrings
=
{
}
;
this
.
events
=
[
]
;
this
.
formAttributeName
=
"
consoleActor
"
;
this
.
pendingEvaluationResults
=
new
Map
(
)
;
this
.
onEvaluationResult
=
this
.
onEvaluationResult
.
bind
(
this
)
;
this
.
_onNetworkEventUpdate
=
this
.
_onNetworkEventUpdate
.
bind
(
this
)
;
this
.
on
(
"
evaluationResult
"
this
.
onEvaluationResult
)
;
this
.
before
(
"
consoleAPICall
"
this
.
beforeConsoleAPICall
)
;
this
.
before
(
"
pageError
"
this
.
beforePageError
)
;
this
.
before
(
"
serverNetworkEvent
"
this
.
beforeServerNetworkEvent
)
;
this
.
_client
.
on
(
"
networkEventUpdate
"
this
.
_onNetworkEventUpdate
)
;
}
get
actor
(
)
{
return
this
.
actorID
;
}
_onNetworkEventUpdate
(
packet
)
{
this
.
emit
(
"
serverNetworkUpdateEvent
"
packet
)
;
}
beforeServerNetworkEvent
(
packet
)
{
this
.
emit
(
"
serverNetworkStackTrace
"
packet
)
;
}
async
evaluateJSAsync
(
string
opts
=
{
}
)
{
const
options
=
{
text
:
string
frameActor
:
opts
.
frameActor
url
:
opts
.
url
selectedNodeActor
:
opts
.
selectedNodeActor
selectedObjectActor
:
opts
.
selectedObjectActor
innerWindowID
:
opts
.
innerWindowID
mapped
:
opts
.
mapped
eager
:
opts
.
eager
}
;
this
.
_pendingAsyncEvaluation
=
super
.
evaluateJSAsync
(
options
)
;
const
{
resultID
}
=
await
this
.
_pendingAsyncEvaluation
;
this
.
_pendingAsyncEvaluation
=
null
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
if
(
this
.
pendingEvaluationResults
)
{
this
.
pendingEvaluationResults
.
set
(
resultID
resp
=
>
{
if
(
resp
.
error
)
{
reject
(
resp
)
;
}
else
{
if
(
resp
.
result
)
{
resp
.
result
=
getAdHocFrontOrPrimitiveGrip
(
resp
.
result
this
)
;
}
if
(
resp
.
helperResult
?
.
object
)
{
resp
.
helperResult
.
object
=
getAdHocFrontOrPrimitiveGrip
(
resp
.
helperResult
.
object
this
)
;
}
if
(
resp
.
exception
)
{
resp
.
exception
=
getAdHocFrontOrPrimitiveGrip
(
resp
.
exception
this
)
;
}
if
(
resp
.
exceptionMessage
)
{
resp
.
exceptionMessage
=
getAdHocFrontOrPrimitiveGrip
(
resp
.
exceptionMessage
this
)
;
}
resolve
(
resp
)
;
}
}
)
;
}
}
)
;
}
async
onEvaluationResult
(
packet
)
{
await
this
.
_pendingAsyncEvaluation
;
const
onResponse
=
this
.
pendingEvaluationResults
.
get
(
packet
.
resultID
)
;
if
(
onResponse
)
{
onResponse
(
packet
)
;
this
.
pendingEvaluationResults
.
delete
(
packet
.
resultID
)
;
}
else
{
DevToolsUtils
.
reportException
(
"
onEvaluationResult
"
"
No
response
handler
for
an
evaluateJSAsync
result
(
resultID
:
"
+
packet
.
resultID
+
"
)
"
)
;
}
}
beforeConsoleAPICall
(
packet
)
{
if
(
packet
.
message
&
&
Array
.
isArray
(
packet
.
message
.
arguments
)
)
{
packet
.
message
.
arguments
=
packet
.
message
.
arguments
.
map
(
arg
=
>
getAdHocFrontOrPrimitiveGrip
(
arg
this
)
)
;
}
return
packet
;
}
beforePageError
(
packet
)
{
if
(
packet
?
.
pageError
?
.
errorMessage
)
{
packet
.
pageError
.
errorMessage
=
getAdHocFrontOrPrimitiveGrip
(
packet
.
pageError
.
errorMessage
this
)
;
}
if
(
packet
?
.
pageError
?
.
exception
)
{
packet
.
pageError
.
exception
=
getAdHocFrontOrPrimitiveGrip
(
packet
.
pageError
.
exception
this
)
;
}
return
packet
;
}
async
getCachedMessages
(
messageTypes
)
{
const
response
=
await
super
.
getCachedMessages
(
messageTypes
)
;
if
(
Array
.
isArray
(
response
.
messages
)
)
{
response
.
messages
=
response
.
messages
.
map
(
packet
=
>
{
if
(
Array
.
isArray
(
packet
?
.
message
?
.
arguments
)
)
{
packet
.
message
.
arguments
=
packet
.
message
.
arguments
.
map
(
arg
=
>
getAdHocFrontOrPrimitiveGrip
(
arg
this
)
)
;
}
if
(
packet
.
pageError
?
.
exception
)
{
packet
.
pageError
.
exception
=
getAdHocFrontOrPrimitiveGrip
(
packet
.
pageError
.
exception
this
)
;
}
return
packet
;
}
)
;
}
return
response
;
}
getRequestHeaders
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getRequestHeaders
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getRequestCookies
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getRequestCookies
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getRequestPostData
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getRequestPostData
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseHeaders
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseHeaders
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseCookies
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseCookies
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseContent
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseContent
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseCache
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseCache
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getEventTimings
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getEventTimings
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getSecurityInfo
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getSecurityInfo
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getStackTrace
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getStackTrace
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
async
startListeners
(
listeners
)
{
const
response
=
await
super
.
startListeners
(
listeners
)
;
this
.
hasNativeConsoleAPI
=
response
.
nativeConsoleAPI
;
this
.
traits
=
response
.
traits
;
return
response
;
}
longString
(
grip
)
{
if
(
grip
.
actor
in
this
.
_longStrings
)
{
return
this
.
_longStrings
[
grip
.
actor
]
;
}
const
front
=
new
LongStringFront
(
this
.
_client
this
.
targetFront
this
)
;
front
.
form
(
grip
)
;
this
.
manage
(
front
)
;
this
.
_longStrings
[
grip
.
actor
]
=
front
;
return
front
;
}
async
getString
(
stringGrip
)
{
if
(
typeof
stringGrip
!
=
=
"
object
"
|
|
stringGrip
.
type
!
=
=
"
longString
"
)
{
return
stringGrip
;
}
if
(
stringGrip
.
_fullText
)
{
return
stringGrip
.
_fullText
;
}
const
{
initial
length
}
=
stringGrip
;
const
longStringFront
=
this
.
longString
(
stringGrip
)
;
try
{
const
response
=
await
longStringFront
.
substring
(
initial
.
length
length
)
;
return
initial
+
response
;
}
catch
(
e
)
{
DevToolsUtils
.
reportException
(
"
getString
"
e
.
message
)
;
throw
e
;
}
}
destroy
(
)
{
if
(
!
this
.
_client
)
{
return
null
;
}
this
.
_client
.
off
(
"
networkEventUpdate
"
this
.
_onNetworkEventUpdate
)
;
this
.
_client
=
null
;
this
.
off
(
"
evaluationResult
"
this
.
onEvaluationResult
)
;
this
.
_longStrings
=
null
;
this
.
pendingEvaluationResults
.
clear
(
)
;
this
.
pendingEvaluationResults
=
null
;
return
super
.
destroy
(
)
;
}
}
exports
.
WebConsoleFront
=
WebConsoleFront
;
registerFront
(
WebConsoleFront
)
;
