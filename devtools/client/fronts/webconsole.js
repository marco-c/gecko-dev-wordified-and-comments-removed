"
use
strict
"
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
webconsoleSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
webconsole
.
js
"
)
;
const
{
getAdHocFrontOrPrimitiveGrip
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
fronts
/
object
.
js
"
)
;
class
WebConsoleFront
extends
FrontClassWithSpec
(
webconsoleSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
_client
=
client
;
this
.
events
=
[
]
;
this
.
formAttributeName
=
"
consoleActor
"
;
this
.
_onNetworkEventUpdate
=
this
.
_onNetworkEventUpdate
.
bind
(
this
)
;
this
.
before
(
"
consoleAPICall
"
this
.
beforeConsoleAPICall
)
;
this
.
before
(
"
pageError
"
this
.
beforePageError
)
;
this
.
before
(
"
serverNetworkEvent
"
this
.
beforeServerNetworkEvent
)
;
this
.
_client
.
on
(
"
networkEventUpdate
"
this
.
_onNetworkEventUpdate
)
;
}
get
actor
(
)
{
return
this
.
actorID
;
}
_onNetworkEventUpdate
(
packet
)
{
this
.
emit
(
"
serverNetworkUpdateEvent
"
packet
)
;
}
beforeServerNetworkEvent
(
packet
)
{
this
.
emit
(
"
serverNetworkStackTrace
"
packet
)
;
}
beforeConsoleAPICall
(
packet
)
{
if
(
packet
.
message
&
&
Array
.
isArray
(
packet
.
message
.
arguments
)
)
{
packet
.
message
.
arguments
=
packet
.
message
.
arguments
.
map
(
arg
=
>
getAdHocFrontOrPrimitiveGrip
(
arg
this
)
)
;
}
return
packet
;
}
beforePageError
(
packet
)
{
if
(
packet
?
.
pageError
?
.
errorMessage
)
{
packet
.
pageError
.
errorMessage
=
getAdHocFrontOrPrimitiveGrip
(
packet
.
pageError
.
errorMessage
this
)
;
}
if
(
packet
?
.
pageError
?
.
exception
)
{
packet
.
pageError
.
exception
=
getAdHocFrontOrPrimitiveGrip
(
packet
.
pageError
.
exception
this
)
;
}
return
packet
;
}
async
getCachedMessages
(
messageTypes
)
{
const
response
=
await
super
.
getCachedMessages
(
messageTypes
)
;
if
(
Array
.
isArray
(
response
.
messages
)
)
{
response
.
messages
=
response
.
messages
.
map
(
packet
=
>
{
if
(
Array
.
isArray
(
packet
?
.
message
?
.
arguments
)
)
{
packet
.
message
.
arguments
=
packet
.
message
.
arguments
.
map
(
arg
=
>
getAdHocFrontOrPrimitiveGrip
(
arg
this
)
)
;
}
if
(
packet
.
pageError
?
.
exception
)
{
packet
.
pageError
.
exception
=
getAdHocFrontOrPrimitiveGrip
(
packet
.
pageError
.
exception
this
)
;
}
return
packet
;
}
)
;
}
return
response
;
}
getRequestHeaders
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getRequestHeaders
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getRequestCookies
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getRequestCookies
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getRequestPostData
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getRequestPostData
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseHeaders
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseHeaders
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseCookies
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseCookies
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseContent
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseContent
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseCache
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseCache
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getEventTimings
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getEventTimings
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getSecurityInfo
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getSecurityInfo
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getStackTrace
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getStackTrace
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
destroy
(
)
{
if
(
!
this
.
_client
)
{
return
null
;
}
this
.
_client
.
off
(
"
networkEventUpdate
"
this
.
_onNetworkEventUpdate
)
;
this
.
_client
=
null
;
return
super
.
destroy
(
)
;
}
}
exports
.
WebConsoleFront
=
WebConsoleFront
;
registerFront
(
WebConsoleFront
)
;
