"
use
strict
"
;
add_task
(
async
function
(
)
{
await
testNavigation
(
)
;
}
)
;
add_task
(
async
function
(
)
{
enableTargetSwitching
(
)
;
await
testNavigation
(
)
;
}
)
;
async
function
testNavigation
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
sameSite
.
laxByDefault
"
false
]
]
}
)
;
const
URL1
=
buildURLWithContent
(
"
example
.
com
"
<
h1
>
example
.
com
<
/
h1
>
+
<
script
>
document
.
cookie
=
"
lorem
=
ipsum
"
;
<
/
script
>
)
;
const
URL2
=
buildURLWithContent
(
"
example
.
net
"
<
h1
>
example
.
net
<
/
h1
>
+
<
iframe
>
<
/
iframe
>
+
<
script
>
document
.
cookie
=
"
foo
=
bar
"
;
<
/
script
>
)
;
const
URL_IFRAME
=
buildURLWithContent
(
"
example
.
org
"
<
h1
>
example
.
org
<
/
h1
>
+
<
script
>
document
.
cookie
=
"
hello
=
world
"
;
<
/
script
>
)
;
await
openTabAndSetupStorage
(
URL1
)
;
const
doc
=
gPanelWindow
.
document
;
checkTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
com
"
]
)
;
await
selectTreeItem
(
[
"
cookies
"
"
https
:
/
/
example
.
com
"
]
)
;
checkCookieData
(
"
lorem
"
"
ipsum
"
)
;
await
navigateTo
(
URL2
)
;
info
(
"
Waiting
for
storage
tree
to
refresh
and
show
correct
host
"
)
;
await
waitUntil
(
(
)
=
>
isInTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
net
"
]
)
&
&
!
isInTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
com
"
]
)
)
;
ok
(
!
isInTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
com
"
]
)
"
example
.
com
item
is
not
in
the
tree
anymore
"
)
;
await
selectTreeItem
(
[
"
cookies
"
]
)
;
await
selectTreeItem
(
[
"
cookies
"
"
https
:
/
/
example
.
net
"
]
)
;
info
(
"
Waiting
for
table
data
to
update
and
show
correct
values
"
)
;
await
waitUntil
(
(
)
=
>
hasCookieData
(
"
foo
"
"
bar
"
)
)
;
await
reloadBrowser
(
)
;
info
(
"
Waiting
for
storage
tree
to
refresh
and
show
correct
host
"
)
;
await
waitUntil
(
(
)
=
>
isInTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
net
"
]
)
)
;
await
selectTreeItem
(
[
"
cookies
"
]
)
;
await
selectTreeItem
(
[
"
cookies
"
"
https
:
/
/
example
.
net
"
]
)
;
info
(
"
Waiting
for
table
data
to
update
and
show
correct
values
"
)
;
await
waitUntil
(
(
)
=
>
hasCookieData
(
"
foo
"
"
bar
"
)
)
;
const
onStorageTreeUpdated
=
gUI
.
once
(
"
store
-
objects
-
edit
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
URL_IFRAME
]
async
function
(
url
)
{
const
iframe
=
content
.
document
.
querySelector
(
"
iframe
"
)
;
iframe
.
src
=
url
;
}
)
;
info
(
"
Waiting
for
storage
tree
to
update
"
)
;
await
onStorageTreeUpdated
;
info
(
"
Waiting
for
storage
tree
to
refresh
and
show
correct
host
"
)
;
await
waitUntil
(
(
)
=
>
isInTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
org
"
]
)
)
;
info
(
"
Checking
cookie
data
"
)
;
await
selectTreeItem
(
[
"
cookies
"
"
https
:
/
/
example
.
org
"
]
)
;
checkCookieData
(
"
hello
"
"
world
"
)
;
info
(
"
Navigate
to
the
first
URL
to
check
that
the
multiple
hosts
in
the
current
document
are
all
removed
"
)
;
await
navigateTo
(
URL1
)
;
ok
(
true
"
navigated
"
)
;
await
waitUntil
(
(
)
=
>
isInTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
com
"
]
)
)
;
ok
(
!
isInTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
net
"
]
)
"
host
of
previous
document
(
example
.
net
)
is
not
in
the
tree
anymore
"
)
;
ok
(
!
isInTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
org
"
]
)
"
host
of
iframe
in
previous
document
(
example
.
org
)
is
not
in
the
tree
anymore
"
)
;
info
(
"
Navigate
backward
to
test
bfcache
navigation
"
)
;
gBrowser
.
goBack
(
)
;
await
waitUntil
(
(
)
=
>
isInTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
net
"
]
)
)
;
ok
(
!
isInTree
(
doc
[
"
cookies
"
"
https
:
/
/
example
.
com
"
]
)
"
host
of
previous
document
(
example
.
com
)
is
not
in
the
tree
anymore
"
)
;
info
(
"
Check
that
the
Cookies
node
still
has
the
expected
label
"
)
;
is
(
getTreeNodeLabel
(
doc
[
"
cookies
"
]
)
"
Cookies
"
"
Cookies
item
is
properly
displayed
"
)
;
SpecialPowers
.
clearUserPref
(
"
network
.
cookie
.
sameSite
.
laxByDefault
"
)
;
}
