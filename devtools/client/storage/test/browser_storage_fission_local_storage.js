"
use
strict
"
;
add_task
(
async
function
(
)
{
const
URL_IFRAME
=
buildURLWithContent
(
"
example
.
net
"
<
h1
>
iframe
<
/
h1
>
+
<
script
>
localStorage
.
setItem
(
"
lorem
"
"
ipsum
"
)
;
<
/
script
>
)
;
const
URL_MAIN
=
buildURLWithContent
(
"
example
.
com
"
<
h1
>
Main
<
/
h1
>
+
<
script
>
localStorage
.
setItem
(
"
foo
"
"
bar
"
)
;
<
/
script
>
+
<
iframe
src
=
"
{
URL_IFRAME
}
"
>
)
;
await
openTabAndSetupStorage
(
URL_MAIN
)
;
const
doc
=
gPanelWindow
.
document
;
checkTree
(
doc
"
localStorage
"
"
http
:
/
/
example
.
com
"
)
;
await
selectTreeItem
(
[
"
localStorage
"
"
http
:
/
/
example
.
com
"
]
)
;
checkStorageData
(
"
foo
"
"
bar
"
)
;
await
selectTreeItem
(
[
"
localStorage
"
"
http
:
/
/
example
.
net
"
]
)
;
checkStorageData
(
"
lorem
"
"
ipsum
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
content
.
window
.
localStorage
.
setItem
(
"
foo2
"
"
bar2
"
)
;
const
iframe
=
content
.
document
.
querySelector
(
"
iframe
"
)
;
return
SpecialPowers
.
spawn
(
iframe
[
]
(
)
=
>
{
content
.
window
.
localStorage
.
setItem
(
"
lorem2
"
"
ipsum2
"
)
;
}
)
;
}
)
;
await
selectTreeItem
(
[
"
localStorage
"
"
http
:
/
/
example
.
com
"
]
)
;
checkStorageData
(
"
foo2
"
"
bar2
"
)
;
await
selectTreeItem
(
[
"
localStorage
"
"
http
:
/
/
example
.
net
"
]
)
;
checkStorageData
(
"
lorem2
"
"
ipsum2
"
)
;
}
)
;
function
buildURLWithContent
(
domain
html
)
{
return
http
:
/
/
{
domain
}
/
document
-
builder
.
sjs
?
html
=
{
encodeURI
(
html
)
}
;
}
