"
use
strict
"
;
const
PREFIX
=
"
http
:
/
/
sub1
.
test1
.
example
"
;
const
ORIGIN
=
{
PREFIX
}
.
org
;
const
TEST_URL
=
{
ORIGIN
}
/
{
PATH
}
storage
-
dfpi
.
html
;
function
listOrigins
(
)
{
return
new
Promise
(
resolve
=
>
{
SpecialPowers
.
Services
.
qms
.
listOrigins
(
)
.
callback
=
req
=
>
{
resolve
(
req
.
result
)
;
}
;
}
)
;
}
async
function
clearAllDatabases
(
)
{
await
new
Promise
(
resolve
=
>
{
const
uri
=
SpecialPowers
.
Services
.
io
.
newURI
(
TEST_URL
)
;
const
attrs
=
{
}
;
const
principal
=
SpecialPowers
.
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
attrs
)
;
const
request
=
SpecialPowers
.
Services
.
qms
.
clearStoragesForPrincipal
(
principal
)
;
const
cb
=
SpecialPowers
.
wrapCallback
(
resolve
)
;
request
.
callback
=
cb
;
}
)
;
}
add_task
(
async
function
(
)
{
await
pushPref
(
"
network
.
cookie
.
cookieBehavior
"
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
)
;
registerCleanupFunction
(
clearAllDatabases
)
;
const
EXISTING_ORIGINS
=
await
listOrigins
(
)
;
ok
(
!
EXISTING_ORIGINS
.
includes
(
ORIGIN
)
{
ORIGIN
}
doesn
'
t
exist
)
;
await
openTabAndSetupStorage
(
TEST_URL
)
;
const
origins
=
await
listOrigins
(
)
;
for
(
const
origin
of
origins
)
{
ok
(
EXISTING_ORIGINS
.
includes
(
origin
)
|
|
origin
=
=
=
ORIGIN
check
origin
:
{
origin
}
)
;
}
ok
(
origins
.
includes
(
ORIGIN
)
{
ORIGIN
}
is
added
)
;
}
)
;
