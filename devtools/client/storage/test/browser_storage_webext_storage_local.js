"
use
strict
"
;
const
{
Toolbox
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
"
)
;
async
function
setupExtensionDebuggingToolbox
(
id
)
{
const
commands
=
await
CommandsFactory
.
forAddon
(
id
)
;
const
descriptor
=
commands
.
descriptorFront
;
const
{
toolbox
storage
}
=
await
openStoragePanel
(
{
descriptor
hostType
:
Toolbox
.
HostType
.
WINDOW
}
)
;
const
target
=
toolbox
.
target
;
return
{
target
toolbox
storage
}
;
}
add_task
(
async
function
set_enable_extensionStorage_pref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
devtools
.
storage
.
extensionStorage
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_extension_toolbox_only_supported_values_editable
(
)
{
async
function
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
async
(
msg
.
.
.
args
)
=
>
{
switch
(
msg
)
{
case
"
storage
-
local
-
set
"
:
await
browser
.
storage
.
local
.
set
(
args
[
0
]
)
;
break
;
case
"
storage
-
local
-
get
"
:
{
const
items
=
await
browser
.
storage
.
local
.
get
(
args
[
0
]
)
;
for
(
const
[
key
val
]
of
Object
.
entries
(
items
)
)
{
browser
.
test
.
assertTrue
(
val
=
=
=
args
[
1
]
New
value
{
val
}
is
set
for
key
{
key
}
.
)
;
}
break
;
}
case
"
storage
-
local
-
fireOnChanged
"
:
{
const
listener
=
(
)
=
>
{
browser
.
storage
.
onChanged
.
removeListener
(
listener
)
;
browser
.
test
.
sendMessage
(
"
storage
-
local
-
onChanged
"
)
;
}
;
browser
.
storage
.
onChanged
.
addListener
(
listener
)
;
await
browser
.
runtime
.
getPlatformInfo
(
)
;
break
;
}
default
:
browser
.
test
.
fail
(
Unexpected
test
message
:
{
msg
}
)
;
}
browser
.
test
.
sendMessage
(
{
msg
}
:
done
)
;
}
)
;
browser
.
test
.
sendMessage
(
"
extension
-
origin
"
window
.
location
.
origin
)
;
}
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
storage
"
]
}
background
useAddonManager
:
"
temporary
"
}
)
;
await
extension
.
startup
(
)
;
const
host
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
const
itemsSupported
=
{
arr
:
[
1
2
]
bool
:
true
null
:
null
num
:
4
obj
:
{
a
:
123
}
str
:
"
hi
"
nestedArr
:
[
{
a
:
"
b
"
}
"
c
"
]
nestedObj
:
{
a
:
[
1
2
]
b
:
3
}
}
;
const
itemsUnsupported
=
{
arrBuffer
:
new
ArrayBuffer
(
8
)
bigint
:
BigInt
(
1
)
blob
:
new
Blob
(
[
JSON
.
stringify
(
{
hello
:
"
world
"
}
null
2
)
]
{
type
:
"
application
/
json
"
}
)
date
:
new
Date
(
0
)
map
:
new
Map
(
)
.
set
(
"
a
"
"
b
"
)
regexp
:
/
regexp
/
set
:
new
Set
(
)
.
add
(
1
)
.
add
(
"
a
"
)
undef
:
undefined
arrWithMap
:
[
1
new
Map
(
)
.
set
(
"
a
"
1
)
]
objWithArrayBuffer
:
{
a
:
new
ArrayBuffer
(
8
)
}
deepNestedArr
:
[
[
{
a
:
"
b
"
}
3
]
4
]
deepNestedObj
:
{
a
:
{
b
:
[
1
2
]
}
}
}
;
info
(
"
Add
storage
items
from
the
extension
"
)
;
const
allItems
=
{
.
.
.
itemsSupported
.
.
.
itemsUnsupported
}
;
extension
.
sendMessage
(
"
storage
-
local
-
fireOnChanged
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
fireOnChanged
:
done
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
allItems
)
;
info
(
"
Wait
for
the
extension
to
add
storage
items
and
receive
the
'
onChanged
'
event
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
onChanged
"
)
;
info
(
"
Open
the
addon
toolbox
storage
panel
"
)
;
const
{
target
toolbox
}
=
await
setupExtensionDebuggingToolbox
(
extension
.
id
)
;
await
selectTreeItem
(
[
"
extensionStorage
"
host
]
)
;
info
(
"
Verify
that
value
types
supported
by
the
storage
actor
are
editable
"
)
;
let
validate
=
true
;
const
newValue
=
"
anotherValue
"
;
const
supportedIds
=
Object
.
keys
(
itemsSupported
)
;
for
(
const
id
of
supportedIds
)
{
startCellEdit
(
id
"
value
"
newValue
)
;
await
editCell
(
id
"
value
"
newValue
validate
)
;
}
info
(
"
Verify
that
associated
values
have
been
changed
in
the
extension
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
get
"
Object
.
keys
(
itemsSupported
)
newValue
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
get
:
done
"
)
;
info
(
"
Verify
that
value
types
not
supported
by
the
storage
actor
are
uneditable
"
)
;
const
expectedValStrings
=
{
arrBuffer
:
"
{
}
"
bigint
:
"
1n
"
blob
:
"
{
}
"
date
:
"
1970
-
01
-
01T00
:
00
:
00
.
000Z
"
map
:
"
{
}
"
regexp
:
"
{
}
"
set
:
"
{
}
"
undef
:
"
undefined
"
arrWithMap
:
"
[
1
{
}
]
"
objWithArrayBuffer
:
'
{
"
a
"
:
{
}
}
'
deepNestedArr
:
'
[
[
{
"
a
"
:
"
b
"
}
3
]
4
]
'
deepNestedObj
:
'
{
"
a
"
:
{
"
b
"
:
[
1
2
]
}
}
'
}
;
validate
=
false
;
for
(
const
id
of
Object
.
keys
(
itemsUnsupported
)
)
{
startCellEdit
(
id
"
value
"
validate
)
;
checkCellUneditable
(
id
"
value
"
)
;
checkCell
(
id
"
value
"
expectedValStrings
[
id
]
)
;
}
info
(
"
Shut
down
the
test
"
)
;
await
toolbox
.
destroy
(
)
;
await
extension
.
unload
(
)
;
await
target
.
destroy
(
)
;
}
)
;
