"
use
strict
"
;
const
ROW_IDS
=
[
"
emoji
"
"
tall
"
"
long
"
]
;
add_task
(
async
function
test_storage_layout_tall_content
(
)
{
await
openTabAndSetupStorage
(
MAIN_DOMAIN_SECURED
+
"
storage
-
localstorage
-
tall
-
content
.
html
"
)
;
showAllColumns
(
true
)
;
await
selectTreeItem
(
[
"
localStorage
"
"
https
:
/
/
test1
.
example
.
org
"
]
)
;
testRowHeights
(
ROW_IDS
"
initial
layout
"
)
;
clickColumnHeader
(
"
value
"
)
;
testRowHeights
(
ROW_IDS
"
after
sorting
by
value
"
)
;
await
updateLocalStorageItem
(
"
newTall
"
"
add
"
"
"
.
repeat
(
300
)
)
;
testRowHeights
(
[
"
newTall
"
]
"
after
adding
new
tall
value
"
)
;
await
updateLocalStorageItem
(
"
emoji
"
"
edit
"
"
"
.
repeat
(
400
)
)
;
testRowHeights
(
[
"
emoji
"
]
"
after
editing
'
emoji
'
to
be
taller
"
)
;
await
updateLocalStorageItem
(
"
newTall
"
"
remove
"
)
;
testRowHeights
(
ROW_IDS
"
after
removing
'
newTall
'
"
)
;
}
)
;
function
testRowHeights
(
rowIds
description
)
{
info
(
Checking
row
heights
:
{
description
}
)
;
for
(
const
rowId
of
rowIds
)
{
checkRowHeights
(
rowId
)
;
}
}
function
checkRowHeights
(
rowId
)
{
const
cells
=
getRowCells
(
rowId
true
)
;
const
nameCell
=
cells
.
name
;
const
valueCell
=
cells
.
value
;
ok
(
nameCell
&
&
valueCell
Both
name
and
value
cells
exist
for
row
'
{
rowId
}
'
)
;
const
nameHeight
=
nameCell
.
getBoundingClientRect
(
)
.
height
;
const
valueHeight
=
valueCell
.
getBoundingClientRect
(
)
.
height
;
is
(
nameHeight
valueHeight
Row
'
{
rowId
}
'
columns
have
matching
heights
of
{
valueHeight
}
px
)
;
}
async
function
updateLocalStorageItem
(
key
action
value
=
"
true
"
)
{
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
key
action
value
]
(
k
a
v
)
=
>
{
switch
(
a
)
{
case
"
add
"
:
case
"
edit
"
:
content
.
localStorage
.
setItem
(
k
v
)
;
break
;
case
"
remove
"
:
content
.
localStorage
.
removeItem
(
k
)
;
break
;
default
:
throw
new
Error
(
Unknown
action
:
{
a
}
)
;
}
}
)
;
info
(
{
action
.
toUpperCase
(
)
}
"
{
key
}
"
)
;
const
event
=
action
=
=
=
"
remove
"
?
"
store
-
objects
-
edit
"
:
"
store
-
objects
-
updated
"
;
await
gUI
.
once
(
event
)
;
}
