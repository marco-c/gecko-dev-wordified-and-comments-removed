"
use
strict
"
;
requestLongerTimeout
(
3
)
;
add_task
(
async
function
(
)
{
const
URL1
=
URL_ROOT_COM_SSL
+
"
storage
-
indexeddb
-
simple
.
html
"
;
const
URL2
=
URL_ROOT_NET_SSL
+
"
storage
-
indexeddb
-
simple
-
alt
.
html
"
;
await
openTabAndSetupStorage
(
URL1
)
;
const
doc
=
gPanelWindow
.
document
;
checkTree
(
doc
[
"
indexedDB
"
"
https
:
/
/
example
.
com
"
]
)
;
await
selectTreeItem
(
[
"
indexedDB
"
"
https
:
/
/
example
.
com
"
"
db
(
default
)
"
"
store
"
]
)
;
checkStorageData
(
"
lorem
"
JSON
.
stringify
(
{
key
:
"
lorem
"
value
:
"
ipsum
"
}
)
)
;
info
(
"
Removing
database
"
)
;
await
clearStorage
(
)
;
await
navigateTo
(
URL2
)
;
info
(
"
Creating
database
in
the
second
domain
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
const
win
=
content
.
wrappedJSObject
;
await
win
.
setup
(
)
;
}
)
;
info
(
"
Checking
storage
tree
"
)
;
await
waitUntil
(
(
)
=
>
isInTree
(
doc
[
"
indexedDB
"
"
https
:
/
/
example
.
net
"
]
)
)
;
ok
(
!
isInTree
(
doc
[
"
indexedDB
"
"
https
:
/
/
example
.
com
"
]
)
"
example
.
com
item
is
not
in
the
tree
anymore
"
)
;
await
reloadBrowser
(
)
;
info
(
"
Checking
storage
tree
"
)
;
await
waitUntil
(
(
)
=
>
isInTree
(
doc
[
"
indexedDB
"
"
https
:
/
/
example
.
net
"
]
)
)
;
info
(
"
Check
that
the
indexedDB
node
still
has
the
expected
label
"
)
;
is
(
getTreeNodeLabel
(
doc
[
"
indexedDB
"
]
)
"
Indexed
DB
"
"
indexedDB
item
is
properly
displayed
"
)
;
}
)
;
async
function
clearStorage
(
)
{
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
const
win
=
content
.
wrappedJSObject
;
await
win
.
clear
(
)
;
}
)
;
}
