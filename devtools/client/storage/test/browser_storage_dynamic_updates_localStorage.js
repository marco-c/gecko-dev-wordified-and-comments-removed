"
use
strict
"
;
add_task
(
async
function
(
)
{
await
openTabAndSetupStorage
(
MAIN_DOMAIN
+
"
storage
-
updates
.
html
"
)
;
gUI
.
tree
.
expandAll
(
)
;
ok
(
gUI
.
sidebar
.
hidden
"
Sidebar
is
initially
hidden
"
)
;
await
checkState
(
[
[
[
"
localStorage
"
"
http
:
/
/
test1
.
example
.
org
"
]
[
"
ls1
"
"
ls2
"
"
ls3
"
"
ls4
"
"
ls5
"
"
ls6
"
"
ls7
"
]
]
]
)
;
gWindow
.
localStorage
.
removeItem
(
"
ls4
"
)
;
await
gUI
.
once
(
"
store
-
objects
-
updated
"
)
;
await
checkState
(
[
[
[
"
localStorage
"
"
http
:
/
/
test1
.
example
.
org
"
]
[
"
ls1
"
"
ls2
"
"
ls3
"
"
ls5
"
"
ls6
"
"
ls7
"
]
]
]
)
;
gWindow
.
localStorage
.
setItem
(
"
ls4
"
"
again
"
)
;
await
gUI
.
once
(
"
store
-
objects
-
updated
"
)
;
await
gUI
.
once
(
"
store
-
objects
-
updated
"
)
;
await
checkState
(
[
[
[
"
localStorage
"
"
http
:
/
/
test1
.
example
.
org
"
]
[
"
ls1
"
"
ls2
"
"
ls3
"
"
ls4
"
"
ls5
"
"
ls6
"
"
ls7
"
]
]
]
)
;
gWindow
.
localStorage
.
setItem
(
"
ls2
"
"
ls2
-
changed
"
)
;
await
gUI
.
once
(
"
store
-
objects
-
updated
"
)
;
await
gUI
.
once
(
"
store
-
objects
-
updated
"
)
;
checkCell
(
"
ls2
"
"
value
"
"
ls2
-
changed
"
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
content
.
wrappedJSObject
.
clear
(
)
;
}
)
;
await
gUI
.
once
(
"
store
-
objects
-
cleared
"
)
;
await
checkState
(
[
[
[
"
localStorage
"
"
http
:
/
/
test1
.
example
.
org
"
]
[
]
]
]
)
;
await
finishTests
(
)
;
}
)
;
