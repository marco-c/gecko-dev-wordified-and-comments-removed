"
use
strict
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
testing
.
enableServerWatcherSupport
"
true
)
;
const
URL
=
URL_ROOT_COM
+
"
storage
-
indexeddb
-
iframe
.
html
"
;
await
openTabAndSetupStorage
(
URL
)
;
const
doc
=
gPanelWindow
.
document
;
checkTree
(
doc
[
"
indexedDB
"
"
http
:
/
/
example
.
com
"
]
)
;
await
selectTreeItem
(
[
"
indexedDB
"
"
http
:
/
/
example
.
com
"
"
db
(
default
)
"
"
store
"
]
)
;
checkStorageData
(
"
foo
"
JSON
.
stringify
(
{
key
:
"
foo
"
value
:
"
bar
"
}
)
)
;
checkTree
(
doc
[
"
indexedDB
"
"
http
:
/
/
example
.
net
"
]
)
;
await
selectTreeItem
(
[
"
indexedDB
"
"
http
:
/
/
example
.
net
"
"
db
(
default
)
"
"
store
"
]
)
;
checkStorageData
(
"
lorem
"
JSON
.
stringify
(
{
key
:
"
lorem
"
value
:
"
ipsum
"
}
)
)
;
info
(
"
Add
new
data
to
the
iframe
DB
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
const
iframe
=
content
.
document
.
querySelector
(
"
iframe
"
)
;
return
SpecialPowers
.
spawn
(
iframe
[
]
async
function
(
)
{
return
new
Promise
(
resolve
=
>
{
const
request
=
content
.
window
.
indexedDB
.
open
(
"
db
"
1
)
;
request
.
onsuccess
=
event
=
>
{
const
db
=
event
.
target
.
result
;
const
transaction
=
db
.
transaction
(
[
"
store
"
]
"
readwrite
"
)
;
const
addRequest
=
transaction
.
objectStore
(
"
store
"
)
.
add
(
{
key
:
"
hello
"
value
:
"
world
"
}
)
;
addRequest
.
onsuccess
=
(
)
=
>
resolve
(
)
;
}
;
}
)
;
}
)
;
}
)
;
info
(
"
Refreshing
table
"
)
;
doc
.
querySelector
(
"
#
refresh
-
button
"
)
.
click
(
)
;
info
(
"
Check
that
table
has
new
row
"
)
;
await
waitUntil
(
(
)
=
>
hasStorageData
(
"
hello
"
JSON
.
stringify
(
{
key
:
"
hello
"
value
:
"
world
"
}
)
)
)
;
ok
(
true
"
Table
has
the
new
data
"
)
;
}
)
;
