"
use
strict
"
;
async
function
performDelete
(
store
rowName
action
)
{
const
contextMenu
=
gPanelWindow
.
document
.
getElementById
(
"
storage
-
table
-
popup
"
)
;
const
menuDeleteAllItem
=
contextMenu
.
querySelector
(
"
#
storage
-
table
-
popup
-
delete
-
all
"
)
;
const
menuDeleteAllSessionCookiesItem
=
contextMenu
.
querySelector
(
"
#
storage
-
table
-
popup
-
delete
-
all
-
session
-
cookies
"
)
;
const
menuDeleteAllFromItem
=
contextMenu
.
querySelector
(
"
#
storage
-
table
-
popup
-
delete
-
all
-
from
"
)
;
const
storeName
=
store
.
join
(
"
>
"
)
;
await
selectTreeItem
(
store
)
;
const
eventWait
=
gUI
.
once
(
"
store
-
objects
-
edit
"
)
;
const
cells
=
getRowCells
(
rowName
true
)
;
await
waitForContextMenu
(
contextMenu
cells
.
name
(
)
=
>
{
info
(
Opened
context
menu
in
{
storeName
}
row
'
{
rowName
}
'
)
;
switch
(
action
)
{
case
"
deleteAll
"
:
menuDeleteAllItem
.
click
(
)
;
break
;
case
"
deleteAllSessionCookies
"
:
menuDeleteAllSessionCookiesItem
.
click
(
)
;
break
;
case
"
deleteAllFrom
"
:
menuDeleteAllFromItem
.
click
(
)
;
const
hostName
=
cells
.
host
.
value
;
ok
(
menuDeleteAllFromItem
.
getAttribute
(
"
label
"
)
.
includes
(
hostName
)
Context
menu
item
label
contains
'
{
hostName
}
'
)
;
break
;
}
}
)
;
await
eventWait
;
}
add_task
(
async
function
(
)
{
await
pushPref
(
"
dom
.
security
.
https_first
"
false
)
;
await
openTabAndSetupStorage
(
MAIN_DOMAIN
+
"
storage
-
listings
.
html
"
)
;
info
(
"
test
state
before
delete
"
)
;
await
checkState
(
[
[
[
"
cookies
"
"
http
:
/
/
test1
.
example
.
org
"
]
[
getCookieId
(
"
c1
"
"
test1
.
example
.
org
"
"
/
browser
"
)
getCookieId
(
"
c3
"
"
test1
.
example
.
org
"
"
/
"
)
getCookieId
(
"
cs2
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
c4
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc1
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc2
"
"
.
example
.
org
"
"
/
"
)
]
]
[
[
"
cookies
"
"
https
:
/
/
sectest1
.
example
.
org
"
]
[
getCookieId
(
"
cs2
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
c4
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
sc1
"
"
sectest1
.
example
.
org
"
"
/
browser
/
devtools
/
client
/
storage
/
test
"
)
getCookieId
(
"
sc2
"
"
sectest1
.
example
.
org
"
"
/
browser
/
devtools
/
client
/
storage
/
test
"
)
getCookieId
(
"
uc1
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc2
"
"
.
example
.
org
"
"
/
"
)
]
]
]
)
;
info
(
"
delete
all
from
domain
"
)
;
let
id
=
getCookieId
(
"
c1
"
"
test1
.
example
.
org
"
"
/
browser
"
)
;
await
performDelete
(
[
"
cookies
"
"
http
:
/
/
test1
.
example
.
org
"
]
id
"
deleteAllFrom
"
)
;
info
(
"
test
state
after
delete
all
from
domain
"
)
;
await
checkState
(
[
[
[
"
cookies
"
"
http
:
/
/
test1
.
example
.
org
"
]
[
getCookieId
(
"
cs2
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
c4
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc1
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc2
"
"
.
example
.
org
"
"
/
"
)
]
]
[
[
"
cookies
"
"
https
:
/
/
sectest1
.
example
.
org
"
]
[
getCookieId
(
"
cs2
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
c4
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc1
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc2
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
sc1
"
"
sectest1
.
example
.
org
"
"
/
browser
/
devtools
/
client
/
storage
/
test
"
)
getCookieId
(
"
sc2
"
"
sectest1
.
example
.
org
"
"
/
browser
/
devtools
/
client
/
storage
/
test
"
)
]
]
]
)
;
info
(
"
delete
all
session
cookies
"
)
;
id
=
getCookieId
(
"
cs2
"
"
.
example
.
org
"
"
/
"
)
;
await
performDelete
(
[
"
cookies
"
"
http
:
/
/
sectest1
.
example
.
org
"
]
id
"
deleteAllSessionCookies
"
)
;
info
(
"
test
state
after
delete
all
session
cookies
"
)
;
await
checkState
(
[
[
[
"
cookies
"
"
http
:
/
/
test1
.
example
.
org
"
]
[
getCookieId
(
"
c4
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc2
"
"
.
example
.
org
"
"
/
"
)
]
]
[
[
"
cookies
"
"
https
:
/
/
sectest1
.
example
.
org
"
]
[
getCookieId
(
"
c4
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc2
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
sc2
"
"
sectest1
.
example
.
org
"
"
/
browser
/
devtools
/
client
/
storage
/
test
"
)
]
]
]
)
;
info
(
"
delete
all
"
)
;
id
=
getCookieId
(
"
uc2
"
"
.
example
.
org
"
"
/
"
)
;
await
performDelete
(
[
"
cookies
"
"
http
:
/
/
sectest1
.
example
.
org
"
]
id
"
deleteAll
"
)
;
info
(
"
test
state
after
delete
all
"
)
;
await
checkState
(
[
[
[
"
cookies
"
"
http
:
/
/
test1
.
example
.
org
"
]
[
]
]
[
[
"
cookies
"
"
https
:
/
/
sectest1
.
example
.
org
"
]
[
]
]
]
)
;
}
)
;
add_task
(
async
function
testDeleteWithDomain
(
)
{
await
openTabAndSetupStorage
(
MAIN_DOMAIN
+
"
storage
-
cookies
.
html
"
)
;
await
checkState
(
[
[
[
"
cookies
"
"
http
:
/
/
test1
.
example
.
org
"
]
[
getCookieId
(
"
test1
"
"
.
test1
.
example
.
org
"
"
/
browser
"
)
getCookieId
(
"
test2
"
"
test1
.
example
.
org
"
"
/
browser
"
)
getCookieId
(
"
test3
"
"
.
test1
.
example
.
org
"
"
/
browser
"
)
getCookieId
(
"
test4
"
"
test1
.
example
.
org
"
"
/
browser
"
)
getCookieId
(
"
test5
"
"
.
test1
.
example
.
org
"
"
/
browser
"
)
]
]
]
)
;
const
id
=
getCookieId
(
"
test1
"
"
.
test1
.
example
.
org
"
"
/
browser
"
)
;
await
performDelete
(
[
"
cookies
"
"
http
:
/
/
test1
.
example
.
org
"
]
id
"
deleteAll
"
)
;
info
(
"
test
state
after
delete
all
"
)
;
await
checkState
(
[
[
[
"
cookies
"
"
http
:
/
/
test1
.
example
.
org
"
]
[
]
]
]
)
;
}
)
;
