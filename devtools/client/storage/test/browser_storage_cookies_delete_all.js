"
use
strict
"
;
function
*
performDelete
(
store
rowName
deleteAll
)
{
let
contextMenu
=
gPanelWindow
.
document
.
getElementById
(
"
storage
-
table
-
popup
"
)
;
let
menuDeleteAllItem
=
contextMenu
.
querySelector
(
"
#
storage
-
table
-
popup
-
delete
-
all
"
)
;
let
menuDeleteAllFromItem
=
contextMenu
.
querySelector
(
"
#
storage
-
table
-
popup
-
delete
-
all
-
from
"
)
;
let
storeName
=
store
.
join
(
"
>
"
)
;
yield
selectTreeItem
(
store
)
;
let
eventWait
=
gUI
.
once
(
"
store
-
objects
-
updated
"
)
;
let
cells
=
getRowCells
(
rowName
true
)
;
yield
waitForContextMenu
(
contextMenu
cells
.
name
(
)
=
>
{
info
(
Opened
context
menu
in
{
storeName
}
row
'
{
rowName
}
'
)
;
if
(
deleteAll
)
{
menuDeleteAllItem
.
click
(
)
;
}
else
{
menuDeleteAllFromItem
.
click
(
)
;
let
hostName
=
cells
.
host
.
value
;
ok
(
menuDeleteAllFromItem
.
getAttribute
(
"
label
"
)
.
includes
(
hostName
)
Context
menu
item
label
contains
'
{
hostName
}
'
)
;
}
}
)
;
yield
eventWait
;
}
add_task
(
function
*
(
)
{
yield
openTabAndSetupStorage
(
MAIN_DOMAIN
+
"
storage
-
listings
.
html
"
)
;
info
(
"
test
state
before
delete
"
)
;
yield
checkState
(
[
[
[
"
cookies
"
"
test1
.
example
.
org
"
]
[
getCookieId
(
"
c1
"
"
test1
.
example
.
org
"
"
/
browser
"
)
getCookieId
(
"
c3
"
"
test1
.
example
.
org
"
"
/
"
)
getCookieId
(
"
cs2
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc1
"
"
.
example
.
org
"
"
/
"
)
]
]
[
[
"
cookies
"
"
sectest1
.
example
.
org
"
]
[
getCookieId
(
"
cs2
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
sc1
"
"
sectest1
.
example
.
org
"
"
/
browser
/
devtools
/
client
/
storage
/
test
/
"
)
getCookieId
(
"
uc1
"
"
.
example
.
org
"
"
/
"
)
]
]
]
)
;
info
(
"
delete
all
from
domain
"
)
;
let
id
=
getCookieId
(
"
c1
"
"
test1
.
example
.
org
"
"
/
browser
"
)
;
yield
performDelete
(
[
"
cookies
"
"
test1
.
example
.
org
"
]
id
false
)
;
info
(
"
test
state
after
delete
all
from
domain
"
)
;
yield
checkState
(
[
[
[
"
cookies
"
"
test1
.
example
.
org
"
]
[
getCookieId
(
"
cs2
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc1
"
"
.
example
.
org
"
"
/
"
)
]
]
[
[
"
cookies
"
"
sectest1
.
example
.
org
"
]
[
getCookieId
(
"
cs2
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
uc1
"
"
.
example
.
org
"
"
/
"
)
getCookieId
(
"
sc1
"
"
sectest1
.
example
.
org
"
"
/
browser
/
devtools
/
client
/
storage
/
test
/
"
)
]
]
]
)
;
info
(
"
delete
all
"
)
;
id
=
getCookieId
(
"
uc1
"
"
.
example
.
org
"
"
/
"
)
;
yield
performDelete
(
[
"
cookies
"
"
sectest1
.
example
.
org
"
]
id
true
)
;
info
(
"
test
state
after
delete
all
"
)
;
yield
checkState
(
[
[
[
"
cookies
"
"
test1
.
example
.
org
"
]
[
]
]
[
[
"
cookies
"
"
sectest1
.
example
.
org
"
]
[
]
]
]
)
;
yield
finishTests
(
)
;
}
)
;
