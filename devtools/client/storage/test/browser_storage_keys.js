"
use
strict
"
;
const
LONG_WORD
=
"
a
"
.
repeat
(
1000
)
;
add_task
(
async
function
(
)
{
await
openTabAndSetupStorage
(
MAIN_DOMAIN_SECURED
+
"
storage
-
complex
-
keys
.
html
"
)
;
gUI
.
tree
.
expandAll
(
)
;
await
testLocalStorage
(
)
;
await
testSessionStorage
(
)
;
await
testIndexedDB
(
)
;
}
)
;
async
function
testLocalStorage
(
)
{
const
tests
=
[
{
action
:
"
selectTreeItem
"
ids
:
[
"
localStorage
"
"
https
:
/
/
test1
.
example
.
org
"
]
}
{
action
:
"
assertTableItem
"
id
:
"
"
value
:
"
1
"
}
{
action
:
"
assertTableItem
"
id
:
"
"
value
:
"
2
"
}
]
;
await
makeTests
(
tests
)
;
}
async
function
testSessionStorage
(
)
{
const
tests
=
[
{
action
:
"
selectTreeItem
"
ids
:
[
"
sessionStorage
"
"
https
:
/
/
test1
.
example
.
org
"
]
}
{
action
:
"
assertTableItem
"
id
:
"
Key
with
spaces
"
value
:
"
3
"
}
{
action
:
"
assertTableItem
"
id
:
"
Key
#
with
~
special
characters
"
value
:
"
4
"
}
{
action
:
"
assertTableItem
"
id
:
LONG_WORD
value
:
"
5
"
}
]
;
await
makeTests
(
tests
)
;
}
async
function
testIndexedDB
(
)
{
const
tests
=
[
{
action
:
"
selectTreeItem
"
ids
:
[
"
indexedDB
"
"
https
:
/
/
test1
.
example
.
org
"
"
idb
(
default
)
"
"
obj
"
]
}
{
action
:
"
assertTableItem
"
id
:
"
"
value
:
JSON
.
stringify
(
{
id
:
"
"
name
:
"
foo
"
}
)
keyValuePairs
:
[
{
name
:
"
.
id
"
value
:
"
"
}
{
name
:
"
.
name
"
value
:
"
foo
"
}
]
}
{
action
:
"
assertTableItem
"
id
:
"
"
value
:
JSON
.
stringify
(
{
id
:
"
"
name
:
"
foo2
"
}
)
keyValuePairs
:
[
{
name
:
"
.
id
"
value
:
"
"
}
{
name
:
"
.
name
"
value
:
"
foo2
"
}
]
}
{
action
:
"
assertTableItem
"
id
:
"
Key
with
spaces
"
value
:
JSON
.
stringify
(
{
id
:
"
Key
with
spaces
"
name
:
"
foo3
"
}
)
keyValuePairs
:
[
{
name
:
"
Key
with
spaces
.
id
"
value
:
"
Key
with
spaces
"
}
{
name
:
"
Key
with
spaces
.
name
"
value
:
"
foo3
"
}
]
}
{
action
:
"
assertTableItem
"
id
:
"
Key
#
with
~
special
characters
"
value
:
JSON
.
stringify
(
{
id
:
"
Key
#
with
~
special
characters
"
name
:
"
foo4
"
}
)
keyValuePairs
:
[
{
name
:
"
Key
#
with
~
special
characters
.
id
"
value
:
"
Key
#
with
~
special
characters
"
}
{
name
:
"
Key
#
with
~
special
characters
.
name
"
value
:
"
foo4
"
}
]
}
{
action
:
"
assertTableItem
"
id
:
LONG_WORD
value
:
JSON
.
stringify
(
{
id
:
LONG_WORD
name
:
"
foo5
"
}
)
keyValuePairs
:
[
{
name
:
{
LONG_WORD
}
.
id
value
:
LONG_WORD
}
{
name
:
{
LONG_WORD
}
.
name
value
:
"
foo5
"
}
]
}
]
;
await
makeTests
(
tests
)
;
}
async
function
makeTests
(
tests
)
{
for
(
const
item
of
tests
)
{
info
(
Selecting
item
{
JSON
.
stringify
(
item
)
}
)
;
switch
(
item
.
action
)
{
case
"
selectTreeItem
"
:
await
selectTreeItem
(
item
.
ids
)
;
break
;
case
"
assertTableItem
"
:
await
selectTableItem
(
item
.
id
)
;
await
findVariableViewProperties
(
[
{
name
:
item
.
id
value
:
item
.
value
}
]
)
;
if
(
item
.
keyValuePairs
)
{
await
findVariableViewProperties
(
item
.
keyValuePairs
true
)
;
}
break
;
}
}
}
