"
use
strict
"
;
var
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
var
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
var
promise
=
require
(
"
promise
"
)
;
var
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
SPLIT_CONSOLE_PREF
=
"
devtools
.
toolbox
.
splitconsoleEnabled
"
;
const
STORAGE_PREF
=
"
devtools
.
storage
.
enabled
"
;
const
DUMPEMIT_PREF
=
"
devtools
.
dump
.
emit
"
;
const
DEBUGGERLOG_PREF
=
"
devtools
.
debugger
.
log
"
;
const
CACHES_ON_HTTP_PREF
=
"
dom
.
caches
.
testing
.
enabled
"
;
const
PATH
=
"
browser
/
devtools
/
client
/
storage
/
test
/
"
;
const
MAIN_DOMAIN
=
"
http
:
/
/
test1
.
example
.
org
/
"
+
PATH
;
const
ALT_DOMAIN
=
"
http
:
/
/
sectest1
.
example
.
org
/
"
+
PATH
;
const
ALT_DOMAIN_SECURED
=
"
https
:
/
/
sectest1
.
example
.
org
:
443
/
"
+
PATH
;
waitForExplicitFinish
(
)
;
var
gToolbox
gPanelWindow
gWindow
gUI
;
Services
.
prefs
.
setBoolPref
(
STORAGE_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
CACHES_ON_HTTP_PREF
true
)
;
DevToolsUtils
.
testing
=
true
;
registerCleanupFunction
(
(
)
=
>
{
gToolbox
=
gPanelWindow
=
gWindow
=
gUI
=
null
;
Services
.
prefs
.
clearUserPref
(
STORAGE_PREF
)
;
Services
.
prefs
.
clearUserPref
(
SPLIT_CONSOLE_PREF
)
;
Services
.
prefs
.
clearUserPref
(
DUMPEMIT_PREF
)
;
Services
.
prefs
.
clearUserPref
(
DEBUGGERLOG_PREF
)
;
Services
.
prefs
.
clearUserPref
(
CACHES_ON_HTTP_PREF
)
;
DevToolsUtils
.
testing
=
false
;
while
(
gBrowser
.
tabs
.
length
>
1
)
{
gBrowser
.
removeCurrentTab
(
)
;
}
}
)
;
function
addTab
(
url
)
{
info
(
"
Adding
a
new
tab
with
URL
:
'
"
+
url
+
"
'
"
)
;
let
def
=
promise
.
defer
(
)
;
window
.
focus
(
)
;
let
tab
=
window
.
gBrowser
.
selectedTab
=
window
.
gBrowser
.
addTab
(
url
)
;
let
linkedBrowser
=
tab
.
linkedBrowser
;
linkedBrowser
.
addEventListener
(
"
load
"
function
onload
(
event
)
{
if
(
event
.
originalTarget
.
location
.
href
!
=
url
)
{
return
;
}
linkedBrowser
.
removeEventListener
(
"
load
"
onload
true
)
;
info
(
"
URL
'
"
+
url
+
"
'
loading
complete
"
)
;
def
.
resolve
(
tab
.
linkedBrowser
.
contentWindow
)
;
}
true
)
;
return
def
.
promise
;
}
function
*
openTabAndSetupStorage
(
url
)
{
let
content
=
yield
addTab
(
url
)
;
gWindow
=
content
.
wrappedJSObject
;
yield
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
*
(
)
{
function
getAllWindows
(
baseWindow
)
{
let
windows
=
new
Set
(
)
;
let
_getAllWindows
=
function
(
win
)
{
windows
.
add
(
win
.
wrappedJSObject
)
;
for
(
let
i
=
0
;
i
<
win
.
length
;
i
+
+
)
{
_getAllWindows
(
win
[
i
]
)
;
}
}
;
_getAllWindows
(
baseWindow
)
;
return
windows
;
}
let
windows
=
getAllWindows
(
content
)
;
for
(
let
win
of
windows
)
{
if
(
win
.
setup
)
{
yield
win
.
setup
(
)
;
}
}
}
)
;
return
yield
openStoragePanel
(
)
;
}
var
openStoragePanel
=
Task
.
async
(
function
*
(
cb
)
{
info
(
"
Opening
the
storage
inspector
"
)
;
let
target
=
TargetFactory
.
forTab
(
gBrowser
.
selectedTab
)
;
let
storage
toolbox
;
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
if
(
toolbox
)
{
storage
=
toolbox
.
getPanel
(
"
storage
"
)
;
if
(
storage
)
{
gPanelWindow
=
storage
.
panelWindow
;
gUI
=
storage
.
UI
;
gToolbox
=
toolbox
;
info
(
"
Toolbox
and
storage
already
open
"
)
;
if
(
cb
)
{
return
cb
(
storage
toolbox
)
;
}
return
{
toolbox
:
toolbox
storage
:
storage
}
;
}
}
info
(
"
Opening
the
toolbox
"
)
;
toolbox
=
yield
gDevTools
.
showToolbox
(
target
"
storage
"
)
;
storage
=
toolbox
.
getPanel
(
"
storage
"
)
;
gPanelWindow
=
storage
.
panelWindow
;
gUI
=
storage
.
UI
;
gToolbox
=
toolbox
;
gUI
.
animationsEnabled
=
false
;
info
(
"
Waiting
for
the
stores
to
update
"
)
;
yield
gUI
.
once
(
"
store
-
objects
-
updated
"
)
;
yield
waitForToolboxFrameFocus
(
toolbox
)
;
if
(
cb
)
{
return
cb
(
storage
toolbox
)
;
}
return
{
toolbox
:
toolbox
storage
:
storage
}
;
}
)
;
function
waitForToolboxFrameFocus
(
toolbox
)
{
info
(
"
Making
sure
that
the
toolbox
'
s
frame
is
focused
"
)
;
let
def
=
promise
.
defer
(
)
;
let
win
=
toolbox
.
frame
.
contentWindow
;
waitForFocus
(
def
.
resolve
win
)
;
return
def
.
promise
;
}
function
forceCollections
(
)
{
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
Cu
.
forceShrinkingGC
(
)
;
}
function
*
finishTests
(
)
{
yield
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
*
(
)
{
function
getAllWindows
(
baseWindow
)
{
let
windows
=
new
Set
(
)
;
let
_getAllWindows
=
function
(
win
)
{
windows
.
add
(
win
.
wrappedJSObject
)
;
for
(
let
i
=
0
;
i
<
win
.
length
;
i
+
+
)
{
_getAllWindows
(
win
[
i
]
)
;
}
}
;
_getAllWindows
(
baseWindow
)
;
return
windows
;
}
let
windows
=
getAllWindows
(
content
)
;
for
(
let
win
of
windows
)
{
if
(
win
.
clear
)
{
yield
win
.
clear
(
)
;
}
}
}
)
;
forceCollections
(
)
;
finish
(
)
;
}
function
*
click
(
node
)
{
let
def
=
promise
.
defer
(
)
;
node
.
scrollIntoView
(
)
;
setTimeout
(
(
)
=
>
{
node
.
click
(
)
;
def
.
resolve
(
)
;
}
200
)
;
return
def
;
}
function
variablesViewExpandTo
(
options
)
{
let
root
=
options
.
rootVariable
;
let
expandTo
=
options
.
expandTo
.
split
(
"
.
"
)
;
let
lastDeferred
=
promise
.
defer
(
)
;
function
getNext
(
prop
)
{
let
name
=
expandTo
.
shift
(
)
;
let
newProp
=
prop
.
get
(
name
)
;
if
(
expandTo
.
length
>
0
)
{
ok
(
newProp
"
found
property
"
+
name
)
;
if
(
newProp
&
&
newProp
.
expand
)
{
newProp
.
expand
(
)
;
getNext
(
newProp
)
;
}
else
{
lastDeferred
.
reject
(
prop
)
;
}
}
else
if
(
newProp
)
{
lastDeferred
.
resolve
(
newProp
)
;
}
else
{
lastDeferred
.
reject
(
prop
)
;
}
}
if
(
root
&
&
root
.
expand
)
{
root
.
expand
(
)
;
getNext
(
root
)
;
}
else
{
lastDeferred
.
resolve
(
root
)
;
}
return
lastDeferred
.
promise
;
}
function
findVariableViewProperties
(
ruleArray
parsed
)
{
function
init
(
)
{
if
(
parsed
)
{
ruleArray
=
ruleArray
.
map
(
(
{
name
value
dontMatch
}
)
=
>
{
return
{
name
:
"
.
"
+
name
value
dontMatch
}
;
}
)
;
}
let
expandRules
=
[
]
;
let
rules
=
ruleArray
.
filter
(
rule
=
>
{
if
(
typeof
rule
.
name
=
=
"
string
"
&
&
rule
.
name
.
indexOf
(
"
.
"
)
>
-
1
)
{
expandRules
.
push
(
rule
)
;
return
false
;
}
return
true
;
}
)
;
let
outstanding
=
[
]
;
finder
(
rules
gUI
.
view
outstanding
)
;
let
lastStep
=
processExpandRules
.
bind
(
null
expandRules
)
;
let
returnResults
=
onAllRulesMatched
.
bind
(
null
ruleArray
)
;
return
promise
.
all
(
outstanding
)
.
then
(
lastStep
)
.
then
(
returnResults
)
;
}
function
onMatch
(
prop
rule
matched
)
{
if
(
matched
&
&
!
rule
.
matchedProp
)
{
rule
.
matchedProp
=
prop
;
}
}
function
finder
(
rules
view
promises
)
{
for
(
let
scope
of
view
)
{
for
(
let
[
prop
]
of
scope
)
{
for
(
let
rule
of
rules
)
{
let
matcher
=
matchVariablesViewProperty
(
prop
rule
)
;
promises
.
push
(
matcher
.
then
(
onMatch
.
bind
(
null
prop
rule
)
)
)
;
}
}
}
}
function
processExpandRules
(
rules
)
{
let
rule
=
rules
.
shift
(
)
;
if
(
!
rule
)
{
return
promise
.
resolve
(
null
)
;
}
let
deferred
=
promise
.
defer
(
)
;
let
expandOptions
=
{
rootVariable
:
gUI
.
view
.
getScopeAtIndex
(
parsed
?
1
:
0
)
expandTo
:
rule
.
name
}
;
variablesViewExpandTo
(
expandOptions
)
.
then
(
function
onSuccess
(
prop
)
{
let
name
=
rule
.
name
;
let
lastName
=
name
.
split
(
"
.
"
)
.
pop
(
)
;
rule
.
name
=
lastName
;
let
matched
=
matchVariablesViewProperty
(
prop
rule
)
;
return
matched
.
then
(
onMatch
.
bind
(
null
prop
rule
)
)
.
then
(
function
(
)
{
rule
.
name
=
name
;
}
)
;
}
function
onFailure
(
)
{
return
promise
.
resolve
(
null
)
;
}
)
.
then
(
processExpandRules
.
bind
(
null
rules
)
)
.
then
(
function
(
)
{
deferred
.
resolve
(
null
)
;
}
)
;
return
deferred
.
promise
;
}
function
onAllRulesMatched
(
rules
)
{
for
(
let
rule
of
rules
)
{
let
matched
=
rule
.
matchedProp
;
if
(
matched
&
&
!
rule
.
dontMatch
)
{
ok
(
true
"
rule
"
+
rule
.
name
+
"
matched
for
property
"
+
matched
.
name
)
;
}
else
if
(
matched
&
&
rule
.
dontMatch
)
{
ok
(
false
"
rule
"
+
rule
.
name
+
"
should
not
match
property
"
+
matched
.
name
)
;
}
else
{
ok
(
rule
.
dontMatch
"
rule
"
+
rule
.
name
+
"
did
not
match
any
property
"
)
;
}
}
return
rules
;
}
return
init
(
)
;
}
function
matchVariablesViewProperty
(
prop
rule
)
{
function
resolve
(
result
)
{
return
promise
.
resolve
(
result
)
;
}
if
(
!
prop
)
{
return
resolve
(
false
)
;
}
if
(
rule
.
name
)
{
let
match
=
rule
.
name
instanceof
RegExp
?
rule
.
name
.
test
(
prop
.
name
)
:
prop
.
name
=
=
rule
.
name
;
if
(
!
match
)
{
return
resolve
(
false
)
;
}
}
if
(
"
value
"
in
rule
)
{
let
displayValue
=
prop
.
displayValue
;
if
(
prop
.
displayValueClassName
=
=
"
token
-
string
"
)
{
displayValue
=
displayValue
.
substring
(
1
displayValue
.
length
-
1
)
;
}
let
match
=
rule
.
value
instanceof
RegExp
?
rule
.
value
.
test
(
displayValue
)
:
displayValue
=
=
rule
.
value
;
if
(
!
match
)
{
info
(
"
rule
"
+
rule
.
name
+
"
did
not
match
value
expected
'
"
+
rule
.
value
+
"
'
found
'
"
+
displayValue
+
"
'
"
)
;
return
resolve
(
false
)
;
}
}
return
resolve
(
true
)
;
}
function
*
selectTreeItem
(
ids
)
{
gUI
.
tree
.
expandAll
(
)
;
let
selector
=
"
[
data
-
id
=
'
"
+
JSON
.
stringify
(
ids
)
+
"
'
]
>
.
tree
-
widget
-
item
"
;
let
target
=
gPanelWindow
.
document
.
querySelector
(
selector
)
;
ok
(
target
"
tree
item
found
with
ids
"
+
JSON
.
stringify
(
ids
)
)
;
let
updated
=
gUI
.
once
(
"
store
-
objects
-
updated
"
)
;
yield
click
(
target
)
;
yield
updated
;
}
function
*
selectTableItem
(
id
)
{
let
selector
=
"
.
table
-
widget
-
cell
[
data
-
id
=
'
"
+
id
+
"
'
]
"
;
let
target
=
gPanelWindow
.
document
.
querySelector
(
selector
)
;
ok
(
target
"
table
item
found
with
ids
"
+
id
)
;
yield
click
(
target
)
;
yield
gUI
.
once
(
"
sidebar
-
updated
"
)
;
}
function
once
(
target
eventName
useCapture
=
false
)
{
info
(
"
Waiting
for
event
:
'
"
+
eventName
+
"
'
on
"
+
target
+
"
.
"
)
;
let
deferred
=
promise
.
defer
(
)
;
for
(
let
[
add
remove
]
of
[
[
"
addEventListener
"
"
removeEventListener
"
]
[
"
addListener
"
"
removeListener
"
]
[
"
on
"
"
off
"
]
]
)
{
if
(
(
add
in
target
)
&
&
(
remove
in
target
)
)
{
target
[
add
]
(
eventName
function
onEvent
(
.
.
.
aArgs
)
{
target
[
remove
]
(
eventName
onEvent
useCapture
)
;
deferred
.
resolve
.
apply
(
deferred
aArgs
)
;
}
useCapture
)
;
break
;
}
}
return
deferred
.
promise
;
}
