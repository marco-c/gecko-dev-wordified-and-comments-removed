"
use
strict
"
;
const
{
SiteDataTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
SiteDataTestUtils
.
sys
.
mjs
"
)
;
const
PREFIX
=
"
https
:
/
/
sub1
.
test1
.
example
"
;
const
ORIGIN
=
{
PREFIX
}
.
org
;
const
ORIGIN_PARTITIONED
=
{
PREFIX
}
.
com
^
partitionKey
=
%
28https
%
2Cexample
.
org
%
29
;
const
TEST_URL
=
{
ORIGIN
}
/
document
-
builder
.
sjs
?
html
=
<
iframe
src
=
"
{
PREFIX
}
.
com
/
browser
/
devtools
/
client
/
storage
/
test
/
storage
-
blank
.
html
"
>
<
/
iframe
>
;
function
listOrigins
(
)
{
return
new
Promise
(
resolve
=
>
{
SpecialPowers
.
Services
.
qms
.
listOrigins
(
)
.
callback
=
req
=
>
{
resolve
(
req
.
result
)
;
}
;
}
)
;
}
add_task
(
async
function
(
)
{
await
pushPref
(
"
network
.
cookie
.
cookieBehavior
"
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
)
;
await
pushPref
(
"
privacy
.
partition
.
always_partition_third_party_non_cookie_storage
"
true
)
;
registerCleanupFunction
(
SiteDataTestUtils
.
clear
)
;
const
expectedOrigins
=
[
ORIGIN
ORIGIN_PARTITIONED
]
;
const
EXISTING_ORIGINS
=
await
listOrigins
(
)
;
expectedOrigins
.
forEach
(
expected
=
>
{
ok
(
!
EXISTING_ORIGINS
.
includes
(
expected
)
{
expected
}
doesn
'
t
exist
)
;
}
)
;
await
openTabAndSetupStorage
(
TEST_URL
)
;
const
origins
=
await
listOrigins
(
)
;
for
(
const
origin
of
origins
)
{
ok
(
EXISTING_ORIGINS
.
includes
(
origin
)
|
|
expectedOrigins
.
includes
(
origin
)
check
origin
:
{
origin
}
)
;
}
expectedOrigins
.
forEach
(
expected
=
>
{
ok
(
origins
.
includes
(
expected
)
{
expected
}
is
added
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
