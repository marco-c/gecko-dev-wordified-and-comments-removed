"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
loader
.
lazyRequireGetter
(
this
"
StorageUI
"
"
devtools
/
client
/
storage
/
ui
"
true
)
;
class
StoragePanel
{
constructor
(
panelWin
toolbox
commands
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_toolbox
=
toolbox
;
this
.
_commands
=
commands
;
this
.
_panelWin
=
panelWin
;
this
.
destroy
=
this
.
destroy
.
bind
(
this
)
;
}
get
panelWindow
(
)
{
return
this
.
_panelWin
;
}
async
open
(
)
{
this
.
UI
=
new
StorageUI
(
this
.
_panelWin
this
.
_toolbox
this
.
_commands
)
;
await
this
.
UI
.
init
(
)
;
this
.
isReady
=
true
;
this
.
emit
(
"
ready
"
)
;
return
this
;
}
destroy
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
this
.
UI
.
destroy
(
)
;
this
.
UI
=
null
;
this
.
_toolbox
=
null
;
this
.
_panelWin
=
null
;
}
}
exports
.
StoragePanel
=
StoragePanel
;
