"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
Cu
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
ViewHelpers
.
jsm
"
)
;
const
{
Task
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
{
}
)
;
var
{
loader
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
STRINGS_URI
=
"
chrome
:
/
/
devtools
/
locale
/
animationinspector
.
properties
"
;
const
L10N
=
new
ViewHelpers
.
L10N
(
STRINGS_URI
)
;
const
OPTIMAL_TIME_INTERVAL_MAX_ITERS
=
100
;
const
TIME_INTERVAL_MULTIPLE
=
25
;
const
TIME_INTERVAL_SCALES
=
3
;
const
TIME_GRADUATION_MIN_SPACING
=
10
;
const
TIME_INTERVAL_COLOR
=
[
128
136
144
]
;
const
TIME_INTERVAL_OPACITY_MIN
=
32
;
const
TIME_INTERVAL_OPACITY_ADD
=
32
;
const
MILLIS_TIME_FORMAT_MAX_DURATION
=
4000
;
function
createNode
(
options
)
{
if
(
!
options
.
parent
)
{
throw
new
Error
(
"
Missing
parent
DOMNode
to
create
new
node
"
)
;
}
let
type
=
options
.
nodeType
|
|
"
div
"
;
let
node
=
options
.
parent
.
ownerDocument
.
createElement
(
type
)
;
for
(
let
name
in
options
.
attributes
|
|
{
}
)
{
let
value
=
options
.
attributes
[
name
]
;
node
.
setAttribute
(
name
value
)
;
}
if
(
options
.
textContent
)
{
node
.
textContent
=
options
.
textContent
;
}
options
.
parent
.
appendChild
(
node
)
;
return
node
;
}
exports
.
createNode
=
createNode
;
function
drawGraphElementBackground
(
document
id
graphWidth
timeScale
)
{
let
canvas
=
document
.
createElement
(
"
canvas
"
)
;
let
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
canvas
.
width
=
graphWidth
;
canvas
.
height
=
1
;
let
imageData
=
ctx
.
createImageData
(
canvas
.
width
canvas
.
height
)
;
let
pixelArray
=
imageData
.
data
;
let
buf
=
new
ArrayBuffer
(
pixelArray
.
length
)
;
let
view8bit
=
new
Uint8ClampedArray
(
buf
)
;
let
view32bit
=
new
Uint32Array
(
buf
)
;
let
[
r
g
b
]
=
TIME_INTERVAL_COLOR
;
let
alphaComponent
=
TIME_INTERVAL_OPACITY_MIN
;
let
interval
=
findOptimalTimeInterval
(
timeScale
)
;
for
(
let
i
=
1
;
i
<
=
TIME_INTERVAL_SCALES
;
i
+
+
)
{
let
increment
=
interval
*
Math
.
pow
(
2
i
)
;
for
(
let
x
=
0
;
x
<
canvas
.
width
;
x
+
=
increment
)
{
let
position
=
x
|
0
;
view32bit
[
position
]
=
(
alphaComponent
<
<
24
)
|
(
b
<
<
16
)
|
(
g
<
<
8
)
|
r
;
}
alphaComponent
+
=
TIME_INTERVAL_OPACITY_ADD
;
}
pixelArray
.
set
(
view8bit
)
;
ctx
.
putImageData
(
imageData
0
0
)
;
document
.
mozSetImageElement
(
id
canvas
)
;
}
exports
.
drawGraphElementBackground
=
drawGraphElementBackground
;
function
findOptimalTimeInterval
(
timeScale
minSpacing
=
TIME_GRADUATION_MIN_SPACING
)
{
let
timingStep
=
TIME_INTERVAL_MULTIPLE
;
let
numIters
=
0
;
if
(
timeScale
>
minSpacing
)
{
return
timeScale
;
}
while
(
true
)
{
let
scaledStep
=
timeScale
*
timingStep
;
if
(
+
+
numIters
>
OPTIMAL_TIME_INTERVAL_MAX_ITERS
)
{
return
scaledStep
;
}
if
(
scaledStep
<
minSpacing
)
{
timingStep
*
=
2
;
continue
;
}
return
scaledStep
;
}
}
exports
.
findOptimalTimeInterval
=
findOptimalTimeInterval
;
var
TargetNodeHighlighter
=
{
highlighter
:
null
isShown
:
false
highlight
:
Task
.
async
(
function
*
(
animationTargetNode
)
{
if
(
!
this
.
highlighter
)
{
let
hUtils
=
animationTargetNode
.
inspector
.
toolbox
.
highlighterUtils
;
this
.
highlighter
=
yield
hUtils
.
getHighlighterByType
(
"
BoxModelHighlighter
"
)
;
}
yield
this
.
highlighter
.
show
(
animationTargetNode
.
nodeFront
)
;
this
.
isShown
=
true
;
this
.
emit
(
"
highlighted
"
animationTargetNode
)
;
}
)
unhighlight
:
Task
.
async
(
function
*
(
)
{
if
(
!
this
.
highlighter
|
|
!
this
.
isShown
)
{
return
;
}
yield
this
.
highlighter
.
hide
(
)
;
this
.
isShown
=
false
;
this
.
emit
(
"
unhighlighted
"
)
;
}
)
}
;
EventEmitter
.
decorate
(
TargetNodeHighlighter
)
;
exports
.
TargetNodeHighlighter
=
TargetNodeHighlighter
;
function
formatStopwatchTime
(
time
)
{
if
(
!
time
)
{
return
"
00
:
00
.
000
"
;
}
let
milliseconds
=
parseInt
(
time
%
1000
10
)
;
let
seconds
=
parseInt
(
(
time
/
1000
)
%
60
10
)
;
let
minutes
=
parseInt
(
(
time
/
(
1000
*
60
)
)
10
)
;
let
pad
=
(
nb
max
)
=
>
{
if
(
nb
<
max
)
{
return
new
Array
(
(
max
+
"
"
)
.
length
-
(
nb
+
"
"
)
.
length
+
1
)
.
join
(
"
0
"
)
+
nb
;
}
return
nb
;
}
minutes
=
pad
(
minutes
10
)
;
seconds
=
pad
(
seconds
10
)
;
milliseconds
=
pad
(
milliseconds
100
)
;
return
{
minutes
}
:
{
seconds
}
.
{
milliseconds
}
;
}
exports
.
formatStopwatchTime
=
formatStopwatchTime
;
var
TimeScale
=
{
minStartTime
:
Infinity
maxEndTime
:
0
addAnimation
:
function
(
state
)
{
let
{
previousStartTime
delay
duration
iterationCount
playbackRate
}
=
state
;
let
relevantDelay
=
delay
<
0
?
delay
/
playbackRate
:
0
;
previousStartTime
=
previousStartTime
|
|
0
;
this
.
minStartTime
=
Math
.
min
(
this
.
minStartTime
previousStartTime
+
relevantDelay
)
;
let
length
=
(
delay
/
playbackRate
)
+
(
(
duration
/
playbackRate
)
*
(
!
iterationCount
?
1
:
iterationCount
)
)
;
let
endTime
=
previousStartTime
+
length
;
this
.
maxEndTime
=
Math
.
max
(
this
.
maxEndTime
endTime
)
;
}
reset
:
function
(
)
{
this
.
minStartTime
=
Infinity
;
this
.
maxEndTime
=
0
;
}
startTimeToDistance
:
function
(
time
)
{
time
-
=
this
.
minStartTime
;
return
this
.
durationToDistance
(
time
)
;
}
durationToDistance
:
function
(
duration
)
{
return
duration
*
100
/
this
.
getDuration
(
)
;
}
distanceToTime
:
function
(
distance
)
{
return
this
.
minStartTime
+
(
this
.
getDuration
(
)
*
distance
/
100
)
;
}
distanceToRelativeTime
:
function
(
distance
)
{
let
time
=
this
.
distanceToTime
(
distance
)
;
return
time
-
this
.
minStartTime
;
}
formatTime
:
function
(
time
)
{
if
(
this
.
getDuration
(
)
<
=
MILLIS_TIME_FORMAT_MAX_DURATION
)
{
return
L10N
.
getFormatStr
(
"
timeline
.
timeGraduationLabel
"
time
.
toFixed
(
0
)
)
;
}
return
L10N
.
getFormatStr
(
"
player
.
timeLabel
"
(
time
/
1000
)
.
toFixed
(
1
)
)
;
}
getDuration
:
function
(
)
{
return
this
.
maxEndTime
-
this
.
minStartTime
;
}
getAnimationDimensions
:
function
(
{
state
}
)
{
let
start
=
state
.
previousStartTime
|
|
0
;
let
duration
=
state
.
duration
;
let
rate
=
state
.
playbackRate
;
let
count
=
state
.
iterationCount
;
let
delay
=
state
.
delay
|
|
0
;
let
x
=
this
.
startTimeToDistance
(
start
+
(
delay
/
rate
)
)
;
let
w
=
this
.
durationToDistance
(
duration
/
rate
)
;
let
iterationW
=
w
*
(
count
|
|
1
)
;
let
delayX
=
this
.
durationToDistance
(
(
delay
<
0
?
0
:
delay
)
/
rate
)
;
let
delayW
=
this
.
durationToDistance
(
Math
.
abs
(
delay
)
/
rate
)
;
let
negativeDelayW
=
delay
<
0
?
delayW
:
0
;
return
{
x
w
iterationW
delayX
delayW
negativeDelayW
}
;
}
}
;
exports
.
TimeScale
=
TimeScale
;
