"
use
strict
"
;
requestLongerTimeout
(
2
)
;
add_task
(
function
*
(
)
{
yield
addTab
(
URL_ROOT
+
"
doc_simple_animation
.
html
"
)
;
let
{
panel
controller
}
=
yield
openAnimationInspector
(
)
;
info
(
"
Getting
the
animation
element
from
the
panel
"
)
;
let
timelineEl
=
panel
.
animationsTimelineComponent
.
rootWrapperEl
;
let
timeBlockNameEls
=
timelineEl
.
querySelectorAll
(
"
.
time
-
block
.
name
"
)
;
[
.
.
.
timeBlockNameEls
]
.
forEach
(
(
el
i
)
=
>
{
ok
(
el
.
hasAttribute
(
"
title
"
)
"
The
tooltip
is
defined
for
animation
"
+
i
)
;
let
title
=
el
.
getAttribute
(
"
title
"
)
;
let
state
=
controller
.
animationPlayers
[
i
]
.
state
;
if
(
state
.
delay
)
{
ok
(
title
.
match
(
/
Delay
:
[
\
d
.
-
]
+
s
/
)
"
The
tooltip
shows
the
delay
"
)
;
}
ok
(
title
.
match
(
/
Duration
:
[
\
d
.
]
+
s
/
)
"
The
tooltip
shows
the
duration
"
)
;
if
(
state
.
endDelay
)
{
ok
(
title
.
match
(
/
End
delay
:
[
\
d
.
-
]
+
s
/
)
"
The
tooltip
shows
the
endDelay
"
)
;
}
if
(
state
.
iterationCount
!
=
=
1
)
{
ok
(
title
.
match
(
/
Repeats
:
/
)
"
The
tooltip
shows
the
iterations
"
)
;
}
else
{
ok
(
!
title
.
match
(
/
Repeats
:
/
)
"
The
tooltip
doesn
'
t
show
the
iterations
"
)
;
}
if
(
state
.
easing
&
&
state
.
easing
!
=
=
"
linear
"
)
{
ok
(
title
.
match
(
/
Easing
:
/
)
"
The
tooltip
shows
the
easing
"
)
;
}
else
{
ok
(
!
title
.
match
(
/
Easing
:
/
)
"
The
tooltip
doesn
'
t
show
the
easing
if
it
is
'
linear
'
"
)
;
}
if
(
state
.
fill
)
{
ok
(
title
.
match
(
/
Fill
:
/
)
"
The
tooltip
shows
the
fill
"
)
;
}
if
(
state
.
direction
)
{
if
(
state
.
direction
=
=
=
"
normal
"
)
{
ok
(
!
title
.
match
(
/
Direction
:
/
)
"
The
tooltip
doesn
'
t
show
the
direction
if
it
is
'
normal
'
"
)
;
}
else
{
ok
(
title
.
match
(
/
Direction
:
/
)
"
The
tooltip
shows
the
direction
"
)
;
}
}
ok
(
!
title
.
match
(
/
Iteration
start
:
/
)
"
The
tooltip
doesn
'
t
show
the
iteration
start
"
)
;
}
)
;
}
)
;
