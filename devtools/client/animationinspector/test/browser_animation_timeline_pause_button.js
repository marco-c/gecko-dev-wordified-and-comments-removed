"
use
strict
"
;
add_task
(
function
*
(
)
{
yield
addTab
(
TEST_URL_ROOT
+
"
doc_simple_animation
.
html
"
)
;
let
{
panel
inspector
}
=
yield
openAnimationInspector
(
)
;
let
timeline
=
panel
.
animationsTimelineComponent
;
let
btn
=
panel
.
playTimelineButtonEl
;
ok
(
btn
"
The
play
/
pause
button
exists
"
)
;
ok
(
!
btn
.
classList
.
contains
(
"
paused
"
)
"
The
play
/
pause
button
is
in
its
playing
state
"
)
;
info
(
"
Click
on
the
button
to
pause
all
timeline
animations
"
)
;
yield
clickTimelinePlayPauseButton
(
panel
)
;
ok
(
btn
.
classList
.
contains
(
"
paused
"
)
"
The
play
/
pause
button
is
in
its
paused
state
"
)
;
yield
assertScrubberMoving
(
panel
false
)
;
info
(
"
Click
again
on
the
button
to
play
all
timeline
animations
"
)
;
yield
clickTimelinePlayPauseButton
(
panel
)
;
ok
(
!
btn
.
classList
.
contains
(
"
paused
"
)
"
The
play
/
pause
button
is
in
its
playing
state
again
"
)
;
yield
assertScrubberMoving
(
panel
true
)
;
info
(
"
Select
an
infinite
animation
reload
the
page
and
wait
for
the
"
+
"
animation
to
complete
"
)
;
yield
selectNode
(
"
.
multi
"
inspector
)
;
yield
reloadTab
(
inspector
)
;
yield
waitForOutOfBoundScrubber
(
timeline
)
;
ok
(
!
btn
.
classList
.
contains
(
"
paused
"
)
"
The
button
is
in
its
playing
state
still
animations
are
infinite
.
"
)
;
yield
assertScrubberMoving
(
panel
true
)
;
info
(
"
Click
on
the
button
after
the
scrubber
has
moved
out
of
bounds
"
)
;
yield
clickTimelinePlayPauseButton
(
panel
)
;
ok
(
btn
.
classList
.
contains
(
"
paused
"
)
"
The
button
can
be
paused
after
the
scrubber
has
moved
out
of
bounds
"
)
;
yield
assertScrubberMoving
(
panel
false
)
;
info
(
"
Select
a
finite
animation
reload
the
page
and
wait
for
the
"
+
"
animation
to
complete
"
)
;
yield
selectNode
(
"
.
negative
-
delay
"
inspector
)
;
yield
reloadTab
(
inspector
)
;
yield
waitForOutOfBoundScrubber
(
timeline
)
;
ok
(
btn
.
classList
.
contains
(
"
paused
"
)
"
The
button
is
in
paused
state
once
finite
animations
are
done
"
)
;
yield
assertScrubberMoving
(
panel
false
)
;
info
(
"
Click
again
on
the
button
to
play
the
animation
from
the
start
again
"
)
;
yield
clickTimelinePlayPauseButton
(
panel
)
;
ok
(
!
btn
.
classList
.
contains
(
"
paused
"
)
"
Clicking
the
button
once
finite
animations
are
done
should
restart
them
"
)
;
yield
assertScrubberMoving
(
panel
true
)
;
}
)
;
function
waitForOutOfBoundScrubber
(
{
win
scrubberEl
}
)
{
return
new
Promise
(
resolve
=
>
{
function
check
(
)
{
let
pos
=
scrubberEl
.
getBoxQuads
(
)
[
0
]
.
bounds
.
right
;
let
width
=
win
.
document
.
documentElement
.
offsetWidth
;
if
(
pos
>
=
width
)
{
setTimeout
(
resolve
50
)
;
}
else
{
setTimeout
(
check
50
)
;
}
}
check
(
)
;
}
)
;
}
