"
use
strict
"
;
requestLongerTimeout
(
2
)
;
add_task
(
function
*
(
)
{
yield
addTab
(
URL_ROOT
+
"
doc_simple_animation
.
html
"
)
;
let
{
panel
inspector
}
=
yield
openAnimationInspector
(
)
;
let
timeline
=
panel
.
animationsTimelineComponent
;
let
btn
=
panel
.
playTimelineButtonEl
;
info
(
"
Select
a
finite
animation
and
wait
for
the
animation
to
complete
"
)
;
yield
selectNodeAndWaitForAnimations
(
"
.
negative
-
delay
"
inspector
)
;
let
onScrubberStopped
=
waitForScrubberStopped
(
timeline
)
;
yield
reloadTab
(
inspector
)
;
yield
onScrubberStopped
;
ok
(
btn
.
classList
.
contains
(
"
paused
"
)
"
The
button
is
in
paused
state
once
finite
animations
are
done
"
)
;
yield
assertScrubberMoving
(
panel
false
)
;
info
(
"
Click
again
on
the
button
to
play
the
animation
from
the
start
again
"
)
;
yield
clickTimelinePlayPauseButton
(
panel
)
;
ok
(
!
btn
.
classList
.
contains
(
"
paused
"
)
"
Clicking
the
button
once
finite
animations
are
done
should
restart
them
"
)
;
yield
assertScrubberMoving
(
panel
true
)
;
}
)
;
function
waitForScrubberStopped
(
timeline
)
{
return
new
Promise
(
resolve
=
>
{
timeline
.
on
(
"
timeline
-
data
-
changed
"
function
onTimelineData
(
e
{
isMoving
}
)
{
if
(
!
isMoving
)
{
timeline
.
off
(
"
timeline
-
data
-
changed
"
onTimelineData
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
