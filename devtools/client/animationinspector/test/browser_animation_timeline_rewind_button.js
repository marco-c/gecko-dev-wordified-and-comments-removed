"
use
strict
"
;
requestLongerTimeout
(
2
)
;
add_task
(
function
*
(
)
{
yield
addTab
(
TEST_URL_ROOT
+
"
doc_simple_animation
.
html
"
)
;
let
{
panel
controller
}
=
yield
openAnimationInspector
(
)
;
let
btn
=
panel
.
rewindTimelineButtonEl
;
ok
(
btn
"
The
rewind
button
exists
"
)
;
info
(
"
Click
on
the
button
to
rewind
all
timeline
animations
"
)
;
yield
clickTimelineRewindButton
(
panel
)
;
info
(
"
Check
that
the
scrubber
has
stopped
moving
"
)
;
yield
assertScrubberMoving
(
panel
false
)
;
ok
(
controller
.
animationPlayers
.
every
(
(
{
state
}
)
=
>
state
.
currentTime
=
=
=
0
)
"
All
animations
'
currentTimes
have
been
set
to
0
"
)
;
ok
(
controller
.
animationPlayers
.
every
(
(
{
state
}
)
=
>
state
.
playState
=
=
=
"
paused
"
)
"
All
animations
have
been
paused
"
)
;
info
(
"
Play
the
animations
again
"
)
;
yield
clickTimelinePlayPauseButton
(
panel
)
;
info
(
"
And
pause
them
after
a
short
while
"
)
;
yield
new
Promise
(
r
=
>
setTimeout
(
r
200
)
)
;
info
(
"
Check
that
rewinding
when
animations
are
paused
works
too
"
)
;
yield
clickTimelineRewindButton
(
panel
)
;
info
(
"
Check
that
the
scrubber
has
stopped
moving
"
)
;
yield
assertScrubberMoving
(
panel
false
)
;
ok
(
controller
.
animationPlayers
.
every
(
(
{
state
}
)
=
>
state
.
currentTime
=
=
=
0
)
"
All
animations
'
currentTimes
have
been
set
to
0
"
)
;
ok
(
controller
.
animationPlayers
.
every
(
(
{
state
}
)
=
>
state
.
playState
=
=
=
"
paused
"
)
"
All
animations
have
been
paused
"
)
;
}
)
;
