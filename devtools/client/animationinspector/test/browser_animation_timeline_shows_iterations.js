"
use
strict
"
;
requestLongerTimeout
(
2
)
;
add_task
(
function
*
(
)
{
yield
addTab
(
URL_ROOT
+
"
doc_simple_animation
.
html
"
)
;
let
{
inspector
panel
}
=
yield
openAnimationInspector
(
)
;
info
(
"
Selecting
the
test
node
"
)
;
yield
selectNodeAndWaitForAnimations
(
"
.
delayed
"
inspector
)
;
info
(
"
Getting
the
animation
element
from
the
panel
"
)
;
let
timelineEl
=
panel
.
animationsTimelineComponent
.
rootWrapperEl
;
let
animation
=
timelineEl
.
querySelector
(
"
.
time
-
block
"
)
;
let
iterations
=
animation
.
querySelector
(
"
.
iterations
"
)
;
let
iterationCount
=
getIterationCountFromBackground
(
iterations
)
;
is
(
iterationCount
10
"
The
animation
timeline
contains
the
right
number
of
iterations
"
)
;
ok
(
!
iterations
.
classList
.
contains
(
"
infinite
"
)
"
The
iteration
element
doesn
'
t
have
the
infinite
class
"
)
;
info
(
"
Selecting
another
test
node
with
an
infinite
animation
"
)
;
yield
selectNodeAndWaitForAnimations
(
"
.
animated
"
inspector
)
;
info
(
"
Getting
the
animation
element
from
the
panel
again
"
)
;
animation
=
timelineEl
.
querySelector
(
"
.
time
-
block
"
)
;
iterations
=
animation
.
querySelector
(
"
.
iterations
"
)
;
iterationCount
=
getIterationCountFromBackground
(
iterations
)
;
is
(
iterationCount
1
"
The
animation
timeline
contains
just
one
iteration
"
)
;
ok
(
iterations
.
classList
.
contains
(
"
infinite
"
)
"
The
iteration
element
has
the
infinite
class
"
)
;
}
)
;
function
getIterationCountFromBackground
(
el
)
{
let
backgroundSize
=
parseFloat
(
el
.
style
.
backgroundSize
.
split
(
"
"
)
[
0
]
)
;
return
Math
.
round
(
100
/
backgroundSize
)
;
}
