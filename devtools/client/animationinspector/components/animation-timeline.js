"
use
strict
"
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
createNode
findOptimalTimeInterval
getFormattedAnimationTitle
TimeScale
getCssPropertyName
}
=
require
(
"
devtools
/
client
/
animationinspector
/
utils
"
)
;
const
{
AnimationDetails
}
=
require
(
"
devtools
/
client
/
animationinspector
/
components
/
animation
-
details
"
)
;
const
{
AnimationTargetNode
}
=
require
(
"
devtools
/
client
/
animationinspector
/
components
/
animation
-
target
-
node
"
)
;
const
{
AnimationTimeBlock
}
=
require
(
"
devtools
/
client
/
animationinspector
/
components
/
animation
-
time
-
block
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
animationinspector
.
properties
"
)
;
const
TIME_GRADUATION_MIN_SPACING
=
40
;
const
TIMELINE_BACKGROUND_RESIZE_DEBOUNCE_TIMER
=
50
;
function
AnimationsTimeline
(
inspector
serverTraits
)
{
this
.
animations
=
[
]
;
this
.
tracksMap
=
new
WeakMap
(
)
;
this
.
targetNodes
=
[
]
;
this
.
timeBlocks
=
[
]
;
this
.
inspector
=
inspector
;
this
.
serverTraits
=
serverTraits
;
this
.
onAnimationStateChanged
=
this
.
onAnimationStateChanged
.
bind
(
this
)
;
this
.
onScrubberMouseDown
=
this
.
onScrubberMouseDown
.
bind
(
this
)
;
this
.
onScrubberMouseUp
=
this
.
onScrubberMouseUp
.
bind
(
this
)
;
this
.
onScrubberMouseOut
=
this
.
onScrubberMouseOut
.
bind
(
this
)
;
this
.
onScrubberMouseMove
=
this
.
onScrubberMouseMove
.
bind
(
this
)
;
this
.
onAnimationSelected
=
this
.
onAnimationSelected
.
bind
(
this
)
;
this
.
onWindowResize
=
this
.
onWindowResize
.
bind
(
this
)
;
this
.
onTimelineDataChanged
=
this
.
onTimelineDataChanged
.
bind
(
this
)
;
this
.
onDetailCloseButtonClick
=
this
.
onDetailCloseButtonClick
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
exports
.
AnimationsTimeline
=
AnimationsTimeline
;
AnimationsTimeline
.
prototype
=
{
init
:
function
(
containerEl
)
{
this
.
win
=
containerEl
.
ownerDocument
.
defaultView
;
this
.
rootWrapperEl
=
containerEl
;
this
.
setupSplitBox
(
)
;
this
.
setupAnimationTimeline
(
)
;
this
.
setupAnimationDetail
(
)
;
this
.
win
.
addEventListener
(
"
resize
"
this
.
onWindowResize
)
;
}
setupSplitBox
:
function
(
)
{
const
browserRequire
=
this
.
win
.
BrowserLoader
(
{
window
:
this
.
win
useOnlyShared
:
true
}
)
.
require
;
const
React
=
browserRequire
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
browserRequire
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
SplitBox
=
React
.
createFactory
(
browserRequire
(
"
devtools
/
client
/
shared
/
components
/
splitter
/
split
-
box
"
)
)
;
const
splitter
=
SplitBox
(
{
className
:
"
animation
-
root
"
splitterSize
:
1
initialHeight
:
"
50
%
"
endPanelControl
:
true
startPanel
:
React
.
DOM
.
div
(
{
className
:
"
animation
-
timeline
"
}
)
endPanel
:
React
.
DOM
.
div
(
{
className
:
"
animation
-
detail
"
}
)
vert
:
false
}
)
;
ReactDOM
.
render
(
splitter
this
.
rootWrapperEl
)
;
this
.
animationRootEl
=
this
.
rootWrapperEl
.
querySelector
(
"
.
animation
-
root
"
)
;
}
setupAnimationTimeline
:
function
(
)
{
const
animationTimelineEl
=
this
.
rootWrapperEl
.
querySelector
(
"
.
animation
-
timeline
"
)
;
let
scrubberContainer
=
createNode
(
{
parent
:
animationTimelineEl
attributes
:
{
"
class
"
:
"
scrubber
-
wrapper
"
}
}
)
;
this
.
scrubberEl
=
createNode
(
{
parent
:
scrubberContainer
attributes
:
{
"
class
"
:
"
scrubber
"
}
}
)
;
this
.
scrubberHandleEl
=
createNode
(
{
parent
:
this
.
scrubberEl
attributes
:
{
"
class
"
:
"
scrubber
-
handle
"
}
}
)
;
createNode
(
{
parent
:
this
.
scrubberHandleEl
attributes
:
{
"
class
"
:
"
scrubber
-
line
"
}
}
)
;
this
.
scrubberHandleEl
.
addEventListener
(
"
mousedown
"
this
.
onScrubberMouseDown
)
;
this
.
headerWrapper
=
createNode
(
{
parent
:
animationTimelineEl
attributes
:
{
"
class
"
:
"
header
-
wrapper
"
}
}
)
;
this
.
timeHeaderEl
=
createNode
(
{
parent
:
this
.
headerWrapper
attributes
:
{
"
class
"
:
"
time
-
header
track
-
container
"
}
}
)
;
this
.
timeHeaderEl
.
addEventListener
(
"
mousedown
"
this
.
onScrubberMouseDown
)
;
this
.
timeTickEl
=
createNode
(
{
parent
:
animationTimelineEl
attributes
:
{
"
class
"
:
"
time
-
body
track
-
container
"
}
}
)
;
this
.
animationsEl
=
createNode
(
{
parent
:
animationTimelineEl
nodeType
:
"
ul
"
attributes
:
{
"
class
"
:
"
animations
devtools
-
monospace
"
}
}
)
;
}
setupAnimationDetail
:
function
(
)
{
const
animationDetailEl
=
this
.
rootWrapperEl
.
querySelector
(
"
.
animation
-
detail
"
)
;
const
animationDetailHeaderEl
=
createNode
(
{
parent
:
animationDetailEl
attributes
:
{
"
class
"
:
"
animation
-
detail
-
header
"
}
}
)
;
const
headerTitleEl
=
createNode
(
{
parent
:
animationDetailHeaderEl
attributes
:
{
"
class
"
:
"
devtools
-
toolbar
"
}
}
)
;
createNode
(
{
parent
:
headerTitleEl
textContent
:
L10N
.
getStr
(
"
detail
.
headerTitle
"
)
}
)
;
this
.
animationAnimationNameEl
=
createNode
(
{
parent
:
headerTitleEl
}
)
;
this
.
animationDetailCloseButton
=
createNode
(
{
parent
:
headerTitleEl
nodeType
:
"
button
"
attributes
:
{
"
class
"
:
"
devtools
-
button
"
title
:
L10N
.
getStr
(
"
detail
.
header
.
closeLabel
"
)
}
}
)
;
this
.
animationDetailCloseButton
.
addEventListener
(
"
click
"
this
.
onDetailCloseButtonClick
)
;
const
animationDetailBodyEl
=
createNode
(
{
parent
:
animationDetailEl
attributes
:
{
"
class
"
:
"
animation
-
detail
-
body
"
}
}
)
;
this
.
animatedPropertiesEl
=
createNode
(
{
parent
:
animationDetailBodyEl
attributes
:
{
"
class
"
:
"
animated
-
properties
"
}
}
)
;
this
.
details
=
new
AnimationDetails
(
this
.
serverTraits
)
;
this
.
details
.
init
(
this
.
animatedPropertiesEl
)
;
}
destroy
:
function
(
)
{
this
.
stopAnimatingScrubber
(
)
;
this
.
unrender
(
)
;
this
.
details
.
destroy
(
)
;
this
.
win
.
removeEventListener
(
"
resize
"
this
.
onWindowResize
)
;
this
.
timeHeaderEl
.
removeEventListener
(
"
mousedown
"
this
.
onScrubberMouseDown
)
;
this
.
scrubberHandleEl
.
removeEventListener
(
"
mousedown
"
this
.
onScrubberMouseDown
)
;
this
.
animationDetailCloseButton
.
removeEventListener
(
"
click
"
this
.
onDetailCloseButtonClick
)
;
this
.
rootWrapperEl
.
remove
(
)
;
this
.
animations
=
[
]
;
this
.
tracksMap
=
null
;
this
.
rootWrapperEl
=
null
;
this
.
timeHeaderEl
=
null
;
this
.
animationsEl
=
null
;
this
.
animatedPropertiesEl
=
null
;
this
.
scrubberEl
=
null
;
this
.
scrubberHandleEl
=
null
;
this
.
win
=
null
;
this
.
inspector
=
null
;
this
.
serverTraits
=
null
;
this
.
animationDetailEl
=
null
;
this
.
animationAnimationNameEl
=
null
;
this
.
animatedPropertiesEl
=
null
;
this
.
animationDetailCloseButton
=
null
;
this
.
animationRootEl
=
null
;
this
.
selectedAnimation
=
null
;
this
.
isDestroyed
=
true
;
}
destroySubComponents
:
function
(
name
handlers
=
[
]
)
{
for
(
let
component
of
this
[
name
]
)
{
for
(
let
{
event
fn
}
of
handlers
)
{
component
.
off
(
event
fn
)
;
}
component
.
destroy
(
)
;
}
this
[
name
]
=
[
]
;
}
unrender
:
function
(
)
{
this
.
unrenderButLeaveDetailsComponent
(
)
;
this
.
details
.
unrender
(
)
;
}
unrenderButLeaveDetailsComponent
:
function
(
)
{
for
(
let
animation
of
this
.
animations
)
{
animation
.
off
(
"
changed
"
this
.
onAnimationStateChanged
)
;
}
this
.
stopAnimatingScrubber
(
)
;
TimeScale
.
reset
(
)
;
this
.
destroySubComponents
(
"
targetNodes
"
)
;
this
.
destroySubComponents
(
"
timeBlocks
"
)
;
this
.
animationsEl
.
innerHTML
=
"
"
;
this
.
off
(
"
timeline
-
data
-
changed
"
this
.
onTimelineDataChanged
)
;
}
onWindowResize
:
function
(
)
{
if
(
this
.
rootWrapperEl
.
offsetWidth
=
=
=
0
)
{
return
;
}
if
(
this
.
windowResizeTimer
)
{
this
.
win
.
clearTimeout
(
this
.
windowResizeTimer
)
;
}
this
.
windowResizeTimer
=
this
.
win
.
setTimeout
(
(
)
=
>
{
this
.
drawHeaderAndBackground
(
)
;
}
TIMELINE_BACKGROUND_RESIZE_DEBOUNCE_TIMER
)
;
}
onAnimationSelected
:
Task
.
async
(
function
*
(
animation
)
{
let
index
=
this
.
animations
.
indexOf
(
animation
)
;
if
(
index
=
=
=
-
1
)
{
return
;
}
const
animationEls
=
this
.
rootWrapperEl
.
querySelectorAll
(
"
.
animation
"
)
;
for
(
let
i
=
0
;
i
<
animationEls
.
length
;
i
+
+
)
{
const
animationEl
=
animationEls
[
i
]
;
if
(
!
animationEl
.
classList
.
contains
(
"
selected
"
)
)
{
continue
;
}
if
(
i
=
=
=
index
)
{
this
.
emit
(
"
animation
-
already
-
selected
"
this
.
animations
[
i
]
)
;
return
;
}
animationEl
.
classList
.
remove
(
"
selected
"
)
;
this
.
emit
(
"
animation
-
unselected
"
this
.
animations
[
i
]
)
;
break
;
}
if
(
!
this
.
animatedPropertiesEl
.
classList
.
contains
(
animation
.
state
.
type
)
)
{
this
.
animatedPropertiesEl
.
className
=
animated
-
properties
{
animation
.
state
.
type
}
;
}
const
selectedAnimationEl
=
animationEls
[
index
]
;
selectedAnimationEl
.
classList
.
add
(
"
selected
"
)
;
this
.
animationRootEl
.
classList
.
add
(
"
animation
-
detail
-
visible
"
)
;
if
(
animation
!
=
=
this
.
details
.
animation
)
{
this
.
selectedAnimation
=
animation
;
yield
this
.
details
.
render
(
animation
this
.
tracksMap
.
get
(
animation
)
)
;
this
.
animationAnimationNameEl
.
textContent
=
getFormattedAnimationTitle
(
animation
)
;
}
this
.
onTimelineDataChanged
(
{
time
:
this
.
currentTime
|
|
0
}
)
;
this
.
emit
(
"
animation
-
selected
"
animation
)
;
}
)
onScrubberMouseDown
:
function
(
e
)
{
this
.
moveScrubberTo
(
e
.
pageX
)
;
this
.
win
.
addEventListener
(
"
mouseup
"
this
.
onScrubberMouseUp
)
;
this
.
win
.
addEventListener
(
"
mouseout
"
this
.
onScrubberMouseOut
)
;
this
.
win
.
addEventListener
(
"
mousemove
"
this
.
onScrubberMouseMove
)
;
e
.
preventDefault
(
)
;
}
onScrubberMouseUp
:
function
(
)
{
this
.
cancelTimeHeaderDragging
(
)
;
}
onScrubberMouseOut
:
function
(
e
)
{
if
(
!
this
.
win
.
document
.
contains
(
e
.
relatedTarget
)
)
{
this
.
cancelTimeHeaderDragging
(
)
;
}
}
cancelTimeHeaderDragging
:
function
(
)
{
this
.
win
.
removeEventListener
(
"
mouseup
"
this
.
onScrubberMouseUp
)
;
this
.
win
.
removeEventListener
(
"
mouseout
"
this
.
onScrubberMouseOut
)
;
this
.
win
.
removeEventListener
(
"
mousemove
"
this
.
onScrubberMouseMove
)
;
}
onScrubberMouseMove
:
function
(
e
)
{
this
.
moveScrubberTo
(
e
.
pageX
)
;
}
moveScrubberTo
:
function
(
pageX
noOffset
)
{
this
.
stopAnimatingScrubber
(
)
;
let
offset
=
pageX
;
if
(
!
noOffset
)
{
offset
-
=
this
.
timeHeaderEl
.
offsetLeft
;
}
offset
=
offset
*
100
/
this
.
timeHeaderEl
.
offsetWidth
;
if
(
offset
<
0
)
{
offset
=
0
;
}
this
.
scrubberEl
.
style
.
left
=
offset
+
"
%
"
;
let
time
=
TimeScale
.
distanceToRelativeTime
(
offset
)
;
this
.
emit
(
"
timeline
-
data
-
changed
"
{
isPaused
:
true
isMoving
:
false
isUserDrag
:
true
time
:
time
}
)
;
}
getCompositorStatusClassName
:
function
(
state
)
{
let
className
=
state
.
isRunningOnCompositor
?
"
fast
-
track
"
:
"
"
;
if
(
state
.
isRunningOnCompositor
&
&
state
.
propertyState
)
{
className
+
=
state
.
propertyState
.
some
(
propState
=
>
!
propState
.
runningOnCompositor
)
?
"
some
-
properties
"
:
"
all
-
properties
"
;
}
return
className
;
}
render
:
Task
.
async
(
function
*
(
animations
documentCurrentTime
)
{
this
.
unrenderButLeaveDetailsComponent
(
)
;
this
.
animations
=
animations
;
if
(
!
this
.
animations
.
length
)
{
this
.
emit
(
"
animation
-
timeline
-
rendering
-
completed
"
)
;
return
;
}
for
(
let
{
state
}
of
animations
)
{
TimeScale
.
addAnimation
(
state
)
;
}
this
.
drawHeaderAndBackground
(
)
;
for
(
let
animation
of
this
.
animations
)
{
animation
.
on
(
"
changed
"
this
.
onAnimationStateChanged
)
;
let
animationEl
=
createNode
(
{
parent
:
this
.
animationsEl
nodeType
:
"
li
"
attributes
:
{
"
class
"
:
"
animation
"
+
animation
.
state
.
type
+
this
.
getCompositorStatusClassName
(
animation
.
state
)
}
}
)
;
let
animatedNodeEl
=
createNode
(
{
parent
:
animationEl
attributes
:
{
"
class
"
:
"
target
"
}
}
)
;
let
targetNode
=
new
AnimationTargetNode
(
this
.
inspector
{
compact
:
true
}
)
;
targetNode
.
init
(
animatedNodeEl
)
;
targetNode
.
render
(
animation
)
;
this
.
targetNodes
.
push
(
targetNode
)
;
let
timeBlockEl
=
createNode
(
{
parent
:
animationEl
attributes
:
{
"
class
"
:
"
time
-
block
track
-
container
"
}
}
)
;
const
tracks
=
yield
this
.
getTracks
(
animation
)
;
if
(
this
.
isDestroyed
)
{
return
;
}
let
timeBlock
=
new
AnimationTimeBlock
(
)
;
timeBlock
.
init
(
timeBlockEl
)
;
timeBlock
.
render
(
animation
tracks
)
;
this
.
timeBlocks
.
push
(
timeBlock
)
;
this
.
tracksMap
.
set
(
animation
tracks
)
;
timeBlock
.
on
(
"
selected
"
this
.
onAnimationSelected
)
;
}
if
(
!
documentCurrentTime
)
{
this
.
scrubberEl
.
style
.
display
=
"
none
"
;
}
else
{
this
.
scrubberEl
.
style
.
display
=
"
block
"
;
this
.
startAnimatingScrubber
(
this
.
wasRewound
(
)
?
TimeScale
.
minStartTime
:
documentCurrentTime
)
;
}
this
.
on
(
"
timeline
-
data
-
changed
"
this
.
onTimelineDataChanged
)
;
if
(
this
.
animations
.
length
=
=
=
1
)
{
yield
this
.
onAnimationSelected
(
this
.
animations
[
0
]
)
;
}
else
if
(
this
.
animationRootEl
.
classList
.
contains
(
"
animation
-
detail
-
visible
"
)
&
&
this
.
animations
.
indexOf
(
this
.
selectedAnimation
)
>
=
0
)
{
yield
this
.
onAnimationSelected
(
this
.
selectedAnimation
)
;
}
else
{
this
.
onDetailCloseButtonClick
(
)
;
}
this
.
emit
(
"
animation
-
timeline
-
rendering
-
completed
"
)
;
}
)
isAtLeastOneAnimationPlaying
:
function
(
)
{
return
this
.
animations
.
some
(
(
{
state
}
)
=
>
state
.
playState
=
=
=
"
running
"
)
;
}
wasRewound
:
function
(
)
{
return
!
this
.
isAtLeastOneAnimationPlaying
(
)
&
&
this
.
animations
.
every
(
(
{
state
}
)
=
>
state
.
currentTime
=
=
=
0
)
;
}
hasInfiniteAnimations
:
function
(
)
{
return
this
.
animations
.
some
(
(
{
state
}
)
=
>
!
state
.
iterationCount
)
;
}
startAnimatingScrubber
:
function
(
time
)
{
let
isOutOfBounds
=
time
<
TimeScale
.
minStartTime
|
|
time
>
TimeScale
.
maxEndTime
;
let
isAllPaused
=
!
this
.
isAtLeastOneAnimationPlaying
(
)
;
let
hasInfinite
=
this
.
hasInfiniteAnimations
(
)
;
let
x
=
TimeScale
.
startTimeToDistance
(
time
)
;
if
(
x
>
100
&
&
!
hasInfinite
)
{
x
=
100
;
}
this
.
scrubberEl
.
style
.
left
=
x
+
"
%
"
;
if
(
isAllPaused
|
|
(
isOutOfBounds
&
&
!
hasInfinite
)
)
{
this
.
stopAnimatingScrubber
(
)
;
this
.
emit
(
"
timeline
-
data
-
changed
"
{
isPaused
:
!
this
.
isAtLeastOneAnimationPlaying
(
)
isMoving
:
false
isUserDrag
:
false
time
:
TimeScale
.
distanceToRelativeTime
(
x
)
}
)
;
return
;
}
this
.
emit
(
"
timeline
-
data
-
changed
"
{
isPaused
:
false
isMoving
:
true
isUserDrag
:
false
time
:
TimeScale
.
distanceToRelativeTime
(
x
)
}
)
;
let
now
=
this
.
win
.
performance
.
now
(
)
;
this
.
rafID
=
this
.
win
.
requestAnimationFrame
(
(
)
=
>
{
if
(
!
this
.
rafID
)
{
return
;
}
this
.
startAnimatingScrubber
(
time
+
this
.
win
.
performance
.
now
(
)
-
now
)
;
}
)
;
}
stopAnimatingScrubber
:
function
(
)
{
if
(
this
.
rafID
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
rafID
)
;
this
.
rafID
=
null
;
}
}
onAnimationStateChanged
:
function
(
)
{
this
.
render
(
this
.
animations
)
;
}
drawHeaderAndBackground
:
function
(
)
{
let
width
=
this
.
timeHeaderEl
.
offsetWidth
;
let
animationDuration
=
TimeScale
.
maxEndTime
-
TimeScale
.
minStartTime
;
let
minTimeInterval
=
TIME_GRADUATION_MIN_SPACING
*
animationDuration
/
width
;
let
intervalLength
=
findOptimalTimeInterval
(
minTimeInterval
)
;
let
intervalWidth
=
intervalLength
*
width
/
animationDuration
;
this
.
timeHeaderEl
.
innerHTML
=
"
"
;
this
.
timeTickEl
.
innerHTML
=
"
"
;
for
(
let
i
=
0
;
i
<
=
width
/
intervalWidth
;
i
+
+
)
{
let
pos
=
100
*
i
*
intervalWidth
/
width
;
createNode
(
{
parent
:
this
.
timeHeaderEl
nodeType
:
"
span
"
attributes
:
{
"
class
"
:
"
header
-
item
"
"
style
"
:
left
:
{
pos
}
%
}
textContent
:
TimeScale
.
formatTime
(
TimeScale
.
distanceToRelativeTime
(
pos
)
)
}
)
;
createNode
(
{
parent
:
this
.
timeTickEl
nodeType
:
"
span
"
attributes
:
{
"
class
"
:
"
time
-
tick
"
"
style
"
:
left
:
{
pos
}
%
}
}
)
;
}
}
onTimelineDataChanged
:
function
(
{
time
}
)
{
this
.
currentTime
=
time
;
const
indicateTime
=
TimeScale
.
minStartTime
=
=
=
Infinity
?
0
:
this
.
currentTime
+
TimeScale
.
minStartTime
;
this
.
details
.
indicateProgress
(
indicateTime
)
;
}
onDetailCloseButtonClick
:
function
(
e
)
{
if
(
!
this
.
animationRootEl
.
classList
.
contains
(
"
animation
-
detail
-
visible
"
)
)
{
return
;
}
this
.
animationRootEl
.
classList
.
remove
(
"
animation
-
detail
-
visible
"
)
;
this
.
emit
(
"
animation
-
detail
-
closed
"
)
;
}
getTracks
:
Task
.
async
(
function
*
(
animation
)
{
let
tracks
=
{
}
;
if
(
this
.
serverTraits
.
hasGetProperties
)
{
let
properties
=
[
]
;
try
{
properties
=
yield
animation
.
getProperties
(
)
;
}
catch
(
e
)
{
if
(
!
this
.
isDestroyed
)
{
throw
e
;
}
}
for
(
let
{
name
values
}
of
properties
)
{
if
(
!
tracks
[
name
]
)
{
tracks
[
name
]
=
[
]
;
}
for
(
let
{
value
offset
easing
distance
}
of
values
)
{
distance
=
distance
?
distance
:
0
;
tracks
[
name
]
.
push
(
{
value
offset
easing
distance
}
)
;
}
}
}
else
{
let
frames
=
[
]
;
try
{
frames
=
yield
animation
.
getFrames
(
)
;
}
catch
(
e
)
{
if
(
!
this
.
isDestroyed
)
{
throw
e
;
}
}
for
(
let
frame
of
frames
)
{
for
(
let
name
in
frame
)
{
if
(
this
.
NON_PROPERTIES
.
indexOf
(
name
)
!
=
-
1
)
{
continue
;
}
const
propertyCSSName
=
getCssPropertyName
(
name
)
;
if
(
!
tracks
[
propertyCSSName
]
)
{
tracks
[
propertyCSSName
]
=
[
]
;
}
tracks
[
propertyCSSName
]
.
push
(
{
value
:
frame
[
name
]
offset
:
frame
.
computedOffset
easing
:
frame
.
easing
distance
:
0
}
)
;
}
}
}
return
tracks
;
}
)
}
;
