"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
createNode
createSVGNode
}
=
require
(
"
devtools
/
client
/
animationinspector
/
utils
"
)
;
const
{
ProgressGraphHelper
getPreferredKeyframesProgressThreshold
}
=
require
(
"
devtools
/
client
/
animationinspector
/
graph
-
helper
.
js
"
)
;
let
LINEAR_GRADIENT_ID_COUNTER
=
0
;
function
Keyframes
(
)
{
EventEmitter
.
decorate
(
this
)
;
}
exports
.
Keyframes
=
Keyframes
;
Keyframes
.
prototype
=
{
init
:
function
(
containerEl
)
{
this
.
containerEl
=
containerEl
;
this
.
keyframesEl
=
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
keyframes
"
}
}
)
;
}
destroy
:
function
(
)
{
this
.
keyframesEl
.
remove
(
)
;
this
.
containerEl
=
this
.
keyframesEl
=
this
.
animation
=
null
;
}
render
:
function
(
{
keyframes
propertyName
animation
animationType
}
)
{
this
.
keyframes
=
keyframes
;
this
.
propertyName
=
propertyName
;
this
.
animation
=
animation
;
const
graphEl
=
createSVGNode
(
{
parent
:
this
.
keyframesEl
nodeType
:
"
svg
"
attributes
:
{
"
preserveAspectRatio
"
:
"
none
"
}
}
)
;
const
totalDuration
=
animation
.
state
.
duration
;
const
strokeHeightForViewBox
=
0
.
5
/
this
.
containerEl
.
clientHeight
;
const
minSegmentDuration
=
totalDuration
/
this
.
containerEl
.
clientWidth
;
graphEl
.
setAttribute
(
"
viewBox
"
0
-
{
1
+
strokeHeightForViewBox
}
{
totalDuration
}
{
1
+
strokeHeightForViewBox
*
2
}
)
;
const
graphHelper
=
new
ProgressGraphHelper
(
this
.
containerEl
.
ownerDocument
.
defaultView
propertyName
animationType
keyframes
totalDuration
)
;
renderPropertyGraph
(
graphEl
totalDuration
minSegmentDuration
getPreferredKeyframesProgressThreshold
(
keyframes
)
graphHelper
)
;
graphHelper
.
destroy
(
)
;
this
.
keyframesEl
.
classList
.
add
(
animation
.
state
.
type
)
;
for
(
let
frame
of
this
.
keyframes
)
{
createNode
(
{
parent
:
this
.
keyframesEl
attributes
:
{
"
class
"
:
"
frame
"
"
style
"
:
left
:
{
frame
.
offset
*
100
}
%
;
"
data
-
offset
"
:
frame
.
offset
"
data
-
property
"
:
propertyName
"
title
"
:
frame
.
value
}
}
)
;
}
}
}
;
function
renderPropertyGraph
(
parentEl
duration
minSegmentDuration
minProgressThreshold
graphHelper
)
{
const
segments
=
graphHelper
.
createPathSegments
(
0
duration
minSegmentDuration
minProgressThreshold
)
;
const
graphType
=
graphHelper
.
getGraphType
(
)
;
if
(
graphType
!
=
=
"
color
"
)
{
graphHelper
.
appendPathElement
(
parentEl
segments
graphType
)
;
return
;
}
segments
.
forEach
(
segment
=
>
{
segment
.
y
=
1
;
}
)
;
const
path
=
graphHelper
.
appendPathElement
(
parentEl
segments
graphType
)
;
const
defEl
=
createSVGNode
(
{
parent
:
parentEl
nodeType
:
"
def
"
}
)
;
const
id
=
color
-
property
-
{
LINEAR_GRADIENT_ID_COUNTER
+
+
}
;
const
linearGradientEl
=
createSVGNode
(
{
parent
:
defEl
nodeType
:
"
linearGradient
"
attributes
:
{
"
id
"
:
id
}
}
)
;
segments
.
forEach
(
segment
=
>
{
createSVGNode
(
{
parent
:
linearGradientEl
nodeType
:
"
stop
"
attributes
:
{
"
stop
-
color
"
:
segment
.
style
"
offset
"
:
segment
.
x
/
duration
}
}
)
;
}
)
;
path
.
style
.
fill
=
url
(
#
{
id
}
)
;
}
