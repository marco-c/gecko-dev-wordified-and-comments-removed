"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
createNode
createSVGNode
TimeScale
getFormattedAnimationTitle
}
=
require
(
"
devtools
/
client
/
animationinspector
/
utils
"
)
;
const
{
createPathSegments
appendPathElement
DEFAULT_MIN_PROGRESS_THRESHOLD
}
=
require
(
"
devtools
/
client
/
animationinspector
/
graph
-
helper
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
animationinspector
.
properties
"
)
;
const
MAX_INFINITE_ANIMATIONS_ITERATIONS
=
10
;
function
AnimationTimeBlock
(
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
}
exports
.
AnimationTimeBlock
=
AnimationTimeBlock
;
AnimationTimeBlock
.
prototype
=
{
init
:
function
(
containerEl
)
{
this
.
containerEl
=
containerEl
;
this
.
containerEl
.
addEventListener
(
"
click
"
this
.
onClick
)
;
}
destroy
:
function
(
)
{
this
.
containerEl
.
removeEventListener
(
"
click
"
this
.
onClick
)
;
this
.
unrender
(
)
;
this
.
containerEl
=
null
;
this
.
animation
=
null
;
}
unrender
:
function
(
)
{
while
(
this
.
containerEl
.
firstChild
)
{
this
.
containerEl
.
firstChild
.
remove
(
)
;
}
}
render
:
function
(
animation
)
{
this
.
unrender
(
)
;
this
.
animation
=
animation
;
let
{
state
}
=
this
.
animation
;
const
{
x
delayX
delayW
endDelayX
endDelayW
}
=
TimeScale
.
getAnimationDimensions
(
animation
)
;
const
summaryEl
=
createSVGNode
(
{
parent
:
this
.
containerEl
nodeType
:
"
svg
"
attributes
:
{
"
class
"
:
"
summary
"
"
preserveAspectRatio
"
:
"
none
"
"
style
"
:
left
:
{
x
-
(
state
.
delay
>
0
?
delayW
:
0
)
}
%
}
}
)
;
const
totalDisplayedDuration
=
state
.
playbackRate
*
TimeScale
.
getDuration
(
)
;
const
strokeHeightForViewBox
=
0
.
5
/
this
.
containerEl
.
clientHeight
;
summaryEl
.
setAttribute
(
"
viewBox
"
{
state
.
delay
<
0
?
state
.
delay
:
0
}
-
{
1
+
strokeHeightForViewBox
}
{
totalDisplayedDuration
}
{
1
+
strokeHeightForViewBox
*
2
}
)
;
const
segmentHelper
=
getSegmentHelper
(
state
this
.
win
)
;
const
minSegmentDuration
=
totalDisplayedDuration
/
this
.
containerEl
.
clientWidth
;
let
minProgressThreshold
=
DEFAULT_MIN_PROGRESS_THRESHOLD
;
const
stepFunction
=
state
.
easing
.
match
(
/
steps
\
(
(
\
d
+
)
/
)
;
if
(
stepFunction
)
{
minProgressThreshold
=
1
/
(
parseInt
(
stepFunction
[
1
]
10
)
+
1
)
;
}
let
mainIterationStartTime
=
0
;
let
iterationStart
=
state
.
iterationStart
;
let
iterationCount
=
state
.
iterationCount
?
state
.
iterationCount
:
Infinity
;
if
(
state
.
delay
>
0
)
{
renderDelay
(
summaryEl
state
segmentHelper
)
;
mainIterationStartTime
=
state
.
delay
;
}
else
{
const
negativeDelayCount
=
-
state
.
delay
/
state
.
duration
;
iterationStart
+
=
negativeDelayCount
;
if
(
iterationCount
!
=
=
Infinity
)
{
iterationCount
-
=
negativeDelayCount
;
}
}
const
firstSectionCount
=
iterationStart
%
1
=
=
=
0
?
0
:
Math
.
min
(
iterationCount
1
)
-
iterationStart
%
1
;
if
(
firstSectionCount
)
{
renderFirstIteration
(
summaryEl
state
mainIterationStartTime
firstSectionCount
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
}
if
(
iterationCount
=
=
=
Infinity
)
{
renderInfinity
(
summaryEl
state
mainIterationStartTime
firstSectionCount
totalDisplayedDuration
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
}
else
{
if
(
state
.
fill
=
=
=
"
both
"
|
|
state
.
fill
=
=
=
"
forwards
"
)
{
renderForwardsFill
(
summaryEl
state
mainIterationStartTime
iterationCount
totalDisplayedDuration
segmentHelper
)
;
}
const
middleSectionCount
=
Math
.
floor
(
iterationCount
-
firstSectionCount
)
;
renderMiddleIterations
(
summaryEl
state
mainIterationStartTime
firstSectionCount
middleSectionCount
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
const
lastSectionCount
=
iterationCount
-
middleSectionCount
-
firstSectionCount
;
if
(
lastSectionCount
)
{
renderLastIteration
(
summaryEl
state
mainIterationStartTime
firstSectionCount
middleSectionCount
lastSectionCount
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
}
if
(
state
.
endDelay
>
0
)
{
renderEndDelay
(
summaryEl
state
mainIterationStartTime
iterationCount
segmentHelper
)
;
}
}
if
(
state
.
delay
<
0
)
{
segmentHelper
.
animation
.
effect
.
timing
.
fill
=
"
both
"
;
segmentHelper
.
asOriginalBehavior
=
false
;
renderNegativeDelayHiddenProgress
(
summaryEl
state
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
}
if
(
state
.
iterationCount
&
&
state
.
endDelay
<
0
)
{
if
(
segmentHelper
.
asOriginalBehavior
)
{
segmentHelper
.
animation
.
effect
.
timing
.
fill
=
"
both
"
;
segmentHelper
.
asOriginalBehavior
=
false
;
}
renderNegativeEndDelayHiddenProgress
(
summaryEl
state
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
}
createNode
(
{
parent
:
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
name
"
"
title
"
:
this
.
getTooltipText
(
state
)
}
}
)
textContent
:
state
.
name
}
)
;
if
(
state
.
delay
)
{
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
delay
"
+
(
state
.
delay
<
0
?
"
negative
"
:
"
positive
"
)
+
(
state
.
fill
=
=
=
"
both
"
|
|
state
.
fill
=
=
=
"
backwards
"
?
"
fill
"
:
"
"
)
"
style
"
:
left
:
{
delayX
}
%
;
width
:
{
delayW
}
%
;
}
}
)
;
}
if
(
state
.
iterationCount
&
&
state
.
endDelay
)
{
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
end
-
delay
"
+
(
state
.
endDelay
<
0
?
"
negative
"
:
"
positive
"
)
+
(
state
.
fill
=
=
=
"
both
"
|
|
state
.
fill
=
=
=
"
forwards
"
?
"
fill
"
:
"
"
)
"
style
"
:
left
:
{
endDelayX
}
%
;
width
:
{
endDelayW
}
%
;
}
}
)
;
}
}
getTooltipText
:
function
(
state
)
{
let
getTime
=
time
=
>
L10N
.
getFormatStr
(
"
player
.
timeLabel
"
L10N
.
numberWithDecimals
(
time
/
1000
2
)
)
;
let
text
=
"
"
;
text
+
=
getFormattedAnimationTitle
(
{
state
}
)
;
text
+
=
"
\
n
"
;
if
(
state
.
delay
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationDelayLabel
"
)
+
"
"
;
text
+
=
getTime
(
state
.
delay
)
;
text
+
=
"
\
n
"
;
}
text
+
=
L10N
.
getStr
(
"
player
.
animationDurationLabel
"
)
+
"
"
;
text
+
=
getTime
(
state
.
duration
)
;
text
+
=
"
\
n
"
;
if
(
state
.
endDelay
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationEndDelayLabel
"
)
+
"
"
;
text
+
=
getTime
(
state
.
endDelay
)
;
text
+
=
"
\
n
"
;
}
if
(
state
.
iterationCount
!
=
=
1
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationIterationCountLabel
"
)
+
"
"
;
text
+
=
state
.
iterationCount
|
|
L10N
.
getStr
(
"
player
.
infiniteIterationCountText
"
)
;
text
+
=
"
\
n
"
;
}
if
(
state
.
iterationStart
!
=
=
0
)
{
let
iterationStartTime
=
state
.
iterationStart
*
state
.
duration
/
1000
;
text
+
=
L10N
.
getFormatStr
(
"
player
.
animationIterationStartLabel
"
state
.
iterationStart
L10N
.
numberWithDecimals
(
iterationStartTime
2
)
)
;
text
+
=
"
\
n
"
;
}
if
(
state
.
easing
&
&
state
.
easing
!
=
=
"
linear
"
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationOverallEasingLabel
"
)
+
"
"
;
text
+
=
state
.
easing
;
text
+
=
"
\
n
"
;
}
if
(
state
.
fill
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationFillLabel
"
)
+
"
"
;
text
+
=
state
.
fill
;
text
+
=
"
\
n
"
;
}
if
(
state
.
direction
&
&
state
.
direction
!
=
=
"
normal
"
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationDirectionLabel
"
)
+
"
"
;
text
+
=
state
.
direction
;
text
+
=
"
\
n
"
;
}
if
(
state
.
playbackRate
!
=
=
1
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationRateLabel
"
)
+
"
"
;
text
+
=
state
.
playbackRate
;
text
+
=
"
\
n
"
;
}
if
(
state
.
propertyState
)
{
if
(
state
.
propertyState
.
every
(
propState
=
>
propState
.
runningOnCompositor
)
)
{
text
+
=
L10N
.
getStr
(
"
player
.
allPropertiesOnCompositorTooltip
"
)
;
}
else
if
(
state
.
propertyState
.
some
(
propState
=
>
propState
.
runningOnCompositor
)
)
{
text
+
=
L10N
.
getStr
(
"
player
.
somePropertiesOnCompositorTooltip
"
)
;
}
}
else
if
(
state
.
isRunningOnCompositor
)
{
text
+
=
L10N
.
getStr
(
"
player
.
runningOnCompositorTooltip
"
)
;
}
return
text
;
}
onClick
:
function
(
e
)
{
e
.
stopPropagation
(
)
;
this
.
emit
(
"
selected
"
this
.
animation
)
;
}
get
win
(
)
{
return
this
.
containerEl
.
ownerDocument
.
defaultView
;
}
}
;
function
renderDelay
(
parentEl
state
segmentHelper
)
{
const
startSegment
=
segmentHelper
.
getSegment
(
0
)
;
const
endSegment
=
{
x
:
state
.
delay
y
:
startSegment
.
y
}
;
appendPathElement
(
parentEl
[
startSegment
endSegment
]
"
delay
-
path
"
)
;
}
function
renderFirstIteration
(
parentEl
state
mainIterationStartTime
firstSectionCount
minSegmentDuration
minProgressThreshold
segmentHelper
)
{
const
startTime
=
mainIterationStartTime
;
const
endTime
=
startTime
+
firstSectionCount
*
state
.
duration
;
const
segments
=
createPathSegments
(
startTime
endTime
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
appendPathElement
(
parentEl
segments
"
iteration
-
path
"
)
;
}
function
renderMiddleIterations
(
parentEl
state
mainIterationStartTime
firstSectionCount
middleSectionCount
minSegmentDuration
minProgressThreshold
segmentHelper
)
{
const
offset
=
mainIterationStartTime
+
firstSectionCount
*
state
.
duration
;
for
(
let
i
=
0
;
i
<
middleSectionCount
;
i
+
+
)
{
const
startTime
=
offset
+
i
*
state
.
duration
;
const
endTime
=
startTime
+
state
.
duration
;
const
segments
=
createPathSegments
(
startTime
endTime
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
appendPathElement
(
parentEl
segments
"
iteration
-
path
"
)
;
}
}
function
renderLastIteration
(
parentEl
state
mainIterationStartTime
firstSectionCount
middleSectionCount
lastSectionCount
minSegmentDuration
minProgressThreshold
segmentHelper
)
{
const
startTime
=
mainIterationStartTime
+
(
firstSectionCount
+
middleSectionCount
)
*
state
.
duration
;
const
endTime
=
startTime
+
lastSectionCount
*
state
.
duration
;
const
segments
=
createPathSegments
(
startTime
endTime
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
appendPathElement
(
parentEl
segments
"
iteration
-
path
"
)
;
}
function
renderInfinity
(
parentEl
state
mainIterationStartTime
firstSectionCount
totalDuration
minSegmentDuration
minProgressThreshold
segmentHelper
)
{
let
uncappedInfinityIterationCount
=
(
totalDuration
-
firstSectionCount
*
state
.
duration
)
/
state
.
duration
;
uncappedInfinityIterationCount
=
parseFloat
(
uncappedInfinityIterationCount
.
toPrecision
(
6
)
)
;
const
infinityIterationCount
=
Math
.
min
(
MAX_INFINITE_ANIMATIONS_ITERATIONS
Math
.
ceil
(
uncappedInfinityIterationCount
)
)
;
const
firstStartTime
=
mainIterationStartTime
+
firstSectionCount
*
state
.
duration
;
const
firstEndTime
=
firstStartTime
+
state
.
duration
;
const
firstSegments
=
createPathSegments
(
firstStartTime
firstEndTime
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
appendPathElement
(
parentEl
firstSegments
"
iteration
-
path
infinity
"
)
;
const
isAlternate
=
state
.
direction
.
match
(
/
alternate
/
)
;
for
(
let
i
=
1
;
i
<
infinityIterationCount
;
i
+
+
)
{
const
startTime
=
firstStartTime
+
i
*
state
.
duration
;
let
segments
;
if
(
isAlternate
&
&
i
%
2
)
{
segments
=
firstSegments
.
map
(
segment
=
>
{
return
{
x
:
firstEndTime
-
segment
.
x
+
startTime
y
:
segment
.
y
}
;
}
)
;
}
else
{
segments
=
firstSegments
.
map
(
segment
=
>
{
return
{
x
:
segment
.
x
-
firstStartTime
+
startTime
y
:
segment
.
y
}
;
}
)
;
}
appendPathElement
(
parentEl
segments
"
iteration
-
path
infinity
copied
"
)
;
}
}
function
renderEndDelay
(
parentEl
state
mainIterationStartTime
iterationCount
segmentHelper
)
{
const
startTime
=
mainIterationStartTime
+
iterationCount
*
state
.
duration
;
const
startSegment
=
segmentHelper
.
getSegment
(
startTime
)
;
const
endSegment
=
{
x
:
startTime
+
state
.
endDelay
y
:
startSegment
.
y
}
;
appendPathElement
(
parentEl
[
startSegment
endSegment
]
"
enddelay
-
path
"
)
;
}
function
renderForwardsFill
(
parentEl
state
mainIterationStartTime
iterationCount
totalDuration
segmentHelper
)
{
const
startTime
=
mainIterationStartTime
+
iterationCount
*
state
.
duration
+
(
state
.
endDelay
>
0
?
state
.
endDelay
:
0
)
;
const
startSegment
=
segmentHelper
.
getSegment
(
startTime
)
;
const
endSegment
=
{
x
:
totalDuration
y
:
startSegment
.
y
}
;
appendPathElement
(
parentEl
[
startSegment
endSegment
]
"
fill
-
forwards
-
path
"
)
;
}
function
renderNegativeDelayHiddenProgress
(
parentEl
state
minSegmentDuration
minProgressThreshold
segmentHelper
)
{
const
startTime
=
state
.
delay
;
const
endTime
=
0
;
const
segments
=
createPathSegments
(
startTime
endTime
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
appendPathElement
(
parentEl
segments
"
delay
-
path
negative
"
)
;
}
function
renderNegativeEndDelayHiddenProgress
(
parentEl
state
minSegmentDuration
minProgressThreshold
segmentHelper
)
{
const
endTime
=
state
.
delay
+
state
.
iterationCount
*
state
.
duration
;
const
startTime
=
endTime
+
state
.
endDelay
;
const
segments
=
createPathSegments
(
startTime
endTime
minSegmentDuration
minProgressThreshold
segmentHelper
)
;
appendPathElement
(
parentEl
segments
"
enddelay
-
path
negative
"
)
;
}
function
getSegmentHelper
(
state
win
)
{
const
timing
=
Object
.
assign
(
{
}
state
{
iterations
:
state
.
iterationCount
?
state
.
iterationCount
:
Infinity
}
)
;
const
dummyAnimation
=
new
win
.
Animation
(
new
win
.
KeyframeEffect
(
null
null
timing
)
null
)
;
return
{
animation
:
dummyAnimation
endTime
:
dummyAnimation
.
effect
.
getComputedTiming
(
)
.
endTime
asOriginalBehavior
:
true
getSegment
:
function
(
time
)
{
if
(
this
.
asOriginalBehavior
)
{
if
(
time
<
0
)
{
return
{
x
:
time
y
:
0
}
;
}
this
.
animation
.
currentTime
=
time
<
this
.
endTime
?
time
:
this
.
endTime
;
}
else
{
this
.
animation
.
currentTime
=
time
;
}
const
progress
=
this
.
animation
.
effect
.
getComputedTiming
(
)
.
progress
;
return
{
x
:
time
y
:
Math
.
max
(
progress
0
)
}
;
}
}
;
}
