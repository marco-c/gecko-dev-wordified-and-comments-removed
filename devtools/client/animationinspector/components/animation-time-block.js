"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
createNode
TimeScale
}
=
require
(
"
devtools
/
client
/
animationinspector
/
utils
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
locale
/
animationinspector
.
properties
"
)
;
const
DURATION_RESOLUTION
=
4
;
const
MIN_PROGRESS_THRESHOLD
=
0
.
1
;
const
SVG_NS
=
"
http
:
/
/
www
.
w3
.
org
/
2000
/
svg
"
;
const
FADE_MASK_ID
=
"
animationinspector
-
fade
-
mask
"
;
const
FADE_GRADIENT_ID
=
"
animationinspector
-
fade
-
gradient
"
;
function
AnimationTimeBlock
(
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
}
exports
.
AnimationTimeBlock
=
AnimationTimeBlock
;
AnimationTimeBlock
.
prototype
=
{
init
:
function
(
containerEl
)
{
this
.
containerEl
=
containerEl
;
this
.
containerEl
.
addEventListener
(
"
click
"
this
.
onClick
)
;
}
destroy
:
function
(
)
{
this
.
containerEl
.
removeEventListener
(
"
click
"
this
.
onClick
)
;
this
.
unrender
(
)
;
this
.
containerEl
=
null
;
this
.
animation
=
null
;
}
unrender
:
function
(
)
{
while
(
this
.
containerEl
.
firstChild
)
{
this
.
containerEl
.
firstChild
.
remove
(
)
;
}
}
render
:
function
(
animation
)
{
this
.
unrender
(
)
;
this
.
animation
=
animation
;
let
{
state
}
=
this
.
animation
;
let
{
x
iterationW
delayX
delayW
negativeDelayW
endDelayX
endDelayW
}
=
TimeScale
.
getAnimationDimensions
(
animation
)
;
let
backgroundIterations
=
TimeScale
.
getIterationsBackgroundData
(
animation
)
;
const
totalDuration
=
TimeScale
.
getDuration
(
)
*
state
.
playbackRate
;
const
segmentHelperFn
=
getSegmentHelper
(
state
this
.
win
)
;
const
minSegmentDuration
=
totalDuration
/
this
.
containerEl
.
clientWidth
;
let
minProgressThreshold
=
MIN_PROGRESS_THRESHOLD
;
const
stepFunction
=
state
.
easing
.
match
(
/
steps
\
(
(
\
d
+
)
/
)
;
if
(
stepFunction
)
{
minProgressThreshold
=
1
/
(
parseInt
(
stepFunction
[
1
]
10
)
+
1
)
;
}
const
strokeHeightForViewBox
=
0
.
5
/
this
.
containerEl
.
clientHeight
;
const
summaryEl
=
createNode
(
{
parent
:
this
.
containerEl
namespace
:
SVG_NS
nodeType
:
"
svg
"
attributes
:
{
"
class
"
:
"
summary
"
"
viewBox
"
:
{
state
.
delay
<
0
?
state
.
delay
:
0
}
-
{
1
+
strokeHeightForViewBox
}
{
totalDuration
}
{
1
+
strokeHeightForViewBox
*
2
}
"
preserveAspectRatio
"
:
"
none
"
"
style
"
:
left
:
{
x
-
(
state
.
delay
>
0
?
delayW
:
0
)
}
%
;
}
}
)
;
const
iterationCount
=
state
.
iterationCount
?
state
.
iterationCount
:
1
;
if
(
state
.
fill
=
=
=
"
both
"
|
|
state
.
fill
=
=
=
"
forwards
"
)
{
renderForwardsFill
(
summaryEl
state
iterationCount
totalDuration
segmentHelperFn
)
;
}
if
(
state
.
delay
>
0
)
{
renderDelay
(
summaryEl
state
segmentHelperFn
)
;
}
const
firstSectionCount
=
state
.
iterationStart
%
1
=
=
=
0
?
0
:
Math
.
min
(
iterationCount
1
)
-
state
.
iterationStart
%
1
;
if
(
firstSectionCount
)
{
renderFirstIteration
(
summaryEl
state
firstSectionCount
minSegmentDuration
minProgressThreshold
segmentHelperFn
)
;
}
const
middleSectionCount
=
Math
.
floor
(
state
.
iterationCount
-
firstSectionCount
)
;
renderMiddleIterations
(
summaryEl
state
firstSectionCount
middleSectionCount
minSegmentDuration
minProgressThreshold
segmentHelperFn
)
;
const
lastSectionCount
=
iterationCount
-
middleSectionCount
-
firstSectionCount
;
if
(
lastSectionCount
)
{
renderLastIteration
(
summaryEl
state
firstSectionCount
middleSectionCount
lastSectionCount
minSegmentDuration
minProgressThreshold
segmentHelperFn
)
;
}
if
(
state
.
endDelay
>
0
)
{
renderEndDelay
(
summaryEl
state
iterationCount
segmentHelperFn
)
;
}
createNode
(
{
parent
:
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
name
"
"
title
"
:
this
.
getTooltipText
(
state
)
"
style
"
:
left
:
{
x
+
negativeDelayW
}
%
;
width
:
{
iterationW
-
negativeDelayW
}
%
;
}
}
)
textContent
:
state
.
name
}
)
;
if
(
state
.
delay
)
{
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
delay
"
+
(
state
.
delay
<
0
?
"
negative
"
:
"
"
)
"
style
"
:
left
:
{
delayX
}
%
;
width
:
{
delayW
}
%
;
}
}
)
;
}
if
(
state
.
endDelay
)
{
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
end
-
delay
"
+
(
state
.
endDelay
<
0
?
"
negative
"
:
"
"
)
"
style
"
:
left
:
{
endDelayX
}
%
;
width
:
{
endDelayW
}
%
;
}
}
)
;
}
}
getTooltipText
:
function
(
state
)
{
let
getTime
=
time
=
>
L10N
.
getFormatStr
(
"
player
.
timeLabel
"
L10N
.
numberWithDecimals
(
time
/
1000
2
)
)
;
let
text
=
"
"
;
text
+
=
getFormattedAnimationTitle
(
{
state
}
)
;
text
+
=
"
\
n
"
;
if
(
state
.
delay
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationDelayLabel
"
)
+
"
"
;
text
+
=
getTime
(
state
.
delay
)
;
text
+
=
"
\
n
"
;
}
text
+
=
L10N
.
getStr
(
"
player
.
animationDurationLabel
"
)
+
"
"
;
text
+
=
getTime
(
state
.
duration
)
;
text
+
=
"
\
n
"
;
if
(
state
.
endDelay
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationEndDelayLabel
"
)
+
"
"
;
text
+
=
getTime
(
state
.
endDelay
)
;
text
+
=
"
\
n
"
;
}
if
(
state
.
iterationCount
!
=
=
1
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationIterationCountLabel
"
)
+
"
"
;
text
+
=
state
.
iterationCount
|
|
L10N
.
getStr
(
"
player
.
infiniteIterationCountText
"
)
;
text
+
=
"
\
n
"
;
}
if
(
state
.
iterationStart
!
=
=
0
)
{
let
iterationStartTime
=
state
.
iterationStart
*
state
.
duration
/
1000
;
text
+
=
L10N
.
getFormatStr
(
"
player
.
animationIterationStartLabel
"
state
.
iterationStart
L10N
.
numberWithDecimals
(
iterationStartTime
2
)
)
;
text
+
=
"
\
n
"
;
}
if
(
state
.
playbackRate
!
=
=
1
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationRateLabel
"
)
+
"
"
;
text
+
=
state
.
playbackRate
;
text
+
=
"
\
n
"
;
}
if
(
state
.
propertyState
)
{
if
(
state
.
propertyState
.
every
(
propState
=
>
propState
.
runningOnCompositor
)
)
{
text
+
=
L10N
.
getStr
(
"
player
.
allPropertiesOnCompositorTooltip
"
)
;
}
else
if
(
state
.
propertyState
.
some
(
propState
=
>
propState
.
runningOnCompositor
)
)
{
text
+
=
L10N
.
getStr
(
"
player
.
somePropertiesOnCompositorTooltip
"
)
;
}
}
else
if
(
state
.
isRunningOnCompositor
)
{
text
+
=
L10N
.
getStr
(
"
player
.
runningOnCompositorTooltip
"
)
;
}
return
text
;
}
onClick
:
function
(
e
)
{
e
.
stopPropagation
(
)
;
this
.
emit
(
"
selected
"
this
.
animation
)
;
}
get
win
(
)
{
return
this
.
containerEl
.
ownerDocument
.
defaultView
;
}
}
;
function
getFormattedAnimationTitle
(
{
state
}
)
{
if
(
!
state
.
type
)
{
return
state
.
name
;
}
if
(
state
.
type
=
=
=
"
scriptanimation
"
&
&
!
state
.
name
)
{
return
L10N
.
getStr
(
"
timeline
.
scriptanimation
.
unnamedLabel
"
)
;
}
return
L10N
.
getFormatStr
(
timeline
.
{
state
.
type
}
.
nameLabel
state
.
name
)
;
}
function
renderDelay
(
parentEl
state
getSegment
)
{
const
startSegment
=
getSegment
(
0
)
;
const
endSegment
=
{
x
:
state
.
delay
y
:
startSegment
.
y
}
;
appendPathElement
(
parentEl
[
startSegment
endSegment
]
"
delay
-
path
"
)
;
}
function
renderFirstIteration
(
parentEl
state
firstSectionCount
minSegmentDuration
minProgressThreshold
getSegment
)
{
const
startTime
=
state
.
delay
;
const
endTime
=
startTime
+
firstSectionCount
*
state
.
duration
;
const
segments
=
createPathSegments
(
startTime
endTime
minSegmentDuration
minProgressThreshold
getSegment
)
;
appendPathElement
(
parentEl
segments
"
iteration
-
path
"
)
;
}
function
renderMiddleIterations
(
parentEl
state
firstSectionCount
middleSectionCount
minSegmentDuration
minProgressThreshold
getSegment
)
{
const
offset
=
state
.
delay
+
firstSectionCount
*
state
.
duration
;
for
(
let
i
=
0
;
i
<
middleSectionCount
;
i
+
+
)
{
const
startTime
=
offset
+
i
*
state
.
duration
;
const
endTime
=
startTime
+
state
.
duration
;
const
segments
=
createPathSegments
(
startTime
endTime
minSegmentDuration
minProgressThreshold
getSegment
)
;
appendPathElement
(
parentEl
segments
"
iteration
-
path
"
)
;
}
}
function
renderLastIteration
(
parentEl
state
firstSectionCount
middleSectionCount
lastSectionCount
minSegmentDuration
minProgressThreshold
getSegment
)
{
const
startTime
=
state
.
delay
+
firstSectionCount
*
state
.
duration
+
middleSectionCount
*
state
.
duration
;
const
endTime
=
startTime
+
lastSectionCount
*
state
.
duration
;
const
segments
=
createPathSegments
(
startTime
endTime
minSegmentDuration
minProgressThreshold
getSegment
)
;
appendPathElement
(
parentEl
segments
"
iteration
-
path
"
)
;
}
function
renderEndDelay
(
parentEl
state
iterationCount
getSegment
)
{
const
startTime
=
state
.
delay
+
iterationCount
*
state
.
duration
;
const
startSegment
=
getSegment
(
startTime
)
;
const
endSegment
=
{
x
:
startTime
+
state
.
endDelay
y
:
startSegment
.
y
}
;
appendPathElement
(
parentEl
[
startSegment
endSegment
]
"
enddelay
-
path
"
)
;
}
function
renderForwardsFill
(
parentEl
state
iterationCount
totalDuration
getSegment
)
{
const
startTime
=
state
.
delay
+
iterationCount
*
state
.
duration
+
(
state
.
endDelay
>
0
?
state
.
endDelay
:
0
)
;
const
startSegment
=
getSegment
(
startTime
)
;
const
endSegment
=
{
x
:
totalDuration
y
:
startSegment
.
y
}
;
const
pathEl
=
appendPathElement
(
parentEl
[
startSegment
endSegment
]
"
fill
-
forwards
-
path
"
)
;
appendFadeEffect
(
parentEl
pathEl
)
;
}
function
getSegmentHelper
(
state
win
)
{
const
timing
=
Object
.
assign
(
{
}
state
{
iterations
:
state
.
iterationCount
?
state
.
iterationCount
:
1
}
)
;
const
dummyAnimation
=
new
win
.
Animation
(
new
win
.
KeyframeEffect
(
null
null
timing
)
null
)
;
const
endTime
=
dummyAnimation
.
effect
.
getComputedTiming
(
)
.
endTime
;
return
time
=
>
{
if
(
time
<
0
)
{
return
{
x
:
time
y
:
0
}
;
}
dummyAnimation
.
currentTime
=
time
<
endTime
?
time
:
endTime
;
const
progress
=
dummyAnimation
.
effect
.
getComputedTiming
(
)
.
progress
;
return
{
x
:
time
y
:
Math
.
max
(
progress
0
)
}
;
}
;
}
function
createPathSegments
(
startTime
endTime
minSegmentDuration
minProgressThreshold
getSegment
)
{
if
(
endTime
-
startTime
<
minSegmentDuration
)
{
return
[
getSegment
(
startTime
)
getSegment
(
endTime
)
]
;
}
let
pathSegments
=
[
]
;
const
startTimeSegment
=
getSegment
(
startTime
)
;
pathSegments
.
push
(
startTimeSegment
)
;
let
previousSegment
=
startTimeSegment
;
const
interval
=
(
endTime
-
startTime
)
/
DURATION_RESOLUTION
;
for
(
let
index
=
1
;
index
<
=
DURATION_RESOLUTION
;
index
+
+
)
{
const
currentSegment
=
getSegment
(
startTime
+
index
*
interval
)
;
if
(
Math
.
abs
(
currentSegment
.
y
-
previousSegment
.
y
)
>
minProgressThreshold
)
{
pathSegments
=
pathSegments
.
concat
(
createPathSegments
(
previousSegment
.
x
+
1
currentSegment
.
x
-
1
minSegmentDuration
minProgressThreshold
getSegment
)
)
;
}
pathSegments
.
push
(
currentSegment
)
;
previousSegment
=
currentSegment
;
}
return
pathSegments
;
}
function
appendPathElement
(
parentEl
pathSegments
cls
)
{
let
path
=
M
{
pathSegments
[
0
]
.
x
}
0
;
pathSegments
.
forEach
(
pathSegment
=
>
{
path
+
=
L
{
pathSegment
.
x
}
{
pathSegment
.
y
}
;
}
)
;
path
+
=
L
{
pathSegments
[
pathSegments
.
length
-
1
]
.
x
}
0
Z
;
return
createNode
(
{
parent
:
parentEl
namespace
:
SVG_NS
nodeType
:
"
path
"
attributes
:
{
"
d
"
:
path
"
class
"
:
cls
"
vector
-
effect
"
:
"
non
-
scaling
-
stroke
"
"
transform
"
:
"
scale
(
1
-
1
)
"
}
}
)
;
}
function
appendFadeEffect
(
parentEl
el
)
{
if
(
!
parentEl
.
ownerDocument
.
body
.
querySelector
(
#
{
FADE_MASK_ID
}
)
)
{
const
svgEl
=
parentEl
.
closest
(
"
.
summary
"
)
;
const
defsEl
=
createNode
(
{
parent
:
svgEl
namespace
:
SVG_NS
nodeType
:
"
defs
"
}
)
;
const
gradientEl
=
createNode
(
{
parent
:
defsEl
namespace
:
SVG_NS
nodeType
:
"
linearGradient
"
attributes
:
{
"
id
"
:
FADE_GRADIENT_ID
}
}
)
;
createNode
(
{
parent
:
gradientEl
namespace
:
SVG_NS
nodeType
:
"
stop
"
attributes
:
{
"
offset
"
:
0
}
}
)
;
createNode
(
{
parent
:
gradientEl
namespace
:
SVG_NS
nodeType
:
"
stop
"
attributes
:
{
"
offset
"
:
1
}
}
)
;
const
maskEl
=
createNode
(
{
parent
:
defsEl
namespace
:
SVG_NS
nodeType
:
"
mask
"
attributes
:
{
"
id
"
:
FADE_MASK_ID
"
maskContentUnits
"
:
"
objectBoundingBox
"
}
}
)
;
createNode
(
{
parent
:
maskEl
namespace
:
SVG_NS
nodeType
:
"
rect
"
attributes
:
{
"
y
"
:
{
1
+
svgEl
.
viewBox
.
animVal
.
y
}
"
width
"
:
"
1
"
"
height
"
:
{
svgEl
.
viewBox
.
animVal
.
height
}
"
fill
"
:
url
(
#
{
FADE_GRADIENT_ID
}
)
}
}
)
;
}
el
.
setAttribute
(
"
mask
"
url
(
#
{
FADE_MASK_ID
}
)
)
;
}
