"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
createNode
TimeScale
}
=
require
(
"
devtools
/
client
/
animationinspector
/
utils
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
locale
/
animationinspector
.
properties
"
)
;
function
AnimationTimeBlock
(
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
}
exports
.
AnimationTimeBlock
=
AnimationTimeBlock
;
AnimationTimeBlock
.
prototype
=
{
init
:
function
(
containerEl
)
{
this
.
containerEl
=
containerEl
;
this
.
containerEl
.
addEventListener
(
"
click
"
this
.
onClick
)
;
}
destroy
:
function
(
)
{
this
.
containerEl
.
removeEventListener
(
"
click
"
this
.
onClick
)
;
this
.
unrender
(
)
;
this
.
containerEl
=
null
;
this
.
animation
=
null
;
}
unrender
:
function
(
)
{
while
(
this
.
containerEl
.
firstChild
)
{
this
.
containerEl
.
firstChild
.
remove
(
)
;
}
}
render
:
function
(
animation
)
{
this
.
unrender
(
)
;
this
.
animation
=
animation
;
let
{
state
}
=
this
.
animation
;
let
{
x
iterationW
delayX
delayW
negativeDelayW
endDelayX
endDelayW
}
=
TimeScale
.
getAnimationDimensions
(
animation
)
;
let
backgroundIterations
=
TimeScale
.
getIterationsBackgroundData
(
animation
)
;
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
iterations
"
+
(
state
.
iterationCount
?
"
"
:
"
infinite
"
)
"
style
"
:
left
:
{
x
}
%
;
width
:
{
iterationW
}
%
;
background
-
size
:
{
backgroundIterations
.
size
}
%
100
%
;
background
-
position
:
{
backgroundIterations
.
position
}
%
0
;
background
-
repeat
:
{
backgroundIterations
.
repeat
}
;
}
}
)
;
createNode
(
{
parent
:
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
name
"
"
title
"
:
this
.
getTooltipText
(
state
)
"
style
"
:
left
:
{
x
+
negativeDelayW
}
%
;
width
:
{
iterationW
-
negativeDelayW
}
%
;
}
}
)
textContent
:
state
.
name
}
)
;
if
(
state
.
delay
)
{
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
delay
"
+
(
state
.
delay
<
0
?
"
negative
"
:
"
"
)
"
style
"
:
left
:
{
delayX
}
%
;
width
:
{
delayW
}
%
;
}
}
)
;
}
if
(
state
.
endDelay
)
{
createNode
(
{
parent
:
this
.
containerEl
attributes
:
{
"
class
"
:
"
end
-
delay
"
+
(
state
.
endDelay
<
0
?
"
negative
"
:
"
"
)
"
style
"
:
left
:
{
endDelayX
}
%
;
width
:
{
endDelayW
}
%
;
}
}
)
;
}
}
getTooltipText
:
function
(
state
)
{
let
getTime
=
time
=
>
L10N
.
getFormatStr
(
"
player
.
timeLabel
"
L10N
.
numberWithDecimals
(
time
/
1000
2
)
)
;
let
text
=
"
"
;
text
+
=
getFormattedAnimationTitle
(
{
state
}
)
;
text
+
=
"
\
n
"
;
if
(
state
.
delay
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationDelayLabel
"
)
+
"
"
;
text
+
=
getTime
(
state
.
delay
)
;
text
+
=
"
\
n
"
;
}
text
+
=
L10N
.
getStr
(
"
player
.
animationDurationLabel
"
)
+
"
"
;
text
+
=
getTime
(
state
.
duration
)
;
text
+
=
"
\
n
"
;
if
(
state
.
endDelay
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationEndDelayLabel
"
)
+
"
"
;
text
+
=
getTime
(
state
.
endDelay
)
;
text
+
=
"
\
n
"
;
}
if
(
state
.
iterationCount
!
=
=
1
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationIterationCountLabel
"
)
+
"
"
;
text
+
=
state
.
iterationCount
|
|
L10N
.
getStr
(
"
player
.
infiniteIterationCountText
"
)
;
text
+
=
"
\
n
"
;
}
if
(
state
.
iterationStart
!
=
=
0
)
{
let
iterationStartTime
=
state
.
iterationStart
*
state
.
duration
/
1000
;
text
+
=
L10N
.
getFormatStr
(
"
player
.
animationIterationStartLabel
"
state
.
iterationStart
L10N
.
numberWithDecimals
(
iterationStartTime
2
)
)
;
text
+
=
"
\
n
"
;
}
if
(
state
.
playbackRate
!
=
=
1
)
{
text
+
=
L10N
.
getStr
(
"
player
.
animationRateLabel
"
)
+
"
"
;
text
+
=
state
.
playbackRate
;
text
+
=
"
\
n
"
;
}
if
(
state
.
propertyState
)
{
if
(
state
.
propertyState
.
every
(
propState
=
>
propState
.
runningOnCompositor
)
)
{
text
+
=
L10N
.
getStr
(
"
player
.
allPropertiesOnCompositorTooltip
"
)
;
}
else
if
(
state
.
propertyState
.
some
(
propState
=
>
propState
.
runningOnCompositor
)
)
{
text
+
=
L10N
.
getStr
(
"
player
.
somePropertiesOnCompositorTooltip
"
)
;
}
}
else
if
(
state
.
isRunningOnCompositor
)
{
text
+
=
L10N
.
getStr
(
"
player
.
runningOnCompositorTooltip
"
)
;
}
return
text
;
}
onClick
:
function
(
e
)
{
e
.
stopPropagation
(
)
;
this
.
emit
(
"
selected
"
this
.
animation
)
;
}
}
;
function
getFormattedAnimationTitle
(
{
state
}
)
{
if
(
!
state
.
type
)
{
return
state
.
name
;
}
if
(
state
.
type
=
=
=
"
scriptanimation
"
&
&
!
state
.
name
)
{
return
L10N
.
getStr
(
"
timeline
.
scriptanimation
.
unnamedLabel
"
)
;
}
return
L10N
.
getFormatStr
(
timeline
.
{
state
.
type
}
.
nameLabel
state
.
name
)
;
}
