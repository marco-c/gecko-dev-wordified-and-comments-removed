"
use
strict
"
;
const
TESTCASE_URI
=
TEST_URL_ROOT
+
"
doc_ruleLineNumbers
.
html
"
;
add_task
(
function
*
(
)
{
yield
addTab
(
TESTCASE_URI
)
;
let
{
inspector
view
}
=
yield
openRuleView
(
)
;
yield
selectNode
(
"
#
testid
"
inspector
)
;
let
elementRuleEditor
=
getRuleViewRuleEditor
(
view
1
)
;
let
bodyRuleEditor
=
getRuleViewRuleEditor
(
view
3
)
;
let
value
=
getRuleViewLinkTextByIndex
(
view
2
)
;
is
(
value
.
slice
(
-
2
)
"
:
6
"
"
initial
rule
line
number
is
6
"
)
;
info
(
"
Focusing
a
new
property
name
in
the
rule
-
view
"
)
;
let
editor
=
yield
focusEditableField
(
view
elementRuleEditor
.
closeBrace
)
;
is
(
inplaceEditor
(
elementRuleEditor
.
newPropSpan
)
editor
"
The
new
property
editor
got
focused
"
)
;
let
input
=
editor
.
input
;
info
(
"
Entering
font
-
size
in
the
property
name
editor
"
)
;
input
.
value
=
"
font
-
size
"
;
info
(
"
Pressing
return
to
commit
and
focus
the
new
value
field
"
)
;
let
onLocationChanged
=
once
(
bodyRuleEditor
.
rule
.
domRule
"
location
-
changed
"
)
;
let
onValueFocus
=
once
(
elementRuleEditor
.
element
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
view
.
styleWindow
)
;
yield
onValueFocus
;
yield
elementRuleEditor
.
rule
.
_applyingModifications
;
editor
=
inplaceEditor
(
view
.
styleDocument
.
activeElement
)
;
info
(
"
Entering
a
value
and
bluring
the
field
to
expect
a
rule
change
"
)
;
editor
.
input
.
value
=
"
23px
"
;
editor
.
input
.
blur
(
)
;
yield
elementRuleEditor
.
rule
.
_applyingModifications
;
yield
onLocationChanged
;
let
newBodyTitle
=
getRuleViewLinkTextByIndex
(
view
2
)
;
is
(
newBodyTitle
.
slice
(
-
2
)
"
:
7
"
"
updated
rule
line
number
is
7
"
)
;
}
)
;
