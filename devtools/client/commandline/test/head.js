"
use
strict
"
;
const
TEST_BASE_HTTP
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
commandline
/
test
/
"
;
const
TEST_BASE_HTTPS
=
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
commandline
/
test
/
"
;
var
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
var
{
console
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
var
flags
=
require
(
"
devtools
/
shared
/
flags
"
)
;
var
testDir
=
gTestPath
.
substr
(
0
gTestPath
.
lastIndexOf
(
"
/
"
)
)
;
Services
.
scriptloader
.
loadSubScript
(
testDir
+
"
/
helpers
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
testDir
+
"
/
mockCommands
.
js
"
this
)
;
flags
.
testing
=
true
;
SimpleTest
.
registerCleanupFunction
(
(
)
=
>
{
flags
.
testing
=
false
;
}
)
;
function
whenDelayedStartupFinished
(
aWindow
aCallback
)
{
Services
.
obs
.
addObserver
(
function
observer
(
aSubject
aTopic
)
{
if
(
aWindow
=
=
aSubject
)
{
Services
.
obs
.
removeObserver
(
observer
aTopic
)
;
executeSoon
(
aCallback
)
;
}
}
"
browser
-
delayed
-
startup
-
finished
"
false
)
;
}
registerCleanupFunction
(
function
tearDown
(
)
{
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
.
garbageCollect
(
)
;
}
)
;
