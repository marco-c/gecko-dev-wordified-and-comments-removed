"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
browser_gcli_telemetry
.
js
"
;
const
COMMAND_HISTOGRAM_ID
=
"
DEVTOOLS_GCLI_COMMANDS_KEYED
"
;
function
test
(
)
{
return
Task
.
spawn
(
spawnTest
)
.
then
(
finish
helpers
.
handleError
)
;
}
function
*
spawnTest
(
)
{
let
options
=
yield
helpers
.
openTab
(
TEST_URI
)
;
let
Telemetry
=
loadTelemetryAndRecordLogs
(
)
;
yield
helpers
.
openToolbar
(
options
)
;
yield
helpers
.
audit
(
options
[
{
setup
:
"
addon
list
<
RETURN
>
"
}
{
setup
:
"
appcache
clear
<
RETURN
>
"
}
{
setup
:
"
clear
<
RETURN
>
"
}
{
setup
:
"
console
clear
<
RETURN
>
"
}
{
setup
:
"
cookie
list
<
RETURN
>
"
}
{
setup
:
"
help
<
RETURN
>
"
}
{
setup
:
"
help
addon
<
RETURN
>
"
}
{
setup
:
"
screenshot
<
RETURN
>
"
}
{
setup
:
"
listen
6000
<
RETURN
>
"
}
{
setup
:
"
unlisten
<
RETURN
>
"
}
{
setup
:
"
context
addon
<
RETURN
>
"
}
]
)
;
let
results
=
Telemetry
.
prototype
.
telemetryInfo
;
checkTelemetryResults
(
results
)
;
stopRecordingTelemetryLogs
(
Telemetry
)
;
info
(
"
Closing
Developer
Toolbar
"
)
;
yield
helpers
.
closeToolbar
(
options
)
;
info
(
"
Closing
tab
"
)
;
yield
helpers
.
closeTab
(
options
)
;
}
function
loadTelemetryAndRecordLogs
(
)
{
info
(
"
Mock
the
Telemetry
log
function
to
record
logged
information
"
)
;
let
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
Telemetry
.
prototype
.
telemetryInfo
=
{
}
;
Telemetry
.
prototype
.
_oldlog
=
Telemetry
.
prototype
.
log
;
Telemetry
.
prototype
.
log
=
function
(
histogramId
value
)
{
if
(
!
this
.
telemetryInfo
)
{
return
;
}
if
(
histogramId
)
{
if
(
!
this
.
telemetryInfo
[
histogramId
]
)
{
this
.
telemetryInfo
[
histogramId
]
=
[
]
;
}
this
.
telemetryInfo
[
histogramId
]
.
push
(
value
)
;
}
}
;
Telemetry
.
prototype
.
_oldlogKeyed
=
Telemetry
.
prototype
.
logKeyed
;
Telemetry
.
prototype
.
logKeyed
=
function
(
histogramId
key
value
)
{
this
.
log
(
{
histogramId
}
|
{
key
}
value
)
;
}
;
return
Telemetry
;
}
function
stopRecordingTelemetryLogs
(
Telemetry
)
{
info
(
"
Stopping
Telemetry
"
)
;
Telemetry
.
prototype
.
log
=
Telemetry
.
prototype
.
_oldlog
;
Telemetry
.
prototype
.
logKeyed
=
Telemetry
.
prototype
.
_oldlogKeyed
;
delete
Telemetry
.
prototype
.
_oldlog
;
delete
Telemetry
.
prototype
.
_oldlogKeyed
;
delete
Telemetry
.
prototype
.
telemetryInfo
;
}
function
checkTelemetryResults
(
results
)
{
let
prefix
=
COMMAND_HISTOGRAM_ID
+
"
|
"
;
let
keys
=
Object
.
keys
(
results
)
.
filter
(
result
=
>
{
return
result
.
startsWith
(
prefix
)
;
}
)
;
let
commands
=
[
"
addon
list
"
"
appcache
clear
"
"
clear
"
"
console
clear
"
"
cookie
list
"
"
screenshot
"
"
listen
"
"
unlisten
"
"
context
"
"
help
"
]
;
for
(
let
command
of
commands
)
{
let
key
=
prefix
+
command
;
switch
(
key
)
{
case
"
DEVTOOLS_GCLI_COMMANDS_KEYED
|
addon
list
"
:
case
"
DEVTOOLS_GCLI_COMMANDS_KEYED
|
appcache
clear
"
:
case
"
DEVTOOLS_GCLI_COMMANDS_KEYED
|
clear
"
:
case
"
DEVTOOLS_GCLI_COMMANDS_KEYED
|
console
clear
"
:
case
"
DEVTOOLS_GCLI_COMMANDS_KEYED
|
cookie
list
"
:
case
"
DEVTOOLS_GCLI_COMMANDS_KEYED
|
screenshot
"
:
case
"
DEVTOOLS_GCLI_COMMANDS_KEYED
|
listen
"
:
case
"
DEVTOOLS_GCLI_COMMANDS_KEYED
|
unlisten
"
:
case
"
DEVTOOLS_GCLI_COMMANDS_KEYED
|
context
"
:
is
(
results
[
key
]
.
length
1
{
key
}
is
correct
)
;
break
;
case
"
DEVTOOLS_GCLI_COMMANDS_KEYED
|
help
"
:
is
(
results
[
key
]
.
length
2
{
key
}
is
correct
)
;
break
;
default
:
ok
(
false
No
telemetry
pings
were
sent
for
command
"
{
command
}
"
)
;
}
}
}
