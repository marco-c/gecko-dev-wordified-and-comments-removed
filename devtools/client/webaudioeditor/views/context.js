"
use
strict
"
;
const
{
debounce
}
=
require
(
"
devtools
/
shared
/
debounce
"
)
;
const
flags
=
require
(
"
devtools
/
shared
/
flags
"
)
;
const
GRAPH_DEFAULTS
=
{
translate
:
[
20
20
]
scale
:
1
}
;
const
ARROW_HEIGHT
=
5
;
const
ARROW_WIDTH
=
8
;
const
MARKER_STYLING
=
{
light
:
"
#
AAA
"
dark
:
"
#
CED3D9
"
}
;
Object
.
defineProperty
(
this
"
MARKER_STYLING
"
{
value
:
MARKER_STYLING
enumerable
:
true
writable
:
false
}
)
;
const
GRAPH_DEBOUNCE_TIMER
=
100
;
const
GRAPH_REDRAW_EVENTS
=
[
"
add
"
"
connect
"
"
disconnect
"
"
remove
"
]
;
var
ContextView
=
{
initialize
:
function
(
)
{
this
.
_onGraphClick
=
this
.
_onGraphClick
.
bind
(
this
)
;
this
.
_onThemeChange
=
this
.
_onThemeChange
.
bind
(
this
)
;
this
.
_onStartContext
=
this
.
_onStartContext
.
bind
(
this
)
;
this
.
_onEvent
=
this
.
_onEvent
.
bind
(
this
)
;
this
.
draw
=
debounce
(
this
.
draw
.
bind
(
this
)
GRAPH_DEBOUNCE_TIMER
)
;
(
"
#
graph
-
target
"
)
.
addEventListener
(
"
click
"
this
.
_onGraphClick
)
;
window
.
on
(
EVENTS
.
THEME_CHANGE
this
.
_onThemeChange
)
;
window
.
on
(
EVENTS
.
START_CONTEXT
this
.
_onStartContext
)
;
gAudioNodes
.
on
(
"
*
"
this
.
_onEvent
)
;
}
destroy
:
function
(
)
{
if
(
this
.
_zoomBinding
)
{
this
.
_zoomBinding
.
on
(
"
zoom
"
null
)
;
}
(
"
#
graph
-
target
"
)
.
removeEventListener
(
"
click
"
this
.
_onGraphClick
)
;
window
.
off
(
EVENTS
.
THEME_CHANGE
this
.
_onThemeChange
)
;
window
.
off
(
EVENTS
.
START_CONTEXT
this
.
_onStartContext
)
;
gAudioNodes
.
off
(
"
*
"
this
.
_onEvent
)
;
}
resetUI
:
function
(
)
{
this
.
clearGraph
(
)
;
this
.
resetGraphTransform
(
)
;
}
clearGraph
:
function
(
)
{
(
"
#
graph
-
target
"
)
.
innerHTML
=
"
"
;
}
resetGraphTransform
:
function
(
)
{
if
(
this
.
_zoomBinding
)
{
const
{
translate
scale
}
=
GRAPH_DEFAULTS
;
this
.
_zoomBinding
.
scale
(
scale
)
;
this
.
_zoomBinding
.
translate
(
translate
)
;
d3
.
select
(
"
#
graph
-
target
"
)
.
attr
(
"
transform
"
"
translate
(
"
+
translate
+
"
)
scale
(
"
+
scale
+
"
)
"
)
;
}
}
getCurrentScale
:
function
(
)
{
return
this
.
_zoomBinding
?
this
.
_zoomBinding
.
scale
(
)
:
null
;
}
getCurrentTranslation
:
function
(
)
{
return
this
.
_zoomBinding
?
this
.
_zoomBinding
.
translate
(
)
:
null
;
}
focusNode
:
function
(
actorID
)
{
Array
.
forEach
(
(
"
.
nodes
>
g
"
)
node
=
>
node
.
classList
.
remove
(
"
selected
"
)
)
;
if
(
actorID
)
{
this
.
_getNodeByID
(
actorID
)
.
classList
.
add
(
"
selected
"
)
;
}
}
_getNodeByID
:
function
(
actorID
)
{
return
(
"
.
nodes
>
g
[
data
-
id
=
'
"
+
actorID
+
"
'
]
"
)
;
}
_bypassNode
:
function
(
node
enabled
)
{
const
el
=
this
.
_getNodeByID
(
node
.
id
)
;
el
.
classList
[
enabled
?
"
add
"
:
"
remove
"
]
(
"
bypassed
"
)
;
}
draw
:
function
(
)
{
this
.
clearGraph
(
)
;
const
graph
=
new
dagreD3
.
Digraph
(
)
;
const
renderer
=
new
dagreD3
.
Renderer
(
)
;
gAudioNodes
.
populateGraph
(
graph
)
;
const
oldDrawNodes
=
renderer
.
drawNodes
(
)
;
renderer
.
drawNodes
(
function
(
graph
root
)
{
const
svgNodes
=
oldDrawNodes
(
graph
root
)
;
svgNodes
.
each
(
function
(
n
)
{
const
node
=
graph
.
node
(
n
)
;
const
classString
=
"
audionode
type
-
"
+
node
.
type
+
(
node
.
bypassed
?
"
bypassed
"
:
"
"
)
;
this
.
setAttribute
(
"
class
"
classString
)
;
this
.
setAttribute
(
"
data
-
id
"
node
.
id
)
;
this
.
setAttribute
(
"
data
-
type
"
node
.
type
)
;
}
)
;
return
svgNodes
;
}
)
;
const
oldDrawEdgePaths
=
renderer
.
drawEdgePaths
(
)
;
const
defaultClasses
=
"
edgePath
enter
"
;
renderer
.
drawEdgePaths
(
function
(
graph
root
)
{
const
svgEdges
=
oldDrawEdgePaths
(
graph
root
)
;
svgEdges
.
each
(
function
(
e
)
{
const
edge
=
graph
.
edge
(
e
)
;
const
edgeClass
=
defaultClasses
+
(
edge
.
param
?
(
"
param
-
connection
"
+
edge
.
param
)
:
"
"
)
;
this
.
setAttribute
(
"
data
-
source
"
edge
.
source
)
;
this
.
setAttribute
(
"
data
-
target
"
edge
.
target
)
;
this
.
setAttribute
(
"
data
-
param
"
edge
.
param
?
edge
.
param
:
null
)
;
this
.
setAttribute
(
"
class
"
edgeClass
)
;
}
)
;
return
svgEdges
;
}
)
;
renderer
.
postRender
(
(
graph
root
)
=
>
{
const
theme
=
Services
.
prefs
.
getCharPref
(
"
devtools
.
theme
"
)
;
const
markerColor
=
MARKER_STYLING
[
theme
]
;
if
(
graph
.
isDirected
(
)
&
&
root
.
select
(
"
#
arrowhead
"
)
.
empty
(
)
)
{
root
.
append
(
"
svg
:
defs
"
)
.
append
(
"
svg
:
marker
"
)
.
attr
(
"
id
"
"
arrowhead
"
)
.
attr
(
"
viewBox
"
"
0
0
10
10
"
)
.
attr
(
"
refX
"
ARROW_WIDTH
)
.
attr
(
"
refY
"
ARROW_HEIGHT
)
.
attr
(
"
markerUnits
"
"
strokewidth
"
)
.
attr
(
"
markerWidth
"
ARROW_WIDTH
)
.
attr
(
"
markerHeight
"
ARROW_HEIGHT
)
.
attr
(
"
orient
"
"
auto
"
)
.
attr
(
"
style
"
"
fill
:
"
+
markerColor
)
.
append
(
"
svg
:
path
"
)
.
attr
(
"
d
"
"
M
0
0
L
10
5
L
0
10
z
"
)
;
}
const
currentNode
=
InspectorView
.
getCurrentAudioNode
(
)
;
if
(
currentNode
)
{
this
.
focusNode
(
currentNode
.
id
)
;
}
let
info
=
{
}
;
if
(
flags
.
testing
)
{
info
=
gAudioNodes
.
getInfo
(
)
;
}
window
.
emit
(
EVENTS
.
UI_GRAPH_RENDERED
info
.
nodes
info
.
edges
info
.
paramEdges
)
;
}
)
;
const
layout
=
dagreD3
.
layout
(
)
.
rankDir
(
"
LR
"
)
;
renderer
.
layout
(
layout
)
.
run
(
graph
d3
.
select
(
"
#
graph
-
target
"
)
)
;
if
(
!
this
.
_zoomBinding
)
{
this
.
_zoomBinding
=
d3
.
behavior
.
zoom
(
)
.
on
(
"
zoom
"
function
(
)
{
var
ev
=
d3
.
event
;
d3
.
select
(
"
#
graph
-
target
"
)
.
attr
(
"
transform
"
"
translate
(
"
+
ev
.
translate
+
"
)
scale
(
"
+
ev
.
scale
+
"
)
"
)
;
}
)
;
d3
.
select
(
"
svg
"
)
.
call
(
this
.
_zoomBinding
)
;
this
.
resetGraphTransform
(
)
;
}
}
_onStartContext
:
function
(
)
{
this
.
draw
(
)
;
}
_onEvent
:
function
(
eventName
.
.
.
args
)
{
if
(
eventName
=
=
=
"
bypass
"
)
{
this
.
_bypassNode
.
apply
(
this
args
)
;
}
if
(
~
GRAPH_REDRAW_EVENTS
.
indexOf
(
eventName
)
)
{
this
.
draw
(
)
;
}
}
_onThemeChange
:
function
(
theme
)
{
const
markerColor
=
MARKER_STYLING
[
theme
]
;
const
marker
=
(
"
#
arrowhead
"
)
;
if
(
marker
)
{
marker
.
setAttribute
(
"
style
"
"
fill
:
"
+
markerColor
)
;
}
}
_onGraphClick
:
function
(
e
)
{
const
node
=
findGraphNodeParent
(
e
.
target
)
;
if
(
!
node
)
{
return
;
}
const
id
=
node
.
getAttribute
(
"
data
-
id
"
)
;
this
.
focusNode
(
id
)
;
window
.
emit
(
EVENTS
.
UI_SELECT_NODE
id
)
;
}
}
;
