"
use
strict
"
;
var
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
ViewHelpers
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
devtools
/
client
/
framework
/
gDevTools
.
jsm
"
)
;
const
{
loader
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
var
{
console
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
var
{
EventTarget
}
=
require
(
"
sdk
/
event
/
target
"
)
;
const
{
Task
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
{
}
)
;
const
{
Class
}
=
require
(
"
sdk
/
core
/
heritage
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
STRINGS_URI
=
"
chrome
:
/
/
devtools
/
locale
/
webaudioeditor
.
properties
"
const
L10N
=
new
ViewHelpers
.
L10N
(
STRINGS_URI
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
telemetry
=
new
Telemetry
(
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
loader
.
lazyRequireGetter
(
this
"
LineGraphWidget
"
"
devtools
/
client
/
shared
/
widgets
/
LineGraphWidget
"
)
;
var
AUDIO_NODE_DEFINITION
;
const
{
defer
all
}
=
require
(
"
promise
"
)
;
const
EVENTS
=
{
START_CONTEXT
:
"
WebAudioEditor
:
StartContext
"
THEME_CHANGE
:
"
WebAudioEditor
:
ThemeChange
"
UI_RESET
:
"
WebAudioEditor
:
UIReset
"
UI_SET_PARAM
:
"
WebAudioEditor
:
UISetParam
"
UI_SELECT_NODE
:
"
WebAudioEditor
:
UISelectNode
"
UI_INSPECTOR_NODE_SET
:
"
WebAudioEditor
:
UIInspectorNodeSet
"
UI_INSPECTOR_TOGGLED
:
"
WebAudioEditor
:
UIInspectorToggled
"
UI_PROPERTIES_TAB_RENDERED
:
"
WebAudioEditor
:
UIPropertiesTabRendered
"
UI_AUTOMATION_TAB_RENDERED
:
"
WebAudioEditor
:
UIAutomationTabRendered
"
UI_GRAPH_RENDERED
:
"
WebAudioEditor
:
UIGraphRendered
"
UI_INSPECTOR_RESIZE
:
"
WebAudioEditor
:
UIInspectorResize
"
}
;
XPCOMUtils
.
defineConstant
(
this
"
EVENTS
"
EVENTS
)
;
var
gToolbox
gTarget
gFront
;
EventEmitter
.
decorate
(
this
)
;
function
(
selector
target
=
document
)
{
return
target
.
querySelector
(
selector
)
;
}
function
(
selector
target
=
document
)
{
return
target
.
querySelectorAll
(
selector
)
;
}
function
findWhere
(
collection
attrs
)
{
let
keys
=
Object
.
keys
(
attrs
)
;
for
(
let
model
of
collection
)
{
if
(
keys
.
every
(
key
=
>
model
[
key
]
=
=
=
attrs
[
key
]
)
)
{
return
model
;
}
}
return
void
0
;
}
function
mixin
(
source
.
.
.
args
)
{
args
.
forEach
(
obj
=
>
Object
.
keys
(
obj
)
.
forEach
(
prop
=
>
source
[
prop
]
=
obj
[
prop
]
)
)
;
return
source
;
}
