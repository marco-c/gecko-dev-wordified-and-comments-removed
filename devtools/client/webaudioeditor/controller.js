const
{
PrefObserver
}
=
require
(
"
devtools
/
client
/
shared
/
prefs
"
)
;
var
gAudioNodes
=
new
AudioNodesCollection
(
)
;
function
startupWebAudioEditor
(
)
{
return
all
(
[
WebAudioEditorController
.
initialize
(
)
ContextView
.
initialize
(
)
InspectorView
.
initialize
(
)
PropertiesView
.
initialize
(
)
AutomationView
.
initialize
(
)
]
)
;
}
function
shutdownWebAudioEditor
(
)
{
return
all
(
[
WebAudioEditorController
.
destroy
(
)
ContextView
.
destroy
(
)
InspectorView
.
destroy
(
)
PropertiesView
.
destroy
(
)
AutomationView
.
destroy
(
)
]
)
;
}
var
WebAudioEditorController
=
{
async
initialize
(
)
{
this
.
_onTabNavigated
=
this
.
_onTabNavigated
.
bind
(
this
)
;
this
.
_onThemeChange
=
this
.
_onThemeChange
.
bind
(
this
)
;
gTarget
.
on
(
"
will
-
navigate
"
this
.
_onTabNavigated
)
;
gTarget
.
on
(
"
navigate
"
this
.
_onTabNavigated
)
;
gFront
.
on
(
"
start
-
context
"
this
.
_onStartContext
)
;
gFront
.
on
(
"
create
-
node
"
this
.
_onCreateNode
)
;
gFront
.
on
(
"
connect
-
node
"
this
.
_onConnectNode
)
;
gFront
.
on
(
"
connect
-
param
"
this
.
_onConnectParam
)
;
gFront
.
on
(
"
disconnect
-
node
"
this
.
_onDisconnectNode
)
;
gFront
.
on
(
"
change
-
param
"
this
.
_onChangeParam
)
;
gFront
.
on
(
"
destroy
-
node
"
this
.
_onDestroyNode
)
;
this
.
_prefObserver
=
new
PrefObserver
(
"
"
)
;
this
.
_prefObserver
.
on
(
"
devtools
.
theme
"
this
.
_onThemeChange
)
;
let
actorHasDefinition
=
await
gTarget
.
actorHasMethod
(
"
webaudio
"
"
getDefinition
"
)
;
if
(
actorHasDefinition
)
{
AUDIO_NODE_DEFINITION
=
await
gFront
.
getDefinition
(
)
;
}
else
{
AUDIO_NODE_DEFINITION
=
require
(
"
devtools
/
server
/
actors
/
utils
/
audionodes
.
json
"
)
;
}
gFront
.
setup
(
{
reload
:
false
}
)
;
}
destroy
:
function
(
)
{
gTarget
.
off
(
"
will
-
navigate
"
this
.
_onTabNavigated
)
;
gTarget
.
off
(
"
navigate
"
this
.
_onTabNavigated
)
;
gFront
.
off
(
"
start
-
context
"
this
.
_onStartContext
)
;
gFront
.
off
(
"
create
-
node
"
this
.
_onCreateNode
)
;
gFront
.
off
(
"
connect
-
node
"
this
.
_onConnectNode
)
;
gFront
.
off
(
"
connect
-
param
"
this
.
_onConnectParam
)
;
gFront
.
off
(
"
disconnect
-
node
"
this
.
_onDisconnectNode
)
;
gFront
.
off
(
"
change
-
param
"
this
.
_onChangeParam
)
;
gFront
.
off
(
"
destroy
-
node
"
this
.
_onDestroyNode
)
;
this
.
_prefObserver
.
off
(
"
devtools
.
theme
"
this
.
_onThemeChange
)
;
this
.
_prefObserver
.
destroy
(
)
;
}
reset
:
function
(
)
{
(
"
#
content
"
)
.
hidden
=
true
;
ContextView
.
resetUI
(
)
;
InspectorView
.
resetUI
(
)
;
PropertiesView
.
resetUI
(
)
;
}
getNode
:
async
function
(
nodeActor
)
{
let
id
=
nodeActor
.
actorID
;
let
node
=
gAudioNodes
.
get
(
id
)
;
if
(
!
node
)
{
let
{
resolve
promise
}
=
defer
(
)
;
gAudioNodes
.
on
(
"
add
"
function
createNodeListener
(
createdNode
)
{
if
(
createdNode
.
id
=
=
=
id
)
{
gAudioNodes
.
off
(
"
add
"
createNodeListener
)
;
resolve
(
createdNode
)
;
}
}
)
;
node
=
await
promise
;
}
return
node
;
}
_onThemeChange
:
function
(
)
{
let
newValue
=
Services
.
prefs
.
getCharPref
(
"
devtools
.
theme
"
)
;
window
.
emit
(
EVENTS
.
THEME_CHANGE
newValue
)
;
}
async
_onTabNavigated
(
event
{
isFrameSwitching
}
)
{
switch
(
event
)
{
case
"
will
-
navigate
"
:
{
this
.
reset
(
)
;
if
(
isFrameSwitching
)
{
(
"
#
reload
-
notice
"
)
.
hidden
=
false
;
(
"
#
waiting
-
notice
"
)
.
hidden
=
true
;
}
else
{
(
"
#
reload
-
notice
"
)
.
hidden
=
true
;
(
"
#
waiting
-
notice
"
)
.
hidden
=
false
;
}
gAudioNodes
.
reset
(
)
;
window
.
emit
(
EVENTS
.
UI_RESET
)
;
break
;
}
case
"
navigate
"
:
{
break
;
}
}
}
_onStartContext
:
function
(
)
{
(
"
#
reload
-
notice
"
)
.
hidden
=
true
;
(
"
#
waiting
-
notice
"
)
.
hidden
=
true
;
(
"
#
content
"
)
.
hidden
=
false
;
window
.
emit
(
EVENTS
.
START_CONTEXT
)
;
}
_onCreateNode
:
function
(
nodeActor
)
{
gAudioNodes
.
add
(
nodeActor
)
;
}
_onDestroyNode
:
function
(
nodeActor
)
{
gAudioNodes
.
remove
(
gAudioNodes
.
get
(
nodeActor
.
actorID
)
)
;
}
async
_onConnectNode
(
{
source
:
sourceActor
dest
:
destActor
}
)
{
let
source
=
await
WebAudioEditorController
.
getNode
(
sourceActor
)
;
let
dest
=
await
WebAudioEditorController
.
getNode
(
destActor
)
;
source
.
connect
(
dest
)
;
}
async
_onConnectParam
(
{
source
:
sourceActor
dest
:
destActor
param
}
)
{
let
source
=
await
WebAudioEditorController
.
getNode
(
sourceActor
)
;
let
dest
=
await
WebAudioEditorController
.
getNode
(
destActor
)
;
source
.
connect
(
dest
param
)
;
}
async
_onDisconnectNode
(
nodeActor
)
{
let
node
=
await
WebAudioEditorController
.
getNode
(
nodeActor
)
;
node
.
disconnect
(
)
;
}
async
_onChangeParam
(
{
actor
param
value
}
)
{
let
node
=
await
WebAudioEditorController
.
getNode
(
actor
)
;
window
.
emit
(
EVENTS
.
CHANGE_PARAM
node
param
value
)
;
}
}
;
