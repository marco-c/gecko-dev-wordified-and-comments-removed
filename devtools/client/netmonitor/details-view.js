"
use
strict
"
;
const
promise
=
require
(
"
promise
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
Heritage
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
view
-
helpers
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
ToolSidebar
}
=
require
(
"
devtools
/
client
/
framework
/
sidebar
"
)
;
const
{
VariablesView
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
VariablesView
.
jsm
"
)
;
const
{
EVENTS
}
=
require
(
"
.
/
events
"
)
;
const
{
L10N
}
=
require
(
"
.
/
l10n
"
)
;
const
{
Filters
}
=
require
(
"
.
/
filter
-
predicates
"
)
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
Provider
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
.
Provider
)
;
const
HeadersPanel
=
createFactory
(
require
(
"
.
/
shared
/
components
/
headers
-
panel
"
)
)
;
const
ParamsPanel
=
createFactory
(
require
(
"
.
/
shared
/
components
/
params
-
panel
"
)
)
;
const
PreviewPanel
=
createFactory
(
require
(
"
.
/
shared
/
components
/
preview
-
panel
"
)
)
;
const
ResponsePanel
=
createFactory
(
require
(
"
.
/
shared
/
components
/
response
-
panel
"
)
)
;
const
SecurityPanel
=
createFactory
(
require
(
"
.
/
shared
/
components
/
security
-
panel
"
)
)
;
const
TimingsPanel
=
createFactory
(
require
(
"
.
/
shared
/
components
/
timings
-
panel
"
)
)
;
const
GENERIC_VARIABLES_VIEW_SETTINGS
=
{
lazyEmpty
:
true
lazyEmptyDelay
:
10
searchEnabled
:
true
editableValueTooltip
:
"
"
editableNameTooltip
:
"
"
preventDisableOnChange
:
true
preventDescriptorModifiers
:
true
eval
:
(
)
=
>
{
}
}
;
function
DetailsView
(
)
{
dumpn
(
"
DetailsView
was
instantiated
"
)
;
EventEmitter
.
decorate
(
this
)
;
this
.
_onTabSelect
=
this
.
_onTabSelect
.
bind
(
this
)
;
}
DetailsView
.
prototype
=
{
_viewState
:
{
updating
:
[
]
dirty
:
[
]
latestData
:
null
}
initialize
:
function
(
store
)
{
dumpn
(
"
Initializing
the
DetailsView
"
)
;
this
.
_headersPanelNode
=
(
"
#
react
-
headers
-
tabpanel
-
hook
"
)
;
ReactDOM
.
render
(
Provider
(
{
store
}
HeadersPanel
(
)
)
this
.
_headersPanelNode
)
;
this
.
_paramsPanelNode
=
(
"
#
react
-
params
-
tabpanel
-
hook
"
)
;
ReactDOM
.
render
(
Provider
(
{
store
}
ParamsPanel
(
)
)
this
.
_paramsPanelNode
)
;
this
.
_previewPanelNode
=
(
"
#
react
-
preview
-
tabpanel
-
hook
"
)
;
ReactDOM
.
render
(
Provider
(
{
store
}
PreviewPanel
(
)
)
this
.
_previewPanelNode
)
;
this
.
_responsePanelNode
=
(
"
#
react
-
response
-
tabpanel
-
hook
"
)
;
ReactDOM
.
render
(
Provider
(
{
store
}
ResponsePanel
(
)
)
this
.
_responsePanelNode
)
;
this
.
_securityPanelNode
=
(
"
#
react
-
security
-
tabpanel
-
hook
"
)
;
ReactDOM
.
render
(
Provider
(
{
store
}
SecurityPanel
(
)
)
this
.
_securityPanelNode
)
;
this
.
_timingsPanelNode
=
(
"
#
react
-
timings
-
tabpanel
-
hook
"
)
;
ReactDOM
.
render
(
Provider
(
{
store
}
TimingsPanel
(
)
)
this
.
_timingsPanelNode
)
;
this
.
widget
=
(
"
#
event
-
details
-
pane
"
)
;
this
.
sidebar
=
new
ToolSidebar
(
this
.
widget
this
"
netmonitor
"
{
disableTelemetry
:
true
showAllTabsMenu
:
true
}
)
;
this
.
_cookies
=
new
VariablesView
(
(
"
#
all
-
cookies
"
)
Heritage
.
extend
(
GENERIC_VARIABLES_VIEW_SETTINGS
{
emptyText
:
L10N
.
getStr
(
"
cookiesEmptyText
"
)
searchPlaceholder
:
L10N
.
getStr
(
"
cookiesFilterText
"
)
}
)
)
;
this
.
_requestCookies
=
L10N
.
getStr
(
"
requestCookies
"
)
;
this
.
_responseCookies
=
L10N
.
getStr
(
"
responseCookies
"
)
;
(
"
tabpanels
"
this
.
widget
)
.
addEventListener
(
"
select
"
this
.
_onTabSelect
)
;
}
destroy
:
function
(
)
{
dumpn
(
"
Destroying
the
DetailsView
"
)
;
ReactDOM
.
unmountComponentAtNode
(
this
.
_paramsPanelNode
)
;
ReactDOM
.
unmountComponentAtNode
(
this
.
_headersPanelNode
)
;
ReactDOM
.
unmountComponentAtNode
(
this
.
_previewPanelNode
)
;
ReactDOM
.
unmountComponentAtNode
(
this
.
_responsePanelNode
)
;
ReactDOM
.
unmountComponentAtNode
(
this
.
_securityPanelNode
)
;
ReactDOM
.
unmountComponentAtNode
(
this
.
_timingsPanelNode
)
;
this
.
sidebar
.
destroy
(
)
;
(
"
tabpanels
"
this
.
widget
)
.
removeEventListener
(
"
select
"
this
.
_onTabSelect
)
;
}
populate
:
function
(
data
)
{
let
isHtml
=
Filters
.
html
(
data
)
;
this
.
sidebar
.
toggleTab
(
isHtml
"
preview
-
tab
"
)
;
let
hasSecurityInfo
=
data
.
securityState
&
&
data
.
securityState
!
=
=
"
insecure
"
;
this
.
sidebar
.
toggleTab
(
hasSecurityInfo
"
security
-
tab
"
)
;
if
(
!
isHtml
&
&
this
.
widget
.
selectedPanel
=
=
=
(
"
#
preview
-
tabpanel
"
)
|
|
!
hasSecurityInfo
&
&
this
.
widget
.
selectedPanel
=
=
=
(
"
#
security
-
tabpanel
"
)
)
{
this
.
widget
.
selectedIndex
=
0
;
}
this
.
_cookies
.
empty
(
)
;
this
.
_dataSrc
=
{
src
:
data
populated
:
[
]
}
;
this
.
_onTabSelect
(
)
;
window
.
emit
(
EVENTS
.
NETWORKDETAILSVIEW_POPULATED
)
;
return
promise
.
resolve
(
)
;
}
_onTabSelect
:
function
(
)
{
let
{
src
populated
}
=
this
.
_dataSrc
|
|
{
}
;
let
tab
=
this
.
widget
.
selectedIndex
;
let
view
=
this
;
if
(
!
src
|
|
populated
[
tab
]
)
{
return
;
}
let
viewState
=
this
.
_viewState
;
if
(
viewState
.
updating
[
tab
]
)
{
viewState
.
dirty
[
tab
]
=
true
;
viewState
.
latestData
=
src
;
return
;
}
Task
.
spawn
(
function
*
(
)
{
viewState
.
updating
[
tab
]
=
true
;
switch
(
tab
)
{
case
1
:
yield
view
.
_setResponseCookies
(
src
.
responseCookies
)
;
yield
view
.
_setRequestCookies
(
src
.
requestCookies
)
;
break
;
}
viewState
.
updating
[
tab
]
=
false
;
}
)
.
then
(
(
)
=
>
{
if
(
tab
=
=
this
.
widget
.
selectedIndex
)
{
if
(
viewState
.
dirty
[
tab
]
)
{
viewState
.
dirty
[
tab
]
=
false
;
view
.
populate
(
viewState
.
latestData
)
;
}
else
{
populated
[
tab
]
=
true
;
window
.
emit
(
EVENTS
.
TAB_UPDATED
)
;
}
}
else
if
(
viewState
.
dirty
[
tab
]
)
{
viewState
.
dirty
[
tab
]
=
false
;
}
}
e
=
>
console
.
error
(
e
)
)
;
}
_setRequestCookies
:
Task
.
async
(
function
*
(
response
)
{
if
(
response
&
&
response
.
cookies
.
length
)
{
response
.
cookies
.
sort
(
(
a
b
)
=
>
a
.
name
>
b
.
name
)
;
yield
this
.
_addCookies
(
this
.
_requestCookies
response
)
;
}
}
)
_setResponseCookies
:
Task
.
async
(
function
*
(
response
)
{
if
(
response
&
&
response
.
cookies
.
length
)
{
yield
this
.
_addCookies
(
this
.
_responseCookies
response
)
;
}
}
)
_addCookies
:
Task
.
async
(
function
*
(
name
response
)
{
let
cookiesScope
=
this
.
_cookies
.
addScope
(
name
)
;
cookiesScope
.
expanded
=
true
;
for
(
let
cookie
of
response
.
cookies
)
{
let
cookieVar
=
cookiesScope
.
addItem
(
cookie
.
name
{
}
{
relaxed
:
true
}
)
;
let
cookieValue
=
yield
gNetwork
.
getString
(
cookie
.
value
)
;
cookieVar
.
setGrip
(
cookieValue
)
;
let
cookieProps
=
Object
.
keys
(
cookie
)
;
if
(
cookieProps
.
length
=
=
2
)
{
continue
;
}
let
rawObject
=
Object
.
create
(
null
)
;
let
otherProps
=
cookieProps
.
filter
(
e
=
>
e
!
=
"
name
"
&
&
e
!
=
"
value
"
)
;
for
(
let
prop
of
otherProps
)
{
rawObject
[
prop
]
=
cookie
[
prop
]
;
}
cookieVar
.
populate
(
rawObject
)
;
cookieVar
.
twisty
=
true
;
cookieVar
.
expanded
=
true
;
}
}
)
_dataSrc
:
null
_cookies
:
null
_requestCookies
:
"
"
_responseCookies
:
"
"
}
;
exports
.
DetailsView
=
DetailsView
;
