"
use
strict
"
;
add_task
(
async
function
(
)
{
let
isCacheReady
=
false
;
const
httpServer
=
createTestHTTPServer
(
)
;
httpServer
.
registerContentType
(
"
html
"
"
text
/
html
"
)
;
httpServer
.
registerPathHandler
(
/
function
(
request
response
)
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
write
(
<
html
>
Test
page
for
regular
304
requests
<
/
html
>
)
;
}
)
;
httpServer
.
registerPathHandler
(
/
cached
function
(
request
response
)
{
if
(
isCacheReady
)
{
response
.
setStatusLine
(
request
.
httpVersion
304
"
Not
Modified
"
)
;
}
else
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
response
.
setHeader
(
"
Cache
-
Control
"
"
no
-
cache
"
)
;
response
.
write
(
cached
)
;
isCacheReady
=
true
;
}
}
)
;
const
port
=
httpServer
.
identity
.
primaryPort
;
const
CACHE_TEST_URL
=
http
:
/
/
localhost
:
{
port
}
/
;
const
{
monitor
}
=
await
initNetMonitor
(
CACHE_TEST_URL
{
enableCache
:
true
requestCount
:
1
}
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
info
(
"
Create
a
200
request
"
)
;
let
waitForRequest
=
waitForNetworkEvents
(
monitor
1
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
content
.
fetch
(
"
/
cached
"
)
;
}
)
;
await
waitForRequest
;
info
(
"
Select
the
request
and
wait
until
the
headers
panel
is
displayed
"
)
;
store
.
dispatch
(
Actions
.
selectRequestByIndex
(
0
)
)
;
await
waitFor
(
(
)
=
>
document
.
querySelector
(
"
.
headers
-
overview
"
)
)
;
ok
(
!
document
.
querySelector
(
"
#
cache
-
tab
"
)
"
No
cache
panel
is
available
for
the
200
request
"
)
;
info
(
"
Create
a
304
request
"
)
;
waitForRequest
=
waitForNetworkEvents
(
monitor
1
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
content
.
fetch
(
"
/
cached
"
)
;
}
)
;
await
waitForRequest
;
info
(
"
Select
the
request
and
wait
until
the
headers
panel
is
displayed
"
)
;
store
.
dispatch
(
Actions
.
selectRequestByIndex
(
1
)
)
;
await
waitFor
(
(
)
=
>
document
.
querySelector
(
"
.
headers
-
overview
"
)
)
;
ok
(
document
.
querySelector
(
"
#
cache
-
tab
"
)
"
A
cache
panel
is
available
for
the
304
request
"
)
;
document
.
querySelector
(
"
#
cache
-
tab
"
)
.
click
(
)
;
info
(
"
Wait
until
the
Cache
panel
content
is
displayed
"
)
;
await
waitFor
(
(
)
=
>
!
!
document
.
getElementById
(
"
/
Cache
"
)
)
;
const
device
=
getCacheDetailsValue
(
document
"
Device
"
)
;
is
(
device
"
Not
Available
"
"
device
information
is
Not
Available
"
)
;
const
lastModified
=
getCacheDetailsValue
(
document
"
Last
Modified
"
)
;
info
(
"
Retrieved
lastModified
value
:
"
+
lastModified
)
;
ok
(
!
!
lastModified
"
Last
Modified
was
found
in
the
cache
panel
"
)
;
const
expires
=
getCacheDetailsValue
(
document
"
Expires
"
)
;
info
(
"
Retrieved
expires
value
:
"
+
expires
)
;
ok
(
!
expires
.
includes
(
"
Not
Available
"
)
"
Expires
is
set
to
a
value
other
than
unavailable
"
)
;
}
)
;
function
getCacheDetailsValue
(
doc
cacheItemId
)
{
const
container
=
doc
.
getElementById
(
"
/
Cache
/
"
+
cacheItemId
)
;
ok
(
!
!
container
Found
the
cache
panel
container
for
id
{
cacheItemId
}
)
;
const
valueContainer
=
container
.
querySelector
(
"
.
treeValueCell
span
"
)
;
ok
(
!
!
valueContainer
Found
the
cache
panel
value
container
for
id
{
cacheItemId
}
)
;
const
quotedValue
=
valueContainer
.
textContent
;
return
quotedValue
.
substring
(
1
quotedValue
.
length
-
1
)
;
}
