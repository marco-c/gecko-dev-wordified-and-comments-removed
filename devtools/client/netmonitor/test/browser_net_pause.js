"
use
strict
"
;
add_task
(
async
function
(
)
{
const
{
tab
monitor
}
=
await
initNetMonitor
(
PAUSE_URL
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
connector
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
const
pauseButton
=
document
.
querySelector
(
"
.
requests
-
list
-
pause
-
button
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
assertRequestCount
(
store
0
)
;
await
performRequestAndWait
(
tab
monitor
)
;
assertRequestCount
(
store
1
)
;
let
noRequest
=
true
;
monitor
.
panelWin
.
api
.
once
(
EVENTS
.
NETWORK_EVENT
(
)
=
>
{
noRequest
=
false
;
}
)
;
monitor
.
panelWin
.
api
.
once
(
EVENTS
.
NETWORK_EVENT_UPDATED
(
)
=
>
{
noRequest
=
false
;
}
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
pauseButton
)
;
await
performPausedRequest
(
connector
tab
monitor
)
;
ok
(
noRequest
"
There
should
be
no
activity
when
paused
.
"
)
;
assertRequestCount
(
store
1
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
pauseButton
)
;
await
performRequestAndWait
(
tab
monitor
)
;
assertRequestCount
(
store
2
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
pauseButton
)
;
tab
.
linkedBrowser
.
reload
(
)
;
await
waitForNetworkEvents
(
monitor
1
)
;
assertRequestCount
(
store
1
)
;
return
teardown
(
monitor
)
;
}
)
;
function
assertRequestCount
(
store
count
)
{
is
(
store
.
getState
(
)
.
requests
.
requests
.
length
count
"
There
should
be
correct
number
of
requests
"
)
;
}
async
function
performRequestAndWait
(
tab
monitor
)
{
const
wait
=
waitForNetworkEvents
(
monitor
1
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
SIMPLE_SJS
]
async
function
(
url
)
{
await
content
.
wrappedJSObject
.
performRequests
(
url
)
;
}
)
;
await
wait
;
}
async
function
performPausedRequest
(
connector
tab
monitor
)
{
const
wait
=
connector
.
connector
.
webConsoleFront
.
once
(
"
networkEvent
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
SIMPLE_SJS
]
async
function
(
url
)
{
await
content
.
wrappedJSObject
.
performRequests
(
url
)
;
}
)
;
await
wait
;
}
