"
use
strict
"
;
add_task
(
async
function
(
)
{
const
{
tab
monitor
toolbox
}
=
await
initNetMonitor
(
PAUSE_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
const
pauseButton
=
document
.
querySelector
(
"
.
requests
-
list
-
pause
-
button
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
assertRequestCount
(
store
0
)
;
await
performRequestAndWait
(
tab
monitor
SIMPLE_URL
+
"
?
id
=
1
"
)
;
assertRequestCount
(
store
1
)
;
let
noRequest
=
true
;
monitor
.
panelWin
.
api
.
once
(
TEST_EVENTS
.
NETWORK_EVENT
(
)
=
>
{
noRequest
=
false
;
}
)
;
monitor
.
panelWin
.
api
.
once
(
TEST_EVENTS
.
NETWORK_EVENT_UPDATED
(
)
=
>
{
noRequest
=
false
;
}
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
pauseButton
)
;
await
waitForPauseButtonToChange
(
document
true
)
;
await
performPausedRequest
(
tab
monitor
toolbox
)
;
ok
(
noRequest
"
There
should
be
no
activity
when
paused
.
"
)
;
assertRequestCount
(
store
1
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
pauseButton
)
;
await
waitForPauseButtonToChange
(
document
false
)
;
await
performRequestAndWait
(
tab
monitor
SIMPLE_URL
+
"
?
id
=
2
"
)
;
ok
(
!
noRequest
"
There
should
be
activity
when
resumed
.
"
)
;
assertRequestCount
(
store
2
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
pauseButton
)
;
await
waitForPauseButtonToChange
(
document
true
)
;
await
reloadBrowser
(
)
;
await
waitForPauseButtonToChange
(
document
false
)
;
await
performRequestAndWait
(
tab
monitor
SIMPLE_URL
+
"
?
id
=
3
"
)
;
ok
(
!
noRequest
"
There
should
be
activity
when
resumed
.
"
)
;
return
teardown
(
monitor
)
;
}
)
;
function
waitForRequest
(
doc
url
)
{
return
waitUntil
(
(
)
=
>
[
.
.
.
doc
.
querySelectorAll
(
"
.
request
-
list
-
item
.
requests
-
list
-
file
"
)
]
.
some
(
columns
=
>
columns
.
title
.
includes
(
url
)
)
)
;
}
async
function
waitForPauseButtonToChange
(
doc
isPaused
)
{
await
waitUntil
(
(
)
=
>
!
!
doc
.
querySelector
(
.
requests
-
list
-
pause
-
button
.
devtools
-
{
isPaused
?
"
play
"
:
"
pause
"
}
-
icon
)
)
;
ok
(
true
The
pause
button
is
correctly
in
the
{
isPaused
?
"
paused
"
:
"
resumed
"
}
state
)
;
}
function
assertRequestCount
(
store
count
)
{
is
(
store
.
getState
(
)
.
requests
.
requests
.
length
count
"
There
should
be
correct
number
of
requests
"
)
;
}
async
function
performRequestAndWait
(
tab
monitor
requestURL
)
{
const
wait
=
waitForRequest
(
monitor
.
panelWin
.
document
requestURL
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
requestURL
]
async
function
(
url
)
{
await
content
.
wrappedJSObject
.
performRequests
(
url
)
;
}
)
;
await
wait
;
}
async
function
performPausedRequest
(
tab
monitor
toolbox
)
{
const
{
onResource
:
waitForEventWhenPaused
}
=
await
toolbox
.
resourceCommand
.
waitForNextResource
(
toolbox
.
resourceCommand
.
TYPES
.
NETWORK_EVENT
{
ignoreExistingResources
:
true
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
SIMPLE_URL
]
async
function
(
url
)
{
await
content
.
wrappedJSObject
.
performRequests
(
url
)
;
}
)
;
await
waitForEventWhenPaused
;
}
