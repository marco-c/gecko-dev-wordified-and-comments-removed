"
use
strict
"
;
add_task
(
async
function
(
)
{
const
{
tab
monitor
}
=
await
initNetMonitor
(
SIMPLE_URL
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
parent
}
=
monitor
.
panelWin
;
const
{
getSelectedRequest
}
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
selectors
/
index
"
)
;
const
parentDocument
=
parent
.
document
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
const
waitForEvents
=
waitForNetworkEvents
(
monitor
1
)
;
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
SIMPLE_URL
)
;
await
waitForEvents
;
const
firstRequest
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
0
]
;
const
waitForHeaders
=
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
.
headers
-
overview
"
)
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
firstRequest
)
;
await
waitForHeaders
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
contextmenu
"
}
firstRequest
)
;
const
firstRequestState
=
getSelectedRequest
(
store
.
getState
(
)
)
;
const
contextResend
=
parentDocument
.
querySelector
(
"
#
request
-
list
-
context
-
resend
"
)
;
contextResend
.
click
(
)
;
document
.
querySelector
(
"
#
custom
-
request
-
close
-
button
"
)
.
click
(
)
;
const
finalRequestState
=
getSelectedRequest
(
store
.
getState
(
)
)
;
ok
(
firstRequestState
=
=
=
finalRequestState
"
Original
request
is
selected
after
cancel
button
is
clicked
"
)
;
ok
(
document
.
querySelector
(
"
.
headers
-
overview
"
)
!
=
=
null
"
Request
is
selected
and
headers
panel
is
visible
"
)
;
return
teardown
(
monitor
)
;
}
)
;
