"
use
strict
"
;
add_task
(
async
function
(
)
{
const
{
monitor
}
=
await
initNetMonitor
(
SIMPLE_URL
{
enableCache
:
true
}
)
;
let
onNetworkEvents
=
waitForNetworkEvents
(
monitor
3
{
expectedPayloadReady
:
2
expectedEventTimings
:
2
}
)
;
const
onNavigationCompleted
=
navigateTo
(
STATISTICS_EDGE_CASE_URL
)
;
info
(
"
Wait
for
the
3
first
network
events
(
initial
)
"
)
;
await
onNetworkEvents
;
onNetworkEvents
=
waitForNetworkEvents
(
monitor
1
{
expectedPayloadReady
:
2
expectedEventTimings
:
2
}
)
;
info
(
"
Call
unblock
(
)
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
content
.
wrappedJSObject
.
unblock
(
)
)
;
info
(
"
Wait
for
polling
and
unblock
(
initial
)
"
)
;
await
onNetworkEvents
;
info
(
"
Wait
for
the
navigation
to
complete
"
)
;
await
onNavigationCompleted
;
onNetworkEvents
=
waitForNetworkEvents
(
monitor
3
{
expectedPayloadReady
:
2
expectedEventTimings
:
2
}
)
;
info
(
"
Open
the
statistics
panel
"
)
;
const
panel
=
monitor
.
panelWin
;
const
{
document
store
windowRequire
connector
}
=
panel
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
openStatistics
(
connector
true
)
)
;
await
waitFor
(
(
)
=
>
!
!
document
.
querySelector
(
"
.
statistics
-
panel
"
)
"
The
statistics
panel
is
displayed
"
)
;
await
waitFor
(
(
)
=
>
document
.
querySelectorAll
(
"
.
table
-
chart
-
container
:
not
(
[
placeholder
=
true
]
)
"
)
.
length
=
=
2
"
Two
real
table
charts
appear
to
be
rendered
correctly
.
"
)
;
info
(
"
Close
statistics
panel
"
)
;
store
.
dispatch
(
Actions
.
openStatistics
(
connector
false
)
)
;
await
waitFor
(
(
)
=
>
!
!
document
.
querySelector
(
"
.
monitor
-
panel
"
)
"
The
regular
netmonitor
panel
is
displayed
"
)
;
info
(
"
Wait
for
the
3
first
network
events
(
after
opening
statistics
panel
)
"
)
;
await
onNetworkEvents
;
onNetworkEvents
=
waitForNetworkEvents
(
monitor
1
{
expectedPayloadReady
:
2
expectedEventTimings
:
2
}
)
;
info
(
"
Call
unblock
(
)
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
content
.
wrappedJSObject
.
unblock
(
)
)
;
info
(
"
Wait
for
polling
and
unblock
(
after
opening
statistics
panel
)
"
)
;
await
onNetworkEvents
;
await
teardown
(
monitor
)
;
}
)
;
