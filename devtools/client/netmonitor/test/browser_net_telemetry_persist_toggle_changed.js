"
use
strict
"
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
function
togglePersistLogsOption
(
monitor
)
{
clickSettingsMenuItem
(
monitor
"
persist
-
logs
"
)
;
}
function
ensurePersistLogsCheckedState
(
monitor
isChecked
)
{
openSettingsMenu
(
monitor
)
;
const
persistNode
=
getSettingsMenuItem
(
monitor
"
persist
-
logs
"
)
;
return
!
!
persistNode
?
.
getAttribute
(
"
aria
-
checked
"
)
=
=
=
isChecked
;
}
add_task
(
async
function
(
)
{
const
{
monitor
}
=
await
initNetMonitor
(
SINGLE_GET_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
await
waitForAllNetworkUpdateEvents
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
TelemetryTestUtils
.
assertNumberOfEvents
(
0
)
;
let
onPersistChanged
=
monitor
.
panelWin
.
api
.
once
(
TEST_EVENTS
.
PERSIST_CHANGED
)
;
togglePersistLogsOption
(
monitor
)
;
await
waitUntil
(
(
)
=
>
ensurePersistLogsCheckedState
(
monitor
true
)
)
;
await
onPersistChanged
;
onPersistChanged
=
monitor
.
panelWin
.
api
.
once
(
TEST_EVENTS
.
PERSIST_CHANGED
)
;
togglePersistLogsOption
(
monitor
)
;
await
waitUntil
(
(
)
=
>
ensurePersistLogsCheckedState
(
monitor
false
)
)
;
await
onPersistChanged
;
const
expectedEvents
=
[
{
category
:
"
devtools
.
main
"
method
:
"
persist_changed
"
object
:
"
netmonitor
"
value
:
"
true
"
}
{
category
:
"
devtools
.
main
"
method
:
"
persist_changed
"
object
:
"
netmonitor
"
value
:
"
false
"
}
]
;
const
filter
=
{
category
:
"
devtools
.
main
"
method
:
"
persist_changed
"
object
:
"
netmonitor
"
}
;
await
waitForAllNetworkUpdateEvents
(
)
;
await
TelemetryTestUtils
.
assertEvents
(
expectedEvents
filter
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
netmonitor
.
persistlog
"
false
)
;
return
teardown
(
monitor
)
;
}
)
;
