"
use
strict
"
;
add_task
(
async
function
(
)
{
await
testForGivenDir
(
"
ltr
"
)
;
await
testForGivenDir
(
"
rtl
"
)
;
}
)
;
async
function
testForGivenDir
(
dir
)
{
if
(
dir
=
=
=
"
rtl
"
)
{
await
pushPref
(
"
intl
.
l10n
.
pseudo
"
"
bidi
"
)
;
}
else
{
await
pushPref
(
"
intl
.
l10n
.
pseudo
"
"
"
)
;
}
Services
.
prefs
.
clearUserPref
(
"
devtools
.
netmonitor
.
visibleColumns
"
)
;
const
initialColumnData
=
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
columnsData
"
)
;
let
visibleColumns
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
visibleColumns
"
)
)
;
const
{
monitor
}
=
await
initNetMonitor
(
SIMPLE_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
windowRequire
store
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
const
wait
=
waitForNetworkEvents
(
monitor
1
)
;
await
reloadBrowser
(
)
;
await
wait
;
const
headers
=
document
.
querySelector
(
"
.
requests
-
list
-
headers
"
)
;
const
parentWidth
=
headers
.
getBoundingClientRect
(
)
.
width
;
info
(
"
Resize
file
&
check
changed
prefs
.
.
.
"
)
;
const
fileHeader
=
document
.
querySelector
(
#
requests
-
list
-
file
-
header
-
box
)
;
resizeColumn
(
fileHeader
20
parentWidth
dir
)
;
let
columnsData
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
columnsData
"
)
)
;
checkColumnsData
(
columnsData
"
file
"
20
)
;
checkColumnsData
(
columnsData
"
contentSize
"
10
)
;
checkSumOfVisibleColumns
(
columnsData
visibleColumns
)
;
info
(
"
Resize
waterfall
&
check
changed
prefs
.
.
.
"
)
;
const
waterfallHeader
=
document
.
querySelector
(
#
requests
-
list
-
waterfall
-
header
-
box
)
;
const
oldColumnsData
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
columnsData
"
)
)
;
resizeWaterfallColumn
(
waterfallHeader
30
parentWidth
dir
)
;
columnsData
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
columnsData
"
)
)
;
checkColumnsData
(
columnsData
"
waterfall
"
30
)
;
checkSumOfVisibleColumns
(
columnsData
visibleColumns
)
;
checkAllColumnsChanged
(
columnsData
oldColumnsData
visibleColumns
)
;
info
(
"
Checking
alignment
of
columns
and
headers
.
.
.
"
)
;
const
requestsContainer
=
document
.
querySelector
(
"
.
requests
-
list
-
row
-
group
"
)
;
testColumnsAlignment
(
headers
requestsContainer
)
;
info
(
"
Hide
all
but
2
columns
-
size
&
waterfall
and
check
resizing
.
.
.
"
)
;
await
hideMoreColumns
(
monitor
[
"
status
"
"
method
"
"
domain
"
"
file
"
"
initiator
"
"
type
"
"
transferred
"
]
)
;
resizeWaterfallColumn
(
waterfallHeader
50
parentWidth
dir
)
;
columnsData
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
columnsData
"
)
)
;
visibleColumns
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
visibleColumns
"
)
)
;
checkColumnsData
(
columnsData
"
contentSize
"
50
)
;
checkColumnsData
(
columnsData
"
waterfall
"
50
)
;
checkSumOfVisibleColumns
(
columnsData
visibleColumns
)
;
info
(
"
Hide
all
but
2
columns
-
domain
&
file
and
check
resizing
.
.
.
"
)
;
await
showMoreColumns
(
monitor
[
"
domain
"
"
file
"
]
)
;
await
hideMoreColumns
(
monitor
[
"
contentSize
"
"
waterfall
"
]
)
;
const
domainHeader
=
document
.
querySelector
(
#
requests
-
list
-
domain
-
header
-
box
)
;
resizeColumn
(
domainHeader
50
parentWidth
dir
)
;
columnsData
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
columnsData
"
)
)
;
visibleColumns
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
visibleColumns
"
)
)
;
checkColumnsData
(
columnsData
"
domain
"
50
)
;
checkColumnsData
(
columnsData
"
file
"
50
)
;
checkSumOfVisibleColumns
(
columnsData
visibleColumns
)
;
Services
.
prefs
.
setCharPref
(
"
devtools
.
netmonitor
.
columnsData
"
initialColumnData
)
;
return
teardown
(
monitor
)
;
}
async
function
hideMoreColumns
(
monitor
arr
)
{
for
(
let
i
=
0
;
i
<
arr
.
length
;
i
+
+
)
{
await
hideColumn
(
monitor
arr
[
i
]
)
;
}
}
async
function
showMoreColumns
(
monitor
arr
)
{
for
(
let
i
=
0
;
i
<
arr
.
length
;
i
+
+
)
{
await
showColumn
(
monitor
arr
[
i
]
)
;
}
}
function
checkColumnsData
(
columnsData
column
expectedWidth
)
{
const
widthInPref
=
Math
.
round
(
getWidthFromPref
(
columnsData
column
)
)
;
is
(
widthInPref
expectedWidth
"
Column
"
+
column
+
"
has
expected
size
.
"
)
;
}
function
checkSumOfVisibleColumns
(
columnsData
visibleColumns
)
{
let
sum
=
0
;
visibleColumns
.
forEach
(
column
=
>
{
sum
+
=
getWidthFromPref
(
columnsData
column
)
;
}
)
;
sum
=
Math
.
round
(
sum
)
;
is
(
sum
100
"
All
visible
columns
cover
100
%
.
"
)
;
}
function
getWidthFromPref
(
columnsData
column
)
{
const
widthInPref
=
columnsData
.
find
(
function
(
element
)
{
return
element
.
name
=
=
=
column
;
}
)
.
width
;
return
widthInPref
;
}
function
checkAllColumnsChanged
(
columnsData
oldColumnsData
visibleColumns
)
{
const
oldWaterfallWidth
=
getWidthFromPref
(
oldColumnsData
"
waterfall
"
)
;
const
newWaterfallWidth
=
getWidthFromPref
(
columnsData
"
waterfall
"
)
;
visibleColumns
.
forEach
(
column
=
>
{
if
(
column
!
=
=
"
waterfall
"
)
{
const
oldWidth
=
getWidthFromPref
(
oldColumnsData
column
)
;
const
newWidth
=
getWidthFromPref
(
columnsData
column
)
;
if
(
oldWaterfallWidth
>
newWaterfallWidth
)
{
is
(
oldWidth
<
newWidth
true
"
Column
"
+
column
+
"
has
changed
width
correctly
.
"
)
;
}
if
(
oldWaterfallWidth
<
newWaterfallWidth
)
{
is
(
oldWidth
>
newWidth
true
"
Column
"
+
column
+
"
has
changed
width
correctly
.
"
)
;
}
}
}
)
;
}
