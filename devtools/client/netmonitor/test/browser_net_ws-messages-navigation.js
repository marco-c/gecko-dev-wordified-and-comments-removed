"
use
strict
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
netmonitor
.
features
.
webSockets
"
true
)
;
const
{
tab
monitor
}
=
await
initNetMonitor
(
WS_PAGE_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
const
onNetworkEvents
=
waitForNetworkEvents
(
monitor
1
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
openConnection
(
0
)
;
Array
(
5
)
.
fill
(
undefined
)
.
forEach
(
(
_
index
)
=
>
{
content
.
wrappedJSObject
.
sendData
(
index
)
;
}
)
;
}
)
;
await
onNetworkEvents
;
const
requests
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
;
is
(
requests
.
length
1
"
There
should
be
one
request
"
)
;
const
wait
=
waitForDOM
(
document
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
10
)
;
await
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
requests
[
0
]
)
;
await
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
document
.
querySelector
(
"
#
response
-
tab
"
)
)
;
await
wait
;
const
frames
=
document
.
querySelectorAll
(
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
)
;
is
(
frames
.
length
10
"
There
should
be
ten
frames
"
)
;
await
waitForTick
(
)
;
const
waitForSelected
=
waitForDOM
(
document
.
message
-
list
-
item
:
nth
-
child
(
{
2
}
)
.
selected
)
;
await
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
frames
[
0
]
)
;
await
waitForSelected
;
const
checkSelected
=
messageRowNumber
=
>
{
is
(
Array
.
from
(
frames
)
.
findIndex
(
el
=
>
el
.
matches
(
"
.
selected
"
)
)
messageRowNumber
-
1
Message
{
messageRowNumber
}
should
be
selected
.
)
;
}
;
frames
[
0
]
.
focus
(
)
;
checkSelected
(
1
)
;
EventUtils
.
sendKey
(
"
DOWN
"
window
)
;
checkSelected
(
2
)
;
EventUtils
.
sendKey
(
"
UP
"
window
)
;
checkSelected
(
1
)
;
EventUtils
.
sendKey
(
"
PAGE_DOWN
"
window
)
;
checkSelected
(
3
)
;
EventUtils
.
sendKey
(
"
PAGE_UP
"
window
)
;
checkSelected
(
1
)
;
EventUtils
.
sendKey
(
"
END
"
window
)
;
checkSelected
(
10
)
;
EventUtils
.
sendKey
(
"
HOME
"
window
)
;
checkSelected
(
1
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
closeConnection
(
)
;
}
)
;
await
teardown
(
monitor
)
;
}
)
;
