"
use
strict
"
;
add_task
(
function
*
(
)
{
let
{
tab
monitor
}
=
yield
initNetMonitor
(
CUSTOM_GET_URL
)
;
let
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
let
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
let
{
EVENTS
}
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
info
(
"
Requesting
a
resource
that
has
a
certificate
problem
.
"
)
;
let
requestsDone
=
waitForSecurityBrokenNetworkEvent
(
)
;
yield
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
function
*
(
)
{
content
.
wrappedJSObject
.
performRequests
(
1
"
https
:
/
/
nocert
.
example
.
com
"
)
;
}
)
;
yield
requestsDone
;
let
securityInfoLoaded
=
waitForDOM
(
document
"
.
security
-
info
-
value
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
document
.
querySelector
(
"
.
network
-
details
-
panel
-
toggle
"
)
)
;
yield
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
#
security
-
tab
"
)
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
document
.
querySelector
(
"
#
security
-
tab
"
)
)
;
yield
securityInfoLoaded
;
let
errormsg
=
document
.
querySelector
(
"
.
security
-
info
-
value
"
)
;
isnot
(
errormsg
.
textContent
"
"
"
Error
message
is
not
empty
.
"
)
;
return
teardown
(
monitor
)
;
function
waitForSecurityBrokenNetworkEvent
(
)
{
let
awaitedEvents
=
[
"
UPDATING_REQUEST_HEADERS
"
"
RECEIVED_REQUEST_HEADERS
"
"
UPDATING_REQUEST_COOKIES
"
"
RECEIVED_REQUEST_COOKIES
"
"
UPDATING_EVENT_TIMINGS
"
"
RECEIVED_EVENT_TIMINGS
"
"
UPDATING_SECURITY_INFO
"
"
RECEIVED_SECURITY_INFO
"
]
;
let
promises
=
awaitedEvents
.
map
(
(
event
)
=
>
{
return
monitor
.
panelWin
.
once
(
EVENTS
[
event
]
)
;
}
)
;
return
Promise
.
all
(
promises
)
;
}
}
)
;
