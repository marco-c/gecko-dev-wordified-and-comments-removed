"
use
strict
"
;
const
ORIGINAL_SCRIPT
=
const
div
=
document
.
createElement
(
"
div
"
)
;
div
.
id
=
"
created
-
by
-
original
"
;
document
.
body
.
appendChild
(
div
)
;
;
const
OVERRIDDEN_SCRIPT
=
const
div
=
document
.
createElement
(
"
div
"
)
;
div
.
id
=
"
created
-
by
-
override
"
;
document
.
body
.
appendChild
(
div
)
;
;
const
ORIGINAL_STYLESHEET
=
body
{
color
:
red
;
}
;
const
OVERRIDDEN_STYLESHEET
=
body
{
color
:
blue
;
}
;
const
ORIGINAL_HTML
=
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
/
>
<
title
>
Original
title
<
/
title
>
<
/
head
>
<
body
>
Original
content
<
script
type
=
"
text
/
javascript
"
src
=
"
/
script
.
js
"
>
<
/
script
>
<
style
>
import
"
/
style
.
css
"
<
/
style
>
<
/
body
>
<
/
html
>
;
const
OVERRIDDEN_HTML
=
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
/
>
<
title
>
Overridden
title
<
/
title
>
<
/
head
>
<
body
>
Overridden
content
<
/
body
>
<
/
html
>
;
function
startOverridesHTTPServer
(
)
{
const
httpServer
=
createTestHTTPServer
(
)
;
const
baseURL
=
http
:
/
/
localhost
:
{
httpServer
.
identity
.
primaryPort
}
/
;
httpServer
.
registerContentType
(
"
html
"
"
text
/
html
"
)
;
httpServer
.
registerContentType
(
"
js
"
"
application
/
javascript
"
)
;
httpServer
.
registerPathHandler
(
"
/
index
.
html
"
(
request
response
)
=
>
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
write
(
ORIGINAL_HTML
)
;
}
)
;
httpServer
.
registerPathHandler
(
"
/
script
.
js
"
(
request
response
)
=
>
{
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
javascript
"
)
;
response
.
write
(
ORIGINAL_SCRIPT
)
;
}
)
;
httpServer
.
registerPathHandler
(
"
/
style
.
css
"
(
request
response
)
=
>
{
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
css
;
charset
=
utf
-
8
"
)
;
response
.
write
(
ORIGINAL_STYLESHEET
)
;
}
)
;
return
baseURL
;
}
async
function
assertOverrideColumnStatus
(
monitor
{
visible
}
)
{
const
doc
=
monitor
.
panelWin
.
document
;
is
(
!
!
doc
.
querySelector
(
#
requests
-
list
-
override
-
button
)
visible
Column
Override
should
be
{
visible
?
"
visible
"
:
"
hidden
"
}
)
;
const
overrideColumnToggle
=
await
openContextMenuForItem
(
monitor
doc
.
querySelector
(
"
#
requests
-
list
-
status
-
button
"
)
"
request
-
list
-
header
-
override
-
toggle
"
)
;
if
(
visible
)
{
is
(
overrideColumnToggle
.
getAttribute
(
"
checked
"
)
"
true
"
"
The
Override
column
menu
item
is
checked
"
)
;
}
else
{
ok
(
!
overrideColumnToggle
.
getAttribute
(
"
checked
"
)
"
The
Override
column
menu
item
is
unchecked
"
)
;
}
is
(
overrideColumnToggle
.
disabled
true
"
The
Override
column
menu
item
is
disabled
"
)
;
await
hideContextMenu
(
overrideColumnToggle
.
parentNode
)
;
}
function
assertOverrideCellStatus
(
request
{
overridden
}
)
{
is
(
request
.
querySelector
(
"
.
requests
-
list
-
override
"
)
.
classList
.
contains
(
"
request
-
override
-
enabled
"
)
overridden
The
request
is
{
overridden
?
"
"
:
"
not
"
}
shown
as
overridden
)
;
}
async
function
openContextMenuForItem
(
monitor
el
id
)
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
contextmenu
"
}
el
)
;
const
menuItem
=
getContextMenuItem
(
monitor
id
)
;
const
popup
=
menuItem
.
parentNode
;
if
(
popup
.
state
!
=
"
open
"
)
{
await
BrowserTestUtils
.
waitForEvent
(
popup
"
popupshown
"
)
;
}
return
menuItem
;
}
async
function
setNetworkOverride
(
monitor
request
overrideFileName
overrideContent
)
{
const
overridePath
=
prepareFilePicker
(
overrideFileName
monitor
.
toolbox
.
topWindow
)
;
info
(
"
Select
the
request
to
update
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
request
)
;
info
(
"
Use
set
override
from
the
context
menu
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
contextmenu
"
}
request
)
;
const
waitForSetOverride
=
waitForDispatch
(
monitor
.
toolbox
.
store
"
SET_NETWORK_OVERRIDE
"
)
;
await
selectContextMenuItem
(
monitor
"
request
-
list
-
context
-
set
-
override
"
)
;
await
waitForSetOverride
;
info
(
Wait
for
{
overrideFileName
}
to
be
saved
to
disk
and
re
-
write
it
)
;
await
writeTextContentToPath
(
overrideContent
overridePath
)
;
return
overridePath
;
}
async
function
removeNetworkOverride
(
monitor
request
)
{
info
(
"
Select
the
request
to
update
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
request
)
;
info
(
"
Use
remove
override
from
the
context
menu
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
contextmenu
"
}
request
)
;
const
waitForSetOverride
=
waitForDispatch
(
monitor
.
toolbox
.
store
"
REMOVE_NETWORK_OVERRIDE
"
)
;
await
selectContextMenuItem
(
monitor
"
request
-
list
-
context
-
remove
-
override
"
)
;
await
waitForSetOverride
;
}
function
prepareFilePicker
(
filename
chromeWindow
)
{
const
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
chromeWindow
.
browsingContext
)
;
const
nsiFile
=
new
FileUtils
.
File
(
PathUtils
.
join
(
PathUtils
.
tempDir
filename
)
)
;
MockFilePicker
.
setFiles
(
[
nsiFile
]
)
;
return
nsiFile
.
path
;
}
async
function
writeTextContentToPath
(
textContent
path
)
{
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
IOUtils
.
exists
(
path
)
)
;
await
BrowserTestUtils
.
waitForCondition
(
async
(
)
=
>
{
const
{
size
}
=
await
IOUtils
.
stat
(
path
)
;
return
size
>
0
;
}
)
;
SpecialPowers
.
MockFilePicker
.
cleanup
(
)
;
await
IOUtils
.
write
(
path
new
TextEncoder
(
)
.
encode
(
textContent
)
)
;
}
async
function
setupNetworkOverridesTest
(
)
{
const
baseURL
=
startOverridesHTTPServer
(
)
;
const
TEST_URL
=
baseURL
+
"
index
.
html
"
;
const
{
monitor
tab
}
=
await
initNetMonitor
(
TEST_URL
{
requestCount
:
3
}
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
const
waitForEvents
=
waitForNetworkEvents
(
monitor
3
)
;
await
navigateTo
(
TEST_URL
)
;
await
waitForEvents
;
return
{
monitor
tab
document
}
;
}
