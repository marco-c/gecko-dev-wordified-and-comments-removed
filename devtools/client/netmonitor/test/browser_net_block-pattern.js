"
use
strict
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
netmonitor
.
features
.
requestBlocking
"
true
)
;
const
{
tab
monitor
}
=
await
initNetMonitor
(
CUSTOM_GET_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
store
.
dispatch
(
Actions
.
toggleRequestBlockingPanel
(
)
)
;
const
type
=
string
=
>
{
for
(
const
ch
of
string
)
{
EventUtils
.
synthesizeKey
(
ch
{
}
monitor
.
panelWin
)
;
}
}
;
await
waitUntil
(
(
)
=
>
{
return
document
.
querySelector
(
"
#
network
-
action
-
bar
-
blocked
-
panel
.
request
-
blocking
-
add
-
form
input
.
devtools
-
searchinput
:
focus
"
)
;
}
)
;
type
(
"
test1
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
type
(
"
test
/
*
/
test3
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
store
.
dispatch
(
Actions
.
toggleRequestBlockingPanel
(
)
)
;
const
TEST_URL_1
=
SEARCH_SJS
+
"
?
value
=
test1
"
;
const
TEST_URL_2
=
SEARCH_SJS
+
"
?
value
=
test2
"
;
const
TEST_URL_3
=
SEARCH_SJS
+
"
test
/
something
/
test3
"
;
const
TEST_URL_4
=
SEARCH_SJS
+
"
test
/
something
/
test4
"
;
let
wait
=
waitForNetworkEvents
(
monitor
4
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
TEST_URL_1
async
function
(
url
)
{
content
.
wrappedJSObject
.
performRequests
(
1
url
)
;
}
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
TEST_URL_2
async
function
(
url
)
{
content
.
wrappedJSObject
.
performRequests
(
1
url
)
;
}
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
TEST_URL_3
async
function
(
url
)
{
content
.
wrappedJSObject
.
performRequests
(
1
url
)
;
}
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
TEST_URL_4
async
function
(
url
)
{
content
.
wrappedJSObject
.
performRequests
(
1
url
)
;
}
)
;
await
wait
;
await
waitForDOMIfNeeded
(
document
"
.
request
-
list
-
item
"
4
)
;
let
requestItems
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
;
ok
(
checkRequestListItemBlocked
(
requestItems
[
0
]
)
"
The
first
request
was
blocked
"
)
;
ok
(
!
checkRequestListItemBlocked
(
requestItems
[
1
]
)
"
The
second
request
was
not
blocked
"
)
;
ok
(
checkRequestListItemBlocked
(
requestItems
[
2
]
)
"
The
third
request
was
blocked
"
)
;
ok
(
!
checkRequestListItemBlocked
(
requestItems
[
3
]
)
"
The
fourth
request
was
not
blocked
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
requestItems
[
0
]
)
;
await
toggleBlockedUrl
(
requestItems
[
0
]
monitor
store
"
unblock
"
)
;
ok
(
!
document
.
querySelector
(
"
.
request
-
blocking
-
list
.
devtools
-
checkbox
"
)
.
checked
"
The
blocking
pattern
is
disabled
from
context
menu
"
)
;
wait
=
waitForNetworkEvents
(
monitor
1
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
TEST_URL_1
async
function
(
url
)
{
content
.
wrappedJSObject
.
performRequests
(
1
url
)
;
}
)
;
await
wait
;
await
waitForDOMIfNeeded
(
document
"
.
request
-
list
-
item
"
5
)
;
requestItems
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
;
ok
(
!
checkRequestListItemBlocked
(
requestItems
[
4
]
)
"
The
fifth
request
was
not
blocked
"
)
;
await
teardown
(
monitor
)
;
}
)
;
function
checkRequestListItemBlocked
(
item
)
{
return
item
.
className
.
includes
(
"
blocked
"
)
;
}
