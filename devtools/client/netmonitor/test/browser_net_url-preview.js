"
use
strict
"
;
add_task
(
async
function
(
)
{
const
{
monitor
tab
}
=
await
initNetMonitor
(
PARAMS_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
await
performRequests
(
monitor
tab
3
)
;
let
wait
=
waitForDOM
(
document
"
#
headers
-
panel
.
url
-
preview
"
1
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
0
]
)
;
await
wait
;
await
toggleUrlPreview
(
true
document
monitor
)
;
wait
=
waitForDOM
(
document
"
#
headers
-
panel
.
url
-
preview
"
1
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
1
]
)
;
await
wait
;
const
noOfVisibleRowsAfterExpand
=
document
.
querySelectorAll
(
"
#
headers
-
panel
.
url
-
preview
tr
.
treeRow
"
)
.
length
;
ok
(
noOfVisibleRowsAfterExpand
>
1
"
The
url
preview
should
still
be
expanded
.
"
)
;
await
toggleUrlPreview
(
false
document
monitor
)
;
wait
=
waitForDOM
(
document
"
#
headers
-
panel
.
url
-
preview
"
1
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
2
]
)
;
await
wait
;
const
noOfVisibleRowsAfterCollapse
=
document
.
querySelectorAll
(
"
#
headers
-
panel
.
url
-
preview
tr
.
treeRow
"
)
.
length
;
ok
(
noOfVisibleRowsAfterCollapse
=
=
1
"
The
url
preview
should
still
be
collapsed
.
"
)
;
return
teardown
(
monitor
)
;
}
)
;
add_task
(
async
function
(
)
{
const
{
monitor
}
=
await
initNetMonitor
(
PARAMS_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
const
netWorkEvent
=
waitForNetworkEvents
(
monitor
2
)
;
await
performRequestsInContent
(
[
{
url
:
"
sjs_content
-
type
-
test
-
server
.
sjs
?
a
=
3
&
a
=
45
&
a
=
60
"
}
{
url
:
"
sjs_content
-
type
-
test
-
server
.
sjs
?
x
=
5
&
a
=
3
&
a
=
4
&
a
=
3
&
b
=
3
"
}
{
url
:
"
sjs_content
-
type
-
test
-
server
.
sjs
?
x
=
5
&
a
=
3
&
a
=
4
&
a
=
3
&
query
=
3
"
}
]
)
;
await
netWorkEvent
;
let
urlPreview
=
waitForDOM
(
document
"
#
headers
-
panel
.
url
-
preview
"
1
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
0
]
)
;
let
urlPreviewValue
=
(
await
urlPreview
)
[
0
]
.
textContent
;
ok
(
urlPreviewValue
.
endsWith
(
"
?
a
=
3
&
a
=
45
&
a
=
60
"
)
"
The
parameters
in
the
url
preview
match
.
"
)
;
urlPreview
=
waitForDOM
(
document
"
#
headers
-
panel
.
url
-
preview
"
1
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
1
]
)
;
urlPreviewValue
=
(
await
urlPreview
)
[
0
]
.
textContent
;
ok
(
urlPreviewValue
.
endsWith
(
"
?
x
=
5
&
a
=
3
&
a
=
4
&
a
=
3
&
b
=
3
"
)
"
The
parameters
in
the
url
preview
match
.
"
)
;
urlPreview
=
waitForDOM
(
document
"
#
headers
-
panel
.
url
-
preview
"
1
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
2
]
)
;
urlPreviewValue
=
(
await
urlPreview
)
[
0
]
.
textContent
;
ok
(
urlPreviewValue
.
endsWith
(
"
?
x
=
5
&
a
=
3
&
a
=
4
&
a
=
3
&
query
=
3
"
)
"
The
parameters
in
the
url
preview
match
.
"
)
;
await
toggleUrlPreview
(
true
document
monitor
)
;
is
(
document
.
querySelector
(
"
#
headers
-
panel
.
url
-
preview
tr
#
\
\
/
GET
\
\
/
query
\
\
/
query
.
treeLabelCell
"
)
.
textContent
"
query
"
"
Contains
the
query
parameter
"
)
;
return
teardown
(
monitor
)
;
}
)
;
async
function
toggleUrlPreview
(
shouldExpand
document
monitor
)
{
const
wait
=
waitUntil
(
(
)
=
>
{
const
rowSize
=
document
.
querySelectorAll
(
"
#
headers
-
panel
.
url
-
preview
tr
.
treeRow
"
)
.
length
;
return
shouldExpand
?
rowSize
>
1
:
rowSize
=
=
1
;
}
)
;
clickElement
(
document
.
querySelector
(
"
#
headers
-
panel
.
url
-
preview
tr
:
first
-
child
span
.
treeIcon
.
theme
-
twisty
"
)
monitor
)
;
return
wait
;
}
