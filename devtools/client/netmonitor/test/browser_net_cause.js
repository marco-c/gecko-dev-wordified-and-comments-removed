"
use
strict
"
;
const
CAUSE_FILE_NAME
=
"
html_cause
-
test
-
page
.
html
"
;
const
CAUSE_URL
=
EXAMPLE_URL
+
CAUSE_FILE_NAME
;
const
EXPECTED_REQUESTS
=
[
{
method
:
"
GET
"
url
:
CAUSE_URL
causeType
:
"
document
"
causeUri
:
null
stack
:
true
}
{
method
:
"
GET
"
url
:
EXAMPLE_URL
+
"
stylesheet_request
"
causeType
:
"
stylesheet
"
causeUri
:
CAUSE_URL
stack
:
false
}
{
method
:
"
GET
"
url
:
EXAMPLE_URL
+
"
img_request
"
causeType
:
"
img
"
causeUri
:
CAUSE_URL
stack
:
false
}
{
method
:
"
GET
"
url
:
EXAMPLE_URL
+
"
xhr_request
"
causeType
:
"
xhr
"
causeUri
:
CAUSE_URL
stack
:
[
{
fn
:
"
performXhrRequest
"
file
:
CAUSE_FILE_NAME
line
:
22
}
]
}
{
method
:
"
GET
"
url
:
EXAMPLE_URL
+
"
fetch_request
"
causeType
:
"
fetch
"
causeUri
:
CAUSE_URL
stack
:
[
{
fn
:
"
performFetchRequest
"
file
:
CAUSE_FILE_NAME
line
:
26
}
]
}
{
method
:
"
GET
"
url
:
EXAMPLE_URL
+
"
promise_fetch_request
"
causeType
:
"
fetch
"
causeUri
:
CAUSE_URL
stack
:
[
{
fn
:
"
performPromiseFetchRequest
"
file
:
CAUSE_FILE_NAME
line
:
38
}
{
fn
:
null
file
:
CAUSE_FILE_NAME
line
:
37
asyncCause
:
"
promise
callback
"
}
]
}
{
method
:
"
GET
"
url
:
EXAMPLE_URL
+
"
timeout_fetch_request
"
causeType
:
"
fetch
"
causeUri
:
CAUSE_URL
stack
:
[
{
fn
:
"
performTimeoutFetchRequest
"
file
:
CAUSE_FILE_NAME
line
:
40
}
{
fn
:
"
performPromiseFetchRequest
"
file
:
CAUSE_FILE_NAME
line
:
39
asyncCause
:
"
setTimeout
handler
"
}
]
}
{
method
:
"
POST
"
url
:
EXAMPLE_URL
+
"
beacon_request
"
causeType
:
"
beacon
"
causeUri
:
CAUSE_URL
stack
:
[
{
fn
:
"
performBeaconRequest
"
file
:
CAUSE_FILE_NAME
line
:
30
}
]
}
]
;
add_task
(
function
*
(
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
javascript
.
options
.
asyncstack
"
true
]
]
}
)
;
let
{
tab
monitor
}
=
yield
initNetMonitor
(
SIMPLE_URL
)
;
let
{
document
gStore
windowRequire
}
=
monitor
.
panelWin
;
let
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
actions
/
index
"
)
;
let
{
getDisplayedRequests
getSortedRequests
}
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
selectors
/
index
"
)
;
gStore
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
let
wait
=
waitForNetworkEvents
(
monitor
EXPECTED_REQUESTS
.
length
)
;
tab
.
linkedBrowser
.
loadURI
(
CAUSE_URL
)
;
yield
wait
;
is
(
gStore
.
getState
(
)
.
requests
.
requests
.
size
EXPECTED_REQUESTS
.
length
"
All
the
page
events
should
be
recorded
.
"
)
;
EXPECTED_REQUESTS
.
forEach
(
(
spec
i
)
=
>
{
let
{
method
url
causeType
causeUri
stack
}
=
spec
;
let
requestItem
=
getSortedRequests
(
gStore
.
getState
(
)
)
.
get
(
i
)
;
verifyRequestItemTarget
(
document
getDisplayedRequests
(
gStore
.
getState
(
)
)
requestItem
method
url
{
cause
:
{
type
:
causeType
loadingDocumentUri
:
causeUri
}
}
)
;
let
{
stacktrace
}
=
requestItem
.
cause
;
let
stackLen
=
stacktrace
?
stacktrace
.
length
:
0
;
if
(
stack
)
{
ok
(
stacktrace
Request
#
{
i
}
has
a
stacktrace
)
;
ok
(
stackLen
>
0
Request
#
{
i
}
(
{
causeType
}
)
has
a
stacktrace
with
{
stackLen
}
items
)
;
if
(
Array
.
isArray
(
stack
)
)
{
stack
.
forEach
(
(
frame
j
)
=
>
{
is
(
stacktrace
[
j
]
.
functionName
frame
.
fn
Request
#
{
i
}
has
the
correct
function
on
JS
stack
frame
#
{
j
}
)
;
is
(
stacktrace
[
j
]
.
filename
.
split
(
"
/
"
)
.
pop
(
)
frame
.
file
Request
#
{
i
}
has
the
correct
file
on
JS
stack
frame
#
{
j
}
)
;
is
(
stacktrace
[
j
]
.
lineNumber
frame
.
line
Request
#
{
i
}
has
the
correct
line
number
on
JS
stack
frame
#
{
j
}
)
;
is
(
stacktrace
[
j
]
.
asyncCause
frame
.
asyncCause
Request
#
{
i
}
has
the
correct
async
cause
on
JS
stack
frame
#
{
j
}
)
;
}
)
;
}
}
else
{
is
(
stackLen
0
Request
#
{
i
}
(
{
causeType
}
)
has
an
empty
stacktrace
)
;
}
}
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
document
.
querySelector
(
"
#
requests
-
list
-
cause
-
button
"
)
)
;
let
expectedOrder
=
EXPECTED_REQUESTS
.
map
(
r
=
>
r
.
causeType
)
.
sort
(
)
;
expectedOrder
.
forEach
(
(
expectedCause
i
)
=
>
{
const
cause
=
getSortedRequests
(
gStore
.
getState
(
)
)
.
get
(
i
)
.
cause
.
type
;
is
(
cause
expectedCause
The
request
#
{
i
}
has
the
expected
cause
after
sorting
)
;
}
)
;
yield
teardown
(
monitor
)
;
}
)
;
