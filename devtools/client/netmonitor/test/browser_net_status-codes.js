"
use
strict
"
;
add_task
(
async
function
(
)
{
const
{
L10N
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
"
)
;
const
{
tab
monitor
}
=
await
initNetMonitor
(
STATUS_CODES_URL
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
const
{
getDisplayedRequests
getSortedRequests
}
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
selectors
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
const
requestItems
=
[
]
;
const
REQUEST_DATA
=
[
{
method
:
"
GET
"
uri
:
STATUS_CODES_SJS
+
"
?
sts
=
100
"
correctUri
:
STATUS_CODES_SJS
+
"
?
sts
=
100
"
details
:
{
status
:
101
statusText
:
"
Switching
Protocols
"
type
:
"
plain
"
fullMimeType
:
"
text
/
plain
;
charset
=
utf
-
8
"
size
:
L10N
.
getFormatStrWithNumbers
(
"
networkMenu
.
sizeB
"
0
)
time
:
true
}
}
{
method
:
"
GET
"
uri
:
STATUS_CODES_SJS
+
"
?
sts
=
200
"
correctUri
:
STATUS_CODES_SJS
+
"
?
sts
=
200
"
details
:
{
status
:
202
statusText
:
"
Created
"
type
:
"
plain
"
fullMimeType
:
"
text
/
plain
;
charset
=
utf
-
8
"
size
:
L10N
.
getFormatStrWithNumbers
(
"
networkMenu
.
sizeB
"
22
)
time
:
true
}
}
{
method
:
"
GET
"
uri
:
STATUS_CODES_SJS
+
"
?
sts
=
300
"
correctUri
:
STATUS_CODES_SJS
+
"
?
sts
=
300
"
details
:
{
status
:
303
statusText
:
"
See
Other
"
type
:
"
plain
"
fullMimeType
:
"
text
/
plain
;
charset
=
utf
-
8
"
size
:
L10N
.
getFormatStrWithNumbers
(
"
networkMenu
.
sizeB
"
22
)
time
:
true
}
}
{
method
:
"
GET
"
uri
:
STATUS_CODES_SJS
+
"
?
sts
=
400
"
correctUri
:
STATUS_CODES_SJS
+
"
?
sts
=
400
"
details
:
{
status
:
404
statusText
:
"
Not
Found
"
type
:
"
plain
"
fullMimeType
:
"
text
/
plain
;
charset
=
utf
-
8
"
size
:
L10N
.
getFormatStrWithNumbers
(
"
networkMenu
.
sizeB
"
22
)
time
:
true
}
}
{
method
:
"
GET
"
uri
:
STATUS_CODES_SJS
+
"
?
sts
=
500
"
correctUri
:
STATUS_CODES_SJS
+
"
?
sts
=
500
"
details
:
{
status
:
501
statusText
:
"
Not
Implemented
"
type
:
"
plain
"
fullMimeType
:
"
text
/
plain
;
charset
=
utf
-
8
"
size
:
L10N
.
getFormatStrWithNumbers
(
"
networkMenu
.
sizeB
"
22
)
time
:
true
}
}
]
;
await
performRequests
(
monitor
tab
5
)
;
info
(
"
Performing
tests
"
)
;
await
verifyRequests
(
)
;
await
testTab
(
0
testHeaders
)
;
await
testTab
(
2
testParams
)
;
return
teardown
(
monitor
)
;
async
function
verifyRequests
(
)
{
const
requestListItems
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
;
for
(
const
requestItem
of
requestListItems
)
{
requestItem
.
scrollIntoView
(
)
;
const
requestsListStatus
=
requestItem
.
querySelector
(
"
.
status
-
code
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseover
"
}
requestsListStatus
)
;
await
waitUntil
(
(
)
=
>
requestsListStatus
.
title
)
;
}
info
(
"
Verifying
requests
contain
correct
information
.
"
)
;
let
index
=
0
;
for
(
const
request
of
REQUEST_DATA
)
{
const
item
=
getSortedRequests
(
store
.
getState
(
)
)
.
get
(
index
)
;
requestItems
[
index
]
=
item
;
info
(
"
Verifying
request
#
"
+
index
)
;
await
verifyRequestItemTarget
(
document
getDisplayedRequests
(
store
.
getState
(
)
)
item
request
.
method
request
.
uri
request
.
details
)
;
index
+
+
;
}
}
async
function
testTab
(
tabIdx
testFn
)
{
let
counter
=
0
;
for
(
const
item
of
REQUEST_DATA
)
{
info
(
"
Testing
tab
#
"
+
tabIdx
+
"
to
update
with
request
#
"
+
counter
)
;
await
testFn
(
item
counter
)
;
counter
+
+
;
}
}
async
function
testHeaders
(
data
index
)
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
index
]
)
;
await
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
#
headers
-
panel
.
tabpanel
-
summary
-
value
.
textbox
-
input
"
)
)
;
const
panel
=
document
.
querySelector
(
"
#
headers
-
panel
"
)
;
const
summaryValues
=
panel
.
querySelectorAll
(
"
.
tabpanel
-
summary
-
value
.
textbox
-
input
"
)
;
const
{
method
correctUri
details
:
{
status
statusText
}
}
=
data
;
const
statusCode
=
panel
.
querySelector
(
"
.
status
-
code
"
)
;
const
statusTextInput
=
panel
.
querySelector
(
"
.
status
-
text
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseover
"
}
statusCode
)
;
await
waitUntil
(
(
)
=
>
statusCode
.
title
)
;
is
(
summaryValues
[
0
]
.
textContent
correctUri
"
The
url
summary
value
is
incorrect
.
"
)
;
is
(
summaryValues
[
1
]
.
textContent
method
"
The
method
summary
value
is
incorrect
.
"
)
;
is
(
statusCode
.
dataset
.
code
status
"
The
status
summary
code
is
incorrect
.
"
)
;
is
(
statusCode
.
getAttribute
(
"
title
"
)
status
+
"
"
+
statusText
"
The
status
summary
value
is
incorrect
.
"
)
;
is
(
statusTextInput
.
value
statusText
"
The
status
text
value
is
incorrect
.
"
)
;
}
function
testParams
(
data
index
)
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
index
]
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
document
.
querySelector
(
"
#
params
-
tab
"
)
)
;
const
panel
=
document
.
querySelector
(
"
#
params
-
panel
"
)
;
const
statusParamValue
=
data
.
uri
.
split
(
"
=
"
)
.
pop
(
)
.
split
(
"
#
"
)
[
0
]
;
const
treeSections
=
panel
.
querySelectorAll
(
"
.
tree
-
section
"
)
;
is
(
treeSections
.
length
1
"
There
should
be
1
param
section
displayed
in
this
panel
.
"
)
;
is
(
panel
.
querySelectorAll
(
"
tr
:
not
(
.
tree
-
section
)
.
treeRow
"
)
.
length
1
"
There
should
be
1
param
row
displayed
in
this
panel
.
"
)
;
is
(
panel
.
querySelectorAll
(
"
.
empty
-
notice
"
)
.
length
0
"
The
empty
notice
should
not
be
displayed
in
this
panel
.
"
)
;
const
labels
=
panel
.
querySelectorAll
(
"
tr
:
not
(
.
tree
-
section
)
.
treeLabelCell
.
treeLabel
"
)
;
const
values
=
panel
.
querySelectorAll
(
"
tr
:
not
(
.
tree
-
section
)
.
treeValueCell
.
objectBox
"
)
;
is
(
treeSections
[
0
]
.
querySelector
(
"
.
treeLabel
"
)
.
textContent
L10N
.
getStr
(
"
paramsQueryString
"
)
"
The
params
scope
doesn
'
t
have
the
correct
title
.
"
)
;
is
(
labels
[
0
]
.
textContent
"
sts
"
"
The
param
name
was
incorrect
.
"
)
;
is
(
values
[
0
]
.
textContent
statusParamValue
"
The
param
value
was
incorrect
.
"
)
;
ok
(
panel
.
querySelector
(
"
.
treeTable
"
)
"
The
request
params
tree
view
should
be
displayed
.
"
)
;
is
(
panel
.
querySelector
(
"
.
editor
-
mount
"
)
=
=
=
null
true
"
The
request
post
data
editor
should
be
hidden
.
"
)
;
}
}
)
;
