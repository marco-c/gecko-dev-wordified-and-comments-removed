"
use
strict
"
;
var
test
=
Task
.
async
(
function
*
(
)
{
const
EXPECTED_REQUESTS
=
[
{
status
:
302
hasStack
:
true
}
{
status
:
200
hasStack
:
false
}
{
status
:
200
hasStack
:
true
}
]
;
let
[
debuggee
monitor
]
=
yield
initNetMonitor
(
CUSTOM_GET_URL
)
;
let
{
RequestsMenu
}
=
monitor
.
panelWin
.
NetMonitorView
;
RequestsMenu
.
lazyUpdate
=
false
;
debuggee
.
performRequests
(
2
HSTS_SJS
)
;
yield
waitForNetworkEvents
(
monitor
EXPECTED_REQUESTS
.
length
)
;
EXPECTED_REQUESTS
.
forEach
(
(
{
status
hasStack
}
i
)
=
>
{
let
{
attachment
}
=
RequestsMenu
.
getItemAtIndex
(
i
)
;
is
(
attachment
.
status
status
Request
#
{
i
}
has
the
expected
status
)
;
let
{
stacktrace
}
=
attachment
.
cause
;
let
stackLen
=
stacktrace
?
stacktrace
.
length
:
0
;
if
(
hasStack
)
{
ok
(
stacktrace
Request
#
{
i
}
has
a
stacktrace
)
;
ok
(
stackLen
>
0
Request
#
{
i
}
has
a
stacktrace
with
{
stackLen
}
items
)
;
}
else
{
is
(
stackLen
0
Request
#
{
i
}
has
an
empty
stacktrace
)
;
}
}
)
;
debuggee
.
performRequests
(
1
HSTS_SJS
+
"
?
reset
"
)
;
yield
waitForNetworkEvents
(
monitor
1
)
;
yield
teardown
(
monitor
)
;
finish
(
)
;
}
)
;
