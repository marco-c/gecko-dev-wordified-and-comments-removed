"
use
strict
"
;
const
POST_PAYLOAD
=
"
Plaintext
value
as
a
payload
"
;
add_task
(
async
function
(
)
{
const
{
tab
monitor
}
=
await
initNetMonitor
(
CURL_URL
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
QUOTE_WIN
=
'
"
'
;
const
QUOTE_POSIX
=
"
'
"
;
const
isWin
=
Services
.
appinfo
.
OS
=
=
=
"
WINNT
"
;
const
testData
=
isWin
?
[
{
menuItemId
:
"
request
-
list
-
context
-
copy
-
as
-
curl
-
win
"
data
:
buildTestData
(
QUOTE_WIN
)
}
{
menuItemId
:
"
request
-
list
-
context
-
copy
-
as
-
curl
-
posix
"
data
:
buildTestData
(
QUOTE_POSIX
)
}
]
:
[
{
menuItemId
:
"
request
-
list
-
context
-
copy
-
as
-
curl
"
data
:
buildTestData
(
QUOTE_POSIX
)
}
]
;
await
testForPlatform
(
tab
monitor
testData
)
;
await
teardown
(
monitor
)
;
}
)
;
function
buildTestData
(
QUOTE
)
{
function
quote
(
str
)
{
return
QUOTE
+
str
.
replace
(
new
RegExp
(
QUOTE
"
g
"
)
\
\
{
QUOTE
}
)
+
QUOTE
;
}
function
header
(
h
)
{
return
"
-
H
"
+
quote
(
h
)
;
}
const
SIMPLE_BASE
=
[
"
curl
"
+
quote
(
SIMPLE_SJS
)
]
;
const
SLOW_BASE
=
[
"
curl
"
+
quote
(
SLOW_SJS
)
]
;
const
BASE_RESULT
=
[
"
-
-
compressed
"
header
(
"
User
-
Agent
:
"
+
navigator
.
userAgent
)
header
(
"
Accept
:
*
/
*
"
)
header
(
"
Accept
-
Language
:
"
+
navigator
.
language
)
header
(
"
X
-
Custom
-
Header
-
1
:
Custom
value
"
)
header
(
"
X
-
Custom
-
Header
-
2
:
8
.
8
.
8
.
8
"
)
header
(
"
X
-
Custom
-
Header
-
3
:
Mon
3
Mar
2014
11
:
11
:
11
GMT
"
)
header
(
"
Referer
:
"
+
CURL_URL
)
header
(
"
Connection
:
keep
-
alive
"
)
header
(
"
Pragma
:
no
-
cache
"
)
header
(
"
Cache
-
Control
:
no
-
cache
"
)
]
;
const
COOKIE_PARTIAL_RESULT
=
[
header
(
"
Cookie
:
bob
=
true
;
tom
=
cool
"
)
]
;
const
POST_PARTIAL_RESULT
=
[
"
-
-
data
"
+
quote
(
POST_PAYLOAD
)
header
(
"
Content
-
Type
:
text
/
plain
;
charset
=
UTF
-
8
"
)
]
;
const
ORIGIN_RESULT
=
[
header
(
"
Origin
:
http
:
/
/
example
.
com
"
)
]
;
const
HEAD_PARTIAL_RESULT
=
[
"
-
I
"
]
;
return
{
SIMPLE_BASE
SLOW_BASE
BASE_RESULT
COOKIE_PARTIAL_RESULT
POST_PAYLOAD
POST_PARTIAL_RESULT
ORIGIN_RESULT
HEAD_PARTIAL_RESULT
}
;
}
async
function
testForPlatform
(
tab
monitor
testData
)
{
await
performRequest
(
"
GET
"
)
;
for
(
const
test
of
testData
)
{
await
testClipboardContent
(
test
.
menuItemId
[
.
.
.
test
.
data
.
SIMPLE_BASE
.
.
.
test
.
data
.
BASE_RESULT
]
)
;
}
await
selectIndexAndWaitForSourceEditor
(
monitor
0
)
;
for
(
const
test
of
testData
)
{
await
testClipboardContent
(
test
.
menuItemId
[
.
.
.
test
.
data
.
SIMPLE_BASE
.
.
.
test
.
data
.
BASE_RESULT
]
)
;
}
await
performRequest
(
"
GET
"
)
;
for
(
const
test
of
testData
)
{
await
testClipboardContent
(
test
.
menuItemId
[
.
.
.
test
.
data
.
SIMPLE_BASE
.
.
.
test
.
data
.
BASE_RESULT
.
.
.
test
.
data
.
COOKIE_PARTIAL_RESULT
]
)
;
}
const
waitSlow
=
waitForNetworkEvents
(
monitor
0
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
SLOW_SJS
]
async
function
(
url
)
{
content
.
wrappedJSObject
.
performRequest
(
url
"
GET
"
null
)
;
}
)
;
await
waitSlow
;
for
(
const
test
of
testData
)
{
await
testClipboardContent
(
test
.
menuItemId
[
.
.
.
test
.
data
.
SLOW_BASE
.
.
.
test
.
data
.
BASE_RESULT
.
.
.
test
.
data
.
COOKIE_PARTIAL_RESULT
]
)
;
}
await
performRequest
(
"
POST
"
POST_PAYLOAD
)
;
for
(
const
test
of
testData
)
{
await
testClipboardContent
(
test
.
menuItemId
[
.
.
.
test
.
data
.
SIMPLE_BASE
.
.
.
test
.
data
.
BASE_RESULT
.
.
.
test
.
data
.
COOKIE_PARTIAL_RESULT
.
.
.
test
.
data
.
POST_PARTIAL_RESULT
.
.
.
test
.
data
.
ORIGIN_RESULT
]
)
;
}
await
performRequest
(
"
HEAD
"
)
;
for
(
const
test
of
testData
)
{
await
testClipboardContent
(
test
.
menuItemId
[
.
.
.
test
.
data
.
SIMPLE_BASE
.
.
.
test
.
data
.
BASE_RESULT
.
.
.
test
.
data
.
COOKIE_PARTIAL_RESULT
.
.
.
test
.
data
.
HEAD_PARTIAL_RESULT
]
)
;
}
async
function
performRequest
(
method
payload
)
{
const
waitRequest
=
waitForNetworkEvents
(
monitor
1
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
{
url
:
SIMPLE_SJS
method_
:
method
payload_
:
payload
}
]
async
function
(
{
url
method_
payload_
}
)
{
content
.
wrappedJSObject
.
performRequest
(
url
method_
payload_
)
;
}
)
;
await
waitRequest
;
}
async
function
testClipboardContent
(
menuItemId
expectedResult
)
{
const
{
document
}
=
monitor
.
panelWin
;
const
items
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
;
const
itemIndex
=
items
.
length
-
1
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
items
[
itemIndex
]
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
contextmenu
"
}
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
0
]
)
;
const
copyUrlParamsNode
=
getContextMenuItem
(
monitor
menuItemId
)
;
is
(
!
!
copyUrlParamsNode
true
The
"
Copy
as
cURL
"
context
menu
item
"
{
menuItemId
}
"
should
not
be
hidden
.
)
;
await
waitForClipboardPromise
(
function
setup
(
)
{
copyUrlParamsNode
.
click
(
)
;
}
function
validate
(
result
)
{
if
(
typeof
result
!
=
=
"
string
"
)
{
return
false
;
}
const
matchRe
=
/
[
-
A
-
Za
-
z1
-
9
]
+
(
?
:
(
[
\
"
'
]
)
(
?
:
\
\
\
1
|
.
)
*
?
\
1
)
?
/
g
;
const
actual
=
result
.
match
(
matchRe
)
;
if
(
!
actual
|
|
expectedResult
[
0
]
!
=
actual
[
0
]
)
{
return
false
;
}
return
(
expectedResult
.
length
=
=
=
actual
.
length
&
&
expectedResult
.
every
(
param
=
>
actual
.
includes
(
param
)
)
)
;
}
)
;
info
(
Clipboard
contains
a
cURL
command
for
item
{
itemIndex
}
by
"
{
menuItemId
}
"
)
;
}
}
