"
use
strict
"
;
add_task
(
function
*
test
(
)
{
let
{
tab
monitor
}
=
yield
initNetMonitor
(
CONTENT_TYPE_WITHOUT_CACHE_URL
)
;
info
(
"
Starting
test
.
.
.
"
)
;
let
{
EVENTS
ACTIVITY_TYPE
NetMonitorView
NetMonitorController
}
=
monitor
.
panelWin
;
let
{
RequestsMenu
}
=
NetMonitorView
;
RequestsMenu
.
lazyUpdate
=
true
;
let
onEvents
=
waitForNetworkEvents
(
monitor
CONTENT_TYPE_WITHOUT_CACHE_REQUESTS
)
;
let
onThumbnail
=
monitor
.
panelWin
.
once
(
EVENTS
.
RESPONSE_IMAGE_THUMBNAIL_DISPLAYED
)
;
yield
performRequests
(
)
;
yield
onEvents
;
yield
onThumbnail
;
info
(
"
Checking
the
image
thumbnail
after
a
few
requests
were
made
.
.
.
"
)
;
yield
showTooltipAndVerify
(
RequestsMenu
.
tooltip
RequestsMenu
.
items
[
5
]
)
;
onEvents
=
waitForNetworkEvents
(
monitor
CONTENT_TYPE_WITHOUT_CACHE_REQUESTS
+
1
)
;
onThumbnail
=
monitor
.
panelWin
.
once
(
EVENTS
.
RESPONSE_IMAGE_THUMBNAIL_DISPLAYED
)
;
info
(
"
Reloading
the
debuggee
and
performing
all
requests
again
.
.
.
"
)
;
yield
NetMonitorController
.
triggerActivity
(
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_ENABLED
)
;
yield
performRequests
(
)
;
yield
onEvents
;
yield
onThumbnail
;
info
(
"
Checking
the
image
thumbnail
after
a
reload
.
"
)
;
yield
showTooltipAndVerify
(
RequestsMenu
.
tooltip
RequestsMenu
.
items
[
6
]
)
;
info
(
"
Checking
if
the
image
thumbnail
is
hidden
when
mouse
leaves
the
menu
widget
"
)
;
let
requestsMenuEl
=
(
"
#
requests
-
menu
-
contents
"
)
;
let
onHidden
=
RequestsMenu
.
tooltip
.
once
(
"
hidden
"
)
;
EventUtils
.
synthesizeMouse
(
requestsMenuEl
0
0
{
type
:
"
mouseout
"
}
monitor
.
panelWin
)
;
yield
onHidden
;
yield
teardown
(
monitor
)
;
function
performRequests
(
)
{
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
function
*
(
)
{
content
.
wrappedJSObject
.
performRequests
(
)
;
}
)
;
}
function
*
showTooltipAndVerify
(
tooltip
requestItem
)
{
let
anchor
=
(
"
.
requests
-
menu
-
file
"
requestItem
.
target
)
;
yield
showTooltipOn
(
tooltip
anchor
)
;
info
(
"
Tooltip
was
successfully
opened
for
the
image
request
.
"
)
;
is
(
tooltip
.
panel
.
querySelector
(
"
img
"
)
.
src
TEST_IMAGE_DATA_URI
"
The
tooltip
'
s
image
content
is
displayed
correctly
.
"
)
;
}
function
showTooltipOn
(
tooltip
element
)
{
let
onShown
=
tooltip
.
once
(
"
shown
"
)
;
let
win
=
element
.
ownerDocument
.
defaultView
;
EventUtils
.
synthesizeMouseAtCenter
(
element
{
type
:
"
mousemove
"
}
win
)
;
return
onShown
;
}
}
)
;
