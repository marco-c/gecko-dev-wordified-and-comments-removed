"
use
strict
"
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
sys
.
mjs
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
Component
not
initialized
/
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
Connection
closed
/
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
shared
-
head
.
js
"
this
)
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
toolbox
.
footer
.
height
"
400
)
;
const
{
tab
monitor
toolbox
}
=
await
initNetMonitor
(
POST_DATA_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
await
performRequests
(
monitor
tab
2
)
;
info
(
"
Clicking
stack
-
trace
tab
and
waiting
for
stack
-
trace
panel
to
open
"
)
;
const
waitForTab
=
waitForDOM
(
document
"
#
stack
-
trace
-
tab
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
document
.
querySelector
(
"
.
request
-
list
-
item
"
)
)
;
await
waitForTab
;
const
waitForPanel
=
waitForDOM
(
document
"
#
stack
-
trace
-
panel
.
frame
-
link
"
6
)
;
document
.
getElementById
(
"
stack
-
trace
-
tab
"
)
.
click
(
)
;
await
waitForPanel
;
const
frameLinkNode
=
document
.
querySelector
(
"
.
frame
-
link
"
)
;
await
checkClickOnNode
(
toolbox
frameLinkNode
)
;
await
teardown
(
monitor
)
;
}
)
;
async
function
checkClickOnNode
(
toolbox
frameLinkNode
)
{
info
(
"
checking
click
on
node
location
"
)
;
const
url
=
frameLinkNode
.
getAttribute
(
"
data
-
url
"
)
;
ok
(
url
source
url
found
(
"
{
url
}
"
)
)
;
const
line
=
frameLinkNode
.
getAttribute
(
"
data
-
line
"
)
;
ok
(
line
source
line
found
(
"
{
line
}
"
)
)
;
frameLinkNode
.
querySelector
(
"
.
frame
-
link
-
source
"
)
.
click
(
)
;
await
toolbox
.
getPanelWhenReady
(
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForSelectedSource
(
dbg
url
)
;
}
