"
use
strict
"
;
add_task
(
function
*
(
)
{
let
{
tab
monitor
}
=
yield
initNetMonitor
(
POST_DATA_URL
)
;
info
(
"
Starting
test
.
.
.
"
)
;
let
{
document
NetMonitorView
}
=
monitor
.
panelWin
;
let
{
RequestsMenu
}
=
NetMonitorView
;
RequestsMenu
.
lazyUpdate
=
false
;
let
wait
=
waitForNetworkEvents
(
monitor
0
2
)
;
yield
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
function
*
(
)
{
content
.
wrappedJSObject
.
performRequests
(
)
;
}
)
;
yield
wait
;
let
origItem
=
RequestsMenu
.
getItemAtIndex
(
0
)
;
wait
=
waitForDOM
(
document
"
#
headers
-
tabpanel
.
summary
"
)
;
RequestsMenu
.
selectedItem
=
origItem
;
yield
wait
;
wait
=
waitForDOM
(
document
"
.
raw
-
headers
-
container
textarea
"
2
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
document
.
querySelectorAll
(
"
.
tool
-
button
"
)
[
1
]
)
;
yield
wait
;
testShowRawHeaders
(
origItem
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
document
.
querySelectorAll
(
"
.
tool
-
button
"
)
[
1
]
)
;
testHideRawHeaders
(
document
)
;
return
teardown
(
monitor
)
;
function
testShowRawHeaders
(
data
)
{
let
requestHeaders
=
document
.
querySelectorAll
(
"
.
raw
-
headers
-
container
textarea
"
)
[
0
]
.
value
;
for
(
let
header
of
data
.
requestHeaders
.
headers
)
{
ok
(
requestHeaders
.
includes
(
header
.
name
+
"
:
"
+
header
.
value
)
"
textarea
contains
request
headers
"
)
;
}
let
responseHeaders
=
document
.
querySelectorAll
(
"
.
raw
-
headers
-
container
textarea
"
)
[
1
]
.
value
;
for
(
let
header
of
data
.
responseHeaders
.
headers
)
{
ok
(
responseHeaders
.
includes
(
header
.
name
+
"
:
"
+
header
.
value
)
"
textarea
contains
response
headers
"
)
;
}
}
function
testHideRawHeaders
(
)
{
ok
(
!
document
.
querySelector
(
"
.
raw
-
headers
-
container
"
)
"
raw
request
headers
textarea
is
empty
"
)
;
}
}
)
;
