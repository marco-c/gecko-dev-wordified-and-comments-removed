"
use
strict
"
;
add_task
(
async
function
(
)
{
const
{
monitor
}
=
await
initNetMonitor
(
HTTPS_SLOW_REQUESTS_URL
{
requestCount
:
2
}
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
const
onEvents
=
waitForNetworkEvents
(
monitor
2
)
;
await
reloadBrowser
(
)
;
await
onEvents
;
info
(
"
Resize
waterfall
column
a
first
time
"
)
;
const
waterfallHeader
=
document
.
querySelector
(
#
requests
-
list
-
waterfall
-
header
-
box
)
;
const
headers
=
document
.
querySelector
(
"
.
requests
-
list
-
headers
"
)
;
const
parentWidth
=
headers
.
getBoundingClientRect
(
)
.
width
;
let
onWaterfallResize
=
waitForDispatch
(
store
"
WATERFALL_RESIZE
"
)
;
resizeWaterfallColumn
(
waterfallHeader
30
parentWidth
)
;
await
onWaterfallResize
;
info
(
"
Mesure
the
initial
width
of
a
request
timing
element
"
)
;
const
initialWidth
=
await
getStableTimingBoxesWidth
(
document
)
;
info
(
"
Measured
initialWidth
:
"
+
initialWidth
)
;
info
(
"
Resize
waterfall
column
again
"
)
;
onWaterfallResize
=
waitForDispatch
(
store
"
WATERFALL_RESIZE
"
)
;
resizeWaterfallColumn
(
waterfallHeader
60
parentWidth
)
;
await
onWaterfallResize
;
info
(
"
Mesure
the
request
timing
element
again
"
)
;
const
finalWidth
=
await
getStableTimingBoxesWidth
(
document
width
=
>
width
>
200
)
;
info
(
"
Measured
finalWidth
:
"
+
finalWidth
)
;
Assert
.
greater
(
Math
.
abs
(
finalWidth
-
initialWidth
)
1
"
The
request
timing
element
should
be
updated
"
)
;
return
teardown
(
monitor
)
;
}
)
;
async
function
getStableTimingBoxesWidth
(
doc
predicate
=
null
)
{
let
stableWidth
=
-
1
;
await
waitFor
(
(
)
=
>
{
const
timingBoxes
=
[
.
.
.
doc
.
querySelectorAll
(
"
.
requests
-
list
-
timings
-
box
"
)
]
;
const
widths
=
timingBoxes
.
map
(
el
=
>
el
.
getBoundingClientRect
(
)
.
width
)
;
const
width
=
widths
.
reduce
(
(
sum
w
)
=
>
sum
+
w
0
)
;
if
(
width
!
=
stableWidth
)
{
stableWidth
=
width
;
return
false
;
}
if
(
typeof
predicate
=
=
"
function
"
)
{
return
predicate
(
width
)
;
}
return
true
;
}
"
Wait
for
the
timings
width
to
stabilize
"
500
)
;
return
stableWidth
;
}
