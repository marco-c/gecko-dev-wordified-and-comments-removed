"
use
strict
"
;
add_task
(
async
function
(
)
{
const
{
tab
monitor
}
=
await
initNetMonitor
(
CONTENT_TYPE_WITHOUT_CACHE_URL
{
requestCount
:
1
}
)
;
const
{
document
store
}
=
monitor
.
panelWin
;
await
performRequests
(
monitor
tab
CONTENT_TYPE_WITHOUT_CACHE_REQUESTS
)
;
info
(
"
Mesure
the
initial
width
of
a
request
timing
element
"
)
;
const
initialWidth
=
await
getStableTimingBlockWidth
(
document
)
;
const
headers
=
document
.
querySelector
(
"
.
requests
-
list
-
headers
"
)
;
const
parentWidth
=
headers
.
getBoundingClientRect
(
)
.
width
;
info
(
"
Resize
waterfall
column
"
)
;
const
waterfallHeader
=
document
.
querySelector
(
#
requests
-
list
-
waterfall
-
header
-
box
)
;
const
onWaterfallResize
=
waitForDispatch
(
store
"
WATERFALL_RESIZE
"
)
;
resizeWaterfallColumn
(
waterfallHeader
30
parentWidth
)
;
await
onWaterfallResize
;
info
(
"
Mesure
the
request
timing
element
again
"
)
;
const
finalWidth
=
await
getStableTimingBlockWidth
(
document
)
;
Assert
.
greater
(
Math
.
abs
(
finalWidth
-
initialWidth
)
1
"
The
request
timing
element
should
be
updated
"
)
;
return
teardown
(
monitor
)
;
}
)
;
async
function
getStableTimingBlockWidth
(
doc
)
{
let
stableWidth
=
-
1
;
const
interval
=
AppConstants
.
ASAN
|
|
AppConstants
.
DEBUG
|
|
AppConstants
.
TSAN
?
1000
:
500
;
await
waitFor
(
(
)
=
>
{
const
firstBlock
=
doc
.
querySelector
(
"
.
requests
-
list
-
timings
-
box
"
)
;
const
width
=
firstBlock
.
getBoundingClientRect
(
)
.
width
;
if
(
width
=
=
stableWidth
)
{
return
true
;
}
stableWidth
=
width
;
return
false
;
}
"
Wait
for
the
element
width
to
stabilize
"
interval
)
;
return
stableWidth
;
}
