"
use
strict
"
;
add_task
(
async
function
(
)
{
requestLongerTimeout
(
4
)
;
const
{
tab
monitor
}
=
await
initNetMonitor
(
INFINITE_GET_URL
true
)
;
const
{
document
windowRequire
store
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
await
waitForRequestListToAppear
(
)
;
const
requestsContainer
=
document
.
querySelector
(
"
.
requests
-
list
-
contents
"
)
;
ok
(
requestsContainer
"
Container
element
exists
as
expected
.
"
)
;
const
headers
=
document
.
querySelector
(
"
.
requests
-
list
-
headers
"
)
;
ok
(
headers
"
Headers
element
exists
as
expected
.
"
)
;
await
waitForRequestsToOverflowContainer
(
monitor
requestsContainer
)
;
testColumnsAlignment
(
headers
requestsContainer
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
async
function
(
)
{
content
.
wrappedJSObject
.
stopRequests
(
)
;
}
)
;
return
teardown
(
monitor
)
;
function
waitForRequestListToAppear
(
)
{
info
(
"
Waiting
until
the
empty
notice
disappears
and
is
replaced
with
the
list
"
)
;
return
waitUntil
(
(
)
=
>
!
!
document
.
querySelector
(
"
.
requests
-
list
-
contents
"
)
)
;
}
}
)
;
async
function
waitForRequestsToOverflowContainer
(
monitor
requestList
)
{
info
(
"
Waiting
for
enough
requests
to
overflow
the
container
"
)
;
while
(
true
)
{
info
(
"
Waiting
for
one
network
request
"
)
;
await
waitForNetworkEvents
(
monitor
1
)
;
if
(
requestList
.
scrollHeight
>
requestList
.
clientHeight
)
{
info
(
"
The
list
is
long
enough
returning
"
)
;
return
;
}
}
}
