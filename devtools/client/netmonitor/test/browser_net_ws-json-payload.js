"
use
strict
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
netmonitor
.
features
.
webSockets
"
true
)
;
const
{
tab
monitor
}
=
await
initNetMonitor
(
WS_PAGE_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
const
onNetworkEvents
=
waitForNetworkEvents
(
monitor
1
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
openConnection
(
0
)
;
content
.
wrappedJSObject
.
sendData
(
{
\
"
foo
\
"
:
{
\
"
x
\
"
:
1
\
"
y
\
"
:
2
}
\
"
bar
\
"
:
{
\
"
x
\
"
:
1
\
"
y
\
"
:
2
}
}
)
;
}
)
;
await
onNetworkEvents
;
const
requests
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
;
is
(
requests
.
length
1
"
There
should
be
one
request
"
)
;
const
wait
=
waitForDOM
(
document
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
2
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
requests
[
0
]
)
;
await
clickOnSidebarTab
(
document
"
response
"
)
;
await
wait
;
const
frames
=
document
.
querySelectorAll
(
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
)
;
is
(
frames
.
length
2
"
There
should
be
two
frames
"
)
;
await
waitForTick
(
)
;
const
waitForData
=
waitForDOM
(
document
"
#
message
-
formattedData
"
)
;
const
[
requestFrame
]
=
frames
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
requestFrame
)
;
await
waitForData
;
is
(
document
.
querySelector
(
"
#
message
-
formattedData
-
header
"
)
.
innerText
"
JSON
"
"
The
JSON
payload
panel
should
be
displayed
"
)
;
ok
(
document
.
querySelector
(
"
#
message
-
formattedData
.
treeTable
"
)
"
A
tree
table
should
be
used
to
display
the
formatted
payload
"
)
;
ok
(
document
.
getElementById
(
"
/
foo
"
)
"
The
'
foo
'
property
should
be
displayed
"
)
;
ok
(
document
.
getElementById
(
"
/
foo
/
x
"
)
"
The
'
x
'
property
in
the
foo
object
should
be
displayed
"
)
;
ok
(
document
.
getElementById
(
"
/
bar
/
y
"
)
"
The
'
y
'
property
in
the
bar
object
should
be
displayed
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
closeConnection
(
)
;
}
)
;
await
teardown
(
monitor
)
;
}
)
;
