"
use
strict
"
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
devtools
.
netmonitor
.
features
.
webSockets
"
true
]
]
}
)
;
const
{
tab
monitor
}
=
await
initNetMonitor
(
WS_PAGE_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
const
onNetworkEvents
=
waitForNetworkEvents
(
monitor
2
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
openConnection
(
2
)
;
await
content
.
wrappedJSObject
.
openConnection
(
3
)
;
}
)
;
await
onNetworkEvents
;
const
requests
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
;
is
(
requests
.
length
2
"
There
should
be
two
requests
"
)
;
let
wait
=
waitForDOM
(
document
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
4
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
requests
[
0
]
)
;
clickOnSidebarTab
(
document
"
response
"
)
;
await
wait
;
const
frames
=
document
.
querySelectorAll
(
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
)
;
is
(
frames
.
length
4
"
There
should
be
four
frames
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
document
.
querySelector
(
"
#
frame
-
filter
-
menu
"
)
)
;
const
sentOption
=
getContextMenuItem
(
monitor
"
message
-
list
-
context
-
filter
-
sent
"
)
;
sentOption
.
click
(
)
;
const
sentFrames
=
document
.
querySelectorAll
(
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
)
;
is
(
sentFrames
.
length
2
"
There
should
be
two
frames
"
)
;
is
(
sentFrames
[
0
]
.
classList
.
contains
(
"
sent
"
)
true
"
The
payload
type
is
'
Sent
'
"
)
;
is
(
sentFrames
[
1
]
.
classList
.
contains
(
"
sent
"
)
true
"
The
payload
type
is
'
Sent
'
"
)
;
const
receivedOption
=
getContextMenuItem
(
monitor
"
message
-
list
-
context
-
filter
-
received
"
)
;
receivedOption
.
click
(
)
;
const
receivedFrames
=
document
.
querySelectorAll
(
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
)
;
is
(
receivedFrames
.
length
2
"
There
should
be
two
frames
"
)
;
is
(
receivedFrames
[
0
]
.
classList
.
contains
(
"
received
"
)
true
"
The
payload
type
is
'
Received
'
"
)
;
is
(
receivedFrames
[
1
]
.
classList
.
contains
(
"
received
"
)
true
"
The
payload
type
is
'
Received
'
"
)
;
wait
=
waitForDOM
(
document
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
3
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
requests
[
1
]
)
;
await
wait
;
const
secondRequestFrames
=
document
.
querySelectorAll
(
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
)
;
is
(
secondRequestFrames
.
length
3
"
There
should
be
three
frames
"
)
;
is
(
secondRequestFrames
[
0
]
.
classList
.
contains
(
"
received
"
)
true
"
The
payload
type
is
'
Received
'
"
)
;
is
(
secondRequestFrames
[
1
]
.
classList
.
contains
(
"
received
"
)
true
"
The
payload
type
is
'
Received
'
"
)
;
is
(
secondRequestFrames
[
2
]
.
classList
.
contains
(
"
received
"
)
true
"
The
payload
type
is
'
Received
'
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
closeConnection
(
)
;
}
)
;
await
teardown
(
monitor
)
;
}
)
;
