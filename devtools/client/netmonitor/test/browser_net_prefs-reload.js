"
use
strict
"
;
add_task
(
async
function
(
)
{
let
{
monitor
}
=
await
initNetMonitor
(
SIMPLE_URL
)
;
let
Actions
=
monitor
.
panelWin
.
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
info
(
"
Starting
test
.
.
.
"
)
;
requestLongerTimeout
(
3
)
;
let
getDoc
=
(
)
=
>
monitor
.
panelWin
.
document
;
let
getPrefs
=
(
)
=
>
monitor
.
panelWin
.
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
prefs
"
)
.
Prefs
;
let
getStore
=
(
)
=
>
monitor
.
panelWin
.
store
;
let
getState
=
(
)
=
>
getStore
(
)
.
getState
(
)
;
let
prefsToCheck
=
{
filters
:
{
newValue
:
[
"
html
"
"
css
"
]
validateValue
:
(
)
=
>
Object
.
entries
(
getState
(
)
.
filters
.
requestFilterTypes
)
.
filter
(
(
[
type
check
]
)
=
>
check
)
.
map
(
(
[
type
check
]
)
=
>
type
)
modifyFrontend
:
(
value
)
=
>
value
.
forEach
(
e
=
>
getStore
(
)
.
dispatch
(
Actions
.
toggleRequestFilterType
(
e
)
)
)
}
networkDetailsWidth
:
{
newValue
:
~
~
(
Math
.
random
(
)
*
200
+
100
)
validateValue
:
(
)
=
>
getDoc
(
)
.
querySelector
(
"
.
monitor
-
panel
.
split
-
box
.
controlled
"
)
.
clientWidth
modifyFrontend
:
function
(
value
)
{
getDoc
(
)
.
querySelector
(
"
.
monitor
-
panel
.
split
-
box
.
controlled
"
)
.
style
.
width
=
{
value
}
px
;
}
}
networkDetailsHeight
:
{
newValue
:
~
~
(
Math
.
random
(
)
*
300
+
100
)
validateValue
:
(
)
=
>
getDoc
(
)
.
querySelector
(
"
.
monitor
-
panel
.
split
-
box
.
controlled
"
)
.
clientHeight
modifyFrontend
:
function
(
value
)
{
getDoc
(
)
.
querySelector
(
"
.
monitor
-
panel
.
split
-
box
.
controlled
"
)
.
style
.
height
=
{
value
}
px
;
}
}
}
;
await
testBottom
(
)
;
await
testSide
(
)
;
await
testWindow
(
)
;
info
(
"
Moving
toolbox
back
to
the
bottom
.
.
.
"
)
;
await
monitor
.
toolbox
.
switchHost
(
"
bottom
"
)
;
return
teardown
(
monitor
)
;
function
storeFirstPrefValues
(
)
{
info
(
"
Caching
initial
pref
values
.
"
)
;
for
(
let
name
in
prefsToCheck
)
{
let
currentValue
=
getPrefs
(
)
[
name
]
;
prefsToCheck
[
name
]
.
firstValue
=
currentValue
;
}
}
function
validateFirstPrefValues
(
isVerticalSplitter
)
{
info
(
"
Validating
current
pref
values
to
the
UI
elements
.
"
)
;
for
(
let
name
in
prefsToCheck
)
{
if
(
(
isVerticalSplitter
&
&
name
=
=
=
"
networkDetailsHeight
"
)
|
|
(
!
isVerticalSplitter
&
&
name
=
=
=
"
networkDetailsWidth
"
)
)
{
continue
;
}
let
currentValue
=
getPrefs
(
)
[
name
]
;
let
firstValue
=
prefsToCheck
[
name
]
.
firstValue
;
let
validateValue
=
prefsToCheck
[
name
]
.
validateValue
;
is
(
firstValue
.
toSource
(
)
currentValue
.
toSource
(
)
"
Pref
"
+
name
+
"
should
be
equal
to
first
value
:
"
+
currentValue
)
;
is
(
validateValue
(
)
.
toSource
(
)
currentValue
.
toSource
(
)
"
Pref
"
+
name
+
"
should
validate
:
"
+
currentValue
)
;
}
}
function
modifyFrontend
(
isVerticalSplitter
)
{
info
(
"
Modifying
UI
elements
to
the
specified
new
values
.
"
)
;
for
(
let
name
in
prefsToCheck
)
{
if
(
(
isVerticalSplitter
&
&
name
=
=
=
"
networkDetailsHeight
"
)
|
|
(
!
isVerticalSplitter
&
&
name
=
=
=
"
networkDetailsWidth
"
)
)
{
continue
;
}
let
currentValue
=
getPrefs
(
)
[
name
]
;
let
firstValue
=
prefsToCheck
[
name
]
.
firstValue
;
let
newValue
=
prefsToCheck
[
name
]
.
newValue
;
let
validateValue
=
prefsToCheck
[
name
]
.
validateValue
;
let
modFrontend
=
prefsToCheck
[
name
]
.
modifyFrontend
;
modFrontend
(
newValue
)
;
info
(
"
Modified
UI
element
affecting
"
+
name
+
"
to
:
"
+
newValue
)
;
is
(
firstValue
.
toSource
(
)
currentValue
.
toSource
(
)
"
Pref
"
+
name
+
"
should
still
be
equal
to
first
value
:
"
+
currentValue
)
;
isnot
(
newValue
.
toSource
(
)
currentValue
.
toSource
(
)
"
Pref
"
+
name
+
"
should
'
t
yet
be
equal
to
second
value
:
"
+
currentValue
)
;
is
(
validateValue
(
)
.
toSource
(
)
newValue
.
toSource
(
)
"
The
UI
element
affecting
"
+
name
+
"
should
validate
:
"
+
newValue
)
;
}
}
function
validateNewPrefValues
(
isVerticalSplitter
)
{
info
(
"
Invalidating
old
pref
values
to
the
modified
UI
elements
.
"
)
;
for
(
let
name
in
prefsToCheck
)
{
if
(
(
isVerticalSplitter
&
&
name
=
=
=
"
networkDetailsHeight
"
)
|
|
(
!
isVerticalSplitter
&
&
name
=
=
=
"
networkDetailsWidth
"
)
)
{
continue
;
}
let
currentValue
=
getPrefs
(
)
[
name
]
;
let
firstValue
=
prefsToCheck
[
name
]
.
firstValue
;
let
newValue
=
prefsToCheck
[
name
]
.
newValue
;
let
validateValue
=
prefsToCheck
[
name
]
.
validateValue
;
isnot
(
firstValue
.
toSource
(
)
currentValue
.
toSource
(
)
"
Pref
"
+
name
+
"
should
'
t
be
equal
to
first
value
:
"
+
currentValue
)
;
is
(
newValue
.
toSource
(
)
currentValue
.
toSource
(
)
"
Pref
"
+
name
+
"
should
now
be
equal
to
second
value
:
"
+
currentValue
)
;
is
(
validateValue
(
)
.
toSource
(
)
newValue
.
toSource
(
)
"
The
UI
element
affecting
"
+
name
+
"
should
validate
:
"
+
newValue
)
;
}
}
function
resetFrontend
(
isVerticalSplitter
)
{
info
(
"
Resetting
UI
elements
to
the
cached
initial
pref
values
.
"
)
;
for
(
let
name
in
prefsToCheck
)
{
if
(
(
isVerticalSplitter
&
&
name
=
=
=
"
networkDetailsHeight
"
)
|
|
(
!
isVerticalSplitter
&
&
name
=
=
=
"
networkDetailsWidth
"
)
)
{
continue
;
}
let
currentValue
=
getPrefs
(
)
[
name
]
;
let
firstValue
=
prefsToCheck
[
name
]
.
firstValue
;
let
newValue
=
prefsToCheck
[
name
]
.
newValue
;
let
validateValue
=
prefsToCheck
[
name
]
.
validateValue
;
let
modFrontend
=
prefsToCheck
[
name
]
.
modifyFrontend
;
modFrontend
(
firstValue
)
;
info
(
"
Modified
UI
element
affecting
"
+
name
+
"
to
:
"
+
firstValue
)
;
isnot
(
firstValue
.
toSource
(
)
currentValue
.
toSource
(
)
"
Pref
"
+
name
+
"
should
'
t
yet
be
equal
to
first
value
:
"
+
currentValue
)
;
is
(
newValue
.
toSource
(
)
currentValue
.
toSource
(
)
"
Pref
"
+
name
+
"
should
still
be
equal
to
second
value
:
"
+
currentValue
)
;
is
(
validateValue
(
)
.
toSource
(
)
firstValue
.
toSource
(
)
"
The
UI
element
affecting
"
+
name
+
"
should
validate
:
"
+
firstValue
)
;
}
}
async
function
restartNetMonitorAndSetupEnv
(
)
{
let
newMonitor
=
await
restartNetMonitor
(
monitor
)
;
monitor
=
newMonitor
.
monitor
;
let
networkEvent
=
waitForNetworkEvents
(
monitor
1
)
;
newMonitor
.
tab
.
linkedBrowser
.
reload
(
)
;
await
networkEvent
;
let
wait
=
waitForDOM
(
getDoc
(
)
"
.
network
-
details
-
panel
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
getDoc
(
)
.
querySelector
(
"
.
network
-
details
-
panel
-
toggle
"
)
)
;
await
wait
;
}
async
function
testBottom
(
)
{
await
restartNetMonitorAndSetupEnv
(
)
;
info
(
"
Testing
prefs
reload
for
a
bottom
host
.
"
)
;
storeFirstPrefValues
(
)
;
validateFirstPrefValues
(
true
)
;
modifyFrontend
(
true
)
;
await
restartNetMonitorAndSetupEnv
(
)
;
validateNewPrefValues
(
true
)
;
resetFrontend
(
true
)
;
await
restartNetMonitorAndSetupEnv
(
)
;
validateFirstPrefValues
(
true
)
;
}
async
function
testSide
(
)
{
await
restartNetMonitorAndSetupEnv
(
)
;
info
(
"
Moving
toolbox
to
the
side
.
.
.
"
)
;
await
monitor
.
toolbox
.
switchHost
(
"
side
"
)
;
info
(
"
Testing
prefs
reload
for
a
side
host
.
"
)
;
storeFirstPrefValues
(
)
;
validateFirstPrefValues
(
false
)
;
modifyFrontend
(
false
)
;
await
restartNetMonitorAndSetupEnv
(
)
;
validateNewPrefValues
(
false
)
;
resetFrontend
(
false
)
;
await
restartNetMonitorAndSetupEnv
(
)
;
validateFirstPrefValues
(
false
)
;
}
async
function
testWindow
(
)
{
await
restartNetMonitorAndSetupEnv
(
)
;
info
(
"
Moving
toolbox
into
a
window
.
.
.
"
)
;
await
monitor
.
toolbox
.
switchHost
(
"
window
"
)
;
info
(
"
Testing
prefs
reload
for
a
window
host
.
"
)
;
storeFirstPrefValues
(
)
;
validateFirstPrefValues
(
true
)
;
modifyFrontend
(
true
)
;
await
restartNetMonitorAndSetupEnv
(
)
;
validateNewPrefValues
(
true
)
;
resetFrontend
(
true
)
;
await
restartNetMonitorAndSetupEnv
(
)
;
validateFirstPrefValues
(
true
)
;
}
}
)
;
