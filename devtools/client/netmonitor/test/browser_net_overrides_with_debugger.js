"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
network
-
overrides
-
test
-
helpers
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
shared
-
head
.
js
"
this
)
;
add_task
(
async
function
setOverrideInDebugger_removeOverrideInNetmonitor
(
)
{
const
{
monitor
document
}
=
await
setupNetworkOverridesTest
(
)
;
const
toolbox
=
monitor
.
toolbox
;
info
(
"
Switch
to
debugger
and
setup
an
override
for
a
script
"
)
;
await
toolbox
.
selectTool
(
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
script
.
js
"
]
{
noExpand
:
false
}
)
;
let
overrides
=
[
.
.
.
findAllElementsWithSelector
(
dbg
"
.
has
-
network
-
override
"
)
]
;
is
(
overrides
.
length
0
"
No
override
is
displayed
in
the
debugger
"
)
;
info
(
"
Select
script
.
js
tree
node
and
add
override
"
)
;
await
selectSourceFromSourceTree
(
dbg
"
script
.
js
"
)
;
const
path
=
prepareFilePicker
(
"
script
-
override
.
js
"
window
)
;
await
triggerSourceTreeContextMenu
(
dbg
findSourceNodeWithText
(
dbg
"
script
.
js
"
)
"
#
node
-
menu
-
overrides
"
)
;
await
writeTextContentToPath
(
OVERRIDDEN_SCRIPT
path
)
;
overrides
=
[
.
.
.
findAllElementsWithSelector
(
dbg
"
.
has
-
network
-
override
"
)
]
;
is
(
overrides
.
length
1
"
An
override
is
now
displayed
in
the
debugger
"
)
;
info
(
"
Switch
back
to
netmonitor
and
check
if
the
script
is
overridden
"
)
;
await
toolbox
.
selectTool
(
"
netmonitor
"
)
;
const
scriptRequest
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
1
]
;
await
assertOverrideColumnStatus
(
monitor
{
visible
:
true
}
)
;
assertOverrideCellStatus
(
scriptRequest
{
overridden
:
true
}
)
;
const
overrideCell
=
scriptRequest
.
querySelector
(
"
.
requests
-
list
-
override
"
)
;
ok
(
overrideCell
.
getAttribute
(
"
title
"
)
.
includes
(
"
script
-
override
.
js
"
)
"
The
override
icon
'
s
title
contains
the
overridden
path
"
)
;
await
removeNetworkOverride
(
monitor
scriptRequest
)
;
ok
(
!
scriptRequest
.
querySelector
(
"
.
requests
-
list
-
override
"
)
"
There
is
no
override
cell
"
)
;
info
(
"
Switch
back
to
debugger
and
check
the
override
was
removed
"
)
;
await
toolbox
.
selectTool
(
"
jsdebugger
"
)
;
overrides
=
[
.
.
.
findAllElementsWithSelector
(
dbg
"
.
has
-
network
-
override
"
)
]
;
is
(
overrides
.
length
0
"
No
override
is
displayed
in
the
debugger
"
)
;
info
(
"
Switch
back
to
netmonitor
and
tear
down
the
test
"
)
;
await
toolbox
.
selectTool
(
"
netmonitor
"
)
;
return
teardown
(
monitor
)
;
}
)
;
add_task
(
async
function
setOverrideInNetmonitor_removeOverrideInDebugger
(
)
{
const
{
monitor
document
}
=
await
setupNetworkOverridesTest
(
)
;
const
toolbox
=
monitor
.
toolbox
;
let
scriptRequest
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
1
]
;
info
(
"
Set
a
network
override
for
the
script
request
"
)
;
const
overrideFileName
=
"
script
-
override
.
js
"
;
await
setNetworkOverride
(
monitor
scriptRequest
overrideFileName
OVERRIDDEN_SCRIPT
)
;
info
(
"
Check
that
the
script
request
is
displayed
as
overridden
"
)
;
await
assertOverrideColumnStatus
(
monitor
{
visible
:
true
}
)
;
assertOverrideCellStatus
(
scriptRequest
{
overridden
:
true
}
)
;
info
(
"
Switch
to
debugger
and
check
the
override
for
a
script
"
)
;
await
toolbox
.
selectTool
(
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
script
.
js
"
]
{
noExpand
:
false
}
)
;
let
overrides
=
[
.
.
.
findAllElementsWithSelector
(
dbg
"
.
has
-
network
-
override
"
)
]
;
is
(
overrides
.
length
1
"
An
override
is
displayed
in
the
debugger
"
)
;
info
(
"
Select
script
.
js
tree
node
and
remove
the
override
"
)
;
await
selectSourceFromSourceTree
(
dbg
"
script
.
js
"
)
;
const
removed
=
waitForDispatch
(
dbg
.
toolbox
.
store
"
REMOVE_NETWORK_OVERRIDE
"
)
;
await
triggerSourceTreeContextMenu
(
dbg
findSourceNodeWithText
(
dbg
"
script
.
js
"
)
"
#
node
-
menu
-
overrides
"
)
;
await
removed
;
overrides
=
[
.
.
.
findAllElementsWithSelector
(
dbg
"
.
has
-
network
-
override
"
)
]
;
is
(
overrides
.
length
0
"
The
override
is
no
longer
displayed
in
the
debugger
"
)
;
info
(
"
Switch
back
to
netmonitor
and
check
if
the
script
is
overridden
"
)
;
await
toolbox
.
selectTool
(
"
netmonitor
"
)
;
scriptRequest
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
1
]
;
await
assertOverrideColumnStatus
(
monitor
{
visible
:
false
}
)
;
return
teardown
(
monitor
)
;
}
)
;
