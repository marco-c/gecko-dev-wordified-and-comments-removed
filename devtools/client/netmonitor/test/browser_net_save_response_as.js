"
use
strict
"
;
var
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
.
browsingContext
)
;
add_task
(
async
function
(
)
{
const
{
tab
monitor
}
=
await
initNetMonitor
(
CONTENT_TYPE_WITHOUT_CACHE_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
}
=
monitor
.
panelWin
;
await
performRequests
(
monitor
tab
CONTENT_TYPE_WITHOUT_CACHE_REQUESTS
)
;
const
destDir
=
createTemporarySaveDirectory
(
)
;
let
destFile
;
MockFilePicker
.
displayDirectory
=
destDir
;
const
saveDialogClosedPromise
=
new
Promise
(
resolve
=
>
{
MockFilePicker
.
showCallback
=
function
(
fp
)
{
info
(
"
MockFilePicker
showCallback
"
)
;
const
fileName
=
fp
.
defaultString
;
destFile
=
destDir
.
clone
(
)
;
destFile
.
append
(
fileName
)
;
MockFilePicker
.
setFiles
(
[
destFile
]
)
;
resolve
(
destFile
.
path
)
;
}
;
}
)
;
registerCleanupFunction
(
function
(
)
{
MockFilePicker
.
cleanup
(
)
;
}
)
;
await
triggerSaveResponseAs
(
monitor
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
6
]
)
;
info
(
"
Wait
for
the
save
dialog
to
close
"
)
;
const
savedPath
=
await
saveDialogClosedPromise
;
const
expectedFile
=
destDir
.
clone
(
)
;
expectedFile
.
append
(
"
sjs_content
-
type
-
test
-
server
.
sjs
"
)
;
is
(
savedPath
expectedFile
.
path
"
Response
was
saved
to
correct
path
"
)
;
await
waitForFileSavedToDisk
(
savedPath
)
;
const
buffer
=
await
IOUtils
.
read
(
savedPath
)
;
const
savedFileContent
=
new
TextDecoder
(
)
.
decode
(
buffer
)
;
is
(
savedFileContent
new
Array
(
1000
)
.
join
(
"
Hello
gzip
!
"
)
"
Saved
response
has
the
correct
text
"
)
;
await
teardown
(
monitor
)
;
}
)
;
