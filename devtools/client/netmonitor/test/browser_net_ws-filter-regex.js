"
use
strict
"
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
devtools
.
netmonitor
.
features
.
webSockets
"
true
]
]
}
)
;
const
{
tab
monitor
}
=
await
initNetMonitor
(
WS_PAGE_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
const
{
getDisplayedFrames
}
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
selectors
/
web
-
sockets
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
openConnection
(
1
)
;
}
)
;
const
requests
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
;
is
(
requests
.
length
1
"
There
should
be
one
request
"
)
;
const
wait
=
waitForDOM
(
document
"
#
messages
-
panel
.
ws
-
frames
-
list
-
table
.
ws
-
frame
-
list
-
item
"
2
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
requests
[
0
]
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
document
.
querySelector
(
"
#
messages
-
tab
"
)
)
;
await
wait
;
const
frames
=
document
.
querySelectorAll
(
"
#
messages
-
panel
.
ws
-
frames
-
list
-
table
.
ws
-
frame
-
list
-
item
"
)
;
is
(
frames
.
length
2
"
There
should
be
two
frames
"
)
;
const
type
=
string
=
>
{
for
(
const
ch
of
string
)
{
EventUtils
.
synthesizeKey
(
ch
{
}
monitor
.
panelWin
)
;
}
}
;
const
filterInput
=
document
.
querySelector
(
"
#
messages
-
panel
.
devtools
-
filterinput
"
)
;
filterInput
.
focus
(
)
;
type
(
"
/
Payload
[
0
-
9
]
+
/
"
)
;
await
waitUntil
(
(
)
=
>
getDisplayedFrames
(
store
.
getState
(
)
)
.
length
=
=
2
)
;
const
filteredFrames
=
document
.
querySelectorAll
(
"
#
messages
-
panel
.
ws
-
frames
-
list
-
table
.
ws
-
frame
-
list
-
item
"
)
;
is
(
filteredFrames
.
length
2
"
There
should
be
two
frames
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
closeConnection
(
)
;
}
)
;
await
teardown
(
monitor
)
;
}
)
;
