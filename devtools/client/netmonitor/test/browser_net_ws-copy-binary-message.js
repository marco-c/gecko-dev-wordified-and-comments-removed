"
use
strict
"
;
add_task
(
async
function
(
)
{
const
{
tab
monitor
}
=
await
initNetMonitor
(
WS_PAGE_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
const
onNetworkEvents
=
waitForNetworkEvents
(
monitor
1
)
;
const
data
=
{
text
:
"
something
"
hex
:
"
736f6d657468696e67
"
base64
:
"
c29tZXRoaW5n
"
}
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
data
.
text
]
async
text
=
>
{
await
content
.
wrappedJSObject
.
openConnection
(
0
)
;
content
.
wrappedJSObject
.
sendData
(
text
true
)
;
}
)
;
await
onNetworkEvents
;
const
requests
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
;
const
wait
=
waitForDOM
(
document
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
2
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
requests
[
0
]
)
;
clickOnSidebarTab
(
document
"
response
"
)
;
await
wait
;
const
messages
=
document
.
querySelectorAll
(
"
#
messages
-
view
.
message
-
list
-
table
.
message
-
list
-
item
"
)
;
for
(
const
message
of
messages
)
{
for
(
const
[
type
expectedValue
]
of
Object
.
entries
(
data
)
)
{
const
menuItemId
=
message
-
list
-
context
-
copy
-
message
-
{
type
}
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
contextmenu
"
}
message
)
;
is
(
!
!
getContextMenuItem
(
monitor
menuItemId
)
true
Could
not
find
"
{
type
}
"
copy
option
.
)
;
await
waitForClipboardPromise
(
async
function
setup
(
)
{
await
selectContextMenuItem
(
monitor
menuItemId
)
;
}
function
validate
(
result
)
{
return
result
=
=
=
expectedValue
;
}
)
;
}
}
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
closeConnection
(
)
;
}
)
;
await
teardown
(
monitor
)
;
}
)
;
