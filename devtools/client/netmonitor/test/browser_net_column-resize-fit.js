"
use
strict
"
;
add_task
(
async
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
netmonitor
.
visibleColumns
"
)
;
const
visibleColumns
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
visibleColumns
"
)
)
;
const
{
tab
monitor
}
=
await
initNetMonitor
(
SIMPLE_URL
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
}
=
monitor
.
panelWin
;
const
wait
=
waitForNetworkEvents
(
monitor
1
)
;
tab
.
linkedBrowser
.
reload
(
)
;
await
wait
;
info
(
"
Testing
column
resize
to
fit
using
double
-
click
on
draggable
resizer
"
)
;
const
fileHeader
=
document
.
querySelector
(
#
requests
-
list
-
file
-
header
-
box
)
;
const
fileColumnResizer
=
fileHeader
.
querySelector
(
"
.
column
-
resizer
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
fileColumnResizer
)
;
let
columnsData
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
columnsData
"
)
)
;
checkColumnsData
(
columnsData
"
file
"
11
)
;
checkSumOfVisibleColumns
(
columnsData
visibleColumns
)
;
info
(
"
Testing
column
resize
to
fit
using
context
menu
Resize
Column
To
Fit
Content
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
contextmenu
"
}
document
.
querySelector
(
"
#
requests
-
list
-
transferred
-
button
"
)
)
;
getContextMenuItem
(
monitor
"
request
-
list
-
header
-
resize
-
column
-
to
-
fit
-
content
"
)
.
click
(
)
;
columnsData
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
columnsData
"
)
)
;
checkColumnsData
(
columnsData
"
transferred
"
3
)
;
checkSumOfVisibleColumns
(
columnsData
visibleColumns
)
;
return
teardown
(
monitor
)
;
}
)
;
function
checkColumnsData
(
columnsData
column
expectedWidth
)
{
const
widthInPref
=
Math
.
round
(
getWidthFromPref
(
columnsData
column
)
)
;
is
(
widthInPref
expectedWidth
"
Column
"
+
column
+
"
has
expected
size
.
"
)
;
}
function
checkSumOfVisibleColumns
(
columnsData
visibleColumns
)
{
let
sum
=
0
;
visibleColumns
.
forEach
(
column
=
>
{
sum
+
=
getWidthFromPref
(
columnsData
column
)
;
}
)
;
sum
=
Math
.
round
(
sum
)
;
is
(
sum
100
"
All
visible
columns
cover
100
%
.
"
)
;
}
function
getWidthFromPref
(
columnsData
column
)
{
const
widthInPref
=
columnsData
.
find
(
function
(
element
)
{
return
element
.
name
=
=
=
column
;
}
)
.
width
;
return
widthInPref
;
}
