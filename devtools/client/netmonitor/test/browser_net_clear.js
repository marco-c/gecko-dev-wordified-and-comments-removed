"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
webconsole
/
test
/
browser
/
shared
-
head
.
js
"
this
)
;
add_task
(
async
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
webconsole
.
filter
.
net
"
true
)
;
const
{
monitor
toolbox
}
=
await
initNetMonitor
(
SIMPLE_URL
{
requestCount
:
1
}
)
;
info
(
"
Starting
test
.
.
.
"
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
const
clearButton
=
document
.
querySelector
(
"
.
requests
-
list
-
clear
-
button
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
assertNoRequestState
(
)
;
let
wait
=
waitForNetworkEvents
(
monitor
1
)
;
await
reloadBrowser
(
)
;
await
wait
;
assertSingleRequestState
(
)
;
assertNetworkEventResourceState
(
1
)
;
info
(
"
Swith
to
the
webconsole
and
wait
for
network
logs
"
)
;
const
onWebConsole
=
monitor
.
toolbox
.
once
(
"
webconsole
-
selected
"
)
;
const
{
hud
}
=
await
monitor
.
toolbox
.
selectTool
(
"
webconsole
"
)
;
await
onWebConsole
;
info
(
"
Wait
for
request
"
)
;
await
waitFor
(
(
)
=
>
findMessageByType
(
hud
SIMPLE_URL
"
.
network
"
)
)
;
info
(
"
Switch
back
the
the
netmonitor
"
)
;
await
monitor
.
toolbox
.
selectTool
(
"
netmonitor
"
)
;
let
waitRequestListCleared
=
waitForEmptyRequestList
(
document
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
clearButton
)
;
await
waitRequestListCleared
;
assertNoRequestState
(
)
;
assertNetworkEventResourceState
(
0
)
;
info
(
"
Swith
back
to
the
webconsole
to
assert
that
the
cleared
request
gets
disabled
"
)
;
await
monitor
.
toolbox
.
selectTool
(
"
webconsole
"
)
;
info
(
"
Wait
for
network
request
to
show
and
that
its
disabled
"
)
;
await
waitFor
(
(
)
=
>
findMessageByType
(
hud
SIMPLE_URL
"
.
network
.
disabled
"
)
)
;
await
monitor
.
toolbox
.
selectTool
(
"
netmonitor
"
)
;
wait
=
waitForNetworkEvents
(
monitor
1
)
;
await
reloadBrowser
(
)
;
await
wait
;
assertSingleRequestState
(
)
;
assertNetworkEventResourceState
(
1
)
;
store
.
dispatch
(
Actions
.
toggleNetworkDetails
(
)
)
;
const
detailsPanelToggleButton
=
document
.
querySelector
(
"
.
sidebar
-
toggle
"
)
;
await
waitForRequestData
(
store
[
"
requestHeaders
"
"
responseHeaders
"
]
)
;
ok
(
detailsPanelToggleButton
&
&
!
detailsPanelToggleButton
.
classList
.
contains
(
"
pane
-
collapsed
"
)
"
The
details
pane
should
be
visible
.
"
)
;
waitRequestListCleared
=
waitForEmptyRequestList
(
document
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
clearButton
)
;
await
waitRequestListCleared
;
assertNoRequestState
(
)
;
assertNetworkEventResourceState
(
0
)
;
ok
(
!
document
.
querySelector
(
"
.
network
-
details
-
bar
"
)
"
The
details
pane
should
not
be
visible
clicking
'
clear
'
.
"
)
;
return
teardown
(
monitor
)
;
function
assertSingleRequestState
(
)
{
is
(
store
.
getState
(
)
.
requests
.
requests
.
length
1
"
The
request
menu
should
have
one
item
at
this
point
.
"
)
;
}
function
assertNoRequestState
(
)
{
is
(
store
.
getState
(
)
.
requests
.
requests
.
length
0
"
The
request
menu
should
be
empty
at
this
point
.
"
)
;
}
function
assertNetworkEventResourceState
(
expectedNoOfNetworkEventResources
)
{
const
actualNoOfNetworkEventResources
=
toolbox
.
resourceCommand
.
getAllResources
(
toolbox
.
resourceCommand
.
TYPES
.
NETWORK_EVENT
)
.
length
;
is
(
actualNoOfNetworkEventResources
expectedNoOfNetworkEventResources
The
expected
number
of
network
resources
is
correctly
{
actualNoOfNetworkEventResources
}
)
;
}
function
waitForEmptyRequestList
(
doc
)
{
info
(
"
Wait
for
request
list
to
clear
"
)
;
return
waitFor
(
(
)
=
>
!
!
doc
.
querySelector
(
"
.
request
-
list
-
empty
-
notice
"
)
)
;
}
}
)
;
