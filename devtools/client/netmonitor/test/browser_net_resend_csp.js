"
use
strict
"
;
add_task
(
async
function
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
features
.
newEditAndResend
"
true
)
)
{
ok
(
true
"
Skip
this
test
when
pref
is
true
because
this
panel
won
'
t
be
default
when
that
is
the
case
.
"
)
;
return
;
}
const
{
tab
monitor
}
=
await
initNetMonitor
(
CSP_RESEND_URL
{
requestCount
:
1
}
)
;
const
{
document
store
windowRequire
}
=
monitor
.
panelWin
;
const
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
await
performRequests
(
monitor
tab
1
)
;
const
imgRequest
=
document
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
[
0
]
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
}
imgRequest
)
;
const
{
getSelectedRequest
}
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
selectors
/
index
"
)
;
const
origReq
=
getSelectedRequest
(
store
.
getState
(
)
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
contextmenu
"
}
imgRequest
)
;
const
waitForResentRequest
=
waitForNetworkEvents
(
monitor
1
)
;
getContextMenuItem
(
monitor
"
request
-
list
-
context
-
resend
-
only
"
)
.
click
(
)
;
await
waitForResentRequest
;
const
selReq
=
getSelectedRequest
(
store
.
getState
(
)
)
;
ok
(
selReq
.
url
.
endsWith
(
"
test
-
image
.
png
"
)
"
Correct
request
selected
"
)
;
ok
(
origReq
.
url
=
=
=
selReq
.
url
"
Orig
and
Sel
url
match
"
)
;
ok
(
selReq
.
cause
.
type
=
=
=
"
img
"
"
Correct
type
of
selected
"
)
;
ok
(
origReq
.
cause
.
type
=
=
=
selReq
.
cause
.
type
"
Orig
and
Sel
type
match
"
)
;
const
cspOBJ
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
return
JSON
.
parse
(
content
.
document
.
cspJSON
)
;
}
)
;
const
policies
=
cspOBJ
[
"
csp
-
policies
"
]
;
is
(
policies
.
length
1
"
CSP
:
should
be
one
policy
"
)
;
const
policy
=
policies
[
0
]
;
is
(
{
policy
[
"
img
-
src
"
]
}
"
*
"
"
CSP
:
img
-
src
should
be
*
"
)
;
await
teardown
(
monitor
)
;
}
)
;
