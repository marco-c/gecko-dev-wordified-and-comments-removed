"
use
strict
"
;
const
{
ACTIVITY_TYPE
}
=
require
(
"
.
/
constants
"
)
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
Provider
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
.
Provider
)
;
const
MonitorPanel
=
createFactory
(
require
(
"
.
/
components
/
monitor
-
panel
"
)
)
;
const
StatisticsPanel
=
createFactory
(
require
(
"
.
/
components
/
statistics
-
panel
"
)
)
;
exports
.
NetMonitorView
=
{
initialize
:
function
(
)
{
this
.
_body
=
document
.
querySelector
(
"
#
body
"
)
;
this
.
monitorPanel
=
document
.
querySelector
(
"
#
react
-
monitor
-
panel
-
hook
"
)
;
ReactDOM
.
render
(
Provider
(
{
store
:
gStore
}
MonitorPanel
(
)
)
this
.
monitorPanel
)
;
this
.
statisticsPanel
=
document
.
querySelector
(
"
#
react
-
statistics
-
panel
-
hook
"
)
;
ReactDOM
.
render
(
Provider
(
{
store
:
gStore
}
StatisticsPanel
(
)
)
this
.
statisticsPanel
)
;
this
.
unsubscribeStore
=
gStore
.
subscribe
(
storeWatcher
(
false
(
)
=
>
gStore
.
getState
(
)
.
ui
.
statisticsOpen
this
.
toggleFrontendMode
.
bind
(
this
)
)
)
;
}
destroy
:
function
(
)
{
ReactDOM
.
unmountComponentAtNode
(
this
.
monitorPanel
)
;
ReactDOM
.
unmountComponentAtNode
(
this
.
statisticsPanel
)
;
this
.
unsubscribeStore
(
)
;
}
toggleFrontendMode
:
function
(
)
{
if
(
gStore
.
getState
(
)
.
ui
.
statisticsOpen
)
{
this
.
_body
.
selectedPanel
=
this
.
statisticsPanel
;
NetMonitorController
.
triggerActivity
(
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_ENABLED
)
;
}
else
{
this
.
_body
.
selectedPanel
=
this
.
monitorPanel
;
}
}
}
;
function
storeWatcher
(
initialValue
reduceValue
onChange
)
{
let
currentValue
=
initialValue
;
return
(
)
=
>
{
const
newValue
=
reduceValue
(
)
;
if
(
newValue
!
=
=
currentValue
)
{
onChange
(
)
;
currentValue
=
newValue
;
}
}
;
}
