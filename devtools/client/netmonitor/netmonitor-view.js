"
use
strict
"
;
const
{
testing
:
isTesting
}
=
require
(
"
devtools
/
shared
/
flags
"
)
;
const
{
ViewHelpers
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
view
-
helpers
"
)
;
const
{
configureStore
}
=
require
(
"
.
/
store
"
)
;
const
{
RequestsMenuView
}
=
require
(
"
.
/
requests
-
menu
-
view
"
)
;
const
{
CustomRequestView
}
=
require
(
"
.
/
custom
-
request
-
view
"
)
;
const
{
ToolbarView
}
=
require
(
"
.
/
toolbar
-
view
"
)
;
const
{
SidebarView
}
=
require
(
"
.
/
sidebar
-
view
"
)
;
const
{
DetailsView
}
=
require
(
"
.
/
details
-
view
"
)
;
const
{
PerformanceStatisticsView
}
=
require
(
"
.
/
performance
-
statistics
-
view
"
)
;
var
{
Prefs
}
=
require
(
"
.
/
prefs
"
)
;
var
gStore
=
configureStore
(
)
;
const
WDA_DEFAULT_VERIFY_INTERVAL
=
50
;
const
WDA_DEFAULT_GIVE_UP_TIMEOUT
=
isTesting
?
45000
:
2000
;
const
DEFAULT_EDITOR_CONFIG
=
{
mode
:
Editor
.
modes
.
text
readOnly
:
true
lineNumbers
:
true
}
;
var
NetMonitorView
=
{
initialize
:
function
(
)
{
this
.
_initializePanes
(
)
;
this
.
Toolbar
.
initialize
(
gStore
)
;
this
.
RequestsMenu
.
initialize
(
gStore
)
;
this
.
NetworkDetails
.
initialize
(
)
;
this
.
CustomRequest
.
initialize
(
)
;
this
.
PerformanceStatistics
.
initialize
(
gStore
)
;
}
destroy
:
function
(
)
{
this
.
_isDestroyed
=
true
;
this
.
Toolbar
.
destroy
(
)
;
this
.
RequestsMenu
.
destroy
(
)
;
this
.
NetworkDetails
.
destroy
(
)
;
this
.
CustomRequest
.
destroy
(
)
;
this
.
_destroyPanes
(
)
;
}
_initializePanes
:
function
(
)
{
dumpn
(
"
Initializing
the
NetMonitorView
panes
"
)
;
this
.
_body
=
(
"
#
body
"
)
;
this
.
_detailsPane
=
(
"
#
details
-
pane
"
)
;
this
.
_detailsPane
.
setAttribute
(
"
width
"
Prefs
.
networkDetailsWidth
)
;
this
.
_detailsPane
.
setAttribute
(
"
height
"
Prefs
.
networkDetailsHeight
)
;
this
.
toggleDetailsPane
(
{
visible
:
false
}
)
;
}
_destroyPanes
:
Task
.
async
(
function
*
(
)
{
dumpn
(
"
Destroying
the
NetMonitorView
panes
"
)
;
Prefs
.
networkDetailsWidth
=
this
.
_detailsPane
.
getAttribute
(
"
width
"
)
;
Prefs
.
networkDetailsHeight
=
this
.
_detailsPane
.
getAttribute
(
"
height
"
)
;
this
.
_detailsPane
=
null
;
for
(
let
p
of
this
.
_editorPromises
.
values
(
)
)
{
let
editor
=
yield
p
;
editor
.
destroy
(
)
;
}
}
)
get
detailsPaneHidden
(
)
{
return
this
.
_detailsPane
.
classList
.
contains
(
"
pane
-
collapsed
"
)
;
}
toggleDetailsPane
:
function
(
flags
tabIndex
)
{
ViewHelpers
.
togglePane
(
flags
this
.
_detailsPane
)
;
if
(
flags
.
visible
)
{
this
.
_body
.
classList
.
remove
(
"
pane
-
collapsed
"
)
;
gStore
.
dispatch
(
Actions
.
openSidebar
(
true
)
)
;
}
else
{
this
.
_body
.
classList
.
add
(
"
pane
-
collapsed
"
)
;
gStore
.
dispatch
(
Actions
.
openSidebar
(
false
)
)
;
}
if
(
tabIndex
!
=
=
undefined
)
{
(
"
#
event
-
details
-
pane
"
)
.
selectedIndex
=
tabIndex
;
}
}
get
currentFrontendMode
(
)
{
if
(
!
this
.
_body
.
selectedPanel
)
{
return
null
;
}
return
this
.
_body
.
selectedPanel
.
id
;
}
toggleFrontendMode
:
function
(
)
{
if
(
this
.
currentFrontendMode
!
=
"
network
-
inspector
-
view
"
)
{
this
.
showNetworkInspectorView
(
)
;
}
else
{
this
.
showNetworkStatisticsView
(
)
;
}
}
showNetworkInspectorView
:
function
(
)
{
this
.
_body
.
selectedPanel
=
(
"
#
network
-
inspector
-
view
"
)
;
}
showNetworkStatisticsView
:
function
(
)
{
this
.
_body
.
selectedPanel
=
(
"
#
network
-
statistics
-
view
"
)
;
let
controller
=
NetMonitorController
;
let
requestsView
=
this
.
RequestsMenu
;
let
statisticsView
=
this
.
PerformanceStatistics
;
Task
.
spawn
(
function
*
(
)
{
statisticsView
.
displayPlaceholderCharts
(
)
;
yield
controller
.
triggerActivity
(
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_ENABLED
)
;
try
{
yield
whenDataAvailable
(
requestsView
.
store
[
"
responseHeaders
"
"
status
"
"
contentSize
"
"
mimeType
"
"
totalTime
"
]
)
;
}
catch
(
ex
)
{
console
.
error
(
ex
)
;
}
const
requests
=
requestsView
.
store
.
getState
(
)
.
requests
.
requests
;
statisticsView
.
createPrimedCacheChart
(
requests
)
;
statisticsView
.
createEmptyCacheChart
(
requests
)
;
}
)
;
}
reloadPage
:
function
(
)
{
NetMonitorController
.
triggerActivity
(
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_DEFAULT
)
;
}
editor
:
function
(
id
)
{
dumpn
(
"
Getting
a
NetMonitorView
editor
:
"
+
id
)
;
if
(
this
.
_editorPromises
.
has
(
id
)
)
{
return
this
.
_editorPromises
.
get
(
id
)
;
}
let
deferred
=
promise
.
defer
(
)
;
this
.
_editorPromises
.
set
(
id
deferred
.
promise
)
;
let
editor
=
new
Editor
(
DEFAULT_EDITOR_CONFIG
)
;
editor
.
appendTo
(
(
id
)
)
.
then
(
(
)
=
>
deferred
.
resolve
(
editor
)
)
;
return
deferred
.
promise
;
}
_body
:
null
_detailsPane
:
null
_editorPromises
:
new
Map
(
)
}
;
var
=
(
selector
target
=
document
)
=
>
target
.
querySelector
(
selector
)
;
var
all
=
(
selector
target
=
document
)
=
>
target
.
querySelectorAll
(
selector
)
;
function
whenDataAvailable
(
dataStore
mandatoryFields
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
interval
=
setInterval
(
(
)
=
>
{
const
{
requests
}
=
dataStore
.
getState
(
)
.
requests
;
const
allFieldsPresent
=
!
requests
.
isEmpty
(
)
&
&
requests
.
every
(
item
=
>
mandatoryFields
.
every
(
field
=
>
item
.
get
(
field
)
!
=
=
undefined
)
)
;
if
(
allFieldsPresent
)
{
clearInterval
(
interval
)
;
clearTimeout
(
timer
)
;
resolve
(
)
;
}
}
WDA_DEFAULT_VERIFY_INTERVAL
)
;
let
timer
=
setTimeout
(
(
)
=
>
{
clearInterval
(
interval
)
;
reject
(
new
Error
(
"
Timed
out
while
waiting
for
data
"
)
)
;
}
WDA_DEFAULT_GIVE_UP_TIMEOUT
)
;
}
)
;
}
NetMonitorView
.
Toolbar
=
new
ToolbarView
(
)
;
NetMonitorView
.
Sidebar
=
new
SidebarView
(
)
;
NetMonitorView
.
NetworkDetails
=
new
DetailsView
(
)
;
NetMonitorView
.
RequestsMenu
=
new
RequestsMenuView
(
)
;
NetMonitorView
.
CustomRequest
=
new
CustomRequestView
(
)
;
NetMonitorView
.
PerformanceStatistics
=
new
PerformanceStatisticsView
(
)
;
