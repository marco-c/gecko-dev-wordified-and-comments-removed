"
use
strict
"
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
writeHeaderText
getKeyWithEvent
getUrlQuery
parseQueryString
}
=
require
(
"
.
/
request
-
utils
"
)
;
const
Actions
=
require
(
"
.
/
actions
/
index
"
)
;
function
CustomRequestView
(
)
{
dumpn
(
"
CustomRequestView
was
instantiated
"
)
;
}
CustomRequestView
.
prototype
=
{
initialize
:
function
(
)
{
dumpn
(
"
Initializing
the
CustomRequestView
"
)
;
this
.
updateCustomRequestEvent
=
getKeyWithEvent
(
this
.
onUpdate
.
bind
(
this
)
)
;
(
"
#
custom
-
pane
"
)
.
addEventListener
(
"
input
"
this
.
updateCustomRequestEvent
false
)
;
}
destroy
:
function
(
)
{
dumpn
(
"
Destroying
the
CustomRequestView
"
)
;
(
"
#
custom
-
pane
"
)
.
removeEventListener
(
"
input
"
this
.
updateCustomRequestEvent
false
)
;
}
populate
:
Task
.
async
(
function
*
(
data
)
{
(
"
#
custom
-
url
-
value
"
)
.
value
=
data
.
url
;
(
"
#
custom
-
method
-
value
"
)
.
value
=
data
.
method
;
this
.
updateCustomQuery
(
data
.
url
)
;
if
(
data
.
requestHeaders
)
{
let
headers
=
data
.
requestHeaders
.
headers
;
(
"
#
custom
-
headers
-
value
"
)
.
value
=
writeHeaderText
(
headers
)
;
}
if
(
data
.
requestPostData
)
{
let
postData
=
data
.
requestPostData
.
postData
.
text
;
(
"
#
custom
-
postdata
-
value
"
)
.
value
=
yield
gNetwork
.
getString
(
postData
)
;
}
window
.
emit
(
EVENTS
.
CUSTOMREQUESTVIEW_POPULATED
)
;
}
)
onUpdate
:
function
(
field
)
{
let
selectedItem
=
NetMonitorView
.
RequestsMenu
.
selectedItem
;
let
store
=
NetMonitorView
.
RequestsMenu
.
store
;
let
value
;
switch
(
field
)
{
case
"
method
"
:
value
=
(
"
#
custom
-
method
-
value
"
)
.
value
.
trim
(
)
;
store
.
dispatch
(
Actions
.
updateRequest
(
selectedItem
.
id
{
method
:
value
}
)
)
;
break
;
case
"
url
"
:
value
=
(
"
#
custom
-
url
-
value
"
)
.
value
;
this
.
updateCustomQuery
(
value
)
;
store
.
dispatch
(
Actions
.
updateRequest
(
selectedItem
.
id
{
url
:
value
}
)
)
;
break
;
case
"
query
"
:
let
query
=
(
"
#
custom
-
query
-
value
"
)
.
value
;
this
.
updateCustomUrl
(
query
)
;
value
=
(
"
#
custom
-
url
-
value
"
)
.
value
;
store
.
dispatch
(
Actions
.
updateRequest
(
selectedItem
.
id
{
url
:
value
}
)
)
;
break
;
case
"
body
"
:
value
=
(
"
#
custom
-
postdata
-
value
"
)
.
value
;
store
.
dispatch
(
Actions
.
updateRequest
(
selectedItem
.
id
{
requestPostData
:
{
postData
:
{
text
:
value
}
}
}
)
)
;
break
;
case
"
headers
"
:
let
headersText
=
(
"
#
custom
-
headers
-
value
"
)
.
value
;
value
=
parseHeadersText
(
headersText
)
;
store
.
dispatch
(
Actions
.
updateRequest
(
selectedItem
.
id
{
requestHeaders
:
{
headers
:
value
}
}
)
)
;
break
;
}
}
updateCustomQuery
:
function
(
url
)
{
const
paramsArray
=
parseQueryString
(
getUrlQuery
(
url
)
)
;
if
(
!
paramsArray
)
{
(
"
#
custom
-
query
"
)
.
hidden
=
true
;
return
;
}
(
"
#
custom
-
query
"
)
.
hidden
=
false
;
(
"
#
custom
-
query
-
value
"
)
.
value
=
writeQueryText
(
paramsArray
)
;
}
updateCustomUrl
:
function
(
queryText
)
{
let
params
=
parseQueryText
(
queryText
)
;
let
queryString
=
writeQueryString
(
params
)
;
let
url
=
(
"
#
custom
-
url
-
value
"
)
.
value
;
let
oldQuery
=
getUrlQuery
(
url
)
;
let
path
=
url
.
replace
(
oldQuery
queryString
)
;
(
"
#
custom
-
url
-
value
"
)
.
value
=
path
;
}
}
;
function
parseHeadersText
(
text
)
{
return
parseRequestText
(
text
"
\
\
S
+
?
"
"
:
"
)
;
}
function
parseQueryText
(
text
)
{
return
parseRequestText
(
text
"
.
+
?
"
"
=
"
)
;
}
function
parseRequestText
(
text
namereg
divider
)
{
let
regex
=
new
RegExp
(
"
(
"
+
namereg
+
"
)
\
\
"
+
divider
+
"
\
\
s
*
(
.
+
)
"
)
;
let
pairs
=
[
]
;
for
(
let
line
of
text
.
split
(
"
\
n
"
)
)
{
let
matches
;
if
(
matches
=
regex
.
exec
(
line
)
)
{
let
[
name
value
]
=
matches
;
pairs
.
push
(
{
name
:
name
value
:
value
}
)
;
}
}
return
pairs
;
}
function
writeQueryText
(
params
)
{
return
params
.
map
(
(
{
name
value
}
)
=
>
name
+
"
=
"
+
value
)
.
join
(
"
\
n
"
)
;
}
function
writeQueryString
(
params
)
{
return
params
.
map
(
(
{
name
value
}
)
=
>
name
+
"
=
"
+
value
)
.
join
(
"
&
"
)
;
}
exports
.
CustomRequestView
=
CustomRequestView
;
