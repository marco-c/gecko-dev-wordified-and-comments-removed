"
use
strict
"
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
HTMLTooltip
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
HTMLTooltip
"
)
;
const
{
setNamedTimeout
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
view
-
helpers
"
)
;
const
{
CurlUtils
}
=
require
(
"
devtools
/
client
/
shared
/
curl
"
)
;
const
{
L10N
}
=
require
(
"
.
/
l10n
"
)
;
const
{
EVENTS
}
=
require
(
"
.
/
events
"
)
;
const
{
createElement
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
RequestList
=
createFactory
(
require
(
"
.
/
components
/
request
-
list
"
)
)
;
const
RequestListContextMenu
=
require
(
"
.
/
request
-
list
-
context
-
menu
"
)
;
const
Actions
=
require
(
"
.
/
actions
/
index
"
)
;
const
{
Prefs
}
=
require
(
"
.
/
prefs
"
)
;
const
{
formDataURI
writeHeaderText
loadCauseString
}
=
require
(
"
.
/
request
-
utils
"
)
;
const
{
getActiveFilters
getSortedRequests
getDisplayedRequests
getRequestById
getSelectedRequest
}
=
require
(
"
.
/
selectors
/
index
"
)
;
const
RESIZE_REFRESH_RATE
=
50
;
function
storeWatcher
(
initialValue
reduceValue
onChange
)
{
let
currentValue
=
initialValue
;
return
(
)
=
>
{
const
oldValue
=
currentValue
;
const
newValue
=
reduceValue
(
currentValue
)
;
if
(
newValue
!
=
=
oldValue
)
{
currentValue
=
newValue
;
onChange
(
newValue
oldValue
)
;
}
}
;
}
function
RequestsMenuView
(
)
{
dumpn
(
"
RequestsMenuView
was
instantiated
"
)
;
}
RequestsMenuView
.
prototype
=
{
initialize
:
function
(
store
)
{
dumpn
(
"
Initializing
the
RequestsMenuView
"
)
;
this
.
store
=
store
;
this
.
contextMenu
=
new
RequestListContextMenu
(
)
;
this
.
contextMenu
.
initialize
(
store
)
;
Prefs
.
filters
.
forEach
(
type
=
>
store
.
dispatch
(
Actions
.
toggleRequestFilterType
(
type
)
)
)
;
this
.
store
.
subscribe
(
storeWatcher
(
null
(
)
=
>
getSelectedRequest
(
this
.
store
.
getState
(
)
)
(
newSelected
oldSelected
)
=
>
this
.
onSelectionUpdate
(
newSelected
oldSelected
)
)
)
;
this
.
store
.
subscribe
(
storeWatcher
(
false
(
)
=
>
this
.
store
.
getState
(
)
.
ui
.
sidebarOpen
(
)
=
>
this
.
onResize
(
)
)
)
;
this
.
sendCustomRequestEvent
=
this
.
sendCustomRequest
.
bind
(
this
)
;
this
.
closeCustomRequestEvent
=
this
.
closeCustomRequest
.
bind
(
this
)
;
this
.
cloneSelectedRequestEvent
=
this
.
cloneSelectedRequest
.
bind
(
this
)
;
this
.
toggleRawHeadersEvent
=
this
.
toggleRawHeaders
.
bind
(
this
)
;
(
"
#
toggle
-
raw
-
headers
"
)
.
addEventListener
(
"
click
"
this
.
toggleRawHeadersEvent
false
)
;
this
.
_summary
=
(
"
#
requests
-
menu
-
network
-
summary
-
button
"
)
;
this
.
_summary
.
setAttribute
(
"
label
"
L10N
.
getStr
(
"
networkMenu
.
empty
"
)
)
;
this
.
onResize
=
this
.
onResize
.
bind
(
this
)
;
this
.
_splitter
=
(
"
#
network
-
inspector
-
view
-
splitter
"
)
;
this
.
_splitter
.
addEventListener
(
"
mouseup
"
this
.
onResize
false
)
;
window
.
addEventListener
(
"
resize
"
this
.
onResize
false
)
;
this
.
tooltip
=
new
HTMLTooltip
(
NetMonitorController
.
_toolbox
.
doc
{
type
:
"
arrow
"
}
)
;
this
.
mountPoint
=
(
"
#
network
-
table
"
)
;
ReactDOM
.
render
(
createElement
(
Provider
{
store
:
this
.
store
}
RequestList
(
)
)
this
.
mountPoint
)
;
window
.
once
(
"
connected
"
this
.
_onConnect
.
bind
(
this
)
)
;
}
_onConnect
(
)
{
if
(
NetMonitorController
.
supportsCustomRequest
)
{
(
"
#
custom
-
request
-
send
-
button
"
)
.
addEventListener
(
"
click
"
this
.
sendCustomRequestEvent
false
)
;
(
"
#
custom
-
request
-
close
-
button
"
)
.
addEventListener
(
"
click
"
this
.
closeCustomRequestEvent
false
)
;
(
"
#
headers
-
summary
-
resend
"
)
.
addEventListener
(
"
click
"
this
.
cloneSelectedRequestEvent
false
)
;
}
else
{
(
"
#
headers
-
summary
-
resend
"
)
.
hidden
=
true
;
}
}
destroy
(
)
{
dumpn
(
"
Destroying
the
RequestsMenuView
"
)
;
Prefs
.
filters
=
getActiveFilters
(
this
.
store
.
getState
(
)
)
;
(
"
#
custom
-
request
-
send
-
button
"
)
.
removeEventListener
(
"
click
"
this
.
sendCustomRequestEvent
false
)
;
(
"
#
custom
-
request
-
close
-
button
"
)
.
removeEventListener
(
"
click
"
this
.
closeCustomRequestEvent
false
)
;
(
"
#
headers
-
summary
-
resend
"
)
.
removeEventListener
(
"
click
"
this
.
cloneSelectedRequestEvent
false
)
;
(
"
#
toggle
-
raw
-
headers
"
)
.
removeEventListener
(
"
click
"
this
.
toggleRawHeadersEvent
false
)
;
this
.
_splitter
.
removeEventListener
(
"
mouseup
"
this
.
onResize
false
)
;
window
.
removeEventListener
(
"
resize
"
this
.
onResize
false
)
;
this
.
tooltip
.
destroy
(
)
;
ReactDOM
.
unmountComponentAtNode
(
this
.
mountPoint
)
;
}
reset
(
)
{
this
.
store
.
dispatch
(
Actions
.
batchReset
(
)
)
;
this
.
store
.
dispatch
(
Actions
.
clearRequests
(
)
)
;
}
clear
(
)
{
this
.
store
.
dispatch
(
Actions
.
clearRequests
(
)
)
;
}
addRequest
(
id
data
)
{
let
{
method
url
isXHR
cause
startedDateTime
fromCache
fromServiceWorker
}
=
data
;
let
startedMillis
=
Date
.
parse
(
startedDateTime
)
;
if
(
cause
)
{
let
type
=
loadCauseString
(
cause
.
type
)
;
cause
=
Object
.
assign
(
{
}
cause
{
type
}
)
;
}
const
action
=
Actions
.
addRequest
(
id
{
startedMillis
method
url
isXHR
cause
fromCache
fromServiceWorker
}
true
)
;
this
.
store
.
dispatch
(
action
)
.
then
(
(
)
=
>
window
.
emit
(
EVENTS
.
REQUEST_ADDED
action
.
id
)
)
;
}
updateRequest
:
Task
.
async
(
function
*
(
id
data
)
{
const
action
=
Actions
.
updateRequest
(
id
data
true
)
;
yield
this
.
store
.
dispatch
(
action
)
;
let
{
responseContent
requestPostData
}
=
action
.
data
;
if
(
responseContent
&
&
responseContent
.
content
)
{
let
request
=
getRequestById
(
this
.
store
.
getState
(
)
action
.
id
)
;
let
{
text
encoding
}
=
responseContent
.
content
;
if
(
request
)
{
let
{
mimeType
}
=
request
;
if
(
mimeType
.
includes
(
"
image
/
"
)
)
{
let
responseBody
=
yield
gNetwork
.
getString
(
text
)
;
const
dataUri
=
formDataURI
(
mimeType
encoding
responseBody
)
;
yield
this
.
store
.
dispatch
(
Actions
.
updateRequest
(
action
.
id
{
responseContentDataUri
:
dataUri
}
true
)
)
;
window
.
emit
(
EVENTS
.
RESPONSE_IMAGE_THUMBNAIL_DISPLAYED
)
;
}
else
if
(
mimeType
.
includes
(
"
text
/
html
"
)
&
&
typeof
text
!
=
=
"
string
"
)
{
let
responseBody
=
yield
gNetwork
.
getString
(
text
)
;
responseContent
.
content
.
text
=
responseBody
;
responseContent
=
Object
.
assign
(
{
}
responseContent
)
;
yield
this
.
store
.
dispatch
(
Actions
.
updateRequest
(
action
.
id
{
responseContent
}
true
)
)
;
}
}
}
if
(
requestPostData
&
&
requestPostData
.
postData
)
{
let
{
text
}
=
requestPostData
.
postData
;
let
postData
=
yield
gNetwork
.
getString
(
text
)
;
const
headers
=
CurlUtils
.
getHeadersFromMultipartText
(
postData
)
;
const
headersSize
=
headers
.
reduce
(
(
acc
{
name
value
}
)
=
>
{
return
acc
+
name
.
length
+
value
.
length
+
2
;
}
0
)
;
yield
this
.
store
.
dispatch
(
Actions
.
updateRequest
(
action
.
id
{
requestHeadersFromUploadStream
:
{
headers
headersSize
}
}
true
)
)
;
}
}
)
set
lazyUpdate
(
value
)
{
this
.
store
.
dispatch
(
Actions
.
batchEnable
(
value
)
)
;
}
get
items
(
)
{
return
getSortedRequests
(
this
.
store
.
getState
(
)
)
;
}
get
visibleItems
(
)
{
return
getDisplayedRequests
(
this
.
store
.
getState
(
)
)
;
}
get
itemCount
(
)
{
return
this
.
store
.
getState
(
)
.
requests
.
requests
.
size
;
}
getItemAtIndex
(
index
)
{
return
getSortedRequests
(
this
.
store
.
getState
(
)
)
.
get
(
index
)
;
}
get
selectedIndex
(
)
{
const
state
=
this
.
store
.
getState
(
)
;
if
(
!
state
.
requests
.
selectedId
)
{
return
-
1
;
}
return
getSortedRequests
(
state
)
.
findIndex
(
r
=
>
r
.
id
=
=
=
state
.
requests
.
selectedId
)
;
}
set
selectedIndex
(
index
)
{
const
requests
=
getSortedRequests
(
this
.
store
.
getState
(
)
)
;
let
itemId
=
null
;
if
(
index
>
=
0
&
&
index
<
requests
.
size
)
{
itemId
=
requests
.
get
(
index
)
.
id
;
}
this
.
store
.
dispatch
(
Actions
.
selectRequest
(
itemId
)
)
;
}
get
selectedItem
(
)
{
return
getSelectedRequest
(
this
.
store
.
getState
(
)
)
;
}
set
selectedItem
(
item
)
{
this
.
store
.
dispatch
(
Actions
.
selectRequest
(
item
?
item
.
id
:
null
)
)
;
}
onSelectionUpdate
(
newSelected
oldSelected
)
{
if
(
newSelected
&
&
oldSelected
&
&
newSelected
.
id
=
=
=
oldSelected
.
id
)
{
NetMonitorView
.
NetworkDetails
.
populate
(
newSelected
)
;
}
else
if
(
newSelected
)
{
NetMonitorView
.
Sidebar
.
populate
(
newSelected
)
;
NetMonitorView
.
Sidebar
.
toggle
(
true
)
;
}
else
{
NetMonitorView
.
Sidebar
.
toggle
(
false
)
;
}
}
onResize
(
)
{
setNamedTimeout
(
"
resize
-
events
"
RESIZE_REFRESH_RATE
(
)
=
>
{
const
waterfallHeaderEl
=
(
"
#
requests
-
menu
-
waterfall
-
header
-
box
"
)
;
if
(
waterfallHeaderEl
)
{
const
{
width
}
=
waterfallHeaderEl
.
getBoundingClientRect
(
)
;
this
.
store
.
dispatch
(
Actions
.
resizeWaterfall
(
width
)
)
;
}
}
)
;
}
cloneSelectedRequest
(
)
{
this
.
store
.
dispatch
(
Actions
.
cloneSelectedRequest
(
)
)
;
}
toggleRawHeaders
:
function
(
)
{
let
requestTextarea
=
(
"
#
raw
-
request
-
headers
-
textarea
"
)
;
let
responseTextarea
=
(
"
#
raw
-
response
-
headers
-
textarea
"
)
;
let
rawHeadersHidden
=
(
"
#
raw
-
headers
"
)
.
getAttribute
(
"
hidden
"
)
;
if
(
rawHeadersHidden
)
{
let
selected
=
getSelectedRequest
(
this
.
store
.
getState
(
)
)
;
let
selectedRequestHeaders
=
selected
.
requestHeaders
.
headers
;
let
selectedResponseHeaders
=
selected
.
responseHeaders
.
headers
;
requestTextarea
.
value
=
writeHeaderText
(
selectedRequestHeaders
)
;
responseTextarea
.
value
=
writeHeaderText
(
selectedResponseHeaders
)
;
(
"
#
raw
-
headers
"
)
.
hidden
=
false
;
}
else
{
requestTextarea
.
value
=
null
;
responseTextarea
.
value
=
null
;
(
"
#
raw
-
headers
"
)
.
hidden
=
true
;
}
}
sendCustomRequest
:
function
(
)
{
let
selected
=
getSelectedRequest
(
this
.
store
.
getState
(
)
)
;
let
data
=
{
url
:
selected
.
url
method
:
selected
.
method
httpVersion
:
selected
.
httpVersion
}
;
if
(
selected
.
requestHeaders
)
{
data
.
headers
=
selected
.
requestHeaders
.
headers
;
}
if
(
selected
.
requestPostData
)
{
data
.
body
=
selected
.
requestPostData
.
postData
.
text
;
}
NetMonitorController
.
webConsoleClient
.
sendHTTPRequest
(
data
response
=
>
{
let
id
=
response
.
eventActor
.
actor
;
this
.
store
.
dispatch
(
Actions
.
preselectRequest
(
id
)
)
;
}
)
;
this
.
closeCustomRequest
(
)
;
}
closeCustomRequest
(
)
{
this
.
store
.
dispatch
(
Actions
.
removeSelectedCustomRequest
(
)
)
;
}
}
;
exports
.
RequestsMenuView
=
RequestsMenuView
;
