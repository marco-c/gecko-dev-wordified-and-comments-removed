"
use
strict
"
;
function
all
(
)
{
return
true
;
}
function
isHtml
(
{
mimeType
}
)
{
return
mimeType
&
&
mimeType
.
includes
(
"
/
html
"
)
;
}
function
isCss
(
{
mimeType
}
)
{
return
mimeType
&
&
mimeType
.
includes
(
"
/
css
"
)
;
}
function
isJs
(
{
mimeType
}
)
{
return
mimeType
&
&
(
mimeType
.
includes
(
"
/
ecmascript
"
)
|
|
mimeType
.
includes
(
"
/
javascript
"
)
|
|
mimeType
.
includes
(
"
/
x
-
javascript
"
)
)
;
}
function
isXHR
(
item
)
{
return
item
.
isXHR
&
&
!
isWS
(
item
)
;
}
function
isFont
(
{
url
mimeType
}
)
{
return
(
mimeType
&
&
(
mimeType
.
includes
(
"
font
/
"
)
|
|
mimeType
.
includes
(
"
/
font
"
)
)
)
|
|
url
.
includes
(
"
.
eot
"
)
|
|
url
.
includes
(
"
.
ttf
"
)
|
|
url
.
includes
(
"
.
otf
"
)
|
|
url
.
includes
(
"
.
woff
"
)
;
}
function
isImage
(
{
mimeType
}
)
{
return
mimeType
&
&
mimeType
.
includes
(
"
image
/
"
)
;
}
function
isMedia
(
{
mimeType
}
)
{
return
mimeType
&
&
(
mimeType
.
includes
(
"
audio
/
"
)
|
|
mimeType
.
includes
(
"
video
/
"
)
|
|
mimeType
.
includes
(
"
model
/
"
)
)
;
}
function
isFlash
(
{
url
mimeType
}
)
{
return
(
mimeType
&
&
(
mimeType
.
includes
(
"
/
x
-
flv
"
)
|
|
mimeType
.
includes
(
"
/
x
-
shockwave
-
flash
"
)
)
)
|
|
url
.
includes
(
"
.
swf
"
)
|
|
url
.
includes
(
"
.
flv
"
)
;
}
function
isWS
(
{
requestHeaders
responseHeaders
}
)
{
if
(
!
requestHeaders
|
|
!
Array
.
isArray
(
requestHeaders
.
headers
)
)
{
return
false
;
}
let
upgradeHeader
=
requestHeaders
.
headers
.
find
(
header
=
>
{
return
(
header
.
name
=
=
"
Upgrade
"
)
;
}
)
;
if
(
!
upgradeHeader
&
&
responseHeaders
&
&
Array
.
isArray
(
responseHeaders
.
headers
)
)
{
upgradeHeader
=
responseHeaders
.
headers
.
find
(
header
=
>
{
return
(
header
.
name
=
=
"
Upgrade
"
)
;
}
)
;
}
if
(
!
upgradeHeader
|
|
upgradeHeader
.
value
!
=
"
websocket
"
)
{
return
false
;
}
return
true
;
}
function
isOther
(
item
)
{
let
tests
=
[
isHtml
isCss
isJs
isXHR
isFont
isImage
isMedia
isFlash
isWS
]
;
return
tests
.
every
(
is
=
>
!
is
(
item
)
)
;
}
function
isFreetextMatch
(
{
url
}
text
)
{
let
lowerCaseUrl
=
url
.
toLowerCase
(
)
;
let
lowerCaseText
=
text
.
toLowerCase
(
)
;
let
textLength
=
text
.
length
;
if
(
text
.
startsWith
(
"
-
"
)
&
&
textLength
>
1
)
{
lowerCaseText
=
lowerCaseText
.
substring
(
1
textLength
)
;
return
!
lowerCaseUrl
.
includes
(
lowerCaseText
)
;
}
return
!
text
|
|
lowerCaseUrl
.
includes
(
lowerCaseText
)
;
}
exports
.
Filters
=
{
all
:
all
html
:
isHtml
css
:
isCss
js
:
isJs
xhr
:
isXHR
fonts
:
isFont
images
:
isImage
media
:
isMedia
flash
:
isFlash
ws
:
isWS
other
:
isOther
}
;
exports
.
isFreetextMatch
=
isFreetextMatch
;
