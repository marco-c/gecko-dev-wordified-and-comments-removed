"
use
strict
"
;
const
{
createClass
DOM
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
Actions
=
require
(
"
.
.
/
actions
/
index
"
)
;
const
{
ACTIVITY_TYPE
}
=
require
(
"
.
.
/
constants
"
)
;
const
{
L10N
}
=
require
(
"
.
.
/
l10n
"
)
;
const
{
button
div
span
}
=
DOM
;
const
RequestListEmptyNotice
=
createClass
(
{
displayName
:
"
RequestListEmptyNotice
"
propTypes
:
{
onReloadClick
:
PropTypes
.
func
.
isRequired
onPerfClick
:
PropTypes
.
func
.
isRequired
}
render
(
)
{
return
div
(
{
id
:
"
requests
-
menu
-
empty
-
notice
"
className
:
"
request
-
list
-
empty
-
notice
"
}
div
(
{
id
:
"
notice
-
reload
-
message
"
}
span
(
null
L10N
.
getStr
(
"
netmonitor
.
reloadNotice1
"
)
)
button
(
{
id
:
"
requests
-
menu
-
reload
-
notice
-
button
"
className
:
"
devtools
-
toolbarbutton
"
"
data
-
standalone
"
:
true
onClick
:
this
.
props
.
onReloadClick
}
L10N
.
getStr
(
"
netmonitor
.
reloadNotice2
"
)
)
span
(
null
L10N
.
getStr
(
"
netmonitor
.
reloadNotice3
"
)
)
)
div
(
{
id
:
"
notice
-
perf
-
message
"
}
span
(
null
L10N
.
getStr
(
"
netmonitor
.
perfNotice1
"
)
)
button
(
{
id
:
"
requests
-
menu
-
perf
-
notice
-
button
"
title
:
L10N
.
getStr
(
"
netmonitor
.
perfNotice3
"
)
className
:
"
devtools
-
button
"
"
data
-
standalone
"
:
true
onClick
:
this
.
props
.
onPerfClick
}
)
span
(
null
L10N
.
getStr
(
"
netmonitor
.
perfNotice2
"
)
)
)
)
;
}
}
)
;
module
.
exports
=
connect
(
undefined
dispatch
=
>
(
{
onPerfClick
:
e
=
>
dispatch
(
Actions
.
openStatistics
(
true
)
)
onReloadClick
:
e
=
>
NetMonitorController
.
triggerActivity
(
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_DEFAULT
)
}
)
)
(
RequestListEmptyNotice
)
;
