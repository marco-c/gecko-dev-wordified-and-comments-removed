"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
ACTIVITY_TYPE
EVENTS
TEST_EVENTS
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
const
FirefoxDataProvider
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
connector
/
firefox
-
data
-
provider
"
)
;
const
{
getDisplayedTimingMarker
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
selectors
/
index
"
)
;
loader
.
lazyRequireGetter
(
this
"
throttlingProfiles
"
"
devtools
/
client
/
shared
/
components
/
throttling
/
profiles
"
)
;
class
FirefoxConnector
{
constructor
(
)
{
this
.
connect
=
this
.
connect
.
bind
(
this
)
;
this
.
disconnect
=
this
.
disconnect
.
bind
(
this
)
;
this
.
willNavigate
=
this
.
willNavigate
.
bind
(
this
)
;
this
.
navigate
=
this
.
navigate
.
bind
(
this
)
;
this
.
sendHTTPRequest
=
this
.
sendHTTPRequest
.
bind
(
this
)
;
this
.
setPreferences
=
this
.
setPreferences
.
bind
(
this
)
;
this
.
triggerActivity
=
this
.
triggerActivity
.
bind
(
this
)
;
this
.
getTabTarget
=
this
.
getTabTarget
.
bind
(
this
)
;
this
.
viewSourceInDebugger
=
this
.
viewSourceInDebugger
.
bind
(
this
)
;
this
.
requestData
=
this
.
requestData
.
bind
(
this
)
;
this
.
getTimingMarker
=
this
.
getTimingMarker
.
bind
(
this
)
;
this
.
updateNetworkThrottling
=
this
.
updateNetworkThrottling
.
bind
(
this
)
;
this
.
getLongString
=
this
.
getLongString
.
bind
(
this
)
;
this
.
onTargetAvailable
=
this
.
onTargetAvailable
.
bind
(
this
)
;
this
.
onResourceAvailable
=
this
.
onResourceAvailable
.
bind
(
this
)
;
this
.
onResourceUpdated
=
this
.
onResourceUpdated
.
bind
(
this
)
;
this
.
networkFront
=
null
;
}
get
currentTarget
(
)
{
return
this
.
toolbox
.
targetList
.
targetFront
;
}
get
hasResourceWatcherSupport
(
)
{
return
this
.
toolbox
.
resourceWatcher
.
hasResourceWatcherSupport
(
this
.
toolbox
.
resourceWatcher
.
TYPES
.
NETWORK_EVENT
)
;
}
get
watcherFront
(
)
{
return
this
.
toolbox
.
resourceWatcher
.
watcherFront
;
}
async
connect
(
connection
actions
getState
)
{
this
.
actions
=
actions
;
this
.
getState
=
getState
;
this
.
toolbox
=
connection
.
toolbox
;
this
.
owner
=
connection
.
owner
;
await
this
.
toolbox
.
targetList
.
watchTargets
(
[
this
.
toolbox
.
targetList
.
TYPES
.
FRAME
]
this
.
onTargetAvailable
)
;
await
this
.
toolbox
.
resourceWatcher
.
watchResources
(
[
this
.
toolbox
.
resourceWatcher
.
TYPES
.
DOCUMENT_EVENT
]
{
onAvailable
:
this
.
onResourceAvailable
}
)
;
}
disconnect
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
this
.
toolbox
.
targetList
.
unwatchTargets
(
[
this
.
toolbox
.
targetList
.
TYPES
.
FRAME
]
this
.
onTargetAvailable
)
;
this
.
toolbox
.
resourceWatcher
.
unwatchResources
(
[
this
.
toolbox
.
resourceWatcher
.
TYPES
.
DOCUMENT_EVENT
]
{
onAvailable
:
this
.
onResourceAvailable
}
)
;
if
(
this
.
actions
)
{
this
.
actions
.
batchReset
(
)
;
}
this
.
removeListeners
(
)
;
this
.
currentTarget
.
off
(
"
will
-
navigate
"
this
.
willNavigate
)
;
this
.
webConsoleFront
=
null
;
this
.
dataProvider
=
null
;
}
async
pause
(
)
{
await
this
.
removeListeners
(
)
;
}
async
resume
(
)
{
await
this
.
addListeners
(
true
)
;
}
async
onTargetAvailable
(
{
targetFront
isTargetSwitching
}
)
{
if
(
!
targetFront
.
isTopLevel
)
{
return
;
}
if
(
isTargetSwitching
)
{
this
.
willNavigate
(
)
;
}
targetFront
.
on
(
"
will
-
navigate
"
this
.
willNavigate
)
;
this
.
webConsoleFront
=
await
this
.
currentTarget
.
getFront
(
"
console
"
)
;
this
.
dataProvider
=
new
FirefoxDataProvider
(
{
webConsoleFront
:
this
.
webConsoleFront
actions
:
this
.
actions
owner
:
this
.
owner
resourceWatcher
:
this
.
toolbox
.
resourceWatcher
}
)
;
if
(
isTargetSwitching
)
{
await
this
.
addTargetListeners
(
)
;
}
else
{
await
this
.
addListeners
(
)
;
}
this
.
responsiveFront
=
await
this
.
currentTarget
.
getFront
(
"
responsive
"
)
;
if
(
this
.
hasResourceWatcherSupport
)
{
this
.
networkFront
=
await
this
.
watcherFront
.
getNetworkParentActor
(
)
;
}
}
async
onResourceAvailable
(
resources
)
{
for
(
const
resource
of
resources
)
{
const
{
TYPES
}
=
this
.
toolbox
.
resourceWatcher
;
if
(
resource
.
resourceType
=
=
=
TYPES
.
DOCUMENT_EVENT
)
{
this
.
onDocEvent
(
resource
)
;
continue
;
}
if
(
resource
.
resourceType
=
=
=
TYPES
.
NETWORK_EVENT
)
{
this
.
dataProvider
.
onNetworkResourceAvailable
(
resource
)
;
continue
;
}
if
(
resource
.
resourceType
=
=
=
TYPES
.
NETWORK_EVENT_STACKTRACE
)
{
this
.
dataProvider
.
onStackTraceAvailable
(
resource
)
;
continue
;
}
if
(
resource
.
resourceType
=
=
=
TYPES
.
WEBSOCKET
)
{
const
{
wsMessageType
}
=
resource
;
switch
(
wsMessageType
)
{
case
"
webSocketOpened
"
:
{
this
.
dataProvider
.
onWebSocketOpened
(
resource
.
httpChannelId
resource
.
effectiveURI
resource
.
protocols
resource
.
extensions
)
;
break
;
}
case
"
webSocketClosed
"
:
{
this
.
dataProvider
.
onWebSocketClosed
(
resource
.
httpChannelId
resource
.
wasClean
resource
.
code
resource
.
reason
)
;
break
;
}
case
"
frameReceived
"
:
{
this
.
dataProvider
.
onFrameReceived
(
resource
.
httpChannelId
resource
.
data
)
;
break
;
}
case
"
frameSent
"
:
{
this
.
dataProvider
.
onFrameSent
(
resource
.
httpChannelId
resource
.
data
)
;
break
;
}
}
}
}
}
async
onResourceUpdated
(
updates
)
{
for
(
const
{
resource
update
}
of
updates
)
{
if
(
resource
.
resourceType
=
=
=
this
.
toolbox
.
resourceWatcher
.
TYPES
.
NETWORK_EVENT
)
{
this
.
dataProvider
.
onNetworkResourceUpdated
(
resource
update
)
;
}
}
}
async
addListeners
(
ignoreExistingResources
=
false
)
{
const
targetResources
=
[
this
.
toolbox
.
resourceWatcher
.
TYPES
.
NETWORK_EVENT
this
.
toolbox
.
resourceWatcher
.
TYPES
.
NETWORK_EVENT_STACKTRACE
]
;
if
(
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
features
.
webSockets
"
)
)
{
targetResources
.
push
(
this
.
toolbox
.
resourceWatcher
.
TYPES
.
WEBSOCKET
)
;
}
await
this
.
toolbox
.
resourceWatcher
.
watchResources
(
targetResources
{
onAvailable
:
this
.
onResourceAvailable
onUpdated
:
this
.
onResourceUpdated
ignoreExistingResources
}
)
;
await
this
.
addTargetListeners
(
)
;
}
async
addTargetListeners
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
features
.
serverSentEvents
"
)
)
{
const
eventSourceFront
=
await
this
.
currentTarget
.
getFront
(
"
eventSource
"
)
;
eventSourceFront
.
startListening
(
)
;
eventSourceFront
.
on
(
"
eventSourceConnectionClosed
"
this
.
dataProvider
.
onEventSourceConnectionClosed
)
;
eventSourceFront
.
on
(
"
eventReceived
"
this
.
dataProvider
.
onEventReceived
)
;
}
}
removeListeners
(
)
{
this
.
toolbox
.
resourceWatcher
.
unwatchResources
(
[
this
.
toolbox
.
resourceWatcher
.
TYPES
.
NETWORK_EVENT
this
.
toolbox
.
resourceWatcher
.
TYPES
.
NETWORK_EVENT_STACKTRACE
this
.
toolbox
.
resourceWatcher
.
TYPES
.
WEBSOCKET
]
{
onAvailable
:
this
.
onResourceAvailable
onUpdated
:
this
.
onResourceUpdated
}
)
;
const
eventSourceFront
=
this
.
currentTarget
.
getCachedFront
(
"
eventSource
"
)
;
if
(
eventSourceFront
)
{
eventSourceFront
.
off
(
"
eventSourceConnectionClosed
"
this
.
dataProvider
.
onEventSourceConnectionClosed
)
;
eventSourceFront
.
off
(
"
eventReceived
"
this
.
dataProvider
.
onEventReceived
)
;
}
}
enableActions
(
enable
)
{
this
.
dataProvider
.
enableActions
(
enable
)
;
}
willNavigate
(
)
{
if
(
this
.
actions
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
persistlog
"
)
)
{
this
.
actions
.
batchReset
(
)
;
this
.
actions
.
clearRequests
(
)
;
}
else
{
this
.
actions
.
clearTimingMarkers
(
)
;
}
}
if
(
this
.
actions
&
&
this
.
getState
)
{
const
state
=
this
.
getState
(
)
;
if
(
!
state
.
requests
.
recording
)
{
this
.
actions
.
toggleRecording
(
)
;
}
if
(
state
.
search
.
ongoingSearch
)
{
this
.
actions
.
stopOngoingSearch
(
)
;
}
}
}
navigate
(
)
{
if
(
!
this
.
dataProvider
.
hasPendingRequests
(
)
)
{
this
.
onReloaded
(
)
;
return
;
}
const
listener
=
(
)
=
>
{
if
(
this
.
dataProvider
&
&
this
.
dataProvider
.
hasPendingRequests
(
)
)
{
return
;
}
if
(
this
.
owner
)
{
this
.
owner
.
off
(
EVENTS
.
PAYLOAD_READY
listener
)
;
}
if
(
this
.
dataProvider
)
{
this
.
onReloaded
(
)
;
}
}
;
if
(
this
.
owner
)
{
this
.
owner
.
on
(
EVENTS
.
PAYLOAD_READY
listener
)
;
}
}
onReloaded
(
)
{
const
panel
=
this
.
toolbox
.
getPanel
(
"
netmonitor
"
)
;
if
(
panel
)
{
panel
.
emit
(
"
reloaded
"
)
;
}
}
onDocEvent
(
resource
)
{
if
(
!
resource
.
targetFront
.
isTopLevel
)
{
return
;
}
if
(
resource
.
name
=
=
=
"
dom
-
loading
"
)
{
return
;
}
if
(
this
.
actions
)
{
this
.
actions
.
addTimingMarker
(
resource
)
;
}
if
(
resource
.
name
=
=
=
"
dom
-
complete
"
)
{
this
.
navigate
(
)
;
}
this
.
emitForTests
(
TEST_EVENTS
.
TIMELINE_EVENT
resource
)
;
}
sendHTTPRequest
(
data
)
{
return
this
.
webConsoleFront
.
sendHTTPRequest
(
data
)
;
}
blockRequest
(
filter
)
{
return
this
.
webConsoleFront
.
blockRequest
(
filter
)
;
}
unblockRequest
(
filter
)
{
return
this
.
webConsoleFront
.
unblockRequest
(
filter
)
;
}
async
getBlockedUrls
(
)
{
if
(
this
.
hasResourceWatcherSupport
&
&
this
.
networkFront
)
{
return
this
.
networkFront
.
getBlockedUrls
(
)
;
}
if
(
!
this
.
webConsoleFront
.
traits
.
blockedUrls
)
{
return
[
]
;
}
return
this
.
webConsoleFront
.
getBlockedUrls
(
)
;
}
async
setBlockedUrls
(
urls
)
{
if
(
this
.
hasResourceWatcherSupport
&
&
this
.
networkFront
)
{
return
this
.
networkFront
.
setBlockedUrls
(
urls
)
;
}
return
this
.
webConsoleFront
.
setBlockedUrls
(
urls
)
;
}
setPreferences
(
request
)
{
return
this
.
webConsoleFront
.
setPreferences
(
request
)
;
}
triggerActivity
(
type
)
{
const
standBy
=
(
)
=
>
{
this
.
currentActivity
=
ACTIVITY_TYPE
.
NONE
;
}
;
const
waitForNavigation
=
async
(
)
=
>
{
await
this
.
currentTarget
.
once
(
"
will
-
navigate
"
)
;
await
this
.
currentTarget
.
once
(
"
navigate
"
)
;
}
;
const
reconfigureTab
=
options
=
>
{
return
this
.
currentTarget
.
reconfigure
(
{
options
}
)
;
}
;
const
reconfigureTabAndWaitForNavigation
=
options
=
>
{
options
.
performReload
=
true
;
const
navigationFinished
=
waitForNavigation
(
)
;
return
reconfigureTab
(
options
)
.
then
(
(
)
=
>
navigationFinished
)
;
}
;
switch
(
type
)
{
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_DEFAULT
:
return
reconfigureTabAndWaitForNavigation
(
{
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_ENABLED
:
this
.
currentActivity
=
ACTIVITY_TYPE
.
ENABLE_CACHE
;
this
.
currentTarget
.
once
(
"
will
-
navigate
"
(
)
=
>
{
this
.
currentActivity
=
type
;
}
)
;
return
reconfigureTabAndWaitForNavigation
(
{
cacheDisabled
:
false
performReload
:
true
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_DISABLED
:
this
.
currentActivity
=
ACTIVITY_TYPE
.
DISABLE_CACHE
;
this
.
currentTarget
.
once
(
"
will
-
navigate
"
(
)
=
>
{
this
.
currentActivity
=
type
;
}
)
;
return
reconfigureTabAndWaitForNavigation
(
{
cacheDisabled
:
true
performReload
:
true
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
ENABLE_CACHE
:
this
.
currentActivity
=
type
;
return
reconfigureTab
(
{
cacheDisabled
:
false
performReload
:
false
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
DISABLE_CACHE
:
this
.
currentActivity
=
type
;
return
reconfigureTab
(
{
cacheDisabled
:
true
performReload
:
false
}
)
.
then
(
standBy
)
;
}
this
.
currentActivity
=
ACTIVITY_TYPE
.
NONE
;
return
Promise
.
reject
(
new
Error
(
"
Invalid
activity
type
"
)
)
;
}
getLongString
(
stringGrip
)
{
return
this
.
dataProvider
.
getLongString
(
stringGrip
)
;
}
getTabTarget
(
)
{
return
this
.
currentTarget
;
}
viewSourceInDebugger
(
sourceURL
sourceLine
sourceColumn
)
{
if
(
this
.
toolbox
)
{
this
.
toolbox
.
viewSourceInDebugger
(
sourceURL
sourceLine
sourceColumn
)
;
}
}
requestData
(
request
type
)
{
return
this
.
dataProvider
.
requestData
(
request
type
)
;
}
getTimingMarker
(
name
)
{
if
(
!
this
.
getState
)
{
return
-
1
;
}
const
state
=
this
.
getState
(
)
;
return
getDisplayedTimingMarker
(
state
name
)
;
}
async
updateNetworkThrottling
(
enabled
profile
)
{
const
throttlingFront
=
this
.
hasResourceWatcherSupport
&
&
this
.
networkFront
?
this
.
networkFront
:
this
.
responsiveFront
;
if
(
!
enabled
)
{
throttlingFront
.
clearNetworkThrottling
(
)
;
}
else
{
if
(
typeof
profile
=
=
=
"
string
"
)
{
profile
=
throttlingProfiles
.
find
(
(
{
id
}
)
=
>
id
=
=
profile
)
;
}
const
{
download
upload
latency
}
=
profile
;
await
throttlingFront
.
setNetworkThrottling
(
{
downloadThroughput
:
download
uploadThroughput
:
upload
latency
}
)
;
}
this
.
emitForTests
(
TEST_EVENTS
.
THROTTLING_CHANGED
{
profile
}
)
;
}
emitForTests
(
type
data
)
{
if
(
this
.
owner
)
{
this
.
owner
.
emitForTests
(
type
data
)
;
}
}
}
module
.
exports
=
FirefoxConnector
;
