"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
CurlUtils
}
=
require
(
"
devtools
/
client
/
shared
/
curl
"
)
;
const
{
TimelineFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
timeline
"
)
;
const
{
ACTIVITY_TYPE
EVENTS
}
=
require
(
"
.
.
/
constants
"
)
;
const
{
getDisplayedRequestById
}
=
require
(
"
.
.
/
selectors
/
index
"
)
;
const
{
fetchHeaders
formDataURI
}
=
require
(
"
.
.
/
utils
/
request
-
utils
"
)
;
class
FirefoxConnector
{
constructor
(
)
{
this
.
payloadQueue
=
[
]
;
this
.
connect
=
this
.
connect
.
bind
(
this
)
;
this
.
disconnect
=
this
.
disconnect
.
bind
(
this
)
;
this
.
willNavigate
=
this
.
willNavigate
.
bind
(
this
)
;
this
.
displayCachedEvents
=
this
.
displayCachedEvents
.
bind
(
this
)
;
this
.
onDocLoadingMarker
=
this
.
onDocLoadingMarker
.
bind
(
this
)
;
this
.
addRequest
=
this
.
addRequest
.
bind
(
this
)
;
this
.
updateRequest
=
this
.
updateRequest
.
bind
(
this
)
;
this
.
fetchImage
=
this
.
fetchImage
.
bind
(
this
)
;
this
.
fetchRequestHeaders
=
this
.
fetchRequestHeaders
.
bind
(
this
)
;
this
.
fetchResponseHeaders
=
this
.
fetchResponseHeaders
.
bind
(
this
)
;
this
.
fetchPostData
=
this
.
fetchPostData
.
bind
(
this
)
;
this
.
fetchResponseCookies
=
this
.
fetchResponseCookies
.
bind
(
this
)
;
this
.
fetchRequestCookies
=
this
.
fetchRequestCookies
.
bind
(
this
)
;
this
.
getPayloadFromQueue
=
this
.
getPayloadFromQueue
.
bind
(
this
)
;
this
.
isQueuePayloadReady
=
this
.
isQueuePayloadReady
.
bind
(
this
)
;
this
.
pushPayloadToQueue
=
this
.
pushPayloadToQueue
.
bind
(
this
)
;
this
.
sendHTTPRequest
=
this
.
sendHTTPRequest
.
bind
(
this
)
;
this
.
setPreferences
=
this
.
setPreferences
.
bind
(
this
)
;
this
.
triggerActivity
=
this
.
triggerActivity
.
bind
(
this
)
;
this
.
inspectRequest
=
this
.
inspectRequest
.
bind
(
this
)
;
this
.
getLongString
=
this
.
getLongString
.
bind
(
this
)
;
this
.
getNetworkRequest
=
this
.
getNetworkRequest
.
bind
(
this
)
;
this
.
getTabTarget
=
this
.
getTabTarget
.
bind
(
this
)
;
this
.
viewSourceInDebugger
=
this
.
viewSourceInDebugger
.
bind
(
this
)
;
this
.
onNetworkEvent
=
this
.
onNetworkEvent
.
bind
(
this
)
;
this
.
onNetworkEventUpdate
=
this
.
onNetworkEventUpdate
.
bind
(
this
)
;
this
.
onRequestHeaders
=
this
.
onRequestHeaders
.
bind
(
this
)
;
this
.
onRequestCookies
=
this
.
onRequestCookies
.
bind
(
this
)
;
this
.
onRequestPostData
=
this
.
onRequestPostData
.
bind
(
this
)
;
this
.
onSecurityInfo
=
this
.
onSecurityInfo
.
bind
(
this
)
;
this
.
onResponseHeaders
=
this
.
onResponseHeaders
.
bind
(
this
)
;
this
.
onResponseCookies
=
this
.
onResponseCookies
.
bind
(
this
)
;
this
.
onResponseContent
=
this
.
onResponseContent
.
bind
(
this
)
;
this
.
onEventTimings
=
this
.
onEventTimings
.
bind
(
this
)
;
}
async
connect
(
connection
actions
getState
)
{
this
.
actions
=
actions
;
this
.
getState
=
getState
;
this
.
tabTarget
=
connection
.
tabConnection
.
tabTarget
;
this
.
toolbox
=
connection
.
toolbox
;
this
.
webConsoleClient
=
this
.
tabTarget
.
activeConsole
;
this
.
tabTarget
.
on
(
"
will
-
navigate
"
this
.
willNavigate
)
;
this
.
tabTarget
.
on
(
"
close
"
this
.
disconnect
)
;
this
.
webConsoleClient
.
on
(
"
networkEvent
"
this
.
onNetworkEvent
)
;
this
.
webConsoleClient
.
on
(
"
networkEventUpdate
"
this
.
onNetworkEventUpdate
)
;
if
(
this
.
tabTarget
.
getTrait
(
"
documentLoadingMarkers
"
)
)
{
this
.
timelineFront
=
new
TimelineFront
(
this
.
tabTarget
.
client
this
.
tabTarget
.
form
)
;
this
.
timelineFront
.
on
(
"
doc
-
loading
"
this
.
onDocLoadingMarker
)
;
await
this
.
timelineFront
.
start
(
{
withDocLoadingEvents
:
true
}
)
;
}
this
.
displayCachedEvents
(
)
;
}
async
disconnect
(
)
{
this
.
actions
.
batchReset
(
)
;
if
(
this
.
tabTarget
.
getTrait
(
"
documentLoadingMarkers
"
)
&
&
this
.
timelineFront
)
{
this
.
timelineFront
.
off
(
"
doc
-
loading
"
this
.
onDocLoadingMarker
)
;
await
this
.
timelineFront
.
destroy
(
)
;
}
this
.
tabTarget
.
off
(
"
will
-
navigate
"
)
;
this
.
tabTarget
.
off
(
"
close
"
)
;
this
.
tabTarget
=
null
;
this
.
webConsoleClient
.
off
(
"
networkEvent
"
)
;
this
.
webConsoleClient
.
off
(
"
networkEventUpdate
"
)
;
this
.
webConsoleClient
=
null
;
this
.
timelineFront
=
null
;
}
willNavigate
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
webconsole
.
persistlog
"
)
)
{
this
.
actions
.
batchReset
(
)
;
this
.
actions
.
clearRequests
(
)
;
}
else
{
this
.
actions
.
clearTimingMarkers
(
)
;
}
}
displayCachedEvents
(
)
{
for
(
let
networkInfo
of
this
.
webConsoleClient
.
getNetworkEvents
(
)
)
{
this
.
onNetworkEvent
(
"
networkEvent
"
networkInfo
)
;
for
(
let
updateType
of
networkInfo
.
updates
)
{
this
.
onNetworkEventUpdate
(
"
networkEventUpdate
"
{
packet
:
{
updateType
}
networkInfo
}
)
;
}
}
}
onDocLoadingMarker
(
marker
)
{
window
.
emit
(
EVENTS
.
TIMELINE_EVENT
marker
)
;
this
.
actions
.
addTimingMarker
(
marker
)
;
}
addRequest
(
id
data
)
{
let
{
method
url
isXHR
cause
startedDateTime
fromCache
fromServiceWorker
}
=
data
;
this
.
actions
.
addRequest
(
id
{
startedMillis
:
Date
.
parse
(
startedDateTime
)
method
url
isXHR
cause
fromCache
fromServiceWorker
}
true
)
.
then
(
(
)
=
>
window
.
emit
(
EVENTS
.
REQUEST_ADDED
id
)
)
;
}
async
updateRequest
(
id
data
)
{
let
{
mimeType
responseContent
responseCookies
responseHeaders
requestCookies
requestHeaders
requestPostData
}
=
data
;
let
[
imageObj
requestHeadersObj
responseHeadersObj
postDataObj
requestCookiesObj
responseCookiesObj
]
=
await
Promise
.
all
(
[
this
.
fetchImage
(
mimeType
responseContent
)
this
.
fetchRequestHeaders
(
requestHeaders
)
this
.
fetchResponseHeaders
(
responseHeaders
)
this
.
fetchPostData
(
requestPostData
)
this
.
fetchRequestCookies
(
requestCookies
)
this
.
fetchResponseCookies
(
responseCookies
)
]
)
;
let
payload
=
Object
.
assign
(
{
}
data
imageObj
requestHeadersObj
responseHeadersObj
postDataObj
requestCookiesObj
responseCookiesObj
)
;
this
.
pushPayloadToQueue
(
id
payload
)
;
if
(
this
.
isQueuePayloadReady
(
id
)
)
{
await
this
.
actions
.
updateRequest
(
id
this
.
getPayloadFromQueue
(
id
)
.
payload
true
)
;
}
}
async
fetchImage
(
mimeType
responseContent
)
{
let
payload
=
{
}
;
if
(
mimeType
&
&
responseContent
&
&
responseContent
.
content
)
{
let
{
encoding
text
}
=
responseContent
.
content
;
let
response
=
await
this
.
getLongString
(
text
)
;
if
(
mimeType
.
includes
(
"
image
/
"
)
)
{
payload
.
responseContentDataUri
=
formDataURI
(
mimeType
encoding
response
)
;
}
responseContent
.
content
.
text
=
response
;
payload
.
responseContent
=
responseContent
;
}
return
payload
;
}
async
fetchRequestHeaders
(
requestHeaders
)
{
let
payload
=
{
}
;
if
(
requestHeaders
&
&
requestHeaders
.
headers
&
&
requestHeaders
.
headers
.
length
)
{
let
headers
=
await
fetchHeaders
(
requestHeaders
this
.
getLongString
)
;
if
(
headers
)
{
payload
.
requestHeaders
=
headers
;
}
}
return
payload
;
}
async
fetchResponseHeaders
(
responseHeaders
)
{
let
payload
=
{
}
;
if
(
responseHeaders
&
&
responseHeaders
.
headers
&
&
responseHeaders
.
headers
.
length
)
{
let
headers
=
await
fetchHeaders
(
responseHeaders
this
.
getLongString
)
;
if
(
headers
)
{
payload
.
responseHeaders
=
headers
;
}
}
return
payload
;
}
async
fetchPostData
(
requestPostData
)
{
let
payload
=
{
}
;
if
(
requestPostData
&
&
requestPostData
.
postData
)
{
let
{
text
}
=
requestPostData
.
postData
;
let
postData
=
await
this
.
getLongString
(
text
)
;
const
headers
=
CurlUtils
.
getHeadersFromMultipartText
(
postData
)
;
const
headersSize
=
headers
.
reduce
(
(
acc
{
name
value
}
)
=
>
{
return
acc
+
name
.
length
+
value
.
length
+
2
;
}
0
)
;
requestPostData
.
postData
.
text
=
postData
;
payload
.
requestPostData
=
Object
.
assign
(
{
}
requestPostData
)
;
payload
.
requestHeadersFromUploadStream
=
{
headers
headersSize
}
;
}
return
payload
;
}
async
fetchResponseCookies
(
responseCookies
)
{
let
payload
=
{
}
;
if
(
responseCookies
)
{
let
resCookies
=
[
]
;
let
cookies
=
responseCookies
.
cookies
?
responseCookies
.
cookies
:
responseCookies
;
if
(
typeof
cookies
[
Symbol
.
iterator
]
=
=
=
"
function
"
)
{
for
(
let
cookie
of
cookies
)
{
resCookies
.
push
(
Object
.
assign
(
{
}
cookie
{
value
:
await
this
.
getLongString
(
cookie
.
value
)
}
)
)
;
}
if
(
resCookies
.
length
)
{
payload
.
responseCookies
=
resCookies
;
}
}
}
return
payload
;
}
async
fetchRequestCookies
(
requestCookies
)
{
let
payload
=
{
}
;
if
(
requestCookies
)
{
let
reqCookies
=
[
]
;
let
cookies
=
requestCookies
.
cookies
?
requestCookies
.
cookies
:
requestCookies
;
if
(
typeof
cookies
[
Symbol
.
iterator
]
=
=
=
"
function
"
)
{
for
(
let
cookie
of
cookies
)
{
reqCookies
.
push
(
Object
.
assign
(
{
}
cookie
{
value
:
await
this
.
getLongString
(
cookie
.
value
)
}
)
)
;
}
if
(
reqCookies
.
length
)
{
payload
.
requestCookies
=
reqCookies
;
}
}
}
return
payload
;
}
getPayloadFromQueue
(
id
)
{
return
this
.
payloadQueue
.
find
(
(
item
)
=
>
item
.
id
=
=
=
id
)
;
}
isQueuePayloadReady
(
id
)
{
let
queuedPayload
=
this
.
getPayloadFromQueue
(
id
)
;
return
queuedPayload
&
&
queuedPayload
.
payload
.
eventTimings
;
}
pushPayloadToQueue
(
id
payload
)
{
let
queuedPayload
=
this
.
getPayloadFromQueue
(
id
)
;
if
(
!
queuedPayload
)
{
this
.
payloadQueue
.
push
(
{
id
payload
}
)
;
}
else
{
queuedPayload
.
payload
=
Object
.
assign
(
{
}
queuedPayload
.
payload
payload
)
;
}
}
sendHTTPRequest
(
data
callback
)
{
this
.
webConsoleClient
.
sendHTTPRequest
(
data
callback
)
;
}
setPreferences
(
request
callback
)
{
this
.
webConsoleClient
.
setPreferences
(
request
callback
)
;
}
triggerActivity
(
type
)
{
let
standBy
=
(
)
=
>
{
this
.
currentActivity
=
ACTIVITY_TYPE
.
NONE
;
}
;
let
waitForNavigation
=
(
)
=
>
{
return
new
Promise
(
(
resolve
)
=
>
{
this
.
tabTarget
.
once
(
"
will
-
navigate
"
(
)
=
>
{
this
.
tabTarget
.
once
(
"
navigate
"
(
)
=
>
{
resolve
(
)
;
}
)
;
}
)
;
}
)
;
}
;
let
reconfigureTab
=
(
options
)
=
>
{
return
new
Promise
(
(
resolve
)
=
>
{
this
.
tabTarget
.
activeTab
.
reconfigure
(
options
resolve
)
;
}
)
;
}
;
let
reconfigureTabAndWaitForNavigation
=
(
options
)
=
>
{
options
.
performReload
=
true
;
let
navigationFinished
=
waitForNavigation
(
)
;
return
reconfigureTab
(
options
)
.
then
(
(
)
=
>
navigationFinished
)
;
}
;
switch
(
type
)
{
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_DEFAULT
:
return
reconfigureTabAndWaitForNavigation
(
{
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_ENABLED
:
this
.
currentActivity
=
ACTIVITY_TYPE
.
ENABLE_CACHE
;
this
.
tabTarget
.
once
(
"
will
-
navigate
"
(
)
=
>
{
this
.
currentActivity
=
type
;
}
)
;
return
reconfigureTabAndWaitForNavigation
(
{
cacheDisabled
:
false
performReload
:
true
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_DISABLED
:
this
.
currentActivity
=
ACTIVITY_TYPE
.
DISABLE_CACHE
;
this
.
tabTarget
.
once
(
"
will
-
navigate
"
(
)
=
>
{
this
.
currentActivity
=
type
;
}
)
;
return
reconfigureTabAndWaitForNavigation
(
{
cacheDisabled
:
true
performReload
:
true
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
ENABLE_CACHE
:
this
.
currentActivity
=
type
;
return
reconfigureTab
(
{
cacheDisabled
:
false
performReload
:
false
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
DISABLE_CACHE
:
this
.
currentActivity
=
type
;
return
reconfigureTab
(
{
cacheDisabled
:
true
performReload
:
false
}
)
.
then
(
standBy
)
;
}
this
.
currentActivity
=
ACTIVITY_TYPE
.
NONE
;
return
Promise
.
reject
(
new
Error
(
"
Invalid
activity
type
"
)
)
;
}
inspectRequest
(
requestId
)
{
return
new
Promise
(
(
resolve
)
=
>
{
let
request
=
null
;
let
inspector
=
(
)
=
>
{
request
=
getDisplayedRequestById
(
this
.
getState
(
)
requestId
)
;
if
(
!
request
)
{
this
.
actions
.
toggleRequestFilterType
(
"
all
"
)
;
request
=
getDisplayedRequestById
(
this
.
getState
(
)
requestId
)
;
}
if
(
request
)
{
window
.
off
(
EVENTS
.
REQUEST_ADDED
inspector
)
;
this
.
actions
.
selectRequest
(
request
.
id
)
;
resolve
(
)
;
}
}
;
inspector
(
)
;
if
(
!
request
)
{
window
.
on
(
EVENTS
.
REQUEST_ADDED
inspector
)
;
}
}
)
;
}
getNetworkRequest
(
id
)
{
return
this
.
webConsoleClient
.
getNetworkRequest
(
id
)
;
}
getLongString
(
stringGrip
)
{
return
this
.
webConsoleClient
.
getString
(
stringGrip
)
;
}
getTabTarget
(
)
{
return
this
.
tabTarget
;
}
viewSourceInDebugger
(
sourceURL
sourceLine
)
{
if
(
this
.
toolbox
)
{
this
.
toolbox
.
viewSourceInDebugger
(
sourceURL
sourceLine
)
;
}
}
onNetworkEvent
(
type
networkInfo
)
{
let
{
actor
cause
fromCache
fromServiceWorker
isXHR
request
:
{
method
url
}
startedDateTime
}
=
networkInfo
;
this
.
addRequest
(
actor
{
cause
fromCache
fromServiceWorker
isXHR
method
startedDateTime
url
}
)
;
window
.
emit
(
EVENTS
.
NETWORK_EVENT
actor
)
;
}
onNetworkEventUpdate
(
type
{
packet
networkInfo
}
)
{
let
{
actor
}
=
networkInfo
;
switch
(
packet
.
updateType
)
{
case
"
requestHeaders
"
:
this
.
webConsoleClient
.
getRequestHeaders
(
actor
this
.
onRequestHeaders
)
;
window
.
emit
(
EVENTS
.
UPDATING_REQUEST_HEADERS
actor
)
;
break
;
case
"
requestCookies
"
:
this
.
webConsoleClient
.
getRequestCookies
(
actor
this
.
onRequestCookies
)
;
window
.
emit
(
EVENTS
.
UPDATING_REQUEST_COOKIES
actor
)
;
break
;
case
"
requestPostData
"
:
this
.
webConsoleClient
.
getRequestPostData
(
actor
this
.
onRequestPostData
)
;
window
.
emit
(
EVENTS
.
UPDATING_REQUEST_POST_DATA
actor
)
;
break
;
case
"
securityInfo
"
:
this
.
updateRequest
(
actor
{
securityState
:
networkInfo
.
securityInfo
}
)
.
then
(
(
)
=
>
{
this
.
webConsoleClient
.
getSecurityInfo
(
actor
this
.
onSecurityInfo
)
;
window
.
emit
(
EVENTS
.
UPDATING_SECURITY_INFO
actor
)
;
}
)
;
break
;
case
"
responseHeaders
"
:
this
.
webConsoleClient
.
getResponseHeaders
(
actor
this
.
onResponseHeaders
)
;
window
.
emit
(
EVENTS
.
UPDATING_RESPONSE_HEADERS
actor
)
;
break
;
case
"
responseCookies
"
:
this
.
webConsoleClient
.
getResponseCookies
(
actor
this
.
onResponseCookies
)
;
window
.
emit
(
EVENTS
.
UPDATING_RESPONSE_COOKIES
actor
)
;
break
;
case
"
responseStart
"
:
this
.
updateRequest
(
actor
{
httpVersion
:
networkInfo
.
response
.
httpVersion
remoteAddress
:
networkInfo
.
response
.
remoteAddress
remotePort
:
networkInfo
.
response
.
remotePort
status
:
networkInfo
.
response
.
status
statusText
:
networkInfo
.
response
.
statusText
headersSize
:
networkInfo
.
response
.
headersSize
}
)
.
then
(
(
)
=
>
{
window
.
emit
(
EVENTS
.
STARTED_RECEIVING_RESPONSE
actor
)
;
}
)
;
break
;
case
"
responseContent
"
:
this
.
webConsoleClient
.
getResponseContent
(
actor
this
.
onResponseContent
.
bind
(
this
{
contentSize
:
networkInfo
.
response
.
bodySize
transferredSize
:
networkInfo
.
response
.
transferredSize
mimeType
:
networkInfo
.
response
.
content
.
mimeType
}
)
)
;
window
.
emit
(
EVENTS
.
UPDATING_RESPONSE_CONTENT
actor
)
;
break
;
case
"
eventTimings
"
:
this
.
updateRequest
(
actor
{
totalTime
:
networkInfo
.
totalTime
}
)
.
then
(
(
)
=
>
{
this
.
webConsoleClient
.
getEventTimings
(
actor
this
.
onEventTimings
)
;
window
.
emit
(
EVENTS
.
UPDATING_EVENT_TIMINGS
actor
)
;
}
)
;
break
;
}
}
onRequestHeaders
(
response
)
{
this
.
updateRequest
(
response
.
from
{
requestHeaders
:
response
}
)
.
then
(
(
)
=
>
{
window
.
emit
(
EVENTS
.
RECEIVED_REQUEST_HEADERS
response
.
from
)
;
}
)
;
}
onRequestCookies
(
response
)
{
this
.
updateRequest
(
response
.
from
{
requestCookies
:
response
}
)
.
then
(
(
)
=
>
{
window
.
emit
(
EVENTS
.
RECEIVED_REQUEST_COOKIES
response
.
from
)
;
}
)
;
}
onRequestPostData
(
response
)
{
this
.
updateRequest
(
response
.
from
{
requestPostData
:
response
}
)
.
then
(
(
)
=
>
{
window
.
emit
(
EVENTS
.
RECEIVED_REQUEST_POST_DATA
response
.
from
)
;
}
)
;
}
onSecurityInfo
(
response
)
{
this
.
updateRequest
(
response
.
from
{
securityInfo
:
response
.
securityInfo
}
)
.
then
(
(
)
=
>
{
window
.
emit
(
EVENTS
.
RECEIVED_SECURITY_INFO
response
.
from
)
;
}
)
;
}
onResponseHeaders
(
response
)
{
this
.
updateRequest
(
response
.
from
{
responseHeaders
:
response
}
)
.
then
(
(
)
=
>
{
window
.
emit
(
EVENTS
.
RECEIVED_RESPONSE_HEADERS
response
.
from
)
;
}
)
;
}
onResponseCookies
(
response
)
{
this
.
updateRequest
(
response
.
from
{
responseCookies
:
response
}
)
.
then
(
(
)
=
>
{
window
.
emit
(
EVENTS
.
RECEIVED_RESPONSE_COOKIES
response
.
from
)
;
}
)
;
}
onResponseContent
(
data
response
)
{
let
payload
=
Object
.
assign
(
{
responseContent
:
response
}
data
)
;
this
.
updateRequest
(
response
.
from
payload
)
.
then
(
(
)
=
>
{
window
.
emit
(
EVENTS
.
RECEIVED_RESPONSE_CONTENT
response
.
from
)
;
}
)
;
}
onEventTimings
(
response
)
{
this
.
updateRequest
(
response
.
from
{
eventTimings
:
response
}
)
.
then
(
(
)
=
>
{
window
.
emit
(
EVENTS
.
RECEIVED_EVENT_TIMINGS
response
.
from
)
;
}
)
;
}
}
module
.
exports
=
new
FirefoxConnector
(
)
;
