"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
ACTIVITY_TYPE
EVENTS
}
=
require
(
"
.
.
/
constants
"
)
;
const
FirefoxDataProvider
=
require
(
"
.
/
firefox
-
data
-
provider
"
)
;
const
{
getDisplayedTimingMarker
}
=
require
(
"
.
.
/
selectors
/
index
"
)
;
loader
.
lazyRequireGetter
(
this
"
throttlingProfiles
"
"
devtools
/
client
/
shared
/
components
/
throttling
/
profiles
"
)
;
class
FirefoxConnector
{
constructor
(
)
{
this
.
connect
=
this
.
connect
.
bind
(
this
)
;
this
.
disconnect
=
this
.
disconnect
.
bind
(
this
)
;
this
.
willNavigate
=
this
.
willNavigate
.
bind
(
this
)
;
this
.
navigate
=
this
.
navigate
.
bind
(
this
)
;
this
.
displayCachedEvents
=
this
.
displayCachedEvents
.
bind
(
this
)
;
this
.
onDocEvent
=
this
.
onDocEvent
.
bind
(
this
)
;
this
.
sendHTTPRequest
=
this
.
sendHTTPRequest
.
bind
(
this
)
;
this
.
setPreferences
=
this
.
setPreferences
.
bind
(
this
)
;
this
.
triggerActivity
=
this
.
triggerActivity
.
bind
(
this
)
;
this
.
getTabTarget
=
this
.
getTabTarget
.
bind
(
this
)
;
this
.
viewSourceInDebugger
=
this
.
viewSourceInDebugger
.
bind
(
this
)
;
this
.
requestData
=
this
.
requestData
.
bind
(
this
)
;
this
.
getTimingMarker
=
this
.
getTimingMarker
.
bind
(
this
)
;
this
.
updateNetworkThrottling
=
this
.
updateNetworkThrottling
.
bind
(
this
)
;
this
.
getLongString
=
this
.
getLongString
.
bind
(
this
)
;
this
.
getNetworkRequest
=
this
.
getNetworkRequest
.
bind
(
this
)
;
}
async
connect
(
connection
actions
getState
)
{
this
.
actions
=
actions
;
this
.
getState
=
getState
;
this
.
tabTarget
=
connection
.
tabConnection
.
tabTarget
;
this
.
toolbox
=
connection
.
toolbox
;
this
.
owner
=
connection
.
owner
;
this
.
webConsoleClient
=
this
.
tabTarget
.
activeConsole
;
this
.
dataProvider
=
new
FirefoxDataProvider
(
{
webConsoleClient
:
this
.
webConsoleClient
actions
:
this
.
actions
owner
:
this
.
owner
}
)
;
await
this
.
addListeners
(
)
;
if
(
this
.
tabTarget
)
{
this
.
tabTarget
.
on
(
"
will
-
navigate
"
this
.
willNavigate
)
;
this
.
tabTarget
.
on
(
"
navigate
"
this
.
navigate
)
;
this
.
emulationFront
=
await
this
.
tabTarget
.
getFront
(
"
emulation
"
)
;
}
if
(
this
.
actions
)
{
this
.
displayCachedEvents
(
)
;
}
}
disconnect
(
)
{
if
(
this
.
actions
)
{
this
.
actions
.
batchReset
(
)
;
}
this
.
removeListeners
(
)
;
if
(
this
.
emulationFront
)
{
this
.
emulationFront
.
destroy
(
)
;
this
.
emulationFront
=
null
;
}
if
(
this
.
webSocketFront
)
{
this
.
webSocketFront
.
destroy
(
)
;
this
.
webSocketFront
=
null
;
}
if
(
this
.
tabTarget
)
{
this
.
tabTarget
.
off
(
"
will
-
navigate
"
this
.
willNavigate
)
;
this
.
tabTarget
.
off
(
"
navigate
"
this
.
navigate
)
;
this
.
tabTarget
=
null
;
}
this
.
webConsoleClient
=
null
;
this
.
dataProvider
=
null
;
}
async
pause
(
)
{
await
this
.
removeListeners
(
)
;
}
async
resume
(
)
{
await
this
.
addListeners
(
)
;
}
async
addListeners
(
)
{
this
.
tabTarget
.
on
(
"
close
"
this
.
disconnect
)
;
this
.
webConsoleClient
.
on
(
"
networkEvent
"
this
.
dataProvider
.
onNetworkEvent
)
;
this
.
webConsoleClient
.
on
(
"
networkEventUpdate
"
this
.
dataProvider
.
onNetworkEventUpdate
)
;
this
.
webConsoleClient
.
on
(
"
documentEvent
"
this
.
onDocEvent
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
features
.
webSockets
"
)
)
{
try
{
this
.
webSocketFront
=
await
this
.
tabTarget
.
getFront
(
"
webSocket
"
)
;
this
.
webSocketFront
.
startListening
(
)
;
this
.
webSocketFront
.
on
(
"
webSocketOpened
"
this
.
dataProvider
.
onWebSocketOpened
)
;
this
.
webSocketFront
.
on
(
"
webSocketClosed
"
this
.
dataProvider
.
onWebSocketClosed
)
;
this
.
webSocketFront
.
on
(
"
frameReceived
"
this
.
dataProvider
.
onFrameReceived
)
;
this
.
webSocketFront
.
on
(
"
frameSent
"
this
.
dataProvider
.
onFrameSent
)
;
}
catch
(
e
)
{
}
}
await
this
.
webConsoleClient
.
startListeners
(
[
"
DocumentEvents
"
]
)
;
}
removeListeners
(
)
{
if
(
this
.
tabTarget
)
{
this
.
tabTarget
.
off
(
"
close
"
this
.
disconnect
)
;
if
(
this
.
webSocketFront
)
{
this
.
webSocketFront
.
off
(
"
webSocketOpened
"
this
.
dataProvider
.
onWebSocketOpened
)
;
this
.
webSocketFront
.
off
(
"
webSocketClosed
"
this
.
dataProvider
.
onWebSocketClosed
)
;
this
.
webSocketFront
.
off
(
"
frameReceived
"
this
.
dataProvider
.
onFrameReceived
)
;
this
.
webSocketFront
.
off
(
"
frameSent
"
this
.
dataProvider
.
onFrameSent
)
;
}
}
if
(
this
.
webConsoleClient
)
{
this
.
webConsoleClient
.
off
(
"
networkEvent
"
this
.
dataProvider
.
onNetworkEvent
)
;
this
.
webConsoleClient
.
off
(
"
networkEventUpdate
"
this
.
dataProvider
.
onNetworkEventUpdate
)
;
this
.
webConsoleClient
.
off
(
"
docEvent
"
this
.
onDocEvent
)
;
}
}
enableActions
(
enable
)
{
this
.
dataProvider
.
enableActions
(
enable
)
;
}
willNavigate
(
)
{
if
(
this
.
actions
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
persistlog
"
)
)
{
this
.
actions
.
batchReset
(
)
;
this
.
actions
.
clearRequests
(
)
;
}
else
{
this
.
actions
.
clearTimingMarkers
(
)
;
}
}
if
(
this
.
actions
&
&
this
.
getState
)
{
const
state
=
this
.
getState
(
)
;
if
(
!
state
.
requests
.
recording
)
{
this
.
actions
.
toggleRecording
(
)
;
}
}
}
navigate
(
)
{
if
(
this
.
dataProvider
.
isPayloadQueueEmpty
(
)
)
{
this
.
onReloaded
(
)
;
return
;
}
const
listener
=
(
)
=
>
{
if
(
this
.
dataProvider
&
&
!
this
.
dataProvider
.
isPayloadQueueEmpty
(
)
)
{
return
;
}
if
(
this
.
owner
)
{
this
.
owner
.
off
(
EVENTS
.
PAYLOAD_READY
listener
)
;
}
if
(
this
.
dataProvider
)
{
this
.
onReloaded
(
)
;
}
}
;
if
(
this
.
owner
)
{
this
.
owner
.
on
(
EVENTS
.
PAYLOAD_READY
listener
)
;
}
}
onReloaded
(
)
{
const
panel
=
this
.
toolbox
.
getPanel
(
"
netmonitor
"
)
;
if
(
panel
)
{
panel
.
emit
(
"
reloaded
"
)
;
}
}
displayCachedEvents
(
)
{
for
(
const
networkInfo
of
this
.
webConsoleClient
.
getNetworkEvents
(
)
)
{
this
.
dataProvider
.
onNetworkEvent
(
networkInfo
)
;
for
(
const
updateType
of
networkInfo
.
updates
)
{
this
.
dataProvider
.
onNetworkEventUpdate
(
{
packet
:
{
updateType
}
networkInfo
}
)
;
}
}
}
onDocEvent
(
event
)
{
if
(
this
.
actions
)
{
this
.
actions
.
addTimingMarker
(
event
)
;
}
this
.
emitForTests
(
EVENTS
.
TIMELINE_EVENT
event
)
;
}
sendHTTPRequest
(
data
callback
)
{
this
.
webConsoleClient
.
sendHTTPRequest
(
data
)
.
then
(
callback
)
;
}
blockRequest
(
filter
)
{
return
this
.
webConsoleClient
.
blockRequest
(
filter
)
;
}
unblockRequest
(
filter
)
{
return
this
.
webConsoleClient
.
unblockRequest
(
filter
)
;
}
setPreferences
(
request
)
{
return
this
.
webConsoleClient
.
setPreferences
(
request
)
;
}
triggerActivity
(
type
)
{
const
standBy
=
(
)
=
>
{
this
.
currentActivity
=
ACTIVITY_TYPE
.
NONE
;
}
;
const
waitForNavigation
=
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
this
.
tabTarget
.
once
(
"
will
-
navigate
"
(
)
=
>
{
this
.
tabTarget
.
once
(
"
navigate
"
(
)
=
>
{
resolve
(
)
;
}
)
;
}
)
;
}
)
;
}
;
const
reconfigureTab
=
options
=
>
{
return
this
.
tabTarget
.
reconfigure
(
{
options
}
)
;
}
;
const
reconfigureTabAndWaitForNavigation
=
options
=
>
{
options
.
performReload
=
true
;
const
navigationFinished
=
waitForNavigation
(
)
;
return
reconfigureTab
(
options
)
.
then
(
(
)
=
>
navigationFinished
)
;
}
;
switch
(
type
)
{
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_DEFAULT
:
return
reconfigureTabAndWaitForNavigation
(
{
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_ENABLED
:
this
.
currentActivity
=
ACTIVITY_TYPE
.
ENABLE_CACHE
;
this
.
tabTarget
.
once
(
"
will
-
navigate
"
(
)
=
>
{
this
.
currentActivity
=
type
;
}
)
;
return
reconfigureTabAndWaitForNavigation
(
{
cacheDisabled
:
false
performReload
:
true
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_DISABLED
:
this
.
currentActivity
=
ACTIVITY_TYPE
.
DISABLE_CACHE
;
this
.
tabTarget
.
once
(
"
will
-
navigate
"
(
)
=
>
{
this
.
currentActivity
=
type
;
}
)
;
return
reconfigureTabAndWaitForNavigation
(
{
cacheDisabled
:
true
performReload
:
true
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
ENABLE_CACHE
:
this
.
currentActivity
=
type
;
return
reconfigureTab
(
{
cacheDisabled
:
false
performReload
:
false
}
)
.
then
(
standBy
)
;
case
ACTIVITY_TYPE
.
DISABLE_CACHE
:
this
.
currentActivity
=
type
;
return
reconfigureTab
(
{
cacheDisabled
:
true
performReload
:
false
}
)
.
then
(
standBy
)
;
}
this
.
currentActivity
=
ACTIVITY_TYPE
.
NONE
;
return
Promise
.
reject
(
new
Error
(
"
Invalid
activity
type
"
)
)
;
}
getNetworkRequest
(
id
)
{
return
this
.
dataProvider
.
getNetworkRequest
(
id
)
;
}
getLongString
(
stringGrip
)
{
return
this
.
dataProvider
.
getLongString
(
stringGrip
)
;
}
getTabTarget
(
)
{
return
this
.
tabTarget
;
}
viewSourceInDebugger
(
sourceURL
sourceLine
sourceColumn
)
{
if
(
this
.
toolbox
)
{
this
.
toolbox
.
viewSourceInDebugger
(
sourceURL
sourceLine
sourceColumn
)
;
}
}
requestData
(
request
type
)
{
return
this
.
dataProvider
.
requestData
(
request
type
)
;
}
getTimingMarker
(
name
)
{
if
(
!
this
.
getState
)
{
return
-
1
;
}
const
state
=
this
.
getState
(
)
;
return
getDisplayedTimingMarker
(
state
name
)
;
}
async
updateNetworkThrottling
(
enabled
profile
)
{
if
(
!
enabled
)
{
await
this
.
emulationFront
.
clearNetworkThrottling
(
)
;
}
else
{
const
data
=
throttlingProfiles
.
find
(
(
{
id
}
)
=
>
id
=
=
profile
)
;
const
{
download
upload
latency
}
=
data
;
await
this
.
emulationFront
.
setNetworkThrottling
(
{
downloadThroughput
:
download
uploadThroughput
:
upload
latency
}
)
;
}
this
.
emitForTests
(
EVENTS
.
THROTTLING_CHANGED
{
profile
}
)
;
}
emitForTests
(
type
data
)
{
if
(
this
.
owner
)
{
this
.
owner
.
emitForTests
(
type
data
)
;
}
}
}
module
.
exports
=
FirefoxConnector
;
