"
use
strict
"
;
const
{
EVENTS
}
=
require
(
"
.
.
/
constants
"
)
;
const
{
CurlUtils
}
=
require
(
"
devtools
/
client
/
shared
/
curl
"
)
;
const
{
fetchHeaders
}
=
require
(
"
.
.
/
utils
/
request
-
utils
"
)
;
class
FirefoxDataProvider
{
constructor
(
{
webConsoleClient
actions
owner
}
)
{
this
.
webConsoleClient
=
webConsoleClient
;
this
.
actions
=
actions
|
|
{
}
;
this
.
actionsEnabled
=
true
;
this
.
owner
=
owner
;
this
.
payloadQueue
=
new
Map
(
)
;
this
.
lazyRequestData
=
new
Map
(
)
;
this
.
getLongString
=
this
.
getLongString
.
bind
(
this
)
;
this
.
onNetworkEvent
=
this
.
onNetworkEvent
.
bind
(
this
)
;
this
.
onNetworkEventUpdate
=
this
.
onNetworkEventUpdate
.
bind
(
this
)
;
this
.
onWebSocketOpened
=
this
.
onWebSocketOpened
.
bind
(
this
)
;
this
.
onWebSocketClosed
=
this
.
onWebSocketClosed
.
bind
(
this
)
;
this
.
onFrameSent
=
this
.
onFrameSent
.
bind
(
this
)
;
this
.
onFrameReceived
=
this
.
onFrameReceived
.
bind
(
this
)
;
}
enableActions
(
enable
)
{
this
.
actionsEnabled
=
enable
;
}
async
addRequest
(
id
data
)
{
const
{
method
url
isXHR
cause
startedDateTime
fromCache
fromServiceWorker
isThirdPartyTrackingResource
referrerPolicy
blockedReason
channelId
}
=
data
;
this
.
pushRequestToQueue
(
id
{
blockedReason
}
)
;
if
(
this
.
actionsEnabled
&
&
this
.
actions
.
addRequest
)
{
await
this
.
actions
.
addRequest
(
id
{
startedMs
:
Date
.
parse
(
startedDateTime
)
method
url
isXHR
cause
stacktrace
:
cause
.
stacktrace
fromCache
fromServiceWorker
isThirdPartyTrackingResource
referrerPolicy
blockedReason
channelId
}
true
)
;
}
this
.
emitForTests
(
EVENTS
.
REQUEST_ADDED
id
)
;
}
async
updateRequest
(
id
data
)
{
const
{
responseContent
responseCookies
responseHeaders
requestCookies
requestHeaders
requestPostData
responseCache
}
=
data
;
const
[
responseContentObj
requestHeadersObj
responseHeadersObj
postDataObj
requestCookiesObj
responseCookiesObj
responseCacheObj
]
=
await
Promise
.
all
(
[
this
.
fetchResponseContent
(
responseContent
)
this
.
fetchRequestHeaders
(
requestHeaders
)
this
.
fetchResponseHeaders
(
responseHeaders
)
this
.
fetchPostData
(
requestPostData
)
this
.
fetchRequestCookies
(
requestCookies
)
this
.
fetchResponseCookies
(
responseCookies
)
this
.
fetchResponseCache
(
responseCache
)
]
)
;
const
payload
=
Object
.
assign
(
{
}
data
responseContentObj
requestHeadersObj
responseHeadersObj
postDataObj
requestCookiesObj
responseCookiesObj
responseCacheObj
)
;
if
(
this
.
actionsEnabled
&
&
this
.
actions
.
updateRequest
)
{
await
this
.
actions
.
updateRequest
(
id
payload
true
)
;
}
return
payload
;
}
async
fetchResponseContent
(
responseContent
)
{
const
payload
=
{
}
;
if
(
responseContent
&
&
responseContent
.
content
)
{
const
{
text
}
=
responseContent
.
content
;
const
response
=
await
this
.
getLongString
(
text
)
;
responseContent
.
content
.
text
=
response
;
payload
.
responseContent
=
responseContent
;
}
return
payload
;
}
async
fetchRequestHeaders
(
requestHeaders
)
{
const
payload
=
{
}
;
if
(
requestHeaders
&
&
requestHeaders
.
headers
&
&
requestHeaders
.
headers
.
length
)
{
const
headers
=
await
fetchHeaders
(
requestHeaders
this
.
getLongString
)
;
if
(
headers
)
{
payload
.
requestHeaders
=
headers
;
}
}
return
payload
;
}
async
fetchResponseHeaders
(
responseHeaders
)
{
const
payload
=
{
}
;
if
(
responseHeaders
&
&
responseHeaders
.
headers
&
&
responseHeaders
.
headers
.
length
)
{
const
headers
=
await
fetchHeaders
(
responseHeaders
this
.
getLongString
)
;
if
(
headers
)
{
payload
.
responseHeaders
=
headers
;
}
}
return
payload
;
}
async
fetchPostData
(
requestPostData
)
{
const
payload
=
{
}
;
if
(
requestPostData
&
&
requestPostData
.
postData
)
{
const
{
text
}
=
requestPostData
.
postData
;
const
postData
=
await
this
.
getLongString
(
text
)
;
const
headers
=
CurlUtils
.
getHeadersFromMultipartText
(
postData
)
;
const
headersSize
=
headers
.
reduce
(
(
acc
{
name
value
}
)
=
>
{
return
acc
+
name
.
length
+
value
.
length
+
2
;
}
0
)
;
requestPostData
.
postData
.
text
=
postData
;
payload
.
requestPostData
=
{
.
.
.
requestPostData
uploadHeaders
:
{
headers
headersSize
}
}
;
}
return
payload
;
}
async
fetchRequestCookies
(
requestCookies
)
{
const
payload
=
{
}
;
if
(
requestCookies
)
{
const
reqCookies
=
[
]
;
const
cookies
=
requestCookies
.
cookies
?
requestCookies
.
cookies
:
requestCookies
;
if
(
typeof
cookies
[
Symbol
.
iterator
]
=
=
=
"
function
"
)
{
for
(
const
cookie
of
cookies
)
{
reqCookies
.
push
(
Object
.
assign
(
{
}
cookie
{
value
:
await
this
.
getLongString
(
cookie
.
value
)
}
)
)
;
}
if
(
reqCookies
.
length
)
{
payload
.
requestCookies
=
reqCookies
;
}
}
}
return
payload
;
}
async
fetchResponseCookies
(
responseCookies
)
{
const
payload
=
{
}
;
if
(
responseCookies
)
{
const
resCookies
=
[
]
;
const
cookies
=
responseCookies
.
cookies
?
responseCookies
.
cookies
:
responseCookies
;
if
(
typeof
cookies
[
Symbol
.
iterator
]
=
=
=
"
function
"
)
{
for
(
const
cookie
of
cookies
)
{
resCookies
.
push
(
Object
.
assign
(
{
}
cookie
{
value
:
await
this
.
getLongString
(
cookie
.
value
)
}
)
)
;
}
if
(
resCookies
.
length
)
{
payload
.
responseCookies
=
resCookies
;
}
}
}
return
payload
;
}
async
fetchResponseCache
(
responseCache
)
{
const
payload
=
{
}
;
if
(
responseCache
)
{
payload
.
responseCache
=
await
responseCache
;
payload
.
responseCacheAvailable
=
false
;
}
return
payload
;
}
isPayloadQueueEmpty
(
)
{
return
this
.
payloadQueue
.
size
=
=
=
0
;
}
pushRequestToQueue
(
id
payload
)
{
let
payloadFromQueue
=
this
.
payloadQueue
.
get
(
id
)
;
if
(
!
payloadFromQueue
)
{
payloadFromQueue
=
{
}
;
this
.
payloadQueue
.
set
(
id
payloadFromQueue
)
;
}
Object
.
assign
(
payloadFromQueue
payload
)
;
}
getNetworkRequest
(
id
)
{
return
this
.
webConsoleClient
.
getNetworkRequest
(
id
)
;
}
getLongString
(
stringGrip
)
{
return
this
.
webConsoleClient
.
getString
(
stringGrip
)
.
then
(
payload
=
>
{
this
.
emitForTests
(
EVENTS
.
LONGSTRING_RESOLVED
{
payload
}
)
;
return
payload
;
}
)
;
}
async
onNetworkEvent
(
networkInfo
)
{
const
{
actor
cause
fromCache
fromServiceWorker
isXHR
request
:
{
method
url
}
startedDateTime
isThirdPartyTrackingResource
referrerPolicy
blockedReason
channelId
}
=
networkInfo
;
await
this
.
addRequest
(
actor
{
cause
fromCache
fromServiceWorker
isXHR
method
startedDateTime
url
isThirdPartyTrackingResource
referrerPolicy
blockedReason
channelId
}
)
;
this
.
emitForTests
(
EVENTS
.
NETWORK_EVENT
actor
)
;
}
onNetworkEventUpdate
(
data
)
{
const
{
packet
networkInfo
}
=
data
;
const
{
actor
}
=
networkInfo
;
const
{
updateType
}
=
packet
;
switch
(
updateType
)
{
case
"
securityInfo
"
:
this
.
pushRequestToQueue
(
actor
{
securityState
:
networkInfo
.
securityState
isRacing
:
packet
.
isRacing
}
)
;
break
;
case
"
responseStart
"
:
this
.
pushRequestToQueue
(
actor
{
httpVersion
:
networkInfo
.
response
.
httpVersion
remoteAddress
:
networkInfo
.
response
.
remoteAddress
remotePort
:
networkInfo
.
response
.
remotePort
status
:
networkInfo
.
response
.
status
statusText
:
networkInfo
.
response
.
statusText
headersSize
:
networkInfo
.
response
.
headersSize
}
)
;
this
.
emitForTests
(
EVENTS
.
STARTED_RECEIVING_RESPONSE
actor
)
;
break
;
case
"
responseContent
"
:
this
.
pushRequestToQueue
(
actor
{
contentSize
:
networkInfo
.
response
.
bodySize
transferredSize
:
networkInfo
.
response
.
transferredSize
mimeType
:
networkInfo
.
response
.
content
.
mimeType
}
)
;
break
;
case
"
eventTimings
"
:
if
(
typeof
networkInfo
.
totalTime
!
=
=
"
undefined
"
)
{
this
.
pushRequestToQueue
(
actor
{
totalTime
:
networkInfo
.
totalTime
}
)
;
}
break
;
}
this
.
pushRequestToQueue
(
actor
{
[
{
updateType
}
Available
]
:
true
}
)
;
this
.
onPayloadDataReceived
(
actor
)
;
this
.
emitForTests
(
EVENTS
.
NETWORK_EVENT_UPDATED
actor
)
;
}
async
onWebSocketOpened
(
httpChannelId
effectiveURI
protocols
extensions
)
{
}
async
onWebSocketClosed
(
wasClean
code
reason
)
{
}
async
onFrameSent
(
httpChannelId
data
)
{
this
.
addFrame
(
httpChannelId
data
)
;
}
async
onFrameReceived
(
httpChannelId
data
)
{
this
.
addFrame
(
httpChannelId
data
)
;
}
async
addFrame
(
httpChannelId
data
)
{
if
(
this
.
actionsEnabled
&
&
this
.
actions
.
addFrame
)
{
await
this
.
actions
.
addFrame
(
httpChannelId
data
true
)
;
}
}
async
onPayloadDataReceived
(
actor
)
{
const
payload
=
this
.
payloadQueue
.
get
(
actor
)
|
|
{
}
;
if
(
!
payload
.
requestHeadersAvailable
|
|
!
payload
.
requestCookiesAvailable
)
{
return
;
}
if
(
!
payload
.
blockedReason
&
&
(
!
payload
.
eventTimingsAvailable
|
|
!
payload
.
responseContentAvailable
)
)
{
return
;
}
this
.
payloadQueue
.
delete
(
actor
)
;
if
(
this
.
actionsEnabled
&
&
this
.
actions
.
updateRequest
)
{
await
this
.
actions
.
updateRequest
(
actor
payload
true
)
;
}
this
.
emitForTests
(
EVENTS
.
PAYLOAD_READY
actor
)
;
}
requestData
(
actor
method
)
{
const
key
=
{
actor
}
-
{
method
}
;
let
promise
=
this
.
lazyRequestData
.
get
(
key
)
;
if
(
promise
)
{
return
promise
;
}
promise
=
this
.
_requestData
(
actor
method
)
.
then
(
async
payload
=
>
{
this
.
lazyRequestData
.
delete
(
key
)
;
if
(
this
.
actionsEnabled
&
&
this
.
actions
.
updateRequest
)
{
await
this
.
actions
.
updateRequest
(
actor
{
.
.
.
payload
[
{
method
}
Available
]
:
false
}
true
)
;
}
return
payload
;
}
)
;
this
.
lazyRequestData
.
set
(
key
promise
)
;
return
promise
;
}
async
_requestData
(
actor
method
)
{
const
clientMethodName
=
get
{
method
.
charAt
(
0
)
.
toUpperCase
(
)
}
{
method
.
slice
(
1
)
}
;
const
callbackMethodName
=
on
{
method
.
charAt
(
0
)
.
toUpperCase
(
)
}
{
method
.
slice
(
1
)
}
;
const
updatingEventName
=
UPDATING_
{
method
.
replace
(
/
(
[
A
-
Z
]
)
/
g
"
_
1
"
)
.
toUpperCase
(
)
}
;
this
.
emitForTests
(
EVENTS
[
updatingEventName
]
actor
)
;
let
response
=
await
new
Promise
(
(
resolve
reject
)
=
>
{
if
(
typeof
this
.
webConsoleClient
[
clientMethodName
]
=
=
=
"
function
"
)
{
this
.
webConsoleClient
[
clientMethodName
]
(
actor
.
replace
(
"
-
clone
"
"
"
)
res
=
>
{
if
(
res
.
error
)
{
reject
(
new
Error
(
Error
while
calling
method
{
clientMethodName
}
:
{
res
.
message
}
)
)
;
}
resolve
(
res
)
;
}
)
;
}
else
{
reject
(
new
Error
(
Error
:
No
such
client
method
'
{
clientMethodName
}
'
!
)
)
;
}
}
)
;
if
(
actor
.
includes
(
"
-
clone
"
)
)
{
response
=
{
.
.
.
response
from
:
{
response
.
from
}
-
clone
}
;
}
return
this
[
callbackMethodName
]
(
response
)
;
}
async
onRequestHeaders
(
response
)
{
const
payload
=
await
this
.
updateRequest
(
response
.
from
{
requestHeaders
:
response
}
)
;
this
.
emitForTests
(
EVENTS
.
RECEIVED_REQUEST_HEADERS
response
.
from
)
;
return
payload
.
requestHeaders
;
}
async
onResponseHeaders
(
response
)
{
const
payload
=
await
this
.
updateRequest
(
response
.
from
{
responseHeaders
:
response
}
)
;
this
.
emitForTests
(
EVENTS
.
RECEIVED_RESPONSE_HEADERS
response
.
from
)
;
return
payload
.
responseHeaders
;
}
async
onRequestCookies
(
response
)
{
const
payload
=
await
this
.
updateRequest
(
response
.
from
{
requestCookies
:
response
}
)
;
this
.
emitForTests
(
EVENTS
.
RECEIVED_REQUEST_COOKIES
response
.
from
)
;
return
payload
.
requestCookies
;
}
async
onRequestPostData
(
response
)
{
const
payload
=
await
this
.
updateRequest
(
response
.
from
{
requestPostData
:
response
}
)
;
this
.
emitForTests
(
EVENTS
.
RECEIVED_REQUEST_POST_DATA
response
.
from
)
;
return
payload
.
requestPostData
;
}
async
onSecurityInfo
(
response
)
{
const
payload
=
await
this
.
updateRequest
(
response
.
from
{
securityInfo
:
response
.
securityInfo
}
)
;
this
.
emitForTests
(
EVENTS
.
RECEIVED_SECURITY_INFO
response
.
from
)
;
return
payload
.
securityInfo
;
}
async
onResponseCookies
(
response
)
{
const
payload
=
await
this
.
updateRequest
(
response
.
from
{
responseCookies
:
response
}
)
;
this
.
emitForTests
(
EVENTS
.
RECEIVED_RESPONSE_COOKIES
response
.
from
)
;
return
payload
.
responseCookies
;
}
async
onResponseCache
(
response
)
{
const
payload
=
await
this
.
updateRequest
(
response
.
from
{
responseCache
:
response
}
)
;
this
.
emitForTests
(
EVENTS
.
RECEIVED_RESPONSE_CACHE
response
.
from
)
;
return
payload
.
responseCache
;
}
async
onResponseContent
(
response
)
{
const
payload
=
await
this
.
updateRequest
(
response
.
from
{
mimeType
:
response
.
content
.
mimeType
responseContent
:
response
}
)
;
this
.
emitForTests
(
EVENTS
.
RECEIVED_RESPONSE_CONTENT
response
.
from
)
;
return
payload
.
responseContent
;
}
async
onEventTimings
(
response
)
{
const
payload
=
await
this
.
updateRequest
(
response
.
from
{
eventTimings
:
response
}
)
;
this
.
emitForTests
(
EVENTS
.
RECEIVED_EVENT_TIMINGS
response
.
from
)
;
return
payload
.
eventTimings
;
}
async
onStackTrace
(
response
)
{
const
payload
=
await
this
.
updateRequest
(
response
.
from
{
stacktrace
:
response
.
stacktrace
}
)
;
this
.
emitForTests
(
EVENTS
.
RECEIVED_EVENT_STACKTRACE
response
.
from
)
;
return
payload
.
stacktrace
;
}
emitForTests
(
type
data
)
{
if
(
this
.
owner
)
{
this
.
owner
.
emitForTests
(
type
data
)
;
}
}
}
module
.
exports
=
FirefoxDataProvider
;
