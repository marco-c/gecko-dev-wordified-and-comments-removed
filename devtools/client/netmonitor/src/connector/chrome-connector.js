"
use
strict
"
;
const
{
ACTIVITY_TYPE
}
=
require
(
"
.
.
/
constants
"
)
;
const
{
CDPConnector
}
=
require
(
"
.
/
chrome
/
events
"
)
;
class
ChromeConnector
{
constructor
(
)
{
this
.
payloadQueue
=
[
]
;
this
.
connector
=
undefined
;
this
.
connect
=
this
.
connect
.
bind
(
this
)
;
this
.
disconnect
=
this
.
disconnect
.
bind
(
this
)
;
this
.
willNavigate
=
this
.
willNavigate
.
bind
(
this
)
;
this
.
sendHTTPRequest
=
this
.
sendHTTPRequest
.
bind
(
this
)
;
this
.
setPreferences
=
this
.
setPreferences
.
bind
(
this
)
;
this
.
triggerActivity
=
this
.
triggerActivity
.
bind
(
this
)
;
this
.
viewSourceInDebugger
=
this
.
viewSourceInDebugger
.
bind
(
this
)
;
}
async
connect
(
connection
actions
getState
)
{
const
{
tabConnection
}
=
connection
;
this
.
actions
=
actions
;
this
.
connector
=
new
CDPConnector
(
)
;
this
.
connector
.
setup
(
tabConnection
this
.
actions
)
;
this
.
connector
.
willNavigate
(
this
.
willNavigate
)
;
}
async
disconnect
(
)
{
this
.
connector
.
disconnect
(
)
;
}
pause
(
)
{
this
.
disconnect
(
)
;
}
resume
(
)
{
this
.
setup
(
)
;
}
willNavigate
(
)
{
this
.
actions
.
batchReset
(
)
;
this
.
actions
.
clearRequests
(
)
;
}
triggerActivity
(
type
)
{
switch
(
type
)
{
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_ENABLED
:
case
ACTIVITY_TYPE
.
RELOAD
.
WITH_CACHE_DEFAULT
:
return
this
.
connector
.
reset
(
)
.
then
(
(
)
=
>
this
.
connector
.
Page
.
reload
(
)
.
then
(
(
)
=
>
{
this
.
currentActivity
=
ACTIVITY_TYPE
.
NONE
;
}
)
)
;
}
this
.
currentActivity
=
ACTIVITY_TYPE
.
NONE
;
return
Promise
.
reject
(
new
Error
(
"
Invalid
activity
type
"
)
)
;
}
sendHTTPRequest
(
data
callback
)
{
}
setPreferences
(
)
{
}
viewSourceInDebugger
(
)
{
}
}
module
.
exports
=
new
ChromeConnector
(
)
;
