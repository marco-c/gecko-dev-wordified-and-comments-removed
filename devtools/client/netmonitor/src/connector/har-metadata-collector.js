"
use
strict
"
;
const
{
TYPES
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
commands
/
resource
/
resource
-
command
.
js
"
)
;
class
HarMetadataCollector
{
#
commands
;
#
initialTargetTitle
;
#
navigationRequests
;
#
targetTitlesPerURL
;
constructor
(
commands
)
{
this
.
#
commands
=
commands
;
}
destroy
(
)
{
this
.
clear
(
)
;
this
.
#
commands
.
resourceCommand
.
unwatchResources
(
[
TYPES
.
DOCUMENT_EVENT
TYPES
.
NETWORK_EVENT
]
{
onAvailable
:
this
.
#
onResourceAvailable
}
)
;
}
clear
(
)
{
this
.
#
navigationRequests
=
[
]
;
this
.
#
targetTitlesPerURL
=
new
Map
(
)
;
this
.
#
initialTargetTitle
=
this
.
#
commands
.
targetCommand
.
targetFront
.
title
;
}
async
connect
(
)
{
this
.
clear
(
)
;
await
this
.
#
commands
.
resourceCommand
.
watchResources
(
[
TYPES
.
DOCUMENT_EVENT
TYPES
.
NETWORK_EVENT
]
{
onAvailable
:
this
.
#
onResourceAvailable
}
)
;
}
getHarData
(
)
{
return
{
initialTargetTitle
:
this
.
#
initialTargetTitle
navigationRequests
:
this
.
#
navigationRequests
targetTitlesPerURL
:
this
.
#
targetTitlesPerURL
}
;
}
#
onResourceAvailable
=
resources
=
>
{
for
(
const
resource
of
resources
)
{
if
(
resource
.
resourceType
=
=
=
TYPES
.
DOCUMENT_EVENT
)
{
if
(
resource
.
name
=
=
=
"
dom
-
complete
"
&
&
resource
.
targetFront
.
isTopLevel
)
{
this
.
#
targetTitlesPerURL
.
set
(
resource
.
targetFront
.
url
resource
.
targetFront
.
title
)
;
}
}
else
if
(
resource
.
resourceType
=
=
=
TYPES
.
NETWORK_EVENT
)
{
if
(
resource
.
isNavigationRequest
)
{
this
.
#
navigationRequests
.
push
(
resource
)
;
}
}
}
}
;
}
exports
.
HarMetadataCollector
=
HarMetadataCollector
;
