"
use
strict
"
;
const
{
createSelector
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
reselect
.
js
"
)
;
const
getDisplayedMessages
=
createSelector
(
state
=
>
state
.
messages
(
{
messages
messageFilterType
showControlFrames
messageFilterText
currentChannelId
}
)
=
>
{
if
(
!
currentChannelId
|
|
!
messages
.
get
(
currentChannelId
)
)
{
return
[
]
;
}
const
messagesArray
=
messages
.
get
(
currentChannelId
)
;
if
(
messageFilterType
=
=
=
"
all
"
&
&
messageFilterText
.
length
=
=
=
0
)
{
return
messagesArray
.
filter
(
message
=
>
typeFilter
(
message
messageFilterType
showControlFrames
)
)
;
}
const
filter
=
searchFilter
(
messageFilterText
)
;
return
messagesArray
.
filter
(
message
=
>
(
message
.
payload
.
initial
?
filter
(
message
.
payload
.
initial
)
:
filter
(
message
.
payload
)
)
&
&
typeFilter
(
message
messageFilterType
showControlFrames
)
)
;
}
)
;
function
typeFilter
(
message
messageFilterType
showControlFrames
)
{
const
controlFrames
=
[
0x8
0x9
0xa
0xb
0xc
0xd
0xe
0xf
]
;
const
isControlFrame
=
controlFrames
.
includes
(
message
.
opCode
)
;
if
(
messageFilterType
=
=
=
"
all
"
|
|
messageFilterType
=
=
=
message
.
type
)
{
return
showControlFrames
|
|
!
isControlFrame
;
}
return
false
;
}
function
searchFilter
(
messageFilterText
)
{
let
regex
;
if
(
looksLikeRegex
(
messageFilterText
)
)
{
try
{
regex
=
regexFromText
(
messageFilterText
)
;
}
catch
(
e
)
{
}
}
return
regex
?
payload
=
>
regex
.
test
(
payload
)
:
payload
=
>
payload
.
includes
(
messageFilterText
)
;
}
function
looksLikeRegex
(
text
)
{
return
text
.
startsWith
(
"
/
"
)
&
&
text
.
endsWith
(
"
/
"
)
&
&
text
.
length
>
2
;
}
function
regexFromText
(
text
)
{
return
new
RegExp
(
text
.
slice
(
1
-
1
)
"
im
"
)
;
}
const
isSelectedMessageVisible
=
createSelector
(
state
=
>
state
.
messages
getDisplayedMessages
(
{
selectedMessage
}
displayedMessages
)
=
>
displayedMessages
.
some
(
message
=
>
message
=
=
=
selectedMessage
)
)
;
const
getSelectedMessage
=
createSelector
(
state
=
>
state
.
messages
(
{
selectedMessage
}
)
=
>
(
selectedMessage
?
selectedMessage
:
undefined
)
)
;
const
getDisplayedMessagesSummary
=
createSelector
(
getDisplayedMessages
displayedMessages
=
>
{
let
firstStartedMs
=
+
Infinity
;
let
lastEndedMs
=
-
Infinity
;
let
sentSize
=
0
;
let
receivedSize
=
0
;
let
totalSize
=
0
;
displayedMessages
.
forEach
(
message
=
>
{
if
(
message
.
type
=
=
"
received
"
)
{
receivedSize
+
=
message
.
payload
.
length
;
}
else
if
(
message
.
type
=
=
"
sent
"
)
{
sentSize
+
=
message
.
payload
.
length
;
}
totalSize
+
=
message
.
payload
.
length
;
if
(
message
.
timeStamp
<
firstStartedMs
)
{
firstStartedMs
=
message
.
timeStamp
;
}
if
(
message
.
timeStamp
>
lastEndedMs
)
{
lastEndedMs
=
message
.
timeStamp
;
}
}
)
;
return
{
count
:
displayedMessages
.
length
totalMs
:
(
lastEndedMs
-
firstStartedMs
)
/
1000
sentSize
receivedSize
totalSize
}
;
}
)
;
const
isCurrentChannelClosed
=
createSelector
(
state
=
>
state
.
messages
(
{
closedConnections
currentChannelId
}
)
=
>
closedConnections
.
has
(
currentChannelId
)
)
;
const
getClosedConnectionDetails
=
createSelector
(
state
=
>
state
.
messages
(
{
closedConnections
currentChannelId
}
)
=
>
closedConnections
.
get
(
currentChannelId
)
)
;
module
.
exports
=
{
getSelectedMessage
isSelectedMessageVisible
getDisplayedMessages
getDisplayedMessagesSummary
isCurrentChannelClosed
getClosedConnectionDetails
}
;
