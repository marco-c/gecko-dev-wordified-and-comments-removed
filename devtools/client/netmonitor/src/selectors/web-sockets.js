"
use
strict
"
;
const
{
createSelector
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
reselect
"
)
;
const
getDisplayedFrames
=
createSelector
(
state
=
>
state
.
webSockets
(
{
frames
frameFilterType
frameFilterText
currentChannelId
}
)
=
>
{
if
(
!
currentChannelId
|
|
!
frames
.
get
(
currentChannelId
)
)
{
return
[
]
;
}
const
framesArray
=
frames
.
get
(
currentChannelId
)
;
if
(
frameFilterType
=
=
=
"
all
"
&
&
frameFilterText
.
length
=
=
=
0
)
{
return
framesArray
;
}
return
framesArray
.
filter
(
frame
=
>
(
frame
.
payload
.
initial
?
frame
.
payload
.
initial
.
includes
(
frameFilterText
)
:
frame
.
payload
.
includes
(
frameFilterText
)
)
&
&
(
frameFilterType
=
=
=
"
all
"
|
|
frameFilterType
=
=
=
frame
.
type
)
)
;
}
)
;
const
isSelectedFrameVisible
=
createSelector
(
state
=
>
state
.
webSockets
getDisplayedFrames
(
{
selectedFrame
}
displayedFrames
)
=
>
displayedFrames
.
some
(
frame
=
>
frame
=
=
=
selectedFrame
)
)
;
const
getSelectedFrame
=
createSelector
(
state
=
>
state
.
webSockets
(
{
selectedFrame
}
)
=
>
(
selectedFrame
?
selectedFrame
:
undefined
)
)
;
const
getDisplayedFramesSummary
=
createSelector
(
getDisplayedFrames
displayedFrames
=
>
{
let
firstStartedMs
=
+
Infinity
;
let
lastEndedMs
=
-
Infinity
;
let
totalSize
=
0
;
displayedFrames
.
forEach
(
frame
=
>
{
totalSize
+
=
frame
.
payload
.
length
;
if
(
frame
.
timeStamp
<
firstStartedMs
)
{
firstStartedMs
=
frame
.
timeStamp
;
}
if
(
frame
.
timeStamp
>
lastEndedMs
)
{
lastEndedMs
=
frame
.
timeStamp
;
}
}
)
;
return
{
count
:
displayedFrames
.
length
totalMs
:
(
lastEndedMs
-
firstStartedMs
)
/
1000
totalSize
}
;
}
)
;
module
.
exports
=
{
getSelectedFrame
isSelectedFrameVisible
getDisplayedFrames
getDisplayedFramesSummary
}
;
