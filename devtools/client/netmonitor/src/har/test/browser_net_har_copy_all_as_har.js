"
use
strict
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
network
.
tcp
.
tcp_fastopen_enable
"
false
)
;
let
{
tab
monitor
}
=
await
initNetMonitor
(
SIMPLE_URL
)
;
info
(
"
Starting
test
.
.
.
"
)
;
let
har
=
await
reloadAndCopyAllAsHar
(
tab
monitor
)
;
isnot
(
har
.
log
null
"
The
HAR
log
must
exist
"
)
;
is
(
har
.
log
.
creator
.
name
"
Firefox
"
"
The
creator
field
must
be
set
"
)
;
is
(
har
.
log
.
browser
.
name
"
Firefox
"
"
The
browser
field
must
be
set
"
)
;
is
(
har
.
log
.
pages
.
length
1
"
There
must
be
one
page
"
)
;
is
(
har
.
log
.
entries
.
length
1
"
There
must
be
one
request
"
)
;
let
page
=
har
.
log
.
pages
[
0
]
;
ok
(
"
onContentLoad
"
in
page
.
pageTimings
"
There
must
be
onContentLoad
time
"
)
;
ok
(
"
onLoad
"
in
page
.
pageTimings
"
There
must
be
onLoad
time
"
)
;
let
entry
=
har
.
log
.
entries
[
0
]
;
ok
(
entry
.
time
>
0
"
Check
the
total
time
"
)
;
is
(
entry
.
request
.
method
"
GET
"
"
Check
the
method
"
)
;
is
(
entry
.
request
.
url
SIMPLE_URL
"
Check
the
URL
"
)
;
is
(
entry
.
request
.
headers
.
length
9
"
Check
number
of
request
headers
"
)
;
is
(
entry
.
response
.
status
200
"
Check
response
status
"
)
;
is
(
entry
.
response
.
statusText
"
OK
"
"
Check
response
status
text
"
)
;
is
(
entry
.
response
.
headers
.
length
6
"
Check
number
of
response
headers
"
)
;
is
(
entry
.
response
.
content
.
mimeType
"
text
/
html
"
"
Check
response
content
type
"
)
;
isnot
(
entry
.
response
.
content
.
text
undefined
"
Check
response
body
"
)
;
isnot
(
entry
.
timings
undefined
"
Check
timings
"
)
;
await
pushPref
(
"
devtools
.
netmonitor
.
responseBodyLimit
"
10
)
;
har
=
await
reloadAndCopyAllAsHar
(
tab
monitor
)
;
entry
=
har
.
log
.
entries
[
0
]
;
is
(
entry
.
response
.
content
.
text
.
length
10
"
Response
body
must
be
truncated
"
)
;
await
pushPref
(
"
devtools
.
netmonitor
.
responseBodyLimit
"
0
)
;
har
=
await
reloadAndCopyAllAsHar
(
tab
monitor
)
;
entry
=
har
.
log
.
entries
[
0
]
;
is
(
entry
.
response
.
content
.
text
.
length
465
"
Response
body
must
not
be
truncated
"
)
;
return
teardown
(
monitor
)
;
}
)
;
async
function
reloadAndCopyAllAsHar
(
tab
monitor
)
{
let
{
connector
store
windowRequire
}
=
monitor
.
panelWin
;
let
Actions
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
let
{
HarMenuUtils
}
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
har
/
har
-
menu
-
utils
"
)
;
let
{
getSortedRequests
}
=
windowRequire
(
"
devtools
/
client
/
netmonitor
/
src
/
selectors
/
index
"
)
;
store
.
dispatch
(
Actions
.
batchEnable
(
false
)
)
;
let
wait
=
waitForNetworkEvents
(
monitor
1
)
;
tab
.
linkedBrowser
.
reload
(
)
;
await
wait
;
await
HarMenuUtils
.
copyAllAsHar
(
getSortedRequests
(
store
.
getState
(
)
)
connector
)
;
let
jsonString
=
SpecialPowers
.
getClipboardData
(
"
text
/
unicode
"
)
;
return
JSON
.
parse
(
jsonString
)
;
}
