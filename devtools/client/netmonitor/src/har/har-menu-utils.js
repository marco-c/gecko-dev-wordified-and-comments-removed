"
use
strict
"
;
const
{
L10N
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
)
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
HarExporter
"
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
har
/
har
-
exporter
.
js
"
true
)
;
loader
.
lazyGetter
(
this
"
HarImporter
"
function
(
)
{
return
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
har
/
har
-
importer
.
js
"
)
.
HarImporter
;
}
)
;
var
HarMenuUtils
=
{
async
copyAllAsHar
(
requests
connector
)
{
const
har
=
await
HarExporter
.
copy
(
this
.
getDefaultHarOptions
(
requests
connector
)
)
;
HarMenuUtils
.
emitForTests
(
"
copy
-
all
-
as
-
har
-
done
"
har
)
;
return
har
;
}
saveAsHar
(
clickedRequest
connector
)
{
const
options
=
this
.
getDefaultHarOptions
(
[
clickedRequest
]
connector
)
;
options
.
isSingleRequest
=
true
;
return
HarExporter
.
save
(
options
)
;
}
saveAllAsHar
(
requests
connector
)
{
return
HarExporter
.
save
(
this
.
getDefaultHarOptions
(
requests
connector
)
)
;
}
openHarFile
(
actions
openSplitConsole
)
{
const
fp
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
Ci
.
nsIFilePicker
)
;
fp
.
init
(
window
.
browsingContext
L10N
.
getStr
(
"
netmonitor
.
har
.
importHarDialogTitle
"
)
Ci
.
nsIFilePicker
.
modeOpen
)
;
fp
.
appendFilter
(
L10N
.
getStr
(
"
netmonitor
.
har
.
importDialogHARFilter
"
)
"
*
.
har
"
)
;
fp
.
appendFilter
(
L10N
.
getStr
(
"
netmonitor
.
har
.
importDialogAllFilter
"
)
"
*
.
*
"
)
;
fp
.
open
(
rv
=
>
{
if
(
rv
=
=
Ci
.
nsIFilePicker
.
returnOK
)
{
const
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
file
.
initWithPath
(
fp
.
file
.
path
)
;
readFile
(
file
)
.
then
(
har
=
>
{
if
(
har
)
{
this
.
appendPreview
(
har
actions
openSplitConsole
)
;
}
}
)
;
}
}
)
;
}
appendPreview
(
har
actions
openSplitConsole
)
{
try
{
const
importer
=
new
HarImporter
(
actions
)
;
importer
.
import
(
har
)
;
}
catch
(
err
)
{
if
(
openSplitConsole
)
{
openSplitConsole
(
"
Error
while
processing
HAR
file
:
"
+
err
.
message
)
;
}
}
}
getDefaultHarOptions
(
requests
connector
)
{
return
{
connector
items
:
requests
}
;
}
}
;
function
readFile
(
file
)
{
return
new
Promise
(
resolve
=
>
{
IOUtils
.
read
(
file
.
path
)
.
then
(
data
=
>
{
const
decoder
=
new
TextDecoder
(
)
;
resolve
(
decoder
.
decode
(
data
)
)
;
}
)
;
}
)
;
}
EventEmitter
.
decorate
(
HarMenuUtils
)
;
exports
.
HarMenuUtils
=
HarMenuUtils
;
