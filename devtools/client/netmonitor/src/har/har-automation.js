"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
HarCollector
}
=
require
(
"
.
/
har
-
collector
"
)
;
const
{
HarExporter
}
=
require
(
"
.
/
har
-
exporter
"
)
;
const
{
HarUtils
}
=
require
(
"
.
/
har
-
utils
"
)
;
const
prefDomain
=
"
devtools
.
netmonitor
.
har
.
"
;
const
trace
=
{
log
:
function
(
.
.
.
args
)
{
}
}
;
function
HarAutomation
(
toolbox
)
{
this
.
initialize
(
toolbox
)
;
}
HarAutomation
.
prototype
=
{
initialize
:
function
(
toolbox
)
{
this
.
toolbox
=
toolbox
;
const
target
=
toolbox
.
target
;
this
.
startMonitoring
(
target
.
client
)
;
}
destroy
:
function
(
)
{
if
(
this
.
collector
)
{
this
.
collector
.
stop
(
)
;
}
if
(
this
.
tabWatcher
)
{
this
.
tabWatcher
.
disconnect
(
)
;
}
}
startMonitoring
:
function
(
client
callback
)
{
if
(
!
client
)
{
return
;
}
this
.
debuggerClient
=
client
;
this
.
webConsoleFront
=
this
.
toolbox
.
target
.
activeConsole
;
this
.
tabWatcher
=
new
TabWatcher
(
this
.
toolbox
this
)
;
this
.
tabWatcher
.
connect
(
)
;
}
pageLoadBegin
:
function
(
response
)
{
this
.
resetCollector
(
)
;
}
resetCollector
:
function
(
)
{
if
(
this
.
collector
)
{
this
.
collector
.
stop
(
)
;
}
this
.
collector
=
new
HarCollector
(
{
webConsoleFront
:
this
.
webConsoleFront
debuggerClient
:
this
.
debuggerClient
}
)
;
this
.
collector
.
start
(
)
;
}
pageLoadDone
:
function
(
response
)
{
trace
.
log
(
"
HarAutomation
.
pageLoadDone
;
"
response
)
;
if
(
this
.
collector
)
{
this
.
collector
.
waitForHarLoad
(
)
.
then
(
collector
=
>
{
return
this
.
autoExport
(
)
;
}
)
;
}
}
autoExport
:
function
(
)
{
const
autoExport
=
Services
.
prefs
.
getBoolPref
(
prefDomain
+
"
enableAutoExportToFile
"
)
;
if
(
!
autoExport
)
{
return
Promise
.
resolve
(
)
;
}
const
data
=
{
fileName
:
Services
.
prefs
.
getCharPref
(
prefDomain
+
"
defaultFileName
"
)
}
;
return
this
.
executeExport
(
data
)
;
}
triggerExport
:
function
(
data
)
{
if
(
!
data
.
fileName
)
{
data
.
fileName
=
Services
.
prefs
.
getCharPref
(
prefDomain
+
"
defaultFileName
"
)
;
}
return
this
.
executeExport
(
data
)
;
}
clear
:
function
(
)
{
this
.
resetCollector
(
)
;
}
executeExport
:
async
function
(
data
)
{
const
items
=
this
.
collector
.
getItems
(
)
;
const
{
title
}
=
this
.
toolbox
.
target
;
const
netMonitor
=
await
this
.
toolbox
.
getNetMonitorAPI
(
)
;
const
connector
=
await
netMonitor
.
getHarExportConnector
(
)
;
const
options
=
{
connector
requestData
:
null
getTimingMarker
:
null
getString
:
this
.
getString
.
bind
(
this
)
view
:
this
items
:
items
}
;
options
.
defaultFileName
=
data
.
fileName
;
options
.
compress
=
data
.
compress
;
options
.
title
=
data
.
title
|
|
title
;
options
.
id
=
data
.
id
;
options
.
jsonp
=
data
.
jsonp
;
options
.
includeResponseBodies
=
data
.
includeResponseBodies
;
options
.
jsonpCallback
=
data
.
jsonpCallback
;
options
.
forceExport
=
data
.
forceExport
;
trace
.
log
(
"
HarAutomation
.
executeExport
;
"
+
data
.
fileName
options
)
;
const
jsonString
=
await
HarExporter
.
fetchHarData
(
options
)
;
if
(
jsonString
&
&
options
.
defaultFileName
)
{
const
file
=
getDefaultTargetFile
(
options
)
;
if
(
file
)
{
HarUtils
.
saveToFile
(
file
jsonString
options
.
compress
)
;
}
}
return
jsonString
;
}
getString
:
function
(
stringGrip
)
{
return
this
.
webConsoleFront
.
getString
(
stringGrip
)
;
}
}
;
function
TabWatcher
(
toolbox
listener
)
{
this
.
target
=
toolbox
.
target
;
this
.
listener
=
listener
;
this
.
onNavigate
=
this
.
onNavigate
.
bind
(
this
)
;
this
.
onWillNavigate
=
this
.
onWillNavigate
.
bind
(
this
)
;
}
TabWatcher
.
prototype
=
{
connect
:
function
(
)
{
this
.
target
.
on
(
"
navigate
"
this
.
onNavigate
)
;
this
.
target
.
on
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
}
disconnect
:
function
(
)
{
if
(
!
this
.
target
)
{
return
;
}
this
.
target
.
off
(
"
navigate
"
this
.
onNavigate
)
;
this
.
target
.
off
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
}
onNavigate
:
function
(
packet
)
{
this
.
listener
.
pageLoadDone
(
packet
)
;
}
onWillNavigate
:
function
(
packet
)
{
this
.
listener
.
pageLoadBegin
(
packet
)
;
}
}
;
function
getDefaultTargetFile
(
options
)
{
const
path
=
options
.
defaultLogDir
|
|
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
har
.
defaultLogDir
"
)
;
const
folder
=
HarUtils
.
getLocalDirectory
(
path
)
;
const
tabTarget
=
options
.
connector
.
getTabTarget
(
)
;
const
host
=
new
URL
(
tabTarget
.
url
)
;
const
fileName
=
HarUtils
.
getHarFileName
(
options
.
defaultFileName
options
.
jsonp
options
.
compress
host
.
hostname
)
;
folder
.
append
(
fileName
)
;
folder
.
createUnique
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
parseInt
(
"
0666
"
8
)
)
;
return
folder
;
}
exports
.
HarAutomation
=
HarAutomation
;
