"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
FileSaver
=
require
(
"
devtools
/
client
/
shared
/
file
-
saver
"
)
;
const
JSZip
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
jszip
"
)
;
const
clipboardHelper
=
require
(
"
devtools
/
shared
/
platform
/
clipboard
"
)
;
const
{
HarBuilder
}
=
require
(
"
.
/
har
-
builder
"
)
;
var
uid
=
1
;
const
trace
=
{
log
:
function
(
.
.
.
args
)
{
}
}
;
const
HarExporter
=
{
async
save
(
options
)
{
let
defaultFileName
=
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
har
.
defaultFileName
"
)
;
let
compress
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
har
.
compress
"
)
;
trace
.
log
(
"
HarExporter
.
save
;
"
+
defaultFileName
options
)
;
let
data
=
await
this
.
fetchHarData
(
options
)
;
let
fileName
=
this
.
getHarFileName
(
defaultFileName
options
.
jsonp
compress
)
;
if
(
compress
)
{
data
=
await
JSZip
(
)
.
file
(
fileName
data
)
.
generateAsync
(
{
compression
:
"
DEFLATE
"
platform
:
Services
.
appinfo
.
OS
=
=
=
"
WINNT
"
?
"
DOS
"
:
"
UNIX
"
type
:
"
blob
"
}
)
;
}
fileName
=
{
fileName
}
{
compress
?
"
.
zip
"
:
"
"
}
;
let
blob
=
compress
?
data
:
new
Blob
(
[
data
]
{
type
:
"
application
/
json
"
}
)
;
FileSaver
.
saveAs
(
blob
fileName
document
)
;
}
formatDate
(
date
)
{
let
year
=
String
(
date
.
getFullYear
(
)
%
100
)
.
padStart
(
2
"
0
"
)
;
let
month
=
String
(
date
.
getMonth
(
)
+
1
)
.
padStart
(
2
"
0
"
)
;
let
day
=
String
(
date
.
getDate
(
)
)
.
padStart
(
2
"
0
"
)
;
let
hour
=
String
(
date
.
getHours
(
)
)
.
padStart
(
2
"
0
"
)
;
let
minutes
=
String
(
date
.
getMinutes
(
)
)
.
padStart
(
2
"
0
"
)
;
let
seconds
=
String
(
date
.
getSeconds
(
)
)
.
padStart
(
2
"
0
"
)
;
return
{
year
}
-
{
month
}
-
{
day
}
{
hour
}
-
{
minutes
}
-
{
seconds
}
;
}
getHarFileName
(
defaultFileName
jsonp
compress
)
{
let
name
=
defaultFileName
.
replace
(
/
%
date
/
g
this
.
formatDate
(
new
Date
(
)
)
)
;
name
=
name
.
replace
(
/
\
:
/
gm
"
-
"
"
"
)
;
name
=
name
.
replace
(
/
\
/
/
gm
"
_
"
"
"
)
;
return
{
name
}
.
{
jsonp
?
"
harp
"
:
"
har
"
}
;
}
copy
:
function
(
options
)
{
return
this
.
fetchHarData
(
options
)
.
then
(
jsonString
=
>
{
clipboardHelper
.
copyString
(
jsonString
)
;
return
jsonString
;
}
)
;
}
getHar
:
function
(
options
)
{
return
this
.
fetchHarData
(
options
)
.
then
(
JSON
.
parse
)
;
}
fetchHarData
:
function
(
options
)
{
options
.
id
=
options
.
id
|
|
uid
+
+
;
if
(
typeof
options
.
jsonp
!
=
"
boolean
"
)
{
options
.
jsonp
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
har
.
jsonp
"
)
;
}
if
(
typeof
options
.
includeResponseBodies
!
=
"
boolean
"
)
{
options
.
includeResponseBodies
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
har
.
includeResponseBodies
"
)
;
}
if
(
typeof
options
.
jsonpCallback
!
=
"
boolean
"
)
{
options
.
jsonpCallback
=
Services
.
prefs
.
getCharPref
(
"
devtools
.
netmonitor
.
har
.
jsonpCallback
"
)
;
}
if
(
typeof
options
.
forceExport
!
=
"
boolean
"
)
{
options
.
forceExport
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
har
.
forceExport
"
)
;
}
return
this
.
buildHarData
(
options
)
.
then
(
har
=
>
{
if
(
!
har
.
log
.
entries
.
length
&
&
!
options
.
forceExport
)
{
return
Promise
.
resolve
(
)
;
}
let
jsonString
=
this
.
stringify
(
har
)
;
if
(
!
jsonString
)
{
return
Promise
.
resolve
(
)
;
}
if
(
options
.
jsonp
)
{
let
callbackName
=
options
.
jsonpCallback
|
|
"
onInputData
"
;
jsonString
=
callbackName
+
"
(
"
+
jsonString
+
"
)
;
"
;
}
return
jsonString
;
}
)
.
catch
(
function
onError
(
err
)
{
console
.
error
(
err
)
;
}
)
;
}
buildHarData
:
function
(
options
)
{
let
builder
=
new
HarBuilder
(
options
)
;
return
builder
.
build
(
)
;
}
stringify
:
function
(
har
)
{
if
(
!
har
)
{
return
null
;
}
try
{
return
JSON
.
stringify
(
har
null
"
"
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
return
undefined
;
}
}
}
;
exports
.
HarExporter
=
HarExporter
;
