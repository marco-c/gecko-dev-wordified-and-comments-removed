"
use
strict
"
;
const
appInfo
=
Services
.
appinfo
;
const
{
LocalizationHelper
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
l10n
.
js
"
)
;
const
{
CurlUtils
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
curl
.
js
"
)
;
const
{
getFormDataSections
getUrlQuery
parseQueryString
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
request
-
utils
.
js
"
)
;
const
{
buildHarLog
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
har
/
har
-
builder
-
utils
.
js
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
har
.
properties
"
)
;
const
{
TIMING_KEYS
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
constants
.
js
"
)
;
var
HarBuilder
=
function
(
options
)
{
this
.
_options
=
options
;
this
.
_pageMap
=
[
]
;
this
.
_pageId
=
options
.
supportsMultiplePages
?
0
:
options
.
id
;
}
;
HarBuilder
.
prototype
=
{
async
build
(
)
{
this
.
promises
=
[
]
;
const
log
=
buildHarLog
(
appInfo
)
;
for
(
const
file
of
this
.
_options
.
items
)
{
const
entry
=
await
this
.
buildEntry
(
log
.
log
file
)
;
if
(
entry
)
{
log
.
log
.
entries
.
push
(
entry
)
;
}
}
await
Promise
.
all
(
this
.
promises
)
;
return
log
;
}
buildPage
(
title
)
{
const
page
=
{
}
;
page
.
startedDateTime
=
0
;
page
.
title
=
title
;
page
.
id
=
"
page_
"
+
this
.
_pageId
;
this
.
_pageId
+
+
;
return
page
;
}
getPageFromTargetTitlesPerURL
(
log
entry
isNavigationRequest
)
{
if
(
isNavigationRequest
)
{
if
(
this
.
_options
.
targetTitlesPerURL
.
has
(
entry
.
request
.
url
)
)
{
const
title
=
this
.
_options
.
targetTitlesPerURL
.
get
(
entry
.
request
.
url
)
;
const
page
=
this
.
buildPage
(
title
)
;
log
.
pages
.
push
(
page
)
;
return
page
;
}
console
.
error
(
No
navigation
found
for
request
with
url
:
{
entry
.
request
.
url
}
)
;
}
const
existingPage
=
log
.
pages
.
findLast
(
(
{
startedDateTime
}
)
=
>
startedDateTime
<
=
entry
.
startedDateTime
)
;
if
(
existingPage
)
{
return
existingPage
;
}
const
page
=
this
.
buildPage
(
this
.
_options
.
initialTargetTitle
)
;
log
.
pages
.
push
(
page
)
;
return
page
;
}
getPage
(
log
entry
isNavigationRequest
)
{
if
(
this
.
_options
.
supportsMultiplePages
)
{
return
this
.
getPageFromTargetTitlesPerURL
(
log
entry
isNavigationRequest
)
;
}
const
{
id
}
=
this
.
_options
;
let
page
=
this
.
_pageMap
[
id
]
;
if
(
page
)
{
return
page
;
}
this
.
_pageMap
[
id
]
=
page
=
this
.
buildPage
(
this
.
_options
.
title
)
;
log
.
pages
.
push
(
page
)
;
return
page
;
}
async
buildEntry
(
log
file
)
{
const
entry
=
{
}
;
entry
.
startedDateTime
=
dateToJSON
(
new
Date
(
file
.
startedMs
)
)
;
let
{
eventTimings
}
=
file
;
try
{
if
(
!
eventTimings
&
&
this
.
_options
.
requestData
)
{
eventTimings
=
await
this
.
_options
.
requestData
(
file
.
id
"
eventTimings
"
)
;
}
entry
.
request
=
await
this
.
buildRequest
(
file
)
;
entry
.
response
=
await
this
.
buildResponse
(
file
)
;
entry
.
cache
=
await
this
.
buildCache
(
file
)
;
}
catch
(
e
)
{
console
.
warn
(
"
HAR
builder
failed
on
"
file
.
url
e
e
.
stack
)
;
return
null
;
}
entry
.
timings
=
eventTimings
?
eventTimings
.
timings
:
{
}
;
entry
.
time
=
TIMING_KEYS
.
reduce
(
(
sum
type
)
=
>
{
const
time
=
entry
.
timings
[
type
]
;
return
typeof
time
!
=
"
undefined
"
&
&
time
!
=
-
1
?
sum
+
time
:
sum
;
}
0
)
;
entry
.
_securityState
=
file
.
securityState
;
if
(
file
.
remoteAddress
)
{
entry
.
serverIPAddress
=
file
.
remoteAddress
;
}
if
(
file
.
remotePort
)
{
entry
.
connection
=
file
.
remotePort
+
"
"
;
}
const
page
=
this
.
getPage
(
log
entry
file
.
isNavigationRequest
)
;
if
(
!
page
.
startedDateTime
)
{
page
.
startedDateTime
=
entry
.
startedDateTime
;
page
.
pageTimings
=
this
.
buildPageTimings
(
page
file
)
;
}
entry
.
pageref
=
page
.
id
;
return
entry
;
}
buildPageTimings
(
page
file
)
{
const
timings
=
{
onContentLoad
:
-
1
onLoad
:
-
1
}
;
const
{
getTimingMarker
}
=
this
.
_options
;
if
(
getTimingMarker
)
{
timings
.
onContentLoad
=
getTimingMarker
(
"
firstDocumentDOMContentLoadedTimestamp
"
)
;
timings
.
onLoad
=
getTimingMarker
(
"
firstDocumentLoadTimestamp
"
)
;
}
return
timings
;
}
async
buildRequest
(
file
)
{
let
{
requestHeaders
}
=
file
;
if
(
!
requestHeaders
&
&
this
.
_options
.
requestData
)
{
requestHeaders
=
await
this
.
_options
.
requestData
(
file
.
id
"
requestHeaders
"
)
;
}
let
{
requestCookies
}
=
file
;
if
(
!
requestCookies
&
&
this
.
_options
.
requestData
)
{
requestCookies
=
await
this
.
_options
.
requestData
(
file
.
id
"
requestCookies
"
)
;
}
const
request
=
{
bodySize
:
0
}
;
request
.
method
=
file
.
method
;
request
.
url
=
file
.
url
;
request
.
httpVersion
=
file
.
httpVersion
|
|
"
"
;
request
.
headers
=
this
.
buildHeaders
(
requestHeaders
)
;
request
.
headers
=
this
.
appendHeadersPostData
(
request
.
headers
file
)
;
request
.
cookies
=
this
.
buildCookies
(
requestCookies
)
;
request
.
queryString
=
parseQueryString
(
getUrlQuery
(
file
.
url
)
)
|
|
[
]
;
request
.
headersSize
=
requestHeaders
.
headersSize
;
request
.
postData
=
await
this
.
buildPostData
(
file
)
;
if
(
request
.
postData
?
.
text
)
{
request
.
bodySize
=
request
.
postData
.
text
.
length
;
}
return
request
;
}
buildHeaders
(
input
)
{
if
(
!
input
)
{
return
[
]
;
}
return
this
.
buildNameValuePairs
(
input
.
headers
)
;
}
appendHeadersPostData
(
input
=
[
]
file
)
{
if
(
!
file
.
requestPostData
)
{
return
input
;
}
this
.
fetchData
(
file
.
requestPostData
.
postData
.
text
)
.
then
(
value
=
>
{
const
multipartHeaders
=
CurlUtils
.
getHeadersFromMultipartText
(
value
)
;
for
(
const
header
of
multipartHeaders
)
{
input
.
push
(
header
)
;
}
}
)
;
return
input
;
}
buildCookies
(
input
)
{
if
(
!
input
)
{
return
[
]
;
}
return
this
.
buildNameValuePairs
(
input
.
cookies
|
|
input
)
;
}
buildNameValuePairs
(
entries
)
{
const
result
=
[
]
;
if
(
!
entries
)
{
return
result
;
}
entries
.
forEach
(
entry
=
>
{
this
.
fetchData
(
entry
.
value
)
.
then
(
value
=
>
{
result
.
push
(
{
name
:
entry
.
name
value
}
)
;
}
)
;
}
)
;
return
result
;
}
async
buildPostData
(
file
)
{
let
{
requestPostData
}
=
file
;
let
{
requestHeaders
}
=
file
;
let
requestHeadersFromUploadStream
;
if
(
!
requestPostData
&
&
this
.
_options
.
requestData
)
{
requestPostData
=
await
this
.
_options
.
requestData
(
file
.
id
"
requestPostData
"
)
;
requestHeadersFromUploadStream
=
requestPostData
.
uploadHeaders
;
}
if
(
!
requestPostData
.
postData
.
text
)
{
return
undefined
;
}
if
(
!
requestHeaders
&
&
this
.
_options
.
requestData
)
{
requestHeaders
=
await
this
.
_options
.
requestData
(
file
.
id
"
requestHeaders
"
)
;
}
const
postData
=
{
mimeType
:
findValue
(
requestHeaders
.
headers
"
content
-
type
"
)
params
:
[
]
text
:
requestPostData
.
postData
.
text
}
;
if
(
requestPostData
.
postDataDiscarded
)
{
postData
.
comment
=
L10N
.
getStr
(
"
har
.
requestBodyNotIncluded
"
)
;
return
postData
;
}
if
(
CurlUtils
.
isUrlEncodedRequest
(
{
headers
:
requestHeaders
.
headers
postDataText
:
postData
.
text
}
)
)
{
postData
.
mimeType
=
"
application
/
x
-
www
-
form
-
urlencoded
"
;
const
formDataSections
=
await
getFormDataSections
(
requestHeaders
requestHeadersFromUploadStream
requestPostData
this
.
_options
.
getString
)
;
formDataSections
.
forEach
(
section
=
>
{
const
paramsArray
=
parseQueryString
(
section
)
;
if
(
paramsArray
)
{
postData
.
params
=
[
.
.
.
postData
.
params
.
.
.
paramsArray
]
;
}
}
)
;
}
return
postData
;
}
async
buildResponse
(
file
)
{
let
{
responseHeaders
}
=
file
;
if
(
!
responseHeaders
&
&
this
.
_options
.
requestData
)
{
responseHeaders
=
await
this
.
_options
.
requestData
(
file
.
id
"
responseHeaders
"
)
;
}
let
{
responseCookies
}
=
file
;
if
(
!
responseCookies
&
&
this
.
_options
.
requestData
)
{
responseCookies
=
await
this
.
_options
.
requestData
(
file
.
id
"
responseCookies
"
)
;
}
const
response
=
{
status
:
0
}
;
if
(
file
.
status
)
{
response
.
status
=
parseInt
(
file
.
status
10
)
;
}
response
.
statusText
=
file
.
statusText
|
|
"
"
;
response
.
httpVersion
=
file
.
httpVersion
|
|
"
"
;
response
.
headers
=
this
.
buildHeaders
(
responseHeaders
)
;
response
.
cookies
=
this
.
buildCookies
(
responseCookies
)
;
response
.
content
=
await
this
.
buildContent
(
file
)
;
const
headers
=
responseHeaders
?
responseHeaders
.
headers
:
null
;
const
headersSize
=
responseHeaders
?
responseHeaders
.
headersSize
:
-
1
;
response
.
redirectURL
=
findValue
(
headers
"
Location
"
)
;
response
.
headersSize
=
headersSize
;
if
(
typeof
file
.
transferredSize
!
=
"
number
"
)
{
response
.
bodySize
=
response
.
status
=
=
304
?
0
:
-
1
;
}
else
{
response
.
bodySize
=
file
.
transferredSize
;
}
return
response
;
}
async
buildContent
(
file
)
{
const
content
=
{
mimeType
:
file
.
mimeType
size
:
-
1
}
;
let
{
responseContent
}
=
file
;
if
(
!
responseContent
&
&
this
.
_options
.
requestData
)
{
responseContent
=
await
this
.
_options
.
requestData
(
file
.
id
"
responseContent
"
)
;
}
if
(
responseContent
?
.
content
)
{
content
.
size
=
responseContent
.
content
.
size
;
content
.
encoding
=
responseContent
.
content
.
encoding
;
}
const
includeBodies
=
this
.
_options
.
includeResponseBodies
;
const
contentDiscarded
=
responseContent
?
responseContent
.
contentDiscarded
:
false
;
if
(
!
includeBodies
|
|
contentDiscarded
)
{
content
.
comment
=
L10N
.
getStr
(
"
har
.
responseBodyNotIncluded
"
)
;
return
content
;
}
if
(
responseContent
)
{
const
{
text
}
=
responseContent
.
content
;
this
.
fetchData
(
text
)
.
then
(
value
=
>
{
content
.
text
=
value
;
}
)
;
}
return
content
;
}
async
buildCache
(
file
)
{
const
cache
=
{
}
;
if
(
file
.
status
!
=
"
304
"
)
{
return
cache
;
}
if
(
file
.
responseCacheAvailable
&
&
this
.
_options
.
requestData
)
{
const
responseCache
=
await
this
.
_options
.
requestData
(
file
.
id
"
responseCache
"
)
;
if
(
responseCache
.
cache
)
{
cache
.
afterRequest
=
this
.
buildCacheEntry
(
responseCache
.
cache
)
;
}
}
else
if
(
file
.
responseCache
?
.
cache
)
{
cache
.
afterRequest
=
this
.
buildCacheEntry
(
file
.
responseCache
.
cache
)
;
}
else
{
cache
.
afterRequest
=
null
;
}
return
cache
;
}
buildCacheEntry
(
cacheEntry
)
{
const
cache
=
{
}
;
if
(
typeof
cacheEntry
!
=
=
"
undefined
"
)
{
cache
.
expires
=
findKeys
(
cacheEntry
[
"
expirationTime
"
"
expires
"
]
)
;
cache
.
lastFetched
=
findKeys
(
cacheEntry
[
"
lastFetched
"
]
)
;
cache
.
fetchCount
=
findKeys
(
cacheEntry
[
"
fetchCount
"
]
)
;
cache
.
_dataSize
=
findKeys
(
cacheEntry
[
"
storageDataSize
"
"
_dataSize
"
]
)
;
cache
.
_lastModified
=
findKeys
(
cacheEntry
[
"
lastModified
"
"
_lastModified
"
]
)
;
cache
.
_device
=
findKeys
(
cacheEntry
[
"
deviceID
"
"
_device
"
]
)
;
}
return
cache
;
}
fetchData
(
string
)
{
const
promise
=
this
.
_options
.
getString
(
string
)
.
then
(
value
=
>
{
return
value
;
}
)
;
this
.
promises
.
push
(
promise
)
;
return
promise
;
}
}
;
function
findKeys
(
obj
keys
)
{
if
(
!
keys
)
{
return
"
"
;
}
const
keyFound
=
keys
.
filter
(
key
=
>
obj
[
key
]
)
;
if
(
!
keys
.
length
)
{
return
"
"
;
}
const
value
=
obj
[
keyFound
[
0
]
]
;
if
(
typeof
value
=
=
=
"
undefined
"
|
|
typeof
value
=
=
=
"
object
"
)
{
return
"
"
;
}
return
String
(
value
)
;
}
function
findValue
(
arr
name
)
{
if
(
!
arr
)
{
return
"
"
;
}
name
=
name
.
toLowerCase
(
)
;
const
result
=
arr
.
find
(
entry
=
>
entry
.
name
.
toLowerCase
(
)
=
=
name
)
;
return
result
?
result
.
value
:
"
"
;
}
function
dateToJSON
(
date
)
{
function
f
(
n
c
)
{
if
(
!
c
)
{
c
=
2
;
}
let
s
=
String
(
n
)
;
while
(
s
.
length
<
c
)
{
s
=
"
0
"
+
s
;
}
return
s
;
}
const
result
=
date
.
getFullYear
(
)
+
"
-
"
+
f
(
date
.
getMonth
(
)
+
1
)
+
"
-
"
+
f
(
date
.
getDate
(
)
)
+
"
T
"
+
f
(
date
.
getHours
(
)
)
+
"
:
"
+
f
(
date
.
getMinutes
(
)
)
+
"
:
"
+
f
(
date
.
getSeconds
(
)
)
+
"
.
"
+
f
(
date
.
getMilliseconds
(
)
3
)
;
let
offset
=
date
.
getTimezoneOffset
(
)
;
const
positive
=
offset
>
0
;
offset
=
Math
.
abs
(
offset
)
;
const
offsetHours
=
Math
.
floor
(
offset
/
60
)
;
const
offsetMinutes
=
Math
.
floor
(
offset
%
60
)
;
const
prettyOffset
=
(
positive
>
0
?
"
-
"
:
"
+
"
)
+
f
(
offsetHours
)
+
"
:
"
+
f
(
offsetMinutes
)
;
return
result
+
prettyOffset
;
}
exports
.
HarBuilder
=
HarBuilder
;
