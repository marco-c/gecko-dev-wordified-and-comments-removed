"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
ZipWriter
"
function
(
)
{
return
Components
.
Constructor
(
"
mozilla
.
org
/
zipwriter
;
1
"
"
nsIZipWriter
"
)
;
}
)
;
const
OPEN_FLAGS
=
{
RDONLY
:
parseInt
(
"
0x01
"
16
)
WRONLY
:
parseInt
(
"
0x02
"
16
)
CREATE_FILE
:
parseInt
(
"
0x08
"
16
)
APPEND
:
parseInt
(
"
0x10
"
16
)
TRUNCATE
:
parseInt
(
"
0x20
"
16
)
EXCL
:
parseInt
(
"
0x80
"
16
)
}
;
function
formatDate
(
date
)
{
const
year
=
String
(
date
.
getFullYear
(
)
%
100
)
.
padStart
(
2
"
0
"
)
;
const
month
=
String
(
date
.
getMonth
(
)
+
1
)
.
padStart
(
2
"
0
"
)
;
const
day
=
String
(
date
.
getDate
(
)
)
.
padStart
(
2
"
0
"
)
;
const
hour
=
String
(
date
.
getHours
(
)
)
.
padStart
(
2
"
0
"
)
;
const
minutes
=
String
(
date
.
getMinutes
(
)
)
.
padStart
(
2
"
0
"
)
;
const
seconds
=
String
(
date
.
getSeconds
(
)
)
.
padStart
(
2
"
0
"
)
;
return
{
year
}
-
{
month
}
-
{
day
}
{
hour
}
-
{
minutes
}
-
{
seconds
}
;
}
var
HarUtils
=
{
getHarFileName
(
defaultFileName
jsonp
compress
hostname
)
{
const
extension
=
jsonp
?
"
.
harp
"
:
"
.
har
"
;
const
now
=
new
Date
(
)
;
let
name
=
defaultFileName
.
replace
(
/
%
date
/
g
formatDate
(
now
)
)
;
name
=
name
.
replace
(
/
%
hostname
/
g
hostname
)
;
name
=
name
.
replace
(
/
\
:
/
gm
"
-
"
"
"
)
;
name
=
name
.
replace
(
/
\
/
/
gm
"
_
"
"
"
)
;
let
fileName
=
name
+
extension
;
if
(
compress
)
{
fileName
+
=
"
.
zip
"
;
}
return
fileName
;
}
saveToFile
(
file
jsonString
compress
)
{
const
openFlags
=
OPEN_FLAGS
.
WRONLY
|
OPEN_FLAGS
.
CREATE_FILE
|
OPEN_FLAGS
.
TRUNCATE
;
try
{
const
foStream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
const
permFlags
=
parseInt
(
"
0666
"
8
)
;
foStream
.
init
(
file
openFlags
permFlags
0
)
;
const
convertor
=
Cc
[
"
mozilla
.
org
/
intl
/
converter
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIConverterOutputStream
)
;
convertor
.
init
(
foStream
"
UTF
-
8
"
)
;
const
chunkLength
=
1024
*
1024
;
for
(
let
i
=
0
;
i
<
=
jsonString
.
length
;
i
+
+
)
{
const
data
=
jsonString
.
substr
(
i
chunkLength
+
1
)
;
if
(
data
)
{
convertor
.
writeString
(
data
)
;
}
i
=
i
+
chunkLength
;
}
convertor
.
close
(
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
return
false
;
}
if
(
!
compress
)
{
return
true
;
}
const
originalFilePath
=
file
.
path
;
const
originalFileName
=
file
.
leafName
;
try
{
file
.
moveTo
(
null
"
temp
"
+
new
Date
(
)
.
getTime
(
)
+
"
temphar
"
)
;
const
zipFile
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
zipFile
.
initWithPath
(
originalFilePath
)
;
let
fileName
=
originalFileName
;
if
(
fileName
.
indexOf
(
"
.
zip
"
)
=
=
fileName
.
length
-
4
)
{
fileName
=
fileName
.
substr
(
0
fileName
.
indexOf
(
"
.
zip
"
)
)
;
}
const
zip
=
new
ZipWriter
(
)
;
zip
.
open
(
zipFile
openFlags
)
;
zip
.
addEntryFile
(
fileName
Ci
.
nsIZipWriter
.
COMPRESSION_DEFAULT
file
false
)
;
zip
.
close
(
)
;
file
.
remove
(
true
)
;
return
true
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
file
.
moveTo
(
null
originalFileName
)
;
}
return
false
;
}
getLocalDirectory
(
path
)
{
let
dir
;
if
(
!
path
)
{
dir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
dir
.
append
(
"
har
"
)
;
dir
.
append
(
"
logs
"
)
;
}
else
{
dir
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
dir
.
initWithPath
(
path
)
;
}
return
dir
;
}
}
;
exports
.
HarUtils
=
HarUtils
;
