"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
trace
=
{
log
:
function
(
.
.
.
args
)
{
}
}
;
function
HarCollector
(
options
)
{
this
.
webConsoleClient
=
options
.
webConsoleClient
;
this
.
debuggerClient
=
options
.
debuggerClient
;
this
.
onNetworkEvent
=
this
.
onNetworkEvent
.
bind
(
this
)
;
this
.
onNetworkEventUpdate
=
this
.
onNetworkEventUpdate
.
bind
(
this
)
;
this
.
onRequestHeaders
=
this
.
onRequestHeaders
.
bind
(
this
)
;
this
.
onRequestCookies
=
this
.
onRequestCookies
.
bind
(
this
)
;
this
.
onRequestPostData
=
this
.
onRequestPostData
.
bind
(
this
)
;
this
.
onResponseHeaders
=
this
.
onResponseHeaders
.
bind
(
this
)
;
this
.
onResponseCookies
=
this
.
onResponseCookies
.
bind
(
this
)
;
this
.
onResponseContent
=
this
.
onResponseContent
.
bind
(
this
)
;
this
.
onEventTimings
=
this
.
onEventTimings
.
bind
(
this
)
;
this
.
clear
(
)
;
}
HarCollector
.
prototype
=
{
start
:
function
(
)
{
this
.
debuggerClient
.
on
(
"
serverNetworkEvent
"
this
.
onNetworkEvent
)
;
this
.
debuggerClient
.
on
(
"
networkEventUpdate
"
this
.
onNetworkEventUpdate
)
;
}
stop
:
function
(
)
{
this
.
debuggerClient
.
off
(
"
serverNetworkEvent
"
this
.
onNetworkEvent
)
;
this
.
debuggerClient
.
off
(
"
networkEventUpdate
"
this
.
onNetworkEventUpdate
)
;
}
clear
:
function
(
)
{
this
.
files
=
new
Map
(
)
;
this
.
items
=
[
]
;
this
.
firstRequestStart
=
-
1
;
this
.
lastRequestStart
=
-
1
;
this
.
requests
=
[
]
;
}
waitForHarLoad
:
function
(
)
{
return
new
Promise
(
resolve
=
>
{
this
.
waitForResponses
(
)
.
then
(
(
)
=
>
{
trace
.
log
(
"
HarCollector
.
waitForHarLoad
;
DONE
HAR
loaded
!
"
)
;
resolve
(
this
)
;
}
)
;
}
)
;
}
waitForResponses
:
function
(
)
{
trace
.
log
(
"
HarCollector
.
waitForResponses
;
"
+
this
.
requests
.
length
)
;
return
waitForAll
(
this
.
requests
)
.
then
(
(
)
=
>
{
this
.
pageLoadDeferred
=
this
.
waitForTimeout
(
)
.
then
(
(
)
=
>
{
}
(
)
=
>
{
trace
.
log
(
"
HarCollector
.
waitForResponses
;
NEW
requests
"
+
"
appeared
during
page
timeout
!
"
)
;
return
this
.
waitForResponses
(
)
;
}
)
;
return
this
.
pageLoadDeferred
;
}
)
;
}
waitForTimeout
:
function
(
)
{
const
timeout
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
netmonitor
.
har
.
pageLoadedTimeout
"
)
;
trace
.
log
(
"
HarCollector
.
waitForTimeout
;
"
+
timeout
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
if
(
timeout
<
=
0
)
{
resolve
(
)
;
}
this
.
pageLoadReject
=
reject
;
this
.
pageLoadTimeout
=
setTimeout
(
(
)
=
>
{
trace
.
log
(
"
HarCollector
.
onPageLoadTimeout
;
"
)
;
resolve
(
)
;
}
timeout
)
;
}
)
;
}
resetPageLoadTimeout
:
function
(
)
{
if
(
this
.
pageLoadTimeout
)
{
trace
.
log
(
"
HarCollector
.
resetPageLoadTimeout
;
"
)
;
clearTimeout
(
this
.
pageLoadTimeout
)
;
this
.
pageLoadTimeout
=
null
;
}
if
(
this
.
pageLoadReject
)
{
this
.
pageLoadReject
(
)
;
this
.
pageLoadReject
=
null
;
}
}
getFile
:
function
(
actorId
)
{
return
this
.
files
.
get
(
actorId
)
;
}
getItems
:
function
(
)
{
return
this
.
items
;
}
onNetworkEvent
:
function
(
packet
)
{
if
(
packet
.
from
!
=
this
.
webConsoleClient
.
actor
)
{
return
;
}
trace
.
log
(
"
HarCollector
.
onNetworkEvent
;
"
+
packet
.
type
packet
)
;
const
{
actor
startedDateTime
method
url
isXHR
}
=
packet
.
eventActor
;
const
startTime
=
Date
.
parse
(
startedDateTime
)
;
if
(
this
.
firstRequestStart
=
=
-
1
)
{
this
.
firstRequestStart
=
startTime
;
}
if
(
this
.
lastRequestEnd
<
startTime
)
{
this
.
lastRequestEnd
=
startTime
;
}
let
file
=
this
.
getFile
(
actor
)
;
if
(
file
)
{
console
.
error
(
"
HarCollector
.
onNetworkEvent
;
ERROR
"
+
"
existing
file
conflict
!
"
)
;
return
;
}
file
=
{
startedDeltaMs
:
startTime
-
this
.
firstRequestStart
startedMs
:
startTime
method
:
method
url
:
url
isXHR
:
isXHR
}
;
this
.
files
.
set
(
actor
file
)
;
this
.
items
.
push
(
file
)
;
}
onNetworkEventUpdate
:
function
(
packet
)
{
const
actor
=
packet
.
from
;
const
file
=
this
.
getFile
(
packet
.
from
)
;
if
(
!
file
)
{
return
;
}
trace
.
log
(
"
HarCollector
.
onNetworkEventUpdate
;
"
+
packet
.
updateType
packet
)
;
const
includeResponseBodies
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
netmonitor
.
har
.
includeResponseBodies
"
)
;
let
request
;
switch
(
packet
.
updateType
)
{
case
"
requestHeaders
"
:
request
=
this
.
getData
(
actor
"
getRequestHeaders
"
this
.
onRequestHeaders
)
;
break
;
case
"
requestCookies
"
:
request
=
this
.
getData
(
actor
"
getRequestCookies
"
this
.
onRequestCookies
)
;
break
;
case
"
requestPostData
"
:
request
=
this
.
getData
(
actor
"
getRequestPostData
"
this
.
onRequestPostData
)
;
break
;
case
"
responseHeaders
"
:
request
=
this
.
getData
(
actor
"
getResponseHeaders
"
this
.
onResponseHeaders
)
;
break
;
case
"
responseCookies
"
:
request
=
this
.
getData
(
actor
"
getResponseCookies
"
this
.
onResponseCookies
)
;
break
;
case
"
responseStart
"
:
file
.
httpVersion
=
packet
.
response
.
httpVersion
;
file
.
status
=
packet
.
response
.
status
;
file
.
statusText
=
packet
.
response
.
statusText
;
break
;
case
"
responseContent
"
:
file
.
contentSize
=
packet
.
contentSize
;
file
.
mimeType
=
packet
.
mimeType
;
file
.
transferredSize
=
packet
.
transferredSize
;
if
(
includeResponseBodies
)
{
request
=
this
.
getData
(
actor
"
getResponseContent
"
this
.
onResponseContent
)
;
}
break
;
case
"
eventTimings
"
:
request
=
this
.
getData
(
actor
"
getEventTimings
"
this
.
onEventTimings
)
;
break
;
}
if
(
request
)
{
this
.
requests
.
push
(
request
)
;
}
this
.
resetPageLoadTimeout
(
)
;
}
getData
:
function
(
actor
method
callback
)
{
return
new
Promise
(
resolve
=
>
{
if
(
!
this
.
webConsoleClient
[
method
]
)
{
console
.
error
(
"
HarCollector
.
getData
:
ERROR
Unknown
method
!
"
)
;
resolve
(
)
;
}
const
file
=
this
.
getFile
(
actor
)
;
trace
.
log
(
"
HarCollector
.
getData
;
REQUEST
"
+
method
+
"
"
+
file
.
url
file
)
;
this
.
webConsoleClient
[
method
]
(
actor
response
=
>
{
trace
.
log
(
"
HarCollector
.
getData
;
RESPONSE
"
+
method
+
"
"
+
file
.
url
response
)
;
callback
(
response
)
;
resolve
(
response
)
;
}
)
;
}
)
;
}
onRequestHeaders
:
function
(
response
)
{
const
file
=
this
.
getFile
(
response
.
from
)
;
file
.
requestHeaders
=
response
;
this
.
getLongHeaders
(
response
.
headers
)
;
}
onRequestCookies
:
function
(
response
)
{
const
file
=
this
.
getFile
(
response
.
from
)
;
file
.
requestCookies
=
response
;
this
.
getLongHeaders
(
response
.
cookies
)
;
}
onRequestPostData
:
function
(
response
)
{
trace
.
log
(
"
HarCollector
.
onRequestPostData
;
"
response
)
;
const
file
=
this
.
getFile
(
response
.
from
)
;
file
.
requestPostData
=
response
;
const
text
=
response
.
postData
.
text
;
if
(
typeof
text
=
=
"
object
"
)
{
this
.
getString
(
text
)
.
then
(
value
=
>
{
response
.
postData
.
text
=
value
;
}
)
;
}
}
onResponseHeaders
:
function
(
response
)
{
const
file
=
this
.
getFile
(
response
.
from
)
;
file
.
responseHeaders
=
response
;
this
.
getLongHeaders
(
response
.
headers
)
;
}
onResponseCookies
:
function
(
response
)
{
const
file
=
this
.
getFile
(
response
.
from
)
;
file
.
responseCookies
=
response
;
this
.
getLongHeaders
(
response
.
cookies
)
;
}
onResponseContent
:
function
(
response
)
{
const
file
=
this
.
getFile
(
response
.
from
)
;
file
.
responseContent
=
response
;
const
text
=
response
.
content
.
text
;
if
(
typeof
text
=
=
"
object
"
)
{
this
.
getString
(
text
)
.
then
(
value
=
>
{
response
.
content
.
text
=
value
;
}
)
;
}
}
onEventTimings
:
function
(
response
)
{
const
file
=
this
.
getFile
(
response
.
from
)
;
file
.
eventTimings
=
response
;
file
.
totalTime
=
response
.
totalTime
;
}
getLongHeaders
:
function
(
headers
)
{
for
(
const
header
of
headers
)
{
if
(
typeof
header
.
value
=
=
"
object
"
)
{
try
{
this
.
getString
(
header
.
value
)
.
then
(
value
=
>
{
header
.
value
=
value
;
}
)
;
}
catch
(
error
)
{
trace
.
log
(
"
HarCollector
.
getLongHeaders
;
ERROR
when
getString
"
error
)
;
}
}
}
}
getString
:
function
(
stringGrip
)
{
const
promise
=
this
.
webConsoleClient
.
getString
(
stringGrip
)
;
this
.
requests
.
push
(
promise
)
;
return
promise
;
}
}
;
function
waitForAll
(
promises
)
{
const
clone
=
promises
.
splice
(
0
promises
.
length
)
;
return
Promise
.
all
(
clone
)
.
then
(
(
)
=
>
{
if
(
promises
.
length
)
{
return
waitForAll
(
promises
)
;
}
return
undefined
;
}
)
;
}
exports
.
HarCollector
=
HarCollector
;
