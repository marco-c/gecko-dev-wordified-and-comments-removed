"
use
strict
"
;
const
{
L10N
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
)
;
const
{
contextMenuFormatters
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
context
-
menu
-
utils
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
copyString
"
"
devtools
/
shared
/
platform
/
clipboard
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
showMenu
"
"
devtools
/
client
/
shared
/
components
/
menu
/
utils
"
true
)
;
class
PropertiesViewContextMenu
{
constructor
(
props
=
{
}
)
{
this
.
props
=
props
;
this
.
copyAll
=
this
.
copyAll
.
bind
(
this
)
;
this
.
copyValue
=
this
.
copyValue
.
bind
(
this
)
;
}
open
(
event
=
{
}
selection
{
member
object
}
)
{
const
menuItems
=
[
{
id
:
"
properties
-
view
-
context
-
menu
-
copyvalue
"
label
:
L10N
.
getStr
(
"
netmonitor
.
context
.
copyValue
"
)
accesskey
:
L10N
.
getStr
(
"
netmonitor
.
context
.
copyValue
.
accesskey
"
)
click
:
(
)
=
>
this
.
copyValue
(
member
selection
)
}
{
id
:
"
properties
-
view
-
context
-
menu
-
copyall
"
label
:
L10N
.
getStr
(
"
netmonitor
.
context
.
copyAll
"
)
accesskey
:
L10N
.
getStr
(
"
netmonitor
.
context
.
copyAll
.
accesskey
"
)
click
:
(
)
=
>
this
.
copyAll
(
object
selection
)
}
]
;
showMenu
(
menuItems
{
screenX
:
event
.
screenX
screenY
:
event
.
screenY
}
)
;
}
copyAll
(
object
selection
)
{
let
buffer
=
"
"
;
if
(
selection
.
toString
(
)
!
=
=
"
"
)
{
buffer
=
selection
.
toString
(
)
;
}
else
{
const
{
customFormatters
}
=
this
.
props
;
buffer
=
contextMenuFormatters
.
baseCopyAllFormatter
(
object
)
;
if
(
customFormatters
?
.
copyAllFormatter
)
{
buffer
=
customFormatters
.
copyAllFormatter
(
object
contextMenuFormatters
.
baseCopyAllFormatter
)
;
}
}
try
{
copyString
(
buffer
)
;
}
catch
(
error
)
{
}
}
copyValue
(
member
selection
)
{
let
buffer
=
"
"
;
if
(
selection
.
toString
(
)
!
=
=
"
"
)
{
buffer
=
selection
.
toString
(
)
;
}
else
{
const
{
customFormatters
}
=
this
.
props
;
buffer
=
contextMenuFormatters
.
baseCopyFormatter
(
member
)
;
if
(
customFormatters
?
.
copyFormatter
)
{
buffer
=
customFormatters
.
copyFormatter
(
member
contextMenuFormatters
.
baseCopyFormatter
)
;
}
}
try
{
copyString
(
buffer
)
;
}
catch
(
error
)
{
}
}
}
module
.
exports
=
PropertiesViewContextMenu
;
