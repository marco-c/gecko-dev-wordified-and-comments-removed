"
use
strict
"
;
const
{
createFactory
createElement
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
{
render
unmountComponentAtNode
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
.
mjs
"
)
;
const
Provider
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
redux
.
js
"
)
.
Provider
;
const
ToolboxProvider
=
require
(
"
resource
:
/
/
devtools
/
client
/
framework
/
store
-
provider
.
js
"
)
;
const
{
visibilityHandlerStore
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
redux
/
visibilityHandlerStore
.
js
"
)
;
const
FluentReact
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
.
js
"
)
;
const
App
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
components
/
App
.
js
"
)
;
const
{
FluentL10n
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
fluent
-
l10n
/
fluent
-
l10n
.
js
"
)
;
const
LocalizationProvider
=
createFactory
(
FluentReact
.
LocalizationProvider
)
;
const
{
EVENTS
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
constants
.
js
"
)
;
const
{
getDisplayedRequestById
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
selectors
/
index
.
js
"
)
;
const
SearchDispatcher
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
workers
/
search
/
index
.
js
"
)
;
function
NetMonitorApp
(
api
)
{
this
.
api
=
api
;
}
NetMonitorApp
.
prototype
=
{
async
bootstrap
(
{
toolbox
document
}
)
{
this
.
mount
=
document
.
querySelector
(
"
#
mount
"
)
;
const
openLink
=
link
=
>
{
const
parentDoc
=
toolbox
.
doc
;
const
iframe
=
parentDoc
.
getElementById
(
"
toolbox
-
panel
-
iframe
-
netmonitor
"
)
;
const
{
top
}
=
iframe
.
ownerDocument
.
defaultView
;
top
.
openWebLinkIn
(
link
"
tab
"
)
;
}
;
const
openSplitConsole
=
err
=
>
{
toolbox
.
openSplitConsole
(
)
.
then
(
(
)
=
>
{
toolbox
.
target
.
logErrorInPage
(
err
"
har
"
)
;
}
)
;
}
;
const
{
actions
connector
store
}
=
this
.
api
;
const
sourceMapURLService
=
toolbox
.
sourceMapURLService
;
const
fluentL10n
=
new
FluentL10n
(
)
;
await
fluentL10n
.
init
(
[
"
devtools
/
client
/
netmonitor
.
ftl
"
]
)
;
render
(
createElement
(
Provider
{
store
:
visibilityHandlerStore
(
store
)
}
LocalizationProvider
(
{
bundles
:
fluentL10n
.
getBundles
(
)
}
createElement
(
ToolboxProvider
{
store
:
toolbox
.
store
}
createElement
(
App
{
actions
connector
openLink
openSplitConsole
sourceMapURLService
toolboxDoc
:
toolbox
.
doc
}
)
)
)
)
this
.
mount
)
;
}
destroy
(
)
{
unmountComponentAtNode
(
this
.
mount
)
;
SearchDispatcher
.
stop
(
)
;
this
.
api
.
destroy
(
)
;
}
async
inspectRequest
(
requestId
)
{
const
{
actions
store
}
=
this
.
api
;
return
new
Promise
(
resolve
=
>
{
let
request
=
null
;
const
inspector
=
(
)
=
>
{
request
=
getDisplayedRequestById
(
store
.
getState
(
)
requestId
)
;
if
(
!
request
)
{
actions
.
toggleRequestFilterType
(
"
all
"
)
;
request
=
getDisplayedRequestById
(
store
.
getState
(
)
requestId
)
;
}
if
(
request
)
{
this
.
api
.
off
(
EVENTS
.
REQUEST_ADDED
inspector
)
;
actions
.
selectRequest
(
request
.
id
)
;
resolve
(
)
;
}
}
;
inspector
(
)
;
if
(
!
request
)
{
this
.
api
.
on
(
EVENTS
.
REQUEST_ADDED
inspector
)
;
}
}
)
;
}
}
;
exports
.
NetMonitorApp
=
NetMonitorApp
;
