"
use
strict
"
;
const
CONTENT_MIME_TYPE_ABBREVIATIONS
=
{
"
ecmascript
"
:
"
js
"
"
javascript
"
:
"
js
"
"
x
-
javascript
"
:
"
js
"
}
;
async
function
getFormDataSections
(
headers
uploadHeaders
postData
getLongString
)
{
let
formDataSections
=
[
]
;
let
requestHeaders
=
headers
.
headers
;
let
payloadHeaders
=
uploadHeaders
?
uploadHeaders
.
headers
:
[
]
;
let
allHeaders
=
[
.
.
.
payloadHeaders
.
.
.
requestHeaders
]
;
let
contentTypeHeader
=
allHeaders
.
find
(
e
=
>
{
return
e
.
name
.
toLowerCase
(
)
=
=
"
content
-
type
"
;
}
)
;
let
contentTypeLongString
=
contentTypeHeader
?
contentTypeHeader
.
value
:
"
"
;
let
contentType
=
await
getLongString
(
contentTypeLongString
)
;
if
(
contentType
.
includes
(
"
x
-
www
-
form
-
urlencoded
"
)
)
{
let
postDataLongString
=
postData
.
postData
.
text
;
let
text
=
await
getLongString
(
postDataLongString
)
;
for
(
let
section
of
text
.
split
(
/
\
r
\
n
|
\
r
|
\
n
/
)
)
{
if
(
payloadHeaders
.
every
(
header
=
>
!
section
.
startsWith
(
header
.
name
)
)
)
{
formDataSections
.
push
(
section
)
;
}
}
}
return
formDataSections
;
}
async
function
fetchHeaders
(
headers
getLongString
)
{
for
(
let
{
value
}
of
headers
.
headers
)
{
headers
.
headers
.
value
=
await
getLongString
(
value
)
;
}
return
headers
;
}
function
formDataURI
(
mimeType
encoding
text
)
{
if
(
!
encoding
)
{
encoding
=
"
base64
"
;
text
=
btoa
(
unescape
(
encodeURIComponent
(
text
)
)
)
;
}
return
"
data
:
"
+
mimeType
+
"
;
"
+
encoding
+
"
"
+
text
;
}
function
writeHeaderText
(
headers
)
{
return
headers
.
map
(
(
{
name
value
}
)
=
>
name
+
"
:
"
+
value
)
.
join
(
"
\
n
"
)
;
}
function
decodeUnicodeUrl
(
string
)
{
try
{
return
decodeURIComponent
(
string
)
;
}
catch
(
err
)
{
}
return
string
;
}
function
getAbbreviatedMimeType
(
mimeType
)
{
if
(
!
mimeType
)
{
return
"
"
;
}
let
abbrevType
=
(
mimeType
.
split
(
"
;
"
)
[
0
]
.
split
(
"
/
"
)
[
1
]
|
|
"
"
)
.
split
(
"
+
"
)
[
0
]
;
return
CONTENT_MIME_TYPE_ABBREVIATIONS
[
abbrevType
]
|
|
abbrevType
;
}
function
getUrlBaseName
(
url
)
{
const
pathname
=
(
new
URL
(
url
)
)
.
pathname
;
return
decodeUnicodeUrl
(
pathname
.
replace
(
/
\
S
*
\
/
/
"
"
)
|
|
pathname
|
|
"
/
"
)
;
}
function
getUrlQuery
(
url
)
{
return
(
new
URL
(
url
)
)
.
search
.
replace
(
/
^
\
?
/
"
"
)
;
}
function
getUrlBaseNameWithQuery
(
url
)
{
return
getUrlBaseName
(
url
)
+
decodeUnicodeUrl
(
(
new
URL
(
url
)
)
.
search
)
;
}
function
getUrlHostName
(
url
)
{
return
decodeUnicodeUrl
(
(
new
URL
(
url
)
)
.
hostname
)
;
}
function
getUrlHost
(
url
)
{
return
decodeUnicodeUrl
(
(
new
URL
(
url
)
)
.
host
)
;
}
function
getUrlScheme
(
url
)
{
return
(
new
URL
(
url
)
)
.
protocol
.
replace
(
"
:
"
"
"
)
.
toLowerCase
(
)
;
}
function
getUrlDetails
(
url
)
{
let
baseNameWithQuery
=
getUrlBaseNameWithQuery
(
url
)
;
let
host
=
getUrlHost
(
url
)
;
let
hostname
=
getUrlHostName
(
url
)
;
let
unicodeUrl
=
decodeUnicodeUrl
(
url
)
;
let
scheme
=
getUrlScheme
(
url
)
;
let
isLocal
=
hostname
.
match
(
/
(
.
+
\
.
)
?
localhost
/
)
|
|
hostname
.
match
(
/
^
127
\
.
\
d
{
1
3
}
\
.
\
d
{
1
3
}
\
.
\
d
{
1
3
}
/
)
|
|
hostname
.
match
(
/
\
[
[
0
:
]
+
1
\
]
/
)
;
return
{
baseNameWithQuery
host
scheme
unicodeUrl
isLocal
}
;
}
function
parseQueryString
(
query
)
{
if
(
!
query
)
{
return
null
;
}
return
query
.
replace
(
/
^
[
?
&
]
/
"
"
)
.
split
(
"
&
"
)
.
map
(
e
=
>
{
let
param
=
e
.
split
(
"
=
"
)
;
return
{
name
:
param
[
0
]
?
decodeUnicodeUrl
(
param
[
0
]
)
:
"
"
value
:
param
[
1
]
?
decodeUnicodeUrl
(
param
[
1
]
)
:
"
"
}
;
}
)
;
}
function
parseFormData
(
sections
)
{
if
(
!
sections
)
{
return
null
;
}
return
sections
.
replace
(
/
^
&
/
"
"
)
.
split
(
"
&
"
)
.
map
(
e
=
>
{
let
param
=
e
.
split
(
"
=
"
)
;
return
{
name
:
param
[
0
]
?
decodeUnicodeUrl
(
param
[
0
]
)
:
"
"
value
:
param
[
1
]
?
decodeUnicodeUrl
(
param
[
1
]
)
:
"
"
}
;
}
)
;
}
function
ipToLong
(
ip
)
{
if
(
!
ip
)
{
return
-
1
;
}
let
base
;
let
octets
=
ip
.
split
(
"
.
"
)
;
if
(
octets
.
length
=
=
=
4
)
{
base
=
10
;
}
else
if
(
ip
.
includes
(
"
:
"
)
)
{
let
numberOfZeroSections
=
8
-
ip
.
replace
(
/
^
:
+
|
:
+
/
g
"
"
)
.
split
(
/
:
+
/
g
)
.
length
;
octets
=
ip
.
replace
(
"
:
:
"
:
{
"
0
:
"
.
repeat
(
numberOfZeroSections
)
}
)
.
replace
(
/
^
:
|
:
/
g
"
"
)
.
split
(
"
:
"
)
;
base
=
16
;
}
else
{
return
-
1
;
}
return
octets
.
map
(
(
val
ix
arr
)
=
>
{
return
parseInt
(
val
base
)
*
Math
.
pow
(
256
(
arr
.
length
-
1
)
-
ix
)
;
}
)
.
reduce
(
(
sum
val
)
=
>
{
return
sum
+
val
;
}
0
)
;
}
function
propertiesEqual
(
props
item1
item2
)
{
return
item1
=
=
=
item2
|
|
props
.
every
(
p
=
>
item1
[
p
]
=
=
=
item2
[
p
]
)
;
}
function
getStartTime
(
item
firstRequestStartedMillis
=
0
)
{
return
item
.
startedMillis
-
firstRequestStartedMillis
;
}
function
getEndTime
(
item
firstRequestStartedMillis
=
0
)
{
let
{
startedMillis
totalTime
}
=
item
;
return
startedMillis
+
totalTime
-
firstRequestStartedMillis
;
}
function
getResponseTime
(
item
firstRequestStartedMillis
=
0
)
{
let
{
startedMillis
totalTime
eventTimings
=
{
timings
:
{
}
}
}
=
item
;
return
startedMillis
+
totalTime
-
firstRequestStartedMillis
-
eventTimings
.
timings
.
receive
;
}
module
.
exports
=
{
getFormDataSections
fetchHeaders
formDataURI
writeHeaderText
decodeUnicodeUrl
getAbbreviatedMimeType
getEndTime
getResponseTime
getStartTime
getUrlBaseName
getUrlBaseNameWithQuery
getUrlDetails
getUrlHost
getUrlHostName
getUrlQuery
getUrlScheme
parseQueryString
parseFormData
propertiesEqual
ipToLong
}
;
