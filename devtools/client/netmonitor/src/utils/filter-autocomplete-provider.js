"
use
strict
"
;
const
{
FILTER_FLAGS
SUPPORTED_HTTP_CODES
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
const
{
getRequestPriorityAsText
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
format
-
utils
"
)
;
function
getAutocompleteValuesForFlag
(
flag
request
)
{
let
values
=
[
]
;
let
{
responseCookies
=
{
cookies
:
[
]
}
}
=
request
;
responseCookies
=
responseCookies
.
cookies
|
|
responseCookies
;
switch
(
flag
)
{
case
"
status
-
code
"
:
values
.
push
(
String
(
request
.
status
)
)
;
break
;
case
"
scheme
"
:
values
.
push
(
request
.
urlDetails
.
scheme
)
;
break
;
case
"
domain
"
:
values
.
push
(
request
.
urlDetails
.
host
)
;
break
;
case
"
remote
-
ip
"
:
values
.
push
(
request
.
remoteAddress
)
;
break
;
case
"
cause
"
:
values
.
push
(
request
.
cause
.
type
)
;
break
;
case
"
mime
-
type
"
:
values
.
push
(
(
request
.
mimeType
|
|
"
"
)
.
replace
(
/
;
.
+
/
"
"
)
)
;
break
;
case
"
set
-
cookie
-
name
"
:
values
=
responseCookies
.
map
(
c
=
>
c
.
name
)
;
break
;
case
"
set
-
cookie
-
value
"
:
values
=
responseCookies
.
map
(
c
=
>
c
.
value
)
;
break
;
case
"
priority
"
:
values
.
push
(
getRequestPriorityAsText
(
request
.
priority
)
)
;
break
;
case
"
set
-
cookie
-
domain
"
:
values
=
responseCookies
.
map
(
c
=
>
c
.
hasOwnProperty
(
"
domain
"
)
?
c
.
domain
:
request
.
urlDetails
.
host
)
;
break
;
case
"
is
"
:
values
=
[
"
cached
"
"
from
-
cache
"
"
running
"
]
;
break
;
case
"
has
-
response
-
header
"
:
values
=
request
.
responseHeaders
?
request
.
responseHeaders
.
headers
.
map
(
h
=
>
h
.
name
)
:
[
]
;
break
;
case
"
protocol
"
:
values
.
push
(
request
.
httpVersion
)
;
break
;
case
"
method
"
:
default
:
values
.
push
(
request
[
flag
]
)
;
}
return
values
;
}
function
getLastTokenFlagValues
(
lastToken
requests
)
{
if
(
!
lastToken
.
includes
(
"
:
"
)
)
{
return
[
]
;
}
let
[
flag
typedFlagValue
]
=
lastToken
.
split
(
"
:
"
)
;
let
isNegativeFlag
=
false
;
if
(
flag
.
startsWith
(
"
-
"
)
)
{
flag
=
flag
.
slice
(
1
)
;
isNegativeFlag
=
true
;
}
if
(
!
FILTER_FLAGS
.
includes
(
flag
)
)
{
return
[
]
;
}
let
values
=
[
]
;
for
(
const
request
of
requests
)
{
values
.
push
(
.
.
.
getAutocompleteValuesForFlag
(
flag
request
)
)
;
}
values
=
[
.
.
.
new
Set
(
values
)
]
;
return
values
.
filter
(
value
=
>
value
)
.
filter
(
value
=
>
{
if
(
typedFlagValue
&
&
value
)
{
const
lowerTyped
=
typedFlagValue
.
toLowerCase
(
)
;
const
lowerValue
=
value
.
toLowerCase
(
)
;
return
lowerValue
.
includes
(
lowerTyped
)
&
&
lowerValue
!
=
=
lowerTyped
;
}
return
(
typeof
value
!
=
=
"
undefined
"
&
&
value
!
=
=
"
"
&
&
value
!
=
=
"
undefined
"
)
;
}
)
.
sort
(
)
.
map
(
value
=
>
(
isNegativeFlag
?
-
{
flag
}
:
{
value
}
:
{
flag
}
:
{
value
}
)
)
;
}
function
autocompleteProvider
(
filter
requests
)
{
if
(
!
filter
)
{
return
[
]
;
}
const
negativeAutocompleteList
=
FILTER_FLAGS
.
map
(
item
=
>
-
{
item
}
)
;
const
baseList
=
[
.
.
.
FILTER_FLAGS
.
.
.
negativeAutocompleteList
]
.
map
(
item
=
>
{
item
}
:
)
;
const
tokens
=
filter
.
split
(
/
\
s
+
/
g
)
;
const
lastToken
=
tokens
[
tokens
.
length
-
1
]
;
const
previousTokens
=
tokens
.
slice
(
0
tokens
.
length
-
1
)
;
if
(
!
lastToken
)
{
return
[
]
;
}
let
autocompleteList
;
const
availableValues
=
getLastTokenFlagValues
(
lastToken
requests
)
;
if
(
availableValues
.
length
)
{
autocompleteList
=
availableValues
;
}
else
{
const
isNegativeFlag
=
lastToken
.
startsWith
(
"
-
"
)
;
const
filteredStatusCodes
=
SUPPORTED_HTTP_CODES
.
filter
(
item
=
>
{
item
=
isNegativeFlag
?
item
.
substr
(
1
)
:
item
;
return
item
.
toLowerCase
(
)
.
startsWith
(
lastToken
.
toLowerCase
(
)
)
;
}
)
;
if
(
filteredStatusCodes
.
length
)
{
autocompleteList
=
isNegativeFlag
?
filteredStatusCodes
.
map
(
item
=
>
-
status
-
code
:
{
item
}
)
:
filteredStatusCodes
.
map
(
item
=
>
status
-
code
:
{
item
}
)
;
}
else
{
autocompleteList
=
baseList
.
filter
(
item
=
>
{
return
(
item
.
toLowerCase
(
)
.
startsWith
(
lastToken
.
toLowerCase
(
)
)
&
&
item
.
toLowerCase
(
)
!
=
=
lastToken
.
toLowerCase
(
)
)
;
}
)
;
}
}
return
autocompleteList
.
sort
(
)
.
map
(
item
=
>
(
{
value
:
[
.
.
.
previousTokens
item
]
.
join
(
"
"
)
displayValue
:
item
}
)
)
;
}
module
.
exports
=
{
autocompleteProvider
}
;
