"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
applyMiddleware
createStore
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
batching
=
require
(
"
.
.
/
middleware
/
batching
"
)
;
const
prefs
=
require
(
"
.
.
/
middleware
/
prefs
"
)
;
const
thunk
=
require
(
"
.
.
/
middleware
/
thunk
"
)
;
const
recording
=
require
(
"
.
.
/
middleware
/
recording
"
)
;
const
rootReducer
=
require
(
"
.
.
/
reducers
/
index
"
)
;
const
{
FilterTypes
Filters
}
=
require
(
"
.
.
/
reducers
/
filters
"
)
;
const
{
Requests
}
=
require
(
"
.
.
/
reducers
/
requests
"
)
;
const
{
Sort
}
=
require
(
"
.
.
/
reducers
/
sort
"
)
;
const
{
TimingMarkers
}
=
require
(
"
.
.
/
reducers
/
timing
-
markers
"
)
;
const
{
UI
Columns
}
=
require
(
"
.
.
/
reducers
/
ui
"
)
;
function
configureStore
(
connector
)
{
const
initialState
=
{
filters
:
new
Filters
(
{
requestFilterTypes
:
getFilterState
(
)
}
)
requests
:
new
Requests
(
)
sort
:
new
Sort
(
)
timingMarkers
:
new
TimingMarkers
(
)
ui
:
new
UI
(
{
columns
:
getColumnState
(
)
}
)
}
;
let
middleware
=
applyMiddleware
(
thunk
prefs
batching
recording
(
connector
)
)
;
return
createStore
(
rootReducer
initialState
middleware
)
;
}
function
getColumnState
(
)
{
let
columns
=
new
Columns
(
)
;
let
visibleColumns
=
getPref
(
"
devtools
.
netmonitor
.
visibleColumns
"
)
;
for
(
let
[
col
]
of
columns
)
{
columns
=
columns
.
withMutations
(
(
state
)
=
>
{
state
.
set
(
col
visibleColumns
.
includes
(
col
)
)
;
}
)
;
}
return
columns
;
}
function
getFilterState
(
)
{
let
activeFilters
=
{
}
;
let
filters
=
getPref
(
"
devtools
.
netmonitor
.
filters
"
)
;
filters
.
forEach
(
(
filter
)
=
>
{
activeFilters
[
filter
]
=
true
;
}
)
;
return
new
FilterTypes
(
activeFilters
)
;
}
function
getPref
(
pref
)
{
try
{
return
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
pref
)
)
;
}
catch
(
_
)
{
return
[
]
;
}
}
exports
.
configureStore
=
configureStore
;
