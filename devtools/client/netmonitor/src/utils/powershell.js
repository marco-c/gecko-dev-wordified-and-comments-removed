"
use
strict
"
;
const
IGNORED_HEADERS
=
[
"
connection
"
"
proxy
-
connection
"
"
content
-
length
"
"
expect
"
"
range
"
"
host
"
"
content
-
type
"
"
user
-
agent
"
"
cookie
"
]
;
function
escapeStr
(
str
)
{
return
"
{
str
.
replace
(
/
[
\
"
]
/
g
"
&
"
)
.
replace
(
/
[
^
\
x20
-
\
x7E
]
/
g
char
=
>
"
(
[
char
]
"
+
char
.
charCodeAt
(
0
)
+
"
)
"
)
}
"
;
}
const
PowerShell
=
{
generateCommand
(
url
method
headers
postData
cookies
)
{
const
parameters
=
[
]
;
const
session
=
[
]
;
for
(
const
{
name
value
domain
}
of
cookies
)
{
if
(
!
session
.
length
)
{
session
.
push
(
"
session
=
New
-
Object
Microsoft
.
PowerShell
.
Commands
.
WebRequestSession
"
)
;
}
session
.
push
(
session
.
Cookies
.
Add
(
(
New
-
Object
System
.
Net
.
Cookie
(
{
escapeStr
(
name
)
}
{
escapeStr
(
value
)
}
"
/
"
{
escapeStr
(
domain
|
|
new
URL
(
url
)
.
host
)
}
)
)
)
)
;
}
parameters
.
push
(
-
Uri
{
escapeStr
(
url
)
}
)
;
if
(
method
!
=
=
"
GET
"
)
{
parameters
.
push
(
-
Method
{
method
}
)
;
}
if
(
session
.
length
)
{
parameters
.
push
(
"
-
WebSession
session
"
)
;
}
const
userAgent
=
headers
.
find
(
(
{
name
}
)
=
>
name
.
toLowerCase
(
)
=
=
=
"
user
-
agent
"
)
;
if
(
userAgent
)
{
parameters
.
push
(
"
-
UserAgent
"
+
escapeStr
(
userAgent
.
value
)
)
;
}
const
headersStr
=
[
]
;
for
(
let
{
name
value
}
of
headers
)
{
name
=
name
.
replace
(
/
^
:
/
"
"
)
;
if
(
IGNORED_HEADERS
.
includes
(
name
.
toLowerCase
(
)
)
)
{
continue
;
}
headersStr
.
push
(
{
escapeStr
(
name
)
}
=
{
escapeStr
(
value
)
}
)
;
}
if
(
headersStr
.
length
)
{
parameters
.
push
(
-
Headers
{
\
n
{
headersStr
.
join
(
"
\
n
"
)
}
\
n
}
)
;
}
const
contentType
=
headers
.
find
(
header
=
>
header
.
name
.
toLowerCase
(
)
=
=
=
"
content
-
type
"
)
;
if
(
contentType
)
{
parameters
.
push
(
"
-
ContentType
"
+
escapeStr
(
contentType
.
value
)
)
;
}
const
formData
=
postData
.
text
;
if
(
formData
)
{
const
body
=
/
[
^
\
x20
-
\
x7E
]
/
.
test
(
formData
)
?
"
(
[
System
.
Text
.
Encoding
]
:
:
UTF8
.
GetBytes
(
"
+
escapeStr
(
formData
)
+
"
)
)
"
:
escapeStr
(
formData
)
;
parameters
.
push
(
"
-
Body
"
+
body
)
;
}
return
{
session
.
length
?
session
.
join
(
"
\
n
"
)
.
concat
(
"
\
n
"
)
:
"
"
}
Invoke
-
WebRequest
-
UseBasicParsing
{
parameters
.
join
(
"
\
n
"
)
}
;
}
}
;
exports
.
PowerShell
=
PowerShell
;
