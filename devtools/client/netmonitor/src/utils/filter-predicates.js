"
use
strict
"
;
const
{
isFreetextMatch
}
=
require
(
"
.
/
filter
-
text
-
utils
"
)
;
function
all
(
)
{
return
true
;
}
function
isHtml
(
{
mimeType
}
)
{
return
mimeType
&
&
mimeType
.
includes
(
"
/
html
"
)
;
}
function
isCss
(
{
mimeType
}
)
{
return
mimeType
&
&
mimeType
.
includes
(
"
/
css
"
)
;
}
function
isJs
(
{
mimeType
}
)
{
return
(
mimeType
&
&
(
mimeType
.
includes
(
"
/
ecmascript
"
)
|
|
mimeType
.
includes
(
"
/
javascript
"
)
|
|
mimeType
.
includes
(
"
/
x
-
javascript
"
)
)
)
;
}
function
isXHR
(
item
)
{
return
item
.
isXHR
&
&
!
isWS
(
item
)
;
}
function
isFont
(
{
url
mimeType
}
)
{
return
(
(
mimeType
&
&
(
mimeType
.
includes
(
"
font
/
"
)
|
|
mimeType
.
includes
(
"
/
font
"
)
)
)
|
|
url
.
includes
(
"
.
eot
"
)
|
|
url
.
includes
(
"
.
ttf
"
)
|
|
url
.
includes
(
"
.
otf
"
)
|
|
url
.
includes
(
"
.
woff
"
)
)
;
}
function
isImage
(
{
mimeType
}
)
{
return
mimeType
&
&
mimeType
.
includes
(
"
image
/
"
)
;
}
function
isMedia
(
{
mimeType
}
)
{
return
(
mimeType
&
&
(
mimeType
.
includes
(
"
audio
/
"
)
|
|
mimeType
.
includes
(
"
video
/
"
)
|
|
mimeType
.
includes
(
"
model
/
"
)
|
|
mimeType
=
=
=
"
application
/
vnd
.
apple
.
mpegurl
"
|
|
mimeType
=
=
=
"
application
/
x
-
mpegurl
"
)
)
;
}
function
isWS
(
{
requestHeaders
responseHeaders
cause
}
)
{
if
(
typeof
cause
.
type
=
=
=
"
string
"
&
&
cause
.
type
=
=
=
"
websocket
"
)
{
return
true
;
}
if
(
!
requestHeaders
|
|
!
Array
.
isArray
(
requestHeaders
.
headers
)
)
{
return
false
;
}
let
upgradeHeader
=
requestHeaders
.
headers
.
find
(
header
=
>
{
return
header
.
name
.
toLowerCase
(
)
=
=
"
upgrade
"
;
}
)
;
if
(
!
upgradeHeader
&
&
responseHeaders
&
&
Array
.
isArray
(
responseHeaders
.
headers
)
)
{
upgradeHeader
=
responseHeaders
.
headers
.
find
(
header
=
>
{
return
header
.
name
.
toLowerCase
(
)
=
=
"
upgrade
"
;
}
)
;
}
if
(
!
upgradeHeader
|
|
upgradeHeader
.
value
!
=
"
websocket
"
)
{
return
false
;
}
return
true
;
}
function
isOther
(
item
)
{
const
tests
=
[
isHtml
isCss
isJs
isXHR
isFont
isImage
isMedia
isWS
]
;
return
tests
.
every
(
is
=
>
!
is
(
item
)
)
;
}
module
.
exports
=
{
Filters
:
{
all
:
all
html
:
isHtml
css
:
isCss
js
:
isJs
xhr
:
isXHR
fonts
:
isFont
images
:
isImage
media
:
isMedia
ws
:
isWS
other
:
isOther
}
isFreetextMatch
}
;
