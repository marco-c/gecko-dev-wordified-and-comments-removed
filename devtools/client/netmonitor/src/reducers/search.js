"
use
strict
"
;
const
{
ADD_SEARCH_QUERY
ADD_SEARCH_RESULT
CLEAR_SEARCH_RESULTS
ADD_ONGOING_SEARCH
OPEN_SEARCH
CLOSE_SEARCH
SEARCH_STATUS
UPDATE_SEARCH_STATUS
SET_TARGET_SEARCH_RESULT
}
=
require
(
"
.
.
/
constants
"
)
;
function
Search
(
overrideParams
=
{
}
)
{
return
Object
.
assign
(
{
query
:
"
"
results
:
[
]
ongoingSearch
:
null
status
:
SEARCH_STATUS
.
INITIAL
panelOpen
:
false
targetSearchResult
:
null
}
overrideParams
)
;
}
function
search
(
state
=
new
Search
(
)
action
)
{
switch
(
action
.
type
)
{
case
ADD_SEARCH_QUERY
:
return
onAddSearchQuery
(
state
action
)
;
case
ADD_SEARCH_RESULT
:
return
onAddSearchResult
(
state
action
)
;
case
CLEAR_SEARCH_RESULTS
:
return
onClearSearchResults
(
state
)
;
case
ADD_ONGOING_SEARCH
:
return
onAddOngoingSearch
(
state
action
)
;
case
CLOSE_SEARCH
:
return
onCloseSearch
(
state
)
;
case
OPEN_SEARCH
:
return
onOpenSearch
(
state
)
;
case
UPDATE_SEARCH_STATUS
:
return
onUpdateSearchStatus
(
state
action
)
;
case
SET_TARGET_SEARCH_RESULT
:
return
onSetTargetSearchResult
(
state
action
)
;
}
return
state
;
}
function
onAddSearchQuery
(
state
action
)
{
return
{
.
.
.
state
query
:
action
.
query
}
;
}
function
onAddSearchResult
(
state
action
)
{
const
{
resource
}
=
action
;
const
results
=
state
.
results
.
slice
(
)
;
results
.
push
(
{
resource
results
:
action
.
result
}
)
;
return
{
.
.
.
state
results
}
;
}
function
onClearSearchResults
(
state
)
{
return
{
.
.
.
state
results
:
[
]
}
;
}
function
onAddOngoingSearch
(
state
action
)
{
return
{
.
.
.
state
ongoingSearch
:
action
.
ongoingSearch
}
;
}
function
onCloseSearch
(
state
)
{
return
{
.
.
.
state
panelOpen
:
false
}
;
}
function
onOpenSearch
(
state
)
{
return
{
.
.
.
state
panelOpen
:
true
}
;
}
function
onUpdateSearchStatus
(
state
action
)
{
return
{
.
.
.
state
status
:
action
.
status
}
;
}
function
onSetTargetSearchResult
(
state
action
)
{
return
{
.
.
.
state
targetSearchResult
:
action
.
searchResult
}
;
}
module
.
exports
=
{
Search
search
}
;
