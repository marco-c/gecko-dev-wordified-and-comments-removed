"
use
strict
"
;
const
{
getUrlDetails
processNetworkUpdates
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
request
-
utils
"
)
;
const
{
ADD_REQUEST
SET_EVENT_STREAM_FLAG
CLEAR_REQUESTS
CLONE_REQUEST
CLONE_SELECTED_REQUEST
OPEN_NETWORK_DETAILS
REMOVE_SELECTED_CUSTOM_REQUEST
RIGHT_CLICK_REQUEST
SELECT_REQUEST
SEND_CUSTOM_REQUEST
TOGGLE_RECORDING
UPDATE_REQUEST
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
function
Requests
(
)
{
return
{
requests
:
[
]
selectedId
:
null
preselectedId
:
null
recording
:
true
firstStartedMs
:
+
Infinity
lastEndedMs
:
-
Infinity
}
;
}
function
requestsReducer
(
state
=
Requests
(
)
action
)
{
switch
(
action
.
type
)
{
case
ADD_REQUEST
:
{
return
addRequest
(
state
action
)
;
}
case
UPDATE_REQUEST
:
{
return
updateRequest
(
state
action
)
;
}
case
SET_EVENT_STREAM_FLAG
:
{
return
setEventStreamFlag
(
state
action
)
;
}
case
CLEAR_REQUESTS
:
{
return
{
.
.
.
Requests
(
)
recording
:
state
.
recording
}
;
}
case
SELECT_REQUEST
:
{
const
clickedRequest
=
state
.
requests
.
find
(
needle
=
>
needle
.
id
=
=
=
action
.
id
)
;
return
{
.
.
.
state
clickedRequest
selectedId
:
action
.
id
}
;
}
case
CLONE_REQUEST
:
{
return
cloneRequest
(
state
action
.
id
)
;
}
case
CLONE_SELECTED_REQUEST
:
{
return
cloneRequest
(
state
state
.
selectedId
)
;
}
case
RIGHT_CLICK_REQUEST
:
{
const
clickedRequest
=
state
.
requests
.
find
(
needle
=
>
needle
.
id
=
=
=
action
.
id
)
;
return
{
.
.
.
state
clickedRequest
}
;
}
case
REMOVE_SELECTED_CUSTOM_REQUEST
:
{
return
closeCustomRequest
(
state
)
;
}
case
SEND_CUSTOM_REQUEST
:
{
return
closeCustomRequest
(
{
.
.
.
state
preselectedId
:
action
.
id
}
)
;
}
case
TOGGLE_RECORDING
:
{
return
{
.
.
.
state
recording
:
!
state
.
recording
}
;
}
case
OPEN_NETWORK_DETAILS
:
{
const
nextState
=
{
.
.
.
state
}
;
if
(
!
action
.
open
)
{
nextState
.
selectedId
=
null
;
return
nextState
;
}
if
(
!
state
.
selectedId
&
&
action
.
defaultSelectedId
)
{
nextState
.
selectedId
=
action
.
defaultSelectedId
;
return
nextState
;
}
return
state
;
}
default
:
return
state
;
}
}
function
addRequest
(
state
action
)
{
const
nextState
=
{
.
.
.
state
}
;
const
newRequest
=
{
id
:
action
.
id
.
.
.
action
.
data
urlDetails
:
getUrlDetails
(
action
.
data
.
url
)
}
;
nextState
.
requests
=
[
.
.
.
state
.
requests
newRequest
]
;
const
{
startedMs
}
=
action
.
data
;
if
(
startedMs
<
state
.
firstStartedMs
)
{
nextState
.
firstStartedMs
=
startedMs
;
}
if
(
startedMs
>
state
.
lastEndedMs
)
{
nextState
.
lastEndedMs
=
startedMs
;
}
if
(
state
.
preselectedId
&
&
state
.
preselectedId
=
=
=
action
.
id
)
{
nextState
.
selectedId
=
state
.
selectedId
|
|
state
.
preselectedId
;
nextState
.
preselectedId
=
null
;
}
return
nextState
;
}
function
updateRequest
(
state
action
)
{
const
{
requests
lastEndedMs
}
=
state
;
const
{
id
}
=
action
;
const
index
=
requests
.
findIndex
(
needle
=
>
needle
.
id
=
=
=
id
)
;
if
(
index
=
=
=
-
1
)
{
return
state
;
}
const
request
=
requests
[
index
]
;
const
nextRequest
=
{
.
.
.
request
.
.
.
processNetworkUpdates
(
action
.
data
)
}
;
const
requestEndTime
=
nextRequest
.
startedMs
+
(
nextRequest
.
eventTimings
?
nextRequest
.
eventTimings
.
totalTime
:
0
)
;
const
nextRequests
=
[
.
.
.
requests
]
;
nextRequests
[
index
]
=
nextRequest
;
return
{
.
.
.
state
requests
:
nextRequests
lastEndedMs
:
requestEndTime
>
lastEndedMs
?
requestEndTime
:
lastEndedMs
}
;
}
function
setEventStreamFlag
(
state
action
)
{
const
{
requests
}
=
state
;
const
{
id
}
=
action
;
const
index
=
requests
.
findIndex
(
needle
=
>
needle
.
id
=
=
=
id
)
;
if
(
index
=
=
=
-
1
)
{
return
state
;
}
const
request
=
requests
[
index
]
;
const
nextRequest
=
{
.
.
.
request
isEventStream
:
true
}
;
const
nextRequests
=
[
.
.
.
requests
]
;
nextRequests
[
index
]
=
nextRequest
;
return
{
.
.
.
state
requests
:
nextRequests
}
;
}
function
cloneRequest
(
state
id
)
{
const
{
requests
}
=
state
;
if
(
!
id
)
{
return
state
;
}
const
clonedRequest
=
requests
.
find
(
needle
=
>
needle
.
id
=
=
=
id
)
;
if
(
!
clonedRequest
)
{
return
state
;
}
const
newRequest
=
{
id
:
clonedRequest
.
id
+
"
-
clone
"
method
:
clonedRequest
.
method
cause
:
clonedRequest
.
cause
url
:
clonedRequest
.
url
urlDetails
:
clonedRequest
.
urlDetails
requestHeaders
:
clonedRequest
.
requestHeaders
requestPostData
:
clonedRequest
.
requestPostData
requestPostDataAvailable
:
clonedRequest
.
requestPostDataAvailable
requestHeadersAvailable
:
clonedRequest
.
requestHeadersAvailable
isCustom
:
true
}
;
return
{
.
.
.
state
requests
:
[
.
.
.
requests
newRequest
]
selectedId
:
newRequest
.
id
preselectedId
:
id
}
;
}
function
closeCustomRequest
(
state
)
{
const
{
requests
selectedId
preselectedId
}
=
state
;
if
(
!
selectedId
)
{
return
state
;
}
const
removedRequest
=
requests
.
find
(
needle
=
>
needle
.
id
=
=
=
selectedId
)
;
const
hasPreselectedId
=
preselectedId
&
&
requests
.
find
(
needle
=
>
needle
.
id
=
=
=
preselectedId
)
;
return
{
.
.
.
state
[
removedRequest
?
.
isCustom
&
&
"
requests
"
]
:
requests
.
filter
(
item
=
>
item
.
id
!
=
=
selectedId
)
preselectedId
:
hasPreselectedId
?
null
:
preselectedId
selectedId
:
hasPreselectedId
?
preselectedId
:
null
}
;
}
module
.
exports
=
{
Requests
requestsReducer
}
;
