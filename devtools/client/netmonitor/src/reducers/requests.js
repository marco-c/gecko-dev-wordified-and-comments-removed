"
use
strict
"
;
const
{
getUrlDetails
processNetworkUpdates
}
=
require
(
"
.
.
/
utils
/
request
-
utils
"
)
;
const
{
ADD_REQUEST
CLEAR_REQUESTS
CLONE_SELECTED_REQUEST
OPEN_NETWORK_DETAILS
REMOVE_SELECTED_CUSTOM_REQUEST
SELECT_REQUEST
SEND_CUSTOM_REQUEST
TOGGLE_RECORDING
UPDATE_REQUEST
}
=
require
(
"
.
.
/
constants
"
)
;
function
Requests
(
)
{
return
{
requests
:
new
Map
(
)
selectedId
:
null
preselectedId
:
null
recording
:
true
firstStartedMillis
:
+
Infinity
lastEndedMillis
:
-
Infinity
}
;
}
function
requestsReducer
(
state
=
Requests
(
)
action
)
{
switch
(
action
.
type
)
{
case
ADD_REQUEST
:
{
const
nextState
=
{
.
.
.
state
}
;
const
newRequest
=
{
id
:
action
.
id
.
.
.
action
.
data
urlDetails
:
getUrlDetails
(
action
.
data
.
url
)
}
;
nextState
.
requests
=
mapSet
(
state
.
requests
newRequest
.
id
newRequest
)
;
const
{
startedMillis
}
=
action
.
data
;
if
(
startedMillis
<
state
.
firstStartedMillis
)
{
nextState
.
firstStartedMillis
=
startedMillis
;
}
if
(
startedMillis
>
state
.
lastEndedMillis
)
{
nextState
.
lastEndedMillis
=
startedMillis
;
}
if
(
state
.
preselectedId
&
&
state
.
preselectedId
=
=
=
action
.
id
)
{
nextState
.
selectedId
=
state
.
selectedId
|
|
state
.
preselectedId
;
nextState
.
preselectedId
=
null
;
}
return
nextState
;
}
case
UPDATE_REQUEST
:
{
const
{
requests
lastEndedMillis
}
=
state
;
let
request
=
requests
.
get
(
action
.
id
)
;
if
(
!
request
)
{
return
state
;
}
request
=
{
.
.
.
request
.
.
.
processNetworkUpdates
(
action
.
data
request
)
}
;
const
requestEndTime
=
request
.
startedMillis
+
(
request
.
eventTimings
?
request
.
eventTimings
.
totalTime
:
0
)
;
return
{
.
.
.
state
requests
:
mapSet
(
state
.
requests
action
.
id
request
)
lastEndedMillis
:
requestEndTime
>
lastEndedMillis
?
requestEndTime
:
lastEndedMillis
}
;
}
case
CLEAR_REQUESTS
:
{
return
{
.
.
.
Requests
(
)
recording
:
state
.
recording
}
;
}
case
SELECT_REQUEST
:
{
return
{
.
.
.
state
selectedId
:
action
.
id
}
;
}
case
CLONE_SELECTED_REQUEST
:
{
const
{
requests
selectedId
}
=
state
;
if
(
!
selectedId
)
{
return
state
;
}
const
clonedRequest
=
requests
.
get
(
selectedId
)
;
if
(
!
clonedRequest
)
{
return
state
;
}
const
newRequest
=
{
id
:
clonedRequest
.
id
+
"
-
clone
"
method
:
clonedRequest
.
method
url
:
clonedRequest
.
url
urlDetails
:
clonedRequest
.
urlDetails
requestHeaders
:
clonedRequest
.
requestHeaders
requestPostData
:
clonedRequest
.
requestPostData
requestPostDataAvailable
:
clonedRequest
.
requestPostDataAvailable
isCustom
:
true
}
;
return
{
.
.
.
state
requests
:
mapSet
(
requests
newRequest
.
id
newRequest
)
selectedId
:
newRequest
.
id
}
;
}
case
REMOVE_SELECTED_CUSTOM_REQUEST
:
{
return
closeCustomRequest
(
state
)
;
}
case
SEND_CUSTOM_REQUEST
:
{
return
closeCustomRequest
(
{
.
.
.
state
preselectedId
:
action
.
id
}
)
;
}
case
TOGGLE_RECORDING
:
{
return
{
.
.
.
state
recording
:
!
state
.
recording
}
;
}
case
OPEN_NETWORK_DETAILS
:
{
const
nextState
=
{
.
.
.
state
}
;
if
(
!
action
.
open
)
{
nextState
.
selectedId
=
null
;
return
nextState
;
}
if
(
!
state
.
selectedId
&
&
action
.
defaultSelectedId
)
{
nextState
.
selectedId
=
action
.
defaultSelectedId
;
return
nextState
;
}
return
state
;
}
default
:
return
state
;
}
}
function
closeCustomRequest
(
state
)
{
const
{
requests
selectedId
preselectedId
}
=
state
;
if
(
!
selectedId
)
{
return
state
;
}
const
removedRequest
=
requests
.
get
(
selectedId
)
;
if
(
!
removedRequest
|
|
!
removedRequest
.
isCustom
)
{
return
state
;
}
const
hasPreselectedId
=
preselectedId
&
&
requests
.
has
(
preselectedId
)
;
return
{
.
.
.
state
requests
:
mapDelete
(
requests
selectedId
)
preselectedId
:
hasPreselectedId
?
null
:
preselectedId
selectedId
:
hasPreselectedId
?
preselectedId
:
null
}
;
}
function
mapSet
(
map
key
value
)
{
const
newMap
=
new
Map
(
map
)
;
return
newMap
.
set
(
key
value
)
;
}
function
mapDelete
(
map
key
)
{
const
newMap
=
new
Map
(
map
)
;
newMap
.
delete
(
key
)
;
return
newMap
;
}
module
.
exports
=
{
Requests
requestsReducer
}
;
