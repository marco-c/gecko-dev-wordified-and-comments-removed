"
use
strict
"
;
const
{
ADD_BLOCKED_URL
DISABLE_MATCHING_URLS
TOGGLE_BLOCKED_URL
UPDATE_BLOCKED_URL
REMOVE_BLOCKED_URL
TOGGLE_BLOCKING_ENABLED
}
=
require
(
"
.
.
/
constants
"
)
;
function
RequestBlocking
(
)
{
return
{
blockedUrls
:
[
]
blockingEnabled
:
true
}
;
}
function
requestBlockingReducer
(
state
=
RequestBlocking
(
)
action
)
{
switch
(
action
.
type
)
{
case
ADD_BLOCKED_URL
:
return
addBlockedUrl
(
state
action
)
;
case
REMOVE_BLOCKED_URL
:
return
removeBlockedUrl
(
state
action
)
;
case
UPDATE_BLOCKED_URL
:
return
updateBlockedUrl
(
state
action
)
;
case
TOGGLE_BLOCKED_URL
:
return
toggleBlockedUrl
(
state
action
)
;
case
TOGGLE_BLOCKING_ENABLED
:
return
toggleBlockingEnabled
(
state
action
)
;
case
DISABLE_MATCHING_URLS
:
return
disableOrRemoveMatchingUrls
(
state
action
)
;
default
:
return
state
;
}
}
function
toggleBlockingEnabled
(
state
action
)
{
return
{
.
.
.
state
blockingEnabled
:
action
.
enabled
}
;
}
function
addBlockedUrl
(
state
action
)
{
const
uniqueUrls
=
[
.
.
.
new
Set
(
action
.
url
.
split
(
"
"
)
)
]
.
map
(
url
=
>
url
.
trim
(
)
)
;
const
newUrls
=
uniqueUrls
.
filter
(
url
=
>
url
&
&
!
state
.
blockedUrls
.
some
(
item
=
>
item
.
url
=
=
=
url
)
)
.
map
(
url
=
>
(
{
url
enabled
:
true
}
)
)
;
const
blockedUrls
=
[
.
.
.
state
.
blockedUrls
.
.
.
newUrls
]
;
return
{
.
.
.
state
blockedUrls
}
;
}
function
removeBlockedUrl
(
state
action
)
{
return
{
.
.
.
state
blockedUrls
:
state
.
blockedUrls
.
filter
(
item
=
>
item
.
url
!
=
action
.
url
)
}
;
}
function
updateBlockedUrl
(
state
action
)
{
const
{
oldUrl
newUrl
}
=
action
;
const
blockedUrls
=
state
.
blockedUrls
.
map
(
item
=
>
{
if
(
item
.
url
=
=
=
oldUrl
)
{
return
{
.
.
.
item
url
:
newUrl
}
;
}
return
item
;
}
)
;
return
{
.
.
.
state
blockedUrls
}
;
}
function
toggleBlockedUrl
(
state
action
)
{
const
blockedUrls
=
state
.
blockedUrls
.
map
(
item
=
>
{
if
(
item
.
url
=
=
=
action
.
url
)
{
return
{
.
.
.
item
enabled
:
!
item
.
enabled
}
;
}
return
item
;
}
)
;
return
{
.
.
.
state
blockedUrls
}
;
}
function
disableOrRemoveMatchingUrls
(
state
action
)
{
const
blockedUrls
=
state
.
blockedUrls
.
map
(
item
=
>
{
if
(
action
.
url
=
=
=
item
.
url
)
{
return
null
;
}
if
(
action
.
url
.
includes
(
item
.
url
)
)
{
return
{
.
.
.
item
enabled
:
false
}
;
}
return
item
;
}
)
.
filter
(
Boolean
)
;
return
{
.
.
.
state
blockedUrls
}
;
}
module
.
exports
=
requestBlockingReducer
;
