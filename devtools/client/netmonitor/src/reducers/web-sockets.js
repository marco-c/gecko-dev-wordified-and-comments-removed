"
use
strict
"
;
const
{
SELECT_REQUEST
WS_ADD_FRAME
WS_SELECT_FRAME
WS_OPEN_FRAME_DETAILS
WS_CLEAR_FRAMES
WS_TOGGLE_FRAME_FILTER_TYPE
WS_SET_REQUEST_FILTER_TEXT
WS_TOGGLE_COLUMN
WS_RESET_COLUMNS
WS_CLOSE_CONNECTION
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
const
defaultColumnsState
=
{
data
:
true
size
:
false
opCode
:
false
maskBit
:
false
finBit
:
false
time
:
true
}
;
function
getWebSocketsDefaultColumnsState
(
)
{
return
Object
.
assign
(
{
}
defaultColumnsState
)
;
}
function
WebSockets
(
initialState
=
{
}
)
{
return
{
frames
:
new
Map
(
)
frameFilterText
:
"
"
frameFilterType
:
"
all
"
selectedFrame
:
null
frameDetailsOpen
:
false
currentChannelId
:
null
closedConnections
:
new
Map
(
)
columns
:
getWebSocketsDefaultColumnsState
(
)
.
.
.
initialState
}
;
}
function
setChannelId
(
state
action
)
{
return
{
.
.
.
state
currentChannelId
:
action
.
httpChannelId
frameFilterText
:
"
"
}
;
}
function
addFrame
(
state
action
)
{
const
{
httpChannelId
}
=
action
;
const
nextState
=
{
.
.
.
state
}
;
const
newFrame
=
{
httpChannelId
.
.
.
action
.
data
}
;
nextState
.
frames
=
mapSet
(
nextState
.
frames
newFrame
.
httpChannelId
newFrame
)
;
return
nextState
;
}
function
selectFrame
(
state
action
)
{
return
{
.
.
.
state
selectedFrame
:
action
.
frame
frameDetailsOpen
:
action
.
open
}
;
}
function
openFrameDetails
(
state
action
)
{
return
{
.
.
.
state
frameDetailsOpen
:
action
.
open
}
;
}
function
clearFrames
(
state
)
{
const
nextState
=
{
.
.
.
state
}
;
nextState
.
frames
=
new
Map
(
nextState
.
frames
)
;
nextState
.
frames
.
delete
(
nextState
.
currentChannelId
)
;
return
{
.
.
.
WebSockets
(
)
frames
:
nextState
.
frames
currentChannelId
:
nextState
.
currentChannelId
frameFilterType
:
nextState
.
frameFilterType
frameFilterText
:
nextState
.
frameFilterText
}
;
}
function
toggleFrameFilterType
(
state
action
)
{
return
{
.
.
.
state
frameFilterType
:
action
.
filter
}
;
}
function
setFrameFilterText
(
state
action
)
{
return
{
.
.
.
state
frameFilterText
:
action
.
text
}
;
}
function
toggleColumn
(
state
action
)
{
const
{
column
}
=
action
;
return
{
.
.
.
state
columns
:
{
.
.
.
state
.
columns
[
column
]
:
!
state
.
columns
[
column
]
}
}
;
}
function
resetColumns
(
state
)
{
return
{
.
.
.
state
columns
:
getWebSocketsDefaultColumnsState
(
)
}
;
}
function
closeConnection
(
state
action
)
{
const
{
httpChannelId
code
reason
}
=
action
;
const
nextState
=
{
.
.
.
state
}
;
nextState
.
closedConnections
.
set
(
httpChannelId
{
code
reason
}
)
;
return
nextState
;
}
function
mapSet
(
map
key
value
)
{
const
newMap
=
new
Map
(
map
)
;
if
(
newMap
.
has
(
key
)
)
{
const
framesArray
=
[
.
.
.
newMap
.
get
(
key
)
]
;
framesArray
.
push
(
value
)
;
newMap
.
set
(
key
framesArray
)
;
return
newMap
;
}
return
newMap
.
set
(
key
[
value
]
)
;
}
function
webSockets
(
state
=
WebSockets
(
)
action
)
{
switch
(
action
.
type
)
{
case
SELECT_REQUEST
:
return
setChannelId
(
state
action
)
;
case
WS_ADD_FRAME
:
return
addFrame
(
state
action
)
;
case
WS_SELECT_FRAME
:
return
selectFrame
(
state
action
)
;
case
WS_OPEN_FRAME_DETAILS
:
return
openFrameDetails
(
state
action
)
;
case
WS_CLEAR_FRAMES
:
return
clearFrames
(
state
)
;
case
WS_TOGGLE_FRAME_FILTER_TYPE
:
return
toggleFrameFilterType
(
state
action
)
;
case
WS_SET_REQUEST_FILTER_TEXT
:
return
setFrameFilterText
(
state
action
)
;
case
WS_TOGGLE_COLUMN
:
return
toggleColumn
(
state
action
)
;
case
WS_RESET_COLUMNS
:
return
resetColumns
(
state
)
;
case
WS_CLOSE_CONNECTION
:
return
closeConnection
(
state
action
)
;
default
:
return
state
;
}
}
module
.
exports
=
{
WebSockets
webSockets
getWebSocketsDefaultColumnsState
}
;
