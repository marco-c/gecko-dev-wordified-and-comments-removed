"
use
strict
"
;
const
{
SELECT_REQUEST
MSG_ADD
MSG_SELECT
MSG_OPEN_DETAILS
MSG_CLEAR
MSG_TOGGLE_FILTER_TYPE
MSG_TOGGLE_CONTROL
MSG_SET_FILTER_TEXT
MSG_TOGGLE_COLUMN
MSG_RESET_COLUMNS
MSG_CLOSE_CONNECTION
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
const
defaultColumnsState
=
{
data
:
true
size
:
false
opCode
:
false
maskBit
:
false
finBit
:
false
time
:
true
}
;
function
getMessageDefaultColumnsState
(
)
{
return
Object
.
assign
(
{
}
defaultColumnsState
)
;
}
function
Messages
(
initialState
=
{
}
)
{
return
{
messages
:
new
Map
(
)
messageFilterText
:
"
"
messageFilterType
:
"
all
"
showControlFrames
:
false
selectedMessage
:
null
messageDetailsOpen
:
false
currentChannelId
:
null
closedConnections
:
new
Map
(
)
columns
:
getMessageDefaultColumnsState
(
)
.
.
.
initialState
}
;
}
function
setChannelId
(
state
action
)
{
return
{
.
.
.
state
currentChannelId
:
action
.
httpChannelId
messageFilterText
:
"
"
}
;
}
function
addMessage
(
state
action
)
{
const
{
httpChannelId
}
=
action
;
const
nextState
=
{
.
.
.
state
}
;
const
newMessage
=
{
httpChannelId
.
.
.
action
.
data
}
;
nextState
.
messages
=
mapSet
(
nextState
.
messages
newMessage
.
httpChannelId
newMessage
)
;
return
nextState
;
}
function
selectMessage
(
state
action
)
{
return
{
.
.
.
state
selectedMessage
:
action
.
message
messageDetailsOpen
:
action
.
open
}
;
}
function
openMessageDetails
(
state
action
)
{
return
{
.
.
.
state
messageDetailsOpen
:
action
.
open
}
;
}
function
clearMessages
(
state
)
{
const
nextState
=
{
.
.
.
state
}
;
nextState
.
messages
=
new
Map
(
nextState
.
messages
)
;
nextState
.
messages
.
delete
(
nextState
.
currentChannelId
)
;
return
{
.
.
.
Messages
(
)
messages
:
nextState
.
messages
currentChannelId
:
nextState
.
currentChannelId
columns
:
nextState
.
columns
messageFilterType
:
nextState
.
messageFilterType
messageFilterText
:
nextState
.
messageFilterText
showControlFrames
:
nextState
.
showControlFrames
}
;
}
function
toggleMessageFilterType
(
state
action
)
{
return
{
.
.
.
state
messageFilterType
:
action
.
filter
}
;
}
function
toggleControlFrames
(
state
action
)
{
return
{
.
.
.
state
showControlFrames
:
!
state
.
showControlFrames
}
;
}
function
setMessageFilterText
(
state
action
)
{
return
{
.
.
.
state
messageFilterText
:
action
.
text
}
;
}
function
toggleColumn
(
state
action
)
{
const
{
column
}
=
action
;
return
{
.
.
.
state
columns
:
{
.
.
.
state
.
columns
[
column
]
:
!
state
.
columns
[
column
]
}
}
;
}
function
resetColumns
(
state
)
{
return
{
.
.
.
state
columns
:
getMessageDefaultColumnsState
(
)
}
;
}
function
closeConnection
(
state
action
)
{
const
{
httpChannelId
code
reason
}
=
action
;
const
nextState
=
{
.
.
.
state
}
;
nextState
.
closedConnections
.
set
(
httpChannelId
{
code
reason
}
)
;
return
nextState
;
}
function
mapSet
(
map
key
value
)
{
const
newMap
=
new
Map
(
map
)
;
if
(
newMap
.
has
(
key
)
)
{
const
messagesArray
=
[
.
.
.
newMap
.
get
(
key
)
]
;
messagesArray
.
push
(
value
)
;
newMap
.
set
(
key
messagesArray
)
;
return
newMap
;
}
return
newMap
.
set
(
key
[
value
]
)
;
}
function
messages
(
state
=
Messages
(
)
action
)
{
switch
(
action
.
type
)
{
case
SELECT_REQUEST
:
return
setChannelId
(
state
action
)
;
case
MSG_ADD
:
return
addMessage
(
state
action
)
;
case
MSG_SELECT
:
return
selectMessage
(
state
action
)
;
case
MSG_OPEN_DETAILS
:
return
openMessageDetails
(
state
action
)
;
case
MSG_CLEAR
:
return
clearMessages
(
state
)
;
case
MSG_TOGGLE_FILTER_TYPE
:
return
toggleMessageFilterType
(
state
action
)
;
case
MSG_TOGGLE_CONTROL
:
return
toggleControlFrames
(
state
action
)
;
case
MSG_SET_FILTER_TEXT
:
return
setMessageFilterText
(
state
action
)
;
case
MSG_TOGGLE_COLUMN
:
return
toggleColumn
(
state
action
)
;
case
MSG_RESET_COLUMNS
:
return
resetColumns
(
state
)
;
case
MSG_CLOSE_CONNECTION
:
return
closeConnection
(
state
action
)
;
default
:
return
state
;
}
}
module
.
exports
=
{
Messages
messages
getMessageDefaultColumnsState
}
;
