"
use
strict
"
;
const
{
TOGGLE_REQUEST_FILTER_TYPE
ENABLE_REQUEST_FILTER_TYPE_ONLY
SET_REQUEST_FILTER_TEXT
SELECT_DETAILS_PANEL_TAB
SEND_CUSTOM_REQUEST
ENABLE_PERSISTENT_LOGS
MSG_SELECT
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
constants
.
js
"
)
;
const
{
CHANGE_NETWORK_THROTTLING
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
throttling
/
actions
.
js
"
)
;
function
eventTelemetryMiddleware
(
connector
telemetry
)
{
return
store
=
>
next
=
>
action
=
>
{
const
oldState
=
store
.
getState
(
)
;
const
res
=
next
(
action
)
;
const
toolbox
=
connector
.
getToolbox
(
)
;
if
(
!
toolbox
)
{
return
res
;
}
if
(
action
.
skipTelemetry
)
{
return
res
;
}
const
state
=
store
.
getState
(
)
;
const
filterChangeActions
=
[
TOGGLE_REQUEST_FILTER_TYPE
ENABLE_REQUEST_FILTER_TYPE_ONLY
SET_REQUEST_FILTER_TEXT
]
;
if
(
filterChangeActions
.
includes
(
action
.
type
)
)
{
filterChange
(
{
action
state
oldState
telemetry
}
)
;
}
if
(
action
.
type
=
=
SELECT_DETAILS_PANEL_TAB
)
{
sidePanelChange
(
{
state
oldState
telemetry
}
)
;
}
if
(
action
.
type
=
=
SEND_CUSTOM_REQUEST
)
{
sendCustomRequest
(
{
telemetry
}
)
;
}
if
(
action
.
type
=
=
CHANGE_NETWORK_THROTTLING
)
{
throttlingChange
(
{
action
telemetry
}
)
;
}
if
(
action
.
type
=
=
ENABLE_PERSISTENT_LOGS
)
{
persistenceChange
(
{
telemetry
state
}
)
;
}
if
(
action
.
type
=
=
MSG_SELECT
)
{
selectMessage
(
{
telemetry
}
)
;
}
return
res
;
}
;
}
function
filterChange
(
{
action
state
oldState
telemetry
}
)
{
const
oldFilterState
=
oldState
.
filters
;
const
filterState
=
state
.
filters
;
const
activeFilters
=
[
]
;
const
inactiveFilters
=
[
]
;
for
(
const
[
key
value
]
of
Object
.
entries
(
filterState
.
requestFilterTypes
)
)
{
if
(
value
)
{
activeFilters
.
push
(
key
)
;
}
else
{
inactiveFilters
.
push
(
key
)
;
}
}
let
trigger
;
if
(
action
.
type
=
=
=
TOGGLE_REQUEST_FILTER_TYPE
|
|
action
.
type
=
=
=
ENABLE_REQUEST_FILTER_TYPE_ONLY
)
{
trigger
=
action
.
filter
;
}
else
if
(
action
.
type
=
=
=
SET_REQUEST_FILTER_TEXT
)
{
if
(
oldFilterState
.
requestFilterText
!
=
=
"
"
&
&
filterState
.
requestFilterText
!
=
=
"
"
)
{
return
;
}
trigger
=
"
text
"
;
}
telemetry
.
recordEvent
(
"
filters_changed
"
"
netmonitor
"
null
{
trigger
active
:
activeFilters
.
join
(
"
"
)
inactive
:
inactiveFilters
.
join
(
"
"
)
}
)
;
}
function
sidePanelChange
(
{
state
oldState
telemetry
}
)
{
telemetry
.
recordEvent
(
"
sidepanel_changed
"
"
netmonitor
"
null
{
oldpanel
:
oldState
.
ui
.
detailsPanelSelectedTab
newpanel
:
state
.
ui
.
detailsPanelSelectedTab
}
)
;
}
function
sendCustomRequest
(
{
telemetry
}
)
{
telemetry
.
recordEvent
(
"
edit_resend
"
"
netmonitor
"
)
;
}
function
throttlingChange
(
{
action
telemetry
}
)
{
telemetry
.
recordEvent
(
"
throttle_changed
"
"
netmonitor
"
null
{
mode
:
action
.
profile
}
)
;
}
function
persistenceChange
(
{
telemetry
state
}
)
{
telemetry
.
recordEvent
(
"
persist_changed
"
"
netmonitor
"
String
(
state
.
ui
.
persistentLogsEnabled
)
)
;
}
function
selectMessage
(
{
telemetry
}
)
{
telemetry
.
recordEvent
(
"
select_ws_frame
"
"
netmonitor
"
)
;
}
module
.
exports
=
eventTelemetryMiddleware
;
