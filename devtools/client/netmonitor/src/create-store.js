"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
applyMiddleware
createStore
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
MIN_COLUMN_WIDTH
DEFAULT_COLUMN_WIDTH
}
=
require
(
"
.
/
constants
"
)
;
const
batching
=
require
(
"
.
/
middleware
/
batching
"
)
;
const
prefs
=
require
(
"
.
/
middleware
/
prefs
"
)
;
const
thunk
=
require
(
"
.
/
middleware
/
thunk
"
)
;
const
recording
=
require
(
"
.
/
middleware
/
recording
"
)
;
const
throttling
=
require
(
"
.
/
middleware
/
throttling
"
)
;
const
eventTelemetry
=
require
(
"
.
/
middleware
/
event
-
telemetry
"
)
;
const
rootReducer
=
require
(
"
.
/
reducers
/
index
"
)
;
const
{
FilterTypes
Filters
}
=
require
(
"
.
/
reducers
/
filters
"
)
;
const
{
Requests
}
=
require
(
"
.
/
reducers
/
requests
"
)
;
const
{
Sort
}
=
require
(
"
.
/
reducers
/
sort
"
)
;
const
{
TimingMarkers
}
=
require
(
"
.
/
reducers
/
timing
-
markers
"
)
;
const
{
UI
Columns
ColumnsData
}
=
require
(
"
.
/
reducers
/
ui
"
)
;
const
{
WebSockets
}
=
require
(
"
.
/
reducers
/
web
-
sockets
"
)
;
function
configureStore
(
connector
telemetry
)
{
const
initialState
=
{
filters
:
new
Filters
(
{
requestFilterTypes
:
getFilterState
(
)
}
)
requests
:
new
Requests
(
)
sort
:
new
Sort
(
)
timingMarkers
:
new
TimingMarkers
(
)
ui
:
UI
(
{
columns
:
getColumnState
(
)
columnsData
:
getColumnsData
(
)
}
)
webSockets
:
new
WebSockets
(
)
}
;
const
middleware
=
applyMiddleware
(
thunk
prefs
batching
recording
(
connector
)
throttling
(
connector
)
eventTelemetry
(
connector
telemetry
)
)
;
return
createStore
(
rootReducer
initialState
middleware
)
;
}
function
getColumnState
(
)
{
const
columns
=
Columns
(
)
;
const
visibleColumns
=
getPref
(
"
devtools
.
netmonitor
.
visibleColumns
"
)
;
const
state
=
{
}
;
for
(
const
col
in
columns
)
{
state
[
col
]
=
visibleColumns
.
includes
(
col
)
;
}
return
state
;
}
function
getColumnsData
(
)
{
const
columnsData
=
getPref
(
"
devtools
.
netmonitor
.
columnsData
"
)
;
if
(
!
columnsData
.
length
)
{
return
ColumnsData
(
)
;
}
const
newMap
=
new
Map
(
)
;
columnsData
.
forEach
(
col
=
>
{
if
(
col
.
name
)
{
col
.
minWidth
=
col
.
minWidth
?
col
.
minWidth
:
MIN_COLUMN_WIDTH
;
col
.
width
=
col
.
width
?
col
.
width
:
DEFAULT_COLUMN_WIDTH
;
newMap
.
set
(
col
.
name
col
)
;
}
}
)
;
return
newMap
;
}
function
getFilterState
(
)
{
const
activeFilters
=
{
}
;
const
filters
=
getPref
(
"
devtools
.
netmonitor
.
filters
"
)
;
filters
.
forEach
(
(
filter
)
=
>
{
activeFilters
[
filter
]
=
true
;
}
)
;
return
new
FilterTypes
(
activeFilters
)
;
}
function
getPref
(
pref
)
{
try
{
return
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
pref
)
)
;
}
catch
(
_
)
{
return
[
]
;
}
}
exports
.
configureStore
=
configureStore
;
