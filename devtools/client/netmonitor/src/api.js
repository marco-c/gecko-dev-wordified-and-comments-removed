"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
bindActionCreators
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
Connector
}
=
require
(
"
.
/
connector
/
index
"
)
;
const
{
configureStore
}
=
require
(
"
.
/
create
-
store
"
)
;
const
{
EVENTS
}
=
require
(
"
.
/
constants
"
)
;
const
Actions
=
require
(
"
.
/
actions
/
index
"
)
;
const
{
getDisplayedRequestById
getSortedRequests
}
=
require
(
"
.
/
selectors
/
index
"
)
;
function
NetMonitorAPI
(
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
connector
=
new
Connector
(
)
;
this
.
store
=
configureStore
(
this
.
connector
)
;
this
.
_requestFinishedListeners
=
new
Set
(
)
;
this
.
onRequestAdded
=
this
.
onRequestAdded
.
bind
(
this
)
;
this
.
actions
=
bindActionCreators
(
Actions
this
.
store
.
dispatch
)
;
}
NetMonitorAPI
.
prototype
=
{
async
connect
(
toolbox
)
{
if
(
this
.
toolbox
)
{
return
;
}
this
.
toolbox
=
toolbox
;
this
.
on
(
EVENTS
.
REQUEST_ADDED
this
.
onRequestAdded
)
;
const
connection
=
{
tabConnection
:
{
tabTarget
:
toolbox
.
target
}
toolbox
owner
:
this
}
;
await
this
.
connectBackend
(
this
.
connector
connection
this
.
actions
this
.
store
.
getState
)
;
}
async
destroy
(
)
{
this
.
off
(
EVENTS
.
REQUEST_ADDED
this
.
onRequestAdded
)
;
await
this
.
connector
.
disconnect
(
)
;
if
(
this
.
harExportConnector
)
{
await
this
.
harExportConnector
.
disconnect
(
)
;
}
}
async
connectBackend
(
connector
connection
actions
getState
)
{
await
connection
.
tabConnection
.
tabTarget
.
makeRemote
(
)
;
return
connector
.
connectFirefox
(
connection
actions
getState
)
;
}
async
getHar
(
)
{
let
{
HarExporter
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
har
/
har
-
exporter
"
)
;
let
state
=
this
.
store
.
getState
(
)
;
let
options
=
{
connector
:
this
.
connector
items
:
getSortedRequests
(
state
)
}
;
return
HarExporter
.
getHar
(
options
)
;
}
async
onRequestAdded
(
requestId
)
{
if
(
!
this
.
_requestFinishedListeners
.
size
)
{
return
;
}
let
{
HarExporter
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
har
/
har
-
exporter
"
)
;
let
connector
=
await
this
.
getHarExportConnector
(
)
;
let
request
=
getDisplayedRequestById
(
this
.
store
.
getState
(
)
requestId
)
;
if
(
!
request
)
{
console
.
error
(
"
HAR
:
request
not
found
"
+
requestId
)
;
return
;
}
let
options
=
{
connector
includeResponseBodies
:
false
items
:
[
request
]
}
;
let
har
=
await
HarExporter
.
getHar
(
options
)
;
let
harEntry
=
har
.
log
.
entries
[
0
]
;
delete
harEntry
.
pageref
;
this
.
_requestFinishedListeners
.
forEach
(
listener
=
>
listener
(
{
harEntry
requestId
}
)
)
;
}
async
fetchResponseContent
(
requestId
)
{
return
this
.
connector
.
requestData
(
requestId
"
responseContent
"
)
;
}
addRequestFinishedListener
:
function
(
listener
)
{
this
.
_requestFinishedListeners
.
add
(
listener
)
;
}
removeRequestFinishedListener
:
function
(
listener
)
{
this
.
_requestFinishedListeners
.
delete
(
listener
)
;
}
hasRequestFinishedListeners
:
function
(
)
{
return
this
.
_requestFinishedListeners
.
size
>
0
;
}
async
getHarExportConnector
(
)
{
if
(
this
.
harExportConnector
)
{
return
this
.
harExportConnector
;
}
const
connection
=
{
tabConnection
:
{
tabTarget
:
this
.
toolbox
.
target
}
toolbox
:
this
.
toolbox
}
;
this
.
harExportConnector
=
new
Connector
(
)
;
await
this
.
connectBackend
(
this
.
harExportConnector
connection
)
;
return
this
.
harExportConnector
;
}
}
;
exports
.
NetMonitorAPI
=
NetMonitorAPI
;
