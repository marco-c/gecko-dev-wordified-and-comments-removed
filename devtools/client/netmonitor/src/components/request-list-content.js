"
use
strict
"
;
const
{
createClass
createFactory
DOM
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
HTMLTooltip
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
HTMLTooltip
"
)
;
const
Actions
=
require
(
"
.
.
/
actions
/
index
"
)
;
const
{
setTooltipImageContent
}
=
require
(
"
.
.
/
request
-
list
-
tooltip
"
)
;
const
{
getDisplayedRequests
getWaterfallScale
}
=
require
(
"
.
.
/
selectors
/
index
"
)
;
const
RequestListItem
=
createFactory
(
require
(
"
.
/
request
-
list
-
item
"
)
)
;
const
RequestListContextMenu
=
require
(
"
.
.
/
request
-
list
-
context
-
menu
"
)
;
const
{
div
}
=
DOM
;
const
REQUESTS_TOOLTIP_TOGGLE_DELAY
=
500
;
const
RequestListContent
=
createClass
(
{
displayName
:
"
RequestListContent
"
propTypes
:
{
columns
:
PropTypes
.
object
.
isRequired
dispatch
:
PropTypes
.
func
.
isRequired
displayedRequests
:
PropTypes
.
object
.
isRequired
firstRequestStartedMillis
:
PropTypes
.
number
.
isRequired
fromCache
:
PropTypes
.
bool
onCauseBadgeClick
:
PropTypes
.
func
.
isRequired
onItemMouseDown
:
PropTypes
.
func
.
isRequired
onSecurityIconClick
:
PropTypes
.
func
.
isRequired
onSelectDelta
:
PropTypes
.
func
.
isRequired
scale
:
PropTypes
.
number
selectedRequestId
:
PropTypes
.
string
}
componentWillMount
(
)
{
const
{
dispatch
}
=
this
.
props
;
this
.
contextMenu
=
new
RequestListContextMenu
(
{
cloneSelectedRequest
:
(
)
=
>
dispatch
(
Actions
.
cloneSelectedRequest
(
)
)
openStatistics
:
(
open
)
=
>
dispatch
(
Actions
.
openStatistics
(
open
)
)
}
)
;
this
.
tooltip
=
new
HTMLTooltip
(
window
.
parent
.
document
{
type
:
"
arrow
"
}
)
;
}
componentDidMount
(
)
{
this
.
setScalingStyles
(
)
;
this
.
tooltip
.
startTogglingOnHover
(
this
.
refs
.
contentEl
this
.
onHover
{
toggleDelay
:
REQUESTS_TOOLTIP_TOGGLE_DELAY
interactive
:
true
}
)
;
this
.
refs
.
contentEl
.
addEventListener
(
"
scroll
"
this
.
onScroll
true
)
;
}
componentWillUpdate
(
nextProps
)
{
const
delta
=
nextProps
.
displayedRequests
.
size
-
this
.
props
.
displayedRequests
.
size
;
this
.
shouldScrollBottom
=
delta
>
0
&
&
this
.
isScrolledToBottom
(
)
;
}
componentDidUpdate
(
prevProps
)
{
this
.
setScalingStyles
(
prevProps
)
;
if
(
this
.
shouldScrollBottom
)
{
let
node
=
this
.
refs
.
contentEl
;
node
.
scrollTop
=
node
.
scrollHeight
;
}
}
componentWillUnmount
(
)
{
this
.
refs
.
contentEl
.
removeEventListener
(
"
scroll
"
this
.
onScroll
true
)
;
this
.
tooltip
.
stopTogglingOnHover
(
)
;
}
setScalingStyles
(
prevProps
)
{
const
{
scale
}
=
this
.
props
;
if
(
prevProps
&
&
prevProps
.
scale
=
=
=
scale
)
{
return
;
}
const
{
style
}
=
this
.
refs
.
contentEl
;
style
.
removeProperty
(
"
-
-
timings
-
scale
"
)
;
style
.
removeProperty
(
"
-
-
timings
-
rev
-
scale
"
)
;
style
.
setProperty
(
"
-
-
timings
-
scale
"
scale
)
;
style
.
setProperty
(
"
-
-
timings
-
rev
-
scale
"
1
/
scale
)
;
}
isScrolledToBottom
(
)
{
const
{
contentEl
}
=
this
.
refs
;
const
lastChildEl
=
contentEl
.
lastElementChild
;
if
(
!
lastChildEl
)
{
return
false
;
}
let
lastChildRect
=
lastChildEl
.
getBoundingClientRect
(
)
;
let
contentRect
=
contentEl
.
getBoundingClientRect
(
)
;
return
(
lastChildRect
.
height
+
lastChildRect
.
top
)
<
=
contentRect
.
bottom
;
}
onHover
(
target
tooltip
)
{
let
itemEl
=
target
.
closest
(
"
.
request
-
list
-
item
"
)
;
if
(
!
itemEl
)
{
return
false
;
}
let
itemId
=
itemEl
.
dataset
.
id
;
if
(
!
itemId
)
{
return
false
;
}
let
requestItem
=
this
.
props
.
displayedRequests
.
find
(
r
=
>
r
.
id
=
=
itemId
)
;
if
(
!
requestItem
)
{
return
false
;
}
if
(
requestItem
.
responseContent
&
&
target
.
closest
(
"
.
requests
-
list
-
icon
"
)
)
{
return
setTooltipImageContent
(
tooltip
itemEl
requestItem
)
;
}
return
false
;
}
onScroll
(
)
{
this
.
tooltip
.
hide
(
)
;
}
onKeyDown
(
evt
)
{
let
delta
;
switch
(
evt
.
key
)
{
case
"
ArrowUp
"
:
case
"
ArrowLeft
"
:
delta
=
-
1
;
break
;
case
"
ArrowDown
"
:
case
"
ArrowRight
"
:
delta
=
+
1
;
break
;
case
"
PageUp
"
:
delta
=
"
PAGE_UP
"
;
break
;
case
"
PageDown
"
:
delta
=
"
PAGE_DOWN
"
;
break
;
case
"
Home
"
:
delta
=
-
Infinity
;
break
;
case
"
End
"
:
delta
=
+
Infinity
;
break
;
}
if
(
delta
)
{
evt
.
preventDefault
(
)
;
evt
.
stopPropagation
(
)
;
this
.
props
.
onSelectDelta
(
delta
)
;
}
}
onContextMenu
(
evt
)
{
evt
.
preventDefault
(
)
;
this
.
contextMenu
.
open
(
evt
)
;
}
onFocusedNodeChange
(
)
{
this
.
shouldScrollBottom
=
false
;
}
render
(
)
{
const
{
columns
displayedRequests
firstRequestStartedMillis
onCauseBadgeClick
onItemMouseDown
onSecurityIconClick
selectedRequestId
}
=
this
.
props
;
return
(
div
(
{
className
:
"
requests
-
list
-
wrapper
"
}
div
(
{
className
:
"
requests
-
list
-
table
"
}
div
(
{
ref
:
"
contentEl
"
className
:
"
requests
-
list
-
contents
"
tabIndex
:
0
onKeyDown
:
this
.
onKeyDown
}
displayedRequests
.
map
(
(
item
index
)
=
>
RequestListItem
(
{
firstRequestStartedMillis
fromCache
:
item
.
status
=
=
=
"
304
"
|
|
item
.
fromCache
columns
item
index
isSelected
:
item
.
id
=
=
=
selectedRequestId
key
:
item
.
id
onContextMenu
:
this
.
onContextMenu
onFocusedNodeChange
:
this
.
onFocusedNodeChange
onMouseDown
:
(
)
=
>
onItemMouseDown
(
item
.
id
)
onCauseBadgeClick
:
(
)
=
>
onCauseBadgeClick
(
item
.
cause
)
onSecurityIconClick
:
(
)
=
>
onSecurityIconClick
(
item
.
securityState
)
}
)
)
)
)
)
)
;
}
}
)
;
module
.
exports
=
connect
(
(
state
)
=
>
(
{
columns
:
state
.
ui
.
columns
displayedRequests
:
getDisplayedRequests
(
state
)
firstRequestStartedMillis
:
state
.
requests
.
firstStartedMillis
selectedRequestId
:
state
.
requests
.
selectedId
scale
:
getWaterfallScale
(
state
)
}
)
(
dispatch
)
=
>
(
{
dispatch
onCauseBadgeClick
:
(
cause
)
=
>
{
if
(
cause
.
stacktrace
&
&
cause
.
stacktrace
.
length
>
0
)
{
dispatch
(
Actions
.
selectDetailsPanelTab
(
"
stack
-
trace
"
)
)
;
}
}
onItemMouseDown
:
(
id
)
=
>
dispatch
(
Actions
.
selectRequest
(
id
)
)
onSecurityIconClick
:
(
securityState
)
=
>
{
if
(
securityState
&
&
securityState
!
=
=
"
insecure
"
)
{
dispatch
(
Actions
.
selectDetailsPanelTab
(
"
security
"
)
)
;
}
}
onSelectDelta
:
(
delta
)
=
>
dispatch
(
Actions
.
selectDelta
(
delta
)
)
}
)
)
(
RequestListContent
)
;
