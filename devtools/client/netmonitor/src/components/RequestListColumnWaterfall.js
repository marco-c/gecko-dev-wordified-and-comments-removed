"
use
strict
"
;
const
{
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
L10N
}
=
require
(
"
.
.
/
utils
/
l10n
"
)
;
const
{
fetchNetworkUpdatePacket
propertiesEqual
}
=
require
(
"
.
.
/
utils
/
request
-
utils
"
)
;
const
{
div
}
=
dom
;
const
UPDATED_WATERFALL_PROPS
=
[
"
eventTimings
"
"
fromCache
"
"
fromServiceWorker
"
"
totalTime
"
]
;
const
TIMING_KEYS
=
[
"
blocked
"
"
dns
"
"
connect
"
"
ssl
"
"
send
"
"
wait
"
"
receive
"
]
;
class
RequestListColumnWaterfall
extends
Component
{
static
get
propTypes
(
)
{
return
{
connector
:
PropTypes
.
object
.
isRequired
firstRequestStartedMillis
:
PropTypes
.
number
.
isRequired
item
:
PropTypes
.
object
.
isRequired
onWaterfallMouseDown
:
PropTypes
.
func
.
isRequired
}
;
}
componentDidMount
(
)
{
let
{
connector
item
}
=
this
.
props
;
fetchNetworkUpdatePacket
(
connector
.
requestData
item
[
"
eventTimings
"
]
)
;
}
componentWillReceiveProps
(
nextProps
)
{
let
{
connector
item
}
=
nextProps
;
fetchNetworkUpdatePacket
(
connector
.
requestData
item
[
"
eventTimings
"
]
)
;
}
shouldComponentUpdate
(
nextProps
)
{
return
!
propertiesEqual
(
UPDATED_WATERFALL_PROPS
this
.
props
.
item
nextProps
.
item
)
|
|
this
.
props
.
firstRequestStartedMillis
!
=
=
nextProps
.
firstRequestStartedMillis
;
}
timingTooltip
(
)
{
let
{
eventTimings
fromCache
fromServiceWorker
totalTime
}
=
this
.
props
.
item
;
let
tooltip
=
[
]
;
if
(
fromCache
|
|
fromServiceWorker
)
{
return
tooltip
;
}
if
(
eventTimings
)
{
for
(
let
key
of
TIMING_KEYS
)
{
let
width
=
eventTimings
.
timings
[
key
]
;
if
(
width
>
0
)
{
tooltip
.
push
(
L10N
.
getFormatStr
(
"
netmonitor
.
waterfall
.
tooltip
.
"
+
key
width
)
)
;
}
}
}
if
(
typeof
totalTime
=
=
=
"
number
"
)
{
tooltip
.
push
(
L10N
.
getFormatStr
(
"
netmonitor
.
waterfall
.
tooltip
.
total
"
totalTime
)
)
;
}
return
tooltip
.
join
(
L10N
.
getStr
(
"
netmonitor
.
waterfall
.
tooltip
.
separator
"
)
)
;
}
timingBoxes
(
)
{
let
{
eventTimings
fromCache
fromServiceWorker
totalTime
}
=
this
.
props
.
item
;
let
boxes
=
[
]
;
if
(
fromCache
|
|
fromServiceWorker
)
{
return
boxes
;
}
if
(
eventTimings
)
{
for
(
let
key
of
TIMING_KEYS
)
{
let
width
=
eventTimings
.
timings
[
key
]
;
if
(
width
>
0
)
{
boxes
.
push
(
div
(
{
key
className
:
requests
-
list
-
timings
-
box
{
key
}
style
:
{
width
}
}
)
)
;
}
}
}
if
(
typeof
totalTime
=
=
=
"
number
"
)
{
let
title
=
L10N
.
getFormatStr
(
"
networkMenu
.
totalMS
"
totalTime
)
;
boxes
.
push
(
div
(
{
key
:
"
total
"
className
:
"
requests
-
list
-
timings
-
total
"
title
}
title
)
)
;
}
return
boxes
;
}
render
(
)
{
let
{
firstRequestStartedMillis
item
onWaterfallMouseDown
}
=
this
.
props
;
return
(
div
(
{
className
:
"
requests
-
list
-
column
requests
-
list
-
waterfall
"
onMouseOver
:
(
{
target
}
)
=
>
{
if
(
!
target
.
title
)
{
target
.
title
=
this
.
timingTooltip
(
)
;
}
}
}
div
(
{
className
:
"
requests
-
list
-
timings
"
style
:
{
paddingInlineStart
:
{
item
.
startedMillis
-
firstRequestStartedMillis
}
px
}
onMouseDown
:
onWaterfallMouseDown
}
this
.
timingBoxes
(
)
)
)
)
;
}
}
module
.
exports
=
RequestListColumnWaterfall
;
