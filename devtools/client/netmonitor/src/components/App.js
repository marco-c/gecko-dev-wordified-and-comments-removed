"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
redux
/
visibility
-
handler
-
connect
"
)
;
const
blockingActions
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
request
-
blocking
"
)
;
loader
.
lazyGetter
(
this
"
MonitorPanel
"
function
(
)
{
return
createFactory
(
require
(
"
devtools
/
client
/
netmonitor
/
src
/
components
/
MonitorPanel
"
)
)
;
}
)
;
loader
.
lazyGetter
(
this
"
StatisticsPanel
"
function
(
)
{
return
createFactory
(
require
(
"
devtools
/
client
/
netmonitor
/
src
/
components
/
StatisticsPanel
"
)
)
;
}
)
;
loader
.
lazyGetter
(
this
"
DropHarHandler
"
function
(
)
{
return
createFactory
(
require
(
"
devtools
/
client
/
netmonitor
/
src
/
components
/
DropHarHandler
"
)
)
;
}
)
;
const
{
div
}
=
dom
;
class
App
extends
Component
{
static
get
propTypes
(
)
{
return
{
actions
:
PropTypes
.
object
.
isRequired
connector
:
PropTypes
.
object
.
isRequired
openLink
:
PropTypes
.
func
openSplitConsole
:
PropTypes
.
func
sourceMapService
:
PropTypes
.
object
statisticsOpen
:
PropTypes
.
bool
.
isRequired
toolboxDoc
:
PropTypes
.
object
.
isRequired
addBlockedUrl
:
PropTypes
.
func
}
;
}
async
componentDidMount
(
)
{
const
responses
=
await
this
.
props
.
connector
.
getBlockedUrls
(
)
;
const
urls
=
responses
.
flat
(
)
;
urls
.
forEach
(
url
=
>
this
.
props
.
addBlockedUrl
(
url
)
)
;
}
render
(
)
{
const
{
actions
connector
openLink
openSplitConsole
sourceMapService
statisticsOpen
toolboxDoc
}
=
this
.
props
;
return
div
(
{
className
:
"
network
-
monitor
"
}
!
statisticsOpen
?
DropHarHandler
(
{
actions
openSplitConsole
}
MonitorPanel
(
{
actions
connector
openSplitConsole
sourceMapService
openLink
toolboxDoc
}
)
)
:
StatisticsPanel
(
{
connector
}
)
)
;
}
}
module
.
exports
=
connect
(
state
=
>
(
{
statisticsOpen
:
state
.
ui
.
statisticsOpen
}
)
(
dispatch
props
)
=
>
(
{
addBlockedUrl
:
url
=
>
dispatch
(
blockingActions
.
addBlockedUrl
(
url
)
)
}
)
)
(
App
)
;
