"
use
strict
"
;
const
{
Component
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
mjs
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
mjs
"
)
;
class
HTMLPreview
extends
Component
{
static
get
propTypes
(
)
{
return
{
responseContent
:
PropTypes
.
object
.
isRequired
responseHeaders
:
PropTypes
.
object
url
:
PropTypes
.
string
.
isRequired
}
;
}
componentDidMount
(
)
{
const
{
container
}
=
this
.
refs
;
const
browser
=
container
.
ownerDocument
.
createXULElement
(
"
browser
"
)
;
this
.
browser
=
browser
;
browser
.
setAttribute
(
"
type
"
"
content
"
)
;
browser
.
setAttribute
(
"
remote
"
"
true
"
)
;
browser
.
setAttribute
(
"
maychangeremoteness
"
"
true
"
)
;
browser
.
setAttribute
(
"
disableglobalhistory
"
"
true
"
)
;
container
.
appendChild
(
browser
)
;
browser
.
browsingContext
.
allowJavascript
=
false
;
this
.
#
updatePreview
(
)
;
}
componentDidUpdate
(
)
{
this
.
#
updatePreview
(
)
;
}
componentWillUnmount
(
)
{
this
.
browser
.
remove
(
)
;
}
#
updatePreview
(
)
{
const
{
responseContent
responseHeaders
url
}
=
this
.
props
;
const
htmlBody
=
responseContent
?
responseContent
.
content
.
text
:
"
"
;
const
uri
=
Services
.
io
.
newURI
(
"
data
:
text
/
html
;
charset
=
UTF
-
8
"
+
encodeURIComponent
(
htmlBody
)
)
;
let
csp
=
null
;
const
cspHeaders
=
responseHeaders
?
.
headers
.
filter
(
e
=
>
e
.
name
.
toLowerCase
(
)
=
=
=
"
content
-
security
-
policy
"
)
;
if
(
cspHeaders
?
.
length
)
{
const
merged
=
cspHeaders
.
map
(
e
=
>
e
.
value
)
.
join
(
"
"
)
;
csp
=
ChromeUtils
.
createCSPFromHeader
(
merged
new
URL
(
url
)
.
URI
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
)
;
}
const
options
=
{
csp
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
;
this
.
browser
.
loadURI
(
uri
options
)
;
}
render
(
)
{
return
dom
.
div
(
{
className
:
"
html
-
preview
"
ref
:
"
container
"
}
)
;
}
}
module
.
exports
=
HTMLPreview
;
