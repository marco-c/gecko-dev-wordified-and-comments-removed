"
use
strict
"
;
const
{
Component
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
mjs
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
class
HTMLPreview
extends
Component
{
static
get
propTypes
(
)
{
return
{
responseContent
:
PropTypes
.
object
.
isRequired
}
;
}
componentDidMount
(
)
{
const
{
container
}
=
this
.
refs
;
const
iframe
=
container
.
ownerDocument
.
createXULElement
(
"
iframe
"
)
;
this
.
iframe
=
iframe
;
iframe
.
setAttribute
(
"
type
"
"
content
"
)
;
iframe
.
setAttribute
(
"
remote
"
"
true
"
)
;
iframe
.
addEventListener
(
"
dragstart
"
e
=
>
e
.
preventDefault
(
)
{
capture
:
true
}
)
;
container
.
appendChild
(
iframe
)
;
iframe
.
browsingContext
.
allowJavascript
=
false
;
this
.
#
updatePreview
(
)
;
}
componentDidUpdate
(
)
{
this
.
#
updatePreview
(
)
;
}
componentWillUnmount
(
)
{
this
.
iframe
.
remove
(
)
;
}
#
updatePreview
(
)
{
const
{
responseContent
}
=
this
.
props
;
const
htmlBody
=
responseContent
?
responseContent
.
content
.
text
:
"
"
;
this
.
iframe
.
setAttribute
(
"
src
"
"
data
:
text
/
html
;
charset
=
UTF
-
8
"
+
encodeURIComponent
(
htmlBody
)
)
;
}
render
(
)
{
return
dom
.
div
(
{
className
:
"
html
-
preview
"
ref
:
"
container
"
}
)
;
}
}
module
.
exports
=
HTMLPreview
;
