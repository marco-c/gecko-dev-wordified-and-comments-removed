"
use
strict
"
;
const
{
Component
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
{
connect
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
redux
.
js
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
Editor
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
sourceeditor
/
editor
.
js
"
)
;
const
{
setTargetSearchResult
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
actions
/
search
.
js
"
)
;
const
{
div
}
=
dom
;
class
SourcePreview
extends
Component
{
static
get
propTypes
(
)
{
return
{
mode
:
PropTypes
.
string
text
:
PropTypes
.
string
targetSearchResult
:
PropTypes
.
object
resetTargetSearchResult
:
PropTypes
.
func
}
;
}
componentDidMount
(
)
{
const
{
mode
text
}
=
this
.
props
;
this
.
loadEditor
(
mode
text
)
;
}
shouldComponentUpdate
(
nextProps
)
{
return
(
nextProps
.
mode
!
=
=
this
.
props
.
mode
|
|
nextProps
.
text
!
=
=
this
.
props
.
text
|
|
nextProps
.
targetSearchResult
!
=
=
this
.
props
.
targetSearchResult
)
;
}
componentDidUpdate
(
prevProps
)
{
const
{
mode
targetSearchResult
text
}
=
this
.
props
;
if
(
prevProps
.
text
!
=
=
text
)
{
this
.
updateEditor
(
mode
text
)
;
}
else
if
(
prevProps
.
targetSearchResult
!
=
=
targetSearchResult
)
{
this
.
findSearchResult
(
)
;
}
}
componentWillUnmount
(
)
{
this
.
unloadEditor
(
)
;
}
loadEditor
(
mode
text
)
{
this
.
editor
=
new
Editor
(
{
lineNumbers
:
true
lineWrapping
:
false
mode
:
null
readOnly
:
true
theme
:
"
mozilla
"
value
:
text
}
)
;
this
.
editorTimeout
=
setTimeout
(
(
)
=
>
{
this
.
editorTimeout
=
null
;
this
.
editor
.
appendToLocalElement
(
this
.
refs
.
editorElement
)
;
this
.
editorSetModeTimeout
=
setTimeout
(
(
)
=
>
{
this
.
editorSetModeTimeout
=
null
;
this
.
editor
.
setMode
(
mode
)
;
this
.
findSearchResult
(
)
;
}
)
;
}
)
;
}
updateEditor
(
mode
text
)
{
if
(
this
?
.
editor
?
.
hasCodeMirror
)
{
this
.
editor
.
setMode
(
null
)
;
this
.
editor
.
setText
(
text
)
;
}
if
(
this
.
editorSetModeTimeout
)
{
clearTimeout
(
this
.
editorSetModeTimeout
)
;
}
this
.
editorSetModeTimeout
=
setTimeout
(
(
)
=
>
{
this
.
editorSetModeTimeout
=
null
;
this
.
editor
.
setMode
(
mode
)
;
this
.
findSearchResult
(
)
;
}
)
;
}
unloadEditor
(
)
{
clearTimeout
(
this
.
editorTimeout
)
;
clearTimeout
(
this
.
editorSetModeTimeout
)
;
if
(
this
.
editor
)
{
this
.
editor
.
destroy
(
)
;
this
.
editor
=
null
;
}
}
findSearchResult
(
)
{
const
{
targetSearchResult
resetTargetSearchResult
}
=
this
.
props
;
if
(
targetSearchResult
?
.
line
)
{
const
{
line
}
=
targetSearchResult
;
if
(
this
.
editor
)
{
this
.
editor
.
setCursor
(
{
line
:
line
-
1
}
"
center
"
)
;
}
}
resetTargetSearchResult
(
)
;
}
scrollToLine
(
element
)
{
const
{
targetSearchResult
resetTargetSearchResult
}
=
this
.
props
;
if
(
element
&
&
targetSearchResult
&
&
targetSearchResult
.
line
)
{
const
child
=
element
.
children
[
targetSearchResult
.
line
-
1
]
;
if
(
child
)
{
const
range
=
document
.
createRange
(
)
;
range
.
selectNode
(
child
)
;
document
.
getSelection
(
)
.
addRange
(
range
)
;
child
.
scrollIntoView
(
{
block
:
"
center
"
}
)
;
}
resetTargetSearchResult
(
)
;
}
}
renderEditor
(
)
{
return
div
(
{
className
:
"
editor
-
row
-
container
"
}
div
(
{
ref
:
"
editorElement
"
className
:
"
source
-
editor
-
mount
devtools
-
monospace
"
}
)
)
;
}
render
(
)
{
return
div
(
{
key
:
"
EDITOR_CONFIG
"
className
:
"
editor
-
row
-
container
"
}
this
.
renderEditor
(
)
)
;
}
}
module
.
exports
=
connect
(
null
dispatch
=
>
(
{
resetTargetSearchResult
:
(
)
=
>
dispatch
(
setTargetSearchResult
(
null
)
)
}
)
)
(
SourcePreview
)
;
