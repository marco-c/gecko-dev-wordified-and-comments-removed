"
use
strict
"
;
const
{
Component
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
mjs
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
mjs
"
)
;
const
{
connect
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
redux
.
js
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
Editor
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
sourceeditor
/
editor
.
js
"
)
;
const
{
setTargetSearchResult
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
actions
/
search
.
js
"
)
;
const
{
div
}
=
dom
;
class
SourcePreview
extends
Component
{
static
get
propTypes
(
)
{
return
{
mimeType
:
PropTypes
.
string
text
:
PropTypes
.
string
targetSearchResult
:
PropTypes
.
object
resetTargetSearchResult
:
PropTypes
.
func
url
:
PropTypes
.
string
}
;
}
componentDidMount
(
)
{
this
.
loadEditor
(
)
;
this
.
updateEditor
(
)
;
}
shouldComponentUpdate
(
nextProps
)
{
return
(
nextProps
.
mimeType
!
=
=
this
.
props
.
mimeType
|
|
nextProps
.
text
!
=
=
this
.
props
.
text
|
|
nextProps
.
targetSearchResult
!
=
=
this
.
props
.
targetSearchResult
)
;
}
componentDidUpdate
(
prevProps
)
{
const
{
targetSearchResult
text
}
=
this
.
props
;
if
(
prevProps
.
text
!
=
=
text
)
{
this
.
updateEditor
(
)
;
}
else
if
(
prevProps
.
targetSearchResult
!
=
=
targetSearchResult
)
{
this
.
findSearchResult
(
)
;
}
}
componentWillUnmount
(
)
{
this
.
unloadEditor
(
)
;
}
getSourceEditorModeForMimetype
(
mimeType
)
{
const
lang
=
mimeType
.
split
(
"
/
"
)
[
1
]
;
return
Editor
.
modes
[
lang
]
;
}
loadEditor
(
)
{
this
.
editor
=
new
Editor
(
{
cm6
:
true
lineNumbers
:
true
lineWrapping
:
false
disableSearchAddon
:
false
useSearchAddonPanel
:
true
mode
:
null
readOnly
:
true
theme
:
"
mozilla
"
value
:
"
"
}
)
;
this
.
editor
.
appendToLocalElement
(
this
.
refs
.
editorElement
)
;
window
.
codeMirrorSourceEditorTestInstance
=
this
.
editor
;
}
async
updateEditor
(
)
{
const
{
mimeType
text
url
}
=
this
.
props
;
if
(
this
?
.
editor
?
.
hasCodeMirror
)
{
const
mode
=
this
.
getSourceEditorModeForMimetype
(
mimeType
)
;
await
this
.
editor
.
setMode
(
mode
)
;
await
this
.
editor
.
setText
(
text
url
)
;
await
this
.
findSearchResult
(
)
;
}
}
unloadEditor
(
)
{
if
(
this
.
editor
)
{
this
.
editor
.
destroy
(
)
;
this
.
editor
=
null
;
}
}
async
findSearchResult
(
)
{
const
{
targetSearchResult
resetTargetSearchResult
}
=
this
.
props
;
if
(
targetSearchResult
?
.
line
)
{
const
{
line
}
=
targetSearchResult
;
if
(
this
.
editor
)
{
await
this
.
editor
.
scrollTo
(
line
0
)
;
await
this
.
editor
.
setCursorAt
(
line
-
1
0
)
;
this
.
editor
.
setLineContentMarker
(
{
id
:
this
.
editor
.
markerTypes
.
HIGHLIGHT_LINE_MARKER
lineClassName
:
"
highlight
-
line
"
lines
:
[
{
line
}
]
}
)
;
this
.
clearHighlightLineAfterDuration
(
)
;
}
}
resetTargetSearchResult
(
)
;
}
clearHighlightLineAfterDuration
(
)
{
const
editorContainer
=
document
.
querySelector
(
"
.
editor
-
row
-
container
"
)
;
if
(
editorContainer
=
=
=
null
)
{
return
;
}
const
duration
=
parseInt
(
getComputedStyle
(
editorContainer
)
.
getPropertyValue
(
"
-
-
highlight
-
line
-
duration
"
)
10
)
;
const
highlightTimeout
=
setTimeout
(
(
)
=
>
{
if
(
!
this
.
editor
)
{
return
;
}
clearTimeout
(
highlightTimeout
)
;
this
.
editor
.
removeLineContentMarker
(
"
highlight
-
line
-
marker
"
)
;
}
duration
)
;
}
render
(
)
{
return
div
(
{
className
:
"
editor
-
row
-
container
"
}
div
(
{
ref
:
"
editorElement
"
className
:
"
source
-
editor
-
mount
devtools
-
monospace
"
}
)
)
;
}
}
module
.
exports
=
connect
(
null
dispatch
=
>
(
{
resetTargetSearchResult
:
(
)
=
>
dispatch
(
setTargetSearchResult
(
null
)
)
}
)
)
(
SourcePreview
)
;
