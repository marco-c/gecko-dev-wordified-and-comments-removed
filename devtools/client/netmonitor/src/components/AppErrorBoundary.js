"
use
strict
"
;
const
{
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
div
h1
h2
p
a
}
=
dom
;
const
bugLink
=
"
https
:
/
/
bugzilla
.
mozilla
.
org
/
enter_bug
.
cgi
?
product
=
DevTools
&
component
=
Netmonitor
"
;
const
{
L10N
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
)
;
const
ERROR_DESCRIPTION
=
L10N
.
getStr
(
"
netmonitor
.
errorpanel
.
description
"
)
;
const
FILE_BUG_BUTTON
=
L10N
.
getStr
(
"
netmonitor
.
errorpanel
.
fileBugButton
"
)
;
const
RELOAD_PAGE_INFO
=
L10N
.
getStr
(
"
netmonitor
.
errorpanel
.
reloadPanelInfo
"
)
;
class
AppErrorBoundary
extends
Component
{
static
get
propTypes
(
)
{
return
{
children
:
PropTypes
.
any
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
errorMsg
:
"
No
error
"
errorInfo
:
null
}
;
}
renderStackTrace
(
info
=
{
}
)
{
if
(
Object
.
keys
(
info
)
.
length
>
0
)
{
return
Object
.
keys
(
info
)
.
map
(
(
obj
outerIdx
)
=
>
{
const
traceParts
=
info
[
obj
]
.
split
(
"
\
n
"
)
.
map
(
(
part
idx
)
=
>
p
(
{
key
:
strace
{
idx
}
}
part
)
)
;
return
div
(
{
key
:
st
-
div
-
{
outerIdx
}
className
:
"
stack
-
trace
-
section
"
}
p
(
{
key
:
st
-
p
-
{
outerIdx
}
}
obj
.
toString
(
)
)
traceParts
)
;
}
)
;
}
return
p
(
{
}
"
undefined
errorInfo
"
)
;
}
getValidInfo
(
infoObj
)
{
if
(
!
infoObj
.
componentStack
)
{
try
{
return
{
componentStack
:
JSON
.
stringify
(
infoObj
)
}
;
}
catch
(
err
)
{
return
{
componentStack
:
Unknown
Error
:
{
err
}
}
;
}
}
return
infoObj
;
}
componentDidCatch
(
error
info
)
{
const
validInfo
=
this
.
getValidInfo
(
info
)
;
this
.
setState
(
{
errorMsg
:
error
.
toString
(
)
errorInfo
:
validInfo
}
)
;
}
getBugLink
(
)
{
const
compStack
=
this
.
getValidInfo
(
this
.
state
.
errorInfo
)
.
componentStack
;
const
errorMsg
=
this
.
state
.
errorMsg
;
const
msg
=
(
errorMsg
+
compStack
)
.
replace
(
/
\
n
/
gi
"
%
0A
"
)
;
return
{
bugLink
}
&
comment
=
{
msg
}
;
}
render
(
)
{
if
(
this
.
state
.
errorInfo
!
=
=
null
)
{
return
div
(
{
className
:
"
app
-
error
-
panel
"
}
h1
(
{
className
:
"
error
-
panel
-
header
"
}
ERROR_DESCRIPTION
)
a
(
{
className
:
"
error
-
panel
-
file
-
button
"
href
:
this
.
getBugLink
(
)
onClick
:
(
)
=
>
{
window
.
open
(
this
.
getBugLink
(
)
"
_blank
"
)
;
}
}
FILE_BUG_BUTTON
)
h2
(
{
className
:
"
error
-
panel
-
error
"
}
this
.
state
.
errorMsg
)
div
(
{
}
this
.
renderStackTrace
(
this
.
state
.
errorInfo
)
)
p
(
{
className
:
"
error
-
panel
-
reload
-
info
"
}
RELOAD_PAGE_INFO
)
)
;
}
return
this
.
props
.
children
;
}
}
module
.
exports
=
AppErrorBoundary
;
