"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
redux
/
visibility
-
handler
-
connect
"
)
;
const
{
FILTER_SEARCH_DELAY
}
=
require
(
"
.
.
/
.
.
/
constants
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
Actions
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
L10N
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
)
;
const
{
button
span
div
}
=
dom
;
const
SearchBox
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
SearchBox
"
)
)
;
class
Toolbar
extends
Component
{
static
get
propTypes
(
)
{
return
{
searchboxRef
:
PropTypes
.
object
.
isRequired
clearSearchResults
:
PropTypes
.
func
.
isRequired
search
:
PropTypes
.
func
.
isRequired
closeSearch
:
PropTypes
.
func
.
isRequired
addSearchQuery
:
PropTypes
.
func
.
isRequired
connector
:
PropTypes
.
object
.
isRequired
}
;
}
renderSeparator
(
)
{
return
span
(
{
className
:
"
devtools
-
separator
"
}
)
;
}
onKeyDown
(
event
connector
)
{
switch
(
event
.
key
)
{
case
"
Escape
"
:
event
.
preventDefault
(
)
;
this
.
props
.
closeSearch
(
)
;
break
;
case
"
Enter
"
:
event
.
preventDefault
(
)
;
this
.
props
.
addSearchQuery
(
event
.
target
.
value
)
;
this
.
props
.
search
(
connector
event
.
target
.
value
)
;
break
;
}
}
renderCloseButton
(
)
{
const
{
closeSearch
}
=
this
.
props
;
return
button
(
{
id
:
"
devtools
-
network
-
search
-
close
"
className
:
"
devtools
-
button
"
title
:
L10N
.
getStr
(
"
netmonitor
.
search
.
toolbar
.
close
"
)
onClick
:
(
)
=
>
closeSearch
(
)
}
)
;
}
renderClearButton
(
)
{
return
button
(
{
className
:
"
devtools
-
button
devtools
-
clear
-
icon
ws
-
frames
-
list
-
clear
-
button
"
title
:
L10N
.
getStr
(
"
netmonitor
.
search
.
toolbar
.
clear
"
)
onClick
:
(
)
=
>
{
this
.
props
.
clearSearchResults
(
)
;
}
}
)
;
}
renderFilterBox
(
)
{
const
{
addSearchQuery
connector
}
=
this
.
props
;
return
SearchBox
(
{
keyShortcut
:
"
CmdOrCtrl
+
Shift
+
F
"
placeholder
:
L10N
.
getStr
(
"
netmonitor
.
search
.
toolbar
.
inputPlaceholder
"
)
type
:
"
search
"
delay
:
FILTER_SEARCH_DELAY
ref
:
this
.
props
.
searchboxRef
onChange
:
query
=
>
addSearchQuery
(
query
)
onKeyDown
:
event
=
>
this
.
onKeyDown
(
event
connector
)
}
)
;
}
render
(
)
{
return
div
(
{
id
:
"
netmonitor
-
toolbar
-
container
"
className
:
"
devtools
-
toolbar
devtools
-
input
-
toolbar
"
}
this
.
renderClearButton
(
)
this
.
renderSeparator
(
)
this
.
renderFilterBox
(
)
this
.
renderCloseButton
(
)
)
;
}
}
module
.
exports
=
connect
(
state
=
>
(
{
}
)
dispatch
=
>
(
{
closeSearch
:
(
)
=
>
dispatch
(
Actions
.
closeSearch
(
)
)
openSearch
:
(
)
=
>
dispatch
(
Actions
.
openSearch
(
)
)
clearSearchResults
:
(
)
=
>
dispatch
(
Actions
.
clearSearchResults
(
)
)
search
:
(
connector
query
)
=
>
dispatch
(
Actions
.
search
(
connector
query
)
)
addSearchQuery
:
query
=
>
dispatch
(
Actions
.
addSearchQuery
(
query
)
)
}
)
)
(
Toolbar
)
;
