"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
{
connect
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
redux
/
visibility
-
handler
-
connect
.
js
"
)
;
const
{
FILTER_SEARCH_DELAY
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
constants
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
Actions
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
.
js
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
{
L10N
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
)
;
const
{
button
span
div
}
=
dom
;
const
SearchBox
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
SearchBox
.
js
"
)
)
;
class
Toolbar
extends
Component
{
static
get
propTypes
(
)
{
return
{
searchboxRef
:
PropTypes
.
object
.
isRequired
clearSearchResults
:
PropTypes
.
func
.
isRequired
search
:
PropTypes
.
func
.
isRequired
closeSearch
:
PropTypes
.
func
.
isRequired
addSearchQuery
:
PropTypes
.
func
.
isRequired
clearSearchResultAndCancel
:
PropTypes
.
func
.
isRequired
caseSensitive
:
PropTypes
.
bool
.
isRequired
toggleCaseSensitiveSearch
:
PropTypes
.
func
.
isRequired
connector
:
PropTypes
.
object
.
isRequired
query
:
PropTypes
.
string
}
;
}
renderSeparator
(
)
{
return
span
(
{
className
:
"
devtools
-
separator
"
}
)
;
}
onKeyDown
(
event
connector
)
{
switch
(
event
.
key
)
{
case
"
Escape
"
:
event
.
preventDefault
(
)
;
this
.
props
.
closeSearch
(
)
;
break
;
case
"
Enter
"
:
event
.
preventDefault
(
)
;
this
.
props
.
addSearchQuery
(
event
.
target
.
value
)
;
this
.
props
.
search
(
connector
event
.
target
.
value
)
;
break
;
}
}
renderModifiers
(
)
{
return
div
(
{
className
:
"
search
-
modifiers
"
}
span
(
{
className
:
"
pipe
-
divider
"
}
)
this
.
renderCaseSensitiveButton
(
)
)
;
}
renderClearButton
(
)
{
return
button
(
{
className
:
"
devtools
-
button
devtools
-
clear
-
icon
ws
-
frames
-
list
-
clear
-
button
"
title
:
L10N
.
getStr
(
"
netmonitor
.
search
.
toolbar
.
clear
"
)
onClick
:
(
)
=
>
{
this
.
props
.
clearSearchResults
(
)
;
}
}
)
;
}
renderCaseSensitiveButton
(
)
{
const
{
caseSensitive
toggleCaseSensitiveSearch
}
=
this
.
props
;
const
active
=
caseSensitive
?
"
checked
"
:
"
"
;
return
button
(
{
id
:
"
devtools
-
network
-
search
-
caseSensitive
"
className
:
devtools
-
button
{
active
}
title
:
L10N
.
getStr
(
"
netmonitor
.
search
.
toolbar
.
caseSensitive
"
)
onClick
:
toggleCaseSensitiveSearch
}
)
;
}
renderFilterBox
(
)
{
const
{
addSearchQuery
clearSearchResultAndCancel
connector
query
}
=
this
.
props
;
return
SearchBox
(
{
keyShortcut
:
"
CmdOrCtrl
+
Shift
+
F
"
placeholder
:
L10N
.
getStr
(
"
netmonitor
.
search
.
toolbar
.
inputPlaceholder
"
)
type
:
"
search
"
delay
:
FILTER_SEARCH_DELAY
ref
:
this
.
props
.
searchboxRef
value
:
query
onClearButtonClick
:
(
)
=
>
clearSearchResultAndCancel
(
)
onChange
:
newQuery
=
>
addSearchQuery
(
newQuery
)
onKeyDown
:
event
=
>
this
.
onKeyDown
(
event
connector
)
}
)
;
}
render
(
)
{
return
div
(
{
id
:
"
netmonitor
-
toolbar
-
container
"
className
:
"
devtools
-
toolbar
devtools
-
input
-
toolbar
"
}
this
.
renderFilterBox
(
)
this
.
renderModifiers
(
)
)
;
}
}
module
.
exports
=
connect
(
state
=
>
(
{
caseSensitive
:
state
.
search
.
caseSensitive
query
:
state
.
search
.
query
}
)
dispatch
=
>
(
{
closeSearch
:
(
)
=
>
dispatch
(
Actions
.
closeSearch
(
)
)
openSearch
:
(
)
=
>
dispatch
(
Actions
.
openSearch
(
)
)
clearSearchResultAndCancel
:
(
)
=
>
dispatch
(
Actions
.
clearSearchResultAndCancel
(
)
)
toggleCaseSensitiveSearch
:
(
)
=
>
dispatch
(
Actions
.
toggleCaseSensitiveSearch
(
)
)
search
:
(
connector
query
)
=
>
dispatch
(
Actions
.
search
(
connector
query
)
)
addSearchQuery
:
query
=
>
dispatch
(
Actions
.
addSearchQuery
(
query
)
)
}
)
)
(
Toolbar
)
;
