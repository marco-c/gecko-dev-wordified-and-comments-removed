"
use
strict
"
;
function
Emitter
(
obj
)
{
if
(
obj
)
{
return
mixin
(
obj
)
;
}
}
function
mixin
(
obj
)
{
for
(
const
key
in
Emitter
.
prototype
)
{
obj
[
key
]
=
Emitter
.
prototype
[
key
]
;
}
return
obj
;
}
Emitter
.
prototype
.
on
=
function
(
event
fn
)
{
this
.
_callbacks
=
this
.
_callbacks
|
|
{
}
;
(
this
.
_callbacks
[
"
"
+
event
]
=
this
.
_callbacks
[
"
"
+
event
]
|
|
[
]
)
.
push
(
fn
)
;
return
this
;
}
;
Emitter
.
prototype
.
emit
=
function
(
event
)
{
this
.
_callbacks
=
this
.
_callbacks
|
|
{
}
;
const
args
=
new
Array
(
arguments
.
length
-
1
)
;
let
callbacks
=
this
.
_callbacks
[
"
"
+
event
]
;
for
(
let
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
args
[
i
-
1
]
=
arguments
[
i
]
;
}
if
(
callbacks
)
{
callbacks
=
callbacks
.
slice
(
0
)
;
for
(
let
i
=
0
len
=
callbacks
.
length
;
i
<
len
;
+
+
i
)
{
callbacks
[
i
]
.
apply
(
this
args
)
;
}
}
return
this
;
}
;
module
.
exports
=
Emitter
;
