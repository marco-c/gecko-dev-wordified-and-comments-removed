"
use
strict
"
;
const
{
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
fetchNetworkUpdatePacket
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
request
-
utils
"
)
;
class
RequestListColumnCookies
extends
Component
{
static
get
propTypes
(
)
{
return
{
connector
:
PropTypes
.
object
.
isRequired
item
:
PropTypes
.
object
.
isRequired
}
;
}
componentDidMount
(
)
{
const
{
item
connector
}
=
this
.
props
;
fetchNetworkUpdatePacket
(
connector
.
requestData
item
[
"
requestCookies
"
]
)
;
}
UNSAFE_componentWillReceiveProps
(
nextProps
)
{
const
{
item
connector
}
=
nextProps
;
fetchNetworkUpdatePacket
(
connector
.
requestData
item
[
"
requestCookies
"
]
)
;
}
shouldComponentUpdate
(
nextProps
)
{
let
{
requestCookies
:
currRequestCookies
=
{
cookies
:
[
]
}
}
=
this
.
props
.
item
;
let
{
requestCookies
:
nextRequestCookies
=
{
cookies
:
[
]
}
}
=
nextProps
.
item
;
currRequestCookies
=
currRequestCookies
.
cookies
|
|
currRequestCookies
;
nextRequestCookies
=
nextRequestCookies
.
cookies
|
|
nextRequestCookies
;
return
currRequestCookies
!
=
=
nextRequestCookies
;
}
render
(
)
{
let
{
requestCookies
=
{
cookies
:
[
]
}
}
=
this
.
props
.
item
;
requestCookies
=
requestCookies
.
cookies
|
|
requestCookies
;
const
requestCookiesLength
=
requestCookies
.
length
>
0
?
requestCookies
.
length
:
"
"
;
return
dom
.
td
(
{
className
:
"
requests
-
list
-
column
requests
-
list
-
cookies
"
title
:
requestCookiesLength
}
requestCookiesLength
)
;
}
}
module
.
exports
=
RequestListColumnCookies
;
