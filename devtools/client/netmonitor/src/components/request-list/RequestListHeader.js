"
use
strict
"
;
const
{
createRef
Component
createFactory
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
mjs
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
mjs
"
)
;
const
{
connect
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
redux
.
js
"
)
;
const
{
getTheme
addThemeObserver
removeThemeObserver
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
theme
.
js
"
)
;
const
Actions
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
.
js
"
)
;
const
{
HEADERS
REQUESTS_WATERFALL
MIN_COLUMN_WIDTH
DEFAULT_COLUMN_WIDTH
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
constants
.
js
"
)
;
const
{
getColumns
getWaterfallScale
hasOverride
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
selectors
/
index
.
js
"
)
;
const
{
getFormattedTime
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
format
-
utils
.
js
"
)
;
const
{
L10N
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
)
;
const
RequestListHeaderContextMenu
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
widgets
/
RequestListHeaderContextMenu
.
js
"
)
;
const
WaterfallBackground
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
widgets
/
WaterfallBackground
.
js
"
)
;
const
Draggable
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
splitter
/
Draggable
.
js
"
)
)
;
const
{
div
button
}
=
dom
;
class
RequestListHeaderContent
extends
Component
{
static
get
propTypes
(
)
{
return
{
columns
:
PropTypes
.
object
.
isRequired
resetColumns
:
PropTypes
.
func
.
isRequired
resetSorting
:
PropTypes
.
func
.
isRequired
resizeWaterfall
:
PropTypes
.
func
.
isRequired
scale
:
PropTypes
.
number
sort
:
PropTypes
.
object
sortBy
:
PropTypes
.
func
.
isRequired
toggleColumn
:
PropTypes
.
func
.
isRequired
waterfallWidth
:
PropTypes
.
number
columnsData
:
PropTypes
.
object
.
isRequired
setColumnsWidth
:
PropTypes
.
func
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
requestListHeader
=
createRef
(
)
;
this
.
onContextMenu
=
this
.
onContextMenu
.
bind
(
this
)
;
this
.
drawBackground
=
this
.
drawBackground
.
bind
(
this
)
;
this
.
resizeWaterfall
=
this
.
resizeWaterfall
.
bind
(
this
)
;
this
.
waterfallDivisionLabels
=
this
.
waterfallDivisionLabels
.
bind
(
this
)
;
this
.
waterfallLabel
=
this
.
waterfallLabel
.
bind
(
this
)
;
this
.
onHeaderClick
=
this
.
onHeaderClick
.
bind
(
this
)
;
this
.
resizeColumnToFitContent
=
this
.
resizeColumnToFitContent
.
bind
(
this
)
;
}
UNSAFE_componentWillMount
(
)
{
const
{
resetColumns
resetSorting
toggleColumn
}
=
this
.
props
;
this
.
contextMenu
=
new
RequestListHeaderContextMenu
(
{
resetColumns
resetSorting
toggleColumn
resizeColumnToFitContent
:
this
.
resizeColumnToFitContent
}
)
;
}
componentDidMount
(
)
{
this
.
background
=
new
WaterfallBackground
(
document
)
;
this
.
drawBackground
(
)
;
if
(
this
.
shouldUpdateWidths
(
)
)
{
this
.
updateColumnsWidth
(
)
;
}
this
.
resizeWaterfall
(
)
;
window
.
addEventListener
(
"
resize
"
this
.
resizeWaterfall
)
;
addThemeObserver
(
this
.
drawBackground
)
;
}
componentDidUpdate
(
)
{
this
.
drawBackground
(
)
;
if
(
this
.
shouldUpdateWidths
(
)
)
{
this
.
updateColumnsWidth
(
)
;
this
.
resizeWaterfall
(
)
;
}
}
componentWillUnmount
(
)
{
this
.
background
.
destroy
(
)
;
this
.
background
=
null
;
window
.
removeEventListener
(
"
resize
"
this
.
resizeWaterfall
)
;
removeThemeObserver
(
this
.
drawBackground
)
;
}
totalCellWidth
(
cellEl
)
{
return
[
.
.
.
cellEl
.
childNodes
]
.
map
(
cNode
=
>
{
if
(
cNode
.
nodeType
=
=
=
3
)
{
return
Math
.
ceil
(
cNode
.
getBoxQuads
(
)
[
0
]
.
p2
.
x
-
cNode
.
getBoxQuads
(
)
[
0
]
.
p1
.
x
)
;
}
return
cNode
.
getBoundingClientRect
(
)
.
width
;
}
)
.
reduce
(
(
a
b
)
=
>
a
+
b
0
)
;
}
resizeColumnToFitContent
(
name
)
{
const
headerRef
=
this
.
refs
[
{
name
}
Header
]
;
const
parentEl
=
headerRef
.
closest
(
"
.
requests
-
list
-
table
"
)
;
const
width
=
headerRef
.
getBoundingClientRect
(
)
.
width
;
const
parentWidth
=
parentEl
.
getBoundingClientRect
(
)
.
width
;
const
items
=
parentEl
.
querySelectorAll
(
"
.
request
-
list
-
item
"
)
;
const
columnIndex
=
headerRef
.
cellIndex
;
const
widths
=
[
.
.
.
items
]
.
map
(
item
=
>
this
.
totalCellWidth
(
item
.
children
[
columnIndex
]
)
)
;
const
minW
=
this
.
getMinWidth
(
name
)
;
let
maxWidth
=
11
+
Math
.
max
.
apply
(
null
widths
)
;
if
(
maxWidth
<
minW
)
{
maxWidth
=
minW
;
}
let
change
=
maxWidth
-
width
;
let
maxAllowedChange
=
0
;
const
visibleColumns
=
this
.
getVisibleColumns
(
)
;
const
newWidths
=
[
]
;
const
delta
=
visibleColumns
[
visibleColumns
.
length
-
1
]
.
name
=
=
=
"
waterfall
"
?
2
:
1
;
for
(
let
i
=
visibleColumns
.
length
-
delta
;
i
>
0
;
i
-
-
)
{
if
(
i
!
=
=
columnIndex
)
{
const
columnName
=
visibleColumns
[
i
]
.
name
;
const
columnHeaderRef
=
this
.
refs
[
{
columnName
}
Header
]
;
const
columnWidth
=
columnHeaderRef
.
getBoundingClientRect
(
)
.
width
;
const
minWidth
=
this
.
getMinWidth
(
columnName
)
;
const
newWidth
=
columnWidth
-
change
;
if
(
newWidth
>
=
minWidth
)
{
maxAllowedChange
+
=
change
;
change
=
0
;
newWidths
.
push
(
{
name
:
columnName
width
:
this
.
px2percent
(
newWidth
parentWidth
)
}
)
;
break
;
}
else
{
let
maxColumnChange
=
columnWidth
-
minWidth
;
maxColumnChange
=
maxColumnChange
>
change
?
change
:
maxColumnChange
;
maxAllowedChange
+
=
maxColumnChange
;
change
-
=
maxColumnChange
;
newWidths
.
push
(
{
name
:
columnName
width
:
this
.
px2percent
(
columnWidth
-
maxColumnChange
parentWidth
)
}
)
;
}
}
}
newWidths
.
push
(
{
name
width
:
this
.
px2percent
(
width
+
maxAllowedChange
parentWidth
)
}
)
;
this
.
props
.
setColumnsWidth
(
newWidths
)
;
}
onContextMenu
(
evt
)
{
evt
.
preventDefault
(
)
;
this
.
contextMenu
.
open
(
evt
this
.
props
.
columns
)
;
}
onHeaderClick
(
evt
headerName
)
{
const
{
sortBy
resetSorting
}
=
this
.
props
;
if
(
evt
.
button
=
=
1
)
{
resetSorting
(
)
;
}
else
{
sortBy
(
headerName
)
;
}
}
drawBackground
(
)
{
const
props
=
Object
.
assign
(
{
}
this
.
props
{
theme
:
getTheme
(
)
}
)
;
this
.
background
.
draw
(
props
)
;
}
resizeWaterfall
(
)
{
const
{
waterfallHeader
}
=
this
.
refs
;
if
(
waterfallHeader
)
{
window
.
cancelIdleCallback
(
this
.
_resizeTimerId
)
;
this
.
_resizeTimerId
=
window
.
requestIdleCallback
(
(
)
=
>
{
if
(
document
.
visibilityState
=
=
"
visible
"
)
{
this
.
props
.
resizeWaterfall
(
waterfallHeader
.
getBoundingClientRect
(
)
.
width
)
;
}
}
)
;
}
}
waterfallDivisionLabels
(
waterfallWidth
scale
)
{
const
labels
=
[
]
;
const
timingStep
=
REQUESTS_WATERFALL
.
HEADER_TICKS_MULTIPLE
;
let
scaledStep
=
scale
*
timingStep
;
while
(
scaledStep
<
REQUESTS_WATERFALL
.
HEADER_TICKS_SPACING_MIN
)
{
scaledStep
*
=
2
;
}
for
(
let
x
=
0
;
x
<
waterfallWidth
;
x
+
=
scaledStep
)
{
const
millisecondTime
=
x
/
scale
;
let
divisionScale
=
"
millisecond
"
;
if
(
millisecondTime
>
60000
)
{
divisionScale
=
"
minute
"
;
}
else
if
(
millisecondTime
>
1000
)
{
divisionScale
=
"
second
"
;
}
let
width
=
(
(
x
+
scaledStep
)
|
0
)
-
(
x
|
0
)
;
if
(
x
=
=
0
)
{
width
-
=
2
;
}
if
(
x
+
scaledStep
>
=
waterfallWidth
)
{
width
=
undefined
;
}
labels
.
push
(
div
(
{
key
:
labels
.
length
className
:
"
requests
-
list
-
timings
-
division
"
"
data
-
division
-
scale
"
:
divisionScale
style
:
{
width
}
}
getFormattedTime
(
millisecondTime
)
)
)
;
}
return
labels
;
}
waterfallLabel
(
waterfallWidth
scale
label
)
{
let
className
=
"
button
-
text
requests
-
list
-
waterfall
-
label
-
wrapper
"
;
if
(
waterfallWidth
!
=
=
null
&
&
scale
!
=
=
null
)
{
label
=
this
.
waterfallDivisionLabels
(
waterfallWidth
scale
)
;
className
+
=
"
requests
-
list
-
waterfall
-
visible
"
;
}
return
div
(
{
className
}
label
)
;
}
onStartMove
(
)
{
const
container
=
document
.
querySelector
(
"
.
request
-
list
-
container
"
)
;
container
.
style
.
cursor
=
"
ew
-
resize
"
;
this
.
requestListHeader
.
classList
.
add
(
"
dragging
"
)
;
}
onMove
(
name
x
)
{
const
parentEl
=
document
.
querySelector
(
"
.
requests
-
list
-
headers
"
)
;
const
parentWidth
=
parentEl
.
getBoundingClientRect
(
)
.
width
;
const
headerRef
=
this
.
refs
[
{
name
}
Header
]
;
const
headerRefRect
=
headerRef
.
getBoundingClientRect
(
)
;
const
oldWidth
=
headerRefRect
.
width
;
const
compensateHeaderName
=
this
.
getCompensateHeader
(
)
;
if
(
name
=
=
=
compensateHeaderName
)
{
this
.
moveWaterfall
(
x
parentWidth
)
;
return
;
}
const
compensateHeaderRef
=
this
.
refs
[
{
compensateHeaderName
}
Header
]
;
const
compensateHeaderRefRect
=
compensateHeaderRef
.
getBoundingClientRect
(
)
;
const
oldCompensateWidth
=
compensateHeaderRefRect
.
width
;
const
sumOfBothColumns
=
oldWidth
+
oldCompensateWidth
;
const
minWidth
=
this
.
getMinWidth
(
name
)
;
const
minCompensateWidth
=
this
.
getMinWidth
(
compensateHeaderName
)
;
let
newWidth
=
document
.
dir
=
=
"
ltr
"
?
x
-
headerRefRect
.
left
:
headerRefRect
.
right
-
x
;
newWidth
=
Math
.
max
(
newWidth
minWidth
)
;
headerRef
.
style
.
width
=
{
this
.
px2percent
(
newWidth
parentWidth
)
}
%
;
const
adjustment
=
oldWidth
-
newWidth
;
const
newCompensateWidth
=
Math
.
max
(
adjustment
+
oldCompensateWidth
minCompensateWidth
)
;
compensateHeaderRef
.
style
.
width
=
{
this
.
px2percent
(
newCompensateWidth
parentWidth
)
}
%
;
if
(
newCompensateWidth
=
=
=
minCompensateWidth
)
{
headerRef
.
style
.
width
=
{
this
.
px2percent
(
sumOfBothColumns
-
newCompensateWidth
parentWidth
)
}
%
;
}
}
onStopMove
(
)
{
this
.
updateColumnsWidth
(
)
;
const
waterfallRef
=
this
.
refs
.
waterfallHeader
;
if
(
waterfallRef
)
{
const
{
waterfallWidth
}
=
this
.
props
;
const
realWaterfallWidth
=
waterfallRef
.
getBoundingClientRect
(
)
.
width
;
if
(
Math
.
round
(
waterfallWidth
)
!
=
=
Math
.
round
(
realWaterfallWidth
)
)
{
this
.
resizeWaterfall
(
)
;
}
}
const
container
=
document
.
querySelector
(
"
.
request
-
list
-
container
"
)
;
container
.
style
.
cursor
=
"
initial
"
;
this
.
requestListHeader
.
classList
.
remove
(
"
dragging
"
)
;
}
getCompensateHeader
(
)
{
const
visibleColumns
=
this
.
getVisibleColumns
(
)
;
const
lastColumn
=
visibleColumns
[
visibleColumns
.
length
-
1
]
.
name
;
const
delta
=
lastColumn
=
=
=
"
waterfall
"
?
2
:
1
;
return
visibleColumns
[
visibleColumns
.
length
-
delta
]
.
name
;
}
moveWaterfall
(
x
parentWidth
)
{
const
visibleColumns
=
this
.
getVisibleColumns
(
)
;
const
minWaterfall
=
this
.
getMinWidth
(
"
waterfall
"
)
;
const
waterfallRef
=
this
.
refs
.
waterfallHeader
;
const
waterfallRefRect
=
waterfallRef
.
getBoundingClientRect
(
)
;
const
oldWidth
=
waterfallRefRect
.
width
;
const
adjustment
=
document
.
dir
=
=
"
ltr
"
?
waterfallRefRect
.
left
-
x
:
x
-
waterfallRefRect
.
right
;
if
(
this
.
allColumnsAtMinWidth
(
)
&
&
adjustment
>
0
)
{
return
;
}
const
newWidth
=
Math
.
max
(
oldWidth
+
adjustment
minWaterfall
)
;
const
changeInWidth
=
oldWidth
-
newWidth
;
const
widths
=
this
.
autoSizeWidths
(
changeInWidth
visibleColumns
)
;
widths
[
widths
.
length
-
1
]
=
newWidth
;
let
i
=
0
;
visibleColumns
.
forEach
(
col
=
>
{
const
{
name
}
=
col
;
const
headerRef
=
this
.
refs
[
{
name
}
Header
]
;
headerRef
.
style
.
width
=
{
this
.
px2percent
(
widths
[
i
]
parentWidth
)
}
%
;
i
+
+
;
}
)
;
}
allColumnsAtMinWidth
(
)
{
const
visibleColumns
=
this
.
getVisibleColumns
(
)
;
for
(
let
i
=
0
;
i
<
visibleColumns
.
length
-
1
;
i
+
+
)
{
const
{
name
}
=
visibleColumns
[
i
]
;
const
headerRef
=
this
.
refs
[
{
name
}
Header
]
;
const
minColWidth
=
this
.
getMinWidth
(
name
)
;
if
(
headerRef
.
getBoundingClientRect
(
)
.
width
>
minColWidth
)
{
return
false
;
}
}
return
true
;
}
autoSizeWidths
(
changeInWidth
visibleColumns
)
{
const
widths
=
visibleColumns
.
map
(
col
=
>
{
const
headerRef
=
this
.
refs
[
{
col
.
name
}
Header
]
;
const
colWidth
=
headerRef
.
getBoundingClientRect
(
)
.
width
;
return
colWidth
;
}
)
;
const
changeInWidthPerColumn
=
changeInWidth
/
(
widths
.
length
-
1
)
;
while
(
changeInWidth
)
{
const
lastChangeInWidth
=
changeInWidth
;
for
(
let
i
=
0
;
i
<
widths
.
length
-
1
;
i
+
+
)
{
const
{
name
}
=
visibleColumns
[
i
]
;
const
minColWidth
=
this
.
getMinWidth
(
name
)
;
const
newColWidth
=
Math
.
max
(
widths
[
i
]
+
changeInWidthPerColumn
minColWidth
)
;
widths
[
i
]
=
newColWidth
;
if
(
changeInWidth
>
0
)
{
changeInWidth
-
=
newColWidth
-
widths
[
i
]
;
}
else
{
changeInWidth
+
=
newColWidth
-
widths
[
i
]
;
}
if
(
!
changeInWidth
)
{
break
;
}
}
if
(
lastChangeInWidth
=
=
changeInWidth
)
{
break
;
}
}
return
widths
;
}
shouldUpdateWidths
(
)
{
const
visibleColumns
=
this
.
getVisibleColumns
(
)
;
let
totalPercent
=
0
;
visibleColumns
.
forEach
(
col
=
>
{
const
{
name
}
=
col
;
const
headerRef
=
this
.
refs
[
{
name
}
Header
]
;
let
widthFromStyle
=
0
;
if
(
headerRef
.
getBoundingClientRect
(
)
.
width
>
0
)
{
widthFromStyle
=
headerRef
.
style
.
width
.
slice
(
0
-
1
)
;
}
totalPercent
+
=
+
widthFromStyle
;
}
)
;
return
Math
.
round
(
totalPercent
)
!
=
=
100
&
&
totalPercent
!
=
=
0
;
}
updateColumnsWidth
(
)
{
const
visibleColumns
=
this
.
getVisibleColumns
(
)
;
const
parentEl
=
document
.
querySelector
(
"
.
requests
-
list
-
headers
"
)
;
const
parentElRect
=
parentEl
.
getBoundingClientRect
(
)
;
const
parentWidth
=
parentElRect
.
width
;
const
newWidths
=
[
]
;
visibleColumns
.
forEach
(
col
=
>
{
const
{
name
}
=
col
;
const
headerRef
=
this
.
refs
[
{
name
}
Header
]
;
const
headerWidth
=
headerRef
.
getBoundingClientRect
(
)
.
width
;
const
width
=
this
.
px2percent
(
headerWidth
parentWidth
)
;
if
(
width
>
0
)
{
newWidths
.
push
(
{
name
width
}
)
;
}
}
)
;
this
.
props
.
setColumnsWidth
(
newWidths
)
;
}
px2percent
(
pxWidth
parentWidth
)
{
const
percent
=
Math
.
round
(
(
(
100
*
pxWidth
)
/
parentWidth
)
*
100
)
/
100
;
return
percent
;
}
getVisibleColumns
(
)
{
const
{
columns
}
=
this
.
props
;
return
HEADERS
.
filter
(
header
=
>
columns
[
header
.
name
]
)
;
}
getMinWidth
(
colName
)
{
const
{
columnsData
}
=
this
.
props
;
if
(
columnsData
.
has
(
colName
)
)
{
return
columnsData
.
get
(
colName
)
.
minWidth
;
}
return
MIN_COLUMN_WIDTH
;
}
renderColumn
(
header
)
{
const
{
columnsData
}
=
this
.
props
;
const
visibleColumns
=
this
.
getVisibleColumns
(
)
;
const
lastVisibleColumn
=
visibleColumns
[
visibleColumns
.
length
-
1
]
.
name
;
const
{
name
}
=
header
;
const
boxName
=
header
.
boxName
|
|
name
;
const
label
=
header
.
noLocalization
?
name
:
L10N
.
getStr
(
netmonitor
.
toolbar
.
{
header
.
label
|
|
name
}
)
;
const
{
scale
sort
waterfallWidth
}
=
this
.
props
;
let
sorted
sortedTitle
;
const
active
=
sort
.
type
=
=
name
?
true
:
undefined
;
if
(
active
)
{
sorted
=
sort
.
ascending
?
"
ascending
"
:
"
descending
"
;
sortedTitle
=
L10N
.
getStr
(
sort
.
ascending
?
"
networkMenu
.
sortedAsc
"
:
"
networkMenu
.
sortedDesc
"
)
;
}
let
colWidth
=
DEFAULT_COLUMN_WIDTH
;
if
(
columnsData
.
has
(
name
)
)
{
const
oneColumnEl
=
columnsData
.
get
(
name
)
;
colWidth
=
oneColumnEl
.
width
;
}
const
columnStyle
=
{
width
:
colWidth
+
"
%
"
}
;
const
draggable
=
Draggable
(
{
className
:
"
column
-
resizer
"
title
:
L10N
.
getStr
(
"
netmonitor
.
toolbar
.
resizeColumnToFitContent
.
title
"
)
onStart
:
(
)
=
>
this
.
onStartMove
(
)
onStop
:
(
)
=
>
this
.
onStopMove
(
)
onMove
:
x
=
>
this
.
onMove
(
name
x
)
onDoubleClick
:
(
)
=
>
this
.
resizeColumnToFitContent
(
name
)
}
)
;
return
dom
.
th
(
{
id
:
requests
-
list
-
{
boxName
}
-
header
-
box
className
:
requests
-
list
-
column
requests
-
list
-
{
boxName
}
scope
:
"
col
"
style
:
columnStyle
key
:
name
ref
:
{
name
}
Header
"
data
-
active
"
:
active
}
name
=
=
=
"
override
"
?
button
(
{
id
:
requests
-
list
-
{
name
}
-
button
className
:
requests
-
list
-
header
-
button
title
:
label
}
div
(
{
className
:
"
button
-
text
"
}
label
)
)
:
button
(
{
id
:
requests
-
list
-
{
name
}
-
button
className
:
requests
-
list
-
header
-
button
"
data
-
sorted
"
:
sorted
"
data
-
name
"
:
name
title
:
sortedTitle
?
{
label
}
(
{
sortedTitle
}
)
:
label
onClick
:
evt
=
>
this
.
onHeaderClick
(
evt
name
)
}
name
=
=
=
"
waterfall
"
?
this
.
waterfallLabel
(
waterfallWidth
scale
label
)
:
div
(
{
className
:
"
button
-
text
"
}
label
)
div
(
{
className
:
"
button
-
icon
"
}
)
)
name
!
=
=
lastVisibleColumn
&
&
draggable
)
;
}
renderColumns
(
)
{
const
visibleColumns
=
this
.
getVisibleColumns
(
)
;
return
visibleColumns
.
map
(
header
=
>
this
.
renderColumn
(
header
)
)
;
}
render
(
)
{
return
dom
.
thead
(
{
className
:
"
requests
-
list
-
headers
-
group
"
}
dom
.
tr
(
{
className
:
"
requests
-
list
-
headers
"
onContextMenu
:
this
.
onContextMenu
ref
:
node
=
>
{
this
.
requestListHeader
=
node
;
}
}
this
.
renderColumns
(
)
)
)
;
}
}
const
RequestListHeader
=
connect
(
(
state
props
)
=
>
(
{
columns
:
getColumns
(
state
props
.
hasOverride
)
columnsData
:
state
.
ui
.
columnsData
firstRequestStartedMs
:
state
.
requests
.
firstStartedMs
scale
:
getWaterfallScale
(
state
)
sort
:
state
.
sort
timingMarkers
:
state
.
timingMarkers
waterfallWidth
:
state
.
ui
.
waterfallWidth
}
)
dispatch
=
>
(
{
resetColumns
:
(
)
=
>
dispatch
(
Actions
.
resetColumns
(
)
)
resetSorting
:
(
)
=
>
dispatch
(
Actions
.
sortBy
(
null
)
)
resizeWaterfall
:
width
=
>
dispatch
(
Actions
.
resizeWaterfall
(
width
)
)
sortBy
:
type
=
>
dispatch
(
Actions
.
sortBy
(
type
)
)
toggleColumn
:
column
=
>
dispatch
(
Actions
.
toggleColumn
(
column
)
)
setColumnsWidth
:
widths
=
>
dispatch
(
Actions
.
setColumnsWidth
(
widths
)
)
}
)
)
(
RequestListHeaderContent
)
;
module
.
exports
=
connect
(
state
=
>
{
return
{
hasOverride
:
hasOverride
(
state
)
}
;
}
{
}
undefined
{
storeKey
:
"
toolbox
-
store
"
}
)
(
RequestListHeader
)
;
