"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
{
L10N
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
)
;
const
{
decodeUnicodeBase64
fetchNetworkUpdatePacket
parseJSON
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
request
-
utils
.
js
"
)
;
const
{
getCORSErrorURL
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
doc
-
utils
.
js
"
)
;
const
{
Filters
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
filter
-
predicates
.
js
"
)
;
const
{
FILTER_SEARCH_DELAY
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
constants
.
js
"
)
;
const
{
BLOCKED_REASON_MESSAGES
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
constants
.
js
"
)
;
const
PropertiesView
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
components
/
request
-
details
/
PropertiesView
.
js
"
)
)
;
const
ImagePreview
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
components
/
previews
/
ImagePreview
.
js
"
)
)
;
const
FontPreview
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
components
/
previews
/
FontPreview
.
js
"
)
)
;
const
SourcePreview
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
components
/
previews
/
SourcePreview
.
js
"
)
)
;
const
HtmlPreview
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
components
/
previews
/
HtmlPreview
.
js
"
)
)
;
let
{
NotificationBox
PriorityLevels
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
NotificationBox
.
js
"
)
;
NotificationBox
=
createFactory
(
NotificationBox
)
;
const
MessagesView
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
components
/
messages
/
MessagesView
.
js
"
)
)
;
const
SearchBox
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
SearchBox
.
js
"
)
)
;
loader
.
lazyGetter
(
this
"
MODE
"
function
(
)
{
return
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
index
.
js
"
)
.
MODE
;
}
)
;
const
{
div
input
label
span
h2
}
=
dom
;
const
JSON_SCOPE_NAME
=
L10N
.
getStr
(
"
jsonScopeName
"
)
;
const
JSON_FILTER_TEXT
=
L10N
.
getStr
(
"
jsonFilterText
"
)
;
const
RESPONSE_PAYLOAD
=
L10N
.
getStr
(
"
responsePayload
"
)
;
const
RAW_RESPONSE_PAYLOAD
=
L10N
.
getStr
(
"
netmonitor
.
response
.
raw
"
)
;
const
HTML_RESPONSE
=
L10N
.
getStr
(
"
netmonitor
.
response
.
html
"
)
;
const
RESPONSE_EMPTY_TEXT
=
L10N
.
getStr
(
"
responseEmptyText
"
)
;
const
RESPONSE_TRUNCATED
=
L10N
.
getStr
(
"
responseTruncated
"
)
;
const
JSON_VIEW_MIME_TYPE
=
"
application
/
vnd
.
mozilla
.
json
.
view
"
;
class
ResponsePanel
extends
Component
{
static
get
propTypes
(
)
{
return
{
request
:
PropTypes
.
object
.
isRequired
openLink
:
PropTypes
.
func
targetSearchResult
:
PropTypes
.
object
connector
:
PropTypes
.
object
.
isRequired
showMessagesView
:
PropTypes
.
bool
defaultRawResponse
:
PropTypes
.
bool
setDefaultRawResponse
:
PropTypes
.
func
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
filterText
:
"
"
rawResponsePayloadDisplayed
:
!
!
props
.
targetSearchResult
|
|
!
!
props
.
defaultRawResponse
}
;
this
.
toggleRawResponsePayload
=
this
.
toggleRawResponsePayload
.
bind
(
this
)
;
this
.
renderCORSBlockedReason
=
this
.
renderCORSBlockedReason
.
bind
(
this
)
;
this
.
renderRawResponsePayloadBtn
=
this
.
renderRawResponsePayloadBtn
.
bind
(
this
)
;
this
.
renderJsonHtmlAndSource
=
this
.
renderJsonHtmlAndSource
.
bind
(
this
)
;
this
.
handleJSONResponse
=
this
.
handleJSONResponse
.
bind
(
this
)
;
}
componentDidMount
(
)
{
const
{
request
connector
}
=
this
.
props
;
fetchNetworkUpdatePacket
(
connector
.
requestData
request
[
"
responseContent
"
]
)
;
}
UNSAFE_componentWillReceiveProps
(
nextProps
)
{
const
{
request
connector
}
=
nextProps
;
fetchNetworkUpdatePacket
(
connector
.
requestData
request
[
"
responseContent
"
]
)
;
const
text
=
nextProps
.
request
?
.
responseContent
?
.
content
?
.
text
;
const
xssiStrippedChars
=
text
&
&
parseJSON
(
text
)
?
.
strippedChars
;
if
(
xssiStrippedChars
&
&
!
this
.
state
.
rawResponsePayloadDisplayed
)
{
this
.
toggleRawResponsePayload
(
)
;
}
if
(
nextProps
.
targetSearchResult
!
=
=
null
)
{
this
.
setState
(
{
rawResponsePayloadDisplayed
:
!
!
nextProps
.
targetSearchResult
}
)
;
}
}
shouldComponentUpdate
(
nextProps
nextState
)
{
return
(
this
.
state
!
=
=
nextState
|
|
this
.
props
.
request
!
=
=
nextProps
.
request
|
|
nextProps
.
targetSearchResult
!
=
=
null
)
;
}
handleJSONResponse
(
mimeType
response
)
{
const
limit
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
netmonitor
.
responseBodyLimit
"
)
;
const
{
request
}
=
this
.
props
;
if
(
limit
>
0
&
&
limit
<
=
request
.
responseContent
.
content
.
size
)
{
const
result
=
{
}
;
result
.
error
=
RESPONSE_TRUNCATED
;
return
result
;
}
const
{
json
error
jsonpCallback
strippedChars
}
=
parseJSON
(
response
)
;
if
(
/
\
bjson
/
.
test
(
mimeType
)
|
|
json
)
{
const
result
=
{
}
;
if
(
json
)
{
result
.
json
=
json
;
}
if
(
jsonpCallback
)
{
result
.
jsonpCallback
=
jsonpCallback
;
}
if
(
error
)
{
result
.
error
=
"
"
+
error
;
}
if
(
strippedChars
)
{
result
.
strippedChars
=
strippedChars
;
}
return
result
;
}
return
null
;
}
renderCORSBlockedReason
(
blockedReason
)
{
if
(
typeof
blockedReason
!
=
"
number
"
|
|
blockedReason
<
1000
|
|
blockedReason
>
1015
)
{
return
null
;
}
const
blockedMessage
=
BLOCKED_REASON_MESSAGES
[
blockedReason
]
;
const
messageText
=
L10N
.
getFormatStr
(
"
netmonitor
.
headers
.
blockedByCORS
"
blockedMessage
)
;
const
learnMoreTooltip
=
L10N
.
getStr
(
"
netmonitor
.
headers
.
blockedByCORSTooltip
"
)
;
const
notifications
=
new
Map
(
)
;
notifications
.
set
(
"
CORS
-
error
"
{
label
:
messageText
value
:
"
CORS
-
error
"
image
:
"
"
priority
:
PriorityLevels
.
PRIORITY_INFO_HIGH
type
:
"
info
"
eventCallback
:
(
)
=
>
{
}
buttons
:
[
{
mdnUrl
:
getCORSErrorURL
(
blockedReason
)
label
:
learnMoreTooltip
}
]
}
)
;
return
NotificationBox
(
{
notifications
displayBorderTop
:
false
displayBorderBottom
:
true
displayCloseButton
:
false
}
)
;
}
toggleRawResponsePayload
(
)
{
this
.
setState
(
{
rawResponsePayloadDisplayed
:
!
this
.
state
.
rawResponsePayloadDisplayed
}
)
;
}
renderJsonHtmlAndSource
(
)
{
const
{
request
targetSearchResult
}
=
this
.
props
;
const
{
responseContent
}
=
request
;
let
{
encoding
mimeType
text
}
=
responseContent
.
content
;
const
{
filterText
rawResponsePayloadDisplayed
}
=
this
.
state
;
if
(
mimeType
?
.
includes
(
JSON_VIEW_MIME_TYPE
)
&
&
encoding
=
=
=
"
base64
"
)
{
text
=
decodeUnicodeBase64
(
text
)
;
}
const
{
json
jsonpCallback
error
strippedChars
}
=
this
.
handleJSONResponse
(
mimeType
text
)
|
|
{
}
;
let
component
;
let
componentProps
;
let
xssiStrippedCharsInfoBox
;
let
responsePayloadLabel
=
RESPONSE_PAYLOAD
;
let
hasFormattedDisplay
=
false
;
if
(
json
)
{
if
(
jsonpCallback
)
{
responsePayloadLabel
=
L10N
.
getFormatStr
(
"
jsonpScopeName
"
jsonpCallback
)
;
}
else
{
responsePayloadLabel
=
JSON_SCOPE_NAME
;
}
if
(
!
rawResponsePayloadDisplayed
)
{
xssiStrippedCharsInfoBox
=
this
.
renderXssiStrippedCharsInfoBox
(
strippedChars
)
;
}
else
{
xssiStrippedCharsInfoBox
=
null
;
}
component
=
PropertiesView
;
componentProps
=
{
object
:
json
useQuotes
:
true
filterText
targetSearchResult
defaultSelectFirstNode
:
false
mode
:
MODE
.
LONG
useBaseTreeViewExpand
:
true
}
;
hasFormattedDisplay
=
true
;
}
else
if
(
Filters
.
html
(
this
.
props
.
request
)
)
{
responsePayloadLabel
=
HTML_RESPONSE
;
component
=
HtmlPreview
;
componentProps
=
{
responseContent
}
;
hasFormattedDisplay
=
true
;
}
if
(
!
hasFormattedDisplay
|
|
rawResponsePayloadDisplayed
)
{
component
=
SourcePreview
;
componentProps
=
{
text
mode
:
json
?
"
application
/
json
"
:
mimeType
.
replace
(
/
;
.
+
/
"
"
)
targetSearchResult
}
;
}
return
{
component
componentProps
error
hasFormattedDisplay
json
responsePayloadLabel
xssiStrippedCharsInfoBox
}
;
}
renderRawResponsePayloadBtn
(
key
checked
)
{
return
[
label
(
{
key
:
{
key
}
RawResponsePayloadBtn
className
:
"
raw
-
data
-
toggle
"
htmlFor
:
raw
-
{
key
}
-
checkbox
onClick
:
event
=
>
{
event
.
stopPropagation
(
)
;
}
}
span
(
{
className
:
"
raw
-
data
-
toggle
-
label
"
}
RAW_RESPONSE_PAYLOAD
)
span
(
{
className
:
"
raw
-
data
-
toggle
-
input
"
}
input
(
{
id
:
raw
-
{
key
}
-
checkbox
checked
className
:
"
devtools
-
checkbox
-
toggle
"
onChange
:
event
=
>
{
this
.
props
.
setDefaultRawResponse
(
event
.
target
.
checked
)
;
this
.
toggleRawResponsePayload
(
)
;
}
type
:
"
checkbox
"
}
)
)
)
]
;
}
renderResponsePayload
(
component
componentProps
)
{
return
component
(
componentProps
)
;
}
renderXssiStrippedCharsInfoBox
(
strippedChars
)
{
if
(
!
strippedChars
|
|
this
.
state
.
rawRequestPayloadDisplayed
)
{
return
null
;
}
const
message
=
L10N
.
getFormatStr
(
"
jsonXssiStripped
"
strippedChars
)
;
const
notifications
=
new
Map
(
)
;
notifications
.
set
(
"
xssi
-
string
-
removed
-
info
-
box
"
{
label
:
message
value
:
"
xssi
-
string
-
removed
-
info
-
box
"
image
:
"
"
priority
:
PriorityLevels
.
PRIORITY_INFO_MEDIUM
type
:
"
info
"
eventCallback
:
(
)
=
>
{
}
buttons
:
[
]
}
)
;
return
NotificationBox
(
{
notifications
displayBorderTop
:
false
displayBorderBottom
:
true
displayCloseButton
:
false
}
)
;
}
render
(
)
{
const
{
connector
showMessagesView
request
}
=
this
.
props
;
const
{
blockedReason
responseContent
url
}
=
request
;
const
{
filterText
rawResponsePayloadDisplayed
}
=
this
.
state
;
const
CORSBlockedReasonDetails
=
this
.
renderCORSBlockedReason
(
blockedReason
)
;
if
(
showMessagesView
)
{
return
MessagesView
(
{
connector
}
)
;
}
if
(
!
responseContent
|
|
typeof
responseContent
.
content
.
text
!
=
=
"
string
"
|
|
!
responseContent
.
content
.
text
)
{
return
div
(
{
className
:
"
panel
-
container
"
}
CORSBlockedReasonDetails
div
(
{
className
:
"
empty
-
notice
"
}
RESPONSE_EMPTY_TEXT
)
)
;
}
const
{
encoding
mimeType
text
}
=
responseContent
.
content
;
if
(
Filters
.
images
(
{
mimeType
}
)
)
{
return
ImagePreview
(
{
encoding
mimeType
text
url
}
)
;
}
if
(
Filters
.
fonts
(
{
url
mimeType
}
)
)
{
return
FontPreview
(
{
connector
mimeType
url
}
)
;
}
const
{
component
componentProps
error
hasFormattedDisplay
json
responsePayloadLabel
xssiStrippedCharsInfoBox
}
=
this
.
renderJsonHtmlAndSource
(
)
;
const
classList
=
[
"
panel
-
container
"
]
;
if
(
Filters
.
html
(
this
.
props
.
request
)
)
{
classList
.
push
(
"
contains
-
html
-
preview
"
)
;
}
return
div
(
{
className
:
classList
.
join
(
"
"
)
}
error
&
&
div
(
{
className
:
"
response
-
error
-
header
"
title
:
error
}
error
)
json
&
&
div
(
{
className
:
"
devtools
-
toolbar
devtools
-
input
-
toolbar
"
}
SearchBox
(
{
delay
:
FILTER_SEARCH_DELAY
type
:
"
filter
"
onChange
:
filter
=
>
this
.
setState
(
{
filterText
:
filter
}
)
placeholder
:
JSON_FILTER_TEXT
value
:
filterText
}
)
)
div
(
{
tabIndex
:
"
0
"
}
CORSBlockedReasonDetails
)
h2
(
{
className
:
"
data
-
header
"
role
:
"
heading
"
}
[
span
(
{
key
:
"
data
-
label
"
className
:
"
data
-
label
"
}
responsePayloadLabel
)
hasFormattedDisplay
&
&
this
.
renderRawResponsePayloadBtn
(
"
response
"
rawResponsePayloadDisplayed
)
]
)
xssiStrippedCharsInfoBox
this
.
renderResponsePayload
(
component
componentProps
)
)
;
}
}
module
.
exports
=
ResponsePanel
;
