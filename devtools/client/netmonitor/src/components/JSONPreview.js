"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
TreeView
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
tree
/
TreeView
"
)
)
;
loader
.
lazyGetter
(
this
"
Rep
"
function
(
)
{
return
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
"
)
.
REPS
.
Rep
;
}
)
;
loader
.
lazyGetter
(
this
"
MODE
"
function
(
)
{
return
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
"
)
.
MODE
;
}
)
;
class
JSONPreview
extends
Component
{
static
get
propTypes
(
)
{
return
{
renderValue
:
PropTypes
.
func
cropLimit
:
PropTypes
.
number
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
renderValueWithRep
=
this
.
renderValueWithRep
.
bind
(
this
)
;
}
renderValueWithRep
(
props
)
{
const
{
member
}
=
props
;
if
(
(
member
.
level
=
=
=
0
&
&
member
.
type
=
=
=
"
object
"
)
|
|
(
typeof
member
.
value
=
=
=
"
object
"
&
&
member
.
value
?
.
value
)
)
{
return
null
;
}
return
Rep
(
Object
.
assign
(
props
{
member
:
Object
.
assign
(
{
}
member
{
open
:
false
}
)
mode
:
MODE
.
LONG
cropLimit
:
this
.
props
.
cropLimit
noGrip
:
true
}
)
)
;
}
render
(
)
{
return
dom
.
div
(
{
className
:
"
tree
-
container
"
}
TreeView
(
{
.
.
.
this
.
props
renderValue
:
this
.
props
.
renderValue
|
|
this
.
renderValueWithRep
}
)
)
;
}
}
module
.
exports
=
JSONPreview
;
