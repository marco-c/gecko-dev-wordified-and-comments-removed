"
use
strict
"
;
const
{
Component
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
{
div
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
{
L10N
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
)
;
const
{
propertiesEqual
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
request
-
utils
.
js
"
)
;
const
UPDATED_DOMAIN_PROPS
=
[
"
remoteAddress
"
"
securityState
"
"
urlDetails
"
]
;
class
SecurityState
extends
Component
{
static
get
propTypes
(
)
{
return
{
item
:
PropTypes
.
object
.
isRequired
onSecurityIconMouseDown
:
PropTypes
.
func
.
isRequired
}
;
}
shouldComponentUpdate
(
nextProps
)
{
return
!
propertiesEqual
(
UPDATED_DOMAIN_PROPS
this
.
props
.
item
nextProps
.
item
)
;
}
render
(
)
{
const
{
item
onSecurityIconMouseDown
}
=
this
.
props
;
const
{
securityState
urlDetails
:
{
isLocal
}
}
=
item
;
const
iconClassList
=
[
"
requests
-
security
-
state
-
icon
"
]
;
let
iconTitle
;
let
realSecurityState
=
securityState
;
if
(
isLocal
)
{
realSecurityState
=
"
secure
"
;
}
if
(
realSecurityState
)
{
iconClassList
.
push
(
security
-
state
-
{
realSecurityState
}
)
;
iconTitle
=
L10N
.
getStr
(
netmonitor
.
security
.
state
.
{
realSecurityState
}
)
;
}
return
div
(
{
className
:
"
requests
-
security
-
icon
-
group
"
}
div
(
{
className
:
iconClassList
.
join
(
"
"
)
onMouseDown
:
onSecurityIconMouseDown
title
:
iconTitle
}
)
item
.
isThirdPartyTrackingResource
&
&
div
(
{
className
:
"
tracking
-
resource
"
title
:
L10N
.
getStr
(
"
netmonitor
.
trackingResource
.
tooltip
"
)
}
)
)
;
}
}
module
.
exports
=
SecurityState
;
