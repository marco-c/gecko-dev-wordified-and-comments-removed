"
use
strict
"
;
const
{
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
findDOMNode
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
L10N
}
=
require
(
"
.
.
/
utils
/
l10n
"
)
;
loader
.
lazyGetter
(
this
"
HarImporter
"
function
(
)
{
return
require
(
"
.
.
/
har
/
har
-
importer
"
)
.
HarImporter
;
}
)
;
loader
.
lazyRequireGetter
(
this
"
HarMenuUtils
"
"
devtools
/
client
/
netmonitor
/
src
/
har
/
har
-
menu
-
utils
"
true
)
;
const
{
div
}
=
dom
;
const
DROP_HAR_FILES
=
L10N
.
getStr
(
"
netmonitor
.
label
.
dropHarFiles
"
)
;
class
DropHarHandler
extends
Component
{
static
get
propTypes
(
)
{
return
{
actions
:
PropTypes
.
object
.
isRequired
children
:
PropTypes
.
element
.
isRequired
openSplitConsole
:
PropTypes
.
func
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
onDragEnter
=
this
.
onDragEnter
.
bind
(
this
)
;
this
.
onDragOver
=
this
.
onDragOver
.
bind
(
this
)
;
this
.
onDragExit
=
this
.
onDragExit
.
bind
(
this
)
;
this
.
onDrop
=
this
.
onDrop
.
bind
(
this
)
;
}
onDragEnter
(
event
)
{
event
.
preventDefault
(
)
;
startDragging
(
findDOMNode
(
this
)
)
;
}
onDragExit
(
event
)
{
event
.
preventDefault
(
)
;
stopDragging
(
findDOMNode
(
this
)
)
;
}
onDragOver
(
event
)
{
event
.
preventDefault
(
)
;
event
.
dataTransfer
.
dropEffect
=
"
copy
"
;
}
onDrop
(
event
)
{
event
.
preventDefault
(
)
;
stopDragging
(
findDOMNode
(
this
)
)
;
let
files
=
event
.
dataTransfer
.
files
;
if
(
!
files
)
{
return
;
}
let
{
actions
openSplitConsole
}
=
this
.
props
;
if
(
files
.
length
)
{
let
file
=
files
[
0
]
;
readFile
(
file
)
.
then
(
har
=
>
{
if
(
har
)
{
HarMenuUtils
.
appendPreview
(
har
actions
openSplitConsole
)
;
}
}
)
;
}
}
render
(
)
{
return
(
div
(
{
onDragEnter
:
this
.
onDragEnter
onDragOver
:
this
.
onDragOver
onDragExit
:
this
.
onDragExit
onDrop
:
this
.
onDrop
}
this
.
props
.
children
div
(
{
className
:
"
dropHarFiles
"
}
div
(
{
}
DROP_HAR_FILES
)
)
)
)
;
}
}
function
readFile
(
file
)
{
return
new
Promise
(
resolve
=
>
{
let
fileReader
=
new
FileReader
(
)
;
fileReader
.
onloadend
=
(
)
=
>
{
resolve
(
fileReader
.
result
)
;
}
;
fileReader
.
readAsText
(
file
)
;
}
)
;
}
function
startDragging
(
node
)
{
node
.
setAttribute
(
"
dragging
"
"
true
"
)
;
}
function
stopDragging
(
node
)
{
node
.
removeAttribute
(
"
dragging
"
)
;
}
module
.
exports
=
DropHarHandler
;
