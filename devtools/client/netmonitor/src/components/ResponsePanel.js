"
use
strict
"
;
const
{
Component
createFactory
DOM
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
L10N
}
=
require
(
"
.
.
/
utils
/
l10n
"
)
;
const
{
decodeUnicodeBase64
formDataURI
getUrlBaseName
}
=
require
(
"
.
.
/
utils
/
request
-
utils
"
)
;
const
{
Filters
}
=
require
(
"
.
.
/
utils
/
filter
-
predicates
"
)
;
const
PropertiesView
=
createFactory
(
require
(
"
.
/
PropertiesView
"
)
)
;
const
{
div
img
}
=
DOM
;
const
JSON_SCOPE_NAME
=
L10N
.
getStr
(
"
jsonScopeName
"
)
;
const
JSON_FILTER_TEXT
=
L10N
.
getStr
(
"
jsonFilterText
"
)
;
const
RESPONSE_IMG_NAME
=
L10N
.
getStr
(
"
netmonitor
.
response
.
name
"
)
;
const
RESPONSE_IMG_DIMENSIONS
=
L10N
.
getStr
(
"
netmonitor
.
response
.
dimensions
"
)
;
const
RESPONSE_IMG_MIMETYPE
=
L10N
.
getStr
(
"
netmonitor
.
response
.
mime
"
)
;
const
RESPONSE_PAYLOAD
=
L10N
.
getStr
(
"
responsePayload
"
)
;
const
RESPONSE_PREVIEW
=
L10N
.
getStr
(
"
responsePreview
"
)
;
const
JSON_VIEW_MIME_TYPE
=
"
application
/
vnd
.
mozilla
.
json
.
view
"
;
class
ResponsePanel
extends
Component
{
static
get
propTypes
(
)
{
return
{
request
:
PropTypes
.
object
.
isRequired
openLink
:
PropTypes
.
func
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
imageDimensions
:
{
width
:
0
height
:
0
}
}
;
this
.
updateImageDimemsions
=
this
.
updateImageDimemsions
.
bind
(
this
)
;
this
.
isJSON
=
this
.
isJSON
.
bind
(
this
)
;
}
updateImageDimemsions
(
{
target
}
)
{
this
.
setState
(
{
imageDimensions
:
{
width
:
target
.
naturalWidth
height
:
target
.
naturalHeight
}
}
)
;
}
isJSON
(
mimeType
response
)
{
let
json
error
;
try
{
json
=
JSON
.
parse
(
response
)
;
}
catch
(
err
)
{
try
{
json
=
JSON
.
parse
(
atob
(
response
)
)
;
}
catch
(
err64
)
{
error
=
err
;
}
}
if
(
/
\
bjson
/
.
test
(
mimeType
)
|
|
json
)
{
let
jsonpRegex
=
/
^
\
s
*
(
[
\
w
]
+
)
\
s
*
\
(
\
s
*
(
[
^
]
*
)
\
s
*
\
)
\
s
*
;
?
\
s
*
/
;
let
[
jsonpCallback
jsonp
]
=
response
.
match
(
jsonpRegex
)
|
|
[
]
;
let
result
=
{
}
;
if
(
jsonpCallback
&
&
jsonp
)
{
error
=
null
;
try
{
json
=
JSON
.
parse
(
jsonp
)
;
}
catch
(
err
)
{
error
=
err
;
}
}
if
(
json
)
{
result
.
json
=
json
;
}
if
(
jsonpCallback
)
{
result
.
jsonpCallback
=
jsonpCallback
;
}
if
(
error
)
{
result
.
error
=
"
"
+
error
;
}
return
result
;
}
return
null
;
}
render
(
)
{
let
{
openLink
request
}
=
this
.
props
;
let
{
responseContent
url
}
=
request
;
if
(
!
responseContent
|
|
typeof
responseContent
.
content
.
text
!
=
=
"
string
"
)
{
return
null
;
}
let
{
encoding
mimeType
text
}
=
responseContent
.
content
;
if
(
mimeType
.
includes
(
"
image
/
"
)
)
{
let
{
width
height
}
=
this
.
state
.
imageDimensions
;
return
(
div
(
{
className
:
"
panel
-
container
response
-
image
-
box
devtools
-
monospace
"
}
img
(
{
className
:
"
response
-
image
"
src
:
formDataURI
(
mimeType
encoding
text
)
onLoad
:
this
.
updateImageDimemsions
}
)
div
(
{
className
:
"
response
-
summary
"
}
div
(
{
className
:
"
tabpanel
-
summary
-
label
"
}
RESPONSE_IMG_NAME
)
div
(
{
className
:
"
tabpanel
-
summary
-
value
"
}
getUrlBaseName
(
url
)
)
)
div
(
{
className
:
"
response
-
summary
"
}
div
(
{
className
:
"
tabpanel
-
summary
-
label
"
}
RESPONSE_IMG_DIMENSIONS
)
div
(
{
className
:
"
tabpanel
-
summary
-
value
"
}
{
width
}
{
height
}
)
)
div
(
{
className
:
"
response
-
summary
"
}
div
(
{
className
:
"
tabpanel
-
summary
-
label
"
}
RESPONSE_IMG_MIMETYPE
)
div
(
{
className
:
"
tabpanel
-
summary
-
value
"
}
mimeType
)
)
)
)
;
}
if
(
mimeType
.
includes
(
JSON_VIEW_MIME_TYPE
)
&
&
encoding
=
=
=
"
base64
"
)
{
text
=
decodeUnicodeBase64
(
text
)
;
}
let
{
json
jsonpCallback
error
}
=
this
.
isJSON
(
mimeType
text
)
|
|
{
}
;
let
object
=
{
}
;
let
sectionName
;
if
(
json
)
{
if
(
jsonpCallback
)
{
sectionName
=
L10N
.
getFormatStr
(
"
jsonpScopeName
"
jsonpCallback
)
;
}
else
{
sectionName
=
JSON_SCOPE_NAME
;
}
object
[
sectionName
]
=
json
;
}
if
(
Filters
.
html
(
this
.
props
.
request
)
)
{
object
[
RESPONSE_PREVIEW
]
=
{
HTML_PREVIEW
:
{
responseContent
}
}
;
}
object
[
RESPONSE_PAYLOAD
]
=
{
EDITOR_CONFIG
:
{
text
mode
:
json
?
"
application
/
json
"
:
mimeType
.
replace
(
/
;
.
+
/
"
"
)
}
}
;
let
classList
=
[
"
panel
-
container
"
]
;
if
(
Filters
.
html
(
this
.
props
.
request
)
)
{
classList
.
push
(
"
contains
-
html
-
preview
"
)
;
}
return
(
div
(
{
className
:
classList
.
join
(
"
"
)
}
error
&
&
div
(
{
className
:
"
response
-
error
-
header
"
title
:
error
}
error
)
PropertiesView
(
{
object
filterPlaceHolder
:
JSON_FILTER_TEXT
sectionNames
:
Object
.
keys
(
object
)
openLink
}
)
)
)
;
}
}
module
.
exports
=
ResponsePanel
;
