"
use
strict
"
;
const
{
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
redux
/
visibility
-
handler
-
connect
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
Editor
=
require
(
"
devtools
/
client
/
shared
/
sourceeditor
/
editor
"
)
;
const
{
setTargetSearchResult
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
search
"
)
;
const
{
div
}
=
dom
;
class
SourceEditor
extends
Component
{
static
get
propTypes
(
)
{
return
{
mode
:
PropTypes
.
string
text
:
PropTypes
.
string
scrollToLine
:
PropTypes
.
number
resetTargetSearchResult
:
PropTypes
.
func
}
;
}
componentDidMount
(
)
{
const
{
mode
text
}
=
this
.
props
;
this
.
editor
=
new
Editor
(
{
lineNumbers
:
true
lineWrapping
:
false
mode
:
null
readOnly
:
true
theme
:
"
mozilla
"
value
:
text
}
)
;
this
.
editorTimeout
=
setTimeout
(
(
)
=
>
{
this
.
editorTimeout
=
null
;
this
.
editor
.
appendToLocalElement
(
this
.
refs
.
editorElement
)
;
this
.
editorSetModeTimeout
=
setTimeout
(
(
)
=
>
{
this
.
editorSetModeTimeout
=
null
;
this
.
editor
.
setMode
(
mode
)
;
this
.
scrollToLine
(
)
;
}
)
;
}
)
;
}
shouldComponentUpdate
(
nextProps
)
{
return
(
nextProps
.
mode
!
=
=
this
.
props
.
mode
|
|
nextProps
.
text
!
=
=
this
.
props
.
text
|
|
nextProps
.
scrollToLine
!
=
=
this
.
props
.
scrollToLine
)
;
}
componentDidUpdate
(
prevProps
)
{
const
{
mode
scrollToLine
text
}
=
this
.
props
;
if
(
this
.
editor
.
isDestroyed
(
)
)
{
return
;
}
if
(
prevProps
.
text
!
=
=
text
)
{
this
.
editor
.
setMode
(
null
)
;
this
.
editor
.
setText
(
text
)
;
if
(
this
.
editorSetModeTimeout
)
{
clearTimeout
(
this
.
editorSetModeTimeout
)
;
}
this
.
editorSetModeTimeout
=
setTimeout
(
(
)
=
>
{
this
.
editorSetModeTimeout
=
null
;
this
.
editor
.
setMode
(
mode
)
;
this
.
scrollToLine
(
)
;
}
)
;
}
else
if
(
prevProps
.
scrollToLine
!
=
=
scrollToLine
)
{
this
.
scrollToLine
(
)
;
}
}
componentWillUnmount
(
)
{
clearTimeout
(
this
.
editorTimeout
)
;
clearTimeout
(
this
.
editorSetModeTimeout
)
;
this
.
editor
.
destroy
(
)
;
}
scrollToLine
(
)
{
const
{
scrollToLine
resetTargetSearchResult
}
=
this
.
props
;
if
(
scrollToLine
)
{
this
.
editor
.
setCursor
(
{
line
:
scrollToLine
-
1
}
"
center
"
)
;
}
resetTargetSearchResult
(
)
;
}
render
(
)
{
return
div
(
{
ref
:
"
editorElement
"
className
:
"
source
-
editor
-
mount
devtools
-
monospace
"
}
)
;
}
}
module
.
exports
=
connect
(
null
dispatch
=
>
(
{
resetTargetSearchResult
:
(
)
=
>
dispatch
(
setTargetSearchResult
(
null
)
)
}
)
)
(
SourceEditor
)
;
