"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
L10N
}
=
require
(
"
.
.
/
utils
/
l10n
"
)
;
const
{
fetchNetworkUpdatePacket
}
=
require
(
"
.
.
/
utils
/
request
-
utils
"
)
;
const
{
sortObjectKeys
}
=
require
(
"
.
.
/
utils
/
sort
-
utils
"
)
;
const
PropertiesView
=
createFactory
(
require
(
"
.
/
PropertiesView
"
)
)
;
const
{
div
}
=
dom
;
const
COOKIES_EMPTY_TEXT
=
L10N
.
getStr
(
"
cookiesEmptyText
"
)
;
const
COOKIES_FILTER_TEXT
=
L10N
.
getStr
(
"
cookiesFilterText
"
)
;
const
REQUEST_COOKIES
=
L10N
.
getStr
(
"
requestCookies
"
)
;
const
RESPONSE_COOKIES
=
L10N
.
getStr
(
"
responseCookies
"
)
;
const
SECTION_NAMES
=
[
RESPONSE_COOKIES
REQUEST_COOKIES
]
;
class
CookiesPanel
extends
Component
{
static
get
propTypes
(
)
{
return
{
connector
:
PropTypes
.
object
.
isRequired
openLink
:
PropTypes
.
func
request
:
PropTypes
.
object
.
isRequired
}
;
}
componentDidMount
(
)
{
let
{
connector
request
}
=
this
.
props
;
fetchNetworkUpdatePacket
(
connector
.
requestData
request
[
"
requestCookies
"
"
responseCookies
"
]
)
;
}
componentWillReceiveProps
(
nextProps
)
{
let
{
connector
request
}
=
nextProps
;
fetchNetworkUpdatePacket
(
connector
.
requestData
request
[
"
requestCookies
"
"
responseCookies
"
]
)
;
}
getProperties
(
arr
)
{
return
arr
.
reduce
(
(
map
obj
)
=
>
{
if
(
Object
.
keys
(
obj
)
.
length
>
2
)
{
map
[
obj
.
name
]
=
Object
.
assign
(
{
}
obj
)
;
delete
map
[
obj
.
name
]
.
name
;
}
else
{
map
[
obj
.
name
]
=
obj
.
value
;
}
return
map
;
}
{
}
)
;
}
render
(
)
{
let
{
request
:
{
requestCookies
=
{
cookies
:
[
]
}
responseCookies
=
{
cookies
:
[
]
}
}
openLink
}
=
this
.
props
;
requestCookies
=
requestCookies
.
cookies
|
|
requestCookies
;
responseCookies
=
responseCookies
.
cookies
|
|
responseCookies
;
if
(
!
requestCookies
.
length
&
&
!
responseCookies
.
length
)
{
return
div
(
{
className
:
"
empty
-
notice
"
}
COOKIES_EMPTY_TEXT
)
;
}
let
object
=
{
}
;
if
(
responseCookies
.
length
)
{
object
[
RESPONSE_COOKIES
]
=
sortObjectKeys
(
this
.
getProperties
(
responseCookies
)
)
;
}
if
(
requestCookies
.
length
)
{
object
[
REQUEST_COOKIES
]
=
sortObjectKeys
(
this
.
getProperties
(
requestCookies
)
)
;
}
return
(
div
(
{
className
:
"
panel
-
container
"
}
PropertiesView
(
{
object
filterPlaceHolder
:
COOKIES_FILTER_TEXT
sectionNames
:
SECTION_NAMES
openLink
}
)
)
)
;
}
}
module
.
exports
=
CookiesPanel
;
