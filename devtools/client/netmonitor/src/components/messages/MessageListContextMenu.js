"
use
strict
"
;
const
{
L10N
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
showMenu
"
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
menu
/
utils
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
copyString
"
"
resource
:
/
/
devtools
/
shared
/
platform
/
clipboard
.
js
"
true
)
;
const
{
getMessagePayload
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
/
request
-
utils
.
js
"
)
;
const
toHexString
=
str
=
>
Array
.
from
(
str
c
=
>
c
.
charCodeAt
(
0
)
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
)
.
join
(
"
"
)
;
class
MessageListContextMenu
{
constructor
(
props
)
{
this
.
props
=
props
;
}
open
(
event
=
{
}
item
)
{
const
menuItems
=
[
]
;
if
(
this
.
props
.
showBinaryOptions
)
{
menuItems
.
push
(
{
id
:
"
message
-
list
-
context
-
copy
-
message
-
base64
"
label
:
L10N
.
getStr
(
"
netmonitor
.
ws
.
context
.
copyFrameAsBase64
"
)
accesskey
:
L10N
.
getStr
(
"
netmonitor
.
ws
.
context
.
copyFrameAsBase64
.
accesskey
"
)
click
:
(
)
=
>
this
.
copyMessagePayload
(
item
btoa
)
}
{
id
:
"
message
-
list
-
context
-
copy
-
message
-
hex
"
label
:
L10N
.
getStr
(
"
netmonitor
.
ws
.
context
.
copyFrameAsHex
"
)
accesskey
:
L10N
.
getStr
(
"
netmonitor
.
ws
.
context
.
copyFrameAsHex
.
accesskey
"
)
click
:
(
)
=
>
this
.
copyMessagePayload
(
item
toHexString
)
}
{
id
:
"
message
-
list
-
context
-
copy
-
message
-
text
"
label
:
L10N
.
getStr
(
"
netmonitor
.
ws
.
context
.
copyFrameAsText
"
)
accesskey
:
L10N
.
getStr
(
"
netmonitor
.
ws
.
context
.
copyFrameAsText
.
accesskey
"
)
click
:
(
)
=
>
this
.
copyMessagePayload
(
item
)
}
)
;
}
else
{
menuItems
.
push
(
{
id
:
"
message
-
list
-
context
-
copy
-
message
"
label
:
L10N
.
getStr
(
"
netmonitor
.
ws
.
context
.
copyFrame
"
)
accesskey
:
L10N
.
getStr
(
"
netmonitor
.
ws
.
context
.
copyFrame
.
accesskey
"
)
click
:
(
)
=
>
this
.
copyMessagePayload
(
item
)
}
)
;
}
showMenu
(
menuItems
{
screenX
:
event
.
screenX
screenY
:
event
.
screenY
}
)
;
}
copyMessagePayload
(
item
format
)
{
getMessagePayload
(
item
.
payload
this
.
props
.
connector
.
getLongString
)
.
then
(
payload
=
>
{
if
(
format
)
{
payload
=
format
(
payload
)
;
}
copyString
(
payload
)
;
}
)
;
}
}
module
.
exports
=
MessageListContextMenu
;
