"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
redux
/
visibility
-
handler
-
connect
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
Actions
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
actions
/
index
"
)
;
const
{
CHANNEL_TYPE
FILTER_SEARCH_DELAY
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
L10N
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
l10n
.
js
"
)
;
const
{
button
span
div
}
=
dom
;
const
MessageFilterMenu
=
createFactory
(
require
(
"
devtools
/
client
/
netmonitor
/
src
/
components
/
messages
/
MessageFilterMenu
"
)
)
;
const
SearchBox
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
SearchBox
"
)
)
;
const
MSG_TOOLBAR_CLEAR
=
L10N
.
getStr
(
"
netmonitor
.
ws
.
toolbar
.
clear
"
)
;
const
MSG_SEARCH_KEY_SHORTCUT
=
L10N
.
getStr
(
"
netmonitor
.
ws
.
toolbar
.
filterFreetext
.
key
"
)
;
const
MSG_SEARCH_PLACE_HOLDER
=
L10N
.
getStr
(
"
netmonitor
.
ws
.
toolbar
.
filterFreetext
.
label
"
)
;
class
Toolbar
extends
Component
{
static
get
propTypes
(
)
{
return
{
searchboxRef
:
PropTypes
.
object
.
isRequired
toggleMessageFilterType
:
PropTypes
.
func
.
isRequired
toggleControlFrames
:
PropTypes
.
func
.
isRequired
clearMessages
:
PropTypes
.
func
.
isRequired
setMessageFilterText
:
PropTypes
.
func
.
isRequired
messageFilterType
:
PropTypes
.
string
.
isRequired
showControlFrames
:
PropTypes
.
bool
.
isRequired
channelType
:
PropTypes
.
string
}
;
}
componentWillUnmount
(
)
{
const
{
setMessageFilterText
}
=
this
.
props
;
setMessageFilterText
(
"
"
)
;
}
renderSeparator
(
)
{
return
span
(
{
className
:
"
devtools
-
separator
"
}
)
;
}
renderClearButton
(
clearMessages
)
{
return
button
(
{
className
:
"
devtools
-
button
devtools
-
clear
-
icon
message
-
list
-
clear
-
button
"
title
:
MSG_TOOLBAR_CLEAR
onClick
:
(
)
=
>
{
clearMessages
(
)
;
}
}
)
;
}
renderMessageFilterMenu
(
)
{
const
{
messageFilterType
toggleMessageFilterType
showControlFrames
toggleControlFrames
}
=
this
.
props
;
return
MessageFilterMenu
(
{
messageFilterType
toggleMessageFilterType
showControlFrames
toggleControlFrames
}
)
;
}
renderFilterBox
(
setMessageFilterText
)
{
return
SearchBox
(
{
delay
:
FILTER_SEARCH_DELAY
keyShortcut
:
MSG_SEARCH_KEY_SHORTCUT
placeholder
:
MSG_SEARCH_PLACE_HOLDER
type
:
"
filter
"
ref
:
this
.
props
.
searchboxRef
onChange
:
setMessageFilterText
}
)
;
}
render
(
)
{
const
{
clearMessages
setMessageFilterText
channelType
}
=
this
.
props
;
const
isWs
=
channelType
=
=
=
CHANNEL_TYPE
.
WEB_SOCKET
;
return
div
(
{
id
:
"
netmonitor
-
toolbar
-
container
"
className
:
"
devtools
-
toolbar
devtools
-
input
-
toolbar
"
}
this
.
renderClearButton
(
clearMessages
)
isWs
?
this
.
renderSeparator
(
)
:
null
isWs
?
this
.
renderMessageFilterMenu
(
)
:
null
this
.
renderSeparator
(
)
this
.
renderFilterBox
(
setMessageFilterText
)
)
;
}
}
module
.
exports
=
connect
(
state
=
>
(
{
messageFilterType
:
state
.
messages
.
messageFilterType
showControlFrames
:
state
.
messages
.
showControlFrames
channelType
:
state
.
messages
.
currentChannelType
}
)
dispatch
=
>
(
{
clearMessages
:
(
)
=
>
dispatch
(
Actions
.
clearMessages
(
)
)
toggleMessageFilterType
:
filter
=
>
dispatch
(
Actions
.
toggleMessageFilterType
(
filter
)
)
toggleControlFrames
:
(
)
=
>
dispatch
(
Actions
.
toggleControlFrames
(
)
)
setMessageFilterText
:
text
=
>
dispatch
(
Actions
.
setMessageFilterText
(
text
)
)
}
)
)
(
Toolbar
)
;
