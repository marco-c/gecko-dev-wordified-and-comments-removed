"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
const
IHubProtocol
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
components
/
messages
/
parsers
/
signalr
/
IHubProtocol
"
)
;
const
TextMessageFormat
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
components
/
messages
/
parsers
/
signalr
/
TextMessageFormat
"
)
;
class
JsonHubProtocol
{
parseMessages
(
input
)
{
if
(
typeof
input
!
=
=
"
string
"
)
{
throw
new
Error
(
"
Invalid
input
for
JSON
hub
protocol
.
Expected
a
string
.
"
)
;
}
if
(
!
input
)
{
return
[
]
;
}
const
messages
=
TextMessageFormat
.
TextMessageFormat
.
parse
(
input
)
;
const
hubMessages
=
[
]
;
for
(
const
message
of
messages
)
{
const
parsedMessage
=
JSON
.
parse
(
message
)
;
if
(
typeof
parsedMessage
.
type
!
=
=
"
number
"
)
{
throw
new
Error
(
"
Invalid
payload
.
"
)
;
}
switch
(
parsedMessage
.
type
)
{
case
IHubProtocol
.
MessageType
.
Invocation
:
this
.
isInvocationMessage
(
parsedMessage
)
;
break
;
case
IHubProtocol
.
MessageType
.
StreamItem
:
this
.
isStreamItemMessage
(
parsedMessage
)
;
break
;
case
IHubProtocol
.
MessageType
.
Completion
:
this
.
isCompletionMessage
(
parsedMessage
)
;
break
;
case
IHubProtocol
.
MessageType
.
Ping
:
break
;
case
IHubProtocol
.
MessageType
.
Close
:
break
;
default
:
break
;
}
parsedMessage
.
type
=
IHubProtocol
.
MessageType
[
parsedMessage
.
type
]
|
|
parsedMessage
.
type
;
hubMessages
.
push
(
parsedMessage
)
;
}
return
hubMessages
;
}
writeMessage
(
message
)
{
return
TextMessageFormat
.
TextMessageFormat
.
write
(
JSON
.
stringify
(
message
)
)
;
}
isInvocationMessage
(
message
)
{
this
.
assertNotEmptyString
(
message
.
target
"
Invalid
payload
for
Invocation
message
.
"
)
;
if
(
message
.
invocationId
!
=
=
undefined
)
{
this
.
assertNotEmptyString
(
message
.
invocationId
"
Invalid
payload
for
Invocation
message
.
"
)
;
}
}
isStreamItemMessage
(
message
)
{
this
.
assertNotEmptyString
(
message
.
invocationId
"
Invalid
payload
for
StreamItem
message
.
"
)
;
if
(
message
.
item
=
=
=
undefined
)
{
throw
new
Error
(
"
Invalid
payload
for
StreamItem
message
.
"
)
;
}
}
isCompletionMessage
(
message
)
{
if
(
message
.
result
&
&
message
.
error
)
{
throw
new
Error
(
"
Invalid
payload
for
Completion
message
.
"
)
;
}
if
(
!
message
.
result
&
&
message
.
error
)
{
this
.
assertNotEmptyString
(
message
.
error
"
Invalid
payload
for
Completion
message
.
"
)
;
}
this
.
assertNotEmptyString
(
message
.
invocationId
"
Invalid
payload
for
Completion
message
.
"
)
;
}
assertNotEmptyString
(
value
errorMessage
)
{
if
(
typeof
value
!
=
=
"
string
"
|
|
value
=
=
=
"
"
)
{
throw
new
Error
(
errorMessage
)
;
}
}
}
exports
.
JsonHubProtocol
=
JsonHubProtocol
;
