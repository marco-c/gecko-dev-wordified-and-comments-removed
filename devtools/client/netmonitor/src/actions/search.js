"
use
strict
"
;
const
{
ADD_SEARCH_QUERY
ADD_SEARCH_RESULT
CLEAR_SEARCH_RESULTS
ADD_ONGOING_SEARCH
OPEN_SEARCH
CLOSE_SEARCH
UPDATE_SEARCH_STATUS
SEARCH_STATUS
}
=
require
(
"
.
.
/
constants
"
)
;
const
{
getDisplayedRequests
getOngoingSearch
getSearchStatus
getRequestById
}
=
require
(
"
.
.
/
selectors
/
index
"
)
;
const
{
fetchNetworkUpdatePacket
}
=
require
(
"
.
.
/
utils
/
request
-
utils
"
)
;
const
{
searchInResource
}
=
require
(
"
.
.
/
workers
/
search
/
index
"
)
;
function
search
(
connector
query
)
{
let
cancelled
=
false
;
const
newOngoingSearch
=
async
(
dispatch
getState
)
=
>
{
const
state
=
getState
(
)
;
dispatch
(
stopOngoingSearch
(
)
)
;
await
dispatch
(
addOngoingSearch
(
newOngoingSearch
)
)
;
await
dispatch
(
clearSearchResults
(
)
)
;
await
dispatch
(
addSearchQuery
(
query
)
)
;
dispatch
(
updateSearchStatus
(
SEARCH_STATUS
.
FETCHING
)
)
;
const
requests
=
getDisplayedRequests
(
state
)
;
for
(
const
request
of
requests
)
{
if
(
cancelled
)
{
return
;
}
await
loadResource
(
connector
request
)
;
const
updatedResource
=
getRequestById
(
getState
(
)
request
.
id
)
;
await
dispatch
(
searchResource
(
updatedResource
query
)
)
;
}
dispatch
(
updateSearchStatus
(
SEARCH_STATUS
.
DONE
)
)
;
}
;
newOngoingSearch
.
cancel
=
(
)
=
>
{
cancelled
=
true
;
}
;
return
newOngoingSearch
;
}
async
function
loadResource
(
connector
resource
)
{
const
updateTypes
=
[
"
responseHeaders
"
"
requestHeaders
"
"
responseCookies
"
"
requestCookies
"
"
requestPostData
"
"
responseContent
"
"
responseCache
"
"
stackTrace
"
"
securityInfo
"
]
;
return
fetchNetworkUpdatePacket
(
connector
.
requestData
resource
updateTypes
)
;
}
function
searchResource
(
resource
query
)
{
return
async
(
dispatch
getState
)
=
>
{
const
result
=
await
searchInResource
(
resource
query
)
;
if
(
!
result
.
length
)
{
return
;
}
dispatch
(
addSearchResult
(
resource
result
)
)
;
}
;
}
function
addSearchResult
(
resource
result
)
{
return
{
type
:
ADD_SEARCH_RESULT
resource
result
}
;
}
function
addSearchQuery
(
query
)
{
return
{
type
:
ADD_SEARCH_QUERY
query
}
;
}
function
clearSearchResults
(
)
{
return
{
type
:
CLEAR_SEARCH_RESULTS
}
;
}
function
updateSearchStatus
(
status
)
{
return
{
type
:
UPDATE_SEARCH_STATUS
status
}
;
}
function
closeSearch
(
)
{
return
(
dispatch
getState
)
=
>
{
dispatch
(
stopOngoingSearch
(
)
)
;
dispatch
(
{
type
:
CLOSE_SEARCH
}
)
;
}
;
}
function
openSearch
(
)
{
return
(
dispatch
getState
)
=
>
{
dispatch
(
{
type
:
OPEN_SEARCH
}
)
;
}
;
}
function
toggleSearchPanel
(
)
{
return
(
dispatch
getState
)
=
>
{
const
state
=
getState
(
)
;
state
.
search
.
panelOpen
?
dispatch
(
{
type
:
CLOSE_SEARCH
}
)
:
dispatch
(
{
type
:
OPEN_SEARCH
}
)
;
}
;
}
function
addOngoingSearch
(
ongoingSearch
)
{
return
{
type
:
ADD_ONGOING_SEARCH
ongoingSearch
}
;
}
function
stopOngoingSearch
(
)
{
return
(
dispatch
getState
)
=
>
{
const
state
=
getState
(
)
;
const
ongoingSearch
=
getOngoingSearch
(
state
)
;
const
status
=
getSearchStatus
(
state
)
;
if
(
ongoingSearch
&
&
status
!
=
=
SEARCH_STATUS
.
DONE
)
{
ongoingSearch
.
cancel
(
)
;
dispatch
(
updateSearchStatus
(
SEARCH_STATUS
.
CANCELLED
)
)
;
}
}
;
}
module
.
exports
=
{
search
closeSearch
openSearch
clearSearchResults
addSearchQuery
toggleSearchPanel
}
;
