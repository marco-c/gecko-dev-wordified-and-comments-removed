"
use
strict
"
;
const
{
WS_ADD_FRAME
WS_SELECT_FRAME
WS_OPEN_FRAME_DETAILS
WS_CLEAR_FRAMES
WS_TOGGLE_FRAME_FILTER_TYPE
WS_SET_REQUEST_FILTER_TEXT
WS_TOGGLE_COLUMN
WS_RESET_COLUMNS
}
=
require
(
"
.
.
/
constants
"
)
;
const
{
getDisplayedFrames
}
=
require
(
"
.
.
/
selectors
/
index
"
)
;
const
PAGE_SIZE_ITEM_COUNT_RATIO
=
5
;
function
addFrame
(
httpChannelId
data
batch
)
{
return
{
type
:
WS_ADD_FRAME
httpChannelId
data
meta
:
{
batch
}
}
;
}
function
selectFrame
(
frame
)
{
return
{
type
:
WS_SELECT_FRAME
open
:
true
frame
}
;
}
function
openFrameDetails
(
open
)
{
return
{
type
:
WS_OPEN_FRAME_DETAILS
open
}
;
}
function
clearFrames
(
)
{
return
{
type
:
WS_CLEAR_FRAMES
}
;
}
function
toggleFrameFilterType
(
filter
)
{
return
{
type
:
WS_TOGGLE_FRAME_FILTER_TYPE
filter
}
;
}
function
setFrameFilterText
(
text
)
{
return
{
type
:
WS_SET_REQUEST_FILTER_TEXT
text
}
;
}
function
resetWebSocketsColumns
(
)
{
return
{
type
:
WS_RESET_COLUMNS
}
;
}
function
toggleWebSocketsColumn
(
column
)
{
return
{
type
:
WS_TOGGLE_COLUMN
column
}
;
}
function
selectFrameDelta
(
delta
)
{
return
(
dispatch
getState
)
=
>
{
const
state
=
getState
(
)
;
const
frames
=
getDisplayedFrames
(
state
)
;
if
(
frames
.
length
=
=
=
0
)
{
return
;
}
const
selIndex
=
frames
.
findIndex
(
r
=
>
r
=
=
=
state
.
webSockets
.
selectedFrame
)
;
if
(
delta
=
=
=
"
PAGE_DOWN
"
)
{
delta
=
Math
.
ceil
(
frames
.
length
/
PAGE_SIZE_ITEM_COUNT_RATIO
)
;
}
else
if
(
delta
=
=
=
"
PAGE_UP
"
)
{
delta
=
-
Math
.
ceil
(
frames
.
length
/
PAGE_SIZE_ITEM_COUNT_RATIO
)
;
}
const
newIndex
=
Math
.
min
(
Math
.
max
(
0
selIndex
+
delta
)
frames
.
length
-
1
)
;
const
newItem
=
frames
[
newIndex
]
;
dispatch
(
selectFrame
(
newItem
)
)
;
}
;
}
module
.
exports
=
{
addFrame
selectFrame
openFrameDetails
clearFrames
toggleFrameFilterType
setFrameFilterText
resetWebSocketsColumns
toggleWebSocketsColumn
selectFrameDelta
}
;
