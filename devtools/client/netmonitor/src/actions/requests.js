"
use
strict
"
;
const
{
ADD_REQUEST
CLEAR_REQUESTS
CLONE_REQUEST
CLONE_SELECTED_REQUEST
REMOVE_SELECTED_CUSTOM_REQUEST
RIGHT_CLICK_REQUEST
SEND_CUSTOM_REQUEST
SET_EVENT_STREAM_FLAG
SET_RECORDING_STATE
UPDATE_REQUEST
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
const
{
getSelectedRequest
getRequestById
getRecordingState
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
selectors
/
index
"
)
;
const
{
fetchNetworkUpdatePacket
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
utils
/
request
-
utils
"
)
;
function
addRequest
(
id
data
batch
)
{
return
{
type
:
ADD_REQUEST
id
data
meta
:
{
batch
}
}
;
}
function
updateRequest
(
id
data
batch
)
{
return
{
type
:
UPDATE_REQUEST
id
data
meta
:
{
batch
}
}
;
}
function
setEventStreamFlag
(
id
batch
)
{
return
{
type
:
SET_EVENT_STREAM_FLAG
id
meta
:
{
batch
}
}
;
}
function
cloneRequest
(
id
)
{
return
{
id
type
:
CLONE_REQUEST
}
;
}
function
rightClickRequest
(
id
)
{
return
{
id
type
:
RIGHT_CLICK_REQUEST
}
;
}
function
cloneSelectedRequest
(
)
{
return
{
type
:
CLONE_SELECTED_REQUEST
}
;
}
function
sendCustomRequest
(
connector
requestId
=
null
)
{
return
async
(
{
dispatch
getState
}
)
=
>
{
let
request
;
if
(
requestId
)
{
request
=
getRequestById
(
getState
(
)
requestId
)
;
}
else
{
request
=
getSelectedRequest
(
getState
(
)
)
;
}
if
(
!
request
)
{
return
;
}
await
fetchNetworkUpdatePacket
(
connector
.
requestData
request
[
"
requestHeaders
"
"
requestPostData
"
]
)
;
request
=
getRequestById
(
getState
(
)
request
.
id
)
;
const
data
=
{
cause
:
request
.
cause
url
:
request
.
url
method
:
request
.
method
httpVersion
:
request
.
httpVersion
}
;
if
(
request
.
requestHeaders
)
{
data
.
headers
=
request
.
requestHeaders
.
headers
;
}
if
(
request
.
requestPostData
)
{
data
.
body
=
request
.
requestPostData
.
postData
.
text
;
}
const
{
channelId
actor
}
=
await
connector
.
sendHTTPRequest
(
data
)
;
dispatch
(
{
type
:
SEND_CUSTOM_REQUEST
id
:
channelId
|
|
actor
}
)
;
}
;
}
function
removeSelectedCustomRequest
(
)
{
return
{
type
:
REMOVE_SELECTED_CUSTOM_REQUEST
}
;
}
function
clearRequests
(
)
{
return
(
{
dispatch
connector
}
)
=
>
{
dispatch
(
{
type
:
CLEAR_REQUESTS
}
)
;
connector
.
clear
(
)
;
}
;
}
function
toggleRecording
(
)
{
return
async
(
{
dispatch
getState
connector
}
)
=
>
{
const
recording
=
!
getRecordingState
(
getState
(
)
)
;
if
(
recording
)
{
await
connector
.
resume
(
)
;
}
else
{
connector
.
pause
(
)
;
}
dispatch
(
{
type
:
SET_RECORDING_STATE
recording
}
)
;
}
;
}
module
.
exports
=
{
addRequest
clearRequests
cloneRequest
cloneSelectedRequest
rightClickRequest
removeSelectedCustomRequest
sendCustomRequest
setEventStreamFlag
toggleRecording
updateRequest
}
;
