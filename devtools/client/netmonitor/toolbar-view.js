"
use
strict
"
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
Provider
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
.
Provider
)
;
const
FilterButtons
=
createFactory
(
require
(
"
.
/
components
/
filter
-
buttons
"
)
)
;
function
ToolbarView
(
)
{
dumpn
(
"
ToolbarView
was
instantiated
"
)
;
this
.
_onTogglePanesPressed
=
this
.
_onTogglePanesPressed
.
bind
(
this
)
;
}
ToolbarView
.
prototype
=
{
initialize
:
function
(
store
)
{
dumpn
(
"
Initializing
the
ToolbarView
"
)
;
this
.
_filterContainerNode
=
(
"
#
react
-
filter
-
buttons
-
hook
"
)
;
ReactDOM
.
render
(
Provider
(
{
store
}
FilterButtons
(
)
)
this
.
_filterContainerNode
)
;
this
.
_detailsPaneToggleButton
=
(
"
#
details
-
pane
-
toggle
"
)
;
this
.
_detailsPaneToggleButton
.
addEventListener
(
"
mousedown
"
this
.
_onTogglePanesPressed
false
)
;
}
destroy
:
function
(
)
{
dumpn
(
"
Destroying
the
ToolbarView
"
)
;
ReactDOM
.
unmountComponentAtNode
(
this
.
_filterContainerNode
)
;
this
.
_detailsPaneToggleButton
.
removeEventListener
(
"
mousedown
"
this
.
_onTogglePanesPressed
false
)
;
}
_onTogglePanesPressed
:
function
(
)
{
let
requestsMenu
=
NetMonitorView
.
RequestsMenu
;
let
selectedIndex
=
requestsMenu
.
selectedIndex
;
if
(
selectedIndex
=
=
-
1
&
&
requestsMenu
.
itemCount
)
{
requestsMenu
.
selectedIndex
=
0
;
}
else
{
requestsMenu
.
selectedIndex
=
-
1
;
}
}
_detailsPaneToggleButton
:
null
}
;
exports
.
ToolbarView
=
ToolbarView
;
