"
use
strict
"
;
const
{
BrowserLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
{
}
)
;
const
require
=
window
.
windowRequire
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
"
window
}
)
.
require
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
old
-
event
-
emitter
"
)
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
render
unmountComponentAtNode
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
Provider
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
.
Provider
)
;
const
{
bindActionCreators
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
Connector
}
=
require
(
"
.
/
src
/
connector
/
index
"
)
;
const
{
configureStore
}
=
require
(
"
.
/
src
/
create
-
store
"
)
;
const
App
=
createFactory
(
require
(
"
.
/
src
/
components
/
App
"
)
)
;
const
{
EVENTS
}
=
require
(
"
.
/
src
/
constants
"
)
;
const
{
getDisplayedRequestById
getSortedRequests
}
=
require
(
"
.
/
src
/
selectors
/
index
"
)
;
EventEmitter
.
decorate
(
window
)
;
let
connector
=
new
Connector
(
)
;
const
store
=
configureStore
(
connector
)
;
const
actions
=
bindActionCreators
(
require
(
"
.
/
src
/
actions
/
index
"
)
store
.
dispatch
)
;
window
.
store
=
store
;
window
.
connector
=
connector
;
window
.
actions
=
actions
;
window
.
Netmonitor
=
{
bootstrap
(
{
toolbox
panel
}
)
{
this
.
mount
=
document
.
querySelector
(
"
#
mount
"
)
;
this
.
toolbox
=
toolbox
;
const
connection
=
{
tabConnection
:
{
tabTarget
:
toolbox
.
target
}
toolbox
panel
}
;
const
openLink
=
(
link
)
=
>
{
let
parentDoc
=
toolbox
.
doc
;
let
iframe
=
parentDoc
.
getElementById
(
"
toolbox
-
panel
-
iframe
-
netmonitor
"
)
;
let
top
=
iframe
.
ownerDocument
.
defaultView
.
top
;
top
.
openUILinkIn
(
link
"
tab
"
)
;
}
;
const
openSplitConsole
=
(
err
)
=
>
{
toolbox
.
openSplitConsole
(
)
.
then
(
(
)
=
>
{
toolbox
.
target
.
logErrorInPage
(
err
"
har
"
)
;
}
)
;
}
;
this
.
onRequestAdded
=
this
.
onRequestAdded
.
bind
(
this
)
;
window
.
on
(
EVENTS
.
REQUEST_ADDED
this
.
onRequestAdded
)
;
const
sourceMapService
=
toolbox
.
sourceMapURLService
;
const
app
=
App
(
{
actions
connector
openLink
openSplitConsole
sourceMapService
}
)
;
render
(
Provider
(
{
store
}
app
)
this
.
mount
)
;
return
connector
.
connectFirefox
(
connection
actions
store
.
getState
)
;
}
destroy
(
)
{
unmountComponentAtNode
(
this
.
mount
)
;
window
.
off
(
EVENTS
.
REQUEST_ADDED
this
.
onRequestAdded
)
;
return
connector
.
disconnect
(
)
;
}
getHar
(
)
{
let
{
HarExporter
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
har
/
har
-
exporter
"
)
;
let
{
getLongString
getTabTarget
getTimingMarker
requestData
}
=
connector
;
let
{
form
:
{
title
url
}
}
=
getTabTarget
(
)
;
let
state
=
store
.
getState
(
)
;
let
options
=
{
getString
:
getLongString
items
:
getSortedRequests
(
state
)
requestData
getTimingMarker
title
:
title
|
|
url
}
;
return
HarExporter
.
getHar
(
options
)
;
}
onRequestAdded
(
event
requestId
)
{
let
listeners
=
this
.
toolbox
.
getRequestFinishedListeners
(
)
;
if
(
!
listeners
.
size
)
{
return
;
}
let
{
HarExporter
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
har
/
har
-
exporter
"
)
;
let
{
getLongString
getTabTarget
requestData
}
=
connector
;
let
{
form
:
{
title
url
}
}
=
getTabTarget
(
)
;
let
options
=
{
getString
:
getLongString
requestData
title
:
title
|
|
url
includeResponseBodies
:
false
items
:
[
getDisplayedRequestById
(
store
.
getState
(
)
requestId
)
]
}
;
HarExporter
.
getHar
(
options
)
.
then
(
har
=
>
{
let
harEntry
=
har
.
log
.
entries
[
0
]
;
delete
harEntry
.
pageref
;
listeners
.
forEach
(
listener
=
>
listener
(
{
harEntry
requestId
}
)
)
;
}
)
;
}
fetchResponseContent
(
requestId
)
{
return
connector
.
requestData
(
requestId
"
responseContent
"
)
;
}
inspectRequest
(
requestId
)
{
return
new
Promise
(
(
resolve
)
=
>
{
let
request
=
null
;
let
inspector
=
(
)
=
>
{
request
=
getDisplayedRequestById
(
store
.
getState
(
)
requestId
)
;
if
(
!
request
)
{
actions
.
toggleRequestFilterType
(
"
all
"
)
;
request
=
getDisplayedRequestById
(
store
.
getState
(
)
requestId
)
;
}
if
(
request
)
{
window
.
off
(
EVENTS
.
REQUEST_ADDED
inspector
)
;
actions
.
selectRequest
(
request
.
id
)
;
resolve
(
)
;
}
}
;
inspector
(
)
;
if
(
!
request
)
{
window
.
on
(
EVENTS
.
REQUEST_ADDED
inspector
)
;
}
}
)
;
}
}
;
let
href
=
window
.
location
.
href
.
replace
(
/
chrome
:
/
"
http
:
/
/
"
)
;
let
url
=
new
window
.
URL
(
href
)
;
if
(
window
.
location
.
protocol
=
=
=
"
chrome
:
"
&
&
url
.
search
.
length
>
1
)
{
const
{
targetFromURL
}
=
require
(
"
devtools
/
client
/
framework
/
target
-
from
-
url
"
)
;
(
async
function
(
)
{
try
{
let
target
=
await
targetFromURL
(
url
)
;
await
target
.
activeConsole
.
startListeners
(
[
"
NetworkActivity
"
]
)
;
let
toolbox
=
{
target
viewSourceInDebugger
(
)
{
throw
new
Error
(
"
toolbox
.
viewSourceInDebugger
is
not
implement
from
a
tab
"
)
;
}
}
;
window
.
Netmonitor
.
bootstrap
(
{
toolbox
}
)
;
}
catch
(
err
)
{
window
.
alert
(
"
Unable
to
start
the
network
monitor
:
"
+
err
)
;
}
}
)
(
)
;
}
