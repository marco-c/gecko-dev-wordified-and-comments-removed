"
use
strict
"
;
const
promise
=
require
(
"
promise
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
localizeMarkup
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
{
KeyShortcuts
}
=
require
(
"
devtools
/
client
/
shared
/
key
-
shortcuts
"
)
;
const
{
L10N
}
=
require
(
"
.
/
l10n
"
)
;
function
NetMonitorPanel
(
iframeWindow
toolbox
)
{
this
.
panelWin
=
iframeWindow
;
this
.
panelDoc
=
iframeWindow
.
document
;
this
.
_toolbox
=
toolbox
;
this
.
_view
=
this
.
panelWin
.
NetMonitorView
;
this
.
_controller
=
this
.
panelWin
.
NetMonitorController
;
this
.
_controller
.
_target
=
this
.
target
;
this
.
_controller
.
_toolbox
=
this
.
_toolbox
;
EventEmitter
.
decorate
(
this
)
;
this
.
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
panelDoc
.
defaultView
}
)
;
this
.
shortcuts
.
on
(
L10N
.
getStr
(
"
netmonitor
.
toolbar
.
filterFreetext
.
key
"
)
(
name
event
)
=
>
{
event
.
preventDefault
(
)
;
this
.
_view
.
RequestsMenu
.
freetextFilterBox
.
focus
(
)
;
}
)
;
}
exports
.
NetMonitorPanel
=
NetMonitorPanel
;
NetMonitorPanel
.
prototype
=
{
open
:
Task
.
async
(
function
*
(
)
{
if
(
this
.
_opening
)
{
return
this
.
_opening
;
}
localizeMarkup
(
this
.
panelDoc
)
;
let
deferred
=
promise
.
defer
(
)
;
this
.
_opening
=
deferred
.
promise
;
if
(
!
this
.
target
.
isRemote
)
{
yield
this
.
target
.
makeRemote
(
)
;
}
yield
this
.
_controller
.
startupNetMonitor
(
)
;
this
.
isReady
=
true
;
this
.
emit
(
"
ready
"
)
;
deferred
.
resolve
(
this
)
;
return
this
.
_opening
;
}
)
get
target
(
)
{
return
this
.
_toolbox
.
target
;
}
destroy
:
Task
.
async
(
function
*
(
)
{
if
(
this
.
_destroying
)
{
return
this
.
_destroying
;
}
let
deferred
=
promise
.
defer
(
)
;
this
.
_destroying
=
deferred
.
promise
;
this
.
shortcuts
.
destroy
(
)
;
yield
this
.
_controller
.
shutdownNetMonitor
(
)
;
this
.
emit
(
"
destroyed
"
)
;
deferred
.
resolve
(
)
;
return
this
.
_destroying
;
}
)
}
;
