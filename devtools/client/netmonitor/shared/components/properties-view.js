"
use
strict
"
;
const
{
createClass
createFactory
DOM
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
rep
-
utils
"
)
;
const
{
MODE
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
constants
"
)
;
const
{
FILTER_SEARCH_DELAY
}
=
require
(
"
.
.
/
.
.
/
constants
"
)
;
const
Editor
=
createFactory
(
require
(
"
devtools
/
client
/
netmonitor
/
shared
/
components
/
editor
"
)
)
;
const
SearchBox
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
search
-
box
"
)
)
;
const
TreeView
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
tree
/
tree
-
view
"
)
)
;
const
TreeRow
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
tree
/
tree
-
row
"
)
)
;
const
{
Rep
}
=
createFactories
(
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
rep
"
)
)
;
const
{
div
tr
td
}
=
DOM
;
const
PropertiesView
=
createClass
(
{
displayName
:
"
PropertiesView
"
propTypes
:
{
object
:
PropTypes
.
object
enableInput
:
PropTypes
.
bool
expandableStrings
:
PropTypes
.
bool
filterPlaceHolder
:
PropTypes
.
string
sectionNames
:
PropTypes
.
array
}
getDefaultProps
(
)
{
return
{
enableInput
:
true
enableFilter
:
true
expandableStrings
:
false
filterPlaceHolder
:
"
"
}
;
}
getInitialState
(
)
{
return
{
filterText
:
"
"
}
;
}
getRowClass
(
object
sectionNames
)
{
return
sectionNames
.
includes
(
object
.
name
)
?
"
tree
-
section
"
:
"
"
;
}
onFilter
(
object
whiteList
)
{
let
{
name
value
}
=
object
;
let
filterText
=
this
.
state
.
filterText
;
if
(
!
filterText
|
|
whiteList
.
includes
(
name
)
)
{
return
true
;
}
let
jsonString
=
JSON
.
stringify
(
{
[
name
]
:
value
}
)
.
toLowerCase
(
)
;
return
jsonString
.
includes
(
filterText
.
toLowerCase
(
)
)
;
}
renderRowWithEditor
(
props
)
{
const
{
level
name
value
}
=
props
.
member
;
if
(
level
=
=
=
1
&
&
name
=
=
=
"
editorText
"
)
{
return
(
tr
(
{
}
td
(
{
colSpan
:
2
}
Editor
(
{
text
:
value
}
)
)
)
)
;
}
return
TreeRow
(
props
)
;
}
renderValueWithRep
(
props
)
{
if
(
props
.
member
.
level
=
=
=
0
)
{
return
null
;
}
return
Rep
(
Object
.
assign
(
props
{
member
:
Object
.
assign
(
{
}
props
.
member
{
open
:
false
}
)
mode
:
MODE
.
TINY
cropLimit
:
60
}
)
)
;
}
updateFilterText
(
filterText
)
{
this
.
setState
(
{
filterText
}
)
;
}
render
(
)
{
const
{
object
decorator
enableInput
enableFilter
expandableStrings
filterPlaceHolder
renderRow
renderValue
sectionNames
}
=
this
.
props
;
return
(
div
(
{
className
:
"
properties
-
view
"
}
enableFilter
&
&
div
(
{
className
:
"
searchbox
-
section
"
}
SearchBox
(
{
delay
:
FILTER_SEARCH_DELAY
type
:
"
filter
"
onChange
:
this
.
updateFilterText
placeholder
:
filterPlaceHolder
}
)
)
div
(
{
className
:
"
tree
-
container
"
}
TreeView
(
{
object
columns
:
[
{
id
:
"
value
"
width
:
"
100
%
"
}
]
decorator
:
decorator
|
|
{
getRowClass
:
(
rowObject
)
=
>
this
.
getRowClass
(
rowObject
sectionNames
)
}
enableInput
expandableStrings
expandedNodes
:
new
Set
(
sectionNames
.
map
(
(
sec
)
=
>
"
/
"
+
sec
)
)
onFilter
:
(
props
)
=
>
this
.
onFilter
(
props
sectionNames
)
renderRow
:
renderRow
|
|
this
.
renderRowWithEditor
renderValue
:
renderValue
|
|
this
.
renderValueWithRep
}
)
)
)
)
;
}
}
)
;
module
.
exports
=
PropertiesView
;
