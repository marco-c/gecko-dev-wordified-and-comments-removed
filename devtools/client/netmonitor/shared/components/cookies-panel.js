"
use
strict
"
;
const
{
createFactory
DOM
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
L10N
}
=
require
(
"
.
.
/
.
.
/
l10n
"
)
;
const
{
getSelectedRequestCookies
getSelectedResponseCookies
}
=
require
(
"
.
.
/
.
.
/
selectors
/
index
"
)
;
const
PropertiesView
=
createFactory
(
require
(
"
.
/
properties
-
view
"
)
)
;
const
{
div
}
=
DOM
;
const
COOKIES_EMPTY_TEXT
=
L10N
.
getStr
(
"
cookiesEmptyText
"
)
;
const
COOKIES_FILTER_TEXT
=
L10N
.
getStr
(
"
cookiesFilterText
"
)
;
const
REQUEST_COOKIES
=
L10N
.
getStr
(
"
requestCookies
"
)
;
const
RESPONSE_COOKIES
=
L10N
.
getStr
(
"
responseCookies
"
)
;
const
SECTION_NAMES
=
[
RESPONSE_COOKIES
REQUEST_COOKIES
]
;
function
CookiesPanel
(
{
request
response
}
)
{
if
(
!
response
.
length
&
&
!
request
.
length
)
{
return
div
(
{
className
:
"
empty
-
notice
"
}
COOKIES_EMPTY_TEXT
)
;
}
let
object
=
{
}
;
if
(
response
.
length
)
{
object
[
RESPONSE_COOKIES
]
=
getProperties
(
response
)
;
}
if
(
request
.
length
)
{
object
[
REQUEST_COOKIES
]
=
getProperties
(
request
)
;
}
return
(
div
(
{
className
:
"
panel
-
container
"
}
PropertiesView
(
{
object
filterPlaceHolder
:
COOKIES_FILTER_TEXT
sectionNames
:
SECTION_NAMES
}
)
)
)
;
}
CookiesPanel
.
displayName
=
"
CookiesPanel
"
;
CookiesPanel
.
propTypes
=
{
request
:
PropTypes
.
array
.
isRequired
response
:
PropTypes
.
array
.
isRequired
}
;
function
getProperties
(
arr
)
{
return
arr
.
reduce
(
(
map
obj
)
=
>
{
if
(
Object
.
keys
(
obj
)
.
length
>
2
)
{
map
[
obj
.
name
]
=
Object
.
assign
(
{
}
obj
)
;
delete
map
[
obj
.
name
]
.
name
;
}
else
{
map
[
obj
.
name
]
=
obj
.
value
;
}
return
map
;
}
{
}
)
;
}
module
.
exports
=
connect
(
state
=
>
(
{
request
:
getSelectedRequestCookies
(
state
)
response
:
getSelectedResponseCookies
(
state
)
}
)
)
(
CookiesPanel
)
;
