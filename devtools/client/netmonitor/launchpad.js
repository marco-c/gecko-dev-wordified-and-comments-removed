"
use
strict
"
;
const
React
=
require
(
"
react
"
)
;
const
ReactDOM
=
require
(
"
react
-
dom
"
)
;
const
{
bindActionCreators
}
=
require
(
"
redux
"
)
;
const
{
bootstrap
renderRoot
}
=
require
(
"
devtools
-
launchpad
"
)
;
const
{
Services
:
{
appinfo
pref
}
}
=
require
(
"
devtools
-
modules
"
)
;
pref
(
"
devtools
.
theme
"
"
light
"
)
;
pref
(
"
devtools
.
cache
.
disabled
"
false
)
;
pref
(
"
devtools
.
netmonitor
.
enabled
"
true
)
;
pref
(
"
devtools
.
netmonitor
.
filters
"
"
[
\
"
all
\
"
]
"
)
;
pref
(
"
devtools
.
netmonitor
.
visibleColumns
"
"
[
\
"
status
\
"
\
"
method
\
"
\
"
file
\
"
\
"
domain
\
"
\
"
cause
\
"
"
+
"
\
"
type
\
"
\
"
transferred
\
"
\
"
contentSize
\
"
\
"
waterfall
\
"
]
"
)
;
pref
(
"
devtools
.
netmonitor
.
panes
-
network
-
details
-
width
"
550
)
;
pref
(
"
devtools
.
netmonitor
.
panes
-
network
-
details
-
height
"
450
)
;
pref
(
"
devtools
.
netmonitor
.
har
.
defaultLogDir
"
"
"
)
;
pref
(
"
devtools
.
netmonitor
.
har
.
defaultFileName
"
"
Archive
%
date
"
)
;
pref
(
"
devtools
.
netmonitor
.
har
.
jsonp
"
false
)
;
pref
(
"
devtools
.
netmonitor
.
har
.
jsonpCallback
"
"
"
)
;
pref
(
"
devtools
.
netmonitor
.
har
.
includeResponseBodies
"
true
)
;
pref
(
"
devtools
.
netmonitor
.
har
.
compress
"
false
)
;
pref
(
"
devtools
.
netmonitor
.
har
.
forceExport
"
false
)
;
pref
(
"
devtools
.
netmonitor
.
har
.
pageLoadedTimeout
"
1500
)
;
pref
(
"
devtools
.
netmonitor
.
har
.
enableAutoExportToFile
"
false
)
;
pref
(
"
devtools
.
netmonitor
.
persistlog
"
false
)
;
pref
(
"
devtools
.
styleeditor
.
enabled
"
true
)
;
require
(
"
.
/
src
/
assets
/
styles
/
netmonitor
.
css
"
)
;
const
EventEmitter
=
require
(
"
devtools
-
modules
/
src
/
utils
/
event
-
emitter
"
)
;
EventEmitter
.
decorate
(
window
)
;
const
{
configureStore
}
=
require
(
"
.
/
src
/
create
-
store
"
)
;
const
App
=
require
(
"
.
/
src
/
components
/
App
"
)
;
const
{
Connector
}
=
require
(
"
.
/
src
/
connector
/
index
"
)
;
const
connector
=
new
Connector
(
)
;
const
store
=
configureStore
(
connector
)
;
const
actions
=
bindActionCreators
(
require
(
"
.
/
src
/
actions
"
)
store
.
dispatch
)
;
window
.
store
=
store
;
window
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
for
(
let
link
of
document
.
head
.
querySelectorAll
(
"
link
"
)
)
{
link
.
href
=
link
.
href
.
replace
(
/
(
resource
|
chrome
)
\
:
\
/
\
/
/
"
/
"
)
;
}
if
(
appinfo
.
OS
=
=
=
"
Darwin
"
)
{
document
.
documentElement
.
setAttribute
(
"
platform
"
"
mac
"
)
;
}
else
if
(
appinfo
.
OS
=
=
=
"
Linux
"
)
{
document
.
documentElement
.
setAttribute
(
"
platform
"
"
linux
"
)
;
}
else
{
document
.
documentElement
.
setAttribute
(
"
platform
"
"
win
"
)
;
}
}
)
;
bootstrap
(
React
ReactDOM
)
.
then
(
(
connection
)
=
>
{
if
(
!
connection
)
{
return
;
}
renderRoot
(
React
ReactDOM
App
store
{
actions
connector
}
)
;
connector
.
connect
(
connection
actions
store
.
getState
)
;
}
)
;
