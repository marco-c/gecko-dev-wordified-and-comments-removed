const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
AppProjects
}
=
require
(
"
devtools
/
client
/
webide
/
modules
/
app
-
projects
"
)
;
const
{
AppManager
}
=
require
(
"
devtools
/
client
/
webide
/
modules
/
app
-
manager
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
utils
=
require
(
"
devtools
/
client
/
webide
/
modules
/
utils
"
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
Strings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
webide
.
properties
"
)
;
var
ProjectList
;
module
.
exports
=
ProjectList
=
function
(
win
parentWindow
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_doc
=
win
.
document
;
this
.
_UI
=
parentWindow
.
UI
;
this
.
_parentWindow
=
parentWindow
;
this
.
_telemetry
=
new
Telemetry
(
)
;
this
.
_panelNodeEl
=
"
div
"
;
this
.
onWebIDEUpdate
=
this
.
onWebIDEUpdate
.
bind
(
this
)
;
this
.
_UI
.
on
(
"
webide
-
update
"
this
.
onWebIDEUpdate
)
;
AppManager
.
init
(
)
;
this
.
appManagerUpdate
=
this
.
appManagerUpdate
.
bind
(
this
)
;
AppManager
.
on
(
"
app
-
manager
-
update
"
this
.
appManagerUpdate
)
;
}
;
ProjectList
.
prototype
=
{
get
doc
(
)
{
return
this
.
_doc
;
}
appManagerUpdate
:
function
(
what
details
)
{
switch
(
what
)
{
case
"
project
-
removed
"
:
case
"
runtime
-
targets
"
:
case
"
connection
"
:
this
.
update
(
details
)
;
break
;
case
"
project
"
:
this
.
updateCommands
(
)
;
this
.
update
(
details
)
;
break
;
}
}
onWebIDEUpdate
:
function
(
what
details
)
{
if
(
what
=
=
"
busy
"
|
|
what
=
=
"
unbusy
"
)
{
this
.
updateCommands
(
)
;
}
}
newApp
:
function
(
testOptions
)
{
let
parentWindow
=
this
.
_parentWindow
;
let
self
=
this
;
return
this
.
_UI
.
busyUntil
(
(
async
function
(
)
{
let
ret
=
{
location
:
null
testOptions
:
testOptions
}
;
parentWindow
.
openDialog
(
"
chrome
:
/
/
webide
/
content
/
newapp
.
xul
"
"
newapp
"
"
chrome
modal
"
ret
)
;
if
(
!
ret
.
location
)
{
return
;
}
let
project
=
AppProjects
.
get
(
ret
.
location
)
;
AppManager
.
selectedProject
=
project
;
self
.
_telemetry
.
actionOccurred
(
"
webideNewProject
"
)
;
}
)
(
)
"
creating
new
app
"
)
;
}
importPackagedApp
:
function
(
location
)
{
let
parentWindow
=
this
.
_parentWindow
;
let
UI
=
this
.
_UI
;
return
UI
.
busyUntil
(
(
async
function
(
)
{
let
directory
=
await
utils
.
getPackagedDirectory
(
parentWindow
location
)
;
if
(
!
directory
)
{
return
;
}
await
UI
.
importAndSelectApp
(
directory
)
;
}
)
(
)
"
importing
packaged
app
"
)
;
}
importHostedApp
:
function
(
location
)
{
let
parentWindow
=
this
.
_parentWindow
;
let
UI
=
this
.
_UI
;
return
UI
.
busyUntil
(
(
async
function
(
)
{
let
url
=
utils
.
getHostedURL
(
parentWindow
location
)
;
if
(
!
url
)
{
return
;
}
await
UI
.
importAndSelectApp
(
url
)
;
}
)
(
)
"
importing
hosted
app
"
)
;
}
_renderProjectItem
:
function
(
opts
)
{
let
span
=
opts
.
panel
.
querySelector
(
"
span
"
)
|
|
this
.
_doc
.
createElement
(
"
span
"
)
;
span
.
textContent
=
opts
.
name
;
let
icon
=
opts
.
panel
.
querySelector
(
"
img
"
)
|
|
this
.
_doc
.
createElement
(
"
img
"
)
;
icon
.
className
=
"
project
-
image
"
;
icon
.
setAttribute
(
"
src
"
opts
.
icon
)
;
opts
.
panel
.
appendChild
(
icon
)
;
opts
.
panel
.
appendChild
(
span
)
;
opts
.
panel
.
setAttribute
(
"
title
"
opts
.
name
)
;
}
refreshTabs
:
function
(
)
{
if
(
AppManager
.
connected
)
{
return
AppManager
.
listTabs
(
)
.
then
(
(
)
=
>
{
this
.
updateTabs
(
)
;
}
)
.
catch
(
console
.
error
)
;
}
}
updateTabs
:
function
(
)
{
let
tabsHeaderNode
=
this
.
_doc
.
querySelector
(
"
#
panel
-
header
-
tabs
"
)
;
let
tabsNode
=
this
.
_doc
.
querySelector
(
"
#
project
-
panel
-
tabs
"
)
;
while
(
tabsNode
.
hasChildNodes
(
)
)
{
tabsNode
.
firstChild
.
remove
(
)
;
}
if
(
!
AppManager
.
connected
)
{
tabsHeaderNode
.
setAttribute
(
"
hidden
"
"
true
"
)
;
return
;
}
let
tabs
=
AppManager
.
tabStore
.
tabs
;
tabsHeaderNode
.
removeAttribute
(
"
hidden
"
)
;
for
(
let
i
=
0
;
i
<
tabs
.
length
;
i
+
+
)
{
let
tab
=
tabs
[
i
]
;
let
URL
=
this
.
_parentWindow
.
URL
;
let
url
;
try
{
url
=
new
URL
(
tab
.
url
)
;
}
catch
(
e
)
{
continue
;
}
if
(
url
.
origin
)
{
tab
.
favicon
=
url
.
origin
+
"
/
favicon
.
ico
"
;
}
tab
.
name
=
tab
.
title
|
|
Strings
.
GetStringFromName
(
"
project_tab_loading
"
)
;
if
(
url
.
protocol
.
startsWith
(
"
http
"
)
)
{
tab
.
name
=
url
.
hostname
+
"
:
"
+
tab
.
name
;
}
let
panelItemNode
=
this
.
_doc
.
createElement
(
this
.
_panelNodeEl
)
;
panelItemNode
.
className
=
"
panel
-
item
"
;
tabsNode
.
appendChild
(
panelItemNode
)
;
this
.
_renderProjectItem
(
{
panel
:
panelItemNode
name
:
tab
.
name
icon
:
tab
.
favicon
|
|
AppManager
.
DEFAULT_PROJECT_ICON
}
)
;
panelItemNode
.
addEventListener
(
"
click
"
(
)
=
>
{
AppManager
.
selectedProject
=
{
type
:
"
tab
"
app
:
tab
icon
:
tab
.
favicon
|
|
AppManager
.
DEFAULT_PROJECT_ICON
location
:
tab
.
url
name
:
tab
.
name
}
;
}
true
)
;
}
return
Promise
.
resolve
(
)
;
}
updateApps
:
function
(
)
{
let
doc
=
this
.
_doc
;
let
runtimeappsHeaderNode
=
doc
.
querySelector
(
"
#
panel
-
header
-
runtimeapps
"
)
;
let
sortedApps
=
[
]
;
for
(
let
[
manifestURL
app
]
of
AppManager
.
apps
)
{
sortedApps
.
push
(
app
)
;
}
sortedApps
=
sortedApps
.
sort
(
(
a
b
)
=
>
{
return
a
.
manifest
.
name
>
b
.
manifest
.
name
;
}
)
;
let
mainProcess
=
AppManager
.
isMainProcessDebuggable
(
)
;
if
(
AppManager
.
connected
&
&
(
sortedApps
.
length
>
0
|
|
mainProcess
)
)
{
runtimeappsHeaderNode
.
removeAttribute
(
"
hidden
"
)
;
}
else
{
runtimeappsHeaderNode
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
let
runtimeAppsNode
=
doc
.
querySelector
(
"
#
project
-
panel
-
runtimeapps
"
)
;
while
(
runtimeAppsNode
.
hasChildNodes
(
)
)
{
runtimeAppsNode
.
firstChild
.
remove
(
)
;
}
if
(
mainProcess
)
{
let
panelItemNode
=
doc
.
createElement
(
this
.
_panelNodeEl
)
;
panelItemNode
.
className
=
"
panel
-
item
"
;
this
.
_renderProjectItem
(
{
panel
:
panelItemNode
name
:
Strings
.
GetStringFromName
(
"
mainProcess_label
"
)
icon
:
AppManager
.
DEFAULT_PROJECT_ICON
}
)
;
runtimeAppsNode
.
appendChild
(
panelItemNode
)
;
panelItemNode
.
addEventListener
(
"
click
"
(
)
=
>
{
AppManager
.
selectedProject
=
{
type
:
"
mainProcess
"
name
:
Strings
.
GetStringFromName
(
"
mainProcess_label
"
)
icon
:
AppManager
.
DEFAULT_PROJECT_ICON
}
;
}
true
)
;
}
for
(
let
i
=
0
;
i
<
sortedApps
.
length
;
i
+
+
)
{
let
app
=
sortedApps
[
i
]
;
let
panelItemNode
=
doc
.
createElement
(
this
.
_panelNodeEl
)
;
panelItemNode
.
className
=
"
panel
-
item
"
;
this
.
_renderProjectItem
(
{
panel
:
panelItemNode
name
:
app
.
manifest
.
name
icon
:
app
.
iconURL
|
|
AppManager
.
DEFAULT_PROJECT_ICON
}
)
;
runtimeAppsNode
.
appendChild
(
panelItemNode
)
;
panelItemNode
.
addEventListener
(
"
click
"
(
)
=
>
{
AppManager
.
selectedProject
=
{
type
:
"
runtimeApp
"
app
:
app
.
manifest
icon
:
app
.
iconURL
|
|
AppManager
.
DEFAULT_PROJECT_ICON
name
:
app
.
manifest
.
name
}
;
}
true
)
;
}
return
Promise
.
resolve
(
)
;
}
updateCommands
:
function
(
)
{
let
doc
=
this
.
_doc
;
let
newAppCmd
;
let
packagedAppCmd
;
let
hostedAppCmd
;
newAppCmd
=
doc
.
querySelector
(
"
#
new
-
app
"
)
;
packagedAppCmd
=
doc
.
querySelector
(
"
#
packaged
-
app
"
)
;
hostedAppCmd
=
doc
.
querySelector
(
"
#
hosted
-
app
"
)
;
if
(
!
newAppCmd
|
|
!
packagedAppCmd
|
|
!
hostedAppCmd
)
{
return
;
}
if
(
this
.
_parentWindow
.
document
.
querySelector
(
"
window
"
)
.
classList
.
contains
(
"
busy
"
)
)
{
newAppCmd
.
setAttribute
(
"
disabled
"
"
true
"
)
;
packagedAppCmd
.
setAttribute
(
"
disabled
"
"
true
"
)
;
hostedAppCmd
.
setAttribute
(
"
disabled
"
"
true
"
)
;
return
;
}
newAppCmd
.
removeAttribute
(
"
disabled
"
)
;
packagedAppCmd
.
removeAttribute
(
"
disabled
"
)
;
hostedAppCmd
.
removeAttribute
(
"
disabled
"
)
;
}
update
:
function
(
options
)
{
if
(
options
&
&
options
.
type
=
=
=
"
apps
"
)
{
return
this
.
updateApps
(
)
;
}
else
if
(
options
&
&
options
.
type
=
=
=
"
tabs
"
)
{
return
this
.
updateTabs
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
doc
=
this
.
_doc
;
let
projectsNode
=
doc
.
querySelector
(
"
#
project
-
panel
-
projects
"
)
;
while
(
projectsNode
.
hasChildNodes
(
)
)
{
projectsNode
.
firstChild
.
remove
(
)
;
}
AppProjects
.
load
(
)
.
then
(
(
)
=
>
{
let
projects
=
AppProjects
.
projects
;
for
(
let
i
=
0
;
i
<
projects
.
length
;
i
+
+
)
{
let
project
=
projects
[
i
]
;
let
panelItemNode
=
doc
.
createElement
(
this
.
_panelNodeEl
)
;
panelItemNode
.
className
=
"
panel
-
item
"
;
projectsNode
.
appendChild
(
panelItemNode
)
;
if
(
!
project
.
validationStatus
)
{
AppManager
.
validateAndUpdateProject
(
project
)
.
then
(
(
)
=
>
{
this
.
_renderProjectItem
(
{
panel
:
panelItemNode
name
:
project
.
name
icon
:
project
.
icon
}
)
;
}
)
;
}
else
{
this
.
_renderProjectItem
(
{
panel
:
panelItemNode
name
:
project
.
name
|
|
AppManager
.
DEFAULT_PROJECT_NAME
icon
:
project
.
icon
|
|
AppManager
.
DEFAULT_PROJECT_ICON
}
)
;
}
panelItemNode
.
addEventListener
(
"
click
"
(
)
=
>
{
AppManager
.
selectedProject
=
project
;
}
true
)
;
}
resolve
(
)
;
}
reject
)
;
this
.
updateApps
(
)
;
this
.
updateTabs
(
)
;
if
(
AppManager
.
connected
)
{
AppManager
.
listTabs
(
)
.
then
(
(
)
=
>
{
this
.
updateTabs
(
)
;
}
)
.
catch
(
console
.
error
)
;
}
}
)
;
}
destroy
:
function
(
)
{
this
.
_doc
=
null
;
AppManager
.
off
(
"
app
-
manager
-
update
"
this
.
appManagerUpdate
)
;
this
.
_UI
.
off
(
"
webide
-
update
"
this
.
onWebIDEUpdate
)
;
this
.
_UI
=
null
;
this
.
_parentWindow
=
null
;
this
.
_panelNodeEl
=
null
;
}
}
;
