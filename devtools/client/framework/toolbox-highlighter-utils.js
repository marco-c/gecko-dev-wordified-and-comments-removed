"
use
strict
"
;
const
promise
=
require
(
"
promise
"
)
;
const
flags
=
require
(
"
devtools
/
shared
/
flags
"
)
;
exports
.
getHighlighterUtils
=
function
(
toolbox
)
{
if
(
!
toolbox
|
|
!
toolbox
.
target
)
{
throw
new
Error
(
"
Missing
or
invalid
toolbox
passed
to
getHighlighterUtils
"
)
;
}
let
exported
=
{
}
;
let
target
=
toolbox
.
target
;
let
isPicking
=
false
;
let
isNodeFrontHighlighted
=
false
;
exported
.
release
=
function
(
)
{
toolbox
=
target
=
null
;
}
;
let
isRemoteHighlightable
=
exported
.
isRemoteHighlightable
=
function
(
)
{
return
target
.
client
.
traits
.
highlightable
;
}
;
let
supportsCustomHighlighters
=
exported
.
supportsCustomHighlighters
=
(
)
=
>
{
return
!
!
target
.
client
.
traits
.
customHighlighters
;
}
;
let
isInspectorInitialized
=
false
;
let
requireInspector
=
generator
=
>
{
return
async
function
(
.
.
.
args
)
{
if
(
!
isInspectorInitialized
)
{
await
toolbox
.
initInspector
(
)
;
isInspectorInitialized
=
true
;
}
return
generator
.
apply
(
null
args
)
;
}
;
}
;
exported
.
togglePicker
=
function
(
doFocus
)
{
if
(
isPicking
)
{
return
cancelPicker
(
)
;
}
return
startPicker
(
doFocus
)
;
}
;
let
startPicker
=
exported
.
startPicker
=
requireInspector
(
async
function
(
doFocus
=
false
)
{
if
(
isPicking
)
{
return
;
}
isPicking
=
true
;
toolbox
.
pickerButton
.
isChecked
=
true
;
await
toolbox
.
selectTool
(
"
inspector
"
)
;
toolbox
.
on
(
"
select
"
cancelPicker
)
;
if
(
isRemoteHighlightable
(
)
)
{
toolbox
.
walker
.
on
(
"
picker
-
node
-
hovered
"
onPickerNodeHovered
)
;
toolbox
.
walker
.
on
(
"
picker
-
node
-
picked
"
onPickerNodePicked
)
;
toolbox
.
walker
.
on
(
"
picker
-
node
-
previewed
"
onPickerNodePreviewed
)
;
toolbox
.
walker
.
on
(
"
picker
-
node
-
canceled
"
onPickerNodeCanceled
)
;
await
toolbox
.
highlighter
.
pick
(
doFocus
)
;
toolbox
.
emit
(
"
picker
-
started
"
)
;
}
else
{
toolbox
.
emit
(
"
picker
-
started
"
)
;
let
node
=
await
toolbox
.
walker
.
pick
(
)
;
onPickerNodePicked
(
{
node
:
node
}
)
;
}
}
)
;
let
stopPicker
=
exported
.
stopPicker
=
requireInspector
(
async
function
(
)
{
if
(
!
isPicking
)
{
return
;
}
isPicking
=
false
;
toolbox
.
pickerButton
.
isChecked
=
false
;
if
(
isRemoteHighlightable
(
)
)
{
await
toolbox
.
highlighter
.
cancelPick
(
)
;
toolbox
.
walker
.
off
(
"
picker
-
node
-
hovered
"
onPickerNodeHovered
)
;
toolbox
.
walker
.
off
(
"
picker
-
node
-
picked
"
onPickerNodePicked
)
;
toolbox
.
walker
.
off
(
"
picker
-
node
-
previewed
"
onPickerNodePreviewed
)
;
toolbox
.
walker
.
off
(
"
picker
-
node
-
canceled
"
onPickerNodeCanceled
)
;
}
else
{
await
toolbox
.
walker
.
cancelPick
(
)
;
}
toolbox
.
off
(
"
select
"
cancelPicker
)
;
toolbox
.
emit
(
"
picker
-
stopped
"
)
;
}
)
;
let
cancelPicker
=
exported
.
cancelPicker
=
async
function
(
)
{
await
stopPicker
(
)
;
toolbox
.
emit
(
"
picker
-
canceled
"
)
;
}
;
function
onPickerNodeHovered
(
data
)
{
toolbox
.
emit
(
"
picker
-
node
-
hovered
"
data
.
node
)
;
}
function
onPickerNodePicked
(
data
)
{
toolbox
.
selection
.
setNodeFront
(
data
.
node
{
reason
:
"
picker
-
node
-
picked
"
}
)
;
stopPicker
(
)
;
}
function
onPickerNodePreviewed
(
data
)
{
toolbox
.
selection
.
setNodeFront
(
data
.
node
{
reason
:
"
picker
-
node
-
previewed
"
}
)
;
}
function
onPickerNodeCanceled
(
)
{
cancelPicker
(
)
;
toolbox
.
win
.
focus
(
)
;
}
let
highlightNodeFront
=
exported
.
highlightNodeFront
=
requireInspector
(
async
function
(
nodeFront
options
=
{
}
)
{
if
(
!
nodeFront
)
{
return
;
}
isNodeFrontHighlighted
=
true
;
if
(
isRemoteHighlightable
(
)
)
{
await
toolbox
.
highlighter
.
showBoxModel
(
nodeFront
options
)
;
}
else
{
await
toolbox
.
walker
.
highlight
(
nodeFront
)
;
}
toolbox
.
emit
(
"
node
-
highlight
"
nodeFront
)
;
}
)
;
exported
.
highlightDomValueGrip
=
requireInspector
(
async
function
(
valueGrip
options
=
{
}
)
{
let
nodeFront
=
await
gripToNodeFront
(
valueGrip
)
;
if
(
nodeFront
)
{
await
highlightNodeFront
(
nodeFront
options
)
;
}
else
{
throw
new
Error
(
"
The
ValueGrip
passed
could
not
be
translated
to
a
NodeFront
"
)
;
}
}
)
;
let
gripToNodeFront
=
exported
.
gripToNodeFront
=
requireInspector
(
async
function
(
grip
)
{
return
toolbox
.
walker
.
getNodeActorFromObjectActor
(
grip
.
actor
)
;
}
)
;
exported
.
unhighlight
=
async
function
(
forceHide
=
false
)
{
forceHide
=
forceHide
|
|
!
flags
.
testing
;
if
(
isNodeFrontHighlighted
&
&
forceHide
&
&
toolbox
.
highlighter
&
&
isRemoteHighlightable
(
)
)
{
isNodeFrontHighlighted
=
false
;
await
toolbox
.
highlighter
.
hideBoxModel
(
)
;
}
if
(
toolbox
)
{
toolbox
.
emit
(
"
node
-
unhighlight
"
)
;
}
}
;
exported
.
getHighlighterByType
=
requireInspector
(
async
function
(
typeName
)
{
let
highlighter
=
null
;
if
(
supportsCustomHighlighters
(
)
)
{
highlighter
=
await
toolbox
.
inspector
.
getHighlighterByType
(
typeName
)
;
}
return
highlighter
|
|
promise
.
reject
(
"
The
target
doesn
'
t
support
"
+
creating
highlighters
by
types
or
{
typeName
}
is
unknown
)
;
}
)
;
return
exported
;
}
;
