"
use
strict
"
;
const
DevToolsUtils
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
function
Menu
(
{
id
=
null
}
=
{
}
)
{
this
.
menuitems
=
[
]
;
this
.
id
=
id
;
Object
.
defineProperty
(
this
"
items
"
{
get
(
)
{
return
this
.
menuitems
;
}
}
)
;
EventEmitter
.
decorate
(
this
)
;
}
Menu
.
prototype
.
append
=
function
(
menuItem
)
{
this
.
menuitems
.
push
(
menuItem
)
;
}
;
Menu
.
prototype
.
clear
=
function
(
)
{
this
.
menuitems
=
[
]
;
}
;
Menu
.
prototype
.
insert
=
function
(
pos
menuItem
)
{
throw
Error
(
"
Not
implemented
"
)
;
}
;
Menu
.
prototype
.
popupAtTarget
=
function
(
target
)
{
const
rect
=
target
.
getBoundingClientRect
(
)
;
const
doc
=
target
.
ownerDocument
;
const
defaultView
=
doc
.
defaultView
;
const
x
=
rect
.
left
+
defaultView
.
mozInnerScreenX
;
const
y
=
rect
.
bottom
+
defaultView
.
mozInnerScreenY
;
this
.
popup
(
x
y
doc
)
;
}
;
Menu
.
prototype
.
hide
=
function
(
doc
)
{
const
win
=
doc
.
defaultView
;
doc
=
DevToolsUtils
.
getTopWindow
(
win
)
.
document
;
const
popup
=
doc
.
querySelector
(
'
popupset
menupopup
[
menu
-
api
=
"
true
"
]
'
)
;
if
(
!
popup
)
{
return
;
}
popup
.
hidePopup
(
)
;
}
;
Menu
.
prototype
.
popup
=
function
(
screenX
screenY
doc
)
{
this
.
hide
(
doc
)
;
const
win
=
doc
.
defaultView
;
const
topWin
=
DevToolsUtils
.
getTopWindow
(
win
)
;
const
winToTopWinCssScale
=
win
.
devicePixelRatio
/
topWin
.
devicePixelRatio
;
screenX
=
screenX
*
winToTopWinCssScale
;
screenY
=
screenY
*
winToTopWinCssScale
;
doc
=
topWin
.
document
;
let
popupset
=
doc
.
querySelector
(
"
popupset
"
)
;
if
(
!
popupset
)
{
popupset
=
doc
.
createXULElement
(
"
popupset
"
)
;
doc
.
documentElement
.
appendChild
(
popupset
)
;
}
const
popup
=
doc
.
createXULElement
(
"
menupopup
"
)
;
popup
.
setAttribute
(
"
menu
-
api
"
"
true
"
)
;
popup
.
setAttribute
(
"
consumeoutsideclicks
"
"
false
"
)
;
popup
.
setAttribute
(
"
incontentshell
"
"
false
"
)
;
if
(
this
.
id
)
{
popup
.
id
=
this
.
id
;
}
this
.
_createMenuItems
(
popup
)
;
const
onWindowUnload
=
(
)
=
>
popup
.
hidePopup
(
)
;
win
.
addEventListener
(
"
unload
"
onWindowUnload
)
;
popup
.
addEventListener
(
"
popuphidden
"
e
=
>
{
if
(
e
.
target
=
=
=
popup
)
{
win
.
removeEventListener
(
"
unload
"
onWindowUnload
)
;
popup
.
remove
(
)
;
this
.
emit
(
"
close
"
)
;
}
}
)
;
popup
.
addEventListener
(
"
popupshown
"
e
=
>
{
if
(
e
.
target
=
=
=
popup
)
{
this
.
emit
(
"
open
"
)
;
}
}
)
;
popupset
.
appendChild
(
popup
)
;
popup
.
openPopupAtScreen
(
screenX
screenY
true
)
;
}
;
Menu
.
prototype
.
_createMenuItems
=
function
(
parent
)
{
const
doc
=
parent
.
ownerDocument
;
this
.
menuitems
.
forEach
(
item
=
>
{
if
(
!
item
.
visible
)
{
return
;
}
if
(
item
.
submenu
)
{
const
menupopup
=
doc
.
createXULElement
(
"
menupopup
"
)
;
menupopup
.
setAttribute
(
"
incontentshell
"
"
false
"
)
;
item
.
submenu
.
_createMenuItems
(
menupopup
)
;
const
menu
=
doc
.
createXULElement
(
"
menu
"
)
;
menu
.
appendChild
(
menupopup
)
;
applyItemAttributesToNode
(
item
menu
)
;
parent
.
appendChild
(
menu
)
;
}
else
if
(
item
.
type
=
=
=
"
separator
"
)
{
const
menusep
=
doc
.
createXULElement
(
"
menuseparator
"
)
;
parent
.
appendChild
(
menusep
)
;
}
else
{
const
menuitem
=
doc
.
createXULElement
(
"
menuitem
"
)
;
applyItemAttributesToNode
(
item
menuitem
)
;
menuitem
.
addEventListener
(
"
command
"
(
)
=
>
{
item
.
click
(
)
;
}
)
;
menuitem
.
addEventListener
(
"
DOMMenuItemActive
"
(
)
=
>
{
item
.
hover
(
)
;
}
)
;
parent
.
appendChild
(
menuitem
)
;
}
}
)
;
}
;
Menu
.
getMenuElementById
=
function
(
id
doc
)
{
const
menuDoc
=
DevToolsUtils
.
getTopWindow
(
doc
.
defaultView
)
.
document
;
return
menuDoc
.
getElementById
(
id
)
;
}
;
Menu
.
setApplicationMenu
=
(
)
=
>
{
throw
Error
(
"
Not
implemented
"
)
;
}
;
Menu
.
sendActionToFirstResponder
=
(
)
=
>
{
throw
Error
(
"
Not
implemented
"
)
;
}
;
Menu
.
buildFromTemplate
=
(
)
=
>
{
throw
Error
(
"
Not
implemented
"
)
;
}
;
function
applyItemAttributesToNode
(
item
node
)
{
if
(
item
.
l10nID
)
{
node
.
ownerDocument
.
l10n
.
setAttributes
(
node
item
.
l10nID
)
;
}
else
{
node
.
setAttribute
(
"
label
"
item
.
label
)
;
if
(
item
.
accelerator
)
{
node
.
setAttribute
(
"
acceltext
"
item
.
accelerator
)
;
}
if
(
item
.
accesskey
)
{
node
.
setAttribute
(
"
accesskey
"
item
.
accesskey
)
;
}
}
if
(
item
.
type
=
=
=
"
checkbox
"
)
{
node
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
}
if
(
item
.
type
=
=
=
"
radio
"
)
{
node
.
setAttribute
(
"
type
"
"
radio
"
)
;
}
if
(
item
.
disabled
)
{
node
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
if
(
item
.
checked
)
{
node
.
setAttribute
(
"
checked
"
"
true
"
)
;
}
if
(
item
.
image
)
{
node
.
setAttribute
(
"
image
"
item
.
image
)
;
}
if
(
item
.
id
)
{
node
.
id
=
item
.
id
;
}
}
module
.
exports
=
Menu
;
