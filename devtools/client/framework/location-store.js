"
use
strict
"
;
const
SOURCE_TOKEN
=
"
<
:
>
"
;
function
LocationStore
(
store
)
{
this
.
_store
=
store
|
|
new
Map
(
)
;
}
LocationStore
.
prototype
.
get
=
function
(
location
)
{
this
.
_safeAccessInit
(
location
.
url
)
;
return
this
.
_store
.
get
(
location
.
url
)
.
get
(
location
)
;
}
;
LocationStore
.
prototype
.
set
=
function
(
location
promisedLocation
=
null
)
{
this
.
_safeAccessInit
(
location
.
url
)
;
this
.
_store
.
get
(
location
.
url
)
.
set
(
serialize
(
location
)
promisedLocation
)
;
}
;
LocationStore
.
prototype
.
_safeAccessInit
=
function
(
url
)
{
if
(
!
this
.
_store
.
has
(
url
)
)
{
this
.
_store
.
set
(
url
new
Map
(
)
)
;
}
}
;
LocationStore
.
prototype
.
clear
=
function
(
)
{
this
.
_store
.
clear
(
)
;
}
;
LocationStore
.
prototype
.
getByURL
=
function
(
url
)
{
if
(
this
.
_store
.
has
(
url
)
)
{
return
[
.
.
.
this
.
_store
.
get
(
url
)
.
keys
(
)
]
;
}
return
[
]
;
}
;
LocationStore
.
prototype
.
clearByURL
=
function
(
url
)
{
this
.
_safeAccessInit
(
url
)
;
this
.
_store
.
set
(
url
new
Map
(
)
)
;
}
;
exports
.
LocationStore
=
LocationStore
;
exports
.
serialize
=
serialize
;
exports
.
deserialize
=
deserialize
;
function
serialize
(
source
)
{
let
{
url
line
column
}
=
source
;
line
=
line
|
|
0
;
column
=
column
|
|
0
;
return
{
url
}
{
SOURCE_TOKEN
}
{
line
}
{
SOURCE_TOKEN
}
{
column
}
;
}
;
function
deserialize
(
source
)
{
let
[
url
line
column
]
=
source
.
split
(
SOURCE_TOKEN
)
;
line
=
parseInt
(
line
)
;
column
=
parseInt
(
column
)
;
if
(
column
=
=
=
0
)
{
return
{
url
line
}
;
}
return
{
url
line
column
}
;
}
;
