"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
SOURCE_MAP_PREF
=
"
devtools
.
source
-
map
.
client
-
service
.
enabled
"
;
function
SourceMapURLService
(
toolbox
sourceMapService
)
{
this
.
_toolbox
=
toolbox
;
Object
.
defineProperty
(
this
"
_target
"
{
get
(
)
{
return
toolbox
.
target
;
}
}
)
;
this
.
_sourceMapService
=
sourceMapService
;
this
.
_urls
=
new
Map
(
)
;
this
.
_subscriptions
=
new
Map
(
)
;
this
.
_idMap
=
new
Map
(
)
;
this
.
_onSourceUpdated
=
this
.
_onSourceUpdated
.
bind
(
this
)
;
this
.
reset
=
this
.
reset
.
bind
(
this
)
;
this
.
_prefValue
=
Services
.
prefs
.
getBoolPref
(
SOURCE_MAP_PREF
)
;
this
.
_onPrefChanged
=
this
.
_onPrefChanged
.
bind
(
this
)
;
this
.
_onNewStyleSheet
=
this
.
_onNewStyleSheet
.
bind
(
this
)
;
this
.
_target
.
on
(
"
source
-
updated
"
this
.
_onSourceUpdated
)
;
this
.
_target
.
on
(
"
will
-
navigate
"
this
.
reset
)
;
Services
.
prefs
.
addObserver
(
SOURCE_MAP_PREF
this
.
_onPrefChanged
)
;
this
.
_stylesheetsFront
=
null
;
this
.
_loadingPromise
=
null
;
}
SourceMapURLService
.
prototype
.
_getLoadingPromise
=
function
(
)
{
if
(
!
this
.
_loadingPromise
)
{
this
.
_loadingPromise
=
(
async
(
)
=
>
{
if
(
this
.
_target
.
isWorkerTarget
)
{
return
;
}
let
styleSheetsLoadingPromise
;
if
(
this
.
_target
.
hasActor
(
"
styleSheets
"
)
)
{
this
.
_stylesheetsFront
=
await
this
.
_target
.
getFront
(
"
stylesheets
"
)
;
this
.
_stylesheetsFront
.
on
(
"
stylesheet
-
added
"
this
.
_onNewStyleSheet
)
;
styleSheetsLoadingPromise
=
this
.
_stylesheetsFront
.
getStyleSheets
(
)
.
then
(
sheets
=
>
{
sheets
.
forEach
(
this
.
_registerNewStyleSheet
this
)
;
}
(
)
=
>
{
}
)
;
}
if
(
!
this
.
_toolbox
.
threadFront
)
{
return
Promise
.
reject
(
"
threadFront
is
null
"
)
;
}
const
loadingPromise
=
this
.
_toolbox
.
threadFront
.
getSources
(
)
.
then
(
(
{
sources
}
)
=
>
{
for
(
const
source
of
sources
)
{
this
.
_registerNewSource
(
source
)
;
}
}
e
=
>
{
}
)
;
if
(
styleSheetsLoadingPromise
)
{
await
styleSheetsLoadingPromise
;
}
await
loadingPromise
;
}
)
(
)
;
}
return
this
.
_loadingPromise
;
}
;
SourceMapURLService
.
prototype
.
reset
=
function
(
)
{
this
.
_sourceMapService
.
clearSourceMaps
(
)
;
this
.
_urls
.
clear
(
)
;
this
.
_subscriptions
.
clear
(
)
;
this
.
_idMap
.
clear
(
)
;
this
.
_loadingPromise
=
null
;
}
;
SourceMapURLService
.
prototype
.
destroy
=
function
(
)
{
this
.
reset
(
)
;
this
.
_target
.
off
(
"
source
-
updated
"
this
.
_onSourceUpdated
)
;
this
.
_target
.
off
(
"
will
-
navigate
"
this
.
reset
)
;
if
(
this
.
_stylesheetsFront
)
{
this
.
_stylesheetsFront
.
off
(
"
stylesheet
-
added
"
this
.
_onNewStyleSheet
)
;
}
Services
.
prefs
.
removeObserver
(
SOURCE_MAP_PREF
this
.
_onPrefChanged
)
;
this
.
_urls
=
this
.
_subscriptions
=
this
.
_idMap
=
null
;
}
;
SourceMapURLService
.
prototype
.
_onSourceUpdated
=
function
(
sourceEvent
)
{
const
url
=
this
.
_registerNewSource
(
sourceEvent
.
source
)
;
if
(
url
)
{
this
.
_dispatchSubscribersForURL
(
url
)
;
}
}
;
SourceMapURLService
.
prototype
.
_registerNewSource
=
function
(
source
)
{
if
(
!
this
.
_urls
)
{
return
;
}
const
{
generatedUrl
url
actor
:
id
sourceMapBaseURL
sourceMapURL
}
=
source
;
const
seenUrl
=
generatedUrl
|
|
url
;
this
.
_urls
.
set
(
seenUrl
{
id
url
:
seenUrl
sourceMapBaseURL
sourceMapURL
}
)
;
this
.
_idMap
.
set
(
id
seenUrl
)
;
return
seenUrl
;
}
;
SourceMapURLService
.
prototype
.
_onNewStyleSheet
=
function
(
sheet
)
{
const
url
=
this
.
_registerNewStyleSheet
(
sheet
)
;
if
(
url
)
{
this
.
_dispatchSubscribersForURL
(
url
)
;
}
}
;
SourceMapURLService
.
prototype
.
_registerNewStyleSheet
=
function
(
sheet
)
{
if
(
!
this
.
_urls
)
{
return
;
}
const
{
href
nodeHref
sourceMapBaseURL
sourceMapURL
actorID
:
id
}
=
sheet
;
const
url
=
href
|
|
nodeHref
;
this
.
_urls
.
set
(
url
{
id
url
sourceMapBaseURL
sourceMapURL
}
)
;
this
.
_idMap
.
set
(
id
url
)
;
return
url
;
}
;
SourceMapURLService
.
prototype
.
sourceMapChanged
=
function
(
id
newUrl
)
{
if
(
!
this
.
_urls
)
{
return
;
}
const
urlKey
=
this
.
_idMap
.
get
(
id
)
;
if
(
urlKey
)
{
this
.
_urls
.
set
(
urlKey
{
id
url
:
newUrl
sourceMapURL
:
"
"
}
)
;
this
.
_dispatchSubscribersForURL
(
urlKey
)
;
}
}
;
SourceMapURLService
.
prototype
.
_dispatchSubscribersForURL
=
function
(
urlKey
)
{
for
(
const
[
subscriptionEntry
]
of
this
.
_subscriptions
)
{
if
(
subscriptionEntry
.
url
=
=
=
urlKey
)
{
subscriptionEntry
.
promise
=
null
;
for
(
const
callback
of
subscriptionEntry
.
callbacks
)
{
this
.
_callOneCallback
(
subscriptionEntry
callback
)
;
}
}
}
}
;
SourceMapURLService
.
prototype
.
originalPositionFor
=
async
function
(
url
line
column
)
{
if
(
!
this
.
_prefValue
)
{
return
null
;
}
try
{
await
this
.
_getLoadingPromise
(
)
;
}
catch
(
e
)
{
console
.
warn
(
"
Error
in
_getLoadingPromise
"
e
)
;
return
null
;
}
if
(
!
this
.
_urls
)
{
return
null
;
}
const
urlInfo
=
this
.
_urls
.
get
(
url
)
;
if
(
!
urlInfo
)
{
return
null
;
}
await
this
.
_sourceMapService
.
getOriginalURLs
(
{
id
:
urlInfo
.
id
url
:
urlInfo
.
url
sourceMapBaseURL
:
urlInfo
.
sourceMapBaseURL
sourceMapURL
:
urlInfo
.
sourceMapURL
}
)
;
const
location
=
{
sourceId
:
urlInfo
.
id
line
column
sourceUrl
:
url
}
;
const
resolvedLocation
=
await
this
.
_sourceMapService
.
getOriginalLocation
(
location
)
;
if
(
!
resolvedLocation
|
|
(
resolvedLocation
.
line
=
=
=
location
.
line
&
&
resolvedLocation
.
column
=
=
=
location
.
column
&
&
resolvedLocation
.
sourceUrl
=
=
=
location
.
sourceUrl
)
)
{
return
null
;
}
return
resolvedLocation
;
}
;
SourceMapURLService
.
prototype
.
_callOneCallback
=
async
function
(
subscriptionEntry
callback
)
{
if
(
!
this
.
_prefValue
)
{
callback
(
false
)
;
return
;
}
if
(
!
subscriptionEntry
.
promise
)
{
const
{
url
line
column
}
=
subscriptionEntry
;
subscriptionEntry
.
promise
=
this
.
originalPositionFor
(
url
line
column
)
;
}
const
resolvedLocation
=
await
subscriptionEntry
.
promise
;
if
(
resolvedLocation
)
{
const
{
line
column
sourceUrl
}
=
resolvedLocation
;
callback
(
this
.
_prefValue
sourceUrl
line
column
)
;
}
}
;
SourceMapURLService
.
prototype
.
subscribe
=
function
(
url
line
column
callback
)
{
if
(
!
this
.
_subscriptions
)
{
return
;
}
const
key
=
JSON
.
stringify
(
[
url
line
column
]
)
;
let
subscriptionEntry
=
this
.
_subscriptions
.
get
(
key
)
;
if
(
!
subscriptionEntry
)
{
subscriptionEntry
=
{
url
line
column
promise
:
null
callbacks
:
[
]
}
;
this
.
_subscriptions
.
set
(
key
subscriptionEntry
)
;
}
subscriptionEntry
.
callbacks
.
push
(
callback
)
;
if
(
this
.
_prefValue
)
{
this
.
_callOneCallback
(
subscriptionEntry
callback
)
;
}
return
(
)
=
>
this
.
unsubscribe
(
url
line
column
callback
)
;
}
;
SourceMapURLService
.
prototype
.
unsubscribe
=
function
(
url
line
column
callback
)
{
if
(
!
this
.
_subscriptions
)
{
return
;
}
const
key
=
JSON
.
stringify
(
[
url
line
column
]
)
;
const
subscriptionEntry
=
this
.
_subscriptions
.
get
(
key
)
;
if
(
subscriptionEntry
)
{
const
index
=
subscriptionEntry
.
callbacks
.
indexOf
(
callback
)
;
if
(
index
!
=
=
-
1
)
{
subscriptionEntry
.
callbacks
.
splice
(
index
1
)
;
if
(
subscriptionEntry
.
callbacks
.
length
=
=
=
0
)
{
this
.
_subscriptions
.
delete
(
key
)
;
}
}
}
}
;
SourceMapURLService
.
prototype
.
_onPrefChanged
=
function
(
)
{
this
.
_prefValue
=
Services
.
prefs
.
getBoolPref
(
SOURCE_MAP_PREF
)
;
if
(
!
this
.
_subscriptions
)
{
return
;
}
for
(
const
[
subscriptionEntry
]
of
this
.
_subscriptions
)
{
for
(
const
callback
of
subscriptionEntry
.
callbacks
)
{
this
.
_callOneCallback
(
subscriptionEntry
callback
)
;
}
}
}
;
exports
.
SourceMapURLService
=
SourceMapURLService
;
