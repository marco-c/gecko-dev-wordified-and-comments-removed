"
use
strict
"
;
function
SourceMapURLService
(
target
sourceMapService
)
{
this
.
_target
=
target
;
this
.
_sourceMapService
=
sourceMapService
;
this
.
_urls
=
new
Map
(
)
;
this
.
_onSourceUpdated
=
this
.
_onSourceUpdated
.
bind
(
this
)
;
this
.
reset
=
this
.
reset
.
bind
(
this
)
;
target
.
on
(
"
source
-
updated
"
this
.
_onSourceUpdated
)
;
target
.
on
(
"
will
-
navigate
"
this
.
reset
)
;
}
SourceMapURLService
.
prototype
.
reset
=
function
(
)
{
this
.
_sourceMapService
.
clearSourceMaps
(
)
;
this
.
_urls
.
clear
(
)
;
}
;
SourceMapURLService
.
prototype
.
destroy
=
function
(
)
{
this
.
reset
(
)
;
this
.
_target
.
off
(
"
source
-
updated
"
this
.
_onSourceUpdated
)
;
this
.
_target
.
off
(
"
will
-
navigate
"
this
.
reset
)
;
this
.
_target
=
this
.
_urls
=
null
;
}
;
SourceMapURLService
.
prototype
.
_onSourceUpdated
=
function
(
_
sourceEvent
)
{
let
{
source
}
=
sourceEvent
;
let
{
generatedUrl
url
actor
:
id
sourceMapURL
}
=
source
;
let
seenUrl
=
generatedUrl
|
|
url
;
this
.
_urls
.
set
(
seenUrl
{
id
url
:
seenUrl
sourceMapURL
}
)
;
}
;
SourceMapURLService
.
prototype
.
originalPositionFor
=
async
function
(
url
line
column
)
{
const
urlInfo
=
this
.
_urls
.
get
(
url
)
;
if
(
!
urlInfo
)
{
return
null
;
}
await
this
.
_sourceMapService
.
getOriginalURLs
(
urlInfo
)
;
const
location
=
{
sourceId
:
urlInfo
.
id
line
column
sourceUrl
:
url
}
;
let
resolvedLocation
=
await
this
.
_sourceMapService
.
getOriginalLocation
(
location
)
;
if
(
!
resolvedLocation
|
|
(
resolvedLocation
.
line
=
=
=
location
.
line
&
&
resolvedLocation
.
column
=
=
=
location
.
column
&
&
resolvedLocation
.
sourceUrl
=
=
=
location
.
sourceUrl
)
)
{
return
null
;
}
return
resolvedLocation
;
}
;
exports
.
SourceMapURLService
=
SourceMapURLService
;
