"
use
strict
"
;
const
DBG_XUL
=
"
chrome
:
/
/
devtools
/
content
/
framework
/
toolbox
-
process
-
window
.
xul
"
;
const
CHROME_DEBUGGER_PROFILE_NAME
=
"
chrome_debugger_profile
"
;
const
{
require
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
XPCOMUtils
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Subprocess
"
"
resource
:
/
/
gre
/
modules
/
Subprocess
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
Telemetry
"
function
(
)
{
return
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
EventEmitter
"
function
(
)
{
return
require
(
"
devtools
/
shared
/
old
-
event
-
emitter
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
system
"
function
(
)
{
return
require
(
"
devtools
/
shared
/
system
"
)
;
}
)
;
const
promise
=
require
(
"
promise
"
)
;
const
Services
=
require
(
"
Services
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
BrowserToolboxProcess
"
]
;
var
processes
=
new
Set
(
)
;
this
.
BrowserToolboxProcess
=
function
BrowserToolboxProcess
(
onClose
onRun
options
)
{
let
emitter
=
new
EventEmitter
(
)
;
this
.
on
=
emitter
.
on
.
bind
(
emitter
)
;
this
.
off
=
emitter
.
off
.
bind
(
emitter
)
;
this
.
once
=
emitter
.
once
.
bind
(
emitter
)
;
this
.
emit
=
function
(
.
.
.
args
)
{
emitter
.
emit
(
.
.
.
args
)
;
BrowserToolboxProcess
.
emit
(
.
.
.
args
)
;
}
;
if
(
typeof
onClose
=
=
=
"
object
"
)
{
if
(
onClose
.
onClose
)
{
this
.
once
(
"
close
"
onClose
.
onClose
)
;
}
if
(
onClose
.
onRun
)
{
this
.
once
(
"
run
"
onClose
.
onRun
)
;
}
this
.
_options
=
onClose
;
}
else
{
if
(
onClose
)
{
this
.
once
(
"
close
"
onClose
)
;
}
if
(
onRun
)
{
this
.
once
(
"
run
"
onRun
)
;
}
this
.
_options
=
options
|
|
{
}
;
}
this
.
_telemetry
=
new
Telemetry
(
)
;
this
.
_onConnectionChange
=
this
.
_onConnectionChange
.
bind
(
this
)
;
this
.
close
=
this
.
close
.
bind
(
this
)
;
Services
.
obs
.
addObserver
(
this
.
close
"
quit
-
application
"
)
;
this
.
_initServer
(
)
;
this
.
_initProfile
(
)
;
this
.
_create
(
)
;
processes
.
add
(
this
)
;
}
;
EventEmitter
.
decorate
(
BrowserToolboxProcess
)
;
BrowserToolboxProcess
.
init
=
function
(
onClose
onRun
options
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
chrome
.
enabled
"
)
|
|
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
remote
-
enabled
"
)
)
{
console
.
error
(
"
Could
not
start
Browser
Toolbox
you
need
to
enable
it
.
"
)
;
return
null
;
}
return
new
BrowserToolboxProcess
(
onClose
onRun
options
)
;
}
;
BrowserToolboxProcess
.
getBrowserToolboxSessionState
=
function
(
)
{
for
(
let
process
of
processes
.
values
(
)
)
{
if
(
!
process
.
_options
|
|
!
process
.
_options
.
addonID
)
{
return
true
;
}
}
return
false
;
}
;
BrowserToolboxProcess
.
setAddonOptions
=
function
(
id
options
)
{
let
promises
=
[
]
;
for
(
let
process
of
processes
.
values
(
)
)
{
promises
.
push
(
process
.
debuggerServer
.
setAddonOptions
(
id
options
)
)
;
}
return
promise
.
all
(
promises
)
;
}
;
BrowserToolboxProcess
.
prototype
=
{
_initServer
:
function
(
)
{
if
(
this
.
debuggerServer
)
{
dumpn
(
"
The
chrome
toolbox
server
is
already
running
.
"
)
;
return
;
}
dumpn
(
"
Initializing
the
chrome
toolbox
server
.
"
)
;
this
.
loader
=
new
DevToolsLoader
(
)
;
this
.
loader
.
invisibleToDebugger
=
true
;
let
{
DebuggerServer
}
=
this
.
loader
.
require
(
"
devtools
/
server
/
main
"
)
;
this
.
debuggerServer
=
DebuggerServer
;
dumpn
(
"
Created
a
separate
loader
instance
for
the
DebuggerServer
.
"
)
;
this
.
debuggerServer
.
on
(
"
connectionchange
"
this
.
_onConnectionChange
)
;
this
.
debuggerServer
.
init
(
)
;
this
.
debuggerServer
.
registerAllActors
(
)
;
this
.
debuggerServer
.
allowChromeProcess
=
true
;
dumpn
(
"
initialized
and
added
the
browser
actors
for
the
DebuggerServer
.
"
)
;
let
chromeDebuggingWebSocket
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
chrome
-
debugging
-
websocket
"
)
;
let
listener
=
this
.
debuggerServer
.
createListener
(
)
;
listener
.
portOrPath
=
-
1
;
listener
.
webSocket
=
chromeDebuggingWebSocket
;
listener
.
open
(
)
;
this
.
port
=
listener
.
port
;
if
(
!
this
.
port
)
{
throw
new
Error
(
"
No
debugger
server
port
"
)
;
}
dumpn
(
"
Finished
initializing
the
chrome
toolbox
server
.
"
)
;
dump
(
Debugger
Server
for
Browser
Toolbox
listening
on
port
:
{
this
.
port
}
\
n
)
;
}
_initProfile
:
function
(
)
{
dumpn
(
"
Initializing
the
chrome
toolbox
user
profile
.
"
)
;
this
.
_migrateProfileDir
(
)
;
let
debuggingProfileDir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
debuggingProfileDir
.
append
(
CHROME_DEBUGGER_PROFILE_NAME
)
;
try
{
debuggingProfileDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
}
catch
(
ex
)
{
if
(
ex
.
result
=
=
=
Cr
.
NS_ERROR_FILE_ALREADY_EXISTS
)
{
this
.
_dbgProfilePath
=
debuggingProfileDir
.
path
;
}
else
{
dumpn
(
"
Error
trying
to
create
a
profile
directory
failing
.
"
)
;
dumpn
(
"
Error
:
"
+
(
ex
.
message
|
|
ex
)
)
;
}
return
;
}
this
.
_dbgProfilePath
=
debuggingProfileDir
.
path
;
let
prefsFile
=
debuggingProfileDir
.
clone
(
)
;
prefsFile
.
append
(
"
prefs
.
js
"
)
;
Services
.
prefs
.
savePrefFile
(
prefsFile
)
;
dumpn
(
"
Finished
creating
the
chrome
toolbox
user
profile
at
:
"
+
this
.
_dbgProfilePath
)
;
}
_migrateProfileDir
(
)
{
let
oldDebuggingProfileDir
=
Services
.
dirsvc
.
get
(
"
ProfLD
"
Ci
.
nsIFile
)
;
let
newDebuggingProfileDir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
if
(
oldDebuggingProfileDir
.
path
=
=
newDebuggingProfileDir
.
path
)
{
return
;
}
oldDebuggingProfileDir
.
append
(
CHROME_DEBUGGER_PROFILE_NAME
)
;
if
(
!
oldDebuggingProfileDir
.
exists
(
)
)
{
return
;
}
dumpn
(
Old
debugging
profile
exists
:
{
oldDebuggingProfileDir
.
path
}
)
;
try
{
newDebuggingProfileDir
.
append
(
CHROME_DEBUGGER_PROFILE_NAME
)
;
if
(
newDebuggingProfileDir
.
exists
(
)
)
{
dumpn
(
Removing
folder
at
destination
:
{
newDebuggingProfileDir
.
path
}
)
;
newDebuggingProfileDir
.
remove
(
true
)
;
}
let
newDebuggingProfileParent
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
oldDebuggingProfileDir
.
moveTo
(
newDebuggingProfileParent
null
)
;
dumpn
(
"
Debugging
profile
migrated
successfully
"
)
;
}
catch
(
e
)
{
dumpn
(
Debugging
profile
migration
failed
:
{
e
}
)
;
}
}
_create
:
function
(
)
{
dumpn
(
"
Initializing
chrome
debugging
process
.
"
)
;
let
command
=
Services
.
dirsvc
.
get
(
"
XREExeF
"
Ci
.
nsIFile
)
.
path
;
dumpn
(
"
Running
chrome
debugging
process
.
"
)
;
let
args
=
[
"
-
no
-
remote
"
"
-
foreground
"
"
-
profile
"
this
.
_dbgProfilePath
"
-
chrome
"
DBG_XUL
]
;
let
environment
=
{
MOZ_DISABLE_SAFE_MODE_KEY
:
"
1
"
MOZ_BROWSER_TOOLBOX_PORT
:
String
(
this
.
port
)
}
;
if
(
this
.
_options
.
addonID
)
{
environment
.
MOZ_BROWSER_TOOLBOX_ADDONID
=
String
(
this
.
_options
.
addonID
)
;
}
if
(
!
system
.
constants
.
MOZILLA_OFFICIAL
)
{
args
.
push
(
"
-
purgecaches
"
)
;
}
this
.
_dbgProcessPromise
=
Subprocess
.
call
(
{
command
arguments
:
args
environmentAppend
:
true
stderr
:
"
stdout
"
environment
}
)
.
then
(
proc
=
>
{
this
.
_dbgProcess
=
proc
;
this
.
_telemetry
.
toolOpened
(
"
jsbrowserdebugger
"
)
;
dumpn
(
"
Chrome
toolbox
is
now
running
.
.
.
"
)
;
this
.
emit
(
"
run
"
this
)
;
proc
.
stdin
.
close
(
)
;
let
dumpPipe
=
async
pipe
=
>
{
let
data
=
await
pipe
.
readString
(
)
;
while
(
data
)
{
dump
(
data
)
;
data
=
await
pipe
.
readString
(
)
;
}
}
;
dumpPipe
(
proc
.
stdout
)
;
proc
.
wait
(
)
.
then
(
(
)
=
>
this
.
close
(
)
)
;
return
proc
;
}
err
=
>
{
console
.
log
(
Error
loading
Browser
Toolbox
:
{
command
}
{
args
.
join
(
"
"
)
}
err
)
;
}
)
;
}
_onConnectionChange
:
function
(
what
connection
)
{
let
wrappedJSObject
=
{
what
connection
}
;
Services
.
obs
.
notifyObservers
(
{
wrappedJSObject
}
"
toolbox
-
connection
-
change
"
)
;
}
close
:
async
function
(
)
{
if
(
this
.
closed
)
{
return
;
}
dumpn
(
"
Cleaning
up
the
chrome
debugging
process
.
"
)
;
Services
.
obs
.
removeObserver
(
this
.
close
"
quit
-
application
"
)
;
this
.
_dbgProcess
.
stdout
.
close
(
)
;
await
this
.
_dbgProcess
.
kill
(
)
;
this
.
_telemetry
.
toolClosed
(
"
jsbrowserdebugger
"
)
;
if
(
this
.
debuggerServer
)
{
this
.
debuggerServer
.
off
(
"
connectionchange
"
this
.
_onConnectionChange
)
;
this
.
debuggerServer
.
destroy
(
)
;
this
.
debuggerServer
=
null
;
}
dumpn
(
"
Chrome
toolbox
is
now
closed
.
.
.
"
)
;
this
.
closed
=
true
;
this
.
emit
(
"
close
"
this
)
;
processes
.
delete
(
this
)
;
this
.
_dbgProcess
=
null
;
this
.
_options
=
null
;
if
(
this
.
loader
)
{
this
.
loader
.
destroy
(
)
;
}
this
.
loader
=
null
;
this
.
_telemetry
=
null
;
}
}
;
function
dumpn
(
str
)
{
if
(
wantLogging
)
{
dump
(
"
DBG
-
FRONTEND
:
"
+
str
+
"
\
n
"
)
;
}
}
var
wantLogging
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
log
"
)
;
Services
.
prefs
.
addObserver
(
"
devtools
.
debugger
.
log
"
{
observe
:
(
.
.
.
args
)
=
>
{
wantLogging
=
Services
.
prefs
.
getBoolPref
(
args
.
pop
(
)
)
;
}
}
)
;
Services
.
prefs
.
addObserver
(
"
toolbox
-
update
-
addon
-
options
"
{
observe
:
(
subject
)
=
>
{
let
{
id
options
}
=
subject
.
wrappedJSObject
;
BrowserToolboxProcess
.
setAddonOptions
(
id
options
)
;
}
}
)
;
