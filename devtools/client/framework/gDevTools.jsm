"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
gDevTools
"
"
gDevToolsBrowser
"
]
;
Object
.
defineProperty
(
this
"
require
"
{
get
(
)
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
return
require
;
}
}
)
;
Object
.
defineProperty
(
this
"
devtools
"
{
get
(
)
{
return
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
.
gDevTools
;
}
}
)
;
Object
.
defineProperty
(
this
"
browser
"
{
get
(
)
{
return
require
(
"
devtools
/
client
/
framework
/
devtools
-
browser
"
)
.
gDevToolsBrowser
;
}
}
)
;
const
gDevToolsMethods
=
[
"
showToolbox
"
"
closeToolbox
"
"
getToolbox
"
"
registerTool
"
"
registerTheme
"
"
unregisterTool
"
"
unregisterTheme
"
"
getToolDefinitionArray
"
"
getThemeDefinitionArray
"
"
getTheme
"
"
getThemeDefinition
"
"
emit
"
"
on
"
"
off
"
"
once
"
"
getToolDefinitionMap
"
"
getThemeDefinitionMap
"
"
getDefaultTools
"
"
getAdditionalTools
"
"
getToolDefinition
"
]
;
this
.
gDevTools
=
{
get
_toolboxes
(
)
{
return
devtools
.
_toolboxes
;
}
get
_tools
(
)
{
return
devtools
.
_tools
;
}
}
;
gDevToolsMethods
.
forEach
(
name
=
>
{
this
.
gDevTools
[
name
]
=
(
.
.
.
args
)
=
>
{
return
devtools
[
name
]
.
apply
(
devtools
args
)
;
}
;
}
)
;
const
gDevToolsBrowserMethods
=
[
"
toggleToolboxCommand
"
"
selectToolCommand
"
"
openAboutDebugging
"
"
openConnectScreen
"
"
openWebIDE
"
"
openContentProcessToolbox
"
"
registerBrowserWindow
"
"
hasToolboxOpened
"
"
forgetBrowserWindow
"
]
;
this
.
gDevToolsBrowser
=
{
get
isWebIDEInitialized
(
)
{
return
browser
.
isWebIDEInitialized
;
}
get
_trackedBrowserWindows
(
)
{
return
browser
.
_trackedBrowserWindows
;
}
}
;
gDevToolsBrowserMethods
.
forEach
(
name
=
>
{
this
.
gDevToolsBrowser
[
name
]
=
(
.
.
.
args
)
=
>
{
return
browser
[
name
]
.
apply
(
browser
args
)
;
}
;
}
)
;
