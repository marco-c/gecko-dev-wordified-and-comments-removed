"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
function
attachKeybindingsToBrowser
(
doc
keys
)
{
let
devtoolsKeyset
=
doc
.
getElementById
(
"
devtoolsKeyset
"
)
;
if
(
!
devtoolsKeyset
)
{
devtoolsKeyset
=
doc
.
createElement
(
"
keyset
"
)
;
devtoolsKeyset
.
setAttribute
(
"
id
"
"
devtoolsKeyset
"
)
;
}
devtoolsKeyset
.
appendChild
(
keys
)
;
let
mainKeyset
=
doc
.
getElementById
(
"
mainKeyset
"
)
;
mainKeyset
.
parentNode
.
insertBefore
(
devtoolsKeyset
mainKeyset
)
;
}
function
createToolMenuElements
(
toolDefinition
doc
)
{
let
id
=
toolDefinition
.
id
;
if
(
doc
.
getElementById
(
"
Tools
:
"
+
id
)
)
{
return
;
}
let
cmd
=
doc
.
createElement
(
"
command
"
)
;
cmd
.
id
=
"
Tools
:
"
+
id
;
cmd
.
setAttribute
(
"
oncommand
"
'
gDevToolsBrowser
.
selectToolCommand
(
gBrowser
"
'
+
id
+
'
"
)
;
'
)
;
let
key
=
null
;
if
(
toolDefinition
.
key
)
{
key
=
doc
.
createElement
(
"
key
"
)
;
key
.
id
=
"
key_
"
+
id
;
if
(
toolDefinition
.
key
.
startsWith
(
"
VK_
"
)
)
{
key
.
setAttribute
(
"
keycode
"
toolDefinition
.
key
)
;
}
else
{
key
.
setAttribute
(
"
key
"
toolDefinition
.
key
)
;
}
key
.
setAttribute
(
"
command
"
cmd
.
id
)
;
key
.
setAttribute
(
"
modifiers
"
toolDefinition
.
modifiers
)
;
}
let
bc
=
doc
.
createElement
(
"
broadcaster
"
)
;
bc
.
id
=
"
devtoolsMenuBroadcaster_
"
+
id
;
bc
.
setAttribute
(
"
label
"
toolDefinition
.
menuLabel
|
|
toolDefinition
.
label
)
;
bc
.
setAttribute
(
"
command
"
cmd
.
id
)
;
if
(
key
)
{
bc
.
setAttribute
(
"
key
"
"
key_
"
+
id
)
;
}
let
menuitem
=
doc
.
createElement
(
"
menuitem
"
)
;
menuitem
.
id
=
"
menuitem_
"
+
id
;
menuitem
.
setAttribute
(
"
observes
"
"
devtoolsMenuBroadcaster_
"
+
id
)
;
if
(
toolDefinition
.
accesskey
)
{
menuitem
.
setAttribute
(
"
accesskey
"
toolDefinition
.
accesskey
)
;
}
return
{
cmd
:
cmd
key
:
key
bc
:
bc
menuitem
:
menuitem
}
;
}
function
insertToolMenuElements
(
doc
toolDefinition
prevDef
)
{
let
elements
=
createToolMenuElements
(
toolDefinition
doc
)
;
doc
.
getElementById
(
"
mainCommandSet
"
)
.
appendChild
(
elements
.
cmd
)
;
if
(
elements
.
key
)
{
attachKeybindingsToBrowser
(
doc
elements
.
key
)
;
}
doc
.
getElementById
(
"
mainBroadcasterSet
"
)
.
appendChild
(
elements
.
bc
)
;
let
ref
;
if
(
prevDef
)
{
let
menuitem
=
doc
.
getElementById
(
"
menuitem_
"
+
prevDef
.
id
)
;
ref
=
menuitem
&
&
menuitem
.
nextSibling
?
menuitem
.
nextSibling
:
null
;
}
else
{
ref
=
doc
.
getElementById
(
"
menu_devtools_separator
"
)
;
}
if
(
ref
)
{
ref
.
parentNode
.
insertBefore
(
elements
.
menuitem
ref
)
;
}
}
exports
.
insertToolMenuElements
=
insertToolMenuElements
;
function
removeToolFromMenu
(
toolId
doc
)
{
let
command
=
doc
.
getElementById
(
"
Tools
:
"
+
toolId
)
;
if
(
command
)
{
command
.
parentNode
.
removeChild
(
command
)
;
}
let
key
=
doc
.
getElementById
(
"
key_
"
+
toolId
)
;
if
(
key
)
{
key
.
parentNode
.
removeChild
(
key
)
;
}
let
bc
=
doc
.
getElementById
(
"
devtoolsMenuBroadcaster_
"
+
toolId
)
;
if
(
bc
)
{
bc
.
parentNode
.
removeChild
(
bc
)
;
}
let
menuitem
=
doc
.
getElementById
(
"
menuitem_
"
+
toolId
)
;
if
(
menuitem
)
{
menuitem
.
parentNode
.
removeChild
(
menuitem
)
;
}
}
exports
.
removeToolFromMenu
=
removeToolFromMenu
;
function
addAllToolsToMenu
(
doc
)
{
let
fragCommands
=
doc
.
createDocumentFragment
(
)
;
let
fragKeys
=
doc
.
createDocumentFragment
(
)
;
let
fragBroadcasters
=
doc
.
createDocumentFragment
(
)
;
let
fragMenuItems
=
doc
.
createDocumentFragment
(
)
;
for
(
let
toolDefinition
of
gDevTools
.
getToolDefinitionArray
(
)
)
{
if
(
!
toolDefinition
.
inMenu
)
{
continue
;
}
let
elements
=
createToolMenuElements
(
toolDefinition
doc
)
;
if
(
!
elements
)
{
continue
;
}
fragCommands
.
appendChild
(
elements
.
cmd
)
;
if
(
elements
.
key
)
{
fragKeys
.
appendChild
(
elements
.
key
)
;
}
fragBroadcasters
.
appendChild
(
elements
.
bc
)
;
fragMenuItems
.
appendChild
(
elements
.
menuitem
)
;
}
let
mcs
=
doc
.
getElementById
(
"
mainCommandSet
"
)
;
mcs
.
appendChild
(
fragCommands
)
;
attachKeybindingsToBrowser
(
doc
fragKeys
)
;
let
mbs
=
doc
.
getElementById
(
"
mainBroadcasterSet
"
)
;
mbs
.
appendChild
(
fragBroadcasters
)
;
let
mps
=
doc
.
getElementById
(
"
menu_devtools_separator
"
)
;
if
(
mps
)
{
mps
.
parentNode
.
insertBefore
(
fragMenuItems
mps
)
;
}
}
function
isFirebugInstalled
(
)
{
let
bootstrappedAddons
=
Services
.
prefs
.
getCharPref
(
"
extensions
.
bootstrappedAddons
"
)
;
return
bootstrappedAddons
.
indexOf
(
"
firebug
software
.
joehewitt
.
com
"
)
!
=
-
1
;
}
exports
.
addMenus
=
function
(
doc
)
{
addAllToolsToMenu
(
doc
)
;
if
(
isFirebugInstalled
(
)
)
{
let
broadcaster
=
doc
.
getElementById
(
"
devtoolsMenuBroadcaster_DevToolbox
"
)
;
broadcaster
.
removeAttribute
(
"
key
"
)
;
}
}
;
