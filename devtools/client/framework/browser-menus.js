"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
MENUS_L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
menus
.
properties
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
gDevToolsBrowser
"
"
devtools
/
client
/
framework
/
devtools
-
browser
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
Telemetry
"
"
devtools
/
client
/
shared
/
telemetry
"
)
;
let
telemetry
=
null
;
const
FragmentsCache
=
new
Map
(
)
;
function
l10n
(
key
)
{
return
MENUS_L10N
.
getStr
(
key
)
;
}
function
createMenuItem
(
{
doc
id
label
accesskey
isCheckbox
}
)
{
const
menuitem
=
doc
.
createXULElement
(
"
menuitem
"
)
;
menuitem
.
id
=
id
;
menuitem
.
setAttribute
(
"
label
"
label
)
;
if
(
accesskey
)
{
menuitem
.
setAttribute
(
"
accesskey
"
accesskey
)
;
}
if
(
isCheckbox
)
{
menuitem
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
menuitem
.
setAttribute
(
"
autocheck
"
"
false
"
)
;
}
return
menuitem
;
}
function
createToolMenuElements
(
toolDefinition
doc
)
{
const
id
=
toolDefinition
.
id
;
const
menuId
=
"
menuitem_
"
+
id
;
if
(
doc
.
getElementById
(
menuId
)
)
{
return
;
}
const
oncommand
=
async
function
(
id
event
)
{
try
{
const
window
=
event
.
target
.
ownerDocument
.
defaultView
;
await
gDevToolsBrowser
.
selectToolCommand
(
window
id
Cu
.
now
(
)
)
;
sendEntryPointTelemetry
(
window
)
;
}
catch
(
e
)
{
console
.
error
(
Exception
while
opening
{
id
}
:
{
e
}
\
n
{
e
.
stack
}
)
;
}
}
.
bind
(
null
id
)
;
const
menuitem
=
createMenuItem
(
{
doc
id
:
"
menuitem_
"
+
id
label
:
toolDefinition
.
menuLabel
|
|
toolDefinition
.
label
accesskey
:
toolDefinition
.
accesskey
}
)
;
menuitem
.
setAttribute
(
"
key
"
"
key_
"
+
id
)
;
menuitem
.
addEventListener
(
"
command
"
oncommand
)
;
return
{
menuitem
}
;
}
function
sendEntryPointTelemetry
(
window
)
{
if
(
!
telemetry
)
{
telemetry
=
new
Telemetry
(
)
;
}
telemetry
.
addEventProperty
(
window
"
open
"
"
tools
"
null
"
shortcut
"
"
"
)
;
telemetry
.
addEventProperty
(
window
"
open
"
"
tools
"
null
"
entrypoint
"
"
SystemMenu
"
)
;
}
function
insertToolMenuElements
(
doc
toolDefinition
prevDef
)
{
const
{
menuitem
}
=
createToolMenuElements
(
toolDefinition
doc
)
;
let
ref
;
if
(
prevDef
)
{
const
menuitem
=
doc
.
getElementById
(
"
menuitem_
"
+
prevDef
.
id
)
;
ref
=
menuitem
&
&
menuitem
.
nextSibling
?
menuitem
.
nextSibling
:
null
;
}
else
{
ref
=
doc
.
getElementById
(
"
menu_devtools_separator
"
)
;
}
if
(
ref
)
{
ref
.
parentNode
.
insertBefore
(
menuitem
ref
)
;
}
}
exports
.
insertToolMenuElements
=
insertToolMenuElements
;
function
removeToolFromMenu
(
toolId
doc
)
{
const
key
=
doc
.
getElementById
(
"
key_
"
+
toolId
)
;
if
(
key
)
{
key
.
remove
(
)
;
}
const
menuitem
=
doc
.
getElementById
(
"
menuitem_
"
+
toolId
)
;
if
(
menuitem
)
{
menuitem
.
remove
(
)
;
}
}
exports
.
removeToolFromMenu
=
removeToolFromMenu
;
function
addAllToolsToMenu
(
doc
)
{
const
fragKeys
=
doc
.
createDocumentFragment
(
)
;
const
fragMenuItems
=
doc
.
createDocumentFragment
(
)
;
for
(
const
toolDefinition
of
gDevTools
.
getToolDefinitionArray
(
)
)
{
if
(
!
toolDefinition
.
inMenu
)
{
continue
;
}
const
elements
=
createToolMenuElements
(
toolDefinition
doc
)
;
if
(
!
elements
)
{
continue
;
}
if
(
elements
.
key
)
{
fragKeys
.
appendChild
(
elements
.
key
)
;
}
fragMenuItems
.
appendChild
(
elements
.
menuitem
)
;
}
const
mps
=
doc
.
getElementById
(
"
menu_devtools_separator
"
)
;
if
(
mps
)
{
mps
.
parentNode
.
insertBefore
(
fragMenuItems
mps
)
;
}
}
function
addTopLevelItems
(
doc
)
{
const
menuItems
=
doc
.
createDocumentFragment
(
)
;
const
{
menuitems
}
=
require
(
"
devtools
/
client
/
menus
"
)
;
for
(
const
item
of
menuitems
)
{
if
(
item
.
separator
)
{
const
separator
=
doc
.
createXULElement
(
"
menuseparator
"
)
;
separator
.
id
=
item
.
id
;
menuItems
.
appendChild
(
separator
)
;
}
else
{
const
{
id
l10nKey
}
=
item
;
const
menuitem
=
createMenuItem
(
{
doc
id
label
:
l10n
(
l10nKey
+
"
.
label
"
)
accesskey
:
l10n
(
l10nKey
+
"
.
accesskey
"
)
isCheckbox
:
item
.
checkbox
}
)
;
menuitem
.
addEventListener
(
"
command
"
item
.
oncommand
)
;
menuItems
.
appendChild
(
menuitem
)
;
if
(
item
.
keyId
)
{
menuitem
.
setAttribute
(
"
key
"
"
key_
"
+
item
.
keyId
)
;
}
}
}
const
nodes
=
[
]
;
for
(
const
node
of
menuItems
.
children
)
{
nodes
.
push
(
node
)
;
}
FragmentsCache
.
set
(
doc
nodes
)
;
const
menu
=
doc
.
getElementById
(
"
menuWebDeveloperPopup
"
)
;
menu
.
appendChild
(
menuItems
)
;
const
pageSource
=
doc
.
getElementById
(
"
menu_pageSource
"
)
;
const
endSeparator
=
doc
.
getElementById
(
"
devToolsEndSeparator
"
)
;
menu
.
insertBefore
(
pageSource
endSeparator
)
;
}
function
removeTopLevelItems
(
doc
)
{
const
nodes
=
FragmentsCache
.
get
(
doc
)
;
if
(
!
nodes
)
{
return
;
}
FragmentsCache
.
delete
(
doc
)
;
for
(
const
node
of
nodes
)
{
node
.
remove
(
)
;
}
}
exports
.
addMenus
=
function
(
doc
)
{
addTopLevelItems
(
doc
)
;
addAllToolsToMenu
(
doc
)
;
require
(
"
devtools
/
client
/
webreplay
/
menu
"
)
.
addWebReplayMenu
(
doc
)
;
}
;
exports
.
removeMenus
=
function
(
doc
)
{
removeTopLevelItems
(
doc
)
;
}
;
