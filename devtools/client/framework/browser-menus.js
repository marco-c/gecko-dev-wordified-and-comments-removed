"
use
strict
"
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
MENUS_L10N
=
new
LocalizationHelper
(
"
devtools
/
locale
/
menus
.
properties
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
gDevToolsBrowser
"
"
devtools
/
client
/
framework
/
devtools
-
browser
"
true
)
;
const
FragmentsCache
=
new
Map
(
)
;
function
l10n
(
key
)
{
return
MENUS_L10N
.
getStr
(
key
)
;
}
function
createKey
(
{
doc
id
shortcut
keytext
modifiers
oncommand
}
)
{
let
k
=
doc
.
createElement
(
"
key
"
)
;
k
.
id
=
"
key_
"
+
id
;
if
(
shortcut
.
startsWith
(
"
VK_
"
)
)
{
k
.
setAttribute
(
"
keycode
"
shortcut
)
;
if
(
keytext
)
{
k
.
setAttribute
(
"
keytext
"
keytext
)
;
}
}
else
{
k
.
setAttribute
(
"
key
"
shortcut
)
;
}
if
(
modifiers
)
{
k
.
setAttribute
(
"
modifiers
"
modifiers
)
;
}
k
.
setAttribute
(
"
oncommand
"
"
;
"
)
;
k
.
addEventListener
(
"
command
"
oncommand
)
;
return
k
;
}
function
createMenuItem
(
{
doc
id
label
accesskey
isCheckbox
}
)
{
let
menuitem
=
doc
.
createElement
(
"
menuitem
"
)
;
menuitem
.
id
=
id
;
menuitem
.
setAttribute
(
"
label
"
label
)
;
if
(
accesskey
)
{
menuitem
.
setAttribute
(
"
accesskey
"
accesskey
)
;
}
if
(
isCheckbox
)
{
menuitem
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
menuitem
.
setAttribute
(
"
autocheck
"
"
false
"
)
;
}
return
menuitem
;
}
function
attachKeybindingsToBrowser
(
doc
keys
)
{
let
devtoolsKeyset
=
doc
.
getElementById
(
"
devtoolsKeyset
"
)
;
if
(
!
devtoolsKeyset
)
{
devtoolsKeyset
=
doc
.
createElement
(
"
keyset
"
)
;
devtoolsKeyset
.
setAttribute
(
"
id
"
"
devtoolsKeyset
"
)
;
}
devtoolsKeyset
.
appendChild
(
keys
)
;
let
mainKeyset
=
doc
.
getElementById
(
"
mainKeyset
"
)
;
mainKeyset
.
parentNode
.
insertBefore
(
devtoolsKeyset
mainKeyset
)
;
}
function
createToolMenuElements
(
toolDefinition
doc
)
{
let
id
=
toolDefinition
.
id
;
let
menuId
=
"
menuitem_
"
+
id
;
if
(
doc
.
getElementById
(
menuId
)
)
{
return
;
}
let
oncommand
=
function
(
id
event
)
{
let
window
=
event
.
target
.
ownerDocument
.
defaultView
;
gDevToolsBrowser
.
selectToolCommand
(
window
.
gBrowser
id
)
;
}
.
bind
(
null
id
)
;
let
key
=
null
;
if
(
toolDefinition
.
key
)
{
key
=
createKey
(
{
doc
id
shortcut
:
toolDefinition
.
key
modifiers
:
toolDefinition
.
modifiers
oncommand
:
oncommand
}
)
;
}
let
menuitem
=
createMenuItem
(
{
doc
id
:
"
menuitem_
"
+
id
label
:
toolDefinition
.
menuLabel
|
|
toolDefinition
.
label
accesskey
:
toolDefinition
.
accesskey
}
)
;
if
(
key
)
{
menuitem
.
setAttribute
(
"
key
"
key
.
id
)
;
}
menuitem
.
addEventListener
(
"
command
"
oncommand
)
;
return
{
key
menuitem
}
;
}
function
insertToolMenuElements
(
doc
toolDefinition
prevDef
)
{
let
{
key
menuitem
}
=
createToolMenuElements
(
toolDefinition
doc
)
;
if
(
key
)
{
attachKeybindingsToBrowser
(
doc
key
)
;
}
let
ref
;
if
(
prevDef
)
{
let
menuitem
=
doc
.
getElementById
(
"
menuitem_
"
+
prevDef
.
id
)
;
ref
=
menuitem
&
&
menuitem
.
nextSibling
?
menuitem
.
nextSibling
:
null
;
}
else
{
ref
=
doc
.
getElementById
(
"
menu_devtools_separator
"
)
;
}
if
(
ref
)
{
ref
.
parentNode
.
insertBefore
(
menuitem
ref
)
;
}
}
exports
.
insertToolMenuElements
=
insertToolMenuElements
;
function
removeToolFromMenu
(
toolId
doc
)
{
let
key
=
doc
.
getElementById
(
"
key_
"
+
toolId
)
;
if
(
key
)
{
key
.
remove
(
)
;
}
let
menuitem
=
doc
.
getElementById
(
"
menuitem_
"
+
toolId
)
;
if
(
menuitem
)
{
menuitem
.
remove
(
)
;
}
}
exports
.
removeToolFromMenu
=
removeToolFromMenu
;
function
addAllToolsToMenu
(
doc
)
{
let
fragKeys
=
doc
.
createDocumentFragment
(
)
;
let
fragMenuItems
=
doc
.
createDocumentFragment
(
)
;
for
(
let
toolDefinition
of
gDevTools
.
getToolDefinitionArray
(
)
)
{
if
(
!
toolDefinition
.
inMenu
)
{
continue
;
}
let
elements
=
createToolMenuElements
(
toolDefinition
doc
)
;
if
(
!
elements
)
{
continue
;
}
if
(
elements
.
key
)
{
fragKeys
.
appendChild
(
elements
.
key
)
;
}
fragMenuItems
.
appendChild
(
elements
.
menuitem
)
;
}
attachKeybindingsToBrowser
(
doc
fragKeys
)
;
let
mps
=
doc
.
getElementById
(
"
menu_devtools_separator
"
)
;
if
(
mps
)
{
mps
.
parentNode
.
insertBefore
(
fragMenuItems
mps
)
;
}
}
function
addTopLevelItems
(
doc
)
{
let
keys
=
doc
.
createDocumentFragment
(
)
;
let
menuItems
=
doc
.
createDocumentFragment
(
)
;
let
{
menuitems
}
=
require
(
"
.
.
/
menus
"
)
;
for
(
let
item
of
menuitems
)
{
if
(
item
.
separator
)
{
let
separator
=
doc
.
createElement
(
"
menuseparator
"
)
;
separator
.
id
=
item
.
id
;
menuItems
.
appendChild
(
separator
)
;
}
else
{
let
{
id
l10nKey
}
=
item
;
let
menuitem
=
createMenuItem
(
{
doc
id
label
:
l10n
(
l10nKey
+
"
.
label
"
)
accesskey
:
l10n
(
l10nKey
+
"
.
accesskey
"
)
isCheckbox
:
item
.
checkbox
}
)
;
menuitem
.
addEventListener
(
"
command
"
item
.
oncommand
)
;
menuItems
.
appendChild
(
menuitem
)
;
if
(
item
.
key
&
&
l10nKey
)
{
let
shortcut
=
l10n
(
l10nKey
+
"
.
key
"
)
;
let
key
=
createKey
(
{
doc
id
:
item
.
key
.
id
shortcut
:
shortcut
keytext
:
shortcut
.
startsWith
(
"
VK_
"
)
?
l10n
(
l10nKey
+
"
.
keytext
"
)
:
null
modifiers
:
item
.
key
.
modifiers
oncommand
:
item
.
oncommand
}
)
;
menuitem
.
setAttribute
(
"
key
"
key
.
id
)
;
keys
.
appendChild
(
key
)
;
}
if
(
item
.
additionalKeys
)
{
for
(
let
key
of
item
.
additionalKeys
)
{
let
shortcut
=
l10n
(
key
.
l10nKey
+
"
.
key
"
)
;
let
node
=
createKey
(
{
doc
id
:
key
.
id
shortcut
:
shortcut
keytext
:
shortcut
.
startsWith
(
"
VK_
"
)
?
l10n
(
key
.
l10nKey
+
"
.
keytext
"
)
:
null
modifiers
:
key
.
modifiers
oncommand
:
item
.
oncommand
}
)
;
keys
.
appendChild
(
node
)
;
}
}
}
}
let
nodes
=
[
]
;
for
(
let
node
of
keys
.
children
)
{
nodes
.
push
(
node
)
;
}
for
(
let
node
of
menuItems
.
children
)
{
nodes
.
push
(
node
)
;
}
FragmentsCache
.
set
(
doc
nodes
)
;
attachKeybindingsToBrowser
(
doc
keys
)
;
let
menu
=
doc
.
getElementById
(
"
menuWebDeveloperPopup
"
)
;
menu
.
appendChild
(
menuItems
)
;
let
pageSource
=
doc
.
getElementById
(
"
menu_pageSource
"
)
;
let
endSeparator
=
doc
.
getElementById
(
"
devToolsEndSeparator
"
)
;
menu
.
insertBefore
(
pageSource
endSeparator
)
;
}
function
removeTopLevelItems
(
doc
)
{
let
nodes
=
FragmentsCache
.
get
(
doc
)
;
if
(
!
nodes
)
{
return
;
}
FragmentsCache
.
delete
(
doc
)
;
for
(
let
node
of
nodes
)
{
node
.
remove
(
)
;
}
}
exports
.
addMenus
=
function
(
doc
)
{
addTopLevelItems
(
doc
)
;
addAllToolsToMenu
(
doc
)
;
}
;
exports
.
removeMenus
=
function
(
doc
)
{
removeTopLevelItems
(
doc
)
;
}
;
