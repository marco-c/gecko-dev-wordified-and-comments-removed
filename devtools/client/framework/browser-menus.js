"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
MenuStrings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
menus
.
properties
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
const
FragmentsCache
=
new
Map
(
)
;
function
l10n
(
key
)
{
return
MenuStrings
.
GetStringFromName
(
key
)
;
}
function
createKey
(
doc
l10nKey
command
key
)
{
let
k
=
doc
.
createElement
(
"
key
"
)
;
k
.
id
=
"
key_
"
+
key
.
id
;
let
shortcut
=
l10n
(
l10nKey
+
"
.
key
"
)
;
if
(
shortcut
.
startsWith
(
"
VK_
"
)
)
{
k
.
setAttribute
(
"
keycode
"
shortcut
)
;
k
.
setAttribute
(
"
keytext
"
l10n
(
l10nKey
+
"
.
keytext
"
)
)
;
}
else
{
k
.
setAttribute
(
"
key
"
shortcut
)
;
}
if
(
command
)
{
k
.
setAttribute
(
"
command
"
command
)
;
}
if
(
key
.
modifiers
)
{
k
.
setAttribute
(
"
modifiers
"
key
.
modifiers
)
;
}
return
k
;
}
function
createMenuItem
(
{
doc
id
label
broadcasterId
accesskey
isCheckbox
}
)
{
let
menuitem
=
doc
.
createElement
(
"
menuitem
"
)
;
menuitem
.
id
=
id
;
if
(
label
)
{
menuitem
.
setAttribute
(
"
label
"
label
)
;
}
if
(
broadcasterId
)
{
menuitem
.
setAttribute
(
"
observes
"
broadcasterId
)
;
}
if
(
accesskey
)
{
menuitem
.
setAttribute
(
"
accesskey
"
accesskey
)
;
}
if
(
isCheckbox
)
{
menuitem
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
menuitem
.
setAttribute
(
"
autocheck
"
"
false
"
)
;
}
return
menuitem
;
}
function
createBroadcaster
(
{
doc
id
label
isCheckbox
}
)
{
let
broadcaster
=
doc
.
createElement
(
"
broadcaster
"
)
;
broadcaster
.
id
=
id
;
broadcaster
.
setAttribute
(
"
label
"
label
)
;
if
(
isCheckbox
)
{
broadcaster
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
broadcaster
.
setAttribute
(
"
autocheck
"
"
false
"
)
;
}
return
broadcaster
;
}
function
createCommand
(
{
doc
id
oncommand
disabled
}
)
{
let
command
=
doc
.
createElement
(
"
command
"
)
;
command
.
id
=
id
;
command
.
setAttribute
(
"
oncommand
"
oncommand
)
;
if
(
disabled
)
{
command
.
setAttribute
(
"
disabled
"
"
true
"
)
;
command
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
return
command
;
}
function
attachKeybindingsToBrowser
(
doc
keys
)
{
let
devtoolsKeyset
=
doc
.
getElementById
(
"
devtoolsKeyset
"
)
;
if
(
!
devtoolsKeyset
)
{
devtoolsKeyset
=
doc
.
createElement
(
"
keyset
"
)
;
devtoolsKeyset
.
setAttribute
(
"
id
"
"
devtoolsKeyset
"
)
;
}
devtoolsKeyset
.
appendChild
(
keys
)
;
let
mainKeyset
=
doc
.
getElementById
(
"
mainKeyset
"
)
;
mainKeyset
.
parentNode
.
insertBefore
(
devtoolsKeyset
mainKeyset
)
;
}
function
createToolMenuElements
(
toolDefinition
doc
)
{
let
id
=
toolDefinition
.
id
;
if
(
doc
.
getElementById
(
"
Tools
:
"
+
id
)
)
{
return
;
}
let
cmd
=
createCommand
(
{
doc
id
:
"
Tools
:
"
+
id
oncommand
:
'
gDevToolsBrowser
.
selectToolCommand
(
gBrowser
"
'
+
id
+
'
"
)
;
'
}
)
;
let
key
=
null
;
if
(
toolDefinition
.
key
)
{
key
=
doc
.
createElement
(
"
key
"
)
;
key
.
id
=
"
key_
"
+
id
;
if
(
toolDefinition
.
key
.
startsWith
(
"
VK_
"
)
)
{
key
.
setAttribute
(
"
keycode
"
toolDefinition
.
key
)
;
}
else
{
key
.
setAttribute
(
"
key
"
toolDefinition
.
key
)
;
}
key
.
setAttribute
(
"
command
"
cmd
.
id
)
;
key
.
setAttribute
(
"
modifiers
"
toolDefinition
.
modifiers
)
;
}
let
bc
=
createBroadcaster
(
{
doc
id
:
"
devtoolsMenuBroadcaster_
"
+
id
label
:
toolDefinition
.
menuLabel
|
|
toolDefinition
.
label
}
)
;
bc
.
setAttribute
(
"
command
"
cmd
.
id
)
;
if
(
key
)
{
bc
.
setAttribute
(
"
key
"
"
key_
"
+
id
)
;
}
let
menuitem
=
createMenuItem
(
{
doc
id
:
"
menuitem_
"
+
id
broadcasterId
:
"
devtoolsMenuBroadcaster_
"
+
id
accesskey
:
toolDefinition
.
accesskey
}
)
;
return
{
cmd
:
cmd
key
:
key
bc
:
bc
menuitem
:
menuitem
}
;
}
function
insertToolMenuElements
(
doc
toolDefinition
prevDef
)
{
let
elements
=
createToolMenuElements
(
toolDefinition
doc
)
;
doc
.
getElementById
(
"
mainCommandSet
"
)
.
appendChild
(
elements
.
cmd
)
;
if
(
elements
.
key
)
{
attachKeybindingsToBrowser
(
doc
elements
.
key
)
;
}
doc
.
getElementById
(
"
mainBroadcasterSet
"
)
.
appendChild
(
elements
.
bc
)
;
let
ref
;
if
(
prevDef
)
{
let
menuitem
=
doc
.
getElementById
(
"
menuitem_
"
+
prevDef
.
id
)
;
ref
=
menuitem
&
&
menuitem
.
nextSibling
?
menuitem
.
nextSibling
:
null
;
}
else
{
ref
=
doc
.
getElementById
(
"
menu_devtools_separator
"
)
;
}
if
(
ref
)
{
ref
.
parentNode
.
insertBefore
(
elements
.
menuitem
ref
)
;
}
}
exports
.
insertToolMenuElements
=
insertToolMenuElements
;
function
removeToolFromMenu
(
toolId
doc
)
{
let
command
=
doc
.
getElementById
(
"
Tools
:
"
+
toolId
)
;
if
(
command
)
{
command
.
parentNode
.
removeChild
(
command
)
;
}
let
key
=
doc
.
getElementById
(
"
key_
"
+
toolId
)
;
if
(
key
)
{
key
.
parentNode
.
removeChild
(
key
)
;
}
let
bc
=
doc
.
getElementById
(
"
devtoolsMenuBroadcaster_
"
+
toolId
)
;
if
(
bc
)
{
bc
.
parentNode
.
removeChild
(
bc
)
;
}
let
menuitem
=
doc
.
getElementById
(
"
menuitem_
"
+
toolId
)
;
if
(
menuitem
)
{
menuitem
.
parentNode
.
removeChild
(
menuitem
)
;
}
}
exports
.
removeToolFromMenu
=
removeToolFromMenu
;
function
addAllToolsToMenu
(
doc
)
{
let
fragCommands
=
doc
.
createDocumentFragment
(
)
;
let
fragKeys
=
doc
.
createDocumentFragment
(
)
;
let
fragBroadcasters
=
doc
.
createDocumentFragment
(
)
;
let
fragMenuItems
=
doc
.
createDocumentFragment
(
)
;
for
(
let
toolDefinition
of
gDevTools
.
getToolDefinitionArray
(
)
)
{
if
(
!
toolDefinition
.
inMenu
)
{
continue
;
}
let
elements
=
createToolMenuElements
(
toolDefinition
doc
)
;
if
(
!
elements
)
{
continue
;
}
fragCommands
.
appendChild
(
elements
.
cmd
)
;
if
(
elements
.
key
)
{
fragKeys
.
appendChild
(
elements
.
key
)
;
}
fragBroadcasters
.
appendChild
(
elements
.
bc
)
;
fragMenuItems
.
appendChild
(
elements
.
menuitem
)
;
}
let
mcs
=
doc
.
getElementById
(
"
mainCommandSet
"
)
;
mcs
.
appendChild
(
fragCommands
)
;
attachKeybindingsToBrowser
(
doc
fragKeys
)
;
let
mbs
=
doc
.
getElementById
(
"
mainBroadcasterSet
"
)
;
mbs
.
appendChild
(
fragBroadcasters
)
;
let
mps
=
doc
.
getElementById
(
"
menu_devtools_separator
"
)
;
if
(
mps
)
{
mps
.
parentNode
.
insertBefore
(
fragMenuItems
mps
)
;
}
}
function
addTopLevelItems
(
doc
)
{
let
keys
=
doc
.
createDocumentFragment
(
)
;
let
menuItems
=
doc
.
createDocumentFragment
(
)
;
let
{
menuitems
}
=
require
(
"
.
.
/
menus
"
)
;
for
(
let
item
of
menuitems
)
{
if
(
item
.
separator
)
{
let
separator
=
doc
.
createElement
(
"
menuseparator
"
)
;
separator
.
id
=
item
.
id
;
menuItems
.
appendChild
(
separator
)
;
}
else
{
let
{
id
l10nKey
}
=
item
;
let
menuitem
=
createMenuItem
(
{
doc
id
label
:
l10n
(
l10nKey
+
"
.
label
"
)
accesskey
:
l10n
(
l10nKey
+
"
.
accesskey
"
)
isCheckbox
:
item
.
checkbox
}
)
;
menuitem
.
addEventListener
(
"
command
"
item
.
oncommand
)
;
menuItems
.
appendChild
(
menuitem
)
;
if
(
item
.
key
&
&
l10nKey
)
{
let
key
=
createKey
(
doc
l10nKey
null
item
.
key
)
;
key
.
setAttribute
(
"
oncommand
"
"
;
"
)
;
key
.
addEventListener
(
"
command
"
item
.
oncommand
)
;
menuitem
.
setAttribute
(
"
key
"
key
.
id
)
;
keys
.
appendChild
(
key
)
;
}
if
(
item
.
additionalKeys
)
{
for
(
let
key
of
item
.
additionalKeys
)
{
let
node
=
createKey
(
doc
key
.
l10nKey
null
key
)
;
node
.
setAttribute
(
"
oncommand
"
"
;
"
)
;
node
.
addEventListener
(
"
command
"
item
.
oncommand
)
;
keys
.
appendChild
(
node
)
;
}
}
}
}
let
nodes
=
[
]
;
for
(
let
node
of
keys
.
children
)
{
nodes
.
push
(
node
)
;
}
for
(
let
node
of
menuItems
.
children
)
{
nodes
.
push
(
node
)
;
}
FragmentsCache
.
set
(
doc
nodes
)
;
attachKeybindingsToBrowser
(
doc
keys
)
;
let
menu
=
doc
.
getElementById
(
"
menuWebDeveloperPopup
"
)
;
menu
.
appendChild
(
menuItems
)
;
let
pageSource
=
doc
.
getElementById
(
"
menu_pageSource
"
)
;
let
endSeparator
=
doc
.
getElementById
(
"
devToolsEndSeparator
"
)
;
menu
.
insertBefore
(
pageSource
endSeparator
)
;
}
function
removeTopLevelItems
(
doc
)
{
let
nodes
=
FragmentsCache
.
get
(
doc
)
;
if
(
!
nodes
)
{
return
;
}
FragmentsCache
.
delete
(
doc
)
;
for
(
let
node
of
nodes
)
{
node
.
remove
(
)
;
}
}
exports
.
addMenus
=
function
(
doc
)
{
addTopLevelItems
(
doc
)
;
addAllToolsToMenu
(
doc
)
;
}
;
exports
.
removeMenus
=
function
(
doc
)
{
removeTopLevelItems
(
doc
)
;
}
;
