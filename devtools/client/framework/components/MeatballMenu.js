"
use
strict
"
;
const
{
PureComponent
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
hr
}
=
dom
;
loader
.
lazyGetter
(
this
"
MenuItem
"
function
(
)
{
return
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
menu
/
MenuItem
"
)
)
;
}
)
;
loader
.
lazyGetter
(
this
"
MenuList
"
function
(
)
{
return
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
menu
/
MenuList
"
)
)
;
}
)
;
loader
.
lazyRequireGetter
(
this
"
openDocLink
"
"
devtools
/
client
/
shared
/
link
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
assert
"
"
devtools
/
shared
/
DevToolsUtils
"
true
)
;
const
openDevToolsDocsLink
=
(
)
=
>
{
openDocLink
(
"
https
:
/
/
developer
.
mozilla
.
org
/
docs
/
Tools
?
utm_source
=
devtools
&
utm_medium
=
tabbar
-
menu
"
)
;
}
;
const
openCommunityLink
=
(
)
=
>
{
openDocLink
(
"
https
:
/
/
discourse
.
mozilla
.
org
/
c
/
devtools
?
utm_source
=
devtools
&
utm_medium
=
tabbar
-
menu
"
)
;
}
;
class
MeatballMenu
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
currentToolId
:
PropTypes
.
string
hostTypes
:
PropTypes
.
arrayOf
(
PropTypes
.
shape
(
{
position
:
PropTypes
.
string
.
isRequired
switchHost
:
PropTypes
.
func
.
isRequired
}
)
)
currentHostType
:
PropTypes
.
string
isSplitConsoleActive
:
PropTypes
.
bool
disableAutohide
:
PropTypes
.
bool
toggleOptions
:
PropTypes
.
func
.
isRequired
toggleSplitConsole
:
PropTypes
.
func
toggleNoAutohide
:
PropTypes
.
func
L10N
:
PropTypes
.
object
.
isRequired
onResize
:
PropTypes
.
func
}
;
}
componentDidUpdate
(
prevProps
)
{
if
(
!
this
.
props
.
onResize
)
{
return
;
}
const
didChange
=
typeof
this
.
props
.
disableAutohide
!
=
=
typeof
prevProps
.
disableAutohide
|
|
this
.
props
.
currentToolId
!
=
=
prevProps
.
currentToolId
|
|
this
.
props
.
isSplitConsoleActive
!
=
=
prevProps
.
isSplitConsoleActive
;
if
(
didChange
)
{
this
.
props
.
onResize
(
)
;
}
}
render
(
)
{
const
items
=
[
]
;
for
(
const
hostType
of
this
.
props
.
hostTypes
)
{
let
l10nkey
;
switch
(
hostType
.
position
)
{
case
"
window
"
:
l10nkey
=
"
toolbox
.
meatballMenu
.
dock
.
separateWindow
.
label
"
;
break
;
case
"
bottom
"
:
l10nkey
=
"
toolbox
.
meatballMenu
.
dock
.
bottom
.
label
"
;
break
;
case
"
left
"
:
l10nkey
=
"
toolbox
.
meatballMenu
.
dock
.
left
.
label
"
;
break
;
case
"
right
"
:
l10nkey
=
"
toolbox
.
meatballMenu
.
dock
.
right
.
label
"
;
break
;
default
:
assert
(
false
Unexpected
hostType
.
position
:
{
hostType
.
position
}
)
;
break
;
}
items
.
push
(
MenuItem
(
{
id
:
toolbox
-
meatball
-
menu
-
dock
-
{
hostType
.
position
}
key
:
dock
-
{
hostType
.
position
}
label
:
this
.
props
.
L10N
.
getStr
(
l10nkey
)
onClick
:
hostType
.
switchHost
checked
:
hostType
.
position
=
=
=
this
.
props
.
currentHostType
className
:
"
iconic
"
}
)
)
;
}
if
(
items
.
length
)
{
items
.
push
(
hr
(
{
key
:
"
dock
-
separator
"
}
)
)
;
}
if
(
this
.
props
.
currentToolId
!
=
=
"
webconsole
"
)
{
const
l10nkey
=
this
.
props
.
isSplitConsoleActive
?
"
toolbox
.
meatballMenu
.
hideconsole
.
label
"
:
"
toolbox
.
meatballMenu
.
splitconsole
.
label
"
;
items
.
push
(
MenuItem
(
{
id
:
"
toolbox
-
meatball
-
menu
-
splitconsole
"
key
:
"
splitconsole
"
label
:
this
.
props
.
L10N
.
getStr
(
l10nkey
)
accelerator
:
"
Esc
"
onClick
:
this
.
props
.
toggleSplitConsole
className
:
"
iconic
"
}
)
)
;
}
if
(
typeof
this
.
props
.
disableAutohide
!
=
=
"
undefined
"
)
{
items
.
push
(
MenuItem
(
{
id
:
"
toolbox
-
meatball
-
menu
-
noautohide
"
key
:
"
noautohide
"
label
:
this
.
props
.
L10N
.
getStr
(
"
toolbox
.
meatballMenu
.
noautohide
.
label
"
)
type
:
"
checkbox
"
checked
:
this
.
props
.
disableAutohide
onClick
:
this
.
props
.
toggleNoAutohide
className
:
"
iconic
"
}
)
)
;
}
items
.
push
(
MenuItem
(
{
id
:
"
toolbox
-
meatball
-
menu
-
settings
"
key
:
"
settings
"
label
:
this
.
props
.
L10N
.
getStr
(
"
toolbox
.
meatballMenu
.
settings
.
label
"
)
accelerator
:
this
.
props
.
L10N
.
getStr
(
"
toolbox
.
help
.
key
"
)
onClick
:
this
.
props
.
toggleOptions
className
:
"
iconic
"
}
)
)
;
items
.
push
(
hr
(
{
key
:
"
docs
-
separator
"
}
)
)
;
items
.
push
(
MenuItem
(
{
id
:
"
toolbox
-
meatball
-
menu
-
documentation
"
key
:
"
documentation
"
label
:
this
.
props
.
L10N
.
getStr
(
"
toolbox
.
meatballMenu
.
documentation
.
label
"
)
onClick
:
openDevToolsDocsLink
}
)
)
;
items
.
push
(
MenuItem
(
{
id
:
"
toolbox
-
meatball
-
menu
-
community
"
key
:
"
community
"
label
:
this
.
props
.
L10N
.
getStr
(
"
toolbox
.
meatballMenu
.
community
.
label
"
)
onClick
:
openCommunityLink
}
)
)
;
return
MenuList
(
{
id
:
"
toolbox
-
meatball
-
menu
"
}
items
)
;
}
}
module
.
exports
=
MeatballMenu
;
