"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
div
button
}
=
dom
;
const
MeatballMenu
=
createFactory
(
require
(
"
devtools
/
client
/
framework
/
components
/
MeatballMenu
"
)
)
;
const
MenuButton
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
menu
/
MenuButton
"
)
)
;
const
MenuItem
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
menu
/
MenuItem
"
)
)
;
const
MenuList
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
menu
/
MenuList
"
)
)
;
const
ToolboxTabs
=
createFactory
(
require
(
"
devtools
/
client
/
framework
/
components
/
ToolboxTabs
"
)
)
;
loader
.
lazyRequireGetter
(
this
"
getUnicodeUrl
"
"
devtools
/
client
/
shared
/
unicode
-
url
"
true
)
;
class
ToolboxToolbar
extends
Component
{
static
get
propTypes
(
)
{
return
{
focusedButton
:
PropTypes
.
string
toolboxButtons
:
PropTypes
.
array
currentToolId
:
PropTypes
.
string
highlightedTools
:
PropTypes
.
instanceOf
(
Set
)
panelDefinitions
:
PropTypes
.
array
hostTypes
:
PropTypes
.
arrayOf
(
PropTypes
.
shape
(
{
position
:
PropTypes
.
string
.
isRequired
switchHost
:
PropTypes
.
func
.
isRequired
}
)
)
currentHostType
:
PropTypes
.
string
areDockOptionsEnabled
:
PropTypes
.
bool
canCloseToolbox
:
PropTypes
.
bool
isSplitConsoleActive
:
PropTypes
.
bool
disableAutohide
:
PropTypes
.
bool
toggleOptions
:
PropTypes
.
func
.
isRequired
toggleSplitConsole
:
PropTypes
.
func
toggleNoAutohide
:
PropTypes
.
func
closeToolbox
:
PropTypes
.
func
focusButton
:
PropTypes
.
func
canRender
:
PropTypes
.
bool
L10N
:
PropTypes
.
object
toolbox
:
PropTypes
.
object
onTabsOrderUpdated
:
PropTypes
.
func
.
isRequired
visibleToolboxButtonCount
:
PropTypes
.
number
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
hideMenu
=
this
.
hideMenu
.
bind
(
this
)
;
this
.
createFrameList
=
this
.
createFrameList
.
bind
(
this
)
;
this
.
highlightFrame
=
this
.
highlightFrame
.
bind
(
this
)
;
this
.
clickFrameButton
=
this
.
clickFrameButton
.
bind
(
this
)
;
}
componentDidMount
(
)
{
this
.
props
.
toolbox
.
on
(
"
panel
-
changed
"
this
.
hideMenu
)
;
}
componentWillUnmount
(
)
{
this
.
props
.
toolbox
.
off
(
"
panel
-
changed
"
this
.
hideMenu
)
;
}
hideMenu
(
)
{
if
(
this
.
refs
.
meatballMenuButton
)
{
this
.
refs
.
meatballMenuButton
.
hideMenu
(
)
;
}
if
(
this
.
refs
.
frameMenuButton
)
{
this
.
refs
.
frameMenuButton
.
hideMenu
(
)
;
}
}
renderToolboxButtonsStart
(
)
{
return
this
.
renderToolboxButtons
(
true
)
;
}
renderToolboxButtonsEnd
(
)
{
return
this
.
renderToolboxButtons
(
false
)
;
}
renderToolboxButtons
(
isStart
)
{
const
{
focusedButton
toolboxButtons
focusButton
}
=
this
.
props
;
const
visibleButtons
=
toolboxButtons
.
filter
(
command
=
>
{
const
{
isVisible
isInStartContainer
}
=
command
;
return
isVisible
&
&
(
isStart
?
isInStartContainer
:
!
isInStartContainer
)
;
}
)
;
if
(
visibleButtons
.
length
=
=
=
0
)
{
return
null
;
}
const
rdmIndex
=
visibleButtons
.
findIndex
(
button
=
>
button
.
id
=
=
=
"
command
-
button
-
responsive
"
)
;
if
(
rdmIndex
!
=
=
-
1
&
&
rdmIndex
!
=
=
visibleButtons
.
length
-
1
)
{
const
rdm
=
visibleButtons
.
splice
(
rdmIndex
1
)
[
0
]
;
visibleButtons
.
push
(
rdm
)
;
}
const
renderedButtons
=
visibleButtons
.
map
(
command
=
>
{
const
{
id
description
disabled
onClick
isChecked
className
:
buttonClass
onKeyDown
}
=
command
;
if
(
id
=
=
=
"
command
-
button
-
frames
"
)
{
return
this
.
renderFrameButton
(
command
)
;
}
return
button
(
{
id
title
:
description
disabled
className
:
(
"
command
-
button
devtools
-
button
"
+
buttonClass
+
(
isChecked
?
"
checked
"
:
"
"
)
)
onClick
:
(
event
)
=
>
{
onClick
(
event
)
;
focusButton
(
id
)
;
}
onFocus
:
(
)
=
>
focusButton
(
id
)
tabIndex
:
id
=
=
=
focusedButton
?
"
0
"
:
"
-
1
"
onKeyDown
:
(
event
)
=
>
{
onKeyDown
(
event
)
;
}
}
)
;
}
)
;
const
children
=
renderedButtons
;
if
(
renderedButtons
.
length
)
{
if
(
isStart
)
{
children
.
push
(
this
.
renderSeparator
(
)
)
;
}
else
if
(
rdmIndex
!
=
=
-
1
&
&
visibleButtons
.
length
>
1
)
{
children
.
splice
(
children
.
length
-
1
0
this
.
renderSeparator
(
)
)
;
}
}
return
div
(
{
id
:
toolbox
-
buttons
-
{
isStart
?
"
start
"
:
"
end
"
}
}
.
.
.
children
)
;
}
renderFrameButton
(
command
)
{
const
{
id
disabled
description
}
=
command
;
const
{
toolbox
}
=
this
.
props
;
return
MenuButton
(
{
id
disabled
menuId
:
id
+
"
-
panel
"
doc
:
toolbox
.
doc
className
:
"
command
-
button
devtools
-
button
"
ref
:
"
frameMenuButton
"
title
:
description
onCloseButton
:
toolbox
.
highlighterUtils
.
unhighlight
}
this
.
createFrameList
)
;
}
clickFrameButton
(
event
)
{
const
{
toolbox
}
=
this
.
props
;
toolbox
.
onSelectFrame
(
event
.
target
.
id
)
;
}
highlightFrame
(
id
)
{
if
(
!
id
)
{
return
;
}
const
{
toolbox
}
=
this
.
props
;
toolbox
.
onHighlightFrame
(
id
)
;
}
createFrameList
(
)
{
const
{
toolbox
}
=
this
.
props
;
if
(
toolbox
.
frameMap
.
size
<
1
)
{
return
null
;
}
const
items
=
[
]
;
toolbox
.
frameMap
.
forEach
(
(
frame
index
)
=
>
{
const
label
=
toolbox
.
target
.
isWebExtension
?
toolbox
.
target
.
getExtensionPathName
(
frame
.
url
)
:
getUnicodeUrl
(
frame
.
url
)
;
items
.
push
(
MenuItem
(
{
id
:
frame
.
id
.
toString
(
)
key
:
"
toolbox
-
frame
-
key
-
"
+
frame
.
id
label
checked
:
frame
.
id
=
=
=
toolbox
.
selectedFrameId
onClick
:
this
.
clickFrameButton
}
)
)
;
}
)
;
return
MenuList
(
{
id
:
"
toolbox
-
frame
-
menu
"
onHighlightedChildChange
:
this
.
highlightFrame
}
items
)
;
}
renderSeparator
(
)
{
return
div
(
{
className
:
"
devtools
-
separator
"
}
)
;
}
renderToolboxControls
(
)
{
const
{
focusedButton
canCloseToolbox
closeToolbox
focusButton
L10N
toolbox
}
=
this
.
props
;
const
meatballMenuButtonId
=
"
toolbox
-
meatball
-
menu
-
button
"
;
const
meatballMenuButton
=
MenuButton
(
{
id
:
meatballMenuButtonId
menuId
:
meatballMenuButtonId
+
"
-
panel
"
doc
:
toolbox
.
doc
onFocus
:
(
)
=
>
focusButton
(
meatballMenuButtonId
)
className
:
"
devtools
-
button
"
title
:
L10N
.
getStr
(
"
toolbox
.
meatballMenu
.
button
.
tooltip
"
)
tabIndex
:
focusedButton
=
=
=
meatballMenuButtonId
?
"
0
"
:
"
-
1
"
ref
:
"
meatballMenuButton
"
}
MeatballMenu
(
{
.
.
.
this
.
props
hostTypes
:
this
.
props
.
areDockOptionsEnabled
?
this
.
props
.
hostTypes
:
[
]
onResize
:
(
)
=
>
{
this
.
refs
.
meatballMenuButton
.
resizeContent
(
)
;
}
}
)
)
;
const
closeButtonId
=
"
toolbox
-
close
"
;
const
closeButton
=
canCloseToolbox
?
button
(
{
id
:
closeButtonId
onFocus
:
(
)
=
>
focusButton
(
closeButtonId
)
className
:
"
devtools
-
button
"
title
:
L10N
.
getStr
(
"
toolbox
.
closebutton
.
tooltip
"
)
onClick
:
(
)
=
>
{
closeToolbox
(
)
;
}
tabIndex
:
focusedButton
=
=
=
"
toolbox
-
close
"
?
"
0
"
:
"
-
1
"
}
)
:
null
;
return
div
(
{
id
:
"
toolbox
-
controls
"
}
meatballMenuButton
closeButton
)
;
}
render
(
)
{
const
classnames
=
[
"
devtools
-
tabbar
"
]
;
const
startButtons
=
this
.
renderToolboxButtonsStart
(
)
;
const
endButtons
=
this
.
renderToolboxButtonsEnd
(
)
;
if
(
!
startButtons
)
{
classnames
.
push
(
"
devtools
-
tabbar
-
has
-
start
"
)
;
}
if
(
!
endButtons
)
{
classnames
.
push
(
"
devtools
-
tabbar
-
has
-
end
"
)
;
}
return
this
.
props
.
canRender
?
(
div
(
{
className
:
classnames
.
join
(
"
"
)
}
startButtons
ToolboxTabs
(
this
.
props
)
endButtons
this
.
renderToolboxControls
(
)
)
)
:
div
(
{
className
:
classnames
.
join
(
"
"
)
}
)
;
}
}
module
.
exports
=
ToolboxToolbar
;
