"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
findDOMNode
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
{
div
}
=
dom
;
const
MenuButton
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
menu
/
MenuButton
"
)
)
;
const
MenuItem
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
menu
/
MenuItem
"
)
)
;
const
MenuList
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
menu
/
MenuList
"
)
)
;
const
ToolboxTab
=
createFactory
(
require
(
"
devtools
/
client
/
framework
/
components
/
ToolboxTab
"
)
)
;
const
{
ToolboxTabsOrderManager
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
-
tabs
-
order
-
manager
"
)
;
const
CHEVRON_BUTTON_WIDTH
=
26
;
class
ToolboxTabs
extends
Component
{
static
get
propTypes
(
)
{
return
{
currentToolId
:
PropTypes
.
string
focusButton
:
PropTypes
.
func
focusedButton
:
PropTypes
.
string
highlightedTools
:
PropTypes
.
object
panelDefinitions
:
PropTypes
.
array
selectTool
:
PropTypes
.
func
toolbox
:
PropTypes
.
object
visibleToolboxButtonCount
:
PropTypes
.
number
.
isRequired
L10N
:
PropTypes
.
object
onTabsOrderUpdated
:
PropTypes
.
func
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
overflowedTabIds
:
[
]
}
;
this
.
_cachedToolTabsWidthMap
=
new
Map
(
)
;
this
.
_resizeTimerId
=
null
;
this
.
resizeHandler
=
this
.
resizeHandler
.
bind
(
this
)
;
this
.
_tabsOrderManager
=
new
ToolboxTabsOrderManager
(
props
.
onTabsOrderUpdated
props
.
panelDefinitions
)
;
}
componentDidMount
(
)
{
window
.
addEventListener
(
"
resize
"
this
.
resizeHandler
)
;
this
.
updateCachedToolTabsWidthMap
(
)
;
this
.
updateOverflowedTabs
(
)
;
}
componentWillUpdate
(
nextProps
nextState
)
{
if
(
this
.
shouldUpdateToolboxTabs
(
this
.
props
nextProps
)
)
{
nextState
.
overflowedTabIds
=
[
]
;
}
}
componentDidUpdate
(
prevProps
prevState
)
{
if
(
this
.
shouldUpdateToolboxTabs
(
prevProps
this
.
props
)
)
{
this
.
updateCachedToolTabsWidthMap
(
)
;
this
.
updateOverflowedTabs
(
)
;
this
.
_tabsOrderManager
.
setCurrentPanelDefinitions
(
this
.
props
.
panelDefinitions
)
;
}
}
componentWillUnmount
(
)
{
window
.
removeEventListener
(
"
resize
"
this
.
resizeHandler
)
;
window
.
cancelIdleCallback
(
this
.
_resizeTimerId
)
;
this
.
_tabsOrderManager
.
destroy
(
)
;
}
equalToolIdArray
(
prevPanels
nextPanels
)
{
if
(
prevPanels
.
length
!
=
=
nextPanels
.
length
)
{
return
false
;
}
return
prevPanels
.
join
(
"
-
"
)
=
=
=
nextPanels
.
join
(
"
-
"
)
;
}
shouldUpdateToolboxTabs
(
prevProps
nextProps
)
{
if
(
prevProps
.
currentToolId
!
=
=
nextProps
.
currentToolId
|
|
prevProps
.
visibleToolboxButtonCount
!
=
=
nextProps
.
visibleToolboxButtonCount
)
{
return
true
;
}
const
prevPanels
=
prevProps
.
panelDefinitions
.
map
(
def
=
>
def
.
id
)
;
const
nextPanels
=
nextProps
.
panelDefinitions
.
map
(
def
=
>
def
.
id
)
;
return
!
this
.
equalToolIdArray
(
prevPanels
nextPanels
)
;
}
updateCachedToolTabsWidthMap
(
)
{
const
thisNode
=
findDOMNode
(
this
)
;
const
utils
=
window
.
windowUtils
;
thisNode
.
clientWidth
;
for
(
const
tab
of
thisNode
.
querySelectorAll
(
"
.
devtools
-
tab
"
)
)
{
const
tabId
=
tab
.
id
.
replace
(
"
toolbox
-
tab
-
"
"
"
)
;
if
(
!
this
.
_cachedToolTabsWidthMap
.
has
(
tabId
)
)
{
const
rect
=
utils
.
getBoundsWithoutFlushing
(
tab
)
;
this
.
_cachedToolTabsWidthMap
.
set
(
tabId
rect
.
width
)
;
}
}
}
updateOverflowedTabs
(
)
{
const
node
=
findDOMNode
(
this
)
;
const
toolboxWidth
=
parseInt
(
getComputedStyle
(
node
)
.
width
10
)
;
const
{
currentToolId
}
=
this
.
props
;
const
enabledTabs
=
this
.
props
.
panelDefinitions
.
map
(
def
=
>
def
.
id
)
;
let
sumWidth
=
0
;
const
visibleTabs
=
[
]
;
for
(
const
id
of
enabledTabs
)
{
const
width
=
this
.
_cachedToolTabsWidthMap
.
get
(
id
)
;
sumWidth
+
=
width
;
if
(
sumWidth
<
=
toolboxWidth
)
{
visibleTabs
.
push
(
id
)
;
}
else
{
sumWidth
=
sumWidth
-
width
+
CHEVRON_BUTTON_WIDTH
;
if
(
sumWidth
>
toolboxWidth
)
{
const
removeTabId
=
visibleTabs
.
pop
(
)
;
sumWidth
-
=
this
.
_cachedToolTabsWidthMap
.
get
(
removeTabId
)
;
}
break
;
}
}
if
(
!
visibleTabs
.
includes
(
currentToolId
)
&
&
enabledTabs
.
includes
(
currentToolId
)
)
{
const
selectedToolWidth
=
this
.
_cachedToolTabsWidthMap
.
get
(
currentToolId
)
;
while
(
(
sumWidth
+
selectedToolWidth
)
>
toolboxWidth
&
&
visibleTabs
.
length
>
0
)
{
const
removingToolId
=
visibleTabs
.
pop
(
)
;
const
removingToolWidth
=
this
.
_cachedToolTabsWidthMap
.
get
(
removingToolId
)
;
sumWidth
-
=
removingToolWidth
;
}
if
(
(
sumWidth
+
selectedToolWidth
)
<
=
toolboxWidth
)
{
visibleTabs
.
push
(
currentToolId
)
;
}
}
const
willOverflowTabs
=
enabledTabs
.
filter
(
id
=
>
!
visibleTabs
.
includes
(
id
)
)
;
if
(
!
this
.
equalToolIdArray
(
this
.
state
.
overflowedTabIds
willOverflowTabs
)
)
{
this
.
setState
(
{
overflowedTabIds
:
willOverflowTabs
}
)
;
}
}
resizeHandler
(
evt
)
{
window
.
cancelIdleCallback
(
this
.
_resizeTimerId
)
;
this
.
_resizeTimerId
=
window
.
requestIdleCallback
(
(
)
=
>
{
this
.
updateOverflowedTabs
(
)
;
}
{
timeout
:
100
}
)
;
}
renderToolsChevronMenuList
(
)
{
const
{
panelDefinitions
selectTool
}
=
this
.
props
;
const
items
=
[
]
;
for
(
const
{
id
label
icon
}
of
panelDefinitions
)
{
if
(
this
.
state
.
overflowedTabIds
.
includes
(
id
)
)
{
items
.
push
(
MenuItem
(
{
key
:
id
id
:
"
tools
-
chevron
-
menupopup
-
"
+
id
label
type
:
"
checkbox
"
onClick
:
(
)
=
>
{
selectTool
(
id
"
tab_switch
"
)
;
}
icon
}
)
)
;
}
}
return
MenuList
(
{
id
:
"
tools
-
chevron
-
menupopup
"
}
items
)
;
}
renderToolsChevronButton
(
)
{
const
{
toolbox
}
=
this
.
props
;
return
MenuButton
(
{
id
:
"
tools
-
chevron
-
menu
-
button
"
menuId
:
"
tools
-
chevron
-
menu
-
button
-
panel
"
className
:
"
devtools
-
button
tools
-
chevron
-
menu
"
doc
:
toolbox
.
doc
}
this
.
renderToolsChevronMenuList
(
)
)
;
}
render
(
)
{
const
{
currentToolId
focusButton
focusedButton
highlightedTools
panelDefinitions
selectTool
}
=
this
.
props
;
const
tabs
=
panelDefinitions
.
map
(
panelDefinition
=
>
{
if
(
!
this
.
state
.
overflowedTabIds
.
includes
(
panelDefinition
.
id
)
)
{
return
ToolboxTab
(
{
key
:
panelDefinition
.
id
currentToolId
focusButton
focusedButton
highlightedTools
panelDefinition
selectTool
}
)
;
}
return
null
;
}
)
;
return
div
(
{
className
:
"
toolbox
-
tabs
-
wrapper
"
}
div
(
{
className
:
"
toolbox
-
tabs
"
onMouseDown
:
(
e
)
=
>
this
.
_tabsOrderManager
.
onMouseDown
(
e
)
}
tabs
(
this
.
state
.
overflowedTabIds
.
length
>
0
)
?
this
.
renderToolsChevronButton
(
)
:
null
)
)
;
}
}
module
.
exports
=
ToolboxTabs
;
