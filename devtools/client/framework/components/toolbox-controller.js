"
use
strict
"
;
const
{
createClass
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ToolboxToolbar
=
createFactory
(
require
(
"
devtools
/
client
/
framework
/
components
/
toolbox
-
toolbar
"
)
)
;
const
ELEMENT_PICKER_ID
=
"
command
-
button
-
pick
"
;
module
.
exports
=
createClass
(
{
displayName
:
"
ToolboxController
"
getInitialState
(
)
{
return
{
focusedButton
:
ELEMENT_PICKER_ID
currentToolId
:
null
canRender
:
false
highlightedTool
:
"
"
areDockButtonsEnabled
:
true
panelDefinitions
:
[
]
hostTypes
:
[
]
canCloseToolbox
:
true
toolboxButtons
:
[
]
buttonIds
:
[
]
checkedButtonsUpdated
:
(
)
=
>
{
this
.
forceUpdate
(
)
;
}
}
;
}
componentWillUnmount
(
)
{
this
.
state
.
toolboxButtons
.
forEach
(
button
=
>
{
button
.
off
(
"
updatechecked
"
this
.
state
.
checkedButtonsUpdated
)
;
}
)
;
}
updateButtonIds
(
)
{
const
{
panelDefinitions
toolboxButtons
optionsPanel
hostTypes
canCloseToolbox
}
=
this
.
state
;
this
.
setState
(
{
buttonIds
:
[
.
.
.
toolboxButtons
.
filter
(
btn
=
>
btn
.
isInStartContainer
)
.
map
(
(
{
id
}
)
=
>
id
)
.
.
.
panelDefinitions
.
map
(
(
{
id
}
)
=
>
id
)
.
.
.
toolboxButtons
.
filter
(
btn
=
>
!
btn
.
isInStartContainer
)
.
map
(
(
{
id
}
)
=
>
id
)
optionsPanel
?
optionsPanel
.
id
:
null
.
.
.
hostTypes
.
map
(
(
{
position
}
)
=
>
"
toolbox
-
dock
-
"
+
position
)
canCloseToolbox
?
"
toolbox
-
close
"
:
null
]
.
filter
(
id
=
>
id
)
}
)
;
this
.
updateFocusedButton
(
)
;
}
updateFocusedButton
(
)
{
this
.
setFocusedButton
(
this
.
state
.
focusedButton
)
;
}
setFocusedButton
(
focusedButton
)
{
const
{
buttonIds
}
=
this
.
state
;
this
.
setState
(
{
focusedButton
:
focusedButton
&
&
buttonIds
.
includes
(
focusedButton
)
?
focusedButton
:
buttonIds
[
0
]
}
)
;
}
setCurrentToolId
(
currentToolId
)
{
this
.
setState
(
{
currentToolId
}
)
;
this
.
setFocusedButton
(
currentToolId
)
;
}
setCanRender
(
)
{
this
.
setState
(
{
canRender
:
true
}
)
;
this
.
updateButtonIds
(
)
;
}
setOptionsPanel
(
optionsPanel
)
{
this
.
setState
(
{
optionsPanel
}
)
;
this
.
updateButtonIds
(
)
;
}
highlightTool
(
highlightedTool
)
{
this
.
setState
(
{
highlightedTool
}
)
;
}
unhighlightTool
(
id
)
{
if
(
this
.
state
.
highlightedTool
=
=
=
id
)
{
this
.
setState
(
{
highlightedTool
:
"
"
}
)
;
}
}
setDockButtonsEnabled
(
areDockButtonsEnabled
)
{
this
.
setState
(
{
areDockButtonsEnabled
}
)
;
this
.
updateButtonIds
(
)
;
}
setHostTypes
(
hostTypes
)
{
this
.
setState
(
{
hostTypes
}
)
;
this
.
updateButtonIds
(
)
;
}
setCanCloseToolbox
(
canCloseToolbox
)
{
this
.
setState
(
{
canCloseToolbox
}
)
;
this
.
updateButtonIds
(
)
;
}
setPanelDefinitions
(
panelDefinitions
)
{
this
.
setState
(
{
panelDefinitions
}
)
;
this
.
updateButtonIds
(
)
;
}
setToolboxButtons
(
toolboxButtons
)
{
this
.
state
.
toolboxButtons
.
forEach
(
button
=
>
{
button
.
off
(
"
updatechecked
"
this
.
state
.
checkedButtonsUpdated
)
;
}
)
;
toolboxButtons
.
forEach
(
button
=
>
{
button
.
on
(
"
updatechecked
"
this
.
state
.
checkedButtonsUpdated
)
;
}
)
;
this
.
setState
(
{
toolboxButtons
}
)
;
this
.
updateButtonIds
(
)
;
}
setCanMinimize
(
canMinimize
)
{
}
render
(
)
{
return
ToolboxToolbar
(
Object
.
assign
(
{
}
this
.
props
this
.
state
)
)
;
}
}
)
;
