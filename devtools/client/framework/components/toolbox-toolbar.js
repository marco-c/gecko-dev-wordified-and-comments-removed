"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
div
button
}
=
dom
;
const
Menu
=
require
(
"
devtools
/
client
/
framework
/
menu
"
)
;
const
MenuItem
=
require
(
"
devtools
/
client
/
framework
/
menu
-
item
"
)
;
const
ToolboxTab
=
createFactory
(
require
(
"
devtools
/
client
/
framework
/
components
/
toolbox
-
tab
"
)
)
;
const
ToolboxTabs
=
createFactory
(
require
(
"
devtools
/
client
/
framework
/
components
/
toolbox
-
tabs
"
)
)
;
class
ToolboxToolbar
extends
Component
{
static
get
propTypes
(
)
{
return
{
focusedButton
:
PropTypes
.
string
toolboxButtons
:
PropTypes
.
array
currentToolId
:
PropTypes
.
string
highlightedTools
:
PropTypes
.
instanceOf
(
Set
)
panelDefinitions
:
PropTypes
.
array
optionsPanel
:
PropTypes
.
object
hostTypes
:
PropTypes
.
arrayOf
(
PropTypes
.
shape
(
{
position
:
PropTypes
.
string
.
isRequired
switchHost
:
PropTypes
.
func
.
isRequired
}
)
)
areDockButtonsEnabled
:
PropTypes
.
bool
canCloseToolbox
:
PropTypes
.
bool
selectTool
:
PropTypes
.
func
closeToolbox
:
PropTypes
.
func
focusButton
:
PropTypes
.
func
canRender
:
PropTypes
.
bool
L10N
:
PropTypes
.
object
toolbox
:
PropTypes
.
object
}
;
}
render
(
)
{
const
containerProps
=
{
className
:
"
devtools
-
tabbar
"
}
;
return
this
.
props
.
canRender
?
(
div
(
containerProps
renderToolboxButtonsStart
(
this
.
props
)
ToolboxTabs
(
this
.
props
)
renderToolboxButtonsEnd
(
this
.
props
)
renderOptions
(
this
.
props
)
renderSeparator
(
)
renderToolboxControls
(
this
.
props
)
)
)
:
div
(
containerProps
)
;
}
}
module
.
exports
=
ToolboxToolbar
;
function
renderToolboxButtonsStart
(
props
)
{
return
renderToolboxButtons
(
props
true
)
;
}
function
renderToolboxButtonsEnd
(
props
)
{
return
renderToolboxButtons
(
props
false
)
;
}
function
renderToolboxButtons
(
{
focusedButton
toolboxButtons
focusButton
}
isStart
)
{
const
visibleButtons
=
toolboxButtons
.
filter
(
command
=
>
{
const
{
isVisible
isInStartContainer
}
=
command
;
return
isVisible
&
&
(
isStart
?
isInStartContainer
:
!
isInStartContainer
)
;
}
)
;
if
(
visibleButtons
.
length
=
=
=
0
)
{
return
null
;
}
return
div
(
{
id
:
toolbox
-
buttons
-
{
isStart
?
"
start
"
:
"
end
"
}
}
.
.
.
visibleButtons
.
map
(
command
=
>
{
const
{
id
description
disabled
onClick
isChecked
className
:
buttonClass
onKeyDown
}
=
command
;
return
button
(
{
id
title
:
description
disabled
className
:
(
"
command
-
button
devtools
-
button
"
+
buttonClass
+
(
isChecked
?
"
checked
"
:
"
"
)
)
onClick
:
(
event
)
=
>
{
onClick
(
event
)
;
focusButton
(
id
)
;
}
onFocus
:
(
)
=
>
focusButton
(
id
)
tabIndex
:
id
=
=
=
focusedButton
?
"
0
"
:
"
-
1
"
onKeyDown
:
(
event
)
=
>
{
onKeyDown
(
event
)
;
}
}
)
;
}
)
isStart
?
div
(
{
className
:
"
devtools
-
separator
"
}
)
:
null
)
;
}
function
renderOptions
(
{
focusedButton
currentToolId
highlightedTools
optionsPanel
selectTool
focusButton
}
)
{
return
div
(
{
id
:
"
toolbox
-
option
-
container
"
}
ToolboxTab
(
{
panelDefinition
:
optionsPanel
currentToolId
selectTool
highlightedTools
focusedButton
focusButton
}
)
)
;
}
function
renderSeparator
(
)
{
return
div
(
{
className
:
"
devtools
-
separator
"
}
)
;
}
function
renderToolboxControls
(
props
)
{
const
{
focusedButton
closeToolbox
hostTypes
focusButton
L10N
areDockOptionsEnabled
canCloseToolbox
}
=
props
;
const
meatballMenuButtonId
=
"
toolbox
-
meatball
-
menu
-
button
"
;
const
meatballMenuButton
=
button
(
{
id
:
meatballMenuButtonId
onFocus
:
(
)
=
>
focusButton
(
meatballMenuButtonId
)
className
:
"
devtools
-
button
"
title
:
L10N
.
getStr
(
"
toolbox
.
meatballMenu
.
button
.
tooltip
"
)
onClick
:
evt
=
>
{
showMeatballMenu
(
evt
.
target
{
.
.
.
props
hostTypes
:
areDockOptionsEnabled
?
hostTypes
:
[
]
}
)
;
}
tabIndex
:
focusedButton
=
=
=
meatballMenuButtonId
?
"
0
"
:
"
-
1
"
}
)
;
const
closeButtonId
=
"
toolbox
-
close
"
;
const
closeButton
=
canCloseToolbox
?
button
(
{
id
:
closeButtonId
onFocus
:
(
)
=
>
focusButton
(
closeButtonId
)
className
:
"
devtools
-
button
"
title
:
L10N
.
getStr
(
"
toolbox
.
closebutton
.
tooltip
"
)
onClick
:
(
)
=
>
{
closeToolbox
(
)
;
}
tabIndex
:
focusedButton
=
=
=
"
toolbox
-
close
"
?
"
0
"
:
"
-
1
"
}
)
:
null
;
return
div
(
{
id
:
"
toolbox
-
controls
"
}
meatballMenuButton
closeButton
)
;
}
function
showMeatballMenu
(
menuButton
{
hostTypes
L10N
toolbox
}
)
{
const
menu
=
new
Menu
(
{
id
:
"
toolbox
-
meatball
-
menu
"
}
)
;
for
(
const
hostType
of
hostTypes
)
{
menu
.
append
(
new
MenuItem
(
{
id
:
toolbox
-
meatball
-
menu
-
dock
-
{
hostType
.
position
}
label
:
L10N
.
getStr
(
toolbox
.
meatballMenu
.
dock
.
{
hostType
.
position
}
.
label
)
click
:
(
)
=
>
hostType
.
switchHost
(
)
}
)
)
;
}
const
rect
=
menuButton
.
getBoundingClientRect
(
)
;
const
screenX
=
menuButton
.
ownerDocument
.
defaultView
.
mozInnerScreenX
;
const
screenY
=
menuButton
.
ownerDocument
.
defaultView
.
mozInnerScreenY
;
menu
.
popup
(
rect
.
left
+
screenX
rect
.
bottom
+
screenY
toolbox
)
;
}
