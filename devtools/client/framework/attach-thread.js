const
{
Cc
Ci
Cu
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
locale
/
toolbox
.
properties
"
)
;
function
handleThreadState
(
toolbox
event
packet
)
{
if
(
event
!
=
=
"
paused
"
|
|
packet
.
why
.
type
!
=
=
"
interrupted
"
)
{
toolbox
.
target
.
emit
(
"
thread
-
"
+
event
)
;
}
if
(
event
=
=
=
"
paused
"
)
{
toolbox
.
highlightTool
(
"
jsdebugger
"
)
;
if
(
packet
.
why
.
type
=
=
=
"
debuggerStatement
"
|
|
packet
.
why
.
type
=
=
=
"
breakpoint
"
|
|
packet
.
why
.
type
=
=
=
"
exception
"
)
{
toolbox
.
raise
(
)
;
toolbox
.
selectTool
(
"
jsdebugger
"
)
;
}
}
else
if
(
event
=
=
=
"
resumed
"
)
{
toolbox
.
unhighlightTool
(
"
jsdebugger
"
)
;
}
}
function
attachThread
(
toolbox
)
{
let
deferred
=
defer
(
)
;
let
target
=
toolbox
.
target
;
let
{
form
:
{
chromeDebugger
actor
}
}
=
target
;
let
threadOptions
=
{
useSourceMaps
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
source
-
maps
-
enabled
"
)
autoBlackBox
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
auto
-
black
-
box
"
)
}
;
let
handleResponse
=
(
res
threadClient
)
=
>
{
if
(
res
.
error
)
{
deferred
.
reject
(
new
Error
(
"
Couldn
'
t
attach
to
thread
:
"
+
res
.
error
)
)
;
return
;
}
threadClient
.
addListener
(
"
paused
"
handleThreadState
.
bind
(
null
toolbox
)
)
;
threadClient
.
addListener
(
"
resumed
"
handleThreadState
.
bind
(
null
toolbox
)
)
;
if
(
!
threadClient
.
paused
)
{
deferred
.
reject
(
new
Error
(
"
Thread
in
wrong
state
when
starting
up
should
be
paused
"
)
)
;
}
threadClient
.
pauseOnExceptions
(
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
pause
-
on
-
exceptions
"
)
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
ignore
-
caught
-
exceptions
"
)
)
;
threadClient
.
resume
(
res
=
>
{
if
(
res
.
error
=
=
=
"
wrongOrder
"
)
{
const
box
=
toolbox
.
getNotificationBox
(
)
;
box
.
appendNotification
(
L10N
.
getStr
(
"
toolbox
.
resumeOrderWarning
"
)
"
wrong
-
resume
-
order
"
"
"
box
.
PRIORITY_WARNING_HIGH
)
;
}
deferred
.
resolve
(
threadClient
)
;
}
)
;
}
;
if
(
target
.
isTabActor
)
{
target
.
activeTab
.
attachThread
(
threadOptions
handleResponse
)
;
}
else
if
(
target
.
isAddon
)
{
target
.
client
.
attachAddon
(
actor
res
=
>
{
target
.
client
.
attachThread
(
res
.
threadActor
handleResponse
)
;
}
)
;
}
else
{
target
.
client
.
attachThread
(
chromeDebugger
handleResponse
)
;
}
return
deferred
.
promise
;
}
function
detachThread
(
threadClient
)
{
threadClient
.
removeListener
(
"
paused
"
)
;
threadClient
.
removeListener
(
"
resumed
"
)
;
}
module
.
exports
=
{
attachThread
detachThread
}
;
