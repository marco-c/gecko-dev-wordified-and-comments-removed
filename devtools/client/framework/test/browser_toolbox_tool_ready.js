"
use
strict
"
;
requestLongerTimeout
(
5
)
;
function
performChecks
(
target
)
{
return
(
async
function
(
)
{
let
toolIds
=
gDevTools
.
getToolDefinitionArray
(
)
.
filter
(
def
=
>
def
.
isTargetSupported
(
target
)
)
.
map
(
def
=
>
def
.
id
)
;
let
toolbox
;
for
(
let
index
=
0
;
index
<
toolIds
.
length
;
index
+
+
)
{
let
toolId
=
toolIds
[
index
]
;
info
(
"
About
to
open
"
+
index
+
"
/
"
+
toolId
)
;
toolbox
=
await
gDevTools
.
showToolbox
(
target
toolId
)
;
ok
(
toolbox
"
toolbox
exists
for
"
+
toolId
)
;
is
(
toolbox
.
currentToolId
toolId
"
currentToolId
should
be
"
+
toolId
)
;
let
panel
=
toolbox
.
getCurrentPanel
(
)
;
ok
(
panel
.
isReady
toolId
+
"
panel
should
be
ready
"
)
;
}
await
toolbox
.
destroy
(
)
;
}
)
(
)
;
}
function
test
(
)
{
Task
.
spawn
(
async
function
(
)
{
toggleAllTools
(
true
)
;
let
tab
=
await
addTab
(
"
about
:
blank
"
)
;
let
target
=
TargetFactory
.
forTab
(
tab
)
;
await
target
.
makeRemote
(
)
;
await
performChecks
(
target
)
;
gBrowser
.
removeCurrentTab
(
)
;
toggleAllTools
(
false
)
;
finish
(
)
;
}
console
.
error
)
;
}
