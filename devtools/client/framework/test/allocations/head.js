"
use
strict
"
;
let
tracker
;
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
loader
=
new
DevToolsLoader
(
{
invisibleToDebugger
:
true
}
)
;
const
{
allocationTracker
}
=
loader
.
require
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
shared
/
test
-
helpers
/
allocation
-
tracker
"
)
;
tracker
=
allocationTracker
(
{
watchDevToolsGlobals
:
true
}
)
;
}
SimpleTest
.
requestCompleteLog
(
)
;
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
devtools
.
testing
"
false
]
]
}
)
;
async
function
addTab
(
url
)
{
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
url
)
;
gBrowser
.
selectedTab
=
tab
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
return
tab
;
}
async
function
startRecordingAllocations
(
{
alsoRecordContentProcess
=
false
}
=
{
}
)
{
let
contentProcessObjects
=
null
;
let
contentProcessMemory
=
null
;
if
(
alsoRecordContentProcess
)
{
contentProcessMemory
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
(
)
=
>
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
loader
=
new
DevToolsLoader
(
{
invisibleToDebugger
:
true
}
)
;
const
{
allocationTracker
}
=
loader
.
require
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
shared
/
test
-
helpers
/
allocation
-
tracker
"
)
;
const
tracker
=
allocationTracker
(
{
watchAllGlobals
:
true
}
)
;
DevToolsLoader
.
tracker
=
tracker
;
await
tracker
.
doGC
(
)
;
return
tracker
.
getAllocatedMemory
(
)
;
}
)
;
contentProcessObjects
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
tracker
}
=
DevToolsLoader
;
return
tracker
.
stillAllocatedObjects
(
)
;
}
)
;
}
await
tracker
.
doGC
(
)
;
const
parentProcessMemory
=
tracker
.
getAllocatedMemory
(
)
;
const
parentProcessObjects
=
tracker
.
stillAllocatedObjects
(
)
;
return
{
parentProcessObjects
parentProcessMemory
contentProcessObjects
contentProcessMemory
}
;
}
async
function
stopRecordingAllocations
(
dataOnStart
recordName
)
{
await
tracker
.
doGC
(
)
;
ok
(
!
tracker
.
overflowed
"
Allocation
were
all
recorded
"
)
;
const
parentProcessMemory
=
tracker
.
getAllocatedMemory
(
)
;
const
parentProcessObjects
=
tracker
.
stillAllocatedObjects
(
)
;
let
contentProcessMemory
=
null
;
let
contentProcessObjects
=
null
;
if
(
dataOnStart
.
contentProcessObjects
)
{
contentProcessMemory
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
(
)
=
>
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
tracker
}
=
DevToolsLoader
;
await
tracker
.
doGC
(
)
;
return
tracker
.
getAllocatedMemory
(
)
;
}
)
;
contentProcessObjects
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
tracker
}
=
DevToolsLoader
;
return
tracker
.
stillAllocatedObjects
(
)
;
}
)
;
}
const
diffNoStackInParent
=
parentProcessObjects
.
objectsWithoutStack
-
dataOnStart
.
parentProcessObjects
.
objectsWithoutStack
;
const
diffWithStackInParent
=
parentProcessObjects
.
objectsWithStack
-
dataOnStart
.
parentProcessObjects
.
objectsWithStack
;
info
(
The
{
recordName
}
test
leaked
{
diffWithStackInParent
}
objects
(
{
diffNoStackInParent
}
with
missing
allocation
site
)
in
the
parent
process
)
;
const
PERFHERDER_DATA
=
{
framework
:
{
name
:
"
devtools
"
}
suites
:
[
{
name
:
recordName
+
"
:
parent
-
process
"
subtests
:
[
{
name
:
"
objects
-
with
-
no
-
stacks
"
value
:
diffNoStackInParent
}
{
name
:
"
objects
-
with
-
stacks
"
value
:
diffWithStackInParent
}
{
name
:
"
memory
"
value
:
parentProcessMemory
-
dataOnStart
.
parentProcessMemory
}
]
}
]
}
;
if
(
contentProcessObjects
)
{
const
diffNoStackInContent
=
contentProcessObjects
.
objectsWithoutStack
-
dataOnStart
.
contentProcessObjects
.
objectsWithoutStack
;
const
diffWithStackInContent
=
contentProcessObjects
.
objectsWithStack
-
dataOnStart
.
contentProcessObjects
.
objectsWithStack
;
info
(
The
{
recordName
}
test
leaked
{
diffWithStackInContent
}
objects
(
{
diffNoStackInContent
}
with
missing
allocation
site
)
in
the
content
process
)
;
PERFHERDER_DATA
.
suites
.
push
(
{
name
:
recordName
+
"
:
content
-
process
"
subtests
:
[
{
name
:
"
objects
-
with
-
no
-
stacks
"
value
:
diffNoStackInContent
}
{
name
:
"
objects
-
with
-
stacks
"
value
:
diffWithStackInContent
}
{
name
:
"
memory
"
value
:
contentProcessMemory
-
dataOnStart
.
contentProcessMemory
}
]
}
)
;
}
info
(
"
PERFHERDER_DATA
:
"
+
JSON
.
stringify
(
PERFHERDER_DATA
)
)
;
}
