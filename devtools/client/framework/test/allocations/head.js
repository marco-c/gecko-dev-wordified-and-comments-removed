"
use
strict
"
;
let
tracker
releaseTrackerLoader
;
{
const
{
useDistinctSystemPrincipalLoader
releaseDistinctSystemPrincipalLoader
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
DistinctSystemPrincipalLoader
.
sys
.
mjs
"
{
global
:
"
shared
"
}
)
;
const
requester
=
{
}
;
const
loader
=
useDistinctSystemPrincipalLoader
(
requester
)
;
releaseTrackerLoader
=
(
)
=
>
releaseDistinctSystemPrincipalLoader
(
requester
)
;
const
{
allocationTracker
}
=
loader
.
require
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
shared
/
test
-
helpers
/
allocation
-
tracker
.
js
"
)
;
tracker
=
allocationTracker
(
{
watchDevToolsGlobals
:
true
}
)
;
}
ChromeUtils
.
defineLazyGetter
(
this
"
TrackedObjects
"
(
)
=
>
{
return
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
test
-
helpers
/
tracked
-
objects
.
sys
.
mjs
"
)
;
}
)
;
SimpleTest
.
requestCompleteLog
(
)
;
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
devtools
.
testing
"
false
]
]
}
)
;
const
DEBUG_ALLOCATIONS
=
Services
.
env
.
get
(
"
DEBUG_DEVTOOLS_ALLOCATIONS
"
)
;
async
function
addTab
(
url
)
{
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
url
)
;
gBrowser
.
selectedTab
=
tab
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
return
tab
;
}
async
function
startRecordingAllocations
(
{
alsoRecordContentProcess
=
false
}
=
{
}
)
{
if
(
alsoRecordContentProcess
)
{
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
DEBUG_ALLOCATIONS
]
async
debug_allocations
=
>
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
)
;
const
{
useDistinctSystemPrincipalLoader
releaseDistinctSystemPrincipalLoader
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
DistinctSystemPrincipalLoader
.
sys
.
mjs
"
)
;
const
requester
=
{
}
;
const
loader
=
useDistinctSystemPrincipalLoader
(
requester
)
;
const
{
allocationTracker
}
=
loader
.
require
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
shared
/
test
-
helpers
/
allocation
-
tracker
.
js
"
)
;
const
tracker
=
allocationTracker
(
{
watchAllGlobals
:
true
}
)
;
DevToolsLoader
.
tracker
=
tracker
;
DevToolsLoader
.
releaseTrackerLoader
=
(
)
=
>
releaseDistinctSystemPrincipalLoader
(
requester
)
;
await
tracker
.
startRecordingAllocations
(
debug_allocations
)
;
}
)
;
await
tracker
.
doGC
(
)
;
}
await
tracker
.
startRecordingAllocations
(
DEBUG_ALLOCATIONS
)
;
}
async
function
stopRecordingAllocations
(
recordName
{
alsoRecordContentProcess
=
false
}
=
{
}
)
{
ok
(
!
tracker
.
overflowed
"
Allocation
were
all
recorded
in
the
parent
process
"
)
;
const
parentProcessData
=
await
tracker
.
stopRecordingAllocations
(
DEBUG_ALLOCATIONS
)
;
const
objectNodeIds
=
TrackedObjects
.
getAllNodeIds
(
)
;
if
(
objectNodeIds
.
length
)
{
tracker
.
traceObjects
(
objectNodeIds
)
;
}
let
contentProcessData
=
null
;
if
(
alsoRecordContentProcess
)
{
contentProcessData
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
DEBUG_ALLOCATIONS
]
debug_allocations
=
>
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
)
;
const
{
tracker
}
=
DevToolsLoader
;
ok
(
!
tracker
.
overflowed
"
Allocation
were
all
recorded
in
the
content
process
"
)
;
return
tracker
.
stopRecordingAllocations
(
debug_allocations
)
;
}
)
;
}
const
trackedObjectsInContent
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
const
TrackedObjects
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
test
-
helpers
/
tracked
-
objects
.
sys
.
mjs
"
)
;
const
objectNodeIds
=
TrackedObjects
.
getAllNodeIds
(
)
;
if
(
objectNodeIds
.
length
)
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
)
;
const
{
tracker
}
=
DevToolsLoader
;
const
snapshotFile
=
tracker
.
getSnapshotFile
(
)
;
return
{
snapshotFile
objectNodeIds
}
;
}
return
null
;
}
)
;
if
(
trackedObjectsInContent
)
{
tracker
.
traceObjects
(
trackedObjectsInContent
.
objectNodeIds
trackedObjectsInContent
.
snapshotFile
)
;
}
info
(
The
{
recordName
}
test
leaked
{
parentProcessData
.
objectsWithStack
}
objects
(
{
parentProcessData
.
objectsWithoutStack
}
with
missing
allocation
site
)
in
the
parent
process
)
;
const
PERFHERDER_DATA
=
{
framework
:
{
name
:
"
devtools
"
}
suites
:
[
{
name
:
recordName
+
"
:
parent
-
process
"
subtests
:
[
{
name
:
"
objects
-
with
-
stacks
"
value
:
parentProcessData
.
objectsWithStack
}
{
name
:
"
memory
"
value
:
parentProcessData
.
memory
}
]
}
]
}
;
if
(
alsoRecordContentProcess
)
{
info
(
The
{
recordName
}
test
leaked
{
contentProcessData
.
objectsWithStack
}
objects
(
{
contentProcessData
.
objectsWithoutStack
}
with
missing
allocation
site
)
in
the
content
process
)
;
PERFHERDER_DATA
.
suites
.
push
(
{
name
:
recordName
+
"
:
content
-
process
"
subtests
:
[
{
name
:
"
objects
-
with
-
stacks
"
value
:
contentProcessData
.
objectsWithStack
}
{
name
:
"
memory
"
value
:
contentProcessData
.
memory
}
]
}
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
)
;
DevToolsLoader
.
releaseTrackerLoader
(
)
;
}
)
;
}
releaseTrackerLoader
(
)
;
info
(
"
PERFHERDER_DATA
:
"
+
JSON
.
stringify
(
PERFHERDER_DATA
)
)
;
}
