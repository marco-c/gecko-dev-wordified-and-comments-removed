"
use
strict
"
;
const
URL
=
"
data
:
text
/
html
;
charset
=
utf8
test
for
showToolbox
called
while
tool
is
opened
"
;
const
lazyToolId
=
"
testtool1
"
;
registerCleanupFunction
(
(
)
=
>
{
gDevTools
.
unregisterTool
(
lazyToolId
)
;
}
)
;
const
TOOL_OPEN_DELAY
=
3000
;
class
LazyDevToolsPanel
extends
DevToolPanel
{
constructor
(
iframeWindow
toolbox
)
{
super
(
iframeWindow
toolbox
)
;
}
async
open
(
)
{
await
wait
(
TOOL_OPEN_DELAY
)
;
return
this
;
}
}
function
isPanelReady
(
toolbox
toolId
)
{
return
!
!
toolbox
.
getPanel
(
toolId
)
;
}
add_task
(
async
function
automaticallyBindTexbox
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
csp
.
enable
"
false
]
[
"
dom
.
security
.
skip_about_page_has_csp_assert
"
true
]
]
}
)
;
info
(
"
Registering
a
tool
with
an
input
field
and
making
sure
the
context
menu
works
"
)
;
gDevTools
.
registerTool
(
{
id
:
lazyToolId
isTargetSupported
:
(
)
=
>
true
url
:
data
:
text
/
html
;
charset
=
utf8
Lazy
tool
label
:
"
Lazy
"
build
:
function
(
iframeWindow
toolbox
)
{
this
.
panel
=
new
LazyDevToolsPanel
(
iframeWindow
toolbox
)
;
return
this
.
panel
.
open
(
)
;
}
}
)
;
const
tab
=
await
addTab
(
URL
)
;
const
toolbox
=
await
openToolboxForTab
(
tab
"
inspector
"
)
;
const
onLazyToolReady
=
toolbox
.
once
(
lazyToolId
+
"
-
ready
"
)
;
toolbox
.
selectTool
(
lazyToolId
)
;
info
(
"
Wait
until
toolbox
considers
the
current
tool
is
the
lazy
tool
"
)
;
await
waitUntil
(
(
)
=
>
toolbox
.
currentToolId
=
=
lazyToolId
)
;
ok
(
!
isPanelReady
(
toolbox
lazyToolId
)
"
lazyTool
should
not
be
ready
yet
"
)
;
await
gDevTools
.
showToolboxForTab
(
tab
{
toolId
:
lazyToolId
}
)
;
ok
(
isPanelReady
(
toolbox
lazyToolId
)
"
lazyTool
should
not
ready
after
showToolbox
"
)
;
await
onLazyToolReady
;
}
)
;
