"
use
strict
"
;
requestLongerTimeout
(
2
)
;
var
{
Toolbox
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
toolbox
.
properties
"
)
;
add_task
(
async
function
(
)
{
const
tab
=
await
addTab
(
"
about
:
blank
"
)
;
const
target
=
await
TargetFactory
.
forTab
(
tab
)
;
await
target
.
attach
(
)
;
const
toolIDs
=
gDevTools
.
getToolDefinitionArray
(
)
.
filter
(
def
=
>
def
.
isTargetSupported
(
target
)
&
&
def
.
id
!
=
=
"
options
"
)
.
map
(
def
=
>
def
.
id
)
;
const
toolbox
=
await
gDevTools
.
showToolbox
(
target
toolIDs
[
0
]
Toolbox
.
HostType
.
BOTTOM
)
;
const
nextShortcut
=
L10N
.
getStr
(
"
toolbox
.
nextTool
.
key
"
)
;
const
prevShortcut
=
L10N
.
getStr
(
"
toolbox
.
previousTool
.
key
"
)
;
for
(
let
i
=
1
;
i
<
toolIDs
.
length
;
i
+
+
)
{
await
testShortcuts
(
toolbox
i
nextShortcut
toolIDs
)
;
}
for
(
let
i
=
0
;
i
<
toolIDs
.
length
;
i
+
+
)
{
await
testShortcuts
(
toolbox
i
nextShortcut
toolIDs
)
;
}
for
(
let
i
=
toolIDs
.
length
-
2
;
i
>
=
0
;
i
-
-
)
{
await
testShortcuts
(
toolbox
i
prevShortcut
toolIDs
)
;
}
for
(
let
i
=
toolIDs
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
await
testShortcuts
(
toolbox
i
prevShortcut
toolIDs
)
;
}
await
toolbox
.
destroy
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
async
function
testShortcuts
(
toolbox
index
shortcut
toolIDs
)
{
info
(
"
Testing
shortcut
to
switch
to
tool
"
+
index
+
"
:
"
+
toolIDs
[
index
]
+
"
using
shortcut
"
+
shortcut
)
;
const
onToolSelected
=
toolbox
.
once
(
"
select
"
)
;
synthesizeKeyShortcut
(
shortcut
)
;
const
id
=
await
onToolSelected
;
info
(
"
toolbox
-
select
event
from
"
+
id
)
;
is
(
toolIDs
.
indexOf
(
id
)
index
"
Correct
tool
is
selected
on
pressing
the
shortcut
for
"
+
id
)
;
}
