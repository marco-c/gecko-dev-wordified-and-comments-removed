var
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
var
{
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
debugger
-
client
"
)
;
const
TAB_URL_1
=
"
data
:
text
/
html
;
charset
=
utf
-
8
foo
"
;
const
TAB_URL_2
=
"
data
:
text
/
html
;
charset
=
utf
-
8
bar
"
;
var
gClient
;
var
gTab1
gTab2
;
var
gTargetActor1
gTargetActor2
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerAllActors
(
)
;
openTabs
(
)
;
}
function
openTabs
(
)
{
addTab
(
TAB_URL_1
)
.
then
(
tab1
=
>
{
gTab1
=
tab1
;
addTab
(
TAB_URL_2
)
.
then
(
tab2
=
>
{
gTab2
=
tab2
;
connect
(
)
;
}
)
;
}
)
;
}
function
connect
(
)
{
gClient
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
(
)
=
>
gClient
.
listTabs
(
)
)
.
then
(
response
=
>
{
gTargetActor1
=
response
.
tabs
.
filter
(
a
=
>
a
.
url
=
=
=
TAB_URL_1
)
[
0
]
;
gTargetActor2
=
response
.
tabs
.
filter
(
a
=
>
a
.
url
=
=
=
TAB_URL_2
)
[
0
]
;
checkGetTab
(
)
;
}
)
;
}
function
checkGetTab
(
)
{
gClient
.
mainRoot
.
getTab
(
{
tab
:
gTab1
}
)
.
then
(
front
=
>
{
is
(
JSON
.
stringify
(
gTargetActor1
)
JSON
.
stringify
(
front
.
targetForm
)
"
getTab
returns
the
same
target
form
for
first
tab
"
)
;
}
)
.
then
(
(
)
=
>
{
const
filter
=
{
}
;
if
(
gTab1
.
linkedBrowser
.
frameLoader
.
tabParent
)
{
filter
.
tabId
=
gTab1
.
linkedBrowser
.
frameLoader
.
tabParent
.
tabId
;
}
else
{
const
windowUtils
=
gTab1
.
linkedBrowser
.
contentWindow
.
windowUtils
;
filter
.
outerWindowID
=
windowUtils
.
outerWindowID
;
}
return
gClient
.
mainRoot
.
getTab
(
filter
)
;
}
)
.
then
(
front
=
>
{
is
(
JSON
.
stringify
(
gTargetActor1
)
JSON
.
stringify
(
front
.
targetForm
)
"
getTab
returns
the
same
target
form
when
filtering
by
tabId
/
outerWindowID
"
)
;
}
)
.
then
(
(
)
=
>
gClient
.
mainRoot
.
getTab
(
{
tab
:
gTab2
}
)
)
.
then
(
front
=
>
{
is
(
JSON
.
stringify
(
gTargetActor2
)
JSON
.
stringify
(
front
.
targetForm
)
"
getTab
returns
the
same
target
form
for
second
tab
"
)
;
}
)
.
then
(
checkGetTabFailures
)
;
}
function
checkGetTabFailures
(
)
{
gClient
.
mainRoot
.
getTab
(
{
tabId
:
-
999
}
)
.
then
(
response
=
>
ok
(
false
"
getTab
unexpectedly
succeed
with
a
wrong
tabId
"
)
response
=
>
{
is
(
response
"
Protocol
error
(
noTab
)
:
Unable
to
find
tab
with
tabId
'
-
999
'
"
)
;
}
)
.
then
(
(
)
=
>
gClient
.
mainRoot
.
getTab
(
{
outerWindowID
:
-
999
}
)
)
.
then
(
response
=
>
ok
(
false
"
getTab
unexpectedly
succeed
with
a
wrong
outerWindowID
"
)
response
=
>
{
is
(
response
"
Protocol
error
(
noTab
)
:
Unable
to
find
tab
with
outerWindowID
'
-
999
'
"
)
;
}
)
.
then
(
checkSelectedTargetActor
)
;
}
function
checkSelectedTargetActor
(
)
{
gClient
.
request
(
{
to
:
gTargetActor2
.
consoleActor
type
:
"
startListeners
"
listeners
:
[
]
}
aResponse
=
>
{
ok
(
"
startedListeners
"
in
aResponse
"
Actor
from
the
selected
tab
should
respond
to
the
request
.
"
)
;
closeSecondTab
(
)
;
}
)
;
}
function
closeSecondTab
(
)
{
const
container
=
gBrowser
.
tabContainer
;
container
.
addEventListener
(
"
TabClose
"
function
(
)
{
checkFirstTargetActor
(
)
;
}
{
once
:
true
}
)
;
gBrowser
.
removeTab
(
gTab2
)
;
}
function
checkFirstTargetActor
(
)
{
gClient
.
request
(
{
to
:
gTargetActor1
.
consoleActor
type
:
"
startListeners
"
listeners
:
[
]
}
aResponse
=
>
{
ok
(
"
startedListeners
"
in
aResponse
"
Actor
from
the
first
tab
should
still
respond
.
"
)
;
cleanup
(
)
;
}
)
;
}
function
cleanup
(
)
{
const
container
=
gBrowser
.
tabContainer
;
container
.
addEventListener
(
"
TabClose
"
function
(
)
{
gClient
.
close
(
)
.
then
(
finish
)
;
}
{
once
:
true
}
)
;
gBrowser
.
removeTab
(
gTab1
)
;
}
