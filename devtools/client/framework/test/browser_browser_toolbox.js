const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
await
setupPreferencesForBrowserToolbox
(
)
;
const
onCustomMessage
=
new
Promise
(
done
=
>
{
Services
.
obs
.
addObserver
(
function
listener
(
target
aTop
data
)
{
Services
.
obs
.
removeObserver
(
listener
"
browser
-
toolbox
-
console
-
works
"
)
;
done
(
data
=
=
=
"
true
"
)
;
}
"
browser
-
toolbox
-
console
-
works
"
)
;
}
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
const
testScript
=
function
(
)
{
toolbox
.
selectTool
(
"
webconsole
"
)
.
then
(
console
=
>
{
const
hasCloseButton
=
!
!
toolbox
.
doc
.
getElementById
(
"
toolbox
-
close
"
)
;
const
{
wrapper
}
=
console
.
hud
.
ui
;
const
js
=
Services
.
obs
.
notifyObservers
(
null
'
browser
-
toolbox
-
console
-
works
'
{
hasCloseButton
}
)
;
const
onResult
=
new
Promise
(
resolve
=
>
{
const
onNewMessages
=
messages
=
>
{
for
(
const
message
of
messages
)
{
if
(
message
.
node
.
classList
.
contains
(
"
result
"
)
)
{
console
.
hud
.
ui
.
off
(
"
new
-
messages
"
onNewMessages
)
;
resolve
(
)
;
}
}
}
;
console
.
hud
.
ui
.
on
(
"
new
-
messages
"
onNewMessages
)
;
}
)
;
wrapper
.
dispatchEvaluateExpression
(
js
)
;
return
onResult
;
}
)
.
then
(
(
)
=
>
toolbox
.
destroy
(
)
)
;
}
;
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
new
"
+
testScript
)
;
registerCleanupFunction
(
(
)
=
>
{
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
"
)
;
}
)
;
const
{
BrowserToolboxProcess
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
framework
/
ToolboxProcess
.
jsm
"
)
;
is
(
BrowserToolboxProcess
.
getBrowserToolboxSessionState
(
)
false
"
No
session
state
initially
"
)
;
let
closePromise
;
await
new
Promise
(
onRun
=
>
{
closePromise
=
new
Promise
(
onClose
=
>
{
info
(
"
Opening
the
browser
toolbox
\
n
"
)
;
BrowserToolboxProcess
.
init
(
onClose
onRun
)
;
}
)
;
}
)
;
ok
(
true
"
Browser
toolbox
started
\
n
"
)
;
is
(
BrowserToolboxProcess
.
getBrowserToolboxSessionState
(
)
true
"
Has
session
state
"
)
;
const
hasCloseButton
=
await
onCustomMessage
;
ok
(
true
"
Received
the
custom
message
"
)
;
ok
(
!
hasCloseButton
"
Browser
toolbox
doesn
'
t
have
a
close
button
"
)
;
await
closePromise
;
ok
(
true
"
Browser
toolbox
process
just
closed
"
)
;
is
(
BrowserToolboxProcess
.
getBrowserToolboxSessionState
(
)
false
"
No
session
state
after
closing
"
)
;
}
)
;
