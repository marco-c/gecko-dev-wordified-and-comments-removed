const
{
PromiseTestUtils
}
=
scopedCuImport
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
await
new
Promise
(
done
=
>
{
let
options
=
{
"
set
"
:
[
[
"
devtools
.
debugger
.
prompt
-
connection
"
false
]
[
"
devtools
.
debugger
.
remote
-
enabled
"
true
]
[
"
devtools
.
chrome
.
enabled
"
true
]
[
"
devtools
.
browser
-
toolbox
.
allow
-
unsafe
-
script
"
true
]
[
"
devtools
.
debugger
.
remote
-
timeout
"
120000
]
]
}
;
SpecialPowers
.
pushPrefEnv
(
options
done
)
;
}
)
;
let
onCustomMessage
=
new
Promise
(
done
=
>
{
Services
.
obs
.
addObserver
(
function
listener
(
target
aTop
data
)
{
Services
.
obs
.
removeObserver
(
listener
"
browser
-
toolbox
-
console
-
works
"
)
;
done
(
data
=
=
=
"
true
"
)
;
}
"
browser
-
toolbox
-
console
-
works
"
)
;
}
)
;
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
testScript
=
function
(
)
{
toolbox
.
selectTool
(
"
webconsole
"
)
.
then
(
console
=
>
{
let
hasCloseButton
=
!
!
toolbox
.
doc
.
getElementById
(
"
toolbox
-
close
"
)
;
let
{
jsterm
}
=
console
.
hud
;
let
js
=
"
Services
.
obs
.
notifyObservers
(
null
'
browser
-
toolbox
-
console
-
works
'
"
+
hasCloseButton
+
"
)
;
"
;
return
jsterm
.
execute
(
js
)
;
}
)
.
then
(
(
)
=
>
toolbox
.
destroy
(
)
)
;
}
;
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
new
"
+
testScript
)
;
registerCleanupFunction
(
(
)
=
>
{
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
"
)
;
}
)
;
let
{
BrowserToolboxProcess
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
framework
/
ToolboxProcess
.
jsm
"
{
}
)
;
is
(
BrowserToolboxProcess
.
getBrowserToolboxSessionState
(
)
false
"
No
session
state
initially
"
)
;
let
closePromise
;
await
new
Promise
(
onRun
=
>
{
closePromise
=
new
Promise
(
onClose
=
>
{
info
(
"
Opening
the
browser
toolbox
\
n
"
)
;
BrowserToolboxProcess
.
init
(
onClose
onRun
)
;
}
)
;
}
)
;
ok
(
true
"
Browser
toolbox
started
\
n
"
)
;
is
(
BrowserToolboxProcess
.
getBrowserToolboxSessionState
(
)
true
"
Has
session
state
"
)
;
let
hasCloseButton
=
await
onCustomMessage
;
ok
(
true
"
Received
the
custom
message
"
)
;
ok
(
!
hasCloseButton
"
Browser
toolbox
doesn
'
t
have
a
close
button
"
)
;
await
closePromise
;
ok
(
true
"
Browser
toolbox
process
just
closed
"
)
;
is
(
BrowserToolboxProcess
.
getBrowserToolboxSessionState
(
)
false
"
No
session
state
after
closing
"
)
;
}
)
;
