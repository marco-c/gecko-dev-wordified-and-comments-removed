"
use
strict
"
;
var
{
Toolbox
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
framework
/
toolbox
.
js
"
)
;
var
toolbox
=
null
;
function
test
(
)
{
(
async
function
(
)
{
const
URL
=
"
data
:
text
/
plain
;
charset
=
UTF
-
8
Nothing
to
see
here
move
along
"
;
const
TOOL_ID_1
=
"
jsdebugger
"
;
const
TOOL_ID_2
=
"
webconsole
"
;
await
addTab
(
URL
)
;
toolbox
=
await
gDevTools
.
showToolboxForTab
(
gBrowser
.
selectedTab
{
toolId
:
TOOL_ID_1
hostType
:
Toolbox
.
HostType
.
BOTTOM
}
)
;
await
toolbox
.
selectTool
(
TOOL_ID_2
)
;
await
highlightTab
(
TOOL_ID_1
)
;
await
checkHighlighted
(
TOOL_ID_1
)
;
await
toolbox
.
selectTool
(
TOOL_ID_1
)
;
await
checkNoHighlightWhenSelected
(
TOOL_ID_1
)
;
await
toolbox
.
selectTool
(
TOOL_ID_2
)
;
await
checkHighlighted
(
TOOL_ID_1
)
;
await
highlightTab
(
TOOL_ID_2
)
;
await
checkHighlighted
(
TOOL_ID_1
)
;
await
checkNoHighlightWhenSelected
(
TOOL_ID_2
)
;
await
toolbox
.
selectTool
(
TOOL_ID_1
)
;
await
checkHighlighted
(
TOOL_ID_2
)
;
await
unhighlightTab
(
TOOL_ID_2
)
;
await
checkNoHighlight
(
TOOL_ID_2
)
;
await
unhighlightTab
(
TOOL_ID_1
)
;
await
checkNoHighlight
(
TOOL_ID_1
)
;
executeSoon
(
(
)
=
>
{
toolbox
.
destroy
(
)
.
then
(
(
)
=
>
{
toolbox
=
null
;
gBrowser
.
removeCurrentTab
(
)
;
finish
(
)
;
}
)
;
}
)
;
}
)
(
)
.
catch
(
error
=
>
{
ok
(
false
"
There
was
an
error
running
the
test
.
"
)
;
}
)
;
}
function
highlightTab
(
toolId
)
{
info
(
Highlighting
tool
{
toolId
}
'
s
tab
.
)
;
return
toolbox
.
highlightTool
(
toolId
)
;
}
function
unhighlightTab
(
toolId
)
{
info
(
Unhighlighting
tool
{
toolId
}
'
s
tab
.
)
;
return
toolbox
.
unhighlightTool
(
toolId
)
;
}
function
checkHighlighted
(
toolId
)
{
const
tab
=
toolbox
.
doc
.
getElementById
(
"
toolbox
-
tab
-
"
+
toolId
)
;
ok
(
toolbox
.
isHighlighted
(
toolId
)
Toolbox
.
isHighlighted
reports
{
toolId
}
as
highlighted
)
;
ok
(
tab
.
classList
.
contains
(
"
highlighted
"
)
The
highlighted
class
is
present
in
{
toolId
}
.
)
;
ok
(
!
tab
.
classList
.
contains
(
"
selected
"
)
The
tab
is
not
selected
in
{
toolId
}
)
;
}
function
checkNoHighlightWhenSelected
(
toolId
)
{
const
tab
=
toolbox
.
doc
.
getElementById
(
"
toolbox
-
tab
-
"
+
toolId
)
;
ok
(
toolbox
.
isHighlighted
(
toolId
)
Toolbox
.
isHighlighted
reports
{
toolId
}
as
highlighted
)
;
ok
(
tab
.
classList
.
contains
(
"
highlighted
"
)
The
highlighted
class
is
present
in
{
toolId
}
)
;
ok
(
tab
.
classList
.
contains
(
"
selected
"
)
And
the
tab
is
selected
so
the
orange
glow
will
not
be
present
.
in
{
toolId
}
)
;
}
function
checkNoHighlight
(
toolId
)
{
const
tab
=
toolbox
.
doc
.
getElementById
(
"
toolbox
-
tab
-
"
+
toolId
)
;
ok
(
!
toolbox
.
isHighlighted
(
toolId
)
Toolbox
.
isHighlighted
reports
{
toolId
}
as
not
highlighted
)
;
ok
(
!
tab
.
classList
.
contains
(
"
highlighted
"
)
The
highlighted
class
is
not
present
in
{
toolId
}
)
;
}
