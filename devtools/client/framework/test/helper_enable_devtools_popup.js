"
use
strict
"
;
const
{
listenOnce
}
=
require
(
"
devtools
/
shared
/
async
-
utils
"
)
;
function
openDevToolsWithKey
(
key
modifiers
)
{
const
onToolboxReady
=
gDevTools
.
once
(
"
toolbox
-
ready
"
)
;
EventUtils
.
synthesizeKey
(
key
modifiers
)
;
return
onToolboxReady
;
}
function
closeDevToolsWithKey
(
toolbox
key
modifiers
)
{
const
onToolboxDestroyed
=
toolbox
.
once
(
"
destroyed
"
)
;
EventUtils
.
synthesizeKey
(
key
modifiers
)
;
return
onToolboxDestroyed
;
}
async
function
checkF12IsDisabled
(
tab
)
{
const
popup
=
tab
.
ownerDocument
.
getElementById
(
"
enable
-
devtools
-
popup
"
)
;
is
(
popup
.
state
"
closed
"
"
The
enable
devtools
popup
is
initially
hidden
"
)
;
const
failOnToolboxReady
=
(
)
=
>
{
ok
(
false
"
The
devtools
toolbox
should
not
open
"
)
;
}
;
gDevTools
.
on
(
"
toolbox
-
ready
"
failOnToolboxReady
)
;
info
(
"
Press
F12
and
wait
for
the
enable
devtools
popup
to
be
displayed
"
)
;
const
onPopupShown
=
listenOnce
(
popup
"
popupshown
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_F12
"
)
;
await
onPopupShown
;
is
(
popup
.
state
"
open
"
"
The
enable
devtools
popup
is
now
visible
"
)
;
info
(
"
Press
F12
again
and
wait
for
the
enable
devtools
popup
to
hide
"
)
;
const
onPopupHidden
=
listenOnce
(
popup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_F12
"
)
;
await
onPopupHidden
;
is
(
popup
.
state
"
closed
"
"
The
enable
devtools
popup
is
hidden
again
"
)
;
gDevTools
.
off
(
"
toolbox
-
ready
"
failOnToolboxReady
)
;
}
async
function
openDevToolsWithInspectorKey
(
tab
)
{
info
(
"
Open
DevTools
via
another
shortcut
(
only
F12
should
be
disabled
)
"
)
;
const
popup
=
tab
.
ownerDocument
.
getElementById
(
"
enable
-
devtools
-
popup
"
)
;
const
failOnPopupShown
=
(
)
=
>
{
ok
(
false
"
The
enable
devtools
popup
should
not
be
displayed
"
)
;
}
;
popup
.
addEventListener
(
"
popupshown
"
failOnPopupShown
)
;
const
toolbox
=
await
openDevToolsWithKey
(
"
I
"
{
accelKey
:
true
shiftKey
:
!
navigator
.
userAgent
.
match
(
/
Mac
/
)
altKey
:
navigator
.
userAgent
.
match
(
/
Mac
/
)
}
)
;
is
(
popup
.
state
"
closed
"
"
The
enable
devtools
popup
is
still
hidden
"
)
;
popup
.
removeEventListener
(
"
popupshown
"
failOnPopupShown
)
;
return
toolbox
;
}
async
function
closeDevToolsWithF12
(
tab
toolbox
)
{
const
popup
=
tab
.
ownerDocument
.
getElementById
(
"
enable
-
devtools
-
popup
"
)
;
const
failOnPopupShown
=
(
)
=
>
{
ok
(
false
"
The
enable
devtools
popup
should
not
be
displayed
"
)
;
}
;
popup
.
addEventListener
(
"
popupshown
"
failOnPopupShown
)
;
info
(
"
Press
F12
and
wait
for
the
toolbox
to
be
destroyed
"
)
;
await
closeDevToolsWithKey
(
toolbox
"
VK_F12
"
)
;
is
(
popup
.
state
"
closed
"
"
The
enable
devtools
popup
is
still
hidden
"
)
;
popup
.
removeEventListener
(
"
popupshown
"
failOnPopupShown
)
;
}
async
function
checkF12IsEnabled
(
tab
)
{
const
popup
=
tab
.
ownerDocument
.
getElementById
(
"
enable
-
devtools
-
popup
"
)
;
const
failOnPopupShown
=
(
)
=
>
{
ok
(
false
"
The
enable
devtools
popup
should
not
be
displayed
"
)
;
}
;
popup
.
addEventListener
(
"
popupshown
"
failOnPopupShown
)
;
info
(
"
Check
that
F12
can
now
open
the
toolbox
.
"
)
;
const
toolbox
=
await
openDevToolsWithKey
(
"
VK_F12
"
)
;
is
(
popup
.
state
"
closed
"
"
The
enable
devtools
popup
is
still
hidden
"
)
;
info
(
"
Press
F12
and
wait
for
the
toolbox
to
be
destroyed
"
)
;
await
closeDevToolsWithKey
(
toolbox
"
VK_F12
"
)
;
is
(
popup
.
state
"
closed
"
"
The
enable
devtools
popup
is
still
hidden
"
)
;
popup
.
removeEventListener
(
"
popupshown
"
failOnPopupShown
)
;
}
