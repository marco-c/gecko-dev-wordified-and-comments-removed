const
CHROME_PAGE
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
"
+
"
test
/
test_chrome_page
.
html
"
;
add_task
(
async
function
(
)
{
await
testChromeTab
(
)
;
await
testMainProcess
(
)
;
}
)
;
async
function
testChromeTab
(
)
{
const
tab
=
await
addTab
(
CHROME_PAGE
)
;
const
browser
=
tab
.
linkedBrowser
;
ok
(
!
browser
.
isRemoteBrowser
"
chrome
page
is
not
remote
"
)
;
ok
(
browser
.
contentWindow
.
document
.
nodePrincipal
.
isSystemPrincipal
"
chrome
page
is
a
privileged
document
"
)
;
const
onThreadActorInstantiated
=
new
Promise
(
resolve
=
>
{
const
observe
=
function
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
devtools
-
thread
-
ready
"
)
{
Services
.
obs
.
removeObserver
(
observe
"
devtools
-
thread
-
ready
"
)
;
const
threadActor
=
subject
.
wrappedJSObject
;
resolve
(
threadActor
)
;
}
}
;
Services
.
obs
.
addObserver
(
observe
"
devtools
-
thread
-
ready
"
)
;
}
)
;
const
target
=
await
createAndAttachTargetForTab
(
tab
)
;
const
threadFront
=
await
target
.
attachThread
(
)
;
const
{
sources
}
=
await
threadFront
.
getSources
(
)
;
ok
(
sources
.
find
(
s
=
>
s
.
url
=
=
CHROME_PAGE
)
"
The
thread
actor
is
able
to
attach
to
the
chrome
page
and
its
sources
"
)
;
const
threadActor
=
await
onThreadActorInstantiated
;
const
serverGlobal
=
Cu
.
getGlobalForObject
(
threadActor
)
;
isnot
(
loader
.
id
serverGlobal
.
loader
.
id
"
The
actors
are
loaded
in
a
distinct
loader
in
order
for
the
actors
to
use
its
very
own
compartment
"
)
;
const
onDedicatedLoaderDestroy
=
new
Promise
(
resolve
=
>
{
const
observe
=
function
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
devtools
:
loader
:
destroy
"
)
{
Services
.
obs
.
removeObserver
(
observe
"
devtools
:
loader
:
destroy
"
)
;
resolve
(
)
;
}
}
;
Services
.
obs
.
addObserver
(
observe
"
devtools
:
loader
:
destroy
"
)
;
}
)
;
await
target
.
descriptorFront
.
destroy
(
)
;
await
onDedicatedLoaderDestroy
;
}
async
function
testMainProcess
(
)
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
customLoader
=
new
DevToolsLoader
(
{
invisibleToDebugger
:
true
}
)
;
const
{
DevToolsServer
}
=
customLoader
.
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
const
{
DevToolsClient
}
=
require
(
"
devtools
/
client
/
devtools
-
client
"
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerAllActors
(
)
;
DevToolsServer
.
allowChromeProcess
=
true
;
const
client
=
new
DevToolsClient
(
DevToolsServer
.
connectPipe
(
)
)
;
await
client
.
connect
(
)
;
const
onThreadActorInstantiated
=
new
Promise
(
resolve
=
>
{
const
observe
=
function
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
devtools
-
thread
-
ready
"
)
{
Services
.
obs
.
removeObserver
(
observe
"
devtools
-
thread
-
ready
"
)
;
const
threadActor
=
subject
.
wrappedJSObject
;
resolve
(
threadActor
)
;
}
}
;
Services
.
obs
.
addObserver
(
observe
"
devtools
-
thread
-
ready
"
)
;
}
)
;
const
targetDescriptor
=
await
client
.
mainRoot
.
getMainProcess
(
)
;
const
target
=
await
targetDescriptor
.
getTarget
(
)
;
await
target
.
attach
(
)
;
const
threadFront
=
await
target
.
attachThread
(
)
;
const
{
sources
}
=
await
threadFront
.
getSources
(
)
;
ok
(
sources
.
find
(
s
=
>
s
.
url
=
=
"
resource
:
/
/
devtools
/
client
/
framework
/
devtools
.
js
"
)
"
The
thread
actor
is
able
to
attach
to
the
chrome
script
like
client
modules
"
)
;
const
threadActor
=
await
onThreadActorInstantiated
;
const
serverGlobal
=
Cu
.
getGlobalForObject
(
threadActor
)
;
isnot
(
loader
.
id
serverGlobal
.
loader
.
id
"
The
actors
are
loaded
in
a
distinct
loader
in
order
for
the
actors
to
use
its
very
own
compartment
"
)
;
await
target
.
destroy
(
)
;
await
client
.
close
(
)
;
await
DevToolsServer
.
destroy
(
)
;
await
customLoader
.
destroy
(
)
;
}
