const
CHROME_PAGE
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
"
+
"
test
/
test_chrome_page
.
html
"
;
add_task
(
async
function
(
)
{
await
testChromeTab
(
)
;
await
testMainProcess
(
)
;
}
)
;
async
function
testChromeTab
(
)
{
const
tab
=
await
addTab
(
CHROME_PAGE
)
;
const
browser
=
tab
.
linkedBrowser
;
ok
(
!
browser
.
isRemoteBrowser
"
chrome
page
is
not
remote
"
)
;
ok
(
browser
.
contentWindow
.
document
.
nodePrincipal
.
isSystemPrincipal
"
chrome
page
is
a
privileged
document
"
)
;
const
onThreadActorInstantiated
=
new
Promise
(
resolve
=
>
{
const
observe
=
function
(
subject
topic
)
{
if
(
topic
=
=
=
"
devtools
-
thread
-
ready
"
)
{
Services
.
obs
.
removeObserver
(
observe
"
devtools
-
thread
-
ready
"
)
;
const
threadActor
=
subject
.
wrappedJSObject
;
resolve
(
threadActor
)
;
}
}
;
Services
.
obs
.
addObserver
(
observe
"
devtools
-
thread
-
ready
"
)
;
}
)
;
const
commands
=
await
CommandsFactory
.
forTab
(
tab
)
;
await
commands
.
targetCommand
.
startListening
(
)
;
const
sources
=
[
]
;
await
commands
.
resourceCommand
.
watchResources
(
[
commands
.
resourceCommand
.
TYPES
.
SOURCE
]
{
onAvailable
(
resources
)
{
sources
.
push
(
.
.
.
resources
)
;
}
}
)
;
ok
(
sources
.
find
(
s
=
>
s
.
url
=
=
CHROME_PAGE
)
"
The
thread
actor
is
able
to
attach
to
the
chrome
page
and
its
sources
"
)
;
const
threadActor
=
await
onThreadActorInstantiated
;
const
serverGlobal
=
Cu
.
getGlobalForObject
(
threadActor
)
;
isnot
(
loader
.
id
serverGlobal
.
loader
.
id
"
The
actors
are
loaded
in
a
distinct
loader
in
order
for
the
actors
to
use
its
very
own
compartment
"
)
;
const
onDedicatedLoaderDestroy
=
new
Promise
(
resolve
=
>
{
const
observe
=
function
(
subject
topic
)
{
if
(
topic
=
=
=
"
devtools
:
loader
:
destroy
"
)
{
Services
.
obs
.
removeObserver
(
observe
"
devtools
:
loader
:
destroy
"
)
;
resolve
(
)
;
}
}
;
Services
.
obs
.
addObserver
(
observe
"
devtools
:
loader
:
destroy
"
)
;
}
)
;
await
commands
.
destroy
(
)
;
await
onDedicatedLoaderDestroy
;
}
async
function
testMainProcess
(
)
{
const
onThreadActorInstantiated
=
new
Promise
(
resolve
=
>
{
const
observe
=
function
(
subject
topic
)
{
if
(
topic
=
=
=
"
devtools
-
thread
-
ready
"
)
{
Services
.
obs
.
removeObserver
(
observe
"
devtools
-
thread
-
ready
"
)
;
const
threadActor
=
subject
.
wrappedJSObject
;
resolve
(
threadActor
)
;
}
}
;
Services
.
obs
.
addObserver
(
observe
"
devtools
-
thread
-
ready
"
)
;
}
)
;
const
client
=
await
CommandsFactory
.
spawnClientToDebugSystemPrincipal
(
)
;
const
commands
=
await
CommandsFactory
.
forMainProcess
(
{
client
}
)
;
await
commands
.
targetCommand
.
startListening
(
)
;
const
sources
=
[
]
;
await
commands
.
resourceCommand
.
watchResources
(
[
commands
.
resourceCommand
.
TYPES
.
SOURCE
]
{
onAvailable
(
resources
)
{
sources
.
push
(
.
.
.
resources
)
;
}
}
)
;
ok
(
sources
.
find
(
s
=
>
s
.
url
=
=
"
resource
:
/
/
devtools
/
client
/
framework
/
devtools
.
js
"
)
"
The
thread
actor
is
able
to
attach
to
the
chrome
script
like
client
modules
"
)
;
const
threadActor
=
await
onThreadActorInstantiated
;
const
serverGlobal
=
Cu
.
getGlobalForObject
(
threadActor
)
;
isnot
(
loader
.
id
serverGlobal
.
loader
.
id
"
The
actors
are
loaded
in
a
distinct
loader
in
order
for
the
actors
to
use
its
very
own
compartment
"
)
;
await
commands
.
destroy
(
)
;
}
