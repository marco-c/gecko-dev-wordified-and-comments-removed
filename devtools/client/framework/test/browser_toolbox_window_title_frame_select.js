"
use
strict
"
;
var
{
Toolbox
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
"
)
;
const
URL
=
URL_ROOT
+
"
browser_toolbox_window_title_frame_select_page
.
html
"
;
const
IFRAME_URL
=
URL_ROOT
+
"
browser_toolbox_window_title_changes_page
.
html
"
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
toolbox
.
properties
"
)
;
add_task
(
function
*
(
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
command
-
button
-
frames
.
enabled
"
true
)
;
yield
addTab
(
URL
)
;
let
target
=
TargetFactory
.
forTab
(
gBrowser
.
selectedTab
)
;
let
toolbox
=
yield
gDevTools
.
showToolbox
(
target
null
Toolbox
.
HostType
.
BOTTOM
)
;
let
onTitleChanged
=
waitForTitleChange
(
toolbox
)
;
yield
toolbox
.
selectTool
(
"
inspector
"
)
;
yield
onTitleChanged
;
yield
toolbox
.
switchHost
(
Toolbox
.
HostType
.
WINDOW
)
;
yield
waitForTitleChange
(
toolbox
)
;
is
(
getTitle
(
)
Developer
Tools
-
Page
title
-
{
URL
}
"
Devtools
title
correct
after
switching
to
detached
window
host
"
)
;
yield
waitForTick
(
)
;
let
btn
=
toolbox
.
doc
.
getElementById
(
"
command
-
button
-
frames
"
)
;
yield
testShortcutToOpenFrames
(
btn
toolbox
)
;
ok
(
!
btn
.
classList
.
contains
(
"
checked
"
)
"
The
checked
class
must
not
be
present
"
)
;
let
menu
=
yield
toolbox
.
showFramesMenu
(
{
target
:
btn
}
)
;
yield
once
(
menu
"
open
"
)
;
ok
(
btn
.
classList
.
contains
(
"
checked
"
)
"
The
checked
class
must
be
set
"
)
;
let
frames
=
menu
.
items
;
is
(
frames
.
length
2
"
We
have
both
frames
in
the
list
"
)
;
let
topFrameBtn
=
frames
.
filter
(
b
=
>
b
.
label
=
=
URL
)
[
0
]
;
let
iframeBtn
=
frames
.
filter
(
b
=
>
b
.
label
=
=
IFRAME_URL
)
[
0
]
;
ok
(
topFrameBtn
"
Got
top
level
document
in
the
list
"
)
;
ok
(
iframeBtn
"
Got
iframe
document
in
the
list
"
)
;
let
willNavigate
=
toolbox
.
target
.
once
(
"
will
-
navigate
"
)
;
onTitleChanged
=
waitForTitleChange
(
toolbox
)
;
let
newRoot
=
toolbox
.
getPanel
(
"
inspector
"
)
.
once
(
"
new
-
root
"
)
;
info
(
"
Select
the
iframe
"
)
;
iframeBtn
.
click
(
)
;
yield
willNavigate
;
yield
newRoot
;
yield
onTitleChanged
;
info
(
"
Navigation
to
the
iframe
is
done
the
inspector
should
be
back
up
"
)
;
is
(
getTitle
(
)
Developer
Tools
-
Page
title
-
{
URL
}
"
Devtools
title
was
not
updated
after
changing
inspected
frame
"
)
;
info
(
"
Cleanup
toolbox
and
test
preferences
.
"
)
;
yield
toolbox
.
destroy
(
)
;
toolbox
=
null
;
gBrowser
.
removeCurrentTab
(
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
host
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
selectedTool
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
sideEnabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
command
-
button
-
frames
.
enabled
"
)
;
finish
(
)
;
}
)
;
function
getTitle
(
)
{
return
Services
.
wm
.
getMostRecentWindow
(
"
devtools
:
toolbox
"
)
.
document
.
title
;
}
function
*
testShortcutToOpenFrames
(
btn
toolbox
)
{
info
(
"
Tests
if
shortcut
Alt
+
Down
opens
the
frames
"
)
;
btn
.
focus
(
)
;
let
shortcut
=
L10N
.
getStr
(
"
toolbox
.
showFrames
.
key
"
)
;
synthesizeKeyShortcut
(
shortcut
toolbox
.
win
)
;
yield
wait
(
200
)
;
ok
(
btn
.
classList
.
contains
(
"
checked
"
)
"
The
checked
class
must
be
set
"
)
;
synthesizeKeyShortcut
(
"
Esc
"
toolbox
.
win
)
;
yield
wait
(
200
)
;
ok
(
!
btn
.
classList
.
contains
(
"
checked
"
)
"
The
checked
class
must
not
be
set
"
)
;
}
