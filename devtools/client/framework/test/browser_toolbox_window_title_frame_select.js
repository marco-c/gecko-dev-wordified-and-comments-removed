"
use
strict
"
;
var
{
Toolbox
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
framework
/
toolbox
.
js
"
)
;
const
URL
=
URL_ROOT_SSL
+
"
browser_toolbox_window_title_frame_select_page
.
html
"
;
const
IFRAME_URL
=
URL_ROOT_SSL
+
"
browser_toolbox_window_title_changes_page
.
html
"
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
toolbox
.
properties
"
)
;
function
waitForTitleChange
(
toolbox
)
{
return
new
Promise
(
resolve
=
>
{
toolbox
.
topWindow
.
addEventListener
(
"
message
"
function
onmessage
(
event
)
{
if
(
event
.
data
.
name
=
=
"
set
-
host
-
title
"
)
{
toolbox
.
topWindow
.
removeEventListener
(
"
message
"
onmessage
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
add_task
(
async
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
command
-
button
-
frames
.
enabled
"
true
)
;
await
addTab
(
URL
)
;
const
tab
=
gBrowser
.
selectedTab
;
let
toolbox
=
await
gDevTools
.
showToolboxForTab
(
tab
{
hostType
:
Toolbox
.
HostType
.
BOTTOM
}
)
;
await
toolbox
.
switchHost
(
Toolbox
.
HostType
.
WINDOW
)
;
await
waitForTitleChange
(
toolbox
)
;
is
(
getTitle
(
)
Developer
Tools
Page
title
{
URL
}
"
Devtools
title
correct
after
switching
to
detached
window
host
"
)
;
await
waitForTick
(
)
;
const
btn
=
toolbox
.
doc
.
getElementById
(
"
command
-
button
-
frames
"
)
;
await
testShortcutToOpenFrames
(
btn
toolbox
)
;
is
(
btn
.
getAttribute
(
"
aria
-
expanded
"
)
"
false
"
"
The
aria
-
expanded
attribute
must
be
set
to
false
"
)
;
btn
.
click
(
)
;
const
panel
=
toolbox
.
doc
.
getElementById
(
"
command
-
button
-
frames
-
panel
"
)
;
ok
(
panel
"
popup
panel
has
created
.
"
)
;
await
waitUntil
(
(
)
=
>
panel
.
classList
.
contains
(
"
tooltip
-
visible
"
)
)
;
is
(
btn
.
getAttribute
(
"
aria
-
expanded
"
)
"
true
"
"
The
aria
-
expanded
attribute
must
be
set
to
true
"
)
;
const
menuList
=
toolbox
.
doc
.
getElementById
(
"
toolbox
-
frame
-
menu
"
)
;
const
frames
=
Array
.
from
(
menuList
.
querySelectorAll
(
"
.
command
"
)
)
;
is
(
frames
.
length
2
"
We
have
both
frames
in
the
list
"
)
;
const
topFrameBtn
=
frames
.
filter
(
b
=
>
b
.
querySelector
(
"
.
label
"
)
.
textContent
=
=
URL
)
[
0
]
;
const
iframeBtn
=
frames
.
filter
(
b
=
>
b
.
querySelector
(
"
.
label
"
)
.
textContent
=
=
IFRAME_URL
)
[
0
]
;
ok
(
topFrameBtn
"
Got
top
level
document
in
the
list
"
)
;
ok
(
iframeBtn
"
Got
iframe
document
in
the
list
"
)
;
const
onInspectorReloaded
=
toolbox
.
getPanel
(
"
inspector
"
)
.
once
(
"
reloaded
"
)
;
info
(
"
Select
the
iframe
"
)
;
iframeBtn
.
click
(
)
;
await
onInspectorReloaded
;
await
wait
(
1000
)
;
info
(
"
Navigation
to
the
iframe
is
done
the
inspector
should
be
back
up
"
)
;
is
(
getTitle
(
)
Developer
Tools
Toolbox
test
for
title
update
{
IFRAME_URL
}
"
Devtools
title
is
updated
to
match
the
selected
iframe
document
"
)
;
info
(
"
Cleanup
toolbox
and
test
preferences
.
"
)
;
await
toolbox
.
destroy
(
)
;
toolbox
=
null
;
gBrowser
.
removeCurrentTab
(
)
;
finish
(
)
;
}
)
;
function
getTitle
(
)
{
return
Services
.
wm
.
getMostRecentWindow
(
"
devtools
:
toolbox
"
)
.
document
.
title
;
}
async
function
testShortcutToOpenFrames
(
btn
toolbox
)
{
info
(
"
Tests
if
shortcut
Alt
+
Down
opens
the
frames
"
)
;
btn
.
focus
(
)
;
const
shortcut
=
L10N
.
getStr
(
"
toolbox
.
showFrames
.
key
"
)
;
synthesizeKeyShortcut
(
shortcut
toolbox
.
win
)
;
const
panel
=
toolbox
.
doc
.
getElementById
(
"
command
-
button
-
frames
-
panel
"
)
;
ok
(
panel
"
popup
panel
has
created
.
"
)
;
await
waitUntil
(
(
)
=
>
panel
.
classList
.
contains
(
"
tooltip
-
visible
"
)
)
;
is
(
btn
.
getAttribute
(
"
aria
-
expanded
"
)
"
true
"
"
The
aria
-
expanded
attribute
must
be
set
to
true
"
)
;
EventUtils
.
sendKey
(
"
ESCAPE
"
toolbox
.
win
)
;
await
waitUntil
(
(
)
=
>
!
panel
.
classList
.
contains
(
"
tooltip
-
visible
"
)
)
;
is
(
btn
.
getAttribute
(
"
aria
-
expanded
"
)
"
false
"
"
The
aria
-
expanded
attribute
must
be
set
to
false
"
)
;
}
