const
URL
=
"
data
:
text
/
html
;
charset
=
utf8
test
for
host
sizes
"
;
var
{
Toolbox
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
"
)
;
add_task
(
async
function
(
)
{
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolbox
.
footer
.
height
"
10000
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolbox
.
sidebar
.
width
"
10000
)
;
const
tab
=
await
addTab
(
URL
)
;
const
panel
=
gBrowser
.
getPanel
(
)
;
const
{
clientHeight
:
panelHeight
clientWidth
:
panelWidth
}
=
panel
;
const
target
=
await
TargetFactory
.
forTab
(
tab
)
;
const
toolbox
=
await
gDevTools
.
showToolbox
(
target
)
;
is
(
panel
.
clientHeight
panelHeight
"
Opening
the
toolbox
hasn
'
t
changed
the
height
of
the
panel
"
)
;
is
(
panel
.
clientWidth
panelWidth
"
Opening
the
toolbox
hasn
'
t
changed
the
width
of
the
panel
"
)
;
let
iframe
=
panel
.
querySelector
(
"
.
devtools
-
toolbox
-
bottom
-
iframe
"
)
;
is
(
iframe
.
clientHeight
panelHeight
-
25
"
The
iframe
fits
within
the
available
space
"
)
;
await
toolbox
.
switchHost
(
Toolbox
.
HostType
.
RIGHT
)
;
iframe
=
panel
.
querySelector
(
"
.
devtools
-
toolbox
-
side
-
iframe
"
)
;
iframe
.
style
.
minWidth
=
"
1px
"
;
is
(
iframe
.
clientWidth
panelWidth
-
25
"
The
iframe
fits
within
the
available
space
"
)
;
await
cleanup
(
toolbox
)
;
}
)
;
add_task
(
async
function
(
)
{
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolbox
.
footer
.
height
"
100
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolbox
.
sidebar
.
width
"
100
)
;
const
tab
=
await
addTab
(
URL
)
;
const
panel
=
gBrowser
.
getPanel
(
)
;
const
{
clientHeight
:
panelHeight
clientWidth
:
panelWidth
}
=
panel
;
const
target
=
await
TargetFactory
.
forTab
(
tab
)
;
const
toolbox
=
await
gDevTools
.
showToolbox
(
target
)
;
is
(
panel
.
clientHeight
panelHeight
"
Opening
the
toolbox
hasn
'
t
changed
the
height
of
the
panel
"
)
;
is
(
panel
.
clientWidth
panelWidth
"
Opening
the
toolbox
hasn
'
t
changed
the
width
of
the
panel
"
)
;
let
iframe
=
panel
.
querySelector
(
"
.
devtools
-
toolbox
-
bottom
-
iframe
"
)
;
is
(
iframe
.
clientHeight
100
"
The
iframe
is
resized
properly
"
)
;
await
toolbox
.
switchHost
(
Toolbox
.
HostType
.
RIGHT
)
;
iframe
=
panel
.
querySelector
(
"
.
devtools
-
toolbox
-
side
-
iframe
"
)
;
iframe
.
style
.
minWidth
=
"
1px
"
;
is
(
iframe
.
clientWidth
100
"
The
iframe
is
resized
properly
"
)
;
await
cleanup
(
toolbox
)
;
}
)
;
async
function
cleanup
(
toolbox
)
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
host
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
footer
.
height
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
sidebar
.
width
"
)
;
await
toolbox
.
destroy
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
