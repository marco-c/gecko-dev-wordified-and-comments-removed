Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
SimpleTest
.
requestCompleteLog
(
)
;
function
getFilteredModules
(
filter
loaders
)
{
let
modules
=
[
]
;
for
(
const
l
of
loaders
)
{
const
loaderModulesMap
=
l
.
modules
;
const
loaderModulesPaths
=
Object
.
keys
(
loaderModulesMap
)
;
modules
=
modules
.
concat
(
loaderModulesPaths
)
;
}
return
modules
.
filter
(
url
=
>
url
.
includes
(
filter
)
)
;
}
function
countCharsInModules
(
modules
)
{
return
modules
.
reduce
(
(
sum
uri
)
=
>
{
try
{
return
sum
+
require
(
"
raw
!
"
+
uri
)
.
length
;
}
catch
(
e
)
{
return
sum
;
}
}
0
)
;
}
function
runMetricsTest
(
{
filterString
loaders
panelName
}
)
{
const
allModules
=
getFilteredModules
(
"
"
loaders
)
;
const
panelModules
=
getFilteredModules
(
filterString
loaders
)
;
const
allModulesCount
=
allModules
.
length
;
const
panelModulesCount
=
panelModules
.
length
;
const
allModulesChars
=
countCharsInModules
(
allModules
)
;
const
panelModulesChars
=
countCharsInModules
(
panelModules
)
;
const
PERFHERDER_DATA
=
{
framework
:
{
name
:
"
devtools
"
}
suites
:
[
{
name
:
panelName
+
"
-
metrics
"
value
:
allModulesChars
subtests
:
[
{
name
:
panelName
+
"
-
modules
"
value
:
panelModulesCount
}
{
name
:
panelName
+
"
-
chars
"
value
:
panelModulesChars
}
{
name
:
"
all
-
modules
"
value
:
allModulesCount
}
{
name
:
"
all
-
chars
"
value
:
allModulesChars
}
]
}
]
}
;
info
(
"
PERFHERDER_DATA
:
"
+
JSON
.
stringify
(
PERFHERDER_DATA
)
)
;
ok
(
allModulesCount
>
panelModulesCount
&
&
panelModulesCount
>
0
"
Successfully
recorded
module
count
for
"
+
panelName
)
;
ok
(
allModulesChars
>
panelModulesChars
&
&
panelModulesChars
>
0
"
Successfully
recorded
char
count
for
"
+
panelName
)
;
}
