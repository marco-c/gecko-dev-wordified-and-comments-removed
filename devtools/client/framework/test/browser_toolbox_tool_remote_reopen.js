"
use
strict
"
;
const
{
DevToolsServer
}
=
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
requestLongerTimeout
(
2
)
;
function
runTools
(
tab
)
{
return
(
async
function
(
)
{
let
toolbox
;
const
toolIds
=
await
getSupportedToolIds
(
tab
)
;
for
(
const
toolId
of
toolIds
)
{
info
(
"
About
to
open
"
+
toolId
)
;
toolbox
=
await
gDevTools
.
showToolboxForTab
(
tab
{
toolId
hostType
:
"
window
"
}
)
;
ok
(
toolbox
"
toolbox
exists
for
"
+
toolId
)
;
is
(
toolbox
.
currentToolId
toolId
"
currentToolId
should
be
"
+
toolId
)
;
const
panel
=
toolbox
.
getCurrentPanel
(
)
;
ok
(
panel
.
isReady
toolId
+
"
panel
should
be
ready
"
)
;
}
const
client
=
toolbox
.
target
.
client
;
await
toolbox
.
destroy
(
)
;
return
client
;
}
)
(
)
;
}
function
test
(
)
{
(
async
function
(
)
{
toggleAllTools
(
true
)
;
const
tab
=
await
addTab
(
"
about
:
blank
"
)
;
const
client
=
await
runTools
(
tab
)
;
const
rootFronts
=
[
.
.
.
client
.
mainRoot
.
fronts
.
values
(
)
]
;
for
(
const
pool
of
client
.
__pools
)
{
if
(
!
pool
.
__poolMap
)
{
continue
;
}
if
(
rootFronts
.
includes
(
pool
)
)
{
continue
;
}
for
(
const
actor
of
pool
.
__poolMap
.
keys
(
)
)
{
if
(
actor
=
=
"
root
"
)
{
continue
;
}
if
(
actor
.
includes
(
"
framerateActor
"
)
)
{
todo
(
false
"
Front
for
"
+
actor
+
"
still
held
in
pool
!
"
)
;
continue
;
}
ok
(
false
"
Front
for
"
+
actor
+
"
still
held
in
pool
!
"
)
;
}
}
gBrowser
.
removeCurrentTab
(
)
;
DevToolsServer
.
destroy
(
)
;
toggleAllTools
(
false
)
;
finish
(
)
;
}
)
(
)
;
}
