var
URL
=
{
URL_ROOT
}
doc_viewsource
.
html
;
var
JS_URL
=
{
URL_ROOT
}
code_math
.
js
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
debugger
.
new
-
debugger
-
frontend
"
false
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
debugger
.
new
-
debugger
-
frontend
"
)
;
}
)
;
async
function
viewSource
(
)
{
let
toolbox
=
await
openNewTabAndToolbox
(
URL
)
;
await
toolbox
.
viewSourceInDebugger
(
JS_URL
2
)
;
let
debuggerPanel
=
toolbox
.
getPanel
(
"
jsdebugger
"
)
;
ok
(
debuggerPanel
"
The
debugger
panel
was
opened
.
"
)
;
is
(
toolbox
.
currentToolId
"
jsdebugger
"
"
The
debugger
panel
was
selected
.
"
)
;
let
{
DebuggerView
}
=
debuggerPanel
.
panelWin
;
let
Sources
=
DebuggerView
.
Sources
;
is
(
Sources
.
selectedValue
getSourceActor
(
Sources
JS_URL
)
"
The
correct
source
is
shown
in
the
debugger
.
"
)
;
is
(
DebuggerView
.
editor
.
getCursor
(
)
.
line
+
1
2
"
The
correct
line
is
highlighted
in
the
debugger
'
s
source
editor
.
"
)
;
await
closeToolboxAndTab
(
toolbox
)
;
finish
(
)
;
}
function
test
(
)
{
viewSource
(
)
.
then
(
finish
(
aError
)
=
>
{
ok
(
false
"
Got
an
error
:
"
+
aError
.
message
+
"
\
n
"
+
aError
.
stack
)
;
finish
(
)
;
}
)
;
}
