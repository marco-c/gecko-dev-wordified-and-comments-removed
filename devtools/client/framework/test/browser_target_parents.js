"
use
strict
"
;
const
{
DevToolsClient
}
=
require
(
"
devtools
/
shared
/
client
/
devtools
-
client
"
)
;
const
{
DevToolsServer
}
=
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
const
TEST_URL
=
data
:
text
/
html
;
charset
=
utf
-
8
<
div
id
=
"
test
"
>
<
/
div
>
;
add_task
(
async
function
(
)
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
const
tab
=
await
addTab
(
TEST_URL
)
;
const
target
=
await
TargetFactory
.
forTab
(
tab
)
;
const
mainRoot
=
target
.
client
.
mainRoot
;
is
(
target
.
descriptorFront
mainRoot
"
Got
the
correct
descriptorFront
from
the
target
.
"
)
;
await
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
(
)
{
DevToolsServer
.
init
(
)
;
DevToolsServer
.
allowChromeProcess
=
true
;
if
(
!
DevToolsServer
.
createRootActor
)
{
DevToolsServer
.
registerAllActors
(
)
;
}
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
const
client
=
new
DevToolsClient
(
transport
)
;
await
client
.
connect
(
)
;
const
mainRoot
=
client
.
mainRoot
;
const
{
processes
}
=
await
mainRoot
.
listProcesses
(
)
;
await
Promise
.
all
(
processes
.
map
(
async
processDescriptor
=
>
{
const
promises
=
[
]
;
const
concurrentCalls
=
10
;
for
(
let
i
=
0
;
i
<
concurrentCalls
;
i
+
+
)
{
const
targetPromise
=
processDescriptor
.
getTarget
(
)
;
if
(
i
%
2
=
=
0
)
{
await
wait
(
0
)
;
}
promises
.
push
(
targetPromise
.
then
(
target
=
>
{
is
(
target
.
descriptorFront
processDescriptor
"
Got
the
correct
descriptorFront
from
the
process
target
.
"
)
;
ok
(
target
.
getCachedFront
(
"
console
"
)
"
The
target
is
attached
"
)
;
return
target
;
}
)
)
;
}
const
targets
=
await
Promise
.
all
(
promises
)
;
for
(
let
i
=
1
;
i
<
concurrentCalls
;
i
+
+
)
{
is
(
targets
[
0
]
targets
[
i
]
"
All
the
targets
returned
by
concurrent
calls
to
getTarget
are
the
same
"
)
;
}
}
)
)
;
await
client
.
close
(
)
;
}
)
;
add_task
(
async
function
(
)
{
DevToolsServer
.
init
(
)
;
DevToolsServer
.
allowChromeProcess
=
true
;
if
(
!
DevToolsServer
.
createRootActor
)
{
DevToolsServer
.
registerAllActors
(
)
;
}
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
const
client
=
new
DevToolsClient
(
transport
)
;
await
client
.
connect
(
)
;
const
mainRoot
=
client
.
mainRoot
;
const
mainProcess
=
await
mainRoot
.
getMainProcess
(
)
;
const
{
frames
}
=
await
mainProcess
.
listRemoteFrames
(
)
;
await
Promise
.
all
(
frames
.
map
(
async
frameDescriptor
=
>
{
const
promises
=
[
]
;
const
concurrentCalls
=
10
;
for
(
let
i
=
0
;
i
<
concurrentCalls
;
i
+
+
)
{
const
targetPromise
=
frameDescriptor
.
getTarget
(
)
;
if
(
i
%
2
=
=
0
)
{
await
wait
(
0
)
;
}
promises
.
push
(
targetPromise
.
then
(
target
=
>
{
is
(
target
.
descriptorFront
frameDescriptor
"
Got
the
correct
descriptorFront
from
the
frame
target
.
"
)
;
ok
(
target
.
traits
"
The
target
is
attached
"
)
;
return
target
;
}
)
)
;
}
const
targets
=
await
Promise
.
all
(
promises
)
;
for
(
let
i
=
1
;
i
<
concurrentCalls
;
i
+
+
)
{
is
(
targets
[
0
]
targets
[
i
]
"
All
the
targets
returned
by
concurrent
calls
to
getTarget
are
the
same
"
)
;
}
}
)
)
;
await
client
.
close
(
)
;
}
)
;
add_task
(
async
function
(
)
{
DevToolsServer
.
init
(
)
;
DevToolsServer
.
allowChromeProcess
=
true
;
if
(
!
DevToolsServer
.
createRootActor
)
{
DevToolsServer
.
registerAllActors
(
)
;
}
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
const
client
=
new
DevToolsClient
(
transport
)
;
await
client
.
connect
(
)
;
const
mainRoot
=
client
.
mainRoot
;
const
addons
=
await
mainRoot
.
listAddons
(
)
;
await
Promise
.
all
(
addons
.
filter
(
a
=
>
a
.
debuggable
)
.
map
(
async
addonDescriptorFront
=
>
{
const
addonFront
=
await
addonDescriptorFront
.
getTarget
(
)
;
is
(
addonFront
.
descriptorFront
addonDescriptorFront
"
Got
the
correct
descriptorFront
from
the
addon
target
.
"
)
;
}
)
)
;
await
client
.
close
(
)
;
}
)
;
add_task
(
async
function
(
)
{
DevToolsServer
.
init
(
)
;
DevToolsServer
.
allowChromeProcess
=
true
;
if
(
!
DevToolsServer
.
createRootActor
)
{
DevToolsServer
.
registerAllActors
(
)
;
}
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
const
client
=
new
DevToolsClient
(
transport
)
;
await
client
.
connect
(
)
;
const
mainRoot
=
client
.
mainRoot
;
const
{
workers
}
=
await
mainRoot
.
listWorkers
(
)
;
await
Promise
.
all
(
workers
.
map
(
workerTargetFront
=
>
{
is
(
workerTargetFront
.
descriptorFront
mainRoot
"
Got
the
Main
Root
as
the
descriptor
for
main
root
worker
target
.
"
)
;
}
)
)
;
await
client
.
close
(
)
;
}
)
;
