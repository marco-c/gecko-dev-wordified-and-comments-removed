"
use
strict
"
;
const
{
DevToolsClient
}
=
require
(
"
devtools
/
client
/
devtools
-
client
"
)
;
const
{
DevToolsServer
}
=
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
const
TEST_URL
=
data
:
text
/
html
;
charset
=
utf
-
8
<
div
id
=
"
test
"
>
<
/
div
>
;
add_task
(
async
function
(
)
{
const
tab
=
await
addTab
(
TEST_URL
)
;
const
client
=
await
setupDebuggerClient
(
)
;
const
mainRoot
=
client
.
mainRoot
;
const
tabDescriptors
=
await
mainRoot
.
listTabs
(
)
;
await
testGetTargetWithConcurrentCalls
(
tabDescriptors
tabTarget
=
>
{
return
!
!
tabTarget
.
getCachedFront
(
"
console
"
)
;
}
)
;
await
client
.
close
(
)
;
await
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
(
)
{
const
client
=
await
setupDebuggerClient
(
)
;
const
mainRoot
=
client
.
mainRoot
;
const
processes
=
await
mainRoot
.
listProcesses
(
)
;
await
testGetTargetWithConcurrentCalls
(
processes
processTarget
=
>
{
return
!
!
processTarget
.
getCachedFront
(
"
console
"
)
;
}
)
;
await
client
.
close
(
)
;
}
)
;
add_task
(
async
function
(
)
{
const
client
=
await
setupDebuggerClient
(
)
;
const
mainRoot
=
client
.
mainRoot
;
const
addons
=
await
mainRoot
.
listAddons
(
)
;
await
Promise
.
all
(
addons
.
filter
(
a
=
>
a
.
debuggable
)
.
map
(
async
addonDescriptorFront
=
>
{
const
addonFront
=
await
addonDescriptorFront
.
getTarget
(
)
;
is
(
addonFront
.
descriptorFront
addonDescriptorFront
"
Got
the
correct
descriptorFront
from
the
addon
target
.
"
)
;
}
)
)
;
await
client
.
close
(
)
;
}
)
;
add_task
(
async
function
(
)
{
const
client
=
await
setupDebuggerClient
(
)
;
const
mainRoot
=
client
.
mainRoot
;
const
{
workers
}
=
await
mainRoot
.
listWorkers
(
)
;
await
Promise
.
all
(
workers
.
map
(
workerTargetFront
=
>
{
is
(
workerTargetFront
.
descriptorFront
workerTargetFront
"
For
now
worker
descriptors
and
targets
are
the
same
object
(
see
bug
1667404
)
"
)
;
}
)
)
;
await
client
.
close
(
)
;
}
)
;
async
function
setupDebuggerClient
(
)
{
DevToolsServer
.
init
(
)
;
DevToolsServer
.
allowChromeProcess
=
true
;
if
(
!
DevToolsServer
.
createRootActor
)
{
DevToolsServer
.
registerAllActors
(
)
;
}
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
const
client
=
new
DevToolsClient
(
transport
)
;
await
client
.
connect
(
)
;
return
client
;
}
async
function
testGetTargetWithConcurrentCalls
(
descriptors
isTargetAttached
)
{
await
Promise
.
all
(
descriptors
.
map
(
async
descriptor
=
>
{
const
promises
=
[
]
;
const
concurrentCalls
=
10
;
for
(
let
i
=
0
;
i
<
concurrentCalls
;
i
+
+
)
{
const
targetPromise
=
descriptor
.
getTarget
(
)
;
if
(
i
%
2
=
=
0
)
{
await
wait
(
0
)
;
}
promises
.
push
(
targetPromise
.
then
(
target
=
>
{
is
(
target
.
descriptorFront
descriptor
"
Got
the
correct
descriptorFront
from
the
frame
target
.
"
)
;
ok
(
isTargetAttached
(
target
)
"
The
target
is
attached
"
)
;
return
target
;
}
)
)
;
}
const
targets
=
await
Promise
.
all
(
promises
)
;
for
(
let
i
=
1
;
i
<
concurrentCalls
;
i
+
+
)
{
is
(
targets
[
0
]
targets
[
i
]
"
All
the
targets
returned
by
concurrent
calls
to
getTarget
are
the
same
"
)
;
}
}
)
)
;
}
