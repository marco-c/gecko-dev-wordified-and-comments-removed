async
function
testTarget
(
client
target
)
{
await
target
.
attach
(
)
;
is
(
target
.
hasActor
(
"
inspector
"
)
true
"
target
.
hasActor
(
)
true
when
actor
exists
.
"
)
;
is
(
target
.
hasActor
(
"
webaudio
"
)
true
"
target
.
hasActor
(
)
true
when
actor
exists
.
"
)
;
is
(
target
.
hasActor
(
"
notreal
"
)
false
"
target
.
hasActor
(
)
false
when
actor
does
not
exist
.
"
)
;
await
target
.
getFront
(
"
webaudio
"
)
;
let
desc
=
await
target
.
getActorDescription
(
"
webaudio
"
)
;
is
(
desc
.
typeName
"
webaudio
"
"
target
.
getActorDescription
(
)
returns
definition
data
for
corresponding
actor
"
)
;
is
(
desc
.
events
[
"
start
-
context
"
]
.
type
"
startContext
"
"
target
.
getActorDescription
(
)
returns
event
data
for
corresponding
actor
"
)
;
desc
=
await
target
.
getActorDescription
(
"
nope
"
)
;
is
(
desc
undefined
"
target
.
getActorDescription
(
)
returns
undefined
for
non
-
existing
actor
"
)
;
desc
=
await
target
.
getActorDescription
(
)
;
is
(
desc
undefined
"
target
.
getActorDescription
(
)
returns
undefined
for
undefined
actor
"
)
;
let
hasMethod
=
await
target
.
actorHasMethod
(
"
audionode
"
"
getType
"
)
;
is
(
hasMethod
true
"
target
.
actorHasMethod
(
)
returns
true
for
existing
actor
with
method
"
)
;
hasMethod
=
await
target
.
actorHasMethod
(
"
audionode
"
"
nope
"
)
;
is
(
hasMethod
false
"
target
.
actorHasMethod
(
)
returns
false
for
existing
actor
with
no
method
"
)
;
hasMethod
=
await
target
.
actorHasMethod
(
"
nope
"
"
nope
"
)
;
is
(
hasMethod
false
"
target
.
actorHasMethod
(
)
returns
false
for
non
-
existing
actor
with
no
method
"
)
;
hasMethod
=
await
target
.
actorHasMethod
(
)
;
is
(
hasMethod
false
"
target
.
actorHasMethod
(
)
returns
false
for
undefined
params
"
)
;
is
(
target
.
getTrait
(
"
giddyup
"
)
undefined
"
target
.
getTrait
(
)
returns
undefined
when
trait
does
not
exist
"
)
;
close
(
target
client
)
;
}
function
test
(
)
{
waitForExplicitFinish
(
)
;
getParentProcessActors
(
testTarget
)
;
}
function
close
(
target
client
)
{
target
.
on
(
"
close
"
(
)
=
>
{
ok
(
true
"
Target
was
closed
"
)
;
finish
(
)
;
}
)
;
client
.
close
(
)
;
}
