"
use
strict
"
;
let
href
=
window
.
location
.
href
.
replace
(
"
about
:
"
"
http
:
/
/
"
)
;
let
url
=
new
window
.
URL
(
href
)
;
if
(
url
.
search
.
length
>
1
)
{
const
Cu
=
Components
.
utils
;
const
Ci
=
Components
.
interfaces
;
const
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
{
targetFromURL
}
=
require
(
"
devtools
/
client
/
framework
/
target
-
from
-
url
"
)
;
const
{
Toolbox
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
"
)
;
const
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
{
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
main
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
let
host
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
.
containerElement
;
let
tool
=
url
.
searchParams
.
get
(
"
tool
"
)
;
Task
.
spawn
(
function
*
(
)
{
let
target
;
if
(
url
.
searchParams
.
has
(
"
target
"
)
)
{
let
iframe
=
host
.
wrappedJSObject
?
host
.
wrappedJSObject
.
target
:
host
.
target
;
iframe
=
XPCNativeWrapper
(
iframe
)
;
iframe
.
QueryInterface
(
Ci
.
nsIFrameLoaderOwner
)
;
if
(
iframe
)
{
let
tab
=
{
linkedBrowser
:
iframe
}
;
if
(
!
DebuggerServer
.
initialized
)
{
DebuggerServer
.
init
(
)
;
DebuggerServer
.
addBrowserActors
(
)
;
}
let
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
yield
client
.
connect
(
)
;
let
response
=
yield
client
.
getTab
(
{
tab
}
)
;
let
form
=
response
.
tab
;
target
=
yield
TargetFactory
.
forRemoteTab
(
{
client
form
chrome
:
false
}
)
;
}
else
{
alert
(
"
Unable
to
find
the
targetted
iframe
to
debug
"
)
;
}
}
else
{
target
=
yield
targetFromURL
(
url
)
;
}
let
options
=
{
customIframe
:
host
}
;
yield
gDevTools
.
showToolbox
(
target
tool
Toolbox
.
HostType
.
CUSTOM
options
)
;
}
)
.
catch
(
error
=
>
{
console
.
error
(
"
Exception
while
loading
the
toolbox
"
error
)
;
}
)
;
}
