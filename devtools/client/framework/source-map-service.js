"
use
strict
"
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
LocationStore
serialize
deserialize
}
=
require
(
"
.
/
location
-
store
"
)
;
function
SourceMapService
(
target
)
{
this
.
_target
=
target
;
this
.
_locationStore
=
new
LocationStore
(
)
;
this
.
_isInitialResolve
=
true
;
EventEmitter
.
decorate
(
this
)
;
this
.
_onSourceUpdated
=
this
.
_onSourceUpdated
.
bind
(
this
)
;
this
.
_resolveLocation
=
this
.
_resolveLocation
.
bind
(
this
)
;
this
.
_resolveAndUpdate
=
this
.
_resolveAndUpdate
.
bind
(
this
)
;
this
.
subscribe
=
this
.
subscribe
.
bind
(
this
)
;
this
.
unsubscribe
=
this
.
unsubscribe
.
bind
(
this
)
;
this
.
reset
=
this
.
reset
.
bind
(
this
)
;
this
.
destroy
=
this
.
destroy
.
bind
(
this
)
;
target
.
on
(
"
source
-
updated
"
this
.
_onSourceUpdated
)
;
target
.
on
(
"
navigate
"
this
.
reset
)
;
target
.
on
(
"
will
-
navigate
"
this
.
reset
)
;
target
.
on
(
"
close
"
this
.
destroy
)
;
}
SourceMapService
.
prototype
.
reset
=
function
(
)
{
this
.
_isInitialResolve
=
true
;
this
.
_locationStore
.
clear
(
)
;
}
;
SourceMapService
.
prototype
.
destroy
=
function
(
)
{
this
.
reset
(
)
;
this
.
_target
.
off
(
"
source
-
updated
"
this
.
_onSourceUpdated
)
;
this
.
_target
.
off
(
"
navigate
"
this
.
reset
)
;
this
.
_target
.
off
(
"
will
-
navigate
"
this
.
reset
)
;
this
.
_target
.
off
(
"
close
"
this
.
destroy
)
;
this
.
_isInitialResolve
=
null
;
this
.
_target
=
this
.
_locationStore
=
null
;
}
;
SourceMapService
.
prototype
.
subscribe
=
function
(
location
callback
)
{
this
.
on
(
serialize
(
location
)
callback
)
;
this
.
_locationStore
.
set
(
location
)
;
if
(
this
.
_isInitialResolve
)
{
this
.
_resolveAndUpdate
(
location
)
;
this
.
_isInitialResolve
=
false
;
}
}
;
SourceMapService
.
prototype
.
unsubscribe
=
function
(
location
callback
)
{
this
.
off
(
serialize
(
location
)
callback
)
;
this
.
_locationStore
.
clearByURL
(
location
.
url
)
;
}
;
SourceMapService
.
prototype
.
_resolveAndUpdate
=
function
(
location
)
{
this
.
_resolveLocation
(
location
)
.
then
(
resolvedLocation
=
>
{
if
(
resolvedLocation
)
{
if
(
this
.
_isInitialResolve
)
{
if
(
!
isSameLocation
(
location
resolvedLocation
)
)
{
this
.
emit
(
serialize
(
location
)
location
resolvedLocation
)
;
return
;
}
}
this
.
emit
(
serialize
(
location
)
location
resolvedLocation
)
;
}
}
)
;
}
;
SourceMapService
.
prototype
.
_resolveLocation
=
Task
.
async
(
function
*
(
location
)
{
if
(
!
location
.
url
|
|
!
location
.
line
)
{
return
null
;
}
const
cachedLocation
=
this
.
_locationStore
.
get
(
location
)
;
if
(
cachedLocation
)
{
return
cachedLocation
;
}
else
{
const
promisedLocation
=
resolveLocation
(
this
.
_target
location
)
;
if
(
promisedLocation
)
{
this
.
_locationStore
.
set
(
location
promisedLocation
)
;
return
promisedLocation
;
}
}
}
)
;
SourceMapService
.
prototype
.
_onSourceUpdated
=
function
(
_
sourceEvent
)
{
let
{
type
source
}
=
sourceEvent
;
if
(
!
source
.
url
|
|
type
=
=
=
"
newSource
"
&
&
!
source
.
isSourceMapped
)
{
return
;
}
let
sourceUrl
=
null
;
if
(
source
.
generatedUrl
&
&
source
.
isSourceMapped
)
{
sourceUrl
=
source
.
generatedUrl
;
}
else
if
(
source
.
url
&
&
source
.
isPrettyPrinted
)
{
sourceUrl
=
source
.
url
;
}
const
locationsToResolve
=
this
.
_locationStore
.
getByURL
(
sourceUrl
)
;
if
(
locationsToResolve
.
length
)
{
this
.
_locationStore
.
clearByURL
(
sourceUrl
)
;
for
(
let
location
of
locationsToResolve
)
{
this
.
_resolveAndUpdate
(
deserialize
(
location
)
)
;
}
}
}
;
exports
.
SourceMapService
=
SourceMapService
;
function
resolveLocation
(
target
location
)
{
return
Task
.
spawn
(
function
*
(
)
{
let
newLocation
=
yield
target
.
resolveLocation
(
{
url
:
location
.
url
line
:
location
.
line
column
:
location
.
column
|
|
Infinity
}
)
;
if
(
newLocation
.
error
)
{
return
null
;
}
return
newLocation
;
}
)
;
}
function
isSameLocation
(
location
resolvedLocation
)
{
return
location
.
url
=
=
=
resolvedLocation
.
url
&
&
location
.
line
=
=
=
resolvedLocation
.
line
&
&
location
.
column
=
=
=
resolvedLocation
.
column
;
}
;
