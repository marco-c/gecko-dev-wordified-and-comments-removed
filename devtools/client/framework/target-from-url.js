"
use
strict
"
;
const
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
{
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
debugger
-
client
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
exports
.
targetFromURL
=
Task
.
async
(
function
*
(
url
)
{
let
params
=
url
.
searchParams
;
let
type
=
params
.
get
(
"
type
"
)
;
if
(
!
type
)
{
throw
new
Error
(
"
targetFromURL
missing
type
parameter
"
)
;
}
let
id
=
params
.
get
(
"
id
"
)
;
let
chrome
=
params
.
has
(
"
chrome
"
)
;
let
client
=
yield
createClient
(
params
)
;
yield
client
.
connect
(
)
;
let
form
isTabActor
;
if
(
type
=
=
=
"
tab
"
)
{
id
=
parseInt
(
id
10
)
;
if
(
isNaN
(
id
)
)
{
throw
new
Error
(
targetFromURL
wrong
tab
id
'
{
id
}
'
should
be
a
number
)
;
}
try
{
let
response
=
yield
client
.
getTab
(
{
outerWindowID
:
id
}
)
;
form
=
response
.
tab
;
}
catch
(
ex
)
{
if
(
ex
.
error
=
=
"
noTab
"
)
{
throw
new
Error
(
targetFromURL
tab
with
outerWindowID
'
{
id
}
'
doesn
'
t
exist
)
;
}
throw
ex
;
}
}
else
if
(
type
=
=
"
process
"
)
{
DebuggerServer
.
allowChromeProcess
=
true
;
try
{
id
=
parseInt
(
id
10
)
;
if
(
isNaN
(
id
)
)
{
id
=
0
;
}
let
response
=
yield
client
.
getProcess
(
id
)
;
form
=
response
.
form
;
chrome
=
true
;
if
(
id
!
=
0
)
{
isTabActor
=
false
;
}
}
catch
(
ex
)
{
if
(
ex
.
error
=
=
"
noProcess
"
)
{
throw
new
Error
(
targetFromURL
process
with
id
'
{
id
}
'
doesn
'
t
exist
)
;
}
throw
ex
;
}
}
else
if
(
type
=
=
"
window
"
)
{
DebuggerServer
.
allowChromeProcess
=
true
;
try
{
id
=
parseInt
(
id
10
)
;
if
(
isNaN
(
id
)
)
{
throw
new
Error
(
"
targetFromURL
window
requires
id
parameter
"
)
;
}
let
response
=
yield
client
.
mainRoot
.
getWindow
(
{
outerWindowID
:
id
}
)
;
form
=
response
.
window
;
chrome
=
true
;
}
catch
(
ex
)
{
if
(
ex
.
error
=
=
"
notFound
"
)
{
throw
new
Error
(
targetFromURL
window
with
id
'
{
id
}
'
doesn
'
t
exist
)
;
}
throw
ex
;
}
}
else
{
throw
new
Error
(
targetFromURL
unsupported
type
'
{
type
}
'
parameter
)
;
}
return
TargetFactory
.
forRemoteTab
(
{
client
form
chrome
isTabActor
}
)
;
}
)
;
function
*
createClient
(
params
)
{
let
host
=
params
.
get
(
"
host
"
)
;
let
port
=
params
.
get
(
"
port
"
)
;
let
webSocket
=
!
!
params
.
get
(
"
ws
"
)
;
let
transport
;
if
(
port
)
{
transport
=
yield
DebuggerClient
.
socketConnect
(
{
host
port
webSocket
}
)
;
}
else
{
if
(
!
DebuggerServer
.
initialized
)
{
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerActors
(
{
browser
:
true
root
:
true
tab
:
true
}
)
;
}
transport
=
DebuggerServer
.
connectPipe
(
)
;
}
return
new
DebuggerClient
(
transport
)
;
}
