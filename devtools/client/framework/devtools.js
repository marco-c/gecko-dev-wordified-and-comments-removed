"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
DevToolsShim
}
=
require
(
"
chrome
:
/
/
devtools
-
startup
/
content
/
DevToolsShim
.
jsm
"
)
;
loader
.
lazyRequireGetter
(
this
"
TargetFactory
"
"
devtools
/
client
/
framework
/
target
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ToolboxHostManager
"
"
devtools
/
client
/
framework
/
toolbox
-
host
-
manager
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
BrowserConsoleManager
"
"
devtools
/
client
/
webconsole
/
browser
-
console
-
manager
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
Telemetry
"
"
devtools
/
client
/
shared
/
telemetry
"
)
;
loader
.
lazyImporter
(
this
"
BrowserToolboxLauncher
"
"
resource
:
/
/
devtools
/
client
/
framework
/
browser
-
toolbox
/
Launcher
.
jsm
"
)
;
const
{
defaultTools
:
DefaultTools
defaultThemes
:
DefaultThemes
}
=
require
(
"
devtools
/
client
/
definitions
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
getTheme
setTheme
addThemeObserver
removeThemeObserver
}
=
require
(
"
devtools
/
client
/
shared
/
theme
"
)
;
const
FORBIDDEN_IDS
=
new
Set
(
[
"
toolbox
"
"
"
]
)
;
const
MAX_ORDINAL
=
99
;
function
DevTools
(
)
{
this
.
_tools
=
new
Map
(
)
;
this
.
_themes
=
new
Map
(
)
;
this
.
_toolboxes
=
new
Map
(
)
;
this
.
_creatingToolboxes
=
new
Map
(
)
;
EventEmitter
.
decorate
(
this
)
;
this
.
_telemetry
=
new
Telemetry
(
)
;
this
.
_telemetry
.
setEventRecordingEnabled
(
true
)
;
this
.
_onThemeChanged
=
this
.
_onThemeChanged
.
bind
(
this
)
;
addThemeObserver
(
this
.
_onThemeChanged
)
;
this
.
registerDefaults
(
)
;
DevToolsShim
.
register
(
this
)
;
}
DevTools
.
prototype
=
{
chromeWindowType
:
"
navigator
:
browser
"
registerDefaults
(
)
{
this
.
getDefaultTools
(
)
.
forEach
(
definition
=
>
this
.
registerTool
(
definition
)
)
;
this
.
getDefaultThemes
(
)
.
forEach
(
definition
=
>
this
.
registerTheme
(
definition
)
)
;
}
unregisterDefaults
(
)
{
for
(
const
definition
of
this
.
getToolDefinitionArray
(
)
)
{
this
.
unregisterTool
(
definition
.
id
)
;
}
for
(
const
definition
of
this
.
getThemeDefinitionArray
(
)
)
{
this
.
unregisterTheme
(
definition
.
id
)
;
}
}
registerTool
(
toolDefinition
)
{
const
toolId
=
toolDefinition
.
id
;
if
(
!
toolId
|
|
FORBIDDEN_IDS
.
has
(
toolId
)
)
{
throw
new
Error
(
"
Invalid
definition
.
id
"
)
;
}
if
(
!
DefaultTools
.
includes
(
toolDefinition
)
)
{
toolDefinition
.
visibilityswitch
=
"
devtools
.
"
+
toolId
+
"
.
enabled
"
;
}
this
.
_tools
.
set
(
toolId
toolDefinition
)
;
this
.
emit
(
"
tool
-
registered
"
toolId
)
;
}
unregisterTool
(
tool
isQuitApplication
)
{
let
toolId
=
null
;
if
(
typeof
tool
=
=
"
string
"
)
{
toolId
=
tool
;
tool
=
this
.
_tools
.
get
(
tool
)
;
}
else
{
const
{
Deprecated
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Deprecated
.
jsm
"
)
;
Deprecated
.
warning
(
"
Deprecation
WARNING
:
gDevTools
.
unregisterTool
(
tool
)
is
"
+
"
deprecated
.
You
should
unregister
a
tool
using
its
toolId
:
"
+
"
gDevTools
.
unregisterTool
(
toolId
)
.
"
)
;
toolId
=
tool
.
id
;
}
this
.
_tools
.
delete
(
toolId
)
;
if
(
!
isQuitApplication
)
{
this
.
emit
(
"
tool
-
unregistered
"
toolId
)
;
}
}
ordinalSort
(
d1
d2
)
{
const
o1
=
typeof
d1
.
ordinal
=
=
"
number
"
?
d1
.
ordinal
:
MAX_ORDINAL
;
const
o2
=
typeof
d2
.
ordinal
=
=
"
number
"
?
d2
.
ordinal
:
MAX_ORDINAL
;
return
o1
-
o2
;
}
getDefaultTools
(
)
{
return
DefaultTools
.
sort
(
this
.
ordinalSort
)
;
}
getAdditionalTools
(
)
{
const
tools
=
[
]
;
for
(
const
[
value
]
of
this
.
_tools
)
{
if
(
!
DefaultTools
.
includes
(
value
)
)
{
tools
.
push
(
value
)
;
}
}
return
tools
.
sort
(
this
.
ordinalSort
)
;
}
getDefaultThemes
(
)
{
return
DefaultThemes
.
sort
(
this
.
ordinalSort
)
;
}
getToolDefinition
(
toolId
)
{
const
tool
=
this
.
_tools
.
get
(
toolId
)
;
if
(
!
tool
)
{
return
null
;
}
else
if
(
!
tool
.
visibilityswitch
)
{
return
tool
;
}
const
enabled
=
Services
.
prefs
.
getBoolPref
(
tool
.
visibilityswitch
true
)
;
return
enabled
?
tool
:
null
;
}
getToolDefinitionMap
(
)
{
const
tools
=
new
Map
(
)
;
for
(
const
[
id
definition
]
of
this
.
_tools
)
{
if
(
this
.
getToolDefinition
(
id
)
)
{
tools
.
set
(
id
definition
)
;
}
}
return
tools
;
}
getToolDefinitionArray
(
)
{
const
definitions
=
[
]
;
for
(
const
[
id
definition
]
of
this
.
_tools
)
{
if
(
this
.
getToolDefinition
(
id
)
)
{
definitions
.
push
(
definition
)
;
}
}
return
definitions
.
sort
(
this
.
ordinalSort
)
;
}
getTheme
(
)
{
return
getTheme
(
)
;
}
_onThemeChanged
(
)
{
this
.
emit
(
"
theme
-
changed
"
getTheme
(
)
)
;
}
registerTheme
(
themeDefinition
)
{
const
themeId
=
themeDefinition
.
id
;
if
(
!
themeId
)
{
throw
new
Error
(
"
Invalid
theme
id
"
)
;
}
if
(
this
.
_themes
.
get
(
themeId
)
)
{
throw
new
Error
(
"
Theme
with
the
same
id
is
already
registered
"
)
;
}
this
.
_themes
.
set
(
themeId
themeDefinition
)
;
this
.
emit
(
"
theme
-
registered
"
themeId
)
;
}
unregisterTheme
(
theme
)
{
let
themeId
=
null
;
if
(
typeof
theme
=
=
"
string
"
)
{
themeId
=
theme
;
theme
=
this
.
_themes
.
get
(
theme
)
;
}
else
{
themeId
=
theme
.
id
;
}
const
currTheme
=
getTheme
(
)
;
const
isCoreTheme
=
DefaultThemes
.
some
(
t
=
>
t
.
id
=
=
=
themeId
)
;
if
(
!
Services
.
startup
.
shuttingDown
&
&
!
isCoreTheme
&
&
theme
.
id
=
=
currTheme
)
{
setTheme
(
"
light
"
)
;
this
.
emit
(
"
theme
-
unregistered
"
theme
)
;
}
this
.
_themes
.
delete
(
themeId
)
;
}
getThemeDefinition
(
themeId
)
{
const
theme
=
this
.
_themes
.
get
(
themeId
)
;
if
(
!
theme
)
{
return
null
;
}
return
theme
;
}
getThemeDefinitionMap
(
)
{
const
themes
=
new
Map
(
)
;
for
(
const
[
id
definition
]
of
this
.
_themes
)
{
if
(
this
.
getThemeDefinition
(
id
)
)
{
themes
.
set
(
id
definition
)
;
}
}
return
themes
;
}
getThemeDefinitionArray
(
)
{
const
definitions
=
[
]
;
for
(
const
[
id
definition
]
of
this
.
_themes
)
{
if
(
this
.
getThemeDefinition
(
id
)
)
{
definitions
.
push
(
definition
)
;
}
}
return
definitions
.
sort
(
this
.
ordinalSort
)
;
}
saveDevToolsSession
:
function
(
state
)
{
state
.
browserConsole
=
BrowserConsoleManager
.
getBrowserConsoleSessionState
(
)
;
state
.
browserToolbox
=
BrowserToolboxLauncher
.
getBrowserToolboxSessionState
(
)
;
}
restoreDevToolsSession
:
async
function
(
{
browserConsole
browserToolbox
}
)
{
if
(
browserToolbox
)
{
BrowserToolboxLauncher
.
init
(
)
;
}
if
(
browserConsole
&
&
!
BrowserConsoleManager
.
getBrowserConsole
(
)
)
{
await
BrowserConsoleManager
.
toggleBrowserConsole
(
)
;
}
}
_firstShowToolbox
:
true
async
showToolbox
(
target
toolId
hostType
hostOptions
startTime
reason
=
"
toolbox_show
"
shouldRaiseToolbox
=
true
)
{
let
toolbox
=
this
.
_toolboxes
.
get
(
target
)
;
if
(
toolbox
)
{
if
(
hostType
!
=
null
&
&
toolbox
.
hostType
!
=
hostType
)
{
await
toolbox
.
switchHost
(
hostType
)
;
}
if
(
toolId
!
=
null
)
{
await
toolbox
.
selectTool
(
toolId
reason
)
;
}
if
(
shouldRaiseToolbox
)
{
toolbox
.
raise
(
)
;
}
}
else
{
const
promise
=
this
.
_creatingToolboxes
.
get
(
target
)
;
if
(
promise
)
{
return
promise
;
}
const
toolboxPromise
=
this
.
createToolbox
(
target
toolId
hostType
hostOptions
)
;
this
.
_creatingToolboxes
.
set
(
target
toolboxPromise
)
;
toolbox
=
await
toolboxPromise
;
this
.
_creatingToolboxes
.
delete
(
target
)
;
if
(
startTime
)
{
this
.
logToolboxOpenTime
(
toolbox
startTime
)
;
}
this
.
_firstShowToolbox
=
false
;
}
const
width
=
Math
.
ceil
(
toolbox
.
win
.
outerWidth
/
50
)
*
50
;
const
panelName
=
this
.
makeToolIdHumanReadable
(
toolId
|
|
toolbox
.
defaultToolId
)
;
this
.
_telemetry
.
addEventProperty
(
toolbox
"
enter
"
panelName
null
"
width
"
width
)
;
return
toolbox
;
}
logToolboxOpenTime
(
toolbox
startTime
)
{
const
toolId
=
toolbox
.
currentToolId
|
|
toolbox
.
defaultToolId
;
const
delay
=
Cu
.
now
(
)
-
startTime
;
const
panelName
=
this
.
makeToolIdHumanReadable
(
toolId
)
;
const
telemetryKey
=
this
.
_firstShowToolbox
?
"
DEVTOOLS_COLD_TOOLBOX_OPEN_DELAY_MS
"
:
"
DEVTOOLS_WARM_TOOLBOX_OPEN_DELAY_MS
"
;
this
.
_telemetry
.
getKeyedHistogramById
(
telemetryKey
)
.
add
(
toolId
delay
)
;
const
browserWin
=
toolbox
.
topWindow
;
this
.
_telemetry
.
addEventProperty
(
browserWin
"
open
"
"
tools
"
null
"
first_panel
"
panelName
)
;
}
makeToolIdHumanReadable
(
toolId
)
{
if
(
/
^
[
0
-
9a
-
fA
-
F
]
{
40
}
_temporary
-
addon
/
.
test
(
toolId
)
)
{
return
"
temporary
-
addon
"
;
}
let
matches
=
toolId
.
match
(
/
^
_
(
[
0
-
9a
-
fA
-
F
]
{
8
}
-
[
0
-
9a
-
fA
-
F
]
{
4
}
-
[
0
-
9a
-
fA
-
F
]
{
4
}
-
[
0
-
9a
-
fA
-
F
]
{
4
}
-
[
0
-
9a
-
fA
-
F
]
{
12
}
)
_
/
)
;
if
(
matches
&
&
matches
.
length
=
=
=
2
)
{
return
matches
[
1
]
;
}
matches
=
toolId
.
match
(
/
^
_
?
(
.
*
)
-
\
d
+
-
\
d
+
-
devtools
-
panel
/
)
;
if
(
matches
&
&
matches
.
length
=
=
=
2
)
{
return
matches
[
1
]
;
}
return
toolId
;
}
async
createToolbox
(
target
toolId
hostType
hostOptions
)
{
const
manager
=
new
ToolboxHostManager
(
target
hostType
hostOptions
)
;
const
toolbox
=
await
manager
.
create
(
toolId
)
;
this
.
_toolboxes
.
set
(
target
toolbox
)
;
this
.
emit
(
"
toolbox
-
created
"
toolbox
)
;
toolbox
.
once
(
"
destroy
"
(
)
=
>
{
this
.
emit
(
"
toolbox
-
destroy
"
target
)
;
}
)
;
toolbox
.
once
(
"
destroyed
"
(
)
=
>
{
this
.
_toolboxes
.
delete
(
target
)
;
this
.
emit
(
"
toolbox
-
destroyed
"
target
)
;
}
)
;
toolbox
.
on
(
"
switch
-
target
"
newTarget
=
>
{
this
.
_toolboxes
.
delete
(
target
)
;
this
.
_toolboxes
.
set
(
newTarget
toolbox
)
;
target
=
newTarget
;
}
)
;
await
toolbox
.
open
(
)
;
this
.
emit
(
"
toolbox
-
ready
"
toolbox
)
;
return
toolbox
;
}
getToolbox
(
target
)
{
return
this
.
_toolboxes
.
get
(
target
)
;
}
async
closeToolbox
(
target
)
{
let
toolbox
=
await
this
.
_creatingToolboxes
.
get
(
target
)
;
if
(
!
toolbox
)
{
toolbox
=
this
.
_toolboxes
.
get
(
target
)
;
}
if
(
!
toolbox
)
{
return
false
;
}
await
toolbox
.
destroy
(
)
;
return
true
;
}
getTargetForTab
:
function
(
tab
)
{
return
TargetFactory
.
forTab
(
tab
)
;
}
createTargetForTab
:
function
(
tab
)
{
return
TargetFactory
.
createTargetForTab
(
tab
)
;
}
createWebExtensionInspectedWindowFront
:
function
(
tabTarget
)
{
return
tabTarget
.
getFront
(
"
webExtensionInspectedWindow
"
)
;
}
openBrowserConsole
:
function
(
)
{
const
{
BrowserConsoleManager
}
=
require
(
"
devtools
/
client
/
webconsole
/
browser
-
console
-
manager
"
)
;
BrowserConsoleManager
.
openBrowserConsoleOrFocus
(
)
;
}
async
inspectNode
(
tab
domReference
startTime
)
{
const
target
=
await
TargetFactory
.
forTab
(
tab
)
;
const
toolbox
=
await
gDevTools
.
showToolbox
(
target
"
inspector
"
null
null
startTime
"
inspect_dom
"
)
;
const
inspector
=
toolbox
.
getCurrentPanel
(
)
;
const
onNewNode
=
inspector
.
selection
.
once
(
"
new
-
node
-
front
"
)
;
const
nodeFront
=
await
inspector
.
walker
.
getNodeActorFromContentDomReference
(
domReference
)
;
inspector
.
selection
.
setNodeFront
(
nodeFront
{
reason
:
"
browser
-
context
-
menu
"
}
)
;
await
onNewNode
;
await
inspector
.
once
(
"
inspector
-
updated
"
)
;
}
async
inspectA11Y
(
tab
domReference
startTime
)
{
const
target
=
await
TargetFactory
.
forTab
(
tab
)
;
const
toolbox
=
await
gDevTools
.
showToolbox
(
target
"
accessibility
"
null
null
startTime
)
;
const
inspectorFront
=
await
toolbox
.
target
.
getFront
(
"
inspector
"
)
;
const
nodeFront
=
await
inspectorFront
.
walker
.
getNodeActorFromContentDomReference
(
domReference
)
;
const
a11yPanel
=
toolbox
.
getCurrentPanel
(
)
;
const
onSelected
=
a11yPanel
.
once
(
"
new
-
accessible
-
front
-
selected
"
)
;
a11yPanel
.
selectAccessibleForNode
(
nodeFront
"
browser
-
context
-
menu
"
)
;
await
onSelected
;
}
destroy
(
{
shuttingDown
}
)
{
if
(
!
shuttingDown
)
{
for
(
const
[
toolbox
]
of
this
.
_toolboxes
)
{
toolbox
.
destroy
(
)
;
}
}
for
(
const
[
key
]
of
this
.
getToolDefinitionMap
(
)
)
{
this
.
unregisterTool
(
key
true
)
;
}
gDevTools
.
unregisterDefaults
(
)
;
removeThemeObserver
(
this
.
_onThemeChanged
)
;
if
(
!
shuttingDown
)
{
DevToolsShim
.
unregister
(
)
;
}
}
getToolboxes
(
)
{
return
Array
.
from
(
this
.
_toolboxes
.
values
(
)
)
;
}
}
;
const
gDevTools
=
(
exports
.
gDevTools
=
new
DevTools
(
)
)
;
