const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
shared
-
head
.
js
"
this
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browsertoolbox
.
panel
"
"
inspector
"
)
;
const
ToolboxTask
=
await
initBrowserToolboxTask
(
{
enableBrowserToolboxFission
:
true
}
)
;
await
ToolboxTask
.
importFunctions
(
{
getNodeFront
getNodeFrontInFrames
selectNode
selectNodeInFrames
}
)
;
const
tab
=
await
addTab
(
data
:
text
/
html
<
div
id
=
"
my
-
div
"
style
=
"
color
:
red
"
>
Foo
<
/
div
>
<
div
id
=
"
second
-
div
"
style
=
"
color
:
blue
"
>
Foo
<
/
div
>
)
;
tab
.
linkedBrowser
.
setAttribute
(
"
test
-
tab
"
"
true
"
)
;
const
color
=
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
const
inspector
=
gToolbox
.
getPanel
(
"
inspector
"
)
;
const
onSidebarSelect
=
inspector
.
sidebar
.
once
(
"
select
"
)
;
inspector
.
sidebar
.
select
(
"
computedview
"
)
;
await
onSidebarSelect
;
await
selectNodeInFrames
(
[
'
browser
[
remote
=
"
true
"
]
[
test
-
tab
]
'
"
#
my
-
div
"
]
inspector
)
;
const
view
=
inspector
.
getPanel
(
"
computedview
"
)
.
computedView
;
function
getProperty
(
name
)
{
const
propertyViews
=
view
.
propertyViews
;
for
(
const
propView
of
propertyViews
)
{
if
(
propView
.
name
=
=
name
)
{
return
propView
;
}
}
return
null
;
}
const
prop
=
getProperty
(
"
color
"
)
;
return
prop
.
valueNode
.
textContent
;
}
)
;
is
(
color
"
rgb
(
255
0
0
)
"
"
The
color
property
of
the
<
div
>
within
a
tab
isn
'
t
red
"
)
;
info
(
"
Check
that
the
node
picker
can
be
used
on
element
in
the
content
page
"
)
;
await
pickNodeInContentPage
(
ToolboxTask
tab
"
browser
[
test
-
tab
]
"
"
#
second
-
div
"
)
;
const
secondColor
=
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
const
inspector
=
gToolbox
.
getPanel
(
"
inspector
"
)
;
is
(
inspector
.
selection
.
nodeFront
.
id
"
second
-
div
"
"
The
expected
element
is
selected
in
the
inspector
"
)
;
const
view
=
inspector
.
getPanel
(
"
computedview
"
)
.
computedView
;
function
getProperty
(
name
)
{
const
propertyViews
=
view
.
propertyViews
;
for
(
const
propView
of
propertyViews
)
{
if
(
propView
.
name
=
=
name
)
{
return
propView
;
}
}
return
null
;
}
const
prop
=
getProperty
(
"
color
"
)
;
return
prop
.
valueNode
.
textContent
;
}
)
;
is
(
secondColor
"
rgb
(
0
0
255
)
"
"
The
color
property
of
the
<
div
>
within
a
tab
isn
'
t
blue
"
)
;
info
(
"
Check
that
the
node
picker
can
be
used
for
element
in
non
-
remote
<
browser
>
"
)
;
const
nonRemoteUrl
=
"
about
:
robots
"
;
const
nonRemoteTab
=
await
addTab
(
nonRemoteUrl
)
;
nonRemoteTab
.
linkedBrowser
.
setAttribute
(
"
test
-
tab
-
non
-
remote
"
"
"
)
;
is
(
nonRemoteTab
.
linkedBrowser
.
hasAttribute
(
"
remote
"
)
false
"
The
<
browser
>
element
for
about
:
robots
is
not
remote
"
)
;
await
pickNodeInContentPage
(
ToolboxTask
nonRemoteTab
"
browser
[
test
-
tab
-
non
-
remote
]
"
"
#
errorTryAgain
"
)
;
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
const
inspector
=
gToolbox
.
getPanel
(
"
inspector
"
)
;
is
(
inspector
.
selection
.
nodeFront
.
id
"
errorTryAgain
"
"
The
element
inside
a
non
-
remote
<
browser
>
element
is
selected
in
the
inspector
"
)
;
}
)
;
await
ToolboxTask
.
destroy
(
)
;
}
)
;
async
function
pickNodeInContentPage
(
ToolboxTask
tab
browserElementSelector
contentElementSelector
)
{
await
ToolboxTask
.
spawn
(
contentElementSelector
async
_selector
=
>
{
const
onPickerStarted
=
gToolbox
.
nodePicker
.
once
(
"
picker
-
started
"
)
;
const
onPickerReady
=
new
Promise
(
resolve
=
>
{
gToolbox
.
nodePicker
.
on
(
"
inspector
-
front
-
ready
-
for
-
picker
"
async
function
onFrontReady
(
walker
)
{
if
(
await
walker
.
querySelector
(
walker
.
rootNode
_selector
)
)
{
gToolbox
.
nodePicker
.
off
(
"
inspector
-
front
-
ready
-
for
-
picker
"
onFrontReady
)
;
resolve
(
)
;
}
}
)
;
}
)
;
gToolbox
.
nodePicker
.
start
(
)
;
await
onPickerStarted
;
await
onPickerReady
;
const
inspector
=
gToolbox
.
getPanel
(
"
inspector
"
)
;
this
.
onPickerStopped
=
gToolbox
.
nodePicker
.
once
(
"
picker
-
stopped
"
)
;
this
.
onInspectorUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
}
)
;
const
{
x
y
}
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
contentElementSelector
]
_selector
=
>
{
const
rect
=
content
.
document
.
querySelector
(
_selector
)
.
getBoundingClientRect
(
)
;
return
{
x
:
rect
.
x
y
:
rect
.
y
}
;
}
)
;
await
EventUtils
.
synthesizeMouse
(
document
.
querySelector
(
browserElementSelector
)
x
+
5
y
+
5
{
}
)
;
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
info
(
"
#
Waiting
for
picker
stop
"
)
;
await
this
.
onPickerStopped
;
info
(
"
#
Waiting
for
inspector
-
updated
"
)
;
await
this
.
onInspectorUpdated
;
delete
this
.
onPickerStopped
;
delete
this
.
onInspectorUpdated
;
}
)
;
}
