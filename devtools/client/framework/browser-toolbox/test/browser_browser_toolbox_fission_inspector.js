const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browsertoolbox
.
panel
"
"
inspector
"
)
;
const
ToolboxTask
=
await
initBrowserToolboxTask
(
{
enableBrowserToolboxFission
:
true
}
)
;
await
ToolboxTask
.
importFunctions
(
{
selectNodeFront
}
)
;
const
tab
=
await
addTab
(
data
:
text
/
html
<
div
id
=
"
my
-
div
"
style
=
"
color
:
red
"
>
Foo
<
/
div
>
<
div
id
=
"
second
-
div
"
style
=
"
color
:
blue
"
>
Foo
<
/
div
>
)
;
tab
.
linkedBrowser
.
setAttribute
(
"
test
-
tab
"
"
true
"
)
;
const
color
=
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
const
inspector
=
gToolbox
.
getPanel
(
"
inspector
"
)
;
const
onSidebarSelect
=
inspector
.
sidebar
.
once
(
"
select
"
)
;
inspector
.
sidebar
.
select
(
"
computedview
"
)
;
await
onSidebarSelect
;
const
browser
=
await
selectNodeFront
(
inspector
inspector
.
walker
'
browser
[
remote
=
"
true
"
]
[
test
-
tab
]
'
)
;
const
browserTarget
=
await
browser
.
connectToRemoteFrame
(
)
;
const
walker
=
(
await
browserTarget
.
getFront
(
"
inspector
"
)
)
.
walker
;
await
selectNodeFront
(
inspector
walker
"
#
my
-
div
"
)
;
const
view
=
inspector
.
getPanel
(
"
computedview
"
)
.
computedView
;
function
getProperty
(
name
)
{
const
propertyViews
=
view
.
propertyViews
;
for
(
const
propView
of
propertyViews
)
{
if
(
propView
.
name
=
=
name
)
{
return
propView
;
}
}
return
null
;
}
const
prop
=
getProperty
(
"
color
"
)
;
return
prop
.
valueNode
.
textContent
;
}
)
;
is
(
color
"
rgb
(
255
0
0
)
"
"
The
color
property
of
the
<
div
>
within
a
tab
isn
'
t
red
"
)
;
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
const
onPickerStarted
=
gToolbox
.
nodePicker
.
once
(
"
picker
-
started
"
)
;
const
onPickerReady
=
new
Promise
(
resolve
=
>
{
gToolbox
.
nodePicker
.
on
(
"
inspector
-
front
-
ready
-
for
-
picker
"
async
function
onFrontReady
(
walker
)
{
if
(
await
walker
.
querySelector
(
walker
.
rootNode
"
#
second
-
div
"
)
)
{
gToolbox
.
nodePicker
.
off
(
"
inspector
-
front
-
ready
-
for
-
picker
"
onFrontReady
)
;
resolve
(
)
;
}
}
)
;
}
)
;
gToolbox
.
nodePicker
.
start
(
)
;
await
onPickerStarted
;
await
onPickerReady
;
const
inspector
=
gToolbox
.
getPanel
(
"
inspector
"
)
;
this
.
onPickerStopped
=
gToolbox
.
nodePicker
.
once
(
"
picker
-
stopped
"
)
;
this
.
onInspectorUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
}
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
second
-
div
"
{
}
tab
.
linkedBrowser
)
;
const
secondColor
=
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
info
(
"
#
Waiting
for
picker
stop
"
)
;
await
this
.
onPickerStopped
;
info
(
"
#
Waiting
for
inspector
-
updated
"
)
;
await
this
.
onInspectorUpdated
;
const
inspector
=
gToolbox
.
getPanel
(
"
inspector
"
)
;
const
view
=
inspector
.
getPanel
(
"
computedview
"
)
.
computedView
;
function
getProperty
(
name
)
{
const
propertyViews
=
view
.
propertyViews
;
for
(
const
propView
of
propertyViews
)
{
if
(
propView
.
name
=
=
name
)
{
return
propView
;
}
}
return
null
;
}
const
prop
=
getProperty
(
"
color
"
)
;
return
prop
.
valueNode
.
textContent
;
}
)
;
is
(
secondColor
"
rgb
(
0
0
255
)
"
"
The
color
property
of
the
<
div
>
within
a
tab
isn
'
t
blue
"
)
;
await
ToolboxTask
.
destroy
(
)
;
}
)
;
