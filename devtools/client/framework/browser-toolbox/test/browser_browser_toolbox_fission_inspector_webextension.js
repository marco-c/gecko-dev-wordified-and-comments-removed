const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
shared
-
head
.
js
"
this
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
sidebar_action
:
{
default_title
:
"
SideBarExtensionTest
"
default_panel
:
"
sidebar
.
html
"
}
}
useAddonManager
:
"
temporary
"
files
:
{
"
sidebar
.
html
"
:
<
!
DOCTYPE
html
>
<
html
class
=
"
sidebar
-
extension
-
test
"
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
script
src
=
"
sidebar
.
js
"
>
<
/
script
>
<
/
head
>
<
body
>
<
h1
id
=
"
sidebar
-
extension
-
h1
"
>
Sidebar
Extension
Test
<
/
h1
>
<
/
body
>
<
/
html
>
"
sidebar
.
js
"
:
function
(
)
{
window
.
onload
=
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
sidebar
-
ready
"
)
;
}
;
}
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
sidebar
-
ready
"
)
;
ok
(
true
"
Extension
sidebar
is
displayed
"
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
panel
"
"
inspector
"
)
;
const
ToolboxTask
=
await
initBrowserToolboxTask
(
{
enableBrowserToolboxFission
:
true
}
)
;
await
ToolboxTask
.
importFunctions
(
{
getNodeFront
getNodeFrontInFrames
selectNode
selectNodeInFrames
}
)
;
const
nodeId
=
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
const
inspector
=
gToolbox
.
getPanel
(
"
inspector
"
)
;
const
nodeFront
=
await
selectNodeInFrames
(
[
"
browser
#
sidebar
"
"
browser
#
webext
-
panels
-
browser
"
"
html
.
sidebar
-
extension
-
test
h1
"
]
inspector
)
;
return
nodeFront
.
id
;
}
)
;
is
(
nodeId
"
sidebar
-
extension
-
h1
"
"
The
Browser
Toolbox
can
inspect
a
node
in
the
webextension
sidebar
document
"
)
;
await
ToolboxTask
.
destroy
(
)
;
await
extension
.
unload
(
)
;
}
)
;
