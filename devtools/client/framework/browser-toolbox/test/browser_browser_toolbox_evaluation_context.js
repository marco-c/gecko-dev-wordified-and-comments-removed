const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browsertoolbox
.
panel
"
"
webconsole
"
)
;
const
tab
=
await
addTab
(
data
:
text
/
html
<
title
>
Test
tab
<
/
title
>
)
;
const
ToolboxTask
=
await
initBrowserToolboxTask
(
{
enableBrowserToolboxFission
:
true
}
)
;
const
tabProcessID
=
tab
.
linkedBrowser
.
browsingContext
.
currentWindowGlobal
.
osPid
;
await
ToolboxTask
.
spawn
(
tabProcessID
async
processID
=
>
{
const
{
hud
}
=
await
gToolbox
.
getPanel
(
"
webconsole
"
)
;
const
evaluationContextSelectorButton
=
hud
.
ui
.
outputNode
.
querySelector
(
"
.
webconsole
-
evaluation
-
selector
-
button
"
)
;
is
(
!
!
evaluationContextSelectorButton
true
"
The
evaluation
context
selector
is
visible
"
)
;
is
(
evaluationContextSelectorButton
.
innerText
"
Top
"
"
The
button
has
the
expected
'
Top
'
text
"
)
;
const
labels
=
hud
.
chromeWindow
.
document
.
querySelectorAll
(
"
#
webconsole
-
console
-
evaluation
-
context
-
selector
-
menu
-
list
li
.
label
"
)
;
const
labelTexts
=
Array
.
from
(
labels
)
.
map
(
item
=
>
item
.
textContent
)
;
is
(
labelTexts
.
includes
(
Content
Process
(
pid
{
processID
}
)
)
true
{
processID
}
content
process
visible
in
the
execution
context
(
{
labelTexts
}
)
)
;
is
(
labelTexts
.
includes
(
Test
tab
)
true
Test
tab
is
visible
in
the
execution
context
(
{
labelTexts
}
)
)
;
}
)
;
await
ToolboxTask
.
destroy
(
)
;
}
)
;
