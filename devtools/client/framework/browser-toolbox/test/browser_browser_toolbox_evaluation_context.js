const
{
PromiseTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
sys
.
mjs
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browsertoolbox
.
panel
"
"
webconsole
"
)
;
await
pushPref
(
"
devtools
.
every
-
frame
-
target
.
enabled
"
true
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
scope
"
"
everything
"
)
;
const
tab
=
await
addTab
(
"
https
:
/
/
example
.
com
/
document
-
builder
.
sjs
?
html
=
<
html
>
<
title
>
Test
tab
<
/
title
>
<
/
html
>
"
)
;
const
ToolboxTask
=
await
initBrowserToolboxTask
(
)
;
await
ToolboxTask
.
importFunctions
(
{
waitUntil
getContextLabels
getFramesLabels
}
)
;
const
tabProcessID
=
tab
.
linkedBrowser
.
browsingContext
.
currentWindowGlobal
.
osPid
;
const
decodedTabURI
=
decodeURI
(
tab
.
linkedBrowser
.
currentURI
.
spec
)
;
await
ToolboxTask
.
spawn
(
[
tabProcessID
isFissionEnabled
(
)
decodedTabURI
]
async
(
processID
_isFissionEnabled
tabURI
)
=
>
{
const
{
hud
}
=
await
gToolbox
.
getPanel
(
"
webconsole
"
)
;
const
evaluationContextSelectorButton
=
hud
.
ui
.
outputNode
.
querySelector
(
"
.
webconsole
-
evaluation
-
selector
-
button
"
)
;
is
(
!
!
evaluationContextSelectorButton
true
"
The
evaluation
context
selector
is
visible
"
)
;
is
(
evaluationContextSelectorButton
.
innerText
"
Top
"
"
The
button
has
the
expected
'
Top
'
text
"
)
;
const
labelTexts
=
getContextLabels
(
gToolbox
)
;
const
expectedTitle
=
_isFissionEnabled
?
(
pid
{
processID
}
)
https
:
/
/
example
.
com
:
(
pid
{
processID
}
)
web
;
ok
(
labelTexts
.
includes
(
expectedTitle
)
{
processID
}
content
process
visible
in
the
execution
context
(
{
labelTexts
}
)
)
;
ok
(
labelTexts
.
includes
(
Test
tab
)
Test
tab
is
visible
in
the
execution
context
(
{
labelTexts
}
)
)
;
info
(
"
Check
the
iframe
dropdown
start
by
opening
it
"
)
;
const
btn
=
gToolbox
.
doc
.
getElementById
(
"
command
-
button
-
frames
"
)
;
btn
.
click
(
)
;
const
panel
=
gToolbox
.
doc
.
getElementById
(
"
command
-
button
-
frames
-
panel
"
)
;
ok
(
panel
"
popup
panel
has
created
.
"
)
;
await
waitUntil
(
(
)
=
>
panel
.
classList
.
contains
(
"
tooltip
-
visible
"
)
"
Wait
for
the
menu
to
be
displayed
"
)
;
is
(
getFramesLabels
(
gToolbox
)
[
0
]
"
chrome
:
/
/
browser
/
content
/
browser
.
xhtml
"
"
The
iframe
dropdown
lists
first
browser
.
xhtml
running
in
the
parent
process
"
)
;
ok
(
getFramesLabels
(
gToolbox
)
.
includes
(
tabURI
)
"
The
iframe
dropdown
lists
the
tab
document
running
in
the
content
process
"
)
;
gToolbox
.
doc
.
querySelector
(
"
#
toolbox
-
frame
-
menu
.
command
"
)
.
click
(
)
;
await
waitUntil
(
(
)
=
>
!
panel
.
classList
.
contains
(
"
tooltip
-
visible
"
)
"
Wait
for
the
menu
to
be
hidden
"
)
;
info
(
"
Check
that
the
ChromeDebugToolbar
is
displayed
"
)
;
const
chromeDebugToolbar
=
gToolbox
.
doc
.
querySelector
(
"
.
chrome
-
debug
-
toolbar
"
)
;
ok
(
!
!
chromeDebugToolbar
"
ChromeDebugToolbar
is
displayed
"
)
;
const
chromeDebugToolbarScopeInputs
=
Array
.
from
(
chromeDebugToolbar
.
querySelectorAll
(
[
name
=
"
chrome
-
debug
-
mode
"
]
)
)
;
is
(
chromeDebugToolbarScopeInputs
.
length
2
"
There
are
2
mode
inputs
in
the
chromeDebugToolbar
"
)
;
const
[
chromeDebugToolbarParentProcessModeInput
chromeDebugToolbarMultiprocessModeInput
]
=
chromeDebugToolbarScopeInputs
;
is
(
chromeDebugToolbarParentProcessModeInput
.
value
"
parent
-
process
"
"
Got
expected
value
for
the
first
input
"
)
;
is
(
chromeDebugToolbarMultiprocessModeInput
.
value
"
everything
"
"
Got
expected
value
for
the
second
input
"
)
;
ok
(
chromeDebugToolbarMultiprocessModeInput
.
checked
"
The
multiprocess
mode
is
selected
"
)
;
info
(
"
Click
on
the
parent
-
process
input
and
check
that
it
restricts
the
targets
"
)
;
chromeDebugToolbarParentProcessModeInput
.
click
(
)
;
info
(
"
Wait
for
the
iframe
dropdown
to
hide
the
tab
target
"
)
;
await
waitUntil
(
(
)
=
>
{
return
!
getFramesLabels
(
gToolbox
)
.
includes
(
tabURI
)
;
}
)
;
info
(
"
Wait
for
the
context
selector
to
hide
the
tab
context
"
)
;
await
waitUntil
(
(
)
=
>
{
return
!
getContextLabels
(
gToolbox
)
.
includes
(
Test
tab
)
;
}
)
;
ok
(
!
chromeDebugToolbarMultiprocessModeInput
.
checked
"
Now
the
multiprocess
mode
is
disabled
"
)
;
ok
(
chromeDebugToolbarParentProcessModeInput
.
checked
"
and
the
parent
process
mode
is
enabled
"
)
;
info
(
"
Switch
back
to
multiprocess
mode
"
)
;
chromeDebugToolbarMultiprocessModeInput
.
click
(
)
;
info
(
"
Wait
for
the
iframe
dropdown
to
show
again
the
tab
target
"
)
;
await
waitUntil
(
(
)
=
>
{
return
getFramesLabels
(
gToolbox
)
.
includes
(
tabURI
)
;
}
)
;
info
(
"
Wait
for
the
context
selector
to
show
again
the
tab
context
"
)
;
await
waitUntil
(
(
)
=
>
{
return
getContextLabels
(
gToolbox
)
.
includes
(
Test
tab
)
;
}
)
;
}
)
;
await
ToolboxTask
.
destroy
(
)
;
}
)
;
function
getContextLabels
(
toolbox
)
{
const
labels
=
toolbox
.
doc
.
querySelectorAll
(
"
#
webconsole
-
console
-
evaluation
-
context
-
selector
-
menu
-
list
li
.
label
"
)
;
return
Array
.
from
(
labels
)
.
map
(
item
=
>
item
.
textContent
)
;
}
function
getFramesLabels
(
toolbox
)
{
return
Array
.
from
(
toolbox
.
doc
.
querySelectorAll
(
"
#
toolbox
-
frame
-
menu
.
command
.
label
"
)
)
.
map
(
el
=
>
el
.
textContent
)
;
}
