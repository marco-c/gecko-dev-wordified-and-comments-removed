const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
shared
-
head
.
js
"
this
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
const
ToolboxTask
=
await
initBrowserToolboxTask
(
{
enableBrowserToolboxFission
:
true
}
)
;
await
ToolboxTask
.
importFunctions
(
{
selectNodeFront
}
)
;
const
tab
=
await
addTab
(
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
framework
/
browser
-
toolbox
/
test
/
doc_browser_toolbox_fission_contentframe_inspector_page
.
html
)
;
tab
.
linkedBrowser
.
setAttribute
(
"
test
-
tab
"
"
true
"
)
;
const
testAttribute
=
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
const
inspector
=
await
gToolbox
.
selectTool
(
"
inspector
"
)
;
const
onSidebarSelect
=
inspector
.
sidebar
.
once
(
"
select
"
)
;
inspector
.
sidebar
.
select
(
"
computedview
"
)
;
await
onSidebarSelect
;
info
(
"
Select
the
browser
element
for
the
content
page
"
)
;
const
browserFront
=
await
selectNodeFront
(
inspector
inspector
.
walker
'
browser
[
remote
=
"
true
"
]
[
test
-
tab
]
'
)
;
const
browserTarget
=
await
browserFront
.
connectToRemoteFrame
(
)
;
const
browserWalker
=
(
await
browserTarget
.
getFront
(
"
inspector
"
)
)
.
walker
;
info
(
"
Select
the
iframe
element
in
the
content
page
"
)
;
const
iframeFront
=
await
selectNodeFront
(
inspector
browserWalker
"
iframe
"
)
;
const
iframeTarget
=
iframeFront
.
remoteFrame
?
await
iframeFront
.
connectToRemoteFrame
(
)
:
browserTarget
;
const
iframeWalker
=
(
await
iframeTarget
.
getFront
(
"
inspector
"
)
)
.
walker
;
const
{
nodes
}
=
await
iframeWalker
.
children
(
iframeFront
)
;
const
iframeDocFront
=
nodes
.
find
(
n
=
>
n
.
nodeType
=
=
=
Node
.
DOCUMENT_NODE
)
;
info
(
"
Select
the
test
element
nested
in
the
remote
iframe
"
)
;
const
nodeFront
=
await
selectNodeFront
(
inspector
iframeWalker
"
#
inside
-
iframe
"
iframeDocFront
)
;
return
nodeFront
.
getAttribute
(
"
test
-
attribute
"
)
;
}
)
;
is
(
testAttribute
"
fission
"
"
Could
successfully
read
attribute
on
a
node
inside
a
remote
iframe
"
)
;
await
ToolboxTask
.
destroy
(
)
;
}
)
;
