const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
shared
-
head
.
js
"
this
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browsertoolbox
.
panel
"
"
inspector
"
)
;
const
ToolboxTask
=
await
initBrowserToolboxTask
(
{
enableBrowserToolboxFission
:
true
}
)
;
await
ToolboxTask
.
importFunctions
(
{
getNodeFront
getRuleViewLinkByIndex
selectNode
selectNodeInFrames
}
)
;
const
tab
=
await
addTab
(
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
framework
/
browser
-
toolbox
/
test
/
doc_browser_toolbox_ruleview_stylesheet
.
html
)
;
tab
.
linkedBrowser
.
setAttribute
(
"
test
-
tab
"
"
true
"
)
;
info
(
"
Get
the
source
label
for
a
rule
displayed
in
the
Browser
Toolbox
ruleview
"
)
;
const
sourceLabel
=
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
const
inspector
=
gToolbox
.
getPanel
(
"
inspector
"
)
;
info
(
"
Select
the
rule
view
"
)
;
const
onSidebarSelect
=
inspector
.
sidebar
.
once
(
"
select
"
)
;
inspector
.
sidebar
.
select
(
"
ruleview
"
)
;
await
onSidebarSelect
;
info
(
"
Select
a
DIV
element
in
the
test
page
"
)
;
await
selectNodeInFrames
(
[
'
browser
[
remote
=
"
true
"
]
[
test
-
tab
]
'
"
div
"
]
inspector
)
;
info
(
"
Retrieve
the
sourceLabel
for
the
rule
at
index
1
"
)
;
const
ruleView
=
inspector
.
getPanel
(
"
ruleview
"
)
.
view
;
const
sourceLabelEl
=
getRuleViewLinkByIndex
(
ruleView
1
)
.
querySelector
(
"
.
ruleview
-
rule
-
source
-
label
"
)
;
return
sourceLabelEl
.
textContent
;
}
)
;
is
(
sourceLabel
"
style_browser_toolbox_ruleview_stylesheet
.
css
:
1
"
"
source
label
has
the
expected
value
in
the
ruleview
"
)
;
await
ToolboxTask
.
destroy
(
)
;
}
)
;
