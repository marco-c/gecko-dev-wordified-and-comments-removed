const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
4
)
;
const
{
fetch
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
debuggerHeadURL
=
CHROME_URL_ROOT
+
"
.
.
/
.
.
/
debugger
/
test
/
mochitest
/
head
.
js
"
;
const
helpersURL
=
CHROME_URL_ROOT
+
"
.
.
/
.
.
/
debugger
/
test
/
mochitest
/
helpers
.
js
"
;
const
helpersContextURL
=
CHROME_URL_ROOT
+
"
.
.
/
.
.
/
debugger
/
test
/
mochitest
/
helpers
/
context
.
js
"
;
add_task
(
async
function
runTest
(
)
{
const
s
=
Cu
.
Sandbox
(
"
http
:
/
/
mozilla
.
org
"
)
;
const
id
=
new
Date
(
)
.
getTime
(
)
;
const
testUrl
=
http
:
/
/
mozilla
.
org
/
browser
-
toolbox
-
test
-
{
id
}
.
js
;
Cu
.
evalInSandbox
(
"
(
"
+
function
(
)
{
this
.
plop
=
function
plop
(
)
{
return
1
;
}
;
}
+
"
)
.
call
(
this
)
"
s
"
1
.
8
"
testUrl
0
)
;
const
interval
=
setInterval
(
s
.
plop
1000
)
;
let
{
content
:
debuggerHead
}
=
await
fetch
(
debuggerHeadURL
)
;
const
{
content
:
debuggerHelpers
}
=
await
fetch
(
helpersURL
)
;
const
{
content
:
debuggerContextHelpers
}
=
await
fetch
(
helpersContextURL
)
;
debuggerHead
=
debuggerHead
+
debuggerContextHelpers
+
debuggerHelpers
;
debuggerHead
=
debuggerHead
.
replace
(
/
Services
.
scriptloader
.
loadSubScript
[
^
\
)
]
*
\
)
;
/
g
"
"
)
;
const
ToolboxTask
=
await
initBrowserToolboxTask
(
)
;
await
ToolboxTask
.
importScript
(
debuggerHead
)
;
await
ToolboxTask
.
importFunctions
(
{
info
:
msg
=
>
dump
(
msg
+
"
\
n
"
)
is
:
(
a
b
description
)
=
>
{
let
msg
=
"
'
"
+
JSON
.
stringify
(
a
)
+
"
'
is
equal
to
'
"
+
JSON
.
stringify
(
b
)
+
"
'
"
;
if
(
description
)
{
msg
+
=
"
-
"
+
description
;
}
if
(
a
!
=
=
b
)
{
msg
=
"
FAILURE
:
"
+
msg
;
dump
(
msg
+
"
\
n
"
)
;
throw
new
Error
(
msg
)
;
}
else
{
msg
=
"
SUCCESS
:
"
+
msg
;
dump
(
msg
+
"
\
n
"
)
;
}
}
ok
:
(
a
description
)
=
>
{
let
msg
=
"
'
"
+
JSON
.
stringify
(
a
)
+
"
'
is
true
"
;
if
(
description
)
{
msg
+
=
"
-
"
+
description
;
}
if
(
!
a
)
{
msg
=
"
FAILURE
:
"
+
msg
;
dump
(
msg
+
"
\
n
"
)
;
throw
new
Error
(
msg
)
;
}
else
{
msg
=
"
SUCCESS
:
"
+
msg
;
dump
(
msg
+
"
\
n
"
)
;
}
}
waitUntil
}
)
;
await
ToolboxTask
.
spawn
(
"
{
testUrl
}
"
async
_testUrl
=
>
{
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
debugger
.
tabs
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
debugger
.
pending
-
selected
-
location
"
)
;
info
(
"
Waiting
for
debugger
load
"
)
;
await
gToolbox
.
selectTool
(
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
gToolbox
)
;
const
window
=
dbg
.
win
;
const
document
=
window
.
document
;
await
waitForSources
(
dbg
_testUrl
)
;
info
(
"
Loaded
selecting
the
test
script
to
debug
"
)
;
const
domain
=
[
.
.
.
document
.
querySelectorAll
(
"
.
tree
-
node
"
)
]
.
find
(
node
=
>
{
return
node
.
querySelector
(
"
.
label
"
)
.
textContent
.
trim
(
)
=
=
"
mozilla
.
org
"
;
}
)
;
const
arrow
=
domain
.
querySelector
(
"
.
arrow
"
)
;
arrow
.
click
(
)
;
const
fileName
=
_testUrl
.
match
(
/
browser
-
toolbox
-
test
.
*
\
.
js
/
)
[
0
]
;
let
script
=
[
.
.
.
document
.
querySelectorAll
(
"
.
tree
-
node
"
)
]
.
find
(
node
=
>
{
return
node
.
textContent
.
includes
(
fileName
)
;
}
)
;
script
=
script
.
querySelector
(
"
.
node
"
)
;
script
.
click
(
)
;
const
onPaused
=
waitForPaused
(
dbg
)
;
await
selectSource
(
dbg
fileName
)
;
await
addBreakpoint
(
dbg
fileName
2
)
;
await
onPaused
;
assertPausedLocation
(
dbg
fileName
2
)
;
await
stepIn
(
dbg
)
;
assertPausedLocation
(
dbg
fileName
3
)
;
const
source
=
findSource
(
dbg
fileName
)
;
await
removeBreakpoint
(
dbg
source
.
id
2
)
;
await
resume
(
dbg
)
;
}
)
;
clearInterval
(
interval
)
;
await
ToolboxTask
.
destroy
(
)
;
}
)
;
