const
{
PromiseTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
sys
.
mjs
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
const
ToolboxTask
=
await
initBrowserToolboxTask
(
)
;
await
ToolboxTask
.
importFunctions
(
{
waitUntil
clickMeatballItem
}
)
;
is
(
getPseudoLocale
(
)
"
"
"
Starts
out
as
empty
"
)
;
await
ToolboxTask
.
spawn
(
null
(
)
=
>
clickMeatballItem
(
"
accented
"
)
)
;
is
(
getPseudoLocale
(
)
"
accented
"
"
Enabled
the
accented
pseudo
-
locale
"
)
;
await
ToolboxTask
.
spawn
(
null
(
)
=
>
clickMeatballItem
(
"
accented
"
)
)
;
is
(
getPseudoLocale
(
)
"
"
"
Disabled
the
accented
pseudo
-
locale
.
"
)
;
await
ToolboxTask
.
spawn
(
null
(
)
=
>
clickMeatballItem
(
"
bidi
"
)
)
;
is
(
getPseudoLocale
(
)
"
bidi
"
"
Enabled
the
bidi
pseudo
-
locale
.
"
)
;
await
ToolboxTask
.
spawn
(
null
(
)
=
>
clickMeatballItem
(
"
bidi
"
)
)
;
is
(
getPseudoLocale
(
)
"
"
"
Disabled
the
bidi
pseudo
-
locale
.
"
)
;
await
ToolboxTask
.
spawn
(
null
(
)
=
>
clickMeatballItem
(
"
bidi
"
)
)
;
is
(
getPseudoLocale
(
)
"
bidi
"
"
Enabled
the
bidi
before
closing
.
"
)
;
await
ToolboxTask
.
destroy
(
)
;
is
(
getPseudoLocale
(
)
"
"
"
After
closing
the
pseudo
-
locale
is
disabled
.
"
)
;
}
)
;
function
getPseudoLocale
(
)
{
return
Services
.
prefs
.
getCharPref
(
"
intl
.
l10n
.
pseudo
"
)
;
}
async
function
clickMeatballItem
(
type
)
{
const
onPopupShown
=
new
Promise
(
resolve
=
>
{
gToolbox
.
doc
.
addEventListener
(
"
popupshown
"
resolve
{
once
:
true
}
)
;
}
)
;
dump
(
Opening
the
meatball
menu
in
the
browser
toolbox
.
\
n
)
;
gToolbox
.
doc
.
getElementById
(
"
toolbox
-
meatball
-
menu
-
button
"
)
.
click
(
)
;
await
onPopupShown
;
const
menuItem
=
gToolbox
.
doc
.
getElementById
(
"
toolbox
-
meatball
-
menu
-
pseudo
-
locale
-
"
+
type
)
;
dump
(
Clicking
the
meatball
menu
item
:
"
{
type
}
"
.
\
n
)
;
const
checked
=
menuItem
.
getAttribute
(
"
aria
-
checked
"
)
;
menuItem
.
click
(
)
;
dump
(
"
Wait
for
the
new
setting
to
be
applied
by
waiting
for
the
UI
to
be
updated
after
the
action
is
done
\
n
"
)
;
await
waitUntil
(
(
)
=
>
menuItem
.
getAttribute
(
"
aria
-
checked
"
)
!
=
checked
)
;
}
