"
use
strict
"
;
const
BROWSER_TOOLBOX_WINDOW_URL
=
"
chrome
:
/
/
devtools
/
content
/
framework
/
browser
-
toolbox
/
window
.
html
"
;
const
CHROME_DEBUGGER_PROFILE_NAME
=
"
chrome_debugger_profile
"
;
const
{
require
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Subprocess
"
"
resource
:
/
/
gre
/
modules
/
Subprocess
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
Telemetry
"
function
(
)
{
return
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
EventEmitter
"
function
(
)
{
return
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
}
)
;
const
Services
=
require
(
"
Services
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
BrowserToolboxLauncher
"
]
;
var
processes
=
new
Set
(
)
;
this
.
BrowserToolboxLauncher
=
function
BrowserToolboxLauncher
(
onClose
onRun
overwritePreferences
binaryPath
)
{
const
emitter
=
new
EventEmitter
(
)
;
this
.
on
=
emitter
.
on
.
bind
(
emitter
)
;
this
.
off
=
emitter
.
off
.
bind
(
emitter
)
;
this
.
once
=
emitter
.
once
.
bind
(
emitter
)
;
this
.
emit
=
function
(
.
.
.
args
)
{
emitter
.
emit
(
.
.
.
args
)
;
BrowserToolboxLauncher
.
emit
(
.
.
.
args
)
;
}
;
if
(
onClose
)
{
this
.
once
(
"
close
"
onClose
)
;
}
if
(
onRun
)
{
this
.
once
(
"
run
"
onRun
)
;
}
this
.
_telemetry
=
new
Telemetry
(
)
;
this
.
close
=
this
.
close
.
bind
(
this
)
;
Services
.
obs
.
addObserver
(
this
.
close
"
quit
-
application
"
)
;
this
.
_initServer
(
)
;
this
.
_initProfile
(
overwritePreferences
)
;
this
.
_create
(
binaryPath
)
;
processes
.
add
(
this
)
;
}
;
EventEmitter
.
decorate
(
BrowserToolboxLauncher
)
;
BrowserToolboxLauncher
.
init
=
function
(
onClose
onRun
overwritePreferences
binaryPath
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
chrome
.
enabled
"
)
|
|
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
remote
-
enabled
"
)
)
{
console
.
error
(
"
Could
not
start
Browser
Toolbox
you
need
to
enable
it
.
"
)
;
return
null
;
}
return
new
BrowserToolboxLauncher
(
onClose
onRun
overwritePreferences
binaryPath
)
;
}
;
BrowserToolboxLauncher
.
getBrowserToolboxSessionState
=
function
(
)
{
return
processes
.
size
!
=
=
0
;
}
;
BrowserToolboxLauncher
.
prototype
=
{
_initServer
:
function
(
)
{
if
(
this
.
debuggerServer
)
{
dumpn
(
"
The
chrome
toolbox
server
is
already
running
.
"
)
;
return
;
}
dumpn
(
"
Initializing
the
chrome
toolbox
server
.
"
)
;
this
.
loader
=
new
DevToolsLoader
(
{
invisibleToDebugger
:
true
}
)
;
const
{
DebuggerServer
}
=
this
.
loader
.
require
(
"
devtools
/
server
/
debugger
-
server
"
)
;
const
{
SocketListener
}
=
this
.
loader
.
require
(
"
devtools
/
shared
/
security
/
socket
"
)
;
this
.
debuggerServer
=
DebuggerServer
;
dumpn
(
"
Created
a
separate
loader
instance
for
the
DebuggerServer
.
"
)
;
this
.
debuggerServer
.
init
(
)
;
this
.
debuggerServer
.
registerAllActors
(
)
;
this
.
debuggerServer
.
allowChromeProcess
=
true
;
dumpn
(
"
initialized
and
added
the
browser
actors
for
the
DebuggerServer
.
"
)
;
const
chromeDebuggingWebSocket
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
chrome
-
debugging
-
websocket
"
)
;
const
socketOptions
=
{
portOrPath
:
-
1
webSocket
:
chromeDebuggingWebSocket
}
;
const
listener
=
new
SocketListener
(
this
.
debuggerServer
socketOptions
)
;
listener
.
open
(
)
;
this
.
listener
=
listener
;
this
.
port
=
listener
.
port
;
if
(
!
this
.
port
)
{
throw
new
Error
(
"
No
debugger
server
port
"
)
;
}
dumpn
(
"
Finished
initializing
the
chrome
toolbox
server
.
"
)
;
dump
(
Debugger
Server
for
Browser
Toolbox
listening
on
port
:
{
this
.
port
}
\
n
)
;
}
_initProfile
(
overwritePreferences
)
{
dumpn
(
"
Initializing
the
chrome
toolbox
user
profile
.
"
)
;
const
debuggingProfileDir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
debuggingProfileDir
.
append
(
CHROME_DEBUGGER_PROFILE_NAME
)
;
try
{
debuggingProfileDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
}
catch
(
ex
)
{
if
(
ex
.
result
=
=
=
Cr
.
NS_ERROR_FILE_ALREADY_EXISTS
)
{
if
(
!
overwritePreferences
)
{
this
.
_dbgProfilePath
=
debuggingProfileDir
.
path
;
return
;
}
}
else
{
dumpn
(
"
Error
trying
to
create
a
profile
directory
failing
.
"
)
;
dumpn
(
"
Error
:
"
+
(
ex
.
message
|
|
ex
)
)
;
return
;
}
}
this
.
_dbgProfilePath
=
debuggingProfileDir
.
path
;
const
prefsFile
=
debuggingProfileDir
.
clone
(
)
;
prefsFile
.
append
(
"
prefs
.
js
"
)
;
Services
.
prefs
.
savePrefFile
(
prefsFile
)
;
dumpn
(
"
Finished
creating
the
chrome
toolbox
user
profile
at
:
"
+
this
.
_dbgProfilePath
)
;
}
_create
:
function
(
binaryPath
)
{
dumpn
(
"
Initializing
chrome
debugging
process
.
"
)
;
let
command
=
Services
.
dirsvc
.
get
(
"
XREExeF
"
Ci
.
nsIFile
)
.
path
;
let
profilePath
=
this
.
_dbgProfilePath
;
if
(
binaryPath
)
{
command
=
binaryPath
;
profilePath
=
FileUtils
.
getDir
(
"
TmpD
"
[
"
browserToolboxProfile
"
]
true
)
.
path
;
}
dumpn
(
"
Running
chrome
debugging
process
.
"
)
;
const
args
=
[
"
-
no
-
remote
"
"
-
foreground
"
"
-
profile
"
profilePath
"
-
chrome
"
BROWSER_TOOLBOX_WINDOW_URL
]
;
const
isBrowserToolboxFission
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
browsertoolbox
.
fission
"
false
)
;
const
environment
=
{
MOZ_BROWSER_TOOLBOX_FISSION_PREF
:
isBrowserToolboxFission
?
"
1
"
:
"
0
"
MOZ_DISABLE_SAFE_MODE_KEY
:
"
1
"
MOZ_BROWSER_TOOLBOX_PORT
:
String
(
this
.
port
)
}
;
if
(
!
AppConstants
.
MOZILLA_OFFICIAL
)
{
args
.
push
(
"
-
purgecaches
"
)
;
}
dump
(
Starting
Browser
Toolbox
{
command
}
{
args
.
join
(
"
"
)
}
\
n
)
;
this
.
_dbgProcessPromise
=
Subprocess
.
call
(
{
command
arguments
:
args
environmentAppend
:
true
stderr
:
"
stdout
"
environment
}
)
.
then
(
proc
=
>
{
this
.
_dbgProcess
=
proc
;
this
.
_telemetry
.
toolOpened
(
"
jsbrowserdebugger
"
-
1
this
)
;
dumpn
(
"
Chrome
toolbox
is
now
running
.
.
.
"
)
;
this
.
emit
(
"
run
"
this
)
;
proc
.
stdin
.
close
(
)
;
const
dumpPipe
=
async
pipe
=
>
{
let
data
=
await
pipe
.
readString
(
)
;
while
(
data
)
{
dump
(
data
)
;
data
=
await
pipe
.
readString
(
)
;
}
}
;
dumpPipe
(
proc
.
stdout
)
;
proc
.
wait
(
)
.
then
(
(
)
=
>
this
.
close
(
)
)
;
return
proc
;
}
err
=
>
{
console
.
log
(
Error
loading
Browser
Toolbox
:
{
command
}
{
args
.
join
(
"
"
)
}
err
)
;
}
)
;
}
close
:
async
function
(
)
{
if
(
this
.
closed
)
{
return
;
}
this
.
closed
=
true
;
dumpn
(
"
Cleaning
up
the
chrome
debugging
process
.
"
)
;
Services
.
obs
.
removeObserver
(
this
.
close
"
quit
-
application
"
)
;
this
.
_dbgProcess
.
stdout
.
close
(
)
;
await
this
.
_dbgProcess
.
kill
(
)
;
this
.
_telemetry
.
toolClosed
(
"
jsbrowserdebugger
"
-
1
this
)
;
if
(
this
.
listener
)
{
this
.
listener
.
close
(
)
;
}
if
(
this
.
debuggerServer
)
{
this
.
debuggerServer
.
destroy
(
)
;
this
.
debuggerServer
=
null
;
}
dumpn
(
"
Chrome
toolbox
is
now
closed
.
.
.
"
)
;
this
.
emit
(
"
close
"
this
)
;
processes
.
delete
(
this
)
;
this
.
_dbgProcess
=
null
;
if
(
this
.
loader
)
{
this
.
loader
.
destroy
(
)
;
}
this
.
loader
=
null
;
this
.
_telemetry
=
null
;
}
}
;
function
dumpn
(
str
)
{
if
(
wantLogging
)
{
dump
(
"
DBG
-
FRONTEND
:
"
+
str
+
"
\
n
"
)
;
}
}
var
wantLogging
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
log
"
)
;
Services
.
prefs
.
addObserver
(
"
devtools
.
debugger
.
log
"
{
observe
:
(
.
.
.
args
)
=
>
{
wantLogging
=
Services
.
prefs
.
getBoolPref
(
args
.
pop
(
)
)
;
}
}
)
;
