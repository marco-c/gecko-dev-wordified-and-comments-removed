"
use
strict
"
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
assert
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
function
SourceLocationController
(
target
)
{
this
.
target
=
target
;
this
.
locations
=
new
Set
(
)
;
this
.
_onSourceUpdated
=
this
.
_onSourceUpdated
.
bind
(
this
)
;
this
.
reset
=
this
.
reset
.
bind
(
this
)
;
this
.
destroy
=
this
.
destroy
.
bind
(
this
)
;
target
.
on
(
"
source
-
updated
"
this
.
_onSourceUpdated
)
;
target
.
on
(
"
navigate
"
this
.
reset
)
;
target
.
on
(
"
will
-
navigate
"
this
.
reset
)
;
target
.
on
(
"
close
"
this
.
destroy
)
;
}
SourceLocationController
.
prototype
.
reset
=
function
(
)
{
this
.
locations
.
clear
(
)
;
}
;
SourceLocationController
.
prototype
.
destroy
=
function
(
)
{
this
.
locations
.
clear
(
)
;
this
.
target
.
off
(
"
source
-
updated
"
this
.
_onSourceUpdated
)
;
this
.
target
.
off
(
"
navigate
"
this
.
reset
)
;
this
.
target
.
off
(
"
will
-
navigate
"
this
.
reset
)
;
this
.
target
.
off
(
"
close
"
this
.
destroy
)
;
this
.
target
=
this
.
locations
=
null
;
}
;
SourceLocationController
.
prototype
.
bindLocation
=
function
(
location
callback
)
{
assert
(
location
.
url
"
Location
must
have
a
url
.
"
)
;
assert
(
location
.
line
"
Location
must
have
a
line
.
"
)
;
this
.
locations
.
add
(
{
location
callback
}
)
;
}
;
SourceLocationController
.
prototype
.
_onSourceUpdated
=
function
(
_
sourceEvent
)
{
let
{
type
source
}
=
sourceEvent
;
if
(
!
source
.
url
|
|
type
=
=
=
"
newSource
"
&
&
!
source
.
isSourceMapped
)
{
return
;
}
for
(
let
locationItem
of
this
.
locations
)
{
if
(
isSourceRelated
(
locationItem
.
location
source
)
)
{
this
.
_updateSource
(
locationItem
)
;
}
}
}
;
SourceLocationController
.
prototype
.
_updateSource
=
Task
.
async
(
function
*
(
locationItem
)
{
let
newLocation
=
yield
resolveLocation
(
this
.
target
locationItem
.
location
)
;
if
(
newLocation
)
{
let
previousLocation
=
Object
.
assign
(
{
}
locationItem
.
location
)
;
Object
.
assign
(
locationItem
.
location
newLocation
)
;
locationItem
.
callback
(
previousLocation
newLocation
)
;
}
}
)
;
function
resolveLocation
(
target
location
)
{
return
Task
.
spawn
(
function
*
(
)
{
let
newLocation
=
yield
target
.
resolveLocation
(
{
url
:
location
.
url
line
:
location
.
line
column
:
location
.
column
|
|
Infinity
}
)
;
if
(
newLocation
.
error
)
{
return
null
;
}
return
newLocation
;
}
)
;
}
function
isSourceRelated
(
location
source
)
{
return
source
.
generatedUrl
=
=
=
location
.
url
|
|
source
.
url
=
=
=
location
.
url
;
}
exports
.
SourceLocationController
=
SourceLocationController
;
exports
.
resolveLocation
=
resolveLocation
;
exports
.
isSourceRelated
=
isSourceRelated
;
