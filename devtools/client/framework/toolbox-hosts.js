"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
promise
=
require
(
"
promise
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
DOMHelpers
}
=
require
(
"
devtools
/
shared
/
dom
-
helpers
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevToolsBrowser
"
"
devtools
/
client
/
framework
/
devtools
-
browser
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
true
)
;
const
MIN_PAGE_SIZE
=
25
;
function
BottomHost
(
hostTab
)
{
this
.
hostTab
=
hostTab
;
EventEmitter
.
decorate
(
this
)
;
}
BottomHost
.
prototype
=
{
type
:
"
bottom
"
heightPref
:
"
devtools
.
toolbox
.
footer
.
height
"
create
:
async
function
(
)
{
await
gDevToolsBrowser
.
loadBrowserStyleSheet
(
this
.
hostTab
.
ownerGlobal
)
;
const
gBrowser
=
this
.
hostTab
.
ownerDocument
.
defaultView
.
gBrowser
;
const
ownerDocument
=
gBrowser
.
ownerDocument
;
this
.
_browserContainer
=
gBrowser
.
getBrowserContainer
(
this
.
hostTab
.
linkedBrowser
)
;
this
.
_splitter
=
ownerDocument
.
createXULElement
(
"
splitter
"
)
;
this
.
_splitter
.
setAttribute
(
"
class
"
"
devtools
-
horizontal
-
splitter
"
)
;
this
.
_splitter
.
setAttribute
(
"
resizebefore
"
"
flex
"
)
;
this
.
frame
=
createDevToolsFrame
(
ownerDocument
"
devtools
-
toolbox
-
bottom
-
iframe
"
)
;
this
.
frame
.
height
=
Math
.
min
(
Services
.
prefs
.
getIntPref
(
this
.
heightPref
)
this
.
_browserContainer
.
clientHeight
-
MIN_PAGE_SIZE
)
;
this
.
_browserContainer
.
appendChild
(
this
.
_splitter
)
;
this
.
_browserContainer
.
appendChild
(
this
.
frame
)
;
this
.
frame
.
setAttribute
(
"
src
"
"
about
:
blank
"
)
;
const
frame
=
await
new
Promise
(
resolve
=
>
{
const
frameLoad
=
(
)
=
>
{
this
.
emit
(
"
ready
"
this
.
frame
)
;
resolve
(
this
.
frame
)
;
}
;
DOMHelpers
.
onceDOMReady
(
this
.
frame
.
contentWindow
frameLoad
)
;
focusTab
(
this
.
hostTab
)
;
}
)
;
return
frame
;
}
raise
:
function
(
)
{
focusTab
(
this
.
hostTab
)
;
}
setTitle
:
function
(
)
{
}
destroy
:
function
(
)
{
if
(
!
this
.
_destroyed
)
{
this
.
_destroyed
=
true
;
Services
.
prefs
.
setIntPref
(
this
.
heightPref
this
.
frame
.
height
)
;
this
.
_browserContainer
.
removeChild
(
this
.
_splitter
)
;
this
.
_browserContainer
.
removeChild
(
this
.
frame
)
;
this
.
frame
=
null
;
this
.
_browserContainer
=
null
;
this
.
_splitter
=
null
;
}
return
promise
.
resolve
(
null
)
;
}
}
;
class
SidebarHost
{
constructor
(
hostTab
type
)
{
this
.
hostTab
=
hostTab
;
this
.
type
=
type
;
this
.
widthPref
=
"
devtools
.
toolbox
.
sidebar
.
width
"
;
EventEmitter
.
decorate
(
this
)
;
}
async
create
(
)
{
await
gDevToolsBrowser
.
loadBrowserStyleSheet
(
this
.
hostTab
.
ownerGlobal
)
;
const
gBrowser
=
this
.
hostTab
.
ownerDocument
.
defaultView
.
gBrowser
;
const
ownerDocument
=
gBrowser
.
ownerDocument
;
this
.
_browserContainer
=
gBrowser
.
getBrowserContainer
(
this
.
hostTab
.
linkedBrowser
)
;
this
.
_browserPanel
=
gBrowser
.
getPanel
(
this
.
hostTab
.
linkedBrowser
)
;
this
.
_splitter
=
ownerDocument
.
createXULElement
(
"
splitter
"
)
;
this
.
_splitter
.
setAttribute
(
"
class
"
"
devtools
-
side
-
splitter
"
)
;
this
.
frame
=
createDevToolsFrame
(
ownerDocument
"
devtools
-
toolbox
-
side
-
iframe
"
)
;
this
.
frame
.
width
=
Math
.
min
(
Services
.
prefs
.
getIntPref
(
this
.
widthPref
)
this
.
_browserPanel
.
clientWidth
-
MIN_PAGE_SIZE
)
;
const
topWindow
=
this
.
hostTab
.
ownerDocument
.
defaultView
.
top
;
const
topDoc
=
topWindow
.
document
.
documentElement
;
const
isLTR
=
topWindow
.
getComputedStyle
(
topDoc
)
.
direction
=
=
=
"
ltr
"
;
if
(
(
isLTR
&
&
this
.
type
=
=
"
right
"
)
|
|
(
!
isLTR
&
&
this
.
type
=
=
"
left
"
)
)
{
this
.
_browserPanel
.
appendChild
(
this
.
_splitter
)
;
this
.
_browserPanel
.
appendChild
(
this
.
frame
)
;
}
else
{
this
.
_browserPanel
.
insertBefore
(
this
.
frame
this
.
_browserContainer
)
;
this
.
_browserPanel
.
insertBefore
(
this
.
_splitter
this
.
_browserContainer
)
;
}
this
.
frame
.
setAttribute
(
"
src
"
"
about
:
blank
"
)
;
const
frame
=
await
new
Promise
(
resolve
=
>
{
const
frameLoad
=
(
)
=
>
{
this
.
emit
(
"
ready
"
this
.
frame
)
;
resolve
(
this
.
frame
)
;
}
;
DOMHelpers
.
onceDOMReady
(
this
.
frame
.
contentWindow
frameLoad
)
;
focusTab
(
this
.
hostTab
)
;
}
)
;
return
frame
;
}
raise
(
)
{
focusTab
(
this
.
hostTab
)
;
}
setTitle
(
)
{
}
destroy
(
)
{
if
(
!
this
.
_destroyed
)
{
this
.
_destroyed
=
true
;
Services
.
prefs
.
setIntPref
(
this
.
widthPref
this
.
frame
.
width
)
;
this
.
_browserPanel
.
removeChild
(
this
.
_splitter
)
;
this
.
_browserPanel
.
removeChild
(
this
.
frame
)
;
}
return
promise
.
resolve
(
null
)
;
}
}
class
LeftHost
extends
SidebarHost
{
constructor
(
hostTab
)
{
super
(
hostTab
"
left
"
)
;
}
}
class
RightHost
extends
SidebarHost
{
constructor
(
hostTab
)
{
super
(
hostTab
"
right
"
)
;
}
}
function
WindowHost
(
hostTab
)
{
this
.
_boundUnload
=
this
.
_boundUnload
.
bind
(
this
)
;
this
.
hostTab
=
hostTab
;
EventEmitter
.
decorate
(
this
)
;
}
WindowHost
.
prototype
=
{
type
:
"
window
"
WINDOW_URL
:
"
chrome
:
/
/
devtools
/
content
/
framework
/
toolbox
-
window
.
xhtml
"
create
:
function
(
)
{
return
new
Promise
(
resolve
=
>
{
let
flags
=
"
chrome
centerscreen
resizable
dialog
=
no
"
;
if
(
this
.
hostTab
&
&
PrivateBrowsingUtils
.
isWindowPrivate
(
this
.
hostTab
.
ownerGlobal
)
)
{
flags
+
=
"
private
"
;
}
const
win
=
Services
.
ww
.
openWindow
(
null
this
.
WINDOW_URL
"
_blank
"
flags
null
)
;
const
frameLoad
=
(
)
=
>
{
win
.
removeEventListener
(
"
load
"
frameLoad
true
)
;
win
.
focus
(
)
;
this
.
frame
=
createDevToolsFrame
(
win
.
document
"
devtools
-
toolbox
-
window
-
iframe
"
)
;
win
.
document
.
getElementById
(
"
devtools
-
toolbox
-
window
"
)
.
appendChild
(
this
.
frame
)
;
this
.
frame
.
setAttribute
(
"
forceOwnRefreshDriver
"
"
"
)
;
this
.
frame
.
setAttribute
(
"
src
"
"
about
:
blank
"
)
;
resolve
(
this
.
frame
)
;
}
;
win
.
addEventListener
(
"
load
"
frameLoad
true
)
;
win
.
addEventListener
(
"
unload
"
this
.
_boundUnload
)
;
this
.
_window
=
win
;
}
)
;
}
_boundUnload
:
function
(
event
)
{
if
(
event
.
target
.
location
!
=
this
.
WINDOW_URL
)
{
return
;
}
this
.
_window
.
removeEventListener
(
"
unload
"
this
.
_boundUnload
)
;
this
.
emit
(
"
window
-
closed
"
)
;
}
raise
:
function
(
)
{
this
.
_window
.
focus
(
)
;
}
setTitle
:
function
(
title
)
{
this
.
_window
.
document
.
title
=
title
;
}
destroy
:
function
(
)
{
if
(
!
this
.
_destroyed
)
{
this
.
_destroyed
=
true
;
this
.
_window
.
removeEventListener
(
"
unload
"
this
.
_boundUnload
)
;
this
.
_window
.
close
(
)
;
}
return
promise
.
resolve
(
null
)
;
}
}
;
function
BrowserToolboxHost
(
hostTab
options
)
{
this
.
frame
=
options
.
customIframe
;
this
.
uid
=
options
.
uid
;
EventEmitter
.
decorate
(
this
)
;
}
BrowserToolboxHost
.
prototype
=
{
type
:
"
browsertoolbox
"
_sendMessageToTopWindow
:
function
(
msg
data
)
{
const
topWindow
=
this
.
frame
.
ownerDocument
.
defaultView
;
if
(
!
topWindow
)
{
return
;
}
const
message
=
{
name
:
"
toolbox
-
"
+
msg
uid
:
this
.
uid
data
}
;
topWindow
.
postMessage
(
message
"
*
"
)
;
}
create
:
function
(
)
{
return
promise
.
resolve
(
this
.
frame
)
;
}
raise
:
function
(
)
{
this
.
_sendMessageToTopWindow
(
"
raise
"
)
;
}
setTitle
:
function
(
title
)
{
this
.
_sendMessageToTopWindow
(
"
title
"
{
value
:
title
}
)
;
}
destroy
:
function
(
)
{
if
(
!
this
.
_destroyed
)
{
this
.
_destroyed
=
true
;
this
.
_sendMessageToTopWindow
(
"
close
"
)
;
}
return
promise
.
resolve
(
null
)
;
}
}
;
function
PageHost
(
hostTab
options
)
{
this
.
frame
=
options
.
customIframe
;
}
PageHost
.
prototype
=
{
type
:
"
page
"
create
:
function
(
)
{
return
promise
.
resolve
(
this
.
frame
)
;
}
raise
:
function
(
)
{
}
setTitle
:
function
(
title
)
{
}
destroy
:
function
(
)
{
return
promise
.
resolve
(
null
)
;
}
}
;
function
focusTab
(
tab
)
{
const
browserWindow
=
tab
.
ownerDocument
.
defaultView
;
browserWindow
.
focus
(
)
;
browserWindow
.
gBrowser
.
selectedTab
=
tab
;
}
function
createDevToolsFrame
(
doc
className
)
{
let
frame
;
if
(
Services
.
prefs
.
getBoolPref
(
"
devtools
.
toolbox
.
content
-
frame
"
false
)
)
{
frame
=
doc
.
createXULElement
(
"
browser
"
)
;
frame
.
setAttribute
(
"
type
"
"
content
"
)
;
}
else
{
frame
=
doc
.
createXULElement
(
"
iframe
"
)
;
}
frame
.
flex
=
1
;
frame
.
className
=
className
;
frame
.
tooltip
=
"
aHTMLTooltip
"
;
return
frame
;
}
exports
.
Hosts
=
{
bottom
:
BottomHost
left
:
LeftHost
right
:
RightHost
window
:
WindowHost
browsertoolbox
:
BrowserToolboxHost
page
:
PageHost
}
;
