"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
toolbox
.
properties
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
WIDTH_CHEVRON_AND_MEATBALL
=
50
;
const
WIDTH_CHEVRON_AND_MEATBALL_AND_CLOSE
=
74
;
const
ZOOM_VALUE_PREF
=
"
devtools
.
toolbox
.
zoomValue
"
;
loader
.
lazyRequireGetter
(
this
"
Toolbox
"
"
devtools
/
client
/
framework
/
toolbox
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
Hosts
"
"
devtools
/
client
/
framework
/
toolbox
-
hosts
"
true
)
;
const
LAST_HOST
=
"
devtools
.
toolbox
.
host
"
;
const
PREVIOUS_HOST
=
"
devtools
.
toolbox
.
previousHost
"
;
let
ID_COUNTER
=
1
;
function
ToolboxHostManager
(
target
hostType
hostOptions
)
{
this
.
target
=
target
;
this
.
frameId
=
ID_COUNTER
+
+
;
if
(
!
hostType
)
{
hostType
=
Services
.
prefs
.
getCharPref
(
LAST_HOST
)
;
if
(
!
Hosts
[
hostType
]
)
{
Services
.
prefs
.
clearUserPref
(
LAST_HOST
)
;
hostType
=
Services
.
prefs
.
getCharPref
(
LAST_HOST
)
;
}
}
this
.
host
=
this
.
createHost
(
hostType
hostOptions
)
;
this
.
hostType
=
hostType
;
this
.
telemetry
=
new
Telemetry
(
)
;
this
.
setMinWidthWithZoom
=
this
.
setMinWidthWithZoom
.
bind
(
this
)
;
Services
.
prefs
.
addObserver
(
ZOOM_VALUE_PREF
this
.
setMinWidthWithZoom
)
;
}
ToolboxHostManager
.
prototype
=
{
async
create
(
toolId
)
{
await
this
.
host
.
create
(
)
;
this
.
host
.
frame
.
setAttribute
(
"
aria
-
label
"
L10N
.
getStr
(
"
toolbox
.
label
"
)
)
;
this
.
host
.
frame
.
ownerDocument
.
defaultView
.
addEventListener
(
"
message
"
this
)
;
this
.
host
.
frame
.
addEventListener
(
"
unload
"
this
true
)
;
const
msSinceProcessStart
=
parseInt
(
this
.
telemetry
.
msSinceProcessStart
(
)
10
)
;
const
toolbox
=
new
Toolbox
(
this
.
target
toolId
this
.
host
.
type
this
.
host
.
frame
.
contentWindow
this
.
frameId
msSinceProcessStart
)
;
const
location
=
this
.
host
.
frame
.
contentWindow
.
location
;
if
(
!
location
.
href
.
startsWith
(
"
about
:
devtools
-
toolbox
"
)
)
{
this
.
host
.
frame
.
setAttribute
(
"
src
"
"
about
:
devtools
-
toolbox
"
)
;
}
this
.
host
.
frame
.
setAttribute
(
"
session_id
"
msSinceProcessStart
)
;
this
.
setMinWidthWithZoom
(
)
;
return
toolbox
;
}
setMinWidthWithZoom
:
function
(
)
{
const
zoomValue
=
parseFloat
(
Services
.
prefs
.
getCharPref
(
ZOOM_VALUE_PREF
)
)
;
if
(
isNaN
(
zoomValue
)
)
{
return
;
}
if
(
this
.
hostType
=
=
=
Toolbox
.
HostType
.
LEFT
|
|
this
.
hostType
=
=
=
Toolbox
.
HostType
.
RIGHT
)
{
this
.
host
.
frame
.
minWidth
=
WIDTH_CHEVRON_AND_MEATBALL_AND_CLOSE
*
zoomValue
;
}
else
if
(
this
.
hostType
=
=
=
Toolbox
.
HostType
.
WINDOW
|
|
this
.
hostType
=
=
=
Toolbox
.
HostType
.
CUSTOM
)
{
this
.
host
.
frame
.
minWidth
=
WIDTH_CHEVRON_AND_MEATBALL
*
zoomValue
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
message
"
:
this
.
onMessage
(
event
)
;
break
;
case
"
unload
"
:
if
(
!
event
.
target
.
location
.
href
.
startsWith
(
"
about
:
devtools
-
toolbox
"
)
)
{
break
;
}
DevToolsUtils
.
executeSoon
(
(
)
=
>
{
this
.
destroy
(
)
;
}
)
;
break
;
}
}
onMessage
(
event
)
{
if
(
!
event
.
data
)
{
return
;
}
const
msg
=
event
.
data
;
if
(
msg
.
frameId
!
=
this
.
frameId
)
{
return
;
}
switch
(
msg
.
name
)
{
case
"
switch
-
host
"
:
this
.
switchHost
(
msg
.
hostType
)
;
break
;
case
"
raise
-
host
"
:
this
.
host
.
raise
(
)
;
break
;
case
"
set
-
host
-
title
"
:
this
.
host
.
setTitle
(
msg
.
title
)
;
break
;
}
}
postMessage
(
data
)
{
const
window
=
this
.
host
.
frame
.
contentWindow
;
window
.
postMessage
(
data
"
*
"
)
;
}
destroy
(
)
{
Services
.
prefs
.
removeObserver
(
ZOOM_VALUE_PREF
this
.
setMinWidthWithZoom
)
;
this
.
destroyHost
(
)
;
this
.
host
=
null
;
this
.
hostType
=
null
;
this
.
target
=
null
;
}
createHost
(
hostType
options
)
{
if
(
!
Hosts
[
hostType
]
)
{
throw
new
Error
(
"
Unknown
hostType
:
"
+
hostType
)
;
}
const
newHost
=
new
Hosts
[
hostType
]
(
this
.
target
.
tab
options
)
;
return
newHost
;
}
async
switchHost
(
hostType
)
{
if
(
hostType
=
=
"
previous
"
)
{
hostType
=
Services
.
prefs
.
getCharPref
(
PREVIOUS_HOST
)
;
if
(
hostType
=
=
=
this
.
hostType
)
{
if
(
hostType
=
=
=
Toolbox
.
HostType
.
BOTTOM
)
{
hostType
=
Toolbox
.
HostType
.
RIGHT
;
}
else
{
hostType
=
Toolbox
.
HostType
.
BOTTOM
;
}
}
}
const
iframe
=
this
.
host
.
frame
;
const
newHost
=
this
.
createHost
(
hostType
)
;
const
newIframe
=
await
newHost
.
create
(
)
;
newIframe
.
swapFrameLoaders
(
iframe
)
;
this
.
destroyHost
(
)
;
if
(
this
.
hostType
!
=
Toolbox
.
HostType
.
CUSTOM
)
{
Services
.
prefs
.
setCharPref
(
PREVIOUS_HOST
this
.
hostType
)
;
}
this
.
host
=
newHost
;
this
.
hostType
=
hostType
;
this
.
host
.
setTitle
(
this
.
host
.
frame
.
contentWindow
.
document
.
title
)
;
this
.
host
.
frame
.
ownerDocument
.
defaultView
.
addEventListener
(
"
message
"
this
)
;
this
.
host
.
frame
.
addEventListener
(
"
unload
"
this
true
)
;
this
.
setMinWidthWithZoom
(
)
;
if
(
hostType
!
=
Toolbox
.
HostType
.
CUSTOM
)
{
Services
.
prefs
.
setCharPref
(
LAST_HOST
hostType
)
;
}
this
.
postMessage
(
{
name
:
"
switched
-
host
"
hostType
}
)
;
}
destroyHost
(
)
{
if
(
this
.
host
.
frame
.
ownerDocument
.
defaultView
)
{
this
.
host
.
frame
.
ownerDocument
.
defaultView
.
removeEventListener
(
"
message
"
this
)
;
}
this
.
host
.
frame
.
removeEventListener
(
"
unload
"
this
true
)
;
return
this
.
host
.
destroy
(
)
;
}
}
;
exports
.
ToolboxHostManager
=
ToolboxHostManager
;
