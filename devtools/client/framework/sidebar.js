"
use
strict
"
;
var
Services
=
require
(
"
Services
"
)
;
var
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
var
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
toolbox
.
properties
"
)
;
function
ToolSidebar
(
tabbox
panel
uid
options
=
{
}
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_tabbox
=
tabbox
;
this
.
_uid
=
uid
;
this
.
_panelDoc
=
this
.
_tabbox
.
ownerDocument
;
this
.
_toolPanel
=
panel
;
this
.
_options
=
options
;
this
.
_onTabBoxOverflow
=
this
.
_onTabBoxOverflow
.
bind
(
this
)
;
this
.
_onTabBoxUnderflow
=
this
.
_onTabBoxUnderflow
.
bind
(
this
)
;
const
width
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
toolsidebar
-
width
.
"
+
this
.
_uid
undefined
)
;
if
(
width
)
{
this
.
_width
=
width
;
}
if
(
!
options
.
disableTelemetry
)
{
this
.
_telemetry
=
new
Telemetry
(
)
;
}
this
.
_tabbox
.
tabpanels
.
addEventListener
(
"
select
"
this
true
)
;
this
.
_tabs
=
new
Map
(
)
;
this
.
addExistingTabs
(
)
;
if
(
this
.
_options
.
hideTabstripe
)
{
this
.
_tabbox
.
setAttribute
(
"
hidetabs
"
"
true
"
)
;
}
if
(
this
.
_options
.
showAllTabsMenu
)
{
this
.
addAllTabsMenu
(
)
;
}
this
.
_toolPanel
.
emit
(
"
sidebar
-
created
"
this
)
;
}
exports
.
ToolSidebar
=
ToolSidebar
;
ToolSidebar
.
prototype
=
{
TAB_ID_PREFIX
:
"
sidebar
-
tab
-
"
TABPANEL_ID_PREFIX
:
"
sidebar
-
panel
-
"
get
toolboxSessionId
(
)
{
const
frameElement
=
this
.
_panelDoc
.
ownerGlobal
.
parent
.
frameElement
;
if
(
frameElement
)
{
return
frameElement
.
getAttribute
(
"
session_id
"
)
;
}
return
-
1
;
}
addAllTabsMenu
:
function
(
)
{
if
(
this
.
_allTabsBtn
)
{
return
;
}
const
tabs
=
this
.
_tabbox
.
tabs
;
const
allTabsContainer
=
this
.
_panelDoc
.
createXULElement
(
"
stack
"
)
;
this
.
_tabbox
.
insertBefore
(
allTabsContainer
tabs
)
;
allTabsContainer
.
appendChild
(
tabs
)
;
tabs
.
setAttribute
(
"
flex
"
"
1
"
)
;
this
.
_allTabsBtn
=
this
.
_panelDoc
.
createXULElement
(
"
toolbarbutton
"
)
;
this
.
_allTabsBtn
.
setAttribute
(
"
class
"
"
devtools
-
sidebar
-
alltabs
"
)
;
this
.
_allTabsBtn
.
setAttribute
(
"
end
"
"
0
"
)
;
this
.
_allTabsBtn
.
setAttribute
(
"
top
"
"
0
"
)
;
this
.
_allTabsBtn
.
setAttribute
(
"
width
"
"
15
"
)
;
this
.
_allTabsBtn
.
setAttribute
(
"
type
"
"
menu
"
)
;
this
.
_allTabsBtn
.
setAttribute
(
"
tooltiptext
"
L10N
.
getStr
(
"
sidebar
.
showAllTabs
.
tooltip
"
)
)
;
this
.
_allTabsBtn
.
setAttribute
(
"
hidden
"
"
true
"
)
;
allTabsContainer
.
appendChild
(
this
.
_allTabsBtn
)
;
const
menuPopup
=
this
.
_panelDoc
.
createXULElement
(
"
menupopup
"
)
;
this
.
_allTabsBtn
.
appendChild
(
menuPopup
)
;
tabs
.
addEventListener
(
"
overflow
"
this
.
_onTabBoxOverflow
)
;
tabs
.
addEventListener
(
"
underflow
"
this
.
_onTabBoxUnderflow
)
;
for
(
const
[
id
tab
]
of
this
.
_tabs
)
{
const
item
=
this
.
_addItemToAllTabsMenu
(
id
tab
{
selected
:
tab
.
hasAttribute
(
"
selected
"
)
}
)
;
if
(
tab
.
hidden
)
{
item
.
hidden
=
true
;
}
}
}
removeAllTabsMenu
:
function
(
)
{
if
(
!
this
.
_allTabsBtn
)
{
return
;
}
const
tabs
=
this
.
_tabbox
.
tabs
;
tabs
.
removeEventListener
(
"
overflow
"
this
.
_onTabBoxOverflow
)
;
tabs
.
removeEventListener
(
"
underflow
"
this
.
_onTabBoxUnderflow
)
;
this
.
_tabbox
.
insertBefore
(
tabs
this
.
_tabbox
.
tabpanels
)
;
this
.
_tabbox
.
querySelector
(
"
stack
"
)
.
remove
(
)
;
this
.
_allTabsBtn
=
null
;
}
_onTabBoxOverflow
:
function
(
)
{
this
.
_allTabsBtn
.
removeAttribute
(
"
hidden
"
)
;
}
_onTabBoxUnderflow
:
function
(
)
{
this
.
_allTabsBtn
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
_addItemToAllTabsMenu
:
function
(
id
tab
options
)
{
if
(
!
this
.
_allTabsBtn
)
{
return
;
}
const
item
=
this
.
_panelDoc
.
createXULElement
(
"
menuitem
"
)
;
const
idPrefix
=
"
sidebar
-
alltabs
-
item
-
"
;
item
.
setAttribute
(
"
id
"
idPrefix
+
id
)
;
item
.
setAttribute
(
"
label
"
tab
.
getAttribute
(
"
label
"
)
)
;
item
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
if
(
options
.
selected
)
{
item
.
setAttribute
(
"
checked
"
true
)
;
}
item
.
setAttribute
(
"
autocheck
"
false
)
;
const
menu
=
this
.
_allTabsBtn
.
querySelector
(
"
menupopup
"
)
;
if
(
options
.
insertBefore
)
{
const
referenceItem
=
menu
.
querySelector
(
#
{
idPrefix
}
{
options
.
insertBefore
}
)
;
menu
.
insertBefore
(
item
referenceItem
)
;
}
else
{
menu
.
appendChild
(
item
)
;
}
item
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
_tabbox
.
selectedTab
=
tab
;
}
)
;
tab
.
allTabsMenuItem
=
item
;
return
item
;
}
addTab
:
function
(
id
url
options
=
{
}
)
{
const
iframe
=
this
.
_panelDoc
.
createXULElement
(
"
iframe
"
)
;
iframe
.
className
=
"
iframe
-
"
+
id
;
iframe
.
setAttribute
(
"
flex
"
"
1
"
)
;
iframe
.
setAttribute
(
"
src
"
url
)
;
iframe
.
tooltip
=
"
aHTMLTooltip
"
;
const
tab
=
this
.
_panelDoc
.
createXULElement
(
"
tab
"
)
;
tab
.
setAttribute
(
"
id
"
this
.
TAB_ID_PREFIX
+
id
)
;
tab
.
setAttribute
(
"
crop
"
"
end
"
)
;
tab
.
setAttribute
(
"
label
"
"
"
)
;
if
(
options
.
insertBefore
)
{
const
referenceTab
=
this
.
getTab
(
options
.
insertBefore
)
;
this
.
_tabbox
.
tabs
.
insertBefore
(
tab
referenceTab
)
;
}
else
{
this
.
_tabbox
.
tabs
.
appendChild
(
tab
)
;
}
const
allTabsItem
=
this
.
_addItemToAllTabsMenu
(
id
tab
options
)
;
const
onIFrameLoaded
=
(
event
)
=
>
{
const
doc
=
event
.
target
;
const
win
=
doc
.
defaultView
;
tab
.
setAttribute
(
"
label
"
doc
.
title
)
;
if
(
allTabsItem
)
{
allTabsItem
.
setAttribute
(
"
label
"
doc
.
title
)
;
}
iframe
.
removeEventListener
(
"
load
"
onIFrameLoaded
true
)
;
if
(
"
setPanel
"
in
win
)
{
win
.
setPanel
(
this
.
_toolPanel
iframe
)
;
}
this
.
emit
(
id
+
"
-
ready
"
)
;
}
;
iframe
.
addEventListener
(
"
load
"
onIFrameLoaded
true
)
;
const
tabpanel
=
this
.
_panelDoc
.
createXULElement
(
"
tabpanel
"
)
;
tabpanel
.
setAttribute
(
"
id
"
this
.
TABPANEL_ID_PREFIX
+
id
)
;
tabpanel
.
appendChild
(
iframe
)
;
if
(
options
.
insertBefore
)
{
const
referenceTabpanel
=
this
.
getTabPanel
(
options
.
insertBefore
)
;
this
.
_tabbox
.
tabpanels
.
insertBefore
(
tabpanel
referenceTabpanel
)
;
}
else
{
this
.
_tabbox
.
tabpanels
.
appendChild
(
tabpanel
)
;
}
this
.
_tooltip
=
this
.
_panelDoc
.
createXULElement
(
"
tooltip
"
)
;
this
.
_tooltip
.
id
=
"
aHTMLTooltip
"
;
tabpanel
.
appendChild
(
this
.
_tooltip
)
;
this
.
_tooltip
.
page
=
true
;
tab
.
linkedPanel
=
this
.
TABPANEL_ID_PREFIX
+
id
;
this
.
_tabs
.
set
(
id
tab
)
;
if
(
options
.
selected
)
{
this
.
_selectTabSoon
(
id
)
;
}
this
.
emit
(
"
new
-
tab
-
registered
"
id
)
;
}
untitledTabsIndex
:
0
addExistingTabs
:
function
(
)
{
const
knownTabs
=
[
.
.
.
this
.
_tabs
.
values
(
)
]
;
for
(
const
tab
of
this
.
_tabbox
.
tabs
.
querySelectorAll
(
"
tab
"
)
)
{
if
(
knownTabs
.
includes
(
tab
)
)
{
continue
;
}
let
id
=
tab
.
getAttribute
(
"
id
"
)
|
|
"
untitled
-
tab
-
"
+
(
this
.
untitledTabsIndex
+
+
)
;
if
(
id
.
startsWith
(
this
.
TAB_ID_PREFIX
)
)
{
id
=
id
.
split
(
this
.
TAB_ID_PREFIX
)
.
pop
(
)
;
}
this
.
_tabs
.
set
(
id
tab
)
;
this
.
emit
(
"
new
-
tab
-
registered
"
id
)
;
}
}
async
removeTab
(
tabId
tabPanelId
)
{
const
tab
=
this
.
getTab
(
tabId
)
;
if
(
!
tab
)
{
return
;
}
const
win
=
this
.
getWindowForTab
(
tabId
)
;
if
(
win
&
&
(
"
destroy
"
in
win
)
)
{
await
win
.
destroy
(
)
;
}
tab
.
remove
(
)
;
const
panel
=
this
.
getTabPanel
(
tabPanelId
|
|
tabId
)
;
if
(
panel
)
{
panel
.
remove
(
)
;
}
this
.
_tabs
.
delete
(
tabId
)
;
this
.
emit
(
"
tab
-
unregistered
"
tabId
)
;
}
toggleTab
:
function
(
isVisible
id
)
{
const
tab
=
this
.
getTab
(
id
)
;
if
(
!
tab
)
{
return
;
}
tab
.
hidden
=
!
isVisible
;
if
(
this
.
_allTabsBtn
)
{
this
.
_allTabsBtn
.
querySelector
(
"
#
sidebar
-
alltabs
-
item
-
"
+
id
)
.
hidden
=
!
isVisible
;
}
}
select
:
function
(
id
)
{
const
tab
=
this
.
getTab
(
id
)
;
if
(
tab
)
{
this
.
_tabbox
.
selectedTab
=
tab
;
}
}
_selectTabSoon
:
function
(
id
)
{
this
.
_panelDoc
.
defaultView
.
setTimeout
(
(
)
=
>
{
this
.
select
(
id
)
;
}
0
)
;
}
getCurrentTabID
:
function
(
)
{
let
currentID
=
null
;
for
(
const
[
id
tab
]
of
this
.
_tabs
)
{
if
(
this
.
_tabbox
.
tabs
.
selectedItem
=
=
tab
)
{
currentID
=
id
;
break
;
}
}
return
currentID
;
}
getTabPanel
:
function
(
id
)
{
return
this
.
_tabbox
.
tabpanels
.
querySelector
(
"
#
"
+
this
.
TABPANEL_ID_PREFIX
+
id
+
"
#
"
+
id
)
;
}
getTab
:
function
(
id
)
{
return
this
.
_tabs
&
&
this
.
_tabs
.
get
(
id
)
;
}
handleEvent
:
function
(
event
)
{
if
(
event
.
type
!
=
=
"
select
"
|
|
this
.
_destroyed
)
{
return
;
}
if
(
this
.
_currentTool
=
=
this
.
getCurrentTabID
(
)
)
{
return
;
}
const
previousTool
=
this
.
_currentTool
;
this
.
_currentTool
=
this
.
getCurrentTabID
(
)
;
if
(
previousTool
)
{
if
(
this
.
_telemetry
)
{
this
.
_telemetry
.
toolClosed
(
previousTool
this
.
toolboxSessionId
this
)
;
}
this
.
emit
(
previousTool
+
"
-
unselected
"
)
;
}
if
(
this
.
_telemetry
)
{
this
.
_telemetry
.
toolOpened
(
this
.
_currentTool
this
.
toolboxSessionId
this
)
;
}
this
.
emit
(
this
.
_currentTool
+
"
-
selected
"
)
;
this
.
emit
(
"
select
"
this
.
_currentTool
)
;
if
(
this
.
_destroyed
)
{
return
;
}
const
tab
=
this
.
_tabbox
.
selectedTab
;
if
(
tab
.
allTabsMenuItem
)
{
for
(
const
otherItem
of
this
.
_allTabsBtn
.
querySelectorAll
(
"
menuitem
"
)
)
{
otherItem
.
removeAttribute
(
"
checked
"
)
;
}
tab
.
allTabsMenuItem
.
setAttribute
(
"
checked
"
true
)
;
}
}
toggle
:
function
(
)
{
if
(
this
.
_tabbox
.
hasAttribute
(
"
hidden
"
)
)
{
this
.
show
(
)
;
}
else
{
this
.
hide
(
)
;
}
}
show
:
function
(
id
)
{
if
(
this
.
_width
)
{
this
.
_tabbox
.
width
=
this
.
_width
;
}
this
.
_tabbox
.
removeAttribute
(
"
hidden
"
)
;
if
(
id
)
{
this
.
_currentTool
=
id
;
if
(
this
.
_telemetry
)
{
this
.
_telemetry
.
toolOpened
(
this
.
_currentTool
this
.
toolboxSessionId
this
)
;
}
this
.
_selectTabSoon
(
id
)
;
}
this
.
emit
(
"
show
"
)
;
}
hide
:
function
(
)
{
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolsidebar
-
width
.
"
+
this
.
_uid
this
.
_tabbox
.
width
)
;
this
.
_tabbox
.
setAttribute
(
"
hidden
"
"
true
"
)
;
this
.
_panelDoc
.
activeElement
.
blur
(
)
;
this
.
emit
(
"
hide
"
)
;
}
getWindowForTab
:
function
(
id
)
{
if
(
!
this
.
_tabs
.
has
(
id
)
)
{
return
null
;
}
const
panel
=
this
.
getTabPanel
(
id
)
;
if
(
!
panel
|
|
!
panel
.
firstChild
|
|
!
panel
.
firstChild
.
contentWindow
)
{
return
;
}
return
panel
.
firstChild
.
contentWindow
;
}
async
destroy
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolsidebar
-
width
.
"
+
this
.
_uid
this
.
_tabbox
.
width
)
;
if
(
this
.
_allTabsBtn
)
{
this
.
removeAllTabsMenu
(
)
;
}
this
.
_tabbox
.
tabpanels
.
removeEventListener
(
"
select
"
this
true
)
;
while
(
this
.
_tabbox
.
tabpanels
&
&
this
.
_tabbox
.
tabpanels
.
hasChildNodes
(
)
)
{
const
panel
=
this
.
_tabbox
.
tabpanels
.
firstChild
;
const
win
=
panel
.
firstChild
.
contentWindow
;
if
(
win
&
&
(
"
destroy
"
in
win
)
)
{
await
win
.
destroy
(
)
;
}
panel
.
remove
(
)
;
}
while
(
this
.
_tabbox
.
tabs
&
&
this
.
_tabbox
.
tabs
.
hasChildNodes
(
)
)
{
this
.
_tabbox
.
tabs
.
firstChild
.
remove
(
)
;
}
if
(
this
.
_currentTool
&
&
this
.
_telemetry
)
{
this
.
_telemetry
.
toolClosed
(
this
.
_currentTool
this
.
toolboxSessionId
this
)
;
}
this
.
_toolPanel
.
emit
(
"
sidebar
-
destroyed
"
this
)
;
this
.
_tabs
=
null
;
this
.
_tabbox
=
null
;
this
.
_panelDoc
=
null
;
this
.
_toolPanel
=
null
;
}
}
;
