"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
async
function
enableServiceWorkerDebugging
(
)
{
await
pushPref
(
"
dom
.
serviceWorkers
.
enabled
"
true
)
;
await
pushPref
(
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
)
;
await
pushPref
(
"
dom
.
ipc
.
processCount
"
1
)
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
}
async
function
enableApplicationPanel
(
)
{
await
enableServiceWorkerDebugging
(
)
;
await
pushPref
(
"
devtools
.
application
.
enabled
"
true
)
;
}
function
getWorkerContainers
(
doc
)
{
return
doc
.
querySelectorAll
(
"
.
service
-
worker
-
container
"
)
;
}
function
navigate
(
target
url
waitForTargetEvent
=
"
navigate
"
)
{
executeSoon
(
(
)
=
>
target
.
activeTab
.
navigateTo
(
url
)
)
;
return
once
(
target
waitForTargetEvent
)
;
}
async
function
openNewTabAndApplicationPanel
(
url
)
{
let
tab
=
await
addTab
(
url
)
;
let
target
=
TargetFactory
.
forTab
(
tab
)
;
await
target
.
makeRemote
(
)
;
let
toolbox
=
await
gDevTools
.
showToolbox
(
target
"
application
"
)
;
let
panel
=
toolbox
.
getCurrentPanel
(
)
;
return
{
panel
tab
target
toolbox
}
;
}
async
function
unregisterAllWorkers
(
client
)
{
info
(
"
Wait
until
all
workers
have
a
valid
registrationActor
"
)
;
let
workers
;
await
asyncWaitUntil
(
async
function
(
)
{
workers
=
await
client
.
mainRoot
.
listAllWorkers
(
)
;
const
allWorkersRegistered
=
workers
.
service
.
every
(
worker
=
>
!
!
worker
.
registrationActor
)
;
return
allWorkersRegistered
;
}
)
;
info
(
"
Unregister
all
service
workers
"
)
;
for
(
let
worker
of
workers
.
service
)
{
await
client
.
request
(
{
to
:
worker
.
registrationActor
type
:
"
unregister
"
}
)
;
}
}
