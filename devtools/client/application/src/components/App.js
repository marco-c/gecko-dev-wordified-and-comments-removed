"
use
strict
"
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
main
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
LocalizationProvider
=
createFactory
(
FluentReact
.
LocalizationProvider
)
;
const
WorkerList
=
createFactory
(
require
(
"
.
/
WorkerList
"
)
)
;
const
WorkerListEmpty
=
createFactory
(
require
(
"
.
/
WorkerListEmpty
"
)
)
;
class
App
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
canDebugWorkers
:
PropTypes
.
bool
.
isRequired
client
:
PropTypes
.
object
.
isRequired
domain
:
PropTypes
.
string
.
isRequired
fluentBundles
:
PropTypes
.
array
.
isRequired
serviceContainer
:
PropTypes
.
object
.
isRequired
workers
:
PropTypes
.
array
.
isRequired
}
;
}
render
(
)
{
const
{
canDebugWorkers
client
domain
fluentBundles
serviceContainer
workers
}
=
this
.
props
;
const
domainWorkers
=
workers
.
filter
(
x
=
>
new
URL
(
x
.
url
)
.
hostname
=
=
=
domain
)
;
const
isWorkerListEmpty
=
domainWorkers
.
length
=
=
=
0
;
return
LocalizationProvider
(
{
messages
:
fluentBundles
}
main
(
{
className
:
application
{
isWorkerListEmpty
?
"
application
-
-
empty
"
:
"
"
}
}
isWorkerListEmpty
?
WorkerListEmpty
(
{
serviceContainer
}
)
:
WorkerList
(
{
canDebugWorkers
client
workers
:
domainWorkers
}
)
)
)
;
}
}
function
mapStateToProps
(
state
)
{
return
{
canDebugWorkers
:
state
.
workers
.
canDebugWorkers
domain
:
state
.
page
.
domain
workers
:
state
.
workers
.
list
}
;
}
module
.
exports
=
connect
(
mapStateToProps
)
(
App
)
;
