"
use
strict
"
;
const
{
createFactory
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
a
br
button
dd
dl
dt
header
li
section
span
time
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
getUnicodeUrl
getUnicodeUrlPath
}
=
require
(
"
devtools
/
client
/
shared
/
unicode
-
url
"
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
Localized
=
createFactory
(
FluentReact
.
Localized
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerClient
"
"
devtools
/
shared
/
client
/
debugger
-
client
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
gDevToolsBrowser
"
"
devtools
/
client
/
framework
/
devtools
-
browser
"
true
)
;
class
Worker
extends
Component
{
static
get
propTypes
(
)
{
return
{
client
:
PropTypes
.
instanceOf
(
DebuggerClient
)
.
isRequired
isDebugEnabled
:
PropTypes
.
bool
.
isRequired
worker
:
PropTypes
.
shape
(
{
active
:
PropTypes
.
bool
name
:
PropTypes
.
string
.
isRequired
scope
:
PropTypes
.
string
.
isRequired
registrationFront
:
PropTypes
.
object
workerTargetFront
:
PropTypes
.
object
}
)
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
debug
=
this
.
debug
.
bind
(
this
)
;
this
.
start
=
this
.
start
.
bind
(
this
)
;
this
.
unregister
=
this
.
unregister
.
bind
(
this
)
;
}
debug
(
)
{
if
(
!
this
.
isRunning
(
)
)
{
console
.
log
(
"
Service
workers
cannot
be
debugged
if
they
are
not
running
"
)
;
return
;
}
const
{
workerTargetFront
}
=
this
.
props
.
worker
;
gDevToolsBrowser
.
openWorkerToolbox
(
workerTargetFront
)
;
}
start
(
)
{
if
(
!
this
.
props
.
isDebugEnabled
)
{
console
.
log
(
"
Service
workers
cannot
be
started
in
multi
-
e10s
"
)
;
return
;
}
if
(
!
this
.
isActive
(
)
|
|
this
.
isRunning
(
)
)
{
console
.
log
(
"
Running
or
inactive
service
workers
cannot
be
started
"
)
;
return
;
}
const
{
registrationFront
}
=
this
.
props
.
worker
;
registrationFront
.
start
(
)
;
}
unregister
(
)
{
const
{
registrationFront
}
=
this
.
props
.
worker
;
registrationFront
.
unregister
(
)
;
}
isRunning
(
)
{
return
!
!
this
.
props
.
worker
.
workerTargetFront
;
}
isActive
(
)
{
return
this
.
props
.
worker
.
active
;
}
getServiceWorkerStatus
(
)
{
if
(
this
.
isActive
(
)
&
&
this
.
isRunning
(
)
)
{
return
"
running
"
;
}
else
if
(
this
.
isActive
(
)
)
{
return
"
stopped
"
;
}
return
"
registering
"
;
}
formatScope
(
scope
)
{
const
[
remainder
]
=
getUnicodeUrl
(
scope
)
.
split
(
"
:
/
/
"
)
;
return
remainder
|
|
scope
;
}
formatSource
(
source
)
{
const
parts
=
source
.
split
(
"
/
"
)
;
return
getUnicodeUrlPath
(
parts
[
parts
.
length
-
1
]
)
;
}
renderDebugLink
(
)
{
const
{
isDebugEnabled
}
=
this
.
props
;
const
shallDisableLink
=
!
this
.
isRunning
(
)
|
|
!
isDebugEnabled
;
const
linkClass
=
shallDisableLink
?
"
disabled
-
link
"
:
"
"
;
const
localizationId
=
isDebugEnabled
?
"
serviceworker
-
worker
-
debug
"
:
"
serviceworker
-
worker
-
debug
-
forbidden
"
;
const
link
=
Localized
(
{
id
:
localizationId
attrs
:
{
title
:
shallDisableLink
}
}
a
(
{
onClick
:
!
shallDisableLink
?
this
.
debug
:
null
className
:
{
linkClass
}
worker__debug
-
link
js
-
debug
-
link
}
)
)
;
return
link
;
}
renderStartLink
(
)
{
const
{
isDebugEnabled
}
=
this
.
props
;
const
linkClass
=
!
isDebugEnabled
?
"
disabled
-
link
"
:
"
"
;
const
link
=
Localized
(
{
id
:
"
serviceworker
-
worker
-
start2
"
attrs
:
{
title
:
!
isDebugEnabled
}
}
a
(
{
onClick
:
this
.
start
className
:
worker__start
-
link
js
-
start
-
link
{
linkClass
}
}
)
)
;
return
link
;
}
render
(
)
{
const
{
worker
}
=
this
.
props
;
const
status
=
this
.
getServiceWorkerStatus
(
)
;
const
unregisterButton
=
this
.
isActive
(
)
?
Localized
(
{
id
:
"
serviceworker
-
worker
-
unregister
"
}
button
(
{
onClick
:
this
.
unregister
className
:
"
devtools
-
button
worker__unregister
-
button
js
-
unregister
-
button
"
"
data
-
standalone
"
:
true
}
)
)
:
null
;
const
lastUpdated
=
worker
.
lastUpdateTime
?
Localized
(
{
id
:
"
serviceworker
-
worker
-
updated
"
"
date
"
:
worker
.
lastUpdateTime
/
1000
time
:
time
(
{
className
:
"
js
-
sw
-
updated
"
}
)
}
span
(
{
className
:
"
worker__data__updated
"
}
)
)
:
null
;
return
li
(
{
className
:
"
worker
js
-
sw
-
container
"
}
header
(
{
className
:
"
worker__header
"
}
span
(
{
title
:
worker
.
scope
className
:
"
worker__scope
js
-
sw
-
scope
"
}
this
.
formatScope
(
worker
.
scope
)
)
section
(
{
className
:
"
worker__controls
"
}
unregisterButton
)
)
dl
(
{
className
:
"
worker__data
"
}
Localized
(
{
id
:
"
serviceworker
-
worker
-
source
"
}
dt
(
{
className
:
"
worker__meta
-
name
"
}
)
)
dd
(
{
}
span
(
{
title
:
worker
.
scope
className
:
"
worker__source
-
url
js
-
source
-
url
"
}
this
.
formatSource
(
worker
.
url
)
)
this
.
renderDebugLink
(
)
lastUpdated
?
br
(
{
}
)
:
null
lastUpdated
?
lastUpdated
:
null
)
Localized
(
{
id
:
"
serviceworker
-
worker
-
status
"
}
dt
(
{
className
:
"
worker__meta
-
name
"
}
)
)
dd
(
{
}
Localized
(
{
id
:
"
serviceworker
-
worker
-
status
-
"
+
status
}
span
(
{
}
)
)
!
this
.
isRunning
(
)
?
this
.
renderStartLink
(
)
:
null
)
)
)
;
}
}
module
.
exports
=
Worker
;
