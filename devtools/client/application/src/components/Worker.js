"
use
strict
"
;
const
{
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
a
button
div
li
span
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
Services
=
require
(
"
Services
"
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerClient
"
"
devtools
/
shared
/
client
/
debugger
-
client
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
gDevToolsBrowser
"
"
devtools
/
client
/
framework
/
devtools
-
browser
"
true
)
;
const
Strings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
aboutdebugging
.
properties
"
)
;
class
Worker
extends
Component
{
static
get
propTypes
(
)
{
return
{
client
:
PropTypes
.
instanceOf
(
DebuggerClient
)
.
isRequired
debugDisabled
:
PropTypes
.
bool
worker
:
PropTypes
.
shape
(
{
active
:
PropTypes
.
bool
name
:
PropTypes
.
string
.
isRequired
scope
:
PropTypes
.
string
.
isRequired
registrationActor
:
PropTypes
.
string
workerActor
:
PropTypes
.
string
}
)
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
debug
=
this
.
debug
.
bind
(
this
)
;
this
.
start
=
this
.
start
.
bind
(
this
)
;
this
.
unregister
=
this
.
unregister
.
bind
(
this
)
;
}
debug
(
)
{
if
(
!
this
.
isRunning
(
)
)
{
console
.
log
(
"
Service
workers
cannot
be
debugged
if
they
are
not
running
"
)
;
return
;
}
let
{
client
worker
}
=
this
.
props
;
gDevToolsBrowser
.
openWorkerToolbox
(
client
worker
.
workerActor
)
;
}
start
(
)
{
if
(
!
this
.
isActive
(
)
|
|
this
.
isRunning
(
)
)
{
console
.
log
(
"
Running
or
inactive
service
workers
cannot
be
started
"
)
;
return
;
}
let
{
client
worker
}
=
this
.
props
;
client
.
request
(
{
to
:
worker
.
registrationActor
type
:
"
start
"
}
)
;
}
unregister
(
)
{
let
{
client
worker
}
=
this
.
props
;
client
.
request
(
{
to
:
worker
.
registrationActor
type
:
"
unregister
"
}
)
;
}
isRunning
(
)
{
return
!
!
this
.
props
.
worker
.
workerActor
;
}
isActive
(
)
{
return
this
.
props
.
worker
.
active
;
}
getServiceWorkerStatus
(
)
{
if
(
this
.
isActive
(
)
&
&
this
.
isRunning
(
)
)
{
return
"
running
"
;
}
else
if
(
this
.
isActive
(
)
)
{
return
"
stopped
"
;
}
return
"
registering
"
;
}
formatScope
(
scope
)
{
let
[
remainder
]
=
scope
.
split
(
"
:
/
/
"
)
;
return
remainder
|
|
scope
;
}
formatSource
(
source
)
{
let
parts
=
source
.
split
(
"
/
"
)
;
return
parts
[
parts
.
length
-
1
]
;
}
render
(
)
{
let
{
worker
}
=
this
.
props
;
let
status
=
this
.
getServiceWorkerStatus
(
)
;
const
unregisterButton
=
this
.
isActive
(
)
?
button
(
{
onClick
:
this
.
unregister
className
:
"
devtools
-
button
unregister
-
button
"
"
data
-
standalone
"
:
true
}
Strings
.
GetStringFromName
(
"
unregister
"
)
)
:
null
;
const
debugLinkDisabled
=
this
.
isRunning
(
)
?
"
"
:
"
disabled
"
;
const
debugLink
=
a
(
{
onClick
:
this
.
isRunning
(
)
?
this
.
debug
:
null
title
:
this
.
isRunning
(
)
?
null
:
"
Only
running
service
workers
can
be
debugged
"
className
:
{
debugLinkDisabled
}
debug
-
link
}
Strings
.
GetStringFromName
(
"
debug
"
)
)
;
const
startLink
=
!
this
.
isRunning
(
)
?
a
(
{
onClick
:
this
.
start
className
:
"
start
-
link
"
}
Strings
.
GetStringFromName
(
"
start
"
)
)
:
null
;
return
li
(
{
className
:
"
service
-
worker
-
container
"
}
div
(
{
className
:
"
service
-
worker
-
scope
"
}
span
(
{
title
:
worker
.
scope
}
this
.
formatScope
(
worker
.
scope
)
)
unregisterButton
)
div
(
{
className
:
"
service
-
worker
-
source
"
}
span
(
{
className
:
"
service
-
worker
-
meta
-
name
"
}
"
Source
"
)
span
(
{
title
:
worker
.
scope
}
this
.
formatSource
(
worker
.
url
)
)
debugLink
)
div
(
{
className
:
service
-
worker
-
status
service
-
worker
-
status
-
{
status
}
}
span
(
{
className
:
"
service
-
worker
-
meta
-
name
"
}
"
Status
"
)
Strings
.
GetStringFromName
(
status
)
.
toLowerCase
(
)
startLink
)
)
;
}
}
module
.
exports
=
Worker
;
