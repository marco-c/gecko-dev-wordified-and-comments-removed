"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
article
aside
h2
header
li
p
time
ul
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
getUnicodeUrl
}
=
require
(
"
devtools
/
client
/
shared
/
unicode
-
url
"
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
Localized
=
createFactory
(
FluentReact
.
Localized
)
;
const
Types
=
require
(
"
devtools
/
client
/
application
/
src
/
types
/
index
"
)
;
const
{
unregisterWorker
}
=
require
(
"
devtools
/
client
/
application
/
src
/
actions
/
workers
"
)
;
const
UIButton
=
createFactory
(
require
(
"
devtools
/
client
/
application
/
src
/
components
/
ui
/
UIButton
"
)
)
;
const
Worker
=
createFactory
(
require
(
"
devtools
/
client
/
application
/
src
/
components
/
service
-
workers
/
Worker
"
)
)
;
class
Registration
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
className
:
PropTypes
.
string
isDebugEnabled
:
PropTypes
.
bool
.
isRequired
registration
:
PropTypes
.
shape
(
Types
.
registration
)
.
isRequired
dispatch
:
PropTypes
.
func
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
unregister
=
this
.
unregister
.
bind
(
this
)
;
}
unregister
(
)
{
this
.
props
.
dispatch
(
unregisterWorker
(
this
.
props
.
registration
)
)
;
}
isActive
(
)
{
const
{
workers
}
=
this
.
props
.
registration
;
return
workers
.
some
(
x
=
>
x
.
state
=
=
=
Ci
.
nsIServiceWorkerInfo
.
STATE_ACTIVATED
)
;
}
formatScope
(
scope
)
{
const
[
remainder
]
=
getUnicodeUrl
(
scope
)
.
split
(
"
:
/
/
"
)
;
return
remainder
?
remainder
.
replace
(
/
\
/
/
"
"
)
:
scope
;
}
render
(
)
{
const
{
registration
isDebugEnabled
className
}
=
this
.
props
;
const
unregisterButton
=
this
.
isActive
(
)
?
Localized
(
{
id
:
"
serviceworker
-
worker
-
unregister
"
}
UIButton
(
{
onClick
:
this
.
unregister
className
:
"
js
-
unregister
-
button
"
}
)
)
:
null
;
const
lastUpdated
=
registration
.
lastUpdateTime
?
Localized
(
{
id
:
"
serviceworker
-
worker
-
updated
"
date
:
registration
.
lastUpdateTime
/
1000
time
:
time
(
{
className
:
"
js
-
sw
-
updated
"
}
)
}
p
(
{
className
:
"
registration__updated
-
time
"
}
)
)
:
null
;
const
scope
=
h2
(
{
title
:
registration
.
scope
className
:
"
registration__scope
js
-
sw
-
scope
devtools
-
ellipsis
-
text
"
}
this
.
formatScope
(
registration
.
scope
)
)
;
return
li
(
{
className
:
className
?
className
:
"
"
}
article
(
{
className
:
"
registration
js
-
sw
-
container
"
}
header
(
{
className
:
"
registration__header
"
}
scope
lastUpdated
)
aside
(
{
className
:
"
registration__controls
"
}
unregisterButton
)
ul
(
{
className
:
"
registration__workers
"
}
registration
.
workers
.
map
(
worker
=
>
{
return
li
(
{
key
:
worker
.
id
className
:
"
registration__workers
-
item
"
}
Worker
(
{
worker
isDebugEnabled
}
)
)
;
}
)
)
)
)
;
}
}
const
mapDispatchToProps
=
dispatch
=
>
(
{
dispatch
}
)
;
module
.
exports
=
connect
(
mapDispatchToProps
)
(
Registration
)
;
