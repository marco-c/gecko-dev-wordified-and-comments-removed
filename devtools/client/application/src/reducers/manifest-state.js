"
use
strict
"
;
const
{
MANIFEST_CATEGORIES
MANIFEST_ISSUE_LEVELS
MANIFEST_MEMBER_VALUE_TYPES
FETCH_MANIFEST_FAILURE
FETCH_MANIFEST_START
FETCH_MANIFEST_SUCCESS
RESET_MANIFEST
}
=
require
(
"
.
.
/
constants
"
)
;
function
_processRawManifestIcons
(
rawIcons
)
{
return
rawIcons
.
map
(
icon
=
>
{
return
{
key
:
icon
.
sizes
.
join
(
"
"
)
value
:
icon
.
src
}
;
}
)
;
}
function
_processRawManifestMembers
(
rawManifest
)
{
function
getCategoryForMember
(
key
)
{
switch
(
key
)
{
case
"
name
"
:
case
"
short_name
"
:
return
MANIFEST_CATEGORIES
.
IDENTITY
;
default
:
return
MANIFEST_CATEGORIES
.
PRESENTATION
;
}
}
function
getValueTypeForMember
(
key
)
{
switch
(
key
)
{
case
"
theme_color
"
:
case
"
background_color
"
:
return
MANIFEST_MEMBER_VALUE_TYPES
.
COLOR
;
default
:
return
MANIFEST_MEMBER_VALUE_TYPES
.
STRING
;
}
}
const
res
=
{
[
MANIFEST_CATEGORIES
.
IDENTITY
]
:
[
]
[
MANIFEST_CATEGORIES
.
PRESENTATION
]
:
[
]
}
;
const
rawMembers
=
Object
.
entries
(
rawManifest
)
.
filter
(
(
[
key
value
]
)
=
>
!
key
.
startsWith
(
"
moz_
"
)
&
&
!
(
key
=
=
=
"
icons
"
)
)
;
for
(
const
[
key
value
]
of
rawMembers
)
{
const
category
=
getCategoryForMember
(
key
)
;
const
type
=
getValueTypeForMember
(
key
)
;
res
[
category
]
.
push
(
{
key
value
type
}
)
;
}
return
res
;
}
function
_processRawManifestIssues
(
issues
)
{
return
issues
.
map
(
x
=
>
{
return
{
level
:
x
.
warn
?
MANIFEST_ISSUE_LEVELS
.
WARNING
:
MANIFEST_ISSUE_LEVELS
.
ERROR
message
:
x
.
warn
|
|
x
.
error
type
:
x
.
type
|
|
null
}
;
}
)
;
}
function
_processRawManifest
(
rawManifest
)
{
const
res
=
{
url
:
rawManifest
.
moz_manifest_url
}
;
Object
.
assign
(
res
_processRawManifestMembers
(
rawManifest
)
)
;
res
.
icons
=
_processRawManifestIcons
(
rawManifest
.
icons
|
|
[
]
)
;
res
.
validation
=
_processRawManifestIssues
(
rawManifest
.
moz_validation
|
|
[
]
)
;
return
res
;
}
function
ManifestState
(
)
{
return
{
errorMessage
:
"
"
isLoading
:
false
manifest
:
undefined
}
;
}
function
manifestReducer
(
state
=
ManifestState
(
)
action
)
{
switch
(
action
.
type
)
{
case
FETCH_MANIFEST_START
:
return
Object
.
assign
(
{
}
state
{
isLoading
:
true
mustLoadManifest
:
false
}
)
;
case
FETCH_MANIFEST_FAILURE
:
const
{
error
}
=
action
;
console
.
error
(
error
)
;
return
Object
.
assign
(
{
}
state
{
errorMessage
:
error
isLoading
:
false
manifest
:
null
}
)
;
case
FETCH_MANIFEST_SUCCESS
:
const
{
manifest
}
=
action
;
return
Object
.
assign
(
{
}
state
{
errorMessage
:
"
"
isLoading
:
false
manifest
:
manifest
?
_processRawManifest
(
manifest
)
:
null
}
)
;
case
RESET_MANIFEST
:
const
defaultState
=
ManifestState
(
)
;
return
defaultState
;
default
:
return
state
;
}
}
module
.
exports
=
{
ManifestState
manifestReducer
}
;
