"
use
strict
"
;
const
{
BrowserLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
)
;
const
require
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
application
/
"
window
}
)
.
require
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
render
unmountComponentAtNode
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
Provider
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
.
Provider
)
;
const
{
bindActionCreators
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
l10n
}
=
require
(
"
devtools
/
client
/
application
/
src
/
modules
/
l10n
"
)
;
const
{
configureStore
}
=
require
(
"
devtools
/
client
/
application
/
src
/
create
-
store
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
application
/
src
/
actions
/
index
"
)
;
const
{
WorkersListener
}
=
require
(
"
devtools
/
client
/
shared
/
workers
-
listener
"
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
{
services
}
=
require
(
"
devtools
/
client
/
application
/
src
/
modules
/
application
-
services
"
)
;
const
App
=
createFactory
(
require
(
"
devtools
/
client
/
application
/
src
/
components
/
App
"
)
)
;
const
{
safeAsyncMethod
}
=
require
(
"
devtools
/
shared
/
async
-
utils
"
)
;
window
.
Application
=
{
async
bootstrap
(
{
toolbox
panel
}
)
{
this
.
handleOnNavigate
=
this
.
handleOnNavigate
.
bind
(
this
)
;
this
.
updateDomain
=
this
.
updateDomain
.
bind
(
this
)
;
this
.
onTargetAvailable
=
this
.
onTargetAvailable
.
bind
(
this
)
;
this
.
onTargetDestroyed
=
this
.
onTargetDestroyed
.
bind
(
this
)
;
this
.
safeUpdateWorkers
=
safeAsyncMethod
(
(
)
=
>
this
.
updateWorkers
(
)
(
)
=
>
this
.
_destroyed
)
;
this
.
toolbox
=
toolbox
;
this
.
client
=
toolbox
.
target
.
client
;
this
.
telemetry
=
new
Telemetry
(
)
;
this
.
store
=
configureStore
(
this
.
telemetry
toolbox
.
sessionId
)
;
this
.
actions
=
bindActionCreators
(
actions
this
.
store
.
dispatch
)
;
services
.
init
(
this
.
toolbox
)
;
await
l10n
.
init
(
[
"
devtools
/
client
/
application
.
ftl
"
]
)
;
await
this
.
updateWorkers
(
)
;
this
.
workersListener
=
new
WorkersListener
(
this
.
client
.
mainRoot
)
;
this
.
workersListener
.
addListener
(
this
.
safeUpdateWorkers
)
;
const
deviceFront
=
await
this
.
client
.
mainRoot
.
getFront
(
"
device
"
)
;
const
{
canDebugServiceWorkers
}
=
await
deviceFront
.
getDescription
(
)
;
this
.
actions
.
updateCanDebugWorkers
(
canDebugServiceWorkers
&
&
services
.
features
.
doesDebuggerSupportWorkers
)
;
await
this
.
toolbox
.
targetList
.
watchTargets
(
[
this
.
toolbox
.
targetList
.
TYPES
.
FRAME
]
this
.
onTargetAvailable
this
.
onTargetDestroyed
)
;
this
.
mount
=
document
.
querySelector
(
"
#
mount
"
)
;
const
app
=
App
(
{
client
:
this
.
client
fluentBundles
:
l10n
.
getBundles
(
)
}
)
;
render
(
Provider
(
{
store
:
this
.
store
}
app
)
this
.
mount
)
;
}
handleOnNavigate
(
)
{
this
.
updateDomain
(
)
;
this
.
actions
.
resetManifest
(
)
;
}
async
updateWorkers
(
)
{
const
registrationsWithWorkers
=
await
this
.
client
.
mainRoot
.
listAllServiceWorkers
(
)
;
this
.
actions
.
updateWorkers
(
registrationsWithWorkers
)
;
}
updateDomain
(
)
{
this
.
actions
.
updateDomain
(
this
.
toolbox
.
target
.
url
)
;
}
setupTarget
(
targetFront
)
{
this
.
handleOnNavigate
(
)
;
targetFront
.
on
(
"
navigate
"
this
.
handleOnNavigate
)
;
}
cleanUpTarget
(
targetFront
)
{
targetFront
.
off
(
"
navigate
"
this
.
handleOnNavigate
)
;
}
onTargetAvailable
(
{
targetFront
}
)
{
if
(
!
targetFront
.
isTopLevel
)
{
return
;
}
this
.
setupTarget
(
targetFront
)
;
}
onTargetDestroyed
(
{
targetFront
}
)
{
if
(
!
targetFront
.
isTopLevel
)
{
return
;
}
this
.
cleanUpTarget
(
targetFront
)
;
}
destroy
(
)
{
this
.
workersListener
.
removeListener
(
)
;
this
.
toolbox
.
targetList
.
unwatchTargets
(
[
this
.
toolbox
.
targetList
.
TYPES
.
FRAME
]
this
.
onTargetAvailable
this
.
onTargetDestroyed
)
;
this
.
cleanUpTarget
(
this
.
toolbox
.
target
)
;
unmountComponentAtNode
(
this
.
mount
)
;
this
.
mount
=
null
;
this
.
toolbox
=
null
;
this
.
client
=
null
;
this
.
workersListener
=
null
;
this
.
_destroyed
=
true
;
}
}
;
