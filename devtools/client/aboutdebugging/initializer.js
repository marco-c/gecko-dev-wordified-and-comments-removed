"
use
strict
"
;
const
{
loader
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
BrowserLoader
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
{
}
)
;
const
{
Services
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerClient
"
"
devtools
/
shared
/
client
/
debugger
-
client
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerServer
"
"
devtools
/
server
/
main
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
Telemetry
"
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
{
require
}
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
aboutdebugging
/
"
window
}
)
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
render
unmountComponentAtNode
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
AboutDebuggingApp
=
createFactory
(
require
(
"
.
/
components
/
Aboutdebugging
"
)
)
;
var
AboutDebugging
=
{
init
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
enabled
"
true
)
)
{
window
.
location
=
"
about
:
devtools
?
reason
=
AboutDebugging
"
;
return
;
}
DebuggerServer
.
init
(
)
;
DebuggerServer
.
allowChromeProcess
=
true
;
DebuggerServer
.
registerAllActors
(
)
;
this
.
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
this
.
client
.
connect
(
)
.
then
(
(
)
=
>
{
let
client
=
this
.
client
;
let
telemetry
=
new
Telemetry
(
)
;
render
(
AboutDebuggingApp
(
{
client
telemetry
}
)
document
.
querySelector
(
"
#
body
"
)
)
;
}
)
;
}
destroy
(
)
{
unmountComponentAtNode
(
document
.
querySelector
(
"
#
body
"
)
)
;
if
(
this
.
client
)
{
this
.
client
.
close
(
)
;
this
.
client
=
null
;
}
}
}
;
window
.
addEventListener
(
"
DOMContentLoaded
"
function
(
)
{
AboutDebugging
.
init
(
)
;
}
{
once
:
true
}
)
;
window
.
addEventListener
(
"
unload
"
function
(
)
{
AboutDebugging
.
destroy
(
)
;
}
{
once
:
true
}
)
;
