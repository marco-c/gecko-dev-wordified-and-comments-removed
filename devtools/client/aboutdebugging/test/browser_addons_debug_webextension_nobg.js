"
use
strict
"
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
2
)
;
const
ADDON_NOBG_ID
=
"
test
-
devtools
-
webextension
-
nobg
mozilla
.
org
"
;
const
ADDON_NOBG_NAME
=
"
test
-
devtools
-
webextension
-
nobg
"
;
add_task
(
async
function
testWebExtensionsToolboxNoBackgroundPage
(
)
{
const
addonFile
=
ExtensionTestCommon
.
generateXPI
(
{
manifest
:
{
name
:
ADDON_NOBG_NAME
applications
:
{
gecko
:
{
id
:
ADDON_NOBG_ID
}
}
}
}
)
;
registerCleanupFunction
(
(
)
=
>
addonFile
.
remove
(
false
)
)
;
const
{
tab
document
debugBtn
}
=
await
setupTestAboutDebuggingWebExtension
(
ADDON_NOBG_NAME
addonFile
)
;
const
onToolboxReady
=
gDevTools
.
once
(
"
toolbox
-
ready
"
)
;
const
onToolboxClose
=
gDevTools
.
once
(
"
toolbox
-
destroyed
"
)
;
debugBtn
.
click
(
)
;
const
toolbox
=
await
onToolboxReady
;
testScript
(
toolbox
)
;
await
onToolboxClose
;
ok
(
true
"
Addon
toolbox
closed
"
)
;
await
uninstallAddon
(
{
document
id
:
ADDON_NOBG_ID
name
:
ADDON_NOBG_NAME
}
)
;
await
closeAboutDebugging
(
tab
)
;
}
)
;
const
testScript
=
function
(
toolbox
)
{
toolbox
.
selectTool
(
"
inspector
"
)
.
then
(
async
inspector
=
>
{
let
nodeActor
;
dump
(
Wait
the
fallback
window
to
be
fully
loaded
\
n
)
;
await
asyncWaitUntil
(
async
(
)
=
>
{
nodeActor
=
await
inspector
.
walker
.
querySelector
(
inspector
.
walker
.
rootNode
"
h1
"
)
;
return
nodeActor
&
&
nodeActor
.
inlineTextChild
;
}
)
;
dump
(
"
Got
a
nodeActor
with
an
inline
text
child
\
n
"
)
;
const
expectedValue
=
"
Your
addon
does
not
have
any
document
opened
yet
.
"
;
const
actualValue
=
nodeActor
.
inlineTextChild
.
_form
.
nodeValue
;
if
(
actualValue
!
=
=
expectedValue
)
{
throw
new
Error
(
mismatched
inlineTextchild
value
:
"
{
actualValue
}
"
!
=
=
"
{
expectedValue
}
"
)
;
}
dump
(
"
Got
the
expected
inline
text
content
in
the
selected
node
\
n
"
)
;
await
toolbox
.
destroy
(
)
;
}
)
.
catch
(
error
=
>
{
dump
(
"
Error
while
running
code
in
the
browser
toolbox
process
:
\
n
"
)
;
dump
(
error
+
"
\
n
"
)
;
dump
(
"
stack
:
\
n
"
+
error
.
stack
+
"
\
n
"
)
;
}
)
;
}
;
