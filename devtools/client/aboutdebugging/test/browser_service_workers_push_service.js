"
use
strict
"
;
const
SERVICE_WORKER
=
URL_ROOT
+
"
service
-
workers
/
push
-
sw
.
js
"
;
const
TAB_URL
=
URL_ROOT
+
"
service
-
workers
/
push
-
sw
.
html
"
;
const
FAKE_ENDPOINT
=
"
https
:
/
/
fake
/
endpoint
"
;
const
PushService
=
Cc
[
"
mozilla
.
org
/
push
/
Service
;
1
"
]
.
getService
(
Ci
.
nsIPushService
)
.
wrappedJSObject
;
add_task
(
function
*
(
)
{
info
(
"
Turn
on
workers
via
mochitest
http
.
"
)
;
yield
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
]
[
"
dom
.
push
.
connection
.
enabled
"
true
]
]
}
)
;
info
(
"
Mock
the
push
service
"
)
;
PushService
.
service
=
{
_registrations
:
new
Map
(
)
_notify
(
scope
)
{
Services
.
obs
.
notifyObservers
(
null
PushService
.
subscriptionModifiedTopic
scope
)
;
}
init
(
)
{
}
register
(
pageRecord
)
{
let
registration
=
{
endpoint
:
FAKE_ENDPOINT
}
;
this
.
_registrations
.
set
(
pageRecord
.
scope
registration
)
;
this
.
_notify
(
pageRecord
.
scope
)
;
return
Promise
.
resolve
(
registration
)
;
}
registration
(
pageRecord
)
{
return
Promise
.
resolve
(
this
.
_registrations
.
get
(
pageRecord
.
scope
)
)
;
}
unregister
(
pageRecord
)
{
let
deleted
=
this
.
_registrations
.
delete
(
pageRecord
.
scope
)
;
if
(
deleted
)
{
this
.
_notify
(
pageRecord
.
scope
)
;
}
return
Promise
.
resolve
(
deleted
)
;
}
}
;
let
{
tab
document
}
=
yield
openAboutDebugging
(
"
workers
"
)
;
let
serviceWorkersElement
=
document
.
getElementById
(
"
service
-
workers
"
)
;
let
onMutation
=
waitForMutation
(
serviceWorkersElement
{
childList
:
true
}
)
;
let
swTab
=
yield
addTab
(
TAB_URL
)
;
yield
onMutation
;
assertHasTarget
(
true
document
"
service
-
workers
"
SERVICE_WORKER
)
;
let
names
=
[
.
.
.
document
.
querySelectorAll
(
"
#
service
-
workers
.
target
-
name
"
)
]
;
let
name
=
names
.
filter
(
element
=
>
element
.
textContent
=
=
=
SERVICE_WORKER
)
[
0
]
;
ok
(
name
"
Found
the
service
worker
in
the
list
"
)
;
let
targetContainer
=
name
.
parentNode
.
parentNode
;
let
targetDetailsElement
=
targetContainer
.
querySelector
(
"
.
target
-
details
"
)
;
yield
waitForMutation
(
targetDetailsElement
{
childList
:
true
}
)
;
let
pushURL
=
targetContainer
.
querySelector
(
"
.
service
-
worker
-
push
-
url
"
)
;
ok
(
pushURL
"
Found
the
push
service
URL
in
the
service
worker
details
"
)
;
is
(
pushURL
.
textContent
FAKE_ENDPOINT
"
The
push
service
URL
looks
correct
"
)
;
ContentTask
.
spawn
(
swTab
.
linkedBrowser
{
}
function
(
)
{
let
win
=
content
.
wrappedJSObject
;
return
win
.
sub
.
unsubscribe
(
)
;
}
)
;
yield
waitForMutation
(
targetDetailsElement
{
childList
:
true
}
)
;
ok
(
!
targetContainer
.
querySelector
(
"
.
service
-
worker
-
push
-
url
"
)
"
The
push
service
URL
should
be
removed
"
)
;
yield
unregisterServiceWorker
(
swTab
)
.
then
(
(
)
=
>
{
ok
(
true
"
Service
worker
registration
unregistered
"
)
;
}
)
.
catch
(
function
(
e
)
{
ok
(
false
"
Service
worker
not
unregistered
;
"
+
e
)
;
}
)
;
info
(
"
Unmock
the
push
service
"
)
;
PushService
.
service
=
null
;
yield
removeTab
(
swTab
)
;
yield
closeAboutDebugging
(
tab
)
;
}
)
;
