"
use
strict
"
;
const
SERVICE_WORKER
=
URL_ROOT
+
"
service
-
workers
/
push
-
sw
.
js
"
;
const
TAB_URL
=
URL_ROOT
+
"
service
-
workers
/
push
-
sw
.
html
"
;
add_task
(
async
function
(
)
{
await
enableServiceWorkerDebugging
(
)
;
const
{
tab
document
}
=
await
openAboutDebugging
(
"
workers
"
)
;
const
serviceWorkersElement
=
getServiceWorkerList
(
document
)
;
const
swTab
=
await
addTab
(
TAB_URL
)
;
info
(
"
Make
the
test
page
notify
us
when
the
service
worker
sends
a
message
.
"
)
;
await
ContentTask
.
spawn
(
swTab
.
linkedBrowser
{
}
function
(
)
{
const
win
=
content
.
wrappedJSObject
;
win
.
navigator
.
serviceWorker
.
addEventListener
(
"
message
"
function
(
event
)
{
sendAsyncMessage
(
event
.
data
)
;
}
)
;
}
)
;
const
onClaimed
=
onTabMessage
(
swTab
"
sw
-
claimed
"
)
;
info
(
"
Wait
until
the
service
worker
appears
in
the
UI
"
)
;
await
waitUntilServiceWorkerContainer
(
SERVICE_WORKER
document
)
;
info
(
"
Ensure
that
the
registration
resolved
before
trying
to
interact
with
"
+
"
the
service
worker
.
"
)
;
await
waitForServiceWorkerRegistered
(
swTab
)
;
ok
(
true
"
Service
worker
registration
resolved
"
)
;
await
waitForServiceWorkerActivation
(
SERVICE_WORKER
document
)
;
info
(
"
Wait
until
the
service
worker
is
running
"
)
;
const
container
=
await
waitUntilServiceWorkerContainer
(
SERVICE_WORKER
document
)
;
await
waitUntil
(
(
)
=
>
container
.
querySelector
(
"
.
target
-
status
"
)
.
textContent
=
=
=
"
Running
"
100
)
;
const
names
=
[
.
.
.
document
.
querySelectorAll
(
"
#
service
-
workers
.
target
-
name
"
)
]
;
const
name
=
names
.
filter
(
element
=
>
element
.
textContent
=
=
=
SERVICE_WORKER
)
[
0
]
;
ok
(
name
"
Found
the
service
worker
in
the
list
"
)
;
const
targetElement
=
name
.
parentNode
.
parentNode
;
const
pushBtn
=
targetElement
.
querySelector
(
"
.
push
-
button
"
)
;
ok
(
pushBtn
"
Found
its
push
button
"
)
;
info
(
"
Wait
for
the
service
worker
to
claim
the
test
window
before
proceeding
.
"
)
;
await
onClaimed
;
info
(
"
Click
on
the
Push
button
and
wait
for
the
service
worker
to
receive
"
+
"
a
push
notification
"
)
;
const
onPushNotification
=
onTabMessage
(
swTab
"
sw
-
pushed
"
)
;
pushBtn
.
click
(
)
;
await
onPushNotification
;
ok
(
true
"
Service
worker
received
a
push
notification
"
)
;
try
{
await
unregisterServiceWorker
(
swTab
serviceWorkersElement
)
;
ok
(
true
"
Service
worker
registration
unregistered
"
)
;
}
catch
(
e
)
{
ok
(
false
"
SW
not
unregistered
;
"
+
e
)
;
}
await
removeTab
(
swTab
)
;
await
closeAboutDebugging
(
tab
)
;
}
)
;
function
onTabMessage
(
tab
message
)
{
const
mm
=
tab
.
linkedBrowser
.
messageManager
;
return
new
Promise
(
done
=
>
{
mm
.
addMessageListener
(
message
function
listener
(
)
{
mm
.
removeMessageListener
(
message
listener
)
;
done
(
)
;
}
)
;
}
)
;
}
