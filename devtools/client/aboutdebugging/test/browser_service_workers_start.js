"
use
strict
"
;
const
SERVICE_WORKER
=
URL_ROOT
+
"
service
-
workers
/
empty
-
sw
.
js
"
;
const
TAB_URL
=
URL_ROOT
+
"
service
-
workers
/
empty
-
sw
.
html
"
;
const
SW_TIMEOUT
=
1000
;
add_task
(
function
*
(
)
{
yield
enableServiceWorkerDebugging
(
)
;
yield
pushPref
(
"
dom
.
serviceWorkers
.
idle_timeout
"
SW_TIMEOUT
)
;
yield
pushPref
(
"
dom
.
serviceWorkers
.
idle_extended_timeout
"
SW_TIMEOUT
)
;
let
{
tab
document
}
=
yield
openAboutDebugging
(
"
workers
"
)
;
let
serviceWorkersElement
=
getServiceWorkerList
(
document
)
;
let
swTab
=
yield
addTab
(
TAB_URL
)
;
info
(
"
Wait
until
the
service
worker
appears
in
about
:
debugging
"
)
;
yield
waitUntilServiceWorkerContainer
(
SERVICE_WORKER
document
)
;
info
(
"
Ensure
that
the
registration
resolved
before
trying
to
interact
with
"
+
"
the
service
worker
.
"
)
;
yield
waitForServiceWorkerRegistered
(
swTab
)
;
ok
(
true
"
Service
worker
registration
resolved
"
)
;
yield
waitForServiceWorkerActivation
(
SERVICE_WORKER
document
)
;
let
names
=
[
.
.
.
document
.
querySelectorAll
(
"
#
service
-
workers
.
target
-
name
"
)
]
;
let
name
=
names
.
filter
(
element
=
>
element
.
textContent
=
=
=
SERVICE_WORKER
)
[
0
]
;
ok
(
name
"
Found
the
service
worker
in
the
list
"
)
;
let
targetElement
=
name
.
parentNode
.
parentNode
;
info
(
"
Wait
until
the
start
button
is
visible
"
)
;
yield
waitUntilElement
(
"
.
start
-
button
"
targetElement
)
;
let
startBtn
=
targetElement
.
querySelector
(
"
.
start
-
button
"
)
;
ok
(
startBtn
"
Found
its
start
button
"
)
;
ok
(
!
targetElement
.
querySelector
(
"
.
debug
-
button
"
)
"
No
debug
button
"
)
;
startBtn
.
click
(
)
;
info
(
"
Wait
until
the
service
worker
starts
and
the
debug
button
appears
"
)
;
yield
waitUntilElement
(
"
.
debug
-
button
"
targetElement
)
;
info
(
"
Found
the
debug
button
"
)
;
ok
(
!
targetElement
.
querySelector
(
"
.
start
-
button
"
)
"
No
start
button
"
)
;
try
{
yield
unregisterServiceWorker
(
swTab
serviceWorkersElement
)
;
ok
(
true
"
Service
worker
registration
unregistered
"
)
;
}
catch
(
e
)
{
ok
(
false
"
SW
not
unregistered
;
"
+
e
)
;
}
yield
removeTab
(
swTab
)
;
yield
closeAboutDebugging
(
tab
)
;
}
)
;
