"
use
strict
"
;
const
{
PromiseTestUtils
}
=
scopedCuImport
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
2
)
;
const
ADDON_ID
=
"
test
-
devtools
mozilla
.
org
"
;
const
ADDON_NAME
=
"
test
-
devtools
"
;
const
{
BrowserToolboxProcess
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
framework
/
ToolboxProcess
.
jsm
"
{
}
)
;
add_task
(
async
function
(
)
{
await
new
Promise
(
resolve
=
>
{
const
options
=
{
"
set
"
:
[
[
"
devtools
.
chrome
.
enabled
"
true
]
[
"
devtools
.
debugger
.
remote
-
enabled
"
true
]
[
"
devtools
.
debugger
.
prompt
-
connection
"
false
]
[
"
devtools
.
browser
-
toolbox
.
allow
-
unsafe
-
script
"
true
]
]
}
;
SpecialPowers
.
pushPrefEnv
(
options
resolve
)
;
}
)
;
const
{
tab
document
}
=
await
openAboutDebugging
(
"
addons
"
)
;
await
waitForInitialAddonList
(
document
)
;
await
installAddon
(
{
document
path
:
"
addons
/
unpacked
/
install
.
rdf
"
name
:
ADDON_NAME
}
)
;
const
names
=
getInstalledAddonNames
(
document
)
;
const
name
=
names
.
filter
(
element
=
>
element
.
textContent
=
=
=
ADDON_NAME
)
[
0
]
;
ok
(
name
"
Found
the
addon
in
the
list
"
)
;
const
targetElement
=
name
.
parentNode
.
parentNode
;
const
debugBtn
=
targetElement
.
querySelector
(
"
.
debug
-
button
"
)
;
ok
(
debugBtn
"
Found
its
debug
button
"
)
;
const
onCustomMessage
=
new
Promise
(
done
=
>
{
Services
.
obs
.
addObserver
(
function
listener
(
)
{
Services
.
obs
.
removeObserver
(
listener
"
addon
-
console
-
works
"
)
;
done
(
)
;
}
"
addon
-
console
-
works
"
)
;
}
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
const
testScript
=
function
(
)
{
toolbox
.
selectTool
(
"
webconsole
"
)
.
then
(
console
=
>
{
const
{
jsterm
}
=
console
.
hud
;
return
jsterm
.
execute
(
"
myBootstrapAddonFunction
(
)
"
)
;
}
)
.
then
(
(
)
=
>
toolbox
.
destroy
(
)
)
;
}
;
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
new
"
+
testScript
)
;
registerCleanupFunction
(
(
)
=
>
{
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
"
)
;
}
)
;
const
onToolboxClose
=
BrowserToolboxProcess
.
once
(
"
close
"
)
;
debugBtn
.
click
(
)
;
await
onCustomMessage
;
ok
(
true
"
Received
the
notification
message
from
the
bootstrap
.
js
function
"
)
;
await
onToolboxClose
;
ok
(
true
"
Addon
toolbox
closed
"
)
;
await
uninstallAddon
(
{
document
id
:
ADDON_ID
name
:
ADDON_NAME
}
)
;
await
closeAboutDebugging
(
tab
)
;
}
)
;
