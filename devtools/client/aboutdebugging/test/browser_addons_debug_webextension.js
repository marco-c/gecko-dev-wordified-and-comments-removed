"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
ADDON_ID
=
"
test
-
devtools
-
webextension
mozilla
.
org
"
;
const
ADDON_NAME
=
"
test
-
devtools
-
webextension
"
;
const
ADDON_MANIFEST_PATH
=
"
addons
/
test
-
devtools
-
webextension
/
manifest
.
json
"
;
const
{
BrowserToolboxProcess
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
client
/
framework
/
ToolboxProcess
.
jsm
"
{
}
)
;
add_task
(
function
*
testWebExtensionsToolboxWebConsole
(
)
{
let
{
tab
document
debugBtn
}
=
yield
setupTestAboutDebuggingWebExtension
(
ADDON_NAME
ADDON_MANIFEST_PATH
)
;
let
onCustomMessage
=
new
Promise
(
done
=
>
{
Services
.
obs
.
addObserver
(
function
listener
(
message
topic
)
{
let
apiMessage
=
message
.
wrappedJSObject
;
if
(
apiMessage
.
addonId
!
=
ADDON_ID
)
{
return
;
}
Services
.
obs
.
removeObserver
(
listener
"
console
-
api
-
log
-
event
"
)
;
done
(
apiMessage
.
arguments
)
;
}
"
console
-
api
-
log
-
event
"
)
;
}
)
;
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
testScript
=
function
(
)
{
toolbox
.
selectTool
(
"
webconsole
"
)
.
then
(
console
=
>
{
let
{
jsterm
}
=
console
.
hud
;
return
jsterm
.
execute
(
"
myWebExtensionAddonFunction
(
)
"
)
;
}
)
.
then
(
(
)
=
>
toolbox
.
destroy
(
)
)
;
}
;
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
new
"
+
testScript
)
;
registerCleanupFunction
(
(
)
=
>
{
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
"
)
;
}
)
;
let
onToolboxClose
=
BrowserToolboxProcess
.
once
(
"
close
"
)
;
debugBtn
.
click
(
)
;
let
args
=
yield
onCustomMessage
;
ok
(
true
"
Received
console
message
from
the
background
page
function
as
expected
"
)
;
is
(
args
[
0
]
"
Background
page
function
called
"
"
Got
the
expected
console
message
"
)
;
is
(
args
[
1
]
&
&
args
[
1
]
.
name
ADDON_NAME
"
Got
the
expected
manifest
from
WebExtension
API
"
)
;
yield
onToolboxClose
;
ok
(
true
"
Addon
toolbox
closed
"
)
;
yield
uninstallAddon
(
{
document
id
:
ADDON_ID
name
:
ADDON_NAME
}
)
;
yield
closeAboutDebugging
(
tab
)
;
}
)
;
