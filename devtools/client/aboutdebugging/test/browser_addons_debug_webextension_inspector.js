"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
ADDON_ID
=
"
test
-
devtools
-
webextension
mozilla
.
org
"
;
const
ADDON_NAME
=
"
test
-
devtools
-
webextension
"
;
const
ADDON_PATH
=
"
addons
/
test
-
devtools
-
webextension
/
manifest
.
json
"
;
const
{
BrowserToolboxProcess
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
client
/
framework
/
ToolboxProcess
.
jsm
"
{
}
)
;
add_task
(
function
*
testWebExtensionsToolboxInspector
(
)
{
let
{
tab
document
debugBtn
}
=
yield
setupTestAboutDebuggingWebExtension
(
ADDON_NAME
ADDON_PATH
)
;
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
testScript
=
function
(
)
{
toolbox
.
selectTool
(
"
inspector
"
)
.
then
(
inspector
=
>
{
return
inspector
.
walker
.
querySelector
(
inspector
.
walker
.
rootNode
"
body
"
)
;
}
)
.
then
(
(
nodeActor
)
=
>
{
if
(
!
nodeActor
)
{
throw
new
Error
(
"
nodeActor
not
found
"
)
;
}
dump
(
"
Got
a
nodeActor
\
n
"
)
;
if
(
!
(
nodeActor
.
inlineTextChild
)
)
{
throw
new
Error
(
"
inlineTextChild
not
found
"
)
;
}
dump
(
"
Got
a
nodeActor
with
an
inline
text
child
\
n
"
)
;
let
expectedValue
=
"
Background
Page
Body
Test
Content
"
;
let
actualValue
=
nodeActor
.
inlineTextChild
.
_form
.
nodeValue
;
if
(
String
(
actualValue
)
.
trim
(
)
!
=
=
String
(
expectedValue
)
.
trim
(
)
)
{
throw
new
Error
(
mismatched
inlineTextchild
value
:
"
{
actualValue
}
"
!
=
=
"
{
expectedValue
}
"
)
;
}
dump
(
"
Got
the
expected
inline
text
content
in
the
selected
node
\
n
"
)
;
return
Promise
.
resolve
(
)
;
}
)
.
then
(
(
)
=
>
toolbox
.
destroy
(
)
)
.
catch
(
(
error
)
=
>
{
dump
(
"
Error
while
running
code
in
the
browser
toolbox
process
:
\
n
"
)
;
dump
(
error
+
"
\
n
"
)
;
dump
(
"
stack
:
\
n
"
+
error
.
stack
+
"
\
n
"
)
;
}
)
;
}
;
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
new
"
+
testScript
)
;
registerCleanupFunction
(
(
)
=
>
{
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
"
)
;
}
)
;
let
onToolboxClose
=
BrowserToolboxProcess
.
once
(
"
close
"
)
;
debugBtn
.
click
(
)
;
yield
onToolboxClose
;
ok
(
true
"
Addon
toolbox
closed
"
)
;
yield
uninstallAddon
(
{
document
id
:
ADDON_ID
name
:
ADDON_NAME
}
)
;
yield
closeAboutDebugging
(
tab
)
;
}
)
;
