"
use
strict
"
;
const
ADDON_ID
=
"
test
-
devtools
mozilla
.
org
"
;
const
ADDON_NAME
=
"
test
-
devtools
"
;
add_task
(
function
*
(
)
{
let
{
tab
document
}
=
yield
openAboutDebugging
(
"
addons
"
)
;
yield
installAddon
(
document
"
addons
/
unpacked
/
install
.
rdf
"
"
test
-
devtools
"
)
;
let
names
=
[
.
.
.
document
.
querySelectorAll
(
"
#
addons
.
target
-
name
"
)
]
;
names
=
names
.
map
(
element
=
>
element
.
textContent
)
;
ok
(
names
.
includes
(
ADDON_NAME
)
"
The
addon
name
appears
in
the
list
of
addons
:
"
+
names
)
;
yield
uninstallAddon
(
ADDON_ID
)
;
names
=
[
.
.
.
document
.
querySelectorAll
(
"
#
addons
.
target
-
name
"
)
]
;
names
=
names
.
map
(
element
=
>
element
.
textContent
)
;
ok
(
!
names
.
includes
(
ADDON_NAME
)
"
After
uninstall
the
addon
name
disappears
from
the
list
of
addons
:
"
+
names
)
;
yield
closeAboutDebugging
(
tab
)
;
}
)
;
add_task
(
function
*
(
)
{
let
{
tab
document
}
=
yield
openAboutDebugging
(
"
addons
"
)
;
let
top
=
document
.
querySelector
(
"
.
addons
-
top
"
)
;
let
promise
=
waitForMutation
(
top
{
childList
:
true
}
)
;
let
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
null
)
;
let
file
=
getSupportsFile
(
"
addons
/
bad
/
manifest
.
json
"
)
;
MockFilePicker
.
returnFiles
=
[
file
.
file
]
;
document
.
getElementById
(
"
load
-
addon
-
from
-
file
"
)
.
click
(
)
;
yield
promise
;
let
err
=
document
.
querySelector
(
"
.
addons
-
install
-
error
"
)
;
isnot
(
err
null
"
Addon
install
error
message
appeared
"
)
;
yield
closeAboutDebugging
(
tab
)
;
}
)
;
