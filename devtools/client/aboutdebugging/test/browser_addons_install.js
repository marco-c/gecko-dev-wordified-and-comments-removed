"
use
strict
"
;
var
{
AddonManager
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
{
}
)
;
const
ADDON_ID
=
"
test
-
devtools
mozilla
.
org
"
;
const
ADDON_NAME
=
"
test
-
devtools
"
;
add_task
(
function
*
(
)
{
let
{
tab
document
}
=
yield
openAboutDebugging
(
"
addons
"
)
;
let
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
null
)
;
let
file
=
get_supports_file
(
"
addons
/
unpacked
/
install
.
rdf
"
)
;
MockFilePicker
.
returnFiles
=
[
file
.
file
]
;
let
promise
=
new
Promise
(
done
=
>
{
Services
.
obs
.
addObserver
(
function
listener
(
)
{
Services
.
obs
.
removeObserver
(
listener
"
test
-
devtools
"
false
)
;
ok
(
true
"
Addon
installed
and
running
its
bootstrap
.
js
file
"
)
;
done
(
)
;
}
"
test
-
devtools
"
false
)
;
}
)
;
document
.
getElementById
(
"
load
-
addon
-
from
-
file
"
)
.
click
(
)
;
yield
promise
;
let
names
=
[
.
.
.
document
.
querySelectorAll
(
"
#
addons
.
target
-
name
"
)
]
;
names
=
names
.
map
(
element
=
>
element
.
textContent
)
;
ok
(
names
.
includes
(
ADDON_NAME
)
"
The
addon
name
appears
in
the
list
of
addons
:
"
+
names
)
;
yield
new
Promise
(
done
=
>
{
AddonManager
.
getAddonByID
(
ADDON_ID
addon
=
>
{
let
listener
=
{
onUninstalled
:
function
(
aUninstalledAddon
)
{
if
(
aUninstalledAddon
!
=
addon
)
{
return
;
}
AddonManager
.
removeAddonListener
(
listener
)
;
done
(
)
;
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
addon
.
uninstall
(
)
;
}
)
;
}
)
;
names
=
[
.
.
.
document
.
querySelectorAll
(
"
#
addons
.
target
-
name
"
)
]
;
names
=
names
.
map
(
element
=
>
element
.
textContent
)
;
ok
(
!
names
.
includes
(
ADDON_NAME
)
"
After
uninstall
the
addon
name
disappears
from
the
list
of
addons
:
"
+
names
)
;
yield
closeAboutDebugging
(
tab
)
;
}
)
;
