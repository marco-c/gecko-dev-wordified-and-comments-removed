"
use
strict
"
;
loader
.
lazyImporter
(
this
"
AddonTestUtils
"
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
function
mockFilePicker
(
window
file
)
{
const
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
)
;
MockFilePicker
.
setFiles
(
[
file
]
)
;
}
function
promiseWriteWebManifestForExtension
(
manifest
dir
)
{
const
files
=
{
"
manifest
.
json
"
:
JSON
.
stringify
(
manifest
)
}
;
return
AddonTestUtils
.
promiseWriteFilesToExtension
(
dir
.
path
manifest
.
applications
.
gecko
.
id
files
true
)
;
}
add_task
(
async
function
testWebextensionInstallSuccess
(
)
{
const
{
tab
document
}
=
await
openAboutDebugging
(
"
addons
"
)
;
await
waitForInitialAddonList
(
document
)
;
await
installAddon
(
{
document
path
:
"
addons
/
unpacked
/
manifest
.
json
"
name
:
"
test
-
devtools
"
}
)
;
await
uninstallAddon
(
{
document
id
:
"
test
-
devtools
mozilla
.
org
"
name
:
"
test
-
devtools
"
}
)
;
await
closeAboutDebugging
(
tab
)
;
}
)
;
add_task
(
async
function
testWebextensionInstallError
(
)
{
const
{
tab
document
window
}
=
await
openAboutDebugging
(
"
addons
"
)
;
await
waitForInitialAddonList
(
document
)
;
mockFilePicker
(
window
getSupportsFile
(
"
addons
/
bad
/
manifest
.
json
"
)
.
file
)
;
document
.
getElementById
(
"
load
-
addon
-
from
-
file
"
)
.
click
(
)
;
info
(
"
wait
for
the
install
error
to
appear
"
)
;
const
top
=
document
.
querySelector
(
"
.
addons
-
top
"
)
;
await
waitUntilElement
(
"
.
addons
-
install
-
error
"
top
)
;
await
closeAboutDebugging
(
tab
)
;
}
)
;
add_task
(
async
function
testWebextensionInstallErrorRetry
(
)
{
const
{
tab
document
window
}
=
await
openAboutDebugging
(
"
addons
"
)
;
await
waitForInitialAddonList
(
document
)
;
const
tempdir
=
AddonTestUtils
.
tempDir
.
clone
(
)
;
const
addonId
=
"
invalid
-
addon
-
install
-
retry
mozilla
.
org
"
;
const
addonName
=
"
invalid
-
addon
-
install
-
retry
"
;
const
manifest
=
{
name
:
addonName
description
:
"
test
invalid
-
addon
-
install
-
retry
"
manifest_version
:
2
version
:
"
1
.
0
"
applications
:
{
gecko
:
{
id
:
addonId
}
}
content_scripts
:
{
matches
:
"
http
:
/
/
*
/
"
js
:
"
foo
.
js
"
}
}
;
await
promiseWriteWebManifestForExtension
(
manifest
tempdir
)
;
const
manifestFile
=
tempdir
.
clone
(
)
;
manifestFile
.
append
(
addonId
"
manifest
.
json
"
)
;
mockFilePicker
(
window
manifestFile
)
;
document
.
getElementById
(
"
load
-
addon
-
from
-
file
"
)
.
click
(
)
;
info
(
"
wait
for
the
install
error
to
appear
"
)
;
const
top
=
document
.
querySelector
(
"
.
addons
-
top
"
)
;
await
waitUntilElement
(
"
.
addons
-
install
-
error
"
top
)
;
const
retryButton
=
document
.
querySelector
(
"
button
.
addons
-
install
-
retry
"
)
;
is
(
retryButton
.
textContent
"
Retry
"
"
Retry
button
has
a
good
label
"
)
;
manifest
.
content_scripts
=
[
{
matches
:
[
"
http
:
/
/
*
/
"
]
js
:
[
"
foo
.
js
"
]
}
]
;
await
promiseWriteWebManifestForExtension
(
manifest
tempdir
)
;
const
addonEl
=
document
.
querySelector
(
[
data
-
addon
-
id
=
"
{
addonId
}
"
]
)
;
ok
(
!
addonEl
"
Addon
is
not
installed
yet
"
)
;
retryButton
.
click
(
)
;
info
(
"
Wait
for
the
add
-
on
to
be
shown
"
)
;
await
waitUntilElement
(
[
data
-
addon
-
id
=
"
{
addonId
}
"
]
document
)
;
info
(
"
Addon
is
installed
"
)
;
await
uninstallAddon
(
{
document
id
:
addonId
name
:
addonName
}
)
;
await
closeAboutDebugging
(
tab
)
;
}
)
;
