"
use
strict
"
;
const
SCOPE
=
URL_ROOT
+
"
service
-
workers
/
"
;
const
SERVICE_WORKER
=
SCOPE
+
"
empty
-
sw
.
js
"
;
const
TAB_URL
=
SCOPE
+
"
empty
-
sw
.
html
"
;
add_task
(
function
*
(
)
{
yield
enableServiceWorkerDebugging
(
)
;
let
{
tab
document
}
=
yield
openAboutDebugging
(
"
workers
"
)
;
let
serviceWorkersElement
=
getServiceWorkerList
(
document
)
;
let
onMutation
=
waitForMutation
(
serviceWorkersElement
{
childList
:
true
}
)
;
let
swTab
=
yield
addTab
(
TAB_URL
)
;
yield
onMutation
;
assertHasTarget
(
true
document
"
service
-
workers
"
SERVICE_WORKER
)
;
yield
waitForServiceWorkerActivation
(
SERVICE_WORKER
document
)
;
info
(
"
Ensure
that
the
registration
resolved
before
trying
to
interact
with
"
+
"
the
service
worker
.
"
)
;
yield
waitForServiceWorkerRegistered
(
swTab
)
;
ok
(
true
"
Service
worker
registration
resolved
"
)
;
let
targets
=
document
.
querySelectorAll
(
"
#
service
-
workers
.
target
"
)
;
is
(
targets
.
length
1
"
One
service
worker
is
now
displayed
.
"
)
;
let
target
=
targets
[
0
]
;
let
name
=
target
.
querySelector
(
"
.
target
-
name
"
)
;
is
(
name
.
textContent
SERVICE_WORKER
"
Found
the
service
worker
in
the
list
"
)
;
info
(
"
Check
the
scope
displayed
scope
is
correct
"
)
;
let
scope
=
target
.
querySelector
(
"
.
service
-
worker
-
scope
"
)
;
is
(
scope
.
textContent
SCOPE
"
The
expected
scope
is
displayed
in
the
service
worker
info
.
"
)
;
info
(
"
Unregister
the
service
worker
via
the
unregister
link
.
"
)
;
let
unregisterLink
=
target
.
querySelector
(
"
.
unregister
-
link
"
)
;
ok
(
unregisterLink
"
Found
the
unregister
link
"
)
;
onMutation
=
waitForMutation
(
serviceWorkersElement
{
childList
:
true
}
)
;
unregisterLink
.
click
(
)
;
yield
onMutation
;
is
(
document
.
querySelector
(
"
#
service
-
workers
.
target
"
)
null
"
No
service
worker
displayed
anymore
.
"
)
;
yield
removeTab
(
swTab
)
;
yield
closeAboutDebugging
(
tab
)
;
}
)
;
