"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
shared
-
head
.
js
"
this
)
;
const
{
AddonManager
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
{
}
)
;
const
{
Management
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
{
}
)
;
flags
.
testing
=
true
;
registerCleanupFunction
(
(
)
=
>
{
flags
.
testing
=
false
;
}
)
;
function
*
openAboutDebugging
(
page
win
)
{
info
(
"
opening
about
:
debugging
"
)
;
let
url
=
"
about
:
debugging
"
;
if
(
page
)
{
url
+
=
"
#
"
+
page
;
}
let
tab
=
yield
addTab
(
url
{
window
:
win
}
)
;
let
browser
=
tab
.
linkedBrowser
;
let
document
=
browser
.
contentDocument
;
let
window
=
browser
.
contentWindow
;
if
(
!
document
.
querySelector
(
"
.
app
"
)
)
{
yield
waitForMutation
(
document
.
body
{
childList
:
true
}
)
;
}
return
{
tab
document
window
}
;
}
function
changeAboutDebuggingHash
(
document
hash
)
{
info
(
Opening
about
:
debugging
#
{
hash
}
)
;
window
.
openUILinkIn
(
about
:
debugging
#
{
hash
}
"
current
"
)
;
return
waitForMutation
(
document
.
querySelector
(
"
.
main
-
content
"
)
{
childList
:
true
}
)
;
}
function
openPanel
(
document
panelId
)
{
info
(
Opening
{
panelId
}
panel
)
;
document
.
querySelector
(
[
aria
-
controls
=
"
{
panelId
}
"
]
)
.
click
(
)
;
return
waitForMutation
(
document
.
querySelector
(
"
.
main
-
content
"
)
{
childList
:
true
}
)
;
}
function
closeAboutDebugging
(
tab
)
{
info
(
"
Closing
about
:
debugging
"
)
;
return
removeTab
(
tab
)
;
}
function
getSupportsFile
(
path
)
{
let
cr
=
Cc
[
"
mozilla
.
org
/
chrome
/
chrome
-
registry
;
1
"
]
.
getService
(
Ci
.
nsIChromeRegistry
)
;
let
uri
=
Services
.
io
.
newURI
(
CHROME_URL_ROOT
+
path
)
;
let
fileurl
=
cr
.
convertChromeURL
(
uri
)
;
return
fileurl
.
QueryInterface
(
Ci
.
nsIFileURL
)
;
}
function
getAddonList
(
document
)
{
return
document
.
querySelector
(
"
#
addons
.
target
-
list
"
)
|
|
document
.
querySelector
(
"
#
addons
.
targets
"
)
;
}
function
getTemporaryAddonList
(
document
)
{
return
document
.
querySelector
(
"
#
temporary
-
addons
.
target
-
list
"
)
|
|
document
.
querySelector
(
"
#
temporary
-
addons
.
targets
"
)
;
}
function
getAddonListWithAddon
(
document
id
)
{
const
addon
=
document
.
querySelector
(
[
data
-
addon
-
id
=
"
{
id
}
"
]
)
;
if
(
!
addon
)
{
throw
new
Error
(
"
couldn
'
t
find
add
-
on
by
id
"
)
;
}
return
addon
.
closest
(
"
.
target
-
list
"
)
;
}
function
getInstalledAddonNames
(
document
)
{
const
selector
=
"
#
addons
.
target
-
name
#
temporary
-
addons
.
target
-
name
"
;
return
[
.
.
.
document
.
querySelectorAll
(
selector
)
]
;
}
function
getServiceWorkerList
(
document
)
{
return
document
.
querySelector
(
"
#
service
-
workers
.
target
-
list
"
)
|
|
document
.
querySelector
(
"
#
service
-
workers
.
targets
"
)
;
}
function
getServiceWorkerContainer
(
name
document
)
{
let
nameElements
=
[
.
.
.
document
.
querySelectorAll
(
"
#
service
-
workers
.
target
-
name
"
)
]
;
let
nameElement
=
nameElements
.
filter
(
element
=
>
element
.
textContent
=
=
=
name
)
[
0
]
;
if
(
nameElement
)
{
return
nameElement
.
closest
(
"
.
target
-
container
"
)
;
}
return
null
;
}
function
*
waitUntilServiceWorkerContainer
(
name
document
)
{
yield
waitUntil
(
(
)
=
>
{
return
getServiceWorkerContainer
(
name
document
)
;
}
100
)
;
return
getServiceWorkerContainer
(
name
document
)
;
}
function
*
waitUntilElement
(
selector
parent
)
{
yield
waitUntil
(
(
)
=
>
{
return
parent
.
querySelector
(
selector
)
;
}
100
)
;
return
parent
.
querySelector
(
selector
)
;
}
function
getTabList
(
document
)
{
return
document
.
querySelector
(
"
#
tabs
.
target
-
list
"
)
|
|
document
.
querySelector
(
"
#
tabs
.
targets
"
)
;
}
function
*
installAddon
(
{
document
path
name
isWebExtension
}
)
{
let
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
)
;
let
file
=
getSupportsFile
(
path
)
;
MockFilePicker
.
setFiles
(
[
file
.
file
]
)
;
let
onAddonInstalled
;
if
(
isWebExtension
)
{
onAddonInstalled
=
new
Promise
(
done
=
>
{
Management
.
on
(
"
startup
"
function
listener
(
event
extension
)
{
if
(
extension
.
name
!
=
name
)
{
return
;
}
Management
.
off
(
"
startup
"
listener
)
;
done
(
)
;
}
)
;
}
)
;
}
else
{
onAddonInstalled
=
new
Promise
(
done
=
>
{
Services
.
obs
.
addObserver
(
function
listener
(
)
{
Services
.
obs
.
removeObserver
(
listener
"
test
-
devtools
"
)
;
done
(
)
;
}
"
test
-
devtools
"
)
;
}
)
;
}
document
.
getElementById
(
"
load
-
addon
-
from
-
file
"
)
.
click
(
)
;
yield
onAddonInstalled
;
ok
(
true
"
Addon
installed
and
running
its
bootstrap
.
js
file
"
)
;
info
(
"
Wait
for
the
addon
to
appear
in
the
UI
"
)
;
yield
waitUntilAddonContainer
(
name
document
)
;
}
function
*
uninstallAddon
(
{
document
id
name
}
)
{
yield
new
Promise
(
done
=
>
{
AddonManager
.
getAddonByID
(
id
addon
=
>
{
let
listener
=
{
onUninstalled
:
function
(
uninstalledAddon
)
{
if
(
uninstalledAddon
!
=
addon
)
{
return
;
}
AddonManager
.
removeAddonListener
(
listener
)
;
done
(
)
;
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
addon
.
uninstall
(
)
;
}
)
;
}
)
;
info
(
"
Wait
until
the
addon
is
removed
from
about
:
debugging
"
)
;
yield
waitUntil
(
(
)
=
>
!
getAddonContainer
(
name
document
)
100
)
;
}
function
getAddonCount
(
document
)
{
const
addonListContainer
=
getAddonList
(
document
)
;
let
addonElements
=
addonListContainer
.
querySelectorAll
(
"
.
target
"
)
;
return
addonElements
.
length
;
}
function
waitForInitialAddonList
(
document
)
{
info
(
"
Waiting
for
add
-
ons
to
load
.
Current
add
-
on
count
:
"
+
getAddonCount
(
document
)
)
;
return
waitUntil
(
(
)
=
>
getAddonCount
(
document
)
>
0
100
)
;
}
function
getAddonContainer
(
name
document
)
{
let
nameElements
=
[
.
.
.
document
.
querySelectorAll
(
"
#
addons
-
panel
.
target
-
name
"
)
]
;
let
nameElement
=
nameElements
.
filter
(
element
=
>
element
.
textContent
=
=
=
name
)
[
0
]
;
if
(
nameElement
)
{
return
nameElement
.
closest
(
"
.
addon
-
target
-
container
"
)
;
}
return
null
;
}
function
*
waitUntilAddonContainer
(
name
document
)
{
yield
waitUntil
(
(
)
=
>
{
return
getAddonContainer
(
name
document
)
;
}
)
;
return
getAddonContainer
(
name
document
)
;
}
function
waitForMutation
(
target
mutationOptions
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
new
MutationObserver
(
(
)
=
>
{
observer
.
disconnect
(
)
;
resolve
(
)
;
}
)
;
observer
.
observe
(
target
mutationOptions
)
;
}
)
;
}
function
waitForContentMutation
(
target
)
{
return
waitForMutation
(
target
{
characterData
:
true
childList
:
true
subtree
:
true
}
)
;
}
function
assertHasTarget
(
expected
document
type
name
)
{
let
names
=
[
.
.
.
document
.
querySelectorAll
(
"
#
"
+
type
+
"
.
target
-
name
"
)
]
;
names
=
names
.
map
(
element
=
>
element
.
textContent
)
;
is
(
names
.
includes
(
name
)
expected
"
The
"
+
type
+
"
url
appears
in
the
list
:
"
+
names
)
;
}
function
waitForServiceWorkerRegistered
(
tab
)
{
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
function
*
(
)
{
let
{
sw
}
=
content
.
wrappedJSObject
;
yield
sw
;
}
)
;
}
function
*
unregisterServiceWorker
(
tab
serviceWorkersElement
)
{
let
registrations
=
serviceWorkersElement
.
querySelectorAll
(
"
.
target
-
container
"
)
;
let
registrationCount
=
registrations
.
length
;
let
isRemoved
=
waitUntil
(
(
)
=
>
{
registrations
=
serviceWorkersElement
.
querySelectorAll
(
"
.
target
-
container
"
)
;
return
registrations
.
length
=
=
=
registrationCount
-
1
;
}
100
)
;
yield
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
function
*
(
)
{
let
{
sw
}
=
content
.
wrappedJSObject
;
let
registration
=
yield
sw
;
yield
registration
.
unregister
(
)
;
}
)
;
return
isRemoved
;
}
function
waitForDelayedStartupFinished
(
win
)
{
return
new
Promise
(
function
(
resolve
)
{
Services
.
obs
.
addObserver
(
function
observer
(
subject
topic
)
{
if
(
win
=
=
subject
)
{
Services
.
obs
.
removeObserver
(
observer
topic
)
;
resolve
(
)
;
}
}
"
browser
-
delayed
-
startup
-
finished
"
)
;
}
)
;
}
function
*
setupTestAboutDebuggingWebExtension
(
name
path
)
{
yield
new
Promise
(
resolve
=
>
{
let
options
=
{
"
set
"
:
[
[
"
devtools
.
chrome
.
enabled
"
true
]
[
"
devtools
.
debugger
.
remote
-
enabled
"
true
]
[
"
devtools
.
debugger
.
prompt
-
connection
"
false
]
[
"
devtools
.
browser
-
toolbox
.
allow
-
unsafe
-
script
"
true
]
]
}
;
SpecialPowers
.
pushPrefEnv
(
options
resolve
)
;
}
)
;
let
{
tab
document
}
=
yield
openAboutDebugging
(
"
addons
"
)
;
yield
waitForInitialAddonList
(
document
)
;
yield
installAddon
(
{
document
path
name
isWebExtension
:
true
}
)
;
let
names
=
getInstalledAddonNames
(
document
)
;
let
nameEl
=
names
.
filter
(
element
=
>
element
.
textContent
=
=
=
name
)
[
0
]
;
ok
(
name
"
Found
the
addon
in
the
list
"
)
;
let
targetElement
=
nameEl
.
parentNode
.
parentNode
;
let
debugBtn
=
targetElement
.
querySelector
(
"
.
debug
-
button
"
)
;
ok
(
debugBtn
"
Found
its
debug
button
"
)
;
return
{
tab
document
debugBtn
}
;
}
function
*
waitForServiceWorkerActivation
(
swUrl
document
)
{
let
serviceWorkersElement
=
getServiceWorkerList
(
document
)
;
let
names
=
serviceWorkersElement
.
querySelectorAll
(
"
.
target
-
name
"
)
;
let
name
=
[
.
.
.
names
]
.
filter
(
element
=
>
element
.
textContent
=
=
=
swUrl
)
[
0
]
;
let
targetElement
=
name
.
parentNode
.
parentNode
;
let
targetStatus
=
targetElement
.
querySelector
(
"
.
target
-
status
"
)
;
yield
waitUntil
(
(
)
=
>
{
return
targetStatus
.
textContent
!
=
=
"
Registering
"
;
}
100
)
;
}
function
enableServiceWorkerDebugging
(
)
{
return
new
Promise
(
done
=
>
{
let
options
=
{
"
set
"
:
[
[
"
dom
.
serviceWorkers
.
enabled
"
true
]
[
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
]
[
"
dom
.
ipc
.
processCount
"
1
]
]
}
;
SpecialPowers
.
pushPrefEnv
(
options
done
)
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
}
)
;
}
function
promiseAddonEvent
(
event
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
[
event
]
:
function
(
.
.
.
args
)
{
AddonManager
.
removeAddonListener
(
listener
)
;
resolve
(
args
)
;
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
}
)
;
}
function
installAddonWithManager
(
filePath
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
AddonManager
.
getInstallForFile
(
filePath
install
=
>
{
if
(
!
install
)
{
throw
new
Error
(
An
install
was
not
created
for
{
filePath
}
)
;
}
install
.
addListener
(
{
onDownloadFailed
:
reject
onDownloadCancelled
:
reject
onInstallFailed
:
reject
onInstallCancelled
:
reject
onInstallEnded
:
resolve
}
)
;
install
.
install
(
)
;
}
)
;
}
)
;
}
function
getAddonByID
(
addonId
)
{
return
new
Promise
(
resolve
=
>
{
AddonManager
.
getAddonByID
(
addonId
addon
=
>
resolve
(
addon
)
)
;
}
)
;
}
function
*
tearDownAddon
(
addon
)
{
const
onUninstalled
=
promiseAddonEvent
(
"
onUninstalled
"
)
;
addon
.
uninstall
(
)
;
const
[
uninstalledAddon
]
=
yield
onUninstalled
;
is
(
uninstalledAddon
.
id
addon
.
id
Add
-
on
was
uninstalled
:
{
uninstalledAddon
.
id
}
)
;
}
