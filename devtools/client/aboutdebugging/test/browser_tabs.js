"
use
strict
"
;
const
TAB_URL
=
"
data
:
text
/
html
<
title
>
foo
<
/
title
>
"
;
add_task
(
function
*
(
)
{
let
{
tab
document
}
=
yield
openAboutDebugging
(
"
tabs
"
)
;
let
tabsElement
=
getTabList
(
document
)
;
if
(
tabsElement
.
querySelectorAll
(
"
.
target
-
name
"
)
.
length
=
=
0
)
{
yield
waitForMutation
(
tabsElement
{
childList
:
true
}
)
;
}
tabsElement
=
getTabList
(
document
)
;
let
names
=
[
.
.
.
tabsElement
.
querySelectorAll
(
"
.
target
-
name
"
)
]
;
let
initialTabCount
=
names
.
length
;
let
onNewTab
=
waitForMutation
(
tabsElement
{
childList
:
true
}
)
;
let
newTab
=
yield
addTab
(
TAB_URL
{
background
:
true
}
)
;
yield
onNewTab
;
let
newNames
=
[
.
.
.
tabsElement
.
querySelectorAll
(
"
.
target
-
name
"
)
]
;
newNames
=
newNames
.
filter
(
node
=
>
!
names
.
includes
(
node
)
)
;
is
(
newNames
.
length
1
"
A
new
tab
appeared
in
the
list
"
)
;
let
newTabTarget
=
newNames
[
0
]
;
if
(
newTabTarget
.
textContent
!
=
"
foo
"
)
{
yield
waitForContentMutation
(
newTabTarget
)
;
}
yield
waitUntil
(
(
)
=
>
newTabTarget
.
title
=
=
=
TAB_URL
)
;
is
(
newTabTarget
.
textContent
"
foo
"
"
The
tab
title
got
updated
"
)
;
is
(
newTabTarget
.
title
TAB_URL
"
The
tab
tooltip
is
the
url
"
)
;
let
onTabsUpdate
=
waitForMutation
(
tabsElement
{
childList
:
true
}
)
;
yield
removeTab
(
newTab
)
;
yield
onTabsUpdate
;
names
=
[
.
.
.
tabsElement
.
querySelectorAll
(
"
#
tabs
.
target
-
name
"
)
]
;
is
(
names
.
length
initialTabCount
"
The
tab
disappeared
from
the
UI
"
)
;
yield
closeAboutDebugging
(
tab
)
;
}
)
;
