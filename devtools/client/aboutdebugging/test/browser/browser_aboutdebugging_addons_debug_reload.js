"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
addons
.
js
"
this
)
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
2
)
;
const
ADDON_ID
=
"
test
-
devtools
-
webextension
mozilla
.
org
"
;
const
ADDON_NAME
=
"
test
-
devtools
-
webextension
"
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
toolbox
.
properties
"
)
;
add_task
(
async
function
testWebExtensionToolboxReload
(
)
{
await
enableExtensionDebugging
(
)
;
const
{
document
tab
window
}
=
await
openAboutDebugging
(
)
;
await
selectThisFirefoxPage
(
document
window
.
AboutDebugging
.
store
)
;
await
installTemporaryExtensionFromXPI
(
{
background
:
function
(
)
{
console
.
log
(
"
background
script
executed
"
+
Math
.
random
(
)
)
;
}
id
:
ADDON_ID
name
:
ADDON_NAME
}
document
)
;
const
{
devtoolsTab
devtoolsWindow
}
=
await
openAboutDevtoolsToolbox
(
document
tab
window
ADDON_NAME
)
;
const
toolbox
=
getToolbox
(
devtoolsWindow
)
;
const
webconsole
=
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
const
{
hud
}
=
webconsole
;
info
(
"
Wait
for
the
initial
background
message
to
appear
in
the
console
"
)
;
const
initialMessage
=
await
waitFor
(
(
)
=
>
findMessagesByType
(
hud
"
background
script
executed
"
"
.
console
-
api
"
)
)
;
ok
(
initialMessage
"
Found
the
expected
message
from
the
background
script
"
)
;
const
waitForLoadedPanelsReload
=
await
watchForLoadedPanelsReload
(
toolbox
)
;
info
(
"
Reload
the
addon
using
a
toolbox
reload
shortcut
"
)
;
toolbox
.
win
.
focus
(
)
;
synthesizeKeyShortcut
(
L10N
.
getStr
(
"
toolbox
.
reload
.
key
"
)
toolbox
.
win
)
;
info
(
"
Wait
until
a
new
background
log
message
is
logged
"
)
;
await
waitFor
(
(
)
=
>
{
const
newMessage
=
findMessagesByType
(
hud
"
background
script
executed
"
"
.
console
-
api
"
)
;
return
newMessage
&
&
newMessage
!
=
=
initialMessage
;
}
)
;
await
waitForLoadedPanelsReload
(
)
;
await
closeAboutDevtoolsToolbox
(
document
devtoolsTab
window
)
;
await
removeTemporaryExtension
(
ADDON_NAME
document
)
;
await
removeTab
(
tab
)
;
}
)
;
