"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
addons
.
js
"
this
)
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
sys
.
mjs
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
const
ADDON_ID
=
"
test
-
devtools
-
webextension
mozilla
.
org
"
;
const
ADDON_NAME
=
"
test
-
devtools
-
webextension
"
;
add_task
(
async
function
testNodePickerInExtensionPopup
(
)
{
await
enableExtensionDebugging
(
)
;
const
{
document
tab
window
}
=
await
openAboutDebugging
(
)
;
await
selectThisFirefoxPage
(
document
window
.
AboutDebugging
.
store
)
;
await
installTemporaryExtensionFromXPI
(
{
extraProperties
:
{
browser_action
:
{
default_title
:
"
WebExtension
with
popup
"
default_popup
:
"
popup
.
html
"
default_area
:
"
navbar
"
}
}
files
:
{
"
popup
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
body
>
<
div
id
=
"
pick
-
me
"
style
=
"
width
:
100px
;
height
:
60px
;
background
-
color
:
#
f5e8fc
"
>
Pick
me
!
<
/
div
>
<
/
body
>
<
/
html
>
}
id
:
ADDON_ID
name
:
ADDON_NAME
}
document
)
;
const
{
devtoolsWindow
}
=
await
openAboutDevtoolsToolbox
(
document
tab
window
ADDON_NAME
)
;
const
toolbox
=
getToolbox
(
devtoolsWindow
)
;
const
inspector
=
await
toolbox
.
getPanel
(
"
inspector
"
)
;
info
(
"
Start
the
node
picker
"
)
;
await
toolbox
.
nodePicker
.
start
(
)
;
info
(
"
Open
the
webextension
popup
"
)
;
const
nodePickerRestarted
=
toolbox
.
nodePicker
.
once
(
"
node
-
picker
-
webextension
-
target
-
restarted
"
)
;
const
reloaded
=
inspector
.
once
(
"
reloaded
"
)
;
clickOnAddonWidget
(
ADDON_ID
)
;
await
reloaded
;
await
nodePickerRestarted
;
const
popup
=
await
waitFor
(
(
)
=
>
gBrowser
.
ownerDocument
.
querySelector
(
"
.
webextension
-
popup
-
browser
"
)
)
;
info
(
"
Pick
an
element
inside
the
webextension
popup
"
)
;
const
onNewNodeFront
=
inspector
.
selection
.
once
(
"
new
-
node
-
front
"
)
;
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
pick
-
me
"
{
}
popup
.
browsingContext
)
;
const
nodeFront
=
await
onNewNodeFront
;
is
(
nodeFront
.
id
"
pick
-
me
"
"
The
expected
node
front
was
selected
"
)
;
await
closeWebExtAboutDevtoolsToolbox
(
devtoolsWindow
window
)
;
await
removeTemporaryExtension
(
ADDON_NAME
document
)
;
await
removeTab
(
tab
)
;
}
)
;
