"
use
strict
"
;
async
function
enableServiceWorkerDebugging
(
)
{
await
pushPref
(
"
dom
.
serviceWorkers
.
enabled
"
true
)
;
await
pushPref
(
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
)
;
await
pushPref
(
"
dom
.
ipc
.
processCount
"
1
)
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
}
function
onTabMessage
(
tab
message
)
{
const
mm
=
tab
.
linkedBrowser
.
messageManager
;
return
new
Promise
(
resolve
=
>
{
mm
.
addMessageListener
(
message
function
listener
(
)
{
mm
.
removeMessageListener
(
message
listener
)
;
resolve
(
)
;
}
)
;
}
)
;
}
async
function
_waitForServiceWorkerStatus
(
workerText
status
document
)
{
await
waitUntil
(
(
)
=
>
{
const
target
=
findDebugTargetByText
(
workerText
document
)
;
const
statusElement
=
target
&
&
target
.
querySelector
(
"
.
qa
-
worker
-
status
"
)
;
return
statusElement
&
&
statusElement
.
textContent
=
=
=
status
;
}
)
;
return
findDebugTargetByText
(
workerText
document
)
;
}
async
function
waitForServiceWorkerStopped
(
workerText
document
)
{
return
_waitForServiceWorkerStatus
(
workerText
"
Stopped
"
document
)
;
}
async
function
waitForServiceWorkerRunning
(
workerText
document
)
{
return
_waitForServiceWorkerStatus
(
workerText
"
Running
"
document
)
;
}
async
function
waitForServiceWorkerRegistering
(
workerText
document
)
{
return
_waitForServiceWorkerStatus
(
workerText
"
Registering
"
document
)
;
}
async
function
waitForRegistration
(
tab
)
{
info
(
"
Wait
until
the
registration
appears
on
the
window
"
)
;
const
swBrowser
=
tab
.
linkedBrowser
;
await
asyncWaitUntil
(
async
(
)
=
>
SpecialPowers
.
spawn
(
swBrowser
[
]
async
function
(
)
{
return
!
!
(
await
content
.
wrappedJSObject
.
getRegistration
(
)
)
;
}
)
)
;
}
function
forwardServiceWorkerMessage
(
tab
)
{
info
(
"
Make
the
test
page
notify
us
when
the
service
worker
sends
a
message
.
"
)
;
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
function
(
)
{
const
win
=
content
.
wrappedJSObject
;
win
.
navigator
.
serviceWorker
.
addEventListener
(
"
message
"
function
(
event
)
{
sendAsyncMessage
(
event
.
data
)
;
}
)
;
}
)
;
}
async
function
unregisterServiceWorker
(
tab
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
function
(
)
{
const
win
=
content
.
wrappedJSObject
;
is
(
typeof
win
.
getRegistration
"
function
"
"
getRegistration
is
a
valid
function
"
)
;
win
.
getRegistration
(
)
.
unregister
(
)
;
}
)
;
}
