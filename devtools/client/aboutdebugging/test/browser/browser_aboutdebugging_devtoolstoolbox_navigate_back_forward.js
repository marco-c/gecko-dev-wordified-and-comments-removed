"
use
strict
"
;
const
ORIGINAL_URL
=
"
about
:
home
"
;
const
OTHER_URL
=
"
about
:
blank
"
;
async
function
waitForUrl
(
url
toolbox
browserTab
win
)
{
const
{
onDomCompleteResource
}
=
await
waitForNextTopLevelDomCompleteResource
(
toolbox
.
commands
)
;
return
Promise
.
all
(
[
waitUntil
(
(
)
=
>
toolbox
.
target
.
url
=
=
=
url
&
&
browserTab
.
linkedBrowser
.
currentURI
.
spec
=
=
=
url
)
onDomCompleteResource
toolbox
.
commands
.
client
.
waitForRequestsToSettle
(
)
waitForAboutDebuggingRequests
(
win
.
AboutDebugging
.
store
)
]
)
;
}
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
fission
.
bfcacheInParent
"
false
]
]
}
)
;
const
browserTab
=
await
addTab
(
ORIGINAL_URL
)
;
const
{
document
tab
window
}
=
await
openAboutDebugging
(
)
;
info
(
"
Inspecting
a
new
tab
in
This
Firefox
"
)
;
await
selectThisFirefoxPage
(
document
window
.
AboutDebugging
.
store
)
;
const
devToolsToolbox
=
await
openAboutDevtoolsToolbox
(
document
tab
window
ORIGINAL_URL
)
;
const
{
devtoolsDocument
devtoolsWindow
}
=
devToolsToolbox
;
const
toolbox
=
getToolbox
(
devtoolsWindow
)
;
info
(
"
Navigating
to
another
URL
"
)
;
const
urlInput
=
devtoolsDocument
.
querySelector
(
"
.
devtools
-
textinput
"
)
;
await
synthesizeUrlKeyInput
(
devToolsToolbox
urlInput
OTHER_URL
)
;
await
waitForUrl
(
OTHER_URL
toolbox
browserTab
window
)
;
info
(
"
Clicking
back
button
"
)
;
devtoolsDocument
.
querySelector
(
"
.
qa
-
back
-
button
"
)
.
click
(
)
;
await
waitForUrl
(
ORIGINAL_URL
toolbox
browserTab
window
)
;
info
(
"
Clicking
the
forward
button
"
)
;
devtoolsDocument
.
querySelector
(
"
.
qa
-
forward
-
button
"
)
.
click
(
)
;
await
waitForUrl
(
OTHER_URL
toolbox
browserTab
window
)
;
ok
(
true
"
Clicking
back
and
forward
works
!
"
)
;
}
)
;
