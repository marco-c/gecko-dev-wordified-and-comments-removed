"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
TEST_DATA
=
[
{
serviceWorkersEnabled
:
true
privateBrowsingEnabled
:
false
expectedMessage
:
false
}
{
serviceWorkersEnabled
:
false
privateBrowsingEnabled
:
false
expectedMessage
:
true
}
{
serviceWorkersEnabled
:
true
privateBrowsingEnabled
:
true
expectedMessage
:
true
}
{
serviceWorkersEnabled
:
false
privateBrowsingEnabled
:
true
expectedMessage
:
true
}
]
;
add_task
(
async
function
testLocalRuntime
(
)
{
for
(
const
testData
of
TEST_DATA
)
{
const
{
serviceWorkersEnabled
privateBrowsingEnabled
expectedMessage
}
=
testData
;
info
(
Test
warning
message
on
this
-
firefox
+
with
serviceWorkersEnabled
:
{
serviceWorkersEnabled
}
+
and
with
privateBrowsingEnabled
:
{
privateBrowsingEnabled
}
)
;
await
pushPref
(
"
dom
.
serviceWorkers
.
enabled
"
serviceWorkersEnabled
)
;
await
pushPref
(
"
browser
.
privatebrowsing
.
autostart
"
privateBrowsingEnabled
)
;
const
{
document
tab
window
}
=
await
openAboutDebugging
(
{
enableWorkerUpdates
:
false
}
)
;
await
selectThisFirefoxPage
(
document
window
.
AboutDebugging
.
store
)
;
assertWarningMessage
(
document
expectedMessage
)
;
await
removeTab
(
tab
)
;
}
}
)
;
add_task
(
async
function
testRemoteRuntime
(
)
{
const
{
remoteClientManager
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
remote
-
debugging
/
remote
-
client
-
manager
.
js
"
)
;
const
mocks
=
new
Mocks
(
)
;
const
client
=
mocks
.
createUSBRuntime
(
"
1337id
"
{
deviceName
:
"
Fancy
Phone
"
name
:
"
Lorem
ipsum
"
}
)
;
for
(
const
testData
of
TEST_DATA
)
{
const
{
serviceWorkersEnabled
privateBrowsingEnabled
expectedMessage
}
=
testData
;
info
(
Test
warning
message
on
mocked
USB
runtime
+
with
serviceWorkersEnabled
:
{
serviceWorkersEnabled
}
+
and
with
privateBrowsingEnabled
:
{
privateBrowsingEnabled
}
)
;
client
.
setPreference
(
"
dom
.
serviceWorkers
.
enabled
"
serviceWorkersEnabled
)
;
client
.
setPreference
(
"
browser
.
privatebrowsing
.
autostart
"
privateBrowsingEnabled
)
;
const
{
document
tab
window
}
=
await
openAboutDebugging
(
{
enableWorkerUpdates
:
false
}
)
;
await
selectThisFirefoxPage
(
document
window
.
AboutDebugging
.
store
)
;
info
(
"
Checking
a
USB
runtime
"
)
;
mocks
.
emitUSBUpdate
(
)
;
await
connectToRuntime
(
"
Fancy
Phone
"
document
)
;
await
selectRuntime
(
"
Fancy
Phone
"
"
Lorem
ipsum
"
document
)
;
assertWarningMessage
(
document
expectedMessage
)
;
info
(
"
Remove
all
remote
clients
"
)
;
await
remoteClientManager
.
removeAllClients
(
)
;
await
removeTab
(
tab
)
;
}
}
)
;
function
assertWarningMessage
(
doc
expectedMessage
)
{
const
hasMessage
=
!
!
doc
.
querySelector
(
"
.
qa
-
service
-
workers
-
warning
"
)
;
ok
(
hasMessage
=
=
=
expectedMessage
expectedMessage
?
"
Warning
message
is
displayed
"
:
"
Warning
message
is
not
displayed
"
)
;
}
