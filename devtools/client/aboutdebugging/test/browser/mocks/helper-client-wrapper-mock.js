"
use
strict
"
;
const
{
RUNTIME_PREFERENCE
}
=
require
(
"
devtools
/
client
/
aboutdebugging
/
src
/
constants
"
)
;
const
DEFAULT_PREFERENCES
=
{
[
RUNTIME_PREFERENCE
.
CONNECTION_PROMPT
]
:
true
[
RUNTIME_PREFERENCE
.
PERMANENT_PRIVATE_BROWSING
]
:
false
[
RUNTIME_PREFERENCE
.
SERVICE_WORKERS_ENABLED
]
:
true
}
;
function
createClientMock
(
)
{
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
eventEmitter
=
{
}
;
EventEmitter
.
decorate
(
eventEmitter
)
;
return
{
_eventEmitter
:
eventEmitter
_preferences
:
{
}
contentProcessFronts
:
[
]
serviceWorkerRegistrationFronts
:
[
]
once
:
(
evt
listener
)
=
>
{
eventEmitter
.
once
(
evt
listener
)
;
}
on
:
(
evt
listener
)
=
>
{
eventEmitter
.
on
(
evt
listener
)
;
}
off
:
(
evt
listener
)
=
>
{
eventEmitter
.
off
(
evt
listener
)
;
}
client
:
{
once
:
(
evt
listener
)
=
>
{
eventEmitter
.
once
(
evt
listener
)
;
}
on
:
(
evt
listener
)
=
>
{
eventEmitter
.
on
(
evt
listener
)
;
}
off
:
(
evt
listener
)
=
>
{
eventEmitter
.
off
(
evt
listener
)
;
}
}
close
:
(
)
=
>
{
}
isClosed
:
(
)
=
>
false
connect
:
(
)
=
>
{
}
getDeviceDescription
:
(
)
=
>
{
}
getPreference
:
function
(
prefName
)
{
if
(
prefName
in
this
.
_preferences
)
{
return
this
.
_preferences
[
prefName
]
;
}
if
(
prefName
in
DEFAULT_PREFERENCES
)
{
return
DEFAULT_PREFERENCES
[
prefName
]
;
}
return
null
;
}
listAddons
:
(
)
=
>
[
]
listProcesses
:
(
)
=
>
[
]
listTabs
:
(
)
=
>
[
]
listWorkers
:
(
)
=
>
(
{
otherWorkers
:
[
]
serviceWorkers
:
[
]
sharedWorkers
:
[
]
}
)
getMainProcess
:
(
)
=
>
{
}
getFront
:
(
)
=
>
{
}
setPreference
:
function
(
prefName
value
)
{
this
.
_preferences
[
prefName
]
=
value
;
}
getPerformancePanelUrl
:
(
)
=
>
CHROME_URL_ROOT
+
"
empty
.
html
"
loadPerformanceProfiler
:
(
)
=
>
{
}
checkVersionCompatibility
:
(
)
=
>
{
const
{
COMPATIBILITY_STATUS
}
=
require
(
"
devtools
/
client
/
shared
/
remote
-
debugging
/
version
-
checker
"
)
;
return
{
status
:
COMPATIBILITY_STATUS
.
COMPATIBLE
}
;
}
}
;
}
function
createThisFirefoxClientMock
(
)
{
const
mockThisFirefoxDescription
=
{
name
:
"
Firefox
"
channel
:
"
nightly
"
version
:
"
63
.
0
"
}
;
const
mockAboutDebuggingTab
=
{
retrieveAsyncFormData
:
(
)
=
>
{
}
outerWindowID
:
0
traits
:
{
getFavicon
:
true
}
url
:
"
about
:
debugging
"
}
;
const
mockThisFirefoxClient
=
createClientMock
(
)
;
mockThisFirefoxClient
.
listTabs
=
(
)
=
>
[
mockAboutDebuggingTab
]
;
mockThisFirefoxClient
.
getDeviceDescription
=
(
)
=
>
mockThisFirefoxDescription
;
return
mockThisFirefoxClient
;
}
