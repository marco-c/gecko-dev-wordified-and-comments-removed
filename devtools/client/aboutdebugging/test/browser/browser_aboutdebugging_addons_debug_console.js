"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
addons
.
js
"
this
)
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
File
closed
/
)
;
requestLongerTimeout
(
2
)
;
const
ADDON_ID
=
"
test
-
devtools
-
webextension
mozilla
.
org
"
;
const
ADDON_NAME
=
"
test
-
devtools
-
webextension
"
;
add_task
(
async
function
testWebExtensionsToolboxWebConsole
(
)
{
await
enableExtensionDebugging
(
)
;
const
{
document
tab
window
}
=
await
openAboutDebugging
(
)
;
await
selectThisFirefoxPage
(
document
window
.
AboutDebugging
.
store
)
;
await
installTemporaryExtensionFromXPI
(
{
background
:
function
(
)
{
window
.
myWebExtensionAddonFunction
=
function
(
)
{
console
.
log
(
"
Background
page
function
called
"
this
.
browser
.
runtime
.
getManifest
(
)
)
;
}
;
}
id
:
ADDON_ID
name
:
ADDON_NAME
}
document
)
;
const
{
devtoolsTab
devtoolsWindow
}
=
await
openAboutDevtoolsToolbox
(
document
tab
window
ADDON_NAME
)
;
const
toolbox
=
getToolbox
(
devtoolsWindow
)
;
const
onToolboxClose
=
gDevTools
.
once
(
"
toolbox
-
destroyed
"
)
;
toolboxTestScript
(
toolbox
devtoolsTab
)
;
info
(
"
Wait
for
the
toolbox
to
close
"
)
;
await
onToolboxClose
;
ok
(
true
"
Addon
toolbox
closed
"
)
;
await
removeTemporaryExtension
(
ADDON_NAME
document
)
;
await
removeTab
(
tab
)
;
}
)
;
async
function
toolboxTestScript
(
toolbox
devtoolsTab
)
{
function
findMessages
(
hud
text
selector
=
"
.
message
"
)
{
const
messages
=
hud
.
ui
.
outputNode
.
querySelectorAll
(
selector
)
;
const
elements
=
Array
.
prototype
.
filter
.
call
(
messages
el
=
>
el
.
textContent
.
includes
(
text
)
)
;
return
elements
;
}
const
webconsole
=
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
const
{
hud
}
=
webconsole
;
const
onMessage
=
waitUntil
(
(
)
=
>
{
return
findMessages
(
hud
"
Background
page
function
called
"
)
.
length
>
0
;
}
)
;
hud
.
ui
.
wrapper
.
dispatchEvaluateExpression
(
"
myWebExtensionAddonFunction
(
)
"
)
;
await
onMessage
;
info
(
"
Wait
for
all
pending
requests
to
settle
on
the
DevToolsClient
"
)
;
await
toolbox
.
target
.
client
.
waitForRequestsToSettle
(
)
;
await
removeTab
(
devtoolsTab
)
;
}
