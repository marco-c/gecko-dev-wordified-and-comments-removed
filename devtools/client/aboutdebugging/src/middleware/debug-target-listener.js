"
use
strict
"
;
const
{
EXTENSION_BGSCRIPT_STATUSES
EXTENSION_BGSCRIPT_STATUS_UPDATED
UNWATCH_RUNTIME_START
WATCH_RUNTIME_SUCCESS
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
aboutdebugging
/
src
/
constants
.
js
"
)
;
const
Actions
=
require
(
"
resource
:
/
/
devtools
/
client
/
aboutdebugging
/
src
/
actions
/
index
.
js
"
)
;
const
RootResourceCommand
=
require
(
"
resource
:
/
/
devtools
/
shared
/
commands
/
root
-
resource
/
root
-
resource
-
command
.
js
"
)
;
function
debugTargetListenerMiddleware
(
store
)
{
const
onExtensionsUpdated
=
(
)
=
>
{
store
.
dispatch
(
Actions
.
requestExtensions
(
)
)
;
}
;
const
onTabsUpdated
=
(
)
=
>
{
store
.
dispatch
(
Actions
.
requestTabs
(
)
)
;
}
;
const
onWorkersUpdated
=
(
)
=
>
{
store
.
dispatch
(
Actions
.
requestWorkers
(
)
)
;
}
;
let
rootResourceCommand
;
function
onExtensionsBackgroundScriptStatusAvailable
(
resources
)
{
for
(
const
resource
of
resources
)
{
const
backgroundScriptStatus
=
resource
.
payload
.
isRunning
?
EXTENSION_BGSCRIPT_STATUSES
.
RUNNING
:
EXTENSION_BGSCRIPT_STATUSES
.
STOPPED
;
store
.
dispatch
(
{
type
:
EXTENSION_BGSCRIPT_STATUS_UPDATED
id
:
resource
.
payload
.
addonId
backgroundScriptStatus
}
)
;
}
}
return
next
=
>
async
action
=
>
{
switch
(
action
.
type
)
{
case
WATCH_RUNTIME_SUCCESS
:
{
const
{
runtime
}
=
action
;
const
{
clientWrapper
}
=
runtime
.
runtimeDetails
;
rootResourceCommand
=
clientWrapper
.
createRootResourceCommand
(
)
;
await
rootResourceCommand
.
watchResources
(
[
RootResourceCommand
.
TYPES
.
EXTENSIONS_BGSCRIPT_STATUS
]
{
onAvailable
:
onExtensionsBackgroundScriptStatusAvailable
}
)
.
catch
(
e
=
>
{
console
.
error
(
e
)
;
}
)
;
clientWrapper
.
on
(
"
tabListChanged
"
onTabsUpdated
)
;
clientWrapper
.
on
(
"
addonListChanged
"
onExtensionsUpdated
)
;
clientWrapper
.
on
(
"
workersUpdated
"
onWorkersUpdated
)
;
break
;
}
case
UNWATCH_RUNTIME_START
:
{
const
{
runtime
}
=
action
;
const
{
clientWrapper
}
=
runtime
.
runtimeDetails
;
try
{
rootResourceCommand
?
.
unwatchResources
(
[
RootResourceCommand
.
TYPES
.
EXTENSIONS_BGSCRIPT_STATUS
]
{
onAvailable
:
onExtensionsBackgroundScriptStatusAvailable
}
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
clientWrapper
.
off
(
"
tabListChanged
"
onTabsUpdated
)
;
clientWrapper
.
off
(
"
addonListChanged
"
onExtensionsUpdated
)
;
clientWrapper
.
off
(
"
workersUpdated
"
onWorkersUpdated
)
;
break
;
}
}
return
next
(
action
)
;
}
;
}
module
.
exports
=
debugTargetListenerMiddleware
;
