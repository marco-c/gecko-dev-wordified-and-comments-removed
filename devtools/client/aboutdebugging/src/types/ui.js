"
use
strict
"
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
mjs
"
)
;
const
{
ADB_ADDON_STATES
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
remote
-
debugging
/
adb
/
adb
-
addon
.
js
"
)
;
const
{
DEBUG_TARGET_PANE
PAGE_TYPES
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
aboutdebugging
/
src
/
constants
.
js
"
)
;
function
makeCollapsibilitiesType
(
isRequired
)
{
return
(
props
propName
componentName
_
propFullName
)
=
>
{
if
(
isRequired
&
&
props
[
propName
]
=
=
=
null
)
{
return
new
Error
(
Missing
prop
{
propFullName
}
marked
as
required
in
{
componentName
}
)
;
}
const
error
=
new
Error
(
Invalid
prop
{
propFullName
}
(
{
props
[
propName
]
}
)
supplied
to
+
{
componentName
}
.
Collapsibilities
needs
to
be
a
Map
<
DEBUG_TARGET_PANE
bool
>
)
;
const
map
=
props
[
propName
]
;
if
(
!
(
map
instanceof
Map
)
)
{
return
error
;
}
const
areKeysValid
=
[
.
.
.
map
.
keys
(
)
]
.
every
(
x
=
>
Object
.
values
(
DEBUG_TARGET_PANE
)
.
includes
(
x
)
)
;
const
areValuesValid
=
[
.
.
.
map
.
values
(
)
]
.
every
(
x
=
>
typeof
x
=
=
=
"
boolean
"
)
;
if
(
!
areKeysValid
|
|
!
areValuesValid
)
{
return
error
;
}
return
null
;
}
;
}
function
makeLocationType
(
isRequired
)
{
return
(
props
propName
componentName
_
propFullName
)
=
>
{
if
(
isRequired
&
&
props
[
propName
]
=
=
=
null
)
{
return
new
Error
(
Missing
prop
{
propFullName
}
marked
as
required
in
{
componentName
}
)
;
}
if
(
!
/
\
:
/
.
test
(
props
[
propName
]
)
)
{
return
new
Error
(
Invalid
prop
{
propFullName
}
(
{
props
[
propName
]
}
)
supplied
to
+
{
componentName
}
.
Location
needs
to
be
a
string
with
a
host
:
port
format
)
;
}
return
null
;
}
;
}
const
collapsibilities
=
makeCollapsibilitiesType
(
false
)
;
collapsibilities
.
isRequired
=
makeCollapsibilitiesType
(
true
)
;
const
location
=
makeLocationType
(
false
)
;
location
.
isRequired
=
makeLocationType
(
true
)
;
module
.
exports
=
{
adbAddonStatus
:
PropTypes
.
oneOf
(
Object
.
values
(
ADB_ADDON_STATES
)
)
collapsibilities
location
page
:
PropTypes
.
oneOf
(
Object
.
values
(
PAGE_TYPES
)
)
}
;
