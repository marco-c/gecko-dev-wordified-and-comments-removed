"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
Localized
=
createFactory
(
FluentReact
.
Localized
)
;
const
Actions
=
require
(
"
devtools
/
client
/
aboutdebugging
/
src
/
actions
/
index
"
)
;
const
Types
=
require
(
"
devtools
/
client
/
aboutdebugging
/
src
/
types
/
index
"
)
;
class
ProfilerDialog
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
runtimeDetails
:
Types
.
runtimeDetails
.
isRequired
dispatch
:
PropTypes
.
func
.
isRequired
}
;
}
hide
(
)
{
this
.
props
.
dispatch
(
Actions
.
hideProfilerDialog
(
)
)
;
}
render
(
)
{
const
{
clientWrapper
}
=
this
.
props
.
runtimeDetails
;
return
dom
.
div
(
{
className
:
"
profiler
-
dialog__mask
qa
-
profiler
-
dialog
-
mask
"
onClick
:
(
)
=
>
this
.
hide
(
)
}
dom
.
article
(
{
className
:
"
profiler
-
dialog__inner
qa
-
profiler
-
dialog
"
onClick
:
e
=
>
e
.
stopPropagation
(
)
}
dom
.
header
(
{
className
:
"
profiler
-
dialog__header
"
}
Localized
(
{
id
:
"
about
-
debugging
-
profiler
-
dialog
-
title2
"
}
dom
.
h1
(
{
className
:
"
profiler
-
dialog__header__title
"
}
"
about
-
debugging
-
profiler
-
dialog
-
title2
"
)
)
dom
.
button
(
{
className
:
"
ghost
-
button
qa
-
profiler
-
dialog
-
close
"
onClick
:
(
)
=
>
this
.
hide
(
)
}
dom
.
img
(
{
src
:
"
chrome
:
/
/
devtools
/
skin
/
images
/
close
.
svg
"
}
)
)
)
dom
.
iframe
(
{
className
:
"
profiler
-
dialog__frame
"
src
:
clientWrapper
.
getPerformancePanelUrl
(
)
onLoad
:
e
=
>
{
clientWrapper
.
loadPerformanceProfiler
(
e
.
target
.
contentWindow
)
;
}
}
)
)
)
;
}
}
module
.
exports
=
ProfilerDialog
;
