"
use
strict
"
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
Localized
=
createFactory
(
FluentReact
.
Localized
)
;
const
Route
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
router
-
dom
"
)
.
Route
)
;
const
Switch
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
router
-
dom
"
)
.
Switch
)
;
const
Redirect
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
router
-
dom
"
)
.
Redirect
)
;
const
Types
=
require
(
"
devtools
/
client
/
aboutdebugging
/
src
/
types
/
index
"
)
;
const
{
PAGE_TYPES
RUNTIMES
}
=
require
(
"
devtools
/
client
/
aboutdebugging
/
src
/
constants
"
)
;
const
ConnectPage
=
createFactory
(
require
(
"
devtools
/
client
/
aboutdebugging
/
src
/
components
/
connect
/
ConnectPage
"
)
)
;
const
RuntimePage
=
createFactory
(
require
(
"
devtools
/
client
/
aboutdebugging
/
src
/
components
/
RuntimePage
"
)
)
;
const
Sidebar
=
createFactory
(
require
(
"
devtools
/
client
/
aboutdebugging
/
src
/
components
/
sidebar
/
Sidebar
"
)
)
;
class
App
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
adbAddonStatus
:
Types
.
adbAddonStatus
dispatch
:
PropTypes
.
func
.
isRequired
getString
:
PropTypes
.
func
.
isRequired
isAdbReady
:
PropTypes
.
bool
.
isRequired
isScanningUsb
:
PropTypes
.
bool
.
isRequired
networkLocations
:
PropTypes
.
arrayOf
(
Types
.
location
)
.
isRequired
networkRuntimes
:
PropTypes
.
arrayOf
(
Types
.
runtime
)
.
isRequired
selectedPage
:
Types
.
page
selectedRuntimeId
:
PropTypes
.
string
usbRuntimes
:
PropTypes
.
arrayOf
(
Types
.
runtime
)
.
isRequired
}
;
}
componentDidUpdate
(
)
{
this
.
updateTitle
(
)
;
}
updateTitle
(
)
{
const
{
getString
selectedPage
selectedRuntimeId
}
=
this
.
props
;
const
pageTitle
=
selectedPage
=
=
=
PAGE_TYPES
.
RUNTIME
?
getString
(
"
about
-
debugging
-
page
-
title
-
runtime
-
page
"
{
selectedRuntimeId
}
)
:
getString
(
"
about
-
debugging
-
page
-
title
-
setup
-
page
"
)
;
document
.
title
=
pageTitle
;
}
renderConnect
(
)
{
const
{
adbAddonStatus
dispatch
networkLocations
}
=
this
.
props
;
return
ConnectPage
(
{
adbAddonStatus
dispatch
networkLocations
}
)
;
}
renderRuntime
(
{
match
}
)
{
const
isRuntimeAvailable
=
id
=
>
{
const
runtimes
=
[
.
.
.
this
.
props
.
networkRuntimes
.
.
.
this
.
props
.
usbRuntimes
]
;
const
runtime
=
runtimes
.
find
(
x
=
>
x
.
id
=
=
=
id
)
;
return
runtime
&
&
runtime
.
runtimeDetails
;
}
;
const
{
dispatch
}
=
this
.
props
;
let
runtimeId
=
match
.
params
.
runtimeId
|
|
RUNTIMES
.
THIS_FIREFOX
;
if
(
match
.
params
.
runtimeId
!
=
=
RUNTIMES
.
THIS_FIREFOX
)
{
const
rawId
=
decodeURIComponent
(
match
.
params
.
runtimeId
)
;
if
(
isRuntimeAvailable
(
rawId
)
)
{
runtimeId
=
rawId
;
}
else
{
return
Redirect
(
{
to
:
/
runtime
/
{
RUNTIMES
.
THIS_FIREFOX
}
}
)
;
}
}
return
RuntimePage
(
{
dispatch
key
:
runtimeId
runtimeId
}
)
;
}
renderRoutes
(
)
{
return
Switch
(
{
}
Route
(
{
path
:
"
/
setup
"
render
:
(
)
=
>
this
.
renderConnect
(
)
}
)
Route
(
{
path
:
"
/
runtime
/
:
runtimeId
"
render
:
routeProps
=
>
this
.
renderRuntime
(
routeProps
)
}
)
Route
(
{
render
:
routeProps
=
>
{
const
{
pathname
}
=
routeProps
.
location
;
if
(
pathname
=
=
=
"
/
workers
"
|
|
pathname
=
=
=
"
/
addons
"
|
|
pathname
=
=
=
"
/
tabs
"
)
{
return
Redirect
(
{
to
:
/
runtime
/
{
RUNTIMES
.
THIS_FIREFOX
}
}
)
;
}
return
Redirect
(
{
to
:
"
/
setup
"
}
)
;
}
}
)
)
;
}
render
(
)
{
const
{
adbAddonStatus
dispatch
isAdbReady
isScanningUsb
networkRuntimes
selectedPage
selectedRuntimeId
usbRuntimes
}
=
this
.
props
;
return
Localized
(
{
}
dom
.
div
(
{
className
:
"
app
"
}
Sidebar
(
{
adbAddonStatus
className
:
"
app__sidebar
"
dispatch
isAdbReady
isScanningUsb
networkRuntimes
selectedPage
selectedRuntimeId
usbRuntimes
}
)
dom
.
main
(
{
className
:
"
app__content
"
}
this
.
renderRoutes
(
)
)
)
)
;
}
}
const
mapStateToProps
=
state
=
>
{
return
{
adbAddonStatus
:
state
.
ui
.
adbAddonStatus
isAdbReady
:
state
.
ui
.
isAdbReady
isScanningUsb
:
state
.
ui
.
isScanningUsb
networkLocations
:
state
.
ui
.
networkLocations
networkRuntimes
:
state
.
runtimes
.
networkRuntimes
selectedPage
:
state
.
ui
.
selectedPage
selectedRuntimeId
:
state
.
runtimes
.
selectedRuntimeId
usbRuntimes
:
state
.
runtimes
.
usbRuntimes
}
;
}
;
const
mapDispatchToProps
=
dispatch
=
>
(
{
dispatch
}
)
;
module
.
exports
=
FluentReact
.
withLocalization
(
connect
(
mapStateToProps
mapDispatchToProps
)
(
App
)
)
;
