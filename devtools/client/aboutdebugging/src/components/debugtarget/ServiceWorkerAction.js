"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
{
connect
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
redux
.
js
"
)
;
const
FluentReact
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
.
js
"
)
;
const
Localized
=
createFactory
(
FluentReact
.
Localized
)
;
const
{
getCurrentRuntimeDetails
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
aboutdebugging
/
src
/
modules
/
runtimes
-
state
-
helper
.
js
"
)
;
const
InspectAction
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
aboutdebugging
/
src
/
components
/
debugtarget
/
InspectAction
.
js
"
)
)
;
const
Types
=
require
(
"
resource
:
/
/
devtools
/
client
/
aboutdebugging
/
src
/
types
/
index
.
js
"
)
;
const
{
SERVICE_WORKER_STATUSES
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
aboutdebugging
/
src
/
constants
.
js
"
)
;
class
ServiceWorkerAction
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
dispatch
:
PropTypes
.
func
.
isRequired
runtimeDetails
:
Types
.
runtimeDetails
.
isRequired
target
:
Types
.
debugTarget
.
isRequired
}
;
}
_renderInspectAction
(
)
{
const
{
status
}
=
this
.
props
.
target
.
details
;
const
shallRenderInspectAction
=
status
=
=
=
SERVICE_WORKER_STATUSES
.
RUNNING
|
|
status
=
=
=
SERVICE_WORKER_STATUSES
.
REGISTERING
;
if
(
!
shallRenderInspectAction
)
{
return
null
;
}
const
{
canDebugServiceWorkers
}
=
this
.
props
.
runtimeDetails
;
return
Localized
(
{
id
:
"
about
-
debugging
-
worker
-
inspect
-
action
-
disabled
"
attrs
:
{
title
:
!
canDebugServiceWorkers
}
}
InspectAction
(
{
disabled
:
!
canDebugServiceWorkers
dispatch
:
this
.
props
.
dispatch
target
:
this
.
props
.
target
}
)
)
;
}
_getStatusLocalizationId
(
status
)
{
switch
(
status
)
{
case
SERVICE_WORKER_STATUSES
.
REGISTERING
.
toLowerCase
(
)
:
return
"
about
-
debugging
-
worker
-
status
-
registering
"
;
case
SERVICE_WORKER_STATUSES
.
RUNNING
.
toLowerCase
(
)
:
return
"
about
-
debugging
-
worker
-
status
-
running
"
;
case
SERVICE_WORKER_STATUSES
.
STOPPED
.
toLowerCase
(
)
:
return
"
about
-
debugging
-
worker
-
status
-
stopped
"
;
default
:
return
"
about
-
debugging
-
worker
-
status
-
stopped
"
;
}
}
_renderStatus
(
)
{
const
status
=
this
.
props
.
target
.
details
.
status
.
toLowerCase
(
)
;
const
statusClassName
=
status
=
=
=
SERVICE_WORKER_STATUSES
.
RUNNING
.
toLowerCase
(
)
?
"
service
-
worker
-
action__status
-
-
running
"
:
"
"
;
return
Localized
(
{
id
:
this
.
_getStatusLocalizationId
(
status
)
}
dom
.
span
(
{
className
:
service
-
worker
-
action__status
qa
-
worker
-
status
{
statusClassName
}
}
status
)
)
;
}
render
(
)
{
return
dom
.
div
(
{
className
:
"
service
-
worker
-
action
"
}
this
.
_renderStatus
(
)
this
.
_renderInspectAction
(
)
)
;
}
}
const
mapStateToProps
=
state
=
>
{
return
{
runtimeDetails
:
getCurrentRuntimeDetails
(
state
.
runtimes
)
}
;
}
;
module
.
exports
=
connect
(
mapStateToProps
)
(
ServiceWorkerAction
)
;
