"
use
strict
"
;
const
PREFERENCE_TYPES
=
{
BOOL
:
"
BOOL
"
CHAR
:
"
CHAR
"
INT
:
"
INT
"
}
;
exports
.
PREFERENCE_TYPES
=
PREFERENCE_TYPES
;
const
DEFAULT_PREFERENCES
=
[
]
;
exports
.
DEFAULT_PREFERENCES
=
DEFAULT_PREFERENCES
;
const
METHODS
=
{
[
PREFERENCE_TYPES
.
BOOL
]
:
{
setPref
:
"
setBoolPref
"
getPref
:
"
getBoolPref
"
}
[
PREFERENCE_TYPES
.
CHAR
]
:
{
setPref
:
"
setCharPref
"
getPref
:
"
getCharPref
"
}
[
PREFERENCE_TYPES
.
INT
]
:
{
setPref
:
"
setIntPref
"
getPref
:
"
getIntPref
"
}
}
;
async
function
setDefaultPreferencesIfNeeded
(
clientWrapper
prefDescriptors
)
{
if
(
!
prefDescriptors
|
|
prefDescriptors
.
length
=
=
=
0
)
{
return
;
}
const
preferenceFront
=
await
clientWrapper
.
getFront
(
"
preference
"
)
;
const
preferenceTraits
=
await
preferenceFront
.
getTraits
(
)
;
for
(
const
prefDescriptor
of
prefDescriptors
)
{
if
(
preferenceTraits
[
prefDescriptor
.
trait
]
)
{
continue
;
}
await
setDefaultPreference
(
preferenceFront
prefDescriptor
)
;
}
}
exports
.
setDefaultPreferencesIfNeeded
=
setDefaultPreferencesIfNeeded
;
async
function
setDefaultPreference
(
preferenceFront
prefDescriptor
)
{
const
{
prefName
type
defaultValue
}
=
prefDescriptor
;
if
(
!
Object
.
values
(
PREFERENCE_TYPES
)
.
includes
(
type
)
)
{
throw
new
Error
(
Unsupported
type
for
setDefaultPreference
"
{
type
}
"
)
;
}
const
prefMethods
=
METHODS
[
type
]
;
try
{
await
preferenceFront
[
prefMethods
.
getPref
]
(
prefName
)
;
}
catch
(
e
)
{
console
.
warn
(
Preference
"
{
prefName
}
"
"
is
not
set
on
the
remote
runtime
.
Setting
default
value
.
)
;
await
preferenceFront
[
prefMethods
.
setPref
]
(
prefName
defaultValue
)
;
}
}
