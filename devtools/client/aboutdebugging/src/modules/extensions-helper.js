"
use
strict
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
sys
.
mjs
"
}
)
;
const
{
PREFERENCES
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
aboutdebugging
/
src
/
constants
.
js
"
)
;
exports
.
parseFileUri
=
function
(
url
)
{
const
windowsRegex
=
/
^
file
:
\
/
\
/
\
/
(
[
a
-
zA
-
Z
]
:
\
/
.
*
)
/
;
if
(
windowsRegex
.
test
(
url
)
)
{
return
windowsRegex
.
exec
(
url
)
[
1
]
;
}
return
url
.
slice
(
"
file
:
/
/
"
.
length
)
;
}
;
exports
.
getExtensionUuid
=
function
(
extension
)
{
const
{
manifestURL
}
=
extension
;
return
manifestURL
?
/
moz
-
extension
:
\
/
\
/
(
[
^
/
]
*
)
/
.
exec
(
manifestURL
)
[
1
]
:
null
;
}
;
exports
.
openTemporaryExtension
=
function
(
win
message
)
{
return
new
Promise
(
resolve
=
>
{
const
fp
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
Ci
.
nsIFilePicker
)
;
fp
.
init
(
win
.
browsingContext
message
Ci
.
nsIFilePicker
.
modeOpen
)
;
try
{
const
lastDirPath
=
Services
.
prefs
.
getCharPref
(
PREFERENCES
.
TEMPORARY_EXTENSION_PATH
"
"
)
;
const
lastDir
=
new
lazy
.
FileUtils
.
File
(
lastDirPath
)
;
fp
.
displayDirectory
=
lastDir
;
}
catch
(
e
)
{
}
fp
.
open
(
res
=
>
{
if
(
res
=
=
Ci
.
nsIFilePicker
.
returnCancel
|
|
!
fp
.
file
)
{
return
;
}
let
file
=
fp
.
file
;
if
(
!
file
.
isDirectory
(
)
&
&
!
file
.
leafName
.
endsWith
(
"
.
xpi
"
)
&
&
!
file
.
leafName
.
endsWith
(
"
.
zip
"
)
)
{
file
=
file
.
parent
;
}
Services
.
prefs
.
setCharPref
(
PREFERENCES
.
TEMPORARY_EXTENSION_PATH
file
.
path
)
;
resolve
(
file
)
;
}
)
;
}
)
;
}
;
