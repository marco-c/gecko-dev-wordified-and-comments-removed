"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
TargetFactory
"
"
devtools
/
client
/
framework
/
target
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
Toolbox
"
"
devtools
/
client
/
framework
/
toolbox
"
true
)
;
exports
.
debugWorker
=
function
(
client
workerActor
)
{
client
.
attachWorker
(
workerActor
(
response
workerClient
)
=
>
{
let
workerTarget
=
TargetFactory
.
forWorker
(
workerClient
)
;
gDevTools
.
showToolbox
(
workerTarget
"
jsdebugger
"
Toolbox
.
HostType
.
WINDOW
)
.
then
(
toolbox
=
>
{
toolbox
.
once
(
"
destroy
"
(
)
=
>
workerClient
.
detach
(
)
)
;
}
)
;
}
)
;
}
;
exports
.
getWorkerForms
=
async
function
(
client
)
{
let
registrations
=
[
]
;
let
workers
=
[
]
;
try
{
(
{
registrations
}
=
await
client
.
mainRoot
.
listServiceWorkerRegistrations
(
)
)
;
(
{
workers
}
=
await
client
.
mainRoot
.
listWorkers
(
)
)
;
let
{
processes
}
=
await
client
.
mainRoot
.
listProcesses
(
)
;
for
(
let
process
of
processes
)
{
if
(
process
.
parent
)
{
continue
;
}
let
{
form
}
=
await
client
.
getProcess
(
process
.
id
)
;
let
processActor
=
form
.
actor
;
let
response
=
await
client
.
request
(
{
to
:
processActor
type
:
"
listWorkers
"
}
)
;
workers
=
workers
.
concat
(
response
.
workers
)
;
}
}
catch
(
e
)
{
}
return
{
registrations
workers
}
;
}
;
