"
use
strict
"
;
loader
.
lazyImporter
(
this
"
BrowserToolboxProcess
"
"
resource
:
/
/
devtools
/
client
/
framework
/
ToolboxProcess
.
jsm
"
)
;
loader
.
lazyImporter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
loader
.
lazyImporter
(
this
"
AddonManagerPrivate
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
var
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
var
{
Toolbox
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
"
)
;
var
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
let
browserToolboxProcess
=
null
;
let
remoteAddonToolbox
=
null
;
function
closeToolbox
(
)
{
if
(
browserToolboxProcess
)
{
browserToolboxProcess
.
close
(
)
;
}
if
(
remoteAddonToolbox
)
{
remoteAddonToolbox
.
destroy
(
)
;
}
}
exports
.
debugLocalAddon
=
async
function
(
addonID
)
{
closeToolbox
(
)
;
browserToolboxProcess
=
BrowserToolboxProcess
.
init
(
{
addonID
onClose
:
(
)
=
>
{
browserToolboxProcess
=
null
;
}
}
)
;
}
;
exports
.
debugRemoteAddon
=
async
function
(
addonForm
client
)
{
closeToolbox
(
)
;
let
options
=
{
form
:
addonForm
chrome
:
true
client
isTabActor
:
addonForm
.
isWebExtension
}
;
let
target
=
await
TargetFactory
.
forRemoteTab
(
options
)
;
let
hostType
=
Toolbox
.
HostType
.
WINDOW
;
remoteAddonToolbox
=
await
gDevTools
.
showToolbox
(
target
null
hostType
)
;
remoteAddonToolbox
.
once
(
"
destroy
"
(
)
=
>
{
remoteAddonToolbox
=
null
;
}
)
;
}
;
exports
.
uninstallAddon
=
async
function
(
addonID
)
{
let
addon
=
await
AddonManager
.
getAddonByID
(
addonID
)
;
return
addon
&
&
addon
.
uninstall
(
)
;
}
;
exports
.
isTemporaryID
=
function
(
addonID
)
{
return
AddonManagerPrivate
.
isTemporaryInstallID
(
addonID
)
;
}
;
exports
.
parseFileUri
=
function
(
url
)
{
const
windowsRegex
=
/
^
file
:
\
/
\
/
\
/
(
[
a
-
zA
-
Z
]
:
\
/
.
*
)
/
;
if
(
windowsRegex
.
test
(
url
)
)
{
return
windowsRegex
.
exec
(
url
)
[
1
]
;
}
return
url
.
slice
(
"
file
:
/
/
"
.
length
)
;
}
;
