"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
{
Task
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
TargetList
}
=
require
(
"
.
/
target
-
list
"
)
;
const
{
TabHeader
}
=
require
(
"
.
/
tab
-
header
"
)
;
const
Strings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
aboutdebugging
.
properties
"
)
;
const
WorkerIcon
=
"
chrome
:
/
/
devtools
/
skin
/
images
/
debugging
-
workers
.
svg
"
;
exports
.
WorkersTab
=
React
.
createClass
(
{
displayName
:
"
WorkersTab
"
getInitialState
(
)
{
return
{
workers
:
{
service
:
[
]
shared
:
[
]
other
:
[
]
}
}
;
}
componentDidMount
(
)
{
let
client
=
this
.
props
.
client
;
client
.
addListener
(
"
workerListChanged
"
this
.
update
)
;
client
.
addListener
(
"
serviceWorkerRegistrationListChanged
"
this
.
update
)
;
client
.
addListener
(
"
processListChanged
"
this
.
update
)
;
this
.
update
(
)
;
}
componentWillUnmount
(
)
{
let
client
=
this
.
props
.
client
;
client
.
removeListener
(
"
processListChanged
"
this
.
update
)
;
client
.
removeListener
(
"
serviceWorkerRegistrationListChanged
"
this
.
update
)
;
client
.
removeListener
(
"
workerListChanged
"
this
.
update
)
;
}
render
(
)
{
let
{
client
}
=
this
.
props
;
let
{
workers
}
=
this
.
state
;
return
React
.
createElement
(
"
div
"
{
id
:
"
tab
-
workers
"
className
:
"
tab
"
role
:
"
tabpanel
"
"
aria
-
labelledby
"
:
"
tab
-
workers
-
header
-
name
"
}
React
.
createElement
(
TabHeader
{
id
:
"
tab
-
workers
-
header
-
name
"
name
:
Strings
.
GetStringFromName
(
"
workers
"
)
}
)
React
.
createElement
(
"
div
"
{
id
:
"
workers
"
className
:
"
inverted
-
icons
"
}
React
.
createElement
(
TargetList
{
id
:
"
service
-
workers
"
name
:
Strings
.
GetStringFromName
(
"
serviceWorkers
"
)
targets
:
workers
.
service
client
}
)
React
.
createElement
(
TargetList
{
id
:
"
shared
-
workers
"
name
:
Strings
.
GetStringFromName
(
"
sharedWorkers
"
)
targets
:
workers
.
shared
client
}
)
React
.
createElement
(
TargetList
{
id
:
"
other
-
workers
"
name
:
Strings
.
GetStringFromName
(
"
otherWorkers
"
)
targets
:
workers
.
other
client
}
)
)
)
;
}
update
(
)
{
let
workers
=
this
.
getInitialState
(
)
.
workers
;
this
.
getWorkerForms
(
)
.
then
(
forms
=
>
{
forms
.
registrations
.
forEach
(
form
=
>
{
workers
.
service
.
push
(
{
type
:
"
serviceworker
"
icon
:
WorkerIcon
name
:
form
.
url
url
:
form
.
url
scope
:
form
.
scope
registrationActor
:
form
.
actor
}
)
;
}
)
;
forms
.
workers
.
forEach
(
form
=
>
{
let
worker
=
{
type
:
"
worker
"
icon
:
WorkerIcon
name
:
form
.
url
url
:
form
.
url
workerActor
:
form
.
actor
}
;
switch
(
form
.
type
)
{
case
Ci
.
nsIWorkerDebugger
.
TYPE_SERVICE
:
for
(
let
registration
of
workers
.
service
)
{
if
(
registration
.
scope
=
=
=
form
.
scope
)
{
if
(
!
registration
.
url
)
{
registration
.
name
=
registration
.
url
=
form
.
url
;
}
registration
.
workerActor
=
form
.
actor
;
break
;
}
}
break
;
case
Ci
.
nsIWorkerDebugger
.
TYPE_SHARED
:
worker
.
type
=
"
sharedworker
"
;
workers
.
shared
.
push
(
worker
)
;
break
;
default
:
workers
.
other
.
push
(
worker
)
;
}
}
)
;
workers
.
service
=
workers
.
service
.
filter
(
reg
=
>
!
!
reg
.
url
)
;
this
.
setState
(
{
workers
}
)
;
}
)
;
}
getWorkerForms
:
Task
.
async
(
function
*
(
)
{
let
client
=
this
.
props
.
client
;
let
registrations
=
[
]
;
let
workers
=
[
]
;
try
{
(
{
registrations
}
=
yield
client
.
mainRoot
.
listServiceWorkerRegistrations
(
)
)
;
(
{
workers
}
=
yield
client
.
mainRoot
.
listWorkers
(
)
)
;
let
{
processes
}
=
yield
client
.
mainRoot
.
listProcesses
(
)
;
for
(
let
process
of
processes
)
{
if
(
process
.
parent
)
{
continue
;
}
let
{
form
}
=
yield
client
.
getProcess
(
process
.
id
)
;
let
processActor
=
form
.
actor
;
let
response
=
yield
client
.
request
(
{
to
:
processActor
type
:
"
listWorkers
"
}
)
;
workers
=
workers
.
concat
(
response
.
workers
)
;
}
}
catch
(
e
)
{
}
return
{
registrations
workers
}
;
}
)
}
)
;
