"
use
strict
"
;
const
{
AddonManager
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
createFactory
createClass
DOM
:
dom
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
AddonsControls
=
createFactory
(
require
(
"
.
/
addons
-
controls
"
)
)
;
const
TabHeader
=
createFactory
(
require
(
"
.
/
tab
-
header
"
)
)
;
const
TargetList
=
createFactory
(
require
(
"
.
/
target
-
list
"
)
)
;
const
ExtensionIcon
=
"
chrome
:
/
/
mozapps
/
skin
/
extensions
/
extensionGeneric
.
svg
"
;
const
Strings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
aboutdebugging
.
properties
"
)
;
const
CHROME_ENABLED_PREF
=
"
devtools
.
chrome
.
enabled
"
;
const
REMOTE_ENABLED_PREF
=
"
devtools
.
debugger
.
remote
-
enabled
"
;
module
.
exports
=
createClass
(
{
displayName
:
"
AddonsTab
"
getInitialState
(
)
{
return
{
extensions
:
[
]
debugDisabled
:
false
}
;
}
componentDidMount
(
)
{
AddonManager
.
addAddonListener
(
this
)
;
Services
.
prefs
.
addObserver
(
CHROME_ENABLED_PREF
this
.
updateDebugStatus
false
)
;
Services
.
prefs
.
addObserver
(
REMOTE_ENABLED_PREF
this
.
updateDebugStatus
false
)
;
this
.
updateDebugStatus
(
)
;
this
.
updateAddonsList
(
)
;
}
componentWillUnmount
(
)
{
AddonManager
.
removeAddonListener
(
this
)
;
Services
.
prefs
.
removeObserver
(
CHROME_ENABLED_PREF
this
.
updateDebugStatus
)
;
Services
.
prefs
.
removeObserver
(
REMOTE_ENABLED_PREF
this
.
updateDebugStatus
)
;
}
render
(
)
{
let
{
client
}
=
this
.
props
;
let
{
debugDisabled
extensions
:
targets
}
=
this
.
state
;
let
name
=
Strings
.
GetStringFromName
(
"
extensions
"
)
;
return
dom
.
div
(
{
id
:
"
tab
-
addons
"
className
:
"
tab
"
role
:
"
tabpanel
"
"
aria
-
labelledby
"
:
"
tab
-
addons
-
header
-
name
"
}
TabHeader
(
{
id
:
"
tab
-
addons
-
header
-
name
"
name
:
Strings
.
GetStringFromName
(
"
addons
"
)
}
)
AddonsControls
(
{
debugDisabled
}
)
dom
.
div
(
{
id
:
"
addons
"
}
TargetList
(
{
name
targets
client
debugDisabled
}
)
)
)
;
}
updateDebugStatus
(
)
{
let
debugDisabled
=
!
Services
.
prefs
.
getBoolPref
(
CHROME_ENABLED_PREF
)
|
|
!
Services
.
prefs
.
getBoolPref
(
REMOTE_ENABLED_PREF
)
;
this
.
setState
(
{
debugDisabled
}
)
;
}
updateAddonsList
(
)
{
AddonManager
.
getAllAddons
(
addons
=
>
{
let
extensions
=
addons
.
filter
(
addon
=
>
addon
.
isDebuggable
)
.
map
(
addon
=
>
{
return
{
name
:
addon
.
name
icon
:
addon
.
iconURL
|
|
ExtensionIcon
type
:
addon
.
type
addonID
:
addon
.
id
}
;
}
)
;
this
.
setState
(
{
extensions
}
)
;
}
)
;
}
onInstalled
(
)
{
this
.
updateAddonsList
(
)
;
}
onUninstalled
(
)
{
this
.
updateAddonsList
(
)
;
}
onEnabled
(
)
{
this
.
updateAddonsList
(
)
;
}
onDisabled
(
)
{
this
.
updateAddonsList
(
)
;
}
}
)
;
