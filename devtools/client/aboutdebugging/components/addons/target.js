"
use
strict
"
;
const
{
createClass
DOM
:
dom
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
debugAddon
}
=
require
(
"
.
.
/
.
.
/
modules
/
addon
"
)
;
const
Services
=
require
(
"
Services
"
)
;
loader
.
lazyImporter
(
this
"
BrowserToolboxProcess
"
"
resource
:
/
/
devtools
/
client
/
framework
/
ToolboxProcess
.
jsm
"
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerClient
"
"
devtools
/
shared
/
client
/
main
"
true
)
;
const
Strings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
aboutdebugging
.
properties
"
)
;
function
filePathForTarget
(
target
)
{
if
(
!
target
.
temporarilyInstalled
|
|
!
target
.
url
|
|
!
target
.
url
.
startsWith
(
"
file
:
/
/
"
)
)
{
return
[
]
;
}
let
path
=
target
.
url
.
slice
(
"
file
:
/
/
"
.
length
)
;
return
[
dom
.
dt
(
{
className
:
"
addon
-
target
-
info
-
label
"
}
Strings
.
GetStringFromName
(
"
location
"
)
)
dom
.
dd
(
{
className
:
"
addon
-
target
-
info
-
content
file
-
path
"
}
dom
.
span
(
{
className
:
"
file
-
path
-
inner
"
title
:
path
}
path
)
)
]
;
}
function
internalIDForTarget
(
target
)
{
if
(
!
target
.
manifestURL
)
{
return
[
]
;
}
let
uuid
=
/
moz
-
extension
:
\
/
\
/
(
[
^
/
]
*
)
/
.
exec
(
target
.
manifestURL
)
[
1
]
;
return
[
dom
.
dt
(
{
className
:
"
addon
-
target
-
info
-
label
"
}
Strings
.
GetStringFromName
(
"
internalUUID
"
)
)
dom
.
dd
(
{
className
:
"
addon
-
target
-
info
-
content
internal
-
uuid
"
}
dom
.
span
(
{
title
:
uuid
}
uuid
)
dom
.
span
(
{
className
:
"
addon
-
target
-
info
-
more
"
}
dom
.
a
(
{
href
:
target
.
manifestURL
target
:
"
_blank
"
className
:
"
manifest
-
url
"
}
Strings
.
GetStringFromName
(
"
manifestURL
"
)
)
)
)
]
;
}
module
.
exports
=
createClass
(
{
displayName
:
"
AddonTarget
"
propTypes
:
{
client
:
PropTypes
.
instanceOf
(
DebuggerClient
)
.
isRequired
debugDisabled
:
PropTypes
.
bool
target
:
PropTypes
.
shape
(
{
addonActor
:
PropTypes
.
string
.
isRequired
addonID
:
PropTypes
.
string
.
isRequired
icon
:
PropTypes
.
string
name
:
PropTypes
.
string
.
isRequired
temporarilyInstalled
:
PropTypes
.
bool
url
:
PropTypes
.
string
}
)
.
isRequired
}
debug
(
)
{
let
{
target
}
=
this
.
props
;
debugAddon
(
target
.
addonID
)
;
}
reload
(
)
{
let
{
client
target
}
=
this
.
props
;
client
.
request
(
{
to
:
target
.
addonActor
type
:
"
reload
"
}
)
.
then
(
(
)
=
>
{
}
error
=
>
{
throw
new
Error
(
"
Error
reloading
addon
"
+
target
.
addonID
+
"
:
"
+
error
)
;
}
)
;
}
render
(
)
{
let
{
target
debugDisabled
}
=
this
.
props
;
const
canBeReloaded
=
target
.
temporarilyInstalled
;
return
dom
.
li
(
{
className
:
"
addon
-
target
-
container
"
"
data
-
addon
-
id
"
:
target
.
addonID
}
dom
.
div
(
{
className
:
"
target
"
}
dom
.
img
(
{
className
:
"
target
-
icon
"
role
:
"
presentation
"
src
:
target
.
icon
}
)
dom
.
span
(
{
className
:
"
target
-
name
"
title
:
target
.
name
}
target
.
name
)
)
dom
.
dl
(
{
className
:
"
addon
-
target
-
info
"
}
.
.
.
filePathForTarget
(
target
)
.
.
.
internalIDForTarget
(
target
)
)
dom
.
div
(
{
className
:
"
addon
-
target
-
actions
"
}
dom
.
button
(
{
className
:
"
debug
-
button
addon
-
target
-
button
"
onClick
:
this
.
debug
disabled
:
debugDisabled
}
Strings
.
GetStringFromName
(
"
debug
"
)
)
dom
.
button
(
{
className
:
"
reload
-
button
addon
-
target
-
button
"
onClick
:
this
.
reload
disabled
:
!
canBeReloaded
title
:
!
canBeReloaded
?
Strings
.
GetStringFromName
(
"
reloadDisabledTooltip
"
)
:
"
"
}
Strings
.
GetStringFromName
(
"
reload
"
)
)
)
)
;
}
}
)
;
