"
use
strict
"
;
loader
.
lazyImporter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
const
{
createClass
DOM
:
dom
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
loader
.
lazyImporter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerClient
"
"
devtools
/
shared
/
client
/
main
"
true
)
;
const
Strings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
aboutdebugging
.
properties
"
)
;
const
PROCESS_COUNT_PREF
=
"
dom
.
ipc
.
processCount
"
;
module
.
exports
=
createClass
(
{
displayName
:
"
multiE10SWarning
"
onUpdatePreferenceClick
(
)
{
let
message
=
Strings
.
GetStringFromName
(
"
multiProcessWarningConfirmUpdate
"
)
;
if
(
window
.
confirm
(
message
)
)
{
Services
.
prefs
.
setIntPref
(
PROCESS_COUNT_PREF
1
)
;
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eAttemptQuit
|
Ci
.
nsIAppStartup
.
eRestart
)
;
}
}
render
(
)
{
return
dom
.
div
(
{
className
:
"
service
-
worker
-
multi
-
process
"
}
dom
.
div
(
{
}
dom
.
div
(
{
className
:
"
warning
"
}
)
dom
.
b
(
{
}
Strings
.
GetStringFromName
(
"
multiProcessWarningTitle
"
)
)
)
dom
.
div
(
{
}
Strings
.
GetStringFromName
(
"
multiProcessWarningMessage
"
)
)
dom
.
button
(
{
className
:
"
update
-
button
"
onClick
:
this
.
onUpdatePreferenceClick
}
Strings
.
GetStringFromName
(
"
multiProcessWarningUpdateLink
"
)
)
)
;
}
}
)
;
