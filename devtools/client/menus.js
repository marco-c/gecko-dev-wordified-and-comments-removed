"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
isMac
=
Services
.
appinfo
.
OS
=
=
=
"
Darwin
"
;
loader
.
lazyRequireGetter
(
this
"
gDevToolsBrowser
"
"
devtools
/
client
/
framework
/
devtools
-
browser
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
CommandUtils
"
"
devtools
/
client
/
shared
/
developer
-
toolbar
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
TargetFactory
"
"
devtools
/
client
/
framework
/
target
"
true
)
;
loader
.
lazyImporter
(
this
"
BrowserToolboxProcess
"
"
resource
:
/
/
devtools
/
client
/
framework
/
ToolboxProcess
.
jsm
"
)
;
loader
.
lazyImporter
(
this
"
ResponsiveUIManager
"
"
resource
:
/
/
devtools
/
client
/
responsivedesign
/
responsivedesign
.
jsm
"
)
;
loader
.
lazyImporter
(
this
"
ScratchpadManager
"
"
resource
:
/
/
devtools
/
client
/
scratchpad
/
scratchpad
-
manager
.
jsm
"
)
;
exports
.
menuitems
=
[
{
id
:
"
menu_devToolbox
"
l10nKey
:
"
devToolboxMenuItem
"
oncommand
(
event
)
{
let
window
=
event
.
target
.
ownerDocument
.
defaultView
;
gDevToolsBrowser
.
toggleToolboxCommand
(
window
.
gBrowser
)
;
}
key
:
{
id
:
"
devToolboxMenuItem
"
modifiers
:
isMac
?
"
accel
alt
"
:
"
accel
shift
"
keytext
:
true
}
additionalKeys
:
[
{
id
:
"
devToolboxMenuItemF12
"
l10nKey
:
"
devToolsCmd
"
}
]
checkbox
:
true
}
{
id
:
"
menu_devtools_separator
"
separator
:
true
}
{
id
:
"
menu_devToolbar
"
l10nKey
:
"
devToolbarMenu
"
disabled
:
true
oncommand
(
event
)
{
let
window
=
event
.
target
.
ownerDocument
.
defaultView
;
if
(
event
.
target
.
tagName
.
toLowerCase
(
)
=
=
"
menuitem
"
)
{
window
.
DeveloperToolbar
.
toggle
(
)
;
}
else
{
window
.
DeveloperToolbar
.
focusToggle
(
)
;
}
}
key
:
{
id
:
"
devToolbar
"
modifiers
:
"
shift
"
}
checkbox
:
true
}
{
id
:
"
menu_webide
"
l10nKey
:
"
webide
"
disabled
:
true
oncommand
(
)
{
gDevToolsBrowser
.
openWebIDE
(
)
;
}
key
:
{
id
:
"
webide
"
modifiers
:
"
shift
"
}
}
{
id
:
"
menu_browserToolbox
"
l10nKey
:
"
browserToolboxMenu
"
disabled
:
true
oncommand
(
)
{
BrowserToolboxProcess
.
init
(
)
;
}
key
:
{
id
:
"
browserToolbox
"
modifiers
:
"
accel
alt
shift
"
keytext
:
true
}
}
{
id
:
"
menu_browserContentToolbox
"
l10nKey
:
"
browserContentToolboxMenu
"
disabled
:
true
oncommand
(
event
)
{
let
window
=
event
.
target
.
ownerDocument
.
defaultView
;
gDevToolsBrowser
.
openContentProcessToolbox
(
window
.
gBrowser
)
;
}
}
{
id
:
"
menu_browserConsole
"
l10nKey
:
"
browserConsoleCmd
"
oncommand
(
)
{
let
HUDService
=
require
(
"
devtools
/
client
/
webconsole
/
hudservice
"
)
;
HUDService
.
openBrowserConsoleOrFocus
(
)
;
}
key
:
{
id
:
"
browserConsole
"
modifiers
:
"
accel
shift
"
keytext
:
true
}
}
{
id
:
"
menu_responsiveUI
"
l10nKey
:
"
responsiveDesignMode
"
oncommand
(
event
)
{
let
window
=
event
.
target
.
ownerDocument
.
defaultView
;
ResponsiveUIManager
.
toggle
(
window
window
.
gBrowser
.
selectedTab
)
;
}
key
:
{
id
:
"
responsiveUI
"
modifiers
:
isMac
?
"
accel
alt
"
:
"
accel
shift
"
keytext
:
true
}
checkbox
:
true
}
{
id
:
"
menu_eyedropper
"
l10nKey
:
"
eyedropper
"
oncommand
(
event
)
{
let
window
=
event
.
target
.
ownerDocument
.
defaultView
;
let
target
=
TargetFactory
.
forTab
(
window
.
gBrowser
.
selectedTab
)
;
CommandUtils
.
executeOnTarget
(
target
"
eyedropper
-
-
frommenu
"
)
;
}
checkbox
:
true
}
{
id
:
"
menu_scratchpad
"
l10nKey
:
"
scratchpad
"
oncommand
(
)
{
ScratchpadManager
.
openScratchpad
(
)
;
}
key
:
{
id
:
"
scratchpad
"
modifiers
:
"
shift
"
}
}
{
id
:
"
menu_devtools_serviceworkers
"
l10nKey
:
"
devtoolsServiceWorkers
"
disabled
:
true
oncommand
(
event
)
{
let
window
=
event
.
target
.
ownerDocument
.
defaultView
;
gDevToolsBrowser
.
openAboutDebugging
(
window
.
gBrowser
"
workers
"
)
;
}
}
{
id
:
"
menu_devtools_connect
"
l10nKey
:
"
devtoolsConnect
"
disabled
:
true
oncommand
(
event
)
{
let
window
=
event
.
target
.
ownerDocument
.
defaultView
;
gDevToolsBrowser
.
openConnectScreen
(
window
.
gBrowser
)
;
}
}
{
separator
:
true
id
:
"
devToolsEndSeparator
"
}
{
id
:
"
getMoreDevtools
"
l10nKey
:
"
getMoreDevtoolsCmd
"
oncommand
(
event
)
{
let
window
=
event
.
target
.
ownerDocument
.
defaultView
;
window
.
openUILinkIn
(
"
https
:
/
/
addons
.
mozilla
.
org
/
firefox
/
collections
/
mozilla
/
webdeveloper
/
"
"
tab
"
)
;
}
}
]
;
