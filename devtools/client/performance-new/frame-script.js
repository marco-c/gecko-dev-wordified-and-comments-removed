"
use
strict
"
;
const
TRANSFER_EVENT
=
"
devtools
:
perf
-
html
-
transfer
-
profile
"
;
let
gProfile
=
null
;
addMessageListener
(
TRANSFER_EVENT
e
=
>
{
gProfile
=
e
.
data
;
connectToPage
(
)
;
addEventListener
(
"
DOMContentLoaded
"
connectToPage
)
;
}
)
;
function
connectToPage
(
)
{
const
unsafeWindow
=
content
.
wrappedJSObject
;
if
(
unsafeWindow
.
connectToGeckoProfiler
)
{
unsafeWindow
.
connectToGeckoProfiler
(
makeAccessibleToPage
(
{
getProfile
:
(
)
=
>
Promise
.
resolve
(
gProfile
)
getSymbolTable
:
(
debugName
breakpadId
)
=
>
getSymbolTable
(
debugName
breakpadId
)
}
unsafeWindow
)
)
;
}
}
function
getSymbolTable
(
debugName
breakpadId
)
{
const
error
=
{
message
:
The
DevTools
'
"
perf
"
actor
does
not
support
symbolication
.
}
;
return
Promise
.
reject
(
error
)
;
}
function
createPromiseInPage
(
fun
contentGlobal
)
{
function
funThatClonesObjects
(
resolve
reject
)
{
return
fun
(
result
=
>
resolve
(
Cu
.
cloneInto
(
result
contentGlobal
)
)
error
=
>
reject
(
Cu
.
cloneInto
(
error
contentGlobal
)
)
)
;
}
return
new
contentGlobal
.
Promise
(
Cu
.
exportFunction
(
funThatClonesObjects
contentGlobal
)
)
;
}
function
wrapFunction
(
fun
contentGlobal
)
{
return
function
(
)
{
let
result
=
fun
.
apply
(
this
arguments
)
;
if
(
typeof
result
=
=
=
"
object
"
)
{
if
(
(
"
then
"
in
result
)
&
&
(
typeof
result
.
then
=
=
=
"
function
"
)
)
{
return
createPromiseInPage
(
(
resolve
reject
)
=
>
result
.
then
(
resolve
reject
)
contentGlobal
)
;
}
return
Cu
.
cloneInto
(
result
contentGlobal
)
;
}
return
result
;
}
;
}
function
makeAccessibleToPage
(
obj
contentGlobal
)
{
let
result
=
Cu
.
createObjectIn
(
contentGlobal
)
;
for
(
let
field
in
obj
)
{
switch
(
typeof
obj
[
field
]
)
{
case
"
function
"
:
Cu
.
exportFunction
(
wrapFunction
(
obj
[
field
]
contentGlobal
)
result
{
defineAs
:
field
}
)
;
break
;
case
"
object
"
:
Cu
.
cloneInto
(
obj
[
field
]
result
{
defineAs
:
field
}
)
;
break
;
default
:
result
[
field
]
=
obj
[
field
]
;
break
;
}
}
return
result
;
}
