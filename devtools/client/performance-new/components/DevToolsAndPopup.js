"
use
strict
"
;
const
{
PureComponent
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
div
button
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
RecordingButton
=
createFactory
(
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
RecordingButton
.
js
"
)
)
;
const
Settings
=
createFactory
(
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
Settings
.
js
"
)
)
;
const
Description
=
createFactory
(
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
Description
.
js
"
)
)
;
const
selectors
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
selectors
"
)
;
const
{
restartBrowserWithEnvironmentVariable
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
browser
"
)
;
class
DevToolsAndPopup
extends
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
handleRestart
=
this
.
handleRestart
.
bind
(
this
)
;
}
handleRestart
(
)
{
const
{
promptEnvRestart
}
=
this
.
props
;
if
(
!
promptEnvRestart
)
{
throw
new
Error
(
"
handleRestart
(
)
should
only
be
called
when
promptEnvRestart
exists
.
"
)
;
}
restartBrowserWithEnvironmentVariable
(
promptEnvRestart
"
1
"
)
;
}
render
(
)
{
const
{
isSupportedPlatform
isPopup
promptEnvRestart
}
=
this
.
props
;
if
(
isSupportedPlatform
=
=
=
null
)
{
return
null
;
}
const
additionalClassName
=
isPopup
?
"
perf
-
popup
"
:
"
perf
-
devtools
"
;
return
div
(
{
className
:
perf
{
additionalClassName
}
}
promptEnvRestart
?
div
(
{
className
:
"
perf
-
env
-
restart
"
}
div
(
{
className
:
"
perf
-
photon
-
message
-
bar
perf
-
photon
-
message
-
bar
-
warning
perf
-
env
-
restart
-
fixed
"
}
div
(
{
className
:
"
perf
-
photon
-
message
-
bar
-
warning
-
icon
"
}
)
"
The
browser
must
be
restarted
to
enable
this
feature
.
"
button
(
{
className
:
"
perf
-
photon
-
button
perf
-
photon
-
button
-
micro
"
type
:
"
button
"
onClick
:
this
.
handleRestart
}
"
Restart
"
)
)
)
:
null
RecordingButton
(
)
Settings
(
)
isPopup
?
null
:
Description
(
)
)
;
}
}
function
mapStateToProps
(
state
)
{
return
{
isSupportedPlatform
:
selectors
.
getIsSupportedPlatform
(
state
)
isPopup
:
selectors
.
getIsPopup
(
state
)
promptEnvRestart
:
selectors
.
getPromptEnvRestart
(
state
)
}
;
}
module
.
exports
=
connect
(
mapStateToProps
)
(
DevToolsAndPopup
)
;
