"
use
strict
"
;
const
{
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
actions
"
)
;
const
selectors
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
selectors
"
)
;
class
ProfilerEventHandling
extends
PureComponent
{
componentDidMount
(
)
{
const
{
perfFront
isSupportedPlatform
reportProfilerReady
reportProfilerStarted
reportProfilerStopped
reportPrivateBrowsingStarted
reportPrivateBrowsingStopped
}
=
this
.
props
;
if
(
!
isSupportedPlatform
)
{
return
;
}
Promise
.
all
(
[
perfFront
.
isActive
(
)
perfFront
.
isLockedForPrivateBrowsing
(
)
]
)
.
then
(
(
[
isActive
isLockedForPrivateBrowsing
]
)
=
>
{
reportProfilerReady
(
isActive
isLockedForPrivateBrowsing
)
;
}
)
;
this
.
props
.
perfFront
.
on
(
"
profiler
-
started
"
reportProfilerStarted
)
;
this
.
props
.
perfFront
.
on
(
"
profiler
-
stopped
"
reportProfilerStopped
)
;
this
.
props
.
perfFront
.
on
(
"
profile
-
locked
-
by
-
private
-
browsing
"
reportPrivateBrowsingStarted
)
;
this
.
props
.
perfFront
.
on
(
"
profile
-
unlocked
-
from
-
private
-
browsing
"
reportPrivateBrowsingStopped
)
;
}
componentWillUnmount
(
)
{
switch
(
this
.
props
.
recordingState
)
{
case
"
not
-
yet
-
known
"
:
case
"
available
-
to
-
record
"
:
case
"
request
-
to
-
stop
-
profiler
"
:
case
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
:
case
"
locked
-
by
-
private
-
browsing
"
:
break
;
case
"
recording
"
:
case
"
request
-
to
-
start
-
recording
"
:
this
.
props
.
perfFront
.
stopProfilerAndDiscardProfile
(
)
;
break
;
default
:
throw
new
Error
(
"
Unhandled
recording
state
.
"
)
;
}
}
render
(
)
{
return
null
;
}
}
function
mapStateToProps
(
state
)
{
return
{
perfFront
:
selectors
.
getPerfFront
(
state
)
recordingState
:
selectors
.
getRecordingState
(
state
)
isSupportedPlatform
:
selectors
.
getIsSupportedPlatform
(
state
)
}
;
}
const
mapDispatchToProps
=
{
reportProfilerReady
:
actions
.
reportProfilerReady
reportProfilerStarted
:
actions
.
reportProfilerStarted
reportProfilerStopped
:
actions
.
reportProfilerStopped
reportPrivateBrowsingStarted
:
actions
.
reportPrivateBrowsingStarted
reportPrivateBrowsingStopped
:
actions
.
reportPrivateBrowsingStopped
}
;
module
.
exports
=
connect
(
mapStateToProps
mapDispatchToProps
)
(
ProfilerEventHandling
)
;
