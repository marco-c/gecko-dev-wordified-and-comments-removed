"
use
strict
"
;
const
{
PureComponent
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
div
details
summary
label
input
span
h1
h2
h3
section
p
em
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
Range
=
createFactory
(
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
Range
"
)
)
;
const
DirectoryPicker
=
createFactory
(
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
DirectoryPicker
"
)
)
;
const
{
makeExponentialScale
formatFileSize
calculateOverhead
UnhandledCaseError
featureDescriptions
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
utils
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
actions
"
)
;
const
selectors
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
selectors
"
)
;
const
{
openFilePickerForObjdir
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
browser
"
)
;
const
PROFILE_ENTRY_SIZE
=
9
;
const
NOTCHES
=
Array
(
22
)
.
fill
(
"
discrete
-
level
-
notch
"
)
;
const
threadColumns
=
[
[
{
name
:
"
GeckoMain
"
id
:
"
gecko
-
main
"
title
:
"
The
main
processes
for
both
the
parent
process
and
content
processes
"
}
{
name
:
"
Compositor
"
id
:
"
compositor
"
title
:
"
Composites
together
different
painted
elements
on
the
page
.
"
}
{
name
:
"
DOM
Worker
"
id
:
"
dom
-
worker
"
title
:
"
This
handle
both
web
workers
and
service
workers
"
}
{
name
:
"
Renderer
"
id
:
"
renderer
"
title
:
"
When
WebRender
is
enabled
the
thread
that
executes
OpenGL
calls
"
}
]
[
{
name
:
"
RenderBackend
"
id
:
"
render
-
backend
"
title
:
"
The
WebRender
RenderBackend
thread
"
}
{
name
:
"
PaintWorker
"
id
:
"
paint
-
worker
"
title
:
"
When
off
-
main
-
thread
painting
is
enabled
the
thread
on
which
"
+
"
painting
happens
"
}
{
name
:
"
StyleThread
"
id
:
"
style
-
thread
"
title
:
"
Style
computation
is
split
into
multiple
threads
"
}
{
name
:
"
Socket
Thread
"
id
:
"
socket
-
thread
"
title
:
"
The
thread
where
networking
code
runs
any
blocking
socket
calls
"
}
]
[
{
name
:
"
StreamTrans
"
id
:
"
stream
-
trans
"
title
:
"
TODO
"
}
{
name
:
"
ImgDecoder
"
id
:
"
img
-
decoder
"
title
:
"
Image
decoding
threads
"
}
{
name
:
"
DNS
Resolver
"
id
:
"
dns
-
resolver
"
title
:
"
DNS
resolution
happens
on
this
thread
"
}
]
]
;
class
Settings
extends
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
temporaryThreadText
:
null
}
;
this
.
_handleThreadCheckboxChange
=
this
.
_handleThreadCheckboxChange
.
bind
(
this
)
;
this
.
_handleFeaturesCheckboxChange
=
this
.
_handleFeaturesCheckboxChange
.
bind
(
this
)
;
this
.
_handleAddObjdir
=
this
.
_handleAddObjdir
.
bind
(
this
)
;
this
.
_handleRemoveObjdir
=
this
.
_handleRemoveObjdir
.
bind
(
this
)
;
this
.
_setThreadTextFromInput
=
this
.
_setThreadTextFromInput
.
bind
(
this
)
;
this
.
_handleThreadTextCleanup
=
this
.
_handleThreadTextCleanup
.
bind
(
this
)
;
this
.
_renderThreadsColumns
=
this
.
_renderThreadsColumns
.
bind
(
this
)
;
this
.
_intervalExponentialScale
=
makeExponentialScale
(
0
.
01
100
)
;
this
.
_entriesExponentialScale
=
makeExponentialScale
(
100000
100000000
)
;
}
_renderNotches
(
)
{
const
{
interval
entries
features
}
=
this
.
props
;
const
overhead
=
calculateOverhead
(
interval
entries
features
)
;
const
notchCount
=
22
;
const
notches
=
[
]
;
for
(
let
i
=
0
;
i
<
notchCount
;
i
+
+
)
{
const
active
=
i
<
=
Math
.
round
(
overhead
*
(
NOTCHES
.
length
-
1
)
)
?
"
active
"
:
"
inactive
"
;
let
level
=
"
normal
"
;
if
(
i
>
16
)
{
level
=
"
critical
"
;
}
else
if
(
i
>
10
)
{
level
=
"
warning
"
;
}
notches
.
push
(
div
(
{
key
:
i
className
:
perf
-
settings
-
notch
perf
-
settings
-
notch
-
{
level
}
+
perf
-
settings
-
notch
-
{
active
}
}
)
)
;
}
return
notches
;
}
_handleThreadCheckboxChange
(
event
)
{
const
{
threads
changeThreads
}
=
this
.
props
;
const
{
checked
value
}
=
event
.
target
;
if
(
checked
)
{
if
(
!
threads
.
includes
(
value
)
)
{
changeThreads
(
[
.
.
.
threads
value
]
)
;
}
}
else
{
changeThreads
(
threads
.
filter
(
thread
=
>
thread
!
=
=
value
)
)
;
}
}
_handleFeaturesCheckboxChange
(
event
)
{
const
{
features
changeFeatures
}
=
this
.
props
;
const
{
checked
value
}
=
event
.
target
;
if
(
checked
)
{
if
(
!
features
.
includes
(
value
)
)
{
changeFeatures
(
[
value
.
.
.
features
]
)
;
}
}
else
{
changeFeatures
(
features
.
filter
(
feature
=
>
feature
!
=
=
value
)
)
;
}
}
_handleAddObjdir
(
)
{
const
{
objdirs
changeObjdirs
}
=
this
.
props
;
openFilePickerForObjdir
(
window
objdirs
changeObjdirs
)
;
}
_handleRemoveObjdir
(
index
)
{
const
{
objdirs
changeObjdirs
}
=
this
.
props
;
const
newObjdirs
=
[
.
.
.
objdirs
]
;
newObjdirs
.
splice
(
index
1
)
;
changeObjdirs
(
newObjdirs
)
;
}
_setThreadTextFromInput
(
event
)
{
this
.
setState
(
{
temporaryThreadText
:
event
.
target
.
value
}
)
;
}
_handleThreadTextCleanup
(
event
)
{
this
.
setState
(
{
temporaryThreadText
:
null
}
)
;
this
.
props
.
changeThreads
(
_threadTextToList
(
event
.
target
.
value
)
)
;
}
_renderThreadsColumns
(
threadDisplay
index
)
{
const
{
threads
}
=
this
.
props
;
return
div
(
{
className
:
"
perf
-
settings
-
thread
-
column
"
key
:
index
}
threadDisplay
.
map
(
(
{
name
title
id
}
)
=
>
label
(
{
className
:
"
perf
-
settings
-
checkbox
-
label
perf
-
settings
-
thread
-
label
"
key
:
name
title
}
input
(
{
className
:
"
perf
-
settings
-
checkbox
"
id
:
perf
-
settings
-
thread
-
checkbox
-
{
id
}
type
:
"
checkbox
"
value
:
name
checked
:
threads
.
includes
(
name
)
onChange
:
this
.
_handleThreadCheckboxChange
}
)
name
)
)
)
;
}
_renderThreads
(
)
{
const
{
temporaryThreadText
}
=
this
.
state
;
const
{
pageContext
threads
}
=
this
.
props
;
return
renderSection
(
"
perf
-
settings
-
threads
-
summary
"
"
Threads
"
pageContext
div
(
null
div
(
{
className
:
"
perf
-
settings
-
thread
-
columns
"
}
threadColumns
.
map
(
this
.
_renderThreadsColumns
)
)
div
(
{
className
:
"
perf
-
settings
-
all
-
threads
"
}
label
(
{
className
:
"
perf
-
settings
-
checkbox
-
label
"
}
input
(
{
className
:
"
perf
-
settings
-
checkbox
"
id
:
"
perf
-
settings
-
thread
-
checkbox
-
all
-
threads
"
type
:
"
checkbox
"
value
:
"
*
"
checked
:
threads
.
includes
(
"
*
"
)
onChange
:
this
.
_handleThreadCheckboxChange
}
)
"
Bypass
selections
above
and
record
"
em
(
null
"
all
"
)
"
registered
threads
"
)
)
div
(
{
className
:
"
perf
-
settings
-
row
"
}
label
(
{
className
:
"
perf
-
settings
-
text
-
label
"
title
:
"
These
thread
names
are
a
comma
separated
list
that
is
used
to
"
+
"
enable
profiling
of
the
threads
in
the
profiler
.
The
name
needs
to
"
+
"
be
only
a
partial
match
of
the
thread
name
to
be
included
.
It
"
+
"
is
whitespace
sensitive
.
"
}
div
(
null
"
Add
custom
threads
by
name
:
"
)
input
(
{
className
:
"
perf
-
settings
-
text
-
input
"
id
:
"
perf
-
settings
-
thread
-
text
"
type
:
"
text
"
value
:
temporaryThreadText
=
=
=
null
?
threads
.
join
(
"
"
)
:
temporaryThreadText
onBlur
:
this
.
_handleThreadTextCleanup
onFocus
:
this
.
_setThreadTextFromInput
onChange
:
this
.
_setThreadTextFromInput
}
)
)
)
)
)
;
}
_renderFeatureCheckbox
(
featureDescription
showUnsupportedFeatures
)
{
const
{
supportedFeatures
}
=
this
.
props
;
const
{
name
value
title
recommended
disabledReason
}
=
featureDescription
;
let
isSupported
=
true
;
if
(
supportedFeatures
!
=
=
null
&
&
!
supportedFeatures
.
includes
(
value
)
)
{
isSupported
=
false
;
}
if
(
showUnsupportedFeatures
=
=
=
isSupported
)
{
return
null
;
}
const
extraClassName
=
isSupported
?
"
"
:
"
perf
-
settings
-
checkbox
-
label
-
disabled
"
;
return
label
(
{
className
:
perf
-
settings
-
checkbox
-
label
perf
-
settings
-
feature
-
label
{
extraClassName
}
key
:
value
}
div
(
{
className
:
"
perf
-
settings
-
checkbox
-
and
-
name
"
}
input
(
{
className
:
"
perf
-
settings
-
checkbox
"
id
:
perf
-
settings
-
feature
-
checkbox
-
{
value
}
type
:
"
checkbox
"
value
checked
:
isSupported
&
&
this
.
props
.
features
.
includes
(
value
)
onChange
:
this
.
_handleFeaturesCheckboxChange
disabled
:
!
isSupported
}
)
div
(
{
className
:
"
perf
-
settings
-
feature
-
name
"
}
name
)
)
div
(
{
className
:
"
perf
-
settings
-
feature
-
title
"
}
title
!
isSupported
&
&
disabledReason
?
div
(
{
className
:
"
perf
-
settings
-
feature
-
disabled
-
reason
"
}
disabledReason
)
:
null
recommended
?
span
(
{
className
:
"
perf
-
settings
-
subtext
"
}
"
(
Recommended
on
by
default
.
)
"
)
:
null
)
)
;
}
_renderFeatures
(
)
{
return
renderSection
(
"
perf
-
settings
-
features
-
summary
"
"
Features
"
this
.
props
.
pageContext
div
(
null
featureDescriptions
.
map
(
featureDescription
=
>
this
.
_renderFeatureCheckbox
(
featureDescription
false
)
)
h3
(
{
className
:
"
perf
-
settings
-
features
-
disabled
-
title
"
}
"
The
following
features
are
currently
unavailable
:
"
)
featureDescriptions
.
map
(
featureDescription
=
>
this
.
_renderFeatureCheckbox
(
featureDescription
true
)
)
)
)
;
}
_renderLocalBuildSection
(
)
{
const
{
objdirs
pageContext
}
=
this
.
props
;
return
renderSection
(
"
perf
-
settings
-
local
-
build
-
summary
"
"
Local
build
"
pageContext
div
(
null
p
(
null
If
you
'
re
profiling
a
build
that
you
have
compiled
yourself
on
this
machine
please
add
your
build
'
s
objdir
to
the
list
below
so
that
it
can
be
used
to
look
up
symbol
information
.
)
DirectoryPicker
(
{
dirs
:
objdirs
onAdd
:
this
.
_handleAddObjdir
onRemove
:
this
.
_handleRemoveObjdir
}
)
)
)
;
}
_renderTitle
(
)
{
const
{
pageContext
}
=
this
.
props
;
switch
(
pageContext
)
{
case
"
aboutprofiling
"
:
return
"
Buffer
Settings
"
;
case
"
devtools
"
:
return
"
Recording
Settings
"
;
default
:
throw
new
UnhandledCaseError
(
pageContext
"
PageContext
"
)
;
}
}
render
(
)
{
return
section
(
{
className
:
"
perf
-
settings
"
}
this
.
props
.
pageContext
=
=
=
"
aboutprofiling
"
?
h1
(
null
"
Full
Settings
"
)
:
null
h2
(
{
className
:
"
perf
-
settings
-
title
"
}
this
.
_renderTitle
(
)
)
this
.
props
.
pageContext
=
=
=
"
aboutprofiling
"
?
null
:
div
(
{
className
:
"
perf
-
settings
-
row
"
}
label
(
{
className
:
"
perf
-
settings
-
label
"
}
"
Overhead
:
"
)
div
(
{
className
:
"
perf
-
settings
-
value
perf
-
settings
-
notches
"
}
this
.
_renderNotches
(
)
)
)
Range
(
{
label
:
"
Sampling
interval
:
"
value
:
this
.
props
.
interval
id
:
"
perf
-
range
-
interval
"
scale
:
this
.
_intervalExponentialScale
display
:
_intervalTextDisplay
onChange
:
this
.
props
.
changeInterval
}
)
Range
(
{
label
:
"
Buffer
size
:
"
value
:
this
.
props
.
entries
id
:
"
perf
-
range
-
entries
"
scale
:
this
.
_entriesExponentialScale
display
:
_entriesTextDisplay
onChange
:
this
.
props
.
changeEntries
}
)
this
.
_renderThreads
(
)
this
.
_renderFeatures
(
)
this
.
_renderLocalBuildSection
(
)
)
;
}
}
function
_threadTextToList
(
threads
)
{
return
(
threads
.
split
(
"
"
)
.
map
(
string
=
>
string
.
trim
(
)
)
.
filter
(
string
=
>
string
)
)
;
}
function
_intervalTextDisplay
(
value
)
{
return
{
value
}
ms
;
}
function
_entriesTextDisplay
(
value
)
{
return
formatFileSize
(
value
*
PROFILE_ENTRY_SIZE
)
;
}
function
_handleToggle
(
)
{
const
anyWindow
=
window
;
const
popupWindow
=
anyWindow
;
if
(
popupWindow
.
gResizePopup
)
{
popupWindow
.
gResizePopup
(
document
.
body
.
clientHeight
)
;
}
}
function
renderSection
(
id
title
pageContext
children
)
{
switch
(
pageContext
)
{
case
"
devtools
"
:
return
details
(
{
className
:
"
perf
-
settings
-
details
"
onToggle
:
_handleToggle
}
summary
(
{
className
:
"
perf
-
settings
-
summary
"
id
}
title
+
"
:
"
)
div
(
{
className
:
"
perf
-
settings
-
details
-
contents
"
}
div
(
{
className
:
"
perf
-
settings
-
details
-
contents
-
slider
"
}
children
)
)
)
;
case
"
aboutprofiling
"
:
return
div
(
{
className
:
"
perf
-
settings
-
sections
"
}
div
(
null
h2
(
null
title
)
children
)
)
;
default
:
throw
new
UnhandledCaseError
(
pageContext
"
PageContext
"
)
;
}
}
function
mapStateToProps
(
state
)
{
return
{
interval
:
selectors
.
getInterval
(
state
)
entries
:
selectors
.
getEntries
(
state
)
features
:
selectors
.
getFeatures
(
state
)
threads
:
selectors
.
getThreads
(
state
)
threadsString
:
selectors
.
getThreadsString
(
state
)
objdirs
:
selectors
.
getObjdirs
(
state
)
supportedFeatures
:
selectors
.
getSupportedFeatures
(
state
)
pageContext
:
selectors
.
getPageContext
(
state
)
}
;
}
const
mapDispatchToProps
=
{
changeInterval
:
actions
.
changeInterval
changeEntries
:
actions
.
changeEntries
changeFeatures
:
actions
.
changeFeatures
changeThreads
:
actions
.
changeThreads
changeObjdirs
:
actions
.
changeObjdirs
}
;
const
SettingsConnected
=
connect
(
mapStateToProps
mapDispatchToProps
)
(
Settings
)
;
module
.
exports
=
SettingsConnected
;
