"
use
strict
"
;
const
{
PureComponent
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
div
label
input
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
selectors
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
selectors
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
actions
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
class
Preset
extends
PureComponent
{
onChange
=
event
=
>
{
this
.
props
.
onChange
(
event
.
target
.
value
)
;
}
;
render
(
)
{
const
{
preset
presetName
selected
}
=
this
.
props
;
let
labelText
description
;
if
(
preset
)
{
labelText
=
preset
.
label
;
description
=
preset
.
description
;
}
else
{
labelText
=
"
Custom
"
;
}
return
label
(
{
className
:
"
perf
-
presets
-
label
"
}
div
(
{
className
:
"
perf
-
presets
-
input
-
container
"
}
input
(
{
className
:
"
perf
-
presets
-
input
"
type
:
"
radio
"
name
:
"
presets
"
value
:
presetName
checked
:
selected
onChange
:
this
.
onChange
}
)
)
div
(
{
className
:
"
perf
-
presets
-
text
"
}
div
(
{
className
:
"
pref
-
preset
-
text
-
label
"
}
labelText
)
description
?
div
(
{
className
:
"
perf
-
presets
-
description
"
}
description
)
:
null
)
)
;
}
}
class
Presets
extends
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onChange
=
this
.
onChange
.
bind
(
this
)
;
}
onChange
(
presetName
)
{
const
{
presets
}
=
this
.
props
;
this
.
props
.
changePreset
(
presets
presetName
)
;
}
render
(
)
{
const
{
presets
selectedPresetName
}
=
this
.
props
;
return
div
(
{
className
:
"
perf
-
presets
"
}
Object
.
entries
(
presets
)
.
map
(
(
[
presetName
preset
]
)
=
>
createElement
(
Preset
{
key
:
presetName
presetName
preset
selected
:
presetName
=
=
=
selectedPresetName
onChange
:
this
.
onChange
}
)
)
createElement
(
Preset
{
key
:
"
custom
"
presetName
:
"
custom
"
selected
:
selectedPresetName
=
=
"
custom
"
preset
:
null
onChange
:
this
.
onChange
}
)
)
;
}
}
function
mapStateToProps
(
state
)
{
return
{
selectedPresetName
:
selectors
.
getPresetName
(
state
)
presets
:
selectors
.
getPresets
(
state
)
}
;
}
const
mapDispatchToProps
=
{
changePreset
:
actions
.
changePreset
}
;
module
.
exports
=
connect
(
mapStateToProps
mapDispatchToProps
)
(
Presets
)
;
