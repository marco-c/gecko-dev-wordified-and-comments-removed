"
use
strict
"
;
const
{
PureComponent
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
div
select
option
button
ul
li
span
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
actions
"
)
;
const
selectors
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
selectors
"
)
;
const
{
featureDescriptions
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
utils
"
)
;
const
Localized
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
.
Localized
)
;
class
DevToolsPresetSelection
extends
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
featureDescriptionMap
=
{
}
;
for
(
const
feature
of
featureDescriptions
)
{
this
.
featureDescriptionMap
[
feature
.
value
]
=
feature
;
}
}
onPresetChange
=
event
=
>
{
const
{
presets
}
=
this
.
props
;
this
.
props
.
changePreset
(
presets
event
.
target
.
value
)
;
}
;
render
(
)
{
const
{
presetName
presets
onEditSettingsLinkClicked
}
=
this
.
props
;
let
presetDescription
;
const
currentPreset
=
presets
[
presetName
]
;
if
(
currentPreset
)
{
presetDescription
=
Localized
(
{
id
:
currentPreset
.
l10nIds
.
devtools
.
description
}
)
;
}
else
{
const
{
interval
threads
features
}
=
this
.
props
;
presetDescription
=
div
(
null
ul
(
{
className
:
"
perf
-
presets
-
custom
"
}
li
(
null
Localized
(
{
id
:
"
perftools
-
devtools
-
interval
-
label
"
}
span
(
{
className
:
"
perf
-
presets
-
custom
-
bold
"
}
)
)
"
"
Localized
(
{
id
:
"
perftools
-
range
-
interval
-
milliseconds
"
interval
:
interval
}
)
)
li
(
null
Localized
(
{
id
:
"
perftools
-
devtools
-
threads
-
label
"
}
span
(
{
className
:
"
perf
-
presets
-
custom
-
bold
"
}
)
)
"
"
threads
.
join
(
"
"
)
)
features
.
map
(
feature
=
>
{
const
description
=
this
.
featureDescriptionMap
[
feature
]
;
if
(
!
description
)
{
throw
new
Error
(
"
Could
not
find
the
feature
description
for
"
+
feature
)
;
}
return
li
(
{
key
:
feature
}
description
?
description
.
name
:
feature
)
;
}
)
)
)
;
}
return
div
(
{
className
:
"
perf
-
presets
"
}
div
(
{
className
:
"
perf
-
presets
-
settings
"
}
Localized
(
{
id
:
"
perftools
-
devtools
-
settings
-
label
"
}
)
)
div
(
{
className
:
"
perf
-
presets
-
details
"
}
div
(
{
className
:
"
perf
-
presets
-
details
-
row
"
}
select
(
{
className
:
"
perf
-
presets
-
select
"
onChange
:
this
.
onPresetChange
value
:
presetName
}
Object
.
entries
(
presets
)
.
map
(
(
[
name
preset
]
)
=
>
Localized
(
{
id
:
preset
.
l10nIds
.
devtools
.
label
}
option
(
{
key
:
name
value
:
name
}
)
)
)
Localized
(
{
id
:
"
perftools
-
presets
-
custom
-
label
"
}
option
(
{
value
:
"
custom
"
}
)
)
)
)
div
(
{
className
:
"
perf
-
presets
-
details
-
row
perf
-
presets
-
description
"
}
presetDescription
)
button
(
{
className
:
"
perf
-
external
-
link
"
onClick
:
onEditSettingsLinkClicked
}
Localized
(
{
id
:
"
perftools
-
button
-
edit
-
settings
"
}
)
)
)
)
;
}
}
function
mapStateToProps
(
state
)
{
return
{
presetName
:
selectors
.
getPresetName
(
state
)
presets
:
selectors
.
getPresets
(
state
)
interval
:
selectors
.
getInterval
(
state
)
threads
:
selectors
.
getThreads
(
state
)
features
:
selectors
.
getFeatures
(
state
)
}
;
}
const
mapDispatchToProps
=
{
changePreset
:
actions
.
changePreset
}
;
module
.
exports
=
connect
(
mapStateToProps
mapDispatchToProps
)
(
DevToolsPresetSelection
)
;
