"
use
strict
"
;
const
{
getRecordingSettings
setRecordingSettings
addPrefObserver
removePrefObserver
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
background
.
jsm
.
js
"
)
;
const
{
PureComponent
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
{
connect
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
redux
.
js
"
)
;
const
selectors
=
require
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
store
/
selectors
.
js
"
)
;
const
actions
=
require
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
store
/
actions
.
js
"
)
;
class
ProfilerPreferenceObserver
extends
PureComponent
{
componentDidMount
(
)
{
this
.
_updateSettingsFromPreferences
(
)
;
addPrefObserver
(
this
.
_updateSettingsFromPreferences
)
;
}
componentDidUpdate
(
)
{
const
{
recordingSettingsFromRedux
pageContext
}
=
this
.
props
;
setRecordingSettings
(
pageContext
recordingSettingsFromRedux
)
;
}
componentWillUnmount
(
)
{
removePrefObserver
(
this
.
_updateSettingsFromPreferences
)
;
}
_updateSettingsFromPreferences
=
(
)
=
>
{
const
{
updateSettingsFromPreferences
pageContext
supportedFeatures
}
=
this
.
props
;
const
recordingSettingsFromPrefs
=
getRecordingSettings
(
pageContext
supportedFeatures
)
;
updateSettingsFromPreferences
(
recordingSettingsFromPrefs
)
;
}
;
render
(
)
{
return
null
;
}
}
function
mapStateToProps
(
state
)
{
return
{
recordingSettingsFromRedux
:
selectors
.
getRecordingSettings
(
state
)
pageContext
:
selectors
.
getPageContext
(
state
)
supportedFeatures
:
selectors
.
getSupportedFeatures
(
state
)
}
;
}
const
mapDispatchToProps
=
{
updateSettingsFromPreferences
:
actions
.
updateSettingsFromPreferences
}
;
module
.
exports
=
connect
(
mapStateToProps
mapDispatchToProps
)
(
ProfilerPreferenceObserver
)
;
