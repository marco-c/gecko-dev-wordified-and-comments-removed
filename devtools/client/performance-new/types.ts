import
{
Reducer
as
ReduxReducer
Store
as
ReduxStore
}
from
"
devtools
/
client
/
shared
/
vendor
/
redux
"
;
export
interface
PanelWindow
extends
Window
{
gToolbox
?
:
any
;
gTarget
?
:
any
;
gInit
(
perfFront
:
any
preferenceFront
:
any
)
:
void
;
gDestroy
(
)
:
void
;
}
export
interface
Target
{
client
:
any
;
}
export
interface
Toolbox
{
target
:
Target
;
}
export
interface
PerfFront
{
startProfiler
:
any
;
getProfileAndStopProfiler
:
any
;
stopProfilerAndDiscardProfile
:
any
;
getSymbolTable
:
any
;
isActive
:
any
;
isSupportedPlatform
:
any
;
isLockedForPrivateBrowsing
:
any
;
}
export
interface
PreferenceFront
{
}
export
type
RecordingState
=
|
"
not
-
yet
-
known
"
|
"
available
-
to
-
record
"
|
"
request
-
to
-
start
-
recording
"
|
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
|
"
request
-
to
-
stop
-
profiler
"
|
"
recording
"
|
"
other
-
is
-
recording
"
|
"
locked
-
by
-
private
-
browsing
"
;
export
interface
State
{
recordingState
:
RecordingState
;
recordingUnexpectedlyStopped
:
boolean
;
isSupportedPlatform
:
boolean
;
interval
:
number
;
entries
:
number
;
features
:
string
[
]
;
threads
:
string
[
]
;
objdirs
:
string
[
]
;
initializedValues
:
InitializedValues
|
null
;
}
export
type
Selector
<
T
>
=
(
state
:
State
)
=
>
T
;
export
type
ThunkDispatch
=
<
Returns
>
(
action
:
ThunkAction
<
Returns
>
)
=
>
Returns
;
export
type
PlainDispatch
=
(
action
:
Action
)
=
>
Action
;
export
type
GetState
=
(
)
=
>
State
;
export
type
SymbolTableAsTuple
=
[
Uint32Array
Uint32Array
Uint8Array
]
;
export
type
Dispatch
=
PlainDispatch
&
ThunkDispatch
;
export
type
ThunkAction
<
Returns
>
=
(
dispatch
:
Dispatch
getState
:
GetState
)
=
>
Returns
;
export
interface
Library
{
start
:
number
;
end
:
number
;
offset
:
number
;
name
:
string
;
path
:
string
;
debugName
:
string
;
debugPath
:
string
;
breakpadId
:
string
;
arch
:
string
;
}
export
interface
GeckoProfile
{
}
export
type
GetSymbolTableCallback
=
(
debugName
:
string
breakpadId
:
string
)
=
>
Promise
<
SymbolTableAsTuple
>
;
export
type
ReceiveProfile
=
(
geckoProfile
:
GeckoProfile
getSymbolTableCallback
:
GetSymbolTableCallback
)
=
>
void
;
export
type
SetRecordingPreferences
=
(
settings
:
Object
)
=
>
void
;
export
interface
RecordingStateFromPreferences
{
entries
:
number
;
interval
:
number
;
features
:
string
[
]
;
threads
:
string
[
]
;
objdirs
:
string
[
]
;
}
export
type
Reducer
<
S
>
=
(
state
:
S
|
undefined
action
:
Action
)
=
>
S
;
export
interface
InitializedValues
{
perfFront
:
PerfFront
;
receiveProfile
:
ReceiveProfile
;
setRecordingPreferences
:
SetRecordingPreferences
;
isPopup
:
boolean
;
getSymbolTableGetter
:
(
profile
:
Object
)
=
>
GetSymbolTableCallback
;
}
export
type
Store
=
ReduxStore
<
State
Action
>
;
export
type
Action
=
|
{
type
:
"
CHANGE_RECORDING_STATE
"
;
state
:
RecordingState
;
didRecordingUnexpectedlyStopped
:
boolean
;
}
|
{
type
:
"
REPORT_PROFILER_READY
"
;
isSupportedPlatform
:
boolean
;
recordingState
:
RecordingState
;
}
|
{
type
:
"
CHANGE_INTERVAL
"
;
interval
:
number
;
}
|
{
type
:
"
CHANGE_ENTRIES
"
;
entries
:
number
;
}
|
{
type
:
"
CHANGE_FEATURES
"
;
features
:
string
[
]
;
}
|
{
type
:
"
CHANGE_THREADS
"
;
threads
:
string
[
]
;
}
|
{
type
:
"
CHANGE_OBJDIRS
"
;
objdirs
:
string
[
]
;
}
|
{
type
:
"
INITIALIZE_STORE
"
;
perfFront
:
PerfFront
;
receiveProfile
:
ReceiveProfile
;
setRecordingPreferences
:
SetRecordingPreferences
;
isPopup
:
boolean
;
recordingSettingsFromPreferences
:
RecordingStateFromPreferences
;
getSymbolTableGetter
:
(
profile
:
Object
)
=
>
GetSymbolTableCallback
;
}
;
