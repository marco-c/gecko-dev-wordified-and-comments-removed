"
use
strict
"
;
const
{
createLazyLoaders
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
typescript
-
lazy
-
load
.
jsm
.
js
"
)
;
const
lazy
=
createLazyLoaders
(
{
Services
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
PanelMultiView
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
)
Background
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
background
.
jsm
.
js
"
)
}
)
;
function
selectElementsInPanelview
(
panelview
)
{
const
document
=
panelview
.
ownerDocument
;
function
getElementById
(
id
)
{
const
{
PanelMultiView
}
=
lazy
.
PanelMultiView
(
)
;
const
element
=
PanelMultiView
.
getViewNode
(
document
id
)
;
if
(
!
element
)
{
throw
new
Error
(
Could
not
find
the
element
from
the
ID
"
{
id
}
"
)
;
}
return
element
;
}
return
{
document
panelview
window
:
(
document
.
defaultView
)
inactive
:
getElementById
(
"
PanelUI
-
profiler
-
inactive
"
)
active
:
getElementById
(
"
PanelUI
-
profiler
-
active
"
)
locked
:
getElementById
(
"
PanelUI
-
profiler
-
locked
"
)
presetDescription
:
getElementById
(
"
PanelUI
-
profiler
-
content
-
description
"
)
presetCustom
:
getElementById
(
"
PanelUI
-
profiler
-
content
-
custom
"
)
presetsCustomButton
:
getElementById
(
"
PanelUI
-
profiler
-
content
-
custom
-
button
"
)
presetsMenuList
:
(
getElementById
(
"
PanelUI
-
profiler
-
presets
"
)
)
header
:
getElementById
(
"
PanelUI
-
profiler
-
header
"
)
info
:
getElementById
(
"
PanelUI
-
profiler
-
info
"
)
menupopup
:
getElementById
(
"
PanelUI
-
profiler
-
presets
-
menupopup
"
)
infoButton
:
getElementById
(
"
PanelUI
-
profiler
-
info
-
button
"
)
learnMore
:
getElementById
(
"
PanelUI
-
profiler
-
learn
-
more
"
)
startRecording
:
getElementById
(
"
PanelUI
-
profiler
-
startRecording
"
)
stopAndDiscard
:
getElementById
(
"
PanelUI
-
profiler
-
stopAndDiscard
"
)
stopAndCapture
:
getElementById
(
"
PanelUI
-
profiler
-
stopAndCapture
"
)
settingsSection
:
getElementById
(
"
PanelUI
-
profiler
-
content
-
settings
"
)
contentRecording
:
getElementById
(
"
PanelUI
-
profiler
-
content
-
recording
"
)
}
;
}
function
createViewControllers
(
state
elements
)
{
return
{
updateInfoCollapse
(
)
{
const
{
header
info
}
=
elements
;
header
.
setAttribute
(
"
isinfocollapsed
"
state
.
isInfoCollapsed
?
"
true
"
:
"
false
"
)
;
if
(
state
.
isInfoCollapsed
)
{
const
{
height
}
=
info
.
getBoundingClientRect
(
)
;
info
.
style
.
marginBlockEnd
=
-
{
height
}
px
;
}
else
{
info
.
style
.
marginBlockEnd
=
"
0
"
;
}
}
updatePresets
(
)
{
const
{
Services
}
=
lazy
.
Services
(
)
;
const
{
presets
getRecordingPreferences
}
=
lazy
.
Background
(
)
;
const
{
presetName
}
=
getRecordingPreferences
(
"
aboutprofiling
"
Services
.
profiler
.
GetFeatures
(
)
)
;
const
preset
=
presets
[
presetName
]
;
if
(
preset
)
{
elements
.
presetDescription
.
style
.
display
=
"
block
"
;
elements
.
presetCustom
.
style
.
display
=
"
none
"
;
elements
.
presetDescription
.
textContent
=
preset
.
description
;
elements
.
presetsMenuList
.
value
=
presetName
;
const
{
height
}
=
elements
.
presetDescription
.
getBoundingClientRect
(
)
;
elements
.
presetDescription
.
style
.
height
=
{
height
}
px
;
}
else
{
elements
.
presetDescription
.
style
.
display
=
"
none
"
;
elements
.
presetCustom
.
style
.
display
=
"
block
"
;
elements
.
presetsMenuList
.
value
=
"
custom
"
;
}
const
{
PanelMultiView
}
=
lazy
.
PanelMultiView
(
)
;
PanelMultiView
.
forNode
(
elements
.
panelview
)
.
descriptionHeightWorkaround
(
)
;
}
updateProfilerState
(
)
{
const
{
Services
}
=
lazy
.
Services
(
)
;
let
profilerState
=
Services
.
profiler
.
IsActive
(
)
?
"
active
"
:
"
inactive
"
;
if
(
!
Services
.
profiler
.
CanProfile
(
)
)
{
profilerState
=
"
locked
"
;
}
switch
(
profilerState
)
{
case
"
active
"
:
elements
.
inactive
.
setAttribute
(
"
hidden
"
"
true
"
)
;
elements
.
active
.
setAttribute
(
"
hidden
"
"
false
"
)
;
elements
.
settingsSection
.
setAttribute
(
"
hidden
"
"
true
"
)
;
elements
.
contentRecording
.
setAttribute
(
"
hidden
"
"
false
"
)
;
elements
.
locked
.
setAttribute
(
"
hidden
"
"
true
"
)
;
break
;
case
"
inactive
"
:
elements
.
inactive
.
setAttribute
(
"
hidden
"
"
false
"
)
;
elements
.
active
.
setAttribute
(
"
hidden
"
"
true
"
)
;
elements
.
settingsSection
.
setAttribute
(
"
hidden
"
"
false
"
)
;
elements
.
contentRecording
.
setAttribute
(
"
hidden
"
"
true
"
)
;
elements
.
locked
.
setAttribute
(
"
hidden
"
"
true
"
)
;
break
;
case
"
locked
"
:
{
elements
.
inactive
.
setAttribute
(
"
hidden
"
"
true
"
)
;
elements
.
active
.
setAttribute
(
"
hidden
"
"
true
"
)
;
elements
.
settingsSection
.
setAttribute
(
"
hidden
"
"
true
"
)
;
elements
.
contentRecording
.
setAttribute
(
"
hidden
"
"
true
"
)
;
elements
.
locked
.
setAttribute
(
"
hidden
"
"
false
"
)
;
const
{
height
}
=
elements
.
locked
.
getBoundingClientRect
(
)
;
elements
.
locked
.
style
.
height
=
{
height
}
px
;
break
;
}
default
:
throw
new
Error
(
"
Unhandled
profiler
state
.
"
)
;
}
}
createPresetsList
(
)
{
if
(
elements
.
menupopup
.
getAttribute
(
"
presetsbuilt
"
)
=
=
=
"
true
"
)
{
return
;
}
const
{
Services
}
=
lazy
.
Services
(
)
;
const
{
presets
}
=
lazy
.
Background
(
)
;
const
currentPreset
=
Services
.
prefs
.
getCharPref
(
"
devtools
.
performance
.
recording
.
preset
"
)
;
const
menuitems
=
Object
.
entries
(
presets
)
.
map
(
(
[
id
preset
]
)
=
>
{
const
menuitem
=
elements
.
document
.
createXULElement
(
"
menuitem
"
)
;
menuitem
.
setAttribute
(
"
label
"
preset
.
label
)
;
menuitem
.
setAttribute
(
"
value
"
id
)
;
if
(
id
=
=
=
currentPreset
)
{
elements
.
presetsMenuList
.
setAttribute
(
"
value
"
id
)
;
}
return
menuitem
;
}
)
;
elements
.
menupopup
.
prepend
(
.
.
.
menuitems
)
;
elements
.
menupopup
.
setAttribute
(
"
presetsbuilt
"
"
true
"
)
;
}
hidePopup
(
)
{
const
panel
=
elements
.
panelview
.
closest
(
"
panel
"
)
;
if
(
!
panel
)
{
throw
new
Error
(
"
Could
not
find
the
panel
from
the
panelview
.
"
)
;
}
(
panel
)
.
hidePopup
(
)
;
}
}
;
}
function
initializePopup
(
state
elements
view
)
{
view
.
createPresetsList
(
)
;
state
.
cleanup
.
push
(
(
)
=
>
{
state
.
isInfoCollapsed
=
true
;
view
.
updateInfoCollapse
(
)
;
}
)
;
elements
.
header
.
setAttribute
(
"
animationready
"
"
false
"
)
;
elements
.
window
.
requestAnimationFrame
(
(
)
=
>
{
view
.
updateInfoCollapse
(
)
;
view
.
updateProfilerState
(
)
;
view
.
updatePresets
(
)
;
const
{
PanelMultiView
}
=
lazy
.
PanelMultiView
(
)
;
PanelMultiView
.
forNode
(
elements
.
panelview
)
.
descriptionHeightWorkaround
(
)
;
elements
.
window
.
requestAnimationFrame
(
(
)
=
>
{
elements
.
header
.
setAttribute
(
"
animationready
"
"
true
"
)
;
}
)
;
}
)
;
}
function
addPopupEventHandlers
(
state
elements
view
)
{
const
{
changePreset
startProfiler
stopProfiler
captureProfile
}
=
lazy
.
Background
(
)
;
function
addHandler
(
element
type
handler
)
{
element
.
addEventListener
(
type
handler
)
;
state
.
cleanup
.
push
(
(
)
=
>
{
element
.
removeEventListener
(
type
handler
)
;
}
)
;
}
addHandler
(
elements
.
infoButton
"
click
"
event
=
>
{
event
.
preventDefault
(
)
;
state
.
isInfoCollapsed
=
!
state
.
isInfoCollapsed
;
view
.
updateInfoCollapse
(
)
;
}
)
;
addHandler
(
elements
.
startRecording
"
click
"
(
)
=
>
{
startProfiler
(
"
aboutprofiling
"
)
;
}
)
;
addHandler
(
elements
.
stopAndDiscard
"
click
"
(
)
=
>
{
stopProfiler
(
)
;
}
)
;
addHandler
(
elements
.
stopAndCapture
"
click
"
(
)
=
>
{
captureProfile
(
"
aboutprofiling
"
)
;
view
.
hidePopup
(
)
;
}
)
;
addHandler
(
elements
.
learnMore
"
click
"
(
)
=
>
{
elements
.
window
.
openWebLinkIn
(
"
https
:
/
/
profiler
.
firefox
.
com
/
docs
/
"
"
tab
"
)
;
view
.
hidePopup
(
)
;
}
)
;
addHandler
(
elements
.
presetsMenuList
"
command
"
(
)
=
>
{
changePreset
(
"
aboutprofiling
"
elements
.
presetsMenuList
.
value
Services
.
profiler
.
GetFeatures
(
)
)
;
view
.
updatePresets
(
)
;
}
)
;
addHandler
(
elements
.
presetsMenuList
"
popuphidden
"
event
=
>
{
event
.
stopPropagation
(
)
;
}
)
;
addHandler
(
elements
.
presetsMenuList
"
click
"
event
=
>
{
event
.
preventDefault
(
)
;
}
)
;
addHandler
(
elements
.
presetsCustomButton
"
click
"
(
)
=
>
{
elements
.
window
.
openTrustedLinkIn
(
"
about
:
profiling
"
"
tab
"
)
;
view
.
hidePopup
(
)
;
}
)
;
const
{
Services
}
=
lazy
.
Services
(
)
;
const
events
=
[
"
profiler
-
started
"
"
profiler
-
stopped
"
"
chrome
-
document
-
global
-
created
"
"
last
-
pb
-
context
-
exited
"
]
;
for
(
const
event
of
events
)
{
Services
.
obs
.
addObserver
(
view
.
updateProfilerState
event
)
;
state
.
cleanup
.
push
(
(
)
=
>
{
Services
.
obs
.
removeObserver
(
view
.
updateProfilerState
event
)
;
}
)
;
}
}
(
this
)
.
module
=
{
}
;
module
.
exports
=
{
selectElementsInPanelview
createViewControllers
addPopupEventHandlers
initializePopup
}
;
var
EXPORTED_SYMBOLS
=
Object
.
keys
(
module
.
exports
)
;
