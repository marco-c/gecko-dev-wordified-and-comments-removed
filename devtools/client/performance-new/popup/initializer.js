"
use
strict
"
;
{
const
{
BrowserLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
)
;
const
browserLoader
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
"
window
}
)
;
const
scope
=
this
;
scope
.
require
=
browserLoader
.
require
;
scope
.
loader
=
browserLoader
.
loader
;
}
const
{
getRecordingPreferencesFromBrowser
setRecordingPreferencesOnBrowser
getSymbolsFromThisBrowser
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
background
.
jsm
.
js
"
)
;
const
{
receiveProfile
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
browser
"
)
;
const
Perf
=
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
Perf
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
createStore
=
require
(
"
devtools
/
client
/
shared
/
redux
/
create
-
store
"
)
;
const
reducers
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
reducers
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
actions
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
ActorReadyGeckoProfilerInterface
}
=
require
(
"
devtools
/
shared
/
performance
-
new
/
gecko
-
profiler
-
interface
"
)
;
const
{
LightweightThemeManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LightweightThemeManager
.
jsm
"
)
;
document
.
documentElement
.
setAttribute
(
"
force
-
theme
"
isCurrentThemeDark
(
)
?
"
dark
"
:
"
light
"
)
;
document
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
gInit
(
)
;
}
)
;
async
function
gInit
(
)
{
const
store
=
createStore
(
reducers
)
;
const
perfFrontInterface
=
new
ActorReadyGeckoProfilerInterface
(
)
;
const
supportedFeatures
=
await
perfFrontInterface
.
getSupportedFeatures
(
)
;
store
.
dispatch
(
actions
.
initializeStore
(
{
perfFront
:
perfFrontInterface
receiveProfile
supportedFeatures
recordingPreferences
:
getRecordingPreferencesFromBrowser
(
)
setRecordingPreferences
:
setRecordingPreferencesOnBrowser
getSymbolTableGetter
:
(
)
=
>
getSymbolsFromThisBrowser
isPopup
:
true
}
)
)
;
ReactDOM
.
render
(
React
.
createElement
(
Provider
{
store
}
React
.
createElement
(
Perf
)
)
document
.
querySelector
(
"
#
root
"
)
)
;
window
.
addEventListener
(
"
unload
"
function
(
)
{
perfFrontInterface
.
destroy
(
)
;
}
)
;
resizeWindow
(
)
;
}
function
resizeWindow
(
)
{
window
.
requestAnimationFrame
(
(
)
=
>
{
const
anyWindow
=
window
;
const
{
gResizePopup
}
=
anyWindow
;
if
(
gResizePopup
)
{
gResizePopup
(
document
.
body
.
clientHeight
)
;
}
}
)
;
}
function
isCurrentThemeDark
(
)
{
const
DARK_THEME_ID
=
"
firefox
-
compact
-
dark
mozilla
.
org
"
;
return
(
LightweightThemeManager
.
themeData
&
&
LightweightThemeManager
.
themeData
.
theme
&
&
LightweightThemeManager
.
themeData
.
theme
.
id
=
=
=
DARK_THEME_ID
)
;
}
