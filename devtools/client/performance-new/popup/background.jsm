"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
loader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ProfilerGetSymbols
"
"
resource
:
/
/
gre
/
modules
/
ProfilerGetSymbols
.
jsm
"
)
;
loader
.
lazyRequireGetter
(
this
"
receiveProfile
"
"
devtools
/
client
/
performance
-
new
/
browser
"
true
)
;
const
PROFILER_STATE_PREF
=
"
devtools
.
performance
.
popup
"
;
const
DEFAULT_WINDOW_LENGTH
=
20
;
const
symbolCache
=
new
Map
(
)
;
const
primeSymbolStore
=
libs
=
>
{
for
(
const
{
path
debugName
debugPath
breakpadId
}
of
libs
)
{
symbolCache
.
set
(
{
debugName
}
/
{
breakpadId
}
{
path
debugPath
}
)
;
}
}
;
const
state
=
intializeState
(
)
;
function
adjustState
(
newState
)
{
newState
=
JSON
.
parse
(
JSON
.
stringify
(
newState
)
)
;
Object
.
assign
(
state
newState
)
;
try
{
Services
.
prefs
.
setStringPref
(
PROFILER_STATE_PREF
JSON
.
stringify
(
state
)
)
;
}
catch
(
error
)
{
console
.
error
(
"
Unable
to
save
the
profiler
state
for
the
popup
.
"
)
;
throw
error
;
}
}
function
getSymbols
(
debugName
breakpadId
)
{
if
(
symbolCache
.
size
=
=
=
0
)
{
primeSymbolStore
(
Services
.
profiler
.
sharedLibraries
)
;
}
const
cachedLibInfo
=
symbolCache
.
get
(
{
debugName
}
/
{
breakpadId
}
)
;
if
(
!
cachedLibInfo
)
{
throw
new
Error
(
The
library
{
debugName
}
{
breakpadId
}
is
not
in
the
+
"
Services
.
profiler
.
sharedLibraries
list
so
the
local
path
for
it
is
not
known
"
+
"
and
symbols
for
it
can
not
be
obtained
.
This
usually
happens
if
a
content
"
+
"
process
uses
a
library
that
'
s
not
used
in
the
parent
process
-
"
+
"
Services
.
profiler
.
sharedLibraries
only
knows
about
libraries
in
the
"
+
"
parent
process
.
"
)
;
}
const
{
path
debugPath
}
=
cachedLibInfo
;
if
(
!
OS
.
Path
.
split
(
path
)
.
absolute
)
{
throw
new
Error
(
"
Services
.
profiler
.
sharedLibraries
did
not
contain
an
absolute
path
for
"
+
the
library
{
debugName
}
{
breakpadId
}
so
symbols
for
this
library
can
not
+
"
be
obtained
.
"
)
;
}
return
ProfilerGetSymbols
.
getSymbolTable
(
path
debugPath
breakpadId
)
;
}
async
function
captureProfile
(
)
{
if
(
!
state
.
isRunning
)
{
return
;
}
Services
.
profiler
.
PauseSampling
(
)
;
const
profile
=
await
Services
.
profiler
.
getProfileDataAsGzippedArrayBuffer
(
)
.
catch
(
e
=
>
{
console
.
error
(
e
)
;
return
{
}
;
}
)
;
receiveProfile
(
profile
getSymbols
)
;
Services
.
profiler
.
ResumeSampling
(
)
;
}
function
getEnabledFeatures
(
features
threads
)
{
const
enabledFeatures
=
Object
.
keys
(
features
)
.
filter
(
f
=
>
features
[
f
]
)
;
if
(
threads
.
length
>
0
)
{
enabledFeatures
.
push
(
"
threads
"
)
;
}
const
supportedFeatures
=
Services
.
profiler
.
GetFeatures
(
[
]
)
;
return
enabledFeatures
.
filter
(
feature
=
>
supportedFeatures
.
includes
(
feature
)
)
;
}
function
startProfiler
(
)
{
const
threads
=
state
.
threads
.
split
(
"
"
)
;
const
features
=
getEnabledFeatures
(
state
.
features
threads
)
;
const
windowLength
=
state
.
windowLength
!
=
=
state
.
infiniteWindowLength
?
state
.
windowLength
:
0
;
const
{
buffersize
interval
}
=
state
;
Services
.
profiler
.
StartProfiler
(
buffersize
interval
features
threads
windowLength
)
;
}
async
function
stopProfiler
(
)
{
Services
.
profiler
.
StopProfiler
(
)
;
}
function
toggleProfiler
(
)
{
if
(
state
.
isRunning
)
{
stopProfiler
(
)
;
}
else
{
startProfiler
(
)
;
}
}
function
restartProfiler
(
)
{
stopProfiler
(
)
;
startProfiler
(
)
;
}
const
isRunningObserver
=
{
_observers
:
new
Set
(
)
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
profiler
-
started
"
:
case
"
profiler
-
stopped
"
:
const
isRunningPromise
=
Promise
.
resolve
(
topic
=
=
=
"
profiler
-
started
"
)
;
for
(
const
observer
of
this
.
_observers
)
{
isRunningPromise
.
then
(
observer
)
;
}
break
;
}
}
_startListening
(
)
{
Services
.
obs
.
addObserver
(
this
"
profiler
-
started
"
)
;
Services
.
obs
.
addObserver
(
this
"
profiler
-
stopped
"
)
;
}
_stopListening
(
)
{
Services
.
obs
.
removeObserver
(
this
"
profiler
-
started
"
)
;
Services
.
obs
.
removeObserver
(
this
"
profiler
-
stopped
"
)
;
}
addObserver
(
observer
)
{
if
(
this
.
_observers
.
size
=
=
=
0
)
{
this
.
_startListening
(
)
;
}
this
.
_observers
.
add
(
observer
)
;
Promise
.
resolve
(
Services
.
profiler
.
IsActive
(
)
)
.
then
(
observer
)
;
}
removeObserver
(
observer
)
{
if
(
this
.
_observers
.
delete
(
observer
)
&
&
this
.
_observers
.
size
=
=
=
0
)
{
this
.
_stopListening
(
)
;
}
}
}
;
function
getStoredStateOrNull
(
)
{
const
storedStateString
=
Services
.
prefs
.
getStringPref
(
PROFILER_STATE_PREF
"
"
)
;
if
(
storedStateString
=
=
=
"
"
)
{
return
null
;
}
try
{
return
JSON
.
parse
(
storedStateString
)
;
}
catch
(
error
)
{
console
.
error
(
Could
not
parse
the
stored
state
for
the
profile
in
the
+
preferences
{
PROFILER_STATE_PREF
}
)
;
}
return
null
;
}
function
intializeState
(
)
{
const
storedState
=
getStoredStateOrNull
(
)
;
if
(
storedState
)
{
return
storedState
;
}
const
features
=
{
java
:
false
js
:
true
leaf
:
true
mainthreadio
:
false
privacy
:
false
responsiveness
:
true
screenshots
:
false
seqstyle
:
false
stackwalk
:
true
tasktracer
:
false
trackopts
:
false
jstracer
:
false
preferencereads
:
false
jsallocations
:
false
}
;
if
(
AppConstants
.
platform
=
=
=
"
android
"
)
{
features
.
java
=
true
;
}
return
{
isRunning
:
false
settingsOpen
:
false
buffersize
:
10000000
windowLength
:
DEFAULT_WINDOW_LENGTH
interval
:
1
features
threads
:
"
GeckoMain
Compositor
"
}
;
}
isRunningObserver
.
addObserver
(
isRunning
=
>
{
adjustState
(
{
isRunning
}
)
;
}
)
;
const
platform
=
AppConstants
.
platform
;
var
EXPORTED_SYMBOLS
=
[
"
adjustState
"
"
captureProfile
"
"
state
"
"
startProfiler
"
"
stopProfiler
"
"
restartProfiler
"
"
toggleProfiler
"
"
isRunningObserver
"
"
platform
"
]
;
