"
use
strict
"
;
(
this
)
.
exports
=
{
}
;
const
{
createLazyLoaders
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
typescript
-
lazy
-
load
.
jsm
.
js
"
)
;
const
lazy
=
createLazyLoaders
(
{
Services
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
CustomizableUI
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
CustomizableWidgets
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableWidgets
.
jsm
"
)
PopupPanel
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
panel
.
jsm
.
js
"
)
Background
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
background
.
jsm
.
js
"
)
}
)
;
const
WIDGET_ID
=
"
profiler
-
button
"
;
function
addToNavbar
(
document
)
{
const
{
CustomizableUI
}
=
lazy
.
CustomizableUI
(
)
;
CustomizableUI
.
addWidgetToArea
(
WIDGET_ID
CustomizableUI
.
AREA_NAVBAR
)
;
}
function
remove
(
)
{
const
{
CustomizableUI
}
=
lazy
.
CustomizableUI
(
)
;
CustomizableUI
.
removeWidgetFromArea
(
WIDGET_ID
)
;
}
function
isInNavbar
(
)
{
const
{
CustomizableUI
}
=
lazy
.
CustomizableUI
(
)
;
return
Boolean
(
CustomizableUI
.
getPlacementOfWidget
(
"
profiler
-
button
"
)
)
;
}
function
openPopup
(
document
)
{
const
button
=
document
.
querySelector
(
"
#
profiler
-
button
"
)
;
if
(
!
button
)
{
throw
new
Error
(
"
Could
not
find
the
profiler
button
.
"
)
;
}
const
cmdEvent
=
document
.
createEvent
(
"
xulcommandevent
"
)
;
cmdEvent
.
initCommandEvent
(
"
command
"
true
true
button
.
ownerGlobal
)
;
button
.
dispatchEvent
(
cmdEvent
)
;
}
function
initialize
(
toggleProfilerKeyShortcuts
)
{
const
{
CustomizableUI
}
=
lazy
.
CustomizableUI
(
)
;
const
{
CustomizableWidgets
}
=
lazy
.
CustomizableWidgets
(
)
;
const
{
Services
}
=
lazy
.
Services
(
)
;
const
widget
=
CustomizableUI
.
getWidget
(
WIDGET_ID
)
;
if
(
widget
&
&
widget
.
provider
=
=
CustomizableUI
.
PROVIDER_API
)
{
return
;
}
const
viewId
=
"
PanelUI
-
profiler
"
;
const
panelState
=
{
cleanup
:
[
]
isInfoCollapsed
:
true
}
;
function
handleCustomizationChange
(
)
{
const
isEnabled
=
isInNavbar
(
)
;
toggleProfilerKeyShortcuts
(
isEnabled
)
;
if
(
!
isEnabled
)
{
const
popupIntroDisplayedPref
=
"
devtools
.
performance
.
popup
.
intro
-
displayed
"
;
Services
.
prefs
.
setBoolPref
(
popupIntroDisplayedPref
false
)
;
if
(
Services
.
profiler
.
IsActive
(
)
)
{
Services
.
profiler
.
StopProfiler
(
)
;
}
}
}
const
item
=
{
id
:
WIDGET_ID
type
:
"
view
"
viewId
tooltiptext
:
"
profiler
-
button
.
tooltiptext
"
onViewShowing
:
event
=
>
{
try
{
const
{
selectElementsInPanelview
createViewControllers
addPopupEventHandlers
initializePopup
}
=
lazy
.
PopupPanel
(
)
;
const
panelElements
=
selectElementsInPanelview
(
event
.
target
)
;
const
panelView
=
createViewControllers
(
panelState
panelElements
)
;
addPopupEventHandlers
(
panelState
panelElements
panelView
)
;
initializePopup
(
panelState
panelElements
panelView
)
;
}
catch
(
error
)
{
console
.
error
(
error
)
;
}
}
onViewHiding
(
event
)
{
for
(
const
fn
of
panelState
.
cleanup
)
{
fn
(
)
;
}
panelState
.
cleanup
=
[
]
;
}
onBeforeCreated
:
document
=
>
{
const
popupIntroDisplayedPref
=
"
devtools
.
performance
.
popup
.
intro
-
displayed
"
;
panelState
.
isInfoCollapsed
=
Services
.
prefs
.
getBoolPref
(
popupIntroDisplayedPref
)
;
if
(
!
panelState
.
isInfoCollapsed
)
{
Services
.
prefs
.
setBoolPref
(
popupIntroDisplayedPref
true
)
;
}
const
window
=
document
.
defaultView
;
if
(
window
)
{
(
window
)
.
gNavToolbox
.
addEventListener
(
"
customizationchange
"
handleCustomizationChange
)
;
}
toggleProfilerKeyShortcuts
(
isInNavbar
(
)
)
;
}
onCreated
:
buttonElement
=
>
{
const
window
=
buttonElement
?
.
ownerDocument
?
.
defaultView
;
if
(
!
window
)
{
console
.
error
(
"
Unable
to
find
the
window
of
the
profiler
button
element
.
"
)
;
return
;
}
buttonElement
.
classList
.
add
(
"
subviewbutton
-
nav
"
)
;
buttonElement
.
setAttribute
(
"
wantdropmarker
"
"
true
"
)
;
buttonElement
.
addEventListener
(
"
click
"
item
)
;
buttonElement
.
addEventListener
(
"
keydown
"
item
)
;
function
setButtonActive
(
)
{
buttonElement
.
setAttribute
(
"
tooltiptext
"
"
The
profiler
is
recording
a
profile
"
)
;
buttonElement
.
classList
.
toggle
(
"
profiler
-
active
"
true
)
;
buttonElement
.
classList
.
toggle
(
"
profiler
-
paused
"
false
)
;
}
function
setButtonPaused
(
)
{
buttonElement
.
setAttribute
(
"
tooltiptext
"
"
The
profiler
is
capturing
a
profile
"
)
;
buttonElement
.
classList
.
toggle
(
"
profiler
-
active
"
false
)
;
buttonElement
.
classList
.
toggle
(
"
profiler
-
paused
"
true
)
;
}
function
setButtonInactive
(
)
{
buttonElement
.
setAttribute
(
"
tooltiptext
"
"
Record
a
performance
profile
"
)
;
buttonElement
.
classList
.
toggle
(
"
profiler
-
active
"
false
)
;
buttonElement
.
classList
.
toggle
(
"
profiler
-
paused
"
false
)
;
}
if
(
Services
.
profiler
.
IsPaused
(
)
)
{
setButtonPaused
(
)
;
}
if
(
Services
.
profiler
.
IsActive
(
)
)
{
setButtonActive
(
)
;
}
Services
.
obs
.
addObserver
(
setButtonActive
"
profiler
-
started
"
)
;
Services
.
obs
.
addObserver
(
setButtonInactive
"
profiler
-
stopped
"
)
;
Services
.
obs
.
addObserver
(
setButtonPaused
"
profiler
-
paused
"
)
;
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
Services
.
obs
.
removeObserver
(
setButtonActive
"
profiler
-
started
"
)
;
Services
.
obs
.
removeObserver
(
setButtonInactive
"
profiler
-
stopped
"
)
;
Services
.
obs
.
removeObserver
(
setButtonPaused
"
profiler
-
paused
"
)
;
buttonElement
.
removeEventListener
(
"
click
"
item
)
;
buttonElement
.
removeEventListener
(
"
keydown
"
item
)
;
}
)
;
}
handleEvent
:
event
=
>
{
function
startOrCapture
(
)
{
if
(
Services
.
profiler
.
IsPaused
(
)
)
{
return
;
}
const
{
startProfiler
captureProfile
}
=
lazy
.
Background
(
)
;
if
(
Services
.
profiler
.
IsActive
(
)
)
{
captureProfile
(
"
aboutprofiling
"
)
;
}
else
{
startProfiler
(
"
aboutprofiling
"
)
;
}
}
if
(
event
.
type
=
=
"
click
"
)
{
if
(
event
.
button
!
=
0
)
{
return
;
}
const
button
=
event
.
target
;
if
(
button
.
getAttribute
(
"
cui
-
anchorid
"
)
=
=
"
nav
-
bar
-
overflow
-
button
"
)
{
return
;
}
const
win
=
button
.
ownerGlobal
;
const
iconBounds
=
win
.
windowUtils
.
getBoundsWithoutFlushing
(
button
.
icon
)
;
if
(
win
.
RTL_UI
?
event
.
x
>
=
iconBounds
.
left
:
event
.
x
<
=
iconBounds
.
right
)
{
startOrCapture
(
)
;
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
}
}
else
if
(
event
.
type
=
=
"
keydown
"
)
{
if
(
event
.
key
=
=
"
"
|
|
event
.
key
=
=
"
Enter
"
)
{
startOrCapture
(
)
;
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
return
;
}
if
(
event
.
key
=
=
"
ArrowDown
"
)
{
const
button
=
event
.
target
;
const
cmdEvent
=
button
.
ownerDocument
.
createEvent
(
"
xulcommandevent
"
)
;
cmdEvent
.
initCommandEvent
(
"
command
"
true
true
button
.
ownerGlobal
0
event
.
ctrlKey
event
.
altKey
event
.
shiftKey
event
.
metaKey
null
event
.
mozInputSource
)
;
event
.
currentTarget
.
dispatchEvent
(
cmdEvent
)
;
}
}
}
}
;
CustomizableUI
.
createWidget
(
item
)
;
CustomizableWidgets
.
push
(
item
)
;
}
const
ProfilerMenuButton
=
{
initialize
addToNavbar
isInNavbar
openPopup
remove
}
;
exports
.
ProfilerMenuButton
=
ProfilerMenuButton
;
var
EXPORTED_SYMBOLS
=
Object
.
keys
(
exports
)
;
