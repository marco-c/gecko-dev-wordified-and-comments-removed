"
use
strict
"
;
function
requireLazy
(
callback
)
{
let
cache
;
return
(
)
=
>
{
if
(
cache
=
=
=
undefined
)
{
cache
=
callback
(
)
;
}
return
cache
;
}
;
}
(
this
)
.
exports
=
{
}
;
const
lazyServices
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
)
)
;
const
lazyCustomizableUI
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
)
)
;
const
lazyCustomizableWidgets
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableWidgets
.
jsm
"
)
)
)
;
const
BUTTON_ENABLED_PREF
=
"
devtools
.
performance
.
popup
.
enabled
"
;
const
WIDGET_ID
=
"
profiler
-
button
"
;
function
isEnabled
(
)
{
const
{
Services
}
=
lazyServices
(
)
;
return
Services
.
prefs
.
getBoolPref
(
BUTTON_ENABLED_PREF
false
)
;
}
function
setMenuItemChecked
(
document
isChecked
)
{
const
menuItem
=
document
.
querySelector
(
"
#
menu_toggleProfilerButtonMenu
"
)
;
if
(
!
menuItem
)
{
return
;
}
menuItem
.
setAttribute
(
"
checked
"
isChecked
.
toString
(
)
)
;
}
function
toggle
(
document
)
{
const
{
CustomizableUI
}
=
lazyCustomizableUI
(
)
;
const
{
Services
}
=
lazyServices
(
)
;
const
toggledValue
=
!
isEnabled
(
)
;
Services
.
prefs
.
setBoolPref
(
BUTTON_ENABLED_PREF
toggledValue
)
;
if
(
toggledValue
)
{
initialize
(
)
;
CustomizableUI
.
addWidgetToArea
(
WIDGET_ID
CustomizableUI
.
AREA_NAVBAR
)
;
}
else
{
setMenuItemChecked
(
document
false
)
;
CustomizableUI
.
destroyWidget
(
WIDGET_ID
)
;
const
element
=
document
.
getElementById
(
"
PanelUI
-
profiler
"
)
;
delete
(
element
)
.
_addedEventListeners
;
}
}
function
updateButtonColorForElement
(
buttonElement
)
{
return
(
)
=
>
{
const
{
Services
}
=
lazyServices
(
)
;
const
isRunning
=
Services
.
profiler
.
IsActive
(
)
;
buttonElement
.
style
.
fill
=
isRunning
?
"
#
0060df
"
:
"
"
;
}
;
}
function
initialize
(
)
{
const
{
CustomizableUI
}
=
lazyCustomizableUI
(
)
;
const
{
CustomizableWidgets
}
=
lazyCustomizableWidgets
(
)
;
const
{
Services
}
=
lazyServices
(
)
;
const
widget
=
CustomizableUI
.
getWidget
(
WIDGET_ID
)
;
if
(
widget
&
&
widget
.
provider
=
=
CustomizableUI
.
PROVIDER_API
)
{
return
;
}
let
observer
=
null
;
const
item
=
{
id
:
WIDGET_ID
type
:
"
view
"
viewId
:
"
PanelUI
-
profiler
"
tooltiptext
:
"
profiler
-
button
.
tooltiptext
"
onViewShowing
:
event
=
>
{
const
panelview
=
event
.
target
;
const
document
=
panelview
.
ownerDocument
;
if
(
!
document
)
{
throw
new
Error
(
"
Expected
to
find
a
document
on
the
panelview
element
.
"
)
;
}
const
iframe
=
document
.
createXULElement
(
"
iframe
"
)
;
iframe
.
id
=
"
PanelUI
-
profilerIframe
"
;
iframe
.
className
=
"
PanelUI
-
developer
-
iframe
"
;
iframe
.
src
=
"
chrome
:
/
/
devtools
/
content
/
performance
-
new
/
popup
/
popup
.
xhtml
"
;
panelview
.
appendChild
(
iframe
)
;
const
contentWindow
=
iframe
.
contentWindow
;
contentWindow
.
gClosePopup
=
(
)
=
>
{
CustomizableUI
.
hidePanelForNode
(
iframe
)
;
}
;
contentWindow
.
gResizePopup
=
height
=
>
{
iframe
.
style
.
height
=
{
Math
.
min
(
600
height
)
}
px
;
}
;
contentWindow
.
gIsDarkMode
=
document
.
documentElement
.
hasAttribute
(
"
lwt
-
popup
-
brighttext
"
)
;
event
.
detail
.
addBlocker
(
new
Promise
(
resolve
=
>
{
contentWindow
.
gReportReady
=
(
)
=
>
{
delete
contentWindow
.
gReportReady
;
resolve
(
)
;
}
;
}
)
)
;
}
onViewHiding
(
event
)
{
const
document
=
event
.
target
.
ownerDocument
;
const
iframe
=
document
.
getElementById
(
"
PanelUI
-
profilerIframe
"
)
;
if
(
!
iframe
)
{
throw
new
Error
(
"
Unable
to
select
the
PanelUI
-
profilerIframe
.
"
)
;
}
iframe
.
remove
(
)
;
}
onBeforeCreated
:
document
=
>
{
setMenuItemChecked
(
document
true
)
;
}
onCreated
:
buttonElement
=
>
{
observer
=
updateButtonColorForElement
(
buttonElement
)
;
Services
.
obs
.
addObserver
(
observer
"
profiler
-
started
"
)
;
Services
.
obs
.
addObserver
(
observer
"
profiler
-
stopped
"
)
;
observer
(
)
;
}
onDestroyed
:
(
)
=
>
{
if
(
observer
)
{
Services
.
obs
.
removeObserver
(
observer
"
profiler
-
started
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
profiler
-
stopped
"
)
;
observer
=
null
;
}
}
}
;
CustomizableUI
.
createWidget
(
item
)
;
CustomizableWidgets
.
push
(
item
)
;
}
const
ProfilerMenuButton
=
{
toggle
initialize
isEnabled
}
;
exports
.
ProfilerMenuButton
=
ProfilerMenuButton
;
var
EXPORTED_SYMBOLS
=
Object
.
keys
(
exports
)
;
