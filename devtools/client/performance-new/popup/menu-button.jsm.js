"
use
strict
"
;
function
requireLazy
(
callback
)
{
let
cache
;
return
(
)
=
>
{
if
(
cache
=
=
=
undefined
)
{
cache
=
callback
(
)
;
}
return
cache
;
}
;
}
(
this
)
.
exports
=
{
}
;
const
lazyServices
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
)
)
;
const
lazyCustomizableUI
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
)
)
;
const
lazyCustomizableWidgets
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableWidgets
.
jsm
"
)
)
)
;
const
lazyPopupPanel
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
panel
.
jsm
.
js
"
)
)
)
;
const
WIDGET_ID
=
"
profiler
-
button
"
;
function
addToNavbar
(
document
)
{
const
{
CustomizableUI
}
=
lazyCustomizableUI
(
)
;
CustomizableUI
.
addWidgetToArea
(
WIDGET_ID
CustomizableUI
.
AREA_NAVBAR
)
;
}
function
remove
(
)
{
const
{
CustomizableUI
}
=
lazyCustomizableUI
(
)
;
CustomizableUI
.
removeWidgetFromArea
(
WIDGET_ID
)
;
}
function
isInNavbar
(
)
{
const
{
CustomizableUI
}
=
lazyCustomizableUI
(
)
;
return
Boolean
(
CustomizableUI
.
getPlacementOfWidget
(
"
profiler
-
button
"
)
)
;
}
function
openPopup
(
document
)
{
const
button
=
document
.
querySelector
(
"
#
profiler
-
button
"
)
;
if
(
!
button
)
{
throw
new
Error
(
"
Could
not
find
the
profiler
button
.
"
)
;
}
button
.
click
(
)
;
}
function
updateButtonColorForElement
(
buttonElement
)
{
return
(
)
=
>
{
const
{
Services
}
=
lazyServices
(
)
;
const
isRunning
=
Services
.
profiler
.
IsActive
(
)
;
buttonElement
.
style
.
fill
=
isRunning
?
"
#
0060df
"
:
"
"
;
}
;
}
function
handleCustomizationChange
(
)
{
if
(
!
isInNavbar
(
)
)
{
const
popupIntroDisplayedPref
=
"
devtools
.
performance
.
popup
.
intro
-
displayed
"
;
const
{
Services
}
=
lazyServices
(
)
;
Services
.
prefs
.
setBoolPref
(
popupIntroDisplayedPref
false
)
;
}
}
function
initialize
(
)
{
const
{
CustomizableUI
}
=
lazyCustomizableUI
(
)
;
const
{
CustomizableWidgets
}
=
lazyCustomizableWidgets
(
)
;
const
{
Services
}
=
lazyServices
(
)
;
const
widget
=
CustomizableUI
.
getWidget
(
WIDGET_ID
)
;
if
(
widget
&
&
widget
.
provider
=
=
CustomizableUI
.
PROVIDER_API
)
{
return
;
}
let
observer
=
null
;
const
viewId
=
"
PanelUI
-
profiler
"
;
const
panelState
=
{
cleanup
:
[
]
isInfoCollapsed
:
true
}
;
const
item
=
{
id
:
WIDGET_ID
type
:
"
view
"
viewId
tooltiptext
:
"
profiler
-
button
.
tooltiptext
"
onViewShowing
:
event
=
>
{
try
{
const
{
selectElementsInPanelview
createViewControllers
addPopupEventHandlers
initializePopup
}
=
lazyPopupPanel
(
)
;
const
panelElements
=
selectElementsInPanelview
(
event
.
target
)
;
const
panelView
=
createViewControllers
(
panelState
panelElements
)
;
addPopupEventHandlers
(
panelState
panelElements
panelView
)
;
initializePopup
(
panelState
panelElements
panelView
)
;
}
catch
(
error
)
{
console
.
error
(
error
)
;
}
}
onViewHiding
(
event
)
{
for
(
const
fn
of
panelState
.
cleanup
)
{
fn
(
)
;
}
panelState
.
cleanup
=
[
]
;
}
onBeforeCreated
:
document
=
>
{
const
popupIntroDisplayedPref
=
"
devtools
.
performance
.
popup
.
intro
-
displayed
"
;
panelState
.
isInfoCollapsed
=
Services
.
prefs
.
getBoolPref
(
popupIntroDisplayedPref
)
;
if
(
!
panelState
.
isInfoCollapsed
)
{
Services
.
prefs
.
setBoolPref
(
popupIntroDisplayedPref
true
)
;
}
const
window
=
document
.
defaultView
;
if
(
window
)
{
(
window
)
.
gNavToolbox
.
addEventListener
(
"
customizationchange
"
handleCustomizationChange
)
;
}
}
onCreated
:
buttonElement
=
>
{
observer
=
updateButtonColorForElement
(
buttonElement
)
;
Services
.
obs
.
addObserver
(
observer
"
profiler
-
started
"
)
;
Services
.
obs
.
addObserver
(
observer
"
profiler
-
stopped
"
)
;
observer
(
)
;
}
onDestroyed
:
document
=
>
{
if
(
observer
)
{
Services
.
obs
.
removeObserver
(
observer
"
profiler
-
started
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
profiler
-
stopped
"
)
;
observer
=
null
;
}
const
window
=
document
.
defaultView
;
if
(
window
)
{
(
window
)
.
gNavToolbox
.
removeEventListener
(
"
customizationchange
"
handleCustomizationChange
)
;
}
}
}
;
CustomizableUI
.
createWidget
(
item
)
;
CustomizableWidgets
.
push
(
item
)
;
}
const
ProfilerMenuButton
=
{
initialize
addToNavbar
isInNavbar
openPopup
remove
}
;
exports
.
ProfilerMenuButton
=
ProfilerMenuButton
;
var
EXPORTED_SYMBOLS
=
Object
.
keys
(
exports
)
;
