"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
createLazyLoaders
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
typescript
-
lazy
-
load
.
jsm
.
js
"
)
;
const
AppConstants
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
.
AppConstants
;
const
ENTRIES_PREF
=
"
devtools
.
performance
.
recording
.
entries
"
;
const
INTERVAL_PREF
=
"
devtools
.
performance
.
recording
.
interval
"
;
const
FEATURES_PREF
=
"
devtools
.
performance
.
recording
.
features
"
;
const
THREADS_PREF
=
"
devtools
.
performance
.
recording
.
threads
"
;
const
OBJDIRS_PREF
=
"
devtools
.
performance
.
recording
.
objdirs
"
;
const
DURATION_PREF
=
"
devtools
.
performance
.
recording
.
duration
"
;
const
PRESET_PREF
=
"
devtools
.
performance
.
recording
.
preset
"
;
const
POPUP_FEATURE_FLAG_PREF
=
"
devtools
.
performance
.
popup
.
feature
-
flag
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
require
"
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
lazy
=
createLazyLoaders
(
{
OS
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
Utils
:
(
)
=
>
require
(
"
devtools
/
client
/
performance
-
new
/
utils
"
)
BrowserModule
:
(
)
=
>
require
(
"
devtools
/
client
/
performance
-
new
/
browser
"
)
RecordingUtils
:
(
)
=
>
require
(
"
devtools
/
shared
/
performance
-
new
/
recording
-
utils
"
)
CustomizableUI
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
PerfSymbolication
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
symbolication
.
jsm
.
js
"
)
ProfilerMenuButton
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
menu
-
button
.
jsm
.
js
"
)
}
)
;
const
presets
=
{
"
web
-
developer
"
:
{
label
:
"
Web
Developer
"
description
:
"
Recommended
preset
for
most
web
app
debugging
with
low
overhead
.
"
entries
:
128
*
1024
*
1024
interval
:
1
features
:
[
"
screenshots
"
"
js
"
"
cpu
"
]
threads
:
[
"
GeckoMain
"
"
Compositor
"
"
Renderer
"
"
DOM
Worker
"
]
duration
:
0
profilerViewMode
:
"
active
-
tab
"
}
"
firefox
-
platform
"
:
{
label
:
"
Firefox
Platform
"
description
:
"
Recommended
preset
for
internal
Firefox
platform
debugging
.
"
entries
:
128
*
1024
*
1024
interval
:
1
features
:
[
"
screenshots
"
"
js
"
"
leaf
"
"
stackwalk
"
"
cpu
"
"
java
"
]
threads
:
[
"
GeckoMain
"
"
Compositor
"
"
Renderer
"
"
SwComposite
"
]
duration
:
0
}
"
firefox
-
front
-
end
"
:
{
label
:
"
Firefox
Front
-
End
"
description
:
"
Recommended
preset
for
internal
Firefox
front
-
end
debugging
.
"
entries
:
128
*
1024
*
1024
interval
:
1
features
:
[
"
screenshots
"
"
js
"
"
leaf
"
"
stackwalk
"
"
cpu
"
"
java
"
]
threads
:
[
"
GeckoMain
"
"
Compositor
"
"
Renderer
"
"
DOM
Worker
"
]
duration
:
0
}
graphics
:
{
label
:
"
Firefox
Graphics
"
description
:
"
Recommended
preset
for
Firefox
graphics
performance
investigation
.
"
entries
:
128
*
1024
*
1024
interval
:
1
features
:
[
"
leaf
"
"
stackwalk
"
"
js
"
"
cpu
"
"
java
"
]
threads
:
[
"
GeckoMain
"
"
Compositor
"
"
Renderer
"
"
SwComposite
"
"
RenderBackend
"
"
SceneBuilder
"
"
WrWorker
"
"
CanvasWorkers
"
]
duration
:
0
}
media
:
{
label
:
"
Media
"
description
:
"
Recommended
preset
for
diagnosing
audio
and
video
problems
.
"
entries
:
128
*
1024
*
1024
interval
:
1
features
:
[
"
js
"
"
leaf
"
"
stackwalk
"
"
cpu
"
"
audiocallbacktracing
"
]
threads
:
[
"
AsyncCubebTask
"
"
AudioEncoderQueue
"
"
AudioIPC
"
"
call_worker_queue
"
"
Compositor
"
"
DecodingThread
"
"
GeckoMain
"
"
GraphRunner
"
"
IncomingVideoStream
"
"
InotifyEventThread
"
"
MediaDecoderStateMachine
"
"
MediaPDecoder
"
"
MediaSupervisor
"
"
MediaTimer
"
"
ModuleProcessThread
"
"
NativeAudioCallback
"
"
PacerThread
"
"
RenderBackend
"
"
Renderer
"
"
SwComposite
"
"
VoiceProcessThread
"
]
duration
:
0
}
}
;
const
symbolCache
=
new
Map
(
)
;
async
function
getSymbolsFromThisBrowser
(
debugName
breakpadId
)
{
if
(
symbolCache
.
size
=
=
=
0
)
{
for
(
const
lib
of
Services
.
profiler
.
sharedLibraries
)
{
symbolCache
.
set
(
{
lib
.
debugName
}
/
{
lib
.
breakpadId
}
lib
)
;
}
}
const
cachedLib
=
symbolCache
.
get
(
{
debugName
}
/
{
breakpadId
}
)
;
if
(
!
cachedLib
)
{
throw
new
Error
(
The
library
{
debugName
}
{
breakpadId
}
is
not
in
the
+
"
Services
.
profiler
.
sharedLibraries
list
so
the
local
path
for
it
is
not
known
"
+
"
and
symbols
for
it
can
not
be
obtained
.
This
usually
happens
if
a
content
"
+
"
process
uses
a
library
that
'
s
not
used
in
the
parent
process
-
"
+
"
Services
.
profiler
.
sharedLibraries
only
knows
about
libraries
in
the
"
+
"
parent
process
.
"
)
;
}
const
lib
=
cachedLib
;
const
objdirs
=
getObjdirPrefValue
(
"
"
)
;
const
{
getSymbolTableMultiModal
}
=
lazy
.
PerfSymbolication
(
)
;
return
getSymbolTableMultiModal
(
lib
objdirs
)
;
}
function
getProfilerViewModeForCurrentPreset
(
pageContext
)
{
const
prefPostfix
=
getPrefPostfix
(
pageContext
)
;
const
presetName
=
Services
.
prefs
.
getCharPref
(
PRESET_PREF
+
prefPostfix
)
;
if
(
presetName
=
=
=
"
custom
"
)
{
return
undefined
;
}
const
preset
=
presets
[
presetName
]
;
if
(
!
preset
)
{
console
.
error
(
Unknown
profiler
preset
was
encountered
:
"
{
presetName
}
"
)
;
return
undefined
;
}
return
preset
.
profilerViewMode
;
}
async
function
captureProfile
(
pageContext
)
{
if
(
!
Services
.
profiler
.
IsActive
(
)
)
{
return
;
}
if
(
Services
.
profiler
.
IsPaused
(
)
)
{
return
;
}
Services
.
profiler
.
Pause
(
)
;
const
profile
=
await
Services
.
profiler
.
getProfileDataAsGzippedArrayBuffer
(
)
.
catch
(
e
=
>
{
console
.
error
(
e
)
;
return
{
}
;
}
)
;
const
profilerViewMode
=
getProfilerViewModeForCurrentPreset
(
pageContext
)
;
const
{
openProfilerAndDisplayProfile
}
=
lazy
.
BrowserModule
(
)
;
openProfilerAndDisplayProfile
(
profile
profilerViewMode
(
debugName
breakpadId
)
=
>
{
return
getSymbolsFromThisBrowser
(
debugName
breakpadId
)
;
}
)
;
Services
.
profiler
.
StopProfiler
(
)
;
}
function
startProfiler
(
pageContext
)
{
const
{
entries
interval
features
threads
duration
}
=
getRecordingSettings
(
pageContext
Services
.
profiler
.
GetFeatures
(
)
)
;
const
{
getActiveBrowserID
}
=
lazy
.
RecordingUtils
(
)
;
const
activeTabID
=
getActiveBrowserID
(
)
;
Services
.
profiler
.
StartProfiler
(
entries
interval
features
threads
activeTabID
duration
)
;
}
function
stopProfiler
(
)
{
Services
.
profiler
.
StopProfiler
(
)
;
}
function
toggleProfiler
(
pageContext
)
{
if
(
Services
.
profiler
.
IsPaused
(
)
)
{
return
;
}
if
(
Services
.
profiler
.
IsActive
(
)
)
{
stopProfiler
(
)
;
}
else
{
startProfiler
(
pageContext
)
;
}
}
function
restartProfiler
(
pageContext
)
{
stopProfiler
(
)
;
startProfiler
(
pageContext
)
;
}
function
_getArrayOfStringsPref
(
prefName
)
{
const
text
=
Services
.
prefs
.
getCharPref
(
prefName
)
;
return
JSON
.
parse
(
text
)
;
}
function
_getArrayOfStringsHostPref
(
prefName
)
{
const
text
=
Services
.
prefs
.
getStringPref
(
prefName
)
;
return
JSON
.
parse
(
text
)
;
}
function
getPrefPostfix
(
pageContext
)
{
switch
(
pageContext
)
{
case
"
devtools
"
:
case
"
aboutprofiling
"
:
return
"
"
;
case
"
devtools
-
remote
"
:
case
"
aboutprofiling
-
remote
"
:
return
"
.
remote
"
;
default
:
{
const
{
UnhandledCaseError
}
=
lazy
.
Utils
(
)
;
throw
new
UnhandledCaseError
(
pageContext
"
Page
Context
"
)
;
}
}
}
function
getObjdirPrefValue
(
prefPostfix
)
{
return
_getArrayOfStringsHostPref
(
OBJDIRS_PREF
+
prefPostfix
)
;
}
function
getRecordingSettings
(
pageContext
supportedFeatures
)
{
const
prefPostfix
=
getPrefPostfix
(
pageContext
)
;
const
objdirs
=
getObjdirPrefValue
(
prefPostfix
)
;
const
presetName
=
Services
.
prefs
.
getCharPref
(
PRESET_PREF
+
prefPostfix
)
;
return
(
getRecordingSettingsFromPreset
(
presetName
supportedFeatures
objdirs
)
?
?
getRecordingSettingsFromPrefs
(
supportedFeatures
objdirs
prefPostfix
)
)
;
}
function
getRecordingSettingsFromPreset
(
presetName
supportedFeatures
objdirs
)
{
if
(
presetName
=
=
=
"
custom
"
)
{
return
null
;
}
const
preset
=
presets
[
presetName
]
;
if
(
!
preset
)
{
console
.
error
(
Unknown
profiler
preset
was
encountered
:
"
{
presetName
}
"
)
;
return
null
;
}
return
{
presetName
entries
:
preset
.
entries
interval
:
preset
.
interval
features
:
preset
.
features
.
filter
(
feature
=
>
supportedFeatures
.
includes
(
feature
)
)
threads
:
preset
.
threads
objdirs
duration
:
preset
.
duration
}
;
}
function
getRecordingSettingsFromPrefs
(
supportedFeatures
objdirs
prefPostfix
)
{
const
entries
=
Services
.
prefs
.
getIntPref
(
ENTRIES_PREF
+
prefPostfix
)
;
const
intervalInMicroseconds
=
Services
.
prefs
.
getIntPref
(
INTERVAL_PREF
+
prefPostfix
)
;
const
interval
=
intervalInMicroseconds
/
1000
;
const
features
=
_getArrayOfStringsPref
(
FEATURES_PREF
+
prefPostfix
)
;
const
threads
=
_getArrayOfStringsPref
(
THREADS_PREF
+
prefPostfix
)
;
const
duration
=
Services
.
prefs
.
getIntPref
(
DURATION_PREF
+
prefPostfix
)
;
return
{
presetName
:
"
custom
"
entries
interval
features
:
features
.
filter
(
feature
=
>
supportedFeatures
.
includes
(
feature
)
)
threads
objdirs
duration
}
;
}
function
setRecordingSettings
(
pageContext
prefs
)
{
const
prefPostfix
=
getPrefPostfix
(
pageContext
)
;
Services
.
prefs
.
setCharPref
(
PRESET_PREF
+
prefPostfix
prefs
.
presetName
)
;
Services
.
prefs
.
setIntPref
(
ENTRIES_PREF
+
prefPostfix
prefs
.
entries
)
;
const
intervalInMicroseconds
=
prefs
.
interval
*
1000
;
Services
.
prefs
.
setIntPref
(
INTERVAL_PREF
+
prefPostfix
intervalInMicroseconds
)
;
Services
.
prefs
.
setCharPref
(
FEATURES_PREF
+
prefPostfix
JSON
.
stringify
(
prefs
.
features
)
)
;
Services
.
prefs
.
setCharPref
(
THREADS_PREF
+
prefPostfix
JSON
.
stringify
(
prefs
.
threads
)
)
;
Services
.
prefs
.
setCharPref
(
OBJDIRS_PREF
+
prefPostfix
JSON
.
stringify
(
prefs
.
objdirs
)
)
;
}
const
platform
=
AppConstants
.
platform
;
function
revertRecordingSettings
(
)
{
for
(
const
prefPostfix
of
[
"
"
"
.
remote
"
]
)
{
Services
.
prefs
.
clearUserPref
(
PRESET_PREF
+
prefPostfix
)
;
Services
.
prefs
.
clearUserPref
(
ENTRIES_PREF
+
prefPostfix
)
;
Services
.
prefs
.
clearUserPref
(
INTERVAL_PREF
+
prefPostfix
)
;
Services
.
prefs
.
clearUserPref
(
FEATURES_PREF
+
prefPostfix
)
;
Services
.
prefs
.
clearUserPref
(
THREADS_PREF
+
prefPostfix
)
;
Services
.
prefs
.
clearUserPref
(
OBJDIRS_PREF
+
prefPostfix
)
;
Services
.
prefs
.
clearUserPref
(
DURATION_PREF
+
prefPostfix
)
;
}
Services
.
prefs
.
clearUserPref
(
POPUP_FEATURE_FLAG_PREF
)
;
}
function
changePreset
(
pageContext
presetName
supportedFeatures
)
{
const
prefPostfix
=
getPrefPostfix
(
pageContext
)
;
const
objdirs
=
_getArrayOfStringsHostPref
(
OBJDIRS_PREF
+
prefPostfix
)
;
let
recordingSettings
=
getRecordingSettingsFromPreset
(
presetName
supportedFeatures
objdirs
)
;
if
(
!
recordingSettings
)
{
Services
.
prefs
.
setCharPref
(
PRESET_PREF
+
prefPostfix
presetName
)
;
recordingSettings
=
getRecordingSettings
(
pageContext
supportedFeatures
)
;
}
setRecordingSettings
(
pageContext
recordingSettings
)
;
}
function
handleWebChannelMessage
(
channel
id
message
target
)
{
if
(
typeof
message
!
=
=
"
object
"
|
|
typeof
message
.
type
!
=
=
"
string
"
)
{
console
.
error
(
"
An
malformed
message
was
received
by
the
profiler
'
s
WebChannel
handler
.
"
message
)
;
return
;
}
const
messageFromFrontend
=
(
message
)
;
const
{
requestId
}
=
messageFromFrontend
;
switch
(
messageFromFrontend
.
type
)
{
case
"
STATUS_QUERY
"
:
{
const
{
ProfilerMenuButton
}
=
lazy
.
ProfilerMenuButton
(
)
;
channel
.
send
(
{
type
:
"
STATUS_RESPONSE
"
menuButtonIsEnabled
:
ProfilerMenuButton
.
isInNavbar
(
)
requestId
}
target
)
;
break
;
}
case
"
ENABLE_MENU_BUTTON
"
:
{
const
{
ownerDocument
}
=
target
.
browser
;
if
(
!
ownerDocument
)
{
throw
new
Error
(
"
Could
not
find
the
owner
document
for
the
current
browser
while
enabling
"
+
"
the
profiler
menu
button
"
)
;
}
Services
.
prefs
.
setBoolPref
(
POPUP_FEATURE_FLAG_PREF
true
)
;
const
{
ProfilerMenuButton
}
=
lazy
.
ProfilerMenuButton
(
)
;
ProfilerMenuButton
.
addToNavbar
(
ownerDocument
)
;
const
{
CustomizableUI
}
=
lazy
.
CustomizableUI
(
)
;
CustomizableUI
.
dispatchToolboxEvent
(
"
customizationchange
"
)
;
ProfilerMenuButton
.
openPopup
(
ownerDocument
)
;
channel
.
send
(
{
type
:
"
ENABLE_MENU_BUTTON_DONE
"
requestId
}
target
)
;
break
;
}
default
:
console
.
error
(
"
An
unknown
message
type
was
received
by
the
profiler
'
s
WebChannel
handler
.
"
message
)
;
}
}
(
this
)
.
module
=
{
exports
:
{
}
}
;
module
.
exports
=
{
presets
captureProfile
startProfiler
stopProfiler
restartProfiler
toggleProfiler
platform
getRecordingSettings
setRecordingSettings
revertRecordingSettings
changePreset
handleWebChannelMessage
}
;
var
EXPORTED_SYMBOLS
=
Object
.
keys
(
module
.
exports
)
;
