"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
ENTRIES_PREF
=
"
devtools
.
performance
.
recording
.
entries
"
;
const
INTERVAL_PREF
=
"
devtools
.
performance
.
recording
.
interval
"
;
const
FEATURES_PREF
=
"
devtools
.
performance
.
recording
.
features
"
;
const
THREADS_PREF
=
"
devtools
.
performance
.
recording
.
threads
"
;
const
OBJDIRS_PREF
=
"
devtools
.
performance
.
recording
.
objdirs
"
;
const
DURATION_PREF
=
"
devtools
.
performance
.
recording
.
duration
"
;
function
requireLazy
(
callback
)
{
let
cache
;
return
(
)
=
>
{
if
(
cache
=
=
=
undefined
)
{
cache
=
callback
(
)
;
}
return
cache
;
}
;
}
const
lazyOS
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
)
)
;
const
lazyProfilerGetSymbols
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ProfilerGetSymbols
.
jsm
"
)
)
)
;
const
lazyReceiveProfile
=
requireLazy
(
(
)
=
>
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
browserModule
=
require
(
"
devtools
/
client
/
performance
-
new
/
browser
"
)
;
return
browserModule
.
receiveProfile
;
}
)
;
const
symbolCache
=
new
Map
(
)
;
async
function
getSymbolsFromThisBrowser
(
debugName
breakpadId
)
{
if
(
symbolCache
.
size
=
=
=
0
)
{
for
(
const
lib
of
Services
.
profiler
.
sharedLibraries
)
{
symbolCache
.
set
(
{
lib
.
debugName
}
/
{
lib
.
breakpadId
}
{
path
:
lib
.
path
debugPath
:
lib
.
debugPath
}
)
;
}
}
const
cachedLibInfo
=
symbolCache
.
get
(
{
debugName
}
/
{
breakpadId
}
)
;
if
(
!
cachedLibInfo
)
{
throw
new
Error
(
The
library
{
debugName
}
{
breakpadId
}
is
not
in
the
+
"
Services
.
profiler
.
sharedLibraries
list
so
the
local
path
for
it
is
not
known
"
+
"
and
symbols
for
it
can
not
be
obtained
.
This
usually
happens
if
a
content
"
+
"
process
uses
a
library
that
'
s
not
used
in
the
parent
process
-
"
+
"
Services
.
profiler
.
sharedLibraries
only
knows
about
libraries
in
the
"
+
"
parent
process
.
"
)
;
}
const
{
path
debugPath
}
=
cachedLibInfo
;
const
{
OS
}
=
lazyOS
(
)
;
if
(
!
OS
.
Path
.
split
(
path
)
.
absolute
)
{
throw
new
Error
(
"
Services
.
profiler
.
sharedLibraries
did
not
contain
an
absolute
path
for
"
+
the
library
{
debugName
}
{
breakpadId
}
so
symbols
for
this
library
can
not
+
"
be
obtained
.
"
)
;
}
const
{
ProfilerGetSymbols
}
=
lazyProfilerGetSymbols
(
)
;
return
ProfilerGetSymbols
.
getSymbolTable
(
path
debugPath
breakpadId
)
;
}
async
function
captureProfile
(
)
{
if
(
!
Services
.
profiler
.
IsActive
(
)
)
{
return
;
}
Services
.
profiler
.
PauseSampling
(
)
;
const
profile
=
await
Services
.
profiler
.
getProfileDataAsGzippedArrayBuffer
(
)
.
catch
(
e
=
>
{
console
.
error
(
e
)
;
return
{
}
;
}
)
;
const
receiveProfile
=
lazyReceiveProfile
(
)
;
receiveProfile
(
profile
getSymbolsFromThisBrowser
)
;
Services
.
profiler
.
StopProfiler
(
)
;
}
function
startProfiler
(
)
{
const
{
entries
interval
features
threads
duration
}
=
getRecordingPreferencesFromBrowser
(
)
;
Services
.
profiler
.
StartProfiler
(
entries
interval
features
threads
duration
)
;
}
function
stopProfiler
(
)
{
Services
.
profiler
.
StopProfiler
(
)
;
}
function
toggleProfiler
(
)
{
if
(
Services
.
profiler
.
IsActive
(
)
)
{
stopProfiler
(
)
;
}
else
{
startProfiler
(
)
;
}
}
function
restartProfiler
(
)
{
stopProfiler
(
)
;
startProfiler
(
)
;
}
function
_getArrayOfStringsPref
(
prefName
defaultValue
)
{
let
array
;
try
{
const
text
=
Services
.
prefs
.
getCharPref
(
prefName
)
;
array
=
JSON
.
parse
(
text
)
;
}
catch
(
error
)
{
return
defaultValue
;
}
if
(
Array
.
isArray
(
array
)
&
&
array
.
every
(
feature
=
>
typeof
feature
=
=
=
"
string
"
)
)
{
return
array
;
}
return
defaultValue
;
}
function
_getArrayOfStringsHostPref
(
prefName
defaultValue
)
{
let
array
;
try
{
const
text
=
Services
.
prefs
.
getStringPref
(
prefName
JSON
.
stringify
(
defaultValue
)
)
;
array
=
JSON
.
parse
(
text
)
;
}
catch
(
error
)
{
return
defaultValue
;
}
if
(
Array
.
isArray
(
array
)
&
&
array
.
every
(
feature
=
>
typeof
feature
=
=
=
"
string
"
)
)
{
return
array
;
}
return
defaultValue
;
}
let
_defaultPrefs
;
function
getDefaultRecordingPreferences
(
)
{
if
(
!
_defaultPrefs
)
{
_defaultPrefs
=
{
entries
:
10000000
duration
:
0
interval
:
1000
features
:
[
"
js
"
"
leaf
"
"
responsiveness
"
"
stackwalk
"
]
threads
:
[
"
GeckoMain
"
"
Compositor
"
]
objdirs
:
[
]
}
;
if
(
AppConstants
.
platform
=
=
=
"
android
"
)
{
_defaultPrefs
.
features
.
push
(
"
java
"
)
;
}
}
return
_defaultPrefs
;
}
function
getRecordingPreferencesFromBrowser
(
)
{
const
defaultPrefs
=
getDefaultRecordingPreferences
(
)
;
const
entries
=
Services
.
prefs
.
getIntPref
(
ENTRIES_PREF
defaultPrefs
.
entries
)
;
const
interval
=
Services
.
prefs
.
getIntPref
(
INTERVAL_PREF
defaultPrefs
.
interval
)
;
const
features
=
_getArrayOfStringsPref
(
FEATURES_PREF
defaultPrefs
.
features
)
;
const
threads
=
_getArrayOfStringsPref
(
THREADS_PREF
defaultPrefs
.
threads
)
;
const
objdirs
=
_getArrayOfStringsHostPref
(
OBJDIRS_PREF
defaultPrefs
.
objdirs
)
;
const
duration
=
Services
.
prefs
.
getIntPref
(
DURATION_PREF
defaultPrefs
.
duration
)
;
const
supportedFeatures
=
new
Set
(
Services
.
profiler
.
GetFeatures
(
)
)
;
return
{
entries
interval
:
interval
/
1000
features
:
features
.
filter
(
feature
=
>
supportedFeatures
.
has
(
feature
)
)
threads
objdirs
duration
}
;
}
function
setRecordingPreferencesOnBrowser
(
settings
)
{
Services
.
prefs
.
setIntPref
(
ENTRIES_PREF
settings
.
entries
)
;
Services
.
prefs
.
setIntPref
(
INTERVAL_PREF
settings
.
interval
*
1000
)
;
Services
.
prefs
.
setCharPref
(
FEATURES_PREF
JSON
.
stringify
(
settings
.
features
)
)
;
Services
.
prefs
.
setCharPref
(
THREADS_PREF
JSON
.
stringify
(
settings
.
threads
)
)
;
Services
.
prefs
.
setCharPref
(
OBJDIRS_PREF
JSON
.
stringify
(
settings
.
objdirs
)
)
;
}
const
platform
=
AppConstants
.
platform
;
function
revertRecordingPreferences
(
)
{
setRecordingPreferencesOnBrowser
(
getDefaultRecordingPreferences
(
)
)
;
}
var
EXPORTED_SYMBOLS
=
[
"
captureProfile
"
"
startProfiler
"
"
stopProfiler
"
"
restartProfiler
"
"
toggleProfiler
"
"
platform
"
"
getSymbolsFromThisBrowser
"
"
getDefaultRecordingPreferences
"
"
getRecordingPreferencesFromBrowser
"
"
setRecordingPreferencesOnBrowser
"
"
revertRecordingPreferences
"
]
;
