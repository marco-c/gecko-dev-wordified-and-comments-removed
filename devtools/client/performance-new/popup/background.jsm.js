"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
ENTRIES_PREF
=
"
devtools
.
performance
.
recording
.
entries
"
;
const
INTERVAL_PREF
=
"
devtools
.
performance
.
recording
.
interval
"
;
const
FEATURES_PREF
=
"
devtools
.
performance
.
recording
.
features
"
;
const
THREADS_PREF
=
"
devtools
.
performance
.
recording
.
threads
"
;
const
OBJDIRS_PREF
=
"
devtools
.
performance
.
recording
.
objdirs
"
;
const
DURATION_PREF
=
"
devtools
.
performance
.
recording
.
duration
"
;
const
PRESET_PREF
=
"
devtools
.
performance
.
recording
.
preset
"
;
function
requireLazy
(
callback
)
{
let
cache
;
return
(
)
=
>
{
if
(
cache
=
=
=
undefined
)
{
cache
=
callback
(
)
;
}
return
cache
;
}
;
}
const
lazyOS
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
)
)
;
const
lazyProfilerGetSymbols
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ProfilerGetSymbols
.
jsm
"
)
)
)
;
const
lazyBrowserModule
=
requireLazy
(
(
)
=
>
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
browserModule
=
require
(
"
devtools
/
client
/
performance
-
new
/
browser
"
)
;
return
browserModule
;
}
)
;
const
lazyPreferenceManagement
=
requireLazy
(
(
)
=
>
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
preferenceManagementModule
=
require
(
"
devtools
/
client
/
performance
-
new
/
preference
-
management
"
)
;
return
preferenceManagementModule
;
}
)
;
const
lazyRecordingUtils
=
requireLazy
(
(
)
=
>
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
recordingUtils
=
require
(
"
devtools
/
shared
/
performance
-
new
/
recording
-
utils
"
)
;
return
recordingUtils
;
}
)
;
const
lazyProfilerMenuButton
=
requireLazy
(
(
)
=
>
(
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
menu
-
button
.
jsm
.
js
"
)
)
)
;
const
symbolCache
=
new
Map
(
)
;
async
function
getSymbolsFromThisBrowser
(
debugName
breakpadId
)
{
if
(
symbolCache
.
size
=
=
=
0
)
{
for
(
const
lib
of
Services
.
profiler
.
sharedLibraries
)
{
symbolCache
.
set
(
{
lib
.
debugName
}
/
{
lib
.
breakpadId
}
{
path
:
lib
.
path
debugPath
:
lib
.
debugPath
}
)
;
}
}
const
cachedLibInfo
=
symbolCache
.
get
(
{
debugName
}
/
{
breakpadId
}
)
;
if
(
!
cachedLibInfo
)
{
throw
new
Error
(
The
library
{
debugName
}
{
breakpadId
}
is
not
in
the
+
"
Services
.
profiler
.
sharedLibraries
list
so
the
local
path
for
it
is
not
known
"
+
"
and
symbols
for
it
can
not
be
obtained
.
This
usually
happens
if
a
content
"
+
"
process
uses
a
library
that
'
s
not
used
in
the
parent
process
-
"
+
"
Services
.
profiler
.
sharedLibraries
only
knows
about
libraries
in
the
"
+
"
parent
process
.
"
)
;
}
const
{
path
debugPath
}
=
cachedLibInfo
;
const
{
OS
}
=
lazyOS
(
)
;
if
(
!
OS
.
Path
.
split
(
path
)
.
absolute
)
{
throw
new
Error
(
"
Services
.
profiler
.
sharedLibraries
did
not
contain
an
absolute
path
for
"
+
the
library
{
debugName
}
{
breakpadId
}
so
symbols
for
this
library
can
not
+
"
be
obtained
.
"
)
;
}
const
{
ProfilerGetSymbols
}
=
lazyProfilerGetSymbols
(
)
;
return
ProfilerGetSymbols
.
getSymbolTable
(
path
debugPath
breakpadId
)
;
}
async
function
captureProfile
(
)
{
if
(
!
Services
.
profiler
.
IsActive
(
)
)
{
return
;
}
Services
.
profiler
.
PauseSampling
(
)
;
const
profile
=
await
Services
.
profiler
.
getProfileDataAsGzippedArrayBuffer
(
)
.
catch
(
e
=
>
{
console
.
error
(
e
)
;
return
{
}
;
}
)
;
const
receiveProfile
=
lazyBrowserModule
(
)
.
receiveProfile
;
receiveProfile
(
profile
getSymbolsFromThisBrowser
)
;
Services
.
profiler
.
StopProfiler
(
)
;
}
function
startProfiler
(
)
{
const
{
translatePreferencesToState
}
=
lazyPreferenceManagement
(
)
;
const
{
entries
interval
features
threads
duration
}
=
translatePreferencesToState
(
getRecordingPreferencesFromBrowser
(
)
)
;
const
{
getActiveBrowsingContextID
}
=
lazyRecordingUtils
(
)
;
const
activeBrowsingContextID
=
getActiveBrowsingContextID
(
)
;
Services
.
profiler
.
StartProfiler
(
entries
interval
features
threads
activeBrowsingContextID
duration
)
;
}
function
stopProfiler
(
)
{
Services
.
profiler
.
StopProfiler
(
)
;
}
function
toggleProfiler
(
)
{
if
(
Services
.
profiler
.
IsActive
(
)
)
{
stopProfiler
(
)
;
}
else
{
startProfiler
(
)
;
}
}
function
restartProfiler
(
)
{
stopProfiler
(
)
;
startProfiler
(
)
;
}
function
_getArrayOfStringsPref
(
prefName
)
{
const
text
=
Services
.
prefs
.
getCharPref
(
prefName
)
;
return
JSON
.
parse
(
text
)
;
}
function
_getArrayOfStringsHostPref
(
prefName
)
{
const
text
=
Services
.
prefs
.
getStringPref
(
prefName
)
;
return
JSON
.
parse
(
text
)
;
}
function
getRecordingPreferencesFromBrowser
(
)
{
const
objdirs
=
_getArrayOfStringsHostPref
(
OBJDIRS_PREF
)
;
const
presetName
=
Services
.
prefs
.
getCharPref
(
PRESET_PREF
)
;
const
recordingPrefs
=
getRecordingPrefsFromPreset
(
presetName
objdirs
)
;
if
(
recordingPrefs
)
{
return
recordingPrefs
;
}
const
entries
=
Services
.
prefs
.
getIntPref
(
ENTRIES_PREF
)
;
const
interval
=
Services
.
prefs
.
getIntPref
(
INTERVAL_PREF
)
;
const
features
=
_getArrayOfStringsPref
(
FEATURES_PREF
)
;
const
threads
=
_getArrayOfStringsPref
(
THREADS_PREF
)
;
const
duration
=
Services
.
prefs
.
getIntPref
(
DURATION_PREF
)
;
const
supportedFeatures
=
new
Set
(
Services
.
profiler
.
GetFeatures
(
)
)
;
return
{
presetName
:
"
custom
"
entries
interval
features
:
features
.
filter
(
feature
=
>
supportedFeatures
.
has
(
feature
)
)
threads
objdirs
duration
}
;
}
function
getRecordingPrefsFromPreset
(
presetName
objdirs
)
{
const
{
presets
}
=
lazyRecordingUtils
(
)
;
if
(
presetName
=
=
=
"
custom
"
)
{
return
null
;
}
const
preset
=
presets
[
presetName
]
;
if
(
!
preset
)
{
console
.
error
(
Unknown
profiler
preset
was
encountered
:
"
{
presetName
}
"
)
;
return
null
;
}
const
supportedFeatures
=
new
Set
(
Services
.
profiler
.
GetFeatures
(
)
)
;
return
{
presetName
entries
:
preset
.
entries
interval
:
preset
.
interval
*
1000
features
:
preset
.
features
.
filter
(
feature
=
>
supportedFeatures
.
has
(
feature
)
)
threads
:
preset
.
threads
objdirs
duration
:
preset
.
duration
}
;
}
function
setRecordingPreferencesOnBrowser
(
prefs
)
{
Services
.
prefs
.
setCharPref
(
PRESET_PREF
prefs
.
presetName
)
;
Services
.
prefs
.
setIntPref
(
ENTRIES_PREF
prefs
.
entries
)
;
Services
.
prefs
.
setIntPref
(
INTERVAL_PREF
prefs
.
interval
)
;
Services
.
prefs
.
setCharPref
(
FEATURES_PREF
JSON
.
stringify
(
prefs
.
features
)
)
;
Services
.
prefs
.
setCharPref
(
THREADS_PREF
JSON
.
stringify
(
prefs
.
threads
)
)
;
Services
.
prefs
.
setCharPref
(
OBJDIRS_PREF
JSON
.
stringify
(
prefs
.
objdirs
)
)
;
}
const
platform
=
AppConstants
.
platform
;
function
revertRecordingPreferences
(
)
{
Services
.
prefs
.
clearUserPref
(
PRESET_PREF
)
;
Services
.
prefs
.
clearUserPref
(
ENTRIES_PREF
)
;
Services
.
prefs
.
clearUserPref
(
INTERVAL_PREF
)
;
Services
.
prefs
.
clearUserPref
(
FEATURES_PREF
)
;
Services
.
prefs
.
clearUserPref
(
THREADS_PREF
)
;
Services
.
prefs
.
clearUserPref
(
OBJDIRS_PREF
)
;
Services
.
prefs
.
clearUserPref
(
DURATION_PREF
)
;
}
function
changePreset
(
presetName
)
{
const
objdirs
=
_getArrayOfStringsHostPref
(
OBJDIRS_PREF
)
;
let
recordingPrefs
=
getRecordingPrefsFromPreset
(
presetName
objdirs
)
;
if
(
!
recordingPrefs
)
{
Services
.
prefs
.
setCharPref
(
PRESET_PREF
presetName
)
;
recordingPrefs
=
getRecordingPreferencesFromBrowser
(
)
;
}
setRecordingPreferencesOnBrowser
(
recordingPrefs
)
;
}
let
_defaultPrefsForOlderFirefox
;
function
getDefaultRecordingPreferencesForOlderFirefox
(
)
{
if
(
!
_defaultPrefsForOlderFirefox
)
{
_defaultPrefsForOlderFirefox
=
{
presetName
:
"
custom
"
entries
:
10000000
duration
:
0
interval
:
1000
features
:
[
"
js
"
"
leaf
"
"
stackwalk
"
]
threads
:
[
"
GeckoMain
"
"
Compositor
"
]
objdirs
:
[
]
}
;
if
(
AppConstants
.
platform
=
=
=
"
android
"
)
{
_defaultPrefsForOlderFirefox
.
features
.
push
(
"
java
"
)
;
}
}
return
_defaultPrefsForOlderFirefox
;
}
function
handleWebChannelMessage
(
channel
id
message
target
)
{
if
(
typeof
message
!
=
=
"
object
"
|
|
typeof
message
.
type
!
=
=
"
string
"
)
{
console
.
error
(
"
An
malformed
message
was
received
by
the
profiler
'
s
WebChannel
handler
.
"
message
)
;
return
;
}
const
messageFromFrontend
=
(
message
)
;
const
{
requestId
}
=
messageFromFrontend
;
switch
(
messageFromFrontend
.
type
)
{
case
"
STATUS_QUERY
"
:
{
const
{
ProfilerMenuButton
}
=
lazyProfilerMenuButton
(
)
;
channel
.
send
(
{
type
:
"
STATUS_RESPONSE
"
menuButtonIsEnabled
:
ProfilerMenuButton
.
isEnabled
(
)
requestId
}
target
)
;
break
;
}
case
"
ENABLE_MENU_BUTTON
"
:
{
const
{
ProfilerMenuButton
}
=
lazyProfilerMenuButton
(
)
;
if
(
!
ProfilerMenuButton
.
isEnabled
(
)
)
{
const
{
ownerDocument
}
=
target
.
browser
;
if
(
!
ownerDocument
)
{
throw
new
Error
(
"
Could
not
find
the
owner
document
for
the
current
browser
while
enabling
"
+
"
the
profiler
menu
button
"
)
;
}
ProfilerMenuButton
.
toggle
(
ownerDocument
)
;
}
channel
.
send
(
{
type
:
"
ENABLE_MENU_BUTTON_DONE
"
requestId
}
target
)
;
break
;
}
default
:
console
.
error
(
"
An
unknown
message
type
was
received
by
the
profiler
'
s
WebChannel
handler
.
"
message
)
;
}
}
(
this
)
.
module
=
{
exports
:
{
}
}
;
module
.
exports
=
{
captureProfile
startProfiler
stopProfiler
restartProfiler
toggleProfiler
platform
getSymbolsFromThisBrowser
getRecordingPreferencesFromBrowser
setRecordingPreferencesOnBrowser
revertRecordingPreferences
changePreset
getDefaultRecordingPreferencesForOlderFirefox
handleWebChannelMessage
}
;
var
EXPORTED_SYMBOLS
=
Object
.
keys
(
module
.
exports
)
;
