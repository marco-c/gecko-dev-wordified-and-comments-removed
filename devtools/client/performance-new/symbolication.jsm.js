"
use
strict
"
;
const
{
createLazyLoaders
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
typescript
-
lazy
-
load
.
jsm
.
js
"
)
;
const
lazy
=
createLazyLoaders
(
{
OS
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
}
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
setTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
clearTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
const
global
=
this
;
const
WASM_MODULE_URL
=
"
https
:
/
/
zealous
-
rosalind
-
a98ce8
.
netlify
.
com
/
wasm
/
8f7ca2f70e1cd21b5a2dbe96545672752887bfbd4e7b3b9437e9fc7c3da0a3bedae4584ff734f0c9f08c642e6b66ffab
.
wasm
"
;
const
WASM_MODULE_INTEGRITY
=
"
sha384
-
j3yi9w4c0htaLb6WVFZydSiHv71OezuUN
+
n8fD2go77a5FhP9zTwyfCMZC5rZv
+
r
"
;
const
EXPIRY_TIME_IN_MS
=
5
*
60
*
1000
;
let
gCachedWASMModulePromise
=
null
;
let
gCachedWASMModuleExpiryTimer
=
0
;
const
gActiveWorkers
=
new
Set
(
)
;
function
clearCachedWASMModule
(
)
{
gCachedWASMModulePromise
=
null
;
gCachedWASMModuleExpiryTimer
=
0
;
}
function
getWASMProfilerGetSymbolsModule
(
)
{
if
(
!
gCachedWASMModulePromise
)
{
gCachedWASMModulePromise
=
(
async
function
(
)
{
const
request
=
new
Request
(
WASM_MODULE_URL
{
integrity
:
WASM_MODULE_INTEGRITY
credentials
:
"
omit
"
}
)
;
return
WebAssembly
.
compileStreaming
(
fetch
(
request
)
)
;
}
)
(
)
;
}
clearTimeout
(
gCachedWASMModuleExpiryTimer
)
;
gCachedWASMModuleExpiryTimer
=
setTimeout
(
clearCachedWASMModule
EXPIRY_TIME_IN_MS
)
;
return
gCachedWASMModulePromise
;
}
async
function
getSymbolTableFromLocalBinary
(
binaryPath
debugPath
breakpadId
)
{
const
module
=
await
getWASMProfilerGetSymbolsModule
(
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
worker
=
new
ChromeWorker
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
symbolication
-
worker
.
js
"
)
;
gActiveWorkers
.
add
(
worker
)
;
worker
.
onmessage
=
msg
=
>
{
gActiveWorkers
.
delete
(
worker
)
;
if
(
"
error
"
in
msg
.
data
)
{
const
error
=
msg
.
data
.
error
;
if
(
error
.
name
)
{
const
{
name
message
fileName
lineNumber
}
=
error
;
const
ErrorObjConstructor
=
name
in
global
&
&
Error
.
isPrototypeOf
(
global
[
name
]
)
?
global
[
name
]
:
Error
;
const
e
=
new
ErrorObjConstructor
(
message
fileName
lineNumber
)
;
e
.
name
=
name
;
reject
(
e
)
;
}
else
{
reject
(
error
)
;
}
return
;
}
resolve
(
msg
.
data
.
result
)
;
}
;
worker
.
onerror
=
errorEvent
=
>
{
gActiveWorkers
.
delete
(
worker
)
;
worker
.
terminate
(
)
;
if
(
errorEvent
instanceof
ErrorEvent
)
{
const
{
message
filename
lineno
}
=
errorEvent
;
const
error
=
new
Error
(
{
message
}
at
{
filename
}
:
{
lineno
}
)
;
error
.
name
=
"
WorkerError
"
;
reject
(
error
)
;
}
else
{
reject
(
new
Error
(
"
Error
in
worker
"
)
)
;
}
}
;
worker
.
onmessageerror
=
errorEvent
=
>
{
gActiveWorkers
.
delete
(
worker
)
;
worker
.
terminate
(
)
;
if
(
errorEvent
instanceof
ErrorEvent
)
{
const
{
message
filename
lineno
}
=
errorEvent
;
const
error
=
new
Error
(
{
message
}
at
{
filename
}
:
{
lineno
}
)
;
error
.
name
=
"
WorkerMessageError
"
;
reject
(
error
)
;
}
else
{
reject
(
new
Error
(
"
Error
in
worker
"
)
)
;
}
}
;
worker
.
postMessage
(
{
binaryPath
debugPath
breakpadId
module
}
)
;
}
)
;
}
async
function
getSymbolTableFromDebuggee
(
perfFront
path
breakpadId
)
{
const
[
addresses
index
buffer
]
=
await
perfFront
.
getSymbolTable
(
path
breakpadId
)
;
return
[
new
Uint32Array
(
addresses
)
new
Uint32Array
(
index
)
new
Uint8Array
(
buffer
)
]
;
}
async
function
doesFileExistAtPath
(
path
)
{
const
{
OS
}
=
lazy
.
OS
(
)
;
try
{
const
result
=
await
OS
.
File
.
stat
(
path
)
;
return
!
result
.
isDir
;
}
catch
(
e
)
{
if
(
e
instanceof
OS
.
File
.
Error
&
&
e
.
becauseNoSuchFile
)
{
return
false
;
}
throw
e
;
}
}
function
createLibraryMap
(
sharedLibraries
)
{
const
map
=
new
Map
(
sharedLibraries
.
map
(
lib
=
>
{
const
{
debugName
breakpadId
}
=
lib
;
const
key
=
[
debugName
breakpadId
]
.
join
(
"
:
"
)
;
return
[
key
lib
]
;
}
)
)
;
return
function
getLibraryFor
(
debugName
breakpadId
)
{
const
key
=
[
debugName
breakpadId
]
.
join
(
"
:
"
)
;
return
map
.
get
(
key
)
;
}
;
}
class
LocalSymbolicationService
{
constructor
(
sharedLibraries
objdirs
)
{
this
.
_libraryGetter
=
createLibraryMap
(
sharedLibraries
)
;
this
.
_objdirs
=
objdirs
;
}
async
getSymbolTable
(
debugName
breakpadId
)
{
const
candidatePaths
=
this
.
_getCandidatePaths
(
debugName
breakpadId
)
;
const
errors
=
[
]
;
for
(
const
{
path
debugPath
}
of
candidatePaths
)
{
if
(
await
doesFileExistAtPath
(
path
)
)
{
try
{
return
await
getSymbolTableFromLocalBinary
(
path
debugPath
breakpadId
)
;
}
catch
(
e
)
{
errors
.
push
(
e
)
;
}
}
}
throw
new
Error
(
Could
not
obtain
symbols
for
the
library
{
debugName
}
{
breakpadId
}
+
because
there
was
no
matching
file
at
any
of
the
candidate
paths
:
{
JSON
.
stringify
(
candidatePaths
)
}
.
Errors
:
{
errors
.
map
(
e
=
>
e
.
message
)
.
join
(
"
"
)
}
)
;
}
_getCandidatePaths
(
debugName
breakpadId
)
{
const
lib
=
this
.
_libraryGetter
(
debugName
breakpadId
)
;
if
(
!
lib
)
{
throw
new
Error
(
Could
not
find
the
library
for
"
{
debugName
}
"
"
{
breakpadId
}
"
.
)
;
}
const
{
name
path
debugPath
}
=
lib
;
const
{
OS
}
=
lazy
.
OS
(
)
;
const
candidatePaths
=
[
]
;
for
(
const
objdirPath
of
this
.
_objdirs
)
{
candidatePaths
.
push
(
{
path
:
OS
.
Path
.
join
(
objdirPath
"
dist
"
"
bin
"
name
)
debugPath
:
OS
.
Path
.
join
(
objdirPath
"
dist
"
"
bin
"
name
)
}
)
;
candidatePaths
.
push
(
{
path
:
OS
.
Path
.
join
(
objdirPath
name
)
debugPath
:
OS
.
Path
.
join
(
objdirPath
name
)
}
)
;
}
candidatePaths
.
push
(
{
path
debugPath
}
)
;
return
candidatePaths
;
}
}
class
LocalSymbolicationServiceWithRemoteSymbolTableFallback
{
constructor
(
symbolicationService
sharedLibraries
perfFront
)
{
this
.
_symbolicationService
=
symbolicationService
;
this
.
_libs
=
sharedLibraries
;
this
.
_perfFront
=
perfFront
;
}
async
getSymbolTable
(
debugName
breakpadId
)
{
try
{
return
await
this
.
_symbolicationService
.
getSymbolTable
(
debugName
breakpadId
)
;
}
catch
(
errorFromLocalFiles
)
{
const
lib
=
this
.
_libs
.
find
(
l
=
>
l
.
debugName
=
=
=
debugName
&
&
l
.
breakpadId
=
=
=
breakpadId
)
;
if
(
!
lib
)
{
throw
new
Error
(
Could
not
find
the
library
for
"
{
debugName
}
"
"
{
breakpadId
}
"
after
falling
+
back
to
remote
symbol
table
querying
because
regular
getSymbolTable
failed
+
with
error
:
{
errorFromLocalFiles
.
message
}
.
)
;
}
return
getSymbolTableFromDebuggee
(
this
.
_perfFront
lib
.
path
breakpadId
)
;
}
}
}
function
createLocalSymbolicationService
(
sharedLibraries
objdirs
perfFront
)
{
const
service
=
new
LocalSymbolicationService
(
sharedLibraries
objdirs
)
;
if
(
perfFront
)
{
return
new
LocalSymbolicationServiceWithRemoteSymbolTableFallback
(
service
sharedLibraries
perfFront
)
;
}
return
service
;
}
(
this
)
.
module
=
{
}
;
module
.
exports
=
{
createLocalSymbolicationService
}
;
var
EXPORTED_SYMBOLS
=
Object
.
keys
(
module
.
exports
)
;
