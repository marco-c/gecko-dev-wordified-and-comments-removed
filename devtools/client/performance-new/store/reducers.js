"
use
strict
"
;
function
recordingState
(
state
=
"
not
-
yet
-
known
"
action
)
{
switch
(
action
.
type
)
{
case
"
REPORT_PROFILER_READY
"
:
{
if
(
state
!
=
=
"
not
-
yet
-
known
"
)
{
return
state
;
}
const
{
isActive
isLockedForPrivateBrowsing
}
=
action
;
if
(
isLockedForPrivateBrowsing
)
{
return
"
locked
-
by
-
private
-
browsing
"
;
}
if
(
isActive
)
{
return
"
recording
"
;
}
return
"
available
-
to
-
record
"
;
}
case
"
REPORT_PROFILER_STARTED
"
:
switch
(
state
)
{
case
"
not
-
yet
-
known
"
:
case
"
available
-
to
-
record
"
:
case
"
request
-
to
-
stop
-
profiler
"
:
case
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
:
return
"
recording
"
;
case
"
request
-
to
-
start
-
recording
"
:
return
"
recording
"
;
case
"
locked
-
by
-
private
-
browsing
"
:
case
"
recording
"
:
throw
new
Error
(
"
The
profiler
started
recording
when
it
shouldn
'
t
have
"
+
been
able
to
.
Current
state
:
"
{
state
}
"
)
;
default
:
throw
new
Error
(
"
Unhandled
recording
state
"
)
;
}
case
"
REPORT_PROFILER_STOPPED
"
:
switch
(
state
)
{
case
"
not
-
yet
-
known
"
:
case
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
:
case
"
request
-
to
-
stop
-
profiler
"
:
return
"
available
-
to
-
record
"
;
case
"
request
-
to
-
start
-
recording
"
:
case
"
locked
-
by
-
private
-
browsing
"
:
return
state
;
case
"
recording
"
:
return
"
available
-
to
-
record
"
;
case
"
available
-
to
-
record
"
:
throw
new
Error
(
"
The
profiler
stopped
recording
when
it
shouldn
'
t
have
been
able
to
.
"
)
;
default
:
throw
new
Error
(
"
Unhandled
recording
state
"
)
;
}
case
"
REPORT_PRIVATE_BROWSING_STARTED
"
:
switch
(
state
)
{
case
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
:
case
"
request
-
to
-
stop
-
profiler
"
:
case
"
available
-
to
-
record
"
:
case
"
not
-
yet
-
known
"
:
return
"
locked
-
by
-
private
-
browsing
"
;
case
"
request
-
to
-
start
-
recording
"
:
case
"
recording
"
:
return
"
locked
-
by
-
private
-
browsing
"
;
case
"
locked
-
by
-
private
-
browsing
"
:
return
state
;
default
:
throw
new
Error
(
"
Unhandled
recording
state
"
)
;
}
case
"
REPORT_PRIVATE_BROWSING_STOPPED
"
:
return
"
available
-
to
-
record
"
;
case
"
REQUESTING_TO_START_RECORDING
"
:
return
"
request
-
to
-
start
-
recording
"
;
case
"
REQUESTING_TO_STOP_RECORDING
"
:
return
"
request
-
to
-
stop
-
profiler
"
;
case
"
REQUESTING_PROFILE
"
:
return
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
;
case
"
OBTAINED_PROFILE
"
:
return
"
available
-
to
-
record
"
;
default
:
return
state
;
}
}
function
recordingUnexpectedlyStopped
(
recState
state
=
false
action
)
{
switch
(
action
.
type
)
{
case
"
REPORT_PROFILER_STOPPED
"
:
case
"
REPORT_PRIVATE_BROWSING_STARTED
"
:
if
(
recState
=
=
=
"
recording
"
|
|
recState
=
=
"
request
-
to
-
start
-
recording
"
)
{
return
true
;
}
return
state
;
case
"
REPORT_PROFILER_STARTED
"
:
return
false
;
default
:
return
state
;
}
}
function
isSupportedPlatform
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
INITIALIZE_STORE
"
:
return
action
.
isSupportedPlatform
;
default
:
return
state
;
}
}
const
DEFAULT_RECORDING_SETTINGS
=
{
presetName
:
"
"
interval
:
1
entries
:
0
features
:
[
]
threads
:
[
]
objdirs
:
[
]
duration
:
0
}
;
function
areSettingsEquals
(
a
b
)
{
if
(
a
=
=
=
b
)
{
return
true
;
}
const
simpleProperties
=
[
"
presetName
"
"
interval
"
"
entries
"
"
duration
"
]
;
const
arrayProperties
=
[
"
features
"
"
threads
"
"
objdirs
"
]
;
for
(
const
property
of
simpleProperties
)
{
if
(
a
[
property
]
!
=
=
b
[
property
]
)
{
return
false
;
}
}
for
(
const
property
of
arrayProperties
)
{
if
(
a
[
property
]
.
length
!
=
=
b
[
property
]
.
length
)
{
return
false
;
}
const
arrayA
=
a
[
property
]
.
slice
(
)
.
sort
(
)
;
const
arrayB
=
b
[
property
]
.
slice
(
)
.
sort
(
)
;
if
(
arrayA
.
some
(
(
valueA
i
)
=
>
valueA
!
=
=
arrayB
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
function
recordingSettings
(
state
=
DEFAULT_RECORDING_SETTINGS
action
)
{
function
changeOneSetting
(
settingName
settingValue
)
{
if
(
state
[
settingName
]
=
=
=
settingValue
)
{
return
state
;
}
return
{
.
.
.
state
[
settingName
]
:
settingValue
presetName
:
"
custom
"
}
;
}
switch
(
action
.
type
)
{
case
"
CHANGE_INTERVAL
"
:
return
changeOneSetting
(
"
interval
"
action
.
interval
)
;
case
"
CHANGE_ENTRIES
"
:
return
changeOneSetting
(
"
entries
"
action
.
entries
)
;
case
"
CHANGE_FEATURES
"
:
return
changeOneSetting
(
"
features
"
action
.
features
)
;
case
"
CHANGE_THREADS
"
:
return
changeOneSetting
(
"
threads
"
action
.
threads
)
;
case
"
CHANGE_OBJDIRS
"
:
return
changeOneSetting
(
"
objdirs
"
action
.
objdirs
)
;
case
"
CHANGE_PRESET
"
:
return
action
.
preset
?
{
.
.
.
state
presetName
:
action
.
presetName
interval
:
action
.
preset
.
interval
entries
:
action
.
preset
.
entries
features
:
action
.
preset
.
features
threads
:
action
.
preset
.
threads
duration
:
action
.
preset
.
duration
}
:
{
.
.
.
state
presetName
:
action
.
presetName
}
;
case
"
UPDATE_SETTINGS_FROM_PREFERENCES
"
:
if
(
areSettingsEquals
(
state
action
.
recordingSettingsFromPreferences
)
)
{
return
state
;
}
return
{
.
.
.
action
.
recordingSettingsFromPreferences
}
;
default
:
return
state
;
}
}
function
initializedValues
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
INITIALIZE_STORE
"
:
return
{
presets
:
action
.
presets
pageContext
:
action
.
pageContext
supportedFeatures
:
action
.
supportedFeatures
openRemoteDevTools
:
action
.
openRemoteDevTools
}
;
default
:
return
state
;
}
}
function
promptEnvRestart
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_FEATURES
"
:
return
action
.
promptEnvRestart
;
default
:
return
state
;
}
}
module
.
exports
=
(
state
=
undefined
action
)
=
>
{
return
{
recordingState
:
recordingState
(
state
?
.
recordingState
action
)
recordingUnexpectedlyStopped
:
recordingUnexpectedlyStopped
(
state
?
.
recordingState
state
?
.
recordingUnexpectedlyStopped
action
)
isSupportedPlatform
:
isSupportedPlatform
(
state
?
.
isSupportedPlatform
action
)
recordingSettings
:
recordingSettings
(
state
?
.
recordingSettings
action
)
initializedValues
:
initializedValues
(
state
?
.
initializedValues
action
)
promptEnvRestart
:
promptEnvRestart
(
state
?
.
promptEnvRestart
action
)
}
;
}
;
