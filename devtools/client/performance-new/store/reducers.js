"
use
strict
"
;
const
{
combineReducers
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
recordingState
:
{
NOT_YET_KNOWN
}
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
utils
"
)
;
function
recordingState
(
state
=
NOT_YET_KNOWN
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_RECORDING_STATE
"
:
return
action
.
state
;
case
"
REPORT_PROFILER_READY
"
:
return
action
.
recordingState
;
default
:
return
state
;
}
}
function
recordingUnexpectedlyStopped
(
state
=
false
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_RECORDING_STATE
"
:
return
action
.
didRecordingUnexpectedlyStopped
;
default
:
return
state
;
}
}
function
isSupportedPlatform
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
REPORT_PROFILER_READY
"
:
return
action
.
isSupportedPlatform
;
default
:
return
state
;
}
}
function
interval
(
state
=
1000
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_INTERVAL
"
:
return
action
.
interval
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
interval
;
default
:
return
state
;
}
}
function
entries
(
state
=
10000000
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_ENTRIES
"
:
return
action
.
entries
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
entries
;
default
:
return
state
;
}
}
function
features
(
state
=
[
"
js
"
"
stackwalk
"
"
responsiveness
"
]
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_FEATURES
"
:
return
action
.
features
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
features
;
default
:
return
state
;
}
}
function
threads
(
state
=
[
"
GeckoMain
"
"
Compositor
"
]
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_THREADS
"
:
return
action
.
threads
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
threads
;
default
:
return
state
;
}
}
function
objdirs
(
state
=
[
]
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_OBJDIRS
"
:
return
action
.
objdirs
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
objdirs
;
default
:
return
state
;
}
}
function
initializedValues
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
INITIALIZE_STORE
"
:
return
{
perfFront
:
action
.
perfFront
receiveProfile
:
action
.
receiveProfile
setRecordingPreferences
:
action
.
setRecordingPreferences
isPopup
:
Boolean
(
action
.
isPopup
)
}
;
default
:
return
state
;
}
}
module
.
exports
=
combineReducers
(
{
recordingState
recordingUnexpectedlyStopped
isSupportedPlatform
interval
entries
features
threads
objdirs
initializedValues
}
)
;
