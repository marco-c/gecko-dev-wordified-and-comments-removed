"
use
strict
"
;
function
recordingState
(
state
=
"
not
-
yet
-
known
"
action
)
{
switch
(
action
.
type
)
{
case
"
REPORT_PROFILER_READY
"
:
{
if
(
state
!
=
=
"
not
-
yet
-
known
"
)
{
return
state
;
}
const
{
isActive
isLockedForPrivateBrowsing
}
=
action
;
if
(
isLockedForPrivateBrowsing
)
{
return
"
locked
-
by
-
private
-
browsing
"
;
}
if
(
isActive
)
{
return
"
recording
"
;
}
return
"
available
-
to
-
record
"
;
}
case
"
REPORT_PROFILER_STARTED
"
:
switch
(
state
)
{
case
"
not
-
yet
-
known
"
:
case
"
available
-
to
-
record
"
:
case
"
request
-
to
-
stop
-
profiler
"
:
case
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
:
return
"
recording
"
;
case
"
request
-
to
-
start
-
recording
"
:
return
"
recording
"
;
case
"
locked
-
by
-
private
-
browsing
"
:
case
"
recording
"
:
throw
new
Error
(
"
The
profiler
started
recording
when
it
shouldn
'
t
have
"
+
been
able
to
.
Current
state
:
"
{
state
}
"
)
;
default
:
throw
new
Error
(
"
Unhandled
recording
state
"
)
;
}
case
"
REPORT_PROFILER_STOPPED
"
:
switch
(
state
)
{
case
"
not
-
yet
-
known
"
:
case
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
:
case
"
request
-
to
-
stop
-
profiler
"
:
return
"
available
-
to
-
record
"
;
case
"
request
-
to
-
start
-
recording
"
:
case
"
locked
-
by
-
private
-
browsing
"
:
return
state
;
case
"
recording
"
:
return
"
available
-
to
-
record
"
;
case
"
available
-
to
-
record
"
:
throw
new
Error
(
"
The
profiler
stopped
recording
when
it
shouldn
'
t
have
been
able
to
.
"
)
;
default
:
throw
new
Error
(
"
Unhandled
recording
state
"
)
;
}
case
"
REPORT_PRIVATE_BROWSING_STARTED
"
:
switch
(
state
)
{
case
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
:
case
"
request
-
to
-
stop
-
profiler
"
:
case
"
available
-
to
-
record
"
:
case
"
not
-
yet
-
known
"
:
return
"
locked
-
by
-
private
-
browsing
"
;
case
"
request
-
to
-
start
-
recording
"
:
case
"
recording
"
:
return
"
locked
-
by
-
private
-
browsing
"
;
case
"
locked
-
by
-
private
-
browsing
"
:
return
state
;
default
:
throw
new
Error
(
"
Unhandled
recording
state
"
)
;
}
case
"
REPORT_PRIVATE_BROWSING_STOPPED
"
:
return
"
available
-
to
-
record
"
;
case
"
REQUESTING_TO_START_RECORDING
"
:
return
"
request
-
to
-
start
-
recording
"
;
case
"
REQUESTING_TO_STOP_RECORDING
"
:
return
"
request
-
to
-
stop
-
profiler
"
;
case
"
REQUESTING_PROFILE
"
:
return
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
;
case
"
OBTAINED_PROFILE
"
:
return
"
available
-
to
-
record
"
;
default
:
return
state
;
}
}
function
recordingUnexpectedlyStopped
(
recState
state
=
false
action
)
{
switch
(
action
.
type
)
{
case
"
REPORT_PROFILER_STOPPED
"
:
case
"
REPORT_PRIVATE_BROWSING_STARTED
"
:
if
(
recState
=
=
=
"
recording
"
|
|
recState
=
=
"
request
-
to
-
start
-
recording
"
)
{
return
true
;
}
return
state
;
case
"
REPORT_PROFILER_STARTED
"
:
return
false
;
default
:
return
state
;
}
}
function
isSupportedPlatform
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
INITIALIZE_STORE
"
:
return
action
.
isSupportedPlatform
;
default
:
return
state
;
}
}
function
interval
(
state
=
1
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_INTERVAL
"
:
return
action
.
interval
;
case
"
CHANGE_PRESET
"
:
return
action
.
preset
?
action
.
preset
.
interval
:
state
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
interval
;
default
:
return
state
;
}
}
function
entries
(
state
=
0
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_ENTRIES
"
:
return
action
.
entries
;
case
"
CHANGE_PRESET
"
:
return
action
.
preset
?
action
.
preset
.
entries
:
state
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
entries
;
default
:
return
state
;
}
}
function
features
(
state
=
[
]
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_FEATURES
"
:
return
action
.
features
;
case
"
CHANGE_PRESET
"
:
return
action
.
preset
?
action
.
preset
.
features
:
state
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
features
;
default
:
return
state
;
}
}
function
threads
(
state
=
[
]
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_THREADS
"
:
return
action
.
threads
;
case
"
CHANGE_PRESET
"
:
return
action
.
preset
?
action
.
preset
.
threads
:
state
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
threads
;
default
:
return
state
;
}
}
function
objdirs
(
state
=
[
]
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_OBJDIRS
"
:
return
action
.
objdirs
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
objdirs
;
default
:
return
state
;
}
}
function
presetName
(
state
=
"
"
action
)
{
switch
(
action
.
type
)
{
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
presetName
;
case
"
CHANGE_PRESET
"
:
return
action
.
presetName
;
case
"
CHANGE_INTERVAL
"
:
case
"
CHANGE_ENTRIES
"
:
case
"
CHANGE_FEATURES
"
:
case
"
CHANGE_THREADS
"
:
return
"
custom
"
;
default
:
return
state
;
}
}
function
initializedValues
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
INITIALIZE_STORE
"
:
return
{
setRecordingSettings
:
action
.
setRecordingSettings
presets
:
action
.
presets
pageContext
:
action
.
pageContext
supportedFeatures
:
action
.
supportedFeatures
openRemoteDevTools
:
action
.
openRemoteDevTools
}
;
default
:
return
state
;
}
}
function
promptEnvRestart
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_FEATURES
"
:
return
action
.
promptEnvRestart
;
default
:
return
state
;
}
}
module
.
exports
=
(
state
=
undefined
action
)
=
>
{
return
{
recordingState
:
recordingState
(
state
?
.
recordingState
action
)
recordingUnexpectedlyStopped
:
recordingUnexpectedlyStopped
(
state
?
.
recordingState
state
?
.
recordingUnexpectedlyStopped
action
)
isSupportedPlatform
:
isSupportedPlatform
(
state
?
.
isSupportedPlatform
action
)
interval
:
interval
(
state
?
.
interval
action
)
entries
:
entries
(
state
?
.
entries
action
)
features
:
features
(
state
?
.
features
action
)
threads
:
threads
(
state
?
.
threads
action
)
objdirs
:
objdirs
(
state
?
.
objdirs
action
)
presetName
:
presetName
(
state
?
.
presetName
action
)
initializedValues
:
initializedValues
(
state
?
.
initializedValues
action
)
promptEnvRestart
:
promptEnvRestart
(
state
?
.
promptEnvRestart
action
)
profilerViewMode
:
state
?
.
profilerViewMode
}
;
}
;
