"
use
strict
"
;
const
{
combineReducers
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
function
recordingState
(
state
=
"
not
-
yet
-
known
"
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_RECORDING_STATE
"
:
return
action
.
state
;
case
"
REPORT_PROFILER_READY
"
:
return
action
.
recordingState
;
default
:
return
state
;
}
}
function
recordingUnexpectedlyStopped
(
state
=
false
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_RECORDING_STATE
"
:
return
action
.
didRecordingUnexpectedlyStopped
;
default
:
return
state
;
}
}
function
isSupportedPlatform
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
REPORT_PROFILER_READY
"
:
return
action
.
isSupportedPlatform
;
default
:
return
state
;
}
}
function
interval
(
state
=
1
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_INTERVAL
"
:
return
action
.
interval
;
case
"
CHANGE_PRESET
"
:
return
action
.
preset
?
action
.
preset
.
interval
:
state
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
interval
;
default
:
return
state
;
}
}
function
entries
(
state
=
0
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_ENTRIES
"
:
return
action
.
entries
;
case
"
CHANGE_PRESET
"
:
return
action
.
preset
?
action
.
preset
.
entries
:
state
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
entries
;
default
:
return
state
;
}
}
function
features
(
state
=
[
]
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_FEATURES
"
:
return
action
.
features
;
case
"
CHANGE_PRESET
"
:
return
action
.
preset
?
action
.
preset
.
features
:
state
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
features
;
default
:
return
state
;
}
}
function
threads
(
state
=
[
]
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_THREADS
"
:
return
action
.
threads
;
case
"
CHANGE_PRESET
"
:
return
action
.
preset
?
action
.
preset
.
threads
:
state
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
threads
;
default
:
return
state
;
}
}
function
objdirs
(
state
=
[
]
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_OBJDIRS
"
:
return
action
.
objdirs
;
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
objdirs
;
default
:
return
state
;
}
}
function
presetName
(
state
=
"
"
action
)
{
switch
(
action
.
type
)
{
case
"
INITIALIZE_STORE
"
:
return
action
.
recordingSettingsFromPreferences
.
presetName
;
case
"
CHANGE_PRESET
"
:
return
action
.
presetName
;
case
"
CHANGE_INTERVAL
"
:
case
"
CHANGE_ENTRIES
"
:
case
"
CHANGE_FEATURES
"
:
case
"
CHANGE_THREADS
"
:
return
"
custom
"
;
default
:
return
state
;
}
}
function
initializedValues
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
INITIALIZE_STORE
"
:
return
{
perfFront
:
action
.
perfFront
receiveProfile
:
action
.
receiveProfile
setRecordingSettings
:
action
.
setRecordingSettings
presets
:
action
.
presets
pageContext
:
action
.
pageContext
getSymbolTableGetter
:
action
.
getSymbolTableGetter
supportedFeatures
:
action
.
supportedFeatures
openAboutProfiling
:
action
.
openAboutProfiling
openRemoteDevTools
:
action
.
openRemoteDevTools
}
;
default
:
return
state
;
}
}
function
promptEnvRestart
(
state
=
null
action
)
{
switch
(
action
.
type
)
{
case
"
CHANGE_FEATURES
"
:
return
action
.
promptEnvRestart
;
default
:
return
state
;
}
}
module
.
exports
=
combineReducers
(
{
recordingState
recordingUnexpectedlyStopped
isSupportedPlatform
interval
entries
features
threads
objdirs
presetName
initializedValues
promptEnvRestart
}
)
;
