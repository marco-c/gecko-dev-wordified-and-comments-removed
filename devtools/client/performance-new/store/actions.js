"
use
strict
"
;
const
selectors
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
selectors
"
)
;
const
{
getEnvironmentVariable
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
browser
"
)
;
exports
.
reportProfilerReady
=
(
isActive
isLockedForPrivateBrowsing
)
=
>
(
{
type
:
"
REPORT_PROFILER_READY
"
isActive
isLockedForPrivateBrowsing
}
)
;
exports
.
reportProfilerStarted
=
(
)
=
>
(
{
type
:
"
REPORT_PROFILER_STARTED
"
}
)
;
exports
.
reportProfilerStopped
=
(
)
=
>
(
{
type
:
"
REPORT_PROFILER_STOPPED
"
}
)
;
exports
.
reportPrivateBrowsingStarted
=
(
)
=
>
(
{
type
:
"
REPORT_PRIVATE_BROWSING_STARTED
"
}
)
;
exports
.
reportPrivateBrowsingStopped
=
(
)
=
>
(
{
type
:
"
REPORT_PRIVATE_BROWSING_STOPPED
"
}
)
;
function
_dispatchAndUpdatePreferences
(
action
)
{
return
(
{
dispatch
getState
}
)
=
>
{
if
(
typeof
action
!
=
=
"
object
"
)
{
throw
new
Error
(
"
This
function
assumes
that
the
dispatched
action
is
a
simple
object
and
"
+
"
synchronous
.
"
)
;
}
dispatch
(
action
)
;
const
setRecordingSettings
=
selectors
.
getSetRecordingSettingsFn
(
getState
(
)
)
;
const
recordingSettings
=
selectors
.
getRecordingSettings
(
getState
(
)
)
;
setRecordingSettings
(
recordingSettings
)
;
}
;
}
exports
.
changeInterval
=
interval
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_INTERVAL
"
interval
}
)
;
exports
.
changeEntries
=
entries
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_ENTRIES
"
entries
}
)
;
exports
.
changeFeatures
=
features
=
>
{
return
(
{
dispatch
getState
}
)
=
>
{
let
promptEnvRestart
=
null
;
if
(
selectors
.
getPageContext
(
getState
(
)
)
=
=
=
"
aboutprofiling
"
)
{
if
(
!
getEnvironmentVariable
(
"
JS_TRACE_LOGGING
"
)
&
&
features
.
includes
(
"
jstracer
"
)
)
{
promptEnvRestart
=
"
JS_TRACE_LOGGING
"
;
}
}
dispatch
(
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_FEATURES
"
features
promptEnvRestart
}
)
)
;
}
;
}
;
exports
.
changeThreads
=
threads
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_THREADS
"
threads
}
)
;
exports
.
changePreset
=
(
presets
presetName
)
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_PRESET
"
presetName
preset
:
presets
[
presetName
]
}
)
;
exports
.
changeObjdirs
=
objdirs
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_OBJDIRS
"
objdirs
}
)
;
exports
.
initializeStore
=
values
=
>
{
const
{
recordingSettings
.
.
.
initValues
}
=
values
;
return
{
.
.
.
initValues
type
:
"
INITIALIZE_STORE
"
recordingSettingsFromPreferences
:
recordingSettings
}
;
}
;
exports
.
startRecording
=
(
)
=
>
{
return
(
{
dispatch
getState
}
)
=
>
{
const
recordingSettings
=
selectors
.
getRecordingSettings
(
getState
(
)
)
;
const
perfFront
=
selectors
.
getPerfFront
(
getState
(
)
)
;
dispatch
(
{
type
:
"
REQUESTING_TO_START_RECORDING
"
}
)
;
perfFront
.
startProfiler
(
recordingSettings
)
;
}
;
}
;
exports
.
getProfileAndStopProfiler
=
(
)
=
>
{
return
async
(
{
dispatch
getState
}
)
=
>
{
const
perfFront
=
selectors
.
getPerfFront
(
getState
(
)
)
;
dispatch
(
{
type
:
"
REQUESTING_PROFILE
"
}
)
;
const
profile
=
await
perfFront
.
getProfileAndStopProfiler
(
)
;
dispatch
(
{
type
:
"
OBTAINED_PROFILE
"
}
)
;
return
profile
;
}
;
}
;
exports
.
stopProfilerAndDiscardProfile
=
(
)
=
>
{
return
async
(
{
dispatch
getState
}
)
=
>
{
const
perfFront
=
selectors
.
getPerfFront
(
getState
(
)
)
;
dispatch
(
{
type
:
"
REQUESTING_TO_STOP_RECORDING
"
}
)
;
try
{
await
perfFront
.
stopProfilerAndDiscardProfile
(
)
;
}
catch
(
error
)
{
const
anyWindow
=
window
;
const
{
gIsPanelDestroyed
}
=
anyWindow
;
if
(
gIsPanelDestroyed
)
{
}
else
{
throw
error
;
}
}
}
;
}
;
