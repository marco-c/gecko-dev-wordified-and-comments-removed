"
use
strict
"
;
const
selectors
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
selectors
"
)
;
const
{
recordingState
:
{
AVAILABLE_TO_RECORD
REQUEST_TO_START_RECORDING
REQUEST_TO_GET_PROFILE_AND_STOP_PROFILER
REQUEST_TO_STOP_PROFILER
}
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
utils
"
)
;
const
changeRecordingState
=
exports
.
changeRecordingState
=
(
state
options
=
{
didRecordingUnexpectedlyStopped
:
false
}
)
=
>
(
{
type
:
"
CHANGE_RECORDING_STATE
"
state
didRecordingUnexpectedlyStopped
:
options
.
didRecordingUnexpectedlyStopped
}
)
;
exports
.
reportProfilerReady
=
(
isSupportedPlatform
recordingState
)
=
>
(
{
type
:
"
REPORT_PROFILER_READY
"
isSupportedPlatform
recordingState
}
)
;
function
_dispatchAndUpdatePreferences
(
action
)
{
return
(
dispatch
getState
)
=
>
{
if
(
typeof
action
!
=
=
"
object
"
)
{
throw
new
Error
(
"
This
function
assumes
that
the
dispatched
action
is
a
simple
object
and
"
+
"
synchronous
.
"
)
;
}
dispatch
(
action
)
;
const
setRecordingPreferences
=
selectors
.
getSetRecordingPreferencesFn
(
getState
(
)
)
;
const
recordingSettings
=
selectors
.
getRecordingSettings
(
getState
(
)
)
;
setRecordingPreferences
(
recordingSettings
)
;
}
;
}
exports
.
changeInterval
=
interval
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_INTERVAL
"
interval
}
)
;
exports
.
changeEntries
=
entries
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_ENTRIES
"
entries
}
)
;
exports
.
changeFeatures
=
features
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_FEATURES
"
features
}
)
;
exports
.
changeThreads
=
threads
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_THREADS
"
threads
}
)
;
exports
.
initializeStore
=
values
=
>
(
{
type
:
"
INITIALIZE_STORE
"
.
.
.
values
}
)
;
exports
.
startRecording
=
(
)
=
>
{
return
(
dispatch
getState
)
=
>
{
const
recordingSettings
=
selectors
.
getRecordingSettings
(
getState
(
)
)
;
const
perfFront
=
selectors
.
getPerfFront
(
getState
(
)
)
;
perfFront
.
startProfiler
(
recordingSettings
)
;
dispatch
(
changeRecordingState
(
REQUEST_TO_START_RECORDING
)
)
;
}
;
}
;
exports
.
getProfileAndStopProfiler
=
(
)
=
>
{
return
async
(
dispatch
getState
)
=
>
{
const
perfFront
=
selectors
.
getPerfFront
(
getState
(
)
)
;
dispatch
(
changeRecordingState
(
REQUEST_TO_GET_PROFILE_AND_STOP_PROFILER
)
)
;
const
profile
=
await
perfFront
.
getProfileAndStopProfiler
(
)
;
selectors
.
getReceiveProfileFn
(
getState
(
)
)
(
profile
)
;
dispatch
(
changeRecordingState
(
AVAILABLE_TO_RECORD
)
)
;
}
;
}
;
exports
.
stopProfilerAndDiscardProfile
=
(
)
=
>
{
return
async
(
dispatch
getState
)
=
>
{
const
perfFront
=
selectors
.
getPerfFront
(
getState
(
)
)
;
dispatch
(
changeRecordingState
(
REQUEST_TO_STOP_PROFILER
)
)
;
perfFront
.
stopProfilerAndDiscardProfile
(
)
;
}
;
}
;
