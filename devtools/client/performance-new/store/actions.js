"
use
strict
"
;
const
selectors
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
selectors
"
)
;
const
{
recordingState
:
{
AVAILABLE_TO_RECORD
REQUEST_TO_START_RECORDING
REQUEST_TO_GET_PROFILE_AND_STOP_PROFILER
REQUEST_TO_STOP_PROFILER
}
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
utils
"
)
;
const
{
OS
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
{
ProfilerGetSymbols
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
ProfilerGetSymbols
.
jsm
"
)
;
const
changeRecordingState
=
exports
.
changeRecordingState
=
(
state
options
=
{
didRecordingUnexpectedlyStopped
:
false
}
)
=
>
(
{
type
:
"
CHANGE_RECORDING_STATE
"
state
didRecordingUnexpectedlyStopped
:
options
.
didRecordingUnexpectedlyStopped
}
)
;
exports
.
reportProfilerReady
=
(
isSupportedPlatform
recordingState
)
=
>
(
{
type
:
"
REPORT_PROFILER_READY
"
isSupportedPlatform
recordingState
}
)
;
function
_dispatchAndUpdatePreferences
(
action
)
{
return
(
dispatch
getState
)
=
>
{
if
(
typeof
action
!
=
=
"
object
"
)
{
throw
new
Error
(
"
This
function
assumes
that
the
dispatched
action
is
a
simple
object
and
"
+
"
synchronous
.
"
)
;
}
dispatch
(
action
)
;
const
setRecordingPreferences
=
selectors
.
getSetRecordingPreferencesFn
(
getState
(
)
)
;
const
recordingSettings
=
selectors
.
getRecordingSettings
(
getState
(
)
)
;
setRecordingPreferences
(
recordingSettings
)
;
}
;
}
exports
.
changeInterval
=
interval
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_INTERVAL
"
interval
}
)
;
exports
.
changeEntries
=
entries
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_ENTRIES
"
entries
}
)
;
exports
.
changeFeatures
=
features
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_FEATURES
"
features
}
)
;
exports
.
changeThreads
=
threads
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_THREADS
"
threads
}
)
;
exports
.
changeObjdirs
=
objdirs
=
>
_dispatchAndUpdatePreferences
(
{
type
:
"
CHANGE_OBJDIRS
"
objdirs
}
)
;
exports
.
initializeStore
=
values
=
>
(
{
type
:
"
INITIALIZE_STORE
"
.
.
.
values
}
)
;
exports
.
startRecording
=
(
)
=
>
{
return
(
dispatch
getState
)
=
>
{
const
recordingSettings
=
selectors
.
getRecordingSettings
(
getState
(
)
)
;
const
perfFront
=
selectors
.
getPerfFront
(
getState
(
)
)
;
perfFront
.
startProfiler
(
recordingSettings
)
;
dispatch
(
changeRecordingState
(
REQUEST_TO_START_RECORDING
)
)
;
}
;
}
;
function
createLibraryMap
(
profile
)
{
const
map
=
new
Map
(
)
;
function
fillMapForProcessRecursive
(
processProfile
)
{
for
(
const
lib
of
processProfile
.
libs
)
{
const
{
debugName
breakpadId
}
=
lib
;
const
key
=
[
debugName
breakpadId
]
.
join
(
"
:
"
)
;
map
.
set
(
key
lib
)
;
}
for
(
const
subprocess
of
processProfile
.
processes
)
{
fillMapForProcessRecursive
(
subprocess
)
;
}
}
fillMapForProcessRecursive
(
profile
)
;
return
function
getLibraryFor
(
debugName
breakpadId
)
{
const
key
=
[
debugName
breakpadId
]
.
join
(
"
:
"
)
;
return
map
.
get
(
key
)
;
}
;
}
async
function
getSymbolTableFromDebuggee
(
perfFront
path
breakpadId
)
{
const
[
addresses
index
buffer
]
=
await
perfFront
.
getSymbolTable
(
path
breakpadId
)
;
return
[
new
Uint32Array
(
addresses
)
new
Uint32Array
(
index
)
new
Uint8Array
(
buffer
)
]
;
}
async
function
doesFileExistAtPath
(
path
)
{
try
{
const
result
=
await
OS
.
File
.
stat
(
path
)
;
return
!
result
.
isDir
;
}
catch
(
e
)
{
if
(
e
instanceof
OS
.
File
.
Error
&
&
e
.
becauseNoSuchFile
)
{
return
false
;
}
throw
e
;
}
}
async
function
getSymbolTableFromLocalBinary
(
objdirs
filename
breakpadId
)
{
const
candidatePaths
=
[
]
;
for
(
const
objdirPath
of
objdirs
)
{
candidatePaths
.
push
(
OS
.
Path
.
join
(
objdirPath
"
dist
"
"
bin
"
filename
)
)
;
candidatePaths
.
push
(
OS
.
Path
.
join
(
objdirPath
filename
)
)
;
}
for
(
const
path
of
candidatePaths
)
{
if
(
await
doesFileExistAtPath
(
path
)
)
{
try
{
return
await
ProfilerGetSymbols
.
getSymbolTable
(
path
path
breakpadId
)
;
}
catch
(
e
)
{
}
}
}
throw
new
Error
(
"
Could
not
find
any
matching
binary
.
"
)
;
}
exports
.
getProfileAndStopProfiler
=
(
)
=
>
{
return
async
(
dispatch
getState
)
=
>
{
const
perfFront
=
selectors
.
getPerfFront
(
getState
(
)
)
;
dispatch
(
changeRecordingState
(
REQUEST_TO_GET_PROFILE_AND_STOP_PROFILER
)
)
;
const
profile
=
await
perfFront
.
getProfileAndStopProfiler
(
)
;
const
libraryGetter
=
createLibraryMap
(
profile
)
;
async
function
getSymbolTable
(
debugName
breakpadId
)
{
const
{
name
path
debugPath
}
=
libraryGetter
(
debugName
breakpadId
)
;
if
(
await
doesFileExistAtPath
(
path
)
)
{
return
ProfilerGetSymbols
.
getSymbolTable
(
path
debugPath
breakpadId
)
;
}
try
{
const
objdirs
=
selectors
.
getObjdirs
(
getState
(
)
)
;
return
await
getSymbolTableFromLocalBinary
(
objdirs
name
breakpadId
)
;
}
catch
(
e
)
{
return
getSymbolTableFromDebuggee
(
perfFront
path
breakpadId
)
;
}
}
selectors
.
getReceiveProfileFn
(
getState
(
)
)
(
profile
getSymbolTable
)
;
dispatch
(
changeRecordingState
(
AVAILABLE_TO_RECORD
)
)
;
}
;
}
;
exports
.
stopProfilerAndDiscardProfile
=
(
)
=
>
{
return
async
(
dispatch
getState
)
=
>
{
const
perfFront
=
selectors
.
getPerfFront
(
getState
(
)
)
;
dispatch
(
changeRecordingState
(
REQUEST_TO_STOP_PROFILER
)
)
;
perfFront
.
stopProfilerAndDiscardProfile
(
)
;
}
;
}
;
