"
use
strict
"
;
const
selectors
=
require
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
store
/
selectors
.
js
"
)
;
exports
.
reportProfilerReady
=
isActive
=
>
(
{
type
:
"
REPORT_PROFILER_READY
"
isActive
}
)
;
exports
.
reportProfilerStarted
=
(
)
=
>
(
{
type
:
"
REPORT_PROFILER_STARTED
"
}
)
;
exports
.
reportProfilerStopped
=
(
)
=
>
(
{
type
:
"
REPORT_PROFILER_STOPPED
"
}
)
;
exports
.
changeInterval
=
interval
=
>
(
{
type
:
"
CHANGE_INTERVAL
"
interval
}
)
;
exports
.
changeEntries
=
entries
=
>
(
{
type
:
"
CHANGE_ENTRIES
"
entries
}
)
;
exports
.
changeFeatures
=
features
=
>
{
return
(
{
dispatch
getState
}
)
=
>
{
let
promptEnvRestart
=
null
;
if
(
selectors
.
getPageContext
(
getState
(
)
)
=
=
=
"
aboutprofiling
"
)
{
if
(
!
Services
.
env
.
get
(
"
JS_TRACE_LOGGING
"
)
&
&
features
.
includes
(
"
jstracer
"
)
)
{
promptEnvRestart
=
"
JS_TRACE_LOGGING
"
;
}
}
dispatch
(
{
type
:
"
CHANGE_FEATURES
"
features
promptEnvRestart
}
)
;
}
;
}
;
exports
.
changeThreads
=
threads
=
>
(
{
type
:
"
CHANGE_THREADS
"
threads
}
)
;
exports
.
changePreset
=
(
presets
presetName
)
=
>
(
{
type
:
"
CHANGE_PRESET
"
presetName
preset
:
presets
[
presetName
]
}
)
;
exports
.
changeObjdirs
=
objdirs
=
>
(
{
type
:
"
CHANGE_OBJDIRS
"
objdirs
}
)
;
exports
.
initializeStore
=
values
=
>
{
return
{
type
:
"
INITIALIZE_STORE
"
.
.
.
values
}
;
}
;
exports
.
updateSettingsFromPreferences
=
recordingSettingsFromPreferences
=
>
{
return
{
type
:
"
UPDATE_SETTINGS_FROM_PREFERENCES
"
recordingSettingsFromPreferences
}
;
}
;
exports
.
startRecording
=
perfFront
=
>
{
return
(
{
dispatch
getState
}
)
=
>
{
const
recordingSettings
=
selectors
.
getRecordingSettings
(
getState
(
)
)
;
dispatch
(
{
type
:
"
REQUESTING_TO_START_RECORDING
"
}
)
;
perfFront
.
startProfiler
(
recordingSettings
)
;
}
;
}
;
exports
.
getProfileAndStopProfiler
=
perfFront
=
>
{
return
async
(
{
dispatch
}
)
=
>
{
dispatch
(
{
type
:
"
REQUESTING_PROFILE
"
}
)
;
const
profileAndAdditionalInformation
=
await
perfFront
.
getProfileAndStopProfiler
(
)
;
dispatch
(
{
type
:
"
OBTAINED_PROFILE
"
}
)
;
return
profileAndAdditionalInformation
;
}
;
}
;
exports
.
stopProfilerAndDiscardProfile
=
perfFront
=
>
{
return
async
(
{
dispatch
}
)
=
>
{
dispatch
(
{
type
:
"
REQUESTING_TO_STOP_RECORDING
"
}
)
;
try
{
await
perfFront
.
stopProfilerAndDiscardProfile
(
)
;
}
catch
(
error
)
{
const
anyWindow
=
window
;
const
{
gIsPanelDestroyed
}
=
anyWindow
;
if
(
gIsPanelDestroyed
)
{
}
else
{
throw
error
;
}
}
}
;
}
;
