"
use
strict
"
;
const
{
validateProfilerWebChannelUrl
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
DevToolsStartup
.
jsm
"
)
;
add_task
(
function
test
(
)
{
info
(
"
Since
the
WebChannel
can
communicate
with
a
content
page
test
that
only
"
+
"
trusted
URLs
can
be
used
with
this
mechanism
.
"
)
;
const
{
checkUrlIsValid
checkUrlIsInvalid
}
=
setup
(
)
;
info
(
"
Check
all
of
the
valid
URLs
"
)
;
checkUrlIsValid
(
"
https
:
/
/
profiler
.
firefox
.
com
"
)
;
checkUrlIsValid
(
"
http
:
/
/
example
.
com
"
)
;
checkUrlIsValid
(
"
http
:
/
/
localhost
:
4242
"
)
;
checkUrlIsValid
(
"
http
:
/
/
localhost
:
32343434
"
)
;
checkUrlIsValid
(
"
http
:
/
/
localhost
:
4242
/
"
)
;
checkUrlIsValid
(
"
https
:
/
/
deploy
-
preview
-
1234
-
-
perf
-
html
.
netlify
.
com
"
)
;
checkUrlIsValid
(
"
https
:
/
/
deploy
-
preview
-
1234
-
-
perf
-
html
.
netlify
.
com
/
"
)
;
info
(
"
Check
all
of
the
invalid
URLs
"
)
;
checkUrlIsInvalid
(
"
https
:
/
/
profiler
.
firefox
.
com
/
some
-
other
-
path
"
)
;
checkUrlIsInvalid
(
"
http
:
/
/
localhost
:
4242
/
some
-
other
-
path
"
)
;
checkUrlIsInvalid
(
"
http
:
/
/
profiler
.
firefox
.
com
.
example
.
com
"
)
;
checkUrlIsInvalid
(
"
http
:
/
/
mozilla
.
com
"
)
;
}
)
;
function
setup
(
)
{
function
checkUrlIsValid
(
url
)
{
info
(
Check
that
{
url
}
is
valid
)
;
equal
(
validateProfilerWebChannelUrl
(
url
)
url
"
{
url
}
"
is
a
valid
WebChannel
URL
.
)
;
}
function
checkUrlIsInvalid
(
url
)
{
info
(
Check
that
{
url
}
is
invalid
)
;
equal
(
validateProfilerWebChannelUrl
(
url
)
"
https
:
/
/
profiler
.
firefox
.
com
"
"
{
url
}
"
was
not
valid
and
was
reset
to
the
base
URL
.
)
;
}
return
{
checkUrlIsValid
checkUrlIsInvalid
}
;
}
