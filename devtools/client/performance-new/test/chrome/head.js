"
use
strict
"
;
const
{
BrowserLoader
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
{
}
)
;
var
{
require
}
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
"
window
}
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
perfDescription
}
=
require
(
"
devtools
/
shared
/
specs
/
perf
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
flags
=
require
(
"
devtools
/
shared
/
flags
"
)
;
flags
.
testing
=
true
;
let
EXPECTED_DTU_ASSERT_FAILURE_COUNT
=
0
;
SimpleTest
.
registerCleanupFunction
(
function
(
)
{
if
(
DevToolsUtils
.
assertionFailureCount
!
=
=
EXPECTED_DTU_ASSERT_FAILURE_COUNT
)
{
ok
(
false
"
Should
have
had
the
expected
number
of
DevToolsUtils
.
assert
(
)
failures
.
"
+
"
Expected
"
+
EXPECTED_DTU_ASSERT_FAILURE_COUNT
+
"
got
"
+
DevToolsUtils
.
assertionFailureCount
)
;
}
}
)
;
function
addPerfTest
(
asyncTest
)
{
window
.
onload
=
async
(
)
=
>
{
try
{
await
asyncTest
(
)
;
}
catch
(
e
)
{
ok
(
false
"
Got
an
error
:
"
+
DevToolsUtils
.
safeErrorString
(
e
)
)
;
}
finally
{
SimpleTest
.
finish
(
)
;
}
}
;
}
class
MockPerfFront
extends
EventEmitter
{
constructor
(
)
{
super
(
)
;
this
.
_isActive
=
false
;
this
.
_asyncQueue
=
[
]
;
this
.
mockIsSupported
=
true
;
this
.
mockIsLocked
=
false
;
this
.
isActive
=
this
.
_wrapInAsyncQueue
(
this
.
isActive
)
;
this
.
startProfiler
=
this
.
_wrapInAsyncQueue
(
this
.
startProfiler
)
;
this
.
stopProfilerAndDiscardProfile
=
this
.
_wrapInAsyncQueue
(
this
.
stopProfilerAndDiscardProfile
)
;
this
.
getProfileAndStopProfiler
=
this
.
_wrapInAsyncQueue
(
this
.
getProfileAndStopProfiler
)
;
}
_wrapInAsyncQueue
(
fn
)
{
if
(
typeof
fn
!
=
=
"
function
"
)
{
throw
new
Error
(
"
_wrapInAsyncQueue
requires
a
function
"
)
;
}
return
(
.
.
.
args
)
=
>
{
return
new
Promise
(
resolve
=
>
{
this
.
_asyncQueue
.
push
(
(
)
=
>
{
resolve
(
fn
.
apply
(
this
args
)
)
;
}
)
;
}
)
;
}
;
}
flushAsyncQueue
(
)
{
const
pending
=
this
.
_asyncQueue
;
this
.
_asyncQueue
=
[
]
;
pending
.
forEach
(
fn
=
>
fn
(
)
)
;
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
}
startProfiler
(
)
{
this
.
_isActive
=
true
;
this
.
emit
(
"
profiler
-
started
"
)
;
}
getProfileAndStopProfiler
(
)
{
this
.
_isActive
=
false
;
this
.
emit
(
"
profiler
-
stopped
"
)
;
return
{
}
;
}
stopProfilerAndDiscardProfile
(
)
{
this
.
_isActive
=
false
;
this
.
emit
(
"
profiler
-
stopped
"
)
;
}
isActive
(
)
{
return
this
.
_isActive
;
}
isSupportedPlatform
(
)
{
return
this
.
mockIsSupported
;
}
isLockedForPrivateBrowsing
(
)
{
return
this
.
mockIsLocked
;
}
}
const
mockKeys
=
Object
.
getOwnPropertyNames
(
MockPerfFront
.
prototype
)
;
Object
.
getOwnPropertyNames
(
perfDescription
.
methods
)
.
forEach
(
methodName
=
>
{
if
(
!
mockKeys
.
includes
(
methodName
)
)
{
throw
new
Error
(
The
MockPerfFront
is
missing
the
method
"
{
methodName
}
"
from
the
+
"
actor
'
s
spec
.
It
should
be
added
to
the
mock
.
"
)
;
}
}
)
;
