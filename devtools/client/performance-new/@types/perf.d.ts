import
{
Reducer
as
ReduxReducer
Store
as
ReduxStore
}
from
"
devtools
/
client
/
shared
/
vendor
/
redux
"
;
export
interface
PanelWindow
{
gToolbox
?
:
any
;
gStore
?
:
Store
;
gInit
(
perfFront
:
PerfFront
pageContext
:
PageContext
)
:
Promise
<
void
>
;
gDestroy
(
)
:
void
;
gIsPanelDestroyed
?
:
boolean
;
}
export
interface
Target
{
client
:
any
;
}
export
interface
Toolbox
{
target
:
Target
;
}
export
interface
Commands
{
client
:
any
;
}
export
interface
PerfFront
{
startProfiler
:
(
options
:
RecordingSettings
)
=
>
Promise
<
boolean
>
;
getProfileAndStopProfiler
:
(
)
=
>
Promise
<
any
>
;
stopProfilerAndDiscardProfile
:
(
)
=
>
Promise
<
void
>
;
getSymbolTable
:
(
path
:
string
breakpadId
:
string
)
=
>
Promise
<
[
number
[
]
number
[
]
number
[
]
]
>
;
isActive
:
(
)
=
>
Promise
<
boolean
>
;
isSupportedPlatform
:
(
)
=
>
Promise
<
boolean
>
;
isLockedForPrivateBrowsing
:
(
)
=
>
Promise
<
boolean
>
;
on
:
(
type
:
string
listener
:
(
)
=
>
void
)
=
>
void
;
off
:
(
type
:
string
listener
:
(
)
=
>
void
)
=
>
void
;
destroy
:
(
)
=
>
void
;
getSupportedFeatures
:
(
)
=
>
Promise
<
string
[
]
>
;
}
export
interface
PreferenceFront
{
clearUserPref
:
(
prefName
:
string
)
=
>
Promise
<
void
>
;
getStringPref
:
(
prefName
:
string
)
=
>
Promise
<
string
>
;
setStringPref
:
(
prefName
:
string
value
:
string
)
=
>
Promise
<
void
>
;
getCharPref
:
(
prefName
:
string
)
=
>
Promise
<
string
>
;
setCharPref
:
(
prefName
:
string
value
:
string
)
=
>
Promise
<
void
>
;
getIntPref
:
(
prefName
:
string
)
=
>
Promise
<
number
>
;
setIntPref
:
(
prefName
:
string
value
:
number
)
=
>
Promise
<
void
>
;
}
export
type
RecordingState
=
|
"
not
-
yet
-
known
"
|
"
available
-
to
-
record
"
|
"
request
-
to
-
start
-
recording
"
|
"
request
-
to
-
get
-
profile
-
and
-
stop
-
profiler
"
|
"
request
-
to
-
stop
-
profiler
"
|
"
recording
"
|
"
locked
-
by
-
private
-
browsing
"
;
export
type
PageContext
=
|
"
devtools
"
|
"
devtools
-
remote
"
|
"
aboutprofiling
"
|
"
aboutprofiling
-
remote
"
;
export
type
PrefPostfix
=
"
"
|
"
.
remote
"
;
export
interface
State
{
recordingState
:
RecordingState
;
recordingUnexpectedlyStopped
:
boolean
;
isSupportedPlatform
:
boolean
|
null
;
recordingSettings
:
RecordingSettings
;
profilerViewMode
:
ProfilerViewMode
|
undefined
;
initializedValues
:
InitializedValues
|
null
;
promptEnvRestart
:
null
|
string
;
}
export
type
Selector
<
T
>
=
(
state
:
State
)
=
>
T
;
export
type
ThunkDispatch
=
<
Returns
>
(
action
:
ThunkAction
<
Returns
>
)
=
>
Returns
;
export
type
PlainDispatch
=
(
action
:
Action
)
=
>
Action
;
export
type
GetState
=
(
)
=
>
State
;
export
type
SymbolTableAsTuple
=
[
Uint32Array
Uint32Array
Uint8Array
]
;
export
type
Dispatch
=
PlainDispatch
&
ThunkDispatch
;
export
type
ThunkAction
<
Returns
>
=
(
{
dispatch
getState
}
:
{
dispatch
:
Dispatch
;
getState
:
GetState
;
}
)
=
>
Returns
;
export
interface
Library
{
start
:
number
;
end
:
number
;
offset
:
number
;
name
:
string
;
path
:
string
;
debugName
:
string
;
debugPath
:
string
;
breakpadId
:
string
;
arch
:
string
;
}
export
interface
MinimallyTypedGeckoProfile
{
libs
:
Library
[
]
;
processes
:
MinimallyTypedGeckoProfile
[
]
;
}
export
type
GetSymbolTableCallback
=
(
debugName
:
string
breakpadId
:
string
)
=
>
Promise
<
SymbolTableAsTuple
>
;
export
interface
SymbolicationService
{
getSymbolTable
:
GetSymbolTableCallback
;
querySymbolicationApi
:
(
path
:
string
requestJson
:
string
)
=
>
Promise
<
string
>
;
}
export
type
ReceiveProfile
=
(
geckoProfile
:
MinimallyTypedGeckoProfile
profilerViewMode
:
ProfilerViewMode
|
undefined
getSymbolTableCallback
:
GetSymbolTableCallback
)
=
>
void
;
export
type
RestartBrowserWithEnvironmentVariable
=
(
envName
:
string
value
:
string
)
=
>
void
;
export
type
OnProfileReceived
=
(
profile
:
MinimallyTypedGeckoProfile
profilerViewMode
:
ProfilerViewMode
|
undefined
)
=
>
void
;
export
type
GetEnvironmentVariable
=
(
envName
:
string
)
=
>
string
;
export
type
GetActiveBrowserID
=
(
)
=
>
number
;
interface
GeckoProfilerFrameScriptInterface
{
getProfile
:
(
)
=
>
Promise
<
MinimallyTypedGeckoProfile
>
;
getSymbolTable
:
GetSymbolTableCallback
;
}
export
interface
RecordingSettings
{
presetName
:
string
;
entries
:
number
;
interval
:
number
;
features
:
string
[
]
;
threads
:
string
[
]
;
objdirs
:
string
[
]
;
duration
?
:
number
;
}
export
type
Reducer
<
S
>
=
(
state
:
S
|
undefined
action
:
Action
)
=
>
S
;
export
interface
InitializedValues
{
presets
:
Presets
;
pageContext
:
PageContext
;
supportedFeatures
:
string
[
]
;
openRemoteDevTools
?
:
(
)
=
>
void
;
}
export
type
Store
=
ReduxStore
<
State
Action
>
;
export
type
Action
=
|
{
type
:
"
REPORT_PROFILER_READY
"
;
isActive
:
boolean
;
isLockedForPrivateBrowsing
:
boolean
;
}
|
{
type
:
"
REPORT_PROFILER_STARTED
"
;
}
|
{
type
:
"
REPORT_PROFILER_STOPPED
"
;
}
|
{
type
:
"
REPORT_PRIVATE_BROWSING_STARTED
"
;
}
|
{
type
:
"
REPORT_PRIVATE_BROWSING_STOPPED
"
;
}
|
{
type
:
"
REQUESTING_TO_START_RECORDING
"
;
}
|
{
type
:
"
REQUESTING_TO_STOP_RECORDING
"
;
}
|
{
type
:
"
REQUESTING_PROFILE
"
;
}
|
{
type
:
"
OBTAINED_PROFILE
"
;
}
|
{
type
:
"
CHANGE_INTERVAL
"
;
interval
:
number
;
}
|
{
type
:
"
CHANGE_ENTRIES
"
;
entries
:
number
;
}
|
{
type
:
"
CHANGE_FEATURES
"
;
features
:
string
[
]
;
promptEnvRestart
:
string
|
null
;
}
|
{
type
:
"
CHANGE_THREADS
"
;
threads
:
string
[
]
;
}
|
{
type
:
"
CHANGE_OBJDIRS
"
;
objdirs
:
string
[
]
;
}
|
{
type
:
"
INITIALIZE_STORE
"
;
isSupportedPlatform
:
boolean
;
presets
:
Presets
;
pageContext
:
PageContext
;
openRemoteDevTools
?
:
(
)
=
>
void
;
supportedFeatures
:
string
[
]
;
}
|
{
type
:
"
CHANGE_PRESET
"
;
presetName
:
string
;
preset
:
PresetDefinition
|
undefined
;
}
|
{
type
:
"
UPDATE_SETTINGS_FROM_PREFERENCES
"
;
recordingSettingsFromPreferences
:
RecordingSettings
;
}
;
export
interface
InitializeStoreValues
{
isSupportedPlatform
:
boolean
;
presets
:
Presets
;
pageContext
:
PageContext
;
supportedFeatures
:
string
[
]
;
openRemoteDevTools
?
:
(
)
=
>
void
;
}
export
type
PopupBackgroundFeatures
=
{
[
feature
:
string
]
:
boolean
}
;
export
interface
ContentFrameMessageManager
{
addMessageListener
:
(
event
:
string
listener
:
(
event
:
any
)
=
>
void
)
=
>
void
;
addEventListener
:
(
event
:
string
listener
:
(
event
:
any
)
=
>
void
)
=
>
void
;
sendAsyncMessage
:
(
name
:
string
data
:
any
)
=
>
void
;
}
export
interface
PerformancePref
{
Preset
:
"
devtools
.
performance
.
recording
.
preset
"
;
Entries
:
"
devtools
.
performance
.
recording
.
entries
"
;
Interval
:
"
devtools
.
performance
.
recording
.
interval
"
;
Features
:
"
devtools
.
performance
.
recording
.
features
"
;
Threads
:
"
devtools
.
performance
.
recording
.
threads
"
;
ObjDirs
:
"
devtools
.
performance
.
recording
.
objdirs
"
;
Duration
:
"
devtools
.
performance
.
recording
.
duration
"
;
UIBaseUrl
:
"
devtools
.
performance
.
recording
.
ui
-
base
-
url
"
;
UIBaseUrlPathPref
:
"
devtools
.
performance
.
recording
.
ui
-
base
-
url
-
path
"
;
PopupIntroDisplayed
:
"
devtools
.
performance
.
popup
.
intro
-
displayed
"
;
PopupFeatureFlag
:
"
devtools
.
performance
.
popup
.
feature
-
flag
"
;
}
export
type
NumberScaler
=
(
value
:
number
)
=
>
number
;
export
interface
ScaleFunctions
{
fromFractionToValue
:
NumberScaler
;
fromValueToFraction
:
NumberScaler
;
fromFractionToSingleDigitValue
:
NumberScaler
;
}
export
type
ProfilerViewMode
=
"
full
"
|
"
active
-
tab
"
|
"
origins
"
;
export
interface
PresetDefinition
{
label
:
string
;
description
:
string
;
entries
:
number
;
interval
:
number
;
features
:
string
[
]
;
threads
:
string
[
]
;
duration
:
number
;
profilerViewMode
?
:
ProfilerViewMode
;
}
export
interface
Presets
{
[
presetName
:
string
]
:
PresetDefinition
;
}
export
type
MessageFromFrontend
=
|
{
type
:
"
STATUS_QUERY
"
;
requestId
:
number
;
}
|
{
type
:
"
ENABLE_MENU_BUTTON
"
;
requestId
:
number
;
}
;
export
type
MessageToFrontend
=
|
{
type
:
"
STATUS_RESPONSE
"
;
menuButtonIsEnabled
:
boolean
;
requestId
:
number
;
}
|
{
type
:
"
ENABLE_MENU_BUTTON_DONE
"
;
requestId
:
number
;
}
;
export
class
ProfilerWebChannel
{
constructor
(
id
:
string
url
:
MockedExports
.
nsIURI
)
;
send
:
(
message
:
MessageToFrontend
target
:
MockedExports
.
WebChannelTarget
)
=
>
void
;
listen
:
(
handler
:
(
idle
:
string
message
:
MessageFromFrontend
target
:
MockedExports
.
WebChannelTarget
)
=
>
void
)
=
>
void
;
}
export
interface
FeatureDescription
{
name
:
string
;
value
:
string
;
title
:
string
;
recommended
?
:
boolean
;
experimental
?
:
boolean
;
disabledReason
?
:
string
;
}
export
type
LibInfoMapKey
=
string
;
export
type
LibInfoMapValue
=
{
name
:
string
;
path
:
string
;
debugName
:
string
;
debugPath
:
string
;
breakpadId
:
string
;
arch
:
string
;
}
;
export
type
SymbolicationWorkerInitialMessage
=
{
request
:
SymbolicationWorkerRequest
;
libInfoMap
:
Map
<
LibInfoMapKey
LibInfoMapValue
>
;
objdirs
:
string
[
]
;
module
:
WebAssembly
.
Module
;
}
;
export
type
SymbolicationWorkerRequest
=
|
{
type
:
"
GET_SYMBOL_TABLE
"
;
debugName
:
string
;
breakpadId
:
string
;
}
|
{
type
:
"
QUERY_SYMBOLICATION_API
"
;
path
:
string
;
requestJson
:
string
;
}
;
export
type
SymbolicationWorkerError
=
{
name
:
string
;
message
:
string
;
fileName
?
:
string
;
lineNumber
?
:
number
;
}
;
export
type
SymbolicationWorkerReplyData
<
R
>
=
|
{
result
:
R
;
}
|
{
error
:
SymbolicationWorkerError
;
}
;
export
interface
FileHandle
{
getLength
:
(
)
=
>
number
;
readBytesInto
:
(
dest
:
Uint8Array
offset
:
number
)
=
>
void
;
drop
:
(
)
=
>
void
;
}
