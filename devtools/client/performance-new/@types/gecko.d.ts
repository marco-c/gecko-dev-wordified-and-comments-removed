declare
namespace
MockedExports
{
interface
KnownModules
{
Services
:
typeof
import
(
"
Services
"
)
;
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
"
resource
:
/
/
/
modules
/
CustomizableUI
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
sys
.
mjs
"
)
;
"
resource
:
/
/
/
modules
/
CustomizableWidgets
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
/
modules
/
CustomizableWidgets
.
sys
.
mjs
"
)
;
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
)
;
"
resource
:
/
/
devtools
/
shared
/
performance
-
new
/
errors
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
devtools
/
shared
/
performance
-
new
/
errors
.
sys
.
mjs
"
)
;
"
resource
:
/
/
devtools
/
shared
/
performance
-
new
/
prefs
-
presets
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
devtools
/
shared
/
performance
-
new
/
prefs
-
presets
.
sys
.
mjs
"
)
;
"
resource
:
/
/
devtools
/
shared
/
performance
-
new
/
recording
-
utils
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
devtools
/
shared
/
performance
-
new
/
recording
-
utils
.
sys
.
mjs
"
)
;
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
shared
/
background
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
shared
/
background
.
sys
.
mjs
"
)
;
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
shared
/
symbolication
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
shared
/
symbolication
.
sys
.
mjs
"
)
;
"
resource
:
/
/
devtools
/
shared
/
loader
/
browser
-
loader
.
sys
.
mjs
"
:
any
;
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
menu
-
button
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
menu
-
button
.
sys
.
mjs
"
)
;
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
shared
/
typescript
-
lazy
-
load
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
shared
/
typescript
-
lazy
-
load
.
sys
.
mjs
"
)
;
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
logic
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
logic
.
sys
.
mjs
"
)
;
"
resource
:
/
/
/
modules
/
PanelMultiView
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
/
modules
/
PanelMultiView
.
sys
.
mjs
"
)
;
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
sys
.
mjs
"
:
typeof
import
(
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
sys
.
mjs
"
)
;
}
interface
ChromeUtils
{
importESModule
:
<
S
extends
keyof
KnownModules
>
(
module
:
S
)
=
>
KnownModules
[
S
]
;
defineESModuleGetters
:
(
target
:
any
mappings
:
any
)
=
>
void
;
}
interface
MessageManager
{
loadFrameScript
(
url
:
string
flag
:
boolean
)
:
void
;
sendAsyncMessage
:
(
event
:
string
data
:
any
)
=
>
void
;
addMessageListener
:
(
event
:
string
listener
:
(
event
:
any
)
=
>
void
)
=
>
void
;
}
interface
Browser
{
addWebTab
:
(
url
:
string
options
:
any
)
=
>
BrowserTab
;
contentPrincipal
:
any
;
selectedTab
:
BrowserTab
;
selectedBrowser
?
:
ChromeBrowser
;
messageManager
:
MessageManager
;
ownerDocument
?
:
ChromeDocument
;
tabs
:
BrowserTab
[
]
;
}
interface
BrowserTab
{
linkedBrowser
:
ChromeBrowser
;
}
interface
BrowserWindow
extends
Window
{
gBrowser
:
Browser
;
focus
(
)
:
void
;
}
interface
ChromeBrowser
{
browsingContext
?
:
BrowsingContext
;
browserId
:
number
;
}
interface
BrowsingContext
{
browserId
:
number
;
}
type
GetPref
<
T
>
=
(
prefName
:
string
defaultValue
?
:
T
)
=
>
T
;
type
SetPref
<
T
>
=
(
prefName
:
string
value
?
:
T
)
=
>
T
;
type
nsIPrefBranch
=
{
clearUserPref
:
(
prefName
:
string
)
=
>
void
;
getStringPref
:
GetPref
<
string
>
;
setStringPref
:
SetPref
<
string
>
;
getCharPref
:
GetPref
<
string
>
;
setCharPref
:
SetPref
<
string
>
;
getIntPref
:
GetPref
<
number
>
;
setIntPref
:
SetPref
<
number
>
;
getBoolPref
:
GetPref
<
boolean
>
;
setBoolPref
:
SetPref
<
boolean
>
;
addObserver
:
(
aDomain
:
string
aObserver
:
PrefObserver
aHoldWeak
?
:
boolean
)
=
>
void
;
removeObserver
:
(
aDomain
:
string
aObserver
:
PrefObserver
)
=
>
void
;
}
;
type
PrefObserverFunction
=
(
aSubject
:
nsIPrefBranch
aTopic
:
"
nsPref
:
changed
"
aData
:
string
)
=
>
unknown
;
type
PrefObserver
=
PrefObserverFunction
|
{
observe
:
PrefObserverFunction
}
;
interface
nsIURI
{
}
interface
SharedLibrary
{
start
:
number
;
end
:
number
;
offset
:
number
;
name
:
string
;
path
:
string
;
debugName
:
string
;
debugPath
:
string
;
breakpadId
:
string
;
arch
:
string
;
}
interface
ProfileGenerationAdditionalInformation
{
sharedLibraries
:
SharedLibrary
[
]
;
}
interface
ProfileAndAdditionalInformation
{
profile
:
ArrayBuffer
;
additionalInformation
?
:
ProfileGenerationAdditionalInformation
;
}
type
Services
=
{
env
:
{
set
:
(
name
:
string
value
:
string
)
=
>
void
;
get
:
(
name
:
string
)
=
>
string
;
exists
:
(
name
:
string
)
=
>
boolean
;
}
;
prefs
:
nsIPrefBranch
;
profiler
:
{
StartProfiler
:
(
entryCount
:
number
interval
:
number
features
:
string
[
]
filters
?
:
string
[
]
activeTabId
?
:
number
duration
?
:
number
)
=
>
void
;
StopProfiler
:
(
)
=
>
void
;
IsPaused
:
(
)
=
>
boolean
;
Pause
:
(
)
=
>
void
;
Resume
:
(
)
=
>
void
;
IsSamplingPaused
:
(
)
=
>
boolean
;
PauseSampling
:
(
)
=
>
void
;
ResumeSampling
:
(
)
=
>
void
;
GetFeatures
:
(
)
=
>
string
[
]
;
getProfileDataAsync
:
(
sinceTime
?
:
number
)
=
>
Promise
<
object
>
;
getProfileDataAsArrayBuffer
:
(
sinceTime
?
:
number
)
=
>
Promise
<
ArrayBuffer
>
;
getProfileDataAsGzippedArrayBuffer
:
(
sinceTime
?
:
number
)
=
>
Promise
<
ProfileAndAdditionalInformation
>
;
IsActive
:
(
)
=
>
boolean
;
sharedLibraries
:
SharedLibrary
[
]
;
}
;
platform
:
string
;
obs
:
{
addObserver
:
(
observer
:
object
type
:
string
)
=
>
void
;
removeObserver
:
(
observer
:
object
type
:
string
)
=
>
void
;
}
;
wm
:
{
getMostRecentWindow
:
(
name
:
string
)
=
>
BrowserWindow
;
getMostRecentNonPBWindow
:
(
name
:
string
)
=
>
BrowserWindow
;
}
;
focus
:
{
activeWindow
:
BrowserWindow
;
}
;
io
:
{
newURI
(
url
:
string
)
:
nsIURI
;
}
;
scriptSecurityManager
:
any
;
startup
:
{
quit
:
(
optionsBitmask
:
number
)
=
>
void
;
eForceQuit
:
number
;
eRestart
:
number
;
}
;
}
;
const
EventEmitter
:
{
decorate
:
(
target
:
object
)
=
>
void
;
}
;
const
AppConstantsSYSMJS
:
{
AppConstants
:
{
platform
:
string
;
}
;
}
;
interface
BrowsingContextStub
{
}
interface
PrincipalStub
{
}
interface
WebChannelTarget
{
browsingContext
:
BrowsingContextStub
;
browser
:
Browser
;
eventTarget
:
null
;
principal
:
PrincipalStub
;
}
interface
FaviconData
{
uri
:
nsIURI
;
rawData
:
number
[
]
;
mimeType
:
string
;
width
:
number
;
}
const
PlaceUtilsSYSMJS
:
{
PlacesUtils
:
{
favicons
:
{
getFaviconForPage
:
(
pageUrl
:
nsIURI
preferredWidth
?
:
number
)
=
>
Promise
<
FaviconData
>
;
}
toURI
:
(
string
|
URL
|
nsIURI
)
=
>
nsIURI
}
;
}
;
const
CustomizableUISYSMJS
:
any
;
const
CustomizableWidgetsSYSMJS
:
any
;
const
PanelMultiViewSYSMJS
:
any
;
const
LoaderESM
:
{
require
:
(
path
:
string
)
=
>
any
;
}
;
const
Services
:
Services
;
class
nsIFilePicker
{
}
interface
FilePicker
{
init
:
(
browsingContext
:
BrowsingContext
title
:
string
mode
:
number
)
=
>
void
;
open
:
(
callback
:
(
rv
:
number
)
=
>
unknown
)
=
>
void
;
modeGetFolder
:
number
;
returnOK
:
number
;
file
:
{
path
:
string
;
}
;
}
interface
Cc
{
"
mozilla
.
org
/
filepicker
;
1
"
:
{
createInstance
(
instance
:
nsIFilePicker
)
:
FilePicker
;
}
;
}
interface
Ci
{
nsIFilePicker
:
nsIFilePicker
;
}
interface
Cu
{
exportFunction
:
(
fn
:
Function
scope
:
object
options
?
:
object
)
=
>
void
;
cloneInto
:
(
value
:
any
scope
:
object
options
?
:
object
)
=
>
void
;
isInAutomation
:
boolean
;
}
interface
FluentLocalization
{
setAttributes
(
target
:
Element
id
?
:
string
args
?
:
Record
<
string
string
>
)
:
void
;
}
}
interface
PathUtilsInterface
{
split
:
(
path
:
string
)
=
>
string
[
]
;
isAbsolute
:
(
path
:
string
)
=
>
boolean
;
}
declare
module
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
mjs
"
{
import
*
as
React
from
"
react
"
;
export
=
React
;
}
declare
module
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
.
mjs
"
{
import
*
as
ReactDOM
from
"
react
-
dom
"
;
export
=
ReactDOM
;
}
declare
module
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
{
import
*
as
ReactDomFactories
from
"
react
-
dom
-
factories
"
;
export
=
ReactDomFactories
;
}
declare
module
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
redux
.
js
"
{
import
*
as
Redux
from
"
redux
"
;
export
=
Redux
;
}
declare
module
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
redux
.
js
"
{
import
*
as
ReactRedux
from
"
react
-
redux
"
;
export
=
ReactRedux
;
}
declare
module
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter2
.
js
"
{
export
=
MockedExports
.
EventEmitter
;
}
declare
module
"
Services
"
{
export
=
MockedExports
.
Services
;
}
declare
module
"
ChromeUtils
"
{
export
=
ChromeUtils
;
}
declare
module
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
{
export
=
MockedExports
.
AppConstantsSYSMJS
;
}
declare
module
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
shared
/
background
.
sys
.
mjs
"
{
import
*
as
Background
from
"
devtools
/
client
/
performance
-
new
/
shared
/
background
.
sys
.
mjs
"
;
export
=
Background
;
}
declare
module
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
shared
/
symbolication
.
sys
.
mjs
"
{
import
*
as
PerfSymbolication
from
"
devtools
/
client
/
performance
-
new
/
shared
/
symbolication
.
sys
.
mjs
"
;
export
=
PerfSymbolication
;
}
declare
module
"
resource
:
/
/
/
modules
/
CustomizableUI
.
sys
.
mjs
"
{
export
=
MockedExports
.
CustomizableUISYSMJS
;
}
declare
module
"
resource
:
/
/
/
modules
/
CustomizableWidgets
.
sys
.
mjs
"
{
export
=
MockedExports
.
CustomizableWidgetsSYSMJS
;
}
declare
module
"
resource
:
/
/
/
modules
/
PanelMultiView
.
sys
.
mjs
"
{
export
=
MockedExports
.
PanelMultiViewSYSMJS
;
}
declare
module
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
{
export
=
MockedExports
.
LoaderESM
;
}
declare
module
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
sys
.
mjs
"
{
export
=
MockedExports
.
PlaceUtilsSYSMJS
;
}
declare
var
ChromeUtils
:
MockedExports
.
ChromeUtils
;
declare
var
PathUtils
:
PathUtilsInterface
;
declare
var
Cu
:
MockedExports
.
Cu
;
declare
var
Cc
:
MockedExports
.
Cc
;
declare
var
Ci
:
MockedExports
.
Ci
;
declare
var
Services
:
MockedExports
.
Services
;
declare
interface
ChromeDocument
extends
Document
{
createXULElement
:
(
(
type
:
"
iframe
"
)
=
>
XULIframeElement
)
&
(
(
type
:
string
)
=
>
XULElement
)
;
l10n
:
MockedExports
.
FluentLocalization
;
}
declare
interface
ChromeHTMLElement
extends
HTMLElement
{
ownerDocument
:
ChromeDocument
;
}
declare
interface
XULElement
extends
HTMLElement
{
ownerDocument
:
ChromeDocument
;
}
declare
interface
XULIframeElement
extends
XULElement
{
contentWindow
:
Window
;
src
:
string
;
}
declare
interface
Window
{
browsingContext
:
MockedExports
.
BrowsingContext
;
openWebLinkIn
:
(
url
:
string
where
:
"
current
"
|
"
tab
"
|
"
tabshifted
"
|
"
window
"
|
"
save
"
options
?
:
Partial
<
{
userContextId
:
number
;
forceNonPrivate
:
boolean
;
relatedToCurrent
:
boolean
;
resolveOnContentBrowserCreated
:
(
contentBrowser
:
MockedExports
.
ChromeBrowser
)
=
>
unknown
;
}
>
)
=
>
void
;
openTrustedLinkIn
:
(
url
:
string
where
:
"
current
"
|
"
tab
"
|
"
tabshifted
"
|
"
window
"
|
"
save
"
options
?
:
Partial
<
{
userContextId
:
number
;
forceNonPrivate
:
boolean
;
relatedToCurrent
:
boolean
;
resolveOnContentBrowserCreated
:
(
contentBrowser
:
MockedExports
.
ChromeBrowser
)
=
>
unknown
;
}
>
)
=
>
void
;
}
declare
class
ChromeWorker
extends
Worker
{
}
declare
interface
MenuListElement
extends
XULElement
{
value
:
string
;
disabled
:
boolean
;
}
declare
interface
XULCommandEvent
extends
Event
{
target
:
XULElement
;
}
declare
interface
XULElementWithCommandHandler
{
addEventListener
:
(
type
:
"
command
"
handler
:
(
event
:
XULCommandEvent
)
=
>
void
isCapture
?
:
boolean
)
=
>
void
;
removeEventListener
:
(
type
:
"
command
"
handler
:
(
event
:
XULCommandEvent
)
=
>
void
isCapture
?
:
boolean
)
=
>
void
;
}
declare
type
nsIPrefBranch
=
MockedExports
.
nsIPrefBranch
;
interface
Function
{
isInstance
(
obj
:
any
)
:
boolean
;
}
