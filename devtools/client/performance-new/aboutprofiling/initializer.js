"
use
strict
"
;
{
const
{
BrowserLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
)
;
const
browserLoader
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
aboutprofiling
"
window
}
)
;
const
scope
=
this
;
scope
.
require
=
browserLoader
.
require
;
scope
.
loader
=
browserLoader
.
loader
;
}
const
{
getRecordingPreferences
setRecordingPreferences
getSymbolsFromThisBrowser
presets
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
background
.
jsm
.
js
"
)
;
const
{
receiveProfile
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
browser
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
AboutProfiling
=
React
.
createFactory
(
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
AboutProfiling
"
)
)
;
const
ProfilerEventHandling
=
React
.
createFactory
(
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
ProfilerEventHandling
"
)
)
;
const
createStore
=
require
(
"
devtools
/
client
/
shared
/
redux
/
create
-
store
"
)
;
const
reducers
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
reducers
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
actions
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
ActorReadyGeckoProfilerInterface
}
=
require
(
"
devtools
/
shared
/
performance
-
new
/
gecko
-
profiler
-
interface
"
)
;
async
function
gInit
(
perfFront
pageContext
openRemoteDevTools
)
{
const
store
=
createStore
(
reducers
)
;
const
supportedFeatures
=
await
perfFront
.
getSupportedFeatures
(
)
;
store
.
dispatch
(
actions
.
initializeStore
(
{
perfFront
receiveProfile
supportedFeatures
presets
recordingPreferences
:
getRecordingPreferences
(
pageContext
supportedFeatures
)
setRecordingPreferences
:
newRecordingPreferences
=
>
setRecordingPreferences
(
pageContext
newRecordingPreferences
)
getSymbolTableGetter
:
(
)
=
>
{
return
(
debugName
breakpadId
)
=
>
getSymbolsFromThisBrowser
(
pageContext
debugName
breakpadId
)
;
}
pageContext
openRemoteDevTools
}
)
)
;
ReactDOM
.
render
(
React
.
createElement
(
Provider
{
store
}
React
.
createElement
(
React
.
Fragment
null
ProfilerEventHandling
(
)
AboutProfiling
(
)
)
)
document
.
querySelector
(
"
#
root
"
)
)
;
window
.
addEventListener
(
"
unload
"
function
(
)
{
if
(
pageContext
!
=
=
"
aboutprofiling
-
remote
"
)
{
perfFront
.
destroy
(
)
;
}
}
)
;
}
if
(
window
.
location
.
hash
!
=
=
"
#
remote
"
)
{
document
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
gInit
(
new
ActorReadyGeckoProfilerInterface
(
)
"
aboutprofiling
"
)
;
}
)
;
}
