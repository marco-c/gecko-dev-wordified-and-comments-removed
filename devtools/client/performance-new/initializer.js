"
use
strict
"
;
{
const
{
BrowserLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
)
;
const
browserLoader
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
"
window
}
)
;
const
scope
=
this
;
scope
.
require
=
browserLoader
.
require
;
scope
.
loader
=
browserLoader
.
loader
;
}
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
{
FluentL10n
}
=
require
(
"
devtools
/
client
/
shared
/
fluent
-
l10n
/
fluent
-
l10n
"
)
;
const
Provider
=
React
.
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
.
Provider
)
;
const
LocalizationProvider
=
React
.
createFactory
(
FluentReact
.
LocalizationProvider
)
;
const
DevToolsPanel
=
React
.
createFactory
(
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
DevToolsPanel
"
)
)
;
const
ProfilerEventHandling
=
React
.
createFactory
(
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
ProfilerEventHandling
"
)
)
;
const
createStore
=
require
(
"
devtools
/
client
/
shared
/
redux
/
create
-
store
"
)
;
const
selectors
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
selectors
"
)
;
const
reducers
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
reducers
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
actions
"
)
;
const
{
openProfilerAndDisplayProfile
sharedLibrariesFromProfile
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
browser
"
)
;
const
{
createLocalSymbolicationService
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
symbolication
.
jsm
.
js
"
)
;
const
{
setRecordingSettings
presets
getRecordingSettings
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
background
.
jsm
.
js
"
)
;
async
function
gInit
(
perfFront
pageContext
openAboutProfiling
)
{
const
store
=
createStore
(
reducers
)
;
const
isSupportedPlatform
=
await
perfFront
.
isSupportedPlatform
(
)
;
const
supportedFeatures
=
await
perfFront
.
getSupportedFeatures
(
)
;
if
(
!
openAboutProfiling
)
{
openAboutProfiling
=
(
)
=
>
{
const
{
openTrustedLink
}
=
require
(
"
devtools
/
client
/
shared
/
link
"
)
;
openTrustedLink
(
"
about
:
profiling
"
{
}
)
;
}
;
}
{
const
anyWindow
=
(
window
)
;
const
panelWindow
=
(
anyWindow
)
;
const
anyStore
=
(
store
)
;
panelWindow
.
gStore
=
anyStore
;
}
const
l10n
=
new
FluentL10n
(
)
;
await
l10n
.
init
(
[
"
devtools
/
client
/
perftools
.
ftl
"
"
devtools
/
client
/
toolbox
-
options
.
ftl
"
"
browser
/
branding
/
brandings
.
ftl
"
]
)
;
store
.
dispatch
(
actions
.
initializeStore
(
{
isSupportedPlatform
recordingSettings
:
getRecordingSettings
(
pageContext
supportedFeatures
)
presets
supportedFeatures
pageContext
:
"
devtools
"
setRecordingSettings
:
newRecordingSettings
=
>
setRecordingSettings
(
pageContext
newRecordingSettings
)
}
)
)
;
const
onProfileReceived
=
(
profile
profilerViewMode
)
=
>
{
const
objdirs
=
selectors
.
getObjdirs
(
store
.
getState
(
)
)
;
const
sharedLibraries
=
sharedLibrariesFromProfile
(
profile
)
;
const
symbolicationService
=
createLocalSymbolicationService
(
sharedLibraries
objdirs
perfFront
)
;
openProfilerAndDisplayProfile
(
profile
profilerViewMode
symbolicationService
)
;
}
;
const
onEditSettingsLinkClicked
=
openAboutProfiling
;
ReactDOM
.
render
(
Provider
(
{
store
}
LocalizationProvider
(
{
bundles
:
l10n
.
getBundles
(
)
}
React
.
createElement
(
React
.
Fragment
null
ProfilerEventHandling
(
{
perfFront
}
)
DevToolsPanel
(
{
perfFront
onProfileReceived
onEditSettingsLinkClicked
}
)
)
)
)
document
.
querySelector
(
"
#
root
"
)
)
;
}
function
gDestroy
(
)
{
ReactDOM
.
unmountComponentAtNode
(
document
.
querySelector
(
"
#
root
"
)
)
;
}
