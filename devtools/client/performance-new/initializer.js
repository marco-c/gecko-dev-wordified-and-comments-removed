"
use
strict
"
;
const
{
BrowserLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
)
;
const
{
require
}
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
"
window
}
)
;
const
Perf
=
require
(
"
devtools
/
client
/
performance
-
new
/
components
/
Perf
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
createStore
=
require
(
"
devtools
/
client
/
shared
/
redux
/
create
-
store
"
)
(
)
;
const
selectors
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
selectors
"
)
;
const
reducers
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
reducers
"
)
;
const
actions
=
require
(
"
devtools
/
client
/
performance
-
new
/
store
/
actions
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
receiveProfile
getRecordingPreferences
setRecordingPreferences
}
=
require
(
"
devtools
/
client
/
performance
-
new
/
browser
"
)
;
async
function
gInit
(
perfFront
preferenceFront
)
{
const
store
=
createStore
(
reducers
)
;
store
.
dispatch
(
actions
.
initializeStore
(
{
perfFront
receiveProfile
recordingSettingsFromPreferences
:
await
getRecordingPreferences
(
preferenceFront
selectors
.
getRecordingSettings
(
store
.
getState
(
)
)
)
setRecordingPreferences
:
(
)
=
>
setRecordingPreferences
(
preferenceFront
selectors
.
getRecordingSettings
(
store
.
getState
(
)
)
)
}
)
)
;
ReactDOM
.
render
(
React
.
createElement
(
Provider
{
store
}
React
.
createElement
(
Perf
)
)
document
.
querySelector
(
"
#
root
"
)
)
;
}
function
gDestroy
(
)
{
ReactDOM
.
unmountComponentAtNode
(
document
.
querySelector
(
"
#
root
"
)
)
;
}
