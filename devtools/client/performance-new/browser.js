"
use
strict
"
;
function
requireLazy
(
callback
)
{
let
cache
;
return
(
)
=
>
{
if
(
cache
=
=
=
undefined
)
{
cache
=
callback
(
)
;
}
return
cache
;
}
;
}
const
lazyServices
=
requireLazy
(
(
)
=
>
require
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
)
;
const
lazyChrome
=
requireLazy
(
(
)
=
>
require
(
"
chrome
"
)
)
;
const
lazyOS
=
requireLazy
(
(
)
=
>
require
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
)
;
const
lazyProfilerGetSymbols
=
requireLazy
(
(
)
=
>
require
(
"
resource
:
/
/
gre
/
modules
/
ProfilerGetSymbols
.
jsm
"
)
)
;
const
TRANSFER_EVENT
=
"
devtools
:
perf
-
html
-
transfer
-
profile
"
;
const
SYMBOL_TABLE_REQUEST_EVENT
=
"
devtools
:
perf
-
html
-
request
-
symbol
-
table
"
;
const
SYMBOL_TABLE_RESPONSE_EVENT
=
"
devtools
:
perf
-
html
-
reply
-
symbol
-
table
"
;
const
ENTRIES_PREF
=
"
devtools
.
performance
.
recording
.
entries
"
;
const
INTERVAL_PREF
=
"
devtools
.
performance
.
recording
.
interval
"
;
const
FEATURES_PREF
=
"
devtools
.
performance
.
recording
.
features
"
;
const
THREADS_PREF
=
"
devtools
.
performance
.
recording
.
threads
"
;
const
OBJDIRS_PREF
=
"
devtools
.
performance
.
recording
.
objdirs
"
;
const
UI_BASE_URL_PREF
=
"
devtools
.
performance
.
recording
.
ui
-
base
-
url
"
;
const
UI_BASE_URL_PATH_PREF
=
"
devtools
.
performance
.
recording
.
ui
-
base
-
url
-
path
"
;
const
UI_BASE_URL_DEFAULT
=
"
https
:
/
/
profiler
.
firefox
.
com
"
;
const
UI_BASE_URL_PATH_DEFAULT
=
"
/
from
-
addon
"
;
function
receiveProfile
(
profile
getSymbolTableCallback
)
{
const
{
Services
}
=
lazyServices
(
)
;
const
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
win
)
{
throw
new
Error
(
"
No
browser
window
"
)
;
}
const
browser
=
win
.
gBrowser
;
Services
.
focus
.
activeWindow
=
win
;
const
baseUrl
=
Services
.
prefs
.
getStringPref
(
UI_BASE_URL_PREF
UI_BASE_URL_DEFAULT
)
;
const
baseUrlPath
=
Services
.
prefs
.
getStringPref
(
UI_BASE_URL_PATH_PREF
UI_BASE_URL_PATH_DEFAULT
)
;
const
tab
=
browser
.
addWebTab
(
{
baseUrl
}
{
baseUrlPath
}
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
userContextId
:
browser
.
contentPrincipal
.
userContextId
}
)
}
)
;
browser
.
selectedTab
=
tab
;
const
mm
=
tab
.
linkedBrowser
.
messageManager
;
mm
.
loadFrameScript
(
"
chrome
:
/
/
devtools
/
content
/
performance
-
new
/
frame
-
script
.
js
"
false
)
;
mm
.
sendAsyncMessage
(
TRANSFER_EVENT
profile
)
;
mm
.
addMessageListener
(
SYMBOL_TABLE_REQUEST_EVENT
e
=
>
{
const
{
debugName
breakpadId
}
=
e
.
data
;
getSymbolTableCallback
(
debugName
breakpadId
)
.
then
(
result
=
>
{
const
[
addr
index
buffer
]
=
result
;
mm
.
sendAsyncMessage
(
SYMBOL_TABLE_RESPONSE_EVENT
{
status
:
"
success
"
debugName
breakpadId
result
:
[
addr
index
buffer
]
}
)
;
}
error
=
>
{
const
{
name
message
lineNumber
fileName
}
=
error
;
mm
.
sendAsyncMessage
(
SYMBOL_TABLE_RESPONSE_EVENT
{
status
:
"
error
"
debugName
breakpadId
error
:
{
name
message
lineNumber
fileName
}
}
)
;
}
)
;
}
)
;
}
async
function
_getArrayOfStringsPref
(
preferenceFront
prefName
)
{
const
text
=
await
preferenceFront
.
getCharPref
(
prefName
)
;
return
JSON
.
parse
(
text
)
;
}
async
function
_getArrayOfStringsHostPref
(
prefName
)
{
const
{
Services
}
=
lazyServices
(
)
;
const
text
=
Services
.
prefs
.
getStringPref
(
prefName
)
;
return
JSON
.
parse
(
text
)
;
}
async
function
_getIntPref
(
preferenceFront
prefName
)
{
return
preferenceFront
.
getIntPref
(
prefName
)
;
}
async
function
getRecordingPreferencesFromDebuggee
(
preferenceFront
)
{
const
[
entries
interval
features
threads
objdirs
]
=
await
Promise
.
all
(
[
_getIntPref
(
preferenceFront
ENTRIES_PREF
)
_getIntPref
(
preferenceFront
INTERVAL_PREF
)
_getArrayOfStringsPref
(
preferenceFront
FEATURES_PREF
)
_getArrayOfStringsPref
(
preferenceFront
THREADS_PREF
)
_getArrayOfStringsHostPref
(
OBJDIRS_PREF
)
]
)
;
return
{
entries
interval
features
threads
objdirs
}
;
}
async
function
setRecordingPreferencesOnDebuggee
(
preferenceFront
prefs
)
{
const
{
Services
}
=
lazyServices
(
)
;
await
Promise
.
all
(
[
preferenceFront
.
setIntPref
(
ENTRIES_PREF
prefs
.
entries
)
preferenceFront
.
setIntPref
(
INTERVAL_PREF
prefs
.
interval
)
preferenceFront
.
setCharPref
(
FEATURES_PREF
JSON
.
stringify
(
prefs
.
features
)
)
preferenceFront
.
setCharPref
(
THREADS_PREF
JSON
.
stringify
(
prefs
.
threads
)
)
Services
.
prefs
.
setCharPref
(
OBJDIRS_PREF
JSON
.
stringify
(
prefs
.
objdirs
)
)
]
)
;
}
function
createLibraryMap
(
profile
)
{
const
map
=
new
Map
(
)
;
function
fillMapForProcessRecursive
(
processProfile
)
{
for
(
const
lib
of
processProfile
.
libs
)
{
const
{
debugName
breakpadId
}
=
lib
;
const
key
=
[
debugName
breakpadId
]
.
join
(
"
:
"
)
;
map
.
set
(
key
lib
)
;
}
for
(
const
subprocess
of
processProfile
.
processes
)
{
fillMapForProcessRecursive
(
subprocess
)
;
}
}
fillMapForProcessRecursive
(
profile
)
;
return
function
getLibraryFor
(
debugName
breakpadId
)
{
const
key
=
[
debugName
breakpadId
]
.
join
(
"
:
"
)
;
return
map
.
get
(
key
)
;
}
;
}
async
function
getSymbolTableFromDebuggee
(
perfFront
path
breakpadId
)
{
const
[
addresses
index
buffer
]
=
await
perfFront
.
getSymbolTable
(
path
breakpadId
)
;
return
[
new
Uint32Array
(
addresses
)
new
Uint32Array
(
index
)
new
Uint8Array
(
buffer
)
]
;
}
async
function
doesFileExistAtPath
(
path
)
{
const
{
OS
}
=
lazyOS
(
)
;
try
{
const
result
=
await
OS
.
File
.
stat
(
path
)
;
return
!
result
.
isDir
;
}
catch
(
e
)
{
if
(
e
instanceof
OS
.
File
.
Error
&
&
e
.
becauseNoSuchFile
)
{
return
false
;
}
throw
e
;
}
}
async
function
getSymbolTableFromLocalBinary
(
objdirs
filename
breakpadId
)
{
const
{
OS
}
=
lazyOS
(
)
;
const
candidatePaths
=
[
]
;
for
(
const
objdirPath
of
objdirs
)
{
candidatePaths
.
push
(
OS
.
Path
.
join
(
objdirPath
"
dist
"
"
bin
"
filename
)
)
;
candidatePaths
.
push
(
OS
.
Path
.
join
(
objdirPath
filename
)
)
;
}
for
(
const
path
of
candidatePaths
)
{
if
(
await
doesFileExistAtPath
(
path
)
)
{
const
{
ProfilerGetSymbols
}
=
lazyProfilerGetSymbols
(
)
;
try
{
return
await
ProfilerGetSymbols
.
getSymbolTable
(
path
path
breakpadId
)
;
}
catch
(
e
)
{
}
}
}
throw
new
Error
(
"
Could
not
find
any
matching
binary
.
"
)
;
}
function
createMultiModalGetSymbolTableFn
(
profile
getObjdirs
perfFront
)
{
const
libraryGetter
=
createLibraryMap
(
profile
)
;
return
async
function
getSymbolTable
(
debugName
breakpadId
)
{
const
result
=
libraryGetter
(
debugName
breakpadId
)
;
if
(
!
result
)
{
throw
new
Error
(
Could
not
find
the
library
for
"
{
debugName
}
"
"
{
breakpadId
}
"
.
)
;
}
const
{
name
path
debugPath
}
=
result
;
if
(
await
doesFileExistAtPath
(
path
)
)
{
const
{
ProfilerGetSymbols
}
=
lazyProfilerGetSymbols
(
)
;
return
ProfilerGetSymbols
.
getSymbolTable
(
path
debugPath
breakpadId
)
;
}
try
{
const
objdirs
=
getObjdirs
(
)
;
return
await
getSymbolTableFromLocalBinary
(
objdirs
name
breakpadId
)
;
}
catch
(
e
)
{
return
getSymbolTableFromDebuggee
(
perfFront
path
breakpadId
)
;
}
}
;
}
function
restartBrowserWithEnvironmentVariable
(
envName
value
)
{
const
{
Services
}
=
lazyServices
(
)
;
const
{
Cc
Ci
}
=
lazyChrome
(
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
env
.
set
(
envName
value
)
;
Services
.
startup
.
quit
(
Services
.
startup
.
eForceQuit
|
Services
.
startup
.
eRestart
)
;
}
function
getEnvironmentVariable
(
envName
)
{
const
{
Cc
Ci
}
=
lazyChrome
(
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
return
env
.
get
(
envName
)
;
}
function
openFilePickerForObjdir
(
window
objdirs
changeObjdirs
)
{
const
{
Cc
Ci
}
=
lazyChrome
(
)
;
const
FilePicker
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
Ci
.
nsIFilePicker
)
;
FilePicker
.
init
(
window
"
Pick
build
directory
"
FilePicker
.
modeGetFolder
)
;
FilePicker
.
open
(
rv
=
>
{
if
(
rv
=
=
FilePicker
.
returnOK
)
{
const
path
=
FilePicker
.
file
.
path
;
if
(
path
&
&
!
objdirs
.
includes
(
path
)
)
{
const
newObjdirs
=
[
.
.
.
objdirs
path
]
;
changeObjdirs
(
newObjdirs
)
;
}
}
}
)
;
}
module
.
exports
=
{
receiveProfile
getRecordingPreferencesFromDebuggee
setRecordingPreferencesOnDebuggee
createMultiModalGetSymbolTableFn
restartBrowserWithEnvironmentVariable
getEnvironmentVariable
openFilePickerForObjdir
}
;
