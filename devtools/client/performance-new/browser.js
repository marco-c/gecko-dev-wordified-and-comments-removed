"
use
strict
"
;
const
{
createLazyLoaders
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
typescript
-
lazy
-
load
.
jsm
.
js
"
)
;
const
lazy
=
createLazyLoaders
(
{
Chrome
:
(
)
=
>
require
(
"
chrome
"
)
}
)
;
const
UI_BASE_URL_PREF
=
"
devtools
.
performance
.
recording
.
ui
-
base
-
url
"
;
const
UI_BASE_URL_PATH_PREF
=
"
devtools
.
performance
.
recording
.
ui
-
base
-
url
-
path
"
;
const
UI_ENABLE_ACTIVE_TAB_PREF
=
"
devtools
.
performance
.
recording
.
active
-
tab
-
view
.
enabled
"
;
const
UI_BASE_URL_DEFAULT
=
"
https
:
/
/
profiler
.
firefox
.
com
"
;
const
UI_BASE_URL_PATH_DEFAULT
=
"
/
from
-
browser
"
;
async
function
openProfilerTab
(
profilerViewMode
)
{
const
baseUrl
=
Services
.
prefs
.
getStringPref
(
UI_BASE_URL_PREF
UI_BASE_URL_DEFAULT
)
;
const
baseUrlPath
=
Services
.
prefs
.
getStringPref
(
UI_BASE_URL_PATH_PREF
UI_BASE_URL_PATH_DEFAULT
)
;
const
enableActiveTab
=
Services
.
prefs
.
getBoolPref
(
UI_ENABLE_ACTIVE_TAB_PREF
false
)
;
let
viewModeQueryString
=
"
"
;
if
(
profilerViewMode
=
=
=
"
active
-
tab
"
)
{
if
(
enableActiveTab
)
{
viewModeQueryString
=
"
?
view
=
active
-
tab
&
implementation
=
js
"
;
}
else
{
viewModeQueryString
=
"
?
implementation
=
js
"
;
}
}
else
if
(
profilerViewMode
!
=
=
undefined
&
&
profilerViewMode
!
=
=
"
full
"
)
{
viewModeQueryString
=
?
view
=
{
profilerViewMode
}
;
}
const
urlToLoad
=
{
baseUrl
}
{
baseUrlPath
}
{
viewModeQueryString
}
;
const
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
|
|
Services
.
wm
.
getMostRecentWindow
(
"
devtools
:
toolbox
"
)
;
if
(
!
win
)
{
throw
new
Error
(
"
No
browser
window
"
)
;
}
win
.
focus
(
)
;
const
contentBrowser
=
await
new
Promise
(
resolveOnContentBrowserCreated
=
>
win
.
openWebLinkIn
(
urlToLoad
"
tab
"
{
forceNonPrivate
:
true
resolveOnContentBrowserCreated
userContextId
:
win
.
gBrowser
?
.
contentPrincipal
.
userContextId
}
)
)
;
return
contentBrowser
;
}
function
sharedLibrariesFromProfile
(
profile
)
{
function
getLibsRecursive
(
processProfile
)
{
return
processProfile
.
libs
.
concat
(
.
.
.
processProfile
.
processes
.
map
(
getLibsRecursive
)
)
;
}
return
getLibsRecursive
(
profile
)
;
}
function
restartBrowserWithEnvironmentVariable
(
envName
value
)
{
const
{
Cc
Ci
}
=
lazy
.
Chrome
(
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
env
.
set
(
envName
value
)
;
Services
.
startup
.
quit
(
Services
.
startup
.
eForceQuit
|
Services
.
startup
.
eRestart
)
;
}
function
getEnvironmentVariable
(
envName
)
{
const
{
Cc
Ci
}
=
lazy
.
Chrome
(
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
return
env
.
get
(
envName
)
;
}
function
openFilePickerForObjdir
(
window
objdirs
changeObjdirs
)
{
const
{
Cc
Ci
}
=
lazy
.
Chrome
(
)
;
const
FilePicker
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
Ci
.
nsIFilePicker
)
;
FilePicker
.
init
(
window
"
Pick
build
directory
"
FilePicker
.
modeGetFolder
)
;
FilePicker
.
open
(
rv
=
>
{
if
(
rv
=
=
FilePicker
.
returnOK
)
{
const
path
=
FilePicker
.
file
.
path
;
if
(
path
&
&
!
objdirs
.
includes
(
path
)
)
{
const
newObjdirs
=
[
.
.
.
objdirs
path
]
;
changeObjdirs
(
newObjdirs
)
;
}
}
}
)
;
}
module
.
exports
=
{
openProfilerTab
sharedLibrariesFromProfile
restartBrowserWithEnvironmentVariable
getEnvironmentVariable
openFilePickerForObjdir
}
;
