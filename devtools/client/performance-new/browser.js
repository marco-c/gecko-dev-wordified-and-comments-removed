"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
function
receiveProfile
(
profile
)
{
const
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
win
)
{
throw
new
Error
(
"
No
browser
window
"
)
;
}
const
browser
=
win
.
gBrowser
;
Services
.
focus
.
activeWindow
=
win
;
const
tab
=
browser
.
addTab
(
"
https
:
/
/
perf
-
html
.
io
/
from
-
addon
"
)
;
browser
.
selectedTab
=
tab
;
const
mm
=
tab
.
linkedBrowser
.
messageManager
;
mm
.
loadFrameScript
(
"
chrome
:
/
/
devtools
/
content
/
performance
-
new
/
frame
-
script
.
js
"
false
)
;
mm
.
sendAsyncMessage
(
"
devtools
:
perf
-
html
-
transfer
-
profile
"
profile
)
;
}
async
function
_getArrayOfStringsPref
(
preferenceFront
prefName
defaultValue
)
{
let
array
;
try
{
const
text
=
await
preferenceFront
.
getCharPref
(
prefName
)
;
array
=
JSON
.
parse
(
text
)
;
}
catch
(
error
)
{
return
defaultValue
;
}
if
(
Array
.
isArray
(
array
)
&
&
array
.
every
(
feature
=
>
typeof
feature
=
=
=
"
string
"
)
)
{
return
array
;
}
return
defaultValue
;
}
async
function
_getIntPref
(
preferenceFront
prefName
defaultValue
)
{
try
{
return
await
preferenceFront
.
getIntPref
(
prefName
)
;
}
catch
(
error
)
{
return
defaultValue
;
}
}
async
function
getRecordingPreferences
(
preferenceFront
defaultSettings
=
{
}
)
{
const
[
entries
interval
features
threads
]
=
await
Promise
.
all
(
[
_getIntPref
(
preferenceFront
devtools
.
performance
.
recording
.
entries
defaultSettings
.
entries
)
_getIntPref
(
preferenceFront
devtools
.
performance
.
recording
.
interval
defaultSettings
.
interval
)
_getArrayOfStringsPref
(
preferenceFront
devtools
.
performance
.
recording
.
features
defaultSettings
.
features
)
_getArrayOfStringsPref
(
preferenceFront
devtools
.
performance
.
recording
.
threads
defaultSettings
.
threads
)
]
)
;
return
{
entries
interval
features
threads
}
;
}
async
function
setRecordingPreferences
(
preferenceFront
settings
)
{
await
Promise
.
all
(
[
preferenceFront
.
setIntPref
(
devtools
.
performance
.
recording
.
entries
settings
.
entries
)
preferenceFront
.
setIntPref
(
devtools
.
performance
.
recording
.
interval
settings
.
interval
)
preferenceFront
.
setCharPref
(
devtools
.
performance
.
recording
.
features
JSON
.
stringify
(
settings
.
features
)
)
preferenceFront
.
setCharPref
(
devtools
.
performance
.
recording
.
threads
JSON
.
stringify
(
settings
.
threads
)
)
]
)
;
}
module
.
exports
=
{
receiveProfile
getRecordingPreferences
setRecordingPreferences
}
;
