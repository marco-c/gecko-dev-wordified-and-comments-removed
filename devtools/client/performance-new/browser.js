"
use
strict
"
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
createLazyLoaders
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
typescript
-
lazy
-
load
.
jsm
.
js
"
)
;
const
lazy
=
createLazyLoaders
(
{
Chrome
:
(
)
=
>
require
(
"
chrome
"
)
Services
:
(
)
=
>
require
(
"
Services
"
)
OS
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
PerfSymbolication
:
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
symbolication
.
jsm
.
js
"
)
}
)
;
const
TRANSFER_EVENT
=
"
devtools
:
perf
-
html
-
transfer
-
profile
"
;
const
SYMBOL_TABLE_REQUEST_EVENT
=
"
devtools
:
perf
-
html
-
request
-
symbol
-
table
"
;
const
SYMBOL_TABLE_RESPONSE_EVENT
=
"
devtools
:
perf
-
html
-
reply
-
symbol
-
table
"
;
const
UI_BASE_URL_PREF
=
"
devtools
.
performance
.
recording
.
ui
-
base
-
url
"
;
const
UI_BASE_URL_PATH_PREF
=
"
devtools
.
performance
.
recording
.
ui
-
base
-
url
-
path
"
;
const
UI_BASE_URL_DEFAULT
=
"
https
:
/
/
profiler
.
firefox
.
com
"
;
const
UI_BASE_URL_PATH_DEFAULT
=
"
/
from
-
addon
"
;
function
openProfilerAndDisplayProfile
(
profile
profilerViewMode
symbolicationService
)
{
const
Services
=
lazy
.
Services
(
)
;
const
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
win
)
{
throw
new
Error
(
"
No
browser
window
"
)
;
}
const
browser
=
win
.
gBrowser
;
win
.
focus
(
)
;
const
baseUrl
=
Services
.
prefs
.
getStringPref
(
UI_BASE_URL_PREF
UI_BASE_URL_DEFAULT
)
;
const
baseUrlPath
=
Services
.
prefs
.
getStringPref
(
UI_BASE_URL_PATH_PREF
UI_BASE_URL_PATH_DEFAULT
)
;
let
viewModeQueryString
=
"
"
;
if
(
profilerViewMode
=
=
=
"
active
-
tab
"
)
{
viewModeQueryString
=
"
?
view
=
active
-
tab
&
implementation
=
js
"
;
}
else
if
(
profilerViewMode
!
=
=
undefined
&
&
profilerViewMode
!
=
=
"
full
"
)
{
viewModeQueryString
=
?
view
=
{
profilerViewMode
}
;
}
const
tab
=
browser
.
addWebTab
(
{
baseUrl
}
{
baseUrlPath
}
{
viewModeQueryString
}
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
userContextId
:
browser
.
contentPrincipal
.
userContextId
}
)
}
)
;
browser
.
selectedTab
=
tab
;
const
mm
=
tab
.
linkedBrowser
.
messageManager
;
mm
.
loadFrameScript
(
"
chrome
:
/
/
devtools
/
content
/
performance
-
new
/
frame
-
script
.
js
"
false
)
;
mm
.
sendAsyncMessage
(
TRANSFER_EVENT
profile
)
;
mm
.
addMessageListener
(
SYMBOL_TABLE_REQUEST_EVENT
e
=
>
{
const
{
debugName
breakpadId
}
=
e
.
data
;
symbolicationService
.
getSymbolTable
(
debugName
breakpadId
)
.
then
(
result
=
>
{
const
[
addr
index
buffer
]
=
result
;
mm
.
sendAsyncMessage
(
SYMBOL_TABLE_RESPONSE_EVENT
{
status
:
"
success
"
debugName
breakpadId
result
:
[
addr
index
buffer
]
}
)
;
}
error
=
>
{
const
{
name
message
lineNumber
fileName
}
=
error
;
mm
.
sendAsyncMessage
(
SYMBOL_TABLE_RESPONSE_EVENT
{
status
:
"
error
"
debugName
breakpadId
error
:
{
name
message
lineNumber
fileName
}
}
)
;
}
)
;
}
)
;
}
function
sharedLibrariesFromProfile
(
profile
)
{
function
getLibsRecursive
(
processProfile
)
{
return
processProfile
.
libs
.
concat
(
.
.
.
processProfile
.
processes
.
map
(
getLibsRecursive
)
)
;
}
return
getLibsRecursive
(
profile
)
;
}
function
restartBrowserWithEnvironmentVariable
(
envName
value
)
{
const
Services
=
lazy
.
Services
(
)
;
const
{
Cc
Ci
}
=
lazy
.
Chrome
(
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
env
.
set
(
envName
value
)
;
Services
.
startup
.
quit
(
Services
.
startup
.
eForceQuit
|
Services
.
startup
.
eRestart
)
;
}
function
getEnvironmentVariable
(
envName
)
{
const
{
Cc
Ci
}
=
lazy
.
Chrome
(
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
return
env
.
get
(
envName
)
;
}
function
openFilePickerForObjdir
(
window
objdirs
changeObjdirs
)
{
const
{
Cc
Ci
}
=
lazy
.
Chrome
(
)
;
const
FilePicker
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
Ci
.
nsIFilePicker
)
;
FilePicker
.
init
(
window
"
Pick
build
directory
"
FilePicker
.
modeGetFolder
)
;
FilePicker
.
open
(
rv
=
>
{
if
(
rv
=
=
FilePicker
.
returnOK
)
{
const
path
=
FilePicker
.
file
.
path
;
if
(
path
&
&
!
objdirs
.
includes
(
path
)
)
{
const
newObjdirs
=
[
.
.
.
objdirs
path
]
;
changeObjdirs
(
newObjdirs
)
;
}
}
}
)
;
}
module
.
exports
=
{
openProfilerAndDisplayProfile
sharedLibrariesFromProfile
restartBrowserWithEnvironmentVariable
getEnvironmentVariable
openFilePickerForObjdir
}
;
