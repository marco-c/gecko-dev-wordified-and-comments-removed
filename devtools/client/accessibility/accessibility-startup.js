"
use
strict
"
;
class
AccessibilityStartup
{
constructor
(
toolbox
)
{
this
.
toolbox
=
toolbox
;
this
.
_updateToolHighlight
=
this
.
_updateToolHighlight
.
bind
(
this
)
;
this
.
initAccessibility
(
)
;
}
get
target
(
)
{
return
this
.
toolbox
.
target
;
}
get
accessibility
(
)
{
return
this
.
_accessibility
;
}
get
walker
(
)
{
return
this
.
_walker
;
}
async
prepareAccessibility
(
)
{
this
.
_walker
=
await
this
.
_accessibility
.
getWalker
(
)
;
this
.
_supports
=
{
}
;
this
.
_supports
.
enableDisable
=
await
this
.
target
.
actorHasMethod
(
"
accessibility
"
"
enable
"
)
;
if
(
this
.
_supports
.
enableDisable
)
{
this
.
_supports
.
relations
=
await
this
.
target
.
actorHasMethod
(
"
accessible
"
"
getRelations
"
)
;
await
this
.
_accessibility
.
bootstrap
(
)
;
}
return
true
;
}
initAccessibility
(
)
{
if
(
!
this
.
_initAccessibility
)
{
this
.
_initAccessibility
=
(
async
function
(
)
{
await
Promise
.
race
(
[
this
.
toolbox
.
isOpen
this
.
toolbox
.
once
(
"
accessibility
-
init
"
)
]
)
;
this
.
_accessibility
=
this
.
target
.
getFront
(
"
accessibility
"
)
;
const
prepared
=
await
Promise
.
race
(
[
this
.
prepareAccessibility
(
)
this
.
target
.
once
(
"
close
"
)
]
)
;
if
(
!
prepared
)
{
return
;
}
this
.
_updateToolHighlight
(
)
;
this
.
_accessibility
.
on
(
"
init
"
this
.
_updateToolHighlight
)
;
this
.
_accessibility
.
on
(
"
shutdown
"
this
.
_updateToolHighlight
)
;
}
.
bind
(
this
)
)
(
)
;
}
return
this
.
_initAccessibility
;
}
destroyAccessibility
(
)
{
if
(
this
.
_destroyingAccessibility
)
{
return
this
.
_destroyingAccessibility
;
}
this
.
_destroyingAccessibility
=
(
async
function
(
)
{
if
(
!
this
.
_accessibility
)
{
return
;
}
await
this
.
_initAccessibility
;
this
.
_accessibility
.
off
(
"
init
"
this
.
_updateToolHighlight
)
;
this
.
_accessibility
.
off
(
"
shutdown
"
this
.
_updateToolHighlight
)
;
await
this
.
_walker
.
destroy
(
)
;
this
.
_accessibility
=
null
;
this
.
_walker
=
null
;
}
.
bind
(
this
)
)
(
)
;
return
this
.
_destroyingAccessibility
;
}
async
_updateToolHighlight
(
)
{
const
isHighlighted
=
await
this
.
toolbox
.
isToolHighlighted
(
"
accessibility
"
)
;
if
(
this
.
_accessibility
.
enabled
&
&
!
isHighlighted
)
{
this
.
toolbox
.
highlightTool
(
"
accessibility
"
)
;
}
else
if
(
!
this
.
_accessibility
.
enabled
&
&
isHighlighted
)
{
this
.
toolbox
.
unhighlightTool
(
"
accessibility
"
)
;
}
}
async
destroy
(
)
{
await
this
.
destroyAccessibility
(
)
;
this
.
toolbox
=
null
;
}
}
exports
.
AccessibilityStartup
=
AccessibilityStartup
;
