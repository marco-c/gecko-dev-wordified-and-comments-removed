"
use
strict
"
;
const
{
AccessibilityFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
accessibility
"
)
;
class
AccessibilityStartup
{
constructor
(
toolbox
)
{
this
.
toolbox
=
toolbox
;
this
.
_updateAccessibilityState
=
this
.
_updateAccessibilityState
.
bind
(
this
)
;
this
.
initAccessibility
(
)
;
}
get
target
(
)
{
return
this
.
toolbox
.
target
;
}
get
accessibility
(
)
{
return
this
.
_accessibility
;
}
get
walker
(
)
{
return
this
.
_walker
;
}
initAccessibility
(
)
{
if
(
!
this
.
_initAccessibility
)
{
this
.
_initAccessibility
=
(
async
function
(
)
{
this
.
_accessibility
=
new
AccessibilityFront
(
this
.
target
.
client
this
.
target
.
form
)
;
this
.
_walker
=
await
this
.
_accessibility
.
getWalker
(
)
;
this
.
_supportsLatestAccessibility
=
await
this
.
target
.
actorHasMethod
(
"
accessibility
"
"
enable
"
)
;
if
(
this
.
_supportsLatestAccessibility
)
{
await
this
.
_accessibility
.
bootstrap
(
)
;
}
this
.
_updateAccessibilityState
(
)
;
this
.
_accessibility
.
on
(
"
init
"
this
.
_updateAccessibilityState
)
;
this
.
_accessibility
.
on
(
"
shutdown
"
this
.
_updateAccessibilityState
)
;
}
.
bind
(
this
)
)
(
)
;
}
return
this
.
_initAccessibility
;
}
destroyAccessibility
(
)
{
if
(
this
.
_destroyingAccessibility
)
{
return
this
.
_destroyingAccessibility
;
}
this
.
_destroyingAccessibility
=
(
async
function
(
)
{
if
(
!
this
.
_accessibility
)
{
return
;
}
await
this
.
_initAccessibility
;
this
.
_accessibility
.
off
(
"
init
"
this
.
_updateAccessibilityState
)
;
this
.
_accessibility
.
off
(
"
shutdown
"
this
.
_updateAccessibilityState
)
;
await
this
.
_walker
.
destroy
(
)
;
await
this
.
_accessibility
.
destroy
(
)
;
this
.
_accessibility
=
null
;
this
.
_walker
=
null
;
}
.
bind
(
this
)
)
(
)
;
return
this
.
_destroyingAccessibility
;
}
_updateAccessibilityState
(
)
{
this
.
_updateAccessibilityToolHighlight
(
)
;
this
.
_updatePickerButton
(
)
;
}
_updatePickerButton
(
)
{
this
.
toolbox
.
updatePickerButton
(
)
;
this
.
toolbox
.
component
.
setToolboxButtons
(
this
.
toolbox
.
toolbarButtons
)
;
}
_updateAccessibilityToolHighlight
(
)
{
if
(
this
.
_accessibility
.
enabled
)
{
this
.
toolbox
.
highlightTool
(
"
accessibility
"
)
;
}
else
{
this
.
toolbox
.
unhighlightTool
(
"
accessibility
"
)
;
}
}
async
destroy
(
)
{
await
this
.
destroyAccessibility
(
)
;
this
.
toolbox
=
null
;
}
}
exports
.
AccessibilityStartup
=
AccessibilityStartup
;
