"
use
strict
"
;
const
{
Component
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
Localized
=
createFactory
(
FluentReact
.
Localized
)
;
const
{
openDocLink
}
=
require
(
"
devtools
/
client
/
shared
/
link
"
)
;
const
{
accessibility
:
{
SCORES
:
{
BEST_PRACTICES
FAIL
WARNING
}
}
}
=
require
(
"
devtools
/
shared
/
constants
"
)
;
const
SCORE_TO_ICON_MAP
=
{
[
BEST_PRACTICES
]
:
{
l10nId
:
"
accessibility
-
best
-
practices
"
src
:
"
chrome
:
/
/
devtools
/
skin
/
images
/
info
.
svg
"
}
[
FAIL
]
:
{
l10nId
:
"
accessibility
-
fail
"
src
:
"
chrome
:
/
/
devtools
/
skin
/
images
/
error
.
svg
"
}
[
WARNING
]
:
{
l10nId
:
"
accessibility
-
warning
"
src
:
"
chrome
:
/
/
devtools
/
skin
/
images
/
alert
.
svg
"
}
}
;
class
LearnMoreClass
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
href
:
PropTypes
.
string
l10nId
:
PropTypes
.
string
.
isRequired
onClick
:
PropTypes
.
func
}
;
}
static
get
defaultProps
(
)
{
return
{
href
:
"
#
"
l10nId
:
null
onClick
:
LearnMoreClass
.
openDocOnClick
}
;
}
static
openDocOnClick
(
event
)
{
event
.
preventDefault
(
)
;
openDocLink
(
event
.
target
.
href
)
;
}
render
(
)
{
const
{
href
l10nId
onClick
}
=
this
.
props
;
const
className
=
"
link
"
;
return
Localized
(
{
id
:
l10nId
}
ReactDOM
.
a
(
{
className
href
onClick
}
)
)
;
}
}
const
LearnMore
=
createFactory
(
LearnMoreClass
)
;
function
Icon
(
{
score
}
)
{
const
{
l10nId
src
}
=
SCORE_TO_ICON_MAP
[
score
]
;
return
Localized
(
{
id
:
l10nId
attrs
:
{
alt
:
true
}
}
ReactDOM
.
img
(
{
src
"
data
-
score
"
:
score
className
:
"
icon
"
}
)
)
;
}
function
Annotation
(
{
args
href
l10nId
}
)
{
return
Localized
(
{
id
:
l10nId
a
:
LearnMore
(
{
l10nId
:
"
accessibility
-
learn
-
more
"
href
}
)
.
.
.
args
}
ReactDOM
.
p
(
{
className
:
"
accessibility
-
check
-
annotation
"
}
)
)
;
}
class
Check
extends
Component
{
static
get
propTypes
(
)
{
return
{
getAnnotation
:
PropTypes
.
func
.
isRequired
id
:
PropTypes
.
string
.
isRequired
issue
:
PropTypes
.
string
.
isRequired
score
:
PropTypes
.
string
.
isRequired
}
;
}
render
(
)
{
const
{
getAnnotation
id
issue
score
}
=
this
.
props
;
return
ReactDOM
.
div
(
{
role
:
"
presentation
"
className
:
"
accessibility
-
check
"
}
Localized
(
{
id
}
ReactDOM
.
h3
(
{
className
:
"
accessibility
-
check
-
header
"
}
)
)
ReactDOM
.
div
(
{
role
:
"
presentation
"
}
Icon
(
{
score
}
)
Annotation
(
{
.
.
.
getAnnotation
(
issue
)
}
)
)
)
;
}
}
module
.
exports
=
Check
;
