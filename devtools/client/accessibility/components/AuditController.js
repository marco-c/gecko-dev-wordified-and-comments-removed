"
use
strict
"
;
const
React
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
class
AuditController
extends
React
.
Component
{
static
get
propTypes
(
)
{
return
{
accessibleFront
:
PropTypes
.
object
.
isRequired
children
:
PropTypes
.
any
}
;
}
constructor
(
props
)
{
super
(
props
)
;
const
{
accessibleFront
:
{
checks
}
}
=
props
;
this
.
state
=
{
checks
}
;
this
.
onAudited
=
this
.
onAudited
.
bind
(
this
)
;
}
UNSAFE_componentWillMount
(
)
{
const
{
accessibleFront
}
=
this
.
props
;
accessibleFront
.
on
(
"
audited
"
this
.
onAudited
)
;
}
componentDidMount
(
)
{
this
.
maybeRequestAudit
(
)
;
}
componentDidUpdate
(
)
{
this
.
maybeRequestAudit
(
)
;
}
componentWillUnmount
(
)
{
const
{
accessibleFront
}
=
this
.
props
;
accessibleFront
.
off
(
"
audited
"
this
.
onAudited
)
;
}
onAudited
(
)
{
const
{
accessibleFront
}
=
this
.
props
;
if
(
accessibleFront
.
isDestroyed
(
)
)
{
accessibleFront
.
off
(
"
audited
"
this
.
onAudited
)
;
return
;
}
this
.
setState
(
{
checks
:
accessibleFront
.
checks
}
)
;
}
maybeRequestAudit
(
)
{
const
{
accessibleFront
}
=
this
.
props
;
if
(
accessibleFront
.
isDestroyed
(
)
)
{
accessibleFront
.
off
(
"
audited
"
this
.
onAudited
)
;
return
;
}
if
(
accessibleFront
.
checks
)
{
return
;
}
accessibleFront
.
audit
(
)
.
catch
(
error
=
>
{
if
(
!
accessibleFront
.
isDestroyed
(
)
)
{
console
.
warn
(
error
)
;
}
}
)
;
}
render
(
)
{
const
{
children
}
=
this
.
props
;
const
{
checks
}
=
this
.
state
;
return
React
.
Children
.
only
(
React
.
cloneElement
(
children
{
checks
}
)
)
;
}
}
module
.
exports
=
AuditController
;
