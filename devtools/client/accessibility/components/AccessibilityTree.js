"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
{
connect
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
redux
.
js
"
)
;
const
TreeView
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
tree
/
TreeView
.
js
"
)
)
;
const
{
MODE
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
index
.
js
"
)
;
const
{
fetchChildren
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
accessibility
/
actions
/
accessibles
.
js
"
)
;
const
{
L10N
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
accessibility
/
utils
/
l10n
.
js
"
)
;
const
{
isFiltered
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
accessibility
/
utils
/
audit
.
js
"
)
;
const
AccessibilityRow
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
accessibility
/
components
/
AccessibilityRow
.
js
"
)
)
;
const
AccessibilityRowValue
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
accessibility
/
components
/
AccessibilityRowValue
.
js
"
)
)
;
const
{
Provider
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
accessibility
/
provider
.
js
"
)
;
const
{
scrollIntoView
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
scroll
.
js
"
)
;
class
AccessibilityTree
extends
Component
{
static
get
propTypes
(
)
{
return
{
toolboxDoc
:
PropTypes
.
object
.
isRequired
dispatch
:
PropTypes
.
func
.
isRequired
accessibles
:
PropTypes
.
object
expanded
:
PropTypes
.
object
selected
:
PropTypes
.
string
highlighted
:
PropTypes
.
object
filtered
:
PropTypes
.
bool
getAccessibilityTreeRoot
:
PropTypes
.
func
.
isRequired
startListeningForAccessibilityEvents
:
PropTypes
.
func
.
isRequired
stopListeningForAccessibilityEvents
:
PropTypes
.
func
.
isRequired
highlightAccessible
:
PropTypes
.
func
.
isRequired
unhighlightAccessible
:
PropTypes
.
func
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
onNameChange
=
this
.
onNameChange
.
bind
(
this
)
;
this
.
onReorder
=
this
.
onReorder
.
bind
(
this
)
;
this
.
onTextChange
=
this
.
onTextChange
.
bind
(
this
)
;
this
.
renderValue
=
this
.
renderValue
.
bind
(
this
)
;
this
.
scrollSelectedRowIntoView
=
this
.
scrollSelectedRowIntoView
.
bind
(
this
)
;
}
UNSAFE_componentWillMount
(
)
{
this
.
props
.
startListeningForAccessibilityEvents
(
{
reorder
:
this
.
onReorder
"
name
-
change
"
:
this
.
onNameChange
"
text
-
change
"
:
this
.
onTextChange
}
)
;
window
.
on
(
EVENTS
.
NEW_ACCESSIBLE_FRONT_INSPECTED
this
.
scrollSelectedRowIntoView
)
;
return
null
;
}
componentDidUpdate
(
prevProps
)
{
if
(
this
.
props
.
filtered
!
=
=
prevProps
.
filtered
)
{
this
.
scrollSelectedRowIntoView
(
)
;
}
window
.
emit
(
EVENTS
.
ACCESSIBILITY_INSPECTOR_UPDATED
)
;
}
componentWillUnmount
(
)
{
this
.
props
.
stopListeningForAccessibilityEvents
(
{
reorder
:
this
.
onReorder
"
name
-
change
"
:
this
.
onNameChange
"
text
-
change
"
:
this
.
onTextChange
}
)
;
window
.
off
(
EVENTS
.
NEW_ACCESSIBLE_FRONT_INSPECTED
this
.
scrollSelectedRowIntoView
)
;
}
onReorder
(
accessibleFront
)
{
if
(
this
.
props
.
accessibles
.
has
(
accessibleFront
.
actorID
)
)
{
this
.
props
.
dispatch
(
fetchChildren
(
accessibleFront
)
)
;
}
}
scrollSelectedRowIntoView
(
)
{
const
{
treeview
}
=
this
.
refs
;
if
(
!
treeview
)
{
return
;
}
const
treeEl
=
treeview
.
treeRef
.
current
;
if
(
!
treeEl
)
{
return
;
}
const
selected
=
treeEl
.
ownerDocument
.
querySelector
(
"
.
treeTable
.
treeRow
.
selected
"
)
;
if
(
selected
)
{
scrollIntoView
(
selected
{
center
:
true
}
)
;
}
}
onNameChange
(
accessibleFront
parentFront
)
{
const
{
accessibles
dispatch
}
=
this
.
props
;
const
accessibleWalkerFront
=
accessibleFront
.
getParent
(
)
;
parentFront
=
parentFront
|
|
accessibleWalkerFront
;
if
(
accessibles
.
has
(
accessibleFront
.
actorID
)
|
|
accessibles
.
has
(
parentFront
.
actorID
)
)
{
dispatch
(
fetchChildren
(
parentFront
)
)
;
}
}
onTextChange
(
accessibleFront
)
{
const
{
accessibles
dispatch
}
=
this
.
props
;
if
(
accessibles
.
has
(
accessibleFront
.
actorID
)
)
{
dispatch
(
fetchChildren
(
accessibleFront
)
)
;
}
}
renderValue
(
props
)
{
return
AccessibilityRowValue
(
props
)
;
}
render
(
)
{
const
columns
=
[
{
id
:
"
default
"
title
:
L10N
.
getStr
(
"
accessibility
.
role
"
)
}
{
id
:
"
value
"
title
:
L10N
.
getStr
(
"
accessibility
.
name
"
)
}
]
;
const
{
accessibles
dispatch
expanded
selected
highlighted
:
highlightedItem
toolboxDoc
filtered
getAccessibilityTreeRoot
highlightAccessible
unhighlightAccessible
}
=
this
.
props
;
const
renderRow
=
rowProps
=
>
{
const
{
object
}
=
rowProps
.
member
;
const
highlighted
=
object
=
=
=
highlightedItem
;
return
AccessibilityRow
(
Object
.
assign
(
{
}
rowProps
{
toolboxDoc
highlighted
decorator
:
{
getRowClass
(
)
{
return
highlighted
?
[
"
highlighted
"
]
:
[
]
;
}
}
highlightAccessible
unhighlightAccessible
}
)
)
;
}
;
const
className
=
filtered
?
"
filtered
"
:
undefined
;
return
TreeView
(
{
ref
:
"
treeview
"
object
:
getAccessibilityTreeRoot
(
)
mode
:
MODE
.
SHORT
provider
:
new
Provider
(
accessibles
filtered
dispatch
)
columns
className
renderValue
:
this
.
renderValue
renderRow
label
:
L10N
.
getStr
(
"
accessibility
.
treeName
"
)
header
:
true
expandedNodes
:
expanded
selected
onClickRow
(
nodePath
event
)
{
if
(
event
.
target
.
classList
.
contains
(
"
theme
-
twisty
"
)
)
{
this
.
toggle
(
nodePath
)
;
}
this
.
selectRow
(
this
.
rows
.
find
(
row
=
>
row
.
props
.
member
.
path
=
=
=
nodePath
)
{
preventAutoScroll
:
true
}
)
;
return
true
;
}
onContextMenuTree
(
e
)
{
let
row
=
this
.
getSelectedRow
(
)
;
if
(
!
row
)
{
return
;
}
row
=
row
.
getWrappedInstance
(
)
;
row
.
onContextMenu
(
e
)
;
}
}
)
;
}
}
const
mapStateToProps
=
(
{
accessibles
ui
:
{
expanded
selected
highlighted
}
audit
:
{
filters
}
}
)
=
>
(
{
accessibles
expanded
selected
highlighted
filtered
:
isFiltered
(
filters
)
}
)
;
module
.
exports
=
connect
(
mapStateToProps
)
(
AccessibilityTree
)
;
