"
use
strict
"
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
div
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
AccessibilityTreeFilter
=
createFactory
(
require
(
"
devtools
/
client
/
accessibility
/
components
/
AccessibilityTreeFilter
"
)
)
;
const
AccessibilityPrefs
=
createFactory
(
require
(
"
devtools
/
client
/
accessibility
/
components
/
AccessibilityPrefs
"
)
)
;
loader
.
lazyGetter
(
this
"
SimulationMenuButton
"
function
(
)
{
return
createFactory
(
require
(
"
devtools
/
client
/
accessibility
/
components
/
SimulationMenuButton
"
)
)
;
}
)
;
const
DisplayTabbingOrder
=
createFactory
(
require
(
"
devtools
/
client
/
accessibility
/
components
/
DisplayTabbingOrder
"
)
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
function
Toolbar
(
{
audit
simulate
supportsTabbingOrder
toolboxDoc
}
)
{
const
optionalSimulationSection
=
simulate
?
[
div
(
{
role
:
"
separator
"
className
:
"
devtools
-
separator
"
}
)
SimulationMenuButton
(
{
simulate
toolboxDoc
}
)
]
:
[
]
;
const
optionalDisplayTabbingOrderSection
=
supportsTabbingOrder
?
[
div
(
{
role
:
"
separator
"
className
:
"
devtools
-
separator
"
}
)
DisplayTabbingOrder
(
)
]
:
[
]
;
return
div
(
{
className
:
"
devtools
-
toolbar
"
role
:
"
toolbar
"
}
AccessibilityTreeFilter
(
{
audit
toolboxDoc
}
)
.
.
.
optionalSimulationSection
.
.
.
optionalDisplayTabbingOrderSection
AccessibilityPrefs
(
{
toolboxDoc
}
)
)
;
}
const
mapStateToProps
=
(
{
ui
:
{
supports
:
{
tabbingOrder
}
}
}
)
=
>
(
{
supportsTabbingOrder
:
tabbingOrder
}
)
;
exports
.
Toolbar
=
connect
(
mapStateToProps
)
(
Toolbar
)
;
