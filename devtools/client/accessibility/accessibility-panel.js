"
use
strict
"
;
const
{
AccessibilityFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
accessibility
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
Picker
}
=
require
(
"
.
/
picker
"
)
;
const
EVENTS
=
{
NEW_ACCESSIBLE_FRONT_SELECTED
:
"
Accessibility
:
NewAccessibleFrontSelected
"
NEW_ACCESSIBLE_FRONT_HIGHLIGHTED
:
"
Accessibility
:
NewAccessibleFrontHighlighted
"
NEW_ACCESSIBLE_FRONT_INSPECTED
:
"
Accessibility
:
NewAccessibleFrontInspected
"
ACCESSIBILITY_INSPECTOR_UPDATED
:
"
Accessibility
:
AccessibilityInspectorUpdated
"
}
;
function
AccessibilityPanel
(
iframeWindow
toolbox
)
{
this
.
panelWin
=
iframeWindow
;
this
.
_toolbox
=
toolbox
;
this
.
onTabNavigated
=
this
.
onTabNavigated
.
bind
(
this
)
;
this
.
onPanelVisibilityChange
=
this
.
onPanelVisibilityChange
.
bind
(
this
)
;
this
.
onNewAccessibleFrontSelected
=
this
.
onNewAccessibleFrontSelected
.
bind
(
this
)
;
this
.
onAccessibilityInspectorUpdated
=
this
.
onAccessibilityInspectorUpdated
.
bind
(
this
)
;
this
.
updatePickerButton
=
this
.
updatePickerButton
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
AccessibilityPanel
.
prototype
=
{
async
open
(
)
{
if
(
this
.
_opening
)
{
await
this
.
_opening
;
return
this
.
_opening
;
}
let
resolver
;
this
.
_opening
=
new
Promise
(
resolve
=
>
{
resolver
=
resolve
;
}
)
;
if
(
!
this
.
target
.
isRemote
)
{
await
this
.
target
.
makeRemote
(
)
;
}
this
.
target
.
on
(
"
navigate
"
this
.
onTabNavigated
)
;
this
.
_toolbox
.
on
(
"
select
"
this
.
onPanelVisibilityChange
)
;
this
.
panelWin
.
EVENTS
=
EVENTS
;
EventEmitter
.
decorate
(
this
.
panelWin
)
;
this
.
panelWin
.
on
(
EVENTS
.
NEW_ACCESSIBLE_FRONT_SELECTED
this
.
onNewAccessibleFrontSelected
)
;
this
.
panelWin
.
on
(
EVENTS
.
ACCESSIBILITY_INSPECTOR_UPDATED
this
.
onAccessibilityInspectorUpdated
)
;
this
.
shouldRefresh
=
true
;
this
.
panelWin
.
gToolbox
=
this
.
_toolbox
;
await
this
.
_toolbox
.
initInspector
(
)
;
this
.
_front
=
new
AccessibilityFront
(
this
.
target
.
client
this
.
target
.
form
)
;
this
.
_walker
=
await
this
.
_front
.
getWalker
(
)
;
this
.
_isOldVersion
=
!
(
await
this
.
target
.
actorHasMethod
(
"
accessibility
"
"
enable
"
)
)
;
if
(
!
this
.
_isOldVersion
)
{
await
this
.
_front
.
bootstrap
(
)
;
this
.
picker
=
new
Picker
(
this
)
;
}
this
.
isReady
=
true
;
this
.
emit
(
"
ready
"
)
;
resolver
(
this
)
;
return
this
.
_opening
;
}
onNewAccessibleFrontSelected
(
selected
)
{
this
.
emit
(
"
new
-
accessible
-
front
-
selected
"
selected
)
;
}
onAccessibilityInspectorUpdated
(
)
{
this
.
emit
(
"
accessibility
-
inspector
-
updated
"
)
;
}
onTabNavigated
(
)
{
this
.
shouldRefresh
=
true
;
this
.
_opening
.
then
(
(
)
=
>
this
.
refresh
(
)
)
;
}
onPanelVisibilityChange
(
)
{
this
.
_opening
.
then
(
(
)
=
>
this
.
refresh
(
)
)
;
}
refresh
(
)
{
this
.
cancelPicker
(
)
;
if
(
this
.
isVisible
)
{
this
.
_front
.
on
(
"
init
"
this
.
updatePickerButton
)
;
this
.
_front
.
on
(
"
shutdown
"
this
.
updatePickerButton
)
;
}
else
{
this
.
_front
.
off
(
"
init
"
this
.
updatePickerButton
)
;
this
.
_front
.
off
(
"
shutdown
"
this
.
updatePickerButton
)
;
return
;
}
if
(
!
this
.
shouldRefresh
)
{
return
;
}
this
.
shouldRefresh
=
false
;
this
.
postContentMessage
(
"
initialize
"
this
.
_front
this
.
_walker
this
.
_isOldVersion
)
;
}
selectAccessible
(
accessibleFront
)
{
this
.
postContentMessage
(
"
selectAccessible
"
this
.
_walker
accessibleFront
)
;
}
selectAccessibleForNode
(
nodeFront
)
{
this
.
postContentMessage
(
"
selectNodeAccessible
"
this
.
_walker
nodeFront
)
;
}
highlightAccessible
(
accessibleFront
)
{
this
.
postContentMessage
(
"
highlightAccessible
"
this
.
_walker
accessibleFront
)
;
}
postContentMessage
(
type
.
.
.
args
)
{
const
event
=
new
this
.
panelWin
.
MessageEvent
(
"
devtools
/
chrome
/
message
"
{
bubbles
:
true
cancelable
:
true
data
:
{
type
args
}
}
)
;
this
.
panelWin
.
dispatchEvent
(
event
)
;
}
updatePickerButton
(
)
{
this
.
picker
&
&
this
.
picker
.
updateButton
(
)
;
}
togglePicker
(
focus
)
{
this
.
picker
&
&
this
.
picker
.
toggle
(
)
;
}
cancelPicker
(
)
{
this
.
picker
&
&
this
.
picker
.
cancel
(
)
;
}
stopPicker
(
)
{
this
.
picker
&
&
this
.
picker
.
stop
(
)
;
}
get
walker
(
)
{
return
this
.
_walker
;
}
get
isVisible
(
)
{
return
this
.
_toolbox
.
currentToolId
=
=
=
"
accessibility
"
;
}
get
target
(
)
{
return
this
.
_toolbox
.
target
;
}
async
destroy
(
)
{
if
(
this
.
_destroying
)
{
await
this
.
_destroying
;
return
;
}
let
resolver
;
this
.
_destroying
=
new
Promise
(
resolve
=
>
{
resolver
=
resolve
;
}
)
;
this
.
target
.
off
(
"
navigate
"
this
.
onTabNavigated
)
;
this
.
_toolbox
.
off
(
"
select
"
this
.
onPanelVisibilityChange
)
;
this
.
panelWin
.
off
(
EVENTS
.
NEW_ACCESSIBLE_FRONT_SELECTED
this
.
onNewAccessibleFrontSelected
)
;
this
.
panelWin
.
off
(
EVENTS
.
ACCESSIBILITY_INSPECTOR_UPDATED
this
.
onAccessibilityInspectorUpdated
)
;
this
.
picker
.
release
(
)
;
this
.
picker
=
null
;
if
(
this
.
_front
)
{
await
this
.
_front
.
destroy
(
)
;
}
this
.
_front
=
null
;
this
.
panelWin
.
gToolbox
=
null
;
this
.
emit
(
"
destroyed
"
)
;
resolver
(
)
;
}
}
;
exports
.
AccessibilityPanel
=
AccessibilityPanel
;
