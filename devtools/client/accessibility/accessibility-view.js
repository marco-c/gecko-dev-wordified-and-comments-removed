"
use
strict
"
;
const
nodeConstants
=
require
(
"
devtools
/
shared
/
dom
-
node
-
constants
"
)
;
const
{
createFactory
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
combineReducers
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
MainFrame
=
createFactory
(
require
(
"
.
/
components
/
MainFrame
"
)
)
;
const
OldVersionDescription
=
createFactory
(
require
(
"
.
/
components
/
Description
"
)
.
OldVersionDescription
)
;
const
createStore
=
require
(
"
devtools
/
client
/
shared
/
redux
/
create
-
store
"
)
(
)
;
const
{
reducers
}
=
require
(
"
.
/
reducers
/
index
"
)
;
const
store
=
createStore
(
combineReducers
(
reducers
)
)
;
const
{
reset
}
=
require
(
"
.
/
actions
/
ui
"
)
;
const
{
select
highlight
}
=
require
(
"
.
/
actions
/
accessibles
"
)
;
function
AccessibilityView
(
localStore
)
{
addEventListener
(
"
devtools
/
chrome
/
message
"
this
.
onMessage
.
bind
(
this
)
true
)
;
this
.
store
=
localStore
;
}
AccessibilityView
.
prototype
=
{
async
initialize
(
accessibility
walker
isOldVersion
)
{
await
this
.
store
.
dispatch
(
reset
(
accessibility
)
)
;
const
container
=
document
.
getElementById
(
"
content
"
)
;
if
(
isOldVersion
)
{
ReactDOM
.
render
(
OldVersionDescription
(
)
container
)
;
return
;
}
const
mainFrame
=
MainFrame
(
{
accessibility
walker
}
)
;
const
provider
=
createElement
(
Provider
{
store
:
this
.
store
}
mainFrame
)
;
this
.
mainFrame
=
ReactDOM
.
render
(
provider
container
)
;
}
async
selectAccessible
(
walker
accessible
)
{
await
this
.
store
.
dispatch
(
select
(
walker
accessible
)
)
;
window
.
emit
(
EVENTS
.
NEW_ACCESSIBLE_FRONT_INSPECTED
)
;
}
async
highlightAccessible
(
walker
accessible
)
{
await
this
.
store
.
dispatch
(
highlight
(
walker
accessible
)
)
;
window
.
emit
(
EVENTS
.
NEW_ACCESSIBLE_FRONT_HIGHLIGHTED
)
;
}
async
selectNodeAccessible
(
walker
node
)
{
let
accessible
=
await
walker
.
getAccessibleFor
(
node
)
;
if
(
!
accessible
|
|
accessible
.
indexInParent
<
0
)
{
const
{
nodes
:
children
}
=
await
gToolbox
.
walker
.
children
(
node
)
;
for
(
let
child
of
children
)
{
if
(
child
.
nodeType
=
=
=
nodeConstants
.
TEXT_NODE
)
{
accessible
=
await
walker
.
getAccessibleFor
(
child
)
;
if
(
accessible
&
&
accessible
.
indexInParent
>
=
0
)
{
break
;
}
}
}
}
await
this
.
store
.
dispatch
(
select
(
walker
accessible
)
)
;
window
.
emit
(
EVENTS
.
NEW_ACCESSIBLE_FRONT_HIGHLIGHTED
)
;
}
onMessage
(
event
)
{
const
data
=
event
.
data
;
const
method
=
data
.
type
;
if
(
typeof
this
[
method
]
=
=
=
"
function
"
)
{
this
[
method
]
(
.
.
.
data
.
args
)
;
}
}
}
;
window
.
view
=
new
AccessibilityView
(
store
)
;
