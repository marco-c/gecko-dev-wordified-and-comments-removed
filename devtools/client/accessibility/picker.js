"
use
strict
"
;
const
{
L10N
}
=
require
(
"
devtools
/
client
/
accessibility
/
utils
/
l10n
"
)
;
class
Picker
{
constructor
(
panel
)
{
this
.
_panel
=
panel
;
this
.
isPicking
=
false
;
this
.
onPickerAccessibleHovered
=
this
.
onPickerAccessibleHovered
.
bind
(
this
)
;
this
.
onPickerAccessiblePicked
=
this
.
onPickerAccessiblePicked
.
bind
(
this
)
;
this
.
onPickerAccessiblePreviewed
=
this
.
onPickerAccessiblePreviewed
.
bind
(
this
)
;
this
.
onPickerAccessibleCanceled
=
this
.
onPickerAccessibleCanceled
.
bind
(
this
)
;
}
get
toolbox
(
)
{
return
this
.
_panel
.
_toolbox
;
}
get
accessibilityProxy
(
)
{
return
this
.
_panel
.
accessibilityProxy
;
}
get
pickerButton
(
)
{
return
this
.
toolbox
.
pickerButton
;
}
get
_telemetry
(
)
{
return
this
.
_panel
.
_telemetry
;
}
release
(
)
{
this
.
_panel
=
null
;
}
emit
(
event
data
)
{
this
.
toolbox
.
emit
(
event
data
)
;
}
select
(
accessible
)
{
this
.
_panel
.
selectAccessible
(
accessible
)
;
}
highlight
(
accessible
)
{
this
.
_panel
.
highlightAccessible
(
accessible
)
;
}
getStr
(
key
)
{
return
L10N
.
getStr
(
key
)
;
}
updateButton
(
)
{
this
.
pickerButton
.
description
=
this
.
getStr
(
"
accessibility
.
pick
"
)
;
this
.
pickerButton
.
className
=
"
accessibility
"
;
this
.
pickerButton
.
disabled
=
!
this
.
accessibilityProxy
.
enabled
;
if
(
!
this
.
accessibilityProxy
.
enabled
&
&
this
.
isPicking
)
{
this
.
cancel
(
)
;
}
}
onPickerAccessibleHovered
(
accessible
)
{
if
(
accessible
)
{
this
.
emit
(
"
picker
-
accessible
-
hovered
"
accessible
)
;
this
.
highlight
(
accessible
)
;
}
}
onPickerAccessiblePicked
(
accessible
)
{
if
(
accessible
)
{
this
.
select
(
accessible
)
;
}
this
.
stop
(
)
;
}
onPickerAccessiblePreviewed
(
accessible
)
{
if
(
accessible
)
{
this
.
select
(
accessible
)
;
}
}
onPickerAccessibleCanceled
(
)
{
this
.
cancel
(
)
;
this
.
emit
(
"
picker
-
accessible
-
canceled
"
)
;
}
async
cancel
(
)
{
await
this
.
stop
(
)
;
}
async
stop
(
)
{
if
(
!
this
.
isPicking
)
{
return
;
}
this
.
isPicking
=
false
;
this
.
pickerButton
.
isChecked
=
false
;
await
this
.
accessibilityProxy
.
cancelPick
(
)
;
this
.
_telemetry
.
toolClosed
(
"
accessibility_picker
"
this
.
toolbox
.
sessionId
this
)
;
this
.
emit
(
"
picker
-
stopped
"
)
;
}
async
start
(
doFocus
=
true
)
{
if
(
this
.
isPicking
)
{
return
;
}
this
.
isPicking
=
true
;
this
.
pickerButton
.
isChecked
=
true
;
await
this
.
accessibilityProxy
.
pick
(
doFocus
this
.
onPickerAccessibleHovered
this
.
onPickerAccessiblePicked
this
.
onPickerAccessiblePreviewed
this
.
onPickerAccessibleCanceled
)
;
this
.
_telemetry
.
toolOpened
(
"
accessibility_picker
"
this
.
toolbox
.
sessionId
this
)
;
this
.
emit
(
"
picker
-
started
"
)
;
}
toggle
(
doFocus
)
{
if
(
this
.
isPicking
)
{
return
this
.
cancel
(
)
;
}
return
this
.
start
(
doFocus
)
;
}
}
exports
.
Picker
=
Picker
;
