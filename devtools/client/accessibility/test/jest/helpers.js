"
use
strict
"
;
const
{
reducers
}
=
require
(
"
devtools
/
client
/
accessibility
/
reducers
/
index
"
)
;
const
{
createStore
combineReducers
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
function
setupStore
(
{
preloadedState
}
=
{
}
)
{
const
store
=
createStore
(
combineReducers
(
reducers
)
preloadedState
)
;
return
store
;
}
function
mockAccessible
(
form
)
{
return
{
on
:
jest
.
fn
(
)
off
:
jest
.
fn
(
)
audit
:
jest
.
fn
(
)
.
mockReturnValue
(
Promise
.
resolve
(
)
)
.
.
.
form
}
;
}
function
checkMenuItem
(
menuItem
expected
)
{
expect
(
menuItem
.
tagName
)
.
toBe
(
"
BUTTON
"
)
;
if
(
expected
.
role
)
{
expect
(
menuItem
.
getAttribute
(
"
role
"
)
)
.
toBe
(
expected
.
role
)
;
}
else
if
(
typeof
expected
.
checked
!
=
=
"
undefined
"
)
{
expect
(
menuItem
.
getAttribute
(
"
role
"
)
)
.
toBe
(
"
menuitemcheckbox
"
)
;
}
else
{
expect
(
menuItem
.
getAttribute
(
"
role
"
)
)
.
toBe
(
"
menuitem
"
)
;
}
if
(
typeof
expected
.
checked
!
=
=
"
undefined
"
)
{
expect
(
menuItem
.
hasAttribute
(
"
aria
-
checked
"
)
)
.
toBe
(
expected
.
checked
)
;
}
if
(
expected
.
checked
)
{
expect
(
menuItem
.
getAttribute
(
"
aria
-
checked
"
)
)
.
toBe
(
"
true
"
)
;
}
if
(
expected
.
disabled
)
{
expect
(
menuItem
.
hasAttribute
(
"
disabled
"
)
)
.
toBe
(
true
)
;
}
if
(
expected
.
label
)
{
expect
(
menuItem
.
textContent
)
.
toBe
(
expected
.
label
)
;
}
}
module
.
exports
=
{
checkMenuItem
mockAccessible
setupStore
}
;
