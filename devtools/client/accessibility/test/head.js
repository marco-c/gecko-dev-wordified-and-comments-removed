"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
redux
-
head
.
js
"
this
)
;
const
{
ORDERED_PROPS
}
=
require
(
"
devtools
/
client
/
accessibility
/
constants
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
accessibility
.
enabled
"
true
)
;
function
shutdownA11y
(
)
{
if
(
!
Services
.
appinfo
.
accessibilityEnabled
)
{
return
Promise
.
resolve
(
)
;
}
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
Cu
.
forceShrinkingGC
(
)
;
return
new
Promise
(
resolve
=
>
{
let
observe
=
(
subject
topic
data
)
=
>
{
if
(
data
=
=
=
"
0
"
)
{
Services
.
obs
.
removeObserver
(
observe
"
a11y
-
init
-
or
-
shutdown
"
)
;
resolve
(
)
;
}
}
;
Services
.
obs
.
addObserver
(
observe
"
a11y
-
init
-
or
-
shutdown
"
)
;
}
)
;
}
registerCleanupFunction
(
async
(
)
=
>
{
info
(
"
Cleaning
up
.
.
.
"
)
;
await
shutdownA11y
(
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
accessibility
.
enabled
"
)
;
}
)
;
const
EXPANDABLE_PROPS
=
[
"
actions
"
"
states
"
"
attributes
"
]
;
async
function
addTestTab
(
url
)
{
info
(
"
Adding
a
new
test
tab
with
URL
:
'
"
+
url
+
"
'
"
)
;
let
tab
=
await
addTab
(
url
)
;
let
panel
=
await
initAccessibilityPanel
(
tab
)
;
let
win
=
panel
.
panelWin
;
let
doc
=
win
.
document
;
let
store
=
win
.
view
.
store
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
doc
.
getElementById
(
"
accessibility
-
enable
-
button
"
)
win
)
;
await
waitUntilState
(
store
state
=
>
state
.
accessibles
.
size
=
=
=
1
&
&
state
.
details
.
accessible
&
&
state
.
details
.
accessible
.
role
=
=
=
"
document
"
)
;
await
win
.
gToolbox
.
loadTool
(
"
inspector
"
)
;
return
{
tab
browser
:
tab
.
linkedBrowser
panel
win
doc
store
}
;
}
function
disableAccessibilityInspector
(
env
)
{
let
{
doc
win
}
=
env
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
doc
.
getElementById
(
"
accessibility
-
disable
-
button
"
)
win
)
;
}
async
function
initAccessibilityPanel
(
tab
=
gBrowser
.
selectedTab
)
{
let
target
=
TargetFactory
.
forTab
(
tab
)
;
let
toolbox
=
await
gDevTools
.
showToolbox
(
target
"
accessibility
"
)
;
return
toolbox
.
getCurrentPanel
(
)
;
}
async
function
checkTreeState
(
doc
expected
)
{
info
(
"
Checking
tree
state
.
"
)
;
let
hasExpectedStructure
=
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
[
.
.
.
doc
.
querySelectorAll
(
"
.
treeRow
"
)
]
.
every
(
(
row
i
)
=
>
row
.
querySelector
(
"
.
treeLabelCell
"
)
.
textContent
=
=
=
expected
[
i
]
.
role
&
&
row
.
querySelector
(
"
.
treeValueCell
"
)
.
textContent
=
=
=
expected
[
i
]
.
name
)
"
Wait
for
the
right
tree
update
.
"
)
;
ok
(
hasExpectedStructure
"
Tree
structure
is
correct
.
"
)
;
}
async
function
checkSidebarState
(
store
expectedState
)
{
info
(
"
Checking
sidebar
state
.
"
)
;
await
waitUntilState
(
store
(
{
details
}
)
=
>
{
for
(
let
key
of
ORDERED_PROPS
)
{
let
expected
=
expectedState
[
key
]
;
if
(
expected
=
=
=
undefined
)
{
continue
;
}
if
(
EXPANDABLE_PROPS
.
includes
(
key
)
)
{
if
(
JSON
.
stringify
(
details
.
accessible
[
key
]
)
!
=
=
JSON
.
stringify
(
expected
)
)
{
return
false
;
}
}
else
if
(
details
.
accessible
&
&
details
.
accessible
[
key
]
!
=
=
expected
)
{
return
false
;
}
}
ok
(
true
"
Sidebar
state
is
correct
.
"
)
;
return
true
;
}
)
;
}
function
selectRow
(
doc
rowNumber
)
{
info
(
Selecting
row
{
rowNumber
}
.
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
doc
.
querySelectorAll
(
"
.
treeRow
"
)
[
rowNumber
]
doc
.
defaultView
)
;
}
async
function
toggleRow
(
doc
rowNumber
)
{
let
win
=
doc
.
defaultView
;
let
twisty
=
doc
.
querySelectorAll
(
"
.
theme
-
twisty
"
)
[
rowNumber
]
;
let
expected
=
!
twisty
.
classList
.
contains
(
"
open
"
)
;
info
(
{
expected
?
"
Expanding
"
:
"
Collapsing
"
}
row
{
rowNumber
}
.
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
twisty
win
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
twisty
.
classList
.
contains
(
"
devtools
-
throbber
"
)
&
&
expected
=
=
=
twisty
.
classList
.
contains
(
"
open
"
)
"
Twisty
updated
.
"
)
;
}
async
function
runA11yPanelTests
(
tests
env
)
{
for
(
let
{
desc
action
expected
}
of
tests
)
{
info
(
desc
)
;
if
(
action
)
{
await
action
(
env
)
;
}
let
{
tree
sidebar
}
=
expected
;
if
(
tree
)
{
await
checkTreeState
(
env
.
doc
tree
)
;
}
if
(
sidebar
)
{
await
checkSidebarState
(
env
.
store
sidebar
)
;
}
}
}
function
buildURL
(
uri
)
{
return
data
:
text
/
html
{
encodeURIComponent
(
uri
)
}
;
}
function
addA11yPanelTestsTask
(
tests
uri
msg
)
{
tests
.
push
(
{
desc
:
"
Disable
accessibility
inspector
.
"
action
:
env
=
>
disableAccessibilityInspector
(
env
)
expected
:
{
}
}
)
;
add_task
(
async
function
a11yPanelTests
(
)
{
info
(
msg
)
;
let
env
=
await
addTestTab
(
buildURL
(
uri
)
)
;
await
runA11yPanelTests
(
tests
env
)
;
}
)
;
}
function
reload
(
target
waitForTargetEvent
=
"
navigate
"
)
{
executeSoon
(
(
)
=
>
target
.
activeTab
.
reload
(
)
)
;
return
once
(
target
waitForTargetEvent
)
;
}
function
navigate
(
target
url
waitForTargetEvent
=
"
navigate
"
)
{
executeSoon
(
(
)
=
>
target
.
activeTab
.
navigateTo
(
url
)
)
;
return
once
(
target
waitForTargetEvent
)
;
}
