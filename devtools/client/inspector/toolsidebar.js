"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
function
ToolSidebar
(
tabbox
panel
uid
options
=
{
}
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_tabbox
=
tabbox
;
this
.
_uid
=
uid
;
this
.
_panelDoc
=
this
.
_tabbox
.
ownerDocument
;
this
.
_toolPanel
=
panel
;
this
.
_options
=
options
;
if
(
!
options
.
disableTelemetry
)
{
this
.
_telemetry
=
this
.
_toolPanel
.
telemetry
;
}
this
.
_tabs
=
[
]
;
if
(
this
.
_options
.
hideTabstripe
)
{
this
.
_tabbox
.
setAttribute
(
"
hidetabs
"
"
true
"
)
;
}
this
.
render
(
)
;
this
.
_toolPanel
.
emit
(
"
sidebar
-
created
"
this
)
;
}
exports
.
ToolSidebar
=
ToolSidebar
;
ToolSidebar
.
prototype
=
{
TABPANEL_ID_PREFIX
:
"
sidebar
-
panel
-
"
get
React
(
)
{
return
this
.
_toolPanel
.
React
;
}
get
ReactDOM
(
)
{
return
this
.
_toolPanel
.
ReactDOM
;
}
get
browserRequire
(
)
{
return
this
.
_toolPanel
.
browserRequire
;
}
get
InspectorTabPanel
(
)
{
return
this
.
_toolPanel
.
InspectorTabPanel
;
}
get
TabBar
(
)
{
return
this
.
_toolPanel
.
TabBar
;
}
render
:
function
(
)
{
let
sidebar
=
this
.
TabBar
(
{
menuDocument
:
this
.
_toolPanel
.
_toolbox
.
doc
showAllTabsMenu
:
true
sidebarToggleButton
:
this
.
_options
.
sidebarToggleButton
onSelect
:
this
.
handleSelectionChange
.
bind
(
this
)
}
)
;
this
.
_tabbar
=
this
.
ReactDOM
.
render
(
sidebar
this
.
_tabbox
)
;
}
addAllQueuedTabs
:
function
(
)
{
this
.
_tabbar
.
addAllQueuedTabs
(
)
;
}
addTab
:
function
(
id
title
panel
selected
index
)
{
this
.
_tabbar
.
addTab
(
id
title
selected
panel
null
index
)
;
this
.
emit
(
"
new
-
tab
-
registered
"
id
)
;
}
addExistingTab
:
function
(
id
title
selected
index
)
{
let
panel
=
this
.
InspectorTabPanel
(
{
id
:
id
idPrefix
:
this
.
TABPANEL_ID_PREFIX
key
:
id
title
:
title
}
)
;
this
.
addTab
(
id
title
panel
selected
index
)
;
}
addFrameTab
:
function
(
id
title
url
selected
index
)
{
let
panel
=
this
.
InspectorTabPanel
(
{
id
:
id
idPrefix
:
this
.
TABPANEL_ID_PREFIX
key
:
id
title
:
title
url
:
url
onMount
:
this
.
onSidePanelMounted
.
bind
(
this
)
onUnmount
:
this
.
onSidePanelUnmounted
.
bind
(
this
)
}
)
;
this
.
addTab
(
id
title
panel
selected
index
)
;
}
queueTab
:
function
(
id
title
panel
selected
index
)
{
this
.
_tabbar
.
queueTab
(
id
title
selected
panel
null
index
)
;
this
.
emit
(
"
new
-
tab
-
registered
"
id
)
;
}
queueExistingTab
:
function
(
id
title
selected
index
)
{
let
panel
=
this
.
InspectorTabPanel
(
{
id
:
id
idPrefix
:
this
.
TABPANEL_ID_PREFIX
key
:
id
title
:
title
}
)
;
this
.
queueTab
(
id
title
panel
selected
index
)
;
}
queueFrameTab
:
function
(
id
title
url
selected
index
)
{
let
panel
=
this
.
InspectorTabPanel
(
{
id
:
id
idPrefix
:
this
.
TABPANEL_ID_PREFIX
key
:
id
title
:
title
url
:
url
onMount
:
this
.
onSidePanelMounted
.
bind
(
this
)
onUnmount
:
this
.
onSidePanelUnmounted
.
bind
(
this
)
}
)
;
this
.
queueTab
(
id
title
panel
selected
index
)
;
}
onSidePanelMounted
:
function
(
content
props
)
{
let
iframe
=
content
.
querySelector
(
"
iframe
"
)
;
if
(
!
iframe
|
|
iframe
.
getAttribute
(
"
src
"
)
)
{
return
;
}
let
onIFrameLoaded
=
(
event
)
=
>
{
iframe
.
removeEventListener
(
"
load
"
onIFrameLoaded
true
)
;
let
doc
=
event
.
target
;
let
win
=
doc
.
defaultView
;
if
(
"
setPanel
"
in
win
)
{
win
.
setPanel
(
this
.
_toolPanel
iframe
)
;
}
this
.
emit
(
props
.
id
+
"
-
ready
"
)
;
}
;
iframe
.
addEventListener
(
"
load
"
onIFrameLoaded
true
)
;
iframe
.
setAttribute
(
"
src
"
props
.
url
)
;
}
onSidePanelUnmounted
:
function
(
content
props
)
{
let
iframe
=
content
.
querySelector
(
"
iframe
"
)
;
if
(
!
iframe
|
|
!
iframe
.
hasAttribute
(
"
src
"
)
)
{
return
;
}
let
win
=
iframe
.
contentWindow
;
if
(
"
destroy
"
in
win
)
{
win
.
destroy
(
this
.
_toolPanel
iframe
)
;
}
iframe
.
removeAttribute
(
"
src
"
)
;
}
async
removeTab
(
tabId
tabPanelId
)
{
this
.
_tabbar
.
removeTab
(
tabId
)
;
let
win
=
this
.
getWindowForTab
(
tabId
)
;
if
(
win
&
&
(
"
destroy
"
in
win
)
)
{
await
win
.
destroy
(
)
;
}
this
.
emit
(
"
tab
-
unregistered
"
tabId
)
;
}
toggleTab
:
function
(
isVisible
id
)
{
this
.
_tabbar
.
toggleTab
(
id
isVisible
)
;
}
select
:
function
(
id
)
{
this
.
_tabbar
.
select
(
id
)
;
}
getCurrentTabID
:
function
(
)
{
return
this
.
_currentTool
;
}
getTabPanel
:
function
(
id
)
{
return
this
.
_panelDoc
.
querySelector
(
"
#
"
+
this
.
TABPANEL_ID_PREFIX
+
id
+
"
#
"
+
id
)
;
}
handleSelectionChange
:
function
(
id
)
{
if
(
this
.
_destroyed
)
{
return
;
}
let
previousTool
=
this
.
_currentTool
;
if
(
previousTool
)
{
this
.
emit
(
previousTool
+
"
-
unselected
"
)
;
}
this
.
_currentTool
=
id
;
this
.
updateTelemetryOnChange
(
id
previousTool
)
;
this
.
emit
(
this
.
_currentTool
+
"
-
selected
"
)
;
this
.
emit
(
"
select
"
this
.
_currentTool
)
;
}
updateTelemetryOnChange
:
function
(
currentToolId
previousToolId
)
{
if
(
currentToolId
=
=
=
previousToolId
|
|
!
this
.
_telemetry
)
{
return
;
}
if
(
previousToolId
)
{
this
.
_telemetry
.
toolClosed
(
previousToolId
)
;
this
.
_telemetry
.
recordEvent
(
"
devtools
.
main
"
"
sidepanel_changed
"
"
inspector
"
null
{
oldpanel
:
previousToolId
newpanel
:
currentToolId
}
)
;
}
this
.
_telemetry
.
toolOpened
(
currentToolId
)
;
}
show
:
function
(
id
)
{
this
.
_tabbox
.
removeAttribute
(
"
hidden
"
)
;
if
(
id
)
{
this
.
select
(
id
)
;
}
this
.
emit
(
"
show
"
)
;
}
hide
:
function
(
)
{
this
.
_tabbox
.
setAttribute
(
"
hidden
"
"
true
"
)
;
this
.
emit
(
"
hide
"
)
;
}
getWindowForTab
:
function
(
id
)
{
let
panel
=
this
.
getTabPanel
(
id
)
;
if
(
!
panel
|
|
!
panel
.
firstElementChild
|
|
!
panel
.
firstElementChild
.
contentWindow
)
{
return
null
;
}
return
panel
.
firstElementChild
.
contentWindow
;
}
async
destroy
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
this
.
emit
(
"
destroy
"
)
;
let
tabpanels
=
[
.
.
.
this
.
_tabbox
.
querySelectorAll
(
"
.
tab
-
panel
-
box
"
)
]
;
for
(
let
panel
of
tabpanels
)
{
let
iframe
=
panel
.
querySelector
(
"
iframe
"
)
;
if
(
!
iframe
)
{
continue
;
}
let
win
=
iframe
.
contentWindow
;
if
(
win
&
&
(
"
destroy
"
in
win
)
)
{
await
win
.
destroy
(
)
;
}
panel
.
remove
(
)
;
}
if
(
this
.
_currentTool
&
&
this
.
_telemetry
)
{
this
.
_telemetry
.
toolClosed
(
this
.
_currentTool
)
;
}
this
.
_toolPanel
.
emit
(
"
sidebar
-
destroyed
"
this
)
;
this
.
_tabs
=
null
;
this
.
_tabbox
=
null
;
this
.
_telemetry
=
null
;
this
.
_panelDoc
=
null
;
this
.
_toolPanel
=
null
;
}
}
;
