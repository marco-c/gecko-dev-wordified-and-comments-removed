"
use
strict
"
;
const
{
PureComponent
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
mjs
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
mjs
"
)
;
const
{
getStr
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
layout
/
utils
/
l10n
.
js
"
)
;
const
{
getWritingModeMatrix
getCSSMatrixTransform
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
layout
/
dom
-
matrix
-
2d
.
js
"
)
;
const
Types
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
grids
/
types
.
js
"
)
;
const
GRID_HIGHLIGHTING_DEBOUNCE
=
50
;
const
GRID_OUTLINE_MAX_ROWS_PREF
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
gridinspector
.
gridOutlineMaxRows
"
)
;
const
GRID_OUTLINE_MAX_COLUMNS_PREF
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
gridinspector
.
gridOutlineMaxColumns
"
)
;
const
TRANSLATE_X
=
0
;
const
TRANSLATE_Y
=
0
;
const
GRID_CELL_SCALE_FACTOR
=
50
;
const
VIEWPORT_MIN_HEIGHT
=
100
;
const
VIEWPORT_MAX_HEIGHT
=
150
;
const
{
showGridHighlighter
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
grids
/
actions
/
grid
-
highlighter
.
js
"
)
;
class
GridOutline
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
dispatch
:
PropTypes
.
func
.
isRequired
grids
:
PropTypes
.
arrayOf
(
PropTypes
.
shape
(
Types
.
grid
)
)
.
isRequired
}
;
}
static
getDerivedStateFromProps
(
props
)
{
const
selectedGrid
=
props
.
grids
.
find
(
grid
=
>
grid
.
highlighted
)
;
const
{
width
height
}
=
selectedGrid
?
.
gridFragments
.
length
?
getTotalWidthAndHeight
(
selectedGrid
)
:
{
width
:
0
height
:
0
}
;
let
showOutline
;
if
(
selectedGrid
?
.
gridFragments
.
length
)
{
const
{
cols
rows
}
=
selectedGrid
.
gridFragments
[
0
]
;
showOutline
=
cols
.
lines
.
length
<
=
GRID_OUTLINE_MAX_COLUMNS_PREF
&
&
rows
.
lines
.
length
<
=
GRID_OUTLINE_MAX_ROWS_PREF
;
}
return
{
height
width
selectedGrid
showOutline
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
height
:
0
selectedGrid
:
null
showOutline
:
true
width
:
0
}
;
this
.
doHighlightCell
=
this
.
doHighlightCell
.
bind
(
this
)
;
this
.
getGridAreaName
=
this
.
getGridAreaName
.
bind
(
this
)
;
this
.
getHeight
=
this
.
getHeight
.
bind
(
this
)
;
this
.
onHighlightCell
=
this
.
onHighlightCell
.
bind
(
this
)
;
this
.
renderCannotShowOutlineText
=
this
.
renderCannotShowOutlineText
.
bind
(
this
)
;
this
.
renderGrid
=
this
.
renderGrid
.
bind
(
this
)
;
this
.
renderGridCell
=
this
.
renderGridCell
.
bind
(
this
)
;
this
.
renderGridOutline
=
this
.
renderGridOutline
.
bind
(
this
)
;
this
.
renderGridOutlineBorder
=
this
.
renderGridOutlineBorder
.
bind
(
this
)
;
this
.
renderOutline
=
this
.
renderOutline
.
bind
(
this
)
;
}
doHighlightCell
(
target
hide
)
{
const
{
dispatch
grids
}
=
this
.
props
;
const
name
=
target
.
dataset
.
gridAreaName
;
const
id
=
target
.
dataset
.
gridId
;
const
gridFragmentIndex
=
target
.
dataset
.
gridFragmentIndex
;
const
rowNumber
=
target
.
dataset
.
gridRow
;
const
columnNumber
=
target
.
dataset
.
gridColumn
;
const
nodeFront
=
grids
[
id
]
.
nodeFront
;
const
options
=
{
showGridArea
:
name
showGridCell
:
{
gridFragmentIndex
rowNumber
columnNumber
}
}
;
if
(
hide
)
{
dispatch
(
showGridHighlighter
(
nodeFront
)
)
;
}
else
{
dispatch
(
showGridHighlighter
(
nodeFront
options
)
)
;
}
}
getGridAreaName
(
columnNumber
rowNumber
areas
)
{
const
gridArea
=
areas
.
find
(
area
=
>
area
.
rowStart
<
=
rowNumber
&
&
area
.
rowEnd
>
rowNumber
&
&
area
.
columnStart
<
=
columnNumber
&
&
area
.
columnEnd
>
columnNumber
)
;
if
(
!
gridArea
)
{
return
null
;
}
return
gridArea
.
name
;
}
getHeight
(
)
{
const
{
height
}
=
this
.
state
;
if
(
height
>
=
VIEWPORT_MAX_HEIGHT
)
{
return
VIEWPORT_MAX_HEIGHT
;
}
else
if
(
height
<
=
VIEWPORT_MIN_HEIGHT
)
{
return
VIEWPORT_MIN_HEIGHT
;
}
return
height
;
}
renderCannotShowOutlineText
(
)
{
return
dom
.
div
(
{
className
:
"
grid
-
outline
-
text
"
}
dom
.
span
(
{
className
:
"
grid
-
outline
-
text
-
icon
"
title
:
getStr
(
"
layout
.
cannotShowGridOutline
.
title
"
)
}
)
getStr
(
"
layout
.
cannotShowGridOutline
"
)
)
;
}
renderGrid
(
grid
)
{
const
gridFragmentIndex
=
0
;
const
{
id
color
gridFragments
}
=
grid
;
const
{
rows
cols
areas
}
=
gridFragments
[
gridFragmentIndex
]
;
const
numberOfColumns
=
cols
.
lines
.
length
-
1
;
const
numberOfRows
=
rows
.
lines
.
length
-
1
;
const
rectangles
=
[
]
;
let
x
=
0
;
let
y
=
0
;
let
width
=
0
;
let
height
=
0
;
for
(
let
rowNumber
=
1
;
rowNumber
<
=
numberOfRows
;
rowNumber
+
+
)
{
height
=
GRID_CELL_SCALE_FACTOR
*
(
rows
.
tracks
[
rowNumber
-
1
]
.
breadth
/
100
)
;
for
(
let
columnNumber
=
1
;
columnNumber
<
=
numberOfColumns
;
columnNumber
+
+
)
{
width
=
GRID_CELL_SCALE_FACTOR
*
(
cols
.
tracks
[
columnNumber
-
1
]
.
breadth
/
100
)
;
const
gridAreaName
=
this
.
getGridAreaName
(
columnNumber
rowNumber
areas
)
;
const
gridCell
=
this
.
renderGridCell
(
id
gridFragmentIndex
x
y
rowNumber
columnNumber
color
gridAreaName
width
height
)
;
rectangles
.
push
(
gridCell
)
;
x
+
=
width
;
}
x
=
0
;
y
+
=
height
;
}
const
cellGroupStyle
=
{
}
;
const
writingModeMatrix
=
getWritingModeMatrix
(
this
.
state
grid
)
;
cellGroupStyle
.
transform
=
getCSSMatrixTransform
(
writingModeMatrix
)
;
const
cellGroup
=
dom
.
g
(
{
id
:
"
grid
-
cell
-
group
"
style
:
cellGroupStyle
}
rectangles
)
;
const
border
=
this
.
renderGridOutlineBorder
(
this
.
state
.
width
this
.
state
.
height
color
)
;
return
[
border
cellGroup
]
;
}
renderGridCell
(
id
gridFragmentIndex
x
y
rowNumber
columnNumber
color
gridAreaName
width
height
)
{
return
dom
.
rect
(
{
key
:
{
id
}
-
{
rowNumber
}
-
{
columnNumber
}
className
:
"
grid
-
outline
-
cell
"
"
data
-
grid
-
area
-
name
"
:
gridAreaName
"
data
-
grid
-
fragment
-
index
"
:
gridFragmentIndex
"
data
-
grid
-
id
"
:
id
"
data
-
grid
-
row
"
:
rowNumber
"
data
-
grid
-
column
"
:
columnNumber
x
y
width
height
fill
:
"
none
"
onMouseEnter
:
this
.
onHighlightCell
onMouseLeave
:
this
.
onHighlightCell
}
)
;
}
renderGridOutline
(
grid
)
{
const
{
color
}
=
grid
;
return
dom
.
g
(
{
id
:
"
grid
-
outline
-
group
"
className
:
"
grid
-
outline
-
group
"
style
:
{
color
}
}
this
.
renderGrid
(
grid
)
)
;
}
renderGridOutlineBorder
(
borderWidth
borderHeight
)
{
return
dom
.
rect
(
{
key
:
"
border
"
className
:
"
grid
-
outline
-
border
"
x
:
0
y
:
0
width
:
borderWidth
height
:
borderHeight
}
)
;
}
renderOutline
(
)
{
const
{
height
selectedGrid
showOutline
width
}
=
this
.
state
;
return
showOutline
?
dom
.
svg
(
{
id
:
"
grid
-
outline
"
width
:
"
100
%
"
height
:
this
.
getHeight
(
)
viewBox
:
{
TRANSLATE_X
}
{
TRANSLATE_Y
}
{
width
}
{
height
}
}
this
.
renderGridOutline
(
selectedGrid
)
)
:
this
.
renderCannotShowOutlineText
(
)
;
}
onHighlightCell
(
{
target
type
}
)
{
if
(
this
.
highlightTimeout
)
{
clearTimeout
(
this
.
highlightTimeout
)
;
}
this
.
highlightTimeout
=
setTimeout
(
(
)
=
>
{
this
.
doHighlightCell
(
target
type
=
=
=
"
mouseleave
"
)
;
this
.
highlightTimeout
=
null
;
}
GRID_HIGHLIGHTING_DEBOUNCE
)
;
}
render
(
)
{
const
{
selectedGrid
}
=
this
.
state
;
return
selectedGrid
?
.
gridFragments
.
length
?
dom
.
div
(
{
id
:
"
grid
-
outline
-
container
"
className
:
"
grid
-
outline
-
container
"
}
this
.
renderOutline
(
)
)
:
null
;
}
}
function
getTotalWidthAndHeight
(
grid
)
{
const
{
gridFragments
}
=
grid
;
const
{
rows
cols
}
=
gridFragments
[
0
]
;
let
height
=
0
;
for
(
let
i
=
0
;
i
<
rows
.
lines
.
length
-
1
;
i
+
+
)
{
height
+
=
GRID_CELL_SCALE_FACTOR
*
(
rows
.
tracks
[
i
]
.
breadth
/
100
)
;
}
let
width
=
0
;
for
(
let
i
=
0
;
i
<
cols
.
lines
.
length
-
1
;
i
+
+
)
{
width
+
=
GRID_CELL_SCALE_FACTOR
*
(
cols
.
tracks
[
i
]
.
breadth
/
100
)
;
}
if
(
grid
.
writingMode
!
=
"
horizontal
-
tb
"
)
{
[
width
height
]
=
[
height
width
]
;
}
return
{
width
height
}
;
}
module
.
exports
=
GridOutline
;
