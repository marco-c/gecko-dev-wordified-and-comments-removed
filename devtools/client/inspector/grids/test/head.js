"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
shared
-
redux
-
head
.
js
"
this
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
layoutview
.
enabled
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolbox
.
footer
.
height
"
350
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
layoutview
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
footer
.
height
"
)
;
}
)
;
const
HIGHLIGHTER_TYPE
=
"
CssGridHighlighter
"
;
function
openLayoutView
(
)
{
return
openInspectorSidebarTab
(
"
layoutview
"
)
.
then
(
data
=
>
{
function
mockHighlighter
(
{
highlighter
}
)
{
highlighter
.
showBoxModel
=
function
(
)
{
return
promise
.
resolve
(
)
;
}
;
highlighter
.
hideBoxModel
=
function
(
)
{
return
promise
.
resolve
(
)
;
}
;
}
mockHighlighter
(
data
.
toolbox
)
;
return
{
toolbox
:
data
.
toolbox
inspector
:
data
.
inspector
gridInspector
:
data
.
inspector
.
gridInspector
testActor
:
data
.
testActor
}
;
}
)
;
}
var
simulateColorPickerChange
=
Task
.
async
(
function
*
(
colorPicker
newRgba
)
{
info
(
"
Getting
the
spectrum
colorpicker
object
"
)
;
let
spectrum
=
yield
colorPicker
.
spectrum
;
info
(
"
Setting
the
new
color
"
)
;
spectrum
.
rgb
=
newRgba
;
info
(
"
Applying
the
change
"
)
;
spectrum
.
updateUI
(
)
;
spectrum
.
onChange
(
)
;
}
)
;
