"
use
strict
"
;
const
{
UPDATE_GRID_COLOR
UPDATE_GRID_HIGHLIGHTED
UPDATE_GRIDS
}
=
require
(
"
devtools
/
client
/
inspector
/
grids
/
actions
/
index
"
)
;
const
INITIAL_GRIDS
=
[
]
;
const
reducers
=
{
[
UPDATE_GRID_COLOR
]
(
grids
{
nodeFront
color
}
)
{
const
newGrids
=
grids
.
map
(
g
=
>
{
if
(
g
.
nodeFront
=
=
=
nodeFront
)
{
g
=
Object
.
assign
(
{
}
g
{
color
}
)
;
}
return
g
;
}
)
;
return
newGrids
;
}
[
UPDATE_GRID_HIGHLIGHTED
]
(
grids
{
nodeFront
highlighted
}
)
{
const
maxHighlighters
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
gridinspector
.
maxHighlighters
"
)
;
const
highlightedNodeFronts
=
grids
.
filter
(
g
=
>
g
.
highlighted
)
.
map
(
g
=
>
g
.
nodeFront
)
;
let
numHighlighted
=
highlightedNodeFronts
.
length
;
if
(
!
highlightedNodeFronts
.
includes
(
nodeFront
)
&
&
highlighted
)
{
numHighlighted
+
=
1
;
}
else
if
(
highlightedNodeFronts
.
includes
(
nodeFront
)
&
&
!
highlighted
)
{
numHighlighted
-
=
1
;
}
return
grids
.
map
(
g
=
>
{
if
(
maxHighlighters
=
=
=
1
)
{
return
Object
.
assign
(
{
}
g
{
highlighted
:
g
.
nodeFront
=
=
=
nodeFront
&
&
highlighted
}
)
;
}
else
if
(
numHighlighted
=
=
=
maxHighlighters
&
&
g
.
nodeFront
!
=
=
nodeFront
)
{
return
Object
.
assign
(
{
}
g
{
disabled
:
!
g
.
highlighted
}
)
;
}
else
if
(
g
.
nodeFront
=
=
=
nodeFront
)
{
return
Object
.
assign
(
{
}
g
{
disabled
:
false
highlighted
}
)
;
}
return
Object
.
assign
(
{
}
g
{
disabled
:
false
}
)
;
}
)
;
}
[
UPDATE_GRIDS
]
(
_
{
grids
}
)
{
return
grids
;
}
}
;
module
.
exports
=
function
(
grids
=
INITIAL_GRIDS
action
)
{
const
reducer
=
reducers
[
action
.
type
]
;
if
(
!
reducer
)
{
return
grids
;
}
return
reducer
(
grids
action
)
;
}
;
