"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
flags
=
require
(
"
devtools
/
shared
/
flags
"
)
;
const
{
throttle
}
=
require
(
"
devtools
/
shared
/
throttle
"
)
;
const
{
updateGridColor
updateGridHighlighted
updateGrids
}
=
require
(
"
.
/
actions
/
grids
"
)
;
const
{
updateShowGridAreas
updateShowGridLineNumbers
updateShowInfiniteLines
}
=
require
(
"
.
/
actions
/
highlighter
-
settings
"
)
;
loader
.
lazyRequireGetter
(
this
"
compareFragmentsGeometry
"
"
devtools
/
client
/
inspector
/
grids
/
utils
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
parseURL
"
"
devtools
/
client
/
shared
/
source
-
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
asyncStorage
"
"
devtools
/
shared
/
async
-
storage
"
)
;
const
CSS_GRID_COUNT_HISTOGRAM_ID
=
"
DEVTOOLS_NUMBER_OF_CSS_GRIDS_IN_A_PAGE
"
;
const
SHOW_GRID_AREAS
=
"
devtools
.
gridinspector
.
showGridAreas
"
;
const
SHOW_GRID_LINE_NUMBERS
=
"
devtools
.
gridinspector
.
showGridLineNumbers
"
;
const
SHOW_INFINITE_LINES_PREF
=
"
devtools
.
gridinspector
.
showInfiniteLines
"
;
const
TELEMETRY_GRID_AREAS_OVERLAY_CHECKED
=
"
devtools
.
grid
.
showGridAreasOverlay
.
checked
"
;
const
TELEMETRY_GRID_LINE_NUMBERS_CHECKED
=
"
devtools
.
grid
.
showGridLineNumbers
.
checked
"
;
const
TELEMETRY_INFINITE_LINES_CHECKED
=
"
devtools
.
grid
.
showInfiniteLines
.
checked
"
;
const
GRID_COLORS
=
[
"
#
9400FF
"
"
#
DF00A9
"
"
#
0A84FF
"
"
#
12BC00
"
"
#
EA8000
"
"
#
00B0BD
"
"
#
D70022
"
"
#
4B42FF
"
"
#
B5007F
"
"
#
058B00
"
"
#
A47F00
"
"
#
005A71
"
]
;
class
GridInspector
{
constructor
(
inspector
window
)
{
this
.
document
=
window
.
document
;
this
.
inspector
=
inspector
;
this
.
store
=
inspector
.
store
;
this
.
telemetry
=
inspector
.
telemetry
;
this
.
walker
=
this
.
inspector
.
walker
;
this
.
maxHighlighters
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
gridinspector
.
maxHighlighters
"
)
;
this
.
onHighlighterShown
=
this
.
onHighlighterShown
.
bind
(
this
)
;
this
.
onHighlighterHidden
=
this
.
onHighlighterHidden
.
bind
(
this
)
;
this
.
onNavigate
=
this
.
onNavigate
.
bind
(
this
)
;
this
.
onReflow
=
throttle
(
this
.
onReflow
500
this
)
;
this
.
onSetGridOverlayColor
=
this
.
onSetGridOverlayColor
.
bind
(
this
)
;
this
.
onShowGridOutlineHighlight
=
this
.
onShowGridOutlineHighlight
.
bind
(
this
)
;
this
.
onSidebarSelect
=
this
.
onSidebarSelect
.
bind
(
this
)
;
this
.
onToggleGridHighlighter
=
this
.
onToggleGridHighlighter
.
bind
(
this
)
;
this
.
onToggleShowGridAreas
=
this
.
onToggleShowGridAreas
.
bind
(
this
)
;
this
.
onToggleShowGridLineNumbers
=
this
.
onToggleShowGridLineNumbers
.
bind
(
this
)
;
this
.
onToggleShowInfiniteLines
=
this
.
onToggleShowInfiniteLines
.
bind
(
this
)
;
this
.
updateGridPanel
=
this
.
updateGridPanel
.
bind
(
this
)
;
this
.
init
(
)
;
}
get
highlighters
(
)
{
if
(
!
this
.
_highlighters
)
{
this
.
_highlighters
=
this
.
inspector
.
highlighters
;
}
return
this
.
_highlighters
;
}
async
init
(
)
{
if
(
!
this
.
inspector
)
{
return
;
}
try
{
this
.
layoutInspector
=
await
this
.
inspector
.
walker
.
getLayoutInspector
(
)
;
}
catch
(
e
)
{
return
;
}
if
(
flags
.
testing
)
{
this
.
highlighters
.
on
(
"
grid
-
highlighter
-
hidden
"
this
.
onHighlighterHidden
)
;
this
.
highlighters
.
on
(
"
grid
-
highlighter
-
shown
"
this
.
onHighlighterShown
)
;
}
else
{
this
.
document
.
addEventListener
(
"
mousemove
"
(
)
=
>
{
this
.
highlighters
.
on
(
"
grid
-
highlighter
-
hidden
"
this
.
onHighlighterHidden
)
;
this
.
highlighters
.
on
(
"
grid
-
highlighter
-
shown
"
this
.
onHighlighterShown
)
;
}
{
once
:
true
}
)
;
}
this
.
inspector
.
sidebar
.
on
(
"
select
"
this
.
onSidebarSelect
)
;
this
.
inspector
.
on
(
"
new
-
root
"
this
.
onNavigate
)
;
this
.
onSidebarSelect
(
)
;
}
destroy
(
)
{
if
(
this
.
_highlighters
)
{
this
.
highlighters
.
off
(
"
grid
-
highlighter
-
hidden
"
this
.
onHighlighterHidden
)
;
this
.
highlighters
.
off
(
"
grid
-
highlighter
-
shown
"
this
.
onHighlighterShown
)
;
}
this
.
inspector
.
sidebar
.
off
(
"
select
"
this
.
onSidebarSelect
)
;
this
.
inspector
.
off
(
"
new
-
root
"
this
.
onNavigate
)
;
this
.
inspector
.
reflowTracker
.
untrackReflows
(
this
this
.
onReflow
)
;
this
.
_highlighters
=
null
;
this
.
document
=
null
;
this
.
inspector
=
null
;
this
.
layoutInspector
=
null
;
this
.
store
=
null
;
this
.
walker
=
null
;
}
getComponentProps
(
)
{
return
{
onSetGridOverlayColor
:
this
.
onSetGridOverlayColor
onShowGridOutlineHighlight
:
this
.
onShowGridOutlineHighlight
onToggleGridHighlighter
:
this
.
onToggleGridHighlighter
onToggleShowGridAreas
:
this
.
onToggleShowGridAreas
onToggleShowGridLineNumbers
:
this
.
onToggleShowGridLineNumbers
onToggleShowInfiniteLines
:
this
.
onToggleShowInfiniteLines
}
;
}
getInitialGridColor
(
nodeFront
customColor
fallbackColor
)
{
const
highlighted
=
this
.
highlighters
.
gridHighlighters
.
has
(
nodeFront
)
;
let
color
;
if
(
customColor
)
{
color
=
customColor
;
}
else
if
(
highlighted
&
&
this
.
highlighters
.
state
.
grids
.
has
(
nodeFront
.
actorID
)
)
{
color
=
this
.
highlighters
.
state
.
grids
.
get
(
nodeFront
.
actorID
)
.
options
.
color
;
}
else
{
color
=
this
.
getGridColorForNodeFront
(
nodeFront
)
;
}
return
color
|
|
fallbackColor
;
}
getGridColorForNodeFront
(
nodeFront
)
{
const
{
grids
}
=
this
.
store
.
getState
(
)
;
for
(
const
grid
of
grids
)
{
if
(
grid
.
nodeFront
=
=
=
nodeFront
)
{
return
grid
.
color
;
}
}
return
null
;
}
haveCurrentFragmentsChanged
(
newGridFronts
)
{
const
gridHighlighters
=
this
.
highlighters
.
gridHighlighters
;
if
(
!
gridHighlighters
.
size
)
{
return
false
;
}
const
gridFronts
=
newGridFronts
.
filter
(
g
=
>
gridHighlighters
.
has
(
g
.
containerNodeFront
)
)
;
if
(
!
gridFronts
.
length
)
{
return
false
;
}
const
{
grids
}
=
this
.
store
.
getState
(
)
;
for
(
const
node
of
gridHighlighters
.
keys
(
)
)
{
const
oldFragments
=
grids
.
find
(
g
=
>
g
.
nodeFront
=
=
=
node
)
.
gridFragments
;
const
newFragments
=
newGridFronts
.
find
(
g
=
>
g
.
containerNodeFront
=
=
=
node
)
.
gridFragments
;
if
(
!
compareFragmentsGeometry
(
oldFragments
newFragments
)
)
{
return
true
;
}
}
return
false
;
}
isPanelVisible
(
)
{
return
this
.
inspector
&
&
this
.
inspector
.
toolbox
&
&
this
.
inspector
.
sidebar
&
&
this
.
inspector
.
toolbox
.
currentToolId
=
=
=
"
inspector
"
&
&
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
=
"
layoutview
"
;
}
async
updateGridPanel
(
)
{
if
(
!
this
.
inspector
|
|
!
this
.
store
)
{
return
;
}
let
gridFronts
;
try
{
gridFronts
=
await
this
.
layoutInspector
.
getGrids
(
this
.
walker
.
rootNode
)
;
}
catch
(
e
)
{
return
;
}
if
(
!
gridFronts
.
length
)
{
try
{
this
.
store
.
dispatch
(
updateGrids
(
[
]
)
)
;
this
.
inspector
.
emit
(
"
grid
-
panel
-
updated
"
)
;
return
;
}
catch
(
e
)
{
return
;
}
}
const
currentUrl
=
this
.
inspector
.
target
.
url
;
if
(
currentUrl
!
=
this
.
inspector
.
previousURL
)
{
this
.
telemetry
.
getHistogramById
(
CSS_GRID_COUNT_HISTOGRAM_ID
)
.
add
(
gridFronts
.
length
)
;
this
.
inspector
.
previousURL
=
currentUrl
;
}
const
hostname
=
parseURL
(
currentUrl
)
.
hostname
|
|
parseURL
(
currentUrl
)
.
protocol
;
const
customColors
=
await
asyncStorage
.
getItem
(
"
gridInspectorHostColors
"
)
|
|
{
}
;
const
grids
=
[
]
;
for
(
let
i
=
0
;
i
<
gridFronts
.
length
;
i
+
+
)
{
const
grid
=
gridFronts
[
i
]
;
let
nodeFront
=
grid
.
containerNodeFront
;
if
(
!
nodeFront
)
{
try
{
nodeFront
=
await
this
.
walker
.
getNodeFromActor
(
grid
.
actorID
[
"
containerEl
"
]
)
;
}
catch
(
e
)
{
return
;
}
}
const
colorForHost
=
customColors
[
hostname
]
?
customColors
[
hostname
]
[
i
]
:
null
;
const
fallbackColor
=
GRID_COLORS
[
i
%
GRID_COLORS
.
length
]
;
const
color
=
this
.
getInitialGridColor
(
nodeFront
colorForHost
fallbackColor
)
;
const
highlighted
=
this
.
highlighters
.
gridHighlighters
.
has
(
nodeFront
)
;
const
disabled
=
!
highlighted
&
&
this
.
maxHighlighters
>
1
&
&
this
.
highlighters
.
gridHighlighters
.
size
=
=
=
this
.
maxHighlighters
;
const
isSubgrid
=
grid
.
isSubgrid
;
const
gridData
=
{
id
:
i
actorID
:
grid
.
actorID
color
disabled
direction
:
grid
.
direction
gridFragments
:
grid
.
gridFragments
highlighted
isSubgrid
nodeFront
parentNodeActorID
:
null
subgrids
:
[
]
writingMode
:
grid
.
writingMode
}
;
if
(
isSubgrid
)
{
const
parentGridNodeFront
=
await
grid
.
getParentGridNode
(
this
.
walker
)
;
if
(
!
parentGridNodeFront
)
{
return
;
}
const
parentIndex
=
grids
.
findIndex
(
g
=
>
g
.
nodeFront
.
actorID
=
=
=
parentGridNodeFront
.
actorID
)
;
gridData
.
parentNodeActorID
=
parentGridNodeFront
.
actorID
;
grids
[
parentIndex
]
.
subgrids
.
push
(
gridData
.
id
)
;
}
grids
.
push
(
gridData
)
;
}
this
.
store
.
dispatch
(
updateGrids
(
grids
)
)
;
this
.
inspector
.
emit
(
"
grid
-
panel
-
updated
"
)
;
}
onHighlighterShown
(
nodeFront
)
{
this
.
onHighlighterChange
(
nodeFront
true
)
;
}
onHighlighterHidden
(
nodeFront
)
{
this
.
onHighlighterChange
(
nodeFront
false
)
;
}
onHighlighterChange
(
nodeFront
highlighted
)
{
if
(
!
this
.
isPanelVisible
(
)
)
{
return
;
}
const
{
grids
}
=
this
.
store
.
getState
(
)
;
const
grid
=
grids
.
find
(
g
=
>
g
.
nodeFront
=
=
=
nodeFront
)
;
if
(
!
grid
|
|
grid
.
highlighted
=
=
=
highlighted
)
{
return
;
}
this
.
store
.
dispatch
(
updateGridHighlighted
(
nodeFront
highlighted
)
)
;
}
onNavigate
(
)
{
if
(
this
.
isPanelVisible
(
)
)
{
this
.
updateGridPanel
(
)
;
}
}
async
onReflow
(
)
{
if
(
!
this
.
isPanelVisible
(
)
)
{
return
;
}
const
{
grids
}
=
this
.
store
.
getState
(
)
;
let
newGridFronts
;
try
{
newGridFronts
=
await
this
.
layoutInspector
.
getGrids
(
this
.
walker
.
rootNode
)
;
}
catch
(
e
)
{
return
;
}
if
(
grids
.
length
&
&
grids
.
some
(
grid
=
>
!
grid
.
nodeFront
.
actorID
)
)
{
this
.
updateGridPanel
(
newGridFronts
)
;
return
;
}
const
oldNodeFronts
=
grids
.
map
(
grid
=
>
grid
.
nodeFront
.
actorID
)
;
const
newNodeFronts
=
newGridFronts
.
filter
(
grid
=
>
grid
.
containerNode
)
.
map
(
grid
=
>
grid
.
containerNodeFront
.
actorID
)
;
if
(
grids
.
length
=
=
=
newGridFronts
.
length
&
&
oldNodeFronts
.
sort
(
)
.
join
(
"
"
)
=
=
newNodeFronts
.
sort
(
)
.
join
(
"
"
)
&
&
!
this
.
haveCurrentFragmentsChanged
(
newGridFronts
)
)
{
return
;
}
this
.
updateGridPanel
(
newGridFronts
)
;
}
async
onSetGridOverlayColor
(
node
color
)
{
this
.
store
.
dispatch
(
updateGridColor
(
node
color
)
)
;
const
{
grids
}
=
this
.
store
.
getState
(
)
;
const
currentUrl
=
this
.
inspector
.
target
.
url
;
const
hostname
=
parseURL
(
currentUrl
)
.
hostname
|
|
parseURL
(
currentUrl
)
.
protocol
;
const
customGridColors
=
await
asyncStorage
.
getItem
(
"
gridInspectorHostColors
"
)
|
|
{
}
;
for
(
const
grid
of
grids
)
{
if
(
grid
.
nodeFront
=
=
=
node
)
{
if
(
!
customGridColors
[
hostname
]
)
{
customGridColors
[
hostname
]
=
[
]
;
}
customGridColors
[
hostname
]
[
grid
.
id
]
=
color
;
await
asyncStorage
.
setItem
(
"
gridInspectorHostColors
"
customGridColors
)
;
if
(
grid
.
highlighted
)
{
this
.
highlighters
.
showGridHighlighter
(
node
)
;
}
}
}
}
onShowGridOutlineHighlight
(
node
options
)
{
this
.
highlighters
.
showGridHighlighter
(
node
options
)
;
}
onSidebarSelect
(
)
{
if
(
!
this
.
isPanelVisible
(
)
)
{
this
.
inspector
.
reflowTracker
.
untrackReflows
(
this
this
.
onReflow
)
;
return
;
}
this
.
inspector
.
reflowTracker
.
trackReflows
(
this
this
.
onReflow
)
;
this
.
updateGridPanel
(
)
;
}
onToggleGridHighlighter
(
node
)
{
const
{
grids
}
=
this
.
store
.
getState
(
)
;
const
grid
=
grids
.
find
(
g
=
>
g
.
nodeFront
=
=
=
node
)
;
this
.
store
.
dispatch
(
updateGridHighlighted
(
node
!
grid
.
highlighted
)
)
;
this
.
highlighters
.
toggleGridHighlighter
(
node
"
grid
"
)
;
}
onToggleShowGridAreas
(
enabled
)
{
this
.
store
.
dispatch
(
updateShowGridAreas
(
enabled
)
)
;
Services
.
prefs
.
setBoolPref
(
SHOW_GRID_AREAS
enabled
)
;
if
(
enabled
)
{
this
.
telemetry
.
scalarSet
(
TELEMETRY_GRID_AREAS_OVERLAY_CHECKED
1
)
;
}
const
{
grids
}
=
this
.
store
.
getState
(
)
;
for
(
const
grid
of
grids
)
{
if
(
grid
.
highlighted
)
{
this
.
highlighters
.
showGridHighlighter
(
grid
.
nodeFront
)
;
}
}
}
onToggleShowGridLineNumbers
(
enabled
)
{
this
.
store
.
dispatch
(
updateShowGridLineNumbers
(
enabled
)
)
;
Services
.
prefs
.
setBoolPref
(
SHOW_GRID_LINE_NUMBERS
enabled
)
;
if
(
enabled
)
{
this
.
telemetry
.
scalarSet
(
TELEMETRY_GRID_LINE_NUMBERS_CHECKED
1
)
;
}
const
{
grids
}
=
this
.
store
.
getState
(
)
;
for
(
const
grid
of
grids
)
{
if
(
grid
.
highlighted
)
{
this
.
highlighters
.
showGridHighlighter
(
grid
.
nodeFront
)
;
}
}
}
onToggleShowInfiniteLines
(
enabled
)
{
this
.
store
.
dispatch
(
updateShowInfiniteLines
(
enabled
)
)
;
Services
.
prefs
.
setBoolPref
(
SHOW_INFINITE_LINES_PREF
enabled
)
;
if
(
enabled
)
{
this
.
telemetry
.
scalarSet
(
TELEMETRY_INFINITE_LINES_CHECKED
1
)
;
}
const
{
grids
}
=
this
.
store
.
getState
(
)
;
for
(
const
grid
of
grids
)
{
if
(
grid
.
highlighted
)
{
this
.
highlighters
.
showGridHighlighter
(
grid
.
nodeFront
)
;
}
}
}
}
module
.
exports
=
GridInspector
;
