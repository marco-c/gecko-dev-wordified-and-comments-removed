"
use
strict
"
;
function
getExtensionSidebarActors
(
inspector
)
{
const
state
=
inspector
.
store
.
getState
(
)
;
const
actors
=
[
]
;
for
(
let
sidebarId
of
Object
.
keys
(
state
.
extensionsSidebar
)
)
{
const
sidebarState
=
state
.
extensionsSidebar
[
sidebarId
]
;
if
(
sidebarState
.
viewMode
=
=
=
"
object
-
value
-
grip
-
view
"
&
&
sidebarState
.
objectValueGrip
&
&
sidebarState
.
objectValueGrip
.
actor
)
{
actors
.
push
(
sidebarState
.
objectValueGrip
.
actor
)
;
}
}
return
actors
;
}
async
function
expectNoSuchActorIDs
(
client
actors
)
{
info
(
Test
that
all
the
objectValueGrip
actors
have
been
released
)
;
for
(
let
actor
of
actors
)
{
await
Assert
.
rejects
(
client
.
request
(
{
to
:
actor
type
:
"
requestTypes
"
}
)
No
such
actor
for
ID
:
{
actor
}
)
;
}
}
function
waitForObjectInspector
(
panelDoc
waitForNodeWithType
=
"
object
"
)
{
const
selector
=
.
object
-
inspector
.
objectBox
-
{
waitForNodeWithType
}
;
return
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
panelDoc
.
querySelectorAll
(
selector
)
.
length
>
0
;
}
)
;
}
async
function
testSetExpressionSidebarPanel
(
panel
expected
)
{
const
{
nodesLength
propertiesNames
rootTitle
}
=
expected
;
await
waitForObjectInspector
(
panel
)
;
let
objectInspectors
=
[
.
.
.
panel
.
querySelectorAll
(
"
.
tree
"
)
]
;
is
(
objectInspectors
.
length
1
"
There
is
the
expected
number
of
object
inspectors
"
)
;
let
[
objectInspector
]
=
objectInspectors
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
objectInspector
.
querySelectorAll
(
"
.
node
"
)
.
length
>
=
nodesLength
;
}
)
;
let
oiNodes
=
objectInspector
.
querySelectorAll
(
"
.
node
"
)
;
is
(
oiNodes
.
length
nodesLength
"
Got
the
expected
number
of
nodes
in
the
tree
"
)
;
let
propertiesNodes
=
[
.
.
.
objectInspector
.
querySelectorAll
(
"
.
object
-
label
"
)
]
.
map
(
el
=
>
el
.
textContent
)
;
is
(
JSON
.
stringify
(
propertiesNodes
)
JSON
.
stringify
(
propertiesNames
)
"
Got
the
expected
property
names
"
)
;
if
(
rootTitle
)
{
const
accordion
=
panel
.
querySelector
(
"
.
accordion
"
)
;
ok
(
accordion
"
Got
an
Accordion
component
as
expected
"
)
;
is
(
accordion
.
querySelector
(
"
.
_content
"
)
.
firstChild
objectInspector
"
The
ObjectInspector
should
be
inside
the
Accordion
content
"
)
;
is
(
accordion
.
querySelector
(
"
.
_header
"
)
.
textContent
.
trim
(
)
rootTitle
"
The
Accordion
has
the
expected
label
"
)
;
}
else
{
ok
(
!
panel
.
querySelector
(
"
.
accordion
"
)
"
Got
no
Accordion
component
as
expected
"
)
;
}
}
function
assertTreeView
(
panelDoc
expectedContent
)
{
const
{
expectedTreeTables
expectedStringCells
expectedNumberCells
}
=
expectedContent
;
if
(
expectedTreeTables
)
{
is
(
panelDoc
.
querySelectorAll
(
"
table
.
treeTable
"
)
.
length
expectedTreeTables
"
The
panel
document
contains
the
expected
number
of
TreeView
components
"
)
;
}
if
(
expectedStringCells
)
{
is
(
panelDoc
.
querySelectorAll
(
"
table
.
treeTable
.
stringCell
"
)
.
length
expectedStringCells
"
The
panel
document
contains
the
expected
number
of
string
cells
.
"
)
;
}
if
(
expectedNumberCells
)
{
is
(
panelDoc
.
querySelectorAll
(
"
table
.
treeTable
.
numberCell
"
)
.
length
expectedNumberCells
"
The
panel
document
contains
the
expected
number
of
number
cells
.
"
)
;
}
}
async
function
assertObjectInspector
(
panelDoc
expectedContent
)
{
const
{
expectedDOMNodes
expectedOpenInspectors
}
=
expectedContent
;
let
nodes
=
panelDoc
.
querySelectorAll
(
"
.
objectBox
-
node
"
)
;
let
nodeOpenInspectors
=
panelDoc
.
querySelectorAll
(
"
.
objectBox
-
node
.
open
-
inspector
"
)
;
is
(
nodes
.
length
expectedDOMNodes
"
Found
the
expected
number
of
ObjectInspector
DOMNodes
"
)
;
is
(
nodeOpenInspectors
.
length
expectedOpenInspectors
"
Found
the
expected
nuber
of
open
-
inspector
icons
inside
the
ObjectInspector
"
)
;
}
function
moveMouseOnObjectInspectorDOMNode
(
panelDoc
nodeIndex
=
0
)
{
let
nodes
=
panelDoc
.
querySelectorAll
(
"
.
objectBox
-
node
"
)
;
let
node
=
nodes
[
nodeIndex
]
;
ok
(
node
"
Found
the
ObjectInspector
DOMNode
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
node
{
type
:
"
mousemove
"
}
node
.
ownerDocument
.
defaultView
)
;
}
function
moveMouseOnPanelCenter
(
panelDoc
)
{
EventUtils
.
synthesizeMouseAtCenter
(
panelDoc
{
type
:
"
mousemove
"
}
panelDoc
.
window
)
;
}
function
clickOpenInspectorIcon
(
panelDoc
nodeIndex
=
0
)
{
let
nodes
=
panelDoc
.
querySelectorAll
(
"
.
objectBox
-
node
.
open
-
inspector
"
)
;
let
node
=
nodes
[
nodeIndex
]
;
ok
(
node
"
Found
the
ObjectInspector
open
-
inspector
icon
"
)
;
node
.
click
(
)
;
}
