"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
ObjectTreeView
=
createFactory
(
require
(
"
.
/
ObjectTreeView
"
)
)
;
const
ObjectValueGripView
=
createFactory
(
require
(
"
.
/
ObjectValueGripView
"
)
)
;
const
Types
=
require
(
"
.
.
/
types
"
)
;
class
ExtensionSidebar
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
id
:
PropTypes
.
string
.
isRequired
extensionsSidebar
:
PropTypes
.
object
.
isRequired
serviceContainer
:
PropTypes
.
shape
(
Types
.
serviceContainer
)
.
isRequired
}
;
}
render
(
)
{
const
{
id
extensionsSidebar
serviceContainer
}
=
this
.
props
;
let
{
viewMode
=
"
empty
-
sidebar
"
object
objectValueGrip
rootTitle
}
=
extensionsSidebar
[
id
]
|
|
{
}
;
let
sidebarContentEl
;
switch
(
viewMode
)
{
case
"
object
-
treeview
"
:
sidebarContentEl
=
ObjectTreeView
(
{
object
}
)
;
break
;
case
"
object
-
value
-
grip
-
view
"
:
sidebarContentEl
=
ObjectValueGripView
(
{
objectValueGrip
serviceContainer
rootTitle
}
)
;
break
;
case
"
empty
-
sidebar
"
:
break
;
default
:
throw
new
Error
(
Unknown
ExtensionSidebar
viewMode
:
"
{
viewMode
}
"
)
;
}
const
className
=
"
devtools
-
monospace
extension
-
sidebar
inspector
-
tabpanel
"
;
return
dom
.
div
(
{
id
className
}
sidebarContentEl
)
;
}
}
module
.
exports
=
connect
(
state
=
>
state
)
(
ExtensionSidebar
)
;
