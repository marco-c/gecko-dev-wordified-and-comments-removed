"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
Accordion
=
createFactory
(
require
(
"
devtools
/
client
/
inspector
/
layout
/
components
/
Accordion
"
)
)
;
const
reps
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
-
old
"
)
;
const
Types
=
require
(
"
.
.
/
types
"
)
;
const
{
REPS
MODE
}
=
reps
;
const
{
Grip
}
=
REPS
;
const
ObjectInspector
=
createFactory
(
reps
.
ObjectInspector
)
;
class
ObjectValueGripView
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
rootTitle
:
PropTypes
.
string
objectValueGrip
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
number
PropTypes
.
object
]
)
.
isRequired
serviceContainer
:
PropTypes
.
shape
(
Types
.
serviceContainer
)
.
isRequired
}
;
}
render
(
)
{
const
{
objectValueGrip
serviceContainer
rootTitle
}
=
this
.
props
;
const
objectInspectorProps
=
{
autoExpandDepth
:
1
mode
:
MODE
.
SHORT
disabledFocus
:
true
roots
:
[
{
path
:
objectValueGrip
&
&
objectValueGrip
.
actor
|
|
JSON
.
stringify
(
objectValueGrip
)
contents
:
{
value
:
objectValueGrip
}
}
]
createObjectClient
:
serviceContainer
.
createObjectClient
releaseActor
:
serviceContainer
.
releaseActor
}
;
if
(
objectValueGrip
&
&
objectValueGrip
.
actor
)
{
Object
.
assign
(
objectInspectorProps
{
onDOMNodeMouseOver
:
serviceContainer
.
highlightDomElement
onDOMNodeMouseOut
:
serviceContainer
.
unHighlightDomElement
onInspectIconClick
(
object
e
)
{
e
.
stopPropagation
(
)
;
serviceContainer
.
openNodeInInspector
(
object
)
;
}
defaultRep
:
Grip
}
)
;
}
if
(
rootTitle
)
{
return
Accordion
(
{
items
:
[
{
component
:
ObjectInspector
componentProps
:
objectInspectorProps
header
:
rootTitle
opened
:
true
}
]
}
)
;
}
return
ObjectInspector
(
objectInspectorProps
)
;
}
}
module
.
exports
=
ObjectValueGripView
;
