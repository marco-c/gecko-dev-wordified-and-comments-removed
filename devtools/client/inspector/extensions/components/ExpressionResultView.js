"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
Accordion
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
Accordion
"
)
)
;
const
Types
=
require
(
"
devtools
/
client
/
inspector
/
extensions
/
types
"
)
;
const
{
REPS
:
{
Grip
}
MODE
objectInspector
:
{
ObjectInspector
:
ObjectInspectorClass
}
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
"
)
;
loader
.
lazyRequireGetter
(
this
"
LongStringFront
"
"
devtools
/
shared
/
fronts
/
string
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ObjectFront
"
"
devtools
/
shared
/
fronts
/
object
"
true
)
;
const
ObjectInspector
=
createFactory
(
ObjectInspectorClass
)
;
class
ObjectValueGripView
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
rootTitle
:
PropTypes
.
string
expressionResult
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
number
PropTypes
.
object
]
)
.
isRequired
serviceContainer
:
PropTypes
.
shape
(
Types
.
serviceContainer
)
.
isRequired
}
;
}
render
(
)
{
const
{
expressionResult
serviceContainer
rootTitle
}
=
this
.
props
;
const
isFront
=
expressionResult
instanceof
ObjectFront
|
|
expressionResult
instanceof
LongStringFront
;
const
grip
=
isFront
?
expressionResult
.
getGrip
(
)
:
expressionResult
;
const
objectInspectorProps
=
{
autoExpandDepth
:
1
mode
:
MODE
.
SHORT
disabledFocus
:
true
roots
:
[
{
path
:
expressionResult
?
.
actorID
|
|
JSON
.
stringify
(
expressionResult
)
contents
:
{
value
:
grip
front
:
isFront
?
expressionResult
:
null
}
}
]
}
;
if
(
expressionResult
?
.
actorID
)
{
Object
.
assign
(
objectInspectorProps
{
onDOMNodeMouseOver
:
serviceContainer
.
highlightDomElement
onDOMNodeMouseOut
:
serviceContainer
.
unHighlightDomElement
onInspectIconClick
(
object
e
)
{
e
.
stopPropagation
(
)
;
serviceContainer
.
openNodeInInspector
(
object
)
;
}
defaultRep
:
Grip
}
)
;
}
if
(
rootTitle
)
{
return
Accordion
(
{
items
:
[
{
component
:
ObjectInspector
componentProps
:
objectInspectorProps
header
:
rootTitle
id
:
rootTitle
.
replace
(
/
\
s
/
g
"
-
"
)
opened
:
true
}
]
}
)
;
}
return
ObjectInspector
(
objectInspectorProps
)
;
}
}
module
.
exports
=
ObjectValueGripView
;
