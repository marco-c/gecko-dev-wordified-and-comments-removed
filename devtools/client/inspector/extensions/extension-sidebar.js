"
use
strict
"
;
const
{
createElement
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
extensionsSidebarReducer
=
require
(
"
devtools
/
client
/
inspector
/
extensions
/
reducers
/
sidebar
"
)
;
const
{
default
:
objectInspectorReducer
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
object
-
inspector
/
reducer
"
)
;
const
ExtensionSidebarComponent
=
createFactory
(
require
(
"
devtools
/
client
/
inspector
/
extensions
/
components
/
ExtensionSidebar
"
)
)
;
const
{
updateExtensionPage
updateObjectTreeView
updateExpressionResultView
removeExtensionSidebar
}
=
require
(
"
devtools
/
client
/
inspector
/
extensions
/
actions
/
sidebar
"
)
;
class
ExtensionSidebar
{
constructor
(
inspector
{
id
title
}
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
inspector
=
inspector
;
this
.
store
=
inspector
.
store
;
this
.
id
=
id
;
this
.
title
=
title
;
this
.
destroyed
=
false
;
this
.
store
.
injectReducer
(
"
extensionsSidebar
"
extensionsSidebarReducer
)
;
this
.
store
.
injectReducer
(
"
objectInspector
"
objectInspectorReducer
)
;
}
get
provider
(
)
{
if
(
!
this
.
_provider
)
{
this
.
_provider
=
createElement
(
Provider
{
store
:
this
.
store
key
:
this
.
id
title
:
this
.
title
}
ExtensionSidebarComponent
(
{
id
:
this
.
id
onExtensionPageMount
:
containerEl
=
>
{
this
.
emit
(
"
extension
-
page
-
mount
"
containerEl
)
;
}
onExtensionPageUnmount
:
containerEl
=
>
{
this
.
emit
(
"
extension
-
page
-
unmount
"
containerEl
)
;
}
serviceContainer
:
{
highlightDomElement
:
async
(
grip
options
=
{
}
)
=
>
{
const
nodeFront
=
await
this
.
inspector
.
inspectorFront
.
getNodeFrontFromNodeGrip
(
grip
)
;
return
this
.
inspector
.
highlighters
.
showHighlighterTypeForNode
(
this
.
inspector
.
highlighters
.
TYPES
.
BOXMODEL
nodeFront
options
)
;
}
unHighlightDomElement
:
async
(
)
=
>
{
return
this
.
inspector
.
highlighters
.
hideHighlighterType
(
this
.
inspector
.
highlighters
.
TYPES
.
BOXMODEL
)
;
}
openNodeInInspector
:
async
grip
=
>
{
const
nodeFront
=
await
this
.
inspector
.
inspectorFront
.
getNodeFrontFromNodeGrip
(
grip
)
;
const
onInspectorUpdated
=
this
.
inspector
.
once
(
"
inspector
-
updated
"
)
;
const
onNodeFrontSet
=
this
.
inspector
.
toolbox
.
selection
.
setNodeFront
(
nodeFront
{
reason
:
"
inspector
-
extension
-
sidebar
"
}
)
;
return
Promise
.
all
(
[
onNodeFrontSet
onInspectorUpdated
]
)
;
}
}
}
)
)
;
}
return
this
.
_provider
;
}
destroy
(
)
{
if
(
this
.
destroyed
)
{
throw
new
Error
(
ExtensionSidebar
instances
cannot
be
destroyed
more
than
once
)
;
}
this
.
store
.
dispatch
(
removeExtensionSidebar
(
this
.
id
)
)
;
this
.
inspector
=
null
;
this
.
store
=
null
;
this
.
_provider
=
null
;
this
.
destroyed
=
true
;
}
setObject
(
object
)
{
if
(
this
.
removed
)
{
throw
new
Error
(
"
Unable
to
set
an
object
preview
on
a
removed
ExtensionSidebar
"
)
;
}
this
.
store
.
dispatch
(
updateObjectTreeView
(
this
.
id
object
)
)
;
}
setExpressionResult
(
expressionResult
rootTitle
)
{
if
(
this
.
removed
)
{
throw
new
Error
(
"
Unable
to
set
an
object
preview
on
a
removed
ExtensionSidebar
"
)
;
}
this
.
store
.
dispatch
(
updateExpressionResultView
(
this
.
id
expressionResult
rootTitle
)
)
;
}
setExtensionPage
(
iframeURL
)
{
if
(
this
.
removed
)
{
throw
new
Error
(
"
Unable
to
set
an
object
preview
on
a
removed
ExtensionSidebar
"
)
;
}
this
.
store
.
dispatch
(
updateExtensionPage
(
this
.
id
iframeURL
)
)
;
}
}
module
.
exports
=
ExtensionSidebar
;
