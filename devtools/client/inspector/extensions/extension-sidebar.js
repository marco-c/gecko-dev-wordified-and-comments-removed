"
use
strict
"
;
const
{
createElement
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
ObjectClient
=
require
(
"
devtools
/
shared
/
client
/
object
-
client
"
)
;
const
ExtensionSidebarComponent
=
createFactory
(
require
(
"
.
/
components
/
ExtensionSidebar
"
)
)
;
const
{
updateObjectTreeView
updateObjectValueGripView
removeExtensionSidebar
}
=
require
(
"
.
/
actions
/
sidebar
"
)
;
class
ExtensionSidebar
{
constructor
(
inspector
{
id
title
}
)
{
this
.
inspector
=
inspector
;
this
.
store
=
inspector
.
store
;
this
.
id
=
id
;
this
.
title
=
title
;
this
.
destroyed
=
false
;
}
get
provider
(
)
{
if
(
!
this
.
_provider
)
{
this
.
_provider
=
createElement
(
Provider
{
store
:
this
.
store
key
:
this
.
id
title
:
this
.
title
}
ExtensionSidebarComponent
(
{
id
:
this
.
id
serviceContainer
:
{
createObjectClient
:
(
object
)
=
>
{
return
new
ObjectClient
(
this
.
inspector
.
toolbox
.
target
.
client
object
)
;
}
releaseActor
:
(
actor
)
=
>
{
if
(
!
actor
)
{
return
;
}
this
.
inspector
.
toolbox
.
target
.
client
.
release
(
actor
)
;
}
highlightDomElement
:
(
grip
options
=
{
}
)
=
>
{
const
{
highlighterUtils
}
=
this
.
inspector
.
toolbox
;
if
(
!
highlighterUtils
)
{
return
null
;
}
return
highlighterUtils
.
highlightDomValueGrip
(
grip
options
)
;
}
unHighlightDomElement
:
(
forceHide
=
false
)
=
>
{
const
{
highlighterUtils
}
=
this
.
inspector
.
toolbox
;
if
(
!
highlighterUtils
)
{
return
null
;
}
return
highlighterUtils
.
unhighlight
(
forceHide
)
;
}
openNodeInInspector
:
async
(
grip
)
=
>
{
const
{
highlighterUtils
}
=
this
.
inspector
.
toolbox
;
if
(
!
highlighterUtils
)
{
return
null
;
}
const
front
=
await
highlighterUtils
.
gripToNodeFront
(
grip
)
;
const
onInspectorUpdated
=
this
.
inspector
.
once
(
"
inspector
-
updated
"
)
;
const
onNodeFrontSet
=
this
.
inspector
.
toolbox
.
selection
.
setNodeFront
(
front
{
reason
:
"
inspector
-
extension
-
sidebar
"
}
)
;
return
Promise
.
all
(
[
onNodeFrontSet
onInspectorUpdated
]
)
;
}
}
}
)
)
;
}
return
this
.
_provider
;
}
destroy
(
)
{
if
(
this
.
destroyed
)
{
throw
new
Error
(
ExtensionSidebar
instances
cannot
be
destroyed
more
than
once
)
;
}
this
.
store
.
dispatch
(
removeExtensionSidebar
(
this
.
id
)
)
;
this
.
inspector
=
null
;
this
.
store
=
null
;
this
.
_provider
=
null
;
this
.
destroyed
=
true
;
}
setObject
(
object
)
{
if
(
this
.
removed
)
{
throw
new
Error
(
"
Unable
to
set
an
object
preview
on
a
removed
ExtensionSidebar
"
)
;
}
this
.
store
.
dispatch
(
updateObjectTreeView
(
this
.
id
object
)
)
;
}
setObjectValueGrip
(
objectValueGrip
rootTitle
)
{
if
(
this
.
removed
)
{
throw
new
Error
(
"
Unable
to
set
an
object
preview
on
a
removed
ExtensionSidebar
"
)
;
}
this
.
store
.
dispatch
(
updateObjectValueGripView
(
this
.
id
objectValueGrip
rootTitle
)
)
;
}
}
module
.
exports
=
ExtensionSidebar
;
