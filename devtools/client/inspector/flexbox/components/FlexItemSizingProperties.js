"
use
strict
"
;
const
{
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
getStr
}
=
require
(
"
devtools
/
client
/
inspector
/
layout
/
utils
/
l10n
"
)
;
const
Types
=
require
(
"
.
.
/
types
"
)
;
class
FlexItemSizingProperties
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
flexDirection
:
PropTypes
.
string
.
isRequired
flexItem
:
PropTypes
.
shape
(
Types
.
flexItem
)
.
isRequired
}
;
}
getRoundedDimension
(
value
)
{
if
(
value
=
=
0
)
{
return
"
0
"
;
}
return
(
Math
.
round
(
value
*
100
)
/
100
)
+
"
px
"
;
}
getFlexibilityValueString
(
grew
mainDeltaSize
)
{
const
value
=
this
.
getRoundedDimension
(
mainDeltaSize
)
;
if
(
grew
)
{
return
"
+
"
+
value
;
}
return
value
;
}
renderCssProperty
(
name
value
isDefaultValue
)
{
return
(
dom
.
span
(
{
className
:
"
css
-
property
-
link
"
}
dom
.
span
(
{
className
:
"
theme
-
fg
-
color5
"
}
name
)
"
:
"
dom
.
span
(
{
className
:
"
theme
-
fg
-
color1
"
}
value
)
"
;
"
)
)
;
}
renderReasons
(
sentences
)
{
return
(
dom
.
ul
(
{
className
:
"
reasons
"
}
sentences
.
map
(
sentence
=
>
dom
.
li
(
{
}
sentence
)
)
)
)
;
}
renderBaseSizeSection
(
{
mainBaseSize
clampState
}
properties
dimension
)
{
const
flexBasisValue
=
properties
[
"
flex
-
basis
"
]
;
const
dimensionValue
=
properties
[
dimension
]
;
let
property
=
null
;
let
reason
=
null
;
if
(
flexBasisValue
)
{
property
=
this
.
renderCssProperty
(
"
flex
-
basis
"
flexBasisValue
)
;
}
else
if
(
dimensionValue
)
{
property
=
this
.
renderCssProperty
(
dimension
dimensionValue
)
;
}
else
{
reason
=
this
.
renderReasons
(
[
getStr
(
"
flexbox
.
itemSizing
.
itemBaseSizeFromContent
"
)
]
)
;
}
const
className
=
"
section
base
"
;
return
(
dom
.
li
(
{
className
:
className
+
(
property
?
"
"
:
"
no
-
property
"
)
}
dom
.
span
(
{
className
:
"
name
"
}
getStr
(
"
flexbox
.
itemSizing
.
baseSizeSectionHeader
"
)
)
dom
.
span
(
{
className
:
"
value
theme
-
fg
-
color1
"
}
this
.
getRoundedDimension
(
mainBaseSize
)
)
property
reason
)
)
;
}
renderFlexibilitySection
(
flexItemSizing
properties
computedStyle
)
{
const
{
mainDeltaSize
mainBaseSize
mainFinalSize
lineGrowthState
clampState
}
=
flexItemSizing
;
if
(
!
mainFinalSize
&
&
!
mainBaseSize
&
&
!
mainDeltaSize
)
{
return
null
;
}
const
grew
=
mainDeltaSize
>
0
;
const
shrank
=
mainDeltaSize
<
0
;
if
(
!
grew
&
&
!
shrank
)
{
return
null
;
}
const
definedFlexGrow
=
properties
[
"
flex
-
grow
"
]
;
const
computedFlexGrow
=
computedStyle
.
flexGrow
;
const
definedFlexShrink
=
properties
[
"
flex
-
shrink
"
]
;
const
computedFlexShrink
=
computedStyle
.
flexShrink
;
const
wasClamped
=
clampState
!
=
=
"
unclamped
"
;
const
reasons
=
[
]
;
if
(
computedFlexGrow
&
&
lineGrowthState
=
=
=
"
growing
"
)
{
reasons
.
push
(
getStr
(
"
flexbox
.
itemSizing
.
setToGrow
"
)
)
;
}
if
(
computedFlexShrink
&
&
lineGrowthState
=
=
=
"
shrinking
"
)
{
reasons
.
push
(
getStr
(
"
flexbox
.
itemSizing
.
setToShrink
"
)
)
;
}
if
(
!
computedFlexGrow
&
&
!
grew
&
&
!
shrank
&
&
lineGrowthState
=
=
=
"
growing
"
)
{
reasons
.
push
(
getStr
(
"
flexbox
.
itemSizing
.
notSetToGrow
"
)
)
;
}
if
(
!
computedFlexShrink
&
&
!
grew
&
&
!
shrank
&
&
lineGrowthState
=
=
=
"
shrinking
"
)
{
reasons
.
push
(
getStr
(
"
flexbox
.
itemSizing
.
notSetToShrink
"
)
)
;
}
let
property
=
null
;
if
(
grew
)
{
if
(
definedFlexGrow
)
{
property
=
this
.
renderCssProperty
(
"
flex
-
grow
"
definedFlexGrow
)
;
}
if
(
wasClamped
&
&
clampState
=
=
=
"
clamped_to_max
"
)
{
reasons
.
push
(
getStr
(
"
flexbox
.
itemSizing
.
growthAttemptButMaxClamped
"
)
)
;
}
else
if
(
wasClamped
&
&
clampState
=
=
=
"
clamped_to_min
"
)
{
reasons
.
push
(
getStr
(
"
flexbox
.
itemSizing
.
growthAttemptButMinClamped
"
)
)
;
}
}
else
if
(
shrank
)
{
if
(
definedFlexShrink
&
&
computedFlexShrink
)
{
property
=
this
.
renderCssProperty
(
"
flex
-
shrink
"
definedFlexShrink
)
;
}
else
if
(
computedFlexShrink
)
{
property
=
this
.
renderCssProperty
(
"
flex
-
shrink
"
computedFlexShrink
true
)
;
}
if
(
wasClamped
)
{
reasons
.
push
(
getStr
(
"
flexbox
.
itemSizing
.
shrinkAttemptWhenClamped
"
)
)
;
}
}
if
(
!
property
&
&
!
reasons
.
length
)
{
return
null
;
}
const
className
=
"
section
flexibility
"
;
return
(
dom
.
li
(
{
className
:
className
+
(
property
?
"
"
:
"
no
-
property
"
)
}
dom
.
span
(
{
className
:
"
name
"
}
getStr
(
"
flexbox
.
itemSizing
.
flexibilitySectionHeader
"
)
)
dom
.
span
(
{
className
:
"
value
theme
-
fg
-
color1
"
}
this
.
getFlexibilityValueString
(
grew
mainDeltaSize
)
)
property
this
.
renderReasons
(
reasons
)
)
)
;
}
renderMinimumSizeSection
(
{
clampState
mainMinSize
}
properties
dimension
)
{
if
(
clampState
!
=
=
"
clamped_to_min
"
)
{
return
null
;
}
const
minDimensionValue
=
properties
[
min
-
{
dimension
}
]
;
return
(
dom
.
li
(
{
className
:
"
section
min
"
}
dom
.
span
(
{
className
:
"
name
"
}
getStr
(
"
flexbox
.
itemSizing
.
minSizeSectionHeader
"
)
)
dom
.
span
(
{
className
:
"
value
theme
-
fg
-
color1
"
}
this
.
getRoundedDimension
(
mainMinSize
)
)
this
.
renderCssProperty
(
min
-
{
dimension
}
minDimensionValue
)
)
)
;
}
renderMaximumSizeSection
(
{
clampState
mainMaxSize
}
properties
dimension
)
{
if
(
clampState
!
=
=
"
clamped_to_max
"
)
{
return
null
;
}
const
maxDimensionValue
=
properties
[
max
-
{
dimension
}
]
;
return
(
dom
.
li
(
{
className
:
"
section
max
"
}
dom
.
span
(
{
className
:
"
name
"
}
getStr
(
"
flexbox
.
itemSizing
.
maxSizeSectionHeader
"
)
)
dom
.
span
(
{
className
:
"
value
theme
-
fg
-
color1
"
}
this
.
getRoundedDimension
(
mainMaxSize
)
)
this
.
renderCssProperty
(
max
-
{
dimension
}
maxDimensionValue
)
)
)
;
}
renderFinalSizeSection
(
{
mainFinalSize
}
)
{
return
(
dom
.
li
(
{
className
:
"
section
final
no
-
property
"
}
dom
.
span
(
{
className
:
"
name
"
}
getStr
(
"
flexbox
.
itemSizing
.
finalSizeSectionHeader
"
)
)
dom
.
span
(
{
className
:
"
value
theme
-
fg
-
color1
"
}
this
.
getRoundedDimension
(
mainFinalSize
)
)
)
)
;
}
render
(
)
{
const
{
flexItem
}
=
this
.
props
;
const
{
computedStyle
flexItemSizing
properties
}
=
flexItem
;
const
{
mainAxisDirection
mainBaseSize
mainDeltaSize
mainMaxSize
mainMinSize
}
=
flexItemSizing
;
const
dimension
=
mainAxisDirection
.
startsWith
(
"
horizontal
"
)
?
"
width
"
:
"
height
"
;
let
mainFinalSize
=
mainBaseSize
+
mainDeltaSize
;
mainFinalSize
=
Math
.
max
(
mainFinalSize
mainMinSize
)
;
mainFinalSize
=
Math
.
min
(
mainFinalSize
mainMaxSize
)
;
flexItemSizing
.
mainFinalSize
=
mainFinalSize
;
return
(
dom
.
ul
(
{
className
:
"
flex
-
item
-
sizing
"
}
this
.
renderBaseSizeSection
(
flexItemSizing
properties
dimension
)
this
.
renderFlexibilitySection
(
flexItemSizing
properties
computedStyle
)
this
.
renderMinimumSizeSection
(
flexItemSizing
properties
dimension
)
this
.
renderMaximumSizeSection
(
flexItemSizing
properties
dimension
)
this
.
renderFinalSizeSection
(
flexItemSizing
)
)
)
;
}
}
module
.
exports
=
FlexItemSizingProperties
;
