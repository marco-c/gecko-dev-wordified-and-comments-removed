"
use
strict
"
;
const
{
throttle
}
=
require
(
"
devtools
/
client
/
inspector
/
shared
/
utils
"
)
;
const
{
clearFlexbox
updateFlexbox
updateFlexboxColor
updateFlexboxHighlighted
}
=
require
(
"
.
/
actions
/
flexbox
"
)
;
loader
.
lazyRequireGetter
(
this
"
parseURL
"
"
devtools
/
client
/
shared
/
source
-
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
asyncStorage
"
"
devtools
/
shared
/
async
-
storage
"
)
;
const
FLEXBOX_COLOR
=
"
#
9400FF
"
;
class
FlexboxInspector
{
constructor
(
inspector
window
)
{
this
.
document
=
window
.
document
;
this
.
inspector
=
inspector
;
this
.
store
=
inspector
.
store
;
this
.
walker
=
inspector
.
walker
;
this
.
onHighlighterShown
=
this
.
onHighlighterShown
.
bind
(
this
)
;
this
.
onHighlighterHidden
=
this
.
onHighlighterHidden
.
bind
(
this
)
;
this
.
onReflow
=
throttle
(
this
.
onReflow
500
this
)
;
this
.
onSetFlexboxOverlayColor
=
this
.
onSetFlexboxOverlayColor
.
bind
(
this
)
;
this
.
onSidebarSelect
=
this
.
onSidebarSelect
.
bind
(
this
)
;
this
.
onToggleFlexboxHighlighter
=
this
.
onToggleFlexboxHighlighter
.
bind
(
this
)
;
this
.
onUpdatePanel
=
this
.
onUpdatePanel
.
bind
(
this
)
;
this
.
init
(
)
;
}
get
highlighters
(
)
{
if
(
!
this
.
_highlighters
)
{
this
.
_highlighters
=
this
.
inspector
.
highlighters
;
}
return
this
.
_highlighters
;
}
async
init
(
)
{
if
(
!
this
.
inspector
)
{
return
;
}
try
{
this
.
hasGetCurrentFlexbox
=
await
this
.
inspector
.
target
.
actorHasMethod
(
"
layout
"
"
getCurrentFlexbox
"
)
;
this
.
layoutInspector
=
await
this
.
walker
.
getLayoutInspector
(
)
;
}
catch
(
e
)
{
return
;
}
this
.
document
.
addEventListener
(
"
mousemove
"
(
)
=
>
{
this
.
highlighters
.
on
(
"
flexbox
-
highlighter
-
hidden
"
this
.
onHighlighterHidden
)
;
this
.
highlighters
.
on
(
"
flexbox
-
highlighter
-
shown
"
this
.
onHighlighterShown
)
;
}
{
once
:
true
}
)
;
this
.
inspector
.
sidebar
.
on
(
"
select
"
this
.
onSidebarSelect
)
;
this
.
onSidebarSelect
(
)
;
}
destroy
(
)
{
if
(
this
.
_highlighters
)
{
this
.
highlighters
.
off
(
"
flexbox
-
highlighter
-
hidden
"
this
.
onHighlighterHidden
)
;
this
.
highlighters
.
off
(
"
flexbox
-
highlighter
-
shown
"
this
.
onHighlighterShown
)
;
}
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onUpdatePanel
)
;
this
.
inspector
.
sidebar
.
off
(
"
select
"
this
.
onSidebarSelect
)
;
this
.
inspector
.
off
(
"
new
-
root
"
this
.
onUpdatePanel
)
;
this
.
inspector
.
reflowTracker
.
untrackReflows
(
this
this
.
onReflow
)
;
this
.
_highlighters
=
null
;
this
.
document
=
null
;
this
.
hasGetCurrentFlexbox
=
null
;
this
.
inspector
=
null
;
this
.
layoutInspector
=
null
;
this
.
store
=
null
;
this
.
walker
=
null
;
}
getComponentProps
(
)
{
return
{
onSetFlexboxOverlayColor
:
this
.
onSetFlexboxOverlayColor
onToggleFlexboxHighlighter
:
this
.
onToggleFlexboxHighlighter
}
;
}
async
getCustomFlexboxColors
(
)
{
return
await
asyncStorage
.
getItem
(
"
flexboxInspectorHostColors
"
)
|
|
{
}
;
}
isPanelVisible
(
)
{
return
this
.
inspector
&
&
this
.
inspector
.
toolbox
&
&
this
.
inspector
.
sidebar
&
&
this
.
inspector
.
toolbox
.
currentToolId
=
=
=
"
inspector
"
&
&
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
=
"
layoutview
"
;
}
onHighlighterShown
(
nodeFront
)
{
return
this
.
onHighlighterChange
(
true
nodeFront
)
;
}
onHighlighterHidden
(
nodeFront
)
{
return
this
.
onHighlighterChange
(
false
nodeFront
)
;
}
onHighlighterChange
(
highlighted
nodeFront
)
{
const
{
flexbox
}
=
this
.
store
.
getState
(
)
;
if
(
flexbox
.
nodeFront
=
=
=
nodeFront
&
&
flexbox
.
highlighted
!
=
=
highlighted
)
{
this
.
store
.
dispatch
(
updateFlexboxHighlighted
(
highlighted
)
)
;
}
}
async
onReflow
(
)
{
if
(
!
this
.
isPanelVisible
(
)
|
|
!
this
.
store
|
|
!
this
.
inspector
.
selection
.
nodeFront
)
{
return
;
}
const
{
flexbox
}
=
this
.
store
.
getState
(
)
;
let
flexboxFront
;
try
{
if
(
!
this
.
hasGetCurrentFlexbox
)
{
return
;
}
flexboxFront
=
await
this
.
layoutInspector
.
getCurrentFlexbox
(
this
.
inspector
.
selection
.
nodeFront
)
;
}
catch
(
e
)
{
return
;
}
if
(
!
flexboxFront
)
{
this
.
store
.
dispatch
(
clearFlexbox
(
)
)
;
return
;
}
if
(
flexbox
.
actorID
=
=
flexboxFront
.
actorID
)
{
return
;
}
this
.
update
(
flexboxFront
)
;
}
async
onSetFlexboxOverlayColor
(
color
)
{
this
.
store
.
dispatch
(
updateFlexboxColor
(
color
)
)
;
const
{
flexbox
}
=
this
.
store
.
getState
(
)
;
if
(
flexbox
.
highlighted
)
{
this
.
highlighters
.
showFlexboxHighlighter
(
flexbox
.
nodeFront
)
;
}
const
currentUrl
=
this
.
inspector
.
target
.
url
;
const
hostname
=
parseURL
(
currentUrl
)
.
hostname
|
|
parseURL
(
currentUrl
)
.
protocol
;
const
customFlexboxColors
=
await
this
.
getCustomFlexboxColors
(
)
;
customFlexboxColors
[
hostname
]
=
color
;
await
asyncStorage
.
setItem
(
"
flexboxInspectorHostColors
"
customFlexboxColors
)
;
}
onSidebarSelect
(
)
{
if
(
!
this
.
isPanelVisible
(
)
)
{
this
.
inspector
.
reflowTracker
.
untrackReflows
(
this
this
.
onReflow
)
;
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onUpdatePanel
)
;
this
.
inspector
.
off
(
"
new
-
root
"
this
.
onUpdatePanel
)
;
return
;
}
this
.
inspector
.
reflowTracker
.
trackReflows
(
this
this
.
onReflow
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onUpdatePanel
)
;
this
.
inspector
.
on
(
"
new
-
root
"
this
.
onUpdatePanel
)
;
this
.
update
(
)
;
}
onToggleFlexboxHighlighter
(
node
)
{
this
.
highlighters
.
toggleFlexboxHighlighter
(
node
)
;
this
.
store
.
dispatch
(
updateFlexboxHighlighted
(
node
!
=
=
this
.
highlighters
.
flexboxHighlighterShow
)
)
;
}
onUpdatePanel
(
)
{
if
(
!
this
.
isPanelVisible
(
)
)
{
return
;
}
this
.
update
(
)
;
}
async
update
(
flexboxFront
)
{
if
(
!
this
.
inspector
|
|
!
this
.
store
|
|
!
this
.
inspector
.
selection
.
nodeFront
)
{
return
;
}
if
(
!
flexboxFront
)
{
try
{
if
(
!
this
.
hasGetCurrentFlexbox
)
{
return
;
}
flexboxFront
=
await
this
.
layoutInspector
.
getCurrentFlexbox
(
this
.
inspector
.
selection
.
nodeFront
)
;
}
catch
(
e
)
{
return
;
}
}
if
(
!
flexboxFront
)
{
this
.
store
.
dispatch
(
clearFlexbox
(
)
)
;
return
;
}
let
nodeFront
=
flexboxFront
.
containerNodeFront
;
if
(
!
nodeFront
)
{
try
{
nodeFront
=
await
this
.
walker
.
getNodeFromActor
(
flexboxFront
.
actorID
[
"
containerEl
"
]
)
;
}
catch
(
e
)
{
return
;
}
}
const
highlighted
=
this
.
_highlighters
&
&
nodeFront
=
=
this
.
highlighters
.
flexboxHighlighterShown
;
const
currentUrl
=
this
.
inspector
.
target
.
url
;
const
hostname
=
parseURL
(
currentUrl
)
.
hostname
|
|
parseURL
(
currentUrl
)
.
protocol
;
const
customColors
=
await
this
.
getCustomFlexboxColors
(
)
;
const
color
=
customColors
[
hostname
]
?
customColors
[
hostname
]
:
FLEXBOX_COLOR
;
this
.
store
.
dispatch
(
updateFlexbox
(
{
actorID
:
flexboxFront
.
actorID
color
highlighted
nodeFront
properties
:
flexboxFront
.
properties
}
)
)
;
}
}
module
.
exports
=
FlexboxInspector
;
