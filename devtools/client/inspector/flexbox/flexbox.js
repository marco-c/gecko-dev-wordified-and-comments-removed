"
use
strict
"
;
const
{
throttle
}
=
require
(
"
devtools
/
shared
/
throttle
"
)
;
const
{
clearFlexbox
updateFlexbox
updateFlexboxColor
updateFlexboxHighlighted
}
=
require
(
"
devtools
/
client
/
inspector
/
flexbox
/
actions
/
flexbox
"
)
;
const
flexboxReducer
=
require
(
"
devtools
/
client
/
inspector
/
flexbox
/
reducers
/
flexbox
"
)
;
loader
.
lazyRequireGetter
(
this
"
parseURL
"
"
devtools
/
client
/
shared
/
source
-
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
asyncStorage
"
"
devtools
/
shared
/
async
-
storage
"
)
;
const
FLEXBOX_COLOR
=
"
#
9400FF
"
;
class
FlexboxInspector
{
constructor
(
inspector
window
)
{
this
.
document
=
window
.
document
;
this
.
inspector
=
inspector
;
this
.
selection
=
inspector
.
selection
;
this
.
store
=
inspector
.
store
;
this
.
store
.
injectReducer
(
"
flexbox
"
flexboxReducer
)
;
this
.
onHighlighterShown
=
this
.
onHighlighterShown
.
bind
(
this
)
;
this
.
onHighlighterHidden
=
this
.
onHighlighterHidden
.
bind
(
this
)
;
this
.
onNavigate
=
this
.
onNavigate
.
bind
(
this
)
;
this
.
onReflow
=
throttle
(
this
.
onReflow
500
this
)
;
this
.
onSetFlexboxOverlayColor
=
this
.
onSetFlexboxOverlayColor
.
bind
(
this
)
;
this
.
onSidebarSelect
=
this
.
onSidebarSelect
.
bind
(
this
)
;
this
.
onUpdatePanel
=
this
.
onUpdatePanel
.
bind
(
this
)
;
this
.
init
(
)
;
}
init
(
)
{
if
(
!
this
.
inspector
)
{
return
;
}
this
.
inspector
.
highlighters
.
on
(
"
highlighter
-
shown
"
this
.
onHighlighterShown
)
;
this
.
inspector
.
highlighters
.
on
(
"
highlighter
-
hidden
"
this
.
onHighlighterHidden
)
;
this
.
inspector
.
sidebar
.
on
(
"
select
"
this
.
onSidebarSelect
)
;
this
.
onSidebarSelect
(
)
;
}
destroy
(
)
{
this
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onUpdatePanel
)
;
this
.
inspector
.
off
(
"
new
-
root
"
this
.
onNavigate
)
;
this
.
inspector
.
off
(
"
reflow
-
in
-
selected
-
target
"
this
.
onReflow
)
;
this
.
inspector
.
highlighters
.
off
(
"
highlighter
-
shown
"
this
.
onHighlighterShown
)
;
this
.
inspector
.
highlighters
.
off
(
"
highlighter
-
hidden
"
this
.
onHighlighterHidden
)
;
this
.
inspector
.
sidebar
.
off
(
"
select
"
this
.
onSidebarSelect
)
;
this
.
_customHostColors
=
null
;
this
.
_overlayColor
=
null
;
this
.
document
=
null
;
this
.
inspector
=
null
;
this
.
selection
=
null
;
this
.
store
=
null
;
}
getComponentProps
(
)
{
return
{
onSetFlexboxOverlayColor
:
this
.
onSetFlexboxOverlayColor
}
;
}
async
getCustomHostColors
(
)
{
if
(
this
.
_customHostColors
)
{
return
this
.
_customHostColors
;
}
this
.
_customHostColors
=
(
await
asyncStorage
.
getItem
(
"
flexboxInspectorHostColors
"
)
)
|
|
{
}
;
return
this
.
_customHostColors
;
}
async
getFlexContainerProps
(
nodeFront
onlyLookAtParents
=
false
)
{
const
layoutFront
=
await
nodeFront
.
walkerFront
.
getLayoutInspector
(
)
;
const
flexboxFront
=
await
layoutFront
.
getCurrentFlexbox
(
nodeFront
onlyLookAtParents
)
;
if
(
!
flexboxFront
)
{
return
null
;
}
let
containerNodeFront
=
flexboxFront
.
containerNodeFront
;
if
(
!
containerNodeFront
)
{
containerNodeFront
=
await
flexboxFront
.
walkerFront
.
getNodeFromActor
(
flexboxFront
.
actorID
[
"
containerEl
"
]
)
;
}
const
flexItems
=
await
this
.
getFlexItems
(
flexboxFront
)
;
let
flexItemShown
=
null
;
if
(
onlyLookAtParents
)
{
flexItemShown
=
this
.
selection
.
nodeFront
.
actorID
;
}
else
{
const
selectedFlexItem
=
flexItems
.
find
(
item
=
>
item
.
nodeFront
=
=
=
this
.
selection
.
nodeFront
)
;
if
(
selectedFlexItem
)
{
flexItemShown
=
selectedFlexItem
.
nodeFront
.
actorID
;
}
}
return
{
actorID
:
flexboxFront
.
actorID
flexItems
flexItemShown
isFlexItemContainer
:
onlyLookAtParents
nodeFront
:
containerNodeFront
properties
:
flexboxFront
.
properties
}
;
}
async
getFlexItems
(
flexboxFront
)
{
const
flexItemFronts
=
await
flexboxFront
.
getFlexItems
(
)
;
const
flexItems
=
[
]
;
for
(
const
flexItemFront
of
flexItemFronts
)
{
let
itemNodeFront
=
flexItemFront
.
nodeFront
;
if
(
!
itemNodeFront
)
{
itemNodeFront
=
await
flexItemFront
.
walkerFront
.
getNodeFromActor
(
flexItemFront
.
actorID
[
"
element
"
]
)
;
}
flexItems
.
push
(
{
actorID
:
flexItemFront
.
actorID
computedStyle
:
flexItemFront
.
computedStyle
flexItemSizing
:
flexItemFront
.
flexItemSizing
nodeFront
:
itemNodeFront
properties
:
flexItemFront
.
properties
}
)
;
}
return
flexItems
;
}
async
getOverlayColor
(
)
{
if
(
this
.
_overlayColor
)
{
return
this
.
_overlayColor
;
}
const
customColors
=
await
this
.
getCustomHostColors
(
)
;
const
currentUrl
=
this
.
inspector
.
currentTarget
.
url
;
const
hostname
=
parseURL
(
currentUrl
)
.
hostname
|
|
parseURL
(
currentUrl
)
.
protocol
;
this
.
_overlayColor
=
customColors
[
hostname
]
?
customColors
[
hostname
]
:
FLEXBOX_COLOR
;
return
this
.
_overlayColor
;
}
isPanelVisible
(
)
{
return
(
this
.
inspector
&
&
this
.
inspector
.
toolbox
&
&
this
.
inspector
.
sidebar
&
&
this
.
inspector
.
toolbox
.
currentToolId
=
=
=
"
inspector
"
&
&
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
=
"
layoutview
"
)
;
}
onHighlighterShown
(
data
)
{
if
(
data
.
type
=
=
=
this
.
inspector
.
highlighters
.
TYPES
.
FLEXBOX
)
{
this
.
onHighlighterChange
(
true
data
.
nodeFront
)
;
}
}
onHighlighterHidden
(
data
)
{
if
(
data
.
type
=
=
=
this
.
inspector
.
highlighters
.
TYPES
.
FLEXBOX
)
{
this
.
onHighlighterChange
(
false
data
.
nodeFront
)
;
}
}
onHighlighterChange
(
highlighted
nodeFront
)
{
const
{
flexbox
}
=
this
.
store
.
getState
(
)
;
if
(
flexbox
.
flexContainer
.
nodeFront
=
=
=
nodeFront
&
&
flexbox
.
highlighted
!
=
=
highlighted
)
{
this
.
store
.
dispatch
(
updateFlexboxHighlighted
(
highlighted
)
)
;
}
}
onNavigate
(
)
{
this
.
_overlayColor
=
null
;
this
.
onUpdatePanel
(
)
;
}
async
onReflow
(
)
{
if
(
!
this
.
isPanelVisible
(
)
|
|
!
this
.
store
|
|
!
this
.
selection
.
nodeFront
|
|
this
.
_isUpdating
)
{
return
;
}
try
{
const
flexContainer
=
await
this
.
getFlexContainerProps
(
this
.
selection
.
nodeFront
)
;
if
(
!
flexContainer
)
{
this
.
store
.
dispatch
(
clearFlexbox
(
)
)
;
return
;
}
const
{
flexbox
}
=
this
.
store
.
getState
(
)
;
if
(
hasFlexContainerChanged
(
flexbox
.
flexContainer
flexContainer
)
)
{
this
.
update
(
flexContainer
)
;
return
;
}
let
flexItemContainer
=
null
;
if
(
flexContainer
.
nodeFront
=
=
=
this
.
selection
.
nodeFront
)
{
flexItemContainer
=
await
this
.
getFlexContainerProps
(
this
.
selection
.
nodeFront
true
)
;
}
if
(
hasFlexContainerChanged
(
flexbox
.
flexItemContainer
flexItemContainer
)
)
{
this
.
update
(
flexContainer
flexItemContainer
)
;
}
}
catch
(
e
)
{
}
}
async
onSetFlexboxOverlayColor
(
color
)
{
this
.
store
.
dispatch
(
updateFlexboxColor
(
color
)
)
;
const
{
flexbox
}
=
this
.
store
.
getState
(
)
;
if
(
flexbox
.
highlighted
)
{
this
.
inspector
.
highlighters
.
showFlexboxHighlighter
(
flexbox
.
flexContainer
.
nodeFront
)
;
}
this
.
_overlayColor
=
color
;
const
currentUrl
=
this
.
inspector
.
currentTarget
.
url
;
const
hostname
=
parseURL
(
currentUrl
)
.
hostname
|
|
parseURL
(
currentUrl
)
.
protocol
;
const
customColors
=
await
this
.
getCustomHostColors
(
)
;
customColors
[
hostname
]
=
color
;
this
.
_customHostColors
=
customColors
;
await
asyncStorage
.
setItem
(
"
flexboxInspectorHostColors
"
customColors
)
;
}
onSidebarSelect
(
)
{
if
(
!
this
.
isPanelVisible
(
)
)
{
this
.
inspector
.
off
(
"
reflow
-
in
-
selected
-
target
"
this
.
onReflow
)
;
this
.
inspector
.
off
(
"
new
-
root
"
this
.
onNavigate
)
;
this
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onUpdatePanel
)
;
return
;
}
this
.
inspector
.
on
(
"
reflow
-
in
-
selected
-
target
"
this
.
onReflow
)
;
this
.
inspector
.
on
(
"
new
-
root
"
this
.
onNavigate
)
;
this
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onUpdatePanel
)
;
this
.
update
(
)
;
}
onUpdatePanel
(
_
reason
)
{
if
(
!
this
.
isPanelVisible
(
)
)
{
return
;
}
this
.
update
(
null
null
reason
=
=
=
"
treepanel
"
)
;
}
async
update
(
flexContainer
flexItemContainer
initiatedByMarkupViewSelection
)
{
this
.
_isUpdating
=
true
;
if
(
!
this
.
inspector
|
|
!
this
.
store
|
|
!
this
.
selection
.
nodeFront
)
{
this
.
_isUpdating
=
false
;
return
;
}
try
{
if
(
!
flexContainer
)
{
flexContainer
=
await
this
.
getFlexContainerProps
(
this
.
selection
.
nodeFront
)
;
}
if
(
!
flexContainer
)
{
this
.
store
.
dispatch
(
clearFlexbox
(
)
)
;
this
.
_isUpdating
=
false
;
return
;
}
if
(
!
flexItemContainer
&
&
flexContainer
.
nodeFront
=
=
=
this
.
selection
.
nodeFront
)
{
flexItemContainer
=
await
this
.
getFlexContainerProps
(
this
.
selection
.
nodeFront
true
)
;
}
const
highlighted
=
flexContainer
.
nodeFront
=
=
=
this
.
inspector
.
highlighters
.
getNodeForActiveHighlighter
(
this
.
inspector
.
highlighters
.
TYPES
.
FLEXBOX
)
;
const
color
=
await
this
.
getOverlayColor
(
)
;
this
.
store
.
dispatch
(
updateFlexbox
(
{
color
flexContainer
flexItemContainer
highlighted
initiatedByMarkupViewSelection
}
)
)
;
}
catch
(
e
)
{
}
this
.
_isUpdating
=
false
;
}
}
function
getComparableFlexContainerProperties
(
flexContainer
)
{
if
(
!
flexContainer
)
{
return
null
;
}
return
{
flexItems
:
getComparableFlexItemsProperties
(
flexContainer
.
flexItems
)
nodeFront
:
flexContainer
.
nodeFront
.
actorID
properties
:
flexContainer
.
properties
}
;
}
function
getComparableFlexItemsProperties
(
flexItems
)
{
return
flexItems
.
map
(
item
=
>
{
return
{
computedStyle
:
item
.
computedStyle
flexItemSizing
:
item
.
flexItemSizing
nodeFront
:
item
.
nodeFront
.
actorID
properties
:
item
.
properties
}
;
}
)
;
}
function
hasFlexContainerChanged
(
oldFlexContainer
newFlexContainer
)
{
return
(
JSON
.
stringify
(
getComparableFlexContainerProperties
(
oldFlexContainer
)
)
!
=
=
JSON
.
stringify
(
getComparableFlexContainerProperties
(
newFlexContainer
)
)
)
;
}
module
.
exports
=
FlexboxInspector
;
