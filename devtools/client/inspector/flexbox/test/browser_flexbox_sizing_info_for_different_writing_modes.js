"
use
strict
"
;
const
TEST_URI
=
URL_ROOT
+
"
doc_flexbox_writing_modes
.
html
"
;
async
function
checkFlexItemDimension
(
inspector
doc
selector
expectedDimension
)
{
info
(
"
Select
the
container
'
s
flex
item
.
"
)
;
const
onFlexItemSizingRendered
=
waitForDOM
(
doc
"
ul
.
flex
-
item
-
sizing
"
)
;
await
selectNode
(
selector
inspector
)
;
const
[
flexItemSizingContainer
]
=
await
onFlexItemSizingRendered
;
info
(
"
Check
that
the
minimum
size
section
shows
the
correct
dimension
.
"
)
;
const
[
sectionMinRowItem
]
=
[
.
.
.
flexItemSizingContainer
.
querySelectorAll
(
"
.
section
.
min
"
)
]
;
const
minDimension
=
sectionMinRowItem
.
querySelector
(
"
.
css
-
property
-
link
"
)
;
ok
(
minDimension
.
textContent
.
includes
(
expectedDimension
)
"
The
flex
item
sizing
has
the
correct
dimension
value
.
"
)
;
}
add_task
(
async
function
(
)
{
await
addTab
(
TEST_URI
)
;
const
{
inspector
flexboxInspector
}
=
await
openLayoutView
(
)
;
const
{
document
:
doc
}
=
flexboxInspector
;
await
checkFlexItemDimension
(
inspector
doc
"
.
row
.
vertical
.
item
"
"
min
-
height
"
)
;
await
checkFlexItemDimension
(
inspector
doc
"
.
column
.
vertical
.
item
"
"
min
-
width
"
)
;
await
checkFlexItemDimension
(
inspector
doc
"
.
row
.
horizontal
.
item
"
"
min
-
width
"
)
;
await
checkFlexItemDimension
(
inspector
doc
"
.
column
.
horizontal
.
item
"
"
min
-
height
"
)
;
}
)
;
