"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
createNode
}
=
require
(
"
devtools
/
client
/
inspector
/
animation
-
old
/
utils
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
animationinspector
.
properties
"
)
;
const
PLAYBACK_RATES
=
[
.
1
.
25
.
5
1
2
5
10
]
;
function
RateSelector
(
)
{
this
.
onRateChanged
=
this
.
onRateChanged
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
exports
.
RateSelector
=
RateSelector
;
RateSelector
.
prototype
=
{
init
:
function
(
containerEl
)
{
this
.
selectEl
=
createNode
(
{
parent
:
containerEl
nodeType
:
"
select
"
attributes
:
{
"
class
"
:
"
devtools
-
button
"
"
title
"
:
L10N
.
getStr
(
"
timeline
.
rateSelectorTooltip
"
)
}
}
)
;
this
.
selectEl
.
addEventListener
(
"
change
"
this
.
onRateChanged
)
;
}
destroy
:
function
(
)
{
this
.
selectEl
.
removeEventListener
(
"
change
"
this
.
onRateChanged
)
;
this
.
selectEl
.
remove
(
)
;
this
.
selectEl
=
null
;
}
getAnimationsRates
:
function
(
animations
)
{
return
sortedUnique
(
animations
.
map
(
a
=
>
a
.
state
.
playbackRate
)
)
;
}
getAllRates
:
function
(
animations
)
{
const
animationsRates
=
this
.
getAnimationsRates
(
animations
)
;
if
(
animationsRates
.
length
>
1
)
{
return
PLAYBACK_RATES
;
}
return
sortedUnique
(
PLAYBACK_RATES
.
concat
(
animationsRates
)
)
;
}
render
:
function
(
animations
)
{
const
allRates
=
this
.
getAnimationsRates
(
animations
)
;
const
hasOneRate
=
allRates
.
length
=
=
=
1
;
this
.
selectEl
.
innerHTML
=
"
"
;
if
(
!
hasOneRate
)
{
createNode
(
{
parent
:
this
.
selectEl
nodeType
:
"
option
"
attributes
:
{
value
:
"
"
selector
:
"
true
"
}
textContent
:
"
-
"
}
)
;
}
for
(
const
rate
of
this
.
getAllRates
(
animations
)
)
{
const
option
=
createNode
(
{
parent
:
this
.
selectEl
nodeType
:
"
option
"
attributes
:
{
value
:
rate
}
textContent
:
L10N
.
getFormatStr
(
"
player
.
playbackRateLabel
"
rate
)
}
)
;
if
(
hasOneRate
&
&
rate
=
=
=
allRates
[
0
]
)
{
option
.
setAttribute
(
"
selected
"
"
true
"
)
;
}
}
}
onRateChanged
:
function
(
)
{
const
rate
=
parseFloat
(
this
.
selectEl
.
value
)
;
if
(
!
isNaN
(
rate
)
)
{
this
.
emit
(
"
rate
-
changed
"
rate
)
;
}
}
}
;
const
sortedUnique
=
arr
=
>
[
.
.
.
new
Set
(
arr
)
]
.
sort
(
(
a
b
)
=
>
a
>
b
)
;
