"
use
strict
"
;
requestLongerTimeout
(
2
)
;
add_task
(
async
function
(
)
{
await
addTab
(
URL_ROOT
+
"
doc_simple_animation
.
html
"
)
;
const
{
toolbox
inspector
panel
}
=
await
openAnimationInspector
(
)
;
info
(
"
Select
the
simple
animated
node
"
)
;
await
selectNodeAndWaitForAnimations
(
"
.
animated
"
inspector
)
;
let
targets
=
getAnimationTargetNodes
(
panel
)
;
let
targetNodeComponent
=
targets
[
0
]
;
info
(
"
Retrieve
the
part
of
the
widget
that
highlights
the
node
on
hover
"
)
;
const
highlightingEl
=
targetNodeComponent
.
previewer
.
previewEl
;
info
(
"
Listen
to
node
-
highlight
event
and
mouse
over
the
widget
"
)
;
const
onHighlight
=
toolbox
.
once
(
"
node
-
highlight
"
)
;
EventUtils
.
synthesizeMouse
(
highlightingEl
10
5
{
type
:
"
mouseover
"
}
highlightingEl
.
ownerDocument
.
defaultView
)
;
const
nodeFront
=
await
onHighlight
;
EventUtils
.
synthesizeMouse
(
highlightingEl
10
5
{
type
:
"
mouseout
"
}
highlightingEl
.
ownerDocument
.
defaultView
)
;
ok
(
true
"
The
node
-
highlight
event
was
fired
"
)
;
is
(
targetNodeComponent
.
previewer
.
nodeFront
nodeFront
"
The
highlighted
node
is
the
one
stored
on
the
animation
widget
"
)
;
is
(
nodeFront
.
tagName
"
DIV
"
"
The
highlighted
node
has
the
correct
tagName
"
)
;
is
(
nodeFront
.
attributes
[
0
]
.
name
"
class
"
"
The
highlighted
node
has
the
correct
attributes
"
)
;
is
(
nodeFront
.
attributes
[
0
]
.
value
"
ball
animated
"
"
The
highlighted
node
has
the
correct
class
"
)
;
info
(
"
Select
the
body
node
in
order
to
have
the
list
of
all
animations
"
)
;
await
selectNodeAndWaitForAnimations
(
"
body
"
inspector
)
;
targets
=
getAnimationTargetNodes
(
panel
)
;
targetNodeComponent
=
targets
[
0
]
;
info
(
"
Click
on
the
first
animated
node
component
and
wait
for
the
"
+
"
selection
to
change
"
)
;
const
onSelection
=
inspector
.
selection
.
once
(
"
new
-
node
-
front
"
)
;
const
onRendered
=
waitForAnimationTimelineRendering
(
panel
)
;
const
nodeEl
=
targetNodeComponent
.
previewer
.
previewEl
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
}
nodeEl
nodeEl
.
ownerDocument
.
defaultView
)
;
await
onSelection
;
is
(
inspector
.
selection
.
nodeFront
targetNodeComponent
.
previewer
.
nodeFront
"
The
selected
node
is
the
one
stored
on
the
animation
widget
"
)
;
await
onRendered
;
}
)
;
