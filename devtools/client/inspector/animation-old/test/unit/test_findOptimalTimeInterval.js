"
use
strict
"
;
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
findOptimalTimeInterval
}
=
require
(
"
devtools
/
client
/
inspector
/
animation
-
old
/
utils
"
)
;
const
TEST_DATA
=
[
{
desc
:
"
With
no
minTimeInterval
expect
the
interval
to
be
0
"
minTimeInterval
:
null
expectedInterval
:
0
}
{
desc
:
"
With
a
minTimeInterval
of
0
ms
expect
the
interval
to
be
0
"
minTimeInterval
:
0
expectedInterval
:
0
}
{
desc
:
"
With
a
minInterval
of
1ms
expect
the
interval
to
be
the
1ms
too
"
minTimeInterval
:
1
expectedInterval
:
1
}
{
desc
:
"
With
a
very
small
minTimeInterval
expect
the
interval
to
be
1ms
"
minTimeInterval
:
1e
-
31
expectedInterval
:
1
}
{
desc
:
"
With
a
minInterval
of
2
.
5ms
expect
the
interval
to
be
2
.
5ms
too
"
minTimeInterval
:
2
.
5
expectedInterval
:
2
.
5
}
{
desc
:
"
With
a
minInterval
of
5ms
expect
the
interval
to
be
5ms
too
"
minTimeInterval
:
5
expectedInterval
:
5
}
{
desc
:
"
With
a
minInterval
of
7ms
expect
the
interval
to
be
the
next
"
+
"
multiple
of
5
"
minTimeInterval
:
7
expectedInterval
:
10
}
{
minTimeInterval
:
20
expectedInterval
:
25
}
{
minTimeInterval
:
33
expectedInterval
:
50
}
{
minTimeInterval
:
987
expectedInterval
:
1000
}
{
minTimeInterval
:
1234
expectedInterval
:
2500
}
{
minTimeInterval
:
9800
expectedInterval
:
10000
}
]
;
function
run_test
(
)
{
for
(
const
{
minTimeInterval
desc
expectedInterval
}
of
TEST_DATA
)
{
info
(
Testing
minTimeInterval
:
{
minTimeInterval
}
.
Expecting
{
expectedInterval
}
.
)
;
const
interval
=
findOptimalTimeInterval
(
minTimeInterval
)
;
if
(
typeof
expectedInterval
=
=
"
string
"
)
{
ok
(
eval
(
expectedInterval
)
desc
)
;
}
else
{
equal
(
interval
expectedInterval
desc
)
;
}
}
}
