"
use
strict
"
;
addMessageListener
(
"
Test
:
ToggleAnimationPlayer
"
function
(
msg
)
{
const
{
selector
animationIndex
pause
}
=
msg
.
data
;
const
node
=
superQuerySelector
(
selector
)
;
if
(
!
node
)
{
return
;
}
const
animation
=
node
.
getAnimations
(
)
[
animationIndex
]
;
if
(
pause
)
{
animation
.
pause
(
)
;
}
else
{
animation
.
play
(
)
;
}
sendAsyncMessage
(
"
Test
:
ToggleAnimationPlayer
"
)
;
}
)
;
addMessageListener
(
"
Test
:
SetAnimationPlayerCurrentTime
"
function
(
msg
)
{
const
{
selector
animationIndex
currentTime
}
=
msg
.
data
;
const
node
=
superQuerySelector
(
selector
)
;
if
(
!
node
)
{
return
;
}
const
animation
=
node
.
getAnimations
(
)
[
animationIndex
]
;
animation
.
currentTime
=
currentTime
;
sendAsyncMessage
(
"
Test
:
SetAnimationPlayerCurrentTime
"
)
;
}
)
;
addMessageListener
(
"
Test
:
SetAnimationPlayerPlaybackRate
"
function
(
msg
)
{
const
{
selector
animationIndex
playbackRate
}
=
msg
.
data
;
const
node
=
superQuerySelector
(
selector
)
;
if
(
!
node
)
{
return
;
}
const
player
=
node
.
getAnimations
(
)
[
animationIndex
]
;
player
.
playbackRate
=
playbackRate
;
sendAsyncMessage
(
"
Test
:
SetAnimationPlayerPlaybackRate
"
)
;
}
)
;
addMessageListener
(
"
Test
:
GetAnimationPlayerState
"
function
(
msg
)
{
const
{
selector
animationIndex
}
=
msg
.
data
;
const
node
=
superQuerySelector
(
selector
)
;
if
(
!
node
)
{
return
;
}
const
animation
=
node
.
getAnimations
(
)
[
animationIndex
]
;
animation
.
ready
.
then
(
(
)
=
>
{
sendAsyncMessage
(
"
Test
:
GetAnimationPlayerState
"
animation
.
playState
)
;
}
)
;
}
)
;
function
superQuerySelector
(
superSelector
root
=
content
.
document
)
{
const
frameIndex
=
superSelector
.
indexOf
(
"
|
|
"
)
;
if
(
frameIndex
=
=
=
-
1
)
{
return
root
.
querySelector
(
superSelector
)
;
}
const
rootSelector
=
superSelector
.
substring
(
0
frameIndex
)
.
trim
(
)
;
const
childSelector
=
superSelector
.
substring
(
frameIndex
+
2
)
.
trim
(
)
;
root
=
root
.
querySelector
(
rootSelector
)
;
if
(
!
root
|
|
!
root
.
contentWindow
)
{
return
null
;
}
return
superQuerySelector
(
childSelector
root
.
contentWindow
.
document
)
;
}
