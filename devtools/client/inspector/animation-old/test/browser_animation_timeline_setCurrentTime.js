"
use
strict
"
;
requestLongerTimeout
(
2
)
;
add_task
(
async
function
(
)
{
await
addTab
(
URL_ROOT
+
"
doc_timing_combination_animation
.
html
"
)
;
const
{
panel
controller
}
=
await
openAnimationInspector
(
)
;
await
clickTimelinePlayPauseButton
(
panel
)
;
const
timeBlockComponents
=
getAnimationTimeBlocks
(
panel
)
;
let
time
=
-
5000
;
await
controller
.
setCurrentTimeAll
(
time
true
)
;
for
(
let
i
=
0
;
i
<
timeBlockComponents
.
length
;
i
+
+
)
{
await
timeBlockComponents
[
i
]
.
animation
.
refreshState
(
)
;
const
state
=
await
timeBlockComponents
[
i
]
.
animation
.
state
;
info
(
Check
the
state
at
{
time
}
ms
with
+
delay
:
{
state
.
delay
}
and
endDelay
:
{
state
.
endDelay
}
)
;
is
(
state
.
currentTime
0
The
currentTime
should
be
0
at
setCurrentTime
(
{
time
}
)
)
;
}
time
=
10000
;
await
controller
.
setCurrentTimeAll
(
time
true
)
;
for
(
let
i
=
0
;
i
<
timeBlockComponents
.
length
;
i
+
+
)
{
await
timeBlockComponents
[
i
]
.
animation
.
refreshState
(
)
;
const
state
=
await
timeBlockComponents
[
i
]
.
animation
.
state
;
info
(
Check
the
state
at
{
time
}
ms
with
+
delay
:
{
state
.
delay
}
and
endDelay
:
{
state
.
endDelay
}
)
;
const
expected
=
state
.
delay
<
0
?
0
:
time
;
is
(
state
.
currentTime
expected
The
currentTime
should
be
{
expected
}
at
setCurrentTime
(
{
time
}
)
.
+
delay
:
{
state
.
delay
}
and
endDelay
:
{
state
.
endDelay
}
)
;
}
time
=
60000
;
await
controller
.
setCurrentTimeAll
(
time
true
)
;
for
(
let
i
=
0
;
i
<
timeBlockComponents
.
length
;
i
+
+
)
{
await
timeBlockComponents
[
i
]
.
animation
.
refreshState
(
)
;
const
state
=
await
timeBlockComponents
[
i
]
.
animation
.
state
;
info
(
Check
the
state
at
{
time
}
ms
with
+
delay
:
{
state
.
delay
}
and
endDelay
:
{
state
.
endDelay
}
)
;
const
expected
=
state
.
delay
<
0
?
time
+
state
.
delay
:
time
;
is
(
state
.
currentTime
expected
The
currentTime
should
be
{
expected
}
at
setCurrentTime
(
{
time
}
)
.
+
delay
:
{
state
.
delay
}
and
endDelay
:
{
state
.
endDelay
}
)
;
}
time
=
150000
;
await
controller
.
setCurrentTimeAll
(
time
true
)
;
for
(
let
i
=
0
;
i
<
timeBlockComponents
.
length
;
i
+
+
)
{
await
timeBlockComponents
[
i
]
.
animation
.
refreshState
(
)
;
const
state
=
await
timeBlockComponents
[
i
]
.
animation
.
state
;
info
(
Check
the
state
at
{
time
}
ms
with
+
delay
:
{
state
.
delay
}
and
endDelay
:
{
state
.
endDelay
}
)
;
const
currentTime
=
state
.
delay
<
0
?
time
+
state
.
delay
:
time
;
const
endTime
=
state
.
delay
+
state
.
iterationCount
*
state
.
duration
+
state
.
endDelay
;
const
expected
=
state
.
endDelay
<
0
&
&
state
.
fill
=
=
=
"
both
"
&
&
currentTime
>
endTime
?
endTime
:
currentTime
;
is
(
state
.
currentTime
expected
The
currentTime
should
be
{
expected
}
at
setCurrentTime
(
{
time
}
)
.
+
delay
:
{
state
.
delay
}
and
endDelay
:
{
state
.
endDelay
}
)
;
}
}
)
;
