"
use
strict
"
;
const
{
createFactory
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
LocalizationProvider
=
createFactory
(
FluentReact
.
LocalizationProvider
)
;
const
compatibilityReducer
=
require
(
"
devtools
/
client
/
inspector
/
compatibility
/
reducers
/
compatibility
"
)
;
const
{
appendNode
clearDestroyedNodes
initUserSettings
removeNode
updateNodes
updateSelectedNode
updateTopLevelTarget
updateNode
}
=
require
(
"
devtools
/
client
/
inspector
/
compatibility
/
actions
/
compatibility
"
)
;
const
CompatibilityApp
=
createFactory
(
require
(
"
devtools
/
client
/
inspector
/
compatibility
/
components
/
CompatibilityApp
"
)
)
;
class
CompatibilityView
{
constructor
(
inspector
window
)
{
this
.
inspector
=
inspector
;
this
.
inspector
.
store
.
injectReducer
(
"
compatibility
"
compatibilityReducer
)
;
this
.
_parseMarkup
=
this
.
_parseMarkup
.
bind
(
this
)
;
this
.
_onChangeAdded
=
this
.
_onChangeAdded
.
bind
(
this
)
;
this
.
_onPanelSelected
=
this
.
_onPanelSelected
.
bind
(
this
)
;
this
.
_onSelectedNodeChanged
=
this
.
_onSelectedNodeChanged
.
bind
(
this
)
;
this
.
_onTopLevelTargetChanged
=
this
.
_onTopLevelTargetChanged
.
bind
(
this
)
;
this
.
_onResourceAvailable
=
this
.
_onResourceAvailable
.
bind
(
this
)
;
this
.
_onMarkupMutation
=
this
.
_onMarkupMutation
.
bind
(
this
)
;
this
.
_init
(
)
;
}
destroy
(
)
{
try
{
this
.
resourceCommand
.
unwatchResources
(
[
this
.
resourceCommand
.
TYPES
.
CSS_CHANGE
]
{
onAvailable
:
this
.
_onResourceAvailable
}
)
;
}
catch
(
e
)
{
}
this
.
inspector
.
off
(
"
new
-
root
"
this
.
_onTopLevelTargetChanged
)
;
this
.
inspector
.
off
(
"
markupmutation
"
this
.
_onMarkupMutation
)
;
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
_onSelectedNodeChanged
)
;
this
.
inspector
.
sidebar
.
off
(
"
compatibilityview
-
selected
"
this
.
_onPanelSelected
)
;
this
.
inspector
=
null
;
}
get
resourceCommand
(
)
{
return
this
.
inspector
.
toolbox
.
resourceCommand
;
}
async
_init
(
)
{
const
{
setSelectedNode
}
=
this
.
inspector
.
getCommonComponentProps
(
)
;
const
compatibilityApp
=
new
CompatibilityApp
(
{
setSelectedNode
}
)
;
this
.
provider
=
createElement
(
Provider
{
id
:
"
compatibilityview
"
store
:
this
.
inspector
.
store
}
LocalizationProvider
(
{
bundles
:
this
.
inspector
.
fluentL10n
.
getBundles
(
)
parseMarkup
:
this
.
_parseMarkup
}
compatibilityApp
)
)
;
this
.
inspector
.
store
.
dispatch
(
initUserSettings
(
)
)
;
this
.
inspector
.
on
(
"
new
-
root
"
this
.
_onTopLevelTargetChanged
)
;
this
.
inspector
.
on
(
"
markupmutation
"
this
.
_onMarkupMutation
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
_onSelectedNodeChanged
)
;
this
.
inspector
.
sidebar
.
on
(
"
compatibilityview
-
selected
"
this
.
_onPanelSelected
)
;
await
this
.
resourceCommand
.
watchResources
(
[
this
.
resourceCommand
.
TYPES
.
CSS_CHANGE
]
{
onAvailable
:
this
.
_onResourceAvailable
ignoreExistingResources
:
true
}
)
;
this
.
inspector
.
emitForTests
(
"
compatibilityview
-
initialized
"
)
;
}
_isAvailable
(
)
{
return
(
this
.
inspector
&
&
this
.
inspector
.
sidebar
&
&
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
=
"
compatibilityview
"
&
&
this
.
inspector
.
selection
&
&
this
.
inspector
.
selection
.
isConnected
(
)
)
;
}
_parseMarkup
(
str
)
{
throw
new
Error
(
"
The
inspector
cannot
use
tags
in
ftl
strings
because
it
does
not
run
in
a
BrowserLoader
"
)
;
}
_onChangeAdded
(
{
selector
}
)
{
if
(
!
this
.
_isAvailable
(
)
)
{
this
.
_isChangeAddedWhileHidden
=
true
;
return
;
}
this
.
_isChangeAddedWhileHidden
=
false
;
if
(
this
.
_previousChangedSelector
=
=
=
selector
)
{
clearTimeout
(
this
.
_updateNodesTimeoutId
)
;
}
this
.
_previousChangedSelector
=
selector
;
this
.
_updateNodesTimeoutId
=
setTimeout
(
(
)
=
>
{
this
.
inspector
.
store
.
dispatch
(
updateNodes
(
selector
)
)
;
}
500
)
;
}
_onMarkupMutation
(
mutations
)
{
const
attributeMutation
=
mutations
.
filter
(
mutation
=
>
mutation
.
type
=
=
=
"
attributes
"
&
&
(
mutation
.
attributeName
=
=
=
"
style
"
|
|
mutation
.
attributeName
=
=
=
"
class
"
)
)
;
const
childListMutation
=
mutations
.
filter
(
mutation
=
>
mutation
.
type
=
=
=
"
childList
"
)
;
if
(
attributeMutation
.
length
=
=
=
0
&
&
childListMutation
.
length
=
=
=
0
)
{
return
;
}
if
(
!
this
.
_isAvailable
(
)
)
{
this
.
_isChangeAddedWhileHidden
=
true
;
return
;
}
this
.
_isChangeAddedWhileHidden
=
false
;
for
(
const
{
target
}
of
attributeMutation
)
{
this
.
inspector
.
store
.
dispatch
(
updateNode
(
target
)
)
;
}
let
cleanupDestroyedNodes
=
false
;
for
(
const
{
removed
target
}
of
childListMutation
)
{
if
(
!
removed
.
length
)
{
this
.
inspector
.
store
.
dispatch
(
appendNode
(
target
)
)
;
continue
;
}
const
retainedNodes
=
removed
.
filter
(
node
=
>
node
&
&
!
node
.
isDestroyed
(
)
)
;
cleanupDestroyedNodes
=
cleanupDestroyedNodes
|
|
retainedNodes
.
length
!
=
=
removed
.
length
;
for
(
const
retainedNode
of
retainedNodes
)
{
this
.
inspector
.
store
.
dispatch
(
removeNode
(
retainedNode
)
)
;
}
}
if
(
cleanupDestroyedNodes
)
{
this
.
inspector
.
store
.
dispatch
(
clearDestroyedNodes
(
)
)
;
}
}
_onPanelSelected
(
)
{
const
{
selectedNode
topLevelTarget
}
=
this
.
inspector
.
store
.
getState
(
)
.
compatibility
;
if
(
this
.
inspector
.
selection
.
nodeFront
!
=
=
selectedNode
|
|
this
.
_isChangeAddedWhileHidden
)
{
this
.
_onSelectedNodeChanged
(
)
;
}
if
(
this
.
inspector
.
toolbox
.
target
!
=
=
topLevelTarget
|
|
this
.
_isChangeAddedWhileHidden
)
{
this
.
_onTopLevelTargetChanged
(
)
;
}
this
.
_isChangeAddedWhileHidden
=
false
;
}
_onSelectedNodeChanged
(
)
{
if
(
!
this
.
_isAvailable
(
)
)
{
return
;
}
this
.
inspector
.
store
.
dispatch
(
updateSelectedNode
(
this
.
inspector
.
selection
.
nodeFront
)
)
;
}
_onResourceAvailable
(
resources
)
{
for
(
const
resource
of
resources
)
{
if
(
resource
.
source
?
.
type
!
=
=
"
element
"
)
{
this
.
_onChangeAdded
(
resource
)
;
}
}
}
_onTopLevelTargetChanged
(
)
{
if
(
!
this
.
_isAvailable
(
)
)
{
return
;
}
this
.
inspector
.
store
.
dispatch
(
updateTopLevelTarget
(
this
.
inspector
.
toolbox
.
target
)
)
;
}
}
module
.
exports
=
CompatibilityView
;
