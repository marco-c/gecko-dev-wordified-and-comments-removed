"
use
strict
"
;
const
FrameURL
=
"
data
:
text
/
html
;
charset
=
UTF
-
8
"
+
encodeURI
(
'
<
div
id
=
"
in
-
iframe
"
>
frame
<
/
div
>
'
)
;
const
URL
=
"
data
:
text
/
html
;
charset
=
UTF
-
8
"
+
encodeURI
(
'
<
iframe
src
=
"
'
+
FrameURL
+
'
"
>
<
/
iframe
>
<
div
id
=
"
top
"
>
top
<
/
div
>
'
)
;
add_task
(
async
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
command
-
button
-
frames
.
enabled
"
true
)
;
const
{
inspector
toolbox
}
=
await
openInspectorForURL
(
URL
)
;
await
assertMarkupViewAsTree
(
body
iframe
!
ignore
-
children
div
id
=
"
top
"
"
body
"
inspector
)
;
assertMarkupViewIsLoaded
(
inspector
)
;
const
btn
=
toolbox
.
doc
.
getElementById
(
"
command
-
button
-
frames
"
)
;
ok
(
!
btn
.
firstChild
"
The
frame
list
button
doesn
'
t
have
any
children
"
)
;
const
panel
=
toolbox
.
doc
.
getElementById
(
"
command
-
button
-
frames
-
panel
"
)
;
btn
.
click
(
)
;
ok
(
panel
"
popup
panel
has
created
.
"
)
;
await
waitUntil
(
(
)
=
>
panel
.
classList
.
contains
(
"
tooltip
-
visible
"
)
)
;
const
menuList
=
toolbox
.
doc
.
getElementById
(
"
toolbox
-
frame
-
menu
"
)
;
const
frames
=
Array
.
prototype
.
slice
.
call
(
menuList
.
querySelectorAll
(
"
.
command
"
)
)
;
is
(
frames
.
length
2
"
We
have
both
frames
in
the
menu
"
)
;
frames
.
sort
(
function
(
a
b
)
{
return
a
.
children
[
0
]
.
innerHTML
.
localeCompare
(
b
.
children
[
0
]
.
innerHTML
)
;
}
)
;
is
(
frames
[
0
]
.
querySelector
(
"
.
label
"
)
.
textContent
FrameURL
"
Got
top
level
document
in
the
list
"
)
;
is
(
frames
[
1
]
.
querySelector
(
"
.
label
"
)
.
textContent
URL
"
Got
iframe
document
in
the
list
"
)
;
const
{
resourceCommand
}
=
toolbox
.
commands
;
const
{
onResource
:
willNavigate
}
=
await
resourceCommand
.
waitForNextResource
(
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
{
ignoreExistingResources
:
true
predicate
(
resource
)
{
return
resource
.
name
=
=
"
will
-
navigate
"
;
}
}
)
;
willNavigate
.
then
(
(
)
=
>
{
info
(
"
Navigation
to
the
iframe
has
started
the
inspector
should
be
empty
"
)
;
assertMarkupViewIsEmpty
(
inspector
)
;
}
)
;
const
newRoot
=
inspector
.
once
(
"
new
-
root
"
)
;
await
selectNode
(
"
#
top
"
inspector
)
;
info
(
"
Select
the
iframe
"
)
;
frames
[
0
]
.
click
(
)
;
await
willNavigate
;
await
newRoot
;
info
(
"
Navigation
to
the
iframe
is
done
the
inspector
should
be
back
up
"
)
;
await
assertMarkupViewAsTree
(
body
div
id
=
"
in
-
iframe
"
"
body
"
inspector
)
;
assertMarkupViewIsLoaded
(
inspector
)
;
await
selectNode
(
"
#
frame
"
inspector
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
command
-
button
-
frames
.
enabled
"
)
;
}
)
;
function
assertMarkupViewIsLoaded
(
inspector
)
{
const
markupViewBox
=
inspector
.
panelDoc
.
getElementById
(
"
markup
-
box
"
)
;
is
(
markupViewBox
.
childNodes
.
length
1
"
The
markup
-
view
is
loaded
"
)
;
}
function
assertMarkupViewIsEmpty
(
inspector
)
{
const
markupFrame
=
inspector
.
_markupFrame
;
is
(
markupFrame
.
contentDocument
.
getElementById
(
"
root
"
)
.
childNodes
.
length
0
"
The
markup
-
view
is
unloaded
"
)
;
}
