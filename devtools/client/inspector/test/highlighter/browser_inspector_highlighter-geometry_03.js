"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
doc_inspector_highlighter
-
geometry_01
.
html
"
;
const
ID
=
"
geometry
-
editor
-
"
;
const
{
TYPES
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
highlighters
.
mjs
"
)
;
const
HIGHLIGHTER_TYPE
=
TYPES
.
GEOMETRY
;
const
PROPS
=
[
"
left
"
"
right
"
"
top
"
"
bottom
"
]
;
add_task
(
async
function
(
)
{
const
helper
=
await
openInspectorForURL
(
TEST_URL
)
.
then
(
getHighlighterHelperFor
(
HIGHLIGHTER_TYPE
)
)
;
helper
.
prefix
=
ID
;
const
{
finalize
}
=
helper
;
await
checkArrowsLabelsAndHandlers
(
"
#
node2
"
[
"
top
"
"
left
"
"
bottom
"
"
right
"
]
helper
)
;
await
checkArrowsLabelsAndHandlers
(
"
#
node3
"
[
"
top
"
"
left
"
]
helper
)
;
await
finalize
(
)
;
}
)
;
async
function
checkArrowsLabelsAndHandlers
(
selector
expectedProperties
{
show
hide
isElementHidden
}
)
{
info
(
"
Getting
node
"
+
selector
+
"
from
the
page
"
)
;
await
show
(
selector
)
;
for
(
const
name
of
expectedProperties
)
{
const
hidden
=
(
await
isElementHidden
(
"
arrow
-
"
+
name
)
)
&
&
(
await
isElementHidden
(
"
handler
-
"
+
name
)
)
;
ok
(
!
hidden
"
The
"
+
name
+
"
label
/
arrow
&
handler
is
visible
for
node
"
+
selector
)
;
}
for
(
const
name
of
PROPS
)
{
if
(
expectedProperties
.
includes
(
name
)
)
{
continue
;
}
const
hidden
=
(
await
isElementHidden
(
"
arrow
-
"
+
name
)
)
&
&
(
await
isElementHidden
(
"
handler
-
"
+
name
)
)
;
ok
(
hidden
"
The
"
+
name
+
"
arrow
&
handler
is
hidden
for
node
"
+
selector
)
;
}
info
(
"
Hiding
the
highlighter
"
)
;
await
hide
(
)
;
}
