"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
doc_inspector_highlighter_cssshapes_iframe
.
html
"
;
const
{
TYPES
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
highlighters
.
mjs
"
)
;
const
HIGHLIGHTER_TYPE
=
TYPES
.
SHAPES
;
add_task
(
async
function
(
)
{
const
env
=
await
openInspectorForURL
(
TEST_URL
)
;
const
helper
=
await
getHighlighterHelperFor
(
HIGHLIGHTER_TYPE
)
(
env
)
;
const
{
inspector
}
=
env
;
const
view
=
selectRuleView
(
inspector
)
;
const
highlighters
=
view
.
highlighters
;
const
config
=
{
inspector
view
highlighters
helper
}
;
await
testPolygonIframeMovePoint
(
config
)
;
}
)
;
async
function
testPolygonIframeMovePoint
(
config
)
{
const
{
inspector
view
helper
}
=
config
;
const
selector
=
"
#
polygon
"
;
const
property
=
"
clip
-
path
"
;
info
(
Turn
on
shapes
highlighter
for
{
selector
}
)
;
const
highlightedNode
=
await
getNodeFrontInFrames
(
[
"
#
frame
"
selector
]
inspector
)
;
await
selectNode
(
highlightedNode
inspector
)
;
await
toggleShapesHighlighter
(
view
selector
property
true
)
;
const
{
mouse
}
=
helper
;
let
onRuleViewChanged
=
waitForNEvents
(
view
"
ruleview
-
changed
"
2
)
;
info
(
"
Moving
polygon
point
visible
in
iframe
"
)
;
is
(
await
getClipPathPoint
(
highlightedNode
0
)
"
0px
0
%
"
First
point
is
at
0
0
%
)
;
await
mouse
.
down
(
10
10
)
;
await
mouse
.
move
(
20
20
)
;
await
mouse
.
up
(
)
;
await
reflowContentPage
(
)
;
await
onRuleViewChanged
;
is
(
await
getClipPathPoint
(
highlightedNode
0
)
"
10px
1
.
25
%
"
Point
moved
to
10px
1
.
25
%
)
;
onRuleViewChanged
=
waitForNEvents
(
view
"
ruleview
-
changed
"
2
)
;
info
(
"
Dragging
mouse
out
of
the
iframe
"
)
;
is
(
await
getClipPathPoint
(
highlightedNode
1
)
"
100px
50
%
"
Second
point
is
at
100px
50
%
)
;
await
mouse
.
down
(
110
410
)
;
await
mouse
.
move
(
120
510
)
;
await
mouse
.
up
(
)
;
await
reflowContentPage
(
)
;
await
onRuleViewChanged
;
ok
(
(
await
getClipPathPoint
(
highlightedNode
1
)
)
.
startsWith
(
"
110px
"
)
Point
moved
to
110px
)
;
info
(
Turn
off
shapes
highlighter
for
{
selector
}
)
;
await
toggleShapesHighlighter
(
view
selector
property
false
)
;
}
async
function
getClipPathPoint
(
node
pointIndex
)
{
const
computedStyle
=
await
node
.
inspectorFront
.
pageStyle
.
getComputed
(
node
)
;
const
definition
=
computedStyle
[
"
clip
-
path
"
]
.
value
;
const
points
=
definition
.
replaceAll
(
/
(
^
polygon
\
(
)
|
(
\
)
)
/
g
"
"
)
.
split
(
"
"
)
;
return
points
[
pointIndex
]
;
}
