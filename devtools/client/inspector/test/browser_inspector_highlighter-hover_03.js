"
use
strict
"
;
const
TEST_PAGE
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
'
<
p
id
=
"
one
"
>
one
<
/
p
>
<
p
id
=
"
two
"
>
two
<
/
p
>
'
;
add_task
(
async
function
(
)
{
const
{
inspector
}
=
await
openInspectorForURL
(
TEST_PAGE
)
;
info
(
"
Making
sure
the
markup
-
view
frame
is
focused
"
)
;
inspector
.
markup
.
_frame
.
focus
(
)
;
let
highlightedNode
=
null
;
inspector
.
toolbox
.
_highlighter
.
showBoxModel
=
function
(
nodeFront
)
{
highlightedNode
=
nodeFront
;
return
promise
.
resolve
(
)
;
}
;
inspector
.
toolbox
.
_highlighter
.
hideBoxModel
=
function
(
)
{
return
promise
.
resolve
(
)
;
}
;
async
function
isHighlighting
(
selector
desc
)
{
const
nodeFront
=
await
getNodeFront
(
selector
inspector
)
;
is
(
highlightedNode
nodeFront
desc
)
;
}
info
(
"
Hover
over
<
p
#
one
>
line
in
the
markup
-
view
"
)
;
await
hoverContainer
(
"
#
one
"
inspector
)
;
await
isHighlighting
(
"
#
one
"
"
<
p
#
one
>
is
highlighted
"
)
;
info
(
"
Navigate
to
<
p
#
two
>
with
the
keyboard
"
)
;
let
onUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
inspector
.
panelWin
)
;
await
onUpdated
;
onUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
inspector
.
panelWin
)
;
await
onUpdated
;
await
isHighlighting
(
"
#
two
"
"
<
p
#
two
>
is
highlighted
"
)
;
info
(
"
Navigate
back
to
<
p
#
one
>
with
the
keyboard
"
)
;
onUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
inspector
.
panelWin
)
;
await
onUpdated
;
await
isHighlighting
(
"
#
one
"
"
<
p
#
one
>
is
highlighted
again
"
)
;
}
)
;
