"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
test
-
actor
-
registry
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
shared
-
head
.
js
"
this
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
INSPECTOR_L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
inspector
.
properties
"
)
;
flags
.
testing
=
true
;
registerCleanupFunction
(
(
)
=
>
{
flags
.
testing
=
false
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
inspector
.
activeSidebar
"
)
;
}
)
;
registerCleanupFunction
(
function
*
(
)
{
EventUtils
.
synthesizeMouseAtPoint
(
window
.
innerWidth
1
{
type
:
"
mousemove
"
}
window
)
;
}
)
;
var
navigateTo
=
Task
.
async
(
function
*
(
inspector
url
)
{
let
markuploaded
=
inspector
.
once
(
"
markuploaded
"
)
;
let
onNewRoot
=
inspector
.
once
(
"
new
-
root
"
)
;
let
onUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
info
(
"
Navigating
to
:
"
+
url
)
;
let
activeTab
=
inspector
.
toolbox
.
target
.
activeTab
;
yield
activeTab
.
navigateTo
(
url
)
;
info
(
"
Waiting
for
markup
view
to
load
after
navigation
.
"
)
;
yield
markuploaded
;
info
(
"
Waiting
for
new
root
.
"
)
;
yield
onNewRoot
;
info
(
"
Waiting
for
inspector
to
update
after
new
-
root
event
.
"
)
;
yield
onUpdated
;
}
)
;
var
startPicker
=
Task
.
async
(
function
*
(
toolbox
skipFocus
)
{
info
(
"
Start
the
element
picker
"
)
;
toolbox
.
win
.
focus
(
)
;
yield
toolbox
.
highlighterUtils
.
startPicker
(
)
;
if
(
!
skipFocus
)
{
yield
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
*
(
)
{
content
.
focus
(
)
;
}
)
;
}
}
)
;
function
selectAndHighlightNode
(
selector
inspector
)
{
info
(
"
Highlighting
and
selecting
the
node
"
+
selector
)
;
return
selectNode
(
selector
inspector
"
test
-
highlight
"
)
;
}
function
*
focusNode
(
selector
inspector
)
{
getContainerForNodeFront
(
inspector
.
walker
.
rootNode
inspector
)
.
elt
.
focus
(
)
;
let
nodeFront
=
yield
getNodeFront
(
selector
inspector
)
;
let
container
=
getContainerForNodeFront
(
nodeFront
inspector
)
;
yield
selectNode
(
nodeFront
inspector
)
;
EventUtils
.
sendKey
(
"
return
"
inspector
.
panelWin
)
;
return
container
;
}
function
clearCurrentNodeSelection
(
inspector
)
{
info
(
"
Clearing
the
current
selection
"
)
;
let
updated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
inspector
.
selection
.
setNodeFront
(
null
)
;
return
updated
;
}
var
openInspectorForURL
=
Task
.
async
(
function
*
(
url
hostType
)
{
let
tab
=
yield
addTab
(
url
)
;
let
{
inspector
toolbox
testActor
}
=
yield
openInspector
(
hostType
)
;
return
{
tab
inspector
toolbox
testActor
}
;
}
)
;
function
getActiveInspector
(
)
{
let
target
=
TargetFactory
.
forTab
(
gBrowser
.
selectedTab
)
;
return
gDevTools
.
getToolbox
(
target
)
.
getPanel
(
"
inspector
"
)
;
}
var
clickOnInspectMenuItem
=
Task
.
async
(
function
*
(
testActor
selector
)
{
info
(
"
Showing
the
contextual
menu
on
node
"
+
selector
)
;
let
contentAreaContextMenu
=
document
.
querySelector
(
"
#
contentAreaContextMenu
"
)
;
let
contextOpened
=
once
(
contentAreaContextMenu
"
popupshown
"
)
;
yield
testActor
.
synthesizeMouse
(
{
selector
:
selector
center
:
true
options
:
{
type
:
"
contextmenu
"
button
:
2
}
}
)
;
yield
contextOpened
;
info
(
"
Triggering
the
inspect
action
"
)
;
yield
gContextMenu
.
inspectNode
(
)
;
info
(
"
Hiding
the
menu
"
)
;
let
contextClosed
=
once
(
contentAreaContextMenu
"
popuphidden
"
)
;
contentAreaContextMenu
.
hidePopup
(
)
;
yield
contextClosed
;
return
getActiveInspector
(
)
;
}
)
;
var
getNodeFrontInFrame
=
Task
.
async
(
function
*
(
selector
frameSelector
inspector
)
{
let
iframe
=
yield
getNodeFront
(
frameSelector
inspector
)
;
let
{
nodes
}
=
yield
inspector
.
walker
.
children
(
iframe
)
;
return
inspector
.
walker
.
querySelector
(
nodes
[
0
]
selector
)
;
}
)
;
var
focusSearchBoxUsingShortcut
=
Task
.
async
(
function
*
(
panelWin
callback
)
{
info
(
"
Focusing
search
box
"
)
;
let
searchBox
=
panelWin
.
document
.
getElementById
(
"
inspector
-
searchbox
"
)
;
let
focused
=
once
(
searchBox
"
focus
"
)
;
panelWin
.
focus
(
)
;
synthesizeKeyShortcut
(
INSPECTOR_L10N
.
getStr
(
"
inspector
.
searchHTML
.
key
"
)
)
;
yield
focused
;
if
(
callback
)
{
callback
(
)
;
}
}
)
;
function
getContainerForNodeFront
(
nodeFront
{
markup
}
)
{
return
markup
.
getContainer
(
nodeFront
)
;
}
var
getContainerForSelector
=
Task
.
async
(
function
*
(
selector
inspector
expectFailure
=
false
)
{
info
(
"
Getting
the
markup
-
container
for
node
"
+
selector
)
;
let
nodeFront
=
yield
getNodeFront
(
selector
inspector
)
;
let
container
=
getContainerForNodeFront
(
nodeFront
inspector
)
;
if
(
expectFailure
)
{
ok
(
!
container
"
Shouldn
'
t
find
markup
-
container
for
selector
:
"
+
selector
)
;
}
else
{
ok
(
container
"
Found
markup
-
container
for
selector
:
"
+
selector
)
;
}
return
container
;
}
)
;
var
hoverContainer
=
Task
.
async
(
function
*
(
selector
inspector
)
{
info
(
"
Hovering
over
the
markup
-
container
for
node
"
+
selector
)
;
let
nodeFront
=
yield
getNodeFront
(
selector
inspector
)
;
let
container
=
getContainerForNodeFront
(
nodeFront
inspector
)
;
let
highlit
=
inspector
.
toolbox
.
once
(
"
node
-
highlight
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
container
.
tagLine
{
type
:
"
mousemove
"
}
inspector
.
markup
.
doc
.
defaultView
)
;
return
highlit
;
}
)
;
var
clickContainer
=
Task
.
async
(
function
*
(
selector
inspector
)
{
info
(
"
Clicking
on
the
markup
-
container
for
node
"
+
selector
)
;
let
nodeFront
=
yield
getNodeFront
(
selector
inspector
)
;
let
container
=
getContainerForNodeFront
(
nodeFront
inspector
)
;
let
updated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
container
.
tagLine
{
type
:
"
mousedown
"
}
inspector
.
markup
.
doc
.
defaultView
)
;
EventUtils
.
synthesizeMouseAtCenter
(
container
.
tagLine
{
type
:
"
mouseup
"
}
inspector
.
markup
.
doc
.
defaultView
)
;
return
updated
;
}
)
;
function
mouseLeaveMarkupView
(
inspector
)
{
info
(
"
Leaving
the
markup
-
view
area
"
)
;
let
btn
=
inspector
.
toolbox
.
doc
.
querySelector
(
"
#
toolbox
-
controls
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
btn
{
type
:
"
mousemove
"
}
inspector
.
toolbox
.
win
)
;
return
new
Promise
(
resolve
=
>
{
executeSoon
(
resolve
)
;
}
)
;
}
function
fireCopyEvent
(
element
)
{
let
evt
=
element
.
ownerDocument
.
createEvent
(
"
Event
"
)
;
evt
.
initEvent
(
"
copy
"
true
true
)
;
element
.
dispatchEvent
(
evt
)
;
}
function
undoChange
(
inspector
)
{
let
canUndo
=
inspector
.
markup
.
undo
.
canUndo
(
)
;
ok
(
canUndo
"
The
last
change
in
the
markup
-
view
can
be
undone
"
)
;
if
(
!
canUndo
)
{
return
promise
.
reject
(
)
;
}
let
mutated
=
inspector
.
once
(
"
markupmutation
"
)
;
inspector
.
markup
.
undo
.
undo
(
)
;
return
mutated
;
}
function
redoChange
(
inspector
)
{
let
canRedo
=
inspector
.
markup
.
undo
.
canRedo
(
)
;
ok
(
canRedo
"
The
last
change
in
the
markup
-
view
can
be
redone
"
)
;
if
(
!
canRedo
)
{
return
promise
.
reject
(
)
;
}
let
mutated
=
inspector
.
once
(
"
markupmutation
"
)
;
inspector
.
markup
.
undo
.
redo
(
)
;
return
mutated
;
}
function
*
getNodeFrontForSelector
(
selector
inspector
)
{
if
(
selector
)
{
info
(
"
Retrieving
front
for
selector
"
+
selector
)
;
return
getNodeFront
(
selector
inspector
)
;
}
info
(
"
Retrieving
front
for
doctype
node
"
)
;
let
{
nodes
}
=
yield
inspector
.
walker
.
children
(
inspector
.
walker
.
rootNode
)
;
return
nodes
[
0
]
;
}
function
*
poll
(
check
desc
attempts
=
10
timeBetweenAttempts
=
200
)
{
info
(
desc
)
;
for
(
let
i
=
0
;
i
<
attempts
;
i
+
+
)
{
if
(
yield
check
(
)
)
{
return
;
}
yield
new
Promise
(
resolve
=
>
setTimeout
(
resolve
timeBetweenAttempts
)
)
;
}
throw
new
Error
(
Timeout
while
:
{
desc
}
)
;
}
const
getHighlighterHelperFor
=
(
type
)
=
>
Task
.
async
(
function
*
(
{
inspector
testActor
}
)
{
let
front
=
inspector
.
inspector
;
let
highlighter
=
yield
front
.
getHighlighterByType
(
type
)
;
let
prefix
=
"
"
;
let
prevX
prevY
;
let
highlightedNode
=
null
;
return
{
set
prefix
(
value
)
{
prefix
=
value
;
}
get
highlightedNode
(
)
{
if
(
!
highlightedNode
)
{
return
null
;
}
return
{
getComputedStyle
:
function
*
(
options
=
{
}
)
{
return
yield
inspector
.
pageStyle
.
getComputed
(
highlightedNode
options
)
;
}
}
;
}
get
actorID
(
)
{
if
(
!
highlighter
)
{
return
null
;
}
return
highlighter
.
actorID
;
}
show
:
function
*
(
selector
=
"
:
root
"
options
frameSelector
=
null
)
{
if
(
frameSelector
)
{
highlightedNode
=
yield
getNodeFrontInFrame
(
selector
frameSelector
inspector
)
;
}
else
{
highlightedNode
=
yield
getNodeFront
(
selector
inspector
)
;
}
return
yield
highlighter
.
show
(
highlightedNode
options
)
;
}
hide
:
function
*
(
)
{
yield
highlighter
.
hide
(
)
;
}
isElementHidden
:
function
*
(
id
)
{
return
(
yield
testActor
.
getHighlighterNodeAttribute
(
prefix
+
id
"
hidden
"
highlighter
)
)
=
=
=
"
true
"
;
}
getElementTextContent
:
function
*
(
id
)
{
return
yield
testActor
.
getHighlighterNodeTextContent
(
prefix
+
id
highlighter
)
;
}
getElementAttribute
:
function
*
(
id
name
)
{
return
yield
testActor
.
getHighlighterNodeAttribute
(
prefix
+
id
name
highlighter
)
;
}
waitForElementAttributeSet
:
function
*
(
id
name
)
{
yield
poll
(
function
*
(
)
{
let
value
=
yield
testActor
.
getHighlighterNodeAttribute
(
prefix
+
id
name
highlighter
)
;
return
!
!
value
;
}
Waiting
for
element
{
id
}
to
have
attribute
{
name
}
set
)
;
}
waitForElementAttributeRemoved
:
function
*
(
id
name
)
{
yield
poll
(
function
*
(
)
{
let
value
=
yield
testActor
.
getHighlighterNodeAttribute
(
prefix
+
id
name
highlighter
)
;
return
!
value
;
}
Waiting
for
element
{
id
}
to
have
attribute
{
name
}
removed
)
;
}
synthesizeMouse
:
function
*
(
options
)
{
options
=
Object
.
assign
(
{
selector
:
"
:
root
"
}
options
)
;
yield
testActor
.
synthesizeMouse
(
options
)
;
}
mouse
:
new
Proxy
(
{
}
{
get
:
(
target
name
)
=
>
function
*
(
x
=
prevX
y
=
prevY
selector
=
"
:
root
"
)
{
prevX
=
x
;
prevY
=
y
;
yield
testActor
.
synthesizeMouse
(
{
selector
x
y
options
:
{
type
:
"
mouse
"
+
name
}
}
)
;
}
}
)
reflow
:
function
*
(
)
{
yield
testActor
.
reflow
(
)
;
}
finalize
:
function
*
(
)
{
highlightedNode
=
null
;
yield
highlighter
.
finalize
(
)
;
}
}
;
}
)
;
function
*
waitForMultipleChildrenUpdates
(
inspector
)
{
if
(
inspector
.
markup
.
_queuedChildUpdates
&
&
inspector
.
markup
.
_queuedChildUpdates
.
size
)
{
yield
waitForChildrenUpdated
(
inspector
)
;
return
yield
waitForMultipleChildrenUpdates
(
inspector
)
;
}
return
null
;
}
function
waitForChildrenUpdated
(
{
markup
}
)
{
info
(
"
Waiting
for
queued
children
updates
to
be
handled
"
)
;
return
new
Promise
(
resolve
=
>
{
markup
.
_waitForChildren
(
)
.
then
(
(
)
=
>
{
executeSoon
(
resolve
)
;
}
)
;
}
)
;
}
function
waitForStyleEditor
(
toolbox
href
)
{
info
(
"
Waiting
for
the
toolbox
to
switch
to
the
styleeditor
"
)
;
return
new
Promise
(
resolve
=
>
{
toolbox
.
once
(
"
styleeditor
-
selected
"
)
.
then
(
(
)
=
>
{
let
panel
=
toolbox
.
getCurrentPanel
(
)
;
ok
(
panel
&
&
panel
.
UI
"
Styleeditor
panel
switched
to
front
"
)
;
let
gotEditor
=
(
event
editor
)
=
>
{
let
currentHref
=
editor
.
styleSheet
.
href
;
if
(
!
href
|
|
(
href
&
&
currentHref
.
endsWith
(
href
)
)
)
{
info
(
"
Stylesheet
editor
selected
"
)
;
panel
.
UI
.
off
(
"
editor
-
selected
"
gotEditor
)
;
editor
.
getSourceEditor
(
)
.
then
(
sourceEditor
=
>
{
info
(
"
Stylesheet
editor
fully
loaded
"
)
;
resolve
(
sourceEditor
)
;
}
)
;
return
true
;
}
info
(
"
The
editor
was
incorrect
.
Waiting
for
editor
-
selected
event
.
"
)
;
return
false
;
}
;
if
(
!
gotEditor
(
"
styleeditor
-
selected
"
panel
.
UI
.
selectedEditor
)
)
{
panel
.
UI
.
on
(
"
editor
-
selected
"
gotEditor
)
;
}
}
)
;
}
)
;
}
function
containsFocus
(
doc
container
)
{
let
elm
=
doc
.
activeElement
;
while
(
elm
)
{
if
(
elm
=
=
=
container
)
{
return
true
;
}
elm
=
elm
.
parentNode
;
}
return
false
;
}
var
waitForTab
=
Task
.
async
(
function
*
(
)
{
info
(
"
Waiting
for
a
tab
to
open
"
)
;
yield
once
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
let
tab
=
gBrowser
.
selectedTab
;
yield
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
info
(
"
The
tab
load
completed
"
)
;
return
tab
;
}
)
;
function
synthesizeKeys
(
input
win
)
{
for
(
let
key
of
input
.
split
(
"
"
)
)
{
EventUtils
.
synthesizeKey
(
key
{
}
win
)
;
}
}
function
focusAndSendKey
(
win
key
)
{
win
.
document
.
documentElement
.
focus
(
)
;
EventUtils
.
sendKey
(
key
win
)
;
}
function
*
assertTooltipShownOnHover
(
tooltip
target
)
{
let
mouseEvent
=
new
target
.
ownerDocument
.
defaultView
.
MouseEvent
(
"
mousemove
"
{
bubbles
:
true
}
)
;
target
.
dispatchEvent
(
mouseEvent
)
;
if
(
!
tooltip
.
isVisible
(
)
)
{
info
(
"
Waiting
for
tooltip
to
be
shown
"
)
;
yield
tooltip
.
once
(
"
shown
"
)
;
}
ok
(
tooltip
.
isVisible
(
)
The
tooltip
is
visible
)
;
return
tooltip
;
}
function
*
assertShowPreviewTooltip
(
view
target
)
{
let
mouseEvent
=
new
target
.
ownerDocument
.
defaultView
.
MouseEvent
(
"
mousemove
"
{
bubbles
:
true
}
)
;
target
.
dispatchEvent
(
mouseEvent
)
;
let
name
=
"
previewTooltip
"
;
ok
(
view
.
tooltips
.
_instances
.
has
(
name
)
Tooltip
'
{
name
}
'
has
been
instantiated
)
;
let
tooltip
=
view
.
tooltips
.
getTooltip
(
name
)
;
if
(
!
tooltip
.
isVisible
(
)
)
{
info
(
"
Waiting
for
tooltip
to
be
shown
"
)
;
yield
tooltip
.
once
(
"
shown
"
)
;
}
ok
(
tooltip
.
isVisible
(
)
The
tooltip
'
{
name
}
'
is
visible
)
;
return
tooltip
;
}
function
*
assertTooltipHiddenOnMouseOut
(
tooltip
target
)
{
let
mouseEvent
=
new
target
.
ownerDocument
.
defaultView
.
MouseEvent
(
"
mousemove
"
{
bubbles
:
true
relatedTarget
:
target
}
)
;
target
.
parentNode
.
dispatchEvent
(
mouseEvent
)
;
yield
tooltip
.
once
(
"
hidden
"
)
;
ok
(
!
tooltip
.
isVisible
(
)
"
The
tooltip
is
hidden
on
mouseout
"
)
;
}
function
openContextMenuAndGetAllItems
(
inspector
options
)
{
let
menu
=
inspector
.
_openMenu
(
options
)
;
let
allItems
=
[
]
.
concat
.
apply
(
[
]
menu
.
items
.
map
(
function
addItem
(
item
)
{
if
(
item
.
submenu
)
{
return
addItem
(
item
.
submenu
.
items
)
;
}
return
item
;
}
)
)
;
return
allItems
;
}
function
getRuleViewRuleEditor
(
view
childrenIndex
nodeIndex
)
{
return
nodeIndex
!
=
=
undefined
?
view
.
element
.
children
[
childrenIndex
]
.
childNodes
[
nodeIndex
]
.
_ruleEditor
:
view
.
element
.
children
[
childrenIndex
]
.
_ruleEditor
;
}
function
*
getDisplayedNodeTextContent
(
selector
inspector
)
{
yield
selectNode
(
selector
inspector
)
;
let
container
=
yield
getContainerForSelector
(
selector
inspector
)
;
yield
inspector
.
markup
.
expandNode
(
container
.
node
)
;
yield
waitForMultipleChildrenUpdates
(
inspector
)
;
if
(
container
)
{
let
textContainer
=
container
.
elt
.
querySelector
(
"
pre
"
)
;
return
textContainer
.
textContent
;
}
return
null
;
}
function
*
toggleShapesHighlighter
(
view
highlighters
selector
property
show
)
{
info
(
"
Toggle
shapes
highlighter
"
)
;
let
container
=
getRuleViewProperty
(
view
selector
property
)
.
valueSpan
;
let
shapesToggle
=
container
.
querySelector
(
"
.
ruleview
-
shape
"
)
;
if
(
show
)
{
let
onHighlighterShown
=
highlighters
.
once
(
"
shapes
-
highlighter
-
shown
"
)
;
shapesToggle
.
click
(
)
;
yield
onHighlighterShown
;
}
else
{
let
onHighlighterHidden
=
highlighters
.
once
(
"
shapes
-
highlighter
-
hidden
"
)
;
shapesToggle
.
click
(
)
;
yield
onHighlighterHidden
;
}
}
