"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
TEST_URL
=
URL_ROOT
+
"
doc_inspector_search
.
html
"
;
const
KEY_STATES
=
[
[
"
#
"
"
b1
"
true
]
[
"
d
"
"
b1
"
true
]
[
"
1
"
"
b1
"
true
]
[
"
VK_RETURN
"
"
d1
"
true
]
[
"
VK_BACK_SPACE
"
"
d1
"
true
]
[
"
2
"
"
d1
"
true
]
[
"
VK_RETURN
"
"
d2
"
true
]
[
"
2
"
"
d2
"
true
]
[
"
VK_RETURN
"
"
d2
"
false
]
[
"
VK_BACK_SPACE
"
"
d2
"
false
]
[
"
VK_RETURN
"
"
d2
"
true
]
[
"
VK_BACK_SPACE
"
"
d2
"
true
]
[
"
1
"
"
d2
"
true
]
[
"
VK_RETURN
"
"
d1
"
true
]
[
"
VK_BACK_SPACE
"
"
d1
"
true
]
[
"
VK_BACK_SPACE
"
"
d1
"
true
]
[
"
VK_BACK_SPACE
"
"
d1
"
true
]
[
"
d
"
"
d1
"
true
]
[
"
i
"
"
d1
"
true
]
[
"
v
"
"
d1
"
true
]
[
"
.
"
"
d1
"
true
]
[
"
c
"
"
d1
"
true
]
[
"
VK_UP
"
"
d1
"
true
]
[
"
VK_TAB
"
"
d1
"
true
]
[
"
VK_RETURN
"
"
d2
"
true
]
[
"
VK_BACK_SPACE
"
"
d2
"
true
]
[
"
VK_BACK_SPACE
"
"
d2
"
true
]
[
"
VK_BACK_SPACE
"
"
d2
"
true
]
[
"
VK_BACK_SPACE
"
"
d2
"
true
]
[
"
VK_BACK_SPACE
"
"
d2
"
true
]
[
"
VK_BACK_SPACE
"
"
d2
"
true
]
[
"
.
"
"
d2
"
true
]
[
"
c
"
"
d2
"
true
]
[
"
1
"
"
d2
"
true
]
[
"
VK_RETURN
"
"
d2
"
true
]
[
"
VK_RETURN
"
"
s2
"
true
]
[
"
VK_RETURN
"
"
p1
"
true
]
[
"
P
"
"
p1
"
true
]
[
"
VK_RETURN
"
"
p1
"
false
]
]
;
add_task
(
function
*
(
)
{
let
{
inspector
}
=
yield
openInspectorForURL
(
TEST_URL
)
;
let
{
searchBox
}
=
inspector
;
yield
selectNode
(
"
#
b1
"
inspector
)
;
yield
focusSearchBoxUsingShortcut
(
inspector
.
panelWin
)
;
let
index
=
0
;
for
(
let
[
key
id
isValid
]
of
KEY_STATES
)
{
info
(
index
+
"
:
Pressing
key
"
+
key
+
"
to
get
id
"
+
id
+
"
.
"
)
;
let
done
=
inspector
.
searchSuggestions
.
once
(
"
processing
-
done
"
)
;
EventUtils
.
synthesizeKey
(
key
{
}
inspector
.
panelWin
)
;
yield
done
;
info
(
"
Got
processing
-
done
event
"
)
;
if
(
key
=
=
=
"
VK_RETURN
"
)
{
info
(
"
Waiting
for
"
+
(
isValid
?
"
NO
"
:
"
"
)
+
"
results
"
)
;
yield
inspector
.
search
.
once
(
"
search
-
result
"
)
;
}
info
(
"
Waiting
for
search
query
to
complete
"
)
;
yield
inspector
.
searchSuggestions
.
_lastQuery
;
info
(
inspector
.
selection
.
nodeFront
.
id
+
"
is
selected
with
text
"
+
searchBox
.
value
)
;
let
nodeFront
=
yield
getNodeFront
(
"
#
"
+
id
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
nodeFront
"
Correct
node
is
selected
for
state
"
+
index
)
;
is
(
!
searchBox
.
classList
.
contains
(
"
devtools
-
style
-
searchbox
-
no
-
match
"
)
isValid
"
Correct
searchbox
result
state
for
state
"
+
index
)
;
index
+
+
;
}
}
)
;
