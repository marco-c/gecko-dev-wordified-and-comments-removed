"
use
strict
"
;
const
server
=
createTestHTTPServer
(
)
;
server
.
registerContentType
(
"
gif
"
"
image
/
gif
"
)
;
function
onPageResourceRequest
(
)
{
return
new
Promise
(
done
=
>
{
server
.
registerPathHandler
(
"
/
slow
.
gif
"
function
(
metadata
response
)
{
info
(
"
Image
has
been
requested
"
)
;
response
.
processAsync
(
)
;
done
(
response
)
;
}
)
;
}
)
;
}
const
TEST_URL
=
"
data
:
text
/
html
"
+
"
<
!
DOCTYPE
html
>
"
+
"
<
head
>
<
meta
charset
=
'
utf
-
8
'
/
>
<
/
head
>
"
+
"
<
body
>
"
+
"
<
p
>
Page
loading
slowly
<
/
p
>
"
+
"
<
img
src
=
'
http
:
/
/
localhost
:
"
+
server
.
identity
.
primaryPort
+
"
/
slow
.
gif
'
/
>
"
+
"
<
/
body
>
"
+
"
<
/
html
>
"
;
add_task
(
async
function
(
)
{
let
{
inspector
tab
}
=
await
openInspectorForURL
(
"
about
:
blank
"
)
;
let
domContentLoaded
=
waitForLinkedBrowserEvent
(
tab
"
DOMContentLoaded
"
)
;
let
pageLoaded
=
waitForLinkedBrowserEvent
(
tab
"
load
"
)
;
let
markupLoaded
=
inspector
.
once
(
"
markuploaded
"
)
;
let
onRequest
=
onPageResourceRequest
(
)
;
info
(
"
Navigate
to
the
slow
loading
page
"
)
;
let
activeTab
=
inspector
.
toolbox
.
target
.
activeTab
;
await
activeTab
.
navigateTo
(
TEST_URL
)
;
info
(
"
Wait
for
request
made
to
the
image
"
)
;
let
response
=
await
onRequest
;
info
(
"
Wait
for
DOMContentLoaded
"
)
;
await
domContentLoaded
;
info
(
"
Wait
for
markup
-
loaded
"
)
;
await
markupLoaded
;
ok
(
inspector
.
markup
"
There
is
a
markup
view
"
)
;
is
(
inspector
.
markup
.
_elt
.
children
.
length
1
"
The
markup
view
is
rendering
"
)
;
is
(
await
contentReadyState
(
tab
)
"
interactive
"
"
Page
is
still
loading
but
the
inspector
is
ready
"
)
;
response
.
finish
(
)
;
info
(
"
Wait
for
load
"
)
;
await
pageLoaded
;
}
)
;
function
waitForLinkedBrowserEvent
(
tab
event
)
{
return
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
event
true
)
;
}
function
contentReadyState
(
tab
)
{
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
function
(
)
{
return
content
.
document
.
readyState
;
}
)
;
}
