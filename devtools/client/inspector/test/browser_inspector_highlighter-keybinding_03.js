"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
doc_inspector_highlighter_dom
.
html
"
;
add_task
(
function
*
(
)
{
let
{
inspector
toolbox
testActor
}
=
yield
openInspectorForURL
(
TEST_URL
)
;
info
(
"
Starting
element
picker
"
)
;
yield
toolbox
.
highlighterUtils
.
startPicker
(
)
;
info
(
"
Selecting
the
#
another
DIV
"
)
;
yield
moveMouseOver
(
"
#
another
"
)
;
info
(
"
Testing
enter
/
return
key
as
pick
-
node
command
"
)
;
yield
doKeyPick
(
{
key
:
"
VK_RETURN
"
options
:
{
}
}
)
;
is
(
inspector
.
selection
.
nodeFront
.
id
"
another
"
"
The
#
another
node
was
selected
.
Passed
.
"
)
;
info
(
"
Starting
element
picker
again
"
)
;
yield
toolbox
.
highlighterUtils
.
startPicker
(
)
;
info
(
"
Selecting
the
ahoy
DIV
"
)
;
yield
moveMouseOver
(
"
#
ahoy
"
)
;
info
(
"
Testing
escape
key
as
cancel
-
picker
command
"
)
;
yield
doKeyStop
(
{
key
:
"
VK_ESCAPE
"
options
:
{
}
}
)
;
is
(
inspector
.
selection
.
nodeFront
.
id
"
another
"
"
The
#
another
DIV
is
still
selected
.
Passed
.
"
)
;
function
doKeyPick
(
args
)
{
info
(
"
Key
pressed
.
Waiting
for
element
to
be
picked
"
)
;
testActor
.
synthesizeKey
(
args
)
;
return
promise
.
all
(
[
toolbox
.
selection
.
once
(
"
new
-
node
-
front
"
)
inspector
.
once
(
"
inspector
-
updated
"
)
]
)
;
}
function
doKeyStop
(
args
)
{
info
(
"
Key
pressed
.
Waiting
for
picker
to
be
canceled
"
)
;
testActor
.
synthesizeKey
(
args
)
;
return
inspector
.
toolbox
.
once
(
"
picker
-
stopped
"
)
;
}
function
moveMouseOver
(
selector
)
{
info
(
"
Waiting
for
element
"
+
selector
+
"
to
be
highlighted
"
)
;
let
onHighlighterReady
=
toolbox
.
once
(
"
highlighter
-
ready
"
)
;
let
onPickerNodeHovered
=
inspector
.
toolbox
.
once
(
"
picker
-
node
-
hovered
"
)
;
testActor
.
synthesizeMouse
(
{
options
:
{
type
:
"
mousemove
"
}
center
:
true
selector
:
selector
}
)
;
return
promise
.
all
(
[
onHighlighterReady
onPickerNodeHovered
]
)
;
}
}
)
;
