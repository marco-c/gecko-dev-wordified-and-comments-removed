"
use
strict
"
;
const
KEY_STATES
=
[
[
"
s
"
[
[
"
span
"
1
]
[
"
.
span
"
1
]
[
"
#
span
"
1
]
]
]
[
"
p
"
[
[
"
span
"
1
]
[
"
.
span
"
1
]
[
"
#
span
"
1
]
]
]
[
"
a
"
[
[
"
span
"
1
]
[
"
.
span
"
1
]
[
"
#
span
"
1
]
]
]
[
"
n
"
[
[
"
span
"
1
]
[
"
.
span
"
1
]
[
"
#
span
"
1
]
]
]
[
"
"
[
[
"
span
div
"
1
]
]
]
[
"
d
"
[
[
"
span
div
"
1
]
]
]
[
"
VK_BACK_SPACE
"
[
[
"
span
div
"
1
]
]
]
[
"
VK_BACK_SPACE
"
[
[
"
span
"
1
]
[
"
.
span
"
1
]
[
"
#
span
"
1
]
]
]
[
"
VK_BACK_SPACE
"
[
[
"
span
"
1
]
[
"
.
span
"
1
]
[
"
#
span
"
1
]
]
]
[
"
VK_BACK_SPACE
"
[
[
"
span
"
1
]
[
"
.
span
"
1
]
[
"
#
span
"
1
]
]
]
[
"
VK_BACK_SPACE
"
[
[
"
span
"
1
]
[
"
.
span
"
1
]
[
"
#
span
"
1
]
]
]
[
"
VK_BACK_SPACE
"
[
]
]
[
"
b
"
[
[
"
button
"
3
]
[
"
body
"
1
]
[
"
.
bc
"
3
]
[
"
.
ba
"
1
]
[
"
.
bb
"
1
]
[
"
#
ba
"
1
]
[
"
#
bb
"
1
]
[
"
#
bc
"
1
]
]
]
]
;
const
TEST_URL
=
<
span
class
=
"
span
"
id
=
"
span
"
>
<
div
class
=
"
div
"
id
=
"
div
"
>
<
/
div
>
<
/
span
>
<
button
class
=
"
ba
bc
"
id
=
"
bc
"
>
<
/
button
>
<
button
class
=
"
bb
bc
"
id
=
"
bb
"
>
<
/
button
>
<
button
class
=
"
bc
"
id
=
"
ba
"
>
<
/
button
>
;
add_task
(
async
function
(
)
{
const
{
inspector
}
=
await
openInspectorForURL
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURI
(
TEST_URL
)
)
;
const
searchBox
=
inspector
.
panelWin
.
document
.
getElementById
(
"
inspector
-
searchbox
"
)
;
const
popup
=
inspector
.
searchSuggestions
.
searchPopup
;
await
focusSearchBoxUsingShortcut
(
inspector
.
panelWin
)
;
for
(
const
[
key
expectedSuggestions
]
of
KEY_STATES
)
{
info
(
"
pressing
key
"
+
key
+
"
to
get
suggestions
"
+
JSON
.
stringify
(
expectedSuggestions
)
)
;
const
onCommand
=
once
(
searchBox
"
input
"
true
)
;
const
onSearchProcessingDone
=
inspector
.
searchSuggestions
.
once
(
"
processing
-
done
"
)
;
EventUtils
.
synthesizeKey
(
key
{
}
inspector
.
panelWin
)
;
await
onCommand
;
info
(
"
Waiting
for
the
suggestions
to
be
retrieved
"
)
;
await
onSearchProcessingDone
;
const
actualSuggestions
=
popup
.
getItems
(
)
;
is
(
popup
.
isOpen
?
actualSuggestions
.
length
:
0
expectedSuggestions
.
length
"
There
are
expected
number
of
suggestions
"
)
;
for
(
let
i
=
0
;
i
<
expectedSuggestions
.
length
;
i
+
+
)
{
is
(
expectedSuggestions
[
i
]
[
0
]
actualSuggestions
[
i
]
.
label
"
The
suggestion
at
"
+
i
+
"
th
index
is
correct
.
"
)
;
}
}
}
)
;
