"
use
strict
"
;
add_task
(
async
function
(
)
{
let
{
inspector
toolbox
}
=
await
openInspectorForURL
(
"
data
:
text
/
html
;
charset
=
utf
-
8
<
h1
>
foo
<
/
h1
>
<
span
>
bar
<
/
span
>
"
"
window
"
)
;
let
hostWindow
=
toolbox
.
win
.
parent
;
let
originalWidth
=
hostWindow
.
outerWidth
;
let
originalHeight
=
hostWindow
.
outerHeight
;
let
splitter
=
inspector
.
panelDoc
.
querySelector
(
"
.
inspector
-
sidebar
-
splitter
"
)
;
if
(
!
splitter
.
classList
.
contains
(
"
vert
"
)
)
{
info
(
"
Resize
toolbox
window
to
force
inspector
to
landscape
mode
"
)
;
let
onClassnameMutation
=
waitForClassMutation
(
splitter
)
;
hostWindow
.
resizeTo
(
800
500
)
;
await
onClassnameMutation
;
ok
(
splitter
.
classList
.
contains
(
"
vert
"
)
"
Splitter
is
in
vertical
mode
"
)
;
}
info
(
"
Resize
toolbox
window
to
force
inspector
to
portrait
mode
"
)
;
let
onClassnameMutation
=
waitForClassMutation
(
splitter
)
;
hostWindow
.
resizeTo
(
500
500
)
;
await
onClassnameMutation
;
ok
(
splitter
.
classList
.
contains
(
"
horz
"
)
"
Splitter
is
in
horizontal
mode
"
)
;
info
(
"
Close
the
inspector
"
)
;
await
gDevTools
.
closeToolbox
(
toolbox
.
target
)
;
info
(
"
Reopen
inspector
"
)
;
(
{
inspector
toolbox
}
=
await
openInspector
(
"
window
"
)
)
;
splitter
=
inspector
.
panelDoc
.
querySelector
(
"
.
inspector
-
sidebar
-
splitter
"
)
;
ok
(
splitter
.
classList
.
contains
(
"
horz
"
)
"
Splitter
is
in
horizontal
mode
"
)
;
info
(
"
Restore
original
window
size
"
)
;
toolbox
.
win
.
parent
.
resizeTo
(
originalWidth
originalHeight
)
;
}
)
;
function
waitForClassMutation
(
target
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
new
MutationObserver
(
(
mutations
)
=
>
{
for
(
let
mutation
of
mutations
)
{
if
(
mutation
.
attributeName
=
=
=
"
class
"
)
{
observer
.
disconnect
(
)
;
resolve
(
)
;
return
;
}
}
}
)
;
observer
.
observe
(
target
{
attributes
:
true
}
)
;
}
)
;
}
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
host
"
)
;
}
)
;
