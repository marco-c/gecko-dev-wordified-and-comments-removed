"
use
strict
"
;
const
TEST_URI
=
data
:
text
/
html
;
charset
=
utf
-
8
<
!
DOCTYPE
html
>
<
video
controls
>
<
/
video
>
;
add_task
(
async
function
(
)
{
await
runUserAgentWidgetPickerTest
(
{
enableAnonymousContent
:
false
}
)
;
await
runUserAgentWidgetPickerTest
(
{
enableAnonymousContent
:
true
}
)
;
}
)
;
async
function
runUserAgentWidgetPickerTest
(
{
enableAnonymousContent
}
)
{
await
pushPref
(
"
devtools
.
inspector
.
showAllAnonymousContent
"
enableAnonymousContent
)
;
const
{
inspector
toolbox
}
=
await
openInspectorForURL
(
TEST_URI
)
;
info
(
"
Use
the
node
picker
inside
the
<
video
>
element
"
)
;
await
startPicker
(
toolbox
)
;
const
onPickerStopped
=
toolbox
.
nodePicker
.
once
(
"
picker
-
stopped
"
)
;
await
pickElement
(
inspector
"
video
"
5
5
)
;
await
onPickerStopped
;
const
selectedNode
=
inspector
.
selection
.
nodeFront
;
if
(
enableAnonymousContent
)
{
const
shadowHost
=
getShadowHost
(
selectedNode
)
;
ok
(
selectedNode
.
tagName
.
toLowerCase
(
)
!
=
=
"
video
"
"
The
selected
node
is
not
the
<
video
>
"
)
;
ok
(
shadowHost
"
The
selected
node
is
in
a
shadow
root
"
)
;
is
(
shadowHost
.
tagName
.
toLowerCase
(
)
"
video
"
"
The
shadowHost
is
<
video
>
"
)
;
}
else
{
is
(
selectedNode
.
tagName
.
toLowerCase
(
)
"
video
"
"
The
selected
node
is
the
<
video
>
"
)
;
}
}
function
getShadowHost
(
nodeFront
)
{
let
parent
=
nodeFront
;
while
(
parent
)
{
if
(
parent
.
isShadowHost
)
{
return
parent
;
}
parent
=
parent
.
parentOrHost
(
)
;
}
return
null
;
}
