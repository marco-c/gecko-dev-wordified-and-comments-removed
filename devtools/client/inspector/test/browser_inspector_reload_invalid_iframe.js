"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
div
id
=
'
fake
-
iframe
'
>
"
;
add_task
(
async
function
(
)
{
const
{
inspector
}
=
await
openInspectorForURL
(
TEST_URI
)
;
info
(
"
Replace
fake
-
iframe
div
with
a
real
iframe
"
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
async
function
(
)
{
await
new
Promise
(
resolve
=
>
{
content
.
document
.
querySelector
(
"
#
fake
-
iframe
"
)
.
remove
(
)
;
const
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
iframe
.
setAttribute
(
"
id
"
"
fake
-
iframe
"
)
;
iframe
.
contentWindow
.
addEventListener
(
"
load
"
(
)
=
>
{
const
div
=
content
.
document
.
createElement
(
"
div
"
)
;
div
.
id
=
"
in
-
frame
"
;
div
.
textContent
=
"
div
in
frame
"
;
const
frameContent
=
iframe
.
contentWindow
.
document
.
querySelector
(
"
body
"
)
;
frameContent
.
appendChild
(
div
)
;
resolve
(
)
;
}
)
;
}
)
;
}
)
;
ok
(
await
hasMatchingElementInContentPage
(
"
iframe
"
)
"
The
iframe
has
been
added
to
the
page
"
)
;
info
(
"
Select
node
inside
iframe
.
"
)
;
await
selectNodeInFrames
(
[
"
iframe
"
"
#
in
-
frame
"
]
inspector
)
;
const
markupLoaded
=
inspector
.
once
(
"
markuploaded
"
)
;
info
(
"
Reloading
page
.
"
)
;
await
navigateTo
(
TEST_URI
)
;
info
(
"
Waiting
for
markupview
to
load
after
reload
.
"
)
;
await
markupLoaded
;
const
rootNodeFront
=
await
getNodeFront
(
"
body
"
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
rootNodeFront
"
body
node
selected
after
reload
.
"
)
;
}
)
;
