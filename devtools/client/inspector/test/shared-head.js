"
use
strict
"
;
var
{
getInplaceEditorForSpan
:
inplaceEditor
}
=
require
(
"
devtools
/
client
/
shared
/
inplace
-
editor
"
)
;
var
openInspector
=
Task
.
async
(
function
*
(
hostType
)
{
info
(
"
Opening
the
inspector
"
)
;
let
toolbox
=
yield
openToolboxForTab
(
gBrowser
.
selectedTab
"
inspector
"
hostType
)
;
let
inspector
=
toolbox
.
getPanel
(
"
inspector
"
)
;
if
(
inspector
.
_updateProgress
)
{
info
(
"
Need
to
wait
for
the
inspector
to
update
"
)
;
yield
inspector
.
once
(
"
inspector
-
updated
"
)
;
}
info
(
"
Waiting
for
actor
features
to
be
detected
"
)
;
yield
inspector
.
_detectingActorFeatures
;
yield
registerTestActor
(
toolbox
.
target
.
client
)
;
let
testActor
=
yield
getTestActor
(
toolbox
)
;
return
{
toolbox
inspector
testActor
}
;
}
)
;
var
openInspectorSidebarTab
=
Task
.
async
(
function
*
(
id
)
{
let
{
toolbox
inspector
testActor
}
=
yield
openInspector
(
)
;
info
(
"
Selecting
the
"
+
id
+
"
sidebar
"
)
;
if
(
id
=
=
=
"
computedview
"
|
|
id
=
=
=
"
layoutview
"
)
{
let
onBoxModelViewReady
=
inspector
.
once
(
"
boxmodel
-
view
-
updated
"
)
;
inspector
.
sidebar
.
select
(
id
)
;
yield
onBoxModelViewReady
;
}
else
{
inspector
.
sidebar
.
select
(
id
)
;
}
return
{
toolbox
inspector
testActor
}
;
}
)
;
function
openRuleView
(
)
{
return
openInspectorSidebarTab
(
"
ruleview
"
)
.
then
(
data
=
>
{
data
.
inspector
.
ruleview
.
view
.
throttle
=
manualThrottle
(
)
;
return
{
toolbox
:
data
.
toolbox
inspector
:
data
.
inspector
testActor
:
data
.
testActor
view
:
data
.
inspector
.
ruleview
.
view
}
;
}
)
;
}
function
openComputedView
(
)
{
return
openInspectorSidebarTab
(
"
computedview
"
)
.
then
(
data
=
>
{
return
{
toolbox
:
data
.
toolbox
inspector
:
data
.
inspector
testActor
:
data
.
testActor
view
:
data
.
inspector
.
computedview
.
computedView
}
;
}
)
;
}
function
selectRuleView
(
inspector
)
{
inspector
.
sidebar
.
select
(
"
ruleview
"
)
;
return
inspector
.
ruleview
.
view
;
}
function
selectComputedView
(
inspector
)
{
inspector
.
sidebar
.
select
(
"
computedview
"
)
;
return
inspector
.
computedview
.
computedView
;
}
function
getNodeFront
(
selector
{
walker
}
)
{
if
(
selector
.
_form
)
{
return
selector
;
}
return
walker
.
querySelector
(
walker
.
rootNode
selector
)
;
}
var
selectNode
=
Task
.
async
(
function
*
(
selector
inspector
reason
=
"
test
"
)
{
info
(
"
Selecting
the
node
for
'
"
+
selector
+
"
'
"
)
;
let
nodeFront
=
yield
getNodeFront
(
selector
inspector
)
;
let
updated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
inspector
.
selection
.
setNodeFront
(
nodeFront
reason
)
;
yield
updated
;
}
)
;
function
manualThrottle
(
)
{
let
calls
=
[
]
;
function
throttle
(
func
wait
scope
)
{
return
function
(
)
{
let
existingCall
=
calls
.
find
(
call
=
>
call
.
func
=
=
=
func
)
;
if
(
existingCall
)
{
existingCall
.
args
=
arguments
;
}
else
{
calls
.
push
(
{
func
wait
scope
args
:
arguments
}
)
;
}
}
;
}
throttle
.
flush
=
function
(
)
{
calls
.
forEach
(
(
{
func
scope
args
}
)
=
>
func
.
apply
(
scope
args
)
)
;
calls
=
[
]
;
}
;
return
throttle
;
}
function
waitForContentMessage
(
name
)
{
info
(
"
Expecting
message
"
+
name
+
"
from
content
"
)
;
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
let
def
=
defer
(
)
;
mm
.
addMessageListener
(
name
function
onMessage
(
msg
)
{
mm
.
removeMessageListener
(
name
onMessage
)
;
def
.
resolve
(
msg
.
data
)
;
}
)
;
return
def
.
promise
;
}
function
executeInContent
(
name
data
=
{
}
objects
=
{
}
expectResponse
=
true
)
{
info
(
"
Sending
message
"
+
name
+
"
to
content
"
)
;
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
mm
.
sendAsyncMessage
(
name
data
objects
)
;
if
(
expectResponse
)
{
return
waitForContentMessage
(
name
)
;
}
return
promise
.
resolve
(
)
;
}
function
*
getComputedStyleProperty
(
selector
pseudo
propName
)
{
return
yield
executeInContent
(
"
Test
:
GetComputedStylePropertyValue
"
{
selector
pseudo
name
:
propName
}
)
;
}
function
*
waitForComputedStyleProperty
(
selector
pseudo
name
expected
)
{
return
yield
executeInContent
(
"
Test
:
WaitForComputedStylePropertyValue
"
{
selector
pseudo
expected
name
}
)
;
}
var
focusEditableField
=
Task
.
async
(
function
*
(
ruleView
editable
xOffset
=
1
yOffset
=
1
options
=
{
}
)
{
let
onFocus
=
once
(
editable
.
parentNode
"
focus
"
true
)
;
info
(
"
Clicking
on
editable
field
to
turn
to
edit
mode
"
)
;
EventUtils
.
synthesizeMouse
(
editable
xOffset
yOffset
options
editable
.
ownerDocument
.
defaultView
)
;
yield
onFocus
;
info
(
"
Editable
field
gained
focus
returning
the
input
field
now
"
)
;
let
onEdit
=
inplaceEditor
(
editable
.
ownerDocument
.
activeElement
)
;
return
onEdit
;
}
)
;
function
getRuleViewRule
(
view
selectorText
index
=
0
)
{
let
rule
;
let
pos
=
0
;
for
(
let
r
of
view
.
styleDocument
.
querySelectorAll
(
"
.
ruleview
-
rule
"
)
)
{
let
selector
=
r
.
querySelector
(
"
.
ruleview
-
selectorcontainer
"
+
"
.
ruleview
-
selector
-
matched
"
)
;
if
(
selector
&
&
selector
.
textContent
=
=
=
selectorText
)
{
if
(
index
=
=
pos
)
{
rule
=
r
;
break
;
}
pos
+
+
;
}
}
return
rule
;
}
function
getRuleViewProperty
(
view
selectorText
propertyName
)
{
let
prop
;
let
rule
=
getRuleViewRule
(
view
selectorText
)
;
if
(
rule
)
{
for
(
let
p
of
rule
.
querySelectorAll
(
"
.
ruleview
-
property
"
)
)
{
let
nameSpan
=
p
.
querySelector
(
"
.
ruleview
-
propertyname
"
)
;
let
valueSpan
=
p
.
querySelector
(
"
.
ruleview
-
propertyvalue
"
)
;
if
(
nameSpan
.
textContent
=
=
=
propertyName
)
{
prop
=
{
nameSpan
:
nameSpan
valueSpan
:
valueSpan
}
;
break
;
}
}
}
return
prop
;
}
function
getRuleViewPropertyValue
(
view
selectorText
propertyName
)
{
return
getRuleViewProperty
(
view
selectorText
propertyName
)
.
valueSpan
.
textContent
;
}
function
getRuleViewSelector
(
view
selectorText
)
{
let
rule
=
getRuleViewRule
(
view
selectorText
)
;
return
rule
.
querySelector
(
"
.
ruleview
-
selector
.
ruleview
-
selector
-
matched
"
)
;
}
var
getRuleViewSelectorHighlighterIcon
=
Task
.
async
(
function
*
(
view
selectorText
index
=
0
)
{
let
rule
=
getRuleViewRule
(
view
selectorText
index
)
;
let
editor
=
rule
.
_ruleEditor
;
if
(
!
editor
.
uniqueSelector
)
{
yield
once
(
editor
"
selector
-
icon
-
created
"
)
;
}
return
rule
.
querySelector
(
"
.
ruleview
-
selectorhighlighter
"
)
;
}
)
;
function
getRuleViewLinkByIndex
(
view
index
)
{
let
links
=
view
.
styleDocument
.
querySelectorAll
(
"
.
ruleview
-
rule
-
source
"
)
;
return
links
[
index
]
;
}
function
getRuleViewLinkTextByIndex
(
view
index
)
{
let
link
=
getRuleViewLinkByIndex
(
view
index
)
;
return
link
.
querySelector
(
"
.
ruleview
-
rule
-
source
-
label
"
)
.
textContent
;
}
var
focusNewRuleViewProperty
=
Task
.
async
(
function
*
(
ruleEditor
)
{
info
(
"
Clicking
on
a
close
ruleEditor
brace
to
start
editing
a
new
property
"
)
;
ruleEditor
.
closeBrace
.
scrollIntoView
(
false
)
;
let
editor
=
yield
focusEditableField
(
ruleEditor
.
ruleView
ruleEditor
.
closeBrace
)
;
is
(
inplaceEditor
(
ruleEditor
.
newPropSpan
)
editor
"
Focused
editor
is
the
new
property
editor
.
"
)
;
return
editor
;
}
)
;
var
createNewRuleViewProperty
=
Task
.
async
(
function
*
(
ruleEditor
inputValue
)
{
info
(
"
Creating
a
new
property
editor
"
)
;
let
editor
=
yield
focusNewRuleViewProperty
(
ruleEditor
)
;
info
(
"
Entering
the
value
"
+
inputValue
)
;
editor
.
input
.
value
=
inputValue
;
info
(
"
Submitting
the
new
value
and
waiting
for
value
field
focus
"
)
;
let
onFocus
=
once
(
ruleEditor
.
element
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
ruleEditor
.
element
.
ownerDocument
.
defaultView
)
;
yield
onFocus
;
}
)
;
var
setSearchFilter
=
Task
.
async
(
function
*
(
view
searchValue
)
{
info
(
"
Setting
filter
text
to
\
"
"
+
searchValue
+
"
\
"
"
)
;
let
searchField
=
view
.
searchField
;
searchField
.
focus
(
)
;
for
(
let
key
of
searchValue
.
split
(
"
"
)
)
{
EventUtils
.
synthesizeKey
(
key
{
}
view
.
styleWindow
)
;
}
yield
view
.
inspector
.
once
(
"
ruleview
-
filtered
"
)
;
}
)
;
function
openStyleContextMenuAndGetAllItems
(
view
target
)
{
let
menu
=
view
.
_contextmenu
.
_openMenu
(
{
target
:
target
}
)
;
let
allItems
=
[
]
.
concat
.
apply
(
[
]
menu
.
items
.
map
(
function
addItem
(
item
)
{
if
(
item
.
submenu
)
{
return
addItem
(
item
.
submenu
.
items
)
;
}
return
item
;
}
)
)
;
return
allItems
;
}
