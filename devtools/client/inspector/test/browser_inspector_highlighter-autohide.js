"
use
strict
"
;
add_task
(
async
function
(
)
{
info
(
"
Loading
the
test
document
and
opening
the
inspector
"
)
;
const
{
inspector
toolbox
highlighterTestFront
}
=
await
openInspectorForURL
(
"
data
:
text
/
html
;
charset
=
utf
-
8
<
p
id
=
'
one
'
>
TEST
1
<
/
p
>
<
p
id
=
'
two
'
>
TEST
2
<
/
p
>
"
)
;
const
{
waitForHighlighterTypeShown
waitForHighlighterTypeHidden
}
=
getHighlighterTestHelpers
(
inspector
)
;
const
HIGHLIGHTER_AUTOHIDE_TIMER
=
inspector
.
HIGHLIGHTER_AUTOHIDE_TIMER
;
inspector
.
HIGHLIGHTER_AUTOHIDE_TIMER
=
1000
;
registerCleanupFunction
(
(
)
=
>
{
inspector
.
HIGHLIGHTER_AUTOHIDE_TIMER
=
HIGHLIGHTER_AUTOHIDE_TIMER
;
}
)
;
info
(
"
Check
that
selecting
an
element
in
the
markup
-
view
shows
the
highlighter
and
auto
-
hides
it
"
)
;
let
onHighlighterShown
=
waitForHighlighterTypeShown
(
inspector
.
highlighters
.
TYPES
.
BOXMODEL
)
;
const
onHighlighterHidden
=
waitForHighlighterTypeHidden
(
inspector
.
highlighters
.
TYPES
.
BOXMODEL
)
;
let
delay
;
const
start
=
Date
.
now
(
)
;
onHighlighterHidden
.
then
(
(
)
=
>
{
delay
=
Date
.
now
(
)
-
start
;
}
)
;
await
clickContainer
(
"
#
one
"
inspector
)
;
info
(
"
Wait
for
Box
Model
Highlighter
shown
"
)
;
await
onHighlighterShown
;
info
(
"
Wait
for
Box
Model
Highlighter
hidden
"
)
;
await
onHighlighterHidden
;
ok
(
true
"
Highlighter
was
shown
and
hidden
"
)
;
ok
(
delay
>
=
inspector
.
HIGHLIGHTER_AUTOHIDE_TIMER
Highlighter
was
hidden
after
expected
delay
(
{
delay
}
ms
)
)
;
info
(
"
Check
that
picking
a
node
hides
the
highlighter
right
away
"
)
;
onHighlighterShown
=
waitForHighlighterTypeShown
(
inspector
.
highlighters
.
TYPES
.
BOXMODEL
)
;
await
startPicker
(
toolbox
)
;
await
hoverElement
(
inspector
"
#
two
"
0
0
)
;
await
onHighlighterShown
;
ok
(
await
highlighterTestFront
.
isHighlighting
(
)
"
Highlighter
was
shown
when
hovering
the
node
"
)
;
await
pickElement
(
inspector
"
#
two
"
0
0
)
;
is
(
await
highlighterTestFront
.
isHighlighting
(
)
false
"
Highlighter
gets
hidden
without
delay
after
picking
a
node
"
)
;
}
)
;
