"
use
strict
"
;
add_task
(
async
function
(
)
{
info
(
"
Loading
the
test
document
and
opening
the
inspector
"
)
;
const
{
inspector
}
=
await
openInspectorForURL
(
"
data
:
text
/
html
;
charset
=
utf
-
8
<
p
id
=
'
one
'
>
TEST
1
<
/
p
>
"
)
;
const
ONE_SECOND
=
1000
;
const
HALF_SECOND
=
500
;
const
nodeFront
=
await
getNodeFront
(
"
#
one
"
inspector
)
;
const
waitForShowEvents
=
waitForNEvents
(
inspector
.
highlighters
"
highlighter
-
shown
"
2
)
;
const
waitForHideEvents
=
waitForNEvents
(
inspector
.
highlighters
"
highlighter
-
hidden
"
1
)
;
info
(
"
Show
Box
Model
Highlighter
then
hide
after
half
a
second
"
)
;
await
inspector
.
highlighters
.
showHighlighterTypeForNode
(
inspector
.
highlighters
.
TYPES
.
BOXMODEL
nodeFront
{
duration
:
HALF_SECOND
}
)
;
info
(
"
Show
Box
Model
Highlighter
again
then
hide
after
one
second
"
)
;
await
inspector
.
highlighters
.
showHighlighterTypeForNode
(
inspector
.
highlighters
.
TYPES
.
BOXMODEL
nodeFront
{
duration
:
ONE_SECOND
}
)
;
info
(
"
Waiting
for
2
highlighter
-
shown
and
1
highlighter
-
hidden
event
"
)
;
await
Promise
.
all
(
[
waitForShowEvents
waitForHideEvents
]
)
;
let
wasEmitted
=
false
;
const
waitForExtraEvent
=
new
Promise
(
(
resolve
reject
)
=
>
{
const
_handler
=
(
)
=
>
{
wasEmitted
=
true
;
resolve
(
)
;
}
;
inspector
.
highlighters
.
on
(
"
highlighter
-
hidden
"
_handler
{
once
:
true
}
)
;
}
)
;
info
(
"
Wait
to
see
if
another
highlighter
-
hidden
event
is
emitted
"
)
;
await
Promise
.
race
(
[
waitForExtraEvent
wait
(
HALF_SECOND
+
ONE_SECOND
)
]
)
;
is
(
wasEmitted
false
"
An
extra
highlighter
-
hidden
event
was
not
emitted
"
)
;
}
)
;
