"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
TEST_URL
=
URL_ROOT
+
"
doc_inspector_search
.
html
"
;
const
KEY_STATES
=
[
[
"
/
"
"
b1
"
false
true
]
[
"
*
"
"
b1
"
false
true
]
[
"
VK_RETURN
"
"
root
"
false
true
]
[
"
VK_BACK_SPACE
"
"
root
"
false
true
]
[
"
/
"
"
root
"
false
true
]
[
"
d
"
"
root
"
false
true
]
[
"
i
"
"
root
"
false
true
]
[
"
v
"
"
root
"
false
true
]
[
"
VK_RETURN
"
"
d1
"
false
true
]
[
"
VK_RETURN
"
"
d2
"
false
true
]
[
"
VK_RETURN
"
"
d1
"
false
true
]
[
"
VK_BACK_SPACE
"
"
d1
"
false
true
]
[
"
VK_BACK_SPACE
"
"
d1
"
false
true
]
[
"
VK_BACK_SPACE
"
"
d1
"
false
true
]
[
"
s
"
"
d1
"
false
true
]
[
"
p
"
"
d1
"
false
true
]
[
"
a
"
"
d1
"
false
true
]
[
"
n
"
"
d1
"
false
true
]
[
"
/
"
"
d1
"
false
true
]
[
"
t
"
"
d1
"
false
true
]
[
"
e
"
"
d1
"
false
true
]
[
"
x
"
"
d1
"
false
true
]
[
"
t
"
"
d1
"
false
true
]
[
"
(
"
"
d1
"
false
true
]
[
"
)
"
"
d1
"
false
true
]
[
"
VK_RETURN
"
"
s1
"
false
true
]
[
"
VK_RETURN
"
"
s2
"
true
true
]
]
;
add_task
(
async
function
(
)
{
const
{
inspector
}
=
await
openInspectorForURL
(
TEST_URL
)
;
const
{
searchBox
}
=
inspector
;
await
selectNode
(
"
#
b1
"
inspector
)
;
await
focusSearchBoxUsingShortcut
(
inspector
.
panelWin
)
;
let
index
=
0
;
for
(
const
[
key
id
isTextNode
isValid
]
of
KEY_STATES
)
{
info
(
index
+
"
:
Pressing
key
"
+
key
+
"
to
get
id
"
+
id
+
"
.
"
)
;
EventUtils
.
synthesizeKey
(
key
{
shiftKey
:
key
=
=
=
"
*
"
}
inspector
.
panelWin
)
;
info
(
"
Got
processing
-
done
event
"
)
;
if
(
key
=
=
=
"
VK_RETURN
"
)
{
info
(
"
Waiting
for
"
+
(
isValid
?
"
NO
"
:
"
"
)
+
"
results
"
)
;
await
inspector
.
search
.
once
(
"
search
-
result
"
)
;
}
info
(
"
Waiting
for
search
query
to
complete
"
)
;
await
inspector
.
searchSuggestions
.
_lastQuery
;
if
(
isTextNode
)
{
info
(
"
Text
node
of
"
+
inspector
.
selection
.
nodeFront
.
parentNode
.
id
+
"
is
selected
with
text
"
+
searchBox
.
value
)
;
is
(
inspector
.
selection
.
nodeFront
.
nodeType
Node
.
TEXT_NODE
"
Correct
node
is
selected
for
state
"
+
index
)
;
}
else
{
info
(
inspector
.
selection
.
nodeFront
.
id
+
"
is
selected
with
text
"
+
searchBox
.
value
)
;
const
nodeFront
=
await
getNodeFront
(
"
#
"
+
id
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
nodeFront
"
Correct
node
is
selected
for
state
"
+
index
)
;
}
is
(
!
searchBox
.
parentNode
.
classList
.
contains
(
"
devtools
-
searchbox
-
no
-
match
"
)
isValid
"
Correct
searchbox
result
state
for
state
"
+
index
)
;
index
+
+
;
}
}
)
;
