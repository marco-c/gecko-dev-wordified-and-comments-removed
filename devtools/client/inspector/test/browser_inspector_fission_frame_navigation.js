"
use
strict
"
;
const
EXAMPLE_COM_URI
=
"
https
:
/
/
example
.
com
/
document
-
builder
.
sjs
?
html
=
<
div
id
=
com
>
com
"
;
const
EXAMPLE_NET_URI
=
"
https
:
/
/
example
.
net
/
document
-
builder
.
sjs
?
html
=
<
div
id
=
net
>
net
"
;
const
ORG_URL_ROOT
=
URL_ROOT
.
replace
(
"
example
.
com
"
"
example
.
org
"
)
;
const
TEST_ORG_URI
=
ORG_URL_ROOT
+
"
doc_inspector_fission_frame_navigation
.
html
"
;
add_task
(
async
function
(
)
{
const
{
inspector
}
=
await
openInspectorForURL
(
TEST_ORG_URI
)
;
const
tree
=
id
=
"
root
"
iframe
#
document
html
head
body
id
=
"
org
"
;
await
assertMarkupViewAsTree
(
tree
"
#
root
"
inspector
)
;
await
navigateIframeTo
(
inspector
EXAMPLE_COM_URI
)
;
const
treeAfterLoadingCom
=
id
=
"
root
"
iframe
#
document
html
head
body
id
=
"
com
"
;
await
assertMarkupViewAsTree
(
treeAfterLoadingCom
"
#
root
"
inspector
)
;
await
navigateIframeTo
(
inspector
EXAMPLE_NET_URI
)
;
const
treeAfterLoadingNet
=
id
=
"
root
"
iframe
#
document
html
head
body
id
=
"
net
"
;
await
assertMarkupViewAsTree
(
treeAfterLoadingNet
"
#
root
"
inspector
)
;
}
)
;
add_task
(
async
function
navigateFrameNotExpandedInMarkupView
(
)
{
if
(
!
isFissionEnabled
(
)
)
{
return
;
}
const
{
inspector
}
=
await
openInspectorForURL
(
TEST_ORG_URI
)
;
const
{
resourceCommand
}
=
inspector
.
commands
;
const
resource
=
await
navigateIframeTo
(
inspector
EXAMPLE_COM_URI
)
;
is
(
resource
.
resourceType
resourceCommand
.
TYPES
.
ROOT_NODE
"
A
resource
with
resourceType
ROOT_NODE
was
received
when
navigating
"
)
;
todo
(
!
resource
.
targetFront
.
getCachedFront
(
"
inspector
"
)
"
The
inspector
front
for
the
new
target
should
not
be
initialized
"
)
;
}
)
;
async
function
navigateIframeTo
(
inspector
url
)
{
info
(
"
Navigate
the
test
iframe
to
"
+
url
)
;
const
{
commands
}
=
inspector
;
const
{
resourceCommand
}
=
inspector
.
toolbox
;
const
onTargetProcessed
=
waitForTargetProcessed
(
commands
url
)
;
const
{
onResource
:
onNewRoot
}
=
await
resourceCommand
.
waitForNextResource
(
resourceCommand
.
TYPES
.
ROOT_NODE
{
ignoreExistingResources
:
true
predicate
:
resource
=
>
resource
.
targetFront
.
url
=
=
=
encodeURI
(
url
)
}
)
;
info
(
"
Update
the
src
attribute
of
the
iframe
tag
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
url
]
function
(
_url
)
{
content
.
document
.
querySelector
(
"
iframe
"
)
.
setAttribute
(
"
src
"
_url
)
;
}
)
;
info
(
"
Wait
for
frameLoad
/
newRoot
to
resolve
"
)
;
const
newRootResult
=
await
onNewRoot
;
info
(
"
Wait
for
pending
children
updates
"
)
;
await
inspector
.
markup
.
_waitForChildren
(
)
;
if
(
isFissionEnabled
(
)
)
{
info
(
"
Wait
until
the
new
target
has
been
processed
by
TargetCommand
"
)
;
await
onTargetProcessed
;
}
return
newRootResult
;
}
function
waitForTargetProcessed
(
commands
url
)
{
return
new
Promise
(
resolve
=
>
{
const
onTargetProcessed
=
targetFront
=
>
{
if
(
targetFront
.
url
!
=
=
encodeURI
(
url
)
)
{
return
;
}
commands
.
targetCommand
.
off
(
"
processed
-
available
-
target
"
onTargetProcessed
)
;
resolve
(
)
;
}
;
commands
.
targetCommand
.
on
(
"
processed
-
available
-
target
"
onTargetProcessed
)
;
}
)
;
}
