"
use
strict
"
;
const
{
addons
createClass
createFactory
DOM
:
dom
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
findDOMNode
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
{
REPS
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
"
)
;
const
Rep
=
createFactory
(
REPS
.
Rep
)
;
const
ElementNode
=
REPS
.
ElementNode
;
const
Types
=
require
(
"
.
.
/
types
"
)
;
module
.
exports
=
createClass
(
{
displayName
:
"
GridItem
"
propTypes
:
{
getSwatchColorPickerTooltip
:
PropTypes
.
func
.
isRequired
grid
:
PropTypes
.
shape
(
Types
.
grid
)
.
isRequired
onHideBoxModelHighlighter
:
PropTypes
.
func
.
isRequired
onSetGridOverlayColor
:
PropTypes
.
func
.
isRequired
onShowBoxModelHighlighterForNode
:
PropTypes
.
func
.
isRequired
onToggleGridHighlighter
:
PropTypes
.
func
.
isRequired
}
mixins
:
[
addons
.
PureRenderMixin
]
componentDidMount
(
)
{
let
tooltip
=
this
.
props
.
getSwatchColorPickerTooltip
(
)
;
let
swatchEl
=
findDOMNode
(
this
)
.
querySelector
(
"
.
grid
-
color
-
swatch
"
)
;
let
previousColor
;
tooltip
.
addSwatch
(
swatchEl
{
onCommit
:
this
.
setGridColor
onPreview
:
this
.
setGridColor
onRevert
:
(
)
=
>
{
this
.
props
.
onSetGridOverlayColor
(
this
.
props
.
grid
.
nodeFront
previousColor
)
;
}
onShow
:
(
)
=
>
{
previousColor
=
this
.
props
.
grid
.
color
;
}
}
)
;
}
componentWillUnmount
(
)
{
let
tooltip
=
this
.
props
.
getSwatchColorPickerTooltip
(
)
;
let
swatchEl
=
findDOMNode
(
this
)
.
querySelector
(
"
.
grid
-
color
-
swatch
"
)
;
tooltip
.
removeSwatch
(
swatchEl
)
;
}
setGridColor
(
)
{
let
color
=
findDOMNode
(
this
)
.
querySelector
(
"
.
grid
-
color
-
value
"
)
.
textContent
;
this
.
props
.
onSetGridOverlayColor
(
this
.
props
.
grid
.
nodeFront
color
)
;
}
translateNodeFrontToGrip
(
nodeFront
)
{
let
{
attributes
}
=
nodeFront
;
let
attributesMap
=
{
}
;
for
(
let
{
name
value
}
of
attributes
)
{
attributesMap
[
name
]
=
value
;
}
return
{
actor
:
nodeFront
.
actorID
preview
:
{
attributes
:
attributesMap
attributesLength
:
attributes
.
length
nodeName
:
nodeFront
.
nodeName
.
toLowerCase
(
)
nodeType
:
nodeFront
.
nodeType
}
}
;
}
onGridCheckboxClick
(
)
{
let
{
grid
onToggleGridHighlighter
}
=
this
.
props
;
onToggleGridHighlighter
(
grid
.
nodeFront
)
;
}
render
(
)
{
let
{
grid
onHideBoxModelHighlighter
onShowBoxModelHighlighterForNode
}
=
this
.
props
;
let
{
nodeFront
}
=
grid
;
return
dom
.
li
(
{
key
:
grid
.
id
className
:
"
grid
-
item
"
}
dom
.
label
(
{
}
dom
.
input
(
{
type
:
"
checkbox
"
value
:
grid
.
id
checked
:
grid
.
highlighted
onChange
:
this
.
onGridCheckboxClick
}
)
Rep
(
{
defaultRep
:
ElementNode
object
:
this
.
translateNodeFrontToGrip
(
nodeFront
)
onDOMNodeMouseOut
:
(
)
=
>
onHideBoxModelHighlighter
(
)
onDOMNodeMouseOver
:
(
)
=
>
onShowBoxModelHighlighterForNode
(
nodeFront
)
}
)
)
dom
.
div
(
{
className
:
"
grid
-
color
-
swatch
"
style
:
{
backgroundColor
:
grid
.
color
}
title
:
grid
.
color
}
)
dom
.
span
(
{
className
:
"
grid
-
color
-
value
"
}
grid
.
color
)
)
;
}
}
)
;
