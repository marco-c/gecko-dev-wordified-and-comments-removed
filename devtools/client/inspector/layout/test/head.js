"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
head
.
js
"
this
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolbox
.
footer
.
height
"
350
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
footer
.
height
"
)
;
}
)
;
function
getNode
(
nodeOrSelector
)
{
return
typeof
nodeOrSelector
=
=
=
"
string
"
?
content
.
document
.
querySelector
(
nodeOrSelector
)
:
nodeOrSelector
;
}
function
selectAndHighlightNode
(
nodeOrSelector
inspector
)
{
info
(
"
Highlighting
and
selecting
the
node
"
+
nodeOrSelector
)
;
let
node
=
getNode
(
nodeOrSelector
)
;
let
updated
=
inspector
.
toolbox
.
once
(
"
highlighter
-
ready
"
)
;
inspector
.
selection
.
setNode
(
node
"
test
-
highlight
"
)
;
return
updated
;
}
function
openLayoutView
(
)
{
return
openInspectorSidebarTab
(
"
layoutview
"
)
.
then
(
objects
=
>
{
function
mockHighlighter
(
{
highlighter
}
)
{
highlighter
.
showBoxModel
=
function
(
nodeFront
options
)
{
return
promise
.
resolve
(
)
;
}
;
highlighter
.
hideBoxModel
=
function
(
)
{
return
promise
.
resolve
(
)
;
}
;
}
mockHighlighter
(
objects
.
toolbox
)
;
return
objects
;
}
)
;
}
function
waitForUpdate
(
inspector
)
{
return
inspector
.
once
(
"
layoutview
-
updated
"
)
;
}
var
TESTS
=
[
]
;
function
addTest
(
message
func
)
{
TESTS
.
push
(
[
message
Task
.
async
(
func
)
]
)
;
}
var
runTests
=
Task
.
async
(
function
*
(
.
.
.
args
)
{
for
(
let
[
message
test
]
of
TESTS
)
{
info
(
"
Running
new
test
case
:
"
+
message
)
;
yield
test
.
apply
(
null
args
)
;
}
}
)
;
