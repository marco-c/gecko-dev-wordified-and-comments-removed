"
use
strict
"
;
const
TEST_URI
=
<
style
type
=
'
text
/
css
'
>
#
testid
{
margin
:
0
;
}
<
/
style
>
<
div
id
=
'
testid
'
>
Styled
Node
<
/
div
>
;
add_task
(
async
function
(
)
{
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
let
{
inspector
view
}
=
await
openRuleView
(
)
;
await
selectNode
(
"
#
testid
"
inspector
)
;
await
testEditPropertyAndCancel
(
inspector
view
)
;
}
)
;
async
function
testEditPropertyAndCancel
(
inspector
view
)
{
let
ruleEditor
=
getRuleViewRuleEditor
(
view
1
)
;
let
propEditor
=
ruleEditor
.
rule
.
textProps
[
0
]
.
editor
;
info
(
"
Test
editor
is
created
when
clicking
on
property
name
"
)
;
await
focusEditableField
(
view
propEditor
.
nameSpan
)
;
ok
(
propEditor
.
nameSpan
.
inplaceEditor
"
Editor
created
for
property
name
"
)
;
await
sendKeysAndWaitForFocus
(
view
ruleEditor
.
element
[
"
ESCAPE
"
]
)
;
info
(
"
Test
editor
is
created
when
clicking
on
'
:
'
next
to
property
name
"
)
;
let
nameRect
=
propEditor
.
nameSpan
.
getBoundingClientRect
(
)
;
await
focusEditableField
(
view
propEditor
.
nameSpan
nameRect
.
width
+
1
)
;
ok
(
propEditor
.
nameSpan
.
inplaceEditor
"
Editor
created
for
property
name
"
)
;
await
sendKeysAndWaitForFocus
(
view
ruleEditor
.
element
[
"
ESCAPE
"
]
)
;
info
(
"
Test
editor
is
created
when
clicking
on
property
value
"
)
;
await
focusEditableField
(
view
propEditor
.
valueSpan
)
;
ok
(
propEditor
.
valueSpan
.
inplaceEditor
"
Editor
created
for
property
value
"
)
;
let
onRuleviewChanged
=
view
.
once
(
"
ruleview
-
changed
"
)
;
await
sendKeysAndWaitForFocus
(
view
ruleEditor
.
element
[
"
ESCAPE
"
]
)
;
await
onRuleviewChanged
;
info
(
"
Test
editor
is
created
when
clicking
on
'
;
'
next
to
property
value
"
)
;
let
valueRect
=
propEditor
.
valueSpan
.
getBoundingClientRect
(
)
;
await
focusEditableField
(
view
propEditor
.
valueSpan
valueRect
.
width
+
1
)
;
ok
(
propEditor
.
valueSpan
.
inplaceEditor
"
Editor
created
for
property
value
"
)
;
onRuleviewChanged
=
view
.
once
(
"
ruleview
-
changed
"
)
;
await
sendKeysAndWaitForFocus
(
view
ruleEditor
.
element
[
"
ESCAPE
"
]
)
;
await
onRuleviewChanged
;
}
