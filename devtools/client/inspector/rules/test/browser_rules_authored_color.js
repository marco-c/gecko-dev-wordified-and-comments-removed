"
use
strict
"
;
const
colors
=
[
{
name
:
"
hex
"
id
:
"
test1
"
color
:
"
#
f06
"
result
:
"
#
0f0
"
}
{
name
:
"
rgb
"
id
:
"
test2
"
color
:
"
rgb
(
0
128
250
)
"
result
:
"
rgb
(
0
255
0
)
"
}
{
name
:
"
hex
"
id
:
"
test3
"
color
:
"
#
F06
"
result
:
"
#
0F0
"
}
]
;
add_task
(
function
*
(
)
{
Services
.
prefs
.
setCharPref
(
"
devtools
.
defaultColorUnit
"
"
authored
"
)
;
let
html
=
"
"
;
for
(
let
{
color
id
}
of
colors
)
{
html
+
=
<
div
id
=
"
{
id
}
"
style
=
"
color
:
{
color
}
"
>
Styled
Node
<
/
div
>
;
}
let
tab
=
yield
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
html
)
)
;
let
{
inspector
view
}
=
yield
openRuleView
(
)
;
for
(
let
color
of
colors
)
{
let
selector
=
"
#
"
+
color
.
id
;
yield
selectNode
(
selector
inspector
)
;
let
swatch
=
getRuleViewProperty
(
view
"
element
"
"
color
"
)
.
valueSpan
.
querySelector
(
"
.
ruleview
-
colorswatch
"
)
;
let
cPicker
=
view
.
tooltips
.
getTooltip
(
"
colorPicker
"
)
;
let
onColorPickerReady
=
cPicker
.
once
(
"
ready
"
)
;
swatch
.
click
(
)
;
yield
onColorPickerReady
;
yield
simulateColorPickerChange
(
view
cPicker
[
0
255
0
1
]
{
selector
name
:
"
color
"
value
:
"
rgb
(
0
255
0
)
"
}
)
;
let
spectrum
=
cPicker
.
spectrum
;
let
onHidden
=
cPicker
.
tooltip
.
once
(
"
hidden
"
)
;
let
onRuleViewChanged
=
waitForNEvents
(
view
"
ruleview
-
changed
"
2
)
;
focusAndSendKey
(
spectrum
.
element
.
ownerDocument
.
defaultView
"
RETURN
"
)
;
yield
onHidden
;
yield
onRuleViewChanged
;
is
(
getRuleViewPropertyValue
(
view
"
element
"
"
color
"
)
color
.
result
"
changing
the
color
preserved
the
unit
for
"
+
color
.
name
)
;
}
let
target
=
TargetFactory
.
forTab
(
tab
)
;
yield
gDevTools
.
closeToolbox
(
target
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
