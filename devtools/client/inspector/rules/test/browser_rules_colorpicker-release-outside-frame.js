"
use
strict
"
;
const
TEST_URI
=
"
<
body
style
=
'
color
:
red
'
>
Test
page
for
bug
1160720
"
;
add_task
(
async
function
(
)
{
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
let
{
view
}
=
await
openRuleView
(
)
;
let
cSwatch
=
getRuleViewProperty
(
view
"
element
"
"
color
"
)
.
valueSpan
.
querySelector
(
"
.
ruleview
-
colorswatch
"
)
;
let
picker
=
await
openColorPickerForSwatch
(
cSwatch
view
)
;
let
spectrum
=
picker
.
spectrum
;
let
change
=
spectrum
.
once
(
"
changed
"
)
;
info
(
"
Pressing
mouse
down
over
color
picker
.
"
)
;
let
onRuleViewChanged
=
view
.
once
(
"
ruleview
-
changed
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
spectrum
.
dragger
{
type
:
"
mousedown
"
}
spectrum
.
dragger
.
ownerDocument
.
defaultView
)
;
await
onRuleViewChanged
;
let
value
=
await
change
;
info
(
Color
changed
to
{
value
}
on
mousedown
.
)
;
spectrum
.
once
(
"
changed
"
newValue
=
>
{
is
(
newValue
value
"
Value
changed
on
mousemove
without
a
button
pressed
.
"
)
;
}
)
;
info
(
"
Moving
mouse
over
color
picker
without
any
buttons
pressed
.
"
)
;
EventUtils
.
synthesizeMouse
(
spectrum
.
dragger
10
10
{
button
:
-
1
type
:
"
mousemove
"
}
spectrum
.
dragger
.
ownerDocument
.
defaultView
)
;
}
)
;
async
function
openColorPickerForSwatch
(
swatch
view
)
{
let
cPicker
=
view
.
tooltips
.
getTooltip
(
"
colorPicker
"
)
;
ok
(
cPicker
"
The
rule
-
view
has
the
expected
colorPicker
property
"
)
;
let
cPickerPanel
=
cPicker
.
tooltip
.
panel
;
ok
(
cPickerPanel
"
The
XUL
panel
for
the
color
picker
exists
"
)
;
let
onColorPickerReady
=
cPicker
.
once
(
"
ready
"
)
;
swatch
.
click
(
)
;
await
onColorPickerReady
;
ok
(
true
"
The
color
picker
was
shown
on
click
of
the
color
swatch
"
)
;
return
cPicker
;
}
