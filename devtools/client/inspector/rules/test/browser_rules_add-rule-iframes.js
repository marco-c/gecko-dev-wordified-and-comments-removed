"
use
strict
"
;
const
TEST_URI
=
<
div
>
outer
<
/
div
>
<
iframe
id
=
"
frame1
"
src
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
div
>
inner1
<
/
div
>
"
>
<
/
iframe
>
<
iframe
id
=
"
frame2
"
src
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
div
>
inner2
<
/
div
>
"
>
<
/
iframe
>
;
add_task
(
async
function
(
)
{
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
const
{
inspector
view
}
=
await
openRuleView
(
)
;
await
selectNode
(
"
div
"
inspector
)
;
await
addNewRuleAndDismissEditor
(
inspector
view
"
div
"
1
)
;
await
addNewProperty
(
view
1
"
color
"
"
red
"
)
;
const
innerFrameDiv1
=
await
getNodeFrontInFrame
(
"
div
"
"
#
frame1
"
inspector
)
;
await
selectNode
(
innerFrameDiv1
inspector
)
;
await
addNewRuleAndDismissEditor
(
inspector
view
"
div
"
1
)
;
await
addNewProperty
(
view
1
"
color
"
"
blue
"
)
;
const
innerFrameDiv2
=
await
getNodeFrontInFrame
(
"
div
"
"
#
frame2
"
inspector
)
;
await
selectNode
(
innerFrameDiv2
inspector
)
;
await
addNewRuleAndDismissEditor
(
inspector
view
"
div
"
1
)
;
await
addNewProperty
(
view
1
"
color
"
"
green
"
)
;
}
)
;
async
function
addNewProperty
(
view
index
name
value
)
{
const
idRuleEditor
=
getRuleViewRuleEditor
(
view
index
)
;
info
(
Adding
new
property
"
{
name
}
:
{
value
}
;
"
)
;
const
onRuleViewChanged
=
view
.
once
(
"
ruleview
-
changed
"
)
;
idRuleEditor
.
addProperty
(
name
value
"
"
true
)
;
await
onRuleViewChanged
;
const
textProps
=
idRuleEditor
.
rule
.
textProps
;
const
lastProperty
=
textProps
[
textProps
.
length
-
1
]
;
is
(
lastProperty
.
name
name
"
Last
property
has
the
expected
name
"
)
;
is
(
lastProperty
.
value
value
"
Last
property
has
the
expected
value
"
)
;
}
