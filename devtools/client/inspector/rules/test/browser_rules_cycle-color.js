"
use
strict
"
;
const
TEST_URI
=
<
style
type
=
"
text
/
css
"
>
body
{
color
:
#
f00
;
}
<
/
style
>
Test
cycling
color
types
in
the
rule
view
!
;
add_task
(
function
*
(
)
{
yield
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
let
{
view
}
=
yield
openRuleView
(
)
;
let
container
=
getRuleViewProperty
(
view
"
body
"
"
color
"
)
.
valueSpan
;
checkColorCycling
(
container
view
)
;
}
)
;
function
checkColorCycling
(
container
view
)
{
let
swatch
=
container
.
querySelector
(
"
.
ruleview
-
colorswatch
"
)
;
let
valueNode
=
container
.
querySelector
(
"
.
ruleview
-
color
"
)
;
let
win
=
view
.
styleWindow
;
is
(
valueNode
.
textContent
"
#
f00
"
"
Color
displayed
as
a
hex
value
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
swatch
{
type
:
"
mousedown
"
shiftKey
:
true
}
win
)
;
is
(
valueNode
.
textContent
"
hsl
(
0
100
%
50
%
)
"
"
Color
displayed
as
an
HSL
value
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
swatch
{
type
:
"
mousedown
"
shiftKey
:
true
}
win
)
;
is
(
valueNode
.
textContent
"
rgb
(
255
0
0
)
"
"
Color
displayed
as
an
RGB
value
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
swatch
{
type
:
"
mousedown
"
shiftKey
:
true
}
win
)
;
is
(
valueNode
.
textContent
"
red
"
"
Color
displayed
as
a
color
name
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
swatch
{
type
:
"
mousedown
"
shiftKey
:
true
}
win
)
;
is
(
valueNode
.
textContent
"
#
f00
"
"
Color
displayed
as
an
authored
value
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
swatch
{
type
:
"
mousedown
"
shiftKey
:
true
}
win
)
;
is
(
valueNode
.
textContent
"
hsl
(
0
100
%
50
%
)
"
"
Color
displayed
as
an
HSL
value
again
.
"
)
;
}
