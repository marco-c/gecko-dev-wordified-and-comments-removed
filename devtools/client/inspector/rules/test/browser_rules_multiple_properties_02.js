"
use
strict
"
;
const
TEST_URI
=
"
<
div
>
Test
Element
<
/
div
>
"
;
add_task
(
async
function
(
)
{
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
let
{
inspector
view
}
=
await
openRuleView
(
)
;
await
selectNode
(
"
div
"
inspector
)
;
let
ruleEditor
=
getRuleViewRuleEditor
(
view
0
)
;
let
onDone
=
view
.
once
(
"
ruleview
-
changed
"
)
;
await
createNewRuleViewProperty
(
ruleEditor
"
width
:
"
)
;
await
onDone
;
is
(
ruleEditor
.
rule
.
textProps
.
length
1
"
Should
have
created
a
new
text
property
.
"
)
;
is
(
ruleEditor
.
propertyList
.
children
.
length
1
"
Should
have
created
a
property
editor
.
"
)
;
onDone
=
view
.
once
(
"
ruleview
-
changed
"
)
;
let
onMutation
=
inspector
.
once
(
"
markupmutation
"
)
;
let
input
=
view
.
styleDocument
.
activeElement
;
input
.
value
=
"
height
:
10px
;
color
:
blue
"
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
view
.
styleWindow
)
;
await
onMutation
;
await
onDone
;
is
(
ruleEditor
.
rule
.
textProps
.
length
2
"
Should
have
added
the
changed
value
.
"
)
;
is
(
ruleEditor
.
propertyList
.
children
.
length
3
"
Should
have
added
the
changed
value
editor
.
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
view
.
styleWindow
)
;
is
(
ruleEditor
.
propertyList
.
children
.
length
2
"
Should
have
removed
the
value
editor
.
"
)
;
is
(
ruleEditor
.
rule
.
textProps
[
0
]
.
name
"
width
"
"
Should
have
correct
property
name
"
)
;
is
(
ruleEditor
.
rule
.
textProps
[
0
]
.
value
"
height
:
10px
"
"
Should
have
correct
property
value
"
)
;
is
(
ruleEditor
.
rule
.
textProps
[
1
]
.
name
"
color
"
"
Should
have
correct
property
name
"
)
;
is
(
ruleEditor
.
rule
.
textProps
[
1
]
.
value
"
blue
"
"
Should
have
correct
property
value
"
)
;
}
)
;
