"
use
strict
"
;
const
TEST_URI
=
<
style
type
=
"
text
/
css
"
>
#
testid
{
display
:
block
;
}
<
/
style
>
<
div
id
=
"
testid
"
>
Styled
Node
<
/
div
>
<
span
>
inline
element
<
/
span
>
;
const
TEST_DATA
=
[
{
value
:
"
inline
"
expected
:
"
inline
"
}
{
value
:
"
inline
-
block
"
expected
:
"
inline
-
block
"
}
{
value
:
"
red
"
expected
:
"
block
"
}
{
value
:
"
something
"
expected
:
"
block
"
}
{
escape
:
true
value
:
"
inline
"
expected
:
"
block
"
}
]
;
add_task
(
async
function
(
)
{
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
let
{
inspector
view
}
=
await
openRuleView
(
)
;
await
selectNode
(
"
#
testid
"
inspector
)
;
for
(
let
data
of
TEST_DATA
)
{
await
testLivePreviewData
(
data
view
"
#
testid
"
)
;
}
}
)
;
async
function
testLivePreviewData
(
data
ruleView
selector
)
{
let
rule
=
getRuleViewRuleEditor
(
ruleView
1
)
.
rule
;
let
propEditor
=
rule
.
textProps
[
0
]
.
editor
;
info
(
"
Focusing
the
property
value
inplace
-
editor
"
)
;
let
editor
=
await
focusEditableField
(
ruleView
propEditor
.
valueSpan
)
;
is
(
inplaceEditor
(
propEditor
.
valueSpan
)
editor
"
The
focused
editor
is
the
value
"
)
;
info
(
"
Entering
value
in
the
editor
:
"
+
data
.
value
)
;
let
onPreviewDone
=
ruleView
.
once
(
"
ruleview
-
changed
"
)
;
EventUtils
.
sendString
(
data
.
value
ruleView
.
styleWindow
)
;
ruleView
.
debounce
.
flush
(
)
;
await
onPreviewDone
;
let
onValueDone
=
ruleView
.
once
(
"
ruleview
-
changed
"
)
;
if
(
data
.
escape
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
else
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
await
onValueDone
;
is
(
(
await
getComputedStyleProperty
(
selector
null
"
display
"
)
)
data
.
expected
"
Element
should
be
previewed
as
"
+
data
.
expected
)
;
}
