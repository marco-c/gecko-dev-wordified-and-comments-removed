"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
head
.
js
"
this
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
defaultColorUnit
"
)
;
}
)
;
var
{
getInplaceEditorForSpan
:
inplaceEditor
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
inplace
-
editor
.
js
"
)
;
const
{
COMPATIBILITY_TOOLTIP_MESSAGE
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
rules
/
constants
.
js
"
)
;
const
ROOT_TEST_DIR
=
getRootDirectory
(
gTestPath
)
;
const
STYLE_INSPECTOR_L10N
=
new
LocalizationHelper
(
"
devtools
/
shared
/
locales
/
styleinspector
.
properties
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
defaultColorUnit
"
)
;
}
)
;
async
function
hideTooltipAndWaitForRuleViewChanged
(
editorTooltip
view
)
{
const
onModified
=
view
.
once
(
"
ruleview
-
changed
"
)
;
const
onHidden
=
editorTooltip
.
tooltip
.
once
(
"
hidden
"
)
;
editorTooltip
.
hide
(
)
;
await
onModified
;
await
onHidden
;
}
var
waitForSuccess
=
async
function
(
validatorFn
desc
=
"
untitled
"
)
{
let
i
=
0
;
while
(
true
)
{
info
(
"
Checking
:
"
+
desc
)
;
if
(
await
validatorFn
(
)
)
{
ok
(
true
"
Success
:
"
+
desc
)
;
break
;
}
i
+
+
;
if
(
i
>
10
)
{
ok
(
false
"
Failure
:
"
+
desc
)
;
break
;
}
await
new
Promise
(
r
=
>
setTimeout
(
r
200
)
)
;
}
}
;
var
simulateColorPickerChange
=
async
function
(
ruleView
colorPicker
newRgba
expectedChange
)
{
let
onComputedStyleChanged
;
if
(
expectedChange
)
{
const
{
selector
name
value
}
=
expectedChange
;
onComputedStyleChanged
=
waitForComputedStyleProperty
(
selector
null
name
value
)
;
}
const
onRuleViewChanged
=
ruleView
.
once
(
"
ruleview
-
changed
"
)
;
info
(
"
Getting
the
spectrum
colorpicker
object
"
)
;
const
spectrum
=
colorPicker
.
spectrum
;
info
(
"
Setting
the
new
color
"
)
;
spectrum
.
rgb
=
newRgba
;
info
(
"
Applying
the
change
"
)
;
spectrum
.
updateUI
(
)
;
spectrum
.
onChange
(
)
;
info
(
"
Waiting
for
rule
-
view
to
update
"
)
;
await
onRuleViewChanged
;
if
(
expectedChange
)
{
info
(
"
Waiting
for
the
style
to
be
applied
on
the
page
"
)
;
await
onComputedStyleChanged
;
}
}
;
var
openColorPickerAndSelectColor
=
async
function
(
view
ruleIndex
propIndex
newRgba
expectedChange
)
{
const
ruleEditor
=
getRuleViewRuleEditor
(
view
ruleIndex
)
;
const
propEditor
=
ruleEditor
.
rule
.
textProps
[
propIndex
]
.
editor
;
const
swatch
=
propEditor
.
valueSpan
.
querySelector
(
"
.
inspector
-
colorswatch
"
)
;
const
cPicker
=
view
.
tooltips
.
getTooltip
(
"
colorPicker
"
)
;
info
(
"
Opening
the
colorpicker
by
clicking
the
color
swatch
"
)
;
const
onColorPickerReady
=
cPicker
.
once
(
"
ready
"
)
;
swatch
.
click
(
)
;
await
onColorPickerReady
;
await
simulateColorPickerChange
(
view
cPicker
newRgba
expectedChange
)
;
return
{
propEditor
swatch
cPicker
}
;
}
;
var
openCubicBezierAndChangeCoords
=
async
function
(
view
ruleIndex
propIndex
coords
expectedChange
)
{
const
ruleEditor
=
getRuleViewRuleEditor
(
view
ruleIndex
)
;
const
propEditor
=
ruleEditor
.
rule
.
textProps
[
propIndex
]
.
editor
;
const
swatch
=
propEditor
.
valueSpan
.
querySelector
(
"
.
inspector
-
bezierswatch
"
)
;
const
bezierTooltip
=
view
.
tooltips
.
getTooltip
(
"
cubicBezier
"
)
;
info
(
"
Opening
the
cubicBezier
by
clicking
the
swatch
"
)
;
const
onBezierWidgetReady
=
bezierTooltip
.
once
(
"
ready
"
)
;
swatch
.
click
(
)
;
await
onBezierWidgetReady
;
const
widget
=
await
bezierTooltip
.
widget
;
info
(
"
Simulating
a
change
of
curve
in
the
widget
"
)
;
const
onRuleViewChanged
=
view
.
once
(
"
ruleview
-
changed
"
)
;
widget
.
coordinates
=
coords
;
await
onRuleViewChanged
;
if
(
expectedChange
)
{
info
(
"
Waiting
for
the
style
to
be
applied
on
the
page
"
)
;
const
{
selector
name
value
}
=
expectedChange
;
await
waitForComputedStyleProperty
(
selector
null
name
value
)
;
}
return
{
propEditor
swatch
bezierTooltip
}
;
}
;
var
addProperty
=
async
function
(
view
ruleIndex
name
value
{
commitValueWith
=
"
VK_TAB
"
blurNewProperty
=
true
}
=
{
}
)
{
info
(
"
Adding
new
property
"
+
name
+
"
:
"
+
value
+
"
to
rule
"
+
ruleIndex
)
;
const
ruleEditor
=
getRuleViewRuleEditor
(
view
ruleIndex
)
;
let
editor
=
await
focusNewRuleViewProperty
(
ruleEditor
)
;
const
numOfProps
=
ruleEditor
.
rule
.
textProps
.
length
;
const
onMutations
=
new
Promise
(
r
=
>
{
if
(
ruleIndex
!
=
=
0
)
{
r
(
)
;
}
const
expectedAttributeValue
=
{
CSS
.
escape
(
name
)
}
:
{
value
}
;
view
.
inspector
.
walker
.
on
(
"
mutations
"
function
onWalkerMutations
(
mutations
)
{
const
receivedLastMutation
=
mutations
.
some
(
mut
=
>
mut
.
attributeName
=
=
=
"
style
"
&
&
mut
.
newValue
.
includes
(
expectedAttributeValue
)
)
;
if
(
receivedLastMutation
)
{
view
.
inspector
.
walker
.
off
(
"
mutations
"
onWalkerMutations
)
;
r
(
)
;
}
}
)
;
}
)
;
info
(
"
Adding
name
"
+
name
)
;
editor
.
input
.
value
=
name
;
is
(
editor
.
input
.
getAttribute
(
"
aria
-
label
"
)
"
New
property
name
"
"
New
property
name
input
has
expected
aria
-
label
"
)
;
const
onNameAdded
=
view
.
once
(
"
ruleview
-
changed
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_TAB
"
{
}
view
.
styleWindow
)
;
await
onNameAdded
;
editor
=
inplaceEditor
(
view
.
styleDocument
.
activeElement
)
;
const
textProps
=
ruleEditor
.
rule
.
textProps
;
const
textProp
=
textProps
[
textProps
.
length
-
1
]
;
is
(
ruleEditor
.
rule
.
textProps
.
length
numOfProps
+
1
"
A
new
test
property
was
added
"
)
;
is
(
editor
inplaceEditor
(
textProp
.
editor
.
valueSpan
)
"
The
inplace
editor
appeared
for
the
value
"
)
;
info
(
"
Adding
value
"
+
value
)
;
const
onPreview
=
view
.
once
(
"
ruleview
-
changed
"
)
;
editor
.
input
.
value
=
value
;
ok
(
!
!
editor
.
input
.
getAttribute
(
"
aria
-
labelledby
"
)
"
The
value
input
has
an
aria
-
labelledby
attribute
"
)
;
is
(
editor
.
input
.
getAttribute
(
"
aria
-
labelledby
"
)
textProp
.
editor
.
nameSpan
.
id
"
which
references
the
property
name
input
"
)
;
view
.
debounce
.
flush
(
)
;
await
onPreview
;
if
(
commitValueWith
=
=
=
null
)
{
return
textProp
;
}
const
onRuleViewChanged
=
view
.
once
(
"
ruleview
-
changed
"
)
;
EventUtils
.
synthesizeKey
(
commitValueWith
{
}
view
.
styleWindow
)
;
await
onRuleViewChanged
;
info
(
"
Waiting
for
DOM
mutations
in
case
the
property
was
added
to
the
element
style
"
)
;
await
onMutations
;
if
(
blurNewProperty
)
{
view
.
styleDocument
.
activeElement
.
blur
(
)
;
}
return
textProp
;
}
;
var
renameProperty
=
async
function
(
view
textProp
name
)
{
await
focusEditableField
(
view
textProp
.
editor
.
nameSpan
)
;
const
onNameDone
=
view
.
once
(
"
ruleview
-
changed
"
)
;
info
(
Rename
the
property
to
{
name
}
)
;
EventUtils
.
sendString
(
name
view
.
styleWindow
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
view
.
styleWindow
)
;
info
(
"
Wait
for
property
name
.
"
)
;
await
onNameDone
;
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
inspector
.
rule
-
view
.
focusNextOnEnter
"
)
)
{
return
;
}
const
onValueDone
=
view
.
once
(
"
ruleview
-
changed
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
view
.
styleWindow
)
;
info
(
"
Wait
for
property
value
.
"
)
;
await
onValueDone
;
}
;
var
removeProperty
=
async
function
(
view
textProp
blurNewProperty
=
true
)
{
await
focusEditableField
(
view
textProp
.
editor
.
nameSpan
)
;
const
onModifications
=
view
.
once
(
"
ruleview
-
changed
"
)
;
info
(
"
Deleting
the
property
name
now
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_DELETE
"
{
}
view
.
styleWindow
)
;
EventUtils
.
synthesizeKey
(
"
VK_TAB
"
{
}
view
.
styleWindow
)
;
await
onModifications
;
if
(
blurNewProperty
)
{
view
.
styleDocument
.
activeElement
.
blur
(
)
;
}
}
;
var
togglePropStatus
=
async
function
(
view
textProp
)
{
const
onRuleViewRefreshed
=
view
.
once
(
"
ruleview
-
changed
"
)
;
textProp
.
editor
.
enable
.
click
(
)
;
await
onRuleViewRefreshed
;
}
;
async
function
addNewRule
(
inspector
view
)
{
const
onNewRuleAdded
=
view
.
once
(
"
new
-
rule
-
added
"
)
;
info
(
"
Adding
the
new
rule
using
the
button
"
)
;
view
.
addRuleButton
.
click
(
)
;
info
(
"
Waiting
for
new
-
rule
-
added
event
"
)
;
const
rule
=
await
onNewRuleAdded
;
info
(
"
received
new
-
rule
-
added
"
)
;
return
rule
;
}
async
function
addNewRuleAndDismissEditor
(
inspector
view
expectedSelector
expectedIndex
)
{
const
rule
=
await
addNewRule
(
inspector
view
)
;
info
(
"
Getting
the
new
rule
at
index
"
+
expectedIndex
)
;
const
ruleEditor
=
getRuleViewRuleEditor
(
view
expectedIndex
)
;
const
editor
=
ruleEditor
.
selectorText
.
ownerDocument
.
activeElement
;
is
(
editor
.
value
expectedSelector
"
The
editor
for
the
new
selector
has
the
correct
value
:
"
+
expectedSelector
)
;
info
(
"
Pressing
escape
to
leave
the
editor
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
is
(
ruleEditor
.
selectorText
.
textContent
expectedSelector
"
The
new
selector
has
the
correct
text
:
"
+
expectedSelector
)
;
return
rule
;
}
async
function
sendKeysAndWaitForFocus
(
view
element
keys
)
{
const
onFocus
=
once
(
element
"
focus
"
true
)
;
for
(
const
key
of
keys
)
{
EventUtils
.
sendKey
(
key
view
.
styleWindow
)
;
}
await
onFocus
;
}
function
waitForStyleModification
(
inspector
)
{
return
new
Promise
(
function
(
resolve
)
{
function
checkForStyleModification
(
mutations
)
{
for
(
const
mutation
of
mutations
)
{
if
(
mutation
.
type
=
=
=
"
attributes
"
&
&
mutation
.
attributeName
=
=
=
"
style
"
)
{
inspector
.
off
(
"
markupmutation
"
checkForStyleModification
)
;
resolve
(
)
;
return
;
}
}
}
inspector
.
on
(
"
markupmutation
"
checkForStyleModification
)
;
}
)
;
}
async
function
clickSelectorIcon
(
view
selectorText
index
=
0
)
{
const
{
inspector
}
=
view
;
const
rule
=
getRuleViewRule
(
view
selectorText
index
)
;
info
(
Waiting
for
icon
to
be
available
for
selector
:
{
selectorText
}
)
;
const
icon
=
await
waitFor
(
(
)
=
>
{
return
rule
.
querySelector
(
"
.
js
-
toggle
-
selector
-
highlighter
"
)
;
}
)
;
const
selector
=
icon
.
dataset
.
computedSelector
;
const
{
waitForHighlighterTypeShown
waitForHighlighterTypeHidden
}
=
getHighlighterTestHelpers
(
inspector
)
;
const
options
=
inspector
.
highlighters
.
getOptionsForActiveHighlighter
(
inspector
.
highlighters
.
TYPES
.
SELECTOR
)
;
const
waitForEvent
=
options
?
.
selector
=
=
=
selector
?
waitForHighlighterTypeHidden
(
inspector
.
highlighters
.
TYPES
.
SELECTOR
)
:
waitForHighlighterTypeShown
(
inspector
.
highlighters
.
TYPES
.
SELECTOR
)
;
const
waitedForShown
=
options
?
.
selector
!
=
=
selector
;
info
(
Click
the
icon
for
selector
:
{
selectorText
}
)
;
icon
.
scrollIntoView
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
icon
{
}
view
.
styleWindow
)
;
const
data
=
await
waitForEvent
;
return
{
.
.
.
data
isShown
:
waitedForShown
}
;
}
async
function
toggleClassPanelCheckBox
(
view
name
)
{
info
(
Clicking
on
checkbox
for
class
{
name
}
)
;
const
checkBox
=
[
.
.
.
view
.
classPanel
.
querySelectorAll
(
"
[
type
=
checkbox
]
"
)
]
.
find
(
box
=
>
{
return
box
.
dataset
.
name
=
=
=
name
;
}
)
;
const
onMutation
=
view
.
inspector
.
once
(
"
markupmutation
"
)
;
checkBox
.
click
(
)
;
info
(
"
Waiting
for
a
markupmutation
as
a
result
of
toggling
this
class
"
)
;
await
onMutation
;
}
function
checkClassPanelContent
(
view
classes
)
{
const
checkBoxNodeList
=
view
.
classPanel
.
querySelectorAll
(
"
[
type
=
checkbox
]
"
)
;
is
(
checkBoxNodeList
.
length
classes
.
length
"
The
panel
contains
the
expected
number
of
checkboxes
"
)
;
for
(
let
i
=
0
;
i
<
classes
.
length
;
i
+
+
)
{
is
(
checkBoxNodeList
[
i
]
.
dataset
.
name
classes
[
i
]
.
name
Checkbox
{
i
}
has
the
right
class
name
)
;
is
(
checkBoxNodeList
[
i
]
.
checked
classes
[
i
]
.
state
Checkbox
{
i
}
has
the
right
state
)
;
}
}
async
function
openEyedropper
(
view
swatch
)
{
const
tooltip
=
view
.
tooltips
.
getTooltip
(
"
colorPicker
"
)
.
tooltip
;
info
(
"
Click
on
the
swatch
"
)
;
const
onColorPickerReady
=
view
.
tooltips
.
getTooltip
(
"
colorPicker
"
)
.
once
(
"
ready
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
swatch
{
}
swatch
.
ownerGlobal
)
;
await
onColorPickerReady
;
const
dropperButton
=
tooltip
.
container
.
querySelector
(
"
#
eyedropper
-
button
"
)
;
info
(
"
Click
on
the
eyedropper
icon
"
)
;
const
onOpened
=
tooltip
.
once
(
"
eyedropper
-
opened
"
)
;
dropperButton
.
click
(
)
;
await
onOpened
;
}
async
function
getPropertiesForRuleIndex
(
view
ruleIndex
addCompatibilityData
=
false
)
{
const
declaration
=
new
Map
(
)
;
let
nodeIndex
;
if
(
Array
.
isArray
(
ruleIndex
)
)
{
[
ruleIndex
nodeIndex
]
=
ruleIndex
;
}
const
ruleEditor
=
getRuleViewRuleEditor
(
view
ruleIndex
nodeIndex
)
;
for
(
const
currProp
of
ruleEditor
?
.
rule
?
.
textProps
|
|
[
]
)
{
const
icon
=
currProp
.
editor
.
unusedState
;
const
unused
=
currProp
.
editor
.
element
.
classList
.
contains
(
"
unused
"
)
;
let
compatibilityData
;
let
compatibilityIcon
;
if
(
addCompatibilityData
)
{
compatibilityData
=
await
currProp
.
isCompatible
(
)
;
compatibilityIcon
=
currProp
.
editor
.
compatibilityState
;
}
declaration
.
set
(
{
currProp
.
name
}
:
{
currProp
.
value
}
{
propertyName
:
currProp
.
name
propertyValue
:
currProp
.
value
icon
data
:
currProp
.
isUsed
(
)
warning
:
unused
used
:
!
unused
.
.
.
(
addCompatibilityData
?
{
compatibilityData
compatibilityIcon
}
:
{
}
)
}
)
;
}
return
declaration
;
}
async
function
toggleDeclaration
(
view
ruleIndex
declaration
)
{
const
textProp
=
getTextProperty
(
view
ruleIndex
declaration
)
;
const
[
[
name
value
]
]
=
Object
.
entries
(
declaration
)
;
const
dec
=
{
name
}
:
{
value
}
;
ok
(
textProp
Declaration
"
{
dec
}
"
found
)
;
const
newStatus
=
textProp
.
enabled
?
"
disabled
"
:
"
enabled
"
;
info
(
Toggling
declaration
"
{
dec
}
"
of
rule
{
ruleIndex
}
to
{
newStatus
}
)
;
await
togglePropStatus
(
view
textProp
)
;
info
(
"
Toggled
successfully
.
"
)
;
}
async
function
updateDeclaration
(
view
ruleIndex
declaration
newDeclaration
=
{
}
)
{
const
textProp
=
getTextProperty
(
view
ruleIndex
declaration
)
;
const
[
[
name
value
]
]
=
Object
.
entries
(
declaration
)
;
const
[
[
newName
newValue
]
]
=
Object
.
entries
(
newDeclaration
)
;
if
(
newName
&
&
name
!
=
=
newName
)
{
info
(
Updating
declaration
{
name
}
:
{
value
}
;
Changing
{
name
}
to
{
newName
}
)
;
await
renameProperty
(
view
textProp
newName
)
;
}
if
(
newValue
&
&
value
!
=
=
newValue
)
{
info
(
Updating
declaration
{
name
}
:
{
value
}
;
Changing
{
value
}
to
{
newValue
}
)
;
await
setProperty
(
view
textProp
newValue
)
;
}
}
async
function
checkDeclarationCompatibility
(
view
ruleIndex
declaration
{
expected
expectedLearnMoreUrl
}
)
{
const
declarations
=
await
getPropertiesForRuleIndex
(
view
ruleIndex
true
)
;
const
[
[
name
value
]
]
=
Object
.
entries
(
declaration
)
;
const
dec
=
{
name
}
:
{
value
}
;
const
{
compatibilityData
}
=
declarations
.
get
(
dec
)
;
is
(
!
expected
compatibilityData
.
isCompatible
"
{
dec
}
"
has
the
correct
compatibility
status
in
the
payload
)
;
is
(
compatibilityData
.
msgId
expected
"
{
dec
}
"
has
expected
message
ID
)
;
if
(
expected
)
{
await
checkInteractiveTooltip
(
view
"
compatibility
-
tooltip
"
ruleIndex
declaration
)
;
}
if
(
expectedLearnMoreUrl
!
=
=
undefined
)
{
const
tooltip
=
view
.
tooltips
.
getTooltip
(
"
interactiveTooltip
"
)
;
const
onTooltipReady
=
tooltip
.
once
(
"
shown
"
)
;
const
{
compatibilityIcon
}
=
declarations
.
get
(
dec
)
;
await
view
.
tooltips
.
onInteractiveTooltipTargetHover
(
compatibilityIcon
)
;
tooltip
.
show
(
compatibilityIcon
)
;
await
onTooltipReady
;
const
learnMoreEl
=
tooltip
.
panel
.
querySelector
(
"
.
link
"
)
;
if
(
expectedLearnMoreUrl
=
=
=
null
)
{
ok
(
!
learnMoreEl
"
{
dec
}
"
has
no
"
Learn
more
"
link
)
;
}
else
{
ok
(
learnMoreEl
"
{
dec
}
"
has
a
"
Learn
more
"
link
)
;
const
{
link
}
=
await
simulateLinkClick
(
learnMoreEl
)
;
is
(
link
expectedLearnMoreUrl
Click
on
{
dec
}
"
Learn
more
"
link
navigates
user
to
expected
url
)
;
}
const
onTooltipHidden
=
tooltip
.
once
(
"
hidden
"
)
;
tooltip
.
hide
(
)
;
await
onTooltipHidden
;
}
}
async
function
checkDeclarationIsInactive
(
view
ruleIndex
declaration
)
{
const
declarations
=
await
getPropertiesForRuleIndex
(
view
ruleIndex
)
;
const
[
[
name
value
]
]
=
Object
.
entries
(
declaration
)
;
const
dec
=
{
name
}
:
{
value
}
;
const
{
used
warning
}
=
declarations
.
get
(
dec
)
;
ok
(
!
used
"
{
dec
}
"
is
inactive
)
;
ok
(
warning
"
{
dec
}
"
has
a
warning
)
;
await
checkInteractiveTooltip
(
view
"
inactive
-
css
-
tooltip
"
ruleIndex
declaration
)
;
}
async
function
checkDeclarationIsActive
(
view
ruleIndex
declaration
)
{
const
declarations
=
await
getPropertiesForRuleIndex
(
view
ruleIndex
)
;
const
[
[
name
value
]
]
=
Object
.
entries
(
declaration
)
;
const
dec
=
{
name
}
:
{
value
}
;
const
{
used
warning
}
=
declarations
.
get
(
dec
)
;
ok
(
used
{
dec
}
is
active
)
;
ok
(
!
warning
{
dec
}
has
no
warning
)
;
}
async
function
checkInteractiveTooltip
(
view
type
ruleIndex
declaration
)
{
const
declarations
=
await
getPropertiesForRuleIndex
(
view
ruleIndex
type
=
=
=
"
compatibility
-
tooltip
"
)
;
const
[
[
name
value
]
]
=
Object
.
entries
(
declaration
)
;
const
dec
=
{
name
}
:
{
value
}
;
let
icon
;
let
data
;
if
(
type
=
=
=
"
inactive
-
css
-
tooltip
"
)
{
(
{
icon
data
}
=
declarations
.
get
(
dec
)
)
;
}
else
{
const
{
compatibilityIcon
compatibilityData
}
=
declarations
.
get
(
dec
)
;
icon
=
compatibilityIcon
;
data
=
compatibilityData
;
}
const
tooltip
=
view
.
tooltips
.
getTooltip
(
"
interactiveTooltip
"
)
;
let
tooltipHelper
;
if
(
type
=
=
=
"
inactive
-
css
-
tooltip
"
)
{
tooltipHelper
=
view
.
tooltips
.
inactiveCssTooltipHelper
;
}
else
{
tooltipHelper
=
view
.
tooltips
.
compatibilityTooltipHelper
;
}
const
template
=
tooltipHelper
.
getTemplate
(
data
tooltip
)
;
const
{
doc
}
=
tooltip
;
await
doc
.
l10n
.
translateFragment
(
template
)
;
const
expected
=
template
.
firstElementChild
.
outerHTML
;
const
onTooltipReady
=
tooltip
.
once
(
"
shown
"
)
;
await
view
.
tooltips
.
onInteractiveTooltipTargetHover
(
icon
)
;
tooltip
.
show
(
icon
)
;
await
onTooltipReady
;
const
actual
=
tooltip
.
panel
.
firstElementChild
.
outerHTML
;
const
onTooltipHidden
=
tooltip
.
once
(
"
hidden
"
)
;
tooltip
.
hide
(
)
;
await
onTooltipHidden
;
is
(
actual
expected
"
Tooltip
contains
the
correct
value
.
"
)
;
}
async
function
runCSSCompatibilityTests
(
view
inspector
tests
)
{
for
(
const
test
of
tests
)
{
if
(
test
.
selector
)
{
await
selectNode
(
test
.
selector
inspector
)
;
}
for
(
const
[
ruleIndex
rules
]
of
test
.
rules
.
entries
(
)
)
{
for
(
const
rule
in
rules
)
{
await
checkDeclarationCompatibility
(
view
ruleIndex
{
[
rule
]
:
rules
[
rule
]
.
value
}
{
expected
:
rules
[
rule
]
.
expected
expectedLearnMoreUrl
:
rules
[
rule
]
.
expectedLearnMoreUrl
}
)
;
}
}
}
}
async
function
runInactiveCSSTests
(
view
inspector
tests
)
{
for
(
const
test
of
tests
)
{
if
(
test
.
selector
)
{
await
selectNode
(
test
.
selector
inspector
)
;
}
else
if
(
typeof
test
.
selectNode
=
=
=
"
function
"
)
{
await
test
.
selectNode
(
inspector
)
;
}
if
(
test
.
activeDeclarations
)
{
info
(
"
Checking
whether
declarations
are
marked
as
used
.
"
)
;
for
(
const
activeDeclarations
of
test
.
activeDeclarations
)
{
for
(
const
[
name
value
]
of
Object
.
entries
(
activeDeclarations
.
declarations
)
)
{
await
checkDeclarationIsActive
(
view
activeDeclarations
.
ruleIndex
{
[
name
]
:
value
}
)
;
}
}
}
if
(
test
.
inactiveDeclarations
)
{
info
(
"
Checking
that
declarations
are
unused
and
have
a
warning
.
"
)
;
for
(
const
inactiveDeclaration
of
test
.
inactiveDeclarations
)
{
await
checkDeclarationIsInactive
(
view
inactiveDeclaration
.
ruleIndex
inactiveDeclaration
.
declaration
)
;
}
}
}
}
function
getPseudoClassCheckbox
(
view
pseudo
)
{
return
view
.
pseudoClassCheckboxes
.
filter
(
checkbox
=
>
checkbox
.
value
=
=
=
pseudo
)
[
0
]
;
}
function
checkCSSVariableOutput
(
view
selector
propertyName
expectedClassName
expectedDatasetValue
)
{
const
target
=
getRuleViewProperty
(
view
selector
propertyName
)
.
valueSpan
.
querySelector
(
.
{
expectedClassName
}
)
;
ok
(
target
"
The
target
element
should
exist
"
)
;
is
(
target
.
dataset
.
variable
expectedDatasetValue
)
;
}
function
getRuleViewAncestorRulesDataElementByIndex
(
view
ruleIndex
)
{
return
view
.
styleDocument
.
querySelectorAll
(
.
ruleview
-
rule
)
[
ruleIndex
]
?
.
querySelector
(
.
ruleview
-
rule
-
ancestor
-
data
)
;
}
function
getRuleViewAncestorRulesDataTextByIndex
(
view
ruleIndex
)
{
return
getRuleViewAncestorRulesDataElementByIndex
(
view
ruleIndex
)
?
.
innerText
;
}
async
function
runIncrementTest
(
propertyEditor
view
tests
)
{
propertyEditor
.
valueSpan
.
scrollIntoView
(
)
;
const
editor
=
await
focusEditableField
(
view
propertyEditor
.
valueSpan
)
;
for
(
const
testIndex
in
tests
)
{
await
testIncrement
(
editor
view
tests
[
testIndex
]
testIndex
)
;
}
const
onRuleViewChanged
=
view
.
once
(
"
ruleview
-
changed
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
view
.
styleWindow
)
;
view
.
debounce
.
flush
(
)
;
await
onRuleViewChanged
;
}
async
function
testIncrement
(
editor
view
test
testIndex
)
{
editor
.
input
.
value
=
test
.
start
;
const
input
=
editor
.
input
;
if
(
test
.
selectAll
)
{
input
.
select
(
)
;
}
else
if
(
test
.
selection
)
{
input
.
setSelectionRange
(
test
.
selection
[
0
]
test
.
selection
[
1
]
)
;
}
is
(
input
.
value
test
.
start
"
Value
initialized
at
"
+
test
.
start
)
;
const
onRuleViewChanged
=
view
.
once
(
"
ruleview
-
changed
"
)
;
let
smallIncrementKey
=
{
ctrlKey
:
test
.
ctrl
}
;
if
(
AppConstants
.
platform
=
=
=
"
macosx
"
)
{
smallIncrementKey
=
{
altKey
:
test
.
alt
}
;
}
const
options
=
{
shiftKey
:
test
.
shift
.
.
.
smallIncrementKey
}
;
if
(
test
.
wheel
)
{
const
onWheel
=
once
(
input
"
wheel
"
)
;
input
.
dispatchEvent
(
new
view
.
styleWindow
.
WheelEvent
(
"
wheel
"
{
deltaX
:
test
.
deltaX
deltaY
:
test
.
deltaY
deltaMode
:
0
.
.
.
options
}
)
)
;
await
onWheel
;
}
else
{
let
key
;
key
=
test
.
down
?
"
VK_DOWN
"
:
"
VK_UP
"
;
if
(
test
.
pageDown
)
{
key
=
"
VK_PAGE_DOWN
"
;
}
else
if
(
test
.
pageUp
)
{
key
=
"
VK_PAGE_UP
"
;
}
const
onKeyUp
=
once
(
input
"
keyup
"
)
;
EventUtils
.
synthesizeKey
(
key
options
view
.
styleWindow
)
;
await
onKeyUp
;
}
if
(
test
.
start
!
=
=
test
.
end
)
{
view
.
debounce
.
flush
(
)
;
await
onRuleViewChanged
;
}
is
(
input
.
value
test
.
end
[
Test
{
testIndex
}
]
Value
changed
to
{
test
.
end
}
)
;
}
function
getSmallIncrementKey
(
)
{
if
(
AppConstants
.
platform
=
=
=
"
macosx
"
)
{
return
{
alt
:
true
}
;
}
return
{
ctrl
:
true
}
;
}
