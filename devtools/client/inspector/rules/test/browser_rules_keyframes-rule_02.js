"
use
strict
"
;
const
TEST_URI
=
URL_ROOT
+
"
doc_keyframeanimation
.
html
"
;
add_task
(
async
function
(
)
{
await
addTab
(
TEST_URI
)
;
let
{
inspector
view
}
=
await
openRuleView
(
)
;
await
testPacman
(
inspector
view
)
;
await
testBoxy
(
inspector
view
)
;
}
)
;
async
function
testPacman
(
inspector
view
)
{
info
(
"
Test
content
in
the
keyframes
rule
of
#
pacman
"
)
;
let
rules
=
await
getKeyframeRules
(
"
#
pacman
"
inspector
view
)
;
info
(
"
Test
text
properties
for
Keyframes
#
pacman
"
)
;
is
(
convertTextPropsToString
(
rules
.
keyframeRules
[
0
]
.
textProps
)
"
left
:
750px
"
"
Keyframe
pacman
(
100
%
)
property
is
correct
"
)
;
}
async
function
testBoxy
(
inspector
view
)
{
info
(
"
Test
content
in
the
keyframes
rule
of
#
boxy
"
)
;
let
rules
=
await
getKeyframeRules
(
"
#
boxy
"
inspector
view
)
;
info
(
"
Test
text
properties
for
Keyframes
#
boxy
"
)
;
is
(
convertTextPropsToString
(
rules
.
keyframeRules
[
0
]
.
textProps
)
"
background
-
color
:
blue
"
"
Keyframe
boxy
(
10
%
)
property
is
correct
"
)
;
is
(
convertTextPropsToString
(
rules
.
keyframeRules
[
1
]
.
textProps
)
"
background
-
color
:
green
"
"
Keyframe
boxy
(
20
%
)
property
is
correct
"
)
;
is
(
convertTextPropsToString
(
rules
.
keyframeRules
[
2
]
.
textProps
)
"
opacity
:
0
"
"
Keyframe
boxy
(
100
%
)
property
is
correct
"
)
;
}
function
convertTextPropsToString
(
textProps
)
{
return
textProps
.
map
(
t
=
>
t
.
name
+
"
:
"
+
t
.
value
)
.
join
(
"
;
"
)
;
}
async
function
getKeyframeRules
(
selector
inspector
view
)
{
await
selectNode
(
selector
inspector
)
;
let
elementStyle
=
view
.
_elementStyle
;
let
rules
=
{
elementRules
:
elementStyle
.
rules
.
filter
(
rule
=
>
!
rule
.
keyframes
)
keyframeRules
:
elementStyle
.
rules
.
filter
(
rule
=
>
rule
.
keyframes
)
}
;
return
rules
;
}
