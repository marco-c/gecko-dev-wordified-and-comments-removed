"
use
strict
"
;
const
TEST_URI
=
<
html
>
<
head
>
<
style
>
padding
{
font
-
family
:
margin
;
}
<
/
style
>
<
/
head
>
<
body
>
<
padding
>
MDN
tooltip
testing
<
/
padding
>
<
/
body
>
<
/
html
>
;
add_task
(
function
*
(
)
{
yield
addTab
(
"
data
:
text
/
html
;
charset
=
utf8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
let
{
inspector
view
}
=
yield
openRuleView
(
)
;
yield
selectNode
(
"
padding
"
inspector
)
;
yield
testMdnContextMenuItemVisibility
(
view
)
;
}
)
;
function
*
testMdnContextMenuItemVisibility
(
view
)
{
info
(
"
Test
that
MDN
context
menu
item
is
shown
only
when
it
should
be
.
"
)
;
let
root
=
rootElement
(
view
)
;
for
(
let
node
of
iterateNodes
(
root
)
)
{
info
(
"
Setting
"
+
node
+
"
as
popupNode
"
)
;
info
(
"
Creating
context
menu
with
"
+
node
+
"
as
popupNode
"
)
;
let
allMenuItems
=
openStyleContextMenuAndGetAllItems
(
view
node
)
;
let
menuitemShowMdnDocs
=
allMenuItems
.
find
(
item
=
>
item
.
label
=
=
=
_STRINGS
.
GetStringFromName
(
"
styleinspector
.
contextmenu
.
showMdnDocs
"
)
)
;
let
isVisible
=
menuitemShowMdnDocs
.
visible
;
let
shouldBeVisible
=
isPropertyNameNode
(
node
)
;
let
message
=
shouldBeVisible
?
"
shown
"
:
"
hidden
"
;
is
(
isVisible
shouldBeVisible
"
The
MDN
context
menu
item
is
"
+
message
+
"
;
content
:
"
+
node
.
textContent
+
"
;
type
:
"
+
node
.
nodeType
)
;
}
}
function
isPropertyNameNode
(
node
)
{
return
node
.
textContent
=
=
=
"
font
-
family
"
;
}
function
*
iterateNodes
(
baseNode
)
{
yield
baseNode
;
for
(
let
child
of
baseNode
.
childNodes
)
{
yield
*
iterateNodes
(
child
)
;
}
}
var
rootElement
=
view
=
>
(
view
.
element
)
?
view
.
element
:
view
.
styleDocument
;
