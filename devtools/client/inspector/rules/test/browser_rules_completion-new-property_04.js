"
use
strict
"
;
const
TEST_URI
=
"
<
style
>
.
title
{
color
:
red
;
}
<
/
style
>
"
+
"
<
h1
class
=
title
>
Header
<
/
h1
>
"
;
add_task
(
async
function
(
)
{
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
let
{
inspector
view
}
=
await
openRuleView
(
)
;
info
(
"
Selecting
the
test
node
"
)
;
await
selectNode
(
"
h1
"
inspector
)
;
info
(
"
Focusing
the
new
property
editable
field
"
)
;
let
ruleEditor
=
getRuleViewRuleEditor
(
view
1
)
;
let
editor
=
await
focusNewRuleViewProperty
(
ruleEditor
)
;
info
(
"
Sending
\
"
background
\
"
to
the
editable
field
.
"
)
;
for
(
let
key
of
"
background
"
)
{
let
onSuggest
=
editor
.
once
(
"
after
-
suggest
"
)
;
EventUtils
.
synthesizeKey
(
key
{
}
view
.
styleWindow
)
;
await
onSuggest
;
}
const
itemIndex
=
4
;
let
bgcItem
=
editor
.
popup
.
getItemAtIndex
(
itemIndex
)
;
is
(
bgcItem
.
label
"
background
-
color
"
"
Check
the
expected
completion
element
is
background
-
color
.
"
)
;
editor
.
popup
.
selectedIndex
=
itemIndex
;
info
(
"
Select
the
background
-
color
suggestion
with
a
mouse
click
.
"
)
;
let
onSuggest
=
editor
.
once
(
"
after
-
suggest
"
)
;
let
node
=
editor
.
popup
.
elements
.
get
(
bgcItem
)
;
EventUtils
.
synthesizeMouseAtCenter
(
node
{
}
editor
.
popup
.
_window
)
;
await
onSuggest
;
is
(
editor
.
input
.
value
"
background
-
color
"
"
Correct
value
is
autocompleted
"
)
;
info
(
"
Press
RETURN
to
move
the
focus
to
a
property
value
editor
.
"
)
;
let
onModifications
=
view
.
once
(
"
ruleview
-
changed
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
view
.
styleWindow
)
;
await
onModifications
;
editor
=
inplaceEditor
(
view
.
styleDocument
.
activeElement
)
;
let
textProp
=
ruleEditor
.
rule
.
textProps
[
1
]
;
is
(
ruleEditor
.
rule
.
textProps
.
length
2
"
Created
a
new
text
property
.
"
)
;
is
(
ruleEditor
.
propertyList
.
children
.
length
2
"
Created
a
property
editor
.
"
)
;
is
(
editor
inplaceEditor
(
textProp
.
editor
.
valueSpan
)
"
Editing
the
value
span
now
.
"
)
;
info
(
"
Entering
a
value
and
blurring
the
field
to
expect
a
rule
change
"
)
;
editor
.
input
.
value
=
"
#
F00
"
;
onModifications
=
view
.
once
(
"
ruleview
-
changed
"
)
;
editor
.
input
.
blur
(
)
;
await
onModifications
;
is
(
textProp
.
value
"
#
F00
"
"
Text
prop
should
have
been
changed
.
"
)
;
}
)
;
