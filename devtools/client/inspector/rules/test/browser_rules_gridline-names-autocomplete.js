"
use
strict
"
;
const
OPEN
=
true
SELECTED
=
true
CHANGE
=
true
SUBMIT_PROPERTY_NAME
=
true
;
const
changeTestData
=
[
[
"
c
"
{
}
"
col1
-
start
"
OPEN
SELECTED
CHANGE
]
[
"
o
"
{
}
"
col1
-
start
"
OPEN
SELECTED
CHANGE
]
[
"
l
"
{
}
"
col1
-
start
"
OPEN
SELECTED
CHANGE
]
[
"
VK_DOWN
"
{
}
"
col2
-
start
"
OPEN
SELECTED
CHANGE
]
[
"
VK_RIGHT
"
{
}
"
col2
-
start
"
!
OPEN
!
SELECTED
!
CHANGE
]
]
;
const
newAreaTestData
=
[
[
"
g
"
{
}
"
gap
"
OPEN
SELECTED
!
CHANGE
]
[
"
VK_DOWN
"
{
}
"
grid
"
OPEN
SELECTED
!
CHANGE
]
[
"
VK_DOWN
"
{
}
"
grid
-
area
"
OPEN
SELECTED
!
CHANGE
]
[
"
VK_TAB
"
{
}
"
"
OPEN
!
SELECTED
!
CHANGE
SUBMIT_PROPERTY_NAME
]
[
"
c
"
{
}
"
col1
-
start
"
OPEN
SELECTED
CHANGE
]
[
"
VK_BACK_SPACE
"
{
}
"
c
"
!
OPEN
!
SELECTED
CHANGE
]
[
"
VK_BACK_SPACE
"
{
}
"
"
OPEN
!
SELECTED
CHANGE
]
[
"
r
"
{
}
"
revert
"
OPEN
SELECTED
CHANGE
]
[
"
VK_DOWN
"
{
}
"
revert
-
layer
"
OPEN
SELECTED
CHANGE
]
[
"
VK_DOWN
"
{
}
"
row1
-
start
"
OPEN
SELECTED
CHANGE
]
[
"
r
"
{
}
"
rr
"
!
OPEN
!
SELECTED
CHANGE
]
[
"
VK_BACK_SPACE
"
{
}
"
r
"
!
OPEN
!
SELECTED
CHANGE
]
[
"
o
"
{
}
"
row1
-
start
"
OPEN
SELECTED
CHANGE
]
[
"
VK_TAB
"
{
}
"
"
!
OPEN
!
SELECTED
CHANGE
]
]
;
const
newRowTestData
=
[
[
"
g
"
{
}
"
gap
"
OPEN
SELECTED
!
CHANGE
]
[
"
r
"
{
}
"
grid
"
OPEN
SELECTED
!
CHANGE
]
[
"
i
"
{
}
"
grid
"
OPEN
SELECTED
!
CHANGE
]
[
"
d
"
{
}
"
grid
"
OPEN
SELECTED
!
CHANGE
]
[
"
-
"
{
}
"
grid
-
area
"
OPEN
SELECTED
!
CHANGE
]
[
"
r
"
{
}
"
grid
-
row
"
OPEN
SELECTED
!
CHANGE
]
[
"
VK_TAB
"
{
}
"
"
OPEN
!
SELECTED
!
CHANGE
SUBMIT_PROPERTY_NAME
]
[
"
c
"
{
}
"
c
"
!
OPEN
!
SELECTED
CHANGE
]
[
"
VK_BACK_SPACE
"
{
}
"
"
OPEN
!
SELECTED
CHANGE
]
[
"
r
"
{
}
"
revert
"
OPEN
SELECTED
CHANGE
]
[
"
VK_DOWN
"
{
}
"
revert
-
layer
"
OPEN
SELECTED
CHANGE
]
[
"
VK_DOWN
"
{
}
"
row1
-
start
"
OPEN
SELECTED
CHANGE
]
[
"
VK_TAB
"
{
}
"
"
!
OPEN
!
SELECTED
CHANGE
]
]
;
const
TEST_URL
=
URL_ROOT
+
"
doc_grid_names
.
html
"
;
add_task
(
async
function
(
)
{
await
addTab
(
TEST_URL
)
;
const
{
toolbox
inspector
view
}
=
await
openRuleView
(
)
;
info
(
"
Test
autocompletion
changing
a
preexisting
property
"
)
;
await
runChangePropertyAutocompletionTest
(
toolbox
inspector
view
changeTestData
)
;
info
(
"
Test
autocompletion
creating
a
new
property
"
)
;
await
runNewPropertyAutocompletionTest
(
toolbox
inspector
view
newAreaTestData
)
;
info
(
"
Test
autocompletion
creating
a
new
property
"
)
;
await
runNewPropertyAutocompletionTest
(
toolbox
inspector
view
newRowTestData
)
;
}
)
;
async
function
runNewPropertyAutocompletionTest
(
toolbox
inspector
view
testData
)
{
info
(
"
Selecting
the
test
node
"
)
;
await
selectNode
(
"
#
cell2
"
inspector
)
;
info
(
"
Focusing
the
css
property
editable
field
"
)
;
const
ruleEditor
=
getRuleViewRuleEditor
(
view
0
)
;
const
editor
=
await
focusNewRuleViewProperty
(
ruleEditor
)
;
info
(
"
Starting
to
test
for
css
property
completion
"
)
;
for
(
const
data
of
testData
)
{
await
testCompletion
(
data
editor
view
)
;
}
}
async
function
runChangePropertyAutocompletionTest
(
toolbox
inspector
view
testData
)
{
info
(
"
Selecting
the
test
node
"
)
;
await
selectNode
(
"
#
cell3
"
inspector
)
;
const
ruleEditor
=
getRuleViewRuleEditor
(
view
1
)
.
rule
;
const
prop
=
ruleEditor
.
textProps
[
0
]
;
info
(
"
Focusing
the
css
property
editable
value
"
)
;
const
gridLineNamesUpdated
=
inspector
.
once
(
"
grid
-
line
-
names
-
updated
"
)
;
let
editor
=
await
focusEditableField
(
view
prop
.
editor
.
valueSpan
)
;
await
gridLineNamesUpdated
;
info
(
"
Starting
to
test
for
css
property
completion
"
)
;
for
(
const
data
of
testData
)
{
editor
=
inplaceEditor
(
view
.
styleDocument
.
activeElement
)
;
await
testCompletion
(
data
editor
view
)
;
}
}
async
function
testCompletion
(
[
key
modifiers
completion
open
selected
change
submitPropertyName
]
editor
view
)
{
info
(
Pressing
key
"
{
key
}
"
expecting
"
{
completion
}
"
popup
opened
:
{
open
}
item
selected
:
{
selected
}
)
;
const
promises
=
[
]
;
if
(
change
)
{
promises
.
push
(
view
.
once
(
"
ruleview
-
changed
"
)
)
;
}
else
if
(
key
!
=
=
"
VK_RIGHT
"
&
&
key
!
=
=
"
VK_BACK_SPACE
"
)
{
promises
.
push
(
editor
.
once
(
"
after
-
suggest
"
)
)
;
}
if
(
submitPropertyName
)
{
promises
.
push
(
editor
.
popup
.
once
(
"
popup
-
closed
"
)
editor
.
popup
.
once
(
"
popup
-
opened
"
)
view
.
inspector
.
once
(
"
grid
-
line
-
names
-
updated
"
)
)
;
}
else
if
(
editor
.
popup
.
isOpen
!
=
=
open
)
{
promises
.
push
(
editor
.
popup
.
once
(
open
?
"
popup
-
opened
"
:
"
popup
-
closed
"
)
)
;
}
info
(
Synthesizing
key
"
{
key
}
"
modifiers
:
{
JSON
.
stringify
(
Object
.
keys
(
modifiers
)
)
}
)
;
EventUtils
.
synthesizeKey
(
key
modifiers
view
.
styleWindow
)
;
view
.
debounce
.
flush
(
)
;
await
Promise
.
all
(
promises
)
;
editor
=
inplaceEditor
(
view
.
styleDocument
.
activeElement
)
;
info
(
"
Checking
the
state
"
)
;
if
(
completion
!
=
=
null
)
{
is
(
editor
.
input
.
value
completion
"
Correct
value
is
autocompleted
"
)
;
}
if
(
!
open
)
{
ok
(
!
(
editor
.
popup
&
&
editor
.
popup
.
isOpen
)
"
Popup
is
closed
"
)
;
}
else
{
ok
(
editor
.
popup
.
isOpen
"
Popup
is
open
"
)
;
is
(
editor
.
popup
.
selectedIndex
!
=
=
-
1
selected
"
An
item
is
selected
"
)
;
}
}
