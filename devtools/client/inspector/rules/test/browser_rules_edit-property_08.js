"
use
strict
"
;
const
TEST_URI
=
<
style
type
=
"
text
/
css
"
>
#
testid
{
color
:
#
FFF
;
}
<
/
style
>
<
div
style
=
'
color
:
red
'
id
=
'
testid
'
>
Styled
Node
<
/
div
>
;
add_task
(
async
function
(
)
{
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
const
{
inspector
view
}
=
await
openRuleView
(
)
;
await
selectNode
(
"
#
testid
"
inspector
)
;
info
(
"
Get
the
color
property
editor
"
)
;
const
ruleEditor
=
getRuleViewRuleEditor
(
view
0
)
;
const
propEditor
=
ruleEditor
.
rule
.
textProps
[
0
]
.
editor
;
is
(
ruleEditor
.
rule
.
textProps
[
0
]
.
name
"
color
"
)
;
info
(
"
Focus
the
property
name
field
"
)
;
await
focusEditableField
(
ruleEditor
.
ruleView
propEditor
.
nameSpan
32
1
)
;
info
(
"
Rename
the
property
to
background
-
color
"
)
;
const
onValueFocus
=
once
(
ruleEditor
.
element
"
focus
"
true
)
;
let
onRuleViewChanged
=
ruleEditor
.
ruleView
.
once
(
"
ruleview
-
changed
"
)
;
const
onMutation
=
inspector
.
once
(
"
markupmutation
"
)
;
EventUtils
.
sendString
(
"
background
-
color
:
"
ruleEditor
.
doc
.
defaultView
)
;
await
onValueFocus
;
await
onRuleViewChanged
;
await
onMutation
;
is
(
ruleEditor
.
rule
.
textProps
[
0
]
.
name
"
background
-
color
"
)
;
await
waitForComputedStyleProperty
(
"
#
testid
"
null
"
background
-
color
"
"
rgb
(
255
0
0
)
"
)
;
is
(
(
await
getComputedStyleProperty
(
"
#
testid
"
null
"
color
"
)
)
"
rgb
(
255
255
255
)
"
"
color
is
white
"
)
;
onRuleViewChanged
=
view
.
once
(
"
ruleview
-
changed
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
onRuleViewChanged
;
}
)
;
