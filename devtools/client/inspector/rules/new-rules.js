"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
ElementStyle
=
require
(
"
devtools
/
client
/
inspector
/
rules
/
models
/
element
-
style
"
)
;
const
{
createFactory
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
updateClasses
updateClassPanelExpanded
}
=
require
(
"
.
/
actions
/
class
-
list
"
)
;
const
{
disableAllPseudoClasses
setPseudoClassLocks
togglePseudoClass
}
=
require
(
"
.
/
actions
/
pseudo
-
classes
"
)
;
const
{
updateHighlightedSelector
updateRules
}
=
require
(
"
.
/
actions
/
rules
"
)
;
const
RulesApp
=
createFactory
(
require
(
"
.
/
components
/
RulesApp
"
)
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
INSPECTOR_L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
inspector
.
properties
"
)
;
loader
.
lazyRequireGetter
(
this
"
ClassList
"
"
devtools
/
client
/
inspector
/
rules
/
models
/
class
-
list
"
)
;
const
PREF_UA_STYLES
=
"
devtools
.
inspector
.
showUserAgentStyles
"
;
class
RulesView
{
constructor
(
inspector
window
)
{
this
.
cssProperties
=
inspector
.
cssProperties
;
this
.
doc
=
window
.
document
;
this
.
inspector
=
inspector
;
this
.
pageStyle
=
inspector
.
pageStyle
;
this
.
selection
=
inspector
.
selection
;
this
.
store
=
inspector
.
store
;
this
.
telemetry
=
inspector
.
telemetry
;
this
.
toolbox
=
inspector
.
toolbox
;
this
.
showUserAgentStyles
=
Services
.
prefs
.
getBoolPref
(
PREF_UA_STYLES
)
;
this
.
onAddClass
=
this
.
onAddClass
.
bind
(
this
)
;
this
.
onSelection
=
this
.
onSelection
.
bind
(
this
)
;
this
.
onSetClassState
=
this
.
onSetClassState
.
bind
(
this
)
;
this
.
onToggleClassPanelExpanded
=
this
.
onToggleClassPanelExpanded
.
bind
(
this
)
;
this
.
onToggleDeclaration
=
this
.
onToggleDeclaration
.
bind
(
this
)
;
this
.
onTogglePseudoClass
=
this
.
onTogglePseudoClass
.
bind
(
this
)
;
this
.
onToggleSelectorHighlighter
=
this
.
onToggleSelectorHighlighter
.
bind
(
this
)
;
this
.
updateClassList
=
this
.
updateClassList
.
bind
(
this
)
;
this
.
updateRules
=
this
.
updateRules
.
bind
(
this
)
;
this
.
inspector
.
sidebar
.
on
(
"
select
"
this
.
onSelection
)
;
this
.
selection
.
on
(
"
detached
-
front
"
this
.
onSelection
)
;
this
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onSelection
)
;
this
.
init
(
)
;
EventEmitter
.
decorate
(
this
)
;
}
init
(
)
{
if
(
!
this
.
inspector
)
{
return
;
}
const
rulesApp
=
RulesApp
(
{
onAddClass
:
this
.
onAddClass
onSetClassState
:
this
.
onSetClassState
onToggleClassPanelExpanded
:
this
.
onToggleClassPanelExpanded
onToggleDeclaration
:
this
.
onToggleDeclaration
onTogglePseudoClass
:
this
.
onTogglePseudoClass
onToggleSelectorHighlighter
:
this
.
onToggleSelectorHighlighter
}
)
;
const
provider
=
createElement
(
Provider
{
id
:
"
ruleview
"
key
:
"
ruleview
"
store
:
this
.
store
title
:
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
ruleViewTitle
"
)
}
rulesApp
)
;
this
.
provider
=
provider
;
}
destroy
(
)
{
this
.
inspector
.
sidebar
.
off
(
"
select
"
this
.
onSelection
)
;
this
.
selection
.
off
(
"
detached
-
front
"
this
.
onSelection
)
;
this
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onSelection
)
;
if
(
this
.
_classList
)
{
this
.
_classList
.
off
(
"
current
-
node
-
class
-
changed
"
this
.
refreshClassList
)
;
this
.
_classList
.
destroy
(
)
;
this
.
_classList
=
null
;
}
if
(
this
.
_selectHighlighter
)
{
this
.
_selectorHighlighter
.
finalize
(
)
;
this
.
_selectorHighlighter
=
null
;
}
if
(
this
.
elementStyle
)
{
this
.
elementStyle
.
destroy
(
)
;
}
this
.
_dummyElement
=
null
;
this
.
cssProperties
=
null
;
this
.
doc
=
null
;
this
.
elementStyle
=
null
;
this
.
inspector
=
null
;
this
.
pageStyle
=
null
;
this
.
selection
=
null
;
this
.
showUserAgentStyles
=
null
;
this
.
store
=
null
;
this
.
telemetry
=
null
;
this
.
toolbox
=
null
;
}
get
classList
(
)
{
if
(
!
this
.
_classList
)
{
this
.
_classList
=
new
ClassList
(
this
.
inspector
)
;
}
return
this
.
_classList
;
}
get
dummyElement
(
)
{
if
(
!
this
.
_dummyElement
)
{
this
.
_dummyElement
=
this
.
doc
.
createElement
(
"
div
"
)
;
}
return
this
.
_dummyElement
;
}
get
highlighters
(
)
{
return
this
.
inspector
.
highlighters
;
}
async
getSelectorHighlighter
(
)
{
if
(
!
this
.
inspector
)
{
return
null
;
}
if
(
this
.
_selectorHighlighter
)
{
return
this
.
_selectorHighlighter
;
}
try
{
const
front
=
this
.
inspector
.
inspector
;
this
.
_selectorHighlighter
=
await
front
.
getHighlighterByType
(
"
SelectorHighlighter
"
)
;
return
this
.
_selectorHighlighter
;
}
catch
(
e
)
{
return
null
;
}
}
isPanelVisible
(
)
{
return
this
.
inspector
&
&
this
.
inspector
.
toolbox
&
&
this
.
inspector
.
sidebar
&
&
this
.
inspector
.
toolbox
.
currentToolId
=
=
=
"
inspector
"
&
&
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
=
"
newruleview
"
;
}
async
onAddClass
(
value
)
{
await
this
.
classList
.
addClassName
(
value
)
;
this
.
updateClassList
(
)
;
}
onSelection
(
)
{
if
(
!
this
.
isPanelVisible
(
)
)
{
return
;
}
if
(
!
this
.
selection
.
isConnected
(
)
|
|
!
this
.
selection
.
isElementNode
(
)
)
{
this
.
update
(
)
;
return
;
}
this
.
update
(
this
.
selection
.
nodeFront
)
;
}
async
onSetClassState
(
name
checked
)
{
await
this
.
classList
.
setClassState
(
name
checked
)
;
this
.
updateClassList
(
)
;
}
onToggleClassPanelExpanded
(
isClassPanelExpanded
)
{
if
(
isClassPanelExpanded
)
{
this
.
classList
.
on
(
"
current
-
node
-
class
-
changed
"
this
.
updateClassList
)
;
}
else
{
this
.
classList
.
off
(
"
current
-
node
-
class
-
changed
"
this
.
updateClassList
)
;
}
this
.
store
.
dispatch
(
updateClassPanelExpanded
(
isClassPanelExpanded
)
)
;
}
onToggleDeclaration
(
ruleId
declarationId
)
{
this
.
elementStyle
.
toggleDeclaration
(
ruleId
declarationId
)
;
this
.
telemetry
.
recordEvent
(
"
edit_rule
"
"
ruleview
"
null
{
"
session_id
"
:
this
.
toolbox
.
sessionId
}
)
;
}
onTogglePseudoClass
(
value
)
{
this
.
store
.
dispatch
(
togglePseudoClass
(
value
)
)
;
this
.
inspector
.
togglePseudoClass
(
value
)
;
}
async
onToggleSelectorHighlighter
(
selector
)
{
const
highlighter
=
await
this
.
getSelectorHighlighter
(
)
;
if
(
!
highlighter
)
{
return
;
}
await
highlighter
.
hide
(
)
;
if
(
selector
!
=
=
this
.
highlighters
.
selectorHighlighterShown
)
{
this
.
store
.
dispatch
(
updateHighlightedSelector
(
selector
)
)
;
await
highlighter
.
show
(
this
.
selection
.
nodeFront
{
hideInfoBar
:
true
hideGuides
:
true
selector
}
)
;
this
.
highlighters
.
selectorHighlighterShown
=
selector
;
this
.
emit
(
"
ruleview
-
selectorhighlighter
-
toggled
"
true
)
;
}
else
{
this
.
highlighters
.
selectorHighlighterShown
=
null
;
this
.
store
.
dispatch
(
updateHighlightedSelector
(
"
"
)
)
;
this
.
emit
(
"
ruleview
-
selectorhighlighter
-
toggled
"
false
)
;
}
}
async
update
(
element
)
{
if
(
!
element
)
{
this
.
store
.
dispatch
(
disableAllPseudoClasses
(
)
)
;
this
.
store
.
dispatch
(
updateClasses
(
[
]
)
)
;
this
.
store
.
dispatch
(
updateRules
(
[
]
)
)
;
return
;
}
this
.
elementStyle
=
new
ElementStyle
(
element
this
{
}
this
.
pageStyle
this
.
showUserAgentStyles
)
;
this
.
elementStyle
.
onChanged
=
this
.
updateRules
;
await
this
.
elementStyle
.
populate
(
)
;
this
.
store
.
dispatch
(
setPseudoClassLocks
(
this
.
elementStyle
.
element
.
pseudoClassLocks
)
)
;
this
.
updateClassList
(
)
;
this
.
updateRules
(
)
;
}
updateClassList
(
)
{
this
.
store
.
dispatch
(
updateClasses
(
this
.
classList
.
currentClasses
)
)
;
}
updateRules
(
)
{
this
.
store
.
dispatch
(
updateRules
(
this
.
elementStyle
.
rules
)
)
;
}
}
module
.
exports
=
RulesView
;
