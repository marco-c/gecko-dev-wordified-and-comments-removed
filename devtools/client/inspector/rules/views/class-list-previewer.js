"
use
strict
"
;
const
ClassList
=
require
(
"
devtools
/
client
/
inspector
/
rules
/
models
/
class
-
list
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
inspector
.
properties
"
)
;
function
ClassListPreviewer
(
inspector
containerEl
)
{
this
.
inspector
=
inspector
;
this
.
containerEl
=
containerEl
;
this
.
model
=
new
ClassList
(
inspector
)
;
this
.
onNewSelection
=
this
.
onNewSelection
.
bind
(
this
)
;
this
.
onCheckBoxChanged
=
this
.
onCheckBoxChanged
.
bind
(
this
)
;
this
.
onKeyPress
=
this
.
onKeyPress
.
bind
(
this
)
;
this
.
onCurrentNodeClassChanged
=
this
.
onCurrentNodeClassChanged
.
bind
(
this
)
;
this
.
addEl
=
this
.
doc
.
createElement
(
"
input
"
)
;
this
.
addEl
.
classList
.
add
(
"
devtools
-
textinput
"
)
;
this
.
addEl
.
classList
.
add
(
"
add
-
class
"
)
;
this
.
addEl
.
setAttribute
(
"
placeholder
"
L10N
.
getStr
(
"
inspector
.
classPanel
.
newClass
.
placeholder
"
)
)
;
this
.
addEl
.
addEventListener
(
"
keypress
"
this
.
onKeyPress
)
;
this
.
containerEl
.
appendChild
(
this
.
addEl
)
;
this
.
classesEl
=
this
.
doc
.
createElement
(
"
div
"
)
;
this
.
classesEl
.
classList
.
add
(
"
classes
"
)
;
this
.
containerEl
.
appendChild
(
this
.
classesEl
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onNewSelection
)
;
this
.
containerEl
.
addEventListener
(
"
input
"
this
.
onCheckBoxChanged
)
;
this
.
model
.
on
(
"
current
-
node
-
class
-
changed
"
this
.
onCurrentNodeClassChanged
)
;
this
.
onNewSelection
(
)
;
}
ClassListPreviewer
.
prototype
=
{
destroy
(
)
{
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onNewSelection
)
;
this
.
addEl
.
removeEventListener
(
"
keypress
"
this
.
onKeyPress
)
;
this
.
containerEl
.
removeEventListener
(
"
input
"
this
.
onCheckBoxChanged
)
;
this
.
containerEl
.
innerHTML
=
"
"
;
this
.
model
.
destroy
(
)
;
this
.
containerEl
=
null
;
this
.
inspector
=
null
;
this
.
addEl
=
null
;
this
.
classesEl
=
null
;
}
get
doc
(
)
{
return
this
.
containerEl
.
ownerDocument
;
}
render
(
)
{
this
.
classesEl
.
innerHTML
=
"
"
;
for
(
const
{
name
isApplied
}
of
this
.
model
.
currentClasses
)
{
const
checkBox
=
this
.
renderCheckBox
(
name
isApplied
)
;
this
.
classesEl
.
appendChild
(
checkBox
)
;
}
if
(
!
this
.
model
.
currentClasses
.
length
)
{
this
.
classesEl
.
appendChild
(
this
.
renderNoClassesMessage
(
)
)
;
}
}
renderCheckBox
(
name
isApplied
)
{
const
box
=
this
.
doc
.
createElement
(
"
input
"
)
;
box
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
if
(
isApplied
)
{
box
.
setAttribute
(
"
checked
"
"
checked
"
)
;
}
box
.
dataset
.
name
=
name
;
const
labelWrapper
=
this
.
doc
.
createElement
(
"
label
"
)
;
labelWrapper
.
setAttribute
(
"
title
"
name
)
;
labelWrapper
.
appendChild
(
box
)
;
const
label
=
this
.
doc
.
createElement
(
"
span
"
)
;
label
.
textContent
=
name
;
labelWrapper
.
appendChild
(
label
)
;
return
labelWrapper
;
}
renderNoClassesMessage
(
)
{
const
msg
=
this
.
doc
.
createElement
(
"
p
"
)
;
msg
.
classList
.
add
(
"
no
-
classes
"
)
;
msg
.
textContent
=
L10N
.
getStr
(
"
inspector
.
classPanel
.
noClasses
"
)
;
return
msg
;
}
focusAddClassField
(
)
{
if
(
this
.
addEl
)
{
this
.
addEl
.
focus
(
)
;
}
}
onCheckBoxChanged
(
{
target
}
)
{
if
(
!
target
.
dataset
.
name
)
{
return
;
}
this
.
model
.
setClassState
(
target
.
dataset
.
name
target
.
checked
)
.
catch
(
e
=
>
{
if
(
this
.
containerEl
)
{
console
.
error
(
e
)
;
}
}
)
;
}
onKeyPress
(
event
)
{
if
(
event
.
key
!
=
=
"
Enter
"
|
|
this
.
addEl
.
value
=
=
=
"
"
)
{
return
;
}
this
.
model
.
addClassName
(
this
.
addEl
.
value
)
.
then
(
(
)
=
>
{
this
.
render
(
)
;
this
.
addEl
.
value
=
"
"
;
}
)
.
catch
(
e
=
>
{
if
(
this
.
containerEl
)
{
console
.
error
(
e
)
;
}
}
)
;
}
onNewSelection
(
)
{
this
.
render
(
)
;
}
onCurrentNodeClassChanged
(
)
{
this
.
render
(
)
;
}
}
;
module
.
exports
=
ClassListPreviewer
;
