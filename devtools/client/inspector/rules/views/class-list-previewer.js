"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
inspector
.
properties
"
)
;
const
CLASSES
=
new
WeakMap
(
)
;
function
ClassListPreviewerModel
(
inspector
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
inspector
=
inspector
;
this
.
onMutations
=
this
.
onMutations
.
bind
(
this
)
;
this
.
inspector
.
on
(
"
markupmutation
"
this
.
onMutations
)
;
this
.
classListProxyNode
=
this
.
inspector
.
panelDoc
.
createElement
(
"
div
"
)
;
}
ClassListPreviewerModel
.
prototype
=
{
destroy
(
)
{
this
.
inspector
.
off
(
"
markupmutation
"
this
.
onMutations
)
;
this
.
inspector
=
null
;
this
.
classListProxyNode
=
null
;
}
get
currentNode
(
)
{
if
(
this
.
inspector
.
selection
.
isElementNode
(
)
&
&
!
this
.
inspector
.
selection
.
isPseudoElementNode
(
)
)
{
return
this
.
inspector
.
selection
.
nodeFront
;
}
return
null
;
}
get
currentClasses
(
)
{
if
(
!
this
.
currentNode
)
{
return
[
]
;
}
if
(
!
CLASSES
.
has
(
this
.
currentNode
)
)
{
this
.
classListProxyNode
.
className
=
this
.
currentNode
.
className
;
let
nodeClasses
=
[
.
.
.
new
Set
(
[
.
.
.
this
.
classListProxyNode
.
classList
]
)
]
.
map
(
name
=
>
{
return
{
name
isApplied
:
true
}
;
}
)
;
CLASSES
.
set
(
this
.
currentNode
nodeClasses
)
;
}
return
CLASSES
.
get
(
this
.
currentNode
)
;
}
get
currentClassesPreview
(
)
{
return
this
.
currentClasses
.
filter
(
(
{
isApplied
}
)
=
>
isApplied
)
.
map
(
(
{
name
}
)
=
>
name
)
.
join
(
"
"
)
;
}
setClassState
(
name
isApplied
)
{
let
nodeClasses
=
this
.
currentClasses
;
nodeClasses
.
find
(
(
{
name
:
cName
}
)
=
>
cName
=
=
=
name
)
.
isApplied
=
isApplied
;
return
this
.
applyClassState
(
)
;
}
addClassName
(
classNameString
)
{
this
.
classListProxyNode
.
className
=
classNameString
;
return
Promise
.
all
(
[
.
.
.
new
Set
(
[
.
.
.
this
.
classListProxyNode
.
classList
]
)
]
.
map
(
name
=
>
{
return
this
.
addClass
(
name
)
;
}
)
)
;
}
addClass
(
name
)
{
if
(
this
.
currentClasses
.
some
(
(
{
name
:
cName
}
)
=
>
cName
=
=
=
name
)
)
{
return
Promise
.
resolve
(
)
;
}
this
.
currentClasses
.
push
(
{
name
isApplied
:
true
}
)
;
return
this
.
applyClassState
(
)
;
}
applyClassState
(
)
{
if
(
!
this
.
currentNode
)
{
return
Promise
.
resolve
(
)
;
}
this
.
lastStateChange
=
{
node
:
this
.
currentNode
className
:
this
.
currentClassesPreview
}
;
let
mod
=
this
.
currentNode
.
startModifyingAttributes
(
)
;
mod
.
setAttribute
(
"
class
"
this
.
currentClassesPreview
)
;
return
mod
.
apply
(
)
;
}
onMutations
(
e
mutations
)
{
for
(
let
{
type
target
attributeName
}
of
mutations
)
{
if
(
type
!
=
=
"
attributes
"
|
|
attributeName
!
=
=
"
class
"
)
{
continue
;
}
let
isMutationForOurChange
=
this
.
lastStateChange
&
&
target
=
=
=
this
.
lastStateChange
.
node
&
&
target
.
className
=
=
=
this
.
lastStateChange
.
className
;
if
(
!
isMutationForOurChange
)
{
CLASSES
.
delete
(
target
)
;
if
(
target
=
=
=
this
.
currentNode
)
{
this
.
emit
(
"
current
-
node
-
class
-
changed
"
)
;
}
}
}
}
}
;
function
ClassListPreviewer
(
inspector
containerEl
)
{
this
.
inspector
=
inspector
;
this
.
containerEl
=
containerEl
;
this
.
model
=
new
ClassListPreviewerModel
(
inspector
)
;
this
.
onNewSelection
=
this
.
onNewSelection
.
bind
(
this
)
;
this
.
onCheckBoxChanged
=
this
.
onCheckBoxChanged
.
bind
(
this
)
;
this
.
onKeyPress
=
this
.
onKeyPress
.
bind
(
this
)
;
this
.
onCurrentNodeClassChanged
=
this
.
onCurrentNodeClassChanged
.
bind
(
this
)
;
this
.
addEl
=
this
.
doc
.
createElement
(
"
input
"
)
;
this
.
addEl
.
classList
.
add
(
"
devtools
-
textinput
"
)
;
this
.
addEl
.
classList
.
add
(
"
add
-
class
"
)
;
this
.
addEl
.
setAttribute
(
"
placeholder
"
L10N
.
getStr
(
"
inspector
.
classPanel
.
newClass
.
placeholder
"
)
)
;
this
.
addEl
.
addEventListener
(
"
keypress
"
this
.
onKeyPress
)
;
this
.
containerEl
.
appendChild
(
this
.
addEl
)
;
this
.
classesEl
=
this
.
doc
.
createElement
(
"
div
"
)
;
this
.
classesEl
.
classList
.
add
(
"
classes
"
)
;
this
.
containerEl
.
appendChild
(
this
.
classesEl
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onNewSelection
)
;
this
.
containerEl
.
addEventListener
(
"
input
"
this
.
onCheckBoxChanged
)
;
this
.
model
.
on
(
"
current
-
node
-
class
-
changed
"
this
.
onCurrentNodeClassChanged
)
;
}
ClassListPreviewer
.
prototype
=
{
destroy
(
)
{
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onNewSelection
)
;
this
.
addEl
.
removeEventListener
(
"
keypress
"
this
.
onKeyPress
)
;
this
.
containerEl
.
removeEventListener
(
"
input
"
this
.
onCheckBoxChanged
)
;
this
.
containerEl
.
innerHTML
=
"
"
;
this
.
model
.
destroy
(
)
;
this
.
containerEl
=
null
;
this
.
inspector
=
null
;
this
.
addEl
=
null
;
this
.
classesEl
=
null
;
}
get
doc
(
)
{
return
this
.
containerEl
.
ownerDocument
;
}
render
(
)
{
this
.
classesEl
.
innerHTML
=
"
"
;
for
(
let
{
name
isApplied
}
of
this
.
model
.
currentClasses
)
{
let
checkBox
=
this
.
renderCheckBox
(
name
isApplied
)
;
this
.
classesEl
.
appendChild
(
checkBox
)
;
}
if
(
!
this
.
model
.
currentClasses
.
length
)
{
this
.
classesEl
.
appendChild
(
this
.
renderNoClassesMessage
(
)
)
;
}
}
renderCheckBox
(
name
isApplied
)
{
let
box
=
this
.
doc
.
createElement
(
"
input
"
)
;
box
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
if
(
isApplied
)
{
box
.
setAttribute
(
"
checked
"
"
checked
"
)
;
}
box
.
dataset
.
name
=
name
;
let
labelWrapper
=
this
.
doc
.
createElement
(
"
label
"
)
;
labelWrapper
.
setAttribute
(
"
title
"
name
)
;
labelWrapper
.
appendChild
(
box
)
;
let
label
=
this
.
doc
.
createElement
(
"
span
"
)
;
label
.
textContent
=
name
;
labelWrapper
.
appendChild
(
label
)
;
return
labelWrapper
;
}
renderNoClassesMessage
(
)
{
let
msg
=
this
.
doc
.
createElement
(
"
p
"
)
;
msg
.
classList
.
add
(
"
no
-
classes
"
)
;
msg
.
textContent
=
L10N
.
getStr
(
"
inspector
.
classPanel
.
noClasses
"
)
;
return
msg
;
}
focusAddClassField
(
)
{
if
(
this
.
addEl
)
{
this
.
addEl
.
focus
(
)
;
}
}
onCheckBoxChanged
(
{
target
}
)
{
if
(
!
target
.
dataset
.
name
)
{
return
;
}
this
.
model
.
setClassState
(
target
.
dataset
.
name
target
.
checked
)
.
catch
(
e
=
>
{
if
(
this
.
containerEl
)
{
console
.
error
(
e
)
;
}
}
)
;
}
onKeyPress
(
event
)
{
if
(
event
.
key
!
=
=
"
Enter
"
|
|
this
.
addEl
.
value
=
=
=
"
"
)
{
return
;
}
this
.
model
.
addClassName
(
this
.
addEl
.
value
)
.
then
(
(
)
=
>
{
this
.
render
(
)
;
this
.
addEl
.
value
=
"
"
;
}
)
.
catch
(
e
=
>
{
if
(
this
.
containerEl
)
{
console
.
error
(
e
)
;
}
}
)
;
}
onNewSelection
(
)
{
this
.
render
(
)
;
}
onCurrentNodeClassChanged
(
)
{
this
.
render
(
)
;
}
}
;
module
.
exports
=
ClassListPreviewer
;
