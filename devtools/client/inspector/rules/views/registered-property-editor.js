"
use
strict
"
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
const
{
appendText
createChild
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
shared
/
utils
.
js
"
)
;
const
INDENT_SIZE
=
2
;
const
INDENT_STR
=
"
"
.
repeat
(
INDENT_SIZE
)
;
class
RegisteredPropertyEditor
extends
EventEmitter
{
constructor
(
ruleView
propertyDefinition
)
{
super
(
)
;
this
.
#
doc
=
ruleView
.
styleDocument
;
this
.
#
propertyDefinition
=
propertyDefinition
;
this
.
#
createElement
(
)
;
}
#
doc
;
#
propertyDefinition
;
element
=
null
;
#
createElement
(
)
{
this
.
element
=
this
.
#
doc
.
createElement
(
"
div
"
)
;
this
.
element
.
className
=
"
ruleview
-
rule
devtools
-
monospace
"
;
this
.
element
.
setAttribute
(
"
uneditable
"
true
)
;
this
.
element
.
setAttribute
(
"
unmatched
"
false
)
;
this
.
element
.
setAttribute
(
"
data
-
name
"
this
.
#
propertyDefinition
.
name
)
;
this
.
element
.
style
.
position
=
"
relative
"
;
const
code
=
createChild
(
this
.
element
"
code
"
{
class
:
"
ruleview
-
code
"
}
)
;
const
header
=
createChild
(
code
"
header
"
{
}
)
;
this
.
propertyName
=
createChild
(
header
"
span
"
{
class
:
"
ruleview
-
registered
-
property
-
name
"
textContent
:
this
.
#
propertyDefinition
.
name
}
)
;
this
.
openBrace
=
createChild
(
header
"
span
"
{
class
:
"
ruleview
-
ruleopen
"
textContent
:
"
{
"
}
)
;
this
.
propertyList
=
createChild
(
code
"
div
"
{
class
:
"
ruleview
-
propertylist
"
role
:
"
list
"
}
)
;
this
.
#
populateProperties
(
)
;
this
.
closeBrace
=
createChild
(
code
"
div
"
{
class
:
"
ruleview
-
ruleclose
"
textContent
:
"
}
"
}
)
;
}
#
populateProperties
(
)
{
const
properties
=
[
{
name
:
"
syntax
"
value
:
"
{
this
.
#
propertyDefinition
.
syntax
}
"
}
{
name
:
"
inherits
"
value
:
this
.
#
propertyDefinition
.
inherits
}
]
;
/
/
The
initial
value
may
not
be
set
when
syntax
is
"
*
"
so
let
'
s
only
display
/
/
it
when
it
is
actually
set
.
if
(
this
.
#
propertyDefinition
.
initialValue
!
=
=
null
)
{
/
/
For
JS
-
defined
properties
we
want
to
display
them
in
the
same
syntax
that
/
/
was
used
in
CSS
.
registerProperty
(
so
we
'
ll
show
initialValue
and
not
initial
-
value
)
.
properties
.
push
(
{
name
:
this
.
#
propertyDefinition
.
fromJS
?
"
initialValue
"
:
"
initial
-
value
"
value
:
this
.
#
propertyDefinition
.
fromJS
?
"
{
this
.
#
propertyDefinition
.
initialValue
}
"
:
this
.
#
propertyDefinition
.
initialValue
}
)
;
}
/
/
When
the
property
is
registered
with
CSS
.
registerProperty
we
want
to
match
the
/
/
object
shape
of
the
parameter
so
include
the
"
name
"
property
.
if
(
this
.
#
propertyDefinition
.
fromJS
)
{
properties
.
unshift
(
{
name
:
"
name
"
value
:
"
{
this
.
#
propertyDefinition
.
name
}
"
}
)
;
}
for
(
const
{
name
value
}
of
properties
)
{
const
element
=
createChild
(
this
.
propertyList
"
div
"
{
role
:
"
listitem
"
}
)
;
const
container
=
createChild
(
element
"
div
"
{
class
:
"
ruleview
-
propertycontainer
"
}
)
;
createChild
(
container
"
span
"
{
class
:
"
ruleview
-
rule
-
indent
clipboard
-
only
"
textContent
:
INDENT_STR
}
)
;
const
nameContainer
=
createChild
(
container
"
span
"
{
class
:
"
ruleview
-
namecontainer
"
}
)
;
createChild
(
nameContainer
"
span
"
{
class
:
"
ruleview
-
propertyname
theme
-
fg
-
color3
"
textContent
:
name
}
)
;
appendText
(
nameContainer
"
:
"
)
;
const
valueContainer
=
createChild
(
container
"
span
"
{
class
:
"
ruleview
-
propertyvaluecontainer
"
}
)
;
createChild
(
valueContainer
"
span
"
{
class
:
"
ruleview
-
propertyvalue
theme
-
fg
-
color1
"
textContent
:
value
}
)
;
appendText
(
valueContainer
this
.
#
propertyDefinition
.
fromJS
?
"
"
:
"
;
"
)
;
this
.
propertyList
.
appendChild
(
element
)
;
}
}
}
module
.
exports
=
RegisteredPropertyEditor
;
