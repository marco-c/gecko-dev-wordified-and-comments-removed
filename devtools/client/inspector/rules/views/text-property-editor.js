"
use
strict
"
;
const
{
l10n
}
=
require
(
"
devtools
/
shared
/
inspector
/
css
-
logic
"
)
;
const
{
getCssProperties
}
=
require
(
"
devtools
/
shared
/
fronts
/
css
-
properties
"
)
;
const
{
InplaceEditor
editableField
}
=
require
(
"
devtools
/
client
/
shared
/
inplace
-
editor
"
)
;
const
{
createChild
appendText
advanceValidate
blurOnMultipleProperties
}
=
require
(
"
devtools
/
client
/
inspector
/
shared
/
utils
"
)
;
const
{
parseDeclarations
parseSingleValue
}
=
require
(
"
devtools
/
shared
/
css
/
parsing
-
utils
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
SHARED_SWATCH_CLASS
=
"
ruleview
-
swatch
"
;
const
COLOR_SWATCH_CLASS
=
"
ruleview
-
colorswatch
"
;
const
BEZIER_SWATCH_CLASS
=
"
ruleview
-
bezierswatch
"
;
const
FILTER_SWATCH_CLASS
=
"
ruleview
-
filterswatch
"
;
const
ANGLE_SWATCH_CLASS
=
"
ruleview
-
angleswatch
"
;
const
INSET_POINT_TYPES
=
[
"
top
"
"
right
"
"
bottom
"
"
left
"
]
;
const
FONT_FAMILY_CLASS
=
"
ruleview
-
font
-
family
"
;
const
ACTIONABLE_ELEMENTS_SELECTORS
=
[
.
{
COLOR_SWATCH_CLASS
}
.
{
BEZIER_SWATCH_CLASS
}
.
{
FILTER_SWATCH_CLASS
}
.
{
ANGLE_SWATCH_CLASS
}
"
a
"
]
;
const
GENERIC_FONT_FAMILIES
=
[
"
serif
"
"
sans
-
serif
"
"
cursive
"
"
fantasy
"
"
monospace
"
"
system
-
ui
"
]
;
function
TextPropertyEditor
(
ruleEditor
property
)
{
this
.
ruleEditor
=
ruleEditor
;
this
.
ruleView
=
this
.
ruleEditor
.
ruleView
;
this
.
doc
=
this
.
ruleEditor
.
doc
;
this
.
popup
=
this
.
ruleView
.
popup
;
this
.
prop
=
property
;
this
.
prop
.
editor
=
this
;
this
.
browserWindow
=
this
.
doc
.
defaultView
.
top
;
this
.
_populatedComputed
=
false
;
this
.
_hasPendingClick
=
false
;
this
.
_clickedElementOptions
=
null
;
const
toolbox
=
this
.
ruleView
.
inspector
.
toolbox
;
this
.
cssProperties
=
getCssProperties
(
toolbox
)
;
this
.
_onEnableClicked
=
this
.
_onEnableClicked
.
bind
(
this
)
;
this
.
_onExpandClicked
=
this
.
_onExpandClicked
.
bind
(
this
)
;
this
.
_onStartEditing
=
this
.
_onStartEditing
.
bind
(
this
)
;
this
.
_onNameDone
=
this
.
_onNameDone
.
bind
(
this
)
;
this
.
_onValueDone
=
this
.
_onValueDone
.
bind
(
this
)
;
this
.
_onSwatchCommit
=
this
.
_onSwatchCommit
.
bind
(
this
)
;
this
.
_onSwatchPreview
=
this
.
_onSwatchPreview
.
bind
(
this
)
;
this
.
_onSwatchRevert
=
this
.
_onSwatchRevert
.
bind
(
this
)
;
this
.
_onValidate
=
this
.
ruleView
.
debounce
(
this
.
_previewValue
10
this
)
;
this
.
update
=
this
.
update
.
bind
(
this
)
;
this
.
updatePropertyState
=
this
.
updatePropertyState
.
bind
(
this
)
;
this
.
_onHoverShapePoint
=
this
.
_onHoverShapePoint
.
bind
(
this
)
;
this
.
_create
(
)
;
this
.
update
(
)
;
}
TextPropertyEditor
.
prototype
=
{
get
editing
(
)
{
return
!
!
(
this
.
nameSpan
.
inplaceEditor
|
|
this
.
valueSpan
.
inplaceEditor
|
|
this
.
ruleView
.
tooltips
.
isEditing
)
|
|
this
.
popup
.
isOpen
;
}
get
rule
(
)
{
return
this
.
prop
.
rule
;
}
_create
:
function
(
)
{
this
.
element
=
this
.
doc
.
createElementNS
(
HTML_NS
"
li
"
)
;
this
.
element
.
classList
.
add
(
"
ruleview
-
property
"
)
;
this
.
element
.
_textPropertyEditor
=
this
;
this
.
container
=
createChild
(
this
.
element
"
div
"
{
class
:
"
ruleview
-
propertycontainer
inline
-
tooltip
-
container
"
}
)
;
this
.
enable
=
createChild
(
this
.
container
"
div
"
{
class
:
"
ruleview
-
enableproperty
theme
-
checkbox
"
tabindex
:
"
-
1
"
}
)
;
this
.
expander
=
createChild
(
this
.
container
"
span
"
{
class
:
"
ruleview
-
expander
theme
-
twisty
"
}
)
;
this
.
expander
.
addEventListener
(
"
click
"
this
.
_onExpandClicked
true
)
;
this
.
nameContainer
=
createChild
(
this
.
container
"
span
"
{
class
:
"
ruleview
-
namecontainer
"
}
)
;
this
.
nameSpan
=
createChild
(
this
.
nameContainer
"
span
"
{
class
:
"
ruleview
-
propertyname
theme
-
fg
-
color5
"
tabindex
:
this
.
ruleEditor
.
isEditable
?
"
0
"
:
"
-
1
"
}
)
;
appendText
(
this
.
nameContainer
"
:
"
)
;
this
.
valueContainer
=
createChild
(
this
.
container
"
span
"
{
class
:
"
ruleview
-
propertyvaluecontainer
"
}
)
;
this
.
valueSpan
=
createChild
(
this
.
valueContainer
"
span
"
{
class
:
"
ruleview
-
propertyvalue
theme
-
fg
-
color1
"
tabindex
:
this
.
ruleEditor
.
isEditable
?
"
0
"
:
"
-
1
"
}
)
;
this
.
valueSpan
.
textProperty
=
this
.
prop
;
this
.
nameSpan
.
textProperty
=
this
.
prop
;
let
outputParser
=
this
.
ruleView
.
_outputParser
;
let
frag
=
outputParser
.
parseCssProperty
(
this
.
prop
.
name
this
.
prop
.
value
)
;
let
parsedValue
=
frag
.
textContent
;
this
.
committed
=
{
name
:
this
.
prop
.
name
value
:
parsedValue
priority
:
this
.
prop
.
priority
}
;
appendText
(
this
.
valueContainer
"
;
"
)
;
this
.
warning
=
createChild
(
this
.
container
"
div
"
{
class
:
"
ruleview
-
warning
"
hidden
:
"
"
title
:
l10n
(
"
rule
.
warning
.
title
"
)
}
)
;
this
.
filterProperty
=
createChild
(
this
.
container
"
div
"
{
class
:
"
ruleview
-
overridden
-
rule
-
filter
"
hidden
:
"
"
title
:
l10n
(
"
rule
.
filterProperty
.
title
"
)
}
)
;
this
.
filterProperty
.
addEventListener
(
"
click
"
event
=
>
{
this
.
ruleEditor
.
ruleView
.
setFilterStyles
(
"
"
+
this
.
prop
.
name
+
"
"
)
;
event
.
stopPropagation
(
)
;
}
)
;
this
.
computed
=
createChild
(
this
.
element
"
ul
"
{
class
:
"
ruleview
-
computedlist
"
}
)
;
this
.
shorthandOverridden
=
createChild
(
this
.
element
"
ul
"
{
class
:
"
ruleview
-
overridden
-
items
"
}
)
;
if
(
this
.
ruleEditor
.
isEditable
)
{
this
.
enable
.
addEventListener
(
"
click
"
this
.
_onEnableClicked
true
)
;
this
.
nameContainer
.
addEventListener
(
"
click
"
(
event
)
=
>
{
event
.
stopPropagation
(
)
;
if
(
event
.
target
=
=
=
this
.
nameContainer
)
{
this
.
nameSpan
.
click
(
)
;
}
}
)
;
editableField
(
{
start
:
this
.
_onStartEditing
element
:
this
.
nameSpan
done
:
this
.
_onNameDone
destroy
:
this
.
updatePropertyState
advanceChars
:
"
:
"
contentType
:
InplaceEditor
.
CONTENT_TYPES
.
CSS_PROPERTY
popup
:
this
.
popup
cssProperties
:
this
.
cssProperties
}
)
;
this
.
nameContainer
.
addEventListener
(
"
paste
"
blurOnMultipleProperties
(
this
.
cssProperties
)
)
;
this
.
valueContainer
.
addEventListener
(
"
click
"
(
event
)
=
>
{
event
.
stopPropagation
(
)
;
if
(
event
.
target
=
=
=
this
.
valueContainer
)
{
this
.
valueSpan
.
click
(
)
;
}
}
)
;
this
.
valueSpan
.
addEventListener
(
"
mousedown
"
(
event
)
=
>
{
let
clickedEl
=
event
.
target
;
if
(
clickedEl
=
=
=
this
.
valueSpan
)
{
return
;
}
this
.
_hasPendingClick
=
true
;
let
matchedSelector
=
ACTIONABLE_ELEMENTS_SELECTORS
.
find
(
(
selector
)
=
>
clickedEl
.
matches
(
selector
)
)
;
if
(
matchedSelector
)
{
let
similarElements
=
[
.
.
.
this
.
valueSpan
.
querySelectorAll
(
matchedSelector
)
]
;
this
.
_clickedElementOptions
=
{
selector
:
matchedSelector
index
:
similarElements
.
indexOf
(
clickedEl
)
}
;
}
}
)
;
this
.
valueSpan
.
addEventListener
(
"
mouseup
"
(
event
)
=
>
{
this
.
_clickedElementOptions
=
null
;
this
.
_hasPendingClick
=
false
;
}
)
;
this
.
valueSpan
.
addEventListener
(
"
click
"
(
event
)
=
>
{
let
target
=
event
.
target
;
if
(
target
.
nodeName
=
=
=
"
a
"
)
{
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
let
browserWin
=
this
.
ruleView
.
inspector
.
target
.
tab
.
ownerDocument
.
defaultView
;
browserWin
.
openUILinkIn
(
target
.
href
"
tab
"
)
;
}
}
)
;
editableField
(
{
start
:
this
.
_onStartEditing
element
:
this
.
valueSpan
done
:
this
.
_onValueDone
destroy
:
this
.
update
validate
:
this
.
_onValidate
advanceChars
:
advanceValidate
contentType
:
InplaceEditor
.
CONTENT_TYPES
.
CSS_VALUE
property
:
this
.
prop
defaultIncrement
:
this
.
prop
.
name
=
=
=
"
opacity
"
?
0
.
1
:
1
popup
:
this
.
popup
multiline
:
true
maxWidth
:
(
)
=
>
this
.
container
.
getBoundingClientRect
(
)
.
width
cssProperties
:
this
.
cssProperties
}
)
;
this
.
ruleView
.
highlighters
.
on
(
"
hover
-
shape
-
point
"
this
.
_onHoverShapePoint
)
;
}
}
get
sheetHref
(
)
{
let
domRule
=
this
.
rule
.
domRule
;
if
(
domRule
)
{
return
domRule
.
href
|
|
domRule
.
nodeHref
;
}
return
undefined
;
}
update
:
function
(
)
{
if
(
this
.
ruleView
.
isDestroyed
)
{
return
;
}
this
.
updatePropertyState
(
)
;
let
name
=
this
.
prop
.
name
;
this
.
nameSpan
.
textContent
=
name
;
let
store
=
this
.
rule
.
elementStyle
.
store
;
let
val
=
store
.
userProperties
.
getProperty
(
this
.
rule
.
style
name
this
.
prop
.
value
)
;
if
(
this
.
prop
.
priority
)
{
val
+
=
"
!
"
+
this
.
prop
.
priority
;
}
let
propDirty
=
store
.
userProperties
.
contains
(
this
.
rule
.
style
name
)
;
if
(
propDirty
)
{
this
.
element
.
setAttribute
(
"
dirty
"
"
"
)
;
}
else
{
this
.
element
.
removeAttribute
(
"
dirty
"
)
;
}
let
outputParser
=
this
.
ruleView
.
_outputParser
;
let
parserOptions
=
{
angleClass
:
"
ruleview
-
angle
"
angleSwatchClass
:
SHARED_SWATCH_CLASS
+
"
"
+
ANGLE_SWATCH_CLASS
bezierClass
:
"
ruleview
-
bezier
"
bezierSwatchClass
:
SHARED_SWATCH_CLASS
+
"
"
+
BEZIER_SWATCH_CLASS
colorClass
:
"
ruleview
-
color
"
colorSwatchClass
:
SHARED_SWATCH_CLASS
+
"
"
+
COLOR_SWATCH_CLASS
filterClass
:
"
ruleview
-
filter
"
filterSwatchClass
:
SHARED_SWATCH_CLASS
+
"
"
+
FILTER_SWATCH_CLASS
flexClass
:
"
ruleview
-
flex
"
gridClass
:
"
ruleview
-
grid
"
shapeClass
:
"
ruleview
-
shape
"
defaultColorType
:
!
propDirty
urlClass
:
"
theme
-
link
"
fontFamilyClass
:
FONT_FAMILY_CLASS
baseURI
:
this
.
sheetHref
unmatchedVariableClass
:
"
ruleview
-
unmatched
-
variable
"
matchedVariableClass
:
"
ruleview
-
variable
"
isVariableInUse
:
varName
=
>
this
.
rule
.
elementStyle
.
getVariable
(
varName
)
}
;
let
frag
=
outputParser
.
parseCssProperty
(
name
val
parserOptions
)
;
this
.
valueSpan
.
innerHTML
=
"
"
;
this
.
valueSpan
.
appendChild
(
frag
)
;
this
.
ruleView
.
emit
(
"
property
-
value
-
updated
"
this
.
valueSpan
)
;
let
fontFamilySpans
=
this
.
valueSpan
.
querySelectorAll
(
"
.
"
+
FONT_FAMILY_CLASS
)
;
if
(
fontFamilySpans
.
length
&
&
this
.
prop
.
enabled
&
&
!
this
.
prop
.
overridden
)
{
this
.
rule
.
elementStyle
.
getUsedFontFamilies
(
)
.
then
(
families
=
>
{
const
usedFontFamilies
=
families
.
map
(
font
=
>
font
.
toLowerCase
(
)
)
;
let
foundMatchingFamily
=
false
;
let
firstGenericSpan
=
null
;
for
(
let
span
of
fontFamilySpans
)
{
const
authoredFont
=
span
.
textContent
.
toLowerCase
(
)
;
if
(
!
firstGenericSpan
&
&
GENERIC_FONT_FAMILIES
.
includes
(
authoredFont
)
)
{
firstGenericSpan
=
span
;
}
if
(
usedFontFamilies
.
includes
(
authoredFont
)
)
{
span
.
classList
.
add
(
"
used
-
font
"
)
;
foundMatchingFamily
=
true
;
break
;
}
}
if
(
!
foundMatchingFamily
&
&
firstGenericSpan
)
{
firstGenericSpan
.
classList
.
add
(
"
used
-
font
"
)
;
}
this
.
ruleView
.
emit
(
"
font
-
highlighted
"
this
.
valueSpan
)
;
}
)
.
catch
(
e
=
>
console
.
error
(
"
Could
not
get
the
list
of
font
families
"
e
)
)
;
}
this
.
_colorSwatchSpans
=
this
.
valueSpan
.
querySelectorAll
(
"
.
"
+
COLOR_SWATCH_CLASS
)
;
if
(
this
.
ruleEditor
.
isEditable
)
{
for
(
let
span
of
this
.
_colorSwatchSpans
)
{
this
.
ruleView
.
tooltips
.
getTooltip
(
"
colorPicker
"
)
.
addSwatch
(
span
{
onShow
:
this
.
_onStartEditing
onPreview
:
this
.
_onSwatchPreview
onCommit
:
this
.
_onSwatchCommit
onRevert
:
this
.
_onSwatchRevert
}
)
;
span
.
on
(
"
unit
-
change
"
this
.
_onSwatchCommit
)
;
let
title
=
l10n
(
"
rule
.
colorSwatch
.
tooltip
"
)
;
span
.
setAttribute
(
"
title
"
title
)
;
span
.
dataset
.
propertyName
=
this
.
nameSpan
.
textContent
;
}
}
this
.
_bezierSwatchSpans
=
this
.
valueSpan
.
querySelectorAll
(
"
.
"
+
BEZIER_SWATCH_CLASS
)
;
if
(
this
.
ruleEditor
.
isEditable
)
{
for
(
let
span
of
this
.
_bezierSwatchSpans
)
{
this
.
ruleView
.
tooltips
.
getTooltip
(
"
cubicBezier
"
)
.
addSwatch
(
span
{
onShow
:
this
.
_onStartEditing
onPreview
:
this
.
_onSwatchPreview
onCommit
:
this
.
_onSwatchCommit
onRevert
:
this
.
_onSwatchRevert
}
)
;
let
title
=
l10n
(
"
rule
.
bezierSwatch
.
tooltip
"
)
;
span
.
setAttribute
(
"
title
"
title
)
;
}
}
let
span
=
this
.
valueSpan
.
querySelector
(
"
.
"
+
FILTER_SWATCH_CLASS
)
;
if
(
this
.
ruleEditor
.
isEditable
)
{
if
(
span
)
{
parserOptions
.
filterSwatch
=
true
;
this
.
ruleView
.
tooltips
.
getTooltip
(
"
filterEditor
"
)
.
addSwatch
(
span
{
onShow
:
this
.
_onStartEditing
onPreview
:
this
.
_onSwatchPreview
onCommit
:
this
.
_onSwatchCommit
onRevert
:
this
.
_onSwatchRevert
}
outputParser
parserOptions
)
;
let
title
=
l10n
(
"
rule
.
filterSwatch
.
tooltip
"
)
;
span
.
setAttribute
(
"
title
"
title
)
;
}
}
this
.
angleSwatchSpans
=
this
.
valueSpan
.
querySelectorAll
(
"
.
"
+
ANGLE_SWATCH_CLASS
)
;
if
(
this
.
ruleEditor
.
isEditable
)
{
for
(
let
angleSpan
of
this
.
angleSwatchSpans
)
{
angleSpan
.
on
(
"
unit
-
change
"
this
.
_onSwatchCommit
)
;
let
title
=
l10n
(
"
rule
.
angleSwatch
.
tooltip
"
)
;
angleSpan
.
setAttribute
(
"
title
"
title
)
;
}
}
let
flexToggle
=
this
.
valueSpan
.
querySelector
(
"
.
ruleview
-
flex
"
)
;
if
(
flexToggle
)
{
flexToggle
.
setAttribute
(
"
title
"
l10n
(
"
rule
.
flexToggle
.
tooltip
"
)
)
;
if
(
this
.
ruleView
.
highlighters
.
flexboxHighlighterShown
=
=
=
this
.
ruleView
.
inspector
.
selection
.
nodeFront
)
{
flexToggle
.
classList
.
add
(
"
active
"
)
;
}
}
let
gridToggle
=
this
.
valueSpan
.
querySelector
(
"
.
ruleview
-
grid
"
)
;
if
(
gridToggle
)
{
gridToggle
.
setAttribute
(
"
title
"
l10n
(
"
rule
.
gridToggle
.
tooltip
"
)
)
;
if
(
this
.
ruleView
.
highlighters
.
gridHighlighterShown
=
=
=
this
.
ruleView
.
inspector
.
selection
.
nodeFront
)
{
gridToggle
.
classList
.
add
(
"
active
"
)
;
}
}
let
shapeToggle
=
this
.
valueSpan
.
querySelector
(
"
.
ruleview
-
shape
"
)
;
if
(
shapeToggle
)
{
let
mode
=
"
css
"
+
name
.
split
(
"
-
"
)
.
map
(
s
=
>
{
return
s
[
0
]
.
toUpperCase
(
)
+
s
.
slice
(
1
)
;
}
)
.
join
(
"
"
)
;
shapeToggle
.
setAttribute
(
"
data
-
mode
"
mode
)
;
let
{
highlighters
inspector
}
=
this
.
ruleView
;
if
(
highlighters
.
shapesHighlighterShown
=
=
=
inspector
.
selection
.
nodeFront
&
&
highlighters
.
state
.
shapes
.
options
.
mode
=
=
=
mode
)
{
shapeToggle
.
classList
.
add
(
"
active
"
)
;
highlighters
.
highlightRuleViewShapePoint
(
highlighters
.
state
.
shapes
.
hoverPoint
)
;
}
}
if
(
this
.
_hasPendingClick
)
{
this
.
_hasPendingClick
=
false
;
let
elToClick
;
if
(
this
.
_clickedElementOptions
!
=
=
null
)
{
let
{
selector
index
}
=
this
.
_clickedElementOptions
;
elToClick
=
this
.
valueSpan
.
querySelectorAll
(
selector
)
[
index
]
;
this
.
_clickedElementOptions
=
null
;
}
if
(
!
elToClick
)
{
elToClick
=
this
.
valueSpan
;
}
elToClick
.
click
(
)
;
}
this
.
_updateComputed
(
)
;
this
.
_updateShorthandOverridden
(
)
;
this
.
ruleView
.
_updatePropertyHighlight
(
this
)
;
}
_onStartEditing
:
function
(
)
{
this
.
element
.
classList
.
remove
(
"
ruleview
-
overridden
"
)
;
this
.
filterProperty
.
hidden
=
true
;
this
.
enable
.
style
.
visibility
=
"
hidden
"
;
}
updatePropertyState
:
function
(
)
{
if
(
this
.
prop
.
enabled
)
{
this
.
enable
.
style
.
removeProperty
(
"
visibility
"
)
;
this
.
enable
.
setAttribute
(
"
checked
"
"
"
)
;
}
else
{
this
.
enable
.
style
.
visibility
=
"
visible
"
;
this
.
enable
.
removeAttribute
(
"
checked
"
)
;
}
this
.
warning
.
hidden
=
this
.
editing
|
|
this
.
isValid
(
)
;
this
.
filterProperty
.
hidden
=
this
.
editing
|
|
!
this
.
isValid
(
)
|
|
!
this
.
prop
.
overridden
|
|
this
.
ruleEditor
.
rule
.
isUnmatched
;
if
(
!
this
.
editing
&
&
(
this
.
prop
.
overridden
|
|
!
this
.
prop
.
enabled
|
|
!
this
.
prop
.
isKnownProperty
(
)
)
)
{
this
.
element
.
classList
.
add
(
"
ruleview
-
overridden
"
)
;
}
else
{
this
.
element
.
classList
.
remove
(
"
ruleview
-
overridden
"
)
;
}
}
_updateComputed
:
function
(
)
{
this
.
computed
.
innerHTML
=
"
"
;
let
showExpander
=
this
.
prop
.
computed
.
some
(
c
=
>
c
.
name
!
=
=
this
.
prop
.
name
)
;
this
.
expander
.
style
.
visibility
=
showExpander
?
"
visible
"
:
"
hidden
"
;
this
.
_populatedComputed
=
false
;
if
(
this
.
expander
.
hasAttribute
(
"
open
"
)
)
{
this
.
_populateComputed
(
)
;
}
}
_populateComputed
:
function
(
)
{
if
(
this
.
_populatedComputed
)
{
return
;
}
this
.
_populatedComputed
=
true
;
for
(
let
computed
of
this
.
prop
.
computed
)
{
if
(
computed
.
name
=
=
=
this
.
prop
.
name
)
{
continue
;
}
computed
.
element
=
this
.
_createComputedListItem
(
this
.
computed
computed
"
ruleview
-
computed
"
)
;
}
}
_updateShorthandOverridden
:
function
(
)
{
this
.
shorthandOverridden
.
innerHTML
=
"
"
;
this
.
_populatedShorthandOverridden
=
false
;
this
.
_populateShorthandOverridden
(
)
;
}
_populateShorthandOverridden
:
function
(
)
{
if
(
this
.
_populatedShorthandOverridden
|
|
this
.
prop
.
overridden
)
{
return
;
}
this
.
_populatedShorthandOverridden
=
true
;
for
(
let
computed
of
this
.
prop
.
computed
)
{
if
(
computed
.
name
=
=
=
this
.
prop
.
name
|
|
!
computed
.
overridden
)
{
continue
;
}
this
.
_createComputedListItem
(
this
.
shorthandOverridden
computed
"
ruleview
-
overridden
-
item
"
)
;
}
}
_createComputedListItem
:
function
(
parentEl
computed
className
)
{
let
li
=
createChild
(
parentEl
"
li
"
{
class
:
className
}
)
;
if
(
computed
.
overridden
)
{
li
.
classList
.
add
(
"
ruleview
-
overridden
"
)
;
}
createChild
(
li
"
span
"
{
class
:
"
ruleview
-
propertyname
theme
-
fg
-
color5
"
textContent
:
computed
.
name
}
)
;
appendText
(
li
"
:
"
)
;
let
outputParser
=
this
.
ruleView
.
_outputParser
;
let
frag
=
outputParser
.
parseCssProperty
(
computed
.
name
computed
.
value
{
colorSwatchClass
:
"
ruleview
-
swatch
ruleview
-
colorswatch
"
urlClass
:
"
theme
-
link
"
baseURI
:
this
.
sheetHref
}
)
;
computed
.
parsedValue
=
frag
.
textContent
;
createChild
(
li
"
span
"
{
class
:
"
ruleview
-
propertyvalue
theme
-
fg
-
color1
"
child
:
frag
}
)
;
appendText
(
li
"
;
"
)
;
return
li
;
}
_onEnableClicked
:
function
(
event
)
{
let
checked
=
this
.
enable
.
hasAttribute
(
"
checked
"
)
;
if
(
checked
)
{
this
.
enable
.
removeAttribute
(
"
checked
"
)
;
}
else
{
this
.
enable
.
setAttribute
(
"
checked
"
"
"
)
;
}
this
.
prop
.
setEnabled
(
!
checked
)
;
event
.
stopPropagation
(
)
;
}
_onExpandClicked
:
function
(
event
)
{
if
(
this
.
computed
.
hasAttribute
(
"
filter
-
open
"
)
|
|
this
.
computed
.
hasAttribute
(
"
user
-
open
"
)
)
{
this
.
expander
.
removeAttribute
(
"
open
"
)
;
this
.
computed
.
removeAttribute
(
"
filter
-
open
"
)
;
this
.
computed
.
removeAttribute
(
"
user
-
open
"
)
;
this
.
shorthandOverridden
.
removeAttribute
(
"
hidden
"
)
;
this
.
_populateShorthandOverridden
(
)
;
}
else
{
this
.
expander
.
setAttribute
(
"
open
"
"
true
"
)
;
this
.
computed
.
setAttribute
(
"
user
-
open
"
"
"
)
;
this
.
shorthandOverridden
.
setAttribute
(
"
hidden
"
"
true
"
)
;
this
.
_populateComputed
(
)
;
}
event
.
stopPropagation
(
)
;
}
expandForFilter
:
function
(
)
{
if
(
!
this
.
computed
.
hasAttribute
(
"
user
-
open
"
)
)
{
this
.
expander
.
setAttribute
(
"
open
"
"
true
"
)
;
this
.
computed
.
setAttribute
(
"
filter
-
open
"
"
"
)
;
this
.
_populateComputed
(
)
;
}
}
collapseForFilter
:
function
(
)
{
this
.
computed
.
removeAttribute
(
"
filter
-
open
"
)
;
if
(
!
this
.
computed
.
hasAttribute
(
"
user
-
open
"
)
)
{
this
.
expander
.
removeAttribute
(
"
open
"
)
;
}
}
_onNameDone
:
function
(
value
commit
direction
)
{
let
isNameUnchanged
=
(
!
commit
&
&
!
this
.
ruleEditor
.
isEditing
)
|
|
this
.
committed
.
name
=
=
=
value
;
if
(
this
.
prop
.
value
&
&
isNameUnchanged
)
{
return
;
}
if
(
!
value
.
trim
(
)
)
{
this
.
remove
(
direction
)
;
return
;
}
if
(
!
this
.
prop
.
value
&
&
direction
!
=
=
Services
.
focus
.
MOVEFOCUS_FORWARD
)
{
this
.
remove
(
direction
)
;
return
;
}
let
properties
=
parseDeclarations
(
this
.
cssProperties
.
isKnown
value
)
;
if
(
properties
.
length
)
{
this
.
prop
.
setName
(
properties
[
0
]
.
name
)
;
this
.
committed
.
name
=
this
.
prop
.
name
;
if
(
!
this
.
prop
.
enabled
)
{
this
.
prop
.
setEnabled
(
true
)
;
}
if
(
properties
.
length
>
1
)
{
this
.
prop
.
setValue
(
properties
[
0
]
.
value
properties
[
0
]
.
priority
)
;
this
.
ruleEditor
.
addProperties
(
properties
.
slice
(
1
)
this
.
prop
)
;
}
}
}
remove
:
function
(
direction
)
{
if
(
this
.
_colorSwatchSpans
&
&
this
.
_colorSwatchSpans
.
length
)
{
for
(
let
span
of
this
.
_colorSwatchSpans
)
{
this
.
ruleView
.
tooltips
.
getTooltip
(
"
colorPicker
"
)
.
removeSwatch
(
span
)
;
span
.
off
(
"
unit
-
change
"
this
.
_onSwatchCommit
)
;
}
}
if
(
this
.
angleSwatchSpans
&
&
this
.
angleSwatchSpans
.
length
)
{
for
(
let
span
of
this
.
angleSwatchSpans
)
{
span
.
off
(
"
unit
-
change
"
this
.
_onSwatchCommit
)
;
}
}
this
.
element
.
remove
(
)
;
this
.
ruleEditor
.
rule
.
editClosestTextProperty
(
this
.
prop
direction
)
;
this
.
nameSpan
.
textProperty
=
null
;
this
.
valueSpan
.
textProperty
=
null
;
this
.
prop
.
remove
(
)
;
}
_onValueDone
:
function
(
value
=
"
"
commit
direction
)
{
let
parsedProperties
=
this
.
_getValueAndExtraProperties
(
value
)
;
let
val
=
parseSingleValue
(
this
.
cssProperties
.
isKnown
parsedProperties
.
firstValue
)
;
let
isValueUnchanged
=
(
!
commit
&
&
!
this
.
ruleEditor
.
isEditing
)
|
|
!
parsedProperties
.
propertiesToAdd
.
length
&
&
this
.
committed
.
value
=
=
=
val
.
value
&
&
this
.
committed
.
priority
=
=
=
val
.
priority
;
if
(
value
.
trim
(
)
&
&
isValueUnchanged
)
{
this
.
ruleEditor
.
rule
.
previewPropertyValue
(
this
.
prop
val
.
value
val
.
priority
)
;
this
.
rule
.
setPropertyEnabled
(
this
.
prop
this
.
prop
.
enabled
)
;
return
;
}
if
(
this
.
isDisplayFlex
(
)
)
{
this
.
ruleView
.
highlighters
.
hideFlexboxHighlighter
(
)
;
}
if
(
this
.
isDisplayGrid
(
)
)
{
this
.
ruleView
.
highlighters
.
hideGridHighlighter
(
)
;
}
this
.
prop
.
setValue
(
val
.
value
val
.
priority
)
;
if
(
!
this
.
prop
.
enabled
)
{
this
.
prop
.
setEnabled
(
true
)
;
}
this
.
committed
.
value
=
this
.
prop
.
value
;
this
.
committed
.
priority
=
this
.
prop
.
priority
;
this
.
ruleEditor
.
addProperties
(
parsedProperties
.
propertiesToAdd
this
.
prop
)
;
if
(
!
value
.
trim
(
)
&
&
direction
!
=
=
Services
.
focus
.
MOVEFOCUS_BACKWARD
)
{
setTimeout
(
(
)
=
>
{
if
(
!
this
.
editing
)
{
this
.
remove
(
direction
)
;
}
}
0
)
;
}
}
_onSwatchCommit
:
function
(
)
{
this
.
_onValueDone
(
this
.
valueSpan
.
textContent
true
)
;
this
.
update
(
)
;
}
_onSwatchPreview
:
function
(
)
{
this
.
_previewValue
(
this
.
valueSpan
.
textContent
)
;
}
_onSwatchRevert
:
function
(
)
{
this
.
_previewValue
(
this
.
prop
.
value
true
)
;
this
.
update
(
)
;
}
_getValueAndExtraProperties
:
function
(
value
)
{
let
firstValue
=
value
;
let
propertiesToAdd
=
[
]
;
let
properties
=
parseDeclarations
(
this
.
cssProperties
.
isKnown
value
)
;
if
(
properties
.
length
)
{
if
(
!
properties
[
0
]
.
name
&
&
properties
[
0
]
.
value
)
{
firstValue
=
properties
[
0
]
.
value
;
propertiesToAdd
=
properties
.
slice
(
1
)
;
}
else
if
(
properties
[
0
]
.
name
&
&
properties
[
0
]
.
value
)
{
firstValue
=
properties
[
0
]
.
name
+
"
:
"
+
properties
[
0
]
.
value
;
propertiesToAdd
=
properties
.
slice
(
1
)
;
}
}
return
{
propertiesToAdd
:
propertiesToAdd
firstValue
:
firstValue
}
;
}
_previewValue
:
function
(
value
reverting
=
false
)
{
if
(
!
reverting
&
&
(
!
this
.
editing
|
|
this
.
ruleEditor
.
isEditing
)
)
{
return
;
}
let
val
=
parseSingleValue
(
this
.
cssProperties
.
isKnown
value
)
;
this
.
ruleEditor
.
rule
.
previewPropertyValue
(
this
.
prop
val
.
value
val
.
priority
)
;
}
isValid
:
function
(
)
{
return
this
.
prop
.
isValid
(
)
;
}
isDisplayFlex
:
function
(
)
{
return
this
.
prop
.
name
=
=
=
"
display
"
&
&
(
this
.
prop
.
value
=
=
=
"
flex
"
|
|
this
.
prop
.
value
=
=
=
"
inline
-
flex
"
)
;
}
isDisplayGrid
:
function
(
)
{
return
this
.
prop
.
name
=
=
=
"
display
"
&
&
(
this
.
prop
.
value
=
=
=
"
grid
"
|
|
this
.
prop
.
value
=
=
=
"
inline
-
grid
"
)
;
}
_onHoverShapePoint
:
function
(
event
point
)
{
let
shapeToggle
=
this
.
valueSpan
.
querySelector
(
"
.
ruleview
-
shape
.
active
"
)
;
if
(
!
shapeToggle
)
{
return
;
}
let
view
=
this
.
ruleView
;
let
{
highlighters
}
=
view
;
let
ruleViewEl
=
view
.
element
;
let
selector
=
.
ruleview
-
shape
-
point
.
active
;
for
(
let
pointNode
of
ruleViewEl
.
querySelectorAll
(
selector
)
)
{
this
.
_toggleShapePointActive
(
pointNode
false
)
;
}
if
(
typeof
point
=
=
=
"
string
"
)
{
if
(
point
.
includes
(
"
"
)
)
{
point
=
point
.
split
(
"
"
)
[
0
]
;
}
selector
=
(
INSET_POINT_TYPES
.
includes
(
point
)
)
?
.
ruleview
-
shape
-
point
.
{
point
}
:
.
ruleview
-
shape
-
point
[
data
-
point
=
'
{
point
}
'
]
;
for
(
let
pointNode
of
this
.
valueSpan
.
querySelectorAll
(
selector
)
)
{
let
nodeInfo
=
view
.
getNodeInfo
(
pointNode
)
;
if
(
highlighters
.
isRuleViewShapePoint
(
nodeInfo
)
)
{
this
.
_toggleShapePointActive
(
pointNode
true
)
;
}
}
}
}
_toggleShapePointActive
:
function
(
node
active
)
{
let
{
highlighters
}
=
this
.
ruleView
;
if
(
highlighters
.
inspector
.
selection
.
nodeFront
!
=
highlighters
.
shapesHighlighterShown
)
{
return
;
}
node
.
classList
.
toggle
(
"
active
"
active
)
;
}
}
;
module
.
exports
=
TextPropertyEditor
;
