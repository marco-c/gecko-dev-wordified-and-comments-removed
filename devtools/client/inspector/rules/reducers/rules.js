"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
UPDATE_ADD_RULE_ENABLED
UPDATE_COLOR_SCHEME_SIMULATION_HIDDEN
UPDATE_HIGHLIGHTED_SELECTOR
UPDATE_PRINT_SIMULATION_HIDDEN
UPDATE_RULES
UPDATE_SOURCE_LINK_ENABLED
UPDATE_SOURCE_LINK
}
=
require
(
"
.
.
/
actions
/
index
"
)
;
const
INITIAL_RULES
=
{
highlightedSelector
:
"
"
isAddRuleEnabled
:
false
isColorSchemeSimulationHidden
:
false
isPrintSimulationHidden
:
false
isSourceLinkEnabled
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
styleeditor
.
enabled
"
)
rules
:
[
]
}
;
function
getDeclarationState
(
declaration
ruleId
)
{
return
{
computedProperties
:
declaration
.
computedProperties
id
:
declaration
.
id
isDeclarationValid
:
declaration
.
isValid
(
)
isEnabled
:
declaration
.
enabled
isInvisible
:
declaration
.
invisible
isKnownProperty
:
declaration
.
isKnownProperty
isNameValid
:
declaration
.
isNameValid
(
)
isOverridden
:
!
!
declaration
.
overridden
isPropertyChanged
:
declaration
.
isPropertyChanged
name
:
declaration
.
name
priority
:
declaration
.
priority
ruleId
value
:
declaration
.
value
}
;
}
function
getRuleState
(
rule
)
{
return
{
declarations
:
rule
.
declarations
.
map
(
declaration
=
>
getDeclarationState
(
declaration
rule
.
domRule
.
actorID
)
)
id
:
rule
.
domRule
.
actorID
inheritance
:
rule
.
inheritance
isUnmatched
:
rule
.
isUnmatched
isUserAgentStyle
:
rule
.
isSystem
keyframesRule
:
rule
.
keyframesRule
pseudoElement
:
rule
.
pseudoElement
selector
:
rule
.
selector
sourceLink
:
rule
.
sourceLink
type
:
rule
.
domRule
.
type
}
;
}
const
reducers
=
{
[
UPDATE_ADD_RULE_ENABLED
]
(
rules
{
enabled
}
)
{
return
{
.
.
.
rules
isAddRuleEnabled
:
enabled
}
;
}
[
UPDATE_COLOR_SCHEME_SIMULATION_HIDDEN
]
(
rules
{
hidden
}
)
{
return
{
.
.
.
rules
isColorSchemeSimulationHidden
:
hidden
}
;
}
[
UPDATE_HIGHLIGHTED_SELECTOR
]
(
rules
{
highlightedSelector
}
)
{
return
{
.
.
.
rules
highlightedSelector
}
;
}
[
UPDATE_PRINT_SIMULATION_HIDDEN
]
(
rules
{
hidden
}
)
{
return
{
.
.
.
rules
isPrintSimulationHidden
:
hidden
}
;
}
[
UPDATE_RULES
]
(
rules
{
rules
:
newRules
}
)
{
return
{
highlightedSelector
:
rules
.
highlightedSelector
isAddRuleEnabled
:
rules
.
isAddRuleEnabled
isPrintSimulationHidden
:
rules
.
isPrintSimulationHidden
isSourceLinkEnabled
:
rules
.
isSourceLinkEnabled
rules
:
newRules
.
map
(
rule
=
>
getRuleState
(
rule
)
)
}
;
}
[
UPDATE_SOURCE_LINK_ENABLED
]
(
rules
{
enabled
}
)
{
return
{
.
.
.
rules
isSourceLinkEnabled
:
enabled
}
;
}
[
UPDATE_SOURCE_LINK
]
(
rules
{
ruleId
sourceLink
}
)
{
return
{
highlightedSelector
:
rules
.
highlightedSelector
isAddRuleEnabled
:
rules
.
isAddRuleEnabled
isSourceLinkEnabled
:
rules
.
isSourceLinkEnabled
rules
:
rules
.
rules
.
map
(
rule
=
>
{
if
(
rule
.
id
!
=
=
ruleId
)
{
return
rule
;
}
return
{
.
.
.
rule
sourceLink
}
;
}
)
}
;
}
}
;
module
.
exports
=
function
(
rules
=
INITIAL_RULES
action
)
{
const
reducer
=
reducers
[
action
.
type
]
;
if
(
!
reducer
)
{
return
rules
;
}
return
reducer
(
rules
action
)
;
}
;
