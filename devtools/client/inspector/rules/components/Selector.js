"
use
strict
"
;
const
{
createRef
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
editableItem
}
=
require
(
"
devtools
/
client
/
shared
/
inplace
-
editor
"
)
;
const
{
parsePseudoClassesAndAttributes
SELECTOR_ATTRIBUTE
SELECTOR_ELEMENT
SELECTOR_PSEUDO_CLASS
}
=
require
(
"
devtools
/
shared
/
css
/
parsing
-
utils
"
)
;
const
{
ELEMENT_STYLE
PSEUDO_CLASSES
}
=
require
(
"
devtools
/
client
/
inspector
/
rules
/
constants
"
)
;
const
Types
=
require
(
"
.
.
/
types
"
)
;
class
Selector
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
id
:
PropTypes
.
string
.
isRequired
isUserAgentStyle
:
PropTypes
.
bool
.
isRequired
selector
:
PropTypes
.
shape
(
Types
.
selector
)
.
isRequired
showSelectorEditor
:
PropTypes
.
func
.
isRequired
type
:
PropTypes
.
number
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
selectorRef
=
createRef
(
)
;
}
componentDidMount
(
)
{
if
(
this
.
props
.
isUserAgentStyle
|
|
this
.
props
.
type
=
=
=
ELEMENT_STYLE
|
|
this
.
props
.
type
=
=
=
CSSRule
.
KEYFRAME_RULE
)
{
return
;
}
editableItem
(
{
element
:
this
.
selectorRef
.
current
}
element
=
>
{
this
.
props
.
showSelectorEditor
(
element
this
.
props
.
id
)
;
}
)
;
}
renderSelector
(
)
{
if
(
this
.
props
.
type
=
=
=
ELEMENT_STYLE
|
|
this
.
props
.
type
=
=
=
CSSRule
.
KEYFRAME_RULE
)
{
return
this
.
props
.
selector
.
selectorText
;
}
const
{
matchedSelectors
selectors
}
=
this
.
props
.
selector
;
const
output
=
[
]
;
for
(
let
i
=
0
;
i
<
selectors
.
length
;
i
+
+
)
{
const
selector
=
selectors
[
i
]
;
output
.
push
(
dom
.
span
(
{
className
:
matchedSelectors
.
indexOf
(
selector
)
>
-
1
?
"
ruleview
-
selector
-
matched
"
:
"
ruleview
-
selector
-
unmatched
"
}
parsePseudoClassesAndAttributes
(
selector
)
.
map
(
(
{
type
value
}
)
=
>
{
let
selectorSpanClass
=
"
"
;
switch
(
type
)
{
case
SELECTOR_ATTRIBUTE
:
selectorSpanClass
+
=
"
ruleview
-
selector
-
attribute
"
;
break
;
case
SELECTOR_ELEMENT
:
selectorSpanClass
+
=
"
ruleview
-
selector
"
;
break
;
case
SELECTOR_PSEUDO_CLASS
:
selectorSpanClass
+
=
PSEUDO_CLASSES
.
some
(
p
=
>
value
=
=
=
p
)
?
"
ruleview
-
selector
-
pseudo
-
class
-
lock
"
:
"
ruleview
-
selector
-
pseudo
-
class
"
;
break
;
}
return
(
dom
.
span
(
{
key
:
value
className
:
selectorSpanClass
}
value
)
)
;
}
)
)
)
;
if
(
i
<
selectors
.
length
-
1
)
{
output
.
push
(
dom
.
span
(
{
className
:
"
ruleview
-
selector
-
separator
"
}
"
"
)
)
;
}
}
return
output
;
}
render
(
)
{
return
(
dom
.
span
(
{
className
:
"
ruleview
-
selectorcontainer
"
ref
:
this
.
selectorRef
tabIndex
:
0
}
this
.
renderSelector
(
)
)
)
;
}
}
module
.
exports
=
Selector
;
