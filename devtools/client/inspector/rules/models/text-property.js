"
use
strict
"
;
const
{
generateUUID
}
=
require
(
"
devtools
/
shared
/
generate
-
uuid
"
)
;
loader
.
lazyRequireGetter
(
this
"
escapeCSSComment
"
"
devtools
/
shared
/
css
/
parsing
-
utils
"
true
)
;
function
TextProperty
(
rule
name
value
priority
enabled
=
true
invisible
=
false
)
{
this
.
id
=
name
+
"
_
"
+
generateUUID
(
)
.
toString
(
)
;
this
.
rule
=
rule
;
this
.
name
=
name
;
this
.
value
=
value
;
this
.
priority
=
priority
;
this
.
enabled
=
!
!
enabled
;
this
.
invisible
=
invisible
;
this
.
cssProperties
=
this
.
rule
.
elementStyle
.
ruleView
.
cssProperties
;
this
.
panelDoc
=
this
.
rule
.
elementStyle
.
ruleView
.
inspector
.
panelDoc
;
this
.
updateComputed
(
)
;
}
TextProperty
.
prototype
=
{
get
computedProperties
(
)
{
return
this
.
computed
.
filter
(
computed
=
>
computed
.
name
!
=
=
this
.
name
)
.
map
(
computed
=
>
{
return
{
isOverridden
:
computed
.
overridden
name
:
computed
.
name
priority
:
computed
.
priority
value
:
computed
.
value
}
;
}
)
;
}
get
isKnownProperty
(
)
{
return
this
.
cssProperties
.
isKnown
(
this
.
name
)
;
}
updateEditor
:
function
(
)
{
if
(
this
.
editor
)
{
this
.
editor
.
update
(
)
;
}
}
updateComputed
:
function
(
)
{
if
(
!
this
.
name
)
{
return
;
}
const
dummyElement
=
this
.
rule
.
elementStyle
.
ruleView
.
dummyElement
;
const
dummyStyle
=
dummyElement
.
style
;
dummyStyle
.
cssText
=
"
"
;
dummyStyle
.
setProperty
(
this
.
name
this
.
value
this
.
priority
)
;
this
.
computed
=
[
]
;
const
subProps
=
this
.
cssProperties
.
getSubproperties
(
this
.
name
)
;
for
(
const
prop
of
subProps
)
{
this
.
computed
.
push
(
{
textProp
:
this
name
:
prop
value
:
dummyStyle
.
getPropertyValue
(
prop
)
priority
:
dummyStyle
.
getPropertyPriority
(
prop
)
}
)
;
}
}
set
:
function
(
prop
)
{
let
changed
=
false
;
for
(
const
item
of
[
"
name
"
"
value
"
"
priority
"
"
enabled
"
]
)
{
if
(
this
[
item
]
!
=
=
prop
[
item
]
)
{
this
[
item
]
=
prop
[
item
]
;
changed
=
true
;
}
}
if
(
changed
)
{
this
.
updateEditor
(
)
;
}
}
setValue
:
function
(
value
priority
force
=
false
)
{
const
store
=
this
.
rule
.
elementStyle
.
store
;
if
(
this
.
editor
&
&
value
!
=
=
this
.
editor
.
committed
.
value
|
|
force
)
{
store
.
userProperties
.
setProperty
(
this
.
rule
.
domRule
this
.
name
value
)
;
}
return
this
.
rule
.
setPropertyValue
(
this
value
priority
)
.
then
(
(
)
=
>
this
.
updateEditor
(
)
)
;
}
updateValue
:
function
(
value
)
{
if
(
value
!
=
=
this
.
value
)
{
this
.
value
=
value
;
this
.
updateEditor
(
)
;
}
}
setName
:
async
function
(
name
)
{
if
(
name
!
=
=
this
.
name
&
&
this
.
editor
)
{
const
store
=
this
.
rule
.
elementStyle
.
store
;
store
.
userProperties
.
setProperty
(
this
.
rule
.
domRule
name
this
.
editor
.
committed
.
value
)
;
}
await
this
.
rule
.
setPropertyName
(
this
name
)
;
this
.
updateEditor
(
)
;
}
setEnabled
:
function
(
value
)
{
this
.
rule
.
setPropertyEnabled
(
this
value
)
;
this
.
updateEditor
(
)
;
}
remove
:
function
(
)
{
this
.
rule
.
removeProperty
(
this
)
;
}
stringifyProperty
:
function
(
)
{
let
declaration
=
this
.
name
+
"
:
"
+
this
.
editor
.
valueSpan
.
textContent
+
"
;
"
;
if
(
!
this
.
enabled
)
{
declaration
=
"
/
*
"
+
escapeCSSComment
(
declaration
)
+
"
*
/
"
;
}
return
declaration
;
}
isValid
:
function
(
)
{
const
selfIndex
=
this
.
rule
.
textProps
.
indexOf
(
this
)
;
if
(
!
this
.
rule
.
domRule
.
declarations
[
selfIndex
]
)
{
return
true
;
}
return
this
.
rule
.
domRule
.
declarations
[
selfIndex
]
.
isValid
;
}
isNameValid
:
function
(
)
{
const
selfIndex
=
this
.
rule
.
textProps
.
indexOf
(
this
)
;
if
(
!
this
.
rule
.
domRule
.
declarations
[
selfIndex
]
)
{
return
true
;
}
return
(
this
.
rule
.
domRule
.
declarations
[
selfIndex
]
.
isNameValid
!
=
=
undefined
)
?
this
.
rule
.
domRule
.
declarations
[
selfIndex
]
.
isNameValid
:
true
;
}
}
;
module
.
exports
=
TextProperty
;
