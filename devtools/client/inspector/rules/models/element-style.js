"
use
strict
"
;
const
Rule
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
rules
/
models
/
rule
.
js
"
)
;
const
UserProperties
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
rules
/
models
/
user
-
properties
.
js
"
)
;
const
{
style
:
{
ELEMENT_STYLE
}
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
constants
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
promiseWarn
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
shared
/
utils
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
[
"
parseDeclarations
"
"
parseNamedDeclarations
"
"
parseSingleValue
"
]
"
resource
:
/
/
devtools
/
shared
/
css
/
parsing
-
utils
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
isCssVariable
"
"
resource
:
/
/
devtools
/
shared
/
inspector
/
css
-
logic
.
js
"
true
)
;
const
PREF_INACTIVE_CSS_ENABLED
=
"
devtools
.
inspector
.
inactive
.
css
.
enabled
"
;
class
ElementStyle
{
constructor
(
element
ruleView
store
pageStyle
showUserAgentStyles
)
{
this
.
element
=
element
;
this
.
ruleView
=
ruleView
;
this
.
store
=
store
|
|
{
}
;
this
.
pageStyle
=
pageStyle
;
this
.
pseudoElementTypes
=
new
Set
(
)
;
this
.
showUserAgentStyles
=
showUserAgentStyles
;
this
.
rules
=
[
]
;
this
.
cssProperties
=
this
.
ruleView
.
cssProperties
;
this
.
variablesMap
=
new
Map
(
)
;
this
.
startingStyleVariablesMap
=
new
Map
(
)
;
if
(
!
(
"
userProperties
"
in
this
.
store
)
)
{
this
.
store
.
userProperties
=
new
UserProperties
(
)
;
}
if
(
!
(
"
disabled
"
in
this
.
store
)
)
{
this
.
store
.
disabled
=
new
WeakMap
(
)
;
}
}
get
unusedCssEnabled
(
)
{
if
(
!
this
.
_unusedCssEnabled
)
{
this
.
_unusedCssEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_INACTIVE_CSS_ENABLED
false
)
;
}
return
this
.
_unusedCssEnabled
;
}
destroy
(
)
{
if
(
this
.
destroyed
)
{
return
;
}
this
.
destroyed
=
true
;
this
.
pseudoElementTypes
.
clear
(
)
;
for
(
const
rule
of
this
.
rules
)
{
if
(
rule
.
editor
)
{
rule
.
editor
.
destroy
(
)
;
}
rule
.
destroy
(
)
;
}
}
_changed
(
)
{
if
(
this
.
onChanged
)
{
this
.
onChanged
(
)
;
}
}
populate
(
)
{
const
populated
=
this
.
pageStyle
.
getApplied
(
this
.
element
{
inherited
:
true
matchedSelectors
:
true
filter
:
this
.
showUserAgentStyles
?
"
ua
"
:
undefined
}
)
.
then
(
entries
=
>
{
if
(
this
.
destroyed
|
|
this
.
populated
!
=
=
populated
)
{
return
Promise
.
resolve
(
undefined
)
;
}
const
existingRules
=
this
.
rules
;
this
.
rules
=
[
]
;
for
(
const
entry
of
entries
)
{
this
.
_maybeAddRule
(
entry
existingRules
)
;
}
this
.
pseudoElementTypes
=
new
Set
(
)
;
for
(
const
rule
of
this
.
rules
)
{
if
(
rule
.
pseudoElement
)
{
this
.
pseudoElementTypes
.
add
(
rule
.
pseudoElement
)
;
}
}
this
.
onRuleUpdated
(
)
;
this
.
_sortRulesForPseudoElement
(
)
;
for
(
const
r
of
existingRules
)
{
if
(
r
?
.
editor
)
{
r
.
editor
.
destroy
(
)
;
}
r
.
destroy
(
)
;
}
return
undefined
;
}
)
.
catch
(
e
=
>
{
if
(
this
.
destroyed
)
{
return
Promise
.
resolve
(
undefined
)
;
}
return
promiseWarn
(
e
)
;
}
)
;
this
.
populated
=
populated
;
return
this
.
populated
;
}
getRule
(
id
)
{
return
id
?
this
.
rules
.
find
(
rule
=
>
rule
.
domRule
.
actorID
=
=
=
id
)
:
undefined
;
}
getUsedFontFamilies
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
ruleView
.
styleWindow
.
requestIdleCallback
(
async
(
)
=
>
{
if
(
this
.
element
.
isDestroyed
(
)
)
{
resolve
(
[
]
)
;
return
;
}
try
{
const
fonts
=
await
this
.
pageStyle
.
getUsedFontFaces
(
this
.
element
{
includePreviews
:
false
}
)
;
resolve
(
fonts
.
map
(
font
=
>
font
.
CSSFamilyName
)
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
)
;
}
)
;
}
_sortRulesForPseudoElement
(
)
{
this
.
rules
=
this
.
rules
.
sort
(
(
a
b
)
=
>
{
return
(
a
.
pseudoElement
|
|
"
z
"
)
>
(
b
.
pseudoElement
|
|
"
z
"
)
;
}
)
;
}
_maybeAddRule
(
options
existingRules
)
{
if
(
options
.
system
|
|
(
options
.
rule
&
&
this
.
rules
.
some
(
rule
=
>
rule
.
domRule
=
=
=
options
.
rule
)
)
)
{
return
false
;
}
let
rule
=
null
;
if
(
existingRules
)
{
const
ruleIndex
=
existingRules
.
findIndex
(
r
=
>
r
.
matches
(
options
)
)
;
if
(
ruleIndex
>
=
0
)
{
rule
=
existingRules
[
ruleIndex
]
;
rule
.
refresh
(
options
)
;
existingRules
.
splice
(
ruleIndex
1
)
;
}
}
if
(
!
rule
)
{
rule
=
new
Rule
(
this
options
)
;
}
if
(
options
.
inherited
&
&
!
rule
.
hasAnyVisibleProperties
(
)
)
{
return
false
;
}
this
.
rules
.
push
(
rule
)
;
return
true
;
}
onRuleUpdated
(
)
{
this
.
updateDeclarations
(
)
;
for
(
const
pseudo
of
this
.
pseudoElementTypes
)
{
this
.
updateDeclarations
(
pseudo
)
;
}
}
updateDeclarations
(
pseudo
=
"
"
)
{
const
textProps
=
this
.
_getDeclarations
(
pseudo
)
;
const
variables
=
new
Map
(
pseudo
?
this
.
variablesMap
.
get
(
"
"
)
:
null
)
;
const
startingStyleVariables
=
new
Map
(
pseudo
?
this
.
startingStyleVariablesMap
.
get
(
"
"
)
:
null
)
;
const
taken
=
new
Map
(
)
;
const
takenInStartingStyle
=
new
Map
(
)
;
for
(
const
textProp
of
textProps
)
{
for
(
const
computedProp
of
textProp
.
computed
)
{
const
earlier
=
taken
.
get
(
computedProp
.
name
)
;
const
earlierInStartingStyle
=
takenInStartingStyle
.
get
(
computedProp
.
name
)
;
if
(
!
computedProp
.
textProp
.
isValid
(
)
)
{
computedProp
.
overridden
=
true
;
continue
;
}
const
isPropInStartingStyle
=
computedProp
.
textProp
.
rule
?
.
isInStartingStyle
(
)
;
const
hasHigherPriority
=
this
.
_hasHigherPriorityThanEarlierProp
(
computedProp
earlier
)
;
const
startingStyleHasHigherPriority
=
this
.
_hasHigherPriorityThanEarlierProp
(
computedProp
earlierInStartingStyle
)
;
if
(
hasHigherPriority
&
&
!
isPropInStartingStyle
)
{
earlier
.
_overriddenDirty
=
!
earlier
.
_overriddenDirty
;
earlier
.
overridden
=
true
;
}
if
(
startingStyleHasHigherPriority
)
{
earlierInStartingStyle
.
_overriddenDirty
=
!
earlierInStartingStyle
.
_overriddenDirty
;
earlierInStartingStyle
.
overridden
=
true
;
if
(
isCssVariable
(
computedProp
.
name
)
)
{
startingStyleVariables
.
delete
(
computedProp
.
name
)
;
}
}
const
overridden
=
(
!
!
earlier
&
&
!
hasHigherPriority
)
|
|
(
isPropInStartingStyle
&
&
!
!
earlierInStartingStyle
&
&
!
startingStyleHasHigherPriority
)
;
computedProp
.
_overriddenDirty
=
!
!
computedProp
.
overridden
!
=
=
overridden
;
computedProp
.
overridden
=
overridden
;
if
(
!
computedProp
.
overridden
&
&
computedProp
.
textProp
.
enabled
)
{
if
(
isPropInStartingStyle
)
{
takenInStartingStyle
.
set
(
computedProp
.
name
computedProp
)
;
}
else
{
taken
.
set
(
computedProp
.
name
computedProp
)
;
}
if
(
isCssVariable
(
computedProp
.
name
)
&
&
!
computedProp
.
textProp
.
invisible
)
{
if
(
!
isPropInStartingStyle
)
{
variables
.
set
(
computedProp
.
name
{
declarationValue
:
computedProp
.
value
computedValue
:
computedProp
.
textProp
.
getVariableComputedValue
(
)
}
)
;
}
else
{
startingStyleVariables
.
set
(
computedProp
.
name
computedProp
.
value
)
;
}
}
}
}
}
const
previousVariablesMap
=
new
Map
(
this
.
variablesMap
.
get
(
pseudo
)
)
;
const
changedVariableNamesSet
=
new
Set
(
[
.
.
.
variables
.
keys
(
)
.
.
.
previousVariablesMap
.
keys
(
)
]
.
filter
(
k
=
>
variables
.
get
(
k
)
!
=
=
previousVariablesMap
.
get
(
k
)
)
)
;
const
previousStartingStyleVariablesMap
=
new
Map
(
this
.
startingStyleVariablesMap
.
get
(
pseudo
)
)
;
const
changedStartingStyleVariableNamesSet
=
new
Set
(
[
.
.
.
variables
.
keys
(
)
.
.
.
previousStartingStyleVariablesMap
.
keys
(
)
]
.
filter
(
k
=
>
variables
.
get
(
k
)
!
=
=
previousStartingStyleVariablesMap
.
get
(
k
)
)
)
;
this
.
variablesMap
.
set
(
pseudo
variables
)
;
this
.
startingStyleVariablesMap
.
set
(
pseudo
startingStyleVariables
)
;
for
(
const
textProp
of
textProps
)
{
if
(
this
.
_updatePropertyOverridden
(
textProp
)
|
|
this
.
_hasUpdatedCSSVariable
(
textProp
changedVariableNamesSet
)
|
|
this
.
_hasUpdatedCSSVariable
(
textProp
changedStartingStyleVariableNamesSet
)
)
{
textProp
.
updateEditor
(
)
;
}
if
(
textProp
.
editor
&
&
this
.
unusedCssEnabled
)
{
textProp
.
editor
.
updatePropertyState
(
)
;
}
}
}
_hasHigherPriorityThanEarlierProp
(
computedProp
earlierProp
)
{
return
(
earlierProp
&
&
computedProp
.
priority
=
=
=
"
important
"
&
&
(
earlierProp
.
priority
!
=
=
"
important
"
|
|
(
computedProp
.
textProp
.
rule
?
.
isInLayer
(
)
&
&
computedProp
.
textProp
.
rule
.
isInDifferentLayer
(
earlierProp
.
textProp
.
rule
)
)
)
&
&
computedProp
.
textProp
.
rule
.
inherited
=
=
earlierProp
.
textProp
.
rule
.
inherited
)
;
}
onRegisteredPropertiesChange
(
registeredPropertyNamesSet
)
{
for
(
const
rule
of
this
.
rules
)
{
for
(
const
textProp
of
rule
.
textProps
)
{
if
(
this
.
_hasUpdatedCSSVariable
(
textProp
registeredPropertyNamesSet
)
)
{
textProp
.
updateEditor
(
)
;
}
}
}
}
_hasUpdatedCSSVariable
(
declaration
variableNamesSet
)
{
for
(
const
variableName
of
variableNamesSet
)
{
if
(
declaration
.
hasCSSVariable
(
variableName
)
)
{
return
true
;
}
}
return
false
;
}
_getDeclarations
(
pseudo
=
"
"
)
{
const
textProps
=
[
]
;
for
(
const
rule
of
this
.
rules
)
{
if
(
rule
.
keyframes
)
{
continue
;
}
const
isStyleRule
=
rule
.
pseudoElement
=
=
=
"
"
&
&
rule
.
matchedSelectorIndexes
.
length
;
const
isPseudoElementRule
=
rule
.
pseudoElement
!
=
=
"
"
&
&
rule
.
pseudoElement
=
=
=
pseudo
;
const
isElementStyle
=
rule
.
domRule
.
type
=
=
=
ELEMENT_STYLE
;
const
filterCondition
=
pseudo
=
=
=
"
"
?
isStyleRule
|
|
isElementStyle
:
isPseudoElementRule
;
if
(
filterCondition
)
{
for
(
const
textProp
of
rule
.
textProps
.
slice
(
0
)
.
reverse
(
)
)
{
if
(
textProp
.
enabled
)
{
textProps
.
push
(
textProp
)
;
}
}
}
}
return
textProps
;
}
addNewDeclaration
(
ruleId
value
)
{
const
rule
=
this
.
getRule
(
ruleId
)
;
if
(
!
rule
)
{
return
;
}
const
declarationsToAdd
=
parseNamedDeclarations
(
this
.
cssProperties
.
isKnown
value
true
)
;
if
(
!
declarationsToAdd
.
length
)
{
return
;
}
this
.
_addMultipleDeclarations
(
rule
declarationsToAdd
)
;
}
async
addNewRule
(
)
{
await
this
.
pageStyle
.
addNewRule
(
this
.
element
this
.
element
.
pseudoClassLocks
)
;
}
async
modifyDeclarationName
(
ruleId
declarationId
name
)
{
const
rule
=
this
.
getRule
(
ruleId
)
;
if
(
!
rule
)
{
return
;
}
const
declaration
=
rule
.
getDeclaration
(
declarationId
)
;
if
(
!
declaration
|
|
declaration
.
name
=
=
=
name
)
{
return
;
}
const
declarations
=
parseDeclarations
(
this
.
cssProperties
.
isKnown
name
)
;
if
(
!
declarations
.
length
)
{
return
;
}
await
declaration
.
setName
(
declarations
[
0
]
.
name
)
;
if
(
!
declaration
.
enabled
)
{
await
declaration
.
setEnabled
(
true
)
;
}
}
_addMultipleDeclarations
(
rule
declarationsToAdd
siblingDeclaration
=
null
)
{
for
(
const
{
commentOffsets
name
value
priority
}
of
declarationsToAdd
)
{
const
isCommented
=
Boolean
(
commentOffsets
)
;
const
enabled
=
!
isCommented
;
siblingDeclaration
=
rule
.
createProperty
(
name
value
priority
enabled
siblingDeclaration
)
;
}
}
_getValueAndExtraProperties
(
value
)
{
let
firstValue
=
value
;
let
declarationsToAdd
=
[
]
;
const
declarations
=
parseDeclarations
(
this
.
cssProperties
.
isKnown
value
)
;
if
(
declarations
.
length
)
{
if
(
!
declarations
[
0
]
.
name
&
&
declarations
[
0
]
.
value
)
{
firstValue
=
declarations
[
0
]
.
value
;
declarationsToAdd
=
declarations
.
slice
(
1
)
;
}
else
if
(
declarations
[
0
]
.
name
&
&
declarations
[
0
]
.
value
)
{
firstValue
=
declarations
[
0
]
.
name
+
"
:
"
+
declarations
[
0
]
.
value
;
declarationsToAdd
=
declarations
.
slice
(
1
)
;
}
}
return
{
declarationsToAdd
firstValue
}
;
}
async
modifyDeclarationValue
(
ruleId
declarationId
value
)
{
const
rule
=
this
.
getRule
(
ruleId
)
;
if
(
!
rule
)
{
return
;
}
const
declaration
=
rule
.
getDeclaration
(
declarationId
)
;
if
(
!
declaration
)
{
return
;
}
const
{
declarationsToAdd
firstValue
}
=
this
.
_getValueAndExtraProperties
(
value
)
;
const
parsedValue
=
parseSingleValue
(
this
.
cssProperties
.
isKnown
firstValue
)
;
if
(
!
declarationsToAdd
.
length
&
&
declaration
.
value
=
=
=
parsedValue
.
value
&
&
declaration
.
priority
=
=
=
parsedValue
.
priority
)
{
return
;
}
await
declaration
.
setValue
(
parsedValue
.
value
parsedValue
.
priority
)
;
if
(
!
declaration
.
enabled
)
{
await
declaration
.
setEnabled
(
true
)
;
}
this
.
_addMultipleDeclarations
(
rule
declarationsToAdd
declaration
)
;
}
async
modifySelector
(
ruleId
selector
)
{
try
{
const
rule
=
this
.
getRule
(
ruleId
)
;
if
(
!
rule
)
{
return
;
}
const
response
=
await
rule
.
domRule
.
modifySelector
(
this
.
element
selector
)
;
const
{
ruleProps
isMatching
}
=
response
;
if
(
!
ruleProps
)
{
this
.
ruleView
.
emit
(
"
ruleview
-
invalid
-
selector
"
)
;
return
;
}
const
newRule
=
new
Rule
(
this
{
.
.
.
ruleProps
isUnmatched
:
!
isMatching
}
)
;
const
appliedStyles
=
await
this
.
pageStyle
.
getApplied
(
this
.
element
{
inherited
:
true
matchedSelectors
:
true
filter
:
this
.
showUserAgentStyles
?
"
ua
"
:
undefined
}
)
;
const
newIndex
=
appliedStyles
.
findIndex
(
r
=
>
r
.
rule
=
=
ruleProps
.
rule
)
;
const
oldIndex
=
this
.
rules
.
indexOf
(
rule
)
;
this
.
rules
.
splice
(
oldIndex
1
)
;
this
.
rules
.
splice
(
newIndex
=
=
=
-
1
?
oldIndex
:
newIndex
0
newRule
)
;
this
.
onRuleUpdated
(
)
;
if
(
newIndex
!
=
=
-
1
)
{
this
.
rules
.
splice
(
newIndex
1
)
;
this
.
rules
.
splice
(
oldIndex
0
newRule
)
;
}
this
.
_changed
(
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
toggleDeclaration
(
ruleId
declarationId
)
{
const
rule
=
this
.
getRule
(
ruleId
)
;
if
(
!
rule
)
{
return
;
}
const
declaration
=
rule
.
getDeclaration
(
declarationId
)
;
if
(
!
declaration
)
{
return
;
}
declaration
.
setEnabled
(
!
declaration
.
enabled
)
;
}
_updatePropertyOverridden
(
prop
)
{
let
overridden
=
true
;
let
dirty
=
false
;
for
(
const
computedProp
of
prop
.
computed
)
{
if
(
!
computedProp
.
overridden
)
{
overridden
=
false
;
}
dirty
=
computedProp
.
_overriddenDirty
|
|
dirty
;
delete
computedProp
.
_overriddenDirty
;
}
dirty
=
!
!
prop
.
overridden
!
=
=
overridden
|
|
dirty
;
prop
.
overridden
=
overridden
;
return
dirty
;
}
getVariableData
(
name
pseudo
=
"
"
)
{
const
variables
=
this
.
variablesMap
.
get
(
pseudo
)
;
const
startingStyleVariables
=
this
.
startingStyleVariablesMap
.
get
(
pseudo
)
;
const
registeredPropertiesMap
=
this
.
ruleView
.
getRegisteredPropertiesForSelectedNodeTarget
(
)
;
const
data
=
{
}
;
if
(
variables
?
.
has
(
name
)
)
{
const
{
declarationValue
computedValue
}
=
variables
.
get
(
name
)
;
data
.
value
=
declarationValue
;
data
.
computedValue
=
computedValue
;
}
if
(
startingStyleVariables
?
.
has
(
name
)
)
{
data
.
startingStyle
=
startingStyleVariables
.
get
(
name
)
;
}
if
(
registeredPropertiesMap
?
.
has
(
name
)
)
{
data
.
registeredProperty
=
registeredPropertiesMap
.
get
(
name
)
;
}
return
data
;
}
getAllCustomProperties
(
pseudo
=
"
"
)
{
const
customProperties
=
new
Map
(
)
;
for
(
const
[
key
{
computedValue
declarationValue
}
]
of
this
.
variablesMap
.
get
(
pseudo
)
)
{
customProperties
.
set
(
key
computedValue
?
?
declarationValue
)
;
}
const
startingStyleCustomProperties
=
this
.
startingStyleVariablesMap
.
get
(
pseudo
)
;
const
registeredPropertiesMap
=
this
.
ruleView
.
getRegisteredPropertiesForSelectedNodeTarget
(
)
;
if
(
(
!
registeredPropertiesMap
|
|
registeredPropertiesMap
.
size
=
=
=
0
)
&
&
(
!
startingStyleCustomProperties
|
|
startingStyleCustomProperties
.
size
=
=
=
0
)
)
{
return
customProperties
;
}
if
(
startingStyleCustomProperties
)
{
for
(
const
[
name
value
]
of
startingStyleCustomProperties
)
{
if
(
!
customProperties
.
has
(
name
)
)
{
customProperties
.
set
(
name
value
)
;
}
}
}
if
(
registeredPropertiesMap
)
{
for
(
const
[
name
propertyDefinition
]
of
registeredPropertiesMap
)
{
if
(
!
customProperties
.
has
(
name
)
)
{
customProperties
.
set
(
name
propertyDefinition
.
initialValue
)
;
}
}
}
return
customProperties
;
}
}
module
.
exports
=
ElementStyle
;
