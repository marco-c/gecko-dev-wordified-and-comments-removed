"
use
strict
"
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
const
CLASSES
=
new
WeakMap
(
)
;
class
ClassList
{
constructor
(
inspector
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
inspector
=
inspector
;
this
.
onMutations
=
this
.
onMutations
.
bind
(
this
)
;
this
.
inspector
.
on
(
"
markupmutation
"
this
.
onMutations
)
;
this
.
classListProxyNode
=
this
.
inspector
.
panelDoc
.
createElement
(
"
div
"
)
;
this
.
previewClasses
=
[
]
;
this
.
unresolvedStateChanges
=
[
]
;
}
destroy
(
)
{
this
.
inspector
.
off
(
"
markupmutation
"
this
.
onMutations
)
;
this
.
inspector
=
null
;
this
.
classListProxyNode
=
null
;
}
get
currentNode
(
)
{
if
(
this
.
inspector
.
selection
.
isElementNode
(
)
&
&
!
this
.
inspector
.
selection
.
isPseudoElementNode
(
)
)
{
return
this
.
inspector
.
selection
.
nodeFront
;
}
return
null
;
}
get
currentClasses
(
)
{
if
(
!
this
.
currentNode
)
{
return
[
]
;
}
if
(
!
CLASSES
.
has
(
this
.
currentNode
)
)
{
this
.
classListProxyNode
.
className
=
this
.
currentNode
.
className
;
const
nodeClasses
=
[
.
.
.
new
Set
(
[
.
.
.
this
.
classListProxyNode
.
classList
]
)
]
.
filter
(
className
=
>
!
this
.
previewClasses
.
some
(
previewClass
=
>
previewClass
.
className
=
=
=
className
&
&
!
previewClass
.
wasAppliedOnNode
)
)
.
map
(
name
=
>
{
return
{
name
isApplied
:
true
}
;
}
)
;
CLASSES
.
set
(
this
.
currentNode
nodeClasses
)
;
}
return
CLASSES
.
get
(
this
.
currentNode
)
;
}
get
currentClassesPreview
(
)
{
const
currentClasses
=
this
.
currentClasses
.
filter
(
(
{
isApplied
}
)
=
>
isApplied
)
.
map
(
(
{
name
}
)
=
>
name
)
;
const
previewClasses
=
this
.
previewClasses
.
filter
(
previewClass
=
>
!
currentClasses
.
includes
(
previewClass
.
className
)
)
.
filter
(
item
=
>
item
!
=
=
"
"
)
.
map
(
(
{
className
}
)
=
>
className
)
;
return
currentClasses
.
concat
(
previewClasses
)
.
join
(
"
"
)
.
trim
(
)
;
}
setClassState
(
name
isApplied
)
{
const
nodeClasses
=
this
.
currentClasses
;
nodeClasses
.
find
(
(
{
name
:
cName
}
)
=
>
cName
=
=
=
name
)
.
isApplied
=
isApplied
;
return
this
.
applyClassState
(
)
;
}
addClassName
(
classNameString
)
{
this
.
classListProxyNode
.
className
=
classNameString
;
this
.
eraseClassPreview
(
)
;
return
Promise
.
all
(
[
.
.
.
new
Set
(
[
.
.
.
this
.
classListProxyNode
.
classList
]
)
]
.
map
(
name
=
>
{
return
this
.
addClass
(
name
)
;
}
)
)
;
}
addClass
(
name
)
{
if
(
this
.
currentClasses
.
some
(
(
{
name
:
cName
}
)
=
>
cName
=
=
=
name
)
)
{
return
Promise
.
resolve
(
)
;
}
this
.
currentClasses
.
push
(
{
name
isApplied
:
true
}
)
;
return
this
.
applyClassState
(
)
;
}
applyClassState
(
)
{
if
(
!
this
.
currentNode
)
{
return
Promise
.
resolve
(
)
;
}
this
.
unresolvedStateChanges
.
push
(
{
node
:
this
.
currentNode
className
:
this
.
currentClassesPreview
}
)
;
const
mod
=
this
.
currentNode
.
startModifyingAttributes
(
)
;
mod
.
setAttribute
(
"
class
"
this
.
currentClassesPreview
)
;
return
mod
.
apply
(
)
;
}
onMutations
(
mutations
)
{
for
(
const
{
type
target
attributeName
}
of
mutations
)
{
if
(
type
!
=
=
"
attributes
"
|
|
attributeName
!
=
=
"
class
"
)
{
continue
;
}
const
isMutationForOurChange
=
this
.
unresolvedStateChanges
.
some
(
previousStateChange
=
>
previousStateChange
.
node
=
=
=
target
&
&
previousStateChange
.
className
=
=
=
target
.
className
)
;
if
(
!
isMutationForOurChange
)
{
CLASSES
.
delete
(
target
)
;
if
(
target
=
=
=
this
.
currentNode
)
{
this
.
emit
(
"
current
-
node
-
class
-
changed
"
)
;
}
}
else
{
this
.
removeResolvedStateChanged
(
target
target
.
className
)
;
}
}
}
getClassNames
(
filter
)
{
return
this
.
currentNode
.
inspectorFront
.
pageStyle
.
getAttributesInOwnerDocument
(
filter
"
class
"
this
.
currentNode
)
;
}
previewClass
(
inputClasses
)
{
if
(
this
.
previewClasses
.
map
(
previewClass
=
>
previewClass
.
className
)
.
join
(
"
"
)
!
=
=
inputClasses
)
{
this
.
previewClasses
=
[
]
;
inputClasses
.
split
(
"
"
)
.
forEach
(
className
=
>
{
this
.
previewClasses
.
push
(
{
className
wasAppliedOnNode
:
this
.
isClassAlreadyApplied
(
className
)
}
)
;
}
)
;
this
.
applyClassState
(
)
;
}
}
eraseClassPreview
(
)
{
this
.
previewClass
(
"
"
)
;
}
removeResolvedStateChanged
(
currentNode
currentClassesPreview
)
{
this
.
unresolvedStateChanges
.
splice
(
0
this
.
unresolvedStateChanges
.
findIndex
(
previousState
=
>
previousState
.
node
=
=
=
currentNode
&
&
previousState
.
className
=
=
=
currentClassesPreview
)
+
1
)
;
}
isClassAlreadyApplied
(
className
)
{
return
this
.
currentClasses
.
some
(
(
{
name
}
)
=
>
name
=
=
=
className
)
;
}
}
module
.
exports
=
ClassList
;
