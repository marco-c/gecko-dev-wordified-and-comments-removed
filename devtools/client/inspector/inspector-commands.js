"
use
strict
"
;
const
l10n
=
require
(
"
gcli
/
l10n
"
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
{
HighlighterEnvironment
}
=
require
(
"
devtools
/
server
/
actors
/
highlighters
"
)
;
const
{
EyeDropper
}
=
require
(
"
devtools
/
server
/
actors
/
highlighters
/
eye
-
dropper
"
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
TELEMETRY_EYEDROPPER_OPENED
=
"
DEVTOOLS_EYEDROPPER_OPENED_COUNT
"
;
const
TELEMETRY_EYEDROPPER_OPENED_MENU
=
"
DEVTOOLS_MENU_EYEDROPPER_OPENED_COUNT
"
;
const
windowEyeDroppers
=
new
WeakMap
(
)
;
exports
.
items
=
[
{
item
:
"
command
"
runAt
:
"
client
"
name
:
"
inspect
"
description
:
l10n
.
lookup
(
"
inspectDesc
"
)
manual
:
l10n
.
lookup
(
"
inspectManual
"
)
params
:
[
{
name
:
"
selector
"
type
:
"
string
"
description
:
l10n
.
lookup
(
"
inspectNodeDesc
"
)
manual
:
l10n
.
lookup
(
"
inspectNodeManual
"
)
}
]
exec
:
async
function
(
args
context
)
{
let
target
=
context
.
environment
.
target
;
let
toolbox
=
await
gDevTools
.
showToolbox
(
target
"
inspector
"
)
;
let
walker
=
toolbox
.
getCurrentPanel
(
)
.
walker
;
let
rootNode
=
await
walker
.
getRootNode
(
)
;
let
nodeFront
=
await
walker
.
querySelector
(
rootNode
args
.
selector
)
;
toolbox
.
getCurrentPanel
(
)
.
selection
.
setNodeFront
(
nodeFront
{
reason
:
"
gcli
"
}
)
;
}
}
{
item
:
"
command
"
runAt
:
"
client
"
name
:
"
eyedropper
"
description
:
l10n
.
lookup
(
"
eyedropperDesc
"
)
manual
:
l10n
.
lookup
(
"
eyedropperManual
"
)
params
:
[
{
group
:
"
hiddengroup
"
params
:
[
{
name
:
"
frommenu
"
type
:
"
boolean
"
hidden
:
true
}
{
name
:
"
hide
"
type
:
"
boolean
"
hidden
:
true
}
]
}
]
exec
:
async
function
(
args
context
)
{
if
(
args
.
hide
)
{
context
.
updateExec
(
"
eyedropper_server_hide
"
)
.
catch
(
console
.
error
)
;
return
;
}
let
target
=
context
.
environment
.
target
;
let
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
if
(
toolbox
)
{
let
inspector
=
toolbox
.
getPanel
(
"
inspector
"
)
;
if
(
inspector
)
{
await
inspector
.
hideEyeDropper
(
)
;
}
}
let
telemetry
=
new
Telemetry
(
)
;
if
(
args
.
frommenu
)
{
telemetry
.
getHistogramById
(
TELEMETRY_EYEDROPPER_OPENED_MENU
)
.
add
(
true
)
;
}
else
{
telemetry
.
getHistogramById
(
TELEMETRY_EYEDROPPER_OPENED
)
.
add
(
true
)
;
}
context
.
updateExec
(
"
eyedropper_server
"
)
.
catch
(
console
.
error
)
;
}
}
{
item
:
"
command
"
runAt
:
"
server
"
name
:
"
eyedropper_server
"
hidden
:
true
exec
:
function
(
args
{
environment
}
)
{
let
eyeDropper
=
windowEyeDroppers
.
get
(
environment
.
window
)
;
if
(
!
eyeDropper
)
{
let
env
=
new
HighlighterEnvironment
(
)
;
env
.
initFromWindow
(
environment
.
window
)
;
eyeDropper
=
new
EyeDropper
(
env
)
;
eyeDropper
.
once
(
"
hidden
"
(
)
=
>
{
eyeDropper
.
destroy
(
)
;
env
.
destroy
(
)
;
windowEyeDroppers
.
delete
(
environment
.
window
)
;
}
)
;
windowEyeDroppers
.
set
(
environment
.
window
eyeDropper
)
;
}
eyeDropper
.
show
(
environment
.
document
.
documentElement
{
copyOnSelect
:
true
}
)
;
}
}
{
item
:
"
command
"
runAt
:
"
server
"
name
:
"
eyedropper_server_hide
"
hidden
:
true
exec
:
function
(
args
{
environment
}
)
{
let
eyeDropper
=
windowEyeDroppers
.
get
(
environment
.
window
)
;
if
(
eyeDropper
)
{
eyeDropper
.
hide
(
)
;
}
}
}
]
;
