"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
RemoteSettings
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
{
}
)
;
const
TARGET_BROWSER_ID
=
[
"
firefox
"
"
firefox_android
"
"
chrome
"
"
chrome_android
"
"
safari
"
"
safari_ios
"
"
edge
"
"
ie
"
]
;
const
TARGET_BROWSER_STATUS
=
[
"
esr
"
"
current
"
"
beta
"
"
nightly
"
]
;
const
TARGET_BROWSER_PREF
=
"
devtools
.
inspector
.
compatibility
.
target
-
browsers
"
;
async
function
getDefaultTargetBrowsers
(
)
{
const
records
=
await
RemoteSettings
(
"
devtools
-
compatibility
-
browsers
"
{
filterFunc
:
record
=
>
{
if
(
!
TARGET_BROWSER_ID
.
includes
(
record
.
browserid
)
|
|
!
TARGET_BROWSER_STATUS
.
includes
(
record
.
status
)
)
{
return
null
;
}
return
{
id
:
record
.
browserid
name
:
record
.
name
version
:
record
.
version
status
:
record
.
status
}
;
}
}
)
.
get
(
)
;
const
numericCollator
=
new
Intl
.
Collator
(
[
]
{
numeric
:
true
}
)
;
records
.
sort
(
(
a
b
)
=
>
{
if
(
a
.
id
=
=
b
.
id
)
{
return
numericCollator
.
compare
(
a
.
version
b
.
version
)
;
}
return
a
.
id
>
b
.
id
?
1
:
-
1
;
}
)
;
return
records
.
filter
(
(
record
index
arr
)
=
>
{
const
nextRecord
=
arr
[
index
+
1
]
;
if
(
nextRecord
&
&
record
.
id
=
=
=
nextRecord
.
id
&
&
record
.
status
=
=
=
nextRecord
.
status
)
{
return
false
;
}
return
true
;
}
)
;
}
async
function
getTargetBrowsers
(
)
{
const
targetsString
=
Services
.
prefs
.
getCharPref
(
TARGET_BROWSER_PREF
"
"
)
;
return
targetsString
?
JSON
.
parse
(
targetsString
)
:
getDefaultTargetBrowsers
(
)
;
}
function
setTargetBrowsers
(
targets
)
{
Services
.
prefs
.
setCharPref
(
TARGET_BROWSER_PREF
JSON
.
stringify
(
targets
)
)
;
}
module
.
exports
=
{
getDefaultTargetBrowsers
getTargetBrowsers
setTargetBrowsers
}
;
