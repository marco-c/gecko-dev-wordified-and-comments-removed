"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
loader
.
lazyRequireGetter
(
this
"
browsersDataset
"
"
devtools
/
shared
/
compatibility
/
dataset
/
browsers
.
json
"
)
;
const
TARGET_BROWSER_ID
=
[
"
firefox
"
"
firefox_android
"
"
chrome
"
"
chrome_android
"
"
safari
"
"
safari_ios
"
"
edge
"
"
ie
"
]
;
const
TARGET_BROWSER_STATUS
=
[
"
esr
"
"
current
"
"
beta
"
"
nightly
"
]
;
const
TARGET_BROWSER_PREF
=
"
devtools
.
inspector
.
compatibility
.
target
-
browsers
"
;
function
getDefaultTargetBrowsers
(
)
{
const
targets
=
[
]
;
for
(
const
id
of
TARGET_BROWSER_ID
)
{
const
{
name
releases
}
=
browsersDataset
[
id
]
;
for
(
const
version
in
releases
)
{
const
{
status
}
=
releases
[
version
]
;
if
(
!
TARGET_BROWSER_STATUS
.
includes
(
status
)
)
{
continue
;
}
const
target
=
{
id
name
version
status
}
;
const
index
=
targets
.
findIndex
(
t
=
>
target
.
id
=
=
=
t
.
id
&
&
target
.
status
=
=
=
t
.
status
)
;
if
(
index
<
0
)
{
targets
.
push
(
target
)
;
continue
;
}
const
existingTarget
=
targets
[
index
]
;
if
(
parseFloat
(
existingTarget
.
version
)
<
parseFloat
(
target
.
version
)
)
{
targets
[
index
]
=
target
;
}
}
}
return
targets
;
}
function
getTargetBrowsers
(
)
{
const
targetsString
=
Services
.
prefs
.
getCharPref
(
TARGET_BROWSER_PREF
"
"
)
;
return
targetsString
?
JSON
.
parse
(
targetsString
)
:
getDefaultTargetBrowsers
(
)
;
}
function
setTargetBrowsers
(
targets
)
{
Services
.
prefs
.
setCharPref
(
TARGET_BROWSER_PREF
JSON
.
stringify
(
targets
)
)
;
}
module
.
exports
=
{
getDefaultTargetBrowsers
getTargetBrowsers
setTargetBrowsers
}
;
