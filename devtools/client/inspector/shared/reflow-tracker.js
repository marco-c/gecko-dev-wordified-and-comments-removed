"
use
strict
"
;
function
ReflowTracker
(
target
)
{
this
.
target
=
target
;
this
.
listeners
=
new
Map
(
)
;
this
.
reflowFront
=
null
;
this
.
onReflow
=
this
.
onReflow
.
bind
(
this
)
;
}
ReflowTracker
.
prototype
=
{
destroy
(
)
{
if
(
this
.
reflowFront
)
{
this
.
stopTracking
(
)
;
this
.
reflowFront
.
destroy
(
)
;
this
.
reflowFront
=
null
;
}
this
.
listeners
.
clear
(
)
;
}
async
startTracking
(
)
{
if
(
!
this
.
reflowFront
&
&
this
.
target
.
form
.
reflowActor
)
{
this
.
reflowFront
=
await
this
.
target
.
getFront
(
"
reflow
"
)
;
}
if
(
this
.
reflowFront
)
{
this
.
reflowFront
.
on
(
"
reflows
"
this
.
onReflow
)
;
this
.
reflowFront
.
start
(
)
;
}
}
stopTracking
(
)
{
if
(
this
.
reflowFront
)
{
this
.
reflowFront
.
off
(
"
reflows
"
this
.
onReflow
)
;
this
.
reflowFront
.
stop
(
)
;
}
}
trackReflows
(
listener
callback
)
{
if
(
this
.
listeners
.
get
(
listener
)
=
=
=
callback
)
{
return
;
}
if
(
this
.
listeners
.
size
=
=
=
0
)
{
this
.
startTracking
(
)
;
}
this
.
listeners
.
set
(
listener
callback
)
;
}
untrackReflows
(
listener
callback
)
{
if
(
this
.
listeners
.
get
(
listener
)
!
=
=
callback
)
{
return
;
}
this
.
listeners
.
delete
(
listener
)
;
if
(
this
.
listeners
.
size
=
=
=
0
)
{
this
.
stopTracking
(
)
;
}
}
onReflow
(
)
{
for
(
const
[
callback
]
of
this
.
listeners
)
{
callback
(
)
;
}
}
}
;
module
.
exports
=
ReflowTracker
;
