"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
class
InspectorStyleChangeTracker
{
constructor
(
inspector
)
{
this
.
inspector
=
inspector
;
this
.
selection
=
inspector
.
selection
;
this
.
onMutations
=
this
.
onMutations
.
bind
(
this
)
;
this
.
onResized
=
this
.
onResized
.
bind
(
this
)
;
this
.
onTargetAvailable
=
this
.
onTargetAvailable
.
bind
(
this
)
;
this
.
onTargetDestroyed
=
this
.
onTargetDestroyed
.
bind
(
this
)
;
this
.
init
(
)
;
EventEmitter
.
decorate
(
this
)
;
}
init
(
)
{
this
.
inspector
.
toolbox
.
targetList
.
watchTargets
(
[
this
.
inspector
.
toolbox
.
targetList
.
TYPES
.
FRAME
]
this
.
onTargetAvailable
this
.
onTargetDestroyed
)
;
}
destroy
(
)
{
this
.
inspector
.
toolbox
.
targetList
.
unwatchTargets
(
[
this
.
inspector
.
toolbox
.
targetList
.
TYPES
.
FRAME
]
this
.
onTargetAvailable
this
.
onTargetDestroyed
)
;
const
targets
=
this
.
inspector
.
toolbox
.
targetList
.
getAllTargets
(
this
.
inspector
.
toolbox
.
targetList
.
TYPES
.
FRAME
)
;
for
(
const
target
of
targets
)
{
this
.
onTargetDestroyed
(
this
.
inspector
.
toolbox
.
targetList
.
TYPES
.
FRAME
target
)
;
}
this
.
inspector
=
null
;
this
.
selection
=
null
;
}
onMutations
(
mutations
)
{
const
canMutationImpactCurrentStyles
=
(
{
type
target
:
mutationTarget
}
)
=
>
{
if
(
type
!
=
=
"
attributes
"
)
{
return
false
;
}
const
currentNode
=
this
.
selection
.
nodeFront
;
if
(
mutationTarget
=
=
=
currentNode
)
{
return
true
;
}
let
parent
=
currentNode
.
parentNode
(
)
;
const
siblings
=
parent
.
treeChildren
(
)
;
if
(
siblings
.
includes
(
mutationTarget
)
)
{
return
true
;
}
while
(
parent
)
{
if
(
mutationTarget
=
=
=
parent
)
{
return
true
;
}
parent
=
parent
.
parentNode
(
)
;
}
return
false
;
}
;
for
(
const
mutation
of
mutations
)
{
if
(
canMutationImpactCurrentStyles
(
mutation
)
)
{
this
.
emit
(
"
style
-
changed
"
)
;
break
;
}
}
}
onResized
(
)
{
this
.
emit
(
"
style
-
changed
"
)
;
}
async
onTargetAvailable
(
type
targetFront
isTopLevel
)
{
const
inspectorFront
=
await
targetFront
.
getFront
(
"
inspector
"
)
;
const
{
walker
}
=
inspectorFront
;
walker
.
on
(
"
mutations
"
this
.
onMutations
)
;
walker
.
on
(
"
resize
"
this
.
onResized
)
;
}
onTargetDestroyed
(
type
targetFront
isTopLevel
)
{
const
inspectorFront
=
targetFront
.
getCachedFront
(
"
inspector
"
)
;
if
(
inspectorFront
)
{
const
{
walker
}
=
inspectorFront
;
walker
.
off
(
"
mutations
"
this
.
onMutations
)
;
walker
.
off
(
"
resize
"
this
.
onResized
)
;
}
}
}
module
.
exports
=
InspectorStyleChangeTracker
;
