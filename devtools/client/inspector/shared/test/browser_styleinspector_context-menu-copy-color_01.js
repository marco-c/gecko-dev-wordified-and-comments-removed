"
use
strict
"
;
const
TEST_URI
=
<
div
style
=
"
color
:
rgb
(
18
58
188
)
;
margin
:
0px
;
background
:
span
[
data
-
color
]
;
"
>
Test
"
Copy
color
"
context
menu
option
<
/
div
>
;
add_task
(
async
function
(
)
{
requestLongerTimeout
(
2
)
;
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
const
{
inspector
}
=
await
openInspector
(
)
;
await
testView
(
"
ruleview
"
inspector
)
;
await
testView
(
"
computedview
"
inspector
)
;
}
)
;
async
function
testView
(
viewId
inspector
)
{
info
(
"
Testing
"
+
viewId
)
;
await
inspector
.
sidebar
.
select
(
viewId
)
;
const
view
=
inspector
.
getPanel
(
viewId
)
.
view
|
|
inspector
.
getPanel
(
viewId
)
.
computedView
;
await
selectNode
(
"
div
"
inspector
)
;
testIsColorValueNode
(
view
)
;
testIsColorPopupOnAllNodes
(
view
)
;
await
clearCurrentNodeSelection
(
inspector
)
;
}
function
testIsColorValueNode
(
view
)
{
info
(
"
Testing
that
child
nodes
of
color
nodes
are
detected
.
"
)
;
const
root
=
rootElement
(
view
)
;
const
colorNode
=
root
.
querySelector
(
"
span
[
data
-
color
]
"
)
;
ok
(
colorNode
"
Color
node
found
"
)
;
for
(
const
node
of
iterateNodes
(
colorNode
)
)
{
ok
(
isColorValueNode
(
node
)
"
Node
is
part
of
color
value
.
"
)
;
}
}
function
testIsColorPopupOnAllNodes
(
view
)
{
const
root
=
rootElement
(
view
)
;
for
(
const
node
of
iterateNodes
(
root
)
)
{
testIsColorPopupOnNode
(
view
node
)
;
}
}
function
testIsColorPopupOnNode
(
view
node
)
{
info
(
"
Testing
node
"
+
node
)
;
view
.
styleDocument
.
popupNode
=
node
;
view
.
contextMenu
.
_colorToCopy
=
"
"
;
const
result
=
view
.
contextMenu
.
_isColorPopup
(
)
;
const
correct
=
isColorValueNode
(
node
)
;
is
(
result
correct
"
_isColorPopup
returned
the
expected
value
"
+
correct
)
;
is
(
view
.
contextMenu
.
_colorToCopy
correct
?
"
rgb
(
18
58
188
)
"
:
"
"
"
_colorToCopy
was
set
to
the
expected
value
"
)
;
}
function
isColorValueNode
(
node
)
{
let
container
=
node
.
nodeType
=
=
node
.
TEXT_NODE
?
node
.
parentElement
:
node
;
const
isColorNode
=
el
=
>
el
.
dataset
&
&
"
color
"
in
el
.
dataset
;
while
(
!
isColorNode
(
container
)
)
{
container
=
container
.
parentNode
;
if
(
!
container
)
{
info
(
"
No
color
.
Node
is
not
part
of
color
value
.
"
)
;
return
false
;
}
}
info
(
"
Found
a
color
.
Node
is
part
of
color
value
.
"
)
;
return
true
;
}
function
*
iterateNodes
(
baseNode
)
{
yield
baseNode
;
for
(
const
child
of
baseNode
.
childNodes
)
{
yield
*
iterateNodes
(
child
)
;
}
}
var
rootElement
=
view
=
>
(
view
.
element
?
view
.
element
:
view
.
styleDocument
)
;
