"
use
strict
"
;
addMessageListener
(
"
Test
:
GetRulePropertyValue
"
function
(
msg
)
{
const
{
name
styleSheetIndex
ruleIndex
}
=
msg
.
data
;
let
value
=
null
;
dumpn
(
"
Getting
the
value
for
property
name
"
+
name
+
"
in
sheet
"
+
styleSheetIndex
+
"
and
rule
"
+
ruleIndex
)
;
const
sheet
=
content
.
document
.
styleSheets
[
styleSheetIndex
]
;
if
(
sheet
)
{
const
rule
=
sheet
.
cssRules
[
ruleIndex
]
;
if
(
rule
)
{
value
=
rule
.
style
.
getPropertyValue
(
name
)
;
}
}
sendAsyncMessage
(
"
Test
:
GetRulePropertyValue
"
value
)
;
}
)
;
addMessageListener
(
"
Test
:
GetComputedStylePropertyValue
"
function
(
msg
)
{
const
{
selector
pseudo
name
}
=
msg
.
data
;
const
doc
=
content
.
document
;
const
element
=
doc
.
querySelector
(
selector
)
;
const
value
=
content
.
getComputedStyle
(
element
pseudo
)
.
getPropertyValue
(
name
)
;
sendAsyncMessage
(
"
Test
:
GetComputedStylePropertyValue
"
value
)
;
}
)
;
addMessageListener
(
"
Test
:
WaitForComputedStylePropertyValue
"
function
(
msg
)
{
const
{
selector
pseudo
name
expected
}
=
msg
.
data
;
const
element
=
content
.
document
.
querySelector
(
selector
)
;
waitForSuccess
(
(
)
=
>
{
const
value
=
content
.
document
.
defaultView
.
getComputedStyle
(
element
pseudo
)
.
getPropertyValue
(
name
)
;
return
value
=
=
=
expected
;
}
)
.
then
(
(
)
=
>
{
sendAsyncMessage
(
"
Test
:
WaitForComputedStylePropertyValue
"
)
;
}
)
;
}
)
;
var
dumpn
=
msg
=
>
dump
(
msg
+
"
\
n
"
)
;
function
waitForSuccess
(
validatorFn
name
=
"
untitled
"
)
{
return
new
Promise
(
resolve
=
>
{
function
wait
(
fn
)
{
if
(
fn
(
)
)
{
resolve
(
)
;
}
else
{
setTimeout
(
(
)
=
>
wait
(
fn
)
200
)
;
}
}
wait
(
validatorFn
)
;
}
)
;
}
