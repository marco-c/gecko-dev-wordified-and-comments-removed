"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
head
.
js
"
this
)
;
var
{
getInplaceEditorForSpan
:
inplaceEditor
}
=
require
(
"
devtools
/
client
/
shared
/
inplace
-
editor
"
)
;
const
{
getColor
:
getThemeColor
}
=
require
(
"
devtools
/
client
/
shared
/
theme
"
)
;
const
TEST_URL_ROOT
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
inspector
/
shared
/
test
/
"
;
const
TEST_URL_ROOT_SSL
=
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
inspector
/
shared
/
test
/
"
;
const
ROOT_TEST_DIR
=
getRootDirectory
(
gTestPath
)
;
const
FRAME_SCRIPT_URL
=
ROOT_TEST_DIR
+
"
doc_frame_script
.
js
"
;
const
STYLE_INSPECTOR_L10N
=
new
LocalizationHelper
(
"
devtools
/
shared
/
locales
/
styleinspector
.
properties
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
defaultColorUnit
"
)
;
}
)
;
var
_addTab
=
addTab
;
addTab
=
function
(
url
)
{
return
_addTab
(
url
)
.
then
(
tab
=
>
{
info
(
"
Loading
the
helper
frame
script
"
+
FRAME_SCRIPT_URL
)
;
let
browser
=
tab
.
linkedBrowser
;
browser
.
messageManager
.
loadFrameScript
(
FRAME_SCRIPT_URL
false
)
;
return
tab
;
}
)
;
}
;
function
waitForContentMessage
(
name
)
{
info
(
"
Expecting
message
"
+
name
+
"
from
content
"
)
;
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
let
def
=
defer
(
)
;
mm
.
addMessageListener
(
name
function
onMessage
(
msg
)
{
mm
.
removeMessageListener
(
name
onMessage
)
;
def
.
resolve
(
msg
.
data
)
;
}
)
;
return
def
.
promise
;
}
function
executeInContent
(
name
data
=
{
}
objects
=
{
}
expectResponse
=
true
)
{
info
(
"
Sending
message
"
+
name
+
"
to
content
"
)
;
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
mm
.
sendAsyncMessage
(
name
data
objects
)
;
if
(
expectResponse
)
{
return
waitForContentMessage
(
name
)
;
}
return
promise
.
resolve
(
)
;
}
function
*
getComputedStyleProperty
(
selector
pseudo
propName
)
{
return
yield
executeInContent
(
"
Test
:
GetComputedStylePropertyValue
"
{
selector
pseudo
name
:
propName
}
)
;
}
function
*
waitForComputedStyleProperty
(
selector
pseudo
name
expected
)
{
return
yield
executeInContent
(
"
Test
:
WaitForComputedStylePropertyValue
"
{
selector
pseudo
expected
name
}
)
;
}
var
focusEditableField
=
Task
.
async
(
function
*
(
ruleView
editable
xOffset
=
1
yOffset
=
1
options
=
{
}
)
{
let
onFocus
=
once
(
editable
.
parentNode
"
focus
"
true
)
;
info
(
"
Clicking
on
editable
field
to
turn
to
edit
mode
"
)
;
EventUtils
.
synthesizeMouse
(
editable
xOffset
yOffset
options
editable
.
ownerDocument
.
defaultView
)
;
yield
onFocus
;
info
(
"
Editable
field
gained
focus
returning
the
input
field
now
"
)
;
let
onEdit
=
inplaceEditor
(
editable
.
ownerDocument
.
activeElement
)
;
return
onEdit
;
}
)
;
function
waitForSuccess
(
validatorFn
name
=
"
untitled
"
)
{
let
def
=
defer
(
)
;
function
wait
(
validator
)
{
if
(
validator
(
)
)
{
ok
(
true
"
Validator
function
"
+
name
+
"
returned
true
"
)
;
def
.
resolve
(
)
;
}
else
{
setTimeout
(
(
)
=
>
wait
(
validator
)
200
)
;
}
}
wait
(
validatorFn
)
;
return
def
.
promise
;
}
var
getFontFamilyDataURL
=
Task
.
async
(
function
*
(
font
nodeFront
)
{
let
fillStyle
=
getThemeColor
(
"
body
-
color
"
)
;
let
{
data
}
=
yield
nodeFront
.
getFontFamilyDataURL
(
font
fillStyle
)
;
let
dataURL
=
yield
data
.
string
(
)
;
return
dataURL
;
}
)
;
function
getRuleViewRule
(
view
selectorText
)
{
let
rule
;
for
(
let
r
of
view
.
styleDocument
.
querySelectorAll
(
"
.
ruleview
-
rule
"
)
)
{
let
selector
=
r
.
querySelector
(
"
.
ruleview
-
selectorcontainer
"
+
"
.
ruleview
-
selector
-
matched
"
)
;
if
(
selector
&
&
selector
.
textContent
=
=
=
selectorText
)
{
rule
=
r
;
break
;
}
}
return
rule
;
}
function
getRuleViewProperty
(
view
selectorText
propertyName
)
{
let
prop
;
let
rule
=
getRuleViewRule
(
view
selectorText
)
;
if
(
rule
)
{
for
(
let
p
of
rule
.
querySelectorAll
(
"
.
ruleview
-
property
"
)
)
{
let
nameSpan
=
p
.
querySelector
(
"
.
ruleview
-
propertyname
"
)
;
let
valueSpan
=
p
.
querySelector
(
"
.
ruleview
-
propertyvalue
"
)
;
if
(
nameSpan
.
textContent
=
=
=
propertyName
)
{
prop
=
{
nameSpan
:
nameSpan
valueSpan
:
valueSpan
}
;
break
;
}
}
}
return
prop
;
}
function
getRuleViewPropertyValue
(
view
selectorText
propertyName
)
{
return
getRuleViewProperty
(
view
selectorText
propertyName
)
.
valueSpan
.
textContent
;
}
function
getRuleViewSelector
(
view
selectorText
)
{
let
rule
=
getRuleViewRule
(
view
selectorText
)
;
return
rule
.
querySelector
(
"
.
ruleview
-
selector
.
ruleview
-
selector
-
matched
"
)
;
}
function
getRuleViewSelectorHighlighterIcon
(
view
selectorText
)
{
let
rule
=
getRuleViewRule
(
view
selectorText
)
;
return
rule
.
querySelector
(
"
.
ruleview
-
selectorhighlighter
"
)
;
}
var
simulateColorPickerChange
=
Task
.
async
(
function
*
(
ruleView
colorPicker
newRgba
expectedChange
)
{
let
onRuleViewChanged
=
ruleView
.
once
(
"
ruleview
-
changed
"
)
;
info
(
"
Getting
the
spectrum
colorpicker
object
"
)
;
let
spectrum
=
yield
colorPicker
.
spectrum
;
info
(
"
Setting
the
new
color
"
)
;
spectrum
.
rgb
=
newRgba
;
info
(
"
Applying
the
change
"
)
;
spectrum
.
updateUI
(
)
;
spectrum
.
onChange
(
)
;
info
(
"
Waiting
for
rule
-
view
to
update
"
)
;
yield
onRuleViewChanged
;
if
(
expectedChange
)
{
info
(
"
Waiting
for
the
style
to
be
applied
on
the
page
"
)
;
yield
waitForSuccess
(
(
)
=
>
{
let
{
element
name
value
}
=
expectedChange
;
return
content
.
getComputedStyle
(
element
)
[
name
]
=
=
=
value
;
}
"
Color
picker
change
applied
on
the
page
"
)
;
}
}
)
;
function
getRuleViewLinkByIndex
(
view
index
)
{
let
links
=
view
.
styleDocument
.
querySelectorAll
(
"
.
ruleview
-
rule
-
source
"
)
;
return
links
[
index
]
;
}
function
getRuleViewLinkTextByIndex
(
view
index
)
{
let
link
=
getRuleViewLinkByIndex
(
view
index
)
;
return
link
.
querySelector
(
"
.
ruleview
-
rule
-
source
-
label
"
)
.
textContent
;
}
var
focusNewRuleViewProperty
=
Task
.
async
(
function
*
(
ruleEditor
)
{
info
(
"
Clicking
on
a
close
ruleEditor
brace
to
start
editing
a
new
property
"
)
;
ruleEditor
.
closeBrace
.
scrollIntoView
(
)
;
let
editor
=
yield
focusEditableField
(
ruleEditor
.
ruleView
ruleEditor
.
closeBrace
)
;
is
(
inplaceEditor
(
ruleEditor
.
newPropSpan
)
editor
"
Focused
editor
is
the
new
property
editor
.
"
)
;
return
editor
;
}
)
;
var
createNewRuleViewProperty
=
Task
.
async
(
function
*
(
ruleEditor
inputValue
)
{
info
(
"
Creating
a
new
property
editor
"
)
;
let
editor
=
yield
focusNewRuleViewProperty
(
ruleEditor
)
;
info
(
"
Entering
the
value
"
+
inputValue
)
;
editor
.
input
.
value
=
inputValue
;
info
(
"
Submitting
the
new
value
and
waiting
for
value
field
focus
"
)
;
let
onFocus
=
once
(
ruleEditor
.
element
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
ruleEditor
.
element
.
ownerDocument
.
defaultView
)
;
yield
onFocus
;
}
)
;
var
setSearchFilter
=
Task
.
async
(
function
*
(
view
searchValue
)
{
info
(
"
Setting
filter
text
to
\
"
"
+
searchValue
+
"
\
"
"
)
;
let
win
=
view
.
styleWindow
;
let
searchField
=
view
.
searchField
;
searchField
.
focus
(
)
;
synthesizeKeys
(
searchValue
win
)
;
yield
view
.
inspector
.
once
(
"
ruleview
-
filtered
"
)
;
}
)
;
function
getComputedViewProperty
(
view
name
)
{
let
prop
;
for
(
let
property
of
view
.
styleDocument
.
querySelectorAll
(
"
.
property
-
view
"
)
)
{
let
nameSpan
=
property
.
querySelector
(
"
.
property
-
name
"
)
;
let
valueSpan
=
property
.
querySelector
(
"
.
property
-
value
"
)
;
if
(
nameSpan
.
textContent
=
=
=
name
)
{
prop
=
{
nameSpan
:
nameSpan
valueSpan
:
valueSpan
}
;
break
;
}
}
return
prop
;
}
function
getComputedViewPropertyValue
(
view
name
propertyName
)
{
return
getComputedViewProperty
(
view
name
propertyName
)
.
valueSpan
.
textContent
;
}
function
openStyleContextMenuAndGetAllItems
(
view
target
)
{
let
menu
=
view
.
_contextmenu
.
_openMenu
(
{
target
:
target
}
)
;
let
allItems
=
[
]
.
concat
.
apply
(
[
]
menu
.
items
.
map
(
function
addItem
(
item
)
{
if
(
item
.
submenu
)
{
return
addItem
(
item
.
submenu
.
items
)
;
}
return
item
;
}
)
)
;
return
allItems
;
}
