"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
VIEW_NODE_SELECTOR_TYPE
VIEW_NODE_PROPERTY_TYPE
VIEW_NODE_VALUE_TYPE
VIEW_NODE_IMAGE_URL_TYPE
VIEW_NODE_LOCATION_TYPE
}
=
require
(
"
devtools
/
client
/
inspector
/
shared
/
node
-
types
"
)
;
loader
.
lazyRequireGetter
(
this
"
Menu
"
"
devtools
/
client
/
framework
/
menu
"
)
;
loader
.
lazyRequireGetter
(
this
"
MenuItem
"
"
devtools
/
client
/
framework
/
menu
-
item
"
)
;
loader
.
lazyRequireGetter
(
this
"
clipboardHelper
"
"
devtools
/
shared
/
platform
/
clipboard
"
)
;
const
STYLE_INSPECTOR_PROPERTIES
=
"
devtools
/
shared
/
locales
/
styleinspector
.
properties
"
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
STYLE_INSPECTOR_L10N
=
new
LocalizationHelper
(
STYLE_INSPECTOR_PROPERTIES
)
;
const
PREF_ORIG_SOURCES
=
"
devtools
.
source
-
map
.
client
-
service
.
enabled
"
;
function
StyleInspectorMenu
(
view
options
)
{
this
.
view
=
view
;
this
.
inspector
=
this
.
view
.
inspector
;
this
.
styleDocument
=
this
.
view
.
styleDocument
;
this
.
styleWindow
=
this
.
view
.
styleWindow
;
this
.
isRuleView
=
options
.
isRuleView
;
this
.
_onAddNewRule
=
this
.
_onAddNewRule
.
bind
(
this
)
;
this
.
_onCopy
=
this
.
_onCopy
.
bind
(
this
)
;
this
.
_onCopyColor
=
this
.
_onCopyColor
.
bind
(
this
)
;
this
.
_onCopyImageDataUrl
=
this
.
_onCopyImageDataUrl
.
bind
(
this
)
;
this
.
_onCopyLocation
=
this
.
_onCopyLocation
.
bind
(
this
)
;
this
.
_onCopyDeclaration
=
this
.
_onCopyDeclaration
.
bind
(
this
)
;
this
.
_onCopyPropertyName
=
this
.
_onCopyPropertyName
.
bind
(
this
)
;
this
.
_onCopyPropertyValue
=
this
.
_onCopyPropertyValue
.
bind
(
this
)
;
this
.
_onCopyRule
=
this
.
_onCopyRule
.
bind
(
this
)
;
this
.
_onCopySelector
=
this
.
_onCopySelector
.
bind
(
this
)
;
this
.
_onCopyUrl
=
this
.
_onCopyUrl
.
bind
(
this
)
;
this
.
_onSelectAll
=
this
.
_onSelectAll
.
bind
(
this
)
;
this
.
_onToggleOrigSources
=
this
.
_onToggleOrigSources
.
bind
(
this
)
;
}
module
.
exports
=
StyleInspectorMenu
;
StyleInspectorMenu
.
prototype
=
{
show
:
function
(
event
)
{
try
{
this
.
_openMenu
(
{
target
:
event
.
explicitOriginalTarget
screenX
:
event
.
screenX
screenY
:
event
.
screenY
}
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
_openMenu
:
function
(
{
target
screenX
=
0
screenY
=
0
}
=
{
}
)
{
this
.
styleDocument
.
popupNode
=
target
;
this
.
styleWindow
.
focus
(
)
;
const
menu
=
new
Menu
(
)
;
const
menuitemCopy
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
copy
"
)
accesskey
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
copy
.
accessKey
"
)
click
:
(
)
=
>
{
this
.
_onCopy
(
)
;
}
disabled
:
!
this
.
_hasTextSelected
(
)
}
)
;
const
menuitemCopyLocation
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
copyLocation
"
)
click
:
(
)
=
>
{
this
.
_onCopyLocation
(
)
;
}
visible
:
false
}
)
;
const
menuitemCopyRule
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
copyRule
"
)
click
:
(
)
=
>
{
this
.
_onCopyRule
(
)
;
}
visible
:
this
.
isRuleView
}
)
;
const
copyColorAccessKey
=
"
styleinspector
.
contextmenu
.
copyColor
.
accessKey
"
;
const
menuitemCopyColor
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
copyColor
"
)
accesskey
:
STYLE_INSPECTOR_L10N
.
getStr
(
copyColorAccessKey
)
click
:
(
)
=
>
{
this
.
_onCopyColor
(
)
;
}
visible
:
this
.
_isColorPopup
(
)
}
)
;
const
copyUrlAccessKey
=
"
styleinspector
.
contextmenu
.
copyUrl
.
accessKey
"
;
const
menuitemCopyUrl
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
copyUrl
"
)
accesskey
:
STYLE_INSPECTOR_L10N
.
getStr
(
copyUrlAccessKey
)
click
:
(
)
=
>
{
this
.
_onCopyUrl
(
)
;
}
visible
:
this
.
_isImageUrl
(
)
}
)
;
const
copyImageAccessKey
=
"
styleinspector
.
contextmenu
.
copyImageDataUrl
.
accessKey
"
;
const
menuitemCopyImageDataUrl
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
copyImageDataUrl
"
)
accesskey
:
STYLE_INSPECTOR_L10N
.
getStr
(
copyImageAccessKey
)
click
:
(
)
=
>
{
this
.
_onCopyImageDataUrl
(
)
;
}
visible
:
this
.
_isImageUrl
(
)
}
)
;
const
copyDeclarationLabel
=
"
styleinspector
.
contextmenu
.
copyDeclaration
"
;
const
menuitemCopyDeclaration
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
copyDeclarationLabel
)
click
:
(
)
=
>
{
this
.
_onCopyDeclaration
(
)
;
}
visible
:
false
}
)
;
const
menuitemCopyPropertyName
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
copyPropertyName
"
)
click
:
(
)
=
>
{
this
.
_onCopyPropertyName
(
)
;
}
visible
:
false
}
)
;
const
menuitemCopyPropertyValue
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
copyPropertyValue
"
)
click
:
(
)
=
>
{
this
.
_onCopyPropertyValue
(
)
;
}
visible
:
false
}
)
;
const
menuitemCopySelector
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
copySelector
"
)
click
:
(
)
=
>
{
this
.
_onCopySelector
(
)
;
}
visible
:
false
}
)
;
this
.
_clickedNodeInfo
=
this
.
_getClickedNodeInfo
(
)
;
if
(
this
.
isRuleView
&
&
this
.
_clickedNodeInfo
)
{
switch
(
this
.
_clickedNodeInfo
.
type
)
{
case
VIEW_NODE_PROPERTY_TYPE
:
menuitemCopyDeclaration
.
visible
=
true
;
menuitemCopyPropertyName
.
visible
=
true
;
break
;
case
VIEW_NODE_VALUE_TYPE
:
menuitemCopyDeclaration
.
visible
=
true
;
menuitemCopyPropertyValue
.
visible
=
true
;
break
;
case
VIEW_NODE_SELECTOR_TYPE
:
menuitemCopySelector
.
visible
=
true
;
break
;
case
VIEW_NODE_LOCATION_TYPE
:
menuitemCopyLocation
.
visible
=
true
;
break
;
}
}
menu
.
append
(
menuitemCopy
)
;
menu
.
append
(
menuitemCopyLocation
)
;
menu
.
append
(
menuitemCopyRule
)
;
menu
.
append
(
menuitemCopyColor
)
;
menu
.
append
(
menuitemCopyUrl
)
;
menu
.
append
(
menuitemCopyImageDataUrl
)
;
menu
.
append
(
menuitemCopyDeclaration
)
;
menu
.
append
(
menuitemCopyPropertyName
)
;
menu
.
append
(
menuitemCopyPropertyValue
)
;
menu
.
append
(
menuitemCopySelector
)
;
menu
.
append
(
new
MenuItem
(
{
type
:
"
separator
"
}
)
)
;
const
selectAllAccessKey
=
"
styleinspector
.
contextmenu
.
selectAll
.
accessKey
"
;
const
menuitemSelectAll
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
selectAll
"
)
accesskey
:
STYLE_INSPECTOR_L10N
.
getStr
(
selectAllAccessKey
)
click
:
(
)
=
>
{
this
.
_onSelectAll
(
)
;
}
}
)
;
menu
.
append
(
menuitemSelectAll
)
;
menu
.
append
(
new
MenuItem
(
{
type
:
"
separator
"
}
)
)
;
const
addRuleAccessKey
=
"
styleinspector
.
contextmenu
.
addNewRule
.
accessKey
"
;
const
menuitemAddRule
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
addNewRule
"
)
accesskey
:
STYLE_INSPECTOR_L10N
.
getStr
(
addRuleAccessKey
)
click
:
(
)
=
>
{
this
.
_onAddNewRule
(
)
;
}
visible
:
this
.
isRuleView
disabled
:
!
this
.
isRuleView
|
|
this
.
inspector
.
selection
.
isAnonymousNode
(
)
}
)
;
menu
.
append
(
menuitemAddRule
)
;
const
sourcesAccessKey
=
"
styleinspector
.
contextmenu
.
toggleOrigSources
.
accessKey
"
;
const
menuitemSources
=
new
MenuItem
(
{
label
:
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
contextmenu
.
toggleOrigSources
"
)
accesskey
:
STYLE_INSPECTOR_L10N
.
getStr
(
sourcesAccessKey
)
click
:
(
)
=
>
{
this
.
_onToggleOrigSources
(
)
;
}
type
:
"
checkbox
"
checked
:
Services
.
prefs
.
getBoolPref
(
PREF_ORIG_SOURCES
)
}
)
;
menu
.
append
(
menuitemSources
)
;
menu
.
popup
(
screenX
screenY
this
.
inspector
.
toolbox
.
doc
)
;
return
menu
;
}
_hasTextSelected
:
function
(
)
{
let
hasTextSelected
;
const
selection
=
this
.
styleWindow
.
getSelection
(
)
;
const
node
=
this
.
_getClickedNode
(
)
;
if
(
node
.
nodeName
=
=
"
input
"
|
|
node
.
nodeName
=
=
"
textarea
"
)
{
const
{
selectionStart
selectionEnd
}
=
node
;
hasTextSelected
=
isFinite
(
selectionStart
)
&
&
isFinite
(
selectionEnd
)
&
&
selectionStart
!
=
=
selectionEnd
;
}
else
{
hasTextSelected
=
selection
.
toString
(
)
&
&
!
selection
.
isCollapsed
;
}
return
hasTextSelected
;
}
_getClickedNodeInfo
:
function
(
)
{
const
node
=
this
.
_getClickedNode
(
)
;
return
this
.
view
.
getNodeInfo
(
node
)
;
}
_isColorPopup
:
function
(
)
{
this
.
_colorToCopy
=
"
"
;
let
container
=
this
.
_getClickedNode
(
)
;
if
(
!
container
)
{
return
false
;
}
const
isColorNode
=
el
=
>
el
.
dataset
&
&
"
color
"
in
el
.
dataset
;
while
(
!
isColorNode
(
container
)
)
{
container
=
container
.
parentNode
;
if
(
!
container
)
{
return
false
;
}
}
this
.
_colorToCopy
=
container
.
dataset
.
color
;
return
true
;
}
_isPropertyName
:
function
(
)
{
const
nodeInfo
=
this
.
_getClickedNodeInfo
(
)
;
if
(
!
nodeInfo
)
{
return
false
;
}
return
nodeInfo
.
type
=
=
VIEW_NODE_PROPERTY_TYPE
;
}
_isImageUrl
:
function
(
)
{
const
nodeInfo
=
this
.
_getClickedNodeInfo
(
)
;
if
(
!
nodeInfo
)
{
return
false
;
}
return
nodeInfo
.
type
=
=
VIEW_NODE_IMAGE_URL_TYPE
;
}
_getClickedNode
:
function
(
)
{
let
container
=
null
;
const
node
=
this
.
styleDocument
.
popupNode
;
if
(
node
)
{
const
isTextNode
=
node
.
nodeType
=
=
node
.
TEXT_NODE
;
container
=
isTextNode
?
node
.
parentElement
:
node
;
}
return
container
;
}
_onSelectAll
:
function
(
)
{
const
selection
=
this
.
styleWindow
.
getSelection
(
)
;
selection
.
selectAllChildren
(
this
.
view
.
element
)
;
}
_onCopy
:
function
(
)
{
this
.
view
.
copySelection
(
this
.
styleDocument
.
popupNode
)
;
}
_onCopyColor
:
function
(
)
{
clipboardHelper
.
copyString
(
this
.
_colorToCopy
)
;
}
_onCopyUrl
:
function
(
)
{
if
(
!
this
.
_clickedNodeInfo
)
{
return
;
}
clipboardHelper
.
copyString
(
this
.
_clickedNodeInfo
.
value
.
url
)
;
}
async
_onCopyImageDataUrl
(
)
{
if
(
!
this
.
_clickedNodeInfo
)
{
return
;
}
let
message
;
try
{
const
inspectorFront
=
this
.
inspector
.
inspectorFront
;
const
imageUrl
=
this
.
_clickedNodeInfo
.
value
.
url
;
const
data
=
await
inspectorFront
.
getImageDataFromURL
(
imageUrl
)
;
message
=
await
data
.
data
.
string
(
)
;
}
catch
(
e
)
{
message
=
STYLE_INSPECTOR_L10N
.
getStr
(
"
styleinspector
.
copyImageDataUrlError
"
)
;
}
clipboardHelper
.
copyString
(
message
)
;
}
_onAddNewRule
:
function
(
)
{
this
.
view
.
_onAddRule
(
)
;
}
_onCopyLocation
:
function
(
)
{
if
(
!
this
.
_clickedNodeInfo
)
{
return
;
}
clipboardHelper
.
copyString
(
this
.
_clickedNodeInfo
.
value
)
;
}
_onCopyDeclaration
:
function
(
)
{
if
(
!
this
.
_clickedNodeInfo
)
{
return
;
}
const
textProp
=
this
.
_clickedNodeInfo
.
value
.
textProperty
;
clipboardHelper
.
copyString
(
textProp
.
stringifyProperty
(
)
)
;
}
_onCopyPropertyName
:
function
(
)
{
if
(
!
this
.
_clickedNodeInfo
)
{
return
;
}
clipboardHelper
.
copyString
(
this
.
_clickedNodeInfo
.
value
.
property
)
;
}
_onCopyPropertyValue
:
function
(
)
{
if
(
!
this
.
_clickedNodeInfo
)
{
return
;
}
clipboardHelper
.
copyString
(
this
.
_clickedNodeInfo
.
value
.
value
)
;
}
_onCopyRule
:
function
(
)
{
const
ruleEditor
=
this
.
styleDocument
.
popupNode
.
parentNode
.
offsetParent
.
_ruleEditor
;
const
rule
=
ruleEditor
.
rule
;
clipboardHelper
.
copyString
(
rule
.
stringifyRule
(
)
)
;
}
_onCopySelector
:
function
(
)
{
if
(
!
this
.
_clickedNodeInfo
)
{
return
;
}
clipboardHelper
.
copyString
(
this
.
_clickedNodeInfo
.
value
)
;
}
_onToggleOrigSources
:
function
(
)
{
const
isEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_ORIG_SOURCES
)
;
Services
.
prefs
.
setBoolPref
(
PREF_ORIG_SOURCES
!
isEnabled
)
;
}
destroy
:
function
(
)
{
this
.
popupNode
=
null
;
this
.
styleDocument
.
popupNode
=
null
;
this
.
view
=
null
;
this
.
inspector
=
null
;
this
.
styleDocument
=
null
;
this
.
styleWindow
=
null
;
}
}
;
