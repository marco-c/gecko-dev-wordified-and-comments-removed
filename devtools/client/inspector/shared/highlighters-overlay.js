"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
safeAsyncMethod
}
=
require
(
"
devtools
/
shared
/
async
-
utils
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
VIEW_NODE_VALUE_TYPE
VIEW_NODE_SHAPE_POINT_TYPE
}
=
require
(
"
devtools
/
client
/
inspector
/
shared
/
node
-
types
"
)
;
loader
.
lazyRequireGetter
(
this
"
parseURL
"
"
devtools
/
client
/
shared
/
source
-
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
asyncStorage
"
"
devtools
/
shared
/
async
-
storage
"
)
;
loader
.
lazyRequireGetter
(
this
"
gridsReducer
"
"
devtools
/
client
/
inspector
/
grids
/
reducers
/
grids
"
)
;
loader
.
lazyRequireGetter
(
this
"
highlighterSettingsReducer
"
"
devtools
/
client
/
inspector
/
grids
/
reducers
/
highlighter
-
settings
"
)
;
loader
.
lazyRequireGetter
(
this
"
flexboxReducer
"
"
devtools
/
client
/
inspector
/
flexbox
/
reducers
/
flexbox
"
)
;
loader
.
lazyRequireGetter
(
this
"
deepEqual
"
"
devtools
/
shared
/
DevToolsUtils
"
true
)
;
const
DEFAULT_HIGHLIGHTER_COLOR
=
"
#
9400FF
"
;
const
SUBGRID_PARENT_ALPHA
=
0
.
5
;
const
TYPES
=
{
BOXMODEL
:
"
BoxModelHighlighter
"
FLEXBOX
:
"
FlexboxHighlighter
"
GEOMETRY
:
"
GeometryEditorHighlighter
"
GRID
:
"
CssGridHighlighter
"
SHAPES
:
"
ShapesHighlighter
"
SELECTOR
:
"
SelectorHighlighter
"
TRANSFORM
:
"
CssTransformHighlighter
"
}
;
const
HIGHLIGHTER_EVENTS
=
{
[
TYPES
.
BOXMODEL
]
:
{
shown
:
"
box
-
model
-
highlighter
-
shown
"
hidden
:
"
box
-
model
-
highlighter
-
hidden
"
}
[
TYPES
.
GRID
]
:
{
shown
:
"
grid
-
highlighter
-
shown
"
hidden
:
"
grid
-
highlighter
-
hidden
"
}
[
TYPES
.
FLEXBOX
]
:
{
shown
:
"
flexbox
-
highlighter
-
shown
"
hidden
:
"
flexbox
-
highlighter
-
hidden
"
}
[
TYPES
.
GEOMETRY
]
:
{
shown
:
"
geometry
-
editor
-
highlighter
-
shown
"
hidden
:
"
geometry
-
editor
-
highlighter
-
hidden
"
}
[
TYPES
.
SHAPES
]
:
{
shown
:
"
shapes
-
highlighter
-
shown
"
hidden
:
"
shapes
-
highlighter
-
hidden
"
}
[
TYPES
.
TRANSFORM
]
:
{
shown
:
"
css
-
transform
-
highlighter
-
shown
"
hidden
:
"
css
-
transform
-
highlighter
-
hidden
"
}
}
;
class
HighlightersOverlay
{
constructor
(
inspector
)
{
this
.
inspector
=
inspector
;
this
.
inspectorFront
=
this
.
inspector
.
inspectorFront
;
this
.
store
=
this
.
inspector
.
store
;
this
.
target
=
this
.
inspector
.
currentTarget
;
this
.
telemetry
=
this
.
inspector
.
telemetry
;
this
.
walker
=
this
.
inspector
.
walker
;
this
.
maxGridHighlighters
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
gridinspector
.
maxHighlighters
"
)
;
this
.
_activeHighlighters
=
new
Map
(
)
;
this
.
highlighters
=
{
}
;
this
.
gridHighlighters
=
new
Map
(
)
;
this
.
parentGridHighlighters
=
new
Map
(
)
;
this
.
extraGridHighlighterPool
=
[
]
;
this
.
subgridToParentMap
=
new
Map
(
)
;
this
.
isGridHighlighterTimerActive
=
false
;
this
.
editors
=
{
}
;
this
.
state
=
{
flexbox
:
{
}
grids
:
new
Map
(
)
shapes
:
{
}
}
;
this
.
flexboxHighlighterShown
=
null
;
this
.
geometryEditorHighlighterShown
=
null
;
this
.
hoveredHighlighterShown
=
null
;
this
.
shapesHighlighterShown
=
null
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
this
.
onDisplayChange
=
this
.
onDisplayChange
.
bind
(
this
)
;
this
.
onMarkupMutation
=
this
.
onMarkupMutation
.
bind
(
this
)
;
this
.
_onResourceAvailable
=
this
.
_onResourceAvailable
.
bind
(
this
)
;
this
.
onMouseMove
=
this
.
onMouseMove
.
bind
(
this
)
;
this
.
onMouseOut
=
this
.
onMouseOut
.
bind
(
this
)
;
this
.
onWillNavigate
=
this
.
onWillNavigate
.
bind
(
this
)
;
this
.
hideFlexboxHighlighter
=
this
.
hideFlexboxHighlighter
.
bind
(
this
)
;
this
.
hideGridHighlighter
=
this
.
hideGridHighlighter
.
bind
(
this
)
;
this
.
hideShapesHighlighter
=
this
.
hideShapesHighlighter
.
bind
(
this
)
;
this
.
showFlexboxHighlighter
=
this
.
showFlexboxHighlighter
.
bind
(
this
)
;
this
.
showGridHighlighter
=
this
.
showGridHighlighter
.
bind
(
this
)
;
this
.
showShapesHighlighter
=
this
.
showShapesHighlighter
.
bind
(
this
)
;
this
.
_handleRejection
=
this
.
_handleRejection
.
bind
(
this
)
;
this
.
onShapesHighlighterShown
=
this
.
onShapesHighlighterShown
.
bind
(
this
)
;
this
.
onShapesHighlighterHidden
=
this
.
onShapesHighlighterHidden
.
bind
(
this
)
;
this
.
hideHighlighterType
=
safeAsyncMethod
(
this
.
hideHighlighterType
.
bind
(
this
)
(
)
=
>
this
.
destroyed
)
;
this
.
showHighlighterTypeForNode
=
safeAsyncMethod
(
this
.
showHighlighterTypeForNode
.
bind
(
this
)
(
)
=
>
this
.
destroyed
)
;
this
.
inspector
.
on
(
"
markupmutation
"
this
.
onMarkupMutation
)
;
this
.
resourceWatcher
=
this
.
inspector
.
toolbox
.
resourceWatcher
;
this
.
resourceWatcher
.
watchResources
(
[
this
.
resourceWatcher
.
TYPES
.
ROOT_NODE
]
{
onAvailable
:
this
.
_onResourceAvailable
}
)
;
this
.
target
.
on
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
this
.
walker
.
on
(
"
display
-
change
"
this
.
onDisplayChange
)
;
EventEmitter
.
decorate
(
this
)
;
}
async
_beforeShowHighlighterTypeForNode
(
type
nodeFront
options
)
{
const
{
highlighter
:
activeHighlighter
nodeFront
:
activeNodeFront
options
:
activeOptions
timer
:
activeTimer
}
=
this
.
getDataForActiveHighlighter
(
type
)
;
if
(
!
activeHighlighter
)
{
return
false
;
}
let
skipShow
=
false
;
clearTimeout
(
activeTimer
)
;
switch
(
type
)
{
case
TYPES
.
SELECTOR
:
if
(
nodeFront
=
=
=
activeNodeFront
&
&
options
?
.
selector
!
=
=
activeOptions
?
.
selector
)
{
await
this
.
hideHighlighterType
(
TYPES
.
SELECTOR
)
;
}
break
;
default
:
if
(
nodeFront
!
=
=
activeNodeFront
)
{
await
this
.
hideHighlighterType
(
type
)
;
}
else
if
(
deepEqual
(
options
activeOptions
)
)
{
skipShow
=
true
;
}
}
return
skipShow
;
}
async
_getHighlighterTypeForNode
(
type
nodeFront
)
{
const
{
inspectorFront
}
=
nodeFront
;
const
highlighter
=
await
inspectorFront
.
getOrCreateHighlighterByType
(
type
)
;
return
highlighter
;
}
getActiveHighlighter
(
type
)
{
if
(
!
this
.
_activeHighlighters
.
has
(
type
)
)
{
return
null
;
}
const
{
highlighter
}
=
this
.
_activeHighlighters
.
get
(
type
)
;
return
highlighter
;
}
getDataForActiveHighlighter
(
type
)
{
if
(
!
this
.
_activeHighlighters
.
has
(
type
)
)
{
return
{
}
;
}
return
this
.
_activeHighlighters
.
get
(
type
)
;
}
getOptionsForActiveHighlighter
(
type
)
{
const
{
options
}
=
this
.
getDataForActiveHighlighter
(
type
)
;
return
options
;
}
getNodeForActiveHighlighter
(
type
)
{
if
(
!
this
.
_activeHighlighters
.
has
(
type
)
)
{
return
null
;
}
const
{
nodeFront
}
=
this
.
_activeHighlighters
.
get
(
type
)
;
return
nodeFront
;
}
async
showHighlighterTypeForNode
(
type
nodeFront
options
)
{
const
skipShow
=
await
this
.
_beforeShowHighlighterTypeForNode
(
type
nodeFront
options
)
;
if
(
skipShow
)
{
return
;
}
const
highlighter
=
await
this
.
_getHighlighterTypeForNode
(
type
nodeFront
)
;
const
timer
=
this
.
scheduleAutoHideHighlighterType
(
type
options
?
.
duration
)
;
this
.
_activeHighlighters
.
set
(
type
{
nodeFront
highlighter
options
timer
}
)
;
await
highlighter
.
show
(
nodeFront
options
)
;
if
(
HIGHLIGHTER_EVENTS
[
type
]
?
.
shown
)
{
this
.
emit
(
HIGHLIGHTER_EVENTS
[
type
]
.
shown
nodeFront
options
)
;
}
this
.
emit
(
"
highlighter
-
shown
"
{
type
highlighter
nodeFront
options
}
)
;
}
scheduleAutoHideHighlighterType
(
type
duration
)
{
if
(
!
duration
)
{
return
undefined
;
}
const
timer
=
setTimeout
(
async
(
)
=
>
{
await
this
.
hideHighlighterType
(
type
)
;
clearTimeout
(
timer
)
;
}
duration
)
;
return
timer
;
}
async
hideHighlighterType
(
type
)
{
if
(
!
this
.
_activeHighlighters
.
has
(
type
)
)
{
return
;
}
const
data
=
this
.
getDataForActiveHighlighter
(
type
)
;
const
{
highlighter
nodeFront
timer
}
=
data
;
clearTimeout
(
timer
)
;
this
.
_activeHighlighters
.
delete
(
type
)
;
await
highlighter
.
hide
(
)
;
if
(
HIGHLIGHTER_EVENTS
[
type
]
?
.
hidden
)
{
this
.
emit
(
HIGHLIGHTER_EVENTS
[
type
]
.
hidden
nodeFront
)
;
}
this
.
emit
(
"
highlighter
-
hidden
"
{
type
.
.
.
data
}
)
;
}
canGridHighlighterToggle
(
node
)
{
const
maxGridHighlighters
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
gridinspector
.
maxHighlighters
"
)
;
return
(
maxGridHighlighters
=
=
=
1
|
|
this
.
gridHighlighters
.
size
<
maxGridHighlighters
|
|
this
.
gridHighlighters
.
has
(
node
)
)
;
}
isRuleView
(
node
)
{
return
!
!
node
.
closest
(
"
#
ruleview
-
panel
"
)
;
}
addToView
(
view
)
{
const
el
=
view
.
element
;
el
.
addEventListener
(
"
click
"
this
.
onClick
true
)
;
el
.
addEventListener
(
"
mousemove
"
this
.
onMouseMove
)
;
el
.
addEventListener
(
"
mouseout
"
this
.
onMouseOut
)
;
el
.
ownerDocument
.
defaultView
.
addEventListener
(
"
mouseout
"
this
.
onMouseOut
)
;
}
removeFromView
(
view
)
{
const
el
=
view
.
element
;
el
.
removeEventListener
(
"
click
"
this
.
onClick
true
)
;
el
.
removeEventListener
(
"
mousemove
"
this
.
onMouseMove
)
;
el
.
removeEventListener
(
"
mouseout
"
this
.
onMouseOut
)
;
}
async
toggleShapesHighlighter
(
node
options
textProperty
)
{
const
shapesEditor
=
await
this
.
getInContextEditor
(
"
shapesEditor
"
)
;
if
(
!
shapesEditor
)
{
return
;
}
shapesEditor
.
toggle
(
node
options
textProperty
)
;
}
async
showShapesHighlighter
(
node
options
)
{
const
shapesEditor
=
await
this
.
getInContextEditor
(
"
shapesEditor
"
)
;
if
(
!
shapesEditor
)
{
return
;
}
shapesEditor
.
show
(
node
options
)
;
}
onShapesHighlighterShown
(
data
)
{
const
{
node
options
}
=
data
;
this
.
shapesHighlighterShown
=
node
;
this
.
state
.
shapes
.
options
=
options
;
this
.
emit
(
"
shapes
-
highlighter
-
shown
"
node
options
)
;
}
async
hideShapesHighlighter
(
)
{
const
shapesEditor
=
await
this
.
getInContextEditor
(
"
shapesEditor
"
)
;
if
(
!
shapesEditor
)
{
return
;
}
shapesEditor
.
hide
(
)
;
}
onShapesHighlighterHidden
(
data
)
{
this
.
emit
(
"
shapes
-
highlighter
-
hidden
"
this
.
shapesHighlighterShown
this
.
state
.
shapes
.
options
)
;
this
.
shapesHighlighterShown
=
null
;
this
.
state
.
shapes
=
{
}
;
}
async
hoverPointShapesHighlighter
(
node
point
)
{
if
(
node
=
=
this
.
shapesHighlighterShown
)
{
const
options
=
Object
.
assign
(
{
}
this
.
state
.
shapes
.
options
)
;
options
.
hoverPoint
=
point
;
await
this
.
showShapesHighlighter
(
node
options
)
;
}
}
async
getFlexboxHighlighterColor
(
)
{
const
state
=
this
.
store
.
getState
(
)
;
if
(
!
state
.
flexbox
)
{
this
.
store
.
injectReducer
(
"
flexbox
"
flexboxReducer
)
;
}
const
{
flexbox
}
=
this
.
store
.
getState
(
)
;
const
color
=
flexbox
.
color
;
if
(
color
)
{
return
color
;
}
const
customHostColors
=
(
await
asyncStorage
.
getItem
(
"
flexboxInspectorHostColors
"
)
)
|
|
{
}
;
let
hostname
;
try
{
hostname
=
parseURL
(
this
.
target
.
url
)
.
hostname
|
|
parseURL
(
this
.
target
.
url
)
.
protocol
;
}
catch
(
e
)
{
this
.
_handleRejection
(
e
)
;
}
return
hostname
&
&
customHostColors
[
hostname
]
?
customHostColors
[
hostname
]
:
DEFAULT_HIGHLIGHTER_COLOR
;
}
async
toggleFlexboxHighlighter
(
node
trigger
)
{
if
(
node
=
=
this
.
flexboxHighlighterShown
)
{
await
this
.
hideFlexboxHighlighter
(
node
)
;
return
;
}
await
this
.
showFlexboxHighlighter
(
node
{
}
trigger
)
;
}
async
showFlexboxHighlighter
(
node
options
trigger
)
{
const
highlighter
=
await
this
.
_getHighlighter
(
"
FlexboxHighlighter
"
)
;
if
(
!
highlighter
)
{
return
;
}
const
color
=
await
this
.
getFlexboxHighlighterColor
(
node
)
;
options
=
Object
.
assign
(
{
}
options
{
color
}
)
;
let
isShown
;
try
{
isShown
=
await
highlighter
.
show
(
node
options
)
;
}
catch
(
e
)
{
this
.
_handleRejection
(
e
)
;
}
if
(
!
isShown
)
{
return
;
}
this
.
_toggleRuleViewIcon
(
node
true
"
.
ruleview
-
flex
"
)
;
this
.
telemetry
.
toolOpened
(
"
flexbox_highlighter
"
this
.
inspector
.
toolbox
.
sessionId
this
)
;
if
(
trigger
=
=
=
"
layout
"
)
{
this
.
telemetry
.
scalarAdd
(
"
devtools
.
layout
.
flexboxhighlighter
.
opened
"
1
)
;
}
else
if
(
trigger
=
=
=
"
markup
"
)
{
this
.
telemetry
.
scalarAdd
(
"
devtools
.
markup
.
flexboxhighlighter
.
opened
"
1
)
;
}
else
if
(
trigger
=
=
=
"
rule
"
)
{
this
.
telemetry
.
scalarAdd
(
"
devtools
.
rules
.
flexboxhighlighter
.
opened
"
1
)
;
}
try
{
const
{
url
}
=
this
.
target
;
const
selector
=
await
node
.
getUniqueSelector
(
)
;
this
.
state
.
flexbox
=
{
selector
options
url
}
;
this
.
flexboxHighlighterShown
=
node
;
this
.
emit
(
"
flexbox
-
highlighter
-
shown
"
node
options
)
;
}
catch
(
e
)
{
this
.
_handleRejection
(
e
)
;
}
}
async
hideFlexboxHighlighter
(
node
)
{
if
(
!
this
.
flexboxHighlighterShown
|
|
!
this
.
highlighters
.
FlexboxHighlighter
)
{
return
;
}
this
.
telemetry
.
toolClosed
(
"
flexbox_highlighter
"
this
.
inspector
.
toolbox
.
sessionId
this
)
;
this
.
_toggleRuleViewIcon
(
node
false
"
.
ruleview
-
flex
"
)
;
await
this
.
highlighters
.
FlexboxHighlighter
.
hide
(
)
;
const
nodeFront
=
this
.
flexboxHighlighterShown
;
this
.
flexboxHighlighterShown
=
null
;
this
.
emit
(
"
flexbox
-
highlighter
-
hidden
"
nodeFront
)
;
this
.
state
.
flexbox
=
null
;
}
getGridHighlighterSettings
(
nodeFront
)
{
const
state
=
this
.
store
.
getState
(
)
;
if
(
!
state
.
grids
)
{
this
.
store
.
injectReducer
(
"
grids
"
gridsReducer
)
;
}
if
(
!
state
.
highlighterSettings
)
{
this
.
store
.
injectReducer
(
"
highlighterSettings
"
highlighterSettingsReducer
)
;
}
const
{
grids
highlighterSettings
}
=
this
.
store
.
getState
(
)
;
const
grid
=
grids
.
find
(
g
=
>
g
.
nodeFront
=
=
=
nodeFront
)
;
const
color
=
grid
?
grid
.
color
:
DEFAULT_HIGHLIGHTER_COLOR
;
const
zIndex
=
grid
?
grid
.
zIndex
:
0
;
return
Object
.
assign
(
{
}
highlighterSettings
{
color
zIndex
}
)
;
}
async
toggleGridHighlighter
(
node
trigger
)
{
if
(
this
.
gridHighlighters
.
has
(
node
)
)
{
await
this
.
hideGridHighlighter
(
node
)
;
return
;
}
await
this
.
showGridHighlighter
(
node
{
}
trigger
)
;
}
async
showGridHighlighter
(
node
options
trigger
)
{
if
(
!
this
.
gridHighlighters
.
has
(
node
)
)
{
if
(
this
.
maxGridHighlighters
=
=
=
1
)
{
for
(
const
nodeFront
of
this
.
gridHighlighters
.
keys
(
)
)
{
await
this
.
hideGridHighlighter
(
nodeFront
)
;
}
}
else
if
(
this
.
gridHighlighters
.
size
=
=
=
this
.
maxGridHighlighters
)
{
return
;
}
}
else
if
(
this
.
parentGridHighlighters
.
has
(
node
)
)
{
await
this
.
hideGridHighlighter
(
node
)
;
}
if
(
node
.
displayType
=
=
=
"
subgrid
"
)
{
const
parentGridNode
=
await
this
.
walker
.
getParentGridNode
(
node
)
;
this
.
subgridToParentMap
.
set
(
node
parentGridNode
)
;
await
this
.
showParentGridHighlighter
(
parentGridNode
)
;
}
const
highlighter
=
await
this
.
_getGridHighlighter
(
node
)
;
if
(
!
highlighter
)
{
return
;
}
options
=
Object
.
assign
(
{
}
options
this
.
getGridHighlighterSettings
(
node
)
)
;
const
isShown
=
await
highlighter
.
show
(
node
options
)
;
if
(
!
isShown
)
{
return
;
}
this
.
_toggleRuleViewIcon
(
node
true
"
.
ruleview
-
grid
"
)
;
if
(
!
this
.
isGridHighlighterTimerActive
)
{
this
.
telemetry
.
toolOpened
(
"
grid_highlighter
"
this
.
inspector
.
toolbox
.
sessionId
this
)
;
this
.
isGridHighlighterTimerActive
=
true
;
}
if
(
trigger
=
=
=
"
grid
"
)
{
this
.
telemetry
.
scalarAdd
(
"
devtools
.
grid
.
gridinspector
.
opened
"
1
)
;
}
else
if
(
trigger
=
=
=
"
markup
"
)
{
this
.
telemetry
.
scalarAdd
(
"
devtools
.
markup
.
gridinspector
.
opened
"
1
)
;
}
else
if
(
trigger
=
=
=
"
rule
"
)
{
this
.
telemetry
.
scalarAdd
(
"
devtools
.
rules
.
gridinspector
.
opened
"
1
)
;
}
try
{
const
{
url
}
=
this
.
target
;
const
selector
=
await
node
.
getUniqueSelector
(
)
;
this
.
state
.
grids
.
set
(
node
{
selector
options
url
}
)
;
this
.
emit
(
"
grid
-
highlighter
-
shown
"
node
options
)
;
}
catch
(
e
)
{
this
.
_handleRejection
(
e
)
;
}
}
async
showParentGridHighlighter
(
node
)
{
if
(
this
.
gridHighlighters
.
has
(
node
)
)
{
return
;
}
const
highlighter
=
await
this
.
_getGridHighlighter
(
node
true
)
;
if
(
!
highlighter
)
{
return
;
}
await
highlighter
.
show
(
node
{
.
.
.
this
.
getGridHighlighterSettings
(
node
)
globalAlpha
:
SUBGRID_PARENT_ALPHA
}
)
;
}
async
hideGridHighlighter
(
node
)
{
let
highlighter
;
if
(
this
.
gridHighlighters
.
has
(
node
)
)
{
highlighter
=
this
.
gridHighlighters
.
get
(
node
)
;
this
.
gridHighlighters
.
delete
(
node
)
;
}
else
if
(
this
.
parentGridHighlighters
.
has
(
node
)
)
{
highlighter
=
this
.
parentGridHighlighters
.
get
(
node
)
;
this
.
parentGridHighlighters
.
delete
(
node
)
;
}
else
{
return
;
}
await
highlighter
.
hide
(
)
;
this
.
extraGridHighlighterPool
.
push
(
highlighter
)
;
this
.
state
.
grids
.
delete
(
node
)
;
if
(
this
.
subgridToParentMap
.
has
(
node
)
)
{
const
parentGridNode
=
this
.
subgridToParentMap
.
get
(
node
)
;
this
.
subgridToParentMap
.
delete
(
node
)
;
await
this
.
hideParentGridHighlighter
(
parentGridNode
)
;
}
for
(
const
highlightedNode
of
this
.
gridHighlighters
.
keys
(
)
)
{
const
parentGridNode
=
await
this
.
walker
.
getParentGridNode
(
highlightedNode
)
;
if
(
node
=
=
=
parentGridNode
)
{
this
.
subgridToParentMap
.
set
(
highlightedNode
node
)
;
await
this
.
showParentGridHighlighter
(
node
)
;
break
;
}
}
this
.
_toggleRuleViewIcon
(
node
false
"
.
ruleview
-
grid
"
)
;
if
(
this
.
isGridHighlighterTimerActive
&
&
!
this
.
gridHighlighters
.
size
)
{
this
.
telemetry
.
toolClosed
(
"
grid_highlighter
"
this
.
inspector
.
toolbox
.
sessionId
this
)
;
this
.
isGridHighlighterTimerActive
=
false
;
}
this
.
emit
(
"
grid
-
highlighter
-
hidden
"
node
)
;
}
async
hideParentGridHighlighter
(
node
)
{
for
(
const
parentGridNode
of
this
.
subgridToParentMap
.
values
(
)
)
{
if
(
parentGridNode
=
=
=
node
)
{
return
;
}
}
const
highlighter
=
this
.
parentGridHighlighters
.
get
(
node
)
;
if
(
highlighter
)
{
await
highlighter
.
hide
(
)
;
this
.
extraGridHighlighterPool
.
push
(
highlighter
)
;
}
this
.
state
.
grids
.
delete
(
node
)
;
this
.
parentGridHighlighters
.
delete
(
node
)
;
}
async
toggleGeometryHighlighter
(
node
)
{
if
(
node
=
=
this
.
geometryEditorHighlighterShown
)
{
await
this
.
hideGeometryEditor
(
)
;
return
;
}
await
this
.
showGeometryEditor
(
node
)
;
}
async
showGeometryEditor
(
node
)
{
const
highlighter
=
await
this
.
_getHighlighter
(
"
GeometryEditorHighlighter
"
)
;
if
(
!
highlighter
)
{
return
;
}
const
isShown
=
await
highlighter
.
show
(
node
)
;
if
(
!
isShown
)
{
return
;
}
this
.
emit
(
"
geometry
-
editor
-
highlighter
-
shown
"
)
;
this
.
geometryEditorHighlighterShown
=
node
;
}
async
hideGeometryEditor
(
)
{
if
(
!
this
.
geometryEditorHighlighterShown
|
|
!
this
.
highlighters
.
GeometryEditorHighlighter
)
{
return
;
}
await
this
.
highlighters
.
GeometryEditorHighlighter
.
hide
(
)
;
this
.
emit
(
"
geometry
-
editor
-
highlighter
-
hidden
"
)
;
this
.
geometryEditorHighlighterShown
=
null
;
}
async
restoreFlexboxState
(
)
{
try
{
await
this
.
restoreState
(
"
flexbox
"
this
.
state
.
flexbox
this
.
showFlexboxHighlighter
)
;
}
catch
(
e
)
{
this
.
_handleRejection
(
e
)
;
}
}
async
restoreGridState
(
)
{
const
values
=
[
.
.
.
this
.
state
.
grids
.
values
(
)
]
;
this
.
state
.
grids
.
clear
(
)
;
try
{
for
(
const
gridState
of
values
)
{
await
this
.
restoreState
(
"
grid
"
gridState
this
.
showGridHighlighter
)
;
}
}
catch
(
e
)
{
this
.
_handleRejection
(
e
)
;
}
}
async
restoreState
(
name
state
showFunction
)
{
const
{
selector
options
url
}
=
state
;
if
(
!
selector
|
|
url
!
=
=
this
.
target
.
url
)
{
this
.
emit
(
{
name
}
-
state
-
restored
{
restored
:
false
}
)
;
return
;
}
const
rootNode
=
await
this
.
walker
.
getRootNode
(
)
;
const
nodeFront
=
await
this
.
walker
.
querySelector
(
rootNode
selector
)
;
if
(
nodeFront
)
{
if
(
options
.
hoverPoint
)
{
options
.
hoverPoint
=
null
;
}
await
showFunction
(
nodeFront
options
)
;
this
.
emit
(
{
name
}
-
state
-
restored
{
restored
:
true
}
)
;
}
else
{
this
.
emit
(
{
name
}
-
state
-
restored
{
restored
:
false
}
)
;
}
}
async
getInContextEditor
(
type
)
{
if
(
this
.
editors
[
type
]
)
{
return
this
.
editors
[
type
]
;
}
let
editor
;
switch
(
type
)
{
case
"
shapesEditor
"
:
const
highlighter
=
await
this
.
_getHighlighter
(
"
ShapesHighlighter
"
)
;
if
(
!
highlighter
)
{
return
null
;
}
const
ShapesInContextEditor
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
ShapesInContextEditor
"
)
;
editor
=
new
ShapesInContextEditor
(
highlighter
this
.
inspector
this
.
state
)
;
editor
.
on
(
"
show
"
this
.
onShapesHighlighterShown
)
;
editor
.
on
(
"
hide
"
this
.
onShapesHighlighterHidden
)
;
break
;
default
:
throw
new
Error
(
Unsupported
in
-
context
editor
'
{
name
}
'
)
;
}
this
.
editors
[
type
]
=
editor
;
return
editor
;
}
async
_getHighlighter
(
type
)
{
if
(
this
.
highlighters
[
type
]
)
{
return
this
.
highlighters
[
type
]
;
}
let
highlighter
;
try
{
highlighter
=
await
this
.
inspectorFront
.
getHighlighterByType
(
type
)
;
}
catch
(
e
)
{
this
.
_handleRejection
(
e
)
;
}
if
(
!
highlighter
)
{
return
null
;
}
this
.
highlighters
[
type
]
=
highlighter
;
return
highlighter
;
}
async
_getGridHighlighter
(
node
isParent
)
{
if
(
isParent
&
&
this
.
parentGridHighlighters
.
has
(
node
)
)
{
return
this
.
parentGridHighlighters
.
get
(
node
)
;
}
else
if
(
this
.
gridHighlighters
.
has
(
node
)
)
{
return
this
.
gridHighlighters
.
get
(
node
)
;
}
let
highlighter
;
if
(
this
.
extraGridHighlighterPool
.
length
>
0
)
{
highlighter
=
this
.
extraGridHighlighterPool
.
pop
(
)
;
}
else
{
try
{
highlighter
=
await
this
.
inspectorFront
.
getHighlighterByType
(
"
CssGridHighlighter
"
)
;
}
catch
(
e
)
{
this
.
_handleRejection
(
e
)
;
}
}
if
(
!
highlighter
)
{
return
null
;
}
if
(
isParent
)
{
this
.
parentGridHighlighters
.
set
(
node
highlighter
)
;
}
else
{
this
.
gridHighlighters
.
set
(
node
highlighter
)
;
}
return
highlighter
;
}
_handleRejection
(
error
)
{
if
(
!
this
.
destroyed
)
{
console
.
error
(
error
)
;
}
}
_toggleRuleViewIcon
(
node
active
selector
)
{
const
ruleViewEl
=
this
.
inspector
.
getPanel
(
"
ruleview
"
)
.
view
.
element
;
if
(
this
.
inspector
.
selection
.
nodeFront
!
=
=
node
)
{
if
(
selector
=
=
=
"
.
ruleview
-
grid
"
)
{
for
(
const
icon
of
ruleViewEl
.
querySelectorAll
(
selector
)
)
{
if
(
this
.
canGridHighlighterToggle
(
this
.
inspector
.
selection
.
nodeFront
)
)
{
icon
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
icon
.
setAttribute
(
"
disabled
"
true
)
;
}
}
}
return
;
}
for
(
const
icon
of
ruleViewEl
.
querySelectorAll
(
selector
)
)
{
icon
.
classList
.
toggle
(
"
active
"
active
)
;
}
}
_toggleShapePointActive
(
node
active
)
{
if
(
this
.
inspector
.
selection
.
nodeFront
!
=
this
.
shapesHighlighterShown
)
{
return
;
}
node
.
classList
.
toggle
(
"
active
"
active
)
;
}
_hideHoveredHighlighter
(
)
{
if
(
!
this
.
hoveredHighlighterShown
|
|
!
this
.
highlighters
[
this
.
hoveredHighlighterShown
]
)
{
return
;
}
const
onHidden
=
this
.
highlighters
[
this
.
hoveredHighlighterShown
]
.
hide
(
)
;
if
(
onHidden
)
{
onHidden
.
catch
(
console
.
error
)
;
}
this
.
hoveredHighlighterShown
=
null
;
this
.
emit
(
"
css
-
transform
-
highlighter
-
hidden
"
)
;
}
async
_hideHighlighterIfDeadNode
(
node
hideHighlighter
)
{
if
(
!
node
)
{
return
;
}
try
{
const
isInTree
=
node
.
walkerFront
&
&
(
await
node
.
walkerFront
.
isInDOMTree
(
node
)
)
;
if
(
!
isInTree
)
{
hideHighlighter
(
node
)
;
}
}
catch
(
e
)
{
this
.
_handleRejection
(
e
)
;
}
}
_isComputedViewTransform
(
nodeInfo
)
{
if
(
nodeInfo
.
view
!
=
"
computed
"
)
{
return
false
;
}
return
(
nodeInfo
.
type
=
=
=
VIEW_NODE_VALUE_TYPE
&
&
nodeInfo
.
value
.
property
=
=
=
"
transform
"
)
;
}
_isRuleViewDisplayFlex
(
node
)
{
return
this
.
isRuleView
(
node
)
&
&
node
.
classList
.
contains
(
"
ruleview
-
flex
"
)
;
}
_isRuleViewDisplayGrid
(
node
)
{
return
this
.
isRuleView
(
node
)
&
&
node
.
classList
.
contains
(
"
ruleview
-
grid
"
)
;
}
_isRuleViewShapeSwatch
(
node
)
{
return
(
this
.
isRuleView
(
node
)
&
&
node
.
classList
.
contains
(
"
ruleview
-
shapeswatch
"
)
)
;
}
_isRuleViewTransform
(
nodeInfo
)
{
if
(
nodeInfo
.
view
!
=
"
rule
"
)
{
return
false
;
}
const
isTransform
=
nodeInfo
.
type
=
=
=
VIEW_NODE_VALUE_TYPE
&
&
nodeInfo
.
value
.
property
=
=
=
"
transform
"
;
const
isEnabled
=
nodeInfo
.
value
.
enabled
&
&
!
nodeInfo
.
value
.
overridden
&
&
!
nodeInfo
.
value
.
pseudoElement
;
return
isTransform
&
&
isEnabled
;
}
isRuleViewShapePoint
(
nodeInfo
)
{
if
(
nodeInfo
.
view
!
=
"
rule
"
)
{
return
false
;
}
const
isShape
=
nodeInfo
.
type
=
=
=
VIEW_NODE_SHAPE_POINT_TYPE
&
&
(
nodeInfo
.
value
.
property
=
=
=
"
clip
-
path
"
|
|
nodeInfo
.
value
.
property
=
=
=
"
shape
-
outside
"
)
;
const
isEnabled
=
nodeInfo
.
value
.
enabled
&
&
!
nodeInfo
.
value
.
overridden
&
&
!
nodeInfo
.
value
.
pseudoElement
;
return
(
isShape
&
&
isEnabled
&
&
nodeInfo
.
value
.
toggleActive
&
&
!
this
.
state
.
shapes
.
options
.
transformMode
)
;
}
onClick
(
event
)
{
if
(
this
.
_isRuleViewDisplayGrid
(
event
.
target
)
)
{
event
.
stopPropagation
(
)
;
this
.
toggleGridHighlighter
(
this
.
inspector
.
selection
.
nodeFront
"
rule
"
)
;
}
if
(
this
.
_isRuleViewDisplayFlex
(
event
.
target
)
)
{
event
.
stopPropagation
(
)
;
this
.
toggleFlexboxHighlighter
(
this
.
inspector
.
selection
.
nodeFront
"
rule
"
)
;
}
if
(
this
.
_isRuleViewShapeSwatch
(
event
.
target
)
)
{
event
.
stopPropagation
(
)
;
const
view
=
this
.
inspector
.
getPanel
(
"
ruleview
"
)
.
view
;
const
nodeInfo
=
view
.
getNodeInfo
(
event
.
target
)
;
this
.
toggleShapesHighlighter
(
this
.
inspector
.
selection
.
nodeFront
{
mode
:
event
.
target
.
dataset
.
mode
transformMode
:
event
.
metaKey
|
|
event
.
ctrlKey
}
nodeInfo
.
value
.
textProperty
)
;
}
}
async
onDisplayChange
(
nodes
)
{
for
(
const
node
of
nodes
)
{
const
display
=
node
.
displayType
;
if
(
display
!
=
=
"
flex
"
&
&
display
!
=
=
"
inline
-
flex
"
&
&
node
=
=
this
.
flexboxHighlighterShown
)
{
await
this
.
hideFlexboxHighlighter
(
node
)
;
return
;
}
if
(
display
!
=
=
"
grid
"
&
&
display
!
=
=
"
inline
-
grid
"
&
&
(
this
.
gridHighlighters
.
has
(
node
)
|
|
this
.
parentGridHighlighters
.
has
(
node
)
)
)
{
await
this
.
hideGridHighlighter
(
node
)
;
return
;
}
if
(
display
!
=
=
"
subgrid
"
&
&
this
.
subgridToParentMap
.
has
(
node
)
)
{
await
this
.
hideGridHighlighter
(
node
)
;
return
;
}
}
}
onMouseMove
(
event
)
{
if
(
event
.
target
=
=
=
this
.
_lastHovered
)
{
return
;
}
this
.
_hideHoveredHighlighter
(
)
;
this
.
_lastHovered
=
event
.
target
;
const
view
=
this
.
isRuleView
(
this
.
_lastHovered
)
?
this
.
inspector
.
getPanel
(
"
ruleview
"
)
.
view
:
this
.
inspector
.
getPanel
(
"
computedview
"
)
.
computedView
;
const
nodeInfo
=
view
.
getNodeInfo
(
event
.
target
)
;
if
(
!
nodeInfo
)
{
return
;
}
if
(
this
.
isRuleViewShapePoint
(
nodeInfo
)
)
{
const
{
point
}
=
nodeInfo
.
value
;
this
.
hoverPointShapesHighlighter
(
this
.
inspector
.
selection
.
nodeFront
point
)
;
return
;
}
let
type
;
if
(
this
.
_isRuleViewTransform
(
nodeInfo
)
|
|
this
.
_isComputedViewTransform
(
nodeInfo
)
)
{
type
=
"
CssTransformHighlighter
"
;
}
if
(
type
)
{
this
.
hoveredHighlighterShown
=
type
;
const
node
=
this
.
inspector
.
selection
.
nodeFront
;
this
.
_getHighlighter
(
type
)
.
then
(
highlighter
=
>
highlighter
.
show
(
node
)
)
.
then
(
shown
=
>
{
if
(
shown
)
{
this
.
emit
(
"
css
-
transform
-
highlighter
-
shown
"
)
;
}
}
)
;
}
}
onMouseOut
(
event
)
{
if
(
!
this
.
_lastHovered
|
|
(
event
&
&
this
.
_lastHovered
.
contains
(
event
.
relatedTarget
)
)
)
{
return
;
}
const
view
=
this
.
isRuleView
(
this
.
_lastHovered
)
?
this
.
inspector
.
getPanel
(
"
ruleview
"
)
.
view
:
this
.
inspector
.
getPanel
(
"
computedview
"
)
.
computedView
;
const
nodeInfo
=
view
.
getNodeInfo
(
this
.
_lastHovered
)
;
if
(
nodeInfo
&
&
this
.
isRuleViewShapePoint
(
nodeInfo
)
)
{
this
.
hoverPointShapesHighlighter
(
this
.
inspector
.
selection
.
nodeFront
null
)
;
}
this
.
_lastHovered
=
null
;
this
.
_hideHoveredHighlighter
(
)
;
}
async
_onResourceAvailable
(
resources
)
{
for
(
const
resource
of
resources
)
{
if
(
resource
.
resourceType
!
=
=
this
.
resourceWatcher
.
TYPES
.
ROOT_NODE
)
{
continue
;
}
if
(
resource
.
targetFront
.
isTopLevel
&
&
resource
.
isTopLevelDocument
)
{
continue
;
}
await
this
.
_updateHighlighters
(
)
;
}
}
async
onMarkupMutation
(
mutations
)
{
const
hasInterestingMutation
=
mutations
.
some
(
mut
=
>
mut
.
type
=
=
=
"
childList
"
)
;
if
(
!
hasInterestingMutation
)
{
return
;
}
await
this
.
_updateHighlighters
(
)
;
}
async
_updateHighlighters
(
)
{
for
(
const
node
of
this
.
gridHighlighters
.
keys
(
)
)
{
await
this
.
_hideHighlighterIfDeadNode
(
node
this
.
hideGridHighlighter
)
;
}
for
(
const
node
of
this
.
parentGridHighlighters
.
keys
(
)
)
{
await
this
.
_hideHighlighterIfDeadNode
(
node
this
.
hideGridHighlighter
)
;
}
await
this
.
_hideHighlighterIfDeadNode
(
this
.
flexboxHighlighterShown
this
.
hideFlexboxHighlighter
)
;
await
this
.
_hideHighlighterIfDeadNode
(
this
.
shapesHighlighterShown
this
.
hideShapesHighlighter
)
;
}
async
onWillNavigate
(
)
{
this
.
destroyEditors
(
)
;
for
(
const
highlighter
of
this
.
gridHighlighters
.
values
(
)
)
{
this
.
extraGridHighlighterPool
.
push
(
highlighter
)
;
}
for
(
const
highlighter
of
this
.
parentGridHighlighters
.
values
(
)
)
{
this
.
extraGridHighlighterPool
.
push
(
highlighter
)
;
}
for
(
const
{
highlighter
timer
}
of
this
.
_activeHighlighters
.
values
(
)
)
{
await
highlighter
.
hide
(
)
;
clearTimeout
(
timer
)
;
}
this
.
_activeHighlighters
.
clear
(
)
;
this
.
gridHighlighters
.
clear
(
)
;
this
.
parentGridHighlighters
.
clear
(
)
;
this
.
subgridToParentMap
.
clear
(
)
;
this
.
flexboxHighlighterShown
=
null
;
this
.
geometryEditorHighlighterShown
=
null
;
this
.
hoveredHighlighterShown
=
null
;
this
.
shapesHighlighterShown
=
null
;
}
destroyEditors
(
)
{
for
(
const
type
in
this
.
editors
)
{
this
.
editors
[
type
]
.
off
(
"
show
"
)
;
this
.
editors
[
type
]
.
off
(
"
hide
"
)
;
this
.
editors
[
type
]
.
destroy
(
)
;
}
this
.
editors
=
{
}
;
}
destroyGridHighlighters
(
)
{
for
(
const
highlighter
of
this
.
gridHighlighters
.
values
(
)
)
{
highlighter
.
finalize
(
)
;
}
for
(
const
highlighter
of
this
.
parentGridHighlighters
.
values
(
)
)
{
highlighter
.
finalize
(
)
;
}
for
(
const
highlighter
of
this
.
extraGridHighlighterPool
)
{
highlighter
.
finalize
(
)
;
}
this
.
gridHighlighters
.
clear
(
)
;
this
.
parentGridHighlighters
.
clear
(
)
;
this
.
gridHighlighters
=
null
;
this
.
parentGridHighlighters
=
null
;
this
.
extraGridHighlighterPool
=
null
;
}
destroyHighlighters
(
)
{
for
(
const
{
highlighter
timer
}
of
this
.
_activeHighlighters
.
values
(
)
)
{
highlighter
.
finalize
(
)
;
clearTimeout
(
timer
)
;
}
this
.
_activeHighlighters
.
clear
(
)
;
for
(
const
type
in
this
.
highlighters
)
{
if
(
this
.
highlighters
[
type
]
)
{
this
.
highlighters
[
type
]
.
finalize
(
)
;
this
.
highlighters
[
type
]
=
null
;
}
}
this
.
highlighters
=
null
;
}
destroy
(
)
{
this
.
inspector
.
off
(
"
markupmutation
"
this
.
onMarkupMutation
)
;
this
.
resourceWatcher
.
unwatchResources
(
[
this
.
resourceWatcher
.
TYPES
.
ROOT_NODE
]
{
onAvailable
:
this
.
_onResourceAvailable
}
)
;
this
.
target
.
off
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
this
.
walker
.
off
(
"
display
-
change
"
this
.
onDisplayChange
)
;
this
.
destroyEditors
(
)
;
this
.
destroyGridHighlighters
(
)
;
this
.
destroyHighlighters
(
)
;
this
.
subgridToParentMap
.
clear
(
)
;
this
.
_lastHovered
=
null
;
this
.
inspector
=
null
;
this
.
inspectorFront
=
null
;
this
.
state
=
null
;
this
.
store
=
null
;
this
.
subgridToParentMap
=
null
;
this
.
target
=
null
;
this
.
telemetry
=
null
;
this
.
walker
=
null
;
this
.
flexboxHighlighterShown
=
null
;
this
.
geometryEditorHighlighterShown
=
null
;
this
.
hoveredHighlighterShown
=
null
;
this
.
shapesHighlighterShown
=
null
;
this
.
destroyed
=
true
;
}
}
HighlightersOverlay
.
TYPES
=
HighlightersOverlay
.
prototype
.
TYPES
=
TYPES
;
module
.
exports
=
HighlightersOverlay
;
