"
use
strict
"
;
const
promise
=
require
(
"
promise
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
VIEW_NODE_VALUE_TYPE
}
=
require
(
"
devtools
/
client
/
inspector
/
shared
/
node
-
types
"
)
;
function
HighlightersOverlay
(
inspector
)
{
this
.
inspector
=
inspector
;
this
.
highlighters
=
{
}
;
this
.
highlighterUtils
=
this
.
inspector
.
toolbox
.
highlighterUtils
;
this
.
supportsHighlighters
=
this
.
highlighterUtils
.
supportsCustomHighlighters
(
)
;
this
.
gridHighlighterShown
=
null
;
this
.
hoveredHighlighterShown
=
null
;
this
.
selectorHighlighterShown
=
null
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
this
.
onMouseMove
=
this
.
onMouseMove
.
bind
(
this
)
;
this
.
onMouseOut
=
this
.
onMouseOut
.
bind
(
this
)
;
this
.
onWillNavigate
=
this
.
onWillNavigate
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
HighlightersOverlay
.
prototype
=
{
get
isRuleView
(
)
{
return
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
"
ruleview
"
;
}
addToView
:
function
(
view
)
{
if
(
!
this
.
supportsHighlighters
)
{
return
;
}
let
el
=
view
.
element
;
el
.
addEventListener
(
"
click
"
this
.
onClick
true
)
;
el
.
addEventListener
(
"
mousemove
"
this
.
onMouseMove
)
;
el
.
addEventListener
(
"
mouseout
"
this
.
onMouseOut
)
;
el
.
ownerDocument
.
defaultView
.
addEventListener
(
"
mouseout
"
this
.
onMouseOut
)
;
this
.
inspector
.
target
.
on
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
}
removeFromView
:
function
(
view
)
{
if
(
!
this
.
supportsHighlighters
)
{
return
;
}
let
el
=
view
.
element
;
el
.
removeEventListener
(
"
click
"
this
.
onClick
true
)
;
el
.
removeEventListener
(
"
mousemove
"
this
.
onMouseMove
)
;
el
.
removeEventListener
(
"
mouseout
"
this
.
onMouseOut
)
;
this
.
inspector
.
target
.
off
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
}
toggleGridHighlighter
:
Task
.
async
(
function
*
(
node
options
=
{
}
)
{
if
(
node
=
=
this
.
gridHighlighterShown
)
{
yield
this
.
hideGridHighlighter
(
node
)
;
return
;
}
yield
this
.
showGridHighlighter
(
node
options
)
;
}
)
showGridHighlighter
:
Task
.
async
(
function
*
(
node
options
)
{
let
highlighter
=
yield
this
.
_getHighlighter
(
"
CssGridHighlighter
"
)
;
if
(
!
highlighter
)
{
return
;
}
let
isShown
=
yield
highlighter
.
show
(
node
options
)
;
if
(
!
isShown
)
{
return
;
}
this
.
_toggleRuleViewGridIcon
(
node
true
)
;
this
.
emit
(
"
grid
-
highlighter
-
shown
"
node
)
;
this
.
gridHighlighterShown
=
node
;
}
)
hideGridHighlighter
:
Task
.
async
(
function
*
(
node
)
{
if
(
!
this
.
gridHighlighterShown
|
|
!
this
.
highlighters
.
CssGridHighlighter
)
{
return
;
}
this
.
_toggleRuleViewGridIcon
(
node
false
)
;
yield
this
.
highlighters
.
CssGridHighlighter
.
hide
(
)
;
this
.
emit
(
"
grid
-
highlighter
-
hidden
"
this
.
gridHighlighterShown
)
;
this
.
gridHighlighterShown
=
null
;
}
)
_getHighlighter
:
function
(
type
)
{
let
utils
=
this
.
highlighterUtils
;
if
(
this
.
highlighters
[
type
]
)
{
return
promise
.
resolve
(
this
.
highlighters
[
type
]
)
;
}
return
utils
.
getHighlighterByType
(
type
)
.
then
(
highlighter
=
>
{
this
.
highlighters
[
type
]
=
highlighter
;
return
highlighter
;
}
)
;
}
_toggleRuleViewGridIcon
:
function
(
node
active
)
{
if
(
this
.
inspector
.
selection
.
nodeFront
!
=
node
)
{
return
;
}
let
ruleViewEl
=
this
.
inspector
.
ruleview
.
view
.
element
;
for
(
let
gridIcon
of
ruleViewEl
.
querySelectorAll
(
"
.
ruleview
-
grid
"
)
)
{
gridIcon
.
classList
.
toggle
(
"
active
"
active
)
;
}
}
_hideHoveredHighlighter
:
function
(
)
{
if
(
!
this
.
hoveredHighlighterShown
|
|
!
this
.
highlighters
[
this
.
hoveredHighlighterShown
]
)
{
return
;
}
let
onHidden
=
this
.
highlighters
[
this
.
hoveredHighlighterShown
]
.
hide
(
)
;
if
(
onHidden
)
{
onHidden
.
then
(
null
e
=
>
console
.
error
(
e
)
)
;
}
this
.
hoveredHighlighterShown
=
null
;
this
.
emit
(
"
highlighter
-
hidden
"
)
;
}
_isComputedViewTransform
:
function
(
nodeInfo
)
{
let
isTransform
=
nodeInfo
.
type
=
=
=
VIEW_NODE_VALUE_TYPE
&
&
nodeInfo
.
value
.
property
=
=
=
"
transform
"
;
return
!
this
.
isRuleView
&
&
isTransform
;
}
_isRuleViewDisplayGrid
:
function
(
node
)
{
return
this
.
isRuleView
&
&
node
.
classList
.
contains
(
"
ruleview
-
grid
"
)
;
}
_isRuleViewTransform
:
function
(
nodeInfo
)
{
let
isTransform
=
nodeInfo
.
type
=
=
=
VIEW_NODE_VALUE_TYPE
&
&
nodeInfo
.
value
.
property
=
=
=
"
transform
"
;
let
isEnabled
=
nodeInfo
.
value
.
enabled
&
&
!
nodeInfo
.
value
.
overridden
&
&
!
nodeInfo
.
value
.
pseudoElement
;
return
this
.
isRuleView
&
&
isTransform
&
&
isEnabled
;
}
onClick
:
function
(
event
)
{
if
(
!
this
.
_isRuleViewDisplayGrid
(
event
.
target
)
)
{
return
;
}
event
.
stopPropagation
(
)
;
this
.
toggleGridHighlighter
(
this
.
inspector
.
selection
.
nodeFront
)
;
}
onMouseMove
:
function
(
event
)
{
if
(
event
.
target
=
=
=
this
.
_lastHovered
)
{
return
;
}
this
.
_hideHoveredHighlighter
(
)
;
this
.
_lastHovered
=
event
.
target
;
let
view
=
this
.
isRuleView
?
this
.
inspector
.
ruleview
.
view
:
this
.
inspector
.
computedview
.
computedView
;
let
nodeInfo
=
view
.
getNodeInfo
(
event
.
target
)
;
if
(
!
nodeInfo
)
{
return
;
}
let
type
;
if
(
this
.
_isRuleViewTransform
(
nodeInfo
)
|
|
this
.
_isComputedViewTransform
(
nodeInfo
)
)
{
type
=
"
CssTransformHighlighter
"
;
}
if
(
type
)
{
this
.
hoveredHighlighterShown
=
type
;
let
node
=
this
.
inspector
.
selection
.
nodeFront
;
this
.
_getHighlighter
(
type
)
.
then
(
highlighter
=
>
highlighter
.
show
(
node
)
)
.
then
(
shown
=
>
{
if
(
shown
)
{
this
.
emit
(
"
highlighter
-
shown
"
)
;
}
}
)
;
}
}
onMouseOut
:
function
(
event
)
{
if
(
!
this
.
_lastHovered
|
|
(
event
&
&
this
.
_lastHovered
.
contains
(
event
.
relatedTarget
)
)
)
{
return
;
}
this
.
_lastHovered
=
null
;
this
.
_hideHoveredHighlighter
(
)
;
}
onWillNavigate
:
function
(
)
{
this
.
gridHighlighterShown
=
null
;
this
.
hoveredHighlighterShown
=
null
;
this
.
selectorHighlighterShown
=
null
;
}
destroy
:
function
(
)
{
for
(
let
type
in
this
.
highlighters
)
{
if
(
this
.
highlighters
[
type
]
)
{
this
.
highlighters
[
type
]
.
finalize
(
)
;
this
.
highlighters
[
type
]
=
null
;
}
}
this
.
_lastHovered
=
null
;
this
.
inspector
=
null
;
this
.
highlighters
=
null
;
this
.
highlighterUtils
=
null
;
this
.
supportsHighlighters
=
null
;
this
.
gridHighlighterShown
=
null
;
this
.
hoveredHighlighterShown
=
null
;
this
.
selectorHighlighterShown
=
null
;
}
}
;
module
.
exports
=
HighlightersOverlay
;
