"
use
strict
"
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
{
appinfo
}
=
require
(
"
Services
"
)
;
const
{
buildFakeToolbox
Inspector
}
=
require
(
"
.
/
inspector
"
)
;
function
onConnect
(
arg
)
{
if
(
!
arg
|
|
!
arg
.
client
)
{
return
;
}
let
client
=
arg
.
client
;
const
tabTarget
=
client
.
getTabTarget
(
)
;
let
threadClient
=
{
paused
:
false
}
;
buildFakeToolbox
(
tabTarget
(
)
=
>
threadClient
{
React
ReactDOM
browserRequire
:
(
)
=
>
{
}
}
)
.
then
(
function
(
fakeToolbox
)
{
let
inspector
=
new
Inspector
(
fakeToolbox
)
;
inspector
.
init
(
)
;
}
)
;
}
function
fixStylesheets
(
doc
)
{
let
links
=
doc
.
head
.
querySelectorAll
(
"
link
"
)
;
for
(
let
link
of
links
)
{
link
.
href
=
link
.
href
.
replace
(
/
(
resource
|
chrome
)
\
:
\
/
\
/
/
"
/
"
)
;
}
let
themeLink
=
doc
.
createElement
(
"
link
"
)
;
themeLink
.
setAttribute
(
"
rel
"
"
stylesheet
"
)
;
themeLink
.
setAttribute
(
"
href
"
"
/
devtools
/
skin
/
light
-
theme
.
css
"
)
;
doc
.
head
.
appendChild
(
themeLink
)
;
doc
.
documentElement
.
classList
.
add
(
"
theme
-
light
"
)
;
doc
.
body
.
classList
.
add
(
"
theme
-
light
"
)
;
if
(
appinfo
.
OS
=
=
=
"
Darwin
"
)
{
doc
.
documentElement
.
setAttribute
(
"
platform
"
"
mac
"
)
;
}
else
if
(
appinfo
.
OS
=
=
=
"
Linux
"
)
{
doc
.
documentElement
.
setAttribute
(
"
platform
"
"
linux
"
)
;
}
else
{
doc
.
documentElement
.
setAttribute
(
"
platform
"
"
win
"
)
;
}
}
function
fixStylesheetsOnMutation
(
)
{
let
frames
=
document
.
body
.
querySelectorAll
(
"
iframe
"
)
;
for
(
let
frame
of
frames
)
{
let
doc
=
frame
.
contentDocument
|
|
frame
.
contentWindow
.
document
;
if
(
doc
.
__fixStylesheetsFlag
)
{
continue
;
}
doc
.
__fixStylesheetsFlag
=
true
;
if
(
doc
.
readyState
!
=
=
"
complete
"
)
{
frame
.
contentWindow
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
fixStylesheets
(
doc
)
;
}
{
once
:
true
}
)
;
}
else
{
fixStylesheets
(
doc
)
;
}
}
}
window
.
addEventListener
(
"
DOMContentLoaded
"
function
(
)
{
fixStylesheets
(
document
)
;
new
window
.
MutationObserver
(
mutations
=
>
{
fixStylesheetsOnMutation
(
)
;
}
)
.
observe
(
document
.
body
{
childList
:
true
subtree
:
true
}
)
;
const
hasFirefoxTabParam
=
window
.
location
.
href
.
indexOf
(
"
firefox
-
tab
"
)
!
=
-
1
;
if
(
!
hasFirefoxTabParam
)
{
const
inspectorRoot
=
document
.
querySelector
(
"
.
inspector
"
)
;
inspectorRoot
.
remove
(
)
;
let
mount
=
document
.
createElement
(
"
div
"
)
;
mount
.
setAttribute
(
"
id
"
"
mount
"
)
;
document
.
body
.
appendChild
(
mount
)
;
}
const
{
bootstrap
}
=
require
(
"
devtools
-
launchpad
"
)
;
bootstrap
(
React
ReactDOM
)
.
then
(
onConnect
)
;
}
{
once
:
true
}
)
;
