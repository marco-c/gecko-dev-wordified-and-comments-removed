"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
class
NodePicker
extends
EventEmitter
{
constructor
(
targetList
selection
)
{
super
(
)
;
this
.
targetList
=
targetList
;
this
.
selection
=
selection
;
this
.
isPicking
=
false
;
this
.
_currentInspectorFronts
=
[
]
;
this
.
cancel
=
this
.
cancel
.
bind
(
this
)
;
this
.
start
=
this
.
start
.
bind
(
this
)
;
this
.
stop
=
this
.
stop
.
bind
(
this
)
;
this
.
togglePicker
=
this
.
togglePicker
.
bind
(
this
)
;
this
.
_onHovered
=
this
.
_onHovered
.
bind
(
this
)
;
this
.
_onPicked
=
this
.
_onPicked
.
bind
(
this
)
;
this
.
_onPreviewed
=
this
.
_onPreviewed
.
bind
(
this
)
;
this
.
_onCanceled
=
this
.
_onCanceled
.
bind
(
this
)
;
}
togglePicker
(
doFocus
)
{
if
(
this
.
isPicking
)
{
return
this
.
stop
(
)
;
}
return
this
.
start
(
doFocus
)
;
}
async
start
(
doFocus
)
{
if
(
this
.
isPicking
)
{
return
;
}
this
.
isPicking
=
true
;
this
.
emit
(
"
picker
-
starting
"
)
;
this
.
_currentInspectorFronts
=
await
this
.
targetList
.
getAllFronts
(
this
.
targetList
.
TYPES
.
FRAME
"
inspector
"
)
;
for
(
const
{
walker
}
of
this
.
_currentInspectorFronts
)
{
walker
.
on
(
"
picker
-
node
-
hovered
"
this
.
_onHovered
)
;
walker
.
on
(
"
picker
-
node
-
picked
"
this
.
_onPicked
)
;
walker
.
on
(
"
picker
-
node
-
previewed
"
this
.
_onPreviewed
)
;
walker
.
on
(
"
picker
-
node
-
canceled
"
this
.
_onCanceled
)
;
await
walker
.
pick
(
doFocus
)
;
}
this
.
emit
(
"
picker
-
started
"
)
;
}
async
stop
(
)
{
if
(
!
this
.
isPicking
)
{
return
;
}
this
.
isPicking
=
false
;
for
(
const
{
walker
}
of
this
.
_currentInspectorFronts
)
{
walker
.
off
(
"
picker
-
node
-
hovered
"
this
.
_onHovered
)
;
walker
.
off
(
"
picker
-
node
-
picked
"
this
.
_onPicked
)
;
walker
.
off
(
"
picker
-
node
-
previewed
"
this
.
_onPreviewed
)
;
walker
.
off
(
"
picker
-
node
-
canceled
"
this
.
_onCanceled
)
;
await
walker
.
cancelPick
(
)
;
}
this
.
_currentInspectorFronts
=
[
]
;
this
.
emit
(
"
picker
-
stopped
"
)
;
}
async
cancel
(
)
{
Promise
.
all
(
this
.
_currentInspectorFronts
.
map
(
(
{
highlighter
}
)
=
>
highlighter
.
hideBoxModel
(
)
)
)
.
catch
(
e
=
>
console
.
error
)
;
await
this
.
stop
(
)
;
this
.
emit
(
"
picker
-
node
-
canceled
"
)
;
}
async
_onHovered
(
data
)
{
this
.
emit
(
"
picker
-
node
-
hovered
"
data
.
node
)
;
await
data
.
node
.
highlighterFront
.
showBoxModel
(
data
.
node
)
;
const
unmatchedInspectors
=
this
.
_currentInspectorFronts
.
filter
(
(
{
highlighter
}
)
=
>
highlighter
!
=
=
data
.
node
.
highlighterFront
)
;
Promise
.
all
(
unmatchedInspectors
.
map
(
(
{
highlighter
}
)
=
>
highlighter
.
hideBoxModel
(
)
)
)
.
catch
(
e
=
>
console
.
error
)
;
}
_onPicked
(
data
)
{
this
.
emit
(
"
picker
-
node
-
picked
"
data
.
node
)
;
return
this
.
stop
(
)
;
}
async
_onPreviewed
(
data
)
{
this
.
emit
(
"
picker
-
node
-
previewed
"
data
.
node
)
;
await
data
.
node
.
highlighterFront
.
showBoxModel
(
data
.
node
)
;
}
_onCanceled
(
)
{
return
this
.
cancel
(
)
;
}
}
module
.
exports
=
NodePicker
;
