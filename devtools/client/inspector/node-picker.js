"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
class
NodePicker
extends
EventEmitter
{
constructor
(
targetCommand
selection
)
{
super
(
)
;
this
.
targetCommand
=
targetCommand
;
this
.
isPicking
=
false
;
this
.
doFocus
=
false
;
this
.
_currentInspectorFronts
=
new
Set
(
)
;
this
.
_onInspectorFrontAvailable
=
this
.
_onInspectorFrontAvailable
.
bind
(
this
)
;
this
.
_onInspectorFrontDestroyed
=
this
.
_onInspectorFrontDestroyed
.
bind
(
this
)
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
this
.
start
=
this
.
start
.
bind
(
this
)
;
this
.
stop
=
this
.
stop
.
bind
(
this
)
;
this
.
togglePicker
=
this
.
togglePicker
.
bind
(
this
)
;
this
.
_onHovered
=
this
.
_onHovered
.
bind
(
this
)
;
this
.
_onPicked
=
this
.
_onPicked
.
bind
(
this
)
;
this
.
_onPreviewed
=
this
.
_onPreviewed
.
bind
(
this
)
;
this
.
_onCanceled
=
this
.
_onCanceled
.
bind
(
this
)
;
}
togglePicker
(
doFocus
)
{
if
(
this
.
isPicking
)
{
return
this
.
stop
(
{
canceled
:
true
}
)
;
}
return
this
.
start
(
doFocus
)
;
}
async
_onInspectorFrontAvailable
(
inspectorFront
)
{
this
.
_currentInspectorFronts
.
add
(
inspectorFront
)
;
await
inspectorFront
.
initialize
(
)
;
const
{
walker
}
=
inspectorFront
;
walker
.
on
(
"
picker
-
node
-
hovered
"
this
.
_onHovered
)
;
walker
.
on
(
"
picker
-
node
-
picked
"
this
.
_onPicked
)
;
walker
.
on
(
"
picker
-
node
-
previewed
"
this
.
_onPreviewed
)
;
walker
.
on
(
"
picker
-
node
-
canceled
"
this
.
_onCanceled
)
;
await
walker
.
pick
(
this
.
doFocus
)
;
this
.
emitForTests
(
"
inspector
-
front
-
ready
-
for
-
picker
"
walker
)
;
}
async
_onInspectorFrontDestroyed
(
inspectorFront
{
isDestroyCodepath
}
=
{
}
)
{
this
.
_currentInspectorFronts
.
delete
(
inspectorFront
)
;
const
{
walker
}
=
inspectorFront
;
if
(
!
walker
)
{
return
;
}
walker
.
off
(
"
picker
-
node
-
hovered
"
this
.
_onHovered
)
;
walker
.
off
(
"
picker
-
node
-
picked
"
this
.
_onPicked
)
;
walker
.
off
(
"
picker
-
node
-
previewed
"
this
.
_onPreviewed
)
;
walker
.
off
(
"
picker
-
node
-
canceled
"
this
.
_onCanceled
)
;
if
(
!
isDestroyCodepath
)
{
await
walker
.
cancelPick
(
)
;
}
}
async
_onTargetAvailable
(
{
targetFront
}
)
{
targetFront
.
watchFronts
(
"
inspector
"
this
.
_onInspectorFrontAvailable
this
.
_onInspectorFrontDestroyed
)
;
}
async
start
(
doFocus
)
{
if
(
this
.
isPicking
)
{
return
;
}
this
.
isPicking
=
true
;
this
.
doFocus
=
doFocus
;
this
.
emit
(
"
picker
-
starting
"
)
;
this
.
targetCommand
.
watchTargets
(
this
.
targetCommand
.
ALL_TYPES
this
.
_onTargetAvailable
)
;
this
.
emit
(
"
picker
-
started
"
)
;
}
async
stop
(
{
isDestroyCodepath
canceled
}
=
{
}
)
{
if
(
!
this
.
isPicking
)
{
return
;
}
this
.
isPicking
=
false
;
this
.
doFocus
=
false
;
this
.
targetCommand
.
unwatchTargets
(
this
.
targetCommand
.
ALL_TYPES
this
.
_onTargetAvailable
)
;
for
(
const
inspectorFront
of
this
.
_currentInspectorFronts
)
{
await
this
.
_onInspectorFrontDestroyed
(
inspectorFront
{
isDestroyCodepath
}
)
;
}
this
.
_currentInspectorFronts
.
clear
(
)
;
this
.
emit
(
"
picker
-
stopped
"
)
;
if
(
canceled
)
{
this
.
emit
(
"
picker
-
node
-
canceled
"
)
;
}
}
destroy
(
)
{
this
.
stop
(
{
isDestroyCodepath
:
true
}
)
;
this
.
targetCommand
=
null
;
}
_onHovered
(
data
)
{
this
.
emit
(
"
picker
-
node
-
hovered
"
data
.
node
)
;
for
(
const
inspectorFront
of
this
.
_currentInspectorFronts
)
{
if
(
inspectorFront
.
walker
!
=
=
data
.
node
.
walkerFront
)
{
inspectorFront
.
walker
.
clearPicker
(
)
;
}
}
}
_onPicked
(
data
)
{
this
.
emit
(
"
picker
-
node
-
picked
"
data
.
node
)
;
return
this
.
stop
(
)
;
}
_onPreviewed
(
data
)
{
this
.
emit
(
"
picker
-
node
-
previewed
"
data
.
node
)
;
}
_onCanceled
(
)
{
return
this
.
stop
(
{
canceled
:
true
}
)
;
}
}
module
.
exports
=
NodePicker
;
