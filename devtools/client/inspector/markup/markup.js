"
use
strict
"
;
const
{
Cc
Ci
}
=
require
(
"
chrome
"
)
;
const
PAGE_SIZE
=
10
;
const
DEFAULT_MAX_CHILDREN
=
100
;
const
COLLAPSE_DATA_URL_REGEX
=
/
^
data
.
+
base64
/
;
const
COLLAPSE_DATA_URL_LENGTH
=
60
;
const
NEW_SELECTION_HIGHLIGHTER_TIMER
=
1000
;
const
DRAG_DROP_AUTOSCROLL_EDGE_MAX_DISTANCE
=
50
;
const
DRAG_DROP_AUTOSCROLL_EDGE_RATIO
=
0
.
1
;
const
DRAG_DROP_MIN_AUTOSCROLL_SPEED
=
2
;
const
DRAG_DROP_MAX_AUTOSCROLL_SPEED
=
8
;
const
DRAG_DROP_MIN_INITIAL_DISTANCE
=
10
;
const
DRAG_DROP_HEIGHT_TO_SPEED
=
500
;
const
DRAG_DROP_HEIGHT_TO_SPEED_MIN
=
0
.
5
;
const
DRAG_DROP_HEIGHT_TO_SPEED_MAX
=
1
;
const
ATTR_COLLAPSE_ENABLED_PREF
=
"
devtools
.
markup
.
collapseAttributes
"
;
const
ATTR_COLLAPSE_LENGTH_PREF
=
"
devtools
.
markup
.
collapseAttributeLength
"
;
const
PREVIEW_MAX_DIM_PREF
=
"
devtools
.
inspector
.
imagePreviewTooltipSize
"
;
const
HTML_VOID_ELEMENTS
=
[
"
area
"
"
base
"
"
br
"
"
col
"
"
command
"
"
embed
"
"
hr
"
"
img
"
"
input
"
"
keygen
"
"
link
"
"
meta
"
"
param
"
"
source
"
"
track
"
"
wbr
"
]
;
const
{
UndoStack
}
=
require
(
"
devtools
/
client
/
shared
/
undo
"
)
;
const
{
editableField
InplaceEditor
}
=
require
(
"
devtools
/
client
/
shared
/
inplace
-
editor
"
)
;
const
{
HTMLEditor
}
=
require
(
"
devtools
/
client
/
inspector
/
markup
/
html
-
editor
"
)
;
const
promise
=
require
(
"
promise
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
HTMLTooltip
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
HTMLTooltip
"
)
;
const
{
setImageTooltip
setBrokenImageTooltip
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
ImageTooltipHelper
"
)
;
const
{
setEventTooltip
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
EventTooltipHelper
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
Heritage
=
require
(
"
sdk
/
core
/
heritage
"
)
;
const
{
parseAttribute
}
=
require
(
"
devtools
/
client
/
shared
/
node
-
attribute
-
parser
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
scrollIntoViewIfNeeded
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
const
{
PrefObserver
}
=
require
(
"
devtools
/
client
/
styleeditor
/
utils
"
)
;
const
{
KeyShortcuts
}
=
require
(
"
devtools
/
client
/
shared
/
key
-
shortcuts
"
)
;
const
{
template
}
=
require
(
"
devtools
/
shared
/
gcli
/
templater
"
)
;
const
nodeConstants
=
require
(
"
devtools
/
shared
/
dom
-
node
-
constants
"
)
;
const
nodeFilterConstants
=
require
(
"
devtools
/
shared
/
dom
-
node
-
filter
-
constants
"
)
;
const
{
XPCOMUtils
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
loader
.
lazyRequireGetter
(
this
"
CSS
"
"
CSS
"
)
;
loader
.
lazyGetter
(
this
"
AutocompletePopup
"
(
)
=
>
{
return
require
(
"
devtools
/
client
/
shared
/
autocomplete
-
popup
"
)
.
AutocompletePopup
;
}
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PluralForm
"
"
resource
:
/
/
gre
/
modules
/
PluralForm
.
jsm
"
)
;
function
MarkupView
(
inspector
frame
controllerWindow
)
{
this
.
_inspector
=
inspector
;
this
.
walker
=
this
.
_inspector
.
walker
;
this
.
_frame
=
frame
;
this
.
win
=
this
.
_frame
.
contentWindow
;
this
.
doc
=
this
.
_frame
.
contentDocument
;
this
.
_elt
=
this
.
doc
.
querySelector
(
"
#
root
"
)
;
this
.
htmlEditor
=
new
HTMLEditor
(
this
.
doc
)
;
try
{
this
.
maxChildren
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
markup
.
pagesize
"
)
;
}
catch
(
ex
)
{
this
.
maxChildren
=
DEFAULT_MAX_CHILDREN
;
}
this
.
collapseAttributes
=
Services
.
prefs
.
getBoolPref
(
ATTR_COLLAPSE_ENABLED_PREF
)
;
this
.
collapseAttributeLength
=
Services
.
prefs
.
getIntPref
(
ATTR_COLLAPSE_LENGTH_PREF
)
;
let
options
=
{
autoSelect
:
true
theme
:
"
auto
"
}
;
this
.
popup
=
new
AutocompletePopup
(
inspector
.
_toolbox
options
)
;
this
.
undo
=
new
UndoStack
(
)
;
this
.
undo
.
installController
(
controllerWindow
)
;
this
.
_containers
=
new
Map
(
)
;
this
.
_handleRejectionIfNotDestroyed
=
this
.
_handleRejectionIfNotDestroyed
.
bind
(
this
)
;
this
.
_mutationObserver
=
this
.
_mutationObserver
.
bind
(
this
)
;
this
.
_onDisplayChange
=
this
.
_onDisplayChange
.
bind
(
this
)
;
this
.
_onMouseClick
=
this
.
_onMouseClick
.
bind
(
this
)
;
this
.
_onMouseUp
=
this
.
_onMouseUp
.
bind
(
this
)
;
this
.
_onNewSelection
=
this
.
_onNewSelection
.
bind
(
this
)
;
this
.
_onCopy
=
this
.
_onCopy
.
bind
(
this
)
;
this
.
_onFocus
=
this
.
_onFocus
.
bind
(
this
)
;
this
.
_onMouseMove
=
this
.
_onMouseMove
.
bind
(
this
)
;
this
.
_onMouseOut
=
this
.
_onMouseOut
.
bind
(
this
)
;
this
.
_onToolboxPickerHover
=
this
.
_onToolboxPickerHover
.
bind
(
this
)
;
this
.
_onCollapseAttributesPrefChange
=
this
.
_onCollapseAttributesPrefChange
.
bind
(
this
)
;
this
.
_isImagePreviewTarget
=
this
.
_isImagePreviewTarget
.
bind
(
this
)
;
this
.
_onBlur
=
this
.
_onBlur
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
this
.
_elt
.
addEventListener
(
"
click
"
this
.
_onMouseClick
false
)
;
this
.
_elt
.
addEventListener
(
"
mousemove
"
this
.
_onMouseMove
false
)
;
this
.
_elt
.
addEventListener
(
"
mouseout
"
this
.
_onMouseOut
false
)
;
this
.
_elt
.
addEventListener
(
"
blur
"
this
.
_onBlur
true
)
;
this
.
win
.
addEventListener
(
"
mouseup
"
this
.
_onMouseUp
)
;
this
.
win
.
addEventListener
(
"
copy
"
this
.
_onCopy
)
;
this
.
_frame
.
addEventListener
(
"
focus
"
this
.
_onFocus
false
)
;
this
.
walker
.
on
(
"
mutations
"
this
.
_mutationObserver
)
;
this
.
walker
.
on
(
"
display
-
change
"
this
.
_onDisplayChange
)
;
this
.
_inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
_onNewSelection
)
;
this
.
_inspector
.
toolbox
.
on
(
"
picker
-
node
-
hovered
"
this
.
_onToolboxPickerHover
)
;
this
.
_onNewSelection
(
)
;
this
.
_initTooltips
(
)
;
this
.
_prefObserver
=
new
PrefObserver
(
"
devtools
.
markup
"
)
;
this
.
_prefObserver
.
on
(
ATTR_COLLAPSE_ENABLED_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_prefObserver
.
on
(
ATTR_COLLAPSE_LENGTH_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_initShortcuts
(
)
;
}
MarkupView
.
prototype
=
{
CONTAINER_FLASHING_DURATION
:
500
_selectedContainer
:
null
_handleRejectionIfNotDestroyed
:
function
(
e
)
{
if
(
!
this
.
_destroyer
)
{
console
.
error
(
e
)
;
}
}
_initTooltips
:
function
(
)
{
this
.
eventDetailsTooltip
=
new
HTMLTooltip
(
this
.
_inspector
.
toolbox
{
type
:
"
arrow
"
}
)
;
this
.
imagePreviewTooltip
=
new
HTMLTooltip
(
this
.
_inspector
.
toolbox
{
type
:
"
arrow
"
useXulWrapper
:
"
true
"
}
)
;
this
.
_enableImagePreviewTooltip
(
)
;
}
_enableImagePreviewTooltip
:
function
(
)
{
this
.
imagePreviewTooltip
.
startTogglingOnHover
(
this
.
_elt
this
.
_isImagePreviewTarget
)
;
}
_disableImagePreviewTooltip
:
function
(
)
{
this
.
imagePreviewTooltip
.
stopTogglingOnHover
(
)
;
}
_onToolboxPickerHover
:
function
(
event
nodeFront
)
{
this
.
showNode
(
nodeFront
)
.
then
(
(
)
=
>
{
this
.
_showContainerAsHovered
(
nodeFront
)
;
}
e
=
>
console
.
error
(
e
)
)
;
}
isDragging
:
false
_onMouseMove
:
function
(
event
)
{
let
target
=
event
.
target
;
if
(
this
.
isDragging
)
{
event
.
preventDefault
(
)
;
this
.
_autoScroll
(
event
)
;
return
;
}
while
(
!
target
.
container
)
{
if
(
target
.
tagName
.
toLowerCase
(
)
=
=
=
"
body
"
)
{
return
;
}
target
=
target
.
parentNode
;
}
let
container
=
target
.
container
;
if
(
this
.
_hoveredNode
!
=
=
container
.
node
)
{
if
(
container
.
node
.
nodeType
!
=
=
nodeConstants
.
TEXT_NODE
)
{
this
.
_showBoxModel
(
container
.
node
)
;
}
else
{
this
.
_hideBoxModel
(
)
;
}
}
this
.
_showContainerAsHovered
(
container
.
node
)
;
this
.
emit
(
"
node
-
hover
"
)
;
}
_onBlur
:
function
(
event
)
{
if
(
!
this
.
_selectedContainer
)
{
return
;
}
let
{
relatedTarget
}
=
event
;
if
(
relatedTarget
&
&
relatedTarget
.
ownerDocument
=
=
=
this
.
doc
)
{
return
;
}
if
(
this
.
_selectedContainer
)
{
this
.
_selectedContainer
.
clearFocus
(
)
;
}
}
_autoScroll
:
function
(
event
)
{
let
docEl
=
this
.
doc
.
documentElement
;
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
let
fromBottom
=
docEl
.
clientHeight
-
event
.
pageY
+
this
.
win
.
scrollY
;
let
fromTop
=
event
.
pageY
-
this
.
win
.
scrollY
;
let
edgeDistance
=
Math
.
min
(
DRAG_DROP_AUTOSCROLL_EDGE_MAX_DISTANCE
docEl
.
clientHeight
*
DRAG_DROP_AUTOSCROLL_EDGE_RATIO
)
;
let
heightToSpeedRatio
=
Math
.
max
(
DRAG_DROP_HEIGHT_TO_SPEED_MIN
Math
.
min
(
DRAG_DROP_HEIGHT_TO_SPEED_MAX
docEl
.
clientHeight
/
DRAG_DROP_HEIGHT_TO_SPEED
)
)
;
if
(
fromBottom
<
=
edgeDistance
)
{
let
speed
=
map
(
fromBottom
0
edgeDistance
DRAG_DROP_MIN_AUTOSCROLL_SPEED
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
this
.
_runUpdateLoop
(
(
)
=
>
{
docEl
.
scrollTop
-
=
heightToSpeedRatio
*
(
speed
-
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
}
)
;
}
if
(
fromTop
<
=
edgeDistance
)
{
let
speed
=
map
(
fromTop
0
edgeDistance
DRAG_DROP_MIN_AUTOSCROLL_SPEED
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
this
.
_runUpdateLoop
(
(
)
=
>
{
docEl
.
scrollTop
+
=
heightToSpeedRatio
*
(
speed
-
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
}
)
;
}
}
_runUpdateLoop
:
function
(
update
)
{
let
loop
=
(
)
=
>
{
update
(
)
;
this
.
_autoScrollAnimationFrame
=
this
.
win
.
requestAnimationFrame
(
loop
)
;
}
;
loop
(
)
;
}
_onMouseClick
:
function
(
event
)
{
let
parentNode
=
event
.
target
;
let
container
;
while
(
parentNode
!
=
=
this
.
doc
.
body
)
{
if
(
parentNode
.
container
)
{
container
=
parentNode
.
container
;
break
;
}
parentNode
=
parentNode
.
parentNode
;
}
if
(
container
instanceof
MarkupElementContainer
)
{
container
.
_buildEventTooltipContent
(
event
.
target
this
.
eventDetailsTooltip
)
;
}
}
_onMouseUp
:
function
(
)
{
this
.
indicateDropTarget
(
null
)
;
this
.
indicateDragTarget
(
null
)
;
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
}
_onCollapseAttributesPrefChange
:
function
(
)
{
this
.
collapseAttributes
=
Services
.
prefs
.
getBoolPref
(
ATTR_COLLAPSE_ENABLED_PREF
)
;
this
.
collapseAttributeLength
=
Services
.
prefs
.
getIntPref
(
ATTR_COLLAPSE_LENGTH_PREF
)
;
this
.
update
(
)
;
}
cancelDragging
:
function
(
)
{
if
(
!
this
.
isDragging
)
{
return
;
}
for
(
let
[
container
]
of
this
.
_containers
)
{
if
(
container
.
isDragging
)
{
container
.
cancelDragging
(
)
;
break
;
}
}
this
.
indicateDropTarget
(
null
)
;
this
.
indicateDragTarget
(
null
)
;
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
}
_hoveredNode
:
null
_showContainerAsHovered
:
function
(
nodeFront
)
{
if
(
this
.
_hoveredNode
=
=
=
nodeFront
)
{
return
;
}
if
(
this
.
_hoveredNode
)
{
this
.
getContainer
(
this
.
_hoveredNode
)
.
hovered
=
false
;
}
this
.
getContainer
(
nodeFront
)
.
hovered
=
true
;
this
.
_hoveredNode
=
nodeFront
;
}
_onMouseOut
:
function
(
event
)
{
if
(
this
.
_elt
.
contains
(
event
.
relatedTarget
)
)
{
return
;
}
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
if
(
this
.
isDragging
)
{
return
;
}
this
.
_hideBoxModel
(
true
)
;
if
(
this
.
_hoveredNode
)
{
this
.
getContainer
(
this
.
_hoveredNode
)
.
hovered
=
false
;
}
this
.
_hoveredNode
=
null
;
this
.
emit
(
"
leave
"
)
;
}
_showBoxModel
:
function
(
nodeFront
)
{
return
this
.
_inspector
.
toolbox
.
highlighterUtils
.
highlightNodeFront
(
nodeFront
)
;
}
_hideBoxModel
:
function
(
forceHide
)
{
return
this
.
_inspector
.
toolbox
.
highlighterUtils
.
unhighlight
(
forceHide
)
;
}
_briefBoxModelTimer
:
null
_clearBriefBoxModelTimer
:
function
(
)
{
if
(
this
.
_briefBoxModelTimer
)
{
clearTimeout
(
this
.
_briefBoxModelTimer
)
;
this
.
_briefBoxModelPromise
.
resolve
(
)
;
this
.
_briefBoxModelPromise
=
null
;
this
.
_briefBoxModelTimer
=
null
;
}
}
_brieflyShowBoxModel
:
function
(
nodeFront
)
{
this
.
_clearBriefBoxModelTimer
(
)
;
let
onShown
=
this
.
_showBoxModel
(
nodeFront
)
;
this
.
_briefBoxModelPromise
=
defer
(
)
;
this
.
_briefBoxModelTimer
=
setTimeout
(
(
)
=
>
{
this
.
_hideBoxModel
(
)
.
then
(
this
.
_briefBoxModelPromise
.
resolve
this
.
_briefBoxModelPromise
.
resolve
)
;
}
NEW_SELECTION_HIGHLIGHTER_TIMER
)
;
return
promise
.
all
(
[
onShown
this
.
_briefBoxModelPromise
.
promise
]
)
;
}
template
:
function
(
name
dest
options
=
{
stack
:
"
markup
.
xhtml
"
}
)
{
let
node
=
this
.
doc
.
getElementById
(
"
template
-
"
+
name
)
.
cloneNode
(
true
)
;
node
.
removeAttribute
(
"
id
"
)
;
template
(
node
dest
options
)
;
return
node
;
}
getContainer
:
function
(
node
)
{
return
this
.
_containers
.
get
(
node
)
;
}
update
:
function
(
)
{
let
updateChildren
=
(
node
)
=
>
{
this
.
getContainer
(
node
)
.
update
(
)
;
for
(
let
child
of
node
.
treeChildren
(
)
)
{
updateChildren
(
child
)
;
}
}
;
let
documentElement
;
for
(
let
node
of
this
.
_rootNode
.
treeChildren
(
)
)
{
if
(
node
.
isDocumentElement
=
=
=
true
)
{
documentElement
=
node
;
break
;
}
}
updateChildren
(
documentElement
)
;
}
_isImagePreviewTarget
:
Task
.
async
(
function
*
(
target
)
{
if
(
this
.
isDragging
)
{
return
false
;
}
let
parent
=
target
container
;
while
(
parent
!
=
=
this
.
doc
.
body
)
{
if
(
parent
.
container
)
{
container
=
parent
.
container
;
break
;
}
parent
=
parent
.
parentNode
;
}
if
(
container
instanceof
MarkupElementContainer
)
{
return
container
.
isImagePreviewTarget
(
target
this
.
imagePreviewTooltip
)
;
}
return
false
;
}
)
_shouldNewSelectionBeHighlighted
:
function
(
)
{
let
reason
=
this
.
_inspector
.
selection
.
reason
;
let
unwantedReasons
=
[
"
inspector
-
open
"
"
navigateaway
"
"
nodeselected
"
"
test
"
]
;
let
isHighlight
=
this
.
_hoveredNode
=
=
=
this
.
_inspector
.
selection
.
nodeFront
;
return
!
isHighlight
&
&
reason
&
&
unwantedReasons
.
indexOf
(
reason
)
=
=
=
-
1
;
}
_onNewSelection
:
function
(
)
{
let
selection
=
this
.
_inspector
.
selection
;
this
.
htmlEditor
.
hide
(
)
;
if
(
this
.
_hoveredNode
&
&
this
.
_hoveredNode
!
=
=
selection
.
nodeFront
)
{
this
.
getContainer
(
this
.
_hoveredNode
)
.
hovered
=
false
;
this
.
_hoveredNode
=
null
;
}
if
(
!
selection
.
isNode
(
)
)
{
this
.
unmarkSelectedNode
(
)
;
return
;
}
let
done
=
this
.
_inspector
.
updating
(
"
markup
-
view
"
)
;
let
onShowBoxModel
onShow
;
if
(
this
.
_shouldNewSelectionBeHighlighted
(
)
)
{
onShowBoxModel
=
this
.
_brieflyShowBoxModel
(
selection
.
nodeFront
)
;
}
onShow
=
this
.
showNode
(
selection
.
nodeFront
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyer
)
{
return
promise
.
reject
(
"
markupview
destroyed
"
)
;
}
this
.
markNodeAsSelected
(
selection
.
nodeFront
)
;
this
.
maybeNavigateToNewSelection
(
)
;
return
undefined
;
}
)
.
catch
(
this
.
_handleRejectionIfNotDestroyed
)
;
promise
.
all
(
[
onShowBoxModel
onShow
]
)
.
then
(
done
)
;
}
maybeNavigateToNewSelection
:
function
(
)
{
let
{
reason
nodeFront
}
=
this
.
_inspector
.
selection
;
let
reasonsToNavigate
=
[
"
picker
-
node
-
picked
"
"
browser
-
context
-
menu
"
"
node
-
inserted
"
]
;
if
(
reasonsToNavigate
.
includes
(
reason
)
)
{
this
.
getContainer
(
this
.
_rootNode
)
.
elt
.
focus
(
)
;
this
.
navigate
(
this
.
getContainer
(
nodeFront
)
)
;
}
}
_selectionWalker
:
function
(
start
)
{
let
walker
=
this
.
doc
.
createTreeWalker
(
start
|
|
this
.
_elt
nodeFilterConstants
.
SHOW_ELEMENT
function
(
element
)
{
if
(
element
.
container
&
&
element
.
container
.
elt
=
=
=
element
&
&
element
.
container
.
visible
)
{
return
nodeFilterConstants
.
FILTER_ACCEPT
;
}
return
nodeFilterConstants
.
FILTER_SKIP
;
}
)
;
walker
.
currentNode
=
this
.
_selectedContainer
.
elt
;
return
walker
;
}
_onCopy
:
function
(
evt
)
{
if
(
this
.
_isInputOrTextarea
(
evt
.
target
)
)
{
return
;
}
let
selection
=
this
.
_inspector
.
selection
;
if
(
selection
.
isNode
(
)
)
{
this
.
_inspector
.
copyOuterHTML
(
)
;
}
evt
.
stopPropagation
(
)
;
evt
.
preventDefault
(
)
;
}
_initShortcuts
:
function
(
)
{
let
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
win
}
)
;
this
.
_onShortcut
=
this
.
_onShortcut
.
bind
(
this
)
;
[
"
markupView
.
hide
.
key
"
"
markupView
.
edit
.
key
"
"
markupView
.
scrollInto
.
key
"
]
.
forEach
(
name
=
>
{
let
key
=
this
.
strings
.
GetStringFromName
(
name
)
;
shortcuts
.
on
(
key
(
_
event
)
=
>
this
.
_onShortcut
(
name
event
)
)
;
}
)
;
[
"
Delete
"
"
Backspace
"
"
Home
"
"
Left
"
"
Right
"
"
Up
"
"
Down
"
"
PageUp
"
"
PageDown
"
"
Esc
"
"
Enter
"
"
Space
"
]
.
forEach
(
key
=
>
{
shortcuts
.
on
(
key
this
.
_onShortcut
)
;
}
)
;
}
_onShortcut
(
name
event
)
{
if
(
this
.
_isInputOrTextarea
(
event
.
target
)
)
{
return
;
}
switch
(
name
)
{
case
"
markupView
.
hide
.
key
"
:
{
let
node
=
this
.
_selectedContainer
.
node
;
if
(
node
.
hidden
)
{
this
.
walker
.
unhideNode
(
node
)
;
}
else
{
this
.
walker
.
hideNode
(
node
)
;
}
break
;
}
case
"
markupView
.
edit
.
key
"
:
{
this
.
beginEditingOuterHTML
(
this
.
_selectedContainer
.
node
)
;
break
;
}
case
"
markupView
.
scrollInto
.
key
"
:
{
let
selection
=
this
.
_selectedContainer
.
node
;
this
.
_inspector
.
scrollNodeIntoView
(
selection
)
;
break
;
}
case
"
Delete
"
:
{
this
.
deleteNodeOrAttribute
(
)
;
break
;
}
case
"
Backspace
"
:
{
this
.
deleteNodeOrAttribute
(
true
)
;
break
;
}
case
"
Home
"
:
{
let
rootContainer
=
this
.
getContainer
(
this
.
_rootNode
)
;
this
.
navigate
(
rootContainer
.
children
.
firstChild
.
container
)
;
break
;
}
case
"
Left
"
:
{
if
(
this
.
_selectedContainer
.
expanded
)
{
this
.
collapseNode
(
this
.
_selectedContainer
.
node
)
;
}
else
{
let
parent
=
this
.
_selectionWalker
(
)
.
parentNode
(
)
;
if
(
parent
)
{
this
.
navigate
(
parent
.
container
)
;
}
}
break
;
}
case
"
Right
"
:
{
if
(
!
this
.
_selectedContainer
.
expanded
&
&
this
.
_selectedContainer
.
hasChildren
)
{
this
.
_expandContainer
(
this
.
_selectedContainer
)
;
}
else
{
let
next
=
this
.
_selectionWalker
(
)
.
nextNode
(
)
;
if
(
next
)
{
this
.
navigate
(
next
.
container
)
;
}
}
break
;
}
case
"
Up
"
:
{
let
previousNode
=
this
.
_selectionWalker
(
)
.
previousNode
(
)
;
if
(
previousNode
)
{
this
.
navigate
(
previousNode
.
container
)
;
}
break
;
}
case
"
Down
"
:
{
let
nextNode
=
this
.
_selectionWalker
(
)
.
nextNode
(
)
;
if
(
nextNode
)
{
this
.
navigate
(
nextNode
.
container
)
;
}
break
;
}
case
"
PageUp
"
:
{
let
walker
=
this
.
_selectionWalker
(
)
;
let
selection
=
this
.
_selectedContainer
;
for
(
let
i
=
0
;
i
<
PAGE_SIZE
;
i
+
+
)
{
let
previousNode
=
walker
.
previousNode
(
)
;
if
(
!
previousNode
)
{
break
;
}
selection
=
previousNode
.
container
;
}
this
.
navigate
(
selection
)
;
break
;
}
case
"
PageDown
"
:
{
let
walker
=
this
.
_selectionWalker
(
)
;
let
selection
=
this
.
_selectedContainer
;
for
(
let
i
=
0
;
i
<
PAGE_SIZE
;
i
+
+
)
{
let
nextNode
=
walker
.
nextNode
(
)
;
if
(
!
nextNode
)
{
break
;
}
selection
=
nextNode
.
container
;
}
this
.
navigate
(
selection
)
;
break
;
}
case
"
Enter
"
:
case
"
Space
"
:
{
if
(
!
this
.
_selectedContainer
.
canFocus
)
{
this
.
_selectedContainer
.
canFocus
=
true
;
this
.
_selectedContainer
.
focus
(
)
;
}
else
{
return
;
}
break
;
}
case
"
Esc
"
:
{
if
(
this
.
isDragging
)
{
this
.
cancelDragging
(
)
;
}
else
{
return
;
}
break
;
}
default
:
console
.
error
(
"
Unexpected
markup
-
view
key
shortcut
"
name
)
;
return
;
}
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
}
_isInputOrTextarea
:
function
(
element
)
{
let
name
=
element
.
tagName
.
toLowerCase
(
)
;
return
name
=
=
=
"
input
"
|
|
name
=
=
=
"
textarea
"
;
}
deleteNodeOrAttribute
:
function
(
moveBackward
)
{
let
focusedAttribute
=
this
.
doc
.
activeElement
?
this
.
doc
.
activeElement
.
closest
(
"
.
attreditor
"
)
:
null
;
if
(
focusedAttribute
)
{
let
container
=
focusedAttribute
.
closest
(
"
li
.
child
"
)
.
container
;
container
.
removeAttribute
(
focusedAttribute
.
dataset
.
attr
)
;
}
else
{
this
.
deleteNode
(
this
.
_selectedContainer
.
node
moveBackward
)
;
}
}
deleteNode
:
function
(
node
moveBackward
)
{
if
(
node
.
isDocumentElement
|
|
node
.
nodeType
=
=
nodeConstants
.
DOCUMENT_TYPE_NODE
|
|
node
.
isAnonymous
)
{
return
;
}
let
container
=
this
.
getContainer
(
node
)
;
this
.
walker
.
retainNode
(
node
)
.
then
(
(
)
=
>
{
let
parent
=
node
.
parentNode
(
)
;
let
nextSibling
=
null
;
this
.
undo
.
do
(
(
)
=
>
{
this
.
walker
.
removeNode
(
node
)
.
then
(
siblings
=
>
{
nextSibling
=
siblings
.
nextSibling
;
let
prevSibling
=
siblings
.
previousSibling
;
let
focusNode
=
moveBackward
?
prevSibling
:
nextSibling
;
if
(
!
focusNode
)
{
focusNode
=
nextSibling
|
|
prevSibling
|
|
parent
;
}
let
isNextSiblingText
=
nextSibling
?
nextSibling
.
nodeType
=
=
=
Ci
.
nsIDOMNode
.
TEXT_NODE
:
false
;
let
isPrevSiblingText
=
prevSibling
?
prevSibling
.
nodeType
=
=
=
Ci
.
nsIDOMNode
.
TEXT_NODE
:
false
;
if
(
parent
.
numChildren
=
=
=
2
&
&
(
isNextSiblingText
|
|
isPrevSiblingText
)
)
{
focusNode
=
parent
;
}
if
(
container
.
selected
)
{
this
.
navigate
(
this
.
getContainer
(
focusNode
)
)
;
}
}
)
;
}
(
)
=
>
{
let
isValidSibling
=
nextSibling
&
&
!
nextSibling
.
isPseudoElement
;
nextSibling
=
isValidSibling
?
nextSibling
:
null
;
this
.
walker
.
insertBefore
(
node
parent
nextSibling
)
;
}
)
;
}
)
.
then
(
null
console
.
error
)
;
}
_onFocus
:
function
(
event
)
{
let
parent
=
event
.
target
;
while
(
!
parent
.
container
)
{
parent
=
parent
.
parentNode
;
}
if
(
parent
)
{
this
.
navigate
(
parent
.
container
)
;
}
}
navigate
:
function
(
container
)
{
if
(
!
container
)
{
return
;
}
let
node
=
container
.
node
;
this
.
markNodeAsSelected
(
node
"
treepanel
"
)
;
}
importNode
:
function
(
node
flashNode
)
{
if
(
!
node
)
{
return
null
;
}
if
(
this
.
_containers
.
has
(
node
)
)
{
return
this
.
getContainer
(
node
)
;
}
let
container
;
let
{
nodeType
isPseudoElement
}
=
node
;
if
(
node
=
=
=
this
.
walker
.
rootNode
)
{
container
=
new
RootContainer
(
this
node
)
;
this
.
_elt
.
appendChild
(
container
.
elt
)
;
this
.
_rootNode
=
node
;
}
else
if
(
nodeType
=
=
nodeConstants
.
ELEMENT_NODE
&
&
!
isPseudoElement
)
{
container
=
new
MarkupElementContainer
(
this
node
this
.
_inspector
)
;
}
else
if
(
nodeType
=
=
nodeConstants
.
COMMENT_NODE
|
|
nodeType
=
=
nodeConstants
.
TEXT_NODE
)
{
container
=
new
MarkupTextContainer
(
this
node
this
.
_inspector
)
;
}
else
{
container
=
new
MarkupReadOnlyContainer
(
this
node
this
.
_inspector
)
;
}
if
(
flashNode
)
{
container
.
flashMutation
(
)
;
}
this
.
_containers
.
set
(
node
container
)
;
container
.
childrenDirty
=
true
;
this
.
_updateChildren
(
container
)
;
this
.
_inspector
.
emit
(
"
container
-
created
"
container
)
;
return
container
;
}
_mutationObserver
:
function
(
mutations
)
{
for
(
let
mutation
of
mutations
)
{
let
type
=
mutation
.
type
;
let
target
=
mutation
.
target
;
if
(
mutation
.
type
=
=
=
"
documentUnload
"
)
{
type
=
"
childList
"
;
target
=
mutation
.
targetParent
;
if
(
!
target
)
{
continue
;
}
}
let
container
=
this
.
getContainer
(
target
)
;
if
(
!
container
)
{
continue
;
}
if
(
type
=
=
=
"
attributes
"
&
&
mutation
.
attributeName
=
=
=
"
class
"
)
{
container
.
updateIsDisplayed
(
)
;
}
if
(
type
=
=
=
"
attributes
"
|
|
type
=
=
=
"
characterData
"
|
|
type
=
=
=
"
events
"
|
|
type
=
=
=
"
pseudoClassLock
"
)
{
container
.
update
(
)
;
}
else
if
(
type
=
=
=
"
childList
"
|
|
type
=
=
=
"
nativeAnonymousChildList
"
)
{
container
.
childrenDirty
=
true
;
this
.
_updateChildren
(
container
{
flash
:
true
}
)
.
then
(
(
)
=
>
container
.
updateLevel
(
)
)
;
}
else
if
(
type
=
=
=
"
inlineTextChild
"
)
{
container
.
childrenDirty
=
true
;
this
.
_updateChildren
(
container
{
flash
:
true
}
)
;
container
.
update
(
)
;
}
}
this
.
_waitForChildren
(
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyer
)
{
return
;
}
this
.
_flashMutatedNodes
(
mutations
)
;
this
.
_inspector
.
emit
(
"
markupmutation
"
mutations
)
;
this
.
htmlEditor
.
refresh
(
)
;
}
)
;
}
_onDisplayChange
:
function
(
nodes
)
{
for
(
let
node
of
nodes
)
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
container
)
{
container
.
updateIsDisplayed
(
)
;
}
}
}
_flashMutatedNodes
:
function
(
mutations
)
{
let
addedOrEditedContainers
=
new
Set
(
)
;
let
removedContainers
=
new
Set
(
)
;
for
(
let
{
type
target
added
removed
newValue
}
of
mutations
)
{
let
container
=
this
.
getContainer
(
target
)
;
if
(
container
)
{
if
(
type
=
=
=
"
characterData
"
)
{
addedOrEditedContainers
.
add
(
container
)
;
}
else
if
(
type
=
=
=
"
attributes
"
&
&
newValue
=
=
=
null
)
{
addedOrEditedContainers
.
add
(
container
)
;
}
else
if
(
type
=
=
=
"
childList
"
)
{
if
(
removed
.
length
)
{
removedContainers
.
add
(
container
)
;
}
added
.
forEach
(
node
=
>
{
let
addedContainer
=
this
.
getContainer
(
node
)
;
if
(
addedContainer
)
{
addedOrEditedContainers
.
add
(
addedContainer
)
;
removedContainers
.
delete
(
container
)
;
}
}
)
;
}
}
}
for
(
let
container
of
removedContainers
)
{
container
.
flashMutation
(
)
;
}
for
(
let
container
of
addedOrEditedContainers
)
{
container
.
flashMutation
(
)
;
}
}
showNode
:
function
(
node
centered
=
true
)
{
let
parent
=
node
;
this
.
importNode
(
node
)
;
while
(
(
parent
=
parent
.
parentNode
(
)
)
)
{
this
.
importNode
(
parent
)
;
this
.
expandNode
(
parent
)
;
}
return
this
.
_waitForChildren
(
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyer
)
{
return
promise
.
reject
(
"
markupview
destroyed
"
)
;
}
return
this
.
_ensureVisible
(
node
)
;
}
)
.
then
(
(
)
=
>
{
scrollIntoViewIfNeeded
(
this
.
getContainer
(
node
)
.
editor
.
elt
centered
)
;
}
this
.
_handleRejectionIfNotDestroyed
)
;
}
_expandContainer
:
function
(
container
)
{
return
this
.
_updateChildren
(
container
{
expand
:
true
}
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyer
)
{
return
;
}
container
.
setExpanded
(
true
)
;
}
)
;
}
expandNode
:
function
(
node
)
{
let
container
=
this
.
getContainer
(
node
)
;
this
.
_expandContainer
(
container
)
;
}
_expandAll
:
function
(
container
)
{
return
this
.
_expandContainer
(
container
)
.
then
(
(
)
=
>
{
let
child
=
container
.
children
.
firstChild
;
let
promises
=
[
]
;
while
(
child
)
{
promises
.
push
(
this
.
_expandAll
(
child
.
container
)
)
;
child
=
child
.
nextSibling
;
}
return
promise
.
all
(
promises
)
;
}
)
.
then
(
null
console
.
error
)
;
}
expandAll
:
function
(
node
)
{
node
=
node
|
|
this
.
_rootNode
;
return
this
.
_expandAll
(
this
.
getContainer
(
node
)
)
;
}
collapseNode
:
function
(
node
)
{
let
container
=
this
.
getContainer
(
node
)
;
container
.
setExpanded
(
false
)
;
}
_getNodeHTML
:
function
(
node
isOuter
)
{
let
walkerPromise
=
null
;
if
(
isOuter
)
{
walkerPromise
=
this
.
walker
.
outerHTML
(
node
)
;
}
else
{
walkerPromise
=
this
.
walker
.
innerHTML
(
node
)
;
}
return
walkerPromise
.
then
(
longstr
=
>
{
return
longstr
.
string
(
)
.
then
(
html
=
>
{
longstr
.
release
(
)
.
then
(
null
console
.
error
)
;
return
html
;
}
)
;
}
)
;
}
getNodeOuterHTML
:
function
(
node
)
{
return
this
.
_getNodeHTML
(
node
true
)
;
}
getNodeInnerHTML
:
function
(
node
)
{
return
this
.
_getNodeHTML
(
node
)
;
}
reselectOnRemoved
:
function
(
removedNode
reason
)
{
this
.
cancelReselectOnRemoved
(
)
;
let
isHTMLTag
=
removedNode
.
tagName
.
toLowerCase
(
)
=
=
=
"
html
"
;
let
oldContainer
=
this
.
getContainer
(
removedNode
)
;
let
parentContainer
=
this
.
getContainer
(
removedNode
.
parentNode
(
)
)
;
let
childIndex
=
parentContainer
.
getChildContainers
(
)
.
indexOf
(
oldContainer
)
;
let
onMutations
=
this
.
_removedNodeObserver
=
(
e
mutations
)
=
>
{
let
isNodeRemovalMutation
=
false
;
for
(
let
mutation
of
mutations
)
{
let
containsRemovedNode
=
mutation
.
removed
&
&
mutation
.
removed
.
some
(
n
=
>
n
=
=
=
removedNode
)
;
if
(
mutation
.
type
=
=
=
"
childList
"
&
&
(
containsRemovedNode
|
|
isHTMLTag
)
)
{
isNodeRemovalMutation
=
true
;
break
;
}
}
if
(
!
isNodeRemovalMutation
)
{
return
;
}
this
.
_inspector
.
off
(
"
markupmutation
"
onMutations
)
;
this
.
_removedNodeObserver
=
null
;
if
(
this
.
_inspector
.
selection
.
nodeFront
=
=
=
parentContainer
.
node
|
|
(
this
.
_inspector
.
selection
.
nodeFront
=
=
=
removedNode
&
&
isHTMLTag
)
)
{
let
childContainers
=
parentContainer
.
getChildContainers
(
)
;
if
(
childContainers
&
&
childContainers
[
childIndex
]
)
{
this
.
markNodeAsSelected
(
childContainers
[
childIndex
]
.
node
reason
)
;
if
(
childContainers
[
childIndex
]
.
hasChildren
)
{
this
.
expandNode
(
childContainers
[
childIndex
]
.
node
)
;
}
this
.
emit
(
"
reselectedonremoved
"
)
;
}
}
}
;
this
.
_inspector
.
on
(
"
markupmutation
"
onMutations
)
;
}
cancelReselectOnRemoved
:
function
(
)
{
if
(
this
.
_removedNodeObserver
)
{
this
.
_inspector
.
off
(
"
markupmutation
"
this
.
_removedNodeObserver
)
;
this
.
_removedNodeObserver
=
null
;
this
.
emit
(
"
canceledreselectonremoved
"
)
;
}
}
updateNodeOuterHTML
:
function
(
node
newValue
)
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
promise
.
reject
(
)
;
}
this
.
reselectOnRemoved
(
node
"
outerhtml
"
)
;
return
this
.
walker
.
setOuterHTML
(
node
newValue
)
.
then
(
null
(
)
=
>
{
this
.
cancelReselectOnRemoved
(
)
;
}
)
;
}
updateNodeInnerHTML
:
function
(
node
newValue
oldValue
)
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
promise
.
reject
(
)
;
}
let
def
=
defer
(
)
;
container
.
undo
.
do
(
(
)
=
>
{
this
.
walker
.
setInnerHTML
(
node
newValue
)
.
then
(
def
.
resolve
def
.
reject
)
;
}
(
)
=
>
{
this
.
walker
.
setInnerHTML
(
node
oldValue
)
;
}
)
;
return
def
.
promise
;
}
insertAdjacentHTMLToNode
:
function
(
node
position
value
)
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
promise
.
reject
(
)
;
}
let
def
=
defer
(
)
;
let
injectedNodes
=
[
]
;
container
.
undo
.
do
(
(
)
=
>
{
this
.
walker
.
insertAdjacentHTML
(
node
position
value
)
.
then
(
nodeArray
=
>
{
injectedNodes
=
nodeArray
.
nodes
;
return
nodeArray
;
}
)
.
then
(
def
.
resolve
def
.
reject
)
;
}
(
)
=
>
{
this
.
walker
.
removeNodes
(
injectedNodes
)
;
}
)
;
return
def
.
promise
;
}
beginEditingOuterHTML
:
function
(
node
)
{
this
.
getNodeOuterHTML
(
node
)
.
then
(
oldValue
=
>
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
;
}
this
.
htmlEditor
.
show
(
container
.
tagLine
oldValue
)
;
this
.
htmlEditor
.
once
(
"
popuphidden
"
(
e
commit
value
)
=
>
{
this
.
doc
.
documentElement
.
focus
(
)
;
if
(
commit
)
{
this
.
updateNodeOuterHTML
(
node
value
oldValue
)
;
}
}
)
;
}
)
;
}
setNodeExpanded
:
function
(
node
expanded
expandDescendants
)
{
if
(
expanded
)
{
if
(
expandDescendants
)
{
this
.
expandAll
(
node
)
;
}
else
{
this
.
expandNode
(
node
)
;
}
}
else
{
this
.
collapseNode
(
node
)
;
}
}
markNodeAsSelected
:
function
(
node
reason
)
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
this
.
_selectedContainer
=
=
=
container
)
{
return
false
;
}
if
(
this
.
_selectedContainer
)
{
this
.
_selectedContainer
.
selected
=
false
;
this
.
_selectedContainer
.
clearFocus
(
)
;
}
this
.
_selectedContainer
=
container
;
if
(
node
)
{
this
.
_selectedContainer
.
selected
=
true
;
}
if
(
this
.
_inspector
.
selection
.
nodeFront
!
=
=
node
)
{
this
.
_inspector
.
selection
.
setNodeFront
(
node
reason
|
|
"
nodeselected
"
)
;
}
return
true
;
}
_ensureVisible
:
function
(
node
)
{
while
(
node
)
{
let
container
=
this
.
getContainer
(
node
)
;
let
parent
=
node
.
parentNode
(
)
;
if
(
!
container
.
elt
.
parentNode
)
{
let
parentContainer
=
this
.
getContainer
(
parent
)
;
if
(
parentContainer
)
{
parentContainer
.
childrenDirty
=
true
;
this
.
_updateChildren
(
parentContainer
{
expand
:
true
}
)
;
}
}
node
=
parent
;
}
return
this
.
_waitForChildren
(
)
;
}
unmarkSelectedNode
:
function
(
)
{
if
(
this
.
_selectedContainer
)
{
this
.
_selectedContainer
.
selected
=
false
;
this
.
_selectedContainer
=
null
;
}
}
_checkSelectionVisible
:
function
(
container
)
{
let
centered
=
null
;
let
node
=
this
.
_inspector
.
selection
.
nodeFront
;
while
(
node
)
{
if
(
node
.
parentNode
(
)
=
=
=
container
.
node
)
{
centered
=
node
;
break
;
}
node
=
node
.
parentNode
(
)
;
}
return
centered
;
}
_updateChildren
:
function
(
container
options
)
{
let
expand
=
options
&
&
options
.
expand
;
let
flash
=
options
&
&
options
.
flash
;
container
.
hasChildren
=
container
.
node
.
hasChildren
;
container
.
setChildrenRole
(
)
;
if
(
!
this
.
_queuedChildUpdates
)
{
this
.
_queuedChildUpdates
=
new
Map
(
)
;
}
if
(
this
.
_queuedChildUpdates
.
has
(
container
)
)
{
return
this
.
_queuedChildUpdates
.
get
(
container
)
;
}
if
(
!
container
.
childrenDirty
)
{
return
promise
.
resolve
(
container
)
;
}
if
(
container
.
inlineTextChild
&
&
container
.
inlineTextChild
!
=
container
.
node
.
inlineTextChild
)
{
this
.
_containers
.
delete
(
container
.
inlineTextChild
)
;
container
.
clearInlineTextChild
(
)
;
if
(
container
.
hasChildren
&
&
container
.
selected
)
{
container
.
setExpanded
(
true
)
;
}
}
if
(
container
.
node
.
inlineTextChild
)
{
container
.
setExpanded
(
false
)
;
while
(
container
.
children
.
firstChild
)
{
container
.
children
.
removeChild
(
container
.
children
.
firstChild
)
;
}
container
.
setInlineTextChild
(
container
.
node
.
inlineTextChild
)
;
this
.
_containers
.
set
(
container
.
node
.
inlineTextChild
container
)
;
container
.
childrenDirty
=
false
;
return
promise
.
resolve
(
container
)
;
}
if
(
!
container
.
hasChildren
)
{
while
(
container
.
children
.
firstChild
)
{
container
.
children
.
removeChild
(
container
.
children
.
firstChild
)
;
}
container
.
childrenDirty
=
false
;
container
.
setExpanded
(
false
)
;
return
promise
.
resolve
(
container
)
;
}
if
(
!
(
container
.
expanded
|
|
expand
)
)
{
return
promise
.
resolve
(
container
)
;
}
let
centered
=
this
.
_checkSelectionVisible
(
container
)
;
container
.
childrenDirty
=
false
;
let
updatePromise
=
this
.
_getVisibleChildren
(
container
centered
)
.
then
(
children
=
>
{
if
(
!
this
.
_containers
)
{
return
promise
.
reject
(
"
markup
view
destroyed
"
)
;
}
this
.
_queuedChildUpdates
.
delete
(
container
)
;
if
(
container
.
childrenDirty
)
{
return
this
.
_updateChildren
(
container
{
expand
:
centered
}
)
;
}
let
fragment
=
this
.
doc
.
createDocumentFragment
(
)
;
for
(
let
child
of
children
.
nodes
)
{
let
childContainer
=
this
.
importNode
(
child
flash
)
;
fragment
.
appendChild
(
childContainer
.
elt
)
;
}
while
(
container
.
children
.
firstChild
)
{
container
.
children
.
removeChild
(
container
.
children
.
firstChild
)
;
}
if
(
!
(
children
.
hasFirst
&
&
children
.
hasLast
)
)
{
let
nodesCount
=
container
.
node
.
numChildren
;
let
showAllString
=
PluralForm
.
get
(
nodesCount
this
.
strings
.
GetStringFromName
(
"
markupView
.
more
.
showAll2
"
)
)
;
let
data
=
{
showing
:
this
.
strings
.
GetStringFromName
(
"
markupView
.
more
.
showing
"
)
showAll
:
showAllString
.
replace
(
"
#
1
"
nodesCount
)
allButtonClick
:
(
)
=
>
{
container
.
maxChildren
=
-
1
;
container
.
childrenDirty
=
true
;
this
.
_updateChildren
(
container
)
;
}
}
;
if
(
!
children
.
hasFirst
)
{
let
span
=
this
.
template
(
"
more
-
nodes
"
data
)
;
fragment
.
insertBefore
(
span
fragment
.
firstChild
)
;
}
if
(
!
children
.
hasLast
)
{
let
span
=
this
.
template
(
"
more
-
nodes
"
data
)
;
fragment
.
appendChild
(
span
)
;
}
}
container
.
children
.
appendChild
(
fragment
)
;
return
container
;
}
)
.
catch
(
this
.
_handleRejectionIfNotDestroyed
)
;
this
.
_queuedChildUpdates
.
set
(
container
updatePromise
)
;
return
updatePromise
;
}
_waitForChildren
:
function
(
)
{
if
(
!
this
.
_queuedChildUpdates
)
{
return
promise
.
resolve
(
undefined
)
;
}
return
promise
.
all
(
[
.
.
.
this
.
_queuedChildUpdates
.
values
(
)
]
)
;
}
_getVisibleChildren
:
function
(
container
centered
)
{
let
maxChildren
=
container
.
maxChildren
|
|
this
.
maxChildren
;
if
(
maxChildren
=
=
-
1
)
{
maxChildren
=
undefined
;
}
return
this
.
walker
.
children
(
container
.
node
{
maxNodes
:
maxChildren
center
:
centered
}
)
;
}
destroy
:
function
(
)
{
if
(
this
.
_destroyer
)
{
return
this
.
_destroyer
;
}
this
.
_destroyer
=
promise
.
resolve
(
)
;
this
.
_clearBriefBoxModelTimer
(
)
;
this
.
_hoveredNode
=
null
;
this
.
htmlEditor
.
destroy
(
)
;
this
.
htmlEditor
=
null
;
this
.
undo
.
destroy
(
)
;
this
.
undo
=
null
;
this
.
popup
.
destroy
(
)
;
this
.
popup
=
null
;
this
.
_elt
.
removeEventListener
(
"
click
"
this
.
_onMouseClick
false
)
;
this
.
_elt
.
removeEventListener
(
"
mousemove
"
this
.
_onMouseMove
false
)
;
this
.
_elt
.
removeEventListener
(
"
mouseout
"
this
.
_onMouseOut
false
)
;
this
.
_elt
.
removeEventListener
(
"
blur
"
this
.
_onBlur
true
)
;
this
.
win
.
removeEventListener
(
"
mouseup
"
this
.
_onMouseUp
)
;
this
.
win
.
removeEventListener
(
"
copy
"
this
.
_onCopy
)
;
this
.
_frame
.
removeEventListener
(
"
focus
"
this
.
_onFocus
false
)
;
this
.
walker
.
off
(
"
mutations
"
this
.
_mutationObserver
)
;
this
.
walker
.
off
(
"
display
-
change
"
this
.
_onDisplayChange
)
;
this
.
_inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
_onNewSelection
)
;
this
.
_inspector
.
toolbox
.
off
(
"
picker
-
node
-
hovered
"
this
.
_onToolboxPickerHover
)
;
this
.
_prefObserver
.
off
(
ATTR_COLLAPSE_ENABLED_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_prefObserver
.
off
(
ATTR_COLLAPSE_LENGTH_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_prefObserver
.
destroy
(
)
;
this
.
_elt
=
null
;
for
(
let
[
container
]
of
this
.
_containers
)
{
container
.
destroy
(
)
;
}
this
.
_containers
=
null
;
this
.
eventDetailsTooltip
.
destroy
(
)
;
this
.
eventDetailsTooltip
=
null
;
this
.
imagePreviewTooltip
.
destroy
(
)
;
this
.
imagePreviewTooltip
=
null
;
this
.
win
=
null
;
this
.
doc
=
null
;
this
.
_lastDropTarget
=
null
;
this
.
_lastDragTarget
=
null
;
return
this
.
_destroyer
;
}
findClosestDragDropTarget
:
function
(
el
)
{
return
el
.
classList
.
contains
(
"
tag
-
line
"
)
?
el
:
el
.
querySelector
(
"
.
tag
-
line
"
)
|
|
el
.
closest
(
"
.
tag
-
line
"
)
;
}
indicateDropTarget
:
function
(
el
)
{
if
(
this
.
_lastDropTarget
)
{
this
.
_lastDropTarget
.
classList
.
remove
(
"
drop
-
target
"
)
;
}
if
(
!
el
)
{
return
;
}
let
target
=
this
.
findClosestDragDropTarget
(
el
)
;
if
(
target
)
{
target
.
classList
.
add
(
"
drop
-
target
"
)
;
this
.
_lastDropTarget
=
target
;
}
}
indicateDragTarget
:
function
(
el
)
{
if
(
this
.
_lastDragTarget
)
{
this
.
_lastDragTarget
.
classList
.
remove
(
"
drag
-
target
"
)
;
}
if
(
!
el
)
{
return
;
}
let
target
=
this
.
findClosestDragDropTarget
(
el
)
;
if
(
target
)
{
target
.
classList
.
add
(
"
drag
-
target
"
)
;
this
.
_lastDragTarget
=
target
;
}
}
get
dropTargetNodes
(
)
{
let
target
=
this
.
_lastDropTarget
;
if
(
!
target
)
{
return
null
;
}
let
parent
nextSibling
;
if
(
target
.
previousElementSibling
&
&
target
.
previousElementSibling
.
nodeName
.
toLowerCase
(
)
=
=
=
"
ul
"
)
{
parent
=
target
.
parentNode
.
container
.
node
;
nextSibling
=
null
;
}
else
{
parent
=
target
.
parentNode
.
container
.
node
.
parentNode
(
)
;
nextSibling
=
target
.
parentNode
.
container
.
node
;
}
if
(
nextSibling
&
&
nextSibling
.
isBeforePseudoElement
)
{
nextSibling
=
target
.
parentNode
.
parentNode
.
children
[
1
]
.
container
.
node
;
}
if
(
nextSibling
&
&
nextSibling
.
isAfterPseudoElement
)
{
parent
=
target
.
parentNode
.
container
.
node
.
parentNode
(
)
;
nextSibling
=
null
;
}
if
(
parent
.
nodeType
!
=
=
nodeConstants
.
ELEMENT_NODE
)
{
return
null
;
}
return
{
parent
nextSibling
}
;
}
}
;
function
MarkupContainer
(
)
{
}
let
markupContainerID
=
0
;
MarkupContainer
.
prototype
=
{
initialize
:
function
(
markupView
node
templateID
)
{
this
.
markup
=
markupView
;
this
.
node
=
node
;
this
.
undo
=
this
.
markup
.
undo
;
this
.
win
=
this
.
markup
.
_frame
.
contentWindow
;
this
.
id
=
"
treeitem
-
"
+
markupContainerID
+
+
;
this
.
htmlElt
=
this
.
win
.
document
.
documentElement
;
this
.
elt
=
null
;
this
.
expander
=
null
;
this
.
tagState
=
null
;
this
.
tagLine
=
null
;
this
.
children
=
null
;
this
.
markup
.
template
(
templateID
this
)
;
this
.
elt
.
container
=
this
;
this
.
_onMouseDown
=
this
.
_onMouseDown
.
bind
(
this
)
;
this
.
_onToggle
=
this
.
_onToggle
.
bind
(
this
)
;
this
.
_onMouseUp
=
this
.
_onMouseUp
.
bind
(
this
)
;
this
.
_onMouseMove
=
this
.
_onMouseMove
.
bind
(
this
)
;
this
.
_onKeyDown
=
this
.
_onKeyDown
.
bind
(
this
)
;
this
.
elt
.
addEventListener
(
"
mousedown
"
this
.
_onMouseDown
false
)
;
this
.
win
.
addEventListener
(
"
mouseup
"
this
.
_onMouseUp
true
)
;
this
.
win
.
addEventListener
(
"
mousemove
"
this
.
_onMouseMove
true
)
;
this
.
elt
.
addEventListener
(
"
dblclick
"
this
.
_onToggle
false
)
;
if
(
this
.
expander
)
{
this
.
expander
.
addEventListener
(
"
click
"
this
.
_onToggle
false
)
;
}
this
.
updateIsDisplayed
(
)
;
}
toString
:
function
(
)
{
return
"
[
MarkupContainer
for
"
+
this
.
node
+
"
]
"
;
}
isPreviewable
:
function
(
)
{
if
(
this
.
node
.
tagName
&
&
!
this
.
node
.
isPseudoElement
)
{
let
tagName
=
this
.
node
.
tagName
.
toLowerCase
(
)
;
let
srcAttr
=
this
.
editor
.
getAttributeElement
(
"
src
"
)
;
let
isImage
=
tagName
=
=
=
"
img
"
&
&
srcAttr
;
let
isCanvas
=
tagName
=
=
=
"
canvas
"
;
return
isImage
|
|
isCanvas
;
}
return
false
;
}
updateIsDisplayed
:
function
(
)
{
this
.
elt
.
classList
.
remove
(
"
not
-
displayed
"
)
;
if
(
!
this
.
node
.
isDisplayed
|
|
this
.
node
.
hidden
)
{
this
.
elt
.
classList
.
add
(
"
not
-
displayed
"
)
;
}
}
_hasChildren
:
false
get
hasChildren
(
)
{
return
this
.
_hasChildren
;
}
set
hasChildren
(
value
)
{
this
.
_hasChildren
=
value
;
this
.
updateExpander
(
)
;
}
get
focusableElms
(
)
{
return
[
.
.
.
this
.
tagLine
.
querySelectorAll
(
"
[
tabindex
]
"
)
]
;
}
get
canFocus
(
)
{
return
this
.
_canFocus
;
}
set
canFocus
(
value
)
{
if
(
this
.
_canFocus
=
=
=
value
)
{
return
;
}
this
.
_canFocus
=
value
;
if
(
value
)
{
this
.
tagLine
.
addEventListener
(
"
keydown
"
this
.
_onKeyDown
true
)
;
this
.
focusableElms
.
forEach
(
elm
=
>
elm
.
setAttribute
(
"
tabindex
"
"
0
"
)
)
;
}
else
{
this
.
tagLine
.
removeEventListener
(
"
keydown
"
this
.
_onKeyDown
true
)
;
this
.
focusableElms
.
forEach
(
elm
=
>
elm
.
setAttribute
(
"
tabindex
"
"
-
1
"
)
)
;
}
}
clearFocus
:
function
(
)
{
if
(
!
this
.
canFocus
)
{
return
;
}
this
.
canFocus
=
false
;
let
doc
=
this
.
markup
.
doc
;
if
(
!
doc
.
activeElement
|
|
doc
.
activeElement
=
=
=
doc
.
body
)
{
return
;
}
let
parent
=
doc
.
activeElement
;
while
(
parent
&
&
parent
!
=
=
this
.
elt
)
{
parent
=
parent
.
parentNode
;
}
if
(
parent
)
{
doc
.
activeElement
.
blur
(
)
;
}
}
get
canExpand
(
)
{
return
this
.
_hasChildren
&
&
!
this
.
node
.
inlineTextChild
;
}
get
mustExpand
(
)
{
return
this
.
node
.
_parent
=
=
=
this
.
markup
.
walker
.
rootNode
;
}
get
showExpander
(
)
{
return
this
.
canExpand
&
&
!
this
.
mustExpand
;
}
updateExpander
:
function
(
)
{
if
(
!
this
.
expander
)
{
return
;
}
if
(
this
.
showExpander
)
{
this
.
expander
.
style
.
visibility
=
"
visible
"
;
this
.
tagLine
.
setAttribute
(
"
aria
-
expanded
"
this
.
expanded
)
;
}
else
{
this
.
expander
.
style
.
visibility
=
"
hidden
"
;
this
.
tagLine
.
removeAttribute
(
"
aria
-
expanded
"
)
;
}
}
setChildrenRole
:
function
(
)
{
this
.
children
.
setAttribute
(
"
role
"
this
.
hasChildren
?
"
group
"
:
"
presentation
"
)
;
}
updateLevel
:
function
(
)
{
let
currentLevel
=
this
.
tagLine
.
getAttribute
(
"
aria
-
level
"
)
;
let
newLevel
=
this
.
level
;
if
(
currentLevel
=
=
=
newLevel
)
{
return
;
}
this
.
tagLine
.
setAttribute
(
"
aria
-
level
"
newLevel
)
;
let
childContainers
=
this
.
getChildContainers
(
)
;
if
(
childContainers
)
{
childContainers
.
forEach
(
container
=
>
container
.
updateLevel
(
)
)
;
}
}
getChildContainers
:
function
(
)
{
if
(
!
this
.
hasChildren
)
{
return
null
;
}
return
[
.
.
.
this
.
children
.
children
]
.
map
(
node
=
>
node
.
container
)
;
}
get
expanded
(
)
{
return
!
this
.
elt
.
classList
.
contains
(
"
collapsed
"
)
;
}
setExpanded
:
function
(
value
)
{
if
(
!
this
.
expander
)
{
return
;
}
if
(
!
this
.
canExpand
)
{
value
=
false
;
}
if
(
this
.
mustExpand
)
{
value
=
true
;
}
if
(
value
&
&
this
.
elt
.
classList
.
contains
(
"
collapsed
"
)
)
{
let
closingTag
=
this
.
elt
.
querySelector
(
"
.
close
"
)
;
if
(
closingTag
)
{
if
(
!
this
.
closeTagLine
)
{
let
line
=
this
.
markup
.
doc
.
createElement
(
"
div
"
)
;
line
.
classList
.
add
(
"
tag
-
line
"
)
;
line
.
setAttribute
(
"
role
"
"
presentation
"
)
;
let
tagState
=
this
.
markup
.
doc
.
createElement
(
"
div
"
)
;
tagState
.
classList
.
add
(
"
tag
-
state
"
)
;
line
.
appendChild
(
tagState
)
;
line
.
appendChild
(
closingTag
.
cloneNode
(
true
)
)
;
flashElementOff
(
line
)
;
this
.
closeTagLine
=
line
;
}
this
.
elt
.
appendChild
(
this
.
closeTagLine
)
;
}
this
.
elt
.
classList
.
remove
(
"
collapsed
"
)
;
this
.
expander
.
setAttribute
(
"
open
"
"
"
)
;
this
.
hovered
=
false
;
this
.
markup
.
emit
(
"
expanded
"
)
;
}
else
if
(
!
value
)
{
if
(
this
.
closeTagLine
)
{
this
.
elt
.
removeChild
(
this
.
closeTagLine
)
;
this
.
closeTagLine
=
undefined
;
}
this
.
elt
.
classList
.
add
(
"
collapsed
"
)
;
this
.
expander
.
removeAttribute
(
"
open
"
)
;
this
.
markup
.
emit
(
"
collapsed
"
)
;
}
if
(
this
.
showExpander
)
{
this
.
tagLine
.
setAttribute
(
"
aria
-
expanded
"
this
.
expanded
)
;
}
}
parentContainer
:
function
(
)
{
return
this
.
elt
.
parentNode
?
this
.
elt
.
parentNode
.
container
:
null
;
}
get
level
(
)
{
let
level
=
1
;
let
parent
=
this
.
node
.
parentNode
(
)
;
while
(
parent
&
&
parent
!
=
=
this
.
markup
.
walker
.
rootNode
)
{
level
+
+
;
parent
=
parent
.
parentNode
(
)
;
}
return
level
;
}
_isDragging
:
false
_dragStartY
:
0
set
isDragging
(
isDragging
)
{
let
rootElt
=
this
.
markup
.
getContainer
(
this
.
markup
.
_rootNode
)
.
elt
;
this
.
_isDragging
=
isDragging
;
this
.
markup
.
isDragging
=
isDragging
;
this
.
tagLine
.
setAttribute
(
"
aria
-
grabbed
"
isDragging
)
;
if
(
isDragging
)
{
this
.
htmlElt
.
classList
.
add
(
"
dragging
"
)
;
this
.
elt
.
classList
.
add
(
"
dragging
"
)
;
this
.
markup
.
doc
.
body
.
classList
.
add
(
"
dragging
"
)
;
rootElt
.
setAttribute
(
"
aria
-
dropeffect
"
"
move
"
)
;
}
else
{
this
.
htmlElt
.
classList
.
remove
(
"
dragging
"
)
;
this
.
elt
.
classList
.
remove
(
"
dragging
"
)
;
this
.
markup
.
doc
.
body
.
classList
.
remove
(
"
dragging
"
)
;
rootElt
.
setAttribute
(
"
aria
-
dropeffect
"
"
none
"
)
;
}
}
get
isDragging
(
)
{
return
this
.
_isDragging
;
}
isDraggable
:
function
(
)
{
let
tagName
=
this
.
node
.
tagName
&
&
this
.
node
.
tagName
.
toLowerCase
(
)
;
return
!
this
.
node
.
isPseudoElement
&
&
!
this
.
node
.
isAnonymous
&
&
!
this
.
node
.
isDocumentElement
&
&
tagName
!
=
=
"
body
"
&
&
tagName
!
=
=
"
head
"
&
&
this
.
win
.
getSelection
(
)
.
isCollapsed
&
&
this
.
node
.
parentNode
(
)
.
tagName
!
=
=
null
;
}
_wrapMoveFocus
:
function
(
current
back
)
{
let
elms
=
this
.
focusableElms
;
let
next
;
if
(
back
)
{
if
(
elms
.
indexOf
(
current
)
=
=
=
0
)
{
next
=
elms
[
elms
.
length
-
1
]
;
next
.
focus
(
)
;
}
}
else
if
(
elms
.
indexOf
(
current
)
=
=
=
elms
.
length
-
1
)
{
next
=
elms
[
0
]
;
next
.
focus
(
)
;
}
return
next
;
}
_onKeyDown
:
function
(
event
)
{
let
{
target
keyCode
shiftKey
}
=
event
;
let
isInput
=
this
.
markup
.
_isInputOrTextarea
(
target
)
;
if
(
isInput
&
&
keyCode
!
=
=
event
.
DOM_VK_TAB
)
{
return
;
}
switch
(
keyCode
)
{
case
event
.
DOM_VK_TAB
:
if
(
isInput
)
{
let
next
=
this
.
_wrapMoveFocus
(
target
.
nextSibling
shiftKey
)
;
if
(
next
)
{
event
.
preventDefault
(
)
;
if
(
next
.
_editable
)
{
let
e
=
this
.
markup
.
doc
.
createEvent
(
"
Event
"
)
;
e
.
initEvent
(
next
.
_trigger
true
true
)
;
next
.
dispatchEvent
(
e
)
;
}
}
}
else
{
let
next
=
this
.
_wrapMoveFocus
(
target
shiftKey
)
;
if
(
next
)
{
event
.
preventDefault
(
)
;
}
}
break
;
case
event
.
DOM_VK_ESCAPE
:
this
.
clearFocus
(
)
;
this
.
markup
.
getContainer
(
this
.
markup
.
_rootNode
)
.
elt
.
focus
(
)
;
if
(
this
.
isDragging
)
{
return
;
}
event
.
preventDefault
(
)
;
break
;
default
:
return
;
}
event
.
stopPropagation
(
)
;
}
_onMouseDown
:
function
(
event
)
{
let
{
target
button
metaKey
ctrlKey
}
=
event
;
let
isLeftClick
=
button
=
=
=
0
;
let
isMiddleClick
=
button
=
=
=
1
;
let
isMetaClick
=
isLeftClick
&
&
(
metaKey
|
|
ctrlKey
)
;
if
(
target
.
nodeName
=
=
=
"
button
"
)
{
return
;
}
this
.
hovered
=
false
;
this
.
markup
.
navigate
(
this
)
;
this
.
canFocus
=
true
;
this
.
focus
(
)
;
event
.
stopPropagation
(
)
;
if
(
!
target
.
closest
(
"
.
editor
[
tabindex
]
"
)
)
{
event
.
preventDefault
(
)
;
}
if
(
isMiddleClick
|
|
isMetaClick
)
{
let
link
=
target
.
dataset
.
link
;
let
type
=
target
.
dataset
.
type
;
this
.
canFocus
=
false
;
this
.
markup
.
_inspector
.
followAttributeLink
(
type
link
)
;
return
;
}
if
(
isLeftClick
&
&
this
.
isDraggable
(
)
)
{
this
.
_isPreDragging
=
true
;
this
.
_dragStartY
=
event
.
pageY
;
}
}
_onMouseUp
:
Task
.
async
(
function
*
(
)
{
this
.
_isPreDragging
=
false
;
if
(
this
.
isDragging
)
{
this
.
cancelDragging
(
)
;
let
dropTargetNodes
=
this
.
markup
.
dropTargetNodes
;
if
(
!
dropTargetNodes
)
{
return
;
}
yield
this
.
markup
.
walker
.
insertBefore
(
this
.
node
dropTargetNodes
.
parent
dropTargetNodes
.
nextSibling
)
;
this
.
markup
.
emit
(
"
drop
-
completed
"
)
;
}
}
)
_onMouseMove
:
function
(
event
)
{
let
initialDiff
=
Math
.
abs
(
event
.
pageY
-
this
.
_dragStartY
)
;
if
(
this
.
_isPreDragging
&
&
initialDiff
>
=
DRAG_DROP_MIN_INITIAL_DISTANCE
)
{
this
.
_isPreDragging
=
false
;
this
.
isDragging
=
true
;
let
position
=
this
.
elt
.
nextElementSibling
|
|
this
.
markup
.
getContainer
(
this
.
node
.
parentNode
(
)
)
.
closeTagLine
;
this
.
markup
.
indicateDragTarget
(
position
)
;
}
if
(
this
.
isDragging
)
{
let
x
=
0
;
let
y
=
event
.
pageY
-
this
.
win
.
scrollY
;
if
(
y
<
0
)
{
y
=
0
;
}
else
if
(
y
>
=
this
.
markup
.
doc
.
body
.
offsetHeight
-
this
.
win
.
scrollY
)
{
y
=
this
.
markup
.
doc
.
body
.
offsetHeight
-
this
.
win
.
scrollY
-
1
;
}
let
diff
=
y
-
this
.
_dragStartY
+
this
.
win
.
scrollY
;
this
.
elt
.
style
.
top
=
diff
+
"
px
"
;
let
el
=
this
.
markup
.
doc
.
elementFromPoint
(
x
y
)
;
this
.
markup
.
indicateDropTarget
(
el
)
;
}
}
cancelDragging
:
function
(
)
{
if
(
!
this
.
isDragging
)
{
return
;
}
this
.
_isPreDragging
=
false
;
this
.
isDragging
=
false
;
this
.
elt
.
style
.
removeProperty
(
"
top
"
)
;
}
flashMutation
:
function
(
)
{
if
(
!
this
.
selected
)
{
flashElementOn
(
this
.
tagState
this
.
editor
.
elt
)
;
if
(
this
.
_flashMutationTimer
)
{
clearTimeout
(
this
.
_flashMutationTimer
)
;
this
.
_flashMutationTimer
=
null
;
}
this
.
_flashMutationTimer
=
setTimeout
(
(
)
=
>
{
flashElementOff
(
this
.
tagState
this
.
editor
.
elt
)
;
}
this
.
markup
.
CONTAINER_FLASHING_DURATION
)
;
}
}
_hovered
:
false
set
hovered
(
value
)
{
this
.
tagState
.
classList
.
remove
(
"
flash
-
out
"
)
;
this
.
_hovered
=
value
;
if
(
value
)
{
if
(
!
this
.
selected
)
{
this
.
tagState
.
classList
.
add
(
"
theme
-
bg
-
darker
"
)
;
}
if
(
this
.
closeTagLine
)
{
this
.
closeTagLine
.
querySelector
(
"
.
tag
-
state
"
)
.
classList
.
add
(
"
theme
-
bg
-
darker
"
)
;
}
}
else
{
this
.
tagState
.
classList
.
remove
(
"
theme
-
bg
-
darker
"
)
;
if
(
this
.
closeTagLine
)
{
this
.
closeTagLine
.
querySelector
(
"
.
tag
-
state
"
)
.
classList
.
remove
(
"
theme
-
bg
-
darker
"
)
;
}
}
}
get
visible
(
)
{
return
this
.
elt
.
getBoundingClientRect
(
)
.
height
>
0
;
}
_selected
:
false
get
selected
(
)
{
return
this
.
_selected
;
}
set
selected
(
value
)
{
this
.
tagState
.
classList
.
remove
(
"
flash
-
out
"
)
;
this
.
_selected
=
value
;
this
.
editor
.
selected
=
value
;
this
.
tagLine
.
setAttribute
(
"
aria
-
selected
"
value
)
;
if
(
this
.
_selected
)
{
this
.
markup
.
getContainer
(
this
.
markup
.
_rootNode
)
.
elt
.
setAttribute
(
"
aria
-
activedescendant
"
this
.
id
)
;
this
.
tagLine
.
setAttribute
(
"
selected
"
"
"
)
;
this
.
tagState
.
classList
.
add
(
"
theme
-
selected
"
)
;
}
else
{
this
.
tagLine
.
removeAttribute
(
"
selected
"
)
;
this
.
tagState
.
classList
.
remove
(
"
theme
-
selected
"
)
;
}
}
update
:
function
(
)
{
if
(
this
.
node
.
pseudoClassLocks
.
length
)
{
this
.
elt
.
classList
.
add
(
"
pseudoclass
-
locked
"
)
;
}
else
{
this
.
elt
.
classList
.
remove
(
"
pseudoclass
-
locked
"
)
;
}
if
(
this
.
editor
.
update
)
{
this
.
editor
.
update
(
)
;
}
}
focus
:
function
(
)
{
let
focusable
=
this
.
editor
.
elt
.
querySelector
(
"
[
tabindex
=
'
0
'
]
"
)
;
if
(
focusable
)
{
focusable
.
focus
(
)
;
}
}
_onToggle
:
function
(
event
)
{
this
.
markup
.
navigate
(
this
)
;
if
(
this
.
hasChildren
)
{
this
.
markup
.
setNodeExpanded
(
this
.
node
!
this
.
expanded
event
.
altKey
)
;
}
event
.
stopPropagation
(
)
;
}
destroy
:
function
(
)
{
this
.
elt
.
removeEventListener
(
"
mousedown
"
this
.
_onMouseDown
false
)
;
this
.
elt
.
removeEventListener
(
"
dblclick
"
this
.
_onToggle
false
)
;
this
.
tagLine
.
removeEventListener
(
"
keydown
"
this
.
_onKeyDown
true
)
;
if
(
this
.
win
)
{
this
.
win
.
removeEventListener
(
"
mouseup
"
this
.
_onMouseUp
true
)
;
this
.
win
.
removeEventListener
(
"
mousemove
"
this
.
_onMouseMove
true
)
;
}
this
.
win
=
null
;
this
.
htmlElt
=
null
;
if
(
this
.
expander
)
{
this
.
expander
.
removeEventListener
(
"
click
"
this
.
_onToggle
false
)
;
}
let
firstChild
=
this
.
children
.
firstChild
;
while
(
firstChild
)
{
if
(
firstChild
.
container
)
{
firstChild
.
container
.
destroy
(
)
;
}
this
.
children
.
removeChild
(
firstChild
)
;
firstChild
=
this
.
children
.
firstChild
;
}
this
.
editor
.
destroy
(
)
;
}
}
;
function
MarkupReadOnlyContainer
(
markupView
node
)
{
MarkupContainer
.
prototype
.
initialize
.
call
(
this
markupView
node
"
readonlycontainer
"
)
;
this
.
editor
=
new
GenericEditor
(
this
node
)
;
this
.
tagLine
.
appendChild
(
this
.
editor
.
elt
)
;
}
MarkupReadOnlyContainer
.
prototype
=
Heritage
.
extend
(
MarkupContainer
.
prototype
{
}
)
;
function
MarkupTextContainer
(
markupView
node
)
{
MarkupContainer
.
prototype
.
initialize
.
call
(
this
markupView
node
"
textcontainer
"
)
;
if
(
node
.
nodeType
=
=
nodeConstants
.
TEXT_NODE
)
{
this
.
editor
=
new
TextEditor
(
this
node
"
text
"
)
;
}
else
if
(
node
.
nodeType
=
=
nodeConstants
.
COMMENT_NODE
)
{
this
.
editor
=
new
TextEditor
(
this
node
"
comment
"
)
;
}
else
{
throw
new
Error
(
"
Invalid
node
for
MarkupTextContainer
"
)
;
}
this
.
tagLine
.
appendChild
(
this
.
editor
.
elt
)
;
}
MarkupTextContainer
.
prototype
=
Heritage
.
extend
(
MarkupContainer
.
prototype
{
}
)
;
function
MarkupElementContainer
(
markupView
node
)
{
MarkupContainer
.
prototype
.
initialize
.
call
(
this
markupView
node
"
elementcontainer
"
)
;
if
(
node
.
nodeType
=
=
=
nodeConstants
.
ELEMENT_NODE
)
{
this
.
editor
=
new
ElementEditor
(
this
node
)
;
}
else
{
throw
new
Error
(
"
Invalid
node
for
MarkupElementContainer
"
)
;
}
this
.
tagLine
.
appendChild
(
this
.
editor
.
elt
)
;
}
MarkupElementContainer
.
prototype
=
Heritage
.
extend
(
MarkupContainer
.
prototype
{
_buildEventTooltipContent
:
Task
.
async
(
function
*
(
target
tooltip
)
{
if
(
target
.
hasAttribute
(
"
data
-
event
"
)
)
{
yield
tooltip
.
hide
(
)
;
let
listenerInfo
=
yield
this
.
node
.
getEventListenerInfo
(
)
;
let
toolbox
=
this
.
markup
.
_inspector
.
toolbox
;
setEventTooltip
(
tooltip
listenerInfo
toolbox
)
;
this
.
markup
.
_disableImagePreviewTooltip
(
)
;
tooltip
.
once
(
"
hidden
"
(
)
=
>
{
this
.
markup
.
_enableImagePreviewTooltip
(
)
;
}
)
;
tooltip
.
show
(
target
)
;
}
}
)
_getPreview
:
function
(
)
{
if
(
!
this
.
isPreviewable
(
)
)
{
return
promise
.
reject
(
"
_getPreview
called
on
a
non
-
previewable
element
.
"
)
;
}
if
(
this
.
tooltipDataPromise
)
{
return
this
.
tooltipDataPromise
;
}
this
.
tooltipDataPromise
=
Task
.
spawn
(
function
*
(
)
{
let
maxDim
=
Services
.
prefs
.
getIntPref
(
PREVIEW_MAX_DIM_PREF
)
;
let
preview
=
yield
this
.
node
.
getImageData
(
maxDim
)
;
let
data
=
yield
preview
.
data
.
string
(
)
;
this
.
tooltipDataPromise
=
null
;
return
{
data
size
:
preview
.
size
}
;
}
.
bind
(
this
)
)
;
return
this
.
tooltipDataPromise
;
}
isImagePreviewTarget
:
Task
.
async
(
function
*
(
target
tooltip
)
{
if
(
!
this
.
isPreviewable
(
)
)
{
return
false
;
}
let
src
=
this
.
editor
.
getAttributeElement
(
"
src
"
)
;
let
expectedTarget
=
src
?
src
.
querySelector
(
"
.
link
"
)
:
this
.
editor
.
tag
;
if
(
target
!
=
=
expectedTarget
)
{
return
false
;
}
try
{
let
{
data
size
}
=
yield
this
.
_getPreview
(
)
;
let
options
=
{
naturalWidth
:
size
.
naturalWidth
naturalHeight
:
size
.
naturalHeight
maxDim
:
Services
.
prefs
.
getIntPref
(
PREVIEW_MAX_DIM_PREF
)
}
;
setImageTooltip
(
tooltip
this
.
markup
.
doc
data
options
)
;
}
catch
(
e
)
{
setBrokenImageTooltip
(
tooltip
this
.
markup
.
doc
)
;
}
return
true
;
}
)
copyImageDataUri
:
function
(
)
{
this
.
node
.
getImageData
(
)
.
then
(
data
=
>
{
data
.
data
.
string
(
)
.
then
(
str
=
>
{
clipboardHelper
.
copyString
(
str
)
;
}
)
;
}
)
;
}
setInlineTextChild
:
function
(
inlineTextChild
)
{
this
.
inlineTextChild
=
inlineTextChild
;
this
.
editor
.
updateTextEditor
(
)
;
}
clearInlineTextChild
:
function
(
)
{
this
.
inlineTextChild
=
undefined
;
this
.
editor
.
updateTextEditor
(
)
;
}
addAttribute
:
function
(
)
{
this
.
editor
.
newAttr
.
editMode
(
)
;
}
editAttribute
:
function
(
attrName
)
{
this
.
editor
.
attrElements
.
get
(
attrName
)
.
editMode
(
)
;
}
removeAttribute
:
function
(
attrName
)
{
let
doMods
=
this
.
editor
.
_startModifyingAttributes
(
)
;
let
undoMods
=
this
.
editor
.
_startModifyingAttributes
(
)
;
this
.
editor
.
_saveAttribute
(
attrName
undoMods
)
;
doMods
.
removeAttribute
(
attrName
)
;
this
.
undo
.
do
(
(
)
=
>
{
doMods
.
apply
(
)
;
}
(
)
=
>
{
undoMods
.
apply
(
)
;
}
)
;
}
}
)
;
function
RootContainer
(
markupView
node
)
{
this
.
doc
=
markupView
.
doc
;
this
.
elt
=
this
.
doc
.
createElement
(
"
ul
"
)
;
this
.
elt
.
setAttribute
(
"
role
"
"
tree
"
)
;
this
.
elt
.
setAttribute
(
"
tabindex
"
"
0
"
)
;
this
.
elt
.
setAttribute
(
"
aria
-
dropeffect
"
"
none
"
)
;
this
.
elt
.
container
=
this
;
this
.
children
=
this
.
elt
;
this
.
node
=
node
;
this
.
toString
=
(
)
=
>
"
[
root
container
]
"
;
}
RootContainer
.
prototype
=
{
hasChildren
:
true
expanded
:
true
update
:
function
(
)
{
}
destroy
:
function
(
)
{
}
getChildContainers
:
function
(
)
{
return
[
.
.
.
this
.
children
.
children
]
.
map
(
node
=
>
node
.
container
)
;
}
setExpanded
:
function
(
)
{
}
setChildrenRole
:
function
(
)
{
}
updateLevel
:
function
(
)
{
}
}
;
function
GenericEditor
(
container
node
)
{
this
.
container
=
container
;
this
.
markup
=
this
.
container
.
markup
;
this
.
template
=
this
.
markup
.
template
.
bind
(
this
.
markup
)
;
this
.
elt
=
null
;
this
.
template
(
"
generic
"
this
)
;
if
(
node
.
isPseudoElement
)
{
this
.
tag
.
classList
.
add
(
"
theme
-
fg
-
color5
"
)
;
this
.
tag
.
textContent
=
node
.
isBeforePseudoElement
?
"
:
:
before
"
:
"
:
:
after
"
;
}
else
if
(
node
.
nodeType
=
=
nodeConstants
.
DOCUMENT_TYPE_NODE
)
{
this
.
elt
.
classList
.
add
(
"
comment
"
)
;
this
.
tag
.
textContent
=
node
.
doctypeString
;
}
else
{
this
.
tag
.
textContent
=
node
.
nodeName
;
}
}
GenericEditor
.
prototype
=
{
destroy
:
function
(
)
{
this
.
elt
.
remove
(
)
;
}
getInfoAtNode
:
function
(
)
{
return
null
;
}
}
;
function
TextEditor
(
container
node
templateId
)
{
this
.
container
=
container
;
this
.
markup
=
this
.
container
.
markup
;
this
.
node
=
node
;
this
.
template
=
this
.
markup
.
template
.
bind
(
templateId
)
;
this
.
_selected
=
false
;
this
.
markup
.
template
(
templateId
this
)
;
editableField
(
{
element
:
this
.
value
stopOnReturn
:
true
trigger
:
"
dblclick
"
multiline
:
true
maxWidth
:
(
)
=
>
{
let
elementRect
=
this
.
value
.
getBoundingClientRect
(
)
;
let
containerRect
=
this
.
container
.
elt
.
getBoundingClientRect
(
)
;
return
containerRect
.
right
-
elementRect
.
left
-
2
;
}
trimOutput
:
false
done
:
(
val
commit
)
=
>
{
if
(
!
commit
)
{
return
;
}
this
.
node
.
getNodeValue
(
)
.
then
(
longstr
=
>
{
longstr
.
string
(
)
.
then
(
oldValue
=
>
{
longstr
.
release
(
)
.
then
(
null
console
.
error
)
;
this
.
container
.
undo
.
do
(
(
)
=
>
{
this
.
node
.
setNodeValue
(
val
)
;
}
(
)
=
>
{
this
.
node
.
setNodeValue
(
oldValue
)
;
}
)
;
}
)
;
}
)
;
}
}
)
;
this
.
update
(
)
;
}
TextEditor
.
prototype
=
{
get
selected
(
)
{
return
this
.
_selected
;
}
set
selected
(
value
)
{
if
(
value
=
=
=
this
.
_selected
)
{
return
;
}
this
.
_selected
=
value
;
this
.
update
(
)
;
}
update
:
function
(
)
{
let
longstr
=
null
;
this
.
node
.
getNodeValue
(
)
.
then
(
ret
=
>
{
longstr
=
ret
;
return
longstr
.
string
(
)
;
}
)
.
then
(
str
=
>
{
longstr
.
release
(
)
.
then
(
null
console
.
error
)
;
this
.
value
.
textContent
=
str
;
}
)
.
then
(
null
console
.
error
)
;
}
destroy
:
function
(
)
{
}
getInfoAtNode
:
function
(
)
{
return
null
;
}
}
;
function
ElementEditor
(
container
node
)
{
this
.
container
=
container
;
this
.
node
=
node
;
this
.
markup
=
this
.
container
.
markup
;
this
.
template
=
this
.
markup
.
template
.
bind
(
this
.
markup
)
;
this
.
doc
=
this
.
markup
.
doc
;
this
.
attrElements
=
new
Map
(
)
;
this
.
animationTimers
=
{
}
;
this
.
elt
=
null
;
this
.
tag
=
null
;
this
.
closeTag
=
null
;
this
.
attrList
=
null
;
this
.
newAttr
=
null
;
this
.
closeElt
=
null
;
this
.
template
(
"
element
"
this
)
;
if
(
!
node
.
isDocumentElement
)
{
this
.
tag
.
setAttribute
(
"
tabindex
"
"
-
1
"
)
;
editableField
(
{
element
:
this
.
tag
trigger
:
"
dblclick
"
stopOnReturn
:
true
done
:
this
.
onTagEdit
.
bind
(
this
)
}
)
;
}
this
.
newAttr
.
editMode
=
editableField
(
{
element
:
this
.
newAttr
trigger
:
"
dblclick
"
stopOnReturn
:
true
contentType
:
InplaceEditor
.
CONTENT_TYPES
.
CSS_MIXED
popup
:
this
.
markup
.
popup
done
:
(
val
commit
)
=
>
{
if
(
!
commit
)
{
return
;
}
let
doMods
=
this
.
_startModifyingAttributes
(
)
;
let
undoMods
=
this
.
_startModifyingAttributes
(
)
;
this
.
_applyAttributes
(
val
null
doMods
undoMods
)
;
this
.
container
.
undo
.
do
(
(
)
=
>
{
doMods
.
apply
(
)
;
}
function
(
)
{
undoMods
.
apply
(
)
;
}
)
;
}
}
)
;
let
displayName
=
this
.
node
.
displayName
;
this
.
tag
.
textContent
=
displayName
;
this
.
closeTag
.
textContent
=
displayName
;
let
isVoidElement
=
HTML_VOID_ELEMENTS
.
includes
(
displayName
)
;
if
(
node
.
isInHTMLDocument
&
&
isVoidElement
)
{
this
.
elt
.
classList
.
add
(
"
void
-
element
"
)
;
}
this
.
update
(
)
;
this
.
initialized
=
true
;
}
ElementEditor
.
prototype
=
{
set
selected
(
value
)
{
if
(
this
.
textEditor
)
{
this
.
textEditor
.
selected
=
value
;
}
}
flashAttribute
:
function
(
attrName
)
{
if
(
this
.
animationTimers
[
attrName
]
)
{
clearTimeout
(
this
.
animationTimers
[
attrName
]
)
;
}
flashElementOn
(
this
.
getAttributeElement
(
attrName
)
)
;
this
.
animationTimers
[
attrName
]
=
setTimeout
(
(
)
=
>
{
flashElementOff
(
this
.
getAttributeElement
(
attrName
)
)
;
}
this
.
markup
.
CONTAINER_FLASHING_DURATION
)
;
}
getInfoAtNode
:
function
(
node
)
{
if
(
!
node
)
{
return
null
;
}
let
type
=
null
;
let
name
=
null
;
let
value
=
null
;
let
attribute
=
node
.
closest
(
"
.
attreditor
"
)
;
if
(
attribute
)
{
type
=
"
attribute
"
;
name
=
attribute
.
querySelector
(
"
.
attr
-
name
"
)
.
textContent
;
value
=
attribute
.
querySelector
(
"
.
attr
-
value
"
)
.
textContent
;
}
return
{
type
name
value
el
:
node
}
;
}
update
:
function
(
)
{
let
nodeAttributes
=
this
.
node
.
attributes
|
|
[
]
;
let
currentAttributes
=
new
Set
(
nodeAttributes
.
map
(
a
=
>
a
.
name
)
)
;
for
(
let
name
of
this
.
attrElements
.
keys
(
)
)
{
if
(
!
currentAttributes
.
has
(
name
)
)
{
this
.
removeAttribute
(
name
)
;
}
}
for
(
let
attr
of
nodeAttributes
)
{
let
el
=
this
.
attrElements
.
get
(
attr
.
name
)
;
let
valueChanged
=
el
&
&
el
.
dataset
.
value
!
=
=
attr
.
value
;
let
isEditing
=
el
&
&
el
.
querySelector
(
"
.
editable
"
)
.
inplaceEditor
;
let
canSimplyShowEditor
=
el
&
&
(
!
valueChanged
|
|
isEditing
)
;
if
(
canSimplyShowEditor
)
{
el
.
style
.
removeProperty
(
"
display
"
)
;
}
else
{
let
attribute
=
this
.
_createAttribute
(
attr
el
)
;
attribute
.
style
.
removeProperty
(
"
display
"
)
;
if
(
this
.
initialized
)
{
this
.
flashAttribute
(
attr
.
name
)
;
}
}
}
this
.
eventNode
.
style
.
display
=
this
.
node
.
hasEventListeners
?
"
inline
-
block
"
:
"
none
"
;
this
.
updateTextEditor
(
)
;
}
updateTextEditor
:
function
(
)
{
let
node
=
this
.
node
.
inlineTextChild
;
if
(
this
.
textEditor
&
&
this
.
textEditor
.
node
!
=
node
)
{
this
.
elt
.
removeChild
(
this
.
textEditor
.
elt
)
;
this
.
textEditor
=
null
;
}
if
(
node
&
&
!
this
.
textEditor
)
{
this
.
textEditor
=
new
TextEditor
(
this
.
container
node
"
text
"
)
;
this
.
elt
.
insertBefore
(
this
.
textEditor
.
elt
this
.
elt
.
firstChild
.
nextSibling
.
nextSibling
)
;
}
if
(
this
.
textEditor
)
{
this
.
textEditor
.
update
(
)
;
}
}
_startModifyingAttributes
:
function
(
)
{
return
this
.
node
.
startModifyingAttributes
(
)
;
}
getAttributeElement
:
function
(
attrName
)
{
return
this
.
attrList
.
querySelector
(
"
.
attreditor
[
data
-
attr
=
"
+
CSS
.
escape
(
attrName
)
+
"
]
.
attr
-
value
"
)
;
}
removeAttribute
:
function
(
attrName
)
{
let
attr
=
this
.
attrElements
.
get
(
attrName
)
;
if
(
attr
)
{
this
.
attrElements
.
delete
(
attrName
)
;
attr
.
remove
(
)
;
}
}
_createAttribute
:
function
(
attribute
before
=
null
)
{
let
data
=
{
attrName
:
attribute
.
name
tabindex
:
this
.
container
.
canFocus
?
"
0
"
:
"
-
1
"
}
;
this
.
template
(
"
attribute
"
data
)
;
let
{
attr
inner
name
val
}
=
data
;
let
editValueDisplayed
=
attribute
.
value
|
|
"
"
;
let
hasDoubleQuote
=
editValueDisplayed
.
includes
(
'
"
'
)
;
let
hasSingleQuote
=
editValueDisplayed
.
includes
(
"
'
"
)
;
let
initial
=
attribute
.
name
+
'
=
"
'
+
editValueDisplayed
+
'
"
'
;
if
(
hasDoubleQuote
&
&
hasSingleQuote
)
{
editValueDisplayed
=
editValueDisplayed
.
replace
(
/
\
"
/
g
"
&
quot
;
"
)
;
initial
=
attribute
.
name
+
'
=
"
'
+
editValueDisplayed
+
'
"
'
;
}
if
(
hasDoubleQuote
&
&
!
hasSingleQuote
)
{
initial
=
attribute
.
name
+
"
=
'
"
+
editValueDisplayed
+
"
'
"
;
}
attr
.
editMode
=
editableField
(
{
element
:
inner
trigger
:
"
dblclick
"
stopOnReturn
:
true
selectAll
:
false
initial
:
initial
contentType
:
InplaceEditor
.
CONTENT_TYPES
.
CSS_MIXED
popup
:
this
.
markup
.
popup
start
:
(
editor
event
)
=
>
{
if
(
event
&
&
event
.
target
=
=
=
name
)
{
editor
.
input
.
setSelectionRange
(
0
name
.
textContent
.
length
)
;
}
else
if
(
event
&
&
event
.
target
.
closest
(
"
.
attr
-
value
"
)
=
=
=
val
)
{
let
length
=
editValueDisplayed
.
length
;
let
editorLength
=
editor
.
input
.
value
.
length
;
let
start
=
editorLength
-
(
length
+
1
)
;
editor
.
input
.
setSelectionRange
(
start
start
+
length
)
;
}
else
{
editor
.
input
.
select
(
)
;
}
}
done
:
(
newValue
commit
direction
)
=
>
{
if
(
!
commit
|
|
newValue
=
=
=
initial
)
{
return
;
}
let
doMods
=
this
.
_startModifyingAttributes
(
)
;
let
undoMods
=
this
.
_startModifyingAttributes
(
)
;
this
.
refocusOnEdit
(
attribute
.
name
attr
direction
)
;
this
.
_saveAttribute
(
attribute
.
name
undoMods
)
;
doMods
.
removeAttribute
(
attribute
.
name
)
;
this
.
_applyAttributes
(
newValue
attr
doMods
undoMods
)
;
this
.
container
.
undo
.
do
(
(
)
=
>
{
doMods
.
apply
(
)
;
}
(
)
=
>
{
undoMods
.
apply
(
)
;
}
)
;
}
}
)
;
if
(
attribute
.
name
=
=
"
id
"
)
{
before
=
this
.
attrList
.
firstChild
;
}
else
if
(
attribute
.
name
=
=
"
class
"
)
{
let
idNode
=
this
.
attrElements
.
get
(
"
id
"
)
;
before
=
idNode
?
idNode
.
nextSibling
:
this
.
attrList
.
firstChild
;
}
this
.
attrList
.
insertBefore
(
attr
before
)
;
this
.
removeAttribute
(
attribute
.
name
)
;
this
.
attrElements
.
set
(
attribute
.
name
attr
)
;
let
attributes
=
this
.
node
.
attributes
.
filter
(
existingAttribute
=
>
{
return
existingAttribute
.
name
!
=
=
attribute
.
name
;
}
)
;
attributes
.
push
(
attribute
)
;
let
parsedLinksData
=
parseAttribute
(
this
.
node
.
namespaceURI
this
.
node
.
tagName
attributes
attribute
.
name
)
;
let
collapse
=
value
=
>
{
if
(
value
&
&
value
.
match
(
COLLAPSE_DATA_URL_REGEX
)
)
{
return
truncateString
(
value
COLLAPSE_DATA_URL_LENGTH
)
;
}
return
this
.
markup
.
collapseAttributes
?
truncateString
(
value
this
.
markup
.
collapseAttributeLength
)
:
value
;
}
;
val
.
innerHTML
=
"
"
;
for
(
let
token
of
parsedLinksData
)
{
if
(
token
.
type
=
=
=
"
string
"
)
{
val
.
appendChild
(
this
.
doc
.
createTextNode
(
collapse
(
token
.
value
)
)
)
;
}
else
{
let
link
=
this
.
doc
.
createElement
(
"
span
"
)
;
link
.
classList
.
add
(
"
link
"
)
;
link
.
setAttribute
(
"
data
-
type
"
token
.
type
)
;
link
.
setAttribute
(
"
data
-
link
"
token
.
value
)
;
link
.
textContent
=
collapse
(
token
.
value
)
;
val
.
appendChild
(
link
)
;
}
}
name
.
textContent
=
attribute
.
name
;
return
attr
;
}
_applyAttributes
:
function
(
value
attrNode
doMods
undoMods
)
{
let
attrs
=
parseAttributeValues
(
value
this
.
doc
)
;
for
(
let
attr
of
attrs
)
{
this
.
_createAttribute
(
attr
attrNode
?
attrNode
.
nextSibling
:
null
)
;
this
.
_saveAttribute
(
attr
.
name
undoMods
)
;
doMods
.
setAttribute
(
attr
.
name
attr
.
value
)
;
}
}
_saveAttribute
:
function
(
name
undoMods
)
{
let
node
=
this
.
node
;
if
(
node
.
hasAttribute
(
name
)
)
{
let
oldValue
=
node
.
getAttribute
(
name
)
;
undoMods
.
setAttribute
(
name
oldValue
)
;
}
else
{
undoMods
.
removeAttribute
(
name
)
;
}
}
refocusOnEdit
:
function
(
attrName
attrNode
direction
)
{
if
(
this
.
_editedAttributeObserver
)
{
this
.
markup
.
_inspector
.
off
(
"
markupmutation
"
this
.
_editedAttributeObserver
)
;
this
.
_editedAttributeObserver
=
null
;
}
let
container
=
this
.
markup
.
getContainer
(
this
.
node
)
;
let
activeAttrs
=
[
.
.
.
this
.
attrList
.
childNodes
]
.
filter
(
el
=
>
el
.
style
.
display
!
=
"
none
"
)
;
let
attributeIndex
=
activeAttrs
.
indexOf
(
attrNode
)
;
let
onMutations
=
this
.
_editedAttributeObserver
=
(
e
mutations
)
=
>
{
let
isDeletedAttribute
=
false
;
let
isNewAttribute
=
false
;
for
(
let
mutation
of
mutations
)
{
let
inContainer
=
this
.
markup
.
getContainer
(
mutation
.
target
)
=
=
=
container
;
if
(
!
inContainer
)
{
continue
;
}
let
isOriginalAttribute
=
mutation
.
attributeName
=
=
=
attrName
;
isDeletedAttribute
=
isDeletedAttribute
|
|
isOriginalAttribute
&
&
mutation
.
newValue
=
=
=
null
;
isNewAttribute
=
isNewAttribute
|
|
mutation
.
attributeName
!
=
=
attrName
;
}
let
isModifiedOrder
=
isDeletedAttribute
&
&
isNewAttribute
;
this
.
_editedAttributeObserver
=
null
;
let
visibleAttrs
=
[
.
.
.
this
.
attrList
.
childNodes
]
.
filter
(
el
=
>
el
.
style
.
display
!
=
"
none
"
)
;
let
activeEditor
;
if
(
visibleAttrs
.
length
>
0
)
{
if
(
!
direction
)
{
activeEditor
=
visibleAttrs
[
attributeIndex
]
;
}
else
if
(
isModifiedOrder
)
{
activeEditor
=
visibleAttrs
[
0
]
;
}
else
{
let
newAttributeIndex
;
if
(
isDeletedAttribute
)
{
newAttributeIndex
=
attributeIndex
;
}
else
if
(
direction
=
=
Ci
.
nsIFocusManager
.
MOVEFOCUS_FORWARD
)
{
newAttributeIndex
=
attributeIndex
+
1
;
}
else
if
(
direction
=
=
Ci
.
nsIFocusManager
.
MOVEFOCUS_BACKWARD
)
{
newAttributeIndex
=
attributeIndex
-
1
;
}
if
(
newAttributeIndex
>
=
0
&
&
newAttributeIndex
<
=
visibleAttrs
.
length
-
1
)
{
activeEditor
=
visibleAttrs
[
newAttributeIndex
]
;
}
}
}
if
(
!
activeEditor
)
{
activeEditor
=
this
.
newAttr
;
}
if
(
direction
)
{
activeEditor
.
editMode
(
)
;
}
else
{
let
editable
=
activeEditor
=
=
=
this
.
newAttr
?
activeEditor
:
activeEditor
.
querySelector
(
"
.
editable
"
)
;
editable
.
focus
(
)
;
}
this
.
markup
.
emit
(
"
refocusedonedit
"
)
;
}
;
this
.
markup
.
_inspector
.
once
(
"
markupmutation
"
onMutations
)
;
}
onTagEdit
:
function
(
newTagName
isCommit
)
{
if
(
!
isCommit
|
|
newTagName
.
toLowerCase
(
)
=
=
=
this
.
node
.
tagName
.
toLowerCase
(
)
|
|
!
(
"
editTagName
"
in
this
.
markup
.
walker
)
)
{
return
;
}
this
.
markup
.
reselectOnRemoved
(
this
.
node
"
edittagname
"
)
;
this
.
markup
.
walker
.
editTagName
(
this
.
node
newTagName
)
.
then
(
null
(
)
=
>
{
this
.
markup
.
cancelReselectOnRemoved
(
)
;
}
)
;
}
destroy
:
function
(
)
{
for
(
let
key
in
this
.
animationTimers
)
{
clearTimeout
(
this
.
animationTimers
[
key
]
)
;
}
this
.
animationTimers
=
null
;
}
}
;
function
truncateString
(
str
maxLength
)
{
if
(
!
str
|
|
str
.
length
<
=
maxLength
)
{
return
str
;
}
return
str
.
substring
(
0
Math
.
ceil
(
maxLength
/
2
)
)
+
"
"
+
str
.
substring
(
str
.
length
-
Math
.
floor
(
maxLength
/
2
)
)
;
}
function
parseAttributeValues
(
attr
doc
)
{
attr
=
attr
.
trim
(
)
;
let
parseAndGetNode
=
str
=
>
{
return
new
DOMParser
(
)
.
parseFromString
(
str
"
text
/
html
"
)
.
body
.
childNodes
[
0
]
;
}
;
let
el
=
parseAndGetNode
(
"
<
svg
"
+
attr
+
"
>
<
/
svg
>
"
)
|
|
parseAndGetNode
(
"
<
svg
"
+
attr
+
"
\
"
>
<
/
svg
>
"
)
|
|
parseAndGetNode
(
"
<
svg
"
+
attr
+
"
'
>
<
/
svg
>
"
)
;
let
div
=
doc
.
createElement
(
"
div
"
)
;
let
attributes
=
[
]
;
for
(
let
{
name
value
}
of
el
.
attributes
)
{
try
{
div
.
setAttribute
(
name
value
)
;
attributes
.
push
(
{
name
value
}
)
;
}
catch
(
e
)
{
}
}
return
attributes
;
}
function
flashElementOn
(
backgroundElt
foregroundElt
=
backgroundElt
)
{
if
(
!
backgroundElt
|
|
!
foregroundElt
)
{
return
;
}
backgroundElt
.
classList
.
remove
(
"
flash
-
out
"
)
;
backgroundElt
.
classList
.
add
(
"
theme
-
bg
-
contrast
"
)
;
foregroundElt
.
classList
.
add
(
"
theme
-
fg
-
contrast
"
)
;
[
]
.
forEach
.
call
(
foregroundElt
.
querySelectorAll
(
"
[
class
*
=
theme
-
fg
-
color
]
"
)
span
=
>
span
.
classList
.
add
(
"
theme
-
fg
-
contrast
"
)
)
;
}
function
flashElementOff
(
backgroundElt
foregroundElt
=
backgroundElt
)
{
if
(
!
backgroundElt
|
|
!
foregroundElt
)
{
return
;
}
backgroundElt
.
classList
.
add
(
"
flash
-
out
"
)
;
backgroundElt
.
classList
.
remove
(
"
theme
-
bg
-
contrast
"
)
;
foregroundElt
.
classList
.
remove
(
"
theme
-
fg
-
contrast
"
)
;
[
]
.
forEach
.
call
(
foregroundElt
.
querySelectorAll
(
"
[
class
*
=
theme
-
fg
-
color
]
"
)
span
=
>
span
.
classList
.
remove
(
"
theme
-
fg
-
contrast
"
)
)
;
}
function
map
(
value
oldMin
oldMax
newMin
newMax
)
{
let
ratio
=
oldMax
-
oldMin
;
if
(
ratio
=
=
0
)
{
return
value
;
}
return
newMin
+
(
newMax
-
newMin
)
*
(
(
value
-
oldMin
)
/
ratio
)
;
}
loader
.
lazyGetter
(
MarkupView
.
prototype
"
strings
"
(
)
=
>
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
inspector
.
properties
"
)
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
clipboardHelper
"
function
(
)
{
return
Cc
[
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
]
.
getService
(
Ci
.
nsIClipboardHelper
)
;
}
)
;
exports
.
MarkupView
=
MarkupView
;
