"
use
strict
"
;
const
promise
=
require
(
"
promise
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
nodeConstants
=
require
(
"
devtools
/
shared
/
dom
-
node
-
constants
"
)
;
const
nodeFilterConstants
=
require
(
"
devtools
/
shared
/
dom
-
node
-
filter
-
constants
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
{
PluralForm
}
=
require
(
"
devtools
/
shared
/
plural
-
form
"
)
;
const
AutocompletePopup
=
require
(
"
devtools
/
client
/
shared
/
autocomplete
-
popup
"
)
;
const
KeyShortcuts
=
require
(
"
devtools
/
client
/
shared
/
key
-
shortcuts
"
)
;
const
{
scrollIntoViewIfNeeded
}
=
require
(
"
devtools
/
client
/
shared
/
scroll
"
)
;
const
{
UndoStack
}
=
require
(
"
devtools
/
client
/
shared
/
undo
"
)
;
const
{
HTMLTooltip
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
HTMLTooltip
"
)
;
const
{
PrefObserver
}
=
require
(
"
devtools
/
client
/
shared
/
prefs
"
)
;
const
MarkupElementContainer
=
require
(
"
devtools
/
client
/
inspector
/
markup
/
views
/
element
-
container
"
)
;
const
MarkupReadOnlyContainer
=
require
(
"
devtools
/
client
/
inspector
/
markup
/
views
/
read
-
only
-
container
"
)
;
const
MarkupTextContainer
=
require
(
"
devtools
/
client
/
inspector
/
markup
/
views
/
text
-
container
"
)
;
const
RootContainer
=
require
(
"
devtools
/
client
/
inspector
/
markup
/
views
/
root
-
container
"
)
;
const
INSPECTOR_L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
inspector
.
properties
"
)
;
const
PAGE_SIZE
=
10
;
const
DEFAULT_MAX_CHILDREN
=
100
;
const
NEW_SELECTION_HIGHLIGHTER_TIMER
=
1000
;
const
DRAG_DROP_AUTOSCROLL_EDGE_MAX_DISTANCE
=
50
;
const
DRAG_DROP_AUTOSCROLL_EDGE_RATIO
=
0
.
1
;
const
DRAG_DROP_MIN_AUTOSCROLL_SPEED
=
2
;
const
DRAG_DROP_MAX_AUTOSCROLL_SPEED
=
8
;
const
DRAG_DROP_HEIGHT_TO_SPEED
=
500
;
const
DRAG_DROP_HEIGHT_TO_SPEED_MIN
=
0
.
5
;
const
DRAG_DROP_HEIGHT_TO_SPEED_MAX
=
1
;
const
ATTR_COLLAPSE_ENABLED_PREF
=
"
devtools
.
markup
.
collapseAttributes
"
;
const
ATTR_COLLAPSE_LENGTH_PREF
=
"
devtools
.
markup
.
collapseAttributeLength
"
;
function
MarkupView
(
inspector
frame
controllerWindow
)
{
this
.
inspector
=
inspector
;
this
.
walker
=
this
.
inspector
.
walker
;
this
.
_frame
=
frame
;
this
.
win
=
this
.
_frame
.
contentWindow
;
this
.
doc
=
this
.
_frame
.
contentDocument
;
this
.
_elt
=
this
.
doc
.
querySelector
(
"
#
root
"
)
;
this
.
maxChildren
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
markup
.
pagesize
"
DEFAULT_MAX_CHILDREN
)
;
this
.
collapseAttributes
=
Services
.
prefs
.
getBoolPref
(
ATTR_COLLAPSE_ENABLED_PREF
)
;
this
.
collapseAttributeLength
=
Services
.
prefs
.
getIntPref
(
ATTR_COLLAPSE_LENGTH_PREF
)
;
this
.
popup
=
new
AutocompletePopup
(
inspector
.
toolbox
.
doc
{
autoSelect
:
true
theme
:
"
auto
"
}
)
;
this
.
undo
=
new
UndoStack
(
)
;
this
.
undo
.
installController
(
controllerWindow
)
;
this
.
_containers
=
new
Map
(
)
;
this
.
_handleRejectionIfNotDestroyed
=
this
.
_handleRejectionIfNotDestroyed
.
bind
(
this
)
;
this
.
_mutationObserver
=
this
.
_mutationObserver
.
bind
(
this
)
;
this
.
_onDisplayChange
=
this
.
_onDisplayChange
.
bind
(
this
)
;
this
.
_onMouseClick
=
this
.
_onMouseClick
.
bind
(
this
)
;
this
.
_onMouseUp
=
this
.
_onMouseUp
.
bind
(
this
)
;
this
.
_onNewSelection
=
this
.
_onNewSelection
.
bind
(
this
)
;
this
.
_onCopy
=
this
.
_onCopy
.
bind
(
this
)
;
this
.
_onFocus
=
this
.
_onFocus
.
bind
(
this
)
;
this
.
_onMouseMove
=
this
.
_onMouseMove
.
bind
(
this
)
;
this
.
_onMouseOut
=
this
.
_onMouseOut
.
bind
(
this
)
;
this
.
_onToolboxPickerCanceled
=
this
.
_onToolboxPickerCanceled
.
bind
(
this
)
;
this
.
_onToolboxPickerHover
=
this
.
_onToolboxPickerHover
.
bind
(
this
)
;
this
.
_onCollapseAttributesPrefChange
=
this
.
_onCollapseAttributesPrefChange
.
bind
(
this
)
;
this
.
_isImagePreviewTarget
=
this
.
_isImagePreviewTarget
.
bind
(
this
)
;
this
.
_onBlur
=
this
.
_onBlur
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
this
.
_elt
.
addEventListener
(
"
click
"
this
.
_onMouseClick
)
;
this
.
_elt
.
addEventListener
(
"
mousemove
"
this
.
_onMouseMove
)
;
this
.
_elt
.
addEventListener
(
"
mouseout
"
this
.
_onMouseOut
)
;
this
.
_elt
.
addEventListener
(
"
blur
"
this
.
_onBlur
true
)
;
this
.
win
.
addEventListener
(
"
mouseup
"
this
.
_onMouseUp
)
;
this
.
win
.
addEventListener
(
"
copy
"
this
.
_onCopy
)
;
this
.
_frame
.
addEventListener
(
"
focus
"
this
.
_onFocus
)
;
this
.
walker
.
on
(
"
mutations
"
this
.
_mutationObserver
)
;
this
.
walker
.
on
(
"
display
-
change
"
this
.
_onDisplayChange
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
_onNewSelection
)
;
this
.
toolbox
.
on
(
"
picker
-
canceled
"
this
.
_onToolboxPickerCanceled
)
;
this
.
toolbox
.
on
(
"
picker
-
node
-
hovered
"
this
.
_onToolboxPickerHover
)
;
this
.
_onNewSelection
(
)
;
this
.
_initTooltips
(
)
;
this
.
_prefObserver
=
new
PrefObserver
(
"
devtools
.
markup
"
)
;
this
.
_prefObserver
.
on
(
ATTR_COLLAPSE_ENABLED_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_prefObserver
.
on
(
ATTR_COLLAPSE_LENGTH_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_initShortcuts
(
)
;
}
MarkupView
.
prototype
=
{
CONTAINER_FLASHING_DURATION
:
500
_selectedContainer
:
null
get
toolbox
(
)
{
return
this
.
inspector
.
toolbox
;
}
_handleRejectionIfNotDestroyed
:
function
(
e
)
{
if
(
!
this
.
_destroyer
)
{
console
.
error
(
e
)
;
}
}
_initTooltips
:
function
(
)
{
this
.
eventDetailsTooltip
=
new
HTMLTooltip
(
this
.
toolbox
.
doc
{
type
:
"
arrow
"
consumeOutsideClicks
:
false
}
)
;
this
.
imagePreviewTooltip
=
new
HTMLTooltip
(
this
.
toolbox
.
doc
{
type
:
"
arrow
"
useXulWrapper
:
true
}
)
;
this
.
_enableImagePreviewTooltip
(
)
;
}
_enableImagePreviewTooltip
:
function
(
)
{
this
.
imagePreviewTooltip
.
startTogglingOnHover
(
this
.
_elt
this
.
_isImagePreviewTarget
)
;
}
_disableImagePreviewTooltip
:
function
(
)
{
this
.
imagePreviewTooltip
.
stopTogglingOnHover
(
)
;
}
_onToolboxPickerHover
:
function
(
nodeFront
)
{
this
.
showNode
(
nodeFront
)
.
then
(
(
)
=
>
{
this
.
_showNodeAsHovered
(
nodeFront
)
;
}
console
.
error
)
;
}
_onToolboxPickerCanceled
:
function
(
)
{
if
(
this
.
_selectedContainer
)
{
scrollIntoViewIfNeeded
(
this
.
_selectedContainer
.
editor
.
elt
)
;
}
}
isDragging
:
false
_draggedContainer
:
null
_onMouseMove
:
function
(
event
)
{
let
target
=
event
.
target
;
if
(
this
.
_draggedContainer
)
{
this
.
_draggedContainer
.
onMouseMove
(
event
)
;
}
if
(
this
.
isDragging
)
{
event
.
preventDefault
(
)
;
this
.
_autoScroll
(
event
)
;
return
;
}
while
(
!
target
.
container
)
{
if
(
target
.
tagName
.
toLowerCase
(
)
=
=
=
"
body
"
)
{
return
;
}
target
=
target
.
parentNode
;
}
let
container
=
target
.
container
;
if
(
this
.
_hoveredContainer
!
=
=
container
)
{
this
.
_showBoxModel
(
container
.
node
)
;
}
this
.
_showContainerAsHovered
(
container
)
;
this
.
emit
(
"
node
-
hover
"
)
;
}
_onBlur
:
function
(
event
)
{
if
(
!
this
.
_selectedContainer
)
{
return
;
}
let
{
relatedTarget
}
=
event
;
if
(
relatedTarget
&
&
relatedTarget
.
ownerDocument
=
=
=
this
.
doc
)
{
return
;
}
if
(
this
.
_selectedContainer
)
{
this
.
_selectedContainer
.
clearFocus
(
)
;
}
}
_autoScroll
:
function
(
event
)
{
let
docEl
=
this
.
doc
.
documentElement
;
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
let
fromBottom
=
docEl
.
clientHeight
-
event
.
pageY
+
this
.
win
.
scrollY
;
let
fromTop
=
event
.
pageY
-
this
.
win
.
scrollY
;
let
edgeDistance
=
Math
.
min
(
DRAG_DROP_AUTOSCROLL_EDGE_MAX_DISTANCE
docEl
.
clientHeight
*
DRAG_DROP_AUTOSCROLL_EDGE_RATIO
)
;
let
heightToSpeedRatio
=
Math
.
max
(
DRAG_DROP_HEIGHT_TO_SPEED_MIN
Math
.
min
(
DRAG_DROP_HEIGHT_TO_SPEED_MAX
docEl
.
clientHeight
/
DRAG_DROP_HEIGHT_TO_SPEED
)
)
;
if
(
fromBottom
<
=
edgeDistance
)
{
let
speed
=
map
(
fromBottom
0
edgeDistance
DRAG_DROP_MIN_AUTOSCROLL_SPEED
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
this
.
_runUpdateLoop
(
(
)
=
>
{
docEl
.
scrollTop
-
=
heightToSpeedRatio
*
(
speed
-
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
}
)
;
}
if
(
fromTop
<
=
edgeDistance
)
{
let
speed
=
map
(
fromTop
0
edgeDistance
DRAG_DROP_MIN_AUTOSCROLL_SPEED
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
this
.
_runUpdateLoop
(
(
)
=
>
{
docEl
.
scrollTop
+
=
heightToSpeedRatio
*
(
speed
-
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
}
)
;
}
}
_runUpdateLoop
:
function
(
update
)
{
let
loop
=
(
)
=
>
{
update
(
)
;
this
.
_autoScrollAnimationFrame
=
this
.
win
.
requestAnimationFrame
(
loop
)
;
}
;
loop
(
)
;
}
_onMouseClick
:
function
(
event
)
{
let
parentNode
=
event
.
target
;
let
container
;
while
(
parentNode
!
=
=
this
.
doc
.
body
)
{
if
(
parentNode
.
container
)
{
container
=
parentNode
.
container
;
break
;
}
parentNode
=
parentNode
.
parentNode
;
}
if
(
container
instanceof
MarkupElementContainer
)
{
container
.
_buildEventTooltipContent
(
event
.
target
this
.
eventDetailsTooltip
)
;
}
}
_onMouseUp
:
function
(
event
)
{
if
(
this
.
_draggedContainer
)
{
this
.
_draggedContainer
.
onMouseUp
(
event
)
;
}
this
.
indicateDropTarget
(
null
)
;
this
.
indicateDragTarget
(
null
)
;
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
}
_onCollapseAttributesPrefChange
:
function
(
)
{
this
.
collapseAttributes
=
Services
.
prefs
.
getBoolPref
(
ATTR_COLLAPSE_ENABLED_PREF
)
;
this
.
collapseAttributeLength
=
Services
.
prefs
.
getIntPref
(
ATTR_COLLAPSE_LENGTH_PREF
)
;
this
.
update
(
)
;
}
cancelDragging
:
function
(
)
{
if
(
!
this
.
isDragging
)
{
return
;
}
for
(
let
[
container
]
of
this
.
_containers
)
{
if
(
container
.
isDragging
)
{
container
.
cancelDragging
(
)
;
break
;
}
}
this
.
indicateDropTarget
(
null
)
;
this
.
indicateDragTarget
(
null
)
;
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
}
_hoveredContainer
:
null
_showNodeAsHovered
:
function
(
nodeFront
)
{
let
container
=
this
.
getContainer
(
nodeFront
)
;
this
.
_showContainerAsHovered
(
container
)
;
}
_showContainerAsHovered
:
function
(
container
)
{
if
(
this
.
_hoveredContainer
=
=
=
container
)
{
return
;
}
if
(
this
.
_hoveredContainer
)
{
this
.
_hoveredContainer
.
hovered
=
false
;
}
container
.
hovered
=
true
;
this
.
_hoveredContainer
=
container
;
this
.
emit
(
"
showcontainerhovered
"
)
;
}
_onMouseOut
:
function
(
event
)
{
if
(
this
.
_elt
.
contains
(
event
.
relatedTarget
)
)
{
return
;
}
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
if
(
this
.
isDragging
)
{
return
;
}
this
.
_hideBoxModel
(
true
)
;
if
(
this
.
_hoveredContainer
)
{
this
.
_hoveredContainer
.
hovered
=
false
;
}
this
.
_hoveredContainer
=
null
;
this
.
emit
(
"
leave
"
)
;
}
_showBoxModel
:
function
(
nodeFront
)
{
return
this
.
toolbox
.
highlighterUtils
.
highlightNodeFront
(
nodeFront
)
.
catch
(
this
.
_handleRejectionIfNotDestroyed
)
;
}
_hideBoxModel
:
function
(
forceHide
)
{
return
this
.
toolbox
.
highlighterUtils
.
unhighlight
(
forceHide
)
.
catch
(
this
.
_handleRejectionIfNotDestroyed
)
;
}
_briefBoxModelTimer
:
null
_clearBriefBoxModelTimer
:
function
(
)
{
if
(
this
.
_briefBoxModelTimer
)
{
clearTimeout
(
this
.
_briefBoxModelTimer
)
;
this
.
_briefBoxModelPromise
.
resolve
(
)
;
this
.
_briefBoxModelPromise
=
null
;
this
.
_briefBoxModelTimer
=
null
;
}
}
_brieflyShowBoxModel
:
function
(
nodeFront
)
{
this
.
_clearBriefBoxModelTimer
(
)
;
let
onShown
=
this
.
_showBoxModel
(
nodeFront
)
;
let
_resolve
;
this
.
_briefBoxModelPromise
=
new
Promise
(
resolve
=
>
{
_resolve
=
resolve
;
this
.
_briefBoxModelTimer
=
setTimeout
(
(
)
=
>
{
this
.
_hideBoxModel
(
)
.
then
(
resolve
resolve
)
;
}
NEW_SELECTION_HIGHLIGHTER_TIMER
)
;
}
)
;
this
.
_briefBoxModelPromise
.
resolve
=
_resolve
;
return
promise
.
all
(
[
onShown
this
.
_briefBoxModelPromise
]
)
;
}
getContainer
:
function
(
node
)
{
return
this
.
_containers
.
get
(
node
)
;
}
setContainer
:
function
(
node
container
)
{
return
this
.
_containers
.
set
(
node
container
)
;
}
hasContainer
:
function
(
node
)
{
return
this
.
_containers
.
has
(
node
)
;
}
update
:
function
(
)
{
let
updateChildren
=
(
node
)
=
>
{
this
.
getContainer
(
node
)
.
update
(
)
;
for
(
let
child
of
node
.
treeChildren
(
)
)
{
updateChildren
(
child
)
;
}
}
;
let
documentElement
;
for
(
let
node
of
this
.
_rootNode
.
treeChildren
(
)
)
{
if
(
node
.
isDocumentElement
=
=
=
true
)
{
documentElement
=
node
;
break
;
}
}
updateChildren
(
documentElement
)
;
}
async
_isImagePreviewTarget
(
target
)
{
if
(
this
.
isDragging
)
{
return
false
;
}
let
parent
=
target
container
;
while
(
parent
)
{
if
(
parent
.
container
)
{
container
=
parent
.
container
;
break
;
}
parent
=
parent
.
parentNode
;
}
if
(
container
instanceof
MarkupElementContainer
)
{
return
container
.
isImagePreviewTarget
(
target
this
.
imagePreviewTooltip
)
;
}
return
false
;
}
_shouldNewSelectionBeHighlighted
:
function
(
)
{
let
reason
=
this
.
inspector
.
selection
.
reason
;
let
unwantedReasons
=
[
"
inspector
-
open
"
"
navigateaway
"
"
nodeselected
"
"
test
"
]
;
let
isHighlight
=
this
.
_hoveredContainer
&
&
(
this
.
_hoveredContainer
.
node
=
=
=
this
.
inspector
.
selection
.
nodeFront
)
;
return
!
isHighlight
&
&
reason
&
&
!
unwantedReasons
.
includes
(
reason
)
;
}
_onNewSelection
:
function
(
)
{
let
selection
=
this
.
inspector
.
selection
;
if
(
this
.
htmlEditor
)
{
this
.
htmlEditor
.
hide
(
)
;
}
if
(
this
.
_hoveredContainer
&
&
this
.
_hoveredContainer
.
node
!
=
=
selection
.
nodeFront
)
{
this
.
_hoveredContainer
.
hovered
=
false
;
this
.
_hoveredContainer
=
null
;
}
if
(
!
selection
.
isNode
(
)
)
{
this
.
unmarkSelectedNode
(
)
;
return
;
}
let
done
=
this
.
inspector
.
updating
(
"
markup
-
view
"
)
;
let
onShowBoxModel
onShow
;
if
(
this
.
_shouldNewSelectionBeHighlighted
(
)
)
{
onShowBoxModel
=
this
.
_brieflyShowBoxModel
(
selection
.
nodeFront
)
;
}
onShow
=
this
.
showNode
(
selection
.
nodeFront
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyer
)
{
return
promise
.
reject
(
"
markupview
destroyed
"
)
;
}
this
.
markNodeAsSelected
(
selection
.
nodeFront
)
;
this
.
maybeNavigateToNewSelection
(
)
;
return
undefined
;
}
)
.
catch
(
this
.
_handleRejectionIfNotDestroyed
)
;
promise
.
all
(
[
onShowBoxModel
onShow
]
)
.
then
(
done
)
;
}
maybeNavigateToNewSelection
:
function
(
)
{
let
{
reason
nodeFront
}
=
this
.
inspector
.
selection
;
let
reasonsToNavigate
=
[
"
picker
-
node
-
picked
"
"
picker
-
node
-
previewed
"
"
browser
-
context
-
menu
"
"
node
-
inserted
"
]
;
if
(
reason
&
&
reason
.
endsWith
(
"
-
keyboard
"
)
)
{
this
.
getContainer
(
this
.
_rootNode
)
.
elt
.
focus
(
)
;
}
if
(
reasonsToNavigate
.
includes
(
reason
)
)
{
this
.
getContainer
(
this
.
_rootNode
)
.
elt
.
focus
(
)
;
this
.
navigate
(
this
.
getContainer
(
nodeFront
)
)
;
}
}
_selectionWalker
:
function
(
start
)
{
let
walker
=
this
.
doc
.
createTreeWalker
(
start
|
|
this
.
_elt
nodeFilterConstants
.
SHOW_ELEMENT
function
(
element
)
{
if
(
element
.
container
&
&
element
.
container
.
elt
=
=
=
element
&
&
element
.
container
.
visible
)
{
return
nodeFilterConstants
.
FILTER_ACCEPT
;
}
return
nodeFilterConstants
.
FILTER_SKIP
;
}
)
;
walker
.
currentNode
=
this
.
_selectedContainer
.
elt
;
return
walker
;
}
_onCopy
:
function
(
evt
)
{
if
(
this
.
_isInputOrTextarea
(
evt
.
target
)
)
{
return
;
}
let
selection
=
this
.
inspector
.
selection
;
if
(
selection
.
isNode
(
)
)
{
this
.
inspector
.
copyOuterHTML
(
)
;
}
evt
.
stopPropagation
(
)
;
evt
.
preventDefault
(
)
;
}
_initShortcuts
:
function
(
)
{
let
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
win
}
)
;
this
.
_onShortcut
=
this
.
_onShortcut
.
bind
(
this
)
;
[
"
markupView
.
hide
.
key
"
"
markupView
.
edit
.
key
"
"
markupView
.
scrollInto
.
key
"
]
.
forEach
(
name
=
>
{
let
key
=
INSPECTOR_L10N
.
getStr
(
name
)
;
shortcuts
.
on
(
key
event
=
>
this
.
_onShortcut
(
name
event
)
)
;
}
)
;
[
"
Delete
"
"
Backspace
"
"
Home
"
"
Left
"
"
Right
"
"
Up
"
"
Down
"
"
PageUp
"
"
PageDown
"
"
Esc
"
"
Enter
"
"
Space
"
]
.
forEach
(
key
=
>
{
shortcuts
.
on
(
key
event
=
>
this
.
_onShortcut
(
key
event
)
)
;
}
)
;
}
_onShortcut
(
name
event
)
{
if
(
this
.
_isInputOrTextarea
(
event
.
target
)
)
{
return
;
}
switch
(
name
)
{
case
"
markupView
.
hide
.
key
"
:
{
let
node
=
this
.
_selectedContainer
.
node
;
if
(
node
.
hidden
)
{
this
.
walker
.
unhideNode
(
node
)
;
}
else
{
this
.
walker
.
hideNode
(
node
)
;
}
break
;
}
case
"
markupView
.
edit
.
key
"
:
{
this
.
beginEditingOuterHTML
(
this
.
_selectedContainer
.
node
)
;
break
;
}
case
"
markupView
.
scrollInto
.
key
"
:
{
let
selection
=
this
.
_selectedContainer
.
node
;
this
.
inspector
.
scrollNodeIntoView
(
selection
)
;
break
;
}
case
"
Delete
"
:
{
this
.
deleteNodeOrAttribute
(
)
;
break
;
}
case
"
Backspace
"
:
{
this
.
deleteNodeOrAttribute
(
true
)
;
break
;
}
case
"
Home
"
:
{
let
rootContainer
=
this
.
getContainer
(
this
.
_rootNode
)
;
this
.
navigate
(
rootContainer
.
children
.
firstChild
.
container
)
;
break
;
}
case
"
Left
"
:
{
if
(
this
.
_selectedContainer
.
expanded
)
{
this
.
collapseNode
(
this
.
_selectedContainer
.
node
)
;
}
else
{
let
parent
=
this
.
_selectionWalker
(
)
.
parentNode
(
)
;
if
(
parent
)
{
this
.
navigate
(
parent
.
container
)
;
}
}
break
;
}
case
"
Right
"
:
{
if
(
!
this
.
_selectedContainer
.
expanded
&
&
this
.
_selectedContainer
.
hasChildren
)
{
this
.
_expandContainer
(
this
.
_selectedContainer
)
;
}
else
{
let
next
=
this
.
_selectionWalker
(
)
.
nextNode
(
)
;
if
(
next
)
{
this
.
navigate
(
next
.
container
)
;
}
}
break
;
}
case
"
Up
"
:
{
let
previousNode
=
this
.
_selectionWalker
(
)
.
previousNode
(
)
;
if
(
previousNode
)
{
this
.
navigate
(
previousNode
.
container
)
;
}
break
;
}
case
"
Down
"
:
{
let
nextNode
=
this
.
_selectionWalker
(
)
.
nextNode
(
)
;
if
(
nextNode
)
{
this
.
navigate
(
nextNode
.
container
)
;
}
break
;
}
case
"
PageUp
"
:
{
let
walker
=
this
.
_selectionWalker
(
)
;
let
selection
=
this
.
_selectedContainer
;
for
(
let
i
=
0
;
i
<
PAGE_SIZE
;
i
+
+
)
{
let
previousNode
=
walker
.
previousNode
(
)
;
if
(
!
previousNode
)
{
break
;
}
selection
=
previousNode
.
container
;
}
this
.
navigate
(
selection
)
;
break
;
}
case
"
PageDown
"
:
{
let
walker
=
this
.
_selectionWalker
(
)
;
let
selection
=
this
.
_selectedContainer
;
for
(
let
i
=
0
;
i
<
PAGE_SIZE
;
i
+
+
)
{
let
nextNode
=
walker
.
nextNode
(
)
;
if
(
!
nextNode
)
{
break
;
}
selection
=
nextNode
.
container
;
}
this
.
navigate
(
selection
)
;
break
;
}
case
"
Enter
"
:
case
"
Space
"
:
{
if
(
!
this
.
_selectedContainer
.
canFocus
)
{
this
.
_selectedContainer
.
canFocus
=
true
;
this
.
_selectedContainer
.
focus
(
)
;
}
else
{
return
;
}
break
;
}
case
"
Esc
"
:
{
if
(
this
.
isDragging
)
{
this
.
cancelDragging
(
)
;
}
else
{
return
;
}
break
;
}
default
:
console
.
error
(
"
Unexpected
markup
-
view
key
shortcut
"
name
)
;
return
;
}
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
}
_isInputOrTextarea
:
function
(
element
)
{
let
name
=
element
.
tagName
.
toLowerCase
(
)
;
return
name
=
=
=
"
input
"
|
|
name
=
=
=
"
textarea
"
;
}
deleteNodeOrAttribute
:
function
(
moveBackward
)
{
let
focusedAttribute
=
this
.
doc
.
activeElement
?
this
.
doc
.
activeElement
.
closest
(
"
.
attreditor
"
)
:
null
;
if
(
focusedAttribute
)
{
let
container
=
focusedAttribute
.
closest
(
"
li
.
child
"
)
.
container
;
container
.
removeAttribute
(
focusedAttribute
.
dataset
.
attr
)
;
}
else
{
this
.
deleteNode
(
this
.
_selectedContainer
.
node
moveBackward
)
;
}
}
deleteNode
:
function
(
node
moveBackward
)
{
if
(
!
this
.
inspector
.
isDeletable
(
node
)
)
{
return
;
}
let
container
=
this
.
getContainer
(
node
)
;
this
.
walker
.
retainNode
(
node
)
.
then
(
(
)
=
>
{
let
parent
=
node
.
parentNode
(
)
;
let
nextSibling
=
null
;
this
.
undo
.
do
(
(
)
=
>
{
this
.
walker
.
removeNode
(
node
)
.
then
(
siblings
=
>
{
nextSibling
=
siblings
.
nextSibling
;
let
prevSibling
=
siblings
.
previousSibling
;
let
focusNode
=
moveBackward
?
prevSibling
:
nextSibling
;
if
(
!
focusNode
)
{
focusNode
=
nextSibling
|
|
prevSibling
|
|
parent
;
}
let
isNextSiblingText
=
nextSibling
?
nextSibling
.
nodeType
=
=
=
nodeConstants
.
TEXT_NODE
:
false
;
let
isPrevSiblingText
=
prevSibling
?
prevSibling
.
nodeType
=
=
=
nodeConstants
.
TEXT_NODE
:
false
;
if
(
parent
.
numChildren
=
=
=
2
&
&
(
isNextSiblingText
|
|
isPrevSiblingText
)
)
{
focusNode
=
parent
;
}
if
(
container
.
selected
)
{
this
.
navigate
(
this
.
getContainer
(
focusNode
)
)
;
}
}
)
;
}
(
)
=
>
{
let
isValidSibling
=
nextSibling
&
&
!
nextSibling
.
isPseudoElement
;
nextSibling
=
isValidSibling
?
nextSibling
:
null
;
this
.
walker
.
insertBefore
(
node
parent
nextSibling
)
;
}
)
;
}
)
.
catch
(
console
.
error
)
;
}
_onFocus
:
function
(
event
)
{
let
parent
=
event
.
target
;
while
(
!
parent
.
container
)
{
parent
=
parent
.
parentNode
;
}
if
(
parent
)
{
this
.
navigate
(
parent
.
container
)
;
}
}
navigate
:
function
(
container
)
{
if
(
!
container
)
{
return
;
}
this
.
_markContainerAsSelected
(
container
"
treepanel
"
)
;
}
importNode
:
function
(
node
flashNode
)
{
if
(
!
node
)
{
return
null
;
}
if
(
this
.
hasContainer
(
node
)
)
{
return
this
.
getContainer
(
node
)
;
}
let
container
;
let
{
nodeType
isPseudoElement
}
=
node
;
if
(
node
=
=
=
this
.
walker
.
rootNode
)
{
container
=
new
RootContainer
(
this
node
)
;
this
.
_elt
.
appendChild
(
container
.
elt
)
;
this
.
_rootNode
=
node
;
}
else
if
(
nodeType
=
=
nodeConstants
.
ELEMENT_NODE
&
&
!
isPseudoElement
)
{
container
=
new
MarkupElementContainer
(
this
node
this
.
inspector
)
;
}
else
if
(
nodeType
=
=
nodeConstants
.
COMMENT_NODE
|
|
nodeType
=
=
nodeConstants
.
TEXT_NODE
)
{
container
=
new
MarkupTextContainer
(
this
node
this
.
inspector
)
;
}
else
{
container
=
new
MarkupReadOnlyContainer
(
this
node
this
.
inspector
)
;
}
if
(
flashNode
)
{
container
.
flashMutation
(
)
;
}
this
.
setContainer
(
node
container
)
;
container
.
childrenDirty
=
true
;
this
.
_updateChildren
(
container
)
;
this
.
inspector
.
emit
(
"
container
-
created
"
container
)
;
return
container
;
}
_mutationObserver
:
function
(
mutations
)
{
for
(
let
mutation
of
mutations
)
{
let
type
=
mutation
.
type
;
let
target
=
mutation
.
target
;
if
(
mutation
.
type
=
=
=
"
documentUnload
"
)
{
type
=
"
childList
"
;
target
=
mutation
.
targetParent
;
if
(
!
target
)
{
continue
;
}
}
let
container
=
this
.
getContainer
(
target
)
;
if
(
!
container
)
{
continue
;
}
if
(
type
=
=
=
"
attributes
"
|
|
type
=
=
=
"
characterData
"
|
|
type
=
=
=
"
events
"
|
|
type
=
=
=
"
pseudoClassLock
"
)
{
container
.
update
(
)
;
}
else
if
(
type
=
=
=
"
childList
"
|
|
type
=
=
=
"
nativeAnonymousChildList
"
|
|
type
=
=
=
"
slotchange
"
)
{
container
.
childrenDirty
=
true
;
this
.
_updateChildren
(
container
{
flash
:
true
}
)
.
then
(
(
)
=
>
container
.
updateLevel
(
)
)
;
}
else
if
(
type
=
=
=
"
inlineTextChild
"
)
{
container
.
childrenDirty
=
true
;
this
.
_updateChildren
(
container
{
flash
:
true
}
)
;
container
.
update
(
)
;
}
}
this
.
_waitForChildren
(
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyer
)
{
return
;
}
this
.
_flashMutatedNodes
(
mutations
)
;
this
.
inspector
.
emit
(
"
markupmutation
"
mutations
)
;
if
(
this
.
htmlEditor
)
{
this
.
htmlEditor
.
refresh
(
)
;
}
}
)
;
}
_onDisplayChange
:
function
(
nodes
)
{
for
(
let
node
of
nodes
)
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
container
)
{
container
.
update
(
)
;
}
}
}
_flashMutatedNodes
:
function
(
mutations
)
{
let
addedOrEditedContainers
=
new
Set
(
)
;
let
removedContainers
=
new
Set
(
)
;
for
(
let
{
type
target
added
removed
newValue
}
of
mutations
)
{
let
container
=
this
.
getContainer
(
target
)
;
if
(
container
)
{
if
(
type
=
=
=
"
characterData
"
)
{
addedOrEditedContainers
.
add
(
container
)
;
}
else
if
(
type
=
=
=
"
attributes
"
&
&
newValue
=
=
=
null
)
{
addedOrEditedContainers
.
add
(
container
)
;
}
else
if
(
type
=
=
=
"
childList
"
)
{
if
(
removed
.
length
)
{
removedContainers
.
add
(
container
)
;
}
added
.
forEach
(
node
=
>
{
let
addedContainer
=
this
.
getContainer
(
node
)
;
if
(
addedContainer
)
{
addedOrEditedContainers
.
add
(
addedContainer
)
;
removedContainers
.
delete
(
container
)
;
}
}
)
;
}
}
}
for
(
let
container
of
removedContainers
)
{
container
.
flashMutation
(
)
;
}
for
(
let
container
of
addedOrEditedContainers
)
{
container
.
flashMutation
(
)
;
}
}
showNode
:
function
(
node
centered
=
true
)
{
let
parent
=
node
;
this
.
importNode
(
node
)
;
while
(
(
parent
=
parent
.
parentNode
(
)
)
)
{
this
.
importNode
(
parent
)
;
this
.
expandNode
(
parent
)
;
}
return
this
.
_waitForChildren
(
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyer
)
{
return
promise
.
reject
(
"
markupview
destroyed
"
)
;
}
return
this
.
_ensureVisible
(
node
)
;
}
)
.
then
(
(
)
=
>
{
scrollIntoViewIfNeeded
(
this
.
getContainer
(
node
)
.
editor
.
elt
centered
)
;
}
this
.
_handleRejectionIfNotDestroyed
)
;
}
_expandContainer
:
function
(
container
)
{
return
this
.
_updateChildren
(
container
{
expand
:
true
}
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyer
)
{
return
;
}
container
.
setExpanded
(
true
)
;
}
)
;
}
expandNode
:
function
(
node
)
{
let
container
=
this
.
getContainer
(
node
)
;
return
this
.
_expandContainer
(
container
)
;
}
_expandAll
:
function
(
container
)
{
return
this
.
_expandContainer
(
container
)
.
then
(
(
)
=
>
{
let
child
=
container
.
children
.
firstChild
;
let
promises
=
[
]
;
while
(
child
)
{
promises
.
push
(
this
.
_expandAll
(
child
.
container
)
)
;
child
=
child
.
nextSibling
;
}
return
promise
.
all
(
promises
)
;
}
)
.
catch
(
console
.
error
)
;
}
expandAll
:
function
(
node
)
{
node
=
node
|
|
this
.
_rootNode
;
return
this
.
_expandAll
(
this
.
getContainer
(
node
)
)
;
}
collapseNode
:
function
(
node
)
{
let
container
=
this
.
getContainer
(
node
)
;
container
.
setExpanded
(
false
)
;
}
_collapseAll
:
function
(
container
)
{
container
.
setExpanded
(
false
)
;
let
children
=
container
.
getChildContainers
(
)
|
|
[
]
;
children
.
forEach
(
child
=
>
this
.
_collapseAll
(
child
)
)
;
}
collapseAll
:
function
(
node
)
{
this
.
_collapseAll
(
this
.
getContainer
(
node
)
)
;
return
Promise
.
resolve
(
)
;
}
_getNodeHTML
:
function
(
node
isOuter
)
{
let
walkerPromise
=
null
;
if
(
isOuter
)
{
walkerPromise
=
this
.
walker
.
outerHTML
(
node
)
;
}
else
{
walkerPromise
=
this
.
walker
.
innerHTML
(
node
)
;
}
return
walkerPromise
.
then
(
longstr
=
>
{
return
longstr
.
string
(
)
.
then
(
html
=
>
{
longstr
.
release
(
)
.
catch
(
console
.
error
)
;
return
html
;
}
)
;
}
)
;
}
getNodeOuterHTML
:
function
(
node
)
{
return
this
.
_getNodeHTML
(
node
true
)
;
}
getNodeInnerHTML
:
function
(
node
)
{
return
this
.
_getNodeHTML
(
node
)
;
}
reselectOnRemoved
:
function
(
removedNode
reason
)
{
this
.
cancelReselectOnRemoved
(
)
;
let
isHTMLTag
=
removedNode
.
tagName
.
toLowerCase
(
)
=
=
=
"
html
"
;
let
oldContainer
=
this
.
getContainer
(
removedNode
)
;
let
parentContainer
=
this
.
getContainer
(
removedNode
.
parentNode
(
)
)
;
let
childIndex
=
parentContainer
.
getChildContainers
(
)
.
indexOf
(
oldContainer
)
;
let
onMutations
=
this
.
_removedNodeObserver
=
mutations
=
>
{
let
isNodeRemovalMutation
=
false
;
for
(
let
mutation
of
mutations
)
{
let
containsRemovedNode
=
mutation
.
removed
&
&
mutation
.
removed
.
some
(
n
=
>
n
=
=
=
removedNode
)
;
if
(
mutation
.
type
=
=
=
"
childList
"
&
&
(
containsRemovedNode
|
|
isHTMLTag
)
)
{
isNodeRemovalMutation
=
true
;
break
;
}
}
if
(
!
isNodeRemovalMutation
)
{
return
;
}
this
.
inspector
.
off
(
"
markupmutation
"
onMutations
)
;
this
.
_removedNodeObserver
=
null
;
if
(
this
.
inspector
.
selection
.
nodeFront
=
=
=
parentContainer
.
node
|
|
(
this
.
inspector
.
selection
.
nodeFront
=
=
=
removedNode
&
&
isHTMLTag
)
)
{
let
childContainers
=
parentContainer
.
getChildContainers
(
)
;
if
(
childContainers
&
&
childContainers
[
childIndex
]
)
{
let
childContainer
=
childContainers
[
childIndex
]
;
this
.
_markContainerAsSelected
(
childContainer
reason
)
;
if
(
childContainer
.
hasChildren
)
{
this
.
expandNode
(
childContainer
.
node
)
;
}
this
.
emit
(
"
reselectedonremoved
"
)
;
}
}
}
;
this
.
inspector
.
on
(
"
markupmutation
"
onMutations
)
;
}
cancelReselectOnRemoved
:
function
(
)
{
if
(
this
.
_removedNodeObserver
)
{
this
.
inspector
.
off
(
"
markupmutation
"
this
.
_removedNodeObserver
)
;
this
.
_removedNodeObserver
=
null
;
this
.
emit
(
"
canceledreselectonremoved
"
)
;
}
}
updateNodeOuterHTML
:
function
(
node
newValue
)
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
promise
.
reject
(
)
;
}
this
.
reselectOnRemoved
(
node
"
outerhtml
"
)
;
return
this
.
walker
.
setOuterHTML
(
node
newValue
)
.
catch
(
(
)
=
>
{
this
.
cancelReselectOnRemoved
(
)
;
}
)
;
}
updateNodeInnerHTML
:
function
(
node
newValue
oldValue
)
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
promise
.
reject
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
container
.
undo
.
do
(
(
)
=
>
{
this
.
walker
.
setInnerHTML
(
node
newValue
)
.
then
(
resolve
reject
)
;
}
(
)
=
>
{
this
.
walker
.
setInnerHTML
(
node
oldValue
)
;
}
)
;
}
)
;
}
insertAdjacentHTMLToNode
:
function
(
node
position
value
)
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
promise
.
reject
(
)
;
}
let
injectedNodes
=
[
]
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
container
.
undo
.
do
(
(
)
=
>
{
this
.
walker
.
insertAdjacentHTML
(
node
position
value
)
.
then
(
nodeArray
=
>
{
injectedNodes
=
nodeArray
.
nodes
;
return
nodeArray
;
}
)
.
then
(
resolve
reject
)
;
}
(
)
=
>
{
this
.
walker
.
removeNodes
(
injectedNodes
)
;
}
)
;
}
)
;
}
beginEditingOuterHTML
:
function
(
node
)
{
this
.
getNodeOuterHTML
(
node
)
.
then
(
oldValue
=
>
{
let
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
;
}
if
(
!
this
.
htmlEditor
)
{
let
HTMLEditor
=
require
(
"
devtools
/
client
/
inspector
/
markup
/
views
/
html
-
editor
"
)
;
this
.
htmlEditor
=
new
HTMLEditor
(
this
.
doc
)
;
}
this
.
htmlEditor
.
show
(
container
.
tagLine
oldValue
)
;
this
.
htmlEditor
.
once
(
"
popuphidden
"
(
commit
value
)
=
>
{
this
.
doc
.
documentElement
.
focus
(
)
;
if
(
commit
)
{
this
.
updateNodeOuterHTML
(
node
value
oldValue
)
;
}
}
)
;
this
.
emit
(
"
begin
-
editing
"
)
;
}
)
;
}
setNodeExpanded
:
function
(
node
expanded
applyToDescendants
)
{
if
(
expanded
)
{
if
(
applyToDescendants
)
{
this
.
expandAll
(
node
)
;
}
else
{
this
.
expandNode
(
node
)
;
}
}
else
if
(
applyToDescendants
)
{
this
.
collapseAll
(
node
)
;
}
else
{
this
.
collapseNode
(
node
)
;
}
}
markNodeAsSelected
:
function
(
node
reason
=
"
nodeselected
"
)
{
let
container
=
this
.
getContainer
(
node
)
;
return
this
.
_markContainerAsSelected
(
container
)
;
}
_markContainerAsSelected
:
function
(
container
reason
)
{
if
(
!
container
|
|
this
.
_selectedContainer
=
=
=
container
)
{
return
false
;
}
let
{
node
}
=
container
;
if
(
this
.
_selectedContainer
)
{
this
.
_selectedContainer
.
selected
=
false
;
this
.
_selectedContainer
.
clearFocus
(
)
;
}
this
.
_selectedContainer
=
container
;
if
(
node
)
{
this
.
_selectedContainer
.
selected
=
true
;
}
if
(
this
.
inspector
.
selection
.
nodeFront
!
=
=
node
)
{
this
.
inspector
.
selection
.
setNodeFront
(
node
{
reason
}
)
;
}
return
true
;
}
_ensureVisible
:
function
(
node
)
{
while
(
node
)
{
let
container
=
this
.
getContainer
(
node
)
;
let
parent
=
node
.
parentNode
(
)
;
if
(
!
container
.
elt
.
parentNode
)
{
let
parentContainer
=
this
.
getContainer
(
parent
)
;
if
(
parentContainer
)
{
parentContainer
.
childrenDirty
=
true
;
this
.
_updateChildren
(
parentContainer
{
expand
:
true
}
)
;
}
}
node
=
parent
;
}
return
this
.
_waitForChildren
(
)
;
}
unmarkSelectedNode
:
function
(
)
{
if
(
this
.
_selectedContainer
)
{
this
.
_selectedContainer
.
selected
=
false
;
this
.
_selectedContainer
=
null
;
}
}
_checkSelectionVisible
:
function
(
container
)
{
let
centered
=
null
;
let
node
=
this
.
inspector
.
selection
.
nodeFront
;
while
(
node
)
{
if
(
node
.
parentNode
(
)
=
=
=
container
.
node
)
{
centered
=
node
;
break
;
}
node
=
node
.
parentNode
(
)
;
}
return
centered
;
}
_updateChildren
:
function
(
container
options
)
{
let
expand
=
options
&
&
options
.
expand
;
let
flash
=
options
&
&
options
.
flash
;
container
.
hasChildren
=
container
.
node
.
hasChildren
;
container
.
setChildrenRole
(
)
;
if
(
!
this
.
_queuedChildUpdates
)
{
this
.
_queuedChildUpdates
=
new
Map
(
)
;
}
if
(
this
.
_queuedChildUpdates
.
has
(
container
)
)
{
return
this
.
_queuedChildUpdates
.
get
(
container
)
;
}
if
(
!
container
.
childrenDirty
)
{
return
promise
.
resolve
(
container
)
;
}
if
(
container
.
inlineTextChild
&
&
container
.
inlineTextChild
!
=
container
.
node
.
inlineTextChild
)
{
this
.
_containers
.
delete
(
container
.
inlineTextChild
)
;
container
.
clearInlineTextChild
(
)
;
if
(
container
.
hasChildren
&
&
container
.
selected
)
{
container
.
setExpanded
(
true
)
;
}
}
if
(
container
.
node
.
inlineTextChild
)
{
container
.
setExpanded
(
false
)
;
while
(
container
.
children
.
firstChild
)
{
container
.
children
.
firstChild
.
remove
(
)
;
}
container
.
setInlineTextChild
(
container
.
node
.
inlineTextChild
)
;
this
.
setContainer
(
container
.
node
.
inlineTextChild
container
)
;
container
.
childrenDirty
=
false
;
return
promise
.
resolve
(
container
)
;
}
if
(
!
container
.
hasChildren
)
{
while
(
container
.
children
.
firstChild
)
{
container
.
children
.
firstChild
.
remove
(
)
;
}
container
.
childrenDirty
=
false
;
container
.
setExpanded
(
false
)
;
return
promise
.
resolve
(
container
)
;
}
if
(
!
(
container
.
expanded
|
|
expand
)
)
{
return
promise
.
resolve
(
container
)
;
}
let
centered
=
this
.
_checkSelectionVisible
(
container
)
;
container
.
childrenDirty
=
false
;
let
isShadowHost
=
container
.
node
.
isShadowHost
;
let
updatePromise
=
this
.
_getVisibleChildren
(
container
centered
)
.
then
(
children
=
>
{
if
(
!
this
.
_containers
)
{
return
promise
.
reject
(
"
markup
view
destroyed
"
)
;
}
this
.
_queuedChildUpdates
.
delete
(
container
)
;
if
(
container
.
childrenDirty
)
{
return
this
.
_updateChildren
(
container
{
expand
:
centered
|
|
expand
}
)
;
}
let
fragment
=
this
.
doc
.
createDocumentFragment
(
)
;
for
(
let
child
of
children
.
nodes
)
{
let
{
isDirectShadowHostChild
}
=
child
;
if
(
!
isShadowHost
&
&
isDirectShadowHostChild
)
{
continue
;
}
let
childContainer
=
this
.
importNode
(
child
flash
)
;
fragment
.
appendChild
(
childContainer
.
elt
)
;
}
while
(
container
.
children
.
firstChild
)
{
container
.
children
.
firstChild
.
remove
(
)
;
}
if
(
!
children
.
hasFirst
)
{
let
topItem
=
this
.
buildMoreNodesButtonMarkup
(
container
)
;
fragment
.
insertBefore
(
topItem
fragment
.
firstChild
)
;
}
if
(
!
children
.
hasLast
)
{
let
bottomItem
=
this
.
buildMoreNodesButtonMarkup
(
container
)
;
fragment
.
appendChild
(
bottomItem
)
;
}
container
.
children
.
appendChild
(
fragment
)
;
return
container
;
}
)
.
catch
(
this
.
_handleRejectionIfNotDestroyed
)
;
this
.
_queuedChildUpdates
.
set
(
container
updatePromise
)
;
return
updatePromise
;
}
buildMoreNodesButtonMarkup
:
function
(
container
)
{
let
elt
=
this
.
doc
.
createElement
(
"
li
"
)
;
elt
.
classList
.
add
(
"
more
-
nodes
"
"
devtools
-
class
-
comment
"
)
;
let
label
=
this
.
doc
.
createElement
(
"
span
"
)
;
label
.
textContent
=
INSPECTOR_L10N
.
getStr
(
"
markupView
.
more
.
showing
"
)
;
elt
.
appendChild
(
label
)
;
let
button
=
this
.
doc
.
createElement
(
"
button
"
)
;
button
.
setAttribute
(
"
href
"
"
#
"
)
;
let
showAllString
=
PluralForm
.
get
(
container
.
node
.
numChildren
INSPECTOR_L10N
.
getStr
(
"
markupView
.
more
.
showAll2
"
)
)
;
button
.
textContent
=
showAllString
.
replace
(
"
#
1
"
container
.
node
.
numChildren
)
;
elt
.
appendChild
(
button
)
;
button
.
addEventListener
(
"
click
"
(
)
=
>
{
container
.
maxChildren
=
-
1
;
container
.
childrenDirty
=
true
;
this
.
_updateChildren
(
container
)
;
}
)
;
return
elt
;
}
_waitForChildren
:
function
(
)
{
if
(
!
this
.
_queuedChildUpdates
)
{
return
promise
.
resolve
(
undefined
)
;
}
return
promise
.
all
(
[
.
.
.
this
.
_queuedChildUpdates
.
values
(
)
]
)
;
}
_getVisibleChildren
:
function
(
container
centered
)
{
let
maxChildren
=
container
.
maxChildren
|
|
this
.
maxChildren
;
if
(
maxChildren
=
=
-
1
)
{
maxChildren
=
undefined
;
}
return
this
.
walker
.
children
(
container
.
node
{
maxNodes
:
maxChildren
center
:
centered
}
)
;
}
destroy
:
function
(
)
{
if
(
this
.
_destroyer
)
{
return
this
.
_destroyer
;
}
this
.
_destroyer
=
promise
.
resolve
(
)
;
this
.
_clearBriefBoxModelTimer
(
)
;
this
.
_hoveredContainer
=
null
;
if
(
this
.
htmlEditor
)
{
this
.
htmlEditor
.
destroy
(
)
;
this
.
htmlEditor
=
null
;
}
this
.
undo
.
destroy
(
)
;
this
.
undo
=
null
;
this
.
popup
.
destroy
(
)
;
this
.
popup
=
null
;
this
.
_elt
.
removeEventListener
(
"
click
"
this
.
_onMouseClick
)
;
this
.
_elt
.
removeEventListener
(
"
mousemove
"
this
.
_onMouseMove
)
;
this
.
_elt
.
removeEventListener
(
"
mouseout
"
this
.
_onMouseOut
)
;
this
.
_elt
.
removeEventListener
(
"
blur
"
this
.
_onBlur
true
)
;
this
.
win
.
removeEventListener
(
"
mouseup
"
this
.
_onMouseUp
)
;
this
.
win
.
removeEventListener
(
"
copy
"
this
.
_onCopy
)
;
this
.
_frame
.
removeEventListener
(
"
focus
"
this
.
_onFocus
)
;
this
.
walker
.
off
(
"
mutations
"
this
.
_mutationObserver
)
;
this
.
walker
.
off
(
"
display
-
change
"
this
.
_onDisplayChange
)
;
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
_onNewSelection
)
;
this
.
toolbox
.
off
(
"
picker
-
node
-
hovered
"
this
.
_onToolboxPickerHover
)
;
this
.
_prefObserver
.
off
(
ATTR_COLLAPSE_ENABLED_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_prefObserver
.
off
(
ATTR_COLLAPSE_LENGTH_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_prefObserver
.
destroy
(
)
;
this
.
_elt
=
null
;
for
(
let
[
container
]
of
this
.
_containers
)
{
container
.
destroy
(
)
;
}
this
.
_containers
=
null
;
this
.
eventDetailsTooltip
.
destroy
(
)
;
this
.
eventDetailsTooltip
=
null
;
this
.
imagePreviewTooltip
.
destroy
(
)
;
this
.
imagePreviewTooltip
=
null
;
this
.
win
=
null
;
this
.
doc
=
null
;
this
.
_lastDropTarget
=
null
;
this
.
_lastDragTarget
=
null
;
return
this
.
_destroyer
;
}
findClosestDragDropTarget
:
function
(
el
)
{
return
el
.
classList
.
contains
(
"
tag
-
line
"
)
?
el
:
el
.
querySelector
(
"
.
tag
-
line
"
)
|
|
el
.
closest
(
"
.
tag
-
line
"
)
;
}
indicateDropTarget
:
function
(
el
)
{
if
(
this
.
_lastDropTarget
)
{
this
.
_lastDropTarget
.
classList
.
remove
(
"
drop
-
target
"
)
;
}
if
(
!
el
)
{
return
;
}
let
target
=
this
.
findClosestDragDropTarget
(
el
)
;
if
(
target
)
{
target
.
classList
.
add
(
"
drop
-
target
"
)
;
this
.
_lastDropTarget
=
target
;
}
}
indicateDragTarget
:
function
(
el
)
{
if
(
this
.
_lastDragTarget
)
{
this
.
_lastDragTarget
.
classList
.
remove
(
"
drag
-
target
"
)
;
}
if
(
!
el
)
{
return
;
}
let
target
=
this
.
findClosestDragDropTarget
(
el
)
;
if
(
target
)
{
target
.
classList
.
add
(
"
drag
-
target
"
)
;
this
.
_lastDragTarget
=
target
;
}
}
get
dropTargetNodes
(
)
{
let
target
=
this
.
_lastDropTarget
;
if
(
!
target
)
{
return
null
;
}
let
parent
nextSibling
;
if
(
target
.
previousElementSibling
&
&
target
.
previousElementSibling
.
nodeName
.
toLowerCase
(
)
=
=
=
"
ul
"
)
{
parent
=
target
.
parentNode
.
container
.
node
;
nextSibling
=
null
;
}
else
{
parent
=
target
.
parentNode
.
container
.
node
.
parentNode
(
)
;
nextSibling
=
target
.
parentNode
.
container
.
node
;
}
if
(
nextSibling
&
&
nextSibling
.
isBeforePseudoElement
)
{
nextSibling
=
target
.
parentNode
.
parentNode
.
children
[
1
]
.
container
.
node
;
}
if
(
nextSibling
&
&
nextSibling
.
isAfterPseudoElement
)
{
parent
=
target
.
parentNode
.
container
.
node
.
parentNode
(
)
;
nextSibling
=
null
;
}
if
(
parent
.
nodeType
!
=
=
nodeConstants
.
ELEMENT_NODE
)
{
return
null
;
}
return
{
parent
nextSibling
}
;
}
}
;
function
map
(
value
oldMin
oldMax
newMin
newMax
)
{
let
ratio
=
oldMax
-
oldMin
;
if
(
ratio
=
=
0
)
{
return
value
;
}
return
newMin
+
(
newMax
-
newMin
)
*
(
(
value
-
oldMin
)
/
ratio
)
;
}
module
.
exports
=
MarkupView
;
