"
use
strict
"
;
const
flags
=
require
(
"
resource
:
/
/
devtools
/
shared
/
flags
.
js
"
)
;
const
nodeConstants
=
require
(
"
resource
:
/
/
devtools
/
shared
/
dom
-
node
-
constants
.
js
"
)
;
const
nodeFilterConstants
=
require
(
"
resource
:
/
/
devtools
/
shared
/
dom
-
node
-
filter
-
constants
.
js
"
)
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
l10n
.
js
"
)
;
const
{
PluralForm
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
plural
-
form
.
js
"
)
;
const
AutocompletePopup
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
autocomplete
-
popup
.
js
"
)
;
const
KeyShortcuts
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
key
-
shortcuts
.
js
"
)
;
const
{
scrollIntoViewIfNeeded
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
client
/
shared
/
scroll
.
mjs
"
)
;
const
{
PrefObserver
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
prefs
.
js
"
)
;
const
MarkupElementContainer
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
markup
/
views
/
element
-
container
.
js
"
)
;
const
MarkupReadOnlyContainer
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
markup
/
views
/
read
-
only
-
container
.
js
"
)
;
const
MarkupTextContainer
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
markup
/
views
/
text
-
container
.
js
"
)
;
const
RootContainer
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
markup
/
views
/
root
-
container
.
js
"
)
;
const
WalkerEventListener
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
shared
/
walker
-
event
-
listener
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
[
"
createDOMMutationBreakpoint
"
"
deleteDOMMutationBreakpoint
"
]
"
resource
:
/
/
devtools
/
client
/
framework
/
actions
/
index
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
MarkupContextMenu
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
markup
/
markup
-
context
-
menu
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
SlottedNodeContainer
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
markup
/
views
/
slotted
-
node
-
container
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
getLongString
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
shared
/
utils
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
openContentLink
"
"
resource
:
/
/
devtools
/
client
/
shared
/
link
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
HTMLTooltip
"
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
tooltip
/
HTMLTooltip
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
UndoStack
"
"
resource
:
/
/
devtools
/
client
/
shared
/
undo
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
clipboardHelper
"
"
resource
:
/
/
devtools
/
shared
/
platform
/
clipboard
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
beautify
"
"
resource
:
/
/
devtools
/
shared
/
jsbeautify
/
beautify
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
getTabPrefs
"
"
resource
:
/
/
devtools
/
shared
/
indentation
.
js
"
true
)
;
const
INSPECTOR_L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
inspector
.
properties
"
)
;
const
PAGE_SIZE
=
10
;
const
DEFAULT_MAX_CHILDREN
=
100
;
const
DRAG_DROP_AUTOSCROLL_EDGE_MAX_DISTANCE
=
50
;
const
DRAG_DROP_AUTOSCROLL_EDGE_RATIO
=
0
.
1
;
const
DRAG_DROP_MIN_AUTOSCROLL_SPEED
=
2
;
const
DRAG_DROP_MAX_AUTOSCROLL_SPEED
=
8
;
const
DRAG_DROP_HEIGHT_TO_SPEED
=
500
;
const
DRAG_DROP_HEIGHT_TO_SPEED_MIN
=
0
.
5
;
const
DRAG_DROP_HEIGHT_TO_SPEED_MAX
=
1
;
const
ATTR_COLLAPSE_ENABLED_PREF
=
"
devtools
.
markup
.
collapseAttributes
"
;
const
ATTR_COLLAPSE_LENGTH_PREF
=
"
devtools
.
markup
.
collapseAttributeLength
"
;
const
BEAUTIFY_HTML_ON_COPY_PREF
=
"
devtools
.
markup
.
beautifyOnCopy
"
;
const
shortcutHandlers
=
{
"
markupView
.
hide
.
key
"
:
markupView
=
>
{
const
node
=
markupView
.
_selectedContainer
.
node
;
const
walkerFront
=
node
.
walkerFront
;
if
(
node
.
hidden
)
{
walkerFront
.
unhideNode
(
node
)
;
}
else
{
walkerFront
.
hideNode
(
node
)
;
}
}
"
markupView
.
edit
.
key
"
:
markupView
=
>
{
markupView
.
beginEditingHTML
(
markupView
.
_selectedContainer
.
node
)
;
}
"
markupView
.
scrollInto
.
key
"
:
markupView
=
>
{
markupView
.
scrollNodeIntoView
(
)
;
}
Delete
:
markupView
=
>
{
markupView
.
deleteNodeOrAttribute
(
)
;
}
Backspace
:
markupView
=
>
{
markupView
.
deleteNodeOrAttribute
(
true
)
;
}
Home
:
markupView
=
>
{
const
rootContainer
=
markupView
.
getContainer
(
markupView
.
_rootNode
)
;
markupView
.
navigate
(
rootContainer
.
children
.
firstChild
.
container
)
;
}
Left
:
markupView
=
>
{
if
(
markupView
.
_selectedContainer
.
expanded
)
{
markupView
.
collapseNode
(
markupView
.
_selectedContainer
.
node
)
;
}
else
{
const
parent
=
markupView
.
_selectionWalker
(
)
.
parentNode
(
)
;
if
(
parent
)
{
markupView
.
navigate
(
parent
.
container
)
;
}
}
}
Right
:
markupView
=
>
{
if
(
!
markupView
.
_selectedContainer
.
expanded
&
&
markupView
.
_selectedContainer
.
hasChildren
)
{
markupView
.
_expandContainer
(
markupView
.
_selectedContainer
)
;
}
else
{
const
next
=
markupView
.
_selectionWalker
(
)
.
nextNode
(
)
;
if
(
next
)
{
markupView
.
navigate
(
next
.
container
)
;
}
}
}
Up
:
markupView
=
>
{
const
previousNode
=
markupView
.
_selectionWalker
(
)
.
previousNode
(
)
;
if
(
previousNode
)
{
markupView
.
navigate
(
previousNode
.
container
)
;
}
}
Down
:
markupView
=
>
{
const
nextNode
=
markupView
.
_selectionWalker
(
)
.
nextNode
(
)
;
if
(
nextNode
)
{
markupView
.
navigate
(
nextNode
.
container
)
;
}
}
PageUp
:
markupView
=
>
{
const
walker
=
markupView
.
_selectionWalker
(
)
;
let
selection
=
markupView
.
_selectedContainer
;
for
(
let
i
=
0
;
i
<
PAGE_SIZE
;
i
+
+
)
{
const
previousNode
=
walker
.
previousNode
(
)
;
if
(
!
previousNode
)
{
break
;
}
selection
=
previousNode
.
container
;
}
markupView
.
navigate
(
selection
)
;
}
PageDown
:
markupView
=
>
{
const
walker
=
markupView
.
_selectionWalker
(
)
;
let
selection
=
markupView
.
_selectedContainer
;
for
(
let
i
=
0
;
i
<
PAGE_SIZE
;
i
+
+
)
{
const
nextNode
=
walker
.
nextNode
(
)
;
if
(
!
nextNode
)
{
break
;
}
selection
=
nextNode
.
container
;
}
markupView
.
navigate
(
selection
)
;
}
Enter
:
markupView
=
>
{
if
(
!
markupView
.
_selectedContainer
.
canFocus
)
{
markupView
.
_selectedContainer
.
canFocus
=
true
;
markupView
.
_selectedContainer
.
focus
(
)
;
return
false
;
}
return
true
;
}
Space
:
markupView
=
>
{
if
(
!
markupView
.
_selectedContainer
.
canFocus
)
{
markupView
.
_selectedContainer
.
canFocus
=
true
;
markupView
.
_selectedContainer
.
focus
(
)
;
return
false
;
}
return
true
;
}
Esc
:
markupView
=
>
{
if
(
markupView
.
isDragging
)
{
markupView
.
cancelDragging
(
)
;
return
false
;
}
return
true
;
}
}
;
function
MarkupView
(
inspector
frame
controllerWindow
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
controllerWindow
=
controllerWindow
;
this
.
inspector
=
inspector
;
this
.
highlighters
=
inspector
.
highlighters
;
this
.
walker
=
this
.
inspector
.
walker
;
this
.
_frame
=
frame
;
this
.
win
=
this
.
_frame
.
contentWindow
;
this
.
doc
=
this
.
_frame
.
contentDocument
;
this
.
_elt
=
this
.
doc
.
getElementById
(
"
root
"
)
;
this
.
telemetry
=
this
.
inspector
.
telemetry
;
this
.
_breakpointIDsInLocalState
=
new
Map
(
)
;
this
.
_containersToUpdate
=
new
Map
(
)
;
this
.
maxChildren
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
markup
.
pagesize
"
DEFAULT_MAX_CHILDREN
)
;
this
.
collapseAttributes
=
Services
.
prefs
.
getBoolPref
(
ATTR_COLLAPSE_ENABLED_PREF
)
;
this
.
collapseAttributeLength
=
Services
.
prefs
.
getIntPref
(
ATTR_COLLAPSE_LENGTH_PREF
)
;
this
.
popup
=
new
AutocompletePopup
(
inspector
.
toolbox
.
doc
{
autoSelect
:
true
}
)
;
this
.
_containers
=
new
Map
(
)
;
this
.
_slottedContainerKeys
=
new
WeakMap
(
)
;
this
.
_handleRejectionIfNotDestroyed
=
this
.
_handleRejectionIfNotDestroyed
.
bind
(
this
)
;
this
.
_isImagePreviewTarget
=
this
.
_isImagePreviewTarget
.
bind
(
this
)
;
this
.
_onWalkerMutations
=
this
.
_onWalkerMutations
.
bind
(
this
)
;
this
.
_onBlur
=
this
.
_onBlur
.
bind
(
this
)
;
this
.
_onContextMenu
=
this
.
_onContextMenu
.
bind
(
this
)
;
this
.
_onCopy
=
this
.
_onCopy
.
bind
(
this
)
;
this
.
_onCollapseAttributesPrefChange
=
this
.
_onCollapseAttributesPrefChange
.
bind
(
this
)
;
this
.
_onWalkerNodeStatesChanged
=
this
.
_onWalkerNodeStatesChanged
.
bind
(
this
)
;
this
.
_onFocus
=
this
.
_onFocus
.
bind
(
this
)
;
this
.
_onResourceAvailable
=
this
.
_onResourceAvailable
.
bind
(
this
)
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
this
.
_onMouseClick
=
this
.
_onMouseClick
.
bind
(
this
)
;
this
.
_onMouseMove
=
this
.
_onMouseMove
.
bind
(
this
)
;
this
.
_onMouseOut
=
this
.
_onMouseOut
.
bind
(
this
)
;
this
.
_onMouseUp
=
this
.
_onMouseUp
.
bind
(
this
)
;
this
.
_onNewSelection
=
this
.
_onNewSelection
.
bind
(
this
)
;
this
.
_onToolboxPickerCanceled
=
this
.
_onToolboxPickerCanceled
.
bind
(
this
)
;
this
.
_onToolboxPickerHover
=
this
.
_onToolboxPickerHover
.
bind
(
this
)
;
this
.
_onDomMutation
=
this
.
_onDomMutation
.
bind
(
this
)
;
this
.
_updateSearchResultsHighlightingInSelectedNode
=
this
.
_updateSearchResultsHighlightingInSelectedNode
.
bind
(
this
)
;
this
.
_elt
.
addEventListener
(
"
blur
"
this
.
_onBlur
true
)
;
this
.
_elt
.
addEventListener
(
"
click
"
this
.
_onMouseClick
)
;
this
.
_elt
.
addEventListener
(
"
contextmenu
"
this
.
_onContextMenu
)
;
this
.
_elt
.
addEventListener
(
"
mousemove
"
this
.
_onMouseMove
)
;
this
.
_elt
.
addEventListener
(
"
mouseout
"
this
.
_onMouseOut
)
;
this
.
_frame
.
addEventListener
(
"
focus
"
this
.
_onFocus
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
_onNewSelection
)
;
this
.
inspector
.
on
(
"
search
-
cleared
"
this
.
_updateSearchResultsHighlightingInSelectedNode
)
;
this
.
_unsubscribeFromToolboxStore
=
this
.
inspector
.
toolbox
.
store
.
subscribe
(
this
.
_onDomMutation
)
;
if
(
flags
.
testing
)
{
this
.
_initTooltips
(
)
;
}
this
.
win
.
addEventListener
(
"
copy
"
this
.
_onCopy
)
;
this
.
win
.
addEventListener
(
"
mouseup
"
this
.
_onMouseUp
)
;
this
.
inspector
.
toolbox
.
nodePicker
.
on
(
"
picker
-
node
-
canceled
"
this
.
_onToolboxPickerCanceled
)
;
this
.
inspector
.
toolbox
.
nodePicker
.
on
(
"
picker
-
node
-
hovered
"
this
.
_onToolboxPickerHover
)
;
this
.
onHighlighterShown
=
data
=
>
this
.
handleHighlighterEvent
(
"
highlighter
-
shown
"
data
)
;
this
.
onHighlighterHidden
=
data
=
>
this
.
handleHighlighterEvent
(
"
highlighter
-
hidden
"
data
)
;
this
.
inspector
.
highlighters
.
on
(
"
highlighter
-
shown
"
this
.
onHighlighterShown
)
;
this
.
inspector
.
highlighters
.
on
(
"
highlighter
-
hidden
"
this
.
onHighlighterHidden
)
;
this
.
_onNewSelection
(
this
.
inspector
.
selection
.
nodeFront
)
;
if
(
this
.
inspector
.
selection
.
nodeFront
)
{
this
.
expandNode
(
this
.
inspector
.
selection
.
nodeFront
)
;
}
this
.
_prefObserver
=
new
PrefObserver
(
"
devtools
.
markup
"
)
;
this
.
_prefObserver
.
on
(
ATTR_COLLAPSE_ENABLED_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_prefObserver
.
on
(
ATTR_COLLAPSE_LENGTH_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_initShortcuts
(
)
;
this
.
_walkerEventListener
=
new
WalkerEventListener
(
this
.
inspector
{
"
container
-
type
-
change
"
:
this
.
_onWalkerNodeStatesChanged
"
display
-
change
"
:
this
.
_onWalkerNodeStatesChanged
"
scrollable
-
change
"
:
this
.
_onWalkerNodeStatesChanged
"
overflow
-
change
"
:
this
.
_onWalkerNodeStatesChanged
mutations
:
this
.
_onWalkerMutations
}
)
;
this
.
resourceCommand
=
this
.
inspector
.
toolbox
.
resourceCommand
;
this
.
resourceCommand
.
watchResources
(
[
this
.
resourceCommand
.
TYPES
.
ROOT_NODE
]
{
onAvailable
:
this
.
_onResourceAvailable
}
)
;
this
.
targetCommand
=
this
.
inspector
.
commands
.
targetCommand
;
this
.
targetCommand
.
watchTargets
(
{
types
:
[
this
.
targetCommand
.
TYPES
.
FRAME
]
onAvailable
:
this
.
_onTargetAvailable
onDestroyed
:
this
.
_onTargetDestroyed
}
)
;
}
MarkupView
.
prototype
=
{
CONTAINER_FLASHING_DURATION
:
500
_selectedContainer
:
null
get
contextMenu
(
)
{
if
(
!
this
.
_contextMenu
)
{
this
.
_contextMenu
=
new
MarkupContextMenu
(
this
)
;
}
return
this
.
_contextMenu
;
}
hasEventDetailsTooltip
(
)
{
return
!
!
this
.
_eventDetailsTooltip
;
}
get
eventDetailsTooltip
(
)
{
if
(
!
this
.
_eventDetailsTooltip
)
{
this
.
_eventDetailsTooltip
=
new
HTMLTooltip
(
this
.
toolbox
.
doc
{
type
:
"
arrow
"
consumeOutsideClicks
:
false
}
)
;
}
return
this
.
_eventDetailsTooltip
;
}
get
toolbox
(
)
{
return
this
.
inspector
.
toolbox
;
}
get
undo
(
)
{
if
(
!
this
.
_undo
)
{
this
.
_undo
=
new
UndoStack
(
)
;
this
.
_undo
.
installController
(
this
.
controllerWindow
)
;
}
return
this
.
_undo
;
}
_onDomMutation
(
)
{
const
domMutationBreakpoints
=
this
.
inspector
.
toolbox
.
store
.
getState
(
)
.
domMutationBreakpoints
.
breakpoints
;
const
breakpointIDsInCurrentState
=
[
]
;
for
(
const
breakpoint
of
domMutationBreakpoints
)
{
const
nodeFront
=
breakpoint
.
nodeFront
;
const
mutationType
=
breakpoint
.
mutationType
;
const
enabledStatus
=
breakpoint
.
enabled
;
breakpointIDsInCurrentState
.
push
(
breakpoint
.
id
)
;
if
(
!
this
.
_breakpointIDsInLocalState
.
has
(
breakpoint
.
id
)
)
{
this
.
_breakpointIDsInLocalState
.
set
(
breakpoint
.
id
breakpoint
)
;
if
(
!
this
.
_containersToUpdate
.
has
(
nodeFront
)
)
{
this
.
_containersToUpdate
.
set
(
nodeFront
new
Map
(
)
)
;
}
}
this
.
_containersToUpdate
.
get
(
nodeFront
)
.
set
(
mutationType
enabledStatus
)
;
}
for
(
const
id
of
this
.
_breakpointIDsInLocalState
.
keys
(
)
)
{
if
(
breakpointIDsInCurrentState
.
includes
(
id
)
=
=
=
false
)
{
const
nodeFront
=
this
.
_breakpointIDsInLocalState
.
get
(
id
)
.
nodeFront
;
const
mutationType
=
this
.
_breakpointIDsInLocalState
.
get
(
id
)
.
mutationType
;
this
.
_containersToUpdate
.
get
(
nodeFront
)
.
delete
(
mutationType
)
;
this
.
_breakpointIDsInLocalState
.
delete
(
id
)
;
}
}
for
(
const
nodeFront
of
this
.
_containersToUpdate
.
keys
(
)
)
{
const
mutationBreakpoints
=
this
.
_containersToUpdate
.
get
(
nodeFront
)
;
const
container
=
this
.
getContainer
(
nodeFront
)
;
container
.
update
(
mutationBreakpoints
)
;
if
(
this
.
_containersToUpdate
.
get
(
nodeFront
)
.
size
=
=
=
0
)
{
this
.
_containersToUpdate
.
delete
(
nodeFront
)
;
}
}
}
_handleRejectionIfNotDestroyed
(
e
)
{
if
(
!
this
.
_destroyed
)
{
console
.
error
(
e
)
;
}
}
_initTooltips
(
)
{
if
(
this
.
imagePreviewTooltip
)
{
return
;
}
this
.
imagePreviewTooltip
=
new
HTMLTooltip
(
this
.
toolbox
.
doc
{
type
:
"
arrow
"
useXulWrapper
:
true
}
)
;
this
.
_enableImagePreviewTooltip
(
)
;
}
_enableImagePreviewTooltip
(
)
{
if
(
!
this
.
imagePreviewTooltip
)
{
return
;
}
this
.
imagePreviewTooltip
.
startTogglingOnHover
(
this
.
_elt
this
.
_isImagePreviewTarget
)
;
}
_disableImagePreviewTooltip
(
)
{
if
(
!
this
.
imagePreviewTooltip
)
{
return
;
}
this
.
imagePreviewTooltip
.
stopTogglingOnHover
(
)
;
}
_onToolboxPickerHover
(
nodeFront
)
{
this
.
showNode
(
nodeFront
)
.
then
(
(
)
=
>
{
this
.
_showNodeAsHovered
(
nodeFront
)
;
}
console
.
error
)
;
}
_onToolboxPickerCanceled
(
)
{
if
(
this
.
_selectedContainer
)
{
scrollIntoViewIfNeeded
(
this
.
_selectedContainer
.
editor
.
elt
)
;
}
}
isDragging
:
false
_draggedContainer
:
null
_onMouseMove
(
event
)
{
this
.
_initTooltips
(
)
;
let
target
=
event
.
target
;
if
(
this
.
_draggedContainer
)
{
this
.
_draggedContainer
.
onMouseMove
(
event
)
;
}
if
(
this
.
isDragging
)
{
event
.
preventDefault
(
)
;
this
.
_autoScroll
(
event
)
;
return
;
}
while
(
!
target
.
container
)
{
if
(
target
.
tagName
.
toLowerCase
(
)
=
=
=
"
body
"
)
{
return
;
}
target
=
target
.
parentNode
;
}
const
container
=
target
.
container
;
if
(
this
.
_hoveredContainer
!
=
=
container
)
{
this
.
_showBoxModel
(
container
.
node
)
;
}
this
.
_showContainerAsHovered
(
container
)
;
this
.
emit
(
"
node
-
hover
"
)
;
}
_onBlur
(
event
)
{
if
(
!
this
.
_selectedContainer
)
{
return
;
}
const
{
relatedTarget
}
=
event
;
if
(
relatedTarget
&
&
relatedTarget
.
ownerDocument
=
=
=
this
.
doc
)
{
return
;
}
if
(
this
.
_selectedContainer
)
{
this
.
_selectedContainer
.
clearFocus
(
)
;
}
}
_onContextMenu
(
event
)
{
this
.
contextMenu
.
show
(
event
)
;
}
_autoScroll
(
event
)
{
const
docEl
=
this
.
doc
.
documentElement
;
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
const
fromBottom
=
docEl
.
clientHeight
-
event
.
pageY
+
this
.
win
.
scrollY
;
const
fromTop
=
event
.
pageY
-
this
.
win
.
scrollY
;
const
edgeDistance
=
Math
.
min
(
DRAG_DROP_AUTOSCROLL_EDGE_MAX_DISTANCE
docEl
.
clientHeight
*
DRAG_DROP_AUTOSCROLL_EDGE_RATIO
)
;
const
heightToSpeedRatio
=
Math
.
max
(
DRAG_DROP_HEIGHT_TO_SPEED_MIN
Math
.
min
(
DRAG_DROP_HEIGHT_TO_SPEED_MAX
docEl
.
clientHeight
/
DRAG_DROP_HEIGHT_TO_SPEED
)
)
;
if
(
fromBottom
<
=
edgeDistance
)
{
const
speed
=
map
(
fromBottom
0
edgeDistance
DRAG_DROP_MIN_AUTOSCROLL_SPEED
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
this
.
_runUpdateLoop
(
(
)
=
>
{
docEl
.
scrollTop
-
=
heightToSpeedRatio
*
(
speed
-
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
}
)
;
}
if
(
fromTop
<
=
edgeDistance
)
{
const
speed
=
map
(
fromTop
0
edgeDistance
DRAG_DROP_MIN_AUTOSCROLL_SPEED
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
this
.
_runUpdateLoop
(
(
)
=
>
{
docEl
.
scrollTop
+
=
heightToSpeedRatio
*
(
speed
-
DRAG_DROP_MAX_AUTOSCROLL_SPEED
)
;
}
)
;
}
}
_runUpdateLoop
(
update
)
{
const
loop
=
(
)
=
>
{
update
(
)
;
this
.
_autoScrollAnimationFrame
=
this
.
win
.
requestAnimationFrame
(
loop
)
;
}
;
loop
(
)
;
}
_onMouseClick
(
event
)
{
let
parentNode
=
event
.
target
;
let
container
;
while
(
parentNode
!
=
=
this
.
doc
.
body
)
{
if
(
parentNode
.
container
)
{
container
=
parentNode
.
container
;
break
;
}
parentNode
=
parentNode
.
parentNode
;
}
if
(
typeof
container
.
onContainerClick
=
=
=
"
function
"
)
{
container
.
onContainerClick
(
event
)
;
}
}
_onMouseUp
(
event
)
{
if
(
this
.
_draggedContainer
)
{
this
.
_draggedContainer
.
onMouseUp
(
event
)
;
}
this
.
indicateDropTarget
(
null
)
;
this
.
indicateDragTarget
(
null
)
;
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
}
_onCollapseAttributesPrefChange
(
)
{
this
.
collapseAttributes
=
Services
.
prefs
.
getBoolPref
(
ATTR_COLLAPSE_ENABLED_PREF
)
;
this
.
collapseAttributeLength
=
Services
.
prefs
.
getIntPref
(
ATTR_COLLAPSE_LENGTH_PREF
)
;
this
.
update
(
)
;
}
cancelDragging
(
)
{
if
(
!
this
.
isDragging
)
{
return
;
}
for
(
const
[
container
]
of
this
.
_containers
)
{
if
(
container
.
isDragging
)
{
container
.
cancelDragging
(
)
;
break
;
}
}
this
.
indicateDropTarget
(
null
)
;
this
.
indicateDragTarget
(
null
)
;
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
}
_hoveredContainer
:
null
_showNodeAsHovered
(
nodeFront
)
{
const
container
=
this
.
getContainer
(
nodeFront
)
;
this
.
_showContainerAsHovered
(
container
)
;
}
_showContainerAsHovered
(
container
)
{
if
(
this
.
_hoveredContainer
=
=
=
container
)
{
return
;
}
if
(
this
.
_hoveredContainer
)
{
this
.
_hoveredContainer
.
hovered
=
false
;
}
container
.
hovered
=
true
;
this
.
_hoveredContainer
=
container
;
}
async
_onMouseOut
(
event
)
{
if
(
this
.
_elt
.
contains
(
event
.
relatedTarget
)
)
{
return
;
}
if
(
this
.
_autoScrollAnimationFrame
)
{
this
.
win
.
cancelAnimationFrame
(
this
.
_autoScrollAnimationFrame
)
;
}
if
(
this
.
isDragging
)
{
return
;
}
await
this
.
_hideBoxModel
(
)
;
if
(
this
.
_hoveredContainer
)
{
this
.
_hoveredContainer
.
hovered
=
false
;
}
this
.
_hoveredContainer
=
null
;
this
.
emit
(
"
leave
"
)
;
}
_showBoxModel
(
nodeFront
options
)
{
return
this
.
inspector
.
highlighters
.
showHighlighterTypeForNode
(
this
.
inspector
.
highlighters
.
TYPES
.
BOXMODEL
nodeFront
options
)
;
}
_hideBoxModel
(
)
{
return
this
.
inspector
.
highlighters
.
hideHighlighterType
(
this
.
inspector
.
highlighters
.
TYPES
.
BOXMODEL
)
;
}
handleHighlighterEvent
(
eventName
data
)
{
switch
(
data
.
type
)
{
case
this
.
inspector
.
highlighters
.
TYPES
.
FLEXBOX
:
case
this
.
inspector
.
highlighters
.
TYPES
.
GRID
:
const
{
nodeFront
}
=
data
;
if
(
!
nodeFront
)
{
return
;
}
const
container
=
this
.
getContainer
(
nodeFront
)
;
const
badge
=
container
?
.
editor
?
.
displayBadge
;
if
(
badge
)
{
const
isActive
=
eventName
=
=
"
highlighter
-
shown
"
;
badge
.
classList
.
toggle
(
"
active
"
isActive
)
;
badge
.
setAttribute
(
"
aria
-
pressed
"
isActive
)
;
}
if
(
data
.
type
=
=
=
this
.
inspector
.
highlighters
.
TYPES
.
GRID
)
{
const
selector
=
"
[
data
-
display
*
=
'
grid
'
]
:
not
(
.
active
)
"
;
const
isLimited
=
this
.
inspector
.
highlighters
.
isGridHighlighterLimitReached
(
)
;
Array
.
from
(
this
.
_elt
.
querySelectorAll
(
selector
)
)
.
map
(
el
=
>
{
el
.
classList
.
toggle
(
"
interactive
"
!
isLimited
)
;
}
)
;
}
break
;
}
}
getSelectedContainer
(
)
{
return
this
.
_selectedContainer
;
}
getContainer
(
node
slotted
)
{
const
key
=
this
.
_getContainerKey
(
node
slotted
)
;
return
this
.
_containers
.
get
(
key
)
;
}
setContainer
(
node
container
slotted
)
{
const
key
=
this
.
_getContainerKey
(
node
slotted
)
;
return
this
.
_containers
.
set
(
key
container
)
;
}
hasContainer
(
node
slotted
)
{
const
key
=
this
.
_getContainerKey
(
node
slotted
)
;
return
this
.
_containers
.
has
(
key
)
;
}
_getContainerKey
(
node
slotted
)
{
if
(
!
slotted
)
{
return
node
;
}
if
(
!
this
.
_slottedContainerKeys
.
has
(
node
)
)
{
this
.
_slottedContainerKeys
.
set
(
node
{
node
}
)
;
}
return
this
.
_slottedContainerKeys
.
get
(
node
)
;
}
_isContainerSelected
(
container
)
{
if
(
!
container
)
{
return
false
;
}
const
selection
=
this
.
inspector
.
selection
;
return
(
container
.
node
=
=
selection
.
nodeFront
&
&
container
.
isSlotted
(
)
=
=
selection
.
isSlotted
(
)
)
;
}
update
(
)
{
const
updateChildren
=
node
=
>
{
this
.
getContainer
(
node
)
.
update
(
)
;
for
(
const
child
of
node
.
treeChildren
(
)
)
{
updateChildren
(
child
)
;
}
}
;
let
documentElement
;
for
(
const
node
of
this
.
_rootNode
.
treeChildren
(
)
)
{
if
(
node
.
isDocumentElement
=
=
=
true
)
{
documentElement
=
node
;
break
;
}
}
updateChildren
(
documentElement
)
;
}
async
_isImagePreviewTarget
(
target
)
{
if
(
this
.
isDragging
)
{
return
false
;
}
let
parent
=
target
container
;
while
(
parent
)
{
if
(
parent
.
container
)
{
container
=
parent
.
container
;
break
;
}
parent
=
parent
.
parentNode
;
}
if
(
container
instanceof
MarkupElementContainer
)
{
return
container
.
isImagePreviewTarget
(
target
this
.
imagePreviewTooltip
)
;
}
return
false
;
}
_shouldNewSelectionBeHighlighted
(
)
{
const
reason
=
this
.
inspector
.
selection
.
reason
;
const
unwantedReasons
=
[
"
inspector
-
default
-
selection
"
"
nodeselected
"
"
picker
-
node
-
picked
"
"
picker
-
node
-
previewed
"
"
test
"
]
;
const
isHighlight
=
this
.
_isContainerSelected
(
this
.
_hoveredContainer
)
;
return
!
isHighlight
&
&
reason
&
&
!
unwantedReasons
.
includes
(
reason
)
;
}
_onNewSelection
(
nodeFront
reason
)
{
const
selection
=
this
.
inspector
.
selection
;
if
(
nodeFront
)
{
nodeFront
.
walkerFront
.
on
(
"
container
-
type
-
change
"
this
.
_onWalkerNodeStatesChanged
)
;
nodeFront
.
walkerFront
.
on
(
"
display
-
change
"
this
.
_onWalkerNodeStatesChanged
)
;
nodeFront
.
walkerFront
.
on
(
"
scrollable
-
change
"
this
.
_onWalkerNodeStatesChanged
)
;
nodeFront
.
walkerFront
.
on
(
"
overflow
-
change
"
this
.
_onWalkerNodeStatesChanged
)
;
nodeFront
.
walkerFront
.
on
(
"
mutations
"
this
.
_onWalkerMutations
)
;
}
if
(
this
.
htmlEditor
)
{
this
.
htmlEditor
.
hide
(
)
;
}
if
(
this
.
_isContainerSelected
(
this
.
_hoveredContainer
)
)
{
this
.
_hoveredContainer
.
hovered
=
false
;
this
.
_hoveredContainer
=
null
;
}
if
(
!
selection
.
isNode
(
)
)
{
this
.
unmarkSelectedNode
(
)
;
return
;
}
const
done
=
this
.
inspector
.
updating
(
"
markup
-
view
"
)
;
let
onShowBoxModel
;
if
(
this
.
_shouldNewSelectionBeHighlighted
(
)
)
{
onShowBoxModel
=
this
.
_showBoxModel
(
nodeFront
{
duration
:
this
.
inspector
.
HIGHLIGHTER_AUTOHIDE_TIMER
}
)
;
}
const
slotted
=
selection
.
isSlotted
(
)
;
const
smoothScroll
=
reason
=
=
=
"
reveal
-
from
-
slot
"
;
const
selectionSearchQuery
=
selection
.
getSearchQuery
(
)
;
const
onShow
=
this
.
showNode
(
selection
.
nodeFront
{
slotted
smoothScroll
scroll
:
!
selectionSearchQuery
}
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyed
)
{
return
Promise
.
reject
(
"
markupview
destroyed
"
)
;
}
const
container
=
this
.
getContainer
(
selection
.
nodeFront
slotted
)
;
this
.
_markContainerAsSelected
(
container
)
;
this
.
_updateSearchResultsHighlightingInSelectedNode
(
selectionSearchQuery
)
;
this
.
maybeNavigateToNewSelection
(
)
;
return
undefined
;
}
)
.
catch
(
this
.
_handleRejectionIfNotDestroyed
)
;
Promise
.
all
(
[
onShowBoxModel
onShow
]
)
.
then
(
done
)
;
}
_getSearchResultsHighlight
(
)
{
const
highlightName
=
"
devtools
-
search
"
;
const
highlights
=
this
.
win
.
CSS
.
highlights
;
if
(
!
highlights
.
has
(
highlightName
)
)
{
highlights
.
set
(
highlightName
new
this
.
win
.
Highlight
(
)
)
;
}
return
highlights
.
get
(
highlightName
)
;
}
_getSelectionController
(
)
{
if
(
!
this
.
_selectionController
)
{
this
.
_selectionController
=
this
.
win
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsISelectionDisplay
)
.
QueryInterface
(
Ci
.
nsISelectionController
)
;
}
return
this
.
_selectionController
;
}
_updateSearchResultsHighlightingInSelectedNode
(
searchQuery
)
{
const
searchHighlight
=
this
.
_getSearchResultsHighlight
(
)
;
searchHighlight
.
clear
(
)
;
if
(
!
this
.
_selectedContainer
|
|
!
searchQuery
)
{
return
;
}
const
treeWalker
=
this
.
doc
.
createTreeWalker
(
this
.
_selectedContainer
.
tagLine
NodeFilter
.
SHOW_TEXT
)
;
searchQuery
=
searchQuery
.
toLowerCase
(
)
;
const
searchQueryLength
=
searchQuery
.
length
;
let
currentNode
=
treeWalker
.
nextNode
(
)
;
let
scrolled
=
false
;
while
(
currentNode
)
{
const
text
=
currentNode
.
textContent
.
toLowerCase
(
)
;
let
startPos
=
0
;
while
(
startPos
<
text
.
length
)
{
const
index
=
text
.
indexOf
(
searchQuery
startPos
)
;
if
(
index
=
=
=
-
1
)
{
break
;
}
const
range
=
new
this
.
win
.
Range
(
)
;
range
.
setStart
(
currentNode
index
)
;
range
.
setEnd
(
currentNode
index
+
searchQueryLength
)
;
searchHighlight
.
add
(
range
)
;
startPos
=
index
+
searchQuery
.
length
;
if
(
!
scrolled
)
{
const
selection
=
this
.
win
.
getSelection
(
)
;
selection
.
removeAllRanges
(
)
;
selection
.
addRange
(
range
)
;
const
selectionController
=
this
.
_getSelectionController
(
)
;
selectionController
.
scrollSelectionIntoView
(
selectionController
.
SELECTION_NORMAL
selectionController
.
SELECTION_ON
selectionController
.
SCROLL_SYNCHRONOUS
|
selectionController
.
SCROLL_VERTICAL_CENTER
)
;
selection
.
removeAllRanges
(
)
;
scrolled
=
true
;
}
}
currentNode
=
treeWalker
.
nextNode
(
)
;
}
if
(
!
scrolled
)
{
const
container
=
this
.
getContainer
(
this
.
inspector
.
selection
.
nodeFront
this
.
inspector
.
selection
.
isSlotted
(
)
)
;
scrollIntoViewIfNeeded
(
container
.
editor
.
elt
true
false
)
;
}
}
async
maybeNavigateToNewSelection
(
)
{
const
{
reason
nodeFront
}
=
this
.
inspector
.
selection
;
const
reasonsToNavigate
=
[
"
picker
-
node
-
picked
"
"
picker
-
node
-
previewed
"
"
browser
-
context
-
menu
"
"
node
-
inserted
"
]
;
if
(
reason
&
&
reason
.
endsWith
(
"
-
keyboard
"
)
)
{
this
.
getContainer
(
this
.
_rootNode
)
.
elt
.
focus
(
)
;
}
if
(
reasonsToNavigate
.
includes
(
reason
)
)
{
const
root
=
await
nodeFront
.
walkerFront
.
getRootNode
(
)
;
this
.
getContainer
(
root
)
.
elt
.
focus
(
)
;
this
.
navigate
(
this
.
getContainer
(
nodeFront
)
)
;
}
}
_selectionWalker
(
start
)
{
const
walker
=
this
.
doc
.
createTreeWalker
(
start
|
|
this
.
_elt
nodeFilterConstants
.
SHOW_ELEMENT
function
(
element
)
{
if
(
element
.
container
&
&
element
.
container
.
elt
=
=
=
element
&
&
element
.
container
.
visible
)
{
return
nodeFilterConstants
.
FILTER_ACCEPT
;
}
return
nodeFilterConstants
.
FILTER_SKIP
;
}
)
;
walker
.
currentNode
=
this
.
_selectedContainer
.
elt
;
return
walker
;
}
_onCopy
(
evt
)
{
if
(
this
.
_isInputOrTextarea
(
evt
.
target
)
)
{
return
;
}
const
selection
=
this
.
inspector
.
selection
;
if
(
selection
.
isNode
(
)
)
{
this
.
copyOuterHTML
(
)
;
}
evt
.
stopPropagation
(
)
;
evt
.
preventDefault
(
)
;
}
copyOuterHTML
(
)
{
if
(
!
this
.
inspector
.
selection
.
isNode
(
)
)
{
return
;
}
const
node
=
this
.
inspector
.
selection
.
nodeFront
;
switch
(
node
.
nodeType
)
{
case
nodeConstants
.
ELEMENT_NODE
:
copyLongHTMLString
(
node
.
walkerFront
.
outerHTML
(
node
)
)
;
break
;
case
nodeConstants
.
COMMENT_NODE
:
getLongString
(
node
.
getNodeValue
(
)
)
.
then
(
comment
=
>
{
clipboardHelper
.
copyString
(
"
<
!
-
-
"
+
comment
+
"
-
-
>
"
)
;
}
)
;
break
;
case
nodeConstants
.
DOCUMENT_TYPE_NODE
:
clipboardHelper
.
copyString
(
node
.
doctypeString
)
;
break
;
}
}
copyInnerHTML
(
)
{
const
nodeFront
=
this
.
inspector
.
selection
.
nodeFront
;
if
(
!
this
.
inspector
.
selection
.
isNode
(
)
)
{
return
;
}
copyLongHTMLString
(
nodeFront
.
walkerFront
.
innerHTML
(
nodeFront
)
)
;
}
followAttributeLink
(
type
link
)
{
if
(
!
type
|
|
!
link
)
{
return
;
}
const
nodeFront
=
this
.
inspector
.
selection
.
nodeFront
;
if
(
type
=
=
=
"
uri
"
|
|
type
=
=
=
"
cssresource
"
|
|
type
=
=
=
"
jsresource
"
)
{
nodeFront
.
inspectorFront
.
resolveRelativeURL
(
link
this
.
inspector
.
selection
.
nodeFront
)
.
then
(
url
=
>
{
if
(
type
=
=
=
"
uri
"
)
{
openContentLink
(
url
)
;
}
else
if
(
type
=
=
=
"
cssresource
"
)
{
return
this
.
toolbox
.
viewGeneratedSourceInStyleEditor
(
url
)
;
}
else
if
(
type
=
=
=
"
jsresource
"
)
{
return
this
.
toolbox
.
viewGeneratedSourceInDebugger
(
url
)
;
}
return
null
;
}
)
.
catch
(
console
.
error
)
;
}
else
if
(
type
=
=
"
idref
"
)
{
nodeFront
.
walkerFront
.
getIdrefNode
(
nodeFront
CSS
.
escape
(
link
)
)
.
then
(
node
=
>
{
if
(
!
node
)
{
this
.
emitForTests
(
"
idref
-
attribute
-
link
-
failed
"
)
;
return
;
}
this
.
inspector
.
selection
.
setNodeFront
(
node
{
reason
:
"
markup
-
attribute
-
link
"
}
)
;
}
)
.
catch
(
console
.
error
)
;
}
}
_initShortcuts
(
)
{
const
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
win
}
)
;
this
.
_shortcuts
=
shortcuts
;
this
.
_onShortcut
=
this
.
_onShortcut
.
bind
(
this
)
;
[
"
markupView
.
hide
.
key
"
"
markupView
.
edit
.
key
"
"
markupView
.
scrollInto
.
key
"
]
.
forEach
(
name
=
>
{
const
key
=
INSPECTOR_L10N
.
getStr
(
name
)
;
shortcuts
.
on
(
key
event
=
>
this
.
_onShortcut
(
name
event
)
)
;
}
)
;
[
"
Delete
"
"
Backspace
"
"
Home
"
"
Left
"
"
Right
"
"
Up
"
"
Down
"
"
PageUp
"
"
PageDown
"
"
Esc
"
"
Enter
"
"
Space
"
]
.
forEach
(
key
=
>
{
shortcuts
.
on
(
key
event
=
>
this
.
_onShortcut
(
key
event
)
)
;
}
)
;
}
_onShortcut
(
name
event
)
{
if
(
this
.
_isInputOrTextarea
(
event
.
target
)
)
{
return
;
}
if
(
event
.
target
.
closest
(
"
:
is
(
button
[
role
=
button
]
)
"
)
&
&
(
name
=
=
=
"
Enter
"
|
|
name
=
=
=
"
Space
"
)
)
{
return
;
}
const
handler
=
shortcutHandlers
[
name
]
;
const
shouldPropagate
=
handler
(
this
)
;
if
(
shouldPropagate
)
{
return
;
}
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
}
_isInputOrTextarea
(
element
)
{
const
name
=
element
.
tagName
.
toLowerCase
(
)
;
return
name
=
=
=
"
input
"
|
|
name
=
=
=
"
textarea
"
;
}
deleteNodeOrAttribute
(
moveBackward
)
{
const
focusedAttribute
=
this
.
doc
.
activeElement
?
this
.
doc
.
activeElement
.
closest
(
"
.
attreditor
"
)
:
null
;
if
(
focusedAttribute
)
{
const
container
=
focusedAttribute
.
closest
(
"
li
.
child
"
)
.
container
;
container
.
removeAttribute
(
focusedAttribute
.
dataset
.
attr
)
;
}
else
{
this
.
deleteNode
(
this
.
_selectedContainer
.
node
moveBackward
)
;
}
}
isDeletable
(
nodeFront
)
{
return
!
(
nodeFront
.
isDocumentElement
|
|
nodeFront
.
nodeType
=
=
nodeConstants
.
DOCUMENT_NODE
|
|
nodeFront
.
nodeType
=
=
nodeConstants
.
DOCUMENT_TYPE_NODE
|
|
nodeFront
.
nodeType
=
=
nodeConstants
.
DOCUMENT_FRAGMENT_NODE
|
|
nodeFront
.
isAnonymous
)
;
}
deleteNode
(
node
moveBackward
)
{
if
(
!
this
.
isDeletable
(
node
)
)
{
return
;
}
const
container
=
this
.
getContainer
(
node
)
;
node
.
walkerFront
.
retainNode
(
node
)
.
then
(
(
)
=
>
{
const
parent
=
node
.
parentNode
(
)
;
let
nextSibling
=
null
;
this
.
undo
.
do
(
(
)
=
>
{
node
.
walkerFront
.
removeNode
(
node
)
.
then
(
siblings
=
>
{
nextSibling
=
siblings
.
nextSibling
;
const
prevSibling
=
siblings
.
previousSibling
;
let
focusNode
=
moveBackward
?
prevSibling
:
nextSibling
;
if
(
!
focusNode
)
{
focusNode
=
nextSibling
|
|
prevSibling
|
|
parent
;
}
const
isNextSiblingText
=
nextSibling
?
nextSibling
.
nodeType
=
=
=
nodeConstants
.
TEXT_NODE
:
false
;
const
isPrevSiblingText
=
prevSibling
?
prevSibling
.
nodeType
=
=
=
nodeConstants
.
TEXT_NODE
:
false
;
if
(
parent
.
numChildren
=
=
=
2
&
&
(
isNextSiblingText
|
|
isPrevSiblingText
)
)
{
focusNode
=
parent
;
}
if
(
container
.
selected
)
{
this
.
navigate
(
this
.
getContainer
(
focusNode
)
)
;
}
}
)
;
}
(
)
=
>
{
const
isValidSibling
=
nextSibling
&
&
!
nextSibling
.
isPseudoElement
;
nextSibling
=
isValidSibling
?
nextSibling
:
null
;
node
.
walkerFront
.
insertBefore
(
node
parent
nextSibling
)
;
}
)
;
}
)
.
catch
(
console
.
error
)
;
}
scrollNodeIntoView
(
)
{
if
(
!
this
.
inspector
.
selection
.
supportsScrollIntoView
(
)
)
{
return
;
}
this
.
inspector
.
selection
.
nodeFront
.
scrollIntoView
(
)
.
then
(
(
)
=
>
this
.
emitForTests
(
"
node
-
scrolled
-
into
-
view
"
)
)
;
}
async
toggleMutationBreakpoint
(
name
)
{
if
(
!
this
.
inspector
.
selection
.
isElementNode
(
)
)
{
return
;
}
const
toolboxStore
=
this
.
inspector
.
toolbox
.
store
;
const
nodeFront
=
this
.
inspector
.
selection
.
nodeFront
;
if
(
nodeFront
.
mutationBreakpoints
[
name
]
)
{
toolboxStore
.
dispatch
(
deleteDOMMutationBreakpoint
(
nodeFront
name
)
)
;
}
else
{
toolboxStore
.
dispatch
(
createDOMMutationBreakpoint
(
nodeFront
name
)
)
;
}
}
_onFocus
(
event
)
{
let
parent
=
event
.
target
;
while
(
!
parent
.
container
)
{
parent
=
parent
.
parentNode
;
}
if
(
parent
)
{
this
.
navigate
(
parent
.
container
)
;
}
}
navigate
(
container
)
{
if
(
!
container
)
{
return
;
}
this
.
_markContainerAsSelected
(
container
"
treepanel
"
)
;
}
importNode
(
node
flashNode
slotted
)
{
if
(
!
node
)
{
return
null
;
}
if
(
this
.
hasContainer
(
node
slotted
)
)
{
return
this
.
getContainer
(
node
slotted
)
;
}
let
container
;
const
{
nodeType
isPseudoElement
}
=
node
;
if
(
node
=
=
=
node
.
walkerFront
.
rootNode
)
{
container
=
new
RootContainer
(
this
node
)
;
this
.
_elt
.
appendChild
(
container
.
elt
)
;
}
if
(
node
=
=
=
this
.
walker
.
rootNode
)
{
this
.
_rootNode
=
node
;
}
else
if
(
slotted
)
{
container
=
new
SlottedNodeContainer
(
this
node
this
.
inspector
)
;
}
else
if
(
nodeType
=
=
nodeConstants
.
ELEMENT_NODE
&
&
!
isPseudoElement
)
{
container
=
new
MarkupElementContainer
(
this
node
this
.
inspector
)
;
}
else
if
(
nodeType
=
=
nodeConstants
.
COMMENT_NODE
|
|
nodeType
=
=
nodeConstants
.
TEXT_NODE
)
{
container
=
new
MarkupTextContainer
(
this
node
this
.
inspector
)
;
}
else
{
container
=
new
MarkupReadOnlyContainer
(
this
node
this
.
inspector
)
;
}
if
(
flashNode
)
{
container
.
flashMutation
(
)
;
}
this
.
setContainer
(
node
container
slotted
)
;
this
.
_forceUpdateChildren
(
container
)
;
this
.
inspector
.
emit
(
"
container
-
created
"
container
)
;
return
container
;
}
async
_onResourceAvailable
(
resources
)
{
for
(
const
resource
of
resources
)
{
if
(
!
this
.
resourceCommand
|
|
resource
.
resourceType
!
=
=
this
.
resourceCommand
.
TYPES
.
ROOT_NODE
|
|
resource
.
isDestroyed
(
)
)
{
continue
;
}
if
(
resource
.
targetFront
.
isTopLevel
&
&
resource
.
isTopLevelDocument
)
{
continue
;
}
const
parentNodeFront
=
resource
.
parentNode
(
)
;
const
container
=
this
.
getContainer
(
parentNodeFront
)
;
if
(
container
)
{
this
.
_forceUpdateChildren
(
container
{
flash
:
true
updateLevel
:
true
}
)
;
}
}
}
_onTargetAvailable
(
)
{
}
_onTargetDestroyed
(
{
targetFront
isModeSwitching
}
)
{
if
(
isModeSwitching
)
{
const
container
=
this
.
getContainer
(
targetFront
.
getParentNodeFront
(
)
)
;
if
(
container
)
{
this
.
_forceUpdateChildren
(
container
{
updateLevel
:
true
}
)
;
}
}
}
_onWalkerMutations
(
mutations
)
{
for
(
const
mutation
of
mutations
)
{
const
type
=
mutation
.
type
;
const
target
=
mutation
.
target
;
const
container
=
this
.
getContainer
(
target
)
;
if
(
!
container
)
{
continue
;
}
if
(
type
=
=
=
"
attributes
"
|
|
type
=
=
=
"
characterData
"
|
|
type
=
=
=
"
customElementDefined
"
|
|
type
=
=
=
"
events
"
|
|
type
=
=
=
"
pseudoClassLock
"
)
{
container
.
update
(
)
;
}
else
if
(
type
=
=
=
"
childList
"
|
|
type
=
=
=
"
slotchange
"
|
|
type
=
=
=
"
shadowRootAttached
"
)
{
this
.
_forceUpdateChildren
(
container
{
flash
:
true
updateLevel
:
true
}
)
;
}
else
if
(
type
=
=
=
"
inlineTextChild
"
)
{
this
.
_forceUpdateChildren
(
container
{
flash
:
true
}
)
;
container
.
update
(
)
;
}
}
this
.
_waitForChildren
(
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_flashMutatedNodes
(
mutations
)
;
this
.
inspector
.
emit
(
"
markupmutation
"
mutations
)
;
if
(
this
.
htmlEditor
)
{
this
.
htmlEditor
.
refresh
(
)
;
}
}
)
;
}
_onWalkerNodeStatesChanged
(
nodes
)
{
for
(
const
node
of
nodes
)
{
const
container
=
this
.
getContainer
(
node
)
;
if
(
container
)
{
container
.
update
(
)
;
}
}
}
_flashMutatedNodes
(
mutations
)
{
const
addedOrEditedContainers
=
new
Set
(
)
;
const
removedContainers
=
new
Set
(
)
;
for
(
const
{
type
target
added
removed
newValue
}
of
mutations
)
{
const
container
=
this
.
getContainer
(
target
)
;
if
(
container
)
{
if
(
type
=
=
=
"
characterData
"
)
{
addedOrEditedContainers
.
add
(
container
)
;
}
else
if
(
type
=
=
=
"
attributes
"
&
&
newValue
=
=
=
null
)
{
addedOrEditedContainers
.
add
(
container
)
;
}
else
if
(
type
=
=
=
"
childList
"
)
{
if
(
removed
.
length
)
{
removedContainers
.
add
(
container
)
;
}
added
.
forEach
(
node
=
>
{
const
addedContainer
=
this
.
getContainer
(
node
)
;
if
(
addedContainer
)
{
addedOrEditedContainers
.
add
(
addedContainer
)
;
removedContainers
.
delete
(
container
)
;
}
}
)
;
}
}
}
for
(
const
container
of
removedContainers
)
{
container
.
flashMutation
(
)
;
}
for
(
const
container
of
addedOrEditedContainers
)
{
container
.
flashMutation
(
)
;
}
}
showNode
(
nodeFront
{
centered
=
true
scroll
=
true
slotted
smoothScroll
=
false
}
=
{
}
)
{
if
(
slotted
&
&
!
this
.
hasContainer
(
nodeFront
slotted
)
)
{
throw
new
Error
(
"
Tried
to
show
a
slotted
node
not
previously
imported
"
)
;
}
else
{
this
.
_ensureNodeImported
(
nodeFront
)
;
}
return
this
.
_waitForChildren
(
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyed
)
{
return
Promise
.
reject
(
"
markupview
destroyed
"
)
;
}
return
this
.
_ensureVisible
(
nodeFront
)
;
}
)
.
then
(
(
)
=
>
{
if
(
!
scroll
)
{
return
;
}
const
container
=
this
.
getContainer
(
nodeFront
slotted
)
;
scrollIntoViewIfNeeded
(
container
.
editor
.
elt
centered
smoothScroll
)
;
}
this
.
_handleRejectionIfNotDestroyed
)
;
}
_ensureNodeImported
(
node
)
{
let
parent
=
node
;
this
.
importNode
(
node
)
;
while
(
(
parent
=
this
.
_getParentInTree
(
parent
)
)
)
{
this
.
importNode
(
parent
)
;
this
.
expandNode
(
parent
)
;
}
}
_expandContainer
(
container
)
{
return
this
.
_updateChildren
(
container
{
expand
:
true
}
)
.
then
(
(
)
=
>
{
if
(
this
.
_destroyed
)
{
return
;
}
container
.
setExpanded
(
true
)
;
}
)
;
}
expandNode
(
node
)
{
const
container
=
this
.
getContainer
(
node
)
;
return
this
.
_expandContainer
(
container
)
;
}
_expandAll
(
container
)
{
return
this
.
_expandContainer
(
container
)
.
then
(
(
)
=
>
{
let
child
=
container
.
children
.
firstChild
;
const
promises
=
[
]
;
while
(
child
)
{
promises
.
push
(
this
.
_expandAll
(
child
.
container
)
)
;
child
=
child
.
nextSibling
;
}
return
Promise
.
all
(
promises
)
;
}
)
.
catch
(
console
.
error
)
;
}
expandAll
(
node
)
{
node
=
node
|
|
this
.
_rootNode
;
return
this
.
_expandAll
(
this
.
getContainer
(
node
)
)
;
}
collapseNode
(
node
)
{
const
container
=
this
.
getContainer
(
node
)
;
container
.
setExpanded
(
false
)
;
}
_collapseAll
(
container
)
{
container
.
setExpanded
(
false
)
;
const
children
=
container
.
getChildContainers
(
)
|
|
[
]
;
children
.
forEach
(
child
=
>
this
.
_collapseAll
(
child
)
)
;
}
collapseAll
(
node
)
{
this
.
_collapseAll
(
this
.
getContainer
(
node
)
)
;
return
Promise
.
resolve
(
)
;
}
_getNodeHTML
(
node
isOuter
)
{
let
walkerPromise
=
null
;
if
(
isOuter
)
{
walkerPromise
=
node
.
walkerFront
.
outerHTML
(
node
)
;
}
else
{
walkerPromise
=
node
.
walkerFront
.
innerHTML
(
node
)
;
}
return
getLongString
(
walkerPromise
)
;
}
getNodeOuterHTML
(
node
)
{
return
this
.
_getNodeHTML
(
node
true
)
;
}
getNodeInnerHTML
(
node
)
{
return
this
.
_getNodeHTML
(
node
)
;
}
reselectOnRemoved
(
removedNode
reason
)
{
this
.
cancelReselectOnRemoved
(
)
;
const
isRootElement
=
[
"
html
"
"
svg
"
]
.
includes
(
removedNode
.
tagName
.
toLowerCase
(
)
)
;
const
oldContainer
=
this
.
getContainer
(
removedNode
)
;
const
parentContainer
=
this
.
getContainer
(
removedNode
.
parentNode
(
)
)
;
const
childIndex
=
parentContainer
.
getChildContainers
(
)
.
indexOf
(
oldContainer
)
;
const
onMutations
=
(
this
.
_removedNodeObserver
=
mutations
=
>
{
let
isNodeRemovalMutation
=
false
;
for
(
const
mutation
of
mutations
)
{
const
containsRemovedNode
=
mutation
.
removed
&
&
mutation
.
removed
.
some
(
n
=
>
n
=
=
=
removedNode
)
;
if
(
mutation
.
type
=
=
=
"
childList
"
&
&
(
containsRemovedNode
|
|
isRootElement
)
)
{
isNodeRemovalMutation
=
true
;
break
;
}
}
if
(
!
isNodeRemovalMutation
)
{
return
;
}
this
.
inspector
.
off
(
"
markupmutation
"
onMutations
)
;
this
.
_removedNodeObserver
=
null
;
if
(
this
.
inspector
.
selection
.
nodeFront
=
=
=
parentContainer
.
node
|
|
(
this
.
inspector
.
selection
.
nodeFront
=
=
=
removedNode
&
&
isRootElement
)
)
{
const
childContainers
=
parentContainer
.
getChildContainers
(
)
;
if
(
childContainers
?
.
[
childIndex
]
)
{
const
childContainer
=
childContainers
[
childIndex
]
;
this
.
_markContainerAsSelected
(
childContainer
reason
)
;
if
(
childContainer
.
hasChildren
)
{
this
.
expandNode
(
childContainer
.
node
)
;
}
this
.
emit
(
"
reselectedonremoved
"
)
;
}
}
}
)
;
this
.
inspector
.
on
(
"
markupmutation
"
onMutations
)
;
}
cancelReselectOnRemoved
(
)
{
if
(
this
.
_removedNodeObserver
)
{
this
.
inspector
.
off
(
"
markupmutation
"
this
.
_removedNodeObserver
)
;
this
.
_removedNodeObserver
=
null
;
this
.
emit
(
"
canceledreselectonremoved
"
)
;
}
}
updateNodeOuterHTML
(
node
newValue
)
{
const
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
Promise
.
reject
(
)
;
}
this
.
reselectOnRemoved
(
node
"
outerhtml
"
)
;
return
node
.
walkerFront
.
setOuterHTML
(
node
newValue
)
.
catch
(
(
)
=
>
{
this
.
cancelReselectOnRemoved
(
)
;
}
)
;
}
updateNodeInnerHTML
(
node
newValue
oldValue
)
{
const
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
Promise
.
reject
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
container
.
undo
.
do
(
(
)
=
>
{
node
.
walkerFront
.
setInnerHTML
(
node
newValue
)
.
then
(
resolve
reject
)
;
}
(
)
=
>
{
node
.
walkerFront
.
setInnerHTML
(
node
oldValue
)
;
}
)
;
}
)
;
}
insertAdjacentHTMLToNode
(
node
position
value
)
{
const
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
Promise
.
reject
(
)
;
}
let
injectedNodes
=
[
]
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
container
.
undo
.
do
(
(
)
=
>
{
node
.
walkerFront
.
insertAdjacentHTML
(
node
position
value
)
.
then
(
nodeArray
=
>
{
injectedNodes
=
nodeArray
.
nodes
;
return
nodeArray
;
}
)
.
then
(
resolve
reject
)
;
}
(
)
=
>
{
node
.
walkerFront
.
removeNodes
(
injectedNodes
)
;
}
)
;
}
)
;
}
beginEditingHTML
(
node
)
{
const
isOuter
=
node
.
nodeType
=
=
nodeConstants
.
ELEMENT_NODE
;
const
html
=
isOuter
?
this
.
getNodeOuterHTML
(
node
)
:
this
.
getNodeInnerHTML
(
node
)
;
html
.
then
(
oldValue
=
>
{
const
container
=
this
.
getContainer
(
node
)
;
if
(
!
container
)
{
return
;
}
if
(
!
this
.
htmlEditor
)
{
const
HTMLEditor
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
markup
/
views
/
html
-
editor
.
js
"
)
;
this
.
htmlEditor
=
new
HTMLEditor
(
this
.
doc
)
;
}
this
.
htmlEditor
.
show
(
container
.
tagLine
oldValue
)
;
const
start
=
this
.
telemetry
.
msSystemNow
(
)
;
this
.
htmlEditor
.
once
(
"
popuphidden
"
(
commit
value
)
=
>
{
this
.
doc
.
documentElement
.
focus
(
)
;
if
(
commit
)
{
if
(
isOuter
)
{
this
.
updateNodeOuterHTML
(
node
value
oldValue
)
;
}
else
{
this
.
updateNodeInnerHTML
(
node
value
oldValue
)
;
}
}
const
end
=
this
.
telemetry
.
msSystemNow
(
)
;
this
.
telemetry
.
recordEvent
(
"
edit_html
"
"
inspector
"
null
{
made_changes
:
commit
time_open
:
end
-
start
}
)
;
}
)
;
this
.
emit
(
"
begin
-
editing
"
)
;
}
)
;
}
setNodeExpanded
(
node
expanded
applyToDescendants
)
{
if
(
expanded
)
{
if
(
applyToDescendants
)
{
this
.
expandAll
(
node
)
;
}
else
{
this
.
expandNode
(
node
)
;
}
}
else
if
(
applyToDescendants
)
{
this
.
collapseAll
(
node
)
;
}
else
{
this
.
collapseNode
(
node
)
;
}
}
markNodeAsSelected
(
node
)
{
const
container
=
this
.
getContainer
(
node
)
;
return
this
.
_markContainerAsSelected
(
container
)
;
}
_markContainerAsSelected
(
container
reason
)
{
if
(
!
container
|
|
this
.
_selectedContainer
=
=
=
container
)
{
return
false
;
}
const
{
node
}
=
container
;
if
(
this
.
_selectedContainer
)
{
this
.
_selectedContainer
.
selected
=
false
;
this
.
_selectedContainer
.
clearFocus
(
)
;
}
this
.
_selectedContainer
=
container
;
if
(
node
)
{
this
.
_selectedContainer
.
selected
=
true
;
}
if
(
!
this
.
_isContainerSelected
(
this
.
_selectedContainer
)
)
{
const
isSlotted
=
container
.
isSlotted
(
)
;
this
.
inspector
.
selection
.
setNodeFront
(
node
{
reason
isSlotted
}
)
;
}
return
true
;
}
_ensureVisible
(
node
)
{
while
(
node
)
{
const
container
=
this
.
getContainer
(
node
)
;
const
parent
=
this
.
_getParentInTree
(
node
)
;
if
(
!
container
.
elt
.
parentNode
)
{
const
parentContainer
=
this
.
getContainer
(
parent
)
;
if
(
parentContainer
)
{
this
.
_forceUpdateChildren
(
parentContainer
{
expand
:
true
}
)
;
}
}
node
=
parent
;
}
return
this
.
_waitForChildren
(
)
;
}
unmarkSelectedNode
(
)
{
if
(
this
.
_selectedContainer
)
{
this
.
_selectedContainer
.
selected
=
false
;
this
.
_selectedContainer
=
null
;
}
}
_checkSelectionVisible
(
container
)
{
let
centered
=
null
;
let
node
=
this
.
inspector
.
selection
.
nodeFront
;
while
(
node
)
{
if
(
this
.
_getParentInTree
(
node
)
=
=
=
container
.
node
)
{
centered
=
node
;
break
;
}
node
=
this
.
_getParentInTree
(
node
)
;
}
return
centered
;
}
async
_forceUpdateChildren
(
container
options
=
{
}
)
{
const
{
flash
updateLevel
expand
}
=
options
;
container
.
childrenDirty
=
true
;
await
this
.
_updateChildren
(
container
{
expand
flash
}
)
;
if
(
this
.
_destroyed
)
{
return
;
}
if
(
updateLevel
)
{
container
.
updateLevel
(
)
;
}
}
_updateChildren
(
container
options
)
{
if
(
container
.
isSlotted
(
)
)
{
return
Promise
.
resolve
(
container
)
;
}
const
expand
=
options
?
.
expand
;
const
flash
=
options
?
.
flash
;
container
.
hasChildren
=
container
.
node
.
hasChildren
;
container
.
setChildrenRole
(
)
;
if
(
!
this
.
_queuedChildUpdates
)
{
this
.
_queuedChildUpdates
=
new
Map
(
)
;
}
if
(
this
.
_queuedChildUpdates
.
has
(
container
)
)
{
return
this
.
_queuedChildUpdates
.
get
(
container
)
;
}
if
(
!
container
.
childrenDirty
)
{
return
Promise
.
resolve
(
container
)
;
}
if
(
typeof
container
?
.
editor
?
.
hasUnavailableChildren
=
=
"
function
"
&
&
container
.
editor
.
hasUnavailableChildren
(
)
!
=
container
.
node
.
childrenUnavailable
)
{
container
.
update
(
)
;
}
if
(
container
.
inlineTextChild
&
&
container
.
inlineTextChild
!
=
container
.
node
.
inlineTextChild
)
{
this
.
_containers
.
delete
(
container
.
inlineTextChild
)
;
container
.
clearInlineTextChild
(
)
;
if
(
container
.
hasChildren
&
&
container
.
selected
)
{
container
.
setExpanded
(
true
)
;
}
}
if
(
container
.
node
.
inlineTextChild
)
{
container
.
setExpanded
(
false
)
;
while
(
container
.
children
.
firstChild
)
{
container
.
children
.
firstChild
.
remove
(
)
;
}
container
.
setInlineTextChild
(
container
.
node
.
inlineTextChild
)
;
this
.
setContainer
(
container
.
node
.
inlineTextChild
container
)
;
container
.
childrenDirty
=
false
;
return
Promise
.
resolve
(
container
)
;
}
if
(
!
container
.
hasChildren
)
{
while
(
container
.
children
.
firstChild
)
{
container
.
children
.
firstChild
.
remove
(
)
;
}
container
.
childrenDirty
=
false
;
container
.
setExpanded
(
false
)
;
return
Promise
.
resolve
(
container
)
;
}
if
(
!
(
container
.
expanded
|
|
expand
)
)
{
return
Promise
.
resolve
(
container
)
;
}
const
centered
=
this
.
_checkSelectionVisible
(
container
)
;
container
.
childrenDirty
=
false
;
const
isShadowHost
=
container
.
node
.
isShadowHost
;
const
updatePromise
=
this
.
_getVisibleChildren
(
container
centered
)
.
then
(
children
=
>
{
if
(
!
this
.
_containers
)
{
return
Promise
.
reject
(
"
markup
view
destroyed
"
)
;
}
this
.
_queuedChildUpdates
.
delete
(
container
)
;
if
(
container
.
childrenDirty
)
{
return
this
.
_updateChildren
(
container
{
expand
:
centered
|
|
expand
}
)
;
}
const
fragment
=
this
.
doc
.
createDocumentFragment
(
)
;
const
previouslyActiveElement
=
this
.
doc
.
activeElement
;
for
(
const
child
of
children
.
nodes
)
{
const
slotted
=
!
isShadowHost
&
&
child
.
isDirectShadowHostChild
;
const
childContainer
=
this
.
importNode
(
child
flash
slotted
)
;
fragment
.
appendChild
(
childContainer
.
elt
)
;
}
while
(
container
.
children
.
firstChild
)
{
container
.
children
.
firstChild
.
remove
(
)
;
}
if
(
!
children
.
hasFirst
)
{
const
topItem
=
this
.
buildMoreNodesButtonMarkup
(
container
)
;
fragment
.
insertBefore
(
topItem
fragment
.
firstChild
)
;
}
if
(
!
children
.
hasLast
)
{
const
bottomItem
=
this
.
buildMoreNodesButtonMarkup
(
container
)
;
fragment
.
appendChild
(
bottomItem
)
;
}
container
.
children
.
appendChild
(
fragment
)
;
if
(
container
.
children
.
contains
(
previouslyActiveElement
)
)
{
previouslyActiveElement
.
focus
(
{
preventScroll
:
true
}
)
;
}
return
container
;
}
)
.
catch
(
this
.
_handleRejectionIfNotDestroyed
)
;
this
.
_queuedChildUpdates
.
set
(
container
updatePromise
)
;
return
updatePromise
;
}
buildMoreNodesButtonMarkup
(
container
)
{
const
elt
=
this
.
doc
.
createElement
(
"
li
"
)
;
elt
.
classList
.
add
(
"
more
-
nodes
"
"
devtools
-
class
-
comment
"
)
;
const
label
=
this
.
doc
.
createElement
(
"
span
"
)
;
label
.
textContent
=
INSPECTOR_L10N
.
getStr
(
"
markupView
.
more
.
showing
"
)
;
elt
.
appendChild
(
label
)
;
const
button
=
this
.
doc
.
createElement
(
"
button
"
)
;
button
.
setAttribute
(
"
href
"
"
#
"
)
;
const
showAllString
=
PluralForm
.
get
(
container
.
node
.
numChildren
INSPECTOR_L10N
.
getStr
(
"
markupView
.
more
.
showAll2
"
)
)
;
button
.
textContent
=
showAllString
.
replace
(
"
#
1
"
container
.
node
.
numChildren
)
;
elt
.
appendChild
(
button
)
;
button
.
addEventListener
(
"
click
"
(
)
=
>
{
container
.
maxChildren
=
-
1
;
this
.
_forceUpdateChildren
(
container
)
;
}
)
;
return
elt
;
}
_waitForChildren
(
)
{
if
(
!
this
.
_queuedChildUpdates
)
{
return
Promise
.
resolve
(
undefined
)
;
}
return
Promise
.
all
(
[
.
.
.
this
.
_queuedChildUpdates
.
values
(
)
]
)
;
}
async
_getVisibleChildren
(
container
centered
)
{
let
maxChildren
=
container
.
maxChildren
|
|
this
.
maxChildren
;
if
(
maxChildren
=
=
-
1
)
{
maxChildren
=
undefined
;
}
const
inspectorFront
=
await
container
.
node
.
targetFront
.
getFront
(
"
inspector
"
)
;
return
inspectorFront
.
walker
.
children
(
container
.
node
{
maxNodes
:
maxChildren
center
:
centered
}
)
;
}
_getParentInTree
(
node
)
{
const
parent
=
node
.
parentOrHost
(
)
;
if
(
!
parent
)
{
return
null
;
}
if
(
node
.
targetFront
!
=
=
parent
.
targetFront
&
&
node
.
targetFront
=
=
this
.
inspector
.
commands
.
targetCommand
.
selectedTargetFront
)
{
return
null
;
}
return
parent
;
}
destroy
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
this
.
_hoveredContainer
=
null
;
if
(
this
.
_contextMenu
)
{
this
.
_contextMenu
.
destroy
(
)
;
this
.
_contextMenu
=
null
;
}
if
(
this
.
_eventDetailsTooltip
)
{
this
.
_eventDetailsTooltip
.
destroy
(
)
;
this
.
_eventDetailsTooltip
=
null
;
}
if
(
this
.
htmlEditor
)
{
this
.
htmlEditor
.
destroy
(
)
;
this
.
htmlEditor
=
null
;
}
if
(
this
.
imagePreviewTooltip
)
{
this
.
imagePreviewTooltip
.
destroy
(
)
;
this
.
imagePreviewTooltip
=
null
;
}
if
(
this
.
_undo
)
{
this
.
_undo
.
destroy
(
)
;
this
.
_undo
=
null
;
}
if
(
this
.
_shortcuts
)
{
this
.
_shortcuts
.
destroy
(
)
;
this
.
_shortcuts
=
null
;
}
this
.
popup
.
destroy
(
)
;
this
.
popup
=
null
;
this
.
_selectedContainer
=
null
;
this
.
_elt
.
removeEventListener
(
"
blur
"
this
.
_onBlur
true
)
;
this
.
_elt
.
removeEventListener
(
"
click
"
this
.
_onMouseClick
)
;
this
.
_elt
.
removeEventListener
(
"
contextmenu
"
this
.
_onContextMenu
)
;
this
.
_elt
.
removeEventListener
(
"
mousemove
"
this
.
_onMouseMove
)
;
this
.
_elt
.
removeEventListener
(
"
mouseout
"
this
.
_onMouseOut
)
;
this
.
_frame
.
removeEventListener
(
"
focus
"
this
.
_onFocus
)
;
this
.
_unsubscribeFromToolboxStore
(
)
;
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
_onNewSelection
)
;
this
.
inspector
.
off
(
"
search
-
cleared
"
this
.
_updateSearchResultsHighlightingInSelectedNode
)
;
this
.
resourceCommand
.
unwatchResources
(
[
this
.
resourceCommand
.
TYPES
.
ROOT_NODE
]
{
onAvailable
:
this
.
_onResourceAvailable
}
)
;
this
.
targetCommand
.
unwatchTargets
(
{
types
:
[
this
.
targetCommand
.
TYPES
.
FRAME
]
onAvailable
:
this
.
_onTargetAvailable
onDestroyed
:
this
.
_onTargetDestroyed
}
)
;
this
.
inspector
.
toolbox
.
nodePicker
.
off
(
"
picker
-
node
-
hovered
"
this
.
_onToolboxPickerHover
)
;
this
.
inspector
.
toolbox
.
nodePicker
.
off
(
"
picker
-
node
-
canceled
"
this
.
_onToolboxPickerCanceled
)
;
this
.
inspector
.
highlighters
.
off
(
"
highlighter
-
shown
"
this
.
onHighlighterShown
)
;
this
.
inspector
.
highlighters
.
off
(
"
highlighter
-
hidden
"
this
.
onHighlighterHidden
)
;
this
.
win
.
removeEventListener
(
"
copy
"
this
.
_onCopy
)
;
this
.
win
.
removeEventListener
(
"
mouseup
"
this
.
_onMouseUp
)
;
this
.
_walkerEventListener
.
destroy
(
)
;
this
.
_walkerEventListener
=
null
;
this
.
_prefObserver
.
off
(
ATTR_COLLAPSE_ENABLED_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_prefObserver
.
off
(
ATTR_COLLAPSE_LENGTH_PREF
this
.
_onCollapseAttributesPrefChange
)
;
this
.
_prefObserver
.
destroy
(
)
;
for
(
const
[
container
]
of
this
.
_containers
)
{
container
.
destroy
(
)
;
}
this
.
_containers
=
null
;
this
.
_elt
.
innerHTML
=
"
"
;
this
.
_elt
=
null
;
this
.
_selectionController
=
null
;
this
.
controllerWindow
=
null
;
this
.
doc
=
null
;
this
.
highlighters
=
null
;
this
.
walker
=
null
;
this
.
resourceCommand
=
null
;
this
.
win
=
null
;
this
.
_lastDropTarget
=
null
;
this
.
_lastDragTarget
=
null
;
}
findClosestDragDropTarget
(
el
)
{
return
el
.
classList
.
contains
(
"
tag
-
line
"
)
?
el
:
el
.
querySelector
(
"
.
tag
-
line
"
)
|
|
el
.
closest
(
"
.
tag
-
line
"
)
;
}
indicateDropTarget
(
el
)
{
if
(
this
.
_lastDropTarget
)
{
this
.
_lastDropTarget
.
classList
.
remove
(
"
drop
-
target
"
)
;
}
if
(
!
el
)
{
return
;
}
const
target
=
this
.
findClosestDragDropTarget
(
el
)
;
if
(
target
)
{
target
.
classList
.
add
(
"
drop
-
target
"
)
;
this
.
_lastDropTarget
=
target
;
}
}
indicateDragTarget
(
el
)
{
if
(
this
.
_lastDragTarget
)
{
this
.
_lastDragTarget
.
classList
.
remove
(
"
drag
-
target
"
)
;
}
if
(
!
el
)
{
return
;
}
const
target
=
this
.
findClosestDragDropTarget
(
el
)
;
if
(
target
)
{
target
.
classList
.
add
(
"
drag
-
target
"
)
;
this
.
_lastDragTarget
=
target
;
}
}
get
dropTargetNodes
(
)
{
const
target
=
this
.
_lastDropTarget
;
if
(
!
target
)
{
return
null
;
}
let
parent
nextSibling
;
if
(
target
.
previousElementSibling
&
&
target
.
previousElementSibling
.
nodeName
.
toLowerCase
(
)
=
=
=
"
ul
"
)
{
parent
=
target
.
parentNode
.
container
.
node
;
nextSibling
=
null
;
}
else
{
parent
=
target
.
parentNode
.
container
.
node
.
parentNode
(
)
;
nextSibling
=
target
.
parentNode
.
container
.
node
;
}
if
(
nextSibling
)
{
while
(
nextSibling
.
isMarkerPseudoElement
|
|
nextSibling
.
isBeforePseudoElement
)
{
nextSibling
=
this
.
getContainer
(
nextSibling
)
.
elt
.
nextSibling
.
container
.
node
;
}
if
(
nextSibling
.
isAfterPseudoElement
)
{
parent
=
target
.
parentNode
.
container
.
node
.
parentNode
(
)
;
nextSibling
=
null
;
}
}
if
(
parent
.
nodeType
!
=
=
nodeConstants
.
ELEMENT_NODE
)
{
return
null
;
}
return
{
parent
nextSibling
}
;
}
}
;
async
function
copyLongHTMLString
(
longStringActorPromise
)
{
let
string
=
await
getLongString
(
longStringActorPromise
)
;
if
(
Services
.
prefs
.
getBoolPref
(
BEAUTIFY_HTML_ON_COPY_PREF
)
)
{
const
{
indentUnit
indentWithTabs
}
=
getTabPrefs
(
)
;
string
=
beautify
.
html
(
string
{
preserve_newlines
:
false
indent_size
:
indentWithTabs
?
1
:
indentUnit
indent_char
:
indentWithTabs
?
"
\
t
"
:
"
"
unformatted
:
[
]
}
)
;
}
clipboardHelper
.
copyString
(
string
)
;
}
function
map
(
value
oldMin
oldMax
newMin
newMax
)
{
const
ratio
=
oldMax
-
oldMin
;
if
(
ratio
=
=
0
)
{
return
value
;
}
return
newMin
+
(
newMax
-
newMin
)
*
(
(
value
-
oldMin
)
/
ratio
)
;
}
module
.
exports
=
MarkupView
;
