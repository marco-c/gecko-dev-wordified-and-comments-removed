"
use
strict
"
;
const
nodeConstants
=
require
(
"
devtools
/
shared
/
dom
-
node
-
constants
"
)
;
function
ReadOnlyEditor
(
container
node
)
{
this
.
container
=
container
;
this
.
markup
=
this
.
container
.
markup
;
this
.
buildMarkup
(
)
;
if
(
node
.
isPseudoElement
)
{
this
.
tag
.
classList
.
add
(
"
theme
-
fg
-
color3
"
)
;
this
.
tag
.
textContent
=
node
.
isBeforePseudoElement
?
"
:
:
before
"
:
"
:
:
after
"
;
}
else
if
(
node
.
nodeType
=
=
nodeConstants
.
DOCUMENT_TYPE_NODE
)
{
this
.
elt
.
classList
.
add
(
"
comment
"
"
doctype
"
)
;
this
.
tag
.
textContent
=
node
.
doctypeString
;
}
else
if
(
node
.
isShadowRoot
)
{
this
.
tag
.
textContent
=
#
shadow
-
root
(
{
node
.
shadowRootMode
}
)
;
}
else
{
this
.
tag
.
textContent
=
node
.
nodeName
;
}
this
.
tag
.
setAttribute
(
"
tabindex
"
"
-
1
"
)
;
}
ReadOnlyEditor
.
prototype
=
{
buildMarkup
:
function
(
)
{
const
doc
=
this
.
markup
.
doc
;
this
.
elt
=
doc
.
createElement
(
"
span
"
)
;
this
.
elt
.
classList
.
add
(
"
editor
"
)
;
this
.
tag
=
doc
.
createElement
(
"
span
"
)
;
this
.
tag
.
classList
.
add
(
"
tag
"
)
;
this
.
elt
.
appendChild
(
this
.
tag
)
;
}
destroy
:
function
(
)
{
if
(
!
this
.
elt
)
{
return
;
}
this
.
elt
.
remove
(
)
;
this
.
elt
=
null
;
this
.
tag
=
null
;
}
getInfoAtNode
:
function
(
)
{
return
null
;
}
}
;
module
.
exports
=
ReadOnlyEditor
;
