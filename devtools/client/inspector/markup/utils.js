"
use
strict
"
;
function
flashElementOn
(
backgroundElt
foregroundElt
=
backgroundElt
)
{
if
(
!
backgroundElt
|
|
!
foregroundElt
)
{
return
;
}
backgroundElt
.
classList
.
remove
(
"
flash
-
out
"
)
;
backgroundElt
.
classList
.
add
(
"
theme
-
bg
-
contrast
"
)
;
foregroundElt
.
classList
.
add
(
"
theme
-
fg
-
contrast
"
)
;
[
]
.
forEach
.
call
(
foregroundElt
.
querySelectorAll
(
"
[
class
*
=
theme
-
fg
-
color
]
"
)
span
=
>
span
.
classList
.
add
(
"
theme
-
fg
-
contrast
"
)
)
;
}
function
flashElementOff
(
backgroundElt
foregroundElt
=
backgroundElt
)
{
if
(
!
backgroundElt
|
|
!
foregroundElt
)
{
return
;
}
backgroundElt
.
classList
.
add
(
"
flash
-
out
"
)
;
backgroundElt
.
classList
.
remove
(
"
theme
-
bg
-
contrast
"
)
;
foregroundElt
.
classList
.
remove
(
"
theme
-
fg
-
contrast
"
)
;
[
]
.
forEach
.
call
(
foregroundElt
.
querySelectorAll
(
"
[
class
*
=
theme
-
fg
-
color
]
"
)
span
=
>
span
.
classList
.
remove
(
"
theme
-
fg
-
contrast
"
)
)
;
}
function
getAutocompleteMaxWidth
(
element
container
)
{
let
elementRect
=
element
.
getBoundingClientRect
(
)
;
let
containerRect
=
container
.
getBoundingClientRect
(
)
;
return
containerRect
.
right
-
elementRect
.
left
-
2
;
}
function
parseAttributeValues
(
attr
doc
)
{
attr
=
attr
.
trim
(
)
;
let
parseAndGetNode
=
str
=
>
{
return
new
DOMParser
(
)
.
parseFromString
(
str
"
text
/
html
"
)
.
body
.
childNodes
[
0
]
;
}
;
let
el
=
parseAndGetNode
(
"
<
svg
"
+
attr
+
"
>
<
/
svg
>
"
)
|
|
parseAndGetNode
(
"
<
svg
"
+
attr
+
"
\
"
>
<
/
svg
>
"
)
|
|
parseAndGetNode
(
"
<
svg
"
+
attr
+
"
'
>
<
/
svg
>
"
)
;
let
div
=
doc
.
createElement
(
"
div
"
)
;
let
attributes
=
[
]
;
for
(
let
{
name
value
}
of
el
.
attributes
)
{
try
{
div
.
setAttribute
(
name
value
)
;
attributes
.
push
(
{
name
value
}
)
;
}
catch
(
e
)
{
}
}
return
attributes
;
}
function
truncateString
(
str
maxLength
)
{
if
(
!
str
|
|
str
.
length
<
=
maxLength
)
{
return
str
;
}
return
str
.
substring
(
0
Math
.
ceil
(
maxLength
/
2
)
)
+
"
"
+
str
.
substring
(
str
.
length
-
Math
.
floor
(
maxLength
/
2
)
)
;
}
module
.
exports
=
{
flashElementOn
flashElementOff
getAutocompleteMaxWidth
parseAttributeValues
truncateString
}
;
