"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
doc_markup_links
.
html
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
shared
-
head
.
js
"
this
)
;
add_task
(
async
function
(
)
{
const
{
toolbox
inspector
}
=
await
openInspectorForURL
(
TEST_URL
)
;
info
(
"
Select
a
node
with
a
cssresource
attribute
"
)
;
await
selectNode
(
"
link
"
inspector
)
;
info
(
"
Set
the
popupNode
to
the
node
that
contains
the
uri
"
)
;
let
{
editor
}
=
await
getContainerForSelector
(
"
link
"
inspector
)
;
openContextMenuAndGetAllItems
(
inspector
{
target
:
editor
.
attrElements
.
get
(
"
href
"
)
.
querySelector
(
"
.
link
"
)
}
)
;
info
(
"
Follow
the
link
and
wait
for
the
style
-
editor
to
open
"
)
;
const
onStyleEditorReady
=
toolbox
.
once
(
"
styleeditor
-
ready
"
)
;
inspector
.
markup
.
contextMenu
.
_onFollowLink
(
)
;
await
onStyleEditorReady
;
ok
(
true
"
The
style
-
editor
was
open
"
)
;
info
(
"
Switch
back
to
the
inspector
"
)
;
await
toolbox
.
selectTool
(
"
inspector
"
)
;
info
(
"
Select
a
node
with
a
jsresource
attribute
"
)
;
await
selectNode
(
"
script
"
inspector
)
;
info
(
"
Set
the
popupNode
to
the
node
that
contains
the
uri
"
)
;
(
{
editor
}
=
await
getContainerForSelector
(
"
script
"
inspector
)
)
;
openContextMenuAndGetAllItems
(
inspector
{
target
:
editor
.
attrElements
.
get
(
"
src
"
)
.
querySelector
(
"
.
link
"
)
}
)
;
info
(
"
Follow
the
link
and
wait
for
the
debugger
to
open
"
)
;
inspector
.
markup
.
contextMenu
.
_onFollowLink
(
)
;
await
toolbox
.
getPanelWhenReady
(
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForSelectedSource
(
dbg
URL_ROOT
+
"
lib_jquery_1
.
0
.
js
"
)
;
ok
(
true
"
The
debugger
was
open
"
)
;
}
)
;
