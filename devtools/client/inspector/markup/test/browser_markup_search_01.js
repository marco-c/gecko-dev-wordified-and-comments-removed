"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
doc_markup_search
.
html
"
;
const
DEVTOOLS_SEARCH_HIGHLIGHT_NAME
=
"
devtools
-
search
"
;
add_task
(
async
function
(
)
{
const
{
inspector
}
=
await
openInspectorForURL
(
TEST_URL
)
;
let
container
=
await
getContainerForSelector
(
"
em
"
inspector
true
)
;
ok
(
!
container
"
The
<
em
>
tag
isn
'
t
present
yet
in
the
markup
-
view
"
)
;
info
(
"
searching
for
the
innermost
child
:
<
em
>
"
)
;
await
searchFor
(
"
em
"
inspector
)
;
container
=
await
getContainerForSelector
(
"
em
"
inspector
)
;
ok
(
container
"
The
<
em
>
tag
is
now
imported
in
the
markup
-
view
"
)
;
let
nodeFront
=
await
getNodeFront
(
"
em
"
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
nodeFront
"
The
<
em
>
tag
is
the
currently
selected
node
"
)
;
ok
(
inspector
.
markup
.
win
.
CSS
.
highlights
.
has
(
DEVTOOLS_SEARCH_HIGHLIGHT_NAME
)
"
{
DEVTOOLS_SEARCH_HIGHLIGHT_NAME
}
"
CSS
highlight
does
exist
)
;
checkHighlightedSearchResults
(
inspector
[
"
em
"
"
em
"
]
)
;
info
(
"
searching
for
other
nodes
too
"
)
;
for
(
const
node
of
[
"
span
"
"
li
"
"
ul
"
]
)
{
await
searchFor
(
node
inspector
)
;
nodeFront
=
await
getNodeFront
(
node
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
nodeFront
"
The
<
"
+
node
+
"
>
tag
is
the
currently
selected
node
"
)
;
checkHighlightedSearchResults
(
inspector
[
node
node
]
)
;
}
await
searchFor
(
"
BUTT
"
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
await
getNodeFront
(
"
.
Buttons
"
inspector
)
"
The
section
.
Buttons
element
is
selected
"
)
;
checkHighlightedSearchResults
(
inspector
[
"
Butt
"
]
)
;
await
searchFor
(
"
BUT
"
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
await
getNodeFront
(
"
.
Buttons
"
inspector
)
"
The
section
.
Buttons
element
is
selected
"
)
;
checkHighlightedSearchResults
(
inspector
[
"
But
"
]
)
;
let
onSearchResult
=
inspector
.
search
.
once
(
"
search
-
result
"
)
;
inspector
.
searchNextButton
.
click
(
)
;
info
(
"
Waiting
for
results
"
)
;
await
onSearchResult
;
is
(
inspector
.
selection
.
nodeFront
await
getNodeFront
(
button
[
type
=
"
button
"
]
inspector
)
The
button
[
type
=
"
button
"
]
element
is
selected
)
;
checkHighlightedSearchResults
(
inspector
[
"
but
"
"
But
"
"
but
"
"
but
"
]
)
;
onSearchResult
=
inspector
.
search
.
once
(
"
search
-
result
"
)
;
inspector
.
searchNextButton
.
click
(
)
;
info
(
"
Waiting
for
results
"
)
;
await
onSearchResult
;
is
(
inspector
.
selection
.
nodeFront
await
getNodeFront
(
section
.
Buttons
>
p
inspector
)
The
p
element
is
selected
)
;
checkHighlightedSearchResults
(
inspector
[
"
but
"
]
)
;
const
onSearchCleared
=
inspector
.
once
(
"
search
-
cleared
"
)
;
inspector
.
searchClearButton
.
click
(
)
;
info
(
"
Waiting
for
search
to
clear
"
)
;
await
onSearchCleared
;
checkHighlightedSearchResults
(
inspector
[
]
)
;
await
searchFor
(
"
TALLTOPMATCH
"
inspector
)
;
const
talltopNodeFront
=
await
getNodeFront
(
"
section
.
talltop
"
inspector
)
;
const
talltopNodeFrontChildren
=
await
inspector
.
walker
.
children
(
talltopNodeFront
)
;
is
(
inspector
.
selection
.
nodeFront
talltopNodeFrontChildren
.
nodes
[
0
]
The
section
.
talltop
text
node
is
selected
)
;
checkHighlightedSearchResults
(
inspector
[
"
TALLTOPMATCH
"
]
)
;
await
searchFor
(
"
TALLBOTTOMMATCH
"
inspector
)
;
const
tallbottomNodeFront
=
await
getNodeFront
(
"
section
.
tallbottom
"
inspector
)
;
const
tallbottomNodeFrontChildren
=
await
inspector
.
walker
.
children
(
tallbottomNodeFront
)
;
is
(
inspector
.
selection
.
nodeFront
tallbottomNodeFrontChildren
.
nodes
[
0
]
The
section
.
tallbottom
text
node
is
selected
)
;
checkHighlightedSearchResults
(
inspector
[
"
TALLBOTTOMMATCH
"
]
)
;
await
searchFor
(
"
OVERFLOWSMATCH
"
inspector
)
;
const
overflowsNodeFront
=
await
getNodeFront
(
"
section
.
overflows
"
inspector
)
;
const
overflowsNodeFrontChildren
=
await
inspector
.
walker
.
children
(
overflowsNodeFront
)
;
is
(
inspector
.
selection
.
nodeFront
overflowsNodeFrontChildren
.
nodes
[
0
]
"
The
section
.
overflows
text
node
is
selected
"
)
;
checkHighlightedSearchResults
(
inspector
[
"
OVERFLOWSMATCH
"
]
)
;
info
(
"
Check
that
matching
node
with
non
-
visible
search
result
are
still
being
scrolled
to
"
)
;
const
markupViewContainer
=
inspector
.
markup
.
win
.
document
.
documentElement
;
markupViewContainer
.
scrollTop
=
0
;
markupViewContainer
.
scrollLeft
=
0
;
const
croppedAttributeContainer
=
await
getContainerForSelector
(
"
section
#
cropped
-
attribute
"
inspector
)
;
let
croppedAttributeContainerRect
=
croppedAttributeContainer
.
elt
.
getBoundingClientRect
(
)
;
ok
(
croppedAttributeContainerRect
.
y
<
0
|
|
croppedAttributeContainerRect
.
y
>
markupViewContainer
.
clientHeight
"
section
#
cropped
-
attribute
container
is
not
into
view
before
searching
for
a
match
in
its
attributes
"
)
;
await
searchFor
(
"
croppedvalue
"
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
await
getNodeFront
(
"
section
#
cropped
-
attribute
"
inspector
)
"
The
section
#
cropped
-
attribute
element
is
selected
"
)
;
checkHighlightedSearchResults
(
inspector
[
]
)
;
croppedAttributeContainerRect
=
croppedAttributeContainer
.
elt
.
getBoundingClientRect
(
)
;
Assert
.
greaterOrEqual
(
croppedAttributeContainerRect
.
y
0
Node
with
cropped
attributes
is
not
above
visible
viewport
)
;
Assert
.
less
(
croppedAttributeContainerRect
.
y
markupViewContainer
.
clientHeight
Node
with
cropped
attributes
is
not
below
visible
viewport
)
;
Assert
.
greater
(
markupViewContainer
.
scrollHeight
markupViewContainer
.
clientHeight
"
Markup
view
overflows
vertically
"
)
;
Assert
.
greater
(
markupViewContainer
.
scrollWidth
markupViewContainer
.
clientWidth
"
Markup
view
overflows
horizontally
"
)
;
}
)
;
async
function
searchFor
(
selector
inspector
)
{
const
onNewNodeFront
=
inspector
.
selection
.
once
(
"
new
-
node
-
front
"
)
;
searchUsingSelectorSearch
(
selector
inspector
)
;
await
onNewNodeFront
;
await
inspector
.
once
(
"
inspector
-
updated
"
)
;
}
function
checkHighlightedSearchResults
(
inspector
expectedHighlights
)
{
const
searchInputValue
=
getSelectorSearchBox
(
inspector
)
.
value
;
info
(
Checking
highlights
for
"
{
searchInputValue
}
"
search
)
;
const
devtoolsHighlights
=
[
.
.
.
inspector
.
markup
.
win
.
CSS
.
highlights
.
get
(
DEVTOOLS_SEARCH_HIGHLIGHT_NAME
)
.
values
(
)
]
;
Assert
.
deepEqual
(
devtoolsHighlights
.
map
(
range
=
>
range
.
toString
(
)
)
expectedHighlights
Got
expected
highlights
for
"
{
searchInputValue
}
"
)
;
if
(
expectedHighlights
.
length
)
{
const
markupViewContainer
=
inspector
.
markup
.
win
.
document
.
documentElement
;
info
(
Check
that
we
scrolled
so
the
first
highlighted
range
for
"
{
searchInputValue
}
"
is
visible
)
;
const
[
rect
]
=
devtoolsHighlights
[
0
]
.
getClientRects
(
)
;
const
{
x
y
}
=
rect
;
Assert
.
greaterOrEqual
(
y
0
First
"
{
searchInputValue
}
"
match
not
above
visible
viewport
)
;
Assert
.
less
(
y
markupViewContainer
.
clientHeight
First
"
{
searchInputValue
}
"
match
not
below
visible
viewport
)
;
Assert
.
greaterOrEqual
(
x
0
First
"
{
searchInputValue
}
"
match
not
before
the
"
left
border
"
of
the
visible
viewport
)
;
Assert
.
less
(
x
markupViewContainer
.
clientWidth
First
"
{
searchInputValue
}
"
match
not
after
the
"
right
border
"
of
the
visible
viewport
)
;
}
}
