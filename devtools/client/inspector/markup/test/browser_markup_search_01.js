"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
doc_markup_search
.
html
"
;
const
DEVTOOLS_SEARCH_HIGHLIGHT_NAME
=
"
devtools
-
search
"
;
add_task
(
async
function
(
)
{
const
{
inspector
}
=
await
openInspectorForURL
(
TEST_URL
)
;
let
container
=
await
getContainerForSelector
(
"
em
"
inspector
true
)
;
ok
(
!
container
"
The
<
em
>
tag
isn
'
t
present
yet
in
the
markup
-
view
"
)
;
info
(
"
searching
for
the
innermost
child
:
<
em
>
"
)
;
await
searchFor
(
"
em
"
inspector
)
;
container
=
await
getContainerForSelector
(
"
em
"
inspector
)
;
ok
(
container
"
The
<
em
>
tag
is
now
imported
in
the
markup
-
view
"
)
;
let
nodeFront
=
await
getNodeFront
(
"
em
"
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
nodeFront
"
The
<
em
>
tag
is
the
currently
selected
node
"
)
;
ok
(
inspector
.
markup
.
win
.
CSS
.
highlights
.
has
(
DEVTOOLS_SEARCH_HIGHLIGHT_NAME
)
"
{
DEVTOOLS_SEARCH_HIGHLIGHT_NAME
}
"
CSS
highlight
does
exist
)
;
checkHighlightedSearchResults
(
inspector
[
"
em
"
"
em
"
]
)
;
info
(
"
searching
for
other
nodes
too
"
)
;
for
(
const
node
of
[
"
span
"
"
li
"
"
ul
"
]
)
{
await
searchFor
(
node
inspector
)
;
nodeFront
=
await
getNodeFront
(
node
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
nodeFront
"
The
<
"
+
node
+
"
>
tag
is
the
currently
selected
node
"
)
;
checkHighlightedSearchResults
(
inspector
[
node
node
]
)
;
}
await
searchFor
(
"
BUTT
"
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
await
getNodeFront
(
"
.
Buttons
"
inspector
)
"
The
section
.
Buttons
element
is
selected
"
)
;
checkHighlightedSearchResults
(
inspector
[
"
Butt
"
]
)
;
await
searchFor
(
"
BUT
"
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
await
getNodeFront
(
"
.
Buttons
"
inspector
)
"
The
section
.
Buttons
element
is
selected
"
)
;
checkHighlightedSearchResults
(
inspector
[
"
But
"
]
)
;
let
onSearchResult
=
inspector
.
search
.
once
(
"
search
-
result
"
)
;
inspector
.
searchNextButton
.
click
(
)
;
info
(
"
Waiting
for
results
"
)
;
await
onSearchResult
;
is
(
inspector
.
selection
.
nodeFront
await
getNodeFront
(
button
[
type
=
"
button
"
]
inspector
)
The
button
[
type
=
"
button
"
]
element
is
selected
)
;
checkHighlightedSearchResults
(
inspector
[
"
but
"
"
But
"
"
but
"
"
but
"
]
)
;
onSearchResult
=
inspector
.
search
.
once
(
"
search
-
result
"
)
;
inspector
.
searchNextButton
.
click
(
)
;
info
(
"
Waiting
for
results
"
)
;
await
onSearchResult
;
is
(
inspector
.
selection
.
nodeFront
await
getNodeFront
(
section
.
Buttons
>
p
inspector
)
The
p
element
is
selected
)
;
checkHighlightedSearchResults
(
inspector
[
"
but
"
]
)
;
const
onSearchCleared
=
inspector
.
once
(
"
search
-
cleared
"
)
;
inspector
.
searchClearButton
.
click
(
)
;
info
(
"
Waiting
for
search
to
clear
"
)
;
await
onSearchCleared
;
checkHighlightedSearchResults
(
inspector
[
]
)
;
}
)
;
async
function
searchFor
(
selector
inspector
)
{
const
onNewNodeFront
=
inspector
.
selection
.
once
(
"
new
-
node
-
front
"
)
;
searchUsingSelectorSearch
(
selector
inspector
)
;
await
onNewNodeFront
;
await
inspector
.
once
(
"
inspector
-
updated
"
)
;
}
function
checkHighlightedSearchResults
(
inspector
expectedHighlights
)
{
Assert
.
deepEqual
(
[
.
.
.
inspector
.
markup
.
win
.
CSS
.
highlights
.
get
(
DEVTOOLS_SEARCH_HIGHLIGHT_NAME
)
.
values
(
)
]
.
map
(
range
=
>
range
.
toString
(
)
)
expectedHighlights
)
;
}
