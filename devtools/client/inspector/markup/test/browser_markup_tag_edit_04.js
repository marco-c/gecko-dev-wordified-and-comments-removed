"
use
strict
"
;
const
HTML
=
<
div
id
=
"
parent
"
>
<
div
id
=
"
first
"
>
<
/
div
>
<
div
id
=
"
second
"
>
<
/
div
>
<
div
id
=
"
third
"
>
<
/
div
>
<
/
div
>
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
HTML
)
;
const
TEST_DATA
=
[
{
selector
:
"
#
first
"
key
:
"
delete
"
focusedSelector
:
"
#
second
"
}
{
selector
:
"
#
second
"
key
:
"
delete
"
focusedSelector
:
"
#
third
"
}
{
selector
:
"
#
third
"
key
:
"
delete
"
focusedSelector
:
"
#
second
"
}
{
selector
:
"
#
first
"
key
:
"
back_space
"
focusedSelector
:
"
#
second
"
}
{
selector
:
"
#
second
"
key
:
"
back_space
"
focusedSelector
:
"
#
first
"
}
{
selector
:
"
#
third
"
key
:
"
back_space
"
focusedSelector
:
"
#
second
"
}
{
setup
:
function
*
(
inspector
)
{
let
mutated
=
inspector
.
once
(
"
markupmutation
"
)
;
for
(
let
node
of
content
.
document
.
querySelectorAll
(
"
#
second
#
third
"
)
)
{
node
.
remove
(
)
;
}
yield
mutated
;
}
selector
:
"
#
first
"
key
:
"
delete
"
focusedSelector
:
"
#
parent
"
}
{
selector
:
"
#
first
"
key
:
"
back_space
"
focusedSelector
:
"
#
parent
"
}
]
;
add_task
(
function
*
(
)
{
let
{
inspector
}
=
yield
openInspectorForURL
(
TEST_URL
)
;
for
(
let
{
setup
selector
key
focusedSelector
}
of
TEST_DATA
)
{
if
(
setup
)
{
yield
setup
(
inspector
)
;
}
yield
checkDeleteAndSelection
(
inspector
key
selector
focusedSelector
)
;
}
}
)
;
function
*
checkDeleteAndSelection
(
inspector
key
selector
focusedSelector
)
{
info
(
"
Test
deleting
node
"
+
selector
+
"
with
"
+
key
+
"
"
+
"
expecting
"
+
focusedSelector
+
"
to
be
focused
"
)
;
info
(
"
Select
node
"
+
selector
+
"
and
make
sure
it
is
focused
"
)
;
yield
selectNode
(
selector
inspector
)
;
yield
clickContainer
(
selector
inspector
)
;
info
(
"
Delete
the
node
with
:
"
+
key
)
;
let
mutated
=
inspector
.
once
(
"
markupmutation
"
)
;
EventUtils
.
sendKey
(
key
inspector
.
panelWin
)
;
yield
Promise
.
all
(
[
mutated
inspector
.
once
(
"
inspector
-
updated
"
)
]
)
;
let
nodeFront
=
yield
getNodeFront
(
focusedSelector
inspector
)
;
is
(
inspector
.
selection
.
nodeFront
nodeFront
focusedSelector
+
"
is
selected
after
deletion
"
)
;
info
(
"
Check
that
the
node
was
really
removed
"
)
;
let
node
=
yield
getNodeFront
(
selector
inspector
)
;
ok
(
!
node
"
The
node
can
'
t
be
found
in
the
page
anymore
"
)
;
info
(
"
Undo
the
deletion
to
restore
the
original
markup
"
)
;
yield
undoChange
(
inspector
)
;
node
=
yield
getNodeFront
(
selector
inspector
)
;
ok
(
node
"
The
node
is
back
"
)
;
}
