"
use
strict
"
;
const
HTML
=
<
style
type
=
"
text
/
css
"
>
#
pseudo
:
:
before
{
content
:
'
before
'
;
}
#
pseudo
:
:
after
{
content
:
'
after
'
;
}
<
/
style
>
<
div
id
=
"
parent
"
>
<
div
id
=
"
first
"
>
<
/
div
>
<
div
id
=
"
second
"
>
<
/
div
>
<
div
id
=
"
third
"
>
<
/
div
>
<
/
div
>
<
div
id
=
"
only
-
child
"
>
<
div
id
=
"
fourth
"
>
<
/
div
>
<
/
div
>
<
div
id
=
"
pseudo
"
>
<
div
id
=
"
fifth
"
>
<
/
div
>
<
/
div
>
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
HTML
)
;
const
TEST_DATA
=
[
{
selector
:
"
#
first
"
key
:
"
delete
"
focusedSelector
:
"
#
second
"
}
{
selector
:
"
#
second
"
key
:
"
delete
"
focusedSelector
:
"
#
third
"
}
{
selector
:
"
#
third
"
key
:
"
delete
"
focusedSelector
:
"
#
second
"
}
{
selector
:
"
#
fourth
"
key
:
"
delete
"
focusedSelector
:
"
#
only
-
child
"
}
{
selector
:
"
#
fifth
"
key
:
"
delete
"
focusedSelector
:
"
#
pseudo
"
pseudo
:
"
after
"
}
{
selector
:
"
#
first
"
key
:
"
back_space
"
focusedSelector
:
"
#
second
"
}
{
selector
:
"
#
second
"
key
:
"
back_space
"
focusedSelector
:
"
#
first
"
}
{
selector
:
"
#
third
"
key
:
"
back_space
"
focusedSelector
:
"
#
second
"
}
{
selector
:
"
#
fourth
"
key
:
"
back_space
"
focusedSelector
:
"
#
only
-
child
"
}
{
selector
:
"
#
fifth
"
key
:
"
back_space
"
focusedSelector
:
"
#
pseudo
"
pseudo
:
"
before
"
}
]
;
add_task
(
function
*
(
)
{
let
{
inspector
}
=
yield
openInspectorForURL
(
TEST_URL
)
;
for
(
let
data
of
TEST_DATA
)
{
yield
checkDeleteAndSelection
(
inspector
data
)
;
}
}
)
;
function
*
checkDeleteAndSelection
(
inspector
{
key
selector
focusedSelector
pseudo
}
)
{
info
(
"
Test
deleting
node
"
+
selector
+
"
with
"
+
key
+
"
"
+
"
expecting
"
+
focusedSelector
+
"
to
be
focused
"
)
;
info
(
"
Select
node
"
+
selector
+
"
and
make
sure
it
is
focused
"
)
;
yield
selectNode
(
selector
inspector
)
;
yield
clickContainer
(
selector
inspector
)
;
info
(
"
Delete
the
node
with
:
"
+
key
)
;
let
mutated
=
inspector
.
once
(
"
markupmutation
"
)
;
EventUtils
.
sendKey
(
key
inspector
.
panelWin
)
;
yield
Promise
.
all
(
[
mutated
inspector
.
once
(
"
inspector
-
updated
"
)
]
)
;
let
nodeFront
=
yield
getNodeFront
(
focusedSelector
inspector
)
;
if
(
pseudo
)
{
focusedSelector
=
focusedSelector
+
"
:
:
"
+
pseudo
;
let
{
nodes
}
=
yield
inspector
.
walker
.
children
(
nodeFront
)
;
nodeFront
=
pseudo
=
=
=
"
before
"
?
nodes
[
0
]
:
nodes
[
nodes
.
length
-
1
]
;
}
is
(
inspector
.
selection
.
nodeFront
nodeFront
focusedSelector
+
"
is
selected
after
deletion
"
)
;
info
(
"
Check
that
the
node
was
really
removed
"
)
;
let
node
=
yield
getNodeFront
(
selector
inspector
)
;
ok
(
!
node
"
The
node
can
'
t
be
found
in
the
page
anymore
"
)
;
info
(
"
Undo
the
deletion
to
restore
the
original
markup
"
)
;
yield
undoChange
(
inspector
)
;
node
=
yield
getNodeFront
(
selector
inspector
)
;
ok
(
node
"
The
node
is
back
"
)
;
}
