"
use
strict
"
;
const
HTML
=
<
div
style
=
"
width
:
300px
;
height
:
3000px
;
position
:
relative
;
"
>
<
div
id
=
"
scroll
-
top
"
style
=
"
height
:
50px
;
top
:
0
;
position
:
absolute
;
"
>
TOP
<
/
div
>
<
div
id
=
"
scroll
-
bottom
"
style
=
"
height
:
50px
;
bottom
:
0
;
position
:
absolute
;
"
>
BOTTOM
<
/
div
>
<
/
div
>
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
HTML
)
;
add_task
(
function
*
(
)
{
let
{
inspector
testActor
}
=
yield
openInspectorForURL
(
TEST_URL
)
;
info
(
"
Make
sure
the
markup
frame
has
the
focus
"
)
;
inspector
.
markup
.
_frame
.
focus
(
)
;
info
(
"
Before
test
starts
#
scroll
-
top
is
visible
#
scroll
-
bottom
is
hidden
"
)
;
yield
checkElementIsInViewport
(
"
#
scroll
-
top
"
true
testActor
)
;
yield
checkElementIsInViewport
(
"
#
scroll
-
bottom
"
false
testActor
)
;
info
(
"
Select
the
#
scroll
-
bottom
node
"
)
;
yield
selectNode
(
"
#
scroll
-
bottom
"
inspector
)
;
info
(
"
Press
S
to
scroll
to
the
bottom
node
"
)
;
let
waitForScroll
=
testActor
.
waitForEventOnNode
(
"
scroll
"
)
;
yield
EventUtils
.
synthesizeKey
(
"
S
"
{
}
inspector
.
panelWin
)
;
yield
waitForScroll
;
ok
(
true
"
Scroll
event
received
"
)
;
info
(
"
#
scroll
-
top
should
be
scrolled
out
#
scroll
-
bottom
should
be
visible
"
)
;
yield
checkElementIsInViewport
(
"
#
scroll
-
top
"
false
testActor
)
;
yield
checkElementIsInViewport
(
"
#
scroll
-
bottom
"
true
testActor
)
;
info
(
"
Select
the
#
scroll
-
top
node
"
)
;
yield
selectNode
(
"
#
scroll
-
top
"
inspector
)
;
info
(
"
Press
S
to
scroll
to
the
top
node
"
)
;
waitForScroll
=
testActor
.
waitForEventOnNode
(
"
scroll
"
)
;
yield
EventUtils
.
synthesizeKey
(
"
S
"
{
}
inspector
.
panelWin
)
;
yield
waitForScroll
;
ok
(
true
"
Scroll
event
received
"
)
;
info
(
"
#
scroll
-
top
should
be
visible
#
scroll
-
bottom
should
be
scrolled
out
"
)
;
yield
checkElementIsInViewport
(
"
#
scroll
-
top
"
true
testActor
)
;
yield
checkElementIsInViewport
(
"
#
scroll
-
bottom
"
false
testActor
)
;
info
(
"
Select
#
scroll
-
bottom
node
"
)
;
yield
selectNode
(
"
#
scroll
-
bottom
"
inspector
)
;
info
(
"
Press
shift
+
S
nothing
should
happen
due
to
the
modifier
"
)
;
yield
EventUtils
.
synthesizeKey
(
"
S
"
{
shiftKey
:
true
}
inspector
.
panelWin
)
;
info
(
"
Same
state
#
scroll
-
top
is
visible
#
scroll
-
bottom
is
scrolled
out
"
)
;
yield
checkElementIsInViewport
(
"
#
scroll
-
top
"
true
testActor
)
;
yield
checkElementIsInViewport
(
"
#
scroll
-
bottom
"
false
testActor
)
;
}
)
;
function
*
checkElementIsInViewport
(
selector
expected
testActor
)
{
let
isInViewport
=
yield
testActor
.
eval
(
let
node
=
document
.
querySelector
(
"
{
selector
}
"
)
;
let
rect
=
node
.
getBoundingClientRect
(
)
;
rect
.
bottom
>
=
0
&
&
rect
.
right
>
=
0
&
&
rect
.
top
<
=
window
.
innerHeight
&
&
rect
.
left
<
=
window
.
innerWidth
;
)
;
is
(
isInViewport
expected
selector
+
"
in
the
viewport
:
expected
to
be
"
+
expected
)
;
}
