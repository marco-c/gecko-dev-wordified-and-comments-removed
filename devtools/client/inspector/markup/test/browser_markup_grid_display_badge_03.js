"
use
strict
"
;
const
TEST_URI
=
<
style
type
=
'
text
/
css
'
>
.
grid
{
display
:
grid
;
}
.
flex
{
display
:
flex
;
}
<
/
style
>
<
div
class
=
"
grid
"
>
<
/
div
>
<
div
class
=
"
flex
"
>
<
/
div
>
;
add_task
(
async
function
(
)
{
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
const
{
inspector
}
=
await
openLayoutView
(
)
;
const
gridBadge
=
await
enableHighlighterByBadge
(
"
grid
"
"
.
grid
"
inspector
)
;
const
flexBadge
=
await
enableHighlighterByBadge
(
"
flex
"
"
.
flex
"
inspector
)
;
info
(
"
Check
that
both
display
badges
are
active
"
)
;
ok
(
flexBadge
.
classList
.
contains
(
"
active
"
)
flex
display
badge
is
active
.
)
;
ok
(
gridBadge
.
classList
.
contains
(
"
active
"
)
grid
display
badge
is
active
.
)
;
}
)
;
async
function
enableHighlighterByBadge
(
type
selector
inspector
)
{
const
{
highlighters
}
=
inspector
;
info
(
Check
the
{
type
}
display
badge
is
shown
and
not
active
.
)
;
const
container
=
await
getContainerForSelector
(
selector
inspector
)
;
const
badge
=
container
.
elt
.
querySelector
(
"
.
inspector
-
badge
.
interactive
[
data
-
display
]
"
)
;
ok
(
!
badge
.
classList
.
contains
(
"
active
"
)
{
type
}
badge
is
not
active
.
)
;
ok
(
badge
.
classList
.
contains
(
"
interactive
"
)
{
type
}
badge
is
interactive
.
)
;
info
(
Toggling
ON
the
{
type
}
highlighter
from
the
{
type
}
display
badge
.
)
;
let
highlighterShownEvent
=
"
"
;
switch
(
type
)
{
case
"
grid
"
:
highlighterShownEvent
=
"
grid
-
highlighter
-
shown
"
;
break
;
case
"
flex
"
:
highlighterShownEvent
=
"
flexbox
-
highlighter
-
shown
"
;
break
;
}
const
onHighlighterShown
=
highlighters
.
once
(
highlighterShownEvent
)
;
badge
.
click
(
)
;
await
onHighlighterShown
;
ok
(
badge
.
classList
.
contains
(
"
active
"
)
{
type
}
badge
is
active
.
)
;
ok
(
badge
.
classList
.
contains
(
"
interactive
"
)
{
type
}
badge
is
interactive
.
)
;
return
badge
;
}
