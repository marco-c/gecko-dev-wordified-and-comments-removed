"
use
strict
"
;
function
runEditOuterHTMLTests
(
tests
inspector
testActor
)
{
info
(
"
Running
"
+
tests
.
length
+
"
edit
-
outer
-
html
tests
"
)
;
return
(
async
function
(
)
{
for
(
const
step
of
tests
)
{
await
runEditOuterHTMLTest
(
step
inspector
testActor
)
;
}
}
)
(
)
;
}
async
function
runEditOuterHTMLTest
(
test
inspector
testActor
)
{
info
(
"
Running
an
edit
outerHTML
test
on
'
"
+
test
.
selector
+
"
'
"
)
;
await
selectNode
(
test
.
selector
inspector
)
;
const
onUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
info
(
"
Listen
for
reselectedonremoved
and
edit
the
outerHTML
"
)
;
const
onReselected
=
inspector
.
markup
.
once
(
"
reselectedonremoved
"
)
;
await
inspector
.
markup
.
updateNodeOuterHTML
(
inspector
.
selection
.
nodeFront
test
.
newHTML
test
.
oldHTML
)
;
await
onReselected
;
const
selectedNodeFront
=
inspector
.
selection
.
nodeFront
;
const
pageNodeFront
=
await
inspector
.
walker
.
querySelector
(
inspector
.
walker
.
rootNode
test
.
selector
)
;
if
(
test
.
validate
)
{
await
test
.
validate
(
{
pageNodeFront
selectedNodeFront
inspector
testActor
}
)
;
}
else
{
is
(
pageNodeFront
selectedNodeFront
"
Original
node
(
grabbed
by
selector
)
is
selected
"
)
;
const
outerHTML
=
await
getContentPageElementProperty
(
test
.
selector
"
outerHTML
"
)
;
is
(
outerHTML
test
.
newHTML
"
Outer
HTML
has
been
updated
"
)
;
}
await
onUpdated
;
const
closeTagLine
=
inspector
.
markup
.
getContainer
(
pageNodeFront
)
.
closeTagLine
;
if
(
closeTagLine
)
{
is
(
closeTagLine
.
querySelectorAll
(
"
.
theme
-
fg
-
contrast
"
)
.
length
0
"
No
contrast
class
"
)
;
}
}
