"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
doc_markup_dragdrop
.
html
"
;
const
TEST_DATA
=
[
{
node
:
"
head
"
draggable
:
false
}
{
node
:
"
body
"
draggable
:
false
}
{
node
:
"
html
"
draggable
:
false
}
{
node
:
"
style
"
draggable
:
true
}
{
node
:
"
a
"
draggable
:
true
}
{
node
:
"
p
"
draggable
:
true
}
{
node
:
"
input
"
draggable
:
true
}
{
node
:
"
div
"
draggable
:
true
}
{
node
:
async
function
(
inspector
)
{
let
parentFront
=
await
getNodeFront
(
"
#
before
"
inspector
)
;
let
{
nodes
}
=
await
inspector
.
walker
.
children
(
parentFront
)
;
return
getContainerForNodeFront
(
nodes
[
1
]
inspector
)
;
}
draggable
:
true
}
{
node
:
async
function
(
inspector
)
{
let
parentFront
=
await
getNodeFront
(
"
#
test
"
inspector
)
;
let
{
nodes
}
=
await
inspector
.
walker
.
children
(
parentFront
)
;
return
getContainerForNodeFront
(
nodes
[
0
]
inspector
)
;
}
draggable
:
false
}
]
;
add_task
(
async
function
(
)
{
let
{
inspector
}
=
await
openInspectorForURL
(
TEST_URL
)
;
await
inspector
.
markup
.
expandAll
(
)
;
for
(
let
{
node
draggable
}
of
TEST_DATA
)
{
let
container
;
let
name
;
if
(
typeof
node
=
=
=
"
string
"
)
{
container
=
await
getContainerForSelector
(
node
inspector
)
;
name
=
node
;
}
else
{
container
=
await
node
(
inspector
)
;
name
=
container
.
toString
(
)
;
}
let
status
=
draggable
?
"
draggable
"
:
"
not
draggable
"
;
info
(
Testing
{
name
}
expecting
it
to
be
{
status
}
)
;
is
(
container
.
isDraggable
(
)
draggable
The
node
is
{
status
}
)
;
}
}
)
;
