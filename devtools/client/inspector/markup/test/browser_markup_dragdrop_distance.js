"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
doc_markup_dragdrop
.
html
"
;
const
TEST_NODE
=
"
#
test
"
;
const
MIN_DISTANCE
=
10
;
add_task
(
function
*
(
)
{
let
{
inspector
}
=
yield
openInspectorForURL
(
TEST_URL
)
;
info
(
"
Drag
the
test
node
by
half
of
the
minimum
distance
"
)
;
yield
simulateNodeDrag
(
inspector
TEST_NODE
0
MIN_DISTANCE
/
2
)
;
yield
checkIsDragging
(
inspector
TEST_NODE
false
)
;
info
(
"
Drag
the
test
node
by
exactly
the
minimum
distance
"
)
;
yield
simulateNodeDrag
(
inspector
TEST_NODE
0
MIN_DISTANCE
)
;
yield
checkIsDragging
(
inspector
TEST_NODE
true
)
;
inspector
.
markup
.
cancelDragging
(
)
;
info
(
"
Drag
the
test
node
by
more
than
the
minimum
distance
"
)
;
yield
simulateNodeDrag
(
inspector
TEST_NODE
0
MIN_DISTANCE
*
2
)
;
yield
checkIsDragging
(
inspector
TEST_NODE
true
)
;
inspector
.
markup
.
cancelDragging
(
)
;
info
(
"
Drag
the
test
node
by
minus
the
minimum
distance
"
)
;
yield
simulateNodeDrag
(
inspector
TEST_NODE
0
MIN_DISTANCE
*
-
1
)
;
yield
checkIsDragging
(
inspector
TEST_NODE
true
)
;
inspector
.
markup
.
cancelDragging
(
)
;
}
)
;
function
*
checkIsDragging
(
inspector
selector
isDragging
)
{
let
container
=
yield
getContainerForSelector
(
selector
inspector
)
;
if
(
isDragging
)
{
ok
(
container
.
isDragging
"
The
container
is
being
dragged
"
)
;
ok
(
inspector
.
markup
.
isDragging
"
And
the
markup
-
view
knows
it
"
)
;
}
else
{
ok
(
!
container
.
isDragging
"
The
container
hasn
'
t
been
marked
as
dragging
"
)
;
ok
(
!
inspector
.
markup
.
isDragging
"
And
the
markup
-
view
either
"
)
;
}
}
