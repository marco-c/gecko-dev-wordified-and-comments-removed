"
use
strict
"
;
loadHelperScript
(
"
helper_diff
.
js
"
)
;
function
*
runEventPopupTests
(
url
tests
)
{
let
{
inspector
testActor
}
=
yield
openInspectorForURL
(
url
)
;
yield
inspector
.
markup
.
expandAll
(
)
;
for
(
let
test
of
tests
)
{
yield
checkEventsForNode
(
test
inspector
testActor
)
;
}
yield
promiseNextTick
(
)
;
}
function
*
checkEventsForNode
(
test
inspector
testActor
)
{
let
{
selector
expected
beforeTest
isSourceMapped
}
=
test
;
let
container
=
yield
getContainerForSelector
(
selector
inspector
)
;
if
(
typeof
beforeTest
=
=
=
"
function
"
)
{
yield
beforeTest
(
inspector
testActor
)
;
}
let
evHolder
=
container
.
elt
.
querySelector
(
"
.
markupview
-
events
"
)
;
if
(
expected
.
length
=
=
=
0
)
{
is
(
evHolder
.
style
.
display
"
none
"
"
event
bubble
should
be
hidden
"
)
;
return
;
}
let
tooltip
=
inspector
.
markup
.
eventDetailsTooltip
;
yield
selectNode
(
selector
inspector
)
;
let
sourceMapPromise
=
null
;
if
(
isSourceMapped
)
{
sourceMapPromise
=
tooltip
.
once
(
"
event
-
tooltip
-
source
-
map
-
ready
"
)
;
}
info
(
"
Clicking
evHolder
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
evHolder
{
}
inspector
.
markup
.
doc
.
defaultView
)
;
yield
tooltip
.
once
(
"
shown
"
)
;
info
(
"
tooltip
shown
"
)
;
if
(
isSourceMapped
)
{
info
(
"
Waiting
for
source
map
to
be
applied
"
)
;
yield
sourceMapPromise
;
}
let
headers
=
tooltip
.
panel
.
querySelectorAll
(
"
.
event
-
header
"
)
;
let
nodeFront
=
container
.
node
;
let
cssSelector
=
nodeFront
.
nodeName
+
"
#
"
+
nodeFront
.
id
;
for
(
let
i
=
0
;
i
<
headers
.
length
;
i
+
+
)
{
info
(
"
Processing
header
[
"
+
i
+
"
]
for
"
+
cssSelector
)
;
let
header
=
headers
[
i
]
;
let
type
=
header
.
querySelector
(
"
.
event
-
tooltip
-
event
-
type
"
)
;
let
filename
=
header
.
querySelector
(
"
.
event
-
tooltip
-
filename
"
)
;
let
attributes
=
header
.
querySelectorAll
(
"
.
event
-
tooltip
-
attributes
"
)
;
let
contentBox
=
header
.
nextElementSibling
;
info
(
"
Looking
for
"
+
type
.
textContent
)
;
is
(
type
.
textContent
expected
[
i
]
.
type
"
type
matches
for
"
+
cssSelector
)
;
is
(
filename
.
textContent
expected
[
i
]
.
filename
"
filename
matches
for
"
+
cssSelector
)
;
is
(
attributes
.
length
expected
[
i
]
.
attributes
.
length
"
we
have
the
correct
number
of
attributes
"
)
;
for
(
let
j
=
0
;
j
<
expected
[
i
]
.
attributes
.
length
;
j
+
+
)
{
is
(
attributes
[
j
]
.
textContent
expected
[
i
]
.
attributes
[
j
]
"
attribute
[
"
+
j
+
"
]
matches
for
"
+
cssSelector
)
;
}
header
.
scrollIntoView
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
header
{
}
type
.
ownerGlobal
)
;
yield
tooltip
.
once
(
"
event
-
tooltip
-
ready
"
)
;
let
editor
=
tooltip
.
eventTooltip
.
_eventEditors
.
get
(
contentBox
)
.
editor
;
testDiff
(
editor
.
getText
(
)
expected
[
i
]
.
handler
"
handler
matches
for
"
+
cssSelector
ok
)
;
}
tooltip
.
hide
(
)
;
}
function
testDiff
(
text1
text2
msg
)
{
let
out
=
"
"
;
if
(
text1
=
=
=
text2
)
{
ok
(
true
msg
)
;
return
;
}
let
result
=
textDiff
(
text1
text2
)
;
for
(
let
{
atom
operation
}
of
result
)
{
switch
(
operation
)
{
case
"
add
"
:
out
+
=
"
+
"
+
atom
+
"
\
n
"
;
break
;
case
"
delete
"
:
out
+
=
"
-
"
+
atom
+
"
\
n
"
;
break
;
case
"
none
"
:
out
+
=
"
"
+
atom
+
"
\
n
"
;
break
;
}
}
ok
(
false
msg
+
"
\
nDIFF
:
\
n
=
=
=
=
=
=
=
=
=
=
\
n
"
+
out
+
"
=
=
=
=
=
=
=
=
=
=
\
n
"
)
;
}
