"
use
strict
"
;
const
TEST_LIB
=
"
lib_jquery_1
.
3_min
.
js
"
;
const
TEST_URL
=
URL_ROOT_SSL
+
"
doc_markup_events_jquery
.
html
?
"
+
TEST_LIB
;
loadHelperScript
(
"
helper_events_test_runner
.
js
"
)
;
const
TEST_DATA
=
[
{
selector
:
"
html
"
expected
:
[
{
type
:
"
DOMContentLoaded
"
filename
:
URL_ROOT_SSL
+
TEST_LIB
+
"
:
19
:
18937
"
attributes
:
[
"
Bubbling
"
]
handler
:
function
(
)
{
document
.
removeEventListener
(
"
DOMContentLoaded
"
arguments
.
callee
false
)
;
n
.
ready
(
)
}
}
{
type
:
"
load
"
filename
:
TEST_URL
+
"
:
29
:
38
"
attributes
:
[
"
Bubbling
"
]
handler
:
getDocMarkupEventsJQueryLoadHandlerText
(
)
}
]
}
{
selector
:
"
#
testdiv
"
expected
:
[
{
type
:
"
click
"
filename
:
TEST_URL
+
"
:
36
:
43
"
attributes
:
[
"
jQuery
"
]
handler
:
function
divClick1
(
)
{
alert
(
7
)
;
}
}
{
type
:
"
click
"
filename
:
TEST_URL
+
"
:
37
:
43
"
attributes
:
[
"
jQuery
"
]
handler
:
function
divClick2
(
)
{
alert
(
8
)
;
}
}
{
type
:
"
keydown
"
filename
:
TEST_URL
+
"
:
38
:
44
"
attributes
:
[
"
jQuery
"
]
handler
:
function
divKeyDown
(
)
{
alert
(
9
)
;
}
}
]
}
{
selector
:
"
#
livediv
"
expected
:
[
{
type
:
"
dblclick
"
filename
:
TEST_URL
+
"
:
30
:
49
"
attributes
:
[
"
jQuery
"
"
Live
"
]
handler
:
function
(
)
{
return
E
.
apply
(
this
arguments
)
}
}
{
type
:
"
dragstart
"
filename
:
TEST_URL
+
"
:
31
:
50
"
attributes
:
[
"
jQuery
"
"
Live
"
]
handler
:
function
(
)
{
return
E
.
apply
(
this
arguments
)
}
}
]
}
]
;
add_task
(
async
function
(
)
{
await
runEventPopupTests
(
TEST_URL
TEST_DATA
)
;
}
)
;
