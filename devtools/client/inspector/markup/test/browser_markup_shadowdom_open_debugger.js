"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
shared
-
head
.
js
"
this
)
;
const
TEST_URL
=
data
:
text
/
html
;
charset
=
utf
-
8
+
encodeURIComponent
(
<
test
-
component
>
<
/
test
-
component
>
<
other
-
component
>
some
-
content
<
/
other
-
component
>
<
script
>
"
use
strict
"
;
window
.
attachTestComponent
=
function
(
)
{
customElements
.
define
(
"
test
-
component
"
class
extends
HTMLElement
{
constructor
(
)
{
super
(
)
;
let
shadowRoot
=
this
.
attachShadow
(
{
mode
:
"
open
"
}
)
;
shadowRoot
.
innerHTML
=
"
<
slot
>
some
default
content
<
/
slot
>
"
;
}
connectedCallback
(
)
{
}
disconnectedCallback
(
)
{
}
}
)
;
}
window
.
defineOtherComponent
=
function
(
)
{
customElements
.
define
(
'
other
-
component
'
class
extends
HTMLParagraphElement
{
constructor
(
)
{
super
(
)
;
}
}
{
extends
:
'
p
'
}
)
;
}
<
/
script
>
)
;
add_task
(
async
function
(
)
{
const
{
inspector
toolbox
}
=
await
openInspectorForURL
(
TEST_URL
)
;
await
runTest
(
inspector
toolbox
"
test
-
component
"
"
attachTestComponent
"
)
;
await
runTest
(
inspector
toolbox
"
other
-
component
"
"
defineOtherComponent
"
)
;
}
)
;
async
function
runTest
(
inspector
toolbox
selector
contentMethod
)
{
info
(
Select
<
{
selector
}
>
.
)
;
await
selectNode
(
selector
inspector
)
;
const
testFront
=
await
getNodeFront
(
selector
inspector
)
;
const
testContainer
=
inspector
.
markup
.
getContainer
(
testFront
)
;
let
customBadge
=
testContainer
.
elt
.
querySelector
(
"
.
inspector
-
badge
.
interactive
[
data
-
custom
]
"
)
;
ok
(
!
customBadge
"
[
custom
]
badge
is
hidden
"
)
;
let
menuItem
=
getMenuItem
(
"
node
-
menu
-
jumptodefinition
"
inspector
)
;
ok
(
!
menuItem
selector
+
"
:
The
menu
item
was
not
found
in
the
contextual
menu
"
)
;
info
(
"
Call
the
content
method
that
should
attach
a
custom
element
definition
"
)
;
const
mutated
=
waitForMutation
(
inspector
"
customElementDefined
"
)
;
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
{
contentMethod
}
]
function
(
args
)
{
content
.
wrappedJSObject
[
args
.
contentMethod
]
(
)
;
}
)
;
await
mutated
;
customBadge
=
testContainer
.
elt
.
querySelector
(
"
.
inspector
-
badge
.
interactive
[
data
-
custom
]
"
)
;
ok
(
customBadge
"
[
custom
]
badge
is
visible
"
)
;
ok
(
!
customBadge
.
hasAttribute
(
"
aria
-
pressed
"
)
"
[
custom
]
badge
is
not
a
toggle
button
"
)
;
info
(
"
Click
on
the
custom
badge
and
verify
that
the
debugger
opens
.
"
)
;
let
onDebuggerReady
=
toolbox
.
getPanelWhenReady
(
"
jsdebugger
"
)
;
customBadge
.
click
(
)
;
await
onDebuggerReady
;
const
debuggerContext
=
createDebuggerContext
(
toolbox
)
;
await
waitUntilDebuggerReady
(
debuggerContext
)
;
ok
(
true
"
The
debugger
was
opened
when
clicking
on
the
custom
badge
"
)
;
info
(
"
Switch
to
the
inspector
"
)
;
await
toolbox
.
selectTool
(
"
inspector
"
)
;
info
(
"
Press
the
Enter
key
and
verify
that
the
debugger
opens
.
"
)
;
customBadge
.
focus
(
)
;
onDebuggerReady
=
toolbox
.
getPanelWhenReady
(
"
jsdebugger
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
customBadge
.
ownerGlobal
)
;
await
onDebuggerReady
;
await
waitUntilDebuggerReady
(
debuggerContext
)
;
ok
(
true
"
The
debugger
was
opened
via
the
keyboard
"
)
;
info
(
"
Switch
to
the
inspector
"
)
;
await
toolbox
.
selectTool
(
"
inspector
"
)
;
menuItem
=
getMenuItem
(
"
node
-
menu
-
jumptodefinition
"
inspector
)
;
ok
(
menuItem
selector
+
"
:
The
menu
item
was
found
in
the
contextual
menu
"
)
;
ok
(
!
menuItem
.
disabled
selector
+
"
:
The
menu
item
is
not
disabled
"
)
;
info
(
"
Click
on
Jump
to
Definition
and
verify
that
the
debugger
opens
.
"
)
;
onDebuggerReady
=
toolbox
.
getPanelWhenReady
(
"
jsdebugger
"
)
;
menuItem
.
click
(
)
;
await
onDebuggerReady
;
await
waitUntilDebuggerReady
(
debuggerContext
)
;
ok
(
true
"
The
debugger
was
opened
via
the
context
menu
"
)
;
info
(
"
Switch
to
the
inspector
"
)
;
await
toolbox
.
selectTool
(
"
inspector
"
)
;
}
function
getMenuItem
(
id
inspector
)
{
const
allMenuItems
=
openContextMenuAndGetAllItems
(
inspector
)
;
return
allMenuItems
.
find
(
i
=
>
i
.
id
=
=
=
"
node
-
menu
-
jumptodefinition
"
)
;
}
async
function
waitUntilDebuggerReady
(
debuggerContext
)
{
info
(
"
Wait
until
source
is
loaded
in
the
debugger
"
)
;
await
waitForLoadedSource
(
debuggerContext
TEST_URL
)
;
}
