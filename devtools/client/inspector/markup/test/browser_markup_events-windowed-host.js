"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
doc_markup_events
-
overflow
.
html
"
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
host
"
)
;
}
)
;
add_task
(
async
function
(
)
{
let
{
inspector
toolbox
}
=
await
openInspectorForURL
(
TEST_URL
)
;
await
runTests
(
inspector
)
;
await
toolbox
.
switchHost
(
"
window
"
)
;
await
runTests
(
inspector
)
;
await
toolbox
.
switchHost
(
"
bottom
"
)
;
await
runTests
(
inspector
)
;
await
toolbox
.
destroy
(
)
;
}
)
;
async
function
runTests
(
inspector
)
{
let
markupContainer
=
await
getContainerForSelector
(
"
#
events
"
inspector
)
;
let
evHolder
=
markupContainer
.
elt
.
querySelector
(
"
.
markupview
-
events
"
)
;
let
tooltip
=
inspector
.
markup
.
eventDetailsTooltip
;
info
(
"
Clicking
to
open
event
tooltip
.
"
)
;
let
onInspectorUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
let
onTooltipShown
=
tooltip
.
once
(
"
shown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
evHolder
{
}
inspector
.
markup
.
doc
.
defaultView
)
;
await
onTooltipShown
;
await
onInspectorUpdated
;
ok
(
tooltip
.
isVisible
(
)
"
EventTooltip
visible
.
"
)
;
onInspectorUpdated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
let
onTooltipHidden
=
tooltip
.
once
(
"
hidden
"
)
;
info
(
"
Click
on
another
tag
to
hide
the
event
tooltip
"
)
;
let
h1
=
await
getContainerForSelector
(
"
h1
"
inspector
)
;
let
tag
=
h1
.
elt
.
querySelector
(
"
.
tag
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
tag
{
}
inspector
.
markup
.
doc
.
defaultView
)
;
await
onTooltipHidden
;
await
onInspectorUpdated
;
ok
(
!
tooltip
.
isVisible
(
)
"
EventTooltip
hidden
.
"
)
;
}
