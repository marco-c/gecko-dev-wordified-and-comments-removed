"
use
strict
"
;
function
runAddAttributesTests
(
tests
nodeOrSelector
inspector
)
{
info
(
"
Running
"
+
tests
.
length
+
"
add
-
attributes
tests
"
)
;
return
(
async
function
(
)
{
info
(
"
Selecting
the
test
node
"
)
;
await
selectNode
(
"
div
"
inspector
)
;
for
(
const
test
of
tests
)
{
await
runAddAttributesTest
(
test
"
div
"
inspector
)
;
}
}
)
(
)
;
}
async
function
runAddAttributesTest
(
test
selector
inspector
)
{
if
(
test
.
setUp
)
{
test
.
setUp
(
inspector
)
;
}
info
(
"
Starting
add
-
attribute
test
:
"
+
test
.
desc
)
;
await
addNewAttributes
(
selector
test
.
text
inspector
)
;
info
(
"
Assert
that
the
attribute
(
s
)
has
/
have
been
applied
correctly
"
)
;
await
assertAttributes
(
selector
test
.
expectedAttributes
)
;
if
(
test
.
validate
)
{
const
container
=
await
getContainerForSelector
(
selector
inspector
)
;
test
.
validate
(
container
inspector
)
;
}
info
(
"
Undo
the
change
"
)
;
await
undoChange
(
inspector
)
;
info
(
"
Assert
that
the
attribute
(
s
)
has
/
have
been
removed
correctly
"
)
;
await
assertAttributes
(
selector
{
}
)
;
if
(
test
.
tearDown
)
{
test
.
tearDown
(
inspector
)
;
}
}
function
runEditAttributesTests
(
tests
inspector
)
{
info
(
"
Running
"
+
tests
.
length
+
"
edit
-
attributes
tests
"
)
;
return
(
async
function
(
)
{
info
(
"
Expanding
all
nodes
in
the
markup
-
view
"
)
;
await
inspector
.
markup
.
expandAll
(
)
;
for
(
const
test
of
tests
)
{
await
runEditAttributesTest
(
test
inspector
)
;
}
}
)
(
)
;
}
async
function
runEditAttributesTest
(
test
inspector
)
{
info
(
"
Starting
edit
-
attribute
test
:
"
+
test
.
desc
)
;
info
(
"
Selecting
the
test
node
"
+
test
.
node
)
;
await
selectNode
(
test
.
node
inspector
)
;
info
(
"
Asserting
that
the
node
has
the
right
attributes
to
start
with
"
)
;
await
assertAttributes
(
test
.
node
test
.
originalAttributes
)
;
info
(
"
Editing
attribute
"
+
test
.
name
+
"
with
value
"
+
test
.
value
)
;
const
container
=
await
focusNode
(
test
.
node
inspector
)
;
ok
(
container
&
&
container
.
editor
"
The
markup
-
container
for
"
+
test
.
node
+
"
was
found
"
)
;
info
(
"
Listening
for
the
markupmutation
event
"
)
;
const
nodeMutated
=
inspector
.
once
(
"
markupmutation
"
)
;
const
attr
=
container
.
editor
.
attrElements
.
get
(
test
.
name
)
.
querySelector
(
"
.
editable
"
)
;
setEditableFieldValue
(
attr
test
.
value
inspector
)
;
await
nodeMutated
;
info
(
"
Asserting
the
new
attributes
after
edition
"
)
;
await
assertAttributes
(
test
.
node
test
.
expectedAttributes
)
;
info
(
"
Undo
the
change
and
assert
that
the
attributes
have
been
changed
back
"
)
;
await
undoChange
(
inspector
)
;
await
assertAttributes
(
test
.
node
test
.
originalAttributes
)
;
info
(
"
Redo
the
change
and
assert
that
the
attributes
have
been
changed
"
+
"
again
"
)
;
await
redoChange
(
inspector
)
;
await
assertAttributes
(
test
.
node
test
.
expectedAttributes
)
;
}
