"
use
strict
"
;
loadHelperScript
(
"
helper_markup_accessibility_navigation
.
js
"
)
;
const
TEST_URI
=
'
<
div
id
=
"
some
-
id
"
class
=
"
some
-
class
"
>
<
/
div
>
'
;
const
TESTS
=
[
{
desc
:
"
Select
header
container
"
focused
:
"
root
.
elt
"
activedescendant
:
"
div
.
tagLine
"
key
:
"
VK_DOWN
"
options
:
{
}
waitFor
:
"
inspector
-
updated
"
}
{
desc
:
"
Focus
on
header
tag
"
focused
:
"
div
.
focusableElms
.
0
"
activedescendant
:
"
div
.
tagLine
"
key
:
"
VK_RETURN
"
options
:
{
}
}
{
desc
:
"
Activate
header
tag
editor
"
focused
:
"
div
.
editor
.
tag
.
inplaceEditor
.
input
"
activedescendant
:
"
div
.
tagLine
"
key
:
"
VK_RETURN
"
options
:
{
}
}
{
desc
:
"
Activate
header
id
attribute
editor
"
focused
:
"
div
.
editor
.
attrList
.
children
.
0
.
children
.
1
.
inplaceEditor
.
input
"
activedescendant
:
"
div
.
tagLine
"
key
:
"
VK_TAB
"
options
:
{
}
}
{
desc
:
"
Deselect
text
in
header
id
attribute
editor
"
focused
:
"
div
.
editor
.
attrList
.
children
.
0
.
children
.
1
.
inplaceEditor
.
input
"
activedescendant
:
"
div
.
tagLine
"
key
:
"
VK_TAB
"
options
:
{
}
}
{
desc
:
"
Move
the
cursor
to
the
left
"
focused
:
"
div
.
editor
.
attrList
.
children
.
0
.
children
.
1
.
inplaceEditor
.
input
"
activedescendant
:
"
div
.
tagLine
"
key
:
"
VK_LEFT
"
options
:
{
}
}
{
desc
:
"
Modify
the
attribute
"
focused
:
"
div
.
editor
.
attrList
.
children
.
0
.
children
.
1
.
inplaceEditor
.
input
"
activedescendant
:
"
div
.
tagLine
"
key
:
"
A
"
options
:
{
}
}
{
desc
:
"
Commit
the
attribute
change
"
focused
:
"
div
.
focusableElms
.
1
"
activedescendant
:
"
div
.
tagLine
"
key
:
"
VK_RETURN
"
options
:
{
}
waitFor
:
"
inspector
-
updated
"
}
{
desc
:
"
Tab
and
focus
on
header
class
attribute
"
focused
:
"
div
.
focusableElms
.
2
"
activedescendant
:
"
div
.
tagLine
"
key
:
"
VK_TAB
"
options
:
{
}
}
{
desc
:
"
Tab
and
focus
on
header
new
attribute
node
"
focused
:
"
div
.
focusableElms
.
3
"
activedescendant
:
"
div
.
tagLine
"
key
:
"
VK_TAB
"
options
:
{
}
}
]
;
let
elms
=
{
}
;
add_task
(
async
function
(
)
{
const
url
=
data
:
text
/
html
;
charset
=
utf
-
8
{
TEST_URI
}
;
const
{
inspector
}
=
await
openInspectorForURL
(
url
)
;
elms
.
docBody
=
inspector
.
markup
.
doc
.
body
;
elms
.
root
=
inspector
.
markup
.
getContainer
(
inspector
.
markup
.
_rootNode
)
;
elms
.
div
=
await
getContainerForSelector
(
"
div
"
inspector
)
;
elms
.
body
=
await
getContainerForSelector
(
"
body
"
inspector
)
;
testNavigationState
(
inspector
elms
elms
.
docBody
elms
.
body
.
tagLine
)
;
elms
.
root
.
elt
.
focus
(
)
;
for
(
const
testData
of
TESTS
)
{
await
runAccessibilityNavigationTest
(
inspector
elms
testData
)
;
}
elms
=
null
;
}
)
;
