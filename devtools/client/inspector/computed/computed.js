"
use
strict
"
;
const
flags
=
require
(
"
resource
:
/
/
devtools
/
shared
/
flags
.
js
"
)
;
const
ToolDefinitions
=
require
(
"
resource
:
/
/
devtools
/
client
/
definitions
.
js
"
)
.
Tools
;
const
CssLogic
=
require
(
"
resource
:
/
/
devtools
/
shared
/
inspector
/
css
-
logic
.
js
"
)
;
const
{
style
:
{
ELEMENT_STYLE
}
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
constants
.
js
"
)
;
const
OutputParser
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
output
-
parser
.
js
"
)
;
const
{
PrefObserver
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
prefs
.
js
"
)
;
const
{
createChild
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
shared
/
utils
.
js
"
)
;
const
{
VIEW_NODE_SELECTOR_TYPE
VIEW_NODE_PROPERTY_TYPE
VIEW_NODE_VALUE_TYPE
VIEW_NODE_IMAGE_URL_TYPE
VIEW_NODE_FONT_TYPE
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
shared
/
node
-
types
.
js
"
)
;
const
TooltipsOverlay
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
shared
/
tooltips
-
overlay
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
StyleInspectorMenu
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
shared
/
style
-
inspector
-
menu
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
KeyShortcuts
"
"
resource
:
/
/
devtools
/
client
/
shared
/
key
-
shortcuts
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
clipboardHelper
"
"
resource
:
/
/
devtools
/
shared
/
platform
/
clipboard
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
openContentLink
"
"
resource
:
/
/
devtools
/
client
/
shared
/
link
.
js
"
true
)
;
const
STYLE_INSPECTOR_PROPERTIES
=
"
devtools
/
shared
/
locales
/
styleinspector
.
properties
"
;
const
{
LocalizationHelper
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
l10n
.
js
"
)
;
const
STYLE_INSPECTOR_L10N
=
new
LocalizationHelper
(
STYLE_INSPECTOR_PROPERTIES
)
;
const
FILTER_CHANGED_TIMEOUT
=
150
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
function
UpdateProcess
(
win
array
options
)
{
this
.
win
=
win
;
this
.
index
=
0
;
this
.
array
=
array
;
this
.
onItem
=
options
.
onItem
|
|
function
(
)
{
}
;
this
.
onBatch
=
options
.
onBatch
|
|
function
(
)
{
}
;
this
.
onDone
=
options
.
onDone
|
|
function
(
)
{
}
;
this
.
onCancel
=
options
.
onCancel
|
|
function
(
)
{
}
;
this
.
threshold
=
options
.
threshold
|
|
45
;
this
.
canceled
=
false
;
}
UpdateProcess
.
prototype
=
{
ERROR_ITERATION_DONE
:
new
Error
(
"
UpdateProcess
iteration
done
"
)
schedule
(
)
{
if
(
this
.
canceled
)
{
return
;
}
this
.
_timeout
=
setTimeout
(
this
.
_timeoutHandler
.
bind
(
this
)
0
)
;
}
cancel
(
)
{
if
(
this
.
_timeout
)
{
clearTimeout
(
this
.
_timeout
)
;
this
.
_timeout
=
0
;
}
this
.
canceled
=
true
;
this
.
onCancel
(
)
;
}
_timeoutHandler
(
)
{
this
.
_timeout
=
null
;
try
{
this
.
_runBatch
(
)
;
this
.
schedule
(
)
;
}
catch
(
e
)
{
if
(
e
=
=
=
this
.
ERROR_ITERATION_DONE
)
{
this
.
onBatch
(
)
;
this
.
onDone
(
)
;
return
;
}
console
.
error
(
e
)
;
throw
e
;
}
}
_runBatch
(
)
{
const
time
=
Date
.
now
(
)
;
while
(
!
this
.
canceled
)
{
const
next
=
this
.
_next
(
)
;
this
.
onItem
(
next
)
;
if
(
Date
.
now
(
)
-
time
>
this
.
threshold
)
{
this
.
onBatch
(
)
;
return
;
}
}
}
_next
(
)
{
if
(
this
.
index
<
this
.
array
.
length
)
{
return
this
.
array
[
this
.
index
+
+
]
;
}
throw
this
.
ERROR_ITERATION_DONE
;
}
}
;
function
CssComputedView
(
inspector
document
)
{
this
.
inspector
=
inspector
;
this
.
styleDocument
=
document
;
this
.
styleWindow
=
this
.
styleDocument
.
defaultView
;
this
.
propertyViews
=
[
]
;
this
.
_outputParser
=
new
OutputParser
(
document
inspector
.
cssProperties
)
;
this
.
focusWindow
=
this
.
focusWindow
.
bind
(
this
)
;
this
.
_onClearSearch
=
this
.
_onClearSearch
.
bind
(
this
)
;
this
.
_onClick
=
this
.
_onClick
.
bind
(
this
)
;
this
.
_onContextMenu
=
this
.
_onContextMenu
.
bind
(
this
)
;
this
.
_onCopy
=
this
.
_onCopy
.
bind
(
this
)
;
this
.
_onFilterStyles
=
this
.
_onFilterStyles
.
bind
(
this
)
;
this
.
_onIncludeBrowserStyles
=
this
.
_onIncludeBrowserStyles
.
bind
(
this
)
;
this
.
refreshPanel
=
this
.
refreshPanel
.
bind
(
this
)
;
const
doc
=
this
.
styleDocument
;
this
.
element
=
doc
.
getElementById
(
"
computed
-
property
-
container
"
)
;
this
.
searchField
=
doc
.
getElementById
(
"
computed
-
searchbox
"
)
;
this
.
searchClearButton
=
doc
.
getElementById
(
"
computed
-
searchinput
-
clear
"
)
;
this
.
includeBrowserStylesCheckbox
=
doc
.
getElementById
(
"
browser
-
style
-
checkbox
"
)
;
this
.
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
styleWindow
}
)
;
this
.
_onShortcut
=
this
.
_onShortcut
.
bind
(
this
)
;
this
.
shortcuts
.
on
(
"
CmdOrCtrl
+
F
"
event
=
>
this
.
_onShortcut
(
"
CmdOrCtrl
+
F
"
event
)
)
;
this
.
shortcuts
.
on
(
"
Escape
"
event
=
>
this
.
_onShortcut
(
"
Escape
"
event
)
)
;
this
.
styleDocument
.
addEventListener
(
"
copy
"
this
.
_onCopy
)
;
this
.
styleDocument
.
addEventListener
(
"
mousedown
"
this
.
focusWindow
)
;
this
.
element
.
addEventListener
(
"
click
"
this
.
_onClick
)
;
this
.
element
.
addEventListener
(
"
contextmenu
"
this
.
_onContextMenu
)
;
this
.
searchField
.
addEventListener
(
"
input
"
this
.
_onFilterStyles
)
;
this
.
searchClearButton
.
addEventListener
(
"
click
"
this
.
_onClearSearch
)
;
this
.
includeBrowserStylesCheckbox
.
addEventListener
(
"
input
"
this
.
_onIncludeBrowserStyles
)
;
if
(
flags
.
testing
)
{
this
.
highlighters
.
addToView
(
this
)
;
}
else
{
this
.
element
.
addEventListener
(
"
mousemove
"
(
)
=
>
{
this
.
highlighters
.
addToView
(
this
)
;
}
{
once
:
true
}
)
;
}
if
(
!
this
.
inspector
.
is3PaneModeEnabled
)
{
this
.
inspector
.
on
(
"
ruleview
-
added
"
(
)
=
>
{
this
.
ruleView
.
on
(
"
ruleview
-
changed
"
this
.
refreshPanel
)
;
}
{
once
:
true
}
)
;
}
if
(
this
.
ruleView
)
{
this
.
ruleView
.
on
(
"
ruleview
-
changed
"
this
.
refreshPanel
)
;
}
this
.
searchClearButton
.
hidden
=
true
;
this
.
noResults
=
this
.
styleDocument
.
getElementById
(
"
computed
-
no
-
results
"
)
;
this
.
_handlePrefChange
=
this
.
_handlePrefChange
.
bind
(
this
)
;
this
.
_prefObserver
=
new
PrefObserver
(
"
devtools
.
"
)
;
this
.
_prefObserver
.
on
(
"
devtools
.
defaultColorUnit
"
this
.
_handlePrefChange
)
;
this
.
_viewedElement
=
null
;
this
.
viewedElementPageStyle
=
null
;
this
.
createStyleViews
(
)
;
this
.
tooltips
=
new
TooltipsOverlay
(
this
)
;
}
CssComputedView
.
l10n
=
function
(
name
)
{
try
{
return
STYLE_INSPECTOR_L10N
.
getStr
(
name
)
;
}
catch
(
ex
)
{
console
.
log
(
"
Error
reading
'
"
+
name
+
"
'
"
)
;
throw
new
Error
(
"
l10n
error
with
"
+
name
)
;
}
}
;
CssComputedView
.
prototype
=
{
_matchedProperties
:
null
_filterChangedTimeout
:
null
_panelRefreshTimeout
:
null
_darkStripe
:
true
numVisibleProperties
:
0
get
contextMenu
(
)
{
if
(
!
this
.
_contextMenu
)
{
this
.
_contextMenu
=
new
StyleInspectorMenu
(
this
)
;
}
return
this
.
_contextMenu
;
}
get
highlighters
(
)
{
if
(
!
this
.
_highlighters
)
{
this
.
_highlighters
=
this
.
inspector
.
highlighters
;
}
return
this
.
_highlighters
;
}
get
includeBrowserStyles
(
)
{
return
this
.
includeBrowserStylesCheckbox
.
checked
;
}
get
ruleView
(
)
{
return
(
this
.
inspector
.
hasPanel
(
"
ruleview
"
)
&
&
this
.
inspector
.
getPanel
(
"
ruleview
"
)
.
view
)
;
}
_handlePrefChange
(
)
{
if
(
this
.
_computed
)
{
this
.
refreshPanel
(
)
;
}
}
selectElement
(
element
)
{
if
(
!
element
)
{
if
(
this
.
viewedElementPageStyle
)
{
this
.
viewedElementPageStyle
.
off
(
"
stylesheet
-
updated
"
this
.
refreshPanel
)
;
this
.
viewedElementPageStyle
=
null
;
}
this
.
_viewedElement
=
null
;
this
.
noResults
.
hidden
=
false
;
if
(
this
.
_refreshProcess
)
{
this
.
_refreshProcess
.
cancel
(
)
;
}
for
(
const
propView
of
this
.
propertyViews
)
{
propView
.
refresh
(
)
;
}
return
Promise
.
resolve
(
undefined
)
;
}
if
(
element
=
=
=
this
.
_viewedElement
)
{
return
Promise
.
resolve
(
undefined
)
;
}
if
(
this
.
viewedElementPageStyle
)
{
this
.
viewedElementPageStyle
.
off
(
"
stylesheet
-
updated
"
this
.
refreshPanel
)
;
}
this
.
viewedElementPageStyle
=
element
.
inspectorFront
.
pageStyle
;
this
.
viewedElementPageStyle
.
on
(
"
stylesheet
-
updated
"
this
.
refreshPanel
)
;
this
.
_viewedElement
=
element
;
this
.
refreshSourceFilter
(
)
;
return
this
.
refreshPanel
(
)
;
}
getNodeInfo
(
node
)
{
if
(
!
node
)
{
return
null
;
}
const
classes
=
node
.
classList
;
if
(
classes
.
contains
(
"
matched
"
)
|
|
classes
.
contains
(
"
bestmatch
"
)
|
|
classes
.
contains
(
"
parentmatch
"
)
)
{
let
selectorText
=
"
"
;
for
(
const
child
of
node
.
childNodes
[
1
]
.
childNodes
)
{
if
(
child
.
nodeType
=
=
=
node
.
TEXT_NODE
)
{
selectorText
+
=
child
.
textContent
;
}
}
return
{
type
:
VIEW_NODE_SELECTOR_TYPE
value
:
selectorText
.
trim
(
)
}
;
}
let
propertyView
;
let
propertyContent
;
let
parent
=
node
;
while
(
parent
.
parentNode
)
{
if
(
parent
.
classList
.
contains
(
"
computed
-
property
-
view
"
)
)
{
propertyView
=
parent
;
break
;
}
if
(
parent
.
classList
.
contains
(
"
computed
-
property
-
content
"
)
)
{
propertyContent
=
parent
;
break
;
}
parent
=
parent
.
parentNode
;
}
if
(
!
propertyView
&
&
!
propertyContent
)
{
return
null
;
}
let
value
type
;
const
isHref
=
classes
.
contains
(
"
theme
-
link
"
)
&
&
!
classes
.
contains
(
"
computed
-
link
"
)
;
if
(
propertyView
&
&
(
classes
.
contains
(
"
computed
-
property
-
name
"
)
|
|
classes
.
contains
(
"
computed
-
property
-
value
"
)
|
|
isHref
)
)
{
value
=
{
property
:
parent
.
querySelector
(
"
.
computed
-
property
-
name
"
)
.
firstChild
.
textContent
value
:
parent
.
querySelector
(
"
.
computed
-
property
-
value
"
)
.
textContent
}
;
}
if
(
propertyContent
&
&
(
classes
.
contains
(
"
computed
-
other
-
property
-
value
"
)
|
|
isHref
)
)
{
const
view
=
propertyContent
.
previousSibling
;
value
=
{
property
:
view
.
querySelector
(
"
.
computed
-
property
-
name
"
)
.
firstChild
.
textContent
value
:
node
.
textContent
}
;
}
if
(
classes
.
contains
(
"
computed
-
font
-
family
"
)
)
{
if
(
propertyView
)
{
value
=
{
property
:
parent
.
querySelector
(
"
.
computed
-
property
-
name
"
)
.
firstChild
.
textContent
value
:
node
.
parentNode
.
textContent
}
;
}
else
if
(
propertyContent
)
{
const
view
=
propertyContent
.
previousSibling
;
value
=
{
property
:
view
.
querySelector
(
"
.
computed
-
property
-
name
"
)
.
firstChild
.
textContent
value
:
node
.
parentNode
.
textContent
}
;
}
else
{
return
null
;
}
}
if
(
classes
.
contains
(
"
computed
-
property
-
name
"
)
)
{
type
=
VIEW_NODE_PROPERTY_TYPE
;
}
else
if
(
classes
.
contains
(
"
computed
-
property
-
value
"
)
|
|
classes
.
contains
(
"
computed
-
other
-
property
-
value
"
)
)
{
type
=
VIEW_NODE_VALUE_TYPE
;
}
else
if
(
classes
.
contains
(
"
computed
-
font
-
family
"
)
)
{
type
=
VIEW_NODE_FONT_TYPE
;
}
else
if
(
isHref
)
{
type
=
VIEW_NODE_IMAGE_URL_TYPE
;
value
.
url
=
node
.
href
;
}
else
{
return
null
;
}
return
{
view
:
"
computed
"
type
value
}
;
}
_createPropertyViews
(
)
{
if
(
this
.
_createViewsPromise
)
{
return
this
.
_createViewsPromise
;
}
this
.
refreshSourceFilter
(
)
;
this
.
numVisibleProperties
=
0
;
const
fragment
=
this
.
styleDocument
.
createDocumentFragment
(
)
;
this
.
_createViewsPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
_createViewsProcess
=
new
UpdateProcess
(
this
.
styleWindow
CssComputedView
.
propertyNames
{
onItem
:
propertyName
=
>
{
const
propView
=
new
PropertyView
(
this
propertyName
)
;
fragment
.
appendChild
(
propView
.
buildMain
(
)
)
;
fragment
.
appendChild
(
propView
.
buildSelectorContainer
(
)
)
;
if
(
propView
.
visible
)
{
this
.
numVisibleProperties
+
+
;
}
this
.
propertyViews
.
push
(
propView
)
;
}
onCancel
:
(
)
=
>
{
reject
(
"
_createPropertyViews
cancelled
"
)
;
}
onDone
:
(
)
=
>
{
this
.
element
.
appendChild
(
fragment
)
;
this
.
noResults
.
hidden
=
this
.
numVisibleProperties
>
0
;
resolve
(
undefined
)
;
}
}
)
;
}
)
;
this
.
_createViewsProcess
.
schedule
(
)
;
return
this
.
_createViewsPromise
;
}
isPanelVisible
(
)
{
return
(
this
.
inspector
.
toolbox
&
&
this
.
inspector
.
sidebar
&
&
this
.
inspector
.
toolbox
.
currentToolId
=
=
=
"
inspector
"
&
&
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
"
computedview
"
)
;
}
refreshPanel
(
)
{
if
(
!
this
.
_viewedElement
|
|
!
this
.
isPanelVisible
(
)
)
{
return
Promise
.
resolve
(
)
;
}
const
viewedElement
=
this
.
_viewedElement
;
return
Promise
.
all
(
[
this
.
_createPropertyViews
(
)
this
.
viewedElementPageStyle
.
getComputed
(
this
.
_viewedElement
{
filter
:
this
.
_sourceFilter
onlyMatched
:
!
this
.
includeBrowserStyles
markMatched
:
true
}
)
]
)
.
then
(
(
[
computed
]
)
=
>
{
if
(
viewedElement
!
=
=
this
.
_viewedElement
)
{
return
Promise
.
resolve
(
)
;
}
this
.
_matchedProperties
=
new
Set
(
)
;
for
(
const
name
in
computed
)
{
if
(
computed
[
name
]
.
matched
)
{
this
.
_matchedProperties
.
add
(
name
)
;
}
}
this
.
_computed
=
computed
;
if
(
this
.
_refreshProcess
)
{
this
.
_refreshProcess
.
cancel
(
)
;
}
this
.
noResults
.
hidden
=
true
;
this
.
numVisibleProperties
=
0
;
this
.
_darkStripe
=
true
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
_refreshProcess
=
new
UpdateProcess
(
this
.
styleWindow
this
.
propertyViews
{
onItem
:
propView
=
>
{
propView
.
refresh
(
)
;
}
onCancel
:
(
)
=
>
{
reject
(
"
_refreshProcess
of
computed
view
cancelled
"
)
;
}
onDone
:
(
)
=
>
{
this
.
_refreshProcess
=
null
;
this
.
noResults
.
hidden
=
this
.
numVisibleProperties
>
0
;
const
searchBox
=
this
.
searchField
.
parentNode
;
searchBox
.
classList
.
toggle
(
"
devtools
-
searchbox
-
no
-
match
"
!
!
this
.
searchField
.
value
.
length
&
&
!
this
.
numVisibleProperties
)
;
this
.
inspector
.
emit
(
"
computed
-
view
-
refreshed
"
)
;
resolve
(
undefined
)
;
}
}
)
;
this
.
_refreshProcess
.
schedule
(
)
;
}
)
;
}
)
.
catch
(
console
.
error
)
;
}
_onShortcut
(
name
event
)
{
if
(
!
event
.
target
.
closest
(
"
#
sidebar
-
panel
-
computedview
"
)
)
{
return
;
}
if
(
name
=
=
=
"
Escape
"
&
&
event
.
target
=
=
=
this
.
searchField
&
&
this
.
_onClearSearch
(
)
)
{
event
.
preventDefault
(
)
;
event
.
stopPropagation
(
)
;
}
else
if
(
name
=
=
=
"
CmdOrCtrl
+
F
"
)
{
this
.
searchField
.
focus
(
)
;
event
.
preventDefault
(
)
;
}
}
setFilterStyles
(
value
=
"
"
)
{
this
.
searchField
.
value
=
value
;
this
.
searchField
.
focus
(
)
;
this
.
_onFilterStyles
(
)
;
}
_onFilterStyles
(
)
{
if
(
this
.
_filterChangedTimeout
)
{
clearTimeout
(
this
.
_filterChangedTimeout
)
;
}
const
filterTimeout
=
this
.
searchField
.
value
.
length
?
FILTER_CHANGED_TIMEOUT
:
0
;
this
.
searchClearButton
.
hidden
=
this
.
searchField
.
value
.
length
=
=
=
0
;
this
.
_filterChangedTimeout
=
setTimeout
(
(
)
=
>
{
this
.
refreshPanel
(
)
;
this
.
_filterChangeTimeout
=
null
;
}
filterTimeout
)
;
}
_onClearSearch
(
)
{
if
(
this
.
searchField
.
value
)
{
this
.
setFilterStyles
(
"
"
)
;
return
true
;
}
return
false
;
}
_onIncludeBrowserStyles
(
)
{
this
.
refreshSourceFilter
(
)
;
this
.
refreshPanel
(
)
;
}
refreshSourceFilter
(
)
{
this
.
_matchedProperties
=
null
;
this
.
_sourceFilter
=
this
.
includeBrowserStyles
?
CssLogic
.
FILTER
.
UA
:
CssLogic
.
FILTER
.
USER
;
}
createStyleViews
(
)
{
if
(
CssComputedView
.
propertyNames
)
{
return
;
}
CssComputedView
.
propertyNames
=
[
]
;
const
styles
=
this
.
styleWindow
.
getComputedStyle
(
this
.
styleDocument
.
documentElement
)
;
const
mozProps
=
[
]
;
for
(
let
i
=
0
numStyles
=
styles
.
length
;
i
<
numStyles
;
i
+
+
)
{
const
prop
=
styles
.
item
(
i
)
;
if
(
prop
.
startsWith
(
"
-
-
"
)
)
{
continue
;
}
else
if
(
prop
.
startsWith
(
"
-
"
)
)
{
mozProps
.
push
(
prop
)
;
}
else
{
CssComputedView
.
propertyNames
.
push
(
prop
)
;
}
}
CssComputedView
.
propertyNames
.
sort
(
)
;
CssComputedView
.
propertyNames
.
push
.
apply
(
CssComputedView
.
propertyNames
mozProps
.
sort
(
)
)
;
this
.
_createPropertyViews
(
)
.
catch
(
e
=
>
{
if
(
!
this
.
_isDestroyed
)
{
console
.
warn
(
"
The
creation
of
property
views
was
cancelled
because
"
+
"
the
computed
-
view
was
destroyed
before
it
was
done
creating
views
"
)
;
}
else
{
console
.
error
(
e
)
;
}
}
)
;
}
get
matchedProperties
(
)
{
return
this
.
_matchedProperties
|
|
new
Set
(
)
;
}
focusWindow
(
)
{
this
.
styleWindow
.
focus
(
)
;
}
_onContextMenu
(
event
)
{
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
this
.
contextMenu
.
show
(
event
)
;
}
_onClick
(
event
)
{
const
target
=
event
.
target
;
if
(
target
.
nodeName
=
=
=
"
a
"
)
{
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
openContentLink
(
target
.
href
)
;
}
}
_onCopy
(
event
)
{
const
win
=
this
.
styleWindow
;
const
text
=
win
.
getSelection
(
)
.
toString
(
)
.
trim
(
)
;
if
(
text
!
=
=
"
"
)
{
this
.
copySelection
(
)
;
event
.
preventDefault
(
)
;
}
}
copySelection
(
)
{
try
{
const
win
=
this
.
styleWindow
;
const
text
=
win
.
getSelection
(
)
.
toString
(
)
.
trim
(
)
;
clipboardHelper
.
copyString
(
text
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
destroy
(
)
{
this
.
_viewedElement
=
null
;
if
(
this
.
viewedElementPageStyle
)
{
this
.
viewedElementPageStyle
.
off
(
"
stylesheet
-
updated
"
this
.
refreshPanel
)
;
this
.
viewedElementPageStyle
=
null
;
}
this
.
_outputParser
=
null
;
this
.
_prefObserver
.
off
(
"
devtools
.
defaultColorUnit
"
this
.
_handlePrefChange
)
;
this
.
_prefObserver
.
destroy
(
)
;
if
(
this
.
_createViewsProcess
)
{
this
.
_createViewsProcess
.
cancel
(
)
;
}
if
(
this
.
_refreshProcess
)
{
this
.
_refreshProcess
.
cancel
(
)
;
}
if
(
this
.
_contextMenu
)
{
this
.
_contextMenu
.
destroy
(
)
;
this
.
_contextMenu
=
null
;
}
if
(
this
.
_highlighters
)
{
this
.
_highlighters
.
removeFromView
(
this
)
;
this
.
_highlighters
=
null
;
}
this
.
tooltips
.
destroy
(
)
;
this
.
element
.
removeEventListener
(
"
click
"
this
.
_onClick
)
;
this
.
element
.
removeEventListener
(
"
contextmenu
"
this
.
_onContextMenu
)
;
this
.
searchField
.
removeEventListener
(
"
input
"
this
.
_onFilterStyles
)
;
this
.
searchClearButton
.
removeEventListener
(
"
click
"
this
.
_onClearSearch
)
;
this
.
styleDocument
.
removeEventListener
(
"
copy
"
this
.
_onCopy
)
;
this
.
styleDocument
.
removeEventListener
(
"
mousedown
"
this
.
focusWindow
)
;
this
.
includeBrowserStylesCheckbox
.
removeEventListener
(
"
input
"
this
.
_onIncludeBrowserStyles
)
;
if
(
this
.
ruleView
)
{
this
.
ruleView
.
off
(
"
ruleview
-
changed
"
this
.
refreshPanel
)
;
}
this
.
element
=
null
;
this
.
searchField
=
null
;
this
.
searchClearButton
=
null
;
this
.
includeBrowserStylesCheckbox
=
null
;
for
(
const
propView
of
this
.
propertyViews
)
{
propView
.
destroy
(
)
;
}
this
.
propertyViews
=
null
;
this
.
inspector
=
null
;
this
.
styleDocument
=
null
;
this
.
styleWindow
=
null
;
this
.
_isDestroyed
=
true
;
}
}
;
function
PropertyInfo
(
tree
name
)
{
this
.
tree
=
tree
;
this
.
name
=
name
;
}
PropertyInfo
.
prototype
=
{
get
isSupported
(
)
{
return
this
.
tree
.
_computed
&
&
this
.
name
in
this
.
tree
.
_computed
;
}
get
value
(
)
{
if
(
this
.
isSupported
)
{
const
value
=
this
.
tree
.
_computed
[
this
.
name
]
.
value
;
return
value
;
}
return
null
;
}
}
;
function
PropertyView
(
tree
name
)
{
this
.
tree
=
tree
;
this
.
name
=
name
;
this
.
link
=
"
https
:
/
/
developer
.
mozilla
.
org
/
docs
/
Web
/
CSS
/
"
+
name
;
this
.
_propertyInfo
=
new
PropertyInfo
(
tree
name
)
;
}
PropertyView
.
prototype
=
{
element
:
null
propertyHeader
:
null
nameNode
:
null
valueNode
:
null
matchedExpanded
:
false
matchedSelectorsContainer
:
null
matchedExpander
:
null
_matchedSelectorViews
:
null
_prevViewedElement
:
null
get
value
(
)
{
return
this
.
propertyInfo
.
value
;
}
get
propertyInfo
(
)
{
return
this
.
_propertyInfo
;
}
get
hasMatchedSelectors
(
)
{
return
this
.
tree
.
matchedProperties
.
has
(
this
.
name
)
;
}
get
visible
(
)
{
if
(
!
this
.
tree
.
_viewedElement
)
{
return
false
;
}
if
(
!
this
.
tree
.
includeBrowserStyles
&
&
!
this
.
hasMatchedSelectors
)
{
return
false
;
}
const
searchTerm
=
this
.
tree
.
searchField
.
value
.
toLowerCase
(
)
;
const
isValidSearchTerm
=
!
!
searchTerm
.
trim
(
)
.
length
;
if
(
isValidSearchTerm
&
&
!
this
.
name
.
toLowerCase
(
)
.
includes
(
searchTerm
)
&
&
!
this
.
value
.
toLowerCase
(
)
.
includes
(
searchTerm
)
)
{
return
false
;
}
return
this
.
propertyInfo
.
isSupported
;
}
get
propertyHeaderClassName
(
)
{
if
(
this
.
visible
)
{
const
isDark
=
(
this
.
tree
.
_darkStripe
=
!
this
.
tree
.
_darkStripe
)
;
return
isDark
?
"
computed
-
property
-
view
row
-
striped
"
:
"
computed
-
property
-
view
"
;
}
return
"
computed
-
property
-
hidden
"
;
}
get
propertyContentClassName
(
)
{
if
(
this
.
visible
)
{
const
isDark
=
this
.
tree
.
_darkStripe
;
return
isDark
?
"
computed
-
property
-
content
row
-
striped
"
:
"
computed
-
property
-
content
"
;
}
return
"
computed
-
property
-
hidden
"
;
}
buildMain
(
)
{
const
doc
=
this
.
tree
.
styleDocument
;
this
.
onMatchedToggle
=
this
.
onMatchedToggle
.
bind
(
this
)
;
this
.
element
=
doc
.
createElementNS
(
HTML_NS
"
div
"
)
;
this
.
element
.
setAttribute
(
"
class
"
this
.
propertyHeaderClassName
)
;
this
.
element
.
addEventListener
(
"
dblclick
"
this
.
onMatchedToggle
)
;
this
.
element
.
setAttribute
(
"
tabindex
"
"
0
"
)
;
this
.
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
tree
.
styleWindow
target
:
this
.
element
}
)
;
this
.
shortcuts
.
on
(
"
F1
"
event
=
>
{
this
.
mdnLinkClick
(
event
)
;
event
.
preventDefault
(
)
;
event
.
stopPropagation
(
)
;
}
)
;
this
.
shortcuts
.
on
(
"
Return
"
this
.
onMatchedToggle
)
;
this
.
shortcuts
.
on
(
"
Space
"
this
.
onMatchedToggle
)
;
const
nameContainer
=
doc
.
createElementNS
(
HTML_NS
"
span
"
)
;
nameContainer
.
className
=
"
computed
-
property
-
name
-
container
"
;
this
.
element
.
appendChild
(
nameContainer
)
;
this
.
matchedExpander
=
doc
.
createElementNS
(
HTML_NS
"
div
"
)
;
this
.
matchedExpander
.
className
=
"
computed
-
expander
theme
-
twisty
"
;
this
.
matchedExpander
.
setAttribute
(
"
role
"
"
button
"
)
;
this
.
matchedExpander
.
setAttribute
(
"
aria
-
label
"
STYLE_INSPECTOR_L10N
.
getStr
(
"
rule
.
twistyExpand
.
label
"
)
)
;
this
.
matchedExpander
.
addEventListener
(
"
click
"
this
.
onMatchedToggle
)
;
nameContainer
.
appendChild
(
this
.
matchedExpander
)
;
this
.
nameNode
=
doc
.
createElementNS
(
HTML_NS
"
span
"
)
;
this
.
nameNode
.
classList
.
add
(
"
computed
-
property
-
name
"
"
theme
-
fg
-
color3
"
)
;
this
.
nameNode
.
setAttribute
(
"
role
"
"
heading
"
)
;
this
.
nameNode
.
setAttribute
(
"
tabindex
"
"
"
)
;
this
.
nameNode
.
setAttribute
(
"
dir
"
"
ltr
"
)
;
this
.
nameNode
.
textContent
=
this
.
nameNode
.
title
=
this
.
name
;
this
.
onFocus
=
(
)
=
>
this
.
element
.
focus
(
)
;
this
.
nameNode
.
addEventListener
(
"
click
"
this
.
onFocus
)
;
const
nameSeparator
=
doc
.
createElementNS
(
HTML_NS
"
span
"
)
;
nameSeparator
.
classList
.
add
(
"
visually
-
hidden
"
)
;
nameSeparator
.
textContent
=
"
:
"
;
this
.
nameNode
.
appendChild
(
nameSeparator
)
;
nameContainer
.
appendChild
(
this
.
nameNode
)
;
const
valueContainer
=
doc
.
createElementNS
(
HTML_NS
"
span
"
)
;
valueContainer
.
className
=
"
computed
-
property
-
value
-
container
"
;
this
.
element
.
appendChild
(
valueContainer
)
;
this
.
valueNode
=
doc
.
createElementNS
(
HTML_NS
"
span
"
)
;
this
.
valueNode
.
classList
.
add
(
"
computed
-
property
-
value
"
"
theme
-
fg
-
color1
"
)
;
this
.
valueNode
.
setAttribute
(
"
tabindex
"
"
"
)
;
this
.
valueNode
.
setAttribute
(
"
dir
"
"
ltr
"
)
;
this
.
valueNode
.
addEventListener
(
"
click
"
this
.
onFocus
)
;
const
valueSeparator
=
doc
.
createElementNS
(
HTML_NS
"
span
"
)
;
valueSeparator
.
classList
.
add
(
"
visually
-
hidden
"
)
;
valueSeparator
.
textContent
=
"
;
"
;
valueContainer
.
appendChild
(
this
.
valueNode
)
;
valueContainer
.
appendChild
(
valueSeparator
)
;
return
this
.
element
;
}
buildSelectorContainer
(
)
{
const
doc
=
this
.
tree
.
styleDocument
;
const
element
=
doc
.
createElementNS
(
HTML_NS
"
div
"
)
;
element
.
setAttribute
(
"
class
"
this
.
propertyContentClassName
)
;
this
.
matchedSelectorsContainer
=
doc
.
createElementNS
(
HTML_NS
"
div
"
)
;
this
.
matchedSelectorsContainer
.
classList
.
add
(
"
matchedselectors
"
)
;
element
.
appendChild
(
this
.
matchedSelectorsContainer
)
;
return
element
;
}
refresh
(
)
{
this
.
element
.
className
=
this
.
propertyHeaderClassName
;
this
.
element
.
nextElementSibling
.
className
=
this
.
propertyContentClassName
;
if
(
this
.
_prevViewedElement
!
=
=
this
.
tree
.
_viewedElement
)
{
this
.
_matchedSelectorViews
=
null
;
this
.
_prevViewedElement
=
this
.
tree
.
_viewedElement
;
}
if
(
!
this
.
tree
.
_viewedElement
|
|
!
this
.
visible
)
{
this
.
valueNode
.
textContent
=
this
.
valueNode
.
title
=
"
"
;
this
.
matchedSelectorsContainer
.
parentNode
.
hidden
=
true
;
this
.
matchedSelectorsContainer
.
textContent
=
"
"
;
this
.
matchedExpander
.
removeAttribute
(
"
open
"
)
;
this
.
matchedExpander
.
setAttribute
(
"
aria
-
label
"
STYLE_INSPECTOR_L10N
.
getStr
(
"
rule
.
twistyExpand
.
label
"
)
)
;
return
;
}
this
.
tree
.
numVisibleProperties
+
+
;
const
outputParser
=
this
.
tree
.
_outputParser
;
const
frag
=
outputParser
.
parseCssProperty
(
this
.
propertyInfo
.
name
this
.
propertyInfo
.
value
{
colorSwatchClass
:
"
computed
-
colorswatch
"
colorClass
:
"
computed
-
color
"
urlClass
:
"
theme
-
link
"
fontFamilyClass
:
"
computed
-
font
-
family
"
}
)
;
this
.
valueNode
.
innerHTML
=
"
"
;
this
.
valueNode
.
appendChild
(
frag
)
;
this
.
refreshMatchedSelectors
(
)
;
}
refreshMatchedSelectors
(
)
{
const
hasMatchedSelectors
=
this
.
hasMatchedSelectors
;
this
.
matchedSelectorsContainer
.
parentNode
.
hidden
=
!
hasMatchedSelectors
;
if
(
hasMatchedSelectors
)
{
this
.
matchedExpander
.
classList
.
add
(
"
computed
-
expandable
"
)
;
}
else
{
this
.
matchedExpander
.
classList
.
remove
(
"
computed
-
expandable
"
)
;
}
if
(
this
.
matchedExpanded
&
&
hasMatchedSelectors
)
{
return
this
.
tree
.
viewedElementPageStyle
.
getMatchedSelectors
(
this
.
tree
.
_viewedElement
this
.
name
)
.
then
(
matched
=
>
{
if
(
!
this
.
matchedExpanded
)
{
return
;
}
this
.
_matchedSelectorResponse
=
matched
;
this
.
_buildMatchedSelectors
(
)
;
this
.
matchedExpander
.
setAttribute
(
"
open
"
"
"
)
;
this
.
matchedExpander
.
setAttribute
(
"
aria
-
label
"
STYLE_INSPECTOR_L10N
.
getStr
(
"
rule
.
twistyCollapse
.
label
"
)
)
;
this
.
tree
.
inspector
.
emit
(
"
computed
-
view
-
property
-
expanded
"
)
;
}
)
.
catch
(
console
.
error
)
;
}
this
.
matchedSelectorsContainer
.
innerHTML
=
"
"
;
this
.
matchedExpander
.
removeAttribute
(
"
open
"
)
;
this
.
matchedExpander
.
setAttribute
(
"
aria
-
label
"
STYLE_INSPECTOR_L10N
.
getStr
(
"
rule
.
twistyExpand
.
label
"
)
)
;
this
.
tree
.
inspector
.
emit
(
"
computed
-
view
-
property
-
collapsed
"
)
;
return
Promise
.
resolve
(
undefined
)
;
}
get
matchedSelectors
(
)
{
return
this
.
_matchedSelectorResponse
;
}
_buildMatchedSelectors
(
)
{
const
frag
=
this
.
element
.
ownerDocument
.
createDocumentFragment
(
)
;
for
(
const
selector
of
this
.
matchedSelectorViews
)
{
const
p
=
createChild
(
frag
"
p
"
)
;
const
span
=
createChild
(
p
"
span
"
{
class
:
"
rule
-
link
"
}
)
;
const
link
=
createChild
(
span
"
a
"
{
target
:
"
_blank
"
class
:
"
computed
-
link
theme
-
link
"
title
:
selector
.
href
sourcelocation
:
selector
.
source
tabindex
:
"
0
"
textContent
:
selector
.
source
}
)
;
link
.
addEventListener
(
"
click
"
selector
.
openStyleEditor
)
;
const
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
tree
.
styleWindow
target
:
link
}
)
;
shortcuts
.
on
(
"
Return
"
(
)
=
>
selector
.
openStyleEditor
(
)
)
;
const
status
=
createChild
(
p
"
span
"
{
dir
:
"
ltr
"
class
:
"
rule
-
text
theme
-
fg
-
color3
"
+
selector
.
statusClass
title
:
selector
.
statusText
}
)
;
createChild
(
status
"
span
"
{
dir
:
"
ltr
"
class
:
"
visually
-
hidden
"
textContent
:
selector
.
statusText
+
"
"
}
)
;
createChild
(
status
"
div
"
{
class
:
"
fix
-
get
-
selection
"
textContent
:
selector
.
sourceText
}
)
;
const
valueDiv
=
createChild
(
status
"
div
"
{
class
:
"
fix
-
get
-
selection
computed
-
other
-
property
-
value
theme
-
fg
-
color1
"
}
)
;
valueDiv
.
appendChild
(
selector
.
outputFragment
)
;
}
this
.
matchedSelectorsContainer
.
innerHTML
=
"
"
;
this
.
matchedSelectorsContainer
.
appendChild
(
frag
)
;
}
get
matchedSelectorViews
(
)
{
if
(
!
this
.
_matchedSelectorViews
)
{
this
.
_matchedSelectorViews
=
[
]
;
this
.
_matchedSelectorResponse
.
forEach
(
selectorInfo
=
>
{
const
selectorView
=
new
SelectorView
(
this
.
tree
selectorInfo
)
;
this
.
_matchedSelectorViews
.
push
(
selectorView
)
;
}
this
)
;
}
return
this
.
_matchedSelectorViews
;
}
onMatchedToggle
(
event
)
{
if
(
event
.
shiftKey
)
{
return
;
}
this
.
matchedExpanded
=
!
this
.
matchedExpanded
;
this
.
refreshMatchedSelectors
(
)
;
event
.
preventDefault
(
)
;
}
mdnLinkClick
(
event
)
{
openContentLink
(
this
.
link
)
;
}
destroy
(
)
{
if
(
this
.
_matchedSelectorViews
)
{
for
(
const
view
of
this
.
_matchedSelectorViews
)
{
view
.
destroy
(
)
;
}
}
this
.
element
.
removeEventListener
(
"
dblclick
"
this
.
onMatchedToggle
)
;
this
.
shortcuts
.
destroy
(
)
;
this
.
element
=
null
;
this
.
matchedExpander
.
removeEventListener
(
"
click
"
this
.
onMatchedToggle
)
;
this
.
matchedExpander
=
null
;
this
.
nameNode
.
removeEventListener
(
"
click
"
this
.
onFocus
)
;
this
.
nameNode
=
null
;
this
.
valueNode
.
removeEventListener
(
"
click
"
this
.
onFocus
)
;
this
.
valueNode
=
null
;
}
}
;
function
SelectorView
(
tree
selectorInfo
)
{
this
.
tree
=
tree
;
this
.
selectorInfo
=
selectorInfo
;
this
.
_cacheStatusNames
(
)
;
this
.
openStyleEditor
=
this
.
openStyleEditor
.
bind
(
this
)
;
this
.
_updateLocation
=
this
.
_updateLocation
.
bind
(
this
)
;
const
rule
=
this
.
selectorInfo
.
rule
;
if
(
!
rule
|
|
!
rule
.
parentStyleSheet
|
|
rule
.
type
=
=
ELEMENT_STYLE
)
{
this
.
source
=
CssLogic
.
l10n
(
"
rule
.
sourceElement
"
)
;
}
else
{
const
sheet
=
rule
.
parentStyleSheet
;
this
.
source
=
CssLogic
.
shortSource
(
sheet
)
+
"
:
"
+
rule
.
line
;
this
.
generatedLocation
=
{
sheet
href
:
sheet
.
href
|
|
sheet
.
nodeHref
line
:
rule
.
line
column
:
rule
.
column
}
;
this
.
sourceMapURLService
=
this
.
tree
.
inspector
.
toolbox
.
sourceMapURLService
;
this
.
_unsubscribeCallback
=
this
.
sourceMapURLService
.
subscribeByID
(
this
.
generatedLocation
.
sheet
.
resourceId
|
|
this
.
generatedLocation
.
sheet
.
actorID
this
.
generatedLocation
.
line
this
.
generatedLocation
.
column
this
.
_updateLocation
)
;
}
}
SelectorView
.
STATUS_NAMES
=
[
]
;
SelectorView
.
CLASS_NAMES
=
[
"
parentmatch
"
"
matched
"
"
bestmatch
"
]
;
SelectorView
.
prototype
=
{
_cacheStatusNames
(
)
{
if
(
SelectorView
.
STATUS_NAMES
.
length
)
{
return
;
}
for
(
const
status
in
CssLogic
.
STATUS
)
{
const
i
=
CssLogic
.
STATUS
[
status
]
;
if
(
i
>
CssLogic
.
STATUS
.
UNMATCHED
)
{
const
value
=
CssComputedView
.
l10n
(
"
rule
.
status
.
"
+
status
)
;
SelectorView
.
STATUS_NAMES
[
i
]
=
value
.
replace
(
/
/
g
"
\
u00A0
"
)
;
}
}
}
get
statusText
(
)
{
return
SelectorView
.
STATUS_NAMES
[
this
.
selectorInfo
.
status
]
;
}
get
statusClass
(
)
{
return
SelectorView
.
CLASS_NAMES
[
this
.
selectorInfo
.
status
-
1
]
;
}
get
href
(
)
{
if
(
this
.
_href
)
{
return
this
.
_href
;
}
const
sheet
=
this
.
selectorInfo
.
rule
.
parentStyleSheet
;
this
.
_href
=
sheet
?
sheet
.
href
:
"
#
"
;
return
this
.
_href
;
}
get
sourceText
(
)
{
return
this
.
selectorInfo
.
sourceText
;
}
get
value
(
)
{
return
this
.
selectorInfo
.
value
;
}
get
outputFragment
(
)
{
const
outputParser
=
this
.
tree
.
_outputParser
;
const
frag
=
outputParser
.
parseCssProperty
(
this
.
selectorInfo
.
name
this
.
selectorInfo
.
value
{
colorSwatchClass
:
"
computed
-
colorswatch
"
colorClass
:
"
computed
-
color
"
urlClass
:
"
theme
-
link
"
fontFamilyClass
:
"
computed
-
font
-
family
"
baseURI
:
this
.
selectorInfo
.
rule
.
href
}
)
;
return
frag
;
}
_updateLocation
(
originalLocation
)
{
if
(
!
this
.
tree
.
element
)
{
return
;
}
let
currentLocation
=
this
.
generatedLocation
;
if
(
originalLocation
)
{
const
{
url
line
column
}
=
originalLocation
;
currentLocation
=
{
href
:
url
line
column
}
;
}
const
selector
=
'
[
sourcelocation
=
"
'
+
this
.
source
+
'
"
]
'
;
const
link
=
this
.
tree
.
element
.
querySelector
(
selector
)
;
if
(
link
)
{
const
text
=
CssLogic
.
shortSource
(
currentLocation
)
+
"
:
"
+
currentLocation
.
line
;
link
.
textContent
=
text
;
}
this
.
tree
.
inspector
.
emit
(
"
computed
-
view
-
sourcelinks
-
updated
"
)
;
}
openStyleEditor
(
)
{
const
inspector
=
this
.
tree
.
inspector
;
const
rule
=
this
.
selectorInfo
.
rule
;
const
parentStyleSheet
=
rule
.
parentStyleSheet
;
if
(
!
parentStyleSheet
|
|
parentStyleSheet
.
isSystem
)
{
inspector
.
toolbox
.
viewSource
(
rule
.
href
rule
.
line
)
;
return
;
}
const
{
sheet
line
column
}
=
this
.
generatedLocation
;
if
(
ToolDefinitions
.
styleEditor
.
isToolSupported
(
inspector
.
toolbox
)
)
{
inspector
.
toolbox
.
viewSourceInStyleEditorByFront
(
sheet
line
column
)
;
}
}
destroy
(
)
{
if
(
this
.
_unsubscribeCallback
)
{
this
.
_unsubscribeCallback
(
)
;
}
}
}
;
function
ComputedViewTool
(
inspector
window
)
{
this
.
inspector
=
inspector
;
this
.
document
=
window
.
document
;
this
.
computedView
=
new
CssComputedView
(
this
.
inspector
this
.
document
)
;
this
.
onDetachedFront
=
this
.
onDetachedFront
.
bind
(
this
)
;
this
.
onSelected
=
this
.
onSelected
.
bind
(
this
)
;
this
.
refresh
=
this
.
refresh
.
bind
(
this
)
;
this
.
onPanelSelected
=
this
.
onPanelSelected
.
bind
(
this
)
;
this
.
inspector
.
selection
.
on
(
"
detached
-
front
"
this
.
onDetachedFront
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onSelected
)
;
this
.
inspector
.
selection
.
on
(
"
pseudoclass
"
this
.
refresh
)
;
this
.
inspector
.
sidebar
.
on
(
"
computedview
-
selected
"
this
.
onPanelSelected
)
;
this
.
inspector
.
styleChangeTracker
.
on
(
"
style
-
changed
"
this
.
refresh
)
;
this
.
computedView
.
selectElement
(
null
)
;
this
.
onSelected
(
)
;
}
ComputedViewTool
.
prototype
=
{
isPanelVisible
(
)
{
if
(
!
this
.
computedView
)
{
return
false
;
}
return
this
.
computedView
.
isPanelVisible
(
)
;
}
onDetachedFront
(
)
{
this
.
onSelected
(
false
)
;
}
async
onSelected
(
selectElement
=
true
)
{
if
(
!
this
.
computedView
)
{
return
;
}
const
isInactive
=
!
this
.
isPanelVisible
(
)
&
&
this
.
inspector
.
selection
.
nodeFront
;
if
(
isInactive
)
{
return
;
}
if
(
!
this
.
inspector
.
selection
.
isConnected
(
)
|
|
!
this
.
inspector
.
selection
.
isElementNode
(
)
)
{
this
.
computedView
.
selectElement
(
null
)
;
return
;
}
if
(
selectElement
)
{
const
done
=
this
.
inspector
.
updating
(
"
computed
-
view
"
)
;
await
this
.
computedView
.
selectElement
(
this
.
inspector
.
selection
.
nodeFront
)
;
done
(
)
;
}
}
refresh
(
)
{
if
(
this
.
isPanelVisible
(
)
)
{
this
.
computedView
.
refreshPanel
(
)
;
}
}
onPanelSelected
(
)
{
if
(
this
.
inspector
.
selection
.
nodeFront
=
=
=
this
.
computedView
.
_viewedElement
)
{
this
.
refresh
(
)
;
}
else
{
this
.
onSelected
(
)
;
}
}
destroy
(
)
{
this
.
inspector
.
styleChangeTracker
.
off
(
"
style
-
changed
"
this
.
refresh
)
;
this
.
inspector
.
sidebar
.
off
(
"
computedview
-
selected
"
this
.
refresh
)
;
this
.
inspector
.
selection
.
off
(
"
pseudoclass
"
this
.
refresh
)
;
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onSelected
)
;
this
.
inspector
.
selection
.
off
(
"
detached
-
front
"
this
.
onDetachedFront
)
;
this
.
inspector
.
sidebar
.
off
(
"
computedview
-
selected
"
this
.
onPanelSelected
)
;
this
.
computedView
.
destroy
(
)
;
this
.
computedView
=
this
.
document
=
this
.
inspector
=
null
;
}
}
;
exports
.
CssComputedView
=
CssComputedView
;
exports
.
ComputedViewTool
=
ComputedViewTool
;
exports
.
PropertyView
=
PropertyView
;
