"
use
strict
"
;
let
Cu
=
Components
.
utils
;
let
{
gDevTools
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
client
/
framework
/
gDevTools
.
jsm
"
{
}
)
;
let
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
let
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
let
{
CssComputedView
}
=
require
(
"
devtools
/
client
/
inspector
/
computed
/
computed
"
)
;
let
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
let
promise
=
require
(
"
promise
"
)
;
let
{
console
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
waitForExplicitFinish
(
)
;
const
TEST_URL_ROOT
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
inspector
/
computed
/
test
/
"
;
const
TEST_URL_ROOT_SSL
=
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
inspector
/
computed
/
test
/
"
;
const
ROOT_TEST_DIR
=
getRootDirectory
(
gTestPath
)
;
const
FRAME_SCRIPT_URL
=
ROOT_TEST_DIR
+
"
doc_frame_script
.
js
"
;
registerCleanupFunction
(
function
*
(
)
{
let
target
=
TargetFactory
.
forTab
(
gBrowser
.
selectedTab
)
;
yield
gDevTools
.
closeToolbox
(
target
)
;
while
(
gBrowser
.
tabs
.
length
>
1
)
{
gBrowser
.
removeCurrentTab
(
)
;
}
}
)
;
DevToolsUtils
.
testing
=
true
;
registerCleanupFunction
(
(
)
=
>
DevToolsUtils
.
testing
=
false
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
inspector
.
activeSidebar
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
dump
.
emit
"
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
defaultColorUnit
"
)
;
}
)
;
function
addTab
(
url
)
{
info
(
"
Adding
a
new
tab
with
URL
:
'
"
+
url
+
"
'
"
)
;
let
def
=
promise
.
defer
(
)
;
window
.
focus
(
)
;
let
tab
=
window
.
gBrowser
.
selectedTab
=
window
.
gBrowser
.
addTab
(
url
)
;
let
browser
=
tab
.
linkedBrowser
;
info
(
"
Loading
the
helper
frame
script
"
+
FRAME_SCRIPT_URL
)
;
browser
.
messageManager
.
loadFrameScript
(
FRAME_SCRIPT_URL
false
)
;
browser
.
addEventListener
(
"
load
"
function
onload
(
)
{
browser
.
removeEventListener
(
"
load
"
onload
true
)
;
info
(
"
URL
'
"
+
url
+
"
'
loading
complete
"
)
;
def
.
resolve
(
tab
)
;
}
true
)
;
return
def
.
promise
;
}
function
getNode
(
nodeOrSelector
)
{
info
(
"
Getting
the
node
for
'
"
+
nodeOrSelector
+
"
'
"
)
;
return
typeof
nodeOrSelector
=
=
=
"
string
"
?
content
.
document
.
querySelector
(
nodeOrSelector
)
:
nodeOrSelector
;
}
function
getNodeFront
(
selector
{
walker
}
)
{
return
walker
.
querySelector
(
walker
.
rootNode
selector
)
;
}
var
selectNode
=
Task
.
async
(
function
*
(
data
inspector
reason
=
"
test
"
)
{
info
(
"
Selecting
the
node
for
'
"
+
data
+
"
'
"
)
;
let
nodeFront
=
data
;
if
(
!
data
.
_form
)
{
nodeFront
=
yield
getNodeFront
(
data
inspector
)
;
}
let
updated
=
inspector
.
once
(
"
inspector
-
updated
"
)
;
inspector
.
selection
.
setNodeFront
(
nodeFront
reason
)
;
yield
updated
;
}
)
;
var
openInspector
=
Task
.
async
(
function
*
(
)
{
info
(
"
Opening
the
inspector
"
)
;
let
target
=
TargetFactory
.
forTab
(
gBrowser
.
selectedTab
)
;
let
inspector
toolbox
;
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
if
(
toolbox
)
{
inspector
=
toolbox
.
getPanel
(
"
inspector
"
)
;
if
(
inspector
)
{
info
(
"
Toolbox
and
inspector
already
open
"
)
;
return
{
toolbox
:
toolbox
inspector
:
inspector
}
;
}
}
info
(
"
Opening
the
toolbox
"
)
;
toolbox
=
yield
gDevTools
.
showToolbox
(
target
"
inspector
"
)
;
yield
waitForToolboxFrameFocus
(
toolbox
)
;
inspector
=
toolbox
.
getPanel
(
"
inspector
"
)
;
info
(
"
Waiting
for
the
inspector
to
update
"
)
;
yield
inspector
.
once
(
"
inspector
-
updated
"
)
;
return
{
toolbox
:
toolbox
inspector
:
inspector
}
;
}
)
;
function
waitForToolboxFrameFocus
(
toolbox
)
{
info
(
"
Making
sure
that
the
toolbox
'
s
frame
is
focused
"
)
;
let
def
=
promise
.
defer
(
)
;
let
win
=
toolbox
.
frame
.
contentWindow
;
waitForFocus
(
def
.
resolve
win
)
;
return
def
.
promise
;
}
var
openInspectorSideBar
=
Task
.
async
(
function
*
(
id
)
{
let
{
toolbox
inspector
}
=
yield
openInspector
(
)
;
if
(
!
hasSideBarTab
(
inspector
id
)
)
{
info
(
"
Waiting
for
the
"
+
id
+
"
sidebar
to
be
ready
"
)
;
yield
inspector
.
sidebar
.
once
(
id
+
"
-
ready
"
)
;
}
info
(
"
Selecting
the
"
+
id
+
"
sidebar
"
)
;
inspector
.
sidebar
.
select
(
id
)
;
return
{
toolbox
:
toolbox
inspector
:
inspector
view
:
inspector
.
sidebar
.
getWindowForTab
(
id
)
[
id
]
.
view
}
;
}
)
;
function
openComputedView
(
)
{
return
openInspectorSideBar
(
"
computedview
"
)
;
}
function
waitForNEvents
(
target
eventName
numTimes
useCapture
=
false
)
{
info
(
"
Waiting
for
event
:
'
"
+
eventName
+
"
'
on
"
+
target
+
"
.
"
)
;
let
deferred
=
promise
.
defer
(
)
;
let
count
=
0
;
for
(
let
[
add
remove
]
of
[
[
"
addEventListener
"
"
removeEventListener
"
]
[
"
addListener
"
"
removeListener
"
]
[
"
on
"
"
off
"
]
]
)
{
if
(
(
add
in
target
)
&
&
(
remove
in
target
)
)
{
target
[
add
]
(
eventName
function
onEvent
(
.
.
.
aArgs
)
{
if
(
+
+
count
=
=
numTimes
)
{
target
[
remove
]
(
eventName
onEvent
useCapture
)
;
deferred
.
resolve
.
apply
(
deferred
aArgs
)
;
}
}
useCapture
)
;
break
;
}
}
return
deferred
.
promise
;
}
function
once
(
target
eventName
useCapture
=
false
)
{
return
waitForNEvents
(
target
eventName
1
useCapture
)
;
}
function
wait
(
ms
)
{
let
def
=
promise
.
defer
(
)
;
content
.
setTimeout
(
def
.
resolve
ms
)
;
return
def
.
promise
;
}
var
waitForTab
=
Task
.
async
(
function
*
(
)
{
info
(
"
Waiting
for
a
tab
to
open
"
)
;
yield
once
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
let
tab
=
gBrowser
.
selectedTab
;
let
browser
=
tab
.
linkedBrowser
;
yield
once
(
browser
"
load
"
true
)
;
info
(
"
The
tab
load
completed
"
)
;
return
tab
;
}
)
;
function
waitForClipboard
(
setup
expected
)
{
let
def
=
promise
.
defer
(
)
;
SimpleTest
.
waitForClipboard
(
expected
setup
def
.
resolve
def
.
reject
)
;
return
def
.
promise
;
}
function
fireCopyEvent
(
element
)
{
let
evt
=
element
.
ownerDocument
.
createEvent
(
"
Event
"
)
;
evt
.
initEvent
(
"
copy
"
true
true
)
;
element
.
dispatchEvent
(
evt
)
;
}
function
hasSideBarTab
(
inspector
id
)
{
return
!
!
inspector
.
sidebar
.
getWindowForTab
(
id
)
;
}
function
synthesizeKeys
(
input
win
)
{
for
(
let
key
of
input
.
split
(
"
"
)
)
{
EventUtils
.
synthesizeKey
(
key
{
}
win
)
;
}
}
function
getComputedViewProperty
(
view
name
)
{
let
prop
;
for
(
let
property
of
view
.
styleDocument
.
querySelectorAll
(
"
.
property
-
view
"
)
)
{
let
nameSpan
=
property
.
querySelector
(
"
.
property
-
name
"
)
;
let
valueSpan
=
property
.
querySelector
(
"
.
property
-
value
"
)
;
if
(
nameSpan
.
textContent
=
=
=
name
)
{
prop
=
{
nameSpan
:
nameSpan
valueSpan
:
valueSpan
}
;
break
;
}
}
return
prop
;
}
function
getComputedViewPropertyView
(
view
name
)
{
let
propView
;
for
(
let
propertyView
of
view
.
propertyViews
)
{
if
(
propertyView
.
_propertyInfo
.
name
=
=
=
name
)
{
propView
=
propertyView
;
break
;
}
}
return
propView
;
}
var
getComputedViewMatchedRules
=
Task
.
async
(
function
*
(
view
name
)
{
let
expander
;
let
propertyContent
;
for
(
let
property
of
view
.
styleDocument
.
querySelectorAll
(
"
.
property
-
view
"
)
)
{
let
nameSpan
=
property
.
querySelector
(
"
.
property
-
name
"
)
;
if
(
nameSpan
.
textContent
=
=
=
name
)
{
expander
=
property
.
querySelector
(
"
.
expandable
"
)
;
propertyContent
=
property
.
nextSibling
;
break
;
}
}
if
(
!
expander
.
hasAttribute
(
"
open
"
)
)
{
let
onExpand
=
view
.
inspector
.
once
(
"
computed
-
view
-
property
-
expanded
"
)
;
expander
.
click
(
)
;
yield
onExpand
;
}
return
propertyContent
;
}
)
;
function
getComputedViewPropertyValue
(
view
name
propertyName
)
{
return
getComputedViewProperty
(
view
name
propertyName
)
.
valueSpan
.
textContent
;
}
function
expandComputedViewPropertyByIndex
(
view
index
)
{
info
(
"
Expanding
property
"
+
index
+
"
in
the
computed
view
"
)
;
let
expandos
=
view
.
styleDocument
.
querySelectorAll
(
"
.
expandable
"
)
;
if
(
!
expandos
.
length
|
|
!
expandos
[
index
]
)
{
return
promise
.
reject
(
)
;
}
let
onExpand
=
view
.
inspector
.
once
(
"
computed
-
view
-
property
-
expanded
"
)
;
expandos
[
index
]
.
click
(
)
;
return
onExpand
;
}
function
getComputedViewLinkByIndex
(
view
index
)
{
let
links
=
view
.
styleDocument
.
querySelectorAll
(
"
.
rule
-
link
.
link
"
)
;
return
links
[
index
]
;
}
function
waitForStyleEditor
(
toolbox
href
)
{
let
def
=
promise
.
defer
(
)
;
info
(
"
Waiting
for
the
toolbox
to
switch
to
the
styleeditor
"
)
;
toolbox
.
once
(
"
styleeditor
-
selected
"
)
.
then
(
(
)
=
>
{
let
panel
=
toolbox
.
getCurrentPanel
(
)
;
ok
(
panel
&
&
panel
.
UI
"
Styleeditor
panel
switched
to
front
"
)
;
let
gotEditor
=
(
event
editor
)
=
>
{
let
currentHref
=
editor
.
styleSheet
.
href
;
if
(
!
href
|
|
(
href
&
&
currentHref
.
endsWith
(
href
)
)
)
{
info
(
"
Stylesheet
editor
selected
"
)
;
panel
.
UI
.
off
(
"
editor
-
selected
"
gotEditor
)
;
editor
.
getSourceEditor
(
)
.
then
(
sourceEditor
=
>
{
info
(
"
Stylesheet
editor
fully
loaded
"
)
;
def
.
resolve
(
sourceEditor
)
;
}
)
;
return
true
;
}
info
(
"
The
editor
was
incorrect
.
Waiting
for
editor
-
selected
event
.
"
)
;
return
false
;
}
;
if
(
!
gotEditor
(
"
styleeditor
-
selected
"
panel
.
UI
.
selectedEditor
)
)
{
panel
.
UI
.
on
(
"
editor
-
selected
"
gotEditor
)
;
}
}
)
;
return
def
.
promise
;
}
function
reloadPage
(
inspector
)
{
let
onNewRoot
=
inspector
.
once
(
"
new
-
root
"
)
;
content
.
location
.
reload
(
)
;
return
onNewRoot
.
then
(
(
)
=
>
{
inspector
.
markup
.
_waitForChildren
(
)
;
}
)
;
}
