"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
head
.
js
"
this
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
defaultColorUnit
"
)
;
}
)
;
function
fireCopyEvent
(
element
)
{
let
evt
=
element
.
ownerDocument
.
createEvent
(
"
Event
"
)
;
evt
.
initEvent
(
"
copy
"
true
true
)
;
element
.
dispatchEvent
(
evt
)
;
}
function
getComputedViewProperty
(
view
name
)
{
let
prop
;
for
(
let
property
of
view
.
styleDocument
.
querySelectorAll
(
"
#
computed
-
container
.
computed
-
property
-
view
"
)
)
{
let
nameSpan
=
property
.
querySelector
(
"
.
computed
-
property
-
name
"
)
;
let
valueSpan
=
property
.
querySelector
(
"
.
computed
-
property
-
value
"
)
;
if
(
nameSpan
.
firstChild
.
textContent
=
=
=
name
)
{
prop
=
{
nameSpan
:
nameSpan
valueSpan
:
valueSpan
}
;
break
;
}
}
return
prop
;
}
function
getComputedViewPropertyView
(
view
name
)
{
let
propView
;
for
(
let
propertyView
of
view
.
propertyViews
)
{
if
(
propertyView
.
_propertyInfo
.
name
=
=
=
name
)
{
propView
=
propertyView
;
break
;
}
}
return
propView
;
}
var
getComputedViewMatchedRules
=
async
function
(
view
name
)
{
let
expander
;
let
propertyContent
;
for
(
let
property
of
view
.
styleDocument
.
querySelectorAll
(
"
#
computed
-
container
.
computed
-
property
-
view
"
)
)
{
let
nameSpan
=
property
.
querySelector
(
"
.
computed
-
property
-
name
"
)
;
if
(
nameSpan
.
firstChild
.
textContent
=
=
=
name
)
{
expander
=
property
.
querySelector
(
"
.
computed
-
expandable
"
)
;
propertyContent
=
property
.
nextSibling
;
break
;
}
}
if
(
!
expander
.
hasAttribute
(
"
open
"
)
)
{
let
onExpand
=
view
.
inspector
.
once
(
"
computed
-
view
-
property
-
expanded
"
)
;
expander
.
click
(
)
;
await
onExpand
;
}
return
propertyContent
;
}
;
function
getComputedViewPropertyValue
(
view
name
propertyName
)
{
return
getComputedViewProperty
(
view
name
propertyName
)
.
valueSpan
.
textContent
;
}
function
expandComputedViewPropertyByIndex
(
view
index
)
{
info
(
"
Expanding
property
"
+
index
+
"
in
the
computed
view
"
)
;
let
expandos
=
view
.
styleDocument
.
querySelectorAll
(
"
.
computed
-
expandable
"
)
;
if
(
!
expandos
.
length
|
|
!
expandos
[
index
]
)
{
return
promise
.
reject
(
)
;
}
let
onExpand
=
view
.
inspector
.
once
(
"
computed
-
view
-
property
-
expanded
"
)
;
expandos
[
index
]
.
click
(
)
;
return
onExpand
;
}
function
getComputedViewLinkByIndex
(
view
index
)
{
let
links
=
view
.
styleDocument
.
querySelectorAll
(
"
.
rule
-
link
.
computed
-
link
"
)
;
return
links
[
index
]
;
}
function
selectAllText
(
view
)
{
info
(
"
Selecting
all
the
text
"
)
;
view
.
contextMenu
.
_onSelectAll
(
)
;
}
async
function
copyAllAndCheckClipboard
(
view
expectedPattern
)
{
selectAllText
(
view
)
;
let
contentDoc
=
view
.
styleDocument
;
let
prop
=
contentDoc
.
querySelector
(
"
#
computed
-
container
.
computed
-
property
-
view
"
)
;
try
{
info
(
"
Trigger
a
copy
event
and
wait
for
the
clipboard
content
"
)
;
await
waitForClipboardPromise
(
(
)
=
>
fireCopyEvent
(
prop
)
(
)
=
>
checkClipboard
(
expectedPattern
)
)
;
}
catch
(
e
)
{
failClipboardCheck
(
expectedPattern
)
;
}
}
async
function
copySomeTextAndCheckClipboard
(
view
positions
expectedPattern
)
{
info
(
"
Testing
selection
copy
"
)
;
let
contentDocument
=
view
.
styleDocument
;
let
props
=
contentDocument
.
querySelectorAll
(
"
#
computed
-
container
.
computed
-
property
-
view
"
)
;
info
(
"
Create
the
text
selection
range
"
)
;
let
range
=
contentDocument
.
createRange
(
)
;
range
.
setStart
(
props
[
positions
.
start
.
prop
]
positions
.
start
.
offset
)
;
range
.
setEnd
(
props
[
positions
.
end
.
prop
]
positions
.
end
.
offset
)
;
contentDocument
.
defaultView
.
getSelection
(
)
.
addRange
(
range
)
;
try
{
info
(
"
Trigger
a
copy
event
and
wait
for
the
clipboard
content
"
)
;
await
waitForClipboardPromise
(
(
)
=
>
fireCopyEvent
(
props
[
0
]
)
(
)
=
>
checkClipboard
(
expectedPattern
)
)
;
}
catch
(
e
)
{
failClipboardCheck
(
expectedPattern
)
;
}
}
function
checkClipboard
(
expectedPattern
)
{
let
actual
=
SpecialPowers
.
getClipboardData
(
"
text
/
unicode
"
)
;
let
expectedRegExp
=
new
RegExp
(
expectedPattern
"
g
"
)
;
return
expectedRegExp
.
test
(
actual
)
;
}
function
failClipboardCheck
(
expectedPattern
)
{
let
terminator
=
Services
.
appinfo
.
OS
=
=
"
WINNT
"
?
"
\
r
\
n
"
:
"
\
n
"
;
expectedPattern
=
expectedPattern
.
replace
(
/
\
[
\
\
r
\
\
n
\
]
[
+
*
]
/
g
terminator
)
;
expectedPattern
=
expectedPattern
.
replace
(
/
\
\
\
(
/
g
"
(
"
)
;
expectedPattern
=
expectedPattern
.
replace
(
/
\
\
\
)
/
g
"
)
"
)
;
let
actual
=
SpecialPowers
.
getClipboardData
(
"
text
/
unicode
"
)
;
expectedPattern
=
expectedPattern
.
trimRight
(
)
;
actual
=
actual
.
trimRight
(
)
;
dump
(
"
TEST
-
UNEXPECTED
-
FAIL
|
Clipboard
text
does
not
match
expected
.
.
.
"
+
"
results
(
escaped
for
accurate
comparison
)
:
\
n
"
)
;
info
(
"
Actual
:
"
+
escape
(
actual
)
)
;
info
(
"
Expected
:
"
+
escape
(
expectedPattern
)
)
;
}
