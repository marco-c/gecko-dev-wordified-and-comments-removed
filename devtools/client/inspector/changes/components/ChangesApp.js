"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
CSSDeclaration
=
createFactory
(
require
(
"
.
/
CSSDeclaration
"
)
)
;
class
ChangesApp
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
changes
:
PropTypes
.
object
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
renderedRules
=
[
]
;
}
renderDeclarations
(
remove
=
{
}
add
=
{
}
)
{
const
removals
=
Object
.
entries
(
remove
)
.
map
(
(
[
property
value
]
)
=
>
{
return
CSSDeclaration
(
{
key
:
"
remove
-
"
+
property
className
:
"
level
diff
-
remove
"
property
value
}
)
;
}
)
;
const
additions
=
Object
.
entries
(
add
)
.
map
(
(
[
property
value
]
)
=
>
{
return
CSSDeclaration
(
{
key
:
"
add
-
"
+
property
className
:
"
level
diff
-
add
"
property
value
}
)
;
}
)
;
return
[
removals
additions
]
;
}
renderRule
(
ruleId
rule
rules
)
{
const
selector
=
rule
.
selector
;
if
(
this
.
renderedRules
.
includes
(
ruleId
)
)
{
return
null
;
}
this
.
renderedRules
.
push
(
ruleId
)
;
let
diffClass
=
"
"
;
if
(
rule
.
changeType
=
=
=
"
rule
-
add
"
)
{
diffClass
=
"
diff
-
add
"
;
}
else
if
(
rule
.
changeType
=
=
=
"
rule
-
remove
"
)
{
diffClass
=
"
diff
-
remove
"
;
}
return
dom
.
div
(
{
key
:
ruleId
className
:
"
rule
"
}
dom
.
div
(
{
className
:
level
selector
{
diffClass
}
title
:
selector
}
selector
dom
.
span
(
{
className
:
"
bracket
-
open
"
}
"
{
"
)
)
rule
.
children
.
length
>
0
&
&
rule
.
children
.
map
(
childRuleId
=
>
{
return
this
.
renderRule
(
childRuleId
rules
[
childRuleId
]
rules
)
;
}
)
this
.
renderDeclarations
(
rule
.
remove
rule
.
add
)
dom
.
div
(
{
className
:
level
bracket
-
close
{
diffClass
}
}
"
}
"
)
)
;
}
renderDiff
(
changes
=
{
}
)
{
return
Object
.
entries
(
changes
)
.
map
(
(
[
sourceId
source
]
)
=
>
{
const
href
=
source
.
href
|
|
inline
stylesheet
#
{
source
.
index
}
;
const
rules
=
source
.
rules
;
return
dom
.
details
(
{
key
:
sourceId
className
:
"
source
devtools
-
monospace
"
open
:
true
}
dom
.
summary
(
{
className
:
"
href
"
title
:
href
}
href
)
Object
.
entries
(
rules
)
.
map
(
(
[
ruleId
rule
]
)
=
>
{
return
this
.
renderRule
(
ruleId
rule
rules
)
;
}
)
)
;
}
)
;
}
render
(
)
{
this
.
renderedRules
=
[
]
;
return
dom
.
div
(
{
className
:
"
theme
-
sidebar
inspector
-
tabpanel
"
id
:
"
sidebar
-
panel
-
changes
"
}
this
.
renderDiff
(
this
.
props
.
changes
)
)
;
}
}
module
.
exports
=
connect
(
state
=
>
state
)
(
ChangesApp
)
;
