"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
CSSDeclaration
=
createFactory
(
require
(
"
.
/
CSSDeclaration
"
)
)
;
const
{
getChangesTree
}
=
require
(
"
.
.
/
selectors
/
changes
"
)
;
const
{
getSourceForDisplay
}
=
require
(
"
.
.
/
utils
/
changes
-
utils
"
)
;
const
{
getStr
}
=
require
(
"
.
.
/
utils
/
l10n
"
)
;
class
ChangesApp
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
changesTree
:
PropTypes
.
object
.
isRequired
onContextMenu
:
PropTypes
.
func
.
isRequired
onCopy
:
PropTypes
.
func
.
isRequired
onCopyAllChanges
:
PropTypes
.
func
.
isRequired
onCopyRule
:
PropTypes
.
func
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
}
renderCopyAllChangesButton
(
)
{
return
dom
.
button
(
{
className
:
"
changes__copy
-
all
-
changes
-
button
"
onClick
:
e
=
>
{
e
.
stopPropagation
(
)
;
this
.
props
.
onCopyAllChanges
(
)
;
}
title
:
getStr
(
"
changes
.
contextmenu
.
copyAllChangesDescription
"
)
}
getStr
(
"
changes
.
contextmenu
.
copyAllChanges
"
)
)
;
}
renderCopyButton
(
ruleId
)
{
return
dom
.
button
(
{
className
:
"
changes__copy
-
rule
-
button
"
onClick
:
e
=
>
{
e
.
stopPropagation
(
)
;
this
.
props
.
onCopyRule
(
ruleId
)
;
}
title
:
getStr
(
"
changes
.
contextmenu
.
copyRuleDescription
"
)
}
getStr
(
"
changes
.
contextmenu
.
copyRule
"
)
)
;
}
renderDeclarations
(
remove
=
[
]
add
=
[
]
)
{
const
removals
=
remove
.
sort
(
(
a
b
)
=
>
a
.
index
>
b
.
index
)
.
map
(
(
{
property
value
index
}
)
=
>
{
return
CSSDeclaration
(
{
key
:
"
remove
-
"
+
property
+
index
className
:
"
level
diff
-
remove
"
marker
:
getDiffMarker
(
"
diff
-
remove
"
)
property
value
}
)
;
}
)
;
const
additions
=
add
.
sort
(
(
a
b
)
=
>
a
.
index
>
b
.
index
)
.
map
(
(
{
property
value
index
}
)
=
>
{
return
CSSDeclaration
(
{
key
:
"
add
-
"
+
property
+
index
className
:
"
level
diff
-
add
"
marker
:
getDiffMarker
(
"
diff
-
add
"
)
property
value
}
)
;
}
)
;
return
[
removals
additions
]
;
}
renderRule
(
ruleId
rule
level
=
0
)
{
return
dom
.
div
(
{
key
:
ruleId
className
:
"
changes__rule
devtools
-
monospace
"
"
data
-
rule
-
id
"
:
ruleId
style
:
{
"
-
-
diff
-
level
"
:
level
}
}
this
.
renderSelectors
(
rule
.
selectors
)
this
.
renderCopyButton
(
ruleId
)
rule
.
children
.
map
(
childRule
=
>
{
return
this
.
renderRule
(
childRule
.
ruleId
childRule
level
+
1
)
;
}
)
this
.
renderDeclarations
(
rule
.
remove
rule
.
add
)
dom
.
div
(
{
className
:
level
}
"
}
"
)
)
;
}
renderSelectors
(
selectors
)
{
const
selectorDiffClassMap
=
new
Map
(
)
;
if
(
selectors
.
length
=
=
=
1
)
{
selectorDiffClassMap
.
set
(
selectors
[
0
]
"
"
)
;
}
else
if
(
selectors
.
length
>
=
2
)
{
selectorDiffClassMap
.
set
(
selectors
[
0
]
"
diff
-
remove
"
)
;
selectorDiffClassMap
.
set
(
selectors
[
selectors
.
length
-
1
]
"
diff
-
add
"
)
;
}
const
elements
=
[
]
;
for
(
const
[
selector
diffClass
]
of
selectorDiffClassMap
)
{
elements
.
push
(
dom
.
div
(
{
key
:
selector
className
:
level
changes__selector
{
diffClass
}
title
:
selector
}
getDiffMarker
(
diffClass
)
selector
dom
.
span
(
{
}
"
{
"
)
)
)
;
}
return
elements
;
}
renderDiff
(
changes
=
{
}
)
{
return
Object
.
entries
(
changes
)
.
map
(
(
[
sourceId
source
]
)
=
>
{
const
path
=
getSourceForDisplay
(
source
)
;
const
{
href
rules
isFramed
}
=
source
;
return
dom
.
div
(
{
key
:
sourceId
"
data
-
source
-
id
"
:
sourceId
className
:
"
source
"
}
dom
.
div
(
{
className
:
"
href
"
title
:
href
}
dom
.
span
(
{
}
path
)
isFramed
&
&
this
.
renderFrameBadge
(
href
)
)
Object
.
entries
(
rules
)
.
map
(
(
[
ruleId
rule
]
)
=
>
{
return
this
.
renderRule
(
ruleId
rule
)
;
}
)
)
;
}
)
;
}
renderFrameBadge
(
href
=
"
"
)
{
return
dom
.
span
(
{
className
:
"
inspector
-
badge
"
title
:
href
}
getStr
(
"
changes
.
iframeLabel
"
)
)
;
}
renderEmptyState
(
)
{
return
dom
.
div
(
{
className
:
"
devtools
-
sidepanel
-
no
-
result
"
}
dom
.
p
(
{
}
getStr
(
"
changes
.
noChanges
"
)
)
dom
.
p
(
{
}
getStr
(
"
changes
.
noChangesDescription
"
)
)
)
;
}
render
(
)
{
const
hasChanges
=
Object
.
keys
(
this
.
props
.
changesTree
)
.
length
>
0
;
return
dom
.
div
(
{
className
:
"
theme
-
sidebar
inspector
-
tabpanel
"
id
:
"
sidebar
-
panel
-
changes
"
onContextMenu
:
this
.
props
.
onContextMenu
onCopy
:
this
.
props
.
onCopy
}
!
hasChanges
&
&
this
.
renderEmptyState
(
)
hasChanges
&
&
this
.
renderCopyAllChangesButton
(
)
hasChanges
&
&
this
.
renderDiff
(
this
.
props
.
changesTree
)
)
;
}
}
function
getDiffMarker
(
className
)
{
let
marker
=
null
;
switch
(
className
)
{
case
"
diff
-
add
"
:
marker
=
dom
.
span
(
{
className
:
"
diff
-
marker
"
}
"
+
"
)
;
break
;
case
"
diff
-
remove
"
:
marker
=
dom
.
span
(
{
className
:
"
diff
-
marker
"
}
"
-
"
)
;
break
;
}
return
marker
;
}
const
mapStateToProps
=
state
=
>
{
return
{
changesTree
:
getChangesTree
(
state
.
changes
)
}
;
}
;
module
.
exports
=
connect
(
mapStateToProps
)
(
ChangesApp
)
;
