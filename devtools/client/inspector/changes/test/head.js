"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
rules
/
test
/
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
redux
-
head
.
js
"
this
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
inspector
.
three
-
pane
-
enabled
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
inspector
.
three
-
pane
-
enabled
"
)
;
}
)
;
function
getDeclarations
(
panelDoc
selector
=
"
"
containerNode
=
null
)
{
const
els
=
panelDoc
.
querySelectorAll
(
.
changes__declaration
{
selector
}
)
;
return
[
.
.
.
els
]
.
filter
(
el
=
>
{
return
containerNode
?
containerNode
.
contains
(
el
)
:
true
;
}
)
.
map
(
el
=
>
{
return
{
property
:
el
.
querySelector
(
"
.
changes__declaration
-
name
"
)
.
textContent
value
:
el
.
querySelector
(
"
.
changes__declaration
-
value
"
)
.
textContent
}
;
}
)
;
}
function
getAddedDeclarations
(
panelDoc
containerNode
)
{
return
getDeclarations
(
panelDoc
"
.
diff
-
add
"
containerNode
)
;
}
function
getRemovedDeclarations
(
panelDoc
containerNode
)
{
return
getDeclarations
(
panelDoc
"
.
diff
-
remove
"
containerNode
)
;
}
function
getSelectors
(
panelDoc
selector
=
"
"
)
{
return
panelDoc
.
querySelectorAll
(
.
changes__selector
{
selector
}
)
;
}
function
getAddedSelectors
(
panelDoc
)
{
return
getSelectors
(
panelDoc
"
.
diff
-
add
"
)
;
}
function
getRemovedSelectors
(
panelDoc
)
{
return
getSelectors
(
panelDoc
"
.
diff
-
remove
"
)
;
}
