"
use
strict
"
;
const
TEST_URI
=
<
style
type
=
'
text
/
css
'
>
div
{
color
:
red
;
font
-
family
:
"
courier
"
;
}
<
/
style
>
<
div
>
test
<
/
div
>
;
const
ITERATIONS
=
{
color
:
[
{
value
:
"
red
"
add
:
null
remove
:
null
}
{
value
:
"
red
!
important
"
add
:
{
value
:
"
red
!
important
"
}
remove
:
{
value
:
"
red
"
}
}
{
value
:
"
blue
"
add
:
{
value
:
"
blue
"
}
remove
:
{
value
:
"
red
"
}
}
{
value
:
"
red
"
add
:
null
remove
:
null
}
]
"
font
-
family
"
:
[
{
value
:
'
"
ar
'
add
:
{
value
:
'
"
ar
"
'
}
remove
:
{
value
:
'
"
courier
"
'
}
needsExtraFlush
:
true
}
{
value
:
'
"
ar
\
\
i
'
add
:
{
value
:
'
"
ar
\
\
i
"
'
}
remove
:
{
value
:
'
"
courier
"
'
}
}
{
value
:
'
"
ar
\
\
ia
'
add
:
{
value
:
'
"
ar
\
\
ia
"
'
}
remove
:
{
value
:
'
"
courier
"
'
}
}
{
value
:
'
"
aria
'
add
:
{
value
:
'
"
aria
"
'
}
remove
:
{
value
:
'
"
courier
"
'
}
}
{
value
:
'
"
arial
'
add
:
{
value
:
'
"
arial
"
'
}
remove
:
{
value
:
'
"
courier
"
'
}
}
{
value
:
'
"
courier
"
'
add
:
null
remove
:
null
}
]
}
;
add_task
(
async
function
(
)
{
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
TEST_URI
)
)
;
const
{
inspector
view
:
ruleView
}
=
await
openRuleView
(
)
;
const
{
document
:
doc
store
}
=
selectChangesView
(
inspector
)
;
await
selectNode
(
"
div
"
inspector
)
;
const
colorProp
=
getTextProperty
(
ruleView
1
{
color
:
"
red
"
}
)
;
await
assertEditValue
(
ruleView
doc
store
colorProp
ITERATIONS
.
color
)
;
const
fontFamilyProp
=
getTextProperty
(
ruleView
1
{
"
font
-
family
"
:
'
"
courier
"
'
}
)
;
await
assertEditValue
(
ruleView
doc
store
fontFamilyProp
ITERATIONS
[
"
font
-
family
"
]
)
;
}
)
;
async
function
assertEditValue
(
ruleView
doc
store
prop
iterations
)
{
let
onTrackChange
;
for
(
const
{
value
add
needsExtraFlush
remove
}
of
iterations
)
{
onTrackChange
=
waitForDispatch
(
store
"
TRACK_CHANGE
"
)
;
info
(
Change
the
CSS
declaration
value
to
{
value
}
)
;
await
setProperty
(
ruleView
prop
value
{
flushCount
:
needsExtraFlush
?
2
:
1
}
)
;
info
(
"
Wait
for
the
change
to
be
tracked
"
)
;
await
onTrackChange
;
if
(
add
)
{
await
waitFor
(
(
)
=
>
{
const
decl
=
getAddedDeclarations
(
doc
)
;
return
decl
.
length
=
=
1
&
&
decl
[
0
]
.
value
=
=
add
.
value
;
}
"
Only
one
declaration
was
tracked
as
added
.
"
)
;
const
addDecl
=
getAddedDeclarations
(
doc
)
;
is
(
addDecl
[
0
]
.
value
add
.
value
Added
declaration
has
expected
value
:
{
add
.
value
}
)
;
}
else
{
await
waitFor
(
(
)
=
>
getAddedDeclarations
(
doc
)
.
length
=
=
0
"
Added
declaration
was
cleared
"
)
;
}
if
(
remove
)
{
await
waitFor
(
(
)
=
>
getRemovedDeclarations
(
doc
)
.
length
=
=
1
"
Only
one
declaration
was
tracked
as
removed
.
"
)
;
const
removeDecl
=
getRemovedDeclarations
(
doc
)
;
is
(
removeDecl
[
0
]
.
value
remove
.
value
Removed
declaration
has
expected
value
:
{
remove
.
value
}
)
;
}
else
{
await
waitFor
(
(
)
=
>
getRemovedDeclarations
(
doc
)
.
length
=
=
0
"
Removed
declaration
was
cleared
"
)
;
}
}
}
