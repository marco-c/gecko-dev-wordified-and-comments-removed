"
use
strict
"
;
const
{
RESET_CHANGES
TRACK_CHANGE
}
=
require
(
"
.
.
/
actions
/
index
"
)
;
const
INITIAL_STATE
=
{
diff
:
{
}
}
;
function
updateDiff
(
diff
=
{
}
change
=
{
}
)
{
diff
[
change
.
href
]
=
diff
[
change
.
href
]
|
|
{
}
;
diff
[
change
.
href
]
[
change
.
selector
]
=
diff
[
change
.
href
]
[
change
.
selector
]
|
|
{
}
;
diff
[
change
.
href
]
[
change
.
selector
]
.
add
=
diff
[
change
.
href
]
[
change
.
selector
]
.
add
|
|
{
}
;
diff
[
change
.
href
]
[
change
.
selector
]
.
remove
=
diff
[
change
.
href
]
[
change
.
selector
]
.
remove
|
|
{
}
;
const
ref
=
diff
[
change
.
href
]
[
change
.
selector
]
;
if
(
change
.
remove
&
&
change
.
remove
.
property
&
&
!
ref
.
add
[
change
.
remove
.
property
]
)
{
ref
.
remove
[
change
.
remove
.
property
]
=
change
.
remove
.
value
;
}
if
(
change
.
add
&
&
change
.
add
.
property
)
{
ref
.
add
[
change
.
add
.
property
]
=
change
.
add
.
value
;
}
const
propertyName
=
change
.
add
&
&
change
.
add
.
property
|
|
change
.
remove
&
&
change
.
remove
.
property
;
if
(
ref
.
add
[
propertyName
]
=
=
=
ref
.
remove
[
propertyName
]
)
{
delete
ref
.
add
[
propertyName
]
;
delete
ref
.
remove
[
propertyName
]
;
if
(
Object
.
keys
(
ref
.
add
)
.
length
=
=
=
0
&
&
Object
.
keys
(
ref
.
remove
)
.
length
=
=
=
0
)
{
delete
diff
[
change
.
href
]
[
change
.
selector
]
;
}
if
(
Object
.
keys
(
diff
[
change
.
href
]
)
.
length
=
=
=
0
)
{
delete
diff
[
change
.
href
]
;
}
}
ref
.
tag
=
change
.
tag
;
return
diff
;
}
const
reducers
=
{
[
TRACK_CHANGE
]
(
state
{
data
}
)
{
return
Object
.
assign
(
{
}
{
diff
:
updateDiff
(
state
.
diff
data
)
}
)
;
}
[
RESET_CHANGES
]
(
state
)
{
return
INITIAL_STATE
;
}
}
;
module
.
exports
=
function
(
state
=
INITIAL_STATE
action
)
{
const
reducer
=
reducers
[
action
.
type
]
;
if
(
!
reducer
)
{
return
state
;
}
return
reducer
(
state
action
)
;
}
;
