"
use
strict
"
;
const
{
createFactory
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
loader
.
lazyRequireGetter
(
this
"
ChangesContextMenu
"
"
devtools
/
client
/
inspector
/
changes
/
ChangesContextMenu
"
)
;
loader
.
lazyRequireGetter
(
this
"
clipboardHelper
"
"
devtools
/
shared
/
platform
/
clipboard
"
)
;
const
ChangesApp
=
createFactory
(
require
(
"
.
/
components
/
ChangesApp
"
)
)
;
const
{
getChangesStylesheet
}
=
require
(
"
.
/
selectors
/
changes
"
)
;
const
{
resetChanges
trackChange
}
=
require
(
"
.
/
actions
/
changes
"
)
;
class
ChangesView
{
constructor
(
inspector
window
)
{
this
.
document
=
window
.
document
;
this
.
inspector
=
inspector
;
this
.
store
=
this
.
inspector
.
store
;
this
.
telemetry
=
this
.
inspector
.
telemetry
;
this
.
window
=
window
;
this
.
onAddChange
=
this
.
onAddChange
.
bind
(
this
)
;
this
.
onChangesFrontAvailable
=
this
.
onChangesFrontAvailable
.
bind
(
this
)
;
this
.
onChangesFrontDestroyed
=
this
.
onChangesFrontDestroyed
.
bind
(
this
)
;
this
.
onContextMenu
=
this
.
onContextMenu
.
bind
(
this
)
;
this
.
onCopy
=
this
.
onCopy
.
bind
(
this
)
;
this
.
onCopyAllChanges
=
this
.
copyAllChanges
.
bind
(
this
)
;
this
.
onCopyDeclaration
=
this
.
copyDeclaration
.
bind
(
this
)
;
this
.
onCopyRule
=
this
.
copyRule
.
bind
(
this
)
;
this
.
onClearChanges
=
this
.
onClearChanges
.
bind
(
this
)
;
this
.
onSelectAll
=
this
.
onSelectAll
.
bind
(
this
)
;
this
.
onTargetAvailable
=
this
.
onTargetAvailable
.
bind
(
this
)
;
this
.
onTargetDestroyed
=
this
.
onTargetDestroyed
.
bind
(
this
)
;
this
.
destroy
=
this
.
destroy
.
bind
(
this
)
;
this
.
init
(
)
;
}
get
contextMenu
(
)
{
if
(
!
this
.
_contextMenu
)
{
this
.
_contextMenu
=
new
ChangesContextMenu
(
{
onCopy
:
this
.
onCopy
onCopyAllChanges
:
this
.
onCopyAllChanges
onCopyDeclaration
:
this
.
onCopyDeclaration
onCopyRule
:
this
.
onCopyRule
onSelectAll
:
this
.
onSelectAll
toolboxDocument
:
this
.
inspector
.
toolbox
.
doc
window
:
this
.
window
}
)
;
}
return
this
.
_contextMenu
;
}
init
(
)
{
const
changesApp
=
ChangesApp
(
{
onContextMenu
:
this
.
onContextMenu
onCopyAllChanges
:
this
.
onCopyAllChanges
onCopyRule
:
this
.
onCopyRule
}
)
;
this
.
provider
=
createElement
(
Provider
{
id
:
"
changesview
"
key
:
"
changesview
"
store
:
this
.
store
}
changesApp
)
;
this
.
inspector
.
toolbox
.
targetList
.
watchTargets
(
[
this
.
inspector
.
toolbox
.
targetList
.
TYPES
.
FRAME
]
this
.
onTargetAvailable
this
.
onTargetDestroyed
)
;
}
async
onChangesFrontAvailable
(
changesFront
)
{
changesFront
.
on
(
"
add
-
change
"
this
.
onAddChange
)
;
changesFront
.
on
(
"
clear
-
changes
"
this
.
onClearChanges
)
;
try
{
const
changes
=
await
changesFront
.
allChanges
(
)
;
changes
.
forEach
(
change
=
>
{
this
.
onAddChange
(
change
)
;
}
)
;
}
catch
(
e
)
{
}
}
async
onChangesFrontDestroyed
(
changesFront
)
{
changesFront
.
off
(
"
add
-
change
"
this
.
onAddChange
)
;
changesFront
.
off
(
"
clear
-
changes
"
this
.
onClearChanges
)
;
}
async
onTargetAvailable
(
{
type
targetFront
isTopLevel
}
)
{
targetFront
.
watchFronts
(
"
changes
"
this
.
onChangesFrontAvailable
this
.
onChangesFrontDestroyed
)
;
if
(
isTopLevel
)
{
targetFront
.
on
(
"
will
-
navigate
"
this
.
onClearChanges
)
;
}
}
async
onTargetDestroyed
(
{
type
targetFront
isTopLevel
}
)
{
targetFront
.
unwatchFronts
(
"
changes
"
this
.
onChangesFrontAvailable
this
.
onChangesFrontDestroyed
)
;
if
(
isTopLevel
)
{
targetFront
.
off
(
"
will
-
navigate
"
this
.
onClearChanges
)
;
}
}
copyAllChanges
(
)
{
this
.
copyChanges
(
)
;
}
copyChanges
(
ruleId
sourceId
)
{
const
state
=
this
.
store
.
getState
(
)
.
changes
|
|
{
}
;
const
filter
=
{
}
;
if
(
ruleId
)
{
filter
.
ruleIds
=
[
ruleId
]
;
}
if
(
sourceId
)
{
filter
.
sourceIds
=
[
sourceId
]
;
}
const
text
=
getChangesStylesheet
(
state
filter
)
;
clipboardHelper
.
copyString
(
text
)
;
}
copyDeclaration
(
element
)
{
const
name
=
element
.
querySelector
(
"
.
changes__declaration
-
name
"
)
.
textContent
;
const
value
=
element
.
querySelector
(
"
.
changes__declaration
-
value
"
)
.
textContent
;
const
isRemoved
=
element
.
classList
.
contains
(
"
diff
-
remove
"
)
;
const
text
=
isRemoved
?
/
*
{
name
}
:
{
value
}
;
*
/
:
{
name
}
:
{
value
}
;
;
clipboardHelper
.
copyString
(
text
)
;
}
async
copyRule
(
ruleId
)
{
const
inspectorFronts
=
await
this
.
inspector
.
getAllInspectorFronts
(
)
;
for
(
const
inspectorFront
of
inspectorFronts
)
{
const
rule
=
await
inspectorFront
.
pageStyle
.
getRule
(
ruleId
)
;
if
(
rule
)
{
const
text
=
await
rule
.
getRuleText
(
)
;
clipboardHelper
.
copyString
(
text
)
;
break
;
}
}
}
onCopy
(
)
{
clipboardHelper
.
copyString
(
this
.
window
.
getSelection
(
)
.
toString
(
)
)
;
}
onAddChange
(
change
)
{
this
.
store
.
dispatch
(
trackChange
(
change
)
)
;
}
onClearChanges
(
)
{
this
.
store
.
dispatch
(
resetChanges
(
)
)
;
}
onSelectAll
(
)
{
const
selection
=
this
.
window
.
getSelection
(
)
;
selection
.
selectAllChildren
(
this
.
document
.
getElementById
(
"
sidebar
-
panel
-
changes
"
)
)
;
}
onContextMenu
(
e
)
{
this
.
contextMenu
.
show
(
e
)
;
}
destroy
(
)
{
this
.
store
.
dispatch
(
resetChanges
(
)
)
;
this
.
document
=
null
;
this
.
inspector
=
null
;
this
.
store
=
null
;
if
(
this
.
_contextMenu
)
{
this
.
_contextMenu
.
destroy
(
)
;
this
.
_contextMenu
=
null
;
}
}
}
module
.
exports
=
ChangesView
;
