"
use
strict
"
;
const
{
createFactory
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
ChangesApp
=
createFactory
(
require
(
"
.
/
components
/
ChangesApp
"
)
)
;
const
{
resetChanges
trackChange
}
=
require
(
"
.
/
actions
/
changes
"
)
;
class
ChangesView
{
constructor
(
inspector
window
)
{
this
.
document
=
window
.
document
;
this
.
inspector
=
inspector
;
this
.
store
=
this
.
inspector
.
store
;
this
.
toolbox
=
this
.
inspector
.
toolbox
;
this
.
onAddChange
=
this
.
onAddChange
.
bind
(
this
)
;
this
.
onClearChanges
=
this
.
onClearChanges
.
bind
(
this
)
;
this
.
destroy
=
this
.
destroy
.
bind
(
this
)
;
this
.
changesFront
=
this
.
toolbox
.
target
.
getFront
(
"
changes
"
)
;
this
.
changesFront
.
on
(
"
add
-
change
"
this
.
onAddChange
)
;
this
.
changesFront
.
on
(
"
clear
-
changes
"
this
.
onClearChanges
)
;
this
.
init
(
)
;
}
init
(
)
{
const
changesApp
=
ChangesApp
(
{
}
)
;
this
.
provider
=
createElement
(
Provider
{
id
:
"
changesview
"
key
:
"
changesview
"
store
:
this
.
store
}
changesApp
)
;
this
.
inspector
.
target
.
on
(
"
will
-
navigate
"
this
.
onClearChanges
)
;
this
.
syncChangesToServer
(
)
;
}
async
syncChangesToServer
(
)
{
this
.
onClearChanges
(
)
;
const
changes
=
await
this
.
changesFront
.
allChanges
(
)
;
changes
.
forEach
(
(
change
)
=
>
{
this
.
onAddChange
(
change
)
;
}
)
;
}
onAddChange
(
change
)
{
this
.
store
.
dispatch
(
trackChange
(
change
)
)
;
}
onClearChanges
(
)
{
this
.
store
.
dispatch
(
resetChanges
(
)
)
;
}
destroy
(
)
{
this
.
store
.
dispatch
(
resetChanges
(
)
)
;
this
.
changesFront
.
off
(
"
add
-
change
"
this
.
onAddChange
)
;
this
.
changesFront
.
off
(
"
clear
-
changes
"
this
.
onClearChanges
)
;
this
.
changesFront
=
null
;
this
.
document
=
null
;
this
.
inspector
=
null
;
this
.
store
=
null
;
this
.
toolbox
=
null
;
}
}
module
.
exports
=
ChangesView
;
