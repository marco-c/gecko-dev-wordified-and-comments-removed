"
use
strict
"
;
const
{
createFactory
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
loader
.
lazyRequireGetter
(
this
"
ChangesContextMenu
"
"
devtools
/
client
/
inspector
/
changes
/
ChangesContextMenu
"
)
;
const
ChangesApp
=
createFactory
(
require
(
"
.
/
components
/
ChangesApp
"
)
)
;
const
{
resetChanges
trackChange
}
=
require
(
"
.
/
actions
/
changes
"
)
;
class
ChangesView
{
constructor
(
inspector
window
)
{
this
.
document
=
window
.
document
;
this
.
inspector
=
inspector
;
this
.
store
=
this
.
inspector
.
store
;
this
.
onAddChange
=
this
.
onAddChange
.
bind
(
this
)
;
this
.
onClearChanges
=
this
.
onClearChanges
.
bind
(
this
)
;
this
.
onChangesFront
=
this
.
onChangesFront
.
bind
(
this
)
;
this
.
onContextMenu
=
this
.
onContextMenu
.
bind
(
this
)
;
this
.
destroy
=
this
.
destroy
.
bind
(
this
)
;
this
.
init
(
)
;
}
get
contextMenu
(
)
{
if
(
!
this
.
_contextMenu
)
{
this
.
_contextMenu
=
new
ChangesContextMenu
(
this
)
;
}
return
this
.
_contextMenu
;
}
init
(
)
{
const
changesApp
=
ChangesApp
(
{
onContextMenu
:
this
.
onContextMenu
}
)
;
this
.
_getChangesFront
(
)
;
this
.
provider
=
createElement
(
Provider
{
id
:
"
changesview
"
key
:
"
changesview
"
store
:
this
.
store
}
changesApp
)
;
this
.
inspector
.
target
.
on
(
"
will
-
navigate
"
this
.
onClearChanges
)
;
}
_getChangesFront
(
)
{
if
(
this
.
changesFrontPromise
)
{
return
this
.
changesFrontPromise
;
}
this
.
changesFrontPromise
=
new
Promise
(
async
resolve
=
>
{
const
target
=
this
.
inspector
.
target
;
const
front
=
await
target
.
getFront
(
"
changes
"
)
;
this
.
onChangesFront
(
front
)
;
resolve
(
front
)
;
}
)
;
return
this
.
changesFrontPromise
;
}
async
onChangesFront
(
changesFront
)
{
changesFront
.
on
(
"
add
-
change
"
this
.
onAddChange
)
;
changesFront
.
on
(
"
clear
-
changes
"
this
.
onClearChanges
)
;
try
{
const
changes
=
await
changesFront
.
allChanges
(
)
;
changes
.
forEach
(
change
=
>
{
this
.
onAddChange
(
change
)
;
}
)
;
}
catch
(
e
)
{
}
}
onAddChange
(
change
)
{
this
.
store
.
dispatch
(
trackChange
(
change
)
)
;
}
onClearChanges
(
)
{
this
.
store
.
dispatch
(
resetChanges
(
)
)
;
}
onContextMenu
(
e
)
{
this
.
contextMenu
.
show
(
e
)
;
}
async
destroy
(
)
{
this
.
store
.
dispatch
(
resetChanges
(
)
)
;
const
changesFront
=
await
this
.
changesFrontPromise
;
changesFront
.
off
(
"
add
-
change
"
this
.
onAddChange
)
;
changesFront
.
off
(
"
clear
-
changes
"
this
.
onClearChanges
)
;
this
.
document
=
null
;
this
.
inspector
=
null
;
this
.
store
=
null
;
if
(
this
.
_contextMenu
)
{
this
.
_contextMenu
.
destroy
(
)
;
this
.
_contextMenu
=
null
;
}
}
}
module
.
exports
=
ChangesView
;
