"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
Menu
"
"
devtools
/
client
/
framework
/
menu
"
)
;
loader
.
lazyRequireGetter
(
this
"
MenuItem
"
"
devtools
/
client
/
framework
/
menu
-
item
"
)
;
const
{
getStr
}
=
require
(
"
.
/
utils
/
l10n
"
)
;
class
ChangesContextMenu
{
constructor
(
view
)
{
this
.
view
=
view
;
this
.
inspector
=
this
.
view
.
inspector
;
this
.
document
=
this
.
view
.
document
;
this
.
panel
=
this
.
document
.
getElementById
(
"
sidebar
-
panel
-
changes
"
)
;
this
.
window
=
this
.
document
.
defaultView
;
this
.
_onCopyChanges
=
this
.
view
.
copyChanges
.
bind
(
this
.
view
)
;
this
.
_onCopyRule
=
this
.
view
.
copyRule
.
bind
(
this
.
view
)
;
this
.
_onCopySelection
=
this
.
view
.
copySelection
.
bind
(
this
.
view
)
;
this
.
_onSelectAll
=
this
.
_onSelectAll
.
bind
(
this
)
;
}
show
(
event
)
{
this
.
_openMenu
(
{
target
:
event
.
target
screenX
:
event
.
screenX
screenY
:
event
.
screenY
}
)
;
}
_openMenu
(
{
target
screenX
=
0
screenY
=
0
}
=
{
}
)
{
this
.
window
.
focus
(
)
;
const
menu
=
new
Menu
(
)
;
const
menuitemCopy
=
new
MenuItem
(
{
label
:
getStr
(
"
changes
.
contextmenu
.
copy
"
)
accesskey
:
getStr
(
"
changes
.
contextmenu
.
copy
.
accessKey
"
)
click
:
this
.
_onCopySelection
disabled
:
!
this
.
_hasTextSelected
(
)
}
)
;
menu
.
append
(
menuitemCopy
)
;
const
ruleEl
=
target
.
closest
(
"
[
data
-
rule
-
id
]
"
)
;
const
ruleId
=
ruleEl
?
ruleEl
.
dataset
.
ruleId
:
null
;
const
sourceEl
=
target
.
closest
(
"
[
data
-
source
-
id
]
"
)
;
const
sourceId
=
sourceEl
?
sourceEl
.
dataset
.
sourceId
:
null
;
if
(
ruleId
&
&
sourceId
)
{
menu
.
append
(
new
MenuItem
(
{
label
:
getStr
(
"
changes
.
contextmenu
.
copyChanges
"
)
click
:
(
)
=
>
this
.
_onCopyChanges
(
ruleId
sourceId
)
}
)
)
;
menu
.
append
(
new
MenuItem
(
{
label
:
getStr
(
"
changes
.
contextmenu
.
copyRule
"
)
click
:
(
)
=
>
this
.
_onCopyRule
(
ruleId
)
}
)
)
;
menu
.
append
(
new
MenuItem
(
{
type
:
"
separator
"
}
)
)
;
}
if
(
!
ruleId
&
&
sourceId
)
{
menu
.
append
(
new
MenuItem
(
{
label
:
getStr
(
"
changes
.
contextmenu
.
copyAllChanges
"
)
click
:
(
)
=
>
this
.
_onCopyChanges
(
null
sourceId
)
}
)
)
;
menu
.
append
(
new
MenuItem
(
{
type
:
"
separator
"
}
)
)
;
}
const
menuitemSelectAll
=
new
MenuItem
(
{
label
:
getStr
(
"
changes
.
contextmenu
.
selectAll
"
)
accesskey
:
getStr
(
"
changes
.
contextmenu
.
selectAll
.
accessKey
"
)
click
:
this
.
_onSelectAll
}
)
;
menu
.
append
(
menuitemSelectAll
)
;
menu
.
popup
(
screenX
screenY
this
.
inspector
.
toolbox
)
;
return
menu
;
}
_hasTextSelected
(
)
{
const
selection
=
this
.
window
.
getSelection
(
)
;
return
selection
.
toString
(
)
&
&
!
selection
.
isCollapsed
;
}
_onSelectAll
(
)
{
const
selection
=
this
.
window
.
getSelection
(
)
;
selection
.
selectAllChildren
(
this
.
panel
)
;
}
destroy
(
)
{
this
.
inspector
=
null
;
this
.
panel
=
null
;
this
.
view
=
null
;
this
.
window
=
null
;
}
}
module
.
exports
=
ChangesContextMenu
;
