"
use
strict
"
;
function
getChangesTree
(
state
)
{
function
expandRuleChildren
(
ruleId
rule
rules
visitedRules
)
{
if
(
visitedRules
.
has
(
ruleId
)
)
{
return
null
;
}
visitedRules
.
add
(
ruleId
)
;
return
{
.
.
.
rule
children
:
rule
.
children
.
map
(
childRuleId
=
>
expandRuleChildren
(
childRuleId
rules
[
childRuleId
]
rules
visitedRules
)
)
}
;
}
return
Object
.
entries
(
state
)
.
reduce
(
(
sourcesObj
[
sourceId
source
]
)
=
>
{
const
{
rules
}
=
source
;
const
visitedRules
=
new
Set
(
)
;
sourcesObj
[
sourceId
]
=
{
.
.
.
source
rules
:
Object
.
entries
(
rules
)
.
reduce
(
(
rulesObj
[
ruleId
rule
]
)
=
>
{
const
expandedRule
=
expandRuleChildren
(
ruleId
rule
rules
visitedRules
)
;
if
(
expandedRule
!
=
=
null
)
{
rulesObj
[
ruleId
]
=
expandedRule
;
}
return
rulesObj
;
}
{
}
)
}
;
return
sourcesObj
;
}
{
}
)
;
}
module
.
exports
=
{
getChangesTree
}
;
