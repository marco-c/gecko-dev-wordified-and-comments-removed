"
use
strict
"
;
const
STYLE
=
"
div
{
position
:
absolute
;
top
:
50px
;
left
:
50px
;
"
+
"
height
:
10px
;
width
:
10px
;
border
:
10px
solid
black
;
"
+
"
padding
:
10px
;
margin
:
10px
;
}
"
;
const
HTML
=
"
<
style
>
"
+
STYLE
+
"
<
/
style
>
<
div
>
<
/
div
>
"
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
HTML
)
;
var
highlightedNodeFront
highlighterOptions
;
add_task
(
async
function
(
)
{
await
addTab
(
TEST_URL
)
;
let
{
toolbox
inspector
boxmodel
}
=
await
openLayoutView
(
)
;
await
selectNode
(
"
div
"
inspector
)
;
toolbox
.
highlighter
.
showBoxModel
=
function
(
nodeFront
options
)
{
highlightedNodeFront
=
nodeFront
;
highlighterOptions
=
options
;
}
;
let
elt
=
boxmodel
.
document
.
querySelector
(
"
.
boxmodel
-
margins
"
)
;
await
testGuideOnLayoutHover
(
elt
"
margin
"
inspector
)
;
elt
=
boxmodel
.
document
.
querySelector
(
"
.
boxmodel
-
borders
"
)
;
await
testGuideOnLayoutHover
(
elt
"
border
"
inspector
)
;
elt
=
boxmodel
.
document
.
querySelector
(
"
.
boxmodel
-
paddings
"
)
;
await
testGuideOnLayoutHover
(
elt
"
padding
"
inspector
)
;
elt
=
boxmodel
.
document
.
querySelector
(
"
.
boxmodel
-
content
"
)
;
await
testGuideOnLayoutHover
(
elt
"
content
"
inspector
)
;
}
)
;
async
function
testGuideOnLayoutHover
(
elt
expectedRegion
inspector
)
{
info
(
"
Synthesizing
mouseover
on
the
boxmodel
-
view
"
)
;
EventUtils
.
synthesizeMouse
(
elt
2
2
{
type
:
"
mouseover
"
}
elt
.
ownerDocument
.
defaultView
)
;
info
(
"
Waiting
for
the
node
-
highlight
event
from
the
toolbox
"
)
;
await
inspector
.
toolbox
.
once
(
"
node
-
highlight
"
)
;
await
new
Promise
(
executeSoon
)
;
is
(
highlightedNodeFront
inspector
.
selection
.
nodeFront
"
The
right
nodeFront
was
highlighted
"
)
;
is
(
highlighterOptions
.
region
expectedRegion
"
Region
"
+
expectedRegion
+
"
was
highlighted
"
)
;
}
