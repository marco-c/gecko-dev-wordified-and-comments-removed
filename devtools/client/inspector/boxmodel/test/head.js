"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
head
.
js
"
this
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolbox
.
footer
.
height
"
350
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
footer
.
height
"
)
;
}
)
;
function
*
selectAndHighlightNode
(
selectorOrNodeFront
inspector
)
{
info
(
"
Highlighting
and
selecting
the
node
"
+
selectorOrNodeFront
)
;
let
nodeFront
=
yield
getNodeFront
(
selectorOrNodeFront
inspector
)
;
let
updated
=
inspector
.
toolbox
.
once
(
"
highlighter
-
ready
"
)
;
inspector
.
selection
.
setNodeFront
(
nodeFront
"
test
-
highlight
"
)
;
yield
updated
;
}
function
openBoxModelView
(
)
{
return
openInspectorSidebarTab
(
"
computedview
"
)
.
then
(
data
=
>
{
function
mockHighlighter
(
{
highlighter
}
)
{
highlighter
.
showBoxModel
=
function
(
)
{
return
promise
.
resolve
(
)
;
}
;
highlighter
.
hideBoxModel
=
function
(
)
{
return
promise
.
resolve
(
)
;
}
;
}
mockHighlighter
(
data
.
toolbox
)
;
return
{
toolbox
:
data
.
toolbox
inspector
:
data
.
inspector
view
:
data
.
inspector
.
computedview
testActor
:
data
.
testActor
}
;
}
)
;
}
function
waitForUpdate
(
inspector
)
{
return
inspector
.
once
(
"
boxmodel
-
view
-
updated
"
)
;
}
function
getStyle
(
testActor
selector
propertyName
)
{
return
testActor
.
eval
(
content
.
document
.
querySelector
(
"
{
selector
}
"
)
.
style
.
getPropertyValue
(
"
{
propertyName
}
"
)
;
)
;
}
function
setStyle
(
testActor
selector
propertyName
value
)
{
return
testActor
.
eval
(
content
.
document
.
querySelector
(
"
{
selector
}
"
)
.
style
.
{
propertyName
}
=
"
{
value
}
"
;
)
;
}
var
_selectNode
=
selectNode
;
selectNode
=
function
*
(
node
inspector
reason
)
{
yield
_selectNode
(
node
inspector
reason
)
;
yield
waitForUpdate
(
inspector
)
;
}
;
