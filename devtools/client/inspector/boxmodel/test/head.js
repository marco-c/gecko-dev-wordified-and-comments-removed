"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
head
.
js
"
this
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolbox
.
footer
.
height
"
350
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
footer
.
height
"
)
;
}
)
;
async
function
selectAndHighlightNode
(
selectorOrNodeFront
inspector
)
{
info
(
"
Highlighting
and
selecting
the
node
"
+
selectorOrNodeFront
)
;
const
nodeFront
=
await
getNodeFront
(
selectorOrNodeFront
inspector
)
;
const
onHovered
=
inspector
.
inspectorFront
.
nodePicker
.
once
(
"
picker
-
node
-
hovered
"
)
;
inspector
.
selection
.
setNodeFront
(
nodeFront
{
reason
:
"
test
-
highlight
"
}
)
;
await
onHovered
;
}
function
isNodeVisible
(
node
)
{
return
!
!
node
.
getClientRects
(
)
.
length
;
}
function
waitForUpdate
(
inspector
waitForSelectionUpdate
)
{
return
new
Promise
(
resolve
=
>
{
inspector
.
on
(
"
boxmodel
-
view
-
updated
"
function
onUpdate
(
reasons
)
{
if
(
waitForSelectionUpdate
&
&
!
reasons
.
includes
(
"
new
-
selection
"
)
)
{
return
;
}
inspector
.
off
(
"
boxmodel
-
view
-
updated
"
onUpdate
)
;
resolve
(
)
;
}
)
;
}
)
;
}
function
waitForMarkupLoaded
(
inspector
)
{
return
Promise
.
all
(
[
waitForUpdate
(
inspector
)
inspector
.
once
(
"
markuploaded
"
)
]
)
;
}
function
getStyle
(
testActor
selector
propertyName
)
{
return
testActor
.
eval
(
document
.
querySelector
(
"
{
selector
}
"
)
.
style
.
getPropertyValue
(
"
{
propertyName
}
"
)
;
)
;
}
function
setStyle
(
testActor
selector
propertyName
value
)
{
return
testActor
.
eval
(
document
.
querySelector
(
"
{
selector
}
"
)
.
style
.
{
propertyName
}
=
"
{
value
}
"
;
)
;
}
var
_selectNode
=
selectNode
;
selectNode
=
async
function
(
node
inspector
reason
)
{
const
onUpdate
=
waitForUpdate
(
inspector
true
)
;
await
_selectNode
(
node
inspector
reason
)
;
await
onUpdate
;
}
;
