"
use
strict
"
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
getCssProperties
}
=
require
(
"
devtools
/
shared
/
fronts
/
css
-
properties
"
)
;
const
{
InplaceEditor
}
=
require
(
"
devtools
/
client
/
shared
/
inplace
-
editor
"
)
;
const
{
updateGeometryEditorEnabled
updateLayout
updateOffsetParent
}
=
require
(
"
.
/
actions
/
box
-
model
"
)
;
const
EditingSession
=
require
(
"
.
/
utils
/
editing
-
session
"
)
;
const
NUMERIC
=
/
^
-
?
[
\
d
\
.
]
+
/
;
function
BoxModel
(
inspector
window
)
{
this
.
document
=
window
.
document
;
this
.
highlighters
=
inspector
.
highlighters
;
this
.
inspector
=
inspector
;
this
.
store
=
inspector
.
store
;
this
.
updateBoxModel
=
this
.
updateBoxModel
.
bind
(
this
)
;
this
.
onHideBoxModelHighlighter
=
this
.
onHideBoxModelHighlighter
.
bind
(
this
)
;
this
.
onHideGeometryEditor
=
this
.
onHideGeometryEditor
.
bind
(
this
)
;
this
.
onMarkupViewLeave
=
this
.
onMarkupViewLeave
.
bind
(
this
)
;
this
.
onMarkupViewNodeHover
=
this
.
onMarkupViewNodeHover
.
bind
(
this
)
;
this
.
onNewSelection
=
this
.
onNewSelection
.
bind
(
this
)
;
this
.
onShowBoxModelEditor
=
this
.
onShowBoxModelEditor
.
bind
(
this
)
;
this
.
onShowBoxModelHighlighter
=
this
.
onShowBoxModelHighlighter
.
bind
(
this
)
;
this
.
onSidebarSelect
=
this
.
onSidebarSelect
.
bind
(
this
)
;
this
.
onToggleGeometryEditor
=
this
.
onToggleGeometryEditor
.
bind
(
this
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onNewSelection
)
;
this
.
inspector
.
sidebar
.
on
(
"
select
"
this
.
onSidebarSelect
)
;
}
BoxModel
.
prototype
=
{
destroy
(
)
{
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onNewSelection
)
;
this
.
inspector
.
sidebar
.
off
(
"
select
"
this
.
onSidebarSelect
)
;
this
.
untrackReflows
(
)
;
this
.
document
=
null
;
this
.
highlighters
=
null
;
this
.
inspector
=
null
;
this
.
walker
=
null
;
}
getComponentProps
(
)
{
return
{
onHideBoxModelHighlighter
:
this
.
onHideBoxModelHighlighter
onShowBoxModelEditor
:
this
.
onShowBoxModelEditor
onShowBoxModelHighlighter
:
this
.
onShowBoxModelHighlighter
onToggleGeometryEditor
:
this
.
onToggleGeometryEditor
}
;
}
isPanelVisible
(
)
{
return
this
.
inspector
.
toolbox
&
&
this
.
inspector
.
sidebar
&
&
this
.
inspector
.
toolbox
.
currentToolId
=
=
=
"
inspector
"
&
&
(
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
=
"
layoutview
"
|
|
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
=
"
computedview
"
)
;
}
isPanelVisibleAndNodeValid
(
)
{
return
this
.
isPanelVisible
(
)
&
&
this
.
inspector
.
selection
.
isConnected
(
)
&
&
this
.
inspector
.
selection
.
isElementNode
(
)
;
}
trackReflows
(
)
{
this
.
inspector
.
reflowTracker
.
trackReflows
(
this
this
.
updateBoxModel
)
;
}
untrackReflows
(
)
{
this
.
inspector
.
reflowTracker
.
untrackReflows
(
this
this
.
updateBoxModel
)
;
}
updateBoxModel
(
reason
)
{
this
.
_updateReasons
=
this
.
_updateReasons
|
|
[
]
;
if
(
reason
)
{
this
.
_updateReasons
.
push
(
reason
)
;
}
let
lastRequest
=
Task
.
spawn
(
(
function
*
(
)
{
if
(
!
this
.
inspector
|
|
!
this
.
isPanelVisible
(
)
|
|
!
this
.
inspector
.
selection
.
isConnected
(
)
|
|
!
this
.
inspector
.
selection
.
isElementNode
(
)
)
{
return
null
;
}
let
node
=
this
.
inspector
.
selection
.
nodeFront
;
let
layout
=
yield
this
.
inspector
.
pageStyle
.
getLayout
(
node
{
autoMargins
:
true
}
)
;
let
styleEntries
=
yield
this
.
inspector
.
pageStyle
.
getApplied
(
node
{
skipPseudo
:
true
}
)
;
this
.
elementRules
=
styleEntries
.
map
(
e
=
>
e
.
rule
)
;
let
isPositionEditable
=
yield
this
.
inspector
.
pageStyle
.
isPositionEditable
(
node
)
;
layout
=
Object
.
assign
(
{
}
layout
{
isPositionEditable
}
)
;
const
actorCanGetOffSetParent
=
yield
this
.
inspector
.
target
.
actorHasMethod
(
"
domwalker
"
"
getOffsetParent
"
)
;
if
(
actorCanGetOffSetParent
)
{
let
offsetParent
=
yield
this
.
inspector
.
walker
.
getOffsetParent
(
node
)
;
this
.
store
.
dispatch
(
updateOffsetParent
(
offsetParent
)
)
;
}
this
.
store
.
dispatch
(
updateLayout
(
layout
)
)
;
if
(
this
.
_lastRequest
!
=
lastRequest
)
{
return
this
.
_lastRequest
;
}
this
.
inspector
.
emit
(
"
boxmodel
-
view
-
updated
"
this
.
_updateReasons
)
;
this
.
_lastRequest
=
null
;
this
.
_updateReasons
=
[
]
;
return
null
;
}
)
.
bind
(
this
)
)
.
catch
(
console
.
error
)
;
this
.
_lastRequest
=
lastRequest
;
}
onHideBoxModelHighlighter
(
)
{
if
(
!
this
.
inspector
)
{
return
;
}
let
toolbox
=
this
.
inspector
.
toolbox
;
toolbox
.
highlighterUtils
.
unhighlight
(
)
;
}
onHideGeometryEditor
(
)
{
let
{
markup
selection
toolbox
}
=
this
.
inspector
;
this
.
highlighters
.
hideGeometryEditor
(
)
;
this
.
store
.
dispatch
(
updateGeometryEditorEnabled
(
false
)
)
;
toolbox
.
off
(
"
picker
-
started
"
this
.
onHideGeometryEditor
)
;
selection
.
off
(
"
new
-
node
-
front
"
this
.
onHideGeometryEditor
)
;
markup
.
off
(
"
leave
"
this
.
onMarkupViewLeave
)
;
markup
.
off
(
"
node
-
hover
"
this
.
onMarkupViewNodeHover
)
;
}
onMarkupViewLeave
(
)
{
let
state
=
this
.
store
.
getState
(
)
;
let
enabled
=
state
.
boxModel
.
geometryEditorEnabled
;
if
(
!
enabled
)
{
return
;
}
let
nodeFront
=
this
.
inspector
.
selection
.
nodeFront
;
this
.
highlighters
.
showGeometryEditor
(
nodeFront
)
;
}
onMarkupViewNodeHover
(
)
{
this
.
highlighters
.
hideGeometryEditor
(
)
;
}
onNewSelection
(
)
{
if
(
!
this
.
isPanelVisibleAndNodeValid
(
)
)
{
return
;
}
if
(
this
.
inspector
.
selection
.
isConnected
(
)
&
&
this
.
inspector
.
selection
.
isElementNode
(
)
)
{
this
.
trackReflows
(
)
;
}
this
.
updateBoxModel
(
"
new
-
selection
"
)
;
}
onShowBoxModelEditor
(
element
event
property
)
{
let
session
=
new
EditingSession
(
{
inspector
:
this
.
inspector
doc
:
this
.
document
elementRules
:
this
.
elementRules
}
)
;
let
initialValue
=
session
.
getProperty
(
property
)
;
let
editor
=
new
InplaceEditor
(
{
element
:
element
initial
:
initialValue
contentType
:
InplaceEditor
.
CONTENT_TYPES
.
CSS_VALUE
property
:
{
name
:
property
}
start
:
self
=
>
{
self
.
elt
.
parentNode
.
classList
.
add
(
"
boxmodel
-
editing
"
)
;
}
change
:
value
=
>
{
if
(
NUMERIC
.
test
(
value
)
)
{
value
+
=
"
px
"
;
}
let
properties
=
[
{
name
:
property
value
:
value
}
]
;
if
(
property
.
substring
(
0
7
)
=
=
"
border
-
"
)
{
let
bprop
=
property
.
substring
(
0
property
.
length
-
5
)
+
"
style
"
;
let
style
=
session
.
getProperty
(
bprop
)
;
if
(
!
style
|
|
style
=
=
"
none
"
|
|
style
=
=
"
hidden
"
)
{
properties
.
push
(
{
name
:
bprop
value
:
"
solid
"
}
)
;
}
}
if
(
property
.
substring
(
0
9
)
=
=
"
position
-
"
)
{
properties
[
0
]
.
name
=
property
.
substring
(
9
)
;
}
session
.
setProperties
(
properties
)
.
catch
(
console
.
error
)
;
}
done
:
(
value
commit
)
=
>
{
editor
.
elt
.
parentNode
.
classList
.
remove
(
"
boxmodel
-
editing
"
)
;
if
(
!
commit
)
{
session
.
revert
(
)
.
then
(
(
)
=
>
{
session
.
destroy
(
)
;
}
console
.
error
)
;
return
;
}
if
(
!
this
.
inspector
)
{
return
;
}
let
node
=
this
.
inspector
.
selection
.
nodeFront
;
this
.
inspector
.
pageStyle
.
getLayout
(
node
{
autoMargins
:
true
}
)
.
then
(
layout
=
>
{
this
.
store
.
dispatch
(
updateLayout
(
layout
)
)
;
}
console
.
error
)
;
}
cssProperties
:
getCssProperties
(
this
.
inspector
.
toolbox
)
}
event
)
;
}
onShowBoxModelHighlighter
(
options
=
{
}
)
{
if
(
!
this
.
inspector
)
{
return
;
}
let
toolbox
=
this
.
inspector
.
toolbox
;
let
nodeFront
=
this
.
inspector
.
selection
.
nodeFront
;
toolbox
.
highlighterUtils
.
highlightNodeFront
(
nodeFront
options
)
;
}
onSidebarSelect
(
)
{
if
(
!
this
.
isPanelVisible
(
)
)
{
this
.
untrackReflows
(
)
;
return
;
}
if
(
this
.
inspector
.
selection
.
isConnected
(
)
&
&
this
.
inspector
.
selection
.
isElementNode
(
)
)
{
this
.
trackReflows
(
)
;
}
this
.
updateBoxModel
(
)
;
}
onToggleGeometryEditor
(
)
{
let
{
markup
selection
toolbox
}
=
this
.
inspector
;
let
nodeFront
=
this
.
inspector
.
selection
.
nodeFront
;
let
state
=
this
.
store
.
getState
(
)
;
let
enabled
=
!
state
.
boxModel
.
geometryEditorEnabled
;
this
.
highlighters
.
toggleGeometryHighlighter
(
nodeFront
)
;
this
.
store
.
dispatch
(
updateGeometryEditorEnabled
(
enabled
)
)
;
if
(
enabled
)
{
toolbox
.
on
(
"
picker
-
started
"
this
.
onHideGeometryEditor
)
;
selection
.
on
(
"
new
-
node
-
front
"
this
.
onHideGeometryEditor
)
;
markup
.
on
(
"
leave
"
this
.
onMarkupViewLeave
)
;
markup
.
on
(
"
node
-
hover
"
this
.
onMarkupViewNodeHover
)
;
}
else
{
toolbox
.
off
(
"
picker
-
started
"
this
.
onHideGeometryEditor
)
;
selection
.
off
(
"
new
-
node
-
front
"
this
.
onHideGeometryEditor
)
;
markup
.
off
(
"
leave
"
this
.
onMarkupViewLeave
)
;
markup
.
off
(
"
node
-
hover
"
this
.
onMarkupViewNodeHover
)
;
}
}
}
;
module
.
exports
=
BoxModel
;
