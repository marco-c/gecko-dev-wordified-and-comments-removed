"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
getCssProperties
"
"
devtools
/
shared
/
fronts
/
css
-
properties
"
true
)
;
function
EditingSession
(
{
inspector
doc
elementRules
}
)
{
this
.
_doc
=
doc
;
this
.
_inspector
=
inspector
;
this
.
_rules
=
elementRules
;
this
.
_modifications
=
new
Map
(
)
;
}
EditingSession
.
prototype
=
{
get
cssProperties
(
)
{
if
(
!
this
.
_cssProperties
)
{
this
.
_cssProperties
=
getCssProperties
(
this
.
_inspector
.
toolbox
)
;
}
return
this
.
_cssProperties
;
}
getPropertyFromRule
:
function
(
rule
property
)
{
const
index
=
this
.
getPropertyIndex
(
property
rule
)
;
if
(
index
!
=
=
-
1
)
{
return
rule
.
declarations
[
index
]
.
value
;
}
const
dummyStyle
=
this
.
_element
.
style
;
dummyStyle
.
cssText
=
rule
.
cssText
;
return
dummyStyle
.
getPropertyValue
(
property
)
;
}
getProperty
:
function
(
property
)
{
const
div
=
this
.
_doc
.
createElement
(
"
div
"
)
;
div
.
setAttribute
(
"
style
"
"
display
:
none
"
)
;
this
.
_doc
.
getElementById
(
"
inspector
-
main
-
content
"
)
.
appendChild
(
div
)
;
this
.
_element
=
this
.
_doc
.
createElement
(
"
p
"
)
;
div
.
appendChild
(
this
.
_element
)
;
for
(
const
rule
of
this
.
_rules
)
{
const
value
=
this
.
getPropertyFromRule
(
rule
property
)
;
if
(
value
!
=
=
"
"
)
{
div
.
remove
(
)
;
return
value
;
}
}
div
.
remove
(
)
;
return
"
"
;
}
getPropertyIndex
:
function
(
name
rule
=
this
.
_rules
[
0
]
)
{
const
elementStyleRule
=
this
.
_rules
[
0
]
;
if
(
!
elementStyleRule
.
declarations
.
length
)
{
return
-
1
;
}
return
elementStyleRule
.
declarations
.
findIndex
(
p
=
>
p
.
name
=
=
=
name
)
;
}
async
setProperties
(
properties
)
{
for
(
const
property
of
properties
)
{
const
modifications
=
this
.
_rules
[
0
]
.
startModifyingProperties
(
this
.
cssProperties
)
;
if
(
!
this
.
_modifications
.
has
(
property
.
name
)
)
{
this
.
_modifications
.
set
(
property
.
name
this
.
getPropertyFromRule
(
this
.
_rules
[
0
]
property
.
name
)
)
;
}
let
index
=
this
.
getPropertyIndex
(
property
.
name
)
;
if
(
index
=
=
=
-
1
)
{
index
=
this
.
_rules
[
0
]
.
declarations
.
length
;
}
if
(
property
.
value
=
=
"
"
)
{
modifications
.
removeProperty
(
index
property
.
name
)
;
}
else
{
modifications
.
setProperty
(
index
property
.
name
property
.
value
"
"
)
;
}
await
modifications
.
apply
(
)
;
}
}
async
revert
(
)
{
for
(
const
[
property
value
]
of
this
.
_modifications
)
{
const
modifications
=
this
.
_rules
[
0
]
.
startModifyingProperties
(
this
.
cssProperties
)
;
let
index
=
this
.
getPropertyIndex
(
property
)
;
if
(
value
!
=
"
"
)
{
if
(
index
=
=
=
-
1
)
{
index
=
0
;
}
modifications
.
setProperty
(
index
property
value
"
"
)
;
}
else
{
if
(
index
=
=
=
-
1
)
{
continue
;
}
modifications
.
removeProperty
(
index
property
)
;
}
await
modifications
.
apply
(
)
;
}
}
destroy
:
function
(
)
{
this
.
_modifications
.
clear
(
)
;
this
.
_cssProperties
=
null
;
this
.
_doc
=
null
;
this
.
_inspector
=
null
;
this
.
_modifications
=
null
;
this
.
_rules
=
null
;
}
}
;
module
.
exports
=
EditingSession
;
