"
use
strict
"
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
DEFAULT_PREVIEW_TEXT
=
"
Abc
"
;
const
PREVIEW_UPDATE_DELAY
=
150
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
getColor
}
=
require
(
"
devtools
/
client
/
shared
/
theme
"
)
;
function
FontInspector
(
inspector
window
)
{
this
.
inspector
=
inspector
;
this
.
pageStyle
=
this
.
inspector
.
pageStyle
;
this
.
chromeDoc
=
window
.
document
;
this
.
init
(
)
;
}
FontInspector
.
prototype
=
{
init
(
)
{
this
.
update
=
this
.
update
.
bind
(
this
)
;
this
.
onNewNode
=
this
.
onNewNode
.
bind
(
this
)
;
this
.
onThemeChanged
=
this
.
onThemeChanged
.
bind
(
this
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onNewNode
)
;
this
.
inspector
.
sidebar
.
on
(
"
fontinspector
-
selected
"
this
.
onNewNode
)
;
this
.
showAll
=
this
.
showAll
.
bind
(
this
)
;
this
.
showAllLink
=
this
.
chromeDoc
.
getElementById
(
"
font
-
showall
"
)
;
this
.
showAllLink
.
addEventListener
(
"
click
"
this
.
showAll
)
;
this
.
previewTextChanged
=
this
.
previewTextChanged
.
bind
(
this
)
;
this
.
previewInput
=
this
.
chromeDoc
.
getElementById
(
"
font
-
preview
-
text
-
input
"
)
;
this
.
previewInput
.
addEventListener
(
"
input
"
this
.
previewTextChanged
)
;
this
.
previewInput
.
addEventListener
(
"
contextmenu
"
this
.
inspector
.
onTextBoxContextMenu
)
;
gDevTools
.
on
(
"
theme
-
switched
"
this
.
onThemeChanged
)
;
this
.
update
(
)
;
}
isActive
(
)
{
return
this
.
inspector
.
sidebar
&
&
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
"
fontinspector
"
;
}
destroy
(
)
{
this
.
chromeDoc
=
null
;
this
.
inspector
.
sidebar
.
off
(
"
fontinspector
-
selected
"
this
.
onNewNode
)
;
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onNewNode
)
;
this
.
showAllLink
.
removeEventListener
(
"
click
"
this
.
showAll
)
;
this
.
previewInput
.
removeEventListener
(
"
input
"
this
.
previewTextChanged
)
;
this
.
previewInput
.
removeEventListener
(
"
contextmenu
"
this
.
inspector
.
onTextBoxContextMenu
)
;
gDevTools
.
off
(
"
theme
-
switched
"
this
.
onThemeChanged
)
;
if
(
this
.
_previewUpdateTimeout
)
{
clearTimeout
(
this
.
_previewUpdateTimeout
)
;
}
}
onNewNode
(
)
{
if
(
this
.
isActive
(
)
&
&
this
.
inspector
.
selection
.
isConnected
(
)
&
&
this
.
inspector
.
selection
.
isElementNode
(
)
)
{
this
.
undim
(
)
;
this
.
update
(
)
;
}
else
{
this
.
dim
(
)
;
}
}
getPreviewText
(
)
{
let
inputText
=
this
.
previewInput
.
value
.
trim
(
)
;
if
(
inputText
=
=
=
"
"
)
{
return
DEFAULT_PREVIEW_TEXT
;
}
return
inputText
;
}
previewTextChanged
(
)
{
if
(
this
.
_previewUpdateTimeout
)
{
clearTimeout
(
this
.
_previewUpdateTimeout
)
;
}
this
.
_previewUpdateTimeout
=
setTimeout
(
(
)
=
>
{
this
.
update
(
this
.
_lastUpdateShowedAllFonts
)
;
}
PREVIEW_UPDATE_DELAY
)
;
}
onThemeChanged
(
event
frame
)
{
if
(
frame
=
=
=
this
.
chromeDoc
.
defaultView
)
{
this
.
update
(
this
.
_lastUpdateShowedAllFonts
)
;
}
}
dim
(
)
{
let
panel
=
this
.
chromeDoc
.
getElementById
(
"
sidebar
-
panel
-
fontinspector
"
)
;
panel
.
classList
.
add
(
"
dim
"
)
;
this
.
clear
(
)
;
}
undim
(
)
{
let
panel
=
this
.
chromeDoc
.
getElementById
(
"
sidebar
-
panel
-
fontinspector
"
)
;
panel
.
classList
.
remove
(
"
dim
"
)
;
}
clear
(
)
{
this
.
chromeDoc
.
querySelector
(
"
#
all
-
fonts
"
)
.
innerHTML
=
"
"
;
}
update
:
Task
.
async
(
function
*
(
showAllFonts
)
{
let
node
=
this
.
inspector
.
selection
.
nodeFront
;
let
panel
=
this
.
chromeDoc
.
getElementById
(
"
sidebar
-
panel
-
fontinspector
"
)
;
if
(
!
node
|
|
!
this
.
isActive
(
)
|
|
!
this
.
inspector
.
selection
.
isConnected
(
)
|
|
!
this
.
inspector
.
selection
.
isElementNode
(
)
|
|
panel
.
classList
.
contains
(
"
dim
"
)
)
{
return
;
}
this
.
_lastUpdateShowedAllFonts
=
showAllFonts
;
let
options
=
{
includePreviews
:
true
previewText
:
this
.
getPreviewText
(
)
previewFillStyle
:
getColor
(
"
body
-
color
"
)
}
;
let
fonts
=
[
]
;
if
(
showAllFonts
)
{
fonts
=
yield
this
.
pageStyle
.
getAllUsedFontFaces
(
options
)
.
then
(
null
console
.
error
)
;
}
else
{
fonts
=
yield
this
.
pageStyle
.
getUsedFontFaces
(
node
options
)
.
then
(
null
console
.
error
)
;
}
if
(
!
fonts
|
|
!
fonts
.
length
)
{
this
.
clear
(
)
;
return
;
}
for
(
let
font
of
fonts
)
{
font
.
previewUrl
=
yield
font
.
preview
.
data
.
string
(
)
;
}
if
(
!
this
.
chromeDoc
)
{
return
;
}
this
.
clear
(
)
;
for
(
let
font
of
fonts
)
{
this
.
render
(
font
)
;
}
this
.
inspector
.
emit
(
"
fontinspector
-
updated
"
)
;
}
)
render
(
font
)
{
let
s
=
this
.
chromeDoc
.
querySelector
(
"
#
font
-
template
>
section
"
)
;
s
=
s
.
cloneNode
(
true
)
;
s
.
querySelector
(
"
.
font
-
name
"
)
.
textContent
=
font
.
name
;
s
.
querySelector
(
"
.
font
-
css
-
name
"
)
.
textContent
=
font
.
CSSFamilyName
;
if
(
font
.
URI
)
{
s
.
classList
.
add
(
"
is
-
remote
"
)
;
}
else
{
s
.
classList
.
add
(
"
is
-
local
"
)
;
}
let
formatElem
=
s
.
querySelector
(
"
.
font
-
format
"
)
;
if
(
font
.
format
)
{
formatElem
.
textContent
=
font
.
format
;
}
else
{
formatElem
.
hidden
=
true
;
}
s
.
querySelector
(
"
.
font
-
url
"
)
.
value
=
font
.
URI
;
if
(
font
.
rule
)
{
let
cssText
=
font
.
ruleText
;
s
.
classList
.
add
(
"
has
-
code
"
)
;
s
.
querySelector
(
"
.
font
-
css
-
code
"
)
.
textContent
=
cssText
;
}
let
preview
=
s
.
querySelector
(
"
.
font
-
preview
"
)
;
preview
.
src
=
font
.
previewUrl
;
this
.
chromeDoc
.
querySelector
(
"
#
all
-
fonts
"
)
.
appendChild
(
s
)
;
}
showAll
(
)
{
this
.
update
(
true
)
;
}
}
;
exports
.
FontInspector
=
FontInspector
;
