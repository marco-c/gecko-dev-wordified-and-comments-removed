"
use
strict
"
;
const
{
gDevTools
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
framework
/
devtools
.
js
"
)
;
const
{
getCssVariableColor
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
theme
.
js
"
)
;
const
{
createFactory
createElement
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
{
Provider
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
redux
.
js
"
)
;
const
{
debounce
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
debounce
.
js
"
)
;
const
{
style
:
{
ELEMENT_STYLE
}
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
constants
.
js
"
)
;
const
FontsApp
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
components
/
FontsApp
.
js
"
)
)
;
const
{
LocalizationHelper
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
l10n
.
js
"
)
;
const
INSPECTOR_L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
inspector
.
properties
"
)
;
const
{
parseFontVariationAxes
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
utils
/
font
-
utils
.
js
"
)
;
const
fontDataReducer
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
reducers
/
fonts
.
js
"
)
;
const
fontEditorReducer
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
reducers
/
font
-
editor
.
js
"
)
;
const
fontOptionsReducer
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
reducers
/
font
-
options
.
js
"
)
;
const
{
updateFonts
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
actions
/
fonts
.
js
"
)
;
const
{
applyInstance
resetFontEditor
setEditorDisabled
updateAxis
updateFontEditor
updateFontProperty
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
actions
/
font
-
editor
.
js
"
)
;
const
{
updatePreviewText
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
actions
/
font
-
options
.
js
"
)
;
const
{
TYPES
:
HIGHLIGHTER_TYPES
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
highlighters
.
mjs
"
)
;
const
FONT_PROPERTIES
=
[
"
font
-
family
"
"
font
-
optical
-
sizing
"
"
font
-
size
"
"
font
-
stretch
"
"
font
-
style
"
"
font
-
variation
-
settings
"
"
font
-
weight
"
"
letter
-
spacing
"
"
line
-
height
"
]
;
const
REGISTERED_AXES_TO_FONT_PROPERTIES
=
{
ital
:
"
font
-
style
"
opsz
:
"
font
-
optical
-
sizing
"
slnt
:
"
font
-
style
"
wdth
:
"
font
-
stretch
"
wght
:
"
font
-
weight
"
}
;
const
REGISTERED_AXES
=
Object
.
keys
(
REGISTERED_AXES_TO_FONT_PROPERTIES
)
;
const
HISTOGRAM_FONT_TYPE_DISPLAYED
=
"
DEVTOOLS_FONTEDITOR_FONT_TYPE_DISPLAYED
"
;
class
FontInspector
{
constructor
(
inspector
window
)
{
this
.
cssProperties
=
inspector
.
cssProperties
;
this
.
document
=
window
.
document
;
this
.
inspector
=
inspector
;
this
.
node
=
null
;
this
.
nodeComputedStyle
=
{
}
;
this
.
pageStyle
=
null
;
this
.
ruleViewTool
=
this
.
inspector
.
getPanel
(
"
ruleview
"
)
;
this
.
ruleView
=
this
.
ruleViewTool
.
view
;
this
.
selectedRule
=
null
;
this
.
store
=
this
.
inspector
.
store
;
this
.
writers
=
new
Map
(
)
;
this
.
store
.
injectReducer
(
"
fontOptions
"
fontOptionsReducer
)
;
this
.
store
.
injectReducer
(
"
fontData
"
fontDataReducer
)
;
this
.
store
.
injectReducer
(
"
fontEditor
"
fontEditorReducer
)
;
this
.
syncChanges
=
debounce
(
this
.
syncChanges
100
this
)
;
this
.
onInstanceChange
=
this
.
onInstanceChange
.
bind
(
this
)
;
this
.
onNewNode
=
this
.
onNewNode
.
bind
(
this
)
;
this
.
onPreviewTextChange
=
debounce
(
this
.
onPreviewTextChange
100
this
)
;
this
.
onPropertyChange
=
this
.
onPropertyChange
.
bind
(
this
)
;
this
.
onRulePropertyUpdated
=
debounce
(
this
.
onRulePropertyUpdated
300
this
)
;
this
.
onToggleFontHighlight
=
this
.
onToggleFontHighlight
.
bind
(
this
)
;
this
.
onThemeChanged
=
this
.
onThemeChanged
.
bind
(
this
)
;
this
.
update
=
this
.
update
.
bind
(
this
)
;
this
.
updateFontVariationSettings
=
this
.
updateFontVariationSettings
.
bind
(
this
)
;
this
.
init
(
)
;
}
get
skipValuesMap
(
)
{
if
(
!
this
.
_skipValuesMap
)
{
this
.
_skipValuesMap
=
new
Map
(
)
;
for
(
const
property
of
FONT_PROPERTIES
)
{
const
values
=
this
.
cssProperties
.
getValues
(
property
)
;
switch
(
property
)
{
case
"
line
-
height
"
:
case
"
letter
-
spacing
"
:
this
.
skipValuesMap
.
set
(
property
values
.
filter
(
value
=
>
value
!
=
=
"
normal
"
)
)
;
break
;
default
:
this
.
skipValuesMap
.
set
(
property
values
)
;
}
}
}
return
this
.
_skipValuesMap
;
}
init
(
)
{
if
(
!
this
.
inspector
)
{
return
;
}
const
fontsApp
=
FontsApp
(
{
onInstanceChange
:
this
.
onInstanceChange
onToggleFontHighlight
:
this
.
onToggleFontHighlight
onPreviewTextChange
:
this
.
onPreviewTextChange
onPropertyChange
:
this
.
onPropertyChange
}
)
;
const
provider
=
createElement
(
Provider
{
id
:
"
fontinspector
"
key
:
"
fontinspector
"
store
:
this
.
store
title
:
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
fontInspectorTitle
"
)
}
fontsApp
)
;
this
.
provider
=
provider
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onNewNode
)
;
this
.
inspector
.
sidebar
.
on
(
"
fontinspector
-
selected
"
this
.
onNewNode
)
;
gDevTools
.
on
(
"
theme
-
switched
"
this
.
onThemeChanged
)
;
}
async
convertUnits
(
property
value
fromUnit
toUnit
)
{
if
(
value
!
=
=
parseFloat
(
value
)
)
{
throw
TypeError
(
Invalid
value
for
conversion
.
Expected
Number
got
{
value
}
)
;
}
const
shouldReturn
=
(
)
=
>
{
const
conversionNotRequired
=
fromUnit
=
=
=
toUnit
|
|
value
=
=
=
0
;
const
forLineHeight
=
property
=
=
=
"
line
-
height
"
&
&
fromUnit
=
=
=
"
"
&
&
toUnit
=
=
=
"
em
"
;
const
isEmToUnitlessConversion
=
fromUnit
=
=
=
"
em
"
&
&
toUnit
=
=
=
"
"
;
return
conversionNotRequired
|
|
forLineHeight
|
|
isEmToUnitlessConversion
;
}
;
if
(
shouldReturn
(
)
)
{
return
value
;
}
if
(
toUnit
!
=
=
"
px
"
&
&
fromUnit
!
=
=
"
px
"
)
{
value
=
await
this
.
convertUnits
(
property
value
fromUnit
"
px
"
)
;
fromUnit
=
"
px
"
;
}
const
fromPx
=
fromUnit
=
=
=
"
px
"
;
const
unit
=
toUnit
=
=
=
"
px
"
?
fromUnit
:
toUnit
;
let
out
=
value
;
const
converters
=
{
in
:
(
)
=
>
(
fromPx
?
value
/
96
:
value
*
96
)
cm
:
(
)
=
>
(
fromPx
?
value
*
0
.
02645833333
:
value
/
0
.
02645833333
)
mm
:
(
)
=
>
(
fromPx
?
value
*
0
.
26458333333
:
value
/
0
.
26458333333
)
pt
:
(
)
=
>
(
fromPx
?
value
*
0
.
75
:
value
/
0
.
75
)
pc
:
(
)
=
>
(
fromPx
?
value
*
0
.
0625
:
value
/
0
.
0625
)
"
%
"
:
async
(
)
=
>
{
const
fontSize
=
await
this
.
getReferenceFontSize
(
property
unit
)
;
return
fromPx
?
(
value
*
100
)
/
parseFloat
(
fontSize
)
:
(
value
/
100
)
*
parseFloat
(
fontSize
)
;
}
rem
:
async
(
)
=
>
{
const
fontSize
=
await
this
.
getReferenceFontSize
(
property
unit
)
;
return
fromPx
?
value
/
parseFloat
(
fontSize
)
:
value
*
parseFloat
(
fontSize
)
;
}
vh
:
async
(
)
=
>
{
const
{
height
}
=
await
this
.
getReferenceBox
(
property
unit
)
;
return
fromPx
?
(
value
*
100
)
/
height
:
(
value
/
100
)
*
height
;
}
vw
:
async
(
)
=
>
{
const
{
width
}
=
await
this
.
getReferenceBox
(
property
unit
)
;
return
fromPx
?
(
value
*
100
)
/
width
:
(
value
/
100
)
*
width
;
}
vmin
:
async
(
)
=
>
{
const
{
width
height
}
=
await
this
.
getReferenceBox
(
property
unit
)
;
return
fromPx
?
(
value
*
100
)
/
Math
.
min
(
width
height
)
:
(
value
/
100
)
*
Math
.
min
(
width
height
)
;
}
vmax
:
async
(
)
=
>
{
const
{
width
height
}
=
await
this
.
getReferenceBox
(
property
unit
)
;
return
fromPx
?
(
value
*
100
)
/
Math
.
max
(
width
height
)
:
(
value
/
100
)
*
Math
.
max
(
width
height
)
;
}
}
;
if
(
converters
.
hasOwnProperty
(
unit
)
)
{
const
converter
=
converters
[
unit
]
;
out
=
await
converter
(
)
;
}
if
(
unit
=
=
=
"
em
"
|
|
(
unit
=
=
=
"
"
&
&
property
=
=
=
"
line
-
height
"
)
)
{
const
fontSize
=
await
this
.
getReferenceFontSize
(
property
unit
)
;
out
=
fromPx
?
value
/
parseFloat
(
fontSize
)
:
value
*
parseFloat
(
fontSize
)
;
}
if
(
isNaN
(
out
)
|
|
Math
.
abs
(
out
)
=
=
=
Infinity
)
{
out
=
0
;
}
if
(
fromPx
|
|
property
=
=
=
"
letter
-
spacing
"
)
{
return
out
=
=
=
Math
.
round
(
out
)
?
Math
.
round
(
out
)
:
out
.
toFixed
(
3
)
;
}
return
Math
.
round
(
out
)
;
}
destroy
(
)
{
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onNewNode
)
;
this
.
inspector
.
sidebar
.
off
(
"
fontinspector
-
selected
"
this
.
onNewNode
)
;
this
.
ruleView
.
off
(
"
property
-
value
-
updated
"
this
.
onRulePropertyUpdated
)
;
gDevTools
.
off
(
"
theme
-
switched
"
this
.
onThemeChanged
)
;
this
.
document
=
null
;
this
.
inspector
=
null
;
this
.
node
=
null
;
this
.
nodeComputedStyle
=
{
}
;
this
.
pageStyle
=
null
;
this
.
ruleView
=
null
;
this
.
selectedRule
=
null
;
this
.
store
=
null
;
this
.
writers
.
clear
(
)
;
this
.
writers
=
null
;
}
async
getFontProperties
(
)
{
const
properties
=
{
}
;
for
(
const
prop
of
FONT_PROPERTIES
)
{
properties
[
prop
]
=
this
.
nodeComputedStyle
[
prop
]
&
&
this
.
nodeComputedStyle
[
prop
]
.
value
?
this
.
nodeComputedStyle
[
prop
]
.
value
:
"
"
;
}
for
(
const
rule
of
this
.
ruleView
.
rules
)
{
if
(
rule
.
inherited
)
{
continue
;
}
for
(
const
textProp
of
rule
.
textProps
)
{
if
(
FONT_PROPERTIES
.
includes
(
textProp
.
name
)
&
&
!
this
.
skipValuesMap
.
get
(
textProp
.
name
)
.
includes
(
textProp
.
value
)
&
&
!
textProp
.
value
.
includes
(
"
calc
(
"
)
&
&
!
textProp
.
value
.
includes
(
"
var
(
"
)
&
&
!
textProp
.
overridden
&
&
textProp
.
enabled
)
{
properties
[
textProp
.
name
]
=
textProp
.
value
;
}
}
}
return
properties
;
}
async
getFontsForNode
(
node
options
)
{
if
(
!
this
.
document
)
{
return
[
]
;
}
const
fonts
=
await
this
.
pageStyle
.
getUsedFontFaces
(
node
options
)
.
catch
(
console
.
error
)
;
if
(
!
fonts
)
{
return
[
]
;
}
return
fonts
;
}
async
getAllFonts
(
options
)
{
if
(
!
this
.
document
)
{
return
[
]
;
}
const
inspectorFronts
=
await
this
.
inspector
.
getAllInspectorFronts
(
)
;
let
allFonts
=
[
]
;
for
(
const
{
pageStyle
}
of
inspectorFronts
)
{
allFonts
=
allFonts
.
concat
(
await
pageStyle
.
getAllUsedFontFaces
(
options
)
)
;
}
return
allFonts
;
}
async
getReferenceBox
(
property
unit
)
{
const
box
=
{
width
:
0
height
:
0
}
;
const
node
=
await
this
.
getReferenceNode
(
property
unit
)
.
catch
(
console
.
error
)
;
if
(
!
node
)
{
return
box
;
}
switch
(
unit
)
{
case
"
vh
"
:
case
"
vw
"
:
case
"
vmin
"
:
case
"
vmax
"
:
const
dim
=
await
node
.
getOwnerGlobalDimensions
(
)
.
catch
(
console
.
error
)
;
if
(
dim
)
{
box
.
width
=
dim
.
innerWidth
;
box
.
height
=
dim
.
innerHeight
;
}
break
;
case
"
%
"
:
const
style
=
await
this
.
pageStyle
.
getComputed
(
node
)
.
catch
(
console
.
error
)
;
if
(
style
)
{
box
.
width
=
style
.
width
.
value
;
box
.
height
=
style
.
height
.
value
;
}
break
;
}
return
box
;
}
async
getReferenceFontSize
(
property
unit
)
{
const
node
=
await
this
.
getReferenceNode
(
property
unit
)
.
catch
(
console
.
error
)
;
if
(
!
node
)
{
return
null
;
}
const
style
=
await
this
.
pageStyle
.
getComputed
(
node
)
.
catch
(
console
.
error
)
;
if
(
!
style
)
{
return
null
;
}
return
style
[
"
font
-
size
"
]
.
value
;
}
async
getReferenceNode
(
property
unit
)
{
let
node
;
switch
(
property
)
{
case
"
line
-
height
"
:
case
"
letter
-
spacing
"
:
node
=
this
.
node
;
break
;
default
:
node
=
this
.
node
.
parentNode
(
)
;
}
switch
(
unit
)
{
case
"
rem
"
:
node
=
await
this
.
node
.
walkerFront
.
documentElement
(
)
;
break
;
}
return
node
;
}
getTextProperty
(
name
)
{
if
(
!
this
.
selectedRule
)
{
return
null
;
}
return
this
.
selectedRule
.
textProps
.
find
(
prop
=
>
prop
.
name
=
=
=
name
&
&
prop
.
enabled
&
&
!
prop
.
overridden
)
;
}
getWriterForAxis
(
axis
)
{
const
FVSComputedStyle
=
this
.
nodeComputedStyle
[
"
font
-
variation
-
settings
"
]
;
if
(
FVSComputedStyle
&
&
FVSComputedStyle
.
value
.
includes
(
axis
)
)
{
return
this
.
updateFontVariationSettings
;
}
const
property
=
REGISTERED_AXES_TO_FONT_PROPERTIES
[
axis
]
;
return
value
=
>
{
let
condition
=
false
;
switch
(
axis
)
{
case
"
wght
"
:
condition
=
this
.
pageStyle
.
supportsFontWeightLevel4
;
break
;
case
"
wdth
"
:
value
=
{
value
}
%
;
condition
=
this
.
pageStyle
.
supportsFontStretchLevel4
;
break
;
case
"
slnt
"
:
value
=
-
value
;
value
=
oblique
{
value
}
deg
;
condition
=
this
.
pageStyle
.
supportsFontStyleLevel4
;
break
;
}
if
(
condition
)
{
this
.
updatePropertyValue
(
property
value
)
;
}
else
{
this
.
writers
.
set
(
axis
this
.
updateFontVariationSettings
)
;
this
.
updateFontVariationSettings
(
)
;
}
}
;
}
getWriterForProperty
(
name
)
{
if
(
this
.
writers
.
has
(
name
)
)
{
return
this
.
writers
.
get
(
name
)
;
}
if
(
REGISTERED_AXES
.
includes
(
name
)
)
{
this
.
writers
.
set
(
name
this
.
getWriterForAxis
(
name
)
)
;
}
else
if
(
FONT_PROPERTIES
.
includes
(
name
)
)
{
this
.
writers
.
set
(
name
value
=
>
{
this
.
updatePropertyValue
(
name
value
)
;
}
)
;
}
else
{
this
.
writers
.
set
(
name
this
.
updateFontVariationSettings
)
;
}
return
this
.
writers
.
get
(
name
)
;
}
isPanelVisible
(
)
{
return
(
this
.
inspector
&
&
this
.
inspector
.
sidebar
&
&
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
=
"
fontinspector
"
)
;
}
logTelemetryProbesOnNewNode
(
)
{
const
{
fontEditor
}
=
this
.
store
.
getState
(
)
;
const
{
telemetry
}
=
this
.
inspector
;
const
editedFont
=
fontEditor
.
fonts
[
0
]
;
if
(
!
editedFont
)
{
return
;
}
const
nbOfAxes
=
editedFont
.
variationAxes
?
editedFont
.
variationAxes
.
length
:
0
;
telemetry
.
getHistogramById
(
HISTOGRAM_FONT_TYPE_DISPLAYED
)
.
add
(
!
nbOfAxes
?
"
nonvariable
"
:
"
variable
"
)
;
}
async
syncChanges
(
name
value
)
{
const
textProperty
=
this
.
getTextProperty
(
name
value
)
;
if
(
textProperty
)
{
try
{
await
textProperty
.
setValue
(
value
"
"
true
)
;
this
.
ruleView
.
on
(
"
property
-
value
-
updated
"
this
.
onRulePropertyUpdated
)
;
}
catch
(
error
)
{
if
(
!
this
.
document
)
{
return
;
}
throw
error
;
}
}
}
onAxisUpdate
(
tag
value
)
{
this
.
store
.
dispatch
(
updateAxis
(
tag
value
)
)
;
const
writer
=
this
.
getWriterForProperty
(
tag
)
;
writer
(
value
.
toString
(
)
)
;
}
onFontPropertyUpdate
(
property
value
unit
)
{
value
=
unit
!
=
=
null
?
value
+
unit
:
value
;
this
.
store
.
dispatch
(
updateFontProperty
(
property
value
)
)
;
const
writer
=
this
.
getWriterForProperty
(
property
)
;
writer
(
value
.
toString
(
)
)
;
}
onInstanceChange
(
name
values
)
{
this
.
store
.
dispatch
(
applyInstance
(
name
values
)
)
;
let
writer
;
values
.
map
(
obj
=
>
{
writer
=
this
.
getWriterForProperty
(
obj
.
axis
)
;
writer
(
obj
.
value
.
toString
(
)
)
;
}
)
;
}
onNewNode
(
)
{
this
.
ruleView
.
off
(
"
property
-
value
-
updated
"
this
.
onRulePropertyUpdated
)
;
this
.
node
=
null
;
this
.
pageStyle
=
null
;
const
selection
=
this
.
inspector
&
&
this
.
inspector
.
selection
;
if
(
selection
&
&
selection
.
isConnected
(
)
)
{
if
(
selection
.
isElementNode
(
)
)
{
this
.
node
=
selection
.
nodeFront
;
}
else
if
(
selection
.
isTextNode
(
)
)
{
this
.
node
=
selection
.
nodeFront
.
parentNode
(
)
;
}
this
.
pageStyle
=
this
.
node
.
inspectorFront
.
pageStyle
;
}
if
(
this
.
isPanelVisible
(
)
)
{
Promise
.
all
(
[
this
.
update
(
)
this
.
refreshFontEditor
(
)
]
)
.
then
(
(
)
=
>
{
this
.
logTelemetryProbesOnNewNode
(
)
;
}
)
.
catch
(
e
=
>
console
.
error
(
e
)
)
;
}
}
onPreviewTextChange
(
value
)
{
this
.
store
.
dispatch
(
updatePreviewText
(
value
)
)
;
this
.
update
(
)
;
}
async
onPropertyChange
(
property
value
fromUnit
toUnit
)
{
if
(
FONT_PROPERTIES
.
includes
(
property
)
)
{
let
unit
=
fromUnit
;
if
(
toUnit
!
=
=
undefined
&
&
fromUnit
!
=
=
undefined
)
{
value
=
await
this
.
convertUnits
(
property
value
fromUnit
toUnit
)
;
unit
=
toUnit
;
}
this
.
onFontPropertyUpdate
(
property
value
unit
)
;
}
else
{
this
.
onAxisUpdate
(
property
value
)
;
}
}
async
onRulePropertyUpdated
(
eventData
)
{
if
(
!
this
.
selectedRule
|
|
!
FONT_PROPERTIES
.
includes
(
eventData
.
property
)
)
{
return
;
}
if
(
this
.
isPanelVisible
(
)
)
{
await
this
.
refreshFontEditor
(
)
;
}
}
async
onToggleFontHighlight
(
font
show
isForCurrentElement
=
true
)
{
try
{
if
(
show
)
{
const
node
=
isForCurrentElement
?
this
.
inspector
.
selection
.
nodeFront
:
this
.
node
.
walkerFront
.
rootNode
;
await
this
.
inspector
.
highlighters
.
showHighlighterTypeForNode
(
HIGHLIGHTER_TYPES
.
FONTS
node
{
CSSFamilyName
:
font
.
CSSFamilyName
name
:
font
.
name
}
)
;
}
else
{
await
this
.
inspector
.
highlighters
.
hideHighlighterType
(
HIGHLIGHTER_TYPES
.
FONTS
)
;
}
}
catch
(
e
)
{
}
}
onThemeChanged
(
frame
)
{
if
(
frame
=
=
=
this
.
document
.
defaultView
)
{
this
.
update
(
)
;
}
}
async
refreshFontEditor
(
)
{
if
(
!
this
.
node
)
{
this
.
store
.
dispatch
(
resetFontEditor
(
)
)
;
return
;
}
const
options
=
{
}
;
if
(
this
.
pageStyle
.
supportsFontVariations
)
{
options
.
includeVariations
=
true
;
}
const
fonts
=
await
this
.
getFontsForNode
(
this
.
node
options
)
;
try
{
this
.
nodeComputedStyle
=
await
this
.
pageStyle
.
getComputed
(
this
.
node
{
filterProperties
:
FONT_PROPERTIES
}
)
;
}
catch
(
e
)
{
if
(
!
this
.
document
)
{
return
;
}
throw
e
;
}
if
(
!
this
.
nodeComputedStyle
|
|
!
fonts
.
length
)
{
this
.
store
.
dispatch
(
resetFontEditor
(
)
)
;
this
.
inspector
.
emit
(
"
fonteditor
-
updated
"
)
;
return
;
}
this
.
writers
.
clear
(
)
;
if
(
!
this
.
ruleViewTool
.
isPanelVisible
(
)
)
{
await
this
.
ruleView
.
selectElement
(
this
.
node
false
)
;
}
this
.
selectedRule
=
this
.
ruleView
.
rules
.
find
(
rule
=
>
rule
.
domRule
.
type
=
=
=
ELEMENT_STYLE
)
;
const
properties
=
await
this
.
getFontProperties
(
)
;
const
axes
=
parseFontVariationAxes
(
properties
[
"
font
-
variation
-
settings
"
]
)
;
Object
.
keys
(
axes
)
.
map
(
axis
=
>
{
this
.
writers
.
set
(
axis
this
.
getWriterForAxis
(
axis
)
)
;
}
)
;
this
.
store
.
dispatch
(
updateFontEditor
(
fonts
properties
this
.
node
.
actorID
)
)
;
this
.
store
.
dispatch
(
setEditorDisabled
(
this
.
node
.
isPseudoElement
)
)
;
this
.
inspector
.
emit
(
"
fonteditor
-
updated
"
)
;
this
.
ruleView
.
on
(
"
property
-
value
-
updated
"
this
.
onRulePropertyUpdated
)
;
}
async
update
(
)
{
if
(
!
this
.
inspector
|
|
!
this
.
store
)
{
return
;
}
let
allFonts
=
[
]
;
if
(
!
this
.
node
)
{
this
.
store
.
dispatch
(
updateFonts
(
allFonts
)
)
;
return
;
}
const
{
fontOptions
}
=
this
.
store
.
getState
(
)
;
const
{
previewText
}
=
fontOptions
;
const
options
=
{
includePreviews
:
true
includeVariations
:
!
!
this
.
pageStyle
.
supportsFontVariations
previewText
previewFillStyle
:
getCssVariableColor
(
"
-
-
theme
-
body
-
color
"
this
.
document
.
ownerGlobal
)
}
;
allFonts
=
await
this
.
getAllFonts
(
options
)
;
for
(
const
font
of
[
.
.
.
allFonts
]
)
{
font
.
previewUrl
=
await
font
.
preview
.
data
.
string
(
)
;
}
this
.
store
&
&
this
.
store
.
dispatch
(
updateFonts
(
allFonts
)
)
;
this
.
inspector
&
&
this
.
inspector
.
emitForTests
(
"
fontinspector
-
updated
"
this
.
node
)
;
}
updateFontVariationSettings
(
)
{
const
fontEditor
=
this
.
store
.
getState
(
)
.
fontEditor
;
const
name
=
"
font
-
variation
-
settings
"
;
const
value
=
Object
.
keys
(
fontEditor
.
axes
)
.
filter
(
tag
=
>
this
.
writers
.
get
(
tag
)
=
=
=
this
.
updateFontVariationSettings
)
.
map
(
tag
=
>
"
{
tag
}
"
{
fontEditor
.
axes
[
tag
]
}
)
.
join
(
"
"
)
;
this
.
updatePropertyValue
(
name
value
)
;
}
updatePropertyValue
(
name
value
)
{
const
textProperty
=
this
.
getTextProperty
(
name
)
;
if
(
!
textProperty
)
{
this
.
selectedRule
.
createProperty
(
name
value
"
"
true
)
;
return
;
}
if
(
textProperty
.
value
=
=
=
value
)
{
return
;
}
this
.
ruleView
.
off
(
"
property
-
value
-
updated
"
this
.
onRulePropertyUpdated
)
;
textProperty
.
rule
.
previewPropertyValue
(
textProperty
value
"
"
)
.
catch
(
console
.
error
)
;
this
.
syncChanges
(
name
value
)
;
}
}
module
.
exports
=
FontInspector
;
