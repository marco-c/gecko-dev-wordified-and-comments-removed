"
use
strict
"
;
const
{
getStr
}
=
require
(
"
.
.
/
utils
/
l10n
"
)
;
const
{
parseFontVariationAxes
}
=
require
(
"
.
.
/
utils
/
font
-
utils
"
)
;
const
{
APPLY_FONT_VARIATION_INSTANCE
RESET_EDITOR
UPDATE_AXIS_VALUE
UPDATE_CUSTOM_INSTANCE
UPDATE_EDITOR_STATE
UPDATE_PROPERTY_VALUE
UPDATE_WARNING_MESSAGE
}
=
require
(
"
.
.
/
actions
/
index
"
)
;
const
INITIAL_STATE
=
{
axes
:
{
}
customInstanceValues
:
[
]
fonts
:
[
]
instance
:
{
name
:
getStr
(
"
fontinspector
.
customInstanceName
"
)
values
:
[
]
}
properties
:
{
}
id
:
"
"
warning
:
getStr
(
"
fontinspector
.
noFontsOnSelectedElement
"
)
}
;
const
reducers
=
{
[
APPLY_FONT_VARIATION_INSTANCE
]
(
state
{
name
values
}
)
{
const
newState
=
{
.
.
.
state
}
;
newState
.
instance
.
name
=
name
;
newState
.
instance
.
values
=
values
;
if
(
Array
.
isArray
(
values
)
&
&
values
.
length
)
{
newState
.
axes
=
values
.
reduce
(
(
acc
value
)
=
>
{
acc
[
value
.
axis
]
=
value
.
value
;
return
acc
;
}
{
}
)
;
}
return
newState
;
}
[
RESET_EDITOR
]
(
state
)
{
return
{
.
.
.
INITIAL_STATE
}
;
}
[
UPDATE_AXIS_VALUE
]
(
state
{
axis
value
}
)
{
const
newState
=
{
.
.
.
state
}
;
newState
.
axes
[
axis
]
=
value
;
return
newState
;
}
[
UPDATE_CUSTOM_INSTANCE
]
(
state
)
{
const
newState
=
{
.
.
.
state
}
;
newState
.
customInstanceValues
=
Object
.
keys
(
state
.
axes
)
.
map
(
axis
=
>
{
return
{
axis
:
[
axis
]
value
:
state
.
axes
[
axis
]
}
;
}
)
;
return
newState
;
}
[
UPDATE_EDITOR_STATE
]
(
state
{
fonts
properties
id
}
)
{
const
axes
=
parseFontVariationAxes
(
properties
[
"
font
-
variation
-
settings
"
]
)
;
const
weight
=
properties
[
"
font
-
weight
"
]
;
if
(
axes
.
wght
=
=
=
undefined
&
&
parseFloat
(
weight
)
.
toString
(
)
=
=
=
weight
.
toString
(
)
)
{
axes
.
wght
=
weight
;
}
const
stretch
=
properties
[
"
font
-
stretch
"
]
;
const
match
=
stretch
.
trim
(
)
.
match
(
/
^
(
\
d
+
(
.
\
d
+
)
?
)
%
/
)
;
if
(
axes
.
wdth
=
=
=
undefined
&
&
match
&
&
match
[
1
]
)
{
axes
.
wdth
=
match
[
1
]
;
}
return
{
.
.
.
state
axes
fonts
properties
id
}
;
}
[
UPDATE_PROPERTY_VALUE
]
(
state
{
property
value
}
)
{
const
newState
=
{
.
.
.
state
}
;
newState
.
properties
[
property
]
=
value
;
return
newState
;
}
[
UPDATE_WARNING_MESSAGE
]
(
state
{
warning
}
)
{
return
{
.
.
.
state
warning
}
;
}
}
;
module
.
exports
=
function
(
state
=
INITIAL_STATE
action
)
{
const
reducer
=
reducers
[
action
.
type
]
;
if
(
!
reducer
)
{
return
state
;
}
return
reducer
(
state
action
)
;
}
;
