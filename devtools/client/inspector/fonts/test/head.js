"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
test
/
head
.
js
"
this
)
;
Services
.
prefs
.
setCharPref
(
"
devtools
.
inspector
.
activeSidebar
"
"
fontinspector
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
inspector
.
activeSidebar
"
)
;
}
)
;
var
_selectNode
=
selectNode
;
selectNode
=
async
function
(
node
inspector
reason
)
{
const
onInspectorUpdated
=
inspector
.
once
(
"
fontinspector
-
updated
"
)
;
const
onEditorUpdated
=
inspector
.
once
(
"
fonteditor
-
updated
"
)
;
await
_selectNode
(
node
inspector
reason
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
devtools
.
inspector
.
fonteditor
.
enabled
"
)
)
{
await
Promise
.
all
(
[
onInspectorUpdated
onEditorUpdated
]
)
;
}
else
{
await
onInspectorUpdated
;
}
}
;
var
openFontInspectorForURL
=
async
function
(
url
)
{
const
tab
=
await
addTab
(
url
)
;
const
{
toolbox
inspector
testActor
}
=
await
openInspector
(
)
;
await
selectNode
(
"
body
"
inspector
)
;
return
{
tab
testActor
toolbox
inspector
view
:
inspector
.
getPanel
(
"
fontinspector
"
)
}
;
}
;
async
function
updatePreviewText
(
view
text
)
{
info
(
Changing
the
preview
text
to
'
{
text
}
'
)
;
const
doc
=
view
.
document
;
const
input
=
doc
.
querySelector
(
"
#
font
-
preview
-
input
-
container
input
"
)
;
input
.
focus
(
)
;
info
(
"
Blanking
the
input
field
.
"
)
;
while
(
input
.
value
.
length
)
{
const
update
=
view
.
inspector
.
once
(
"
fontinspector
-
updated
"
)
;
EventUtils
.
sendKey
(
"
BACK_SPACE
"
doc
.
defaultView
)
;
await
update
;
}
if
(
text
)
{
info
(
Typing
"
{
text
}
"
into
the
input
field
.
)
;
const
update
=
view
.
inspector
.
once
(
"
fontinspector
-
updated
"
)
;
EventUtils
.
sendString
(
text
doc
.
defaultView
)
;
await
update
;
}
is
(
input
.
value
text
The
input
now
contains
"
{
text
}
"
.
)
;
}
function
getUsedFontsEls_obsolete
(
viewDoc
)
{
return
viewDoc
.
querySelectorAll
(
"
#
font
-
editor
.
fonts
-
list
li
"
)
;
}
function
getUsedFontsEls
(
viewDoc
)
{
return
viewDoc
.
querySelectorAll
(
"
#
font
-
editor
.
font
-
control
-
used
-
fonts
.
font
-
name
"
)
;
}
function
getUsedFontGroupsEls
(
viewDoc
)
{
return
viewDoc
.
querySelectorAll
(
"
#
font
-
editor
.
font
-
control
-
used
-
fonts
.
font
-
group
"
)
;
}
function
getFontsAccordion
(
viewDoc
)
{
return
viewDoc
.
querySelector
(
"
#
font
-
container
.
accordion
"
)
;
}
async
function
expandAccordion
(
accordion
)
{
const
isExpanded
=
(
)
=
>
accordion
.
querySelector
(
"
.
fonts
-
list
"
)
;
if
(
isExpanded
(
)
)
{
return
;
}
const
onExpanded
=
BrowserTestUtils
.
waitForCondition
(
isExpanded
"
Waiting
for
other
fonts
section
"
)
;
accordion
.
querySelector
(
"
.
theme
-
twisty
"
)
.
click
(
)
;
await
onExpanded
;
}
async
function
expandFontsAccordion
(
viewDoc
)
{
info
(
"
Expanding
the
other
fonts
section
"
)
;
await
expandAccordion
(
getFontsAccordion
(
viewDoc
)
)
;
}
function
getAllFontsEls
(
viewDoc
)
{
return
getFontsAccordion
(
viewDoc
)
.
querySelectorAll
(
"
.
fonts
-
list
>
li
"
)
;
}
function
getName
(
fontEl
)
{
return
fontEl
.
querySelector
(
"
.
font
-
name
"
)
.
textContent
;
}
function
getURL
(
fontEl
)
{
return
fontEl
.
querySelector
(
"
.
font
-
origin
"
)
.
textContent
;
}
function
getFamilyName
(
fontEl
)
{
return
fontEl
.
querySelector
(
"
.
font
-
family
-
name
"
)
.
textContent
;
}
function
getPropertyValue
(
viewDoc
name
)
{
const
selector
=
#
font
-
editor
.
font
-
value
-
input
[
name
=
{
name
}
]
;
return
{
value
:
viewDoc
.
querySelector
(
selector
)
&
&
parseFloat
(
viewDoc
.
querySelector
(
selector
)
.
value
)
unit
:
viewDoc
.
querySelector
(
selector
+
~
.
font
-
value
-
select
)
&
&
viewDoc
.
querySelector
(
selector
+
~
.
font
-
value
-
select
)
.
value
}
;
}
function
isRemote
(
fontEl
)
{
return
fontEl
.
querySelector
(
"
.
font
-
origin
"
)
.
classList
.
contains
(
"
remote
"
)
;
}
async
function
waitFor
(
condition
)
{
await
BrowserTestUtils
.
waitForCondition
(
condition
"
waitFor
"
10
500
)
;
return
condition
(
)
;
}
