"
use
strict
"
;
const
TEST_URI
=
URL_ROOT
+
"
doc_browser_fontinspector
.
html
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
toolbox
.
footer
.
height
"
500
)
;
const
{
view
}
=
await
openFontInspectorForURL
(
TEST_URI
)
;
await
testFontHighlighting
(
view
)
;
info
(
"
Check
that
highlighting
still
works
after
reloading
the
page
"
)
;
await
reloadBrowser
(
)
;
await
testFontHighlighting
(
view
)
;
}
)
;
async
function
testFontHighlighting
(
view
)
{
const
expectedSelectionChangeEvents
=
[
1
1
1
1
1
]
;
const
viewDoc
=
view
.
document
;
const
fontEls
=
await
waitFor
(
(
)
=
>
{
const
els
=
getUsedFontsEls
(
viewDoc
)
;
if
(
els
.
length
!
=
=
expectedSelectionChangeEvents
.
length
)
{
return
false
;
}
return
els
;
}
)
;
for
(
let
i
=
0
;
i
<
fontEls
.
length
;
i
+
+
)
{
info
(
Mousing
over
and
out
of
font
number
{
i
}
(
"
{
fontEls
[
i
]
.
textContent
}
"
)
in
the
list
)
;
const
nameEl
=
fontEls
[
i
]
;
let
onEvents
=
waitForNSelectionEvents
(
expectedSelectionChangeEvents
[
i
]
)
;
EventUtils
.
synthesizeMouse
(
nameEl
2
2
{
type
:
"
mouseover
"
}
viewDoc
.
defaultView
)
;
await
onEvents
;
ok
(
true
{
expectedSelectionChangeEvents
[
i
]
}
selectionchange
events
detected
on
mouseover
)
;
const
otherEl
=
viewDoc
.
querySelector
(
"
body
"
)
;
onEvents
=
waitForNSelectionEvents
(
1
)
;
EventUtils
.
synthesizeMouse
(
otherEl
2
2
{
type
:
"
mouseover
"
}
viewDoc
.
defaultView
)
;
await
onEvents
;
ok
(
true
"
1
selectionchange
events
detected
on
mouseout
"
)
;
}
}
async
function
waitForNSelectionEvents
(
numberOfTimes
)
{
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
numberOfTimes
]
async
function
(
n
)
{
const
win
=
content
.
wrappedJSObject
;
await
new
Promise
(
resolve
=
>
{
let
received
=
0
;
win
.
document
.
addEventListener
(
"
selectionchange
"
function
listen
(
)
{
received
+
+
;
if
(
received
=
=
=
n
)
{
win
.
document
.
removeEventListener
(
"
selectionchange
"
listen
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
)
;
}
