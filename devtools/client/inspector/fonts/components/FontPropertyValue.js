"
use
strict
"
;
const
{
createElement
Fragment
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
toFixed
}
=
require
(
"
.
.
/
utils
/
font
-
utils
"
)
;
class
FontPropertyValue
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
allowOverflow
:
PropTypes
.
bool
className
:
PropTypes
.
string
defaultValue
:
PropTypes
.
number
disabled
:
PropTypes
.
bool
.
isRequired
label
:
PropTypes
.
string
.
isRequired
min
:
PropTypes
.
number
.
isRequired
minLabel
:
PropTypes
.
bool
max
:
PropTypes
.
number
.
isRequired
maxLabel
:
PropTypes
.
bool
name
:
PropTypes
.
string
.
isRequired
nameLabel
:
PropTypes
.
bool
onChange
:
PropTypes
.
func
.
isRequired
step
:
PropTypes
.
number
unit
:
PropTypes
.
string
unitOptions
:
PropTypes
.
array
value
:
PropTypes
.
number
}
;
}
static
get
defaultProps
(
)
{
return
{
allowOverflow
:
false
className
:
"
"
minLabel
:
false
maxLabel
:
false
nameLabel
:
false
step
:
1
unit
:
null
unitOptions
:
[
]
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
interactive
:
false
initialValue
:
this
.
props
.
value
value
:
this
.
props
.
value
}
;
this
.
onBlur
=
this
.
onBlur
.
bind
(
this
)
;
this
.
onChange
=
this
.
onChange
.
bind
(
this
)
;
this
.
onFocus
=
this
.
onFocus
.
bind
(
this
)
;
this
.
onMouseDown
=
this
.
onMouseDown
.
bind
(
this
)
;
this
.
onMouseUp
=
this
.
onMouseUp
.
bind
(
this
)
;
this
.
onUnitChange
=
this
.
onUnitChange
.
bind
(
this
)
;
}
getPropLabel
(
prop
)
{
const
label
=
this
.
props
[
{
prop
}
Label
]
;
const
decimals
=
Math
.
abs
(
Math
.
log10
(
this
.
props
.
step
)
)
;
return
label
?
toFixed
(
this
.
props
[
prop
]
decimals
)
:
null
;
}
isValueValid
(
value
)
{
const
{
allowOverflow
min
max
}
=
this
.
props
;
if
(
typeof
value
!
=
=
"
number
"
|
|
isNaN
(
value
)
)
{
return
false
;
}
if
(
min
!
=
=
undefined
&
&
value
<
min
)
{
return
false
;
}
if
(
max
!
=
=
undefined
&
&
value
>
this
.
props
.
max
&
&
!
allowOverflow
)
{
return
false
;
}
return
true
;
}
onBlur
(
)
{
const
isValid
=
this
.
isValueValid
(
this
.
state
.
value
)
;
let
value
;
if
(
isValid
)
{
value
=
this
.
state
.
value
;
}
else
if
(
this
.
state
.
value
!
=
=
null
)
{
value
=
Math
.
max
(
this
.
props
.
min
Math
.
min
(
this
.
state
.
value
this
.
props
.
max
)
)
;
}
else
{
value
=
this
.
state
.
initialValue
;
}
this
.
updateValue
(
value
)
;
this
.
toggleInteractiveState
(
false
)
;
}
onChange
(
e
)
{
const
regex
=
(
this
.
props
.
min
&
&
this
.
props
.
min
<
0
)
?
/
^
-
?
[
0
-
9
]
+
(
.
[
0
-
9
]
+
)
?
/
:
/
^
[
0
-
9
]
+
(
.
[
0
-
9
]
+
)
?
/
;
let
string
=
e
.
target
.
value
.
trim
(
)
;
if
(
e
.
target
.
validity
.
badInput
)
{
return
;
}
if
(
string
.
charAt
(
0
)
=
=
=
"
.
"
&
&
string
.
length
>
1
)
{
string
=
"
0
"
+
string
;
e
.
target
.
value
=
string
;
}
if
(
string
=
=
=
"
"
)
{
this
.
setState
(
(
prevState
)
=
>
{
return
{
.
.
.
prevState
value
:
null
}
;
}
)
;
return
;
}
if
(
!
regex
.
test
(
string
)
)
{
return
;
}
const
value
=
parseFloat
(
string
)
;
this
.
updateValue
(
value
)
;
}
onFocus
(
e
)
{
if
(
e
.
target
.
type
=
=
=
"
number
"
)
{
e
.
target
.
select
(
)
;
}
this
.
setState
(
(
prevState
)
=
>
{
return
{
.
.
.
prevState
interactive
:
true
initialValue
:
this
.
props
.
value
}
;
}
)
;
}
onUnitChange
(
e
)
{
this
.
props
.
onChange
(
this
.
props
.
name
this
.
props
.
value
this
.
props
.
unit
e
.
target
.
value
)
;
this
.
setState
(
(
prevState
)
=
>
{
return
{
.
.
.
prevState
value
:
null
}
;
}
)
;
}
onMouseDown
(
)
{
this
.
toggleInteractiveState
(
true
)
;
}
onMouseUp
(
)
{
this
.
toggleInteractiveState
(
false
)
;
}
toggleInteractiveState
(
isInteractive
)
{
this
.
setState
(
(
prevState
)
=
>
{
return
{
.
.
.
prevState
interactive
:
isInteractive
}
;
}
)
;
}
updateValue
(
value
)
{
if
(
this
.
isValueValid
(
value
)
)
{
this
.
props
.
onChange
(
this
.
props
.
name
value
this
.
props
.
unit
)
;
}
this
.
setState
(
(
prevState
)
=
>
{
return
{
.
.
.
prevState
value
}
;
}
)
;
}
renderUnitSelect
(
)
{
if
(
!
this
.
props
.
unitOptions
.
length
)
{
return
null
;
}
const
options
=
this
.
props
.
unitOptions
.
includes
(
this
.
props
.
unit
)
?
this
.
props
.
unitOptions
:
this
.
props
.
unitOptions
.
concat
(
[
this
.
props
.
unit
]
)
;
return
dom
.
select
(
{
className
:
"
font
-
value
-
select
"
disabled
:
this
.
props
.
disabled
onChange
:
this
.
onUnitChange
value
:
this
.
props
.
unit
}
options
.
map
(
unit
=
>
{
return
dom
.
option
(
{
key
:
unit
value
:
unit
}
unit
)
;
}
)
)
;
}
renderLabelContent
(
)
{
const
{
label
name
nameLabel
}
=
this
.
props
;
const
labelEl
=
dom
.
span
(
{
className
:
"
font
-
control
-
label
-
text
"
"
aria
-
describedby
"
:
nameLabel
?
detail
-
{
name
}
:
null
}
label
)
;
const
detailEl
=
nameLabel
?
dom
.
span
(
{
className
:
"
font
-
control
-
label
-
detail
"
id
:
detail
-
{
name
}
}
this
.
getPropLabel
(
"
name
"
)
)
:
null
;
return
createElement
(
Fragment
null
labelEl
detailEl
)
;
}
render
(
)
{
if
(
this
.
props
.
min
=
=
=
this
.
props
.
max
)
{
return
null
;
}
const
propsValue
=
this
.
props
.
value
!
=
=
null
?
this
.
props
.
value
:
this
.
props
.
defaultValue
;
const
defaults
=
{
min
:
this
.
props
.
min
max
:
this
.
props
.
max
onBlur
:
this
.
onBlur
onChange
:
this
.
onChange
onFocus
:
this
.
onFocus
step
:
this
.
props
.
step
value
:
this
.
state
.
interactive
?
this
.
state
.
value
:
propsValue
}
;
const
range
=
dom
.
input
(
{
.
.
.
defaults
onMouseDown
:
this
.
onMouseDown
onMouseUp
:
this
.
onMouseUp
className
:
"
font
-
value
-
slider
"
disabled
:
this
.
props
.
disabled
name
:
this
.
props
.
name
title
:
this
.
props
.
label
type
:
"
range
"
}
)
;
const
input
=
dom
.
input
(
{
.
.
.
defaults
max
:
this
.
props
.
allowOverflow
?
null
:
this
.
props
.
max
name
:
this
.
props
.
name
className
:
"
font
-
value
-
input
"
disabled
:
this
.
props
.
disabled
type
:
"
number
"
}
)
;
return
dom
.
label
(
{
className
:
font
-
control
{
this
.
props
.
className
}
disabled
:
this
.
props
.
disabled
}
dom
.
div
(
{
className
:
"
font
-
control
-
label
"
title
:
this
.
props
.
label
}
this
.
renderLabelContent
(
)
)
dom
.
div
(
{
className
:
"
font
-
control
-
input
"
}
dom
.
div
(
{
className
:
"
font
-
value
-
slider
-
container
"
"
data
-
min
"
:
this
.
getPropLabel
(
"
min
"
)
"
data
-
max
"
:
this
.
getPropLabel
(
"
max
"
)
}
range
)
input
this
.
renderUnitSelect
(
)
)
)
;
}
}
module
.
exports
=
FontPropertyValue
;
