"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
FontMeta
=
createFactory
(
require
(
"
.
/
FontMeta
"
)
)
;
const
FontPropertyValue
=
createFactory
(
require
(
"
.
/
FontPropertyValue
"
)
)
;
const
FontSize
=
createFactory
(
require
(
"
.
/
FontSize
"
)
)
;
const
FontStyle
=
createFactory
(
require
(
"
.
/
FontStyle
"
)
)
;
const
FontWeight
=
createFactory
(
require
(
"
.
/
FontWeight
"
)
)
;
const
{
getStr
}
=
require
(
"
.
.
/
utils
/
l10n
"
)
;
const
Types
=
require
(
"
.
.
/
types
"
)
;
const
MAX_FONTS
=
3
;
class
FontEditor
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
fontEditor
:
PropTypes
.
shape
(
Types
.
fontEditor
)
.
isRequired
onInstanceChange
:
PropTypes
.
func
.
isRequired
onPropertyChange
:
PropTypes
.
func
.
isRequired
onToggleFontHighlight
:
PropTypes
.
func
.
isRequired
}
;
}
getAxisStep
(
min
max
)
{
let
step
=
1
;
const
delta
=
parseInt
(
max
10
)
-
parseInt
(
min
10
)
;
if
(
delta
<
=
1
)
{
step
=
0
.
001
;
}
else
if
(
delta
<
=
10
)
{
step
=
0
.
01
;
}
else
if
(
delta
<
=
100
)
{
step
=
0
.
1
;
}
return
step
.
toString
(
)
;
}
renderAxes
(
fontAxes
=
[
]
editedAxes
)
{
if
(
!
fontAxes
.
length
)
{
return
null
;
}
const
controls
=
fontAxes
.
map
(
axis
=
>
{
return
FontPropertyValue
(
{
key
:
axis
.
tag
min
:
axis
.
minValue
max
:
axis
.
maxValue
value
:
editedAxes
[
axis
.
tag
]
|
|
axis
.
defaultValue
step
:
this
.
getAxisStep
(
axis
.
minValue
axis
.
maxValue
)
label
:
axis
.
name
name
:
axis
.
tag
onChange
:
this
.
props
.
onPropertyChange
unit
:
null
}
)
;
}
)
;
return
dom
.
div
(
{
className
:
"
font
-
axes
-
controls
"
}
controls
)
;
}
renderFamilesNotUsed
(
familiesNotUsed
=
[
]
)
{
if
(
!
familiesNotUsed
.
length
)
{
return
null
;
}
const
familiesList
=
familiesNotUsed
.
map
(
family
=
>
{
return
dom
.
div
(
{
className
:
"
font
-
family
-
unused
"
}
family
)
;
}
)
;
return
dom
.
details
(
{
}
dom
.
summary
(
{
}
getStr
(
"
fontinspector
.
familiesUnusedLabel
"
)
)
familiesList
)
;
}
renderFontFamily
(
fonts
families
)
{
if
(
!
fonts
.
length
)
{
return
null
;
}
const
topUsedFontsList
=
this
.
renderFontList
(
fonts
.
slice
(
0
MAX_FONTS
)
)
;
const
moreUsedFontsList
=
this
.
renderFontList
(
fonts
.
slice
(
MAX_FONTS
fonts
.
length
)
)
;
const
moreUsedFonts
=
moreUsedFontsList
=
=
=
null
?
null
:
dom
.
details
(
{
}
dom
.
summary
(
{
}
dom
.
span
(
{
className
:
"
label
-
open
"
}
getStr
(
"
fontinspector
.
showMore
"
)
)
dom
.
span
(
{
className
:
"
label
-
close
"
}
getStr
(
"
fontinspector
.
showLess
"
)
)
)
moreUsedFontsList
)
;
return
dom
.
label
(
{
className
:
"
font
-
control
font
-
control
-
family
"
}
dom
.
span
(
{
className
:
"
font
-
control
-
label
"
}
getStr
(
"
fontinspector
.
fontFamilyLabel
"
)
)
dom
.
div
(
{
className
:
"
font
-
control
-
box
"
}
topUsedFontsList
moreUsedFonts
this
.
renderFamilesNotUsed
(
families
.
notUsed
)
)
)
;
}
renderFontList
(
fonts
=
[
]
)
{
if
(
!
fonts
.
length
)
{
return
null
;
}
return
dom
.
ul
(
{
className
:
"
fonts
-
list
"
}
fonts
.
map
(
font
=
>
{
return
dom
.
li
(
{
}
FontMeta
(
{
font
key
:
font
.
name
onToggleFontHighlight
:
this
.
props
.
onToggleFontHighlight
}
)
)
;
}
)
)
;
}
renderFontSize
(
value
)
{
return
value
&
&
FontSize
(
{
onChange
:
this
.
props
.
onPropertyChange
value
}
)
;
}
renderFontStyle
(
value
)
{
return
value
&
&
FontStyle
(
{
onChange
:
this
.
props
.
onPropertyChange
value
}
)
;
}
renderFontWeight
(
value
)
{
return
value
&
&
FontWeight
(
{
onChange
:
this
.
props
.
onPropertyChange
value
}
)
;
}
renderInstances
(
fontInstances
=
[
]
selectedInstance
)
{
const
customInstance
=
{
name
:
getStr
(
"
fontinspector
.
customInstanceName
"
)
values
:
this
.
props
.
fontEditor
.
customInstanceValues
}
;
fontInstances
=
[
.
.
.
fontInstances
customInstance
]
;
const
instanceOptions
=
fontInstances
.
map
(
instance
=
>
dom
.
option
(
{
value
:
instance
.
name
selected
:
instance
.
name
=
=
=
selectedInstance
.
name
?
"
selected
"
:
null
}
instance
.
name
)
)
;
const
instanceSelect
=
dom
.
select
(
{
className
:
"
font
-
control
-
input
"
onChange
:
(
e
)
=
>
{
const
instance
=
fontInstances
.
find
(
inst
=
>
e
.
target
.
value
=
=
=
inst
.
name
)
;
instance
&
&
this
.
props
.
onInstanceChange
(
instance
.
name
instance
.
values
)
;
}
}
instanceOptions
)
;
return
dom
.
label
(
{
className
:
"
font
-
control
"
}
dom
.
span
(
{
className
:
"
font
-
control
-
label
"
}
getStr
(
"
fontinspector
.
fontInstanceLabel
"
)
)
instanceSelect
)
;
}
renderWarning
(
)
{
return
dom
.
div
(
{
id
:
"
font
-
editor
"
}
dom
.
div
(
{
className
:
"
devtools
-
sidepanel
-
no
-
result
"
}
getStr
(
"
fontinspector
.
noFontsOnSelectedElement
"
)
)
)
;
}
render
(
)
{
const
{
fontEditor
}
=
this
.
props
;
const
{
fonts
families
axes
instance
properties
}
=
fontEditor
;
const
font
=
fonts
[
0
]
;
const
hasFontAxes
=
font
&
&
font
.
variationAxes
;
const
hasFontInstances
=
font
&
&
font
.
variationInstances
&
&
font
.
variationInstances
.
length
>
0
;
const
hasSlantOrItalicAxis
=
hasFontAxes
&
&
font
.
variationAxes
.
find
(
axis
=
>
{
return
axis
.
tag
=
=
=
"
slnt
"
|
|
axis
.
tag
=
=
=
"
ital
"
;
}
)
;
const
hasWeightAxis
=
hasFontAxes
&
&
font
.
variationAxes
.
find
(
axis
=
>
{
return
axis
.
tag
=
=
=
"
wght
"
;
}
)
;
if
(
!
font
)
{
return
this
.
renderWarning
(
)
;
}
return
dom
.
div
(
{
id
:
"
font
-
editor
"
}
this
.
renderFontFamily
(
fonts
families
)
hasFontInstances
&
&
this
.
renderInstances
(
font
.
variationInstances
instance
)
this
.
renderFontSize
(
properties
[
"
font
-
size
"
]
)
!
hasWeightAxis
&
&
this
.
renderFontWeight
(
properties
[
"
font
-
weight
"
]
)
!
hasSlantOrItalicAxis
&
&
this
.
renderFontStyle
(
properties
[
"
font
-
style
"
]
)
hasFontAxes
&
&
this
.
renderAxes
(
font
.
variationAxes
axes
)
)
;
}
}
module
.
exports
=
FontEditor
;
