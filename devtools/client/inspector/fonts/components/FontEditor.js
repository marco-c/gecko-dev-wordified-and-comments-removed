"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
mjs
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
mjs
"
)
;
const
FontAxis
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
components
/
FontAxis
.
js
"
)
)
;
const
FontName
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
components
/
FontName
.
js
"
)
)
;
const
FontSize
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
components
/
FontSize
.
js
"
)
)
;
const
FontStyle
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
components
/
FontStyle
.
js
"
)
)
;
const
FontWeight
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
components
/
FontWeight
.
js
"
)
)
;
const
LetterSpacing
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
components
/
LetterSpacing
.
js
"
)
)
;
const
LineHeight
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
components
/
LineHeight
.
js
"
)
)
;
const
{
getStr
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
utils
/
l10n
.
js
"
)
;
const
Types
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
/
types
.
js
"
)
;
const
MAX_FONTS
=
3
;
class
FontEditor
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
fontEditor
:
PropTypes
.
shape
(
Types
.
fontEditor
)
.
isRequired
onInstanceChange
:
PropTypes
.
func
.
isRequired
onPropertyChange
:
PropTypes
.
func
.
isRequired
onToggleFontHighlight
:
PropTypes
.
func
.
isRequired
}
;
}
renderAxes
(
fontAxes
=
[
]
editedAxes
)
{
if
(
!
fontAxes
.
length
)
{
return
null
;
}
return
fontAxes
.
map
(
axis
=
>
{
return
FontAxis
(
{
key
:
axis
.
tag
axis
disabled
:
this
.
props
.
fontEditor
.
disabled
onChange
:
this
.
props
.
onPropertyChange
minLabel
:
true
maxLabel
:
true
value
:
editedAxes
[
axis
.
tag
]
|
|
axis
.
defaultValue
}
)
;
}
)
;
}
renderUsedFonts
(
fonts
)
{
if
(
!
fonts
.
length
)
{
return
null
;
}
const
fontGroups
=
fonts
.
reduce
(
(
acc
font
)
=
>
{
const
family
=
font
.
CSSFamilyName
.
toString
(
)
;
acc
[
family
]
=
acc
[
family
]
|
|
[
]
;
acc
[
family
]
.
push
(
font
)
;
return
acc
;
}
{
}
)
;
const
renderedFontGroups
=
Object
.
keys
(
fontGroups
)
.
map
(
family
=
>
{
return
this
.
renderFontGroup
(
family
fontGroups
[
family
]
)
;
}
)
;
const
topFontsList
=
renderedFontGroups
.
slice
(
0
MAX_FONTS
)
;
const
moreFontsList
=
renderedFontGroups
.
slice
(
MAX_FONTS
renderedFontGroups
.
length
)
;
const
moreFonts
=
!
moreFontsList
.
length
?
null
:
dom
.
details
(
{
}
dom
.
summary
(
{
}
dom
.
span
(
{
className
:
"
label
-
open
"
}
getStr
(
"
fontinspector
.
showMore
"
)
)
dom
.
span
(
{
className
:
"
label
-
close
"
}
getStr
(
"
fontinspector
.
showLess
"
)
)
)
moreFontsList
)
;
return
dom
.
label
(
{
className
:
"
font
-
control
font
-
control
-
used
-
fonts
"
}
dom
.
span
(
{
className
:
"
font
-
control
-
label
"
}
getStr
(
"
fontinspector
.
fontsUsedLabel
"
)
)
dom
.
div
(
{
className
:
"
font
-
control
-
box
"
}
topFontsList
moreFonts
)
)
;
}
renderFontGroup
(
family
fonts
=
[
]
)
{
const
group
=
fonts
.
map
(
(
font
i
)
=
>
{
return
FontName
(
{
key
:
font
.
name
+
"
:
"
+
i
font
onToggleFontHighlight
:
this
.
props
.
onToggleFontHighlight
}
)
;
}
)
;
return
dom
.
div
(
{
key
:
family
className
:
"
font
-
group
"
}
dom
.
div
(
{
className
:
"
font
-
family
-
name
"
}
family
)
group
)
;
}
renderFontSize
(
value
)
{
return
(
value
!
=
=
null
&
&
FontSize
(
{
key
:
{
this
.
props
.
fontEditor
.
id
}
:
font
-
size
disabled
:
this
.
props
.
fontEditor
.
disabled
onChange
:
this
.
props
.
onPropertyChange
value
}
)
)
;
}
renderLineHeight
(
value
)
{
return
(
value
!
=
=
null
&
&
LineHeight
(
{
key
:
{
this
.
props
.
fontEditor
.
id
}
:
line
-
height
disabled
:
this
.
props
.
fontEditor
.
disabled
onChange
:
this
.
props
.
onPropertyChange
value
}
)
)
;
}
renderLetterSpacing
(
value
)
{
return
(
value
!
=
=
null
&
&
LetterSpacing
(
{
key
:
{
this
.
props
.
fontEditor
.
id
}
:
letter
-
spacing
disabled
:
this
.
props
.
fontEditor
.
disabled
onChange
:
this
.
props
.
onPropertyChange
value
}
)
)
;
}
renderFontStyle
(
value
)
{
return
(
value
&
&
FontStyle
(
{
onChange
:
this
.
props
.
onPropertyChange
disabled
:
this
.
props
.
fontEditor
.
disabled
value
}
)
)
;
}
renderFontWeight
(
value
)
{
return
(
value
!
=
=
null
&
&
FontWeight
(
{
onChange
:
this
.
props
.
onPropertyChange
disabled
:
this
.
props
.
fontEditor
.
disabled
value
}
)
)
;
}
renderInstances
(
fontInstances
=
[
]
selectedInstance
=
{
}
)
{
const
customInstance
=
{
name
:
getStr
(
"
fontinspector
.
customInstanceName
"
)
values
:
this
.
props
.
fontEditor
.
customInstanceValues
}
;
fontInstances
=
[
.
.
.
fontInstances
customInstance
]
;
const
instanceOptions
=
fontInstances
.
map
(
instance
=
>
dom
.
option
(
{
key
:
instance
.
name
value
:
instance
.
name
}
instance
.
name
)
)
;
const
instanceSelect
=
dom
.
select
(
{
className
:
"
font
-
control
-
input
font
-
value
-
select
"
value
:
selectedInstance
.
name
|
|
customInstance
.
name
onChange
:
e
=
>
{
const
instance
=
fontInstances
.
find
(
inst
=
>
e
.
target
.
value
=
=
=
inst
.
name
)
;
instance
&
&
this
.
props
.
onInstanceChange
(
instance
.
name
instance
.
values
)
;
}
}
instanceOptions
)
;
return
dom
.
label
(
{
className
:
"
font
-
control
"
}
dom
.
span
(
{
className
:
"
font
-
control
-
label
"
}
getStr
(
"
fontinspector
.
fontInstanceLabel
"
)
)
instanceSelect
)
;
}
renderWarning
(
warning
)
{
return
dom
.
div
(
{
id
:
"
font
-
editor
"
}
dom
.
div
(
{
className
:
"
devtools
-
sidepanel
-
no
-
result
"
}
warning
)
)
;
}
render
(
)
{
const
{
fontEditor
}
=
this
.
props
;
const
{
fonts
axes
instance
properties
warning
}
=
fontEditor
;
const
font
=
fonts
[
0
]
;
const
hasFontAxes
=
font
?
.
variationAxes
;
const
hasFontInstances
=
font
?
.
variationInstances
?
.
length
>
0
;
const
hasSlantOrItalicAxis
=
font
?
.
variationAxes
?
.
find
(
axis
=
>
{
return
axis
.
tag
=
=
=
"
slnt
"
|
|
axis
.
tag
=
=
=
"
ital
"
;
}
)
;
const
hasWeightAxis
=
font
?
.
variationAxes
?
.
find
(
axis
=
>
{
return
axis
.
tag
=
=
=
"
wght
"
;
}
)
;
if
(
!
font
)
{
return
this
.
renderWarning
(
warning
)
;
}
return
dom
.
div
(
{
id
:
"
font
-
editor
"
}
this
.
renderUsedFonts
(
fonts
)
hasFontInstances
&
&
this
.
renderInstances
(
font
.
variationInstances
instance
)
this
.
renderFontSize
(
properties
[
"
font
-
size
"
]
)
this
.
renderLineHeight
(
properties
[
"
line
-
height
"
]
)
this
.
renderLetterSpacing
(
properties
[
"
letter
-
spacing
"
]
)
!
hasWeightAxis
&
&
this
.
renderFontWeight
(
properties
[
"
font
-
weight
"
]
)
!
hasSlantOrItalicAxis
&
&
this
.
renderFontStyle
(
properties
[
"
font
-
style
"
]
)
hasFontAxes
&
&
this
.
renderAxes
(
font
.
variationAxes
axes
)
)
;
}
}
module
.
exports
=
FontEditor
;
