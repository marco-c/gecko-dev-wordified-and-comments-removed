"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
flags
=
require
(
"
devtools
/
shared
/
flags
"
)
;
const
{
executeSoon
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
Toolbox
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
"
)
;
const
createStore
=
require
(
"
devtools
/
client
/
inspector
/
store
"
)
;
const
InspectorStyleChangeTracker
=
require
(
"
devtools
/
client
/
inspector
/
shared
/
style
-
change
-
tracker
"
)
;
const
Promise
=
require
(
"
Promise
"
)
;
loader
.
lazyRequireGetter
(
this
"
HTMLBreadcrumbs
"
"
devtools
/
client
/
inspector
/
breadcrumbs
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
KeyShortcuts
"
"
devtools
/
client
/
shared
/
key
-
shortcuts
"
)
;
loader
.
lazyRequireGetter
(
this
"
InspectorSearch
"
"
devtools
/
client
/
inspector
/
inspector
-
search
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ToolSidebar
"
"
devtools
/
client
/
inspector
/
toolsidebar
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
MarkupView
"
"
devtools
/
client
/
inspector
/
markup
/
markup
"
)
;
loader
.
lazyRequireGetter
(
this
"
HighlightersOverlay
"
"
devtools
/
client
/
inspector
/
shared
/
highlighters
-
overlay
"
)
;
loader
.
lazyRequireGetter
(
this
"
ExtensionSidebar
"
"
devtools
/
client
/
inspector
/
extensions
/
extension
-
sidebar
"
)
;
loader
.
lazyRequireGetter
(
this
"
PICKER_TYPES
"
"
devtools
/
shared
/
picker
-
constants
"
)
;
loader
.
lazyRequireGetter
(
this
"
captureAndSaveScreenshot
"
"
devtools
/
client
/
shared
/
screenshot
"
true
)
;
loader
.
lazyImporter
(
this
"
DeferredTask
"
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
)
;
const
{
LocalizationHelper
localizeMarkup
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
INSPECTOR_L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
inspector
.
properties
"
)
;
const
{
FluentL10n
}
=
require
(
"
devtools
/
client
/
shared
/
fluent
-
l10n
/
fluent
-
l10n
"
)
;
const
INITIAL_SIDEBAR_SIZE
=
350
;
const
LAZY_RESIZE_INTERVAL_MS
=
200
;
const
PORTRAIT_MODE_WIDTH_THRESHOLD
=
700
;
const
SIDE_PORTAIT_MODE_WIDTH_THRESHOLD
=
1000
;
const
THREE_PANE_ENABLED_PREF
=
"
devtools
.
inspector
.
three
-
pane
-
enabled
"
;
const
THREE_PANE_ENABLED_SCALAR
=
"
devtools
.
inspector
.
three_pane_enabled
"
;
const
THREE_PANE_CHROME_ENABLED_PREF
=
"
devtools
.
inspector
.
chrome
.
three
-
pane
-
enabled
"
;
const
TELEMETRY_EYEDROPPER_OPENED
=
"
devtools
.
toolbar
.
eyedropper
.
opened
"
;
const
TELEMETRY_SCALAR_NODE_SELECTION_COUNT
=
"
devtools
.
inspector
.
node_selection_count
"
;
function
Inspector
(
toolbox
commands
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_toolbox
=
toolbox
;
this
.
_commands
=
commands
;
this
.
panelDoc
=
window
.
document
;
this
.
panelWin
=
window
;
this
.
panelWin
.
inspector
=
this
;
this
.
telemetry
=
toolbox
.
telemetry
;
this
.
store
=
createStore
(
this
)
;
this
.
_panels
=
new
Map
(
)
;
this
.
_clearSearchResultsLabel
=
this
.
_clearSearchResultsLabel
.
bind
(
this
)
;
this
.
_handleRejectionIfNotDestroyed
=
this
.
_handleRejectionIfNotDestroyed
.
bind
(
this
)
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
this
.
_onTargetSelected
=
this
.
_onTargetSelected
.
bind
(
this
)
;
this
.
_onWillNavigate
=
this
.
_onWillNavigate
.
bind
(
this
)
;
this
.
_updateSearchResultsLabel
=
this
.
_updateSearchResultsLabel
.
bind
(
this
)
;
this
.
onDetached
=
this
.
onDetached
.
bind
(
this
)
;
this
.
onHostChanged
=
this
.
onHostChanged
.
bind
(
this
)
;
this
.
onNewSelection
=
this
.
onNewSelection
.
bind
(
this
)
;
this
.
onResourceAvailable
=
this
.
onResourceAvailable
.
bind
(
this
)
;
this
.
onRootNodeAvailable
=
this
.
onRootNodeAvailable
.
bind
(
this
)
;
this
.
onPanelWindowResize
=
this
.
onPanelWindowResize
.
bind
(
this
)
;
this
.
onPickerCanceled
=
this
.
onPickerCanceled
.
bind
(
this
)
;
this
.
onPickerHovered
=
this
.
onPickerHovered
.
bind
(
this
)
;
this
.
onPickerPicked
=
this
.
onPickerPicked
.
bind
(
this
)
;
this
.
onSidebarHidden
=
this
.
onSidebarHidden
.
bind
(
this
)
;
this
.
onSidebarResized
=
this
.
onSidebarResized
.
bind
(
this
)
;
this
.
onSidebarSelect
=
this
.
onSidebarSelect
.
bind
(
this
)
;
this
.
onSidebarShown
=
this
.
onSidebarShown
.
bind
(
this
)
;
this
.
onSidebarToggle
=
this
.
onSidebarToggle
.
bind
(
this
)
;
this
.
onReflowInSelection
=
this
.
onReflowInSelection
.
bind
(
this
)
;
this
.
listenForSearchEvents
=
this
.
listenForSearchEvents
.
bind
(
this
)
;
}
Inspector
.
prototype
=
{
async
init
(
)
{
localizeMarkup
(
this
.
panelDoc
)
;
this
.
_fluentL10n
=
new
FluentL10n
(
)
;
await
this
.
_fluentL10n
.
init
(
[
"
devtools
/
client
/
compatibility
.
ftl
"
]
)
;
this
.
panelDoc
.
getElementById
(
"
inspector
-
main
-
content
"
)
.
style
.
visibility
=
"
visible
"
;
this
.
setupSplitter
(
)
;
await
this
.
commands
.
targetCommand
.
watchTargets
(
{
types
:
[
this
.
commands
.
targetCommand
.
TYPES
.
FRAME
]
onAvailable
:
this
.
_onTargetAvailable
onSelected
:
this
.
_onTargetSelected
onDestroyed
:
this
.
_onTargetDestroyed
}
)
;
await
this
.
toolbox
.
resourceCommand
.
watchResources
(
[
this
.
toolbox
.
resourceCommand
.
TYPES
.
ROOT_NODE
this
.
toolbox
.
resourceCommand
.
TYPES
.
CSS_CHANGE
this
.
toolbox
.
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
]
{
onAvailable
:
this
.
onResourceAvailable
}
)
;
this
.
previousURL
=
this
.
currentTarget
.
url
;
this
.
styleChangeTracker
=
new
InspectorStyleChangeTracker
(
this
)
;
this
.
setupSidebar
(
)
;
this
.
breadcrumbs
=
new
HTMLBreadcrumbs
(
this
)
;
this
.
setupExtensionSidebars
(
)
;
this
.
setupSearchBox
(
)
;
this
.
onNewSelection
(
)
;
this
.
toolbox
.
on
(
"
host
-
changed
"
this
.
onHostChanged
)
;
this
.
toolbox
.
nodePicker
.
on
(
"
picker
-
node
-
hovered
"
this
.
onPickerHovered
)
;
this
.
toolbox
.
nodePicker
.
on
(
"
picker
-
node
-
canceled
"
this
.
onPickerCanceled
)
;
this
.
toolbox
.
nodePicker
.
on
(
"
picker
-
node
-
picked
"
this
.
onPickerPicked
)
;
this
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onNewSelection
)
;
this
.
selection
.
on
(
"
detached
-
front
"
this
.
onDetached
)
;
this
.
telemetry
.
keyedScalarAdd
(
THREE_PANE_ENABLED_SCALAR
this
.
is3PaneModeEnabled
1
)
;
return
this
;
}
async
_onTargetAvailable
(
{
targetFront
}
)
{
if
(
!
targetFront
.
isTopLevel
)
{
return
;
}
await
this
.
initInspectorFront
(
targetFront
)
;
if
(
targetFront
.
isDestroyed
(
)
)
{
return
;
}
await
Promise
.
all
(
[
this
.
_getCssProperties
(
targetFront
)
this
.
_getAccessibilityFront
(
targetFront
)
]
)
;
}
async
_onTargetSelected
(
{
targetFront
}
)
{
if
(
this
.
_highlighters
)
{
this
.
_highlighters
.
hideAllHighlighters
(
)
;
}
if
(
targetFront
.
isDestroyed
(
)
)
{
return
;
}
await
this
.
initInspectorFront
(
targetFront
)
;
if
(
targetFront
.
isDestroyed
(
)
)
{
return
;
}
const
{
walker
}
=
await
targetFront
.
getFront
(
"
inspector
"
)
;
const
rootNodeFront
=
await
walker
.
getRootNode
(
)
;
this
.
selectionCssSelectors
=
[
]
;
this
.
_defaultNode
=
null
;
await
this
.
onRootNodeAvailable
(
rootNodeFront
)
;
}
_onTargetDestroyed
(
{
targetFront
}
)
{
if
(
!
targetFront
.
isTopLevel
)
{
return
;
}
this
.
_defaultNode
=
null
;
this
.
selection
.
setNodeFront
(
null
)
;
}
onResourceAvailable
:
function
(
resources
)
{
const
rootNodeAvailablePromises
=
[
]
;
for
(
const
resource
of
resources
)
{
const
isTopLevelTarget
=
!
!
resource
.
targetFront
?
.
isTopLevel
;
const
isTopLevelDocument
=
!
!
resource
.
isTopLevelDocument
;
if
(
resource
.
resourceType
=
=
=
this
.
toolbox
.
resourceCommand
.
TYPES
.
ROOT_NODE
&
&
!
resource
.
isDestroyed
(
)
&
&
isTopLevelTarget
&
&
isTopLevelDocument
)
{
rootNodeAvailablePromises
.
push
(
this
.
onRootNodeAvailable
(
resource
)
)
;
}
if
(
resource
.
resourceType
=
=
=
this
.
toolbox
.
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
&
&
resource
.
name
=
=
=
"
will
-
navigate
"
&
&
isTopLevelTarget
)
{
this
.
_onWillNavigate
(
)
;
}
}
return
Promise
.
all
(
rootNodeAvailablePromises
)
;
}
onRootNodeAvailable
:
async
function
(
rootNodeFront
)
{
this
.
_newRootStart
=
this
.
panelWin
.
performance
.
now
(
)
;
this
.
_defaultNode
=
null
;
this
.
selection
.
setNodeFront
(
null
)
;
this
.
_destroyMarkup
(
)
;
try
{
const
defaultNode
=
await
this
.
_getDefaultNodeForSelection
(
rootNodeFront
)
;
if
(
!
defaultNode
)
{
return
;
}
this
.
selection
.
setNodeFront
(
defaultNode
{
reason
:
"
inspector
-
default
-
selection
"
}
)
;
await
this
.
_initMarkupView
(
)
;
this
.
setupToolbar
(
)
;
}
catch
(
e
)
{
this
.
_handleRejectionIfNotDestroyed
(
e
)
;
}
}
_initMarkupView
:
async
function
(
)
{
if
(
!
this
.
_markupFrame
)
{
this
.
_markupFrame
=
this
.
panelDoc
.
createElement
(
"
iframe
"
)
;
this
.
_markupFrame
.
setAttribute
(
"
aria
-
label
"
INSPECTOR_L10N
.
getStr
(
"
inspector
.
panelLabel
.
markupView
"
)
)
;
this
.
_markupFrame
.
setAttribute
(
"
flex
"
"
1
"
)
;
this
.
_markupFrame
.
setAttribute
(
"
tooltip
"
"
aHTMLTooltip
"
)
;
this
.
_markupBox
=
this
.
panelDoc
.
getElementById
(
"
markup
-
box
"
)
;
this
.
_markupBox
.
style
.
visibility
=
"
hidden
"
;
this
.
_markupBox
.
appendChild
(
this
.
_markupFrame
)
;
const
onMarkupFrameLoaded
=
new
Promise
(
r
=
>
this
.
_markupFrame
.
addEventListener
(
"
load
"
r
{
capture
:
true
once
:
true
}
)
)
;
this
.
_markupFrame
.
setAttribute
(
"
src
"
"
markup
/
markup
.
xhtml
"
)
;
await
onMarkupFrameLoaded
;
}
this
.
_markupFrame
.
contentWindow
.
focus
(
)
;
this
.
_markupBox
.
style
.
visibility
=
"
visible
"
;
this
.
markup
=
new
MarkupView
(
this
this
.
_markupFrame
this
.
_toolbox
.
win
)
;
this
.
emitForTests
(
"
markuploaded
"
)
;
const
onExpand
=
this
.
markup
.
expandNode
(
this
.
selection
.
nodeFront
)
;
if
(
this
.
_highlighters
)
{
await
Promise
.
all
(
[
this
.
highlighters
.
restoreFlexboxState
(
)
this
.
highlighters
.
restoreGridState
(
)
]
)
;
}
this
.
emit
(
"
new
-
root
"
)
;
await
onExpand
;
this
.
emit
(
"
reloaded
"
)
;
if
(
this
.
_newRootStart
)
{
if
(
this
.
toolbox
&
&
this
.
toolbox
.
currentToolId
=
=
"
inspector
"
)
{
const
delay
=
this
.
panelWin
.
performance
.
now
(
)
-
this
.
_newRootStart
;
const
telemetryKey
=
"
DEVTOOLS_INSPECTOR_NEW_ROOT_TO_RELOAD_DELAY_MS
"
;
const
histogram
=
this
.
telemetry
.
getHistogramById
(
telemetryKey
)
;
histogram
.
add
(
delay
)
;
}
delete
this
.
_newRootStart
;
}
}
async
initInspectorFront
(
targetFront
)
{
this
.
inspectorFront
=
await
targetFront
.
getFront
(
"
inspector
"
)
;
this
.
walker
=
this
.
inspectorFront
.
walker
;
}
get
toolbox
(
)
{
return
this
.
_toolbox
;
}
get
commands
(
)
{
return
this
.
_commands
;
}
async
getAllInspectorFronts
(
)
{
return
this
.
commands
.
targetCommand
.
getAllFronts
(
[
this
.
commands
.
targetCommand
.
TYPES
.
FRAME
]
"
inspector
"
)
;
}
get
highlighters
(
)
{
if
(
!
this
.
_highlighters
)
{
this
.
_highlighters
=
new
HighlightersOverlay
(
this
)
;
}
return
this
.
_highlighters
;
}
get
is3PaneModeEnabled
(
)
{
if
(
this
.
currentTarget
.
chrome
)
{
if
(
!
this
.
_is3PaneModeChromeEnabled
)
{
this
.
_is3PaneModeChromeEnabled
=
Services
.
prefs
.
getBoolPref
(
THREE_PANE_CHROME_ENABLED_PREF
)
;
}
return
this
.
_is3PaneModeChromeEnabled
;
}
if
(
!
this
.
_is3PaneModeEnabled
)
{
this
.
_is3PaneModeEnabled
=
Services
.
prefs
.
getBoolPref
(
THREE_PANE_ENABLED_PREF
)
;
}
return
this
.
_is3PaneModeEnabled
;
}
set
is3PaneModeEnabled
(
value
)
{
if
(
this
.
currentTarget
.
chrome
)
{
this
.
_is3PaneModeChromeEnabled
=
value
;
Services
.
prefs
.
setBoolPref
(
THREE_PANE_CHROME_ENABLED_PREF
this
.
_is3PaneModeChromeEnabled
)
;
}
else
{
this
.
_is3PaneModeEnabled
=
value
;
Services
.
prefs
.
setBoolPref
(
THREE_PANE_ENABLED_PREF
this
.
_is3PaneModeEnabled
)
;
}
}
get
search
(
)
{
if
(
!
this
.
_search
)
{
this
.
_search
=
new
InspectorSearch
(
this
this
.
searchBox
this
.
searchClearButton
)
;
}
return
this
.
_search
;
}
get
selection
(
)
{
return
this
.
toolbox
.
selection
;
}
get
cssProperties
(
)
{
return
this
.
_cssProperties
.
cssProperties
;
}
get
fluentL10n
(
)
{
return
this
.
_fluentL10n
;
}
HIGHLIGHTER_AUTOHIDE_TIMER
:
flags
.
testing
?
0
:
1000
_handleRejectionIfNotDestroyed
:
function
(
e
)
{
if
(
!
this
.
_destroyed
)
{
console
.
error
(
e
)
;
}
}
_onWillNavigate
:
function
(
)
{
this
.
_defaultNode
=
null
;
this
.
selection
.
setNodeFront
(
null
)
;
if
(
this
.
_highlighters
)
{
this
.
_highlighters
.
hideAllHighlighters
(
)
;
}
this
.
_destroyMarkup
(
)
;
this
.
_pendingSelectionUnique
=
null
;
}
_getCssProperties
:
async
function
(
targetFront
)
{
this
.
_cssProperties
=
await
targetFront
.
getFront
(
"
cssProperties
"
)
;
}
_getAccessibilityFront
:
async
function
(
targetFront
)
{
this
.
accessibilityFront
=
await
targetFront
.
getFront
(
"
accessibility
"
)
;
return
this
.
accessibilityFront
;
}
_getDefaultNodeForSelection
:
async
function
(
rootNodeFront
)
{
if
(
this
.
_defaultNode
)
{
return
this
.
_defaultNode
;
}
const
pendingSelectionUnique
=
Symbol
(
"
pending
-
selection
"
)
;
this
.
_pendingSelectionUnique
=
pendingSelectionUnique
;
if
(
this
.
_pendingSelectionUnique
!
=
=
pendingSelectionUnique
)
{
return
null
;
}
const
walker
=
rootNodeFront
.
walkerFront
;
const
cssSelectors
=
this
.
selectionCssSelectors
;
const
defaultNodeSelectors
=
[
(
)
=
>
cssSelectors
.
length
?
this
.
commands
.
inspectorCommand
.
findNodeFrontFromSelectors
(
cssSelectors
)
:
null
(
)
=
>
walker
.
querySelector
(
rootNodeFront
"
body
"
)
(
)
=
>
walker
.
documentElement
(
)
]
;
for
(
const
selector
of
defaultNodeSelectors
)
{
const
node
=
await
selector
(
)
;
if
(
this
.
_pendingSelectionUnique
!
=
=
pendingSelectionUnique
)
{
return
null
;
}
if
(
node
)
{
this
.
_defaultNode
=
node
;
return
node
;
}
}
return
null
;
}
get
currentTarget
(
)
{
return
this
.
commands
.
targetCommand
.
targetFront
;
}
setupSearchBox
:
function
(
)
{
this
.
searchBox
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
searchbox
"
)
;
this
.
searchClearButton
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
searchinput
-
clear
"
)
;
this
.
searchResultsContainer
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
searchlabel
-
container
"
)
;
this
.
searchResultsLabel
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
searchlabel
"
)
;
this
.
searchBox
.
addEventListener
(
"
focus
"
this
.
listenForSearchEvents
{
once
:
true
}
)
;
this
.
createSearchBoxShortcuts
(
)
;
}
listenForSearchEvents
(
)
{
this
.
search
.
on
(
"
search
-
cleared
"
this
.
_clearSearchResultsLabel
)
;
this
.
search
.
on
(
"
search
-
result
"
this
.
_updateSearchResultsLabel
)
;
}
createSearchBoxShortcuts
(
)
{
this
.
searchboxShortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
panelDoc
.
defaultView
target
:
this
.
toolbox
.
getChromeEventHandler
(
)
}
)
;
const
key
=
INSPECTOR_L10N
.
getStr
(
"
inspector
.
searchHTML
.
key
"
)
;
this
.
searchboxShortcuts
.
on
(
key
event
=
>
{
if
(
event
.
originalTarget
.
closest
(
"
#
sidebar
-
panel
-
ruleview
"
)
|
|
event
.
originalTarget
.
closest
(
"
#
sidebar
-
panel
-
computedview
"
)
)
{
return
;
}
const
win
=
event
.
originalTarget
.
ownerGlobal
;
if
(
win
=
=
=
this
.
panelWin
|
|
win
.
parent
=
=
=
this
.
panelWin
)
{
event
.
preventDefault
(
)
;
this
.
searchBox
.
focus
(
)
;
}
}
)
;
}
get
searchSuggestions
(
)
{
return
this
.
search
.
autocompleter
;
}
_clearSearchResultsLabel
:
function
(
result
)
{
return
this
.
_updateSearchResultsLabel
(
result
true
)
;
}
_updateSearchResultsLabel
:
function
(
result
clear
=
false
)
{
let
str
=
"
"
;
if
(
!
clear
)
{
if
(
result
)
{
str
=
INSPECTOR_L10N
.
getFormatStr
(
"
inspector
.
searchResultsCount2
"
result
.
resultsIndex
+
1
result
.
resultsLength
)
;
}
else
{
str
=
INSPECTOR_L10N
.
getStr
(
"
inspector
.
searchResultsNone
"
)
;
}
this
.
searchResultsContainer
.
hidden
=
false
;
}
else
{
this
.
searchResultsContainer
.
hidden
=
true
;
}
this
.
searchResultsLabel
.
textContent
=
str
;
}
get
React
(
)
{
return
this
.
_toolbox
.
React
;
}
get
ReactDOM
(
)
{
return
this
.
_toolbox
.
ReactDOM
;
}
get
ReactRedux
(
)
{
return
this
.
_toolbox
.
ReactRedux
;
}
get
browserRequire
(
)
{
return
this
.
_toolbox
.
browserRequire
;
}
get
InspectorTabPanel
(
)
{
if
(
!
this
.
_InspectorTabPanel
)
{
this
.
_InspectorTabPanel
=
this
.
React
.
createFactory
(
this
.
browserRequire
(
"
devtools
/
client
/
inspector
/
components
/
InspectorTabPanel
"
)
)
;
}
return
this
.
_InspectorTabPanel
;
}
get
InspectorSplitBox
(
)
{
if
(
!
this
.
_InspectorSplitBox
)
{
this
.
_InspectorSplitBox
=
this
.
React
.
createFactory
(
this
.
browserRequire
(
"
devtools
/
client
/
shared
/
components
/
splitter
/
SplitBox
"
)
)
;
}
return
this
.
_InspectorSplitBox
;
}
get
TabBar
(
)
{
if
(
!
this
.
_TabBar
)
{
this
.
_TabBar
=
this
.
React
.
createFactory
(
this
.
browserRequire
(
"
devtools
/
client
/
shared
/
components
/
tabs
/
TabBar
"
)
)
;
}
return
this
.
_TabBar
;
}
useLandscapeMode
:
function
(
)
{
if
(
!
this
.
panelDoc
)
{
return
true
;
}
const
splitterBox
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
splitter
-
box
"
)
;
const
width
=
splitterBox
.
clientWidth
;
return
this
.
is3PaneModeEnabled
&
&
(
this
.
toolbox
.
hostType
=
=
Toolbox
.
HostType
.
LEFT
|
|
this
.
toolbox
.
hostType
=
=
Toolbox
.
HostType
.
RIGHT
)
?
width
>
SIDE_PORTAIT_MODE_WIDTH_THRESHOLD
:
width
>
PORTRAIT_MODE_WIDTH_THRESHOLD
;
}
setupSplitter
:
function
(
)
{
const
{
width
height
splitSidebarWidth
}
=
this
.
getSidebarSize
(
)
;
this
.
sidebarSplitBoxRef
=
this
.
React
.
createRef
(
)
;
const
splitter
=
this
.
InspectorSplitBox
(
{
className
:
"
inspector
-
sidebar
-
splitter
"
initialWidth
:
width
initialHeight
:
height
minSize
:
"
10
%
"
maxSize
:
"
80
%
"
splitterSize
:
1
endPanelControl
:
true
startPanel
:
this
.
InspectorTabPanel
(
{
id
:
"
inspector
-
main
-
content
"
}
)
endPanel
:
this
.
InspectorSplitBox
(
{
initialWidth
:
splitSidebarWidth
minSize
:
"
225px
"
maxSize
:
"
80
%
"
splitterSize
:
this
.
is3PaneModeEnabled
?
1
:
0
endPanelControl
:
this
.
is3PaneModeEnabled
startPanel
:
this
.
InspectorTabPanel
(
{
id
:
"
inspector
-
rules
-
container
"
}
)
endPanel
:
this
.
InspectorTabPanel
(
{
id
:
"
inspector
-
sidebar
-
container
"
}
)
ref
:
this
.
sidebarSplitBoxRef
}
)
vert
:
this
.
useLandscapeMode
(
)
onControlledPanelResized
:
this
.
onSidebarResized
}
)
;
this
.
splitBox
=
this
.
ReactDOM
.
render
(
splitter
this
.
panelDoc
.
getElementById
(
"
inspector
-
splitter
-
box
"
)
)
;
this
.
panelWin
.
addEventListener
(
"
resize
"
this
.
onPanelWindowResize
true
)
;
}
_onLazyPanelResize
:
async
function
(
)
{
if
(
window
.
closed
|
|
this
.
_destroyed
)
{
return
;
}
this
.
splitBox
.
setState
(
{
vert
:
this
.
useLandscapeMode
(
)
}
)
;
this
.
emit
(
"
inspector
-
resize
"
)
;
}
onPanelWindowResize
:
function
(
)
{
if
(
this
.
toolbox
.
currentToolId
!
=
=
"
inspector
"
)
{
return
;
}
if
(
!
this
.
_lazyResizeHandler
)
{
this
.
_lazyResizeHandler
=
new
DeferredTask
(
this
.
_onLazyPanelResize
.
bind
(
this
)
LAZY_RESIZE_INTERVAL_MS
0
)
;
}
this
.
_lazyResizeHandler
.
arm
(
)
;
}
getSidebarSize
:
function
(
)
{
let
width
;
let
height
;
let
splitSidebarWidth
;
try
{
width
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
toolsidebar
-
width
.
inspector
"
)
;
height
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
toolsidebar
-
height
.
inspector
"
)
;
splitSidebarWidth
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
toolsidebar
-
width
.
inspector
.
splitsidebar
"
)
;
}
catch
(
e
)
{
width
=
this
.
is3PaneModeEnabled
?
INITIAL_SIDEBAR_SIZE
*
2
:
INITIAL_SIDEBAR_SIZE
;
height
=
INITIAL_SIDEBAR_SIZE
;
splitSidebarWidth
=
INITIAL_SIDEBAR_SIZE
;
}
return
{
width
height
splitSidebarWidth
}
;
}
onSidebarHidden
:
function
(
)
{
const
state
=
this
.
splitBox
.
state
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolsidebar
-
width
.
inspector
"
state
.
width
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolsidebar
-
height
.
inspector
"
state
.
height
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
toolsidebar
-
width
.
inspector
.
splitsidebar
"
this
.
sidebarSplitBoxRef
.
current
.
state
.
width
)
;
}
onSidebarResized
:
function
(
width
height
)
{
this
.
toolbox
.
emit
(
"
inspector
-
sidebar
-
resized
"
{
width
height
}
)
;
}
getActiveSidebar
:
function
(
)
{
return
Services
.
prefs
.
getCharPref
(
"
devtools
.
inspector
.
activeSidebar
"
)
;
}
setActiveSidebar
:
function
(
toolId
)
{
Services
.
prefs
.
setCharPref
(
"
devtools
.
inspector
.
activeSidebar
"
toolId
)
;
}
getSelectedSidebar
:
function
(
)
{
const
pref
=
"
devtools
.
inspector
.
selectedSidebar
"
;
if
(
!
Services
.
prefs
.
prefHasUserValue
(
pref
)
)
{
return
this
.
getActiveSidebar
(
)
;
}
return
Services
.
prefs
.
getCharPref
(
pref
)
;
}
setSelectedSidebar
:
function
(
toolId
)
{
Services
.
prefs
.
setCharPref
(
"
devtools
.
inspector
.
selectedSidebar
"
toolId
)
;
}
onSidebarSelect
:
function
(
toolId
)
{
this
.
setSelectedSidebar
(
toolId
)
;
this
.
setActiveSidebar
(
toolId
)
;
this
.
getPanel
(
toolId
)
;
this
.
toolbox
.
emit
(
"
inspector
-
sidebar
-
select
"
toolId
)
;
}
onSidebarShown
:
function
(
)
{
const
{
width
height
splitSidebarWidth
}
=
this
.
getSidebarSize
(
)
;
this
.
splitBox
.
setState
(
{
width
height
}
)
;
this
.
sidebarSplitBoxRef
.
current
.
setState
(
{
width
:
splitSidebarWidth
}
)
;
}
async
onSidebarToggle
(
)
{
this
.
is3PaneModeEnabled
=
!
this
.
is3PaneModeEnabled
;
await
this
.
setupToolbar
(
)
;
this
.
addRuleView
(
{
skipQueue
:
true
}
)
;
}
setSidebarSplitBoxState
(
)
{
const
toolboxWidth
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
splitter
-
box
"
)
.
clientWidth
;
const
sidebarWidth
=
this
.
splitBox
.
state
.
width
;
let
sidebarSplitboxWidth
;
if
(
this
.
useLandscapeMode
(
)
)
{
const
canDoubleSidebarWidth
=
sidebarWidth
*
2
<
toolboxWidth
/
2
;
this
.
splitBox
.
setState
(
{
width
:
canDoubleSidebarWidth
?
sidebarWidth
*
2
:
(
toolboxWidth
*
2
)
/
3
}
)
;
sidebarSplitboxWidth
=
canDoubleSidebarWidth
?
sidebarWidth
:
toolboxWidth
/
3
;
}
else
{
sidebarSplitboxWidth
=
toolboxWidth
/
2
;
}
this
.
sidebarSplitBoxRef
.
current
.
setState
(
{
endPanelControl
:
true
splitterSize
:
1
width
:
sidebarSplitboxWidth
}
)
;
}
addRuleView
(
{
skipQueue
=
false
}
=
{
}
)
{
const
selectedSidebar
=
this
.
getSelectedSidebar
(
)
;
const
ruleViewSidebar
=
this
.
sidebarSplitBoxRef
.
current
.
startPanelContainer
;
if
(
this
.
is3PaneModeEnabled
)
{
ruleViewSidebar
.
style
.
display
=
"
block
"
;
this
.
setSidebarSplitBoxState
(
)
;
this
.
getPanel
(
"
ruleview
"
)
;
this
.
sidebar
.
removeTab
(
"
ruleview
"
)
;
this
.
sidebar
.
select
(
selectedSidebar
)
;
this
.
ruleViewSideBar
.
addExistingTab
(
"
ruleview
"
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
ruleViewTitle
"
)
true
)
;
this
.
ruleViewSideBar
.
show
(
)
;
}
else
{
this
.
setActiveSidebar
(
"
ruleview
"
)
;
ruleViewSidebar
.
style
.
display
=
"
none
"
;
const
splitterBox
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
splitter
-
box
"
)
;
this
.
splitBox
.
setState
(
{
width
:
this
.
useLandscapeMode
(
)
?
this
.
sidebarSplitBoxRef
.
current
.
state
.
width
:
splitterBox
.
clientWidth
}
)
;
this
.
sidebarSplitBoxRef
.
current
.
setState
(
{
endPanelControl
:
false
splitterSize
:
0
}
)
;
this
.
ruleViewSideBar
.
hide
(
)
;
this
.
ruleViewSideBar
.
removeTab
(
"
ruleview
"
)
;
if
(
skipQueue
)
{
this
.
sidebar
.
addExistingTab
(
"
ruleview
"
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
ruleViewTitle
"
)
true
0
)
;
}
else
{
this
.
sidebar
.
queueExistingTab
(
"
ruleview
"
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
ruleViewTitle
"
)
true
0
)
;
}
}
this
.
setSelectedSidebar
(
selectedSidebar
)
;
this
.
emit
(
"
ruleview
-
added
"
)
;
}
hasPanel
:
function
(
id
)
{
return
this
.
_panels
.
has
(
id
)
;
}
getPanel
:
function
(
id
)
{
if
(
this
.
_panels
.
has
(
id
)
)
{
return
this
.
_panels
.
get
(
id
)
;
}
let
panel
;
switch
(
id
)
{
case
"
animationinspector
"
:
const
AnimationInspector
=
this
.
browserRequire
(
"
devtools
/
client
/
inspector
/
animation
/
animation
"
)
;
panel
=
new
AnimationInspector
(
this
this
.
panelWin
)
;
break
;
case
"
boxmodel
"
:
const
BoxModel
=
require
(
"
devtools
/
client
/
inspector
/
boxmodel
/
box
-
model
"
)
;
panel
=
new
BoxModel
(
this
this
.
panelWin
)
;
break
;
case
"
changesview
"
:
const
ChangesView
=
this
.
browserRequire
(
"
devtools
/
client
/
inspector
/
changes
/
ChangesView
"
)
;
panel
=
new
ChangesView
(
this
this
.
panelWin
)
;
break
;
case
"
compatibilityview
"
:
const
CompatibilityView
=
this
.
browserRequire
(
"
devtools
/
client
/
inspector
/
compatibility
/
CompatibilityView
"
)
;
panel
=
new
CompatibilityView
(
this
this
.
panelWin
)
;
break
;
case
"
computedview
"
:
const
{
ComputedViewTool
}
=
this
.
browserRequire
(
"
devtools
/
client
/
inspector
/
computed
/
computed
"
)
;
panel
=
new
ComputedViewTool
(
this
this
.
panelWin
)
;
break
;
case
"
fontinspector
"
:
const
FontInspector
=
this
.
browserRequire
(
"
devtools
/
client
/
inspector
/
fonts
/
fonts
"
)
;
panel
=
new
FontInspector
(
this
this
.
panelWin
)
;
break
;
case
"
layoutview
"
:
const
LayoutView
=
this
.
browserRequire
(
"
devtools
/
client
/
inspector
/
layout
/
layout
"
)
;
panel
=
new
LayoutView
(
this
this
.
panelWin
)
;
break
;
case
"
ruleview
"
:
const
{
RuleViewTool
}
=
require
(
"
devtools
/
client
/
inspector
/
rules
/
rules
"
)
;
panel
=
new
RuleViewTool
(
this
this
.
panelWin
)
;
break
;
default
:
return
null
;
}
if
(
panel
)
{
this
.
_panels
.
set
(
id
panel
)
;
}
return
panel
;
}
setupSidebar
(
)
{
const
sidebar
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
sidebar
"
)
;
const
options
=
{
showAllTabsMenu
:
true
allTabsMenuButtonTooltip
:
INSPECTOR_L10N
.
getStr
(
"
allTabsMenuButton
.
tooltip
"
)
sidebarToggleButton
:
{
collapsed
:
!
this
.
is3PaneModeEnabled
collapsePaneTitle
:
INSPECTOR_L10N
.
getStr
(
"
inspector
.
hideThreePaneMode
"
)
expandPaneTitle
:
INSPECTOR_L10N
.
getStr
(
"
inspector
.
showThreePaneMode
"
)
onClick
:
this
.
onSidebarToggle
}
}
;
this
.
sidebar
=
new
ToolSidebar
(
sidebar
this
"
inspector
"
options
)
;
this
.
sidebar
.
on
(
"
select
"
this
.
onSidebarSelect
)
;
const
ruleSideBar
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
rules
-
sidebar
"
)
;
this
.
ruleViewSideBar
=
new
ToolSidebar
(
ruleSideBar
this
"
inspector
"
{
hideTabstripe
:
true
}
)
;
this
.
addRuleView
(
)
;
const
sidebarPanels
=
[
]
;
sidebarPanels
.
push
(
{
id
:
"
layoutview
"
title
:
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
layoutViewTitle2
"
)
}
)
;
sidebarPanels
.
push
(
{
id
:
"
computedview
"
title
:
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
computedViewTitle
"
)
}
)
;
sidebarPanels
.
push
(
{
id
:
"
changesview
"
title
:
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
changesViewTitle
"
)
}
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
devtools
.
inspector
.
compatibility
.
enabled
"
)
)
{
sidebarPanels
.
push
(
{
id
:
"
compatibilityview
"
title
:
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
compatibilityViewTitle
"
)
}
)
;
}
sidebarPanels
.
push
(
{
id
:
"
fontinspector
"
title
:
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
fontInspectorTitle
"
)
}
)
;
sidebarPanels
.
push
(
{
id
:
"
animationinspector
"
title
:
INSPECTOR_L10N
.
getStr
(
"
inspector
.
sidebar
.
animationInspectorTitle
"
)
}
)
;
const
defaultTab
=
this
.
getActiveSidebar
(
)
;
for
(
const
{
id
title
}
of
sidebarPanels
)
{
if
(
id
=
=
=
"
computedview
"
)
{
this
.
sidebar
.
queueExistingTab
(
id
title
defaultTab
=
=
=
id
)
;
}
else
{
this
.
sidebar
.
queueTab
(
id
title
{
props
:
{
id
title
}
panel
:
(
)
=
>
{
return
this
.
getPanel
(
id
)
.
provider
;
}
}
defaultTab
=
=
=
id
)
;
}
}
this
.
sidebar
.
addAllQueuedTabs
(
)
;
this
.
sidebar
.
on
(
"
show
"
this
.
onSidebarShown
)
;
this
.
sidebar
.
on
(
"
hide
"
this
.
onSidebarHidden
)
;
this
.
sidebar
.
on
(
"
destroy
"
this
.
onSidebarHidden
)
;
this
.
sidebar
.
show
(
)
;
}
setupExtensionSidebars
(
)
{
for
(
const
[
sidebarId
{
title
}
]
of
this
.
toolbox
.
inspectorExtensionSidebars
)
{
this
.
addExtensionSidebar
(
sidebarId
{
title
}
)
;
}
}
addExtensionSidebar
:
function
(
id
{
title
}
)
{
if
(
this
.
_panels
.
has
(
id
)
)
{
throw
new
Error
(
Cannot
create
an
extension
sidebar
for
the
existent
id
:
{
id
}
)
;
}
const
extensionSidebar
=
new
ExtensionSidebar
(
this
{
id
title
}
)
;
this
.
addSidebarTab
(
id
title
extensionSidebar
.
provider
false
)
;
this
.
_panels
.
set
(
id
extensionSidebar
)
;
this
.
toolbox
.
emit
(
extension
-
sidebar
-
created
-
{
id
}
extensionSidebar
)
;
}
removeExtensionSidebar
:
function
(
id
)
{
if
(
!
this
.
_panels
.
has
(
id
)
)
{
throw
new
Error
(
Unable
to
find
a
sidebar
panel
with
id
"
{
id
}
"
)
;
}
const
panel
=
this
.
_panels
.
get
(
id
)
;
if
(
!
(
panel
instanceof
ExtensionSidebar
)
)
{
throw
new
Error
(
The
sidebar
panel
with
id
"
{
id
}
"
is
not
an
ExtensionSidebar
)
;
}
this
.
_panels
.
delete
(
id
)
;
this
.
sidebar
.
removeTab
(
id
)
;
panel
.
destroy
(
)
;
}
addSidebarTab
:
function
(
id
title
panel
selected
)
{
this
.
sidebar
.
addTab
(
id
title
panel
selected
)
;
}
async
supportsEyeDropper
(
)
{
try
{
return
await
this
.
inspectorFront
.
supportsHighlighters
(
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
return
false
;
}
}
async
setupToolbar
(
)
{
this
.
teardownToolbar
(
)
;
this
.
addNode
=
this
.
addNode
.
bind
(
this
)
;
this
.
addNodeButton
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
element
-
add
-
button
"
)
;
this
.
addNodeButton
.
addEventListener
(
"
click
"
this
.
addNode
)
;
const
canShowEyeDropper
=
await
this
.
supportsEyeDropper
(
)
;
if
(
!
this
.
panelDoc
)
{
return
;
}
if
(
canShowEyeDropper
)
{
this
.
onEyeDropperDone
=
this
.
onEyeDropperDone
.
bind
(
this
)
;
this
.
onEyeDropperButtonClicked
=
this
.
onEyeDropperButtonClicked
.
bind
(
this
)
;
this
.
eyeDropperButton
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
eyedropper
-
toggle
"
)
;
this
.
eyeDropperButton
.
disabled
=
false
;
this
.
eyeDropperButton
.
title
=
INSPECTOR_L10N
.
getStr
(
"
inspector
.
eyedropper
.
label
"
)
;
this
.
eyeDropperButton
.
addEventListener
(
"
click
"
this
.
onEyeDropperButtonClicked
)
;
}
else
{
const
eyeDropperButton
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
eyedropper
-
toggle
"
)
;
eyeDropperButton
.
disabled
=
true
;
eyeDropperButton
.
title
=
INSPECTOR_L10N
.
getStr
(
"
eyedropper
.
disabled
.
title
"
)
;
}
this
.
emit
(
"
inspector
-
toolbar
-
updated
"
)
;
}
teardownToolbar
:
function
(
)
{
if
(
this
.
addNodeButton
)
{
this
.
addNodeButton
.
removeEventListener
(
"
click
"
this
.
addNode
)
;
this
.
addNodeButton
=
null
;
}
if
(
this
.
eyeDropperButton
)
{
this
.
eyeDropperButton
.
removeEventListener
(
"
click
"
this
.
onEyeDropperButtonClicked
)
;
this
.
eyeDropperButton
=
null
;
}
}
_selectionCssSelectors
:
null
set
selectionCssSelectors
(
cssSelectors
=
[
]
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_selectionCssSelectors
=
{
selectors
:
cssSelectors
url
:
this
.
currentTarget
.
url
}
;
}
get
selectionCssSelectors
(
)
{
if
(
this
.
_selectionCssSelectors
&
&
this
.
_selectionCssSelectors
.
url
=
=
=
this
.
currentTarget
.
url
)
{
return
this
.
_selectionCssSelectors
.
selectors
;
}
return
[
]
;
}
updateSelectionCssSelectors
(
)
{
if
(
!
this
.
selection
.
isElementNode
(
)
)
{
return
;
}
this
.
commands
.
inspectorCommand
.
getNodeFrontSelectorsFromTopDocument
(
this
.
selection
.
nodeFront
)
.
then
(
selectors
=
>
{
this
.
selectionCssSelectors
=
selectors
;
this
.
emitForTests
(
"
selection
-
css
-
selectors
-
updated
"
selectors
)
;
}
this
.
_handleRejectionIfNotDestroyed
)
;
}
canAddHTMLChild
:
function
(
)
{
const
selection
=
this
.
selection
;
const
invalidTagNames
=
[
"
html
"
"
iframe
"
]
;
return
(
selection
.
isHTMLNode
(
)
&
&
selection
.
isElementNode
(
)
&
&
!
selection
.
isPseudoElementNode
(
)
&
&
!
selection
.
isAnonymousNode
(
)
&
&
!
invalidTagNames
.
includes
(
selection
.
nodeFront
.
nodeName
.
toLowerCase
(
)
)
)
;
}
updateAddElementButton
(
)
{
const
btn
=
this
.
panelDoc
.
getElementById
(
"
inspector
-
element
-
add
-
button
"
)
;
if
(
this
.
canAddHTMLChild
(
)
)
{
btn
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
btn
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
async
onHostChanged
(
)
{
await
this
.
_onLazyPanelResize
(
)
;
if
(
!
this
.
currentTarget
|
|
!
this
.
is3PaneModeEnabled
)
{
return
;
}
this
.
searchboxShortcuts
.
destroy
(
)
;
this
.
createSearchBoxShortcuts
(
)
;
this
.
setSidebarSplitBoxState
(
)
;
}
onNewSelection
:
function
(
value
reason
)
{
if
(
reason
=
=
=
"
selection
-
destroy
"
)
{
return
;
}
this
.
updateAddElementButton
(
)
;
this
.
updateSelectionCssSelectors
(
)
;
this
.
trackReflowsInSelection
(
)
;
const
selfUpdate
=
this
.
updating
(
"
inspector
-
panel
"
)
;
executeSoon
(
(
)
=
>
{
try
{
selfUpdate
(
this
.
selection
.
nodeFront
)
;
this
.
telemetry
.
scalarAdd
(
TELEMETRY_SCALAR_NODE_SELECTION_COUNT
1
)
;
}
catch
(
ex
)
{
console
.
error
(
ex
)
;
}
}
)
;
}
async
trackReflowsInSelection
(
)
{
this
.
untrackReflowsInSelection
(
)
;
if
(
!
this
.
selection
.
nodeFront
)
{
return
;
}
if
(
this
.
_destroyed
)
{
return
;
}
try
{
await
this
.
commands
.
resourceCommand
.
watchResources
(
[
this
.
commands
.
resourceCommand
.
TYPES
.
REFLOW
]
{
onAvailable
:
this
.
onReflowInSelection
}
)
;
}
catch
(
e
)
{
if
(
!
this
.
_destroyed
)
{
throw
e
;
}
}
}
untrackReflowsInSelection
(
)
{
this
.
commands
.
resourceCommand
.
unwatchResources
(
[
this
.
commands
.
resourceCommand
.
TYPES
.
REFLOW
]
{
onAvailable
:
this
.
onReflowInSelection
}
)
;
}
onReflowInSelection
(
)
{
this
.
emit
(
"
reflow
-
in
-
selected
-
target
"
)
;
}
updating
:
function
(
name
)
{
if
(
this
.
_updateProgress
&
&
this
.
_updateProgress
.
node
!
=
this
.
selection
.
nodeFront
)
{
this
.
cancelUpdate
(
)
;
}
if
(
!
this
.
_updateProgress
)
{
const
self
=
this
;
this
.
_updateProgress
=
{
node
:
this
.
selection
.
nodeFront
outstanding
:
new
Set
(
)
checkDone
:
function
(
)
{
if
(
this
!
=
=
self
.
_updateProgress
)
{
return
;
}
if
(
!
self
.
selection
|
|
this
.
node
!
=
=
self
.
selection
.
nodeFront
)
{
self
.
cancelUpdate
(
)
;
return
;
}
if
(
this
.
outstanding
.
size
!
=
=
0
)
{
return
;
}
self
.
_updateProgress
=
null
;
self
.
emit
(
"
inspector
-
updated
"
name
)
;
}
}
;
}
const
progress
=
this
.
_updateProgress
;
const
done
=
function
(
)
{
progress
.
outstanding
.
delete
(
done
)
;
progress
.
checkDone
(
)
;
}
;
progress
.
outstanding
.
add
(
done
)
;
return
done
;
}
cancelUpdate
:
function
(
)
{
this
.
_updateProgress
=
null
;
}
onDetached
:
function
(
parentNode
)
{
this
.
breadcrumbs
.
cutAfter
(
this
.
breadcrumbs
.
indexOf
(
parentNode
)
)
;
const
nodeFront
=
parentNode
?
parentNode
:
this
.
_defaultNode
;
this
.
selection
.
setNodeFront
(
nodeFront
{
reason
:
"
detached
"
}
)
;
}
destroy
:
function
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
this
.
cancelUpdate
(
)
;
this
.
panelWin
.
removeEventListener
(
"
resize
"
this
.
onPanelWindowResize
true
)
;
this
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onNewSelection
)
;
this
.
selection
.
off
(
"
detached
-
front
"
this
.
onDetached
)
;
this
.
toolbox
.
nodePicker
.
off
(
"
picker
-
node
-
canceled
"
this
.
onPickerCanceled
)
;
this
.
toolbox
.
nodePicker
.
off
(
"
picker
-
node
-
hovered
"
this
.
onPickerHovered
)
;
this
.
toolbox
.
nodePicker
.
off
(
"
picker
-
node
-
picked
"
this
.
onPickerPicked
)
;
this
.
sidebar
.
destroy
(
)
;
this
.
sidebar
.
off
(
"
select
"
this
.
onSidebarSelect
)
;
this
.
sidebar
.
off
(
"
show
"
this
.
onSidebarShown
)
;
this
.
sidebar
.
off
(
"
hide
"
this
.
onSidebarHidden
)
;
this
.
sidebar
.
off
(
"
destroy
"
this
.
onSidebarHidden
)
;
for
(
const
[
panel
]
of
this
.
_panels
)
{
panel
.
destroy
(
)
;
}
this
.
_panels
.
clear
(
)
;
if
(
this
.
_highlighters
)
{
this
.
_highlighters
.
destroy
(
)
;
}
if
(
this
.
_search
)
{
this
.
_search
.
destroy
(
)
;
this
.
_search
=
null
;
}
this
.
ruleViewSideBar
.
destroy
(
)
;
this
.
ruleViewSideBar
=
null
;
this
.
_destroyMarkup
(
)
;
this
.
teardownToolbar
(
)
;
this
.
breadcrumbs
.
destroy
(
)
;
this
.
styleChangeTracker
.
destroy
(
)
;
this
.
searchboxShortcuts
.
destroy
(
)
;
this
.
searchboxShortcuts
=
null
;
this
.
commands
.
targetCommand
.
unwatchTargets
(
{
types
:
[
this
.
commands
.
targetCommand
.
TYPES
.
FRAME
]
onAvailable
:
this
.
_onTargetAvailable
onSelected
:
this
.
_onTargetSelected
onDestroyed
:
this
.
_onTargetDestroyed
}
)
;
const
{
resourceCommand
}
=
this
.
toolbox
;
resourceCommand
.
unwatchResources
(
[
resourceCommand
.
TYPES
.
ROOT_NODE
resourceCommand
.
TYPES
.
CSS_CHANGE
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
]
{
onAvailable
:
this
.
onResourceAvailable
}
)
;
this
.
untrackReflowsInSelection
(
)
;
this
.
_InspectorTabPanel
=
null
;
this
.
_TabBar
=
null
;
this
.
_InspectorSplitBox
=
null
;
this
.
sidebarSplitBoxRef
=
null
;
this
.
splitBox
=
null
;
this
.
_is3PaneModeChromeEnabled
=
null
;
this
.
_is3PaneModeEnabled
=
null
;
this
.
_markupBox
=
null
;
this
.
_markupFrame
=
null
;
this
.
_toolbox
=
null
;
this
.
_commands
=
null
;
this
.
breadcrumbs
=
null
;
this
.
inspectorFront
=
null
;
this
.
_cssProperties
=
null
;
this
.
accessibilityFront
=
null
;
this
.
_highlighters
=
null
;
this
.
walker
=
null
;
this
.
_defaultNode
=
null
;
this
.
panelDoc
=
null
;
this
.
panelWin
.
inspector
=
null
;
this
.
panelWin
=
null
;
this
.
resultsLength
=
null
;
this
.
searchBox
.
removeEventListener
(
"
focus
"
this
.
listenForSearchEvents
)
;
this
.
searchBox
=
null
;
this
.
show3PaneTooltip
=
null
;
this
.
sidebar
=
null
;
this
.
store
=
null
;
this
.
telemetry
=
null
;
}
_destroyMarkup
:
function
(
)
{
if
(
this
.
markup
)
{
this
.
markup
.
destroy
(
)
;
this
.
markup
=
null
;
}
if
(
this
.
_markupBox
)
{
this
.
_markupBox
.
style
.
visibility
=
"
hidden
"
;
}
}
onEyeDropperButtonClicked
:
function
(
)
{
this
.
eyeDropperButton
.
classList
.
contains
(
"
checked
"
)
?
this
.
hideEyeDropper
(
)
:
this
.
showEyeDropper
(
)
;
}
startEyeDropperListeners
:
function
(
)
{
this
.
toolbox
.
tellRDMAboutPickerState
(
true
PICKER_TYPES
.
EYEDROPPER
)
;
this
.
inspectorFront
.
once
(
"
color
-
pick
-
canceled
"
this
.
onEyeDropperDone
)
;
this
.
inspectorFront
.
once
(
"
color
-
picked
"
this
.
onEyeDropperDone
)
;
this
.
once
(
"
new
-
root
"
this
.
onEyeDropperDone
)
;
}
stopEyeDropperListeners
:
function
(
)
{
this
.
toolbox
.
tellRDMAboutPickerState
(
false
PICKER_TYPES
.
EYEDROPPER
)
;
this
.
inspectorFront
.
off
(
"
color
-
pick
-
canceled
"
this
.
onEyeDropperDone
)
;
this
.
inspectorFront
.
off
(
"
color
-
picked
"
this
.
onEyeDropperDone
)
;
this
.
off
(
"
new
-
root
"
this
.
onEyeDropperDone
)
;
}
onEyeDropperDone
:
function
(
)
{
this
.
eyeDropperButton
.
classList
.
remove
(
"
checked
"
)
;
this
.
stopEyeDropperListeners
(
)
;
}
showEyeDropper
:
function
(
)
{
if
(
!
this
.
eyeDropperButton
)
{
return
null
;
}
this
.
toolbox
.
nodePicker
.
stop
(
{
canceled
:
true
}
)
.
catch
(
console
.
error
)
;
this
.
telemetry
.
scalarSet
(
TELEMETRY_EYEDROPPER_OPENED
1
)
;
this
.
eyeDropperButton
.
classList
.
add
(
"
checked
"
)
;
this
.
startEyeDropperListeners
(
)
;
return
this
.
inspectorFront
.
pickColorFromPage
(
{
copyOnSelect
:
true
}
)
.
catch
(
console
.
error
)
;
}
hideEyeDropper
:
function
(
)
{
if
(
!
this
.
eyeDropperButton
)
{
return
null
;
}
this
.
eyeDropperButton
.
classList
.
remove
(
"
checked
"
)
;
this
.
stopEyeDropperListeners
(
)
;
return
this
.
inspectorFront
.
cancelPickColorFromPage
(
)
.
catch
(
console
.
error
)
;
}
async
addNode
(
)
{
if
(
!
this
.
canAddHTMLChild
(
)
)
{
return
;
}
this
.
toolbox
.
nodePicker
.
stop
(
{
canceled
:
true
}
)
;
this
.
hideEyeDropper
(
)
;
const
nodeFront
=
this
.
selection
.
nodeFront
;
const
html
=
"
<
div
>
<
/
div
>
"
;
const
onMutations
=
this
.
once
(
"
markupmutation
"
)
;
await
nodeFront
.
walkerFront
.
insertAdjacentHTML
(
this
.
selection
.
nodeFront
"
beforeEnd
"
html
)
;
await
onMutations
;
this
.
markup
.
expandNode
(
nodeFront
)
;
}
togglePseudoClass
:
function
(
pseudo
)
{
if
(
this
.
selection
.
isElementNode
(
)
)
{
const
node
=
this
.
selection
.
nodeFront
;
if
(
node
.
hasPseudoClassLock
(
pseudo
)
)
{
return
node
.
walkerFront
.
removePseudoClassLock
(
node
pseudo
{
parents
:
true
}
)
;
}
const
hierarchical
=
pseudo
=
=
"
:
hover
"
|
|
pseudo
=
=
"
:
active
"
;
return
node
.
walkerFront
.
addPseudoClassLock
(
node
pseudo
{
parents
:
hierarchical
}
)
;
}
return
Promise
.
resolve
(
)
;
}
async
screenshotNode
(
)
{
await
this
.
highlighters
.
hideHighlighterType
(
this
.
highlighters
.
TYPES
.
BOXMODEL
)
;
const
clipboardEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
screenshot
.
clipboard
.
enabled
"
)
;
const
args
=
{
file
:
!
clipboardEnabled
nodeActorID
:
this
.
selection
.
nodeFront
.
actorID
clipboard
:
clipboardEnabled
}
;
const
messages
=
await
captureAndSaveScreenshot
(
this
.
selection
.
nodeFront
.
targetFront
this
.
panelWin
args
)
;
const
notificationBox
=
this
.
toolbox
.
getNotificationBox
(
)
;
const
priorityMap
=
{
error
:
notificationBox
.
PRIORITY_CRITICAL_HIGH
warn
:
notificationBox
.
PRIORITY_WARNING_HIGH
}
;
for
(
const
{
text
level
}
of
messages
)
{
if
(
level
!
=
=
"
warn
"
&
&
level
!
=
=
"
error
"
)
{
continue
;
}
notificationBox
.
appendNotification
(
text
null
null
priorityMap
[
level
]
)
;
}
}
getCommonComponentProps
(
)
{
return
{
setSelectedNode
:
this
.
selection
.
setNodeFront
}
;
}
onPickerCanceled
(
)
{
this
.
highlighters
.
hideHighlighterType
(
this
.
highlighters
.
TYPES
.
BOXMODEL
)
;
}
onPickerHovered
(
nodeFront
)
{
this
.
highlighters
.
showHighlighterTypeForNode
(
this
.
highlighters
.
TYPES
.
BOXMODEL
nodeFront
)
;
}
onPickerPicked
(
nodeFront
)
{
if
(
this
.
toolbox
.
isDebugTargetFenix
(
)
)
{
this
.
highlighters
.
showHighlighterTypeForNode
(
this
.
highlighters
.
TYPES
.
BOXMODEL
nodeFront
{
duration
:
this
.
HIGHLIGHTER_AUTOHIDE_TIMER
}
)
;
return
;
}
this
.
highlighters
.
hideHighlighterType
(
this
.
highlighters
.
TYPES
.
BOXMODEL
)
;
}
async
inspectNodeActor
(
nodeGrip
reason
)
{
const
nodeFront
=
await
this
.
inspectorFront
.
getNodeFrontFromNodeGrip
(
nodeGrip
)
;
if
(
!
nodeFront
)
{
console
.
error
(
"
The
object
cannot
be
linked
to
the
inspector
the
"
+
"
corresponding
nodeFront
could
not
be
found
.
"
)
;
return
false
;
}
const
isAttached
=
await
this
.
walker
.
isInDOMTree
(
nodeFront
)
;
if
(
!
isAttached
)
{
console
.
error
(
"
Selected
DOMNode
is
not
attached
to
the
document
tree
.
"
)
;
return
false
;
}
await
this
.
selection
.
setNodeFront
(
nodeFront
{
reason
}
)
;
return
true
;
}
}
;
exports
.
Inspector
=
Inspector
;
