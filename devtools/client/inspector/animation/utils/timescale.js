"
use
strict
"
;
const
{
getFormatStr
}
=
require
(
"
.
/
l10n
"
)
;
const
TIME_FORMAT_MAX_DURATION_IN_MS
=
4000
;
class
TimeScale
{
constructor
(
animations
)
{
let
resultCurrentTime
=
-
Number
.
MAX_VALUE
;
let
resultMinStartTime
=
Infinity
;
let
resultMaxEndTime
=
0
;
let
resultZeroPositionTime
=
0
;
for
(
const
animation
of
animations
)
{
const
{
currentTime
currentTimeAtCreated
delay
endTime
startTimeAtCreated
}
=
animation
.
state
.
absoluteValues
;
let
{
startTime
}
=
animation
.
state
.
absoluteValues
;
const
negativeDelay
=
Math
.
min
(
delay
0
)
;
let
zeroPositionTime
=
0
;
if
(
currentTimeAtCreated
<
negativeDelay
)
{
startTime
=
startTimeAtCreated
;
zeroPositionTime
=
Math
.
abs
(
currentTimeAtCreated
)
;
}
else
if
(
negativeDelay
<
0
)
{
zeroPositionTime
=
Math
.
abs
(
negativeDelay
)
;
}
if
(
startTime
<
resultMinStartTime
)
{
resultMinStartTime
=
startTime
;
resultZeroPositionTime
=
zeroPositionTime
;
}
else
{
resultZeroPositionTime
=
Math
.
max
(
resultZeroPositionTime
zeroPositionTime
)
;
}
resultMaxEndTime
=
Math
.
max
(
resultMaxEndTime
endTime
)
;
resultCurrentTime
=
Math
.
max
(
resultCurrentTime
currentTime
)
;
}
this
.
minStartTime
=
resultMinStartTime
;
this
.
maxEndTime
=
resultMaxEndTime
;
this
.
currentTime
=
resultCurrentTime
;
this
.
zeroPositionTime
=
resultZeroPositionTime
;
}
distanceToRelativeTime
(
distance
)
{
return
(
this
.
getDuration
(
)
*
distance
)
/
100
-
this
.
zeroPositionTime
;
}
formatTime
(
time
)
{
if
(
Math
.
abs
(
time
)
<
1
/
1000
)
{
time
=
0
.
0
;
}
if
(
this
.
getDuration
(
)
<
=
TIME_FORMAT_MAX_DURATION_IN_MS
)
{
return
getFormatStr
(
"
timeline
.
timeGraduationLabel
"
time
.
toFixed
(
0
)
)
;
}
return
getFormatStr
(
"
player
.
timeLabel
"
(
time
/
1000
)
.
toFixed
(
1
)
)
;
}
getDuration
(
)
{
return
this
.
maxEndTime
-
this
.
minStartTime
;
}
getCurrentTime
(
)
{
return
this
.
currentTime
-
this
.
minStartTime
;
}
getEndTime
(
{
state
}
)
{
return
state
.
iterationCount
?
state
.
delay
+
state
.
duration
*
state
.
iterationCount
+
state
.
endDelay
:
Infinity
;
}
}
module
.
exports
=
TimeScale
;
