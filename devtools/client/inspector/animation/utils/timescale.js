"
use
strict
"
;
const
{
getFormatStr
}
=
require
(
"
.
/
l10n
"
)
;
const
TIME_FORMAT_MAX_DURATION_IN_MS
=
4000
;
class
TimeScale
{
constructor
(
animations
)
{
if
(
!
animations
.
every
(
animation
=
>
animation
.
state
.
createdTime
)
)
{
return
this
.
_initializeWithoutCreatedTime
(
animations
)
;
}
this
.
minStartTime
=
Infinity
;
this
.
maxEndTime
=
0
;
this
.
documentCurrentTime
=
0
;
for
(
const
animation
of
animations
)
{
const
{
createdTime
delay
documentCurrentTime
duration
endDelay
=
0
iterationCount
playbackRate
}
=
animation
.
state
;
const
toRate
=
v
=
>
v
/
playbackRate
;
const
startTime
=
createdTime
+
toRate
(
Math
.
min
(
delay
0
)
)
;
const
endTime
=
createdTime
+
toRate
(
delay
+
duration
*
(
iterationCount
|
|
1
)
+
Math
.
max
(
endDelay
0
)
)
;
this
.
minStartTime
=
Math
.
min
(
this
.
minStartTime
startTime
)
;
this
.
maxEndTime
=
Math
.
max
(
this
.
maxEndTime
endTime
)
;
this
.
documentCurrentTime
=
Math
.
max
(
this
.
documentCurrentTime
documentCurrentTime
)
;
}
}
_initializeWithoutCreatedTime
(
animations
)
{
this
.
minStartTime
=
Infinity
;
this
.
maxEndTime
=
0
;
this
.
documentCurrentTime
=
0
;
for
(
const
animation
of
animations
)
{
const
{
delay
documentCurrentTime
duration
endDelay
=
0
iterationCount
playbackRate
previousStartTime
=
0
}
=
animation
.
state
;
const
toRate
=
v
=
>
v
/
playbackRate
;
const
minZero
=
v
=
>
Math
.
max
(
v
0
)
;
const
rateRelativeDuration
=
toRate
(
duration
*
(
!
iterationCount
?
1
:
iterationCount
)
)
;
const
relevantDelay
=
delay
<
0
?
toRate
(
delay
)
:
0
;
const
startTime
=
toRate
(
minZero
(
delay
)
)
+
rateRelativeDuration
+
endDelay
;
this
.
minStartTime
=
Math
.
min
(
this
.
minStartTime
previousStartTime
+
relevantDelay
+
Math
.
min
(
startTime
0
)
)
;
const
length
=
toRate
(
delay
)
+
rateRelativeDuration
+
toRate
(
minZero
(
endDelay
)
)
;
const
endTime
=
previousStartTime
+
length
;
this
.
maxEndTime
=
Math
.
max
(
this
.
maxEndTime
endTime
)
;
this
.
documentCurrentTime
=
Math
.
max
(
this
.
documentCurrentTime
documentCurrentTime
)
;
}
}
distanceToTime
(
distance
)
{
return
this
.
minStartTime
+
(
this
.
getDuration
(
)
*
distance
/
100
)
;
}
distanceToRelativeTime
(
distance
)
{
const
time
=
this
.
distanceToTime
(
distance
)
;
return
time
-
this
.
minStartTime
;
}
formatTime
(
time
)
{
if
(
this
.
getDuration
(
)
<
=
TIME_FORMAT_MAX_DURATION_IN_MS
)
{
return
getFormatStr
(
"
timeline
.
timeGraduationLabel
"
time
.
toFixed
(
0
)
)
;
}
return
getFormatStr
(
"
player
.
timeLabel
"
(
time
/
1000
)
.
toFixed
(
1
)
)
;
}
getDuration
(
)
{
return
this
.
maxEndTime
-
this
.
minStartTime
;
}
}
module
.
exports
=
TimeScale
;
