"
use
strict
"
;
const
{
AnimationsFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
animation
"
)
;
const
{
createElement
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
Provider
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
App
=
createFactory
(
require
(
"
.
/
components
/
App
"
)
)
;
const
CurrentTimeTimer
=
require
(
"
.
/
current
-
time
-
timer
"
)
;
const
{
updateAnimations
updateDetailVisibility
updateElementPickerEnabled
updateHighlightedNode
updateSelectedAnimation
updateSidebarSize
}
=
require
(
"
.
/
actions
/
animations
"
)
;
const
{
hasAnimationIterationCountInfinite
hasRunningAnimation
}
=
require
(
"
.
/
utils
/
utils
"
)
;
class
AnimationInspector
{
constructor
(
inspector
win
)
{
this
.
inspector
=
inspector
;
this
.
win
=
win
;
this
.
addAnimationsCurrentTimeListener
=
this
.
addAnimationsCurrentTimeListener
.
bind
(
this
)
;
this
.
getAnimatedPropertyMap
=
this
.
getAnimatedPropertyMap
.
bind
(
this
)
;
this
.
getAnimationsCurrentTime
=
this
.
getAnimationsCurrentTime
.
bind
(
this
)
;
this
.
getComputedStyle
=
this
.
getComputedStyle
.
bind
(
this
)
;
this
.
getNodeFromActor
=
this
.
getNodeFromActor
.
bind
(
this
)
;
this
.
removeAnimationsCurrentTimeListener
=
this
.
removeAnimationsCurrentTimeListener
.
bind
(
this
)
;
this
.
rewindAnimationsCurrentTime
=
this
.
rewindAnimationsCurrentTime
.
bind
(
this
)
;
this
.
selectAnimation
=
this
.
selectAnimation
.
bind
(
this
)
;
this
.
setAnimationsCurrentTime
=
this
.
setAnimationsCurrentTime
.
bind
(
this
)
;
this
.
setAnimationsPlaybackRate
=
this
.
setAnimationsPlaybackRate
.
bind
(
this
)
;
this
.
setAnimationsPlayState
=
this
.
setAnimationsPlayState
.
bind
(
this
)
;
this
.
setDetailVisibility
=
this
.
setDetailVisibility
.
bind
(
this
)
;
this
.
setHighlightedNode
=
this
.
setHighlightedNode
.
bind
(
this
)
;
this
.
setSelectedNode
=
this
.
setSelectedNode
.
bind
(
this
)
;
this
.
simulateAnimation
=
this
.
simulateAnimation
.
bind
(
this
)
;
this
.
simulateAnimationForKeyframesProgressBar
=
this
.
simulateAnimationForKeyframesProgressBar
.
bind
(
this
)
;
this
.
toggleElementPicker
=
this
.
toggleElementPicker
.
bind
(
this
)
;
this
.
update
=
this
.
update
.
bind
(
this
)
;
this
.
onAnimationStateChanged
=
this
.
onAnimationStateChanged
.
bind
(
this
)
;
this
.
onAnimationsCurrentTimeUpdated
=
this
.
onAnimationsCurrentTimeUpdated
.
bind
(
this
)
;
this
.
onAnimationsMutation
=
this
.
onAnimationsMutation
.
bind
(
this
)
;
this
.
onCurrentTimeTimerUpdated
=
this
.
onCurrentTimeTimerUpdated
.
bind
(
this
)
;
this
.
onElementPickerStarted
=
this
.
onElementPickerStarted
.
bind
(
this
)
;
this
.
onElementPickerStopped
=
this
.
onElementPickerStopped
.
bind
(
this
)
;
this
.
onSidebarResized
=
this
.
onSidebarResized
.
bind
(
this
)
;
this
.
onSidebarSelectionChanged
=
this
.
onSidebarSelectionChanged
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
this
.
emit
=
this
.
emit
.
bind
(
this
)
;
this
.
init
(
)
;
}
init
(
)
{
const
{
onShowBoxModelHighlighterForNode
}
=
this
.
inspector
.
getCommonComponentProps
(
)
;
const
{
onHideBoxModelHighlighter
}
=
this
.
inspector
.
getPanel
(
"
boxmodel
"
)
.
getComponentProps
(
)
;
const
{
addAnimationsCurrentTimeListener
emit
:
emitEventForTest
getAnimatedPropertyMap
getAnimationsCurrentTime
getComputedStyle
getNodeFromActor
isAnimationsRunning
removeAnimationsCurrentTimeListener
rewindAnimationsCurrentTime
selectAnimation
setAnimationsCurrentTime
setAnimationsPlaybackRate
setAnimationsPlayState
setDetailVisibility
setHighlightedNode
setSelectedNode
simulateAnimation
simulateAnimationForKeyframesProgressBar
toggleElementPicker
}
=
this
;
const
target
=
this
.
inspector
.
target
;
this
.
animationsFront
=
new
AnimationsFront
(
target
.
client
target
.
form
)
;
this
.
animationsFront
.
setWalkerActor
(
this
.
inspector
.
walker
)
;
this
.
animationsCurrentTimeListeners
=
[
]
;
this
.
isCurrentTimeSet
=
false
;
const
provider
=
createElement
(
Provider
{
id
:
"
newanimationinspector
"
key
:
"
newanimationinspector
"
store
:
this
.
inspector
.
store
}
App
(
{
addAnimationsCurrentTimeListener
emitEventForTest
getAnimatedPropertyMap
getAnimationsCurrentTime
getComputedStyle
getNodeFromActor
isAnimationsRunning
onHideBoxModelHighlighter
onShowBoxModelHighlighterForNode
removeAnimationsCurrentTimeListener
rewindAnimationsCurrentTime
selectAnimation
setAnimationsCurrentTime
setAnimationsPlaybackRate
setAnimationsPlayState
setDetailVisibility
setHighlightedNode
setSelectedNode
simulateAnimation
simulateAnimationForKeyframesProgressBar
toggleElementPicker
}
)
)
;
this
.
provider
=
provider
;
this
.
inspector
.
sidebar
.
on
(
"
select
"
this
.
onSidebarSelectionChanged
)
;
this
.
inspector
.
toolbox
.
on
(
"
picker
-
started
"
this
.
onElementPickerStarted
)
;
this
.
inspector
.
toolbox
.
on
(
"
picker
-
stopped
"
this
.
onElementPickerStopped
)
;
this
.
inspector
.
toolbox
.
on
(
"
select
"
this
.
onSidebarSelectionChanged
)
;
}
destroy
(
)
{
this
.
setAnimationStateChangedListenerEnabled
(
false
)
;
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
update
)
;
this
.
inspector
.
sidebar
.
off
(
"
select
"
this
.
onSidebarSelectionChanged
)
;
this
.
inspector
.
toolbox
.
off
(
"
inspector
-
sidebar
-
resized
"
this
.
onSidebarResized
)
;
this
.
inspector
.
toolbox
.
off
(
"
picker
-
started
"
this
.
onElementPickerStarted
)
;
this
.
inspector
.
toolbox
.
off
(
"
picker
-
stopped
"
this
.
onElementPickerStopped
)
;
this
.
inspector
.
toolbox
.
off
(
"
select
"
this
.
onSidebarSelectionChanged
)
;
this
.
animationsFront
.
off
(
"
mutations
"
this
.
onAnimationsMutation
)
;
if
(
this
.
simulatedAnimation
)
{
this
.
simulatedAnimation
.
cancel
(
)
;
this
.
simulatedAnimation
=
null
;
}
if
(
this
.
simulatedElement
)
{
this
.
simulatedElement
.
remove
(
)
;
this
.
simulatedElement
=
null
;
}
if
(
this
.
simulatedAnimationForKeyframesProgressBar
)
{
this
.
simulatedAnimationForKeyframesProgressBar
.
cancel
(
)
;
this
.
simulatedAnimationForKeyframesProgressBar
=
null
;
}
this
.
stopAnimationsCurrentTimeTimer
(
)
;
this
.
inspector
=
null
;
this
.
win
=
null
;
}
get
state
(
)
{
return
this
.
inspector
.
store
.
getState
(
)
.
animations
;
}
addAnimationsCurrentTimeListener
(
listener
)
{
this
.
animationsCurrentTimeListeners
.
push
(
listener
)
;
}
async
getAnimatedPropertyMap
(
animation
)
{
const
properties
=
await
animation
.
getProperties
(
)
;
const
animatedPropertyMap
=
new
Map
(
)
;
for
(
const
{
name
values
}
of
properties
)
{
const
keyframes
=
values
.
map
(
(
{
value
offset
easing
distance
=
0
}
)
=
>
{
offset
=
parseFloat
(
offset
.
toFixed
(
3
)
)
;
return
{
value
offset
easing
distance
}
;
}
)
;
animatedPropertyMap
.
set
(
name
keyframes
)
;
}
return
animatedPropertyMap
;
}
getAnimationsCurrentTime
(
)
{
return
this
.
currentTime
;
}
getComputedStyle
(
property
styles
)
{
this
.
simulatedElement
.
style
.
cssText
=
"
"
;
for
(
let
propertyName
in
styles
)
{
this
.
simulatedElement
.
style
.
setProperty
(
propertyName
styles
[
propertyName
]
)
;
}
return
this
.
win
.
getComputedStyle
(
this
.
simulatedElement
)
.
getPropertyValue
(
property
)
;
}
getNodeFromActor
(
actorID
)
{
return
this
.
inspector
.
walker
.
getNodeFromActor
(
actorID
[
"
node
"
]
)
;
}
isPanelVisible
(
)
{
return
this
.
inspector
&
&
this
.
inspector
.
toolbox
&
&
this
.
inspector
.
sidebar
&
&
this
.
inspector
.
toolbox
.
currentToolId
=
=
=
"
inspector
"
&
&
this
.
inspector
.
sidebar
.
getCurrentTabID
(
)
=
=
=
"
newanimationinspector
"
;
}
onAnimationStateChanged
(
)
{
this
.
updateState
(
[
.
.
.
this
.
state
.
animations
]
)
;
}
onAnimationsCurrentTimeUpdated
(
currentTime
)
{
this
.
currentTime
=
currentTime
;
for
(
const
listener
of
this
.
animationsCurrentTimeListeners
)
{
listener
(
currentTime
)
;
}
}
onCurrentTimeTimerUpdated
(
currentTime
shouldStop
)
{
if
(
shouldStop
)
{
this
.
setAnimationsCurrentTime
(
currentTime
true
)
;
}
else
{
this
.
onAnimationsCurrentTimeUpdated
(
currentTime
)
;
}
}
async
onAnimationsMutation
(
changes
)
{
const
animations
=
[
.
.
.
this
.
state
.
animations
]
;
await
this
.
updateAnimations
(
animations
)
;
for
(
const
{
type
player
:
animation
}
of
changes
)
{
if
(
type
=
=
=
"
added
"
)
{
animations
.
push
(
animation
)
;
animation
.
on
(
"
changed
"
this
.
onAnimationStateChanged
)
;
}
else
if
(
type
=
=
=
"
removed
"
)
{
const
index
=
animations
.
indexOf
(
animation
)
;
animations
.
splice
(
index
1
)
;
animation
.
off
(
"
changed
"
this
.
onAnimationStateChanged
)
;
}
}
this
.
updateState
(
animations
)
;
}
onElementPickerStarted
(
)
{
this
.
inspector
.
store
.
dispatch
(
updateElementPickerEnabled
(
true
)
)
;
}
onElementPickerStopped
(
)
{
this
.
inspector
.
store
.
dispatch
(
updateElementPickerEnabled
(
false
)
)
;
}
async
onSidebarSelectionChanged
(
)
{
const
isPanelVisibled
=
this
.
isPanelVisible
(
)
;
if
(
this
.
wasPanelVisibled
=
=
=
isPanelVisibled
)
{
return
;
}
this
.
wasPanelVisibled
=
isPanelVisibled
;
if
(
this
.
isPanelVisible
(
)
)
{
await
this
.
update
(
)
;
this
.
onSidebarResized
(
null
this
.
inspector
.
getSidebarSize
(
)
)
;
this
.
animationsFront
.
on
(
"
mutations
"
this
.
onAnimationsMutation
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
update
)
;
this
.
inspector
.
toolbox
.
on
(
"
inspector
-
sidebar
-
resized
"
this
.
onSidebarResized
)
;
}
else
{
this
.
stopAnimationsCurrentTimeTimer
(
)
;
this
.
animationsFront
.
off
(
"
mutations
"
this
.
onAnimationsMutation
)
;
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
update
)
;
this
.
inspector
.
toolbox
.
off
(
"
inspector
-
sidebar
-
resized
"
this
.
onSidebarResized
)
;
this
.
setAnimationStateChangedListenerEnabled
(
false
)
;
}
}
onSidebarResized
(
size
)
{
this
.
inspector
.
store
.
dispatch
(
updateSidebarSize
(
size
)
)
;
}
removeAnimationsCurrentTimeListener
(
listener
)
{
this
.
animationsCurrentTimeListeners
=
this
.
animationsCurrentTimeListeners
.
filter
(
l
=
>
l
!
=
=
listener
)
;
}
async
rewindAnimationsCurrentTime
(
)
{
await
this
.
setAnimationsCurrentTime
(
0
true
)
;
}
selectAnimation
(
animation
)
{
this
.
inspector
.
store
.
dispatch
(
updateSelectedAnimation
(
animation
)
)
;
}
async
setSelectedNode
(
nodeFront
)
{
if
(
this
.
inspector
.
selection
.
nodeFront
=
=
=
nodeFront
)
{
return
;
}
await
this
.
inspector
.
getCommonComponentProps
(
)
.
setSelectedNode
(
nodeFront
{
reason
:
"
animation
-
panel
"
}
)
;
await
nodeFront
.
scrollIntoView
(
)
;
}
async
setAnimationsCurrentTime
(
currentTime
shouldRefresh
)
{
this
.
stopAnimationsCurrentTimeTimer
(
)
;
this
.
onAnimationsCurrentTimeUpdated
(
currentTime
)
;
if
(
!
shouldRefresh
&
&
this
.
isCurrentTimeSet
)
{
return
;
}
const
{
animations
timeScale
}
=
this
.
state
;
this
.
isCurrentTimeSet
=
true
;
currentTime
=
typeof
timeScale
.
currentTime
=
=
=
"
undefined
"
?
currentTime
:
currentTime
+
timeScale
.
minStartTime
;
try
{
await
this
.
animationsFront
.
setCurrentTimes
(
animations
currentTime
true
{
relativeToCreatedTime
:
true
}
)
;
await
this
.
updateAnimations
(
animations
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
return
;
}
this
.
isCurrentTimeSet
=
false
;
if
(
shouldRefresh
)
{
this
.
updateState
(
[
.
.
.
animations
]
)
;
}
}
async
setAnimationsPlaybackRate
(
playbackRate
)
{
const
animations
=
this
.
state
.
animations
;
this
.
setAnimationStateChangedListenerEnabled
(
false
)
;
try
{
await
this
.
animationsFront
.
setPlaybackRates
(
animations
playbackRate
)
;
await
this
.
updateAnimations
(
animations
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
return
;
}
finally
{
this
.
setAnimationStateChangedListenerEnabled
(
true
)
;
}
await
this
.
updateState
(
[
.
.
.
animations
]
)
;
}
async
setAnimationsPlayState
(
doPlay
)
{
try
{
if
(
doPlay
)
{
await
this
.
animationsFront
.
playAll
(
)
;
}
else
{
await
this
.
animationsFront
.
pauseAll
(
)
;
}
await
this
.
updateAnimations
(
this
.
state
.
animations
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
return
;
}
await
this
.
updateState
(
[
.
.
.
this
.
state
.
animations
]
)
;
}
setAnimationStateChangedListenerEnabled
(
isEnabled
)
{
if
(
isEnabled
)
{
for
(
const
animation
of
this
.
state
.
animations
)
{
animation
.
on
(
"
changed
"
this
.
onAnimationStateChanged
)
;
}
}
else
{
for
(
const
animation
of
this
.
state
.
animations
)
{
animation
.
off
(
"
changed
"
this
.
onAnimationStateChanged
)
;
}
}
}
setDetailVisibility
(
isVisible
)
{
this
.
inspector
.
store
.
dispatch
(
updateDetailVisibility
(
isVisible
)
)
;
}
async
setHighlightedNode
(
nodeFront
)
{
await
this
.
inspector
.
highlighters
.
hideBoxModelHighlighter
(
)
;
if
(
nodeFront
)
{
await
this
.
inspector
.
highlighters
.
showBoxModelHighlighter
(
nodeFront
)
;
}
this
.
inspector
.
store
.
dispatch
(
updateHighlightedNode
(
nodeFront
)
)
;
}
simulateAnimation
(
keyframes
effectTiming
isElementNeeded
)
{
let
targetEl
=
null
;
if
(
isElementNeeded
)
{
if
(
!
this
.
simulatedElement
)
{
this
.
simulatedElement
=
this
.
win
.
document
.
createElement
(
"
div
"
)
;
this
.
win
.
document
.
documentElement
.
appendChild
(
this
.
simulatedElement
)
;
}
else
{
this
.
simulatedElement
.
style
.
cssText
=
"
"
;
}
targetEl
=
this
.
simulatedElement
;
}
if
(
!
this
.
simulatedAnimation
)
{
this
.
simulatedAnimation
=
new
this
.
win
.
Animation
(
)
;
}
this
.
simulatedAnimation
.
effect
=
new
this
.
win
.
KeyframeEffect
(
targetEl
keyframes
effectTiming
)
;
return
this
.
simulatedAnimation
;
}
simulateAnimationForKeyframesProgressBar
(
effectTiming
)
{
if
(
!
this
.
simulatedAnimationForKeyframesProgressBar
)
{
this
.
simulatedAnimationForKeyframesProgressBar
=
new
this
.
win
.
Animation
(
)
;
}
this
.
simulatedAnimationForKeyframesProgressBar
.
effect
=
new
this
.
win
.
KeyframeEffect
(
null
null
effectTiming
)
;
return
this
.
simulatedAnimationForKeyframesProgressBar
;
}
stopAnimationsCurrentTimeTimer
(
)
{
if
(
this
.
currentTimeTimer
)
{
this
.
currentTimeTimer
.
destroy
(
)
;
this
.
currentTimeTimer
=
null
;
}
}
startAnimationsCurrentTimeTimer
(
)
{
const
timeScale
=
this
.
state
.
timeScale
;
const
shouldStopAfterEndTime
=
!
hasAnimationIterationCountInfinite
(
this
.
state
.
animations
)
;
const
currentTimeTimer
=
new
CurrentTimeTimer
(
timeScale
shouldStopAfterEndTime
this
.
win
this
.
onCurrentTimeTimerUpdated
)
;
currentTimeTimer
.
start
(
)
;
this
.
currentTimeTimer
=
currentTimeTimer
;
}
toggleElementPicker
(
)
{
this
.
inspector
.
toolbox
.
highlighterUtils
.
togglePicker
(
)
;
}
async
update
(
)
{
const
done
=
this
.
inspector
.
updating
(
"
newanimationinspector
"
)
;
const
selection
=
this
.
inspector
.
selection
;
const
animations
=
selection
.
isConnected
(
)
&
&
selection
.
isElementNode
(
)
?
await
this
.
animationsFront
.
getAnimationPlayersForNode
(
selection
.
nodeFront
)
:
[
]
;
this
.
updateState
(
animations
)
;
this
.
setAnimationStateChangedListenerEnabled
(
true
)
;
done
(
)
;
}
updateAnimations
(
animations
)
{
if
(
!
animations
.
length
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
count
=
0
;
let
error
=
null
;
for
(
const
animation
of
animations
)
{
animation
.
refreshState
(
)
.
catch
(
e
=
>
{
error
=
e
;
}
)
.
finally
(
(
)
=
>
{
count
+
=
1
;
if
(
count
=
=
=
animations
.
length
)
{
if
(
error
)
{
reject
(
error
)
;
}
else
{
resolve
(
)
;
}
}
}
)
;
}
}
)
;
}
updateState
(
animations
)
{
this
.
stopAnimationsCurrentTimeTimer
(
)
;
this
.
inspector
.
store
.
dispatch
(
updateAnimations
(
animations
)
)
;
if
(
hasRunningAnimation
(
animations
)
)
{
this
.
startAnimationsCurrentTimeTimer
(
)
;
}
}
}
module
.
exports
=
AnimationInspector
;
