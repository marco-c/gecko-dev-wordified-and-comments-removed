"
use
strict
"
;
const
{
createRef
PureComponent
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
mjs
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
mjs
"
)
;
class
CurrentTimeLabel
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
addAnimationsCurrentTimeListener
:
PropTypes
.
func
.
isRequired
removeAnimationsCurrentTimeListener
:
PropTypes
.
func
.
isRequired
timeScale
:
PropTypes
.
object
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
_ref
=
createRef
(
)
;
const
{
addAnimationsCurrentTimeListener
}
=
props
;
this
.
onCurrentTimeUpdated
=
this
.
onCurrentTimeUpdated
.
bind
(
this
)
;
addAnimationsCurrentTimeListener
(
this
.
onCurrentTimeUpdated
)
;
}
componentWillUnmount
(
)
{
const
{
removeAnimationsCurrentTimeListener
}
=
this
.
props
;
removeAnimationsCurrentTimeListener
(
this
.
onCurrentTimeUpdated
)
;
}
onCurrentTimeUpdated
(
currentTime
)
{
const
{
timeScale
}
=
this
.
props
;
const
text
=
formatStopwatchTime
(
currentTime
-
timeScale
.
zeroPositionTime
)
;
this
.
_ref
.
current
.
textContent
=
text
;
}
render
(
)
{
return
dom
.
label
(
{
className
:
"
current
-
time
-
label
"
ref
:
this
.
_ref
}
)
;
}
}
function
formatStopwatchTime
(
time
)
{
if
(
!
time
)
{
return
"
00
:
00
.
000
"
;
}
const
sign
=
time
<
0
?
"
-
"
:
"
"
;
let
milliseconds
=
parseInt
(
Math
.
abs
(
time
%
1000
)
10
)
;
let
seconds
=
parseInt
(
Math
.
abs
(
time
/
1000
)
%
60
10
)
;
let
minutes
=
parseInt
(
Math
.
abs
(
time
/
(
1000
*
60
)
)
10
)
;
minutes
=
minutes
.
toString
(
)
.
padStart
(
2
"
0
"
)
;
seconds
=
seconds
.
toString
(
)
.
padStart
(
2
"
0
"
)
;
milliseconds
=
milliseconds
.
toString
(
)
.
padStart
(
3
"
0
"
)
;
return
{
sign
}
{
minutes
}
:
{
seconds
}
.
{
milliseconds
}
;
}
module
.
exports
=
CurrentTimeLabel
;
