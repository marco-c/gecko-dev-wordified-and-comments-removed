"
use
strict
"
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
colorUtils
}
=
require
(
"
devtools
/
shared
/
css
/
color
.
js
"
)
;
const
ComputedStylePath
=
require
(
"
.
/
ComputedStylePath
"
)
;
let
LINEAR_GRADIENT_ID_COUNT
=
0
;
class
ColorPath
extends
ComputedStylePath
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
this
.
propToState
(
props
)
;
}
componentWillReceiveProps
(
nextProps
)
{
this
.
setState
(
this
.
propToState
(
nextProps
)
)
;
}
getPropertyName
(
)
{
return
"
color
"
;
}
getPropertyValue
(
keyframe
)
{
return
keyframe
.
value
;
}
propToState
(
{
values
}
)
{
const
maxObject
=
{
distance
:
0
}
;
for
(
let
i
=
0
;
i
<
values
.
length
-
1
;
i
+
+
)
{
const
value1
=
getRGBA
(
values
[
i
]
.
value
)
;
for
(
let
j
=
i
+
1
;
j
<
values
.
length
;
j
+
+
)
{
const
value2
=
getRGBA
(
values
[
j
]
.
value
)
;
const
distance
=
getRGBADistance
(
value1
value2
)
;
if
(
maxObject
.
distance
>
=
distance
)
{
continue
;
}
maxObject
.
distance
=
distance
;
maxObject
.
value1
=
value1
;
maxObject
.
value2
=
value2
;
}
}
const
maxDistance
=
maxObject
.
distance
;
const
baseValue
=
maxObject
.
value1
<
maxObject
.
value2
?
maxObject
.
value1
:
maxObject
.
value2
;
return
{
baseValue
maxDistance
}
;
}
toSegmentValue
(
computedStyle
)
{
const
{
baseValue
maxDistance
}
=
this
.
state
;
const
value
=
getRGBA
(
computedStyle
)
;
return
getRGBADistance
(
baseValue
value
)
/
maxDistance
;
}
renderPathSegments
(
segments
)
{
for
(
const
segment
of
segments
)
{
segment
.
y
=
1
;
}
const
lastSegment
=
segments
[
segments
.
length
-
1
]
;
const
id
=
color
-
property
-
{
LINEAR_GRADIENT_ID_COUNT
+
+
}
;
const
path
=
super
.
renderPathSegments
(
segments
{
fill
:
url
(
#
{
id
}
)
}
)
;
const
linearGradient
=
dom
.
linearGradient
(
{
id
}
segments
.
map
(
segment
=
>
{
return
dom
.
stop
(
{
"
stopColor
"
:
segment
.
computedStyle
"
offset
"
:
segment
.
x
/
lastSegment
.
x
}
)
;
}
)
)
;
return
[
path
linearGradient
]
;
}
render
(
)
{
return
dom
.
g
(
{
className
:
"
color
-
path
"
}
super
.
renderGraph
(
)
)
;
}
}
function
getRGBA
(
colorString
)
{
const
color
=
new
colorUtils
.
CssColor
(
colorString
)
;
return
color
.
getRGBATuple
(
)
;
}
function
getRGBADistance
(
rgba1
rgba2
)
{
const
startA
=
rgba1
.
a
;
const
startR
=
rgba1
.
r
*
startA
;
const
startG
=
rgba1
.
g
*
startA
;
const
startB
=
rgba1
.
b
*
startA
;
const
endA
=
rgba2
.
a
;
const
endR
=
rgba2
.
r
*
endA
;
const
endG
=
rgba2
.
g
*
endA
;
const
endB
=
rgba2
.
b
*
endA
;
const
diffA
=
startA
-
endA
;
const
diffR
=
startR
-
endR
;
const
diffG
=
startG
-
endG
;
const
diffB
=
startB
-
endB
;
return
Math
.
sqrt
(
diffA
*
diffA
+
diffR
*
diffR
+
diffG
*
diffG
+
diffB
*
diffB
)
;
}
module
.
exports
=
ColorPath
;
