"
use
strict
"
;
const
{
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
createPathSegments
DEFAULT_DURATION_RESOLUTION
getPreferredProgressThresholdByKeyframes
toPathString
}
=
require
(
"
.
.
/
.
.
/
utils
/
graph
-
helper
"
)
;
class
ComputedStylePath
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
componentWidth
:
PropTypes
.
number
.
isRequired
easingHintStrokeWidth
:
PropTypes
.
number
.
isRequired
graphHeight
:
PropTypes
.
number
.
isRequired
simulateAnimation
:
PropTypes
.
func
.
isRequired
totalDuration
:
PropTypes
.
number
.
isRequired
values
:
PropTypes
.
array
.
isRequired
}
;
}
getPathSegments
(
startValue
endValue
)
{
const
{
componentWidth
simulateAnimation
totalDuration
}
=
this
.
props
;
const
propertyName
=
this
.
getPropertyName
(
)
;
const
offsetDistance
=
endValue
.
offset
-
startValue
.
offset
;
const
duration
=
offsetDistance
*
totalDuration
;
const
keyframes
=
[
startValue
endValue
]
.
map
(
(
keyframe
index
)
=
>
{
return
{
offset
:
index
easing
:
keyframe
.
easing
[
getJsPropertyName
(
propertyName
)
]
:
this
.
getPropertyValue
(
keyframe
)
}
;
}
)
;
const
effect
=
{
duration
fill
:
"
forwards
"
}
;
const
simulatedAnimation
=
simulateAnimation
(
keyframes
effect
true
)
;
const
simulatedElement
=
simulatedAnimation
.
effect
.
target
;
const
win
=
simulatedElement
.
ownerGlobal
;
const
threshold
=
getPreferredProgressThresholdByKeyframes
(
keyframes
)
;
const
getSegment
=
time
=
>
{
simulatedAnimation
.
currentTime
=
time
;
const
computedStyle
=
win
.
getComputedStyle
(
simulatedElement
)
.
getPropertyValue
(
propertyName
)
;
return
{
computedStyle
x
:
time
y
:
this
.
toSegmentValue
(
computedStyle
)
}
;
}
;
const
segments
=
createPathSegments
(
0
duration
duration
/
componentWidth
threshold
DEFAULT_DURATION_RESOLUTION
getSegment
)
;
const
offset
=
startValue
.
offset
*
totalDuration
;
for
(
const
segment
of
segments
)
{
segment
.
x
+
=
offset
;
}
return
segments
;
}
renderEasingHint
(
segments
)
{
const
{
easingHintStrokeWidth
totalDuration
values
}
=
this
.
props
;
const
hints
=
[
]
;
for
(
let
i
=
0
indexOfSegments
=
0
;
i
<
values
.
length
-
1
;
i
+
+
)
{
const
startKeyframe
=
values
[
i
]
;
const
endKeyframe
=
values
[
i
+
1
]
;
const
endTime
=
endKeyframe
.
offset
*
totalDuration
;
const
hintSegments
=
[
]
;
for
(
;
indexOfSegments
<
segments
.
length
;
indexOfSegments
+
+
)
{
const
segment
=
segments
[
indexOfSegments
]
;
hintSegments
.
push
(
segment
)
;
if
(
startKeyframe
.
offset
=
=
=
endKeyframe
.
offset
)
{
hintSegments
.
push
(
segments
[
+
+
indexOfSegments
]
)
;
break
;
}
else
if
(
segment
.
x
=
=
=
endTime
)
{
break
;
}
}
const
g
=
dom
.
g
(
{
className
:
"
hint
"
}
dom
.
title
(
{
}
startKeyframe
.
easing
)
dom
.
path
(
{
d
:
M
{
hintSegments
[
0
]
.
x
}
{
hintSegments
[
0
]
.
y
}
+
toPathString
(
hintSegments
)
style
:
{
"
stroke
-
width
"
:
easingHintStrokeWidth
}
}
)
)
;
hints
.
push
(
g
)
;
}
return
hints
;
}
renderGraph
(
)
{
const
{
values
}
=
this
.
props
;
const
segments
=
[
]
;
for
(
let
i
=
0
;
i
<
values
.
length
-
1
;
i
+
+
)
{
const
startValue
=
values
[
i
]
;
const
endValue
=
values
[
i
+
1
]
;
segments
.
push
(
.
.
.
this
.
getPathSegments
(
startValue
endValue
)
)
;
}
return
[
this
.
renderPathSegments
(
segments
)
this
.
renderEasingHint
(
segments
)
]
;
}
renderPathSegments
(
segments
style
)
{
const
{
graphHeight
}
=
this
.
props
;
for
(
const
segment
of
segments
)
{
segment
.
y
*
=
graphHeight
;
}
let
d
=
M
{
segments
[
0
]
.
x
}
0
;
d
+
=
toPathString
(
segments
)
;
d
+
=
L
{
segments
[
segments
.
length
-
1
]
.
x
}
0
Z
;
return
dom
.
path
(
{
d
style
}
)
;
}
}
function
getJsPropertyName
(
cssPropertyName
)
{
if
(
cssPropertyName
=
=
"
float
"
)
{
return
"
cssFloat
"
;
}
return
cssPropertyName
.
replace
(
/
-
(
[
a
-
z
]
)
/
gi
(
str
group
)
=
>
{
return
group
.
toUpperCase
(
)
;
}
)
;
}
module
.
exports
=
ComputedStylePath
;
