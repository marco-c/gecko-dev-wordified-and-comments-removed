"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
mjs
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
mjs
"
)
;
const
dom
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
ReactDOM
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
.
mjs
"
)
;
const
ComputedTimingPath
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
animation
/
components
/
graph
/
ComputedTimingPath
.
js
"
)
)
;
const
EffectTimingPath
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
animation
/
components
/
graph
/
EffectTimingPath
.
js
"
)
)
;
const
NegativeDelayPath
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
animation
/
components
/
graph
/
NegativeDelayPath
.
js
"
)
)
;
const
NegativeEndDelayPath
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
animation
/
components
/
graph
/
NegativeEndDelayPath
.
js
"
)
)
;
const
{
DEFAULT_GRAPH_HEIGHT
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
animation
/
utils
/
graph
-
helper
.
js
"
)
;
const
MIN_KEYFRAMES_EASING_OPACITY
=
0
.
5
;
class
SummaryGraphPath
extends
Component
{
static
get
propTypes
(
)
{
return
{
animation
:
PropTypes
.
object
.
isRequired
getAnimatedPropertyMap
:
PropTypes
.
object
.
isRequired
simulateAnimation
:
PropTypes
.
func
.
isRequired
timeScale
:
PropTypes
.
object
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
durationPerPixel
:
0
isStateUpdating
:
false
keyframesList
:
[
]
}
;
}
componentDidMount
(
)
{
this
.
updateState
(
this
.
props
)
;
}
UNSAFE_componentWillReceiveProps
(
nextProps
)
{
this
.
setState
(
{
isStateUpdating
:
true
}
)
;
this
.
updateState
(
nextProps
)
;
}
shouldComponentUpdate
(
nextProps
nextState
)
{
return
!
nextState
.
isStateUpdating
;
}
getOffsetAndEasingOnlyKeyframes
(
animatedPropertyMap
)
{
return
[
.
.
.
animatedPropertyMap
.
values
(
)
]
.
filter
(
(
keyframes1
i
self
)
=
>
{
return
(
i
!
=
=
self
.
findIndex
(
(
keyframes2
j
)
=
>
{
return
this
.
isOffsetAndEasingKeyframesEqual
(
keyframes1
keyframes2
)
?
j
:
-
1
;
}
)
)
;
}
)
.
map
(
keyframes
=
>
{
return
keyframes
.
map
(
keyframe
=
>
{
return
{
easing
:
keyframe
.
easing
offset
:
keyframe
.
offset
}
;
}
)
;
}
)
;
}
isOffsetAndEasingKeyframesEqual
(
keyframes1
keyframes2
)
{
if
(
keyframes1
.
length
!
=
=
keyframes2
.
length
)
{
return
false
;
}
for
(
let
i
=
0
;
i
<
keyframes1
.
length
;
i
+
+
)
{
const
keyframe1
=
keyframes1
[
i
]
;
const
keyframe2
=
keyframes2
[
i
]
;
if
(
keyframe1
.
offset
!
=
=
keyframe2
.
offset
|
|
keyframe1
.
easing
!
=
=
keyframe2
.
easing
)
{
return
false
;
}
}
return
true
;
}
updateState
(
props
)
{
const
{
animation
getAnimatedPropertyMap
timeScale
}
=
props
;
let
animatedPropertyMap
=
null
;
let
thisEl
=
null
;
try
{
animatedPropertyMap
=
getAnimatedPropertyMap
(
animation
)
;
thisEl
=
ReactDOM
.
findDOMNode
(
this
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
return
;
}
const
keyframesList
=
this
.
getOffsetAndEasingOnlyKeyframes
(
animatedPropertyMap
)
;
const
totalDuration
=
timeScale
.
getDuration
(
)
*
Math
.
abs
(
animation
.
state
.
playbackRate
)
;
const
durationPerPixel
=
totalDuration
/
thisEl
.
parentNode
.
clientWidth
;
this
.
setState
(
{
durationPerPixel
isStateUpdating
:
false
keyframesList
}
)
;
}
render
(
)
{
const
{
durationPerPixel
keyframesList
}
=
this
.
state
;
const
{
animation
simulateAnimation
timeScale
}
=
this
.
props
;
if
(
!
durationPerPixel
|
|
!
animation
.
state
.
type
)
{
return
dom
.
svg
(
)
;
}
const
{
playbackRate
}
=
animation
.
state
;
const
{
createdTime
}
=
animation
.
state
.
absoluteValues
;
const
absPlaybackRate
=
Math
.
abs
(
playbackRate
)
;
const
offset
=
createdTime
*
absPlaybackRate
;
const
startTime
=
timeScale
.
minStartTime
*
absPlaybackRate
;
const
totalDuration
=
timeScale
.
getDuration
(
)
*
absPlaybackRate
;
const
opacity
=
Math
.
max
(
1
/
keyframesList
.
length
MIN_KEYFRAMES_EASING_OPACITY
)
;
return
dom
.
svg
(
{
className
:
"
animation
-
summary
-
graph
-
path
"
preserveAspectRatio
:
"
none
"
viewBox
:
{
startTime
}
-
{
DEFAULT_GRAPH_HEIGHT
}
+
{
totalDuration
}
{
DEFAULT_GRAPH_HEIGHT
}
}
keyframesList
.
map
(
keyframes
=
>
ComputedTimingPath
(
{
animation
durationPerPixel
keyframes
offset
opacity
simulateAnimation
totalDuration
}
)
)
animation
.
state
.
easing
!
=
=
"
linear
"
?
EffectTimingPath
(
{
animation
durationPerPixel
offset
simulateAnimation
totalDuration
}
)
:
null
animation
.
state
.
delay
<
0
?
keyframesList
.
map
(
keyframes
=
>
{
return
NegativeDelayPath
(
{
animation
durationPerPixel
keyframes
offset
simulateAnimation
totalDuration
}
)
;
}
)
:
null
animation
.
state
.
iterationCount
&
&
animation
.
state
.
endDelay
<
0
?
keyframesList
.
map
(
keyframes
=
>
{
return
NegativeEndDelayPath
(
{
animation
durationPerPixel
keyframes
offset
simulateAnimation
totalDuration
}
)
;
}
)
:
null
)
;
}
}
module
.
exports
=
SummaryGraphPath
;
