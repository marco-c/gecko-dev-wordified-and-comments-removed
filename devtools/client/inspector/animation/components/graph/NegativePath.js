"
use
strict
"
;
const
{
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
createSummaryGraphPathStringFunction
SummaryGraphHelper
}
=
require
(
"
.
.
/
.
.
/
utils
/
graph
-
helper
"
)
;
class
NegativePath
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
animation
:
PropTypes
.
object
.
isRequired
className
:
PropTypes
.
string
.
isRequired
durationPerPixel
:
PropTypes
.
number
.
isRequired
keyframes
:
PropTypes
.
object
.
isRequired
offset
:
PropTypes
.
number
.
isRequired
simulateAnimation
:
PropTypes
.
func
.
isRequired
totalDuration
:
PropTypes
.
number
.
isRequired
}
;
}
render
(
)
{
const
{
animation
durationPerPixel
keyframes
offset
simulateAnimation
totalDuration
}
=
this
.
props
;
const
{
state
}
=
animation
;
const
effectTiming
=
Object
.
assign
(
{
}
state
{
fill
:
"
both
"
iterations
:
state
.
iterationCount
?
state
.
iterationCount
:
Infinity
}
)
;
const
frames
=
keyframes
.
map
(
keyframe
=
>
{
return
{
opacity
:
keyframe
.
offset
offset
:
keyframe
.
offset
easing
:
keyframe
.
easing
}
;
}
)
;
const
simulatedAnimation
=
simulateAnimation
(
frames
effectTiming
true
)
;
if
(
!
simulatedAnimation
)
{
return
null
;
}
const
simulatedElement
=
simulatedAnimation
.
effect
.
target
;
const
win
=
simulatedElement
.
ownerGlobal
;
const
endTime
=
simulatedAnimation
.
effect
.
getComputedTiming
(
)
.
endTime
;
simulatedElement
.
style
.
opacity
=
0
;
const
getValueFunc
=
time
=
>
{
simulatedAnimation
.
currentTime
=
time
;
return
win
.
getComputedStyle
(
simulatedElement
)
.
opacity
;
}
;
const
toPathStringFunc
=
createSummaryGraphPathStringFunction
(
endTime
state
.
playbackRate
)
;
const
helper
=
new
SummaryGraphHelper
(
state
keyframes
totalDuration
durationPerPixel
getValueFunc
toPathStringFunc
)
;
return
dom
.
g
(
{
className
:
this
.
getClassName
(
)
transform
:
translate
(
{
offset
}
)
}
this
.
renderGraph
(
state
helper
)
)
;
}
}
module
.
exports
=
NegativePath
;
