"
use
strict
"
;
var
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
const
loaders
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
commonjs
/
toolkit
/
loader
.
js
"
{
}
)
;
const
{
devtools
DevToolsLoader
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
joinURI
}
=
devtools
.
require
(
"
devtools
/
shared
/
path
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
BROWSER_BASED_DIRS
=
[
"
resource
:
/
/
devtools
/
client
/
jsonview
"
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
"
"
resource
:
/
/
devtools
/
client
/
shared
/
components
"
"
resource
:
/
/
devtools
/
client
/
shared
/
redux
"
]
;
function
BrowserLoader
(
baseURI
window
)
{
const
loaderOptions
=
devtools
.
require
(
"
loader
/
options
"
)
;
const
dynamicPaths
=
{
}
;
if
(
AppConstants
.
DEBUG
|
|
AppConstants
.
DEBUG_JS_MODULES
)
{
dynamicPaths
[
"
devtools
/
client
/
shared
/
vendor
/
react
"
]
=
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dev
"
;
}
;
const
opts
=
{
id
:
"
browser
-
loader
"
sharedGlobal
:
true
sandboxPrototype
:
window
paths
:
Object
.
assign
(
{
}
dynamicPaths
loaderOptions
.
paths
)
invisibleToDebugger
:
loaderOptions
.
invisibleToDebugger
require
:
(
id
require
)
=
>
{
const
uri
=
require
.
resolve
(
id
)
;
const
isBrowserDir
=
BROWSER_BASED_DIRS
.
filter
(
dir
=
>
{
return
uri
.
startsWith
(
dir
)
;
}
)
.
length
>
0
;
if
(
!
uri
.
startsWith
(
baseURI
)
&
&
!
isBrowserDir
)
{
return
devtools
.
require
(
uri
)
;
}
return
require
(
uri
)
;
}
globals
:
{
console
:
window
.
console
define
:
function
(
callback
)
{
callback
(
this
.
require
this
.
exports
this
.
module
)
;
return
this
.
exports
;
}
}
}
;
const
mainModule
=
loaders
.
Module
(
baseURI
joinURI
(
baseURI
"
main
.
js
"
)
)
;
const
mainLoader
=
loaders
.
Loader
(
opts
)
;
return
{
loader
:
mainLoader
require
:
loaders
.
Require
(
mainLoader
mainModule
)
}
;
}
this
.
BrowserLoader
=
BrowserLoader
;
this
.
EXPORTED_SYMBOLS
=
[
"
BrowserLoader
"
]
;
