"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
old
-
event
-
emitter
"
)
;
loader
.
lazyImporter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
HOTRELOAD_PREF
=
"
devtools
.
loader
.
hotreload
"
;
function
resolveResourcePath
(
uri
)
{
const
handler
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
const
resolved
=
handler
.
resolveURI
(
Services
.
io
.
newURI
(
uri
)
)
;
return
resolved
.
replace
(
/
file
:
\
/
\
/
/
"
"
)
;
}
function
findSourceDir
(
path
)
{
if
(
path
=
=
=
"
"
|
|
path
=
=
=
"
/
"
)
{
return
Promise
.
resolve
(
null
)
;
}
return
OS
.
File
.
exists
(
OS
.
Path
.
join
(
path
"
devtools
/
client
/
shared
/
file
-
watcher
.
js
"
)
)
.
then
(
exists
=
>
{
if
(
exists
)
{
return
path
;
}
return
findSourceDir
(
OS
.
Path
.
dirname
(
path
)
)
;
}
)
;
}
let
worker
=
null
;
const
onPrefChange
=
function
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
HOTRELOAD_PREF
)
&
&
!
worker
)
{
const
devtoolsPath
=
resolveResourcePath
(
"
resource
:
/
/
devtools
"
)
.
replace
(
/
\
/
/
"
"
)
;
const
searchPoint
=
OS
.
Path
.
dirname
(
OS
.
Path
.
dirname
(
devtoolsPath
)
)
;
findSourceDir
(
searchPoint
)
.
then
(
srcPath
=
>
{
const
rootPath
=
srcPath
?
OS
.
Path
.
join
(
srcPath
"
devtools
"
)
:
devtoolsPath
;
const
watchPath
=
OS
.
Path
.
join
(
rootPath
"
client
"
)
;
const
{
watchFiles
}
=
require
(
"
devtools
/
client
/
shared
/
file
-
watcher
"
)
;
worker
=
watchFiles
(
watchPath
path
=
>
{
let
relativePath
=
path
.
replace
(
rootPath
+
"
/
"
"
"
)
;
module
.
exports
.
emit
(
"
file
-
changed
"
relativePath
path
)
;
}
)
;
}
)
;
}
else
if
(
worker
)
{
worker
.
terminate
(
)
;
worker
=
null
;
}
}
;
Services
.
prefs
.
addObserver
(
HOTRELOAD_PREF
{
observe
:
onPrefChange
}
)
;
onPrefChange
(
)
;
EventEmitter
.
decorate
(
module
.
exports
)
;
