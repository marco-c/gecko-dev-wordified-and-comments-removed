"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
generateUUID
"
"
resource
:
/
/
devtools
/
shared
/
generate
-
uuid
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
[
"
entries
"
"
executeSoon
"
"
toObject
"
]
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
true
)
;
const
PROMISE
=
(
exports
.
PROMISE
=
"
dispatch
/
promise
"
)
;
function
promiseMiddleware
(
{
dispatch
}
)
{
return
next
=
>
action
=
>
{
if
(
!
(
PROMISE
in
action
)
)
{
return
next
(
action
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
promiseInst
=
action
[
PROMISE
]
;
const
seqId
=
generateUUID
(
)
.
toString
(
)
;
action
=
Object
.
assign
(
toObject
(
entries
(
action
)
.
filter
(
pair
=
>
pair
[
0
]
!
=
=
PROMISE
)
)
{
seqId
}
)
;
dispatch
(
Object
.
assign
(
{
}
action
{
status
:
"
start
"
}
)
)
;
promiseInst
.
then
(
value
=
>
{
executeSoon
(
(
)
=
>
{
dispatch
(
Object
.
assign
(
{
}
action
{
status
:
"
done
"
value
}
)
)
;
resolve
(
value
)
;
}
)
;
}
error
=
>
{
executeSoon
(
(
)
=
>
{
dispatch
(
Object
.
assign
(
{
}
action
{
status
:
"
error
"
error
:
error
.
message
|
|
error
}
)
)
;
reject
(
error
)
;
}
)
;
}
)
;
}
)
;
}
;
}
exports
.
promise
=
promiseMiddleware
;
