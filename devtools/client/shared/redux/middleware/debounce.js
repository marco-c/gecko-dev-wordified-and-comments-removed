"
use
strict
"
;
function
debounceActions
(
wait
maxWait
)
{
let
queuedActions
=
[
]
;
return
store
=
>
next
=
>
{
let
debounced
=
debounce
(
(
)
=
>
{
next
(
batchActions
(
queuedActions
)
)
;
queuedActions
=
[
]
;
}
wait
maxWait
)
;
return
action
=
>
{
if
(
!
action
.
meta
|
|
!
action
.
meta
.
debounce
)
{
return
next
(
action
)
;
}
if
(
action
.
type
=
=
BATCH_ACTIONS
)
{
queuedActions
.
push
(
.
.
.
action
.
actions
)
;
}
else
{
queuedActions
.
push
(
action
)
;
}
return
debounced
(
)
;
}
;
}
;
}
function
debounce
(
cb
wait
maxWait
)
{
let
timeout
maxTimeout
;
let
doFunction
=
(
)
=
>
{
clearTimeout
(
timeout
)
;
clearTimeout
(
maxTimeout
)
;
timeout
=
maxTimeout
=
null
;
cb
(
)
;
}
;
return
(
)
=
>
{
clearTimeout
(
timeout
)
;
timeout
=
setTimeout
(
doFunction
wait
)
;
if
(
!
maxTimeout
)
{
maxTimeout
=
setTimeout
(
doFunction
maxWait
)
;
}
}
;
}
const
BATCH_ACTIONS
=
Symbol
(
"
BATCH_ACTIONS
"
)
;
function
batchActions
(
batchedActions
debounceFlag
=
true
)
{
return
{
type
:
BATCH_ACTIONS
meta
:
{
debounce
:
debounceFlag
}
actions
:
batchedActions
}
;
}
module
.
exports
=
{
BATCH_ACTIONS
batchActions
debounceActions
}
;
