"
use
strict
"
;
const
{
createStore
applyMiddleware
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
task
}
=
require
(
"
devtools
/
client
/
shared
/
redux
/
middleware
/
task
"
)
;
function
run_test
(
)
{
run_next_test
(
)
;
}
add_task
(
async
function
(
)
{
let
store
=
applyMiddleware
(
task
)
(
createStore
)
(
reducer
)
;
store
.
dispatch
(
fetch1
(
"
generator
"
)
)
;
await
waitUntilState
(
store
(
)
=
>
store
.
getState
(
)
.
length
=
=
=
1
)
;
equal
(
store
.
getState
(
)
[
0
]
.
data
"
generator
"
"
task
middleware
async
dispatches
an
action
via
generator
"
)
;
store
.
dispatch
(
fetch2
(
"
sync
"
)
)
;
await
waitUntilState
(
store
(
)
=
>
store
.
getState
(
)
.
length
=
=
=
2
)
;
equal
(
store
.
getState
(
)
[
1
]
.
data
"
sync
"
"
task
middleware
sync
dispatches
an
action
via
sync
"
)
;
}
)
;
function
fetch1
(
data
)
{
return
async
function
(
dispatch
getState
)
{
equal
(
getState
(
)
.
length
0
"
getState
is
accessible
in
a
generator
action
"
)
;
let
moreData
=
await
new
Promise
(
resolve
=
>
resolve
(
data
)
)
;
moreData
=
await
new
Promise
(
resolve
=
>
resolve
(
data
)
)
;
dispatch
(
{
type
:
"
fetch1
"
data
:
moreData
}
)
;
}
;
}
function
fetch2
(
data
)
{
return
{
type
:
"
fetch2
"
data
}
;
}
function
reducer
(
state
=
[
]
action
)
{
info
(
"
Action
called
:
"
+
action
.
type
)
;
if
(
[
"
fetch1
"
"
fetch2
"
]
.
includes
(
action
.
type
)
)
{
state
.
push
(
action
)
;
}
return
[
.
.
.
state
]
;
}
