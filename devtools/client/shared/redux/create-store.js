"
use
strict
"
;
const
{
createStore
applyMiddleware
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
thunk
}
=
require
(
"
.
/
middleware
/
thunk
"
)
;
const
{
waitUntilService
}
=
require
(
"
.
/
middleware
/
wait
-
service
"
)
;
const
{
task
}
=
require
(
"
.
/
middleware
/
task
"
)
;
const
{
promise
}
=
require
(
"
.
/
middleware
/
promise
"
)
;
loader
.
lazyRequireGetter
(
this
"
history
"
"
devtools
/
client
/
shared
/
redux
/
middleware
/
history
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
log
"
"
devtools
/
client
/
shared
/
redux
/
middleware
/
log
"
true
)
;
module
.
exports
=
(
opts
=
{
}
)
=
>
{
const
middleware
=
[
task
thunk
promise
waitUntilService
]
;
if
(
opts
.
history
)
{
middleware
.
push
(
history
(
opts
.
history
)
)
;
}
if
(
opts
.
middleware
)
{
opts
.
middleware
.
forEach
(
fn
=
>
middleware
.
push
(
fn
)
)
;
}
if
(
opts
.
log
)
{
middleware
.
push
(
log
)
;
}
return
applyMiddleware
(
.
.
.
middleware
)
(
createStore
)
;
}
;
