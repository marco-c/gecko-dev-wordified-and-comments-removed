"
use
strict
"
;
const
{
combineReducers
createStore
applyMiddleware
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
thunk
}
=
require
(
"
.
/
middleware
/
thunk
"
)
;
const
{
thunkWithOptions
}
=
require
(
"
.
/
middleware
/
thunk
-
with
-
options
"
)
;
const
{
waitUntilService
}
=
require
(
"
.
/
middleware
/
wait
-
service
"
)
;
const
{
task
}
=
require
(
"
.
/
middleware
/
task
"
)
;
const
{
promise
}
=
require
(
"
.
/
middleware
/
promise
"
)
;
const
flags
=
require
(
"
devtools
/
shared
/
flags
"
)
;
loader
.
lazyRequireGetter
(
this
"
history
"
"
devtools
/
client
/
shared
/
redux
/
middleware
/
history
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
log
"
"
devtools
/
client
/
shared
/
redux
/
middleware
/
log
"
true
)
;
const
createStoreWithMiddleware
=
(
opts
=
{
}
)
=
>
{
const
middleware
=
[
]
;
if
(
!
opts
.
disableTask
)
{
middleware
.
push
(
task
)
;
}
middleware
.
push
(
opts
.
thunkOptions
?
thunkWithOptions
.
bind
(
null
opts
.
thunkOptions
)
:
thunk
thunk
promise
waitUntilService
)
;
if
(
opts
.
history
)
{
middleware
.
push
(
history
(
opts
.
history
)
)
;
}
if
(
opts
.
middleware
)
{
opts
.
middleware
.
forEach
(
fn
=
>
middleware
.
push
(
fn
)
)
;
}
if
(
opts
.
log
)
{
middleware
.
push
(
log
)
;
}
return
applyMiddleware
(
.
.
.
middleware
)
(
createStore
)
;
}
;
module
.
exports
=
(
reducers
{
shouldLog
=
false
initialState
=
undefined
thunkOptions
disableTask
=
false
}
=
{
}
)
=
>
{
const
reducer
=
typeof
reducers
=
=
=
"
function
"
?
reducers
:
combineReducers
(
reducers
)
;
let
historyEntries
;
if
(
flags
.
testing
)
{
historyEntries
=
[
]
;
}
const
store
=
createStoreWithMiddleware
(
{
disableTask
log
:
flags
.
testing
&
&
shouldLog
history
:
historyEntries
thunkOptions
}
)
(
reducer
initialState
)
;
if
(
history
)
{
store
.
history
=
historyEntries
;
}
return
store
;
}
;
