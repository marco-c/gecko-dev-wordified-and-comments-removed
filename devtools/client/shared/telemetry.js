"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
TelemetryStopwatch
}
=
require
(
"
devtools
/
client
/
shared
/
TelemetryStopwatch
.
jsm
"
)
;
const
{
getNthPathExcluding
}
=
require
(
"
devtools
/
shared
/
platform
/
stack
"
)
;
const
{
TelemetryEnvironment
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
const
PENDING_EVENTS
=
new
Map
(
)
;
const
PENDING_EVENT_PROPERTIES
=
new
Map
(
)
;
class
Telemetry
{
constructor
(
)
{
this
.
msSystemNow
=
this
.
msSystemNow
.
bind
(
this
)
;
this
.
getHistogramById
=
this
.
getHistogramById
.
bind
(
this
)
;
this
.
getKeyedHistogramById
=
this
.
getKeyedHistogramById
.
bind
(
this
)
;
this
.
scalarSet
=
this
.
scalarSet
.
bind
(
this
)
;
this
.
scalarAdd
=
this
.
scalarAdd
.
bind
(
this
)
;
this
.
keyedScalarAdd
=
this
.
keyedScalarAdd
.
bind
(
this
)
;
this
.
keyedScalarSet
=
this
.
keyedScalarSet
.
bind
(
this
)
;
this
.
recordEvent
=
this
.
recordEvent
.
bind
(
this
)
;
this
.
setEventRecordingEnabled
=
this
.
setEventRecordingEnabled
.
bind
(
this
)
;
this
.
preparePendingEvent
=
this
.
preparePendingEvent
.
bind
(
this
)
;
this
.
addEventProperty
=
this
.
addEventProperty
.
bind
(
this
)
;
this
.
toolOpened
=
this
.
toolOpened
.
bind
(
this
)
;
this
.
toolClosed
=
this
.
toolClosed
.
bind
(
this
)
;
}
get
osNameAndVersion
(
)
{
const
osInfo
=
TelemetryEnvironment
.
currentEnvironment
.
system
.
os
;
if
(
!
osInfo
)
{
return
"
Unknown
OS
"
;
}
let
osVersion
=
{
osInfo
.
name
}
{
osInfo
.
version
}
;
if
(
osInfo
.
windowsBuildNumber
)
{
osVersion
+
=
.
{
osInfo
.
windowsBuildNumber
}
;
}
return
osVersion
;
}
msSystemNow
(
)
{
return
Services
.
telemetry
.
msSystemNow
(
)
;
}
msSinceProcessStart
(
)
{
return
Services
.
telemetry
.
msSinceProcessStart
(
)
;
}
start
(
histogramId
obj
)
{
return
TelemetryStopwatch
.
start
(
histogramId
obj
)
;
}
startKeyed
(
histogramId
key
obj
)
{
return
TelemetryStopwatch
.
startKeyed
(
histogramId
key
obj
)
;
}
finish
(
histogramId
obj
canceledOkay
)
{
return
TelemetryStopwatch
.
finish
(
histogramId
obj
canceledOkay
)
;
}
finishKeyed
(
histogramId
key
obj
canceledOkay
)
{
return
TelemetryStopwatch
.
finishKeyed
(
histogramId
key
obj
canceledOkay
)
;
}
getHistogramById
(
histogramId
)
{
let
histogram
=
null
;
if
(
histogramId
)
{
try
{
histogram
=
Services
.
telemetry
.
getHistogramById
(
histogramId
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
histogramId
}
+
histogram
which
is
not
defined
in
Histograms
.
json
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
return
histogram
|
|
{
add
:
(
)
=
>
{
}
}
;
}
getKeyedHistogramById
(
histogramId
)
{
let
histogram
=
null
;
if
(
histogramId
)
{
try
{
histogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
histogramId
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
histogramId
}
+
histogram
which
is
not
defined
in
Histograms
.
json
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
return
histogram
|
|
{
add
:
(
)
=
>
{
}
}
;
}
scalarSet
(
scalarId
value
)
{
if
(
!
scalarId
)
{
return
;
}
try
{
if
(
isNaN
(
value
)
&
&
typeof
value
!
=
=
"
boolean
"
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
a
non
-
numeric
and
+
non
-
boolean
value
{
value
}
to
the
{
scalarId
}
scalar
.
Only
+
numeric
and
boolean
values
are
allowed
.
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
return
;
}
Services
.
telemetry
.
scalarSet
(
scalarId
value
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
scalarId
}
+
scalar
which
is
not
defined
in
Scalars
.
yaml
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
scalarAdd
(
scalarId
value
)
{
if
(
!
scalarId
)
{
return
;
}
try
{
if
(
isNaN
(
value
)
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
a
non
-
numeric
value
+
{
value
}
to
the
{
scalarId
}
scalar
.
Only
numeric
values
are
+
allowed
.
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
return
;
}
Services
.
telemetry
.
scalarAdd
(
scalarId
value
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
scalarId
}
+
scalar
which
is
not
defined
in
Scalars
.
yaml
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
keyedScalarSet
(
scalarId
key
value
)
{
if
(
!
scalarId
)
{
return
;
}
try
{
if
(
isNaN
(
value
)
&
&
typeof
value
!
=
=
"
boolean
"
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
a
non
-
numeric
and
+
non
-
boolean
value
{
value
}
to
the
{
scalarId
}
scalar
.
Only
+
numeric
and
boolean
values
are
allowed
.
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
return
;
}
Services
.
telemetry
.
keyedScalarSet
(
scalarId
key
value
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
scalarId
}
+
scalar
which
is
not
defined
in
Scalars
.
yaml
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
keyedScalarAdd
(
scalarId
key
value
)
{
if
(
!
scalarId
)
{
return
;
}
try
{
if
(
isNaN
(
value
)
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
a
non
-
numeric
value
+
{
value
}
to
the
{
scalarId
}
scalar
.
Only
numeric
values
are
+
allowed
.
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
return
;
}
Services
.
telemetry
.
keyedScalarAdd
(
scalarId
key
value
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
scalarId
}
+
scalar
which
is
not
defined
in
Scalars
.
yaml
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
setEventRecordingEnabled
(
category
enabled
)
{
return
Services
.
telemetry
.
setEventRecordingEnabled
(
category
enabled
)
;
}
preparePendingEvent
(
category
method
object
value
expected
=
[
]
)
{
const
sig
=
{
category
}
{
method
}
{
object
}
{
value
}
;
if
(
expected
.
length
=
=
=
0
)
{
throw
new
Error
(
preparePendingEvent
(
)
was
called
without
any
expected
+
properties
.
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
PENDING_EVENTS
.
set
(
sig
{
extra
:
{
}
expected
:
new
Set
(
expected
)
}
)
;
const
props
=
PENDING_EVENT_PROPERTIES
.
get
(
sig
)
;
if
(
props
)
{
for
(
const
[
name
val
]
of
Object
.
entries
(
props
)
)
{
this
.
addEventProperty
(
category
method
object
value
name
val
)
;
}
PENDING_EVENT_PROPERTIES
.
delete
(
sig
)
;
}
}
addEventProperty
(
category
method
object
value
pendingPropName
pendingPropValue
)
{
const
sig
=
{
category
}
{
method
}
{
object
}
{
value
}
;
if
(
!
PENDING_EVENTS
.
has
(
sig
)
)
{
const
props
=
PENDING_EVENT_PROPERTIES
.
get
(
sig
)
;
if
(
props
)
{
props
[
pendingPropName
]
=
pendingPropValue
;
}
else
{
PENDING_EVENT_PROPERTIES
.
set
(
sig
{
[
pendingPropName
]
:
pendingPropValue
}
)
;
}
return
;
}
const
{
expected
extra
}
=
PENDING_EVENTS
.
get
(
sig
)
;
if
(
expected
.
has
(
pendingPropName
)
)
{
extra
[
pendingPropName
]
=
pendingPropValue
;
if
(
expected
.
size
=
=
=
Object
.
keys
(
extra
)
.
length
)
{
this
.
_sendPendingEvent
(
category
method
object
value
)
;
}
}
else
{
throw
new
Error
(
An
attempt
was
made
to
add
the
unexpected
property
+
"
{
pendingPropName
}
"
to
a
telemetry
event
with
the
+
signature
"
{
sig
}
"
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
addEventProperties
(
category
method
object
value
pendingObject
)
{
for
(
const
[
key
val
]
of
Object
.
entries
(
pendingObject
)
)
{
this
.
addEventProperty
(
category
method
object
value
key
val
)
;
}
}
_sendPendingEvent
(
category
method
object
value
)
{
const
sig
=
{
category
}
{
method
}
{
object
}
{
value
}
;
const
{
extra
}
=
PENDING_EVENTS
.
get
(
sig
)
;
PENDING_EVENTS
.
delete
(
sig
)
;
PENDING_EVENT_PROPERTIES
.
delete
(
sig
)
;
this
.
recordEvent
(
category
method
object
value
extra
)
;
}
recordEvent
(
category
method
object
value
=
null
extra
=
null
)
{
if
(
extra
)
{
for
(
let
[
name
val
]
of
Object
.
entries
(
extra
)
)
{
val
=
val
+
"
"
;
extra
[
name
]
=
val
;
if
(
val
.
length
>
80
)
{
const
sig
=
{
category
}
{
method
}
{
object
}
{
value
}
;
throw
new
Error
(
The
property
"
{
name
}
"
was
added
to
a
telemetry
+
event
with
the
signature
{
sig
}
but
it
'
s
value
+
"
{
val
}
"
is
longer
than
the
maximum
allowed
length
+
of
80
characters
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
}
Services
.
telemetry
.
recordEvent
(
category
method
object
value
extra
)
;
}
toolOpened
(
id
)
{
const
charts
=
getChartsFromToolId
(
id
)
;
if
(
!
charts
)
{
return
;
}
if
(
charts
.
useTimedEvent
)
{
this
.
preparePendingEvent
(
"
devtools
.
main
"
"
tool_timer
"
id
null
[
"
os
"
"
time_open
"
"
session_id
"
]
)
;
this
.
addEventProperty
(
"
devtools
.
main
"
"
tool_timer
"
id
null
"
time_open
"
this
.
msSystemNow
(
)
)
;
}
if
(
charts
.
timerHist
)
{
this
.
start
(
charts
.
timerHist
this
)
;
}
if
(
charts
.
countHist
)
{
this
.
getHistogramById
(
charts
.
countHist
)
.
add
(
true
)
;
}
if
(
charts
.
countScalar
)
{
this
.
scalarAdd
(
charts
.
countScalar
1
)
;
}
}
toolClosed
(
id
sessionId
)
{
const
charts
=
getChartsFromToolId
(
id
)
;
if
(
!
charts
)
{
return
;
}
if
(
charts
.
useTimedEvent
)
{
const
sig
=
devtools
.
main
tool_timer
{
id
}
null
;
const
event
=
PENDING_EVENTS
.
get
(
sig
)
;
const
time
=
this
.
msSystemNow
(
)
-
event
.
extra
.
time_open
;
this
.
addEventProperties
(
"
devtools
.
main
"
"
tool_timer
"
id
null
{
"
time_open
"
:
time
"
os
"
:
this
.
osNameAndVersion
"
session_id
"
:
sessionId
}
)
;
}
if
(
charts
.
timerHist
)
{
this
.
finish
(
charts
.
timerHist
this
)
;
}
}
}
function
getChartsFromToolId
(
id
)
{
if
(
!
id
)
{
return
null
;
}
const
lowerCaseId
=
id
.
toLowerCase
(
)
;
let
useTimedEvent
=
null
;
let
timerHist
=
null
;
let
countHist
=
null
;
let
countScalar
=
null
;
id
=
id
.
toUpperCase
(
)
;
if
(
id
=
=
=
"
PERFORMANCE
"
)
{
id
=
"
JSPROFILER
"
;
}
switch
(
id
)
{
case
"
ABOUTDEBUGGING
"
:
case
"
BROWSERCONSOLE
"
:
case
"
CANVASDEBUGGER
"
:
case
"
DOM
"
:
case
"
INSPECTOR
"
:
case
"
JSBROWSERDEBUGGER
"
:
case
"
JSDEBUGGER
"
:
case
"
JSPROFILER
"
:
case
"
MEMORY
"
:
case
"
NETMONITOR
"
:
case
"
OPTIONS
"
:
case
"
PAINTFLASHING
"
:
case
"
RESPONSIVE
"
:
case
"
SCRATCHPAD
"
:
case
"
SHADEREDITOR
"
:
case
"
STORAGE
"
:
case
"
STYLEEDITOR
"
:
case
"
TOOLBOX
"
:
case
"
WEBAUDIOEDITOR
"
:
case
"
WEBCONSOLE
"
:
case
"
WEBIDE
"
:
timerHist
=
DEVTOOLS_
{
id
}
_TIME_ACTIVE_SECONDS
;
countHist
=
DEVTOOLS_
{
id
}
_OPENED_COUNT
;
break
;
case
"
ACCESSIBILITY
"
:
case
"
APPLICATION
"
:
timerHist
=
DEVTOOLS_
{
id
}
_TIME_ACTIVE_SECONDS
;
countScalar
=
devtools
.
{
lowerCaseId
}
.
opened_count
;
break
;
case
"
ACCESSIBILITY_PICKER
"
:
timerHist
=
DEVTOOLS_
{
id
}
_TIME_ACTIVE_SECONDS
;
countScalar
=
devtools
.
accessibility
.
picker_used_count
;
break
;
case
"
ANIMATIONINSPECTOR
"
:
case
"
COMPUTEDVIEW
"
:
case
"
FONTINSPECTOR
"
:
case
"
LAYOUTVIEW
"
:
case
"
RULEVIEW
"
:
useTimedEvent
=
true
;
timerHist
=
DEVTOOLS_
{
id
}
_TIME_ACTIVE_SECONDS
;
countHist
=
DEVTOOLS_
{
id
}
_OPENED_COUNT
;
break
;
default
:
timerHist
=
DEVTOOLS_CUSTOM_TIME_ACTIVE_SECONDS
;
countHist
=
DEVTOOLS_CUSTOM_OPENED_COUNT
;
}
if
(
!
timerHist
|
|
(
!
countHist
&
&
!
countScalar
)
)
{
throw
new
Error
(
getChartsFromToolId
cannot
be
called
without
a
timer
+
histogram
and
either
a
count
histogram
or
count
scalar
.
)
;
}
return
{
useTimedEvent
:
useTimedEvent
timerHist
:
timerHist
countHist
:
countHist
countScalar
:
countScalar
}
;
}
function
getCaller
(
)
{
return
getNthPathExcluding
(
0
"
/
telemetry
.
js
"
)
;
}
module
.
exports
=
Telemetry
;
