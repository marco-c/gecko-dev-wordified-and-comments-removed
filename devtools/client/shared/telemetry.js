"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
TelemetryStopwatch
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
TelemetryStopwatch
.
jsm
"
)
;
const
{
getNthPathExcluding
}
=
require
(
"
devtools
/
shared
/
platform
/
stack
"
)
;
const
TOOLS_OPENED_PREF
=
"
devtools
.
telemetry
.
tools
.
opened
.
version
"
;
const
PENDING_EVENTS
=
new
Map
(
)
;
const
PENDING_EVENT_PROPERTIES
=
new
Map
(
)
;
class
Telemetry
{
constructor
(
)
{
this
.
toolOpened
=
this
.
toolOpened
.
bind
(
this
)
;
this
.
toolClosed
=
this
.
toolClosed
.
bind
(
this
)
;
this
.
getHistogramById
=
this
.
getHistogramById
.
bind
(
this
)
;
this
.
getKeyedHistogramById
=
this
.
getKeyedHistogramById
.
bind
(
this
)
;
this
.
scalarSet
=
this
.
scalarSet
.
bind
(
this
)
;
this
.
scalarAdd
=
this
.
scalarAdd
.
bind
(
this
)
;
this
.
keyedScalarAdd
=
this
.
keyedScalarAdd
.
bind
(
this
)
;
this
.
logOncePerBrowserVersion
=
this
.
logOncePerBrowserVersion
.
bind
(
this
)
;
this
.
recordEvent
=
this
.
recordEvent
.
bind
(
this
)
;
this
.
setEventRecordingEnabled
=
this
.
setEventRecordingEnabled
.
bind
(
this
)
;
this
.
preparePendingEvent
=
this
.
preparePendingEvent
.
bind
(
this
)
;
this
.
addEventProperty
=
this
.
addEventProperty
.
bind
(
this
)
;
}
get
histograms
(
)
{
return
{
toolbox
:
{
histogram
:
"
DEVTOOLS_TOOLBOX_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_TOOLBOX_TIME_ACTIVE_SECONDS
"
}
options
:
{
histogram
:
"
DEVTOOLS_OPTIONS_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_OPTIONS_TIME_ACTIVE_SECONDS
"
}
webconsole
:
{
histogram
:
"
DEVTOOLS_WEBCONSOLE_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_WEBCONSOLE_TIME_ACTIVE_SECONDS
"
}
browserconsole
:
{
histogram
:
"
DEVTOOLS_BROWSERCONSOLE_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_BROWSERCONSOLE_TIME_ACTIVE_SECONDS
"
}
inspector
:
{
histogram
:
"
DEVTOOLS_INSPECTOR_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_INSPECTOR_TIME_ACTIVE_SECONDS
"
}
ruleview
:
{
histogram
:
"
DEVTOOLS_RULEVIEW_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_RULEVIEW_TIME_ACTIVE_SECONDS
"
}
computedview
:
{
histogram
:
"
DEVTOOLS_COMPUTEDVIEW_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_COMPUTEDVIEW_TIME_ACTIVE_SECONDS
"
}
layoutview
:
{
histogram
:
"
DEVTOOLS_LAYOUTVIEW_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_LAYOUTVIEW_TIME_ACTIVE_SECONDS
"
}
fontinspector
:
{
histogram
:
"
DEVTOOLS_FONTINSPECTOR_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_FONTINSPECTOR_TIME_ACTIVE_SECONDS
"
}
animationinspector
:
{
histogram
:
"
DEVTOOLS_ANIMATIONINSPECTOR_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_ANIMATIONINSPECTOR_TIME_ACTIVE_SECONDS
"
}
jsdebugger
:
{
histogram
:
"
DEVTOOLS_JSDEBUGGER_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_JSDEBUGGER_TIME_ACTIVE_SECONDS
"
}
jsbrowserdebugger
:
{
histogram
:
"
DEVTOOLS_JSBROWSERDEBUGGER_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_JSBROWSERDEBUGGER_TIME_ACTIVE_SECONDS
"
}
styleeditor
:
{
histogram
:
"
DEVTOOLS_STYLEEDITOR_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_STYLEEDITOR_TIME_ACTIVE_SECONDS
"
}
shadereditor
:
{
histogram
:
"
DEVTOOLS_SHADEREDITOR_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_SHADEREDITOR_TIME_ACTIVE_SECONDS
"
}
webaudioeditor
:
{
histogram
:
"
DEVTOOLS_WEBAUDIOEDITOR_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_WEBAUDIOEDITOR_TIME_ACTIVE_SECONDS
"
}
canvasdebugger
:
{
histogram
:
"
DEVTOOLS_CANVASDEBUGGER_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_CANVASDEBUGGER_TIME_ACTIVE_SECONDS
"
}
performance
:
{
histogram
:
"
DEVTOOLS_JSPROFILER_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_JSPROFILER_TIME_ACTIVE_SECONDS
"
}
memory
:
{
histogram
:
"
DEVTOOLS_MEMORY_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_MEMORY_TIME_ACTIVE_SECONDS
"
}
netmonitor
:
{
histogram
:
"
DEVTOOLS_NETMONITOR_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_NETMONITOR_TIME_ACTIVE_SECONDS
"
}
storage
:
{
histogram
:
"
DEVTOOLS_STORAGE_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_STORAGE_TIME_ACTIVE_SECONDS
"
}
dom
:
{
histogram
:
"
DEVTOOLS_DOM_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_DOM_TIME_ACTIVE_SECONDS
"
}
paintflashing
:
{
histogram
:
"
DEVTOOLS_PAINTFLASHING_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_PAINTFLASHING_TIME_ACTIVE_SECONDS
"
}
scratchpad
:
{
histogram
:
"
DEVTOOLS_SCRATCHPAD_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_SCRATCHPAD_TIME_ACTIVE_SECONDS
"
}
"
scratchpad
-
window
"
:
{
histogram
:
"
DEVTOOLS_SCRATCHPAD_WINDOW_OPENED_COUNT
"
}
responsive
:
{
histogram
:
"
DEVTOOLS_RESPONSIVE_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_RESPONSIVE_TIME_ACTIVE_SECONDS
"
}
eyedropper
:
{
histogram
:
"
DEVTOOLS_EYEDROPPER_OPENED_COUNT
"
}
menueyedropper
:
{
histogram
:
"
DEVTOOLS_MENU_EYEDROPPER_OPENED_COUNT
"
}
pickereyedropper
:
{
histogram
:
"
DEVTOOLS_PICKER_EYEDROPPER_OPENED_COUNT
"
}
toolbareyedropper
:
{
scalar
:
"
devtools
.
toolbar
.
eyedropper
.
opened
"
}
developertoolbar
:
{
histogram
:
"
DEVTOOLS_DEVELOPERTOOLBAR_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_DEVELOPERTOOLBAR_TIME_ACTIVE_SECONDS
"
}
aboutdebugging
:
{
histogram
:
"
DEVTOOLS_ABOUTDEBUGGING_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_ABOUTDEBUGGING_TIME_ACTIVE_SECONDS
"
}
webide
:
{
histogram
:
"
DEVTOOLS_WEBIDE_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_WEBIDE_TIME_ACTIVE_SECONDS
"
}
webideNewProject
:
{
histogram
:
"
DEVTOOLS_WEBIDE_NEW_PROJECT_COUNT
"
}
webideImportProject
:
{
histogram
:
"
DEVTOOLS_WEBIDE_IMPORT_PROJECT_COUNT
"
}
custom
:
{
histogram
:
"
DEVTOOLS_CUSTOM_OPENED_COUNT
"
timerHistogram
:
"
DEVTOOLS_CUSTOM_TIME_ACTIVE_SECONDS
"
}
gridInspectorShowGridAreasOverlayChecked
:
{
scalar
:
"
devtools
.
grid
.
showGridAreasOverlay
.
checked
"
}
gridInspectorShowGridLineNumbersChecked
:
{
scalar
:
"
devtools
.
grid
.
showGridLineNumbers
.
checked
"
}
gridInspectorShowInfiniteLinesChecked
:
{
scalar
:
"
devtools
.
grid
.
showInfiniteLines
.
checked
"
}
accessibility
:
{
countScalar
:
"
devtools
.
accessibility
.
opened_count
"
timerHistogram
:
"
DEVTOOLS_ACCESSIBILITY_TIME_ACTIVE_SECONDS
"
}
accessibilityNodeInspected
:
{
countScalar
:
"
devtools
.
accessibility
.
node_inspected_count
"
}
accessibilityPickerUsed
:
{
countScalar
:
"
devtools
.
accessibility
.
picker_used_count
"
timerHistogram
:
"
DEVTOOLS_ACCESSIBILITY_PICKER_TIME_ACTIVE_SECONDS
"
}
}
;
}
toolOpened
(
id
)
{
let
charts
=
this
.
histograms
[
id
]
|
|
this
.
histograms
.
custom
;
if
(
charts
.
histogram
)
{
this
.
getHistogramById
(
charts
.
histogram
)
.
add
(
true
)
;
}
if
(
charts
.
timerHistogram
)
{
this
.
start
(
charts
.
timerHistogram
)
;
}
if
(
charts
.
scalar
)
{
this
.
scalarSet
(
charts
.
scalar
1
)
;
}
if
(
charts
.
countScalar
)
{
this
.
scalarAdd
(
charts
.
countScalar
1
)
;
}
}
actionOccurred
(
id
)
{
this
.
toolOpened
(
id
)
;
}
toolClosed
(
id
)
{
let
charts
=
this
.
histograms
[
id
]
;
if
(
!
charts
|
|
!
charts
.
timerHistogram
)
{
return
;
}
this
.
finish
(
charts
.
timerHistogram
)
;
}
start
(
histogramId
obj
)
{
return
TelemetryStopwatch
.
start
(
histogramId
obj
)
;
}
startKeyed
(
histogramId
key
obj
)
{
return
TelemetryStopwatch
.
startKeyed
(
histogramId
key
obj
)
;
}
finish
(
histogramId
obj
canceledOkay
)
{
return
TelemetryStopwatch
.
finish
(
histogramId
obj
canceledOkay
)
;
}
finishKeyed
(
histogramId
key
obj
canceledOkay
)
{
return
TelemetryStopwatch
.
finishKeyed
(
histogramId
key
obj
canceledOkay
)
;
}
getHistogramById
(
histogramId
)
{
let
histogram
=
null
;
if
(
histogramId
)
{
try
{
histogram
=
Services
.
telemetry
.
getHistogramById
(
histogramId
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
histogramId
}
+
histogram
which
is
not
defined
in
Histograms
.
json
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
}
}
return
histogram
|
|
{
add
:
(
)
=
>
{
}
}
;
}
getKeyedHistogramById
(
histogramId
)
{
let
histogram
=
null
;
if
(
histogramId
)
{
try
{
histogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
histogramId
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
histogramId
}
+
histogram
which
is
not
defined
in
Histograms
.
json
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
}
}
return
histogram
|
|
{
add
:
(
)
=
>
{
}
}
;
}
scalarSet
(
scalarId
value
)
{
if
(
!
scalarId
)
{
return
;
}
try
{
if
(
isNaN
(
value
)
&
&
typeof
value
!
=
=
"
boolean
"
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
a
non
-
numeric
and
+
non
-
boolean
value
{
value
}
to
the
{
scalarId
}
scalar
.
Only
+
numeric
and
boolean
values
are
allowed
.
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
return
;
}
Services
.
telemetry
.
scalarSet
(
scalarId
value
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
scalarId
}
+
scalar
which
is
not
defined
in
Scalars
.
yaml
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
}
}
scalarAdd
(
scalarId
value
)
{
if
(
!
scalarId
)
{
return
;
}
try
{
if
(
isNaN
(
value
)
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
a
non
-
numeric
value
+
{
value
}
to
the
{
scalarId
}
scalar
.
Only
numeric
values
are
+
allowed
.
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
return
;
}
Services
.
telemetry
.
scalarAdd
(
scalarId
value
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
scalarId
}
+
scalar
which
is
not
defined
in
Scalars
.
yaml
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
}
}
keyedScalarAdd
(
scalarId
key
value
)
{
if
(
!
scalarId
)
{
return
;
}
try
{
if
(
isNaN
(
value
)
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
a
non
-
numeric
value
+
{
value
}
to
the
{
scalarId
}
scalar
.
Only
numeric
values
are
+
allowed
.
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
return
;
}
Services
.
telemetry
.
keyedScalarAdd
(
scalarId
key
value
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
scalarId
}
+
scalar
which
is
not
defined
in
Scalars
.
yaml
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
}
}
logOncePerBrowserVersion
(
perUserHistogram
value
)
{
let
currentVersion
=
Services
.
appinfo
.
version
;
let
latest
=
Services
.
prefs
.
getCharPref
(
TOOLS_OPENED_PREF
)
;
let
latestObj
=
JSON
.
parse
(
latest
)
;
let
lastVersionHistogramUpdated
=
latestObj
[
perUserHistogram
]
;
if
(
typeof
lastVersionHistogramUpdated
=
=
"
undefined
"
|
|
lastVersionHistogramUpdated
!
=
=
currentVersion
)
{
latestObj
[
perUserHistogram
]
=
currentVersion
;
latest
=
JSON
.
stringify
(
latestObj
)
;
Services
.
prefs
.
setCharPref
(
TOOLS_OPENED_PREF
latest
)
;
this
.
getHistogramById
(
perUserHistogram
)
.
add
(
value
)
;
}
}
setEventRecordingEnabled
(
category
enabled
)
{
return
Services
.
telemetry
.
setEventRecordingEnabled
(
category
enabled
)
;
}
preparePendingEvent
(
category
method
object
value
expected
=
[
]
)
{
const
sig
=
{
category
}
{
method
}
{
object
}
{
value
}
;
if
(
expected
.
length
=
=
=
0
)
{
throw
new
Error
(
preparePendingEvent
(
)
was
called
without
any
expected
+
properties
.
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
}
PENDING_EVENTS
.
set
(
sig
{
extra
:
{
}
expected
:
new
Set
(
expected
)
}
)
;
const
props
=
PENDING_EVENT_PROPERTIES
.
get
(
sig
)
;
if
(
props
)
{
for
(
let
[
name
val
]
of
Object
.
entries
(
props
)
)
{
this
.
addEventProperty
(
category
method
object
value
name
val
)
;
}
PENDING_EVENT_PROPERTIES
.
delete
(
sig
)
;
}
}
addEventProperty
(
category
method
object
value
pendingPropName
pendingPropValue
)
{
const
sig
=
{
category
}
{
method
}
{
object
}
{
value
}
;
if
(
!
PENDING_EVENTS
.
has
(
sig
)
)
{
let
props
=
PENDING_EVENT_PROPERTIES
.
get
(
sig
)
;
if
(
props
)
{
props
[
pendingPropName
]
=
pendingPropValue
;
}
else
{
PENDING_EVENT_PROPERTIES
.
set
(
sig
{
[
pendingPropName
]
:
pendingPropValue
}
)
;
}
return
;
}
const
{
expected
extra
}
=
PENDING_EVENTS
.
get
(
sig
)
;
if
(
expected
.
has
(
pendingPropName
)
)
{
extra
[
pendingPropName
]
=
pendingPropValue
;
if
(
expected
.
size
=
=
=
Object
.
keys
(
extra
)
.
length
)
{
this
.
_sendPendingEvent
(
category
method
object
value
)
;
}
}
else
{
throw
new
Error
(
An
attempt
was
made
to
add
the
unexpected
property
+
"
{
pendingPropName
}
"
to
a
telemetry
event
with
the
+
signature
"
{
sig
}
"
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
}
}
addEventProperties
(
category
method
object
value
pendingObject
)
{
for
(
let
[
key
val
]
of
Object
.
entries
(
pendingObject
)
)
{
this
.
addEventProperty
(
category
method
object
value
key
val
)
;
}
}
_sendPendingEvent
(
category
method
object
value
)
{
const
sig
=
{
category
}
{
method
}
{
object
}
{
value
}
;
const
{
extra
}
=
PENDING_EVENTS
.
get
(
sig
)
;
PENDING_EVENTS
.
delete
(
sig
)
;
PENDING_EVENT_PROPERTIES
.
delete
(
sig
)
;
this
.
recordEvent
(
category
method
object
value
extra
)
;
}
recordEvent
(
category
method
object
value
extra
)
{
for
(
let
[
name
val
]
of
Object
.
entries
(
extra
)
)
{
val
=
val
+
"
"
;
extra
[
name
]
=
val
;
if
(
val
.
length
>
80
)
{
const
sig
=
{
category
}
{
method
}
{
object
}
{
value
}
;
throw
new
Error
(
The
property
"
{
name
}
"
was
added
to
a
telemetry
+
event
with
the
signature
{
sig
}
but
it
'
s
value
+
"
{
val
}
"
is
longer
than
the
maximum
allowed
length
+
of
80
characters
\
n
+
CALLER
:
{
this
.
getCaller
(
)
}
)
;
}
}
Services
.
telemetry
.
recordEvent
(
category
method
object
value
extra
)
;
}
getCaller
(
)
{
return
getNthPathExcluding
(
0
"
/
telemetry
.
js
"
)
;
}
}
module
.
exports
=
Telemetry
;
