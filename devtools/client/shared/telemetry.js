"
use
strict
"
;
const
{
getNthPathExcluding
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
platform
/
stack
.
js
"
)
;
const
{
TelemetryEnvironment
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
sys
.
mjs
"
)
;
const
WeakMapMap
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
WeakMapMap
.
js
"
)
;
const
PENDING_EVENT_PROPERTIES
=
new
WeakMapMap
(
)
;
const
PENDING_EVENTS
=
new
WeakMapMap
(
)
;
class
Telemetry
{
constructor
(
{
useSessionId
=
false
}
=
{
}
)
{
this
.
sessionId
=
String
(
useSessionId
?
parseInt
(
this
.
msSinceProcessStart
(
)
10
)
:
-
1
)
;
this
.
msSystemNow
=
this
.
msSystemNow
.
bind
(
this
)
;
this
.
getHistogramById
=
this
.
getHistogramById
.
bind
(
this
)
;
this
.
getKeyedHistogramById
=
this
.
getKeyedHistogramById
.
bind
(
this
)
;
this
.
recordEvent
=
this
.
recordEvent
.
bind
(
this
)
;
this
.
preparePendingEvent
=
this
.
preparePendingEvent
.
bind
(
this
)
;
this
.
addEventProperty
=
this
.
addEventProperty
.
bind
(
this
)
;
this
.
addEventProperties
=
this
.
addEventProperties
.
bind
(
this
)
;
this
.
toolOpened
=
this
.
toolOpened
.
bind
(
this
)
;
this
.
toolClosed
=
this
.
toolClosed
.
bind
(
this
)
;
}
get
osNameAndVersion
(
)
{
const
osInfo
=
TelemetryEnvironment
.
currentEnvironment
.
system
.
os
;
if
(
!
osInfo
)
{
return
"
Unknown
OS
"
;
}
let
osVersion
=
{
osInfo
.
name
}
{
osInfo
.
version
}
;
if
(
osInfo
.
windowsBuildNumber
)
{
osVersion
+
=
.
{
osInfo
.
windowsBuildNumber
}
;
}
return
osVersion
;
}
msSystemNow
(
)
{
return
Services
.
telemetry
.
msSystemNow
(
)
;
}
msSinceProcessStart
(
)
{
return
Services
.
telemetry
.
msSinceProcessStart
(
)
;
}
getHistogramById
(
histogramId
)
{
let
histogram
=
null
;
if
(
histogramId
)
{
try
{
histogram
=
Services
.
telemetry
.
getHistogramById
(
histogramId
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
histogramId
}
+
histogram
which
is
not
defined
in
Histograms
.
json
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
return
(
histogram
|
|
{
add
:
(
)
=
>
{
}
}
)
;
}
getKeyedHistogramById
(
histogramId
)
{
let
histogram
=
null
;
if
(
histogramId
)
{
try
{
histogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
histogramId
)
;
}
catch
(
e
)
{
dump
(
Warning
:
An
attempt
was
made
to
write
to
the
{
histogramId
}
+
histogram
which
is
not
defined
in
Histograms
.
json
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
return
(
histogram
|
|
{
add
:
(
)
=
>
{
}
}
)
;
}
preparePendingEvent
(
obj
method
object
value
expected
=
[
]
)
{
const
sig
=
{
method
}
{
object
}
{
value
}
;
if
(
expected
.
length
=
=
=
0
)
{
throw
new
Error
(
preparePendingEvent
(
)
was
called
without
any
expected
+
properties
.
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
const
data
=
{
extra
:
{
}
expected
:
new
Set
(
expected
)
}
;
PENDING_EVENTS
.
set
(
obj
sig
data
)
;
const
props
=
PENDING_EVENT_PROPERTIES
.
get
(
obj
sig
)
;
if
(
props
)
{
for
(
const
[
name
val
]
of
Object
.
entries
(
props
)
)
{
this
.
addEventProperty
(
obj
method
object
value
name
val
)
;
}
PENDING_EVENT_PROPERTIES
.
delete
(
obj
sig
)
;
}
}
addEventProperty
(
obj
method
object
value
pendingPropName
pendingPropValue
)
{
const
sig
=
{
method
}
{
object
}
{
value
}
;
const
events
=
PENDING_EVENTS
.
get
(
obj
sig
)
;
if
(
!
events
)
{
const
props
=
PENDING_EVENT_PROPERTIES
.
get
(
obj
sig
)
;
if
(
props
)
{
props
[
pendingPropName
]
=
pendingPropValue
;
}
else
{
PENDING_EVENT_PROPERTIES
.
set
(
obj
sig
{
[
pendingPropName
]
:
pendingPropValue
}
)
;
}
return
;
}
const
{
expected
extra
}
=
events
;
if
(
expected
.
has
(
pendingPropName
)
)
{
extra
[
pendingPropName
]
=
pendingPropValue
;
if
(
expected
.
size
=
=
=
Object
.
keys
(
extra
)
.
length
)
{
this
.
_sendPendingEvent
(
obj
method
object
value
)
;
}
}
else
{
throw
new
Error
(
An
attempt
was
made
to
add
the
unexpected
property
+
"
{
pendingPropName
}
"
to
a
telemetry
event
with
the
+
signature
"
{
sig
}
"
\
n
+
CALLER
:
{
getCaller
(
)
}
)
;
}
}
addEventProperties
(
obj
method
object
value
pendingObject
)
{
for
(
const
[
key
val
]
of
Object
.
entries
(
pendingObject
)
)
{
this
.
addEventProperty
(
obj
method
object
value
key
val
)
;
}
}
_sendPendingEvent
(
obj
method
object
value
)
{
const
sig
=
{
method
}
{
object
}
{
value
}
;
const
{
extra
}
=
PENDING_EVENTS
.
get
(
obj
sig
)
;
PENDING_EVENTS
.
delete
(
obj
sig
)
;
PENDING_EVENT_PROPERTIES
.
delete
(
obj
sig
)
;
this
.
recordEvent
(
method
object
value
extra
)
;
}
recordEvent
(
method
object
value
=
null
extra
=
null
)
{
if
(
extra
)
{
for
(
let
[
name
val
]
of
Object
.
entries
(
extra
)
)
{
val
=
val
+
"
"
;
if
(
val
.
length
>
80
)
{
const
sig
=
{
method
}
{
object
}
{
value
}
;
dump
(
Warning
:
The
property
"
{
name
}
"
was
added
to
a
telemetry
+
event
with
the
signature
{
sig
}
but
it
'
s
value
"
{
val
}
"
is
+
longer
than
the
maximum
allowed
length
of
80
characters
.
\
n
+
The
property
value
has
been
trimmed
to
80
characters
before
+
sending
.
\
nCALLER
:
{
getCaller
(
)
}
)
;
val
=
val
.
substring
(
0
80
)
;
}
extra
[
name
]
=
val
;
}
}
if
(
!
extra
)
{
extra
=
{
}
;
}
extra
.
session_id
=
this
.
sessionId
;
if
(
value
!
=
=
null
)
{
extra
.
value
=
value
;
}
const
eventName
=
{
method
}
_
{
object
}
.
replace
(
/
(
_
[
a
-
z
]
)
/
g
c
=
>
c
[
1
]
.
toUpperCase
(
)
)
;
Glean
.
devtoolsMain
[
eventName
]
?
.
record
(
extra
)
;
}
toolOpened
(
id
obj
)
{
const
charts
=
getChartsFromToolId
(
id
)
;
if
(
!
charts
)
{
return
;
}
if
(
charts
.
useTimedEvent
)
{
this
.
preparePendingEvent
(
obj
"
tool_timer
"
id
null
[
"
os
"
"
time_open
"
]
)
;
this
.
addEventProperty
(
obj
"
tool_timer
"
id
null
"
time_open
"
this
.
msSystemNow
(
)
)
;
}
if
(
charts
.
gleanTimingDist
)
{
if
(
!
obj
.
_timerIDs
)
{
obj
.
_timerIDs
=
new
Map
(
)
;
}
if
(
!
obj
.
_timerIDs
.
has
(
id
)
)
{
obj
.
_timerIDs
.
set
(
id
charts
.
gleanTimingDist
.
start
(
)
)
;
}
}
if
(
charts
.
gleanCounter
)
{
charts
.
gleanCounter
.
add
(
1
)
;
}
}
toolClosed
(
id
obj
)
{
const
charts
=
getChartsFromToolId
(
id
)
;
if
(
!
charts
)
{
return
;
}
if
(
charts
.
useTimedEvent
)
{
const
sig
=
tool_timer
{
id
}
null
;
const
event
=
PENDING_EVENTS
.
get
(
obj
sig
)
;
const
time
=
this
.
msSystemNow
(
)
-
event
.
extra
.
time_open
;
this
.
addEventProperties
(
obj
"
tool_timer
"
id
null
{
time_open
:
time
os
:
this
.
osNameAndVersion
}
)
;
}
if
(
charts
.
gleanTimingDist
&
&
obj
.
_timerIDs
)
{
const
timerID
=
obj
.
_timerIDs
.
get
(
id
)
;
if
(
timerID
)
{
charts
.
gleanTimingDist
.
stopAndAccumulate
(
timerID
)
;
obj
.
_timerIDs
.
delete
(
id
)
;
}
}
}
}
function
getChartsFromToolId
(
id
)
{
if
(
!
id
)
{
return
null
;
}
let
useTimedEvent
=
null
;
let
gleanCounter
=
null
;
let
gleanTimingDist
=
null
;
if
(
id
=
=
=
"
performance
"
)
{
id
=
"
jsprofiler
"
;
}
switch
(
id
)
{
case
"
aboutdebugging
"
:
case
"
browserconsole
"
:
case
"
dom
"
:
case
"
inspector
"
:
case
"
jsbrowserdebugger
"
:
case
"
jsdebugger
"
:
case
"
jsprofiler
"
:
case
"
memory
"
:
case
"
netmonitor
"
:
case
"
options
"
:
case
"
responsive
"
:
case
"
storage
"
:
case
"
styleeditor
"
:
case
"
toolbox
"
:
case
"
webconsole
"
:
gleanTimingDist
=
Glean
.
devtools
[
{
id
}
TimeActive
]
;
gleanCounter
=
Glean
.
devtools
[
{
id
}
OpenedCount
]
;
break
;
case
"
accessibility
"
:
gleanTimingDist
=
Glean
.
devtools
.
accessibilityTimeActive
;
gleanCounter
=
Glean
.
devtoolsAccessibility
.
openedCount
;
break
;
case
"
accessibility_picker
"
:
gleanTimingDist
=
Glean
.
devtools
.
accessibilityPickerTimeActive
;
gleanCounter
=
Glean
.
devtoolsAccessibility
.
pickerUsedCount
;
break
;
case
"
changesview
"
:
gleanTimingDist
=
Glean
.
devtools
.
changesviewTimeActive
;
gleanCounter
=
Glean
.
devtoolsChangesview
.
openedCount
;
break
;
case
"
animationinspector
"
:
case
"
compatibilityview
"
:
case
"
computedview
"
:
case
"
fontinspector
"
:
case
"
layoutview
"
:
case
"
ruleview
"
:
useTimedEvent
=
true
;
gleanTimingDist
=
Glean
.
devtools
[
{
id
}
TimeActive
]
;
gleanCounter
=
Glean
.
devtools
[
{
id
}
OpenedCount
]
;
break
;
case
"
flexbox_highlighter
"
:
gleanTimingDist
=
Glean
.
devtools
.
flexboxHighlighterTimeActive
;
break
;
case
"
grid_highlighter
"
:
gleanTimingDist
=
Glean
.
devtools
.
gridHighlighterTimeActive
;
break
;
default
:
gleanTimingDist
=
Glean
.
devtools
.
customTimeActive
;
gleanCounter
=
Glean
.
devtools
.
customOpenedCount
;
}
return
{
useTimedEvent
gleanCounter
gleanTimingDist
}
;
}
function
getCaller
(
)
{
return
getNthPathExcluding
(
0
"
/
telemetry
.
js
"
)
;
}
module
.
exports
=
Telemetry
;
