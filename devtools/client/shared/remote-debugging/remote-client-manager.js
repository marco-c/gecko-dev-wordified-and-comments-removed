"
use
strict
"
;
const
{
CONNECTION_TYPES
}
=
require
(
"
devtools
/
client
/
shared
/
remote
-
debugging
/
constants
"
)
;
class
RemoteClientManager
{
constructor
(
)
{
this
.
_clients
=
new
Map
(
)
;
this
.
_onClientClosed
=
this
.
_onClientClosed
.
bind
(
this
)
;
}
setClient
(
id
type
client
)
{
const
key
=
this
.
_getKey
(
id
type
)
;
this
.
_clients
.
set
(
key
client
)
;
client
.
addOneTimeListener
(
"
closed
"
this
.
_onClientClosed
)
;
}
hasClient
(
id
type
)
{
return
this
.
_clients
.
has
(
this
.
_getKey
(
id
type
)
)
;
}
getClient
(
id
type
)
{
return
this
.
_clients
.
get
(
this
.
_getKey
(
id
type
)
)
;
}
removeClient
(
id
type
)
{
const
key
=
this
.
_getKey
(
id
type
)
;
this
.
_removeClientByKey
(
key
)
;
}
removeAllClients
(
)
{
const
keys
=
[
.
.
.
this
.
_clients
.
keys
(
)
]
;
for
(
const
key
of
keys
)
{
this
.
_removeClientByKey
(
key
)
;
}
}
getRemoteId
(
id
type
)
{
return
encodeURIComponent
(
this
.
_getKey
(
id
type
)
)
;
}
getClientByRemoteId
(
remoteId
)
{
const
key
=
decodeURIComponent
(
remoteId
)
;
return
this
.
_clients
.
get
(
key
)
;
}
getConnectionTypeByRemoteId
(
remoteId
)
{
if
(
!
remoteId
)
{
return
CONNECTION_TYPES
.
THIS_FIREFOX
;
}
const
key
=
decodeURIComponent
(
remoteId
)
;
for
(
const
type
of
Object
.
values
(
CONNECTION_TYPES
)
)
{
if
(
key
.
endsWith
(
type
)
)
{
return
type
;
}
}
return
CONNECTION_TYPES
.
UNKNOWN
;
}
_getKey
(
id
type
)
{
return
id
+
"
-
"
+
type
;
}
_removeClientByKey
(
key
)
{
const
client
=
this
.
_clients
.
get
(
key
)
;
if
(
client
)
{
client
.
removeListener
(
"
closed
"
this
.
_onClientClosed
)
;
this
.
_clients
.
delete
(
key
)
;
}
}
_onClientClosed
(
)
{
const
closedClientKeys
=
[
.
.
.
this
.
_clients
.
keys
(
)
]
.
filter
(
key
=
>
{
return
this
.
_clients
.
get
(
key
)
.
_closed
;
}
)
;
for
(
const
key
of
closedClientKeys
)
{
this
.
_removeClientByKey
(
key
)
;
}
}
}
module
.
exports
=
{
remoteClientManager
:
new
RemoteClientManager
(
)
}
;
