"
use
strict
"
;
const
{
AdbSocket
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
remote
-
debugging
/
adb
/
adb
-
socket
.
js
"
)
;
const
{
dumpn
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
OKAY
=
0x59414b4f
;
const
FAIL
=
0x4c494146
;
function
getBuffer
(
packet
)
{
return
packet
.
buffer
?
packet
.
buffer
:
packet
;
}
function
unpackPacket
(
packet
ignoreResponse
)
{
const
buffer
=
getBuffer
(
packet
)
;
dumpn
(
"
Len
buffer
:
"
+
buffer
.
byteLength
)
;
if
(
buffer
.
byteLength
=
=
=
4
&
&
!
ignoreResponse
)
{
dumpn
(
"
Packet
empty
"
)
;
return
{
length
:
0
data
:
"
"
}
;
}
let
index
=
0
;
let
totalLength
=
0
;
const
decodedText
=
[
]
;
const
decoder
=
new
TextDecoder
(
)
;
while
(
index
<
buffer
.
byteLength
)
{
index
+
=
ignoreResponse
?
0
:
4
;
const
lengthView
=
new
Uint8Array
(
buffer
index
4
)
;
const
length
=
parseInt
(
decoder
.
decode
(
lengthView
)
16
)
;
index
+
=
4
;
const
text
=
new
Uint8Array
(
buffer
index
length
)
;
decodedText
.
push
(
decoder
.
decode
(
text
)
)
;
index
+
=
length
;
totalLength
+
=
length
;
}
return
{
length
:
totalLength
data
:
decodedText
.
join
(
"
\
n
"
)
}
;
}
function
checkResponse
(
packet
expected
=
OKAY
)
{
const
buffer
=
getBuffer
(
packet
)
;
const
view
=
new
Uint32Array
(
buffer
0
1
)
;
if
(
view
[
0
]
=
=
FAIL
)
{
dumpn
(
"
Response
:
FAIL
"
)
;
}
dumpn
(
"
view
[
0
]
=
"
+
view
[
0
]
)
;
return
view
[
0
]
=
=
expected
;
}
function
createRequest
(
command
)
{
let
length
=
command
.
length
.
toString
(
16
)
.
toUpperCase
(
)
;
while
(
length
.
length
<
4
)
{
length
=
"
0
"
+
length
;
}
const
encoder
=
new
TextEncoder
(
)
;
dumpn
(
"
Created
request
:
"
+
length
+
command
)
;
return
encoder
.
encode
(
length
+
command
)
;
}
function
connect
(
)
{
return
new
AdbSocket
(
)
;
}
const
client
=
{
getBuffer
unpackPacket
checkResponse
createRequest
connect
}
;
module
.
exports
=
client
;
