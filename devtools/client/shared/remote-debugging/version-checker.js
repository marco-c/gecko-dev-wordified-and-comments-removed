"
use
strict
"
;
const
{
AppConstants
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
MS_PER_DAY
=
1000
*
60
*
60
*
24
;
const
COMPATIBILITY_STATUS
=
{
COMPATIBLE
:
"
compatible
"
TOO_OLD
:
"
too
-
old
"
TOO_OLD_FENNEC
:
"
too
-
old
-
fennec
"
TOO_RECENT
:
"
too
-
recent
"
}
;
exports
.
COMPATIBILITY_STATUS
=
COMPATIBILITY_STATUS
;
function
getDateFromBuildID
(
buildID
)
{
const
fields
=
buildID
.
match
(
/
(
\
d
{
4
}
)
(
\
d
{
2
}
)
(
\
d
{
2
}
)
/
)
;
const
month
=
Number
.
parseInt
(
fields
[
2
]
10
)
-
1
;
return
new
Date
(
fields
[
1
]
month
fields
[
3
]
)
;
}
function
getMajorVersion
(
platformVersion
)
{
return
Number
.
parseInt
(
platformVersion
.
match
(
/
\
d
+
/
)
[
0
]
10
)
;
}
function
computeMinMaxVersion
(
localVersion
)
{
const
localMajorVersion
=
getMajorVersion
(
localVersion
)
;
return
{
minVersion
:
localMajorVersion
-
2
+
"
.
0a1
"
maxVersion
:
localMajorVersion
+
1
+
"
.
0a1
"
}
;
}
async
function
checkVersionCompatibility
(
devToolsClient
)
{
const
localDescription
=
{
appbuildid
:
Services
.
appinfo
.
appBuildID
platformversion
:
AppConstants
.
MOZ_APP_VERSION
}
;
try
{
const
deviceFront
=
await
devToolsClient
.
mainRoot
.
getFront
(
"
device
"
)
;
const
description
=
await
deviceFront
.
getDescription
(
)
;
return
_compareVersionCompatibility
(
localDescription
description
)
;
}
catch
(
e
)
{
const
localVersion
=
localDescription
.
platformversion
;
const
{
minVersion
}
=
computeMinMaxVersion
(
localVersion
)
;
return
{
minVersion
runtimeVersion
:
"
<
55
"
status
:
COMPATIBILITY_STATUS
.
TOO_OLD
}
;
}
}
exports
.
checkVersionCompatibility
=
checkVersionCompatibility
;
function
_compareVersionCompatibility
(
localDescription
deviceDescription
)
{
const
runtimeID
=
deviceDescription
.
appbuildid
.
substr
(
0
8
)
;
const
localID
=
localDescription
.
appbuildid
.
substr
(
0
8
)
;
const
runtimeDate
=
getDateFromBuildID
(
runtimeID
)
;
const
localDate
=
getDateFromBuildID
(
localID
)
;
const
runtimeVersion
=
deviceDescription
.
platformversion
;
const
localVersion
=
localDescription
.
platformversion
;
const
{
minVersion
maxVersion
}
=
computeMinMaxVersion
(
localVersion
)
;
const
isTooOld
=
Services
.
vc
.
compare
(
runtimeVersion
minVersion
)
<
0
;
const
isTooRecent
=
Services
.
vc
.
compare
(
runtimeVersion
maxVersion
)
>
=
0
;
const
runtimeMajorVersion
=
getMajorVersion
(
runtimeVersion
)
;
const
localMajorVersion
=
getMajorVersion
(
localVersion
)
;
const
isSameMajorVersion
=
runtimeMajorVersion
=
=
=
localMajorVersion
;
let
status
;
if
(
isTooOld
)
{
if
(
runtimeMajorVersion
=
=
=
68
&
&
deviceDescription
.
os
=
=
=
"
Android
"
)
{
status
=
COMPATIBILITY_STATUS
.
TOO_OLD_FENNEC
;
}
else
{
status
=
COMPATIBILITY_STATUS
.
TOO_OLD
;
}
}
else
if
(
isTooRecent
)
{
status
=
COMPATIBILITY_STATUS
.
TOO_RECENT
;
}
else
if
(
isSameMajorVersion
&
&
runtimeDate
-
localDate
>
7
*
MS_PER_DAY
)
{
status
=
COMPATIBILITY_STATUS
.
TOO_RECENT
;
}
else
{
status
=
COMPATIBILITY_STATUS
.
COMPATIBLE
;
}
return
{
localID
localVersion
minVersion
runtimeID
runtimeVersion
status
}
;
}
exports
.
_compareVersionCompatibility
=
_compareVersionCompatibility
;
