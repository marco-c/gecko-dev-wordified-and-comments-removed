(
function
(
)
{
const
SCROLLBARS_URL
=
"
chrome
:
/
/
devtools
/
skin
/
floating
-
scrollbars
-
dark
-
theme
.
css
"
;
let
documentElement
=
document
.
documentElement
;
let
os
;
let
platform
=
navigator
.
platform
;
if
(
platform
.
startsWith
(
"
Win
"
)
)
{
os
=
"
win
"
;
}
else
if
(
platform
.
startsWith
(
"
Mac
"
)
)
{
os
=
"
mac
"
;
}
else
{
os
=
"
linux
"
;
}
documentElement
.
setAttribute
(
"
platform
"
os
)
;
if
(
documentElement
.
getAttribute
(
"
no
-
theme
"
)
=
=
=
"
true
"
)
{
return
;
}
let
devtoolsStyleSheets
=
new
WeakMap
(
)
;
function
forceStyle
(
)
{
let
computedStyle
=
window
.
getComputedStyle
(
documentElement
)
;
if
(
!
computedStyle
)
{
return
;
}
let
display
=
computedStyle
.
display
;
documentElement
.
style
.
display
=
"
none
"
;
window
.
getComputedStyle
(
documentElement
)
.
display
;
documentElement
.
style
.
display
=
display
;
}
function
appendStyleSheet
(
url
)
{
let
styleSheetAttr
=
href
=
"
{
url
}
"
type
=
"
text
/
css
"
;
let
styleSheet
=
document
.
createProcessingInstruction
(
"
xml
-
stylesheet
"
styleSheetAttr
)
;
let
loadPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
function
onload
(
)
{
styleSheet
.
removeEventListener
(
"
load
"
onload
)
;
styleSheet
.
removeEventListener
(
"
error
"
onerror
)
;
resolve
(
)
;
}
function
onerror
(
)
{
styleSheet
.
removeEventListener
(
"
load
"
onload
)
;
styleSheet
.
removeEventListener
(
"
error
"
onerror
)
;
reject
(
"
Failed
to
load
theme
file
"
+
url
)
;
}
styleSheet
.
addEventListener
(
"
load
"
onload
)
;
styleSheet
.
addEventListener
(
"
error
"
onerror
)
;
}
)
;
document
.
insertBefore
(
styleSheet
documentElement
)
;
return
{
styleSheet
loadPromise
}
;
}
function
notifyWindow
(
)
{
window
.
dispatchEvent
(
new
CustomEvent
(
"
theme
-
switch
-
complete
"
{
}
)
)
;
}
function
switchTheme
(
newTheme
oldTheme
)
{
if
(
newTheme
=
=
=
oldTheme
)
{
return
;
}
let
oldThemeDef
=
gDevTools
.
getThemeDefinition
(
oldTheme
)
;
let
newThemeDef
=
gDevTools
.
getThemeDefinition
(
newTheme
)
;
if
(
!
newThemeDef
)
{
newThemeDef
=
gDevTools
.
getThemeDefinition
(
"
light
"
)
;
}
devtoolsStyleSheets
.
set
(
newThemeDef
[
]
)
;
let
loadEvents
=
[
]
;
for
(
let
url
of
newThemeDef
.
stylesheets
)
{
let
{
styleSheet
loadPromise
}
=
appendStyleSheet
(
url
)
;
devtoolsStyleSheets
.
get
(
newThemeDef
)
.
push
(
styleSheet
)
;
loadEvents
.
push
(
loadPromise
)
;
}
let
hiddenDOMWindow
=
Cc
[
"
mozilla
.
org
/
appshell
/
appShellService
;
1
"
]
.
getService
(
Ci
.
nsIAppShellService
)
.
hiddenDOMWindow
;
if
(
!
hiddenDOMWindow
.
matchMedia
(
"
(
-
moz
-
overlay
-
scrollbars
)
"
)
.
matches
)
{
if
(
newTheme
=
=
"
dark
"
)
{
StylesheetUtils
.
loadSheet
(
window
SCROLLBARS_URL
"
agent
"
)
;
}
else
if
(
oldTheme
=
=
"
dark
"
)
{
StylesheetUtils
.
removeSheet
(
window
SCROLLBARS_URL
"
agent
"
)
;
}
forceStyle
(
)
;
}
Promise
.
all
(
loadEvents
)
.
then
(
(
)
=
>
{
if
(
oldThemeDef
)
{
for
(
let
name
of
oldThemeDef
.
classList
)
{
documentElement
.
classList
.
remove
(
name
)
;
}
for
(
let
sheet
of
devtoolsStyleSheets
.
get
(
oldThemeDef
)
|
|
[
]
)
{
sheet
.
remove
(
)
;
}
if
(
oldThemeDef
.
onUnapply
)
{
oldThemeDef
.
onUnapply
(
window
newTheme
)
;
}
}
for
(
let
name
of
newThemeDef
.
classList
)
{
documentElement
.
classList
.
add
(
name
)
;
}
if
(
newThemeDef
.
onApply
)
{
newThemeDef
.
onApply
(
window
oldTheme
)
;
}
gDevTools
.
emit
(
"
theme
-
switched
"
window
newTheme
oldTheme
)
;
notifyWindow
(
)
;
}
console
.
error
.
bind
(
console
)
)
;
}
function
handlePrefChange
(
event
data
)
{
if
(
data
.
pref
=
=
"
devtools
.
theme
"
)
{
switchTheme
(
data
.
newValue
data
.
oldValue
)
;
}
}
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
const
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
StylesheetUtils
=
require
(
"
sdk
/
stylesheet
/
utils
"
)
;
const
{
watchCSS
}
=
require
(
"
devtools
/
client
/
shared
/
css
-
reload
"
)
;
if
(
documentElement
.
hasAttribute
(
"
force
-
theme
"
)
)
{
switchTheme
(
documentElement
.
getAttribute
(
"
force
-
theme
"
)
)
;
}
else
{
switchTheme
(
Services
.
prefs
.
getCharPref
(
"
devtools
.
theme
"
)
)
;
gDevTools
.
on
(
"
pref
-
changed
"
handlePrefChange
)
;
window
.
addEventListener
(
"
unload
"
function
(
)
{
gDevTools
.
off
(
"
pref
-
changed
"
handlePrefChange
)
;
}
)
;
}
watchCSS
(
window
)
;
}
)
(
)
;
