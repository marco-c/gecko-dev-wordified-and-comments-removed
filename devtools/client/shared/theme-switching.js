"
use
strict
"
;
(
function
(
)
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
{
appendStyleSheet
}
=
require
(
"
devtools
/
client
/
shared
/
stylesheet
-
utils
"
)
;
const
{
getTheme
addThemeObserver
removeThemeObserver
}
=
require
(
"
devtools
/
client
/
shared
/
theme
"
)
;
const
documentElement
=
document
.
documentElement
;
let
os
;
const
platform
=
navigator
.
platform
;
if
(
platform
.
startsWith
(
"
Win
"
)
)
{
os
=
"
win
"
;
}
else
if
(
platform
.
startsWith
(
"
Mac
"
)
)
{
os
=
"
mac
"
;
}
else
{
os
=
"
linux
"
;
}
documentElement
.
setAttribute
(
"
platform
"
os
)
;
if
(
documentElement
.
getAttribute
(
"
no
-
theme
"
)
=
=
=
"
true
"
)
{
return
;
}
const
devtoolsStyleSheets
=
new
WeakMap
(
)
;
let
gOldTheme
=
"
"
;
function
notifyWindow
(
)
{
window
.
dispatchEvent
(
new
CustomEvent
(
"
theme
-
switch
-
complete
"
{
}
)
)
;
}
function
switchTheme
(
newTheme
)
{
if
(
newTheme
=
=
=
gOldTheme
)
{
return
;
}
const
oldTheme
=
gOldTheme
;
gOldTheme
=
newTheme
;
const
oldThemeDef
=
gDevTools
.
getThemeDefinition
(
oldTheme
)
;
let
newThemeDef
=
gDevTools
.
getThemeDefinition
(
newTheme
)
;
if
(
!
newThemeDef
)
{
newThemeDef
=
gDevTools
.
getThemeDefinition
(
"
light
"
)
;
}
devtoolsStyleSheets
.
set
(
newThemeDef
[
]
)
;
const
loadEvents
=
[
]
;
for
(
const
url
of
newThemeDef
.
stylesheets
)
{
const
{
styleSheet
loadPromise
}
=
appendStyleSheet
(
document
url
)
;
devtoolsStyleSheets
.
get
(
newThemeDef
)
.
push
(
styleSheet
)
;
loadEvents
.
push
(
loadPromise
)
;
}
Promise
.
all
(
loadEvents
)
.
then
(
(
)
=
>
{
if
(
oldThemeDef
)
{
for
(
const
name
of
oldThemeDef
.
classList
)
{
documentElement
.
classList
.
remove
(
name
)
;
}
for
(
const
sheet
of
devtoolsStyleSheets
.
get
(
oldThemeDef
)
|
|
[
]
)
{
sheet
.
remove
(
)
;
}
if
(
oldThemeDef
.
onUnapply
)
{
oldThemeDef
.
onUnapply
(
window
newTheme
)
;
}
}
for
(
const
name
of
newThemeDef
.
classList
)
{
documentElement
.
classList
.
add
(
name
)
;
}
if
(
newThemeDef
.
onApply
)
{
newThemeDef
.
onApply
(
window
oldTheme
)
;
}
gDevTools
.
emit
(
"
theme
-
switched
"
window
newTheme
oldTheme
)
;
notifyWindow
(
)
;
}
console
.
error
)
;
}
function
handleThemeChange
(
)
{
switchTheme
(
getTheme
(
)
)
;
}
if
(
documentElement
.
hasAttribute
(
"
force
-
theme
"
)
)
{
switchTheme
(
documentElement
.
getAttribute
(
"
force
-
theme
"
)
)
;
}
else
{
switchTheme
(
getTheme
(
)
)
;
addThemeObserver
(
handleThemeChange
)
;
window
.
addEventListener
(
"
unload
"
function
(
)
{
removeThemeObserver
(
handleThemeChange
)
;
}
{
once
:
true
}
)
;
}
}
)
(
)
;
