"
use
strict
"
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
device
.
properties
"
)
;
const
{
RemoteSettings
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
asyncStorage
"
"
devtools
/
shared
/
async
-
storage
"
)
;
const
LOCAL_DEVICES
=
"
devtools
.
devices
.
local
"
;
let
localDevices
;
let
localDevicesLoaded
=
false
;
async
function
loadLocalDevices
(
)
{
if
(
localDevicesLoaded
)
{
return
;
}
let
devicesJSON
=
await
asyncStorage
.
getItem
(
LOCAL_DEVICES
)
;
if
(
!
devicesJSON
)
{
devicesJSON
=
"
{
}
"
;
}
localDevices
=
JSON
.
parse
(
devicesJSON
)
;
localDevicesLoaded
=
true
;
}
async
function
addDevice
(
device
type
=
"
phones
"
)
{
await
loadLocalDevices
(
)
;
let
list
=
localDevices
[
type
]
;
if
(
!
list
)
{
list
=
localDevices
[
type
]
=
[
]
;
}
const
exists
=
list
.
some
(
entry
=
>
entry
.
name
=
=
device
.
name
)
;
if
(
exists
)
{
return
false
;
}
list
.
push
(
Object
.
assign
(
{
}
device
)
)
;
await
asyncStorage
.
setItem
(
LOCAL_DEVICES
JSON
.
stringify
(
localDevices
)
)
;
return
true
;
}
async
function
editDevice
(
oldDevice
newDevice
type
=
"
phones
"
)
{
await
loadLocalDevices
(
)
;
const
list
=
localDevices
[
type
]
;
if
(
!
list
)
{
return
false
;
}
const
index
=
list
.
findIndex
(
entry
=
>
entry
.
name
=
=
oldDevice
.
name
)
;
if
(
index
=
=
-
1
)
{
return
false
;
}
list
.
splice
(
index
1
newDevice
)
;
await
asyncStorage
.
setItem
(
LOCAL_DEVICES
JSON
.
stringify
(
localDevices
)
)
;
return
true
;
}
async
function
removeDevice
(
device
type
=
"
phones
"
)
{
await
loadLocalDevices
(
)
;
const
list
=
localDevices
[
type
]
;
if
(
!
list
)
{
return
false
;
}
const
index
=
list
.
findIndex
(
entry
=
>
entry
.
name
=
=
device
.
name
)
;
if
(
index
=
=
-
1
)
{
return
false
;
}
list
.
splice
(
index
1
)
;
await
asyncStorage
.
setItem
(
LOCAL_DEVICES
JSON
.
stringify
(
localDevices
)
)
;
return
true
;
}
async
function
removeLocalDevices
(
)
{
await
asyncStorage
.
removeItem
(
LOCAL_DEVICES
)
;
localDevices
=
{
}
;
}
async
function
getDevices
(
)
{
const
records
=
await
RemoteSettings
(
"
devtools
-
devices
"
)
.
get
(
)
;
const
devicesByType
=
new
Map
(
)
;
for
(
const
record
of
records
)
{
const
{
type
}
=
record
;
if
(
!
devicesByType
.
has
(
type
)
)
{
devicesByType
.
set
(
type
[
]
)
;
}
devicesByType
.
get
(
type
)
.
push
(
record
)
;
}
await
loadLocalDevices
(
)
;
for
(
const
type
in
localDevices
)
{
if
(
!
devicesByType
.
has
(
type
)
)
{
devicesByType
.
set
(
type
[
]
)
;
}
devicesByType
.
get
(
type
)
.
push
(
.
.
.
localDevices
[
type
]
)
;
}
return
devicesByType
;
}
function
getDeviceString
(
deviceType
)
{
return
L10N
.
getStr
(
"
device
.
"
+
deviceType
)
;
}
module
.
exports
=
{
addDevice
editDevice
removeDevice
removeLocalDevices
getDevices
getDeviceString
}
;
