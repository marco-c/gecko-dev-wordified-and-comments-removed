"
use
strict
"
;
const
SPECIALVALUES
=
new
Set
(
[
"
initial
"
"
inherit
"
"
unset
"
]
)
;
const
{
getCSSLexer
}
=
require
(
"
devtools
/
shared
/
css
/
lexer
"
)
;
loader
.
lazyRequireGetter
(
this
"
CSS_ANGLEUNIT
"
"
devtools
/
shared
/
css
/
constants
"
true
)
;
function
CssAngle
(
angleValue
)
{
this
.
newAngle
(
angleValue
)
;
}
module
.
exports
.
angleUtils
=
{
CssAngle
:
CssAngle
classifyAngle
:
classifyAngle
}
;
CssAngle
.
prototype
=
{
get
ANGLEUNIT
(
)
{
return
CSS_ANGLEUNIT
;
}
_angleUnit
:
null
_angleUnitUppercase
:
false
authored
:
null
lowerCased
:
null
get
angleUnit
(
)
{
if
(
this
.
_angleUnit
=
=
=
null
)
{
this
.
_angleUnit
=
classifyAngle
(
this
.
authored
)
;
}
return
this
.
_angleUnit
;
}
set
angleUnit
(
unit
)
{
this
.
_angleUnit
=
unit
;
}
get
valid
(
)
{
const
token
=
getCSSLexer
(
this
.
authored
)
.
nextToken
(
)
;
if
(
!
token
)
{
return
false
;
}
return
(
token
.
tokenType
=
=
=
"
dimension
"
&
&
token
.
text
.
toLowerCase
(
)
in
this
.
ANGLEUNIT
)
;
}
get
specialValue
(
)
{
return
SPECIALVALUES
.
has
(
this
.
lowerCased
)
?
this
.
authored
:
null
;
}
get
deg
(
)
{
const
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
const
angleUnit
=
classifyAngle
(
this
.
authored
)
;
if
(
angleUnit
=
=
=
this
.
ANGLEUNIT
.
deg
)
{
return
this
.
authored
;
}
let
degValue
;
if
(
angleUnit
=
=
=
this
.
ANGLEUNIT
.
rad
)
{
degValue
=
this
.
authoredAngleValue
/
(
Math
.
PI
/
180
)
;
}
if
(
angleUnit
=
=
=
this
.
ANGLEUNIT
.
grad
)
{
degValue
=
this
.
authoredAngleValue
*
0
.
9
;
}
if
(
angleUnit
=
=
=
this
.
ANGLEUNIT
.
turn
)
{
degValue
=
this
.
authoredAngleValue
*
360
;
}
let
unitStr
=
this
.
ANGLEUNIT
.
deg
;
if
(
this
.
_angleUnitUppercase
=
=
=
true
)
{
unitStr
=
unitStr
.
toUpperCase
(
)
;
}
return
{
Math
.
round
(
degValue
*
100
)
/
100
}
{
unitStr
}
;
}
get
rad
(
)
{
const
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
const
unit
=
classifyAngle
(
this
.
authored
)
;
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
rad
)
{
return
this
.
authored
;
}
let
radValue
;
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
deg
)
{
radValue
=
this
.
authoredAngleValue
*
(
Math
.
PI
/
180
)
;
}
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
grad
)
{
radValue
=
this
.
authoredAngleValue
*
0
.
9
*
(
Math
.
PI
/
180
)
;
}
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
turn
)
{
radValue
=
this
.
authoredAngleValue
*
360
*
(
Math
.
PI
/
180
)
;
}
let
unitStr
=
this
.
ANGLEUNIT
.
rad
;
if
(
this
.
_angleUnitUppercase
=
=
=
true
)
{
unitStr
=
unitStr
.
toUpperCase
(
)
;
}
return
{
Math
.
round
(
radValue
*
10000
)
/
10000
}
{
unitStr
}
;
}
get
grad
(
)
{
const
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
const
unit
=
classifyAngle
(
this
.
authored
)
;
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
grad
)
{
return
this
.
authored
;
}
let
gradValue
;
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
deg
)
{
gradValue
=
this
.
authoredAngleValue
/
0
.
9
;
}
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
rad
)
{
gradValue
=
this
.
authoredAngleValue
/
0
.
9
/
(
Math
.
PI
/
180
)
;
}
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
turn
)
{
gradValue
=
this
.
authoredAngleValue
*
400
;
}
let
unitStr
=
this
.
ANGLEUNIT
.
grad
;
if
(
this
.
_angleUnitUppercase
=
=
=
true
)
{
unitStr
=
unitStr
.
toUpperCase
(
)
;
}
return
{
Math
.
round
(
gradValue
*
100
)
/
100
}
{
unitStr
}
;
}
get
turn
(
)
{
const
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
const
unit
=
classifyAngle
(
this
.
authored
)
;
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
turn
)
{
return
this
.
authored
;
}
let
turnValue
;
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
deg
)
{
turnValue
=
this
.
authoredAngleValue
/
360
;
}
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
rad
)
{
turnValue
=
(
this
.
authoredAngleValue
/
(
Math
.
PI
/
180
)
)
/
360
;
}
if
(
unit
=
=
=
this
.
ANGLEUNIT
.
grad
)
{
turnValue
=
this
.
authoredAngleValue
/
400
;
}
let
unitStr
=
this
.
ANGLEUNIT
.
turn
;
if
(
this
.
_angleUnitUppercase
=
=
=
true
)
{
unitStr
=
unitStr
.
toUpperCase
(
)
;
}
return
{
Math
.
round
(
turnValue
*
100
)
/
100
}
{
unitStr
}
;
}
_getInvalidOrSpecialValue
:
function
(
)
{
if
(
this
.
specialValue
)
{
return
this
.
specialValue
;
}
if
(
!
this
.
valid
)
{
return
"
"
;
}
return
false
;
}
newAngle
:
function
(
angle
)
{
this
.
lowerCased
=
angle
.
toLowerCase
(
)
;
this
.
_angleUnitUppercase
=
(
angle
=
=
=
angle
.
toUpperCase
(
)
)
;
this
.
authored
=
angle
;
const
reg
=
new
RegExp
(
(
{
Object
.
keys
(
this
.
ANGLEUNIT
)
.
join
(
"
|
"
)
}
)
"
i
"
)
;
const
unitStartIdx
=
angle
.
search
(
reg
)
;
this
.
authoredAngleValue
=
angle
.
substring
(
0
unitStartIdx
)
;
this
.
authoredAngleUnit
=
angle
.
substring
(
unitStartIdx
angle
.
length
)
;
return
this
;
}
nextAngleUnit
:
function
(
)
{
let
formats
=
Object
.
keys
(
this
.
ANGLEUNIT
)
;
const
putOnEnd
=
formats
.
splice
(
0
formats
.
indexOf
(
this
.
angleUnit
)
)
;
formats
=
formats
.
concat
(
putOnEnd
)
;
const
currentDisplayedValue
=
this
[
formats
[
0
]
]
;
for
(
const
format
of
formats
)
{
if
(
this
[
format
]
.
toLowerCase
(
)
!
=
=
currentDisplayedValue
.
toLowerCase
(
)
)
{
this
.
angleUnit
=
this
.
ANGLEUNIT
[
format
]
;
break
;
}
}
return
this
.
toString
(
)
;
}
toString
:
function
(
)
{
let
angle
;
switch
(
this
.
angleUnit
)
{
case
this
.
ANGLEUNIT
.
deg
:
angle
=
this
.
deg
;
break
;
case
this
.
ANGLEUNIT
.
rad
:
angle
=
this
.
rad
;
break
;
case
this
.
ANGLEUNIT
.
grad
:
angle
=
this
.
grad
;
break
;
case
this
.
ANGLEUNIT
.
turn
:
angle
=
this
.
turn
;
break
;
default
:
angle
=
this
.
deg
;
}
if
(
this
.
_angleUnitUppercase
&
&
this
.
angleUnit
!
=
this
.
ANGLEUNIT
.
authored
)
{
angle
=
angle
.
toUpperCase
(
)
;
}
return
angle
;
}
valueOf
:
function
(
)
{
return
this
.
deg
;
}
}
;
function
classifyAngle
(
value
)
{
value
=
value
.
toLowerCase
(
)
;
if
(
value
.
endsWith
(
"
deg
"
)
)
{
return
CSS_ANGLEUNIT
.
deg
;
}
if
(
value
.
endsWith
(
"
grad
"
)
)
{
return
CSS_ANGLEUNIT
.
grad
;
}
if
(
value
.
endsWith
(
"
rad
"
)
)
{
return
CSS_ANGLEUNIT
.
rad
;
}
if
(
value
.
endsWith
(
"
turn
"
)
)
{
return
CSS_ANGLEUNIT
.
turn
;
}
return
CSS_ANGLEUNIT
.
deg
;
}
