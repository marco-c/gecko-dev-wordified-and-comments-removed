"
use
strict
"
;
const
Babel
=
require
(
"
.
/
babel
"
)
;
const
fs
=
require
(
"
fs
"
)
;
const
_path
=
require
(
"
path
"
)
;
const
defaultPlugins
=
[
"
transform
-
flow
-
strip
-
types
"
"
proposal
-
class
-
properties
"
"
transform
-
react
-
jsx
"
]
;
function
transform
(
filePath
)
{
const
plugins
=
filePath
.
includes
(
"
devtools
/
client
/
debugger
"
)
?
require
(
"
.
/
build
-
debugger
"
)
(
filePath
)
:
defaultPlugins
;
const
doc
=
fs
.
readFileSync
(
filePath
"
utf8
"
)
;
let
out
;
try
{
out
=
Babel
.
transform
(
doc
{
plugins
}
)
;
}
catch
(
err
)
{
throw
new
Error
(
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
NODE
COMPILATION
ERROR
!
File
:
{
filePath
}
Stack
:
{
err
.
stack
}
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
)
;
}
return
out
.
code
;
}
const
deps
=
[
__filename
_path
.
resolve
(
__dirname
"
babel
.
js
"
)
]
;
for
(
let
i
=
2
;
i
<
process
.
argv
.
length
;
i
+
+
)
{
const
srcPath
=
process
.
argv
[
i
]
;
const
code
=
transform
(
srcPath
)
;
const
filePath
=
_path
.
basename
(
srcPath
)
;
fs
.
writeFileSync
(
filePath
code
)
;
deps
.
push
(
srcPath
)
;
}
console
.
log
(
deps
.
map
(
file
=
>
"
dep
:
"
+
file
)
.
join
(
"
\
n
"
)
)
;
