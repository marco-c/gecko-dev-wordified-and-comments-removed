"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
debounce
}
=
require
(
"
devtools
/
shared
/
debounce
"
)
;
class
ShapesInContextEditor
{
constructor
(
highlighter
inspector
state
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
activeSwatch
=
null
;
this
.
activeProperty
=
null
;
this
.
inspector
=
inspector
;
this
.
highlighter
=
highlighter
;
this
.
highlighterTargetNode
=
null
;
this
.
highligherEventHandlers
=
{
}
;
this
.
highligherEventHandlers
[
"
shape
-
change
"
]
=
this
.
onShapeChange
;
this
.
highligherEventHandlers
[
"
shape
-
hover
-
on
"
]
=
this
.
onShapeHover
;
this
.
highligherEventHandlers
[
"
shape
-
hover
-
off
"
]
=
this
.
onShapeHover
;
this
.
links
=
new
Map
(
)
;
this
.
ruleView
=
this
.
inspector
.
getPanel
(
"
ruleview
"
)
.
view
;
this
.
state
=
state
;
this
.
commit
=
debounce
(
this
.
commit
200
this
)
;
this
.
onChangesApplied
=
this
.
onChangesApplied
.
bind
(
this
)
;
this
.
onHighlighterEvent
=
this
.
onHighlighterEvent
.
bind
(
this
)
;
this
.
onNodeFrontChanged
=
this
.
onNodeFrontChanged
.
bind
(
this
)
;
this
.
onRuleViewChanged
=
this
.
onRuleViewChanged
.
bind
(
this
)
;
this
.
onSwatchClick
=
this
.
onSwatchClick
.
bind
(
this
)
;
this
.
highlighter
.
on
(
"
highlighter
-
event
"
this
.
onHighlighterEvent
)
;
this
.
ruleView
.
on
(
"
ruleview
-
changed
"
this
.
onRuleViewChanged
)
;
}
link
(
prop
swatch
callbacks
=
{
}
)
{
if
(
this
.
links
.
has
(
prop
)
)
{
this
.
replaceSwatch
(
prop
swatch
)
;
return
;
}
if
(
!
callbacks
.
onPreview
)
{
callbacks
.
onPreview
=
function
(
)
{
}
;
}
if
(
!
callbacks
.
onCommit
)
{
callbacks
.
onCommit
=
function
(
)
{
}
;
}
swatch
.
addEventListener
(
"
click
"
this
.
onSwatchClick
)
;
this
.
links
.
set
(
prop
{
swatch
callbacks
}
)
;
this
.
inspector
.
highlighters
.
emit
(
"
shapes
-
highlighter
-
armed
"
)
;
}
async
unlink
(
prop
)
{
let
data
=
this
.
links
.
get
(
prop
)
;
if
(
!
data
|
|
!
data
.
swatch
)
{
return
;
}
if
(
this
.
activeProperty
=
=
=
prop
)
{
await
this
.
hide
(
)
;
}
data
.
swatch
.
classList
.
remove
(
"
active
"
)
;
data
.
swatch
.
removeEventListener
(
"
click
"
this
.
onSwatchClick
)
;
this
.
links
.
delete
(
prop
)
;
}
async
unlinkAll
(
)
{
for
(
let
[
prop
]
of
this
.
links
)
{
await
this
.
unlink
(
prop
)
;
}
}
replaceSwatch
(
prop
swatch
)
{
let
data
=
this
.
links
.
get
(
prop
)
;
if
(
data
.
swatch
)
{
data
.
swatch
.
removeEventListener
(
"
click
"
this
.
onSwatchClick
)
;
data
.
swatch
=
undefined
;
swatch
.
addEventListener
(
"
click
"
this
.
onSwatchClick
)
;
data
.
swatch
=
swatch
;
}
}
hasSwatch
(
swatch
)
{
for
(
let
[
data
]
of
this
.
links
)
{
if
(
data
.
swatch
=
=
swatch
)
{
return
true
;
}
}
return
false
;
}
async
onRuleViewChanged
(
)
{
if
(
this
.
activeProperty
&
&
(
!
this
.
activeProperty
.
enabled
|
|
this
.
activeProperty
.
overridden
)
)
{
await
this
.
hide
(
)
;
}
}
onSwatchClick
(
event
)
{
event
.
stopPropagation
(
)
;
for
(
let
[
prop
data
]
of
this
.
links
)
{
if
(
data
.
swatch
=
=
event
.
target
)
{
this
.
activeSwatch
=
data
.
swatch
;
this
.
activeSwatch
.
classList
.
add
(
"
active
"
)
;
this
.
activeProperty
=
prop
;
break
;
}
}
let
nodeFront
=
this
.
inspector
.
selection
.
nodeFront
;
let
options
=
{
mode
:
event
.
target
.
dataset
.
mode
transformMode
:
event
.
metaKey
|
|
event
.
ctrlKey
}
;
this
.
toggle
(
nodeFront
options
)
;
}
async
toggle
(
node
options
)
{
if
(
node
=
=
this
.
highlighterTargetNode
)
{
if
(
!
options
.
transformMode
)
{
await
this
.
hide
(
)
;
return
;
}
options
.
transformMode
=
!
this
.
state
.
shapes
.
options
.
transformMode
;
}
await
this
.
show
(
node
options
)
;
}
async
show
(
node
options
)
{
let
isShown
=
await
this
.
highlighter
.
show
(
node
options
)
;
if
(
!
isShown
)
{
return
;
}
this
.
inspector
.
selection
.
on
(
"
detached
-
front
"
this
.
onNodeFrontChanged
)
;
this
.
inspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onNodeFrontChanged
)
;
this
.
highlighterTargetNode
=
node
;
this
.
emit
(
"
show
"
{
node
options
}
)
;
}
async
hide
(
)
{
await
this
.
highlighter
.
hide
(
)
;
if
(
this
.
activeSwatch
)
{
this
.
activeSwatch
.
classList
.
remove
(
"
active
"
)
;
}
this
.
activeSwatch
=
null
;
this
.
activeProperty
=
null
;
this
.
emit
(
"
hide
"
{
node
:
this
.
highlighterTargetNode
}
)
;
this
.
inspector
.
selection
.
off
(
"
detached
-
front
"
this
.
onNodeFrontChanged
)
;
this
.
inspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onNodeFrontChanged
)
;
this
.
highlighterTargetNode
=
null
;
}
onHighlighterEvent
(
data
)
{
const
handler
=
this
.
highligherEventHandlers
[
data
.
type
]
;
if
(
!
handler
|
|
typeof
handler
!
=
=
"
function
"
)
{
return
;
}
handler
.
call
(
this
data
)
;
this
.
inspector
.
highlighters
.
emit
(
"
highlighter
-
event
-
handled
"
)
;
}
async
onNodeFrontChanged
(
)
{
try
{
await
this
.
hide
(
)
;
await
this
.
unlinkAll
(
)
;
}
catch
(
err
)
{
}
}
onShapeChange
(
data
)
{
this
.
preview
(
data
.
value
)
;
this
.
commit
(
data
.
value
)
;
}
onShapeHover
(
data
)
{
if
(
!
this
.
activeProperty
)
{
return
;
}
let
shapeValueEl
=
this
.
links
.
get
(
this
.
activeProperty
)
.
swatch
.
nextSibling
;
if
(
!
shapeValueEl
)
{
return
;
}
let
pointSelector
=
"
.
ruleview
-
shape
-
point
"
;
for
(
let
node
of
shapeValueEl
.
querySelectorAll
(
{
pointSelector
}
.
active
)
)
{
node
.
classList
.
remove
(
"
active
"
)
;
}
if
(
typeof
data
.
point
!
=
=
"
string
"
)
{
return
;
}
let
point
=
(
data
.
point
.
includes
(
"
"
)
)
?
data
.
point
.
split
(
"
"
)
[
0
]
:
data
.
point
;
const
INSET_POINT_TYPES
=
[
"
top
"
"
right
"
"
bottom
"
"
left
"
]
;
let
selector
=
INSET_POINT_TYPES
.
includes
(
point
)
?
{
pointSelector
}
.
{
point
}
:
{
pointSelector
}
[
data
-
point
=
'
{
point
}
'
]
;
for
(
let
node
of
shapeValueEl
.
querySelectorAll
(
selector
)
)
{
node
.
classList
.
add
(
"
active
"
)
;
}
}
preview
(
value
)
{
if
(
!
this
.
activeProperty
)
{
return
;
}
let
data
=
this
.
links
.
get
(
this
.
activeProperty
)
;
data
.
callbacks
.
onPreview
(
value
)
;
data
.
swatch
.
nextSibling
.
textContent
=
value
;
}
commit
(
value
)
{
if
(
!
this
.
activeProperty
)
{
return
;
}
this
.
ruleView
.
once
(
"
ruleview
-
changed
"
this
.
onChangesApplied
)
;
let
data
=
this
.
links
.
get
(
this
.
activeProperty
)
;
data
.
callbacks
.
onCommit
(
value
)
;
}
onChangesApplied
(
)
{
this
.
inspector
.
highlighters
.
emit
(
"
shapes
-
highlighter
-
changes
-
applied
"
)
;
}
async
destroy
(
)
{
await
this
.
hide
(
)
;
await
this
.
unlinkAll
(
)
;
this
.
highlighter
.
off
(
"
highlighter
-
event
"
this
.
onHighlighterEvent
)
;
this
.
ruleView
.
off
(
"
ruleview
-
changed
"
this
.
onRuleViewChanged
)
;
this
.
highligherEventHandlers
=
{
}
;
}
}
module
.
exports
=
ShapesInContextEditor
;
