"
use
strict
"
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
focusableSelector
"
"
resource
:
/
/
devtools
/
client
/
shared
/
focus
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
TooltipToggle
"
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
tooltip
/
TooltipToggle
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
listenOnce
"
"
resource
:
/
/
devtools
/
shared
/
async
-
utils
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
DevToolsUtils
"
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
POSITION
=
{
TOP
:
"
top
"
BOTTOM
:
"
bottom
"
}
;
module
.
exports
.
POSITION
=
POSITION
;
const
TYPE
=
{
NORMAL
:
"
normal
"
ARROW
:
"
arrow
"
DOORHANGER
:
"
doorhanger
"
}
;
module
.
exports
.
TYPE
=
TYPE
;
const
ARROW_WIDTH
=
{
normal
:
0
arrow
:
32
doorhanger
:
24
}
;
const
ARROW_OFFSET
=
{
normal
:
0
arrow
:
20
doorhanger
:
8
}
;
const
EXTRA_HEIGHT
=
{
normal
:
0
arrow
:
14
doorhanger
:
9
}
;
const
calculateVerticalPosition
=
(
anchorRect
viewportRect
height
pos
offset
)
=
>
{
const
{
TOP
BOTTOM
}
=
POSITION
;
let
{
top
:
anchorTop
height
:
anchorHeight
}
=
anchorRect
;
anchorTop
-
=
viewportRect
.
top
;
const
availableTop
=
anchorTop
;
const
availableBottom
=
viewportRect
.
height
-
(
anchorTop
+
anchorHeight
)
;
let
keepPosition
=
false
;
if
(
pos
=
=
=
TOP
)
{
keepPosition
=
availableTop
>
=
height
+
offset
;
}
else
if
(
pos
=
=
=
BOTTOM
)
{
keepPosition
=
availableBottom
>
=
height
+
offset
;
}
if
(
!
keepPosition
)
{
pos
=
availableTop
>
availableBottom
?
TOP
:
BOTTOM
;
}
const
availableHeight
=
pos
=
=
=
TOP
?
availableTop
:
availableBottom
;
height
=
Math
.
min
(
height
availableHeight
-
offset
)
;
let
top
=
pos
=
=
=
TOP
?
anchorTop
-
height
-
offset
:
anchorTop
+
anchorHeight
+
offset
;
top
+
=
viewportRect
.
top
;
return
{
top
:
Math
.
round
(
top
)
height
:
Math
.
round
(
height
)
computedPosition
:
pos
}
;
}
;
const
calculateHorizontalPosition
=
(
anchorRect
viewportRect
windowRect
width
type
offset
borderRadius
isRtl
isMenuTooltip
)
=
>
{
let
hangDirection
;
if
(
type
=
=
=
TYPE
.
DOORHANGER
&
&
isMenuTooltip
)
{
const
anchorCenter
=
anchorRect
.
left
+
anchorRect
.
width
/
2
;
const
viewCenter
=
windowRect
.
left
+
windowRect
.
width
/
2
;
hangDirection
=
anchorCenter
>
=
viewCenter
?
"
left
"
:
"
right
"
;
}
else
{
hangDirection
=
isRtl
?
"
left
"
:
"
right
"
;
}
const
anchorWidth
=
anchorRect
.
width
;
const
anchorStart
=
hangDirection
=
=
=
"
right
"
?
anchorRect
.
left
-
viewportRect
.
left
:
viewportRect
.
right
-
anchorRect
.
right
;
const
tooltipWidth
=
Math
.
min
(
width
viewportRect
.
width
)
;
let
tooltipStart
=
anchorStart
+
offset
;
tooltipStart
=
Math
.
min
(
tooltipStart
viewportRect
.
width
-
tooltipWidth
)
;
tooltipStart
=
Math
.
max
(
0
tooltipStart
)
;
const
arrowWidth
=
ARROW_WIDTH
[
type
]
;
let
arrowStart
;
if
(
type
=
=
=
TYPE
.
ARROW
|
|
type
=
=
=
TYPE
.
DOORHANGER
)
{
const
arrowOffset
=
ARROW_OFFSET
[
type
]
+
borderRadius
;
const
arrowCenter
=
tooltipStart
+
arrowOffset
+
arrowWidth
/
2
;
const
anchorCenter
=
anchorStart
+
anchorWidth
/
2
;
if
(
arrowCenter
>
anchorCenter
)
{
tooltipStart
=
Math
.
max
(
0
tooltipStart
-
(
arrowCenter
-
anchorCenter
)
)
;
}
arrowStart
=
Math
.
min
(
arrowOffset
(
anchorWidth
-
arrowWidth
)
/
2
)
|
0
;
arrowStart
+
=
anchorStart
-
tooltipStart
;
arrowStart
=
Math
.
min
(
arrowStart
tooltipWidth
-
arrowWidth
-
borderRadius
)
;
arrowStart
=
Math
.
max
(
arrowStart
borderRadius
)
;
}
const
left
=
hangDirection
=
=
=
"
right
"
?
viewportRect
.
left
+
tooltipStart
:
viewportRect
.
right
-
tooltipStart
-
tooltipWidth
;
const
arrowLeft
=
hangDirection
=
=
=
"
right
"
?
arrowStart
:
tooltipWidth
-
arrowWidth
-
arrowStart
;
return
{
left
:
Math
.
round
(
left
)
width
:
Math
.
round
(
tooltipWidth
)
arrowLeft
:
Math
.
round
(
arrowLeft
)
}
;
}
;
const
getRelativeRect
=
function
(
node
relativeTo
)
{
if
(
!
node
.
getBoxQuads
|
|
!
node
.
getBoxQuads
(
{
relativeTo
createFramesForSuppressedWhitespace
:
false
}
)
[
0
]
)
{
const
{
top
left
width
height
}
=
node
.
getBoundingClientRect
(
)
;
const
right
=
left
+
width
;
const
bottom
=
top
+
height
;
return
{
top
right
bottom
left
width
height
}
;
}
const
{
width
height
}
=
node
.
getBoundingClientRect
(
)
;
const
quadBounds
=
node
.
getBoxQuads
(
{
relativeTo
createFramesForSuppressedWhitespace
:
false
}
)
[
0
]
.
getBounds
(
)
;
const
top
=
quadBounds
.
top
;
const
left
=
quadBounds
.
left
;
const
right
=
left
+
width
;
const
bottom
=
top
+
height
;
return
{
top
right
bottom
left
width
height
}
;
}
;
function
HTMLTooltip
(
toolboxDoc
{
className
=
"
"
consumeOutsideClicks
=
true
id
=
"
"
isMenuTooltip
=
false
type
=
"
normal
"
useXulWrapper
=
false
noAutoHide
=
false
}
=
{
}
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
doc
=
toolboxDoc
;
this
.
id
=
id
;
this
.
className
=
className
;
this
.
type
=
type
;
this
.
noAutoHide
=
noAutoHide
;
this
.
consumeOutsideClicks
=
this
.
noAutoHide
?
false
:
consumeOutsideClicks
;
this
.
isMenuTooltip
=
isMenuTooltip
;
this
.
useXulWrapper
=
this
.
_isXULPopupAvailable
(
)
&
&
useXulWrapper
;
this
.
preferredWidth
=
"
auto
"
;
this
.
preferredHeight
=
"
auto
"
;
this
.
topWindow
=
this
.
_getTopWindow
(
)
;
this
.
_position
=
null
;
this
.
_onClick
=
this
.
_onClick
.
bind
(
this
)
;
this
.
_onMouseup
=
this
.
_onMouseup
.
bind
(
this
)
;
this
.
_onXulPanelHidden
=
this
.
_onXulPanelHidden
.
bind
(
this
)
;
this
.
container
=
this
.
_createContainer
(
)
;
if
(
this
.
useXulWrapper
)
{
this
.
xulPanelWrapper
=
this
.
_createXulPanelWrapper
(
)
;
this
.
doc
.
documentElement
.
appendChild
(
this
.
xulPanelWrapper
)
;
this
.
xulPanelWrapper
.
appendChild
(
this
.
container
)
;
}
else
if
(
this
.
_hasXULRootElement
(
)
)
{
this
.
doc
.
documentElement
.
appendChild
(
this
.
container
)
;
}
else
{
this
.
doc
.
body
.
appendChild
(
this
.
container
)
;
}
}
module
.
exports
.
HTMLTooltip
=
HTMLTooltip
;
HTMLTooltip
.
prototype
=
{
get
panel
(
)
{
return
this
.
container
.
querySelector
(
"
.
tooltip
-
panel
"
)
;
}
get
arrow
(
)
{
return
this
.
container
.
querySelector
(
"
.
tooltip
-
arrow
"
)
;
}
get
position
(
)
{
return
this
.
isVisible
(
)
?
this
.
_position
:
null
;
}
get
toggle
(
)
{
if
(
!
this
.
_toggle
)
{
this
.
_toggle
=
new
TooltipToggle
(
this
)
;
}
return
this
.
_toggle
;
}
setContentSize
(
{
width
=
"
auto
"
height
=
"
auto
"
}
=
{
}
)
{
this
.
preferredWidth
=
width
;
this
.
preferredHeight
=
height
;
}
async
show
(
anchor
options
)
{
const
{
left
top
}
=
this
.
_updateContainerBounds
(
anchor
options
)
;
const
isTooltipVisible
=
this
.
isVisible
(
)
;
if
(
this
.
useXulWrapper
)
{
if
(
!
isTooltipVisible
)
{
await
this
.
_showXulWrapperAt
(
left
top
)
;
}
else
{
this
.
_moveXulWrapperTo
(
left
top
)
;
}
}
else
{
this
.
container
.
style
.
left
=
left
+
"
px
"
;
this
.
container
.
style
.
top
=
top
+
"
px
"
;
}
if
(
isTooltipVisible
)
{
return
;
}
this
.
container
.
classList
.
add
(
"
tooltip
-
visible
"
)
;
this
.
_focusedElement
=
anchor
.
ownerDocument
.
activeElement
;
if
(
this
.
doc
.
defaultView
)
{
if
(
!
this
.
_pendingEventListenerPromise
)
{
this
.
_pendingEventListenerPromise
=
new
Promise
(
resolve
=
>
{
this
.
doc
.
defaultView
.
setTimeout
(
(
)
=
>
{
this
.
topWindow
=
this
.
_getTopWindow
(
)
;
this
.
topWindow
.
addEventListener
(
"
click
"
this
.
_onClick
true
)
;
this
.
topWindow
.
addEventListener
(
"
mouseup
"
this
.
_onMouseup
true
)
;
resolve
(
)
;
}
0
)
;
}
)
;
}
await
this
.
_pendingEventListenerPromise
;
this
.
_pendingEventListenerPromise
=
null
;
}
this
.
container
.
classList
.
add
(
"
tooltip
-
shown
"
)
;
this
.
emit
(
"
shown
"
)
;
}
startTogglingOnHover
(
baseNode
targetNodeCb
options
)
{
this
.
toggle
.
start
(
baseNode
targetNodeCb
options
)
;
}
stopTogglingOnHover
(
)
{
this
.
toggle
.
stop
(
)
;
}
_updateContainerBounds
(
anchor
{
position
x
=
0
y
=
0
}
=
{
}
)
{
let
anchorRect
=
getRelativeRect
(
anchor
this
.
doc
)
;
if
(
this
.
useXulWrapper
)
{
anchorRect
=
this
.
_convertToScreenRect
(
anchorRect
)
;
}
const
{
viewportRect
windowRect
}
=
this
.
_getBoundingRects
(
anchorRect
)
;
let
preferredWidth
;
let
measuredHeight
;
const
currentScrollTop
=
this
.
panel
.
scrollTop
;
if
(
this
.
preferredWidth
=
=
=
"
auto
"
)
{
this
.
container
.
style
.
width
=
"
auto
"
;
if
(
this
.
preferredHeight
=
=
=
"
auto
"
)
{
this
.
container
.
style
.
height
=
"
auto
"
;
}
(
{
width
:
preferredWidth
height
:
measuredHeight
}
=
this
.
_measureContainerSize
(
)
)
;
}
else
{
preferredWidth
=
this
.
preferredWidth
;
}
const
anchorWin
=
anchor
.
ownerDocument
.
defaultView
;
const
anchorCS
=
anchorWin
.
getComputedStyle
(
anchor
)
;
const
isRtl
=
anchorCS
.
direction
=
=
=
"
rtl
"
;
let
borderRadius
=
0
;
if
(
this
.
type
=
=
=
TYPE
.
DOORHANGER
)
{
borderRadius
=
parseFloat
(
anchorCS
.
getPropertyValue
(
"
-
-
theme
-
arrowpanel
-
border
-
radius
"
)
)
;
if
(
Number
.
isNaN
(
borderRadius
)
)
{
borderRadius
=
0
;
}
}
const
{
left
width
arrowLeft
}
=
calculateHorizontalPosition
(
anchorRect
viewportRect
windowRect
preferredWidth
this
.
type
x
borderRadius
isRtl
this
.
isMenuTooltip
)
;
if
(
measuredHeight
&
&
width
!
=
=
preferredWidth
)
{
measuredHeight
=
undefined
;
}
this
.
container
.
style
.
width
=
width
+
"
px
"
;
if
(
this
.
type
=
=
=
TYPE
.
ARROW
|
|
this
.
type
=
=
=
TYPE
.
DOORHANGER
)
{
this
.
arrow
.
style
.
left
=
arrowLeft
+
"
px
"
;
}
const
panelWindow
=
this
.
panel
.
ownerDocument
.
defaultView
;
const
panelComputedStyle
=
panelWindow
.
getComputedStyle
(
this
.
panel
)
;
const
verticalMargin
=
parseFloat
(
panelComputedStyle
.
marginTop
)
+
parseFloat
(
panelComputedStyle
.
marginBottom
)
;
let
preferredHeight
;
if
(
this
.
preferredHeight
=
=
=
"
auto
"
)
{
if
(
measuredHeight
)
{
preferredHeight
=
measuredHeight
;
}
else
{
this
.
container
.
style
.
height
=
"
auto
"
;
(
{
height
:
preferredHeight
}
=
this
.
_measureContainerSize
(
)
)
;
}
preferredHeight
+
=
verticalMargin
;
}
else
{
const
themeHeight
=
EXTRA_HEIGHT
[
this
.
type
]
+
verticalMargin
;
preferredHeight
=
this
.
preferredHeight
+
themeHeight
;
}
const
{
top
height
computedPosition
}
=
calculateVerticalPosition
(
anchorRect
viewportRect
preferredHeight
position
y
)
;
this
.
_position
=
computedPosition
;
const
isTop
=
computedPosition
=
=
=
POSITION
.
TOP
;
this
.
container
.
classList
.
toggle
(
"
tooltip
-
top
"
isTop
)
;
this
.
container
.
classList
.
toggle
(
"
tooltip
-
bottom
"
!
isTop
)
;
this
.
container
.
classList
.
toggle
(
"
tooltip
-
flexible
-
height
"
this
.
preferredHeight
=
=
=
Infinity
)
;
this
.
container
.
style
.
height
=
height
+
"
px
"
;
this
.
panel
.
scrollTop
=
currentScrollTop
;
return
{
left
top
}
;
}
_getBoundingRects
(
anchorRect
)
{
let
viewportRect
;
let
windowRect
;
if
(
this
.
useXulWrapper
)
{
const
{
availLeft
availTop
availHeight
availWidth
}
=
this
.
doc
.
defaultView
.
screen
;
viewportRect
=
{
top
:
availTop
right
:
availLeft
+
availWidth
bottom
:
availTop
+
availHeight
left
:
availLeft
width
:
availWidth
height
:
availHeight
}
;
const
{
screenX
screenY
outerWidth
outerHeight
}
=
this
.
doc
.
defaultView
;
windowRect
=
{
top
:
screenY
right
:
screenX
+
outerWidth
bottom
:
screenY
+
outerHeight
left
:
screenX
width
:
outerWidth
height
:
outerHeight
}
;
if
(
anchorRect
.
left
>
viewportRect
.
right
)
{
const
diffWidth
=
windowRect
.
right
-
viewportRect
.
right
;
viewportRect
.
right
+
=
diffWidth
;
viewportRect
.
width
+
=
diffWidth
;
}
if
(
anchorRect
.
right
<
viewportRect
.
left
)
{
const
diffWidth
=
viewportRect
.
left
-
windowRect
.
left
;
viewportRect
.
left
-
=
diffWidth
;
viewportRect
.
width
+
=
diffWidth
;
}
}
else
{
viewportRect
=
windowRect
=
this
.
doc
.
documentElement
.
getBoundingClientRect
(
)
;
}
return
{
viewportRect
windowRect
}
;
}
_measureContainerSize
(
)
{
const
xulParent
=
this
.
container
.
parentNode
;
if
(
this
.
useXulWrapper
&
&
!
this
.
isVisible
(
)
)
{
this
.
doc
.
documentElement
.
appendChild
(
this
.
container
)
;
}
this
.
container
.
classList
.
add
(
"
tooltip
-
hidden
"
)
;
this
.
container
.
classList
.
add
(
"
tooltip
-
top
"
)
;
this
.
container
.
classList
.
remove
(
"
tooltip
-
bottom
"
)
;
const
{
width
height
}
=
this
.
container
.
getBoundingClientRect
(
)
;
this
.
container
.
classList
.
remove
(
"
tooltip
-
hidden
"
)
;
if
(
this
.
useXulWrapper
&
&
!
this
.
isVisible
(
)
)
{
xulParent
.
appendChild
(
this
.
container
)
;
}
return
{
width
height
}
;
}
async
hide
(
{
fromMouseup
=
false
}
=
{
}
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
devtools
.
popup
.
disable_autohide
"
false
)
|
|
(
this
.
noAutoHide
&
&
this
.
isVisible
(
)
&
&
fromMouseup
)
)
{
return
;
}
if
(
!
this
.
isVisible
(
)
)
{
this
.
emit
(
"
hidden
"
)
;
return
;
}
if
(
fromMouseup
)
{
await
new
Promise
(
resolve
=
>
this
.
topWindow
.
setTimeout
(
resolve
0
)
)
;
}
if
(
this
.
_pendingEventListenerPromise
)
{
this
.
_pendingEventListenerPromise
.
then
(
(
)
=
>
this
.
removeEventListeners
(
)
)
;
}
else
{
this
.
removeEventListeners
(
)
;
}
this
.
container
.
classList
.
remove
(
"
tooltip
-
visible
"
"
tooltip
-
shown
"
)
;
if
(
this
.
useXulWrapper
)
{
await
this
.
_hideXulWrapper
(
)
;
}
this
.
emit
(
"
hidden
"
)
;
const
tooltipHasFocus
=
this
.
doc
.
hasFocus
(
)
&
&
this
.
container
.
contains
(
this
.
doc
.
activeElement
)
;
if
(
tooltipHasFocus
&
&
this
.
_focusedElement
)
{
this
.
_focusedElement
.
focus
(
)
;
this
.
_focusedElement
=
null
;
}
}
removeEventListeners
(
)
{
this
.
topWindow
.
removeEventListener
(
"
click
"
this
.
_onClick
true
)
;
this
.
topWindow
.
removeEventListener
(
"
mouseup
"
this
.
_onMouseup
true
)
;
}
isVisible
(
)
{
return
this
.
container
.
classList
.
contains
(
"
tooltip
-
visible
"
)
;
}
destroy
(
)
{
this
.
hide
(
)
;
this
.
removeEventListeners
(
)
;
this
.
container
.
remove
(
)
;
if
(
this
.
xulPanelWrapper
)
{
this
.
xulPanelWrapper
.
remove
(
)
;
}
if
(
this
.
_toggle
)
{
this
.
_toggle
.
destroy
(
)
;
this
.
_toggle
=
null
;
}
}
_createContainer
(
)
{
const
container
=
this
.
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
container
.
setAttribute
(
"
type
"
this
.
type
)
;
if
(
this
.
id
)
{
container
.
setAttribute
(
"
id
"
this
.
id
)
;
}
container
.
classList
.
add
(
"
tooltip
-
container
"
)
;
if
(
this
.
className
)
{
container
.
classList
.
add
(
.
.
.
this
.
className
.
split
(
"
"
)
)
;
}
const
filler
=
this
.
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
filler
.
classList
.
add
(
"
tooltip
-
filler
"
)
;
container
.
appendChild
(
filler
)
;
const
panel
=
this
.
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
panel
.
classList
.
add
(
"
tooltip
-
panel
"
)
;
container
.
appendChild
(
panel
)
;
if
(
this
.
type
=
=
=
TYPE
.
ARROW
|
|
this
.
type
=
=
=
TYPE
.
DOORHANGER
)
{
const
arrow
=
this
.
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
arrow
.
classList
.
add
(
"
tooltip
-
arrow
"
)
;
container
.
appendChild
(
arrow
)
;
}
return
container
;
}
_onClick
(
e
)
{
if
(
this
.
_isInTooltipContainer
(
e
.
target
)
)
{
return
;
}
if
(
this
.
consumeOutsideClicks
&
&
e
.
button
=
=
=
0
)
{
e
.
preventDefault
(
)
;
e
.
stopPropagation
(
)
;
}
}
_onMouseup
(
e
)
{
if
(
this
.
_isInTooltipContainer
(
e
.
target
)
)
{
return
;
}
this
.
hide
(
{
fromMouseup
:
true
}
)
;
}
_isInTooltipContainer
(
node
)
{
if
(
this
.
arrow
&
&
this
.
arrow
=
=
=
node
)
{
return
true
;
}
if
(
typeof
node
.
closest
=
=
"
function
"
&
&
node
.
closest
(
"
menupopup
"
)
)
{
return
true
;
}
const
tooltipWindow
=
this
.
panel
.
ownerDocument
.
defaultView
;
let
win
=
node
.
ownerDocument
.
defaultView
;
if
(
win
=
=
=
tooltipWindow
)
{
return
this
.
panel
.
contains
(
node
)
;
}
while
(
win
.
parent
&
&
win
.
parent
!
=
=
win
)
{
if
(
win
.
parent
=
=
=
tooltipWindow
)
{
return
this
.
panel
.
contains
(
win
.
frameElement
)
;
}
win
=
win
.
parent
;
}
return
false
;
}
_onXulPanelHidden
(
)
{
if
(
this
.
isVisible
(
)
)
{
this
.
hide
(
)
;
}
}
focus
(
)
{
const
focusableElement
=
this
.
panel
.
querySelector
(
focusableSelector
)
;
if
(
focusableElement
)
{
focusableElement
.
focus
(
)
;
}
return
!
!
focusableElement
;
}
focusEnd
(
)
{
const
focusableElements
=
this
.
panel
.
querySelectorAll
(
focusableSelector
)
;
if
(
focusableElements
.
length
)
{
focusableElements
[
focusableElements
.
length
-
1
]
.
focus
(
)
;
}
return
focusableElements
.
length
!
=
=
0
;
}
_getTopWindow
(
)
{
return
DevToolsUtils
.
getTopWindow
(
this
.
doc
.
defaultView
)
;
}
_hasXULRootElement
(
)
{
return
this
.
doc
.
documentElement
.
namespaceURI
=
=
=
XUL_NS
;
}
_isXULPopupAvailable
(
)
{
return
this
.
doc
.
nodePrincipal
.
isSystemPrincipal
;
}
_createXulPanelWrapper
(
)
{
const
panel
=
this
.
doc
.
createXULElement
(
"
panel
"
)
;
panel
.
setAttribute
(
"
animate
"
false
)
;
panel
.
setAttribute
(
"
consumeoutsideclicks
"
false
)
;
panel
.
setAttribute
(
"
incontentshell
"
false
)
;
panel
.
setAttribute
(
"
noautofocus
"
true
)
;
panel
.
setAttribute
(
"
noautohide
"
this
.
noAutoHide
)
;
panel
.
setAttribute
(
"
ignorekeys
"
true
)
;
panel
.
setAttribute
(
"
tooltip
"
"
aHTMLTooltip
"
)
;
panel
.
setAttribute
(
"
type
"
"
arrow
"
)
;
panel
.
setAttribute
(
"
tooltip
-
type
"
this
.
type
)
;
panel
.
setAttribute
(
"
flip
"
"
none
"
)
;
panel
.
setAttribute
(
"
level
"
"
top
"
)
;
panel
.
setAttribute
(
"
class
"
"
tooltip
-
xul
-
wrapper
"
)
;
panel
.
setAttribute
(
"
role
"
"
presentation
"
)
;
return
panel
;
}
_showXulWrapperAt
(
left
top
)
{
this
.
xulPanelWrapper
.
addEventListener
(
"
popuphidden
"
this
.
_onXulPanelHidden
)
;
const
onPanelShown
=
listenOnce
(
this
.
xulPanelWrapper
"
popupshown
"
)
;
this
.
xulPanelWrapper
.
openPopupAtScreen
(
left
top
false
)
;
return
onPanelShown
;
}
_moveXulWrapperTo
(
left
top
)
{
const
margin
=
parseFloat
(
this
.
xulPanelWrapper
.
ownerGlobal
.
getComputedStyle
(
this
.
xulPanelWrapper
)
.
marginTop
)
;
this
.
xulPanelWrapper
.
moveTo
(
left
+
margin
top
+
margin
)
;
}
_hideXulWrapper
(
)
{
this
.
xulPanelWrapper
.
removeEventListener
(
"
popuphidden
"
this
.
_onXulPanelHidden
)
;
if
(
this
.
xulPanelWrapper
.
state
=
=
=
"
closed
"
)
{
return
Promise
.
resolve
(
)
;
}
const
onPanelHidden
=
listenOnce
(
this
.
xulPanelWrapper
"
popuphidden
"
)
;
this
.
xulPanelWrapper
.
hidePopup
(
)
;
return
onPanelHidden
;
}
_convertToScreenRect
(
{
left
top
width
height
}
)
{
left
+
=
this
.
doc
.
defaultView
.
mozInnerScreenX
;
top
+
=
this
.
doc
.
defaultView
.
mozInnerScreenY
;
return
{
top
right
:
left
+
width
bottom
:
top
+
height
left
width
height
}
;
}
}
;
