"
use
strict
"
;
const
{
LinearEasingFunctionWidget
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
LinearEasingFunctionWidget
"
)
;
const
SwatchBasedEditorTooltip
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
SwatchBasedEditorTooltip
"
)
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
class
SwatchLinearEasingFunctionTooltip
extends
SwatchBasedEditorTooltip
{
constructor
(
document
)
{
super
(
document
)
;
this
.
onWidgetUpdated
=
this
.
onWidgetUpdated
.
bind
(
this
)
;
this
.
widget
=
this
.
createWidget
(
)
;
}
async
createWidget
(
)
{
const
{
doc
}
=
this
.
tooltip
;
this
.
tooltip
.
panel
.
innerHTML
=
"
"
;
const
container
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
container
.
className
=
"
linear
-
easing
-
function
-
container
"
;
this
.
tooltip
.
panel
.
appendChild
(
container
)
;
this
.
tooltip
.
setContentSize
(
{
width
:
400
height
:
400
}
)
;
await
this
.
tooltip
.
once
(
"
shown
"
)
;
return
new
LinearEasingFunctionWidget
(
container
)
;
}
async
show
(
)
{
await
super
.
show
(
)
;
if
(
this
.
activeSwatch
)
{
this
.
ruleViewCurrentLinearValueElement
=
this
.
activeSwatch
.
nextSibling
;
this
.
widget
.
then
(
widget
=
>
{
widget
.
off
(
"
updated
"
this
.
onWidgetUpdated
)
;
widget
.
setCssLinearValue
(
this
.
activeSwatch
.
getAttribute
(
"
data
-
linear
"
)
)
;
widget
.
on
(
"
updated
"
this
.
onWidgetUpdated
)
;
this
.
emit
(
"
ready
"
)
;
}
)
;
}
}
onWidgetUpdated
(
newValue
)
{
if
(
!
this
.
activeSwatch
)
{
return
;
}
this
.
ruleViewCurrentLinearValueElement
.
textContent
=
newValue
;
this
.
activeSwatch
.
setAttribute
(
"
data
-
linear
"
newValue
)
;
this
.
preview
(
newValue
)
;
}
destroy
(
)
{
super
.
destroy
(
)
;
this
.
currentFunctionText
=
null
;
this
.
widget
.
then
(
widget
=
>
{
widget
.
off
(
"
updated
"
this
.
onWidgetUpdated
)
;
widget
.
destroy
(
)
;
}
)
;
}
}
module
.
exports
=
SwatchLinearEasingFunctionTooltip
;
