"
use
strict
"
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
CSSFilterEditorWidget
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
FilterWidget
"
)
;
const
SwatchBasedEditorTooltip
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
SwatchBasedEditorTooltip
"
)
;
const
Heritage
=
require
(
"
sdk
/
core
/
heritage
"
)
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
function
SwatchFilterTooltip
(
document
cssIsValid
)
{
let
stylesheet
=
"
chrome
:
/
/
devtools
/
content
/
shared
/
widgets
/
filter
-
widget
.
css
"
;
SwatchBasedEditorTooltip
.
call
(
this
document
stylesheet
)
;
this
.
_cssIsValid
=
cssIsValid
;
this
.
widget
=
this
.
setFilterContent
(
"
none
"
)
;
this
.
_onUpdate
=
this
.
_onUpdate
.
bind
(
this
)
;
}
SwatchFilterTooltip
.
prototype
=
Heritage
.
extend
(
SwatchBasedEditorTooltip
.
prototype
{
setFilterContent
(
filter
)
{
let
{
doc
}
=
this
.
tooltip
;
let
container
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
container
.
id
=
"
filter
-
container
"
;
this
.
tooltip
.
setContent
(
container
{
width
:
510
height
:
200
}
)
;
return
new
CSSFilterEditorWidget
(
container
filter
this
.
_cssIsValid
)
;
}
show
:
Task
.
async
(
function
*
(
)
{
yield
SwatchBasedEditorTooltip
.
prototype
.
show
.
call
(
this
)
;
if
(
this
.
activeSwatch
)
{
this
.
currentFilterValue
=
this
.
activeSwatch
.
nextSibling
;
this
.
widget
.
off
(
"
updated
"
this
.
_onUpdate
)
;
this
.
widget
.
on
(
"
updated
"
this
.
_onUpdate
)
;
this
.
widget
.
setCssValue
(
this
.
currentFilterValue
.
textContent
)
;
this
.
widget
.
render
(
)
;
this
.
emit
(
"
ready
"
)
;
}
}
)
_onUpdate
(
event
filters
)
{
if
(
!
this
.
activeSwatch
)
{
return
;
}
while
(
this
.
currentFilterValue
.
firstChild
)
{
this
.
currentFilterValue
.
firstChild
.
remove
(
)
;
}
let
node
=
this
.
_parser
.
parseCssProperty
(
"
filter
"
filters
this
.
_options
)
;
this
.
currentFilterValue
.
appendChild
(
node
)
;
this
.
preview
(
)
;
}
destroy
(
)
{
SwatchBasedEditorTooltip
.
prototype
.
destroy
.
call
(
this
)
;
this
.
currentFilterValue
=
null
;
this
.
widget
.
off
(
"
updated
"
this
.
_onUpdate
)
;
this
.
widget
.
destroy
(
)
;
}
addSwatch
(
swatchEl
callbacks
parser
options
)
{
SwatchBasedEditorTooltip
.
prototype
.
addSwatch
.
call
(
this
swatchEl
callbacks
)
;
this
.
_parser
=
parser
;
this
.
_options
=
options
;
}
}
)
;
module
.
exports
=
SwatchFilterTooltip
;
