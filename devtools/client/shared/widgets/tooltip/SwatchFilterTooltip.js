"
use
strict
"
;
const
{
CSSFilterEditorWidget
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
FilterWidget
"
)
;
const
SwatchBasedEditorTooltip
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
SwatchBasedEditorTooltip
"
)
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
class
SwatchFilterTooltip
extends
SwatchBasedEditorTooltip
{
constructor
(
document
)
{
super
(
document
)
;
this
.
widget
=
this
.
setFilterContent
(
"
none
"
)
;
this
.
_onUpdate
=
this
.
_onUpdate
.
bind
(
this
)
;
}
setFilterContent
(
filter
)
{
const
{
doc
}
=
this
.
tooltip
;
this
.
tooltip
.
panel
.
innerHTML
=
"
"
;
const
container
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
container
.
id
=
"
filter
-
container
"
;
this
.
tooltip
.
panel
.
appendChild
(
container
)
;
this
.
tooltip
.
setContentSize
(
{
width
:
510
height
:
200
}
)
;
return
new
CSSFilterEditorWidget
(
container
filter
)
;
}
async
show
(
)
{
await
super
.
show
(
)
;
if
(
this
.
activeSwatch
)
{
this
.
currentFilterValue
=
this
.
activeSwatch
.
nextSibling
;
this
.
widget
.
off
(
"
updated
"
this
.
_onUpdate
)
;
this
.
widget
.
on
(
"
updated
"
this
.
_onUpdate
)
;
this
.
widget
.
setCssValue
(
this
.
currentFilterValue
.
textContent
)
;
this
.
widget
.
render
(
)
;
this
.
emit
(
"
ready
"
)
;
}
}
_onUpdate
(
filters
)
{
if
(
!
this
.
activeSwatch
)
{
return
;
}
while
(
this
.
currentFilterValue
.
firstChild
)
{
this
.
currentFilterValue
.
firstChild
.
remove
(
)
;
}
const
node
=
this
.
_parser
.
parseCssProperty
(
"
filter
"
filters
this
.
_options
)
;
this
.
currentFilterValue
.
appendChild
(
node
)
;
this
.
preview
(
)
;
}
destroy
(
)
{
super
.
destroy
(
)
;
this
.
currentFilterValue
=
null
;
this
.
widget
.
off
(
"
updated
"
this
.
_onUpdate
)
;
this
.
widget
.
destroy
(
)
;
}
addSwatch
(
swatchEl
callbacks
parser
options
)
{
super
.
addSwatch
(
swatchEl
callbacks
)
;
this
.
_parser
=
parser
;
this
.
_options
=
options
;
}
}
module
.
exports
=
SwatchFilterTooltip
;
