"
use
strict
"
;
const
{
BrowserLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
browser
-
loader
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
openDocLink
"
"
devtools
/
client
/
shared
/
link
"
true
)
;
class
CssCompatibilityTooltipHelper
{
constructor
(
)
{
this
.
addTab
=
this
.
addTab
.
bind
(
this
)
;
}
_createElement
(
doc
tag
classList
=
[
]
attributeList
=
{
}
)
{
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
newElement
=
doc
.
createElementNS
(
XHTML_NS
tag
)
;
for
(
const
elementClass
of
classList
)
{
newElement
.
classList
.
add
(
elementClass
)
;
}
for
(
const
key
in
attributeList
)
{
newElement
.
setAttribute
(
key
attributeList
[
key
]
)
;
}
return
newElement
;
}
_renderUnsupportedBrowserList
(
container
unsupportedBrowsers
)
{
if
(
!
unsupportedBrowsers
.
length
)
{
return
;
}
const
{
require
}
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
tooltip
/
"
window
:
this
.
_currentTooltip
.
doc
.
defaultView
}
)
;
const
{
createFactory
createElement
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
ReactDOM
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
.
js
"
)
;
const
UnsupportedBrowserList
=
createFactory
(
require
(
"
resource
:
/
/
devtools
/
client
/
inspector
/
compatibility
/
components
/
UnsupportedBrowserList
.
js
"
)
)
;
const
unsupportedBrowserList
=
createElement
(
UnsupportedBrowserList
{
browsers
:
unsupportedBrowsers
}
)
;
ReactDOM
.
render
(
unsupportedBrowserList
container
.
querySelector
(
"
.
compatibility
-
browser
-
list
-
wrapper
"
)
)
;
}
_getCompatibilityMessage
(
doc
data
)
{
const
{
msgId
property
}
=
data
;
return
this
.
_createElement
(
doc
"
p
"
[
]
{
"
data
-
l10n
-
id
"
:
msgId
"
data
-
l10n
-
args
"
:
JSON
.
stringify
(
{
property
}
)
}
)
;
}
_getBrowserListContainer
(
doc
unsupportedBrowsers
)
{
if
(
!
unsupportedBrowsers
.
length
)
{
return
null
;
}
const
browserList
=
this
.
_createElement
(
doc
"
p
"
)
;
const
browserListWrapper
=
this
.
_createElement
(
doc
"
div
"
[
"
compatibility
-
browser
-
list
-
wrapper
"
]
)
;
browserList
.
appendChild
(
browserListWrapper
)
;
return
browserList
;
}
_getLearnMoreMessage
(
doc
{
rootProperty
}
)
{
const
learnMoreMessage
=
this
.
_createElement
(
doc
"
p
"
[
]
{
"
data
-
l10n
-
id
"
:
"
css
-
compatibility
-
learn
-
more
-
message
"
"
data
-
l10n
-
args
"
:
JSON
.
stringify
(
{
rootProperty
}
)
}
)
;
learnMoreMessage
.
appendChild
(
this
.
_createElement
(
doc
"
span
"
[
"
link
"
]
{
"
data
-
l10n
-
name
"
:
"
link
"
}
)
)
;
return
learnMoreMessage
;
}
async
setContent
(
data
tooltip
)
{
const
fragment
=
this
.
getTemplate
(
data
tooltip
)
;
const
{
doc
}
=
tooltip
;
tooltip
.
panel
.
innerHTML
=
"
"
;
tooltip
.
panel
.
addEventListener
(
"
click
"
this
.
addTab
)
;
tooltip
.
once
(
"
hidden
"
(
)
=
>
{
tooltip
.
panel
.
removeEventListener
(
"
click
"
this
.
addTab
)
;
}
)
;
await
doc
.
l10n
.
translateFragment
(
fragment
)
;
doc
.
l10n
.
pauseObserving
(
)
;
tooltip
.
panel
.
appendChild
(
fragment
)
;
doc
.
l10n
.
resumeObserving
(
)
;
tooltip
.
setContentSize
(
{
width
:
267
height
:
Infinity
}
)
;
}
getTemplate
(
data
tooltip
)
{
const
{
doc
}
=
tooltip
;
const
{
url
unsupportedBrowsers
}
=
data
;
this
.
_currentTooltip
=
tooltip
;
this
.
_currentUrl
=
{
url
}
?
utm_source
=
devtools
&
utm_medium
=
inspector
-
css
-
compatibility
&
utm_campaign
=
default
;
const
templateNode
=
this
.
_createElement
(
doc
"
template
"
)
;
const
tooltipContainer
=
this
.
_createElement
(
doc
"
div
"
[
"
devtools
-
tooltip
-
css
-
compatibility
"
]
)
;
tooltipContainer
.
appendChild
(
this
.
_getCompatibilityMessage
(
doc
data
)
)
;
const
browserListContainer
=
this
.
_getBrowserListContainer
(
doc
unsupportedBrowsers
)
;
if
(
browserListContainer
)
{
tooltipContainer
.
appendChild
(
browserListContainer
)
;
}
tooltipContainer
.
appendChild
(
this
.
_getLearnMoreMessage
(
doc
data
)
)
;
templateNode
.
content
.
appendChild
(
tooltipContainer
)
;
this
.
_renderUnsupportedBrowserList
(
tooltipContainer
unsupportedBrowsers
)
;
return
doc
.
importNode
(
templateNode
.
content
true
)
;
}
addTab
(
event
)
{
if
(
event
.
target
.
className
!
=
=
"
link
"
)
{
return
;
}
const
tooltip
=
this
.
_currentTooltip
;
tooltip
.
hide
(
)
;
openDocLink
(
this
.
_currentUrl
)
;
}
destroy
(
)
{
this
.
_currentTooltip
=
null
;
this
.
_currentUrl
=
null
;
}
}
module
.
exports
=
CssCompatibilityTooltipHelper
;
