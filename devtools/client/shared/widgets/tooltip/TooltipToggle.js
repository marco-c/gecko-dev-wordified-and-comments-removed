"
use
strict
"
;
const
DEFAULT_TOGGLE_DELAY
=
50
;
function
TooltipToggle
(
tooltip
)
{
this
.
tooltip
=
tooltip
;
this
.
win
=
tooltip
.
doc
.
defaultView
;
this
.
_onMouseMove
=
this
.
_onMouseMove
.
bind
(
this
)
;
this
.
_onMouseOut
=
this
.
_onMouseOut
.
bind
(
this
)
;
this
.
_onTooltipMouseOver
=
this
.
_onTooltipMouseOver
.
bind
(
this
)
;
this
.
_onTooltipMouseOut
=
this
.
_onTooltipMouseOut
.
bind
(
this
)
;
}
module
.
exports
.
TooltipToggle
=
TooltipToggle
;
TooltipToggle
.
prototype
=
{
start
:
function
(
baseNode
targetNodeCb
{
toggleDelay
=
DEFAULT_TOGGLE_DELAY
interactive
=
false
}
=
{
}
)
{
this
.
stop
(
)
;
if
(
!
baseNode
)
{
return
;
}
this
.
_baseNode
=
baseNode
;
this
.
_targetNodeCb
=
targetNodeCb
|
|
(
(
)
=
>
true
)
;
this
.
_toggleDelay
=
toggleDelay
;
this
.
_interactive
=
interactive
;
baseNode
.
addEventListener
(
"
mousemove
"
this
.
_onMouseMove
)
;
baseNode
.
addEventListener
(
"
mouseout
"
this
.
_onMouseOut
)
;
if
(
this
.
_interactive
)
{
this
.
tooltip
.
container
.
addEventListener
(
"
mouseover
"
this
.
_onTooltipMouseOver
)
;
this
.
tooltip
.
container
.
addEventListener
(
"
mouseout
"
this
.
_onTooltipMouseOut
)
;
}
}
stop
:
function
(
)
{
this
.
win
.
clearTimeout
(
this
.
toggleTimer
)
;
if
(
!
this
.
_baseNode
)
{
return
;
}
this
.
_baseNode
.
removeEventListener
(
"
mousemove
"
this
.
_onMouseMove
)
;
this
.
_baseNode
.
removeEventListener
(
"
mouseout
"
this
.
_onMouseOut
)
;
if
(
this
.
_interactive
)
{
this
.
tooltip
.
container
.
removeEventListener
(
"
mouseover
"
this
.
_onTooltipMouseOver
)
;
this
.
tooltip
.
container
.
removeEventListener
(
"
mouseout
"
this
.
_onTooltipMouseOut
)
;
}
this
.
_baseNode
=
null
;
this
.
_targetNodeCb
=
null
;
this
.
_lastHovered
=
null
;
}
_onMouseMove
:
function
(
event
)
{
if
(
event
.
target
!
=
=
this
.
_lastHovered
)
{
this
.
_lastHovered
=
event
.
target
;
this
.
win
.
clearTimeout
(
this
.
toggleTimer
)
;
this
.
toggleTimer
=
this
.
win
.
setTimeout
(
(
)
=
>
{
this
.
tooltip
.
hide
(
)
;
this
.
isValidHoverTarget
(
event
.
target
)
.
then
(
target
=
>
{
if
(
target
=
=
=
null
|
|
!
this
.
_baseNode
)
{
return
;
}
this
.
tooltip
.
show
(
target
)
;
}
reason
=
>
{
console
.
error
(
"
isValidHoverTarget
rejected
with
unexpected
reason
:
"
)
;
console
.
error
(
reason
)
;
}
)
;
}
this
.
_toggleDelay
)
;
}
}
async
isValidHoverTarget
(
target
)
{
const
res
=
await
this
.
_targetNodeCb
(
target
this
.
tooltip
)
;
if
(
res
)
{
return
res
.
nodeName
?
res
:
target
;
}
return
null
;
}
_onMouseOut
:
function
(
event
)
{
if
(
event
&
&
this
.
_baseNode
&
&
this
.
_baseNode
.
contains
(
event
.
relatedTarget
)
)
{
return
;
}
this
.
_lastHovered
=
null
;
this
.
win
.
clearTimeout
(
this
.
toggleTimer
)
;
this
.
toggleTimer
=
this
.
win
.
setTimeout
(
(
)
=
>
{
this
.
tooltip
.
hide
(
)
;
}
this
.
_toggleDelay
)
;
}
_onTooltipMouseOver
(
)
{
this
.
win
.
clearTimeout
(
this
.
toggleTimer
)
;
}
_onTooltipMouseOut
(
)
{
this
.
win
.
clearTimeout
(
this
.
toggleTimer
)
;
this
.
toggleTimer
=
this
.
win
.
setTimeout
(
(
)
=
>
{
this
.
tooltip
.
hide
(
)
;
}
this
.
_toggleDelay
)
;
}
destroy
:
function
(
)
{
this
.
stop
(
)
;
}
}
;
