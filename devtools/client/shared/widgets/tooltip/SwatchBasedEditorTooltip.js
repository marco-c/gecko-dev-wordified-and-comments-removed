"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
KeyShortcuts
=
require
(
"
devtools
/
client
/
shared
/
key
-
shortcuts
"
)
;
const
{
HTMLTooltip
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
HTMLTooltip
"
)
;
const
InlineTooltip
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
InlineTooltip
"
)
;
const
INLINE_TOOLTIP_CLASS
=
"
inline
-
tooltip
-
container
"
;
function
SwatchBasedEditorTooltip
(
document
useInline
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
useInline
=
useInline
;
if
(
useInline
)
{
this
.
tooltip
=
new
InlineTooltip
(
document
)
;
}
else
{
this
.
tooltip
=
new
HTMLTooltip
(
document
{
type
:
"
arrow
"
consumeOutsideClicks
:
true
useXulWrapper
:
true
}
)
;
}
this
.
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
tooltip
.
topWindow
}
)
;
this
.
shortcuts
.
on
(
"
Escape
"
(
name
event
)
=
>
{
if
(
!
this
.
tooltip
.
isVisible
(
)
)
{
return
;
}
this
.
revert
(
)
;
this
.
hide
(
)
;
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
}
)
;
this
.
shortcuts
.
on
(
"
Return
"
(
name
event
)
=
>
{
if
(
!
this
.
tooltip
.
isVisible
(
)
)
{
return
;
}
this
.
commit
(
)
;
this
.
hide
(
)
;
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
}
)
;
this
.
swatches
=
new
Map
(
)
;
this
.
activeSwatch
=
null
;
this
.
_onSwatchClick
=
this
.
_onSwatchClick
.
bind
(
this
)
;
}
SwatchBasedEditorTooltip
.
prototype
=
{
isVisible
:
function
(
)
{
return
this
.
tooltip
.
isVisible
(
)
;
}
isEditing
:
function
(
)
{
return
this
.
isVisible
(
)
;
}
show
:
function
(
)
{
let
tooltipAnchor
=
this
.
useInline
?
this
.
activeSwatch
.
closest
(
.
{
INLINE_TOOLTIP_CLASS
}
)
:
this
.
activeSwatch
;
if
(
tooltipAnchor
)
{
let
onShown
=
this
.
tooltip
.
once
(
"
shown
"
)
;
this
.
tooltip
.
show
(
tooltipAnchor
"
topcenter
bottomleft
"
)
;
this
.
tooltip
.
once
(
"
hidden
"
(
)
=
>
{
if
(
!
this
.
_reverted
&
&
!
this
.
eyedropperOpen
)
{
this
.
commit
(
)
;
}
this
.
_reverted
=
false
;
if
(
!
this
.
eyedropperOpen
)
{
this
.
activeSwatch
=
null
;
}
}
)
;
return
onShown
;
}
return
Promise
.
resolve
(
)
;
}
hide
:
function
(
)
{
this
.
tooltip
.
hide
(
)
;
}
addSwatch
:
function
(
swatchEl
callbacks
=
{
}
)
{
if
(
!
callbacks
.
onShow
)
{
callbacks
.
onShow
=
function
(
)
{
}
;
}
if
(
!
callbacks
.
onPreview
)
{
callbacks
.
onPreview
=
function
(
)
{
}
;
}
if
(
!
callbacks
.
onRevert
)
{
callbacks
.
onRevert
=
function
(
)
{
}
;
}
if
(
!
callbacks
.
onCommit
)
{
callbacks
.
onCommit
=
function
(
)
{
}
;
}
this
.
swatches
.
set
(
swatchEl
{
callbacks
:
callbacks
}
)
;
swatchEl
.
addEventListener
(
"
click
"
this
.
_onSwatchClick
)
;
}
removeSwatch
:
function
(
swatchEl
)
{
if
(
this
.
swatches
.
has
(
swatchEl
)
)
{
if
(
this
.
activeSwatch
=
=
=
swatchEl
)
{
this
.
hide
(
)
;
this
.
activeSwatch
=
null
;
}
swatchEl
.
removeEventListener
(
"
click
"
this
.
_onSwatchClick
)
;
this
.
swatches
.
delete
(
swatchEl
)
;
}
}
_onSwatchClick
:
function
(
event
)
{
let
swatch
=
this
.
swatches
.
get
(
event
.
target
)
;
if
(
event
.
shiftKey
)
{
event
.
stopPropagation
(
)
;
return
;
}
if
(
swatch
)
{
this
.
activeSwatch
=
event
.
target
;
this
.
show
(
)
;
swatch
.
callbacks
.
onShow
(
)
;
event
.
stopPropagation
(
)
;
}
}
preview
:
function
(
value
)
{
if
(
this
.
activeSwatch
)
{
let
swatch
=
this
.
swatches
.
get
(
this
.
activeSwatch
)
;
swatch
.
callbacks
.
onPreview
(
value
)
;
}
}
revert
:
function
(
)
{
if
(
this
.
activeSwatch
)
{
this
.
_reverted
=
true
;
let
swatch
=
this
.
swatches
.
get
(
this
.
activeSwatch
)
;
this
.
tooltip
.
once
(
"
hidden
"
(
)
=
>
{
swatch
.
callbacks
.
onRevert
(
)
;
}
)
;
}
}
commit
:
function
(
)
{
if
(
this
.
activeSwatch
)
{
let
swatch
=
this
.
swatches
.
get
(
this
.
activeSwatch
)
;
swatch
.
callbacks
.
onCommit
(
)
;
}
}
destroy
:
function
(
)
{
this
.
swatches
.
clear
(
)
;
this
.
activeSwatch
=
null
;
this
.
tooltip
.
off
(
"
keypress
"
this
.
_onTooltipKeypress
)
;
this
.
tooltip
.
destroy
(
)
;
this
.
shortcuts
.
destroy
(
)
;
}
}
;
module
.
exports
=
SwatchBasedEditorTooltip
;
