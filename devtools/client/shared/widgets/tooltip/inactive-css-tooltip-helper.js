"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
openDocLink
"
"
resource
:
/
/
devtools
/
client
/
shared
/
link
.
js
"
true
)
;
class
InactiveCssTooltipHelper
{
constructor
(
)
{
this
.
addTab
=
this
.
addTab
.
bind
(
this
)
;
}
async
setContent
(
data
tooltip
)
{
const
fragment
=
this
.
getTemplate
(
data
tooltip
)
;
tooltip
.
panel
.
addEventListener
(
"
click
"
this
.
addTab
)
;
tooltip
.
once
(
"
hidden
"
(
)
=
>
{
tooltip
.
panel
.
removeEventListener
(
"
click
"
this
.
addTab
)
;
}
)
;
await
tooltip
.
setLocalizedFragment
(
fragment
{
width
:
267
}
)
;
}
getTemplate
(
data
tooltip
)
{
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
{
fixId
msgId
property
display
lineCount
learnMoreURL
}
=
data
;
const
{
doc
}
=
tooltip
;
const
documentUrl
=
new
URL
(
learnMoreURL
|
|
https
:
/
/
developer
.
mozilla
.
org
/
docs
/
Web
/
CSS
/
{
property
}
)
;
this
.
_currentTooltip
=
tooltip
;
const
{
searchParams
}
=
documentUrl
;
searchParams
.
append
(
"
utm_source
"
"
devtools
"
)
;
searchParams
.
append
(
"
utm_medium
"
"
inspector
-
inactive
-
css
"
)
;
this
.
_currentUrl
=
documentUrl
.
toString
(
)
;
const
templateNode
=
doc
.
createElementNS
(
XHTML_NS
"
template
"
)
;
templateNode
.
innerHTML
=
<
div
class
=
"
devtools
-
tooltip
-
inactive
-
css
"
>
<
p
data
-
l10n
-
id
=
"
{
msgId
}
"
data
-
l10n
-
args
=
'
{
JSON
.
stringify
(
{
property
display
lineCount
}
)
}
'
>
<
/
p
>
<
p
data
-
l10n
-
id
=
"
{
fixId
}
"
>
<
span
data
-
l10n
-
name
=
"
link
"
class
=
"
link
"
>
<
/
span
>
<
/
p
>
<
/
div
>
;
return
doc
.
importNode
(
templateNode
.
content
true
)
;
}
addTab
(
event
)
{
if
(
event
.
target
.
className
!
=
=
"
link
"
)
{
return
;
}
const
tooltip
=
this
.
_currentTooltip
;
tooltip
.
hide
(
)
;
openDocLink
(
this
.
_currentUrl
)
;
}
destroy
(
)
{
this
.
_currentTooltip
=
null
;
this
.
_currentUrl
=
null
;
}
}
module
.
exports
=
InactiveCssTooltipHelper
;
