"
use
strict
"
;
const
{
CubicBezierWidget
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
CubicBezierWidget
"
)
;
const
SwatchBasedEditorTooltip
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
SwatchBasedEditorTooltip
"
)
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
class
SwatchCubicBezierTooltip
extends
SwatchBasedEditorTooltip
{
constructor
(
document
)
{
super
(
document
)
;
this
.
widget
=
this
.
setCubicBezierContent
(
[
0
0
1
1
]
)
;
this
.
_onUpdate
=
this
.
_onUpdate
.
bind
(
this
)
;
}
async
setCubicBezierContent
(
bezier
)
{
const
{
doc
}
=
this
.
tooltip
;
this
.
tooltip
.
panel
.
innerHTML
=
"
"
;
const
container
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
container
.
className
=
"
cubic
-
bezier
-
container
"
;
this
.
tooltip
.
panel
.
appendChild
(
container
)
;
this
.
tooltip
.
setContentSize
(
{
width
:
510
height
:
370
}
)
;
await
this
.
tooltip
.
once
(
"
shown
"
)
;
return
new
CubicBezierWidget
(
container
bezier
)
;
}
async
show
(
)
{
await
super
.
show
(
)
;
if
(
this
.
activeSwatch
)
{
this
.
currentBezierValue
=
this
.
activeSwatch
.
nextSibling
;
this
.
widget
.
then
(
widget
=
>
{
widget
.
off
(
"
updated
"
this
.
_onUpdate
)
;
widget
.
cssCubicBezierValue
=
this
.
currentBezierValue
.
textContent
;
widget
.
on
(
"
updated
"
this
.
_onUpdate
)
;
this
.
emit
(
"
ready
"
)
;
}
)
;
}
}
_onUpdate
(
bezier
)
{
if
(
!
this
.
activeSwatch
)
{
return
;
}
this
.
currentBezierValue
.
textContent
=
bezier
+
"
"
;
this
.
preview
(
bezier
+
"
"
)
;
}
destroy
(
)
{
super
.
destroy
(
)
;
this
.
currentBezierValue
=
null
;
this
.
widget
.
then
(
widget
=
>
{
widget
.
off
(
"
updated
"
this
.
_onUpdate
)
;
widget
.
destroy
(
)
;
}
)
;
}
}
module
.
exports
=
SwatchCubicBezierTooltip
;
