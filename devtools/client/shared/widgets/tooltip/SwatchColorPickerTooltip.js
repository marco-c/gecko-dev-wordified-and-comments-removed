"
use
strict
"
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
colorUtils
}
=
require
(
"
devtools
/
shared
/
css
/
color
"
)
;
const
{
Spectrum
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
Spectrum
"
)
;
const
SwatchBasedEditorTooltip
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
SwatchBasedEditorTooltip
"
)
;
const
Heritage
=
require
(
"
sdk
/
core
/
heritage
"
)
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
function
SwatchColorPickerTooltip
(
toolbox
inspector
)
{
let
stylesheet
=
"
chrome
:
/
/
devtools
/
content
/
shared
/
widgets
/
spectrum
.
css
"
;
SwatchBasedEditorTooltip
.
call
(
this
toolbox
stylesheet
)
;
this
.
inspector
=
inspector
;
this
.
spectrum
=
this
.
setColorPickerContent
(
[
0
0
0
1
]
)
;
this
.
_onSpectrumColorChange
=
this
.
_onSpectrumColorChange
.
bind
(
this
)
;
this
.
_openEyeDropper
=
this
.
_openEyeDropper
.
bind
(
this
)
;
}
SwatchColorPickerTooltip
.
prototype
=
Heritage
.
extend
(
SwatchBasedEditorTooltip
.
prototype
{
setColorPickerContent
:
function
(
color
)
{
let
{
doc
}
=
this
.
tooltip
;
let
container
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
container
.
id
=
"
spectrum
-
tooltip
"
;
let
spectrumNode
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
spectrumNode
.
id
=
"
spectrum
"
;
container
.
appendChild
(
spectrumNode
)
;
let
eyedropper
=
doc
.
createElementNS
(
XHTML_NS
"
button
"
)
;
eyedropper
.
id
=
"
eyedropper
-
button
"
;
eyedropper
.
className
=
"
devtools
-
button
"
;
container
.
appendChild
(
eyedropper
)
;
this
.
tooltip
.
setContent
(
container
{
width
:
218
height
:
224
}
)
;
let
spectrum
=
new
Spectrum
(
spectrumNode
color
)
;
this
.
tooltip
.
once
(
"
shown
"
(
)
=
>
{
spectrum
.
show
(
)
;
}
)
;
return
spectrum
;
}
show
:
Task
.
async
(
function
*
(
)
{
yield
SwatchBasedEditorTooltip
.
prototype
.
show
.
call
(
this
)
;
if
(
this
.
activeSwatch
)
{
this
.
currentSwatchColor
=
this
.
activeSwatch
.
nextSibling
;
this
.
_originalColor
=
this
.
currentSwatchColor
.
textContent
;
let
color
=
this
.
activeSwatch
.
style
.
backgroundColor
;
this
.
spectrum
.
off
(
"
changed
"
this
.
_onSpectrumColorChange
)
;
this
.
spectrum
.
rgb
=
this
.
_colorToRgba
(
color
)
;
this
.
spectrum
.
on
(
"
changed
"
this
.
_onSpectrumColorChange
)
;
this
.
spectrum
.
updateUI
(
)
;
}
let
{
target
}
=
this
.
inspector
;
target
.
actorHasMethod
(
"
inspector
"
"
pickColorFromPage
"
)
.
then
(
value
=
>
{
let
tooltipDoc
=
this
.
tooltip
.
doc
;
let
eyeButton
=
tooltipDoc
.
querySelector
(
"
#
eyedropper
-
button
"
)
;
if
(
value
&
&
this
.
inspector
.
selection
.
nodeFront
.
isInHTMLDocument
)
{
eyeButton
.
addEventListener
(
"
click
"
this
.
_openEyeDropper
)
;
}
else
{
eyeButton
.
style
.
display
=
"
none
"
;
}
this
.
emit
(
"
ready
"
)
;
}
e
=
>
console
.
error
(
e
)
)
;
}
)
_onSpectrumColorChange
:
function
(
event
rgba
cssColor
)
{
this
.
_selectColor
(
cssColor
)
;
}
_selectColor
:
function
(
color
)
{
if
(
this
.
activeSwatch
)
{
this
.
activeSwatch
.
style
.
backgroundColor
=
color
;
this
.
activeSwatch
.
parentNode
.
dataset
.
color
=
color
;
color
=
this
.
_toDefaultType
(
color
)
;
this
.
currentSwatchColor
.
textContent
=
color
;
this
.
preview
(
color
)
;
if
(
this
.
eyedropperOpen
)
{
this
.
commit
(
)
;
}
}
}
_openEyeDropper
:
function
(
)
{
let
{
inspector
toolbox
telemetry
}
=
this
.
inspector
;
telemetry
.
toolOpened
(
"
pickereyedropper
"
)
;
inspector
.
pickColorFromPage
(
toolbox
{
copyOnSelect
:
false
}
)
.
then
(
(
)
=
>
{
this
.
eyedropperOpen
=
true
;
this
.
hide
(
)
;
this
.
tooltip
.
emit
(
"
eyedropper
-
opened
"
)
;
}
e
=
>
console
.
error
(
e
)
)
;
inspector
.
once
(
"
color
-
picked
"
color
=
>
{
toolbox
.
win
.
focus
(
)
;
this
.
_selectColor
(
color
)
;
this
.
_onEyeDropperDone
(
)
;
}
)
;
inspector
.
once
(
"
color
-
pick
-
canceled
"
(
)
=
>
{
this
.
_onEyeDropperDone
(
)
;
}
)
;
}
_onEyeDropperDone
:
function
(
)
{
this
.
eyedropperOpen
=
false
;
this
.
activeSwatch
=
null
;
}
_colorToRgba
:
function
(
color
)
{
color
=
new
colorUtils
.
CssColor
(
color
)
;
let
rgba
=
color
.
_getRGBATuple
(
)
;
return
[
rgba
.
r
rgba
.
g
rgba
.
b
rgba
.
a
]
;
}
_toDefaultType
:
function
(
color
)
{
let
colorObj
=
new
colorUtils
.
CssColor
(
color
)
;
colorObj
.
setAuthoredUnitFromColor
(
this
.
_originalColor
)
;
return
colorObj
.
toString
(
)
;
}
destroy
:
function
(
)
{
SwatchBasedEditorTooltip
.
prototype
.
destroy
.
call
(
this
)
;
this
.
inspector
=
null
;
this
.
currentSwatchColor
=
null
;
this
.
spectrum
.
off
(
"
changed
"
this
.
_onSpectrumColorChange
)
;
this
.
spectrum
.
destroy
(
)
;
}
}
)
;
module
.
exports
=
SwatchColorPickerTooltip
;
