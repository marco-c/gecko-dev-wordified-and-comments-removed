"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
colorUtils
}
=
require
(
"
devtools
/
shared
/
css
/
color
"
)
;
const
{
ColorWidget
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
ColorWidget
"
)
;
const
{
Spectrum
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
Spectrum
"
)
;
const
SwatchBasedEditorTooltip
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
SwatchBasedEditorTooltip
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
inspector
.
properties
"
)
;
const
colorWidgetPref
=
"
devtools
.
inspector
.
colorWidget
.
enabled
"
;
const
NEW_COLOR_WIDGET
=
Services
.
prefs
.
getBoolPref
(
colorWidgetPref
)
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
class
SwatchColorPickerTooltip
extends
SwatchBasedEditorTooltip
{
constructor
(
document
inspector
{
supportsCssColor4ColorFunction
}
)
{
super
(
document
)
;
this
.
inspector
=
inspector
;
this
.
spectrum
=
this
.
setColorPickerContent
(
[
0
0
0
1
]
)
;
this
.
_onSpectrumColorChange
=
this
.
_onSpectrumColorChange
.
bind
(
this
)
;
this
.
_openEyeDropper
=
this
.
_openEyeDropper
.
bind
(
this
)
;
this
.
cssColor4
=
supportsCssColor4ColorFunction
(
)
;
}
setColorPickerContent
(
color
)
{
let
{
doc
}
=
this
.
tooltip
;
let
container
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
container
.
id
=
"
spectrum
-
tooltip
"
;
let
widget
;
let
node
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
if
(
NEW_COLOR_WIDGET
)
{
node
.
id
=
"
colorwidget
"
;
container
.
appendChild
(
node
)
;
widget
=
new
ColorWidget
(
node
color
)
;
this
.
tooltip
.
setContent
(
container
{
width
:
218
height
:
320
}
)
;
}
else
{
node
.
id
=
"
spectrum
"
;
container
.
appendChild
(
node
)
;
widget
=
new
Spectrum
(
node
color
)
;
this
.
tooltip
.
setContent
(
container
{
width
:
218
height
:
224
}
)
;
}
widget
.
inspector
=
this
.
inspector
;
let
eyedropper
=
doc
.
createElementNS
(
XHTML_NS
"
button
"
)
;
eyedropper
.
id
=
"
eyedropper
-
button
"
;
eyedropper
.
className
=
"
devtools
-
button
"
;
eyedropper
.
style
.
pointerEvents
=
"
auto
"
;
container
.
appendChild
(
eyedropper
)
;
this
.
tooltip
.
once
(
"
shown
"
(
)
=
>
{
widget
.
show
(
)
;
}
)
;
return
widget
;
}
async
show
(
)
{
let
name
=
this
.
activeSwatch
.
dataset
.
propertyName
;
if
(
this
.
isContrastCompatible
=
=
=
undefined
)
{
let
target
=
this
.
inspector
.
target
;
this
.
isContrastCompatible
=
await
target
.
actorHasMethod
(
"
domnode
"
"
getClosestBackgroundColor
"
)
;
}
this
.
spectrum
.
contrastEnabled
=
(
name
=
=
=
"
color
"
)
&
&
this
.
isContrastCompatible
;
await
super
.
show
(
)
;
if
(
this
.
activeSwatch
)
{
this
.
currentSwatchColor
=
this
.
activeSwatch
.
nextSibling
;
this
.
_originalColor
=
this
.
currentSwatchColor
.
textContent
;
let
color
=
this
.
activeSwatch
.
style
.
backgroundColor
;
this
.
spectrum
.
off
(
"
changed
"
this
.
_onSpectrumColorChange
)
;
this
.
spectrum
.
rgb
=
this
.
_colorToRgba
(
color
)
;
this
.
spectrum
.
on
(
"
changed
"
this
.
_onSpectrumColorChange
)
;
this
.
spectrum
.
updateUI
(
)
;
}
let
eyeButton
=
this
.
tooltip
.
container
.
querySelector
(
"
#
eyedropper
-
button
"
)
;
let
canShowEyeDropper
=
await
this
.
inspector
.
supportsEyeDropper
(
)
;
if
(
canShowEyeDropper
)
{
eyeButton
.
disabled
=
false
;
eyeButton
.
removeAttribute
(
"
title
"
)
;
eyeButton
.
addEventListener
(
"
click
"
this
.
_openEyeDropper
)
;
}
else
{
eyeButton
.
disabled
=
true
;
eyeButton
.
title
=
L10N
.
getStr
(
"
eyedropper
.
disabled
.
title
"
)
;
}
this
.
emit
(
"
ready
"
)
;
}
_onSpectrumColorChange
(
event
rgba
cssColor
)
{
this
.
_selectColor
(
cssColor
)
;
}
_selectColor
(
color
)
{
if
(
this
.
activeSwatch
)
{
this
.
activeSwatch
.
style
.
backgroundColor
=
color
;
this
.
activeSwatch
.
parentNode
.
dataset
.
color
=
color
;
color
=
this
.
_toDefaultType
(
color
)
;
this
.
currentSwatchColor
.
textContent
=
color
;
this
.
preview
(
color
)
;
if
(
this
.
eyedropperOpen
)
{
this
.
commit
(
)
;
}
}
}
onTooltipHidden
(
)
{
if
(
this
.
eyedropperOpen
)
{
return
;
}
super
.
onTooltipHidden
(
)
;
}
_openEyeDropper
(
)
{
let
{
inspector
toolbox
telemetry
}
=
this
.
inspector
;
telemetry
.
toolOpened
(
"
pickereyedropper
"
)
;
toolbox
.
highlighterUtils
.
cancelPicker
(
)
;
inspector
.
pickColorFromPage
(
toolbox
{
copyOnSelect
:
false
}
)
.
then
(
(
)
=
>
{
this
.
eyedropperOpen
=
true
;
this
.
hide
(
)
;
this
.
tooltip
.
emit
(
"
eyedropper
-
opened
"
)
;
}
console
.
error
)
;
inspector
.
once
(
"
color
-
picked
"
color
=
>
{
toolbox
.
win
.
focus
(
)
;
this
.
_selectColor
(
color
)
;
this
.
_onEyeDropperDone
(
)
;
}
)
;
inspector
.
once
(
"
color
-
pick
-
canceled
"
(
)
=
>
{
this
.
_onEyeDropperDone
(
)
;
}
)
;
}
_onEyeDropperDone
(
)
{
this
.
eyedropperOpen
=
false
;
this
.
activeSwatch
=
null
;
}
_colorToRgba
(
color
)
{
color
=
new
colorUtils
.
CssColor
(
color
this
.
cssColor4
)
;
let
rgba
=
color
.
getRGBATuple
(
)
;
return
[
rgba
.
r
rgba
.
g
rgba
.
b
rgba
.
a
]
;
}
_toDefaultType
(
color
)
{
let
colorObj
=
new
colorUtils
.
CssColor
(
color
)
;
colorObj
.
setAuthoredUnitFromColor
(
this
.
_originalColor
this
.
cssColor4
)
;
return
colorObj
.
toString
(
)
;
}
isEditing
(
)
{
return
this
.
tooltip
.
isVisible
(
)
|
|
this
.
eyedropperOpen
;
}
destroy
(
)
{
super
.
destroy
(
)
;
this
.
inspector
=
null
;
this
.
currentSwatchColor
=
null
;
this
.
spectrum
.
off
(
"
changed
"
this
.
_onSpectrumColorChange
)
;
this
.
spectrum
.
destroy
(
)
;
}
}
module
.
exports
=
SwatchColorPickerTooltip
;
