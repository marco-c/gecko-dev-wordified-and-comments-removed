"
use
strict
"
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
function
setVariableTooltip
(
tooltip
doc
{
computed
topSectionText
registeredProperty
startingStyle
}
)
{
const
div
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
div
.
classList
.
add
(
"
devtools
-
monospace
"
"
devtools
-
tooltip
-
css
-
variable
"
)
;
const
valueEl
=
doc
.
createElementNS
(
XHTML_NS
"
section
"
)
;
valueEl
.
classList
.
add
(
"
variable
-
value
"
)
;
valueEl
.
append
(
doc
.
createTextNode
(
topSectionText
)
)
;
div
.
appendChild
(
valueEl
)
;
if
(
typeof
computed
!
=
=
"
undefined
"
)
{
const
section
=
doc
.
createElementNS
(
XHTML_NS
"
section
"
)
;
section
.
classList
.
add
(
"
computed
"
"
variable
-
tooltip
-
section
"
)
;
const
h2
=
doc
.
createElementNS
(
XHTML_NS
"
h2
"
)
;
h2
.
append
(
doc
.
createTextNode
(
"
computed
value
"
)
)
;
const
computedValueEl
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
computedValueEl
.
append
(
doc
.
createTextNode
(
computed
)
)
;
section
.
append
(
h2
computedValueEl
)
;
div
.
appendChild
(
section
)
;
}
if
(
typeof
startingStyle
!
=
=
"
undefined
"
)
{
const
section
=
doc
.
createElementNS
(
XHTML_NS
"
section
"
)
;
section
.
classList
.
add
(
"
starting
-
style
"
"
variable
-
tooltip
-
section
"
)
;
const
h2
=
doc
.
createElementNS
(
XHTML_NS
"
h2
"
)
;
h2
.
append
(
doc
.
createTextNode
(
"
starting
-
style
"
)
)
;
const
startingStyleValue
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
startingStyleValue
.
append
(
doc
.
createTextNode
(
startingStyle
)
)
;
section
.
append
(
h2
startingStyleValue
)
;
div
.
appendChild
(
section
)
;
}
if
(
registeredProperty
?
.
syntax
)
{
const
section
=
doc
.
createElementNS
(
XHTML_NS
"
section
"
)
;
section
.
classList
.
add
(
"
registered
-
property
"
"
variable
-
tooltip
-
section
"
)
;
const
h2
=
doc
.
createElementNS
(
XHTML_NS
"
h2
"
)
;
h2
.
append
(
doc
.
createTextNode
(
"
property
"
)
)
;
const
dl
=
doc
.
createElementNS
(
XHTML_NS
"
dl
"
)
;
const
addProperty
=
(
label
value
lineBreak
=
true
)
=
>
{
const
dt
=
doc
.
createElementNS
(
XHTML_NS
"
dt
"
)
;
dt
.
append
(
doc
.
createTextNode
(
label
)
)
;
const
dd
=
doc
.
createElementNS
(
XHTML_NS
"
dd
"
)
;
dd
.
append
(
doc
.
createTextNode
(
value
)
)
;
dl
.
append
(
dt
dd
)
;
if
(
lineBreak
)
{
dl
.
append
(
doc
.
createElementNS
(
XHTML_NS
"
br
"
)
)
;
}
}
;
const
hasInitialValue
=
!
!
registeredProperty
.
initialValue
;
addProperty
(
"
syntax
:
"
"
{
registeredProperty
.
syntax
}
"
)
;
addProperty
(
"
inherits
:
"
registeredProperty
.
inherits
hasInitialValue
)
;
if
(
hasInitialValue
)
{
addProperty
(
"
initial
-
value
:
"
registeredProperty
.
initialValue
false
)
;
}
section
.
append
(
h2
dl
)
;
div
.
appendChild
(
section
)
;
}
tooltip
.
panel
.
innerHTML
=
"
"
;
tooltip
.
panel
.
appendChild
(
div
)
;
tooltip
.
setContentSize
(
{
width
:
"
auto
"
height
:
"
auto
"
}
)
;
}
module
.
exports
.
setVariableTooltip
=
setVariableTooltip
;
