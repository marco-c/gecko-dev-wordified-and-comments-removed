"
use
strict
"
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
inspector
.
properties
"
)
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
MAX_DIMENSION
=
200
;
const
CONTAINER_MIN_WIDTH
=
100
;
const
LABEL_HEIGHT
=
20
;
const
IMAGE_PADDING
=
4
;
function
getImageDimensions
(
doc
imageUrl
)
{
return
new
Promise
(
resolve
=
>
{
const
imgObj
=
new
doc
.
defaultView
.
Image
(
)
;
imgObj
.
onload
=
(
)
=
>
{
imgObj
.
onload
=
null
;
const
{
naturalWidth
naturalHeight
}
=
imgObj
;
resolve
(
{
naturalWidth
naturalHeight
}
)
;
}
;
imgObj
.
src
=
imageUrl
;
}
)
;
}
function
setImageTooltip
(
tooltip
doc
imageUrl
options
)
{
let
{
naturalWidth
naturalHeight
hideDimensionLabel
hideCheckeredBackground
maxDim
}
=
options
;
maxDim
=
maxDim
|
|
MAX_DIMENSION
;
let
imgHeight
=
naturalHeight
;
let
imgWidth
=
naturalWidth
;
if
(
imgHeight
>
maxDim
|
|
imgWidth
>
maxDim
)
{
const
scale
=
maxDim
/
Math
.
max
(
imgHeight
imgWidth
)
;
imgHeight
=
Math
.
floor
(
scale
*
naturalHeight
)
;
imgWidth
=
Math
.
ceil
(
scale
*
naturalWidth
)
;
}
let
imageClass
=
"
"
;
if
(
!
hideCheckeredBackground
)
{
imageClass
=
"
devtools
-
tooltip
-
tiles
"
;
}
const
div
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
div
.
style
.
cssText
=
height
:
100
%
;
min
-
width
:
100px
;
display
:
flex
;
flex
-
direction
:
column
;
text
-
align
:
center
;
;
let
html
=
<
div
style
=
"
flex
:
1
;
display
:
flex
;
padding
:
{
IMAGE_PADDING
}
px
;
align
-
items
:
center
;
justify
-
content
:
center
;
min
-
height
:
1px
;
"
>
<
img
class
=
"
{
imageClass
}
"
style
=
"
height
:
{
imgHeight
}
px
;
max
-
height
:
100
%
;
"
src
=
"
{
encodeURI
(
imageUrl
)
}
"
/
>
<
/
div
>
;
if
(
!
hideDimensionLabel
)
{
const
label
=
naturalWidth
+
"
\
u00D7
"
+
naturalHeight
;
html
+
=
<
div
style
=
"
height
:
{
LABEL_HEIGHT
}
px
;
text
-
align
:
center
;
"
>
<
span
class
=
"
theme
-
comment
devtools
-
tooltip
-
caption
"
>
{
label
}
<
/
span
>
<
/
div
>
;
}
div
.
innerHTML
=
html
;
let
height
=
imgHeight
+
2
*
IMAGE_PADDING
;
if
(
!
hideDimensionLabel
)
{
height
+
=
LABEL_HEIGHT
;
}
const
width
=
Math
.
max
(
CONTAINER_MIN_WIDTH
imgWidth
+
2
*
IMAGE_PADDING
)
;
tooltip
.
panel
.
innerHTML
=
"
"
;
tooltip
.
panel
.
appendChild
(
div
)
;
tooltip
.
setContentSize
(
{
width
height
}
)
;
}
function
setBrokenImageTooltip
(
tooltip
doc
)
{
const
div
=
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
div
.
className
=
"
theme
-
comment
devtools
-
tooltip
-
image
-
broken
"
;
const
message
=
L10N
.
getStr
(
"
previewTooltip
.
image
.
brokenImage
"
)
;
div
.
textContent
=
message
;
tooltip
.
panel
.
innerHTML
=
"
"
;
tooltip
.
panel
.
appendChild
(
div
)
;
tooltip
.
setContentSize
(
{
width
:
"
auto
"
height
:
"
auto
"
}
)
;
}
module
.
exports
.
getImageDimensions
=
getImageDimensions
;
module
.
exports
.
setImageTooltip
=
setImageTooltip
;
module
.
exports
.
setBrokenImageTooltip
=
setBrokenImageTooltip
;
