"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
IFRAME_URL
=
"
chrome
:
/
/
devtools
/
content
/
shared
/
widgets
/
tooltip
-
frame
.
xhtml
"
;
const
IFRAME_CONTAINER_ID
=
"
tooltip
-
iframe
-
container
"
;
function
HTMLTooltip
(
toolbox
{
type
=
"
normal
"
autofocus
=
true
consumeOutsideClicks
=
true
}
=
{
}
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
document
=
toolbox
.
doc
;
this
.
type
=
type
;
this
.
autofocus
=
autofocus
;
this
.
consumeOutsideClicks
=
consumeOutsideClicks
;
this
.
topWindow
=
this
.
document
.
defaultView
.
top
;
this
.
_onClick
=
this
.
_onClick
.
bind
(
this
)
;
this
.
container
=
this
.
_createContainer
(
)
;
this
.
containerReady
=
new
Promise
(
resolve
=
>
{
if
(
this
.
_isXUL
(
)
)
{
let
onLoad
=
(
)
=
>
{
this
.
container
.
removeEventListener
(
"
load
"
onLoad
true
)
;
resolve
(
)
;
}
;
this
.
container
.
addEventListener
(
"
load
"
onLoad
true
)
;
this
.
container
.
setAttribute
(
"
src
"
IFRAME_URL
)
;
}
else
{
resolve
(
)
;
}
}
)
;
}
module
.
exports
.
HTMLTooltip
=
HTMLTooltip
;
HTMLTooltip
.
prototype
=
{
position
:
{
TOP
:
"
top
"
BOTTOM
:
"
bottom
"
}
get
parent
(
)
{
if
(
this
.
_isXUL
(
)
)
{
let
win
=
this
.
container
.
contentWindow
.
wrappedJSObject
;
return
win
.
document
.
getElementById
(
IFRAME_CONTAINER_ID
)
;
}
return
this
.
container
;
}
setContent
:
function
(
content
width
height
)
{
this
.
preferredWidth
=
width
;
this
.
preferredHeight
=
height
;
return
this
.
containerReady
.
then
(
(
)
=
>
{
this
.
parent
.
innerHTML
=
"
"
;
this
.
parent
.
appendChild
(
content
)
;
}
)
;
}
show
:
function
(
anchor
{
position
}
=
{
}
)
{
this
.
containerReady
.
then
(
(
)
=
>
{
let
{
top
left
width
height
}
=
this
.
_findBestPosition
(
anchor
position
)
;
if
(
this
.
_isXUL
(
)
)
{
this
.
container
.
setAttribute
(
"
width
"
width
)
;
this
.
container
.
setAttribute
(
"
height
"
height
)
;
}
else
{
this
.
container
.
style
.
width
=
width
+
"
px
"
;
this
.
container
.
style
.
height
=
height
+
"
px
"
;
}
this
.
container
.
style
.
top
=
top
+
"
px
"
;
this
.
container
.
style
.
left
=
left
+
"
px
"
;
this
.
container
.
style
.
display
=
"
block
"
;
if
(
this
.
autofocus
)
{
this
.
container
.
focus
(
)
;
}
this
.
attachEventsTimer
=
this
.
document
.
defaultView
.
setTimeout
(
(
)
=
>
{
this
.
topWindow
.
addEventListener
(
"
click
"
this
.
_onClick
true
)
;
this
.
emit
(
"
shown
"
)
;
}
0
)
;
}
)
;
}
hide
:
function
(
)
{
this
.
document
.
defaultView
.
clearTimeout
(
this
.
attachEventsTimer
)
;
if
(
this
.
isVisible
(
)
)
{
this
.
topWindow
.
removeEventListener
(
"
click
"
this
.
_onClick
true
)
;
this
.
container
.
style
.
display
=
"
none
"
;
this
.
emit
(
"
hidden
"
)
;
}
}
isVisible
:
function
(
)
{
let
win
=
this
.
document
.
defaultView
;
return
win
.
getComputedStyle
(
this
.
container
)
.
display
!
=
"
none
"
;
}
destroy
:
function
(
)
{
this
.
hide
(
)
;
this
.
container
.
remove
(
)
;
}
_createContainer
:
function
(
)
{
let
container
;
if
(
this
.
_isXUL
(
)
)
{
container
=
this
.
document
.
createElementNS
(
XHTML_NS
"
iframe
"
)
;
container
.
classList
.
add
(
"
devtools
-
tooltip
-
iframe
"
)
;
this
.
document
.
querySelector
(
"
window
"
)
.
appendChild
(
container
)
;
}
else
{
container
=
this
.
document
.
createElementNS
(
XHTML_NS
"
div
"
)
;
this
.
document
.
body
.
appendChild
(
container
)
;
}
container
.
classList
.
add
(
"
theme
-
body
"
)
;
container
.
classList
.
add
(
"
devtools
-
htmltooltip
-
container
"
)
;
return
container
;
}
_onClick
:
function
(
e
)
{
if
(
this
.
_isInTooltipContainer
(
e
.
target
)
)
{
return
;
}
this
.
hide
(
)
;
if
(
this
.
consumeOutsideClicks
)
{
e
.
preventDefault
(
)
;
e
.
stopPropagation
(
)
;
}
}
_isInTooltipContainer
:
function
(
node
)
{
let
contentWindow
=
this
.
parent
.
ownerDocument
.
defaultView
;
let
win
=
node
.
ownerDocument
.
defaultView
;
if
(
win
=
=
=
contentWindow
)
{
return
this
.
parent
.
contains
(
node
)
;
}
while
(
win
.
parent
&
&
win
.
parent
!
=
win
)
{
win
=
win
.
parent
;
if
(
win
=
=
=
contentWindow
)
{
return
true
;
}
}
return
false
;
}
_findBestPosition
:
function
(
anchor
position
)
{
let
top
left
;
let
{
TOP
BOTTOM
}
=
this
.
position
;
let
{
left
:
anchorLeft
top
:
anchorTop
height
:
anchorHeight
}
=
this
.
_getRelativeRect
(
anchor
this
.
document
)
;
let
{
bottom
:
docBottom
right
:
docRight
}
=
this
.
document
.
documentElement
.
getBoundingClientRect
(
)
;
let
height
=
this
.
preferredHeight
;
let
availableTop
=
anchorTop
;
let
fitsAbove
=
availableTop
>
=
height
;
let
availableBelow
=
docBottom
-
(
anchorTop
+
anchorHeight
)
;
let
fitsBelow
=
availableBelow
>
=
height
;
let
isPositionSuitable
=
(
fitsAbove
&
&
position
=
=
=
TOP
)
|
|
(
fitsBelow
&
&
position
=
=
=
BOTTOM
)
;
if
(
!
isPositionSuitable
)
{
position
=
availableTop
>
availableBelow
?
TOP
:
BOTTOM
;
}
height
=
Math
.
min
(
height
Math
.
max
(
availableTop
availableBelow
)
)
;
top
=
position
=
=
=
TOP
?
anchorTop
-
height
:
anchorTop
+
anchorHeight
;
let
availableWidth
=
docRight
;
let
width
=
Math
.
min
(
this
.
preferredWidth
availableWidth
)
;
if
(
anchorLeft
+
width
<
=
docRight
)
{
left
=
anchorLeft
;
}
else
{
left
=
docRight
-
width
;
}
return
{
top
left
width
height
}
;
}
_getRelativeRect
:
function
(
node
relativeTo
)
{
let
{
width
height
}
=
node
.
getBoundingClientRect
(
)
;
let
top
=
Infinity
left
=
Infinity
;
let
quads
=
node
.
getBoxQuads
(
{
relativeTo
:
relativeTo
}
)
;
for
(
let
quad
of
quads
)
{
top
=
Math
.
min
(
top
quad
.
bounds
.
top
)
;
left
=
Math
.
min
(
left
quad
.
bounds
.
left
)
;
}
let
right
=
left
+
width
;
let
bottom
=
top
+
height
;
return
{
top
right
bottom
left
width
height
}
;
}
_isXUL
:
function
(
)
{
return
this
.
document
.
documentElement
.
namespaceURI
=
=
=
XUL_NS
;
}
}
;
