"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
TooltipToggle
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
TooltipToggle
"
)
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
POSITION
=
{
TOP
:
"
top
"
BOTTOM
:
"
bottom
"
}
;
module
.
exports
.
POSITION
=
POSITION
;
const
TYPE
=
{
NORMAL
:
"
normal
"
ARROW
:
"
arrow
"
}
;
module
.
exports
.
TYPE
=
TYPE
;
const
ARROW_WIDTH
=
32
;
const
ARROW_OFFSET
=
20
;
const
EXTRA_HEIGHT
=
{
"
normal
"
:
0
"
arrow
"
:
13
}
;
const
EXTRA_BORDER
=
{
"
normal
"
:
0
"
arrow
"
:
3
}
;
function
HTMLTooltip
(
toolbox
{
type
=
"
normal
"
autofocus
=
false
consumeOutsideClicks
=
true
}
=
{
}
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
doc
=
toolbox
.
doc
;
this
.
type
=
type
;
this
.
autofocus
=
autofocus
;
this
.
consumeOutsideClicks
=
consumeOutsideClicks
;
this
.
topWindow
=
this
.
doc
.
defaultView
.
top
;
this
.
_onClick
=
this
.
_onClick
.
bind
(
this
)
;
this
.
_toggle
=
new
TooltipToggle
(
this
)
;
this
.
startTogglingOnHover
=
this
.
_toggle
.
start
.
bind
(
this
.
_toggle
)
;
this
.
stopTogglingOnHover
=
this
.
_toggle
.
stop
.
bind
(
this
.
_toggle
)
;
this
.
container
=
this
.
_createContainer
(
)
;
if
(
this
.
_isXUL
(
)
)
{
this
.
doc
.
querySelector
(
"
window
"
)
.
appendChild
(
this
.
container
)
;
}
else
{
this
.
doc
.
body
.
appendChild
(
this
.
container
)
;
}
}
module
.
exports
.
HTMLTooltip
=
HTMLTooltip
;
HTMLTooltip
.
prototype
=
{
get
panel
(
)
{
return
this
.
container
.
querySelector
(
"
.
tooltip
-
panel
"
)
;
}
get
arrow
(
)
{
return
this
.
container
.
querySelector
(
"
.
tooltip
-
arrow
"
)
;
}
setContent
:
function
(
content
{
width
height
=
Infinity
}
)
{
let
themeHeight
=
EXTRA_HEIGHT
[
this
.
type
]
+
2
*
EXTRA_BORDER
[
this
.
type
]
;
let
themeWidth
=
2
*
EXTRA_BORDER
[
this
.
type
]
;
this
.
preferredWidth
=
width
+
themeWidth
;
this
.
preferredHeight
=
height
+
themeHeight
;
this
.
panel
.
innerHTML
=
"
"
;
this
.
panel
.
appendChild
(
content
)
;
}
show
:
function
(
anchor
{
position
}
=
{
}
)
{
let
computedPosition
=
this
.
_findBestPosition
(
anchor
position
)
;
let
isTop
=
computedPosition
.
position
=
=
=
POSITION
.
TOP
;
this
.
container
.
classList
.
toggle
(
"
tooltip
-
top
"
isTop
)
;
this
.
container
.
classList
.
toggle
(
"
tooltip
-
bottom
"
!
isTop
)
;
this
.
container
.
style
.
width
=
computedPosition
.
width
+
"
px
"
;
this
.
container
.
style
.
height
=
computedPosition
.
height
+
"
px
"
;
this
.
container
.
style
.
top
=
computedPosition
.
top
+
"
px
"
;
this
.
container
.
style
.
left
=
computedPosition
.
left
+
"
px
"
;
if
(
this
.
type
=
=
=
TYPE
.
ARROW
)
{
this
.
arrow
.
style
.
left
=
computedPosition
.
arrowLeft
+
"
px
"
;
}
this
.
container
.
classList
.
add
(
"
tooltip
-
visible
"
)
;
this
.
_focusedElement
=
this
.
doc
.
activeElement
;
this
.
attachEventsTimer
=
this
.
doc
.
defaultView
.
setTimeout
(
(
)
=
>
{
this
.
_maybeFocusTooltip
(
)
;
this
.
topWindow
.
addEventListener
(
"
click
"
this
.
_onClick
true
)
;
this
.
emit
(
"
shown
"
)
;
}
0
)
;
}
hide
:
function
(
)
{
this
.
doc
.
defaultView
.
clearTimeout
(
this
.
attachEventsTimer
)
;
if
(
!
this
.
isVisible
(
)
)
{
return
;
}
this
.
topWindow
.
removeEventListener
(
"
click
"
this
.
_onClick
true
)
;
this
.
container
.
classList
.
remove
(
"
tooltip
-
visible
"
)
;
this
.
emit
(
"
hidden
"
)
;
let
tooltipHasFocus
=
this
.
container
.
contains
(
this
.
doc
.
activeElement
)
;
if
(
tooltipHasFocus
&
&
this
.
_focusedElement
)
{
this
.
_focusedElement
.
focus
(
)
;
this
.
_focusedElement
=
null
;
}
}
isVisible
:
function
(
)
{
return
this
.
container
.
classList
.
contains
(
"
tooltip
-
visible
"
)
;
}
destroy
:
function
(
)
{
this
.
hide
(
)
;
this
.
container
.
remove
(
)
;
}
_createContainer
:
function
(
)
{
let
container
=
this
.
doc
.
createElementNS
(
XHTML_NS
"
div
"
)
;
container
.
setAttribute
(
"
type
"
this
.
type
)
;
container
.
classList
.
add
(
"
tooltip
-
container
"
)
;
let
html
=
'
<
div
class
=
"
tooltip
-
filler
"
>
<
/
div
>
'
;
html
+
=
'
<
div
class
=
"
tooltip
-
panel
"
>
<
/
div
>
'
;
if
(
this
.
type
=
=
=
TYPE
.
ARROW
)
{
html
+
=
'
<
div
class
=
"
tooltip
-
arrow
"
>
<
/
div
>
'
;
}
container
.
innerHTML
=
html
;
return
container
;
}
_onClick
:
function
(
e
)
{
if
(
this
.
_isInTooltipContainer
(
e
.
target
)
)
{
return
;
}
this
.
hide
(
)
;
if
(
this
.
consumeOutsideClicks
)
{
e
.
preventDefault
(
)
;
e
.
stopPropagation
(
)
;
}
}
_isInTooltipContainer
:
function
(
node
)
{
if
(
this
.
arrow
&
&
this
.
arrow
=
=
=
node
)
{
return
true
;
}
let
tooltipWindow
=
this
.
panel
.
ownerDocument
.
defaultView
;
let
win
=
node
.
ownerDocument
.
defaultView
;
if
(
win
=
=
=
tooltipWindow
)
{
return
this
.
panel
.
contains
(
node
)
;
}
while
(
win
.
parent
&
&
win
.
parent
!
=
win
)
{
if
(
win
.
parent
=
=
=
tooltipWindow
)
{
return
this
.
panel
.
contains
(
win
.
frameElement
)
;
}
win
=
win
.
parent
;
}
return
false
;
}
_findBestPosition
:
function
(
anchor
position
)
{
let
{
TOP
BOTTOM
}
=
POSITION
;
let
{
left
:
anchorLeft
top
:
anchorTop
height
:
anchorHeight
width
:
anchorWidth
}
=
this
.
_getRelativeRect
(
anchor
this
.
doc
)
;
let
{
bottom
:
docBottom
right
:
docRight
}
=
this
.
doc
.
documentElement
.
getBoundingClientRect
(
)
;
let
availableTop
=
anchorTop
;
let
availableBottom
=
docBottom
-
(
anchorTop
+
anchorHeight
)
;
let
keepPosition
=
false
;
if
(
position
=
=
=
TOP
)
{
keepPosition
=
availableTop
>
=
this
.
preferredHeight
;
}
else
if
(
position
=
=
=
BOTTOM
)
{
keepPosition
=
availableBottom
>
=
this
.
preferredHeight
;
}
if
(
!
keepPosition
)
{
position
=
availableTop
>
availableBottom
?
TOP
:
BOTTOM
;
}
let
availableHeight
=
position
=
=
=
TOP
?
availableTop
:
availableBottom
;
let
height
=
Math
.
min
(
this
.
preferredHeight
availableHeight
)
;
height
=
Math
.
floor
(
height
)
;
let
top
=
position
=
=
=
TOP
?
anchorTop
-
height
:
anchorTop
+
anchorHeight
;
let
availableWidth
=
docRight
;
let
width
=
Math
.
min
(
this
.
preferredWidth
availableWidth
)
;
let
left
=
Math
.
min
(
anchorLeft
docRight
-
width
)
;
let
arrowLeft
;
if
(
this
.
type
=
=
=
TYPE
.
ARROW
)
{
let
arrowCenter
=
left
+
ARROW_OFFSET
+
ARROW_WIDTH
/
2
;
let
anchorCenter
=
anchorLeft
+
anchorWidth
/
2
;
if
(
arrowCenter
>
anchorCenter
)
{
left
=
Math
.
max
(
0
left
-
(
arrowCenter
-
anchorCenter
)
)
;
}
arrowLeft
=
Math
.
min
(
ARROW_OFFSET
(
anchorWidth
-
ARROW_WIDTH
)
/
2
)
|
0
;
arrowLeft
+
=
anchorLeft
-
left
;
arrowLeft
=
Math
.
min
(
arrowLeft
width
-
ARROW_WIDTH
)
;
arrowLeft
=
Math
.
max
(
arrowLeft
0
)
;
}
return
{
top
left
width
height
position
arrowLeft
}
;
}
_getRelativeRect
:
function
(
node
relativeTo
)
{
let
{
width
height
}
=
node
.
getBoundingClientRect
(
)
;
let
quads
=
node
.
getBoxQuads
(
{
relativeTo
}
)
;
let
top
=
quads
[
0
]
.
bounds
.
top
;
let
left
=
quads
[
0
]
.
bounds
.
left
;
let
right
=
left
+
width
;
let
bottom
=
top
+
height
;
return
{
top
right
bottom
left
width
height
}
;
}
_isXUL
:
function
(
)
{
return
this
.
doc
.
documentElement
.
namespaceURI
=
=
=
XUL_NS
;
}
_maybeFocusTooltip
:
function
(
)
{
let
focusableSelector
=
"
a
button
iframe
input
select
textarea
"
;
let
focusableElement
=
this
.
panel
.
querySelector
(
focusableSelector
)
;
if
(
this
.
autofocus
&
&
focusableElement
)
{
focusableElement
.
focus
(
)
;
}
}
}
;
