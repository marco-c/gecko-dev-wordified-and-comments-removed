"
use
strict
"
;
importScripts
(
"
resource
:
/
/
gre
/
modules
/
workers
/
require
.
js
"
)
;
const
{
createTask
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
worker
/
helper
.
js
"
)
;
createTask
(
self
"
plotTimestampsGraph
"
function
(
{
timestamps
interval
duration
}
)
{
const
plottedData
=
plotTimestamps
(
timestamps
interval
)
;
const
plottedMinMaxSum
=
getMinMaxAvg
(
plottedData
timestamps
duration
)
;
return
{
plottedData
plottedMinMaxSum
}
;
}
)
;
function
getMinMaxAvg
(
source
timestamps
duration
)
{
const
totalFrames
=
timestamps
.
length
;
let
maxValue
=
Number
.
MIN_SAFE_INTEGER
;
let
minValue
=
Number
.
MAX_SAFE_INTEGER
;
const
avgValue
=
totalFrames
/
(
duration
/
1000
)
;
for
(
const
{
value
}
of
source
)
{
maxValue
=
Math
.
max
(
value
maxValue
)
;
minValue
=
Math
.
min
(
value
minValue
)
;
}
return
{
minValue
maxValue
avgValue
}
;
}
function
plotTimestamps
(
timestamps
interval
=
100
clamp
=
60
)
{
const
timeline
=
[
]
;
const
totalTicks
=
timestamps
.
length
;
if
(
totalTicks
=
=
0
)
{
timeline
.
push
(
{
delta
:
0
value
:
0
}
)
;
timeline
.
push
(
{
delta
:
interval
value
:
0
}
)
;
return
timeline
;
}
let
frameCount
=
0
;
let
prevTime
=
+
timestamps
[
0
]
;
for
(
let
i
=
1
;
i
<
totalTicks
;
i
+
+
)
{
const
currTime
=
+
timestamps
[
i
]
;
frameCount
+
+
;
const
elapsedTime
=
currTime
-
prevTime
;
if
(
elapsedTime
<
interval
)
{
continue
;
}
const
rate
=
Math
.
min
(
1000
/
(
elapsedTime
/
frameCount
)
clamp
)
;
timeline
.
push
(
{
delta
:
prevTime
value
:
rate
}
)
;
timeline
.
push
(
{
delta
:
currTime
value
:
rate
}
)
;
frameCount
=
0
;
prevTime
=
currTime
;
}
return
timeline
;
}
