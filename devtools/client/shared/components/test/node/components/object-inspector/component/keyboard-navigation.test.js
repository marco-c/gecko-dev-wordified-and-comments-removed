const
{
mountObjectInspector
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
test
/
node
/
components
/
object
-
inspector
/
test
-
utils
"
)
;
const
{
MODE
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
index
"
)
;
const
{
formatObjectInspector
waitForDispatch
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
test
/
node
/
components
/
object
-
inspector
/
test
-
utils
"
)
;
const
ObjectFront
=
require
(
"
devtools
/
client
/
shared
/
components
/
test
/
node
/
__mocks__
/
object
-
front
"
)
;
const
gripRepStubs
=
require
(
devtools
/
client
/
shared
/
components
/
test
/
node
/
stubs
/
reps
/
grip
)
;
function
generateDefaults
(
overrides
)
{
return
{
autoExpandDepth
:
0
mode
:
MODE
.
LONG
.
.
.
overrides
}
;
}
function
mount
(
props
)
{
const
client
=
{
createObjectFront
:
grip
=
>
ObjectFront
(
grip
)
}
;
return
mountObjectInspector
(
{
client
props
:
generateDefaults
(
props
)
}
)
;
}
describe
(
"
ObjectInspector
-
keyboard
navigation
"
(
)
=
>
{
it
(
"
works
as
expected
"
async
(
)
=
>
{
const
stub
=
gripRepStubs
.
get
(
"
testMaxProps
"
)
;
const
{
wrapper
store
}
=
mount
(
{
roots
:
[
{
path
:
"
root
"
contents
:
{
value
:
stub
}
}
]
}
)
;
expect
(
formatObjectInspector
(
wrapper
)
)
.
toMatchSnapshot
(
)
;
wrapper
.
simulate
(
"
focus
"
)
;
expect
(
formatObjectInspector
(
wrapper
)
)
.
toMatchSnapshot
(
)
;
const
onPropertiesLoaded
=
waitForDispatch
(
store
"
NODE_PROPERTIES_LOADED
"
)
;
simulateKeyDown
(
wrapper
"
ArrowRight
"
)
;
await
onPropertiesLoaded
;
wrapper
.
update
(
)
;
expect
(
formatObjectInspector
(
wrapper
)
)
.
toMatchSnapshot
(
)
;
keyNavigate
(
wrapper
store
"
ArrowDown
"
)
;
expect
(
formatObjectInspector
(
wrapper
)
)
.
toMatchSnapshot
(
)
;
keyNavigate
(
wrapper
store
"
ArrowLeft
"
)
;
expect
(
formatObjectInspector
(
wrapper
)
)
.
toMatchSnapshot
(
)
;
keyNavigate
(
wrapper
store
"
ArrowRight
"
)
;
expect
(
formatObjectInspector
(
wrapper
)
)
.
toMatchSnapshot
(
)
;
keyNavigate
(
wrapper
store
"
ArrowUp
"
)
;
expect
(
formatObjectInspector
(
wrapper
)
)
.
toMatchSnapshot
(
)
;
wrapper
.
simulate
(
"
blur
"
)
;
expect
(
formatObjectInspector
(
wrapper
)
)
.
toMatchSnapshot
(
)
;
}
)
;
}
)
;
function
keyNavigate
(
wrapper
store
key
)
{
simulateKeyDown
(
wrapper
key
)
;
wrapper
.
update
(
)
;
}
function
simulateKeyDown
(
wrapper
key
)
{
wrapper
.
simulate
(
"
keydown
"
{
key
preventDefault
:
(
)
=
>
{
}
stopPropagation
:
(
)
=
>
{
}
}
)
;
}
