"
use
strict
"
;
const
{
shallow
}
=
require
(
"
enzyme
"
)
;
const
{
lengthBubble
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
shared
/
grip
-
length
-
bubble
"
)
;
const
{
maxLengthMap
:
arrayLikeMaxLengthMap
getLength
:
getArrayLikeLength
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
grip
-
array
"
)
;
const
{
maxLengthMap
:
mapMaxLengths
getLength
:
getMapLength
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
grip
-
map
"
)
;
const
{
getGripPreviewItems
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
-
utils
"
)
;
const
nodeConstants
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
shared
/
dom
-
node
-
constants
"
)
;
function
getSelectableInInspectorGrips
(
grip
)
{
const
grips
=
new
Set
(
getFlattenedGrips
(
[
grip
]
)
)
;
return
[
.
.
.
grips
]
.
filter
(
isGripSelectableInInspector
)
;
}
function
isGripSelectableInInspector
(
grip
)
{
return
(
grip
&
&
typeof
grip
=
=
=
"
object
"
&
&
grip
.
preview
&
&
[
nodeConstants
.
TEXT_NODE
nodeConstants
.
ELEMENT_NODE
]
.
includes
(
grip
.
preview
.
nodeType
)
)
;
}
function
getFlattenedGrips
(
grips
)
{
return
grips
.
reduce
(
(
res
grip
)
=
>
{
const
previewItems
=
getGripPreviewItems
(
grip
)
;
const
flatPreviewItems
=
previewItems
.
length
>
0
?
getFlattenedGrips
(
previewItems
)
:
[
]
;
return
[
.
.
.
res
grip
.
.
.
flatPreviewItems
]
;
}
[
]
)
;
}
function
expectActorAttribute
(
wrapper
expectedValue
)
{
const
actorIdAttribute
=
"
data
-
link
-
actor
-
id
"
;
const
attrElement
=
wrapper
.
find
(
[
{
actorIdAttribute
}
]
)
;
expect
(
attrElement
.
exists
(
)
)
.
toBeTruthy
(
)
;
expect
(
attrElement
.
first
(
)
.
prop
(
"
data
-
link
-
actor
-
id
"
)
)
.
toBe
(
expectedValue
)
;
}
function
getGripLengthBubbleText
(
object
props
)
{
const
component
=
lengthBubble
(
{
object
maxLengthMap
:
arrayLikeMaxLengthMap
getLength
:
getArrayLikeLength
.
.
.
props
}
)
;
return
component
?
shallow
(
component
)
.
text
(
)
:
"
"
;
}
function
getMapLengthBubbleText
(
object
props
)
{
return
getGripLengthBubbleText
(
object
{
maxLengthMap
:
mapMaxLengths
getLength
:
getMapLength
showZeroLength
:
true
.
.
.
props
}
)
;
}
module
.
exports
=
{
expectActorAttribute
getSelectableInInspectorGrips
getGripLengthBubbleText
getMapLengthBubbleText
}
;
