"
use
strict
"
;
const
{
shallow
}
=
require
(
"
enzyme
"
)
;
const
{
REPS
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
.
js
"
)
;
const
{
Rep
}
=
REPS
;
const
stubs
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
test
/
node
/
stubs
/
reps
/
symbol
.
js
"
)
;
const
{
expectActorAttribute
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
test
/
node
/
components
/
reps
/
test
-
helpers
.
js
"
)
;
describe
(
"
test
Symbol
"
(
)
=
>
{
const
stub
=
stubs
.
get
(
"
Symbol
"
)
;
it
(
"
renders
with
the
expected
content
"
(
)
=
>
{
const
renderedComponent
=
shallow
(
Rep
(
{
object
:
stub
shouldRenderTooltip
:
true
}
)
)
;
expect
(
renderedComponent
.
text
(
)
)
.
toEqual
(
'
Symbol
(
"
foo
"
)
'
)
;
expect
(
renderedComponent
.
prop
(
"
title
"
)
)
.
toBe
(
"
Symbol
(
foo
)
"
)
;
expectActorAttribute
(
renderedComponent
stub
.
actor
)
;
}
)
;
}
)
;
describe
(
"
test
Symbol
without
identifier
"
(
)
=
>
{
const
stub
=
stubs
.
get
(
"
SymbolWithoutIdentifier
"
)
;
it
(
"
renders
the
expected
content
"
(
)
=
>
{
const
renderedComponent
=
shallow
(
Rep
(
{
object
:
stub
}
)
)
;
expect
(
renderedComponent
.
text
(
)
)
.
toEqual
(
"
Symbol
(
)
"
)
;
expectActorAttribute
(
renderedComponent
stub
.
actor
)
;
}
)
;
}
)
;
describe
(
"
test
Symbol
with
long
string
"
(
)
=
>
{
const
stub
=
stubs
.
get
(
"
SymbolWithLongString
"
)
;
it
(
"
renders
the
expected
content
"
(
)
=
>
{
const
renderedComponent
=
shallow
(
Rep
(
{
object
:
stub
}
)
)
;
expect
(
renderedComponent
.
text
(
)
)
.
toEqual
(
'
Symbol
(
"
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
"
)
'
)
;
expectActorAttribute
(
renderedComponent
stub
.
actor
)
;
}
)
;
}
)
;
