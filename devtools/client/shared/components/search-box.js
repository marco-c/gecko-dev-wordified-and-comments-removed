"
use
strict
"
;
const
{
DOM
:
dom
createClass
PropTypes
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
KeyShortcuts
=
require
(
"
devtools
/
client
/
shared
/
key
-
shortcuts
"
)
;
const
AutocompletePopup
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
autocomplete
-
popup
"
)
)
;
module
.
exports
=
createClass
(
{
displayName
:
"
SearchBox
"
propTypes
:
{
delay
:
PropTypes
.
number
keyShortcut
:
PropTypes
.
string
onChange
:
PropTypes
.
func
placeholder
:
PropTypes
.
string
type
:
PropTypes
.
string
autocompleteList
:
PropTypes
.
array
}
getDefaultProps
(
)
{
return
{
autocompleteList
:
[
]
}
;
}
getInitialState
(
)
{
return
{
value
:
"
"
focused
:
false
}
;
}
componentDidMount
(
)
{
if
(
!
this
.
props
.
keyShortcut
)
{
return
;
}
this
.
shortcuts
=
new
KeyShortcuts
(
{
window
}
)
;
this
.
shortcuts
.
on
(
this
.
props
.
keyShortcut
(
name
event
)
=
>
{
event
.
preventDefault
(
)
;
this
.
refs
.
input
.
focus
(
)
;
}
)
;
}
componentWillUnmount
(
)
{
if
(
this
.
shortcuts
)
{
this
.
shortcuts
.
destroy
(
)
;
}
if
(
this
.
searchTimeout
)
{
clearTimeout
(
this
.
searchTimeout
)
;
}
}
onChange
(
)
{
if
(
this
.
state
.
value
!
=
=
this
.
refs
.
input
.
value
)
{
this
.
setState
(
{
value
:
this
.
refs
.
input
.
value
}
)
;
}
if
(
!
this
.
props
.
delay
)
{
this
.
props
.
onChange
(
this
.
state
.
value
)
;
return
;
}
if
(
this
.
searchTimeout
)
{
clearTimeout
(
this
.
searchTimeout
)
;
}
this
.
searchTimeout
=
setTimeout
(
(
)
=
>
{
this
.
searchTimeout
=
null
;
this
.
props
.
onChange
(
this
.
state
.
value
)
;
}
this
.
props
.
delay
)
;
}
onClearButtonClick
(
)
{
this
.
refs
.
input
.
value
=
"
"
;
this
.
onChange
(
)
;
}
onFocus
(
)
{
this
.
setState
(
{
focused
:
true
}
)
;
}
onBlur
(
)
{
this
.
setState
(
{
focused
:
false
}
)
;
}
onKeyDown
(
e
)
{
let
{
autocompleteList
}
=
this
.
props
;
let
{
autocomplete
}
=
this
.
refs
;
if
(
autocompleteList
.
length
=
=
0
)
{
return
;
}
switch
(
e
.
key
)
{
case
"
ArrowDown
"
:
autocomplete
.
jumpBy
(
1
)
;
break
;
case
"
ArrowUp
"
:
autocomplete
.
jumpBy
(
-
1
)
;
break
;
case
"
PageDown
"
:
autocomplete
.
jumpBy
(
5
)
;
break
;
case
"
PageUp
"
:
autocomplete
.
jumpBy
(
-
5
)
;
break
;
case
"
Enter
"
:
case
"
Tab
"
:
e
.
preventDefault
(
)
;
autocomplete
.
select
(
)
;
break
;
case
"
Escape
"
:
e
.
preventDefault
(
)
;
this
.
onBlur
(
)
;
break
;
case
"
Home
"
:
autocomplete
.
jumpToTop
(
)
;
break
;
case
"
End
"
:
autocomplete
.
jumpToBottom
(
)
;
break
;
}
}
render
(
)
{
let
{
type
=
"
search
"
placeholder
autocompleteList
}
=
this
.
props
;
let
{
value
}
=
this
.
state
;
let
divClassList
=
[
"
devtools
-
searchbox
"
"
has
-
clear
-
btn
"
]
;
let
inputClassList
=
[
devtools
-
{
type
}
input
]
;
if
(
value
!
=
=
"
"
)
{
inputClassList
.
push
(
"
filled
"
)
;
}
return
dom
.
div
(
{
className
:
divClassList
.
join
(
"
"
)
}
dom
.
input
(
{
className
:
inputClassList
.
join
(
"
"
)
onChange
:
this
.
onChange
onFocus
:
this
.
onFocus
onBlur
:
this
.
onBlur
onKeyDown
:
this
.
onKeyDown
placeholder
ref
:
"
input
"
value
}
)
dom
.
button
(
{
className
:
"
devtools
-
searchinput
-
clear
"
hidden
:
value
=
=
"
"
onClick
:
this
.
onClearButtonClick
}
)
autocompleteList
.
length
>
0
&
&
this
.
state
.
focused
&
&
AutocompletePopup
(
{
list
:
autocompleteList
filter
:
value
ref
:
"
autocomplete
"
onItemSelected
:
(
itemValue
)
=
>
{
this
.
setState
(
{
value
:
itemValue
}
)
;
this
.
onChange
(
)
;
}
}
)
)
;
}
}
)
;
