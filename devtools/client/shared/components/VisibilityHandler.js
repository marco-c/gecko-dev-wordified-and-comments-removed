"
use
strict
"
;
const
{
Component
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
class
VisibilityHandler
extends
Component
{
static
get
propTypes
(
)
{
return
{
children
:
PropTypes
.
element
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
onVisibilityChange
=
this
.
onVisibilityChange
.
bind
(
this
)
;
}
componentDidMount
(
)
{
document
.
addEventListener
(
"
visibilitychange
"
this
.
onVisibilityChange
)
;
}
shouldComponentUpdate
(
)
{
return
document
.
visibilityState
=
=
"
visible
"
;
}
componentWillUnmount
(
)
{
document
.
removeEventListener
(
"
visibilitychange
"
this
.
onVisibilityChange
)
;
}
onVisibilityChange
(
)
{
if
(
document
.
visibilityState
=
=
"
visible
"
)
{
this
.
forceUpdate
(
)
;
}
}
render
(
)
{
return
this
.
props
.
children
;
}
}
module
.
exports
=
VisibilityHandler
;
