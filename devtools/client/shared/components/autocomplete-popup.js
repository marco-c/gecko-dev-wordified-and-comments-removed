"
use
strict
"
;
const
{
DOM
:
dom
createClass
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
module
.
exports
=
createClass
(
{
displayName
:
"
AutocompletePopup
"
propTypes
:
{
list
:
PropTypes
.
array
.
isRequired
filter
:
PropTypes
.
string
.
isRequired
onItemSelected
:
PropTypes
.
func
.
isRequired
}
getInitialState
(
)
{
return
this
.
computeState
(
this
.
props
)
;
}
componentWillReceiveProps
(
nextProps
)
{
if
(
this
.
props
.
filter
=
=
=
nextProps
.
filter
)
{
return
;
}
this
.
setState
(
this
.
computeState
(
nextProps
)
)
;
}
componentDidUpdate
(
)
{
if
(
this
.
refs
.
selected
)
{
this
.
refs
.
selected
.
scrollIntoView
(
false
)
;
}
}
computeState
(
{
filter
list
}
)
{
let
filteredList
=
list
.
filter
(
(
item
)
=
>
{
return
item
.
toLowerCase
(
)
.
startsWith
(
filter
.
toLowerCase
(
)
)
&
&
item
.
toLowerCase
(
)
!
=
=
filter
.
toLowerCase
(
)
;
}
)
.
sort
(
)
;
let
selectedIndex
=
filteredList
.
length
=
=
1
?
0
:
-
1
;
return
{
filteredList
selectedIndex
}
;
}
jumpToTop
(
)
{
this
.
setState
(
{
selectedIndex
:
0
}
)
;
}
jumpToBottom
(
)
{
let
selectedIndex
=
this
.
state
.
filteredList
.
length
-
1
;
this
.
setState
(
{
selectedIndex
}
)
;
}
jumpBy
(
increment
=
1
)
{
let
{
filteredList
selectedIndex
}
=
this
.
state
;
let
nextIndex
=
selectedIndex
+
increment
;
if
(
increment
>
0
)
{
nextIndex
=
nextIndex
>
filteredList
.
length
-
1
?
0
:
nextIndex
;
}
else
if
(
increment
<
0
)
{
nextIndex
=
nextIndex
<
0
?
filteredList
.
length
-
1
:
nextIndex
;
}
this
.
setState
(
{
selectedIndex
:
nextIndex
}
)
;
}
select
(
)
{
if
(
this
.
refs
.
selected
)
{
this
.
props
.
onItemSelected
(
this
.
refs
.
selected
.
textContent
)
;
}
}
onMouseDown
(
e
)
{
e
.
preventDefault
(
)
;
this
.
setState
(
{
selectedIndex
:
Number
(
e
.
target
.
dataset
.
index
)
}
this
.
select
)
;
}
render
(
)
{
let
{
filteredList
}
=
this
.
state
;
return
filteredList
.
length
>
0
&
&
dom
.
div
(
{
className
:
"
devtools
-
autocomplete
-
popup
devtools
-
monospace
"
}
dom
.
ul
(
{
className
:
"
devtools
-
autocomplete
-
listbox
"
}
filteredList
.
map
(
(
item
i
)
=
>
{
let
isSelected
=
this
.
state
.
selectedIndex
=
=
i
;
let
itemClassList
=
[
"
autocomplete
-
item
"
]
;
if
(
isSelected
)
{
itemClassList
.
push
(
"
autocomplete
-
selected
"
)
;
}
return
dom
.
li
(
{
key
:
i
"
data
-
index
"
:
i
className
:
itemClassList
.
join
(
"
"
)
ref
:
isSelected
?
"
selected
"
:
null
onMouseDown
:
this
.
onMouseDown
}
item
)
;
}
)
)
)
;
}
}
)
;
