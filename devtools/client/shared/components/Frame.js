"
use
strict
"
;
const
{
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
getUnicodeUrl
getUnicodeUrlPath
getUnicodeHostname
}
=
require
(
"
devtools
/
client
/
shared
/
unicode
-
url
"
)
;
const
{
getSourceNames
parseURL
isScratchpadScheme
getSourceMappedFile
}
=
require
(
"
devtools
/
client
/
shared
/
source
-
utils
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
l10n
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
components
.
properties
"
)
;
const
webl10n
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
webconsole
.
properties
"
)
;
class
Frame
extends
Component
{
static
get
propTypes
(
)
{
return
{
frame
:
PropTypes
.
shape
(
{
functionDisplayName
:
PropTypes
.
string
source
:
PropTypes
.
string
.
isRequired
line
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
number
]
)
column
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
number
]
)
}
)
.
isRequired
onClick
:
PropTypes
.
func
showFunctionName
:
PropTypes
.
bool
showAnonymousFunctionName
:
PropTypes
.
bool
showHost
:
PropTypes
.
bool
showEmptyPathAsHost
:
PropTypes
.
bool
showFullSourceUrl
:
PropTypes
.
bool
sourceMapService
:
PropTypes
.
object
}
;
}
static
get
defaultProps
(
)
{
return
{
showFunctionName
:
false
showAnonymousFunctionName
:
false
showHost
:
false
showEmptyPathAsHost
:
false
showFullSourceUrl
:
false
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
_locationChanged
=
this
.
_locationChanged
.
bind
(
this
)
;
this
.
getSourceForClick
=
this
.
getSourceForClick
.
bind
(
this
)
;
}
componentWillMount
(
)
{
if
(
this
.
props
.
sourceMapService
)
{
const
{
source
line
column
}
=
this
.
props
.
frame
;
this
.
unsubscribeSourceMapService
=
this
.
props
.
sourceMapService
.
subscribe
(
source
line
column
this
.
_locationChanged
)
;
}
}
componentWillUnmount
(
)
{
if
(
typeof
this
.
unsubscribeSourceMapService
=
=
=
"
function
"
)
{
this
.
unsubscribeSourceMapService
(
)
;
}
}
_locationChanged
(
isSourceMapped
url
line
column
)
{
const
newState
=
{
isSourceMapped
}
;
if
(
isSourceMapped
)
{
newState
.
frame
=
{
source
:
url
line
column
functionDisplayName
:
this
.
props
.
frame
.
functionDisplayName
}
;
}
this
.
setState
(
newState
)
;
}
getSourceForClick
(
frame
)
{
const
{
source
line
column
sourceId
}
=
frame
;
return
{
url
:
source
line
column
functionDisplayName
:
this
.
props
.
frame
.
functionDisplayName
sourceId
}
;
}
render
(
)
{
let
frame
isSourceMapped
;
const
{
onClick
showFunctionName
showAnonymousFunctionName
showHost
showEmptyPathAsHost
showFullSourceUrl
}
=
this
.
props
;
if
(
this
.
state
&
&
this
.
state
.
isSourceMapped
&
&
this
.
state
.
frame
)
{
frame
=
this
.
state
.
frame
;
isSourceMapped
=
this
.
state
.
isSourceMapped
;
}
else
{
frame
=
this
.
props
.
frame
;
}
const
source
=
frame
.
source
|
|
"
"
;
const
sourceId
=
frame
.
sourceId
;
const
line
=
frame
.
line
!
=
void
0
?
Number
(
frame
.
line
)
:
null
;
const
column
=
frame
.
column
!
=
void
0
?
Number
(
frame
.
column
)
:
null
;
const
{
short
long
host
}
=
getSourceNames
(
source
)
;
const
unicodeShort
=
getUnicodeUrlPath
(
short
)
;
const
unicodeLong
=
getUnicodeUrl
(
long
)
;
const
unicodeHost
=
host
?
getUnicodeHostname
(
host
)
:
"
"
;
const
isLinkable
=
!
!
(
isScratchpadScheme
(
source
)
|
|
parseURL
(
source
)
)
|
|
isSourceMapped
|
|
sourceId
;
const
elements
=
[
]
;
const
sourceElements
=
[
]
;
let
sourceEl
;
let
tooltip
=
unicodeLong
;
if
(
line
)
{
tooltip
+
=
:
{
line
}
;
if
(
column
)
{
tooltip
+
=
:
{
column
}
;
}
}
const
attributes
=
{
"
data
-
url
"
:
long
className
:
"
frame
-
link
"
}
;
if
(
showFunctionName
)
{
let
functionDisplayName
=
frame
.
functionDisplayName
;
if
(
!
functionDisplayName
&
&
showAnonymousFunctionName
)
{
functionDisplayName
=
webl10n
.
getStr
(
"
stacktrace
.
anonymousFunction
"
)
;
}
if
(
functionDisplayName
)
{
elements
.
push
(
dom
.
span
(
{
key
:
"
function
-
display
-
name
"
className
:
"
frame
-
link
-
function
-
display
-
name
"
}
functionDisplayName
)
"
"
)
;
}
}
let
displaySource
=
showFullSourceUrl
?
unicodeLong
:
unicodeShort
;
if
(
isSourceMapped
)
{
displaySource
=
getSourceMappedFile
(
displaySource
)
;
}
else
if
(
showEmptyPathAsHost
&
&
(
displaySource
=
=
=
"
"
|
|
displaySource
=
=
=
"
/
"
)
)
{
displaySource
=
host
;
}
sourceElements
.
push
(
dom
.
span
(
{
key
:
"
filename
"
className
:
"
frame
-
link
-
filename
"
}
displaySource
)
)
;
if
(
line
)
{
let
lineInfo
=
:
{
line
}
;
attributes
[
"
data
-
line
"
]
=
line
;
if
(
column
)
{
lineInfo
+
=
:
{
column
}
;
attributes
[
"
data
-
column
"
]
=
column
;
}
sourceElements
.
push
(
dom
.
span
(
{
key
:
"
line
"
className
:
"
frame
-
link
-
line
"
}
lineInfo
)
)
;
}
const
sourceInnerEl
=
dom
.
span
(
{
key
:
"
source
-
inner
"
className
:
"
frame
-
link
-
source
-
inner
"
title
:
isLinkable
?
l10n
.
getFormatStr
(
"
frame
.
viewsourceindebugger
"
tooltip
)
:
tooltip
}
sourceElements
)
;
if
(
isLinkable
)
{
sourceEl
=
dom
.
a
(
{
onClick
:
e
=
>
{
e
.
preventDefault
(
)
;
e
.
stopPropagation
(
)
;
onClick
(
this
.
getSourceForClick
(
{
.
.
.
frame
source
sourceId
}
)
)
;
}
href
:
source
className
:
"
frame
-
link
-
source
"
draggable
:
false
}
sourceInnerEl
)
;
}
else
{
sourceEl
=
dom
.
span
(
{
key
:
"
source
"
className
:
"
frame
-
link
-
source
"
}
sourceInnerEl
)
;
}
elements
.
push
(
sourceEl
)
;
if
(
showHost
&
&
unicodeHost
)
{
elements
.
push
(
"
"
)
;
elements
.
push
(
dom
.
span
(
{
key
:
"
host
"
className
:
"
frame
-
link
-
host
"
}
unicodeHost
)
)
;
}
return
dom
.
span
(
attributes
.
.
.
elements
)
;
}
}
module
.
exports
=
Frame
;
