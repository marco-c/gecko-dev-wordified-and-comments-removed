"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
DOM
}
=
React
;
const
{
findDOMNode
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
let
Tabs
=
React
.
createClass
(
{
displayName
:
"
Tabs
"
propTypes
:
{
className
:
React
.
PropTypes
.
oneOfType
(
[
React
.
PropTypes
.
array
React
.
PropTypes
.
string
React
.
PropTypes
.
object
]
)
tabActive
:
React
.
PropTypes
.
number
onMount
:
React
.
PropTypes
.
func
onBeforeChange
:
React
.
PropTypes
.
func
onAfterChange
:
React
.
PropTypes
.
func
children
:
React
.
PropTypes
.
oneOfType
(
[
React
.
PropTypes
.
array
React
.
PropTypes
.
element
]
)
.
isRequired
showAllTabsMenu
:
React
.
PropTypes
.
bool
onAllTabsMenuClick
:
React
.
PropTypes
.
func
renderOnlySelected
:
React
.
PropTypes
.
bool
}
getDefaultProps
:
function
(
)
{
return
{
tabActive
:
0
showAllTabsMenu
:
false
renderOnlySelected
:
false
}
;
}
getInitialState
:
function
(
)
{
return
{
tabActive
:
this
.
props
.
tabActive
created
:
[
]
overflow
:
false
}
;
}
componentDidMount
:
function
(
)
{
let
node
=
findDOMNode
(
this
)
;
node
.
addEventListener
(
"
keydown
"
this
.
onKeyDown
)
;
if
(
this
.
props
.
showAllTabsMenu
)
{
node
.
addEventListener
(
"
overflow
"
this
.
onOverflow
)
;
node
.
addEventListener
(
"
underflow
"
this
.
onUnderflow
)
;
}
let
index
=
this
.
state
.
tabActive
;
if
(
this
.
props
.
onMount
)
{
this
.
props
.
onMount
(
index
)
;
}
}
componentWillReceiveProps
:
function
(
nextProps
)
{
let
{
children
tabActive
}
=
nextProps
;
if
(
typeof
tabActive
=
=
=
"
number
"
)
{
let
panels
=
children
.
filter
(
(
panel
)
=
>
panel
)
;
tabActive
=
(
tabActive
<
panels
.
length
&
&
tabActive
>
=
0
)
?
tabActive
:
0
;
let
created
=
[
.
.
.
this
.
state
.
created
]
;
created
[
tabActive
]
=
true
;
this
.
setState
(
{
created
tabActive
}
)
;
}
}
componentWillUnmount
:
function
(
)
{
let
node
=
findDOMNode
(
this
)
;
node
.
removeEventListener
(
"
keydown
"
this
.
onKeyDown
)
;
if
(
this
.
props
.
showAllTabsMenu
)
{
node
.
removeEventListener
(
"
overflow
"
this
.
onOverflow
)
;
node
.
removeEventListener
(
"
underflow
"
this
.
onUnderflow
)
;
}
}
onOverflow
:
function
(
event
)
{
if
(
event
.
target
.
classList
.
contains
(
"
tabs
-
menu
"
)
)
{
this
.
setState
(
{
overflow
:
true
}
)
;
}
}
onUnderflow
:
function
(
event
)
{
if
(
event
.
target
.
classList
.
contains
(
"
tabs
-
menu
"
)
)
{
this
.
setState
(
{
overflow
:
false
}
)
;
}
}
onKeyDown
:
function
(
event
)
{
if
(
!
event
.
target
.
closest
(
"
.
tabs
-
menu
-
item
"
)
)
{
return
;
}
let
tabActive
=
this
.
state
.
tabActive
;
let
tabCount
=
this
.
props
.
children
.
length
;
switch
(
event
.
code
)
{
case
"
ArrowRight
"
:
tabActive
=
Math
.
min
(
tabCount
-
1
tabActive
+
1
)
;
break
;
case
"
ArrowLeft
"
:
tabActive
=
Math
.
max
(
0
tabActive
-
1
)
;
break
;
}
if
(
this
.
state
.
tabActive
!
=
tabActive
)
{
this
.
setActive
(
tabActive
)
;
}
}
onClickTab
:
function
(
index
event
)
{
this
.
setActive
(
index
)
;
if
(
event
)
{
event
.
preventDefault
(
)
;
}
}
setActive
:
function
(
index
)
{
let
onAfterChange
=
this
.
props
.
onAfterChange
;
let
onBeforeChange
=
this
.
props
.
onBeforeChange
;
if
(
onBeforeChange
)
{
let
cancel
=
onBeforeChange
(
index
)
;
if
(
cancel
)
{
return
;
}
}
let
created
=
[
.
.
.
this
.
state
.
created
]
;
created
[
index
]
=
true
;
let
newState
=
Object
.
assign
(
{
}
this
.
state
{
tabActive
:
index
created
:
created
}
)
;
this
.
setState
(
newState
(
)
=
>
{
let
node
=
findDOMNode
(
this
)
;
let
selectedTab
=
node
.
querySelector
(
"
.
is
-
active
>
a
"
)
;
if
(
selectedTab
)
{
selectedTab
.
focus
(
)
;
}
if
(
onAfterChange
)
{
onAfterChange
(
index
)
;
}
}
)
;
}
renderMenuItems
:
function
(
)
{
if
(
!
this
.
props
.
children
)
{
throw
new
Error
(
"
There
must
be
at
least
one
Tab
"
)
;
}
if
(
!
Array
.
isArray
(
this
.
props
.
children
)
)
{
this
.
props
.
children
=
[
this
.
props
.
children
]
;
}
let
tabs
=
this
.
props
.
children
.
map
(
(
tab
)
=
>
typeof
tab
=
=
=
"
function
"
?
tab
(
)
:
tab
)
.
filter
(
(
tab
)
=
>
tab
)
.
map
(
(
tab
index
)
=
>
{
let
id
=
tab
.
props
.
id
;
let
ref
=
"
tab
-
menu
-
"
+
index
;
let
title
=
tab
.
props
.
title
;
let
tabClassName
=
tab
.
props
.
className
;
let
isTabSelected
=
this
.
state
.
tabActive
=
=
=
index
;
let
className
=
[
"
tabs
-
menu
-
item
"
tabClassName
isTabSelected
?
"
is
-
active
"
:
"
"
]
.
join
(
"
"
)
;
return
(
DOM
.
li
(
{
className
key
:
index
ref
role
:
"
presentation
"
}
DOM
.
a
(
{
id
:
id
?
id
+
"
-
tab
"
:
"
tab
-
"
+
index
tabIndex
:
isTabSelected
?
0
:
-
1
"
aria
-
controls
"
:
id
?
id
+
"
-
panel
"
:
"
panel
-
"
+
index
"
aria
-
selected
"
:
isTabSelected
role
:
"
tab
"
onClick
:
this
.
onClickTab
.
bind
(
this
index
)
}
title
)
)
)
;
}
)
;
let
allTabsMenu
=
this
.
state
.
overflow
?
(
DOM
.
div
(
{
className
:
"
all
-
tabs
-
menu
"
onClick
:
this
.
props
.
onAllTabsMenuClick
}
)
)
:
null
;
return
(
DOM
.
nav
(
{
className
:
"
tabs
-
navigation
"
}
DOM
.
ul
(
{
className
:
"
tabs
-
menu
"
role
:
"
tablist
"
}
tabs
)
allTabsMenu
)
)
;
}
renderPanels
:
function
(
)
{
let
{
children
renderOnlySelected
}
=
this
.
props
;
if
(
!
children
)
{
throw
new
Error
(
"
There
must
be
at
least
one
Tab
"
)
;
}
if
(
!
Array
.
isArray
(
children
)
)
{
children
=
[
children
]
;
}
let
selectedIndex
=
this
.
state
.
tabActive
;
let
panels
=
children
.
map
(
(
tab
)
=
>
typeof
tab
=
=
=
"
function
"
?
tab
(
)
:
tab
)
.
filter
(
(
tab
)
=
>
tab
)
.
map
(
(
tab
index
)
=
>
{
let
selected
=
selectedIndex
=
=
=
index
;
if
(
renderOnlySelected
&
&
!
selected
)
{
return
null
;
}
let
id
=
tab
.
props
.
id
;
let
style
=
{
visibility
:
selected
?
"
visible
"
:
"
hidden
"
height
:
selected
?
"
100
%
"
:
"
0
"
width
:
selected
?
"
100
%
"
:
"
0
"
}
;
return
(
DOM
.
div
(
{
id
:
id
?
id
+
"
-
panel
"
:
"
panel
-
"
+
index
key
:
index
style
:
style
className
:
selected
?
"
tab
-
panel
-
box
"
:
"
tab
-
panel
-
box
hidden
"
role
:
"
tabpanel
"
"
aria
-
labelledby
"
:
id
?
id
+
"
-
tab
"
:
"
tab
-
"
+
index
}
(
selected
|
|
this
.
state
.
created
[
index
]
)
?
tab
:
null
)
)
;
}
)
;
return
(
DOM
.
div
(
{
className
:
"
panels
"
}
panels
)
)
;
}
render
:
function
(
)
{
return
(
DOM
.
div
(
{
className
:
[
"
tabs
"
this
.
props
.
className
]
.
join
(
"
"
)
}
this
.
renderMenuItems
(
)
this
.
renderPanels
(
)
)
)
;
}
}
)
;
let
Panel
=
React
.
createClass
(
{
displayName
:
"
Panel
"
propTypes
:
{
title
:
React
.
PropTypes
.
string
.
isRequired
children
:
React
.
PropTypes
.
oneOfType
(
[
React
.
PropTypes
.
array
React
.
PropTypes
.
element
]
)
.
isRequired
}
render
:
function
(
)
{
return
DOM
.
div
(
{
className
:
"
tab
-
panel
"
}
this
.
props
.
children
)
;
}
}
)
;
exports
.
TabPanel
=
Panel
;
exports
.
Tabs
=
Tabs
;
}
)
;
