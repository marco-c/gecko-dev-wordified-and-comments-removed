"
use
strict
"
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
thead
tr
td
div
}
=
React
.
DOM
;
const
PropTypes
=
React
.
PropTypes
;
var
TreeHeader
=
React
.
createClass
(
{
propTypes
:
{
decorator
:
PropTypes
.
object
header
:
PropTypes
.
bool
columns
:
PropTypes
.
array
}
displayName
:
"
TreeHeader
"
getDefaultProps
:
function
(
)
{
return
{
columns
:
[
{
id
:
"
default
"
}
]
}
;
}
getHeaderClass
:
function
(
colId
)
{
let
decorator
=
this
.
props
.
decorator
;
if
(
!
decorator
|
|
!
decorator
.
getHeaderClass
)
{
return
[
]
;
}
let
classNames
=
decorator
.
getHeaderClass
(
colId
)
;
if
(
!
classNames
)
{
return
[
]
;
}
if
(
typeof
classNames
=
=
"
string
"
)
{
classNames
=
[
classNames
]
;
}
return
classNames
;
}
render
:
function
(
)
{
let
cells
=
[
]
;
let
visible
=
this
.
props
.
header
;
this
.
props
.
columns
.
forEach
(
col
=
>
{
let
cellStyle
=
{
"
width
"
:
col
.
width
?
col
.
width
:
"
"
}
;
let
classNames
=
[
]
;
if
(
visible
)
{
classNames
=
this
.
getHeaderClass
(
col
.
id
)
;
classNames
.
push
(
"
treeHeaderCell
"
)
;
}
cells
.
push
(
td
(
{
className
:
classNames
.
join
(
"
"
)
style
:
cellStyle
key
:
col
.
id
}
div
(
{
className
:
visible
?
"
treeHeaderCellBox
"
:
"
"
}
visible
?
col
.
title
:
"
"
)
)
)
;
}
)
;
return
(
thead
(
{
}
tr
(
{
className
:
visible
?
"
treeHeaderRow
"
:
"
"
}
cells
)
)
)
;
}
}
)
;
module
.
exports
=
TreeHeader
;
