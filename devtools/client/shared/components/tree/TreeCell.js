"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
input
span
td
}
=
React
.
DOM
;
const
PropTypes
=
React
.
PropTypes
;
let
TreeCell
=
React
.
createClass
(
{
displayName
:
"
TreeCell
"
propTypes
:
{
value
:
PropTypes
.
any
decorator
:
PropTypes
.
object
id
:
PropTypes
.
string
.
isRequired
member
:
PropTypes
.
object
.
isRequired
renderValue
:
PropTypes
.
func
.
isRequired
enableInput
:
PropTypes
.
bool
}
getInitialState
:
function
(
)
{
return
{
inputEnabled
:
false
}
;
}
shouldComponentUpdate
:
function
(
nextProps
nextState
)
{
return
(
this
.
props
.
value
!
=
nextProps
.
value
)
|
|
(
this
.
state
!
=
=
nextState
)
|
|
(
this
.
props
.
member
.
open
!
=
nextProps
.
member
.
open
)
;
}
getCellClass
:
function
(
object
id
)
{
let
decorator
=
this
.
props
.
decorator
;
if
(
!
decorator
|
|
!
decorator
.
getCellClass
)
{
return
[
]
;
}
let
classNames
=
decorator
.
getCellClass
(
object
id
)
;
if
(
!
classNames
)
{
return
[
]
;
}
if
(
typeof
classNames
=
=
"
string
"
)
{
classNames
=
[
classNames
]
;
}
return
classNames
;
}
updateInputEnabled
:
function
(
evt
)
{
this
.
setState
(
Object
.
assign
(
{
}
this
.
state
{
inputEnabled
:
evt
.
target
.
nodeName
.
toLowerCase
(
)
!
=
=
"
input
"
}
)
)
;
}
render
:
function
(
)
{
let
{
member
id
value
decorator
renderValue
enableInput
}
=
this
.
props
;
let
type
=
member
.
type
|
|
"
"
;
let
classNames
=
this
.
getCellClass
(
member
.
object
id
)
|
|
[
]
;
classNames
.
push
(
"
treeValueCell
"
)
;
classNames
.
push
(
type
+
"
Cell
"
)
;
renderValue
=
renderValue
|
|
defaultRenderValue
;
if
(
decorator
&
&
decorator
.
renderValue
)
{
renderValue
=
decorator
.
renderValue
(
member
.
object
id
)
|
|
renderValue
;
}
let
props
=
Object
.
assign
(
{
}
this
.
props
{
object
:
value
}
)
;
let
cellElement
;
if
(
enableInput
&
&
this
.
state
.
inputEnabled
&
&
type
!
=
=
"
object
"
)
{
classNames
.
push
(
"
inputEnabled
"
)
;
cellElement
=
input
(
{
autoFocus
:
true
onBlur
:
this
.
updateInputEnabled
readOnly
:
true
value
"
aria
-
labelledby
"
:
id
}
)
;
}
else
{
cellElement
=
span
(
{
onClick
:
(
type
!
=
=
"
object
"
)
?
this
.
updateInputEnabled
:
null
"
aria
-
labelledby
"
:
id
}
renderValue
(
props
)
)
;
}
return
(
td
(
{
className
:
classNames
.
join
(
"
"
)
role
:
"
presentation
"
}
cellElement
)
)
;
}
}
)
;
let
defaultRenderValue
=
props
=
>
{
return
(
props
.
object
+
"
"
)
;
}
;
module
.
exports
=
TreeCell
;
}
)
;
