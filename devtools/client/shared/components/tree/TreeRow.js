"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
Component
createFactory
PropTypes
}
=
React
;
const
{
findDOMNode
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
{
tr
}
=
React
.
DOM
;
const
TreeCell
=
createFactory
(
require
(
"
.
/
TreeCell
"
)
)
;
const
LabelCell
=
createFactory
(
require
(
"
.
/
LabelCell
"
)
)
;
const
{
scrollIntoViewIfNeeded
}
=
require
(
"
devtools
/
client
/
shared
/
scroll
"
)
;
class
TreeRow
extends
Component
{
static
get
propTypes
(
)
{
return
{
member
:
PropTypes
.
shape
(
{
object
:
PropTypes
.
obSject
name
:
PropTypes
.
sring
type
:
PropTypes
.
string
.
isRequired
rowClass
:
PropTypes
.
string
.
isRequired
level
:
PropTypes
.
number
.
isRequired
hasChildren
:
PropTypes
.
bool
value
:
PropTypes
.
any
open
:
PropTypes
.
bool
.
isRequired
path
:
PropTypes
.
string
.
isRequired
hidden
:
PropTypes
.
bool
selected
:
PropTypes
.
bool
}
)
decorator
:
PropTypes
.
object
renderCell
:
PropTypes
.
object
renderLabelCell
:
PropTypes
.
object
columns
:
PropTypes
.
array
.
isRequired
id
:
PropTypes
.
string
.
isRequired
provider
:
PropTypes
.
object
.
isRequired
onClick
:
PropTypes
.
func
.
isRequired
onMouseOver
:
PropTypes
.
func
onMouseOut
:
PropTypes
.
func
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
getRowClass
=
this
.
getRowClass
.
bind
(
this
)
;
}
componentWillReceiveProps
(
nextProps
)
{
if
(
nextProps
.
member
.
hidden
!
=
this
.
props
.
member
.
hidden
)
{
let
row
=
findDOMNode
(
this
)
;
row
.
classList
.
toggle
(
"
hidden
"
)
;
}
}
shouldComponentUpdate
(
nextProps
)
{
let
props
=
[
"
name
"
"
open
"
"
value
"
"
loading
"
"
selected
"
"
hasChildren
"
]
;
for
(
let
p
in
props
)
{
if
(
nextProps
.
member
[
props
[
p
]
]
!
=
this
.
props
.
member
[
props
[
p
]
]
)
{
return
true
;
}
}
return
false
;
}
componentDidUpdate
(
)
{
if
(
this
.
props
.
member
.
selected
)
{
let
row
=
findDOMNode
(
this
)
;
if
(
row
.
ownerDocument
.
defaultView
)
{
scrollIntoViewIfNeeded
(
row
)
;
}
}
}
getRowClass
(
object
)
{
let
decorator
=
this
.
props
.
decorator
;
if
(
!
decorator
|
|
!
decorator
.
getRowClass
)
{
return
[
]
;
}
let
classNames
=
decorator
.
getRowClass
(
object
)
;
if
(
!
classNames
)
{
return
[
]
;
}
if
(
typeof
classNames
=
=
"
string
"
)
{
classNames
=
[
classNames
]
;
}
return
classNames
;
}
render
(
)
{
let
member
=
this
.
props
.
member
;
let
decorator
=
this
.
props
.
decorator
;
let
props
=
{
id
:
this
.
props
.
id
role
:
"
treeitem
"
"
aria
-
level
"
:
member
.
level
"
aria
-
selected
"
:
!
!
member
.
selected
onClick
:
this
.
props
.
onClick
onMouseOver
:
this
.
props
.
onMouseOver
onMouseOut
:
this
.
props
.
onMouseOut
}
;
let
classNames
=
this
.
getRowClass
(
member
.
object
)
|
|
[
]
;
classNames
.
push
(
"
treeRow
"
)
;
classNames
.
push
(
member
.
type
+
"
Row
"
)
;
if
(
member
.
hasChildren
)
{
classNames
.
push
(
"
hasChildren
"
)
;
props
[
"
aria
-
expanded
"
]
=
false
;
}
if
(
member
.
open
)
{
classNames
.
push
(
"
opened
"
)
;
props
[
"
aria
-
expanded
"
]
=
true
;
}
if
(
member
.
loading
)
{
classNames
.
push
(
"
loading
"
)
;
}
if
(
member
.
selected
)
{
classNames
.
push
(
"
selected
"
)
;
}
if
(
member
.
hidden
)
{
classNames
.
push
(
"
hidden
"
)
;
}
props
.
className
=
classNames
.
join
(
"
"
)
;
let
cells
=
[
]
;
let
renderCell
=
this
.
props
.
renderCell
|
|
RenderCell
;
let
renderLabelCell
=
this
.
props
.
renderLabelCell
|
|
RenderLabelCell
;
if
(
decorator
&
&
decorator
.
renderLabelCell
)
{
renderLabelCell
=
decorator
.
renderLabelCell
(
member
.
object
)
|
|
renderLabelCell
;
}
this
.
props
.
columns
.
forEach
(
col
=
>
{
let
cellProps
=
Object
.
assign
(
{
}
this
.
props
{
key
:
col
.
id
id
:
col
.
id
value
:
this
.
props
.
provider
.
getValue
(
member
.
object
col
.
id
)
}
)
;
if
(
decorator
&
&
decorator
.
renderCell
)
{
renderCell
=
decorator
.
renderCell
(
member
.
object
col
.
id
)
;
}
let
render
=
(
col
.
id
=
=
"
default
"
)
?
renderLabelCell
:
renderCell
;
if
(
render
)
{
cells
.
push
(
render
(
cellProps
)
)
;
}
}
)
;
return
(
tr
(
props
cells
)
)
;
}
}
let
RenderCell
=
props
=
>
{
return
TreeCell
(
props
)
;
}
;
let
RenderLabelCell
=
props
=
>
{
return
LabelCell
(
props
)
;
}
;
module
.
exports
=
TreeRow
;
}
)
;
