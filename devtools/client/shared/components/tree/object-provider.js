"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
let
ObjectProvider
=
{
getChildren
(
object
)
{
let
children
=
[
]
;
if
(
object
instanceof
ObjectProperty
)
{
object
=
object
.
value
;
}
if
(
!
object
)
{
return
[
]
;
}
if
(
typeof
(
object
)
=
=
"
string
"
)
{
return
[
]
;
}
for
(
let
prop
in
object
)
{
try
{
children
.
push
(
new
ObjectProperty
(
prop
object
[
prop
]
)
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
return
children
;
}
hasChildren
(
object
)
{
if
(
object
instanceof
ObjectProperty
)
{
object
=
object
.
value
;
}
if
(
!
object
)
{
return
false
;
}
if
(
typeof
object
=
=
"
string
"
)
{
return
false
;
}
if
(
typeof
object
!
=
=
"
object
"
)
{
return
false
;
}
return
Object
.
keys
(
object
)
.
length
>
0
;
}
getLabel
(
object
)
{
return
(
object
instanceof
ObjectProperty
)
?
object
.
name
:
null
;
}
getValue
(
object
)
{
return
(
object
instanceof
ObjectProperty
)
?
object
.
value
:
null
;
}
getKey
(
object
)
{
return
(
object
instanceof
ObjectProperty
)
?
object
.
name
:
null
;
}
getType
(
object
)
{
return
(
object
instanceof
ObjectProperty
)
?
typeof
object
.
value
:
typeof
object
;
}
}
;
function
ObjectProperty
(
name
value
)
{
this
.
name
=
name
;
this
.
value
=
value
;
}
exports
.
ObjectProperty
=
ObjectProperty
;
exports
.
ObjectProvider
=
ObjectProvider
;
}
)
;
