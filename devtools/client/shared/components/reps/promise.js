"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
isGrip
wrapRender
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
PropRep
}
=
createFactories
(
require
(
"
.
/
prop
-
rep
"
)
)
;
const
{
MODE
}
=
require
(
"
.
/
constants
"
)
;
const
{
span
}
=
React
.
DOM
;
const
PromiseRep
=
React
.
createClass
(
{
displayName
:
"
Promise
"
propTypes
:
{
object
:
React
.
PropTypes
.
object
.
isRequired
mode
:
React
.
PropTypes
.
oneOf
(
Object
.
keys
(
MODE
)
.
map
(
key
=
>
MODE
[
key
]
)
)
objectLink
:
React
.
PropTypes
.
func
}
getTitle
(
object
)
{
const
title
=
object
.
class
;
if
(
this
.
props
.
objectLink
)
{
return
this
.
props
.
objectLink
(
{
object
}
title
)
;
}
return
title
;
}
getProps
(
promiseState
)
{
const
keys
=
[
"
state
"
]
;
if
(
Object
.
keys
(
promiseState
)
.
includes
(
"
value
"
)
)
{
keys
.
push
(
"
value
"
)
;
}
return
keys
.
map
(
(
key
i
)
=
>
{
return
PropRep
(
Object
.
assign
(
{
}
this
.
props
{
mode
:
MODE
.
TINY
name
:
<
{
key
}
>
object
:
promiseState
[
key
]
equal
:
"
:
"
delim
:
i
<
keys
.
length
-
1
?
"
"
:
"
"
}
)
)
;
}
)
;
}
render
:
wrapRender
(
function
(
)
{
const
object
=
this
.
props
.
object
;
const
{
promiseState
}
=
object
;
let
objectLink
=
this
.
props
.
objectLink
|
|
span
;
if
(
this
.
props
.
mode
=
=
=
MODE
.
TINY
)
{
let
{
Rep
}
=
createFactories
(
require
(
"
.
/
rep
"
)
)
;
return
(
span
(
{
className
:
"
objectBox
objectBox
-
object
"
}
this
.
getTitle
(
object
)
objectLink
(
{
className
:
"
objectLeftBrace
"
object
}
"
{
"
)
Rep
(
{
object
:
promiseState
.
state
}
)
objectLink
(
{
className
:
"
objectRightBrace
"
object
}
"
}
"
)
)
)
;
}
const
props
=
this
.
getProps
(
promiseState
)
;
return
(
span
(
{
className
:
"
objectBox
objectBox
-
object
"
}
this
.
getTitle
(
object
)
objectLink
(
{
className
:
"
objectLeftBrace
"
object
}
"
{
"
)
.
.
.
props
objectLink
(
{
className
:
"
objectRightBrace
"
object
}
"
}
"
)
)
)
;
}
)
}
)
;
function
supportsObject
(
object
type
)
{
if
(
!
isGrip
(
object
)
)
{
return
false
;
}
return
type
=
=
=
"
Promise
"
;
}
exports
.
PromiseRep
=
{
rep
:
PromiseRep
supportsObject
}
;
}
)
;
