"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
isGrip
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
Undefined
}
=
require
(
"
.
/
undefined
"
)
;
const
{
Null
}
=
require
(
"
.
/
null
"
)
;
const
{
StringRep
}
=
require
(
"
.
/
string
"
)
;
const
{
Number
}
=
require
(
"
.
/
number
"
)
;
const
{
ArrayRep
}
=
require
(
"
.
/
array
"
)
;
const
{
Obj
}
=
require
(
"
.
/
object
"
)
;
const
{
Attribute
}
=
require
(
"
.
/
attribute
"
)
;
const
{
DateTime
}
=
require
(
"
.
/
date
-
time
"
)
;
const
{
Document
}
=
require
(
"
.
/
document
"
)
;
const
{
Event
}
=
require
(
"
.
/
event
"
)
;
const
{
Func
}
=
require
(
"
.
/
function
"
)
;
const
{
NamedNodeMap
}
=
require
(
"
.
/
named
-
node
-
map
"
)
;
const
{
RegExp
}
=
require
(
"
.
/
regexp
"
)
;
const
{
StyleSheet
}
=
require
(
"
.
/
stylesheet
"
)
;
const
{
TextNode
}
=
require
(
"
.
/
text
-
node
"
)
;
const
{
Window
}
=
require
(
"
.
/
window
"
)
;
const
{
ObjectWithText
}
=
require
(
"
.
/
object
-
with
-
text
"
)
;
const
{
ObjectWithURL
}
=
require
(
"
.
/
object
-
with
-
url
"
)
;
const
{
GripArray
}
=
require
(
"
.
/
grip
-
array
"
)
;
const
{
Grip
}
=
require
(
"
.
/
grip
"
)
;
let
reps
=
[
RegExp
StyleSheet
Event
DateTime
TextNode
NamedNodeMap
Attribute
Func
ArrayRep
Document
Window
ObjectWithText
ObjectWithURL
GripArray
Grip
Undefined
Null
StringRep
Number
]
;
const
Rep
=
React
.
createClass
(
{
propTypes
:
{
object
:
React
.
PropTypes
.
any
defaultRep
:
React
.
PropTypes
.
object
}
displayName
:
"
Rep
"
render
:
function
(
)
{
let
rep
=
getRep
(
this
.
props
.
object
this
.
props
.
defaultRep
)
;
return
rep
(
this
.
props
)
;
}
}
)
;
function
getRep
(
object
defaultRep
=
Obj
)
{
let
type
=
typeof
object
;
if
(
type
=
=
"
object
"
&
&
object
instanceof
String
)
{
type
=
"
string
"
;
}
if
(
isGrip
(
object
)
)
{
type
=
object
.
class
;
}
for
(
let
i
=
0
;
i
<
reps
.
length
;
i
+
+
)
{
let
rep
=
reps
[
i
]
;
try
{
if
(
rep
.
supportsObject
(
object
type
)
)
{
return
React
.
createFactory
(
rep
.
rep
)
;
}
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
}
return
React
.
createFactory
(
defaultRep
.
rep
)
;
}
exports
.
Rep
=
Rep
;
}
)
;
