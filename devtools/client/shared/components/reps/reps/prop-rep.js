"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
span
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
maybeEscapePropertyName
wrapRender
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
-
utils
"
)
;
const
{
MODE
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
constants
"
)
;
PropRep
.
propTypes
=
{
keyClassName
:
PropTypes
.
string
name
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
object
]
)
.
isRequired
equal
:
PropTypes
.
string
mode
:
PropTypes
.
oneOf
(
Object
.
values
(
MODE
)
)
onDOMNodeMouseOver
:
PropTypes
.
func
onDOMNodeMouseOut
:
PropTypes
.
func
onInspectIconClick
:
PropTypes
.
func
suppressQuotes
:
PropTypes
.
bool
shouldRenderTooltip
:
PropTypes
.
bool
}
;
function
PropRep
(
props
)
{
const
Grip
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
grip
"
)
;
const
{
Rep
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
"
)
;
let
{
equal
keyClassName
mode
name
shouldRenderTooltip
suppressQuotes
}
=
props
;
const
className
=
nodeName
{
keyClassName
?
"
"
+
keyClassName
:
"
"
}
;
let
key
;
if
(
typeof
name
=
=
=
"
string
"
)
{
if
(
!
suppressQuotes
)
{
name
=
maybeEscapePropertyName
(
name
)
;
}
key
=
span
(
{
className
title
:
shouldRenderTooltip
?
name
:
null
}
name
)
;
}
else
{
key
=
Rep
(
{
.
.
.
props
className
object
:
name
mode
:
mode
|
|
MODE
.
TINY
defaultRep
:
Grip
}
)
;
}
return
[
key
span
(
{
className
:
"
objectEqual
"
}
equal
)
Rep
(
{
.
.
.
props
}
)
]
;
}
module
.
exports
=
wrapRender
(
PropRep
)
;
}
)
;
