import
PropTypes
from
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
mjs
"
;
import
{
span
}
from
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
mjs
"
;
import
{
appendRTLClassNameIfNeeded
maybeEscapePropertyName
wrapRender
}
from
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
-
utils
.
mjs
"
;
import
{
MODE
}
from
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
constants
.
mjs
"
;
import
*
as
Grip
from
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
grip
.
mjs
"
;
import
{
Rep
}
from
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
.
mjs
"
;
PropRep
.
propTypes
=
{
keyClassName
:
PropTypes
.
string
name
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
object
]
)
.
isRequired
equal
:
PropTypes
.
string
mode
:
PropTypes
.
oneOf
(
Object
.
values
(
MODE
)
)
onDOMNodeMouseOver
:
PropTypes
.
func
onDOMNodeMouseOut
:
PropTypes
.
func
onInspectIconClick
:
PropTypes
.
func
suppressQuotes
:
PropTypes
.
bool
shouldRenderTooltip
:
PropTypes
.
bool
}
;
function
PropRep
(
props
)
{
let
{
equal
keyClassName
mode
name
shouldRenderTooltip
suppressQuotes
}
=
props
;
const
className
=
nodeName
{
keyClassName
?
"
"
+
keyClassName
:
"
"
}
;
let
key
;
if
(
typeof
name
=
=
=
"
string
"
)
{
if
(
!
suppressQuotes
)
{
name
=
maybeEscapePropertyName
(
name
)
;
}
key
=
span
(
{
className
:
appendRTLClassNameIfNeeded
(
className
name
)
title
:
shouldRenderTooltip
?
name
:
null
}
name
)
;
}
else
{
key
=
Rep
(
{
.
.
.
props
className
object
:
name
mode
:
mode
|
|
MODE
.
TINY
defaultRep
:
Grip
}
)
;
}
return
[
key
span
(
{
className
:
"
objectEqual
"
}
equal
)
Rep
(
{
.
.
.
props
}
)
]
;
}
const
rep
=
wrapRender
(
PropRep
)
;
export
default
rep
;
