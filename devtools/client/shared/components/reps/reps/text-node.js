"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
{
button
span
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
{
appendRTLClassNameIfNeeded
cropString
wrapRender
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
-
utils
.
js
"
)
;
const
{
MODE
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
constants
.
js
"
)
;
const
{
rep
:
StringRep
isLongString
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
string
.
js
"
)
;
TextNode
.
propTypes
=
{
object
:
PropTypes
.
object
.
isRequired
mode
:
PropTypes
.
oneOf
(
Object
.
values
(
MODE
)
)
onDOMNodeMouseOver
:
PropTypes
.
func
onDOMNodeMouseOut
:
PropTypes
.
func
onInspectIconClick
:
PropTypes
.
func
shouldRenderTooltip
:
PropTypes
.
bool
}
;
function
TextNode
(
props
)
{
const
{
object
:
grip
mode
=
MODE
.
SHORT
}
=
props
;
const
isInTree
=
grip
.
preview
&
&
grip
.
preview
.
isConnected
=
=
=
true
;
const
config
=
getElementConfig
(
{
.
.
.
props
isInTree
}
)
;
const
inspectIcon
=
getInspectIcon
(
{
.
.
.
props
isInTree
}
)
;
if
(
mode
=
=
=
MODE
.
TINY
|
|
mode
=
=
=
MODE
.
HEADER
)
{
return
span
(
config
getTitle
(
grip
)
inspectIcon
)
;
}
return
span
(
config
getTitle
(
grip
)
"
"
StringRep
(
{
className
:
"
nodeValue
"
object
:
grip
.
preview
.
textContent
}
)
inspectIcon
?
inspectIcon
:
null
)
;
}
function
getElementConfig
(
opts
)
{
const
{
object
isInTree
onDOMNodeMouseOver
onDOMNodeMouseOut
shouldRenderTooltip
}
=
opts
;
const
text
=
getTextContent
(
object
)
;
const
config
=
{
"
data
-
link
-
actor
-
id
"
:
object
.
actor
"
data
-
link
-
content
-
dom
-
reference
"
:
JSON
.
stringify
(
object
.
contentDomReference
)
className
:
appendRTLClassNameIfNeeded
(
"
objectBox
objectBox
-
textNode
"
text
)
title
:
shouldRenderTooltip
?
#
text
"
{
text
}
"
:
null
}
;
if
(
isInTree
)
{
if
(
onDOMNodeMouseOver
)
{
Object
.
assign
(
config
{
onMouseOver
:
_
=
>
onDOMNodeMouseOver
(
object
)
}
)
;
}
if
(
onDOMNodeMouseOut
)
{
Object
.
assign
(
config
{
onMouseOut
:
_
=
>
onDOMNodeMouseOut
(
object
)
}
)
;
}
}
return
config
;
}
function
getTextContent
(
grip
)
{
const
text
=
grip
.
preview
.
textContent
;
return
cropString
(
isLongString
(
text
)
?
text
.
initial
:
text
)
;
}
function
getInspectIcon
(
opts
)
{
const
{
object
isInTree
onInspectIconClick
}
=
opts
;
if
(
!
isInTree
|
|
!
onInspectIconClick
)
{
return
null
;
}
return
button
(
{
className
:
"
open
-
inspector
"
draggable
:
false
title
:
"
Click
to
select
the
node
in
the
inspector
"
onClick
:
e
=
>
onInspectIconClick
(
object
e
)
}
)
;
}
function
getTitle
(
)
{
const
title
=
"
#
text
"
;
return
span
(
{
}
title
)
;
}
function
supportsObject
(
grip
)
{
return
grip
?
.
preview
&
&
grip
?
.
class
=
=
"
Text
"
;
}
module
.
exports
=
{
rep
:
wrapRender
(
TextNode
)
supportsObject
}
;
}
)
;
