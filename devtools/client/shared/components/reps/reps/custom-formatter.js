"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
cleanupStyle
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
-
utils
"
)
;
const
{
wrapRender
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
-
utils
"
)
;
const
ALLOWED_TAGS
=
new
Set
(
[
"
span
"
"
div
"
"
ol
"
"
ul
"
"
li
"
"
table
"
"
tr
"
"
td
"
]
)
;
JsonMl
.
PropTypes
=
{
object
:
PropTypes
.
object
.
isRequired
createElement
:
PropTypes
.
func
}
;
function
JsonMl
(
props
)
{
let
[
tagName
.
.
.
attributesAndChildren
]
=
props
.
object
.
header
;
if
(
!
ALLOWED_TAGS
.
has
(
tagName
)
)
{
tagName
=
"
div
"
;
}
const
attributes
=
attributesAndChildren
[
0
]
;
const
hasAttributes
=
Object
(
attributes
)
=
=
=
attributes
&
&
!
Array
.
isArray
(
attributes
)
;
const
style
=
hasAttributes
&
&
attributes
?
.
style
&
&
props
.
createElement
?
cleanupStyle
(
attributes
.
style
props
.
createElement
)
:
null
;
const
children
=
attributesAndChildren
;
if
(
hasAttributes
)
{
children
.
shift
(
)
;
}
const
childElements
=
[
]
;
if
(
Array
.
isArray
(
children
)
)
{
children
.
forEach
(
(
child
index
)
=
>
{
childElements
.
push
(
Array
.
isArray
(
child
)
?
JsonMl
(
{
.
.
.
props
object
:
{
header
:
child
index
}
}
)
:
child
)
;
}
)
;
}
else
{
childElements
.
push
(
children
)
;
}
return
createElement
(
tagName
{
className
:
"
objectBox
objectBox
-
jsonml
"
key
:
jsonml
-
{
tagName
}
-
{
props
.
object
.
index
?
?
0
}
style
}
childElements
)
;
}
function
supportsObject
(
grip
)
{
return
grip
?
.
useCustomFormatter
=
=
=
true
&
&
Array
.
isArray
(
grip
?
.
header
)
;
}
module
.
exports
=
{
rep
:
wrapRender
(
JsonMl
)
supportsObject
}
;
}
)
;
