"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
{
button
span
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
wrapRender
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
-
utils
"
)
;
const
{
MODE
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
constants
"
)
;
Accessor
.
propTypes
=
{
object
:
PropTypes
.
object
.
isRequired
mode
:
PropTypes
.
oneOf
(
Object
.
values
(
MODE
)
)
shouldRenderTooltip
:
PropTypes
.
bool
}
;
function
Accessor
(
props
)
{
const
{
object
evaluation
onInvokeGetterButtonClick
shouldRenderTooltip
}
=
props
;
if
(
evaluation
)
{
const
{
Rep
Grip
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
"
)
;
return
span
(
{
className
:
"
objectBox
objectBox
-
accessor
objectTitle
"
}
Rep
(
{
.
.
.
props
object
:
evaluation
.
getterValue
mode
:
props
.
mode
|
|
MODE
.
TINY
defaultRep
:
Grip
}
)
)
;
}
if
(
hasGetter
(
object
)
&
&
onInvokeGetterButtonClick
)
{
return
button
(
{
className
:
"
invoke
-
getter
"
title
:
"
Invoke
getter
"
onClick
:
event
=
>
{
onInvokeGetterButtonClick
(
)
;
event
.
stopPropagation
(
)
;
}
}
)
;
}
const
accessors
=
[
]
;
if
(
hasGetter
(
object
)
)
{
accessors
.
push
(
"
Getter
"
)
;
}
if
(
hasSetter
(
object
)
)
{
accessors
.
push
(
"
Setter
"
)
;
}
const
accessorsString
=
accessors
.
join
(
"
&
"
)
;
return
span
(
{
className
:
"
objectBox
objectBox
-
accessor
objectTitle
"
title
:
shouldRenderTooltip
?
accessorsString
:
null
}
accessorsString
)
;
}
function
hasGetter
(
object
)
{
return
object
&
&
object
.
get
&
&
object
.
get
.
type
!
=
=
"
undefined
"
;
}
function
hasSetter
(
object
)
{
return
object
&
&
object
.
set
&
&
object
.
set
.
type
!
=
=
"
undefined
"
;
}
function
supportsObject
(
object
)
{
return
hasGetter
(
object
)
|
|
hasSetter
(
object
)
;
}
module
.
exports
=
{
rep
:
wrapRender
(
Accessor
)
supportsObject
}
;
}
)
;
