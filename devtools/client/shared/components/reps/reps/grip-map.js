"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
{
span
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
{
lengthBubble
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
shared
/
grip
-
length
-
bubble
.
js
"
)
;
const
{
interleave
wrapRender
ellipsisElement
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
-
utils
.
js
"
)
;
const
PropRep
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
prop
-
rep
.
js
"
)
;
const
{
MODE
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
constants
.
js
"
)
;
GripMap
.
propTypes
=
{
object
:
PropTypes
.
object
mode
:
PropTypes
.
oneOf
(
Object
.
values
(
MODE
)
)
isInterestingEntry
:
PropTypes
.
func
onDOMNodeMouseOver
:
PropTypes
.
func
onDOMNodeMouseOut
:
PropTypes
.
func
onInspectIconClick
:
PropTypes
.
func
title
:
PropTypes
.
string
shouldRenderTooltip
:
PropTypes
.
bool
}
;
function
GripMap
(
props
)
{
const
{
mode
object
shouldRenderTooltip
}
=
props
;
const
config
=
{
"
data
-
link
-
actor
-
id
"
:
object
.
actor
className
:
"
objectBox
objectBox
-
object
"
title
:
shouldRenderTooltip
?
getTooltip
(
object
props
)
:
null
}
;
const
title
=
getTitle
(
props
object
)
;
const
isEmpty
=
getLength
(
object
)
=
=
=
0
;
if
(
isEmpty
|
|
mode
=
=
=
MODE
.
TINY
|
|
mode
=
=
=
MODE
.
HEADER
)
{
return
span
(
config
title
)
;
}
const
propsArray
=
safeEntriesIterator
(
props
object
maxLengthMap
.
get
(
mode
)
)
;
return
span
(
config
title
span
(
{
className
:
"
objectLeftBrace
"
}
"
{
"
)
.
.
.
interleave
(
propsArray
"
"
)
span
(
{
className
:
"
objectRightBrace
"
}
"
}
"
)
)
;
}
function
getTitle
(
props
object
)
{
const
title
=
props
.
title
|
|
(
object
&
&
object
.
class
?
object
.
class
:
"
Map
"
)
;
return
span
(
{
className
:
"
objectTitle
"
}
title
lengthBubble
(
{
object
mode
:
props
.
mode
maxLengthMap
getLength
showZeroLength
:
true
}
)
)
;
}
function
getTooltip
(
object
props
)
{
const
tooltip
=
props
.
title
|
|
(
object
&
&
object
.
class
?
object
.
class
:
"
Map
"
)
;
return
{
tooltip
}
(
{
getLength
(
object
)
}
)
;
}
function
safeEntriesIterator
(
props
object
max
)
{
max
=
typeof
max
=
=
=
"
undefined
"
?
3
:
max
;
try
{
return
entriesIterator
(
props
object
max
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
return
[
]
;
}
function
entriesIterator
(
props
object
max
)
{
const
isInterestingEntry
=
props
.
isInterestingEntry
|
|
(
(
type
value
)
=
>
{
return
(
type
=
=
"
boolean
"
|
|
type
=
=
"
number
"
|
|
(
type
=
=
"
string
"
&
&
!
!
value
.
length
)
)
;
}
)
;
const
mapEntries
=
object
.
preview
&
&
object
.
preview
.
entries
?
object
.
preview
.
entries
:
[
]
;
let
indexes
=
getEntriesIndexes
(
mapEntries
max
isInterestingEntry
)
;
if
(
indexes
.
length
<
max
&
&
indexes
.
length
<
mapEntries
.
length
)
{
indexes
=
indexes
.
concat
(
getEntriesIndexes
(
mapEntries
max
-
indexes
.
length
(
t
value
name
)
=
>
{
return
!
isInterestingEntry
(
t
value
name
)
;
}
)
)
;
}
const
entries
=
getEntries
(
props
mapEntries
indexes
)
;
if
(
entries
.
length
<
getLength
(
object
)
)
{
entries
.
push
(
ellipsisElement
)
;
}
return
entries
;
}
function
getEntries
(
props
entries
indexes
)
{
const
{
onDOMNodeMouseOver
onDOMNodeMouseOut
onInspectIconClick
}
=
props
;
indexes
.
sort
(
function
(
a
b
)
{
return
a
-
b
;
}
)
;
return
indexes
.
map
(
index
=
>
{
const
[
key
entryValue
]
=
entries
[
index
]
;
const
value
=
entryValue
.
value
!
=
=
undefined
?
entryValue
.
value
:
entryValue
;
return
PropRep
(
{
name
:
key
&
&
key
.
getGrip
?
key
.
getGrip
(
)
:
key
equal
:
"
\
u2192
"
object
:
value
&
&
value
.
getGrip
?
value
.
getGrip
(
)
:
value
mode
:
MODE
.
TINY
onDOMNodeMouseOver
onDOMNodeMouseOut
onInspectIconClick
}
)
;
}
)
;
}
function
getEntriesIndexes
(
entries
max
filter
)
{
return
entries
.
reduce
(
(
indexes
[
key
entry
]
i
)
=
>
{
if
(
indexes
.
length
<
max
)
{
const
value
=
entry
&
&
entry
.
value
!
=
=
undefined
?
entry
.
value
:
entry
;
const
type
=
(
value
&
&
value
.
class
?
value
.
class
:
typeof
value
)
.
toLowerCase
(
)
;
if
(
filter
(
type
value
key
)
)
{
indexes
.
push
(
i
)
;
}
}
return
indexes
;
}
[
]
)
;
}
function
getLength
(
grip
)
{
return
grip
.
preview
.
size
|
|
0
;
}
function
supportsObject
(
grip
)
{
return
grip
?
.
preview
?
.
kind
=
=
"
MapLike
"
;
}
const
maxLengthMap
=
new
Map
(
)
;
maxLengthMap
.
set
(
MODE
.
SHORT
3
)
;
maxLengthMap
.
set
(
MODE
.
LONG
10
)
;
module
.
exports
=
{
rep
:
wrapRender
(
GripMap
)
supportsObject
maxLengthMap
getLength
}
;
}
)
;
