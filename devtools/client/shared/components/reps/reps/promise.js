"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
PropTypes
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
.
js
"
)
;
const
{
span
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
.
js
"
)
;
const
{
getGripType
wrapRender
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
-
utils
.
js
"
)
;
const
Grip
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
grip
.
js
"
)
;
const
{
MODE
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
constants
.
js
"
)
;
PromiseRep
.
propTypes
=
{
object
:
PropTypes
.
object
.
isRequired
mode
:
PropTypes
.
oneOf
(
Object
.
values
(
MODE
)
)
onDOMNodeMouseOver
:
PropTypes
.
func
onDOMNodeMouseOut
:
PropTypes
.
func
onInspectIconClick
:
PropTypes
.
func
shouldRenderTooltip
:
PropTypes
.
bool
}
;
function
PromiseRep
(
props
)
{
const
object
=
props
.
object
;
if
(
object
.
promiseState
)
{
const
{
state
value
reason
}
=
object
.
promiseState
;
const
ownProperties
=
Object
.
create
(
null
)
;
ownProperties
[
"
<
state
>
"
]
=
{
value
:
state
}
;
let
ownPropertiesLength
=
1
;
if
(
state
=
=
"
fulfilled
"
)
{
ownProperties
[
"
<
value
>
"
]
=
{
value
}
;
+
+
ownPropertiesLength
;
}
else
if
(
state
=
=
"
rejected
"
)
{
ownProperties
[
"
<
reason
>
"
]
=
{
value
:
reason
}
;
+
+
ownPropertiesLength
;
}
object
.
preview
=
{
kind
:
"
Object
"
ownProperties
ownPropertiesLength
}
;
}
if
(
props
.
mode
!
=
=
MODE
.
TINY
&
&
props
.
mode
!
=
=
MODE
.
HEADER
)
{
return
Grip
.
rep
(
props
)
;
}
const
shouldRenderTooltip
=
props
.
shouldRenderTooltip
;
const
config
=
{
"
data
-
link
-
actor
-
id
"
:
object
.
actor
className
:
"
objectBox
objectBox
-
object
"
title
:
shouldRenderTooltip
?
"
Promise
"
:
null
}
;
if
(
props
.
mode
=
=
=
MODE
.
HEADER
)
{
return
span
(
config
getTitle
(
object
)
)
;
}
const
{
Rep
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
rep
.
js
"
)
;
return
span
(
config
getTitle
(
object
)
span
(
{
className
:
"
objectLeftBrace
"
}
"
{
"
)
Rep
(
{
object
:
object
.
preview
.
ownProperties
[
"
<
state
>
"
]
.
value
}
)
span
(
{
className
:
"
objectRightBrace
"
}
"
}
"
)
)
;
}
function
getTitle
(
object
)
{
return
span
(
{
className
:
"
objectTitle
"
}
object
.
class
)
;
}
function
supportsObject
(
object
noGrip
=
false
)
{
if
(
!
Grip
.
supportsObject
(
object
noGrip
)
)
{
return
false
;
}
return
getGripType
(
object
noGrip
)
=
=
"
Promise
"
;
}
module
.
exports
=
{
rep
:
wrapRender
(
PromiseRep
)
supportsObject
}
;
}
)
;
