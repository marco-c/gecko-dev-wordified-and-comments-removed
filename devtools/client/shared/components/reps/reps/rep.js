"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
Undefined
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
undefined
.
js
"
)
;
const
Null
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
null
.
js
"
)
;
const
StringRep
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
string
.
js
"
)
;
const
Number
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
number
.
js
"
)
;
const
JsonNumber
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
json
-
number
.
js
"
)
;
const
ArrayRep
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
array
.
js
"
)
;
const
Obj
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
object
.
js
"
)
;
const
SymbolRep
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
symbol
.
js
"
)
;
const
InfinityRep
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
infinity
.
js
"
)
;
const
NaNRep
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
nan
.
js
"
)
;
const
Accessor
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
accessor
.
js
"
)
;
const
Accessible
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
accessible
.
js
"
)
;
const
Attribute
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
attribute
.
js
"
)
;
const
BigInt
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
big
-
int
.
js
"
)
;
const
DateTime
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
date
-
time
.
js
"
)
;
const
Document
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
document
.
js
"
)
;
const
DocumentType
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
document
-
type
.
js
"
)
;
const
Event
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
event
.
js
"
)
;
const
Func
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
function
.
js
"
)
;
const
PromiseRep
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
promise
.
js
"
)
;
const
RegExp
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
regexp
.
js
"
)
;
const
StyleSheet
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
stylesheet
.
js
"
)
;
const
CommentNode
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
comment
-
node
.
js
"
)
;
const
ElementNode
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
element
-
node
.
js
"
)
;
const
TextNode
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
text
-
node
.
js
"
)
;
const
ErrorRep
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
error
.
js
"
)
;
const
Window
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
window
.
js
"
)
;
const
ObjectWithText
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
object
-
with
-
text
.
js
"
)
;
const
ObjectWithURL
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
object
-
with
-
url
.
js
"
)
;
const
GripArray
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
grip
-
array
.
js
"
)
;
const
GripEntry
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
grip
-
entry
.
js
"
)
;
const
GripMap
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
grip
-
map
.
js
"
)
;
const
Grip
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
grip
.
js
"
)
;
const
reps
=
[
RegExp
StyleSheet
Event
DateTime
CommentNode
Accessible
ElementNode
TextNode
Attribute
Func
PromiseRep
Document
DocumentType
Window
ObjectWithText
ObjectWithURL
ErrorRep
GripArray
GripMap
GripEntry
Grip
Undefined
Null
StringRep
Number
BigInt
SymbolRep
InfinityRep
NaNRep
Accessor
]
;
const
noGripReps
=
[
StringRep
JsonNumber
Number
ArrayRep
Undefined
Null
Obj
]
;
const
Rep
=
function
(
props
)
{
const
{
object
defaultRep
}
=
props
;
const
rep
=
getRep
(
object
defaultRep
props
.
noGrip
props
.
mayUseCustomFormatter
)
;
return
rep
(
props
)
;
}
;
const
exportedReps
=
{
Accessible
Accessor
ArrayRep
Attribute
BigInt
CommentNode
DateTime
Document
DocumentType
ElementNode
ErrorRep
Event
Func
Grip
GripArray
GripMap
GripEntry
InfinityRep
NaNRep
Null
Number
Obj
ObjectWithText
ObjectWithURL
PromiseRep
RegExp
Rep
StringRep
StyleSheet
SymbolRep
TextNode
Undefined
Window
}
;
if
(
typeof
Services
=
=
"
object
"
&
&
Services
?
.
prefs
)
{
const
useCustomFormatters
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
custom
-
formatters
.
enabled
"
false
)
;
if
(
useCustomFormatters
)
{
const
CustomFormatter
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
reps
/
custom
-
formatter
.
js
"
)
;
reps
.
unshift
(
CustomFormatter
)
;
exportedReps
.
CustomFormatter
=
CustomFormatter
;
}
}
function
getRep
(
object
defaultRep
=
Grip
noGrip
=
false
mayUseCustomFormatter
=
false
)
{
const
repsList
=
noGrip
?
noGripReps
:
reps
;
for
(
const
rep
of
repsList
)
{
if
(
rep
=
=
=
exportedReps
.
CustomFormatter
&
&
!
mayUseCustomFormatter
)
{
continue
;
}
try
{
if
(
rep
.
supportsObject
(
object
noGrip
)
)
{
return
rep
.
rep
;
}
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
}
return
defaultRep
.
rep
;
}
module
.
exports
=
{
Rep
REPS
:
exportedReps
getRep
}
;
}
)
;
