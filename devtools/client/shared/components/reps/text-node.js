"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
isGrip
cropString
wrapRender
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
MODE
}
=
require
(
"
.
/
constants
"
)
;
const
DOM
=
React
.
DOM
;
let
TextNode
=
React
.
createClass
(
{
displayName
:
"
TextNode
"
propTypes
:
{
object
:
React
.
PropTypes
.
object
.
isRequired
mode
:
React
.
PropTypes
.
oneOf
(
Object
.
keys
(
MODE
)
.
map
(
key
=
>
MODE
[
key
]
)
)
objectLink
:
React
.
PropTypes
.
func
onDOMNodeMouseOver
:
React
.
PropTypes
.
func
onDOMNodeMouseOut
:
React
.
PropTypes
.
func
}
getTextContent
:
function
(
grip
)
{
return
cropString
(
grip
.
preview
.
textContent
)
;
}
getTitle
:
function
(
grip
)
{
const
title
=
"
#
text
"
;
if
(
this
.
props
.
objectLink
)
{
return
this
.
props
.
objectLink
(
{
object
:
grip
}
title
)
;
}
return
title
;
}
render
:
wrapRender
(
function
(
)
{
let
{
object
:
grip
mode
=
MODE
.
SHORT
}
=
this
.
props
;
let
baseConfig
=
{
className
:
"
objectBox
objectBox
-
textNode
"
}
;
if
(
this
.
props
.
onDOMNodeMouseOver
)
{
Object
.
assign
(
baseConfig
{
onMouseOver
:
_
=
>
this
.
props
.
onDOMNodeMouseOver
(
grip
)
}
)
;
}
if
(
this
.
props
.
onDOMNodeMouseOut
)
{
Object
.
assign
(
baseConfig
{
onMouseOut
:
this
.
props
.
onDOMNodeMouseOut
}
)
;
}
if
(
mode
=
=
=
MODE
.
TINY
)
{
return
DOM
.
span
(
baseConfig
this
.
getTitle
(
grip
)
)
;
}
return
(
DOM
.
span
(
baseConfig
this
.
getTitle
(
grip
)
DOM
.
span
(
{
className
:
"
nodeValue
"
}
"
"
"
{
this
.
getTextContent
(
grip
)
}
"
)
)
)
;
}
)
}
)
;
function
supportsObject
(
grip
type
)
{
if
(
!
isGrip
(
grip
)
)
{
return
false
;
}
return
(
grip
.
preview
&
&
grip
.
class
=
=
"
Text
"
)
;
}
exports
.
TextNode
=
{
rep
:
TextNode
supportsObject
:
supportsObject
}
;
}
)
;
