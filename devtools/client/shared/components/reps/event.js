"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
isGrip
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
span
}
=
React
.
DOM
;
let
Event
=
React
.
createClass
(
{
displayName
:
"
event
"
propTypes
:
{
object
:
React
.
PropTypes
.
object
.
isRequired
}
getTitle
:
function
(
grip
)
{
if
(
this
.
props
.
objectLink
)
{
return
this
.
props
.
objectLink
(
{
object
:
grip
}
grip
.
preview
.
type
)
;
}
return
grip
.
preview
.
type
;
}
summarizeEvent
:
function
(
grip
)
{
let
info
=
[
]
;
let
eventFamily
=
grip
.
class
;
let
props
=
grip
.
preview
.
properties
;
if
(
eventFamily
=
=
"
MouseEvent
"
)
{
info
.
push
(
"
clientX
=
"
props
.
clientX
"
clientY
=
"
props
.
clientY
)
;
}
else
if
(
eventFamily
=
=
"
KeyboardEvent
"
)
{
info
.
push
(
"
charCode
=
"
props
.
charCode
"
keyCode
=
"
props
.
keyCode
)
;
}
else
if
(
eventFamily
=
=
"
MessageEvent
"
)
{
info
.
push
(
"
origin
=
"
props
.
origin
"
data
=
"
props
.
data
)
;
}
return
info
.
join
(
"
"
)
;
}
render
:
function
(
)
{
let
grip
=
this
.
props
.
object
;
return
(
span
(
{
className
:
"
objectBox
objectBox
-
event
"
}
this
.
getTitle
(
grip
)
this
.
summarizeEvent
(
grip
)
)
)
;
}
}
)
;
function
supportsObject
(
grip
type
)
{
if
(
!
isGrip
(
grip
)
)
{
return
false
;
}
return
(
grip
.
preview
&
&
grip
.
preview
.
kind
=
=
"
DOMEvent
"
)
;
}
exports
.
Event
=
{
rep
:
Event
supportsObject
:
supportsObject
}
;
}
)
;
