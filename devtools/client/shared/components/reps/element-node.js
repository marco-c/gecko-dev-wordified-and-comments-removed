"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
isGrip
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
nodeConstants
=
require
(
"
devtools
/
shared
/
dom
-
node
-
constants
"
)
;
const
{
span
}
=
React
.
DOM
;
const
ElementNode
=
React
.
createClass
(
{
displayName
:
"
ElementNode
"
propTypes
:
{
object
:
React
.
PropTypes
.
object
.
isRequired
mode
:
React
.
PropTypes
.
string
}
getElements
:
function
(
grip
mode
)
{
let
{
attributes
nodeName
}
=
grip
.
preview
;
const
nodeNameElement
=
span
(
{
className
:
"
tag
-
name
theme
-
fg
-
color3
"
}
nodeName
)
;
if
(
mode
=
=
=
"
tiny
"
)
{
let
elements
=
[
nodeNameElement
]
;
if
(
attributes
.
id
)
{
elements
.
push
(
span
(
{
className
:
"
attr
-
name
theme
-
fg
-
color2
"
}
#
{
attributes
.
id
}
)
)
;
}
if
(
attributes
.
class
)
{
elements
.
push
(
span
(
{
className
:
"
attr
-
name
theme
-
fg
-
color2
"
}
attributes
.
class
.
replace
(
/
(
^
\
s
+
)
|
(
\
s
+
)
/
g
"
"
)
.
split
(
"
"
)
.
map
(
cls
=
>
.
{
cls
}
)
.
join
(
"
"
)
)
)
;
}
return
elements
;
}
let
attributeElements
=
Object
.
keys
(
attributes
)
.
sort
(
function
getIdAndClassFirst
(
a1
a2
)
{
if
(
[
a1
a2
]
.
includes
(
"
id
"
)
)
{
return
3
*
(
a1
=
=
=
"
id
"
?
-
1
:
1
)
;
}
if
(
[
a1
a2
]
.
includes
(
"
class
"
)
)
{
return
2
*
(
a1
=
=
=
"
class
"
?
-
1
:
1
)
;
}
return
0
;
}
)
.
reduce
(
(
arr
name
i
keys
)
=
>
{
let
value
=
attributes
[
name
]
;
let
attribute
=
span
(
{
}
span
(
{
className
:
"
attr
-
name
theme
-
fg
-
color2
"
}
{
name
}
)
=
"
span
(
{
className
:
"
attr
-
value
theme
-
fg
-
color6
"
}
{
value
}
)
"
)
;
return
arr
.
concat
(
[
"
"
attribute
]
)
;
}
[
]
)
;
return
[
"
<
"
nodeNameElement
.
.
.
attributeElements
"
>
"
]
;
}
render
:
function
(
)
{
let
{
object
mode
onDOMNodeMouseOver
onDOMNodeMouseOut
}
=
this
.
props
;
let
elements
=
this
.
getElements
(
object
mode
)
;
let
objectLink
=
this
.
props
.
objectLink
|
|
span
;
let
baseConfig
=
{
className
:
"
objectBox
objectBox
-
node
"
}
;
if
(
onDOMNodeMouseOver
)
{
Object
.
assign
(
baseConfig
{
onMouseOver
:
_
=
>
onDOMNodeMouseOver
(
object
)
}
)
;
}
if
(
onDOMNodeMouseOut
)
{
Object
.
assign
(
baseConfig
{
onMouseOut
:
onDOMNodeMouseOut
}
)
;
}
return
objectLink
(
{
object
}
span
(
baseConfig
.
.
.
elements
)
)
;
}
}
)
;
function
supportsObject
(
object
type
)
{
if
(
!
isGrip
(
object
)
)
{
return
false
;
}
return
object
.
preview
&
&
object
.
preview
.
nodeType
=
=
=
nodeConstants
.
ELEMENT_NODE
;
}
exports
.
ElementNode
=
{
rep
:
ElementNode
supportsObject
:
supportsObject
}
;
}
)
;
