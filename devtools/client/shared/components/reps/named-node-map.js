"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
isGrip
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
ObjectBox
}
=
createFactories
(
require
(
"
.
/
object
-
box
"
)
)
;
const
{
Caption
}
=
createFactories
(
require
(
"
.
/
caption
"
)
)
;
const
{
span
}
=
React
.
DOM
;
let
NamedNodeMap
=
React
.
createClass
(
{
displayName
:
"
NamedNodeMap
"
propTypes
:
{
object
:
React
.
PropTypes
.
object
.
isRequired
mode
:
React
.
PropTypes
.
string
provider
:
React
.
PropTypes
.
object
}
getLength
:
function
(
object
)
{
return
object
.
preview
.
length
;
}
getTitle
:
function
(
object
)
{
if
(
this
.
props
.
objectLink
&
&
object
.
class
)
{
return
this
.
props
.
objectLink
(
{
object
:
object
}
object
.
class
)
;
}
return
object
.
class
?
object
.
class
:
"
"
;
}
getItems
:
function
(
array
max
)
{
let
items
=
this
.
propIterator
(
array
max
)
;
items
=
items
.
map
(
item
=
>
PropRep
(
item
)
)
;
if
(
items
.
length
>
max
+
1
)
{
items
.
pop
(
)
;
let
objectLink
=
this
.
props
.
objectLink
|
|
span
;
items
.
push
(
Caption
(
{
key
:
"
more
"
object
:
objectLink
(
{
object
:
this
.
props
.
object
}
"
more
"
)
}
)
)
;
}
return
items
;
}
propIterator
:
function
(
grip
max
)
{
max
=
max
|
|
3
;
let
props
=
[
]
;
let
provider
=
this
.
props
.
provider
;
if
(
!
provider
)
{
return
props
;
}
let
ownProperties
=
grip
.
preview
?
grip
.
preview
.
ownProperties
:
[
]
;
for
(
let
name
in
ownProperties
)
{
if
(
props
.
length
>
max
)
{
break
;
}
let
item
=
ownProperties
[
name
]
;
let
label
=
provider
.
getLabel
(
item
)
;
let
value
=
provider
.
getValue
(
item
)
;
props
.
push
(
Object
.
assign
(
{
}
this
.
props
{
name
:
label
object
:
value
equal
:
"
:
"
delim
:
"
"
}
)
)
;
}
return
props
;
}
render
:
function
(
)
{
let
grip
=
this
.
props
.
object
;
let
mode
=
this
.
props
.
mode
;
let
items
;
if
(
mode
=
=
"
tiny
"
)
{
items
=
this
.
getLength
(
grip
)
;
}
else
{
let
max
=
(
mode
=
=
"
short
"
)
?
3
:
100
;
items
=
this
.
getItems
(
grip
max
)
;
}
let
objectLink
=
this
.
props
.
objectLink
|
|
span
;
return
(
ObjectBox
(
{
className
:
"
NamedNodeMap
"
}
this
.
getTitle
(
grip
)
objectLink
(
{
className
:
"
arrayLeftBracket
"
role
:
"
presentation
"
object
:
grip
}
"
[
"
)
items
objectLink
(
{
className
:
"
arrayRightBracket
"
role
:
"
presentation
"
object
:
grip
}
"
]
"
)
)
)
;
}
}
)
;
let
PropRep
=
React
.
createFactory
(
React
.
createClass
(
{
displayName
:
"
PropRep
"
propTypes
:
{
equal
:
React
.
PropTypes
.
string
delim
:
React
.
PropTypes
.
string
}
render
:
function
(
)
{
const
{
Rep
}
=
createFactories
(
require
(
"
.
/
rep
"
)
)
;
return
(
span
(
{
}
span
(
{
className
:
"
nodeName
"
}
"
prop
.
name
"
)
span
(
{
className
:
"
objectEqual
"
role
:
"
presentation
"
}
this
.
props
.
equal
)
Rep
(
this
.
props
)
span
(
{
className
:
"
objectComma
"
role
:
"
presentation
"
}
this
.
props
.
delim
)
)
)
;
}
}
)
)
;
function
supportsObject
(
grip
type
)
{
if
(
!
isGrip
(
grip
)
)
{
return
false
;
}
return
(
type
=
=
"
NamedNodeMap
"
&
&
grip
.
preview
)
;
}
exports
.
NamedNodeMap
=
{
rep
:
NamedNodeMap
supportsObject
:
supportsObject
}
;
}
)
;
