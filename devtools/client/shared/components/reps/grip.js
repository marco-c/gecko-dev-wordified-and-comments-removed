"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
isGrip
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
Caption
}
=
createFactories
(
require
(
"
.
/
caption
"
)
)
;
const
{
PropRep
}
=
createFactories
(
require
(
"
.
/
prop
-
rep
"
)
)
;
const
{
MODE
}
=
require
(
"
.
/
constants
"
)
;
const
{
span
}
=
React
.
DOM
;
const
GripRep
=
React
.
createClass
(
{
displayName
:
"
Grip
"
propTypes
:
{
object
:
React
.
PropTypes
.
object
.
isRequired
mode
:
React
.
PropTypes
.
oneOf
(
Object
.
keys
(
MODE
)
.
map
(
key
=
>
MODE
[
key
]
)
)
isInterestingProp
:
React
.
PropTypes
.
func
}
getTitle
:
function
(
object
)
{
if
(
this
.
props
.
objectLink
)
{
return
this
.
props
.
objectLink
(
{
object
:
object
}
object
.
class
)
;
}
return
object
.
class
|
|
"
Object
"
;
}
safePropIterator
:
function
(
object
max
)
{
max
=
(
typeof
max
=
=
=
"
undefined
"
)
?
3
:
max
;
try
{
return
this
.
propIterator
(
object
max
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
return
[
]
;
}
propIterator
:
function
(
object
max
)
{
if
(
object
.
preview
&
&
Object
.
keys
(
object
.
preview
)
.
includes
(
"
wrappedValue
"
)
)
{
const
{
Rep
}
=
createFactories
(
require
(
"
.
/
rep
"
)
)
;
return
[
Rep
(
{
object
:
object
.
preview
.
wrappedValue
mode
:
this
.
props
.
mode
|
|
MODE
.
TINY
defaultRep
:
Grip
}
)
]
;
}
let
isInterestingProp
=
this
.
props
.
isInterestingProp
|
|
(
(
type
value
)
=
>
{
return
(
type
=
=
"
boolean
"
|
|
type
=
=
"
number
"
|
|
(
type
=
=
"
string
"
&
&
value
.
length
!
=
0
)
)
;
}
)
;
let
properties
=
object
.
preview
?
object
.
preview
.
ownProperties
:
{
}
;
let
propertiesLength
=
object
.
preview
&
&
object
.
preview
.
ownPropertiesLength
?
object
.
preview
.
ownPropertiesLength
:
object
.
ownPropertyLength
;
if
(
object
.
preview
&
&
object
.
preview
.
safeGetterValues
)
{
properties
=
Object
.
assign
(
{
}
properties
object
.
preview
.
safeGetterValues
)
;
propertiesLength
+
=
Object
.
keys
(
object
.
preview
.
safeGetterValues
)
.
length
;
}
let
indexes
=
this
.
getPropIndexes
(
properties
max
isInterestingProp
)
;
if
(
indexes
.
length
<
max
&
&
indexes
.
length
<
propertiesLength
)
{
indexes
=
indexes
.
concat
(
this
.
getPropIndexes
(
properties
max
-
indexes
.
length
(
t
value
name
)
=
>
{
return
!
isInterestingProp
(
t
value
name
)
;
}
)
)
;
}
const
truncate
=
Object
.
keys
(
properties
)
.
length
>
max
;
let
props
=
this
.
getProps
(
properties
indexes
truncate
)
;
if
(
truncate
)
{
let
objectLink
=
this
.
props
.
objectLink
|
|
span
;
props
.
push
(
Caption
(
{
object
:
objectLink
(
{
object
:
object
}
{
object
.
ownPropertyLength
-
max
}
more
)
}
)
)
;
}
return
props
;
}
getProps
:
function
(
properties
indexes
truncate
)
{
let
props
=
[
]
;
indexes
.
sort
(
function
(
a
b
)
{
return
a
-
b
;
}
)
;
indexes
.
forEach
(
(
i
)
=
>
{
let
name
=
Object
.
keys
(
properties
)
[
i
]
;
let
value
=
this
.
getPropValue
(
properties
[
name
]
)
;
props
.
push
(
PropRep
(
Object
.
assign
(
{
}
this
.
props
{
mode
:
MODE
.
TINY
name
:
name
object
:
value
equal
:
"
:
"
delim
:
i
!
=
=
indexes
.
length
-
1
|
|
truncate
?
"
"
:
"
"
defaultRep
:
Grip
}
)
)
)
;
}
)
;
return
props
;
}
getPropIndexes
:
function
(
properties
max
filter
)
{
let
indexes
=
[
]
;
try
{
let
i
=
0
;
for
(
let
name
in
properties
)
{
if
(
indexes
.
length
>
=
max
)
{
return
indexes
;
}
let
value
=
this
.
getPropValue
(
properties
[
name
]
)
;
let
type
=
(
value
.
class
|
|
typeof
value
)
;
type
=
type
.
toLowerCase
(
)
;
if
(
filter
(
type
value
name
)
)
{
indexes
.
push
(
i
)
;
}
i
+
+
;
}
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
return
indexes
;
}
getPropValue
:
function
(
property
)
{
let
value
=
property
;
if
(
typeof
property
=
=
=
"
object
"
)
{
let
keys
=
Object
.
keys
(
property
)
;
if
(
keys
.
includes
(
"
value
"
)
)
{
value
=
property
.
value
;
}
else
if
(
keys
.
includes
(
"
getterValue
"
)
)
{
value
=
property
.
getterValue
;
}
}
return
value
;
}
render
:
function
(
)
{
let
object
=
this
.
props
.
object
;
let
props
=
this
.
safePropIterator
(
object
(
this
.
props
.
mode
=
=
=
MODE
.
LONG
)
?
10
:
3
)
;
let
objectLink
=
this
.
props
.
objectLink
|
|
span
;
if
(
this
.
props
.
mode
=
=
=
MODE
.
TINY
)
{
return
(
span
(
{
className
:
"
objectBox
objectBox
-
object
"
}
this
.
getTitle
(
object
)
objectLink
(
{
className
:
"
objectLeftBrace
"
object
:
object
}
"
"
)
)
)
;
}
return
(
span
(
{
className
:
"
objectBox
objectBox
-
object
"
}
this
.
getTitle
(
object
)
objectLink
(
{
className
:
"
objectLeftBrace
"
object
:
object
}
"
{
"
)
.
.
.
props
objectLink
(
{
className
:
"
objectRightBrace
"
object
:
object
}
"
}
"
)
)
)
;
}
}
)
;
function
supportsObject
(
object
type
)
{
if
(
!
isGrip
(
object
)
)
{
return
false
;
}
return
(
object
.
preview
&
&
object
.
preview
.
ownProperties
)
;
}
let
Grip
=
{
rep
:
GripRep
supportsObject
:
supportsObject
}
;
exports
.
Grip
=
Grip
;
}
)
;
