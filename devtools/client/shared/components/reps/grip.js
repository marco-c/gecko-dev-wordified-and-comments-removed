"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
isGrip
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
ObjectBox
}
=
createFactories
(
require
(
"
.
/
object
-
box
"
)
)
;
const
{
Caption
}
=
createFactories
(
require
(
"
.
/
caption
"
)
)
;
const
{
PropRep
}
=
createFactories
(
require
(
"
.
/
prop
-
rep
"
)
)
;
const
{
span
}
=
React
.
DOM
;
const
Grip
=
React
.
createClass
(
{
displayName
:
"
Grip
"
propTypes
:
{
object
:
React
.
PropTypes
.
object
.
isRequired
mode
:
React
.
PropTypes
.
string
}
getTitle
:
function
(
object
)
{
if
(
this
.
props
.
objectLink
)
{
return
this
.
props
.
objectLink
(
{
object
:
object
}
object
.
class
)
;
}
return
object
.
class
|
|
"
Object
"
;
}
safePropIterator
:
function
(
object
max
)
{
max
=
(
typeof
max
=
=
=
"
undefined
"
)
?
3
:
max
;
try
{
return
this
.
propIterator
(
object
max
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
return
[
]
;
}
propIterator
:
function
(
object
max
)
{
let
isInterestingProp
=
(
type
value
)
=
>
{
return
(
type
=
=
"
boolean
"
|
|
type
=
=
"
number
"
|
|
type
=
=
"
string
"
|
|
type
=
=
"
object
"
)
;
}
;
let
props
=
this
.
getProps
(
object
max
isInterestingProp
)
;
if
(
props
.
length
<
=
max
)
{
props
=
props
.
concat
(
this
.
getProps
(
object
max
(
t
value
)
=
>
{
return
!
isInterestingProp
(
t
value
)
;
}
)
)
;
}
if
(
props
.
length
>
max
)
{
props
.
pop
(
)
;
let
objectLink
=
this
.
props
.
objectLink
|
|
span
;
props
.
push
(
Caption
(
{
key
:
"
more
"
object
:
objectLink
(
{
object
:
object
}
"
more
"
)
}
)
)
;
}
else
if
(
props
.
length
>
0
)
{
let
last
=
props
.
length
-
1
;
props
[
last
]
=
React
.
cloneElement
(
props
[
last
]
{
delim
:
"
"
}
)
;
}
return
props
;
}
getProps
:
function
(
object
max
filter
)
{
let
props
=
[
]
;
max
=
max
|
|
3
;
if
(
!
object
)
{
return
props
;
}
try
{
let
ownProperties
=
object
.
preview
?
object
.
preview
.
ownProperties
:
[
]
;
for
(
let
name
in
ownProperties
)
{
if
(
props
.
length
>
max
)
{
return
props
;
}
let
prop
=
ownProperties
[
name
]
;
let
value
=
prop
.
value
|
|
{
}
;
let
type
=
(
value
.
class
|
|
typeof
value
)
;
type
=
type
.
toLowerCase
(
)
;
if
(
filter
(
type
value
)
)
{
props
.
push
(
PropRep
(
Object
.
assign
(
{
}
this
.
props
{
key
:
name
mode
:
"
tiny
"
name
:
name
object
:
value
equal
:
"
:
"
delim
:
"
"
}
)
)
)
;
}
}
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
return
props
;
}
render
:
function
(
)
{
let
object
=
this
.
props
.
object
;
let
props
=
this
.
safePropIterator
(
object
(
this
.
props
.
mode
=
=
"
long
"
)
?
100
:
3
)
;
let
objectLink
=
this
.
props
.
objectLink
|
|
span
;
if
(
this
.
props
.
mode
=
=
"
tiny
"
|
|
!
props
.
length
)
{
return
(
ObjectBox
(
{
className
:
"
object
"
}
this
.
getTitle
(
object
)
objectLink
(
{
className
:
"
objectLeftBrace
"
role
:
"
presentation
"
object
:
object
}
"
"
)
)
)
;
}
return
(
ObjectBox
(
{
className
:
"
object
"
}
this
.
getTitle
(
object
)
objectLink
(
{
className
:
"
objectLeftBrace
"
role
:
"
presentation
"
object
:
object
}
"
{
"
)
props
objectLink
(
{
className
:
"
objectRightBrace
"
role
:
"
presentation
"
object
:
object
}
"
}
"
)
)
)
;
}
}
)
;
function
supportsObject
(
object
type
)
{
if
(
!
isGrip
(
object
)
)
{
return
false
;
}
return
(
object
.
preview
&
&
object
.
preview
.
ownProperties
)
;
}
exports
.
Grip
=
{
rep
:
Grip
supportsObject
:
supportsObject
}
;
}
)
;
