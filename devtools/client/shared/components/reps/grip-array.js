"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
isGrip
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
ObjectBox
}
=
createFactories
(
require
(
"
.
/
object
-
box
"
)
)
;
const
{
Caption
}
=
createFactories
(
require
(
"
.
/
caption
"
)
)
;
const
{
a
span
}
=
React
.
DOM
;
let
GripArray
=
React
.
createClass
(
{
displayName
:
"
GripArray
"
propTypes
:
{
object
:
React
.
PropTypes
.
object
.
isRequired
mode
:
React
.
PropTypes
.
string
provider
:
React
.
PropTypes
.
object
}
getLength
:
function
(
grip
)
{
return
grip
.
preview
?
grip
.
preview
.
length
:
0
;
}
getTitle
:
function
(
object
context
)
{
return
"
[
"
+
object
.
length
+
"
]
"
;
}
arrayIterator
:
function
(
grip
max
)
{
let
items
=
[
]
;
if
(
!
grip
.
preview
|
|
!
grip
.
preview
.
length
)
{
return
items
;
}
let
array
=
grip
.
preview
.
items
;
if
(
!
array
)
{
return
items
;
}
let
provider
=
this
.
props
.
provider
;
if
(
!
provider
)
{
return
items
;
}
let
delim
;
for
(
let
i
=
0
;
i
<
array
.
length
&
&
i
<
=
max
;
i
+
+
)
{
try
{
let
value
=
provider
.
getValue
(
array
[
i
]
)
;
delim
=
(
i
=
=
array
.
length
-
1
?
"
"
:
"
"
)
;
if
(
value
=
=
=
array
)
{
items
.
push
(
Reference
(
{
key
:
i
object
:
value
delim
:
delim
}
)
)
;
}
else
{
items
.
push
(
GripArrayItem
(
Object
.
assign
(
{
}
this
.
props
{
key
:
i
object
:
value
delim
:
delim
}
)
)
)
;
}
}
catch
(
exc
)
{
items
.
push
(
GripArrayItem
(
Object
.
assign
(
{
}
this
.
props
{
object
:
exc
delim
:
delim
key
:
i
}
)
)
)
;
}
}
if
(
array
.
length
>
max
+
1
)
{
items
.
pop
(
)
;
items
.
push
(
Caption
(
{
key
:
"
more
"
object
:
"
more
.
.
.
"
}
)
)
;
}
return
items
;
}
hasSpecialProperties
:
function
(
array
)
{
return
false
;
}
onToggleProperties
:
function
(
event
)
{
}
onClickBracket
:
function
(
event
)
{
}
render
:
function
(
)
{
let
mode
=
this
.
props
.
mode
|
|
"
short
"
;
let
object
=
this
.
props
.
object
;
let
items
;
if
(
mode
=
=
"
tiny
"
)
{
items
=
span
(
{
className
:
"
length
"
}
this
.
getLength
(
object
)
)
;
}
else
{
let
max
=
(
mode
=
=
"
short
"
)
?
3
:
300
;
items
=
this
.
arrayIterator
(
object
max
)
;
}
return
(
ObjectBox
(
{
className
:
"
array
"
onClick
:
this
.
onToggleProperties
}
a
(
{
className
:
"
objectLink
"
onclick
:
this
.
onClickBracket
}
span
(
{
className
:
"
arrayLeftBracket
"
role
:
"
presentation
"
}
"
[
"
)
)
items
a
(
{
className
:
"
objectLink
"
onclick
:
this
.
onClickBracket
}
span
(
{
className
:
"
arrayRightBracket
"
role
:
"
presentation
"
}
"
]
"
)
)
span
(
{
className
:
"
arrayProperties
"
role
:
"
group
"
}
)
)
)
;
}
}
)
;
let
GripArrayItem
=
React
.
createFactory
(
React
.
createClass
(
{
displayName
:
"
GripArrayItem
"
propTypes
:
{
delim
:
React
.
PropTypes
.
string
}
render
:
function
(
)
{
let
{
Rep
}
=
createFactories
(
require
(
"
.
/
rep
"
)
)
;
return
(
span
(
{
}
Rep
(
Object
.
assign
(
{
}
this
.
props
{
mode
:
"
tiny
"
}
)
)
this
.
props
.
delim
)
)
;
}
}
)
)
;
let
Reference
=
React
.
createFactory
(
React
.
createClass
(
{
displayName
:
"
Reference
"
render
:
function
(
)
{
return
(
span
(
{
title
:
"
Circular
reference
"
}
"
[
.
.
.
]
"
)
)
;
}
}
)
)
;
function
supportsObject
(
grip
type
)
{
if
(
!
isGrip
(
grip
)
)
{
return
false
;
}
return
(
grip
.
preview
&
&
grip
.
preview
.
kind
=
=
"
ArrayLike
"
)
;
}
exports
.
GripArray
=
{
rep
:
GripArray
supportsObject
:
supportsObject
}
;
}
)
;
