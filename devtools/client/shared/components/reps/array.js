"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
Caption
}
=
createFactories
(
require
(
"
.
/
caption
"
)
)
;
const
DOM
=
React
.
DOM
;
let
ArrayRep
=
React
.
createClass
(
{
displayName
:
"
ArrayRep
"
getTitle
:
function
(
object
context
)
{
return
"
[
"
+
object
.
length
+
"
]
"
;
}
arrayIterator
:
function
(
array
max
)
{
let
items
=
[
]
;
let
delim
;
for
(
let
i
=
0
;
i
<
array
.
length
&
&
i
<
max
;
i
+
+
)
{
try
{
let
value
=
array
[
i
]
;
delim
=
(
i
=
=
array
.
length
-
1
?
"
"
:
"
"
)
;
if
(
value
=
=
=
array
)
{
items
.
push
(
Reference
(
{
key
:
i
object
:
value
delim
:
delim
}
)
)
;
}
else
{
items
.
push
(
ItemRep
(
{
key
:
i
object
:
value
delim
:
delim
}
)
)
;
}
}
catch
(
exc
)
{
items
.
push
(
ItemRep
(
{
object
:
exc
delim
:
delim
key
:
i
}
)
)
;
}
}
if
(
array
.
length
>
max
)
{
let
objectLink
=
this
.
props
.
objectLink
|
|
DOM
.
span
;
items
.
push
(
Caption
(
{
key
:
"
more
"
object
:
objectLink
(
{
object
:
this
.
props
.
object
}
(
array
.
length
-
max
)
+
"
more
"
)
}
)
)
;
}
return
items
;
}
hasSpecialProperties
:
function
(
array
)
{
function
isInteger
(
x
)
{
let
y
=
parseInt
(
x
10
)
;
if
(
isNaN
(
y
)
)
{
return
false
;
}
return
x
=
=
=
y
.
toString
(
)
;
}
let
props
=
Object
.
getOwnPropertyNames
(
array
)
;
for
(
let
i
=
0
;
i
<
props
.
length
;
i
+
+
)
{
let
p
=
props
[
i
]
;
if
(
isInteger
(
p
)
)
{
continue
;
}
if
(
p
!
=
"
length
"
)
{
return
true
;
}
}
return
false
;
}
onToggleProperties
:
function
(
event
)
{
}
onClickBracket
:
function
(
event
)
{
}
render
:
function
(
)
{
let
mode
=
this
.
props
.
mode
|
|
"
short
"
;
let
object
=
this
.
props
.
object
;
let
items
;
if
(
mode
=
=
"
tiny
"
)
{
let
isEmpty
=
object
.
length
=
=
=
0
;
items
=
DOM
.
span
(
{
className
:
"
length
"
}
isEmpty
?
"
"
:
object
.
length
)
;
}
else
{
let
max
=
(
mode
=
=
"
short
"
)
?
3
:
300
;
items
=
this
.
arrayIterator
(
object
max
)
;
}
let
objectLink
=
this
.
props
.
objectLink
|
|
DOM
.
span
;
return
(
DOM
.
span
(
{
className
:
"
objectBox
objectBox
-
array
"
}
objectLink
(
{
className
:
"
arrayLeftBracket
"
role
:
"
presentation
"
object
:
object
}
"
[
"
)
items
objectLink
(
{
className
:
"
arrayRightBracket
"
role
:
"
presentation
"
object
:
object
}
"
]
"
)
DOM
.
span
(
{
className
:
"
arrayProperties
"
role
:
"
group
"
}
)
)
)
;
}
}
)
;
let
ItemRep
=
React
.
createFactory
(
React
.
createClass
(
{
displayName
:
"
ItemRep
"
render
:
function
(
)
{
const
{
Rep
}
=
createFactories
(
require
(
"
.
/
rep
"
)
)
;
let
object
=
this
.
props
.
object
;
let
delim
=
this
.
props
.
delim
;
return
(
DOM
.
span
(
{
}
Rep
(
{
object
:
object
}
)
delim
)
)
;
}
}
)
)
;
let
Reference
=
React
.
createFactory
(
React
.
createClass
(
{
displayName
:
"
Reference
"
render
:
function
(
)
{
let
tooltip
=
"
Circular
reference
"
;
return
(
DOM
.
span
(
{
title
:
tooltip
}
"
[
]
"
)
)
;
}
}
)
)
;
function
supportsObject
(
object
type
)
{
return
Array
.
isArray
(
object
)
|
|
Object
.
prototype
.
toString
.
call
(
object
)
=
=
=
"
[
object
Arguments
]
"
;
}
exports
.
ArrayRep
=
{
rep
:
ArrayRep
supportsObject
:
supportsObject
}
;
}
)
;
