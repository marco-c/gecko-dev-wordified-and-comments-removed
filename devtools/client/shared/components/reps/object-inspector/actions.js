const
{
loadItemProperties
}
=
require
(
"
.
/
utils
/
load
-
properties
"
)
;
const
{
getPathExpression
getParentFront
getParentGripValue
getValue
nodeIsBucket
getFront
}
=
require
(
"
.
/
utils
/
node
"
)
;
const
{
getLoadedProperties
getWatchpoints
}
=
require
(
"
.
/
reducer
"
)
;
function
nodeExpand
(
node
actor
)
{
return
async
(
{
dispatch
}
)
=
>
{
dispatch
(
{
type
:
"
NODE_EXPAND
"
data
:
{
node
}
}
)
;
dispatch
(
nodeLoadProperties
(
node
actor
)
)
;
}
;
}
function
nodeCollapse
(
node
)
{
return
{
type
:
"
NODE_COLLAPSE
"
data
:
{
node
}
}
;
}
function
nodeLoadProperties
(
node
actor
)
{
return
async
(
{
dispatch
client
getState
}
)
=
>
{
const
state
=
getState
(
)
;
const
loadedProperties
=
getLoadedProperties
(
state
)
;
if
(
loadedProperties
.
has
(
node
.
path
)
)
{
return
;
}
try
{
const
properties
=
await
loadItemProperties
(
node
client
loadedProperties
)
;
if
(
!
client
|
|
!
client
.
releaseActor
)
{
actor
=
null
;
}
dispatch
(
nodePropertiesLoaded
(
node
actor
properties
)
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
;
}
function
nodePropertiesLoaded
(
node
actor
properties
)
{
return
{
type
:
"
NODE_PROPERTIES_LOADED
"
data
:
{
node
actor
properties
}
}
;
}
function
addWatchpoint
(
item
watchpoint
)
{
return
async
function
(
{
dispatch
client
}
)
{
const
{
parent
name
}
=
item
;
let
object
=
getValue
(
parent
)
;
if
(
nodeIsBucket
(
parent
)
)
{
object
=
getValue
(
parent
.
parent
)
;
}
if
(
!
object
)
{
return
;
}
const
path
=
parent
.
path
;
const
property
=
name
;
const
label
=
getPathExpression
(
item
)
;
const
actor
=
object
.
actor
;
await
client
.
addWatchpoint
(
object
property
label
watchpoint
)
;
dispatch
(
{
type
:
"
SET_WATCHPOINT
"
data
:
{
path
watchpoint
property
actor
}
}
)
;
}
;
}
function
removeWatchpoint
(
item
)
{
return
async
function
(
{
dispatch
client
}
)
{
const
{
parent
name
}
=
item
;
let
object
=
getValue
(
parent
)
;
if
(
nodeIsBucket
(
parent
)
)
{
object
=
getValue
(
parent
.
parent
)
;
}
const
property
=
name
;
const
path
=
parent
.
path
;
const
actor
=
object
.
actor
;
await
client
.
removeWatchpoint
(
object
property
)
;
dispatch
(
{
type
:
"
REMOVE_WATCHPOINT
"
data
:
{
path
property
actor
}
}
)
;
}
;
}
function
getActorIDs
(
roots
)
{
return
(
roots
|
|
[
]
)
.
reduce
(
(
ids
root
)
=
>
{
const
front
=
getFront
(
root
)
;
return
front
?
ids
.
concat
(
front
.
actorID
)
:
ids
;
}
[
]
)
;
}
function
closeObjectInspector
(
roots
)
{
return
(
{
dispatch
getState
client
}
)
=
>
{
releaseActors
(
roots
client
dispatch
)
;
}
;
}
function
rootsChanged
(
roots
)
{
return
(
{
dispatch
client
getState
}
)
=
>
{
releaseActors
(
roots
client
dispatch
)
;
dispatch
(
{
type
:
"
ROOTS_CHANGED
"
data
:
roots
}
)
;
}
;
}
async
function
releaseActors
(
roots
client
dispatch
)
{
if
(
!
client
|
|
!
client
.
releaseActor
)
{
return
;
}
const
actors
=
getActorIDs
(
roots
)
;
await
Promise
.
all
(
actors
.
map
(
client
.
releaseActor
)
)
;
}
function
invokeGetter
(
node
receiverId
)
{
return
async
(
{
dispatch
client
getState
}
)
=
>
{
try
{
const
objectFront
=
getParentFront
(
node
)
|
|
client
.
createObjectFront
(
getParentGripValue
(
node
)
)
;
const
getterName
=
node
.
propertyName
|
|
node
.
name
;
const
result
=
await
objectFront
.
getPropertyValue
(
getterName
receiverId
)
;
dispatch
(
{
type
:
"
GETTER_INVOKED
"
data
:
{
node
result
}
}
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
;
}
module
.
exports
=
{
closeObjectInspector
invokeGetter
nodeExpand
nodeCollapse
nodeLoadProperties
nodePropertiesLoaded
rootsChanged
addWatchpoint
removeWatchpoint
}
;
