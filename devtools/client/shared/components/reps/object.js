"
use
strict
"
;
define
(
function
(
require
exports
module
)
{
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
createFactories
wrapRender
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
Caption
}
=
createFactories
(
require
(
"
.
/
caption
"
)
)
;
const
{
PropRep
}
=
createFactories
(
require
(
"
.
/
prop
-
rep
"
)
)
;
const
{
MODE
}
=
require
(
"
.
/
constants
"
)
;
const
{
span
}
=
React
.
DOM
;
const
Obj
=
React
.
createClass
(
{
displayName
:
"
Obj
"
propTypes
:
{
object
:
React
.
PropTypes
.
object
.
isRequired
mode
:
React
.
PropTypes
.
oneOf
(
Object
.
keys
(
MODE
)
.
map
(
key
=
>
MODE
[
key
]
)
)
objectLink
:
React
.
PropTypes
.
func
title
:
React
.
PropTypes
.
string
}
getTitle
:
function
(
object
)
{
let
title
=
this
.
props
.
title
|
|
object
.
class
|
|
"
Object
"
;
if
(
this
.
props
.
objectLink
)
{
return
this
.
props
.
objectLink
(
{
object
:
object
}
title
)
;
}
return
title
;
}
safePropIterator
:
function
(
object
max
)
{
max
=
(
typeof
max
=
=
=
"
undefined
"
)
?
3
:
max
;
try
{
return
this
.
propIterator
(
object
max
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
return
[
]
;
}
propIterator
:
function
(
object
max
)
{
let
isInterestingProp
=
(
t
value
)
=
>
{
return
(
t
=
=
"
boolean
"
|
|
t
=
=
"
number
"
|
|
(
t
=
=
"
string
"
&
&
value
)
)
;
}
;
if
(
Object
.
prototype
.
toString
.
call
(
object
)
=
=
=
"
[
object
Generator
]
"
)
{
object
=
Object
.
getPrototypeOf
(
object
)
;
}
let
propsArray
=
this
.
getPropsArray
(
object
max
isInterestingProp
)
;
if
(
propsArray
.
length
<
=
max
)
{
propsArray
=
propsArray
.
concat
(
this
.
getPropsArray
(
object
max
(
t
value
)
=
>
{
return
!
isInterestingProp
(
t
value
)
;
}
)
)
;
}
if
(
propsArray
.
length
>
max
)
{
propsArray
.
pop
(
)
;
let
objectLink
=
this
.
props
.
objectLink
|
|
span
;
propsArray
.
push
(
Caption
(
{
object
:
objectLink
(
{
object
:
object
}
(
Object
.
keys
(
object
)
.
length
-
max
)
+
"
more
"
)
}
)
)
;
}
else
if
(
propsArray
.
length
>
0
)
{
propsArray
[
propsArray
.
length
-
1
]
=
React
.
cloneElement
(
propsArray
[
propsArray
.
length
-
1
]
{
delim
:
"
"
}
)
;
}
return
propsArray
;
}
getPropsArray
:
function
(
object
max
filter
)
{
let
propsArray
=
[
]
;
max
=
max
|
|
3
;
if
(
!
object
)
{
return
propsArray
;
}
let
mode
=
MODE
.
TINY
;
try
{
for
(
let
name
in
object
)
{
if
(
propsArray
.
length
>
max
)
{
return
propsArray
;
}
let
value
;
try
{
value
=
object
[
name
]
;
}
catch
(
exc
)
{
continue
;
}
let
t
=
typeof
value
;
if
(
filter
(
t
value
)
)
{
propsArray
.
push
(
PropRep
(
{
mode
:
mode
name
:
name
object
:
value
equal
:
"
:
"
delim
:
"
"
}
)
)
;
}
}
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
return
propsArray
;
}
render
:
wrapRender
(
function
(
)
{
let
object
=
this
.
props
.
object
;
let
propsArray
=
this
.
safePropIterator
(
object
)
;
let
objectLink
=
this
.
props
.
objectLink
|
|
span
;
if
(
this
.
props
.
mode
=
=
=
MODE
.
TINY
|
|
!
propsArray
.
length
)
{
return
(
span
(
{
className
:
"
objectBox
objectBox
-
object
"
}
objectLink
(
{
className
:
"
objectTitle
"
}
this
.
getTitle
(
object
)
)
)
)
;
}
return
(
span
(
{
className
:
"
objectBox
objectBox
-
object
"
}
this
.
getTitle
(
object
)
objectLink
(
{
className
:
"
objectLeftBrace
"
object
:
object
}
"
{
"
)
.
.
.
propsArray
objectLink
(
{
className
:
"
objectRightBrace
"
object
:
object
}
"
}
"
)
)
)
;
}
)
}
)
;
function
supportsObject
(
object
type
)
{
return
true
;
}
exports
.
Obj
=
{
rep
:
Obj
supportsObject
:
supportsObject
}
;
}
)
;
