"
use
strict
"
;
const
{
Component
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
Immutable
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
immutable
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
l10n
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
components
.
properties
"
)
;
const
{
div
span
button
}
=
dom
;
const
PriorityLevels
=
{
PRIORITY_INFO_LOW
:
1
PRIORITY_INFO_MEDIUM
:
2
PRIORITY_INFO_HIGH
:
3
PRIORITY_WARNING_LOW
:
4
PRIORITY_WARNING_MEDIUM
:
5
PRIORITY_WARNING_HIGH
:
6
PRIORITY_CRITICAL_LOW
:
7
PRIORITY_CRITICAL_MEDIUM
:
8
PRIORITY_CRITICAL_HIGH
:
9
PRIORITY_CRITICAL_BLOCK
:
10
}
;
class
NotificationBox
extends
Component
{
static
get
propTypes
(
)
{
return
{
id
:
PropTypes
.
string
notifications
:
PropTypes
.
object
closeButtonTooltip
:
PropTypes
.
string
}
;
}
static
get
defaultProps
(
)
{
return
{
closeButtonTooltip
:
l10n
.
getStr
(
"
notificationBox
.
closeTooltip
"
)
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
notifications
:
new
Immutable
.
OrderedMap
(
)
}
;
this
.
appendNotification
=
this
.
appendNotification
.
bind
(
this
)
;
this
.
removeNotification
=
this
.
removeNotification
.
bind
(
this
)
;
this
.
getNotificationWithValue
=
this
.
getNotificationWithValue
.
bind
(
this
)
;
this
.
getCurrentNotification
=
this
.
getCurrentNotification
.
bind
(
this
)
;
this
.
close
=
this
.
close
.
bind
(
this
)
;
this
.
renderButton
=
this
.
renderButton
.
bind
(
this
)
;
this
.
renderNotification
=
this
.
renderNotification
.
bind
(
this
)
;
}
appendNotification
(
label
value
image
priority
buttons
=
[
]
eventCallback
)
{
const
newState
=
appendNotification
(
this
.
state
{
label
value
image
priority
buttons
eventCallback
}
)
;
this
.
setState
(
newState
)
;
}
removeNotification
(
notification
)
{
if
(
notification
)
{
this
.
close
(
this
.
state
.
notifications
.
get
(
notification
.
value
)
)
;
}
}
getNotificationWithValue
(
value
)
{
const
notification
=
this
.
state
.
notifications
.
get
(
value
)
;
if
(
!
notification
)
{
return
null
;
}
return
Object
.
assign
(
{
}
notification
{
close
:
(
)
=
>
{
this
.
close
(
notification
)
;
}
}
)
;
}
getCurrentNotification
(
)
{
return
this
.
state
.
notifications
.
first
(
)
;
}
close
(
notification
)
{
if
(
!
notification
)
{
return
;
}
if
(
notification
.
eventCallback
)
{
notification
.
eventCallback
(
"
removed
"
)
;
}
if
(
!
this
.
state
.
notifications
.
get
(
notification
.
value
)
)
{
return
;
}
this
.
setState
(
{
notifications
:
this
.
state
.
notifications
.
remove
(
notification
.
value
)
}
)
;
}
renderButton
(
props
notification
)
{
const
onClick
=
event
=
>
{
if
(
props
.
callback
)
{
const
result
=
props
.
callback
(
this
props
event
.
target
)
;
if
(
!
result
)
{
this
.
close
(
notification
)
;
}
event
.
stopPropagation
(
)
;
}
}
;
return
(
button
(
{
key
:
props
.
label
className
:
"
notification
-
button
"
accesskey
:
props
.
accesskey
onClick
:
onClick
}
props
.
label
)
)
;
}
renderNotification
(
notification
)
{
return
(
div
(
{
key
:
notification
.
value
className
:
"
notification
"
"
data
-
key
"
:
notification
.
value
"
data
-
type
"
:
notification
.
type
}
div
(
{
className
:
"
notificationInner
"
}
div
(
{
className
:
"
details
"
}
div
(
{
className
:
"
messageImage
"
"
data
-
type
"
:
notification
.
type
}
)
span
(
{
className
:
"
messageText
"
}
notification
.
label
)
notification
.
buttons
.
map
(
props
=
>
this
.
renderButton
(
props
notification
)
)
)
div
(
{
className
:
"
messageCloseButton
"
title
:
this
.
props
.
closeButtonTooltip
onClick
:
this
.
close
.
bind
(
this
notification
)
}
)
)
)
)
;
}
render
(
)
{
const
notifications
=
this
.
props
.
notifications
|
|
this
.
state
.
notifications
;
const
notification
=
notifications
?
notifications
.
first
(
)
:
null
;
const
content
=
notification
?
this
.
renderNotification
(
notification
)
:
null
;
return
div
(
{
className
:
"
notificationbox
"
id
:
this
.
props
.
id
}
content
)
;
}
}
function
appendNotification
(
state
props
)
{
const
{
label
value
image
priority
buttons
eventCallback
}
=
props
;
if
(
priority
<
PriorityLevels
.
PRIORITY_INFO_LOW
|
|
priority
>
PriorityLevels
.
PRIORITY_CRITICAL_BLOCK
)
{
throw
new
Error
(
"
Invalid
notification
priority
"
+
priority
)
;
}
if
(
image
)
{
throw
new
Error
(
"
Custom
image
URL
is
not
supported
yet
"
)
;
}
let
type
=
"
warning
"
;
if
(
priority
>
=
PriorityLevels
.
PRIORITY_CRITICAL_LOW
)
{
type
=
"
critical
"
;
}
else
if
(
priority
<
=
PriorityLevels
.
PRIORITY_INFO_HIGH
)
{
type
=
"
info
"
;
}
if
(
!
state
.
notifications
)
{
state
.
notifications
=
new
Immutable
.
OrderedMap
(
)
;
}
let
notifications
=
state
.
notifications
.
set
(
value
{
label
:
label
value
:
value
image
:
image
priority
:
priority
type
:
type
buttons
:
Array
.
isArray
(
buttons
)
?
buttons
:
[
]
eventCallback
:
eventCallback
}
)
;
notifications
=
notifications
.
sortBy
(
(
val
key
)
=
>
{
return
-
val
.
priority
;
}
)
;
return
{
notifications
:
notifications
}
;
}
function
getNotificationWithValue
(
notifications
value
)
{
return
notifications
?
notifications
.
get
(
value
)
:
null
;
}
function
removeNotificationWithValue
(
notifications
value
)
{
return
{
notifications
:
notifications
.
remove
(
value
)
}
;
}
module
.
exports
.
NotificationBox
=
NotificationBox
;
module
.
exports
.
PriorityLevels
=
PriorityLevels
;
module
.
exports
.
appendNotification
=
appendNotification
;
module
.
exports
.
getNotificationWithValue
=
getNotificationWithValue
;
module
.
exports
.
removeNotificationWithValue
=
removeNotificationWithValue
;
