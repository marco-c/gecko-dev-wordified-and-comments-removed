"
use
strict
"
;
const
{
Component
createElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
ul
li
h2
div
span
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
class
Accordion
extends
Component
{
static
get
propTypes
(
)
{
return
{
items
:
PropTypes
.
arrayOf
(
PropTypes
.
shape
(
{
buttons
:
PropTypes
.
arrayOf
(
PropTypes
.
object
)
className
:
PropTypes
.
string
component
:
PropTypes
.
oneOfType
(
[
PropTypes
.
object
PropTypes
.
func
]
)
componentProps
:
PropTypes
.
object
contentClassName
:
PropTypes
.
string
header
:
PropTypes
.
string
.
isRequired
id
:
PropTypes
.
string
.
isRequired
onToggle
:
PropTypes
.
func
opened
:
PropTypes
.
bool
.
isRequired
shouldOpen
:
PropTypes
.
func
}
)
)
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
opened
:
{
}
}
;
this
.
onHeaderClick
=
this
.
onHeaderClick
.
bind
(
this
)
;
this
.
onHeaderKeyDown
=
this
.
onHeaderKeyDown
.
bind
(
this
)
;
this
.
setInitialState
=
this
.
setInitialState
.
bind
(
this
)
;
this
.
updateCurrentState
=
this
.
updateCurrentState
.
bind
(
this
)
;
}
componentDidMount
(
)
{
this
.
setInitialState
(
)
;
}
componentDidUpdate
(
prevProps
)
{
if
(
prevProps
.
items
!
=
=
this
.
props
.
items
)
{
this
.
updateCurrentState
(
)
;
}
}
setInitialState
(
)
{
const
newItems
=
this
.
props
.
items
.
filter
(
(
{
id
}
)
=
>
typeof
this
.
state
.
opened
[
id
]
!
=
=
"
boolean
"
)
;
if
(
newItems
.
length
)
{
const
everOpened
=
{
.
.
.
this
.
state
.
everOpened
}
;
const
opened
=
{
.
.
.
this
.
state
.
opened
}
;
for
(
const
item
of
newItems
)
{
everOpened
[
item
.
id
]
=
item
.
opened
;
opened
[
item
.
id
]
=
item
.
opened
;
}
this
.
setState
(
{
everOpened
opened
}
)
;
}
}
updateCurrentState
(
)
{
const
updatedItems
=
this
.
props
.
items
.
filter
(
item
=
>
{
const
notExist
=
typeof
this
.
state
.
opened
[
item
.
id
]
!
=
=
"
boolean
"
;
if
(
typeof
item
.
shouldOpen
=
=
"
function
"
)
{
return
notExist
|
|
this
.
state
.
opened
[
item
.
id
]
!
=
=
item
.
shouldOpen
(
item
)
;
}
return
notExist
;
}
)
;
if
(
updatedItems
.
length
)
{
const
everOpened
=
{
.
.
.
this
.
state
.
everOpened
}
;
const
opened
=
{
.
.
.
this
.
state
.
opened
}
;
for
(
const
item
of
updatedItems
)
{
let
itemOpen
=
item
.
opened
;
if
(
typeof
item
.
shouldOpen
=
=
"
function
"
)
{
itemOpen
=
item
.
shouldOpen
(
item
)
;
}
everOpened
[
item
.
id
]
=
itemOpen
;
opened
[
item
.
id
]
=
itemOpen
;
}
this
.
setState
(
{
everOpened
opened
}
)
;
}
}
onHeaderClick
(
event
item
)
{
event
.
preventDefault
(
)
;
event
.
stopPropagation
(
)
;
this
.
toggleItem
(
item
)
;
}
onHeaderKeyDown
(
event
item
)
{
if
(
event
.
key
=
=
=
"
"
|
|
event
.
key
=
=
=
"
Enter
"
)
{
event
.
preventDefault
(
)
;
this
.
toggleItem
(
item
)
;
}
}
toggleItem
(
item
)
{
const
opened
=
!
this
.
state
.
opened
[
item
.
id
]
;
this
.
setState
(
{
everOpened
:
{
.
.
.
this
.
state
.
everOpened
[
item
.
id
]
:
true
}
opened
:
{
.
.
.
this
.
state
.
opened
[
item
.
id
]
:
opened
}
}
)
;
if
(
typeof
item
.
onToggle
=
=
=
"
function
"
)
{
item
.
onToggle
(
opened
item
)
;
}
}
renderItem
(
item
)
{
const
{
buttons
className
=
"
"
component
componentProps
=
{
}
contentClassName
=
"
"
header
id
}
=
item
;
const
headerId
=
{
id
}
-
header
;
const
opened
=
this
.
state
.
opened
[
id
]
;
let
itemContent
;
if
(
this
.
state
.
everOpened
&
&
this
.
state
.
everOpened
[
id
]
)
{
if
(
typeof
component
=
=
=
"
function
"
)
{
itemContent
=
createElement
(
component
componentProps
)
;
}
else
if
(
typeof
component
=
=
=
"
object
"
)
{
itemContent
=
component
;
}
}
return
li
(
{
key
:
id
id
className
:
accordion
-
item
{
opened
?
"
accordion
-
open
"
:
"
"
}
{
className
}
.
trim
(
)
"
aria
-
labelledby
"
:
headerId
}
h2
(
{
id
:
headerId
className
:
"
accordion
-
header
"
tabIndex
:
0
"
aria
-
expanded
"
:
opened
"
aria
-
label
"
:
header
onKeyDown
:
event
=
>
this
.
onHeaderKeyDown
(
event
item
)
onClick
:
event
=
>
this
.
onHeaderClick
(
event
item
)
}
span
(
{
className
:
theme
-
twisty
{
opened
?
"
open
"
:
"
"
}
role
:
"
presentation
"
}
)
span
(
{
className
:
"
accordion
-
header
-
label
"
}
header
)
buttons
&
&
span
(
{
className
:
"
accordion
-
header
-
buttons
"
role
:
"
presentation
"
}
buttons
)
)
div
(
{
className
:
accordion
-
content
{
contentClassName
}
.
trim
(
)
hidden
:
!
opened
role
:
"
presentation
"
}
itemContent
)
)
;
}
render
(
)
{
return
ul
(
{
className
:
"
accordion
"
tabIndex
:
-
1
}
this
.
props
.
items
.
map
(
item
=
>
this
.
renderItem
(
item
)
)
)
;
}
}
module
.
exports
=
Accordion
;
