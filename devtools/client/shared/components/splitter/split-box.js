"
use
strict
"
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
ReactDOM
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
Draggable
=
React
.
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
splitter
/
draggable
"
)
)
;
const
{
DOM
:
dom
PropTypes
}
=
React
;
const
SplitBox
=
React
.
createClass
(
{
displayName
:
"
SplitBox
"
propTypes
:
{
className
:
PropTypes
.
string
initialSize
:
PropTypes
.
number
startPanel
:
PropTypes
.
any
minSize
:
PropTypes
.
number
maxSize
:
PropTypes
.
number
endPanel
:
PropTypes
.
any
endPanelControl
:
PropTypes
.
bool
splitterSize
:
PropTypes
.
number
vert
:
PropTypes
.
bool
}
getDefaultProps
(
)
{
return
{
splitterSize
:
5
vert
:
true
endPanelControl
:
false
}
;
}
getInitialState
(
)
{
return
{
vert
:
this
.
props
.
vert
width
:
this
.
props
.
initialWidth
|
|
this
.
props
.
initialSize
height
:
this
.
props
.
initialHeight
|
|
this
.
props
.
initialSize
}
;
}
onStartMove
(
)
{
const
splitBox
=
ReactDOM
.
findDOMNode
(
this
)
;
const
doc
=
splitBox
.
ownerDocument
;
let
defaultCursor
=
doc
.
documentElement
.
style
.
cursor
;
doc
.
documentElement
.
style
.
cursor
=
(
this
.
state
.
vert
?
"
ew
-
resize
"
:
"
ns
-
resize
"
)
;
splitBox
.
classList
.
add
(
"
dragging
"
)
;
this
.
setState
(
{
defaultCursor
:
defaultCursor
}
)
;
}
onStopMove
(
)
{
const
splitBox
=
ReactDOM
.
findDOMNode
(
this
)
;
const
doc
=
splitBox
.
ownerDocument
;
doc
.
documentElement
.
style
.
cursor
=
this
.
state
.
defaultCursor
;
splitBox
.
classList
.
remove
(
"
dragging
"
)
;
}
onMove
(
x
y
)
{
const
node
=
ReactDOM
.
findDOMNode
(
this
)
;
const
doc
=
node
.
ownerDocument
;
const
win
=
doc
.
defaultView
;
let
size
;
let
ratio
=
win
.
devicePixelRatio
|
|
1
;
let
{
endPanelControl
}
=
this
.
props
;
if
(
this
.
state
.
vert
)
{
let
dir
=
win
.
getComputedStyle
(
doc
.
documentElement
)
.
direction
;
if
(
dir
=
=
"
rtl
"
)
{
endPanelControl
=
!
endPanelControl
;
}
let
innerOffset
=
(
x
/
ratio
)
-
win
.
mozInnerScreenX
;
size
=
endPanelControl
?
(
node
.
offsetLeft
+
node
.
offsetWidth
)
-
innerOffset
:
innerOffset
-
node
.
offsetLeft
;
this
.
setState
(
{
width
:
size
}
)
;
}
else
{
let
innerOffset
=
(
y
/
ratio
)
-
win
.
mozInnerScreenY
;
size
=
endPanelControl
?
(
node
.
offsetTop
+
node
.
offsetHeight
)
-
innerOffset
:
innerOffset
-
node
.
offsetTop
;
this
.
setState
(
{
height
:
size
}
)
;
}
}
render
(
)
{
const
vert
=
this
.
state
.
vert
;
const
{
startPanel
endPanel
endPanelControl
minSize
maxSize
splitterSize
}
=
this
.
props
;
let
style
=
Object
.
assign
(
{
}
this
.
props
.
style
)
;
let
classNames
=
[
"
split
-
box
"
]
;
classNames
.
push
(
vert
?
"
vert
"
:
"
horz
"
)
;
if
(
this
.
props
.
className
)
{
classNames
=
classNames
.
concat
(
this
.
props
.
className
.
split
(
"
"
)
)
;
}
let
leftPanelStyle
;
let
rightPanelStyle
;
if
(
vert
)
{
leftPanelStyle
=
{
maxWidth
:
endPanelControl
?
null
:
maxSize
minWidth
:
endPanelControl
?
null
:
minSize
width
:
endPanelControl
?
null
:
this
.
state
.
width
}
;
rightPanelStyle
=
{
maxWidth
:
endPanelControl
?
maxSize
:
null
minWidth
:
endPanelControl
?
minSize
:
null
width
:
endPanelControl
?
this
.
state
.
width
:
null
}
;
}
else
{
leftPanelStyle
=
{
maxHeight
:
endPanelControl
?
null
:
maxSize
minHeight
:
endPanelControl
?
null
:
minSize
height
:
endPanelControl
?
null
:
this
.
state
.
height
}
;
rightPanelStyle
=
{
maxHeight
:
endPanelControl
?
maxSize
:
null
minHeight
:
endPanelControl
?
minSize
:
null
height
:
endPanelControl
?
this
.
state
.
height
:
null
}
;
}
let
splitterStyle
=
{
flex
:
"
0
0
"
+
splitterSize
+
"
px
"
}
;
return
(
dom
.
div
(
{
className
:
classNames
.
join
(
"
"
)
style
:
style
}
startPanel
?
dom
.
div
(
{
className
:
endPanelControl
?
"
uncontrolled
"
:
"
controlled
"
style
:
leftPanelStyle
}
startPanel
)
:
null
Draggable
(
{
className
:
"
splitter
"
style
:
splitterStyle
onStart
:
this
.
onStartMove
onStop
:
this
.
onStopMove
onMove
:
this
.
onMove
}
)
endPanel
?
dom
.
div
(
{
className
:
endPanelControl
?
"
controlled
"
:
"
uncontrolled
"
style
:
rightPanelStyle
}
endPanel
)
:
null
)
)
;
}
}
)
;
module
.
exports
=
SplitBox
;
