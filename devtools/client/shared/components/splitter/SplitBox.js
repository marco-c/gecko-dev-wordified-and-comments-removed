"
use
strict
"
;
const
{
Component
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
Draggable
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
splitter
/
Draggable
"
)
)
;
class
SplitBox
extends
Component
{
static
get
propTypes
(
)
{
return
{
className
:
PropTypes
.
string
initialSize
:
PropTypes
.
string
initialWidth
:
PropTypes
.
oneOfType
(
[
PropTypes
.
number
PropTypes
.
string
]
)
initialHeight
:
PropTypes
.
oneOfType
(
[
PropTypes
.
number
PropTypes
.
string
]
)
startPanel
:
PropTypes
.
any
minSize
:
PropTypes
.
oneOfType
(
[
PropTypes
.
number
PropTypes
.
string
]
)
maxSize
:
PropTypes
.
oneOfType
(
[
PropTypes
.
number
PropTypes
.
string
]
)
endPanel
:
PropTypes
.
any
endPanelControl
:
PropTypes
.
bool
splitterSize
:
PropTypes
.
number
vert
:
PropTypes
.
bool
style
:
PropTypes
.
object
onControlledPanelResized
:
PropTypes
.
func
}
;
}
static
get
defaultProps
(
)
{
return
{
splitterSize
:
5
vert
:
true
endPanelControl
:
false
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
endPanelControl
:
props
.
endPanelControl
vert
:
props
.
vert
splitterSize
:
props
.
splitterSize
width
:
props
.
initialWidth
|
|
props
.
initialSize
height
:
props
.
initialHeight
|
|
props
.
initialSize
}
;
this
.
onStartMove
=
this
.
onStartMove
.
bind
(
this
)
;
this
.
onStopMove
=
this
.
onStopMove
.
bind
(
this
)
;
this
.
onMove
=
this
.
onMove
.
bind
(
this
)
;
}
componentWillReceiveProps
(
nextProps
)
{
const
{
endPanelControl
splitterSize
vert
}
=
nextProps
;
if
(
endPanelControl
!
=
this
.
props
.
endPanelControl
)
{
this
.
setState
(
{
endPanelControl
}
)
;
}
if
(
splitterSize
!
=
this
.
props
.
splitterSize
)
{
this
.
setState
(
{
splitterSize
}
)
;
}
if
(
vert
!
=
=
this
.
props
.
vert
)
{
this
.
setState
(
{
vert
}
)
;
}
}
shouldComponentUpdate
(
nextProps
nextState
)
{
return
nextState
.
width
!
=
this
.
state
.
width
|
|
nextState
.
endPanelControl
!
=
this
.
props
.
endPanelControl
|
|
nextState
.
height
!
=
this
.
state
.
height
|
|
nextState
.
vert
!
=
this
.
state
.
vert
|
|
nextState
.
splitterSize
!
=
this
.
state
.
splitterSize
|
|
nextProps
.
startPanel
!
=
this
.
props
.
startPanel
|
|
nextProps
.
endPanel
!
=
this
.
props
.
endPanel
|
|
nextProps
.
minSize
!
=
this
.
props
.
minSize
|
|
nextProps
.
maxSize
!
=
this
.
props
.
maxSize
;
}
componentDidUpdate
(
prevProps
prevState
)
{
if
(
this
.
props
.
onControlledPanelResized
&
&
(
prevState
.
width
!
=
=
this
.
state
.
width
|
|
prevState
.
height
!
=
=
this
.
state
.
height
)
)
{
this
.
props
.
onControlledPanelResized
(
this
.
state
.
width
this
.
state
.
height
)
;
}
}
onStartMove
(
)
{
const
doc
=
this
.
splitBox
.
ownerDocument
;
const
defaultCursor
=
doc
.
documentElement
.
style
.
cursor
;
doc
.
documentElement
.
style
.
cursor
=
(
this
.
state
.
vert
?
"
ew
-
resize
"
:
"
ns
-
resize
"
)
;
this
.
splitBox
.
classList
.
add
(
"
dragging
"
)
;
this
.
setState
(
{
defaultCursor
:
defaultCursor
}
)
;
}
onStopMove
(
)
{
const
doc
=
this
.
splitBox
.
ownerDocument
;
doc
.
documentElement
.
style
.
cursor
=
this
.
state
.
defaultCursor
;
this
.
splitBox
.
classList
.
remove
(
"
dragging
"
)
;
}
onMove
(
x
y
)
{
const
nodeBounds
=
this
.
splitBox
.
getBoundingClientRect
(
)
;
let
size
;
let
{
endPanelControl
vert
}
=
this
.
state
;
if
(
vert
)
{
const
doc
=
this
.
splitBox
.
ownerDocument
;
if
(
doc
.
dir
=
=
=
"
rtl
"
)
{
endPanelControl
=
!
endPanelControl
;
}
size
=
endPanelControl
?
(
nodeBounds
.
left
+
nodeBounds
.
width
)
-
x
:
x
-
nodeBounds
.
left
;
this
.
setState
(
{
width
:
size
}
)
;
}
else
{
size
=
endPanelControl
?
(
nodeBounds
.
top
+
nodeBounds
.
height
)
-
y
:
y
-
nodeBounds
.
top
;
this
.
setState
(
{
height
:
size
}
)
;
}
}
render
(
)
{
const
{
endPanelControl
splitterSize
vert
}
=
this
.
state
;
const
{
startPanel
endPanel
minSize
maxSize
}
=
this
.
props
;
const
style
=
Object
.
assign
(
{
}
this
.
props
.
style
)
;
let
classNames
=
[
"
split
-
box
"
]
;
classNames
.
push
(
vert
?
"
vert
"
:
"
horz
"
)
;
if
(
this
.
props
.
className
)
{
classNames
=
classNames
.
concat
(
this
.
props
.
className
.
split
(
"
"
)
)
;
}
let
leftPanelStyle
;
let
rightPanelStyle
;
if
(
vert
)
{
leftPanelStyle
=
{
maxWidth
:
endPanelControl
?
null
:
maxSize
minWidth
:
endPanelControl
?
null
:
minSize
width
:
endPanelControl
?
null
:
this
.
state
.
width
}
;
rightPanelStyle
=
{
maxWidth
:
endPanelControl
?
maxSize
:
null
minWidth
:
endPanelControl
?
minSize
:
null
width
:
endPanelControl
?
this
.
state
.
width
:
null
}
;
}
else
{
leftPanelStyle
=
{
maxHeight
:
endPanelControl
?
null
:
maxSize
minHeight
:
endPanelControl
?
null
:
minSize
height
:
endPanelControl
?
null
:
this
.
state
.
height
}
;
rightPanelStyle
=
{
maxHeight
:
endPanelControl
?
maxSize
:
null
minHeight
:
endPanelControl
?
minSize
:
null
height
:
endPanelControl
?
this
.
state
.
height
:
null
}
;
}
const
splitterStyle
=
{
flex
:
"
0
0
"
+
splitterSize
+
"
px
"
}
;
return
(
dom
.
div
(
{
className
:
classNames
.
join
(
"
"
)
ref
:
div
=
>
{
this
.
splitBox
=
div
;
}
style
}
startPanel
?
dom
.
div
(
{
className
:
endPanelControl
?
"
uncontrolled
"
:
"
controlled
"
style
:
leftPanelStyle
role
:
"
presentation
"
ref
:
div
=
>
{
this
.
startPanelContainer
=
div
;
}
}
startPanel
)
:
null
splitterSize
>
0
?
Draggable
(
{
className
:
"
splitter
"
style
:
splitterStyle
onStart
:
this
.
onStartMove
onStop
:
this
.
onStopMove
onMove
:
this
.
onMove
}
)
:
null
endPanel
?
dom
.
div
(
{
className
:
endPanelControl
?
"
controlled
"
:
"
uncontrolled
"
style
:
rightPanelStyle
role
:
"
presentation
"
ref
:
div
=
>
{
this
.
endPanelContainer
=
div
;
}
}
endPanel
)
:
null
)
)
;
}
}
module
.
exports
=
SplitBox
;
