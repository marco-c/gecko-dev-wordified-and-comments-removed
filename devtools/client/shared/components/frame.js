"
use
strict
"
;
const
{
DOM
:
dom
createClass
PropTypes
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
getSourceNames
parseURL
isScratchpadScheme
}
=
require
(
"
devtools
/
client
/
shared
/
source
-
utils
"
)
;
const
{
L10N
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
ViewHelpers
.
jsm
"
)
.
ViewHelpers
;
const
l10n
=
new
L10N
(
"
chrome
:
/
/
devtools
/
locale
/
components
.
properties
"
)
;
module
.
exports
=
createClass
(
{
propTypes
:
{
frame
:
PropTypes
.
shape
(
{
functionDisplayName
:
PropTypes
.
string
source
:
PropTypes
.
string
.
isRequired
line
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
number
]
)
column
:
PropTypes
.
oneOfType
(
[
PropTypes
.
string
PropTypes
.
number
]
)
}
)
.
isRequired
onClick
:
PropTypes
.
func
.
isRequired
showFunctionName
:
PropTypes
.
bool
showHost
:
PropTypes
.
bool
}
getDefaultProps
(
)
{
return
{
showFunctionName
:
false
showHost
:
false
}
;
}
displayName
:
"
Frame
"
render
(
)
{
let
{
onClick
frame
showFunctionName
showHost
}
=
this
.
props
;
let
source
=
frame
.
source
?
String
(
frame
.
source
)
:
"
"
;
let
line
=
frame
.
line
!
=
void
0
?
Number
(
frame
.
line
)
:
null
;
let
column
=
frame
.
column
!
=
void
0
?
Number
(
frame
.
column
)
:
null
;
const
{
short
long
host
}
=
getSourceNames
(
source
)
;
const
isLinkable
=
!
!
(
isScratchpadScheme
(
source
)
|
|
parseURL
(
source
)
)
;
const
elements
=
[
]
;
const
sourceElements
=
[
]
;
let
sourceEl
;
let
tooltip
=
long
;
if
(
isLinkable
&
&
line
)
{
tooltip
+
=
:
{
line
}
;
if
(
column
)
{
tooltip
+
=
:
{
column
}
;
}
}
let
attributes
=
{
"
data
-
url
"
:
long
className
:
"
frame
-
link
"
}
;
if
(
showFunctionName
&
&
frame
.
functionDisplayName
)
{
elements
.
push
(
dom
.
span
(
{
className
:
"
frame
-
link
-
function
-
display
-
name
"
}
frame
.
functionDisplayName
)
)
;
}
sourceElements
.
push
(
dom
.
span
(
{
className
:
"
frame
-
link
-
filename
"
}
short
)
)
;
if
(
isLinkable
&
&
line
)
{
sourceElements
.
push
(
dom
.
span
(
{
className
:
"
frame
-
link
-
colon
"
}
"
:
"
)
)
;
sourceElements
.
push
(
dom
.
span
(
{
className
:
"
frame
-
link
-
line
"
}
line
)
)
;
if
(
column
)
{
sourceElements
.
push
(
dom
.
span
(
{
className
:
"
frame
-
link
-
colon
"
}
"
:
"
)
)
;
sourceElements
.
push
(
dom
.
span
(
{
className
:
"
frame
-
link
-
column
"
}
column
)
)
;
attributes
[
"
data
-
column
"
]
=
column
;
}
attributes
[
"
data
-
line
"
]
=
line
;
}
if
(
isLinkable
)
{
sourceEl
=
dom
.
a
(
{
onClick
className
:
"
frame
-
link
-
source
"
title
:
l10n
.
getFormatStr
(
"
frame
.
viewsourceindebugger
"
tooltip
)
}
sourceElements
)
;
}
else
{
sourceEl
=
dom
.
span
(
{
className
:
"
frame
-
link
-
source
"
title
:
tooltip
}
sourceElements
)
;
}
elements
.
push
(
sourceEl
)
;
if
(
showHost
&
&
host
)
{
elements
.
push
(
dom
.
span
(
{
className
:
"
frame
-
link
-
host
"
}
host
)
)
;
}
return
dom
.
span
(
attributes
.
.
.
elements
)
;
}
}
)
;
