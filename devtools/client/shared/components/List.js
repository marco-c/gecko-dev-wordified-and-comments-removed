"
use
strict
"
;
const
{
createFactory
createRef
Component
cloneElement
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
ul
li
div
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
scrollIntoView
}
=
require
(
"
devtools
/
client
/
shared
/
scroll
"
)
;
const
{
preventDefaultAndStopPropagation
}
=
require
(
"
devtools
/
client
/
shared
/
events
"
)
;
loader
.
lazyRequireGetter
(
this
[
"
getFocusableElements
"
"
wrapMoveFocus
"
]
"
devtools
/
client
/
shared
/
focus
"
true
)
;
class
ListItemClass
extends
Component
{
static
get
propTypes
(
)
{
return
{
active
:
PropTypes
.
bool
current
:
PropTypes
.
bool
onClick
:
PropTypes
.
func
item
:
PropTypes
.
shape
(
{
key
:
PropTypes
.
string
component
:
PropTypes
.
object
componentProps
:
PropTypes
.
object
className
:
PropTypes
.
string
}
)
.
isRequired
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
contentRef
=
createRef
(
)
;
this
.
_setTabbableState
=
this
.
_setTabbableState
.
bind
(
this
)
;
this
.
_onKeyDown
=
this
.
_onKeyDown
.
bind
(
this
)
;
}
componentDidMount
(
)
{
this
.
_setTabbableState
(
)
;
}
componentDidUpdate
(
)
{
this
.
_setTabbableState
(
)
;
}
_onKeyDown
(
event
)
{
const
{
target
key
shiftKey
}
=
event
;
if
(
key
!
=
=
"
Tab
"
)
{
return
;
}
const
focusMoved
=
!
!
wrapMoveFocus
(
getFocusableElements
(
this
.
contentRef
.
current
)
target
shiftKey
)
;
if
(
focusMoved
)
{
event
.
preventDefault
(
)
;
}
event
.
stopPropagation
(
)
;
}
_setTabbableState
(
)
{
const
elms
=
getFocusableElements
(
this
.
contentRef
.
current
)
;
if
(
elms
.
length
=
=
=
0
)
{
return
;
}
if
(
!
this
.
props
.
active
)
{
elms
.
forEach
(
elm
=
>
elm
.
setAttribute
(
"
tabindex
"
"
-
1
"
)
)
;
return
;
}
if
(
!
elms
.
includes
(
document
.
activeElement
)
)
{
elms
[
0
]
.
focus
(
)
;
}
}
render
(
)
{
const
{
active
item
current
onClick
}
=
this
.
props
;
const
{
className
component
componentProps
}
=
item
;
return
li
(
{
className
:
{
className
}
{
current
?
"
current
"
:
"
"
}
{
active
?
"
active
"
:
"
"
}
id
:
item
.
key
onClick
onKeyDownCapture
:
active
&
&
this
.
_onKeyDown
}
div
(
{
className
:
"
list
-
item
-
content
"
role
:
"
presentation
"
ref
:
this
.
contentRef
}
cloneElement
(
component
componentProps
|
|
{
}
)
)
)
;
}
}
const
ListItem
=
createFactory
(
ListItemClass
)
;
class
List
extends
Component
{
static
get
propTypes
(
)
{
return
{
items
:
PropTypes
.
arrayOf
(
PropTypes
.
shape
(
{
component
:
PropTypes
.
object
componentProps
:
PropTypes
.
object
className
:
PropTypes
.
string
key
:
PropTypes
.
string
.
isRequired
}
)
)
.
isRequired
labelledBy
:
PropTypes
.
string
label
:
PropTypes
.
string
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
listRef
=
createRef
(
)
;
this
.
state
=
{
active
:
null
current
:
null
mouseDown
:
false
}
;
this
.
_setCurrentItem
=
this
.
_setCurrentItem
.
bind
(
this
)
;
this
.
_preventArrowKeyScrolling
=
this
.
_preventArrowKeyScrolling
.
bind
(
this
)
;
this
.
_onKeyDown
=
this
.
_onKeyDown
.
bind
(
this
)
;
}
shouldComponentUpdate
(
nextProps
nextState
)
{
const
{
active
current
mouseDown
}
=
this
.
state
;
return
(
current
!
=
=
nextState
.
current
|
|
active
!
=
=
nextState
.
active
|
|
mouseDown
=
=
=
nextState
.
mouseDown
)
;
}
_preventArrowKeyScrolling
(
e
)
{
switch
(
e
.
key
)
{
case
"
ArrowUp
"
:
case
"
ArrowDown
"
:
case
"
ArrowLeft
"
:
case
"
ArrowRight
"
:
preventDefaultAndStopPropagation
(
e
)
;
break
;
}
}
_setCurrentItem
(
index
=
-
1
options
=
{
}
)
{
const
item
=
this
.
props
.
items
[
index
]
;
if
(
item
!
=
=
undefined
&
&
!
options
.
preventAutoScroll
)
{
const
element
=
document
.
getElementById
(
item
.
key
)
;
scrollIntoView
(
element
{
.
.
.
options
container
:
this
.
listRef
.
current
}
)
;
}
const
state
=
{
}
;
if
(
this
.
state
.
active
!
=
undefined
)
{
state
.
active
=
null
;
if
(
this
.
listRef
.
current
!
=
=
document
.
activeElement
)
{
this
.
listRef
.
current
.
focus
(
)
;
}
}
if
(
this
.
state
.
current
!
=
=
index
)
{
this
.
setState
(
{
.
.
.
state
current
:
index
}
)
;
}
}
_onKeyDown
(
e
)
{
const
{
active
current
}
=
this
.
state
;
if
(
current
=
=
null
)
{
return
;
}
if
(
e
.
altKey
|
|
e
.
ctrlKey
|
|
e
.
shiftKey
|
|
e
.
metaKey
)
{
return
;
}
this
.
_preventArrowKeyScrolling
(
e
)
;
const
{
length
}
=
this
.
props
.
items
;
switch
(
e
.
key
)
{
case
"
ArrowUp
"
:
current
>
0
&
&
this
.
_setCurrentItem
(
current
-
1
{
alignTo
:
"
top
"
}
)
;
break
;
case
"
ArrowDown
"
:
current
<
length
-
1
&
&
this
.
_setCurrentItem
(
current
+
1
{
alignTo
:
"
bottom
"
}
)
;
break
;
case
"
Home
"
:
this
.
_setCurrentItem
(
0
{
alignTo
:
"
top
"
}
)
;
break
;
case
"
End
"
:
this
.
_setCurrentItem
(
length
-
1
{
alignTo
:
"
bottom
"
}
)
;
break
;
case
"
Enter
"
:
case
"
"
:
if
(
document
.
activeElement
=
=
=
this
.
listRef
.
current
)
{
preventDefaultAndStopPropagation
(
e
)
;
if
(
active
!
=
=
current
)
{
this
.
setState
(
{
active
:
current
}
)
;
}
}
break
;
case
"
Escape
"
:
preventDefaultAndStopPropagation
(
e
)
;
if
(
active
!
=
null
)
{
this
.
setState
(
{
active
:
null
}
)
;
}
this
.
listRef
.
current
.
focus
(
)
;
break
;
}
}
render
(
)
{
const
{
active
current
}
=
this
.
state
;
const
{
items
}
=
this
.
props
;
return
ul
(
{
ref
:
this
.
listRef
className
:
"
list
"
tabIndex
:
0
onKeyDown
:
this
.
_onKeyDown
onKeyPress
:
this
.
_preventArrowKeyScrolling
onKeyUp
:
this
.
_preventArrowKeyScrolling
onMouseDown
:
(
)
=
>
this
.
setState
(
{
mouseDown
:
true
}
)
onMouseUp
:
(
)
=
>
this
.
setState
(
{
mouseDown
:
false
}
)
onFocus
:
(
)
=
>
{
if
(
current
!
=
null
|
|
this
.
state
.
mouseDown
)
{
return
;
}
this
.
_setCurrentItem
(
0
)
;
}
onClick
:
(
)
=
>
{
this
.
listRef
.
current
.
focus
(
)
;
}
onBlur
:
e
=
>
{
if
(
active
!
=
null
)
{
const
{
relatedTarget
}
=
e
;
if
(
!
this
.
listRef
.
current
.
contains
(
relatedTarget
)
)
{
this
.
setState
(
{
active
:
null
}
)
;
}
}
}
"
aria
-
label
"
:
this
.
props
.
label
"
aria
-
labelledby
"
:
this
.
props
.
labelledBy
"
aria
-
activedescendant
"
:
current
!
=
null
?
items
[
current
]
.
key
:
null
}
items
.
map
(
(
item
index
)
=
>
{
return
ListItem
(
{
item
current
:
index
=
=
=
current
active
:
index
=
=
=
active
key
:
{
item
.
key
}
-
{
index
=
=
=
active
?
"
active
"
:
"
inactive
"
}
onClick
:
(
)
=
>
this
.
_setCurrentItem
(
index
{
preventAutoScroll
:
true
}
)
}
)
;
}
)
)
;
}
}
module
.
exports
=
{
ListItem
:
ListItemClass
List
}
;
