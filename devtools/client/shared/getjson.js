"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
loader
.
lazyRequireGetter
(
this
"
asyncStorage
"
"
devtools
/
shared
/
async
-
storage
"
)
;
exports
.
getJSON
=
function
(
prefName
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
xhr
=
new
XMLHttpRequest
(
)
;
if
(
Services
.
prefs
.
prefHasUserValue
(
prefName
+
"
_cache
"
)
)
{
const
json
=
Services
.
prefs
.
getCharPref
(
prefName
+
"
_cache
"
)
;
asyncStorage
.
setItem
(
prefName
+
"
_cache
"
json
)
.
catch
(
function
(
e
)
{
console
.
error
(
e
)
;
}
)
;
Services
.
prefs
.
clearUserPref
(
prefName
+
"
_cache
"
)
;
}
function
readFromStorage
(
networkError
)
{
asyncStorage
.
getItem
(
prefName
+
"
_cache
"
)
.
then
(
function
(
json
)
{
if
(
!
json
)
{
return
reject
(
"
Empty
cache
for
"
+
prefName
)
;
}
return
resolve
(
json
)
;
}
)
.
catch
(
function
(
e
)
{
reject
(
"
JSON
not
available
CDN
error
:
"
+
networkError
+
"
storage
error
:
"
+
e
)
;
}
)
;
}
xhr
.
onload
=
(
)
=
>
{
try
{
const
json
=
JSON
.
parse
(
xhr
.
responseText
)
;
asyncStorage
.
setItem
(
prefName
+
"
_cache
"
json
)
.
catch
(
function
(
e
)
{
console
.
error
(
e
)
;
}
)
;
resolve
(
json
)
;
}
catch
(
e
)
{
readFromStorage
(
e
)
;
}
}
;
xhr
.
onerror
=
e
=
>
{
readFromStorage
(
e
)
;
}
;
xhr
.
open
(
"
get
"
Services
.
prefs
.
getCharPref
(
prefName
)
)
;
xhr
.
send
(
)
;
}
)
;
}
;
