"
use
strict
"
;
const
variableFileContents
=
require
(
"
raw
!
chrome
:
/
/
devtools
/
skin
/
variables
.
css
"
)
;
const
THEME_SELECTOR_STRINGS
=
{
light
:
"
:
root
.
theme
-
light
{
"
dark
:
"
:
root
.
theme
-
dark
{
"
root
:
"
:
root
{
"
}
;
const
THEME_PREF
=
"
devtools
.
theme
"
;
function
getThemeFile
(
name
)
{
const
selector
=
THEME_SELECTOR_STRINGS
[
name
]
|
|
THEME_SELECTOR_STRINGS
.
light
;
let
theme
=
variableFileContents
;
theme
=
theme
.
substring
(
theme
.
indexOf
(
selector
)
)
;
theme
=
theme
.
substring
(
0
theme
.
indexOf
(
"
}
"
)
)
;
return
theme
;
}
const
getAutoTheme
=
(
exports
.
getAutoTheme
=
(
)
=
>
{
return
Services
.
appinfo
.
chromeColorSchemeIsDark
?
"
dark
"
:
"
light
"
;
}
)
;
const
getTheme
=
(
exports
.
getTheme
=
(
)
=
>
{
const
theme
=
getThemePrefValue
(
)
;
if
(
theme
=
=
"
auto
"
)
{
return
getAutoTheme
(
)
;
}
return
theme
;
}
)
;
const
getThemePrefValue
=
(
exports
.
getThemePrefValue
=
(
)
=
>
{
return
Services
.
prefs
.
getCharPref
(
THEME_PREF
"
"
)
;
}
)
;
const
getColor
=
(
exports
.
getColor
=
(
type
theme
)
=
>
{
const
themeName
=
theme
|
|
getTheme
(
)
;
let
themeFile
=
getThemeFile
(
themeName
)
;
let
match
=
themeFile
.
match
(
new
RegExp
(
"
-
-
theme
-
"
+
type
+
"
:
(
.
*
)
;
"
)
)
;
const
variableMatch
=
match
?
match
[
1
]
.
match
(
/
var
\
(
(
.
*
)
\
)
/
)
:
null
;
if
(
variableMatch
)
{
themeFile
=
getThemeFile
(
"
root
"
)
;
match
=
themeFile
.
match
(
new
RegExp
(
{
variableMatch
[
1
]
}
:
(
.
*
)
;
)
)
;
}
return
match
?
match
[
1
]
:
null
;
}
)
;
const
setTheme
=
(
exports
.
setTheme
=
newTheme
=
>
{
Services
.
prefs
.
setCharPref
(
THEME_PREF
newTheme
)
;
}
)
;
const
addThemeObserver
=
(
exports
.
addThemeObserver
=
observer
=
>
{
Services
.
obs
.
addObserver
(
observer
"
look
-
and
-
feel
-
changed
"
)
;
Services
.
prefs
.
addObserver
(
THEME_PREF
observer
)
;
}
)
;
const
removeThemeObserver
=
(
exports
.
removeThemeObserver
=
observer
=
>
{
Services
.
obs
.
removeObserver
(
observer
"
look
-
and
-
feel
-
changed
"
)
;
Services
.
prefs
.
removeObserver
(
THEME_PREF
observer
)
;
}
)
;
