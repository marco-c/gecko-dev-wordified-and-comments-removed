"
use
strict
"
;
const
{
Ci
Cu
}
=
require
(
"
chrome
"
)
;
const
{
NetUtil
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
{
}
)
;
loader
.
lazyRequireGetter
(
this
"
Services
"
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
VARIABLES_URI
=
"
chrome
:
/
/
devtools
/
skin
/
variables
.
css
"
;
const
THEME_SELECTOR_STRINGS
=
{
light
:
"
:
root
.
theme
-
light
{
"
dark
:
"
:
root
.
theme
-
dark
{
"
}
let
variableFileContents
;
function
readURI
(
uri
)
{
let
stream
=
NetUtil
.
newChannel
(
{
uri
:
NetUtil
.
newURI
(
uri
"
UTF
-
8
"
)
loadUsingSystemPrincipal
:
true
}
)
.
open
(
)
;
let
count
=
stream
.
available
(
)
;
let
data
=
NetUtil
.
readInputStreamToString
(
stream
count
{
charset
:
"
UTF
-
8
"
}
)
;
stream
.
close
(
)
;
return
data
;
}
function
getThemeFile
(
name
)
{
if
(
!
variableFileContents
)
{
variableFileContents
=
readURI
(
VARIABLES_URI
)
;
}
let
selector
=
THEME_SELECTOR_STRINGS
[
name
]
|
|
THEME_SELECTOR_STRINGS
[
"
light
"
]
;
let
theme
=
variableFileContents
;
theme
=
theme
.
substring
(
theme
.
indexOf
(
selector
)
)
;
theme
=
theme
.
substring
(
0
theme
.
indexOf
(
"
}
"
)
)
;
return
theme
;
}
const
getTheme
=
exports
.
getTheme
=
(
)
=
>
Services
.
prefs
.
getCharPref
(
"
devtools
.
theme
"
)
;
const
getColor
=
exports
.
getColor
=
(
type
theme
)
=
>
{
let
themeName
=
theme
|
|
getTheme
(
)
;
let
themeFile
=
getThemeFile
(
themeName
)
;
let
match
=
themeFile
.
match
(
new
RegExp
(
"
-
-
theme
-
"
+
type
+
"
:
(
.
*
)
;
"
)
)
;
return
match
?
match
[
1
]
:
null
;
}
;
const
setTheme
=
exports
.
setTheme
=
(
newTheme
)
=
>
{
let
oldTheme
=
getTheme
(
)
;
Services
.
prefs
.
setCharPref
(
"
devtools
.
theme
"
newTheme
)
;
gDevTools
.
emit
(
"
pref
-
changed
"
{
pref
:
"
devtools
.
theme
"
newValue
:
newTheme
oldValue
:
oldTheme
}
)
;
}
;
