"
use
strict
"
;
const
{
ConsoleCommand
}
=
require
(
"
devtools
/
client
/
webconsole
/
types
"
)
;
function
JSTerm
(
webConsoleUI
)
{
this
.
ui
=
webConsoleUI
;
this
.
hudId
=
this
.
ui
.
hudId
;
this
.
historyLoaded
=
new
Promise
(
r
=
>
{
r
(
)
;
}
)
;
}
JSTerm
.
prototype
=
{
SELECTED_FRAME
:
-
1
get
webConsoleClient
(
)
{
return
this
.
hud
.
webConsoleClient
;
}
openVariablesView
(
)
{
}
init
(
)
{
this
.
doc
=
this
.
hud
.
window
.
document
;
this
.
root
=
this
.
doc
.
createElement
(
"
div
"
)
;
this
.
root
.
className
=
"
jsterm
-
input
-
container
"
;
this
.
inputNode
=
this
.
doc
.
createElement
(
"
input
"
)
;
this
.
inputNode
.
className
=
"
jsterm
-
input
-
node
jsterm
-
input
-
node
-
html
"
;
this
.
root
.
appendChild
(
this
.
inputNode
)
;
this
.
doc
.
querySelector
(
"
#
app
-
wrapper
"
)
.
appendChild
(
this
.
root
)
;
this
.
inputNode
.
onkeypress
=
(
e
)
=
>
{
if
(
e
.
key
=
=
=
"
Enter
"
)
{
this
.
execute
(
)
;
}
}
;
}
_setValue
(
newValue
)
{
this
.
inputNode
.
value
=
newValue
;
}
_getValue
(
)
{
return
this
.
inputNode
.
value
|
|
"
"
;
}
execute
(
executeString
)
{
return
new
Promise
(
resolve
=
>
{
executeString
=
executeString
|
|
this
.
_getValue
(
)
;
if
(
!
executeString
)
{
return
;
}
const
message
=
new
ConsoleCommand
(
{
messageText
:
executeString
}
)
;
this
.
ui
.
proxy
.
dispatchMessageAdd
(
message
)
;
let
selectedNodeActor
=
null
;
const
inspectorSelection
=
this
.
ui
.
owner
.
getInspectorSelection
(
)
;
if
(
inspectorSelection
&
&
inspectorSelection
.
nodeFront
)
{
selectedNodeActor
=
inspectorSelection
.
nodeFront
.
actorID
;
}
const
onResult
=
(
response
)
=
>
{
if
(
response
.
error
)
{
console
.
error
(
"
Evaluation
error
"
+
response
.
error
+
"
:
"
+
response
.
message
)
;
return
;
}
this
.
ui
.
wrapper
.
dispatchMessageAdd
(
response
true
)
.
then
(
resolve
)
;
}
;
const
options
=
{
frame
:
this
.
SELECTED_FRAME
selectedNodeActor
:
selectedNodeActor
}
;
this
.
requestEvaluation
(
executeString
options
)
.
then
(
onResult
onResult
)
;
this
.
_setValue
(
"
"
)
;
}
)
;
}
requestEvaluation
(
str
options
=
{
}
)
{
let
frameActor
=
null
;
if
(
"
frame
"
in
options
)
{
frameActor
=
this
.
getFrameActor
(
options
.
frame
)
;
}
const
evalOptions
=
{
bindObjectActor
:
options
.
bindObjectActor
frameActor
:
frameActor
selectedNodeActor
:
options
.
selectedNodeActor
selectedObjectActor
:
options
.
selectedObjectActor
}
;
return
this
.
webConsoleClient
.
evaluateJSAsync
(
str
evalOptions
)
;
}
getFrameActor
(
frame
)
{
const
state
=
this
.
ui
.
owner
.
getDebuggerFrames
(
)
;
if
(
!
state
)
{
return
null
;
}
let
grip
;
if
(
frame
=
=
this
.
SELECTED_FRAME
)
{
grip
=
state
.
frames
[
state
.
selected
]
;
}
else
{
grip
=
state
.
frames
[
frame
]
;
}
return
grip
?
grip
.
actor
:
null
;
}
focus
(
)
{
if
(
this
.
inputNode
)
{
this
.
inputNode
.
focus
(
)
;
}
}
}
;
module
.
exports
.
JSTerm
=
JSTerm
;
