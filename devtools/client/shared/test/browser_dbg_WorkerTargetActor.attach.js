"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
helper_workers
.
js
"
this
)
;
var
MAX_TOTAL_VIEWERS
=
"
browser
.
sessionhistory
.
max_total_viewers
"
;
var
TAB1_URL
=
EXAMPLE_URL
+
"
doc_WorkerTargetActor
.
attach
-
tab1
.
html
"
;
var
TAB2_URL
=
EXAMPLE_URL
+
"
doc_WorkerTargetActor
.
attach
-
tab2
.
html
"
;
var
WORKER1_URL
=
"
code_WorkerTargetActor
.
attach
-
worker1
.
js
"
;
var
WORKER2_URL
=
"
code_WorkerTargetActor
.
attach
-
worker2
.
js
"
;
function
test
(
)
{
Task
.
spawn
(
function
*
(
)
{
const
oldMaxTotalViewers
=
SpecialPowers
.
getIntPref
(
MAX_TOTAL_VIEWERS
)
;
SpecialPowers
.
setIntPref
(
MAX_TOTAL_VIEWERS
10
)
;
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerAllActors
(
)
;
const
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
yield
connect
(
client
)
;
const
tab
=
yield
addTab
(
TAB1_URL
)
;
const
{
tabs
}
=
yield
listTabs
(
client
)
;
const
[
targetFront
]
=
yield
attachTarget
(
client
findTab
(
tabs
TAB1_URL
)
)
;
yield
listWorkers
(
targetFront
)
;
yield
createWorkerInTab
(
tab
WORKER1_URL
)
;
let
{
workers
}
=
yield
listWorkers
(
targetFront
)
;
let
[
workerClient1
]
=
yield
attachWorker
(
targetFront
findWorker
(
workers
WORKER1_URL
)
)
;
is
(
workerClient1
.
isClosed
false
"
worker
in
tab
1
should
not
be
closed
"
)
;
executeSoon
(
(
)
=
>
{
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
TAB2_URL
)
;
}
)
;
yield
waitForWorkerClose
(
workerClient1
)
;
is
(
workerClient1
.
isClosed
true
"
worker
in
tab
1
should
be
closed
"
)
;
yield
createWorkerInTab
(
tab
WORKER2_URL
)
;
(
{
workers
}
=
yield
listWorkers
(
targetFront
)
)
;
const
[
workerClient2
]
=
yield
attachWorker
(
targetFront
findWorker
(
workers
WORKER2_URL
)
)
;
is
(
workerClient2
.
isClosed
false
"
worker
in
tab
2
should
not
be
closed
"
)
;
executeSoon
(
(
)
=
>
{
tab
.
linkedBrowser
.
goBack
(
)
;
}
)
;
yield
waitForWorkerClose
(
workerClient2
)
;
is
(
workerClient2
.
isClosed
true
"
worker
in
tab
2
should
be
closed
"
)
;
(
{
workers
}
=
yield
listWorkers
(
targetFront
)
)
;
[
workerClient1
]
=
yield
attachWorker
(
targetFront
findWorker
(
workers
WORKER1_URL
)
)
;
is
(
workerClient1
.
isClosed
false
"
worker
in
tab
1
should
not
be
closed
"
)
;
yield
close
(
client
)
;
SpecialPowers
.
setIntPref
(
MAX_TOTAL_VIEWERS
oldMaxTotalViewers
)
;
finish
(
)
;
}
)
;
}
