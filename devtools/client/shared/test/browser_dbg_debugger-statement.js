"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
helper_workers
.
js
"
this
)
;
const
TAB_URL
=
TEST_URI_ROOT
+
"
doc_inline
-
debugger
-
statement
.
html
"
;
add_task
(
async
(
)
=
>
{
const
tab
=
await
addTab
(
TAB_URL
)
;
const
target
=
await
TargetFactory
.
forTab
(
tab
)
;
await
target
.
attach
(
)
;
const
{
client
}
=
target
;
const
threadFront
=
await
testEarlyDebuggerStatement
(
client
tab
target
)
;
await
testDebuggerStatement
(
client
tab
threadFront
)
;
await
target
.
destroy
(
)
;
}
)
;
async
function
testEarlyDebuggerStatement
(
client
tab
targetFront
)
{
const
onPaused
=
function
(
packet
)
{
ok
(
false
"
Pause
shouldn
'
t
be
called
before
we
'
ve
attached
!
"
)
;
}
;
client
.
on
(
"
paused
"
onPaused
)
;
callInTab
(
tab
"
runDebuggerStatement
"
)
;
client
.
off
(
"
paused
"
onPaused
)
;
const
threadFront
=
await
targetFront
.
attachThread
(
)
;
await
threadFront
.
resume
(
)
;
ok
(
true
"
Pause
wasn
'
t
called
before
we
'
ve
attached
.
"
)
;
return
threadFront
;
}
async
function
testDebuggerStatement
(
client
tab
threadFront
)
{
const
onPaused
=
new
Promise
(
resolve
=
>
{
threadFront
.
on
(
"
paused
"
async
packet
=
>
{
await
threadFront
.
resume
(
)
;
ok
(
true
"
The
pause
handler
was
triggered
on
a
debugger
statement
.
"
)
;
resolve
(
)
;
}
)
;
}
)
;
callInTab
(
tab
"
runDebuggerStatement
"
)
;
return
onPaused
;
}
