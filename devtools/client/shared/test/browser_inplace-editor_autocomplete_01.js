"
use
strict
"
;
const
AutocompletePopup
=
require
(
"
devtools
/
client
/
shared
/
autocomplete
-
popup
"
)
;
const
{
InplaceEditor
}
=
require
(
"
devtools
/
client
/
shared
/
inplace
-
editor
"
)
;
loadHelperScript
(
"
helper_inplace_editor
.
js
"
)
;
const
testData
=
[
[
"
b
"
"
border
"
1
3
]
[
"
VK_DOWN
"
"
box
-
sizing
"
2
3
]
[
"
VK_DOWN
"
"
background
"
0
3
]
[
"
VK_DOWN
"
"
border
"
1
3
]
[
"
VK_BACK_SPACE
"
"
b
"
-
1
0
]
[
"
VK_BACK_SPACE
"
"
"
-
1
0
]
[
"
VK_DOWN
"
"
background
"
0
6
]
[
"
VK_LEFT
"
"
background
"
-
1
0
]
]
;
const
mockGetCSSPropertyList
=
function
(
)
{
return
[
"
background
"
"
border
"
"
box
-
sizing
"
"
color
"
"
display
"
"
visibility
"
]
;
}
;
add_task
(
function
*
(
)
{
yield
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
"
inplace
editor
CSS
property
autocomplete
"
)
;
let
[
host
win
doc
]
=
yield
createHost
(
)
;
let
xulDocument
=
win
.
top
.
document
;
let
popup
=
new
AutocompletePopup
(
xulDocument
{
autoSelect
:
true
}
)
;
yield
new
Promise
(
resolve
=
>
{
createInplaceEditorAndClick
(
{
start
:
runPropertyAutocompletionTest
contentType
:
InplaceEditor
.
CONTENT_TYPES
.
CSS_PROPERTY
done
:
resolve
popup
}
doc
)
;
}
)
;
popup
.
destroy
(
)
;
host
.
destroy
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
let
runPropertyAutocompletionTest
=
Task
.
async
(
function
*
(
editor
)
{
info
(
"
Starting
to
test
for
css
property
completion
"
)
;
editor
.
_getCSSPropertyList
=
mockGetCSSPropertyList
;
for
(
let
data
of
testData
)
{
yield
testCompletion
(
data
editor
)
;
}
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
editor
.
input
.
defaultView
)
;
}
)
;
