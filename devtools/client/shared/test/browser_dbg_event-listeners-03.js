"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
helper_workers
.
js
"
this
)
;
const
TAB_URL
=
TEST_URI_ROOT
+
"
doc_native
-
event
-
handler
.
html
"
;
add_task
(
async
(
)
=
>
{
const
tab
=
await
addTab
(
TAB_URL
)
;
const
{
client
threadClient
}
=
await
attachThreadActorForTab
(
tab
)
;
await
pauseDebuggee
(
client
tab
threadClient
)
;
await
testEventListeners
(
threadClient
)
;
}
)
;
function
pauseDebuggee
(
client
tab
threadClient
)
{
const
deferred
=
getDeferredPromise
(
)
.
defer
(
)
;
client
.
addOneTimeListener
(
"
paused
"
(
event
packet
)
=
>
{
is
(
packet
.
type
"
paused
"
"
We
should
now
be
paused
.
"
)
;
is
(
packet
.
why
.
type
"
debuggerStatement
"
"
The
debugger
statement
was
hit
.
"
)
;
deferred
.
resolve
(
threadClient
)
;
}
)
;
generateMouseClickInTab
(
tab
"
content
.
document
.
querySelector
(
'
button
'
)
"
)
;
return
deferred
.
promise
;
}
function
testEventListeners
(
threadClient
)
{
const
deferred
=
getDeferredPromise
(
)
.
defer
(
)
;
threadClient
.
eventListeners
(
packet
=
>
{
if
(
packet
.
error
)
{
const
msg
=
"
Error
getting
event
listeners
:
"
+
packet
.
message
;
ok
(
false
msg
)
;
deferred
.
reject
(
msg
)
;
return
;
}
is
(
packet
.
listeners
.
length
2
"
Found
all
event
listeners
.
"
)
;
threadClient
.
resume
(
deferred
.
resolve
)
;
}
)
;
return
deferred
.
promise
;
}
