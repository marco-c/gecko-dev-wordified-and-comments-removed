"
use
strict
"
;
const
{
Loader
Require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
base
-
loader
.
js
"
)
;
const
loader
=
new
Loader
(
{
paths
:
{
devtools
:
"
resource
:
/
/
devtools
"
}
globals
:
{
}
}
)
;
const
require
=
Require
(
loader
{
id
:
"
undo
-
test
"
}
)
;
const
{
UndoStack
}
=
require
(
"
devtools
/
client
/
shared
/
undo
"
)
;
const
MAX_SIZE
=
5
;
function
run_test
(
)
{
let
str
=
"
"
;
const
stack
=
new
UndoStack
(
MAX_SIZE
)
;
function
add
(
ch
)
{
stack
.
do
(
function
(
)
{
str
+
=
ch
;
}
function
(
)
{
str
=
str
.
slice
(
0
-
1
)
;
}
)
;
}
Assert
.
ok
(
!
stack
.
canUndo
(
)
)
;
Assert
.
ok
(
!
stack
.
canRedo
(
)
)
;
add
(
"
a
"
)
;
Assert
.
ok
(
stack
.
canUndo
(
)
)
;
Assert
.
ok
(
!
stack
.
canRedo
(
)
)
;
add
(
"
b
"
)
;
add
(
"
c
"
)
;
add
(
"
d
"
)
;
add
(
"
e
"
)
;
Assert
.
equal
(
str
"
abcde
"
)
;
stack
.
undo
(
)
;
Assert
.
equal
(
str
"
abcd
"
)
;
Assert
.
ok
(
stack
.
canRedo
(
)
)
;
stack
.
redo
(
)
;
Assert
.
equal
(
str
"
abcde
"
)
;
Assert
.
ok
(
!
stack
.
canRedo
(
)
)
;
stack
.
undo
(
)
;
Assert
.
equal
(
str
"
abcd
"
)
;
add
(
"
q
"
)
;
Assert
.
equal
(
str
"
abcdq
"
)
;
Assert
.
ok
(
!
stack
.
canRedo
(
)
)
;
stack
.
undo
(
)
;
Assert
.
equal
(
str
"
abcd
"
)
;
stack
.
redo
(
)
;
Assert
.
equal
(
str
"
abcdq
"
)
;
while
(
stack
.
canUndo
(
)
)
{
stack
.
undo
(
)
;
}
Assert
.
equal
(
str
"
"
)
;
while
(
stack
.
canRedo
(
)
)
{
stack
.
redo
(
)
;
}
Assert
.
equal
(
str
"
abcdq
"
)
;
add
(
"
1
"
)
;
add
(
"
2
"
)
;
add
(
"
3
"
)
;
Assert
.
equal
(
str
"
abcdq123
"
)
;
while
(
stack
.
canUndo
(
)
)
{
stack
.
undo
(
)
;
}
Assert
.
equal
(
str
"
abc
"
)
;
}
