"
use
strict
"
;
function
waitUntilState
(
store
predicate
)
{
const
deferred
=
defer
(
)
;
const
unsubscribe
=
store
.
subscribe
(
check
)
;
info
(
Waiting
for
state
predicate
"
{
predicate
}
"
)
;
function
check
(
)
{
if
(
predicate
(
store
.
getState
(
)
)
)
{
info
(
Found
state
predicate
"
{
predicate
}
"
)
;
unsubscribe
(
)
;
deferred
.
resolve
(
)
;
}
}
check
(
)
;
return
deferred
.
promise
;
}
function
waitUntilAction
(
store
actionType
)
{
const
deferred
=
defer
(
)
;
const
unsubscribe
=
store
.
subscribe
(
check
)
;
const
history
=
store
.
history
;
let
index
=
history
.
length
;
info
(
Waiting
for
action
"
{
actionType
}
"
)
;
function
check
(
)
{
const
action
=
history
[
index
+
+
]
;
if
(
action
&
&
action
.
type
=
=
=
actionType
)
{
info
(
Found
action
"
{
actionType
}
"
)
;
unsubscribe
(
)
;
deferred
.
resolve
(
store
.
getState
(
)
)
;
}
}
return
deferred
.
promise
;
}
