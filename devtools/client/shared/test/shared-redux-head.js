"
use
strict
"
;
function
waitUntilState
(
store
predicate
)
{
return
new
Promise
(
resolve
=
>
{
const
unsubscribe
=
store
.
subscribe
(
check
)
;
info
(
Waiting
for
state
predicate
"
{
predicate
}
"
)
;
function
check
(
)
{
if
(
predicate
(
store
.
getState
(
)
)
)
{
info
(
Found
state
predicate
"
{
predicate
}
"
)
;
unsubscribe
(
)
;
resolve
(
)
;
}
}
check
(
)
;
}
)
;
}
function
waitForDispatch
(
store
actionType
repeat
=
1
)
{
let
count
=
0
;
return
new
Promise
(
resolve
=
>
{
store
.
dispatch
(
{
type
:
"
service
/
waitUntil
"
predicate
:
action
=
>
{
const
isDone
=
!
action
.
status
|
|
action
.
status
=
=
=
"
done
"
|
|
action
.
status
=
=
=
"
error
"
;
if
(
action
.
type
=
=
=
actionType
&
&
isDone
&
&
+
+
count
=
=
repeat
)
{
return
true
;
}
return
false
;
}
run
:
(
dispatch
getState
action
)
=
>
{
resolve
(
action
)
;
}
}
)
;
}
)
;
}
