"
use
strict
"
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
{
editableField
}
=
require
(
"
devtools
/
client
/
shared
/
inplace
-
editor
"
)
;
const
createInplaceEditorAndClick
=
async
function
(
options
doc
textContent
)
{
let
span
=
options
.
element
=
createSpan
(
doc
)
;
if
(
textContent
)
{
span
.
textContent
=
textContent
;
}
info
(
"
Creating
an
inplace
-
editor
field
"
)
;
editableField
(
options
)
;
info
(
"
Clicking
on
the
inplace
-
editor
field
to
turn
to
edit
mode
"
)
;
span
.
click
(
)
;
}
;
function
createSpan
(
doc
)
{
info
(
"
Creating
a
new
span
element
"
)
;
let
div
=
doc
.
createElementNS
(
HTML_NS
"
div
"
)
;
let
span
=
doc
.
createElementNS
(
HTML_NS
"
span
"
)
;
span
.
setAttribute
(
"
tabindex
"
"
0
"
)
;
span
.
style
.
fontSize
=
"
11px
"
;
span
.
style
.
display
=
"
inline
-
block
"
;
span
.
style
.
width
=
"
100px
"
;
span
.
style
.
border
=
"
1px
solid
red
"
;
span
.
style
.
fontFamily
=
"
monospace
"
;
div
.
style
.
height
=
"
100
%
"
;
div
.
style
.
position
=
"
absolute
"
;
div
.
appendChild
(
span
)
;
let
parent
=
doc
.
querySelector
(
"
window
"
)
|
|
doc
.
body
;
parent
.
appendChild
(
div
)
;
return
span
;
}
async
function
testCompletion
(
[
key
completion
index
total
postLabel
]
editor
)
{
info
(
"
Pressing
key
"
+
key
)
;
info
(
"
Expecting
"
+
completion
)
;
let
onVisibilityChange
=
null
;
let
open
=
total
>
0
;
if
(
editor
.
popup
.
isOpen
!
=
open
)
{
onVisibilityChange
=
editor
.
popup
.
once
(
open
?
"
popup
-
opened
"
:
"
popup
-
closed
"
)
;
}
let
onSuggest
;
if
(
/
(
left
|
right
|
back_space
|
escape
)
/
ig
.
test
(
key
)
)
{
info
(
"
Adding
event
listener
for
right
|
back_space
|
escape
keys
"
)
;
onSuggest
=
once
(
editor
.
input
"
keypress
"
)
;
}
else
{
info
(
"
Waiting
for
after
-
suggest
event
on
the
editor
"
)
;
onSuggest
=
editor
.
once
(
"
after
-
suggest
"
)
;
}
info
(
"
Synthesizing
key
"
+
key
)
;
EventUtils
.
synthesizeKey
(
key
{
}
editor
.
input
.
defaultView
)
;
await
onSuggest
;
await
onVisibilityChange
;
await
waitForTime
(
5
)
;
info
(
"
Checking
the
state
"
)
;
if
(
completion
!
=
=
null
)
{
is
(
editor
.
input
.
value
completion
"
Correct
value
is
autocompleted
"
)
;
}
if
(
postLabel
)
{
let
selectedItem
=
editor
.
popup
.
getItems
(
)
[
index
]
;
let
selectedElement
=
editor
.
popup
.
elements
.
get
(
selectedItem
)
;
ok
(
selectedElement
.
textContent
.
includes
(
postLabel
)
"
Selected
popup
element
contains
the
expected
post
-
label
"
)
;
}
if
(
total
=
=
=
0
)
{
ok
(
!
(
editor
.
popup
&
&
editor
.
popup
.
isOpen
)
"
Popup
is
closed
"
)
;
}
else
{
ok
(
editor
.
popup
.
isOpen
"
Popup
is
open
"
)
;
is
(
editor
.
popup
.
getItems
(
)
.
length
total
"
Number
of
suggestions
match
"
)
;
is
(
editor
.
popup
.
selectedIndex
index
"
Expected
item
is
selected
"
)
;
}
}
