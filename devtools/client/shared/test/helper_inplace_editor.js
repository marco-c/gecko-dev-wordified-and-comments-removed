"
use
strict
"
;
const
{
editableField
}
=
require
(
"
devtools
/
client
/
shared
/
inplace
-
editor
"
)
;
function
createInplaceEditorAndClick
(
options
doc
textContent
)
{
doc
.
body
.
innerHTML
=
"
"
;
let
span
=
options
.
element
=
createSpan
(
doc
)
;
if
(
textContent
)
{
span
.
textContent
=
textContent
;
}
info
(
"
Creating
an
inplace
-
editor
field
"
)
;
editableField
(
options
)
;
info
(
"
Clicking
on
the
inplace
-
editor
field
to
turn
to
edit
mode
"
)
;
span
.
click
(
)
;
}
function
createSpan
(
doc
)
{
info
(
"
Creating
a
new
span
element
"
)
;
let
span
=
doc
.
createElement
(
"
span
"
)
;
span
.
setAttribute
(
"
tabindex
"
"
0
"
)
;
span
.
style
.
fontSize
=
"
11px
"
;
span
.
style
.
fontFamily
=
"
monospace
"
;
doc
.
body
.
appendChild
(
span
)
;
return
span
;
}
function
*
testCompletion
(
[
key
completion
index
total
]
editor
)
{
info
(
"
Pressing
key
"
+
key
)
;
info
(
"
Expecting
"
+
completion
)
;
let
onSuggest
;
if
(
/
(
left
|
right
|
back_space
|
escape
)
/
ig
.
test
(
key
)
)
{
info
(
"
Adding
event
listener
for
right
|
back_space
|
escape
keys
"
)
;
onSuggest
=
once
(
editor
.
input
"
keypress
"
)
;
}
else
{
info
(
"
Waiting
for
after
-
suggest
event
on
the
editor
"
)
;
onSuggest
=
editor
.
once
(
"
after
-
suggest
"
)
;
}
info
(
"
Synthesizing
key
"
+
key
)
;
EventUtils
.
synthesizeKey
(
key
{
}
editor
.
input
.
defaultView
)
;
yield
onSuggest
;
yield
waitForTick
(
)
;
info
(
"
Checking
the
state
"
)
;
if
(
completion
!
=
null
)
{
is
(
editor
.
input
.
value
completion
"
Correct
value
is
autocompleted
"
)
;
}
if
(
total
=
=
=
0
)
{
ok
(
!
(
editor
.
popup
&
&
editor
.
popup
.
isOpen
)
"
Popup
is
closed
"
)
;
}
else
{
ok
(
editor
.
popup
.
_panel
.
state
=
=
"
open
"
|
|
editor
.
popup
.
_panel
.
state
=
=
"
showing
"
"
Popup
is
open
"
)
;
is
(
editor
.
popup
.
getItems
(
)
.
length
total
"
Number
of
suggestions
match
"
)
;
is
(
editor
.
popup
.
selectedIndex
index
"
Expected
item
is
selected
"
)
;
}
}
