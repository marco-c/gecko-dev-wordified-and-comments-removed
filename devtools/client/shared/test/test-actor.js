"
use
strict
"
;
const
{
Ci
Cc
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
getRect
getAdjustedQuads
getWindowDimensions
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
const
{
isAgentStylesheet
getCSSStyleRules
}
=
require
(
"
devtools
/
shared
/
inspector
/
css
-
logic
"
)
;
const
InspectorUtils
=
require
(
"
InspectorUtils
"
)
;
const
EventUtils
=
{
}
;
EventUtils
.
window
=
{
}
;
EventUtils
.
parent
=
{
}
;
EventUtils
.
_EU_Ci
=
Ci
;
EventUtils
.
_EU_Cc
=
Cc
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
EventUtils
)
;
var
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
TestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
Arg
RetVal
}
=
protocol
;
const
dumpn
=
msg
=
>
{
dump
(
msg
+
"
\
n
"
)
;
}
;
function
getHighlighterCanvasFrameHelper
(
conn
actorID
)
{
const
actor
=
conn
.
getActor
(
actorID
)
;
if
(
actor
&
&
actor
.
_highlighter
)
{
return
actor
.
_highlighter
.
markup
;
}
return
null
;
}
var
testSpec
=
protocol
.
generateActorSpec
(
{
typeName
:
"
test
"
events
:
{
"
highlighter
-
updated
"
:
{
}
}
methods
:
{
getHighlighterAttribute
:
{
request
:
{
nodeID
:
Arg
(
0
"
string
"
)
name
:
Arg
(
1
"
string
"
)
actorID
:
Arg
(
2
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
string
"
)
}
}
getHighlighterNodeTextContent
:
{
request
:
{
nodeID
:
Arg
(
0
"
string
"
)
actorID
:
Arg
(
1
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
string
"
)
}
}
getSelectorHighlighterBoxNb
:
{
request
:
{
highlighter
:
Arg
(
0
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
number
"
)
}
}
changeHighlightedNodeWaitForUpdate
:
{
request
:
{
name
:
Arg
(
0
"
string
"
)
value
:
Arg
(
1
"
string
"
)
actorID
:
Arg
(
2
"
string
"
)
}
response
:
{
}
}
registerOneTimeHighlighterUpdate
:
{
request
:
{
actorID
:
Arg
(
0
"
string
"
)
}
response
:
{
}
}
waitForEventOnNode
:
{
request
:
{
eventName
:
Arg
(
0
"
string
"
)
selector
:
Arg
(
1
"
nullable
:
string
"
)
}
response
:
{
}
}
getAllAdjustedQuads
:
{
request
:
{
selector
:
Arg
(
0
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
json
"
)
}
}
hasPseudoClassLock
:
{
request
:
{
selector
:
Arg
(
0
"
string
"
)
pseudo
:
Arg
(
1
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
boolean
"
)
}
}
getBoundingClientRect
:
{
request
:
{
selector
:
Arg
(
0
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
json
"
)
}
}
scrollWindow
:
{
request
:
{
x
:
Arg
(
0
"
number
"
)
y
:
Arg
(
1
"
number
"
)
relative
:
Arg
(
2
"
nullable
:
boolean
"
)
}
response
:
{
value
:
RetVal
(
"
json
"
)
}
}
getNodeRect
:
{
request
:
{
selector
:
Arg
(
0
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
json
"
)
}
}
getTextNodeRect
:
{
request
:
{
parentSelector
:
Arg
(
0
"
string
"
)
childNodeIndex
:
Arg
(
1
"
number
"
)
}
response
:
{
value
:
RetVal
(
"
json
"
)
}
}
getStyleSheetsInfoForNode
:
{
request
:
{
selector
:
Arg
(
0
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
json
"
)
}
}
getWindowDimensions
:
{
request
:
{
}
response
:
{
value
:
RetVal
(
"
json
"
)
}
}
isPausedDebuggerOverlayVisible
:
{
request
:
{
}
response
:
{
value
:
RetVal
(
"
boolean
"
)
}
}
clickPausedDebuggerOverlayButton
:
{
request
:
{
id
:
Arg
(
0
"
string
"
)
}
response
:
{
}
}
isEyeDropperVisible
:
{
request
:
{
inspectorActorID
:
Arg
(
0
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
boolean
"
)
}
}
getEyeDropperElementAttribute
:
{
request
:
{
inspectorActorID
:
Arg
(
0
"
string
"
)
elementId
:
Arg
(
1
"
string
"
)
attributeName
:
Arg
(
2
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
string
"
)
}
}
getEyeDropperColorValue
:
{
request
:
{
inspectorActorID
:
Arg
(
0
"
string
"
)
}
response
:
{
value
:
RetVal
(
"
string
"
)
}
}
}
}
)
;
var
TestActor
=
protocol
.
ActorClassWithSpec
(
testSpec
{
initialize
:
function
(
conn
targetActor
options
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
conn
=
conn
;
this
.
targetActor
=
targetActor
;
}
get
content
(
)
{
return
this
.
targetActor
.
window
;
}
_querySelector
:
function
(
selector
)
{
let
document
=
this
.
content
.
document
;
if
(
Array
.
isArray
(
selector
)
)
{
const
fullSelector
=
selector
.
join
(
"
>
>
"
)
;
while
(
selector
.
length
>
1
)
{
const
str
=
selector
.
shift
(
)
;
const
iframe
=
document
.
querySelector
(
str
)
;
if
(
!
iframe
)
{
throw
new
Error
(
'
Unable
to
find
element
with
selector
"
'
+
str
+
'
"
'
+
"
(
full
selector
:
"
+
fullSelector
+
"
)
"
)
;
}
if
(
!
iframe
.
contentWindow
)
{
throw
new
Error
(
"
Iframe
selector
doesn
'
t
target
an
iframe
\
"
"
+
str
+
'
"
'
+
"
(
full
selector
:
"
+
fullSelector
+
"
)
"
)
;
}
document
=
iframe
.
contentWindow
.
document
;
}
selector
=
selector
.
shift
(
)
;
}
const
node
=
document
.
querySelector
(
selector
)
;
if
(
!
node
)
{
throw
new
Error
(
'
Unable
to
find
element
with
selector
"
'
+
selector
+
'
"
'
)
;
}
return
node
;
}
getHighlighterAttribute
:
function
(
nodeID
name
actorID
)
{
const
helper
=
getHighlighterCanvasFrameHelper
(
this
.
conn
actorID
)
;
if
(
helper
)
{
return
helper
.
getAttributeForElement
(
nodeID
name
)
;
}
return
null
;
}
getHighlighterNodeTextContent
:
function
(
nodeID
actorID
)
{
let
value
;
const
helper
=
getHighlighterCanvasFrameHelper
(
this
.
conn
actorID
)
;
if
(
helper
)
{
value
=
helper
.
getTextContentForElement
(
nodeID
)
;
}
return
value
;
}
getSelectorHighlighterBoxNb
:
function
(
actorID
)
{
const
highlighter
=
this
.
conn
.
getActor
(
actorID
)
;
const
{
_highlighter
:
h
}
=
highlighter
;
if
(
!
h
|
|
!
h
.
_highlighters
)
{
return
null
;
}
return
h
.
_highlighters
.
length
;
}
changeHighlightedNodeWaitForUpdate
:
function
(
name
value
actorID
)
{
return
new
Promise
(
resolve
=
>
{
const
highlighter
=
this
.
conn
.
getActor
(
actorID
)
;
const
{
_highlighter
:
h
}
=
highlighter
;
h
.
once
(
"
updated
"
resolve
)
;
h
.
currentNode
.
setAttribute
(
name
value
)
;
}
)
;
}
registerOneTimeHighlighterUpdate
(
actorID
)
{
const
{
_highlighter
}
=
this
.
conn
.
getActor
(
actorID
)
;
_highlighter
.
once
(
"
updated
"
)
.
then
(
(
)
=
>
this
.
emit
(
"
highlighter
-
updated
"
)
)
;
}
waitForEventOnNode
:
function
(
eventName
selector
)
{
return
new
Promise
(
resolve
=
>
{
const
node
=
selector
?
this
.
_querySelector
(
selector
)
:
this
.
content
;
node
.
addEventListener
(
eventName
function
(
)
{
resolve
(
)
;
}
{
once
:
true
}
)
;
}
)
;
}
getAllAdjustedQuads
:
function
(
selector
)
{
const
regions
=
{
}
;
const
node
=
this
.
_querySelector
(
selector
)
;
for
(
const
boxType
of
[
"
content
"
"
padding
"
"
border
"
"
margin
"
]
)
{
regions
[
boxType
]
=
getAdjustedQuads
(
this
.
content
node
boxType
)
;
}
return
regions
;
}
hasPseudoClassLock
:
function
(
selector
pseudo
)
{
const
node
=
this
.
_querySelector
(
selector
)
;
return
InspectorUtils
.
hasPseudoClassLock
(
node
pseudo
)
;
}
getBoundingClientRect
:
function
(
selector
)
{
const
node
=
this
.
_querySelector
(
selector
)
;
const
rect
=
node
.
getBoundingClientRect
(
)
;
return
{
x
:
rect
.
x
y
:
rect
.
y
width
:
rect
.
width
height
:
rect
.
height
top
:
rect
.
top
right
:
rect
.
right
bottom
:
rect
.
bottom
left
:
rect
.
left
}
;
}
scrollWindow
:
function
(
x
y
relative
)
{
if
(
isNaN
(
x
)
|
|
isNaN
(
y
)
)
{
return
{
}
;
}
return
new
Promise
(
resolve
=
>
{
this
.
content
.
addEventListener
(
"
scroll
"
function
(
event
)
{
const
data
=
{
x
:
this
.
content
.
scrollX
y
:
this
.
content
.
scrollY
}
;
resolve
(
data
)
;
}
{
once
:
true
}
)
;
this
.
content
[
relative
?
"
scrollBy
"
:
"
scrollTo
"
]
(
x
y
)
;
}
)
;
}
async
getNodeRect
(
selector
)
{
const
node
=
this
.
_querySelector
(
selector
)
;
return
getRect
(
this
.
content
node
this
.
content
)
;
}
async
getTextNodeRect
(
parentSelector
childNodeIndex
)
{
const
parentNode
=
this
.
_querySelector
(
parentSelector
)
;
const
node
=
parentNode
.
childNodes
[
childNodeIndex
]
;
return
getAdjustedQuads
(
this
.
content
node
)
[
0
]
.
bounds
;
}
getStyleSheetsInfoForNode
:
function
(
selector
)
{
const
node
=
this
.
_querySelector
(
selector
)
;
const
domRules
=
getCSSStyleRules
(
node
)
;
const
sheets
=
[
]
;
for
(
let
i
=
0
n
=
domRules
.
length
;
i
<
n
;
i
+
+
)
{
const
sheet
=
domRules
[
i
]
.
parentStyleSheet
;
sheets
.
push
(
{
href
:
sheet
.
href
isContentSheet
:
!
isAgentStylesheet
(
sheet
)
}
)
;
}
return
sheets
;
}
getWindowDimensions
:
function
(
)
{
return
getWindowDimensions
(
this
.
content
)
;
}
_getPausedDebuggerOverlay
(
)
{
return
this
.
targetActor
?
.
threadActor
?
.
_pauseOverlay
;
}
isPausedDebuggerOverlayVisible
(
)
{
const
pauseOverlay
=
this
.
_getPausedDebuggerOverlay
(
)
;
if
(
!
pauseOverlay
)
{
return
false
;
}
const
root
=
pauseOverlay
.
getElement
(
"
root
"
)
;
return
root
.
getAttribute
(
"
hidden
"
)
!
=
=
"
true
"
;
}
async
clickPausedDebuggerOverlayButton
(
id
)
{
const
pauseOverlay
=
this
.
_getPausedDebuggerOverlay
(
)
;
if
(
!
pauseOverlay
)
{
return
;
}
pauseOverlay
.
handleEvent
(
{
type
:
"
mousedown
"
target
:
{
id
}
}
)
;
}
_getEyeDropper
(
inspectorActorID
)
{
const
inspectorActor
=
this
.
conn
.
getActor
(
inspectorActorID
)
;
return
inspectorActor
?
.
_eyeDropper
;
}
isEyeDropperVisible
(
inspectorActorID
)
{
const
eyeDropper
=
this
.
_getEyeDropper
(
inspectorActorID
)
;
if
(
!
eyeDropper
)
{
return
false
;
}
return
eyeDropper
.
getElement
(
"
root
"
)
.
getAttribute
(
"
hidden
"
)
!
=
=
"
true
"
;
}
getEyeDropperElementAttribute
(
inspectorActorID
elementId
attributeName
)
{
const
eyeDropper
=
this
.
_getEyeDropper
(
inspectorActorID
)
;
if
(
!
eyeDropper
)
{
return
null
;
}
return
eyeDropper
.
getElement
(
elementId
)
.
getAttribute
(
attributeName
)
;
}
async
getEyeDropperColorValue
(
inspectorActorID
)
{
const
eyeDropper
=
this
.
_getEyeDropper
(
inspectorActorID
)
;
if
(
!
eyeDropper
)
{
return
null
;
}
const
color
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
const
colorValueElement
=
eyeDropper
.
getElement
(
"
color
-
value
"
)
;
const
textContent
=
colorValueElement
.
getTextContent
(
)
;
return
textContent
;
}
"
Couldn
'
t
get
a
non
-
empty
text
content
for
the
color
-
value
element
"
)
;
return
color
;
}
}
)
;
exports
.
TestActor
=
TestActor
;
class
TestFront
extends
protocol
.
FrontClassWithSpec
(
testSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
formAttributeName
=
"
testActor
"
;
this
.
_highlighter
=
null
;
}
set
highlighter
(
_customHighlighterGetter
)
{
this
.
_highlighter
=
_customHighlighterGetter
;
}
get
highlighter
(
)
{
return
typeof
this
.
_highlighter
=
=
=
"
function
"
?
this
.
_highlighter
(
)
:
this
.
_highlighter
;
}
changeHighlightedNodeWaitForUpdate
(
name
value
highlighter
)
{
return
super
.
changeHighlightedNodeWaitForUpdate
(
name
value
(
highlighter
|
|
this
.
highlighter
)
.
actorID
)
;
}
getHighlighterNodeAttribute
(
nodeID
name
highlighter
)
{
return
this
.
getHighlighterAttribute
(
nodeID
name
(
highlighter
|
|
this
.
highlighter
)
.
actorID
)
;
}
getHighlighterNodeTextContent
(
nodeID
highlighter
)
{
return
super
.
getHighlighterNodeTextContent
(
nodeID
(
highlighter
|
|
this
.
highlighter
)
.
actorID
)
;
}
isHighlighting
(
)
{
if
(
!
this
.
highlighter
)
{
return
false
;
}
return
this
.
getHighlighterNodeAttribute
(
"
box
-
model
-
elements
"
"
hidden
"
)
.
then
(
value
=
>
value
=
=
=
null
)
;
}
async
isNodeCorrectlyHighlighted
(
selector
is
prefix
=
"
"
)
{
prefix
+
=
(
prefix
?
"
"
:
"
"
)
+
selector
+
"
"
;
const
boxModel
=
await
this
.
_getBoxModelStatus
(
)
;
const
regions
=
await
this
.
getAllAdjustedQuads
(
selector
)
;
for
(
const
boxType
of
[
"
content
"
"
padding
"
"
border
"
"
margin
"
]
)
{
const
[
quad
]
=
regions
[
boxType
]
;
for
(
const
point
in
boxModel
[
boxType
]
.
points
)
{
is
(
boxModel
[
boxType
]
.
points
[
point
]
.
x
quad
[
point
]
.
x
prefix
+
boxType
+
"
point
"
+
point
+
"
x
coordinate
is
correct
"
)
;
is
(
boxModel
[
boxType
]
.
points
[
point
]
.
y
quad
[
point
]
.
y
prefix
+
boxType
+
"
point
"
+
point
+
"
y
coordinate
is
correct
"
)
;
}
}
}
async
getSimpleBorderRect
(
)
{
const
{
border
}
=
await
this
.
_getBoxModelStatus
(
)
;
const
{
p1
p2
p4
}
=
border
.
points
;
return
{
top
:
p1
.
y
left
:
p1
.
x
width
:
p2
.
x
-
p1
.
x
height
:
p4
.
y
-
p1
.
y
}
;
}
async
_getBoxModelStatus
(
)
{
const
isVisible
=
await
this
.
isHighlighting
(
)
;
const
ret
=
{
visible
:
isVisible
}
;
for
(
const
region
of
[
"
margin
"
"
border
"
"
padding
"
"
content
"
]
)
{
const
points
=
await
this
.
_getPointsForRegion
(
region
)
;
const
visible
=
await
this
.
_isRegionHidden
(
region
)
;
ret
[
region
]
=
{
points
visible
}
;
}
ret
.
guides
=
{
}
;
for
(
const
guide
of
[
"
top
"
"
right
"
"
bottom
"
"
left
"
]
)
{
ret
.
guides
[
guide
]
=
await
this
.
_getGuideStatus
(
guide
)
;
}
return
ret
;
}
async
assertHighlightedNode
(
selector
)
{
const
rect
=
await
this
.
getNodeRect
(
selector
)
;
return
this
.
isNodeRectHighlighted
(
rect
)
;
}
async
assertHighlightedTextNode
(
parentSelector
childNodeIndex
)
{
const
rect
=
await
this
.
getTextNodeRect
(
parentSelector
childNodeIndex
)
;
return
this
.
isNodeRectHighlighted
(
rect
)
;
}
async
isNodeRectHighlighted
(
{
left
top
width
height
}
)
{
const
{
visible
border
}
=
await
this
.
_getBoxModelStatus
(
)
;
let
points
=
border
.
points
;
if
(
!
visible
)
{
return
false
;
}
const
right
=
left
+
width
;
const
bottom
=
top
+
height
;
const
list
=
[
]
;
for
(
let
i
=
1
;
i
<
=
4
;
i
+
+
)
{
const
p
=
points
[
"
p
"
+
i
]
;
list
.
push
(
[
p
.
x
p
.
y
]
)
;
}
points
=
list
;
return
(
isInside
(
[
left
top
]
points
)
&
&
isInside
(
[
right
top
]
points
)
&
&
isInside
(
[
right
bottom
]
points
)
&
&
isInside
(
[
left
bottom
]
points
)
)
;
}
async
_getPointsForRegion
(
region
)
{
const
d
=
await
this
.
getHighlighterNodeAttribute
(
"
box
-
model
-
"
+
region
"
d
"
)
;
const
polygons
=
d
.
match
(
/
M
[
^
M
]
+
/
g
)
;
if
(
!
polygons
)
{
return
null
;
}
const
points
=
polygons
[
0
]
.
trim
(
)
.
split
(
"
"
)
.
map
(
i
=
>
{
return
i
.
replace
(
/
M
|
L
/
"
"
)
.
split
(
"
"
)
;
}
)
;
return
{
p1
:
{
x
:
parseFloat
(
points
[
0
]
[
0
]
)
y
:
parseFloat
(
points
[
0
]
[
1
]
)
}
p2
:
{
x
:
parseFloat
(
points
[
1
]
[
0
]
)
y
:
parseFloat
(
points
[
1
]
[
1
]
)
}
p3
:
{
x
:
parseFloat
(
points
[
2
]
[
0
]
)
y
:
parseFloat
(
points
[
2
]
[
1
]
)
}
p4
:
{
x
:
parseFloat
(
points
[
3
]
[
0
]
)
y
:
parseFloat
(
points
[
3
]
[
1
]
)
}
}
;
}
async
_isRegionHidden
(
region
)
{
const
value
=
await
this
.
getHighlighterNodeAttribute
(
"
box
-
model
-
"
+
region
"
hidden
"
)
;
return
value
!
=
=
null
;
}
async
_getGuideStatus
(
location
)
{
const
id
=
"
box
-
model
-
guide
-
"
+
location
;
const
hidden
=
await
this
.
getHighlighterNodeAttribute
(
id
"
hidden
"
)
;
const
x1
=
await
this
.
getHighlighterNodeAttribute
(
id
"
x1
"
)
;
const
y1
=
await
this
.
getHighlighterNodeAttribute
(
id
"
y1
"
)
;
const
x2
=
await
this
.
getHighlighterNodeAttribute
(
id
"
x2
"
)
;
const
y2
=
await
this
.
getHighlighterNodeAttribute
(
id
"
y2
"
)
;
return
{
visible
:
!
hidden
x1
:
x1
y1
:
y1
x2
:
x2
y2
:
y2
}
;
}
async
getGuidesRectangle
(
)
{
const
tGuide
=
await
this
.
_getGuideStatus
(
"
top
"
)
;
const
rGuide
=
await
this
.
_getGuideStatus
(
"
right
"
)
;
const
bGuide
=
await
this
.
_getGuideStatus
(
"
bottom
"
)
;
const
lGuide
=
await
this
.
_getGuideStatus
(
"
left
"
)
;
if
(
!
tGuide
.
visible
|
|
!
rGuide
.
visible
|
|
!
bGuide
.
visible
|
|
!
lGuide
.
visible
)
{
return
null
;
}
return
{
p1
:
{
x
:
lGuide
.
x1
y
:
tGuide
.
y1
}
p2
:
{
x
:
+
rGuide
.
x1
+
1
y
:
tGuide
.
y1
}
p3
:
{
x
:
+
rGuide
.
x1
+
1
y
:
+
bGuide
.
y1
+
1
}
p4
:
{
x
:
lGuide
.
x1
y
:
+
bGuide
.
y1
+
1
}
}
;
}
async
getHighlighterRegionPath
(
region
highlighter
)
{
const
d
=
await
this
.
getHighlighterNodeAttribute
(
box
-
model
-
{
region
}
"
d
"
highlighter
)
;
if
(
!
d
)
{
return
{
d
:
null
}
;
}
const
polygons
=
d
.
match
(
/
M
[
^
M
]
+
/
g
)
;
if
(
!
polygons
)
{
return
{
d
}
;
}
const
points
=
[
]
;
for
(
const
polygon
of
polygons
)
{
points
.
push
(
polygon
.
trim
(
)
.
split
(
"
"
)
.
map
(
i
=
>
{
return
i
.
replace
(
/
M
|
L
/
"
"
)
.
split
(
"
"
)
;
}
)
)
;
}
return
{
d
points
}
;
}
}
protocol
.
registerFront
(
TestFront
)
;
function
isInside
(
point
polygon
)
{
if
(
polygon
.
length
=
=
=
0
)
{
return
false
;
}
point
=
point
.
map
(
n
=
>
n
.
toFixed
(
2
)
)
;
polygon
=
polygon
.
map
(
p
=
>
p
.
map
(
n
=
>
n
.
toFixed
(
2
)
)
)
;
const
n
=
polygon
.
length
;
const
newPoints
=
polygon
.
slice
(
0
)
;
newPoints
.
push
(
polygon
[
0
]
)
;
let
wn
=
0
;
for
(
let
i
=
0
;
i
<
n
;
i
+
+
)
{
const
r
=
isLeft
(
newPoints
[
i
]
newPoints
[
i
+
1
]
point
)
;
if
(
r
=
=
=
0
)
{
return
true
;
}
if
(
newPoints
[
i
]
[
1
]
<
=
point
[
1
]
)
{
if
(
newPoints
[
i
+
1
]
[
1
]
>
point
[
1
]
&
&
r
>
0
)
{
wn
+
+
;
}
}
else
if
(
newPoints
[
i
+
1
]
[
1
]
<
=
point
[
1
]
&
&
r
<
0
)
{
wn
-
-
;
}
}
if
(
wn
=
=
=
0
)
{
dumpn
(
JSON
.
stringify
(
point
)
+
"
is
outside
of
"
+
JSON
.
stringify
(
polygon
)
)
;
}
return
wn
!
=
=
0
;
}
function
isLeft
(
p0
p1
p2
)
{
const
l
=
(
p1
[
0
]
-
p0
[
0
]
)
*
(
p2
[
1
]
-
p0
[
1
]
)
-
(
p2
[
0
]
-
p0
[
0
]
)
*
(
p1
[
1
]
-
p0
[
1
]
)
;
return
l
;
}
