"
use
strict
"
;
async
function
showTooltip
(
tooltip
anchor
{
position
x
y
}
=
{
}
)
{
await
tooltip
.
show
(
anchor
{
position
x
y
}
)
;
return
waitForReflow
(
tooltip
)
;
}
async
function
hideTooltip
(
tooltip
)
{
const
onPopupHidden
=
tooltip
.
once
(
"
hidden
"
)
;
tooltip
.
hide
(
)
;
await
onPopupHidden
;
return
waitForReflow
(
tooltip
)
;
}
function
waitForReflow
(
tooltip
)
{
const
{
doc
}
=
tooltip
;
return
new
Promise
(
resolve
=
>
{
doc
.
documentElement
.
offsetWidth
;
doc
.
defaultView
.
requestAnimationFrame
(
resolve
)
;
}
)
;
}
function
checkTooltipGeometry
(
tooltip
anchor
{
position
leftAligned
=
true
height
width
}
=
{
}
)
{
info
(
"
Check
the
tooltip
geometry
matches
expected
position
and
dimensions
"
)
;
const
tooltipRect
=
tooltip
.
container
.
getBoundingClientRect
(
)
;
const
anchorRect
=
anchor
.
getBoundingClientRect
(
)
;
if
(
position
=
=
=
"
top
"
)
{
is
(
tooltipRect
.
bottom
anchorRect
.
top
"
Tooltip
is
above
the
anchor
"
)
;
}
else
if
(
position
=
=
=
"
bottom
"
)
{
is
(
tooltipRect
.
top
anchorRect
.
bottom
"
Tooltip
is
below
the
anchor
"
)
;
}
else
{
ok
(
false
"
Invalid
position
provided
to
checkTooltipGeometry
"
)
;
}
if
(
leftAligned
)
{
is
(
tooltipRect
.
left
anchorRect
.
left
"
Tooltip
left
-
aligned
with
the
anchor
"
)
;
}
is
(
tooltipRect
.
height
height
"
Tooltip
has
the
expected
height
"
)
;
is
(
tooltipRect
.
width
width
"
Tooltip
has
the
expected
width
"
)
;
}
