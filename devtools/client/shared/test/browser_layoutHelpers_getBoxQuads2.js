"
use
strict
"
;
const
TEST_URI
=
TEST_URI_ROOT
+
"
doc_layoutHelpers_getBoxQuads2
-
a
.
html
"
;
add_task
(
async
function
(
)
{
const
tab
=
await
addTab
(
TEST_URI
)
;
info
(
"
Running
tests
"
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
function
(
)
{
const
win
=
content
.
window
;
const
doc
=
content
.
document
;
const
docNode
=
doc
.
documentElement
;
const
iframeB
=
doc
.
getElementById
(
"
b
"
)
;
const
iframeD
=
doc
.
getElementById
(
"
d
"
)
;
const
docQuad
=
docNode
.
getBoxQuadsFromWindowOrigin
(
)
[
0
]
;
const
offsetX
=
docQuad
.
p1
.
x
;
const
offsetY
=
docQuad
.
p1
.
y
;
info
(
Document
is
offset
{
offsetX
}
{
offsetY
}
from
window
.
)
;
function
postAndReceiveMessage
(
iframe
)
{
return
new
Promise
(
resolve
=
>
{
const
onmessage
=
event
=
>
{
if
(
event
.
data
.
quad
)
{
win
.
removeEventListener
(
"
message
"
onmessage
)
;
resolve
(
event
.
data
.
quad
)
;
}
}
;
win
.
addEventListener
(
"
message
"
onmessage
{
capture
:
false
}
)
;
iframe
.
contentWindow
.
postMessage
(
{
callGetBoxQuads
:
true
}
"
*
"
)
;
}
)
;
}
const
checksToMake
=
[
{
msg
:
"
C
-
div
"
iframe
:
iframeB
x
:
130
y
:
230
}
{
msg
:
"
E
-
div
"
iframe
:
iframeD
x
:
430
y
:
260
}
]
;
for
(
const
{
msg
iframe
x
y
}
of
checksToMake
)
{
info
(
"
Checking
"
+
msg
+
"
.
"
)
;
const
quad
=
await
postAndReceiveMessage
(
iframe
)
;
is
(
Math
.
round
(
quad
.
p1
.
x
-
offsetX
)
x
msg
+
"
quad
x
position
is
as
expected
.
"
)
;
is
(
Math
.
round
(
quad
.
p1
.
y
-
offsetY
)
y
msg
+
"
quad
y
position
is
as
expected
.
"
)
;
}
}
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
