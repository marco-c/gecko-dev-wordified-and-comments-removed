"
use
strict
"
;
const
TEST_URI
=
TEST_URI_ROOT
+
"
doc_layoutHelpers_getBoxQuads2
-
a
.
html
"
;
add_task
(
async
function
(
)
{
info
(
"
Opening
a
fission
window
.
"
)
;
const
fissionWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
fission
:
true
}
)
;
loadHelperScript
(
"
.
.
/
.
.
/
.
.
/
.
.
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_utils
.
js
"
)
;
loadHelperScript
(
"
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
tests
/
SimpleTest
/
paint_listener
.
js
"
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
fissionWin
.
gBrowser
TEST_URI
)
;
info
(
"
Running
tests
"
)
;
ok
(
waitUntilApzStable
"
waitUntilApzStable
is
defined
.
"
)
;
await
waitUntilApzStable
(
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
function
(
)
{
const
win
=
content
.
window
;
const
doc
=
content
.
document
;
const
refNode
=
doc
.
documentElement
;
const
iframeB
=
doc
.
getElementById
(
"
b
"
)
;
const
iframeD
=
doc
.
getElementById
(
"
d
"
)
;
const
refQuad
=
refNode
.
getBoxQuadsFromWindowOrigin
(
)
[
0
]
;
const
offsetX
=
refQuad
.
p1
.
x
;
const
offsetY
=
refQuad
.
p1
.
y
;
info
(
Reference
node
is
offset
(
{
offsetX
}
{
offsetY
}
)
from
window
.
)
;
function
postAndReceiveMessage
(
iframe
)
{
return
new
Promise
(
resolve
=
>
{
const
onmessage
=
event
=
>
{
if
(
event
.
data
.
quad
)
{
win
.
removeEventListener
(
"
message
"
onmessage
)
;
resolve
(
event
.
data
.
quad
)
;
}
}
;
win
.
addEventListener
(
"
message
"
onmessage
{
capture
:
false
}
)
;
iframe
.
contentWindow
.
postMessage
(
{
callGetBoxQuads
:
true
}
"
*
"
)
;
}
)
;
}
function
isfuzzy
(
actual
expected
epsilon
msg
)
{
if
(
actual
>
=
expected
-
epsilon
&
&
actual
<
=
expected
+
epsilon
)
{
ok
(
true
msg
)
;
}
else
{
is
(
actual
expected
msg
)
;
}
}
const
ADDITIVE_EPSILON
=
1
;
const
checksToMake
=
[
{
msg
:
"
C
-
div
"
iframe
:
iframeB
left
:
130
top
:
230
right
:
180
bottom
:
280
}
{
msg
:
"
E
-
div
"
iframe
:
iframeD
left
:
430
top
:
260
right
:
480
bottom
:
310
}
]
;
for
(
const
{
msg
iframe
left
top
right
bottom
}
of
checksToMake
)
{
info
(
"
Checking
"
+
msg
+
"
.
"
)
;
const
quad
=
await
postAndReceiveMessage
(
iframe
)
;
const
bounds
=
quad
.
getBounds
(
)
;
info
(
Quad
bounds
is
(
{
bounds
.
left
}
{
bounds
.
top
}
)
to
(
{
bounds
.
right
}
{
bounds
.
bottom
}
)
.
)
;
isfuzzy
(
bounds
.
left
-
offsetX
left
ADDITIVE_EPSILON
msg
+
"
quad
left
position
is
as
expected
.
"
)
;
isfuzzy
(
bounds
.
top
-
offsetY
top
ADDITIVE_EPSILON
msg
+
"
quad
top
position
is
as
expected
.
"
)
;
isfuzzy
(
bounds
.
right
-
offsetX
right
ADDITIVE_EPSILON
msg
+
"
quad
right
position
is
as
expected
.
"
)
;
isfuzzy
(
bounds
.
bottom
-
offsetY
bottom
ADDITIVE_EPSILON
msg
+
"
quad
bottom
position
is
as
expected
.
"
)
;
}
}
)
;
fissionWin
.
gBrowser
.
removeCurrentTab
(
)
;
await
BrowserTestUtils
.
closeWindow
(
fissionWin
)
;
delete
window
.
waitForAllPaintsFlushed
;
delete
window
.
waitForAllPaints
;
delete
window
.
promiseAllPaintsDone
;
}
)
;
