"
use
strict
"
;
const
{
require
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
parseDeclarations
_parseCommentDeclarations
parseNamedDeclarations
}
=
require
(
"
devtools
/
shared
/
css
/
parsing
-
utils
"
)
;
const
{
isCssPropertyKnown
}
=
require
(
"
devtools
/
server
/
actors
/
css
-
properties
"
)
;
const
TEST_DATA
=
[
{
input
:
"
p
:
v
;
"
expected
:
[
{
name
:
"
p
"
value
:
"
v
"
priority
:
"
"
offsets
:
[
0
4
]
}
]
}
{
input
:
"
this
:
is
;
a
:
test
;
"
expected
:
[
{
name
:
"
this
"
value
:
"
is
"
priority
:
"
"
offsets
:
[
0
8
]
}
{
name
:
"
a
"
value
:
"
test
"
priority
:
"
"
offsets
:
[
8
15
]
}
]
}
{
input
:
"
name
:
value
;
"
expected
:
[
{
name
:
"
name
"
value
:
"
value
"
priority
:
"
"
offsets
:
[
0
11
]
}
]
}
{
input
:
"
name
:
value
"
expected
:
[
{
name
:
"
name
"
value
:
"
value
"
priority
:
"
"
offsets
:
[
0
10
]
}
]
}
{
input
:
"
p1
:
v1
;
\
t
\
t
\
n
p2
:
v2
;
\
n
\
n
\
n
\
n
\
t
p3
:
v3
;
"
expected
:
[
{
name
:
"
p1
"
value
:
"
v1
"
priority
:
"
"
offsets
:
[
0
9
]
}
{
name
:
"
p2
"
value
:
"
v2
"
priority
:
"
"
offsets
:
[
16
22
]
}
{
name
:
"
p3
"
value
:
"
v3
"
priority
:
"
"
offsets
:
[
32
45
]
}
]
}
{
input
:
"
p1
:
v1
;
p2
:
v2
!
important
;
"
expected
:
[
{
name
:
"
p1
"
value
:
"
v1
"
priority
:
"
"
offsets
:
[
0
7
]
}
{
name
:
"
p2
"
value
:
"
v2
"
priority
:
"
important
"
offsets
:
[
8
26
]
}
]
}
{
input
:
"
p1
:
v1
!
important
;
p2
:
v2
"
expected
:
[
{
name
:
"
p1
"
value
:
"
v1
"
priority
:
"
important
"
offsets
:
[
0
18
]
}
{
name
:
"
p2
"
value
:
"
v2
"
priority
:
"
"
offsets
:
[
19
25
]
}
]
}
{
input
:
"
p1
:
v1
!
important
;
p2
:
v2
!
important
;
"
expected
:
[
{
name
:
"
p1
"
value
:
"
v1
"
priority
:
"
important
"
offsets
:
[
0
20
]
}
{
name
:
"
p2
"
value
:
"
v2
"
priority
:
"
important
"
offsets
:
[
21
40
]
}
]
}
{
input
:
"
p1
:
v1
important
;
"
expected
:
[
{
name
:
"
p1
"
value
:
"
v1
important
"
priority
:
"
"
offsets
:
[
0
17
]
}
]
}
{
input
:
"
background
-
image
:
url
(
.
.
/
.
.
/
relative
/
image
.
png
)
"
expected
:
[
{
name
:
"
background
-
image
"
value
:
"
url
(
.
.
/
.
.
/
relative
/
image
.
png
)
"
priority
:
"
"
offsets
:
[
0
47
]
}
]
}
{
input
:
"
background
-
image
:
url
(
http
:
/
/
site
.
com
/
test
.
png
)
"
expected
:
[
{
name
:
"
background
-
image
"
value
:
"
url
(
http
:
/
/
site
.
com
/
test
.
png
)
"
priority
:
"
"
offsets
:
[
0
47
]
}
]
}
{
input
:
"
background
-
image
:
url
(
wow
.
gif
)
"
expected
:
[
{
name
:
"
background
-
image
"
value
:
"
url
(
wow
.
gif
)
"
priority
:
"
"
offsets
:
[
0
30
]
}
]
}
{
input
:
"
background
:
red
url
(
\
"
http
:
/
/
site
.
com
/
image
{
}
:
;
.
png
?
id
=
4
#
wat
\
"
)
"
+
"
repeat
top
right
"
expected
:
[
{
name
:
"
background
"
value
:
"
red
url
(
\
"
http
:
/
/
site
.
com
/
image
{
}
:
;
.
png
?
id
=
4
#
wat
\
"
)
"
+
"
repeat
top
right
"
priority
:
"
"
offsets
:
[
0
78
]
}
]
}
{
input
:
"
"
expected
:
[
]
}
{
input
:
"
\
n
\
n
\
n
\
n
\
t
\
t
\
t
\
t
"
expected
:
[
]
}
{
input
:
null
throws
:
true
}
{
input
:
undefined
throws
:
true
}
{
input
:
"
content
:
\
"
;
color
:
red
;
}
selector
{
color
:
yellow
;
\
"
"
expected
:
[
{
name
:
"
content
"
value
:
"
\
"
;
color
:
red
;
}
selector
{
color
:
yellow
;
\
"
"
priority
:
"
"
offsets
:
[
0
45
]
}
]
}
{
input
:
"
body
{
color
:
red
;
}
p
{
color
:
blue
;
}
"
expected
:
[
{
name
:
"
body
{
color
"
value
:
"
red
"
priority
:
"
"
offsets
:
[
0
16
]
}
{
name
:
"
}
p
{
color
"
value
:
"
blue
"
priority
:
"
"
offsets
:
[
16
33
]
}
{
name
:
"
}
"
value
:
"
"
priority
:
"
"
offsets
:
[
33
34
]
}
]
}
{
input
:
"
color
:
red
:
font
:
arial
;
"
expected
:
[
{
name
:
"
color
"
value
:
"
red
:
font
:
arial
"
priority
:
"
"
offsets
:
[
0
26
]
}
]
}
{
input
:
"
background
:
red
;
;
;
;
;
"
expected
:
[
{
name
:
"
background
"
value
:
"
red
"
priority
:
"
"
offsets
:
[
0
16
]
}
]
}
{
input
:
"
background
:
;
"
expected
:
[
{
name
:
"
background
"
value
:
"
"
priority
:
"
"
offsets
:
[
0
12
]
}
]
}
{
input
:
"
;
;
;
;
;
"
expected
:
[
]
}
{
input
:
"
:
;
:
;
"
expected
:
[
]
}
{
input
:
"
color
"
expected
:
[
{
name
:
"
color
"
value
:
"
"
priority
:
"
"
offsets
:
[
0
5
]
}
]
}
{
input
:
"
color
:
blue
;
font
"
expected
:
[
{
name
:
"
color
"
value
:
"
blue
"
priority
:
"
"
offsets
:
[
0
11
]
}
{
name
:
"
font
"
value
:
"
"
priority
:
"
"
offsets
:
[
11
15
]
}
]
}
{
input
:
"
color
:
blue
;
font
:
"
expected
:
[
{
name
:
"
color
"
value
:
"
blue
"
priority
:
"
"
offsets
:
[
0
11
]
}
{
name
:
"
font
"
value
:
"
"
priority
:
"
"
offsets
:
[
11
16
]
}
]
}
{
input
:
"
Arial
;
color
:
blue
;
"
expected
:
[
{
name
:
"
"
value
:
"
Arial
"
priority
:
"
"
offsets
:
[
0
6
]
}
{
name
:
"
color
"
value
:
"
blue
"
priority
:
"
"
offsets
:
[
6
17
]
}
]
}
{
input
:
"
color
:
#
333
"
expected
:
[
{
name
:
"
color
"
value
:
"
#
333
"
priority
:
"
"
offsets
:
[
0
11
]
}
]
}
{
input
:
"
color
:
#
456789
"
expected
:
[
{
name
:
"
color
"
value
:
"
#
456789
"
priority
:
"
"
offsets
:
[
0
14
]
}
]
}
{
input
:
"
wat
:
#
XYZ
"
expected
:
[
{
name
:
"
wat
"
value
:
"
#
XYZ
"
priority
:
"
"
offsets
:
[
0
9
]
}
]
}
{
input
:
"
content
:
\
"
this
is
a
'
string
'
\
"
"
expected
:
[
{
name
:
"
content
"
value
:
"
\
"
this
is
a
'
string
'
\
"
"
priority
:
"
"
offsets
:
[
0
29
]
}
]
}
{
input
:
'
content
:
"
this
is
a
\
\
"
string
\
\
"
"
'
expected
:
[
{
name
:
"
content
"
value
:
'
"
this
is
a
\
\
"
string
\
\
"
"
'
priority
:
"
"
offsets
:
[
0
31
]
}
]
}
{
input
:
"
content
:
'
this
is
a
\
"
string
\
"
'
"
expected
:
[
{
name
:
"
content
"
value
:
'
\
'
this
is
a
"
string
"
\
'
'
priority
:
"
"
offsets
:
[
0
29
]
}
]
}
{
input
:
"
content
:
'
this
is
a
\
\
'
string
\
\
'
'
"
expected
:
[
{
name
:
"
content
"
value
:
"
'
this
is
a
\
\
'
string
\
\
'
'
"
priority
:
"
"
offsets
:
[
0
31
]
}
]
}
{
input
:
"
content
:
'
this
\
\
'
is
a
\
"
really
strange
string
'
"
expected
:
[
{
name
:
"
content
"
value
:
"
'
this
\
\
'
is
a
\
"
really
strange
string
'
"
priority
:
"
"
offsets
:
[
0
47
]
}
]
}
{
input
:
"
content
:
\
"
a
not
s
\
\
o
very
long
title
\
"
"
expected
:
[
{
name
:
"
content
"
value
:
'
"
a
not
s
\
\
o
very
long
title
"
'
priority
:
"
"
offsets
:
[
0
46
]
}
]
}
{
input
:
"
width
:
calc
(
(
100
%
-
3em
)
/
2
)
"
expected
:
[
{
name
:
"
width
"
value
:
"
calc
(
(
100
%
-
3em
)
/
2
)
"
priority
:
"
"
offsets
:
[
0
29
]
}
]
}
{
parseComments
:
true
input
:
"
width
:
5
;
/
*
background
:
green
;
*
/
background
:
red
;
"
expected
:
[
{
name
:
"
width
"
value
:
"
5
"
priority
:
"
"
offsets
:
[
0
9
]
}
{
name
:
"
background
"
value
:
"
green
"
priority
:
"
"
offsets
:
[
13
31
]
commentOffsets
:
[
10
34
]
}
{
name
:
"
background
"
value
:
"
red
"
priority
:
"
"
offsets
:
[
35
51
]
}
]
}
{
parseComments
:
true
input
:
"
width
:
5
;
/
*
background
something
:
green
;
*
/
background
:
red
;
"
expected
:
[
{
name
:
"
width
"
value
:
"
5
"
priority
:
"
"
offsets
:
[
0
9
]
}
{
name
:
"
background
"
value
:
"
red
"
priority
:
"
"
offsets
:
[
45
61
]
}
]
}
{
parseComments
:
true
input
:
"
width
:
5
;
/
*
background
:
*
/
background
:
red
;
"
expected
:
[
{
name
:
"
width
"
value
:
"
5
"
priority
:
"
"
offsets
:
[
0
9
]
}
{
name
:
"
background
"
value
:
"
"
priority
:
"
"
offsets
:
[
13
24
]
commentOffsets
:
[
10
27
]
}
{
name
:
"
background
"
value
:
"
red
"
priority
:
"
"
offsets
:
[
28
44
]
}
]
}
{
parseComments
:
true
input
:
"
width
:
5
;
/
*
background
:
yellow
*
/
background
:
red
;
"
expected
:
[
{
name
:
"
width
"
value
:
"
5
"
priority
:
"
"
offsets
:
[
0
9
]
}
{
name
:
"
background
"
value
:
"
yellow
"
priority
:
"
"
offsets
:
[
13
31
]
commentOffsets
:
[
10
34
]
}
{
name
:
"
background
"
value
:
"
red
"
priority
:
"
"
offsets
:
[
35
51
]
}
]
}
{
parseComments
:
true
input
:
"
/
*
content
:
'
*
\
\
/
'
;
*
/
"
expected
:
[
{
name
:
"
content
"
value
:
"
'
*
/
'
"
priority
:
"
"
offsets
:
[
3
18
]
commentOffsets
:
[
0
21
]
}
]
}
{
parseComments
:
true
input
:
"
/
*
content
:
'
*
\
\
/
'
*
/
"
expected
:
[
{
name
:
"
content
"
value
:
"
'
*
/
'
"
priority
:
"
"
offsets
:
[
3
17
]
commentOffsets
:
[
0
20
]
}
]
}
{
parseComments
:
true
input
:
"
/
*
color
:
/
\
\
*
comment
*
\
\
/
red
;
*
/
"
expected
:
[
{
name
:
"
color
"
value
:
"
red
"
priority
:
"
"
offsets
:
[
3
30
]
commentOffsets
:
[
0
33
]
}
]
}
{
parseComments
:
true
input
:
"
<
!
-
-
color
:
red
;
-
-
>
color
:
blue
;
"
expected
:
[
{
name
:
"
color
"
value
:
"
red
"
priority
:
"
"
offsets
:
[
5
16
]
}
{
name
:
"
color
"
value
:
"
blue
"
priority
:
"
"
offsets
:
[
21
33
]
}
]
}
{
parseComments
:
true
input
:
"
/
*
*
/
"
expected
:
[
]
}
{
parseComments
:
true
input
:
"
/
*
!
walrus
:
zebra
;
*
/
"
expected
:
[
{
name
:
"
walrus
"
value
:
"
zebra
"
priority
:
"
"
offsets
:
[
4
18
]
commentOffsets
:
[
0
21
]
}
]
}
{
input
:
"
color
:
blue
\
\
9
no
\
\
_need
"
expected
:
[
{
name
:
"
color
"
value
:
"
blue
\
\
9
no_need
"
priority
:
"
"
offsets
:
[
0
23
]
}
]
}
{
parseComments
:
true
input
:
"
stroke
-
dasharray
:
1
/
*
ThisIsAComment
*
/
2
;
"
expected
:
[
{
name
:
"
stroke
-
dasharray
"
value
:
"
1
2
"
priority
:
"
"
offsets
:
[
0
39
]
}
]
}
]
;
function
run_test
(
)
{
run_basic_tests
(
)
;
run_comment_tests
(
)
;
run_named_tests
(
)
;
}
function
run_basic_tests
(
)
{
for
(
let
test
of
TEST_DATA
)
{
do_print
(
"
Test
input
string
"
+
test
.
input
)
;
let
output
;
try
{
output
=
parseDeclarations
(
isCssPropertyKnown
test
.
input
test
.
parseComments
)
;
}
catch
(
e
)
{
do_print
(
"
parseDeclarations
threw
an
exception
with
the
given
input
"
+
"
string
"
)
;
if
(
test
.
throws
)
{
do_print
(
"
Exception
expected
"
)
;
do_check_true
(
true
)
;
}
else
{
do_print
(
"
Exception
unexpected
\
n
"
+
e
)
;
do_check_true
(
false
)
;
}
}
if
(
output
)
{
assertOutput
(
output
test
.
expected
)
;
}
}
}
const
COMMENT_DATA
=
[
{
input
:
"
content
:
'
hi
"
expected
:
[
{
name
:
"
content
"
value
:
"
'
hi
"
priority
:
"
"
terminator
:
"
'
;
"
offsets
:
[
2
14
]
colonOffsets
:
[
9
11
]
commentOffsets
:
[
0
16
]
}
]
}
{
input
:
"
text
that
once
confounded
the
parser
;
"
expected
:
[
]
}
]
;
function
run_comment_tests
(
)
{
for
(
let
test
of
COMMENT_DATA
)
{
do_print
(
"
Test
input
string
"
+
test
.
input
)
;
let
output
=
_parseCommentDeclarations
(
isCssPropertyKnown
test
.
input
0
test
.
input
.
length
+
4
)
;
deepEqual
(
output
test
.
expected
)
;
}
}
const
NAMED_DATA
=
[
{
input
:
"
position
:
absolute
;
top50px
;
height
:
50px
;
"
expected
:
[
{
name
:
"
position
"
value
:
"
absolute
"
priority
:
"
"
terminator
:
"
"
offsets
:
[
0
18
]
colonOffsets
:
[
8
9
]
}
{
name
:
"
height
"
value
:
"
50px
"
priority
:
"
"
terminator
:
"
"
offsets
:
[
26
38
]
colonOffsets
:
[
32
33
]
}
]
}
]
;
function
run_named_tests
(
)
{
for
(
let
test
of
NAMED_DATA
)
{
do_print
(
"
Test
input
string
"
+
test
.
input
)
;
let
output
=
parseNamedDeclarations
(
isCssPropertyKnown
test
.
input
true
)
;
do_print
(
JSON
.
stringify
(
output
)
)
;
deepEqual
(
output
test
.
expected
)
;
}
}
function
assertOutput
(
actual
expected
)
{
if
(
actual
.
length
=
=
=
expected
.
length
)
{
for
(
let
i
=
0
;
i
<
expected
.
length
;
i
+
+
)
{
do_check_true
(
!
!
actual
[
i
]
)
;
do_print
(
"
Check
that
the
output
item
has
the
expected
name
"
+
"
value
and
priority
"
)
;
do_check_eq
(
expected
[
i
]
.
name
actual
[
i
]
.
name
)
;
do_check_eq
(
expected
[
i
]
.
value
actual
[
i
]
.
value
)
;
do_check_eq
(
expected
[
i
]
.
priority
actual
[
i
]
.
priority
)
;
deepEqual
(
expected
[
i
]
.
offsets
actual
[
i
]
.
offsets
)
;
if
(
"
commentOffsets
"
in
expected
[
i
]
)
{
deepEqual
(
expected
[
i
]
.
commentOffsets
actual
[
i
]
.
commentOffsets
)
;
}
}
}
else
{
for
(
let
prop
of
actual
)
{
do_print
(
"
Actual
output
contained
:
{
name
:
"
+
prop
.
name
+
"
value
:
"
+
prop
.
value
+
"
priority
:
"
+
prop
.
priority
+
"
}
"
)
;
}
do_check_eq
(
actual
.
length
expected
.
length
)
;
}
}
