"
use
strict
"
;
class
TelemetryHelpers
{
constructor
(
)
{
this
.
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
this
.
generateTelemetryTests
=
this
.
generateTelemetryTests
.
bind
(
this
)
;
registerCleanupFunction
(
this
.
stopTelemetry
.
bind
(
this
)
)
;
}
startTelemetry
(
)
{
Services
.
telemetry
.
canRecordExtended
=
true
;
}
stopTelemetry
(
)
{
this
.
clearHistograms
(
Services
.
telemetry
.
getSnapshotForHistograms
)
;
this
.
clearHistograms
(
Services
.
telemetry
.
getSnapshotForKeyedHistograms
)
;
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
Services
.
telemetry
.
canRecordExtended
=
this
.
oldCanRecord
;
}
clearHistograms
(
snapshotFunc
)
{
snapshotFunc
(
"
main
"
true
)
;
}
checkTelemetry
(
histId
key
expected
checkType
)
{
let
actual
;
let
msg
;
if
(
checkType
=
=
=
"
array
"
|
|
checkType
=
=
=
"
hasentries
"
)
{
if
(
key
)
{
const
keyedHistogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
histId
)
.
snapshot
(
)
;
const
result
=
keyedHistogram
[
key
]
;
if
(
result
)
{
actual
=
result
.
values
;
}
else
{
ok
(
false
{
histId
}
[
{
key
}
]
exists
)
;
return
;
}
}
else
{
actual
=
Services
.
telemetry
.
getHistogramById
(
histId
)
.
snapshot
(
)
.
values
;
}
}
switch
(
checkType
)
{
case
"
array
"
:
msg
=
key
?
{
histId
}
[
"
{
key
}
"
]
correct
.
:
{
histId
}
correct
.
;
is
(
JSON
.
stringify
(
actual
)
JSON
.
stringify
(
expected
)
msg
)
;
break
;
case
"
hasentries
"
:
const
hasEntry
=
Object
.
values
(
actual
)
.
some
(
num
=
>
num
>
0
)
;
if
(
key
)
{
ok
(
hasEntry
{
histId
}
[
"
{
key
}
"
]
has
at
least
one
entry
.
)
;
}
else
{
ok
(
hasEntry
{
histId
}
has
at
least
one
entry
.
)
;
}
break
;
case
"
scalar
"
:
const
scalars
=
Services
.
telemetry
.
getSnapshotForScalars
(
"
main
"
false
)
.
parent
;
is
(
scalars
[
histId
]
expected
{
histId
}
correct
)
;
break
;
case
"
keyedscalar
"
:
const
keyedScalars
=
Services
.
telemetry
.
getSnapshotForKeyedScalars
(
"
main
"
false
)
.
parent
;
const
value
=
keyedScalars
[
histId
]
[
key
]
;
msg
=
key
?
{
histId
}
[
"
{
key
}
"
]
correct
.
:
{
histId
}
correct
.
;
is
(
value
expected
msg
)
;
break
;
}
}
generateTelemetryTests
(
prefix
=
"
"
)
{
const
histograms
=
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
true
)
.
parent
;
const
keyedHistograms
=
Services
.
telemetry
.
getSnapshotForKeyedHistograms
(
"
main
"
true
)
.
parent
;
const
scalars
=
Services
.
telemetry
.
getSnapshotForScalars
(
"
main
"
false
)
.
parent
;
const
keyedScalars
=
Services
.
telemetry
.
getSnapshotForKeyedScalars
(
"
main
"
false
)
.
parent
;
const
allHistograms
=
Object
.
assign
(
{
}
histograms
keyedHistograms
scalars
keyedScalars
)
;
const
histIds
=
Object
.
keys
(
allHistograms
)
.
filter
(
histId
=
>
histId
.
startsWith
(
prefix
)
)
;
dump
(
"
=
"
.
repeat
(
80
)
+
"
\
n
"
)
;
for
(
const
histId
of
histIds
)
{
const
snapshot
=
allHistograms
[
histId
]
;
if
(
histId
=
=
=
histId
.
toLowerCase
(
)
)
{
if
(
typeof
snapshot
=
=
=
"
object
"
)
{
const
keys
=
Object
.
keys
(
snapshot
)
;
for
(
const
key
of
keys
)
{
const
value
=
snapshot
[
key
]
;
dump
(
checkTelemetry
(
"
{
histId
}
"
"
{
key
}
"
{
value
}
"
keyedscalar
"
)
;
\
n
)
;
}
}
else
{
dump
(
checkTelemetry
(
"
{
histId
}
"
"
"
{
snapshot
}
"
scalar
"
)
;
\
n
)
;
}
}
else
if
(
typeof
snapshot
.
histogram_type
!
=
=
"
undefined
"
&
&
typeof
snapshot
.
values
!
=
=
"
undefined
"
)
{
const
actual
=
snapshot
.
values
;
this
.
displayDataFromHistogramSnapshot
(
snapshot
"
"
histId
actual
)
;
}
else
{
const
keys
=
Object
.
keys
(
snapshot
)
;
for
(
const
key
of
keys
)
{
const
value
=
snapshot
[
key
]
;
const
actual
=
value
.
counts
;
this
.
displayDataFromHistogramSnapshot
(
value
key
histId
actual
)
;
}
}
}
dump
(
"
=
"
.
repeat
(
80
)
+
"
\
n
"
)
;
}
displayDataFromHistogramSnapshot
(
snapshot
key
histId
actual
)
{
key
=
key
?
"
{
key
}
"
:
"
"
;
switch
(
snapshot
.
histogram_type
)
{
case
Services
.
telemetry
.
HISTOGRAM_EXPONENTIAL
:
case
Services
.
telemetry
.
HISTOGRAM_LINEAR
:
let
total
=
0
;
for
(
const
val
of
Object
.
values
(
actual
)
)
{
total
+
=
val
;
}
if
(
histId
.
endsWith
(
"
_ENUMERATED
"
)
)
{
if
(
total
>
0
)
{
actual
=
actual
.
toSource
(
)
;
dump
(
checkTelemetry
(
"
{
histId
}
"
{
key
}
{
actual
}
"
array
"
)
;
\
n
)
;
}
return
;
}
dump
(
checkTelemetry
(
"
{
histId
}
"
{
key
}
null
"
hasentries
"
)
;
\
n
)
;
break
;
case
Services
.
telemetry
.
HISTOGRAM_BOOLEAN
:
actual
=
actual
.
toSource
(
)
;
if
(
actual
!
=
=
"
(
{
}
)
"
)
{
dump
(
checkTelemetry
(
"
{
histId
}
"
{
key
}
{
actual
}
"
array
"
)
;
\
n
)
;
}
break
;
case
Services
.
telemetry
.
HISTOGRAM_FLAG
:
actual
=
actual
.
toSource
(
)
;
if
(
actual
!
=
=
"
(
{
0
:
1
1
:
0
}
)
"
)
{
dump
(
checkTelemetry
(
"
{
histId
}
"
{
key
}
{
actual
}
"
array
"
)
;
\
n
)
;
}
break
;
case
Services
.
telemetry
.
HISTOGRAM_COUNT
:
actual
=
actual
.
toSource
(
)
;
dump
(
checkTelemetry
(
"
{
histId
}
"
{
key
}
{
actual
}
"
array
"
)
;
\
n
)
;
break
;
}
}
}
const
telemetryHelpers
=
new
TelemetryHelpers
(
)
;
const
generateTelemetryTests
=
telemetryHelpers
.
generateTelemetryTests
;
const
checkTelemetry
=
telemetryHelpers
.
checkTelemetry
;
const
startTelemetry
=
telemetryHelpers
.
startTelemetry
;
