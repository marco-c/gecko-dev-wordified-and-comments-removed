"
use
strict
"
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
TEST_URI
=
CHROME_URL_ROOT
+
"
doc_html_tooltip
-
03
.
xul
"
;
const
{
HTMLTooltip
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
HTMLTooltip
"
)
;
loadHelperScript
(
"
helper_html_tooltip
.
js
"
)
;
let
useXulWrapper
;
add_task
(
async
function
(
)
{
await
addTab
(
"
about
:
blank
"
)
;
const
[
doc
]
=
await
createHost
(
"
bottom
"
TEST_URI
)
;
info
(
"
Run
tests
for
a
Tooltip
without
using
a
XUL
panel
"
)
;
useXulWrapper
=
false
;
await
runTests
(
doc
)
;
info
(
"
Run
tests
for
a
Tooltip
with
a
XUL
panel
"
)
;
useXulWrapper
=
true
;
await
runTests
(
doc
)
;
}
)
;
async
function
runTests
(
doc
)
{
await
focusNode
(
doc
"
#
box4
-
input
"
)
;
ok
(
doc
.
activeElement
.
closest
(
"
#
box4
-
input
"
)
"
Focus
is
in
the
#
box4
-
input
"
)
;
info
(
"
Test
a
tooltip
will
not
take
focus
"
)
;
const
tooltip
=
await
createTooltip
(
doc
)
;
await
showTooltip
(
tooltip
doc
.
getElementById
(
"
box1
"
)
)
;
ok
(
doc
.
activeElement
.
closest
(
"
#
box4
-
input
"
)
"
Focus
is
still
in
the
#
box4
-
input
"
)
;
await
hideTooltip
(
tooltip
)
;
await
blurNode
(
doc
"
#
box4
-
input
"
)
;
tooltip
.
destroy
(
)
;
}
function
focusNode
(
doc
selector
)
{
const
node
=
doc
.
querySelector
(
selector
)
;
const
onFocus
=
once
(
node
"
focus
"
)
;
node
.
focus
(
)
;
return
onFocus
;
}
function
blurNode
(
doc
selector
)
{
const
node
=
doc
.
querySelector
(
selector
)
;
const
onBlur
=
once
(
node
"
blur
"
)
;
node
.
blur
(
)
;
return
onBlur
;
}
function
createTooltip
(
doc
)
{
const
tooltip
=
new
HTMLTooltip
(
doc
{
useXulWrapper
}
)
;
const
div
=
doc
.
createElementNS
(
HTML_NS
"
div
"
)
;
div
.
classList
.
add
(
"
tooltip
-
content
"
)
;
div
.
style
.
height
=
"
50px
"
;
const
input
=
doc
.
createElementNS
(
HTML_NS
"
input
"
)
;
input
.
setAttribute
(
"
type
"
"
text
"
)
;
div
.
appendChild
(
input
)
;
tooltip
.
panel
.
appendChild
(
div
)
;
tooltip
.
setContentSize
(
{
width
:
150
height
:
50
}
)
;
return
tooltip
;
}
