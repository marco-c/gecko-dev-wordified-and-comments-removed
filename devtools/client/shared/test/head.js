"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
const
{
DOMHelpers
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
DOMHelpers
.
jsm
"
{
}
)
;
const
{
Hosts
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
-
hosts
"
)
;
const
TEST_URI_ROOT
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
shared
/
test
/
"
;
const
OPTIONS_VIEW_URL
=
TEST_URI_ROOT
+
"
doc_options
-
view
.
xul
"
;
function
catchFail
(
func
)
{
return
function
(
)
{
try
{
return
func
.
apply
(
null
arguments
)
;
}
catch
(
ex
)
{
ok
(
false
ex
)
;
console
.
error
(
ex
)
;
finish
(
)
;
throw
ex
;
}
}
;
}
function
waitForValue
(
options
)
{
let
start
=
Date
.
now
(
)
;
let
timeout
=
options
.
timeout
|
|
5000
;
let
lastValue
;
function
wait
(
validatorFn
successFn
failureFn
)
{
if
(
(
Date
.
now
(
)
-
start
)
>
timeout
)
{
ok
(
false
"
Timed
out
while
waiting
for
:
"
+
options
.
name
)
;
let
expected
=
"
value
"
in
options
?
"
'
"
+
options
.
value
+
"
'
"
:
"
a
trueish
value
"
;
info
(
"
timeout
info
:
:
got
'
"
+
lastValue
+
"
'
expected
"
+
expected
)
;
failureFn
(
options
lastValue
)
;
return
;
}
lastValue
=
validatorFn
(
options
lastValue
)
;
let
successful
=
"
value
"
in
options
?
lastValue
=
=
options
.
value
:
lastValue
;
if
(
successful
)
{
ok
(
true
options
.
name
)
;
successFn
(
options
lastValue
)
;
}
else
{
setTimeout
(
(
)
=
>
{
wait
(
validatorFn
successFn
failureFn
)
;
}
100
)
;
}
}
wait
(
options
.
validator
options
.
success
options
.
failure
)
;
}
function
oneTimeObserve
(
name
callback
)
{
return
new
Promise
(
(
resolve
)
=
>
{
let
func
=
function
(
)
{
Services
.
obs
.
removeObserver
(
func
name
)
;
if
(
callback
)
{
callback
(
)
;
}
resolve
(
)
;
}
;
Services
.
obs
.
addObserver
(
func
name
)
;
}
)
;
}
let
createHost
=
async
function
(
type
=
"
bottom
"
src
=
CHROME_URL_ROOT
+
"
dummy
.
html
"
)
{
let
host
=
new
Hosts
[
type
]
(
gBrowser
.
selectedTab
)
;
let
iframe
=
await
host
.
create
(
)
;
await
new
Promise
(
resolve
=
>
{
let
domHelper
=
new
DOMHelpers
(
iframe
.
contentWindow
)
;
iframe
.
setAttribute
(
"
src
"
src
)
;
domHelper
.
onceDOMReady
(
resolve
)
;
}
)
;
return
[
host
iframe
.
contentWindow
iframe
.
contentDocument
]
;
}
;
function
checkTelemetryResults
(
Telemetry
)
{
let
result
=
Telemetry
.
prototype
.
telemetryInfo
;
for
(
let
histId
in
result
)
{
let
value
=
result
[
histId
]
;
if
(
histId
.
endsWith
(
"
OPENED_COUNT
"
)
)
{
ok
(
value
.
length
>
1
histId
+
"
has
more
than
one
entry
"
)
;
let
okay
=
value
.
every
(
function
(
element
)
{
return
element
=
=
=
true
;
}
)
;
ok
(
okay
"
All
"
+
histId
+
"
entries
are
=
=
=
true
"
)
;
}
else
if
(
histId
.
endsWith
(
"
TIME_ACTIVE_SECONDS
"
)
)
{
ok
(
value
.
length
>
1
histId
+
"
has
more
than
one
entry
"
)
;
let
okay
=
value
.
every
(
function
(
element
)
{
return
element
>
0
;
}
)
;
ok
(
okay
"
All
"
+
histId
+
"
entries
have
time
>
0
"
)
;
}
}
}
async
function
openAndCloseToolbox
(
nbOfTimes
usageTime
toolId
)
{
for
(
let
i
=
0
;
i
<
nbOfTimes
;
i
+
+
)
{
info
(
"
Opening
toolbox
"
+
(
i
+
1
)
)
;
let
target
=
TargetFactory
.
forTab
(
gBrowser
.
selectedTab
)
;
await
gDevTools
.
showToolbox
(
target
toolId
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
usageTime
)
)
;
info
(
"
Closing
toolbox
"
+
(
i
+
1
)
)
;
await
gDevTools
.
closeToolbox
(
target
)
;
}
}
function
synthesizeProfileForTest
(
samples
)
{
const
RecordingUtils
=
require
(
"
devtools
/
shared
/
performance
/
recording
-
utils
"
)
;
samples
.
unshift
(
{
time
:
0
frames
:
[
]
}
)
;
let
uniqueStacks
=
new
RecordingUtils
.
UniqueStacks
(
)
;
return
RecordingUtils
.
deflateThread
(
{
samples
:
samples
markers
:
[
]
}
uniqueStacks
)
;
}
function
waitUntil
(
predicate
interval
=
10
)
{
if
(
predicate
(
)
)
{
return
Promise
.
resolve
(
true
)
;
}
return
new
Promise
(
resolve
=
>
{
setTimeout
(
function
(
)
{
waitUntil
(
predicate
)
.
then
(
(
)
=
>
resolve
(
true
)
)
;
}
interval
)
;
}
)
;
}
function
showFilterPopupPresets
(
widget
)
{
let
onRender
=
widget
.
once
(
"
render
"
)
;
widget
.
_togglePresets
(
)
;
return
onRender
;
}
let
showFilterPopupPresetsAndCreatePreset
=
async
function
(
widget
name
value
)
{
await
showFilterPopupPresets
(
widget
)
;
let
onRender
=
widget
.
once
(
"
render
"
)
;
widget
.
setCssValue
(
value
)
;
await
onRender
;
let
footer
=
widget
.
el
.
querySelector
(
"
.
presets
-
list
.
footer
"
)
;
footer
.
querySelector
(
"
input
"
)
.
value
=
name
;
onRender
=
widget
.
once
(
"
render
"
)
;
widget
.
_savePreset
(
{
preventDefault
:
(
)
=
>
{
}
}
)
;
await
onRender
;
}
;
