"
use
strict
"
;
(
function
(
exports
)
{
const
Cu
=
Components
.
utils
;
const
CC
=
Components
.
Constructor
;
const
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
fetch
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
TEST_URL_ROOT
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
shared
/
test
/
"
;
const
ACTOR_URL
=
TEST_URL_ROOT
+
"
test
-
actor
.
js
"
;
exports
.
registerTestActor
=
Task
.
async
(
function
*
(
client
)
{
let
deferred
=
defer
(
)
;
client
.
listTabs
(
deferred
.
resolve
)
;
let
response
=
yield
deferred
.
promise
;
let
{
ActorRegistryFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
actor
-
registry
"
)
;
let
registryFront
=
ActorRegistryFront
(
client
response
)
;
let
options
=
{
type
:
{
tab
:
true
}
constructor
:
"
TestActor
"
prefix
:
"
testActor
"
}
;
let
testActorFront
=
yield
registryFront
.
registerActor
(
ACTOR_URL
options
)
;
return
testActorFront
;
}
)
;
let
loadFront
=
Task
.
async
(
function
*
(
)
{
let
sourceText
=
yield
request
(
ACTOR_URL
)
;
const
principal
=
CC
(
"
mozilla
.
org
/
systemprincipal
;
1
"
"
nsIPrincipal
"
)
(
)
;
const
sandbox
=
Cu
.
Sandbox
(
principal
)
;
sandbox
.
exports
=
{
}
;
sandbox
.
require
=
require
;
Cu
.
evalInSandbox
(
sourceText
sandbox
"
1
.
8
"
ACTOR_URL
1
)
;
return
sandbox
.
exports
;
}
)
;
let
getUpdatedForm
=
function
(
client
tab
)
{
return
client
.
getTab
(
{
tab
}
)
.
then
(
response
=
>
response
.
tab
)
;
}
;
exports
.
getTestActor
=
Task
.
async
(
function
*
(
toolbox
)
{
let
client
=
toolbox
.
target
.
client
;
return
getTestActor
(
client
toolbox
.
target
.
tab
toolbox
)
;
}
)
;
exports
.
getTestActorWithoutToolbox
=
Task
.
async
(
function
*
(
tab
)
{
let
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
let
{
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
main
"
)
;
if
(
!
DebuggerServer
.
initialized
)
{
DebuggerServer
.
init
(
)
;
DebuggerServer
.
addBrowserActors
(
)
;
}
let
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
yield
client
.
connect
(
)
;
yield
exports
.
registerTestActor
(
client
)
;
return
getTestActor
(
client
tab
)
;
}
)
;
let
request
=
function
(
uri
)
{
return
fetch
(
uri
)
.
then
(
(
{
content
}
)
=
>
content
)
;
}
;
let
getTestActor
=
Task
.
async
(
function
*
(
client
tab
toolbox
)
{
let
form
=
yield
getUpdatedForm
(
client
tab
)
;
let
{
TestActorFront
}
=
yield
loadFront
(
)
;
return
new
TestActorFront
(
client
form
toolbox
)
;
}
)
;
}
)
(
this
)
;
