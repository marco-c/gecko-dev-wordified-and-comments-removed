"
use
strict
"
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
TEST_URI
=
CHROME_URL_ROOT
+
"
doc_html_tooltip
-
04
.
xul
"
;
const
{
HTMLTooltip
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
HTMLTooltip
"
)
;
loadHelperScript
(
"
helper_html_tooltip
.
js
"
)
;
const
TOOLTIP_HEIGHT
=
30
;
const
TOOLTIP_WIDTH
=
100
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
toolbox
.
footer
.
height
"
400
)
;
await
addTab
(
"
about
:
blank
"
)
;
let
[
doc
]
=
await
createHost
(
"
bottom
"
TEST_URI
)
;
info
(
"
Create
HTML
tooltip
"
)
;
let
tooltip
=
new
HTMLTooltip
(
doc
{
useXulWrapper
:
false
}
)
;
let
div
=
doc
.
createElementNS
(
HTML_NS
"
div
"
)
;
div
.
style
.
height
=
"
100
%
"
;
tooltip
.
setContent
(
div
{
width
:
TOOLTIP_WIDTH
height
:
TOOLTIP_HEIGHT
}
)
;
let
box1
=
doc
.
getElementById
(
"
box1
"
)
;
let
box2
=
doc
.
getElementById
(
"
box2
"
)
;
let
box3
=
doc
.
getElementById
(
"
box3
"
)
;
let
box4
=
doc
.
getElementById
(
"
box4
"
)
;
let
height
=
TOOLTIP_HEIGHT
width
=
TOOLTIP_WIDTH
;
info
(
"
Display
the
tooltip
on
box1
.
"
)
;
await
showTooltip
(
tooltip
box1
)
;
let
expectedTooltipGeometry
=
{
position
:
"
bottom
"
height
width
}
;
checkTooltipGeometry
(
tooltip
box1
expectedTooltipGeometry
)
;
await
hideTooltip
(
tooltip
)
;
info
(
"
Try
to
display
the
tooltip
on
top
of
box1
.
"
)
;
await
showTooltip
(
tooltip
box1
{
position
:
"
top
"
}
)
;
expectedTooltipGeometry
=
{
position
:
"
bottom
"
height
width
}
;
checkTooltipGeometry
(
tooltip
box1
expectedTooltipGeometry
)
;
await
hideTooltip
(
tooltip
)
;
info
(
"
Try
to
display
the
tooltip
on
box2
.
"
)
;
await
showTooltip
(
tooltip
box2
)
;
expectedTooltipGeometry
=
{
position
:
"
bottom
"
height
width
}
;
checkTooltipGeometry
(
tooltip
box2
expectedTooltipGeometry
)
;
await
hideTooltip
(
tooltip
)
;
info
(
"
Try
to
display
the
tooltip
on
top
of
box2
.
"
)
;
await
showTooltip
(
tooltip
box2
{
position
:
"
top
"
}
)
;
expectedTooltipGeometry
=
{
position
:
"
top
"
height
width
}
;
checkTooltipGeometry
(
tooltip
box2
expectedTooltipGeometry
)
;
await
hideTooltip
(
tooltip
)
;
info
(
"
Try
to
display
the
tooltip
on
box3
.
"
)
;
await
showTooltip
(
tooltip
box3
)
;
expectedTooltipGeometry
=
{
position
:
"
top
"
height
width
}
;
checkTooltipGeometry
(
tooltip
box3
expectedTooltipGeometry
)
;
await
hideTooltip
(
tooltip
)
;
info
(
"
Try
to
display
the
tooltip
on
bottom
of
box3
.
"
)
;
await
showTooltip
(
tooltip
box3
{
position
:
"
bottom
"
}
)
;
expectedTooltipGeometry
=
{
position
:
"
bottom
"
height
width
}
;
checkTooltipGeometry
(
tooltip
box3
expectedTooltipGeometry
)
;
await
hideTooltip
(
tooltip
)
;
info
(
"
Display
the
tooltip
on
box4
.
"
)
;
await
showTooltip
(
tooltip
box4
)
;
expectedTooltipGeometry
=
{
position
:
"
top
"
height
width
}
;
checkTooltipGeometry
(
tooltip
box4
expectedTooltipGeometry
)
;
await
hideTooltip
(
tooltip
)
;
info
(
"
Try
to
display
the
tooltip
on
bottom
of
box4
.
"
)
;
await
showTooltip
(
tooltip
box4
{
position
:
"
bottom
"
}
)
;
expectedTooltipGeometry
=
{
position
:
"
top
"
height
width
}
;
checkTooltipGeometry
(
tooltip
box4
expectedTooltipGeometry
)
;
await
hideTooltip
(
tooltip
)
;
is
(
tooltip
.
isVisible
(
)
false
"
Tooltip
is
not
visible
"
)
;
tooltip
.
destroy
(
)
;
}
)
;
