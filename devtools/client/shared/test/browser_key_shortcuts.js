"
use
strict
"
;
var
isOSX
=
Services
.
appinfo
.
OS
=
=
=
"
Darwin
"
;
add_task
(
async
function
(
)
{
const
shortcuts
=
new
KeyShortcuts
(
{
window
}
)
;
await
testSimple
(
shortcuts
)
;
await
testNonLetterCharacter
(
shortcuts
)
;
await
testPlusCharacter
(
shortcuts
)
;
await
testFunctionKey
(
shortcuts
)
;
await
testMixup
(
shortcuts
)
;
await
testLooseDigits
(
shortcuts
)
;
await
testExactModifiers
(
shortcuts
)
;
await
testLooseShiftModifier
(
shortcuts
)
;
await
testStrictLetterShiftModifier
(
shortcuts
)
;
await
testAltModifier
(
shortcuts
)
;
await
testCommandOrControlModifier
(
shortcuts
)
;
await
testCtrlModifier
(
shortcuts
)
;
await
testInvalidShortcutString
(
shortcuts
)
;
await
testNullShortcut
(
shortcuts
)
;
await
testCmdShiftShortcut
(
shortcuts
)
;
await
testTabCharacterShortcut
(
shortcuts
)
;
shortcuts
.
destroy
(
)
;
await
testTarget
(
)
;
}
)
;
function
once
(
shortcuts
key
listener
)
{
let
called
=
false
;
return
new
Promise
(
done
=
>
{
const
onShortcut
=
event
=
>
{
shortcuts
.
off
(
key
onShortcut
)
;
ok
(
!
called
"
once
listener
called
only
once
(
i
.
e
.
off
(
)
works
)
"
)
;
called
=
true
;
listener
(
event
)
;
done
(
)
;
}
;
shortcuts
.
on
(
key
onShortcut
)
;
}
)
;
}
async
function
testSimple
(
shortcuts
)
{
info
(
"
Test
simple
key
shortcuts
"
)
;
const
onKey
=
once
(
shortcuts
"
0
"
event
=
>
{
is
(
event
.
key
"
0
"
)
;
EventUtils
.
synthesizeKey
(
"
0
"
{
}
window
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
0
"
{
}
window
)
;
await
onKey
;
}
async
function
testNonLetterCharacter
(
shortcuts
)
{
info
(
"
Test
non
-
naive
character
key
shortcuts
"
)
;
const
onKey
=
once
(
shortcuts
"
[
"
event
=
>
{
is
(
event
.
key
"
[
"
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
[
"
{
}
window
)
;
await
onKey
;
}
async
function
testFunctionKey
(
shortcuts
)
{
info
(
"
Test
function
key
shortcuts
"
)
;
const
onKey
=
once
(
shortcuts
"
F12
"
event
=
>
{
is
(
event
.
key
"
F12
"
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
F12
"
{
keyCode
:
123
}
window
)
;
await
onKey
;
}
async
function
testPlusCharacter
(
shortcuts
)
{
info
(
"
Test
'
Plus
'
key
shortcuts
"
)
;
const
onKey
=
once
(
shortcuts
"
Plus
"
event
=
>
{
is
(
event
.
key
"
+
"
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
+
"
{
keyCode
:
61
shiftKey
:
true
}
window
)
;
await
onKey
;
}
async
function
testMixup
(
shortcuts
)
{
info
(
"
Test
possible
listener
mixup
"
)
;
let
hitFirst
=
false
hitSecond
=
false
;
const
onFirstKey
=
once
(
shortcuts
"
0
"
event
=
>
{
is
(
event
.
key
"
0
"
)
;
hitFirst
=
true
;
}
)
;
const
onSecondKey
=
once
(
shortcuts
"
Alt
+
A
"
event
=
>
{
is
(
event
.
key
"
a
"
)
;
ok
(
event
.
altKey
)
;
hitSecond
=
true
;
}
)
;
ok
(
!
hitFirst
"
First
shortcut
isn
'
t
notified
before
firing
the
key
event
"
)
;
EventUtils
.
synthesizeKey
(
"
0
"
{
}
window
)
;
await
onFirstKey
;
ok
(
hitFirst
"
Got
the
first
shortcut
notified
"
)
;
ok
(
!
hitSecond
"
No
mixup
second
shortcut
is
still
not
notified
(
1
/
2
)
"
)
;
await
new
Promise
(
done
=
>
{
window
.
setTimeout
(
done
0
)
;
}
)
;
ok
(
!
hitSecond
"
No
mixup
second
shortcut
is
still
not
notified
(
2
/
2
)
"
)
;
EventUtils
.
synthesizeKey
(
"
a
"
{
altKey
:
true
}
window
)
;
await
onSecondKey
;
ok
(
hitSecond
"
Got
the
second
shortcut
notified
once
it
is
actually
fired
"
)
;
}
async
function
testLooseDigits
(
shortcuts
)
{
info
(
"
Test
Loose
digits
"
)
;
let
onKey
=
once
(
shortcuts
"
0
"
event
=
>
{
is
(
event
.
key
"
"
)
;
ok
(
!
event
.
altKey
)
;
ok
(
!
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
ok
(
!
event
.
shiftKey
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
"
{
keyCode
:
48
}
window
)
;
await
onKey
;
onKey
=
once
(
shortcuts
"
0
"
event
=
>
{
is
(
event
.
key
"
0
"
)
;
ok
(
!
event
.
altKey
)
;
ok
(
!
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
ok
(
event
.
shiftKey
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
0
"
{
keyCode
:
48
shiftKey
:
true
}
window
)
;
await
onKey
;
}
async
function
testExactModifiers
(
shortcuts
)
{
info
(
"
Test
exact
modifiers
match
"
)
;
let
hit
=
false
;
const
onKey
=
once
(
shortcuts
"
Alt
+
A
"
event
=
>
{
is
(
event
.
key
"
a
"
)
;
ok
(
event
.
altKey
)
;
ok
(
!
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
ok
(
!
event
.
shiftKey
)
;
hit
=
true
;
}
)
;
ok
(
!
hit
"
Shortcut
isn
'
t
notified
before
firing
the
key
event
"
)
;
EventUtils
.
synthesizeKey
(
"
a
"
{
accelKey
:
true
altKey
:
true
shiftKey
:
true
}
window
)
;
EventUtils
.
synthesizeKey
(
"
a
"
{
accelKey
:
true
altKey
:
false
shiftKey
:
false
}
window
)
;
EventUtils
.
synthesizeKey
(
"
a
"
{
accelKey
:
false
altKey
:
false
shiftKey
:
true
}
window
)
;
EventUtils
.
synthesizeKey
(
"
a
"
{
accelKey
:
false
altKey
:
false
shiftKey
:
false
}
window
)
;
await
new
Promise
(
done
=
>
{
window
.
setTimeout
(
done
0
)
;
}
)
;
ok
(
!
hit
"
Listener
isn
'
t
called
when
modifiers
aren
'
t
exactly
matching
"
)
;
EventUtils
.
synthesizeKey
(
"
a
"
{
accelKey
:
false
altKey
:
true
shiftKey
:
false
}
window
)
;
await
onKey
;
ok
(
hit
"
Got
shortcut
notified
once
it
is
actually
fired
"
)
;
}
async
function
testLooseShiftModifier
(
shortcuts
)
{
info
(
"
Test
Loose
shift
modifier
"
)
;
let
onKey
=
once
(
shortcuts
"
%
"
event
=
>
{
is
(
event
.
key
"
%
"
)
;
ok
(
!
event
.
altKey
)
;
ok
(
!
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
ok
(
event
.
shiftKey
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
%
"
{
accelKey
:
false
altKey
:
false
ctrlKey
:
false
shiftKey
:
true
}
window
)
;
await
onKey
;
onKey
=
once
(
shortcuts
"
"
event
=
>
{
is
(
event
.
key
"
"
)
;
ok
(
!
event
.
altKey
)
;
ok
(
!
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
ok
(
event
.
shiftKey
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
"
{
accelKey
:
false
altKey
:
false
ctrlKey
:
false
shiftKey
:
true
}
window
)
;
await
onKey
;
}
async
function
testStrictLetterShiftModifier
(
shortcuts
)
{
info
(
"
Test
strict
shift
modifier
on
letters
"
)
;
let
hitFirst
=
false
;
const
onKey
=
once
(
shortcuts
"
a
"
event
=
>
{
is
(
event
.
key
"
a
"
)
;
ok
(
!
event
.
altKey
)
;
ok
(
!
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
ok
(
!
event
.
shiftKey
)
;
hitFirst
=
true
;
}
)
;
const
onShiftKey
=
once
(
shortcuts
"
Shift
+
a
"
event
=
>
{
is
(
event
.
key
"
a
"
)
;
ok
(
!
event
.
altKey
)
;
ok
(
!
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
ok
(
event
.
shiftKey
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
a
"
{
shiftKey
:
true
}
window
)
;
await
onShiftKey
;
ok
(
!
hitFirst
"
Didn
'
t
fire
the
explicit
shift
+
a
"
)
;
EventUtils
.
synthesizeKey
(
"
a
"
{
shiftKey
:
false
}
window
)
;
await
onKey
;
}
async
function
testAltModifier
(
shortcuts
)
{
info
(
"
Test
Alt
modifier
"
)
;
const
onKey
=
once
(
shortcuts
"
Alt
+
F1
"
event
=
>
{
is
(
event
.
keyCode
window
.
KeyboardEvent
.
DOM_VK_F1
)
;
ok
(
event
.
altKey
)
;
ok
(
!
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
ok
(
!
event
.
shiftKey
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
VK_F1
"
{
altKey
:
true
}
window
)
;
await
onKey
;
}
async
function
testCommandOrControlModifier
(
shortcuts
)
{
info
(
"
Test
CommandOrControl
modifier
"
)
;
const
onKey
=
once
(
shortcuts
"
CommandOrControl
+
F1
"
event
=
>
{
is
(
event
.
keyCode
window
.
KeyboardEvent
.
DOM_VK_F1
)
;
ok
(
!
event
.
altKey
)
;
if
(
isOSX
)
{
ok
(
!
event
.
ctrlKey
)
;
ok
(
event
.
metaKey
)
;
}
else
{
ok
(
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
}
ok
(
!
event
.
shiftKey
)
;
}
)
;
const
onKeyAlias
=
once
(
shortcuts
"
CmdOrCtrl
+
F1
"
event
=
>
{
is
(
event
.
keyCode
window
.
KeyboardEvent
.
DOM_VK_F1
)
;
ok
(
!
event
.
altKey
)
;
if
(
isOSX
)
{
ok
(
!
event
.
ctrlKey
)
;
ok
(
event
.
metaKey
)
;
}
else
{
ok
(
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
}
ok
(
!
event
.
shiftKey
)
;
}
)
;
if
(
isOSX
)
{
EventUtils
.
synthesizeKey
(
"
VK_F1
"
{
metaKey
:
true
}
window
)
;
}
else
{
EventUtils
.
synthesizeKey
(
"
VK_F1
"
{
ctrlKey
:
true
}
window
)
;
}
await
onKey
;
await
onKeyAlias
;
}
async
function
testCtrlModifier
(
shortcuts
)
{
info
(
"
Test
Ctrl
modifier
"
)
;
const
onKey
=
once
(
shortcuts
"
Ctrl
+
F1
"
event
=
>
{
is
(
event
.
keyCode
window
.
KeyboardEvent
.
DOM_VK_F1
)
;
ok
(
!
event
.
altKey
)
;
ok
(
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
ok
(
!
event
.
shiftKey
)
;
}
)
;
const
onKeyAlias
=
once
(
shortcuts
"
Control
+
F1
"
event
=
>
{
is
(
event
.
keyCode
window
.
KeyboardEvent
.
DOM_VK_F1
)
;
ok
(
!
event
.
altKey
)
;
ok
(
event
.
ctrlKey
)
;
ok
(
!
event
.
metaKey
)
;
ok
(
!
event
.
shiftKey
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
VK_F1
"
{
ctrlKey
:
true
}
window
)
;
await
onKey
;
await
onKeyAlias
;
}
async
function
testCmdShiftShortcut
(
shortcuts
)
{
if
(
!
isOSX
)
{
return
;
}
const
onCmdKey
=
once
(
shortcuts
"
CmdOrCtrl
+
[
"
event
=
>
{
is
(
event
.
key
"
[
"
)
;
ok
(
!
event
.
altKey
)
;
ok
(
!
event
.
ctrlKey
)
;
ok
(
event
.
metaKey
)
;
ok
(
!
event
.
shiftKey
)
;
}
)
;
const
onCmdShiftKey
=
once
(
shortcuts
"
CmdOrCtrl
+
Shift
+
[
"
event
=
>
{
is
(
event
.
key
"
[
"
)
;
ok
(
!
event
.
altKey
)
;
ok
(
!
event
.
ctrlKey
)
;
ok
(
event
.
metaKey
)
;
ok
(
event
.
shiftKey
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
[
"
{
metaKey
:
true
shiftKey
:
true
}
window
)
;
EventUtils
.
synthesizeKey
(
"
[
"
{
metaKey
:
true
}
window
)
;
await
onCmdKey
;
await
onCmdShiftKey
;
}
async
function
testTarget
(
)
{
info
(
"
Test
KeyShortcuts
with
target
argument
"
)
;
const
target
=
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
input
"
)
;
document
.
documentElement
.
appendChild
(
target
)
;
target
.
focus
(
)
;
const
shortcuts
=
new
KeyShortcuts
(
{
window
target
}
)
;
const
onKey
=
once
(
shortcuts
"
0
"
event
=
>
{
is
(
event
.
key
"
0
"
)
;
is
(
event
.
target
target
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
0
"
{
}
window
)
;
await
onKey
;
target
.
remove
(
)
;
shortcuts
.
destroy
(
)
;
}
function
testInvalidShortcutString
(
shortcuts
)
{
info
(
"
Test
wrong
shortcut
string
"
)
;
const
shortcut
=
KeyShortcuts
.
parseElectronKey
(
"
Cmmd
+
F
"
)
;
ok
(
!
shortcut
"
Passing
a
invalid
shortcut
string
should
return
a
null
object
"
)
;
shortcuts
.
on
(
"
Cmmd
+
F
"
function
(
)
{
}
)
;
ok
(
true
"
on
(
)
shouldn
'
t
throw
when
passing
invalid
shortcut
string
"
)
;
}
function
testNullShortcut
(
shortcuts
)
{
info
(
"
Test
null
shortcut
"
)
;
const
shortcut
=
KeyShortcuts
.
parseElectronKey
(
null
)
;
ok
(
!
shortcut
"
Passing
a
null
object
should
return
a
null
object
"
)
;
const
stringified
=
KeyShortcuts
.
stringifyShortcut
(
shortcut
)
;
is
(
stringified
"
"
"
A
null
object
should
be
stringified
as
an
empty
string
"
)
;
shortcuts
.
on
(
null
function
(
)
{
}
)
;
ok
(
true
"
on
(
)
shouldn
'
t
throw
when
passing
a
null
object
"
)
;
}
async
function
testTabCharacterShortcut
(
shortcuts
)
{
if
(
!
isOSX
)
{
return
;
}
info
(
"
Test
tab
character
shortcut
"
)
;
once
(
shortcuts
"
CmdOrCtrl
+
Alt
+
I
"
(
)
=
>
{
ok
(
false
"
This
handler
must
not
be
executed
"
)
;
}
)
;
const
onKey
=
once
(
shortcuts
"
CmdOrCtrl
+
Alt
+
Shift
+
I
"
event
=
>
{
info
(
"
Test
for
CmdOrCtrl
+
Alt
+
Shift
+
I
"
)
;
is
(
event
.
key
"
^
"
)
;
is
(
event
.
keyCode
73
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
^
"
{
code
:
"
KeyI
"
key
:
"
^
"
keyCode
:
73
shiftKey
:
true
altKey
:
true
metaKey
:
true
}
window
)
;
await
onKey
;
}
