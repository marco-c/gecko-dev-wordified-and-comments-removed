"
use
strict
"
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
TEST_URI
=
CHROME_URL_ROOT
+
"
doc_html_tooltip_rtl
.
xul
"
;
const
{
HTMLTooltip
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
tooltip
/
HTMLTooltip
"
)
;
loadHelperScript
(
"
helper_html_tooltip
.
js
"
)
;
const
TOOLBOX_WIDTH
=
500
;
const
TOOLTIP_WIDTH
=
150
;
const
TOOLTIP_HEIGHT
=
30
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
toolbox
.
sidebar
.
width
"
TOOLBOX_WIDTH
)
;
let
[
doc
]
=
await
createHost
(
"
side
"
TEST_URI
)
;
info
(
"
Test
a
tooltip
is
not
closed
when
clicking
inside
itself
"
)
;
let
tooltip
=
new
HTMLTooltip
(
doc
{
useXulWrapper
:
false
}
)
;
let
div
=
doc
.
createElementNS
(
HTML_NS
"
div
"
)
;
div
.
textContent
=
"
tooltip
"
;
div
.
style
.
cssText
=
"
box
-
sizing
:
border
-
box
;
border
:
1px
solid
black
"
;
tooltip
.
setContent
(
div
{
width
:
TOOLTIP_WIDTH
height
:
TOOLTIP_HEIGHT
}
)
;
await
testRtlAnchors
(
doc
tooltip
)
;
await
testLtrAnchors
(
doc
tooltip
)
;
await
hideTooltip
(
tooltip
)
;
tooltip
.
destroy
(
)
;
}
)
;
async
function
testRtlAnchors
(
doc
tooltip
)
{
let
box1
=
doc
.
getElementById
(
"
box1
"
)
;
let
box2
=
doc
.
getElementById
(
"
box2
"
)
;
info
(
"
Display
the
tooltip
on
box1
.
"
)
;
await
showTooltip
(
tooltip
box1
{
position
:
"
bottom
"
}
)
;
let
panelRect
=
tooltip
.
container
.
getBoundingClientRect
(
)
;
let
anchorRect
=
box1
.
getBoundingClientRect
(
)
;
is
(
panelRect
.
left
0
"
Tooltip
is
aligned
with
left
edge
of
the
toolbox
"
)
;
is
(
panelRect
.
top
anchorRect
.
bottom
"
Tooltip
aligned
with
the
anchor
bottom
edge
"
)
;
is
(
panelRect
.
height
TOOLTIP_HEIGHT
"
Tooltip
height
is
at
100px
as
expected
"
)
;
info
(
"
Display
the
tooltip
on
box2
.
"
)
;
await
showTooltip
(
tooltip
box2
{
position
:
"
bottom
"
}
)
;
panelRect
=
tooltip
.
container
.
getBoundingClientRect
(
)
;
anchorRect
=
box2
.
getBoundingClientRect
(
)
;
is
(
panelRect
.
right
anchorRect
.
right
"
Tooltip
is
aligned
with
right
edge
of
anchor
"
)
;
is
(
panelRect
.
top
anchorRect
.
bottom
"
Tooltip
aligned
with
the
anchor
bottom
edge
"
)
;
is
(
panelRect
.
height
TOOLTIP_HEIGHT
"
Tooltip
height
is
at
100px
as
expected
"
)
;
}
async
function
testLtrAnchors
(
doc
tooltip
)
{
let
box3
=
doc
.
getElementById
(
"
box3
"
)
;
let
box4
=
doc
.
getElementById
(
"
box4
"
)
;
info
(
"
Display
the
tooltip
on
box3
.
"
)
;
await
showTooltip
(
tooltip
box3
{
position
:
"
bottom
"
}
)
;
let
panelRect
=
tooltip
.
container
.
getBoundingClientRect
(
)
;
let
anchorRect
=
box3
.
getBoundingClientRect
(
)
;
is
(
panelRect
.
left
anchorRect
.
left
"
Tooltip
is
aligned
with
left
edge
of
anchor
"
)
;
is
(
panelRect
.
top
anchorRect
.
bottom
"
Tooltip
aligned
with
the
anchor
bottom
edge
"
)
;
is
(
panelRect
.
height
TOOLTIP_HEIGHT
"
Tooltip
height
is
at
100px
as
expected
"
)
;
info
(
"
Display
the
tooltip
on
box4
.
"
)
;
await
showTooltip
(
tooltip
box4
{
position
:
"
bottom
"
}
)
;
panelRect
=
tooltip
.
container
.
getBoundingClientRect
(
)
;
anchorRect
=
box4
.
getBoundingClientRect
(
)
;
is
(
panelRect
.
right
TOOLBOX_WIDTH
"
Tooltip
is
aligned
with
right
edge
of
toolbox
"
)
;
is
(
panelRect
.
top
anchorRect
.
bottom
"
Tooltip
aligned
with
the
anchor
bottom
edge
"
)
;
is
(
panelRect
.
height
TOOLTIP_HEIGHT
"
Tooltip
height
is
at
100px
as
expected
"
)
;
}
