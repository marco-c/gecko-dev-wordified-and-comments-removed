"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
"
<
p
>
browser_telemetry_button_responsive
.
js
<
/
p
>
"
;
const
TOOL_DELAY
=
200
;
const
asyncStorage
=
require
(
"
devtools
/
shared
/
async
-
storage
"
)
;
requestLongerTimeout
(
2
)
;
Services
.
prefs
.
clearUserPref
(
"
devtools
.
responsive
.
html
.
displayedDeviceList
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
responsive
.
html
.
displayedDeviceList
"
)
;
asyncStorage
.
removeItem
(
"
devtools
.
devices
.
local
"
)
;
}
)
;
loader
.
lazyRequireGetter
(
this
"
ResponsiveUIManager
"
"
devtools
/
client
/
responsive
/
manager
"
)
;
add_task
(
async
function
(
)
{
await
addTab
(
TEST_URI
)
;
startTelemetry
(
)
;
const
tab
=
gBrowser
.
selectedTab
;
const
toolbox
=
await
gDevTools
.
showToolboxForTab
(
tab
{
toolId
:
"
inspector
"
}
)
;
info
(
"
inspector
opened
"
)
;
info
(
"
testing
the
responsivedesign
button
"
)
;
await
testButton
(
toolbox
)
;
await
toolbox
.
destroy
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
async
function
testButton
(
toolbox
)
{
info
(
"
Testing
command
-
button
-
responsive
"
)
;
const
button
=
toolbox
.
doc
.
querySelector
(
"
#
command
-
button
-
responsive
"
)
;
ok
(
button
"
Captain
we
have
the
button
"
)
;
await
delayedClicks
(
button
4
)
;
checkResults
(
)
;
}
function
waitForToggle
(
)
{
return
new
Promise
(
resolve
=
>
{
const
handler
=
(
)
=
>
{
ResponsiveUIManager
.
off
(
"
on
"
handler
)
;
ResponsiveUIManager
.
off
(
"
off
"
handler
)
;
resolve
(
)
;
}
;
ResponsiveUIManager
.
on
(
"
on
"
handler
)
;
ResponsiveUIManager
.
on
(
"
off
"
handler
)
;
}
)
;
}
var
delayedClicks
=
async
function
(
node
clicks
)
{
for
(
let
i
=
0
;
i
<
clicks
;
i
+
+
)
{
info
(
"
Clicking
button
"
+
node
.
id
)
;
const
toggled
=
waitForToggle
(
)
;
node
.
click
(
)
;
await
toggled
;
await
DevToolsUtils
.
waitForTime
(
TOOL_DELAY
)
;
}
}
;
function
checkResults
(
)
{
checkTelemetry
(
"
DEVTOOLS_RESPONSIVE_OPENED_COUNT
"
"
"
{
0
:
2
1
:
0
}
"
array
"
)
;
checkTelemetry
(
"
DEVTOOLS_RESPONSIVE_TIME_ACTIVE_SECONDS
"
"
"
null
"
hasentries
"
)
;
}
