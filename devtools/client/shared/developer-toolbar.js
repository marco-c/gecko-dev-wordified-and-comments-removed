"
use
strict
"
;
const
promise
=
require
(
"
promise
"
)
;
loader
.
lazyRequireGetter
(
this
"
gcliInit
"
"
devtools
/
shared
/
gcli
/
commands
/
index
"
)
;
var
CommandUtils
=
{
_requisitions
:
new
WeakMap
(
)
async
executeOnTarget
(
target
command
)
{
let
requisitionPromise
=
this
.
_requisitions
.
get
(
target
)
;
if
(
!
requisitionPromise
)
{
requisitionPromise
=
this
.
createRequisition
(
target
{
environment
:
CommandUtils
.
createEnvironment
(
{
target
}
"
target
"
)
}
)
;
this
.
_requisitions
.
set
(
target
requisitionPromise
)
;
}
let
requisition
=
await
requisitionPromise
;
requisition
.
updateExec
(
command
)
;
}
createRequisition
:
function
(
target
options
)
{
if
(
!
gcliInit
)
{
return
promise
.
reject
(
"
Unable
to
load
gcli
"
)
;
}
return
gcliInit
.
getSystem
(
target
)
.
then
(
system
=
>
{
let
Requisition
=
require
(
"
gcli
/
cli
"
)
.
Requisition
;
return
new
Requisition
(
system
options
)
;
}
)
;
}
destroyRequisition
:
function
(
requisition
target
)
{
requisition
.
destroy
(
)
;
gcliInit
.
releaseSystem
(
target
)
;
}
createEnvironment
:
function
(
container
targetProperty
=
"
target
"
)
{
if
(
!
container
[
targetProperty
]
.
toString
|
|
!
/
TabTarget
/
.
test
(
container
[
targetProperty
]
.
toString
(
)
)
)
{
throw
new
Error
(
"
Missing
target
"
)
;
}
return
{
get
target
(
)
{
if
(
!
container
[
targetProperty
]
.
toString
|
|
!
/
TabTarget
/
.
test
(
container
[
targetProperty
]
.
toString
(
)
)
)
{
throw
new
Error
(
"
Removed
target
"
)
;
}
return
container
[
targetProperty
]
;
}
get
chromeWindow
(
)
{
return
this
.
target
.
tab
.
ownerDocument
.
defaultView
;
}
get
chromeDocument
(
)
{
return
this
.
target
.
tab
.
ownerDocument
.
defaultView
.
document
;
}
get
window
(
)
{
return
this
.
chromeWindow
.
gBrowser
.
contentWindowAsCPOW
;
}
get
document
(
)
{
return
this
.
chromeWindow
.
gBrowser
.
contentDocumentAsCPOW
;
}
}
;
}
}
;
exports
.
CommandUtils
=
CommandUtils
;
