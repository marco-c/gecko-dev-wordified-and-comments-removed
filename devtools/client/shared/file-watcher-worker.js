"
use
strict
"
;
importScripts
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
modifiedTimes
=
new
Map
(
)
;
function
gatherFiles
(
path
fileRegex
)
{
let
files
=
[
]
;
const
iterator
=
new
OS
.
File
.
DirectoryIterator
(
path
)
;
try
{
for
(
let
child
of
iterator
)
{
if
(
child
.
isDir
&
&
!
child
.
path
.
endsWith
(
"
/
test
"
)
)
{
files
=
files
.
concat
(
gatherFiles
(
child
.
path
fileRegex
)
)
;
}
else
if
(
child
.
path
.
match
(
fileRegex
)
)
{
let
info
;
try
{
info
=
OS
.
File
.
stat
(
child
.
path
)
;
}
catch
(
e
)
{
continue
;
}
files
.
push
(
child
.
path
)
;
modifiedTimes
.
set
(
child
.
path
info
.
lastModificationDate
.
getTime
(
)
)
;
}
}
}
finally
{
iterator
.
close
(
)
;
}
return
files
;
}
function
scanFiles
(
files
onChangedFile
)
{
files
.
forEach
(
file
=
>
{
let
info
;
try
{
info
=
OS
.
File
.
stat
(
file
)
;
}
catch
(
e
)
{
return
;
}
const
lastTime
=
modifiedTimes
.
get
(
file
)
;
if
(
info
.
lastModificationDate
.
getTime
(
)
>
lastTime
)
{
modifiedTimes
.
set
(
file
info
.
lastModificationDate
.
getTime
(
)
)
;
onChangedFile
(
file
)
;
}
}
)
;
}
onmessage
=
function
(
event
)
{
const
{
path
fileRegex
}
=
event
.
data
;
const
info
=
OS
.
File
.
stat
(
path
)
;
if
(
!
info
.
isDir
)
{
throw
new
Error
(
"
Watcher
expects
a
directory
as
root
path
"
)
;
}
const
files
=
gatherFiles
(
path
fileRegex
|
|
/
.
*
/
)
;
setInterval
(
(
)
=
>
{
scanFiles
(
files
changedFile
=
>
{
postMessage
(
{
path
:
changedFile
}
)
;
}
)
;
}
1000
)
;
}
;
