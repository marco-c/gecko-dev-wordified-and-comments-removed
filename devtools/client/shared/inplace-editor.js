"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
focusManager
=
Services
.
focus
;
const
{
KeyCodes
}
=
require
(
"
devtools
/
client
/
shared
/
keycodes
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
findMostRelevantCssPropertyIndex
}
=
require
(
"
devtools
/
client
/
shared
/
suggestion
-
picker
"
)
;
loader
.
lazyRequireGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
true
)
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
CONTENT_TYPES
=
{
PLAIN_TEXT
:
0
CSS_VALUE
:
1
CSS_MIXED
:
2
CSS_PROPERTY
:
3
}
;
const
MAX_POPUP_ENTRIES
=
500
;
const
FOCUS_FORWARD
=
focusManager
.
MOVEFOCUS_FORWARD
;
const
FOCUS_BACKWARD
=
focusManager
.
MOVEFOCUS_BACKWARD
;
const
WORD_REGEXP
=
/
\
w
/
;
const
isWordChar
=
function
(
str
)
{
return
str
&
&
WORD_REGEXP
.
test
(
str
)
;
}
;
const
GRID_PROPERTY_NAMES
=
[
"
grid
-
area
"
"
grid
-
row
"
"
grid
-
row
-
start
"
"
grid
-
row
-
end
"
"
grid
-
column
"
"
grid
-
column
-
start
"
"
grid
-
column
-
end
"
]
;
const
GRID_ROW_PROPERTY_NAMES
=
[
"
grid
-
area
"
"
grid
-
row
"
"
grid
-
row
-
start
"
"
grid
-
row
-
end
"
]
;
const
GRID_COL_PROPERTY_NAMES
=
[
"
grid
-
area
"
"
grid
-
column
"
"
grid
-
column
-
start
"
"
grid
-
column
-
end
"
]
;
function
isKeyIn
(
key
.
.
.
keys
)
{
return
keys
.
some
(
expectedKey
=
>
{
return
key
=
=
=
KeyCodes
[
"
DOM_VK_
"
+
expectedKey
]
;
}
)
;
}
function
editableField
(
options
)
{
return
editableItem
(
options
function
(
element
event
)
{
if
(
!
options
.
element
.
inplaceEditor
)
{
new
InplaceEditor
(
options
event
)
;
}
}
)
;
}
exports
.
editableField
=
editableField
;
function
editableItem
(
options
callback
)
{
const
trigger
=
options
.
trigger
|
|
"
click
"
;
const
element
=
options
.
element
;
element
.
addEventListener
(
trigger
function
(
evt
)
{
if
(
evt
.
target
.
nodeName
!
=
=
"
a
"
)
{
const
win
=
this
.
ownerDocument
.
defaultView
;
const
selection
=
win
.
getSelection
(
)
;
if
(
trigger
!
=
"
click
"
|
|
selection
.
isCollapsed
)
{
callback
(
element
evt
)
;
}
evt
.
stopPropagation
(
)
;
}
}
)
;
element
.
addEventListener
(
"
keypress
"
function
(
evt
)
{
if
(
evt
.
target
.
nodeName
=
=
=
"
button
"
)
{
return
;
}
if
(
isKeyIn
(
evt
.
keyCode
"
RETURN
"
)
|
|
isKeyIn
(
evt
.
charCode
"
SPACE
"
)
)
{
callback
(
element
)
;
}
}
true
)
;
element
.
addEventListener
(
"
mousedown
"
function
(
evt
)
{
if
(
evt
.
target
.
nodeName
!
=
=
"
a
"
)
{
const
cleanup
=
function
(
)
{
element
.
style
.
removeProperty
(
"
outline
-
style
"
)
;
element
.
removeEventListener
(
"
mouseup
"
cleanup
)
;
element
.
removeEventListener
(
"
mouseout
"
cleanup
)
;
}
;
element
.
style
.
setProperty
(
"
outline
-
style
"
"
none
"
)
;
element
.
addEventListener
(
"
mouseup
"
cleanup
)
;
element
.
addEventListener
(
"
mouseout
"
cleanup
)
;
}
}
)
;
element
.
_editable
=
true
;
element
.
_trigger
=
trigger
;
element
.
setAttribute
(
"
role
"
"
button
"
)
;
return
function
turnOnEditMode
(
)
{
callback
(
element
)
;
}
;
}
exports
.
editableItem
=
editableItem
;
function
getInplaceEditorForSpan
(
span
)
{
return
span
.
inplaceEditor
;
}
exports
.
getInplaceEditorForSpan
=
getInplaceEditorForSpan
;
function
InplaceEditor
(
options
event
)
{
this
.
elt
=
options
.
element
;
const
doc
=
this
.
elt
.
ownerDocument
;
this
.
doc
=
doc
;
this
.
elt
.
inplaceEditor
=
this
;
this
.
cssProperties
=
options
.
cssProperties
;
this
.
cssVariables
=
options
.
cssVariables
|
|
new
Map
(
)
;
this
.
change
=
options
.
change
;
this
.
done
=
options
.
done
;
this
.
contextMenu
=
options
.
contextMenu
;
this
.
defaultIncrement
=
options
.
defaultIncrement
|
|
1
;
this
.
destroy
=
options
.
destroy
;
this
.
initial
=
options
.
initial
?
options
.
initial
:
this
.
elt
.
textContent
;
this
.
multiline
=
options
.
multiline
|
|
false
;
this
.
maxWidth
=
options
.
maxWidth
;
if
(
typeof
this
.
maxWidth
=
=
"
function
"
)
{
this
.
maxWidth
=
this
.
maxWidth
(
)
;
}
this
.
trimOutput
=
options
.
trimOutput
=
=
=
undefined
?
true
:
!
!
options
.
trimOutput
;
this
.
stopOnShiftTab
=
!
!
options
.
stopOnShiftTab
;
this
.
stopOnTab
=
!
!
options
.
stopOnTab
;
this
.
stopOnReturn
=
!
!
options
.
stopOnReturn
;
this
.
contentType
=
options
.
contentType
|
|
CONTENT_TYPES
.
PLAIN_TEXT
;
this
.
property
=
options
.
property
;
this
.
popup
=
options
.
popup
;
this
.
preserveTextStyles
=
options
.
preserveTextStyles
=
=
=
undefined
?
false
:
!
!
options
.
preserveTextStyles
;
this
.
showSuggestCompletionOnEmpty
=
!
!
options
.
showSuggestCompletionOnEmpty
;
this
.
_onBlur
=
this
.
_onBlur
.
bind
(
this
)
;
this
.
_onWindowBlur
=
this
.
_onWindowBlur
.
bind
(
this
)
;
this
.
_onKeyPress
=
this
.
_onKeyPress
.
bind
(
this
)
;
this
.
_onInput
=
this
.
_onInput
.
bind
(
this
)
;
this
.
_onKeyup
=
this
.
_onKeyup
.
bind
(
this
)
;
this
.
_onAutocompletePopupClick
=
this
.
_onAutocompletePopupClick
.
bind
(
this
)
;
this
.
_onContextMenu
=
this
.
_onContextMenu
.
bind
(
this
)
;
this
.
_createInput
(
)
;
this
.
originalDisplay
=
this
.
elt
.
style
.
display
;
this
.
elt
.
style
.
display
=
"
none
"
;
this
.
elt
.
parentNode
.
insertBefore
(
this
.
input
this
.
elt
)
;
this
.
_autosize
(
)
;
this
.
inputCharDimensions
=
this
.
_getInputCharDimensions
(
)
;
if
(
typeof
options
.
advanceChars
=
=
=
"
function
"
)
{
this
.
_advanceChars
=
options
.
advanceChars
;
}
else
{
const
advanceCharcodes
=
{
}
;
const
advanceChars
=
options
.
advanceChars
|
|
"
"
;
for
(
let
i
=
0
;
i
<
advanceChars
.
length
;
i
+
+
)
{
advanceCharcodes
[
advanceChars
.
charCodeAt
(
i
)
]
=
true
;
}
this
.
_advanceChars
=
charCode
=
>
charCode
in
advanceCharcodes
;
}
this
.
input
.
focus
(
)
;
if
(
typeof
options
.
selectAll
=
=
"
undefined
"
|
|
options
.
selectAll
)
{
this
.
input
.
select
(
)
;
}
this
.
input
.
addEventListener
(
"
blur
"
this
.
_onBlur
)
;
this
.
input
.
addEventListener
(
"
keypress
"
this
.
_onKeyPress
)
;
this
.
input
.
addEventListener
(
"
input
"
this
.
_onInput
)
;
this
.
input
.
addEventListener
(
"
dblclick
"
this
.
_stopEventPropagation
)
;
this
.
input
.
addEventListener
(
"
click
"
this
.
_stopEventPropagation
)
;
this
.
input
.
addEventListener
(
"
mousedown
"
this
.
_stopEventPropagation
)
;
this
.
input
.
addEventListener
(
"
contextmenu
"
this
.
_onContextMenu
)
;
this
.
doc
.
defaultView
.
addEventListener
(
"
blur
"
this
.
_onWindowBlur
)
;
this
.
validate
=
options
.
validate
;
if
(
this
.
validate
)
{
this
.
input
.
addEventListener
(
"
keyup
"
this
.
_onKeyup
)
;
}
this
.
_updateSize
(
)
;
EventEmitter
.
decorate
(
this
)
;
if
(
options
.
start
)
{
options
.
start
(
this
event
)
;
}
this
.
_getGridNamesBeforeCompletion
(
options
.
getGridLineNames
)
;
}
exports
.
InplaceEditor
=
InplaceEditor
;
InplaceEditor
.
CONTENT_TYPES
=
CONTENT_TYPES
;
InplaceEditor
.
prototype
=
{
get
currentInputValue
(
)
{
const
val
=
this
.
trimOutput
?
this
.
input
.
value
.
trim
(
)
:
this
.
input
.
value
;
return
val
;
}
_createInput
:
function
(
)
{
this
.
input
=
this
.
doc
.
createElementNS
(
HTML_NS
this
.
multiline
?
"
textarea
"
:
"
input
"
)
;
this
.
input
.
inplaceEditor
=
this
;
if
(
this
.
multiline
)
{
this
.
input
.
style
.
resize
=
"
none
"
;
this
.
input
.
style
.
overflow
=
"
hidden
"
;
}
this
.
input
.
classList
.
add
(
"
styleinspector
-
propertyeditor
"
)
;
this
.
input
.
value
=
this
.
initial
;
if
(
!
this
.
preserveTextStyles
)
{
copyTextStyles
(
this
.
elt
this
.
input
)
;
}
}
_clear
:
function
(
)
{
if
(
!
this
.
input
)
{
return
;
}
this
.
input
.
removeEventListener
(
"
blur
"
this
.
_onBlur
)
;
this
.
input
.
removeEventListener
(
"
keypress
"
this
.
_onKeyPress
)
;
this
.
input
.
removeEventListener
(
"
keyup
"
this
.
_onKeyup
)
;
this
.
input
.
removeEventListener
(
"
input
"
this
.
_onInput
)
;
this
.
input
.
removeEventListener
(
"
dblclick
"
this
.
_stopEventPropagation
)
;
this
.
input
.
removeEventListener
(
"
click
"
this
.
_stopEventPropagation
)
;
this
.
input
.
removeEventListener
(
"
mousedown
"
this
.
_stopEventPropagation
)
;
this
.
input
.
removeEventListener
(
"
contextmenu
"
this
.
_onContextMenu
)
;
this
.
doc
.
defaultView
.
removeEventListener
(
"
blur
"
this
.
_onWindowBlur
)
;
this
.
_stopAutosize
(
)
;
this
.
elt
.
style
.
display
=
this
.
originalDisplay
;
if
(
this
.
doc
.
activeElement
=
=
this
.
input
)
{
this
.
elt
.
focus
(
)
;
}
this
.
input
.
remove
(
)
;
this
.
input
=
null
;
delete
this
.
elt
.
inplaceEditor
;
delete
this
.
elt
;
if
(
this
.
destroy
)
{
this
.
destroy
(
)
;
}
}
_autosize
:
function
(
)
{
this
.
_measurement
=
this
.
doc
.
createElementNS
(
HTML_NS
this
.
multiline
?
"
pre
"
:
"
span
"
)
;
this
.
_measurement
.
className
=
"
autosizer
"
;
this
.
elt
.
parentNode
.
appendChild
(
this
.
_measurement
)
;
const
style
=
this
.
_measurement
.
style
;
style
.
visibility
=
"
hidden
"
;
style
.
position
=
"
absolute
"
;
style
.
top
=
"
0
"
;
style
.
left
=
"
0
"
;
if
(
this
.
multiline
)
{
style
.
whiteSpace
=
"
pre
-
wrap
"
;
style
.
wordWrap
=
"
break
-
word
"
;
if
(
this
.
maxWidth
)
{
style
.
maxWidth
=
this
.
maxWidth
+
"
px
"
;
style
.
position
=
"
fixed
"
;
}
}
copyAllStyles
(
this
.
input
this
.
_measurement
)
;
this
.
_updateSize
(
)
;
}
_stopAutosize
:
function
(
)
{
if
(
!
this
.
_measurement
)
{
return
;
}
this
.
_measurement
.
remove
(
)
;
delete
this
.
_measurement
;
}
_updateSize
:
function
(
)
{
let
content
=
this
.
input
.
value
;
const
unbreakableSpace
=
"
\
u00a0
"
;
if
(
content
=
=
=
"
"
)
{
content
=
unbreakableSpace
;
}
if
(
content
.
lastIndexOf
(
"
\
n
"
)
=
=
=
content
.
length
-
1
)
{
content
=
content
+
unbreakableSpace
;
}
if
(
!
this
.
multiline
)
{
content
=
content
.
replace
(
/
/
g
unbreakableSpace
)
;
}
this
.
_measurement
.
textContent
=
content
;
let
width
=
this
.
_measurement
.
getBoundingClientRect
(
)
.
width
+
2
;
if
(
this
.
multiline
)
{
if
(
this
.
maxWidth
)
{
width
=
Math
.
min
(
this
.
maxWidth
width
)
;
}
const
height
=
this
.
_measurement
.
getBoundingClientRect
(
)
.
height
;
this
.
input
.
style
.
height
=
height
+
"
px
"
;
}
this
.
input
.
style
.
width
=
width
+
"
px
"
;
}
_getInputCharDimensions
:
function
(
)
{
this
.
_measurement
.
textContent
=
"
x
"
;
const
width
=
this
.
_measurement
.
clientWidth
;
const
height
=
this
.
_measurement
.
clientHeight
;
return
{
width
height
}
;
}
_incrementValue
:
function
(
increment
)
{
const
value
=
this
.
input
.
value
;
const
selectionStart
=
this
.
input
.
selectionStart
;
const
selectionEnd
=
this
.
input
.
selectionEnd
;
const
newValue
=
this
.
_incrementCSSValue
(
value
increment
selectionStart
selectionEnd
)
;
if
(
!
newValue
)
{
return
false
;
}
this
.
input
.
value
=
newValue
.
value
;
this
.
input
.
setSelectionRange
(
newValue
.
start
newValue
.
end
)
;
this
.
_doValidation
(
)
;
if
(
this
.
change
)
{
this
.
change
(
this
.
currentInputValue
)
;
}
return
true
;
}
_incrementCSSValue
:
function
(
value
increment
selStart
selEnd
)
{
const
range
=
this
.
_parseCSSValue
(
value
selStart
)
;
const
type
=
range
?
.
type
|
|
"
"
;
const
rawValue
=
range
?
value
.
substring
(
range
.
start
range
.
end
)
:
"
"
;
const
preRawValue
=
range
?
value
.
substr
(
0
range
.
start
)
:
"
"
;
const
postRawValue
=
range
?
value
.
substr
(
range
.
end
)
:
"
"
;
let
info
;
let
incrementedValue
=
null
selection
;
if
(
type
=
=
=
"
num
"
)
{
if
(
rawValue
=
=
"
0
"
)
{
info
=
{
}
;
info
.
units
=
this
.
_findCompatibleUnit
(
preRawValue
postRawValue
)
;
}
const
newValue
=
this
.
_incrementRawValue
(
rawValue
increment
info
)
;
if
(
newValue
!
=
=
null
)
{
incrementedValue
=
newValue
;
selection
=
[
0
incrementedValue
.
length
]
;
}
}
else
if
(
type
=
=
=
"
hex
"
)
{
const
exprOffset
=
selStart
-
range
.
start
;
const
exprOffsetEnd
=
selEnd
-
range
.
start
;
const
newValue
=
this
.
_incHexColor
(
rawValue
increment
exprOffset
exprOffsetEnd
)
;
if
(
newValue
)
{
incrementedValue
=
newValue
.
value
;
selection
=
newValue
.
selection
;
}
}
else
{
if
(
type
=
=
=
"
rgb
"
|
|
type
=
=
=
"
hsl
"
)
{
info
=
{
}
;
const
part
=
value
.
substring
(
range
.
start
selStart
)
.
split
(
"
"
)
.
length
-
1
;
if
(
part
=
=
=
3
)
{
info
.
minValue
=
0
;
info
.
maxValue
=
1
;
}
else
if
(
type
=
=
=
"
rgb
"
)
{
info
.
minValue
=
0
;
info
.
maxValue
=
255
;
}
else
if
(
part
!
=
=
0
)
{
info
.
minValue
=
0
;
info
.
maxValue
=
100
;
if
(
value
.
charAt
(
selStart
-
1
)
=
=
=
"
%
"
)
{
-
-
selStart
;
}
}
}
return
this
.
_incrementGenericValue
(
value
increment
selStart
selEnd
info
)
;
}
if
(
incrementedValue
=
=
=
null
)
{
return
null
;
}
return
{
value
:
preRawValue
+
incrementedValue
+
postRawValue
start
:
range
.
start
+
selection
[
0
]
end
:
range
.
start
+
selection
[
1
]
}
;
}
_findCompatibleUnit
:
function
(
beforeValue
afterValue
)
{
if
(
!
this
.
property
|
|
!
this
.
property
.
name
)
{
return
"
"
;
}
const
el
=
this
.
doc
.
createElement
(
"
div
"
)
;
const
units
=
[
"
px
"
"
deg
"
"
s
"
]
;
for
(
const
unit
of
units
)
{
const
value
=
beforeValue
+
"
1
"
+
unit
+
afterValue
;
el
.
style
.
setProperty
(
this
.
property
.
name
"
"
)
;
el
.
style
.
setProperty
(
this
.
property
.
name
value
)
;
if
(
el
.
style
.
getPropertyValue
(
this
.
property
.
name
)
!
=
=
"
"
)
{
return
unit
;
}
}
return
"
"
;
}
_parseCSSValue
:
function
(
value
offset
)
{
const
reSplitCSS
=
/
(
url
\
(
"
?
[
^
"
\
)
]
+
"
?
\
)
?
)
|
(
rgba
?
\
(
[
^
)
]
*
\
)
?
)
|
(
hsla
?
\
(
[
^
)
]
*
\
)
?
)
|
(
#
[
\
dA
-
Fa
-
f
]
+
)
|
(
-
?
\
d
*
\
.
?
\
d
+
(
%
|
[
a
-
z
]
{
1
4
}
)
?
)
|
"
(
[
^
"
]
*
)
"
?
|
'
(
[
^
'
]
*
)
'
?
|
(
[
^
\
s
\
/
!
\
(
\
)
]
+
)
|
(
!
(
.
*
)
?
)
/
;
let
start
=
0
;
let
m
;
while
(
(
m
=
reSplitCSS
.
exec
(
value
)
)
&
&
m
.
index
+
m
[
0
]
.
length
<
offset
)
{
value
=
value
.
substr
(
m
.
index
+
m
[
0
]
.
length
)
;
start
+
=
m
.
index
+
m
[
0
]
.
length
;
offset
-
=
m
.
index
+
m
[
0
]
.
length
;
}
if
(
!
m
)
{
return
null
;
}
let
type
;
if
(
m
[
1
]
)
{
type
=
"
url
"
;
}
else
if
(
m
[
2
]
)
{
type
=
"
rgb
"
;
}
else
if
(
m
[
3
]
)
{
type
=
"
hsl
"
;
}
else
if
(
m
[
4
]
)
{
type
=
"
hex
"
;
}
else
if
(
m
[
5
]
)
{
type
=
"
num
"
;
}
return
{
value
:
m
[
0
]
start
:
start
+
m
.
index
end
:
start
+
m
.
index
+
m
[
0
]
.
length
type
:
type
}
;
}
_incrementGenericValue
:
function
(
value
increment
offset
offsetEnd
info
)
{
let
start
end
;
if
(
/
^
-
?
[
0
-
9
.
]
/
.
test
(
value
.
substring
(
offset
offsetEnd
)
)
&
&
!
/
\
d
/
.
test
(
value
.
charAt
(
offset
-
1
)
+
value
.
charAt
(
offsetEnd
)
)
)
{
start
=
offset
;
end
=
offsetEnd
;
}
else
{
const
pattern
=
"
[
"
+
(
info
?
"
0
-
9
.
"
:
"
0
-
9
"
)
+
"
]
*
"
;
const
before
=
new
RegExp
(
pattern
+
"
"
)
.
exec
(
value
.
substr
(
0
offset
)
)
[
0
]
.
length
;
const
after
=
new
RegExp
(
"
^
"
+
pattern
)
.
exec
(
value
.
substr
(
offset
)
)
[
0
]
.
length
;
start
=
offset
-
before
;
end
=
offset
+
after
;
if
(
value
.
charAt
(
start
-
1
)
=
=
=
"
-
"
&
&
(
start
-
1
=
=
=
0
|
|
/
[
(
:
=
'
"
]
/
.
test
(
value
.
charAt
(
start
-
2
)
)
)
)
{
-
-
start
;
}
}
if
(
start
!
=
=
end
)
{
if
(
value
.
charAt
(
end
)
=
=
=
"
%
"
)
{
+
+
end
;
}
const
first
=
value
.
substr
(
0
start
)
;
let
mid
=
value
.
substring
(
start
end
)
;
const
last
=
value
.
substr
(
end
)
;
mid
=
this
.
_incrementRawValue
(
mid
increment
info
)
;
if
(
mid
!
=
=
null
)
{
return
{
value
:
first
+
mid
+
last
start
:
start
end
:
start
+
mid
.
length
}
;
}
}
return
null
;
}
_incrementRawValue
:
function
(
rawValue
increment
info
)
{
const
num
=
parseFloat
(
rawValue
)
;
if
(
isNaN
(
num
)
)
{
return
null
;
}
const
number
=
/
\
d
+
(
\
.
\
d
+
)
?
/
.
exec
(
rawValue
)
;
let
units
=
rawValue
.
substr
(
number
.
index
+
number
[
0
]
.
length
)
;
if
(
info
&
&
"
units
"
in
info
)
{
units
=
info
.
units
;
}
let
newValue
=
Math
.
round
(
(
num
+
increment
)
*
1000
)
/
1000
;
if
(
info
&
&
"
minValue
"
in
info
)
{
newValue
=
Math
.
max
(
newValue
info
.
minValue
)
;
}
if
(
info
&
&
"
maxValue
"
in
info
)
{
newValue
=
Math
.
min
(
newValue
info
.
maxValue
)
;
}
newValue
=
newValue
.
toString
(
)
;
return
newValue
+
units
;
}
_incHexColor
:
function
(
rawValue
increment
offset
offsetEnd
)
{
if
(
offsetEnd
>
rawValue
.
length
&
&
offset
>
=
rawValue
.
length
)
{
return
null
;
}
if
(
offset
<
1
&
&
offsetEnd
<
=
1
)
{
return
null
;
}
rawValue
=
rawValue
.
substr
(
1
)
;
-
-
offset
;
-
-
offsetEnd
;
offset
=
Math
.
max
(
offset
0
)
;
offsetEnd
=
Math
.
min
(
offsetEnd
rawValue
.
length
)
;
offsetEnd
=
Math
.
max
(
offsetEnd
offset
)
;
if
(
rawValue
.
length
=
=
=
3
)
{
rawValue
=
rawValue
.
charAt
(
0
)
+
rawValue
.
charAt
(
0
)
+
rawValue
.
charAt
(
1
)
+
rawValue
.
charAt
(
1
)
+
rawValue
.
charAt
(
2
)
+
rawValue
.
charAt
(
2
)
;
offset
*
=
2
;
offsetEnd
*
=
2
;
}
if
(
rawValue
.
length
=
=
=
4
)
{
rawValue
=
rawValue
.
charAt
(
0
)
+
rawValue
.
charAt
(
0
)
+
rawValue
.
charAt
(
1
)
+
rawValue
.
charAt
(
1
)
+
rawValue
.
charAt
(
2
)
+
rawValue
.
charAt
(
2
)
+
rawValue
.
charAt
(
3
)
+
rawValue
.
charAt
(
3
)
;
offset
*
=
2
;
offsetEnd
*
=
2
;
}
if
(
rawValue
.
length
!
=
=
6
&
&
rawValue
.
length
!
=
=
8
)
{
return
null
;
}
if
(
offset
=
=
=
offsetEnd
)
{
if
(
offset
=
=
=
0
)
{
offsetEnd
=
1
;
}
else
{
offset
=
offsetEnd
-
1
;
}
}
offset
-
=
offset
%
2
;
offsetEnd
+
=
offsetEnd
%
2
;
if
(
increment
>
-
1
&
&
increment
<
1
)
{
increment
=
increment
<
0
?
-
1
:
1
;
}
if
(
Math
.
abs
(
increment
)
=
=
=
10
)
{
increment
=
increment
<
0
?
-
16
:
16
;
}
const
isUpper
=
rawValue
.
toUpperCase
(
)
=
=
=
rawValue
;
for
(
let
pos
=
offset
;
pos
<
offsetEnd
;
pos
+
=
2
)
{
let
mid
=
rawValue
.
substr
(
pos
2
)
;
const
value
=
parseInt
(
mid
16
)
;
if
(
isNaN
(
value
)
)
{
return
null
;
}
mid
=
Math
.
min
(
Math
.
max
(
value
+
increment
0
)
255
)
.
toString
(
16
)
;
while
(
mid
.
length
<
2
)
{
mid
=
"
0
"
+
mid
;
}
if
(
isUpper
)
{
mid
=
mid
.
toUpperCase
(
)
;
}
rawValue
=
rawValue
.
substr
(
0
pos
)
+
mid
+
rawValue
.
substr
(
pos
+
2
)
;
}
return
{
value
:
"
#
"
+
rawValue
selection
:
[
offset
+
1
offsetEnd
+
1
]
}
;
}
_cycleCSSSuggestion
:
function
(
reverse
noSelect
)
{
const
{
label
preLabel
}
=
this
.
popup
.
selectedItem
|
|
{
label
:
"
"
preLabel
:
"
"
}
;
if
(
reverse
)
{
this
.
popup
.
selectPreviousItem
(
)
;
}
else
{
this
.
popup
.
selectNextItem
(
)
;
}
this
.
_selectedIndex
=
this
.
popup
.
selectedIndex
;
const
input
=
this
.
input
;
let
pre
=
"
"
;
if
(
input
.
selectionStart
<
input
.
selectionEnd
)
{
pre
=
input
.
value
.
slice
(
0
input
.
selectionStart
)
;
}
else
{
pre
=
input
.
value
.
slice
(
0
input
.
selectionStart
-
label
.
length
+
preLabel
.
length
)
;
}
const
post
=
input
.
value
.
slice
(
input
.
selectionEnd
input
.
value
.
length
)
;
const
item
=
this
.
popup
.
selectedItem
;
const
toComplete
=
item
.
label
.
slice
(
item
.
preLabel
.
length
)
;
input
.
value
=
pre
+
toComplete
+
post
;
if
(
!
noSelect
)
{
input
.
setSelectionRange
(
pre
.
length
pre
.
length
+
toComplete
.
length
)
;
}
else
{
input
.
setSelectionRange
(
pre
.
length
+
toComplete
.
length
pre
.
length
+
toComplete
.
length
)
;
}
this
.
_updateSize
(
)
;
this
.
emit
(
"
after
-
suggest
"
)
;
}
_apply
:
function
(
event
direction
)
{
if
(
this
.
_applied
)
{
return
null
;
}
this
.
_applied
=
true
;
if
(
this
.
done
)
{
const
val
=
this
.
cancelled
?
this
.
initial
:
this
.
currentInputValue
;
return
this
.
done
(
val
!
this
.
cancelled
direction
)
;
}
return
null
;
}
_onWindowBlur
:
function
(
)
{
if
(
this
.
popup
&
&
this
.
popup
.
isOpen
)
{
this
.
popup
.
hidePopup
(
)
;
}
if
(
this
.
_openPopupTimeout
)
{
this
.
doc
.
defaultView
.
clearTimeout
(
this
.
_openPopupTimeout
)
;
}
}
_onBlur
:
function
(
event
)
{
if
(
event
&
&
this
.
popup
&
&
this
.
popup
.
isOpen
&
&
this
.
popup
.
selectedIndex
>
=
0
)
{
this
.
_acceptPopupSuggestion
(
)
;
}
else
{
this
.
_apply
(
)
;
this
.
_clear
(
)
;
}
}
_getGridNamesBeforeCompletion
:
async
function
(
getGridLineNames
)
{
if
(
getGridLineNames
&
&
this
.
property
&
&
GRID_PROPERTY_NAMES
.
includes
(
this
.
property
.
name
)
)
{
this
.
gridLineNames
=
await
getGridLineNames
(
)
;
}
if
(
this
.
contentType
=
=
CONTENT_TYPES
.
CSS_VALUE
&
&
this
.
input
&
&
this
.
input
.
value
=
=
"
"
)
{
this
.
_maybeSuggestCompletion
(
false
)
;
}
}
_onAutocompletePopupClick
:
function
(
)
{
this
.
_acceptPopupSuggestion
(
)
;
}
_acceptPopupSuggestion
:
function
(
)
{
let
label
preLabel
;
if
(
this
.
_selectedIndex
=
=
=
undefined
)
{
(
{
label
preLabel
}
=
this
.
popup
.
getItemAtIndex
(
this
.
popup
.
selectedIndex
)
)
;
}
else
{
(
{
label
preLabel
}
=
this
.
popup
.
getItemAtIndex
(
this
.
_selectedIndex
)
)
;
}
const
input
=
this
.
input
;
let
pre
=
"
"
;
if
(
input
.
selectionStart
<
input
.
selectionEnd
|
|
this
.
contentType
!
=
=
CONTENT_TYPES
.
CSS_MIXED
)
{
pre
=
input
.
value
.
slice
(
0
input
.
selectionStart
)
;
}
else
{
pre
=
input
.
value
.
slice
(
0
input
.
selectionStart
-
label
.
length
+
preLabel
.
length
)
;
}
const
post
=
input
.
value
.
slice
(
input
.
selectionEnd
input
.
value
.
length
)
;
const
item
=
this
.
popup
.
selectedItem
;
this
.
_selectedIndex
=
this
.
popup
.
selectedIndex
;
const
toComplete
=
item
.
label
.
slice
(
item
.
preLabel
.
length
)
;
input
.
value
=
pre
+
toComplete
+
post
;
input
.
setSelectionRange
(
pre
.
length
+
toComplete
.
length
pre
.
length
+
toComplete
.
length
)
;
this
.
_updateSize
(
)
;
const
onPopupHidden
=
(
)
=
>
{
this
.
popup
.
off
(
"
popup
-
closed
"
onPopupHidden
)
;
this
.
doc
.
defaultView
.
setTimeout
(
(
)
=
>
{
input
.
focus
(
)
;
this
.
emit
(
"
after
-
suggest
"
)
;
}
0
)
;
}
;
this
.
popup
.
on
(
"
popup
-
closed
"
onPopupHidden
)
;
this
.
_hideAutocompletePopup
(
)
;
}
_onKeyPress
:
function
(
event
)
{
let
prevent
=
false
;
const
key
=
event
.
keyCode
;
const
input
=
this
.
input
;
this
.
_pressedKey
=
event
.
key
;
const
multilineNavigation
=
!
this
.
_isSingleLine
(
)
&
&
isKeyIn
(
key
"
UP
"
"
DOWN
"
"
LEFT
"
"
RIGHT
"
)
;
const
isPlainText
=
this
.
contentType
=
=
CONTENT_TYPES
.
PLAIN_TEXT
;
const
isPopupOpen
=
this
.
popup
&
&
this
.
popup
.
isOpen
;
let
increment
=
0
;
if
(
!
isPlainText
&
&
!
multilineNavigation
)
{
increment
=
this
.
_getIncrement
(
event
)
;
}
if
(
isKeyIn
(
key
"
PAGE_UP
"
"
PAGE_DOWN
"
)
)
{
this
.
_preventSuggestions
=
true
;
}
let
cycling
=
false
;
if
(
increment
&
&
this
.
_incrementValue
(
increment
)
)
{
this
.
_updateSize
(
)
;
prevent
=
true
;
cycling
=
true
;
}
if
(
isPopupOpen
&
&
isKeyIn
(
key
"
UP
"
"
DOWN
"
"
PAGE_UP
"
"
PAGE_DOWN
"
)
)
{
prevent
=
true
;
cycling
=
true
;
this
.
_cycleCSSSuggestion
(
isKeyIn
(
key
"
UP
"
"
PAGE_UP
"
)
)
;
this
.
_doValidation
(
)
;
}
if
(
isKeyIn
(
key
"
BACK_SPACE
"
"
DELETE
"
"
LEFT
"
"
RIGHT
"
"
HOME
"
"
END
"
)
)
{
if
(
isPopupOpen
&
&
this
.
currentInputValue
!
=
=
"
"
)
{
this
.
_hideAutocompletePopup
(
)
;
}
}
else
if
(
(
event
.
key
=
=
=
"
"
&
&
event
.
ctrlKey
)
|
|
(
!
cycling
&
&
!
multilineNavigation
&
&
!
event
.
metaKey
&
&
!
event
.
altKey
&
&
!
event
.
ctrlKey
)
)
{
this
.
_maybeSuggestCompletion
(
true
)
;
}
if
(
this
.
multiline
&
&
event
.
shiftKey
&
&
isKeyIn
(
key
"
RETURN
"
)
)
{
prevent
=
false
;
}
else
if
(
this
.
_advanceChars
(
event
.
charCode
input
.
value
input
.
selectionStart
)
|
|
isKeyIn
(
key
"
RETURN
"
"
TAB
"
)
)
{
prevent
=
true
;
let
direction
;
if
(
(
this
.
stopOnReturn
&
&
isKeyIn
(
key
"
RETURN
"
)
)
|
|
(
this
.
stopOnTab
&
&
!
event
.
shiftKey
&
&
isKeyIn
(
key
"
TAB
"
)
)
|
|
(
this
.
stopOnShiftTab
&
&
event
.
shiftKey
&
&
isKeyIn
(
key
"
TAB
"
)
)
)
{
direction
=
null
;
}
else
if
(
event
.
shiftKey
&
&
isKeyIn
(
key
"
TAB
"
)
)
{
direction
=
FOCUS_BACKWARD
;
}
else
{
direction
=
FOCUS_FORWARD
;
}
this
.
_preventSuggestions
=
true
;
if
(
this
.
contentType
=
=
CONTENT_TYPES
.
CSS_PROPERTY
&
&
direction
=
=
FOCUS_FORWARD
)
{
this
.
_preventSuggestions
=
false
;
}
if
(
isKeyIn
(
key
"
TAB
"
)
&
&
this
.
contentType
=
=
CONTENT_TYPES
.
CSS_MIXED
)
{
if
(
this
.
popup
&
&
input
.
selectionStart
<
input
.
selectionEnd
)
{
event
.
preventDefault
(
)
;
input
.
setSelectionRange
(
input
.
selectionEnd
input
.
selectionEnd
)
;
this
.
emit
(
"
after
-
suggest
"
)
;
return
;
}
else
if
(
this
.
popup
&
&
this
.
popup
.
isOpen
)
{
event
.
preventDefault
(
)
;
this
.
_cycleCSSSuggestion
(
event
.
shiftKey
true
)
;
return
;
}
}
this
.
_apply
(
event
direction
)
;
if
(
this
.
popup
&
&
this
.
popup
.
isOpen
)
{
this
.
_hideAutocompletePopup
(
)
;
}
if
(
direction
!
=
=
null
&
&
focusManager
.
focusedElement
=
=
=
input
)
{
const
next
=
moveFocus
(
this
.
doc
.
defaultView
direction
)
;
if
(
next
&
&
next
.
ownerDocument
=
=
=
this
.
doc
&
&
next
.
_editable
)
{
const
e
=
this
.
doc
.
createEvent
(
"
Event
"
)
;
e
.
initEvent
(
next
.
_trigger
true
true
)
;
next
.
dispatchEvent
(
e
)
;
}
}
this
.
_clear
(
)
;
}
else
if
(
isKeyIn
(
key
"
ESCAPE
"
)
)
{
this
.
_preventSuggestions
=
true
;
if
(
this
.
popup
&
&
this
.
popup
.
isOpen
)
{
this
.
_hideAutocompletePopup
(
)
;
}
prevent
=
true
;
this
.
cancelled
=
true
;
this
.
_apply
(
)
;
this
.
_clear
(
)
;
event
.
stopPropagation
(
)
;
}
else
if
(
isKeyIn
(
key
"
SPACE
"
)
)
{
prevent
=
!
input
.
value
;
}
if
(
prevent
)
{
event
.
preventDefault
(
)
;
}
}
_onContextMenu
:
function
(
event
)
{
if
(
this
.
contextMenu
)
{
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
this
.
contextMenu
(
event
)
;
}
}
_openAutocompletePopup
:
function
(
offset
selectedIndex
)
{
this
.
popup
.
on
(
"
popup
-
click
"
this
.
_onAutocompletePopupClick
)
;
this
.
popup
.
openPopup
(
this
.
input
offset
0
selectedIndex
)
;
}
_hideAutocompletePopup
:
function
(
)
{
this
.
popup
.
off
(
"
popup
-
click
"
this
.
_onAutocompletePopupClick
)
;
this
.
popup
.
hidePopup
(
)
;
}
_getIncrement
:
function
(
event
)
{
const
getSmallIncrementKey
=
evt
=
>
{
if
(
AppConstants
.
platform
=
=
=
"
macosx
"
)
{
return
evt
.
altKey
;
}
return
evt
.
ctrlKey
;
}
;
const
largeIncrement
=
100
;
const
mediumIncrement
=
10
;
const
smallIncrement
=
0
.
1
;
let
increment
=
0
;
const
key
=
event
.
keyCode
;
if
(
isKeyIn
(
key
"
UP
"
"
PAGE_UP
"
)
)
{
increment
=
1
*
this
.
defaultIncrement
;
}
else
if
(
isKeyIn
(
key
"
DOWN
"
"
PAGE_DOWN
"
)
)
{
increment
=
-
1
*
this
.
defaultIncrement
;
}
if
(
event
.
shiftKey
&
&
!
getSmallIncrementKey
(
event
)
)
{
if
(
isKeyIn
(
key
"
PAGE_UP
"
"
PAGE_DOWN
"
)
)
{
increment
*
=
largeIncrement
;
}
else
{
increment
*
=
mediumIncrement
;
}
}
else
if
(
getSmallIncrementKey
(
event
)
&
&
!
event
.
shiftKey
)
{
increment
*
=
smallIncrement
;
}
return
increment
;
}
_onKeyup
:
function
(
)
{
this
.
_applied
=
false
;
}
_onInput
:
function
(
)
{
this
.
_doValidation
(
)
;
if
(
this
.
_measurement
)
{
this
.
_updateSize
(
)
;
}
if
(
this
.
change
)
{
this
.
change
(
this
.
currentInputValue
)
;
}
if
(
this
.
currentInputValue
=
=
=
"
"
&
&
this
.
showSuggestCompletionOnEmpty
)
{
this
.
_maybeSuggestCompletion
(
false
)
;
}
}
_stopEventPropagation
:
function
(
e
)
{
e
.
stopPropagation
(
)
;
}
_doValidation
:
function
(
)
{
if
(
this
.
validate
&
&
this
.
input
)
{
this
.
validate
(
this
.
input
.
value
)
;
}
}
_maybeSuggestCompletion
:
function
(
autoInsert
)
{
if
(
!
this
.
input
)
{
return
;
}
const
preTimeoutQuery
=
this
.
input
.
value
;
this
.
_openPopupTimeout
=
this
.
doc
.
defaultView
.
setTimeout
(
(
)
=
>
{
if
(
this
.
_preventSuggestions
)
{
this
.
_preventSuggestions
=
false
;
return
;
}
if
(
this
.
contentType
=
=
CONTENT_TYPES
.
PLAIN_TEXT
)
{
return
;
}
if
(
!
this
.
input
)
{
return
;
}
const
input
=
this
.
input
;
if
(
input
.
value
.
length
-
preTimeoutQuery
.
length
>
1
)
{
return
;
}
const
query
=
input
.
value
.
slice
(
0
input
.
selectionStart
)
;
let
startCheckQuery
=
query
;
if
(
query
=
=
null
)
{
return
;
}
if
(
input
.
selectionStart
=
=
input
.
selectionEnd
&
&
input
.
selectionStart
<
input
.
value
.
length
)
{
const
nextChar
=
input
.
value
.
slice
(
input
.
selectionStart
)
[
0
]
;
if
(
/
[
\
w
-
]
/
.
test
(
nextChar
)
)
{
this
.
emit
(
"
after
-
suggest
"
"
nothing
to
autocomplete
"
)
;
return
;
}
}
let
list
=
[
]
;
let
postLabelValues
=
[
]
;
if
(
this
.
contentType
=
=
CONTENT_TYPES
.
CSS_PROPERTY
)
{
list
=
this
.
_getCSSPropertyList
(
)
;
}
else
if
(
this
.
contentType
=
=
CONTENT_TYPES
.
CSS_VALUE
)
{
const
match
=
/
(
[
^
\
s
.
\
/
]
+
)
/
.
exec
(
query
)
;
if
(
match
)
{
startCheckQuery
=
match
[
0
]
;
}
else
{
startCheckQuery
=
"
"
;
}
const
varMatch
=
/
^
var
\
(
(
[
^
\
s
]
+
)
/
.
exec
(
startCheckQuery
)
;
if
(
varMatch
&
&
varMatch
.
length
=
=
2
)
{
startCheckQuery
=
varMatch
[
1
]
;
list
=
this
.
_getCSSVariableNames
(
)
;
postLabelValues
=
list
.
map
(
varName
=
>
this
.
_getCSSVariableValue
(
varName
)
)
;
}
else
{
list
=
[
"
!
important
"
.
.
.
this
.
_getCSSValuesForPropertyName
(
this
.
property
.
name
)
]
;
}
if
(
query
=
=
"
"
)
{
list
.
splice
(
0
1
)
;
}
}
else
if
(
this
.
contentType
=
=
CONTENT_TYPES
.
CSS_MIXED
&
&
/
^
\
s
*
style
\
s
*
=
/
.
test
(
query
)
)
{
const
styleValue
=
query
.
replace
(
/
^
\
s
*
style
\
s
*
=
\
s
*
/
"
"
)
;
if
(
/
^
(
"
[
^
"
]
*
"
|
'
[
^
'
]
*
'
)
/
.
test
(
styleValue
)
)
{
this
.
emit
(
"
after
-
suggest
"
"
nothing
to
autocomplete
"
)
;
return
;
}
const
match
=
query
.
match
(
/
(
[
:
;
"
'
=
]
?
)
\
s
*
(
[
^
"
'
;
:
=
]
+
)
?
/
)
;
if
(
match
&
&
match
.
length
>
=
2
)
{
if
(
match
[
1
]
=
=
"
:
"
)
{
const
propertyName
=
query
.
match
(
/
[
;
"
'
=
]
\
s
*
(
[
^
"
'
;
:
=
]
+
)
\
s
*
:
\
s
*
[
^
"
'
;
:
=
]
*
/
)
[
1
]
;
list
=
[
"
!
important
;
"
.
.
.
this
.
_getCSSValuesForPropertyName
(
propertyName
)
]
;
const
matchLastQuery
=
/
(
[
^
\
s
.
\
/
]
+
)
/
.
exec
(
match
[
2
]
|
|
"
"
)
;
if
(
matchLastQuery
)
{
startCheckQuery
=
matchLastQuery
[
0
]
;
}
else
{
startCheckQuery
=
"
"
;
}
if
(
!
match
[
2
]
)
{
list
.
splice
(
0
1
)
;
}
}
else
if
(
match
[
1
]
)
{
list
=
this
.
_getCSSPropertyList
(
)
;
startCheckQuery
=
match
[
2
]
;
}
if
(
startCheckQuery
=
=
null
)
{
this
.
emit
(
"
after
-
suggest
"
"
nothing
to
autocomplete
"
)
;
return
;
}
}
}
if
(
!
this
.
popup
)
{
this
.
emit
(
"
after
-
suggest
"
"
no
popup
"
)
;
return
;
}
const
finalList
=
[
]
;
const
length
=
list
.
length
;
for
(
let
i
=
0
count
=
0
;
i
<
length
&
&
count
<
MAX_POPUP_ENTRIES
;
i
+
+
)
{
if
(
startCheckQuery
!
=
null
&
&
list
[
i
]
.
startsWith
(
startCheckQuery
)
)
{
count
+
+
;
finalList
.
push
(
{
preLabel
:
startCheckQuery
label
:
list
[
i
]
postLabel
:
postLabelValues
[
i
]
?
postLabelValues
[
i
]
:
"
"
}
)
;
}
else
if
(
count
>
0
)
{
break
;
}
else
if
(
startCheckQuery
!
=
null
&
&
list
[
i
]
[
0
]
>
startCheckQuery
[
0
]
)
{
break
;
}
}
finalList
.
sort
(
(
item1
item2
)
=
>
{
let
comparison
=
item1
.
label
.
localeCompare
(
item2
.
label
)
;
if
(
/
^
\
w
/
.
test
(
item1
.
label
)
!
=
/
^
\
w
/
.
test
(
item2
.
label
)
)
{
comparison
=
-
1
*
comparison
;
}
return
comparison
;
}
)
;
let
index
=
0
;
if
(
startCheckQuery
)
{
const
cssValues
=
finalList
.
map
(
item
=
>
item
.
label
)
;
index
=
findMostRelevantCssPropertyIndex
(
cssValues
)
;
}
if
(
autoInsert
&
&
finalList
[
index
]
)
{
const
item
=
finalList
[
index
]
.
label
;
input
.
value
=
query
+
item
.
slice
(
startCheckQuery
.
length
)
+
input
.
value
.
slice
(
query
.
length
)
;
input
.
setSelectionRange
(
query
.
length
query
.
length
+
item
.
length
-
startCheckQuery
.
length
)
;
this
.
_updateSize
(
)
;
}
if
(
finalList
.
length
>
1
)
{
const
indent
=
this
.
input
.
selectionStart
-
startCheckQuery
.
length
;
let
offset
=
indent
*
this
.
inputCharDimensions
.
width
;
offset
=
this
.
_isSingleLine
(
)
?
offset
:
0
;
const
selectedIndex
=
autoInsert
?
index
:
-
1
;
this
.
popup
.
setItems
(
finalList
selectedIndex
)
;
this
.
_openAutocompletePopup
(
offset
selectedIndex
)
;
}
else
{
this
.
_hideAutocompletePopup
(
)
;
}
this
.
_autocloseParenthesis
(
)
;
this
.
emit
(
"
after
-
suggest
"
)
;
this
.
_doValidation
(
)
;
}
0
)
;
}
_autocloseParenthesis
:
function
(
)
{
const
parts
=
this
.
_splitStringAt
(
this
.
input
.
value
this
.
input
.
selectionStart
)
;
const
nextChar
=
parts
[
1
]
[
0
]
;
if
(
this
.
_pressedKey
=
=
"
(
"
&
&
!
isWordChar
(
nextChar
)
)
{
this
.
_updateValue
(
parts
[
0
]
+
"
)
"
+
parts
[
1
]
)
;
}
if
(
this
.
_pressedKey
=
=
"
)
"
&
&
nextChar
=
=
"
)
"
)
{
this
.
_updateValue
(
parts
[
0
]
+
parts
[
1
]
.
substring
(
1
)
)
;
}
this
.
_pressedKey
=
null
;
}
_updateValue
:
function
(
str
)
{
const
start
=
this
.
input
.
selectionStart
;
this
.
input
.
value
=
str
;
this
.
input
.
setSelectionRange
(
start
start
)
;
this
.
_updateSize
(
)
;
}
_splitStringAt
:
function
(
str
index
)
{
return
[
str
.
substring
(
0
index
)
str
.
substring
(
index
str
.
length
)
]
;
}
_isSingleLine
:
function
(
)
{
if
(
!
this
.
multiline
)
{
return
true
;
}
const
inputRect
=
this
.
input
.
getBoundingClientRect
(
)
;
return
inputRect
.
height
<
2
*
this
.
inputCharDimensions
.
height
;
}
_getCSSPropertyList
:
function
(
)
{
return
this
.
cssProperties
.
getNames
(
)
.
sort
(
)
;
}
_getCSSValuesForPropertyName
:
function
(
propertyName
)
{
const
gridLineList
=
[
]
;
if
(
this
.
gridLineNames
)
{
if
(
GRID_ROW_PROPERTY_NAMES
.
includes
(
this
.
property
.
name
)
)
{
gridLineList
.
push
(
.
.
.
this
.
gridLineNames
.
rows
)
;
}
if
(
GRID_COL_PROPERTY_NAMES
.
includes
(
this
.
property
.
name
)
)
{
gridLineList
.
push
(
.
.
.
this
.
gridLineNames
.
cols
)
;
}
}
return
gridLineList
.
concat
(
this
.
cssProperties
.
getValues
(
propertyName
)
)
.
sort
(
)
;
}
_getCSSVariableNames
:
function
(
)
{
return
Array
.
from
(
this
.
cssVariables
.
keys
(
)
)
.
sort
(
)
;
}
_getCSSVariableValue
:
function
(
varName
)
{
return
this
.
cssVariables
.
get
(
varName
)
;
}
}
;
function
copyTextStyles
(
from
to
)
{
const
win
=
from
.
ownerDocument
.
defaultView
;
const
style
=
win
.
getComputedStyle
(
from
)
;
to
.
style
.
fontFamily
=
style
.
fontFamily
;
to
.
style
.
fontSize
=
style
.
fontSize
;
to
.
style
.
fontWeight
=
style
.
fontWeight
;
to
.
style
.
fontStyle
=
style
.
fontStyle
;
}
function
copyAllStyles
(
from
to
)
{
const
win
=
from
.
ownerDocument
.
defaultView
;
const
style
=
win
.
getComputedStyle
(
from
)
;
copyTextStyles
(
from
to
)
;
to
.
style
.
lineHeight
=
style
.
lineHeight
;
const
boxSizing
=
style
.
boxSizing
;
if
(
boxSizing
=
=
=
"
border
-
box
"
)
{
to
.
style
.
boxSizing
=
boxSizing
;
copyBoxModelStyles
(
from
to
)
;
}
}
function
copyBoxModelStyles
(
from
to
)
{
const
properties
=
[
"
paddingTop
"
"
paddingRight
"
"
paddingBottom
"
"
paddingLeft
"
"
borderTopStyle
"
"
borderRightStyle
"
"
borderBottomStyle
"
"
borderLeftStyle
"
"
borderTopWidth
"
"
borderRightWidth
"
"
borderBottomWidth
"
"
borderLeftWidth
"
]
;
const
win
=
from
.
ownerDocument
.
defaultView
;
const
style
=
win
.
getComputedStyle
(
from
)
;
for
(
const
property
of
properties
)
{
to
.
style
[
property
]
=
style
[
property
]
;
}
}
function
moveFocus
(
win
direction
)
{
return
focusManager
.
moveFocus
(
win
null
direction
0
)
;
}
