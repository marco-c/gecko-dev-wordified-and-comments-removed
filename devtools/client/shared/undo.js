"
use
strict
"
;
function
UndoStack
(
maxUndo
)
{
this
.
maxUndo
=
maxUndo
|
|
50
;
this
.
_stack
=
[
]
;
}
exports
.
UndoStack
=
UndoStack
;
UndoStack
.
prototype
=
{
_index
:
0
_batchDepth
:
0
destroy
:
function
(
)
{
this
.
uninstallController
(
)
;
delete
this
.
_stack
;
}
startBatch
:
function
(
)
{
if
(
this
.
_batchDepth
+
+
=
=
=
0
)
{
this
.
_batch
=
[
]
;
}
}
endBatch
:
function
(
)
{
if
(
-
-
this
.
_batchDepth
>
0
)
{
return
;
}
const
start
=
Math
.
max
(
this
.
_index
+
1
-
this
.
maxUndo
0
)
;
this
.
_stack
=
this
.
_stack
.
slice
(
start
this
.
_index
)
;
const
batch
=
this
.
_batch
;
delete
this
.
_batch
;
const
entry
=
{
do
:
function
(
)
{
for
(
const
item
of
batch
)
{
item
.
do
(
)
;
}
}
undo
:
function
(
)
{
for
(
let
i
=
batch
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
batch
[
i
]
.
undo
(
)
;
}
}
}
;
this
.
_stack
.
push
(
entry
)
;
this
.
_index
=
this
.
_stack
.
length
;
entry
.
do
(
)
;
this
.
_change
(
)
;
}
do
:
function
(
toDo
undo
)
{
this
.
startBatch
(
)
;
this
.
_batch
.
push
(
{
do
:
toDo
undo
}
)
;
this
.
endBatch
(
)
;
}
canUndo
:
function
(
)
{
return
this
.
_index
>
0
;
}
undo
:
function
(
)
{
if
(
!
this
.
canUndo
(
)
)
{
return
false
;
}
this
.
_stack
[
-
-
this
.
_index
]
.
undo
(
)
;
this
.
_change
(
)
;
return
true
;
}
canRedo
:
function
(
)
{
return
this
.
_stack
.
length
>
this
.
_index
;
}
redo
:
function
(
)
{
if
(
!
this
.
canRedo
(
)
)
{
return
false
;
}
this
.
_stack
[
this
.
_index
+
+
]
.
do
(
)
;
this
.
_change
(
)
;
return
true
;
}
_change
:
function
(
)
{
if
(
this
.
_controllerWindow
)
{
this
.
_controllerWindow
.
goUpdateCommand
(
"
cmd_undo
"
)
;
this
.
_controllerWindow
.
goUpdateCommand
(
"
cmd_redo
"
)
;
}
}
installController
:
function
(
controllerWindow
)
{
const
controllers
=
controllerWindow
.
controllers
;
if
(
!
controllers
|
|
!
controllers
.
appendController
)
{
return
;
}
this
.
_controllerWindow
=
controllerWindow
;
controllers
.
appendController
(
this
)
;
}
uninstallController
:
function
(
)
{
if
(
!
this
.
_controllerWindow
)
{
return
;
}
this
.
_controllerWindow
.
controllers
.
removeController
(
this
)
;
}
supportsCommand
:
function
(
command
)
{
return
command
=
=
"
cmd_undo
"
|
|
command
=
=
"
cmd_redo
"
;
}
isCommandEnabled
:
function
(
command
)
{
switch
(
command
)
{
case
"
cmd_undo
"
:
return
this
.
canUndo
(
)
;
case
"
cmd_redo
"
:
return
this
.
canRedo
(
)
;
}
return
false
;
}
doCommand
:
function
(
command
)
{
switch
(
command
)
{
case
"
cmd_undo
"
:
return
this
.
undo
(
)
;
case
"
cmd_redo
"
:
return
this
.
redo
(
)
;
default
:
return
null
;
}
}
onEvent
:
function
(
event
)
{
}
}
;
