"
use
strict
"
;
var
Services
=
require
(
"
Services
"
)
;
var
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
exports
.
viewSourceInStyleEditor
=
async
function
(
toolbox
sourceURL
sourceLine
sourceColumn
)
{
const
panel
=
await
toolbox
.
loadTool
(
"
styleeditor
"
)
;
try
{
await
panel
.
selectStyleSheet
(
sourceURL
sourceLine
sourceColumn
)
;
await
toolbox
.
selectTool
(
"
styleeditor
"
)
;
return
true
;
}
catch
(
e
)
{
exports
.
viewSource
(
toolbox
sourceURL
sourceLine
)
;
return
false
;
}
}
;
exports
.
viewSourceInDebugger
=
async
function
(
toolbox
sourceURL
sourceLine
sourceId
reason
=
"
unknown
"
)
{
const
dbg
=
await
toolbox
.
loadTool
(
"
jsdebugger
"
)
;
const
source
=
sourceId
?
dbg
.
getSourceByActorId
(
sourceId
)
:
dbg
.
getSourceByURL
(
sourceURL
)
;
if
(
source
)
{
await
toolbox
.
selectTool
(
"
jsdebugger
"
reason
)
;
try
{
await
dbg
.
selectSource
(
source
.
id
sourceLine
)
;
}
catch
(
err
)
{
console
.
error
(
"
Failed
to
view
source
in
debugger
"
err
)
;
return
false
;
}
return
true
;
}
else
if
(
await
toolbox
.
sourceMapService
.
hasOriginalURL
(
sourceURL
)
)
{
await
toolbox
.
selectTool
(
"
jsdebugger
"
reason
)
;
try
{
await
dbg
.
selectSourceURL
(
sourceURL
sourceLine
)
;
}
catch
(
err
)
{
console
.
error
(
"
Failed
to
view
source
in
debugger
"
err
)
;
return
false
;
}
return
true
;
}
exports
.
viewSource
(
toolbox
sourceURL
sourceLine
)
;
return
false
;
}
;
exports
.
viewSourceInScratchpad
=
async
function
(
sourceURL
sourceLine
)
{
for
(
const
win
of
Services
.
wm
.
getEnumerator
(
"
devtools
:
scratchpad
"
)
)
{
if
(
!
win
.
closed
&
&
win
.
Scratchpad
.
uniqueName
=
=
=
sourceURL
)
{
win
.
focus
(
)
;
win
.
Scratchpad
.
editor
.
setCursor
(
{
line
:
sourceLine
ch
:
0
}
)
;
return
;
}
}
for
(
const
toolbox
of
gDevTools
.
getToolboxes
(
)
)
{
const
scratchpadPanel
=
toolbox
.
getPanel
(
"
scratchpad
"
)
;
if
(
scratchpadPanel
)
{
const
{
scratchpad
}
=
scratchpadPanel
;
if
(
scratchpad
.
uniqueName
=
=
=
sourceURL
)
{
toolbox
.
selectTool
(
"
scratchpad
"
)
;
toolbox
.
raise
(
)
;
scratchpad
.
editor
.
focus
(
)
;
scratchpad
.
editor
.
setCursor
(
{
line
:
sourceLine
ch
:
0
}
)
;
return
;
}
}
}
}
;
exports
.
viewSource
=
async
function
(
toolbox
sourceURL
sourceLine
)
{
const
utils
=
toolbox
.
gViewSourceUtils
;
utils
.
viewSource
(
{
URL
:
sourceURL
lineNumber
:
sourceLine
|
|
0
}
)
;
}
;
