"
use
strict
"
;
exports
.
viewSourceInStyleEditor
=
async
function
(
toolbox
stylesheetFrontOrGeneratedURL
generatedLine
generatedColumn
)
{
const
panel
=
await
toolbox
.
loadTool
(
"
styleeditor
"
)
;
let
stylesheetFront
;
if
(
typeof
stylesheetFrontOrGeneratedURL
=
=
=
"
string
"
)
{
stylesheetFront
=
panel
.
getStylesheetFrontForGeneratedURL
(
stylesheetFrontOrGeneratedURL
)
;
}
else
{
stylesheetFront
=
stylesheetFrontOrGeneratedURL
;
}
const
originalLocation
=
stylesheetFront
?
await
getOriginalLocation
(
toolbox
stylesheetFront
.
actorID
generatedLine
generatedColumn
)
:
null
;
try
{
if
(
originalLocation
)
{
await
panel
.
selectOriginalSheet
(
originalLocation
.
sourceId
originalLocation
.
line
originalLocation
.
column
)
;
await
toolbox
.
selectTool
(
"
styleeditor
"
)
;
return
true
;
}
else
if
(
stylesheetFront
)
{
await
panel
.
selectStyleSheet
(
stylesheetFront
generatedLine
generatedColumn
)
;
await
toolbox
.
selectTool
(
"
styleeditor
"
)
;
return
true
;
}
}
catch
(
e
)
{
console
.
error
(
"
Failed
to
view
source
in
style
editor
"
e
)
;
}
exports
.
viewSource
(
toolbox
typeof
stylesheetFrontOrGeneratedURL
=
=
=
"
string
"
?
stylesheetFrontOrGeneratedURL
:
stylesheetFrontOrGeneratedURL
.
href
|
|
stylesheetFrontOrGeneratedURL
.
nodeHref
generatedLine
)
;
return
false
;
}
;
exports
.
viewSourceInDebugger
=
async
function
(
toolbox
generatedURL
generatedLine
generatedColumn
sourceActorId
reason
=
"
unknown
"
)
{
const
location
=
await
getViewSourceInDebuggerLocation
(
toolbox
generatedURL
generatedLine
generatedColumn
sourceActorId
)
;
if
(
location
)
{
const
{
id
line
column
}
=
location
;
const
dbg
=
await
toolbox
.
selectTool
(
"
jsdebugger
"
reason
)
;
try
{
await
dbg
.
selectSource
(
id
line
column
)
;
return
true
;
}
catch
(
err
)
{
console
.
error
(
"
Failed
to
view
source
in
debugger
"
err
)
;
}
}
exports
.
viewSource
(
toolbox
generatedURL
generatedLine
)
;
return
false
;
}
;
async
function
getViewSourceInDebuggerLocation
(
toolbox
generatedURL
generatedLine
generatedColumn
sourceActorId
)
{
const
dbg
=
await
toolbox
.
loadTool
(
"
jsdebugger
"
)
;
const
generatedSource
=
sourceActorId
?
dbg
.
getSourceByActorId
(
sourceActorId
)
:
dbg
.
getSourceByURL
(
generatedURL
)
;
if
(
!
generatedSource
|
|
dbg
.
getSourceActorsForSource
(
generatedSource
.
id
)
.
length
=
=
=
0
)
{
return
null
;
}
const
generatedLocation
=
{
id
:
generatedSource
.
id
line
:
generatedLine
column
:
generatedColumn
}
;
const
originalLocation
=
await
getOriginalLocation
(
toolbox
generatedLocation
.
id
generatedLocation
.
line
generatedLocation
.
column
)
;
if
(
!
originalLocation
)
{
return
generatedLocation
;
}
const
originalSource
=
dbg
.
getSource
(
originalLocation
.
sourceId
)
;
if
(
!
originalSource
)
{
return
generatedLocation
;
}
return
{
id
:
originalSource
.
id
line
:
originalLocation
.
line
column
:
originalLocation
.
column
}
;
}
async
function
getOriginalLocation
(
toolbox
generatedID
generatedLine
generatedColumn
)
{
if
(
typeof
generatedLine
!
=
=
"
number
"
)
{
return
null
;
}
let
originalLocation
=
null
;
try
{
originalLocation
=
await
toolbox
.
sourceMapService
.
getOriginalLocation
(
{
sourceId
:
generatedID
line
:
generatedLine
column
:
generatedColumn
}
)
;
if
(
originalLocation
&
&
originalLocation
.
sourceId
=
=
=
generatedID
)
{
originalLocation
=
null
;
}
}
catch
(
err
)
{
console
.
error
(
"
Failed
to
resolve
sourcemapped
location
for
the
given
source
location
"
{
generatedID
generatedLine
generatedColumn
}
err
)
;
}
return
originalLocation
;
}
exports
.
viewSource
=
async
function
(
toolbox
sourceURL
sourceLine
)
{
const
utils
=
toolbox
.
gViewSourceUtils
;
utils
.
viewSource
(
{
URL
:
sourceURL
lineNumber
:
sourceLine
|
|
0
}
)
;
}
;
