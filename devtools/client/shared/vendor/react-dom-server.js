(
function
(
global
factory
)
{
typeof
exports
=
=
=
'
object
'
&
&
typeof
module
!
=
=
'
undefined
'
?
module
.
exports
=
factory
(
require
(
'
devtools
/
client
/
shared
/
vendor
/
react
'
)
)
:
typeof
define
=
=
=
'
function
'
&
&
define
.
amd
?
define
(
[
'
devtools
/
client
/
shared
/
vendor
/
react
'
]
factory
)
:
(
global
.
ReactDOMServer
=
factory
(
global
.
React
)
)
;
}
(
this
(
function
(
React
)
{
'
use
strict
'
;
function
reactProdInvariant
(
code
)
{
var
argCount
=
arguments
.
length
-
1
;
var
message
=
'
Minified
React
error
#
'
+
code
+
'
;
visit
'
+
'
http
:
/
/
facebook
.
github
.
io
/
react
/
docs
/
error
-
decoder
.
html
?
invariant
=
'
+
code
;
for
(
var
argIdx
=
0
;
argIdx
<
argCount
;
argIdx
+
+
)
{
message
+
=
'
&
args
[
]
=
'
+
encodeURIComponent
(
arguments
[
argIdx
+
1
]
)
;
}
message
+
=
'
for
the
full
message
or
use
the
non
-
minified
dev
environment
'
+
'
for
full
errors
and
additional
helpful
warnings
.
'
;
var
error
=
new
Error
(
message
)
;
error
.
name
=
'
Invariant
Violation
'
;
error
.
framesToPop
=
1
;
throw
error
;
}
var
RESERVED_PROPS
=
{
children
:
true
dangerouslySetInnerHTML
:
true
defaultValue
:
true
defaultChecked
:
true
innerHTML
:
true
suppressContentEditableWarning
:
true
suppressHydrationWarning
:
true
style
:
true
}
;
function
checkMask
(
value
bitmask
)
{
return
(
value
&
bitmask
)
=
=
=
bitmask
;
}
var
DOMPropertyInjection
=
{
MUST_USE_PROPERTY
:
0x1
HAS_BOOLEAN_VALUE
:
0x4
HAS_NUMERIC_VALUE
:
0x8
HAS_POSITIVE_NUMERIC_VALUE
:
0x10
|
0x8
HAS_OVERLOADED_BOOLEAN_VALUE
:
0x20
HAS_STRING_BOOLEAN_VALUE
:
0x40
injectDOMPropertyConfig
:
function
(
domPropertyConfig
)
{
var
Injection
=
DOMPropertyInjection
;
var
Properties
=
domPropertyConfig
.
Properties
|
|
{
}
;
var
DOMAttributeNamespaces
=
domPropertyConfig
.
DOMAttributeNamespaces
|
|
{
}
;
var
DOMAttributeNames
=
domPropertyConfig
.
DOMAttributeNames
|
|
{
}
;
var
DOMMutationMethods
=
domPropertyConfig
.
DOMMutationMethods
|
|
{
}
;
for
(
var
propName
in
Properties
)
{
!
!
properties
.
hasOwnProperty
(
propName
)
?
reactProdInvariant
(
"
48
"
propName
)
:
void
0
;
var
lowerCased
=
propName
.
toLowerCase
(
)
;
var
propConfig
=
Properties
[
propName
]
;
var
propertyInfo
=
{
attributeName
:
lowerCased
attributeNamespace
:
null
propertyName
:
propName
mutationMethod
:
null
mustUseProperty
:
checkMask
(
propConfig
Injection
.
MUST_USE_PROPERTY
)
hasBooleanValue
:
checkMask
(
propConfig
Injection
.
HAS_BOOLEAN_VALUE
)
hasNumericValue
:
checkMask
(
propConfig
Injection
.
HAS_NUMERIC_VALUE
)
hasPositiveNumericValue
:
checkMask
(
propConfig
Injection
.
HAS_POSITIVE_NUMERIC_VALUE
)
hasOverloadedBooleanValue
:
checkMask
(
propConfig
Injection
.
HAS_OVERLOADED_BOOLEAN_VALUE
)
hasStringBooleanValue
:
checkMask
(
propConfig
Injection
.
HAS_STRING_BOOLEAN_VALUE
)
}
;
!
(
propertyInfo
.
hasBooleanValue
+
propertyInfo
.
hasNumericValue
+
propertyInfo
.
hasOverloadedBooleanValue
<
=
1
)
?
reactProdInvariant
(
"
50
"
propName
)
:
void
0
;
if
(
DOMAttributeNames
.
hasOwnProperty
(
propName
)
)
{
var
attributeName
=
DOMAttributeNames
[
propName
]
;
propertyInfo
.
attributeName
=
attributeName
;
}
if
(
DOMAttributeNamespaces
.
hasOwnProperty
(
propName
)
)
{
propertyInfo
.
attributeNamespace
=
DOMAttributeNamespaces
[
propName
]
;
}
if
(
DOMMutationMethods
.
hasOwnProperty
(
propName
)
)
{
propertyInfo
.
mutationMethod
=
DOMMutationMethods
[
propName
]
;
}
properties
[
propName
]
=
propertyInfo
;
}
}
}
;
var
ATTRIBUTE_NAME_START_CHAR
=
"
:
A
-
Z_a
-
z
\
\
u00C0
-
\
\
u00D6
\
\
u00D8
-
\
\
u00F6
\
\
u00F8
-
\
\
u02FF
\
\
u0370
-
\
\
u037D
\
\
u037F
-
\
\
u1FFF
\
\
u200C
-
\
\
u200D
\
\
u2070
-
\
\
u218F
\
\
u2C00
-
\
\
u2FEF
\
\
u3001
-
\
\
uD7FF
\
\
uF900
-
\
\
uFDCF
\
\
uFDF0
-
\
\
uFFFD
"
;
var
ATTRIBUTE_NAME_CHAR
=
ATTRIBUTE_NAME_START_CHAR
+
"
\
\
-
.
0
-
9
\
\
u00B7
\
\
u0300
-
\
\
u036F
\
\
u203F
-
\
\
u2040
"
;
var
ROOT_ATTRIBUTE_NAME
=
'
data
-
reactroot
'
;
var
properties
=
{
}
;
function
shouldSetAttribute
(
name
value
)
{
if
(
isReservedProp
(
name
)
)
{
return
false
;
}
if
(
name
.
length
>
2
&
&
(
name
[
0
]
=
=
=
'
o
'
|
|
name
[
0
]
=
=
=
'
O
'
)
&
&
(
name
[
1
]
=
=
=
'
n
'
|
|
name
[
1
]
=
=
=
'
N
'
)
)
{
return
false
;
}
if
(
value
=
=
=
null
)
{
return
true
;
}
switch
(
typeof
value
)
{
case
'
boolean
'
:
return
shouldAttributeAcceptBooleanValue
(
name
)
;
case
'
undefined
'
:
case
'
number
'
:
case
'
string
'
:
case
'
object
'
:
return
true
;
default
:
return
false
;
}
}
function
getPropertyInfo
(
name
)
{
return
properties
.
hasOwnProperty
(
name
)
?
properties
[
name
]
:
null
;
}
function
shouldAttributeAcceptBooleanValue
(
name
)
{
if
(
isReservedProp
(
name
)
)
{
return
true
;
}
var
propertyInfo
=
getPropertyInfo
(
name
)
;
if
(
propertyInfo
)
{
return
propertyInfo
.
hasBooleanValue
|
|
propertyInfo
.
hasStringBooleanValue
|
|
propertyInfo
.
hasOverloadedBooleanValue
;
}
var
prefix
=
name
.
toLowerCase
(
)
.
slice
(
0
5
)
;
return
prefix
=
=
=
'
data
-
'
|
|
prefix
=
=
=
'
aria
-
'
;
}
function
isReservedProp
(
name
)
{
return
RESERVED_PROPS
.
hasOwnProperty
(
name
)
;
}
var
injection
=
DOMPropertyInjection
;
var
MUST_USE_PROPERTY
=
injection
.
MUST_USE_PROPERTY
;
var
HAS_BOOLEAN_VALUE
=
injection
.
HAS_BOOLEAN_VALUE
;
var
HAS_NUMERIC_VALUE
=
injection
.
HAS_NUMERIC_VALUE
;
var
HAS_POSITIVE_NUMERIC_VALUE
=
injection
.
HAS_POSITIVE_NUMERIC_VALUE
;
var
HAS_OVERLOADED_BOOLEAN_VALUE
=
injection
.
HAS_OVERLOADED_BOOLEAN_VALUE
;
var
HAS_STRING_BOOLEAN_VALUE
=
injection
.
HAS_STRING_BOOLEAN_VALUE
;
var
HTMLDOMPropertyConfig
=
{
Properties
:
{
allowFullScreen
:
HAS_BOOLEAN_VALUE
async
:
HAS_BOOLEAN_VALUE
autoFocus
:
HAS_BOOLEAN_VALUE
autoPlay
:
HAS_BOOLEAN_VALUE
capture
:
HAS_OVERLOADED_BOOLEAN_VALUE
checked
:
MUST_USE_PROPERTY
|
HAS_BOOLEAN_VALUE
cols
:
HAS_POSITIVE_NUMERIC_VALUE
contentEditable
:
HAS_STRING_BOOLEAN_VALUE
controls
:
HAS_BOOLEAN_VALUE
'
default
'
:
HAS_BOOLEAN_VALUE
defer
:
HAS_BOOLEAN_VALUE
disabled
:
HAS_BOOLEAN_VALUE
download
:
HAS_OVERLOADED_BOOLEAN_VALUE
draggable
:
HAS_STRING_BOOLEAN_VALUE
formNoValidate
:
HAS_BOOLEAN_VALUE
hidden
:
HAS_BOOLEAN_VALUE
loop
:
HAS_BOOLEAN_VALUE
multiple
:
MUST_USE_PROPERTY
|
HAS_BOOLEAN_VALUE
muted
:
MUST_USE_PROPERTY
|
HAS_BOOLEAN_VALUE
noValidate
:
HAS_BOOLEAN_VALUE
open
:
HAS_BOOLEAN_VALUE
playsInline
:
HAS_BOOLEAN_VALUE
readOnly
:
HAS_BOOLEAN_VALUE
required
:
HAS_BOOLEAN_VALUE
reversed
:
HAS_BOOLEAN_VALUE
rows
:
HAS_POSITIVE_NUMERIC_VALUE
rowSpan
:
HAS_NUMERIC_VALUE
scoped
:
HAS_BOOLEAN_VALUE
seamless
:
HAS_BOOLEAN_VALUE
selected
:
MUST_USE_PROPERTY
|
HAS_BOOLEAN_VALUE
size
:
HAS_POSITIVE_NUMERIC_VALUE
start
:
HAS_NUMERIC_VALUE
span
:
HAS_POSITIVE_NUMERIC_VALUE
spellCheck
:
HAS_STRING_BOOLEAN_VALUE
style
:
0
tabIndex
:
0
itemScope
:
HAS_BOOLEAN_VALUE
acceptCharset
:
0
className
:
0
htmlFor
:
0
httpEquiv
:
0
value
:
HAS_STRING_BOOLEAN_VALUE
}
DOMAttributeNames
:
{
acceptCharset
:
'
accept
-
charset
'
className
:
'
class
'
htmlFor
:
'
for
'
httpEquiv
:
'
http
-
equiv
'
}
DOMMutationMethods
:
{
value
:
function
(
node
value
)
{
if
(
value
=
=
null
)
{
return
node
.
removeAttribute
(
'
value
'
)
;
}
if
(
node
.
type
!
=
=
'
number
'
|
|
node
.
hasAttribute
(
'
value
'
)
=
=
=
false
)
{
node
.
setAttribute
(
'
value
'
'
'
+
value
)
;
}
else
if
(
node
.
validity
&
&
!
node
.
validity
.
badInput
&
&
node
.
ownerDocument
.
activeElement
!
=
=
node
)
{
node
.
setAttribute
(
'
value
'
'
'
+
value
)
;
}
}
}
}
;
var
HAS_STRING_BOOLEAN_VALUE
1
=
injection
.
HAS_STRING_BOOLEAN_VALUE
;
var
NS
=
{
xlink
:
'
http
:
/
/
www
.
w3
.
org
/
1999
/
xlink
'
xml
:
'
http
:
/
/
www
.
w3
.
org
/
XML
/
1998
/
namespace
'
}
;
var
ATTRS
=
[
'
accent
-
height
'
'
alignment
-
baseline
'
'
arabic
-
form
'
'
baseline
-
shift
'
'
cap
-
height
'
'
clip
-
path
'
'
clip
-
rule
'
'
color
-
interpolation
'
'
color
-
interpolation
-
filters
'
'
color
-
profile
'
'
color
-
rendering
'
'
dominant
-
baseline
'
'
enable
-
background
'
'
fill
-
opacity
'
'
fill
-
rule
'
'
flood
-
color
'
'
flood
-
opacity
'
'
font
-
family
'
'
font
-
size
'
'
font
-
size
-
adjust
'
'
font
-
stretch
'
'
font
-
style
'
'
font
-
variant
'
'
font
-
weight
'
'
glyph
-
name
'
'
glyph
-
orientation
-
horizontal
'
'
glyph
-
orientation
-
vertical
'
'
horiz
-
adv
-
x
'
'
horiz
-
origin
-
x
'
'
image
-
rendering
'
'
letter
-
spacing
'
'
lighting
-
color
'
'
marker
-
end
'
'
marker
-
mid
'
'
marker
-
start
'
'
overline
-
position
'
'
overline
-
thickness
'
'
paint
-
order
'
'
panose
-
1
'
'
pointer
-
events
'
'
rendering
-
intent
'
'
shape
-
rendering
'
'
stop
-
color
'
'
stop
-
opacity
'
'
strikethrough
-
position
'
'
strikethrough
-
thickness
'
'
stroke
-
dasharray
'
'
stroke
-
dashoffset
'
'
stroke
-
linecap
'
'
stroke
-
linejoin
'
'
stroke
-
miterlimit
'
'
stroke
-
opacity
'
'
stroke
-
width
'
'
text
-
anchor
'
'
text
-
decoration
'
'
text
-
rendering
'
'
underline
-
position
'
'
underline
-
thickness
'
'
unicode
-
bidi
'
'
unicode
-
range
'
'
units
-
per
-
em
'
'
v
-
alphabetic
'
'
v
-
hanging
'
'
v
-
ideographic
'
'
v
-
mathematical
'
'
vector
-
effect
'
'
vert
-
adv
-
y
'
'
vert
-
origin
-
x
'
'
vert
-
origin
-
y
'
'
word
-
spacing
'
'
writing
-
mode
'
'
x
-
height
'
'
xlink
:
actuate
'
'
xlink
:
arcrole
'
'
xlink
:
href
'
'
xlink
:
role
'
'
xlink
:
show
'
'
xlink
:
title
'
'
xlink
:
type
'
'
xml
:
base
'
'
xmlns
:
xlink
'
'
xml
:
lang
'
'
xml
:
space
'
]
;
var
SVGDOMPropertyConfig
=
{
Properties
:
{
autoReverse
:
HAS_STRING_BOOLEAN_VALUE
1
externalResourcesRequired
:
HAS_STRING_BOOLEAN_VALUE
1
preserveAlpha
:
HAS_STRING_BOOLEAN_VALUE
1
}
DOMAttributeNames
:
{
autoReverse
:
'
autoReverse
'
externalResourcesRequired
:
'
externalResourcesRequired
'
preserveAlpha
:
'
preserveAlpha
'
}
DOMAttributeNamespaces
:
{
xlinkActuate
:
NS
.
xlink
xlinkArcrole
:
NS
.
xlink
xlinkHref
:
NS
.
xlink
xlinkRole
:
NS
.
xlink
xlinkShow
:
NS
.
xlink
xlinkTitle
:
NS
.
xlink
xlinkType
:
NS
.
xlink
xmlBase
:
NS
.
xml
xmlLang
:
NS
.
xml
xmlSpace
:
NS
.
xml
}
}
;
var
CAMELIZE
=
/
[
\
-
\
:
]
(
[
a
-
z
]
)
/
g
;
var
capitalize
=
function
(
token
)
{
return
token
[
1
]
.
toUpperCase
(
)
;
}
;
ATTRS
.
forEach
(
function
(
original
)
{
var
reactName
=
original
.
replace
(
CAMELIZE
capitalize
)
;
SVGDOMPropertyConfig
.
Properties
[
reactName
]
=
0
;
SVGDOMPropertyConfig
.
DOMAttributeNames
[
reactName
]
=
original
;
}
)
;
injection
.
injectDOMPropertyConfig
(
HTMLDOMPropertyConfig
)
;
injection
.
injectDOMPropertyConfig
(
SVGDOMPropertyConfig
)
;
var
ReactVersion
=
'
16
.
2
.
0
'
;
var
ReactInternals
=
React
.
__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
;
var
_assign
=
ReactInternals
.
assign
;
function
makeEmptyFunction
(
arg
)
{
return
function
(
)
{
return
arg
;
}
;
}
var
emptyFunction
=
function
emptyFunction
(
)
{
}
;
emptyFunction
.
thatReturns
=
makeEmptyFunction
;
emptyFunction
.
thatReturnsFalse
=
makeEmptyFunction
(
false
)
;
emptyFunction
.
thatReturnsTrue
=
makeEmptyFunction
(
true
)
;
emptyFunction
.
thatReturnsNull
=
makeEmptyFunction
(
null
)
;
emptyFunction
.
thatReturnsThis
=
function
(
)
{
return
this
;
}
;
emptyFunction
.
thatReturnsArgument
=
function
(
arg
)
{
return
arg
;
}
;
var
emptyFunction_1
=
emptyFunction
;
var
emptyObject
=
{
}
;
var
emptyObject_1
=
emptyObject
;
var
_uppercasePattern
=
/
(
[
A
-
Z
]
)
/
g
;
function
hyphenate
(
string
)
{
return
string
.
replace
(
_uppercasePattern
'
-
1
'
)
.
toLowerCase
(
)
;
}
var
hyphenate_1
=
hyphenate
;
var
msPattern
=
/
^
ms
-
/
;
function
hyphenateStyleName
(
string
)
{
return
hyphenate_1
(
string
)
.
replace
(
msPattern
'
-
ms
-
'
)
;
}
var
hyphenateStyleName_1
=
hyphenateStyleName
;
function
memoizeStringOnly
(
callback
)
{
var
cache
=
{
}
;
return
function
(
string
)
{
if
(
!
cache
.
hasOwnProperty
(
string
)
)
{
cache
[
string
]
=
callback
.
call
(
this
string
)
;
}
return
cache
[
string
]
;
}
;
}
var
memoizeStringOnly_1
=
memoizeStringOnly
;
var
ReactInternals
1
=
React
.
__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
;
var
ReactCurrentOwner
=
ReactInternals
1
.
ReactCurrentOwner
;
var
hasSymbol
=
typeof
Symbol
=
=
=
'
function
'
&
&
Symbol
[
'
for
'
]
;
var
REACT_FRAGMENT_TYPE
=
hasSymbol
?
Symbol
[
'
for
'
]
(
'
react
.
fragment
'
)
:
0xeacb
;
var
matchHtmlRegExp
=
/
[
"
'
&
<
>
]
/
;
function
escapeHtml
(
string
)
{
var
str
=
'
'
+
string
;
var
match
=
matchHtmlRegExp
.
exec
(
str
)
;
if
(
!
match
)
{
return
str
;
}
var
escape
;
var
html
=
'
'
;
var
index
=
0
;
var
lastIndex
=
0
;
for
(
index
=
match
.
index
;
index
<
str
.
length
;
index
+
+
)
{
switch
(
str
.
charCodeAt
(
index
)
)
{
case
34
:
escape
=
'
&
quot
;
'
;
break
;
case
38
:
escape
=
'
&
amp
;
'
;
break
;
case
39
:
escape
=
'
&
#
x27
;
'
;
break
;
case
60
:
escape
=
'
&
lt
;
'
;
break
;
case
62
:
escape
=
'
&
gt
;
'
;
break
;
default
:
continue
;
}
if
(
lastIndex
!
=
=
index
)
{
html
+
=
str
.
substring
(
lastIndex
index
)
;
}
lastIndex
=
index
+
1
;
html
+
=
escape
;
}
return
lastIndex
!
=
=
index
?
html
+
str
.
substring
(
lastIndex
index
)
:
html
;
}
function
escapeTextForBrowser
(
text
)
{
if
(
typeof
text
=
=
=
'
boolean
'
|
|
typeof
text
=
=
=
'
number
'
)
{
return
'
'
+
text
;
}
return
escapeHtml
(
text
)
;
}
function
quoteAttributeValueForBrowser
(
value
)
{
return
'
"
'
+
escapeTextForBrowser
(
value
)
+
'
"
'
;
}
var
VALID_ATTRIBUTE_NAME_REGEX
=
new
RegExp
(
'
^
[
'
+
ATTRIBUTE_NAME_START_CHAR
+
'
]
[
'
+
ATTRIBUTE_NAME_CHAR
+
'
]
*
'
)
;
var
illegalAttributeNameCache
=
{
}
;
var
validatedAttributeNameCache
=
{
}
;
function
isAttributeNameSafe
(
attributeName
)
{
if
(
validatedAttributeNameCache
.
hasOwnProperty
(
attributeName
)
)
{
return
true
;
}
if
(
illegalAttributeNameCache
.
hasOwnProperty
(
attributeName
)
)
{
return
false
;
}
if
(
VALID_ATTRIBUTE_NAME_REGEX
.
test
(
attributeName
)
)
{
validatedAttributeNameCache
[
attributeName
]
=
true
;
return
true
;
}
illegalAttributeNameCache
[
attributeName
]
=
true
;
return
false
;
}
function
shouldIgnoreValue
(
propertyInfo
value
)
{
return
value
=
=
null
|
|
propertyInfo
.
hasBooleanValue
&
&
!
value
|
|
propertyInfo
.
hasNumericValue
&
&
isNaN
(
value
)
|
|
propertyInfo
.
hasPositiveNumericValue
&
&
value
<
1
|
|
propertyInfo
.
hasOverloadedBooleanValue
&
&
value
=
=
=
false
;
}
function
createMarkupForRoot
(
)
{
return
ROOT_ATTRIBUTE_NAME
+
'
=
"
"
'
;
}
function
createMarkupForProperty
(
name
value
)
{
var
propertyInfo
=
getPropertyInfo
(
name
)
;
if
(
propertyInfo
)
{
if
(
shouldIgnoreValue
(
propertyInfo
value
)
)
{
return
'
'
;
}
var
attributeName
=
propertyInfo
.
attributeName
;
if
(
propertyInfo
.
hasBooleanValue
|
|
propertyInfo
.
hasOverloadedBooleanValue
&
&
value
=
=
=
true
)
{
return
attributeName
+
'
=
"
"
'
;
}
else
if
(
typeof
value
!
=
=
'
boolean
'
|
|
shouldAttributeAcceptBooleanValue
(
name
)
)
{
return
attributeName
+
'
=
'
+
quoteAttributeValueForBrowser
(
value
)
;
}
}
else
if
(
shouldSetAttribute
(
name
value
)
)
{
if
(
value
=
=
null
)
{
return
'
'
;
}
return
name
+
'
=
'
+
quoteAttributeValueForBrowser
(
value
)
;
}
return
null
;
}
function
createMarkupForCustomAttribute
(
name
value
)
{
if
(
!
isAttributeNameSafe
(
name
)
|
|
value
=
=
null
)
{
return
'
'
;
}
return
name
+
'
=
'
+
quoteAttributeValueForBrowser
(
value
)
;
}
var
HTML_NAMESPACE
=
'
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
'
;
var
MATH_NAMESPACE
=
'
http
:
/
/
www
.
w3
.
org
/
1998
/
Math
/
MathML
'
;
var
SVG_NAMESPACE
=
'
http
:
/
/
www
.
w3
.
org
/
2000
/
svg
'
;
var
Namespaces
=
{
html
:
HTML_NAMESPACE
mathml
:
MATH_NAMESPACE
svg
:
SVG_NAMESPACE
}
;
function
getIntrinsicNamespace
(
type
)
{
switch
(
type
)
{
case
'
svg
'
:
return
SVG_NAMESPACE
;
case
'
math
'
:
return
MATH_NAMESPACE
;
default
:
return
HTML_NAMESPACE
;
}
}
function
getChildNamespace
(
parentNamespace
type
)
{
if
(
parentNamespace
=
=
null
|
|
parentNamespace
=
=
=
HTML_NAMESPACE
)
{
return
getIntrinsicNamespace
(
type
)
;
}
if
(
parentNamespace
=
=
=
SVG_NAMESPACE
&
&
type
=
=
=
'
foreignObject
'
)
{
return
HTML_NAMESPACE
;
}
return
parentNamespace
;
}
var
omittedCloseTags
=
{
area
:
true
base
:
true
br
:
true
col
:
true
embed
:
true
hr
:
true
img
:
true
input
:
true
keygen
:
true
link
:
true
meta
:
true
param
:
true
source
:
true
track
:
true
wbr
:
true
}
;
var
voidElementTags
=
_assign
(
{
menuitem
:
true
}
omittedCloseTags
)
;
var
HTML
=
'
__html
'
;
function
assertValidProps
(
tag
props
getStack
)
{
if
(
!
props
)
{
return
;
}
if
(
voidElementTags
[
tag
]
)
{
!
(
props
.
children
=
=
null
&
&
props
.
dangerouslySetInnerHTML
=
=
null
)
?
reactProdInvariant
(
'
137
'
tag
getStack
(
)
)
:
void
0
;
}
if
(
props
.
dangerouslySetInnerHTML
!
=
null
)
{
!
(
props
.
children
=
=
null
)
?
reactProdInvariant
(
'
60
'
)
:
void
0
;
!
(
typeof
props
.
dangerouslySetInnerHTML
=
=
=
'
object
'
&
&
HTML
in
props
.
dangerouslySetInnerHTML
)
?
reactProdInvariant
(
'
61
'
)
:
void
0
;
}
!
(
props
.
style
=
=
null
|
|
typeof
props
.
style
=
=
=
'
object
'
)
?
reactProdInvariant
(
'
62
'
getStack
(
)
)
:
void
0
;
}
var
isUnitlessNumber
=
{
animationIterationCount
:
true
borderImageOutset
:
true
borderImageSlice
:
true
borderImageWidth
:
true
boxFlex
:
true
boxFlexGroup
:
true
boxOrdinalGroup
:
true
columnCount
:
true
columns
:
true
flex
:
true
flexGrow
:
true
flexPositive
:
true
flexShrink
:
true
flexNegative
:
true
flexOrder
:
true
gridRow
:
true
gridRowEnd
:
true
gridRowSpan
:
true
gridRowStart
:
true
gridColumn
:
true
gridColumnEnd
:
true
gridColumnSpan
:
true
gridColumnStart
:
true
fontWeight
:
true
lineClamp
:
true
lineHeight
:
true
opacity
:
true
order
:
true
orphans
:
true
tabSize
:
true
widows
:
true
zIndex
:
true
zoom
:
true
fillOpacity
:
true
floodOpacity
:
true
stopOpacity
:
true
strokeDasharray
:
true
strokeDashoffset
:
true
strokeMiterlimit
:
true
strokeOpacity
:
true
strokeWidth
:
true
}
;
function
prefixKey
(
prefix
key
)
{
return
prefix
+
key
.
charAt
(
0
)
.
toUpperCase
(
)
+
key
.
substring
(
1
)
;
}
var
prefixes
=
[
'
Webkit
'
'
ms
'
'
Moz
'
'
O
'
]
;
Object
.
keys
(
isUnitlessNumber
)
.
forEach
(
function
(
prop
)
{
prefixes
.
forEach
(
function
(
prefix
)
{
isUnitlessNumber
[
prefixKey
(
prefix
prop
)
]
=
isUnitlessNumber
[
prop
]
;
}
)
;
}
)
;
function
dangerousStyleValue
(
name
value
isCustomProperty
)
{
var
isEmpty
=
value
=
=
null
|
|
typeof
value
=
=
=
'
boolean
'
|
|
value
=
=
=
'
'
;
if
(
isEmpty
)
{
return
'
'
;
}
if
(
!
isCustomProperty
&
&
typeof
value
=
=
=
'
number
'
&
&
value
!
=
=
0
&
&
!
(
isUnitlessNumber
.
hasOwnProperty
(
name
)
&
&
isUnitlessNumber
[
name
]
)
)
{
return
value
+
'
px
'
;
}
return
(
'
'
+
value
)
.
trim
(
)
;
}
function
isCustomComponent
(
tagName
props
)
{
if
(
tagName
.
indexOf
(
'
-
'
)
=
=
=
-
1
)
{
return
typeof
props
.
is
=
=
=
'
string
'
;
}
switch
(
tagName
)
{
case
'
annotation
-
xml
'
:
case
'
color
-
profile
'
:
case
'
font
-
face
'
:
case
'
font
-
face
-
src
'
:
case
'
font
-
face
-
uri
'
:
case
'
font
-
face
-
format
'
:
case
'
font
-
face
-
name
'
:
case
'
missing
-
glyph
'
:
return
false
;
default
:
return
true
;
}
}
function
_classCallCheck
(
instance
Constructor
)
{
if
(
!
(
instance
instanceof
Constructor
)
)
{
throw
new
TypeError
(
"
Cannot
call
a
class
as
a
function
"
)
;
}
}
var
toArray
=
React
.
Children
.
toArray
;
var
getStackAddendum
=
emptyFunction_1
.
thatReturns
(
'
'
)
;
var
newlineEatingTags
=
{
listing
:
true
pre
:
true
textarea
:
true
}
;
function
getComponentName
(
type
)
{
return
typeof
type
=
=
=
'
string
'
?
type
:
typeof
type
=
=
=
'
function
'
?
type
.
displayName
|
|
type
.
name
:
null
;
}
var
VALID_TAG_REGEX
=
/
^
[
a
-
zA
-
Z
]
[
a
-
zA
-
Z
:
_
\
.
\
-
\
d
]
*
/
;
var
validatedTagCache
=
{
}
;
function
validateDangerousTag
(
tag
)
{
if
(
!
validatedTagCache
.
hasOwnProperty
(
tag
)
)
{
!
VALID_TAG_REGEX
.
test
(
tag
)
?
reactProdInvariant
(
'
65
'
tag
)
:
void
0
;
validatedTagCache
[
tag
]
=
true
;
}
}
var
processStyleName
=
memoizeStringOnly_1
(
function
(
styleName
)
{
return
hyphenateStyleName_1
(
styleName
)
;
}
)
;
function
createMarkupForStyles
(
styles
)
{
var
serialized
=
'
'
;
var
delimiter
=
'
'
;
for
(
var
styleName
in
styles
)
{
if
(
!
styles
.
hasOwnProperty
(
styleName
)
)
{
continue
;
}
var
isCustomProperty
=
styleName
.
indexOf
(
'
-
-
'
)
=
=
=
0
;
var
styleValue
=
styles
[
styleName
]
;
if
(
styleValue
!
=
null
)
{
serialized
+
=
delimiter
+
processStyleName
(
styleName
)
+
'
:
'
;
serialized
+
=
dangerousStyleValue
(
styleName
styleValue
isCustomProperty
)
;
delimiter
=
'
;
'
;
}
}
return
serialized
|
|
null
;
}
function
shouldConstruct
(
Component
)
{
return
Component
.
prototype
&
&
Component
.
prototype
.
isReactComponent
;
}
function
getNonChildrenInnerMarkup
(
props
)
{
var
innerHTML
=
props
.
dangerouslySetInnerHTML
;
if
(
innerHTML
!
=
null
)
{
if
(
innerHTML
.
__html
!
=
null
)
{
return
innerHTML
.
__html
;
}
}
else
{
var
content
=
props
.
children
;
if
(
typeof
content
=
=
=
'
string
'
|
|
typeof
content
=
=
=
'
number
'
)
{
return
escapeTextForBrowser
(
content
)
;
}
}
return
null
;
}
function
flattenTopLevelChildren
(
children
)
{
if
(
!
React
.
isValidElement
(
children
)
)
{
return
toArray
(
children
)
;
}
var
element
=
children
;
if
(
element
.
type
!
=
=
REACT_FRAGMENT_TYPE
)
{
return
[
element
]
;
}
var
fragmentChildren
=
element
.
props
.
children
;
if
(
!
React
.
isValidElement
(
fragmentChildren
)
)
{
return
toArray
(
fragmentChildren
)
;
}
var
fragmentChildElement
=
fragmentChildren
;
return
[
fragmentChildElement
]
;
}
function
flattenOptionChildren
(
children
)
{
var
content
=
'
'
;
React
.
Children
.
forEach
(
children
function
(
child
)
{
if
(
child
=
=
null
)
{
return
;
}
if
(
typeof
child
=
=
=
'
string
'
|
|
typeof
child
=
=
=
'
number
'
)
{
content
+
=
child
;
}
else
{
}
}
)
;
return
content
;
}
function
maskContext
(
type
context
)
{
var
contextTypes
=
type
.
contextTypes
;
if
(
!
contextTypes
)
{
return
emptyObject_1
;
}
var
maskedContext
=
{
}
;
for
(
var
contextName
in
contextTypes
)
{
maskedContext
[
contextName
]
=
context
[
contextName
]
;
}
return
maskedContext
;
}
function
processContext
(
type
context
)
{
var
maskedContext
=
maskContext
(
type
context
)
;
return
maskedContext
;
}
var
STYLE
=
'
style
'
;
var
RESERVED_PROPS
1
=
{
children
:
null
dangerouslySetInnerHTML
:
null
suppressContentEditableWarning
:
null
suppressHydrationWarning
:
null
}
;
function
createOpenTagMarkup
(
tagVerbatim
tagLowercase
props
namespace
makeStaticMarkup
isRootElement
)
{
var
ret
=
'
<
'
+
tagVerbatim
;
for
(
var
propKey
in
props
)
{
if
(
!
props
.
hasOwnProperty
(
propKey
)
)
{
continue
;
}
var
propValue
=
props
[
propKey
]
;
if
(
propValue
=
=
null
)
{
continue
;
}
if
(
propKey
=
=
=
STYLE
)
{
propValue
=
createMarkupForStyles
(
propValue
)
;
}
var
markup
=
null
;
if
(
isCustomComponent
(
tagLowercase
props
)
)
{
if
(
!
RESERVED_PROPS
1
.
hasOwnProperty
(
propKey
)
)
{
markup
=
createMarkupForCustomAttribute
(
propKey
propValue
)
;
}
}
else
{
markup
=
createMarkupForProperty
(
propKey
propValue
)
;
}
if
(
markup
)
{
ret
+
=
'
'
+
markup
;
}
}
if
(
makeStaticMarkup
)
{
return
ret
;
}
if
(
isRootElement
)
{
ret
+
=
'
'
+
createMarkupForRoot
(
)
;
}
return
ret
;
}
function
validateRenderResult
(
child
type
)
{
if
(
child
=
=
=
undefined
)
{
reactProdInvariant
(
'
152
'
getComponentName
(
type
)
|
|
'
Component
'
)
;
}
}
function
resolve
(
child
context
)
{
while
(
React
.
isValidElement
(
child
)
)
{
var
element
=
child
;
var
Component
=
element
.
type
;
if
(
typeof
Component
!
=
=
'
function
'
)
{
break
;
}
var
publicContext
=
processContext
(
Component
context
)
;
var
inst
;
var
queue
=
[
]
;
var
replace
=
false
;
var
updater
=
{
isMounted
:
function
(
publicInstance
)
{
return
false
;
}
enqueueForceUpdate
:
function
(
publicInstance
)
{
if
(
queue
=
=
=
null
)
{
return
null
;
}
}
enqueueReplaceState
:
function
(
publicInstance
completeState
)
{
replace
=
true
;
queue
=
[
completeState
]
;
}
enqueueSetState
:
function
(
publicInstance
partialState
)
{
if
(
queue
=
=
=
null
)
{
return
null
;
}
queue
.
push
(
partialState
)
;
}
}
;
if
(
shouldConstruct
(
Component
)
)
{
inst
=
new
Component
(
element
.
props
publicContext
updater
)
;
}
else
{
inst
=
Component
(
element
.
props
publicContext
updater
)
;
if
(
inst
=
=
null
|
|
inst
.
render
=
=
null
)
{
child
=
inst
;
validateRenderResult
(
child
Component
)
;
continue
;
}
}
inst
.
props
=
element
.
props
;
inst
.
context
=
publicContext
;
inst
.
updater
=
updater
;
var
initialState
=
inst
.
state
;
if
(
initialState
=
=
=
undefined
)
{
inst
.
state
=
initialState
=
null
;
}
if
(
inst
.
componentWillMount
)
{
inst
.
componentWillMount
(
)
;
if
(
queue
.
length
)
{
var
oldQueue
=
queue
;
var
oldReplace
=
replace
;
queue
=
null
;
replace
=
false
;
if
(
oldReplace
&
&
oldQueue
.
length
=
=
=
1
)
{
inst
.
state
=
oldQueue
[
0
]
;
}
else
{
var
nextState
=
oldReplace
?
oldQueue
[
0
]
:
inst
.
state
;
var
dontMutate
=
true
;
for
(
var
i
=
oldReplace
?
1
:
0
;
i
<
oldQueue
.
length
;
i
+
+
)
{
var
partial
=
oldQueue
[
i
]
;
var
partialState
=
typeof
partial
=
=
=
'
function
'
?
partial
.
call
(
inst
nextState
element
.
props
publicContext
)
:
partial
;
if
(
partialState
)
{
if
(
dontMutate
)
{
dontMutate
=
false
;
nextState
=
_assign
(
{
}
nextState
partialState
)
;
}
else
{
_assign
(
nextState
partialState
)
;
}
}
}
inst
.
state
=
nextState
;
}
}
else
{
queue
=
null
;
}
}
child
=
inst
.
render
(
)
;
validateRenderResult
(
child
Component
)
;
var
childContext
;
if
(
typeof
inst
.
getChildContext
=
=
=
'
function
'
)
{
var
childContextTypes
=
Component
.
childContextTypes
;
if
(
typeof
childContextTypes
=
=
=
'
object
'
)
{
childContext
=
inst
.
getChildContext
(
)
;
for
(
var
contextKey
in
childContext
)
{
!
(
contextKey
in
childContextTypes
)
?
reactProdInvariant
(
'
108
'
getComponentName
(
Component
)
|
|
'
Unknown
'
contextKey
)
:
void
0
;
}
}
else
{
}
}
if
(
childContext
)
{
context
=
_assign
(
{
}
context
childContext
)
;
}
}
return
{
child
:
child
context
:
context
}
;
}
var
ReactDOMServerRenderer
=
function
(
)
{
function
ReactDOMServerRenderer
(
children
makeStaticMarkup
)
{
_classCallCheck
(
this
ReactDOMServerRenderer
)
;
var
flatChildren
=
flattenTopLevelChildren
(
children
)
;
var
topFrame
=
{
domNamespace
:
Namespaces
.
html
children
:
flatChildren
childIndex
:
0
context
:
emptyObject_1
footer
:
'
'
}
;
this
.
stack
=
[
topFrame
]
;
this
.
exhausted
=
false
;
this
.
currentSelectValue
=
null
;
this
.
previousWasTextNode
=
false
;
this
.
makeStaticMarkup
=
makeStaticMarkup
;
}
ReactDOMServerRenderer
.
prototype
.
read
=
function
read
(
bytes
)
{
if
(
this
.
exhausted
)
{
return
null
;
}
var
out
=
'
'
;
while
(
out
.
length
<
bytes
)
{
if
(
this
.
stack
.
length
=
=
=
0
)
{
this
.
exhausted
=
true
;
break
;
}
var
frame
=
this
.
stack
[
this
.
stack
.
length
-
1
]
;
if
(
frame
.
childIndex
>
=
frame
.
children
.
length
)
{
var
footer
=
frame
.
footer
;
out
+
=
footer
;
if
(
footer
!
=
=
'
'
)
{
this
.
previousWasTextNode
=
false
;
}
this
.
stack
.
pop
(
)
;
if
(
frame
.
tag
=
=
=
'
select
'
)
{
this
.
currentSelectValue
=
null
;
}
continue
;
}
var
child
=
frame
.
children
[
frame
.
childIndex
+
+
]
;
out
+
=
this
.
render
(
child
frame
.
context
frame
.
domNamespace
)
;
}
return
out
;
}
;
ReactDOMServerRenderer
.
prototype
.
render
=
function
render
(
child
context
parentNamespace
)
{
if
(
typeof
child
=
=
=
'
string
'
|
|
typeof
child
=
=
=
'
number
'
)
{
var
text
=
'
'
+
child
;
if
(
text
=
=
=
'
'
)
{
return
'
'
;
}
if
(
this
.
makeStaticMarkup
)
{
return
escapeTextForBrowser
(
text
)
;
}
if
(
this
.
previousWasTextNode
)
{
return
'
<
!
-
-
-
-
>
'
+
escapeTextForBrowser
(
text
)
;
}
this
.
previousWasTextNode
=
true
;
return
escapeTextForBrowser
(
text
)
;
}
else
{
var
nextChild
;
var
_resolve
=
resolve
(
child
context
)
;
nextChild
=
_resolve
.
child
;
context
=
_resolve
.
context
;
if
(
nextChild
=
=
=
null
|
|
nextChild
=
=
=
false
)
{
return
'
'
;
}
else
if
(
!
React
.
isValidElement
(
nextChild
)
)
{
var
nextChildren
=
toArray
(
nextChild
)
;
var
frame
=
{
domNamespace
:
parentNamespace
children
:
nextChildren
childIndex
:
0
context
:
context
footer
:
'
'
}
;
this
.
stack
.
push
(
frame
)
;
return
'
'
;
}
else
if
(
nextChild
.
type
=
=
=
REACT_FRAGMENT_TYPE
)
{
var
_nextChildren
=
toArray
(
nextChild
.
props
.
children
)
;
var
_frame
=
{
domNamespace
:
parentNamespace
children
:
_nextChildren
childIndex
:
0
context
:
context
footer
:
'
'
}
;
this
.
stack
.
push
(
_frame
)
;
return
'
'
;
}
else
{
var
nextElement
=
nextChild
;
return
this
.
renderDOM
(
nextElement
context
parentNamespace
)
;
}
}
}
;
ReactDOMServerRenderer
.
prototype
.
renderDOM
=
function
renderDOM
(
element
context
parentNamespace
)
{
var
tag
=
element
.
type
.
toLowerCase
(
)
;
var
namespace
=
parentNamespace
;
if
(
parentNamespace
=
=
=
Namespaces
.
html
)
{
namespace
=
getIntrinsicNamespace
(
tag
)
;
}
validateDangerousTag
(
tag
)
;
var
props
=
element
.
props
;
if
(
tag
=
=
=
'
input
'
)
{
props
=
_assign
(
{
type
:
undefined
}
props
{
defaultChecked
:
undefined
defaultValue
:
undefined
value
:
props
.
value
!
=
null
?
props
.
value
:
props
.
defaultValue
checked
:
props
.
checked
!
=
null
?
props
.
checked
:
props
.
defaultChecked
}
)
;
}
else
if
(
tag
=
=
=
'
textarea
'
)
{
var
initialValue
=
props
.
value
;
if
(
initialValue
=
=
null
)
{
var
defaultValue
=
props
.
defaultValue
;
var
textareaChildren
=
props
.
children
;
if
(
textareaChildren
!
=
null
)
{
!
(
defaultValue
=
=
null
)
?
reactProdInvariant
(
'
92
'
)
:
void
0
;
if
(
Array
.
isArray
(
textareaChildren
)
)
{
!
(
textareaChildren
.
length
<
=
1
)
?
reactProdInvariant
(
'
93
'
)
:
void
0
;
textareaChildren
=
textareaChildren
[
0
]
;
}
defaultValue
=
'
'
+
textareaChildren
;
}
if
(
defaultValue
=
=
null
)
{
defaultValue
=
'
'
;
}
initialValue
=
defaultValue
;
}
props
=
_assign
(
{
}
props
{
value
:
undefined
children
:
'
'
+
initialValue
}
)
;
}
else
if
(
tag
=
=
=
'
select
'
)
{
this
.
currentSelectValue
=
props
.
value
!
=
null
?
props
.
value
:
props
.
defaultValue
;
props
=
_assign
(
{
}
props
{
value
:
undefined
}
)
;
}
else
if
(
tag
=
=
=
'
option
'
)
{
var
selected
=
null
;
var
selectValue
=
this
.
currentSelectValue
;
var
optionChildren
=
flattenOptionChildren
(
props
.
children
)
;
if
(
selectValue
!
=
null
)
{
var
value
;
if
(
props
.
value
!
=
null
)
{
value
=
props
.
value
+
'
'
;
}
else
{
value
=
optionChildren
;
}
selected
=
false
;
if
(
Array
.
isArray
(
selectValue
)
)
{
for
(
var
j
=
0
;
j
<
selectValue
.
length
;
j
+
+
)
{
if
(
'
'
+
selectValue
[
j
]
=
=
=
value
)
{
selected
=
true
;
break
;
}
}
}
else
{
selected
=
'
'
+
selectValue
=
=
=
value
;
}
props
=
_assign
(
{
selected
:
undefined
children
:
undefined
}
props
{
selected
:
selected
children
:
optionChildren
}
)
;
}
}
assertValidProps
(
tag
props
getStackAddendum
)
;
var
out
=
createOpenTagMarkup
(
element
.
type
tag
props
namespace
this
.
makeStaticMarkup
this
.
stack
.
length
=
=
=
1
)
;
var
footer
=
'
'
;
if
(
omittedCloseTags
.
hasOwnProperty
(
tag
)
)
{
out
+
=
'
/
>
'
;
}
else
{
out
+
=
'
>
'
;
footer
=
'
<
/
'
+
element
.
type
+
'
>
'
;
}
var
children
;
var
innerMarkup
=
getNonChildrenInnerMarkup
(
props
)
;
if
(
innerMarkup
!
=
null
)
{
children
=
[
]
;
if
(
newlineEatingTags
[
tag
]
&
&
innerMarkup
.
charAt
(
0
)
=
=
=
'
\
n
'
)
{
out
+
=
'
\
n
'
;
}
out
+
=
innerMarkup
;
}
else
{
children
=
toArray
(
props
.
children
)
;
}
var
frame
=
{
domNamespace
:
getChildNamespace
(
parentNamespace
element
.
type
)
tag
:
tag
children
:
children
childIndex
:
0
context
:
context
footer
:
footer
}
;
this
.
stack
.
push
(
frame
)
;
this
.
previousWasTextNode
=
false
;
return
out
;
}
;
return
ReactDOMServerRenderer
;
}
(
)
;
function
renderToString
(
element
)
{
var
renderer
=
new
ReactDOMServerRenderer
(
element
false
)
;
var
markup
=
renderer
.
read
(
Infinity
)
;
return
markup
;
}
function
renderToStaticMarkup
(
element
)
{
var
renderer
=
new
ReactDOMServerRenderer
(
element
true
)
;
var
markup
=
renderer
.
read
(
Infinity
)
;
return
markup
;
}
function
renderToNodeStream
(
)
{
reactProdInvariant
(
'
207
'
)
;
}
function
renderToStaticNodeStream
(
)
{
reactProdInvariant
(
'
208
'
)
;
}
var
ReactDOMServerBrowser
=
{
renderToString
:
renderToString
renderToStaticMarkup
:
renderToStaticMarkup
renderToNodeStream
:
renderToNodeStream
renderToStaticNodeStream
:
renderToStaticNodeStream
version
:
ReactVersion
}
;
var
ReactDOMServerBrowser
1
=
Object
.
freeze
(
{
default
:
ReactDOMServerBrowser
}
)
;
var
ReactDOMServer
=
(
ReactDOMServerBrowser
1
&
&
ReactDOMServerBrowser
)
|
|
ReactDOMServerBrowser
1
;
var
server_browser
=
ReactDOMServer
[
'
default
'
]
?
ReactDOMServer
[
'
default
'
]
:
ReactDOMServer
;
return
server_browser
;
}
)
)
)
;
