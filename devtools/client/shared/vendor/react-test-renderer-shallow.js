(
function
(
global
factory
)
{
typeof
exports
=
=
=
'
object
'
&
&
typeof
module
!
=
=
'
undefined
'
?
module
.
exports
=
factory
(
require
(
'
devtools
/
client
/
shared
/
vendor
/
react
'
)
)
:
typeof
define
=
=
=
'
function
'
&
&
define
.
amd
?
define
(
[
'
devtools
/
client
/
shared
/
vendor
/
react
'
]
factory
)
:
(
global
.
ReactShallowRenderer
=
factory
(
global
.
React
)
)
;
}
(
this
(
function
(
React
)
{
'
use
strict
'
;
var
ReactInternals
=
React
.
__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
;
var
_assign
=
ReactInternals
.
assign
;
function
invariant
(
condition
format
a
b
c
d
e
f
)
{
if
(
!
condition
)
{
var
error
;
if
(
format
=
=
=
undefined
)
{
error
=
new
Error
(
'
Minified
exception
occurred
;
use
the
non
-
minified
dev
environment
'
+
'
for
the
full
error
message
and
additional
helpful
warnings
.
'
)
;
}
else
{
var
args
=
[
a
b
c
d
e
f
]
;
var
argIndex
=
0
;
error
=
new
Error
(
format
.
replace
(
/
%
s
/
g
function
(
)
{
return
args
[
argIndex
+
+
]
;
}
)
)
;
error
.
name
=
'
Invariant
Violation
'
;
}
error
.
framesToPop
=
1
;
throw
error
;
}
}
var
invariant_1
=
invariant
;
function
reactProdInvariant
(
code
)
{
var
argCount
=
arguments
.
length
-
1
;
var
url
=
'
https
:
/
/
reactjs
.
org
/
docs
/
error
-
decoder
.
html
?
invariant
=
'
+
code
;
for
(
var
argIdx
=
0
;
argIdx
<
argCount
;
argIdx
+
+
)
{
url
+
=
'
&
args
[
]
=
'
+
encodeURIComponent
(
arguments
[
argIdx
+
1
]
)
;
}
var
i
=
invariant_1
;
i
(
false
'
Minified
React
error
#
'
+
code
+
'
;
visit
%
s
'
+
'
for
the
full
message
or
use
the
non
-
minified
dev
environment
'
+
'
for
full
errors
and
additional
helpful
warnings
.
'
url
)
;
}
var
hasSymbol
=
typeof
Symbol
=
=
=
'
function
'
&
&
Symbol
.
for
;
var
REACT_ELEMENT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
element
'
)
:
0xeac7
;
var
REACT_PORTAL_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
portal
'
)
:
0xeaca
;
var
REACT_FRAGMENT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
fragment
'
)
:
0xeacb
;
var
REACT_STRICT_MODE_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
strict_mode
'
)
:
0xeacc
;
var
REACT_PROFILER_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
profiler
'
)
:
0xead2
;
var
REACT_PROVIDER_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
provider
'
)
:
0xeacd
;
var
REACT_CONTEXT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
context
'
)
:
0xeace
;
var
REACT_ASYNC_MODE_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
async_mode
'
)
:
0xeacf
;
var
REACT_FORWARD_REF_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
forward_ref
'
)
:
0xead0
;
var
REACT_TIMEOUT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
timeout
'
)
:
0xead1
;
function
typeOf
(
object
)
{
if
(
typeof
object
=
=
=
'
object
'
&
&
object
!
=
=
null
)
{
var
typeof
=
object
.
typeof
;
switch
(
typeof
)
{
case
REACT_ELEMENT_TYPE
:
var
type
=
object
.
type
;
switch
(
type
)
{
case
REACT_ASYNC_MODE_TYPE
:
case
REACT_FRAGMENT_TYPE
:
case
REACT_PROFILER_TYPE
:
case
REACT_STRICT_MODE_TYPE
:
return
type
;
default
:
var
typeofType
=
type
&
&
type
.
typeof
;
switch
(
typeofType
)
{
case
REACT_CONTEXT_TYPE
:
case
REACT_FORWARD_REF_TYPE
:
case
REACT_PROVIDER_TYPE
:
return
typeofType
;
default
:
return
typeof
;
}
}
case
REACT_PORTAL_TYPE
:
return
typeof
;
}
}
return
undefined
;
}
function
isForwardRef
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_FORWARD_REF_TYPE
;
}
var
describeComponentFrame
=
function
(
name
source
ownerName
)
{
return
'
\
n
in
'
+
(
name
|
|
'
Unknown
'
)
+
(
source
?
'
(
at
'
+
source
.
fileName
.
replace
(
/
^
.
*
[
\
\
\
/
]
/
'
'
)
+
'
:
'
+
source
.
lineNumber
+
'
)
'
:
ownerName
?
'
(
created
by
'
+
ownerName
+
'
)
'
:
'
'
)
;
}
;
function
getComponentName
(
fiber
)
{
var
type
=
fiber
.
type
;
if
(
typeof
type
=
=
=
'
function
'
)
{
return
type
.
displayName
|
|
type
.
name
;
}
if
(
typeof
type
=
=
=
'
string
'
)
{
return
type
;
}
switch
(
type
)
{
case
REACT_ASYNC_MODE_TYPE
:
return
'
AsyncMode
'
;
case
REACT_CONTEXT_TYPE
:
return
'
Context
.
Consumer
'
;
case
REACT_FRAGMENT_TYPE
:
return
'
ReactFragment
'
;
case
REACT_PORTAL_TYPE
:
return
'
ReactPortal
'
;
case
REACT_PROFILER_TYPE
:
return
'
Profiler
(
'
+
fiber
.
pendingProps
.
id
+
'
)
'
;
case
REACT_PROVIDER_TYPE
:
return
'
Context
.
Provider
'
;
case
REACT_STRICT_MODE_TYPE
:
return
'
StrictMode
'
;
case
REACT_TIMEOUT_TYPE
:
return
'
Timeout
'
;
}
if
(
typeof
type
=
=
=
'
object
'
&
&
type
!
=
=
null
)
{
switch
(
type
.
typeof
)
{
case
REACT_FORWARD_REF_TYPE
:
var
functionName
=
type
.
render
.
displayName
|
|
type
.
render
.
name
|
|
'
'
;
return
functionName
!
=
=
'
'
?
'
ForwardRef
(
'
+
functionName
+
'
)
'
:
'
ForwardRef
'
;
}
}
return
null
;
}
var
emptyObject
=
{
}
;
var
emptyObject_1
=
emptyObject
;
var
hasOwnProperty
=
Object
.
prototype
.
hasOwnProperty
;
function
is
(
x
y
)
{
if
(
x
=
=
=
y
)
{
return
x
!
=
=
0
|
|
y
!
=
=
0
|
|
1
/
x
=
=
=
1
/
y
;
}
else
{
return
x
!
=
=
x
&
&
y
!
=
=
y
;
}
}
function
shallowEqual
(
objA
objB
)
{
if
(
is
(
objA
objB
)
)
{
return
true
;
}
if
(
typeof
objA
!
=
=
'
object
'
|
|
objA
=
=
=
null
|
|
typeof
objB
!
=
=
'
object
'
|
|
objB
=
=
=
null
)
{
return
false
;
}
var
keysA
=
Object
.
keys
(
objA
)
;
var
keysB
=
Object
.
keys
(
objB
)
;
if
(
keysA
.
length
!
=
=
keysB
.
length
)
{
return
false
;
}
for
(
var
i
=
0
;
i
<
keysA
.
length
;
i
+
+
)
{
if
(
!
hasOwnProperty
.
call
(
objB
keysA
[
i
]
)
|
|
!
is
(
objA
[
keysA
[
i
]
]
objB
[
keysA
[
i
]
]
)
)
{
return
false
;
}
}
return
true
;
}
var
shallowEqual_1
=
shallowEqual
;
function
checkPropTypes
(
typeSpecs
values
location
componentName
getStack
)
{
}
var
checkPropTypes_1
=
checkPropTypes
;
function
_classCallCheck
(
instance
Constructor
)
{
if
(
!
(
instance
instanceof
Constructor
)
)
{
throw
new
TypeError
(
"
Cannot
call
a
class
as
a
function
"
)
;
}
}
var
ReactShallowRenderer
=
function
(
)
{
function
ReactShallowRenderer
(
)
{
_classCallCheck
(
this
ReactShallowRenderer
)
;
this
.
_context
=
null
;
this
.
_element
=
null
;
this
.
_instance
=
null
;
this
.
_newState
=
null
;
this
.
_rendered
=
null
;
this
.
_rendering
=
false
;
this
.
_forcedUpdate
=
false
;
this
.
_updater
=
new
Updater
(
this
)
;
}
ReactShallowRenderer
.
prototype
.
getMountedInstance
=
function
getMountedInstance
(
)
{
return
this
.
_instance
;
}
;
ReactShallowRenderer
.
prototype
.
getRenderOutput
=
function
getRenderOutput
(
)
{
return
this
.
_rendered
;
}
;
ReactShallowRenderer
.
prototype
.
render
=
function
render
(
element
)
{
var
context
=
arguments
.
length
>
1
&
&
arguments
[
1
]
!
=
=
undefined
?
arguments
[
1
]
:
emptyObject_1
;
!
React
.
isValidElement
(
element
)
?
reactProdInvariant
(
'
12
'
typeof
element
=
=
=
'
function
'
?
'
Instead
of
passing
a
component
class
make
sure
to
instantiate
'
+
'
it
by
passing
it
to
React
.
createElement
.
'
:
'
'
)
:
void
0
;
!
(
typeof
element
.
type
!
=
=
'
string
'
)
?
reactProdInvariant
(
'
13
'
element
.
type
)
:
void
0
;
!
(
isForwardRef
(
element
)
|
|
typeof
element
.
type
=
=
=
'
function
'
)
?
reactProdInvariant
(
'
249
'
Array
.
isArray
(
element
.
type
)
?
'
array
'
:
element
.
type
=
=
=
null
?
'
null
'
:
typeof
element
.
type
)
:
void
0
;
if
(
this
.
_rendering
)
{
return
;
}
this
.
_rendering
=
true
;
this
.
_element
=
element
;
this
.
_context
=
getMaskedContext
(
element
.
type
.
contextTypes
context
)
;
if
(
this
.
_instance
)
{
this
.
_updateClassComponent
(
element
this
.
_context
)
;
}
else
{
if
(
isForwardRef
(
element
)
)
{
this
.
_rendered
=
element
.
type
.
render
(
element
.
props
element
.
ref
)
;
}
else
if
(
shouldConstruct
(
element
.
type
)
)
{
this
.
_instance
=
new
element
.
type
(
element
.
props
this
.
_context
this
.
_updater
)
;
this
.
_updateStateFromStaticLifecycle
(
element
.
props
)
;
if
(
element
.
type
.
hasOwnProperty
(
'
contextTypes
'
)
)
{
currentlyValidatingElement
=
element
;
checkPropTypes_1
(
element
.
type
.
contextTypes
this
.
_context
'
context
'
getName
(
element
.
type
this
.
_instance
)
getStackAddendum
)
;
currentlyValidatingElement
=
null
;
}
this
.
_mountClassComponent
(
element
this
.
_context
)
;
}
else
{
this
.
_rendered
=
element
.
type
(
element
.
props
this
.
_context
)
;
}
}
this
.
_rendering
=
false
;
this
.
_updater
.
_invokeCallbacks
(
)
;
return
this
.
getRenderOutput
(
)
;
}
;
ReactShallowRenderer
.
prototype
.
unmount
=
function
unmount
(
)
{
if
(
this
.
_instance
)
{
if
(
typeof
this
.
_instance
.
componentWillUnmount
=
=
=
'
function
'
)
{
this
.
_instance
.
componentWillUnmount
(
)
;
}
}
this
.
_context
=
null
;
this
.
_element
=
null
;
this
.
_newState
=
null
;
this
.
_rendered
=
null
;
this
.
_instance
=
null
;
}
;
ReactShallowRenderer
.
prototype
.
_mountClassComponent
=
function
_mountClassComponent
(
element
context
)
{
this
.
_instance
.
context
=
context
;
this
.
_instance
.
props
=
element
.
props
;
this
.
_instance
.
state
=
this
.
_instance
.
state
|
|
null
;
this
.
_instance
.
updater
=
this
.
_updater
;
if
(
typeof
this
.
_instance
.
UNSAFE_componentWillMount
=
=
=
'
function
'
|
|
typeof
this
.
_instance
.
componentWillMount
=
=
=
'
function
'
)
{
var
beforeState
=
this
.
_newState
;
if
(
typeof
element
.
type
.
getDerivedStateFromProps
!
=
=
'
function
'
&
&
typeof
this
.
_instance
.
getSnapshotBeforeUpdate
!
=
=
'
function
'
)
{
if
(
typeof
this
.
_instance
.
componentWillMount
=
=
=
'
function
'
)
{
this
.
_instance
.
componentWillMount
(
)
;
}
if
(
typeof
this
.
_instance
.
UNSAFE_componentWillMount
=
=
=
'
function
'
)
{
this
.
_instance
.
UNSAFE_componentWillMount
(
)
;
}
}
if
(
beforeState
!
=
=
this
.
_newState
)
{
this
.
_instance
.
state
=
this
.
_newState
|
|
emptyObject_1
;
}
}
this
.
_rendered
=
this
.
_instance
.
render
(
)
;
}
;
ReactShallowRenderer
.
prototype
.
_updateClassComponent
=
function
_updateClassComponent
(
element
context
)
{
var
props
=
element
.
props
type
=
element
.
type
;
var
oldState
=
this
.
_instance
.
state
|
|
emptyObject_1
;
var
oldProps
=
this
.
_instance
.
props
;
if
(
oldProps
!
=
=
props
)
{
if
(
typeof
element
.
type
.
getDerivedStateFromProps
!
=
=
'
function
'
&
&
typeof
this
.
_instance
.
getSnapshotBeforeUpdate
!
=
=
'
function
'
)
{
if
(
typeof
this
.
_instance
.
componentWillReceiveProps
=
=
=
'
function
'
)
{
this
.
_instance
.
componentWillReceiveProps
(
props
context
)
;
}
if
(
typeof
this
.
_instance
.
UNSAFE_componentWillReceiveProps
=
=
=
'
function
'
)
{
this
.
_instance
.
UNSAFE_componentWillReceiveProps
(
props
context
)
;
}
}
}
this
.
_updateStateFromStaticLifecycle
(
props
)
;
var
state
=
this
.
_newState
|
|
oldState
;
var
shouldUpdate
=
true
;
if
(
this
.
_forcedUpdate
)
{
shouldUpdate
=
true
;
this
.
_forcedUpdate
=
false
;
}
else
if
(
typeof
this
.
_instance
.
shouldComponentUpdate
=
=
=
'
function
'
)
{
shouldUpdate
=
!
!
this
.
_instance
.
shouldComponentUpdate
(
props
state
context
)
;
}
else
if
(
type
.
prototype
&
&
type
.
prototype
.
isPureReactComponent
)
{
shouldUpdate
=
!
shallowEqual_1
(
oldProps
props
)
|
|
!
shallowEqual_1
(
oldState
state
)
;
}
if
(
shouldUpdate
)
{
if
(
typeof
element
.
type
.
getDerivedStateFromProps
!
=
=
'
function
'
&
&
typeof
this
.
_instance
.
getSnapshotBeforeUpdate
!
=
=
'
function
'
)
{
if
(
typeof
this
.
_instance
.
componentWillUpdate
=
=
=
'
function
'
)
{
this
.
_instance
.
componentWillUpdate
(
props
state
context
)
;
}
if
(
typeof
this
.
_instance
.
UNSAFE_componentWillUpdate
=
=
=
'
function
'
)
{
this
.
_instance
.
UNSAFE_componentWillUpdate
(
props
state
context
)
;
}
}
}
this
.
_instance
.
context
=
context
;
this
.
_instance
.
props
=
props
;
this
.
_instance
.
state
=
state
;
if
(
shouldUpdate
)
{
this
.
_rendered
=
this
.
_instance
.
render
(
)
;
}
}
;
ReactShallowRenderer
.
prototype
.
_updateStateFromStaticLifecycle
=
function
_updateStateFromStaticLifecycle
(
props
)
{
var
type
=
this
.
_element
.
type
;
if
(
typeof
type
.
getDerivedStateFromProps
=
=
=
'
function
'
)
{
var
oldState
=
this
.
_newState
|
|
this
.
_instance
.
state
;
var
partialState
=
type
.
getDerivedStateFromProps
.
call
(
null
props
oldState
)
;
if
(
partialState
!
=
null
)
{
var
newState
=
_assign
(
{
}
oldState
partialState
)
;
this
.
_instance
.
state
=
this
.
_newState
=
newState
;
}
}
}
;
return
ReactShallowRenderer
;
}
(
)
;
ReactShallowRenderer
.
createRenderer
=
function
(
)
{
return
new
ReactShallowRenderer
(
)
;
}
;
var
Updater
=
function
(
)
{
function
Updater
(
renderer
)
{
_classCallCheck
(
this
Updater
)
;
this
.
_renderer
=
renderer
;
this
.
_callbacks
=
[
]
;
}
Updater
.
prototype
.
_enqueueCallback
=
function
_enqueueCallback
(
callback
publicInstance
)
{
if
(
typeof
callback
=
=
=
'
function
'
&
&
publicInstance
)
{
this
.
_callbacks
.
push
(
{
callback
:
callback
publicInstance
:
publicInstance
}
)
;
}
}
;
Updater
.
prototype
.
_invokeCallbacks
=
function
_invokeCallbacks
(
)
{
var
callbacks
=
this
.
_callbacks
;
this
.
_callbacks
=
[
]
;
callbacks
.
forEach
(
function
(
_ref
)
{
var
callback
=
_ref
.
callback
publicInstance
=
_ref
.
publicInstance
;
callback
.
call
(
publicInstance
)
;
}
)
;
}
;
Updater
.
prototype
.
isMounted
=
function
isMounted
(
publicInstance
)
{
return
!
!
this
.
_renderer
.
_element
;
}
;
Updater
.
prototype
.
enqueueForceUpdate
=
function
enqueueForceUpdate
(
publicInstance
callback
callerName
)
{
this
.
_enqueueCallback
(
callback
publicInstance
)
;
this
.
_renderer
.
_forcedUpdate
=
true
;
this
.
_renderer
.
render
(
this
.
_renderer
.
_element
this
.
_renderer
.
_context
)
;
}
;
Updater
.
prototype
.
enqueueReplaceState
=
function
enqueueReplaceState
(
publicInstance
completeState
callback
callerName
)
{
this
.
_enqueueCallback
(
callback
publicInstance
)
;
this
.
_renderer
.
_newState
=
completeState
;
this
.
_renderer
.
render
(
this
.
_renderer
.
_element
this
.
_renderer
.
_context
)
;
}
;
Updater
.
prototype
.
enqueueSetState
=
function
enqueueSetState
(
publicInstance
partialState
callback
callerName
)
{
this
.
_enqueueCallback
(
callback
publicInstance
)
;
var
currentState
=
this
.
_renderer
.
_newState
|
|
publicInstance
.
state
;
if
(
typeof
partialState
=
=
=
'
function
'
)
{
partialState
=
partialState
.
call
(
publicInstance
currentState
publicInstance
.
props
)
;
}
if
(
partialState
=
=
=
null
|
|
partialState
=
=
=
undefined
)
{
return
;
}
this
.
_renderer
.
_newState
=
_assign
(
{
}
currentState
partialState
)
;
this
.
_renderer
.
render
(
this
.
_renderer
.
_element
this
.
_renderer
.
_context
)
;
}
;
return
Updater
;
}
(
)
;
var
currentlyValidatingElement
=
null
;
function
getDisplayName
(
element
)
{
if
(
element
=
=
null
)
{
return
'
#
empty
'
;
}
else
if
(
typeof
element
=
=
=
'
string
'
|
|
typeof
element
=
=
=
'
number
'
)
{
return
'
#
text
'
;
}
else
if
(
typeof
element
.
type
=
=
=
'
string
'
)
{
return
element
.
type
;
}
else
{
return
element
.
type
.
displayName
|
|
element
.
type
.
name
|
|
'
Unknown
'
;
}
}
function
getStackAddendum
(
)
{
var
stack
=
'
'
;
if
(
currentlyValidatingElement
)
{
var
name
=
getDisplayName
(
currentlyValidatingElement
)
;
var
owner
=
currentlyValidatingElement
.
_owner
;
stack
+
=
describeComponentFrame
(
name
currentlyValidatingElement
.
_source
owner
&
&
getComponentName
(
owner
)
)
;
}
return
stack
;
}
function
getName
(
type
instance
)
{
var
constructor
=
instance
&
&
instance
.
constructor
;
return
type
.
displayName
|
|
constructor
&
&
constructor
.
displayName
|
|
type
.
name
|
|
constructor
&
&
constructor
.
name
|
|
null
;
}
function
shouldConstruct
(
Component
)
{
return
!
!
(
Component
.
prototype
&
&
Component
.
prototype
.
isReactComponent
)
;
}
function
getMaskedContext
(
contextTypes
unmaskedContext
)
{
if
(
!
contextTypes
)
{
return
emptyObject_1
;
}
var
context
=
{
}
;
for
(
var
key
in
contextTypes
)
{
context
[
key
]
=
unmaskedContext
[
key
]
;
}
return
context
;
}
var
ReactShallowRenderer
2
=
(
{
default
:
ReactShallowRenderer
}
)
;
var
ReactShallowRenderer
3
=
(
ReactShallowRenderer
2
&
&
ReactShallowRenderer
)
|
|
ReactShallowRenderer
2
;
var
shallow
=
ReactShallowRenderer
3
.
default
?
ReactShallowRenderer
3
.
default
:
ReactShallowRenderer
3
;
return
shallow
;
}
)
)
)
;
