export
interface
Action
<
T
=
any
>
{
type
:
T
;
}
export
interface
AnyAction
extends
Action
{
[
extraProps
:
string
]
:
any
;
}
export
type
Reducer
<
S
=
any
A
extends
Action
=
AnyAction
>
=
(
state
:
S
|
undefined
action
:
A
)
=
>
S
;
export
type
ReducersMapObject
<
S
=
any
A
extends
Action
=
Action
>
=
{
[
K
in
keyof
S
]
:
Reducer
<
S
[
K
]
A
>
}
;
export
function
combineReducers
<
S
>
(
reducers
:
ReducersMapObject
<
S
any
>
)
:
Reducer
<
S
>
;
export
function
combineReducers
<
S
A
extends
Action
=
AnyAction
>
(
reducers
:
ReducersMapObject
<
S
A
>
)
:
Reducer
<
S
A
>
;
export
interface
Dispatch
<
A
extends
Action
=
AnyAction
>
{
<
T
extends
A
>
(
action
:
T
)
:
T
;
}
export
interface
Unsubscribe
{
(
)
:
void
;
}
export
interface
Store
<
S
=
any
A
extends
Action
=
AnyAction
>
{
dispatch
:
Dispatch
<
A
>
;
getState
(
)
:
S
;
subscribe
(
listener
:
(
)
=
>
void
)
:
Unsubscribe
;
replaceReducer
(
nextReducer
:
Reducer
<
S
A
>
)
:
void
;
}
export
type
DeepPartial
<
T
>
=
{
[
K
in
keyof
T
]
?
:
T
[
K
]
extends
object
?
DeepPartial
<
T
[
K
]
>
:
T
[
K
]
}
;
export
interface
StoreCreator
{
<
S
A
extends
Action
Ext
StateExt
>
(
reducer
:
Reducer
<
S
A
>
enhancer
?
:
StoreEnhancer
<
Ext
StateExt
>
)
:
Store
<
S
&
StateExt
A
>
&
Ext
;
<
S
A
extends
Action
Ext
StateExt
>
(
reducer
:
Reducer
<
S
A
>
preloadedState
?
:
DeepPartial
<
S
>
enhancer
?
:
StoreEnhancer
<
Ext
>
)
:
Store
<
S
&
StateExt
A
>
&
Ext
;
}
export
const
createStore
:
StoreCreator
;
export
type
StoreEnhancer
<
Ext
=
{
}
StateExt
=
{
}
>
=
(
next
:
StoreEnhancerStoreCreator
)
=
>
StoreEnhancerStoreCreator
<
Ext
StateExt
>
;
export
type
StoreEnhancerStoreCreator
<
Ext
=
{
}
StateExt
=
{
}
>
=
<
S
=
any
A
extends
Action
=
AnyAction
>
(
reducer
:
Reducer
<
S
A
>
preloadedState
?
:
DeepPartial
<
S
>
)
=
>
Store
<
S
&
StateExt
A
>
&
Ext
;
export
interface
MiddlewareAPI
<
D
extends
Dispatch
=
Dispatch
S
=
any
>
{
dispatch
:
D
;
getState
(
)
:
S
;
}
export
interface
Middleware
<
DispatchExt
=
{
}
S
=
any
D
extends
Dispatch
=
Dispatch
>
{
(
api
:
MiddlewareAPI
<
D
S
>
)
:
(
next
:
Dispatch
<
AnyAction
>
)
=
>
(
action
:
any
)
=
>
any
;
}
export
function
applyMiddleware
(
)
:
StoreEnhancer
;
export
function
applyMiddleware
<
Ext1
S
>
(
middleware1
:
Middleware
<
Ext1
S
any
>
)
:
StoreEnhancer
<
{
dispatch
:
Ext1
}
>
;
export
function
applyMiddleware
<
Ext1
Ext2
S
>
(
middleware1
:
Middleware
<
Ext1
S
any
>
middleware2
:
Middleware
<
Ext2
S
any
>
)
:
StoreEnhancer
<
{
dispatch
:
Ext1
&
Ext2
}
>
;
export
function
applyMiddleware
<
Ext1
Ext2
Ext3
S
>
(
middleware1
:
Middleware
<
Ext1
S
any
>
middleware2
:
Middleware
<
Ext2
S
any
>
middleware3
:
Middleware
<
Ext3
S
any
>
)
:
StoreEnhancer
<
{
dispatch
:
Ext1
&
Ext2
&
Ext3
}
>
;
export
function
applyMiddleware
<
Ext1
Ext2
Ext3
Ext4
S
>
(
middleware1
:
Middleware
<
Ext1
S
any
>
middleware2
:
Middleware
<
Ext2
S
any
>
middleware3
:
Middleware
<
Ext3
S
any
>
middleware4
:
Middleware
<
Ext4
S
any
>
)
:
StoreEnhancer
<
{
dispatch
:
Ext1
&
Ext2
&
Ext3
&
Ext4
}
>
;
export
function
applyMiddleware
<
Ext1
Ext2
Ext3
Ext4
Ext5
S
>
(
middleware1
:
Middleware
<
Ext1
S
any
>
middleware2
:
Middleware
<
Ext2
S
any
>
middleware3
:
Middleware
<
Ext3
S
any
>
middleware4
:
Middleware
<
Ext4
S
any
>
middleware5
:
Middleware
<
Ext5
S
any
>
)
:
StoreEnhancer
<
{
dispatch
:
Ext1
&
Ext2
&
Ext3
&
Ext4
&
Ext5
}
>
;
export
function
applyMiddleware
<
Ext
S
=
any
>
(
.
.
.
middlewares
:
Middleware
<
any
S
any
>
[
]
)
:
StoreEnhancer
<
{
dispatch
:
Ext
}
>
;
export
interface
ActionCreator
<
A
>
{
(
.
.
.
args
:
any
[
]
)
:
A
;
}
export
interface
ActionCreatorsMapObject
<
A
=
any
>
{
[
key
:
string
]
:
ActionCreator
<
A
>
;
}
export
function
bindActionCreators
<
A
C
extends
ActionCreator
<
A
>
>
(
actionCreator
:
C
dispatch
:
Dispatch
)
:
C
;
export
function
bindActionCreators
<
A
extends
ActionCreator
<
any
>
B
extends
ActionCreator
<
any
>
>
(
actionCreator
:
A
dispatch
:
Dispatch
)
:
B
;
export
function
bindActionCreators
<
A
M
extends
ActionCreatorsMapObject
<
A
>
>
(
actionCreators
:
M
dispatch
:
Dispatch
)
:
M
;
export
function
bindActionCreators
<
M
extends
ActionCreatorsMapObject
<
any
>
N
extends
ActionCreatorsMapObject
<
any
>
>
(
actionCreators
:
M
dispatch
:
Dispatch
)
:
N
;
type
Func0
<
R
>
=
(
)
=
>
R
;
type
Func1
<
T1
R
>
=
(
a1
:
T1
)
=
>
R
;
type
Func2
<
T1
T2
R
>
=
(
a1
:
T1
a2
:
T2
)
=
>
R
;
type
Func3
<
T1
T2
T3
R
>
=
(
a1
:
T1
a2
:
T2
a3
:
T3
.
.
.
args
:
any
[
]
)
=
>
R
;
export
function
compose
(
)
:
<
R
>
(
a
:
R
)
=
>
R
;
export
function
compose
<
F
extends
Function
>
(
f
:
F
)
:
F
;
export
function
compose
<
A
R
>
(
f1
:
(
b
:
A
)
=
>
R
f2
:
Func0
<
A
>
)
:
Func0
<
R
>
;
export
function
compose
<
A
T1
R
>
(
f1
:
(
b
:
A
)
=
>
R
f2
:
Func1
<
T1
A
>
)
:
Func1
<
T1
R
>
;
export
function
compose
<
A
T1
T2
R
>
(
f1
:
(
b
:
A
)
=
>
R
f2
:
Func2
<
T1
T2
A
>
)
:
Func2
<
T1
T2
R
>
;
export
function
compose
<
A
T1
T2
T3
R
>
(
f1
:
(
b
:
A
)
=
>
R
f2
:
Func3
<
T1
T2
T3
A
>
)
:
Func3
<
T1
T2
T3
R
>
;
export
function
compose
<
A
B
R
>
(
f1
:
(
b
:
B
)
=
>
R
f2
:
(
a
:
A
)
=
>
B
f3
:
Func0
<
A
>
)
:
Func0
<
R
>
;
export
function
compose
<
A
B
T1
R
>
(
f1
:
(
b
:
B
)
=
>
R
f2
:
(
a
:
A
)
=
>
B
f3
:
Func1
<
T1
A
>
)
:
Func1
<
T1
R
>
;
export
function
compose
<
A
B
T1
T2
R
>
(
f1
:
(
b
:
B
)
=
>
R
f2
:
(
a
:
A
)
=
>
B
f3
:
Func2
<
T1
T2
A
>
)
:
Func2
<
T1
T2
R
>
;
export
function
compose
<
A
B
T1
T2
T3
R
>
(
f1
:
(
b
:
B
)
=
>
R
f2
:
(
a
:
A
)
=
>
B
f3
:
Func3
<
T1
T2
T3
A
>
)
:
Func3
<
T1
T2
T3
R
>
;
export
function
compose
<
A
B
C
R
>
(
f1
:
(
b
:
C
)
=
>
R
f2
:
(
a
:
B
)
=
>
C
f3
:
(
a
:
A
)
=
>
B
f4
:
Func0
<
A
>
)
:
Func0
<
R
>
;
export
function
compose
<
A
B
C
T1
R
>
(
f1
:
(
b
:
C
)
=
>
R
f2
:
(
a
:
B
)
=
>
C
f3
:
(
a
:
A
)
=
>
B
f4
:
Func1
<
T1
A
>
)
:
Func1
<
T1
R
>
;
export
function
compose
<
A
B
C
T1
T2
R
>
(
f1
:
(
b
:
C
)
=
>
R
f2
:
(
a
:
B
)
=
>
C
f3
:
(
a
:
A
)
=
>
B
f4
:
Func2
<
T1
T2
A
>
)
:
Func2
<
T1
T2
R
>
;
export
function
compose
<
A
B
C
T1
T2
T3
R
>
(
f1
:
(
b
:
C
)
=
>
R
f2
:
(
a
:
B
)
=
>
C
f3
:
(
a
:
A
)
=
>
B
f4
:
Func3
<
T1
T2
T3
A
>
)
:
Func3
<
T1
T2
T3
R
>
;
export
function
compose
<
R
>
(
f1
:
(
b
:
any
)
=
>
R
.
.
.
funcs
:
Function
[
]
)
:
(
.
.
.
args
:
any
[
]
)
=
>
R
;
export
function
compose
<
R
>
(
.
.
.
funcs
:
Function
[
]
)
:
(
.
.
.
args
:
any
[
]
)
=
>
R
;
