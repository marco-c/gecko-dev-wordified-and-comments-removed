(
function
(
global
factory
)
{
typeof
exports
=
=
=
'
object
'
&
&
typeof
module
!
=
=
'
undefined
'
?
module
.
exports
=
factory
(
)
:
typeof
define
=
=
=
'
function
'
&
&
define
.
amd
?
define
(
factory
)
:
(
global
.
React
=
factory
(
)
)
;
}
(
this
(
function
(
)
{
'
use
strict
'
;
var
getOwnPropertySymbols
=
Object
.
getOwnPropertySymbols
;
var
hasOwnProperty
=
Object
.
prototype
.
hasOwnProperty
;
var
propIsEnumerable
=
Object
.
prototype
.
propertyIsEnumerable
;
function
toObject
(
val
)
{
if
(
val
=
=
=
null
|
|
val
=
=
=
undefined
)
{
throw
new
TypeError
(
'
Object
.
assign
cannot
be
called
with
null
or
undefined
'
)
;
}
return
Object
(
val
)
;
}
function
shouldUseNative
(
)
{
try
{
if
(
!
Object
.
assign
)
{
return
false
;
}
var
test1
=
new
String
(
'
abc
'
)
;
test1
[
5
]
=
'
de
'
;
if
(
Object
.
getOwnPropertyNames
(
test1
)
[
0
]
=
=
=
'
5
'
)
{
return
false
;
}
var
test2
=
{
}
;
for
(
var
i
=
0
;
i
<
10
;
i
+
+
)
{
test2
[
'
_
'
+
String
.
fromCharCode
(
i
)
]
=
i
;
}
var
order2
=
Object
.
getOwnPropertyNames
(
test2
)
.
map
(
function
(
n
)
{
return
test2
[
n
]
;
}
)
;
if
(
order2
.
join
(
'
'
)
!
=
=
'
0123456789
'
)
{
return
false
;
}
var
test3
=
{
}
;
'
abcdefghijklmnopqrst
'
.
split
(
'
'
)
.
forEach
(
function
(
letter
)
{
test3
[
letter
]
=
letter
;
}
)
;
if
(
Object
.
keys
(
Object
.
assign
(
{
}
test3
)
)
.
join
(
'
'
)
!
=
=
'
abcdefghijklmnopqrst
'
)
{
return
false
;
}
return
true
;
}
catch
(
err
)
{
return
false
;
}
}
var
objectAssign
=
shouldUseNative
(
)
?
Object
.
assign
:
function
(
target
source
)
{
var
from
;
var
to
=
toObject
(
target
)
;
var
symbols
;
for
(
var
s
=
1
;
s
<
arguments
.
length
;
s
+
+
)
{
from
=
Object
(
arguments
[
s
]
)
;
for
(
var
key
in
from
)
{
if
(
hasOwnProperty
.
call
(
from
key
)
)
{
to
[
key
]
=
from
[
key
]
;
}
}
if
(
getOwnPropertySymbols
)
{
symbols
=
getOwnPropertySymbols
(
from
)
;
for
(
var
i
=
0
;
i
<
symbols
.
length
;
i
+
+
)
{
if
(
propIsEnumerable
.
call
(
from
symbols
[
i
]
)
)
{
to
[
symbols
[
i
]
]
=
from
[
symbols
[
i
]
]
;
}
}
}
}
return
to
;
}
;
var
ReactVersion
=
'
16
.
4
.
1
'
;
var
hasSymbol
=
typeof
Symbol
=
=
=
'
function
'
&
&
Symbol
.
for
;
var
REACT_ELEMENT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
element
'
)
:
0xeac7
;
var
REACT_PORTAL_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
portal
'
)
:
0xeaca
;
var
REACT_FRAGMENT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
fragment
'
)
:
0xeacb
;
var
REACT_STRICT_MODE_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
strict_mode
'
)
:
0xeacc
;
var
REACT_PROFILER_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
profiler
'
)
:
0xead2
;
var
REACT_PROVIDER_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
provider
'
)
:
0xeacd
;
var
REACT_CONTEXT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
context
'
)
:
0xeace
;
var
REACT_ASYNC_MODE_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
async_mode
'
)
:
0xeacf
;
var
REACT_FORWARD_REF_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
forward_ref
'
)
:
0xead0
;
var
REACT_TIMEOUT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
timeout
'
)
:
0xead1
;
var
MAYBE_ITERATOR_SYMBOL
=
typeof
Symbol
=
=
=
'
function
'
&
&
Symbol
.
iterator
;
var
FAUX_ITERATOR_SYMBOL
=
'
iterator
'
;
function
getIteratorFn
(
maybeIterable
)
{
if
(
maybeIterable
=
=
=
null
|
|
typeof
maybeIterable
=
=
=
'
undefined
'
)
{
return
null
;
}
var
maybeIterator
=
MAYBE_ITERATOR_SYMBOL
&
&
maybeIterable
[
MAYBE_ITERATOR_SYMBOL
]
|
|
maybeIterable
[
FAUX_ITERATOR_SYMBOL
]
;
if
(
typeof
maybeIterator
=
=
=
'
function
'
)
{
return
maybeIterator
;
}
return
null
;
}
function
invariant
(
condition
format
a
b
c
d
e
f
)
{
if
(
!
condition
)
{
var
error
;
if
(
format
=
=
=
undefined
)
{
error
=
new
Error
(
'
Minified
exception
occurred
;
use
the
non
-
minified
dev
environment
'
+
'
for
the
full
error
message
and
additional
helpful
warnings
.
'
)
;
}
else
{
var
args
=
[
a
b
c
d
e
f
]
;
var
argIndex
=
0
;
error
=
new
Error
(
format
.
replace
(
/
%
s
/
g
function
(
)
{
return
args
[
argIndex
+
+
]
;
}
)
)
;
error
.
name
=
'
Invariant
Violation
'
;
}
error
.
framesToPop
=
1
;
throw
error
;
}
}
var
invariant_1
=
invariant
;
function
reactProdInvariant
(
code
)
{
var
argCount
=
arguments
.
length
-
1
;
var
url
=
'
https
:
/
/
reactjs
.
org
/
docs
/
error
-
decoder
.
html
?
invariant
=
'
+
code
;
for
(
var
argIdx
=
0
;
argIdx
<
argCount
;
argIdx
+
+
)
{
url
+
=
'
&
args
[
]
=
'
+
encodeURIComponent
(
arguments
[
argIdx
+
1
]
)
;
}
var
i
=
invariant_1
;
i
(
false
'
Minified
React
error
#
'
+
code
+
'
;
visit
%
s
'
+
'
for
the
full
message
or
use
the
non
-
minified
dev
environment
'
+
'
for
full
errors
and
additional
helpful
warnings
.
'
url
)
;
}
var
enableSuspense
=
false
;
var
emptyObject
=
{
}
;
var
emptyObject_1
=
emptyObject
;
function
makeEmptyFunction
(
arg
)
{
return
function
(
)
{
return
arg
;
}
;
}
var
emptyFunction
=
function
emptyFunction
(
)
{
}
;
emptyFunction
.
thatReturns
=
makeEmptyFunction
;
emptyFunction
.
thatReturnsFalse
=
makeEmptyFunction
(
false
)
;
emptyFunction
.
thatReturnsTrue
=
makeEmptyFunction
(
true
)
;
emptyFunction
.
thatReturnsNull
=
makeEmptyFunction
(
null
)
;
emptyFunction
.
thatReturnsThis
=
function
(
)
{
return
this
;
}
;
emptyFunction
.
thatReturnsArgument
=
function
(
arg
)
{
return
arg
;
}
;
var
emptyFunction_1
=
emptyFunction
;
var
ReactNoopUpdateQueue
=
{
isMounted
:
function
(
publicInstance
)
{
return
false
;
}
enqueueForceUpdate
:
function
(
publicInstance
callback
callerName
)
{
}
enqueueReplaceState
:
function
(
publicInstance
completeState
callback
callerName
)
{
}
enqueueSetState
:
function
(
publicInstance
partialState
callback
callerName
)
{
}
}
;
function
Component
(
props
context
updater
)
{
this
.
props
=
props
;
this
.
context
=
context
;
this
.
refs
=
emptyObject_1
;
this
.
updater
=
updater
|
|
ReactNoopUpdateQueue
;
}
Component
.
prototype
.
isReactComponent
=
{
}
;
Component
.
prototype
.
setState
=
function
(
partialState
callback
)
{
!
(
typeof
partialState
=
=
=
'
object
'
|
|
typeof
partialState
=
=
=
'
function
'
|
|
partialState
=
=
null
)
?
reactProdInvariant
(
'
85
'
)
:
void
0
;
this
.
updater
.
enqueueSetState
(
this
partialState
callback
'
setState
'
)
;
}
;
Component
.
prototype
.
forceUpdate
=
function
(
callback
)
{
this
.
updater
.
enqueueForceUpdate
(
this
callback
'
forceUpdate
'
)
;
}
;
function
ComponentDummy
(
)
{
}
ComponentDummy
.
prototype
=
Component
.
prototype
;
function
PureComponent
(
props
context
updater
)
{
this
.
props
=
props
;
this
.
context
=
context
;
this
.
refs
=
emptyObject_1
;
this
.
updater
=
updater
|
|
ReactNoopUpdateQueue
;
}
var
pureComponentPrototype
=
PureComponent
.
prototype
=
new
ComponentDummy
(
)
;
pureComponentPrototype
.
constructor
=
PureComponent
;
objectAssign
(
pureComponentPrototype
Component
.
prototype
)
;
pureComponentPrototype
.
isPureReactComponent
=
true
;
function
createRef
(
)
{
var
refObject
=
{
current
:
null
}
;
return
refObject
;
}
var
ReactCurrentOwner
=
{
current
:
null
}
;
var
hasOwnProperty
1
=
Object
.
prototype
.
hasOwnProperty
;
var
RESERVED_PROPS
=
{
key
:
true
ref
:
true
__self
:
true
__source
:
true
}
;
function
hasValidRef
(
config
)
{
return
config
.
ref
!
=
=
undefined
;
}
function
hasValidKey
(
config
)
{
return
config
.
key
!
=
=
undefined
;
}
var
ReactElement
=
function
(
type
key
ref
self
source
owner
props
)
{
var
element
=
{
typeof
:
REACT_ELEMENT_TYPE
type
:
type
key
:
key
ref
:
ref
props
:
props
_owner
:
owner
}
;
return
element
;
}
;
function
createElement
(
type
config
children
)
{
var
propName
=
void
0
;
var
props
=
{
}
;
var
key
=
null
;
var
ref
=
null
;
var
self
=
null
;
var
source
=
null
;
if
(
config
!
=
null
)
{
if
(
hasValidRef
(
config
)
)
{
ref
=
config
.
ref
;
}
if
(
hasValidKey
(
config
)
)
{
key
=
'
'
+
config
.
key
;
}
self
=
config
.
__self
=
=
=
undefined
?
null
:
config
.
__self
;
source
=
config
.
__source
=
=
=
undefined
?
null
:
config
.
__source
;
for
(
propName
in
config
)
{
if
(
hasOwnProperty
1
.
call
(
config
propName
)
&
&
!
RESERVED_PROPS
.
hasOwnProperty
(
propName
)
)
{
props
[
propName
]
=
config
[
propName
]
;
}
}
}
var
childrenLength
=
arguments
.
length
-
2
;
if
(
childrenLength
=
=
=
1
)
{
props
.
children
=
children
;
}
else
if
(
childrenLength
>
1
)
{
var
childArray
=
Array
(
childrenLength
)
;
for
(
var
i
=
0
;
i
<
childrenLength
;
i
+
+
)
{
childArray
[
i
]
=
arguments
[
i
+
2
]
;
}
props
.
children
=
childArray
;
}
if
(
type
&
&
type
.
defaultProps
)
{
var
defaultProps
=
type
.
defaultProps
;
for
(
propName
in
defaultProps
)
{
if
(
props
[
propName
]
=
=
=
undefined
)
{
props
[
propName
]
=
defaultProps
[
propName
]
;
}
}
}
return
ReactElement
(
type
key
ref
self
source
ReactCurrentOwner
.
current
props
)
;
}
function
createFactory
(
type
)
{
var
factory
=
createElement
.
bind
(
null
type
)
;
factory
.
type
=
type
;
return
factory
;
}
function
cloneAndReplaceKey
(
oldElement
newKey
)
{
var
newElement
=
ReactElement
(
oldElement
.
type
newKey
oldElement
.
ref
oldElement
.
_self
oldElement
.
_source
oldElement
.
_owner
oldElement
.
props
)
;
return
newElement
;
}
function
cloneElement
(
element
config
children
)
{
!
!
(
element
=
=
=
null
|
|
element
=
=
=
undefined
)
?
reactProdInvariant
(
'
267
'
element
)
:
void
0
;
var
propName
=
void
0
;
var
props
=
objectAssign
(
{
}
element
.
props
)
;
var
key
=
element
.
key
;
var
ref
=
element
.
ref
;
var
self
=
element
.
_self
;
var
source
=
element
.
_source
;
var
owner
=
element
.
_owner
;
if
(
config
!
=
null
)
{
if
(
hasValidRef
(
config
)
)
{
ref
=
config
.
ref
;
owner
=
ReactCurrentOwner
.
current
;
}
if
(
hasValidKey
(
config
)
)
{
key
=
'
'
+
config
.
key
;
}
var
defaultProps
=
void
0
;
if
(
element
.
type
&
&
element
.
type
.
defaultProps
)
{
defaultProps
=
element
.
type
.
defaultProps
;
}
for
(
propName
in
config
)
{
if
(
hasOwnProperty
1
.
call
(
config
propName
)
&
&
!
RESERVED_PROPS
.
hasOwnProperty
(
propName
)
)
{
if
(
config
[
propName
]
=
=
=
undefined
&
&
defaultProps
!
=
=
undefined
)
{
props
[
propName
]
=
defaultProps
[
propName
]
;
}
else
{
props
[
propName
]
=
config
[
propName
]
;
}
}
}
}
var
childrenLength
=
arguments
.
length
-
2
;
if
(
childrenLength
=
=
=
1
)
{
props
.
children
=
children
;
}
else
if
(
childrenLength
>
1
)
{
var
childArray
=
Array
(
childrenLength
)
;
for
(
var
i
=
0
;
i
<
childrenLength
;
i
+
+
)
{
childArray
[
i
]
=
arguments
[
i
+
2
]
;
}
props
.
children
=
childArray
;
}
return
ReactElement
(
element
.
type
key
ref
self
source
owner
props
)
;
}
function
isValidElement
(
object
)
{
return
typeof
object
=
=
=
'
object
'
&
&
object
!
=
=
null
&
&
object
.
typeof
=
=
=
REACT_ELEMENT_TYPE
;
}
var
SEPARATOR
=
'
.
'
;
var
SUBSEPARATOR
=
'
:
'
;
function
escape
(
key
)
{
var
escapeRegex
=
/
[
=
:
]
/
g
;
var
escaperLookup
=
{
'
=
'
:
'
=
0
'
'
:
'
:
'
=
2
'
}
;
var
escapedString
=
(
'
'
+
key
)
.
replace
(
escapeRegex
function
(
match
)
{
return
escaperLookup
[
match
]
;
}
)
;
return
'
'
+
escapedString
;
}
var
userProvidedKeyEscapeRegex
=
/
\
/
+
/
g
;
function
escapeUserProvidedKey
(
text
)
{
return
(
'
'
+
text
)
.
replace
(
userProvidedKeyEscapeRegex
'
&
/
'
)
;
}
var
POOL_SIZE
=
10
;
var
traverseContextPool
=
[
]
;
function
getPooledTraverseContext
(
mapResult
keyPrefix
mapFunction
mapContext
)
{
if
(
traverseContextPool
.
length
)
{
var
traverseContext
=
traverseContextPool
.
pop
(
)
;
traverseContext
.
result
=
mapResult
;
traverseContext
.
keyPrefix
=
keyPrefix
;
traverseContext
.
func
=
mapFunction
;
traverseContext
.
context
=
mapContext
;
traverseContext
.
count
=
0
;
return
traverseContext
;
}
else
{
return
{
result
:
mapResult
keyPrefix
:
keyPrefix
func
:
mapFunction
context
:
mapContext
count
:
0
}
;
}
}
function
releaseTraverseContext
(
traverseContext
)
{
traverseContext
.
result
=
null
;
traverseContext
.
keyPrefix
=
null
;
traverseContext
.
func
=
null
;
traverseContext
.
context
=
null
;
traverseContext
.
count
=
0
;
if
(
traverseContextPool
.
length
<
POOL_SIZE
)
{
traverseContextPool
.
push
(
traverseContext
)
;
}
}
function
traverseAllChildrenImpl
(
children
nameSoFar
callback
traverseContext
)
{
var
type
=
typeof
children
;
if
(
type
=
=
=
'
undefined
'
|
|
type
=
=
=
'
boolean
'
)
{
children
=
null
;
}
var
invokeCallback
=
false
;
if
(
children
=
=
=
null
)
{
invokeCallback
=
true
;
}
else
{
switch
(
type
)
{
case
'
string
'
:
case
'
number
'
:
invokeCallback
=
true
;
break
;
case
'
object
'
:
switch
(
children
.
typeof
)
{
case
REACT_ELEMENT_TYPE
:
case
REACT_PORTAL_TYPE
:
invokeCallback
=
true
;
}
}
}
if
(
invokeCallback
)
{
callback
(
traverseContext
children
nameSoFar
=
=
=
'
'
?
SEPARATOR
+
getComponentKey
(
children
0
)
:
nameSoFar
)
;
return
1
;
}
var
child
=
void
0
;
var
nextName
=
void
0
;
var
subtreeCount
=
0
;
var
nextNamePrefix
=
nameSoFar
=
=
=
'
'
?
SEPARATOR
:
nameSoFar
+
SUBSEPARATOR
;
if
(
Array
.
isArray
(
children
)
)
{
for
(
var
i
=
0
;
i
<
children
.
length
;
i
+
+
)
{
child
=
children
[
i
]
;
nextName
=
nextNamePrefix
+
getComponentKey
(
child
i
)
;
subtreeCount
+
=
traverseAllChildrenImpl
(
child
nextName
callback
traverseContext
)
;
}
}
else
{
var
iteratorFn
=
getIteratorFn
(
children
)
;
if
(
typeof
iteratorFn
=
=
=
'
function
'
)
{
var
iterator
=
iteratorFn
.
call
(
children
)
;
var
step
=
void
0
;
var
ii
=
0
;
while
(
!
(
step
=
iterator
.
next
(
)
)
.
done
)
{
child
=
step
.
value
;
nextName
=
nextNamePrefix
+
getComponentKey
(
child
ii
+
+
)
;
subtreeCount
+
=
traverseAllChildrenImpl
(
child
nextName
callback
traverseContext
)
;
}
}
else
if
(
type
=
=
=
'
object
'
)
{
var
addendum
=
'
'
;
var
childrenString
=
'
'
+
children
;
reactProdInvariant
(
'
31
'
childrenString
=
=
=
'
[
object
Object
]
'
?
'
object
with
keys
{
'
+
Object
.
keys
(
children
)
.
join
(
'
'
)
+
'
}
'
:
childrenString
addendum
)
;
}
}
return
subtreeCount
;
}
function
traverseAllChildren
(
children
callback
traverseContext
)
{
if
(
children
=
=
null
)
{
return
0
;
}
return
traverseAllChildrenImpl
(
children
'
'
callback
traverseContext
)
;
}
function
getComponentKey
(
component
index
)
{
if
(
typeof
component
=
=
=
'
object
'
&
&
component
!
=
=
null
&
&
component
.
key
!
=
null
)
{
return
escape
(
component
.
key
)
;
}
return
index
.
toString
(
36
)
;
}
function
forEachSingleChild
(
bookKeeping
child
name
)
{
var
func
=
bookKeeping
.
func
context
=
bookKeeping
.
context
;
func
.
call
(
context
child
bookKeeping
.
count
+
+
)
;
}
function
forEachChildren
(
children
forEachFunc
forEachContext
)
{
if
(
children
=
=
null
)
{
return
children
;
}
var
traverseContext
=
getPooledTraverseContext
(
null
null
forEachFunc
forEachContext
)
;
traverseAllChildren
(
children
forEachSingleChild
traverseContext
)
;
releaseTraverseContext
(
traverseContext
)
;
}
function
mapSingleChildIntoContext
(
bookKeeping
child
childKey
)
{
var
result
=
bookKeeping
.
result
keyPrefix
=
bookKeeping
.
keyPrefix
func
=
bookKeeping
.
func
context
=
bookKeeping
.
context
;
var
mappedChild
=
func
.
call
(
context
child
bookKeeping
.
count
+
+
)
;
if
(
Array
.
isArray
(
mappedChild
)
)
{
mapIntoWithKeyPrefixInternal
(
mappedChild
result
childKey
emptyFunction_1
.
thatReturnsArgument
)
;
}
else
if
(
mappedChild
!
=
null
)
{
if
(
isValidElement
(
mappedChild
)
)
{
mappedChild
=
cloneAndReplaceKey
(
mappedChild
keyPrefix
+
(
mappedChild
.
key
&
&
(
!
child
|
|
child
.
key
!
=
=
mappedChild
.
key
)
?
escapeUserProvidedKey
(
mappedChild
.
key
)
+
'
/
'
:
'
'
)
+
childKey
)
;
}
result
.
push
(
mappedChild
)
;
}
}
function
mapIntoWithKeyPrefixInternal
(
children
array
prefix
func
context
)
{
var
escapedPrefix
=
'
'
;
if
(
prefix
!
=
null
)
{
escapedPrefix
=
escapeUserProvidedKey
(
prefix
)
+
'
/
'
;
}
var
traverseContext
=
getPooledTraverseContext
(
array
escapedPrefix
func
context
)
;
traverseAllChildren
(
children
mapSingleChildIntoContext
traverseContext
)
;
releaseTraverseContext
(
traverseContext
)
;
}
function
mapChildren
(
children
func
context
)
{
if
(
children
=
=
null
)
{
return
children
;
}
var
result
=
[
]
;
mapIntoWithKeyPrefixInternal
(
children
result
null
func
context
)
;
return
result
;
}
function
countChildren
(
children
)
{
return
traverseAllChildren
(
children
emptyFunction_1
.
thatReturnsNull
null
)
;
}
function
toArray
(
children
)
{
var
result
=
[
]
;
mapIntoWithKeyPrefixInternal
(
children
result
null
emptyFunction_1
.
thatReturnsArgument
)
;
return
result
;
}
function
onlyChild
(
children
)
{
!
isValidElement
(
children
)
?
reactProdInvariant
(
'
143
'
)
:
void
0
;
return
children
;
}
function
createContext
(
defaultValue
calculateChangedBits
)
{
if
(
calculateChangedBits
=
=
=
undefined
)
{
calculateChangedBits
=
null
;
}
else
{
}
var
context
=
{
typeof
:
REACT_CONTEXT_TYPE
_calculateChangedBits
:
calculateChangedBits
_defaultValue
:
defaultValue
_currentValue
:
defaultValue
_currentValue2
:
defaultValue
_changedBits
:
0
_changedBits2
:
0
Provider
:
null
Consumer
:
null
}
;
context
.
Provider
=
{
typeof
:
REACT_PROVIDER_TYPE
_context
:
context
}
;
context
.
Consumer
=
context
;
return
context
;
}
function
forwardRef
(
render
)
{
return
{
typeof
:
REACT_FORWARD_REF_TYPE
render
:
render
}
;
}
var
React
=
{
Children
:
{
map
:
mapChildren
forEach
:
forEachChildren
count
:
countChildren
toArray
:
toArray
only
:
onlyChild
}
createRef
:
createRef
Component
:
Component
PureComponent
:
PureComponent
createContext
:
createContext
forwardRef
:
forwardRef
Fragment
:
REACT_FRAGMENT_TYPE
StrictMode
:
REACT_STRICT_MODE_TYPE
unstable_AsyncMode
:
REACT_ASYNC_MODE_TYPE
unstable_Profiler
:
REACT_PROFILER_TYPE
createElement
:
createElement
cloneElement
:
cloneElement
createFactory
:
createFactory
isValidElement
:
isValidElement
version
:
ReactVersion
__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
:
{
ReactCurrentOwner
:
ReactCurrentOwner
assign
:
objectAssign
}
}
;
if
(
enableSuspense
)
{
React
.
Timeout
=
REACT_TIMEOUT_TYPE
;
}
var
React
2
=
(
{
default
:
React
}
)
;
var
React
3
=
(
React
2
&
&
React
)
|
|
React
2
;
var
react
=
React
3
.
default
?
React
3
.
default
:
React
3
;
return
react
;
}
)
)
)
;
