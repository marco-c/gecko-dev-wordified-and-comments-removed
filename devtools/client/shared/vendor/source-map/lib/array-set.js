class
ArraySet
{
constructor
(
)
{
this
.
_array
=
[
]
;
this
.
_set
=
new
Map
(
)
;
}
static
fromArray
(
aArray
aAllowDuplicates
)
{
const
set
=
new
ArraySet
(
)
;
for
(
let
i
=
0
len
=
aArray
.
length
;
i
<
len
;
i
+
+
)
{
set
.
add
(
aArray
[
i
]
aAllowDuplicates
)
;
}
return
set
;
}
size
(
)
{
return
this
.
_set
.
size
;
}
add
(
aStr
aAllowDuplicates
)
{
const
isDuplicate
=
this
.
has
(
aStr
)
;
const
idx
=
this
.
_array
.
length
;
if
(
!
isDuplicate
|
|
aAllowDuplicates
)
{
this
.
_array
.
push
(
aStr
)
;
}
if
(
!
isDuplicate
)
{
this
.
_set
.
set
(
aStr
idx
)
;
}
}
has
(
aStr
)
{
return
this
.
_set
.
has
(
aStr
)
;
}
indexOf
(
aStr
)
{
const
idx
=
this
.
_set
.
get
(
aStr
)
;
if
(
idx
>
=
0
)
{
return
idx
;
}
throw
new
Error
(
'
"
'
+
aStr
+
'
"
is
not
in
the
set
.
'
)
;
}
at
(
aIdx
)
{
if
(
aIdx
>
=
0
&
&
aIdx
<
this
.
_array
.
length
)
{
return
this
.
_array
[
aIdx
]
;
}
throw
new
Error
(
"
No
element
indexed
by
"
+
aIdx
)
;
}
toArray
(
)
{
return
this
.
_array
.
slice
(
)
;
}
}
exports
.
ArraySet
=
ArraySet
;
