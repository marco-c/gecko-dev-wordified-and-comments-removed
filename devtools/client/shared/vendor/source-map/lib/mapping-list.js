const
util
=
require
(
"
.
/
util
"
)
;
function
generatedPositionAfter
(
mappingA
mappingB
)
{
const
lineA
=
mappingA
.
generatedLine
;
const
lineB
=
mappingB
.
generatedLine
;
const
columnA
=
mappingA
.
generatedColumn
;
const
columnB
=
mappingB
.
generatedColumn
;
return
(
lineB
>
lineA
|
|
(
lineB
=
=
lineA
&
&
columnB
>
=
columnA
)
|
|
util
.
compareByGeneratedPositionsInflated
(
mappingA
mappingB
)
<
=
0
)
;
}
class
MappingList
{
constructor
(
)
{
this
.
_array
=
[
]
;
this
.
_sorted
=
true
;
this
.
_last
=
{
generatedLine
:
-
1
generatedColumn
:
0
}
;
}
unsortedForEach
(
aCallback
aThisArg
)
{
this
.
_array
.
forEach
(
aCallback
aThisArg
)
;
}
add
(
aMapping
)
{
if
(
generatedPositionAfter
(
this
.
_last
aMapping
)
)
{
this
.
_last
=
aMapping
;
this
.
_array
.
push
(
aMapping
)
;
}
else
{
this
.
_sorted
=
false
;
this
.
_array
.
push
(
aMapping
)
;
}
}
toArray
(
)
{
if
(
!
this
.
_sorted
)
{
this
.
_array
.
sort
(
util
.
compareByGeneratedPositionsInflated
)
;
this
.
_sorted
=
true
;
}
return
this
.
_array
;
}
}
exports
.
MappingList
=
MappingList
;
