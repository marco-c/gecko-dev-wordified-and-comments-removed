;
(
function
(
f
)
{
if
(
typeof
exports
=
=
=
"
object
"
&
&
typeof
module
!
=
=
"
undefined
"
)
{
module
.
exports
=
f
(
require
(
'
devtools
/
client
/
shared
/
vendor
/
react
'
)
)
;
}
else
if
(
typeof
define
=
=
=
"
function
"
&
&
define
.
amd
)
{
define
(
[
'
devtools
/
client
/
shared
/
vendor
/
react
'
]
f
)
;
}
else
{
var
g
;
if
(
typeof
window
!
=
=
"
undefined
"
)
{
g
=
window
;
}
else
if
(
typeof
global
!
=
=
"
undefined
"
)
{
g
=
global
;
}
else
if
(
typeof
self
!
=
=
"
undefined
"
)
{
g
=
self
;
}
else
{
g
=
this
;
}
g
.
ReactDOM
=
f
(
g
.
React
)
;
}
}
)
(
function
(
React
)
{
function
monkeyPatchReactDOM
(
ReactDOM
)
{
const
reactDomRender
=
monkeyPatchRender
(
ReactDOM
)
;
const
lazyFunctionBinding
=
functionLazyBinder
(
)
;
return
new
Proxy
(
{
}
{
get
:
(
target
name
)
=
>
{
return
name
=
=
=
"
render
"
?
reactDomRender
:
lazyFunctionBinding
(
ReactDOM
name
)
;
}
set
:
(
target
name
value
)
=
>
{
ReactDOM
[
name
]
=
value
;
}
}
)
;
}
;
function
monkeyPatchRender
(
ReactDOM
)
{
const
elementProxyCache
=
new
WeakMap
(
)
;
return
(
.
.
.
args
)
=
>
{
const
container
=
args
[
1
]
;
const
toolboxDoc
=
getToolboxDocIfXulOnly
(
container
)
;
if
(
toolboxDoc
)
{
let
proxy
=
elementProxyCache
.
get
(
container
)
;
if
(
!
proxy
)
{
const
lazyFunctionBinding
=
functionLazyBinder
(
)
;
proxy
=
new
Proxy
(
container
{
get
:
function
(
target
name
)
{
if
(
name
=
=
=
"
ownerDocument
"
)
{
return
toolboxDoc
;
}
return
lazyFunctionBinding
(
target
name
)
;
}
}
)
;
elementProxyCache
.
set
(
container
proxy
)
;
}
args
[
1
]
=
proxy
;
}
return
ReactDOM
.
render
.
apply
(
this
args
)
;
}
;
}
function
getToolboxDocIfXulOnly
(
node
)
{
if
(
typeof
XULDocument
!
=
=
"
function
"
)
{
return
null
;
}
let
doc
=
node
.
ownerDocument
;
const
inspectorUrl
=
"
chrome
:
/
/
devtools
/
content
/
inspector
/
inspector
.
xhtml
"
;
const
netMonitorUrl
=
"
chrome
:
/
/
devtools
/
content
/
netmonitor
/
netmonitor
.
xhtml
"
;
const
webConsoleUrl
=
"
chrome
:
/
/
devtools
/
content
/
webconsole
/
webconsole
.
xhtml
"
;
while
(
doc
instanceof
XULDocument
|
|
doc
.
location
.
href
=
=
=
inspectorUrl
|
|
doc
.
location
.
href
=
=
=
netMonitorUrl
|
|
doc
.
location
.
href
=
=
=
webConsoleUrl
)
{
const
{
frameElement
}
=
doc
.
defaultView
;
if
(
!
frameElement
)
{
return
null
;
}
doc
=
frameElement
.
parentElement
.
ownerDocument
;
if
(
doc
.
documentURI
=
=
=
"
about
:
devtools
-
toolbox
"
)
{
return
doc
;
}
}
return
null
;
}
function
functionLazyBinder
(
)
{
const
boundFunctions
=
{
}
;
return
(
target
name
)
=
>
{
if
(
typeof
target
[
name
]
=
=
=
"
function
"
)
{
if
(
boundFunctions
[
name
]
)
{
return
boundFunctions
[
name
]
;
}
boundFunctions
[
name
]
=
target
[
name
]
.
bind
(
target
)
;
return
boundFunctions
[
name
]
;
}
return
target
[
name
]
;
}
;
}
return
monkeyPatchReactDOM
(
React
.
__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
)
;
}
)
;
