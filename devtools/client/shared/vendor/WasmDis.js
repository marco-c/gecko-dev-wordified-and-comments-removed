"
use
strict
"
;
var
__extends
=
(
this
&
&
this
.
__extends
)
|
|
(
function
(
)
{
var
extendStatics
=
function
(
d
b
)
{
extendStatics
=
Object
.
setPrototypeOf
|
|
(
{
__proto__
:
[
]
}
instanceof
Array
&
&
function
(
d
b
)
{
d
.
__proto__
=
b
;
}
)
|
|
function
(
d
b
)
{
for
(
var
p
in
b
)
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
b
p
)
)
d
[
p
]
=
b
[
p
]
;
}
;
return
extendStatics
(
d
b
)
;
}
;
return
function
(
d
b
)
{
if
(
typeof
b
!
=
=
"
function
"
&
&
b
!
=
=
null
)
throw
new
TypeError
(
"
Class
extends
value
"
+
String
(
b
)
+
"
is
not
a
constructor
or
null
"
)
;
extendStatics
(
d
b
)
;
function
__
(
)
{
this
.
constructor
=
d
;
}
d
.
prototype
=
b
=
=
=
null
?
Object
.
create
(
b
)
:
(
__
.
prototype
=
b
.
prototype
new
__
(
)
)
;
}
;
}
)
(
)
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
DevToolsNameGenerator
=
exports
.
DevToolsNameResolver
=
exports
.
NameSectionReader
=
exports
.
WasmDisassembler
=
exports
.
LabelMode
=
exports
.
NumericNameResolver
=
exports
.
DefaultNameResolver
=
void
0
;
var
WasmParser_js_1
=
require
(
"
.
/
WasmParser
.
js
"
)
;
var
NAME_SECTION_NAME
=
"
name
"
;
var
INVALID_NAME_SYMBOLS_REGEX
=
/
[
^
0
-
9A
-
Za
-
z
!
#
%
&
'
*
+
.
:
<
=
>
?
^
_
|
~
\
/
\
-
]
/
;
var
INVALID_NAME_SYMBOLS_REGEX_GLOBAL
=
new
RegExp
(
INVALID_NAME_SYMBOLS_REGEX
.
source
"
g
"
)
;
function
formatFloat32
(
n
)
{
if
(
n
=
=
=
0
)
return
1
/
n
<
0
?
"
-
0
.
0
"
:
"
0
.
0
"
;
if
(
isFinite
(
n
)
)
return
n
.
toString
(
)
;
if
(
!
isNaN
(
n
)
)
return
n
<
0
?
"
-
inf
"
:
"
inf
"
;
var
view
=
new
DataView
(
new
ArrayBuffer
(
8
)
)
;
view
.
setFloat32
(
0
n
true
)
;
var
data
=
view
.
getInt32
(
0
true
)
;
var
payload
=
data
&
0x7fffff
;
var
canonicalBits
=
4194304
;
if
(
data
>
0
&
&
payload
=
=
=
canonicalBits
)
return
"
nan
"
;
else
if
(
payload
=
=
=
canonicalBits
)
return
"
-
nan
"
;
return
(
data
<
0
?
"
-
"
:
"
+
"
)
+
"
nan
:
0x
"
+
payload
.
toString
(
16
)
;
}
function
formatFloat64
(
n
)
{
if
(
n
=
=
=
0
)
return
1
/
n
<
0
?
"
-
0
.
0
"
:
"
0
.
0
"
;
if
(
isFinite
(
n
)
)
return
n
.
toString
(
)
;
if
(
!
isNaN
(
n
)
)
return
n
<
0
?
"
-
inf
"
:
"
inf
"
;
var
view
=
new
DataView
(
new
ArrayBuffer
(
8
)
)
;
view
.
setFloat64
(
0
n
true
)
;
var
data1
=
view
.
getUint32
(
0
true
)
;
var
data2
=
view
.
getInt32
(
4
true
)
;
var
payload
=
data1
+
(
data2
&
0xfffff
)
*
4294967296
;
var
canonicalBits
=
524288
*
4294967296
;
if
(
data2
>
0
&
&
payload
=
=
=
canonicalBits
)
return
"
nan
"
;
else
if
(
payload
=
=
=
canonicalBits
)
return
"
-
nan
"
;
return
(
data2
<
0
?
"
-
"
:
"
+
"
)
+
"
nan
:
0x
"
+
payload
.
toString
(
16
)
;
}
function
formatI32Array
(
bytes
count
)
{
var
dv
=
new
DataView
(
bytes
.
buffer
bytes
.
byteOffset
bytes
.
byteLength
)
;
var
result
=
[
]
;
for
(
var
i
=
0
;
i
<
count
;
i
+
+
)
result
.
push
(
"
0x
"
.
concat
(
formatHex
(
dv
.
getInt32
(
i
<
<
2
true
)
8
)
)
)
;
return
result
.
join
(
"
"
)
;
}
function
formatI8Array
(
bytes
count
)
{
var
dv
=
new
DataView
(
bytes
.
buffer
bytes
.
byteOffset
bytes
.
byteLength
)
;
var
result
=
[
]
;
for
(
var
i
=
0
;
i
<
count
;
i
+
+
)
result
.
push
(
"
"
.
concat
(
dv
.
getInt8
(
i
)
)
)
;
return
result
.
join
(
"
"
)
;
}
function
memoryAddressToString
(
address
code
)
{
var
defaultAlignFlags
;
switch
(
code
)
{
case
1036288
:
case
1036289
:
case
1036290
:
case
1036291
:
case
1036292
:
case
1036293
:
case
1036294
:
case
1036295
:
case
1036296
:
case
1036297
:
case
1036298
:
case
1036299
:
defaultAlignFlags
=
4
;
break
;
case
41
:
case
55
:
case
43
:
case
57
:
case
65026
:
case
65041
:
case
65048
:
case
65055
:
case
65062
:
case
65069
:
case
65076
:
case
65083
:
case
65090
:
case
65097
:
case
1036381
:
case
1036375
:
case
1036379
:
defaultAlignFlags
=
3
;
break
;
case
40
:
case
52
:
case
53
:
case
54
:
case
62
:
case
42
:
case
56
:
case
65024
:
case
65025
:
case
65040
:
case
65046
:
case
65047
:
case
65053
:
case
65054
:
case
65060
:
case
65061
:
case
65067
:
case
65068
:
case
65074
:
case
65075
:
case
65081
:
case
65082
:
case
65088
:
case
65089
:
case
65095
:
case
65096
:
case
65102
:
case
1036380
:
case
1036374
:
case
1036378
:
defaultAlignFlags
=
2
;
break
;
case
46
:
case
47
:
case
50
:
case
51
:
case
59
:
case
61
:
case
65043
:
case
65045
:
case
65050
:
case
65052
:
case
65057
:
case
65059
:
case
65064
:
case
65066
:
case
65071
:
case
65073
:
case
65078
:
case
65080
:
case
65085
:
case
65087
:
case
65092
:
case
65094
:
case
65099
:
case
65101
:
case
1036373
:
case
1036377
:
defaultAlignFlags
=
1
;
break
;
case
44
:
case
45
:
case
48
:
case
49
:
case
58
:
case
60
:
case
65042
:
case
65044
:
case
65049
:
case
65051
:
case
65056
:
case
65058
:
case
65063
:
case
65065
:
case
65070
:
case
65072
:
case
65077
:
case
65079
:
case
65084
:
case
65086
:
case
65091
:
case
65093
:
case
65098
:
case
65100
:
case
1036372
:
case
1036376
:
defaultAlignFlags
=
0
;
break
;
}
if
(
address
.
flags
=
=
defaultAlignFlags
)
return
!
address
.
offset
?
null
:
"
offset
=
"
.
concat
(
address
.
offset
)
;
if
(
!
address
.
offset
)
return
"
align
=
"
.
concat
(
1
<
<
address
.
flags
)
;
return
"
offset
=
"
.
concat
(
address
.
offset
|
0
"
align
=
"
)
.
concat
(
1
<
<
address
.
flags
)
;
}
function
limitsToString
(
limits
)
{
return
(
limits
.
initial
+
(
limits
.
maximum
!
=
=
undefined
?
"
"
+
limits
.
maximum
:
"
"
)
)
;
}
var
paddingCache
=
[
"
0
"
"
00
"
"
000
"
]
;
function
formatHex
(
n
width
)
{
var
s
=
(
n
>
>
>
0
)
.
toString
(
16
)
.
toUpperCase
(
)
;
if
(
width
=
=
=
undefined
|
|
s
.
length
>
=
width
)
return
s
;
var
paddingIndex
=
width
-
s
.
length
-
1
;
while
(
paddingIndex
>
=
paddingCache
.
length
)
paddingCache
.
push
(
paddingCache
[
paddingCache
.
length
-
1
]
+
"
0
"
)
;
return
paddingCache
[
paddingIndex
]
+
s
;
}
var
IndentIncrement
=
"
"
;
function
isValidName
(
name
)
{
return
!
INVALID_NAME_SYMBOLS_REGEX
.
test
(
name
)
;
}
var
DefaultNameResolver
=
(
function
(
)
{
function
DefaultNameResolver
(
)
{
}
DefaultNameResolver
.
prototype
.
getTypeName
=
function
(
index
isRef
)
{
return
"
type
"
+
index
;
}
;
DefaultNameResolver
.
prototype
.
getTableName
=
function
(
index
isRef
)
{
return
"
table
"
+
index
;
}
;
DefaultNameResolver
.
prototype
.
getMemoryName
=
function
(
index
isRef
)
{
return
"
memory
"
+
index
;
}
;
DefaultNameResolver
.
prototype
.
getGlobalName
=
function
(
index
isRef
)
{
return
"
global
"
+
index
;
}
;
DefaultNameResolver
.
prototype
.
getElementName
=
function
(
index
isRef
)
{
return
"
elem
"
.
concat
(
index
)
;
}
;
DefaultNameResolver
.
prototype
.
getTagName
=
function
(
index
isRef
)
{
return
"
tag
"
.
concat
(
index
)
;
}
;
DefaultNameResolver
.
prototype
.
getFunctionName
=
function
(
index
isImport
isRef
)
{
return
(
isImport
?
"
import
"
:
"
func
"
)
+
index
;
}
;
DefaultNameResolver
.
prototype
.
getVariableName
=
function
(
funcIndex
index
isRef
)
{
return
"
var
"
+
index
;
}
;
DefaultNameResolver
.
prototype
.
getFieldName
=
function
(
typeIndex
index
isRef
)
{
return
"
field
"
+
index
;
}
;
DefaultNameResolver
.
prototype
.
getLabel
=
function
(
index
)
{
return
"
label
"
+
index
;
}
;
return
DefaultNameResolver
;
}
(
)
)
;
exports
.
DefaultNameResolver
=
DefaultNameResolver
;
var
EMPTY_STRING_ARRAY
=
[
]
;
var
DevToolsExportMetadata
=
(
function
(
)
{
function
DevToolsExportMetadata
(
functionExportNames
globalExportNames
memoryExportNames
tableExportNames
eventExportNames
)
{
this
.
_functionExportNames
=
functionExportNames
;
this
.
_globalExportNames
=
globalExportNames
;
this
.
_memoryExportNames
=
memoryExportNames
;
this
.
_tableExportNames
=
tableExportNames
;
this
.
_eventExportNames
=
eventExportNames
;
}
DevToolsExportMetadata
.
prototype
.
getFunctionExportNames
=
function
(
index
)
{
var
_a
;
return
(
_a
=
this
.
_functionExportNames
[
index
]
)
!
=
=
null
&
&
_a
!
=
=
void
0
?
_a
:
EMPTY_STRING_ARRAY
;
}
;
DevToolsExportMetadata
.
prototype
.
getGlobalExportNames
=
function
(
index
)
{
var
_a
;
return
(
_a
=
this
.
_globalExportNames
[
index
]
)
!
=
=
null
&
&
_a
!
=
=
void
0
?
_a
:
EMPTY_STRING_ARRAY
;
}
;
DevToolsExportMetadata
.
prototype
.
getMemoryExportNames
=
function
(
index
)
{
var
_a
;
return
(
_a
=
this
.
_memoryExportNames
[
index
]
)
!
=
=
null
&
&
_a
!
=
=
void
0
?
_a
:
EMPTY_STRING_ARRAY
;
}
;
DevToolsExportMetadata
.
prototype
.
getTableExportNames
=
function
(
index
)
{
var
_a
;
return
(
_a
=
this
.
_tableExportNames
[
index
]
)
!
=
=
null
&
&
_a
!
=
=
void
0
?
_a
:
EMPTY_STRING_ARRAY
;
}
;
DevToolsExportMetadata
.
prototype
.
getTagExportNames
=
function
(
index
)
{
var
_a
;
return
(
_a
=
this
.
_eventExportNames
[
index
]
)
!
=
=
null
&
&
_a
!
=
=
void
0
?
_a
:
EMPTY_STRING_ARRAY
;
}
;
return
DevToolsExportMetadata
;
}
(
)
)
;
var
NumericNameResolver
=
(
function
(
)
{
function
NumericNameResolver
(
)
{
}
NumericNameResolver
.
prototype
.
getTypeName
=
function
(
index
isRef
)
{
return
isRef
?
"
"
+
index
:
"
(
;
"
.
concat
(
index
"
;
)
"
)
;
}
;
NumericNameResolver
.
prototype
.
getTableName
=
function
(
index
isRef
)
{
return
isRef
?
"
"
+
index
:
"
(
;
"
.
concat
(
index
"
;
)
"
)
;
}
;
NumericNameResolver
.
prototype
.
getMemoryName
=
function
(
index
isRef
)
{
return
isRef
?
"
"
+
index
:
"
(
;
"
.
concat
(
index
"
;
)
"
)
;
}
;
NumericNameResolver
.
prototype
.
getGlobalName
=
function
(
index
isRef
)
{
return
isRef
?
"
"
+
index
:
"
(
;
"
.
concat
(
index
"
;
)
"
)
;
}
;
NumericNameResolver
.
prototype
.
getElementName
=
function
(
index
isRef
)
{
return
isRef
?
"
"
+
index
:
"
(
;
"
.
concat
(
index
"
;
)
"
)
;
}
;
NumericNameResolver
.
prototype
.
getTagName
=
function
(
index
isRef
)
{
return
isRef
?
"
"
+
index
:
"
(
;
"
.
concat
(
index
"
;
)
"
)
;
}
;
NumericNameResolver
.
prototype
.
getFunctionName
=
function
(
index
isImport
isRef
)
{
return
isRef
?
"
"
+
index
:
"
(
;
"
.
concat
(
index
"
;
)
"
)
;
}
;
NumericNameResolver
.
prototype
.
getVariableName
=
function
(
funcIndex
index
isRef
)
{
return
isRef
?
"
"
+
index
:
"
(
;
"
.
concat
(
index
"
;
)
"
)
;
}
;
NumericNameResolver
.
prototype
.
getFieldName
=
function
(
typeIndex
index
isRef
)
{
return
isRef
?
"
"
:
index
+
"
(
;
"
.
concat
(
index
"
;
)
"
)
;
}
;
NumericNameResolver
.
prototype
.
getLabel
=
function
(
index
)
{
return
null
;
}
;
return
NumericNameResolver
;
}
(
)
)
;
exports
.
NumericNameResolver
=
NumericNameResolver
;
var
LabelMode
;
(
function
(
LabelMode
)
{
LabelMode
[
LabelMode
[
"
Depth
"
]
=
0
]
=
"
Depth
"
;
LabelMode
[
LabelMode
[
"
WhenUsed
"
]
=
1
]
=
"
WhenUsed
"
;
LabelMode
[
LabelMode
[
"
Always
"
]
=
2
]
=
"
Always
"
;
}
)
(
LabelMode
=
exports
.
LabelMode
|
|
(
exports
.
LabelMode
=
{
}
)
)
;
var
WasmDisassembler
=
(
function
(
)
{
function
WasmDisassembler
(
)
{
this
.
_skipTypes
=
true
;
this
.
_exportMetadata
=
null
;
this
.
_lines
=
[
]
;
this
.
_offsets
=
[
]
;
this
.
_buffer
=
"
"
;
this
.
_indent
=
null
;
this
.
_indentLevel
=
0
;
this
.
_addOffsets
=
false
;
this
.
_done
=
false
;
this
.
_currentPosition
=
0
;
this
.
_nameResolver
=
new
DefaultNameResolver
(
)
;
this
.
_labelMode
=
LabelMode
.
WhenUsed
;
this
.
_functionBodyOffsets
=
[
]
;
this
.
_currentFunctionBodyOffset
=
0
;
this
.
_currentSectionId
=
-
1
;
this
.
_logFirstInstruction
=
false
;
this
.
_reset
(
)
;
}
WasmDisassembler
.
prototype
.
_reset
=
function
(
)
{
this
.
_types
=
[
]
;
this
.
_funcIndex
=
0
;
this
.
_funcTypes
=
[
]
;
this
.
_importCount
=
0
;
this
.
_globalCount
=
0
;
this
.
_memoryCount
=
0
;
this
.
_eventCount
=
0
;
this
.
_tableCount
=
0
;
this
.
_elementCount
=
0
;
this
.
_expression
=
[
]
;
this
.
_backrefLabels
=
null
;
this
.
_labelIndex
=
0
;
}
;
Object
.
defineProperty
(
WasmDisassembler
.
prototype
"
addOffsets
"
{
get
:
function
(
)
{
return
this
.
_addOffsets
;
}
set
:
function
(
value
)
{
if
(
this
.
_currentPosition
)
throw
new
Error
(
"
Cannot
switch
addOffsets
during
processing
.
"
)
;
this
.
_addOffsets
=
value
;
}
enumerable
:
false
configurable
:
true
}
)
;
Object
.
defineProperty
(
WasmDisassembler
.
prototype
"
skipTypes
"
{
get
:
function
(
)
{
return
this
.
_skipTypes
;
}
set
:
function
(
skipTypes
)
{
if
(
this
.
_currentPosition
)
throw
new
Error
(
"
Cannot
switch
skipTypes
during
processing
.
"
)
;
this
.
_skipTypes
=
skipTypes
;
}
enumerable
:
false
configurable
:
true
}
)
;
Object
.
defineProperty
(
WasmDisassembler
.
prototype
"
labelMode
"
{
get
:
function
(
)
{
return
this
.
_labelMode
;
}
set
:
function
(
value
)
{
if
(
this
.
_currentPosition
)
throw
new
Error
(
"
Cannot
switch
labelMode
during
processing
.
"
)
;
this
.
_labelMode
=
value
;
}
enumerable
:
false
configurable
:
true
}
)
;
Object
.
defineProperty
(
WasmDisassembler
.
prototype
"
exportMetadata
"
{
get
:
function
(
)
{
return
this
.
_exportMetadata
;
}
set
:
function
(
exportMetadata
)
{
if
(
this
.
_currentPosition
)
throw
new
Error
(
"
Cannot
switch
exportMetadata
during
processing
.
"
)
;
this
.
_exportMetadata
=
exportMetadata
;
}
enumerable
:
false
configurable
:
true
}
)
;
Object
.
defineProperty
(
WasmDisassembler
.
prototype
"
nameResolver
"
{
get
:
function
(
)
{
return
this
.
_nameResolver
;
}
set
:
function
(
resolver
)
{
if
(
this
.
_currentPosition
)
throw
new
Error
(
"
Cannot
switch
nameResolver
during
processing
.
"
)
;
this
.
_nameResolver
=
resolver
;
}
enumerable
:
false
configurable
:
true
}
)
;
WasmDisassembler
.
prototype
.
appendBuffer
=
function
(
s
)
{
this
.
_buffer
+
=
s
;
}
;
WasmDisassembler
.
prototype
.
newLine
=
function
(
)
{
if
(
this
.
addOffsets
)
this
.
_offsets
.
push
(
this
.
_currentPosition
)
;
this
.
_lines
.
push
(
this
.
_buffer
)
;
this
.
_buffer
=
"
"
;
}
;
WasmDisassembler
.
prototype
.
logStartOfFunctionBodyOffset
=
function
(
)
{
if
(
this
.
addOffsets
)
{
this
.
_currentFunctionBodyOffset
=
this
.
_currentPosition
;
}
}
;
WasmDisassembler
.
prototype
.
logEndOfFunctionBodyOffset
=
function
(
)
{
if
(
this
.
addOffsets
)
{
this
.
_functionBodyOffsets
.
push
(
{
start
:
this
.
_currentFunctionBodyOffset
end
:
this
.
_currentPosition
}
)
;
}
}
;
WasmDisassembler
.
prototype
.
typeIndexToString
=
function
(
typeIndex
)
{
if
(
typeIndex
>
=
0
)
return
this
.
_nameResolver
.
getTypeName
(
typeIndex
true
)
;
switch
(
typeIndex
)
{
case
-
16
:
return
"
func
"
;
case
-
17
:
return
"
extern
"
;
case
-
18
:
return
"
any
"
;
case
-
19
:
return
"
eq
"
;
case
-
20
:
return
"
i31
"
;
case
-
23
:
return
"
exnref
"
;
case
-
21
:
return
"
struct
"
;
case
-
22
:
return
"
array
"
;
case
-
13
:
return
"
nofunc
"
;
case
-
14
:
return
"
noextern
"
;
case
-
15
:
return
"
none
"
;
case
-
12
:
return
"
noexnref
"
;
}
}
;
WasmDisassembler
.
prototype
.
refTypeToString
=
function
(
typeIndex
nullable
)
{
return
this
.
typeToString
(
new
WasmParser_js_1
.
RefType
(
nullable
?
-
29
:
-
28
typeIndex
)
)
;
}
;
WasmDisassembler
.
prototype
.
typeToString
=
function
(
type
)
{
switch
(
type
.
kind
)
{
case
-
1
:
return
"
i32
"
;
case
-
2
:
return
"
i64
"
;
case
-
3
:
return
"
f32
"
;
case
-
4
:
return
"
f64
"
;
case
-
5
:
return
"
v128
"
;
case
-
8
:
return
"
i8
"
;
case
-
9
:
return
"
i16
"
;
case
-
16
:
return
"
funcref
"
;
case
-
17
:
return
"
externref
"
;
case
-
23
:
return
"
exnref
"
;
case
-
18
:
return
"
anyref
"
;
case
-
19
:
return
"
eqref
"
;
case
-
20
:
return
"
i31ref
"
;
case
-
21
:
return
"
structref
"
;
case
-
22
:
return
"
arrayref
"
;
case
-
13
:
return
"
nullfuncref
"
;
case
-
14
:
return
"
nullexternref
"
;
case
-
12
:
return
"
nullexnref
"
;
case
-
15
:
return
"
nullref
"
;
case
-
28
:
return
"
(
ref
"
.
concat
(
this
.
typeIndexToString
(
type
.
ref_index
)
"
)
"
)
;
case
-
29
:
return
"
(
ref
null
"
.
concat
(
this
.
typeIndexToString
(
type
.
ref_index
)
"
)
"
)
;
default
:
throw
new
Error
(
"
Unexpected
type
"
.
concat
(
JSON
.
stringify
(
type
)
)
)
;
}
}
;
WasmDisassembler
.
prototype
.
maybeMut
=
function
(
type
mutability
)
{
return
mutability
?
"
(
mut
"
.
concat
(
type
"
)
"
)
:
type
;
}
;
WasmDisassembler
.
prototype
.
globalTypeToString
=
function
(
type
)
{
var
typeStr
=
this
.
typeToString
(
type
.
contentType
)
;
return
this
.
maybeMut
(
typeStr
!
!
type
.
mutability
)
;
}
;
WasmDisassembler
.
prototype
.
printFuncType
=
function
(
typeIndex
)
{
var
type
=
this
.
_types
[
typeIndex
]
;
if
(
type
.
params
.
length
>
0
)
{
this
.
appendBuffer
(
"
(
param
"
)
;
for
(
var
i
=
0
;
i
<
type
.
params
.
length
;
i
+
+
)
{
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
this
.
typeToString
(
type
.
params
[
i
]
)
)
;
}
this
.
appendBuffer
(
"
)
"
)
;
}
if
(
type
.
returns
.
length
>
0
)
{
this
.
appendBuffer
(
"
(
result
"
)
;
for
(
var
i
=
0
;
i
<
type
.
returns
.
length
;
i
+
+
)
{
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
this
.
typeToString
(
type
.
returns
[
i
]
)
)
;
}
this
.
appendBuffer
(
"
)
"
)
;
}
}
;
WasmDisassembler
.
prototype
.
printStructType
=
function
(
typeIndex
)
{
var
type
=
this
.
_types
[
typeIndex
]
;
if
(
type
.
fields
.
length
=
=
=
0
)
return
;
for
(
var
i
=
0
;
i
<
type
.
fields
.
length
;
i
+
+
)
{
var
fieldType
=
this
.
maybeMut
(
this
.
typeToString
(
type
.
fields
[
i
]
)
type
.
mutabilities
[
i
]
)
;
var
fieldName
=
this
.
_nameResolver
.
getFieldName
(
typeIndex
i
false
)
;
this
.
appendBuffer
(
"
(
field
"
.
concat
(
fieldName
"
"
)
.
concat
(
fieldType
"
)
"
)
)
;
}
}
;
WasmDisassembler
.
prototype
.
printArrayType
=
function
(
typeIndex
)
{
var
type
=
this
.
_types
[
typeIndex
]
;
this
.
appendBuffer
(
"
(
field
"
)
;
this
.
appendBuffer
(
this
.
maybeMut
(
this
.
typeToString
(
type
.
elementType
)
type
.
mutability
)
)
;
}
;
WasmDisassembler
.
prototype
.
printBlockType
=
function
(
type
)
{
if
(
type
.
kind
=
=
=
-
64
)
{
return
;
}
if
(
type
.
kind
=
=
=
0
)
{
if
(
this
.
_types
[
type
.
index
]
.
form
=
=
-
32
)
{
return
this
.
printFuncType
(
type
.
index
)
;
}
else
{
this
.
appendBuffer
(
"
(
type
"
.
concat
(
type
.
index
"
)
"
)
)
;
return
;
}
}
this
.
appendBuffer
(
"
(
result
"
)
;
this
.
appendBuffer
(
this
.
typeToString
(
type
)
)
;
this
.
appendBuffer
(
"
)
"
)
;
}
;
WasmDisassembler
.
prototype
.
printString
=
function
(
b
)
{
this
.
appendBuffer
(
'
"
'
)
;
for
(
var
i
=
0
;
i
<
b
.
length
;
i
+
+
)
{
var
byte
=
b
[
i
]
;
if
(
byte
<
0x20
|
|
byte
>
=
0x7f
|
|
byte
=
=
0x22
|
|
byte
=
=
0x5c
)
{
this
.
appendBuffer
(
"
\
\
"
+
(
byte
>
>
4
)
.
toString
(
16
)
+
(
byte
&
15
)
.
toString
(
16
)
)
;
}
else
{
this
.
appendBuffer
(
String
.
fromCharCode
(
byte
)
)
;
}
}
this
.
appendBuffer
(
'
"
'
)
;
}
;
WasmDisassembler
.
prototype
.
printExpression
=
function
(
expression
)
{
for
(
var
_i
=
0
expression_1
=
expression
;
_i
<
expression_1
.
length
;
_i
+
+
)
{
var
operator
=
expression_1
[
_i
]
;
this
.
appendBuffer
(
"
(
"
)
;
this
.
printOperator
(
operator
)
;
this
.
appendBuffer
(
"
)
"
)
;
}
}
;
WasmDisassembler
.
prototype
.
useLabel
=
function
(
depth
extraDepthOffset
)
{
if
(
extraDepthOffset
=
=
=
void
0
)
{
extraDepthOffset
=
0
;
}
if
(
!
this
.
_backrefLabels
)
{
return
"
"
+
depth
;
}
var
i
=
this
.
_backrefLabels
.
length
-
depth
-
1
-
extraDepthOffset
;
if
(
i
<
0
)
{
return
"
"
+
depth
;
}
var
backrefLabel
=
this
.
_backrefLabels
[
i
]
;
if
(
!
backrefLabel
.
useLabel
)
{
backrefLabel
.
useLabel
=
true
;
backrefLabel
.
label
=
this
.
_nameResolver
.
getLabel
(
this
.
_labelIndex
)
;
var
line
=
this
.
_lines
[
backrefLabel
.
line
]
;
this
.
_lines
[
backrefLabel
.
line
]
=
line
.
substring
(
0
backrefLabel
.
position
)
+
"
"
+
backrefLabel
.
label
+
line
.
substring
(
backrefLabel
.
position
)
;
this
.
_labelIndex
+
+
;
}
return
backrefLabel
.
label
|
|
"
"
+
depth
;
}
;
WasmDisassembler
.
prototype
.
printOperator
=
function
(
operator
)
{
var
code
=
operator
.
code
;
this
.
appendBuffer
(
WasmParser_js_1
.
OperatorCodeNames
[
code
]
)
;
switch
(
code
)
{
case
2
:
case
3
:
case
4
:
case
6
:
case
31
:
if
(
this
.
_labelMode
!
=
=
LabelMode
.
Depth
)
{
var
backrefLabel_1
=
{
line
:
this
.
_lines
.
length
position
:
this
.
_buffer
.
length
useLabel
:
false
label
:
null
}
;
if
(
this
.
_labelMode
=
=
=
LabelMode
.
Always
)
{
backrefLabel_1
.
useLabel
=
true
;
backrefLabel_1
.
label
=
this
.
_nameResolver
.
getLabel
(
this
.
_labelIndex
+
+
)
;
if
(
backrefLabel_1
.
label
)
{
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
backrefLabel_1
.
label
)
;
}
}
this
.
_backrefLabels
.
push
(
backrefLabel_1
)
;
}
this
.
printBlockType
(
operator
.
blockType
)
;
if
(
operator
.
tryTable
)
{
for
(
var
i
=
0
;
i
<
operator
.
tryTable
.
length
;
i
+
+
)
{
this
.
appendBuffer
(
"
(
"
)
;
switch
(
operator
.
tryTable
[
i
]
.
kind
)
{
case
WasmParser_js_1
.
CatchHandlerKind
.
Catch
:
this
.
appendBuffer
(
"
catch
"
)
;
break
;
case
WasmParser_js_1
.
CatchHandlerKind
.
CatchRef
:
this
.
appendBuffer
(
"
catch_ref
"
)
;
break
;
case
WasmParser_js_1
.
CatchHandlerKind
.
CatchAll
:
this
.
appendBuffer
(
"
catch_all
"
)
;
break
;
case
WasmParser_js_1
.
CatchHandlerKind
.
CatchAllRef
:
this
.
appendBuffer
(
"
catch_all_ref
"
)
;
break
;
}
if
(
operator
.
tryTable
[
i
]
.
tagIndex
!
=
null
)
{
var
tagName
=
this
.
_nameResolver
.
getTagName
(
operator
.
tryTable
[
i
]
.
tagIndex
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
tagName
"
"
)
)
;
}
this
.
appendBuffer
(
this
.
useLabel
(
operator
.
tryTable
[
i
]
.
depth
+
1
)
)
;
this
.
appendBuffer
(
"
)
"
)
;
}
}
break
;
case
11
:
if
(
this
.
_labelMode
=
=
=
LabelMode
.
Depth
)
{
break
;
}
var
backrefLabel
=
this
.
_backrefLabels
.
pop
(
)
;
if
(
backrefLabel
.
label
)
{
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
backrefLabel
.
label
)
;
}
break
;
case
12
:
case
13
:
case
213
:
case
214
:
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
this
.
useLabel
(
operator
.
brDepth
)
)
;
break
;
case
64280
:
case
64281
:
this
.
appendBuffer
(
"
flags
=
"
+
operator
.
literal
)
;
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
this
.
typeIndexToString
(
operator
.
srcType
)
)
;
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
this
.
typeIndexToString
(
operator
.
refType
)
)
;
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
this
.
useLabel
(
operator
.
brDepth
)
)
;
break
;
case
14
:
for
(
var
i
=
0
;
i
<
operator
.
brTable
.
length
;
i
+
+
)
{
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
this
.
useLabel
(
operator
.
brTable
[
i
]
)
)
;
}
break
;
case
9
:
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
this
.
useLabel
(
operator
.
relativeDepth
)
)
;
break
;
case
24
:
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
this
.
useLabel
(
operator
.
relativeDepth
1
)
)
;
break
;
case
7
:
case
8
:
var
tagName
=
this
.
_nameResolver
.
getTagName
(
operator
.
tagIndex
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
tagName
)
)
;
break
;
case
208
:
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
this
.
typeIndexToString
(
operator
.
refType
)
)
;
break
;
case
16
:
case
18
:
case
210
:
var
funcName
=
this
.
_nameResolver
.
getFunctionName
(
operator
.
funcIndex
operator
.
funcIndex
<
this
.
_importCount
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
funcName
)
)
;
break
;
case
17
:
case
19
:
this
.
printFuncType
(
operator
.
typeIndex
)
;
break
;
case
28
:
{
var
selectType
=
this
.
typeToString
(
operator
.
selectType
)
;
this
.
appendBuffer
(
"
"
.
concat
(
selectType
)
)
;
break
;
}
case
32
:
case
33
:
case
34
:
var
paramName
=
this
.
_nameResolver
.
getVariableName
(
this
.
_funcIndex
operator
.
localIndex
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
paramName
)
)
;
break
;
case
35
:
case
36
:
var
globalName
=
this
.
_nameResolver
.
getGlobalName
(
operator
.
globalIndex
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
globalName
)
)
;
break
;
case
40
:
case
41
:
case
42
:
case
43
:
case
44
:
case
45
:
case
46
:
case
47
:
case
48
:
case
49
:
case
50
:
case
51
:
case
52
:
case
53
:
case
54
:
case
55
:
case
56
:
case
57
:
case
58
:
case
59
:
case
60
:
case
61
:
case
62
:
case
65024
:
case
65025
:
case
65026
:
case
65040
:
case
65041
:
case
65042
:
case
65043
:
case
65044
:
case
65045
:
case
65046
:
case
65047
:
case
65048
:
case
65049
:
case
65050
:
case
65051
:
case
65052
:
case
65053
:
case
65054
:
case
65055
:
case
65056
:
case
65057
:
case
65058
:
case
65059
:
case
65060
:
case
65061
:
case
65062
:
case
65063
:
case
65064
:
case
65065
:
case
65066
:
case
65067
:
case
65068
:
case
65069
:
case
65070
:
case
65071
:
case
65072
:
case
65073
:
case
65074
:
case
65075
:
case
65076
:
case
65077
:
case
65078
:
case
65079
:
case
65080
:
case
65081
:
case
65082
:
case
65083
:
case
65084
:
case
65085
:
case
65086
:
case
65087
:
case
65088
:
case
65089
:
case
65090
:
case
65091
:
case
65092
:
case
65093
:
case
65094
:
case
65095
:
case
65096
:
case
65097
:
case
65098
:
case
65099
:
case
65100
:
case
65101
:
case
65102
:
case
1036288
:
case
1036289
:
case
1036290
:
case
1036291
:
case
1036292
:
case
1036293
:
case
1036294
:
case
1036295
:
case
1036296
:
case
1036297
:
case
1036298
:
case
1036299
:
case
1036380
:
case
1036381
:
var
memoryAddress
=
memoryAddressToString
(
operator
.
memoryAddress
operator
.
code
)
;
if
(
memoryAddress
!
=
=
null
)
{
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
memoryAddress
)
;
}
break
;
case
63
:
case
64
:
break
;
case
65
:
this
.
appendBuffer
(
"
"
.
concat
(
operator
.
literal
.
toString
(
)
)
)
;
break
;
case
66
:
this
.
appendBuffer
(
"
"
.
concat
(
operator
.
literal
.
toString
(
)
)
)
;
break
;
case
67
:
this
.
appendBuffer
(
"
"
.
concat
(
formatFloat32
(
operator
.
literal
)
)
)
;
break
;
case
68
:
this
.
appendBuffer
(
"
"
.
concat
(
formatFloat64
(
operator
.
literal
)
)
)
;
break
;
case
1036300
:
this
.
appendBuffer
(
"
i32x4
"
.
concat
(
formatI32Array
(
operator
.
literal
4
)
)
)
;
break
;
case
1036301
:
this
.
appendBuffer
(
"
"
.
concat
(
formatI8Array
(
operator
.
lines
16
)
)
)
;
break
;
case
1036309
:
case
1036310
:
case
1036311
:
case
1036312
:
case
1036313
:
case
1036314
:
case
1036315
:
case
1036316
:
case
1036319
:
case
1036320
:
case
1036317
:
case
1036318
:
case
1036321
:
case
1036322
:
this
.
appendBuffer
(
"
"
.
concat
(
operator
.
lineIndex
)
)
;
break
;
case
1036372
:
case
1036373
:
case
1036374
:
case
1036375
:
case
1036376
:
case
1036377
:
case
1036378
:
case
1036379
:
var
memoryAddress
=
memoryAddressToString
(
operator
.
memoryAddress
operator
.
code
)
;
if
(
memoryAddress
!
=
=
null
)
{
this
.
appendBuffer
(
"
"
)
;
this
.
appendBuffer
(
memoryAddress
)
;
}
this
.
appendBuffer
(
"
"
.
concat
(
operator
.
lineIndex
)
)
;
break
;
case
64520
:
case
64521
:
this
.
appendBuffer
(
"
"
.
concat
(
operator
.
segmentIndex
)
)
;
break
;
case
64525
:
var
elementName
=
this
.
_nameResolver
.
getElementName
(
operator
.
segmentIndex
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
elementName
)
)
;
break
;
case
38
:
case
37
:
case
64529
:
{
var
tableName
=
this
.
_nameResolver
.
getTableName
(
operator
.
tableIndex
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
tableName
)
)
;
break
;
}
case
64526
:
{
if
(
operator
.
tableIndex
!
=
=
0
|
|
operator
.
destinationIndex
!
=
=
0
)
{
var
tableName
=
this
.
_nameResolver
.
getTableName
(
operator
.
tableIndex
true
)
;
var
destinationName
=
this
.
_nameResolver
.
getTableName
(
operator
.
destinationIndex
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
destinationName
"
"
)
.
concat
(
tableName
)
)
;
}
break
;
}
case
64524
:
{
if
(
operator
.
tableIndex
!
=
=
0
)
{
var
tableName
=
this
.
_nameResolver
.
getTableName
(
operator
.
tableIndex
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
tableName
)
)
;
}
var
elementName_1
=
this
.
_nameResolver
.
getElementName
(
operator
.
segmentIndex
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
elementName_1
)
)
;
break
;
}
case
64258
:
case
64259
:
case
64260
:
case
64261
:
{
var
refType
=
this
.
typeIndexToString
(
operator
.
refType
)
;
var
fieldName
=
this
.
_nameResolver
.
getFieldName
(
operator
.
refType
operator
.
fieldIndex
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
refType
"
"
)
.
concat
(
fieldName
)
)
;
break
;
}
case
64278
:
case
64276
:
{
var
refType
=
this
.
refTypeToString
(
operator
.
refType
false
)
;
this
.
appendBuffer
(
"
"
.
concat
(
refType
)
)
;
break
;
}
case
64279
:
case
64277
:
{
var
refType
=
this
.
refTypeToString
(
operator
.
refType
true
)
;
this
.
appendBuffer
(
"
"
.
concat
(
refType
)
)
;
break
;
}
case
64257
:
case
64256
:
case
64263
:
case
64262
:
case
64267
:
case
64268
:
case
64269
:
case
64270
:
{
var
refType
=
this
.
typeIndexToString
(
operator
.
refType
)
;
this
.
appendBuffer
(
"
"
.
concat
(
refType
)
)
;
break
;
}
case
64272
:
{
var
dstType
=
this
.
typeIndexToString
(
operator
.
refType
)
;
this
.
appendBuffer
(
"
"
.
concat
(
dstType
)
)
;
break
;
}
case
64273
:
{
var
dstType
=
this
.
typeIndexToString
(
operator
.
refType
)
;
var
srcType
=
this
.
typeIndexToString
(
operator
.
srcType
)
;
this
.
appendBuffer
(
"
"
.
concat
(
dstType
"
"
)
.
concat
(
srcType
)
)
;
break
;
}
case
64264
:
{
var
refType
=
this
.
typeIndexToString
(
operator
.
refType
)
;
var
length_1
=
operator
.
len
;
this
.
appendBuffer
(
"
"
.
concat
(
refType
"
"
)
.
concat
(
length_1
)
)
;
break
;
}
}
}
;
WasmDisassembler
.
prototype
.
printImportSource
=
function
(
info
)
{
this
.
printString
(
info
.
module
)
;
this
.
appendBuffer
(
"
"
)
;
this
.
printString
(
info
.
field
)
;
}
;
WasmDisassembler
.
prototype
.
increaseIndent
=
function
(
)
{
this
.
_indent
+
=
IndentIncrement
;
this
.
_indentLevel
+
+
;
}
;
WasmDisassembler
.
prototype
.
decreaseIndent
=
function
(
)
{
this
.
_indent
=
this
.
_indent
.
slice
(
0
-
IndentIncrement
.
length
)
;
this
.
_indentLevel
-
-
;
}
;
WasmDisassembler
.
prototype
.
disassemble
=
function
(
reader
)
{
var
_this
=
this
;
var
done
=
this
.
disassembleChunk
(
reader
)
;
if
(
!
done
)
return
null
;
var
lines
=
this
.
_lines
;
if
(
this
.
_addOffsets
)
{
lines
=
lines
.
map
(
function
(
line
index
)
{
var
position
=
formatHex
(
_this
.
_offsets
[
index
]
4
)
;
return
line
+
"
;
;
"
+
position
;
}
)
;
}
lines
.
push
(
"
"
)
;
var
result
=
lines
.
join
(
"
\
n
"
)
;
this
.
_lines
.
length
=
0
;
this
.
_offsets
.
length
=
0
;
this
.
_functionBodyOffsets
.
length
=
0
;
return
result
;
}
;
WasmDisassembler
.
prototype
.
getResult
=
function
(
)
{
var
linesReady
=
this
.
_lines
.
length
;
if
(
this
.
_backrefLabels
&
&
this
.
_labelMode
=
=
=
LabelMode
.
WhenUsed
)
{
this
.
_backrefLabels
.
some
(
function
(
backrefLabel
)
{
if
(
backrefLabel
.
useLabel
)
return
false
;
linesReady
=
backrefLabel
.
line
;
return
true
;
}
)
;
}
if
(
linesReady
=
=
=
0
)
{
return
{
lines
:
[
]
offsets
:
this
.
_addOffsets
?
[
]
:
undefined
done
:
this
.
_done
functionBodyOffsets
:
this
.
_addOffsets
?
[
]
:
undefined
}
;
}
if
(
linesReady
=
=
=
this
.
_lines
.
length
)
{
var
result_1
=
{
lines
:
this
.
_lines
offsets
:
this
.
_addOffsets
?
this
.
_offsets
:
undefined
done
:
this
.
_done
functionBodyOffsets
:
this
.
_addOffsets
?
this
.
_functionBodyOffsets
:
undefined
}
;
this
.
_lines
=
[
]
;
if
(
this
.
_addOffsets
)
{
this
.
_offsets
=
[
]
;
this
.
_functionBodyOffsets
=
[
]
;
}
return
result_1
;
}
var
result
=
{
lines
:
this
.
_lines
.
splice
(
0
linesReady
)
offsets
:
this
.
_addOffsets
?
this
.
_offsets
.
splice
(
0
linesReady
)
:
undefined
done
:
false
functionBodyOffsets
:
this
.
_addOffsets
?
this
.
_functionBodyOffsets
:
undefined
}
;
if
(
this
.
_backrefLabels
)
{
this
.
_backrefLabels
.
forEach
(
function
(
backrefLabel
)
{
backrefLabel
.
line
-
=
linesReady
;
}
)
;
}
return
result
;
}
;
WasmDisassembler
.
prototype
.
disassembleChunk
=
function
(
reader
offsetInModule
)
{
var
_this
=
this
;
if
(
offsetInModule
=
=
=
void
0
)
{
offsetInModule
=
0
;
}
if
(
this
.
_done
)
throw
new
Error
(
"
Invalid
state
:
disassembly
process
was
already
finished
.
"
)
;
while
(
true
)
{
this
.
_currentPosition
=
reader
.
position
+
offsetInModule
;
if
(
!
reader
.
read
(
)
)
return
false
;
switch
(
reader
.
state
)
{
case
2
:
this
.
appendBuffer
(
"
)
"
)
;
this
.
newLine
(
)
;
this
.
_reset
(
)
;
if
(
!
reader
.
hasMoreBytes
(
)
)
{
this
.
_done
=
true
;
return
true
;
}
break
;
case
-
1
:
throw
reader
.
error
;
case
1
:
this
.
appendBuffer
(
"
(
module
"
)
;
this
.
newLine
(
)
;
break
;
case
4
:
this
.
_currentSectionId
=
-
1
;
break
;
case
3
:
var
sectionInfo
=
reader
.
result
;
switch
(
sectionInfo
.
id
)
{
case
1
:
case
2
:
case
7
:
case
6
:
case
3
:
case
8
:
case
10
:
case
5
:
case
11
:
case
4
:
case
9
:
case
13
:
this
.
_currentSectionId
=
sectionInfo
.
id
;
this
.
_indent
=
"
"
;
this
.
_indentLevel
=
0
;
break
;
default
:
reader
.
skipSection
(
)
;
break
;
}
break
;
case
15
:
var
memoryInfo
=
reader
.
result
;
var
memoryIndex
=
this
.
_memoryCount
+
+
;
var
memoryName
=
this
.
_nameResolver
.
getMemoryName
(
memoryIndex
false
)
;
this
.
appendBuffer
(
"
(
memory
"
.
concat
(
memoryName
)
)
;
if
(
this
.
_exportMetadata
!
=
=
null
)
{
for
(
var
_i
=
0
_a
=
this
.
_exportMetadata
.
getMemoryExportNames
(
memoryIndex
)
;
_i
<
_a
.
length
;
_i
+
+
)
{
var
exportName
=
_a
[
_i
]
;
this
.
appendBuffer
(
"
(
export
"
.
concat
(
JSON
.
stringify
(
exportName
)
"
)
"
)
)
;
}
}
this
.
appendBuffer
(
"
"
.
concat
(
limitsToString
(
memoryInfo
.
limits
)
)
)
;
if
(
memoryInfo
.
shared
)
{
this
.
appendBuffer
(
"
shared
"
)
;
}
this
.
appendBuffer
(
"
)
"
)
;
this
.
newLine
(
)
;
break
;
case
23
:
var
tagInfo
=
reader
.
result
;
var
tagIndex
=
this
.
_eventCount
+
+
;
var
tagName
=
this
.
_nameResolver
.
getTagName
(
tagIndex
false
)
;
this
.
appendBuffer
(
"
(
tag
"
.
concat
(
tagName
)
)
;
if
(
this
.
_exportMetadata
!
=
=
null
)
{
for
(
var
_b
=
0
_c
=
this
.
_exportMetadata
.
getTagExportNames
(
tagIndex
)
;
_b
<
_c
.
length
;
_b
+
+
)
{
var
exportName
=
_c
[
_b
]
;
this
.
appendBuffer
(
"
(
export
"
.
concat
(
JSON
.
stringify
(
exportName
)
"
)
"
)
)
;
}
}
this
.
printFuncType
(
tagInfo
.
typeIndex
)
;
this
.
appendBuffer
(
"
)
"
)
;
this
.
newLine
(
)
;
break
;
case
14
:
var
tableInfo
=
reader
.
result
;
var
tableIndex
=
this
.
_tableCount
+
+
;
var
tableName
=
this
.
_nameResolver
.
getTableName
(
tableIndex
false
)
;
this
.
appendBuffer
(
"
(
table
"
.
concat
(
tableName
)
)
;
if
(
this
.
_exportMetadata
!
=
=
null
)
{
for
(
var
_d
=
0
_e
=
this
.
_exportMetadata
.
getTableExportNames
(
tableIndex
)
;
_d
<
_e
.
length
;
_d
+
+
)
{
var
exportName
=
_e
[
_d
]
;
this
.
appendBuffer
(
"
(
export
"
.
concat
(
JSON
.
stringify
(
exportName
)
"
)
"
)
)
;
}
}
this
.
appendBuffer
(
"
"
.
concat
(
limitsToString
(
tableInfo
.
limits
)
"
"
)
.
concat
(
this
.
typeToString
(
tableInfo
.
elementType
)
"
)
"
)
)
;
this
.
newLine
(
)
;
break
;
case
17
:
if
(
this
.
_exportMetadata
=
=
=
null
)
{
var
exportInfo
=
reader
.
result
;
this
.
appendBuffer
(
"
(
export
"
)
;
this
.
printString
(
exportInfo
.
field
)
;
this
.
appendBuffer
(
"
"
)
;
switch
(
exportInfo
.
kind
)
{
case
0
:
var
funcName
=
this
.
_nameResolver
.
getFunctionName
(
exportInfo
.
index
exportInfo
.
index
<
this
.
_importCount
true
)
;
this
.
appendBuffer
(
"
(
func
"
.
concat
(
funcName
"
)
"
)
)
;
break
;
case
1
:
var
tableName
=
this
.
_nameResolver
.
getTableName
(
exportInfo
.
index
true
)
;
this
.
appendBuffer
(
"
(
table
"
.
concat
(
tableName
"
)
"
)
)
;
break
;
case
2
:
var
memoryName
=
this
.
_nameResolver
.
getMemoryName
(
exportInfo
.
index
true
)
;
this
.
appendBuffer
(
"
(
memory
"
.
concat
(
memoryName
"
)
"
)
)
;
break
;
case
3
:
var
globalName
=
this
.
_nameResolver
.
getGlobalName
(
exportInfo
.
index
true
)
;
this
.
appendBuffer
(
"
(
global
"
.
concat
(
globalName
"
)
"
)
)
;
break
;
case
4
:
var
tagName
=
this
.
_nameResolver
.
getTagName
(
exportInfo
.
index
true
)
;
this
.
appendBuffer
(
"
(
tag
"
.
concat
(
tagName
"
)
"
)
)
;
break
;
default
:
throw
new
Error
(
"
Unsupported
export
"
.
concat
(
exportInfo
.
kind
)
)
;
}
this
.
appendBuffer
(
"
)
"
)
;
this
.
newLine
(
)
;
}
break
;
case
12
:
var
importInfo
=
reader
.
result
;
switch
(
importInfo
.
kind
)
{
case
0
:
this
.
_importCount
+
+
;
var
funcIndex
=
this
.
_funcIndex
+
+
;
var
funcName
=
this
.
_nameResolver
.
getFunctionName
(
funcIndex
true
false
)
;
this
.
appendBuffer
(
"
(
func
"
.
concat
(
funcName
)
)
;
if
(
this
.
_exportMetadata
!
=
=
null
)
{
for
(
var
_f
=
0
_g
=
this
.
_exportMetadata
.
getFunctionExportNames
(
funcIndex
)
;
_f
<
_g
.
length
;
_f
+
+
)
{
var
exportName
=
_g
[
_f
]
;
this
.
appendBuffer
(
"
(
export
"
.
concat
(
JSON
.
stringify
(
exportName
)
"
)
"
)
)
;
}
}
this
.
appendBuffer
(
"
(
import
"
)
;
this
.
printImportSource
(
importInfo
)
;
this
.
appendBuffer
(
"
)
"
)
;
this
.
printFuncType
(
importInfo
.
funcTypeIndex
)
;
this
.
appendBuffer
(
"
)
"
)
;
break
;
case
3
:
var
globalImportInfo
=
importInfo
.
type
;
var
globalIndex
=
this
.
_globalCount
+
+
;
var
globalName
=
this
.
_nameResolver
.
getGlobalName
(
globalIndex
false
)
;
this
.
appendBuffer
(
"
(
global
"
.
concat
(
globalName
)
)
;
if
(
this
.
_exportMetadata
!
=
=
null
)
{
for
(
var
_h
=
0
_j
=
this
.
_exportMetadata
.
getGlobalExportNames
(
globalIndex
)
;
_h
<
_j
.
length
;
_h
+
+
)
{
var
exportName
=
_j
[
_h
]
;
this
.
appendBuffer
(
"
(
export
"
.
concat
(
JSON
.
stringify
(
exportName
)
"
)
"
)
)
;
}
}
this
.
appendBuffer
(
"
(
import
"
)
;
this
.
printImportSource
(
importInfo
)
;
this
.
appendBuffer
(
"
)
"
.
concat
(
this
.
globalTypeToString
(
globalImportInfo
)
"
)
"
)
)
;
break
;
case
2
:
var
memoryImportInfo
=
importInfo
.
type
;
var
memoryIndex
=
this
.
_memoryCount
+
+
;
var
memoryName
=
this
.
_nameResolver
.
getMemoryName
(
memoryIndex
false
)
;
this
.
appendBuffer
(
"
(
memory
"
.
concat
(
memoryName
)
)
;
if
(
this
.
_exportMetadata
!
=
=
null
)
{
for
(
var
_k
=
0
_l
=
this
.
_exportMetadata
.
getMemoryExportNames
(
memoryIndex
)
;
_k
<
_l
.
length
;
_k
+
+
)
{
var
exportName
=
_l
[
_k
]
;
this
.
appendBuffer
(
"
(
export
"
.
concat
(
JSON
.
stringify
(
exportName
)
"
)
"
)
)
;
}
}
this
.
appendBuffer
(
"
(
import
"
)
;
this
.
printImportSource
(
importInfo
)
;
this
.
appendBuffer
(
"
)
"
.
concat
(
limitsToString
(
memoryImportInfo
.
limits
)
)
)
;
if
(
memoryImportInfo
.
shared
)
{
this
.
appendBuffer
(
"
shared
"
)
;
}
this
.
appendBuffer
(
"
)
"
)
;
break
;
case
1
:
var
tableImportInfo
=
importInfo
.
type
;
var
tableIndex
=
this
.
_tableCount
+
+
;
var
tableName
=
this
.
_nameResolver
.
getTableName
(
tableIndex
false
)
;
this
.
appendBuffer
(
"
(
table
"
.
concat
(
tableName
)
)
;
if
(
this
.
_exportMetadata
!
=
=
null
)
{
for
(
var
_m
=
0
_o
=
this
.
_exportMetadata
.
getTableExportNames
(
tableIndex
)
;
_m
<
_o
.
length
;
_m
+
+
)
{
var
exportName
=
_o
[
_m
]
;
this
.
appendBuffer
(
"
(
export
"
.
concat
(
JSON
.
stringify
(
exportName
)
"
)
"
)
)
;
}
}
this
.
appendBuffer
(
"
(
import
"
)
;
this
.
printImportSource
(
importInfo
)
;
this
.
appendBuffer
(
"
)
"
.
concat
(
limitsToString
(
tableImportInfo
.
limits
)
"
"
)
.
concat
(
this
.
typeToString
(
tableImportInfo
.
elementType
)
"
)
"
)
)
;
break
;
case
4
:
var
eventImportInfo
=
importInfo
.
type
;
var
tagIndex
=
this
.
_eventCount
+
+
;
var
tagName
=
this
.
_nameResolver
.
getTagName
(
tagIndex
false
)
;
this
.
appendBuffer
(
"
(
tag
"
.
concat
(
tagName
)
)
;
if
(
this
.
_exportMetadata
!
=
=
null
)
{
for
(
var
_p
=
0
_q
=
this
.
_exportMetadata
.
getTagExportNames
(
tagIndex
)
;
_p
<
_q
.
length
;
_p
+
+
)
{
var
exportName
=
_q
[
_p
]
;
this
.
appendBuffer
(
"
(
export
"
.
concat
(
JSON
.
stringify
(
exportName
)
"
)
"
)
)
;
}
}
this
.
appendBuffer
(
"
(
import
"
)
;
this
.
printImportSource
(
importInfo
)
;
this
.
appendBuffer
(
"
)
"
)
;
this
.
printFuncType
(
eventImportInfo
.
typeIndex
)
;
this
.
appendBuffer
(
"
)
"
)
;
break
;
default
:
throw
new
Error
(
"
NYI
other
import
types
:
"
.
concat
(
importInfo
.
kind
)
)
;
}
this
.
newLine
(
)
;
break
;
case
33
:
var
elementSegment
=
reader
.
result
;
var
elementIndex
=
this
.
_elementCount
+
+
;
var
elementName
=
this
.
_nameResolver
.
getElementName
(
elementIndex
false
)
;
this
.
appendBuffer
(
"
(
elem
"
.
concat
(
elementName
)
)
;
switch
(
elementSegment
.
mode
)
{
case
0
:
if
(
elementSegment
.
tableIndex
!
=
=
0
)
{
var
tableName_1
=
this
.
_nameResolver
.
getTableName
(
elementSegment
.
tableIndex
false
)
;
this
.
appendBuffer
(
"
(
table
"
.
concat
(
tableName_1
"
)
"
)
)
;
}
break
;
case
1
:
break
;
case
2
:
this
.
appendBuffer
(
"
declare
"
)
;
break
;
}
break
;
case
35
:
this
.
appendBuffer
(
"
)
"
)
;
this
.
newLine
(
)
;
break
;
case
34
:
var
elementSegmentBody
=
reader
.
result
;
this
.
appendBuffer
(
"
"
.
concat
(
this
.
typeToString
(
elementSegmentBody
.
elementType
)
)
)
;
break
;
case
39
:
var
globalInfo
=
reader
.
result
;
var
globalIndex
=
this
.
_globalCount
+
+
;
var
globalName
=
this
.
_nameResolver
.
getGlobalName
(
globalIndex
false
)
;
this
.
appendBuffer
(
"
(
global
"
.
concat
(
globalName
)
)
;
if
(
this
.
_exportMetadata
!
=
=
null
)
{
for
(
var
_r
=
0
_s
=
this
.
_exportMetadata
.
getGlobalExportNames
(
globalIndex
)
;
_r
<
_s
.
length
;
_r
+
+
)
{
var
exportName
=
_s
[
_r
]
;
this
.
appendBuffer
(
"
(
export
"
.
concat
(
JSON
.
stringify
(
exportName
)
"
)
"
)
)
;
}
}
this
.
appendBuffer
(
"
"
.
concat
(
this
.
globalTypeToString
(
globalInfo
.
type
)
)
)
;
break
;
case
40
:
this
.
appendBuffer
(
"
)
"
)
;
this
.
newLine
(
)
;
break
;
case
11
:
var
typeEntry
=
reader
.
result
;
var
typeIndex
=
this
.
_types
.
length
;
this
.
_types
.
push
(
typeEntry
)
;
if
(
!
this
.
_skipTypes
)
{
var
typeName
=
this
.
_nameResolver
.
getTypeName
(
typeIndex
false
)
;
var
superTypeName
=
undefined
;
if
(
typeEntry
.
supertypes
!
=
=
undefined
)
{
superTypeName
=
typeEntry
.
supertypes
.
map
(
function
(
ty
)
{
return
_this
.
typeIndexToString
(
ty
)
;
}
)
.
join
(
"
+
"
)
;
}
this
.
appendBuffer
(
this
.
_indent
)
;
this
.
appendBuffer
(
"
(
type
"
.
concat
(
typeName
"
"
)
)
;
var
subtype
=
typeEntry
.
supertypes
|
|
typeEntry
.
final
;
if
(
subtype
)
{
this
.
appendBuffer
(
"
(
sub
"
)
;
if
(
typeEntry
.
final
)
this
.
appendBuffer
(
"
final
"
)
;
if
(
typeEntry
.
supertypes
)
{
this
.
appendBuffer
(
typeEntry
.
supertypes
.
map
(
function
(
ty
)
{
return
_this
.
typeIndexToString
(
ty
)
;
}
)
.
join
(
"
"
)
)
;
this
.
appendBuffer
(
"
"
)
;
}
}
if
(
typeEntry
.
form
=
=
=
-
32
)
{
this
.
appendBuffer
(
"
(
func
"
)
;
this
.
printFuncType
(
typeIndex
)
;
this
.
appendBuffer
(
"
)
"
)
;
}
else
if
(
typeEntry
.
form
=
=
=
-
33
)
{
this
.
appendBuffer
(
"
(
struct
"
)
;
this
.
printStructType
(
typeIndex
)
;
this
.
appendBuffer
(
"
)
"
)
;
}
else
if
(
typeEntry
.
form
=
=
=
-
34
)
{
this
.
appendBuffer
(
"
(
array
"
)
;
this
.
printArrayType
(
typeIndex
)
;
this
.
appendBuffer
(
"
)
"
)
;
}
else
{
throw
new
Error
(
"
Unknown
type
form
:
"
.
concat
(
typeEntry
.
form
)
)
;
}
if
(
subtype
)
{
this
.
appendBuffer
(
"
)
"
)
;
}
this
.
appendBuffer
(
"
)
"
)
;
this
.
newLine
(
)
;
}
break
;
case
22
:
var
startEntry
=
reader
.
result
;
var
funcName
=
this
.
_nameResolver
.
getFunctionName
(
startEntry
.
index
startEntry
.
index
<
this
.
_importCount
true
)
;
this
.
appendBuffer
(
"
(
start
"
.
concat
(
funcName
"
)
"
)
)
;
this
.
newLine
(
)
;
break
;
case
36
:
this
.
appendBuffer
(
"
(
data
"
)
;
break
;
case
37
:
var
body
=
reader
.
result
;
this
.
appendBuffer
(
"
"
)
;
this
.
printString
(
body
.
data
)
;
break
;
case
38
:
this
.
appendBuffer
(
"
)
"
)
;
this
.
newLine
(
)
;
break
;
case
25
:
case
44
:
this
.
_expression
=
[
]
;
break
;
case
26
:
case
45
:
var
operator
=
reader
.
result
;
if
(
operator
.
code
!
=
=
11
)
{
this
.
_expression
.
push
(
operator
)
;
}
break
;
case
46
:
if
(
this
.
_expression
.
length
>
1
)
{
this
.
appendBuffer
(
"
(
offset
"
)
;
this
.
printExpression
(
this
.
_expression
)
;
this
.
appendBuffer
(
"
)
"
)
;
}
else
{
this
.
appendBuffer
(
"
"
)
;
this
.
printExpression
(
this
.
_expression
)
;
}
this
.
_expression
=
[
]
;
break
;
case
27
:
if
(
this
.
_expression
.
length
>
1
&
&
this
.
_currentSectionId
=
=
=
9
)
{
this
.
appendBuffer
(
"
(
item
"
)
;
this
.
printExpression
(
this
.
_expression
)
;
this
.
appendBuffer
(
"
)
"
)
;
}
else
{
this
.
appendBuffer
(
"
"
)
;
this
.
printExpression
(
this
.
_expression
)
;
}
this
.
_expression
=
[
]
;
break
;
case
13
:
this
.
_funcTypes
.
push
(
reader
.
result
.
typeIndex
)
;
break
;
case
28
:
var
func
=
reader
.
result
;
var
type
=
this
.
_types
[
this
.
_funcTypes
[
this
.
_funcIndex
-
this
.
_importCount
]
]
;
this
.
appendBuffer
(
"
(
func
"
)
;
this
.
appendBuffer
(
this
.
_nameResolver
.
getFunctionName
(
this
.
_funcIndex
false
false
)
)
;
if
(
this
.
_exportMetadata
!
=
=
null
)
{
for
(
var
_t
=
0
_u
=
this
.
_exportMetadata
.
getFunctionExportNames
(
this
.
_funcIndex
)
;
_t
<
_u
.
length
;
_t
+
+
)
{
var
exportName
=
_u
[
_t
]
;
this
.
appendBuffer
(
"
(
export
"
.
concat
(
JSON
.
stringify
(
exportName
)
"
)
"
)
)
;
}
}
for
(
var
i
=
0
;
i
<
type
.
params
.
length
;
i
+
+
)
{
var
paramName
=
this
.
_nameResolver
.
getVariableName
(
this
.
_funcIndex
i
false
)
;
this
.
appendBuffer
(
"
(
param
"
.
concat
(
paramName
"
"
)
.
concat
(
this
.
typeToString
(
type
.
params
[
i
]
)
"
)
"
)
)
;
}
for
(
var
i
=
0
;
i
<
type
.
returns
.
length
;
i
+
+
)
{
this
.
appendBuffer
(
"
(
result
"
.
concat
(
this
.
typeToString
(
type
.
returns
[
i
]
)
"
)
"
)
)
;
}
this
.
newLine
(
)
;
var
localIndex
=
type
.
params
.
length
;
if
(
func
.
locals
.
length
>
0
)
{
this
.
appendBuffer
(
"
"
)
;
for
(
var
_v
=
0
_w
=
func
.
locals
;
_v
<
_w
.
length
;
_v
+
+
)
{
var
l
=
_w
[
_v
]
;
for
(
var
i
=
0
;
i
<
l
.
count
;
i
+
+
)
{
var
paramName
=
this
.
_nameResolver
.
getVariableName
(
this
.
_funcIndex
localIndex
+
+
false
)
;
this
.
appendBuffer
(
"
(
local
"
.
concat
(
paramName
"
"
)
.
concat
(
this
.
typeToString
(
l
.
type
)
"
)
"
)
)
;
}
}
this
.
newLine
(
)
;
}
this
.
_indent
=
"
"
;
this
.
_indentLevel
=
0
;
this
.
_labelIndex
=
0
;
this
.
_backrefLabels
=
this
.
_labelMode
=
=
=
LabelMode
.
Depth
?
null
:
[
]
;
this
.
_logFirstInstruction
=
true
;
break
;
case
30
:
if
(
this
.
_logFirstInstruction
)
{
this
.
logStartOfFunctionBodyOffset
(
)
;
this
.
_logFirstInstruction
=
false
;
}
var
operator
=
reader
.
result
;
if
(
operator
.
code
=
=
11
&
&
this
.
_indentLevel
=
=
0
)
{
this
.
appendBuffer
(
"
)
"
)
;
this
.
newLine
(
)
;
break
;
}
switch
(
operator
.
code
)
{
case
11
:
case
5
:
case
7
:
case
25
:
case
24
:
this
.
decreaseIndent
(
)
;
break
;
}
this
.
appendBuffer
(
this
.
_indent
)
;
this
.
printOperator
(
operator
)
;
this
.
newLine
(
)
;
switch
(
operator
.
code
)
{
case
4
:
case
2
:
case
3
:
case
5
:
case
6
:
case
31
:
case
7
:
case
25
:
this
.
increaseIndent
(
)
;
break
;
}
break
;
case
31
:
this
.
_funcIndex
+
+
;
this
.
_backrefLabels
=
null
;
this
.
logEndOfFunctionBodyOffset
(
)
;
break
;
case
47
:
if
(
!
this
.
_skipTypes
)
{
this
.
appendBuffer
(
"
(
rec
"
)
;
this
.
newLine
(
)
;
this
.
increaseIndent
(
)
;
}
break
;
case
48
:
if
(
!
this
.
_skipTypes
)
{
this
.
decreaseIndent
(
)
;
this
.
appendBuffer
(
"
)
"
)
;
this
.
newLine
(
)
;
}
break
;
default
:
throw
new
Error
(
"
Expectected
state
:
"
.
concat
(
reader
.
state
)
)
;
}
}
}
;
return
WasmDisassembler
;
}
(
)
)
;
exports
.
WasmDisassembler
=
WasmDisassembler
;
var
UNKNOWN_FUNCTION_PREFIX
=
"
unknown
"
;
var
NameSectionNameResolver
=
(
function
(
_super
)
{
__extends
(
NameSectionNameResolver
_super
)
;
function
NameSectionNameResolver
(
functionNames
localNames
tagNames
typeNames
tableNames
memoryNames
globalNames
fieldNames
)
{
var
_this
=
_super
.
call
(
this
)
|
|
this
;
_this
.
_functionNames
=
functionNames
;
_this
.
_localNames
=
localNames
;
_this
.
_tagNames
=
tagNames
;
_this
.
_typeNames
=
typeNames
;
_this
.
_tableNames
=
tableNames
;
_this
.
_memoryNames
=
memoryNames
;
_this
.
_globalNames
=
globalNames
;
_this
.
_fieldNames
=
fieldNames
;
return
_this
;
}
NameSectionNameResolver
.
prototype
.
getTypeName
=
function
(
index
isRef
)
{
var
name
=
this
.
_typeNames
[
index
]
;
if
(
!
name
)
return
_super
.
prototype
.
getTypeName
.
call
(
this
index
isRef
)
;
return
isRef
?
"
"
.
concat
(
name
)
:
"
"
.
concat
(
name
"
(
;
"
)
.
concat
(
index
"
;
)
"
)
;
}
;
NameSectionNameResolver
.
prototype
.
getTableName
=
function
(
index
isRef
)
{
var
name
=
this
.
_tableNames
[
index
]
;
if
(
!
name
)
return
_super
.
prototype
.
getTableName
.
call
(
this
index
isRef
)
;
return
isRef
?
"
"
.
concat
(
name
)
:
"
"
.
concat
(
name
"
(
;
"
)
.
concat
(
index
"
;
)
"
)
;
}
;
NameSectionNameResolver
.
prototype
.
getMemoryName
=
function
(
index
isRef
)
{
var
name
=
this
.
_memoryNames
[
index
]
;
if
(
!
name
)
return
_super
.
prototype
.
getMemoryName
.
call
(
this
index
isRef
)
;
return
isRef
?
"
"
.
concat
(
name
)
:
"
"
.
concat
(
name
"
(
;
"
)
.
concat
(
index
"
;
)
"
)
;
}
;
NameSectionNameResolver
.
prototype
.
getGlobalName
=
function
(
index
isRef
)
{
var
name
=
this
.
_globalNames
[
index
]
;
if
(
!
name
)
return
_super
.
prototype
.
getGlobalName
.
call
(
this
index
isRef
)
;
return
isRef
?
"
"
.
concat
(
name
)
:
"
"
.
concat
(
name
"
(
;
"
)
.
concat
(
index
"
;
)
"
)
;
}
;
NameSectionNameResolver
.
prototype
.
getTagName
=
function
(
index
isRef
)
{
var
name
=
this
.
_tagNames
[
index
]
;
if
(
!
name
)
return
_super
.
prototype
.
getTagName
.
call
(
this
index
isRef
)
;
return
isRef
?
"
"
.
concat
(
name
)
:
"
"
.
concat
(
name
"
(
;
"
)
.
concat
(
index
"
;
)
"
)
;
}
;
NameSectionNameResolver
.
prototype
.
getFunctionName
=
function
(
index
isImport
isRef
)
{
var
name
=
this
.
_functionNames
[
index
]
;
if
(
!
name
)
return
"
"
.
concat
(
UNKNOWN_FUNCTION_PREFIX
)
.
concat
(
index
)
;
return
isRef
?
"
"
.
concat
(
name
)
:
"
"
.
concat
(
name
"
(
;
"
)
.
concat
(
index
"
;
)
"
)
;
}
;
NameSectionNameResolver
.
prototype
.
getVariableName
=
function
(
funcIndex
index
isRef
)
{
var
name
=
this
.
_localNames
[
funcIndex
]
&
&
this
.
_localNames
[
funcIndex
]
[
index
]
;
if
(
!
name
)
return
_super
.
prototype
.
getVariableName
.
call
(
this
funcIndex
index
isRef
)
;
return
isRef
?
"
"
.
concat
(
name
)
:
"
"
.
concat
(
name
"
(
;
"
)
.
concat
(
index
"
;
)
"
)
;
}
;
NameSectionNameResolver
.
prototype
.
getFieldName
=
function
(
typeIndex
index
isRef
)
{
var
name
=
this
.
_fieldNames
[
typeIndex
]
&
&
this
.
_fieldNames
[
typeIndex
]
[
index
]
;
if
(
!
name
)
return
_super
.
prototype
.
getFieldName
.
call
(
this
typeIndex
index
isRef
)
;
return
isRef
?
"
"
.
concat
(
name
)
:
"
"
.
concat
(
name
"
(
;
"
)
.
concat
(
index
"
;
)
"
)
;
}
;
return
NameSectionNameResolver
;
}
(
DefaultNameResolver
)
)
;
var
NameSectionReader
=
(
function
(
)
{
function
NameSectionReader
(
)
{
this
.
_done
=
false
;
this
.
_functionsCount
=
0
;
this
.
_functionImportsCount
=
0
;
this
.
_functionNames
=
null
;
this
.
_functionLocalNames
=
null
;
this
.
_tagNames
=
null
;
this
.
_typeNames
=
null
;
this
.
_tableNames
=
null
;
this
.
_memoryNames
=
null
;
this
.
_globalNames
=
null
;
this
.
_fieldNames
=
null
;
this
.
_hasNames
=
false
;
}
NameSectionReader
.
prototype
.
read
=
function
(
reader
)
{
var
_this
=
this
;
if
(
this
.
_done
)
throw
new
Error
(
"
Invalid
state
:
disassembly
process
was
already
finished
.
"
)
;
while
(
true
)
{
if
(
!
reader
.
read
(
)
)
return
false
;
switch
(
reader
.
state
)
{
case
2
:
if
(
!
reader
.
hasMoreBytes
(
)
)
{
this
.
_done
=
true
;
return
true
;
}
break
;
case
-
1
:
throw
reader
.
error
;
case
1
:
this
.
_functionsCount
=
0
;
this
.
_functionImportsCount
=
0
;
this
.
_functionNames
=
[
]
;
this
.
_functionLocalNames
=
[
]
;
this
.
_tagNames
=
[
]
;
this
.
_typeNames
=
[
]
;
this
.
_tableNames
=
[
]
;
this
.
_memoryNames
=
[
]
;
this
.
_globalNames
=
[
]
;
this
.
_fieldNames
=
[
]
;
this
.
_hasNames
=
false
;
break
;
case
4
:
break
;
case
3
:
var
sectionInfo
=
reader
.
result
;
if
(
sectionInfo
.
id
=
=
=
0
&
&
(
0
WasmParser_js_1
.
bytesToString
)
(
sectionInfo
.
name
)
=
=
=
NAME_SECTION_NAME
)
{
break
;
}
if
(
sectionInfo
.
id
=
=
=
3
|
|
sectionInfo
.
id
=
=
=
2
)
{
break
;
}
reader
.
skipSection
(
)
;
break
;
case
12
:
var
importInfo
=
reader
.
result
;
if
(
importInfo
.
kind
=
=
=
0
)
this
.
_functionImportsCount
+
+
;
break
;
case
13
:
this
.
_functionsCount
+
+
;
break
;
case
19
:
var
nameInfo
=
reader
.
result
;
if
(
nameInfo
.
type
=
=
=
1
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_functionNames
[
index
]
=
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
;
}
)
;
this
.
_hasNames
=
true
;
}
else
if
(
nameInfo
.
type
=
=
=
2
)
{
var
funcs
=
nameInfo
.
funcs
;
funcs
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
locals
=
_a
.
locals
;
var
localNames
=
(
_this
.
_functionLocalNames
[
index
]
=
[
]
)
;
locals
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
localNames
[
index
]
=
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
;
}
)
;
}
)
;
this
.
_hasNames
=
true
;
}
else
if
(
nameInfo
.
type
=
=
=
11
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_tagNames
[
index
]
=
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
;
}
)
;
this
.
_hasNames
=
true
;
}
else
if
(
nameInfo
.
type
=
=
=
4
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_typeNames
[
index
]
=
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
;
}
)
;
this
.
_hasNames
=
true
;
}
else
if
(
nameInfo
.
type
=
=
=
5
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_tableNames
[
index
]
=
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
;
}
)
;
this
.
_hasNames
=
true
;
}
else
if
(
nameInfo
.
type
=
=
=
6
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_memoryNames
[
index
]
=
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
;
}
)
;
this
.
_hasNames
=
true
;
}
else
if
(
nameInfo
.
type
=
=
=
7
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_globalNames
[
index
]
=
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
;
}
)
;
this
.
_hasNames
=
true
;
}
else
if
(
nameInfo
.
type
=
=
=
10
)
{
var
types
=
nameInfo
.
types
;
types
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
fields
=
_a
.
fields
;
var
fieldNames
=
(
_this
.
_fieldNames
[
index
]
=
[
]
)
;
fields
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
fieldNames
[
index
]
=
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
;
}
)
;
}
)
;
}
break
;
default
:
throw
new
Error
(
"
Expectected
state
:
"
.
concat
(
reader
.
state
)
)
;
}
}
}
;
NameSectionReader
.
prototype
.
hasValidNames
=
function
(
)
{
return
this
.
_hasNames
;
}
;
NameSectionReader
.
prototype
.
getNameResolver
=
function
(
)
{
if
(
!
this
.
hasValidNames
(
)
)
throw
new
Error
(
"
Has
no
valid
name
section
"
)
;
var
functionNamesLength
=
this
.
_functionImportsCount
+
this
.
_functionsCount
;
var
functionNames
=
this
.
_functionNames
.
slice
(
0
functionNamesLength
)
;
var
usedNameAt
=
Object
.
create
(
null
)
;
for
(
var
i
=
0
;
i
<
functionNames
.
length
;
i
+
+
)
{
var
name_1
=
functionNames
[
i
]
;
if
(
!
name_1
)
continue
;
var
goodName
=
!
(
name_1
in
usedNameAt
)
&
&
isValidName
(
name_1
)
&
&
name_1
.
indexOf
(
UNKNOWN_FUNCTION_PREFIX
)
!
=
=
0
;
if
(
!
goodName
)
{
if
(
usedNameAt
[
name_1
]
>
=
0
)
{
functionNames
[
usedNameAt
[
name_1
]
]
=
null
;
usedNameAt
[
name_1
]
=
-
1
;
}
functionNames
[
i
]
=
null
;
continue
;
}
usedNameAt
[
name_1
]
=
i
;
}
return
new
NameSectionNameResolver
(
functionNames
this
.
_functionLocalNames
this
.
_tagNames
this
.
_typeNames
this
.
_tableNames
this
.
_memoryNames
this
.
_globalNames
this
.
_fieldNames
)
;
}
;
return
NameSectionReader
;
}
(
)
)
;
exports
.
NameSectionReader
=
NameSectionReader
;
var
DevToolsNameResolver
=
(
function
(
_super
)
{
__extends
(
DevToolsNameResolver
_super
)
;
function
DevToolsNameResolver
(
functionNames
localNames
tagNames
typeNames
tableNames
memoryNames
globalNames
fieldNames
)
{
return
_super
.
call
(
this
functionNames
localNames
tagNames
typeNames
tableNames
memoryNames
globalNames
fieldNames
)
|
|
this
;
}
DevToolsNameResolver
.
prototype
.
getFunctionName
=
function
(
index
isImport
isRef
)
{
var
name
=
this
.
_functionNames
[
index
]
;
if
(
!
name
)
return
isImport
?
"
import
"
.
concat
(
index
)
:
"
func
"
.
concat
(
index
)
;
return
isRef
?
"
"
.
concat
(
name
)
:
"
"
.
concat
(
name
"
(
;
"
)
.
concat
(
index
"
;
)
"
)
;
}
;
return
DevToolsNameResolver
;
}
(
NameSectionNameResolver
)
)
;
exports
.
DevToolsNameResolver
=
DevToolsNameResolver
;
var
DevToolsNameGenerator
=
(
function
(
)
{
function
DevToolsNameGenerator
(
)
{
this
.
_done
=
false
;
this
.
_functionImportsCount
=
0
;
this
.
_memoryImportsCount
=
0
;
this
.
_tableImportsCount
=
0
;
this
.
_globalImportsCount
=
0
;
this
.
_tagImportsCount
=
0
;
this
.
_functionNames
=
null
;
this
.
_functionLocalNames
=
null
;
this
.
_tagNames
=
null
;
this
.
_memoryNames
=
null
;
this
.
_typeNames
=
null
;
this
.
_tableNames
=
null
;
this
.
_globalNames
=
null
;
this
.
_fieldNames
=
null
;
this
.
_functionExportNames
=
null
;
this
.
_globalExportNames
=
null
;
this
.
_memoryExportNames
=
null
;
this
.
_tableExportNames
=
null
;
this
.
_tagExportNames
=
null
;
}
DevToolsNameGenerator
.
prototype
.
_addExportName
=
function
(
exportNames
index
name
)
{
var
names
=
exportNames
[
index
]
;
if
(
names
)
{
names
.
push
(
name
)
;
}
else
{
exportNames
[
index
]
=
[
name
]
;
}
}
;
DevToolsNameGenerator
.
prototype
.
_setName
=
function
(
names
index
name
isNameSectionName
)
{
if
(
!
name
)
return
;
if
(
isNameSectionName
)
{
if
(
!
isValidName
(
name
)
)
return
;
names
[
index
]
=
name
;
}
else
if
(
!
names
[
index
]
)
{
names
[
index
]
=
name
.
replace
(
INVALID_NAME_SYMBOLS_REGEX_GLOBAL
"
_
"
)
;
}
}
;
DevToolsNameGenerator
.
prototype
.
read
=
function
(
reader
)
{
var
_this
=
this
;
if
(
this
.
_done
)
throw
new
Error
(
"
Invalid
state
:
disassembly
process
was
already
finished
.
"
)
;
while
(
true
)
{
if
(
!
reader
.
read
(
)
)
return
false
;
switch
(
reader
.
state
)
{
case
2
:
if
(
!
reader
.
hasMoreBytes
(
)
)
{
this
.
_done
=
true
;
return
true
;
}
break
;
case
-
1
:
throw
reader
.
error
;
case
1
:
this
.
_functionImportsCount
=
0
;
this
.
_memoryImportsCount
=
0
;
this
.
_tableImportsCount
=
0
;
this
.
_globalImportsCount
=
0
;
this
.
_tagImportsCount
=
0
;
this
.
_functionNames
=
[
]
;
this
.
_functionLocalNames
=
[
]
;
this
.
_tagNames
=
[
]
;
this
.
_memoryNames
=
[
]
;
this
.
_typeNames
=
[
]
;
this
.
_tableNames
=
[
]
;
this
.
_globalNames
=
[
]
;
this
.
_fieldNames
=
[
]
;
this
.
_functionExportNames
=
[
]
;
this
.
_globalExportNames
=
[
]
;
this
.
_memoryExportNames
=
[
]
;
this
.
_tableExportNames
=
[
]
;
this
.
_tagExportNames
=
[
]
;
break
;
case
4
:
break
;
case
3
:
var
sectionInfo
=
reader
.
result
;
if
(
sectionInfo
.
id
=
=
=
0
&
&
(
0
WasmParser_js_1
.
bytesToString
)
(
sectionInfo
.
name
)
=
=
=
NAME_SECTION_NAME
)
{
break
;
}
switch
(
sectionInfo
.
id
)
{
case
2
:
case
7
:
break
;
default
:
reader
.
skipSection
(
)
;
break
;
}
break
;
case
12
:
var
importInfo
=
reader
.
result
;
var
importName
=
"
"
.
concat
(
(
0
WasmParser_js_1
.
bytesToString
)
(
importInfo
.
module
)
"
.
"
)
.
concat
(
(
0
WasmParser_js_1
.
bytesToString
)
(
importInfo
.
field
)
)
;
switch
(
importInfo
.
kind
)
{
case
0
:
this
.
_setName
(
this
.
_functionNames
this
.
_functionImportsCount
+
+
importName
false
)
;
break
;
case
1
:
this
.
_setName
(
this
.
_tableNames
this
.
_tableImportsCount
+
+
importName
false
)
;
break
;
case
2
:
this
.
_setName
(
this
.
_memoryNames
this
.
_memoryImportsCount
+
+
importName
false
)
;
break
;
case
3
:
this
.
_setName
(
this
.
_globalNames
this
.
_globalImportsCount
+
+
importName
false
)
;
break
;
case
4
:
this
.
_setName
(
this
.
_tagNames
this
.
_tagImportsCount
+
+
importName
false
)
;
default
:
throw
new
Error
(
"
Unsupported
export
"
.
concat
(
importInfo
.
kind
)
)
;
}
break
;
case
19
:
var
nameInfo
=
reader
.
result
;
if
(
nameInfo
.
type
=
=
=
1
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_setName
(
_this
.
_functionNames
index
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
true
)
;
}
)
;
}
else
if
(
nameInfo
.
type
=
=
=
2
)
{
var
funcs
=
nameInfo
.
funcs
;
funcs
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
locals
=
_a
.
locals
;
var
localNames
=
(
_this
.
_functionLocalNames
[
index
]
=
[
]
)
;
locals
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
localNames
[
index
]
=
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
;
}
)
;
}
)
;
}
else
if
(
nameInfo
.
type
=
=
=
11
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_setName
(
_this
.
_tagNames
index
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
true
)
;
}
)
;
}
else
if
(
nameInfo
.
type
=
=
=
4
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_setName
(
_this
.
_typeNames
index
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
true
)
;
}
)
;
}
else
if
(
nameInfo
.
type
=
=
=
5
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_setName
(
_this
.
_tableNames
index
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
true
)
;
}
)
;
}
else
if
(
nameInfo
.
type
=
=
=
6
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_setName
(
_this
.
_memoryNames
index
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
true
)
;
}
)
;
}
else
if
(
nameInfo
.
type
=
=
=
7
)
{
var
names
=
nameInfo
.
names
;
names
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
_this
.
_setName
(
_this
.
_globalNames
index
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
true
)
;
}
)
;
}
else
if
(
nameInfo
.
type
=
=
=
10
)
{
var
types
=
nameInfo
.
types
;
types
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
fields
=
_a
.
fields
;
var
fieldNames
=
(
_this
.
_fieldNames
[
index
]
=
[
]
)
;
fields
.
forEach
(
function
(
_a
)
{
var
index
=
_a
.
index
name
=
_a
.
name
;
fieldNames
[
index
]
=
(
0
WasmParser_js_1
.
bytesToString
)
(
name
)
;
}
)
;
}
)
;
}
break
;
case
17
:
var
exportInfo
=
reader
.
result
;
var
exportName
=
(
0
WasmParser_js_1
.
bytesToString
)
(
exportInfo
.
field
)
;
switch
(
exportInfo
.
kind
)
{
case
0
:
this
.
_addExportName
(
this
.
_functionExportNames
exportInfo
.
index
exportName
)
;
this
.
_setName
(
this
.
_functionNames
exportInfo
.
index
exportName
false
)
;
break
;
case
3
:
this
.
_addExportName
(
this
.
_globalExportNames
exportInfo
.
index
exportName
)
;
this
.
_setName
(
this
.
_globalNames
exportInfo
.
index
exportName
false
)
;
break
;
case
2
:
this
.
_addExportName
(
this
.
_memoryExportNames
exportInfo
.
index
exportName
)
;
this
.
_setName
(
this
.
_memoryNames
exportInfo
.
index
exportName
false
)
;
break
;
case
1
:
this
.
_addExportName
(
this
.
_tableExportNames
exportInfo
.
index
exportName
)
;
this
.
_setName
(
this
.
_tableNames
exportInfo
.
index
exportName
false
)
;
break
;
case
4
:
this
.
_addExportName
(
this
.
_tagExportNames
exportInfo
.
index
exportName
)
;
this
.
_setName
(
this
.
_tagNames
exportInfo
.
index
exportName
false
)
;
break
;
default
:
throw
new
Error
(
"
Unsupported
export
"
.
concat
(
exportInfo
.
kind
)
)
;
}
break
;
default
:
throw
new
Error
(
"
Expectected
state
:
"
.
concat
(
reader
.
state
)
)
;
}
}
}
;
DevToolsNameGenerator
.
prototype
.
getExportMetadata
=
function
(
)
{
return
new
DevToolsExportMetadata
(
this
.
_functionExportNames
this
.
_globalExportNames
this
.
_memoryExportNames
this
.
_tableExportNames
this
.
_tagExportNames
)
;
}
;
DevToolsNameGenerator
.
prototype
.
getNameResolver
=
function
(
)
{
return
new
DevToolsNameResolver
(
this
.
_functionNames
this
.
_functionLocalNames
this
.
_tagNames
this
.
_typeNames
this
.
_tableNames
this
.
_memoryNames
this
.
_globalNames
this
.
_fieldNames
)
;
}
;
return
DevToolsNameGenerator
;
}
(
)
)
;
exports
.
DevToolsNameGenerator
=
DevToolsNameGenerator
;
