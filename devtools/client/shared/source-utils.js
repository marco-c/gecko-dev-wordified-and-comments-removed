"
use
strict
"
;
const
{
URL
}
=
require
(
"
sdk
/
url
"
)
;
const
CHAR_CODE_A
=
"
a
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_C
=
"
c
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_E
=
"
e
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_F
=
"
f
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_H
=
"
h
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_I
=
"
i
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_J
=
"
j
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_L
=
"
l
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_M
=
"
m
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_O
=
"
o
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_P
=
"
p
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_R
=
"
r
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_S
=
"
s
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_T
=
"
t
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_U
=
"
u
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_COLON
=
"
:
"
.
charCodeAt
(
0
)
;
const
CHAR_CODE_SLASH
=
"
/
"
.
charCodeAt
(
0
)
;
const
gURLStore
=
new
Map
(
)
;
function
parseURL
(
location
)
{
let
url
=
gURLStore
.
get
(
location
)
;
if
(
url
!
=
=
void
0
)
{
return
url
;
}
try
{
url
=
new
URL
(
location
)
;
let
isChrome
=
isChromeScheme
(
location
)
;
let
fileName
=
url
.
fileName
|
|
"
/
"
;
let
hostname
=
isChrome
?
null
:
url
.
hostname
;
let
host
=
isChrome
?
null
:
url
.
port
?
{
url
.
host
}
:
{
url
.
port
}
:
url
.
host
;
let
parsed
=
Object
.
assign
(
{
}
url
{
host
fileName
hostname
}
)
;
gURLStore
.
set
(
location
parsed
)
;
return
parsed
;
}
catch
(
e
)
{
gURLStore
.
set
(
location
null
)
;
return
null
;
}
}
function
getSourceNames
(
source
unknownSourceString
)
{
let
short
long
host
;
const
sourceStr
=
source
?
String
(
source
)
:
"
"
;
const
parsedUrl
=
parseURL
(
sourceStr
)
;
if
(
!
parsedUrl
)
{
long
=
sourceStr
;
short
=
sourceStr
.
slice
(
0
100
)
;
}
else
{
short
=
parsedUrl
.
fileName
;
long
=
parsedUrl
.
href
;
host
=
parsedUrl
.
host
;
}
if
(
!
short
)
{
if
(
!
long
)
{
long
=
unknownSourceString
;
}
short
=
long
.
slice
(
0
100
)
;
}
return
{
short
long
host
}
;
}
function
isColonSlashSlash
(
location
i
=
0
)
{
return
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_COLON
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_SLASH
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_SLASH
;
}
function
isContentScheme
(
location
i
=
0
)
{
let
firstChar
=
location
.
charCodeAt
(
i
)
;
switch
(
firstChar
)
{
case
CHAR_CODE_H
:
if
(
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_T
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_T
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_P
)
{
if
(
location
.
charCodeAt
(
i
+
1
)
=
=
=
CHAR_CODE_S
)
{
+
+
i
;
}
return
isColonSlashSlash
(
location
i
)
;
}
return
false
;
case
CHAR_CODE_F
:
if
(
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_I
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_L
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_E
)
{
return
isColonSlashSlash
(
location
i
)
;
}
return
false
;
case
CHAR_CODE_A
:
if
(
location
.
charCodeAt
(
+
+
i
)
=
=
CHAR_CODE_P
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
CHAR_CODE_P
)
{
return
isColonSlashSlash
(
location
i
)
;
}
return
false
;
default
:
return
false
;
}
}
function
isChromeScheme
(
location
i
=
0
)
{
let
firstChar
=
location
.
charCodeAt
(
i
)
;
switch
(
firstChar
)
{
case
CHAR_CODE_C
:
if
(
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_H
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_R
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_O
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_M
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_E
)
{
return
isColonSlashSlash
(
location
i
)
;
}
return
false
;
case
CHAR_CODE_R
:
if
(
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_E
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_S
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_O
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_U
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_R
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_C
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_E
)
{
return
isColonSlashSlash
(
location
i
)
;
}
return
false
;
case
CHAR_CODE_J
:
if
(
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_A
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_R
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_COLON
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_F
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_I
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_L
&
&
location
.
charCodeAt
(
+
+
i
)
=
=
=
CHAR_CODE_E
)
{
return
isColonSlashSlash
(
location
i
)
;
}
return
false
;
default
:
return
false
;
}
}
exports
.
parseURL
=
parseURL
;
exports
.
getSourceNames
=
getSourceNames
;
exports
.
isChromeScheme
=
isChromeScheme
;
exports
.
isContentScheme
=
isContentScheme
;
