"
use
strict
"
;
add_task
(
async
function
testGetOriginalLocation
(
)
{
await
fetchFixtureSourceMap
(
"
bundle
"
)
;
const
generatedLocation
=
{
sourceId
:
"
bundle
.
js
"
line
:
49
}
;
const
originalLocation
=
await
getOriginalLocation
(
generatedLocation
)
;
Assert
.
deepEqual
(
originalLocation
{
column
:
0
line
:
3
sourceId
:
"
bundle
.
js
/
originalSource
-
fe2c41d3535b76c158e39ba4f3ff826a
"
sourceUrl
:
"
webpack
:
/
/
/
entry
.
js
"
}
"
Mapped
a
generated
location
"
)
;
const
originalLocation2
=
await
getOriginalLocation
(
originalLocation
)
;
Assert
.
deepEqual
(
originalLocation2
originalLocation
"
original
location
maps
to
itself
"
)
;
clearSourceMaps
(
)
;
const
originalLocation3
=
await
getOriginalLocation
(
generatedLocation
)
;
Assert
.
deepEqual
(
originalLocation3
generatedLocation
"
after
clearing
the
source
maps
the
same
generated
location
maps
to
itself
"
)
;
}
)
;
add_task
(
async
function
testGetGeneratedLocation
(
)
{
await
fetchFixtureSourceMap
(
"
bundle
"
)
;
const
originalLocation
=
{
column
:
0
line
:
3
sourceId
:
"
bundle
.
js
/
originalSource
-
fe2c41d3535b76c158e39ba4f3ff826a
"
}
;
const
source
=
{
url
:
"
webpack
:
/
/
/
entry
.
js
"
id
:
"
bundle
.
js
/
originalSource
-
fe2c41d3535b76c158e39ba4f3ff826a
"
}
;
const
generatedLocation
=
await
getGeneratedLocation
(
originalLocation
source
)
;
Assert
.
deepEqual
(
generatedLocation
{
sourceId
:
"
bundle
.
js
"
line
:
49
column
:
0
}
"
Map
an
original
location
"
)
;
{
clearSourceMaps
(
)
;
const
secondGeneratedLocation
=
await
getGeneratedLocation
(
originalLocation
source
)
;
Assert
.
deepEqual
(
secondGeneratedLocation
originalLocation
"
after
clearing
source
maps
the
same
location
no
longer
maps
to
an
original
location
"
)
;
}
{
await
fetchFixtureSourceMap
(
"
if
.
out
"
)
;
const
genLoc1
=
{
sourceId
:
"
if
.
out
.
js
"
column
:
0
line
:
8
}
;
const
ifSource
=
{
url
:
"
if
.
js
"
id
:
"
if
.
out
.
js
/
originalSource
-
5ad3141023dae912c5f8833c7e03beeb
"
}
;
const
oLoc
=
await
getOriginalLocation
(
genLoc1
)
;
const
genLoc2
=
await
getGeneratedLocation
(
oLoc
ifSource
)
;
Assert
.
deepEqual
(
genLoc2
genLoc1
"
location
mapping
is
symmetric
"
)
;
}
{
await
fetchFixtureSourceMap
(
"
if
.
out
"
)
;
const
genLoc1
=
{
sourceId
:
"
if
.
out
.
js
"
column
:
undefined
line
:
8
}
;
const
ifSource
=
{
url
:
"
if
.
js
"
id
:
"
if
.
out
.
js
/
originalSource
-
5ad3141023dae912c5f8833c7e03beeb
"
}
;
const
oLoc
=
await
getOriginalLocation
(
genLoc1
)
;
const
genLoc2
=
await
getGeneratedLocation
(
oLoc
ifSource
)
;
Assert
.
deepEqual
(
genLoc2
{
sourceId
:
"
if
.
out
.
js
"
column
:
0
line
:
8
}
"
undefined
column
is
handled
like
0
column
"
)
;
}
}
)
;
