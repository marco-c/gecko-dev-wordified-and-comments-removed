"
use
strict
"
;
function
networkRequest
(
url
opts
)
{
const
supportedProtocols
=
[
"
http
:
"
"
https
:
"
"
data
:
"
]
;
const
ADDITIONAL_PROTOCOLS
=
[
"
chrome
:
"
"
file
:
"
"
moz
-
extension
:
"
]
;
for
(
const
protocol
of
ADDITIONAL_PROTOCOLS
)
{
if
(
opts
.
sourceMapBaseURL
?
.
startsWith
(
protocol
)
)
{
supportedProtocols
.
push
(
protocol
)
;
}
}
if
(
supportedProtocols
.
every
(
protocol
=
>
!
url
.
startsWith
(
protocol
)
)
)
{
return
Promise
.
reject
(
unsupported
protocol
for
sourcemap
request
{
url
}
)
;
}
return
fetch
(
url
{
cache
:
opts
.
loadFromCache
?
"
default
"
:
"
no
-
cache
"
redirect
:
opts
.
allowRedirects
?
"
follow
"
:
"
error
"
}
)
.
then
(
res
=
>
{
if
(
res
.
status
>
=
200
&
&
res
.
status
<
300
)
{
if
(
res
.
headers
.
get
(
"
Content
-
Type
"
)
=
=
=
"
application
/
wasm
"
)
{
return
res
.
arrayBuffer
(
)
.
then
(
buffer
=
>
(
{
content
:
buffer
isDwarf
:
true
}
)
)
;
}
return
res
.
text
(
)
.
then
(
text
=
>
(
{
content
:
text
}
)
)
;
}
return
Promise
.
reject
(
request
failed
with
status
{
res
.
status
}
)
;
}
)
;
}
module
.
exports
=
{
networkRequest
}
;
