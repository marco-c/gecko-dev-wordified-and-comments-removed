"
use
strict
"
;
const
{
networkRequest
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
utils
/
network
-
request
"
)
;
const
{
SourceMapConsumer
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
source
-
map
/
source
-
map
.
js
"
)
;
const
{
getSourceMap
setSourceMap
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
utils
/
sourceMapRequests
"
)
;
const
{
WasmRemap
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
utils
/
wasmRemap
"
)
;
const
{
convertToJSON
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
wasm
-
dwarf
/
convertToJSON
"
)
;
const
originalURLs
=
new
Set
(
)
;
function
clearOriginalURLs
(
)
{
originalURLs
.
clear
(
)
;
}
function
hasOriginalURL
(
url
)
{
return
originalURLs
.
has
(
url
)
;
}
function
resolveSourceMapURL
(
source
)
{
let
{
sourceMapBaseURL
sourceMapURL
}
=
source
;
sourceMapBaseURL
=
sourceMapBaseURL
|
|
"
"
;
sourceMapURL
=
sourceMapURL
|
|
"
"
;
if
(
!
sourceMapBaseURL
)
{
return
{
resolvedSourceMapURL
:
sourceMapURL
baseURL
:
sourceMapURL
}
;
}
let
resolvedString
;
let
baseURL
;
if
(
sourceMapURL
.
startsWith
(
"
data
:
"
)
)
{
resolvedString
=
sourceMapURL
;
baseURL
=
sourceMapBaseURL
;
}
else
{
resolvedString
=
new
URL
(
sourceMapURL
sourceMapBaseURL
.
startsWith
(
"
data
:
"
)
?
undefined
:
sourceMapBaseURL
)
.
toString
(
)
;
baseURL
=
resolvedString
;
}
return
{
resolvedSourceMapURL
:
resolvedString
baseURL
}
;
}
async
function
_fetch
(
generatedSource
resolvedSourceMapURL
baseURL
)
{
let
fetched
=
await
networkRequest
(
resolvedSourceMapURL
{
loadFromCache
:
false
allowRedirects
:
false
sourceMapBaseURL
:
generatedSource
.
sourceMapBaseURL
}
)
;
if
(
fetched
.
isDwarf
)
{
fetched
=
{
content
:
await
convertToJSON
(
fetched
.
content
)
}
;
}
let
map
=
await
new
SourceMapConsumer
(
fetched
.
content
baseURL
)
;
if
(
generatedSource
.
isWasm
)
{
map
=
new
WasmRemap
(
map
)
;
if
(
fetched
.
content
.
includes
(
"
x
-
scopes
"
)
)
{
const
parsedJSON
=
JSON
.
parse
(
fetched
.
content
)
;
map
.
xScopes
=
parsedJSON
[
"
x
-
scopes
"
]
;
}
}
map
.
sourceMapBaseURL
=
generatedSource
.
sourceMapBaseURL
;
if
(
map
&
&
map
.
sources
)
{
map
.
sources
.
forEach
(
url
=
>
originalURLs
.
add
(
url
)
)
;
}
return
map
;
}
function
fetchSourceMap
(
generatedSource
resolvedSourceMapURL
baseURL
)
{
const
existingRequest
=
getSourceMap
(
generatedSource
.
id
)
;
if
(
existingRequest
)
{
return
existingRequest
;
}
if
(
!
generatedSource
.
sourceMapURL
)
{
return
null
;
}
const
req
=
_fetch
(
generatedSource
resolvedSourceMapURL
baseURL
)
;
setSourceMap
(
generatedSource
.
id
req
.
catch
(
(
)
=
>
null
)
)
;
return
req
;
}
module
.
exports
=
{
fetchSourceMap
hasOriginalURL
clearOriginalURLs
resolveSourceMapURL
}
;
