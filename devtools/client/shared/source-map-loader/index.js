"
use
strict
"
;
const
{
WorkerDispatcher
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
worker
-
utils
.
js
"
)
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
l10n
.
js
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
toolbox
.
properties
"
)
;
const
SOURCE_MAP_WORKER_URL
=
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
worker
.
js
"
;
const
{
originalToGeneratedId
generatedToOriginalId
isGeneratedId
isOriginalId
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
utils
/
index
.
js
"
)
;
class
SourceMapLoader
extends
WorkerDispatcher
{
constructor
(
targetCommand
)
{
super
(
SOURCE_MAP_WORKER_URL
)
;
this
.
#
targetCommand
=
targetCommand
;
}
#
setSourceMapForGeneratedSources
=
this
.
task
(
"
setSourceMapForGeneratedSources
"
)
;
#
getOriginalURLs
=
this
.
task
(
"
getOriginalURLs
"
)
;
#
getOriginalSourceText
=
this
.
task
(
"
getOriginalSourceText
"
)
;
#
targetCommand
=
null
;
async
getOriginalURLs
(
urlInfo
)
{
try
{
return
await
this
.
#
getOriginalURLs
(
urlInfo
)
;
}
catch
(
error
)
{
if
(
this
.
#
targetCommand
)
{
const
message
=
L10N
.
getFormatStr
(
"
toolbox
.
sourceMapFailure
"
error
urlInfo
.
url
urlInfo
.
sourceMapURL
)
;
this
.
#
targetCommand
.
targetFront
.
logWarningInPage
(
message
"
source
map
"
)
;
}
throw
error
;
}
}
hasOriginalURL
=
this
.
task
(
"
hasOriginalURL
"
)
;
getOriginalRanges
=
this
.
task
(
"
getOriginalRanges
"
)
;
getGeneratedRanges
=
this
.
task
(
"
getGeneratedRanges
"
{
queue
:
true
}
)
;
getGeneratedLocation
=
this
.
task
(
"
getGeneratedLocation
"
{
queue
:
true
}
)
;
getOriginalLocation
=
this
.
task
(
"
getOriginalLocation
"
{
queue
:
true
}
)
;
getOriginalLocations
=
this
.
task
(
"
getOriginalLocations
"
)
;
getGeneratedRangesForOriginal
=
this
.
task
(
"
getGeneratedRangesForOriginal
"
)
;
getFileGeneratedRange
=
this
.
task
(
"
getFileGeneratedRange
"
)
;
getSourceMapIgnoreList
=
this
.
task
(
"
getSourceMapIgnoreList
"
)
;
async
getOriginalSourceText
(
originalSourceId
)
{
try
{
return
await
this
.
#
getOriginalSourceText
(
originalSourceId
)
;
}
catch
(
error
)
{
const
message
=
L10N
.
getFormatStr
(
"
toolbox
.
sourceMapSourceFailure
"
error
.
message
error
.
metadata
?
error
.
metadata
.
url
:
"
<
unknown
>
"
)
;
if
(
this
.
#
targetCommand
)
{
this
.
#
targetCommand
.
targetFront
.
logWarningInPage
(
message
"
source
map
"
)
;
}
return
{
text
:
message
contentType
:
"
text
/
plain
"
}
;
}
}
clearSourceMaps
=
this
.
task
(
"
clearSourceMaps
"
)
;
getOriginalStackFrames
=
this
.
task
(
"
getOriginalStackFrames
"
)
;
async
setSourceMapForGeneratedSources
(
generatedIds
sourceMap
)
{
const
rv
=
await
this
.
#
setSourceMapForGeneratedSources
(
generatedIds
sourceMap
)
;
await
this
.
emitAsync
(
"
source
-
map
-
created
"
generatedIds
)
;
return
rv
;
}
destroy
(
)
{
this
.
stop
(
)
;
this
.
clearEvents
(
)
;
this
.
#
targetCommand
=
null
;
}
}
EventEmitter
.
decorate
(
SourceMapLoader
.
prototype
)
;
module
.
exports
=
{
SourceMapLoader
originalToGeneratedId
generatedToOriginalId
isGeneratedId
isOriginalId
}
;
