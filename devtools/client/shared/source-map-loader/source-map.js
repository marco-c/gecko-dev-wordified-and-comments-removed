"
use
strict
"
;
const
{
networkRequest
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
utils
/
network
-
request
.
js
"
)
;
const
{
SourceMapConsumer
SourceMapGenerator
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
source
-
map
/
source
-
map
.
js
"
)
;
const
{
createConsumer
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
utils
/
createConsumer
.
js
"
)
;
const
assert
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
utils
/
assert
.
js
"
)
;
const
{
fetchSourceMap
hasOriginalURL
clearOriginalURLs
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
utils
/
fetchSourceMap
.
js
"
)
;
const
{
getSourceMap
getSourceMapWithMetadata
setSourceMap
clearSourceMaps
:
clearSourceMapsRequests
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
utils
/
sourceMapRequests
.
js
"
)
;
const
{
originalToGeneratedId
generatedToOriginalId
isGeneratedId
isOriginalId
getContentType
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
utils
/
index
.
js
"
)
;
const
{
clearWasmXScopes
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
-
loader
/
wasm
-
dwarf
/
wasmXScopes
.
js
"
)
;
async
function
getOriginalURLs
(
generatedSource
)
{
await
fetchSourceMap
(
generatedSource
)
;
const
data
=
await
getSourceMapWithMetadata
(
generatedSource
.
id
)
;
return
data
?
data
.
sources
:
null
;
}
const
COMPUTED_SPANS
=
new
WeakSet
(
)
;
const
SOURCE_MAPPINGS
=
new
WeakMap
(
)
;
async
function
getOriginalRanges
(
sourceId
)
{
if
(
!
isOriginalId
(
sourceId
)
)
{
return
[
]
;
}
const
generatedSourceId
=
originalToGeneratedId
(
sourceId
)
;
const
data
=
await
getSourceMapWithMetadata
(
generatedSourceId
)
;
if
(
!
data
)
{
return
[
]
;
}
const
{
map
}
=
data
;
const
url
=
data
.
urlsById
.
get
(
sourceId
)
;
let
mappings
=
SOURCE_MAPPINGS
.
get
(
map
)
;
if
(
!
mappings
)
{
mappings
=
new
Map
(
)
;
SOURCE_MAPPINGS
.
set
(
map
mappings
)
;
}
let
fileMappings
=
mappings
.
get
(
url
)
;
if
(
!
fileMappings
)
{
fileMappings
=
[
]
;
mappings
.
set
(
url
fileMappings
)
;
const
originalMappings
=
fileMappings
;
map
.
eachMapping
(
mapping
=
>
{
if
(
mapping
.
source
!
=
=
url
)
{
return
;
}
const
last
=
originalMappings
[
originalMappings
.
length
-
1
]
;
if
(
last
&
&
last
.
line
=
=
=
mapping
.
originalLine
)
{
if
(
last
.
columnStart
<
mapping
.
originalColumn
)
{
last
.
columnEnd
=
mapping
.
originalColumn
;
}
else
{
return
;
}
}
originalMappings
.
push
(
{
line
:
mapping
.
originalLine
columnStart
:
mapping
.
originalColumn
columnEnd
:
Infinity
}
)
;
}
null
SourceMapConsumer
.
ORIGINAL_ORDER
)
;
}
return
fileMappings
;
}
async
function
getGeneratedRanges
(
location
)
{
if
(
!
isOriginalId
(
location
.
sourceId
)
)
{
return
[
]
;
}
const
generatedSourceId
=
originalToGeneratedId
(
location
.
sourceId
)
;
const
data
=
await
getSourceMapWithMetadata
(
generatedSourceId
)
;
if
(
!
data
)
{
return
[
]
;
}
const
{
urlsById
map
}
=
data
;
if
(
!
COMPUTED_SPANS
.
has
(
map
)
)
{
COMPUTED_SPANS
.
add
(
map
)
;
map
.
computeColumnSpans
(
)
;
}
const
genPos
=
map
.
generatedPositionFor
(
{
source
:
urlsById
.
get
(
location
.
sourceId
)
line
:
location
.
line
column
:
location
.
column
=
=
null
?
0
:
location
.
column
bias
:
SourceMapConsumer
.
GREATEST_LOWER_BOUND
}
)
;
if
(
genPos
.
line
=
=
=
null
)
{
return
[
]
;
}
const
positions
=
map
.
allGeneratedPositionsFor
(
map
.
originalPositionFor
(
{
line
:
genPos
.
line
column
:
genPos
.
column
}
)
)
;
return
positions
.
map
(
mapping
=
>
(
{
line
:
mapping
.
line
columnStart
:
mapping
.
column
columnEnd
:
mapping
.
lastColumn
}
)
)
.
sort
(
(
a
b
)
=
>
{
const
line
=
a
.
line
-
b
.
line
;
return
line
=
=
=
0
?
a
.
column
-
b
.
column
:
line
;
}
)
;
}
async
function
getGeneratedLocation
(
location
)
{
if
(
!
isOriginalId
(
location
.
sourceId
)
)
{
return
location
;
}
const
generatedSourceId
=
originalToGeneratedId
(
location
.
sourceId
)
;
const
data
=
await
getSourceMapWithMetadata
(
generatedSourceId
)
;
if
(
!
data
)
{
return
location
;
}
const
{
urlsById
map
}
=
data
;
const
positions
=
map
.
allGeneratedPositionsFor
(
{
source
:
urlsById
.
get
(
location
.
sourceId
)
line
:
location
.
line
column
:
location
.
column
=
=
null
?
0
:
location
.
column
}
)
;
let
match
;
for
(
const
pos
of
positions
)
{
if
(
!
match
|
|
pos
.
line
<
match
.
line
|
|
pos
.
column
<
match
.
column
)
{
match
=
pos
;
}
}
if
(
!
match
)
{
match
=
map
.
generatedPositionFor
(
{
source
:
urlsById
.
get
(
location
.
sourceId
)
line
:
location
.
line
column
:
location
.
column
=
=
null
?
0
:
location
.
column
bias
:
SourceMapConsumer
.
LEAST_UPPER_BOUND
}
)
;
}
return
{
sourceId
:
generatedSourceId
line
:
match
.
line
column
:
match
.
column
}
;
}
async
function
getOriginalLocations
(
locations
options
=
{
}
)
{
const
maps
=
{
}
;
const
results
=
[
]
;
for
(
const
location
of
locations
)
{
let
map
=
maps
[
location
.
sourceId
]
;
if
(
map
=
=
=
undefined
)
{
map
=
await
getSourceMap
(
location
.
sourceId
)
;
maps
[
location
.
sourceId
]
=
map
|
|
null
;
}
results
.
push
(
map
?
getOriginalLocationSync
(
map
location
options
)
:
location
)
;
}
return
results
;
}
function
getOriginalLocationSync
(
map
location
{
search
}
=
{
}
)
{
let
match
=
map
.
originalPositionFor
(
{
line
:
location
.
line
column
:
location
.
column
=
=
null
?
0
:
location
.
column
}
)
;
if
(
search
)
{
let
line
=
location
.
line
;
let
column
=
location
.
column
=
=
null
?
0
:
location
.
column
;
while
(
match
.
source
=
=
=
null
)
{
match
=
map
.
originalPositionFor
(
{
line
column
bias
:
SourceMapConsumer
[
search
]
}
)
;
line
+
=
search
=
=
"
LEAST_UPPER_BOUND
"
?
1
:
-
1
;
column
=
search
=
=
"
LEAST_UPPER_BOUND
"
?
0
:
Infinity
;
}
}
const
{
source
:
sourceUrl
line
column
}
=
match
;
if
(
sourceUrl
=
=
null
)
{
return
location
;
}
return
{
sourceId
:
generatedToOriginalId
(
location
.
sourceId
sourceUrl
)
sourceUrl
line
column
}
;
}
async
function
getOriginalLocation
(
location
options
=
{
}
)
{
if
(
!
isGeneratedId
(
location
.
sourceId
)
)
{
return
location
;
}
const
map
=
await
getSourceMap
(
location
.
sourceId
)
;
if
(
!
map
)
{
return
location
;
}
return
getOriginalLocationSync
(
map
location
options
)
;
}
async
function
getOriginalSourceText
(
originalSourceId
)
{
assert
(
isOriginalId
(
originalSourceId
)
"
Source
is
not
an
original
source
"
)
;
const
generatedSourceId
=
originalToGeneratedId
(
originalSourceId
)
;
const
data
=
await
getSourceMapWithMetadata
(
generatedSourceId
)
;
if
(
!
data
)
{
return
null
;
}
const
{
urlsById
map
}
=
data
;
const
url
=
urlsById
.
get
(
originalSourceId
)
;
let
text
=
map
.
sourceContentFor
(
url
true
)
;
if
(
!
text
)
{
try
{
const
response
=
await
networkRequest
(
url
{
sourceMapBaseURL
:
map
.
sourceMapBaseURL
loadFromCache
:
false
}
)
;
text
=
response
.
content
;
}
catch
(
err
)
{
err
.
metadata
=
{
.
.
.
err
.
metadata
url
}
;
throw
err
;
}
}
return
{
text
contentType
:
getContentType
(
url
|
|
"
"
)
}
;
}
const
GENERATED_MAPPINGS
=
new
WeakMap
(
)
;
async
function
getGeneratedRangesForOriginal
(
sourceId
mergeUnmappedRegions
=
false
)
{
assert
(
isOriginalId
(
sourceId
)
"
Source
is
not
an
original
source
"
)
;
const
data
=
await
getSourceMapWithMetadata
(
originalToGeneratedId
(
sourceId
)
)
;
if
(
!
data
)
{
return
[
]
;
}
const
{
urlsById
map
}
=
data
;
const
url
=
urlsById
.
get
(
sourceId
)
;
if
(
!
COMPUTED_SPANS
.
has
(
map
)
)
{
COMPUTED_SPANS
.
add
(
map
)
;
map
.
computeColumnSpans
(
)
;
}
if
(
!
GENERATED_MAPPINGS
.
has
(
map
)
)
{
GENERATED_MAPPINGS
.
set
(
map
new
Map
(
)
)
;
}
const
generatedRangesMap
=
GENERATED_MAPPINGS
.
get
(
map
)
;
if
(
!
generatedRangesMap
)
{
return
[
]
;
}
if
(
generatedRangesMap
.
has
(
sourceId
)
)
{
return
generatedRangesMap
.
get
(
sourceId
)
|
|
[
]
;
}
let
currentGroup
=
[
]
;
const
originalGroups
=
[
currentGroup
]
;
map
.
eachMapping
(
mapping
=
>
{
if
(
mapping
.
source
=
=
=
url
)
{
currentGroup
.
push
(
{
start
:
{
line
:
mapping
.
generatedLine
column
:
mapping
.
generatedColumn
}
end
:
{
line
:
mapping
.
generatedLine
column
:
mapping
.
lastGeneratedColumn
+
1
}
}
)
;
}
else
if
(
typeof
mapping
.
source
=
=
=
"
string
"
&
&
currentGroup
.
length
)
{
currentGroup
=
[
]
;
originalGroups
.
push
(
currentGroup
)
;
}
}
null
SourceMapConsumer
.
GENERATED_ORDER
)
;
const
generatedMappingsForOriginal
=
[
]
;
if
(
mergeUnmappedRegions
)
{
for
(
const
group
of
originalGroups
)
{
if
(
group
.
length
)
{
generatedMappingsForOriginal
.
push
(
{
start
:
group
[
0
]
.
start
end
:
group
[
group
.
length
-
1
]
.
end
}
)
;
}
}
}
else
{
let
lastEntry
;
for
(
const
group
of
originalGroups
)
{
lastEntry
=
null
;
for
(
const
{
start
end
}
of
group
)
{
const
lastEnd
=
lastEntry
?
wrappedMappingPosition
(
lastEntry
.
end
)
:
null
;
if
(
lastEntry
&
&
lastEnd
&
&
lastEnd
.
line
=
=
=
start
.
line
&
&
lastEnd
.
column
=
=
=
start
.
column
)
{
lastEntry
.
end
=
end
;
}
else
{
const
newEntry
=
{
start
end
}
;
generatedMappingsForOriginal
.
push
(
newEntry
)
;
lastEntry
=
newEntry
;
}
}
}
}
generatedRangesMap
.
set
(
sourceId
generatedMappingsForOriginal
)
;
return
generatedMappingsForOriginal
;
}
function
wrappedMappingPosition
(
pos
)
{
if
(
pos
.
column
!
=
=
Infinity
)
{
return
pos
;
}
return
{
line
:
pos
.
line
+
1
column
:
0
}
;
}
async
function
getFileGeneratedRange
(
originalSourceId
)
{
assert
(
isOriginalId
(
originalSourceId
)
"
Source
is
not
an
original
source
"
)
;
const
data
=
await
getSourceMapWithMetadata
(
originalToGeneratedId
(
originalSourceId
)
)
;
if
(
!
data
)
{
return
null
;
}
const
{
urlsById
map
}
=
data
;
const
start
=
map
.
generatedPositionFor
(
{
source
:
urlsById
.
get
(
originalSourceId
)
line
:
1
column
:
0
bias
:
SourceMapConsumer
.
LEAST_UPPER_BOUND
}
)
;
const
end
=
map
.
generatedPositionFor
(
{
source
:
urlsById
.
get
(
originalSourceId
)
line
:
Number
.
MAX_SAFE_INTEGER
column
:
Number
.
MAX_SAFE_INTEGER
bias
:
SourceMapConsumer
.
GREATEST_LOWER_BOUND
}
)
;
return
{
start
end
}
;
}
function
applySourceMap
(
generatedId
url
code
mappings
)
{
const
generator
=
new
SourceMapGenerator
(
{
file
:
url
}
)
;
mappings
.
forEach
(
mapping
=
>
generator
.
addMapping
(
mapping
)
)
;
generator
.
setSourceContent
(
url
code
)
;
const
map
=
createConsumer
(
generator
.
toJSON
(
)
)
;
setSourceMap
(
generatedId
Promise
.
resolve
(
map
)
)
;
}
function
clearSourceMaps
(
)
{
clearSourceMapsRequests
(
)
;
clearWasmXScopes
(
)
;
clearOriginalURLs
(
)
;
}
module
.
exports
=
{
getOriginalURLs
hasOriginalURL
getOriginalRanges
getGeneratedRanges
getGeneratedLocation
getOriginalLocation
getOriginalLocations
getOriginalSourceText
getGeneratedRangesForOriginal
getFileGeneratedRange
applySourceMap
clearSourceMaps
}
;
