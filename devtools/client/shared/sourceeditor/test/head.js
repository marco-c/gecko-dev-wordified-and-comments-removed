"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
const
Editor
=
require
(
"
devtools
/
client
/
shared
/
sourceeditor
/
editor
"
)
;
const
{
getClientCssProperties
}
=
require
(
"
devtools
/
shared
/
fronts
/
css
-
properties
"
)
;
function
promiseWaitForFocus
(
)
{
return
new
Promise
(
resolve
=
>
waitForFocus
(
resolve
)
)
;
}
function
setup
(
cb
additionalOpts
=
{
}
)
{
cb
=
cb
|
|
function
(
)
{
}
;
return
new
Promise
(
resolve
=
>
{
const
opt
=
"
chrome
titlebar
toolbar
centerscreen
resizable
dialog
=
no
"
;
const
win
=
Services
.
ww
.
openWindow
(
null
CHROME_URL_ROOT
+
"
head
.
xul
"
"
_blank
"
opt
null
)
;
const
opts
=
{
value
:
"
Hello
.
"
lineNumbers
:
true
foldGutter
:
true
gutters
:
[
"
CodeMirror
-
linenumbers
"
"
breakpoints
"
"
CodeMirror
-
foldgutter
"
]
cssProperties
:
getClientCssProperties
(
)
}
;
for
(
const
o
in
additionalOpts
)
{
opts
[
o
]
=
additionalOpts
[
o
]
;
}
win
.
addEventListener
(
"
load
"
function
(
)
{
waitForFocus
(
function
(
)
{
const
box
=
win
.
document
.
querySelector
(
"
box
"
)
;
const
editor
=
new
Editor
(
opts
)
;
editor
.
appendTo
(
box
)
.
then
(
(
)
=
>
{
resolve
(
{
ed
:
editor
win
:
win
edWin
:
editor
.
container
.
contentWindow
.
wrappedJSObject
}
)
;
cb
(
editor
win
)
;
}
err
=
>
ok
(
false
err
.
message
)
)
;
}
win
)
;
}
{
once
:
true
}
)
;
}
)
;
}
function
ch
(
exp
act
label
)
{
is
(
exp
.
line
act
.
line
label
+
"
(
line
)
"
)
;
is
(
exp
.
ch
act
.
ch
label
+
"
(
ch
)
"
)
;
}
function
teardown
(
ed
win
)
{
ed
.
destroy
(
)
;
win
.
close
(
)
;
while
(
gBrowser
.
tabs
.
length
>
1
)
{
gBrowser
.
removeCurrentTab
(
)
;
}
finish
(
)
;
}
function
loadHelperScript
(
filePath
)
{
const
testDir
=
gTestPath
.
substr
(
0
gTestPath
.
lastIndexOf
(
"
/
"
)
)
;
Services
.
scriptloader
.
loadSubScript
(
testDir
+
"
/
"
+
filePath
this
)
;
}
function
limit
(
source
[
line
char
]
)
{
line
+
+
;
const
list
=
source
.
split
(
"
\
n
"
)
;
if
(
list
.
length
<
line
)
{
return
source
;
}
if
(
line
=
=
1
)
{
return
list
[
0
]
.
slice
(
0
char
)
;
}
return
[
.
.
.
list
.
slice
(
0
line
-
1
)
list
[
line
-
1
]
.
slice
(
0
char
)
]
.
join
(
"
\
n
"
)
;
}
function
read
(
url
)
{
const
scriptableStream
=
Cc
[
"
mozilla
.
org
/
scriptableinputstream
;
1
"
]
.
getService
(
Ci
.
nsIScriptableInputStream
)
;
const
channel
=
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
;
const
input
=
channel
.
open
(
)
;
scriptableStream
.
init
(
input
)
;
let
data
=
"
"
;
while
(
input
.
available
(
)
)
{
data
=
data
.
concat
(
scriptableStream
.
read
(
input
.
available
(
)
)
)
;
}
scriptableStream
.
close
(
)
;
input
.
close
(
)
;
return
data
;
}
function
codemirrorSetStatus
(
statusMsg
type
customMsg
)
{
switch
(
type
)
{
case
"
expected
"
:
case
"
ok
"
:
ok
(
1
statusMsg
)
;
break
;
case
"
error
"
:
case
"
fail
"
:
ok
(
0
statusMsg
)
;
break
;
default
:
info
(
statusMsg
)
;
break
;
}
if
(
customMsg
&
&
typeof
customMsg
=
=
"
string
"
&
&
customMsg
!
=
statusMsg
)
{
info
(
customMsg
)
;
}
}
