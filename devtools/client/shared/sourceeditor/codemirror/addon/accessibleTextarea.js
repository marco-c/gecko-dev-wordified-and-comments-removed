(
function
(
mod
)
{
mod
(
require
(
"
.
.
/
lib
/
codemirror
"
)
)
;
}
)
(
function
(
CodeMirror
)
{
CodeMirror
.
inputStyles
.
accessibleTextArea
=
class
extends
CodeMirror
.
inputStyles
.
textarea
{
init
(
display
)
{
super
.
init
(
display
)
;
this
.
textarea
.
addEventListener
(
"
compositionstart
"
this
.
_onCompositionStart
.
bind
(
this
)
)
;
}
_onCompositionStart
(
)
{
if
(
this
.
textarea
.
selectionEnd
=
=
=
this
.
textarea
.
value
.
length
)
{
return
;
}
this
.
textarea
.
value
=
this
.
textarea
.
value
.
substring
(
0
this
.
textarea
.
selectionEnd
)
;
const
length
=
this
.
textarea
.
value
.
length
;
this
.
textarea
.
setSelectionRange
(
length
length
)
;
this
.
prevInput
=
this
.
textarea
.
value
;
}
reset
(
typing
)
{
if
(
typing
|
|
this
.
contextMenuPending
|
|
this
.
composing
|
|
this
.
cm
.
somethingSelected
(
)
)
{
super
.
reset
(
typing
)
;
return
;
}
const
cursor
=
this
.
cm
.
getCursor
(
)
;
let
start
end
;
if
(
this
.
cm
.
options
.
lineWrapping
)
{
const
top
=
this
.
cm
.
charCoords
(
cursor
"
page
"
)
.
top
;
start
=
this
.
cm
.
coordsChar
(
{
left
:
-
Infinity
top
}
)
;
end
=
this
.
cm
.
coordsChar
(
{
left
:
Infinity
top
}
)
;
}
else
{
const
offset
=
Math
.
floor
(
cursor
.
ch
/
1000
)
*
1000
;
start
=
{
ch
:
offset
line
:
cursor
.
line
}
;
end
=
{
ch
:
offset
+
1000
line
:
cursor
.
line
}
;
}
this
.
textarea
.
value
=
this
.
cm
.
getRange
(
start
end
)
;
const
caretPosition
=
cursor
.
ch
-
start
.
ch
;
this
.
textarea
.
setSelectionRange
(
caretPosition
caretPosition
)
;
this
.
prevInput
=
this
.
textarea
.
value
;
}
poll
(
)
{
if
(
this
.
contextMenuPending
|
|
this
.
composing
)
{
return
super
.
poll
(
)
;
}
const
text
=
this
.
textarea
.
value
;
let
start
=
0
;
const
length
=
Math
.
min
(
this
.
prevInput
.
length
text
.
length
)
;
while
(
start
<
length
&
&
this
.
prevInput
[
start
]
=
=
=
text
[
start
]
)
{
+
+
start
;
}
let
end
=
0
;
while
(
end
<
length
-
start
&
&
this
.
prevInput
[
this
.
prevInput
.
length
-
end
-
1
]
=
=
=
text
[
text
.
length
-
end
-
1
]
)
{
+
+
end
;
}
const
placeholder
=
this
.
textarea
;
this
.
textarea
=
document
.
createElement
(
"
textarea
"
)
;
this
.
textarea
.
value
=
text
.
substring
(
start
text
.
length
-
end
)
;
this
.
textarea
.
setSelectionRange
(
placeholder
.
selectionStart
-
start
placeholder
.
selectionEnd
-
start
)
;
this
.
prevInput
=
"
"
;
const
result
=
super
.
poll
(
)
;
this
.
prevInput
=
text
;
this
.
textarea
=
placeholder
;
return
result
;
}
}
;
}
)
;
