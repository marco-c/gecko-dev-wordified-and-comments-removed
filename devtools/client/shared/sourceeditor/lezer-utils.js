"
use
strict
"
;
const
nodeTypes
=
{
FunctionExpression
:
"
FunctionExpression
"
FunctionDeclaration
:
"
FunctionDeclaration
"
ArrowFunction
:
"
ArrowFunction
"
MethodDeclaration
:
"
MethodDeclaration
"
Property
:
"
Property
"
PropertyDeclaration
:
"
PropertyDeclaration
"
PropertyDefinition
:
"
PropertyDefinition
"
MemberExpression
:
"
MemberExpression
"
VariableDefinition
:
"
VariableDefinition
"
VariableName
:
"
VariableName
"
this
:
"
this
"
PropertyName
:
"
PropertyName
"
Equals
:
"
Equals
"
ParamList
:
"
ParamList
"
Spread
:
"
Spread
"
}
;
const
nodeTypeSets
=
{
functions
:
new
Set
(
[
nodeTypes
.
FunctionExpression
nodeTypes
.
FunctionDeclaration
nodeTypes
.
ArrowFunction
nodeTypes
.
MethodDeclaration
]
)
expressions
:
new
Set
(
[
nodeTypes
.
MemberExpression
nodeTypes
.
VariableDefinition
nodeTypes
.
VariableName
nodeTypes
.
this
nodeTypes
.
PropertyName
]
)
}
;
async
function
walkTree
(
view
language
options
)
{
const
{
forceParsing
syntaxTree
}
=
language
;
if
(
options
.
forceParseTo
)
{
await
forceParsing
(
view
options
.
forceParseTo
10000
)
;
}
await
syntaxTree
(
view
.
state
)
.
iterate
(
{
enter
:
node
=
>
{
if
(
options
.
filterSet
?
.
has
(
node
.
name
)
)
{
options
.
enterVisitor
(
node
)
;
}
}
from
:
options
.
walkFrom
to
:
options
.
walkTo
}
)
;
}
module
.
exports
=
{
nodeTypes
nodeTypeSets
walkTree
}
;
