"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
asyncStorage
=
require
(
"
devtools
/
shared
/
async
-
storage
"
)
;
const
{
ADD_VIEWPORT
CHANGE_DEVICE
CHANGE_PIXEL_RATIO
CHANGE_VIEWPORT_ANGLE
REMOVE_DEVICE_ASSOCIATION
RESIZE_VIEWPORT
ROTATE_VIEWPORT
ZOOM_VIEWPORT
}
=
require
(
"
.
/
index
"
)
;
const
{
post
}
=
require
(
"
.
.
/
utils
/
message
"
)
;
module
.
exports
=
{
addViewport
(
userContextId
=
0
)
{
return
{
type
:
ADD_VIEWPORT
userContextId
}
;
}
changeDevice
(
id
device
deviceType
)
{
return
async
function
(
dispatch
)
{
dispatch
(
{
type
:
CHANGE_DEVICE
id
device
deviceType
}
)
;
try
{
await
asyncStorage
.
setItem
(
"
devtools
.
responsive
.
deviceState
"
{
id
device
deviceType
}
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
;
}
changePixelRatio
(
id
pixelRatio
=
0
)
{
return
{
type
:
CHANGE_PIXEL_RATIO
id
pixelRatio
}
;
}
changeViewportAngle
(
id
angle
)
{
return
{
type
:
CHANGE_VIEWPORT_ANGLE
id
angle
}
;
}
removeDeviceAssociation
(
id
)
{
return
async
function
(
dispatch
)
{
post
(
window
"
remove
-
device
-
association
"
)
;
dispatch
(
{
type
:
REMOVE_DEVICE_ASSOCIATION
id
}
)
;
await
asyncStorage
.
removeItem
(
"
devtools
.
responsive
.
deviceState
"
)
;
}
;
}
resizeViewport
(
id
width
height
)
{
return
{
type
:
RESIZE_VIEWPORT
id
width
height
}
;
}
rotateViewport
(
id
)
{
return
async
function
(
dispatch
getState
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
devtools
.
responsive
.
browserUI
.
enabled
"
)
)
{
const
viewport
=
getState
(
)
.
viewports
[
0
]
;
post
(
window
{
type
:
"
viewport
-
resize
"
height
:
viewport
.
width
width
:
viewport
.
height
}
)
;
}
dispatch
(
{
type
:
ROTATE_VIEWPORT
id
}
)
;
}
;
}
zoomViewport
(
id
zoom
)
{
return
{
type
:
ZOOM_VIEWPORT
id
zoom
}
;
}
}
;
