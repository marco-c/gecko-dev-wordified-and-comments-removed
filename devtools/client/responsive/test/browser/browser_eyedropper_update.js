"
use
strict
"
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
<
head
>
<
meta
name
=
'
viewport
'
content
=
'
width
=
device
-
width
'
/
>
<
style
>
div
{
width
:
200px
;
height
:
100px
;
position
:
absolute
;
}
<
/
style
>
<
/
head
>
<
body
>
<
div
style
=
'
right
:
200px
;
background
-
color
:
green
;
'
>
<
/
div
>
<
div
style
=
'
right
:
0px
;
background
-
color
:
blue
;
'
>
<
/
div
>
<
/
body
>
;
add_task
(
async
function
(
)
{
info
(
"
Test
that
the
eyedropper
works
after
switching
to
RDM
and
resizing
the
viewport
.
"
)
;
const
{
inspector
highlighterTestFront
}
=
await
openInspectorForURL
(
TEST_URL
)
;
await
openEyeDropper
(
inspector
highlighterTestFront
)
;
await
moveMouse
(
50
50
)
;
await
waitForEyedropperColor
(
highlighterTestFront
"
#
ffffff
"
)
;
info
(
"
Switch
to
RDM
"
)
;
const
{
ui
}
=
await
openRDM
(
gBrowser
.
selectedTab
)
;
await
waitForEyedropperColor
(
highlighterTestFront
"
#
008000
"
)
;
info
(
"
Resize
the
viewport
"
)
;
await
changeViewportWidth
(
200
ui
)
;
await
waitForEyedropperColor
(
highlighterTestFront
"
#
0000ff
"
)
;
info
(
"
Check
that
the
picked
color
is
copied
to
the
clipboard
"
)
;
ui
.
getViewportBrowser
(
)
.
focus
(
)
;
await
waitForClipboardPromise
(
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
"
#
0000ff
"
)
;
}
)
;
async
function
changeViewportWidth
(
width
ui
)
{
info
(
Changing
viewport
width
to
{
width
}
)
;
const
{
Simulate
}
=
ui
.
toolWindow
.
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
test
-
utils
.
js
"
)
;
const
widthInput
=
ui
.
toolWindow
.
document
.
querySelector
(
"
.
text
-
input
.
viewport
-
dimension
-
input
"
)
;
widthInput
.
focus
(
)
;
widthInput
.
value
=
width
;
Simulate
.
change
(
widthInput
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
