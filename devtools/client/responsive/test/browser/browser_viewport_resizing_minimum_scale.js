"
use
strict
"
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
'
<
head
>
<
meta
name
=
"
viewport
"
content
=
"
initial
-
scale
=
1
.
0
'
+
'
minimum
-
scale
=
1
.
0
width
=
device
-
width
"
>
<
/
head
>
'
+
'
<
div
style
=
"
width
:
100
%
;
background
-
color
:
green
"
>
test
<
/
div
>
'
+
"
<
/
body
>
"
;
addRDMTask
(
TEST_URL
async
function
(
{
ui
manager
}
)
{
info
(
"
-
-
-
Starting
viewport
test
output
-
-
-
"
)
;
const
expected
=
[
{
before
:
{
zoom
:
1
.
0
width
:
300
height
:
600
}
after
:
{
zoom
:
1
.
0
width
:
600
height
:
300
}
}
]
;
for
(
const
e
of
expected
)
{
const
b
=
e
.
before
;
const
a
=
e
.
after
;
const
message
=
"
Meta
Viewport
ON
"
;
info
(
message
+
"
setting
meta
viewport
support
.
"
)
;
await
setTouchAndMetaViewportSupport
(
ui
true
)
;
await
setViewportSizeAndAwaitReflow
(
ui
manager
300
600
)
;
await
testViewportZoomWidthAndHeight
(
message
+
"
before
resize
"
ui
b
.
zoom
b
.
width
b
.
height
)
;
await
setViewportSizeAndAwaitReflow
(
ui
manager
600
300
)
;
await
testViewportZoomWidthAndHeight
(
message
+
"
after
resize
"
ui
a
.
zoom
a
.
width
a
.
height
)
;
await
setViewportSizeAndAwaitReflow
(
ui
manager
300
600
)
;
await
testViewportZoomWidthAndHeight
(
message
+
"
return
to
initial
size
"
ui
b
.
zoom
b
.
width
b
.
height
)
;
}
}
{
usingBrowserUI
:
true
}
)
;
