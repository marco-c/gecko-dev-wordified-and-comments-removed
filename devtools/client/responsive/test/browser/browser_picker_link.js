"
use
strict
"
;
const
TEST_URI
=
{
URL_ROOT
}
doc_picker_link
.
html
;
addRDMTask
(
TEST_URI
async
function
(
{
ui
manager
}
)
{
info
(
"
Open
the
rule
-
view
and
select
the
test
node
before
opening
RDM
"
)
;
const
{
inspector
toolbox
}
=
await
openRuleView
(
)
;
await
selectNode
(
"
body
"
inspector
)
;
info
(
"
Open
RDM
"
)
;
info
(
"
Toggle
Touch
simulation
"
)
;
const
{
document
}
=
ui
.
getBrowserWindow
(
)
;
const
touchButton
=
document
.
getElementById
(
"
touch
-
simulation
-
button
"
)
;
const
changed
=
once
(
ui
"
touch
-
simulation
-
changed
"
)
;
touchButton
.
click
(
)
;
await
changed
;
info
(
"
Waiting
for
element
picker
to
become
active
.
"
)
;
await
startPicker
(
toolbox
ui
)
;
info
(
"
Move
mouse
over
the
pick
-
target
"
)
;
await
hoverElement
(
inspector
ui
"
.
picker
-
link
"
15
15
)
;
let
hasNavigated
=
false
;
toolbox
.
target
.
once
(
"
navigate
"
)
.
then
(
(
)
=
>
{
hasNavigated
=
true
;
}
)
;
info
(
"
Click
and
pick
the
link
"
)
;
await
pickElement
(
inspector
ui
"
.
picker
-
link
"
)
;
await
wait
(
2000
)
;
ok
(
!
hasNavigated
"
The
page
should
not
have
navigated
when
picking
the
<
a
>
element
"
)
;
}
)
;
async
function
startPicker
(
toolbox
ui
)
{
info
(
"
Start
the
element
picker
"
)
;
toolbox
.
win
.
focus
(
)
;
await
toolbox
.
nodePicker
.
start
(
)
;
await
spawnViewportTask
(
ui
{
}
async
(
)
=
>
{
content
.
focus
(
)
;
}
)
;
}
async
function
hoverElement
(
inspector
ui
selector
x
y
)
{
info
(
"
Waiting
for
element
"
+
selector
+
"
to
be
hovered
"
)
;
const
onHovered
=
inspector
.
toolbox
.
nodePicker
.
once
(
"
picker
-
node
-
hovered
"
)
;
await
spawnViewportTask
(
ui
{
selector
x
y
}
async
options
=
>
{
const
target
=
content
.
document
.
querySelector
(
options
.
selector
)
;
await
EventUtils
.
synthesizeMouse
(
target
options
.
x
options
.
y
{
type
:
"
mousemove
"
isSynthesized
:
false
}
content
)
;
}
)
;
return
onHovered
;
}
async
function
pickElement
(
inspector
ui
selector
)
{
info
(
"
Waiting
for
element
"
+
selector
+
"
to
be
picked
"
)
;
const
onNewNodeFront
=
inspector
.
selection
.
once
(
"
new
-
node
-
front
"
)
;
await
spawnViewportTask
(
ui
{
selector
}
async
options
=
>
{
const
target
=
content
.
document
.
querySelector
(
options
.
selector
)
;
EventUtils
.
synthesizeClick
(
target
)
;
}
)
;
info
(
"
Returning
on
new
-
node
-
front
"
)
;
return
onNewNodeFront
;
}
