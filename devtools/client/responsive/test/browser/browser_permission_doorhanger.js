"
use
strict
"
;
const
DUMMY_URL
=
"
http
:
/
/
example
.
com
/
"
;
const
TEST_URL
=
{
URL_ROOT
}
geolocation
.
html
;
const
TEST_SURL
=
TEST_URL
.
replace
(
"
http
:
/
/
example
.
com
"
"
https
:
/
/
example
.
com
"
)
;
function
waitForGeolocationPrompt
(
win
browser
)
{
return
new
Promise
(
resolve
=
>
{
win
.
PopupNotifications
.
panel
.
addEventListener
(
"
popupshown
"
function
popupShown
(
)
{
const
notification
=
win
.
PopupNotifications
.
getNotification
(
"
geolocation
"
browser
)
;
if
(
notification
)
{
win
.
PopupNotifications
.
panel
.
removeEventListener
(
"
popupshown
"
popupShown
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
addRDMTask
(
null
async
function
(
)
{
await
pushPref
(
"
dom
.
security
.
https_first
"
false
)
;
const
tab
=
await
addTab
(
DUMMY_URL
)
;
const
browser
=
tab
.
linkedBrowser
;
const
win
=
browser
.
ownerGlobal
;
let
waitPromptPromise
=
waitForGeolocationPrompt
(
win
browser
)
;
await
navigateTo
(
TEST_SURL
)
;
await
waitPromptPromise
;
ok
(
true
"
Permission
doorhanger
appeared
without
RDM
enabled
"
)
;
await
navigateTo
(
DUMMY_URL
)
;
const
{
ui
}
=
await
openRDM
(
tab
)
;
await
waitForDeviceAndViewportState
(
ui
)
;
const
newBrowser
=
ui
.
getViewportBrowser
(
)
;
waitPromptPromise
=
waitForGeolocationPrompt
(
win
newBrowser
)
;
await
navigateTo
(
TEST_SURL
)
;
await
waitPromptPromise
;
ok
(
true
"
Permission
doorhanger
appeared
inside
RDM
"
)
;
await
closeRDM
(
tab
)
;
await
removeTab
(
tab
)
;
}
{
onlyPrefAndTask
:
true
}
)
;
