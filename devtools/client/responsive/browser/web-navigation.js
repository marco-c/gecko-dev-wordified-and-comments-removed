"
use
strict
"
;
const
{
Cc
Ci
Cr
components
:
Components
}
=
require
(
"
chrome
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
Services
=
require
(
"
Services
"
)
;
function
BrowserElementWebNavigation
(
browser
)
{
this
.
_browser
=
browser
;
}
BrowserElementWebNavigation
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIWebNavigation
]
)
canGoBack
:
false
canGoForward
:
false
goBack
(
)
{
const
cancelContentJSEpoch
=
this
.
maybeCancelContentJSExecution
(
Ci
.
nsIRemoteTab
.
NAVIGATE_BACK
)
;
this
.
_browser
.
browsingContext
.
goBack
(
cancelContentJSEpoch
)
;
}
goForward
(
)
{
const
cancelContentJSEpoch
=
this
.
maybeCancelContentJSExecution
(
Ci
.
nsIRemoteTab
.
NAVIGATE_FORWARD
)
;
this
.
_browser
.
browsingContext
.
goForward
(
cancelContentJSEpoch
)
;
}
maybeCancelContentJSExecution
(
navigationType
options
=
{
}
)
{
const
epoch
=
this
.
_cancelContentJSEpoch
+
+
;
this
.
_browser
.
frameLoader
.
remoteTab
.
maybeCancelContentJSExecution
(
navigationType
{
.
.
.
options
epoch
}
)
;
return
epoch
;
}
gotoIndex
(
index
)
{
this
.
_browser
.
browsingContext
.
gotoIndex
(
index
)
;
}
loadURI
(
uri
flags
referrer
postData
headers
)
{
this
.
loadURIWithOptions
(
uri
flags
referrer
Ci
.
nsIReferrerInfo
.
EMPTY
postData
headers
null
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
)
;
}
loadURIWithOptions
(
uri
flags
referrer
referrerPolicy
postData
headers
baseURI
triggeringPrincipal
)
{
const
referrerInfo
=
Cc
[
"
mozilla
.
org
/
referrer
-
info
;
1
"
]
.
createInstance
(
Ci
.
nsIReferrerInfo
)
;
referrerInfo
.
init
(
referrerPolicy
true
referrer
)
;
this
.
_browser
.
browsingContext
.
loadURI
(
uri
{
loadFlags
:
flags
referrerInfo
postData
headers
baseURI
triggeringPrincipal
}
)
;
}
reload
(
flags
)
{
let
hardReload
=
false
;
if
(
flags
&
this
.
LOAD_FLAGS_BYPASS_PROXY
|
|
flags
&
this
.
LOAD_FLAGS_BYPASS_CACHE
)
{
hardReload
=
true
;
}
this
.
_browser
.
reload
(
hardReload
)
;
}
stop
(
flags
)
{
this
.
_browser
.
browsingContext
.
stop
(
flags
)
;
}
get
document
(
)
{
return
this
.
_browser
.
contentDocument
;
}
_currentURI
:
null
get
currentURI
(
)
{
if
(
!
this
.
_currentURI
)
{
this
.
_currentURI
=
Services
.
io
.
newURI
(
"
about
:
blank
"
)
;
}
return
this
.
_currentURI
;
}
set
currentURI
(
uri
)
{
this
.
_browser
.
src
=
uri
.
spec
;
}
referringURI
:
null
get
sessionHistory
(
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
set
sessionHistory
(
value
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
swapBrowser
(
browser
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
copyStateFrom
(
otherWebNavigation
)
{
const
state
=
[
"
canGoBack
"
"
canGoForward
"
"
_currentURI
"
]
;
for
(
const
property
of
state
)
{
this
[
property
]
=
otherWebNavigation
[
property
]
;
}
}
}
;
const
FLAGS
=
[
"
LOAD_FLAGS_MASK
"
"
LOAD_FLAGS_NONE
"
"
LOAD_FLAGS_IS_REFRESH
"
"
LOAD_FLAGS_IS_LINK
"
"
LOAD_FLAGS_BYPASS_HISTORY
"
"
LOAD_FLAGS_REPLACE_HISTORY
"
"
LOAD_FLAGS_BYPASS_CACHE
"
"
LOAD_FLAGS_BYPASS_PROXY
"
"
LOAD_FLAGS_CHARSET_CHANGE
"
"
LOAD_FLAGS_STOP_CONTENT
"
"
LOAD_FLAGS_FROM_EXTERNAL
"
"
LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP
"
"
LOAD_FLAGS_FIRST_LOAD
"
"
LOAD_FLAGS_ALLOW_POPUPS
"
"
LOAD_FLAGS_BYPASS_CLASSIFIER
"
"
LOAD_FLAGS_FORCE_ALLOW_COOKIES
"
"
STOP_NETWORK
"
"
STOP_CONTENT
"
"
STOP_ALL
"
]
;
for
(
const
flag
of
FLAGS
)
{
BrowserElementWebNavigation
.
prototype
[
flag
]
=
Ci
.
nsIWebNavigation
[
flag
]
;
}
exports
.
BrowserElementWebNavigation
=
BrowserElementWebNavigation
;
