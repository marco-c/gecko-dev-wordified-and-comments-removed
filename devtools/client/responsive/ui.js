"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
getOrientation
}
=
require
(
"
devtools
/
client
/
responsive
/
utils
/
orientation
"
)
;
const
Constants
=
require
(
"
devtools
/
client
/
responsive
/
constants
"
)
;
const
{
CommandsFactory
}
=
require
(
"
devtools
/
shared
/
commands
/
commands
-
factory
"
)
;
loader
.
lazyRequireGetter
(
this
"
throttlingProfiles
"
"
devtools
/
client
/
shared
/
components
/
throttling
/
profiles
"
)
;
loader
.
lazyRequireGetter
(
this
"
message
"
"
devtools
/
client
/
responsive
/
utils
/
message
"
)
;
loader
.
lazyRequireGetter
(
this
"
showNotification
"
"
devtools
/
client
/
responsive
/
utils
/
notification
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
PriorityLevels
"
"
devtools
/
client
/
shared
/
components
/
NotificationBox
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
l10n
"
"
devtools
/
client
/
responsive
/
utils
/
l10n
"
)
;
loader
.
lazyRequireGetter
(
this
"
asyncStorage
"
"
devtools
/
shared
/
async
-
storage
"
)
;
loader
.
lazyRequireGetter
(
this
"
captureAndSaveScreenshot
"
"
devtools
/
client
/
shared
/
screenshot
"
true
)
;
const
RELOAD_CONDITION_PREF_PREFIX
=
"
devtools
.
responsive
.
reloadConditions
.
"
;
const
RELOAD_NOTIFICATION_PREF
=
"
devtools
.
responsive
.
reloadNotification
.
enabled
"
;
function
debug
(
msg
)
{
}
class
ResponsiveUI
{
constructor
(
manager
window
tab
)
{
this
.
manager
=
manager
;
this
.
browserWindow
=
window
;
this
.
tab
=
tab
;
this
.
destroying
=
false
;
this
.
destroyed
=
false
;
this
.
rdmFrame
=
null
;
this
.
onResizeDrag
=
this
.
onResizeDrag
.
bind
(
this
)
;
this
.
onResizeStart
=
this
.
onResizeStart
.
bind
(
this
)
;
this
.
onResizeStop
=
this
.
onResizeStop
.
bind
(
this
)
;
this
.
onTargetAvailable
=
this
.
onTargetAvailable
.
bind
(
this
)
;
this
.
networkFront
=
null
;
this
.
inited
=
this
.
init
(
)
;
EventEmitter
.
decorate
(
this
)
;
}
get
toolWindow
(
)
{
return
this
.
rdmFrame
.
contentWindow
;
}
get
docShell
(
)
{
return
this
.
toolWindow
.
docShell
;
}
get
viewportElement
(
)
{
return
this
.
browserStackEl
.
querySelector
(
"
browser
"
)
;
}
get
currentTarget
(
)
{
return
this
.
commands
.
targetCommand
.
targetFront
;
}
get
watcherFront
(
)
{
return
this
.
resourceCommand
.
watcherFront
;
}
async
init
(
)
{
debug
(
"
Init
start
"
)
;
this
.
initRDMFrame
(
)
;
this
.
hideBrowserUI
(
)
;
this
.
tab
.
addEventListener
(
"
TabClose
"
this
)
;
this
.
browserWindow
.
addEventListener
(
"
unload
"
this
)
;
this
.
rdmFrame
.
contentWindow
.
addEventListener
(
"
message
"
this
)
;
this
.
tab
.
linkedBrowser
.
enterResponsiveMode
(
)
;
this
.
browserWindow
.
addEventListener
(
"
FullZoomChange
"
this
)
;
debug
(
"
Wait
until
RDP
server
connect
"
)
;
await
this
.
connectToServer
(
)
;
await
this
.
restoreUIState
(
)
;
this
.
showBrowserUI
(
)
;
message
.
post
(
this
.
toolWindow
"
post
-
init
"
)
;
debug
(
"
Init
done
"
)
;
}
initRDMFrame
(
)
{
const
{
document
:
doc
gBrowser
}
=
this
.
browserWindow
;
const
rdmFrame
=
doc
.
createElement
(
"
iframe
"
)
;
rdmFrame
.
src
=
"
chrome
:
/
/
devtools
/
content
/
responsive
/
toolbar
.
xhtml
"
;
rdmFrame
.
classList
.
add
(
"
rdm
-
toolbar
"
)
;
const
resizeHandle
=
doc
.
createElement
(
"
div
"
)
;
resizeHandle
.
classList
.
add
(
"
viewport
-
resize
-
handle
"
)
;
const
resizeHandleX
=
doc
.
createElement
(
"
div
"
)
;
resizeHandleX
.
classList
.
add
(
"
viewport
-
horizontal
-
resize
-
handle
"
)
;
const
resizeHandleY
=
doc
.
createElement
(
"
div
"
)
;
resizeHandleY
.
classList
.
add
(
"
viewport
-
vertical
-
resize
-
handle
"
)
;
this
.
browserContainerEl
=
gBrowser
.
getBrowserContainer
(
gBrowser
.
getBrowserForTab
(
this
.
tab
)
)
;
this
.
browserStackEl
=
this
.
browserContainerEl
.
querySelector
(
"
.
browserStack
"
)
;
this
.
browserContainerEl
.
classList
.
add
(
"
responsive
-
mode
"
)
;
this
.
browserStackEl
.
prepend
(
rdmFrame
)
;
this
.
browserStackEl
.
append
(
resizeHandle
)
;
this
.
browserStackEl
.
append
(
resizeHandleX
)
;
this
.
browserStackEl
.
append
(
resizeHandleY
)
;
message
.
wait
(
rdmFrame
.
contentWindow
"
script
-
init
"
)
.
then
(
async
(
)
=
>
{
message
.
post
(
rdmFrame
.
contentWindow
"
init
"
)
;
message
.
wait
(
rdmFrame
.
contentWindow
"
init
:
done
"
)
.
then
(
(
)
=
>
{
rdmFrame
.
contentWindow
.
addInitialViewport
(
{
userContextId
:
this
.
tab
.
userContextId
}
)
;
}
)
;
}
)
;
this
.
rdmFrame
=
rdmFrame
;
this
.
resizeHandle
=
resizeHandle
;
this
.
resizeHandle
.
addEventListener
(
"
mousedown
"
this
.
onResizeStart
)
;
this
.
resizeHandleX
=
resizeHandleX
;
this
.
resizeHandleX
.
addEventListener
(
"
mousedown
"
this
.
onResizeStart
)
;
this
.
resizeHandleY
=
resizeHandleY
;
this
.
resizeHandleY
.
addEventListener
(
"
mousedown
"
this
.
onResizeStart
)
;
this
.
resizeToolbarObserver
=
new
this
.
browserWindow
.
ResizeObserver
(
(
)
=
>
{
const
style
=
this
.
browserWindow
.
getComputedStyle
(
this
.
browserStackEl
)
;
this
.
browserStackEl
.
style
.
setProperty
(
"
-
-
rdm
-
stack
-
width
"
style
.
width
)
;
this
.
browserStackEl
.
style
.
setProperty
(
"
-
-
rdm
-
stack
-
height
"
style
.
height
)
;
this
.
rdmFrame
.
classList
.
toggle
(
"
accomodate
-
ua
"
parseFloat
(
style
.
width
)
<
520
)
;
}
)
;
this
.
resizeToolbarObserver
.
observe
(
this
.
browserStackEl
)
;
}
async
destroy
(
options
)
{
if
(
this
.
destroying
)
{
return
false
;
}
this
.
destroying
=
true
;
const
isTabDestroyed
=
!
this
.
tab
.
linkedBrowser
|
|
this
.
responsiveFront
.
isDestroyed
(
)
;
const
isWindowClosing
=
options
?
.
reason
=
=
=
"
unload
"
|
|
isTabDestroyed
;
const
isTabContentDestroying
=
isWindowClosing
|
|
options
?
.
reason
=
=
=
"
TabClose
"
;
if
(
!
isTabContentDestroying
)
{
await
this
.
inited
;
await
Promise
.
all
(
[
this
.
updateScreenOrientation
(
"
landscape
-
primary
"
0
)
this
.
updateMaxTouchPointsEnabled
(
false
)
this
.
responsiveFront
.
setFloatingScrollbars
(
false
)
]
)
;
this
.
hideBrowserUI
(
)
;
await
this
.
updateNetworkThrottling
(
)
;
}
this
.
tab
.
removeEventListener
(
"
TabClose
"
this
)
;
this
.
browserWindow
.
removeEventListener
(
"
unload
"
this
)
;
this
.
tab
.
linkedBrowser
.
leaveResponsiveMode
(
)
;
this
.
browserWindow
.
removeEventListener
(
"
FullZoomChange
"
this
)
;
this
.
rdmFrame
.
contentWindow
.
removeEventListener
(
"
message
"
this
)
;
this
.
resizeToolbarObserver
.
unobserve
(
this
.
browserStackEl
)
;
this
.
rdmFrame
.
remove
(
)
;
this
.
resizeHandle
.
remove
(
)
;
this
.
resizeHandleX
.
remove
(
)
;
this
.
resizeHandleY
.
remove
(
)
;
this
.
browserContainerEl
.
classList
.
remove
(
"
responsive
-
mode
"
)
;
this
.
browserStackEl
.
style
.
removeProperty
(
"
-
-
rdm
-
width
"
)
;
this
.
browserStackEl
.
style
.
removeProperty
(
"
-
-
rdm
-
height
"
)
;
this
.
browserStackEl
.
style
.
removeProperty
(
"
-
-
rdm
-
zoom
"
)
;
this
.
browserStackEl
.
style
.
removeProperty
(
"
-
-
rdm
-
stack
-
height
"
)
;
this
.
browserStackEl
.
style
.
removeProperty
(
"
-
-
rdm
-
stack
-
width
"
)
;
if
(
!
isTabContentDestroying
)
{
let
reloadNeeded
=
false
;
await
this
.
updateDPPX
(
null
)
;
reloadNeeded
|
=
(
await
this
.
updateUserAgent
(
)
)
&
&
this
.
reloadOnChange
(
"
userAgent
"
)
;
const
reloadOnTouchSimulationChange
=
this
.
reloadOnChange
(
"
touchSimulation
"
)
&
&
!
reloadNeeded
;
await
this
.
updateTouchSimulation
(
null
reloadOnTouchSimulationChange
)
;
if
(
reloadNeeded
)
{
await
this
.
reloadBrowser
(
)
;
}
this
.
commands
.
targetCommand
.
unwatchTargets
(
[
this
.
commands
.
targetCommand
.
TYPES
.
FRAME
]
this
.
onTargetAvailable
)
;
this
.
resourceCommand
.
unwatchResources
(
[
this
.
resourceCommand
.
TYPES
.
NETWORK_EVENT
]
{
onAvailable
:
this
.
onNetworkResourceAvailable
}
)
;
this
.
commands
.
targetCommand
.
destroy
(
)
;
}
this
.
showBrowserUI
(
)
;
this
.
browserContainerEl
=
null
;
this
.
browserStackEl
=
null
;
this
.
browserWindow
=
null
;
this
.
tab
=
null
;
this
.
inited
=
null
;
this
.
rdmFrame
=
null
;
this
.
resizeHandle
=
null
;
this
.
resizeHandleX
=
null
;
this
.
resizeHandleY
=
null
;
this
.
resizeToolbarObserver
=
null
;
const
commandsDestroyed
=
this
.
commands
.
destroy
(
)
;
if
(
!
isTabContentDestroying
)
{
await
commandsDestroyed
;
}
this
.
commands
=
this
.
responsiveFront
=
null
;
this
.
destroyed
=
true
;
return
true
;
}
async
connectToServer
(
)
{
this
.
commands
=
await
CommandsFactory
.
forTab
(
this
.
tab
)
;
this
.
resourceCommand
=
this
.
commands
.
resourceCommand
;
await
this
.
commands
.
targetCommand
.
startListening
(
)
;
await
this
.
commands
.
targetCommand
.
watchTargets
(
[
this
.
commands
.
targetCommand
.
TYPES
.
FRAME
]
this
.
onTargetAvailable
)
;
await
this
.
resourceCommand
.
watchResources
(
[
this
.
resourceCommand
.
TYPES
.
NETWORK_EVENT
]
{
onAvailable
:
this
.
onNetworkResourceAvailable
}
)
;
this
.
networkFront
=
await
this
.
watcherFront
.
getNetworkParentActor
(
)
;
}
showReloadNotification
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
RELOAD_NOTIFICATION_PREF
false
)
)
{
showNotification
(
this
.
browserWindow
this
.
tab
{
msg
:
l10n
.
getFormatStr
(
"
responsive
.
reloadNotification
.
description2
"
)
}
)
;
Services
.
prefs
.
setBoolPref
(
RELOAD_NOTIFICATION_PREF
false
)
;
}
}
reloadOnChange
(
id
)
{
this
.
showReloadNotification
(
)
;
const
pref
=
RELOAD_CONDITION_PREF_PREFIX
+
id
;
return
Services
.
prefs
.
getBoolPref
(
pref
false
)
;
}
hideBrowserUI
(
)
{
this
.
tab
.
linkedBrowser
.
style
.
visibility
=
"
hidden
"
;
this
.
resizeHandle
.
style
.
visibility
=
"
hidden
"
;
}
showBrowserUI
(
)
{
this
.
tab
.
linkedBrowser
.
style
.
removeProperty
(
"
visibility
"
)
;
this
.
resizeHandle
.
style
.
removeProperty
(
"
visibility
"
)
;
}
handleEvent
(
event
)
{
const
{
browserWindow
tab
}
=
this
;
switch
(
event
.
type
)
{
case
"
message
"
:
this
.
handleMessage
(
event
)
;
break
;
case
"
FullZoomChange
"
:
const
{
width
height
}
=
this
.
getViewportSize
(
)
;
this
.
updateViewportSize
(
width
height
)
;
break
;
case
"
TabClose
"
:
case
"
unload
"
:
this
.
manager
.
closeIfNeeded
(
browserWindow
tab
{
reason
:
event
.
type
}
)
;
break
;
}
}
handleMessage
(
event
)
{
if
(
event
.
origin
!
=
=
"
chrome
:
/
/
devtools
"
)
{
return
;
}
switch
(
event
.
data
.
type
)
{
case
"
change
-
device
"
:
this
.
onChangeDevice
(
event
)
;
break
;
case
"
change
-
network
-
throttling
"
:
this
.
onChangeNetworkThrottling
(
event
)
;
break
;
case
"
change
-
pixel
-
ratio
"
:
this
.
onChangePixelRatio
(
event
)
;
break
;
case
"
change
-
touch
-
simulation
"
:
this
.
onChangeTouchSimulation
(
event
)
;
break
;
case
"
change
-
user
-
agent
"
:
this
.
onChangeUserAgent
(
event
)
;
break
;
case
"
exit
"
:
this
.
onExit
(
)
;
break
;
case
"
remove
-
device
-
association
"
:
this
.
onRemoveDeviceAssociation
(
)
;
break
;
case
"
viewport
-
orientation
-
change
"
:
this
.
onRotateViewport
(
event
)
;
break
;
case
"
viewport
-
resize
"
:
this
.
onResizeViewport
(
event
)
;
break
;
case
"
screenshot
"
:
this
.
onScreenshot
(
)
;
break
;
case
"
toggle
-
left
-
alignment
"
:
this
.
onToggleLeftAlignment
(
event
)
;
break
;
case
"
update
-
device
-
modal
"
:
this
.
onUpdateDeviceModal
(
event
)
;
break
;
}
}
async
onChangeDevice
(
event
)
{
const
{
pixelRatio
touch
userAgent
}
=
event
.
data
.
device
;
let
reloadNeeded
=
false
;
await
this
.
updateDPPX
(
pixelRatio
)
;
const
{
device
viewport
}
=
event
.
data
;
const
{
type
angle
}
=
getOrientation
(
device
viewport
)
;
await
this
.
updateScreenOrientation
(
type
angle
)
;
await
this
.
updateMaxTouchPointsEnabled
(
touch
)
;
reloadNeeded
|
=
(
await
this
.
updateUserAgent
(
userAgent
)
)
&
&
this
.
reloadOnChange
(
"
userAgent
"
)
;
const
reloadOnTouchSimulationChange
=
this
.
reloadOnChange
(
"
touchSimulation
"
)
&
&
!
reloadNeeded
;
await
this
.
updateTouchSimulation
(
touch
reloadOnTouchSimulationChange
)
;
if
(
reloadNeeded
)
{
this
.
reloadBrowser
(
)
;
}
this
.
emit
(
"
device
-
changed
"
)
;
}
async
onChangeNetworkThrottling
(
event
)
{
const
{
enabled
profile
}
=
event
.
data
;
await
this
.
updateNetworkThrottling
(
enabled
profile
)
;
this
.
emit
(
"
network
-
throttling
-
changed
"
)
;
}
onChangePixelRatio
(
event
)
{
const
{
pixelRatio
}
=
event
.
data
;
this
.
updateDPPX
(
pixelRatio
)
;
}
async
onChangeTouchSimulation
(
event
)
{
const
{
enabled
}
=
event
.
data
;
await
this
.
updateMaxTouchPointsEnabled
(
enabled
)
;
await
this
.
updateTouchSimulation
(
enabled
this
.
reloadOnChange
(
"
touchSimulation
"
)
)
;
this
.
emit
(
"
touch
-
simulation
-
changed
"
)
;
}
async
onChangeUserAgent
(
event
)
{
const
{
userAgent
}
=
event
.
data
;
const
reloadNeeded
=
(
await
this
.
updateUserAgent
(
userAgent
)
)
&
&
this
.
reloadOnChange
(
"
userAgent
"
)
;
if
(
reloadNeeded
)
{
this
.
reloadBrowser
(
)
;
}
this
.
emit
(
"
user
-
agent
-
changed
"
)
;
}
onExit
(
)
{
const
{
browserWindow
tab
}
=
this
;
this
.
manager
.
closeIfNeeded
(
browserWindow
tab
)
;
}
async
onRemoveDeviceAssociation
(
)
{
let
reloadNeeded
=
false
;
await
this
.
updateDPPX
(
null
)
;
reloadNeeded
|
=
(
await
this
.
updateUserAgent
(
)
)
&
&
this
.
reloadOnChange
(
"
userAgent
"
)
;
const
reloadOnTouchSimulationChange
=
this
.
reloadOnChange
(
"
touchSimulation
"
)
&
&
!
reloadNeeded
;
await
this
.
updateTouchSimulation
(
null
reloadOnTouchSimulationChange
)
;
if
(
reloadNeeded
)
{
this
.
reloadBrowser
(
)
;
}
this
.
emit
(
"
device
-
association
-
removed
"
)
;
}
onResizeDrag
(
{
screenX
screenY
}
)
{
if
(
!
this
.
isResizing
|
|
!
this
.
rdmFrame
.
contentWindow
)
{
return
;
}
const
zoom
=
this
.
tab
.
linkedBrowser
.
fullZoom
;
let
deltaX
=
(
screenX
-
this
.
lastScreenX
)
/
zoom
;
let
deltaY
=
(
screenY
-
this
.
lastScreenY
)
/
zoom
;
const
leftAlignmentEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
responsive
.
leftAlignViewport
.
enabled
"
false
)
;
if
(
!
leftAlignmentEnabled
)
{
deltaX
=
deltaX
*
2
;
}
if
(
this
.
ignoreX
)
{
deltaX
=
0
;
}
if
(
this
.
ignoreY
)
{
deltaY
=
0
;
}
const
viewportSize
=
this
.
getViewportSize
(
)
;
let
width
=
Math
.
round
(
viewportSize
.
width
+
deltaX
)
;
let
height
=
Math
.
round
(
viewportSize
.
height
+
deltaY
)
;
if
(
width
<
Constants
.
MIN_VIEWPORT_DIMENSION
)
{
width
=
Constants
.
MIN_VIEWPORT_DIMENSION
;
}
else
if
(
width
!
=
viewportSize
.
width
)
{
this
.
lastScreenX
=
screenX
;
}
if
(
height
<
Constants
.
MIN_VIEWPORT_DIMENSION
)
{
height
=
Constants
.
MIN_VIEWPORT_DIMENSION
;
}
else
if
(
height
!
=
viewportSize
.
height
)
{
this
.
lastScreenY
=
screenY
;
}
this
.
rdmFrame
.
contentWindow
.
setViewportSize
(
{
width
height
}
)
;
this
.
updateViewportSize
(
width
height
)
;
if
(
this
.
rdmFrame
.
contentWindow
.
getAssociatedDevice
(
)
)
{
this
.
rdmFrame
.
contentWindow
.
clearDeviceAssociation
(
)
;
}
}
onResizeStart
(
{
target
screenX
screenY
}
)
{
this
.
browserWindow
.
addEventListener
(
"
mousemove
"
this
.
onResizeDrag
true
)
;
this
.
browserWindow
.
addEventListener
(
"
mouseup
"
this
.
onResizeStop
true
)
;
this
.
isResizing
=
true
;
this
.
lastScreenX
=
screenX
;
this
.
lastScreenY
=
screenY
;
this
.
ignoreX
=
target
=
=
=
this
.
resizeHandleY
;
this
.
ignoreY
=
target
=
=
=
this
.
resizeHandleX
;
}
onResizeStop
(
)
{
this
.
browserWindow
.
removeEventListener
(
"
mousemove
"
this
.
onResizeDrag
true
)
;
this
.
browserWindow
.
removeEventListener
(
"
mouseup
"
this
.
onResizeStop
true
)
;
this
.
isResizing
=
false
;
this
.
lastScreenX
=
0
;
this
.
lastScreenY
=
0
;
this
.
ignoreX
=
false
;
this
.
ignoreY
=
false
;
this
.
emit
(
"
viewport
-
resize
-
dragend
"
)
;
}
onResizeViewport
(
event
)
{
const
{
width
height
}
=
event
.
data
;
this
.
updateViewportSize
(
width
height
)
;
this
.
emit
(
"
viewport
-
resize
"
{
width
height
}
)
;
}
async
onRotateViewport
(
event
)
{
const
{
orientationType
:
type
angle
isViewportRotated
}
=
event
.
data
;
await
this
.
updateScreenOrientation
(
type
angle
isViewportRotated
)
;
}
async
onScreenshot
(
)
{
const
messages
=
await
captureAndSaveScreenshot
(
this
.
currentTarget
this
.
browserWindow
)
;
const
priorityMap
=
{
error
:
PriorityLevels
.
PRIORITY_CRITICAL_HIGH
warn
:
PriorityLevels
.
PRIORITY_WARNING_HIGH
}
;
for
(
const
{
text
level
}
of
messages
)
{
if
(
level
!
=
=
"
warn
"
&
&
level
!
=
=
"
error
"
)
{
continue
;
}
showNotification
(
this
.
browserWindow
this
.
tab
{
msg
:
text
priority
:
priorityMap
[
level
]
}
)
;
}
message
.
post
(
this
.
rdmFrame
.
contentWindow
"
screenshot
-
captured
"
)
;
}
onToggleLeftAlignment
(
event
)
{
this
.
updateUIAlignment
(
event
.
data
.
leftAlignmentEnabled
)
;
}
onUpdateDeviceModal
(
event
)
{
if
(
event
.
data
.
isOpen
)
{
this
.
browserStackEl
.
classList
.
add
(
"
device
-
modal
-
opened
"
)
;
}
else
{
this
.
browserStackEl
.
classList
.
remove
(
"
device
-
modal
-
opened
"
)
;
}
}
async
hasDeviceState
(
)
{
const
deviceState
=
await
asyncStorage
.
getItem
(
"
devtools
.
responsive
.
deviceState
"
)
;
return
!
!
deviceState
;
}
async
restoreUIState
(
)
{
const
leftAlignmentEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
responsive
.
leftAlignViewport
.
enabled
"
false
)
;
this
.
updateUIAlignment
(
leftAlignmentEnabled
)
;
const
height
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
responsive
.
viewport
.
height
"
0
)
;
const
width
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
responsive
.
viewport
.
width
"
0
)
;
this
.
updateViewportSize
(
width
height
)
;
}
async
restoreActorState
(
)
{
this
.
tab
.
linkedBrowser
.
enterResponsiveMode
(
)
;
await
this
.
responsiveFront
.
setFloatingScrollbars
(
true
)
;
await
this
.
currentTarget
.
attach
(
)
;
const
hasDeviceState
=
await
this
.
hasDeviceState
(
)
;
if
(
hasDeviceState
)
{
return
;
}
const
height
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
responsive
.
viewport
.
height
"
0
)
;
const
pixelRatio
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
responsive
.
viewport
.
pixelRatio
"
0
)
;
const
touchSimulationEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
responsive
.
touchSimulation
.
enabled
"
false
)
;
const
userAgent
=
Services
.
prefs
.
getCharPref
(
"
devtools
.
responsive
.
userAgent
"
"
"
)
;
const
width
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
responsive
.
viewport
.
width
"
0
)
;
const
{
type
angle
}
=
this
.
commands
.
targetConfigurationCommand
.
configuration
.
rdmPaneOrientation
|
|
this
.
getInitialViewportOrientation
(
{
width
height
}
)
;
await
this
.
updateDPPX
(
pixelRatio
)
;
await
this
.
updateScreenOrientation
(
type
angle
)
;
await
this
.
updateMaxTouchPointsEnabled
(
touchSimulationEnabled
)
;
if
(
touchSimulationEnabled
)
{
await
this
.
updateTouchSimulation
(
touchSimulationEnabled
)
;
}
let
reloadNeeded
=
false
;
if
(
userAgent
)
{
reloadNeeded
|
=
(
await
this
.
updateUserAgent
(
userAgent
)
)
&
&
this
.
reloadOnChange
(
"
userAgent
"
)
;
}
if
(
reloadNeeded
)
{
await
this
.
reloadBrowser
(
)
;
}
}
async
updateDPPX
(
dppx
=
null
)
{
await
this
.
commands
.
targetConfigurationCommand
.
updateConfiguration
(
{
overrideDPPX
:
dppx
}
)
;
}
async
updateNetworkThrottling
(
enabled
profile
)
{
if
(
!
enabled
)
{
await
this
.
networkFront
.
clearNetworkThrottling
(
)
;
return
false
;
}
const
data
=
throttlingProfiles
.
find
(
(
{
id
}
)
=
>
id
=
=
profile
)
;
const
{
download
upload
latency
}
=
data
;
await
this
.
networkFront
.
setNetworkThrottling
(
{
downloadThroughput
:
download
uploadThroughput
:
upload
latency
}
)
;
return
false
;
}
async
updateUserAgent
(
userAgent
)
{
const
getConfigurationCustomUserAgent
=
(
)
=
>
this
.
commands
.
targetConfigurationCommand
.
configuration
.
customUserAgent
|
|
"
"
;
const
previousCustomUserAgent
=
getConfigurationCustomUserAgent
(
)
;
await
this
.
commands
.
targetConfigurationCommand
.
updateConfiguration
(
{
customUserAgent
:
userAgent
}
)
;
const
updatedUserAgent
=
getConfigurationCustomUserAgent
(
)
;
return
previousCustomUserAgent
!
=
=
updatedUserAgent
;
}
async
updateTouchSimulation
(
enabled
reloadOnTouchSimulationToggle
)
{
await
this
.
commands
.
targetConfigurationCommand
.
updateConfiguration
(
{
touchEventsOverride
:
enabled
?
"
enabled
"
:
null
reloadOnTouchSimulationToggle
}
)
;
}
async
updateScreenOrientation
(
type
angle
isViewportRotated
=
false
)
{
await
this
.
commands
.
targetConfigurationCommand
.
simulateScreenOrientationChange
(
{
type
angle
isViewportRotated
}
)
;
}
async
updateMaxTouchPointsEnabled
(
touchSimulationEnabled
)
{
return
this
.
commands
.
targetConfigurationCommand
.
updateConfiguration
(
{
rdmPaneMaxTouchPoints
:
touchSimulationEnabled
?
1
:
0
}
)
;
}
updateUIAlignment
(
leftAlignmentEnabled
)
{
this
.
browserContainerEl
.
classList
.
toggle
(
"
left
-
aligned
"
leftAlignmentEnabled
)
;
}
updateViewportSize
(
width
height
)
{
const
zoom
=
this
.
tab
.
linkedBrowser
.
fullZoom
;
this
.
browserStackEl
.
style
.
setProperty
(
"
-
-
rdm
-
width
"
{
width
}
px
)
;
this
.
browserStackEl
.
style
.
setProperty
(
"
-
-
rdm
-
height
"
{
height
}
px
)
;
this
.
browserStackEl
.
style
.
setProperty
(
"
-
-
rdm
-
zoom
"
zoom
)
;
this
.
emit
(
"
content
-
resize
"
{
width
height
}
)
;
}
getViewportSize
(
)
{
if
(
this
.
toolWindow
.
getViewportSize
)
{
return
this
.
toolWindow
.
getViewportSize
(
)
;
}
return
{
width
:
0
height
:
0
}
;
}
async
setViewportSize
(
size
)
{
await
this
.
inited
;
let
{
width
height
}
=
size
;
if
(
!
size
.
width
)
{
width
=
this
.
getViewportSize
(
)
.
width
;
}
if
(
!
size
.
height
)
{
height
=
this
.
getViewportSize
(
)
.
height
;
}
this
.
rdmFrame
.
contentWindow
.
setViewportSize
(
{
width
height
}
)
;
this
.
updateViewportSize
(
width
height
)
;
}
getViewportBrowser
(
)
{
return
this
.
tab
.
linkedBrowser
;
}
getViewportMessageManager
(
)
{
return
this
.
getViewportBrowser
(
)
.
messageManager
;
}
getInitialViewportOrientation
(
viewport
)
{
return
getOrientation
(
viewport
viewport
)
;
}
getBrowserWindow
(
)
{
return
this
.
browserWindow
;
}
async
onTargetAvailable
(
{
targetFront
}
)
{
if
(
this
.
destroying
)
{
return
;
}
if
(
targetFront
.
isTopLevel
)
{
this
.
responsiveFront
=
await
targetFront
.
getFront
(
"
responsive
"
)
;
if
(
this
.
destroying
)
{
return
;
}
await
this
.
restoreActorState
(
)
;
}
}
onNetworkResourceAvailable
(
)
{
}
async
reloadBrowser
(
)
{
await
this
.
commands
.
targetCommand
.
reloadTopLevelTarget
(
)
;
}
}
module
.
exports
=
ResponsiveUI
;
