"
use
strict
"
;
add_task
(
async
function
(
)
{
info
(
"
Check
root
route
redirects
to
connect
page
"
)
;
const
{
document
tab
}
=
await
openAboutDebugging
(
)
;
is
(
document
.
location
.
hash
"
#
/
connect
"
)
;
await
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
(
)
{
const
mocks
=
new
Mocks
(
)
;
const
{
document
tab
}
=
await
openAboutDebugging
(
)
;
info
(
"
Check
'
This
Firefox
'
route
"
)
;
document
.
location
.
hash
=
"
#
/
runtime
/
this
-
firefox
"
;
await
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
.
js
-
runtime
-
page
"
)
)
;
const
infoLabel
=
document
.
querySelector
(
"
.
js
-
runtime
-
name
"
)
.
textContent
;
ok
(
infoLabel
.
includes
(
"
Firefox
"
)
"
Runtime
is
displayed
as
Firefox
"
)
;
ok
(
!
infoLabel
.
includes
(
"
on
"
)
"
Runtime
is
not
associated
to
any
device
"
)
;
is
(
document
.
title
"
Debugging
-
Runtime
/
this
-
firefox
"
"
Checking
title
for
'
runtime
'
page
"
)
;
info
(
"
Check
'
Connect
'
page
"
)
;
document
.
location
.
hash
=
"
#
/
connect
"
;
await
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
.
js
-
connect
-
page
"
)
)
;
ok
(
true
"
Connect
page
has
been
shown
"
)
;
is
(
document
.
title
"
Debugging
-
Connect
"
"
Checking
title
for
'
connect
'
page
"
)
;
info
(
"
Check
'
USB
device
runtime
'
page
"
)
;
mocks
.
createUSBRuntime
(
"
1337id
"
{
deviceName
:
"
Fancy
Phone
"
name
:
"
Lorem
ipsum
"
}
)
;
mocks
.
emitUSBUpdate
(
)
;
await
connectToRuntime
(
"
Fancy
Phone
"
document
)
;
document
.
location
.
hash
=
"
#
/
runtime
/
1337id
"
;
await
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
.
js
-
runtime
-
page
"
)
)
;
const
runtimeLabel
=
document
.
querySelector
(
"
.
js
-
runtime
-
name
"
)
.
textContent
;
is
(
document
.
title
"
Debugging
-
Runtime
/
1337id
"
"
Checking
title
for
'
runtime
'
page
with
USB
device
"
)
;
ok
(
runtimeLabel
.
includes
(
"
Lorem
ipsum
"
)
"
Runtime
is
displayed
with
the
mocked
name
"
)
;
await
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
(
)
{
info
(
"
Check
an
invalid
route
redirects
to
root
"
)
;
const
{
document
tab
}
=
await
openAboutDebugging
(
)
;
info
(
"
Waiting
for
a
non
connect
page
to
load
"
)
;
document
.
location
.
hash
=
"
#
/
runtime
/
this
-
firefox
"
;
await
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
.
js
-
runtime
-
page
"
)
)
;
info
(
"
Update
hash
&
wait
for
a
redirect
to
root
(
connect
page
)
"
)
;
document
.
location
.
hash
=
"
#
/
lorem
-
ipsum
"
;
await
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
.
js
-
connect
-
page
"
)
)
;
is
(
document
.
title
"
Debugging
-
Connect
"
"
Checking
title
for
'
connect
'
page
"
)
;
is
(
document
.
location
.
hash
"
#
/
connect
"
"
Redirected
to
root
"
)
;
await
removeTab
(
tab
)
;
}
)
;
