"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
addons
.
js
"
this
)
;
const
{
PromiseTestUtils
}
=
scopedCuImport
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
File
closed
/
)
;
const
ADDON_NOBG_ID
=
"
test
-
devtools
-
webextension
-
nobg
mozilla
.
org
"
;
const
ADDON_NOBG_NAME
=
"
test
-
devtools
-
webextension
-
nobg
"
;
const
{
BrowserToolboxProcess
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
framework
/
ToolboxProcess
.
jsm
"
)
;
add_task
(
async
function
testWebExtensionsToolboxNoBackgroundPage
(
)
{
await
enableExtensionDebugging
(
)
;
const
{
document
tab
}
=
await
openAboutDebugging
(
)
;
await
installTemporaryExtensionFromXPI
(
{
id
:
ADDON_NOBG_ID
name
:
ADDON_NOBG_NAME
}
document
)
;
const
target
=
findDebugTargetByText
(
ADDON_NOBG_NAME
document
)
;
info
(
"
Setup
the
toolbox
test
function
as
environment
variable
"
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
new
"
+
toolboxTestScript
)
;
env
.
set
(
"
MOZ_TOOLBOX_TEST_ADDON_NOBG_NAME
"
ADDON_NOBG_NAME
)
;
registerCleanupFunction
(
(
)
=
>
{
env
.
set
(
"
MOZ_TOOLBOX_TEST_SCRIPT
"
"
"
)
;
env
.
set
(
"
MOZ_TOOLBOX_TEST_ADDON_NOBG_NAME
"
"
"
)
;
}
)
;
info
(
"
Click
inspect
to
open
the
addon
toolbox
wait
for
toolbox
close
event
"
)
;
const
onToolboxClose
=
BrowserToolboxProcess
.
once
(
"
close
"
)
;
const
inspectButton
=
target
.
querySelector
(
"
.
js
-
debug
-
target
-
inspect
-
button
"
)
;
inspectButton
.
click
(
)
;
await
onToolboxClose
;
ok
(
true
"
Addon
toolbox
closed
"
)
;
await
removeTemporaryExtension
(
ADDON_NOBG_NAME
document
)
;
await
removeTab
(
tab
)
;
}
)
;
function
toolboxTestScript
(
)
{
const
waitUntil
=
async
function
(
predicate
interval
=
10
)
{
if
(
await
predicate
(
)
)
{
return
true
;
}
return
new
Promise
(
resolve
=
>
{
toolbox
.
win
.
setTimeout
(
function
(
)
{
waitUntil
(
predicate
interval
)
.
then
(
(
)
=
>
resolve
(
true
)
)
;
}
interval
)
;
}
)
;
}
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
const
expectedName
=
env
.
get
(
"
MOZ_TOOLBOX_TEST_ADDON_NOBG_NAME
"
)
;
const
targetName
=
toolbox
.
target
.
name
;
const
isAddonTarget
=
toolbox
.
target
.
isAddon
;
if
(
!
(
isAddonTarget
&
&
targetName
=
=
=
expectedName
)
)
{
dump
(
Expected
target
name
"
{
expectedName
}
"
got
{
targetName
}
)
;
throw
new
Error
(
"
Toolbox
doesn
'
t
have
the
expected
target
"
)
;
}
toolbox
.
selectTool
(
"
inspector
"
)
.
then
(
async
inspector
=
>
{
let
nodeActor
;
dump
(
Wait
the
fallback
window
to
be
fully
loaded
\
n
)
;
await
waitUntil
(
async
(
)
=
>
{
nodeActor
=
await
inspector
.
walker
.
querySelector
(
inspector
.
walker
.
rootNode
"
h1
"
)
;
return
nodeActor
&
&
nodeActor
.
inlineTextChild
;
}
)
;
dump
(
"
Got
a
nodeActor
with
an
inline
text
child
\
n
"
)
;
const
expectedValue
=
"
Your
addon
does
not
have
any
document
opened
yet
.
"
;
const
actualValue
=
nodeActor
.
inlineTextChild
.
_form
.
nodeValue
;
if
(
actualValue
!
=
=
expectedValue
)
{
throw
new
Error
(
mismatched
inlineTextchild
value
:
"
{
actualValue
}
"
!
=
=
"
{
expectedValue
}
"
)
;
}
dump
(
"
Got
the
expected
inline
text
content
in
the
selected
node
\
n
"
)
;
await
toolbox
.
destroy
(
)
;
}
)
.
catch
(
(
error
)
=
>
{
dump
(
"
Error
while
running
code
in
the
browser
toolbox
process
:
\
n
"
)
;
dump
(
error
+
"
\
n
"
)
;
dump
(
"
stack
:
\
n
"
+
error
.
stack
+
"
\
n
"
)
;
}
)
;
}
