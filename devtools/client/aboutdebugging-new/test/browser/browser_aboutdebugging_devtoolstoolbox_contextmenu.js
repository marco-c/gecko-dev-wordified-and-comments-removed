"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
collapsibilities
.
js
"
this
)
;
add_task
(
async
function
(
)
{
info
(
"
Force
all
debug
target
panes
to
be
expanded
"
)
;
prepareCollapsibilitiesTest
(
)
;
const
{
document
tab
window
}
=
await
openAboutDebugging
(
)
;
const
{
devtoolsBrowser
devtoolsTab
}
=
await
openAboutDevtoolsToolbox
(
document
tab
window
)
;
info
(
"
Check
whether
the
menu
item
which
opens
devtools
is
disabled
"
)
;
const
rootDocument
=
devtoolsTab
.
ownerDocument
;
await
assertContextMenu
(
rootDocument
devtoolsBrowser
"
.
debug
-
target
-
info
"
false
)
;
info
(
"
Force
to
select
about
:
debugging
page
"
)
;
gBrowser
.
selectedTab
=
tab
;
info
(
"
Check
whether
the
menu
item
which
opens
devtools
is
enabled
"
)
;
await
assertContextMenu
(
rootDocument
devtoolsBrowser
"
#
mount
"
true
)
;
await
closeAboutDevtoolsToolbox
(
devtoolsTab
window
)
;
await
removeTab
(
tab
)
;
}
)
;
async
function
assertContextMenu
(
rootDocument
browser
targetSelector
shouldBeEnabled
)
{
const
contextMenu
=
rootDocument
.
getElementById
(
"
contentAreaContextMenu
"
)
;
const
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
BrowserTestUtils
.
synthesizeMouseAtCenter
(
targetSelector
{
type
:
"
contextmenu
"
}
browser
)
;
await
popupShownPromise
;
const
inspectMenuItem
=
rootDocument
.
getElementById
(
"
context
-
inspect
"
)
;
is
(
inspectMenuItem
.
hidden
!
shouldBeEnabled
'
"
hidden
"
attribute
of
#
context
-
inspect
should
be
correct
'
)
;
const
popupHiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
contextMenu
.
hidePopup
(
)
;
await
popupHiddenPromise
;
}
