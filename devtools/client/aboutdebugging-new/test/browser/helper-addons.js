"
use
strict
"
;
function
_getSupportsFile
(
path
)
{
const
cr
=
Cc
[
"
mozilla
.
org
/
chrome
/
chrome
-
registry
;
1
"
]
.
getService
(
Ci
.
nsIChromeRegistry
)
;
const
uri
=
Services
.
io
.
newURI
(
CHROME_URL_ROOT
+
path
)
;
const
fileurl
=
cr
.
convertChromeURL
(
uri
)
;
return
fileurl
.
QueryInterface
(
Ci
.
nsIFileURL
)
;
}
async
function
enableExtensionDebugging
(
)
{
await
pushPref
(
"
devtools
.
chrome
.
enabled
"
true
)
;
await
pushPref
(
"
devtools
.
debugger
.
remote
-
enabled
"
true
)
;
await
pushPref
(
"
devtools
.
debugger
.
prompt
-
connection
"
false
)
;
await
pushPref
(
"
devtools
.
browser
-
toolbox
.
allow
-
unsafe
-
script
"
true
)
;
}
function
installRegularExtension
(
pathOrFile
)
{
const
isFile
=
typeof
pathOrFile
.
isFile
=
=
=
"
function
"
&
&
pathOrFile
.
isFile
(
)
;
const
file
=
isFile
?
pathOrFile
:
_getSupportsFile
(
pathOrFile
)
.
file
;
return
new
Promise
(
async
(
resolve
reject
)
=
>
{
const
install
=
await
AddonManager
.
getInstallForFile
(
file
)
;
if
(
!
install
)
{
throw
new
Error
(
An
install
was
not
created
for
{
file
.
path
}
)
;
}
install
.
addListener
(
{
onDownloadFailed
:
reject
onDownloadCancelled
:
reject
onInstallFailed
:
reject
onInstallCancelled
:
reject
onInstallEnded
:
resolve
}
)
;
install
.
install
(
)
;
}
)
;
}
async
function
installTemporaryExtension
(
pathOrFile
name
document
)
{
const
{
Management
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
null
)
;
info
(
"
Install
temporary
extension
named
"
+
name
)
;
prepareMockFilePicker
(
pathOrFile
)
;
const
onAddonInstalled
=
new
Promise
(
done
=
>
{
Management
.
on
(
"
startup
"
function
listener
(
event
extension
)
{
if
(
extension
.
name
!
=
name
)
{
return
;
}
Management
.
off
(
"
startup
"
listener
)
;
done
(
)
;
}
)
;
}
)
;
document
.
querySelector
(
"
.
qa
-
temporary
-
extension
-
install
-
button
"
)
.
click
(
)
;
info
(
"
Wait
for
addon
to
be
installed
"
)
;
await
onAddonInstalled
;
}
function
createTemporaryXPI
(
xpiData
)
{
const
{
ExtensionTestCommon
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ExtensionTestCommon
.
jsm
"
{
}
)
;
const
{
background
files
id
name
extraProperties
}
=
xpiData
;
info
(
"
Generate
XPI
file
for
"
+
id
)
;
const
manifest
=
Object
.
assign
(
{
}
{
applications
:
{
gecko
:
{
id
}
}
manifest_version
:
2
name
version
:
"
1
.
0
"
}
extraProperties
)
;
const
xpiFile
=
ExtensionTestCommon
.
generateXPI
(
{
background
files
manifest
}
)
;
registerCleanupFunction
(
(
)
=
>
xpiFile
.
exists
(
)
&
&
xpiFile
.
remove
(
false
)
)
;
return
xpiFile
;
}
function
updateTemporaryXPI
(
xpiData
existingXPI
)
{
info
(
"
Delete
and
regenerate
XPI
for
"
+
xpiData
.
id
)
;
const
existingName
=
existingXPI
.
leafName
;
info
(
"
Delete
existing
XPI
named
:
"
+
existingName
)
;
existingXPI
.
exists
(
)
&
&
existingXPI
.
remove
(
false
)
;
const
xpiFile
=
createTemporaryXPI
(
xpiData
)
;
if
(
xpiFile
.
leafName
!
=
=
existingName
)
{
throw
new
Error
(
"
New
XPI
created
with
unexpected
name
:
"
+
xpiFile
.
leafName
)
;
}
return
xpiFile
;
}
async
function
installTemporaryExtensionFromXPI
(
xpiData
document
)
{
const
xpiFile
=
createTemporaryXPI
(
xpiData
)
;
await
installTemporaryExtension
(
xpiFile
xpiData
.
name
document
)
;
info
(
"
Wait
until
the
addon
debug
target
appears
"
)
;
await
waitUntil
(
(
)
=
>
findDebugTargetByText
(
xpiData
.
name
document
)
)
;
return
xpiFile
;
}
async
function
removeTemporaryExtension
(
name
document
)
{
info
(
Remove
the
temporary
extension
with
name
:
'
{
name
}
'
)
;
const
temporaryExtensionItem
=
findDebugTargetByText
(
name
document
)
;
temporaryExtensionItem
.
querySelector
(
"
.
qa
-
temporary
-
extension
-
remove
-
button
"
)
.
click
(
)
;
info
(
"
Wait
until
the
debug
target
item
disappears
"
)
;
await
waitUntil
(
(
)
=
>
!
findDebugTargetByText
(
name
document
)
)
;
}
async
function
removeExtension
(
id
name
document
)
{
info
(
"
Retrieve
the
extension
instance
from
the
addon
manager
and
uninstall
it
"
)
;
const
extension
=
await
AddonManager
.
getAddonByID
(
id
)
;
extension
.
uninstall
(
)
;
info
(
"
Wait
until
the
addon
disappears
from
about
:
debugging
"
)
;
await
waitUntil
(
(
)
=
>
!
findDebugTargetByText
(
name
document
)
)
;
}
function
prepareMockFilePicker
(
pathOrFile
)
{
const
isFile
=
typeof
pathOrFile
.
isFile
=
=
=
"
function
"
&
&
pathOrFile
.
isFile
(
)
;
const
file
=
isFile
?
pathOrFile
:
_getSupportsFile
(
pathOrFile
)
.
file
;
const
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
)
;
MockFilePicker
.
setFiles
(
[
file
]
)
;
}
