"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
mocks
/
head
-
usb
-
runtimes
-
mock
.
js
"
this
)
;
add_task
(
async
function
(
)
{
const
usbRuntimesMock
=
createUsbRuntimesMock
(
)
;
const
observerMock
=
addObserverMock
(
usbRuntimesMock
)
;
enableUsbRuntimesMock
(
usbRuntimesMock
)
;
registerCleanupFunction
(
(
)
=
>
{
disableUsbRuntimesMock
(
)
;
}
)
;
const
{
document
tab
}
=
await
openAboutDebugging
(
)
;
usbRuntimesMock
.
getUSBRuntimes
=
function
(
)
{
return
[
{
id
:
"
test_device_id
"
_socketPath
:
"
test
/
path
"
deviceName
:
"
test
device
name
"
shortName
:
"
testshort
"
}
]
;
}
;
observerMock
.
emit
(
"
runtime
-
list
-
updated
"
)
;
info
(
"
Wait
until
the
USB
sidebar
item
appears
"
)
;
await
waitUntil
(
(
)
=
>
findSidebarItemByText
(
"
test
device
name
"
document
)
)
;
const
usbRuntimeSidebarItem
=
findSidebarItemByText
(
"
test
device
name
"
document
)
;
ok
(
usbRuntimeSidebarItem
.
textContent
.
includes
(
"
testshort
"
)
"
The
short
name
of
the
usb
runtime
is
visible
"
)
;
usbRuntimesMock
.
getUSBRuntimes
=
function
(
)
{
return
[
]
;
}
;
observerMock
.
emit
(
"
runtime
-
list
-
updated
"
)
;
info
(
"
Wait
until
the
USB
sidebar
item
disappears
"
)
;
await
waitUntil
(
(
)
=
>
!
findSidebarItemByText
(
"
test
device
name
"
document
)
)
;
await
removeTab
(
tab
)
;
}
)
;
