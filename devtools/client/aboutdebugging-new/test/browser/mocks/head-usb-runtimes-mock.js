"
use
strict
"
;
function
enableUsbRuntimesMock
(
mock
)
{
const
{
setMockedModule
}
=
require
(
"
devtools
/
client
/
aboutdebugging
-
new
/
src
/
modules
/
test
-
helper
"
)
;
setMockedModule
(
mock
"
modules
/
usb
-
runtimes
"
)
;
}
function
disableUsbRuntimesMock
(
)
{
const
{
removeMockedModule
}
=
require
(
"
devtools
/
client
/
aboutdebugging
-
new
/
src
/
modules
/
test
-
helper
"
)
;
removeMockedModule
(
"
modules
/
usb
-
runtimes
"
)
;
}
function
createUsbRuntimesMock
(
)
{
const
usbRuntimesMock
=
{
}
;
usbRuntimesMock
.
addUSBRuntimesObserver
=
function
(
listener
)
{
console
.
log
(
"
MOCKED
METHOD
addUSBRuntimesObserver
"
)
;
}
;
usbRuntimesMock
.
disableUSBRuntimes
=
function
(
)
{
console
.
log
(
"
MOCKED
METHOD
disableUSBRuntimes
"
)
;
}
;
usbRuntimesMock
.
enableUSBRuntimes
=
function
(
)
{
console
.
log
(
"
MOCKED
METHOD
enableUSBRuntimes
"
)
;
}
;
usbRuntimesMock
.
getUSBRuntimes
=
function
(
)
{
console
.
log
(
"
MOCKED
METHOD
getUSBRuntimes
"
)
;
}
;
usbRuntimesMock
.
refreshUSBRuntimes
=
function
(
)
{
console
.
log
(
"
MOCKED
METHOD
refreshUSBRuntimes
"
)
;
}
;
usbRuntimesMock
.
removeUSBRuntimesObserver
=
function
(
listener
)
{
console
.
log
(
"
MOCKED
METHOD
removeUSBRuntimesObserver
"
)
;
}
;
return
usbRuntimesMock
;
}
function
addObserverMock
(
usbRuntimesMock
)
{
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
observerMock
=
{
}
;
EventEmitter
.
decorate
(
observerMock
)
;
usbRuntimesMock
.
addUSBRuntimesObserver
=
function
(
listener
)
{
console
.
log
(
"
MOCKED
METHOD
addUSBRuntimesObserver
with
mock
scanner
"
)
;
observerMock
.
on
(
"
runtime
-
list
-
updated
"
listener
)
;
}
;
return
observerMock
;
}
