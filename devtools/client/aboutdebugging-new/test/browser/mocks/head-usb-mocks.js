"
use
strict
"
;
const
MOCKS_ROOT
=
CHROME_URL_ROOT
+
"
mocks
/
"
;
const
{
RUNTIMES
}
=
require
(
"
devtools
/
client
/
aboutdebugging
-
new
/
src
/
constants
"
)
;
Services
.
scriptloader
.
loadSubScript
(
MOCKS_ROOT
+
"
head
-
client
-
wrapper
-
mock
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
MOCKS_ROOT
+
"
head
-
runtime
-
client
-
factory
-
mock
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
MOCKS_ROOT
+
"
head
-
usb
-
runtimes
-
mock
.
js
"
this
)
;
class
UsbMocks
{
constructor
(
)
{
this
.
usbRuntimesMock
=
createUsbRuntimesMock
(
)
;
this
.
_runtimes
=
[
]
;
this
.
usbRuntimesMock
.
getUSBRuntimes
=
(
)
=
>
{
return
this
.
_runtimes
;
}
;
this
.
_observerMock
=
addObserverMock
(
this
.
usbRuntimesMock
)
;
this
.
runtimeClientFactoryMock
=
createRuntimeClientFactoryMock
(
)
;
this
.
_clients
=
{
}
;
this
.
runtimeClientFactoryMock
.
createClientForRuntime
=
runtime
=
>
{
return
{
clientWrapper
:
this
.
_clients
[
runtime
.
id
]
}
;
}
;
this
.
_thisFirefoxClient
=
createThisFirefoxClientMock
(
)
;
this
.
_clients
[
RUNTIMES
.
THIS_FIREFOX
]
=
this
.
_thisFirefoxClient
;
}
get
thisFirefoxClient
(
)
{
return
this
.
_thisFirefoxClient
;
}
enableMocks
(
)
{
enableUsbRuntimesMock
(
this
.
usbRuntimesMock
)
;
enableRuntimeClientFactoryMock
(
this
.
runtimeClientFactoryMock
)
;
}
disableMocks
(
)
{
disableUsbRuntimesMock
(
)
;
disableRuntimeClientFactoryMock
(
)
;
}
emitUpdate
(
)
{
this
.
_observerMock
.
emit
(
"
runtime
-
list
-
updated
"
)
;
}
createRuntime
(
id
runtimeInfo
=
{
}
)
{
this
.
_runtimes
.
push
(
{
id
:
id
_socketPath
:
runtimeInfo
.
socketPath
|
|
"
test
/
path
"
deviceName
:
runtimeInfo
.
deviceName
|
|
"
test
device
name
"
shortName
:
runtimeInfo
.
shortName
|
|
"
testshort
"
}
)
;
const
mockUsbClient
=
createClientMock
(
)
;
mockUsbClient
.
getDeviceDescription
=
(
)
=
>
{
return
{
brandName
:
runtimeInfo
.
appName
|
|
"
TestBrand
"
channel
:
runtimeInfo
.
channel
|
|
"
release
"
version
:
runtimeInfo
.
version
|
|
"
1
.
0
"
}
;
}
;
this
.
_clients
[
id
]
=
mockUsbClient
;
return
mockUsbClient
;
}
removeRuntime
(
id
)
{
this
.
_runtimes
=
this
.
_runtimes
.
filter
(
runtime
=
>
runtime
.
id
!
=
=
id
)
;
delete
this
.
_clients
[
id
]
;
}
}
