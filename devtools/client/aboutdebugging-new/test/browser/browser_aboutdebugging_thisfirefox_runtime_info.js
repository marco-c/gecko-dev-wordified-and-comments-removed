"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
mocks
/
helper
-
client
-
wrapper
-
mock
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
mocks
/
helper
-
runtime
-
client
-
factory
-
mock
.
js
"
this
)
;
add_task
(
async
function
(
)
{
const
runtimeClientFactoryMock
=
createRuntimeClientFactoryMock
(
)
;
const
thisFirefoxClient
=
createThisFirefoxClientMock
(
)
;
runtimeClientFactoryMock
.
createClientForRuntime
=
runtime
=
>
{
const
{
RUNTIMES
}
=
require
(
"
devtools
/
client
/
aboutdebugging
-
new
/
src
/
constants
"
)
;
if
(
runtime
.
id
=
=
=
RUNTIMES
.
THIS_FIREFOX
)
{
return
thisFirefoxClient
;
}
throw
new
Error
(
"
Unexpected
runtime
id
"
+
runtime
.
id
)
;
}
;
info
(
"
Enable
mocks
"
)
;
enableRuntimeClientFactoryMock
(
runtimeClientFactoryMock
)
;
registerCleanupFunction
(
(
)
=
>
{
disableRuntimeClientFactoryMock
(
)
;
}
)
;
const
{
document
tab
}
=
await
openAboutDebugging
(
)
;
info
(
"
Check
that
the
'
This
Firefox
'
mock
is
properly
displayed
"
)
;
const
thisFirefoxRuntimeInfo
=
document
.
querySelector
(
"
.
js
-
runtime
-
info
"
)
;
ok
(
thisFirefoxRuntimeInfo
"
Runtime
info
for
this
-
firefox
runtime
is
displayed
"
)
;
const
runtimeInfoText
=
thisFirefoxRuntimeInfo
.
textContent
;
ok
(
runtimeInfoText
.
includes
(
"
Firefox
"
)
"
this
-
firefox
runtime
info
shows
the
correct
runtime
name
:
"
+
runtimeInfoText
)
;
ok
(
runtimeInfoText
.
includes
(
"
63
.
0
"
)
"
this
-
firefox
runtime
info
shows
the
correct
version
number
:
"
+
runtimeInfoText
)
;
await
removeTab
(
tab
)
;
}
)
;
