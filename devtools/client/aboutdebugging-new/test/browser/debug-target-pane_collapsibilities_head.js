"
use
strict
"
;
const
TARGET_PANES
=
[
{
title
:
"
Temporary
Extensions
"
pref
:
"
devtools
.
aboutdebugging
.
collapsibilities
.
temporaryExtension
"
}
{
title
:
"
Extensions
"
pref
:
"
devtools
.
aboutdebugging
.
collapsibilities
.
installedExtension
"
}
{
title
:
"
Tabs
"
pref
:
"
devtools
.
aboutdebugging
.
collapsibilities
.
tab
"
}
{
title
:
"
Service
Workers
"
pref
:
"
devtools
.
aboutdebugging
.
collapsibilities
.
serviceWorker
"
}
{
title
:
"
Shared
Workers
"
pref
:
"
devtools
.
aboutdebugging
.
collapsibilities
.
sharedWorker
"
}
{
title
:
"
Other
Workers
"
pref
:
"
devtools
.
aboutdebugging
.
collapsibilities
.
otherWorker
"
}
]
;
function
getDebugTargetPane
(
title
document
)
{
const
sanitizeTitle
=
(
x
)
=
>
{
return
x
.
replace
(
/
\
s
+
\
(
\
d
+
\
)
/
"
"
)
;
}
;
const
targetTitle
=
sanitizeTitle
(
title
)
;
for
(
const
titleEl
of
document
.
querySelectorAll
(
"
.
js
-
debug
-
target
-
pane
-
title
"
)
)
{
if
(
sanitizeTitle
(
titleEl
.
textContent
)
!
=
=
targetTitle
)
{
continue
;
}
return
titleEl
.
closest
(
"
.
js
-
debug
-
target
-
pane
"
)
;
}
return
null
;
}
function
prepareCollapsibilitiesTest
(
)
{
for
(
const
{
pref
}
of
TARGET_PANES
)
{
Services
.
prefs
.
setBoolPref
(
pref
false
)
;
}
}
async
function
toggleCollapsibility
(
debugTargetPane
)
{
debugTargetPane
.
querySelector
(
"
.
js
-
debug
-
target
-
pane
-
title
"
)
.
click
(
)
;
const
animations
=
debugTargetPane
.
ownerDocument
.
getAnimations
(
)
;
await
Promise
.
all
(
animations
.
map
(
animation
=
>
animation
.
finished
)
)
;
}
registerCleanupFunction
(
(
)
=
>
{
for
(
const
{
pref
}
of
TARGET_PANES
)
{
Services
.
prefs
.
clearUserPref
(
pref
)
;
}
}
)
;
