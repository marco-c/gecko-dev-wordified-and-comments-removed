"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
adb
.
js
"
this
)
;
async
function
getExpectedRuntime
(
)
{
const
runtimes
=
await
getExpectedRuntimeAll
(
)
;
return
runtimes
[
0
]
;
}
async
function
getExpectedRuntimeAll
(
)
{
const
runtimesPath
=
_getExpectedRuntimesPath
(
)
;
const
currentPath
=
env
.
get
(
"
PWD
"
)
;
const
path
=
{
currentPath
}
/
{
runtimesPath
}
;
info
(
Load
{
path
}
)
;
const
buffer
=
await
OS
.
File
.
read
(
path
)
;
const
data
=
new
TextDecoder
(
)
.
decode
(
buffer
)
;
return
JSON
.
parse
(
data
)
;
}
function
isAvailable
(
)
{
return
!
!
_getExpectedRuntimesPath
(
)
;
}
async
function
openAboutDebuggingWithADB
(
)
{
const
{
document
tab
window
}
=
await
openAboutDebugging
(
)
;
await
pushPref
(
"
devtools
.
remote
.
adb
.
extensionURL
"
CHROME_URL_ROOT
+
"
resources
/
test
-
adb
-
extension
/
adb
-
extension
-
#
OS
#
.
xpi
"
)
;
await
checkAdbNotRunning
(
)
;
const
{
adbAddon
}
=
require
(
"
devtools
/
shared
/
adb
/
adb
-
addon
"
)
;
adbAddon
.
install
(
"
internal
"
)
;
const
usbStatusElement
=
document
.
querySelector
(
"
.
js
-
sidebar
-
usb
-
status
"
)
;
await
waitUntil
(
(
)
=
>
usbStatusElement
.
textContent
.
includes
(
"
USB
enabled
"
)
)
;
await
waitForAdbStart
(
)
;
return
{
document
tab
window
}
;
}
function
_getExpectedRuntimesPath
(
)
{
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
return
env
.
get
(
"
USB_RUNTIMES
"
)
;
}
