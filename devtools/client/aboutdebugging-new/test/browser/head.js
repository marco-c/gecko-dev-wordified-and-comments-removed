"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
redux
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
mocks
.
js
"
this
)
;
registerCleanupFunction
(
async
function
(
)
{
try
{
const
{
adbAddon
}
=
require
(
"
devtools
/
shared
/
adb
/
adb
-
addon
"
)
;
await
adbAddon
.
uninstall
(
)
;
}
catch
(
e
)
{
}
const
{
adbProcess
}
=
require
(
"
devtools
/
shared
/
adb
/
adb
-
process
"
)
;
await
adbProcess
.
kill
(
)
;
const
{
remoteClientManager
}
=
require
(
"
devtools
/
client
/
shared
/
remote
-
debugging
/
remote
-
client
-
manager
"
)
;
await
remoteClientManager
.
removeAllClients
(
)
;
}
)
;
async
function
enableNewAboutDebugging
(
)
{
await
pushPref
(
"
devtools
.
aboutdebugging
.
new
-
enabled
"
true
)
;
}
async
function
openAboutDebugging
(
{
enableWorkerUpdates
enableLocalTabs
=
true
}
=
{
}
)
{
if
(
!
enableWorkerUpdates
)
{
silenceWorkerUpdates
(
)
;
}
await
pushPref
(
"
devtools
.
aboutdebugging
.
local
-
tab
-
debugging
"
enableLocalTabs
)
;
await
enableNewAboutDebugging
(
)
;
info
(
"
opening
about
:
debugging
"
)
;
const
tab
=
await
addTab
(
"
about
:
debugging
"
)
;
const
browser
=
tab
.
linkedBrowser
;
const
document
=
browser
.
contentDocument
;
const
window
=
browser
.
contentWindow
;
info
(
"
Wait
until
Connect
page
is
displayed
"
)
;
await
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
.
js
-
connect
-
page
"
)
)
;
return
{
tab
document
window
}
;
}
async
function
openAboutDevtoolsToolbox
(
doc
tab
win
targetText
=
"
about
:
debugging
"
shouldWaitToolboxReady
=
true
)
{
info
(
"
Open
about
:
devtools
-
toolbox
page
"
)
;
const
target
=
findDebugTargetByText
(
targetText
doc
)
;
ok
(
target
{
targetText
}
tab
target
appeared
)
;
const
inspectButton
=
target
.
querySelector
(
"
.
js
-
debug
-
target
-
inspect
-
button
"
)
;
ok
(
inspectButton
Inspect
button
for
{
targetText
}
appeared
)
;
inspectButton
.
click
(
)
;
await
Promise
.
all
(
[
waitUntil
(
(
)
=
>
tab
.
nextElementSibling
)
waitForRequestsToSettle
(
win
.
AboutDebugging
.
store
)
shouldWaitToolboxReady
?
gDevTools
.
once
(
"
toolbox
-
ready
"
)
:
Promise
.
resolve
(
)
]
)
;
info
(
"
Wait
for
about
:
devtools
-
toolbox
tab
will
be
selected
"
)
;
const
devtoolsTab
=
tab
.
nextElementSibling
;
await
waitUntil
(
(
)
=
>
gBrowser
.
selectedTab
=
=
=
devtoolsTab
)
;
const
devtoolsBrowser
=
gBrowser
.
selectedBrowser
;
await
waitUntil
(
(
)
=
>
devtoolsBrowser
.
contentWindow
.
location
.
href
.
startsWith
(
"
about
:
devtools
-
toolbox
?
"
)
)
;
if
(
!
shouldWaitToolboxReady
)
{
await
waitUntil
(
(
)
=
>
devtoolsBrowser
.
contentDocument
.
querySelector
(
"
.
js
-
error
-
page
"
)
)
;
}
return
{
devtoolsBrowser
devtoolsDocument
:
devtoolsBrowser
.
contentDocument
devtoolsTab
devtoolsWindow
:
devtoolsBrowser
.
contentWindow
}
;
}
async
function
closeAboutDevtoolsToolbox
(
aboutDebuggingDocument
devtoolsTab
win
)
{
info
(
"
Close
about
:
devtools
-
toolbox
page
"
)
;
const
onToolboxDestroyed
=
gDevTools
.
once
(
"
toolbox
-
destroyed
"
)
;
info
(
"
Wait
for
removeTab
"
)
;
await
removeTab
(
devtoolsTab
)
;
info
(
"
Wait
for
toolbox
destroyed
"
)
;
await
onToolboxDestroyed
;
info
(
"
Wait
until
aboutdebugging
is
selected
"
)
;
await
waitUntil
(
(
)
=
>
gBrowser
.
selectedTab
!
=
=
devtoolsTab
)
;
info
(
"
Wait
until
about
:
devtools
-
toolbox
is
removed
from
debug
targets
"
)
;
await
waitUntil
(
(
)
=
>
!
findDebugTargetByText
(
"
about
:
devtools
-
toolbox
?
"
aboutDebuggingDocument
)
)
;
await
waitForRequestsToSettle
(
win
.
AboutDebugging
.
store
)
;
}
async
function
reloadAboutDebugging
(
tab
)
{
info
(
"
reload
about
:
debugging
"
)
;
await
refreshTab
(
tab
)
;
const
browser
=
tab
.
linkedBrowser
;
const
document
=
browser
.
contentDocument
;
const
window
=
browser
.
contentWindow
;
info
(
"
wait
for
the
initial
about
:
debugging
requests
to
settle
"
)
;
await
waitForRequestsToSettle
(
window
.
AboutDebugging
.
store
)
;
return
document
;
}
function
waitForRequestsSuccess
(
store
)
{
return
Promise
.
all
(
[
waitForDispatch
(
store
"
REQUEST_EXTENSIONS_SUCCESS
"
)
waitForDispatch
(
store
"
REQUEST_TABS_SUCCESS
"
)
waitForDispatch
(
store
"
REQUEST_WORKERS_SUCCESS
"
)
]
)
;
}
async
function
waitForRequestsToSettle
(
store
delay
=
500
)
{
let
hasSettled
=
false
;
while
(
!
hasSettled
)
{
let
timer
;
const
timerPromise
=
new
Promise
(
resolve
=
>
{
timer
=
setTimeout
(
(
)
=
>
{
hasSettled
=
true
;
resolve
(
)
;
}
delay
)
;
}
)
;
await
Promise
.
race
(
[
waitForDispatch
(
store
"
REQUEST_EXTENSIONS_SUCCESS
"
)
waitForDispatch
(
store
"
REQUEST_TABS_SUCCESS
"
)
waitForDispatch
(
store
"
REQUEST_WORKERS_SUCCESS
"
)
timerPromise
]
)
;
clearTimeout
(
timer
)
;
}
}
function
waitForDispatch
(
store
type
)
{
return
new
Promise
(
resolve
=
>
{
store
.
dispatch
(
{
type
:
"
service
/
waitUntil
"
predicate
:
action
=
>
action
.
type
=
=
=
type
run
:
(
dispatch
getState
action
)
=
>
{
resolve
(
action
)
;
}
}
)
;
}
)
;
}
async
function
selectThisFirefoxPage
(
doc
store
)
{
info
(
"
Select
This
Firefox
page
"
)
;
const
onRequestSuccess
=
waitForRequestsSuccess
(
store
)
;
doc
.
location
.
hash
=
"
#
/
runtime
/
this
-
firefox
"
;
info
(
"
Wait
for
requests
to
be
complete
"
)
;
await
onRequestSuccess
;
info
(
"
Wait
for
runtime
page
to
be
rendered
"
)
;
await
waitUntil
(
(
)
=
>
doc
.
querySelector
(
"
.
js
-
runtime
-
page
"
)
)
;
}
async
function
selectConnectPage
(
doc
)
{
const
sidebarItems
=
doc
.
querySelectorAll
(
"
.
js
-
sidebar
-
item
"
)
;
const
connectSidebarItem
=
[
.
.
.
sidebarItems
]
.
find
(
element
=
>
{
return
element
.
textContent
=
=
=
"
Setup
"
;
}
)
;
ok
(
connectSidebarItem
"
Sidebar
contains
a
Connect
item
"
)
;
const
connectLink
=
connectSidebarItem
.
querySelector
(
"
.
js
-
sidebar
-
link
"
)
;
ok
(
connectLink
"
Sidebar
contains
a
Connect
link
"
)
;
info
(
"
Click
on
the
Connect
link
in
the
sidebar
"
)
;
connectLink
.
click
(
)
;
info
(
"
Wait
until
Connect
page
is
displayed
"
)
;
await
waitUntil
(
(
)
=
>
doc
.
querySelector
(
"
.
js
-
connect
-
page
"
)
)
;
}
function
getDebugTargetPane
(
title
document
)
{
const
sanitizeTitle
=
(
x
)
=
>
{
return
x
.
replace
(
/
\
s
+
\
(
\
d
+
\
)
/
"
"
)
;
}
;
const
targetTitle
=
sanitizeTitle
(
title
)
;
for
(
const
titleEl
of
document
.
querySelectorAll
(
"
.
js
-
debug
-
target
-
pane
-
title
"
)
)
{
if
(
sanitizeTitle
(
titleEl
.
textContent
)
!
=
=
targetTitle
)
{
continue
;
}
return
titleEl
.
closest
(
"
.
js
-
debug
-
target
-
pane
"
)
;
}
return
null
;
}
function
findDebugTargetByText
(
text
document
)
{
const
targets
=
[
.
.
.
document
.
querySelectorAll
(
"
.
js
-
debug
-
target
-
item
"
)
]
;
return
targets
.
find
(
target
=
>
target
.
textContent
.
includes
(
text
)
)
;
}
function
findSidebarItemByText
(
text
document
)
{
const
sidebarItems
=
document
.
querySelectorAll
(
"
.
js
-
sidebar
-
item
"
)
;
return
[
.
.
.
sidebarItems
]
.
find
(
element
=
>
{
return
element
.
textContent
.
includes
(
text
)
;
}
)
;
}
function
findSidebarItemLinkByText
(
text
document
)
{
const
links
=
document
.
querySelectorAll
(
"
.
js
-
sidebar
-
link
"
)
;
return
[
.
.
.
links
]
.
find
(
element
=
>
{
return
element
.
textContent
.
includes
(
text
)
;
}
)
;
}
async
function
connectToRuntime
(
deviceName
document
)
{
info
(
Wait
until
the
sidebar
item
for
{
deviceName
}
appears
)
;
await
waitUntil
(
(
)
=
>
findSidebarItemByText
(
deviceName
document
)
)
;
const
sidebarItem
=
findSidebarItemByText
(
deviceName
document
)
;
const
connectButton
=
sidebarItem
.
querySelector
(
"
.
js
-
connect
-
button
"
)
;
ok
(
connectButton
Connect
button
is
displayed
for
the
runtime
{
deviceName
}
)
;
info
(
"
Click
on
the
connect
button
and
wait
until
it
disappears
"
)
;
connectButton
.
click
(
)
;
await
waitUntil
(
(
)
=
>
!
sidebarItem
.
querySelector
(
"
.
js
-
connect
-
button
"
)
)
;
}
async
function
selectRuntime
(
deviceName
name
document
)
{
const
sidebarItem
=
findSidebarItemByText
(
deviceName
document
)
;
sidebarItem
.
querySelector
(
"
.
js
-
sidebar
-
link
"
)
.
click
(
)
;
await
waitUntil
(
(
)
=
>
{
const
runtimeInfo
=
document
.
querySelector
(
"
.
js
-
runtime
-
name
"
)
;
return
runtimeInfo
&
&
runtimeInfo
.
textContent
.
includes
(
name
)
;
}
)
;
}
function
getToolbox
(
win
)
{
return
gDevTools
.
getToolboxes
(
)
.
find
(
toolbox
=
>
toolbox
.
win
=
=
=
win
)
;
}
async
function
openProfilerDialog
(
client
doc
)
{
const
onProfilerLoaded
=
new
Promise
(
r
=
>
{
client
.
loadPerformanceProfiler
=
r
;
}
)
;
info
(
"
Click
on
the
Profile
Runtime
button
"
)
;
const
profileButton
=
doc
.
querySelector
(
"
.
js
-
profile
-
runtime
-
button
"
)
;
profileButton
.
click
(
)
;
info
(
"
Wait
for
the
loadPerformanceProfiler
callback
to
be
executed
on
client
-
wrapper
"
)
;
return
onProfilerLoaded
;
}
function
getThisFirefoxString
(
aboutDebuggingWindow
)
{
const
loader
=
aboutDebuggingWindow
.
getBrowserLoaderForWindow
(
)
;
const
{
l10n
}
=
loader
.
require
(
"
devtools
/
client
/
aboutdebugging
-
new
/
src
/
modules
/
l10n
"
)
;
return
l10n
.
getString
(
"
about
-
debugging
-
this
-
firefox
-
runtime
-
name
"
)
;
}
function
waitUntilUsbDeviceIsUnplugged
(
deviceName
aboutDebuggingDocument
)
{
info
(
"
Wait
until
the
USB
sidebar
item
appears
as
unplugged
"
)
;
return
waitUntil
(
(
)
=
>
{
const
sidebarItem
=
findSidebarItemByText
(
deviceName
aboutDebuggingDocument
)
;
return
!
!
sidebarItem
.
querySelector
(
"
.
qa
-
runtime
-
item
-
unplugged
"
)
;
}
)
;
}
