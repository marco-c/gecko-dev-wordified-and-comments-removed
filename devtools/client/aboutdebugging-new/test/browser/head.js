"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
redux
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
debug
-
target
-
pane_collapsibilities_head
.
js
"
this
)
;
registerCleanupFunction
(
async
function
(
)
{
try
{
const
{
adbAddon
}
=
require
(
"
devtools
/
shared
/
adb
/
adb
-
addon
"
)
;
await
adbAddon
.
uninstall
(
)
;
}
catch
(
e
)
{
}
const
{
ADB
}
=
require
(
"
devtools
/
shared
/
adb
/
adb
"
)
;
await
ADB
.
kill
(
)
;
}
)
;
async
function
enableNewAboutDebugging
(
)
{
await
pushPref
(
"
devtools
.
aboutdebugging
.
new
-
enabled
"
true
)
;
await
pushPref
(
"
devtools
.
aboutdebugging
.
network
"
true
)
;
}
async
function
openAboutDebugging
(
page
win
)
{
await
enableNewAboutDebugging
(
)
;
info
(
"
opening
about
:
debugging
"
)
;
const
tab
=
await
addTab
(
"
about
:
debugging
"
{
window
:
win
}
)
;
const
browser
=
tab
.
linkedBrowser
;
const
document
=
browser
.
contentDocument
;
const
window
=
browser
.
contentWindow
;
const
{
AboutDebugging
}
=
window
;
info
(
"
Wait
until
the
main
about
debugging
container
is
available
"
)
;
await
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
.
app
"
)
)
;
info
(
"
Wait
until
the
client
connection
was
established
"
)
;
await
waitUntil
(
(
)
=
>
document
.
querySelector
(
"
.
js
-
runtime
-
page
"
)
)
;
info
(
"
Wait
until
tabs
are
displayed
"
)
;
await
waitUntilState
(
AboutDebugging
.
store
state
=
>
{
return
state
.
debugTargets
.
tabs
.
length
>
0
;
}
)
;
info
(
"
Wait
until
pre
-
installed
add
-
ons
are
displayed
"
)
;
await
waitUntilState
(
AboutDebugging
.
store
state
=
>
{
return
state
.
debugTargets
.
installedExtensions
.
length
>
0
;
}
)
;
info
(
"
Wait
until
internal
'
other
workers
'
are
displayed
"
)
;
await
waitUntilState
(
AboutDebugging
.
store
state
=
>
{
return
state
.
debugTargets
.
otherWorkers
.
length
>
0
;
}
)
;
return
{
tab
document
window
}
;
}
async
function
selectConnectPage
(
doc
)
{
const
sidebarItems
=
doc
.
querySelectorAll
(
"
.
js
-
sidebar
-
item
"
)
;
const
connectSidebarItem
=
[
.
.
.
sidebarItems
]
.
find
(
element
=
>
{
return
element
.
textContent
=
=
=
"
Connect
"
;
}
)
;
ok
(
connectSidebarItem
"
Sidebar
contains
a
Connect
item
"
)
;
const
connectLink
=
connectSidebarItem
.
querySelector
(
"
.
js
-
sidebar
-
link
"
)
;
ok
(
connectLink
"
Sidebar
contains
a
Connect
link
"
)
;
info
(
"
Click
on
the
Connect
link
in
the
sidebar
"
)
;
connectLink
.
click
(
)
;
info
(
"
Wait
until
Connect
page
is
displayed
"
)
;
await
waitUntil
(
(
)
=
>
doc
.
querySelector
(
"
.
js
-
connect
-
page
"
)
)
;
}
function
findDebugTargetByText
(
text
document
)
{
const
targets
=
[
.
.
.
document
.
querySelectorAll
(
"
.
js
-
debug
-
target
-
item
"
)
]
;
return
targets
.
find
(
target
=
>
target
.
textContent
.
includes
(
text
)
)
;
}
function
findSidebarItemByText
(
text
document
)
{
const
sidebarItems
=
document
.
querySelectorAll
(
"
.
js
-
sidebar
-
item
"
)
;
return
[
.
.
.
sidebarItems
]
.
find
(
element
=
>
{
return
element
.
textContent
.
includes
(
text
)
;
}
)
;
}
