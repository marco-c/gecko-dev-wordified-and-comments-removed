"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
serviceworker
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
collapsibilities
.
js
"
this
)
;
const
SW_TAB_URL
=
URL_ROOT
+
"
resources
/
service
-
workers
/
push
-
sw
.
html
"
;
const
SW_URL
=
URL_ROOT
+
"
resources
/
service
-
workers
/
push
-
sw
.
js
"
;
add_task
(
async
function
(
)
{
prepareCollapsibilitiesTest
(
)
;
await
enableServiceWorkerDebugging
(
)
;
const
{
document
tab
window
}
=
await
openAboutDebugging
(
{
enableWorkerUpdates
:
true
}
)
;
const
store
=
window
.
AboutDebugging
.
store
;
await
selectThisFirefoxPage
(
document
store
)
;
info
(
"
Check
that
the
SW
pane
is
empty
"
)
;
let
swPane
=
getDebugTargetPane
(
"
Service
Workers
"
document
)
;
ok
(
!
swPane
.
querySelector
(
"
.
js
-
debug
-
target
-
item
"
)
"
SW
list
is
empty
"
)
;
info
(
"
Register
a
service
worker
"
)
;
const
swTab
=
await
addTab
(
SW_TAB_URL
)
;
info
(
"
Wait
until
the
service
worker
appears
and
is
running
"
)
;
await
waitForServiceWorkerRunning
(
SW_URL
document
)
;
swPane
=
getDebugTargetPane
(
"
Service
Workers
"
document
)
;
ok
(
swPane
.
querySelectorAll
(
"
.
js
-
debug
-
target
-
item
"
)
.
length
=
=
=
1
"
Service
worker
list
has
one
element
"
)
;
ok
(
swPane
.
querySelector
(
"
.
js
-
debug
-
target
-
item
"
)
.
textContent
.
includes
(
SW_URL
)
"
Service
worker
list
is
the
one
we
registered
"
)
;
info
(
"
Unregister
service
worker
"
)
;
await
unregisterServiceWorker
(
swTab
)
;
info
(
"
Wait
for
service
worker
to
disappear
"
)
;
await
waitUntil
(
(
)
=
>
{
swPane
=
getDebugTargetPane
(
"
Service
Workers
"
document
)
;
return
swPane
.
querySelectorAll
(
"
.
js
-
debug
-
target
-
item
"
)
.
length
=
=
=
0
;
}
)
;
info
(
"
Remove
tabs
"
)
;
await
removeTab
(
swTab
)
;
await
removeTab
(
tab
)
;
}
)
;
