"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
collapsibilities
.
js
"
this
)
;
add_task
(
async
function
(
)
{
prepareCollapsibilitiesTest
(
)
;
const
{
document
tab
window
}
=
await
openAboutDebugging
(
)
;
await
selectThisFirefoxPage
(
document
window
.
AboutDebugging
.
store
)
;
for
(
const
{
title
}
of
TARGET_PANES
)
{
info
(
"
Check
whether
this
pane
is
collapsed
after
clicking
the
title
"
)
;
await
toggleCollapsibility
(
getDebugTargetPane
(
title
document
)
)
;
assertDebugTargetCollapsed
(
getDebugTargetPane
(
title
document
)
title
)
;
info
(
"
Check
whether
this
pane
is
expanded
after
clicking
the
title
again
"
)
;
await
toggleCollapsibility
(
getDebugTargetPane
(
title
document
)
)
;
await
assertDebugTargetExpanded
(
getDebugTargetPane
(
title
document
)
title
)
;
}
await
removeTab
(
tab
)
;
}
)
;
async
function
assertDebugTargetCollapsed
(
paneEl
title
)
{
info
(
"
Check
debug
target
is
collapsed
"
)
;
const
targetEl
=
paneEl
.
querySelector
(
"
.
qa
-
debug
-
target
-
pane__collapsable
"
)
;
is
(
targetEl
.
clientHeight
0
"
Height
of
list
element
is
zero
"
)
;
const
titleEl
=
paneEl
.
querySelector
(
"
.
qa
-
debug
-
target
-
pane
-
title
"
)
;
const
expectedTitle
=
{
title
}
(
{
targetEl
.
querySelectorAll
(
"
.
qa
-
debug
-
target
-
item
"
)
.
length
}
)
;
is
(
titleEl
.
textContent
expectedTitle
"
Collapsed
title
is
correct
"
)
;
}
async
function
assertDebugTargetExpanded
(
paneEl
title
)
{
info
(
"
Check
debug
target
is
expanded
"
)
;
const
targetEl
=
paneEl
.
querySelector
(
"
.
qa
-
debug
-
target
-
pane__collapsable
"
)
;
await
waitUntil
(
(
)
=
>
targetEl
.
clientHeight
>
0
)
;
ok
(
true
"
Height
of
list
element
is
greater
than
zero
"
)
;
const
titleEl
=
paneEl
.
querySelector
(
"
.
qa
-
debug
-
target
-
pane
-
title
"
)
;
const
expectedTitle
=
{
title
}
(
{
targetEl
.
querySelectorAll
(
"
.
qa
-
debug
-
target
-
item
"
)
.
length
}
)
;
is
(
titleEl
.
textContent
expectedTitle
"
Expanded
title
is
correct
"
)
;
}
