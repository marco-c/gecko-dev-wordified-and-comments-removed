"
use
strict
"
;
function
setupTelemetryTest
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
const
OPTOUT
=
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTOUT
;
const
snapshot
=
Services
.
telemetry
.
snapshotEvents
(
OPTOUT
true
)
;
ok
(
!
snapshot
.
parent
"
No
events
have
been
logged
for
the
main
process
"
)
;
}
function
checkTelemetryEvents
(
expectedEvents
expectedSessionId
)
{
const
evts
=
readAboutDebuggingEvents
(
)
;
is
(
evts
.
length
expectedEvents
.
length
"
Expected
number
of
events
"
)
;
function
_eventHasExpectedExtras
(
e
expectedEvent
)
{
const
expectedExtras
=
Object
.
keys
(
expectedEvent
.
extras
)
;
return
expectedExtras
.
every
(
extra
=
>
{
return
e
.
extras
[
extra
]
=
=
=
expectedEvent
.
extras
[
extra
]
;
}
)
;
}
for
(
const
expectedEvent
of
expectedEvents
)
{
const
sameMethodEvents
=
evts
.
filter
(
e
=
>
e
.
method
=
=
=
expectedEvent
.
method
)
;
ok
(
sameMethodEvents
.
length
>
0
"
Found
event
for
method
:
"
+
expectedEvent
.
method
)
;
const
sameExtrasEvents
=
sameMethodEvents
.
filter
(
e
=
>
_eventHasExpectedExtras
(
e
expectedEvent
)
)
;
ok
(
sameExtrasEvents
.
length
=
=
=
1
"
Found
exactly
one
event
matching
the
expected
extras
"
)
;
if
(
sameExtrasEvents
.
length
=
=
=
0
)
{
info
(
JSON
.
stringify
(
sameMethodEvents
)
)
;
}
is
(
sameExtrasEvents
[
0
]
.
extras
.
session_id
expectedSessionId
"
Select
page
event
has
the
expected
session
"
)
;
}
return
evts
;
}
function
getOpenEventSessionId
(
)
{
const
openEvents
=
readAboutDebuggingEvents
(
)
.
filter
(
e
=
>
e
.
method
=
=
=
"
open_adbg
"
)
;
ok
(
!
!
openEvents
[
0
]
"
Found
an
about
:
debugging
open
event
"
)
;
return
openEvents
[
0
]
.
extras
.
session_id
;
}
function
readAboutDebuggingEvents
(
)
{
const
OPTOUT
=
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTOUT
;
const
snapshot
=
Services
.
telemetry
.
snapshotEvents
(
OPTOUT
true
)
;
const
parentEvents
=
snapshot
.
parent
|
|
[
]
;
return
parentEvents
.
map
(
_toEventObject
)
.
filter
(
e
=
>
e
.
object
=
=
=
"
aboutdebugging
"
)
;
}
function
_toEventObject
(
rawEvent
)
{
return
{
category
:
rawEvent
[
1
]
method
:
rawEvent
[
2
]
object
:
rawEvent
[
3
]
value
:
rawEvent
[
4
]
extras
:
rawEvent
[
5
]
}
;
}
