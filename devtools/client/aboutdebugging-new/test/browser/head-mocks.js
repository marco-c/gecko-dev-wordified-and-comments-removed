"
use
strict
"
;
const
MOCKS_ROOT
=
CHROME_URL_ROOT
+
"
mocks
/
"
;
const
{
RUNTIMES
}
=
require
(
"
devtools
/
client
/
aboutdebugging
-
new
/
src
/
constants
"
)
;
Services
.
scriptloader
.
loadSubScript
(
MOCKS_ROOT
+
"
head
-
client
-
wrapper
-
mock
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
MOCKS_ROOT
+
"
head
-
runtime
-
client
-
factory
-
mock
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
MOCKS_ROOT
+
"
head
-
usb
-
runtimes
-
mock
.
js
"
this
)
;
class
Mocks
{
constructor
(
)
{
this
.
usbRuntimesMock
=
createUsbRuntimesMock
(
)
;
this
.
_usbRuntimes
=
[
]
;
this
.
usbRuntimesMock
.
getUSBRuntimes
=
(
)
=
>
{
return
this
.
_usbRuntimes
;
}
;
this
.
usbRuntimesMock
.
refreshUSBRuntimes
=
(
)
=
>
{
this
.
emitUSBUpdate
(
)
;
}
;
this
.
_observerMock
=
addObserverMock
(
this
.
usbRuntimesMock
)
;
this
.
runtimeClientFactoryMock
=
createRuntimeClientFactoryMock
(
)
;
this
.
_clients
=
{
[
RUNTIMES
.
NETWORK
]
:
{
}
[
RUNTIMES
.
THIS_FIREFOX
]
:
{
}
[
RUNTIMES
.
USB
]
:
{
}
}
;
this
.
runtimeClientFactoryMock
.
createClientForRuntime
=
runtime
=
>
{
return
this
.
_clients
[
runtime
.
type
]
[
runtime
.
id
]
;
}
;
this
.
_thisFirefoxClient
=
createThisFirefoxClientMock
(
)
;
this
.
_clients
[
RUNTIMES
.
THIS_FIREFOX
]
[
RUNTIMES
.
THIS_FIREFOX
]
=
this
.
_thisFirefoxClient
;
this
.
enableMocks
(
)
;
registerCleanupFunction
(
(
)
=
>
this
.
disableMocks
(
)
)
;
}
get
thisFirefoxClient
(
)
{
return
this
.
_thisFirefoxClient
;
}
enableMocks
(
)
{
enableUsbRuntimesMock
(
this
.
usbRuntimesMock
)
;
enableRuntimeClientFactoryMock
(
this
.
runtimeClientFactoryMock
)
;
}
disableMocks
(
)
{
disableUsbRuntimesMock
(
)
;
disableRuntimeClientFactoryMock
(
)
;
for
(
const
host
of
Object
.
keys
(
this
.
_clients
[
RUNTIMES
.
NETWORK
]
)
)
{
this
.
removeNetworkRuntime
(
host
)
;
}
}
createNetworkRuntime
(
host
runtimeInfo
)
{
const
{
addNetworkLocation
}
=
require
(
"
devtools
/
client
/
aboutdebugging
-
new
/
src
/
modules
/
network
-
locations
"
)
;
addNetworkLocation
(
host
)
;
const
mockNetworkClient
=
createClientMock
(
)
;
mockNetworkClient
.
getDeviceDescription
=
(
)
=
>
{
return
{
name
:
runtimeInfo
.
name
|
|
"
TestBrand
"
channel
:
runtimeInfo
.
channel
|
|
"
release
"
version
:
runtimeInfo
.
version
|
|
"
1
.
0
"
}
;
}
;
this
.
_clients
[
RUNTIMES
.
NETWORK
]
[
host
]
=
mockNetworkClient
;
return
mockNetworkClient
;
}
removeNetworkRuntime
(
host
)
{
const
{
removeNetworkLocation
}
=
require
(
"
devtools
/
client
/
aboutdebugging
-
new
/
src
/
modules
/
network
-
locations
"
)
;
removeNetworkLocation
(
host
)
;
delete
this
.
_clients
[
RUNTIMES
.
NETWORK
]
[
host
]
;
}
emitUSBUpdate
(
)
{
this
.
_observerMock
.
emit
(
"
runtime
-
list
-
updated
"
)
;
}
createUSBRuntime
(
id
runtimeInfo
=
{
}
)
{
this
.
_usbRuntimes
.
push
(
{
id
:
id
_socketPath
:
runtimeInfo
.
socketPath
|
|
"
test
/
path
"
deviceName
:
runtimeInfo
.
deviceName
|
|
"
test
device
name
"
shortName
:
runtimeInfo
.
shortName
|
|
"
testshort
"
}
)
;
const
mockUsbClient
=
createClientMock
(
)
;
mockUsbClient
.
getDeviceDescription
=
(
)
=
>
{
return
{
name
:
runtimeInfo
.
name
|
|
"
TestBrand
"
channel
:
runtimeInfo
.
channel
|
|
"
release
"
version
:
runtimeInfo
.
version
|
|
"
1
.
0
"
}
;
}
;
this
.
_clients
[
RUNTIMES
.
USB
]
[
id
]
=
mockUsbClient
;
return
mockUsbClient
;
}
removeUSBRuntime
(
id
)
{
this
.
_usbRuntimes
=
this
.
_usbRuntimes
.
filter
(
runtime
=
>
runtime
.
id
!
=
=
id
)
;
delete
this
.
_clients
[
RUNTIMES
.
USB
]
[
id
]
;
}
}
