"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
CHROME_URL_ROOT
+
"
helper
-
telemetry
.
js
"
this
)
;
const
NETWORK_RUNTIME
=
{
host
:
"
localhost
:
1234
"
name
:
"
Local
Network
Runtime
"
}
;
add_task
(
async
function
testNetworkRuntimeUpdates
(
)
{
const
mocks
=
new
Mocks
(
)
;
setupTelemetryTest
(
)
;
const
{
tab
document
}
=
await
openAboutDebugging
(
)
;
const
sessionId
=
getOpenEventSessionId
(
)
;
ok
(
!
isNaN
(
sessionId
)
"
Open
event
has
a
valid
session
id
"
)
;
info
(
"
Add
a
network
runtime
"
)
;
await
addNetworkRuntime
(
NETWORK_RUNTIME
mocks
document
)
;
const
networkRuntimeExtras
=
{
"
connection_type
"
:
"
network
"
"
device_name
"
:
"
"
"
runtime_name
"
:
"
"
}
;
const
connectedNetworkRuntimeExtras
=
Object
.
assign
(
{
}
networkRuntimeExtras
{
"
runtime_name
"
:
NETWORK_RUNTIME
.
name
}
)
;
checkTelemetryEvents
(
[
{
method
:
"
runtime_added
"
extras
:
networkRuntimeExtras
}
]
sessionId
)
;
await
connectToRuntime
(
NETWORK_RUNTIME
.
host
document
)
;
checkTelemetryEvents
(
[
{
method
:
"
runtime_connected
"
extras
:
connectedNetworkRuntimeExtras
}
]
sessionId
)
;
info
(
"
Remove
network
runtime
"
)
;
mocks
.
removeRuntime
(
NETWORK_RUNTIME
.
host
)
;
await
waitUntil
(
(
)
=
>
!
findSidebarItemByText
(
NETWORK_RUNTIME
.
host
document
)
)
;
checkTelemetryEvents
(
[
{
method
:
"
runtime_disconnected
"
extras
:
connectedNetworkRuntimeExtras
}
{
method
:
"
runtime_removed
"
extras
:
networkRuntimeExtras
}
]
sessionId
)
;
await
removeTab
(
tab
)
;
}
)
;
async
function
addNetworkRuntime
(
runtime
mocks
doc
)
{
mocks
.
createNetworkRuntime
(
runtime
.
host
{
name
:
runtime
.
name
}
)
;
info
(
"
Wait
for
the
Network
Runtime
to
appear
in
the
sidebar
"
)
;
await
waitUntil
(
(
)
=
>
findSidebarItemByText
(
runtime
.
host
doc
)
)
;
}
