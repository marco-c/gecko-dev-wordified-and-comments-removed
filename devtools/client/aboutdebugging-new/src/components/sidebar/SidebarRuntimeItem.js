"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
Localized
=
createFactory
(
FluentReact
.
Localized
)
;
const
SidebarItem
=
createFactory
(
require
(
"
.
/
SidebarItem
"
)
)
;
const
Actions
=
require
(
"
.
.
/
.
.
/
actions
/
index
"
)
;
class
SidebarRuntimeItem
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
id
:
PropTypes
.
string
.
isRequired
deviceName
:
PropTypes
.
string
dispatch
:
PropTypes
.
func
.
isRequired
getString
:
PropTypes
.
func
.
isRequired
icon
:
PropTypes
.
string
.
isRequired
isConnected
:
PropTypes
.
bool
.
isRequired
isSelected
:
PropTypes
.
bool
.
isRequired
name
:
PropTypes
.
string
.
isRequired
runtimeId
:
PropTypes
.
string
.
isRequired
}
;
}
renderConnectButton
(
)
{
return
Localized
(
{
id
:
"
about
-
debugging
-
sidebar
-
item
-
connect
-
button
"
}
dom
.
button
(
{
className
:
"
default
-
button
default
-
button
-
-
micro
js
-
connect
-
button
"
onClick
:
(
)
=
>
{
const
{
dispatch
runtimeId
}
=
this
.
props
;
dispatch
(
Actions
.
connectRuntime
(
runtimeId
)
)
;
}
}
"
Connect
"
)
)
;
}
renderNameWithDevice
(
name
device
)
{
return
dom
.
span
(
{
className
:
"
ellipsis
-
text
"
title
:
{
name
}
(
{
device
}
)
}
{
name
}
dom
.
br
(
{
}
)
device
)
;
}
renderName
(
name
)
{
return
dom
.
span
(
{
className
:
"
ellipsis
-
text
"
title
:
name
}
{
name
}
)
;
}
render
(
)
{
const
{
deviceName
dispatch
getString
icon
id
isConnected
isSelected
name
runtimeId
}
=
this
.
props
;
const
connectionStatus
=
isConnected
?
getString
(
"
aboutdebugging
-
sidebar
-
runtime
-
connection
-
status
-
connected
"
)
:
getString
(
"
aboutdebugging
-
sidebar
-
runtime
-
connection
-
status
-
disconnected
"
)
;
return
SidebarItem
(
{
isSelected
selectable
:
isConnected
onSelect
:
(
)
=
>
{
dispatch
(
Actions
.
selectPage
(
id
runtimeId
)
)
;
}
}
dom
.
div
(
{
className
:
"
sidebar
-
runtime
-
item__container
"
}
dom
.
img
(
{
className
:
"
sidebar
-
runtime
-
item__icon
"
src
:
icon
alt
:
connectionStatus
title
:
connectionStatus
}
)
deviceName
?
this
.
renderNameWithDevice
(
name
deviceName
)
:
this
.
renderName
(
name
)
!
isConnected
?
this
.
renderConnectButton
(
)
:
null
)
)
;
}
}
module
.
exports
=
FluentReact
.
withLocalization
(
SidebarRuntimeItem
)
;
