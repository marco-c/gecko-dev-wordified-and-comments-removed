"
use
strict
"
;
const
{
createFactory
PureComponent
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
dom
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
{
getCurrentRuntimeDetails
}
=
require
(
"
.
.
/
.
.
/
modules
/
runtimes
-
state
-
helper
"
)
;
const
InspectAction
=
createFactory
(
require
(
"
.
/
InspectAction
"
)
)
;
const
Actions
=
require
(
"
.
.
/
.
.
/
actions
/
index
"
)
;
const
Types
=
require
(
"
.
.
/
.
.
/
types
/
index
"
)
;
class
ServiceWorkerAction
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
dispatch
:
PropTypes
.
func
.
isRequired
getString
:
PropTypes
.
func
.
isRequired
runtimeDetails
:
Types
.
runtimeDetails
.
isRequired
target
:
Types
.
debugTarget
.
isRequired
}
;
}
push
(
)
{
const
{
dispatch
target
}
=
this
.
props
;
dispatch
(
Actions
.
pushServiceWorker
(
target
.
id
)
)
;
}
start
(
)
{
const
{
dispatch
target
}
=
this
.
props
;
dispatch
(
Actions
.
startServiceWorker
(
target
.
details
.
registrationActor
)
)
;
}
_renderAction
(
)
{
const
{
dispatch
runtimeDetails
target
}
=
this
.
props
;
const
{
isActive
isRunning
}
=
target
.
details
;
const
{
isMultiE10s
}
=
runtimeDetails
;
if
(
!
isRunning
)
{
const
startLabel
=
this
.
props
.
getString
(
"
about
-
debugging
-
worker
-
action
-
start
"
)
;
return
this
.
_renderButton
(
{
className
:
"
default
-
button
"
disabled
:
isMultiE10s
label
:
startLabel
onClick
:
this
.
start
.
bind
(
this
)
}
)
;
}
if
(
!
isActive
)
{
return
InspectAction
(
{
disabled
:
isMultiE10s
dispatch
target
}
)
;
}
const
pushLabel
=
this
.
props
.
getString
(
"
about
-
debugging
-
worker
-
action
-
push
"
)
;
return
[
this
.
_renderButton
(
{
className
:
"
default
-
button
js
-
push
-
button
"
disabled
:
isMultiE10s
label
:
pushLabel
onClick
:
this
.
push
.
bind
(
this
)
}
)
InspectAction
(
{
disabled
:
isMultiE10s
dispatch
target
}
)
]
;
}
_renderButton
(
{
className
disabled
label
onClick
}
)
{
return
dom
.
button
(
{
className
disabled
onClick
:
e
=
>
onClick
(
)
}
label
)
;
}
render
(
)
{
return
dom
.
div
(
{
className
:
"
toolbar
"
}
this
.
_renderAction
(
)
)
;
}
}
const
mapStateToProps
=
state
=
>
{
return
{
runtimeDetails
:
getCurrentRuntimeDetails
(
state
.
runtimes
)
}
;
}
;
module
.
exports
=
FluentReact
.
withLocalization
(
connect
(
mapStateToProps
)
(
ServiceWorkerAction
)
)
;
