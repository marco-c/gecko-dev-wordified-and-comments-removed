"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
applyMiddleware
createStore
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
thunk
}
=
require
(
"
devtools
/
client
/
shared
/
redux
/
middleware
/
thunk
.
js
"
)
;
const
rootReducer
=
require
(
"
.
/
reducers
/
index
"
)
;
const
{
DebugTargetsState
}
=
require
(
"
.
/
reducers
/
debug
-
targets
-
state
"
)
;
const
{
RuntimesState
}
=
require
(
"
.
/
reducers
/
runtimes
-
state
"
)
;
const
{
UiState
}
=
require
(
"
.
/
reducers
/
ui
-
state
"
)
;
const
debugTargetListenerMiddleware
=
require
(
"
.
/
middleware
/
debug
-
target
-
listener
"
)
;
const
extensionComponentDataMiddleware
=
require
(
"
.
/
middleware
/
extension
-
component
-
data
"
)
;
const
tabComponentDataMiddleware
=
require
(
"
.
/
middleware
/
tab
-
component
-
data
"
)
;
const
workerComponentDataMiddleware
=
require
(
"
.
/
middleware
/
worker
-
component
-
data
"
)
;
const
{
getDebugTargetCollapsibilities
}
=
require
(
"
.
/
modules
/
debug
-
target
-
collapsibilities
"
)
;
const
{
getNetworkLocations
}
=
require
(
"
.
/
modules
/
network
-
locations
"
)
;
const
NETWORK_ENABLED_PREF
=
"
devtools
.
aboutdebugging
.
network
"
;
function
configureStore
(
)
{
const
initialState
=
{
debugTargets
:
new
DebugTargetsState
(
)
runtimes
:
new
RuntimesState
(
)
ui
:
getUiState
(
)
}
;
const
middleware
=
applyMiddleware
(
thunk
debugTargetListenerMiddleware
extensionComponentDataMiddleware
tabComponentDataMiddleware
workerComponentDataMiddleware
)
;
return
createStore
(
rootReducer
initialState
middleware
)
;
}
function
getUiState
(
)
{
const
collapsibilities
=
getDebugTargetCollapsibilities
(
)
;
const
locations
=
getNetworkLocations
(
)
;
const
networkEnabled
=
Services
.
prefs
.
getBoolPref
(
NETWORK_ENABLED_PREF
false
)
;
return
new
UiState
(
locations
collapsibilities
networkEnabled
)
;
}
exports
.
configureStore
=
configureStore
;
