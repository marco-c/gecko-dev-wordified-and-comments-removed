"
use
strict
"
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
Actions
=
require
(
"
.
/
index
"
)
;
const
{
getCurrentRuntime
findRuntimeById
}
=
require
(
"
.
.
/
modules
/
runtimes
-
state
-
helper
"
)
;
const
{
isSupportedDebugTarget
}
=
require
(
"
.
.
/
modules
/
debug
-
target
-
support
"
)
;
const
{
createClientForRuntime
}
=
require
(
"
.
.
/
modules
/
runtime
-
client
-
factory
"
)
;
const
{
CONNECT_RUNTIME_FAILURE
CONNECT_RUNTIME_START
CONNECT_RUNTIME_SUCCESS
DEBUG_TARGETS
DISCONNECT_RUNTIME_FAILURE
DISCONNECT_RUNTIME_START
DISCONNECT_RUNTIME_SUCCESS
RUNTIME_PREFERENCE
RUNTIMES
UNWATCH_RUNTIME_FAILURE
UNWATCH_RUNTIME_START
UNWATCH_RUNTIME_SUCCESS
UPDATE_CONNECTION_PROMPT_SETTING_FAILURE
UPDATE_CONNECTION_PROMPT_SETTING_START
UPDATE_CONNECTION_PROMPT_SETTING_SUCCESS
USB_RUNTIMES_UPDATED
WATCH_RUNTIME_FAILURE
WATCH_RUNTIME_START
WATCH_RUNTIME_SUCCESS
}
=
require
(
"
.
.
/
constants
"
)
;
async
function
getRuntimeInfo
(
runtime
client
)
{
const
{
extra
type
}
=
runtime
;
const
{
name
channel
version
}
=
await
client
.
getDeviceDescription
(
)
;
const
icon
=
(
channel
=
=
=
"
release
"
|
|
channel
=
=
=
"
beta
"
|
|
channel
=
=
=
"
aurora
"
)
?
chrome
:
/
/
devtools
/
skin
/
images
/
aboutdebugging
-
firefox
-
{
channel
}
.
svg
:
"
chrome
:
/
/
devtools
/
skin
/
images
/
aboutdebugging
-
firefox
-
nightly
.
svg
"
;
return
{
icon
deviceName
:
extra
?
extra
.
deviceName
:
undefined
name
type
version
}
;
}
function
onUSBDebuggerClientClosed
(
)
{
window
.
AboutDebugging
.
store
.
dispatch
(
Actions
.
scanUSBRuntimes
(
)
)
;
}
function
connectRuntime
(
id
)
{
return
async
(
dispatch
getState
)
=
>
{
dispatch
(
{
type
:
CONNECT_RUNTIME_START
}
)
;
try
{
const
runtime
=
findRuntimeById
(
id
getState
(
)
.
runtimes
)
;
const
{
client
transportDetails
}
=
await
createClientForRuntime
(
runtime
)
;
const
info
=
await
getRuntimeInfo
(
runtime
client
)
;
const
promptPrefName
=
RUNTIME_PREFERENCE
.
CONNECTION_PROMPT
;
const
connectionPromptEnabled
=
await
client
.
getPreference
(
promptPrefName
)
;
const
runtimeDetails
=
{
connectionPromptEnabled
client
info
transportDetails
}
;
if
(
runtime
.
type
=
=
=
RUNTIMES
.
USB
)
{
client
.
addOneTimeListener
(
"
closed
"
onUSBDebuggerClientClosed
)
;
}
dispatch
(
{
type
:
CONNECT_RUNTIME_SUCCESS
runtime
:
{
id
runtimeDetails
type
:
runtime
.
type
}
}
)
;
}
catch
(
e
)
{
dispatch
(
{
type
:
CONNECT_RUNTIME_FAILURE
error
:
e
}
)
;
}
}
;
}
function
disconnectRuntime
(
id
)
{
return
async
(
dispatch
getState
)
=
>
{
dispatch
(
{
type
:
DISCONNECT_RUNTIME_START
}
)
;
try
{
const
runtime
=
findRuntimeById
(
id
getState
(
)
.
runtimes
)
;
const
client
=
runtime
.
runtimeDetails
.
client
;
if
(
runtime
.
type
=
=
=
RUNTIMES
.
USB
)
{
client
.
removeListener
(
"
closed
"
onUSBDebuggerClientClosed
)
;
}
await
client
.
close
(
)
;
if
(
runtime
.
type
=
=
=
RUNTIMES
.
THIS_FIREFOX
)
{
DebuggerServer
.
destroy
(
)
;
}
dispatch
(
{
type
:
DISCONNECT_RUNTIME_SUCCESS
runtime
:
{
id
type
:
runtime
.
type
}
}
)
;
}
catch
(
e
)
{
dispatch
(
{
type
:
DISCONNECT_RUNTIME_FAILURE
error
:
e
}
)
;
}
}
;
}
function
updateConnectionPromptSetting
(
connectionPromptEnabled
)
{
return
async
(
dispatch
getState
)
=
>
{
dispatch
(
{
type
:
UPDATE_CONNECTION_PROMPT_SETTING_START
}
)
;
try
{
const
runtime
=
getCurrentRuntime
(
getState
(
)
.
runtimes
)
;
const
client
=
runtime
.
runtimeDetails
.
client
;
const
promptPrefName
=
RUNTIME_PREFERENCE
.
CONNECTION_PROMPT
;
await
client
.
setPreference
(
promptPrefName
connectionPromptEnabled
)
;
connectionPromptEnabled
=
await
client
.
getPreference
(
promptPrefName
)
;
dispatch
(
{
type
:
UPDATE_CONNECTION_PROMPT_SETTING_SUCCESS
runtime
connectionPromptEnabled
}
)
;
}
catch
(
e
)
{
dispatch
(
{
type
:
UPDATE_CONNECTION_PROMPT_SETTING_FAILURE
error
:
e
}
)
;
}
}
;
}
function
watchRuntime
(
id
)
{
return
async
(
dispatch
getState
)
=
>
{
dispatch
(
{
type
:
WATCH_RUNTIME_START
}
)
;
try
{
if
(
id
=
=
=
RUNTIMES
.
THIS_FIREFOX
)
{
await
dispatch
(
connectRuntime
(
RUNTIMES
.
THIS_FIREFOX
)
)
;
}
const
runtime
=
findRuntimeById
(
id
getState
(
)
.
runtimes
)
;
await
dispatch
(
{
type
:
WATCH_RUNTIME_SUCCESS
runtime
}
)
;
if
(
isSupportedDebugTarget
(
runtime
.
type
DEBUG_TARGETS
.
EXTENSION
)
)
{
dispatch
(
Actions
.
requestExtensions
(
)
)
;
}
if
(
isSupportedDebugTarget
(
runtime
.
type
DEBUG_TARGETS
.
TAB
)
)
{
dispatch
(
Actions
.
requestTabs
(
)
)
;
}
if
(
isSupportedDebugTarget
(
runtime
.
type
DEBUG_TARGETS
.
WORKER
)
)
{
dispatch
(
Actions
.
requestWorkers
(
)
)
;
}
}
catch
(
e
)
{
dispatch
(
{
type
:
WATCH_RUNTIME_FAILURE
error
:
e
}
)
;
}
}
;
}
function
unwatchRuntime
(
id
)
{
return
async
(
dispatch
getState
)
=
>
{
const
runtime
=
findRuntimeById
(
id
getState
(
)
.
runtimes
)
;
dispatch
(
{
type
:
UNWATCH_RUNTIME_START
runtime
}
)
;
try
{
if
(
id
=
=
=
RUNTIMES
.
THIS_FIREFOX
)
{
await
dispatch
(
disconnectRuntime
(
RUNTIMES
.
THIS_FIREFOX
)
)
;
}
dispatch
(
{
type
:
UNWATCH_RUNTIME_SUCCESS
}
)
;
}
catch
(
e
)
{
dispatch
(
{
type
:
UNWATCH_RUNTIME_FAILURE
error
:
e
}
)
;
}
}
;
}
function
updateUSBRuntimes
(
runtimes
)
{
return
async
(
dispatch
getState
)
=
>
{
const
currentRuntime
=
getCurrentRuntime
(
getState
(
)
.
runtimes
)
;
if
(
currentRuntime
&
&
currentRuntime
.
type
=
=
=
RUNTIMES
.
USB
&
&
!
runtimes
.
find
(
runtime
=
>
currentRuntime
.
id
=
=
=
runtime
.
id
)
)
{
await
dispatch
(
Actions
.
selectPage
(
RUNTIMES
.
THIS_FIREFOX
RUNTIMES
.
THIS_FIREFOX
)
)
;
}
const
invalidRuntimes
=
getState
(
)
.
runtimes
.
usbRuntimes
.
filter
(
r
=
>
!
runtimes
.
includes
(
r
)
)
;
for
(
const
invalidRuntime
of
invalidRuntimes
)
{
await
dispatch
(
disconnectRuntime
(
invalidRuntime
.
id
)
)
;
}
dispatch
(
{
type
:
USB_RUNTIMES_UPDATED
runtimes
}
)
;
}
;
}
module
.
exports
=
{
connectRuntime
disconnectRuntime
unwatchRuntime
updateConnectionPromptSetting
updateUSBRuntimes
watchRuntime
}
;
