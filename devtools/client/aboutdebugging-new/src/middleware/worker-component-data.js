"
use
strict
"
;
const
{
DEBUG_TARGETS
REQUEST_WORKERS_SUCCESS
SERVICE_WORKER_FETCH_STATES
SERVICE_WORKER_STATUSES
}
=
require
(
"
.
.
/
constants
"
)
;
const
workerComponentDataMiddleware
=
store
=
>
next
=
>
action
=
>
{
switch
(
action
.
type
)
{
case
REQUEST_WORKERS_SUCCESS
:
{
action
.
otherWorkers
=
toComponentData
(
action
.
otherWorkers
)
;
action
.
serviceWorkers
=
toComponentData
(
action
.
serviceWorkers
true
)
;
action
.
sharedWorkers
=
toComponentData
(
action
.
sharedWorkers
)
;
break
;
}
}
return
next
(
action
)
;
}
;
function
getServiceWorkerStatus
(
isActive
isRunning
)
{
if
(
isActive
&
&
isRunning
)
{
return
SERVICE_WORKER_STATUSES
.
RUNNING
;
}
else
if
(
isActive
)
{
return
SERVICE_WORKER_STATUSES
.
STOPPED
;
}
return
SERVICE_WORKER_STATUSES
.
REGISTERING
;
}
function
toComponentData
(
workers
isServiceWorker
)
{
return
workers
.
map
(
worker
=
>
{
const
type
=
DEBUG_TARGETS
.
WORKER
;
const
id
=
worker
.
workerTargetActor
;
const
icon
=
"
chrome
:
/
/
devtools
/
skin
/
images
/
debugging
-
workers
.
svg
"
;
let
{
fetch
name
registrationActor
scope
}
=
worker
;
let
isActive
=
false
;
let
isRunning
=
false
;
let
status
=
null
;
if
(
isServiceWorker
)
{
fetch
=
fetch
?
SERVICE_WORKER_FETCH_STATES
.
LISTENING
:
SERVICE_WORKER_FETCH_STATES
.
NOT_LISTENING
;
isActive
=
worker
.
active
;
isRunning
=
!
!
worker
.
workerTargetActor
;
status
=
getServiceWorkerStatus
(
isActive
isRunning
)
;
}
return
{
name
icon
id
type
details
:
{
fetch
isActive
isRunning
registrationActor
scope
status
}
}
;
}
)
;
}
module
.
exports
=
workerComponentDataMiddleware
;
