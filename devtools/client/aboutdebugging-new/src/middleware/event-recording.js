"
use
strict
"
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
loader
.
lazyGetter
(
this
"
telemetry
"
(
)
=
>
new
Telemetry
(
)
)
;
loader
.
lazyGetter
(
this
"
sessionId
"
(
)
=
>
parseInt
(
telemetry
.
msSinceProcessStart
(
)
10
)
)
;
const
{
SELECT_PAGE_SUCCESS
TELEMETRY_RECORD
}
=
require
(
"
.
.
/
constants
"
)
;
function
recordEvent
(
method
details
)
{
const
eventDetails
=
Object
.
assign
(
{
}
details
{
"
session_id
"
:
sessionId
}
)
;
telemetry
.
recordEvent
(
method
"
aboutdebugging
"
null
eventDetails
)
;
}
function
eventRecordingMiddleware
(
)
{
return
next
=
>
action
=
>
{
switch
(
action
.
type
)
{
case
SELECT_PAGE_SUCCESS
:
recordEvent
(
"
select_page
"
{
"
page_type
"
:
action
.
page
}
)
;
break
;
case
TELEMETRY_RECORD
:
const
{
method
details
}
=
action
;
if
(
method
)
{
recordEvent
(
method
details
)
;
}
else
{
console
.
error
(
[
RECORD
EVENT
FAILED
]
{
action
.
type
}
:
no
"
method
"
property
)
;
}
break
;
}
return
next
(
action
)
;
}
;
}
module
.
exports
=
eventRecordingMiddleware
;
