"
use
strict
"
;
const
{
DEBUG_TARGET_PANE
PREFERENCES
RUNTIMES
}
=
require
(
"
.
.
/
constants
"
)
;
const
Services
=
require
(
"
Services
"
)
;
function
isProcessDebuggingSupported
(
)
{
return
Services
.
prefs
.
getBoolPref
(
PREFERENCES
.
PROCESS_DEBUGGING_ENABLED
false
)
;
}
function
isLocalTabDebuggingSupported
(
)
{
return
Services
.
prefs
.
getBoolPref
(
PREFERENCES
.
LOCAL_TAB_DEBUGGING_ENABLED
false
)
;
}
const
ALL_DEBUG_TARGET_PANES
=
[
DEBUG_TARGET_PANE
.
INSTALLED_EXTENSION
.
.
.
(
isProcessDebuggingSupported
(
)
?
[
DEBUG_TARGET_PANE
.
PROCESSES
]
:
[
]
)
DEBUG_TARGET_PANE
.
OTHER_WORKER
DEBUG_TARGET_PANE
.
SERVICE_WORKER
DEBUG_TARGET_PANE
.
SHARED_WORKER
DEBUG_TARGET_PANE
.
TAB
DEBUG_TARGET_PANE
.
TEMPORARY_EXTENSION
]
;
const
REMOTE_DEBUG_TARGET_PANES
=
ALL_DEBUG_TARGET_PANES
.
filter
(
p
=
>
p
!
=
=
DEBUG_TARGET_PANE
.
TEMPORARY_EXTENSION
)
;
const
THIS_FIREFOX_DEBUG_TARGET_PANES
=
ALL_DEBUG_TARGET_PANES
.
filter
(
p
=
>
p
!
=
=
DEBUG_TARGET_PANE
.
PROCESSES
)
.
filter
(
p
=
>
p
!
=
=
DEBUG_TARGET_PANE
.
TAB
|
|
isLocalTabDebuggingSupported
(
)
)
;
const
SUPPORTED_TARGET_PANE_BY_RUNTIME
=
{
[
RUNTIMES
.
THIS_FIREFOX
]
:
THIS_FIREFOX_DEBUG_TARGET_PANES
[
RUNTIMES
.
USB
]
:
REMOTE_DEBUG_TARGET_PANES
[
RUNTIMES
.
NETWORK
]
:
REMOTE_DEBUG_TARGET_PANES
}
;
function
isExtensionDebugSettingNeeded
(
runtimeType
)
{
return
runtimeType
=
=
=
RUNTIMES
.
THIS_FIREFOX
;
}
exports
.
isExtensionDebugSettingNeeded
=
isExtensionDebugSettingNeeded
;
function
isSupportedDebugTargetPane
(
runtimeType
debugTargetPaneKey
)
{
return
SUPPORTED_TARGET_PANE_BY_RUNTIME
[
runtimeType
]
.
includes
(
debugTargetPaneKey
)
;
}
exports
.
isSupportedDebugTargetPane
=
isSupportedDebugTargetPane
;
