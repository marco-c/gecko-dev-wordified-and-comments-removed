"
use
strict
"
;
const
{
RUNTIME_PREFERENCE
}
=
require
(
"
.
.
/
constants
"
)
;
const
PREF_TYPES
=
{
BOOL
:
"
BOOL
"
}
;
const
PREF_TO_TYPE
=
{
[
RUNTIME_PREFERENCE
.
CONNECTION_PROMPT
]
:
PREF_TYPES
.
BOOL
[
RUNTIME_PREFERENCE
.
PERMANENT_PRIVATE_BROWSING
]
:
PREF_TYPES
.
BOOL
[
RUNTIME_PREFERENCE
.
SERVICE_WORKERS_ENABLED
]
:
PREF_TYPES
.
BOOL
}
;
const
MAIN_ROOT_EVENTS
=
[
"
addonListChanged
"
"
processListChanged
"
"
serviceWorkerRegistrationListChanged
"
"
tabListChanged
"
"
workerListChanged
"
]
;
class
ClientWrapper
{
constructor
(
client
)
{
this
.
client
=
client
;
this
.
contentProcessFronts
=
[
]
;
this
.
serviceWorkerRegistrationFronts
=
[
]
;
}
addOneTimeListener
(
evt
listener
)
{
if
(
MAIN_ROOT_EVENTS
.
includes
(
evt
)
)
{
this
.
client
.
mainRoot
.
once
(
evt
listener
)
;
}
else
{
this
.
client
.
addOneTimeListener
(
evt
listener
)
;
}
}
addListener
(
evt
listener
)
{
if
(
MAIN_ROOT_EVENTS
.
includes
(
evt
)
)
{
this
.
client
.
mainRoot
.
on
(
evt
listener
)
;
}
else
{
this
.
client
.
addListener
(
evt
listener
)
;
}
}
removeListener
(
evt
listener
)
{
if
(
MAIN_ROOT_EVENTS
.
includes
(
evt
)
)
{
this
.
client
.
mainRoot
.
off
(
evt
listener
)
;
}
else
{
this
.
client
.
removeListener
(
evt
listener
)
;
}
}
async
getFront
(
typeName
)
{
return
this
.
client
.
mainRoot
.
getFront
(
typeName
)
;
}
onFront
(
typeName
listener
)
{
this
.
client
.
mainRoot
.
onFront
(
typeName
listener
)
;
}
async
getDeviceDescription
(
)
{
const
deviceFront
=
await
this
.
getFront
(
"
device
"
)
;
const
{
brandName
channel
deviceName
isMultiE10s
version
}
=
await
deviceFront
.
getDescription
(
)
;
return
{
channel
deviceName
isMultiE10s
name
:
brandName
version
}
;
}
async
setPreference
(
prefName
value
)
{
const
prefType
=
PREF_TO_TYPE
[
prefName
]
;
const
preferenceFront
=
await
this
.
client
.
mainRoot
.
getFront
(
"
preference
"
)
;
switch
(
prefType
)
{
case
PREF_TYPES
.
BOOL
:
return
preferenceFront
.
setBoolPref
(
prefName
value
)
;
default
:
throw
new
Error
(
"
Unsupported
preference
"
+
prefName
)
;
}
}
async
getPreference
(
prefName
defaultValue
)
{
if
(
typeof
defaultValue
=
=
=
"
undefined
"
)
{
throw
new
Error
(
"
Default
value
is
mandatory
for
getPreference
the
actor
will
"
+
"
throw
if
the
preference
is
not
set
on
the
target
runtime
"
)
;
}
const
prefType
=
PREF_TO_TYPE
[
prefName
]
;
const
preferenceFront
=
await
this
.
client
.
mainRoot
.
getFront
(
"
preference
"
)
;
switch
(
prefType
)
{
case
PREF_TYPES
.
BOOL
:
let
prefValue
;
try
{
prefValue
=
await
preferenceFront
.
getBoolPref
(
prefName
)
;
}
catch
(
e
)
{
prefValue
=
defaultValue
;
}
return
prefValue
;
default
:
throw
new
Error
(
"
Unsupported
preference
:
"
+
prefName
)
;
}
}
async
listTabs
(
options
)
{
return
this
.
client
.
mainRoot
.
listTabs
(
options
)
;
}
async
listAddons
(
options
)
{
return
this
.
client
.
mainRoot
.
listAddons
(
options
)
;
}
async
getAddon
(
{
id
}
)
{
return
this
.
client
.
mainRoot
.
getAddon
(
{
id
}
)
;
}
async
getServiceWorkerFront
(
{
id
}
)
{
const
{
serviceWorkers
}
=
await
this
.
listWorkers
(
)
;
const
workerFronts
=
serviceWorkers
.
map
(
sw
=
>
sw
.
workerTargetFront
)
;
return
workerFronts
.
find
(
front
=
>
front
&
&
front
.
actorID
=
=
=
id
)
;
}
async
listWorkers
(
)
{
const
{
other
service
shared
}
=
await
this
.
client
.
mainRoot
.
listAllWorkers
(
)
;
return
{
otherWorkers
:
other
serviceWorkers
:
service
sharedWorkers
:
shared
}
;
}
async
close
(
)
{
return
this
.
client
.
close
(
)
;
}
isClosed
(
)
{
return
this
.
client
.
_closed
;
}
getPerformancePanelUrl
(
)
{
return
"
chrome
:
/
/
devtools
/
content
/
performance
-
new
/
index
.
xhtml
"
;
}
async
loadPerformanceProfiler
(
win
)
{
const
preferenceFront
=
await
this
.
getFront
(
"
preference
"
)
;
const
perfFront
=
await
this
.
getFront
(
"
perf
"
)
;
const
perfActorVersion
=
this
.
client
.
mainRoot
.
traits
.
perfActorVersion
;
win
.
gInit
(
perfFront
preferenceFront
perfActorVersion
)
;
}
}
exports
.
ClientWrapper
=
ClientWrapper
;
