"
use
strict
"
;
const
{
RUNTIME_PREFERENCE
}
=
require
(
"
.
.
/
constants
"
)
;
const
PREF_TYPES
=
{
BOOL
:
"
BOOL
"
}
;
const
PREF_TO_TYPE
=
{
[
RUNTIME_PREFERENCE
.
CONNECTION_PROMPT
]
:
PREF_TYPES
.
BOOL
}
;
const
MAIN_ROOT_EVENTS
=
[
"
processListChanged
"
"
serviceWorkerRegistrationListChanged
"
"
tabListChanged
"
"
workerListChanged
"
]
;
class
ClientWrapper
{
constructor
(
client
)
{
this
.
client
=
client
;
}
addOneTimeListener
(
evt
listener
)
{
if
(
MAIN_ROOT_EVENTS
.
includes
(
evt
)
)
{
this
.
client
.
mainRoot
.
once
(
evt
listener
)
;
}
else
{
this
.
client
.
addOneTimeListener
(
evt
listener
)
;
}
}
addListener
(
evt
listener
)
{
if
(
MAIN_ROOT_EVENTS
.
includes
(
evt
)
)
{
this
.
client
.
mainRoot
.
on
(
evt
listener
)
;
}
else
{
this
.
client
.
addListener
(
evt
listener
)
;
}
}
removeListener
(
evt
listener
)
{
if
(
MAIN_ROOT_EVENTS
.
includes
(
evt
)
)
{
this
.
client
.
mainRoot
.
off
(
evt
listener
)
;
}
else
{
this
.
client
.
removeListener
(
evt
listener
)
;
}
}
async
getDeviceDescription
(
)
{
const
deviceFront
=
await
this
.
client
.
mainRoot
.
getFront
(
"
device
"
)
;
const
{
brandName
channel
version
}
=
await
deviceFront
.
getDescription
(
)
;
return
{
name
:
brandName
channel
version
}
;
}
async
setPreference
(
prefName
value
)
{
const
prefType
=
PREF_TO_TYPE
[
prefName
]
;
const
preferenceFront
=
await
this
.
client
.
mainRoot
.
getFront
(
"
preference
"
)
;
switch
(
prefType
)
{
case
PREF_TYPES
.
BOOL
:
return
preferenceFront
.
setBoolPref
(
prefName
value
)
;
default
:
throw
new
Error
(
"
Unsupported
preference
"
+
prefName
)
;
}
}
async
getPreference
(
prefName
)
{
const
prefType
=
PREF_TO_TYPE
[
prefName
]
;
const
preferenceFront
=
await
this
.
client
.
mainRoot
.
getFront
(
"
preference
"
)
;
switch
(
prefType
)
{
case
PREF_TYPES
.
BOOL
:
return
preferenceFront
.
getBoolPref
(
prefName
)
;
default
:
throw
new
Error
(
"
Unsupported
preference
:
"
+
prefName
)
;
}
}
async
listTabs
(
options
)
{
return
this
.
client
.
listTabs
(
options
)
;
}
async
listAddons
(
)
{
return
this
.
client
.
listAddons
(
)
;
}
async
listWorkers
(
)
{
const
{
other
service
shared
}
=
await
this
.
client
.
mainRoot
.
listAllWorkers
(
)
;
return
{
otherWorkers
:
other
serviceWorkers
:
service
sharedWorkers
:
shared
}
;
}
async
request
(
options
)
{
return
this
.
client
.
request
(
options
)
;
}
async
close
(
)
{
return
this
.
client
.
close
(
)
;
}
}
exports
.
ClientWrapper
=
ClientWrapper
;
