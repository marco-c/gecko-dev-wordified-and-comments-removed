"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
bindActionCreators
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
render
unmountComponentAtNode
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
Provider
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
.
Provider
)
;
const
FluentReact
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
"
)
;
const
LocalizationProvider
=
createFactory
(
FluentReact
.
LocalizationProvider
)
;
const
actions
=
require
(
"
.
/
src
/
actions
/
index
"
)
;
const
{
configureStore
}
=
require
(
"
.
/
src
/
create
-
store
"
)
;
const
{
setDebugTargetCollapsibilities
}
=
require
(
"
.
/
src
/
modules
/
debug
-
target
-
collapsibilities
"
)
;
const
{
l10n
}
=
require
(
"
.
/
src
/
modules
/
l10n
"
)
;
const
{
addNetworkLocationsObserver
getNetworkLocations
removeNetworkLocationsObserver
}
=
require
(
"
.
/
src
/
modules
/
network
-
locations
"
)
;
const
{
addUSBRuntimesObserver
getUSBRuntimes
removeUSBRuntimesObserver
}
=
require
(
"
.
/
src
/
modules
/
usb
-
runtimes
"
)
;
loader
.
lazyRequireGetter
(
this
"
adb
"
"
devtools
/
shared
/
adb
/
adb
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
adbAddon
"
"
devtools
/
shared
/
adb
/
adb
-
addon
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
adbProcess
"
"
devtools
/
shared
/
adb
/
adb
-
process
"
true
)
;
const
Router
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
router
-
dom
"
)
.
HashRouter
)
;
const
App
=
createFactory
(
require
(
"
.
/
src
/
components
/
App
"
)
)
;
const
AboutDebugging
=
{
async
init
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
enabled
"
true
)
)
{
window
.
location
=
"
about
:
devtools
?
reason
=
AboutDebugging
"
;
return
;
}
this
.
onAdbAddonUpdated
=
this
.
onAdbAddonUpdated
.
bind
(
this
)
;
this
.
onAdbProcessReady
=
this
.
onAdbProcessReady
.
bind
(
this
)
;
this
.
onNetworkLocationsUpdated
=
this
.
onNetworkLocationsUpdated
.
bind
(
this
)
;
this
.
onUSBRuntimesUpdated
=
this
.
onUSBRuntimesUpdated
.
bind
(
this
)
;
this
.
store
=
configureStore
(
)
;
this
.
actions
=
bindActionCreators
(
actions
this
.
store
.
dispatch
)
;
const
width
=
this
.
getRoundedViewportWidth
(
)
;
this
.
actions
.
recordTelemetryEvent
(
"
open_adbg
"
{
width
}
)
;
await
l10n
.
init
(
)
;
this
.
actions
.
createThisFirefoxRuntime
(
)
;
addNetworkLocationsObserver
(
this
.
onNetworkLocationsUpdated
)
;
await
this
.
onNetworkLocationsUpdated
(
)
;
const
onAdbRuntimesReady
=
adb
.
once
(
"
runtime
-
list
-
ready
"
)
;
addUSBRuntimesObserver
(
this
.
onUSBRuntimesUpdated
)
;
await
onAdbRuntimesReady
;
await
this
.
onUSBRuntimesUpdated
(
)
;
render
(
Provider
(
{
store
:
this
.
store
}
LocalizationProvider
(
{
messages
:
l10n
.
getBundles
(
)
}
Router
(
{
}
App
(
{
}
)
)
)
)
this
.
mount
)
;
adbAddon
.
on
(
"
update
"
this
.
onAdbAddonUpdated
)
;
this
.
onAdbAddonUpdated
(
)
;
adbProcess
.
on
(
"
adb
-
ready
"
this
.
onAdbProcessReady
)
;
this
.
onAdbProcessReady
(
)
;
await
adbAddon
.
uninstallUnsupportedExtensions
(
)
;
}
onAdbAddonUpdated
(
)
{
this
.
actions
.
updateAdbAddonStatus
(
adbAddon
.
status
)
;
}
onAdbProcessReady
(
)
{
this
.
actions
.
updateAdbReady
(
adbProcess
.
ready
)
;
}
onNetworkLocationsUpdated
(
)
{
return
this
.
actions
.
updateNetworkLocations
(
getNetworkLocations
(
)
)
;
}
async
onUSBRuntimesUpdated
(
)
{
const
runtimes
=
await
getUSBRuntimes
(
)
;
return
this
.
actions
.
updateUSBRuntimes
(
runtimes
)
;
}
async
destroy
(
)
{
const
width
=
this
.
getRoundedViewportWidth
(
)
;
this
.
actions
.
recordTelemetryEvent
(
"
close_adbg
"
{
width
}
)
;
const
state
=
this
.
store
.
getState
(
)
;
const
currentRuntimeId
=
state
.
runtimes
.
selectedRuntimeId
;
if
(
currentRuntimeId
)
{
await
this
.
actions
.
unwatchRuntime
(
currentRuntimeId
)
;
}
this
.
actions
.
removeRuntimeListeners
(
)
;
removeNetworkLocationsObserver
(
this
.
onNetworkLocationsUpdated
)
;
removeUSBRuntimesObserver
(
this
.
onUSBRuntimesUpdated
)
;
adbAddon
.
off
(
"
update
"
this
.
onAdbAddonUpdated
)
;
adbProcess
.
off
(
"
adb
-
ready
"
this
.
onAdbProcessReady
)
;
setDebugTargetCollapsibilities
(
state
.
ui
.
debugTargetCollapsibilities
)
;
unmountComponentAtNode
(
this
.
mount
)
;
}
get
mount
(
)
{
return
document
.
getElementById
(
"
mount
"
)
;
}
getRoundedViewportWidth
(
)
{
return
Math
.
ceil
(
window
.
outerWidth
/
50
)
*
50
;
}
}
;
window
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
AboutDebugging
.
init
(
)
;
}
{
once
:
true
}
)
;
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
AboutDebugging
.
destroy
(
)
;
}
{
once
:
true
}
)
;
window
.
AboutDebugging
=
AboutDebugging
;
