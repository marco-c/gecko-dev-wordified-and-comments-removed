"
use
strict
"
;
const
{
BrowserLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
shared
/
browser
-
loader
.
js
"
{
}
)
;
const
{
require
}
=
BrowserLoader
(
{
baseURI
:
"
resource
:
/
/
devtools
/
client
/
aboutdebugging
-
new
/
"
window
}
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
bindActionCreators
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
redux
"
)
;
const
{
createFactory
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
render
unmountComponentAtNode
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
)
;
const
Provider
=
createFactory
(
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
.
Provider
)
;
const
{
L10nRegistry
FileSource
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
L10nRegistry
.
jsm
"
)
;
const
actions
=
require
(
"
.
/
src
/
actions
/
index
"
)
;
const
{
configureStore
}
=
require
(
"
.
/
src
/
create
-
store
"
)
;
const
{
setDebugTargetCollapsibilities
}
=
require
(
"
.
/
src
/
modules
/
debug
-
target
-
collapsibilities
"
)
;
const
{
addNetworkLocationsObserver
getNetworkLocations
removeNetworkLocationsObserver
}
=
require
(
"
.
/
src
/
modules
/
network
-
locations
"
)
;
const
App
=
createFactory
(
require
(
"
.
/
src
/
components
/
App
"
)
)
;
const
{
PAGES
}
=
require
(
"
.
/
src
/
constants
"
)
;
const
AboutDebugging
=
{
async
init
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
enabled
"
true
)
)
{
window
.
location
=
"
about
:
devtools
?
reason
=
AboutDebugging
"
;
return
;
}
this
.
onNetworkLocationsUpdated
=
this
.
onNetworkLocationsUpdated
.
bind
(
this
)
;
this
.
store
=
configureStore
(
)
;
this
.
actions
=
bindActionCreators
(
actions
this
.
store
.
dispatch
)
;
const
messageContexts
=
await
this
.
createMessageContexts
(
)
;
render
(
Provider
(
{
store
:
this
.
store
}
App
(
{
messageContexts
}
)
)
this
.
mount
)
;
this
.
actions
.
selectPage
(
PAGES
.
THIS_FIREFOX
)
;
addNetworkLocationsObserver
(
this
.
onNetworkLocationsUpdated
)
;
}
async
createMessageContexts
(
)
{
if
(
!
L10nRegistry
.
sources
.
has
(
"
aboutdebugging
"
)
)
{
const
temporarySource
=
new
FileSource
(
"
aboutdebugging
"
[
"
en
-
US
"
]
"
chrome
:
/
/
devtools
/
content
/
aboutdebugging
-
new
/
tmp
-
locale
/
{
locale
}
/
"
)
;
L10nRegistry
.
registerSource
(
temporarySource
)
;
}
const
locales
=
Services
.
locale
.
getAppLocalesAsBCP47
(
)
;
const
generator
=
L10nRegistry
.
generateContexts
(
locales
[
"
aboutdebugging
.
ftl
"
]
)
;
const
contexts
=
[
]
;
for
await
(
const
context
of
generator
)
{
contexts
.
push
(
context
)
;
}
return
contexts
;
}
onNetworkLocationsUpdated
(
)
{
this
.
actions
.
updateNetworkLocations
(
getNetworkLocations
(
)
)
;
}
async
destroy
(
)
{
L10nRegistry
.
removeSource
(
"
aboutdebugging
"
)
;
removeNetworkLocationsObserver
(
this
.
onNetworkLocationsUpdated
)
;
await
this
.
actions
.
disconnectRuntime
(
)
;
setDebugTargetCollapsibilities
(
this
.
store
.
getState
(
)
.
ui
.
debugTargetCollapsibilities
)
;
unmountComponentAtNode
(
this
.
mount
)
;
}
get
mount
(
)
{
return
document
.
getElementById
(
"
mount
"
)
;
}
}
;
window
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
AboutDebugging
.
init
(
)
;
}
{
once
:
true
}
)
;
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
AboutDebugging
.
destroy
(
)
;
}
{
once
:
true
}
)
;
