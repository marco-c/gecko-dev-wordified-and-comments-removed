declare
module
"
react
-
redux
"
{
declare
export
type
Options
<
S
OP
SP
MP
>
=
{
|
pure
?
:
boolean
withRef
?
:
boolean
areStatesEqual
?
:
(
next
:
S
prev
:
S
)
=
>
boolean
areOwnPropsEqual
?
:
(
next
:
OP
prev
:
OP
)
=
>
boolean
areStatePropsEqual
?
:
(
next
:
SP
prev
:
SP
)
=
>
boolean
areMergedPropsEqual
?
:
(
next
:
MP
prev
:
MP
)
=
>
boolean
storeKey
?
:
string
|
}
;
declare
type
MapStateToProps
<
-
S
-
OP
+
SP
>
=
|
(
(
state
:
S
ownProps
:
OP
)
=
>
SP
)
|
(
(
state
:
S
ownProps
:
OP
)
=
>
(
state
:
S
ownProps
:
OP
)
=
>
SP
)
;
declare
type
Bind
<
D
>
=
<
A
R
>
(
(
.
.
.
A
)
=
>
R
)
=
>
(
.
.
.
A
)
=
>
Call
<
D
R
>
;
declare
type
MapDispatchToPropsFn
<
D
-
OP
+
DP
>
=
|
(
(
dispatch
:
D
ownProps
:
OP
)
=
>
DP
)
|
(
(
dispatch
:
D
ownProps
:
OP
)
=
>
(
dispatch
:
D
ownProps
:
OP
)
=
>
DP
)
;
declare
class
ConnectedComponent
<
OP
+
WC
>
extends
React
Component
<
OP
>
{
static
+
WrappedComponent
:
WC
;
getWrappedInstance
(
)
:
React
ElementRef
<
WC
>
;
}
declare
type
Connector
<
P
OP
MP
:
P
>
=
<
WC
:
React
ComponentType
<
P
>
>
(
WC
)
=
>
Class
<
ConnectedComponent
<
OP
WC
>
>
&
WC
;
declare
type
MergeOP
<
OP
D
>
=
{
|
.
.
.
Exact
<
OP
>
dispatch
:
D
|
}
;
declare
type
MergeOPSP
<
OP
SP
D
>
=
{
|
.
.
.
Exact
<
OP
>
.
.
.
SP
dispatch
:
D
|
}
;
declare
type
MergeOPDP
<
OP
DP
>
=
{
|
.
.
.
Exact
<
OP
>
.
.
.
DP
|
}
;
declare
type
MergeOPSPDP
<
OP
SP
DP
>
=
{
|
.
.
.
Exact
<
OP
>
.
.
.
SP
.
.
.
DP
|
}
;
declare
export
function
connect
<
-
P
-
OP
-
SP
-
DP
-
S
-
D
>
(
mapStateToProps
?
:
null
|
void
mapDispatchToProps
?
:
null
|
void
mergeProps
?
:
null
|
void
options
?
:
?
Options
<
S
OP
{
|
|
}
MergeOP
<
OP
D
>
>
)
:
Connector
<
P
OP
MergeOP
<
OP
D
>
>
;
declare
export
function
connect
<
-
P
-
OP
-
SP
-
DP
-
S
-
D
>
(
mapStateToProps
:
MapStateToProps
<
S
OP
SP
>
mapDispatchToProps
?
:
null
|
void
mergeProps
?
:
null
|
void
options
?
:
?
Options
<
S
OP
SP
MergeOPSP
<
OP
SP
D
>
>
)
:
Connector
<
P
OP
MergeOPSP
<
OP
SP
D
>
>
;
declare
export
function
connect
<
-
P
-
OP
-
SP
-
DP
S
D
>
(
mapStateToProps
:
null
|
void
mapDispatchToProps
:
MapDispatchToPropsFn
<
D
OP
DP
>
mergeProps
?
:
null
|
void
options
?
:
?
Options
<
S
OP
{
|
|
}
MergeOPDP
<
OP
DP
>
>
)
:
Connector
<
P
OP
MergeOPDP
<
OP
DP
>
>
;
declare
export
function
connect
<
-
P
-
OP
-
SP
-
DP
S
D
>
(
mapStateToProps
:
null
|
void
mapDispatchToProps
:
DP
mergeProps
?
:
null
|
void
options
?
:
?
Options
<
S
OP
{
|
|
}
MergeOPDP
<
OP
DP
>
>
)
:
Connector
<
P
OP
MergeOPDP
<
OP
ObjMap
<
DP
Bind
<
D
>
>
>
>
;
declare
export
function
connect
<
-
P
-
OP
-
SP
-
DP
S
D
>
(
mapStateToProps
:
MapStateToProps
<
S
OP
SP
>
mapDispatchToProps
:
MapDispatchToPropsFn
<
D
OP
DP
>
mergeProps
?
:
null
|
void
options
?
:
?
Options
<
S
OP
SP
{
|
.
.
.
OP
.
.
.
SP
.
.
.
DP
|
}
>
)
:
Connector
<
P
OP
{
|
.
.
.
OP
.
.
.
SP
.
.
.
DP
|
}
>
;
declare
export
function
connect
<
-
P
-
OP
-
SP
-
DP
S
D
>
(
mapStateToProps
:
MapStateToProps
<
S
OP
SP
>
mapDispatchToProps
:
DP
mergeProps
?
:
null
|
void
options
?
:
?
Options
<
S
OP
SP
MergeOPSPDP
<
OP
SP
DP
>
>
)
:
Connector
<
P
OP
MergeOPSPDP
<
OP
SP
ObjMap
<
DP
Bind
<
D
>
>
>
>
;
declare
type
MergeProps
<
+
P
-
OP
-
SP
-
DP
>
=
(
stateProps
:
SP
dispatchProps
:
DP
ownProps
:
OP
)
=
>
P
;
declare
export
function
connect
<
-
P
-
OP
-
SP
:
{
|
|
}
-
DP
:
{
|
|
}
S
D
>
(
mapStateToProps
:
null
|
void
mapDispatchToProps
:
null
|
void
mergeProps
:
MergeProps
<
P
OP
{
|
|
}
{
|
dispatch
:
D
|
}
>
options
?
:
?
Options
<
S
OP
{
|
|
}
P
>
)
:
Connector
<
P
OP
P
>
;
declare
export
function
connect
<
-
P
-
OP
-
SP
-
DP
:
{
|
|
}
S
D
>
(
mapStateToProps
:
MapStateToProps
<
S
OP
SP
>
mapDispatchToProps
:
null
|
void
mergeProps
:
MergeProps
<
P
OP
SP
{
|
dispatch
:
D
|
}
>
options
?
:
?
Options
<
S
OP
SP
P
>
)
:
Connector
<
P
OP
P
>
;
declare
export
function
connect
<
-
P
-
OP
-
SP
:
{
|
|
}
-
DP
S
D
>
(
mapStateToProps
:
null
|
void
mapDispatchToProps
:
MapDispatchToPropsFn
<
D
OP
DP
>
mergeProps
:
MergeProps
<
P
OP
{
|
|
}
DP
>
options
?
:
?
Options
<
S
OP
{
|
|
}
P
>
)
:
Connector
<
P
OP
P
>
;
declare
export
function
connect
<
-
P
-
OP
-
SP
:
{
|
|
}
-
DP
S
D
>
(
mapStateToProps
:
null
|
void
mapDispatchToProps
:
DP
mergeProps
:
MergeProps
<
P
OP
{
|
|
}
ObjMap
<
DP
Bind
<
D
>
>
>
options
?
:
?
Options
<
S
OP
{
|
|
}
P
>
)
:
Connector
<
P
OP
P
>
;
declare
export
function
connect
<
-
P
-
OP
-
SP
-
DP
S
D
>
(
mapStateToProps
:
MapStateToProps
<
S
OP
SP
>
mapDispatchToProps
:
MapDispatchToPropsFn
<
D
OP
DP
>
mergeProps
:
MergeProps
<
P
OP
SP
DP
>
options
?
:
?
Options
<
S
OP
SP
P
>
)
:
Connector
<
P
OP
P
>
;
declare
export
function
connect
<
-
P
-
OP
-
SP
-
DP
S
D
>
(
mapStateToProps
:
MapStateToProps
<
S
OP
SP
>
mapDispatchToProps
:
DP
mergeProps
:
MergeProps
<
P
OP
SP
ObjMap
<
DP
Bind
<
D
>
>
>
options
?
:
?
Options
<
S
OP
SP
P
>
)
:
Connector
<
P
OP
P
>
;
declare
export
class
Provider
<
Store
>
extends
React
Component
<
{
store
:
Store
children
?
:
React
Node
}
>
{
}
declare
export
function
createProvider
(
storeKey
?
:
string
subKey
?
:
string
)
:
Class
<
Provider
<
*
>
>
;
declare
type
ConnectAdvancedOptions
=
{
getDisplayName
?
:
(
name
:
string
)
=
>
string
methodName
?
:
string
renderCountProp
?
:
string
shouldHandleStateChanges
?
:
boolean
storeKey
?
:
string
withRef
?
:
boolean
}
;
declare
type
SelectorFactoryOptions
<
Com
>
=
{
getDisplayName
:
(
name
:
string
)
=
>
string
methodName
:
string
renderCountProp
:
?
string
shouldHandleStateChanges
:
boolean
storeKey
:
string
withRef
:
boolean
displayName
:
string
wrappedComponentName
:
string
WrappedComponent
:
Com
}
;
declare
type
MapStateToPropsEx
<
S
:
Object
SP
:
Object
RSP
:
Object
>
=
(
state
:
S
props
:
SP
)
=
>
RSP
;
declare
type
SelectorFactory
<
Com
:
React
ComponentType
<
*
>
Dispatch
S
:
Object
OP
:
Object
EFO
:
Object
CP
:
Object
>
=
(
dispatch
:
Dispatch
factoryOptions
:
SelectorFactoryOptions
<
Com
>
&
EFO
)
=
>
MapStateToPropsEx
<
S
OP
CP
>
;
declare
export
function
connectAdvanced
<
Com
:
React
ComponentType
<
*
>
D
S
:
Object
OP
:
Object
CP
:
Object
EFO
:
Object
ST
:
{
[
_
:
Keys
<
Com
>
]
:
any
}
>
(
selectorFactory
:
SelectorFactory
<
Com
D
S
OP
EFO
CP
>
connectAdvancedOptions
:
?
(
ConnectAdvancedOptions
&
EFO
)
)
:
(
component
:
Com
)
=
>
React
ComponentType
<
OP
>
&
Shape
<
ST
>
;
declare
export
default
{
Provider
:
typeof
Provider
createProvider
:
typeof
createProvider
connect
:
typeof
connect
connectAdvanced
:
typeof
connectAdvanced
}
;
}
