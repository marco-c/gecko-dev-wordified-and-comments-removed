import
{
addThreadEventListeners
}
from
"
.
/
events
"
;
import
{
prefs
features
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
{
sameOrigin
}
from
"
.
.
/
.
.
/
utils
/
url
"
;
import
type
{
DebuggerClient
Target
}
from
"
.
/
types
"
;
import
type
{
ThreadType
}
from
"
.
.
/
.
.
/
types
"
;
const
{
defaultThreadOptions
}
=
require
(
"
devtools
/
client
/
shared
/
thread
-
utils
"
)
;
type
Args
=
{
currentTarget
:
Target
debuggerClient
:
DebuggerClient
targets
:
{
[
ThreadType
]
:
{
[
string
]
:
Target
}
}
options
:
Object
}
;
async
function
attachTargets
(
type
targetLists
args
)
{
const
{
targets
}
=
args
;
for
(
const
actor
of
Object
.
keys
(
targets
[
type
]
)
)
{
if
(
!
targetLists
.
some
(
target
=
>
target
.
targetForm
.
threadActor
=
=
actor
)
)
{
delete
targets
[
type
]
[
actor
]
;
}
}
for
(
const
targetFront
of
targetLists
)
{
try
{
await
targetFront
.
attach
(
)
;
const
threadActorID
=
targetFront
.
targetForm
.
threadActor
;
if
(
targets
[
type
]
[
threadActorID
]
)
{
continue
;
}
targets
[
type
]
[
threadActorID
]
=
targetFront
;
let
threadFront
=
targetFront
.
threadFront
;
if
(
!
threadFront
)
{
[
threadFront
]
=
await
targetFront
.
attachThread
(
{
.
.
.
defaultThreadOptions
(
)
.
.
.
args
.
options
}
)
;
threadFront
.
resume
(
)
;
}
addThreadEventListeners
(
threadFront
)
;
}
catch
(
e
)
{
}
}
}
export
async
function
updateWorkerTargets
(
type
:
ThreadType
args
:
Args
)
{
const
{
currentTarget
debuggerClient
}
=
args
;
if
(
!
currentTarget
.
isBrowsingContext
|
|
currentTarget
.
isContentProcess
)
{
return
;
}
const
{
workers
}
=
await
currentTarget
.
listWorkers
(
)
;
if
(
features
.
windowlessServiceWorkers
&
&
currentTarget
.
url
)
{
const
{
service
}
=
await
debuggerClient
.
mainRoot
.
listAllWorkers
(
)
;
for
(
const
{
active
id
url
}
of
service
)
{
if
(
active
&
&
sameOrigin
(
url
currentTarget
.
url
)
)
{
const
workerTarget
=
await
debuggerClient
.
mainRoot
.
getWorker
(
id
)
;
workers
.
push
(
workerTarget
)
;
}
}
}
await
attachTargets
(
type
workers
args
)
;
}
export
async
function
updateProcessTargets
(
type
:
ThreadType
args
:
Args
)
{
const
{
currentTarget
debuggerClient
}
=
args
;
if
(
!
prefs
.
fission
|
|
!
currentTarget
.
chrome
|
|
currentTarget
.
isAddon
)
{
return
;
}
const
{
processes
}
=
await
debuggerClient
.
mainRoot
.
listProcesses
(
)
;
const
targets
=
await
Promise
.
all
(
processes
.
filter
(
descriptor
=
>
!
descriptor
.
isParent
)
.
map
(
descriptor
=
>
descriptor
.
getTarget
(
)
)
)
;
await
attachTargets
(
type
targets
args
)
;
}
export
async
function
updateTargets
(
type
:
ThreadType
args
:
Args
)
{
if
(
type
=
=
"
worker
"
)
{
await
updateWorkerTargets
(
type
args
)
;
}
else
if
(
type
=
=
"
contentProcess
"
)
{
await
updateProcessTargets
(
type
args
)
;
}
else
{
throw
new
Error
(
Unable
to
fetch
targts
for
{
type
}
)
;
}
}
