import
type
{
BreakpointLocation
BreakpointOptions
ActorId
PendingLocation
SourceId
Range
URL
}
from
"
.
.
/
.
.
/
types
"
;
import
type
{
EventListenerCategoryList
}
from
"
.
.
/
.
.
/
actions
/
types
"
;
export
type
FramePacket
=
{
|
+
actor
:
ActorId
+
arguments
:
any
[
]
+
displayName
:
string
+
this
:
any
+
depth
?
:
number
+
oldest
?
:
boolean
+
type
:
"
pause
"
|
"
call
"
+
where
:
ServerLocation
|
}
;
type
ServerLocation
=
{
|
actor
:
string
line
:
number
column
:
number
|
}
;
export
type
FrameFront
=
{
+
typeName
:
"
frame
"
+
data
:
FramePacket
+
getEnvironment
:
(
)
=
>
Promise
<
*
>
+
where
:
ServerLocation
actorID
:
string
displayName
:
string
this
:
any
asyncCause
:
null
|
string
state
:
"
on
-
stack
"
|
"
suspended
"
|
"
dead
"
type
:
"
call
"
|
"
eval
"
|
"
global
"
|
"
module
"
|
"
wasmcall
"
|
"
debugger
"
}
;
export
type
SourcePayload
=
{
actor
:
ActorId
url
:
URL
|
null
isBlackBoxed
:
boolean
sourceMapBaseURL
:
URL
|
null
sourceMapURL
:
URL
|
null
introductionType
:
string
|
null
extensionName
:
string
|
null
}
;
export
type
SourcePacket
=
{
from
:
ActorId
source
:
SourcePayload
type
:
string
}
;
export
type
SourcesPacket
=
{
from
:
ActorId
sources
:
SourcePayload
[
]
}
;
export
type
PausedPacket
=
{
actor
:
ActorId
from
:
ActorId
type
:
string
frame
:
FrameFront
why
:
{
actors
:
ActorId
[
]
type
:
string
onNext
?
:
Function
}
}
;
export
type
TabPayload
=
{
actor
:
ActorId
animationsActor
:
ActorId
consoleActor
:
ActorId
contentViewerActor
:
ActorId
cssPropertiesActor
:
ActorId
directorManagerActor
:
ActorId
eventLoopLagActor
:
ActorId
framerateActor
:
ActorId
inspectorActor
:
ActorId
memoryActor
:
ActorId
monitorActor
:
ActorId
outerWindowID
:
number
performanceActor
:
ActorId
performanceEntriesActor
:
ActorId
profilerActor
:
ActorId
reflowActor
:
ActorId
responsiveActor
:
ActorId
storageActor
:
ActorId
styleEditorActor
:
ActorId
styleSheetsActor
:
ActorId
timelineActor
:
ActorId
title
:
string
url
:
URL
webExtensionInspectedWindowActor
:
ActorId
}
;
export
type
Target
=
{
off
:
(
string
Function
)
=
>
void
on
:
(
string
Function
)
=
>
void
emit
:
(
string
any
)
=
>
void
getFront
:
string
=
>
Promise
<
*
>
form
:
{
consoleActor
:
any
}
root
:
any
navigateTo
:
(
{
url
:
URL
}
)
=
>
Promise
<
*
>
attach
:
(
)
=
>
Promise
<
*
>
attachThread
:
Object
=
>
Promise
<
ThreadFront
>
listWorkers
:
(
)
=
>
Promise
<
*
>
reload
:
(
)
=
>
Promise
<
*
>
destroy
:
(
)
=
>
void
threadFront
:
ThreadFront
name
:
string
isBrowsingContext
:
boolean
isContentProcess
:
boolean
isWorkerTarget
:
boolean
targetType
:
string
isTopLevel
:
boolean
traits
:
Object
chrome
:
boolean
url
:
URL
isParentProcess
:
boolean
targetForm
:
Object
reconfigure
:
Object
debuggerServiceWorkerStatus
:
string
attachAndInitThread
:
TargetList
=
>
Promise
<
*
>
}
;
export
type
DevToolsClient
=
{
_activeRequests
:
{
get
:
any
=
>
any
delete
:
any
=
>
void
}
mainRoot
:
{
traits
:
any
getFront
:
string
=
>
Promise
<
*
>
listProcesses
:
(
)
=
>
Promise
<
Array
<
ProcessDescriptor
>
>
listAllWorkerTargets
:
(
)
=
>
Promise
<
*
>
listServiceWorkerRegistrations
:
(
)
=
>
Promise
<
*
>
getWorker
:
any
=
>
Promise
<
*
>
on
:
(
string
Function
)
=
>
void
}
connect
:
(
)
=
>
Promise
<
*
>
request
:
(
packet
:
Object
)
=
>
Promise
<
*
>
attachConsole
:
(
actor
:
String
listeners
:
Array
<
*
>
)
=
>
Promise
<
*
>
createObjectFront
:
(
grip
:
Grip
thread
:
ThreadFront
)
=
>
ObjectFront
release
:
(
actor
:
String
)
=
>
{
}
getFrontByID
:
(
actor
:
String
)
=
>
{
release
:
(
)
=
>
Promise
<
*
>
}
}
;
type
ProcessDescriptor
=
Object
;
export
type
TargetList
=
{
watchTargets
:
(
Array
<
string
>
Function
Function
)
=
>
void
unwatchTargets
:
(
Array
<
string
>
Function
Function
)
=
>
void
getAllTargets
:
(
Array
<
string
>
)
=
>
Array
<
Target
>
targetFront
:
Target
updateConfiguration
:
Object
=
>
Promise
<
*
>
hasTargetWatcherSupport
:
string
=
>
boolean
watcherFront
:
WatcherFront
TYPES
:
{
FRAME
:
string
PROCESS
:
string
WORKER
:
string
}
}
;
export
type
BreakpointListActor
=
{
setBreakpoint
:
(
BreakpointLocation
BreakpointOptions
)
=
>
Promise
<
*
>
removeBreakpoint
:
PendingLocation
=
>
Promise
<
*
>
}
;
export
type
WatcherFront
=
{
getBreakpointListActor
:
(
)
=
>
BreakpointListActor
}
;
export
type
Grip
=
{
|
actor
?
:
string
class
:
string
displayClass
:
string
displayName
?
:
string
isError
?
:
boolean
parameterNames
?
:
string
[
]
userDisplayName
?
:
string
name
:
string
extensible
:
boolean
location
:
{
url
:
URL
line
:
number
column
:
number
}
frozen
:
boolean
ownPropertyLength
:
number
preview
:
Object
sealed
:
boolean
optimizedOut
:
boolean
type
:
string
|
}
;
export
type
FunctionGrip
=
{
|
class
:
"
Function
"
name
:
string
parameterNames
:
string
[
]
displayName
:
string
userDisplayName
:
string
url
:
URL
line
:
number
column
:
number
|
}
;
export
type
SourceClient
=
{
source
:
(
)
=
>
{
source
:
any
contentType
?
:
string
}
_activeThread
:
ThreadFront
actor
:
string
getBreakpointPositionsCompressed
:
(
range
:
?
Range
)
=
>
Promise
<
any
>
prettyPrint
:
number
=
>
Promise
<
*
>
disablePrettyPrint
:
(
)
=
>
Promise
<
*
>
blackBox
:
(
range
?
:
Range
)
=
>
Promise
<
*
>
unblackBox
:
(
range
?
:
Range
)
=
>
Promise
<
*
>
getBreakableLines
:
(
)
=
>
Promise
<
number
[
]
>
}
;
export
type
ObjectFront
=
{
actorID
:
string
getGrip
:
(
)
=
>
Grip
getPrototypeAndProperties
:
(
)
=
>
any
getProperty
:
string
=
>
{
descriptor
:
any
}
addWatchpoint
:
(
property
:
string
label
:
string
watchpointType
:
string
)
=
>
{
}
removeWatchpoint
:
(
property
:
string
)
=
>
{
}
release
:
(
)
=
>
Promise
<
*
>
}
;
export
type
LongStringFront
=
{
actorID
:
string
getGrip
:
(
)
=
>
Grip
release
:
(
)
=
>
Promise
<
*
>
}
;
export
type
ExpressionResult
=
|
ObjectFront
|
LongStringFront
|
Grip
|
string
|
number
|
null
;
export
type
ThreadFront
=
{
actorID
:
string
parentFront
:
Target
getFrames
:
(
number
number
)
=
>
Promise
<
{
|
frames
:
FrameFront
[
]
|
}
>
resume
:
Function
=
>
Promise
<
*
>
stepIn
:
Function
=
>
Promise
<
*
>
stepOver
:
Function
=
>
Promise
<
*
>
stepOut
:
Function
=
>
Promise
<
*
>
restart
:
Function
=
>
Promise
<
*
>
breakOnNext
:
(
)
=
>
Promise
<
*
>
source
:
(
{
actor
:
SourceId
}
)
=
>
SourceClient
pauseGrip
:
(
Grip
|
Function
)
=
>
ObjectFront
pauseOnExceptions
:
(
boolean
boolean
)
=
>
Promise
<
*
>
setBreakpoint
:
(
BreakpointLocation
BreakpointOptions
)
=
>
Promise
<
*
>
removeBreakpoint
:
PendingLocation
=
>
Promise
<
*
>
setXHRBreakpoint
:
(
path
:
string
method
:
string
)
=
>
Promise
<
boolean
>
removeXHRBreakpoint
:
(
path
:
string
method
:
string
)
=
>
Promise
<
boolean
>
interrupt
:
(
)
=
>
Promise
<
*
>
eventListeners
:
(
)
=
>
Promise
<
*
>
on
:
(
string
Function
)
=
>
void
off
:
(
string
Function
)
=
>
void
getSources
:
(
)
=
>
Promise
<
SourcesPacket
>
reconfigure
:
(
{
observeAsmJS
:
boolean
}
)
=
>
Promise
<
*
>
getLastPausePacket
:
(
)
=
>
?
PausedPacket
_parent
:
Target
actor
:
ActorId
actorID
:
ActorId
request
:
(
payload
:
Object
)
=
>
Promise
<
*
>
url
:
URL
setActiveEventBreakpoints
:
(
string
[
]
)
=
>
Promise
<
void
>
getAvailableEventBreakpoints
:
(
)
=
>
Promise
<
EventListenerCategoryList
>
skipBreakpoints
:
boolean
=
>
Promise
<
{
|
skip
:
boolean
|
}
>
detach
:
(
)
=
>
Promise
<
void
>
fetchAncestorFramePositions
:
Function
=
>
Promise
<
*
>
getActorByID
:
string
=
>
FrameFront
dumpThread
:
Function
=
>
void
}
;
export
type
Panel
=
{
|
emit
:
(
eventName
:
string
)
=
>
void
openLink
:
(
url
:
URL
)
=
>
void
openInspector
:
(
)
=
>
void
openElementInInspector
:
(
grip
:
Object
)
=
>
void
openConsoleAndEvaluate
:
(
input
:
string
)
=
>
void
highlightDomElement
:
(
grip
:
Object
)
=
>
void
unHighlightDomElement
:
(
grip
:
Object
)
=
>
void
getToolboxStore
:
(
)
=
>
any
panelWin
:
Object
|
}
;
