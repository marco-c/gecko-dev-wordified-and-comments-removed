import
{
hasSource
hasSourceActor
getSourceActor
getSourcesCount
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
features
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
{
isUrlExtension
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
createLocation
}
from
"
.
.
/
.
.
/
utils
/
location
"
;
import
{
getDisplayURL
}
from
"
.
.
/
.
.
/
utils
/
sources
-
tree
/
getURL
"
;
let
store
;
export
function
setupCreate
(
dependencies
)
{
store
=
dependencies
.
store
;
}
export
async
function
createFrame
(
thread
frame
index
=
0
)
{
if
(
!
frame
)
{
return
null
;
}
const
sourceActor
=
await
waitForSourceActorToBeRegisteredInStore
(
frame
.
where
.
actor
)
;
const
location
=
createLocation
(
{
source
:
sourceActor
.
sourceObject
sourceActor
line
:
frame
.
where
.
line
column
:
frame
.
where
.
column
}
)
;
return
{
id
:
frame
.
actorID
thread
displayName
:
frame
.
displayName
location
generatedLocation
:
location
this
:
frame
.
this
source
:
null
index
asyncCause
:
frame
.
asyncCause
state
:
frame
.
state
type
:
frame
.
type
}
;
}
async
function
waitForSourceActorToBeRegisteredInStore
(
sourceActorId
)
{
if
(
!
hasSourceActor
(
store
.
getState
(
)
sourceActorId
)
)
{
await
new
Promise
(
resolve
=
>
{
const
unsubscribe
=
store
.
subscribe
(
check
)
;
let
currentSize
=
null
;
function
check
(
)
{
const
previousSize
=
currentSize
;
currentSize
=
store
.
getState
(
)
.
sourceActors
.
mutableSourceActors
.
size
;
if
(
previousSize
=
=
currentSize
)
{
return
;
}
if
(
hasSourceActor
(
store
.
getState
(
)
sourceActorId
)
)
{
unsubscribe
(
)
;
resolve
(
)
;
}
}
}
)
;
}
return
getSourceActor
(
store
.
getState
(
)
sourceActorId
)
;
}
export
async
function
waitForSourceToBeRegisteredInStore
(
sourceId
)
{
return
new
Promise
(
resolve
=
>
{
if
(
hasSource
(
store
.
getState
(
)
sourceId
)
)
{
resolve
(
)
;
return
;
}
const
unsubscribe
=
store
.
subscribe
(
check
)
;
let
currentSize
=
null
;
function
check
(
)
{
const
previousSize
=
currentSize
;
currentSize
=
getSourcesCount
(
store
.
getState
(
)
)
;
if
(
previousSize
=
=
currentSize
)
{
return
;
}
if
(
hasSource
(
store
.
getState
(
)
sourceId
)
)
{
unsubscribe
(
)
;
resolve
(
)
;
}
}
}
)
;
}
export
function
makeSourceId
(
sourceResource
)
{
if
(
"
mockedJestID
"
in
sourceResource
)
{
return
sourceResource
.
mockedJestID
;
}
if
(
sourceResource
.
url
)
{
return
source
-
url
-
{
sourceResource
.
url
}
;
}
return
source
-
actor
-
{
sourceResource
.
actor
}
;
}
export
function
createGeneratedSource
(
sourceResource
)
{
return
createSourceObject
(
{
id
:
makeSourceId
(
sourceResource
)
url
:
sourceResource
.
url
extensionName
:
sourceResource
.
extensionName
isWasm
:
!
!
features
.
wasm
&
&
sourceResource
.
introductionType
=
=
=
"
wasm
"
isExtension
:
(
sourceResource
.
url
&
&
isUrlExtension
(
sourceResource
.
url
)
)
|
|
false
isHTML
:
!
!
sourceResource
.
isInlineSource
}
)
;
}
function
createSourceObject
(
{
id
url
extensionName
=
null
isWasm
=
false
isExtension
=
false
isPrettyPrinted
=
false
isOriginal
=
false
isHTML
=
false
}
)
{
return
{
id
url
displayURL
:
getDisplayURL
(
url
extensionName
)
extensionName
isExtension
isWasm
isHTML
isPrettyPrinted
isOriginal
}
;
}
export
function
createSourceMapOriginalSource
(
id
url
)
{
return
createSourceObject
(
{
id
url
isOriginal
:
true
}
)
;
}
export
function
createPrettyPrintOriginalSource
(
id
url
)
{
return
createSourceObject
(
{
id
url
isOriginal
:
true
isPrettyPrinted
:
true
}
)
;
}
export
function
createSourceActor
(
sourceResource
sourceObject
)
{
const
actorId
=
sourceResource
.
actor
;
return
{
id
:
actorId
actor
:
actorId
thread
:
sourceResource
.
targetFront
.
getCachedFront
(
"
thread
"
)
.
actorID
source
:
makeSourceId
(
sourceResource
)
sourceObject
sourceMapBaseURL
:
sourceResource
.
sourceMapBaseURL
sourceMapURL
:
sourceResource
.
sourceMapURL
url
:
sourceResource
.
url
introductionType
:
sourceResource
.
introductionType
}
;
}
export
async
function
createPause
(
thread
packet
)
{
const
frame
=
await
createFrame
(
thread
packet
.
frame
)
;
return
{
.
.
.
packet
thread
frame
}
;
}
export
function
createThread
(
targetFront
)
{
const
name
=
targetFront
.
isTopLevel
?
L10N
.
getStr
(
"
mainThread
"
)
:
targetFront
.
name
;
return
{
actor
:
targetFront
.
targetForm
.
threadActor
url
:
targetFront
.
url
isTopLevel
:
targetFront
.
isTopLevel
targetType
:
targetFront
.
targetType
name
serviceWorkerStatus
:
targetFront
.
debuggerServiceWorkerStatus
isWebExtension
:
targetFront
.
isWebExtension
processID
:
targetFront
.
processID
}
;
}
export
function
createBreakpoint
(
{
id
thread
disabled
=
false
options
=
{
}
location
generatedLocation
text
originalText
}
)
{
return
{
id
thread
disabled
options
location
generatedLocation
text
originalText
}
;
}
