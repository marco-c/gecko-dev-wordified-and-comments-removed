import
type
{
Frame
ThreadId
GeneratedSourceData
Thread
}
from
"
.
.
/
.
.
/
types
"
;
import
type
{
PausedPacket
FrameFront
SourcePayload
ThreadFront
Target
}
from
"
.
/
types
"
;
import
{
clientCommands
}
from
"
.
/
commands
"
;
export
function
prepareSourcePayload
(
threadFront
:
ThreadFront
source
:
SourcePayload
)
:
GeneratedSourceData
{
const
{
isServiceWorker
}
=
threadFront
.
parentFront
;
clientCommands
.
registerSourceActor
(
source
.
actor
makeSourceId
(
source
isServiceWorker
)
)
;
source
=
{
.
.
.
source
}
;
if
(
typeof
source
.
sourceMapBaseURL
=
=
=
"
undefined
"
&
&
typeof
(
source
:
any
)
.
introductionUrl
!
=
=
"
undefined
"
)
{
source
.
sourceMapBaseURL
=
source
.
url
|
|
(
source
:
any
)
.
introductionUrl
|
|
null
;
delete
(
source
:
any
)
.
introductionUrl
;
}
return
{
thread
:
threadFront
.
actor
isServiceWorker
source
}
;
}
export
function
createFrame
(
thread
:
ThreadId
frame
:
FrameFront
index
:
number
=
0
)
:
?
Frame
{
if
(
!
frame
)
{
return
null
;
}
const
location
=
{
sourceId
:
clientCommands
.
getSourceForActor
(
frame
.
where
.
actor
)
line
:
frame
.
where
.
line
column
:
frame
.
where
.
column
}
;
return
{
id
:
frame
.
actorID
thread
displayName
:
frame
.
displayName
location
generatedLocation
:
location
this
:
frame
.
this
source
:
null
index
asyncCause
:
frame
.
asyncCause
state
:
frame
.
state
type
:
frame
.
type
}
;
}
export
function
makeSourceId
(
source
:
SourcePayload
isServiceWorker
:
boolean
)
{
return
source
.
url
&
&
!
isServiceWorker
?
sourceURL
-
{
source
.
url
}
:
source
-
{
source
.
actor
}
;
}
export
function
createPause
(
thread
:
string
packet
:
PausedPacket
)
:
any
{
return
{
.
.
.
packet
thread
frame
:
createFrame
(
thread
packet
.
frame
)
}
;
}
function
getTargetType
(
target
:
Target
)
{
if
(
target
.
isWorkerTarget
)
{
return
"
worker
"
;
}
if
(
target
.
isContentProcess
)
{
return
"
contentProcess
"
;
}
return
"
frame
"
;
}
export
function
createThread
(
actor
:
string
target
:
Target
)
:
Thread
{
const
type
=
getTargetType
(
target
)
;
const
name
=
target
.
isTopLevel
?
L10N
.
getStr
(
"
mainThread
"
)
:
target
.
name
;
return
{
actor
url
:
target
.
url
isTopLevel
:
target
.
isTopLevel
type
name
serviceWorkerStatus
:
target
.
debuggerServiceWorkerStatus
}
;
}
