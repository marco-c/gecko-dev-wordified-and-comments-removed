import
{
clientCommands
}
from
"
.
/
commands
"
;
import
{
hasSourceActor
getSourceActor
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
stringToSourceActorId
}
from
"
.
.
/
.
.
/
reducers
/
source
-
actors
"
;
let
store
;
export
function
setupCreate
(
dependencies
)
{
store
=
dependencies
.
store
;
}
export
async
function
createFrame
(
thread
frame
index
=
0
)
{
if
(
!
frame
)
{
return
null
;
}
const
source
=
await
waitForSourceActorToBeRegisteredInStore
(
frame
.
where
.
actor
)
;
const
location
=
{
sourceId
:
makeSourceId
(
source
thread
)
line
:
frame
.
where
.
line
column
:
frame
.
where
.
column
}
;
return
{
id
:
frame
.
actorID
thread
displayName
:
frame
.
displayName
location
generatedLocation
:
location
this
:
frame
.
this
source
:
null
index
asyncCause
:
frame
.
asyncCause
state
:
frame
.
state
type
:
frame
.
type
}
;
}
async
function
waitForSourceActorToBeRegisteredInStore
(
sourceActorIdString
)
{
const
sourceActorId
=
stringToSourceActorId
(
sourceActorIdString
)
;
if
(
!
hasSourceActor
(
store
.
getState
(
)
sourceActorId
)
)
{
await
new
Promise
(
resolve
=
>
{
const
unsubscribe
=
store
.
subscribe
(
check
)
;
let
currentState
=
null
;
function
check
(
)
{
const
previousState
=
currentState
;
currentState
=
store
.
getState
(
)
.
sourceActors
.
values
;
if
(
previousState
=
=
currentState
)
{
return
;
}
if
(
hasSourceActor
(
store
.
getState
(
)
sourceActorId
)
)
{
unsubscribe
(
)
;
resolve
(
)
;
}
}
}
)
;
}
return
getSourceActor
(
store
.
getState
(
)
sourceActorId
)
;
}
export
function
makeSourceId
(
source
threadActorId
)
{
const
target
=
clientCommands
.
lookupTarget
(
threadActorId
)
;
if
(
target
.
isTopLevel
&
&
source
.
url
)
{
return
source
-
{
source
.
url
}
;
}
return
source
-
{
source
.
actor
}
;
}
export
async
function
createPause
(
thread
packet
)
{
const
frame
=
await
createFrame
(
thread
packet
.
frame
)
;
return
{
.
.
.
packet
thread
frame
}
;
}
export
function
createThread
(
actor
target
)
{
const
name
=
target
.
isTopLevel
?
L10N
.
getStr
(
"
mainThread
"
)
:
target
.
name
;
return
{
actor
url
:
target
.
url
isTopLevel
:
target
.
isTopLevel
targetType
:
target
.
targetType
name
serviceWorkerStatus
:
target
.
debuggerServiceWorkerStatus
}
;
}
