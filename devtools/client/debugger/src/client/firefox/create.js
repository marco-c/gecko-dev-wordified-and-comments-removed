import
type
{
Frame
ThreadId
GeneratedSourceData
Thread
}
from
"
.
.
/
.
.
/
types
"
;
import
type
{
PausedPacket
FramePacket
FrameFront
SourcePayload
ThreadFront
Target
}
from
"
.
/
types
"
;
import
{
clientCommands
}
from
"
.
/
commands
"
;
export
function
prepareSourcePayload
(
client
:
ThreadFront
source
:
SourcePayload
)
:
GeneratedSourceData
{
clientCommands
.
registerSourceActor
(
source
.
actor
makeSourceId
(
source
)
)
;
return
{
thread
:
client
.
actor
source
}
;
}
export
function
createFrame
(
thread
:
ThreadId
frame
:
FramePacket
|
FrameFront
index
:
number
=
0
)
:
?
Frame
{
if
(
!
frame
)
{
return
null
;
}
const
data
=
frame
.
data
|
|
frame
;
const
location
=
{
sourceId
:
clientCommands
.
getSourceForActor
(
data
.
where
.
actor
)
line
:
data
.
where
.
line
column
:
data
.
where
.
column
}
;
return
{
id
:
data
.
actor
thread
displayName
:
data
.
displayName
location
generatedLocation
:
location
this
:
data
.
this
source
:
null
scope
:
data
.
environment
index
}
;
}
export
function
makeSourceId
(
source
:
SourcePayload
)
{
return
source
.
url
?
sourceURL
-
{
source
.
url
}
:
source
-
{
source
.
actor
}
;
}
export
function
createPause
(
thread
:
string
packet
:
PausedPacket
frames
:
FramePacket
[
]
)
:
any
{
const
frame
=
packet
.
frame
|
|
frames
[
0
]
;
return
{
.
.
.
packet
thread
frame
:
createFrame
(
thread
frame
)
frames
:
frames
.
map
(
(
currentFrame
i
)
=
>
createFrame
(
thread
currentFrame
i
)
)
}
;
}
function
getTargetType
(
target
:
Target
)
{
if
(
target
.
isWorkerTarget
)
{
return
"
worker
"
;
}
if
(
target
.
isContentProcess
)
{
return
"
contentProcess
"
;
}
return
"
mainThread
"
;
}
export
function
createThread
(
actor
:
string
target
:
Target
)
:
Thread
{
return
{
actor
url
:
target
.
url
type
:
getTargetType
(
target
)
name
:
target
.
name
}
;
}
