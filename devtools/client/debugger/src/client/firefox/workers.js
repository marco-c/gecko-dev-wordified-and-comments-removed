import
{
addThreadEventListeners
}
from
"
.
/
events
"
;
import
type
{
TabTarget
}
from
"
.
/
types
"
;
export
function
supportsWorkers
(
tabTarget
:
TabTarget
)
{
return
tabTarget
.
isBrowsingContext
|
|
tabTarget
.
isContentProcess
;
}
export
async
function
updateWorkerTargets
(
{
tabTarget
debuggerClient
threadFront
workerTargets
options
}
:
Object
)
{
if
(
!
supportsWorkers
(
tabTarget
)
)
{
return
{
}
;
}
const
newWorkerTargets
=
{
}
;
const
{
workers
}
=
await
tabTarget
.
listWorkers
(
)
;
for
(
const
workerTargetFront
of
workers
)
{
try
{
await
workerTargetFront
.
attach
(
)
;
const
threadActorID
=
workerTargetFront
.
_threadActor
;
if
(
workerTargets
[
threadActorID
]
)
{
newWorkerTargets
[
threadActorID
]
=
workerTargets
[
threadActorID
]
;
}
else
{
const
[
workerThread
]
=
await
workerTargetFront
.
attachThread
(
options
)
;
workerThread
.
resume
(
)
;
addThreadEventListeners
(
workerThread
)
;
const
consoleFront
=
await
workerTargetFront
.
getFront
(
"
console
"
)
;
await
consoleFront
.
startListeners
(
[
]
)
;
newWorkerTargets
[
workerThread
.
actor
]
=
workerTargetFront
;
}
}
catch
(
e
)
{
}
}
return
newWorkerTargets
;
}
