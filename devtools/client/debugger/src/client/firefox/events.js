import
Actions
from
"
.
.
/
.
.
/
actions
"
;
import
sourceQueue
from
"
.
.
/
.
.
/
utils
/
source
-
queue
"
;
import
{
hasSourceActor
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
stringToSourceActorId
}
from
"
.
.
/
.
.
/
reducers
/
source
-
actors
"
;
type
Dependencies
=
{
actions
:
typeof
Actions
store
:
any
}
;
let
store
:
any
;
function
setupEvents
(
dependencies
:
Dependencies
)
:
void
{
const
actions
=
dependencies
.
actions
;
sourceQueue
.
initialize
(
actions
)
;
store
=
dependencies
.
store
;
}
async
function
ensureSourceActor
(
sourceActor
:
string
)
{
const
sourceActorId
=
stringToSourceActorId
(
sourceActor
)
;
if
(
!
hasSourceActor
(
store
.
getState
(
)
sourceActorId
)
)
{
await
new
Promise
(
resolve
=
>
{
const
unsubscribe
=
store
.
subscribe
(
check
)
;
let
currentState
=
null
;
function
check
(
)
{
const
previousState
=
currentState
;
currentState
=
store
.
getState
(
)
.
sourceActors
.
values
;
if
(
previousState
=
=
currentState
)
{
return
;
}
if
(
hasSourceActor
(
store
.
getState
(
)
sourceActorId
)
)
{
unsubscribe
(
)
;
resolve
(
)
;
}
}
}
)
;
}
}
export
{
setupEvents
ensureSourceActor
}
;
