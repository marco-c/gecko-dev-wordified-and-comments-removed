import
type
{
PausedPacket
ThreadFront
Target
DevToolsClient
}
from
"
.
/
types
"
;
import
Actions
from
"
.
.
/
.
.
/
actions
"
;
import
{
createPause
}
from
"
.
/
create
"
;
import
sourceQueue
from
"
.
.
/
.
.
/
utils
/
source
-
queue
"
;
import
{
recordEvent
}
from
"
.
.
/
.
.
/
utils
/
telemetry
"
;
import
{
prefs
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
{
hasSourceActor
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
stringToSourceActorId
}
from
"
.
.
/
.
.
/
reducers
/
source
-
actors
"
;
type
Dependencies
=
{
actions
:
typeof
Actions
devToolsClient
:
DevToolsClient
store
:
any
}
;
let
actions
:
typeof
Actions
;
let
isInterrupted
:
boolean
;
let
threadFrontListeners
:
WeakMap
<
ThreadFront
Array
<
Function
>
>
;
let
store
:
any
;
function
addThreadEventListeners
(
thread
:
ThreadFront
)
:
void
{
const
removeListeners
=
[
]
;
Object
.
keys
(
clientEvents
)
.
forEach
(
eventName
=
>
{
removeListeners
.
push
(
thread
.
on
(
eventName
clientEvents
[
eventName
]
.
bind
(
null
thread
)
)
)
;
}
)
;
threadFrontListeners
.
set
(
thread
removeListeners
)
;
}
function
removeThreadEventListeners
(
thread
:
ThreadFront
)
:
void
{
const
removeListeners
=
threadFrontListeners
.
get
(
thread
)
|
|
[
]
;
for
(
const
removeListener
of
removeListeners
)
{
removeListener
(
)
;
}
}
function
attachAllTargets
(
currentTarget
:
Target
)
:
boolean
{
return
prefs
.
fission
&
&
currentTarget
.
isParentProcess
;
}
function
setupEvents
(
dependencies
:
Dependencies
)
:
void
{
actions
=
dependencies
.
actions
;
sourceQueue
.
initialize
(
actions
)
;
store
=
dependencies
.
store
;
threadFrontListeners
=
new
WeakMap
(
)
;
}
async
function
paused
(
threadFront
:
ThreadFront
packet
:
PausedPacket
)
:
Promise
<
*
>
{
const
{
why
}
=
packet
;
if
(
why
.
type
=
=
=
"
interrupted
"
&
&
!
packet
.
why
.
onNext
)
{
isInterrupted
=
true
;
return
;
}
if
(
why
.
type
=
=
"
alreadyPaused
"
|
|
why
.
type
=
=
"
attached
"
)
{
return
;
}
if
(
packet
.
frame
)
{
await
ensureSourceActor
(
packet
.
frame
.
where
.
actor
)
;
}
const
pause
=
createPause
(
threadFront
.
actor
packet
)
;
actions
.
paused
(
pause
)
;
recordEvent
(
"
pause
"
{
reason
:
why
.
type
}
)
;
}
function
resumed
(
threadFront
:
ThreadFront
)
:
void
{
if
(
isInterrupted
)
{
isInterrupted
=
false
;
return
;
}
actions
.
resumed
(
threadFront
.
actorID
)
;
}
async
function
ensureSourceActor
(
sourceActor
:
string
)
{
const
sourceActorId
=
stringToSourceActorId
(
sourceActor
)
;
if
(
!
hasSourceActor
(
store
.
getState
(
)
sourceActorId
)
)
{
await
new
Promise
(
resolve
=
>
{
const
unsubscribe
=
store
.
subscribe
(
check
)
;
let
currentState
=
null
;
function
check
(
)
{
const
previousState
=
currentState
;
currentState
=
store
.
getState
(
)
.
sourceActors
.
values
;
if
(
previousState
=
=
currentState
)
{
return
;
}
if
(
hasSourceActor
(
store
.
getState
(
)
sourceActorId
)
)
{
unsubscribe
(
)
;
resolve
(
)
;
}
}
}
)
;
}
}
const
clientEvents
=
{
paused
resumed
}
;
export
{
setupEvents
clientEvents
addThreadEventListeners
removeThreadEventListeners
attachAllTargets
ensureSourceActor
}
;
