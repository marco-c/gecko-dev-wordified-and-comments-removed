import
type
{
SourcePacket
PausedPacket
ThreadFront
Actions
Target
}
from
"
.
/
types
"
;
import
{
createPause
prepareSourcePayload
}
from
"
.
/
create
"
;
import
sourceQueue
from
"
.
.
/
.
.
/
utils
/
source
-
queue
"
;
import
{
recordEvent
}
from
"
.
.
/
.
.
/
utils
/
telemetry
"
;
const
CALL_STACK_PAGE_SIZE
=
1000
;
type
Dependencies
=
{
threadFront
:
ThreadFront
tabTarget
:
Target
actions
:
Actions
}
;
let
actions
:
Actions
;
let
isInterrupted
:
boolean
;
function
addThreadEventListeners
(
thread
:
ThreadFront
)
{
Object
.
keys
(
clientEvents
)
.
forEach
(
eventName
=
>
{
thread
.
on
(
eventName
clientEvents
[
eventName
]
.
bind
(
null
thread
)
)
;
}
)
;
}
function
setupEvents
(
dependencies
:
Dependencies
)
{
const
{
tabTarget
threadFront
}
=
dependencies
;
actions
=
dependencies
.
actions
;
sourceQueue
.
initialize
(
actions
)
;
addThreadEventListeners
(
threadFront
)
;
tabTarget
.
on
(
"
workerListChanged
"
(
)
=
>
threadListChanged
(
"
worker
"
)
)
;
tabTarget
.
on
(
"
processListChanged
"
(
)
=
>
threadListChanged
(
"
contentProcess
"
)
)
;
}
async
function
paused
(
threadFront
:
ThreadFront
packet
:
PausedPacket
)
{
const
{
why
}
=
packet
;
if
(
why
.
type
=
=
=
"
interrupted
"
&
&
!
packet
.
why
.
onNext
)
{
isInterrupted
=
true
;
return
;
}
let
response
;
try
{
response
=
await
threadFront
.
getFrames
(
0
CALL_STACK_PAGE_SIZE
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
;
return
;
}
if
(
!
response
.
hasOwnProperty
(
"
frames
"
)
)
{
return
;
}
if
(
why
.
type
!
=
"
alreadyPaused
"
)
{
const
pause
=
createPause
(
threadFront
.
actor
packet
response
)
;
await
sourceQueue
.
flush
(
)
;
actions
.
paused
(
pause
)
;
}
recordEvent
(
"
pause
"
{
reason
:
why
.
type
}
)
;
}
function
resumed
(
threadFront
:
ThreadFront
)
{
if
(
isInterrupted
)
{
isInterrupted
=
false
;
return
;
}
actions
.
resumed
(
threadFront
.
actorID
)
;
}
function
newSource
(
threadFront
:
ThreadFront
{
source
}
:
SourcePacket
)
{
sourceQueue
.
queue
(
{
type
:
"
generated
"
data
:
prepareSourcePayload
(
threadFront
source
)
}
)
;
}
function
threadListChanged
(
type
)
{
actions
.
updateThreads
(
type
)
;
}
const
clientEvents
=
{
paused
resumed
newSource
}
;
export
{
setupEvents
clientEvents
addThreadEventListeners
}
;
