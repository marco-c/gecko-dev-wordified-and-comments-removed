import
{
onConnect
}
from
"
.
.
/
.
.
/
firefox
"
;
const
threadFront
=
{
on
:
(
)
=
>
{
}
reconfigure
:
(
)
=
>
{
}
getSources
:
(
)
=
>
{
return
{
sources
:
[
{
id
:
"
s
.
js
"
url
:
"
file
:
/
/
/
tmp
/
s
.
js
"
}
]
}
;
}
getLastPausePacket
:
(
)
=
>
null
_parent
:
{
addListener
:
(
)
=
>
{
}
listWorkers
:
(
)
=
>
new
Promise
(
resolve
=
>
resolve
(
{
workers
:
[
]
}
)
)
}
}
;
const
targetList
=
{
targetFront
:
{
on
:
(
)
=
>
{
}
_form
:
{
url
:
"
url
"
}
threadFront
}
}
;
const
devToolsClient
=
{
mainRoot
:
{
traits
:
{
}
}
}
;
const
actions
=
{
_sources
:
[
]
connect
:
(
)
=
>
{
}
setWorkers
:
(
)
=
>
{
}
newSources
:
function
(
sources
)
{
return
new
Promise
(
resolve
=
>
{
setTimeout
(
(
)
=
>
{
this
.
_sources
=
sources
;
resolve
(
)
;
}
0
)
;
}
)
;
}
}
;
describe
(
"
firefox
onConnect
"
(
)
=
>
{
it
(
"
wait
for
sources
at
startup
"
async
(
)
=
>
{
await
onConnect
(
{
targetList
devToolsClient
}
actions
)
;
expect
(
actions
.
_sources
)
.
toHaveLength
(
1
)
;
expect
(
actions
.
_sources
[
0
]
.
url
)
.
toEqual
(
"
file
:
/
/
/
tmp
/
s
.
js
"
)
;
}
)
;
}
)
;
