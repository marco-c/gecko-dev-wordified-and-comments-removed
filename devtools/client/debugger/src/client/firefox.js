import
{
setupCommands
setupCommandsTopTarget
clientCommands
}
from
"
.
/
firefox
/
commands
"
;
import
{
setupEvents
setupEventsTopTarget
clientEvents
}
from
"
.
/
firefox
/
events
"
;
import
{
features
prefs
}
from
"
.
.
/
utils
/
prefs
"
;
export
async
function
onConnect
(
connection
:
any
actions
:
Object
)
{
const
{
debuggerClient
targetList
}
=
connection
;
setupCommands
(
{
debuggerClient
}
)
;
setupEvents
(
{
actions
debuggerClient
}
)
;
const
currentTarget
=
targetList
.
targetFront
;
const
threadFront
=
currentTarget
.
threadFront
;
if
(
!
currentTarget
|
|
!
threadFront
|
|
!
debuggerClient
)
{
return
;
}
setupCommandsTopTarget
(
currentTarget
)
;
setupEventsTopTarget
(
currentTarget
)
;
currentTarget
.
on
(
"
will
-
navigate
"
actions
.
willNavigate
)
;
currentTarget
.
on
(
"
navigate
"
actions
.
navigated
)
;
const
wasmBinarySource
=
features
.
wasm
&
&
!
!
debuggerClient
.
mainRoot
.
traits
.
wasmBinarySource
;
await
threadFront
.
reconfigure
(
{
observeAsmJS
:
true
pauseWorkersUntilAttach
:
true
wasmBinarySource
skipBreakpoints
:
prefs
.
skipPausing
logEventBreakpoints
:
prefs
.
logEventBreakpoints
}
)
;
actions
.
getEventListenerBreakpointTypes
(
)
.
catch
(
e
=
>
console
.
error
(
e
)
)
;
actions
.
addEventListenerBreakpoints
(
[
]
)
.
catch
(
e
=
>
console
.
error
(
e
)
)
;
const
{
traits
}
=
currentTarget
;
await
actions
.
connect
(
currentTarget
.
url
threadFront
.
actor
traits
currentTarget
.
isWebExtension
)
;
const
sources
=
await
clientCommands
.
fetchSources
(
)
;
await
actions
.
newGeneratedSources
(
sources
)
;
await
clientCommands
.
checkIfAlreadyPaused
(
)
;
}
export
{
clientCommands
clientEvents
}
;
