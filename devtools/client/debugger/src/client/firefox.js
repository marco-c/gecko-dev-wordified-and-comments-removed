import
{
setupCommands
clientCommands
}
from
"
.
/
firefox
/
commands
"
;
import
{
setupEvents
clientEvents
}
from
"
.
/
firefox
/
events
"
;
import
{
features
prefs
}
from
"
.
.
/
utils
/
prefs
"
;
import
type
{
Grip
}
from
"
.
.
/
types
"
;
let
DebuggerClient
;
function
createObjectClient
(
grip
:
Grip
)
{
return
DebuggerClient
.
createObjectClient
(
grip
)
;
}
export
async
function
onConnect
(
connection
:
any
actions
:
Object
)
{
const
{
tabConnection
:
{
tabTarget
threadClient
debuggerClient
}
}
=
connection
;
DebuggerClient
=
debuggerClient
;
if
(
!
tabTarget
|
|
!
threadClient
|
|
!
debuggerClient
)
{
return
;
}
const
supportsWasm
=
features
.
wasm
&
&
!
!
debuggerClient
.
mainRoot
.
traits
.
wasmBinarySource
;
setupCommands
(
{
threadClient
tabTarget
debuggerClient
supportsWasm
}
)
;
setupEvents
(
{
threadClient
tabTarget
actions
supportsWasm
}
)
;
tabTarget
.
on
(
"
will
-
navigate
"
actions
.
willNavigate
)
;
tabTarget
.
on
(
"
navigate
"
actions
.
navigated
)
;
await
threadClient
.
reconfigure
(
{
observeAsmJS
:
true
pauseWorkersUntilAttach
:
true
wasmBinarySource
:
supportsWasm
skipBreakpoints
:
prefs
.
skipPausing
}
)
;
const
sourceInfo
=
await
clientCommands
.
fetchSources
(
)
;
const
traits
=
tabTarget
.
traits
;
await
actions
.
connect
(
tabTarget
.
url
threadClient
.
actor
traits
&
&
traits
.
canRewind
)
;
await
actions
.
newGeneratedSources
(
sourceInfo
)
;
const
pausedPacket
=
threadClient
.
getLastPausePacket
(
)
;
if
(
pausedPacket
)
{
clientEvents
.
paused
(
threadClient
"
paused
"
pausedPacket
)
;
}
}
export
{
createObjectClient
clientCommands
clientEvents
}
;
