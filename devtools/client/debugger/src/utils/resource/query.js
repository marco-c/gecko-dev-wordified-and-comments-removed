import
{
makeResourceQuery
}
from
"
.
/
base
-
query
"
;
import
{
queryCacheWeak
queryCacheShallow
queryCacheStrict
}
from
"
.
/
query
-
cache
"
;
import
{
memoizeResourceShallow
}
from
"
.
/
memoize
"
;
import
{
shallowEqual
}
from
"
.
/
compare
"
;
export
function
filterAllIds
(
values
)
{
return
Object
.
keys
(
values
)
;
}
export
function
makeWeakQuery
(
{
filter
map
reduce
}
)
{
return
makeResourceQuery
(
{
cache
:
queryCacheWeak
filter
map
:
memoizeResourceShallow
(
map
)
reduce
resultCompare
:
shallowEqual
}
)
;
}
export
function
makeShallowQuery
(
{
filter
map
reduce
}
)
{
return
makeResourceQuery
(
{
cache
:
queryCacheShallow
filter
map
:
memoizeResourceShallow
(
map
)
reduce
resultCompare
:
shallowEqual
}
)
;
}
export
function
makeStrictQuery
(
{
filter
map
reduce
}
)
{
return
makeResourceQuery
(
{
cache
:
queryCacheStrict
filter
map
:
memoizeResourceShallow
(
map
)
reduce
resultCompare
:
shallowEqual
}
)
;
}
export
function
makeIdQuery
(
map
)
{
return
makeWeakQuery
(
{
filter
:
(
state
ids
)
=
>
ids
map
:
(
r
identity
)
=
>
map
(
r
identity
)
reduce
:
items
=
>
items
.
slice
(
)
}
)
;
}
export
function
makeLoadQuery
(
map
)
{
return
makeWeakQuery
(
{
filter
:
(
state
ids
)
=
>
ids
map
:
(
r
identity
)
=
>
map
(
r
identity
)
reduce
:
reduceMappedArrayToObject
}
)
;
}
export
function
makeFilterQuery
(
filter
map
)
{
return
makeWeakQuery
(
{
filter
:
(
values
args
)
=
>
{
const
ids
=
[
]
;
for
(
const
id
of
Object
.
keys
(
values
)
)
{
if
(
filter
(
values
[
id
]
args
)
)
{
ids
.
push
(
id
)
;
}
}
return
ids
;
}
map
reduce
:
reduceMappedArrayToObject
}
)
;
}
export
function
makeReduceQuery
(
map
reduce
)
{
return
makeShallowQuery
(
{
filter
:
filterAllIds
map
reduce
}
)
;
}
export
function
makeReduceAllQuery
(
map
reduce
)
{
return
makeStrictQuery
(
{
filter
:
filterAllIds
map
reduce
}
)
;
}
function
reduceMappedArrayToObject
(
items
ids
args
)
{
return
items
.
reduce
(
(
acc
item
i
)
=
>
{
acc
[
ids
[
i
]
]
=
item
;
return
acc
;
}
{
}
)
;
}
