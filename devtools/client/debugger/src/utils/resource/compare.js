export
function
strictEqual
(
value
:
mixed
other
:
mixed
)
:
boolean
{
return
value
=
=
=
other
;
}
export
function
shallowEqual
(
value
:
mixed
other
:
mixed
)
:
boolean
{
return
(
value
=
=
=
other
|
|
(
Array
.
isArray
(
value
)
&
&
Array
.
isArray
(
other
)
&
&
arrayShallowEqual
(
value
other
)
)
|
|
(
isObject
(
value
)
&
&
isObject
(
other
)
&
&
objectShallowEqual
(
value
other
)
)
)
;
}
export
function
arrayShallowEqual
(
value
:
ReadOnlyArray
<
mixed
>
other
:
ReadOnlyArray
<
mixed
>
)
:
boolean
{
return
value
.
length
=
=
=
other
.
length
&
&
value
.
every
(
(
k
i
)
=
>
k
=
=
=
other
[
i
]
)
;
}
function
objectShallowEqual
(
value
:
{
[
string
]
:
mixed
}
other
:
{
[
string
]
:
mixed
}
)
:
boolean
{
const
existingKeys
=
Object
.
keys
(
other
)
;
const
keys
=
Object
.
keys
(
value
)
;
return
(
keys
.
length
=
=
=
existingKeys
.
length
&
&
keys
.
every
(
(
k
i
)
=
>
k
=
=
=
existingKeys
[
i
]
)
&
&
keys
.
every
(
(
k
i
)
=
>
value
[
k
]
=
=
=
other
[
existingKeys
[
i
]
]
)
)
;
}
function
isObject
(
value
:
mixed
)
:
boolean
%
checks
{
return
typeof
value
=
=
=
"
object
"
&
&
!
!
value
;
}
