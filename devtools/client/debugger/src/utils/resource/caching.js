import
{
getFields
type
Resource
type
Id
type
State
}
from
"
.
/
core
"
;
export
type
FieldByIDGetter
<
R
:
Resource
K
:
Keys
<
R
>
>
=
FieldByIDMapper
<
R
ElementType
<
R
K
>
>
;
export
function
createFieldByIDGetter
<
R
:
Resource
K
:
Keys
<
R
>
>
(
field
:
K
)
:
FieldByIDGetter
<
R
K
>
{
return
createFieldByIDMapper
(
field
v
=
>
v
)
;
}
export
type
FieldByIDMapper
<
R
:
Resource
T
>
=
FieldByIDReducer
<
R
Array
<
T
>
>
;
export
function
createFieldByIDMapper
<
R
:
Resource
K
:
Keys
<
R
>
T
>
(
field
:
K
mapper
:
(
value
:
ElementType
<
R
K
>
id
:
Id
<
R
>
i
:
number
)
=
>
T
)
:
FieldByIDMapper
<
R
T
>
{
return
createFieldByIDReducer
(
field
(
acc
value
id
i
)
=
>
{
acc
.
push
(
mapper
(
value
id
i
)
)
;
return
acc
;
}
(
)
=
>
[
]
)
;
}
export
type
FieldByIDReducer
<
R
:
Resource
T
>
=
(
State
<
R
>
ReadOnlyArray
<
Id
<
R
>
>
|
Set
<
Id
<
R
>
>
)
=
>
T
;
export
function
createFieldByIDReducer
<
R
:
Resource
K
:
Keys
<
R
>
T
>
(
field
:
K
reducer
:
(
acc
:
T
value
:
ElementType
<
R
K
>
id
:
Id
<
R
>
i
:
number
)
=
>
T
initial
:
(
)
=
>
T
)
:
FieldByIDReducer
<
R
T
>
{
const
cache
=
new
WeakMap
(
)
;
const
handler
=
(
acc
{
id
value
}
i
)
=
>
reducer
(
acc
value
id
i
)
;
return
(
state
ids
)
=
>
{
const
fields
=
getFields
(
state
)
;
const
fieldValues
=
fields
[
field
]
;
if
(
!
fieldValues
)
{
throw
new
Error
(
Field
"
{
field
}
"
does
not
exist
in
this
resource
.
)
;
}
let
result
=
cache
.
get
(
ids
)
;
if
(
!
result
|
|
result
.
fieldValues
!
=
=
fieldValues
)
{
if
(
!
Array
.
isArray
(
ids
)
)
{
ids
=
Array
.
from
(
ids
)
;
}
const
items
=
ids
.
map
(
id
=
>
{
if
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
fields
.
item
id
)
)
{
throw
new
Error
(
Resource
item
{
id
}
not
found
)
;
}
return
{
id
value
:
fieldValues
[
id
]
}
;
}
)
;
if
(
!
result
|
|
result
.
items
.
length
!
=
=
items
.
length
|
|
result
.
items
.
some
(
(
item
i
)
=
>
items
[
i
]
.
id
!
=
=
item
.
id
|
|
items
[
i
]
.
value
!
=
=
item
.
value
)
)
{
result
=
{
fieldValues
items
value
:
items
.
reduce
(
handler
initial
(
)
)
}
;
cache
.
set
(
ids
result
)
;
}
else
{
result
.
fieldValues
=
fieldValues
;
}
}
return
result
.
value
;
}
;
}
export
type
FieldReducer
<
R
:
Resource
T
>
=
(
State
<
R
>
)
=
>
T
;
export
function
createFieldReducer
<
R
:
Resource
K
:
Keys
<
R
>
T
>
(
field
:
K
reducer
:
(
acc
:
T
value
:
ElementType
<
R
K
>
id
:
Id
<
R
>
)
=
>
T
initial
:
(
)
=
>
T
)
:
FieldReducer
<
R
T
>
{
const
cache
=
new
WeakMap
(
)
;
return
state
=
>
{
const
fieldValues
=
getFields
(
state
)
[
field
]
;
if
(
cache
.
has
(
fieldValues
)
)
{
return
(
cache
.
get
(
fieldValues
)
:
any
)
;
}
let
result
=
initial
(
)
;
for
(
const
id
of
Object
.
keys
(
fieldValues
)
)
{
result
=
reducer
(
result
fieldValues
[
id
]
id
)
;
}
cache
.
set
(
fieldValues
result
)
;
return
result
;
}
;
}
