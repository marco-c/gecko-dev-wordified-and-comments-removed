import
{
strictEqual
shallowEqual
}
from
"
.
/
compare
"
;
export
function
queryCacheWeak
(
handler
)
{
const
cache
=
new
WeakMap
(
)
;
return
makeCacheFunction
(
{
handler
compareArgs
:
(
)
=
>
true
getEntry
:
args
=
>
cache
.
get
(
args
)
|
|
null
setEntry
:
(
args
entry
)
=
>
{
cache
.
set
(
args
entry
)
;
}
}
)
;
}
export
function
queryCacheShallow
(
handler
)
{
let
latestEntry
=
null
;
return
makeCacheFunction
(
{
handler
compareArgs
:
shallowEqual
getEntry
:
(
)
=
>
latestEntry
setEntry
:
(
args
entry
)
=
>
{
latestEntry
=
entry
;
}
}
)
;
}
export
function
queryCacheStrict
(
handler
)
{
let
latestEntry
=
null
;
return
makeCacheFunction
(
{
handler
compareArgs
:
strictEqual
getEntry
:
(
)
=
>
latestEntry
setEntry
:
(
args
entry
)
=
>
{
latestEntry
=
entry
;
}
}
)
;
}
function
makeCacheFunction
(
info
)
{
const
{
handler
compareArgs
getEntry
setEntry
}
=
info
;
return
(
state
args
)
=
>
{
let
entry
=
getEntry
(
args
)
;
const
sameArgs
=
!
!
entry
&
&
compareArgs
(
entry
.
context
.
args
args
)
;
const
sameState
=
!
!
entry
&
&
entry
.
state
=
=
=
state
;
if
(
!
entry
|
|
!
sameArgs
|
|
!
sameState
)
{
const
context
=
!
entry
|
|
!
sameArgs
?
{
args
identMap
:
new
WeakMap
(
)
}
:
entry
.
context
;
const
result
=
handler
(
state
context
entry
?
entry
.
result
:
null
)
;
if
(
entry
)
{
entry
.
context
=
context
;
entry
.
state
=
state
;
entry
.
result
=
result
;
}
else
{
entry
=
{
context
state
result
}
;
setEntry
(
args
entry
)
;
}
}
return
entry
.
result
.
reduced
;
}
;
}
