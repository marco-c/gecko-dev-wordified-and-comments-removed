import
buildQuery
from
"
.
.
/
build
-
query
"
;
import
{
markerTypes
}
from
"
.
.
/
.
.
/
constants
"
;
function
SearchState
(
)
{
this
.
posFrom
=
this
.
posTo
=
this
.
query
=
null
;
this
.
overlay
=
null
;
this
.
results
=
[
]
;
}
function
getSearchState
(
cm
)
{
const
state
=
cm
.
state
.
search
|
|
(
cm
.
state
.
search
=
new
SearchState
(
)
)
;
return
state
;
}
function
isWhitespace
(
query
)
{
return
!
query
.
match
(
/
\
S
/
)
;
}
export
function
getMatchIndex
(
count
currentIndex
rev
)
{
if
(
!
rev
)
{
if
(
currentIndex
=
=
count
-
1
)
{
return
0
;
}
return
currentIndex
+
1
;
}
if
(
currentIndex
=
=
0
)
{
return
count
-
1
;
}
return
currentIndex
-
1
;
}
function
doSearch
(
ctx
rev
query
keepSelection
modifiers
{
shouldScroll
=
true
}
)
{
const
{
editor
}
=
ctx
;
if
(
!
query
|
|
isWhitespace
(
query
)
)
{
editor
.
clearSearchMatches
(
)
;
return
null
;
}
const
regexQuery
=
buildQuery
(
query
modifiers
{
ignoreSpaces
:
true
isGlobal
:
true
}
)
;
if
(
editor
.
searchState
.
query
?
.
toString
(
)
!
=
=
regexQuery
.
toString
(
)
)
{
editor
.
highlightSearchMatches
(
regexQuery
"
cm
-
highlight
"
)
;
}
const
cursor
=
editor
.
getNextSearchCursor
(
rev
)
;
if
(
!
cursor
)
{
return
null
;
}
editor
.
setPositionContentMarker
(
{
id
:
markerTypes
.
ACTIVE_SELECTION_MARKER
positionClassName
:
"
cm
-
matchhighlight
"
positions
:
[
{
from
:
cursor
.
from
to
:
cursor
.
to
}
]
}
)
;
if
(
shouldScroll
)
{
editor
.
scrollToPosition
(
cursor
.
from
)
;
}
return
editor
.
getPositionFromSearchCursor
(
cursor
)
;
}
export
function
searchSourceForHighlight
(
ctx
rev
query
keepSelection
modifiers
)
{
const
{
editor
}
=
ctx
;
if
(
!
query
|
|
isWhitespace
(
query
)
)
{
editor
.
clearSearchMatches
(
)
;
return
;
}
const
regexQuery
=
buildQuery
(
query
modifiers
{
ignoreSpaces
:
true
isGlobal
:
true
}
)
;
if
(
editor
.
searchState
.
query
?
.
toString
(
)
!
=
=
regexQuery
.
toString
(
)
)
{
editor
.
highlightSearchMatches
(
regexQuery
"
cm
-
highlight
"
)
;
}
}
export
function
removeOverlay
(
ctx
)
{
const
state
=
getSearchState
(
ctx
.
cm
)
;
ctx
.
cm
.
removeOverlay
(
state
.
overlay
)
;
const
{
line
ch
}
=
ctx
.
cm
.
getCursor
(
)
;
ctx
.
cm
.
doc
.
setSelection
(
{
line
ch
}
{
line
ch
}
{
scroll
:
false
}
)
;
}
export
function
clearSearch
(
ctx
)
{
const
{
editor
}
=
ctx
;
editor
.
clearSearchMatches
(
)
;
editor
.
removePositionContentMarker
(
"
active
-
selection
-
marker
"
)
;
}
export
function
find
(
ctx
query
keepSelection
modifiers
options
)
{
clearSearch
(
ctx
)
;
return
doSearch
(
ctx
false
query
keepSelection
modifiers
options
)
;
}
export
function
findNext
(
ctx
query
keepSelection
modifiers
)
{
return
doSearch
(
ctx
false
query
keepSelection
modifiers
{
}
)
;
}
export
function
findPrev
(
ctx
query
keepSelection
modifiers
)
{
return
doSearch
(
ctx
true
query
keepSelection
modifiers
{
}
)
;
}
export
{
buildQuery
}
;
