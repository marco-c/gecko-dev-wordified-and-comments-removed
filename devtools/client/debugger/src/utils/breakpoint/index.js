import
{
getSourceActorsForSource
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
isGenerated
}
from
"
.
.
/
source
"
;
import
{
sortSelectedLocations
}
from
"
.
.
/
location
"
;
export
*
from
"
.
/
breakpointPositions
"
;
export
function
makeBreakpointId
(
location
)
{
const
{
source
line
column
}
=
location
;
const
columnString
=
column
|
|
"
"
;
return
{
source
.
id
}
:
{
line
}
:
{
columnString
}
;
}
export
function
makeBreakpointServerLocationId
(
breakpointServerLocation
)
{
const
{
sourceUrl
sourceId
line
column
}
=
breakpointServerLocation
;
const
sourceUrlOrId
=
sourceUrl
|
|
sourceId
;
const
columnString
=
column
|
|
"
"
;
return
{
sourceUrlOrId
}
:
{
line
}
:
{
columnString
}
;
}
export
function
makeBreakpointServerOptions
(
options
)
{
return
{
logValue
:
options
.
logValue
condition
:
options
.
condition
}
;
}
export
function
makeBreakpointServerLocation
(
state
location
)
{
const
source
=
location
.
source
;
if
(
!
source
)
{
throw
new
Error
(
"
Missing
'
source
'
attribute
on
location
object
"
)
;
}
const
breakpointLocation
=
{
line
:
location
.
line
column
:
location
.
column
}
;
if
(
source
.
url
)
{
breakpointLocation
.
sourceUrl
=
source
.
url
;
}
else
{
breakpointLocation
.
sourceId
=
getSourceActorsForSource
(
state
source
.
id
)
[
0
]
.
id
;
}
return
breakpointLocation
;
}
export
function
createXHRBreakpoint
(
path
method
overrides
=
{
}
)
{
const
properties
=
{
path
method
disabled
:
false
loading
:
false
text
:
L10N
.
getFormatStr
(
"
xhrBreakpoints
.
item
.
label
"
path
)
}
;
return
{
.
.
.
properties
.
.
.
overrides
}
;
}
export
function
getSelectedText
(
breakpoint
selectedSource
)
{
return
!
!
selectedSource
&
&
isGenerated
(
selectedSource
)
?
breakpoint
.
text
:
breakpoint
.
originalText
;
}
export
function
sortSelectedBreakpoints
(
breakpoints
selectedSource
)
{
return
sortSelectedLocations
(
breakpoints
selectedSource
)
;
}
