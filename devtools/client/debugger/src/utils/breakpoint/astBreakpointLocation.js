import
{
findClosestFunction
}
from
"
.
.
/
ast
"
;
import
type
{
SourceLocation
Source
ASTLocation
}
from
"
.
.
/
.
.
/
types
"
;
import
type
{
Symbols
}
from
"
.
.
/
.
.
/
reducers
/
ast
"
;
export
function
getASTLocation
(
source
:
Source
symbols
:
?
Symbols
location
:
SourceLocation
)
:
ASTLocation
{
if
(
source
.
isWasm
|
|
!
symbols
|
|
symbols
.
loading
)
{
return
{
name
:
undefined
offset
:
location
index
:
0
}
;
}
const
scope
=
findClosestFunction
(
symbols
location
)
;
if
(
scope
)
{
const
line
=
location
.
line
-
scope
.
location
.
start
.
line
;
return
{
name
:
scope
.
name
offset
:
{
line
column
:
undefined
}
index
:
scope
.
index
}
;
}
return
{
name
:
undefined
offset
:
location
index
:
0
}
;
}
export
function
findFunctionByName
(
symbols
:
Symbols
name
:
?
string
index
:
number
)
{
if
(
symbols
.
loading
)
{
return
null
;
}
return
symbols
.
functions
.
find
(
node
=
>
node
.
name
=
=
=
name
&
&
node
.
index
=
=
=
index
)
;
}
