import
{
throttle
}
from
"
lodash
"
;
let
newQueuedSources
;
let
queuedSources
;
let
currentWork
;
async
function
dispatchNewSources
(
)
{
const
sources
=
queuedSources
;
queuedSources
=
[
]
;
currentWork
=
await
newQueuedSources
(
sources
)
;
}
const
queue
=
throttle
(
dispatchNewSources
100
)
;
export
default
{
initialize
:
actions
=
>
{
newQueuedSources
=
actions
.
newQueuedSources
;
queuedSources
=
[
]
;
}
queue
:
source
=
>
{
queuedSources
.
push
(
source
)
;
queue
(
)
;
}
queueSources
:
sources
=
>
{
if
(
sources
.
length
>
0
)
{
queuedSources
=
queuedSources
.
concat
(
sources
)
;
queue
(
)
;
}
}
flush
:
(
)
=
>
Promise
.
all
(
[
queue
.
flush
(
)
currentWork
]
)
clear
:
(
)
=
>
{
queuedSources
=
[
]
;
queue
.
cancel
(
)
;
}
}
;
