const
{
throttle
}
=
require
(
"
devtools
/
shared
/
throttle
"
)
;
let
newOriginalQueuedSources
;
let
queuedOriginalSources
;
let
currentWork
;
async
function
dispatchNewSources
(
)
{
const
sources
=
queuedOriginalSources
;
queuedOriginalSources
=
[
]
;
currentWork
=
await
newOriginalQueuedSources
(
sources
)
;
}
const
queue
=
throttle
(
dispatchNewSources
100
)
;
export
default
{
initialize
:
actions
=
>
{
newOriginalQueuedSources
=
actions
.
newOriginalSources
;
queuedOriginalSources
=
[
]
;
}
queueOriginalSources
:
sources
=
>
{
if
(
sources
.
length
)
{
queuedOriginalSources
=
queuedOriginalSources
.
concat
(
sources
)
;
queue
(
)
;
}
}
flush
:
(
)
=
>
Promise
.
all
(
[
queue
.
flush
(
)
currentWork
]
)
clear
:
(
)
=
>
{
queuedOriginalSources
=
[
]
;
queue
.
cancel
(
)
;
}
}
;
