import
{
addToTree
}
from
"
.
/
addToTree
"
;
import
{
collapseTree
}
from
"
.
/
collapseTree
"
;
import
{
createDirectoryNode
createParentMap
getPathParts
isInvalidUrl
}
from
"
.
/
utils
"
;
import
{
getDomain
createTreeNodeMatcher
findNodeInContents
}
from
"
.
/
treeOrder
"
;
import
{
getDisplayURL
}
from
"
.
/
getURL
"
;
function
getSourcesDiff
(
newSources
prevSources
)
{
const
toAdd
=
[
]
;
const
toUpdate
=
[
]
;
for
(
const
sourceId
in
newSources
)
{
const
newSource
=
newSources
[
sourceId
]
;
const
prevSource
=
prevSources
?
prevSources
[
sourceId
]
:
null
;
if
(
!
prevSource
)
{
toAdd
.
push
(
newSource
)
;
}
else
if
(
prevSource
.
displayURL
!
=
=
newSource
.
displayURL
)
{
toUpdate
.
push
(
[
prevSource
newSource
]
)
;
}
}
return
{
toAdd
toUpdate
}
;
}
export
function
createTree
(
{
debuggeeUrl
sources
threads
}
)
{
const
uncollapsedTree
=
createDirectoryNode
(
"
root
"
"
"
[
]
)
;
const
result
=
updateTree
(
{
debuggeeUrl
newSources
:
sources
prevSources
:
{
}
threads
uncollapsedTree
}
)
;
if
(
!
result
)
{
throw
new
Error
(
"
Tree
must
exist
"
)
;
}
return
result
;
}
export
function
updateTree
(
{
newSources
prevSources
debuggeeUrl
uncollapsedTree
threads
create
sourceTree
}
)
{
const
debuggeeHost
=
getDomain
(
debuggeeUrl
)
;
const
contexts
=
Object
.
keys
(
newSources
)
;
let
shouldUpdate
=
!
sourceTree
;
for
(
const
context
of
contexts
)
{
const
thread
=
threads
.
find
(
t
=
>
t
.
actor
=
=
=
context
)
;
if
(
!
thread
)
{
continue
;
}
const
{
toAdd
toUpdate
}
=
getSourcesDiff
(
Object
.
values
(
newSources
[
context
]
)
prevSources
[
context
]
?
Object
.
values
(
prevSources
[
context
]
)
:
null
)
;
for
(
const
source
of
toAdd
)
{
shouldUpdate
=
true
;
addToTree
(
uncollapsedTree
source
debuggeeHost
thread
.
actor
)
;
}
for
(
const
[
prevSource
newSource
]
of
toUpdate
)
{
shouldUpdate
=
true
;
updateInTree
(
uncollapsedTree
prevSource
newSource
debuggeeHost
thread
.
actor
)
;
}
}
if
(
!
shouldUpdate
)
{
return
false
;
}
const
newSourceTree
=
collapseTree
(
uncollapsedTree
)
;
let
lazyParentMap
;
const
getParent
=
function
(
key
)
{
if
(
!
lazyParentMap
)
{
lazyParentMap
=
createParentMap
(
newSourceTree
)
;
}
return
lazyParentMap
.
get
(
key
)
;
}
;
return
{
uncollapsedTree
sourceTree
:
newSourceTree
getParent
}
;
}
export
function
updateInTree
(
tree
prevSource
newSource
debuggeeHost
thread
)
{
const
newUrl
=
getDisplayURL
(
newSource
debuggeeHost
)
;
const
prevUrl
=
getDisplayURL
(
prevSource
debuggeeHost
)
;
const
prevEntries
=
findEntries
(
tree
prevUrl
prevSource
thread
debuggeeHost
)
;
if
(
!
prevEntries
)
{
return
;
}
if
(
!
isInvalidUrl
(
newUrl
newSource
)
)
{
const
parts
=
getPathParts
(
newUrl
thread
debuggeeHost
)
;
if
(
parts
.
length
=
=
=
prevEntries
.
length
)
{
let
match
=
true
;
for
(
let
i
=
0
;
i
<
parts
.
length
-
2
;
i
+
+
)
{
if
(
parts
[
i
]
.
path
!
=
=
prevEntries
[
i
+
1
]
.
node
.
path
)
{
match
=
false
;
break
;
}
}
if
(
match
)
{
const
{
node
index
}
=
prevEntries
.
pop
(
)
;
const
fileNode
=
node
.
contents
[
index
]
;
fileNode
.
name
=
parts
[
parts
.
length
-
1
]
.
part
;
fileNode
.
path
=
parts
[
parts
.
length
-
1
]
.
path
;
fileNode
.
contents
=
newSource
;
return
;
}
}
}
for
(
let
i
=
prevEntries
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
const
{
node
index
}
=
prevEntries
[
i
]
;
if
(
node
.
contents
.
length
>
1
|
|
(
i
=
=
=
0
&
&
thread
)
)
{
node
.
contents
.
splice
(
index
1
)
;
break
;
}
}
addToTree
(
tree
newSource
debuggeeHost
thread
)
;
}
function
findEntries
(
tree
url
source
thread
debuggeeHost
)
{
const
parts
=
getPathParts
(
url
thread
debuggeeHost
)
;
parts
.
pop
(
)
;
const
entries
=
[
]
;
let
currentNode
=
tree
;
for
(
const
{
part
}
of
parts
)
{
const
{
found
:
childFound
index
:
childIndex
}
=
findNodeInContents
(
currentNode
createTreeNodeMatcher
(
part
true
debuggeeHost
)
)
;
if
(
!
childFound
|
|
currentNode
.
type
!
=
=
"
directory
"
)
{
return
null
;
}
entries
.
push
(
{
node
:
currentNode
index
:
childIndex
}
)
;
currentNode
=
currentNode
.
contents
[
childIndex
]
;
}
const
found
=
(
function
search
(
node
)
{
if
(
node
.
type
!
=
=
"
directory
"
)
{
if
(
node
.
contents
.
id
=
=
=
source
.
id
)
{
return
[
]
;
}
return
null
;
}
for
(
let
i
=
0
;
i
<
node
.
contents
.
length
;
i
+
+
)
{
const
child
=
node
.
contents
[
i
]
;
const
result
=
search
(
child
)
;
if
(
result
)
{
result
.
unshift
(
{
node
index
:
i
}
)
;
return
result
;
}
}
return
null
;
}
)
(
currentNode
)
;
return
found
?
[
.
.
.
entries
.
.
.
found
]
:
null
;
}
