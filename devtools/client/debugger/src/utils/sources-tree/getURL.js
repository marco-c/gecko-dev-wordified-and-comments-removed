import
{
parse
}
from
"
.
.
/
url
"
;
const
{
getUnicodeHostname
getUnicodeUrlPath
}
=
require
(
"
devtools
/
client
/
shared
/
unicode
-
url
"
)
;
export
function
getFilenameFromPath
(
pathname
)
{
let
filename
=
"
"
;
if
(
pathname
)
{
filename
=
pathname
.
substring
(
pathname
.
lastIndexOf
(
"
/
"
)
+
1
)
;
if
(
filename
=
=
"
"
)
{
filename
=
"
(
index
)
"
;
}
}
return
filename
;
}
const
NoDomain
=
"
(
no
domain
)
"
;
const
def
=
{
path
:
"
"
search
:
"
"
group
:
"
"
filename
:
"
"
}
;
export
function
getDisplayURL
(
url
)
{
if
(
!
url
)
{
return
def
;
}
const
{
pathname
search
protocol
host
}
=
parse
(
url
)
;
const
filename
=
getUnicodeUrlPath
(
getFilenameFromPath
(
pathname
)
)
;
switch
(
protocol
)
{
case
"
javascript
:
"
:
return
def
;
case
"
moz
-
extension
:
"
:
case
"
resource
:
"
:
return
{
.
.
.
def
path
:
pathname
search
filename
group
:
{
protocol
}
/
/
{
host
|
|
"
"
}
}
;
case
"
webpack
:
"
:
case
"
ng
:
"
:
return
{
.
.
.
def
path
:
pathname
search
filename
group
:
{
protocol
}
/
/
}
;
case
"
about
:
"
:
return
{
.
.
.
def
path
:
"
/
"
search
filename
group
:
url
}
;
case
"
data
:
"
:
return
{
.
.
.
def
path
:
"
/
"
search
group
:
NoDomain
filename
:
url
}
;
case
"
"
:
if
(
pathname
&
&
pathname
.
startsWith
(
"
/
"
)
)
{
return
{
.
.
.
def
path
:
pathname
search
filename
group
:
"
file
:
/
/
"
}
;
}
else
if
(
!
host
)
{
return
{
.
.
.
def
path
:
pathname
search
group
:
"
"
filename
}
;
}
break
;
case
"
http
:
"
:
case
"
https
:
"
:
return
{
.
.
.
def
path
:
pathname
search
filename
group
:
getUnicodeHostname
(
host
)
}
;
}
return
{
.
.
.
def
path
:
pathname
search
group
:
protocol
?
{
protocol
}
/
/
:
"
"
filename
}
;
}
