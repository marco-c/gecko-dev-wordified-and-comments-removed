export
type
FulfilledValue
<
+
T
>
=
{
|
state
:
"
fulfilled
"
+
value
:
T
|
}
;
export
type
RejectedValue
=
{
|
state
:
"
rejected
"
value
:
mixed
|
}
;
export
type
PendingValue
=
{
|
state
:
"
pending
"
|
}
;
export
type
SettledValue
<
+
T
>
=
FulfilledValue
<
T
>
|
RejectedValue
;
export
type
AsyncValue
<
+
T
>
=
SettledValue
<
T
>
|
PendingValue
;
export
function
pending
(
)
:
PendingValue
{
return
{
state
:
"
pending
"
}
;
}
export
function
fulfilled
<
+
T
>
(
value
:
T
)
:
FulfilledValue
<
T
>
{
return
{
state
:
"
fulfilled
"
value
}
;
}
export
function
rejected
(
value
:
mixed
)
:
RejectedValue
{
return
{
state
:
"
rejected
"
value
}
;
}
export
function
isPending
(
value
:
AsyncValue
<
mixed
>
)
:
boolean
%
checks
{
return
value
.
state
=
=
=
"
pending
"
;
}
export
function
isFulfilled
(
value
:
AsyncValue
<
mixed
>
)
:
boolean
%
checks
{
return
value
.
state
=
=
=
"
fulfilled
"
;
}
export
function
isRejected
(
value
:
AsyncValue
<
mixed
>
)
:
boolean
%
checks
{
return
value
.
state
=
=
=
"
rejected
"
;
}
