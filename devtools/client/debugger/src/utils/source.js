const
{
getUnicodeUrl
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
unicode
-
url
.
js
"
)
;
const
{
micromatch
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
micromatch
/
micromatch
.
js
"
)
;
import
{
getRelativePath
}
from
"
.
.
/
utils
/
sources
-
tree
/
utils
"
;
import
{
endTruncateStr
}
from
"
.
/
utils
"
;
import
{
truncateMiddleText
}
from
"
.
.
/
utils
/
text
"
;
import
{
parse
as
parseURL
}
from
"
.
.
/
utils
/
url
"
;
import
{
memoizeLast
}
from
"
.
.
/
utils
/
memoizeLast
"
;
import
{
renderWasmText
}
from
"
.
/
wasm
"
;
import
{
toEditorLine
}
from
"
.
/
editor
/
index
"
;
export
{
isMinified
}
from
"
.
/
isMinified
"
;
import
{
isFulfilled
}
from
"
.
/
async
-
value
"
;
export
const
sourceTypes
=
{
coffee
:
"
coffeescript
"
js
:
"
javascript
"
jsx
:
"
react
"
ts
:
"
typescript
"
tsx
:
"
typescript
"
vue
:
"
vue
"
}
;
export
const
javascriptLikeExtensions
=
new
Set
(
[
"
marko
"
"
es6
"
"
vue
"
"
jsm
"
]
)
;
function
getPath
(
source
)
{
const
{
path
}
=
source
.
displayURL
;
let
lastIndex
=
path
.
lastIndexOf
(
"
/
"
)
;
let
nextToLastIndex
=
path
.
lastIndexOf
(
"
/
"
lastIndex
-
1
)
;
const
result
=
[
]
;
do
{
result
.
push
(
path
.
slice
(
nextToLastIndex
+
1
lastIndex
)
)
;
lastIndex
=
nextToLastIndex
;
nextToLastIndex
=
path
.
lastIndexOf
(
"
/
"
lastIndex
-
1
)
;
}
while
(
lastIndex
!
=
=
nextToLastIndex
)
;
result
.
push
(
"
"
)
;
return
result
;
}
export
function
shouldBlackbox
(
source
)
{
if
(
!
source
)
{
return
false
;
}
if
(
!
source
.
url
)
{
return
false
;
}
return
true
;
}
export
function
isFrameBlackBoxed
(
frame
blackboxedRanges
)
{
const
{
source
}
=
frame
.
location
;
return
(
!
!
blackboxedRanges
[
source
.
url
]
&
&
(
!
blackboxedRanges
[
source
.
url
]
.
length
|
|
!
!
findBlackBoxRange
(
source
blackboxedRanges
{
start
:
frame
.
location
.
line
end
:
frame
.
location
.
line
}
)
)
)
;
}
export
function
findBlackBoxRange
(
source
blackboxedRanges
lineRange
)
{
const
ranges
=
blackboxedRanges
[
source
.
url
]
;
if
(
!
ranges
|
|
!
ranges
.
length
)
{
return
null
;
}
return
ranges
.
find
(
range
=
>
(
lineRange
.
start
>
=
range
.
start
.
line
&
&
lineRange
.
start
<
=
range
.
end
.
line
)
|
|
(
lineRange
.
end
>
=
range
.
start
.
line
&
&
lineRange
.
end
<
=
range
.
end
.
line
)
)
;
}
export
function
isLineBlackboxed
(
ranges
line
isSourceOnIgnoreList
)
{
if
(
isSourceOnIgnoreList
)
{
return
true
;
}
if
(
!
ranges
)
{
return
false
;
}
if
(
!
ranges
.
length
)
{
return
true
;
}
return
!
!
ranges
.
find
(
range
=
>
line
>
=
range
.
start
.
line
&
&
line
<
=
range
.
end
.
line
)
;
}
export
function
isJavaScript
(
source
content
)
{
const
extension
=
source
.
displayURL
.
fileExtension
;
const
contentType
=
content
.
type
=
=
=
"
wasm
"
?
null
:
content
.
contentType
;
return
(
javascriptLikeExtensions
.
has
(
extension
)
|
|
!
!
(
contentType
&
&
contentType
.
includes
(
"
javascript
"
)
)
)
;
}
export
function
isPretty
(
source
)
{
return
isPrettyURL
(
source
.
url
)
;
}
export
function
isPrettyURL
(
url
)
{
return
url
?
url
.
endsWith
(
"
:
formatted
"
)
:
false
;
}
export
function
getPrettySourceURL
(
url
)
{
if
(
!
url
)
{
url
=
"
"
;
}
return
{
url
}
:
formatted
;
}
export
function
getRawSourceURL
(
url
)
{
return
url
&
&
url
.
endsWith
(
"
:
formatted
"
)
?
url
.
slice
(
0
-
"
:
formatted
"
.
length
)
:
url
;
}
function
resolveFileURL
(
url
transformUrl
=
initialUrl
=
>
initialUrl
truncate
=
true
)
{
url
=
getRawSourceURL
(
url
|
|
"
"
)
;
const
name
=
transformUrl
(
url
)
;
if
(
!
truncate
)
{
return
name
;
}
return
endTruncateStr
(
name
50
)
;
}
export
function
getFormattedSourceId
(
id
)
{
return
id
.
substring
(
id
.
lastIndexOf
(
"
/
"
)
+
1
)
;
}
export
function
getFilename
(
source
rawSourceURL
=
getRawSourceURL
(
source
.
url
)
)
{
const
{
id
}
=
source
;
if
(
!
rawSourceURL
)
{
return
getFormattedSourceId
(
id
)
;
}
const
{
filename
}
=
source
.
displayURL
;
return
getRawSourceURL
(
filename
)
;
}
export
function
getTruncatedFileName
(
source
)
{
return
truncateMiddleText
(
{
getFilename
(
source
)
}
{
source
.
displayURL
.
search
}
30
)
;
}
export
function
getDisplayPath
(
mySource
sources
)
{
const
rawSourceURL
=
getRawSourceURL
(
mySource
.
url
)
;
const
filename
=
getFilename
(
mySource
rawSourceURL
)
;
const
similarSources
=
sources
.
filter
(
source
=
>
{
const
rawSource
=
getRawSourceURL
(
source
.
url
)
;
return
(
rawSourceURL
!
=
rawSource
&
&
filename
=
=
getFilename
(
source
rawSource
)
)
;
}
)
;
if
(
!
similarSources
.
length
)
{
return
undefined
;
}
const
paths
=
new
Array
(
similarSources
.
length
+
1
)
;
paths
[
0
]
=
getPath
(
mySource
)
;
for
(
let
i
=
0
;
i
<
similarSources
.
length
;
+
+
i
)
{
paths
[
i
+
1
]
=
getPath
(
similarSources
[
i
]
)
;
}
let
displayPath
=
"
"
;
for
(
let
i
=
0
;
i
<
paths
[
0
]
.
length
;
i
+
+
)
{
let
similar
=
false
;
for
(
let
k
=
1
;
k
<
paths
.
length
;
+
+
k
)
{
if
(
paths
[
k
]
[
i
]
=
=
=
paths
[
0
]
[
i
]
)
{
similar
=
true
;
break
;
}
}
displayPath
=
paths
[
0
]
[
i
]
+
(
i
!
=
=
0
?
"
/
"
:
"
"
)
+
displayPath
;
if
(
!
similar
)
{
break
;
}
}
return
displayPath
;
}
export
function
getFileURL
(
source
truncate
=
true
)
{
const
{
url
id
}
=
source
;
if
(
!
url
)
{
return
getFormattedSourceId
(
id
)
;
}
return
resolveFileURL
(
url
getUnicodeUrl
truncate
)
;
}
export
function
getSourcePath
(
url
)
{
if
(
!
url
)
{
return
"
"
;
}
const
{
path
href
}
=
parseURL
(
url
)
;
return
path
|
|
href
;
}
export
function
getSourceLineCount
(
content
)
{
if
(
content
.
type
=
=
=
"
wasm
"
)
{
const
{
binary
}
=
content
.
value
;
return
binary
.
length
;
}
let
count
=
0
;
for
(
let
i
=
0
;
i
<
content
.
value
.
length
;
+
+
i
)
{
if
(
content
.
value
[
i
]
=
=
=
"
\
n
"
)
{
+
+
count
;
}
}
return
count
+
1
;
}
export
function
isInlineScript
(
source
)
{
return
source
.
introductionType
=
=
=
"
scriptElement
"
;
}
function
getNthLine
(
str
lineNum
)
{
let
startIndex
=
-
1
;
let
newLinesFound
=
0
;
while
(
newLinesFound
<
lineNum
)
{
const
nextIndex
=
str
.
indexOf
(
"
\
n
"
startIndex
+
1
)
;
if
(
nextIndex
=
=
=
-
1
)
{
return
null
;
}
startIndex
=
nextIndex
;
newLinesFound
+
+
;
}
const
endIndex
=
str
.
indexOf
(
"
\
n
"
startIndex
+
1
)
;
if
(
endIndex
=
=
=
-
1
)
{
return
str
.
slice
(
startIndex
+
1
)
;
}
return
str
.
slice
(
startIndex
+
1
endIndex
)
;
}
export
const
getLineText
=
memoizeLast
(
(
sourceId
asyncContent
line
)
=
>
{
if
(
!
asyncContent
|
|
!
isFulfilled
(
asyncContent
)
)
{
return
"
"
;
}
const
content
=
asyncContent
.
value
;
if
(
content
.
type
=
=
=
"
wasm
"
)
{
const
editorLine
=
toEditorLine
(
sourceId
line
)
;
const
lines
=
renderWasmText
(
sourceId
content
)
;
return
lines
[
editorLine
]
|
|
"
"
;
}
const
lineText
=
getNthLine
(
content
.
value
line
-
1
)
;
return
lineText
|
|
"
"
;
}
)
;
export
function
getTextAtPosition
(
sourceId
asyncContent
location
)
{
const
{
column
line
=
0
}
=
location
;
const
lineText
=
getLineText
(
sourceId
asyncContent
line
)
;
return
lineText
.
slice
(
column
column
+
100
)
.
trim
(
)
;
}
export
function
getSourceClassnames
(
source
symbols
isBlackBoxed
hasPrettyTab
=
false
)
{
const
defaultClassName
=
"
file
"
;
if
(
!
source
|
|
!
source
.
url
)
{
return
defaultClassName
;
}
if
(
isPretty
(
source
)
|
|
hasPrettyTab
)
{
return
"
prettyPrint
"
;
}
if
(
isBlackBoxed
)
{
return
"
blackBox
"
;
}
if
(
symbols
&
&
symbols
.
framework
)
{
return
symbols
.
framework
.
toLowerCase
(
)
;
}
if
(
isUrlExtension
(
source
.
url
)
)
{
return
"
extension
"
;
}
return
sourceTypes
[
source
.
displayURL
.
fileExtension
]
|
|
defaultClassName
;
}
export
function
getRelativeUrl
(
source
root
)
{
const
{
group
path
}
=
source
.
displayURL
;
if
(
!
root
)
{
return
path
;
}
const
url
=
group
+
path
;
return
url
.
slice
(
url
.
indexOf
(
root
)
+
root
.
length
+
1
)
;
}
export
function
removeThreadActorId
(
root
threads
)
{
threads
.
forEach
(
thread
=
>
{
if
(
root
.
includes
(
thread
.
actor
)
)
{
root
=
root
.
slice
(
thread
.
actor
.
length
+
1
)
;
}
}
)
;
return
root
;
}
export
function
isDescendantOfRoot
(
source
rootUrlWithoutThreadActor
)
{
if
(
source
.
url
&
&
source
.
url
.
includes
(
"
chrome
:
/
/
"
)
)
{
const
{
group
path
}
=
source
.
displayURL
;
return
(
group
+
path
)
.
includes
(
rootUrlWithoutThreadActor
)
;
}
return
!
!
source
.
url
&
&
source
.
url
.
includes
(
rootUrlWithoutThreadActor
)
;
}
export
function
isUrlExtension
(
url
)
{
return
url
.
includes
(
"
moz
-
extension
:
"
)
|
|
url
.
includes
(
"
chrome
-
extension
"
)
;
}
export
function
matchesGlobPatterns
(
source
excludePatterns
)
{
if
(
!
excludePatterns
)
{
return
false
;
}
const
patterns
=
excludePatterns
.
split
(
"
"
)
.
map
(
pattern
=
>
pattern
.
trim
(
)
)
.
filter
(
pattern
=
>
pattern
!
=
=
"
"
)
;
if
(
!
patterns
.
length
)
{
return
false
;
}
return
micromatch
.
contains
(
source
.
url
?
getRelativePath
(
source
.
url
)
:
getFormattedSourceId
(
source
.
id
)
patterns
)
;
}
