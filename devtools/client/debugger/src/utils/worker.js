let
msgId
=
1
;
function
workerTask
(
worker
method
)
{
return
function
(
.
.
.
args
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
id
=
msgId
+
+
;
worker
.
postMessage
(
{
id
method
args
}
)
;
const
listener
=
(
{
data
:
result
}
)
=
>
{
if
(
result
.
id
!
=
=
id
)
{
return
;
}
worker
.
removeEventListener
(
"
message
"
listener
)
;
if
(
result
.
error
)
{
reject
(
result
.
error
)
;
}
else
{
resolve
(
result
.
response
)
;
}
}
;
worker
.
addEventListener
(
"
message
"
listener
)
;
}
)
;
}
;
}
function
workerHandler
(
publicInterface
)
{
return
function
onTask
(
msg
)
{
const
{
id
method
args
}
=
msg
.
data
;
const
response
=
publicInterface
[
method
]
.
apply
(
null
args
)
;
if
(
response
instanceof
Promise
)
{
response
.
then
(
val
=
>
self
.
postMessage
(
{
id
response
:
val
}
)
)
.
catch
(
error
=
>
self
.
postMessage
(
{
id
error
}
)
)
;
}
else
{
self
.
postMessage
(
{
id
response
}
)
;
}
}
;
}
export
{
workerTask
workerHandler
}
;
