import
escapeRegExp
from
"
lodash
/
escapeRegExp
"
;
function
ignoreWhiteSpace
(
str
)
{
return
/
^
\
s
{
0
2
}
/
.
test
(
str
)
?
"
(
?
!
\
\
s
*
.
*
)
"
:
str
;
}
function
wholeMatch
(
query
wholeWord
)
{
if
(
query
=
=
=
"
"
|
|
!
wholeWord
)
{
return
query
;
}
return
\
\
b
{
query
}
\
\
b
;
}
function
buildFlags
(
caseSensitive
isGlobal
)
{
if
(
caseSensitive
&
&
isGlobal
)
{
return
"
g
"
;
}
if
(
!
caseSensitive
&
&
isGlobal
)
{
return
"
gi
"
;
}
if
(
!
caseSensitive
&
&
!
isGlobal
)
{
return
"
i
"
;
}
}
export
default
function
buildQuery
(
originalQuery
modifiers
{
isGlobal
=
false
ignoreSpaces
=
false
}
)
{
const
{
caseSensitive
regexMatch
wholeWord
}
=
modifiers
;
if
(
originalQuery
=
=
=
"
"
)
{
return
new
RegExp
(
originalQuery
)
;
}
let
query
=
originalQuery
;
if
(
ignoreSpaces
)
{
query
=
ignoreWhiteSpace
(
query
)
;
}
if
(
!
regexMatch
)
{
query
=
escapeRegExp
(
query
)
;
}
query
=
wholeMatch
(
query
wholeWord
)
;
const
flags
=
buildFlags
(
caseSensitive
isGlobal
)
;
if
(
flags
)
{
return
new
RegExp
(
query
flags
)
;
}
return
new
RegExp
(
query
)
;
}
