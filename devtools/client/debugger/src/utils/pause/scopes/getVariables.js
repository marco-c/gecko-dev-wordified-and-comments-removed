import
{
toPairs
}
from
"
lodash
"
;
import
type
{
NamedValue
}
from
"
.
/
types
"
;
import
type
{
BindingContents
ScopeBindings
}
from
"
.
.
/
.
.
/
.
.
/
types
"
;
type
VarAndBindingsPair
=
[
string
any
]
;
type
VarAndBindingsPairs
=
Array
<
VarAndBindingsPair
>
;
type
ScopeBindingsWrapper
=
{
variables
:
ScopeBindings
arguments
:
BindingContents
[
]
}
;
export
function
getBindingVariables
(
bindings
:
?
ScopeBindingsWrapper
parentName
:
string
)
:
NamedValue
[
]
{
if
(
!
bindings
)
{
return
[
]
;
}
const
args
:
VarAndBindingsPairs
=
bindings
.
arguments
.
map
(
arg
=
>
toPairs
(
arg
)
[
0
]
)
;
const
variables
:
VarAndBindingsPairs
=
toPairs
(
bindings
.
variables
)
;
return
args
.
concat
(
variables
)
.
map
(
binding
=
>
{
const
name
=
binding
[
0
]
;
const
contents
=
binding
[
1
]
;
return
{
name
path
:
{
parentName
}
/
{
name
}
contents
}
;
}
)
;
}
