import
{
getLibraryFromUrl
}
from
"
.
/
getLibraryFromUrl
"
;
export
function
annotateFramesWithLibrary
(
frames
)
{
for
(
const
frame
of
frames
)
{
frame
.
library
=
getLibraryFromUrl
(
frame
frames
)
;
}
for
(
const
idx
of
getBabelFrameIndexes
(
frames
)
)
{
const
frame
=
frames
[
idx
]
;
frame
.
library
=
"
Babel
"
;
}
}
function
getBabelFrameIndexes
(
frames
)
{
const
startIndexes
=
[
]
;
const
endIndexes
=
[
]
;
for
(
let
index
=
0
length
=
frames
.
length
;
index
<
length
;
index
+
+
)
{
const
frame
=
frames
[
index
]
;
const
frameUrl
=
frame
.
location
.
source
.
url
;
if
(
frame
.
displayName
=
=
=
"
tryCatch
"
&
&
frameUrl
.
match
(
/
regenerator
-
runtime
/
i
)
)
{
startIndexes
.
push
(
index
)
;
}
if
(
startIndexes
.
length
>
endIndexes
.
length
)
{
if
(
frame
.
displayName
=
=
=
"
flush
"
&
&
frameUrl
.
match
(
/
_microtask
/
i
)
)
{
endIndexes
.
push
(
index
)
;
}
if
(
frame
.
displayName
=
=
=
"
_asyncToGenerator
/
<
"
)
{
endIndexes
.
push
(
index
+
1
)
;
}
}
}
if
(
startIndexes
.
length
!
=
endIndexes
.
length
|
|
startIndexes
.
length
=
=
=
0
)
{
return
[
]
;
}
const
babelFrameIndexes
=
[
]
;
startIndexes
.
forEach
(
(
startIndex
index
)
=
>
{
const
matchingEndIndex
=
endIndexes
[
index
]
;
for
(
let
i
=
startIndex
;
i
<
=
matchingEndIndex
;
i
+
+
)
{
babelFrameIndexes
.
push
(
i
)
;
}
}
)
;
return
babelFrameIndexes
;
}
