const
objectProperty
=
/
(
[
\
w
\
d
\
#
]
+
)
/
;
const
arrayProperty
=
/
\
[
(
.
*
?
)
\
]
/
;
const
functionProperty
=
/
(
[
\
w
\
d
]
+
)
[
\
/
\
.
<
]
*
?
/
;
const
annonymousProperty
=
/
(
[
\
w
\
d
]
+
)
\
(
\
^
\
)
/
;
const
displayNameScenarios
=
[
objectProperty
arrayProperty
functionProperty
annonymousProperty
]
;
const
includeSpace
=
/
\
s
/
;
export
function
simplifyDisplayName
(
displayName
)
{
if
(
!
displayName
|
|
includeSpace
.
exec
(
displayName
)
)
{
return
displayName
;
}
for
(
const
reg
of
displayNameScenarios
)
{
const
match
=
reg
.
exec
(
displayName
)
;
if
(
match
)
{
return
match
[
1
]
;
}
}
return
displayName
;
}
const
displayNameLibraryMap
=
{
Babel
:
{
tryCatch
:
"
Async
"
}
Backbone
:
{
"
extend
/
child
"
:
"
Create
Class
"
"
.
create
"
:
"
Create
Model
"
}
jQuery
:
{
"
jQuery
.
event
.
dispatch
"
:
"
Dispatch
Event
"
}
React
:
{
"
ReactCompositeComponent
.
_renderValidatedComponentWithoutOwnerOrContext
/
renderedElement
<
"
:
"
Render
"
_renderValidatedComponentWithoutOwnerOrContext
:
"
Render
"
}
VueJS
:
{
"
renderMixin
/
Vue
.
prototype
.
_render
"
:
"
Render
"
}
Webpack
:
{
__webpack_require__
:
"
Bootstrap
"
}
}
;
export
function
formatDisplayName
(
frameOrFunc
{
shouldMapDisplayName
=
true
}
=
{
}
l10n
)
{
const
{
library
displayName
originalDisplayName
}
=
frameOrFunc
;
let
displayedName
;
if
(
library
&
&
shouldMapDisplayName
)
{
displayedName
=
displayNameLibraryMap
[
library
]
?
.
[
displayName
]
;
}
if
(
!
displayedName
)
{
displayedName
=
originalDisplayName
|
|
displayName
|
|
frameOrFunc
.
name
;
}
if
(
!
displayedName
)
{
return
l10n
.
getStr
(
"
anonymousFunction
"
)
;
}
return
simplifyDisplayName
(
displayedName
)
;
}
export
function
formatCopyName
(
frame
l10n
shouldDisplayOriginalLocation
)
{
const
displayName
=
formatDisplayName
(
frame
undefined
l10n
)
;
const
location
=
shouldDisplayOriginalLocation
?
frame
.
location
:
frame
.
generatedLocation
;
const
fileName
=
location
.
source
.
url
|
|
location
.
source
.
id
;
const
frameLocation
=
frame
.
location
.
line
;
return
{
displayName
}
(
{
fileName
}
#
{
frameLocation
}
)
;
}
