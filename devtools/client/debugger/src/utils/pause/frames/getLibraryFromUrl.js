import
type
{
Frame
}
from
"
.
.
/
.
.
/
.
.
/
types
"
;
import
{
getFrameUrl
}
from
"
.
/
getFrameUrl
"
;
const
libraryMap
=
[
{
label
:
"
Backbone
"
pattern
:
/
backbone
/
i
}
{
label
:
"
Babel
"
pattern
:
/
node_modules
\
/
babel
/
i
}
{
label
:
"
jQuery
"
pattern
:
/
jquery
/
i
}
{
label
:
"
Preact
"
pattern
:
/
preact
/
i
}
{
label
:
"
React
"
pattern
:
/
(
node_modules
\
/
(
?
:
react
|
react
-
dom
)
\
/
)
|
(
react
(
-
dom
)
?
(
\
.
[
a
-
z
]
+
)
*
\
.
js
)
/
}
{
label
:
"
Immutable
"
pattern
:
/
immutable
/
i
}
{
label
:
"
Webpack
"
pattern
:
/
webpack
\
/
bootstrap
/
i
}
{
label
:
"
Express
"
pattern
:
/
node_modules
\
/
express
/
}
{
label
:
"
Pug
"
pattern
:
/
node_modules
\
/
pug
/
}
{
label
:
"
ExtJS
"
pattern
:
/
\
/
ext
-
all
[
\
.
\
-
]
/
}
{
label
:
"
MobX
"
pattern
:
/
mobx
/
i
}
{
label
:
"
Underscore
"
pattern
:
/
underscore
/
i
}
{
label
:
"
Lodash
"
pattern
:
/
lodash
/
i
}
{
label
:
"
Ember
"
pattern
:
/
ember
/
i
}
{
label
:
"
Choo
"
pattern
:
/
choo
/
i
}
{
label
:
"
VueJS
"
pattern
:
/
vue
(
?
:
\
.
[
a
-
z
]
+
)
*
\
.
js
/
i
}
{
label
:
"
RxJS
"
pattern
:
/
rxjs
/
i
}
{
label
:
"
Angular
"
pattern
:
/
angular
(
?
!
.
*
\
/
app
\
/
)
/
i
contextPattern
:
/
zone
\
.
js
/
}
{
label
:
"
Redux
"
pattern
:
/
redux
/
i
}
{
label
:
"
Dojo
"
pattern
:
/
dojo
/
i
}
{
label
:
"
Marko
"
pattern
:
/
marko
/
i
}
{
label
:
"
NuxtJS
"
pattern
:
/
[
\
.
_
]
nuxt
/
i
}
{
label
:
"
Aframe
"
pattern
:
/
aframe
/
i
}
{
label
:
"
NextJS
"
pattern
:
/
[
\
.
_
]
next
/
i
}
]
;
export
function
getLibraryFromUrl
(
frame
:
Frame
callStack
:
Array
<
Frame
>
=
[
]
)
{
const
frameUrl
=
getFrameUrl
(
frame
)
;
let
match
=
libraryMap
.
find
(
o
=
>
o
.
pattern
.
test
(
frameUrl
)
)
;
if
(
match
)
{
return
match
.
label
;
}
match
=
libraryMap
.
find
(
o
=
>
o
.
contextPattern
&
&
o
.
contextPattern
.
test
(
frameUrl
)
)
;
if
(
match
)
{
const
contextMatch
=
callStack
.
some
(
f
=
>
{
const
url
=
getFrameUrl
(
f
)
;
if
(
!
url
)
{
return
false
;
}
return
libraryMap
.
some
(
o
=
>
o
.
pattern
.
test
(
url
)
)
;
}
)
;
if
(
contextMatch
)
{
return
match
.
label
;
}
}
return
null
;
}
