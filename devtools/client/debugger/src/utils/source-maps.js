import
{
isOriginalId
}
from
"
devtools
/
client
/
shared
/
source
-
map
-
loader
/
index
"
;
import
{
getSource
getLocationSource
}
from
"
.
.
/
selectors
"
;
import
{
createLocation
}
from
"
.
/
location
"
;
export
async
function
getGeneratedLocation
(
location
thunkArgs
)
{
if
(
!
isOriginalId
(
location
.
sourceId
)
)
{
return
location
;
}
const
{
sourceMapLoader
getState
}
=
thunkArgs
;
const
{
sourceId
line
column
}
=
await
sourceMapLoader
.
getGeneratedLocation
(
location
)
;
const
generatedSource
=
getSource
(
getState
(
)
sourceId
)
;
if
(
!
generatedSource
)
{
throw
new
Error
(
Could
not
find
generated
source
{
sourceId
}
)
;
}
return
createLocation
(
{
sourceId
sourceUrl
:
generatedSource
.
url
line
column
:
column
=
=
=
0
?
undefined
:
column
}
)
;
}
export
async
function
getOriginalLocation
(
generatedLocation
thunkArgs
)
{
if
(
isOriginalId
(
generatedLocation
.
sourceId
)
)
{
return
location
;
}
const
{
sourceMapLoader
}
=
thunkArgs
;
const
originalLocation
=
await
sourceMapLoader
.
getOriginalLocation
(
generatedLocation
)
;
return
createLocation
(
originalLocation
)
;
}
export
async
function
getMappedLocation
(
location
thunkArgs
)
{
const
{
getState
}
=
thunkArgs
;
const
source
=
getLocationSource
(
getState
(
)
location
)
;
if
(
!
source
)
{
throw
new
Error
(
no
source
{
location
.
sourceId
}
)
;
}
if
(
isOriginalId
(
location
.
sourceId
)
)
{
const
generatedLocation
=
await
getGeneratedLocation
(
location
thunkArgs
)
;
return
{
location
generatedLocation
}
;
}
const
generatedLocation
=
location
;
const
originalLocation
=
await
getOriginalLocation
(
generatedLocation
thunkArgs
)
;
return
{
location
:
originalLocation
generatedLocation
}
;
}
export
async
function
getRelatedMapLocation
(
location
thunkArgs
)
{
if
(
isOriginalId
(
location
.
sourceId
)
)
{
return
getGeneratedLocation
(
location
thunkArgs
)
;
}
return
getOriginalLocation
(
location
thunkArgs
)
;
}
