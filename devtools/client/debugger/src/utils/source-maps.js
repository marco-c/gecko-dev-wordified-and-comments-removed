import
{
debuggerToSourceMapLocation
sourceMapToDebuggerLocation
}
from
"
.
/
location
"
;
import
{
waitForSourceToBeRegisteredInStore
}
from
"
.
.
/
client
/
firefox
/
create
"
;
export
async
function
getGeneratedLocation
(
location
thunkArgs
)
{
if
(
!
location
.
source
.
isOriginal
)
{
return
location
;
}
const
{
sourceMapLoader
getState
}
=
thunkArgs
;
const
generatedLocation
=
await
sourceMapLoader
.
getGeneratedLocation
(
debuggerToSourceMapLocation
(
location
)
)
;
if
(
!
generatedLocation
)
{
return
location
;
}
return
sourceMapToDebuggerLocation
(
getState
(
)
generatedLocation
)
;
}
export
async
function
getOriginalLocation
(
location
thunkArgs
{
waitForSource
=
false
looseSearch
=
false
}
=
{
}
)
{
if
(
location
.
source
.
isOriginal
)
{
return
location
;
}
const
{
getState
sourceMapLoader
}
=
thunkArgs
;
const
originalLocation
=
await
sourceMapLoader
.
getOriginalLocation
(
debuggerToSourceMapLocation
(
location
)
{
looseSearch
}
)
;
if
(
!
originalLocation
)
{
return
location
;
}
if
(
waitForSource
)
{
await
waitForSourceToBeRegisteredInStore
(
originalLocation
.
sourceId
)
;
}
return
sourceMapToDebuggerLocation
(
getState
(
)
originalLocation
)
;
}
export
async
function
getMappedLocation
(
location
thunkArgs
)
{
if
(
location
.
source
.
isOriginal
)
{
const
generatedLocation
=
await
getGeneratedLocation
(
location
thunkArgs
)
;
return
{
location
generatedLocation
}
;
}
const
generatedLocation
=
location
;
const
originalLocation
=
await
getOriginalLocation
(
generatedLocation
thunkArgs
)
;
return
{
location
:
originalLocation
generatedLocation
}
;
}
export
async
function
getRelatedMapLocation
(
location
thunkArgs
)
{
if
(
!
location
.
source
)
{
return
location
;
}
if
(
location
.
source
.
isOriginal
)
{
return
getGeneratedLocation
(
location
thunkArgs
)
;
}
return
getOriginalLocation
(
location
thunkArgs
)
;
}
