import
{
getSelectedLocation
}
from
"
.
/
selected
-
location
"
;
import
{
getSource
}
from
"
.
.
/
selectors
"
;
export
function
comparePosition
(
a
b
)
{
return
a
&
&
b
&
&
a
.
line
=
=
b
.
line
&
&
a
.
column
=
=
b
.
column
;
}
export
function
createLocation
(
{
source
sourceActor
=
null
line
=
0
column
}
)
{
return
{
source
sourceActor
sourceActorId
:
sourceActor
?
.
id
line
column
}
;
}
export
function
debuggerToSourceMapLocation
(
location
)
{
return
{
sourceId
:
location
.
source
.
id
line
:
location
.
line
column
:
location
.
column
}
;
}
export
function
createPendingSelectedLocation
(
location
)
{
return
{
url
:
location
.
source
.
url
line
:
location
.
line
column
:
location
.
column
}
;
}
export
function
sortSelectedLocations
(
locations
selectedSource
)
{
return
Array
.
from
(
locations
)
.
sort
(
(
locationA
locationB
)
=
>
{
const
aSelected
=
getSelectedLocation
(
locationA
selectedSource
)
;
const
bSelected
=
getSelectedLocation
(
locationB
selectedSource
)
;
if
(
aSelected
.
line
<
bSelected
.
line
)
{
return
-
1
;
}
if
(
aSelected
.
line
>
bSelected
.
line
)
{
return
1
;
}
if
(
aSelected
.
column
=
=
bSelected
.
column
)
{
return
0
;
}
if
(
aSelected
.
column
=
=
=
undefined
)
{
return
-
1
;
}
if
(
bSelected
.
column
=
=
=
undefined
)
{
return
1
;
}
return
aSelected
.
column
<
bSelected
.
column
?
-
1
:
1
;
}
)
;
}
export
function
sourceMapToDebuggerLocation
(
state
location
)
{
if
(
location
.
source
)
{
return
location
;
}
const
source
=
getSource
(
state
location
.
sourceId
)
;
if
(
!
source
)
{
throw
new
Error
(
Could
not
find
source
-
map
source
{
location
.
sourceId
}
)
;
}
return
createLocation
(
{
.
.
.
location
source
}
)
;
}
