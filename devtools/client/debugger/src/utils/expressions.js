import
{
correctIndentation
}
from
"
.
/
indentation
"
;
import
{
getGrip
}
from
"
.
/
evaluation
-
result
"
;
import
type
{
Expression
}
from
"
.
.
/
types
"
;
const
UNAVAILABLE_GRIP
=
{
unavailable
:
true
}
;
export
function
wrapExpression
(
input
:
string
)
{
return
correctIndentation
(
try
{
{
input
}
}
catch
(
e
)
{
e
}
)
;
}
function
isUnavailable
(
value
)
{
if
(
!
value
.
preview
|
|
!
value
.
preview
.
name
)
{
return
false
;
}
return
[
"
ReferenceError
"
"
TypeError
"
]
.
includes
(
value
.
preview
.
name
)
;
}
export
function
getValue
(
expression
:
Expression
)
{
const
{
value
exception
error
}
=
expression
;
if
(
error
)
{
return
error
;
}
if
(
!
value
)
{
return
UNAVAILABLE_GRIP
;
}
if
(
exception
)
{
if
(
isUnavailable
(
exception
)
)
{
return
UNAVAILABLE_GRIP
;
}
return
exception
;
}
const
valueGrip
=
getGrip
(
value
.
result
)
;
if
(
valueGrip
&
&
typeof
valueGrip
=
=
=
"
object
"
&
&
valueGrip
.
class
=
=
"
Error
"
)
{
if
(
isUnavailable
(
valueGrip
)
)
{
return
UNAVAILABLE_GRIP
;
}
const
{
name
message
}
=
valueGrip
.
preview
;
return
{
name
}
:
{
message
}
;
}
return
valueGrip
;
}
