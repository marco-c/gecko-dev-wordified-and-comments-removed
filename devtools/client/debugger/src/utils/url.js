const
defaultUrl
=
{
hash
:
"
"
host
:
"
"
hostname
:
"
"
href
:
"
"
origin
:
"
null
"
password
:
"
"
path
:
"
"
pathname
:
"
"
port
:
"
"
protocol
:
"
"
search
:
"
"
searchParams
:
{
}
username
:
"
"
}
;
const
stripQueryCache
=
new
Map
(
)
;
export
function
stripQuery
(
url
)
{
if
(
stripQueryCache
.
has
(
url
)
)
{
return
stripQueryCache
.
get
(
url
)
;
}
let
queryStart
=
url
.
indexOf
(
"
?
"
)
;
let
before
=
url
;
let
after
=
"
"
;
if
(
queryStart
>
=
0
)
{
const
hashStart
=
url
.
indexOf
(
"
#
"
)
;
if
(
hashStart
>
=
0
)
{
if
(
hashStart
<
queryStart
)
{
queryStart
=
hashStart
;
}
after
=
url
.
slice
(
hashStart
)
;
}
before
=
url
.
slice
(
0
queryStart
)
;
}
const
result
=
before
+
after
;
stripQueryCache
.
set
(
url
result
)
;
return
result
;
}
const
parseCache
=
new
Map
(
)
;
export
function
parse
(
url
)
{
if
(
parseCache
.
has
(
url
)
)
{
return
parseCache
.
get
(
url
)
;
}
let
urlObj
;
try
{
urlObj
=
new
URL
(
url
)
;
}
catch
(
err
)
{
urlObj
=
{
.
.
.
defaultUrl
}
;
if
(
url
)
{
const
hashStart
=
url
.
indexOf
(
"
#
"
)
;
if
(
hashStart
>
=
0
)
{
urlObj
.
hash
=
url
.
slice
(
hashStart
)
;
url
=
url
.
slice
(
0
hashStart
)
;
if
(
urlObj
.
hash
=
=
=
"
#
"
)
{
urlObj
.
hash
=
"
"
;
}
}
const
queryStart
=
url
.
indexOf
(
"
?
"
)
;
if
(
queryStart
>
=
0
)
{
urlObj
.
search
=
url
.
slice
(
queryStart
)
;
url
=
url
.
slice
(
0
queryStart
)
;
if
(
urlObj
.
search
=
=
=
"
?
"
)
{
urlObj
.
search
=
"
"
;
}
}
urlObj
.
pathname
=
url
;
}
}
urlObj
.
pathname
=
urlObj
.
pathname
.
replace
(
/
\
/
+
/
"
/
"
)
;
urlObj
.
path
=
urlObj
.
pathname
+
urlObj
.
search
;
parseCache
.
set
(
url
urlObj
)
;
return
urlObj
;
}
export
function
sameOrigin
(
firstUrl
secondUrl
)
{
return
parse
(
firstUrl
)
.
origin
=
=
parse
(
secondUrl
)
.
origin
;
}
