import
{
memoize
}
from
"
lodash
"
;
import
{
URL
as
URLParser
}
from
"
whatwg
-
url
"
;
import
type
{
URL
}
from
"
.
.
/
types
"
;
const
defaultUrl
=
{
hash
:
"
"
host
:
"
"
hostname
:
"
"
href
:
"
"
origin
:
"
null
"
password
:
"
"
path
:
"
"
pathname
:
"
"
port
:
"
"
protocol
:
"
"
search
:
"
"
searchParams
:
{
}
username
:
"
"
}
;
export
const
stripQuery
=
memoize
(
function
stripQueryAndHash
(
url
:
URL
)
:
URL
{
let
queryStart
=
url
.
indexOf
(
"
?
"
)
;
let
before
=
url
;
let
after
=
"
"
;
if
(
queryStart
>
=
0
)
{
const
hashStart
=
url
.
indexOf
(
"
#
"
)
;
if
(
hashStart
>
=
0
)
{
if
(
hashStart
<
queryStart
)
{
queryStart
=
hashStart
;
}
after
=
url
.
slice
(
hashStart
)
;
}
before
=
url
.
slice
(
0
queryStart
)
;
}
return
before
+
after
;
}
)
;
export
const
parse
=
memoize
(
function
parse
(
url
:
URL
)
:
any
{
let
urlObj
;
try
{
urlObj
=
new
URLParser
(
url
)
;
}
catch
(
err
)
{
urlObj
=
{
.
.
.
defaultUrl
}
;
if
(
url
)
{
const
hashStart
=
url
.
indexOf
(
"
#
"
)
;
if
(
hashStart
>
=
0
)
{
urlObj
.
hash
=
url
.
slice
(
hashStart
)
;
url
=
url
.
slice
(
0
hashStart
)
;
if
(
urlObj
.
hash
=
=
=
"
#
"
)
{
urlObj
.
hash
=
"
"
;
}
}
const
queryStart
=
url
.
indexOf
(
"
?
"
)
;
if
(
queryStart
>
=
0
)
{
urlObj
.
search
=
url
.
slice
(
queryStart
)
;
url
=
url
.
slice
(
0
queryStart
)
;
if
(
urlObj
.
search
=
=
=
"
?
"
)
{
urlObj
.
search
=
"
"
;
}
}
urlObj
.
pathname
=
url
;
}
}
(
urlObj
:
any
)
.
path
=
urlObj
.
pathname
+
urlObj
.
search
;
return
urlObj
;
}
)
;
export
function
sameOrigin
(
firstUrl
:
URL
secondUrl
:
URL
)
:
boolean
{
return
parse
(
firstUrl
)
.
origin
=
=
parse
(
secondUrl
)
.
origin
;
}
