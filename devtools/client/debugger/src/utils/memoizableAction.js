import
type
{
ThunkArgs
}
from
"
.
.
/
actions
/
types
"
;
export
type
MemoizedAction
<
Args
Result
>
=
Args
=
>
ThunkArgs
=
>
Promise
<
Result
>
;
type
MemoizableActionParams
<
Args
Result
>
=
{
hasValue
:
(
args
:
Args
thunkArgs
:
ThunkArgs
)
=
>
boolean
getValue
:
(
args
:
Args
thunkArgs
:
ThunkArgs
)
=
>
Result
createKey
:
(
args
:
Args
thunkArgs
:
ThunkArgs
)
=
>
string
action
:
(
args
:
Args
thunkArgs
:
ThunkArgs
)
=
>
Promise
<
mixed
>
}
;
export
function
memoizeableAction
<
Args
Result
>
(
name
:
string
{
hasValue
getValue
createKey
action
}
:
MemoizableActionParams
<
Args
Result
>
)
:
MemoizedAction
<
Args
Result
>
{
const
requests
=
new
Map
(
)
;
return
args
=
>
async
(
thunkArgs
:
ThunkArgs
)
=
>
{
if
(
hasValue
(
args
thunkArgs
)
)
{
return
getValue
(
args
thunkArgs
)
;
}
const
key
=
createKey
(
args
thunkArgs
)
;
if
(
!
requests
.
has
(
key
)
)
{
requests
.
set
(
key
(
async
(
)
=
>
{
try
{
await
action
(
args
thunkArgs
)
;
}
catch
(
e
)
{
console
.
warn
(
Action
{
name
}
had
an
exception
:
e
)
;
}
finally
{
requests
.
delete
(
key
)
;
}
}
)
(
)
)
;
}
await
requests
.
get
(
key
)
;
return
getValue
(
args
thunkArgs
)
;
}
;
}
