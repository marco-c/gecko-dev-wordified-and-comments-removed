import
type
{
SettledValue
FulfilledValue
}
from
"
.
/
utils
/
async
-
value
"
;
import
type
{
SourcePayload
LongStringFront
}
from
"
.
/
client
/
firefox
/
types
"
;
import
type
{
SourceActorId
SourceActor
}
from
"
.
/
reducers
/
source
-
actors
"
;
import
type
{
SourceBase
}
from
"
.
/
reducers
/
sources
"
;
export
type
{
SourceActorId
SourceActor
SourceBase
}
;
export
type
SearchModifiers
=
{
caseSensitive
:
boolean
wholeWord
:
boolean
regexMatch
:
boolean
}
;
export
type
Mode
=
|
String
|
{
name
:
string
typescript
?
:
boolean
base
?
:
{
name
:
string
typescript
:
boolean
}
}
;
export
type
ThreadId
=
string
;
export
type
BreakpointId
=
string
;
export
type
SourceId
=
string
;
export
type
ActorId
=
string
;
export
type
QueuedSourceData
=
|
{
type
:
"
original
"
data
:
OriginalSourceData
}
|
{
type
:
"
generated
"
data
:
GeneratedSourceData
}
;
export
type
OriginalSourceData
=
{
|
id
:
string
url
:
string
|
}
;
export
type
GeneratedSourceData
=
{
thread
:
ThreadId
source
:
SourcePayload
isServiceWorker
:
boolean
id
?
:
string
}
;
export
type
SourceActorLocation
=
{
|
+
sourceActor
:
SourceActorId
+
line
:
number
+
column
?
:
number
|
}
;
export
type
SourceLocation
=
{
|
+
sourceId
:
SourceId
+
line
:
number
+
column
?
:
number
+
sourceUrl
?
:
string
|
}
;
export
type
MappedLocation
=
{
+
location
:
SourceLocation
+
generatedLocation
:
SourceLocation
}
;
export
type
PartialPosition
=
{
+
line
:
number
+
column
?
:
number
}
;
export
type
Position
=
{
+
line
:
number
+
column
:
number
}
;
export
type
PartialRange
=
{
end
:
PartialPosition
start
:
PartialPosition
}
;
export
type
Range
=
{
end
:
Position
start
:
Position
}
;
export
type
PendingLocation
=
{
+
line
:
number
+
column
?
:
number
+
sourceUrl
?
:
string
}
;
export
type
ExecutionPoint
=
{
+
checkpoint
:
number
+
location
:
PendingLocation
+
position
:
ExecutionPointPosition
+
progress
:
number
}
;
export
type
ExecutionPointPosition
=
{
+
frameIndex
:
number
+
kind
:
string
+
offset
:
number
+
script
:
number
}
;
export
type
BreakpointLocation
=
{
+
line
:
number
+
column
?
:
number
+
sourceUrl
?
:
string
+
sourceId
?
:
SourceActorId
}
;
export
type
ASTLocation
=
{
|
+
name
:
?
string
+
offset
:
PartialPosition
+
index
:
number
|
}
;
export
type
Breakpoint
=
{
|
+
id
:
BreakpointId
+
location
:
SourceLocation
+
astLocation
:
?
ASTLocation
+
generatedLocation
:
SourceLocation
+
disabled
:
boolean
+
text
:
string
+
originalText
:
string
+
options
:
BreakpointOptions
|
}
;
export
type
BreakpointOptions
=
{
hidden
?
:
boolean
condition
?
:
string
|
null
logValue
?
:
string
|
null
logGroupId
?
:
string
|
null
}
;
export
type
BreakpointActor
=
{
|
+
actor
:
ActorId
+
source
:
SourceActor
|
}
;
export
type
XHRBreakpoint
=
{
|
+
path
:
string
+
method
:
"
GET
"
|
"
POST
"
|
"
DELETE
"
|
"
ANY
"
+
loading
:
boolean
+
disabled
:
boolean
+
text
:
string
|
}
;
export
type
BreakpointResult
=
{
id
:
ActorId
actualLocation
:
SourceActorLocation
}
;
export
type
PendingBreakpoint
=
{
+
location
:
PendingLocation
+
astLocation
:
ASTLocation
+
generatedLocation
:
PendingLocation
+
disabled
:
boolean
+
text
:
string
+
options
:
BreakpointOptions
}
;
export
type
FrameId
=
string
;
type
Expr
=
string
;
export
type
XScopeVariable
=
{
name
:
string
expr
?
:
Expr
}
;
export
type
XScopeVariables
=
{
vars
:
XScopeVariable
[
]
frameBase
?
:
Expr
|
null
}
;
export
type
Frame
=
{
id
:
FrameId
thread
:
string
displayName
:
string
location
:
SourceLocation
generatedLocation
:
SourceLocation
source
:
?
Source
scope
?
:
Scope
this
:
Object
framework
?
:
string
isOriginal
?
:
boolean
originalDisplayName
?
:
string
originalVariables
?
:
XScopeVariables
library
?
:
string
index
:
number
asyncCause
?
:
string
}
;
export
type
ChromeFrame
=
{
id
:
FrameId
displayName
:
string
scopeChain
:
any
generatedLocation
:
SourceLocation
location
:
?
SourceLocation
}
;
export
type
OriginalFrame
=
{
|
displayName
:
string
variables
?
:
Object
location
?
:
SourceLocation
|
}
;
export
type
ContextMenuItem
=
{
id
:
string
label
:
string
accesskey
:
string
disabled
:
boolean
click
:
Function
}
;
export
type
ExceptionReason
=
{
|
exception
:
string
|
Grip
message
:
string
type
:
"
exception
"
frameFinished
?
:
Object
|
}
;
export
type
Why
=
|
ExceptionReason
|
{
type
:
string
message
?
:
string
frameFinished
?
:
Object
nodeGrip
?
:
Object
ancestorGrip
?
:
Object
exception
?
:
string
action
?
:
string
}
;
export
type
WhyPaused
=
{
type
:
string
}
;
export
type
LoadedObject
=
{
objectId
:
string
parentId
:
string
name
:
string
value
:
any
}
;
export
type
Pause
=
{
thread
:
string
frame
:
Frame
frames
:
Frame
[
]
why
:
Why
loadedObjects
?
:
LoadedObject
[
]
}
;
export
type
Expression
=
{
input
:
string
value
:
Object
from
:
string
updating
:
boolean
exception
?
:
string
|
LongStringFront
error
?
:
string
|
LongStringFront
}
;
export
type
Grip
=
{
actor
:
string
class
:
string
extensible
:
boolean
frozen
:
boolean
isGlobal
:
boolean
ownPropertyLength
:
number
ownProperties
:
Object
preview
?
:
Grip
sealed
:
boolean
type
:
string
url
?
:
string
fileName
?
:
string
message
?
:
string
name
?
:
string
}
;
export
type
TextSourceContent
=
{
|
type
:
"
text
"
value
:
string
contentType
:
string
|
void
|
}
;
export
type
WasmSourceContent
=
{
|
type
:
"
wasm
"
value
:
{
|
binary
:
Object
|
}
|
}
;
export
type
SourceContent
=
TextSourceContent
|
WasmSourceContent
;
export
type
SourceWithContent
=
ReadOnly
<
{
.
.
.
SourceBase
+
content
:
SettledValue
<
SourceContent
>
|
null
}
>
;
export
type
SourceWithContentAndType
<
+
Content
:
SourceContent
>
=
ReadOnly
<
{
.
.
.
SourceBase
+
content
:
FulfilledValue
<
Content
>
}
>
;
export
type
Source
=
{
+
id
:
SourceId
+
url
:
string
+
isBlackBoxed
:
boolean
+
isPrettyPrinted
:
boolean
+
relativeUrl
:
string
+
introductionUrl
:
?
string
+
introductionType
:
?
string
+
extensionName
:
?
string
+
isExtension
:
boolean
+
isWasm
:
boolean
+
isOriginal
:
boolean
}
;
export
type
Script
=
any
;
export
type
BindingContents
=
{
value
:
any
}
;
export
type
ScopeBindings
=
{
[
name
:
string
]
:
BindingContents
}
;
export
type
Scope
=
{
|
actor
:
ActorId
parent
:
?
Scope
bindings
?
:
{
arguments
:
Array
<
ScopeBindings
>
variables
:
ScopeBindings
this
?
:
BindingContents
|
null
}
object
:
?
Object
function
:
?
{
actor
:
ActorId
class
:
string
displayName
:
string
location
:
SourceLocation
parameterNames
:
string
[
]
}
type
:
string
scopeKind
:
string
|
}
;
export
type
ThreadType
=
"
mainThread
"
|
"
worker
"
|
"
contentProcess
"
;
export
type
Thread
=
{
+
actor
:
ThreadId
+
url
:
string
+
type
:
ThreadType
+
name
:
string
serviceWorkerStatus
?
:
string
}
;
export
type
Worker
=
Thread
;
export
type
ThreadList
=
Array
<
Thread
>
;
export
type
Cancellable
=
{
cancel
:
(
)
=
>
void
}
;
export
type
EventListenerBreakpoints
=
string
[
]
;
export
type
SourceDocuments
=
{
[
string
]
:
Object
}
;
export
type
BreakpointPosition
=
MappedLocation
;
export
type
BreakpointPositions
=
{
[
number
]
:
BreakpointPosition
[
]
}
;
export
type
DOMMutationBreakpoint
=
{
id
:
number
nodeFront
:
Object
mutationType
:
"
subtree
"
|
"
attribute
"
|
"
removal
"
enabled
:
boolean
}
;
export
type
{
Context
ThreadContext
}
from
"
.
/
utils
/
context
"
;
export
type
Previews
=
{
line
:
Array
<
Preview
>
}
;
export
type
Preview
=
{
name
:
string
value
:
any
column
:
number
line
:
number
}
;
