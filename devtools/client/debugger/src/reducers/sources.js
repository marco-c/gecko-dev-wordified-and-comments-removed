import
{
originalToGeneratedId
}
from
"
devtools
/
client
/
shared
/
source
-
map
-
loader
/
index
"
;
import
{
prefs
}
from
"
.
.
/
utils
/
prefs
"
;
import
{
createPendingSelectedLocation
}
from
"
.
.
/
utils
/
location
"
;
export
function
initialSourcesState
(
state
)
{
return
{
mutableSources
:
new
Map
(
)
mutableOverrideSources
:
state
?
.
mutableOverrideSources
|
|
new
Map
(
)
mutableSourcesPerUrl
:
new
Map
(
)
mutableOriginalSources
:
new
Map
(
)
mutableSourceActors
:
new
Map
(
)
breakpointPositions
:
{
}
breakableLines
:
{
}
selectedLocation
:
undefined
pendingSelectedLocation
:
prefs
.
pendingSelectedLocation
}
;
}
function
update
(
state
=
initialSourcesState
(
)
action
)
{
switch
(
action
.
type
)
{
case
"
ADD_SOURCES
"
:
return
addSources
(
state
action
.
sources
)
;
case
"
ADD_ORIGINAL_SOURCES
"
:
return
addSources
(
state
action
.
originalSources
)
;
case
"
INSERT_SOURCE_ACTORS
"
:
return
insertSourceActors
(
state
action
)
;
case
"
SET_SELECTED_LOCATION
"
:
{
let
pendingSelectedLocation
=
null
;
if
(
action
.
source
.
url
)
{
pendingSelectedLocation
=
createPendingSelectedLocation
(
action
.
location
)
;
prefs
.
pendingSelectedLocation
=
pendingSelectedLocation
;
}
return
{
.
.
.
state
selectedLocation
:
action
.
location
pendingSelectedLocation
}
;
}
case
"
CLEAR_SELECTED_LOCATION
"
:
{
const
pendingSelectedLocation
=
{
url
:
"
"
}
;
prefs
.
pendingSelectedLocation
=
pendingSelectedLocation
;
return
{
.
.
.
state
selectedLocation
:
null
pendingSelectedLocation
}
;
}
case
"
SET_PENDING_SELECTED_LOCATION
"
:
{
const
pendingSelectedLocation
=
{
url
:
action
.
url
line
:
action
.
line
column
:
action
.
column
}
;
prefs
.
pendingSelectedLocation
=
pendingSelectedLocation
;
return
{
.
.
.
state
pendingSelectedLocation
}
;
}
case
"
SET_ORIGINAL_BREAKABLE_LINES
"
:
{
const
{
breakableLines
sourceId
}
=
action
;
return
{
.
.
.
state
breakableLines
:
{
.
.
.
state
.
breakableLines
[
sourceId
]
:
breakableLines
}
}
;
}
case
"
ADD_BREAKPOINT_POSITIONS
"
:
{
const
{
source
positions
}
=
action
;
const
breakpointPositions
=
state
.
breakpointPositions
[
source
.
id
]
;
return
{
.
.
.
state
breakpointPositions
:
{
.
.
.
state
.
breakpointPositions
[
source
.
id
]
:
{
.
.
.
breakpointPositions
.
.
.
positions
}
}
}
;
}
case
"
NAVIGATE
"
:
return
initialSourcesState
(
state
)
;
case
"
REMOVE_THREAD
"
:
{
return
removeSourcesAndActors
(
state
action
)
;
}
case
"
SET_OVERRIDE
"
:
{
state
.
mutableOverrideSources
.
set
(
action
.
url
action
.
path
)
;
return
state
;
}
case
"
REMOVE_OVERRIDE
"
:
{
if
(
state
.
mutableOverrideSources
.
has
(
action
.
url
)
)
{
state
.
mutableOverrideSources
.
delete
(
action
.
url
)
;
}
return
state
;
}
}
return
state
;
}
function
addSources
(
state
sources
)
{
for
(
const
source
of
sources
)
{
state
.
mutableSources
.
set
(
source
.
id
source
)
;
const
existing
=
state
.
mutableSourcesPerUrl
.
get
(
source
.
url
)
;
if
(
existing
)
{
existing
.
push
(
source
)
;
}
else
{
state
.
mutableSourcesPerUrl
.
set
(
source
.
url
[
source
]
)
;
}
if
(
source
.
isOriginal
)
{
const
generatedSourceId
=
originalToGeneratedId
(
source
.
id
)
;
let
originalSourceIds
=
state
.
mutableOriginalSources
.
get
(
generatedSourceId
)
;
if
(
!
originalSourceIds
)
{
originalSourceIds
=
[
]
;
state
.
mutableOriginalSources
.
set
(
generatedSourceId
originalSourceIds
)
;
}
originalSourceIds
.
push
(
source
.
id
)
;
}
}
return
{
.
.
.
state
}
;
}
function
removeSourcesAndActors
(
state
action
)
{
const
{
mutableSourcesPerUrl
mutableSources
mutableOriginalSources
mutableSourceActors
}
=
state
;
for
(
const
removedSource
of
action
.
sources
)
{
const
sourceId
=
removedSource
.
id
;
const
sourceUrl
=
removedSource
.
url
;
if
(
sourceUrl
)
{
const
sourcesForSameUrl
=
(
mutableSourcesPerUrl
.
get
(
sourceUrl
)
|
|
[
]
)
.
filter
(
s
=
>
s
!
=
removedSource
)
;
if
(
!
sourcesForSameUrl
.
length
)
{
mutableSourcesPerUrl
.
delete
(
sourceUrl
)
;
}
else
{
mutableSourcesPerUrl
.
set
(
sourceUrl
sourcesForSameUrl
)
;
}
}
mutableSources
.
delete
(
sourceId
)
;
mutableOriginalSources
.
delete
(
sourceId
)
;
mutableSourceActors
.
delete
(
sourceId
)
;
}
for
(
const
removedActor
of
action
.
actors
)
{
const
sourceId
=
removedActor
.
source
;
const
actorsForSource
=
mutableSourceActors
.
get
(
sourceId
)
;
if
(
!
actorsForSource
)
{
continue
;
}
const
idx
=
actorsForSource
.
indexOf
(
removedActor
)
;
if
(
idx
!
=
-
1
)
{
actorsForSource
.
splice
(
idx
1
)
;
mutableSourceActors
.
set
(
sourceId
[
.
.
.
actorsForSource
]
)
;
}
if
(
!
actorsForSource
.
length
)
{
mutableSourceActors
.
delete
(
sourceId
)
;
}
}
return
{
.
.
.
state
}
;
}
function
insertSourceActors
(
state
action
)
{
const
{
sourceActors
}
=
action
;
const
{
mutableSourceActors
}
=
state
;
for
(
const
sourceActor
of
sourceActors
)
{
const
sourceId
=
sourceActor
.
source
;
const
existing
=
mutableSourceActors
.
get
(
sourceId
)
;
if
(
existing
)
{
mutableSourceActors
.
set
(
sourceId
[
.
.
.
existing
sourceActor
]
)
;
}
else
{
mutableSourceActors
.
set
(
sourceId
[
sourceActor
]
)
;
}
}
const
scriptActors
=
sourceActors
.
filter
(
item
=
>
item
.
introductionType
=
=
=
"
scriptElement
"
)
;
if
(
scriptActors
.
length
)
{
const
{
.
.
.
breakpointPositions
}
=
state
.
breakpointPositions
;
for
(
const
{
source
}
of
scriptActors
)
{
delete
breakpointPositions
[
source
]
;
}
state
=
{
.
.
.
state
breakpointPositions
}
;
}
return
{
.
.
.
state
}
;
}
export
default
update
;
