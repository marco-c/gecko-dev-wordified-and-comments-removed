export
function
initialExceptionsState
(
)
{
return
{
mutableExceptionsMap
:
new
Map
(
)
}
;
}
function
update
(
state
=
initialExceptionsState
(
)
action
)
{
switch
(
action
.
type
)
{
case
"
ADD_EXCEPTION
"
:
return
updateExceptions
(
state
action
)
;
case
"
REMOVE_THREAD
"
:
{
return
removeExceptionsFromThread
(
state
action
)
;
}
}
return
state
;
}
function
updateExceptions
(
state
action
)
{
const
{
mutableExceptionsMap
}
=
state
;
const
{
exception
}
=
action
;
const
{
sourceActorId
}
=
exception
;
let
exceptions
=
mutableExceptionsMap
.
get
(
sourceActorId
)
;
if
(
!
exceptions
)
{
exceptions
=
[
]
;
mutableExceptionsMap
.
set
(
sourceActorId
exceptions
)
;
}
else
if
(
exceptions
.
some
(
(
{
lineNumber
columnNumber
}
)
=
>
{
return
(
lineNumber
=
=
exception
.
lineNumber
&
&
columnNumber
=
=
exception
.
columnNumber
)
;
}
)
)
{
return
state
;
}
exceptions
.
push
(
exception
)
;
return
{
.
.
.
state
}
;
}
function
removeExceptionsFromThread
(
state
action
)
{
const
{
mutableExceptionsMap
}
=
state
;
const
{
threadActorID
}
=
action
;
const
sizeBefore
=
mutableExceptionsMap
.
size
;
for
(
const
[
sourceActorId
exceptions
]
of
mutableExceptionsMap
)
{
if
(
exceptions
[
0
]
.
threadActorId
=
=
threadActorID
)
{
mutableExceptionsMap
.
delete
(
sourceActorId
)
;
}
}
if
(
sizeBefore
!
=
mutableExceptionsMap
.
size
)
{
return
{
.
.
.
state
}
;
}
return
state
;
}
export
default
update
;
