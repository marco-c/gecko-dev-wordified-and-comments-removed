import
{
prefs
}
from
"
.
.
/
utils
/
prefs
"
;
const
emptySearchResults
=
Object
.
freeze
(
{
matches
:
Object
.
freeze
(
[
]
)
matchIndex
:
-
1
index
:
-
1
count
:
0
}
)
;
export
const
initialFileSearchState
=
(
)
=
>
(
{
query
:
"
"
searchResults
:
emptySearchResults
modifiers
:
{
caseSensitive
:
prefs
.
fileSearchCaseSensitive
wholeWord
:
prefs
.
fileSearchWholeWord
regexMatch
:
prefs
.
fileSearchRegexMatch
}
}
)
;
function
update
(
state
=
initialFileSearchState
(
)
action
)
{
switch
(
action
.
type
)
{
case
"
UPDATE_FILE_SEARCH_QUERY
"
:
{
return
{
.
.
.
state
query
:
action
.
query
}
;
}
case
"
UPDATE_SEARCH_RESULTS
"
:
{
return
{
.
.
.
state
searchResults
:
action
.
results
}
;
}
case
"
TOGGLE_FILE_SEARCH_MODIFIER
"
:
{
const
actionVal
=
!
state
.
modifiers
[
action
.
modifier
]
;
if
(
action
.
modifier
=
=
"
caseSensitive
"
)
{
prefs
.
fileSearchCaseSensitive
=
actionVal
;
}
if
(
action
.
modifier
=
=
"
wholeWord
"
)
{
prefs
.
fileSearchWholeWord
=
actionVal
;
}
if
(
action
.
modifier
=
=
"
regexMatch
"
)
{
prefs
.
fileSearchRegexMatch
=
actionVal
;
}
return
{
.
.
.
state
modifiers
:
{
.
.
.
state
.
modifiers
[
action
.
modifier
]
:
actionVal
}
}
;
}
case
"
NAVIGATE
"
:
{
return
{
.
.
.
state
query
:
"
"
searchResults
:
emptySearchResults
}
;
}
default
:
{
return
state
;
}
}
}
export
function
getFileSearchQuery
(
state
)
{
return
state
.
fileSearch
.
query
;
}
export
function
getFileSearchModifiers
(
state
)
{
return
state
.
fileSearch
.
modifiers
;
}
export
function
getFileSearchResults
(
state
)
{
return
state
.
fileSearch
.
searchResults
;
}
export
default
update
;
