const
IGNORED_URLS
=
[
"
debugger
eval
code
"
"
XStringBundle
"
]
;
const
IGNORED_EXTENSIONS
=
[
"
css
"
"
svg
"
"
png
"
]
;
import
{
isPretty
}
from
"
.
.
/
utils
/
source
"
;
import
{
prefs
}
from
"
.
.
/
utils
/
prefs
"
;
export
function
initialSourcesTreeState
(
)
{
return
{
threadItems
:
[
]
expanded
:
new
Set
(
)
focusedItem
:
null
projectDirectoryRoot
:
prefs
.
projectDirectoryRoot
projectDirectoryRootName
:
prefs
.
projectDirectoryRootName
isWebExtension
:
false
chromeAndExtensionsEnabled
:
prefs
.
chromeAndExtensionsEnabled
}
;
}
export
default
function
update
(
state
=
initialSourcesTreeState
(
)
action
)
{
switch
(
action
.
type
)
{
case
"
ADD_SOURCES
"
:
{
const
newSources
=
action
.
sources
.
filter
(
source
=
>
source
.
isOriginal
&
&
isSourceVisibleInSourceTree
(
source
state
.
chromeAndExtensionsEnabled
state
.
isWebExtension
)
)
;
if
(
!
newSources
.
length
)
{
return
state
;
}
let
changed
=
false
;
const
threadItems
=
[
.
.
.
state
.
threadItems
]
;
for
(
const
source
of
newSources
)
{
changed
|
=
addSource
(
threadItems
source
.
thread
source
)
;
}
if
(
changed
)
{
return
{
.
.
.
state
threadItems
}
;
}
return
state
;
}
case
"
INSERT_SOURCE_ACTORS
"
:
{
const
newSourceActors
=
action
.
items
.
filter
(
sourceActor
=
>
isSourceVisibleInSourceTree
(
sourceActor
.
sourceObject
state
.
chromeAndExtensionsEnabled
state
.
isWebExtension
)
)
;
if
(
!
newSourceActors
.
length
)
{
return
state
;
}
let
changed
=
false
;
const
threadItems
=
[
.
.
.
state
.
threadItems
]
;
for
(
const
sourceActor
of
newSourceActors
)
{
changed
|
=
addSource
(
threadItems
sourceActor
.
thread
sourceActor
.
sourceObject
)
;
}
if
(
changed
)
{
return
{
.
.
.
state
threadItems
}
;
}
return
state
;
}
case
"
NAVIGATE
"
:
state
=
initialSourcesTreeState
(
)
;
if
(
action
.
mainThread
.
isWebExtension
)
{
addThread
(
state
action
.
mainThread
)
;
}
return
state
;
case
"
INSERT_THREAD
"
:
state
=
{
.
.
.
state
}
;
addThread
(
state
action
.
newThread
)
;
return
state
;
case
"
REMOVE_THREAD
"
:
{
const
index
=
state
.
threadItems
.
findIndex
(
item
=
>
{
return
item
.
threadActorID
=
=
action
.
threadActorID
;
}
)
;
if
(
index
=
=
-
1
)
{
return
state
;
}
const
threadItems
=
[
.
.
.
state
.
threadItems
]
;
threadItems
.
splice
(
index
1
)
;
return
{
.
.
.
state
threadItems
}
;
}
case
"
SET_EXPANDED_STATE
"
:
return
updateExpanded
(
state
action
)
;
case
"
SET_FOCUSED_SOURCE_ITEM
"
:
return
{
.
.
.
state
focusedItem
:
action
.
item
}
;
case
"
SET_PROJECT_DIRECTORY_ROOT
"
:
const
{
url
name
}
=
action
;
return
updateProjectDirectoryRoot
(
state
url
name
)
;
}
return
state
;
}
function
addThread
(
state
thread
)
{
const
threadActorID
=
thread
.
actor
;
if
(
thread
.
isTopLevel
)
{
state
.
isWebExtension
=
thread
.
isWebExtension
;
}
let
threadItem
=
state
.
threadItems
.
find
(
item
=
>
{
return
item
.
threadActorID
=
=
threadActorID
;
}
)
;
if
(
!
threadItem
)
{
threadItem
=
createThreadTreeItem
(
threadActorID
)
;
state
.
threadItems
=
[
.
.
.
state
.
threadItems
threadItem
]
;
}
else
{
state
.
threadItems
=
[
.
.
.
state
.
threadItems
]
;
}
threadItem
.
thread
=
thread
;
state
.
threadItems
.
sort
(
sortThreadItems
)
;
}
function
updateExpanded
(
state
action
)
{
return
{
.
.
.
state
expanded
:
new
Set
(
action
.
expanded
)
}
;
}
function
updateProjectDirectoryRoot
(
state
root
name
)
{
if
(
!
root
|
|
root
.
startsWith
(
"
top
-
level
"
)
)
{
prefs
.
projectDirectoryRoot
=
root
;
prefs
.
projectDirectoryRootName
=
name
;
}
return
{
.
.
.
state
projectDirectoryRoot
:
root
projectDirectoryRootName
:
name
}
;
}
function
isSourceVisibleInSourceTree
(
source
chromeAndExtensionsEnabled
debuggeeIsWebExtension
)
{
return
(
!
!
source
.
url
&
&
!
IGNORED_EXTENSIONS
.
includes
(
source
.
displayURL
.
fileExtension
)
&
&
!
IGNORED_URLS
.
includes
(
source
.
url
)
&
&
!
isPretty
(
source
)
&
&
(
!
source
.
isExtension
|
|
chromeAndExtensionsEnabled
|
|
debuggeeIsWebExtension
)
)
;
}
function
addSource
(
threadItems
thread
source
)
{
let
threadItem
=
threadItems
.
find
(
item
=
>
{
return
item
.
threadActorID
=
=
thread
;
}
)
;
if
(
!
threadItem
)
{
threadItem
=
createThreadTreeItem
(
thread
)
;
threadItems
.
push
(
threadItem
)
;
threadItems
.
sort
(
sortThreadItems
)
;
}
const
{
displayURL
}
=
source
;
const
{
group
}
=
displayURL
;
let
groupItem
=
threadItem
.
children
.
find
(
item
=
>
{
return
item
.
groupName
=
=
group
;
}
)
;
if
(
!
groupItem
)
{
groupItem
=
createGroupTreeItem
(
group
thread
threadItem
source
)
;
threadItem
.
children
=
[
.
.
.
threadItem
.
children
groupItem
]
;
threadItem
.
children
.
sort
(
sortItems
)
;
}
const
{
path
}
=
displayURL
;
const
parentPath
=
path
.
substring
(
0
path
.
lastIndexOf
(
"
/
"
)
)
;
const
directoryItem
=
addOrGetParentDirectory
(
thread
groupItem
parentPath
)
;
const
existing
=
directoryItem
.
children
.
find
(
item
=
>
{
return
item
.
type
=
=
"
source
"
&
&
item
.
source
=
=
source
;
}
)
;
if
(
existing
)
{
return
false
;
}
const
sourceItem
=
createSourceTreeItem
(
source
thread
group
directoryItem
)
;
directoryItem
.
children
=
[
.
.
.
directoryItem
.
children
sourceItem
]
;
directoryItem
.
children
.
sort
(
sortItems
)
;
return
true
;
}
function
sortItems
(
a
b
)
{
if
(
a
.
type
=
=
"
directory
"
&
&
b
.
type
=
=
"
source
"
)
{
return
-
1
;
}
else
if
(
b
.
type
=
=
"
directory
"
&
&
a
.
type
=
=
"
source
"
)
{
return
1
;
}
else
if
(
a
.
type
=
=
"
directory
"
&
&
b
.
type
=
=
"
directory
"
)
{
return
a
.
path
.
localeCompare
(
b
.
path
)
;
}
else
if
(
a
.
type
=
=
"
source
"
&
&
b
.
type
=
=
"
source
"
)
{
return
a
.
source
.
displayURL
.
filename
.
localeCompare
(
b
.
source
.
displayURL
.
filename
)
;
}
return
0
;
}
function
sortThreadItems
(
a
b
)
{
if
(
!
a
.
thread
|
|
!
b
.
thread
)
{
return
0
;
}
if
(
a
.
thread
.
isTopLevel
)
{
return
-
1
;
}
else
if
(
b
.
thread
.
isTopLevel
)
{
return
1
;
}
if
(
a
.
thread
.
targetType
=
=
"
process
"
&
&
b
.
thread
.
targetType
=
=
"
frame
"
)
{
return
-
1
;
}
else
if
(
a
.
thread
.
targetType
=
=
"
frame
"
&
&
b
.
thread
.
targetType
=
=
"
process
"
)
{
return
1
;
}
if
(
a
.
thread
.
targetType
.
endsWith
(
"
worker
"
)
&
&
!
b
.
thread
.
targetType
.
endsWith
(
"
worker
"
)
)
{
return
1
;
}
else
if
(
!
a
.
thread
.
targetType
.
endsWith
(
"
worker
"
)
&
&
b
.
thread
.
targetType
.
endsWith
(
"
worker
"
)
)
{
return
-
1
;
}
if
(
a
.
thread
.
processID
>
b
.
thread
.
processID
)
{
return
1
;
}
else
if
(
a
.
thread
.
processID
<
b
.
thread
.
processID
)
{
return
0
;
}
if
(
a
.
thread
.
targetType
=
=
"
frame
"
&
&
b
.
thread
.
targetType
=
=
"
frame
"
)
{
return
a
.
thread
.
name
.
localeCompare
(
b
.
thread
.
name
)
;
}
else
if
(
a
.
thread
.
targetType
.
endsWith
(
"
worker
"
)
&
&
b
.
thread
.
targetType
.
endsWith
(
"
worker
"
)
)
{
return
a
.
thread
.
name
.
localeCompare
(
b
.
thread
.
name
)
;
}
return
0
;
}
function
addOrGetParentDirectory
(
thread
groupItem
path
)
{
if
(
!
path
)
{
return
groupItem
;
}
const
existing
=
groupItem
.
_allGroupDirectoryItems
.
find
(
item
=
>
{
return
item
.
type
=
=
"
directory
"
&
&
item
.
path
=
=
path
;
}
)
;
if
(
existing
)
{
return
existing
;
}
const
parentPath
=
path
.
substring
(
0
path
.
lastIndexOf
(
"
/
"
)
)
;
const
parentDirectory
=
addOrGetParentDirectory
(
thread
groupItem
parentPath
)
;
const
directory
=
createDirectoryTreeItem
(
path
thread
groupItem
.
groupName
parentDirectory
)
;
parentDirectory
.
children
=
[
.
.
.
parentDirectory
.
children
directory
]
;
parentDirectory
.
children
.
sort
(
sortItems
)
;
groupItem
.
_allGroupDirectoryItems
.
push
(
directory
)
;
return
directory
;
}
function
createBaseTreeItem
(
{
type
parent
uniquePath
children
}
)
{
return
{
type
parent
uniquePath
children
}
;
}
function
createThreadTreeItem
(
thread
)
{
return
{
.
.
.
createBaseTreeItem
(
{
type
:
"
thread
"
parent
:
null
uniquePath
:
thread
children
:
[
]
}
)
threadActorID
:
thread
}
;
}
function
createGroupTreeItem
(
groupName
thread
parent
source
)
{
return
{
.
.
.
createBaseTreeItem
(
{
type
:
"
group
"
parent
uniquePath
:
{
parent
.
uniquePath
}
|
{
groupName
}
children
:
[
]
}
)
groupName
isForExtensionSource
:
source
.
isExtension
_allGroupDirectoryItems
:
[
]
}
;
}
function
createDirectoryTreeItem
(
path
thread
groupName
parent
)
{
const
pathSeparator
=
parent
.
type
=
=
"
directory
"
?
"
/
"
:
"
|
"
;
const
relativePath
=
parent
.
type
=
=
"
directory
"
?
path
.
replace
(
parent
.
path
"
"
)
.
replace
(
/
^
\
/
/
"
"
)
:
path
;
return
{
.
.
.
createBaseTreeItem
(
{
type
:
"
directory
"
parent
uniquePath
:
{
parent
.
uniquePath
}
{
pathSeparator
}
{
relativePath
}
children
:
[
]
}
)
path
}
;
}
function
createSourceTreeItem
(
source
thread
groupName
parent
)
{
return
{
.
.
.
createBaseTreeItem
(
{
type
:
"
source
"
parent
uniquePath
:
{
parent
.
uniquePath
}
|
{
source
.
id
}
children
:
null
}
)
source
}
;
}
