import
type
{
AstLocation
}
from
"
.
.
/
workers
/
parser
"
;
import
type
{
Action
}
from
"
.
.
/
actions
/
types
"
;
import
type
{
Grip
Exception
OINode
}
from
"
.
.
/
types
"
;
export
type
Preview
=
{
|
expression
:
string
resultGrip
:
Grip
|
null
root
:
OINode
properties
:
Array
<
Grip
>
location
:
AstLocation
cursorPos
:
any
tokenPos
:
AstLocation
target
:
HTMLDivElement
exception
:
?
Exception
|
}
;
export
type
PreviewState
=
{
+
preview
:
?
Preview
previewCount
:
number
}
;
export
function
initialPreviewState
(
)
:
PreviewState
{
return
{
preview
:
null
previewCount
:
0
}
;
}
function
update
(
state
:
PreviewState
=
initialPreviewState
(
)
action
:
Action
)
:
PreviewState
{
switch
(
action
.
type
)
{
case
"
CLEAR_PREVIEW
"
:
{
return
{
.
.
.
state
preview
:
null
}
;
}
case
"
START_PREVIEW
"
:
{
return
{
.
.
.
state
previewCount
:
state
.
previewCount
+
1
}
;
}
case
"
SET_PREVIEW
"
:
{
return
{
.
.
.
state
preview
:
action
.
value
}
;
}
}
return
state
;
}
type
OuterState
=
{
preview
:
PreviewState
}
;
export
function
getPreview
(
state
:
OuterState
)
:
?
Preview
{
return
state
.
preview
.
preview
;
}
export
function
getPreviewCount
(
state
:
OuterState
)
:
number
{
return
state
.
preview
.
previewCount
;
}
export
default
update
;
