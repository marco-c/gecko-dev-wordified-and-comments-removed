import
{
createInitial
insertResources
updateResources
removeResources
hasResource
getResourceValues
}
from
"
.
.
/
utils
/
resource
"
;
import
{
asyncActionAsValue
}
from
"
.
.
/
actions
/
utils
/
middleware
/
promise
"
;
export
const
initial
=
createInitial
(
)
;
export
default
function
update
(
state
=
initial
action
)
{
switch
(
action
.
type
)
{
case
"
INSERT_SOURCE_ACTORS
"
:
{
const
{
items
}
=
action
;
state
=
insertResources
(
state
items
.
map
(
item
=
>
(
{
.
.
.
item
breakableLines
:
null
}
)
)
)
;
break
;
}
case
"
NAVIGATE
"
:
{
state
=
initial
;
break
;
}
case
"
REMOVE_THREAD
"
:
{
const
sourceActors
=
Object
.
values
(
getResourceValues
(
state
)
)
.
filter
(
sourceActor
=
>
sourceActor
.
thread
=
=
action
.
threadActorID
)
;
state
=
removeResources
(
state
sourceActors
)
;
break
;
}
case
"
SET_SOURCE_ACTOR_BREAKABLE_LINES
"
:
state
=
updateBreakableLines
(
state
action
)
;
break
;
case
"
CLEAR_SOURCE_ACTOR_MAP_URL
"
:
state
=
clearSourceActorMapURL
(
state
action
.
id
)
;
break
;
}
return
state
;
}
function
clearSourceActorMapURL
(
state
id
)
{
if
(
!
hasResource
(
state
id
)
)
{
return
state
;
}
return
updateResources
(
state
[
{
id
sourceMapURL
:
"
"
}
]
)
;
}
function
updateBreakableLines
(
state
action
)
{
const
value
=
asyncActionAsValue
(
action
)
;
const
{
sourceId
}
=
action
;
if
(
!
hasResource
(
state
sourceId
)
)
{
return
state
;
}
return
updateResources
(
state
[
{
id
:
sourceId
breakableLines
:
value
}
]
)
;
}
