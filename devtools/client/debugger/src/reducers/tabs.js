import
{
isSimilarTab
}
from
"
.
.
/
utils
/
tabs
"
;
export
function
initialTabState
(
)
{
return
{
tabs
:
[
]
}
;
}
function
update
(
state
=
initialTabState
(
)
action
)
{
switch
(
action
.
type
)
{
case
"
ADD_TAB
"
:
return
updateTabList
(
state
action
.
source
action
.
sourceActor
)
;
case
"
MOVE_TAB
"
:
return
moveTabInList
(
state
action
)
;
case
"
MOVE_TAB_BY_SOURCE_ID
"
:
return
moveTabInListBySourceId
(
state
action
)
;
case
"
CLOSE_TABS
"
:
return
removeSourcesFromTabList
(
state
action
)
;
case
"
ADD_ORIGINAL_SOURCES
"
:
return
addVisibleTabsForOriginalSources
(
state
action
.
originalSources
action
.
generatedSourceActor
)
;
case
"
INSERT_SOURCE_ACTORS
"
:
return
addVisibleTabsForSourceActors
(
state
action
.
sourceActors
)
;
case
"
REMOVE_SOURCES
"
:
{
return
resetTabsForRemovedSources
(
state
action
)
;
}
default
:
return
state
;
}
}
function
matchesSource
(
tab
source
)
{
return
(
tab
.
source
?
.
id
=
=
=
source
.
id
|
|
(
source
.
url
&
&
tab
.
url
=
=
=
source
.
url
&
&
tab
.
isOriginal
=
=
source
.
isOriginal
)
|
|
(
source
.
isPrettyPrinted
&
&
tab
.
source
=
=
source
.
generatedSource
)
|
|
(
tab
.
isPrettyPrinted
&
&
tab
.
url
=
=
{
source
.
url
}
:
formatted
)
)
;
}
function
addVisibleTabsForSourceActors
(
state
sourceActors
)
{
let
changed
=
false
;
const
tabs
=
state
.
tabs
.
map
(
tab
=
>
{
const
sourceActor
=
sourceActors
.
find
(
actor
=
>
matchesSource
(
tab
actor
.
sourceObject
)
)
;
if
(
!
sourceActor
)
{
return
tab
;
}
changed
=
true
;
return
{
.
.
.
tab
source
:
sourceActor
.
sourceObject
sourceActor
}
;
}
)
;
return
changed
?
{
tabs
}
:
state
;
}
function
addVisibleTabsForOriginalSources
(
state
sources
generatedSourceActor
)
{
let
changed
=
false
;
const
tabs
=
state
.
tabs
.
map
(
tab
=
>
{
const
source
=
sources
.
find
(
s
=
>
matchesSource
(
tab
s
)
)
;
if
(
!
source
)
{
return
tab
;
}
changed
=
true
;
return
{
.
.
.
tab
url
:
source
.
url
isOriginal
:
source
.
isPrettyPrinted
?
true
:
tab
.
isOriginal
isPrettyPrinted
:
source
.
isPrettyPrinted
|
|
tab
.
isPrettyPrinted
source
sourceActor
:
generatedSourceActor
}
;
}
)
;
return
changed
?
{
tabs
}
:
state
;
}
function
removeSourcesFromTabList
(
state
{
sources
}
)
{
const
newTabs
=
sources
.
reduce
(
(
tabList
source
)
=
>
tabList
.
filter
(
tab
=
>
!
matchesSource
(
tab
source
)
)
state
.
tabs
)
;
if
(
newTabs
.
length
=
=
state
.
tabs
.
length
)
{
return
state
;
}
return
{
tabs
:
newTabs
}
;
}
function
resetTabsForRemovedSources
(
state
{
sources
}
)
{
let
changed
=
false
;
const
tabs
=
state
.
tabs
.
map
(
tab
=
>
{
if
(
!
sources
.
includes
(
tab
.
source
)
)
{
return
tab
;
}
changed
=
true
;
if
(
tab
.
source
.
isPrettyPrinted
)
{
return
{
.
.
.
tab
isOriginal
:
false
isPrettyPrinted
:
false
source
:
tab
.
source
.
generatedSource
url
:
tab
.
source
.
generatedSource
.
url
}
;
}
return
{
.
.
.
tab
source
:
null
sourceActor
:
null
}
;
}
)
;
return
changed
?
{
tabs
}
:
state
;
}
function
updateTabList
(
state
source
sourceActor
)
{
if
(
source
.
isPrettyPrinted
)
{
const
{
generatedSource
}
=
source
;
const
idx
=
state
.
tabs
.
findIndex
(
tab
=
>
tab
.
source
=
=
generatedSource
)
;
if
(
idx
=
=
-
1
)
{
const
newTab
=
{
url
:
source
.
url
source
isOriginal
:
true
isPrettyPrinted
:
true
sourceActor
}
;
let
newTabs
=
Array
.
from
(
state
.
tabs
)
;
newTabs
=
[
newTab
.
.
.
state
.
tabs
]
;
return
{
.
.
.
state
tabs
:
newTabs
}
;
}
const
newTabs
=
Array
.
from
(
state
.
tabs
)
;
newTabs
[
idx
]
=
{
.
.
.
newTabs
[
idx
]
isOriginal
:
true
isPrettyPrinted
:
true
source
sourceActor
url
:
source
.
url
}
;
return
{
.
.
.
state
tabs
:
newTabs
}
;
}
const
{
url
isOriginal
}
=
source
;
let
{
tabs
}
=
state
;
const
currentIndex
=
url
?
tabs
.
findIndex
(
tab
=
>
isSimilarTab
(
tab
url
isOriginal
)
)
:
-
1
;
if
(
currentIndex
!
=
=
-
1
)
{
return
state
;
}
const
newTab
=
{
url
source
isOriginal
isPrettyPrinted
:
false
sourceActor
}
;
tabs
=
[
newTab
.
.
.
tabs
]
;
return
{
.
.
.
state
tabs
}
;
}
function
moveTabInList
(
state
{
url
tabIndex
:
newIndex
}
)
{
const
currentIndex
=
state
.
tabs
.
findIndex
(
tab
=
>
tab
.
url
=
=
url
)
;
return
moveTab
(
state
currentIndex
newIndex
)
;
}
function
moveTabInListBySourceId
(
state
{
sourceId
tabIndex
:
newIndex
}
)
{
const
currentIndex
=
state
.
tabs
.
findIndex
(
tab
=
>
tab
.
source
?
.
id
=
=
sourceId
)
;
return
moveTab
(
state
currentIndex
newIndex
)
;
}
function
moveTab
(
state
currentIndex
newIndex
)
{
const
{
tabs
}
=
state
;
const
item
=
tabs
[
currentIndex
]
;
if
(
currentIndex
=
=
newIndex
|
|
isNaN
(
newIndex
)
)
{
return
state
;
}
const
newTabs
=
Array
.
from
(
tabs
)
;
newTabs
.
splice
(
currentIndex
1
)
;
newTabs
.
splice
(
newIndex
0
item
)
;
return
{
tabs
:
newTabs
}
;
}
export
default
update
;
