import
{
prefs
}
from
"
.
.
/
utils
/
prefs
"
;
export
function
initialTabState
(
{
urls
=
[
]
prettyPrintedURLs
=
new
Set
(
)
}
=
{
}
)
{
return
{
urls
prettyPrintedURLs
prettyPrintedDisabledURLs
:
new
Set
(
)
openedSources
:
[
]
}
;
}
function
update
(
state
=
initialTabState
(
)
action
)
{
switch
(
action
.
type
)
{
case
"
ADD_TAB
"
:
return
updateTabsWithNewActiveSource
(
state
[
action
.
source
]
true
)
;
case
"
MOVE_TAB
"
:
return
moveTabInList
(
state
action
.
url
action
.
tabIndex
)
;
case
"
MOVE_TAB_BY_SOURCE_ID
"
:
return
moveTabInListBySourceId
(
state
action
.
sourceId
action
.
tabIndex
)
;
case
"
CLOSE_TABS_FOR_SOURCES
"
:
return
closeTabsForSources
(
state
action
.
sources
true
)
;
case
"
ADD_ORIGINAL_SOURCES
"
:
{
return
updateTabsWithNewActiveSource
(
state
action
.
originalSources
false
)
;
}
case
"
INSERT_SOURCE_ACTORS
"
:
{
const
sources
=
action
.
sourceActors
.
map
(
sourceActor
=
>
sourceActor
.
sourceObject
)
;
return
updateTabsWithNewActiveSource
(
state
sources
false
)
;
}
case
"
REMOVE_SOURCES
"
:
{
return
closeTabsForSources
(
state
action
.
sources
false
)
;
}
case
"
REMOVE_PRETTY_PRINTED_SOURCE
"
:
{
return
removePrettyPrintedSource
(
state
action
.
source
)
;
}
default
:
return
state
;
}
}
function
removePrettyPrintedSource
(
state
source
)
{
const
generatedSourceURL
=
source
.
isPrettyPrinted
?
source
.
generatedSource
.
url
:
source
.
url
;
const
prettyPrintedURLs
=
new
Set
(
state
.
prettyPrintedURLs
)
;
prettyPrintedURLs
.
delete
(
generatedSourceURL
)
;
let
prettyPrintedDisabledURLs
=
state
.
prettyPrintedDisabledURLs
;
if
(
prefs
.
autoPrettyPrint
)
{
prettyPrintedDisabledURLs
=
new
Set
(
prettyPrintedDisabledURLs
)
;
prettyPrintedDisabledURLs
.
add
(
generatedSourceURL
)
;
}
return
{
.
.
.
state
prettyPrintedURLs
prettyPrintedDisabledURLs
}
;
}
function
updateTabsWithNewActiveSource
(
state
sources
forceAdding
=
false
)
{
let
{
urls
openedSources
prettyPrintedURLs
prettyPrintedDisabledURLs
}
=
state
;
for
(
let
source
of
sources
)
{
if
(
source
.
isPrettyPrinted
)
{
source
=
source
.
generatedSource
;
if
(
state
.
prettyPrintedURLs
=
=
prettyPrintedURLs
)
{
prettyPrintedURLs
=
new
Set
(
prettyPrintedURLs
)
;
}
prettyPrintedURLs
.
add
(
source
.
url
)
;
prettyPrintedDisabledURLs
.
delete
(
source
.
url
)
;
}
const
{
url
}
=
source
;
if
(
openedSources
.
includes
(
source
)
|
|
(
!
forceAdding
&
&
(
!
url
|
|
!
urls
.
includes
(
url
)
)
)
)
{
continue
;
}
if
(
openedSources
=
=
=
state
.
openedSources
)
{
openedSources
=
[
.
.
.
openedSources
]
;
}
let
index
=
-
1
;
if
(
url
)
{
if
(
!
urls
.
includes
(
url
)
)
{
if
(
urls
=
=
=
state
.
urls
)
{
urls
=
[
.
.
.
state
.
urls
]
;
}
urls
.
unshift
(
url
)
;
}
else
{
const
indexInUrls
=
urls
.
indexOf
(
url
)
;
for
(
let
i
=
indexInUrls
-
1
;
i
>
=
0
;
i
-
-
)
{
const
previousSourceUrl
=
urls
[
i
]
;
index
=
openedSources
.
findIndex
(
s
=
>
s
.
url
=
=
=
previousSourceUrl
)
;
if
(
index
!
=
-
1
)
{
break
;
}
}
}
}
if
(
index
=
=
-
1
)
{
openedSources
.
unshift
(
source
)
;
}
else
{
openedSources
.
splice
(
index
+
1
0
source
)
;
}
}
if
(
openedSources
!
=
state
.
openedSources
|
|
urls
!
=
state
.
urls
|
|
prettyPrintedURLs
!
=
state
.
prettyPrintedURLs
|
|
prettyPrintedDisabledURLs
!
=
state
.
prettyPrintedDisabledURLs
)
{
return
{
.
.
.
state
urls
openedSources
prettyPrintedURLs
prettyPrintedDisabledURLs
}
;
}
return
state
;
}
function
closeTabsForSources
(
state
sources
permanent
=
false
)
{
if
(
!
sources
.
length
)
{
return
state
;
}
const
tabSources
=
sources
.
map
(
s
=
>
s
.
isPrettyPrinted
?
s
.
generatedSource
:
s
)
;
const
newOpenedSources
=
state
.
openedSources
.
filter
(
source
=
>
{
return
!
tabSources
.
includes
(
source
)
;
}
)
;
if
(
newOpenedSources
.
length
=
=
state
.
openedSources
.
length
)
{
return
state
;
}
let
{
urls
prettyPrintedURLs
}
=
state
;
if
(
permanent
)
{
const
sourceURLs
=
tabSources
.
map
(
source
=
>
source
.
url
)
;
urls
=
state
.
urls
.
filter
(
url
=
>
!
sourceURLs
.
includes
(
url
)
)
;
prettyPrintedURLs
=
new
Set
(
state
.
prettyPrintedURLs
)
;
for
(
const
url
of
sourceURLs
)
{
prettyPrintedURLs
.
delete
(
url
)
;
}
}
return
{
.
.
.
state
urls
prettyPrintedURLs
openedSources
:
newOpenedSources
}
;
}
function
moveTabInList
(
state
url
newIndex
)
{
const
currentIndex
=
state
.
openedSources
.
findIndex
(
source
=
>
source
.
url
=
=
url
)
;
return
moveTab
(
state
currentIndex
newIndex
)
;
}
function
moveTabInListBySourceId
(
state
sourceId
newIndex
)
{
const
currentIndex
=
state
.
openedSources
.
findIndex
(
source
=
>
source
.
id
=
=
sourceId
)
;
return
moveTab
(
state
currentIndex
newIndex
)
;
}
function
moveTab
(
state
currentIndex
newIndex
)
{
if
(
currentIndex
=
=
newIndex
|
|
isNaN
(
newIndex
)
)
{
return
state
;
}
const
{
openedSources
}
=
state
;
const
source
=
openedSources
[
currentIndex
]
;
const
newOpenedSources
=
Array
.
from
(
openedSources
)
;
newOpenedSources
.
splice
(
currentIndex
1
)
;
newOpenedSources
.
splice
(
newIndex
0
source
)
;
let
newUrls
=
state
.
urls
;
const
{
url
}
=
source
;
if
(
url
)
{
const
urlIndex
=
state
.
urls
.
indexOf
(
url
)
;
let
newUrlIndex
=
0
;
for
(
let
i
=
newIndex
;
i
>
=
0
;
i
-
-
)
{
const
previousTabUrl
=
newOpenedSources
[
i
]
.
url
;
if
(
previousTabUrl
)
{
newUrlIndex
=
state
.
urls
.
indexOf
(
previousTabUrl
)
;
break
;
}
}
if
(
urlIndex
!
=
-
1
&
&
newUrlIndex
!
=
-
1
)
{
newUrls
=
Array
.
from
(
state
.
urls
)
;
newUrls
.
splice
(
urlIndex
1
)
;
newUrls
.
splice
(
newUrlIndex
0
url
)
;
}
}
return
{
.
.
.
state
urls
:
newUrls
openedSources
:
newOpenedSources
}
;
}
export
default
update
;
