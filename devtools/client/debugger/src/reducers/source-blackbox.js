export
function
initialSourceBlackBoxState
(
state
)
{
return
{
blackboxedRanges
:
state
?
.
blackboxedRanges
?
?
{
}
blackboxedSet
:
new
Set
(
)
}
;
}
function
update
(
state
=
initialSourceBlackBoxState
(
)
action
)
{
switch
(
action
.
type
)
{
case
"
BLACKBOX
"
:
if
(
action
.
status
=
=
=
"
done
"
)
{
const
{
blackboxSources
}
=
action
.
value
;
state
=
updateBlackBoxState
(
state
blackboxSources
)
;
}
break
;
case
"
NAVIGATE
"
:
return
initialSourceBlackBoxState
(
state
)
;
}
return
state
;
}
function
updateBlackboxRangesForSourceUrl
(
currentRanges
currentSet
url
shouldBlackBox
newRanges
)
{
if
(
shouldBlackBox
)
{
currentSet
.
add
(
url
)
;
if
(
!
newRanges
.
length
)
{
currentRanges
[
url
]
=
[
]
;
}
else
{
currentRanges
[
url
]
=
currentRanges
[
url
]
|
|
[
]
;
newRanges
.
forEach
(
newRange
=
>
{
const
duplicate
=
currentRanges
[
url
]
.
findIndex
(
r
=
>
r
.
start
.
line
=
=
newRange
.
start
.
line
&
&
r
.
end
.
line
=
=
newRange
.
end
.
line
)
;
if
(
duplicate
!
=
=
-
1
)
{
return
;
}
const
index
=
currentRanges
[
url
]
.
findIndex
(
range
=
>
range
.
end
.
line
<
=
newRange
.
start
.
line
&
&
range
.
end
.
column
<
=
newRange
.
start
.
column
)
;
currentRanges
[
url
]
.
splice
(
index
+
1
0
newRange
)
;
}
)
;
}
}
else
{
if
(
!
newRanges
.
length
)
{
currentSet
.
delete
(
url
)
;
delete
currentRanges
[
url
]
;
return
;
}
newRanges
.
forEach
(
newRange
=
>
{
const
index
=
currentRanges
[
url
]
.
findIndex
(
range
=
>
range
.
start
.
line
=
=
=
newRange
.
start
.
line
&
&
range
.
end
.
line
=
=
=
newRange
.
end
.
line
)
;
if
(
index
!
=
=
-
1
)
{
currentRanges
[
url
]
.
splice
(
index
1
)
;
}
}
)
;
if
(
currentRanges
[
url
]
.
length
=
=
0
)
{
currentSet
.
delete
(
url
)
;
delete
currentRanges
[
url
]
;
}
}
}
function
updateBlackBoxState
(
state
blackboxSources
)
{
const
currentRanges
=
{
.
.
.
state
.
blackboxedRanges
}
;
const
currentSet
=
new
Set
(
state
.
blackboxedSet
)
;
blackboxSources
.
map
(
(
{
source
shouldBlackBox
ranges
}
)
=
>
updateBlackboxRangesForSourceUrl
(
currentRanges
currentSet
source
.
url
shouldBlackBox
ranges
)
)
;
return
{
.
.
.
state
blackboxedRanges
:
currentRanges
blackboxedSet
:
currentSet
}
;
}
export
default
update
;
