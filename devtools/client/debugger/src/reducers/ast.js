import
{
makeBreakpointId
}
from
"
.
.
/
utils
/
breakpoint
/
index
"
;
export
function
initialASTState
(
)
{
return
{
mutableInScopeLines
:
new
Map
(
)
}
;
}
function
update
(
state
=
initialASTState
(
)
action
)
{
switch
(
action
.
type
)
{
case
"
IN_SCOPE_LINES
"
:
{
state
.
mutableInScopeLines
.
set
(
makeBreakpointId
(
action
.
location
)
{
lines
:
action
.
lines
source
:
action
.
location
.
source
}
)
;
return
{
.
.
.
state
}
;
}
case
"
RESUME
"
:
{
return
initialASTState
(
)
;
}
case
"
REMOVE_SOURCES
"
:
{
const
{
sources
}
=
action
;
if
(
!
sources
.
length
)
{
return
state
;
}
const
{
mutableInScopeLines
}
=
state
;
let
changed
=
false
;
for
(
const
[
breakpointId
{
source
}
]
in
mutableInScopeLines
.
entries
(
)
)
{
if
(
sources
.
includes
(
source
)
)
{
mutableInScopeLines
.
delete
(
breakpointId
)
;
changed
=
true
;
}
}
return
changed
?
{
.
.
.
state
}
:
state
;
}
default
:
{
return
state
;
}
}
}
export
default
update
;
