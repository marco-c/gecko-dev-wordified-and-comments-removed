import
{
makeBreakpointId
}
from
"
.
.
/
utils
/
breakpoint
/
index
"
;
export
function
initialASTState
(
)
{
return
{
mutableInScopeLines
:
{
}
}
;
}
function
update
(
state
=
initialASTState
(
)
action
)
{
switch
(
action
.
type
)
{
case
"
IN_SCOPE_LINES
"
:
{
state
.
mutableInScopeLines
[
makeBreakpointId
(
action
.
location
)
]
=
{
lines
:
action
.
lines
threadActorId
:
action
.
location
.
sourceActor
?
.
thread
}
;
return
{
.
.
.
state
}
;
}
case
"
RESUME
"
:
{
return
{
.
.
.
state
mutableInScopeLines
:
{
}
}
;
}
case
"
REMOVE_THREAD
"
:
{
function
clearDict
(
dict
threadId
)
{
for
(
const
key
in
dict
)
{
if
(
dict
[
key
]
.
threadActorId
=
=
threadId
)
{
delete
dict
[
key
]
;
}
}
}
clearDict
(
state
.
mutableInScopeLines
action
.
threadActorID
)
;
return
{
.
.
.
state
}
;
}
default
:
{
return
state
;
}
}
}
export
default
update
;
