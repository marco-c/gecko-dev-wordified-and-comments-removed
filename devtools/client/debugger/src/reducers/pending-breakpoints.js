import
{
createPendingBreakpoint
makePendingLocationId
}
from
"
.
.
/
utils
/
breakpoint
"
;
import
{
isPrettyURL
}
from
"
.
.
/
utils
/
source
"
;
function
update
(
state
=
{
}
action
)
{
switch
(
action
.
type
)
{
case
"
SET_BREAKPOINT
"
:
if
(
action
.
status
=
=
=
"
start
"
)
{
return
setBreakpoint
(
state
action
)
;
}
return
state
;
case
"
REMOVE_BREAKPOINT
"
:
if
(
action
.
status
=
=
=
"
start
"
)
{
return
removeBreakpoint
(
state
action
)
;
}
return
state
;
case
"
REMOVE_PENDING_BREAKPOINT
"
:
return
removeBreakpoint
(
state
action
)
;
case
"
REMOVE_BREAKPOINTS
"
:
{
return
{
}
;
}
}
return
state
;
}
function
makePendingLocationIdFromBreakpoint
(
breakpoint
)
{
const
location
=
!
breakpoint
.
location
.
sourceUrl
|
|
isPrettyURL
(
breakpoint
.
location
.
sourceUrl
)
?
breakpoint
.
generatedLocation
:
breakpoint
.
location
;
return
makePendingLocationId
(
location
)
;
}
function
setBreakpoint
(
state
{
breakpoint
}
)
{
if
(
breakpoint
.
options
.
hidden
)
{
return
state
;
}
const
locationId
=
makePendingLocationIdFromBreakpoint
(
breakpoint
)
;
const
pendingBreakpoint
=
createPendingBreakpoint
(
breakpoint
)
;
return
{
.
.
.
state
[
locationId
]
:
pendingBreakpoint
}
;
}
function
removeBreakpoint
(
state
{
breakpoint
}
)
{
const
locationId
=
makePendingLocationIdFromBreakpoint
(
breakpoint
)
;
state
=
{
.
.
.
state
}
;
delete
state
[
locationId
]
;
return
state
;
}
export
default
update
;
