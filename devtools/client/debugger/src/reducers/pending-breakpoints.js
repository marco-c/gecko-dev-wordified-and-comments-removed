import
assert
from
"
.
.
/
utils
/
assert
"
;
function
update
(
state
=
{
}
action
)
{
switch
(
action
.
type
)
{
case
"
SET_BREAKPOINT
"
:
if
(
action
.
status
=
=
=
"
start
"
)
{
return
setBreakpoint
(
state
action
.
breakpoint
)
;
}
return
state
;
case
"
REMOVE_BREAKPOINT
"
:
if
(
action
.
status
=
=
=
"
start
"
)
{
return
removeBreakpoint
(
state
action
.
breakpoint
)
;
}
return
state
;
case
"
REMOVE_PENDING_BREAKPOINT
"
:
return
removePendingBreakpoint
(
state
action
.
pendingBreakpoint
)
;
case
"
CLEAR_BREAKPOINTS
"
:
{
return
{
}
;
}
}
return
state
;
}
function
shouldBreakpointBePersisted
(
breakpoint
)
{
return
!
breakpoint
.
options
.
hidden
&
&
breakpoint
.
location
.
source
.
url
;
}
function
setBreakpoint
(
state
breakpoint
)
{
if
(
!
shouldBreakpointBePersisted
(
breakpoint
)
)
{
return
state
;
}
const
id
=
makeIdFromBreakpoint
(
breakpoint
)
;
const
pendingBreakpoint
=
createPendingBreakpoint
(
breakpoint
)
;
return
{
.
.
.
state
[
id
]
:
pendingBreakpoint
}
;
}
function
removeBreakpoint
(
state
breakpoint
)
{
if
(
!
shouldBreakpointBePersisted
(
breakpoint
)
)
{
return
state
;
}
const
id
=
makeIdFromBreakpoint
(
breakpoint
)
;
state
=
{
.
.
.
state
}
;
delete
state
[
id
]
;
return
state
;
}
function
removePendingBreakpoint
(
state
pendingBreakpoint
)
{
const
id
=
makeIdFromPendingBreakpoint
(
pendingBreakpoint
)
;
state
=
{
.
.
.
state
}
;
delete
state
[
id
]
;
return
state
;
}
function
makeIdFromBreakpoint
(
breakpoint
)
{
const
location
=
breakpoint
.
location
.
source
.
isPrettyPrinted
?
breakpoint
.
generatedLocation
:
breakpoint
.
location
;
const
{
source
line
column
}
=
location
;
const
sourceUrlString
=
source
.
url
|
|
"
"
;
const
columnString
=
column
|
|
"
"
;
return
{
sourceUrlString
}
:
{
line
}
:
{
columnString
}
;
}
function
makeIdFromPendingBreakpoint
(
pendingBreakpoint
)
{
const
{
sourceUrl
line
column
}
=
pendingBreakpoint
.
location
;
const
sourceUrlString
=
sourceUrl
|
|
"
"
;
const
columnString
=
column
|
|
"
"
;
return
{
sourceUrlString
}
:
{
line
}
:
{
columnString
}
;
}
function
createPendingLocation
(
location
)
{
assert
(
location
.
hasOwnProperty
(
"
line
"
)
"
location
must
have
a
line
"
)
;
assert
(
location
.
hasOwnProperty
(
"
column
"
)
"
location
must
have
a
column
"
)
;
const
{
source
line
column
}
=
location
;
assert
(
source
.
url
!
=
=
undefined
"
pending
location
must
have
a
source
url
"
)
;
return
{
sourceUrl
:
source
.
url
line
column
}
;
}
function
createPendingBreakpoint
(
bp
)
{
return
{
options
:
bp
.
options
disabled
:
bp
.
disabled
location
:
createPendingLocation
(
bp
.
location
)
generatedLocation
:
createPendingLocation
(
bp
.
generatedLocation
)
}
;
}
export
default
update
;
