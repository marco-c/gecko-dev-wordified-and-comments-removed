import
{
sortBy
}
from
"
lodash
"
;
import
{
createSelector
}
from
"
reselect
"
;
export
function
initialThreadsState
(
)
{
return
{
threads
:
[
]
isWebExtension
:
false
}
;
}
export
default
function
update
(
state
=
initialThreadsState
(
)
action
)
{
switch
(
action
.
type
)
{
case
"
CONNECT
"
:
return
{
.
.
.
state
isWebExtension
:
action
.
isWebExtension
}
;
case
"
INSERT_THREAD
"
:
return
{
.
.
.
state
threads
:
[
.
.
.
state
.
threads
action
.
newThread
]
}
;
case
"
REMOVE_THREAD
"
:
const
{
oldThread
}
=
action
;
return
{
.
.
.
state
threads
:
state
.
threads
.
filter
(
thread
=
>
oldThread
.
actor
!
=
thread
.
actor
)
}
;
case
"
UPDATE_SERVICE_WORKER_STATUS
"
:
const
{
thread
status
}
=
action
;
return
{
.
.
.
state
threads
:
state
.
threads
.
map
(
t
=
>
{
if
(
t
.
actor
=
=
thread
)
{
return
{
.
.
.
t
serviceWorkerStatus
:
status
}
;
}
return
t
;
}
)
}
;
default
:
return
state
;
}
}
export
const
getWorkerCount
=
state
=
>
getThreads
(
state
)
.
length
;
export
function
getWorkerByThread
(
state
thread
)
{
return
getThreads
(
state
)
.
find
(
worker
=
>
worker
.
actor
=
=
thread
)
;
}
function
isMainThread
(
thread
)
{
return
thread
.
isTopLevel
;
}
export
function
getMainThread
(
state
)
{
return
state
.
threads
.
threads
.
find
(
isMainThread
)
;
}
export
function
getDebuggeeUrl
(
state
)
{
return
getMainThread
(
state
)
?
.
url
|
|
"
"
;
}
export
const
getThreads
=
createSelector
(
state
=
>
state
.
threads
.
threads
threads
=
>
threads
.
filter
(
thread
=
>
!
isMainThread
(
thread
)
)
)
;
export
const
getAllThreads
=
createSelector
(
getMainThread
getThreads
(
mainThread
threads
)
=
>
[
mainThread
.
.
.
sortBy
(
threads
thread
=
>
thread
.
name
)
]
.
filter
(
Boolean
)
)
;
export
function
getThread
(
state
threadActor
)
{
return
getAllThreads
(
state
)
.
find
(
thread
=
>
thread
.
actor
=
=
=
threadActor
)
;
}
export
function
startsWithThreadActor
(
state
path
)
{
const
threadActors
=
getAllThreads
(
state
)
.
map
(
t
=
>
t
.
actor
)
;
const
match
=
path
.
match
(
new
RegExp
(
(
{
threadActors
.
join
(
"
|
"
)
}
)
\
/
(
.
*
)
)
)
;
return
match
?
.
[
1
]
;
}
