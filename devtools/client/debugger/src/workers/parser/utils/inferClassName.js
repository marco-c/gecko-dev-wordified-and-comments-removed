import
*
as
t
from
"
babel
/
types
"
;
function
fromCallExpression
(
callExpression
)
{
const
allowlist
=
[
"
extend
"
"
createClass
"
]
;
const
{
callee
}
=
callExpression
.
node
;
if
(
!
callee
)
{
return
null
;
}
const
name
=
t
.
isMemberExpression
(
callee
)
?
callee
.
property
.
name
:
callee
.
name
;
if
(
!
allowlist
.
includes
(
name
)
)
{
return
null
;
}
const
variable
=
callExpression
.
findParent
(
p
=
>
t
.
isVariableDeclarator
(
p
.
node
)
)
;
if
(
variable
)
{
return
variable
.
node
.
id
.
name
;
}
const
assignment
=
callExpression
.
findParent
(
p
=
>
t
.
isAssignmentExpression
(
p
.
node
)
)
;
if
(
!
assignment
)
{
return
null
;
}
const
{
left
}
=
assignment
.
node
;
if
(
left
.
name
)
{
return
name
;
}
if
(
t
.
isMemberExpression
(
left
)
)
{
return
left
.
property
.
name
;
}
return
null
;
}
function
fromPrototype
(
assignment
)
{
const
{
left
}
=
assignment
.
node
;
if
(
!
left
)
{
return
null
;
}
if
(
t
.
isMemberExpression
(
left
)
&
&
left
.
object
&
&
t
.
isMemberExpression
(
left
.
object
)
&
&
left
.
object
.
property
.
identifier
=
=
=
"
prototype
"
)
{
return
left
.
object
.
object
.
name
;
}
return
null
;
}
export
function
inferClassName
(
path
)
{
const
classDeclaration
=
path
.
findParent
(
p
=
>
t
.
isClassDeclaration
(
p
.
node
)
)
;
if
(
classDeclaration
)
{
return
classDeclaration
.
node
.
id
.
name
;
}
const
callExpression
=
path
.
findParent
(
p
=
>
t
.
isCallExpression
(
p
.
node
)
)
;
if
(
callExpression
)
{
return
fromCallExpression
(
callExpression
)
;
}
const
assignment
=
path
.
findParent
(
p
=
>
t
.
isAssignmentExpression
(
p
.
node
)
)
;
if
(
assignment
)
{
return
fromPrototype
(
assignment
)
;
}
return
null
;
}
