const
alphanum
=
/
[
a
-
z0
-
9
\
-
]
/
i
;
function
parseToken
(
str
start
)
{
let
i
=
start
;
while
(
i
<
str
.
length
&
&
alphanum
.
test
(
str
.
charAt
(
i
+
+
)
)
)
{
continue
;
}
if
(
i
!
=
=
start
)
{
return
{
token
:
str
.
substring
(
start
i
-
1
)
index
:
i
}
;
}
return
null
;
}
function
parseAttributes
(
str
start
)
{
let
i
=
start
;
const
attributes
=
{
}
;
let
attribute
=
null
;
while
(
i
<
str
.
length
)
{
const
c
=
str
.
charAt
(
i
)
;
if
(
attribute
=
=
=
null
&
&
c
=
=
"
>
"
)
{
break
;
}
else
if
(
attribute
=
=
=
null
&
&
alphanum
.
test
(
c
)
)
{
attribute
=
{
name
:
null
value
:
true
bool
:
true
terminator
:
null
}
;
const
attributeNameNode
=
parseToken
(
str
i
)
;
if
(
attributeNameNode
)
{
attribute
.
name
=
attributeNameNode
.
token
;
i
=
attributeNameNode
.
index
-
2
;
}
}
else
if
(
attribute
!
=
=
null
)
{
if
(
c
=
=
=
"
=
"
)
{
attribute
.
bool
=
false
;
if
(
attribute
.
value
=
=
=
true
)
{
attribute
.
value
=
"
"
;
}
}
else
if
(
!
attribute
.
bool
&
&
attribute
.
terminator
=
=
=
null
&
&
(
c
=
=
=
'
"
'
|
|
c
=
=
=
"
'
"
)
)
{
attribute
.
terminator
=
c
;
}
else
if
(
attribute
.
terminator
)
{
if
(
c
=
=
=
attribute
.
terminator
)
{
attributes
[
attribute
.
name
]
=
attribute
.
value
;
attribute
=
null
;
}
else
{
attribute
.
value
+
=
c
;
if
(
c
=
=
=
"
\
\
"
)
{
const
next
=
str
.
charAt
(
i
+
1
)
;
if
(
next
=
=
=
attribute
.
terminator
)
{
attribute
.
value
+
=
next
;
i
+
=
1
;
}
}
}
}
else
if
(
!
/
\
s
/
.
test
(
c
)
)
{
attributes
[
attribute
.
name
]
=
attribute
.
value
;
attribute
=
null
;
i
-
=
1
;
}
}
i
+
+
;
}
if
(
i
!
=
=
start
)
{
return
{
attributes
index
:
i
}
;
}
return
null
;
}
function
parseFragment
(
str
start
=
0
)
{
let
tag
=
null
;
let
open
=
false
;
let
attributes
=
{
}
;
let
i
=
start
;
while
(
i
<
str
.
length
)
{
const
c
=
str
.
charAt
(
i
+
+
)
;
if
(
!
open
&
&
!
tag
&
&
c
=
=
=
"
<
"
)
{
open
=
true
;
const
tagNode
=
parseToken
(
str
i
)
;
if
(
!
tagNode
)
{
return
null
;
}
i
=
tagNode
.
index
-
1
;
tag
=
tagNode
.
token
;
}
else
if
(
open
&
&
c
=
=
=
"
>
"
)
{
break
;
}
else
if
(
open
)
{
const
attributeNode
=
parseAttributes
(
str
i
-
1
)
;
if
(
attributeNode
)
{
i
=
attributeNode
.
index
;
attributes
=
attributeNode
.
attributes
|
|
attributes
;
}
}
}
if
(
tag
)
{
return
{
tag
attributes
}
;
}
return
null
;
}
export
default
parseFragment
;
export
{
parseFragment
}
;
