import
type
{
AstLocation
AstPosition
}
from
"
.
/
types
"
;
import
type
{
SourceId
}
from
"
.
.
/
.
.
/
types
"
;
import
findIndex
from
"
lodash
/
findIndex
"
;
import
findLastIndex
from
"
lodash
/
findLastIndex
"
;
import
{
containsLocation
containsPosition
}
from
"
.
/
utils
/
contains
"
;
import
{
getSymbols
}
from
"
.
/
getSymbols
"
;
function
findSymbols
(
source
)
{
const
{
functions
comments
}
=
getSymbols
(
source
)
;
return
{
functions
comments
}
;
}
function
getLocation
(
func
)
{
const
location
=
{
.
.
.
func
.
location
}
;
const
identifierEnd
=
func
?
.
identifier
?
.
loc
?
.
end
;
if
(
identifierEnd
)
{
location
.
start
=
identifierEnd
;
}
return
location
;
}
function
removeInnerLocations
(
locations
:
AstLocation
[
]
position
:
AstPosition
)
{
const
newLocs
=
locations
.
slice
(
)
;
const
parentIndex
=
findLastIndex
(
newLocs
loc
=
>
containsPosition
(
loc
position
)
)
;
if
(
parentIndex
<
0
)
{
return
newLocs
;
}
const
innerStartIndex
=
parentIndex
+
1
;
const
parentLoc
=
newLocs
[
parentIndex
]
;
const
outerBoundaryIndex
=
findIndex
(
newLocs
loc
=
>
!
containsLocation
(
parentLoc
loc
)
innerStartIndex
)
;
const
innerBoundaryIndex
=
outerBoundaryIndex
<
0
?
newLocs
.
length
-
1
:
outerBoundaryIndex
-
1
;
newLocs
.
splice
(
innerStartIndex
innerBoundaryIndex
-
parentIndex
)
;
return
newLocs
;
}
function
removeOverlaps
(
locations
:
AstLocation
[
]
)
{
if
(
locations
.
length
=
=
0
)
{
return
[
]
;
}
const
firstParent
=
locations
[
0
]
;
return
locations
.
reduce
(
deduplicateNode
[
firstParent
]
)
;
}
function
deduplicateNode
(
nodes
location
)
{
const
parent
=
nodes
[
nodes
.
length
-
1
]
;
if
(
!
containsLocation
(
parent
location
)
)
{
nodes
.
push
(
location
)
;
}
return
nodes
;
}
function
sortByStart
(
a
:
AstLocation
b
:
AstLocation
)
{
if
(
a
.
start
.
line
<
b
.
start
.
line
)
{
return
-
1
;
}
else
if
(
a
.
start
.
line
=
=
=
b
.
start
.
line
)
{
return
a
.
start
.
column
-
b
.
start
.
column
;
}
return
1
;
}
function
findOutOfScopeLocations
(
sourceId
:
SourceId
position
:
AstPosition
)
:
AstLocation
[
]
{
const
{
functions
comments
}
=
findSymbols
(
sourceId
)
;
const
commentLocations
=
comments
.
map
(
c
=
>
c
.
location
)
;
let
locations
=
functions
.
map
(
getLocation
)
.
concat
(
commentLocations
)
.
sort
(
sortByStart
)
;
locations
=
removeInnerLocations
(
locations
position
)
.
filter
(
loc
=
>
!
containsPosition
(
loc
position
)
)
;
return
removeOverlaps
(
locations
)
;
}
export
default
findOutOfScopeLocations
;
