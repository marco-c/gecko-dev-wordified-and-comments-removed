import
{
WorkerDispatcher
}
from
"
devtools
/
client
/
shared
/
worker
-
utils
"
;
const
WORKER_URL
=
"
resource
:
/
/
devtools
/
client
/
debugger
/
dist
/
parser
-
worker
.
js
"
;
export
class
ParserDispatcher
extends
WorkerDispatcher
{
constructor
(
jestUrl
)
{
super
(
jestUrl
|
|
WORKER_URL
)
;
}
findOutOfScopeLocations
=
this
.
task
(
"
findOutOfScopeLocations
"
)
;
findBestMatchExpression
=
this
.
task
(
"
findBestMatchExpression
"
)
;
getScopes
=
this
.
task
(
"
getScopes
"
)
;
getSymbols
=
this
.
task
(
"
getSymbols
"
)
;
getFunctionSymbols
=
this
.
task
(
"
getFunctionSymbols
"
)
;
async
setSource
(
sourceId
content
)
{
const
astSource
=
{
id
:
sourceId
text
:
content
.
type
=
=
=
"
wasm
"
?
"
"
:
content
.
value
contentType
:
content
.
contentType
|
|
null
isWasm
:
content
.
type
=
=
=
"
wasm
"
}
;
return
this
.
invoke
(
"
setSource
"
astSource
)
;
}
hasSyntaxError
=
this
.
task
(
"
hasSyntaxError
"
)
;
mapExpression
=
this
.
task
(
"
mapExpression
"
)
;
clearSources
=
this
.
task
(
"
clearSources
"
)
;
isLocationSupported
(
location
)
{
return
!
location
.
source
.
isWasm
;
}
}
