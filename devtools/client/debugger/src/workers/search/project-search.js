import
getMatches
from
"
.
/
get
-
matches
"
;
export
function
findSourceMatches
(
content
queryText
modifiers
)
{
if
(
queryText
=
=
"
"
)
{
return
[
]
;
}
const
text
=
content
.
value
;
const
lines
=
text
.
split
(
"
\
n
"
)
;
return
getMatches
(
queryText
text
modifiers
)
.
map
(
(
{
line
ch
match
}
)
=
>
{
const
{
value
matchIndex
}
=
truncateLine
(
lines
[
line
]
ch
)
;
return
{
line
:
line
+
1
column
:
ch
matchIndex
match
value
}
;
}
)
;
}
const
startRegex
=
/
(
[
!
#
%
^
&
*
(
)
_
+
\
-
=
\
[
\
]
{
}
;
'
:
"
\
\
|
.
<
>
\
/
?
]
)
/
g
;
const
endRegex
=
new
RegExp
(
[
"
(
[
!
#
%
^
&
*
(
)
_
+
-
=
[
]
{
}
;
'
:
\
"
\
\
|
.
<
>
/
?
]
)
"
'
[
^
!
#
%
^
&
*
(
)
_
+
-
=
[
]
{
}
;
\
'
:
"
\
\
|
.
<
>
/
?
]
*
"
/
'
]
.
join
(
"
"
)
)
;
function
truncateLine
(
text
column
)
{
if
(
text
.
length
<
100
)
{
return
{
matchIndex
:
column
value
:
text
}
;
}
const
offset
=
Math
.
max
(
column
-
40
0
)
;
const
truncStr
=
text
.
slice
(
offset
column
+
400
)
;
let
start
=
truncStr
.
search
(
startRegex
)
;
let
end
=
truncStr
.
search
(
endRegex
)
;
if
(
start
>
column
)
{
start
=
-
1
;
}
if
(
end
<
column
)
{
end
=
truncStr
.
length
;
}
const
value
=
truncStr
.
slice
(
start
+
1
end
)
;
return
{
matchIndex
:
column
-
start
-
offset
-
1
value
}
;
}
