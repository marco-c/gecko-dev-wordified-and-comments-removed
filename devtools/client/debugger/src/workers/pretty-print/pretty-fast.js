var
acorn
=
require
(
"
acorn
"
)
;
var
sourceMap
=
require
(
"
source
-
map
"
)
;
const
NEWLINE_CODE
=
10
;
export
function
prettyFast
(
input
options
)
{
return
new
PrettyFast
(
options
)
.
getPrettifiedCodeAndSourceMap
(
input
)
;
}
const
PRE_ARRAY_LITERAL_TOKENS
=
new
Set
(
[
"
typeof
"
"
void
"
"
delete
"
"
case
"
"
do
"
"
=
"
"
in
"
"
of
"
"
.
.
.
"
"
{
"
"
*
"
"
/
"
"
%
"
"
else
"
"
;
"
"
+
+
"
"
-
-
"
"
+
"
"
-
"
"
~
"
"
!
"
"
:
"
"
?
"
"
>
>
"
"
>
>
>
"
"
<
<
"
"
|
|
"
"
&
&
"
"
<
"
"
>
"
"
<
=
"
"
>
=
"
"
instanceof
"
"
&
"
"
^
"
"
|
"
"
=
=
"
"
!
=
"
"
=
=
=
"
"
!
=
=
"
"
"
"
}
"
]
)
;
const
PRE_OBJECT_LITERAL_TOKENS
=
new
Set
(
[
"
typeof
"
"
void
"
"
delete
"
"
=
"
"
in
"
"
of
"
"
.
.
.
"
"
*
"
"
/
"
"
%
"
"
+
+
"
"
-
-
"
"
+
"
"
-
"
"
~
"
"
!
"
"
>
>
"
"
>
>
>
"
"
<
<
"
"
<
"
"
>
"
"
<
=
"
"
>
=
"
"
instanceof
"
"
&
"
"
^
"
"
|
"
"
=
=
"
"
!
=
"
"
=
=
=
"
"
!
=
=
"
]
)
;
class
PrettyFast
{
constructor
(
options
=
{
}
)
{
this
.
#
indentLevel
=
0
;
this
.
#
indentChar
=
options
.
indent
;
this
.
#
sourceMapGenerator
=
options
.
sourceMapGenerator
|
|
new
sourceMap
.
SourceMapGenerator
(
{
file
:
options
.
url
}
)
;
this
.
#
file
=
options
.
url
;
this
.
#
hasOriginalStartLine
=
"
originalStartLine
"
in
options
;
this
.
#
hasOriginalStartColumn
=
"
originalStartColumn
"
in
options
;
this
.
#
hasGeneratedStartLine
=
"
generatedStartLine
"
in
options
;
this
.
#
originalStartLine
=
options
.
originalStartLine
;
this
.
#
originalStartColumn
=
options
.
originalStartColumn
;
this
.
#
generatedStartLine
=
options
.
generatedStartLine
;
this
.
#
prefixWithNewLine
=
options
.
prefixWithNewLine
;
}
#
indentChar
;
#
indentLevel
;
#
file
;
#
hasOriginalStartLine
;
#
hasOriginalStartColumn
;
#
hasGeneratedStartLine
;
#
originalStartLine
;
#
originalStartColumn
;
#
prefixWithNewLine
;
#
generatedStartLine
;
#
sourceMapGenerator
;
#
addedNewline
=
false
;
#
addedSpace
=
false
;
#
currentCode
=
"
"
;
#
currentLine
=
1
;
#
currentColumn
=
0
;
#
tokenQueue
;
#
currentTokenIndex
;
#
previousToken
;
#
stack
=
[
]
;
getPrettifiedCodeAndSourceMap
(
input
)
{
if
(
this
.
#
prefixWithNewLine
)
{
this
.
#
write
(
"
\
n
"
)
;
}
this
.
#
tokenQueue
=
this
.
#
getTokens
(
input
)
;
for
(
let
i
=
0
len
=
this
.
#
tokenQueue
.
length
;
i
<
len
;
i
+
+
)
{
this
.
#
currentTokenIndex
=
i
;
const
token
=
this
.
#
tokenQueue
[
i
]
;
const
nextToken
=
this
.
#
tokenQueue
[
i
+
1
]
;
this
.
#
handleToken
(
token
nextToken
)
;
if
(
!
this
.
#
previousToken
)
{
this
.
#
previousToken
=
{
loc
:
{
start
:
{
}
end
:
{
}
}
}
;
}
this
.
#
previousToken
.
start
=
token
.
start
;
this
.
#
previousToken
.
end
=
token
.
end
;
this
.
#
previousToken
.
loc
.
start
.
line
=
token
.
loc
.
start
.
line
;
this
.
#
previousToken
.
loc
.
start
.
column
=
token
.
loc
.
start
.
column
;
this
.
#
previousToken
.
loc
.
end
.
line
=
token
.
loc
.
end
.
line
;
this
.
#
previousToken
.
loc
.
end
.
column
=
token
.
loc
.
end
.
column
;
this
.
#
previousToken
.
type
=
token
.
type
;
this
.
#
previousToken
.
value
=
token
.
value
;
}
return
{
code
:
this
.
#
currentCode
map
:
this
.
#
sourceMapGenerator
}
;
}
#
write
(
str
line
column
isToken
)
{
this
.
#
currentCode
+
=
str
;
if
(
isToken
)
{
this
.
#
sourceMapGenerator
.
addMapping
(
{
source
:
this
.
#
file
generated
:
{
line
:
this
.
#
hasOriginalStartLine
?
line
+
(
this
.
#
originalStartLine
-
1
)
:
line
column
:
line
=
=
1
&
&
this
.
#
hasOriginalStartColumn
?
column
+
this
.
#
originalStartColumn
:
column
}
original
:
{
line
:
this
.
#
hasGeneratedStartLine
?
this
.
#
currentLine
+
(
this
.
#
generatedStartLine
-
1
)
:
this
.
#
currentLine
column
:
this
.
#
currentColumn
}
name
:
null
}
)
;
}
for
(
let
idx
=
0
length
=
str
.
length
;
idx
<
length
;
idx
+
+
)
{
if
(
str
.
charCodeAt
(
idx
)
=
=
=
NEWLINE_CODE
)
{
this
.
#
currentLine
+
+
;
this
.
#
currentColumn
=
0
;
}
else
{
this
.
#
currentColumn
+
+
;
}
}
}
#
writeToken
(
token
)
{
if
(
token
.
type
.
label
=
=
"
string
"
)
{
this
.
#
write
(
'
{
stringSanitize
(
token
.
value
)
}
'
token
.
loc
.
start
.
line
token
.
loc
.
start
.
column
true
)
;
}
else
if
(
token
.
type
.
label
=
=
"
template
"
)
{
this
.
#
write
(
templateSanitize
(
token
.
value
)
token
.
loc
.
start
.
line
token
.
loc
.
start
.
column
true
)
;
}
else
if
(
token
.
type
.
label
=
=
"
regexp
"
)
{
this
.
#
write
(
String
(
token
.
value
.
value
)
token
.
loc
.
start
.
line
token
.
loc
.
start
.
column
true
)
;
}
else
{
let
value
;
if
(
token
.
value
!
=
null
)
{
value
=
token
.
value
;
if
(
token
.
type
.
label
=
=
=
"
privateId
"
)
{
value
=
#
{
value
}
;
}
}
else
{
value
=
token
.
type
.
label
;
}
this
.
#
write
(
String
(
value
)
token
.
loc
.
start
.
line
token
.
loc
.
start
.
column
true
)
;
}
}
#
getTokens
(
input
)
{
const
tokens
=
[
]
;
const
res
=
acorn
.
tokenizer
(
input
{
locations
:
true
ecmaVersion
:
"
latest
"
onComment
(
block
text
start
end
startLoc
endLoc
)
{
tokens
.
push
(
{
type
:
{
}
comment
:
true
block
text
loc
:
{
start
:
startLoc
end
:
endLoc
}
}
)
;
}
}
)
;
for
(
;
;
)
{
const
token
=
res
.
getToken
(
)
;
tokens
.
push
(
token
)
;
if
(
token
.
type
.
label
=
=
"
eof
"
)
{
break
;
}
}
return
tokens
;
}
#
handleToken
(
token
nextToken
)
{
if
(
token
.
comment
)
{
let
commentIndentLevel
=
this
.
#
indentLevel
;
if
(
this
.
#
previousToken
?
.
loc
?
.
end
?
.
line
=
=
token
.
loc
.
start
.
line
)
{
commentIndentLevel
=
0
;
this
.
#
write
(
"
"
)
;
}
this
.
#
addComment
(
commentIndentLevel
token
.
block
token
.
text
token
.
loc
.
start
.
line
nextToken
)
;
return
;
}
const
ttk
=
token
.
type
.
keyword
;
if
(
ttk
&
&
this
.
#
previousToken
?
.
type
?
.
label
=
=
"
.
"
)
{
token
.
type
=
acorn
.
tokTypes
.
name
;
}
const
ttl
=
token
.
type
.
label
;
if
(
ttl
=
=
"
eof
"
)
{
if
(
!
this
.
#
addedNewline
)
{
this
.
#
write
(
"
\
n
"
)
;
}
return
;
}
if
(
belongsOnStack
(
token
)
)
{
let
stackEntry
;
if
(
isArrayLiteral
(
token
this
.
#
previousToken
)
)
{
stackEntry
=
nextToken
?
.
type
?
.
label
=
=
=
"
]
"
?
"
[
"
:
"
[
\
n
"
;
}
else
if
(
isObjectLiteral
(
token
this
.
#
previousToken
)
)
{
stackEntry
=
nextToken
?
.
type
?
.
label
=
=
=
"
}
"
?
"
{
"
:
"
{
\
n
"
;
}
else
if
(
isRoundBracketStartingLongParenthesis
(
token
this
.
#
tokenQueue
this
.
#
currentTokenIndex
)
)
{
stackEntry
=
"
(
\
n
"
;
}
else
if
(
ttl
=
=
"
{
"
)
{
stackEntry
=
"
{
\
n
"
;
}
else
{
stackEntry
=
ttl
|
|
ttk
;
}
this
.
#
stack
.
push
(
stackEntry
)
;
}
this
.
#
maybeDecrementIndent
(
token
)
;
this
.
#
prependWhiteSpace
(
token
)
;
this
.
#
writeToken
(
token
)
;
this
.
#
addedSpace
=
false
;
if
(
!
nextToken
|
|
!
nextToken
.
comment
|
|
token
.
loc
.
end
.
line
!
=
nextToken
.
loc
.
start
.
line
)
{
this
.
#
maybeAppendNewline
(
token
)
;
}
this
.
#
maybePopStack
(
token
)
;
this
.
#
maybeIncrementIndent
(
token
)
;
}
#
maybePopStack
(
token
)
{
const
ttl
=
token
.
type
.
label
;
const
ttk
=
token
.
type
.
keyword
;
const
top
=
this
.
#
stack
.
at
(
-
1
)
;
if
(
ttl
=
=
"
]
"
|
|
ttl
=
=
"
)
"
|
|
ttl
=
=
"
}
"
|
|
(
ttl
=
=
"
:
"
&
&
(
top
=
=
"
case
"
|
|
top
=
=
"
default
"
|
|
top
=
=
"
?
"
)
)
|
|
(
ttk
=
=
"
while
"
&
&
top
=
=
"
do
"
)
)
{
this
.
#
stack
.
pop
(
)
;
if
(
ttl
=
=
"
}
"
&
&
this
.
#
stack
.
at
(
-
1
)
=
=
"
switch
"
)
{
this
.
#
stack
.
pop
(
)
;
}
}
}
#
maybeIncrementIndent
(
token
)
{
if
(
(
token
.
type
.
label
=
=
"
{
"
&
&
this
.
#
stack
.
at
(
-
1
)
=
=
=
"
{
\
n
"
)
|
|
(
token
.
type
.
label
=
=
"
[
"
&
&
this
.
#
stack
.
at
(
-
1
)
=
=
=
"
[
\
n
"
)
|
|
token
.
type
.
keyword
=
=
"
switch
"
|
|
(
token
.
type
.
label
=
=
"
(
"
&
&
this
.
#
stack
.
at
(
-
1
)
=
=
=
"
(
\
n
"
)
)
{
this
.
#
indentLevel
+
+
;
}
}
#
shouldDecrementIndent
(
token
)
{
const
top
=
this
.
#
stack
.
at
(
-
1
)
;
const
ttl
=
token
.
type
.
label
;
return
(
(
ttl
=
=
"
}
"
&
&
top
=
=
"
{
\
n
"
)
|
|
(
ttl
=
=
"
]
"
&
&
top
=
=
"
[
\
n
"
)
|
|
(
ttl
=
=
"
)
"
&
&
top
=
=
"
(
\
n
"
)
)
;
}
#
maybeDecrementIndent
(
token
)
{
if
(
!
this
.
#
shouldDecrementIndent
(
token
)
)
{
return
;
}
const
ttl
=
token
.
type
.
label
;
this
.
#
indentLevel
-
-
;
if
(
ttl
=
=
"
}
"
&
&
this
.
#
stack
.
at
(
-
2
)
=
=
"
switch
"
)
{
this
.
#
indentLevel
-
-
;
}
}
#
addComment
(
indentLevel
block
text
line
nextToken
)
{
const
indentString
=
this
.
#
indentChar
.
repeat
(
indentLevel
)
;
const
needNewLineAfter
=
!
block
|
|
!
(
nextToken
&
&
nextToken
.
loc
.
start
.
line
=
=
line
)
;
if
(
block
)
{
const
commentLinesText
=
text
.
split
(
new
RegExp
(
/
\
n
{
indentString
}
/
"
g
"
)
)
.
join
(
\
n
{
indentString
}
)
;
this
.
#
write
(
{
indentString
}
/
*
{
commentLinesText
}
*
/
{
needNewLineAfter
?
"
\
n
"
:
"
"
}
)
;
}
else
{
this
.
#
write
(
{
indentString
}
/
/
{
text
}
\
n
)
;
}
this
.
#
addedNewline
=
needNewLineAfter
;
this
.
#
addedSpace
=
!
needNewLineAfter
;
}
#
prependWhiteSpace
(
token
)
{
const
ttk
=
token
.
type
.
keyword
;
const
ttl
=
token
.
type
.
label
;
let
newlineAdded
=
this
.
#
addedNewline
;
let
spaceAdded
=
this
.
#
addedSpace
;
const
ltt
=
this
.
#
previousToken
?
.
type
?
.
label
;
if
(
this
.
#
previousToken
&
&
ltt
=
=
"
}
"
)
{
if
(
(
ttk
=
=
"
while
"
&
&
this
.
#
stack
.
at
(
-
1
)
=
=
"
do
"
)
|
|
needsSpaceBeforeClosingCurlyBracket
(
ttk
)
)
{
this
.
#
write
(
"
"
)
;
spaceAdded
=
true
;
}
else
if
(
needsLineBreakBeforeClosingCurlyBracket
(
ttl
)
)
{
this
.
#
write
(
"
\
n
"
)
;
newlineAdded
=
true
;
}
}
if
(
(
ttl
=
=
"
:
"
&
&
this
.
#
stack
.
at
(
-
1
)
=
=
"
?
"
)
|
|
(
ttl
=
=
"
}
"
&
&
this
.
#
stack
.
at
(
-
1
)
=
=
"
{
"
)
)
{
this
.
#
write
(
"
"
)
;
spaceAdded
=
true
;
}
if
(
this
.
#
previousToken
&
&
ltt
!
=
"
}
"
&
&
ltt
!
=
"
.
"
&
&
ttk
=
=
"
else
"
)
{
this
.
#
write
(
"
"
)
;
spaceAdded
=
true
;
}
const
ensureNewline
=
(
)
=
>
{
if
(
!
newlineAdded
)
{
this
.
#
write
(
"
\
n
"
)
;
newlineAdded
=
true
;
}
}
;
if
(
isASI
(
token
this
.
#
previousToken
)
)
{
ensureNewline
(
)
;
}
if
(
this
.
#
shouldDecrementIndent
(
token
)
)
{
ensureNewline
(
)
;
}
if
(
newlineAdded
)
{
let
indentLevel
=
this
.
#
indentLevel
;
if
(
ttk
=
=
"
case
"
|
|
ttk
=
=
"
default
"
)
{
indentLevel
-
-
;
}
this
.
#
write
(
this
.
#
indentChar
.
repeat
(
indentLevel
)
)
;
}
else
if
(
!
spaceAdded
&
&
needsSpaceAfter
(
token
this
.
#
previousToken
)
)
{
this
.
#
write
(
"
"
)
;
spaceAdded
=
true
;
}
}
#
maybeAppendNewline
(
token
)
{
if
(
!
isLineDelimiter
(
token
this
.
#
stack
)
)
{
this
.
#
addedNewline
=
false
;
return
;
}
this
.
#
write
(
"
\
n
"
)
;
this
.
#
addedNewline
=
true
;
}
}
function
isArrayLiteral
(
token
previousToken
)
{
if
(
token
.
type
.
label
!
=
"
[
"
)
{
return
false
;
}
if
(
!
previousToken
)
{
return
true
;
}
if
(
previousToken
.
type
.
isAssign
)
{
return
true
;
}
return
PRE_ARRAY_LITERAL_TOKENS
.
has
(
previousToken
.
type
.
keyword
|
|
(
previousToken
.
type
.
label
=
=
"
name
"
?
previousToken
.
value
:
previousToken
.
type
.
label
)
)
;
}
function
isObjectLiteral
(
token
previousToken
)
{
if
(
token
.
type
.
label
!
=
"
{
"
)
{
return
false
;
}
if
(
!
previousToken
)
{
return
false
;
}
if
(
previousToken
.
type
.
isAssign
)
{
return
true
;
}
return
PRE_OBJECT_LITERAL_TOKENS
.
has
(
previousToken
.
type
.
keyword
|
|
previousToken
.
type
.
label
)
;
}
function
isRoundBracketStartingLongParenthesis
(
token
tokenQueue
currentTokenIndex
)
{
if
(
token
.
type
.
label
!
=
=
"
(
"
)
{
return
false
;
}
if
(
tokenQueue
[
currentTokenIndex
+
1
]
.
type
.
label
=
=
"
{
"
)
{
return
false
;
}
const
longParentContentLength
=
60
;
let
parenCount
=
0
;
let
parenContentLength
=
0
;
for
(
let
i
=
currentTokenIndex
+
1
len
=
tokenQueue
.
length
;
i
<
len
;
i
+
+
)
{
const
currToken
=
tokenQueue
[
i
]
;
const
ttl
=
currToken
.
type
.
label
;
if
(
ttl
=
=
"
(
"
)
{
parenCount
+
+
;
}
else
if
(
ttl
=
=
"
)
"
)
{
if
(
parenCount
=
=
0
)
{
return
false
;
}
parenCount
-
-
;
}
const
tokenLength
=
currToken
.
comment
?
currToken
.
text
.
length
:
currToken
.
end
-
currToken
.
start
;
parenContentLength
+
=
tokenLength
;
if
(
parenContentLength
>
longParentContentLength
)
{
return
true
;
}
}
return
false
;
}
const
PREVENT_ASI_AFTER_TOKENS
=
new
Set
(
[
"
*
"
"
/
"
"
%
"
"
+
"
"
-
"
"
<
<
"
"
>
>
"
"
>
>
>
"
"
<
"
"
>
"
"
<
=
"
"
>
=
"
"
instanceof
"
"
in
"
"
=
=
"
"
!
=
"
"
=
=
=
"
"
!
=
=
"
"
&
"
"
^
"
"
|
"
"
&
&
"
"
|
|
"
"
"
"
.
"
"
=
"
"
*
=
"
"
/
=
"
"
%
=
"
"
+
=
"
"
-
=
"
"
<
<
=
"
"
>
>
=
"
"
>
>
>
=
"
"
&
=
"
"
^
=
"
"
|
=
"
"
delete
"
"
void
"
"
typeof
"
"
~
"
"
!
"
"
new
"
"
(
"
]
)
;
const
PREVENT_ASI_BEFORE_TOKENS
=
new
Set
(
[
"
*
"
"
/
"
"
%
"
"
<
<
"
"
>
>
"
"
>
>
>
"
"
<
"
"
>
"
"
<
=
"
"
>
=
"
"
instanceof
"
"
in
"
"
=
=
"
"
!
=
"
"
=
=
=
"
"
!
=
=
"
"
&
"
"
^
"
"
|
"
"
&
&
"
"
|
|
"
"
"
"
.
"
"
=
"
"
*
=
"
"
/
=
"
"
%
=
"
"
+
=
"
"
-
=
"
"
<
<
=
"
"
>
>
=
"
"
>
>
>
=
"
"
&
=
"
"
^
=
"
"
|
=
"
"
(
"
]
)
;
function
isIdentifierLike
(
token
)
{
const
ttl
=
token
.
type
.
label
;
return
(
ttl
=
=
"
name
"
|
|
ttl
=
=
"
num
"
|
|
ttl
=
=
"
privateId
"
|
|
!
!
token
.
type
.
keyword
)
;
}
function
isASI
(
token
previousToken
)
{
if
(
!
previousToken
)
{
return
false
;
}
if
(
token
.
loc
.
start
.
line
=
=
=
previousToken
.
loc
.
start
.
line
)
{
return
false
;
}
if
(
previousToken
.
type
.
keyword
=
=
"
return
"
|
|
previousToken
.
type
.
keyword
=
=
"
yield
"
|
|
(
previousToken
.
type
.
label
=
=
"
name
"
&
&
previousToken
.
value
=
=
"
yield
"
)
)
{
return
true
;
}
if
(
PREVENT_ASI_AFTER_TOKENS
.
has
(
previousToken
.
type
.
label
|
|
previousToken
.
type
.
keyword
)
)
{
return
false
;
}
if
(
PREVENT_ASI_BEFORE_TOKENS
.
has
(
token
.
type
.
label
|
|
token
.
type
.
keyword
)
)
{
return
false
;
}
return
true
;
}
function
isLineDelimiter
(
token
stack
)
{
const
ttl
=
token
.
type
.
label
;
const
top
=
stack
.
at
(
-
1
)
;
return
(
(
ttl
=
=
"
;
"
&
&
top
!
=
"
(
"
)
|
|
(
ttl
=
=
"
{
"
&
&
top
=
=
"
{
\
n
"
)
|
|
(
ttl
=
=
"
[
"
&
&
top
=
=
"
[
\
n
"
)
|
|
(
(
ttl
=
=
"
"
|
|
ttl
=
=
"
|
|
"
|
|
ttl
=
=
"
&
&
"
)
&
&
top
!
=
"
(
"
)
|
|
(
ttl
=
=
"
:
"
&
&
(
top
=
=
"
case
"
|
|
top
=
=
"
default
"
)
)
|
|
(
ttl
=
=
"
(
"
&
&
top
=
=
"
(
\
n
"
)
)
;
}
function
needsSpaceAfter
(
token
previousToken
)
{
if
(
previousToken
&
&
needsSpaceBetweenTokens
(
token
previousToken
)
)
{
return
true
;
}
if
(
token
.
type
.
isAssign
)
{
return
true
;
}
if
(
token
.
type
.
binop
!
=
null
&
&
previousToken
)
{
return
true
;
}
if
(
token
.
type
.
label
=
=
"
?
"
)
{
return
true
;
}
if
(
token
.
type
.
label
=
=
"
=
>
"
)
{
return
true
;
}
return
false
;
}
function
needsSpaceBeforePreviousToken
(
previousToken
)
{
if
(
previousToken
.
type
.
isLoop
)
{
return
true
;
}
if
(
previousToken
.
type
.
isAssign
)
{
return
true
;
}
if
(
previousToken
.
type
.
binop
!
=
null
)
{
return
true
;
}
if
(
previousToken
.
value
=
=
"
of
"
)
{
return
true
;
}
const
previousTokenTypeLabel
=
previousToken
.
type
.
label
;
if
(
previousTokenTypeLabel
=
=
"
?
"
)
{
return
true
;
}
if
(
previousTokenTypeLabel
=
=
"
:
"
)
{
return
true
;
}
if
(
previousTokenTypeLabel
=
=
"
"
)
{
return
true
;
}
if
(
previousTokenTypeLabel
=
=
"
;
"
)
{
return
true
;
}
if
(
previousTokenTypeLabel
=
=
"
{
"
)
{
return
true
;
}
if
(
previousTokenTypeLabel
=
=
"
=
>
"
)
{
return
true
;
}
return
false
;
}
function
isBreakContinueOrReturnStatement
(
previousTokenKeyword
)
{
return
(
previousTokenKeyword
=
=
"
break
"
|
|
previousTokenKeyword
=
=
"
continue
"
|
|
previousTokenKeyword
=
=
"
return
"
)
;
}
function
needsSpaceBeforePreviousTokenKeywordAfterNotDot
(
previousTokenKeyword
)
{
return
(
previousTokenKeyword
!
=
"
debugger
"
&
&
previousTokenKeyword
!
=
"
null
"
&
&
previousTokenKeyword
!
=
"
true
"
&
&
previousTokenKeyword
!
=
"
false
"
&
&
previousTokenKeyword
!
=
"
this
"
&
&
previousTokenKeyword
!
=
"
default
"
)
;
}
function
needsSpaceBeforeClosingParen
(
tokenTypeLabel
)
{
return
(
tokenTypeLabel
!
=
"
)
"
&
&
tokenTypeLabel
!
=
"
]
"
&
&
tokenTypeLabel
!
=
"
;
"
&
&
tokenTypeLabel
!
=
"
"
&
&
tokenTypeLabel
!
=
"
.
"
)
;
}
function
needsSpaceBetweenTokens
(
token
previousToken
)
{
if
(
needsSpaceBeforePreviousToken
(
previousToken
)
)
{
return
true
;
}
const
ltt
=
previousToken
.
type
.
label
;
if
(
ltt
=
=
"
num
"
&
&
token
.
type
.
label
=
=
"
.
"
)
{
return
true
;
}
const
ltk
=
previousToken
.
type
.
keyword
;
const
ttl
=
token
.
type
.
label
;
if
(
ltk
!
=
null
&
&
ttl
!
=
"
.
"
)
{
if
(
isBreakContinueOrReturnStatement
(
ltk
)
)
{
return
ttl
!
=
"
;
"
;
}
if
(
needsSpaceBeforePreviousTokenKeywordAfterNotDot
(
ltk
)
)
{
return
true
;
}
}
if
(
ltt
=
=
"
)
"
&
&
needsSpaceBeforeClosingParen
(
ttl
)
)
{
return
true
;
}
if
(
isIdentifierLike
(
token
)
&
&
isIdentifierLike
(
previousToken
)
)
{
return
true
;
}
if
(
token
.
type
.
label
=
=
"
{
"
&
&
previousToken
.
type
.
label
=
=
"
name
"
)
{
return
true
;
}
return
false
;
}
function
needsSpaceBeforeClosingCurlyBracket
(
tokenTypeKeyword
)
{
return
(
tokenTypeKeyword
=
=
"
else
"
|
|
tokenTypeKeyword
=
=
"
catch
"
|
|
tokenTypeKeyword
=
=
"
finally
"
)
;
}
function
needsLineBreakBeforeClosingCurlyBracket
(
tokenTypeLabel
)
{
return
(
tokenTypeLabel
!
=
"
(
"
&
&
tokenTypeLabel
!
=
"
;
"
&
&
tokenTypeLabel
!
=
"
"
&
&
tokenTypeLabel
!
=
"
)
"
&
&
tokenTypeLabel
!
=
"
.
"
&
&
tokenTypeLabel
!
=
"
template
"
&
&
tokenTypeLabel
!
=
"
"
)
;
}
const
commonEscapeCharacters
=
{
"
\
\
"
:
"
\
\
\
\
"
"
\
r
"
:
"
\
\
r
"
"
\
t
"
:
"
\
\
t
"
"
\
v
"
:
"
\
\
v
"
"
\
f
"
:
"
\
\
f
"
"
\
0
"
:
"
\
\
x00
"
"
\
u2028
"
:
"
\
\
u2028
"
"
\
u2029
"
:
"
\
\
u2029
"
}
;
const
stringEscapeCharacters
=
{
.
.
.
commonEscapeCharacters
"
\
n
"
:
"
\
\
n
"
"
'
"
:
"
\
\
'
"
}
;
const
templateEscapeCharacters
=
{
.
.
.
commonEscapeCharacters
"
"
:
"
\
\
"
}
;
const
stringRegExpString
=
(
{
Object
.
values
(
stringEscapeCharacters
)
.
join
(
"
|
"
)
}
)
;
const
templateRegExpString
=
(
{
Object
.
values
(
templateEscapeCharacters
)
.
join
(
"
|
"
)
}
)
;
const
stringEscapeCharactersRegExp
=
new
RegExp
(
stringRegExpString
"
g
"
)
;
const
templateEscapeCharactersRegExp
=
new
RegExp
(
templateRegExpString
"
g
"
)
;
function
stringSanitizerReplaceFunc
(
_
c
)
{
return
stringEscapeCharacters
[
c
]
;
}
function
templateSanitizerReplaceFunc
(
_
c
)
{
return
templateEscapeCharacters
[
c
]
;
}
function
stringSanitize
(
str
)
{
return
str
.
replace
(
stringEscapeCharactersRegExp
stringSanitizerReplaceFunc
)
;
}
function
templateSanitize
(
str
)
{
return
str
.
replace
(
templateEscapeCharactersRegExp
templateSanitizerReplaceFunc
)
;
}
function
belongsOnStack
(
token
)
{
const
ttl
=
token
.
type
.
label
;
const
ttk
=
token
.
type
.
keyword
;
return
(
ttl
=
=
"
{
"
|
|
ttl
=
=
"
(
"
|
|
ttl
=
=
"
[
"
|
|
ttl
=
=
"
?
"
|
|
ttl
=
=
"
{
"
|
|
ttk
=
=
"
do
"
|
|
ttk
=
=
"
switch
"
|
|
ttk
=
=
"
case
"
|
|
ttk
=
=
"
default
"
)
;
}
