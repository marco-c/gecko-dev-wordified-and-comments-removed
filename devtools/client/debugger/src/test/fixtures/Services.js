"
use
strict
"
;
const
PREF_INVALID
=
0
;
const
PREF_STRING
=
32
;
const
PREF_INT
=
64
;
const
PREF_BOOL
=
128
;
const
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
=
"
nsPref
:
changed
"
;
const
PREFIX
=
"
Services
.
prefs
:
"
;
function
PrefBranch
(
parent
name
fullName
)
{
this
.
_parent
=
parent
;
this
.
_name
=
name
;
this
.
_fullName
=
fullName
;
this
.
_observers
=
{
}
;
this
.
_children
=
{
}
;
this
.
_defaultValue
=
null
;
this
.
_hasUserValue
=
false
;
this
.
_userValue
=
null
;
this
.
_type
=
PREF_INVALID
;
}
PrefBranch
.
prototype
=
{
PREF_INVALID
:
PREF_INVALID
PREF_STRING
:
PREF_STRING
PREF_INT
:
PREF_INT
PREF_BOOL
:
PREF_BOOL
get
root
(
)
{
return
this
.
_fullName
;
}
getPrefType
:
function
(
prefName
)
{
return
this
.
_findPref
(
prefName
)
.
_type
;
}
getBoolPref
:
function
(
prefName
defaultValue
)
{
try
{
let
thePref
=
this
.
_findPref
(
prefName
)
;
if
(
thePref
.
_type
!
=
=
PREF_BOOL
)
{
throw
new
Error
(
{
prefName
}
does
not
have
bool
type
)
;
}
return
thePref
.
_get
(
)
;
}
catch
(
e
)
{
if
(
typeof
defaultValue
!
=
=
"
undefined
"
)
{
return
defaultValue
;
}
throw
e
;
}
}
setBoolPref
:
function
(
prefName
value
)
{
if
(
typeof
value
!
=
=
"
boolean
"
)
{
throw
new
Error
(
"
non
-
bool
passed
to
setBoolPref
"
)
;
}
let
thePref
=
this
.
_findOrCreatePref
(
prefName
value
true
value
)
;
if
(
thePref
.
_type
!
=
=
PREF_BOOL
)
{
throw
new
Error
(
{
prefName
}
does
not
have
bool
type
)
;
}
thePref
.
_set
(
value
)
;
}
getCharPref
:
function
(
prefName
defaultValue
)
{
try
{
let
thePref
=
this
.
_findPref
(
prefName
)
;
if
(
thePref
.
_type
!
=
=
PREF_STRING
)
{
throw
new
Error
(
{
prefName
}
does
not
have
string
type
)
;
}
return
thePref
.
_get
(
)
;
}
catch
(
e
)
{
if
(
typeof
defaultValue
!
=
=
"
undefined
"
)
{
return
defaultValue
;
}
throw
e
;
}
}
getStringPref
:
function
(
)
{
return
this
.
getCharPref
.
apply
(
this
arguments
)
;
}
setCharPref
:
function
(
prefName
value
)
{
if
(
typeof
value
!
=
=
"
string
"
)
{
throw
new
Error
(
"
non
-
string
passed
to
setCharPref
"
)
;
}
let
thePref
=
this
.
_findOrCreatePref
(
prefName
value
true
value
)
;
if
(
thePref
.
_type
!
=
=
PREF_STRING
)
{
throw
new
Error
(
{
prefName
}
does
not
have
string
type
)
;
}
thePref
.
_set
(
value
)
;
}
setStringPref
:
function
(
)
{
return
this
.
setCharPref
.
apply
(
this
arguments
)
;
}
getIntPref
:
function
(
prefName
defaultValue
)
{
try
{
let
thePref
=
this
.
_findPref
(
prefName
)
;
if
(
thePref
.
_type
!
=
=
PREF_INT
)
{
throw
new
Error
(
{
prefName
}
does
not
have
int
type
)
;
}
return
thePref
.
_get
(
)
;
}
catch
(
e
)
{
if
(
typeof
defaultValue
!
=
=
"
undefined
"
)
{
return
defaultValue
;
}
throw
e
;
}
}
setIntPref
:
function
(
prefName
value
)
{
if
(
typeof
value
!
=
=
"
number
"
)
{
throw
new
Error
(
"
non
-
number
passed
to
setIntPref
"
)
;
}
let
thePref
=
this
.
_findOrCreatePref
(
prefName
value
true
value
)
;
if
(
thePref
.
_type
!
=
=
PREF_INT
)
{
throw
new
Error
(
{
prefName
}
does
not
have
int
type
)
;
}
thePref
.
_set
(
value
)
;
}
clearUserPref
:
function
(
prefName
)
{
let
thePref
=
this
.
_findPref
(
prefName
)
;
thePref
.
_clearUserValue
(
)
;
}
prefHasUserValue
:
function
(
prefName
)
{
let
thePref
=
this
.
_findPref
(
prefName
)
;
return
thePref
.
_hasUserValue
;
}
addObserver
:
function
(
domain
observer
holdWeak
)
{
if
(
holdWeak
)
{
throw
new
Error
(
"
shim
prefs
only
supports
strong
observers
"
)
;
}
if
(
!
(
domain
in
this
.
_observers
)
)
{
this
.
_observers
[
domain
]
=
[
]
;
}
this
.
_observers
[
domain
]
.
push
(
observer
)
;
}
removeObserver
:
function
(
domain
observer
)
{
if
(
!
(
domain
in
this
.
_observers
)
)
{
return
;
}
let
index
=
this
.
_observers
[
domain
]
.
indexOf
(
observer
)
;
if
(
index
>
=
0
)
{
this
.
_observers
[
domain
]
.
splice
(
index
1
)
;
}
}
savePrefFile
:
function
(
file
)
{
if
(
file
)
{
throw
new
Error
(
"
shim
prefs
only
supports
null
file
in
savePrefFile
"
)
;
}
}
getBranch
:
function
(
prefRoot
)
{
if
(
!
prefRoot
)
{
return
this
;
}
if
(
prefRoot
.
endsWith
(
"
.
"
)
)
{
prefRoot
=
prefRoot
.
slice
(
0
-
1
)
;
}
return
this
.
_findPref
(
prefRoot
)
;
}
_get
:
function
(
)
{
if
(
this
.
_hasUserValue
)
{
return
this
.
_userValue
;
}
return
this
.
_defaultValue
;
}
_set
:
function
(
value
)
{
if
(
!
this
.
_hasUserValue
|
|
value
!
=
=
this
.
_userValue
)
{
this
.
_userValue
=
value
;
this
.
_hasUserValue
=
true
;
this
.
_saveAndNotify
(
)
;
}
}
_setDefault
:
function
(
value
)
{
if
(
this
.
_defaultValue
!
=
=
value
)
{
this
.
_defaultValue
=
value
;
if
(
!
this
.
_hasUserValue
)
{
this
.
_saveAndNotify
(
)
;
}
}
}
_clearUserValue
:
function
(
)
{
if
(
this
.
_hasUserValue
)
{
this
.
_userValue
=
null
;
this
.
_hasUserValue
=
false
;
this
.
_saveAndNotify
(
)
;
}
}
_saveAndNotify
:
function
(
)
{
let
store
=
{
type
:
this
.
_type
defaultValue
:
this
.
_defaultValue
hasUserValue
:
this
.
_hasUserValue
userValue
:
this
.
_userValue
}
;
localStorage
.
setItem
(
PREFIX
+
this
.
_fullName
JSON
.
stringify
(
store
)
)
;
this
.
_parent
.
_notify
(
this
.
_name
)
;
}
_storageUpdated
:
function
(
type
userValue
hasUserValue
defaultValue
)
{
this
.
_type
=
type
;
this
.
_defaultValue
=
defaultValue
;
this
.
_hasUserValue
=
hasUserValue
;
this
.
_userValue
=
userValue
;
this
.
_parent
.
_notify
(
this
.
_name
)
;
}
_findPref
:
function
(
prefName
)
{
let
branchNames
=
prefName
.
split
(
"
.
"
)
;
let
branch
=
this
;
for
(
let
branchName
of
branchNames
)
{
branch
=
branch
.
_children
[
branchName
]
;
if
(
!
branch
)
{
return
false
;
}
}
return
branch
;
}
_notify
:
function
(
relativeName
)
{
for
(
let
domain
in
this
.
_observers
)
{
if
(
relativeName
=
=
=
domain
|
|
domain
=
=
=
"
"
|
|
(
domain
.
endsWith
(
"
.
"
)
&
&
relativeName
.
startsWith
(
domain
)
)
)
{
let
localList
=
this
.
_observers
[
domain
]
.
slice
(
)
;
for
(
let
observer
of
localList
)
{
try
{
if
(
"
observe
"
in
observer
)
{
observer
.
observe
(
this
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
relativeName
)
;
}
else
{
observer
(
this
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
relativeName
)
;
}
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
}
}
if
(
this
.
_parent
)
{
this
.
_parent
.
_notify
(
{
this
.
_name
}
.
{
relativeName
}
)
;
}
}
_createBranch
:
function
(
branchList
)
{
let
parent
=
this
;
for
(
let
branch
of
branchList
)
{
if
(
!
parent
.
_children
[
branch
]
)
{
let
isParentRoot
=
!
parent
.
_parent
;
let
branchName
=
(
isParentRoot
?
"
"
:
{
parent
.
root
}
.
)
+
branch
;
parent
.
_children
[
branch
]
=
new
PrefBranch
(
parent
branch
branchName
)
;
}
parent
=
parent
.
_children
[
branch
]
;
}
return
parent
;
}
_findOrCreatePref
:
function
(
keyName
userValue
hasUserValue
defaultValue
init
=
false
)
{
let
branch
=
this
.
_createBranch
(
keyName
.
split
(
"
.
"
)
)
;
if
(
hasUserValue
&
&
typeof
(
userValue
)
!
=
=
typeof
(
defaultValue
)
)
{
throw
new
Error
(
inconsistent
values
when
creating
{
keyName
}
)
;
}
let
type
;
switch
(
typeof
(
defaultValue
)
)
{
case
"
boolean
"
:
type
=
PREF_BOOL
;
break
;
case
"
number
"
:
type
=
PREF_INT
;
break
;
case
"
string
"
:
type
=
PREF_STRING
;
break
;
default
:
throw
new
Error
(
unhandled
argument
type
:
{
typeof
(
defaultValue
)
}
)
;
}
if
(
init
|
|
branch
.
_type
=
=
=
PREF_INVALID
)
{
branch
.
_storageUpdated
(
type
userValue
hasUserValue
defaultValue
)
;
}
else
if
(
branch
.
_type
!
=
=
type
)
{
throw
new
Error
(
attempt
to
change
type
of
pref
{
keyName
}
)
;
}
return
branch
;
}
getKeyName
:
function
(
keyName
)
{
if
(
keyName
.
startsWith
(
PREFIX
)
)
{
return
keyName
.
slice
(
PREFIX
.
length
)
;
}
return
keyName
;
}
_onStorageChange
:
function
(
event
)
{
if
(
event
.
storageArea
!
=
=
localStorage
)
{
return
;
}
const
key
=
this
.
getKeyName
(
event
.
key
)
;
if
(
key
=
=
=
null
|
|
event
.
newValue
=
=
=
null
)
{
return
;
}
let
{
type
userValue
hasUserValue
defaultValue
}
=
JSON
.
parse
(
event
.
newValue
)
;
if
(
event
.
oldValue
=
=
=
null
)
{
this
.
_findOrCreatePref
(
key
userValue
hasUserValue
defaultValue
)
;
}
else
{
let
thePref
=
this
.
_findPref
(
key
)
;
thePref
.
_storageUpdated
(
type
userValue
hasUserValue
defaultValue
)
;
}
}
_initializeRoot
:
function
(
)
{
if
(
Services
.
_defaultPrefsEnabled
)
{
}
for
(
let
i
=
0
;
i
<
localStorage
.
length
;
+
+
i
)
{
let
keyName
=
localStorage
.
key
(
i
)
;
if
(
keyName
.
startsWith
(
PREFIX
)
)
{
let
{
userValue
hasUserValue
defaultValue
}
=
JSON
.
parse
(
localStorage
.
getItem
(
keyName
)
)
;
this
.
_findOrCreatePref
(
keyName
.
slice
(
PREFIX
.
length
)
userValue
hasUserValue
defaultValue
true
)
;
}
}
this
.
_onStorageChange
=
this
.
_onStorageChange
.
bind
(
this
)
;
window
.
addEventListener
(
"
storage
"
this
.
_onStorageChange
)
;
}
}
;
const
Services
=
{
_prefs
:
null
_defaultPrefsEnabled
:
true
get
prefs
(
)
{
if
(
!
this
.
_prefs
)
{
this
.
_prefs
=
new
PrefBranch
(
null
"
"
"
"
)
;
this
.
_prefs
.
_initializeRoot
(
)
;
}
return
this
.
_prefs
;
}
appinfo
:
"
"
obs
:
{
addObserver
:
(
)
=
>
{
}
}
}
;
function
pref
(
name
value
)
{
let
thePref
=
Services
.
prefs
.
_findOrCreatePref
(
name
value
true
value
)
;
thePref
.
_setDefault
(
value
)
;
}
module
.
exports
=
Services
;
Services
.
pref
=
pref
;
