import
React
{
PureComponent
}
from
"
react
"
;
import
PropTypes
from
"
prop
-
types
"
;
import
{
connect
}
from
"
.
.
/
.
.
/
.
.
/
utils
/
connect
"
;
import
actions
from
"
.
.
/
.
.
/
.
.
/
actions
"
;
import
{
getTruncatedFileName
getDisplayPath
getSourceQueryString
getFileURL
}
from
"
.
.
/
.
.
/
.
.
/
utils
/
source
"
;
import
{
createLocation
}
from
"
.
.
/
.
.
/
.
.
/
utils
/
location
"
;
import
{
getContext
getFirstSourceActorForGeneratedSource
}
from
"
.
.
/
.
.
/
.
.
/
selectors
"
;
import
SourceIcon
from
"
.
.
/
.
.
/
shared
/
SourceIcon
"
;
class
BreakpointHeading
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
cx
:
PropTypes
.
object
.
isRequired
sources
:
PropTypes
.
array
.
isRequired
source
:
PropTypes
.
object
.
isRequired
firstSourceActor
:
PropTypes
.
object
selectSource
:
PropTypes
.
func
.
isRequired
}
;
}
onContextMenu
=
event
=
>
{
event
.
preventDefault
(
)
;
this
.
props
.
showBreakpointHeadingContextMenu
(
event
this
.
props
.
source
)
;
}
;
render
(
)
{
const
{
cx
sources
source
selectSource
}
=
this
.
props
;
const
path
=
getDisplayPath
(
source
sources
)
;
const
query
=
getSourceQueryString
(
source
)
;
return
(
<
div
className
=
"
breakpoint
-
heading
"
title
=
{
getFileURL
(
source
false
)
}
onClick
=
{
(
)
=
>
selectSource
(
cx
source
)
}
onContextMenu
=
{
this
.
onContextMenu
}
>
<
SourceIcon
location
=
{
createLocation
(
{
source
sourceActor
:
this
.
props
.
firstSourceActor
}
)
}
modifier
=
{
icon
=
>
[
"
file
"
"
javascript
"
]
.
includes
(
icon
)
?
null
:
icon
}
/
>
<
div
className
=
"
filename
"
>
{
getTruncatedFileName
(
source
query
)
}
{
path
&
&
<
span
>
{
.
.
/
{
path
}
/
.
.
}
<
/
span
>
}
<
/
div
>
<
/
div
>
)
;
}
}
const
mapStateToProps
=
(
state
{
source
}
)
=
>
(
{
cx
:
getContext
(
state
)
firstSourceActor
:
getFirstSourceActorForGeneratedSource
(
state
source
.
id
)
}
)
;
export
default
connect
(
mapStateToProps
{
selectSource
:
actions
.
selectSource
showBreakpointHeadingContextMenu
:
actions
.
showBreakpointHeadingContextMenu
}
)
(
BreakpointHeading
)
;
