import
React
from
"
react
"
;
import
{
shallow
}
from
"
enzyme
"
;
import
CommandBar
from
"
.
.
/
CommandBar
"
;
describe
(
"
CommandBar
"
(
)
=
>
{
it
(
"
f8
key
command
calls
props
.
breakOnNext
when
not
in
paused
state
"
(
)
=
>
{
const
props
=
{
breakOnNext
:
jest
.
fn
(
)
resume
:
jest
.
fn
(
)
isPaused
:
false
}
;
const
mockEvent
=
{
preventDefault
:
jest
.
fn
(
)
stopPropagation
:
jest
.
fn
(
)
}
;
const
context
=
{
shortcuts
:
{
on
:
jest
.
fn
(
)
}
}
;
shallow
(
<
CommandBar
.
WrappedComponent
{
.
.
.
props
}
/
>
{
context
}
)
;
const
keyEventHandlers
=
context
.
shortcuts
.
on
.
mock
.
calls
;
keyEventHandlers
.
filter
(
i
=
>
i
[
0
]
=
=
=
"
F8
"
)
.
forEach
(
(
[
_
handler
]
)
=
>
{
handler
(
mockEvent
)
;
}
)
;
expect
(
props
.
breakOnNext
)
.
toHaveBeenCalled
(
)
;
expect
(
props
.
resume
)
.
not
.
toHaveBeenCalled
(
)
;
}
)
;
it
(
"
f8
key
command
calls
props
.
resume
when
in
paused
state
"
(
)
=
>
{
const
props
=
{
breakOnNext
:
jest
.
fn
(
)
resume
:
jest
.
fn
(
)
isPaused
:
true
}
;
const
mockEvent
=
{
preventDefault
:
jest
.
fn
(
)
stopPropagation
:
jest
.
fn
(
)
}
;
const
context
=
{
shortcuts
:
{
on
:
jest
.
fn
(
)
}
}
;
shallow
(
<
CommandBar
.
WrappedComponent
{
.
.
.
props
}
/
>
{
context
}
)
;
const
keyEventHandlers
=
context
.
shortcuts
.
on
.
mock
.
calls
;
keyEventHandlers
.
filter
(
i
=
>
i
[
0
]
=
=
=
"
F8
"
)
.
forEach
(
(
[
_
handler
]
)
=
>
{
handler
(
mockEvent
)
;
}
)
;
expect
(
props
.
resume
)
.
toHaveBeenCalled
(
)
;
expect
(
props
.
breakOnNext
)
.
not
.
toHaveBeenCalled
(
)
;
}
)
;
}
)
;
