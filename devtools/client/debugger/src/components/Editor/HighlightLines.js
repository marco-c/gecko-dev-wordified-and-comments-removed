import
{
Component
}
from
"
react
"
;
import
{
isEmpty
}
from
"
lodash
"
;
import
{
connect
}
from
"
.
.
/
.
.
/
utils
/
connect
"
;
import
{
getHighlightedLineRange
}
from
"
.
.
/
.
.
/
selectors
"
;
class
HighlightLines
extends
Component
{
componentDidMount
(
)
{
this
.
highlightLineRange
(
)
;
}
componentWillUpdate
(
)
{
this
.
clearHighlightRange
(
)
;
}
componentDidUpdate
(
)
{
this
.
highlightLineRange
(
)
;
}
componentWillUnmount
(
)
{
this
.
clearHighlightRange
(
)
;
}
clearHighlightRange
(
)
{
const
{
highlightedLineRange
editor
}
=
this
.
props
;
const
{
codeMirror
}
=
editor
;
if
(
isEmpty
(
highlightedLineRange
)
|
|
!
codeMirror
)
{
return
;
}
const
{
start
end
}
=
highlightedLineRange
;
codeMirror
.
operation
(
(
)
=
>
{
for
(
let
line
=
start
-
1
;
line
<
end
;
line
+
+
)
{
codeMirror
.
removeLineClass
(
line
"
wrapClass
"
"
highlight
-
lines
"
)
;
}
}
)
;
}
highlightLineRange
=
(
)
=
>
{
const
{
highlightedLineRange
editor
}
=
this
.
props
;
const
{
codeMirror
}
=
editor
;
if
(
isEmpty
(
highlightedLineRange
)
|
|
!
codeMirror
)
{
return
;
}
const
{
start
end
}
=
highlightedLineRange
;
codeMirror
.
operation
(
(
)
=
>
{
editor
.
alignLine
(
start
)
;
for
(
let
line
=
start
-
1
;
line
<
end
;
line
+
+
)
{
codeMirror
.
addLineClass
(
line
"
wrapClass
"
"
highlight
-
lines
"
)
;
}
}
)
;
}
;
render
(
)
{
return
null
;
}
}
export
default
connect
(
state
=
>
(
{
highlightedLineRange
:
getHighlightedLineRange
(
state
)
}
)
)
(
HighlightLines
)
;
