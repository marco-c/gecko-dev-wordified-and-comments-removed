import
React
{
PureComponent
}
from
"
devtools
/
client
/
shared
/
vendor
/
react
"
;
import
{
span
}
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
;
import
PropTypes
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
;
const
Reps
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
client
/
shared
/
components
/
reps
/
index
.
mjs
"
)
;
const
{
REPS
:
{
Rep
ElementNode
:
{
supportsObject
:
isElement
}
}
MODE
}
=
Reps
;
class
InlinePreview
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
highlightDomElement
:
PropTypes
.
func
.
isRequired
openElementInInspector
:
PropTypes
.
func
.
isRequired
unHighlightDomElement
:
PropTypes
.
func
.
isRequired
type
:
PropTypes
.
string
.
isRequired
value
:
PropTypes
.
any
variable
:
PropTypes
.
string
.
isRequired
}
;
}
showInScopes
(
)
{
}
render
(
)
{
const
{
type
value
variable
openElementInInspector
highlightDomElement
unHighlightDomElement
}
=
this
.
props
;
const
mode
=
isElement
(
value
)
?
MODE
.
TINY
:
MODE
.
SHORT
;
return
span
(
{
className
:
"
inline
-
preview
-
outer
"
onClick
:
(
)
=
>
this
.
showInScopes
(
variable
)
}
span
(
{
className
:
inline
-
preview
-
label
{
type
}
}
variable
"
:
"
)
span
(
{
className
:
"
inline
-
preview
-
value
"
}
React
.
createElement
(
Rep
{
object
:
value
mode
onDOMNodeClick
:
grip
=
>
openElementInInspector
(
grip
)
onInspectIconClick
:
grip
=
>
openElementInInspector
(
grip
)
onDOMNodeMouseOver
:
grip
=
>
highlightDomElement
(
grip
)
onDOMNodeMouseOut
:
grip
=
>
unHighlightDomElement
(
grip
)
}
)
)
)
;
}
}
export
default
InlinePreview
;
