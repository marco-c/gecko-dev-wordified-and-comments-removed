import
PropTypes
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
;
import
React
{
Component
}
from
"
devtools
/
client
/
shared
/
vendor
/
react
"
;
import
{
div
}
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
;
import
Breakpoint
from
"
.
/
Breakpoint
"
;
import
{
getSelectedSource
getFirstVisibleBreakpoints
}
from
"
.
.
/
.
.
/
selectors
/
index
"
;
import
{
makeBreakpointId
}
from
"
.
.
/
.
.
/
utils
/
breakpoint
/
index
"
;
import
{
connect
}
from
"
.
.
/
.
.
/
utils
/
connect
"
;
import
actions
from
"
.
.
/
.
.
/
actions
/
index
"
;
class
Breakpoints
extends
Component
{
static
get
propTypes
(
)
{
return
{
breakpoints
:
PropTypes
.
array
editor
:
PropTypes
.
object
selectedSource
:
PropTypes
.
object
removeBreakpointsAtLine
:
PropTypes
.
func
toggleBreakpointsAtLine
:
PropTypes
.
func
continueToHere
:
PropTypes
.
func
showEditorEditBreakpointContextMenu
:
PropTypes
.
func
}
;
}
render
(
)
{
const
{
breakpoints
selectedSource
editor
showEditorEditBreakpointContextMenu
continueToHere
toggleBreakpointsAtLine
removeBreakpointsAtLine
}
=
this
.
props
;
if
(
!
selectedSource
|
|
!
breakpoints
)
{
return
null
;
}
return
div
(
null
breakpoints
.
map
(
breakpoint
=
>
{
return
React
.
createElement
(
Breakpoint
{
key
:
makeBreakpointId
(
breakpoint
.
location
)
breakpoint
selectedSource
showEditorEditBreakpointContextMenu
continueToHere
toggleBreakpointsAtLine
removeBreakpointsAtLine
editor
}
)
;
}
)
)
;
}
}
const
mapStateToProps
=
state
=
>
{
const
selectedSource
=
getSelectedSource
(
state
)
;
return
{
breakpoints
:
getFirstVisibleBreakpoints
(
state
)
selectedSource
}
;
}
;
export
default
connect
(
mapStateToProps
{
showEditorEditBreakpointContextMenu
:
actions
.
showEditorEditBreakpointContextMenu
continueToHere
:
actions
.
continueToHere
toggleBreakpointsAtLine
:
actions
.
toggleBreakpointsAtLine
removeBreakpointsAtLine
:
actions
.
removeBreakpointsAtLine
}
)
(
Breakpoints
)
;
