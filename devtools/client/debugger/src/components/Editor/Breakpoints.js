import
React
{
Component
}
from
"
react
"
;
import
Breakpoint
from
"
.
/
Breakpoint
"
;
import
{
getSelectedSource
getFirstVisibleBreakpoints
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
makeBreakpointId
}
from
"
.
.
/
.
.
/
utils
/
breakpoint
"
;
import
{
connect
}
from
"
.
.
/
.
.
/
utils
/
connect
"
;
import
{
breakpointItemActions
}
from
"
.
/
menus
/
breakpoints
"
;
import
{
editorItemActions
}
from
"
.
/
menus
/
editor
"
;
class
Breakpoints
extends
Component
{
render
(
)
{
const
{
cx
breakpoints
selectedSource
editor
breakpointActions
editorActions
}
=
this
.
props
;
if
(
!
selectedSource
|
|
!
breakpoints
|
|
selectedSource
.
isBlackBoxed
)
{
return
null
;
}
return
(
<
div
>
{
breakpoints
.
map
(
bp
=
>
{
return
(
<
Breakpoint
cx
=
{
cx
}
key
=
{
makeBreakpointId
(
bp
.
location
)
}
breakpoint
=
{
bp
}
selectedSource
=
{
selectedSource
}
editor
=
{
editor
}
breakpointActions
=
{
breakpointActions
}
editorActions
=
{
editorActions
}
/
>
)
;
}
)
}
<
/
div
>
)
;
}
}
export
default
connect
(
state
=
>
(
{
breakpoints
:
getFirstVisibleBreakpoints
(
state
)
selectedSource
:
getSelectedSource
(
state
)
}
)
dispatch
=
>
(
{
breakpointActions
:
breakpointItemActions
(
dispatch
)
editorActions
:
editorItemActions
(
dispatch
)
}
)
)
(
Breakpoints
)
;
