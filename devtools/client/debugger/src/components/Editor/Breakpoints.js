import
PropTypes
from
"
prop
-
types
"
;
import
React
{
Component
}
from
"
react
"
;
import
Breakpoint
from
"
.
/
Breakpoint
"
;
import
{
getSelectedSource
getFirstVisibleBreakpoints
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
makeBreakpointId
}
from
"
.
.
/
.
.
/
utils
/
breakpoint
"
;
import
{
connect
}
from
"
.
.
/
.
.
/
utils
/
connect
"
;
import
actions
from
"
.
.
/
.
.
/
actions
"
;
class
Breakpoints
extends
Component
{
static
get
propTypes
(
)
{
return
{
breakpoints
:
PropTypes
.
array
editor
:
PropTypes
.
object
selectedSource
:
PropTypes
.
object
}
;
}
render
(
)
{
const
{
breakpoints
selectedSource
editor
showEditorEditBreakpointContextMenu
continueToHere
toggleBreakpointsAtLine
removeBreakpointsAtLine
}
=
this
.
props
;
if
(
!
selectedSource
|
|
!
breakpoints
)
{
return
null
;
}
return
(
<
div
>
{
breakpoints
.
map
(
bp
=
>
{
return
(
<
Breakpoint
key
=
{
makeBreakpointId
(
bp
.
location
)
}
breakpoint
=
{
bp
}
selectedSource
=
{
selectedSource
}
showEditorEditBreakpointContextMenu
=
{
showEditorEditBreakpointContextMenu
}
continueToHere
=
{
continueToHere
}
toggleBreakpointsAtLine
=
{
toggleBreakpointsAtLine
}
removeBreakpointsAtLine
=
{
removeBreakpointsAtLine
}
editor
=
{
editor
}
/
>
)
;
}
)
}
<
/
div
>
)
;
}
}
const
mapStateToProps
=
state
=
>
{
const
selectedSource
=
getSelectedSource
(
state
)
;
return
{
breakpoints
:
getFirstVisibleBreakpoints
(
state
)
selectedSource
}
;
}
;
export
default
connect
(
mapStateToProps
{
showEditorEditBreakpointContextMenu
:
actions
.
showEditorEditBreakpointContextMenu
continueToHere
:
actions
.
continueToHere
toggleBreakpointsAtLine
:
actions
.
toggleBreakpointsAtLine
removeBreakpointsAtLine
:
actions
.
removeBreakpointsAtLine
}
)
(
Breakpoints
)
;
