import
React
{
PureComponent
}
from
"
react
"
;
import
ReactDOM
from
"
react
-
dom
"
;
import
actions
from
"
.
.
/
.
.
/
actions
"
;
import
assert
from
"
.
.
/
.
.
/
utils
/
assert
"
;
import
{
connect
}
from
"
.
.
/
.
.
/
utils
/
connect
"
;
import
InlinePreview
from
"
.
/
InlinePreview
"
;
import
type
{
Preview
}
from
"
.
.
/
.
.
/
types
"
;
type
Props
=
{
editor
:
Object
line
:
number
previews
:
Array
<
Preview
>
numColumnBreakpoints
:
number
openElementInInspector
:
typeof
actions
.
openElementInInspectorCommand
highlightDomElement
:
typeof
actions
.
highlightDomElement
unHighlightDomElement
:
typeof
actions
.
unHighlightDomElement
}
;
import
"
.
/
InlinePreview
.
css
"
;
class
InlinePreviewRow
extends
PureComponent
<
Props
>
{
IPWidget
:
Object
;
lastLeft
:
number
;
componentDidMount
(
)
{
this
.
updatePreviewWidget
(
this
.
props
null
)
;
}
componentDidUpdate
(
prevProps
:
Props
)
{
this
.
updatePreviewWidget
(
this
.
props
prevProps
)
;
}
componentWillUnmount
(
)
{
this
.
updatePreviewWidget
(
null
this
.
props
)
;
}
getPreviewPosition
(
editor
:
Object
line
:
number
)
{
const
lineStartPos
=
editor
.
codeMirror
.
cursorCoords
(
{
line
ch
:
0
}
)
;
const
lineEndPos
=
editor
.
codeMirror
.
cursorCoords
(
{
line
ch
:
editor
.
getLine
(
line
)
.
length
}
)
;
return
lineEndPos
.
left
-
lineStartPos
.
left
;
}
setPreviewPosition
(
node
left
)
{
if
(
this
.
lastLeft
!
=
=
left
)
{
this
.
lastLeft
=
left
;
node
.
style
.
left
=
{
left
}
px
;
}
}
updatePreviewWidget
(
props
:
Props
|
null
prevProps
:
Props
|
null
)
{
if
(
this
.
IPWidget
&
&
prevProps
&
&
(
!
props
|
|
prevProps
.
editor
!
=
=
props
.
editor
|
|
prevProps
.
line
!
=
=
props
.
line
)
)
{
this
.
IPWidget
.
clear
(
)
;
this
.
IPWidget
=
null
;
}
if
(
!
props
)
{
return
assert
(
!
this
.
IPWidget
"
Inline
Preview
widget
shouldn
'
t
be
present
.
"
)
;
}
const
{
editor
line
previews
openElementInInspector
highlightDomElement
unHighlightDomElement
}
=
props
;
const
left
=
this
.
getPreviewPosition
(
editor
line
)
;
if
(
!
this
.
IPWidget
)
{
const
widget
=
document
.
createElement
(
"
div
"
)
;
widget
.
classList
.
add
(
"
inline
-
preview
"
)
;
this
.
setPreviewPosition
(
widget
left
)
;
this
.
IPWidget
=
editor
.
codeMirror
.
addLineWidget
(
line
widget
)
;
}
else
if
(
!
prevProps
|
|
this
.
lastLeft
!
=
=
left
)
{
this
.
setPreviewPosition
(
this
.
IPWidget
.
node
left
)
;
}
ReactDOM
.
render
(
<
React
.
Fragment
>
{
previews
.
map
(
(
preview
:
Preview
)
=
>
(
<
InlinePreview
line
=
{
line
}
variable
=
{
preview
.
name
}
value
=
{
preview
.
value
}
openElementInInspector
=
{
openElementInInspector
}
highlightDomElement
=
{
highlightDomElement
}
unHighlightDomElement
=
{
unHighlightDomElement
}
/
>
)
)
}
<
/
React
.
Fragment
>
this
.
IPWidget
.
node
)
;
}
render
(
)
{
return
null
;
}
}
export
default
connect
(
(
)
=
>
(
{
}
)
{
openElementInInspector
:
actions
.
openElementInInspectorCommand
highlightDomElement
:
actions
.
highlightDomElement
unHighlightDomElement
:
actions
.
unHighlightDomElement
}
)
(
InlinePreviewRow
)
;
