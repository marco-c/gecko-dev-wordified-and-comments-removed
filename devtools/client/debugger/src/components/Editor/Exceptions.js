import
{
Component
}
from
"
devtools
/
client
/
shared
/
vendor
/
react
"
;
import
PropTypes
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
;
import
{
connect
}
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
;
import
{
markerTypes
}
from
"
.
.
/
.
.
/
constants
"
;
import
{
getSelectedSource
getSelectedSourceExceptions
}
from
"
.
.
/
.
.
/
selectors
/
index
"
;
class
Exceptions
extends
Component
{
static
get
propTypes
(
)
{
return
{
exceptions
:
PropTypes
.
array
selectedSource
:
PropTypes
.
object
editor
:
PropTypes
.
object
}
;
}
componentDidMount
(
)
{
this
.
setMarkers
(
)
;
}
componentDidUpdate
(
prevProps
)
{
this
.
clearMarkers
(
prevProps
)
;
this
.
setMarkers
(
)
;
}
componentWillUnmount
(
)
{
this
.
clearMarkers
(
)
;
}
clearMarkers
(
prevProps
)
{
const
{
exceptions
selectedSource
editor
}
=
this
.
props
;
if
(
!
editor
)
{
return
;
}
if
(
!
selectedSource
|
|
!
exceptions
.
length
|
|
prevProps
?
.
selectedSource
!
=
=
selectedSource
)
{
editor
.
removeLineContentMarker
(
markerTypes
.
LINE_EXCEPTION_MARKER
)
;
editor
.
removePositionContentMarker
(
markerTypes
.
EXCEPTION_POSITION_MARKER
)
;
}
}
setMarkers
(
)
{
const
{
exceptions
selectedSource
editor
}
=
this
.
props
;
if
(
!
selectedSource
|
|
!
editor
|
|
!
exceptions
.
length
)
{
return
;
}
editor
.
setLineContentMarker
(
{
id
:
markerTypes
.
LINE_EXCEPTION_MARKER
lineClassName
:
"
line
-
exception
"
lines
:
exceptions
.
map
(
e
=
>
(
{
line
:
e
.
lineNumber
}
)
)
}
)
;
editor
.
setPositionContentMarker
(
{
id
:
markerTypes
.
EXCEPTION_POSITION_MARKER
positionClassName
:
"
mark
-
text
-
exception
"
positions
:
exceptions
.
map
(
e
=
>
(
{
line
:
e
.
lineNumber
column
:
e
.
columnNumber
-
1
}
)
)
}
)
;
}
render
(
)
{
return
null
;
}
}
export
default
connect
(
state
=
>
{
const
selectedSource
=
getSelectedSource
(
state
)
;
if
(
!
selectedSource
)
{
return
{
}
;
}
const
exceptions
=
getSelectedSourceExceptions
(
state
)
;
if
(
!
exceptions
.
length
)
{
return
{
}
;
}
return
{
exceptions
:
getSelectedSourceExceptions
(
state
)
selectedSource
}
;
}
)
(
Exceptions
)
;
