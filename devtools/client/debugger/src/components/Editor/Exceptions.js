import
React
{
Component
}
from
"
devtools
/
client
/
shared
/
vendor
/
react
"
;
import
PropTypes
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
;
import
{
connect
}
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
;
import
{
toEditorPosition
fromEditorLine
getDocument
}
from
"
.
.
/
.
.
/
utils
/
editor
/
index
"
;
import
{
createLocation
}
from
"
.
.
/
.
.
/
utils
/
location
"
;
import
{
markerTypes
}
from
"
.
.
/
.
.
/
constants
"
;
import
{
features
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
Exception
from
"
.
/
Exception
"
;
import
{
getSelectedSource
getSelectedSourceExceptions
}
from
"
.
.
/
.
.
/
selectors
/
index
"
;
class
Exceptions
extends
Component
{
static
get
propTypes
(
)
{
return
{
exceptions
:
PropTypes
.
array
selectedSource
:
PropTypes
.
object
editor
:
PropTypes
.
object
}
;
}
componentDidUpdate
(
)
{
const
{
exceptions
selectedSource
editor
}
=
this
.
props
;
if
(
!
features
.
codemirrorNext
)
{
return
;
}
if
(
!
selectedSource
|
|
!
editor
|
|
!
exceptions
.
length
)
{
editor
.
removeLineContentMarker
(
markerTypes
.
LINE_EXCEPTION_MARKER
)
;
editor
.
removePositionContentMarker
(
markerTypes
.
EXCEPTION_POSITION_MARKER
)
;
return
;
}
editor
.
setLineContentMarker
(
{
id
:
markerTypes
.
LINE_EXCEPTION_MARKER
lineClassName
:
"
line
-
exception
"
condition
:
line
=
>
{
const
lineNumber
=
fromEditorLine
(
selectedSource
.
id
line
)
;
const
exception
=
exceptions
.
find
(
e
=
>
e
.
lineNumber
=
=
lineNumber
)
;
if
(
!
exception
)
{
return
false
;
}
const
exceptionLocation
=
createLocation
(
{
source
:
selectedSource
line
:
exception
.
lineNumber
column
:
exception
.
columnNumber
-
1
}
)
;
const
editorLocation
=
toEditorPosition
(
exceptionLocation
)
;
return
editorLocation
.
line
=
=
lineNumber
;
}
}
)
;
editor
.
setPositionContentMarker
(
{
id
:
markerTypes
.
EXCEPTION_POSITION_MARKER
positionClassName
:
"
mark
-
text
-
exception
"
positions
:
exceptions
.
map
(
e
=
>
(
{
line
:
e
.
lineNumber
column
:
e
.
columnNumber
-
1
}
)
)
}
)
;
}
render
(
)
{
const
{
exceptions
selectedSource
}
=
this
.
props
;
if
(
features
.
codemirrorNext
)
{
return
null
;
}
if
(
!
selectedSource
|
|
!
exceptions
.
length
)
{
return
null
;
}
const
doc
=
getDocument
(
selectedSource
.
id
)
;
return
React
.
createElement
(
React
.
Fragment
null
exceptions
.
map
(
exception
=
>
React
.
createElement
(
Exception
{
exception
doc
key
:
{
exception
.
sourceActorId
}
:
{
exception
.
lineNumber
}
selectedSource
}
)
)
)
;
}
}
export
default
connect
(
state
=
>
{
const
selectedSource
=
getSelectedSource
(
state
)
;
if
(
!
selectedSource
)
{
return
{
}
;
}
const
exceptions
=
getSelectedSourceExceptions
(
state
)
;
if
(
!
exceptions
.
length
)
{
return
{
}
;
}
return
{
exceptions
:
getSelectedSourceExceptions
(
state
)
selectedSource
}
;
}
)
(
Exceptions
)
;
