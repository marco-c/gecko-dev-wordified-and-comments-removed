import
{
connect
}
from
"
.
.
/
.
.
/
utils
/
connect
"
;
import
{
Component
}
from
"
react
"
;
import
PropTypes
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
;
import
{
getSelectedSource
getSelectedBreakableLines
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
fromEditorLine
}
from
"
.
.
/
.
.
/
utils
/
editor
"
;
import
{
isWasm
}
from
"
.
.
/
.
.
/
utils
/
wasm
"
;
class
EmptyLines
extends
Component
{
static
get
propTypes
(
)
{
return
{
breakableLines
:
PropTypes
.
object
.
isRequired
editor
:
PropTypes
.
object
.
isRequired
selectedSource
:
PropTypes
.
object
.
isRequired
}
;
}
componentDidMount
(
)
{
this
.
disableEmptyLines
(
)
;
}
componentDidUpdate
(
)
{
this
.
disableEmptyLines
(
)
;
}
componentWillUnmount
(
)
{
const
{
editor
}
=
this
.
props
;
editor
.
codeMirror
.
operation
(
(
)
=
>
{
editor
.
codeMirror
.
eachLine
(
lineHandle
=
>
{
editor
.
codeMirror
.
removeLineClass
(
lineHandle
"
wrap
"
"
empty
-
line
"
)
;
}
)
;
}
)
;
}
shouldComponentUpdate
(
nextProps
)
{
const
{
breakableLines
selectedSource
}
=
this
.
props
;
return
(
breakableLines
.
size
!
=
nextProps
.
breakableLines
.
size
|
|
selectedSource
.
id
!
=
nextProps
.
selectedSource
.
id
)
;
}
disableEmptyLines
(
)
{
const
{
breakableLines
selectedSource
editor
}
=
this
.
props
;
const
{
codeMirror
}
=
editor
;
const
isSourceWasm
=
isWasm
(
selectedSource
.
id
)
;
codeMirror
.
operation
(
(
)
=
>
{
const
lineCount
=
codeMirror
.
lineCount
(
)
;
for
(
let
i
=
0
;
i
<
lineCount
;
i
+
+
)
{
const
line
=
fromEditorLine
(
selectedSource
.
id
i
isSourceWasm
)
;
if
(
breakableLines
.
has
(
line
)
)
{
codeMirror
.
removeLineClass
(
i
"
wrap
"
"
empty
-
line
"
)
;
}
else
{
codeMirror
.
addLineClass
(
i
"
wrap
"
"
empty
-
line
"
)
;
}
}
}
)
;
}
render
(
)
{
return
null
;
}
}
const
mapStateToProps
=
state
=
>
{
const
selectedSource
=
getSelectedSource
(
state
)
;
if
(
!
selectedSource
)
{
throw
new
Error
(
"
no
selectedSource
"
)
;
}
const
breakableLines
=
getSelectedBreakableLines
(
state
)
;
return
{
selectedSource
breakableLines
}
;
}
;
export
default
connect
(
mapStateToProps
)
(
EmptyLines
)
;
