import
{
Component
}
from
"
react
"
;
import
PropTypes
from
"
prop
-
types
"
;
import
{
connect
}
from
"
.
.
/
.
.
/
utils
/
connect
"
;
import
{
showMenu
}
from
"
.
.
/
.
.
/
context
-
menu
/
menu
"
;
import
{
getSourceLocationFromMouseEvent
}
from
"
.
.
/
.
.
/
utils
/
editor
"
;
import
{
isPretty
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
getPrettySource
getIsCurrentThreadPaused
getThreadContext
isSourceWithMap
getBlackBoxRanges
isSourceOnSourceMapIgnoreList
isSourceMapIgnoreListEnabled
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
editorMenuItems
editorItemActions
}
from
"
.
/
menus
/
editor
"
;
class
EditorMenu
extends
Component
{
static
get
propTypes
(
)
{
return
{
clearContextMenu
:
PropTypes
.
func
.
isRequired
contextMenu
:
PropTypes
.
object
isSourceOnIgnoreList
:
PropTypes
.
bool
}
;
}
UNSAFE_componentWillUpdate
(
nextProps
)
{
this
.
props
.
clearContextMenu
(
)
;
if
(
nextProps
.
contextMenu
)
{
this
.
showMenu
(
nextProps
)
;
}
}
showMenu
(
props
)
{
const
{
cx
editor
selectedSource
blackboxedRanges
editorActions
hasMappedLocation
isPaused
editorWrappingEnabled
contextMenu
:
event
isSourceOnIgnoreList
}
=
props
;
const
location
=
getSourceLocationFromMouseEvent
(
editor
selectedSource
event
)
;
showMenu
(
event
editorMenuItems
(
{
cx
editorActions
selectedSource
blackboxedRanges
hasMappedLocation
location
isPaused
editorWrappingEnabled
selectionText
:
editor
.
codeMirror
.
getSelection
(
)
.
trim
(
)
isTextSelected
:
editor
.
codeMirror
.
somethingSelected
(
)
editor
isSourceOnIgnoreList
}
)
)
;
}
render
(
)
{
return
null
;
}
}
const
mapStateToProps
=
(
state
props
)
=
>
{
if
(
!
props
.
contextMenu
)
{
return
{
}
;
}
return
{
cx
:
getThreadContext
(
state
)
blackboxedRanges
:
getBlackBoxRanges
(
state
)
isPaused
:
getIsCurrentThreadPaused
(
state
)
hasMappedLocation
:
(
props
.
selectedSource
.
isOriginal
|
|
isSourceWithMap
(
state
props
.
selectedSource
.
id
)
|
|
isPretty
(
props
.
selectedSource
)
)
&
&
!
getPrettySource
(
state
props
.
selectedSource
.
id
)
isSourceOnIgnoreList
:
isSourceMapIgnoreListEnabled
(
state
)
&
&
isSourceOnSourceMapIgnoreList
(
state
props
.
selectedSource
)
}
;
}
;
const
mapDispatchToProps
=
dispatch
=
>
(
{
editorActions
:
editorItemActions
(
dispatch
)
}
)
;
export
default
connect
(
mapStateToProps
mapDispatchToProps
)
(
EditorMenu
)
;
