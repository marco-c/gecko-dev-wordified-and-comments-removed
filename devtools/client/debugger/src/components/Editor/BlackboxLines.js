import
PropTypes
from
"
prop
-
types
"
;
import
{
Component
}
from
"
react
"
;
import
{
toEditorLine
fromEditorLine
}
from
"
.
.
/
.
.
/
utils
/
editor
"
;
import
{
isLineBlackboxed
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
isWasm
}
from
"
.
.
/
.
.
/
utils
/
wasm
"
;
class
BlackboxLines
extends
Component
{
static
get
propTypes
(
)
{
return
{
editor
:
PropTypes
.
object
.
isRequired
selectedSource
:
PropTypes
.
object
.
isRequired
blackboxedRangesForSelectedSource
:
PropTypes
.
array
isSourceOnIgnoreList
:
PropTypes
.
bool
}
;
}
componentDidMount
(
)
{
const
{
selectedSource
blackboxedRangesForSelectedSource
editor
}
=
this
.
props
;
if
(
this
.
props
.
isSourceOnIgnoreList
)
{
this
.
setAllBlackboxLines
(
editor
)
;
return
;
}
if
(
!
blackboxedRangesForSelectedSource
.
length
)
{
this
.
setAllBlackboxLines
(
editor
)
;
}
else
{
editor
.
codeMirror
.
operation
(
(
)
=
>
{
blackboxedRangesForSelectedSource
.
forEach
(
range
=
>
{
const
start
=
toEditorLine
(
selectedSource
.
id
range
.
start
.
line
)
;
const
end
=
toEditorLine
(
selectedSource
.
id
range
.
end
.
line
)
;
editor
.
codeMirror
.
eachLine
(
start
end
lineHandle
=
>
{
this
.
setBlackboxLine
(
editor
lineHandle
)
;
}
)
;
}
)
;
}
)
;
}
}
componentDidUpdate
(
)
{
const
{
selectedSource
blackboxedRangesForSelectedSource
editor
isSourceOnIgnoreList
}
=
this
.
props
;
if
(
this
.
props
.
isSourceOnIgnoreList
)
{
this
.
setAllBlackboxLines
(
editor
)
;
return
;
}
if
(
!
blackboxedRangesForSelectedSource
)
{
this
.
clearAllBlackboxLines
(
editor
)
;
return
;
}
if
(
!
blackboxedRangesForSelectedSource
.
length
)
{
this
.
setAllBlackboxLines
(
editor
)
;
return
;
}
const
sourceIsWasm
=
isWasm
(
selectedSource
.
id
)
;
editor
.
codeMirror
.
operation
(
(
)
=
>
{
editor
.
codeMirror
.
eachLine
(
lineHandle
=
>
{
const
line
=
fromEditorLine
(
selectedSource
.
id
editor
.
codeMirror
.
getLineNumber
(
lineHandle
)
sourceIsWasm
)
;
if
(
isLineBlackboxed
(
blackboxedRangesForSelectedSource
line
isSourceOnIgnoreList
)
)
{
this
.
setBlackboxLine
(
editor
lineHandle
)
;
}
else
{
this
.
clearBlackboxLine
(
editor
lineHandle
)
;
}
}
)
;
}
)
;
}
componentWillUnmount
(
)
{
this
.
clearAllBlackboxLines
(
this
.
props
.
editor
)
;
}
clearAllBlackboxLines
(
editor
)
{
editor
.
codeMirror
.
operation
(
(
)
=
>
{
editor
.
codeMirror
.
eachLine
(
lineHandle
=
>
{
this
.
clearBlackboxLine
(
editor
lineHandle
)
;
}
)
;
}
)
;
}
setAllBlackboxLines
(
editor
)
{
editor
.
codeMirror
.
operation
(
(
)
=
>
{
editor
.
codeMirror
.
eachLine
(
lineHandle
=
>
{
this
.
setBlackboxLine
(
editor
lineHandle
)
;
}
)
;
}
)
;
}
clearBlackboxLine
(
editor
lineHandle
)
{
editor
.
codeMirror
.
removeLineClass
(
lineHandle
"
wrap
"
"
blackboxed
-
line
"
)
;
}
setBlackboxLine
(
editor
lineHandle
)
{
editor
.
codeMirror
.
addLineClass
(
lineHandle
"
wrap
"
"
blackboxed
-
line
"
)
;
}
render
(
)
{
return
null
;
}
}
export
default
BlackboxLines
;
