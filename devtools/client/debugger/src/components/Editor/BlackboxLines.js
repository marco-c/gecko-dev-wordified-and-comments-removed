import
{
connect
}
from
"
.
.
/
.
.
/
utils
/
connect
"
;
import
PropTypes
from
"
prop
-
types
"
;
import
{
Component
}
from
"
react
"
;
import
{
toEditorLine
fromEditorLine
}
from
"
.
.
/
.
.
/
utils
/
editor
"
;
import
{
getBlackBoxRanges
getSelectedSource
}
from
"
.
.
/
.
.
/
selectors
"
;
class
BlackboxLines
extends
Component
{
static
get
propTypes
(
)
{
return
{
editor
:
PropTypes
.
object
selectedSource
:
PropTypes
.
object
blackboxedRangesForSelectedSource
:
PropTypes
.
object
}
;
}
componentDidMount
(
)
{
const
{
selectedSource
blackboxedRangesForSelectedSource
editor
}
=
this
.
props
;
if
(
!
blackboxedRangesForSelectedSource
)
{
return
;
}
if
(
!
blackboxedRangesForSelectedSource
.
length
)
{
this
.
setAllBlackboxLines
(
editor
)
;
}
else
{
editor
.
codeMirror
.
operation
(
(
)
=
>
{
blackboxedRangesForSelectedSource
.
forEach
(
range
=
>
{
const
start
=
toEditorLine
(
selectedSource
.
id
range
.
start
.
line
)
;
const
end
=
toEditorLine
(
selectedSource
.
id
range
.
end
.
line
)
;
editor
.
codeMirror
.
eachLine
(
start
end
lineHandle
=
>
{
this
.
setBlackboxLine
(
editor
lineHandle
)
;
}
)
;
}
)
;
}
)
;
}
}
componentDidUpdate
(
)
{
const
{
selectedSource
blackboxedRangesForSelectedSource
editor
}
=
this
.
props
;
if
(
!
blackboxedRangesForSelectedSource
)
{
this
.
clearAllBlackboxLines
(
editor
)
;
return
;
}
if
(
!
blackboxedRangesForSelectedSource
.
length
)
{
this
.
setAllBlackboxLines
(
editor
)
;
return
;
}
editor
.
codeMirror
.
operation
(
(
)
=
>
{
editor
.
codeMirror
.
eachLine
(
lineHandle
=
>
{
const
line
=
fromEditorLine
(
selectedSource
.
id
editor
.
codeMirror
.
getLineNumber
(
lineHandle
)
)
;
if
(
this
.
isLineBlackboxed
(
blackboxedRangesForSelectedSource
line
)
)
{
this
.
setBlackboxLine
(
editor
lineHandle
)
;
}
else
{
this
.
clearBlackboxLine
(
editor
lineHandle
)
;
}
}
)
;
}
)
;
}
componentWillUnmount
(
)
{
this
.
clearAllBlackboxLines
(
this
.
props
.
editor
)
;
}
isLineBlackboxed
(
ranges
line
)
{
return
!
!
ranges
.
find
(
range
=
>
line
>
=
range
.
start
.
line
&
&
line
<
=
range
.
end
.
line
)
;
}
clearAllBlackboxLines
(
editor
)
{
editor
.
codeMirror
.
operation
(
(
)
=
>
{
editor
.
codeMirror
.
eachLine
(
lineHandle
=
>
{
this
.
clearBlackboxLine
(
editor
lineHandle
)
;
}
)
;
}
)
;
}
setAllBlackboxLines
(
editor
)
{
editor
.
codeMirror
.
operation
(
(
)
=
>
{
editor
.
codeMirror
.
eachLine
(
lineHandle
=
>
{
this
.
setBlackboxLine
(
editor
lineHandle
)
;
}
)
;
}
)
;
}
clearBlackboxLine
(
editor
lineHandle
)
{
editor
.
codeMirror
.
removeLineClass
(
lineHandle
"
wrapClass
"
"
blackboxed
-
line
"
)
;
}
setBlackboxLine
(
editor
lineHandle
)
{
editor
.
codeMirror
.
addLineClass
(
lineHandle
"
wrapClass
"
"
blackboxed
-
line
"
)
;
}
render
(
)
{
return
null
;
}
}
const
mapStateToProps
=
state
=
>
{
const
selectedSource
=
getSelectedSource
(
state
)
;
return
{
selectedSource
blackboxedRangesForSelectedSource
:
selectedSource
?
getBlackBoxRanges
(
state
)
[
selectedSource
.
url
]
:
undefined
}
;
}
;
export
default
connect
(
mapStateToProps
)
(
BlackboxLines
)
;
