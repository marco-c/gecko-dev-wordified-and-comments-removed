import
React
{
Component
}
from
"
react
"
;
import
ColumnBreakpoint
from
"
.
/
ColumnBreakpoint
"
;
import
{
getSelectedSource
visibleColumnBreakpoints
getContext
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
connect
}
from
"
.
.
/
.
.
/
utils
/
connect
"
;
import
{
makeBreakpointId
}
from
"
.
.
/
.
.
/
utils
/
breakpoint
"
;
import
{
breakpointItemActions
}
from
"
.
/
menus
/
breakpoints
"
;
import
type
{
BreakpointItemActions
}
from
"
.
/
menus
/
breakpoints
"
;
import
type
{
Source
Context
}
from
"
.
.
/
.
.
/
types
"
;
import
type
{
ColumnBreakpoint
as
ColumnBreakpointType
}
from
"
.
.
/
.
.
/
selectors
/
visibleColumnBreakpoints
"
;
type
Props
=
{
cx
:
Context
editor
:
Object
selectedSource
:
Source
columnBreakpoints
:
ColumnBreakpointType
[
]
breakpointActions
:
BreakpointItemActions
}
;
class
ColumnBreakpoints
extends
Component
<
Props
>
{
props
:
Props
;
render
(
)
{
const
{
cx
editor
columnBreakpoints
selectedSource
breakpointActions
}
=
this
.
props
;
if
(
!
selectedSource
|
|
selectedSource
.
isBlackBoxed
)
{
return
null
;
}
let
breakpoints
;
editor
.
codeMirror
.
operation
(
(
)
=
>
{
breakpoints
=
columnBreakpoints
.
map
(
breakpoint
=
>
(
<
ColumnBreakpoint
cx
=
{
cx
}
key
=
{
makeBreakpointId
(
breakpoint
.
location
)
}
columnBreakpoint
=
{
breakpoint
}
editor
=
{
editor
}
source
=
{
selectedSource
}
breakpointActions
=
{
breakpointActions
}
/
>
)
)
;
}
)
;
return
<
div
>
{
breakpoints
}
<
/
div
>
;
}
}
const
mapStateToProps
=
state
=
>
(
{
cx
:
getContext
(
state
)
selectedSource
:
getSelectedSource
(
state
)
columnBreakpoints
:
visibleColumnBreakpoints
(
state
)
}
)
;
export
default
connect
(
mapStateToProps
dispatch
=
>
(
{
breakpointActions
:
breakpointItemActions
(
dispatch
)
}
)
)
(
ColumnBreakpoints
)
;
