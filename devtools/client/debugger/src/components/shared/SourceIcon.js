import
React
{
PureComponent
}
from
"
devtools
/
client
/
shared
/
vendor
/
react
"
;
import
PropTypes
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
;
import
{
connect
}
from
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
;
import
AccessibleImage
from
"
.
/
AccessibleImage
"
;
import
{
getSourceClassnames
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
isSourceBlackBoxed
hasPrettyTab
}
from
"
.
.
/
.
.
/
selectors
/
index
"
;
import
"
.
/
SourceIcon
.
css
"
;
class
SourceIcon
extends
PureComponent
{
static
get
propTypes
(
)
{
return
{
modifier
:
PropTypes
.
func
location
:
PropTypes
.
object
.
isRequired
iconClass
:
PropTypes
.
string
forTab
:
PropTypes
.
bool
}
;
}
render
(
)
{
const
{
modifier
}
=
this
.
props
;
let
{
iconClass
}
=
this
.
props
;
if
(
modifier
)
{
const
modified
=
modifier
(
iconClass
)
;
if
(
!
modified
)
{
return
null
;
}
iconClass
=
modified
;
}
return
React
.
createElement
(
AccessibleImage
{
className
:
source
-
icon
{
iconClass
}
}
)
;
}
}
export
default
connect
(
(
state
props
)
=
>
{
const
{
forTab
location
}
=
props
;
const
isBlackBoxed
=
isSourceBlackBoxed
(
state
location
.
source
)
;
const
hasMatchingPrettyTab
=
!
forTab
&
&
hasPrettyTab
(
state
location
.
source
)
;
const
iconClass
=
getSourceClassnames
(
location
.
source
isBlackBoxed
hasMatchingPrettyTab
)
;
return
{
iconClass
}
;
}
)
(
SourceIcon
)
;
