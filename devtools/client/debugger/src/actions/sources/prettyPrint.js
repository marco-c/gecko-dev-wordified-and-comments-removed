import
{
generatedToOriginalId
originalToGeneratedId
}
from
"
devtools
/
client
/
shared
/
source
-
map
-
loader
/
index
"
;
import
assert
from
"
.
.
/
.
.
/
utils
/
assert
"
;
import
{
recordEvent
}
from
"
.
.
/
.
.
/
utils
/
telemetry
"
;
import
{
updateBreakpointsForNewPrettyPrintedSource
}
from
"
.
.
/
breakpoints
"
;
import
{
createLocation
}
from
"
.
.
/
.
.
/
utils
/
location
"
;
import
{
getPrettySourceURL
isGenerated
isJavaScript
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
isFulfilled
}
from
"
.
.
/
.
.
/
utils
/
async
-
value
"
;
import
{
getOriginalLocation
}
from
"
.
.
/
.
.
/
utils
/
source
-
maps
"
;
import
{
loadGeneratedSourceText
loadOriginalSourceText
}
from
"
.
/
loadSourceText
"
;
import
{
mapFrames
}
from
"
.
.
/
pause
"
;
import
{
selectSpecificLocation
}
from
"
.
.
/
sources
"
;
import
{
createPrettyPrintOriginalSource
}
from
"
.
.
/
.
.
/
client
/
firefox
/
create
"
;
import
{
getSource
getFirstSourceActorForGeneratedSource
getSourceByURL
getSelectedLocation
getThreadContext
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
selectSource
}
from
"
.
/
select
"
;
function
getPrettyOriginalSourceURL
(
generatedSource
)
{
return
getPrettySourceURL
(
generatedSource
.
url
|
|
generatedSource
.
id
)
;
}
export
async
function
prettyPrintSource
(
sourceMapLoader
prettyPrintWorker
generatedSource
content
actors
)
{
if
(
!
content
|
|
!
isFulfilled
(
content
)
)
{
throw
new
Error
(
"
Cannot
pretty
-
print
a
file
that
has
not
loaded
"
)
;
}
const
contentValue
=
content
.
value
;
if
(
!
isJavaScript
(
generatedSource
contentValue
)
|
|
contentValue
.
type
!
=
=
"
text
"
)
{
throw
new
Error
(
"
Can
'
t
prettify
non
-
javascript
files
.
"
)
;
}
const
url
=
getPrettyOriginalSourceURL
(
generatedSource
)
;
const
{
code
sourceMap
}
=
await
prettyPrintWorker
.
prettyPrint
(
{
text
:
contentValue
.
value
url
}
)
;
const
generatedSourceIds
=
[
generatedSource
.
id
.
.
.
actors
.
map
(
item
=
>
item
.
actor
)
]
;
await
sourceMapLoader
.
setSourceMapForGeneratedSources
(
generatedSourceIds
sourceMap
)
;
return
{
text
:
code
contentType
:
"
text
/
javascript
"
}
;
}
function
createPrettySource
(
cx
source
)
{
return
async
(
{
dispatch
sourceMapLoader
getState
}
)
=
>
{
const
url
=
getPrettyOriginalSourceURL
(
source
)
;
const
id
=
generatedToOriginalId
(
source
.
id
url
)
;
const
prettySource
=
createPrettyPrintOriginalSource
(
id
url
)
;
dispatch
(
{
type
:
"
ADD_ORIGINAL_SOURCES
"
cx
originalSources
:
[
prettySource
]
}
)
;
return
prettySource
;
}
;
}
function
selectPrettyLocation
(
cx
prettySource
)
{
return
async
thunkArgs
=
>
{
const
{
dispatch
getState
}
=
thunkArgs
;
let
location
=
getSelectedLocation
(
getState
(
)
)
;
if
(
location
&
&
location
.
line
>
=
1
&
&
location
.
sourceId
=
=
originalToGeneratedId
(
prettySource
.
id
)
)
{
location
=
await
getOriginalLocation
(
location
thunkArgs
)
;
return
dispatch
(
selectSpecificLocation
(
cx
createLocation
(
{
.
.
.
location
source
:
prettySource
}
)
)
)
;
}
return
dispatch
(
selectSource
(
cx
prettySource
)
)
;
}
;
}
export
function
togglePrettyPrint
(
cx
sourceId
)
{
return
async
(
{
dispatch
getState
}
)
=
>
{
const
source
=
getSource
(
getState
(
)
sourceId
)
;
if
(
!
source
)
{
return
{
}
;
}
if
(
!
source
.
isPrettyPrinted
)
{
recordEvent
(
"
pretty_print
"
)
;
}
assert
(
isGenerated
(
source
)
"
Pretty
-
printing
only
allowed
on
generated
sources
"
)
;
const
sourceActor
=
getFirstSourceActorForGeneratedSource
(
getState
(
)
source
.
id
)
;
await
dispatch
(
loadGeneratedSourceText
(
{
cx
sourceActor
}
)
)
;
const
url
=
getPrettySourceURL
(
source
.
url
)
;
const
prettySource
=
getSourceByURL
(
getState
(
)
url
)
;
if
(
prettySource
)
{
return
dispatch
(
selectPrettyLocation
(
cx
prettySource
)
)
;
}
const
newPrettySource
=
await
dispatch
(
createPrettySource
(
cx
source
)
)
;
await
dispatch
(
loadOriginalSourceText
(
{
cx
source
:
newPrettySource
}
)
)
;
await
dispatch
(
selectPrettyLocation
(
cx
newPrettySource
)
)
;
const
threadcx
=
getThreadContext
(
getState
(
)
)
;
await
dispatch
(
mapFrames
(
threadcx
)
)
;
await
dispatch
(
updateBreakpointsForNewPrettyPrintedSource
(
cx
sourceId
)
)
;
return
newPrettySource
;
}
;
}
