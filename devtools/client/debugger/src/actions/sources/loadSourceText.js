import
{
PROMISE
}
from
"
.
.
/
utils
/
middleware
/
promise
"
;
import
{
getSourceTextContent
getSettledSourceTextContent
getGeneratedSource
getSourcesEpoch
getBreakpointsForSource
getSourceActorsForSource
getFirstSourceActorForGeneratedSource
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
addBreakpoint
}
from
"
.
.
/
breakpoints
"
;
import
{
prettyPrintSource
}
from
"
.
/
prettyPrint
"
;
import
{
isFulfilled
fulfilled
}
from
"
.
.
/
.
.
/
utils
/
async
-
value
"
;
import
{
isPretty
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
createLocation
}
from
"
.
.
/
.
.
/
utils
/
location
"
;
import
{
memoizeableAction
}
from
"
.
.
/
.
.
/
utils
/
memoizableAction
"
;
async
function
loadGeneratedSource
(
sourceActor
{
client
}
)
{
if
(
!
sourceActor
)
{
throw
new
Error
(
"
Source
actor
is
null
or
not
defined
"
)
;
}
let
response
;
try
{
response
=
await
client
.
sourceContents
(
sourceActor
)
;
}
catch
(
e
)
{
throw
new
Error
(
sourceContents
failed
:
{
e
}
)
;
}
return
{
text
:
response
.
source
contentType
:
response
.
contentType
|
|
"
text
/
javascript
"
}
;
}
async
function
loadOriginalSource
(
source
{
getState
client
sourceMapLoader
prettyPrintWorker
}
)
{
if
(
isPretty
(
source
)
)
{
const
generatedSource
=
getGeneratedSource
(
getState
(
)
source
)
;
if
(
!
generatedSource
)
{
throw
new
Error
(
"
Unable
to
find
minified
original
.
"
)
;
}
const
content
=
getSettledSourceTextContent
(
getState
(
)
createLocation
(
{
source
:
generatedSource
}
)
)
;
return
prettyPrintSource
(
sourceMapLoader
prettyPrintWorker
generatedSource
content
getSourceActorsForSource
(
getState
(
)
generatedSource
.
id
)
)
;
}
const
result
=
await
sourceMapLoader
.
getOriginalSourceText
(
source
.
id
)
;
if
(
!
result
)
{
throw
new
Error
(
"
Original
source
text
unavailable
"
)
;
}
return
result
;
}
async
function
loadGeneratedSourceTextPromise
(
cx
sourceActor
thunkArgs
)
{
const
{
dispatch
getState
}
=
thunkArgs
;
const
epoch
=
getSourcesEpoch
(
getState
(
)
)
;
await
dispatch
(
{
type
:
"
LOAD_GENERATED_SOURCE_TEXT
"
sourceActorId
:
sourceActor
.
actor
epoch
[
PROMISE
]
:
loadGeneratedSource
(
sourceActor
thunkArgs
)
}
)
;
await
onSourceTextContentAvailable
(
cx
sourceActor
.
sourceObject
sourceActor
thunkArgs
)
;
}
async
function
loadOriginalSourceTextPromise
(
cx
source
thunkArgs
)
{
const
{
dispatch
getState
}
=
thunkArgs
;
const
epoch
=
getSourcesEpoch
(
getState
(
)
)
;
await
dispatch
(
{
type
:
"
LOAD_ORIGINAL_SOURCE_TEXT
"
sourceId
:
source
.
id
epoch
[
PROMISE
]
:
loadOriginalSource
(
source
thunkArgs
)
}
)
;
await
onSourceTextContentAvailable
(
cx
source
null
thunkArgs
)
;
}
async
function
onSourceTextContentAvailable
(
cx
source
sourceActor
{
dispatch
getState
parserWorker
}
)
{
const
location
=
createLocation
(
{
source
sourceActor
}
)
;
const
content
=
getSettledSourceTextContent
(
getState
(
)
location
)
;
if
(
!
content
)
{
return
;
}
if
(
parserWorker
.
isLocationSupported
(
location
)
)
{
parserWorker
.
setSource
(
source
.
id
isFulfilled
(
content
)
?
content
.
value
:
{
type
:
"
text
"
value
:
"
"
contentType
:
undefined
}
)
;
}
const
breakpoints
=
getBreakpointsForSource
(
getState
(
)
source
.
id
)
;
for
(
const
breakpoint
of
breakpoints
)
{
await
dispatch
(
addBreakpoint
(
cx
breakpoint
.
location
breakpoint
.
options
breakpoint
.
disabled
)
)
;
}
}
export
const
loadGeneratedSourceText
=
memoizeableAction
(
"
loadGeneratedSourceText
"
{
getValue
:
(
{
sourceActor
}
{
getState
}
)
=
>
{
if
(
!
sourceActor
)
{
return
null
;
}
const
sourceTextContent
=
getSourceTextContent
(
getState
(
)
createLocation
(
{
source
:
sourceActor
.
sourceObject
sourceActor
}
)
)
;
if
(
!
sourceTextContent
|
|
sourceTextContent
.
state
=
=
=
"
pending
"
)
{
return
sourceTextContent
;
}
return
fulfilled
(
sourceTextContent
)
;
}
createKey
:
(
{
sourceActor
}
{
getState
}
)
=
>
{
const
epoch
=
getSourcesEpoch
(
getState
(
)
)
;
return
{
epoch
}
:
{
sourceActor
.
actor
}
;
}
action
:
(
{
cx
sourceActor
}
thunkArgs
)
=
>
loadGeneratedSourceTextPromise
(
cx
sourceActor
thunkArgs
)
}
)
;
export
const
loadOriginalSourceText
=
memoizeableAction
(
"
loadOriginalSourceText
"
{
getValue
:
(
{
source
}
{
getState
}
)
=
>
{
if
(
!
source
)
{
return
null
;
}
const
sourceTextContent
=
getSourceTextContent
(
getState
(
)
createLocation
(
{
source
}
)
)
;
if
(
!
sourceTextContent
|
|
sourceTextContent
.
state
=
=
=
"
pending
"
)
{
return
sourceTextContent
;
}
return
fulfilled
(
sourceTextContent
)
;
}
createKey
:
(
{
source
}
{
getState
}
)
=
>
{
const
epoch
=
getSourcesEpoch
(
getState
(
)
)
;
return
{
epoch
}
:
{
source
.
id
}
;
}
action
:
(
{
cx
source
}
thunkArgs
)
=
>
loadOriginalSourceTextPromise
(
cx
source
thunkArgs
)
}
)
;
export
function
loadSourceText
(
cx
source
sourceActor
)
{
return
async
(
{
dispatch
getState
}
)
=
>
{
if
(
!
source
)
{
return
null
;
}
if
(
source
.
isOriginal
)
{
return
dispatch
(
loadOriginalSourceText
(
{
cx
source
}
)
)
;
}
if
(
!
sourceActor
)
{
sourceActor
=
getFirstSourceActorForGeneratedSource
(
getState
(
)
source
.
id
)
;
}
return
dispatch
(
loadGeneratedSourceText
(
{
cx
sourceActor
}
)
)
;
}
;
}
