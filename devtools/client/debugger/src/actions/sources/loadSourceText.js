import
{
PROMISE
}
from
"
.
.
/
utils
/
middleware
/
promise
"
;
import
{
getSource
getSourceFromId
getSourceWithContent
getSourceContent
getGeneratedSource
getSourcesEpoch
getBreakpointsForSource
getSourceActorsForSource
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
addBreakpoint
}
from
"
.
.
/
breakpoints
"
;
import
{
prettyPrintSource
}
from
"
.
/
prettyPrint
"
;
import
{
isFulfilled
fulfilled
}
from
"
.
.
/
.
.
/
utils
/
async
-
value
"
;
import
{
isOriginal
isPretty
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
memoizeableAction
}
from
"
.
.
/
.
.
/
utils
/
memoizableAction
"
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
loadSourceHistogram
=
"
DEVTOOLS_DEBUGGER_LOAD_SOURCE_MS
"
;
const
telemetry
=
new
Telemetry
(
)
;
async
function
loadSource
(
state
source
{
sourceMaps
client
getState
}
)
{
if
(
isPretty
(
source
)
&
&
isOriginal
(
source
)
)
{
const
generatedSource
=
getGeneratedSource
(
state
source
)
;
if
(
!
generatedSource
)
{
throw
new
Error
(
"
Unable
to
find
minified
original
.
"
)
;
}
const
content
=
getSourceContent
(
state
generatedSource
.
id
)
;
if
(
!
content
|
|
!
isFulfilled
(
content
)
)
{
throw
new
Error
(
"
Cannot
pretty
-
print
a
file
that
has
not
loaded
"
)
;
}
return
prettyPrintSource
(
sourceMaps
generatedSource
content
.
value
getSourceActorsForSource
(
state
generatedSource
.
id
)
)
;
}
if
(
isOriginal
(
source
)
)
{
const
result
=
await
sourceMaps
.
getOriginalSourceText
(
source
.
id
)
;
if
(
!
result
)
{
throw
new
Error
(
"
Original
source
text
unavailable
"
)
;
}
return
result
;
}
let
response
;
const
handledActors
=
new
Set
(
)
;
while
(
true
)
{
const
actors
=
getSourceActorsForSource
(
state
source
.
id
)
;
const
actor
=
actors
.
find
(
(
{
actor
:
a
}
)
=
>
!
handledActors
.
has
(
a
)
)
;
if
(
!
actor
)
{
throw
new
Error
(
"
Unknown
source
"
)
;
}
handledActors
.
add
(
actor
.
actor
)
;
try
{
telemetry
.
start
(
loadSourceHistogram
source
)
;
response
=
await
client
.
sourceContents
(
actor
)
;
telemetry
.
finish
(
loadSourceHistogram
source
)
;
break
;
}
catch
(
e
)
{
console
.
warn
(
sourceContents
failed
:
{
e
}
)
;
}
}
return
{
text
:
response
.
source
contentType
:
response
.
contentType
|
|
"
text
/
javascript
"
}
;
}
async
function
loadSourceTextPromise
(
cx
source
{
dispatch
getState
client
sourceMaps
parser
}
)
{
const
epoch
=
getSourcesEpoch
(
getState
(
)
)
;
await
dispatch
(
{
type
:
"
LOAD_SOURCE_TEXT
"
sourceId
:
source
.
id
epoch
[
PROMISE
]
:
loadSource
(
getState
(
)
source
{
sourceMaps
client
getState
}
)
}
)
;
const
newSource
=
getSource
(
getState
(
)
source
.
id
)
;
if
(
!
newSource
)
{
return
;
}
const
content
=
getSourceContent
(
getState
(
)
newSource
.
id
)
;
if
(
!
newSource
.
isWasm
&
&
content
)
{
parser
.
setSource
(
newSource
.
id
isFulfilled
(
content
)
?
content
.
value
:
{
type
:
"
text
"
value
:
"
"
contentType
:
undefined
}
)
;
const
breakpoints
=
getBreakpointsForSource
(
getState
(
)
source
.
id
)
;
for
(
const
{
location
options
disabled
}
of
breakpoints
)
{
await
dispatch
(
addBreakpoint
(
cx
location
options
disabled
)
)
;
}
}
}
export
function
loadSourceById
(
cx
sourceId
)
{
return
(
{
getState
dispatch
}
)
=
>
{
const
source
=
getSourceFromId
(
getState
(
)
sourceId
)
;
return
dispatch
(
loadSourceText
(
{
cx
source
}
)
)
;
}
;
}
export
const
loadSourceText
=
memoizeableAction
(
"
loadSourceText
"
{
getValue
:
(
{
source
}
{
getState
}
)
=
>
{
source
=
source
?
getSource
(
getState
(
)
source
.
id
)
:
null
;
if
(
!
source
)
{
return
null
;
}
const
{
content
}
=
getSourceWithContent
(
getState
(
)
source
.
id
)
;
if
(
!
content
|
|
content
.
state
=
=
=
"
pending
"
)
{
return
content
;
}
return
fulfilled
(
source
)
;
}
createKey
:
(
{
source
}
{
getState
}
)
=
>
{
const
epoch
=
getSourcesEpoch
(
getState
(
)
)
;
return
{
epoch
}
:
{
source
.
id
}
;
}
action
:
(
{
cx
source
}
thunkArgs
)
=
>
loadSourceTextPromise
(
cx
source
thunkArgs
)
}
)
;
