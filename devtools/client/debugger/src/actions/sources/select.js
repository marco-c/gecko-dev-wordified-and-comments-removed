import
{
isOriginalId
}
from
"
devtools
-
source
-
map
"
;
import
{
getSourceFromId
getSourceWithContent
}
from
"
.
.
/
.
.
/
reducers
/
sources
"
;
import
{
getSourcesForTabs
}
from
"
.
.
/
.
.
/
reducers
/
tabs
"
;
import
{
setOutOfScopeLocations
}
from
"
.
.
/
ast
"
;
import
{
setSymbols
}
from
"
.
/
symbols
"
;
import
{
closeActiveSearch
updateActiveFileSearch
}
from
"
.
.
/
ui
"
;
import
{
isFulfilled
}
from
"
.
.
/
.
.
/
utils
/
async
-
value
"
;
import
{
togglePrettyPrint
}
from
"
.
/
prettyPrint
"
;
import
{
addTab
closeTab
}
from
"
.
.
/
tabs
"
;
import
{
loadSourceText
}
from
"
.
/
loadSourceText
"
;
import
{
prefs
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
{
shouldPrettyPrint
isMinified
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
createLocation
}
from
"
.
.
/
.
.
/
utils
/
location
"
;
import
{
mapLocation
}
from
"
.
.
/
.
.
/
utils
/
source
-
maps
"
;
import
{
getSource
getSourceByURL
getPrettySource
getActiveSearch
getSelectedLocation
getSelectedSource
}
from
"
.
.
/
.
.
/
selectors
"
;
import
type
{
SourceLocation
PartialPosition
Source
Context
}
from
"
.
.
/
.
.
/
types
"
;
import
type
{
ThunkArgs
}
from
"
.
.
/
types
"
;
export
const
setSelectedLocation
=
(
cx
:
Context
source
:
Source
location
:
SourceLocation
)
=
>
(
{
type
:
"
SET_SELECTED_LOCATION
"
cx
source
location
}
)
;
export
const
setPendingSelectedLocation
=
(
cx
:
Context
url
:
string
options
:
Object
)
=
>
(
{
type
:
"
SET_PENDING_SELECTED_LOCATION
"
cx
url
:
url
line
:
options
.
location
?
options
.
location
.
line
:
null
}
)
;
export
const
clearSelectedLocation
=
(
cx
:
Context
)
=
>
(
{
type
:
"
CLEAR_SELECTED_LOCATION
"
cx
}
)
;
export
function
selectSourceURL
(
cx
:
Context
url
:
string
options
:
PartialPosition
=
{
line
:
1
}
)
{
return
async
(
{
dispatch
getState
sourceMaps
}
:
ThunkArgs
)
=
>
{
const
source
=
getSourceByURL
(
getState
(
)
url
)
;
if
(
!
source
)
{
return
dispatch
(
setPendingSelectedLocation
(
cx
url
options
)
)
;
}
const
sourceId
=
source
.
id
;
const
location
=
createLocation
(
{
.
.
.
options
sourceId
}
)
;
return
dispatch
(
selectLocation
(
cx
location
)
)
;
}
;
}
export
function
selectSource
(
cx
:
Context
sourceId
:
string
options
:
PartialPosition
=
{
line
:
1
}
)
{
return
async
(
{
dispatch
}
:
ThunkArgs
)
=
>
{
const
location
=
createLocation
(
{
.
.
.
options
sourceId
}
)
;
return
dispatch
(
selectSpecificLocation
(
cx
location
)
)
;
}
;
}
export
function
selectLocation
(
cx
:
Context
location
:
SourceLocation
{
keepContext
=
true
}
:
Object
=
{
}
)
{
return
async
(
{
dispatch
getState
sourceMaps
client
}
:
ThunkArgs
)
=
>
{
const
currentSource
=
getSelectedSource
(
getState
(
)
)
;
if
(
!
client
)
{
return
;
}
let
source
=
getSource
(
getState
(
)
location
.
sourceId
)
;
if
(
!
source
)
{
return
dispatch
(
clearSelectedLocation
(
cx
)
)
;
}
const
activeSearch
=
getActiveSearch
(
getState
(
)
)
;
if
(
activeSearch
&
&
activeSearch
!
=
=
"
file
"
)
{
dispatch
(
closeActiveSearch
(
)
)
;
}
const
selectedSource
=
getSelectedSource
(
getState
(
)
)
;
if
(
keepContext
&
&
selectedSource
&
&
isOriginalId
(
selectedSource
.
id
)
!
=
isOriginalId
(
location
.
sourceId
)
)
{
location
=
await
mapLocation
(
getState
(
)
sourceMaps
location
)
;
source
=
getSourceFromId
(
getState
(
)
location
.
sourceId
)
;
}
const
tabSources
=
getSourcesForTabs
(
getState
(
)
)
;
if
(
!
tabSources
.
includes
(
source
)
)
{
dispatch
(
addTab
(
source
)
)
;
}
dispatch
(
setSelectedLocation
(
cx
source
location
)
)
;
await
dispatch
(
loadSourceText
(
{
cx
source
}
)
)
;
const
loadedSource
=
getSource
(
getState
(
)
source
.
id
)
;
if
(
!
loadedSource
)
{
return
;
}
const
sourceWithContent
=
getSourceWithContent
(
getState
(
)
source
.
id
)
;
const
sourceContent
=
sourceWithContent
.
content
&
&
isFulfilled
(
sourceWithContent
.
content
)
?
sourceWithContent
.
content
.
value
:
null
;
if
(
keepContext
&
&
prefs
.
autoPrettyPrint
&
&
!
getPrettySource
(
getState
(
)
loadedSource
.
id
)
&
&
shouldPrettyPrint
(
loadedSource
sourceContent
|
|
{
type
:
"
text
"
value
:
"
"
contentType
:
undefined
}
)
&
&
isMinified
(
sourceWithContent
)
)
{
await
dispatch
(
togglePrettyPrint
(
cx
loadedSource
.
id
)
)
;
dispatch
(
closeTab
(
cx
loadedSource
)
)
;
}
dispatch
(
setSymbols
(
{
cx
source
:
loadedSource
}
)
)
;
dispatch
(
setOutOfScopeLocations
(
cx
)
)
;
const
newSource
=
getSelectedSource
(
getState
(
)
)
;
if
(
currentSource
&
&
currentSource
!
=
=
newSource
)
{
dispatch
(
updateActiveFileSearch
(
cx
)
)
;
}
}
;
}
export
function
selectSpecificLocation
(
cx
:
Context
location
:
SourceLocation
)
{
return
selectLocation
(
cx
location
{
keepContext
:
false
}
)
;
}
export
function
jumpToMappedLocation
(
cx
:
Context
location
:
SourceLocation
)
{
return
async
function
(
{
dispatch
getState
client
sourceMaps
}
:
ThunkArgs
)
{
if
(
!
client
)
{
return
;
}
const
pairedLocation
=
await
mapLocation
(
getState
(
)
sourceMaps
location
)
;
return
dispatch
(
selectSpecificLocation
(
cx
{
.
.
.
pairedLocation
}
)
)
;
}
;
}
export
function
jumpToMappedSelectedLocation
(
cx
:
Context
)
{
return
async
function
(
{
dispatch
getState
}
:
ThunkArgs
)
{
const
location
=
getSelectedLocation
(
getState
(
)
)
;
if
(
!
location
)
{
return
;
}
await
dispatch
(
jumpToMappedLocation
(
cx
location
)
)
;
}
;
}
