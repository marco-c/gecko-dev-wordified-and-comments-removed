import
{
setSymbols
}
from
"
.
/
symbols
"
;
import
{
setInScopeLines
}
from
"
.
.
/
ast
/
index
"
;
import
{
prettyPrintAndSelectSource
}
from
"
.
/
prettyPrint
"
;
import
{
addTab
closeTab
}
from
"
.
.
/
tabs
"
;
import
{
loadSourceText
}
from
"
.
/
loadSourceText
"
;
import
{
setBreakableLines
}
from
"
.
/
breakableLines
"
;
import
{
prefs
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
{
isMinified
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
createLocation
}
from
"
.
.
/
.
.
/
utils
/
location
"
;
import
{
getRelatedMapLocation
getOriginalLocation
}
from
"
.
.
/
.
.
/
utils
/
source
-
maps
"
;
import
{
getSource
getFirstSourceActorForGeneratedSource
getSourceByURL
getPrettySource
getSelectedLocation
getShouldSelectOriginalLocation
canPrettyPrintSource
getSourceTextContent
tabExists
hasSource
hasSourceActor
hasPrettyTab
isSourceActorWithSourceMap
}
from
"
.
.
/
.
.
/
selectors
/
index
"
;
export
const
setSelectedLocation
=
(
location
shouldSelectOriginalLocation
shouldHighlightSelectedLocation
)
=
>
(
{
type
:
"
SET_SELECTED_LOCATION
"
location
shouldSelectOriginalLocation
shouldHighlightSelectedLocation
}
)
;
export
const
setPendingSelectedLocation
=
(
url
options
)
=
>
(
{
type
:
"
SET_PENDING_SELECTED_LOCATION
"
url
line
:
options
?
.
line
column
:
options
?
.
column
}
)
;
export
const
clearSelectedLocation
=
(
)
=
>
(
{
type
:
"
CLEAR_SELECTED_LOCATION
"
}
)
;
export
const
setDefaultSelectedLocation
=
shouldSelectOriginalLocation
=
>
(
{
type
:
"
SET_DEFAULT_SELECTED_LOCATION
"
shouldSelectOriginalLocation
}
)
;
export
function
selectSourceURL
(
url
options
)
{
return
async
(
{
dispatch
getState
}
)
=
>
{
const
source
=
getSourceByURL
(
getState
(
)
url
)
;
if
(
!
source
)
{
return
dispatch
(
setPendingSelectedLocation
(
url
options
)
)
;
}
const
location
=
createLocation
(
{
.
.
.
options
source
}
)
;
return
dispatch
(
selectLocation
(
location
)
)
;
}
;
}
export
function
selectSource
(
source
sourceActor
)
{
return
async
(
{
dispatch
}
)
=
>
{
const
location
=
source
?
createLocation
(
{
source
sourceActor
}
)
:
{
}
;
return
dispatch
(
selectSpecificLocation
(
location
)
)
;
}
;
}
async
function
mayBeSelectMappedSource
(
location
keepContext
thunkArgs
)
{
const
{
getState
dispatch
}
=
thunkArgs
;
let
shouldSelectOriginalLocation
=
getShouldSelectOriginalLocation
(
getState
(
)
)
;
if
(
keepContext
)
{
if
(
!
location
.
source
.
isOriginal
&
&
shouldSelectOriginalLocation
&
&
hasPrettyTab
(
getState
(
)
location
.
source
)
)
{
await
dispatch
(
prettyPrintAndSelectSource
(
location
.
source
)
)
;
}
if
(
shouldSelectOriginalLocation
!
=
location
.
source
.
isOriginal
)
{
if
(
location
.
source
.
isOriginal
|
|
isSourceActorWithSourceMap
(
getState
(
)
location
.
sourceActor
.
id
)
)
{
location
=
await
getRelatedMapLocation
(
location
thunkArgs
)
;
}
}
}
else
if
(
location
.
source
.
isOriginal
|
|
isSourceActorWithSourceMap
(
getState
(
)
location
.
sourceActor
.
id
)
)
{
shouldSelectOriginalLocation
=
location
.
source
.
isOriginal
;
}
return
{
shouldSelectOriginalLocation
newLocation
:
location
}
;
}
export
function
selectLocation
(
location
{
keepContext
=
true
highlight
=
true
}
=
{
}
)
{
return
async
thunkArgs
=
>
{
const
{
dispatch
getState
client
}
=
thunkArgs
;
if
(
!
client
)
{
return
;
}
let
source
=
location
.
source
;
if
(
!
source
)
{
dispatch
(
clearSelectedLocation
(
)
)
;
return
;
}
let
sourceActor
=
location
.
sourceActor
;
if
(
!
sourceActor
)
{
sourceActor
=
getFirstSourceActorForGeneratedSource
(
getState
(
)
source
.
id
)
;
location
=
createLocation
(
{
.
.
.
location
sourceActor
}
)
;
}
const
lastSelectedLocation
=
getSelectedLocation
(
getState
(
)
)
;
const
{
shouldSelectOriginalLocation
newLocation
}
=
await
mayBeSelectMappedSource
(
location
keepContext
thunkArgs
)
;
if
(
getSelectedLocation
(
getState
(
)
)
!
=
lastSelectedLocation
)
{
return
;
}
location
=
newLocation
;
source
=
location
.
source
;
sourceActor
=
location
.
sourceActor
;
if
(
!
sourceActor
)
{
sourceActor
=
getFirstSourceActorForGeneratedSource
(
getState
(
)
source
.
id
)
;
location
=
createLocation
(
{
.
.
.
location
sourceActor
}
)
;
}
if
(
!
tabExists
(
getState
(
)
source
.
id
)
)
{
dispatch
(
addTab
(
source
sourceActor
)
)
;
}
dispatch
(
setSelectedLocation
(
location
shouldSelectOriginalLocation
highlight
)
)
;
await
dispatch
(
loadSourceText
(
source
sourceActor
)
)
;
if
(
getSelectedLocation
(
getState
(
)
)
!
=
location
)
{
return
;
}
await
dispatch
(
setBreakableLines
(
location
)
)
;
if
(
getSelectedLocation
(
getState
(
)
)
!
=
location
)
{
return
;
}
const
loadedSource
=
getSource
(
getState
(
)
source
.
id
)
;
if
(
!
loadedSource
)
{
return
;
}
const
sourceTextContent
=
getSourceTextContent
(
getState
(
)
location
)
;
if
(
keepContext
&
&
prefs
.
autoPrettyPrint
&
&
!
getPrettySource
(
getState
(
)
loadedSource
.
id
)
&
&
canPrettyPrintSource
(
getState
(
)
location
)
&
&
isMinified
(
source
sourceTextContent
)
)
{
await
dispatch
(
prettyPrintAndSelectSource
(
loadedSource
)
)
;
dispatch
(
closeTab
(
loadedSource
)
)
;
}
await
dispatch
(
setSymbols
(
location
)
)
;
if
(
getSelectedLocation
(
getState
(
)
)
!
=
location
)
{
return
;
}
dispatch
(
setInScopeLines
(
)
)
;
if
(
!
location
.
source
.
isOriginal
&
&
isSourceActorWithSourceMap
(
getState
(
)
sourceActor
.
id
)
)
{
let
originalLocation
=
await
getOriginalLocation
(
location
thunkArgs
{
looseSearch
:
true
}
)
;
if
(
originalLocation
.
source
=
=
=
location
.
source
)
{
originalLocation
=
null
;
}
dispatch
(
{
type
:
"
SET_ORIGINAL_SELECTED_LOCATION
"
location
originalLocation
}
)
;
}
}
;
}
export
function
selectSpecificLocation
(
location
)
{
return
selectLocation
(
location
{
keepContext
:
false
}
)
;
}
export
function
selectSpecificLocationOrSameUrl
(
location
)
{
return
async
(
{
dispatch
getState
}
)
=
>
{
if
(
!
hasSource
(
getState
(
)
location
.
source
.
id
)
)
{
if
(
!
location
.
source
.
url
)
{
return
false
;
}
const
source
=
getSourceByURL
(
getState
(
)
location
.
source
.
url
)
;
if
(
!
source
)
{
return
false
;
}
const
sourceActor
=
getFirstSourceActorForGeneratedSource
(
getState
(
)
location
.
source
.
id
)
;
location
=
createLocation
(
{
.
.
.
location
source
sourceActor
}
)
;
}
else
if
(
!
hasSourceActor
(
getState
(
)
location
.
sourceActor
.
id
)
)
{
const
sourceActor
=
getFirstSourceActorForGeneratedSource
(
getState
(
)
location
.
source
.
id
)
;
location
=
createLocation
(
{
.
.
.
location
sourceActor
}
)
;
}
await
dispatch
(
selectSpecificLocation
(
location
)
)
;
return
true
;
}
;
}
export
function
jumpToMappedLocation
(
location
)
{
return
async
function
(
thunkArgs
)
{
const
{
client
dispatch
}
=
thunkArgs
;
if
(
!
client
)
{
return
null
;
}
const
pairedLocation
=
await
getRelatedMapLocation
(
location
thunkArgs
)
;
if
(
pairedLocation
=
=
location
)
{
return
null
;
}
return
dispatch
(
selectSpecificLocation
(
pairedLocation
)
)
;
}
;
}
export
function
jumpToMappedSelectedLocation
(
)
{
return
async
function
(
{
dispatch
getState
}
)
{
const
location
=
getSelectedLocation
(
getState
(
)
)
;
if
(
!
location
)
{
return
;
}
await
dispatch
(
jumpToMappedLocation
(
location
)
)
;
}
;
}
