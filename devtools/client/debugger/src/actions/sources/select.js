import
{
isOriginalId
}
from
"
devtools
/
client
/
shared
/
source
-
map
-
loader
/
index
"
;
import
{
setSymbols
}
from
"
.
/
symbols
"
;
import
{
setInScopeLines
}
from
"
.
.
/
ast
"
;
import
{
togglePrettyPrint
}
from
"
.
/
prettyPrint
"
;
import
{
addTab
closeTab
}
from
"
.
.
/
tabs
"
;
import
{
loadSourceText
}
from
"
.
/
loadSourceText
"
;
import
{
mapDisplayNames
}
from
"
.
.
/
pause
"
;
import
{
setBreakableLines
}
from
"
.
"
;
import
{
prefs
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
{
isMinified
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
createLocation
}
from
"
.
.
/
.
.
/
utils
/
location
"
;
import
{
getRelatedMapLocation
}
from
"
.
.
/
.
.
/
utils
/
source
-
maps
"
;
import
{
getSource
getFirstSourceActorForGeneratedSource
getSourceByURL
getPrettySource
getSelectedLocation
getSelectedSource
canPrettyPrintSource
getIsCurrentThreadPaused
getSourceTextContent
tabExists
}
from
"
.
.
/
.
.
/
selectors
"
;
export
const
setSelectedLocation
=
(
cx
source
location
)
=
>
(
{
type
:
"
SET_SELECTED_LOCATION
"
cx
source
location
}
)
;
export
const
setPendingSelectedLocation
=
(
cx
url
options
)
=
>
(
{
type
:
"
SET_PENDING_SELECTED_LOCATION
"
cx
url
line
:
options
?
.
line
column
:
options
?
.
column
}
)
;
export
const
clearSelectedLocation
=
cx
=
>
(
{
type
:
"
CLEAR_SELECTED_LOCATION
"
cx
}
)
;
export
function
selectSourceURL
(
cx
url
options
)
{
return
async
(
{
dispatch
getState
}
)
=
>
{
const
source
=
getSourceByURL
(
getState
(
)
url
)
;
if
(
!
source
)
{
return
dispatch
(
setPendingSelectedLocation
(
cx
url
options
)
)
;
}
const
location
=
createLocation
(
{
.
.
.
options
source
}
)
;
return
dispatch
(
selectLocation
(
cx
location
)
)
;
}
;
}
export
function
selectSource
(
cx
source
sourceActor
)
{
return
async
(
{
dispatch
}
)
=
>
{
const
location
=
source
?
createLocation
(
{
source
sourceActor
}
)
:
{
}
;
return
dispatch
(
selectSpecificLocation
(
cx
location
)
)
;
}
;
}
export
function
selectLocation
(
cx
location
{
keepContext
=
true
}
=
{
}
)
{
return
async
thunkArgs
=
>
{
const
{
dispatch
getState
client
}
=
thunkArgs
;
if
(
!
client
)
{
return
;
}
let
source
=
location
.
source
;
if
(
!
source
)
{
dispatch
(
clearSelectedLocation
(
cx
)
)
;
return
;
}
const
selectedSource
=
getSelectedSource
(
getState
(
)
)
;
if
(
keepContext
&
&
selectedSource
&
&
selectedSource
.
isOriginal
!
=
isOriginalId
(
location
.
sourceId
)
)
{
location
=
await
getRelatedMapLocation
(
location
thunkArgs
)
;
source
=
location
.
source
;
}
let
sourceActor
=
location
.
sourceActor
;
if
(
!
sourceActor
)
{
sourceActor
=
getFirstSourceActorForGeneratedSource
(
getState
(
)
source
.
id
)
;
location
=
createLocation
(
{
.
.
.
location
sourceActor
}
)
;
}
if
(
!
tabExists
(
getState
(
)
source
.
id
)
)
{
dispatch
(
addTab
(
source
sourceActor
)
)
;
}
dispatch
(
setSelectedLocation
(
cx
source
location
)
)
;
await
dispatch
(
loadSourceText
(
cx
source
sourceActor
)
)
;
await
dispatch
(
setBreakableLines
(
cx
source
sourceActor
)
)
;
const
loadedSource
=
getSource
(
getState
(
)
source
.
id
)
;
if
(
!
loadedSource
)
{
return
;
}
const
sourceTextContent
=
getSourceTextContent
(
getState
(
)
location
)
;
if
(
keepContext
&
&
prefs
.
autoPrettyPrint
&
&
!
getPrettySource
(
getState
(
)
loadedSource
.
id
)
&
&
canPrettyPrintSource
(
getState
(
)
location
)
&
&
isMinified
(
source
sourceTextContent
)
)
{
await
dispatch
(
togglePrettyPrint
(
cx
loadedSource
.
id
)
)
;
dispatch
(
closeTab
(
cx
loadedSource
)
)
;
}
await
dispatch
(
setSymbols
(
{
cx
location
}
)
)
;
dispatch
(
setInScopeLines
(
cx
)
)
;
if
(
getIsCurrentThreadPaused
(
getState
(
)
)
)
{
await
dispatch
(
mapDisplayNames
(
cx
)
)
;
}
}
;
}
export
function
selectSpecificLocation
(
cx
location
)
{
return
selectLocation
(
cx
location
{
keepContext
:
false
}
)
;
}
export
function
jumpToMappedLocation
(
cx
location
)
{
return
async
function
(
thunkArgs
)
{
const
{
client
dispatch
}
=
thunkArgs
;
if
(
!
client
)
{
return
null
;
}
const
pairedLocation
=
await
getRelatedMapLocation
(
location
thunkArgs
)
;
return
dispatch
(
selectSpecificLocation
(
cx
pairedLocation
)
)
;
}
;
}
export
function
jumpToMappedSelectedLocation
(
cx
)
{
return
async
function
(
{
dispatch
getState
}
)
{
const
location
=
getSelectedLocation
(
getState
(
)
)
;
if
(
!
location
)
{
return
;
}
await
dispatch
(
jumpToMappedLocation
(
cx
location
)
)
;
}
;
}
