import
{
getBreakableLines
getSourceActorBreakableLines
getSourceActorsForSource
}
from
"
.
.
/
.
.
/
selectors
/
index
"
;
import
{
setBreakpointPositions
}
from
"
.
.
/
breakpoints
/
breakpointPositions
"
;
function
calculateBreakableLines
(
positions
)
{
const
lines
=
[
]
;
for
(
const
line
in
positions
)
{
if
(
positions
[
line
]
.
length
)
{
lines
.
push
(
Number
(
line
)
)
;
}
}
return
lines
;
}
export
function
setBreakableLines
(
location
)
{
return
async
(
{
getState
dispatch
client
}
)
=
>
{
if
(
location
.
source
.
isOriginal
)
{
let
promise
=
getBreakableLines
(
getState
(
)
location
.
source
.
id
)
;
if
(
promise
)
{
return
promise
;
}
promise
=
(
async
(
)
=
>
{
const
positions
=
await
dispatch
(
setBreakpointPositions
(
location
)
)
;
return
calculateBreakableLines
(
positions
)
;
}
)
(
)
;
dispatch
(
{
type
:
"
SET_ORIGINAL_BREAKABLE_LINES
"
source
:
location
.
source
promise
}
)
;
const
breakableLines
=
await
promise
;
dispatch
(
{
type
:
"
SET_ORIGINAL_BREAKABLE_LINES
"
source
:
location
.
source
breakableLines
}
)
;
}
else
if
(
location
.
source
.
isHTML
)
{
const
sourceActors
=
getSourceActorsForSource
(
getState
(
)
location
.
source
.
id
)
;
if
(
!
sourceActors
)
{
return
null
;
}
for
(
const
sourceActor
of
sourceActors
)
{
let
promise
=
getSourceActorBreakableLines
(
getState
(
)
sourceActor
.
id
)
;
if
(
promise
)
{
await
promise
;
}
else
{
promise
=
client
.
getSourceActorBreakableLines
(
sourceActor
)
;
dispatch
(
{
type
:
"
SET_SOURCE_ACTOR_BREAKABLE_LINES
"
sourceActor
promise
}
)
;
const
breakableLines
=
await
promise
;
dispatch
(
{
type
:
"
SET_SOURCE_ACTOR_BREAKABLE_LINES
"
sourceActor
breakableLines
}
)
;
}
}
}
else
{
let
promise
=
getSourceActorBreakableLines
(
getState
(
)
location
.
sourceActor
.
id
)
;
if
(
promise
)
{
return
promise
;
}
promise
=
client
.
getSourceActorBreakableLines
(
location
.
sourceActor
)
;
dispatch
(
{
type
:
"
SET_SOURCE_ACTOR_BREAKABLE_LINES
"
sourceActor
:
location
.
sourceActor
promise
}
)
;
const
breakableLines
=
await
promise
;
dispatch
(
{
type
:
"
SET_SOURCE_ACTOR_BREAKABLE_LINES
"
sourceActor
:
location
.
sourceActor
breakableLines
}
)
;
}
return
null
;
}
;
}
