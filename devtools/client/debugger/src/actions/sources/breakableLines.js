import
{
getBreakableLines
getSourceActorBreakableLines
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
setBreakpointPositions
}
from
"
.
.
/
breakpoints
/
breakpointPositions
"
;
function
calculateBreakableLines
(
positions
)
{
const
lines
=
[
]
;
for
(
const
line
in
positions
)
{
if
(
positions
[
line
]
.
length
)
{
lines
.
push
(
Number
(
line
)
)
;
}
}
return
lines
;
}
export
function
setBreakableLines
(
location
)
{
return
async
(
{
getState
dispatch
client
}
)
=
>
{
let
breakableLines
;
if
(
location
.
source
.
isOriginal
)
{
const
positions
=
await
dispatch
(
setBreakpointPositions
(
location
)
)
;
breakableLines
=
calculateBreakableLines
(
positions
)
;
const
existingBreakableLines
=
getBreakableLines
(
getState
(
)
location
.
source
.
id
)
;
if
(
existingBreakableLines
)
{
breakableLines
=
[
.
.
.
new
Set
(
[
.
.
.
existingBreakableLines
.
.
.
breakableLines
]
)
]
;
}
dispatch
(
{
type
:
"
SET_ORIGINAL_BREAKABLE_LINES
"
source
:
location
.
source
breakableLines
}
)
;
}
else
{
breakableLines
=
getSourceActorBreakableLines
(
getState
(
)
location
.
sourceActor
.
id
)
;
if
(
breakableLines
)
{
return
;
}
breakableLines
=
await
client
.
getSourceActorBreakableLines
(
location
.
sourceActor
)
;
dispatch
(
{
type
:
"
SET_SOURCE_ACTOR_BREAKABLE_LINES
"
sourceActor
:
location
.
sourceActor
breakableLines
}
)
;
}
}
;
}
