import
{
getSymbols
getSourceActorForSymbols
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
PROMISE
}
from
"
.
.
/
utils
/
middleware
/
promise
"
;
import
{
loadSourceText
}
from
"
.
/
loadSourceText
"
;
import
{
memoizeableAction
}
from
"
.
.
/
.
.
/
utils
/
memoizableAction
"
;
import
{
fulfilled
}
from
"
.
.
/
.
.
/
utils
/
async
-
value
"
;
async
function
doSetSymbols
(
cx
source
sourceActor
{
dispatch
getState
parser
}
)
{
const
sourceId
=
source
.
id
;
await
dispatch
(
loadSourceText
(
{
cx
source
sourceActor
}
)
)
;
await
dispatch
(
{
type
:
"
SET_SYMBOLS
"
cx
sourceId
sourceActorId
:
sourceActor
?
sourceActor
.
actor
:
null
[
PROMISE
]
:
parser
.
getSymbols
(
sourceId
)
}
)
;
}
export
const
setSymbols
=
memoizeableAction
(
"
setSymbols
"
{
getValue
:
(
{
source
sourceActor
}
{
getState
}
)
=
>
{
if
(
source
.
isWasm
)
{
return
fulfilled
(
null
)
;
}
const
symbols
=
getSymbols
(
getState
(
)
source
)
;
if
(
!
symbols
)
{
return
null
;
}
if
(
sourceActor
&
&
getSourceActorForSymbols
(
getState
(
)
source
)
!
=
=
sourceActor
.
actor
)
{
return
null
;
}
return
fulfilled
(
symbols
)
;
}
createKey
:
(
{
source
}
)
=
>
source
.
id
action
:
(
{
cx
source
sourceActor
}
thunkArgs
)
=
>
doSetSymbols
(
cx
source
sourceActor
thunkArgs
)
}
)
;
