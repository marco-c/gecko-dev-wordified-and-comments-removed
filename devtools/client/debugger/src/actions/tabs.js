import
{
removeDocument
}
from
"
.
.
/
utils
/
editor
/
index
"
;
import
{
selectSource
}
from
"
.
/
sources
/
index
"
;
import
{
getSelectedLocation
getSourcesForTabs
}
from
"
.
.
/
selectors
/
index
"
;
export
function
addTab
(
source
sourceActor
)
{
return
{
type
:
"
ADD_TAB
"
source
sourceActor
}
;
}
export
function
moveTab
(
url
tabIndex
)
{
return
{
type
:
"
MOVE_TAB
"
url
tabIndex
}
;
}
export
function
moveTabBySourceId
(
sourceId
tabIndex
)
{
return
{
type
:
"
MOVE_TAB_BY_SOURCE_ID
"
sourceId
tabIndex
}
;
}
export
function
closeTab
(
source
)
{
return
closeTabs
(
[
source
]
)
;
}
export
function
closeTabs
(
sources
)
{
return
(
{
dispatch
getState
}
)
=
>
{
if
(
!
sources
.
length
)
{
return
;
}
for
(
const
source
of
sources
)
{
removeDocument
(
source
.
id
)
;
}
const
newSourceToSelect
=
getNewSourceToSelect
(
getState
(
)
sources
)
;
dispatch
(
{
type
:
"
CLOSE_TABS
"
sources
}
)
;
dispatch
(
selectSource
(
newSourceToSelect
)
)
;
}
;
}
function
getNewSourceToSelect
(
state
closedTabsSources
)
{
const
selectedLocation
=
getSelectedLocation
(
state
)
;
if
(
!
selectedLocation
)
{
return
null
;
}
if
(
!
closedTabsSources
.
includes
(
selectedLocation
.
source
)
)
{
return
selectedLocation
.
source
;
}
const
tabsSources
=
getSourcesForTabs
(
state
)
;
const
lastRemovedTabSource
=
closedTabsSources
.
at
(
-
1
)
;
const
lastRemovedTabIndex
=
tabsSources
.
indexOf
(
lastRemovedTabSource
)
;
if
(
lastRemovedTabIndex
=
=
-
1
)
{
return
null
;
}
if
(
lastRemovedTabIndex
+
1
<
tabsSources
.
length
)
{
return
tabsSources
[
lastRemovedTabIndex
+
1
]
;
}
const
firstRemovedTabIndex
=
lastRemovedTabIndex
-
(
closedTabsSources
.
length
-
1
)
;
if
(
firstRemovedTabIndex
>
0
)
{
return
tabsSources
[
firstRemovedTabIndex
-
1
]
;
}
return
null
;
}
