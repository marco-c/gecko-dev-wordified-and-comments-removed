import
{
selectSource
}
from
"
.
/
sources
/
index
"
;
import
{
getSelectedLocation
getOpenedSources
}
from
"
.
.
/
selectors
/
index
"
;
export
function
addTab
(
source
)
{
return
{
type
:
"
ADD_TAB
"
source
}
;
}
export
function
moveTab
(
url
tabIndex
)
{
return
{
type
:
"
MOVE_TAB
"
url
tabIndex
}
;
}
export
function
moveTabBySourceId
(
sourceId
tabIndex
)
{
return
{
type
:
"
MOVE_TAB_BY_SOURCE_ID
"
sourceId
tabIndex
}
;
}
export
function
closeTabForSource
(
source
)
{
return
(
{
dispatch
}
)
=
>
{
dispatch
(
closeTabsForSources
(
[
source
]
)
)
;
}
;
}
export
function
closeTabsForSources
(
sources
)
{
return
(
{
dispatch
getState
}
)
=
>
{
if
(
!
sources
.
length
)
{
return
;
}
const
newSourceToSelect
=
getNewSourceToSelect
(
getState
(
)
sources
)
;
dispatch
(
{
type
:
"
CLOSE_TABS_FOR_SOURCES
"
sources
}
)
;
dispatch
(
selectSource
(
newSourceToSelect
)
)
;
}
;
}
function
getNewSourceToSelect
(
state
closedSources
)
{
const
selectedLocation
=
getSelectedLocation
(
state
)
;
if
(
!
selectedLocation
)
{
return
null
;
}
let
selectedSource
=
selectedLocation
.
source
;
if
(
selectedSource
.
isPrettyPrinted
)
{
selectedSource
=
selectedSource
.
generatedSource
;
}
if
(
!
closedSources
.
includes
(
selectedSource
)
)
{
return
selectedSource
;
}
const
openedSources
=
getOpenedSources
(
state
)
;
const
selectedSourceIndex
=
openedSources
.
indexOf
(
selectedSource
)
;
for
(
let
index
=
selectedSourceIndex
+
1
;
index
<
openedSources
.
length
;
index
+
+
)
{
const
source
=
openedSources
[
index
]
;
if
(
!
closedSources
.
includes
(
source
)
)
{
return
source
;
}
}
for
(
let
index
=
selectedSourceIndex
-
1
;
index
>
=
0
;
index
-
-
)
{
const
source
=
openedSources
[
index
]
;
if
(
!
closedSources
.
includes
(
source
)
)
{
return
source
;
}
}
return
null
;
}
