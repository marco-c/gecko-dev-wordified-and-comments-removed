import
{
createStore
applyMiddleware
type
StoreCreator
}
from
"
redux
"
;
import
{
waitUntilService
}
from
"
.
/
middleware
/
wait
-
service
"
;
import
{
log
}
from
"
.
/
middleware
/
log
"
;
import
{
promise
}
from
"
.
/
middleware
/
promise
"
;
import
{
thunk
}
from
"
.
/
middleware
/
thunk
"
;
import
{
timing
}
from
"
.
/
middleware
/
timing
"
;
import
{
context
}
from
"
.
/
middleware
/
context
"
;
type
ReduxStoreOptions
=
{
makeThunkArgs
?
:
Function
history
?
:
Array
<
Object
>
middleware
?
:
Function
[
]
log
?
:
boolean
timing
?
:
boolean
}
;
const
configureStore
=
(
opts
:
ReduxStoreOptions
=
{
}
)
:
StoreCreator
<
any
any
any
>
=
>
{
const
middleware
:
any
=
[
thunk
(
opts
.
makeThunkArgs
)
context
promise
waitUntilService
]
;
if
(
opts
.
middleware
)
{
opts
.
middleware
.
forEach
(
fn
=
>
middleware
.
push
(
fn
)
)
;
}
if
(
opts
.
log
)
{
middleware
.
push
(
log
)
;
}
if
(
opts
.
timing
)
{
middleware
.
push
(
timing
)
;
}
const
devtoolsExt
=
typeof
window
=
=
=
"
object
"
&
&
window
.
devToolsExtension
?
window
.
devToolsExtension
(
)
:
f
=
>
f
;
return
applyMiddleware
(
.
.
.
middleware
)
(
devtoolsExt
(
createStore
)
)
;
}
;
export
default
configureStore
;
