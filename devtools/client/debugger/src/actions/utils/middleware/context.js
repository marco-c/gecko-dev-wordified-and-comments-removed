import
{
validateNavigateContext
validateContext
validateSelectedFrame
validateBreakpoint
validateSource
validateSourceActor
validateThreadFrames
validateFrame
}
from
"
.
.
/
.
.
/
.
.
/
utils
/
context
"
;
function
validateActionContext
(
getState
action
)
{
if
(
action
.
type
=
=
"
COMMAND
"
&
&
action
.
status
=
=
"
done
"
)
{
validateNavigateContext
(
getState
(
)
action
.
cx
)
;
return
;
}
validateContext
(
getState
(
)
action
.
cx
)
;
}
function
context
(
{
dispatch
getState
}
)
{
return
next
=
>
action
=
>
{
if
(
"
cx
"
in
action
)
{
validateActionContext
(
getState
action
)
;
}
if
(
"
source
"
in
action
)
{
validateSource
(
getState
(
)
action
.
source
)
;
}
if
(
"
sourceActor
"
in
action
)
{
validateSourceActor
(
getState
(
)
action
.
sourceActor
)
;
}
if
(
"
generatedSourceActor
"
in
action
)
{
validateSourceActor
(
getState
(
)
action
.
generatedSourceActor
)
;
}
if
(
"
breakpoint
"
in
action
)
{
validateBreakpoint
(
getState
(
)
action
.
breakpoint
)
;
}
if
(
action
.
selectedFrame
)
{
validateSelectedFrame
(
getState
(
)
action
.
selectedFrame
)
;
}
if
(
"
thread
"
in
action
&
&
"
frames
"
in
action
)
{
validateThreadFrames
(
getState
(
)
action
.
thread
action
.
frames
)
;
}
if
(
"
frame
"
in
action
)
{
validateFrame
(
getState
(
)
action
.
frame
)
;
}
return
next
(
action
)
;
}
;
}
export
{
context
}
;
