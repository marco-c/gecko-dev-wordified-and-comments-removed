import
{
isTesting
}
from
"
devtools
-
environment
"
;
import
type
{
ThunkArgs
}
from
"
.
.
/
.
.
/
types
"
;
import
{
prefs
}
from
"
.
.
/
.
.
/
.
.
/
utils
/
prefs
"
;
const
blacklist
=
[
"
ADD_BREAKPOINT_POSITIONS
"
"
SET_SYMBOLS
"
"
OUT_OF_SCOPE_LOCATIONS
"
"
MAP_SCOPES
"
"
MAP_FRAMES
"
"
ADD_SCOPES
"
"
IN_SCOPE_LINES
"
"
REMOVE_BREAKPOINT
"
"
NODE_PROPERTIES_LOADED
"
"
SET_FOCUSED_SOURCE_ITEM
"
"
NODE_EXPAND
"
"
IN_SCOPE_LINES
"
]
;
function
cloneAction
(
action
:
any
)
{
action
=
action
|
|
{
}
;
action
=
{
.
.
.
action
}
;
if
(
action
.
source
?
.
text
)
{
const
source
=
{
.
.
.
action
.
source
text
:
"
"
}
;
action
.
source
=
source
;
}
if
(
action
.
sources
)
{
const
sources
=
action
.
sources
.
slice
(
0
20
)
.
map
(
source
=
>
{
const
url
=
!
source
.
url
|
|
source
.
url
.
includes
(
"
data
:
"
)
?
"
"
:
source
.
url
;
return
{
.
.
.
source
url
}
;
}
)
;
action
.
sources
=
sources
;
}
if
(
action
.
text
)
{
action
.
text
=
"
"
;
}
if
(
action
.
value
?
.
text
)
{
const
value
=
{
.
.
.
action
.
value
text
:
"
"
}
;
action
.
value
=
value
;
}
return
action
;
}
function
formatPause
(
pause
)
{
return
{
.
.
.
pause
pauseInfo
:
{
why
:
pause
.
why
}
scopes
:
[
]
loadedObjects
:
[
]
}
;
}
function
serializeAction
(
action
)
{
try
{
action
=
cloneAction
(
action
)
;
if
(
blacklist
.
includes
(
action
.
type
)
)
{
action
=
{
}
;
}
if
(
action
.
type
=
=
=
"
PAUSED
"
)
{
action
=
formatPause
(
action
)
;
}
const
serializer
=
function
(
key
value
)
{
if
(
value
?
.
getGrip
)
{
return
value
.
getGrip
(
)
;
}
return
value
;
}
;
return
JSON
.
stringify
(
action
serializer
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
return
"
"
;
}
}
export
function
log
(
{
dispatch
getState
}
:
ThunkArgs
)
{
return
(
next
:
any
)
=
>
(
action
:
any
)
=
>
{
const
asyncMsg
=
!
action
.
status
?
"
"
:
[
{
action
.
status
}
]
;
if
(
prefs
.
logActions
)
{
if
(
isTesting
(
)
)
{
dump
(
[
ACTION
]
{
action
.
type
}
{
asyncMsg
}
-
{
serializeAction
(
action
)
}
\
n
)
;
}
else
{
console
.
log
(
action
asyncMsg
)
;
}
}
next
(
action
)
;
}
;
}
