import
{
showMenu
buildMenu
}
from
"
.
.
/
.
.
/
context
-
menu
/
menu
"
;
import
{
getTabMenuItems
}
from
"
.
.
/
.
.
/
utils
/
tabs
"
;
import
{
getSelectedLocation
getOpenedSources
isSourceBlackBoxed
isSourceMapIgnoreListEnabled
isSourceOnSourceMapIgnoreList
isPrettyPrinted
}
from
"
.
.
/
.
.
/
selectors
/
index
"
;
import
{
toggleBlackBox
}
from
"
.
.
/
sources
/
blackbox
"
;
import
{
prettyPrintAndSelectSource
}
from
"
.
.
/
sources
/
prettyPrint
"
;
import
{
copyToClipboard
showSource
}
from
"
.
.
/
ui
"
;
import
{
closeTabForSource
closeTabsForSources
}
from
"
.
.
/
tabs
"
;
import
{
getRawSourceURL
shouldBlackbox
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
copyToTheClipboard
}
from
"
.
.
/
.
.
/
utils
/
clipboard
"
;
export
function
showTabContextMenu
(
event
source
)
{
return
async
(
{
dispatch
getState
}
)
=
>
{
const
state
=
getState
(
)
;
const
selectedLocation
=
getSelectedLocation
(
state
)
;
const
isBlackBoxed
=
isSourceBlackBoxed
(
state
source
)
;
const
isSourceOnIgnoreList
=
isSourceMapIgnoreListEnabled
(
state
)
&
&
isSourceOnSourceMapIgnoreList
(
state
source
)
;
const
isSourcePrettyPrinted
=
isPrettyPrinted
(
state
source
)
;
const
openedSources
=
getOpenedSources
(
state
)
;
const
otherSources
=
openedSources
.
filter
(
s
=
>
s
!
=
source
)
;
const
sourceIndex
=
openedSources
.
indexOf
(
source
)
;
const
sourcesForTabsAfter
=
openedSources
.
slice
(
sourceIndex
+
1
)
;
const
tabMenuItems
=
getTabMenuItems
(
)
;
const
items
=
[
{
item
:
{
.
.
.
tabMenuItems
.
closeTab
click
:
(
)
=
>
dispatch
(
closeTabForSource
(
source
)
)
}
}
{
item
:
{
.
.
.
tabMenuItems
.
closeOtherTabs
disabled
:
otherSources
.
length
=
=
=
0
click
:
(
)
=
>
dispatch
(
closeTabsForSources
(
otherSources
)
)
}
}
{
item
:
{
.
.
.
tabMenuItems
.
closeTabsToEnd
disabled
:
sourcesForTabsAfter
.
length
=
=
=
0
click
:
(
)
=
>
{
dispatch
(
closeTabsForSources
(
sourcesForTabsAfter
)
)
;
}
}
}
{
item
:
{
.
.
.
tabMenuItems
.
closeAllTabs
click
:
(
)
=
>
dispatch
(
closeTabsForSources
(
openedSources
)
)
}
}
{
item
:
{
type
:
"
separator
"
}
}
{
item
:
{
.
.
.
tabMenuItems
.
copySource
disabled
:
selectedLocation
?
.
source
.
id
!
=
=
source
.
id
click
:
(
)
=
>
{
dispatch
(
copyToClipboard
(
selectedLocation
)
)
;
}
}
}
{
item
:
{
.
.
.
tabMenuItems
.
copySourceUri2
disabled
:
!
source
.
url
click
:
(
)
=
>
copyToTheClipboard
(
getRawSourceURL
(
source
.
url
)
)
}
}
{
item
:
{
.
.
.
tabMenuItems
.
showSource
disabled
:
!
source
.
url
click
:
(
)
=
>
dispatch
(
showSource
(
source
.
id
)
)
}
}
{
item
:
{
.
.
.
tabMenuItems
.
toggleBlackBox
label
:
isBlackBoxed
?
L10N
.
getStr
(
"
ignoreContextItem
.
unignore
"
)
:
L10N
.
getStr
(
"
ignoreContextItem
.
ignore
"
)
disabled
:
isSourceOnIgnoreList
|
|
!
shouldBlackbox
(
source
)
click
:
(
)
=
>
dispatch
(
toggleBlackBox
(
source
)
)
}
}
{
item
:
{
.
.
.
tabMenuItems
.
prettyPrint
disabled
:
isSourcePrettyPrinted
click
:
(
)
=
>
dispatch
(
prettyPrintAndSelectSource
(
source
)
)
}
}
]
;
showMenu
(
event
buildMenu
(
items
)
)
;
}
;
}
