import
{
showMenu
buildMenu
}
from
"
.
.
/
.
.
/
context
-
menu
/
menu
"
;
import
{
getTabMenuItems
}
from
"
.
.
/
.
.
/
utils
/
tabs
"
;
import
{
getSelectedLocation
getSourcesForTabs
isSourceBlackBoxed
getContext
isSourceMapIgnoreListEnabled
isSourceOnSourceMapIgnoreList
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
toggleBlackBox
}
from
"
.
.
/
sources
/
blackbox
"
;
import
{
togglePrettyPrint
}
from
"
.
.
/
sources
/
prettyPrint
"
;
import
{
copyToClipboard
showSource
}
from
"
.
.
/
ui
"
;
import
{
closeTab
closeTabs
}
from
"
.
.
/
tabs
"
;
import
{
getRawSourceURL
isPretty
shouldBlackbox
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
copyToTheClipboard
}
from
"
.
.
/
.
.
/
utils
/
clipboard
"
;
export
function
showTabContextMenu
(
event
source
)
{
return
async
(
{
dispatch
getState
}
)
=
>
{
const
sourceId
=
source
.
id
;
const
state
=
getState
(
)
;
const
cx
=
getContext
(
state
)
;
const
tabSources
=
getSourcesForTabs
(
state
)
;
const
isBlackBoxed
=
isSourceBlackBoxed
(
state
source
)
;
const
isSourceOnIgnoreList
=
isSourceMapIgnoreListEnabled
(
state
)
&
&
isSourceOnSourceMapIgnoreList
(
state
source
)
;
const
selectedLocation
=
getSelectedLocation
(
state
)
;
const
tabCount
=
tabSources
.
length
;
const
otherTabs
=
tabSources
.
filter
(
t
=
>
t
.
id
!
=
=
sourceId
)
;
const
sourceTab
=
tabSources
.
find
(
t
=
>
t
.
id
=
=
sourceId
)
;
const
tabURLs
=
tabSources
.
map
(
t
=
>
t
.
url
)
;
const
otherTabURLs
=
otherTabs
.
map
(
t
=
>
t
.
url
)
;
if
(
!
sourceTab
|
|
!
selectedLocation
|
|
!
selectedLocation
.
source
.
id
)
{
return
;
}
const
tabMenuItems
=
getTabMenuItems
(
)
;
const
items
=
[
{
item
:
{
.
.
.
tabMenuItems
.
closeTab
click
:
(
)
=
>
dispatch
(
closeTab
(
cx
sourceTab
)
)
}
}
{
item
:
{
.
.
.
tabMenuItems
.
closeOtherTabs
disabled
:
otherTabURLs
.
length
=
=
=
0
click
:
(
)
=
>
dispatch
(
closeTabs
(
cx
otherTabURLs
)
)
}
}
{
item
:
{
.
.
.
tabMenuItems
.
closeTabsToEnd
disabled
:
tabCount
=
=
=
1
|
|
tabSources
.
some
(
(
t
i
)
=
>
t
.
id
=
=
=
sourceId
&
&
tabCount
-
1
=
=
=
i
)
click
:
(
)
=
>
{
const
tabIndex
=
tabSources
.
findIndex
(
t
=
>
t
.
id
=
=
sourceId
)
;
dispatch
(
closeTabs
(
cx
tabURLs
.
filter
(
(
t
i
)
=
>
i
>
tabIndex
)
)
)
;
}
}
}
{
item
:
{
.
.
.
tabMenuItems
.
closeAllTabs
click
:
(
)
=
>
dispatch
(
closeTabs
(
cx
tabURLs
)
)
}
}
{
item
:
{
type
:
"
separator
"
}
}
{
item
:
{
.
.
.
tabMenuItems
.
copySource
disabled
:
selectedLocation
.
source
.
id
!
=
=
source
.
id
click
:
(
)
=
>
{
dispatch
(
copyToClipboard
(
selectedLocation
)
)
;
}
}
}
{
item
:
{
.
.
.
tabMenuItems
.
copySourceUri2
disabled
:
!
source
.
url
click
:
(
)
=
>
copyToTheClipboard
(
getRawSourceURL
(
source
.
url
)
)
}
}
{
item
:
{
.
.
.
tabMenuItems
.
showSource
disabled
:
!
source
.
url
click
:
(
)
=
>
dispatch
(
showSource
(
cx
sourceId
)
)
}
}
{
item
:
{
.
.
.
tabMenuItems
.
toggleBlackBox
label
:
isBlackBoxed
?
L10N
.
getStr
(
"
ignoreContextItem
.
unignore
"
)
:
L10N
.
getStr
(
"
ignoreContextItem
.
ignore
"
)
disabled
:
isSourceOnIgnoreList
|
|
!
shouldBlackbox
(
source
)
click
:
(
)
=
>
dispatch
(
toggleBlackBox
(
cx
source
)
)
}
}
{
item
:
{
.
.
.
tabMenuItems
.
prettyPrint
disabled
:
isPretty
(
sourceTab
)
click
:
(
)
=
>
dispatch
(
togglePrettyPrint
(
cx
sourceId
)
)
}
}
]
;
showMenu
(
event
buildMenu
(
items
)
)
;
}
;
}
