import
{
searchSourceForHighlight
}
from
"
.
.
/
utils
/
editor
/
index
"
;
import
{
getSelectedSourceTextContent
getSearchOptions
}
from
"
.
.
/
selectors
/
index
"
;
import
{
closeActiveSearch
clearHighlightLineRange
}
from
"
.
/
ui
"
;
export
function
doSearchForHighlight
(
query
editor
line
ch
)
{
return
async
(
{
getState
dispatch
}
)
=
>
{
const
sourceTextContent
=
getSelectedSourceTextContent
(
getState
(
)
)
;
if
(
!
sourceTextContent
)
{
return
;
}
dispatch
(
searchContentsForHighlight
(
query
editor
line
ch
)
)
;
}
;
}
export
function
querySearchWorker
(
query
text
modifiers
)
{
return
(
{
searchWorker
}
)
=
>
{
return
searchWorker
.
getMatches
(
query
text
modifiers
)
;
}
;
}
export
function
searchContentsForHighlight
(
query
editor
line
ch
)
{
return
async
(
{
getState
dispatch
}
)
=
>
{
const
modifiers
=
getSearchOptions
(
getState
(
)
"
file
-
search
"
)
;
const
sourceTextContent
=
getSelectedSourceTextContent
(
getState
(
)
)
;
if
(
!
query
|
|
!
editor
|
|
!
sourceTextContent
|
|
!
modifiers
)
{
return
;
}
const
ctx
=
{
ed
:
editor
cm
:
editor
.
codeMirror
}
;
searchSourceForHighlight
(
ctx
false
query
true
modifiers
line
ch
)
;
}
;
}
export
function
closeFileSearch
(
)
{
return
(
{
dispatch
}
)
=
>
{
dispatch
(
closeActiveSearch
(
)
)
;
dispatch
(
clearHighlightLineRange
(
)
)
;
}
;
}
