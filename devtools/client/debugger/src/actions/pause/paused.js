import
{
getHiddenBreakpoint
isEvaluatingExpression
getSelectedFrame
}
from
"
.
.
/
.
.
/
selectors
/
index
"
;
import
{
mapFrames
fetchFrames
}
from
"
.
/
index
"
;
import
{
removeBreakpoint
}
from
"
.
.
/
breakpoints
/
index
"
;
import
{
evaluateExpressions
}
from
"
.
.
/
expressions
"
;
import
{
selectLocation
}
from
"
.
.
/
sources
/
index
"
;
import
{
validateSelectedFrame
}
from
"
.
.
/
.
.
/
utils
/
context
"
;
import
{
fetchScopes
}
from
"
.
/
fetchScopes
"
;
export
function
paused
(
pauseInfo
)
{
return
async
function
(
{
dispatch
getState
}
)
{
const
{
thread
frame
why
}
=
pauseInfo
;
dispatch
(
{
type
:
"
PAUSED
"
thread
why
topFrame
:
frame
}
)
;
const
hiddenBreakpoint
=
getHiddenBreakpoint
(
getState
(
)
)
;
if
(
hiddenBreakpoint
)
{
dispatch
(
removeBreakpoint
(
hiddenBreakpoint
)
)
;
}
await
dispatch
(
fetchFrames
(
thread
)
)
;
await
dispatch
(
mapFrames
(
thread
)
)
;
const
selectedFrame
=
getSelectedFrame
(
getState
(
)
thread
)
;
if
(
selectedFrame
)
{
await
dispatch
(
selectLocation
(
selectedFrame
.
location
)
)
;
validateSelectedFrame
(
getState
(
)
selectedFrame
)
;
await
dispatch
(
fetchScopes
(
selectedFrame
)
)
;
const
atException
=
why
.
type
=
=
"
exception
"
;
if
(
!
atException
|
|
!
isEvaluatingExpression
(
getState
(
)
thread
)
)
{
await
dispatch
(
evaluateExpressions
(
selectedFrame
)
)
;
}
}
}
;
}
