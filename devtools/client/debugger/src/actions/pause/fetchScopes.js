import
{
getGeneratedFrameScope
getOriginalFrameScope
getSelectedFrame
}
from
"
.
.
/
.
.
/
selectors
/
index
"
;
import
{
mapScopes
}
from
"
.
/
mapScopes
"
;
import
{
generateInlinePreview
}
from
"
.
/
inlinePreview
"
;
const
{
PROMISE
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
shared
/
redux
/
middleware
/
promise
.
js
"
)
;
import
{
validateSelectedFrame
}
from
"
.
.
/
.
.
/
utils
/
context
"
;
export
function
fetchScopes
(
)
{
return
async
function
(
{
dispatch
getState
client
}
)
{
const
selectedFrame
=
getSelectedFrame
(
getState
(
)
)
;
let
scopes
=
getGeneratedFrameScope
(
getState
(
)
selectedFrame
)
;
if
(
!
scopes
?
.
scope
)
{
scopes
=
dispatch
(
{
type
:
"
ADD_SCOPES
"
selectedFrame
[
PROMISE
]
:
client
.
getFrameScopes
(
selectedFrame
)
}
)
;
scopes
.
then
(
(
)
=
>
{
validateSelectedFrame
(
getState
(
)
selectedFrame
)
;
dispatch
(
generateInlinePreview
(
selectedFrame
)
)
;
}
)
;
}
if
(
!
getOriginalFrameScope
(
getState
(
)
selectedFrame
)
)
{
await
dispatch
(
mapScopes
(
selectedFrame
scopes
)
)
;
}
}
;
}
