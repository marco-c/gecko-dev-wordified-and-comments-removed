import
{
getOriginalFrameScope
getGeneratedFrameScope
getInlinePreviews
getSelectedLocation
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
features
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
{
validateThreadContext
}
from
"
.
.
/
.
.
/
utils
/
context
"
;
function
getLocalScopeLevels
(
originalAstScopes
)
{
let
levels
=
0
;
while
(
originalAstScopes
[
levels
]
&
&
originalAstScopes
[
levels
]
.
type
=
=
=
"
block
"
)
{
levels
+
+
;
}
return
levels
;
}
export
function
generateInlinePreview
(
cx
frame
)
{
return
async
function
(
{
dispatch
getState
parser
client
}
)
{
if
(
!
frame
|
|
!
features
.
inlinePreview
)
{
return
null
;
}
const
{
thread
}
=
cx
;
if
(
getInlinePreviews
(
getState
(
)
thread
frame
.
id
)
)
{
return
null
;
}
const
originalFrameScopes
=
getOriginalFrameScope
(
getState
(
)
thread
frame
.
location
.
sourceId
frame
.
id
)
;
const
generatedFrameScopes
=
getGeneratedFrameScope
(
getState
(
)
thread
frame
.
id
)
;
let
scopes
=
originalFrameScopes
?
.
scope
|
|
generatedFrameScopes
?
.
scope
;
if
(
!
scopes
|
|
!
scopes
.
bindings
)
{
return
null
;
}
const
selectedLocation
=
getSelectedLocation
(
getState
(
)
)
;
if
(
!
selectedLocation
)
{
return
null
;
}
const
originalAstScopes
=
await
parser
.
getScopes
(
selectedLocation
)
;
validateThreadContext
(
getState
(
)
cx
)
;
if
(
!
originalAstScopes
)
{
return
null
;
}
const
allPreviews
=
[
]
;
const
pausedOnLine
=
selectedLocation
.
line
;
const
levels
=
getLocalScopeLevels
(
originalAstScopes
)
;
for
(
let
curLevel
=
0
;
curLevel
<
=
levels
&
&
scopes
&
&
scopes
.
bindings
;
curLevel
+
+
)
{
const
bindings
=
{
.
.
.
scopes
.
bindings
.
variables
}
;
scopes
.
bindings
.
arguments
.
forEach
(
argument
=
>
{
Object
.
keys
(
argument
)
.
forEach
(
key
=
>
{
bindings
[
key
]
=
argument
[
key
]
;
}
)
;
}
)
;
const
previewBindings
=
Object
.
keys
(
bindings
)
.
map
(
async
name
=
>
{
let
properties
=
null
;
const
objectGrip
=
bindings
[
name
]
.
value
;
if
(
objectGrip
.
actor
&
&
objectGrip
.
class
=
=
=
"
Object
"
)
{
properties
=
await
client
.
loadObjectProperties
(
{
name
path
:
name
contents
:
{
value
:
objectGrip
}
}
cx
.
thread
)
;
}
const
previewsFromBindings
=
getBindingValues
(
originalAstScopes
pausedOnLine
name
bindings
[
name
]
.
value
curLevel
properties
)
;
allPreviews
.
push
(
.
.
.
previewsFromBindings
)
;
}
)
;
await
Promise
.
all
(
previewBindings
)
;
scopes
=
scopes
.
parent
;
}
allPreviews
.
sort
(
(
previewA
previewB
)
=
>
{
if
(
previewA
.
line
<
previewB
.
line
)
{
return
-
1
;
}
if
(
previewA
.
line
>
previewB
.
line
)
{
return
1
;
}
return
previewA
.
column
<
previewB
.
column
?
-
1
:
1
;
}
)
;
const
previews
=
{
}
;
for
(
const
preview
of
allPreviews
)
{
const
{
line
}
=
preview
;
if
(
!
previews
[
line
]
)
{
previews
[
line
]
=
[
]
;
}
previews
[
line
]
.
push
(
preview
)
;
}
return
dispatch
(
{
type
:
"
ADD_INLINE_PREVIEW
"
thread
frame
previews
}
)
;
}
;
}
function
getBindingValues
(
originalAstScopes
pausedOnLine
name
value
curLevel
properties
)
{
const
previews
=
[
]
;
const
binding
=
originalAstScopes
[
curLevel
]
?
.
bindings
[
name
]
;
if
(
!
binding
)
{
return
previews
;
}
const
identifiers
=
new
Set
(
)
;
for
(
let
i
=
binding
.
refs
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
const
ref
=
binding
.
refs
[
i
]
;
const
line
=
ref
.
start
.
line
-
1
;
const
column
=
ref
.
start
.
column
;
if
(
line
>
=
pausedOnLine
-
1
)
{
continue
;
}
const
{
displayName
displayValue
}
=
getExpressionNameAndValue
(
name
value
ref
properties
)
;
if
(
identifiers
.
has
(
displayName
)
)
{
continue
;
}
identifiers
.
add
(
displayName
)
;
previews
.
push
(
{
line
column
name
:
displayName
value
:
displayValue
}
)
;
}
return
previews
;
}
function
getExpressionNameAndValue
(
name
value
ref
properties
)
{
let
displayName
=
name
;
let
displayValue
=
value
;
if
(
properties
)
{
let
{
meta
}
=
ref
;
while
(
meta
)
{
if
(
displayValue
=
=
=
value
)
{
const
property
=
properties
.
find
(
prop
=
>
prop
.
name
=
=
=
meta
.
property
)
;
displayValue
=
property
?
.
contents
.
value
;
displayName
+
=
.
{
meta
.
property
}
;
}
else
if
(
displayValue
?
.
preview
?
.
ownProperties
)
{
const
{
ownProperties
}
=
displayValue
.
preview
;
Object
.
keys
(
ownProperties
)
.
forEach
(
prop
=
>
{
if
(
prop
=
=
=
meta
.
property
)
{
displayValue
=
ownProperties
[
prop
]
.
value
;
displayName
+
=
.
{
meta
.
property
}
;
}
}
)
;
}
meta
=
meta
.
parent
;
}
}
return
{
displayName
displayValue
}
;
}
