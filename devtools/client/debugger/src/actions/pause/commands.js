import
{
getSelectedFrame
getThreadContext
getCurrentThread
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
PROMISE
}
from
"
.
.
/
utils
/
middleware
/
promise
"
;
import
{
evaluateExpressions
}
from
"
.
.
/
expressions
"
;
import
{
selectLocation
}
from
"
.
.
/
sources
"
;
import
{
fetchScopes
}
from
"
.
/
fetchScopes
"
;
import
{
fetchFrames
}
from
"
.
/
fetchFrames
"
;
import
{
recordEvent
}
from
"
.
.
/
.
.
/
utils
/
telemetry
"
;
import
{
features
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
assert
from
"
.
.
/
.
.
/
utils
/
assert
"
;
export
function
selectThread
(
cx
thread
)
{
return
async
(
{
dispatch
getState
client
}
)
=
>
{
if
(
getCurrentThread
(
getState
(
)
)
=
=
=
thread
)
{
return
;
}
await
dispatch
(
{
cx
type
:
"
SELECT_THREAD
"
thread
}
)
;
const
threadcx
=
getThreadContext
(
getState
(
)
)
;
assert
(
threadcx
.
thread
=
=
thread
"
Thread
mismatch
"
)
;
const
serverRequests
=
[
]
;
serverRequests
.
push
(
dispatch
(
evaluateExpressions
(
threadcx
)
)
)
;
const
frame
=
getSelectedFrame
(
getState
(
)
thread
)
;
if
(
frame
)
{
serverRequests
.
push
(
dispatch
(
selectLocation
(
threadcx
frame
.
location
)
)
)
;
serverRequests
.
push
(
dispatch
(
fetchFrames
(
threadcx
)
)
)
;
serverRequests
.
push
(
dispatch
(
fetchScopes
(
threadcx
)
)
)
;
}
await
Promise
.
all
(
serverRequests
)
;
}
;
}
export
function
command
(
cx
type
)
{
return
async
(
{
dispatch
getState
client
}
)
=
>
{
if
(
!
type
)
{
return
;
}
const
frame
=
features
.
frameStep
&
&
getSelectedFrame
(
getState
(
)
cx
.
thread
)
;
return
dispatch
(
{
type
:
"
COMMAND
"
command
:
type
cx
thread
:
cx
.
thread
[
PROMISE
]
:
client
[
type
]
(
cx
.
thread
frame
?
.
id
)
}
)
;
}
;
}
export
function
stepIn
(
cx
)
{
return
(
{
dispatch
getState
}
)
=
>
{
if
(
cx
.
isPaused
)
{
return
dispatch
(
command
(
cx
"
stepIn
"
)
)
;
}
}
;
}
export
function
stepOver
(
cx
)
{
return
(
{
dispatch
getState
}
)
=
>
{
if
(
cx
.
isPaused
)
{
return
dispatch
(
command
(
cx
"
stepOver
"
)
)
;
}
}
;
}
export
function
stepOut
(
cx
)
{
return
(
{
dispatch
getState
}
)
=
>
{
if
(
cx
.
isPaused
)
{
return
dispatch
(
command
(
cx
"
stepOut
"
)
)
;
}
}
;
}
export
function
resume
(
cx
)
{
return
(
{
dispatch
getState
}
)
=
>
{
if
(
cx
.
isPaused
)
{
recordEvent
(
"
continue
"
)
;
return
dispatch
(
command
(
cx
"
resume
"
)
)
;
}
}
;
}
export
function
restart
(
cx
frame
)
{
return
async
(
{
dispatch
getState
client
}
)
=
>
{
if
(
cx
.
isPaused
)
{
return
dispatch
(
{
type
:
"
COMMAND
"
command
:
"
restart
"
cx
thread
:
cx
.
thread
[
PROMISE
]
:
client
.
restart
(
cx
.
thread
frame
.
id
)
}
)
;
}
}
;
}
