import
{
isConsole
}
from
"
.
.
/
utils
/
preview
"
;
import
{
getGrip
getFront
}
from
"
.
.
/
utils
/
evaluation
-
result
"
;
import
{
isLineInScope
isSelectedFrameVisible
getSelectedSource
getSelectedLocation
getSelectedFrame
getCurrentThread
getSelectedException
getSelectedTraceIndex
getAllTraces
}
from
"
.
.
/
selectors
/
index
"
;
import
{
getMappedExpression
}
from
"
.
/
expressions
"
;
const
{
TRACER_FIELDS_INDEXES
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
tracer
.
js
"
)
;
async
function
findExpressionMatches
(
state
editor
tokenPos
)
{
const
location
=
getSelectedLocation
(
state
)
;
if
(
!
location
)
{
return
[
]
;
}
return
editor
.
findBestMatchExpressions
(
tokenPos
)
;
}
export
function
getTracerPreview
(
target
tokenPos
editor
)
{
return
async
thunkArgs
=
>
{
const
{
getState
}
=
thunkArgs
;
const
selectedTraceIndex
=
getSelectedTraceIndex
(
getState
(
)
)
;
if
(
selectedTraceIndex
=
=
null
)
{
return
null
;
}
const
trace
=
getAllTraces
(
getState
(
)
)
[
selectedTraceIndex
]
;
if
(
trace
[
TRACER_FIELDS_INDEXES
.
TYPE
]
!
=
"
enter
"
)
{
return
null
;
}
const
matches
=
await
findExpressionMatches
(
getState
(
)
editor
tokenPos
)
;
if
(
!
matches
.
length
)
{
return
null
;
}
let
{
expression
location
}
=
matches
[
0
]
;
const
source
=
getSelectedSource
(
getState
(
)
)
;
if
(
location
&
&
source
.
isOriginal
)
{
const
thread
=
getCurrentThread
(
getState
(
)
)
;
const
mapResult
=
await
getMappedExpression
(
expression
thread
thunkArgs
)
;
if
(
mapResult
)
{
expression
=
mapResult
.
expression
;
}
}
const
argumentValues
=
trace
[
TRACER_FIELDS_INDEXES
.
ENTER_ARGS
]
;
const
argumentNames
=
trace
[
TRACER_FIELDS_INDEXES
.
ENTER_ARG_NAMES
]
;
if
(
!
argumentNames
|
|
!
argumentValues
)
{
return
null
;
}
const
argumentIndex
=
argumentNames
.
indexOf
(
expression
)
;
if
(
argumentIndex
=
=
-
1
)
{
return
null
;
}
const
result
=
argumentValues
[
argumentIndex
]
;
const
resultGrip
=
result
?
.
getGrip
?
result
?
.
getGrip
(
)
:
result
;
const
root
=
{
path
:
{
selectedTraceIndex
}
-
{
expression
}
contents
:
{
value
:
resultGrip
front
:
getFront
(
result
)
}
}
;
return
{
previewType
:
"
tracer
"
target
tokenPos
cursorPos
:
target
.
getBoundingClientRect
(
)
expression
root
resultGrip
}
;
}
;
}
export
function
getPausedPreview
(
target
tokenPos
editor
)
{
return
async
thunkArgs
=
>
{
const
{
getState
client
}
=
thunkArgs
;
if
(
!
isSelectedFrameVisible
(
getState
(
)
)
|
|
!
isLineInScope
(
getState
(
)
tokenPos
.
line
)
)
{
return
null
;
}
const
source
=
getSelectedSource
(
getState
(
)
)
;
if
(
!
source
)
{
return
null
;
}
const
thread
=
getCurrentThread
(
getState
(
)
)
;
const
selectedFrame
=
getSelectedFrame
(
getState
(
)
)
;
if
(
!
selectedFrame
)
{
return
null
;
}
const
matches
=
await
findExpressionMatches
(
getState
(
)
editor
tokenPos
)
;
if
(
!
matches
.
length
)
{
return
null
;
}
let
{
expression
location
}
=
matches
[
0
]
;
if
(
isConsole
(
expression
)
)
{
return
null
;
}
if
(
location
&
&
source
.
isOriginal
)
{
const
mapResult
=
await
getMappedExpression
(
expression
thread
thunkArgs
)
;
if
(
mapResult
)
{
expression
=
mapResult
.
expression
;
}
}
const
{
result
hasException
exception
}
=
await
client
.
evaluate
(
expression
{
frameId
:
selectedFrame
.
id
}
)
;
if
(
hasException
)
{
const
errorClass
=
exception
?
.
getGrip
(
)
?
.
class
|
|
"
Error
"
;
throw
new
Error
(
Debugger
internal
exception
:
Preview
for
<
{
expression
}
>
threw
a
{
errorClass
}
)
;
}
const
resultGrip
=
getGrip
(
result
)
;
if
(
resultGrip
=
=
=
null
)
{
return
null
;
}
if
(
resultGrip
&
&
resultGrip
.
class
&
&
typeof
resultGrip
.
class
=
=
=
"
string
"
&
&
resultGrip
.
class
.
includes
(
"
InvisibleToDebugger
"
)
)
{
return
null
;
}
const
root
=
{
path
:
expression
contents
:
{
value
:
resultGrip
front
:
getFront
(
result
)
}
}
;
return
{
previewType
:
"
pause
"
target
tokenPos
cursorPos
:
target
.
getBoundingClientRect
(
)
expression
root
resultGrip
}
;
}
;
}
export
function
getExceptionPreview
(
target
tokenPos
editor
)
{
return
async
(
{
getState
}
)
=
>
{
const
matches
=
await
findExpressionMatches
(
getState
(
)
editor
tokenPos
)
;
if
(
!
matches
.
length
)
{
return
null
;
}
let
exception
;
for
(
const
match
of
matches
)
{
const
tokenColumnStart
=
match
.
location
.
start
.
column
+
1
;
exception
=
getSelectedException
(
getState
(
)
tokenPos
.
line
tokenColumnStart
)
;
if
(
exception
)
{
break
;
}
}
if
(
!
exception
)
{
return
null
;
}
return
{
target
tokenPos
cursorPos
:
target
.
getBoundingClientRect
(
)
exception
}
;
}
;
}
