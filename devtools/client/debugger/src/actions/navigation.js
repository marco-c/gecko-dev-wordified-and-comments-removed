import
{
clearDocuments
}
from
"
.
.
/
utils
/
editor
"
;
import
sourceQueue
from
"
.
.
/
utils
/
source
-
queue
"
;
import
{
getSourceList
}
from
"
.
.
/
reducers
/
sources
"
;
import
{
waitForMs
}
from
"
.
.
/
utils
/
utils
"
;
import
{
newGeneratedSources
}
from
"
.
/
sources
"
;
import
{
updateWorkers
}
from
"
.
/
debuggee
"
;
import
{
clearASTs
clearSymbols
clearScopes
clearSources
}
from
"
.
.
/
workers
/
parser
"
;
import
{
clearWasmStates
}
from
"
.
.
/
utils
/
wasm
"
;
import
{
getMainThread
}
from
"
.
.
/
selectors
"
;
import
type
{
Action
ThunkArgs
}
from
"
.
/
types
"
;
export
function
willNavigate
(
event
:
Object
)
{
return
function
(
{
dispatch
getState
client
sourceMaps
}
:
ThunkArgs
)
{
sourceMaps
.
clearSourceMaps
(
)
;
clearWasmStates
(
)
;
clearDocuments
(
)
;
clearSymbols
(
)
;
clearASTs
(
)
;
clearScopes
(
)
;
clearSources
(
)
;
client
.
detachWorkers
(
)
;
dispatch
(
navigate
(
event
.
url
)
)
;
}
;
}
export
function
navigate
(
url
:
string
)
{
return
async
function
(
{
dispatch
getState
}
:
ThunkArgs
)
{
sourceQueue
.
clear
(
)
;
const
thread
=
getMainThread
(
getState
(
)
)
;
dispatch
(
{
type
:
"
NAVIGATE
"
mainThread
:
{
.
.
.
thread
url
}
}
)
;
}
;
}
export
function
connect
(
url
:
string
actor
:
string
canRewind
:
boolean
)
{
return
async
function
(
{
dispatch
}
:
ThunkArgs
)
{
await
dispatch
(
updateWorkers
(
)
)
;
dispatch
(
(
{
type
:
"
CONNECT
"
mainThread
:
{
url
actor
type
:
-
1
}
canRewind
}
:
Action
)
)
;
}
;
}
export
function
navigated
(
)
{
return
async
function
(
{
dispatch
getState
client
panel
}
:
ThunkArgs
)
{
await
waitForMs
(
100
)
;
if
(
getSourceList
(
getState
(
)
)
.
length
=
=
0
)
{
const
sources
=
await
client
.
fetchSources
(
)
;
dispatch
(
newGeneratedSources
(
sources
)
)
;
}
panel
.
emit
(
"
reloaded
"
)
;
}
;
}
