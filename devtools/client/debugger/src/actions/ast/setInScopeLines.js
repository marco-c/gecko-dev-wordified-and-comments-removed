import
{
hasInScopeLines
getSourceTextContent
getVisibleSelectedFrame
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
getSourceLineCount
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
isFulfilled
}
from
"
.
.
/
.
.
/
utils
/
async
-
value
"
;
function
getOutOfScopeLines
(
outOfScopeLocations
)
{
if
(
!
outOfScopeLocations
)
{
return
null
;
}
const
uniqueLines
=
new
Set
(
)
;
for
(
const
location
of
outOfScopeLocations
)
{
for
(
let
i
=
location
.
start
.
line
;
i
<
location
.
end
.
line
;
i
+
+
)
{
uniqueLines
.
add
(
i
)
;
}
}
return
uniqueLines
;
}
async
function
getInScopeLines
(
cx
location
{
dispatch
getState
parserWorker
}
)
{
const
sourceTextContent
=
getSourceTextContent
(
getState
(
)
location
)
;
let
locations
=
null
;
if
(
location
.
line
&
&
parserWorker
.
isLocationSupported
(
location
)
)
{
locations
=
await
parserWorker
.
findOutOfScopeLocations
(
location
)
;
}
const
linesOutOfScope
=
getOutOfScopeLines
(
locations
)
;
const
sourceNumLines
=
!
sourceTextContent
|
|
!
isFulfilled
(
sourceTextContent
)
?
0
:
getSourceLineCount
(
sourceTextContent
.
value
)
;
const
noLinesOutOfScope
=
linesOutOfScope
=
=
null
|
|
linesOutOfScope
.
size
=
=
0
;
const
sourceLines
=
new
Array
(
sourceNumLines
)
;
for
(
let
i
=
0
;
i
<
sourceNumLines
;
i
+
+
)
{
const
line
=
i
+
1
;
if
(
noLinesOutOfScope
|
|
!
linesOutOfScope
.
has
(
line
)
)
{
sourceLines
[
i
]
=
line
;
}
}
return
sourceLines
.
filter
(
i
=
>
i
!
=
undefined
)
;
}
export
function
setInScopeLines
(
cx
)
{
return
async
thunkArgs
=
>
{
const
{
getState
dispatch
}
=
thunkArgs
;
const
visibleFrame
=
getVisibleSelectedFrame
(
getState
(
)
)
;
if
(
!
visibleFrame
)
{
return
;
}
const
{
location
}
=
visibleFrame
;
const
sourceTextContent
=
getSourceTextContent
(
getState
(
)
location
)
;
if
(
hasInScopeLines
(
getState
(
)
location
)
|
|
!
sourceTextContent
)
{
return
;
}
const
lines
=
await
getInScopeLines
(
cx
location
thunkArgs
)
;
dispatch
(
{
type
:
"
IN_SCOPE_LINES
"
cx
location
lines
}
)
;
}
;
}
