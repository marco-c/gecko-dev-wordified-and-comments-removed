import
{
createBreakpoint
}
from
"
.
.
/
.
.
/
client
/
firefox
/
create
"
;
import
{
makeBreakpointServerLocation
makeBreakpointId
}
from
"
.
.
/
.
.
/
utils
/
breakpoint
"
;
import
{
getBreakpoint
getBreakpointPositionsForLocation
getFirstBreakpointPosition
getSettledSourceTextContent
getBreakpointsList
getPendingBreakpointList
isMapScopesEnabled
getBlackBoxRanges
isSourceMapIgnoreListEnabled
isSourceOnSourceMapIgnoreList
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
setBreakpointPositions
}
from
"
.
/
breakpointPositions
"
;
import
{
setSkipPausing
}
from
"
.
.
/
pause
/
skipPausing
"
;
import
{
PROMISE
}
from
"
.
.
/
utils
/
middleware
/
promise
"
;
import
{
recordEvent
}
from
"
.
.
/
.
.
/
utils
/
telemetry
"
;
import
{
comparePosition
}
from
"
.
.
/
.
.
/
utils
/
location
"
;
import
{
getTextAtPosition
isLineBlackboxed
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
getMappedScopesForLocation
}
from
"
.
.
/
pause
/
mapScopes
"
;
import
{
validateBreakpoint
}
from
"
.
.
/
.
.
/
utils
/
context
"
;
async
function
clientSetBreakpoint
(
client
{
getState
dispatch
}
breakpoint
)
{
const
breakpointServerLocation
=
makeBreakpointServerLocation
(
getState
(
)
breakpoint
.
generatedLocation
)
;
const
shouldMapBreakpointExpressions
=
isMapScopesEnabled
(
getState
(
)
)
&
&
breakpoint
.
location
.
source
.
isOriginal
&
&
(
breakpoint
.
options
.
logValue
|
|
breakpoint
.
options
.
condition
)
;
if
(
shouldMapBreakpointExpressions
)
{
breakpoint
=
await
dispatch
(
updateBreakpointSourceMapping
(
breakpoint
)
)
;
}
return
client
.
setBreakpoint
(
breakpointServerLocation
breakpoint
.
options
)
;
}
function
clientRemoveBreakpoint
(
client
state
generatedLocation
)
{
const
breakpointServerLocation
=
makeBreakpointServerLocation
(
state
generatedLocation
)
;
return
client
.
removeBreakpoint
(
breakpointServerLocation
)
;
}
export
function
enableBreakpoint
(
initialBreakpoint
)
{
return
thunkArgs
=
>
{
const
{
dispatch
getState
client
}
=
thunkArgs
;
const
state
=
getState
(
)
;
const
breakpoint
=
getBreakpoint
(
state
initialBreakpoint
.
location
)
;
const
blackboxedRanges
=
getBlackBoxRanges
(
state
)
;
const
isSourceOnIgnoreList
=
isSourceMapIgnoreListEnabled
(
state
)
&
&
isSourceOnSourceMapIgnoreList
(
state
breakpoint
.
location
.
source
)
;
if
(
!
breakpoint
|
|
!
breakpoint
.
disabled
|
|
isLineBlackboxed
(
blackboxedRanges
[
breakpoint
.
location
.
source
.
url
]
breakpoint
.
location
.
line
isSourceOnIgnoreList
)
)
{
return
null
;
}
dispatch
(
setSkipPausing
(
false
)
)
;
return
dispatch
(
{
type
:
"
SET_BREAKPOINT
"
breakpoint
:
createBreakpoint
(
{
.
.
.
breakpoint
disabled
:
false
}
)
[
PROMISE
]
:
clientSetBreakpoint
(
client
thunkArgs
breakpoint
)
}
)
;
}
;
}
export
function
addBreakpoint
(
cx
initialLocation
options
=
{
}
disabled
shouldCancel
=
(
)
=
>
false
)
{
return
async
thunkArgs
=
>
{
const
{
dispatch
getState
client
}
=
thunkArgs
;
recordEvent
(
"
add_breakpoint
"
)
;
await
dispatch
(
setBreakpointPositions
(
{
cx
location
:
initialLocation
}
)
)
;
const
position
=
initialLocation
.
column
?
getBreakpointPositionsForLocation
(
getState
(
)
initialLocation
)
:
getFirstBreakpointPosition
(
getState
(
)
initialLocation
)
;
if
(
!
position
)
{
return
null
;
}
const
{
location
generatedLocation
}
=
position
;
if
(
!
location
.
source
|
|
!
generatedLocation
.
source
)
{
return
null
;
}
const
originalContent
=
getSettledSourceTextContent
(
getState
(
)
location
)
;
const
originalText
=
getTextAtPosition
(
location
.
source
.
id
originalContent
location
)
;
const
content
=
getSettledSourceTextContent
(
getState
(
)
generatedLocation
)
;
const
text
=
getTextAtPosition
(
generatedLocation
.
source
.
id
content
generatedLocation
)
;
const
id
=
makeBreakpointId
(
location
)
;
const
breakpoint
=
createBreakpoint
(
{
id
disabled
options
location
generatedLocation
text
originalText
}
)
;
if
(
shouldCancel
(
)
)
{
return
null
;
}
dispatch
(
setSkipPausing
(
false
)
)
;
return
dispatch
(
{
type
:
"
SET_BREAKPOINT
"
breakpoint
[
PROMISE
]
:
disabled
?
clientRemoveBreakpoint
(
client
getState
(
)
generatedLocation
)
:
clientSetBreakpoint
(
client
thunkArgs
breakpoint
)
}
)
;
}
;
}
export
function
removeBreakpoint
(
initialBreakpoint
)
{
return
(
{
dispatch
getState
client
}
)
=
>
{
recordEvent
(
"
remove_breakpoint
"
)
;
const
breakpoint
=
getBreakpoint
(
getState
(
)
initialBreakpoint
.
location
)
;
if
(
!
breakpoint
)
{
return
null
;
}
dispatch
(
setSkipPausing
(
false
)
)
;
return
dispatch
(
{
type
:
"
REMOVE_BREAKPOINT
"
breakpoint
[
PROMISE
]
:
breakpoint
.
disabled
?
Promise
.
resolve
(
)
:
clientRemoveBreakpoint
(
client
getState
(
)
breakpoint
.
generatedLocation
)
}
)
;
}
;
}
export
function
removeBreakpointAtGeneratedLocation
(
target
)
{
return
(
{
dispatch
getState
client
}
)
=
>
{
const
onBreakpointRemoved
=
clientRemoveBreakpoint
(
client
getState
(
)
target
)
;
const
breakpoints
=
getBreakpointsList
(
getState
(
)
)
;
for
(
const
breakpoint
of
breakpoints
)
{
const
{
generatedLocation
}
=
breakpoint
;
if
(
generatedLocation
.
source
.
id
=
=
target
.
source
.
id
&
&
comparePosition
(
generatedLocation
target
)
)
{
dispatch
(
{
type
:
"
REMOVE_BREAKPOINT
"
breakpoint
[
PROMISE
]
:
onBreakpointRemoved
}
)
;
}
}
const
pending
=
getPendingBreakpointList
(
getState
(
)
)
;
for
(
const
pendingBreakpoint
of
pending
)
{
const
{
generatedLocation
}
=
pendingBreakpoint
;
if
(
generatedLocation
.
sourceUrl
=
=
target
.
source
.
url
&
&
comparePosition
(
generatedLocation
target
)
)
{
dispatch
(
{
type
:
"
REMOVE_PENDING_BREAKPOINT
"
pendingBreakpoint
}
)
;
}
}
return
onBreakpointRemoved
;
}
;
}
export
function
disableBreakpoint
(
initialBreakpoint
)
{
return
(
{
dispatch
getState
client
}
)
=
>
{
const
breakpoint
=
getBreakpoint
(
getState
(
)
initialBreakpoint
.
location
)
;
if
(
!
breakpoint
|
|
breakpoint
.
disabled
)
{
return
null
;
}
dispatch
(
setSkipPausing
(
false
)
)
;
return
dispatch
(
{
type
:
"
SET_BREAKPOINT
"
breakpoint
:
createBreakpoint
(
{
.
.
.
breakpoint
disabled
:
true
}
)
[
PROMISE
]
:
clientRemoveBreakpoint
(
client
getState
(
)
breakpoint
.
generatedLocation
)
}
)
;
}
;
}
export
function
setBreakpointOptions
(
cx
location
options
=
{
}
)
{
return
thunkArgs
=
>
{
const
{
dispatch
getState
client
}
=
thunkArgs
;
let
breakpoint
=
getBreakpoint
(
getState
(
)
location
)
;
if
(
!
breakpoint
)
{
return
dispatch
(
addBreakpoint
(
cx
location
options
)
)
;
}
breakpoint
=
createBreakpoint
(
{
.
.
.
breakpoint
disabled
:
false
options
}
)
;
return
dispatch
(
{
type
:
"
SET_BREAKPOINT
"
breakpoint
[
PROMISE
]
:
clientSetBreakpoint
(
client
thunkArgs
breakpoint
)
}
)
;
}
;
}
async
function
updateExpression
(
parserWorker
mappings
originalExpression
)
{
const
mapped
=
await
parserWorker
.
mapExpression
(
originalExpression
mappings
[
]
false
false
)
;
if
(
!
mapped
)
{
return
originalExpression
;
}
if
(
!
originalExpression
.
trimEnd
(
)
.
endsWith
(
"
;
"
)
)
{
return
mapped
.
expression
.
replace
(
/
;
/
"
"
)
;
}
return
mapped
.
expression
;
}
function
updateBreakpointSourceMapping
(
breakpoint
)
{
return
async
(
{
getState
dispatch
parserWorker
}
)
=
>
{
const
options
=
{
.
.
.
breakpoint
.
options
}
;
const
mappedScopes
=
await
dispatch
(
getMappedScopesForLocation
(
breakpoint
.
location
)
)
;
if
(
!
mappedScopes
)
{
return
breakpoint
;
}
const
{
mappings
}
=
mappedScopes
;
if
(
options
.
condition
)
{
options
.
condition
=
await
updateExpression
(
parserWorker
mappings
options
.
condition
)
;
}
if
(
options
.
logValue
)
{
options
.
logValue
=
await
updateExpression
(
parserWorker
mappings
options
.
logValue
)
;
}
validateBreakpoint
(
getState
(
)
breakpoint
)
;
return
{
.
.
.
breakpoint
options
}
;
}
;
}
