import
{
setBreakpointPositions
}
from
"
.
/
breakpointPositions
"
;
import
{
findPosition
makeBreakpointServerLocation
}
from
"
.
.
/
.
.
/
utils
/
breakpoint
"
;
import
{
comparePosition
createLocation
}
from
"
.
.
/
.
.
/
utils
/
location
"
;
import
{
originalToGeneratedId
}
from
"
devtools
/
client
/
shared
/
source
-
map
-
loader
/
index
"
;
import
{
getSource
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
addBreakpoint
removeBreakpointAtGeneratedLocation
}
from
"
.
"
;
async
function
findBreakpointPosition
(
{
getState
dispatch
}
location
)
{
const
positions
=
await
dispatch
(
setBreakpointPositions
(
location
)
)
;
const
position
=
findPosition
(
positions
location
)
;
return
position
;
}
export
function
syncPendingBreakpoint
(
source
pendingBreakpoint
)
{
return
async
thunkArgs
=
>
{
const
{
getState
client
dispatch
}
=
thunkArgs
;
const
generatedSourceId
=
source
.
isOriginal
?
originalToGeneratedId
(
source
.
id
)
:
source
.
id
;
const
generatedSource
=
getSource
(
getState
(
)
generatedSourceId
)
;
if
(
!
source
|
|
!
generatedSource
)
{
return
null
;
}
const
{
location
generatedLocation
}
=
pendingBreakpoint
;
const
isPendingBreakpointWithSourceMap
=
location
.
sourceUrl
!
=
generatedLocation
.
sourceUrl
;
const
sourceGeneratedLocation
=
createLocation
(
{
.
.
.
generatedLocation
source
:
generatedSource
}
)
;
if
(
source
=
=
generatedSource
&
&
isPendingBreakpointWithSourceMap
)
{
const
breakpointServerLocation
=
makeBreakpointServerLocation
(
getState
(
)
sourceGeneratedLocation
)
;
return
dispatch
(
addBreakpoint
(
sourceGeneratedLocation
pendingBreakpoint
.
options
pendingBreakpoint
.
disabled
(
)
=
>
!
client
.
hasBreakpoint
(
breakpointServerLocation
)
)
)
;
}
const
originalLocation
=
createLocation
(
{
.
.
.
location
source
}
)
;
const
newPosition
=
await
findBreakpointPosition
(
thunkArgs
originalLocation
)
;
const
newGeneratedLocation
=
newPosition
?
.
generatedLocation
;
if
(
!
newGeneratedLocation
)
{
if
(
isPendingBreakpointWithSourceMap
)
{
dispatch
(
removeBreakpointAtGeneratedLocation
(
sourceGeneratedLocation
)
)
;
}
return
null
;
}
const
isSameLocation
=
comparePosition
(
generatedLocation
newGeneratedLocation
)
;
if
(
!
isSameLocation
)
{
dispatch
(
removeBreakpointAtGeneratedLocation
(
sourceGeneratedLocation
)
)
;
}
return
dispatch
(
addBreakpoint
(
newGeneratedLocation
pendingBreakpoint
.
options
pendingBreakpoint
.
disabled
)
)
;
}
;
}
