import
{
getExpression
getExpressions
getSelectedFrame
getSelectedFrameId
getSourceFromId
getSelectedSource
getSelectedScopeMappings
getSelectedFrameBindings
getCurrentThread
getIsPaused
isMapScopesEnabled
}
from
"
.
.
/
selectors
"
;
import
{
PROMISE
}
from
"
.
/
utils
/
middleware
/
promise
"
;
import
{
wrapExpression
}
from
"
.
.
/
utils
/
expressions
"
;
import
{
features
}
from
"
.
.
/
utils
/
prefs
"
;
import
{
isOriginal
}
from
"
.
.
/
utils
/
source
"
;
export
function
addExpression
(
cx
input
)
{
return
async
(
{
dispatch
getState
evaluationsParser
}
)
=
>
{
if
(
!
input
)
{
return
;
}
const
expressionError
=
await
evaluationsParser
.
hasSyntaxError
(
input
)
;
const
expression
=
getExpression
(
getState
(
)
input
)
;
if
(
expression
)
{
return
dispatch
(
evaluateExpression
(
cx
expression
)
)
;
}
dispatch
(
{
type
:
"
ADD_EXPRESSION
"
cx
input
expressionError
}
)
;
const
newExpression
=
getExpression
(
getState
(
)
input
)
;
if
(
newExpression
)
{
return
dispatch
(
evaluateExpression
(
cx
newExpression
)
)
;
}
}
;
}
export
function
autocomplete
(
cx
input
cursor
)
{
return
async
(
{
dispatch
getState
client
}
)
=
>
{
if
(
!
input
)
{
return
;
}
const
frameId
=
getSelectedFrameId
(
getState
(
)
cx
.
thread
)
;
const
result
=
await
client
.
autocomplete
(
input
cursor
frameId
)
;
await
dispatch
(
{
type
:
"
AUTOCOMPLETE
"
cx
input
result
}
)
;
}
;
}
export
function
clearAutocomplete
(
)
{
return
{
type
:
"
CLEAR_AUTOCOMPLETE
"
}
;
}
export
function
clearExpressionError
(
)
{
return
{
type
:
"
CLEAR_EXPRESSION_ERROR
"
}
;
}
export
function
updateExpression
(
cx
input
expression
)
{
return
async
(
{
dispatch
getState
parser
}
)
=
>
{
if
(
!
input
)
{
return
;
}
const
expressionError
=
await
parser
.
hasSyntaxError
(
input
)
;
dispatch
(
{
type
:
"
UPDATE_EXPRESSION
"
cx
expression
input
:
expressionError
?
expression
.
input
:
input
expressionError
}
)
;
dispatch
(
evaluateExpressions
(
cx
)
)
;
}
;
}
export
function
deleteExpression
(
expression
)
{
return
(
{
dispatch
}
)
=
>
{
dispatch
(
{
type
:
"
DELETE_EXPRESSION
"
input
:
expression
.
input
}
)
;
}
;
}
export
function
evaluateExpressions
(
cx
)
{
return
async
function
(
{
dispatch
getState
client
}
)
{
const
expressions
=
getExpressions
(
getState
(
)
)
;
const
inputs
=
expressions
.
map
(
(
{
input
}
)
=
>
input
)
;
const
frameId
=
getSelectedFrameId
(
getState
(
)
cx
.
thread
)
;
const
results
=
await
client
.
evaluateExpressions
(
inputs
{
frameId
}
)
;
dispatch
(
{
type
:
"
EVALUATE_EXPRESSIONS
"
cx
inputs
results
}
)
;
}
;
}
function
evaluateExpression
(
cx
expression
)
{
return
async
function
(
{
dispatch
getState
client
sourceMaps
}
)
{
if
(
!
expression
.
input
)
{
console
.
warn
(
"
Expressions
should
not
be
empty
"
)
;
return
;
}
let
{
input
}
=
expression
;
const
frame
=
getSelectedFrame
(
getState
(
)
cx
.
thread
)
;
if
(
frame
)
{
const
{
location
}
=
frame
;
const
source
=
getSourceFromId
(
getState
(
)
location
.
sourceId
)
;
const
selectedSource
=
getSelectedSource
(
getState
(
)
)
;
if
(
selectedSource
&
&
isOriginal
(
source
)
&
&
isOriginal
(
selectedSource
)
)
{
const
mapResult
=
await
dispatch
(
getMappedExpression
(
input
)
)
;
if
(
mapResult
)
{
input
=
mapResult
.
expression
;
}
}
}
const
frameId
=
getSelectedFrameId
(
getState
(
)
cx
.
thread
)
;
return
dispatch
(
{
type
:
"
EVALUATE_EXPRESSION
"
cx
thread
:
cx
.
thread
input
:
expression
.
input
[
PROMISE
]
:
client
.
evaluate
(
wrapExpression
(
input
)
{
frameId
}
)
}
)
;
}
;
}
export
function
getMappedExpression
(
expression
)
{
return
async
function
(
{
dispatch
getState
client
sourceMaps
evaluationsParser
}
)
{
const
thread
=
getCurrentThread
(
getState
(
)
)
;
const
mappings
=
getSelectedScopeMappings
(
getState
(
)
thread
)
;
const
bindings
=
getSelectedFrameBindings
(
getState
(
)
thread
)
;
const
shouldMapScopes
=
isMapScopesEnabled
(
getState
(
)
)
&
&
mappings
;
if
(
!
shouldMapScopes
&
&
!
expression
.
match
(
/
(
await
|
=
)
/
)
)
{
return
null
;
}
return
evaluationsParser
.
mapExpression
(
expression
mappings
bindings
|
|
[
]
features
.
mapExpressionBindings
&
&
getIsPaused
(
getState
(
)
thread
)
features
.
mapAwaitExpression
)
;
}
;
}
