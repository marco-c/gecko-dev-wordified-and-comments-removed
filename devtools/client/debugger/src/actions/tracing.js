import
{
getIsThreadCurrentlyTracing
getAllThreads
}
from
"
.
.
/
selectors
"
;
import
{
PROMISE
}
from
"
.
/
utils
/
middleware
/
promise
"
;
export
function
toggleTracing
(
logMethod
)
{
return
async
(
{
dispatch
getState
client
panel
}
)
=
>
{
const
threads
=
getAllThreads
(
getState
(
)
)
;
const
isTracingEnabled
=
threads
.
some
(
thread
=
>
getIsThreadCurrentlyTracing
(
getState
(
)
thread
.
actor
)
)
;
if
(
!
isTracingEnabled
&
&
logMethod
=
=
"
console
"
)
{
await
panel
.
toolbox
.
openSplitConsole
(
{
focusConsoleInput
:
false
}
)
;
}
return
dispatch
(
{
type
:
"
TOGGLE_TRACING
"
[
PROMISE
]
:
client
.
toggleTracing
(
logMethod
)
}
)
;
}
;
}
export
function
tracingToggled
(
thread
enabled
)
{
return
(
{
dispatch
}
)
=
>
{
dispatch
(
{
type
:
"
TRACING_TOGGLED
"
thread
enabled
}
)
;
}
;
}
