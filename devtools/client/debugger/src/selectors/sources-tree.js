import
{
createSelector
}
from
"
devtools
/
client
/
shared
/
vendor
/
reselect
"
;
export
const
getSourcesTreeSources
=
createSelector
(
getProjectDirectoryRoot
state
=
>
state
.
sourcesTree
.
threadItems
(
projectDirectoryRoot
threadItems
)
=
>
{
threadItems
=
threadItems
.
filter
(
item
=
>
!
!
item
.
thread
&
&
!
!
item
.
children
.
length
)
;
if
(
projectDirectoryRoot
)
{
const
directory
=
getDirectoryForUniquePath
(
projectDirectoryRoot
threadItems
)
;
if
(
directory
)
{
return
directory
.
children
;
}
return
[
]
;
}
return
threadItems
;
}
)
;
export
const
getDisplayedSourcesList
=
createSelector
(
getSourcesTreeSources
roots
=
>
{
const
sources
=
[
]
;
function
walk
(
item
)
{
if
(
item
.
type
=
=
"
source
"
)
{
sources
.
push
(
item
.
source
)
;
}
else
{
for
(
const
child
of
item
.
children
)
{
walk
(
child
)
;
}
}
}
for
(
const
root
of
roots
)
{
walk
(
root
)
;
}
return
sources
;
}
)
;
export
function
getExpandedState
(
state
)
{
return
state
.
sourcesTree
.
expanded
;
}
export
function
getFocusedSourceItem
(
state
)
{
return
state
.
sourcesTree
.
focusedItem
;
}
export
function
getProjectDirectoryRoot
(
state
)
{
return
state
.
sourcesTree
.
projectDirectoryRoot
;
}
export
function
getProjectDirectoryRootName
(
state
)
{
return
state
.
sourcesTree
.
projectDirectoryRootName
;
}
export
function
getProjectDirectoryRootFullName
(
state
)
{
return
state
.
sourcesTree
.
projectDirectoryRootFullName
;
}
export
function
getMainThreadProjectDirectoryRoots
(
state
)
{
return
state
.
sourcesTree
.
mainThreadProjectDirectoryRoots
;
}
function
getDirectoryForUniquePath
(
projectRoot
threadItems
)
{
const
sections
=
projectRoot
.
split
(
"
|
"
)
;
const
thread
=
sections
.
shift
(
)
;
const
threadItem
=
threadItems
.
find
(
item
=
>
item
.
uniquePath
=
=
thread
)
;
if
(
!
threadItem
)
{
dump
(
No
thread
item
for
:
{
projectRoot
}
-
-
{
thread
}
-
-
{
Object
.
keys
(
threadItems
)
}
\
n
)
;
return
null
;
}
if
(
!
sections
.
length
)
{
return
threadItem
;
}
const
group
=
sections
.
shift
(
)
;
for
(
const
child
of
threadItem
.
children
)
{
if
(
child
.
groupName
!
=
group
)
{
continue
;
}
if
(
!
sections
.
length
)
{
return
child
;
}
const
path
=
sections
.
shift
(
)
;
return
findPathInDirectory
(
child
path
)
;
}
return
null
;
function
findPathInDirectory
(
directory
path
)
{
for
(
const
child
of
directory
.
children
)
{
if
(
child
.
type
=
=
"
directory
"
)
{
if
(
child
.
path
=
=
path
)
{
return
child
;
}
if
(
!
path
.
startsWith
(
child
.
path
)
)
{
continue
;
}
const
match
=
findPathInDirectory
(
child
path
)
;
if
(
match
)
{
return
match
;
}
}
}
return
null
;
}
}
