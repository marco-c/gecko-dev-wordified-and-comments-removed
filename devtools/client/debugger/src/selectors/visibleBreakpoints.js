import
{
createSelector
}
from
"
devtools
/
client
/
shared
/
vendor
/
reselect
"
;
import
{
getBreakpointsList
}
from
"
.
/
breakpoints
"
;
import
{
getSelectedSource
}
from
"
.
/
sources
"
;
import
{
sortSelectedBreakpoints
}
from
"
.
.
/
utils
/
breakpoint
/
index
"
;
import
{
getSelectedLocation
}
from
"
.
.
/
utils
/
selected
-
location
"
;
export
const
getVisibleBreakpoints
=
createSelector
(
getSelectedSource
getBreakpointsList
(
selectedSource
breakpoints
)
=
>
{
if
(
!
selectedSource
)
{
return
null
;
}
return
breakpoints
.
filter
(
breakpoint
=
>
selectedSource
&
&
getSelectedLocation
(
breakpoint
selectedSource
)
?
.
source
.
id
=
=
=
selectedSource
.
id
&
&
!
breakpoint
.
options
.
hidden
)
;
}
)
;
export
const
getFirstVisibleBreakpoints
=
createSelector
(
getVisibleBreakpoints
getSelectedSource
(
breakpoints
selectedSource
)
=
>
{
if
(
!
breakpoints
|
|
!
selectedSource
)
{
return
[
]
;
}
const
handledLines
=
new
Set
(
)
;
return
sortSelectedBreakpoints
(
breakpoints
selectedSource
)
.
filter
(
bp
=
>
{
const
line
=
getSelectedLocation
(
bp
selectedSource
)
.
line
;
if
(
handledLines
.
has
(
line
)
)
{
return
false
;
}
handledLines
.
add
(
line
)
;
return
true
;
}
)
;
}
)
;
