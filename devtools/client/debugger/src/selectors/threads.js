import
{
createSelector
}
from
"
reselect
"
;
export
const
getThreads
=
createSelector
(
state
=
>
state
.
threads
.
threads
threads
=
>
threads
.
filter
(
thread
=
>
!
isMainThread
(
thread
)
)
)
;
export
const
getAllThreads
=
createSelector
(
getMainThread
getThreads
(
mainThread
threads
)
=
>
{
const
orderedThreads
=
Array
.
from
(
threads
)
.
sort
(
(
threadA
threadB
)
=
>
{
if
(
threadA
.
name
=
=
=
threadB
.
name
)
{
return
0
;
}
return
threadA
.
name
<
threadB
.
name
?
-
1
:
1
;
}
)
;
return
[
mainThread
.
.
.
orderedThreads
]
.
filter
(
Boolean
)
;
}
)
;
function
isMainThread
(
thread
)
{
return
thread
.
isTopLevel
;
}
export
function
getMainThread
(
state
)
{
return
state
.
threads
.
threads
.
find
(
isMainThread
)
;
}
export
function
getDebuggeeUrl
(
state
)
{
return
getMainThread
(
state
)
?
.
url
|
|
"
"
;
}
export
function
getThread
(
state
threadActor
)
{
return
getAllThreads
(
state
)
.
find
(
thread
=
>
thread
.
actor
=
=
=
threadActor
)
;
}
export
function
startsWithThreadActor
(
state
path
)
{
const
threadActors
=
getAllThreads
(
state
)
.
map
(
t
=
>
t
.
actor
)
;
const
match
=
path
.
match
(
new
RegExp
(
(
{
threadActors
.
join
(
"
|
"
)
}
)
\
/
(
.
*
)
)
)
;
return
match
?
.
[
1
]
;
}
