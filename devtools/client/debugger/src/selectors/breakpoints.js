import
{
createSelector
}
from
"
reselect
"
;
import
{
isGeneratedId
}
from
"
devtools
/
client
/
shared
/
source
-
map
-
loader
/
index
"
;
import
{
makeBreakpointId
}
from
"
.
.
/
utils
/
breakpoint
"
;
export
function
getBreakpointsMap
(
state
)
{
return
state
.
breakpoints
.
breakpoints
;
}
export
const
getBreakpointsList
=
createSelector
(
state
=
>
state
.
breakpoints
.
breakpoints
breakpoints
=
>
Object
.
values
(
breakpoints
)
)
;
export
function
getBreakpointCount
(
state
)
{
return
getBreakpointsList
(
state
)
.
length
;
}
export
function
getBreakpoint
(
state
location
)
{
if
(
!
location
)
{
return
undefined
;
}
const
breakpoints
=
getBreakpointsMap
(
state
)
;
return
breakpoints
[
makeBreakpointId
(
location
)
]
;
}
export
function
getBreakpointsForSource
(
state
source
lines
)
{
if
(
!
source
)
{
return
[
]
;
}
const
isGeneratedSource
=
isGeneratedId
(
source
.
id
)
;
const
breakpoints
=
getBreakpointsList
(
state
)
;
return
breakpoints
.
filter
(
bp
=
>
{
const
location
=
isGeneratedSource
?
bp
.
generatedLocation
:
bp
.
location
;
if
(
lines
)
{
const
isOnLineOrWithinRange
=
typeof
lines
=
=
"
number
"
?
location
.
line
=
=
lines
:
location
.
line
>
=
lines
.
start
.
line
&
&
location
.
line
<
=
lines
.
end
.
line
;
return
location
.
source
=
=
=
source
&
&
isOnLineOrWithinRange
;
}
return
location
.
source
=
=
=
source
;
}
)
;
}
export
function
getHiddenBreakpoint
(
state
)
{
const
breakpoints
=
getBreakpointsList
(
state
)
;
return
breakpoints
.
find
(
bp
=
>
bp
.
options
.
hidden
)
;
}
export
function
hasLogpoint
(
state
location
)
{
const
breakpoint
=
getBreakpoint
(
state
location
)
;
return
breakpoint
?
.
options
.
logValue
;
}
export
function
getXHRBreakpoints
(
state
)
{
return
state
.
breakpoints
.
xhrBreakpoints
;
}
export
const
shouldPauseOnAnyXHR
=
createSelector
(
getXHRBreakpoints
xhrBreakpoints
=
>
{
const
emptyBp
=
xhrBreakpoints
.
find
(
(
{
path
}
)
=
>
path
.
length
=
=
=
0
)
;
if
(
!
emptyBp
)
{
return
false
;
}
return
!
emptyBp
.
disabled
;
}
)
;
