import
{
createSelector
}
from
"
devtools
/
client
/
shared
/
vendor
/
reselect
"
;
import
{
getViewport
getSelectedSource
getSelectedSourceTextContent
getBreakpointPositionsForSource
}
from
"
.
/
index
"
;
import
{
getVisibleBreakpoints
}
from
"
.
/
visibleBreakpoints
"
;
import
{
getSelectedLocation
}
from
"
.
.
/
utils
/
selected
-
location
"
;
import
{
sortSelectedLocations
}
from
"
.
.
/
utils
/
location
"
;
import
{
getLineText
}
from
"
.
.
/
utils
/
source
"
;
function
contains
(
location
range
)
{
return
(
(
location
.
line
>
range
.
start
.
line
&
&
location
.
line
<
range
.
end
.
line
)
|
|
(
location
.
line
=
=
range
.
start
.
line
&
&
location
.
column
>
=
range
.
start
.
column
)
|
|
(
location
.
line
=
=
range
.
end
.
line
&
&
location
.
column
<
=
range
.
end
.
column
)
)
;
}
function
convertToList
(
breakpointPositions
)
{
return
[
]
.
concat
(
.
.
.
Object
.
values
(
breakpointPositions
)
)
;
}
export
function
getColumnBreakpoints
(
positions
breakpoints
viewport
selectedSource
selectedSourceTextContent
)
{
if
(
!
positions
|
|
!
selectedSource
|
|
!
breakpoints
.
length
|
|
!
viewport
)
{
return
[
]
;
}
const
breakpointsPerLine
=
new
Map
(
)
;
for
(
const
breakpoint
of
breakpoints
)
{
if
(
breakpoint
.
options
.
hidden
)
{
continue
;
}
const
location
=
getSelectedLocation
(
breakpoint
selectedSource
)
;
const
{
line
}
=
location
;
let
breakpointsPerColumn
=
breakpointsPerLine
.
get
(
line
)
;
if
(
!
breakpointsPerColumn
)
{
breakpointsPerColumn
=
new
Map
(
)
;
breakpointsPerLine
.
set
(
line
breakpointsPerColumn
)
;
}
breakpointsPerColumn
.
set
(
location
.
column
breakpoint
)
;
}
const
columnBreakpoints
=
[
]
;
for
(
const
keyLine
in
positions
)
{
const
positionsPerLine
=
positions
[
keyLine
]
;
if
(
positionsPerLine
.
length
<
=
1
)
{
continue
;
}
for
(
const
breakpointPosition
of
positionsPerLine
)
{
if
(
columnBreakpoints
.
length
>
=
100
)
{
continue
;
}
const
location
=
getSelectedLocation
(
breakpointPosition
selectedSource
)
;
if
(
!
contains
(
location
viewport
)
)
{
continue
;
}
const
{
line
}
=
location
;
const
breakpointsPerColumn
=
breakpointsPerLine
.
get
(
line
)
;
if
(
!
breakpointsPerColumn
)
{
continue
;
}
const
{
column
}
=
location
;
if
(
column
)
{
const
lineText
=
getLineText
(
selectedSource
.
id
selectedSourceTextContent
line
)
;
if
(
column
>
lineText
.
length
)
{
continue
;
}
}
const
breakpoint
=
breakpointsPerColumn
.
get
(
column
)
;
columnBreakpoints
.
push
(
{
location
breakpoint
}
)
;
}
}
return
columnBreakpoints
;
}
function
getVisibleBreakpointPositions
(
state
)
{
const
source
=
getSelectedSource
(
state
)
;
if
(
!
source
)
{
return
null
;
}
return
getBreakpointPositionsForSource
(
state
source
.
id
)
;
}
export
const
visibleColumnBreakpoints
=
createSelector
(
getVisibleBreakpointPositions
getVisibleBreakpoints
getViewport
getSelectedSource
getSelectedSourceTextContent
getColumnBreakpoints
)
;
export
function
getFirstBreakpointPosition
(
state
location
)
{
const
positions
=
getBreakpointPositionsForSource
(
state
location
.
source
.
id
)
;
if
(
!
positions
)
{
return
null
;
}
return
sortSelectedLocations
(
convertToList
(
positions
)
location
.
source
)
.
find
(
position
=
>
getSelectedLocation
(
position
location
.
source
)
.
line
=
=
location
.
line
)
;
}
