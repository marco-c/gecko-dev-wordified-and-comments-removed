import
{
asSettled
}
from
"
.
.
/
utils
/
async
-
value
"
;
export
function
hasSourceActor
(
state
id
)
{
return
state
.
sourceActors
.
has
(
id
)
;
}
export
function
getSourceActor
(
state
id
)
{
return
state
.
sourceActors
.
get
(
id
)
;
}
export
function
getSourceActors
(
state
ids
)
{
return
ids
.
map
(
id
=
>
getSourceActor
(
state
id
)
)
.
filter
(
source
=
>
!
!
source
)
;
}
export
function
getSourceActorsForThread
(
state
ids
)
{
if
(
!
Array
.
isArray
(
ids
)
)
{
ids
=
[
ids
]
;
}
const
actors
=
[
]
;
for
(
const
sourceActor
of
state
.
sourceActors
.
values
(
)
)
{
if
(
ids
.
includes
(
sourceActor
.
thread
)
)
{
actors
.
push
(
sourceActor
)
;
}
}
return
actors
;
}
export
function
getSourceActorBreakableLines
(
state
id
)
{
const
{
breakableLines
}
=
getSourceActor
(
state
id
)
;
return
asSettled
(
breakableLines
)
;
}
export
function
getBreakableLinesForSourceActors
(
state
ids
isHTML
)
{
const
allBreakableLines
=
[
]
;
for
(
const
id
of
ids
)
{
const
{
breakableLines
}
=
getSourceActor
(
state
id
)
;
if
(
breakableLines
&
&
breakableLines
.
state
=
=
"
fulfilled
"
)
{
if
(
isHTML
)
{
allBreakableLines
.
push
(
.
.
.
breakableLines
.
value
)
;
}
else
{
return
breakableLines
.
value
;
}
}
}
return
allBreakableLines
;
}
