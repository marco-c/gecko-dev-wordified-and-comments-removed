import
{
createSelector
}
from
"
devtools
/
client
/
shared
/
vendor
/
reselect
"
;
import
{
shallowEqual
arrayShallowEqual
}
from
"
.
.
/
utils
/
shallow
-
equal
"
;
import
{
getSelectedSource
getSourceActorsForSource
}
from
"
.
/
index
"
;
export
const
getSelectedSourceExceptions
=
createSelector
(
getSelectedSourceActors
state
=
>
state
.
exceptions
(
sourceActors
exceptionsState
)
=
>
{
const
{
mutableExceptionsMap
}
=
exceptionsState
;
const
sourceExceptions
=
[
]
;
for
(
const
sourceActor
of
sourceActors
)
{
const
exceptions
=
mutableExceptionsMap
.
get
(
sourceActor
.
id
)
;
if
(
exceptions
)
{
sourceExceptions
.
push
(
.
.
.
exceptions
)
;
}
}
return
sourceExceptions
;
}
{
memoizeOptions
:
{
equalityCheck
:
shallowEqual
resultEqualityCheck
:
arrayShallowEqual
}
}
)
;
function
getSelectedSourceActors
(
state
)
{
const
selectedSource
=
getSelectedSource
(
state
)
;
if
(
!
selectedSource
)
{
return
[
]
;
}
return
getSourceActorsForSource
(
state
selectedSource
.
id
)
;
}
export
function
getSelectedException
(
state
line
column
)
{
const
sourceExceptions
=
getSelectedSourceExceptions
(
state
)
;
if
(
!
sourceExceptions
)
{
return
undefined
;
}
return
sourceExceptions
.
find
(
sourceExc
=
>
sourceExc
.
lineNumber
=
=
=
line
&
&
sourceExc
.
columnNumber
=
=
=
column
)
;
}
