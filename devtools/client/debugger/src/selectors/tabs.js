import
{
createSelector
}
from
"
reselect
"
;
import
{
makeShallowQuery
}
from
"
.
.
/
utils
/
resource
"
;
import
{
getPrettySourceURL
}
from
"
.
.
/
utils
/
source
"
;
import
{
getSource
getSpecificSourceByURL
getSources
resourceAsSourceBase
}
from
"
.
.
/
selectors
/
sources
"
;
import
{
isOriginalId
}
from
"
devtools
-
source
-
map
"
;
import
{
isSimilarTab
}
from
"
.
.
/
utils
/
tabs
"
;
export
const
getTabs
=
state
=
>
state
.
tabs
.
tabs
;
export
const
getSourceTabs
=
createSelector
(
state
=
>
state
.
tabs
(
{
tabs
}
)
=
>
tabs
.
filter
(
tab
=
>
tab
.
sourceId
)
)
;
export
const
getSourcesForTabs
=
state
=
>
{
const
tabs
=
getSourceTabs
(
state
)
;
const
sources
=
getSources
(
state
)
;
return
querySourcesForTabs
(
sources
tabs
)
;
}
;
const
querySourcesForTabs
=
makeShallowQuery
(
{
filter
:
(
_
tabs
)
=
>
tabs
.
map
(
(
{
sourceId
}
)
=
>
sourceId
)
map
:
resourceAsSourceBase
reduce
:
items
=
>
items
}
)
;
export
function
tabExists
(
state
sourceId
)
{
return
!
!
getSourceTabs
(
state
)
.
find
(
tab
=
>
tab
.
sourceId
=
=
sourceId
)
;
}
export
function
hasPrettyTab
(
state
sourceUrl
)
{
const
prettyUrl
=
getPrettySourceURL
(
sourceUrl
)
;
return
!
!
getSourceTabs
(
state
)
.
find
(
tab
=
>
tab
.
url
=
=
=
prettyUrl
)
;
}
export
function
getNewSelectedSourceId
(
state
tabList
)
{
const
{
selectedLocation
}
=
state
.
sources
;
const
availableTabs
=
state
.
tabs
.
tabs
;
if
(
!
selectedLocation
)
{
return
"
"
;
}
const
selectedTab
=
getSource
(
state
selectedLocation
.
sourceId
)
;
if
(
!
selectedTab
)
{
return
"
"
;
}
const
matchingTab
=
availableTabs
.
find
(
tab
=
>
isSimilarTab
(
tab
selectedTab
.
url
isOriginalId
(
selectedLocation
.
sourceId
)
)
)
;
if
(
matchingTab
)
{
const
{
sources
}
=
state
.
sources
;
if
(
!
sources
)
{
return
"
"
;
}
const
selectedSource
=
getSpecificSourceByURL
(
state
selectedTab
.
url
selectedTab
.
isOriginal
)
;
if
(
selectedSource
)
{
return
selectedSource
.
id
;
}
return
"
"
;
}
const
tabUrls
=
tabList
.
map
(
tab
=
>
tab
.
url
)
;
const
leftNeighborIndex
=
Math
.
max
(
tabUrls
.
indexOf
(
selectedTab
.
url
)
-
1
0
)
;
const
lastAvailbleTabIndex
=
availableTabs
.
length
-
1
;
const
newSelectedTabIndex
=
Math
.
min
(
leftNeighborIndex
lastAvailbleTabIndex
)
;
const
availableTab
=
availableTabs
[
newSelectedTabIndex
]
;
if
(
availableTab
)
{
const
tabSource
=
getSpecificSourceByURL
(
state
availableTab
.
url
availableTab
.
isOriginal
)
;
if
(
tabSource
)
{
return
tabSource
.
id
;
}
}
return
"
"
;
}
