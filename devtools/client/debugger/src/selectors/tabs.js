import
{
createSelector
}
from
"
reselect
"
;
import
{
getPrettySourceURL
}
from
"
.
.
/
utils
/
source
"
;
import
{
getSpecificSourceByURL
}
from
"
.
/
sources
"
;
import
{
isOriginalId
}
from
"
devtools
/
client
/
shared
/
source
-
map
-
loader
/
index
"
;
import
{
isSimilarTab
}
from
"
.
.
/
utils
/
tabs
"
;
export
const
getTabs
=
state
=
>
state
.
tabs
.
tabs
;
export
const
getSourceTabs
=
createSelector
(
getTabs
tabs
=
>
tabs
.
filter
(
tab
=
>
tab
.
source
)
)
;
export
const
getSourcesForTabs
=
createSelector
(
getSourceTabs
sourceTabs
=
>
{
return
sourceTabs
.
map
(
tab
=
>
tab
.
source
)
;
}
)
;
export
function
tabExists
(
state
sourceId
)
{
return
!
!
getSourceTabs
(
state
)
.
find
(
tab
=
>
tab
.
source
.
id
=
=
sourceId
)
;
}
export
function
hasPrettyTab
(
state
sourceUrl
)
{
const
prettyUrl
=
getPrettySourceURL
(
sourceUrl
)
;
return
!
!
getSourceTabs
(
state
)
.
find
(
tab
=
>
tab
.
url
=
=
=
prettyUrl
)
;
}
export
function
getNewSelectedSource
(
state
tabList
)
{
const
{
selectedLocation
}
=
state
.
sources
;
const
availableTabs
=
getTabs
(
state
)
;
if
(
!
selectedLocation
)
{
return
null
;
}
const
selectedSource
=
selectedLocation
.
source
;
if
(
!
selectedSource
)
{
return
null
;
}
const
matchingTab
=
availableTabs
.
find
(
tab
=
>
isSimilarTab
(
tab
selectedSource
.
url
isOriginalId
(
selectedSource
.
id
)
)
)
;
if
(
matchingTab
)
{
const
specificSelectedSource
=
getSpecificSourceByURL
(
state
selectedSource
.
url
selectedSource
.
isOriginal
)
;
if
(
specificSelectedSource
)
{
return
specificSelectedSource
;
}
return
null
;
}
const
tabUrls
=
tabList
.
map
(
tab
=
>
tab
.
url
)
;
const
leftNeighborIndex
=
Math
.
max
(
tabUrls
.
indexOf
(
selectedSource
.
url
)
-
1
0
)
;
const
lastAvailbleTabIndex
=
availableTabs
.
length
-
1
;
const
newSelectedTabIndex
=
Math
.
min
(
leftNeighborIndex
lastAvailbleTabIndex
)
;
const
availableTab
=
availableTabs
[
newSelectedTabIndex
]
;
if
(
availableTab
)
{
const
tabSource
=
getSpecificSourceByURL
(
state
availableTab
.
url
availableTab
.
isOriginal
)
;
if
(
tabSource
)
{
return
tabSource
;
}
}
return
null
;
}
