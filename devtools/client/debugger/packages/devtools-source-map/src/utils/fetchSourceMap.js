const
{
networkRequest
}
=
require
(
"
devtools
-
utils
"
)
;
const
{
getSourceMap
setSourceMap
}
=
require
(
"
.
/
sourceMapRequests
"
)
;
const
{
WasmRemap
}
=
require
(
"
.
/
wasmRemap
"
)
;
const
{
SourceMapConsumer
}
=
require
(
"
source
-
map
"
)
;
const
{
convertToJSON
}
=
require
(
"
devtools
-
wasm
-
dwarf
"
)
;
const
{
createConsumer
}
=
require
(
"
.
/
createConsumer
"
)
;
import
type
{
Source
}
from
"
debugger
-
html
"
;
const
originalURLs
=
new
Set
(
)
;
function
clearOriginalURLs
(
)
{
originalURLs
.
clear
(
)
;
}
function
hasOriginalURL
(
url
:
string
)
:
boolean
{
return
originalURLs
.
has
(
url
)
;
}
function
_resolveSourceMapURL
(
source
:
Source
)
{
const
{
url
=
"
"
sourceMapURL
=
"
"
}
=
source
;
if
(
!
url
)
{
return
{
sourceMapURL
baseURL
:
sourceMapURL
}
;
}
const
resolvedURL
=
new
URL
(
sourceMapURL
url
)
;
const
resolvedString
=
resolvedURL
.
toString
(
)
;
let
baseURL
=
resolvedString
;
if
(
resolvedURL
.
protocol
=
=
"
data
:
"
)
{
baseURL
=
url
;
}
return
{
sourceMapURL
:
resolvedString
baseURL
}
;
}
async
function
_resolveAndFetch
(
generatedSource
:
Source
)
:
SourceMapConsumer
{
const
{
sourceMapURL
baseURL
}
=
_resolveSourceMapURL
(
generatedSource
)
;
let
fetched
=
await
networkRequest
(
sourceMapURL
{
loadFromCache
:
false
}
)
;
if
(
fetched
.
isDwarf
)
{
fetched
=
{
content
:
await
convertToJSON
(
fetched
.
content
)
}
;
}
let
map
=
await
createConsumer
(
fetched
.
content
baseURL
)
;
if
(
generatedSource
.
isWasm
)
{
map
=
new
WasmRemap
(
map
)
;
if
(
fetched
.
content
.
includes
(
"
x
-
scopes
"
)
)
{
const
parsedJSON
=
JSON
.
parse
(
fetched
.
content
)
;
map
.
xScopes
=
parsedJSON
[
"
x
-
scopes
"
]
;
}
}
if
(
map
&
&
map
.
sources
)
{
map
.
sources
.
forEach
(
url
=
>
originalURLs
.
add
(
url
)
)
;
}
return
map
;
}
function
fetchSourceMap
(
generatedSource
:
Source
)
:
SourceMapConsumer
{
const
existingRequest
=
getSourceMap
(
generatedSource
.
id
)
;
if
(
existingRequest
)
{
return
existingRequest
;
}
if
(
!
generatedSource
.
sourceMapURL
)
{
return
null
;
}
const
req
=
_resolveAndFetch
(
generatedSource
)
;
setSourceMap
(
generatedSource
.
id
req
.
catch
(
(
)
=
>
null
)
)
;
return
req
;
}
module
.
exports
=
{
fetchSourceMap
hasOriginalURL
clearOriginalURLs
}
;
