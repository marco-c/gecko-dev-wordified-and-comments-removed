const
React
=
require
(
"
react
"
)
;
const
ReactDOM
=
require
(
"
react
-
dom
"
)
;
const
Draggable
=
React
.
createFactory
(
require
(
"
.
/
Draggable
"
)
)
;
const
{
Component
}
=
React
;
const
PropTypes
=
require
(
"
prop
-
types
"
)
;
const
dom
=
require
(
"
react
-
dom
-
factories
"
)
;
require
(
"
.
/
SplitBox
.
css
"
)
;
class
SplitBox
extends
Component
{
static
get
propTypes
(
)
{
return
{
className
:
PropTypes
.
string
initialSize
:
PropTypes
.
any
initialWidth
:
PropTypes
.
number
initialHeight
:
PropTypes
.
number
startPanel
:
PropTypes
.
any
startPanelCollapsed
:
PropTypes
.
bool
minSize
:
PropTypes
.
any
maxSize
:
PropTypes
.
any
endPanel
:
PropTypes
.
any
endPanelCollapsed
:
PropTypes
.
bool
endPanelControl
:
PropTypes
.
bool
splitterSize
:
PropTypes
.
number
vert
:
PropTypes
.
bool
style
:
PropTypes
.
object
onResizeEnd
:
PropTypes
.
func
}
;
}
static
get
defaultProps
(
)
{
return
{
splitterSize
:
5
vert
:
true
endPanelControl
:
false
endPanelCollapsed
:
false
startPanelCollapsed
:
false
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
vert
:
props
.
vert
width
:
parseInt
(
props
.
initialWidth
|
|
props
.
initialSize
10
)
height
:
parseInt
(
props
.
initialHeight
|
|
props
.
initialSize
10
)
}
;
this
.
onStartMove
=
this
.
onStartMove
.
bind
(
this
)
;
this
.
onStopMove
=
this
.
onStopMove
.
bind
(
this
)
;
this
.
onMove
=
this
.
onMove
.
bind
(
this
)
;
this
.
preparePanelStyles
=
this
.
preparePanelStyles
.
bind
(
this
)
;
}
componentWillReceiveProps
(
nextProps
)
{
if
(
this
.
props
.
vert
!
=
=
nextProps
.
vert
)
{
this
.
setState
(
{
vert
:
nextProps
.
vert
}
)
;
}
if
(
this
.
props
.
initialSize
!
=
=
nextProps
.
initialSize
|
|
this
.
props
.
initialWidth
!
=
=
nextProps
.
initialWidth
|
|
this
.
props
.
initialHeight
!
=
=
nextProps
.
initialHeight
)
{
this
.
setState
(
{
width
:
parseInt
(
nextProps
.
initialWidth
|
|
nextProps
.
initialSize
10
)
height
:
parseInt
(
nextProps
.
initialHeight
|
|
nextProps
.
initialSize
10
)
}
)
;
}
}
onStartMove
(
)
{
const
splitBox
=
ReactDOM
.
findDOMNode
(
this
)
;
const
doc
=
splitBox
.
ownerDocument
;
const
defaultCursor
=
doc
.
documentElement
.
style
.
cursor
;
doc
.
documentElement
.
style
.
cursor
=
this
.
state
.
vert
?
"
ew
-
resize
"
:
"
ns
-
resize
"
;
splitBox
.
classList
.
add
(
"
dragging
"
)
;
document
.
dispatchEvent
(
new
CustomEvent
(
"
drag
:
start
"
)
)
;
this
.
setState
(
{
defaultCursor
:
defaultCursor
}
)
;
}
onStopMove
(
)
{
const
splitBox
=
ReactDOM
.
findDOMNode
(
this
)
;
const
doc
=
splitBox
.
ownerDocument
;
doc
.
documentElement
.
style
.
cursor
=
this
.
state
.
defaultCursor
;
splitBox
.
classList
.
remove
(
"
dragging
"
)
;
document
.
dispatchEvent
(
new
CustomEvent
(
"
drag
:
end
"
)
)
;
if
(
this
.
props
.
onResizeEnd
)
{
this
.
props
.
onResizeEnd
(
this
.
state
.
vert
?
this
.
state
.
width
:
this
.
state
.
height
)
;
}
}
onMove
(
{
clientX
movementY
}
)
{
const
node
=
ReactDOM
.
findDOMNode
(
this
)
;
const
doc
=
node
.
ownerDocument
;
if
(
this
.
props
.
endPanelControl
)
{
clientX
=
node
.
clientWidth
-
clientX
;
movementY
=
-
movementY
;
}
if
(
this
.
state
.
vert
)
{
const
isRtl
=
doc
.
dir
=
=
=
"
rtl
"
;
if
(
isRtl
)
{
const
fullWidth
=
node
.
clientWidth
+
node
.
offsetLeft
;
clientX
=
fullWidth
-
clientX
;
}
this
.
setState
(
(
state
props
)
=
>
(
{
width
:
clientX
}
)
)
;
}
else
{
this
.
setState
(
(
state
props
)
=
>
(
{
height
:
state
.
height
+
movementY
}
)
)
;
}
}
preparePanelStyles
(
)
{
const
vert
=
this
.
state
.
vert
;
const
{
minSize
maxSize
startPanelCollapsed
endPanelControl
endPanelCollapsed
}
=
this
.
props
;
let
leftPanelStyle
rightPanelStyle
;
if
(
vert
)
{
const
startWidth
=
endPanelControl
?
null
:
this
.
state
.
width
endWidth
=
endPanelControl
?
this
.
state
.
width
:
null
;
leftPanelStyle
=
{
maxWidth
:
endPanelControl
?
null
:
maxSize
minWidth
:
endPanelControl
?
null
:
minSize
width
:
startPanelCollapsed
?
0
:
startWidth
}
;
rightPanelStyle
=
{
maxWidth
:
endPanelControl
?
maxSize
:
null
minWidth
:
endPanelControl
?
minSize
:
null
width
:
endPanelCollapsed
?
0
:
endWidth
}
;
}
else
{
const
startHeight
=
endPanelControl
?
null
:
this
.
state
.
height
endHeight
=
endPanelControl
?
this
.
state
.
height
:
null
;
leftPanelStyle
=
{
maxHeight
:
endPanelControl
?
null
:
maxSize
minHeight
:
endPanelControl
?
null
:
minSize
height
:
endPanelCollapsed
?
maxSize
:
startHeight
}
;
rightPanelStyle
=
{
maxHeight
:
endPanelControl
?
maxSize
:
null
minHeight
:
endPanelControl
?
minSize
:
null
height
:
startPanelCollapsed
?
maxSize
:
endHeight
}
;
}
return
{
leftPanelStyle
rightPanelStyle
}
;
}
render
(
)
{
const
vert
=
this
.
state
.
vert
;
const
{
startPanelCollapsed
startPanel
endPanel
endPanelControl
splitterSize
endPanelCollapsed
}
=
this
.
props
;
const
style
=
Object
.
assign
(
{
}
this
.
props
.
style
)
;
let
classNames
=
[
"
split
-
box
"
]
;
classNames
.
push
(
vert
?
"
vert
"
:
"
horz
"
)
;
if
(
this
.
props
.
className
)
{
classNames
=
classNames
.
concat
(
this
.
props
.
className
.
split
(
"
"
)
)
;
}
const
{
leftPanelStyle
rightPanelStyle
}
=
this
.
preparePanelStyles
(
)
;
const
splitterStyle
=
{
flex
:
0
0
{
splitterSize
}
px
}
;
return
dom
.
div
(
{
className
:
classNames
.
join
(
"
"
)
style
:
style
}
!
startPanelCollapsed
?
dom
.
div
(
{
className
:
endPanelControl
?
"
uncontrolled
"
:
"
controlled
"
style
:
leftPanelStyle
}
startPanel
)
:
null
Draggable
(
{
className
:
"
splitter
"
style
:
splitterStyle
onStart
:
this
.
onStartMove
onStop
:
this
.
onStopMove
onMove
:
this
.
onMove
}
)
!
endPanelCollapsed
?
dom
.
div
(
{
className
:
endPanelControl
?
"
controlled
"
:
"
uncontrolled
"
style
:
rightPanelStyle
}
endPanel
)
:
null
)
;
}
}
module
.
exports
=
SplitBox
;
