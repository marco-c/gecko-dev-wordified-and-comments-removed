import
Services
from
"
devtools
-
services
"
;
const
{
appinfo
}
=
Services
;
const
isMacOS
=
appinfo
.
OS
=
=
=
"
Darwin
"
;
const
EventEmitter
=
require
(
"
.
.
/
utils
/
event
-
emitter
"
)
;
function
formatKeyShortcut
(
shortcut
)
{
if
(
isMacOS
)
{
return
shortcut
.
replace
(
/
Shift
\
+
/
g
"
\
u21E7
"
)
.
replace
(
/
Command
\
+
|
Cmd
\
+
/
g
"
\
u2318
"
)
.
replace
(
/
CommandOrControl
\
+
|
CmdOrCtrl
\
+
/
g
"
\
u2318
"
)
.
replace
(
/
Alt
\
+
/
g
"
\
u2325
"
)
;
}
return
shortcut
.
replace
(
/
CommandOrControl
\
+
|
CmdOrCtrl
\
+
/
g
{
L10N
.
getStr
(
"
ctrl
"
)
}
+
)
.
replace
(
/
Shift
\
+
/
g
"
Shift
+
"
)
;
}
function
inToolbox
(
)
{
try
{
return
window
.
parent
.
document
.
documentURI
.
startsWith
(
"
about
:
devtools
-
toolbox
"
)
;
}
catch
(
e
)
{
return
true
;
}
}
function
getTopWindow
(
win
)
{
return
win
.
windowRoot
?
win
.
windowRoot
.
ownerGlobal
:
win
.
top
;
}
function
Menu
(
{
id
=
null
}
=
{
}
)
{
this
.
menuitems
=
[
]
;
this
.
id
=
id
;
Object
.
defineProperty
(
this
"
items
"
{
get
(
)
{
return
this
.
menuitems
;
}
}
)
;
EventEmitter
.
decorate
(
this
)
;
}
Menu
.
prototype
.
append
=
function
(
menuItem
)
{
this
.
menuitems
.
push
(
menuItem
)
;
}
;
Menu
.
prototype
.
insert
=
function
(
pos
menuItem
)
{
throw
Error
(
"
Not
implemented
"
)
;
}
;
Menu
.
prototype
.
popup
=
function
(
screenX
screenY
doc
)
{
const
win
=
doc
.
defaultView
;
doc
=
getTopWindow
(
doc
.
defaultView
)
.
document
;
let
popupset
=
doc
.
querySelector
(
"
popupset
"
)
;
if
(
!
popupset
)
{
popupset
=
doc
.
createXULElement
(
"
popupset
"
)
;
doc
.
documentElement
.
appendChild
(
popupset
)
;
}
let
popup
=
popupset
.
querySelector
(
"
menupopup
[
menu
-
api
=
\
"
true
\
"
]
"
)
;
if
(
popup
)
{
popup
.
hidePopup
(
)
;
}
popup
=
this
.
createPopup
(
doc
)
;
popup
.
setAttribute
(
"
menu
-
api
"
"
true
"
)
;
if
(
this
.
id
)
{
popup
.
id
=
this
.
id
;
}
this
.
_createMenuItems
(
popup
)
;
const
onWindowUnload
=
(
)
=
>
popup
.
hidePopup
(
)
;
win
.
addEventListener
(
"
unload
"
onWindowUnload
)
;
popup
.
addEventListener
(
"
popuphidden
"
(
e
)
=
>
{
if
(
e
.
target
=
=
=
popup
)
{
win
.
removeEventListener
(
"
unload
"
onWindowUnload
)
;
popup
.
remove
(
)
;
this
.
emit
(
"
close
"
popup
)
;
}
}
)
;
popup
.
addEventListener
(
"
popupshown
"
(
e
)
=
>
{
if
(
e
.
target
=
=
=
popup
)
{
this
.
emit
(
"
open
"
popup
)
;
}
}
)
;
popupset
.
appendChild
(
popup
)
;
popup
.
openPopupAtScreen
(
screenX
screenY
true
)
;
}
;
Menu
.
prototype
.
createPopup
=
function
(
doc
)
{
return
doc
.
createElement
(
"
menupopup
"
)
;
}
Menu
.
prototype
.
_createMenuItems
=
function
(
parent
)
{
let
doc
=
parent
.
ownerDocument
;
this
.
menuitems
.
forEach
(
item
=
>
{
if
(
!
item
.
visible
)
{
return
;
}
if
(
item
.
submenu
)
{
let
menupopup
=
doc
.
createElement
(
"
menupopup
"
)
;
item
.
submenu
.
_createMenuItems
(
menupopup
)
;
let
menuitem
=
doc
.
createElement
(
"
menuitem
"
)
;
menuitem
.
setAttribute
(
"
label
"
item
.
label
)
;
if
(
!
inToolbox
(
)
)
{
menuitem
.
textContent
=
item
.
label
;
}
let
menu
=
doc
.
createElement
(
"
menu
"
)
;
menu
.
appendChild
(
menuitem
)
;
menu
.
appendChild
(
menupopup
)
;
if
(
item
.
disabled
)
{
menu
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
if
(
item
.
accesskey
)
{
menu
.
setAttribute
(
"
accesskey
"
item
.
accesskey
)
;
}
if
(
item
.
id
)
{
menu
.
id
=
item
.
id
;
}
if
(
item
.
accelerator
)
{
menuitem
.
setAttribute
(
"
acceltext
"
formatKeyShortcut
(
item
.
accelerator
)
)
;
}
parent
.
appendChild
(
menu
)
;
}
else
if
(
item
.
type
=
=
=
"
separator
"
)
{
let
menusep
=
doc
.
createElement
(
"
menuseparator
"
)
;
parent
.
appendChild
(
menusep
)
;
}
else
{
let
menuitem
=
doc
.
createElement
(
"
menuitem
"
)
;
menuitem
.
setAttribute
(
"
label
"
item
.
label
)
;
if
(
!
inToolbox
(
)
)
{
menuitem
.
textContent
=
item
.
label
;
}
menuitem
.
addEventListener
(
"
command
"
(
)
=
>
item
.
click
(
)
)
;
if
(
item
.
type
=
=
=
"
checkbox
"
)
{
menuitem
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
}
if
(
item
.
type
=
=
=
"
radio
"
)
{
menuitem
.
setAttribute
(
"
type
"
"
radio
"
)
;
}
if
(
item
.
disabled
)
{
menuitem
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
if
(
item
.
checked
)
{
menuitem
.
setAttribute
(
"
checked
"
"
true
"
)
;
}
if
(
item
.
accesskey
)
{
menuitem
.
setAttribute
(
"
accesskey
"
item
.
accesskey
)
;
}
if
(
item
.
id
)
{
menuitem
.
id
=
item
.
id
;
}
if
(
item
.
accelerator
)
{
menuitem
.
setAttribute
(
"
acceltext
"
formatKeyShortcut
(
item
.
accelerator
)
)
;
}
parent
.
appendChild
(
menuitem
)
;
}
}
)
;
}
;
Menu
.
setApplicationMenu
=
(
)
=
>
{
throw
Error
(
"
Not
implemented
"
)
;
}
;
Menu
.
sendActionToFirstResponder
=
(
)
=
>
{
throw
Error
(
"
Not
implemented
"
)
;
}
;
Menu
.
buildFromTemplate
=
(
)
=
>
{
throw
Error
(
"
Not
implemented
"
)
;
}
;
module
.
exports
=
Menu
;
