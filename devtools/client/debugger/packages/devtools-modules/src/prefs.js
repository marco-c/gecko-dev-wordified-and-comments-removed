const
Services
=
require
(
"
devtools
-
services
"
)
;
const
EventEmitter
=
require
(
"
.
/
utils
/
event
-
emitter
"
)
;
function
PrefsHelper
(
prefsRoot
=
"
"
prefsBlueprint
=
{
}
)
{
EventEmitter
.
decorate
(
this
)
;
let
cache
=
new
Map
(
)
;
for
(
let
accessorName
in
prefsBlueprint
)
{
let
[
prefType
prefName
prefDefault
]
=
prefsBlueprint
[
accessorName
]
;
map
(
this
cache
accessorName
prefType
prefsRoot
prefName
prefDefault
)
;
}
let
observer
=
makeObserver
(
this
cache
prefsRoot
prefsBlueprint
)
;
this
.
registerObserver
=
(
)
=
>
observer
.
register
(
)
;
this
.
unregisterObserver
=
(
)
=
>
observer
.
unregister
(
)
;
}
function
get
(
cache
prefType
prefsRoot
prefName
)
{
let
cachedPref
=
cache
.
get
(
prefName
)
;
if
(
cachedPref
!
=
=
undefined
)
{
return
cachedPref
;
}
let
value
=
Services
.
prefs
[
"
get
"
+
prefType
+
"
Pref
"
]
(
[
prefsRoot
prefName
]
.
join
(
"
.
"
)
)
;
cache
.
set
(
prefName
value
)
;
return
value
;
}
function
set
(
cache
prefType
prefsRoot
prefName
value
)
{
Services
.
prefs
[
"
set
"
+
prefType
+
"
Pref
"
]
(
[
prefsRoot
prefName
]
.
join
(
"
.
"
)
value
)
;
cache
.
set
(
prefName
value
)
;
}
function
map
(
self
cache
accessorName
prefType
prefsRoot
prefName
prefDefault
serializer
=
{
in
:
e
=
>
e
out
:
e
=
>
e
}
)
{
if
(
prefName
in
self
)
{
throw
new
Error
(
Can
'
t
use
{
prefName
}
because
it
overrides
a
property
+
"
on
the
instance
.
"
)
;
}
if
(
prefType
=
=
"
Json
"
)
{
map
(
self
cache
accessorName
"
String
"
prefsRoot
prefName
prefDefault
{
in
:
JSON
.
parse
out
:
JSON
.
stringify
}
)
;
return
;
}
if
(
prefType
=
=
"
Float
"
)
{
map
(
self
cache
accessorName
"
Char
"
prefsRoot
prefName
prefDefault
{
in
:
Number
.
parseFloat
out
:
(
n
)
=
>
n
+
"
"
}
)
;
return
;
}
Object
.
defineProperty
(
self
accessorName
{
get
:
(
)
=
>
{
try
{
return
serializer
.
in
(
get
(
cache
prefType
prefsRoot
prefName
)
)
;
}
catch
(
e
)
{
if
(
typeof
prefDefault
!
=
=
'
undefined
'
)
{
return
prefDefault
;
}
throw
e
;
}
}
set
:
(
e
)
=
>
set
(
cache
prefType
prefsRoot
prefName
serializer
.
out
(
e
)
)
}
)
;
}
function
accessorNameForPref
(
somePrefName
prefsBlueprint
)
{
for
(
let
accessorName
in
prefsBlueprint
)
{
let
[
prefName
]
=
prefsBlueprint
[
accessorName
]
;
if
(
somePrefName
=
=
prefName
)
{
return
accessorName
;
}
}
return
"
"
;
}
function
makeObserver
(
self
cache
prefsRoot
prefsBlueprint
)
{
return
{
register
:
function
(
)
{
this
.
_branch
=
Services
.
prefs
.
getBranch
(
prefsRoot
+
"
.
"
)
;
this
.
_branch
.
addObserver
(
"
"
this
)
;
}
unregister
:
function
(
)
{
this
.
_branch
.
removeObserver
(
"
"
this
)
;
}
observe
:
function
(
subject
topic
prefName
)
{
let
accessorName
=
accessorNameForPref
(
prefName
prefsBlueprint
)
;
if
(
!
(
accessorName
in
self
)
)
{
return
;
}
cache
.
delete
(
prefName
)
;
self
.
emit
(
"
pref
-
changed
"
accessorName
self
[
accessorName
]
)
;
}
}
;
}
exports
.
PrefsHelper
=
PrefsHelper
;
