const
PropTypes
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
)
;
const
{
span
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
factories
"
)
;
const
{
isGrip
cropString
cropMultipleLines
wrapRender
}
=
require
(
"
.
/
rep
-
utils
"
)
;
const
{
MODE
}
=
require
(
"
.
/
constants
"
)
;
const
nodeConstants
=
require
(
"
.
.
/
shared
/
dom
-
node
-
constants
"
)
;
CommentNode
.
propTypes
=
{
object
:
PropTypes
.
object
.
isRequired
mode
:
PropTypes
.
oneOf
(
Object
.
keys
(
MODE
)
.
map
(
key
=
>
MODE
[
key
]
)
)
}
;
function
CommentNode
(
props
)
{
const
{
object
mode
=
MODE
.
SHORT
}
=
props
;
let
{
textContent
}
=
object
.
preview
;
if
(
mode
=
=
=
MODE
.
TINY
)
{
textContent
=
cropMultipleLines
(
textContent
30
)
;
}
else
if
(
mode
=
=
=
MODE
.
SHORT
)
{
textContent
=
cropString
(
textContent
50
)
;
}
return
span
(
{
className
:
"
objectBox
theme
-
comment
"
"
data
-
link
-
actor
-
id
"
:
object
.
actor
}
<
!
-
-
{
textContent
}
-
-
>
)
;
}
function
supportsObject
(
object
noGrip
=
false
)
{
if
(
noGrip
=
=
=
true
|
|
!
isGrip
(
object
)
)
{
return
false
;
}
return
(
object
.
preview
&
&
object
.
preview
.
nodeType
=
=
=
nodeConstants
.
COMMENT_NODE
)
;
}
module
.
exports
=
{
rep
:
wrapRender
(
CommentNode
)
supportsObject
}
;
