import
type
{
GripProperties
Node
Props
ReduxAction
}
from
"
.
/
types
"
;
const
{
loadItemProperties
}
=
require
(
"
.
/
utils
/
load
-
properties
"
)
;
const
{
getPathExpression
getValue
}
=
require
(
"
.
/
utils
/
node
"
)
;
const
{
getLoadedProperties
getActors
getWatchpoints
}
=
require
(
"
.
/
reducer
"
)
;
type
Dispatch
=
ReduxAction
=
>
void
;
type
ThunkArg
=
{
getState
:
(
)
=
>
{
}
dispatch
:
Dispatch
}
;
function
nodeExpand
(
node
:
Node
actor
)
{
return
async
(
{
dispatch
getState
}
:
ThunkArg
)
=
>
{
dispatch
(
{
type
:
"
NODE_EXPAND
"
data
:
{
node
}
}
)
;
dispatch
(
nodeLoadProperties
(
node
actor
)
)
;
}
;
}
function
nodeCollapse
(
node
:
Node
)
{
return
{
type
:
"
NODE_COLLAPSE
"
data
:
{
node
}
}
;
}
function
nodeLoadProperties
(
node
:
Node
actor
)
{
return
async
(
{
dispatch
client
getState
}
:
ThunkArg
)
=
>
{
const
state
=
getState
(
)
;
const
loadedProperties
=
getLoadedProperties
(
state
)
;
if
(
loadedProperties
.
has
(
node
.
path
)
)
{
return
;
}
try
{
const
properties
=
await
loadItemProperties
(
node
client
.
createObjectClient
client
.
createLongStringClient
loadedProperties
)
;
dispatch
(
nodePropertiesLoaded
(
node
actor
properties
)
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
;
}
function
nodePropertiesLoaded
(
node
:
Node
actor
?
:
string
properties
:
GripProperties
)
{
return
{
type
:
"
NODE_PROPERTIES_LOADED
"
data
:
{
node
actor
properties
}
}
;
}
function
addWatchpoint
(
item
watchpoint
:
string
)
{
return
async
function
(
{
dispatch
client
}
:
ThunkArgs
)
{
const
{
parent
name
}
=
item
;
const
object
=
getValue
(
parent
)
;
if
(
!
object
)
{
return
;
}
const
path
=
parent
.
path
;
const
property
=
name
;
const
label
=
getPathExpression
(
item
)
;
const
actor
=
object
.
actor
;
await
client
.
addWatchpoint
(
object
property
label
watchpoint
)
;
dispatch
(
{
type
:
"
SET_WATCHPOINT
"
data
:
{
path
watchpoint
property
actor
}
}
)
;
}
;
}
function
removeWatchpoint
(
item
)
{
return
async
function
(
{
dispatch
client
}
:
ThunkArgs
)
{
const
object
=
getValue
(
item
.
parent
)
;
const
property
=
item
.
name
;
const
path
=
item
.
parent
.
path
;
const
actor
=
object
.
actor
;
await
client
.
removeWatchpoint
(
object
property
)
;
dispatch
(
{
type
:
"
REMOVE_WATCHPOINT
"
data
:
{
path
property
actor
}
}
)
;
}
;
}
function
closeObjectInspector
(
)
{
return
async
(
{
getState
client
}
:
ThunkArg
)
=
>
{
releaseActors
(
getState
(
)
client
)
;
}
;
}
function
rootsChanged
(
props
:
Props
)
{
return
async
(
{
dispatch
client
getState
}
:
ThunkArg
)
=
>
{
releaseActors
(
getState
(
)
client
)
;
dispatch
(
{
type
:
"
ROOTS_CHANGED
"
data
:
props
}
)
;
}
;
}
function
releaseActors
(
state
client
)
{
const
actors
=
getActors
(
state
)
;
const
watchpoints
=
getWatchpoints
(
state
)
;
for
(
const
actor
of
actors
)
{
if
(
!
watchpoints
.
has
(
actor
)
)
{
client
.
releaseActor
(
actor
)
;
}
}
}
function
invokeGetter
(
node
:
Node
targetGrip
:
object
receiverId
:
string
|
null
getterName
:
string
)
{
return
async
(
{
dispatch
client
getState
}
:
ThunkArg
)
=
>
{
try
{
const
objectClient
=
client
.
createObjectClient
(
targetGrip
)
;
const
result
=
await
objectClient
.
getPropertyValue
(
getterName
receiverId
)
;
dispatch
(
{
type
:
"
GETTER_INVOKED
"
data
:
{
node
result
}
}
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
;
}
module
.
exports
=
{
closeObjectInspector
invokeGetter
nodeExpand
nodeCollapse
nodeLoadProperties
nodePropertiesLoaded
rootsChanged
addWatchpoint
removeWatchpoint
}
;
