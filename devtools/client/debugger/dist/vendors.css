.
tree
:
focus
{
outline
:
none
;
}
.
tree
.
inline
{
display
:
inline
-
block
;
}
.
tree
.
nowrap
{
white
-
space
:
nowrap
;
}
.
tree
.
noselect
{
user
-
select
:
none
;
}
.
tree
.
tree
-
node
{
display
:
flex
;
}
.
tree
.
tree
-
node
:
not
(
.
focused
)
:
hover
{
background
-
color
:
var
(
-
-
theme
-
selection
-
background
-
hover
)
;
}
.
tree
-
indent
{
display
:
inline
-
block
;
width
:
12px
;
margin
-
inline
-
start
:
3px
;
border
-
inline
-
start
:
1px
solid
#
a2d1ff
;
flex
-
shrink
:
0
;
}
.
tree
-
node
[
data
-
expandable
=
"
false
"
]
.
tree
-
last
-
indent
{
margin
-
inline
-
end
:
13px
;
}
.
tree
-
node
[
data
-
expandable
=
"
false
"
]
[
aria
-
level
=
"
1
"
]
{
padding
-
inline
-
start
:
15px
;
}
.
tree
.
tree
-
node
[
data
-
expandable
=
"
true
"
]
{
cursor
:
default
;
}
.
tree
-
node
button
.
arrow
{
mask
:
url
(
"
chrome
:
/
/
devtools
/
content
/
debugger
/
images
/
arrow
.
svg
"
)
no
-
repeat
center
;
mask
-
size
:
10px
;
vertical
-
align
:
-
1px
;
width
:
10px
;
height
:
10px
;
border
:
0
;
padding
:
0
;
margin
-
inline
-
end
:
4px
;
transform
-
origin
:
center
center
;
transition
:
transform
125ms
var
(
-
-
animation
-
curve
)
;
background
-
color
:
var
(
-
-
theme
-
icon
-
dimmed
-
color
)
;
}
.
tree
-
node
button
.
arrow
:
not
(
.
expanded
)
{
transform
:
rotate
(
-
90deg
)
;
}
html
[
dir
=
"
rtl
"
]
.
tree
-
node
button
.
arrow
:
not
(
.
expanded
)
{
transform
:
rotate
(
90deg
)
;
}
.
tree
.
tree
-
node
.
focused
{
color
:
var
(
-
-
theme
-
selection
-
color
)
;
background
-
color
:
var
(
-
-
theme
-
selection
-
background
)
;
}
.
tree
.
tree
-
node
.
focused
:
:
selection
{
color
:
var
(
-
-
theme
-
selection
-
background
)
;
background
-
color
:
var
(
-
-
theme
-
selection
-
color
)
;
}
.
tree
-
node
.
focused
button
.
arrow
{
background
-
color
:
currentColor
;
}
.
container
{
background
-
color
:
lightgrey
;
border
:
1px
solid
darkgrey
;
cursor
:
pointer
;
padding
:
0
3px
;
}
.
container
[
aria
-
selected
=
true
]
{
background
-
color
:
white
;
}
.
container
{
display
:
flex
;
list
-
style
:
none
;
margin
:
0
;
padding
:
0
;
}
.
split
-
box
{
display
:
flex
;
flex
:
1
;
min
-
width
:
0
;
height
:
100
%
;
width
:
100
%
;
}
.
split
-
box
.
vert
{
flex
-
direction
:
row
;
}
.
split
-
box
.
horz
{
flex
-
direction
:
column
;
}
.
split
-
box
>
.
uncontrolled
{
display
:
flex
;
flex
:
1
;
min
-
width
:
0
;
overflow
:
auto
;
}
.
split
-
box
>
.
controlled
{
display
:
flex
;
overflow
:
auto
;
}
.
split
-
box
>
.
splitter
{
background
-
image
:
none
;
border
:
0
;
border
-
style
:
solid
;
border
-
color
:
transparent
;
background
-
color
:
var
(
-
-
theme
-
splitter
-
color
)
;
background
-
clip
:
content
-
box
;
position
:
relative
;
box
-
sizing
:
border
-
box
;
z
-
index
:
1
;
}
.
split
-
box
.
vert
>
.
splitter
{
min
-
width
:
calc
(
var
(
-
-
devtools
-
splitter
-
inline
-
start
-
width
)
+
var
(
-
-
devtools
-
splitter
-
inline
-
end
-
width
)
+
1px
)
;
border
-
left
-
width
:
var
(
-
-
devtools
-
splitter
-
inline
-
start
-
width
)
;
border
-
right
-
width
:
var
(
-
-
devtools
-
splitter
-
inline
-
end
-
width
)
;
margin
-
left
:
calc
(
-
1
*
var
(
-
-
devtools
-
splitter
-
inline
-
start
-
width
)
-
1px
)
;
margin
-
right
:
calc
(
-
1
*
var
(
-
-
devtools
-
splitter
-
inline
-
end
-
width
)
)
;
cursor
:
ew
-
resize
;
}
.
split
-
box
.
horz
>
.
splitter
{
min
-
height
:
calc
(
var
(
-
-
devtools
-
splitter
-
top
-
width
)
+
var
(
-
-
devtools
-
splitter
-
bottom
-
width
)
+
1px
)
;
border
-
top
-
width
:
var
(
-
-
devtools
-
splitter
-
top
-
width
)
;
border
-
bottom
-
width
:
var
(
-
-
devtools
-
splitter
-
bottom
-
width
)
;
margin
-
top
:
calc
(
-
1
*
var
(
-
-
devtools
-
splitter
-
top
-
width
)
-
1px
)
;
margin
-
bottom
:
calc
(
-
1
*
var
(
-
-
devtools
-
splitter
-
bottom
-
width
)
)
;
cursor
:
ns
-
resize
;
}
.
split
-
box
.
disabled
{
pointer
-
events
:
none
;
}
.
split
-
box
.
dragging
>
.
controlled
.
split
-
box
.
dragging
>
.
uncontrolled
{
pointer
-
events
:
none
;
}
