const
TAB_URL
=
EXAMPLE_URL
+
"
doc_with
-
frame
.
html
"
;
let
gTab
gPanel
gDebugger
;
let
actions
gSources
gVariables
;
function
test
(
)
{
let
options
=
{
source
:
TAB_URL
line
:
1
}
;
initDebugger
(
TAB_URL
options
)
.
then
(
(
[
aTab
aPanel
]
)
=
>
{
gTab
=
aTab
;
gPanel
=
aPanel
;
gDebugger
=
gPanel
.
panelWin
;
actions
=
bindActionCreators
(
gPanel
)
;
gSources
=
gDebugger
.
DebuggerView
.
Sources
;
gVariables
=
gDebugger
.
DebuggerView
.
Variables
;
let
bubble
=
gDebugger
.
DebuggerView
.
VariableBubble
;
let
tooltip
=
bubble
.
_tooltip
.
panel
;
let
testPopupHiding
=
Task
.
async
(
function
*
(
)
{
yield
addBreakpoint
(
)
;
yield
ensureThreadClientState
(
gPanel
"
resumed
"
)
;
yield
pauseDebuggee
(
)
;
yield
openVarPopup
(
gPanel
{
line
:
20
ch
:
17
}
)
;
is
(
tooltip
.
querySelectorAll
(
"
.
devtools
-
tooltip
-
simple
-
text
"
)
.
length
1
"
The
popup
should
be
open
with
a
simple
text
entry
"
)
;
executeSoon
(
(
)
=
>
EventUtils
.
synthesizeKey
(
"
VK_F11
"
{
}
)
)
;
yield
waitForThreadEvents
(
gPanel
"
resumed
"
)
;
yield
waitForThreadEvents
(
gPanel
"
paused
"
)
;
checkVariablePopupClosed
(
bubble
)
;
yield
resumeDebuggerThenCloseAndFinish
(
gPanel
)
;
}
)
;
testPopupHiding
(
)
;
}
)
;
}
function
addBreakpoint
(
)
{
return
actions
.
addBreakpoint
(
{
actor
:
gSources
.
selectedValue
line
:
21
}
)
;
}
function
pauseDebuggee
(
)
{
generateMouseClickInTab
(
gTab
"
content
.
document
.
querySelector
(
'
button
'
)
"
)
;
return
promise
.
all
(
[
waitForDebuggerEvents
(
gPanel
gDebugger
.
EVENTS
.
FETCHED_SCOPES
)
waitForDebuggerEvents
(
gPanel
gDebugger
.
EVENTS
.
FETCHED_VARIABLES
)
]
)
;
}
function
checkVariablePopupClosed
(
bubble
)
{
ok
(
!
bubble
.
contentsShown
(
)
"
When
stepping
popup
should
close
and
be
hidden
.
"
)
;
ok
(
bubble
.
_tooltip
.
isEmpty
(
)
"
The
variable
inspection
popup
should
now
be
empty
.
"
)
;
ok
(
!
bubble
.
_markedText
"
The
marked
text
in
the
editor
was
removed
.
"
)
;
}
registerCleanupFunction
(
function
(
)
{
gTab
=
null
;
gPanel
=
null
;
gDebugger
=
null
;
actions
=
null
;
gSources
=
null
;
gVariables
=
null
;
}
)
;
