"
use
strict
"
;
const
httpServer
=
createTestHTTPServer
(
)
;
const
BASE_URL
=
http
:
/
/
localhost
:
{
httpServer
.
identity
.
primaryPort
}
/
;
const
loadCounts
=
{
}
;
const
INDEX_PAGE_CONTENT
=
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
script
type
=
"
text
/
javascript
"
src
=
"
/
normal
-
script
.
js
"
>
<
/
script
>
<
script
type
=
"
text
/
javascript
"
src
=
"
/
slow
-
loading
-
script
.
js
"
>
<
/
script
>
<
script
type
=
"
text
/
javascript
"
src
=
"
/
http
-
error
-
script
.
js
"
>
<
/
script
>
<
script
>
console
.
log
(
"
inline
script
"
)
;
<
/
script
>
<
/
head
>
<
/
html
>
;
httpServer
.
registerPathHandler
(
"
/
index
.
html
"
(
request
response
)
=
>
{
loadCounts
[
request
.
path
]
=
(
loadCounts
[
request
.
path
]
|
|
0
)
+
1
;
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
write
(
INDEX_PAGE_CONTENT
)
;
}
)
;
httpServer
.
registerPathHandler
(
"
/
normal
-
script
.
js
"
(
request
response
)
=
>
{
loadCounts
[
request
.
path
]
=
(
loadCounts
[
request
.
path
]
|
|
0
)
+
1
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
javascript
"
)
;
response
.
write
(
console
.
log
(
"
normal
script
"
)
)
;
}
)
;
httpServer
.
registerPathHandler
(
"
/
slow
-
loading
-
script
.
js
"
(
request
response
)
=
>
{
loadCounts
[
request
.
path
]
=
(
loadCounts
[
request
.
path
]
|
|
0
)
+
1
;
response
.
processAsync
(
)
;
setTimeout
(
function
(
)
{
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
javascript
"
)
;
response
.
write
(
console
.
log
(
"
slow
loading
script
"
)
)
;
response
.
finish
(
)
;
}
1000
)
;
}
)
;
httpServer
.
registerPathHandler
(
"
/
http
-
error
-
script
.
js
"
(
request
response
)
=
>
{
loadCounts
[
request
.
path
]
=
(
loadCounts
[
request
.
path
]
|
|
0
)
+
1
;
response
.
setStatusLine
(
request
.
httpVersion
404
"
Not
found
"
)
;
response
.
write
(
console
.
log
(
"
http
error
"
)
)
;
}
)
;
add_task
(
async
function
testSourceTextContent
(
)
{
const
tab
=
await
addTab
(
BASE_URL
+
"
index
.
html
"
)
;
is
(
loadCounts
[
"
/
index
.
html
"
]
1
"
index
.
html
is
loaded
once
before
opening
devtools
"
)
;
is
(
loadCounts
[
"
/
http
-
error
-
script
.
js
"
]
2
"
We
loaded
http
-
error
-
script
.
js
twice
.
"
)
;
const
toolbox
=
await
openToolboxForTab
(
tab
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForSources
(
dbg
"
index
.
html
"
"
normal
-
script
.
js
"
"
slow
-
loading
-
script
.
js
"
)
;
await
selectSource
(
dbg
"
normal
-
script
.
js
"
)
;
is
(
getCM
(
dbg
)
.
getValue
(
)
console
.
log
(
"
normal
script
"
)
)
;
await
selectSource
(
dbg
"
slow
-
loading
-
script
.
js
"
)
;
is
(
getCM
(
dbg
)
.
getValue
(
)
console
.
log
(
"
slow
loading
script
"
)
)
;
await
selectSource
(
dbg
"
index
.
html
"
)
;
is
(
getCM
(
dbg
)
.
getValue
(
)
INDEX_PAGE_CONTENT
)
;
ok
(
!
sourceExists
(
dbg
"
http
-
error
-
script
.
js
"
)
"
scripts
with
HTTP
error
code
do
not
appear
in
the
source
list
"
)
;
is
(
loadCounts
[
"
/
index
.
html
"
]
2
"
We
loaded
index
.
html
twice
"
)
;
is
(
loadCounts
[
"
/
normal
-
script
.
js
"
]
1
"
We
loaded
normal
-
script
.
js
only
once
"
)
;
is
(
loadCounts
[
"
/
slow
-
loading
-
script
.
js
"
]
1
"
We
loaded
slow
-
loading
-
script
.
js
only
once
"
)
;
is
(
loadCounts
[
"
/
http
-
error
-
script
.
js
"
]
2
"
We
loaded
http
-
error
-
script
.
js
twice
only
before
the
debugger
is
opened
"
)
;
}
)
;
const
GARBAGED_PAGE_CONTENT
=
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
script
type
=
"
text
/
javascript
"
src
=
"
/
garbaged
-
script
.
js
"
>
<
/
script
>
<
script
>
console
.
log
(
"
garbaged
inline
script
"
)
;
<
/
script
>
<
/
head
>
<
/
html
>
;
httpServer
.
registerPathHandler
(
"
/
garbaged
-
collected
.
html
"
(
request
response
)
=
>
{
loadCounts
[
request
.
path
]
=
(
loadCounts
[
request
.
path
]
|
|
0
)
+
1
;
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
write
(
GARBAGED_PAGE_CONTENT
)
;
}
)
;
httpServer
.
registerPathHandler
(
"
/
garbaged
-
script
.
js
"
(
request
response
)
=
>
{
loadCounts
[
request
.
path
]
=
(
loadCounts
[
request
.
path
]
|
|
0
)
+
1
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
javascript
"
)
;
response
.
write
(
console
.
log
(
"
garbaged
script
{
loadCounts
[
request
.
path
]
}
"
)
)
;
}
)
;
add_task
(
async
function
testGarbageCollectedSourceTextContent
(
)
{
const
tab
=
await
addTab
(
BASE_URL
+
"
garbaged
-
collected
.
html
"
)
;
is
(
loadCounts
[
"
/
garbaged
-
collected
.
html
"
]
1
"
The
HTML
page
is
loaded
once
before
opening
the
DevTools
"
)
;
is
(
loadCounts
[
"
/
garbaged
-
script
.
js
"
]
1
"
The
script
is
loaded
once
before
opening
the
DevTools
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
Cu
.
forceGC
(
)
;
}
)
;
const
toolbox
=
await
openToolboxForTab
(
tab
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForSources
(
dbg
"
garbaged
-
collected
.
html
"
"
garbaged
-
script
.
js
"
)
;
await
selectSource
(
dbg
"
garbaged
-
script
.
js
"
)
;
is
(
getCM
(
dbg
)
.
getValue
(
)
console
.
log
(
"
garbaged
script
2
"
)
)
;
await
selectSource
(
dbg
"
garbaged
-
collected
.
html
"
)
;
is
(
getCM
(
dbg
)
.
getValue
(
)
GARBAGED_PAGE_CONTENT
)
;
is
(
loadCounts
[
"
/
garbaged
-
collected
.
html
"
]
2
"
We
loaded
the
html
page
once
as
we
haven
'
t
tried
to
display
it
in
the
debugger
(
2
)
"
)
;
is
(
loadCounts
[
"
/
garbaged
-
script
.
js
"
]
2
"
We
loaded
the
garbaged
script
twice
as
we
lost
its
content
"
)
;
}
)
;
let
loadCount
=
0
;
httpServer
.
registerPathHandler
(
"
/
200
-
then
-
404
-
page
.
html
"
(
request
response
)
=
>
{
loadCount
+
+
;
if
(
loadCount
>
1
)
{
response
.
setStatusLine
(
request
.
httpVersion
404
"
Not
found
"
)
;
return
;
}
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
write
(
<
!
DOCTYPE
html
>
<
script
>
console
.
log
(
"
200
page
"
)
;
<
/
script
>
)
;
}
)
;
add_task
(
async
function
testFailingHtmlSource
(
)
{
info
(
"
Test
failure
in
retrieving
html
page
sources
"
)
;
const
dbg
=
await
initDebuggerWithAbsoluteURL
(
BASE_URL
+
"
200
-
then
-
404
-
page
.
html
"
"
200
-
then
-
404
-
page
.
html
"
)
;
const
source
=
findSource
(
dbg
"
200
-
then
-
404
-
page
.
html
"
)
;
await
dbg
.
actions
.
selectLocation
(
getContext
(
dbg
)
{
sourceId
:
source
.
id
}
{
keepContext
:
false
}
)
;
is
(
getCM
(
dbg
)
.
getValue
(
)
Error
loading
this
URI
:
Unknown
source
)
;
}
)
;
let
loadCount2
=
0
;
let
slowLoadingPageResolution
=
null
;
httpServer
.
registerPathHandler
(
"
/
slow
-
loading
-
page
.
html
"
(
request
response
)
=
>
{
loadCount2
+
+
;
if
(
loadCount2
>
1
)
{
response
.
processAsync
(
)
;
slowLoadingPageResolution
=
function
(
)
{
response
.
write
(
<
!
DOCTYPE
html
>
<
script
>
console
.
log
(
"
slow
-
loading
-
page
:
second
-
load
"
)
;
<
/
script
>
)
;
response
.
finish
(
)
;
}
;
return
;
}
response
.
write
(
<
!
DOCTYPE
html
>
<
script
>
console
.
log
(
"
slow
-
loading
-
page
:
first
-
load
"
)
;
<
/
script
>
)
;
}
)
;
add_task
(
async
function
testLoadingHtmlSource
(
)
{
info
(
"
Test
loading
progress
of
html
page
sources
"
)
;
const
dbg
=
await
initDebuggerWithAbsoluteURL
(
BASE_URL
+
"
slow
-
loading
-
page
.
html
"
"
slow
-
loading
-
page
.
html
"
)
;
const
onSelected
=
selectSource
(
dbg
"
slow
-
loading
-
page
.
html
"
)
;
await
waitFor
(
(
)
=
>
getCM
(
dbg
)
.
getValue
(
)
=
=
Loading
"
Wait
for
the
source
to
be
displayed
as
loading
"
)
;
info
(
"
Wait
for
a
second
HTTP
request
to
be
made
for
the
html
page
"
)
;
await
waitFor
(
(
)
=
>
slowLoadingPageResolution
"
Wait
for
the
html
page
to
be
queried
a
second
time
"
)
;
is
(
getCM
(
dbg
)
.
getValue
(
)
Loading
"
The
source
is
still
loading
until
we
release
the
network
request
"
)
;
slowLoadingPageResolution
(
)
;
info
(
"
Wait
for
the
source
to
be
fully
selected
and
loaded
"
)
;
await
onSelected
;
is
(
getCM
(
dbg
)
.
getValue
(
)
console
.
log
(
"
slow
-
loading
-
page
:
first
-
load
"
)
;
)
;
}
)
;
