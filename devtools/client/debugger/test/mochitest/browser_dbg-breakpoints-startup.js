"
use
strict
"
;
add_task
(
async
function
(
)
{
let
dbg
=
await
initDebugger
(
"
doc
-
scripts
.
html
"
"
simple3
.
js
"
)
;
await
selectSource
(
dbg
"
simple3
.
js
"
)
;
await
addBreakpoint
(
dbg
"
simple3
.
js
"
3
)
;
await
addBreakpoint
(
dbg
"
simple3
.
js
"
2
15
)
;
await
disableBreakpoint
(
dbg
findSource
(
dbg
"
simple3
.
js
"
)
2
15
)
;
invokeInTab
(
"
simple
"
)
;
await
waitForPaused
(
dbg
)
;
await
assertPausedAtSourceAndLine
(
dbg
findSource
(
dbg
"
simple3
.
js
"
)
.
id
3
)
;
await
resume
(
dbg
)
;
await
dbg
.
toolbox
.
closeToolbox
(
)
;
const
toolbox
=
await
openToolboxForTab
(
gBrowser
.
selectedTab
"
webconsole
"
)
;
const
onSelected
=
toolbox
.
once
(
"
jsdebugger
-
selected
"
)
;
invokeInTab
(
"
simple
"
)
;
await
onSelected
;
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForPaused
(
dbg
)
;
await
assertPausedAtSourceAndLine
(
dbg
findSource
(
dbg
"
simple3
.
js
"
)
.
id
3
)
;
await
resume
(
dbg
)
;
is
(
dbg
.
selectors
.
getBreakpointCount
(
)
2
"
The
two
breakpoints
are
preserved
"
)
;
}
)
;
add_task
(
async
function
(
)
{
let
dbg
=
await
initDebugger
(
"
doc
-
sourcemaps
.
html
"
"
times2
.
js
"
)
;
await
selectSource
(
dbg
"
times2
.
js
"
)
;
await
addBreakpoint
(
dbg
"
times2
.
js
"
2
)
;
invokeInTab
(
"
keepMeAlive
"
)
;
await
waitForPaused
(
dbg
null
{
shouldWaitForLoadedScopes
:
false
}
)
;
let
source
=
findSource
(
dbg
"
times2
.
js
"
)
;
await
assertPausedAtSourceAndLine
(
dbg
source
.
id
2
)
;
await
resume
(
dbg
)
;
await
dbg
.
toolbox
.
closeToolbox
(
)
;
const
toolbox
=
await
openToolboxForTab
(
gBrowser
.
selectedTab
"
webconsole
"
)
;
const
onSelected
=
toolbox
.
once
(
"
jsdebugger
-
selected
"
)
;
invokeInTab
(
"
keepMeAlive
"
)
;
await
onSelected
;
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForPaused
(
dbg
null
{
shouldWaitForLoadedScopes
:
false
}
)
;
source
=
findSource
(
dbg
"
times2
.
js
"
)
;
await
assertPausedAtSourceAndLine
(
dbg
source
.
id
2
)
;
await
resume
(
dbg
)
;
is
(
dbg
.
selectors
.
getBreakpointCount
(
)
1
"
The
breakpoint
is
preserved
"
)
;
}
)
;
