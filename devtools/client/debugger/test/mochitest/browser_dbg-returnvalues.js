function
getLabel
(
dbg
index
)
{
return
findElement
(
dbg
"
scopeNode
"
index
)
.
innerText
;
}
function
getValue
(
dbg
index
)
{
return
findElement
(
dbg
"
scopeValue
"
index
)
.
innerText
;
}
async
function
testReturnValue
(
dbg
val
)
{
invokeInTab
(
"
return_something
"
val
)
;
await
waitForPaused
(
dbg
)
;
await
stepIn
(
dbg
)
;
await
stepIn
(
dbg
)
;
is
(
getLabel
(
dbg
1
)
"
return_something
"
"
check
for
return_something
"
)
;
let
label
=
getLabel
(
dbg
2
)
;
if
(
val
=
=
=
"
undefined
"
)
{
ok
(
label
!
=
=
"
<
return
>
"
"
do
not
show
<
return
>
for
undefined
"
)
;
}
else
{
is
(
label
"
<
return
>
"
"
check
for
<
return
>
"
)
;
is
(
getValue
(
dbg
2
)
uneval
(
val
)
check
value
is
{
uneval
(
val
)
}
)
;
}
await
resume
(
dbg
)
;
assertNotPaused
(
dbg
)
;
}
async
function
testThrowValue
(
dbg
val
)
{
invokeInTab
(
"
throw_something
"
val
)
;
await
waitForPaused
(
dbg
)
;
await
stepIn
(
dbg
)
;
is
(
getLabel
(
dbg
1
)
"
callee
"
"
check
for
callee
"
)
;
is
(
getLabel
(
dbg
2
)
"
<
exception
>
"
"
check
for
<
exception
>
"
)
;
is
(
getValue
(
dbg
2
)
uneval
(
val
)
check
exception
is
{
uneval
(
val
)
}
)
;
await
resume
(
dbg
)
;
assertNotPaused
(
dbg
)
;
}
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
return
-
values
.
html
"
)
;
await
togglePauseOnExceptions
(
dbg
true
true
)
;
await
testReturnValue
(
dbg
"
to
sender
"
)
;
await
testThrowValue
(
dbg
"
a
fit
"
)
;
}
)
;
