"
use
strict
"
;
add_task
(
async
function
testScopeNodes
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
script
-
switching
.
html
"
)
;
const
ready
=
Promise
.
all
(
[
waitForPaused
(
dbg
)
waitForLoadedSource
(
dbg
"
script
-
switching
-
02
.
js
"
)
waitForDispatch
(
dbg
.
store
"
MAP_FRAMES
"
)
]
)
;
invokeInTab
(
"
firstCall
"
)
;
await
ready
;
is
(
getScopeNodeLabel
(
dbg
1
)
"
secondCall
"
)
;
is
(
getScopeNodeLabel
(
dbg
2
)
"
<
this
>
"
)
;
is
(
getScopeNodeLabel
(
dbg
4
)
"
foo
(
)
"
)
;
await
toggleScopeNode
(
dbg
4
)
;
is
(
getScopeNodeLabel
(
dbg
5
)
"
arguments
"
)
;
await
stepOver
(
dbg
)
;
is
(
getScopeNodeLabel
(
dbg
4
)
"
foo
(
)
"
)
;
is
(
getScopeNodeLabel
(
dbg
5
)
"
Window
"
)
;
is
(
getScopeNodeValue
(
dbg
5
)
"
Global
"
)
;
info
(
"
Resuming
the
thread
"
)
;
await
resume
(
dbg
)
;
}
)
;
add_task
(
async
function
testAnonymousScopeNodes
(
)
{
const
dbg
=
await
initDebuggerWithAbsoluteURL
(
"
data
:
text
/
html
;
charset
=
utf8
<
!
DOCTYPE
html
>
<
script
>
(
function
(
)
{
const
x
=
3
;
debugger
;
}
)
(
)
<
/
script
>
"
)
;
info
(
"
Reload
the
page
to
hit
the
debugger
statement
while
loading
"
)
;
const
onReloaded
=
reload
(
dbg
)
;
await
waitForPaused
(
dbg
)
;
ok
(
true
"
We
'
re
paused
"
)
;
is
(
getScopeNodeLabel
(
dbg
1
)
"
<
anonymous
>
"
"
The
scope
node
for
the
anonymous
function
is
displayed
correctly
"
)
;
info
(
"
Resuming
the
thread
"
)
;
await
resume
(
dbg
)
;
await
onReloaded
;
}
)
;
add_task
(
async
function
testProtoScopeNodes
(
)
{
const
dbg
=
await
initDebuggerWithAbsoluteURL
(
data
:
text
/
html
;
charset
=
utf8
<
!
DOCTYPE
html
>
<
script
>
function
testArgName
(
__proto__
)
{
debugger
;
}
function
testVarName
(
name
)
{
const
__proto__
=
name
;
debugger
;
}
<
/
script
>
)
;
info
(
"
Pause
in
testArgName
"
)
;
invokeInTab
(
"
testArgName
"
"
peach
"
)
;
await
waitForPaused
(
dbg
)
;
is
(
getScopeNodeLabel
(
dbg
1
)
"
testArgName
"
)
;
is
(
getScopeNodeLabel
(
dbg
2
)
"
__proto__
"
)
;
is
(
getScopeNodeValue
(
dbg
2
)
"
peach
"
)
;
info
(
"
Resuming
the
thread
"
)
;
await
resume
(
dbg
)
;
info
(
"
Pause
in
testVarName
"
)
;
invokeInTab
(
"
testVarName
"
"
watermelon
"
)
;
await
waitForPaused
(
dbg
)
;
is
(
getScopeNodeLabel
(
dbg
1
)
"
testVarName
"
)
;
is
(
getScopeNodeLabel
(
dbg
2
)
"
__proto__
"
)
;
is
(
getScopeNodeValue
(
dbg
2
)
"
watermelon
"
)
;
info
(
"
Resuming
the
thread
"
)
;
await
resume
(
dbg
)
;
}
)
;
