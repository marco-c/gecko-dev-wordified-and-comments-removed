"
use
strict
"
;
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
preview
.
html
"
"
preview
.
js
"
)
;
await
selectSource
(
dbg
"
preview
.
js
"
)
;
invokeInTab
(
"
invalidTargets
"
)
;
await
waitForPaused
(
dbg
)
;
await
waitForInlinePreviews
(
dbg
)
;
await
assertNoPreviews
(
dbg
"
a
"
69
4
)
;
await
assertNoPreviews
(
dbg
false
70
4
)
;
await
assertNoPreviews
(
dbg
undefined
71
4
)
;
await
assertNoPreviews
(
dbg
null
72
4
)
;
await
assertNoPreviews
(
dbg
42
73
4
)
;
await
assertNoPreviews
(
dbg
const
74
4
)
;
resetCursorPositionToTopLeftCorner
(
dbg
)
;
await
waitForDocumentLoadComplete
(
dbg
)
;
const
inlinePreviewEl
=
findElement
(
dbg
"
inlinePreview
"
)
;
is
(
inlinePreviewEl
.
innerText
myVar
:
"
foo
"
"
got
expected
inline
preview
"
)
;
const
racePromise
=
Promise
.
any
(
[
waitForElement
(
dbg
"
previewPopup
"
)
wait
(
500
)
.
then
(
(
)
=
>
"
TIMEOUT
"
)
]
)
;
hoverToken
(
inlinePreviewEl
)
;
const
raceResult
=
await
racePromise
;
is
(
raceResult
"
TIMEOUT
"
"
No
popup
was
displayed
over
the
inline
preview
"
)
;
await
resume
(
dbg
)
;
info
(
"
Test
hovering
element
not
in
a
line
"
)
;
await
getDebuggerSplitConsole
(
dbg
)
;
const
{
hud
}
=
dbg
.
toolbox
.
getPanel
(
"
webconsole
"
)
;
evaluateExpressionInConsole
(
hud
a
=
1
;
debugger
;
b
=
2
;
)
;
await
waitForPaused
(
dbg
)
;
await
dbg
.
toolbox
.
toggleSplitConsole
(
)
;
resetCursorPositionToTopLeftCorner
(
dbg
)
;
const
racePromiseLines
=
Promise
.
any
(
[
waitForElement
(
dbg
"
previewPopup
"
)
wait
(
500
)
.
then
(
(
)
=
>
"
TIMEOUT_LINES
"
)
]
)
;
EventUtils
.
synthesizeMouse
(
findElement
(
dbg
"
CodeMirrorLines
"
)
0
0
{
type
:
"
mousemove
"
}
dbg
.
win
)
;
is
(
await
racePromiseLines
"
TIMEOUT_LINES
"
"
No
popup
was
displayed
over
the
content
container
element
"
)
;
const
aTokenEl
=
await
getTokenElAtLine
(
dbg
"
a
"
2
8
)
;
await
tryHoverToken
(
dbg
aTokenEl
"
previewPopup
"
)
;
await
resume
(
dbg
)
;
await
selectSource
(
dbg
"
preview
.
js
"
)
;
}
)
;
async
function
assertNoPreviews
(
dbg
expression
line
column
)
{
resetCursorPositionToTopLeftCorner
(
dbg
)
;
await
waitForDocumentLoadComplete
(
dbg
)
;
const
result
=
await
Promise
.
race
(
[
tryHoverTokenAtLine
(
dbg
expression
line
column
"
previewPopup
"
)
wait
(
500
)
.
then
(
(
)
=
>
"
TIMEOUT
"
)
]
)
;
is
(
result
"
TIMEOUT
"
No
popup
was
displayed
when
hovering
"
{
expression
}
"
)
;
}
function
resetCursorPositionToTopLeftCorner
(
dbg
)
{
EventUtils
.
synthesizeMouse
(
findElement
(
dbg
"
codeMirror
"
)
0
0
{
type
:
"
mousemove
"
}
dbg
.
win
)
;
}
