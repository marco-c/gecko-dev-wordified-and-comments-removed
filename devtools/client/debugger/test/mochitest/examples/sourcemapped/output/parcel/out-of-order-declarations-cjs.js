parcelRequire
=
(
function
(
modules
cache
entry
globalName
)
{
var
previousRequire
=
typeof
parcelRequire
=
=
=
'
function
'
&
&
parcelRequire
;
var
nodeRequire
=
typeof
require
=
=
=
'
function
'
&
&
require
;
function
newRequire
(
name
jumped
)
{
if
(
!
cache
[
name
]
)
{
if
(
!
modules
[
name
]
)
{
var
currentRequire
=
typeof
parcelRequire
=
=
=
'
function
'
&
&
parcelRequire
;
if
(
!
jumped
&
&
currentRequire
)
{
return
currentRequire
(
name
true
)
;
}
if
(
previousRequire
)
{
return
previousRequire
(
name
true
)
;
}
if
(
nodeRequire
&
&
typeof
name
=
=
=
'
string
'
)
{
return
nodeRequire
(
name
)
;
}
var
err
=
new
Error
(
'
Cannot
find
module
\
'
'
+
name
+
'
\
'
'
)
;
err
.
code
=
'
MODULE_NOT_FOUND
'
;
throw
err
;
}
localRequire
.
resolve
=
resolve
;
var
module
=
cache
[
name
]
=
new
newRequire
.
Module
(
name
)
;
modules
[
name
]
[
0
]
.
call
(
module
.
exports
localRequire
module
module
.
exports
this
)
;
}
return
cache
[
name
]
.
exports
;
function
localRequire
(
x
)
{
return
newRequire
(
localRequire
.
resolve
(
x
)
)
;
}
function
resolve
(
x
)
{
return
modules
[
name
]
[
1
]
[
x
]
|
|
x
;
}
}
function
Module
(
moduleName
)
{
this
.
id
=
moduleName
;
this
.
bundle
=
newRequire
;
this
.
exports
=
{
}
;
}
newRequire
.
isParcelRequire
=
true
;
newRequire
.
Module
=
Module
;
newRequire
.
modules
=
modules
;
newRequire
.
cache
=
cache
;
newRequire
.
parent
=
previousRequire
;
newRequire
.
register
=
function
(
id
exports
)
{
modules
[
id
]
=
[
function
(
require
module
)
{
module
.
exports
=
exports
;
}
{
}
]
;
}
;
for
(
var
i
=
0
;
i
<
entry
.
length
;
i
+
+
)
{
newRequire
(
entry
[
i
]
)
;
}
if
(
entry
.
length
)
{
var
mainExports
=
newRequire
(
entry
[
entry
.
length
-
1
]
)
;
if
(
typeof
exports
=
=
=
"
object
"
&
&
typeof
module
!
=
=
"
undefined
"
)
{
module
.
exports
=
mainExports
;
}
else
if
(
typeof
define
=
=
=
"
function
"
&
&
define
.
amd
)
{
define
(
function
(
)
{
return
mainExports
;
}
)
;
}
else
if
(
globalName
)
{
this
[
globalName
]
=
mainExports
;
}
}
return
newRequire
;
}
)
(
{
"
src
/
mod
.
js
"
:
[
function
(
require
module
exports
)
{
"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
default
=
"
a
-
default
"
;
}
{
}
]
"
input
.
js
"
:
[
function
(
require
module
exports
)
{
"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
default
=
root
;
var
_mod
=
require
(
"
.
/
src
/
mod
"
)
;
var
_mod2
=
_interopRequireDefault
(
_mod
)
;
function
_interopRequireDefault
(
obj
)
{
return
obj
&
&
obj
.
__esModule
?
obj
:
{
default
:
obj
}
;
}
var
val
=
"
outer
-
value
"
;
function
root
(
)
{
var
val
=
"
middle
-
value
"
;
var
fn
=
function
outerFn
(
outer
)
{
}
;
function
callback
(
)
{
console
.
log
(
"
pause
here
"
val
_mod2
.
default
fn
)
;
var
val
=
"
inner
-
value
"
;
function
fn
(
inner
)
{
}
;
}
callback
(
)
;
}
}
{
"
.
/
src
/
mod
"
:
"
src
/
mod
.
js
"
}
]
}
{
}
[
"
input
.
js
"
]
"
parcelOutOfOrderDeclarationsCjs
"
)
;
parcelOutOfOrderDeclarationsCjs
=
parcelOutOfOrderDeclarationsCjs
.
default
;
