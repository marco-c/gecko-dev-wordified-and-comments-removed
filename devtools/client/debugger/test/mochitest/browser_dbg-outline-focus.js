"
use
strict
"
;
add_task
(
async
function
(
)
{
if
(
isCm6Enabled
)
{
return
;
}
const
dbg
=
await
initDebugger
(
"
doc
-
sources
.
html
"
"
long
.
js
"
)
;
await
selectSource
(
dbg
"
long
.
js
"
1
)
;
await
openOutlinePanel
(
dbg
)
;
is
(
findAllElements
(
dbg
"
outlineItems
"
)
.
length
9
"
9
items
in
the
outline
list
"
)
;
info
(
"
Clicking
inside
a
function
in
editor
should
focus
the
outline
"
)
;
await
clickAtPos
(
dbg
{
line
:
15
column
:
3
}
)
;
await
waitForElementWithSelector
(
dbg
"
.
outline
-
list__element
.
focused
"
)
;
ok
(
getFocusedFunction
(
dbg
)
.
includes
(
"
addTodo
"
)
"
The
right
function
is
focused
"
)
;
info
(
"
Clicking
an
empty
line
in
the
editor
should
unfocus
the
outline
"
)
;
await
clickAtPos
(
dbg
{
line
:
13
column
:
3
}
)
;
is
(
getFocusedNode
(
dbg
)
null
"
should
not
exist
"
)
;
}
)
;
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
scripts
.
html
"
"
simple1
.
js
"
)
;
await
selectSource
(
dbg
"
simple1
.
js
"
1
)
;
await
openOutlinePanel
(
dbg
)
;
assertOutlineItems
(
dbg
[
"
main
(
)
"
"
doEval
(
)
"
"
evaledFunc
(
)
"
"
doNamedEval
(
)
"
"
evaledFunc
(
)
"
"
class
MyClass
"
"
constructor
(
a
b
)
"
"
test
(
)
"
"
#
privateFunc
(
a
b
)
"
"
class
Klass
"
"
constructor
(
)
"
"
test
(
)
"
]
)
;
info
(
"
Click
an
item
in
outline
panel
"
)
;
const
item
=
getNthItem
(
dbg
3
)
;
item
.
click
(
)
;
await
waitForLoadedSource
(
dbg
"
simple1
.
js
"
)
;
assertHighlightLocation
(
dbg
"
simple1
.
js
"
15
)
;
ok
(
item
.
parentNode
.
classList
.
contains
(
"
focused
"
)
"
The
clicked
item
li
is
focused
"
)
;
}
)
;
function
getFocusedNode
(
dbg
)
{
return
findElementWithSelector
(
dbg
"
.
outline
-
list__element
.
focused
"
)
;
}
function
getFocusedFunction
(
dbg
)
{
return
getFocusedNode
(
dbg
)
.
innerText
;
}
function
getNthItem
(
dbg
index
)
{
return
findElement
(
dbg
"
outlineItem
"
index
)
;
}
