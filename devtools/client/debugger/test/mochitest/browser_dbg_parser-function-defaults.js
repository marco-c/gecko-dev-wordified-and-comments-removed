"
use
strict
"
;
function
test
(
)
{
let
{
Parser
ParserHelpers
SyntaxTreeVisitor
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Parser
.
jsm
"
{
}
)
;
function
verify
(
source
predicate
string
)
{
let
ast
=
Parser
.
reflectionAPI
.
parse
(
source
)
;
let
node
=
SyntaxTreeVisitor
.
filter
(
ast
predicate
)
.
pop
(
)
;
let
info
=
ParserHelpers
.
getIdentifierEvalString
(
node
)
;
is
(
info
string
"
The
identifier
evaluation
string
is
correct
.
"
)
;
}
verify
(
"
function
foo
(
a
b
=
'
b
'
)
{
}
"
e
=
>
e
.
type
=
=
"
Literal
"
"
\
"
b
\
"
"
)
;
verify
(
"
let
foo
=
function
(
a
b
=
'
b
'
)
{
}
"
e
=
>
e
.
type
=
=
"
Literal
"
"
\
"
b
\
"
"
)
;
verify
(
"
let
foo
=
(
a
b
=
'
b
'
)
=
>
{
}
"
e
=
>
e
.
type
=
=
"
Literal
"
"
\
"
b
\
"
"
)
;
finish
(
)
;
}
