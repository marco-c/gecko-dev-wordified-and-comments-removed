add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
reload
-
link
.
html
"
"
doc
-
reload
-
link
.
html
"
)
;
const
{
selectors
:
{
getSelectedSource
getIsPaused
getCurrentThread
}
getState
}
=
dbg
;
info
(
"
Add
a
breakpoint
that
will
be
hit
on
reload
"
)
;
await
addBreakpoint
(
dbg
"
doc
-
reload
-
link
.
html
"
3
)
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
const
onReloaded
=
waitForReload
(
dbg
.
commands
)
;
info
(
"
Reload
via
a
link
this
causes
special
race
condition
different
from
F5
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
const
reloadLink
=
content
.
document
.
querySelector
(
"
a
"
)
;
reloadLink
.
click
(
)
;
}
)
;
info
(
"
Wait
for
paused
\
n
"
)
;
await
waitForPaused
(
dbg
)
;
info
(
"
Check
paused
location
\
n
"
)
;
const
source
=
findSource
(
dbg
"
doc
-
reload
-
link
.
html
"
)
;
assertPausedAtSourceAndLine
(
dbg
source
.
id
3
)
;
await
resume
(
dbg
)
;
info
(
"
Wait
for
completion
of
the
page
load
"
)
;
await
onReloaded
;
}
}
)
;
async
function
waitForReload
(
commands
)
{
let
resolve
;
const
onReloaded
=
new
Promise
(
r
=
>
(
resolve
=
r
)
)
;
const
{
resourceCommand
}
=
commands
;
const
{
DOCUMENT_EVENT
}
=
resourceCommand
.
TYPES
;
const
onAvailable
=
resources
=
>
{
if
(
resources
.
find
(
resource
=
>
resource
.
name
=
=
"
dom
-
complete
"
)
)
{
resourceCommand
.
unwatchResources
(
[
DOCUMENT_EVENT
]
{
onAvailable
}
)
;
resolve
(
)
;
}
}
;
await
resourceCommand
.
watchResources
(
[
DOCUMENT_EVENT
]
{
onAvailable
ignoreExistingResources
:
true
}
)
;
return
onReloaded
;
}
