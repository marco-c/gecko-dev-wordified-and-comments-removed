"
use
strict
"
;
const
EXAMPLE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
examples
/
"
;
const
EXAMPLE_REMOTE_URL
=
"
https
:
/
/
example
.
org
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
examples
/
"
;
const
EXAMPLE_URL_WITH_PORT
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
examples
/
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
webconsole
/
test
/
browser
/
shared
-
head
.
js
"
this
)
;
registerCleanupFunction
(
(
)
=
>
{
for
(
const
pref
of
[
"
logging
.
console
"
"
logging
.
PageMessages
"
]
)
{
Services
.
prefs
.
clearUserPref
(
pref
)
;
}
}
)
;
async
function
installAndStartContentScriptExtension
(
)
{
function
contentScript
(
)
{
console
.
log
(
"
content
script
loads
"
)
;
window
.
onload
=
(
)
=
>
{
}
;
}
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
Test
content
script
extension
"
content_scripts
:
[
{
js
:
[
"
content_script
.
js
"
]
matches
:
[
"
https
:
/
/
example
.
com
/
*
"
]
run_at
:
"
document_start
"
}
]
}
files
:
{
"
content_script
.
js
"
:
contentScript
}
}
)
;
await
extension
.
startup
(
)
;
return
extension
;
}
function
getSourceTreeLabel
(
dbg
index
)
{
return
(
findElement
(
dbg
"
sourceNode
"
index
)
.
textContent
.
trim
(
)
.
replace
(
/
^
[
\
s
\
u200b
]
*
/
g
"
"
)
)
;
}
async
function
assertSourceTreeNode
(
dbg
text
)
{
let
node
=
null
;
await
waitUntil
(
(
)
=
>
{
node
=
findSourceNodeWithText
(
dbg
text
)
;
return
!
!
node
;
}
)
;
ok
(
!
!
node
Source
tree
node
with
text
"
{
text
}
"
exists
)
;
}
async
function
assertBreakableLines
(
dbg
source
numberOfLines
breakableLines
)
{
await
selectSource
(
dbg
source
)
;
is
(
getLineCount
(
dbg
)
numberOfLines
We
show
the
expected
number
of
lines
in
CodeMirror
for
{
source
}
)
;
for
(
let
line
=
1
;
line
<
=
numberOfLines
;
line
+
+
)
{
await
assertLineIsBreakable
(
dbg
source
line
breakableLines
.
includes
(
line
)
)
;
}
}
function
getRange
(
start
end
)
{
const
range
=
[
]
;
for
(
let
i
=
start
;
i
<
=
end
;
i
+
+
)
{
range
.
push
(
i
)
;
}
return
range
;
}
function
assertCursorPosition
(
dbg
expectedLine
expectedColumn
message
)
{
const
cursorPosition
=
findElementWithSelector
(
dbg
"
.
cursor
-
position
"
)
;
if
(
!
cursorPosition
)
{
ok
(
false
message
+
"
(
no
cursor
displayed
in
footer
)
"
)
;
}
const
match
=
cursorPosition
.
innerText
.
match
(
/
\
(
(
\
d
+
)
(
\
d
+
)
\
)
/
)
;
if
(
!
match
)
{
ok
(
false
message
+
(
wrong
cursor
content
in
footer
:
'
{
cursorPosition
.
innerText
}
'
)
)
;
}
const
[
_
line
column
]
=
match
;
is
(
parseInt
(
line
10
)
expectedLine
message
+
"
(
footer
line
)
"
)
;
is
(
parseInt
(
column
10
)
expectedColumn
message
+
"
(
footer
column
)
"
)
;
const
cursor
=
getCMEditor
(
dbg
)
.
getSelectionCursor
(
)
;
is
(
cursor
.
from
.
line
expectedLine
message
+
"
(
actual
cursor
line
)
"
)
;
is
(
cursor
.
from
.
ch
+
1
expectedColumn
message
+
"
(
actual
cursor
column
)
"
)
;
}
function
selectContextMenuItem
(
dbg
selector
)
{
return
selectDebuggerContextMenuItem
(
dbg
selector
)
;
}
