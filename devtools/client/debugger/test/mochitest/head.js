"
use
strict
"
;
const
EXAMPLE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
examples
/
"
;
const
EXAMPLE_REMOTE_URL
=
"
https
:
/
/
example
.
org
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
examples
/
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
webconsole
/
test
/
browser
/
shared
-
head
.
js
"
this
)
;
const
integrationTasks
=
[
]
;
function
addIntegrationTask
(
fun
)
{
integrationTasks
.
push
(
fun
)
;
}
function
_loadAllIntegrationTests
(
)
{
const
testsDir
=
getChromeDir
(
getResolvedURI
(
gTestPath
)
)
;
testsDir
.
append
(
"
integration
-
tests
"
)
;
const
entries
=
testsDir
.
directoryEntries
;
const
urls
=
[
]
;
while
(
entries
.
hasMoreElements
(
)
)
{
const
file
=
entries
.
nextFile
;
const
url
=
Services
.
io
.
newFileURI
(
file
)
.
spec
;
if
(
url
.
endsWith
(
"
.
js
"
)
)
{
urls
.
push
(
url
)
;
}
}
urls
.
sort
(
)
;
for
(
const
url
of
urls
)
{
Services
.
scriptloader
.
loadSubScript
(
url
this
)
;
}
return
integrationTasks
;
}
async
function
runAllIntegrationTests
(
testFolder
env
)
{
const
tasks
=
_loadAllIntegrationTests
(
)
;
const
testServer
=
createVersionizedHttpTestServer
(
"
examples
/
"
+
testFolder
)
;
const
testUrl
=
testServer
.
urlFor
(
"
index
.
html
"
)
;
for
(
const
task
of
tasks
)
{
info
(
=
=
>
Running
integration
task
'
{
task
.
name
}
'
)
;
await
task
(
testServer
testUrl
env
)
;
}
}
async
function
installAndStartContentScriptExtension
(
)
{
function
contentScript
(
)
{
console
.
log
(
"
content
script
loads
"
)
;
window
.
onload
=
(
)
=
>
{
}
;
}
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
Test
content
script
extension
"
content_scripts
:
[
{
js
:
[
"
content_script
.
js
"
]
matches
:
[
"
https
:
/
/
example
.
com
/
*
"
]
run_at
:
"
document_start
"
}
]
}
files
:
{
"
content_script
.
js
"
:
contentScript
}
}
)
;
await
extension
.
startup
(
)
;
return
extension
;
}
