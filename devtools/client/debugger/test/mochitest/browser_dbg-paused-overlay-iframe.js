const
TEST_COM_URI
=
URL_ROOT_COM
+
"
examples
/
doc_dbg
-
fission
-
frame
-
sources
.
html
"
;
add_task
(
async
function
(
)
{
info
(
"
Load
a
test
page
with
a
remote
frame
"
)
;
const
dbg
=
await
initDebuggerWithAbsoluteURL
(
TEST_COM_URI
"
simple1
.
js
"
"
simple2
.
js
"
)
;
const
{
selectors
:
{
getSelectedSource
}
getState
commands
}
=
dbg
;
info
(
"
Add
breakpoint
within
the
iframe
in
foo
function
"
)
;
await
selectSource
(
dbg
"
simple2
.
js
"
)
;
await
addBreakpoint
(
dbg
"
simple2
.
js
"
5
)
;
info
(
"
Call
foo
in
the
iframe
"
)
;
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
const
iframe
=
content
.
document
.
querySelector
(
"
iframe
"
)
;
SpecialPowers
.
spawn
(
iframe
[
]
(
)
=
>
{
return
content
.
wrappedJSObject
.
foo
(
)
;
}
)
;
}
)
;
await
waitFor
(
(
)
=
>
isPaused
(
dbg
)
"
Wait
for
the
debugger
to
pause
"
)
;
ok
(
true
"
debugger
is
paused
"
)
;
let
highlighterTestFront
;
if
(
isFissionEnabled
(
)
|
|
isEveryFrameTargetEnabled
(
)
)
{
const
iframeTarget
=
commands
.
targetCommand
.
getAllTargets
(
[
commands
.
targetCommand
.
TYPES
.
FRAME
]
)
.
find
(
target
=
>
target
.
url
.
includes
(
"
example
.
org
"
)
)
;
highlighterTestFront
=
await
iframeTarget
.
getFront
(
"
highlighterTest
"
)
;
}
else
{
highlighterTestFront
=
await
getHighlighterTestFront
(
dbg
.
toolbox
)
;
}
info
(
"
Check
that
the
paused
overlay
is
displayed
"
)
;
await
waitFor
(
async
(
)
=
>
await
highlighterTestFront
.
isPausedDebuggerOverlayVisible
(
)
)
;
ok
(
true
"
Paused
debugger
overlay
is
visible
"
)
;
ok
(
getSelectedSource
(
)
.
url
.
includes
(
"
simple2
.
js
"
)
"
Selected
source
is
simple2
.
js
"
)
;
assertPausedLocation
(
dbg
)
;
assertDebugLine
(
dbg
5
)
;
info
(
"
Test
clicking
the
resume
button
"
)
;
await
highlighterTestFront
.
clickPausedDebuggerOverlayButton
(
"
paused
-
dbg
-
resume
-
button
"
)
;
await
waitFor
(
(
)
=
>
!
isPaused
(
dbg
)
"
Wait
for
the
debugger
to
resume
"
)
;
ok
(
"
The
debugger
isn
'
t
paused
after
clicking
on
the
resume
button
"
)
;
await
waitFor
(
async
(
)
=
>
{
const
visible
=
await
highlighterTestFront
.
isPausedDebuggerOverlayVisible
(
)
;
return
!
visible
;
}
)
;
ok
(
true
"
The
overlay
is
now
hidden
"
)
;
}
)
;
