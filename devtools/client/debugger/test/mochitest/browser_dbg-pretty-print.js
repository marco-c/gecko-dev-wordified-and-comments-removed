requestLongerTimeout
(
2
)
;
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
minified
.
html
"
"
math
.
min
.
js
"
)
;
await
selectSource
(
dbg
"
math
.
min
.
js
"
2
)
;
clickElement
(
dbg
"
prettyPrintButton
"
)
;
await
waitForSelectedSource
(
dbg
"
math
.
min
.
js
:
formatted
"
)
;
const
ppSrc
=
findSource
(
dbg
"
math
.
min
.
js
:
formatted
"
)
;
ok
(
ppSrc
"
Pretty
-
printed
source
exists
"
)
;
await
addBreakpoint
(
dbg
ppSrc
18
)
;
invokeInTab
(
"
arithmetic
"
)
;
await
waitForPaused
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
await
stepOver
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
await
resume
(
dbg
)
;
ok
(
!
findElement
(
dbg
"
prettyPrintButton
"
)
"
Pretty
Print
Button
is
hidden
"
)
;
await
selectSource
(
dbg
"
math
.
min
.
js
"
)
;
ok
(
findElement
(
dbg
"
prettyPrintButton
"
)
"
Pretty
Print
Button
is
visible
"
)
;
}
)
;
add_task
(
async
function
testPrivateFields
(
)
{
const
httpServer
=
createTestHTTPServer
(
)
;
httpServer
.
registerContentType
(
"
html
"
"
text
/
html
"
)
;
httpServer
.
registerContentType
(
"
js
"
"
application
/
javascript
"
)
;
httpServer
.
registerPathHandler
(
/
function
(
request
response
)
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
write
(
<
html
>
Test
pretty
-
printing
class
with
private
fields
<
script
type
=
"
text
/
javascript
"
src
=
"
class
-
with
-
private
-
fields
.
js
"
>
<
/
script
>
<
/
html
>
)
;
}
)
;
httpServer
.
registerPathHandler
(
"
/
class
-
with
-
private
-
fields
.
js
"
function
(
request
response
)
{
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
javascript
"
)
;
response
.
write
(
class
MyClass
{
constructor
(
a
)
{
this
.
#
a
=
a
;
this
.
#
b
=
Math
.
random
(
)
;
this
.
ab
=
this
.
#
getAB
(
)
;
}
#
a
#
b
=
"
default
value
"
static
#
someStaticPrivate
#
getA
(
)
{
return
this
.
#
a
;
}
#
getAB
(
)
{
return
this
.
#
getA
(
)
+
this
.
#
b
}
}
)
;
}
)
;
const
port
=
httpServer
.
identity
.
primaryPort
;
const
TEST_URL
=
http
:
/
/
localhost
:
{
port
}
/
;
info
(
"
Open
toolbox
"
)
;
const
dbg
=
await
initDebuggerWithAbsoluteURL
(
TEST_URL
)
;
info
(
"
Select
script
with
private
fields
"
)
;
await
selectSource
(
dbg
"
class
-
with
-
private
-
fields
.
js
"
2
)
;
info
(
"
Pretty
print
the
script
"
)
;
clickElement
(
dbg
"
prettyPrintButton
"
)
;
info
(
"
Wait
until
the
script
is
pretty
-
printed
"
)
;
await
waitForSelectedSource
(
dbg
"
class
-
with
-
private
-
fields
.
js
:
formatted
"
)
;
info
(
"
Check
that
the
script
was
pretty
-
printed
as
expected
"
)
;
const
prettyPrintedSource
=
await
findSourceContent
(
dbg
"
class
-
with
-
private
-
fields
.
js
:
formatted
"
)
;
is
(
prettyPrintedSource
.
value
.
trim
(
)
class
MyClass
{
constructor
(
a
)
{
this
.
#
a
=
a
;
this
.
#
b
=
Math
.
random
(
)
;
this
.
ab
=
this
.
#
getAB
(
)
;
}
#
a
#
b
=
'
default
value
'
static
#
someStaticPrivate
#
getA
(
)
{
return
this
.
#
a
;
}
#
getAB
(
)
{
return
this
.
#
getA
(
)
+
this
.
#
b
}
}
.
trim
(
)
"
script
was
pretty
printed
as
expected
"
)
;
}
)
;
