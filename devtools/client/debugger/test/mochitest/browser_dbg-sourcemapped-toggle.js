"
use
strict
"
;
requestLongerTimeout
(
5
)
;
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
sourcemapped
.
html
"
)
;
dbg
.
actions
.
toggleMapScopes
(
)
;
info
(
"
1
.
Pause
on
line
20
"
)
;
const
url
=
"
webpack3
-
babel6
:
/
/
.
/
esmodules
-
cjs
/
input
.
js
"
;
await
waitForSources
(
dbg
url
)
;
const
source
=
findSource
(
dbg
url
)
;
await
selectSource
(
dbg
source
)
;
await
addBreakpoint
(
dbg
source
20
2
)
;
invokeInTab
(
"
webpack3Babel6EsmodulesCjs
"
)
;
await
waitForPaused
(
dbg
)
;
info
(
"
2
.
Hover
on
a
token
with
mapScopes
enabled
"
)
;
await
previewToken
(
dbg
20
16
'
"
a
-
default
"
'
)
;
ok
(
getOriginalScope
(
dbg
)
!
=
null
"
Scopes
are
mapped
"
)
;
info
(
"
3
.
Hover
on
a
token
with
mapScopes
disabled
"
)
;
clickElement
(
dbg
"
mapScopesCheckbox
"
)
;
await
previewToken
(
dbg
21
16
"
undefined
"
)
;
info
(
"
4
.
StepOver
with
mapScopes
disabled
"
)
;
await
stepOver
(
dbg
)
;
await
previewToken
(
dbg
20
16
"
undefined
"
)
;
ok
(
getOriginalScope
(
dbg
)
=
=
null
"
Scopes
are
not
mapped
"
)
;
}
)
;
function
getOriginalScope
(
dbg
)
{
return
dbg
.
selectors
.
getSelectedOriginalScope
(
dbg
.
selectors
.
getCurrentThread
(
)
)
;
}
async
function
previewToken
(
dbg
line
column
value
)
{
const
previewEl
=
await
tryHovering
(
dbg
line
column
"
previewPopup
"
)
;
is
(
previewEl
.
innerText
value
)
;
dbg
.
actions
.
clearPreview
(
getContext
(
dbg
)
)
;
}
