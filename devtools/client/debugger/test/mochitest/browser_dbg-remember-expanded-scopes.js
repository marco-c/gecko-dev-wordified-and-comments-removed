const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
No
such
actor
/
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
connection
just
closed
/
)
;
const
MaxItems
=
10
;
function
findNode
(
dbg
text
)
{
for
(
let
index
=
0
;
index
<
MaxItems
;
index
+
+
)
{
var
elem
=
findElement
(
dbg
"
scopeNode
"
index
)
;
if
(
elem
&
&
elem
.
innerText
=
=
text
)
{
return
elem
;
}
}
return
null
;
}
async
function
toggleNode
(
dbg
text
)
{
const
node
=
await
waitUntilPredicate
(
(
)
=
>
findNode
(
dbg
text
)
)
;
return
toggleObjectInspectorNode
(
node
)
;
}
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
remember
-
expanded
-
scopes
.
html
"
)
;
invokeInTab
(
"
main
"
"
doc
-
remember
-
expanded
-
scopes
.
html
"
)
;
await
waitForPaused
(
dbg
)
;
const
MaxItems
=
10
;
await
toggleNode
(
dbg
"
object
"
)
;
await
toggleNode
(
dbg
"
innerObject
"
)
;
await
stepOver
(
dbg
)
;
await
waitForPaused
(
dbg
)
;
await
waitUntil
(
(
)
=
>
findNode
(
dbg
"
innerData
"
)
)
;
ok
(
"
Inner
object
data
automatically
expanded
after
stepping
"
)
;
}
)
;
