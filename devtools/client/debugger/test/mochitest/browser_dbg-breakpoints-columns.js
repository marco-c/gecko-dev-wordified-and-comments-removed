function
getColumnBreakpointElements
(
dbg
)
{
return
findAllElementsWithSelector
(
dbg
"
.
column
-
breakpoint
"
)
;
}
async
function
assertConditionalBreakpointIsFocused
(
dbg
)
{
const
input
=
findElement
(
dbg
"
conditionalPanelInput
"
)
;
await
waitForElementFocus
(
dbg
input
)
;
}
function
waitForElementFocus
(
dbg
el
)
{
const
doc
=
dbg
.
win
.
document
;
return
waitFor
(
(
)
=
>
doc
.
activeElement
=
=
el
&
&
doc
.
hasFocus
(
)
)
;
}
function
hasCondition
(
marker
)
{
return
marker
.
classList
.
contains
(
"
has
-
condition
"
)
;
}
async
function
setConditionalBreakpoint
(
dbg
index
condition
)
{
const
{
addConditionalBreakpoint
editConditionalBreakpoint
}
=
selectors
.
gutterContextMenu
;
const
selector
=
{
addConditionalBreakpoint
}
{
editConditionalBreakpoint
}
;
rightClickElement
(
dbg
"
breakpointItem
"
index
)
;
selectContextMenuItem
(
dbg
selector
)
;
await
waitForElement
(
dbg
"
conditionalPanelInput
"
)
;
await
assertConditionalBreakpointIsFocused
(
dbg
)
;
pressKey
(
dbg
"
End
"
)
;
type
(
dbg
condition
)
;
pressKey
(
dbg
"
Enter
"
)
;
}
function
removeBreakpointViaContext
(
dbg
index
)
{
rightClickElement
(
dbg
"
breakpointItem
"
index
)
;
selectContextMenuItem
(
dbg
"
#
node
-
menu
-
delete
-
self
"
)
;
}
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
scripts
.
html
"
"
simple1
"
)
;
await
pushPref
(
"
devtools
.
debugger
.
features
.
column
-
breakpoints
"
false
)
;
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
features
.
column
-
breakpoints
"
)
)
{
ok
(
true
"
This
test
only
applies
when
column
breakpoints
are
on
"
)
;
return
;
}
await
selectSource
(
dbg
"
simple1
"
)
;
getCM
(
dbg
)
.
setCursor
(
{
line
:
15
ch
:
0
}
)
;
await
addBreakpoint
(
dbg
"
simple1
"
15
)
;
await
waitForElementWithSelector
(
dbg
"
.
column
-
breakpoint
"
)
;
let
columnBreakpointMarkers
=
getColumnBreakpointElements
(
dbg
)
;
ok
(
columnBreakpointMarkers
.
length
=
=
=
2
"
2
column
breakpoint
markers
display
"
)
;
columnBreakpointMarkers
[
0
]
.
click
(
)
;
columnBreakpointMarkers
[
1
]
.
click
(
)
;
await
waitForState
(
dbg
state
=
>
{
return
dbg
.
win
.
document
.
querySelectorAll
(
"
.
breakpoints
-
list
.
breakpoint
"
)
.
length
=
=
=
3
;
}
)
dbg
.
win
.
document
.
querySelector
(
"
.
secondary
-
panes
"
)
.
scrollTop
=
100
;
await
setConditionalBreakpoint
(
dbg
4
"
Eight
"
)
;
await
waitForElementWithSelector
(
dbg
"
.
column
-
breakpoint
.
has
-
condition
"
)
;
removeBreakpointViaContext
(
dbg
3
)
;
await
waitForState
(
dbg
state
=
>
dbg
.
selectors
.
getBreakpointCount
(
state
)
=
=
2
)
;
await
waitForElementWithSelector
(
dbg
"
.
column
-
breakpoint
.
has
-
condition
"
)
;
columnBreakpointMarkers
=
getColumnBreakpointElements
(
dbg
)
;
ok
(
hasCondition
(
columnBreakpointMarkers
[
0
]
)
"
First
column
breakpoint
has
conditional
style
"
)
;
removeBreakpointViaContext
(
dbg
3
)
;
await
waitForState
(
dbg
state
=
>
dbg
.
selectors
.
getBreakpointCount
(
state
)
=
=
1
)
;
await
waitForElementWithSelector
(
dbg
"
.
column
-
breakpoint
"
)
;
await
waitFor
(
(
)
=
>
!
hasCondition
(
getColumnBreakpointElements
(
dbg
)
[
0
]
)
)
;
}
)
;
