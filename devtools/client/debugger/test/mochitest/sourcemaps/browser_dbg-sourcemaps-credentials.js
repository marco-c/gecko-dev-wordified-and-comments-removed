"
use
strict
"
;
const
EXPECTED_COOKIE
=
"
credentials
=
true
"
;
add_task
(
async
function
(
)
{
const
httpServer
=
setupTestServer
(
)
;
const
port
=
httpServer
.
identity
.
primaryPort
;
const
dbg
=
await
initDebuggerWithAbsoluteURL
(
http
:
/
/
localhost
:
{
port
}
/
index
.
html
)
;
await
waitForSources
(
dbg
"
min
.
js
"
)
;
const
minifiedSrc
=
findSource
(
dbg
"
min
.
js
"
)
;
await
selectSource
(
dbg
minifiedSrc
)
;
const
footerButton
=
findElement
(
dbg
"
sourceMapFooterButton
"
)
;
is
(
footerButton
.
textContent
"
bundle
file
"
"
Sourcemap
button
mentions
the
bundle
file
"
)
;
ok
(
!
footerButton
.
classList
.
contains
(
"
not
-
mapped
"
)
)
;
info
(
"
Click
on
jump
to
original
source
link
from
editor
'
s
footer
"
)
;
const
mappedSourceLink
=
findElement
(
dbg
"
mappedSourceLink
"
)
;
is
(
mappedSourceLink
.
textContent
"
From
original
.
js
"
"
The
link
to
mapped
source
mentions
the
original
file
name
"
)
;
mappedSourceLink
.
click
(
)
;
const
originalSrc
=
findSource
(
dbg
"
original
.
js
"
)
;
await
waitForSelectedSource
(
dbg
originalSrc
)
;
info
(
"
The
original
source
was
successfully
selected
"
)
;
}
)
;
function
setupTestServer
(
)
{
const
httpServer
=
createTestHTTPServer
(
)
;
httpServer
.
registerContentType
(
"
html
"
"
text
/
html
"
)
;
httpServer
.
registerContentType
(
"
js
"
"
application
/
javascript
"
)
;
httpServer
.
registerContentType
(
"
map
"
"
text
/
plain
"
)
;
httpServer
.
registerPathHandler
(
"
/
index
.
html
"
function
(
request
response
)
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
write
(
<
!
DOCTYPE
html
>
<
html
>
<
body
>
<
h1
>
Sourcemap
with
credentials
<
/
h1
>
<
script
src
=
"
/
min
.
js
"
>
<
/
script
>
<
script
type
=
text
/
javascript
>
document
.
cookie
=
"
{
EXPECTED_COOKIE
}
"
;
<
/
script
>
<
/
body
>
)
;
}
)
;
httpServer
.
registerPathHandler
(
"
/
min
.
js
"
function
(
request
response
)
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
javascript
"
false
)
;
response
.
write
(
function
sum
(
n
u
)
{
return
n
+
u
}
/
/
#
sourceMappingURL
=
min
.
js
.
map
)
;
}
)
;
httpServer
.
registerPathHandler
(
"
/
min
.
js
.
map
"
function
(
request
response
)
{
if
(
request
.
hasHeader
(
"
Cookie
"
)
&
&
request
.
getHeader
(
"
Cookie
"
)
=
=
EXPECTED_COOKIE
)
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
javascript
"
false
)
;
response
.
write
(
{
"
version
"
:
3
"
sources
"
:
[
"
original
.
js
"
]
"
names
"
:
[
"
sum
"
"
first
"
"
second
"
]
"
mappings
"
:
"
AAAA
SAASA
IAAIC
EAAOC
GAClB
OAAOD
EAAQC
"
}
)
;
}
else
{
response
.
setStatusLine
(
request
.
httpVersion
404
"
Not
found
"
)
;
}
}
)
;
httpServer
.
registerPathHandler
(
"
/
original
.
js
"
function
(
request
response
)
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
javascript
"
false
)
;
response
.
write
(
function
sum
(
first
second
)
{
return
first
+
second
;
}
)
;
}
)
;
return
httpServer
;
}
