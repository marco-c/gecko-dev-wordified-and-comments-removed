"
use
strict
"
;
const
SW_URL
=
EXAMPLE_URL
+
"
service
-
worker
.
sjs
"
;
add_task
(
async
function
(
)
{
info
(
"
Subtest
#
1
"
)
;
await
pushPref
(
"
devtools
.
debugger
.
features
.
windowless
-
service
-
workers
"
true
)
;
await
pushPref
(
"
devtools
.
debugger
.
threads
-
visible
"
true
)
;
await
pushPref
(
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
)
;
const
dbg
=
await
initDebugger
(
"
doc
-
service
-
workers
.
html
"
)
;
invokeInTab
(
"
registerWorker
"
)
;
await
waitForSource
(
dbg
"
service
-
worker
.
sjs
"
)
;
const
workerSource
=
findSource
(
dbg
"
service
-
worker
.
sjs
"
)
;
await
addBreakpoint
(
dbg
"
service
-
worker
.
sjs
"
13
)
;
invokeInTab
(
"
fetchFromWorker
"
)
;
await
waitForPaused
(
dbg
)
;
assertPausedAtSourceAndLine
(
dbg
workerSource
.
id
13
)
;
await
resume
(
dbg
)
;
await
waitForRequestsToSettle
(
dbg
)
;
await
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
(
)
{
info
(
"
Subtest
#
2
"
)
;
const
toolbox
=
await
openNewTabAndToolbox
(
{
EXAMPLE_URL
}
doc
-
service
-
workers
.
html
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
checkAdditionalThreadCount
(
dbg
1
)
;
const
onReloaded
=
reload
(
dbg
)
;
await
waitForSource
(
dbg
"
service
-
worker
.
sjs
"
)
;
const
workerSource
=
findSource
(
dbg
"
service
-
worker
.
sjs
"
)
;
await
waitForPaused
(
dbg
)
;
assertPausedAtSourceAndLine
(
dbg
workerSource
.
id
13
)
;
await
checkAdditionalThreadCount
(
dbg
1
)
;
await
resume
(
dbg
)
;
await
dbg
.
actions
.
removeAllBreakpoints
(
)
;
info
(
"
Wait
for
reload
to
complete
after
resume
"
)
;
await
onReloaded
;
await
unregisterServiceWorker
(
SW_URL
)
;
await
checkAdditionalThreadCount
(
dbg
0
)
;
await
waitForRequestsToSettle
(
dbg
)
;
await
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
(
)
{
info
(
"
Subtest
#
3
"
)
;
const
toolbox
=
await
openNewTabAndToolbox
(
{
EXAMPLE_URL
}
doc
-
service
-
workers
.
html
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
invokeInTab
(
"
registerWorker
"
)
;
await
checkAdditionalThreadCount
(
dbg
1
)
;
await
checkWorkerStatus
(
dbg
"
activated
"
)
;
const
firstTab
=
gBrowser
.
selectedTab
;
await
addTab
(
{
EXAMPLE_URL
}
service
-
worker
.
sjs
?
setStatus
=
newServiceWorker
)
;
await
removeTab
(
gBrowser
.
selectedTab
)
;
const
secondTab
=
await
addTab
(
{
EXAMPLE_URL
}
doc
-
service
-
workers
.
html
)
;
await
gBrowser
.
selectTabAtIndex
(
gBrowser
.
tabs
.
indexOf
(
firstTab
)
)
;
await
checkAdditionalThreadCount
(
dbg
2
)
;
const
sources
=
await
waitFor
(
(
)
=
>
{
const
list
=
dbg
.
selectors
.
getSourceList
(
)
.
filter
(
s
=
>
s
.
url
.
includes
(
"
service
-
worker
.
sjs
"
)
)
;
return
list
.
length
=
=
1
?
list
:
null
;
}
)
;
ok
(
sources
.
length
"
Found
one
sources
for
service
worker
"
)
;
await
addBreakpoint
(
dbg
"
service
-
worker
.
sjs
"
2
)
;
await
unregisterServiceWorker
(
SW_URL
)
;
await
checkAdditionalThreadCount
(
dbg
0
)
;
await
waitForRequestsToSettle
(
dbg
)
;
await
removeTab
(
firstTab
)
;
await
removeTab
(
secondTab
)
;
await
addTab
(
{
EXAMPLE_URL
}
service
-
worker
.
sjs
?
setStatus
=
)
;
await
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
(
)
{
info
(
"
Subtest
#
4
"
)
;
if
(
Services
.
appinfo
.
fissionAutostart
)
{
return
;
}
const
toolbox
=
await
openNewTabAndToolbox
(
{
EXAMPLE_URL
}
doc
-
service
-
workers
.
html
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
invokeInTab
(
"
registerWorker
"
)
;
await
checkAdditionalThreadCount
(
dbg
1
)
;
await
waitForSource
(
dbg
"
service
-
worker
.
sjs
"
)
;
const
workerSource
=
findSource
(
dbg
"
service
-
worker
.
sjs
"
)
;
await
waitForBreakpointCount
(
dbg
1
)
;
await
waitForPaused
(
dbg
)
;
assertPausedAtSourceAndLine
(
dbg
workerSource
.
id
2
)
;
await
checkWorkerStatus
(
dbg
"
parsed
"
)
;
await
addBreakpoint
(
dbg
"
service
-
worker
.
sjs
"
19
)
;
await
resume
(
dbg
)
;
await
waitForPaused
(
dbg
)
;
assertPausedAtSourceAndLine
(
dbg
workerSource
.
id
19
)
;
await
checkWorkerStatus
(
dbg
"
installing
"
)
;
await
addBreakpoint
(
dbg
"
service
-
worker
.
sjs
"
5
)
;
await
resume
(
dbg
)
;
await
waitForPaused
(
dbg
)
;
assertPausedAtSourceAndLine
(
dbg
workerSource
.
id
5
)
;
await
checkWorkerStatus
(
dbg
"
activating
"
)
;
await
resume
(
dbg
)
;
await
unregisterServiceWorker
(
SW_URL
)
;
await
checkAdditionalThreadCount
(
dbg
0
)
;
await
waitForRequestsToSettle
(
dbg
)
;
await
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
async
function
checkWorkerStatus
(
dbg
status
)
{
}
