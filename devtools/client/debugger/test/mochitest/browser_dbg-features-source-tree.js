"
use
strict
"
;
add_task
(
async
function
testSimpleSourcesWithManualClickExpand
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
nested
-
source
.
js
"
"
long
.
js
"
)
;
is
(
getLabel
(
dbg
1
)
"
Main
Thread
"
"
Main
thread
is
labeled
properly
"
)
;
info
(
"
Before
interacting
with
the
source
tree
no
source
are
displayed
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
]
{
noExpand
:
true
}
)
;
await
clickElement
(
dbg
"
sourceDirectoryLabel
"
3
)
;
info
(
"
After
clicking
on
the
directory
all
sources
but
the
nested
ones
are
displayed
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
]
{
noExpand
:
true
}
)
;
await
clickElement
(
dbg
"
sourceDirectoryLabel
"
4
)
;
info
(
"
After
clicking
on
the
nested
directory
the
nested
source
is
also
displayed
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
"
nested
-
source
.
js
"
]
{
noExpand
:
true
}
)
;
const
selected
=
waitForDispatch
(
dbg
.
store
"
SET_SELECTED_LOCATION
"
)
;
await
clickElement
(
dbg
"
sourceNode
"
5
)
;
await
selected
;
await
waitForSelectedSource
(
dbg
"
nested
-
source
.
js
"
)
;
await
waitForElementWithSelector
(
dbg
"
.
sources
-
list
.
focused
"
)
;
const
selectedSource
=
dbg
.
selectors
.
getSelectedSource
(
)
.
url
;
ok
(
selectedSource
.
includes
(
"
nested
-
source
.
js
"
)
"
nested
-
source
is
selected
"
)
;
await
assertNodeIsFocused
(
dbg
5
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
const
script
=
content
.
document
.
createElement
(
"
script
"
)
;
script
.
src
=
"
math
.
min
.
js
"
;
content
.
document
.
body
.
appendChild
(
script
)
;
}
)
;
info
(
"
After
adding
math
.
min
.
js
we
got
a
new
source
displayed
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
"
nested
-
source
.
js
"
"
math
.
min
.
js
"
]
{
noExpand
:
true
}
)
;
is
(
getSourceNodeLabel
(
dbg
8
)
"
math
.
min
.
js
"
"
math
.
min
.
js
-
The
dynamic
script
exists
"
)
;
info
(
"
Assert
that
nested
-
source
.
js
is
still
the
selected
source
"
)
;
await
assertNodeIsFocused
(
dbg
5
)
;
}
)
;
add_task
(
async
function
testSimpleSourcesWithManualKeyShortcutsExpand
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
nested
-
source
.
js
"
"
long
.
js
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
]
{
noExpand
:
true
}
)
;
await
clickElement
(
dbg
"
sourceDirectoryLabel
"
3
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
]
{
noExpand
:
true
}
)
;
await
pressKey
(
dbg
"
Right
"
)
;
await
assertNodeIsFocused
(
dbg
3
)
;
await
pressKey
(
dbg
"
Right
"
)
;
await
assertNodeIsFocused
(
dbg
4
)
;
await
pressKey
(
dbg
"
Left
"
)
;
await
assertNodeIsFocused
(
dbg
4
)
;
await
pressKey
(
dbg
"
Down
"
)
;
await
assertNodeIsFocused
(
dbg
4
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
]
{
noExpand
:
true
}
)
;
await
pressKey
(
dbg
"
Right
"
)
;
await
assertNodeIsFocused
(
dbg
4
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
"
nested
-
source
.
js
"
]
{
noExpand
:
true
}
)
;
await
pressKey
(
dbg
"
Down
"
)
;
await
assertNodeIsFocused
(
dbg
5
)
;
await
pressKey
(
dbg
"
Down
"
)
;
await
pressKey
(
dbg
"
Down
"
)
;
await
assertNodeIsFocused
(
dbg
6
)
;
await
pressKey
(
dbg
"
Up
"
)
;
await
assertNodeIsFocused
(
dbg
5
)
;
await
pressKey
(
dbg
"
Left
"
)
;
await
assertNodeIsFocused
(
dbg
4
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
"
nested
-
source
.
js
"
]
{
noExpand
:
true
}
)
;
await
pressKey
(
dbg
"
Left
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
]
{
noExpand
:
true
}
)
;
await
pressKey
(
dbg
"
Left
"
)
;
await
assertNodeIsFocused
(
dbg
3
)
;
await
pressKey
(
dbg
"
Up
"
)
;
await
assertNodeIsFocused
(
dbg
2
)
;
}
)
;
add_task
(
async
function
testSourceTreeWithQueryStrings
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
sources
-
querystring
.
html
"
"
simple1
.
js
?
x
=
1
"
"
simple1
.
js
?
x
=
2
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
]
{
noExpand
:
true
}
)
;
await
clickElement
(
dbg
"
sourceDirectoryLabel
"
3
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
simple1
.
js
?
x
=
1
"
"
simple1
.
js
?
x
=
2
"
]
{
noExpand
:
true
}
)
;
is
(
getLabel
(
dbg
4
)
"
simple1
.
js
?
x
=
1
"
"
simple1
.
js
?
x
=
1
exists
"
)
;
is
(
getLabel
(
dbg
5
)
"
simple1
.
js
?
x
=
2
"
"
simple1
.
js
?
x
=
2
exists
"
)
;
await
selectSource
(
dbg
"
simple1
.
js
?
x
=
1
"
)
;
const
tab
=
findElement
(
dbg
"
activeTab
"
)
;
is
(
tab
.
innerText
"
simple1
.
js
?
x
=
1
"
"
Tab
label
is
simple1
.
js
?
x
=
1
"
)
;
await
addBreakpoint
(
dbg
"
simple1
.
js
?
x
=
1
"
6
)
;
assertBreakpointHeading
(
dbg
"
simple1
.
js
?
x
=
1
"
0
)
;
clickElement
(
dbg
"
prettyPrintButton
"
)
;
await
waitForSource
(
dbg
"
simple1
.
js
?
x
=
1
:
formatted
"
)
;
const
prettyTab
=
findElement
(
dbg
"
activeTab
"
)
;
is
(
prettyTab
.
innerText
"
simple1
.
js
?
x
=
1
"
"
Tab
label
is
simple1
.
js
?
x
=
1
"
)
;
ok
(
prettyTab
.
querySelector
(
"
.
img
.
prettyPrint
"
)
)
;
assertBreakpointHeading
(
dbg
"
simple1
.
js
?
x
=
1
"
0
)
;
pressKey
(
dbg
"
quickOpen
"
)
;
type
(
dbg
"
simple1
.
js
?
x
"
)
;
const
resultItems
=
await
waitForAllElements
(
dbg
"
resultItems
"
)
;
ok
(
resultItems
[
0
]
.
innerText
.
includes
(
"
simple1
.
js
?
x
=
1
"
)
)
;
}
)
;
add_task
(
async
function
testSourceTreeWithNamedEval
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
nested
-
source
.
js
"
"
long
.
js
"
)
;
info
(
"
Assert
that
all
page
sources
appear
in
the
source
tree
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
nested
-
source
.
js
"
"
long
.
js
"
]
)
;
info
(
>
>
>
contentTask
:
evaluate
evaled
.
js
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
content
.
eval
(
window
.
evaledFunc
=
function
(
)
{
}
;
/
/
#
sourceURL
=
evaled
.
js
)
;
}
)
;
info
(
"
Assert
that
the
evaled
source
appear
in
the
source
tree
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
nested
-
source
.
js
"
"
long
.
js
"
"
evaled
.
js
"
]
)
;
info
(
"
Wait
for
the
evaled
source
"
)
;
await
waitForSource
(
dbg
"
evaled
.
js
"
)
;
await
selectSource
(
dbg
"
evaled
.
js
"
)
;
assertTextContentOnLine
(
dbg
1
"
window
.
evaledFunc
=
function
(
)
{
}
;
"
)
;
}
)
;
function
getLabel
(
dbg
index
)
{
return
(
findElement
(
dbg
"
sourceNode
"
index
)
.
textContent
.
trim
(
)
.
replace
(
/
^
[
\
s
\
u200b
]
*
/
g
"
"
)
)
;
}
function
assertBreakpointHeading
(
dbg
label
index
)
{
const
breakpointHeading
=
findAllElements
(
dbg
"
breakpointHeadings
"
)
[
index
]
.
innerText
;
is
(
breakpointHeading
label
Breakpoint
heading
is
{
label
}
)
;
}
