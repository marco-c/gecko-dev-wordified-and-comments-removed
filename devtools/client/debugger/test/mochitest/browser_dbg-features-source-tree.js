"
use
strict
"
;
const
testServer
=
createVersionizedHttpTestServer
(
"
examples
/
sourcemaps
-
reload
-
uncompressed
"
)
;
const
TEST_URL
=
testServer
.
urlFor
(
"
index
.
html
"
)
;
const
INTEGRATION_TEST_PAGE_SOURCES
=
[
"
index
.
html
"
"
iframe
.
html
"
"
script
.
js
"
"
onload
.
js
"
"
test
-
functions
.
js
"
"
query
.
js
?
x
=
1
"
"
query
.
js
?
x
=
2
"
"
bundle
.
js
"
"
original
.
js
"
"
replaced
-
bundle
.
js
"
"
removed
-
original
.
js
"
"
named
-
eval
.
js
"
"
bootstrap
3b1a221408fdde86aa49
"
"
bootstrap
6fda1f7ea9ecbc1a2d5b
"
"
same
-
url
.
sjs
"
"
same
-
url
.
sjs
"
]
;
if
(
isFissionEnabled
(
)
|
|
isEveryFrameTargetEnabled
(
)
)
{
INTEGRATION_TEST_PAGE_SOURCES
.
push
(
"
same
-
url
.
sjs
"
)
;
}
add_task
(
async
function
testSimpleSourcesWithManualClickExpand
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
nested
-
source
.
js
"
"
long
.
js
"
)
;
is
(
getLabel
(
dbg
1
)
"
Main
Thread
"
"
Main
thread
is
labeled
properly
"
)
;
info
(
"
Before
interacting
with
the
source
tree
no
source
are
displayed
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
]
{
noExpand
:
true
}
)
;
await
clickElement
(
dbg
"
sourceDirectoryLabel
"
3
)
;
info
(
"
After
clicking
on
the
directory
all
sources
but
the
nested
ones
are
displayed
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
]
{
noExpand
:
true
}
)
;
await
clickElement
(
dbg
"
sourceDirectoryLabel
"
4
)
;
info
(
"
After
clicking
on
the
nested
directory
the
nested
source
is
also
displayed
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
"
nested
-
source
.
js
"
]
{
noExpand
:
true
}
)
;
const
selected
=
waitForDispatch
(
dbg
.
store
"
SET_SELECTED_LOCATION
"
)
;
await
clickElement
(
dbg
"
sourceNode
"
5
)
;
await
selected
;
await
waitForSelectedSource
(
dbg
"
nested
-
source
.
js
"
)
;
await
waitForElementWithSelector
(
dbg
"
.
sources
-
list
.
focused
"
)
;
const
selectedSource
=
dbg
.
selectors
.
getSelectedSource
(
)
.
url
;
ok
(
selectedSource
.
includes
(
"
nested
-
source
.
js
"
)
"
nested
-
source
is
selected
"
)
;
await
assertNodeIsFocused
(
dbg
5
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
const
script
=
content
.
document
.
createElement
(
"
script
"
)
;
script
.
src
=
"
math
.
min
.
js
"
;
content
.
document
.
body
.
appendChild
(
script
)
;
}
)
;
info
(
"
After
adding
math
.
min
.
js
we
got
a
new
source
displayed
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
"
nested
-
source
.
js
"
"
math
.
min
.
js
"
]
{
noExpand
:
true
}
)
;
is
(
getSourceNodeLabel
(
dbg
8
)
"
math
.
min
.
js
"
"
math
.
min
.
js
-
The
dynamic
script
exists
"
)
;
info
(
"
Assert
that
nested
-
source
.
js
is
still
the
selected
source
"
)
;
await
assertNodeIsFocused
(
dbg
5
)
;
}
)
;
add_task
(
async
function
testSimpleSourcesWithManualKeyShortcutsExpand
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
nested
-
source
.
js
"
"
long
.
js
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
]
{
noExpand
:
true
}
)
;
await
clickElement
(
dbg
"
sourceDirectoryLabel
"
3
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
]
{
noExpand
:
true
}
)
;
await
pressKey
(
dbg
"
Right
"
)
;
await
assertNodeIsFocused
(
dbg
3
)
;
await
pressKey
(
dbg
"
Right
"
)
;
await
assertNodeIsFocused
(
dbg
4
)
;
await
pressKey
(
dbg
"
Left
"
)
;
await
assertNodeIsFocused
(
dbg
4
)
;
await
pressKey
(
dbg
"
Down
"
)
;
await
assertNodeIsFocused
(
dbg
4
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
]
{
noExpand
:
true
}
)
;
await
pressKey
(
dbg
"
Right
"
)
;
await
assertNodeIsFocused
(
dbg
4
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
"
nested
-
source
.
js
"
]
{
noExpand
:
true
}
)
;
await
pressKey
(
dbg
"
Down
"
)
;
await
assertNodeIsFocused
(
dbg
5
)
;
await
pressKey
(
dbg
"
Down
"
)
;
await
pressKey
(
dbg
"
Down
"
)
;
await
assertNodeIsFocused
(
dbg
6
)
;
await
pressKey
(
dbg
"
Up
"
)
;
await
assertNodeIsFocused
(
dbg
5
)
;
await
pressKey
(
dbg
"
Left
"
)
;
await
assertNodeIsFocused
(
dbg
4
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
"
nested
-
source
.
js
"
]
{
noExpand
:
true
}
)
;
await
pressKey
(
dbg
"
Left
"
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
sources
.
html
"
"
simple1
.
js
"
"
simple2
.
js
"
"
long
.
js
"
]
{
noExpand
:
true
}
)
;
await
pressKey
(
dbg
"
Left
"
)
;
await
assertNodeIsFocused
(
dbg
3
)
;
await
pressKey
(
dbg
"
Up
"
)
;
await
assertNodeIsFocused
(
dbg
2
)
;
}
)
;
add_task
(
async
function
testSourceTreeOnTheIntegrationTestPage
(
)
{
const
dbg
=
await
initDebuggerWithAbsoluteURL
(
"
about
:
blank
"
)
;
await
navigateToAbsoluteURL
(
dbg
TEST_URL
"
index
.
html
"
"
script
.
js
"
"
test
-
functions
.
js
"
"
query
.
js
?
x
=
1
"
"
query
.
js
?
x
=
2
"
"
bundle
.
js
"
"
original
.
js
"
"
replaced
-
bundle
.
js
"
"
removed
-
original
.
js
"
"
named
-
eval
.
js
"
)
;
await
waitForSourcesInSourceTree
(
dbg
INTEGRATION_TEST_PAGE_SOURCES
)
;
info
(
"
Assert
the
number
of
sources
and
source
actors
for
the
same
-
url
.
sjs
sources
"
)
;
const
mainThreadSameUrlSource
=
findSourceInThread
(
dbg
"
same
-
url
.
sjs
"
"
Main
Thread
"
)
;
ok
(
mainThreadSameUrlSource
"
Found
same
-
url
.
js
in
the
main
thread
"
)
;
is
(
dbg
.
selectors
.
getSourceActorsForSource
(
mainThreadSameUrlSource
.
id
)
.
length
3
"
same
-
url
.
js
is
loaded
3
times
in
the
main
thread
"
)
;
const
iframeSameUrlSource
=
findSourceInThread
(
dbg
"
same
-
url
.
sjs
"
testServer
.
urlFor
(
"
iframe
.
html
"
)
)
;
ok
(
iframeSameUrlSource
"
Found
same
-
url
.
js
in
the
iframe
thread
"
)
;
is
(
dbg
.
selectors
.
getSourceActorsForSource
(
iframeSameUrlSource
.
id
)
.
length
1
"
same
-
url
.
js
is
loaded
one
time
in
the
iframe
thread
"
)
;
const
workerSameUrlSource
=
findSourceInThread
(
dbg
"
same
-
url
.
sjs
"
"
same
-
url
.
sjs
"
)
;
ok
(
workerSameUrlSource
"
Found
same
-
url
.
js
in
the
worker
thread
"
)
;
is
(
dbg
.
selectors
.
getSourceActorsForSource
(
workerSameUrlSource
.
id
)
.
length
1
"
same
-
url
.
js
is
loaded
one
time
in
the
worker
thread
"
)
;
info
(
"
Assert
the
content
of
the
named
eval
"
)
;
await
selectSource
(
dbg
"
named
-
eval
.
js
"
)
;
assertTextContentOnLine
(
dbg
3
console
.
log
(
"
named
-
eval
"
)
;
)
;
info
(
"
Assert
that
nameless
eval
don
'
t
show
up
in
the
source
tree
"
)
;
invokeInTab
(
"
breakInEval
"
)
;
await
waitForPaused
(
dbg
)
;
await
waitForSourcesInSourceTree
(
dbg
INTEGRATION_TEST_PAGE_SOURCES
)
;
await
resume
(
dbg
)
;
info
(
"
Assert
the
content
of
sources
with
query
string
"
)
;
await
selectSource
(
dbg
"
query
.
js
?
x
=
1
"
)
;
const
tab
=
findElement
(
dbg
"
activeTab
"
)
;
is
(
tab
.
innerText
"
query
.
js
?
x
=
1
"
"
Tab
label
is
query
.
js
?
x
=
1
"
)
;
assertTextContentOnLine
(
dbg
1
function
query
(
)
{
console
.
log
(
"
query
x
=
1
"
)
;
}
)
;
await
addBreakpoint
(
dbg
"
query
.
js
?
x
=
1
"
1
)
;
assertBreakpointHeading
(
dbg
"
query
.
js
?
x
=
1
"
0
)
;
clickElement
(
dbg
"
prettyPrintButton
"
)
;
await
waitForSource
(
dbg
"
query
.
js
?
x
=
1
:
formatted
"
)
;
await
waitForSelectedSource
(
dbg
"
query
.
js
?
x
=
1
:
formatted
"
)
;
const
prettyTab
=
findElement
(
dbg
"
activeTab
"
)
;
is
(
prettyTab
.
innerText
"
query
.
js
?
x
=
1
"
"
Tab
label
is
query
.
js
?
x
=
1
"
)
;
ok
(
prettyTab
.
querySelector
(
"
.
img
.
prettyPrint
"
)
)
;
assertBreakpointHeading
(
dbg
"
query
.
js
?
x
=
1
"
0
)
;
assertTextContentOnLine
(
dbg
1
function
query
(
)
{
)
;
assertTextContentOnLine
(
dbg
2
console
.
log
(
'
query
x
=
1
'
)
;
)
;
pressKey
(
dbg
"
quickOpen
"
)
;
type
(
dbg
"
query
.
js
?
x
"
)
;
await
waitFor
(
async
(
)
=
>
{
const
resultItem
=
findElement
(
dbg
"
resultItems
"
)
;
if
(
!
resultItem
)
{
return
false
;
}
return
resultItem
.
innerText
.
includes
(
"
query
.
js
?
x
=
1
"
)
;
}
"
Results
include
the
source
with
the
query
string
"
)
;
}
)
;
add_task
(
async
function
testSourceTreeWithWebExtensionContentScript
(
)
{
const
extension
=
await
installAndStartContentScriptExtension
(
)
;
info
(
"
Without
the
chrome
preference
the
content
script
doesn
'
t
show
up
"
)
;
await
pushPref
(
"
devtools
.
chrome
.
enabled
"
false
)
;
let
dbg
=
await
initDebugger
(
"
doc
-
content
-
script
-
sources
.
html
"
)
;
await
wait
(
1000
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
ExtensionContent
.
jsm
"
]
)
;
await
dbg
.
toolbox
.
closeToolbox
(
)
;
info
(
"
With
the
chrome
preference
the
content
script
shows
up
"
)
;
await
pushPref
(
"
devtools
.
chrome
.
enabled
"
true
)
;
const
toolbox
=
await
openToolboxForTab
(
gBrowser
.
selectedTab
"
jsdebugger
"
)
;
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
content_script
.
js
"
"
ExtensionContent
.
jsm
"
]
)
;
await
selectSource
(
dbg
"
content_script
.
js
"
)
;
ok
(
findElementWithSelector
(
dbg
"
.
sources
-
list
.
focused
"
)
"
Source
is
focused
"
)
;
for
(
let
i
=
1
;
i
<
3
;
i
+
+
)
{
info
(
Reloading
tab
(
{
i
}
time
)
the
content
script
should
always
be
reselected
)
;
gBrowser
.
reloadTab
(
gBrowser
.
selectedTab
)
;
await
waitForSelectedSource
(
dbg
"
content_script
.
js
"
)
;
ok
(
findElementWithSelector
(
dbg
"
.
sources
-
list
.
focused
"
)
"
Source
is
focused
"
)
;
}
await
dbg
.
toolbox
.
closeToolbox
(
)
;
await
extension
.
unload
(
)
;
}
)
;
function
getLabel
(
dbg
index
)
{
return
(
findElement
(
dbg
"
sourceNode
"
index
)
.
textContent
.
trim
(
)
.
replace
(
/
^
[
\
s
\
u200b
]
*
/
g
"
"
)
)
;
}
function
assertBreakpointHeading
(
dbg
label
index
)
{
const
breakpointHeading
=
findAllElements
(
dbg
"
breakpointHeadings
"
)
[
index
]
.
innerText
;
is
(
breakpointHeading
label
Breakpoint
heading
is
{
label
}
)
;
}
