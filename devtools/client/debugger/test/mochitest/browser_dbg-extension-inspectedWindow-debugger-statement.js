"
use
strict
"
;
add_task
(
async
function
(
)
{
const
extension
=
await
installAndStartExtension
(
)
;
const
dbg
=
await
initDebugger
(
"
doc
-
scripts
.
html
"
)
;
await
extension
.
awaitMessage
(
"
loaded
"
)
;
info
(
"
Evaluating
debugger
statement
in
page
"
)
;
const
evalFinished
=
invokeInTab
(
"
nestedC
"
)
;
await
waitForPaused
(
dbg
)
;
info
(
"
resuming
once
"
)
;
await
resume
(
dbg
)
;
info
(
"
waiting
for
invoked
function
to
complete
"
)
;
await
evalFinished
;
await
closeTabAndToolbox
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
(
)
{
const
extension
=
await
installAndStartExtension
(
)
;
const
toolbox
=
await
openNewTabAndToolbox
(
EXAMPLE_URL
+
"
doc
-
scripts
.
html
"
"
webconsole
"
)
;
await
extension
.
awaitMessage
(
"
loaded
"
)
;
info
(
"
Evaluating
debugger
statement
in
console
"
)
;
const
onSelected
=
toolbox
.
once
(
"
jsdebugger
-
selected
"
)
;
const
evalFinished
=
invokeInTab
(
"
nestedC
"
)
;
await
onSelected
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForPaused
(
dbg
)
;
info
(
"
resuming
once
"
)
;
await
resume
(
dbg
)
;
await
evalFinished
;
await
closeTabAndToolbox
(
)
;
await
extension
.
unload
(
)
;
}
)
;
async
function
installAndStartExtension
(
)
{
async
function
devtools_page
(
)
{
await
globalThis
.
browser
.
devtools
.
inspectedWindow
.
eval
(
"
"
)
;
globalThis
.
browser
.
test
.
sendMessage
(
"
loaded
"
)
;
}
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
devtools_page
:
"
devtools_page
.
html
"
}
files
:
{
"
devtools_page
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
/
head
>
<
body
>
<
script
src
=
"
devtools_page
.
js
"
>
<
/
script
>
<
/
body
>
<
/
html
>
"
devtools_page
.
js
"
:
devtools_page
}
}
)
;
await
extension
.
startup
(
)
;
return
extension
;
}
