"
use
strict
"
;
add_task
(
async
function
(
)
{
const
tab
=
await
addTab
(
EXAMPLE_URL
+
"
doc
-
asm
.
html
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
function
(
)
{
Cu
.
forceGC
(
)
;
}
)
;
const
toolbox
=
await
openToolboxForTab
(
tab
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
asm
.
html
"
"
asm
.
js
"
"
asm
.
js
"
]
)
;
is
(
dbg
.
selectors
.
getSourceCount
(
)
3
"
There
are
only
three
sources
"
)
;
const
legitSource
=
findSource
(
dbg
EXAMPLE_URL
+
"
asm
.
js
"
)
;
ok
(
legitSource
.
url
.
startsWith
(
"
https
:
/
/
"
)
"
We
got
the
legit
source
that
works
not
the
spurious
WASM
one
"
)
;
is
(
legitSource
.
isWasm
false
"
ASM
.
js
sources
are
*
not
*
flagged
as
WASM
"
)
;
const
wasmUrl
=
"
wasm
:
"
+
legitSource
.
url
;
ok
(
sourceExists
(
dbg
wasmUrl
)
There
is
a
spurious
wasm
:
/
/
source
displayed
:
{
wasmUrl
}
)
;
await
selectSource
(
dbg
legitSource
)
;
assertTextContentOnLine
(
dbg
7
"
return
1
|
0
;
"
)
;
info
(
"
Before
reloading
ThreadConfiguration
'
s
'
observedAsmJS
'
was
false
while
the
page
was
loading
"
)
;
info
(
"
So
that
we
miss
info
about
the
ASM
sources
and
lines
are
not
breakables
"
)
;
await
assertLineIsBreakable
(
dbg
legitSource
.
url
7
false
)
;
info
(
"
Reload
and
assert
that
ASM
.
js
file
are
then
debuggable
"
)
;
await
reload
(
dbg
"
doc
-
asm
.
html
"
"
asm
.
js
"
)
;
info
(
"
After
reloading
ASM
lines
are
breakable
"
)
;
await
selectSource
(
dbg
"
asm
.
js
"
)
;
await
assertLineIsBreakable
(
dbg
legitSource
.
url
7
true
)
;
await
waitForSourcesInSourceTree
(
dbg
[
"
doc
-
asm
.
html
"
"
asm
.
js
"
]
)
;
is
(
dbg
.
selectors
.
getSourceCount
(
)
2
"
There
is
only
the
two
sources
"
)
;
assertTextContentOnLine
(
dbg
7
"
return
1
|
0
;
"
)
;
await
addBreakpoint
(
dbg
"
asm
.
js
"
7
)
;
invokeInTab
(
"
runAsm
"
)
;
await
waitForPaused
(
dbg
)
;
await
assertPausedAtSourceAndLine
(
dbg
findSource
(
dbg
"
asm
.
js
"
)
.
id
7
)
;
await
assertBreakpoint
(
dbg
7
)
;
await
removeBreakpoint
(
dbg
findSource
(
dbg
"
asm
.
js
"
)
.
id
7
)
;
await
resume
(
dbg
)
;
}
)
;
