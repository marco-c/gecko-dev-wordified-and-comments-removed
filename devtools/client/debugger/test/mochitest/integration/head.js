"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
debugger
/
test
/
mochitest
/
head
.
js
"
this
)
;
const
integrationTasks
=
[
]
;
function
addIntegrationTask
(
fun
)
{
integrationTasks
.
push
(
fun
)
;
}
function
_loadAllIntegrationTests
(
)
{
const
testsDir
=
getChromeDir
(
getResolvedURI
(
gTestPath
)
)
;
testsDir
.
append
(
"
integration
-
tests
"
)
;
const
entries
=
testsDir
.
directoryEntries
;
const
urls
=
[
]
;
while
(
entries
.
hasMoreElements
(
)
)
{
const
file
=
entries
.
nextFile
;
const
url
=
Services
.
io
.
newFileURI
(
file
)
.
spec
;
if
(
url
.
endsWith
(
"
.
js
"
)
)
{
urls
.
push
(
url
)
;
}
}
urls
.
sort
(
)
;
for
(
const
url
of
urls
)
{
Services
.
scriptloader
.
loadSubScript
(
url
this
)
;
}
return
integrationTasks
;
}
async
function
runAllIntegrationTests
(
testFolder
env
)
{
const
tasks
=
_loadAllIntegrationTests
(
)
;
const
testServer
=
createVersionizedHttpTestServer
(
"
.
.
/
examples
/
"
+
testFolder
)
;
const
testUrl
=
testServer
.
urlFor
(
"
index
.
html
"
)
;
for
(
const
task
of
tasks
)
{
info
(
=
=
>
Running
integration
task
'
{
task
.
name
}
'
)
;
await
task
(
testServer
testUrl
env
)
;
}
}
const
INTEGRATION_TEST_PAGE_SOURCES
=
[
"
index
.
html
"
"
iframe
.
html
"
"
script
.
js
"
"
onload
.
js
"
"
test
-
functions
.
js
"
"
query
.
js
?
x
=
1
"
"
query
.
js
?
x
=
2
"
"
query2
.
js
?
y
=
3
"
"
bundle
.
js
"
"
original
.
js
"
"
bundle
-
with
-
another
-
original
.
js
"
"
original
-
with
-
no
-
update
.
js
"
"
replaced
-
bundle
.
js
"
"
removed
-
original
.
js
"
"
named
-
eval
.
js
"
"
react
-
component
-
module
.
js
"
"
.
js
"
"
bootstrap
3b1a221408fdde86aa49
"
"
bootstrap
a1ecee2f86e1d0ea3fb5
"
"
bootstrap
d343aa81956b90d9f67e
"
"
same
-
url
.
sjs
"
"
same
-
url
.
sjs
"
"
log
-
worker
.
js
"
"
same
-
url
.
sjs
"
]
;
