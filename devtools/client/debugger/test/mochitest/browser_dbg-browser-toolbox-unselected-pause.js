"
use
strict
"
;
requestLongerTimeout
(
4
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
browser
-
toolbox
/
test
/
helpers
-
browser
-
toolbox
.
js
"
this
)
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browsertoolbox
.
scope
"
"
everything
"
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
panel
"
"
webconsole
"
)
;
const
ToolboxTask
=
await
initBrowserToolboxTask
(
)
;
await
ToolboxTask
.
importFunctions
(
{
createDebuggerContext
waitUntil
waitForPaused
isPaused
waitForState
waitForSelectedSource
waitForLoadedScopes
waitForInlinePreviews
waitForElement
findElement
getSelector
findElementWithSelector
createLocation
isCm6Enabled
getEditorContent
getCMEditor
}
)
;
await
ToolboxTask
.
spawn
(
selectors
async
_selectors
=
>
{
this
.
selectors
=
_selectors
;
}
)
;
const
onTabOpened
=
addTab
(
"
data
:
text
/
html
<
script
>
debugger
;
<
/
script
>
"
)
;
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
await
waitUntil
(
(
)
=
>
gToolbox
.
currentToolId
=
=
"
jsdebugger
"
)
;
}
)
;
ok
(
true
"
Debugger
selected
"
)
;
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
await
gToolbox
.
getPanelWhenReady
(
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
gToolbox
)
;
await
waitForPaused
(
dbg
)
;
if
(
!
gToolbox
.
isHighlighted
(
"
jsdebugger
"
)
)
{
throw
new
Error
(
"
Debugger
not
highlighted
"
)
;
}
}
)
;
ok
(
true
"
Paused
in
new
tab
"
)
;
await
ToolboxTask
.
destroy
(
)
;
await
onTabOpened
;
}
)
;
