"
use
strict
"
;
addIntegrationTask
(
async
function
testReloadingRemovedOriginalSources
(
testServer
testUrl
{
isCompressed
}
)
{
info
(
"
#
Test
reloading
a
source
that
is
replaced
and
then
removed
"
)
;
testServer
.
backToFirstVersion
(
)
;
const
dbg
=
await
initDebuggerWithAbsoluteURL
(
testUrl
"
removed
-
original
.
js
"
)
;
info
(
"
Add
initial
breakpoint
"
)
;
await
selectSource
(
dbg
"
removed
-
original
.
js
"
)
;
await
addBreakpoint
(
dbg
"
removed
-
original
.
js
"
4
)
;
invokeInTab
(
"
removedOriginal
"
)
;
await
waitForPaused
(
dbg
)
;
const
replacedSource
=
findSource
(
dbg
"
removed
-
original
.
js
"
)
;
assertPausedAtSourceAndLine
(
dbg
replacedSource
.
id
4
)
;
assertTextContentOnLine
(
dbg
4
'
console
.
log
(
"
Removed
original
"
)
;
'
)
;
await
assertBreakpoint
(
dbg
4
)
;
is
(
dbg
.
selectors
.
getBreakpointCount
(
)
1
"
One
breakpoint
exists
"
)
;
is
(
dbg
.
client
.
getServerBreakpointsList
(
)
.
length
1
"
One
breakpoint
exists
on
the
server
"
)
;
let
breakpoint
=
dbg
.
selectors
.
getBreakpointsList
(
)
[
0
]
;
is
(
breakpoint
.
location
.
sourceUrl
replacedSource
.
url
)
;
is
(
breakpoint
.
location
.
line
4
)
;
if
(
isCompressed
)
{
is
(
breakpoint
.
generatedLocation
.
line
1
)
;
is
(
breakpoint
.
generatedLocation
.
column
992
)
;
}
else
{
is
(
breakpoint
.
generatedLocation
.
line
80
)
;
}
await
resume
(
dbg
)
;
info
(
"
Reload
which
should
remove
the
original
file
and
a
add
a
new
original
file
which
will
replace
its
content
in
the
generated
file
"
)
;
const
syncBp
=
waitForDispatch
(
dbg
.
store
"
SET_BREAKPOINT
"
)
;
testServer
.
switchToNextVersion
(
)
;
await
reload
(
dbg
)
;
await
syncBp
;
await
waitForPaused
(
dbg
)
;
const
newSource
=
findSource
(
dbg
"
new
-
original
.
js
"
)
;
assertPausedAtSourceAndLine
(
dbg
newSource
.
id
4
)
;
assertTextContentOnLine
(
dbg
4
'
console
.
log
(
"
New
original
"
)
;
'
)
;
await
assertBreakpoint
(
dbg
4
)
;
is
(
dbg
.
selectors
.
getBreakpointCount
(
)
1
"
One
breakpoint
exists
"
)
;
is
(
dbg
.
client
.
getServerBreakpointsList
(
)
.
length
1
"
One
breakpoint
exists
on
the
server
"
)
;
breakpoint
=
dbg
.
selectors
.
getBreakpointsList
(
)
[
0
]
;
is
(
breakpoint
.
location
.
sourceUrl
newSource
.
url
)
;
is
(
breakpoint
.
location
.
line
4
)
;
if
(
isCompressed
)
{
is
(
breakpoint
.
generatedLocation
.
line
1
)
;
is
(
breakpoint
.
generatedLocation
.
column
992
)
;
}
else
{
is
(
breakpoint
.
generatedLocation
.
line
80
)
;
}
await
resume
(
dbg
)
;
info
(
"
Reload
a
last
time
to
remove
both
original
and
generated
sources
entirely
"
)
;
testServer
.
switchToNextVersion
(
)
;
await
reload
(
dbg
)
;
await
wait
(
1000
)
;
info
(
"
Assert
that
sources
and
breakpoints
are
gone
and
we
aren
'
t
paused
"
)
;
ok
(
!
sourceExists
(
dbg
"
removed
-
original
.
js
"
)
"
removed
-
original
is
not
present
"
)
;
ok
(
!
sourceExists
(
dbg
"
new
-
original
.
js
"
)
"
new
-
original
is
not
present
"
)
;
ok
(
!
sourceExists
(
dbg
"
replaced
-
bundle
.
js
"
)
"
replaced
-
bundle
is
not
present
"
)
;
assertNotPaused
(
dbg
)
;
is
(
dbg
.
selectors
.
getBreakpointCount
(
)
0
"
We
no
longer
have
any
breakpoint
"
)
;
is
(
dbg
.
client
.
getServerBreakpointsList
(
)
.
length
1
"
One
breakpoint
still
exists
on
the
server
"
)
;
}
)
;
