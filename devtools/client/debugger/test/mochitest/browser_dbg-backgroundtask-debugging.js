"
use
strict
"
;
requestLongerTimeout
(
4
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
framework
/
browser
-
toolbox
/
test
/
helpers
-
browser
-
toolbox
.
js
"
this
)
;
const
{
BackgroundTasksTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
BackgroundTasksTestUtils
.
sys
.
mjs
"
)
;
BackgroundTasksTestUtils
.
init
(
this
)
;
const
do_backgroundtask
=
BackgroundTasksTestUtils
.
do_backgroundtask
.
bind
(
BackgroundTasksTestUtils
)
;
add_task
(
async
function
test_backgroundtask_debugger
(
)
{
await
pushPref
(
"
devtools
.
chrome
.
enabled
"
true
)
;
await
pushPref
(
"
devtools
.
debugger
.
remote
-
enabled
"
true
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
enable
-
test
-
server
"
true
)
;
await
pushPref
(
"
devtools
.
debugger
.
prompt
-
connection
"
false
)
;
Services
.
prefs
.
savePrefFile
(
null
)
;
const
p
=
do_backgroundtask
(
"
jsdebugger
"
{
extraArgs
:
[
-
-
jsdebugger
"
-
-
wait
-
for
-
jsdebugger
"
]
extraEnv
:
{
MOZ_BACKGROUNDTASKS_DEFAULT_PROFILE_PATH
:
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
.
path
}
}
)
;
ok
(
true
"
Launched
background
task
"
)
;
const
existingProcessClose
=
async
(
)
=
>
{
const
exitCode
=
await
p
;
return
{
exitCode
}
;
}
;
const
ToolboxTask
=
await
initBrowserToolboxTask
(
{
existingProcessClose
}
)
;
await
ToolboxTask
.
spawn
(
selectors
(
)
=
>
{
const
{
LocalizationHelper
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
l10n
.
js
"
)
;
this
.
DEBUGGER_L10N
=
new
LocalizationHelper
(
"
devtools
/
client
/
locales
/
debugger
.
properties
"
)
;
}
)
;
await
ToolboxTask
.
importFunctions
(
{
checkEvaluateInTopFrame
evaluateInTopFrame
createDebuggerContext
expandAllScopes
findElement
findElementWithSelector
getSelector
getVisibleSelectedFrameLine
isPaused
resume
stepOver
toggleObjectInspectorNode
toggleScopeNode
waitForElement
waitForLoadedScopes
waitForPaused
waitForResumed
waitForSelectedSource
waitForInlinePreviews
waitForState
waitUntil
createLocation
getEditorContent
getCMEditor
log
:
(
msg
data
)
=
>
console
.
log
(
{
msg
}
{
!
data
?
"
"
:
JSON
.
stringify
(
data
)
}
)
info
:
(
msg
data
)
=
>
console
.
info
(
{
msg
}
{
!
data
?
"
"
:
JSON
.
stringify
(
data
)
}
)
}
)
;
await
ToolboxTask
.
spawn
(
selectors
async
_selectors
=
>
{
this
.
selectors
=
_selectors
;
this
.
selectors
.
scopeNode
=
i
=
>
.
scopes
-
list
.
tree
-
node
:
nth
-
child
(
{
i
}
)
.
object
-
label
;
}
)
;
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
await
waitUntil
(
(
)
=
>
gToolbox
.
currentToolId
=
=
"
jsdebugger
"
)
;
}
)
;
ok
(
true
"
Debugger
selected
"
)
;
await
ToolboxTask
.
spawn
(
null
async
(
)
=
>
{
try
{
await
gToolbox
.
getPanelWhenReady
(
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
gToolbox
)
;
await
expandAllScopes
(
dbg
)
;
await
waitForPaused
(
dbg
)
;
if
(
!
gToolbox
.
isHighlighted
(
"
jsdebugger
"
)
)
{
throw
new
Error
(
"
Debugger
not
highlighted
"
)
;
}
}
catch
(
e
)
{
console
.
log
(
"
Caught
exception
in
spawn
"
e
)
;
throw
e
;
}
}
)
;
ok
(
true
"
Paused
in
backgroundtask
script
"
)
;
await
ToolboxTask
.
destroy
(
)
;
}
)
;
