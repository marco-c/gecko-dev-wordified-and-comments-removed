"
use
strict
"
;
const
testServer
=
createVersionizedHttpTestServer
(
"
examples
/
sourcemaps
-
reload
-
uncompressed
"
)
;
const
TEST_URL
=
testServer
.
urlFor
(
"
index
.
html
"
)
;
add_task
(
async
function
testBreakableLinesOverReloads
(
)
{
const
dbg
=
await
initDebuggerWithAbsoluteURL
(
TEST_URL
"
index
.
html
"
"
script
.
js
"
"
original
.
js
"
)
;
info
(
"
Assert
breakable
lines
of
the
first
html
page
load
"
)
;
await
assertBreakableLines
(
dbg
"
index
.
html
"
85
[
.
.
.
getRange
(
16
17
)
21
.
.
.
getRange
(
24
25
)
30
36
39
.
.
.
getRange
(
41
43
)
]
)
;
info
(
"
Assert
breakable
lines
of
the
first
original
source
file
original
.
js
"
)
;
await
assertBreakableLines
(
dbg
"
original
.
js
"
15
[
.
.
.
getRange
(
1
3
)
5
.
.
.
getRange
(
8
10
)
]
)
;
info
(
"
Assert
breakable
lines
of
the
simple
first
load
of
script
.
js
"
)
;
await
assertBreakableLines
(
dbg
"
script
.
js
"
9
[
1
5
7
8
9
]
)
;
info
(
"
Assert
breakable
lines
of
the
first
iframe
page
load
"
)
;
await
assertBreakableLines
(
dbg
"
iframe
.
html
"
30
[
.
.
.
getRange
(
16
17
)
.
.
.
getRange
(
22
23
)
]
)
;
info
(
"
Reload
the
page
wait
for
sources
and
assert
that
breakable
lines
get
updated
"
)
;
testServer
.
switchToNextVersion
(
)
;
await
reload
(
dbg
"
index
.
html
"
"
script
.
js
"
"
original
.
js
"
"
iframe
.
html
"
)
;
await
waitForSelectedSource
(
dbg
"
iframe
.
html
"
)
;
info
(
"
Assert
breakable
lines
of
the
more
complex
second
load
of
script
.
js
"
)
;
await
assertBreakableLines
(
dbg
"
script
.
js
"
23
[
2
.
.
.
getRange
(
13
23
)
]
)
;
info
(
"
Assert
breakable
lines
of
the
second
html
page
load
"
)
;
await
assertBreakableLines
(
dbg
"
index
.
html
"
33
[
25
27
]
)
;
info
(
"
Assert
breakable
lines
of
the
second
orignal
file
"
)
;
await
assertBreakableLines
(
dbg
"
original
.
js
"
18
[
.
.
.
getRange
(
1
3
)
.
.
.
getRange
(
8
11
)
13
]
)
;
await
selectSource
(
dbg
"
iframe
.
html
"
)
;
if
(
isEveryFrameTargetEnabled
(
)
)
{
is
(
getCM
(
dbg
)
.
getValue
(
)
Error
:
Incorrect
contents
fetched
please
reload
.
)
;
}
}
)
;
