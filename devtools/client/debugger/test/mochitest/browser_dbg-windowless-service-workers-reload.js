"
use
strict
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
debugger
.
features
.
windowless
-
service
-
workers
"
true
)
;
await
pushPref
(
"
devtools
.
debugger
.
threads
-
visible
"
true
)
;
await
pushPref
(
"
dom
.
serviceWorkers
.
enabled
"
true
)
;
await
pushPref
(
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
)
;
const
dbg
=
await
initDebugger
(
"
doc
-
service
-
workers
.
html
"
)
;
invokeInTab
(
"
registerWorker
"
)
;
await
waitForSource
(
dbg
"
service
-
worker
.
sjs
"
)
;
const
workerSource
=
findSource
(
dbg
"
service
-
worker
.
sjs
"
)
;
await
reload
(
dbg
"
service
-
worker
.
sjs
"
)
;
await
addBreakpoint
(
dbg
"
service
-
worker
.
sjs
"
13
)
;
invokeInTab
(
"
fetchFromWorker
"
)
;
await
waitForPaused
(
dbg
)
;
assertPausedAtSourceAndLine
(
dbg
workerSource
.
id
13
)
;
await
assertPreviews
(
dbg
[
{
line
:
10
column
:
9
result
:
EXAMPLE_URL
+
"
whatever
"
expression
:
"
url
"
}
]
)
;
await
resume
(
dbg
)
;
await
reload
(
dbg
"
service
-
worker
.
sjs
"
)
;
await
waitForPaused
(
dbg
)
;
assertPausedAtSourceAndLine
(
dbg
workerSource
.
id
13
)
;
await
assertPreviews
(
dbg
[
{
line
:
10
column
:
9
result
:
EXAMPLE_URL
+
"
whatever
"
expression
:
"
url
"
}
]
)
;
await
resume
(
dbg
)
;
await
pushPref
(
"
dom
.
serviceWorkers
.
idle_timeout
"
500
)
;
await
pushPref
(
"
dom
.
serviceWorkers
.
idle_extended_timeout
"
500
)
;
const
swm
=
Cc
[
"
mozilla
.
org
/
serviceworkers
/
manager
;
1
"
]
.
getService
(
Ci
.
nsIServiceWorkerManager
)
;
const
registrations
=
swm
.
getAllRegistrations
(
)
;
for
(
let
i
=
0
;
i
<
registrations
.
length
;
i
+
+
)
{
const
info
=
registrations
.
queryElementAt
(
i
Ci
.
nsIServiceWorkerRegistrationInfo
)
;
if
(
info
.
scriptSpec
.
endsWith
(
"
service
-
worker
.
sjs
"
)
)
{
info
.
activeWorker
.
attachDebugger
(
)
;
info
.
activeWorker
.
detachDebugger
(
)
;
}
}
invokeInTab
(
"
unregisterWorker
"
)
;
await
checkAdditionalThreadCount
(
dbg
0
)
;
await
waitForRequestsToSettle
(
dbg
)
;
await
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
