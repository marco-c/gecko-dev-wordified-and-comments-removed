"
use
strict
"
;
add_task
(
async
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
toolbox
.
splitconsoleEnabled
"
true
)
;
const
dbg
=
await
initDebugger
(
"
doc
-
script
-
switching
.
html
"
"
script
-
switching
-
01
.
js
"
)
;
const
source
=
findSource
(
dbg
"
script
-
switching
-
01
.
js
"
)
;
await
selectSource
(
dbg
"
script
-
switching
-
01
.
js
"
)
;
await
getDebuggerSplitConsole
(
dbg
)
;
info
(
Add
a
first
log
breakpoint
with
no
argument
which
will
log
"
display
name
"
i
.
e
.
firstCall
)
;
await
altClickElement
(
dbg
"
gutter
"
7
)
;
await
waitForBreakpoint
(
dbg
"
script
-
switching
-
01
.
js
"
7
)
;
info
(
"
Add
another
log
breakpoint
with
static
arguments
"
)
;
await
dbg
.
actions
.
addBreakpoint
(
getContext
(
dbg
)
createLocation
(
{
line
:
8
source
}
)
{
logValue
:
"
'
a
'
'
b
'
'
c
'
"
}
)
;
invokeInTab
(
"
firstCall
"
)
;
await
waitForPaused
(
dbg
)
;
info
(
"
Wait
for
the
two
log
breakpoints
"
)
;
await
hasConsoleMessage
(
dbg
"
firstCall
"
)
;
await
hasConsoleMessage
(
dbg
"
a
b
c
"
)
;
const
{
link
value
}
=
await
findConsoleMessage
(
dbg
"
a
b
c
"
)
;
is
(
link
"
script
-
switching
-
01
.
js
:
8
:
2
"
"
logs
should
have
the
relevant
link
"
)
;
is
(
value
"
a
b
c
"
"
logs
should
have
multiple
values
"
)
;
await
removeBreakpoint
(
dbg
source
.
id
7
)
;
await
removeBreakpoint
(
dbg
source
.
id
8
)
;
await
resume
(
dbg
)
;
info
(
"
Now
set
a
log
point
calling
a
method
with
a
debugger
statement
and
a
breakpoint
it
shouldn
'
t
pause
on
the
log
point
"
)
;
await
addBreakpoint
(
dbg
"
script
-
switching
-
01
.
js
"
8
)
;
await
addBreakpoint
(
dbg
"
script
-
switching
-
01
.
js
"
7
)
;
await
dbg
.
actions
.
addBreakpoint
(
getContext
(
dbg
)
createLocation
(
{
line
:
7
source
}
)
{
logValue
:
"
'
second
call
'
secondCall
(
)
"
}
)
;
invokeInTab
(
"
firstCall
"
)
;
await
waitForPaused
(
dbg
)
;
assertPausedAtSourceAndLine
(
dbg
source
.
id
8
)
;
await
hasConsoleMessage
(
dbg
"
second
call
44
"
)
;
await
removeBreakpoint
(
dbg
source
.
id
7
)
;
await
removeBreakpoint
(
dbg
source
.
id
8
)
;
await
resume
(
dbg
)
;
await
resume
(
dbg
)
;
info
(
"
Set
a
log
point
throwing
an
exception
and
ensure
the
exception
is
displayed
"
)
;
await
dbg
.
actions
.
addBreakpoint
(
getContext
(
dbg
)
createLocation
(
{
line
:
7
source
}
)
{
logValue
:
"
jsWithError
(
"
}
)
;
invokeInTab
(
"
firstCall
"
)
;
await
waitForPaused
(
dbg
)
;
assertPausedAtSourceAndLine
(
dbg
findSource
(
dbg
"
script
-
switching
-
02
.
js
"
)
.
id
6
)
;
await
hasConsoleMessage
(
dbg
"
expected
expression
got
'
]
'
"
)
;
}
)
;
