"
use
strict
"
;
add_task
(
async
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
toolbox
.
splitconsole
.
open
"
true
)
;
const
dbg
=
await
initDebugger
(
"
doc
-
script
-
switching
.
html
"
"
script
-
switching
-
01
.
js
"
)
;
const
source
=
findSource
(
dbg
"
script
-
switching
-
01
.
js
"
)
;
await
selectSource
(
dbg
"
script
-
switching
-
01
.
js
"
)
;
await
getDebuggerSplitConsole
(
dbg
)
;
info
(
Add
a
first
log
breakpoint
with
no
argument
which
will
log
"
display
name
"
i
.
e
.
firstCall
)
;
await
altClickElement
(
dbg
"
gutterElement
"
7
)
;
await
waitForBreakpoint
(
dbg
"
script
-
switching
-
01
.
js
"
7
)
;
info
(
"
Add
another
log
breakpoint
with
multiple
arguments
"
)
;
await
dbg
.
actions
.
addBreakpoint
(
createLocation
(
{
line
:
8
source
}
)
{
logValue
:
"
'
a
'
'
b
'
'
c
'
firstCall
"
}
)
;
invokeInTab
(
"
firstCall
"
)
;
await
waitForPaused
(
dbg
)
;
info
(
"
Wait
for
the
two
log
breakpoints
"
)
;
await
hasConsoleMessage
(
dbg
"
firstCall
"
)
;
await
hasConsoleMessage
(
dbg
"
a
b
c
"
)
;
const
{
link
value
}
=
await
findConsoleMessage
(
dbg
"
a
b
c
"
)
;
is
(
link
"
script
-
switching
-
01
.
js
:
8
:
3
"
"
logs
should
have
the
relevant
link
"
)
;
is
(
value
"
a
b
c
\
nfunction
firstCall
(
)
"
"
logs
should
have
multiple
values
"
)
;
await
removeBreakpoint
(
dbg
source
.
id
7
)
;
await
removeBreakpoint
(
dbg
source
.
id
8
)
;
await
resume
(
dbg
)
;
info
(
"
Now
set
a
log
point
calling
a
method
with
a
debugger
statement
and
a
breakpoint
it
shouldn
'
t
pause
on
the
log
point
"
)
;
await
addBreakpoint
(
dbg
"
script
-
switching
-
01
.
js
"
8
)
;
await
addBreakpoint
(
dbg
"
script
-
switching
-
01
.
js
"
7
)
;
await
dbg
.
actions
.
addBreakpoint
(
createLocation
(
{
line
:
7
source
}
)
{
logValue
:
"
'
second
call
'
secondCall
(
)
"
}
)
;
invokeInTab
(
"
firstCall
"
)
;
await
waitForPaused
(
dbg
)
;
await
assertPausedAtSourceAndLine
(
dbg
source
.
id
8
)
;
await
hasConsoleMessage
(
dbg
"
second
call
44
"
)
;
await
removeBreakpoint
(
dbg
source
.
id
7
)
;
await
removeBreakpoint
(
dbg
source
.
id
8
)
;
await
resume
(
dbg
)
;
await
resume
(
dbg
)
;
info
(
"
Set
a
log
point
throwing
an
exception
and
ensure
the
exception
is
displayed
"
)
;
await
dbg
.
actions
.
addBreakpoint
(
createLocation
(
{
line
:
7
source
}
)
{
logValue
:
"
jsWithError
(
"
}
)
;
invokeInTab
(
"
firstCall
"
)
;
await
waitForPaused
(
dbg
)
;
await
assertPausedAtSourceAndLine
(
dbg
findSource
(
dbg
"
script
-
switching
-
02
.
js
"
)
.
id
6
)
;
await
hasConsoleMessage
(
dbg
"
expected
expression
got
'
]
'
"
)
;
await
dbg
.
actions
.
removeAllBreakpoints
(
)
;
await
resume
(
dbg
)
;
info
(
"
About
to
set
log
point
"
)
;
await
selectSource
(
dbg
"
script
-
switching
-
01
.
js
"
)
;
await
setLogPoint
(
dbg
8
"
'
stacktrace
test
'
"
true
)
;
invokeInTab
(
"
logPointTest
"
)
;
info
(
"
logPointTest
invoked
in
tab
"
)
;
await
waitForPaused
(
dbg
)
;
await
resume
(
dbg
)
;
info
(
"
Checking
for
any
console
messages
"
)
;
await
hasConsoleMessage
(
dbg
"
stacktrace
test
"
)
;
const
[
stacktraceMsg
]
=
await
findConsoleMessages
(
dbg
.
toolbox
"
stacktrace
test
"
)
;
const
stacktraceFrames
=
await
waitFor
(
(
)
=
>
stacktraceMsg
.
querySelector
(
"
.
frames
"
)
)
;
const
frameNodes
=
stacktraceFrames
.
querySelectorAll
(
"
.
frame
"
)
;
info
(
Found
{
frameNodes
.
length
}
frames
in
the
stacktrace
)
;
is
(
frameNodes
.
length
2
"
The
message
does
have
the
expected
number
of
frames
in
the
stacktrace
"
)
;
ok
(
frameNodes
[
0
]
.
textContent
.
includes
(
"
script
-
switching
-
01
.
js
:
6
"
)
"
First
frame
should
be
from
line
6
"
)
;
ok
(
frameNodes
[
1
]
.
textContent
.
includes
(
"
script
-
switching
-
01
.
js
:
12
"
)
"
Second
frame
should
be
from
line
12
"
)
;
info
(
"
Reopening
the
panel
to
test
the
checkbox
"
)
;
await
selectSource
(
dbg
"
script
-
switching
-
01
.
js
"
)
;
rightClickElement
(
dbg
"
gutterElement
"
8
)
;
await
waitForContextMenu
(
dbg
)
;
selectDebuggerContextMenuItem
(
dbg
{
selectors
.
addLogItem
}
{
selectors
.
editLogItem
}
)
;
await
waitForConditionalPanelFocus
(
dbg
)
;
info
(
"
Updating
the
log
point
input
value
"
)
;
type
(
dbg
"
'
logpoint
without
stacktrace
'
"
)
;
await
wait
(
1000
)
;
const
stacktraceCheckbox
=
dbg
.
win
.
document
.
querySelector
(
"
#
showStacktrace
"
)
;
ok
(
stacktraceCheckbox
.
checked
"
Checkbox
is
still
checked
when
reopening
the
logpoint
panel
"
)
;
info
(
"
Click
the
checkbox
to
uncheck
it
"
)
;
stacktraceCheckbox
.
click
(
)
;
info
(
"
Checkbox
clicked
to
uncheck
it
"
)
;
await
waitFor
(
(
)
=
>
{
return
!
stacktraceCheckbox
.
checked
;
}
)
;
ok
(
true
"
Checkbox
is
unchecked
after
clicking
"
)
;
const
saveButton
=
dbg
.
win
.
document
.
getElementById
(
"
save
-
logpoint
"
)
;
const
onBreakpointSet
=
waitForDispatch
(
dbg
.
store
"
SET_BREAKPOINT
"
)
;
saveButton
.
click
(
)
;
await
onBreakpointSet
;
info
(
"
Call
logPointTest
to
hit
the
logpoint
"
)
;
invokeInTab
(
"
logPointTest
"
)
;
await
waitForPaused
(
dbg
)
;
await
resume
(
dbg
)
;
await
hasConsoleMessage
(
dbg
"
logpoint
without
stacktrace
"
)
;
const
[
logpointMsg
]
=
await
findConsoleMessages
(
dbg
.
toolbox
"
logpoint
without
stacktrace
"
)
;
await
wait
(
1000
)
;
is
(
logpointMsg
.
querySelector
(
"
.
frames
"
)
null
"
There
is
no
stacktrace
for
the
logpoint
without
stacktrace
"
)
;
}
)
;
