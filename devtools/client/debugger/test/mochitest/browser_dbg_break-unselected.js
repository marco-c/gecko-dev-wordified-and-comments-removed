const
TAB_URL
=
EXAMPLE_URL
+
"
doc_inline
-
debugger
-
statement
.
html
"
;
function
test
(
)
{
Task
.
spawn
(
function
*
(
)
{
const
tab
=
yield
getTab
(
TAB_URL
)
;
const
target
=
TargetFactory
.
forTab
(
tab
)
;
const
toolbox
=
yield
gDevTools
.
showToolbox
(
target
"
webconsole
"
)
;
is
(
toolbox
.
currentToolId
"
webconsole
"
"
Console
is
the
current
panel
"
)
;
toolbox
.
target
.
on
(
"
thread
-
paused
"
Task
.
async
(
function
*
(
)
{
yield
waitForTick
(
)
;
is
(
toolbox
.
currentToolId
"
jsdebugger
"
"
Debugger
is
the
current
panel
"
)
;
yield
toolbox
.
loadTool
(
"
jsdebugger
"
)
;
const
panel
=
toolbox
.
getCurrentPanel
(
)
;
const
queries
=
panel
.
panelWin
.
require
(
"
.
/
content
/
queries
"
)
;
const
getState
=
panel
.
panelWin
.
DebuggerController
.
getState
;
is
(
panel
.
panelWin
.
gThreadClient
.
state
"
paused
"
"
Thread
is
still
paused
"
)
;
yield
waitForSourceAndCaret
(
panel
"
debugger
-
statement
.
html
"
16
)
;
is
(
queries
.
getSelectedSource
(
getState
(
)
)
.
url
TAB_URL
"
Selected
source
is
the
current
tab
url
"
)
;
is
(
queries
.
getSelectedSourceOpts
(
getState
(
)
)
.
line
16
"
Line
16
is
highlighted
in
the
editor
"
)
;
resumeDebuggerThenCloseAndFinish
(
panel
)
;
}
)
)
;
callInTab
(
tab
"
runDebuggerStatement
"
)
;
}
)
;
}
