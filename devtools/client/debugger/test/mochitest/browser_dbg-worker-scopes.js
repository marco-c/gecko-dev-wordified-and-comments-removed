"
use
strict
"
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
Current
state
is
running
/
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
Connection
closed
/
)
;
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
worker
-
scopes
.
html
"
"
scopes
-
worker
.
js
"
)
;
await
selectSource
(
dbg
"
scopes
-
worker
.
js
"
)
;
await
addBreakpointViaGutter
(
dbg
11
)
;
await
dbg
.
toolbox
.
target
.
waitForRequestsToSettle
(
)
;
invokeInTab
(
"
startWorker
"
)
;
await
waitForPaused
(
dbg
"
scopes
-
worker
.
js
"
)
;
await
removeBreakpointViaGutter
(
dbg
11
)
;
const
workerSource2
=
dbg
.
selectors
.
getSelectedSource
(
)
;
await
assertPausedAtSourceAndLine
(
dbg
workerSource2
.
id
11
)
;
await
toggleNode
(
dbg
"
var_array
"
)
;
Assert
.
equal
(
findNodeValue
(
dbg
"
0
"
)
'
"
mango
"
'
"
array
elem0
"
)
;
Assert
.
equal
(
findNodeValue
(
dbg
"
1
"
)
'
"
pamplemousse
"
'
"
array
elem1
"
)
;
Assert
.
equal
(
findNodeValue
(
dbg
"
2
"
)
'
"
pineapple
"
'
"
array
elem2
"
)
;
await
toggleNode
(
dbg
"
var_array
"
)
;
await
toggleNode
(
dbg
"
var_tarray
"
)
;
Assert
.
equal
(
findNodeValue
(
dbg
"
0
"
)
"
42
"
"
tarray
elem0
"
)
;
Assert
.
equal
(
findNodeValue
(
dbg
"
1
"
)
"
43
"
"
tarray
elem1
"
)
;
Assert
.
equal
(
findNodeValue
(
dbg
"
2
"
)
"
44
"
"
tarray
elem2
"
)
;
await
toggleNode
(
dbg
"
var_tarray
"
)
;
await
toggleNode
(
dbg
"
var_set
"
)
;
await
toggleNode
(
dbg
"
<
entries
>
"
)
;
Assert
.
equal
(
findNodeValue
(
dbg
"
0
"
)
'
"
papaya
"
'
"
set
elem0
"
)
;
Assert
.
equal
(
findNodeValue
(
dbg
"
1
"
)
'
"
banana
"
'
"
set
elem1
"
)
;
await
toggleNode
(
dbg
"
var_set
"
)
;
await
toggleNode
(
dbg
"
var_map
"
)
;
await
toggleNode
(
dbg
"
<
entries
>
"
)
;
await
toggleNode
(
dbg
"
0
"
)
;
ok
(
findNodeValue
(
dbg
"
<
key
>
"
)
"
1
"
)
;
ok
(
findNodeValue
(
dbg
"
<
value
>
"
)
'
"
one
"
'
)
;
await
toggleNode
(
dbg
"
0
"
)
;
await
toggleNode
(
dbg
"
1
"
)
;
ok
(
findNodeValue
(
dbg
"
<
key
>
"
)
"
2
"
)
;
ok
(
findNodeValue
(
dbg
"
<
value
>
"
)
'
"
two
"
'
)
;
await
toggleNode
(
dbg
"
var_map
"
)
;
await
toggleNode
(
dbg
"
var_weakmap
"
)
;
await
toggleNode
(
dbg
"
<
entries
>
"
)
;
await
toggleNode
(
dbg
"
0
"
)
;
await
toggleNode
(
dbg
"
<
key
>
"
)
;
ok
(
findNodeValue
(
dbg
"
foo
"
)
"
foo
"
)
;
await
toggleNode
(
dbg
"
<
value
>
"
)
;
ok
(
findNodeValue
(
dbg
"
bar
"
)
"
bar
"
)
;
await
toggleNode
(
dbg
"
var_weakmap
"
)
;
await
toggleNode
(
dbg
"
var_weakset
"
)
;
await
toggleNode
(
dbg
"
<
entries
>
"
)
;
await
toggleNode
(
dbg
"
0
"
)
;
ok
(
findNodeValue
(
dbg
"
foo
"
)
"
foo
"
)
;
await
toggleNode
(
dbg
"
var_weakset
"
)
;
await
toggleScopes
(
dbg
)
;
await
waitForRequestsToSettle
(
dbg
)
;
}
)
;
function
findNode
(
dbg
text
)
{
for
(
let
index
=
0
;
;
index
+
+
)
{
const
elem
=
findElement
(
dbg
"
scopeNode
"
index
)
;
if
(
elem
?
.
innerText
=
=
text
)
{
return
elem
;
}
}
}
function
toggleNode
(
dbg
text
)
{
return
toggleObjectInspectorNode
(
findNode
(
dbg
text
)
)
;
}
function
findNodeValue
(
dbg
text
)
{
for
(
let
index
=
0
;
;
index
+
+
)
{
const
elem
=
findElement
(
dbg
"
scopeNode
"
index
)
;
if
(
elem
?
.
innerText
=
=
text
)
{
return
getScopeNodeValue
(
dbg
index
)
;
}
}
}
async
function
removeBreakpointViaGutter
(
dbg
line
)
{
const
onRemoved
=
waitForDispatch
(
dbg
.
store
"
REMOVE_BREAKPOINT
"
)
;
await
clickGutter
(
dbg
line
)
;
await
onRemoved
;
}
