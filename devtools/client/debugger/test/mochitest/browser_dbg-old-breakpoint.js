add_task
(
async
function
(
)
{
clearDebuggerPreferences
(
)
;
const
pending
=
{
bp1
:
{
location
:
{
sourceId
:
"
"
sourceUrl
:
EXAMPLE_URL
+
"
nowhere2
.
js
"
line
:
5
}
generatedLocation
:
{
sourceUrl
:
EXAMPLE_URL
+
"
simple1
.
js
"
line
:
4
}
options
:
{
}
disabled
:
false
}
bp2
:
{
location
:
{
sourceId
:
"
"
sourceUrl
:
EXAMPLE_URL
+
"
nowhere
.
js
"
line
:
5
}
generatedLocation
:
{
sourceUrl
:
EXAMPLE_URL
+
"
simple3
.
js
"
line
:
2
}
options
:
{
}
disabled
:
false
}
}
;
asyncStorage
.
setItem
(
"
debugger
.
pending
-
breakpoints
"
pending
)
;
const
toolbox
=
await
openNewTabAndToolbox
(
EXAMPLE_URL
+
"
doc
-
scripts
.
html
"
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitUntil
(
(
)
=
>
{
invokeInTab
(
"
main
"
)
;
return
isPaused
(
dbg
)
;
}
)
;
ok
(
true
"
paused
at
unmapped
breakpoint
"
)
;
await
waitForState
(
dbg
state
=
>
dbg
.
selectors
.
getBreakpointCount
(
state
)
=
=
2
)
;
ok
(
true
"
unmapped
breakpoints
shown
in
UI
"
)
;
await
waitForRequestsToSettle
(
dbg
)
;
await
toolbox
.
destroy
(
)
;
}
)
;
add_task
(
async
function
(
)
{
clearDebuggerPreferences
(
)
;
const
pending
=
{
bp1
:
{
location
:
{
sourceId
:
"
"
sourceUrl
:
"
webpack
:
/
/
/
entry
.
js
"
line
:
15
column
:
0
}
generatedLocation
:
{
sourceUrl
:
EXAMPLE_URL
+
"
sourcemaps
/
bundle
.
js
"
line
:
47
column
:
16
}
astLocation
:
{
}
options
:
{
}
disabled
:
false
}
}
;
asyncStorage
.
setItem
(
"
debugger
.
pending
-
breakpoints
"
pending
)
;
const
toolbox
=
await
openNewTabAndToolbox
(
EXAMPLE_URL
+
"
doc
-
sourcemaps
.
html
"
"
jsdebugger
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
await
waitForState
(
dbg
state
=
>
{
const
bps
=
dbg
.
selectors
.
getBreakpointsList
(
state
)
;
return
bps
.
length
=
=
1
&
&
bps
[
0
]
.
location
.
sourceUrl
.
includes
(
"
entry
.
js
"
)
&
&
bps
[
0
]
.
location
.
line
=
=
15
;
}
)
;
ok
(
true
"
removed
old
breakpoint
during
sync
"
)
;
await
waitForRequestsToSettle
(
dbg
)
;
}
)
;
