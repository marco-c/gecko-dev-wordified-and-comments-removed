declare
module
"
debugger
-
html
"
{
declare
type
BreakpointId
=
string
;
declare
type
SourceId
=
string
;
declare
type
ActorId
=
string
;
declare
type
SourceLocation
=
{
|
sourceId
:
SourceId
line
:
number
column
?
:
number
sourceUrl
?
:
string
|
}
;
declare
type
Breakpoint
=
{
id
:
BreakpointId
location
:
SourceLocation
loading
:
boolean
disabled
:
boolean
text
:
string
condition
:
?
string
}
;
declare
type
BreakpointResult
=
{
id
:
ActorId
actualLocation
:
SourceLocation
}
;
declare
type
Source
=
{
id
:
SourceId
url
?
:
string
sourceMapURL
?
:
string
isWasm
:
boolean
text
?
:
string
contentType
?
:
string
}
;
declare
type
FrameId
=
string
;
declare
type
Frame
=
{
id
:
FrameId
displayName
:
string
location
:
SourceLocation
source
?
:
Source
scope
:
Scope
this
:
Object
}
;
declare
type
Why
=
{
type
:
string
}
;
declare
type
WhyPaused
=
{
type
:
string
}
;
declare
type
LoadedObject
=
{
objectId
:
string
parentId
:
string
name
:
string
value
:
any
}
;
declare
type
Pause
=
{
frames
:
Frame
[
]
why
:
Why
getIn
:
(
string
[
]
)
=
>
any
loadedObjects
?
:
LoadedObject
[
]
}
;
declare
type
Expression
=
{
id
:
number
input
:
string
}
;
declare
type
Grip
=
{
actor
:
string
class
:
string
extensible
:
boolean
frozen
:
boolean
isGlobal
:
boolean
ownPropertyLength
:
number
preview
:
{
kind
:
string
url
:
string
}
sealed
:
boolean
type
:
string
}
;
declare
type
SourceText
=
{
id
:
string
text
:
string
contentType
:
string
}
;
declare
type
SourceScope
=
{
type
:
string
start
:
SourceLocation
end
:
SourceLocation
bindings
:
{
[
name
:
string
]
:
SourceLocation
[
]
}
}
;
declare
type
MappedScopeBindings
=
{
type
:
string
bindings
:
{
[
originalName
:
string
]
:
string
}
}
;
declare
type
Script
=
any
;
declare
type
SyntheticScope
=
{
type
:
string
bindingsNames
:
string
[
]
}
;
declare
type
Scope
=
{
actor
:
ActorId
parent
:
Scope
bindings
:
{
arguments
:
Array
<
Object
>
variables
:
Object
}
function
:
{
actor
:
ActorId
class
:
string
displayName
:
string
location
:
SourceLocation
parameterNames
:
Array
<
Object
>
}
syntheticScopes
?
:
{
scopes
:
SyntheticScope
[
]
groupIndex
:
number
groupLength
:
number
}
type
:
string
}
;
}
