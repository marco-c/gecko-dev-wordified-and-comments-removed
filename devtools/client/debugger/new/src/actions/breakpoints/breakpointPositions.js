import
{
isOriginalId
originalToGeneratedId
}
from
"
devtools
-
source
-
map
"
;
import
{
getSourceFromId
getBreakpointPositionsForSource
}
from
"
.
.
/
.
.
/
selectors
"
;
import
type
{
SourceLocation
}
from
"
.
.
/
.
.
/
types
"
;
import
type
{
ThunkArgs
}
from
"
.
.
/
.
.
/
actions
/
types
"
;
import
{
getOriginalLocation
}
from
"
.
.
/
.
.
/
utils
/
source
-
maps
"
;
async
function
mapLocations
(
generatedLocations
state
source
sourceMaps
)
{
return
Promise
.
all
(
generatedLocations
.
map
(
async
generatedLocation
=
>
{
const
location
=
await
getOriginalLocation
(
generatedLocation
source
sourceMaps
)
;
return
{
location
generatedLocation
}
;
}
)
)
;
}
function
convertToList
(
results
sourceId
)
{
const
positions
=
[
]
;
for
(
const
line
in
results
)
{
for
(
const
column
of
results
[
line
]
)
{
positions
.
push
(
{
line
:
Number
(
line
)
column
:
column
sourceId
}
)
;
}
}
return
positions
;
}
export
function
setBreakpointPositions
(
location
:
SourceLocation
)
{
return
async
(
{
getState
dispatch
client
sourceMaps
}
:
ThunkArgs
)
=
>
{
let
sourceId
=
location
.
sourceId
;
if
(
getBreakpointPositionsForSource
(
getState
(
)
sourceId
)
)
{
return
;
}
let
source
=
getSourceFromId
(
getState
(
)
sourceId
)
;
let
results
=
{
}
;
if
(
isOriginalId
(
sourceId
)
)
{
const
ranges
=
await
sourceMaps
.
getGeneratedRangesForOriginal
(
sourceId
source
.
url
true
)
;
sourceId
=
originalToGeneratedId
(
sourceId
)
;
source
=
getSourceFromId
(
getState
(
)
sourceId
)
;
for
(
const
range
of
ranges
)
{
if
(
range
.
end
.
column
=
=
=
Infinity
)
{
range
.
end
.
line
+
=
1
;
range
.
end
.
column
=
0
;
}
const
bps
=
await
client
.
getBreakpointPositions
(
source
.
actors
[
0
]
range
)
;
for
(
const
line
in
bps
)
{
results
[
line
]
=
(
results
[
line
]
|
|
[
]
)
.
concat
(
bps
[
line
]
)
;
}
}
}
else
{
results
=
await
client
.
getBreakpointPositions
(
source
.
actors
[
0
]
)
;
}
let
positions
=
convertToList
(
results
sourceId
)
;
positions
=
await
mapLocations
(
positions
getState
(
)
source
sourceMaps
)
;
return
dispatch
(
{
type
:
"
ADD_BREAKPOINT_POSITIONS
"
positions
location
}
)
;
}
;
}
