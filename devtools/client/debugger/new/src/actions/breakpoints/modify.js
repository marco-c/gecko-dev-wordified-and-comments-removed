import
{
makeBreakpointLocation
makeBreakpointId
getASTLocation
}
from
"
.
.
/
.
.
/
utils
/
breakpoint
"
;
import
{
getTextAtPosition
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
getBreakpoint
getBreakpointPositionsForLocation
getFirstBreakpointPosition
getSymbols
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
loadSourceById
}
from
"
.
.
/
sources
/
loadSourceText
"
;
import
{
setBreakpointPositions
}
from
"
.
/
breakpointPositions
"
;
import
{
recordEvent
}
from
"
.
.
/
.
.
/
utils
/
telemetry
"
;
import
type
{
ThunkArgs
}
from
"
.
.
/
types
"
;
import
type
{
Breakpoint
BreakpointOptions
BreakpointPosition
SourceLocation
}
from
"
.
.
/
.
.
/
types
"
;
function
clientSetBreakpoint
(
breakpoint
:
Breakpoint
)
{
return
(
{
getState
client
}
:
ThunkArgs
)
=
>
{
const
breakpointLocation
=
makeBreakpointLocation
(
getState
(
)
breakpoint
.
generatedLocation
)
;
return
client
.
setBreakpoint
(
breakpointLocation
breakpoint
.
options
)
;
}
;
}
function
clientRemoveBreakpoint
(
breakpoint
:
Breakpoint
)
{
return
(
{
getState
client
}
:
ThunkArgs
)
=
>
{
const
breakpointLocation
=
makeBreakpointLocation
(
getState
(
)
breakpoint
.
generatedLocation
)
;
return
client
.
removeBreakpoint
(
breakpointLocation
)
;
}
;
}
export
function
enableBreakpoint
(
initialBreakpoint
:
Breakpoint
)
{
return
async
(
{
dispatch
getState
client
sourceMaps
}
:
ThunkArgs
)
=
>
{
const
breakpoint
=
getBreakpoint
(
getState
(
)
initialBreakpoint
.
location
)
;
if
(
!
breakpoint
|
|
!
breakpoint
.
disabled
)
{
return
;
}
dispatch
(
{
type
:
"
SET_BREAKPOINT
"
breakpoint
:
{
.
.
.
breakpoint
disabled
:
false
}
}
)
;
return
dispatch
(
clientSetBreakpoint
(
breakpoint
)
)
;
}
;
}
export
function
addBreakpoint
(
initialLocation
:
SourceLocation
options
:
BreakpointOptions
=
{
}
disabled
:
boolean
=
false
)
{
return
async
(
{
dispatch
getState
sourceMaps
client
}
:
ThunkArgs
)
=
>
{
recordEvent
(
"
add_breakpoint
"
)
;
const
{
sourceId
column
}
=
initialLocation
;
await
dispatch
(
setBreakpointPositions
(
{
sourceId
}
)
)
;
const
position
:
?
BreakpointPosition
=
column
?
getBreakpointPositionsForLocation
(
getState
(
)
initialLocation
)
:
getFirstBreakpointPosition
(
getState
(
)
initialLocation
)
;
if
(
!
position
)
{
return
;
}
const
{
location
generatedLocation
}
=
position
;
const
source
=
await
dispatch
(
loadSourceById
(
sourceId
)
)
;
const
generatedSource
=
await
dispatch
(
loadSourceById
(
generatedLocation
.
sourceId
)
)
;
const
symbols
=
getSymbols
(
getState
(
)
source
)
;
const
astLocation
=
await
getASTLocation
(
source
symbols
location
)
;
const
originalText
=
getTextAtPosition
(
source
location
)
;
const
text
=
getTextAtPosition
(
generatedSource
generatedLocation
)
;
const
id
=
makeBreakpointId
(
location
)
;
const
breakpoint
=
{
id
disabled
options
location
astLocation
generatedLocation
text
originalText
}
;
const
generatedId
=
makeBreakpointId
(
breakpoint
.
generatedLocation
)
;
if
(
id
!
=
generatedId
&
&
getBreakpoint
(
getState
(
)
generatedLocation
)
)
{
dispatch
(
{
type
:
"
REMOVE_BREAKPOINT
"
location
:
generatedLocation
}
)
;
}
dispatch
(
{
type
:
"
SET_BREAKPOINT
"
breakpoint
}
)
;
if
(
disabled
)
{
return
dispatch
(
clientRemoveBreakpoint
(
breakpoint
)
)
;
}
return
dispatch
(
clientSetBreakpoint
(
breakpoint
)
)
;
}
;
}
export
function
removeBreakpoint
(
initialBreakpoint
:
Breakpoint
)
{
return
(
{
dispatch
getState
client
}
:
ThunkArgs
)
=
>
{
recordEvent
(
"
remove_breakpoint
"
)
;
const
breakpoint
=
getBreakpoint
(
getState
(
)
initialBreakpoint
.
location
)
;
if
(
!
breakpoint
)
{
return
;
}
dispatch
(
{
type
:
"
REMOVE_BREAKPOINT
"
location
:
breakpoint
.
location
}
)
;
if
(
breakpoint
.
disabled
)
{
return
;
}
return
dispatch
(
clientRemoveBreakpoint
(
breakpoint
)
)
;
}
;
}
export
function
disableBreakpoint
(
initialBreakpoint
:
Breakpoint
)
{
return
(
{
dispatch
getState
client
}
:
ThunkArgs
)
=
>
{
const
breakpoint
=
getBreakpoint
(
getState
(
)
initialBreakpoint
.
location
)
;
if
(
!
breakpoint
|
|
breakpoint
.
disabled
)
{
return
;
}
dispatch
(
{
type
:
"
SET_BREAKPOINT
"
breakpoint
:
{
.
.
.
breakpoint
disabled
:
true
}
}
)
;
return
dispatch
(
clientRemoveBreakpoint
(
breakpoint
)
)
;
}
;
}
export
function
setBreakpointOptions
(
location
:
SourceLocation
options
:
BreakpointOptions
=
{
}
)
{
return
(
{
dispatch
getState
client
sourceMaps
}
:
ThunkArgs
)
=
>
{
let
breakpoint
=
getBreakpoint
(
getState
(
)
location
)
;
if
(
!
breakpoint
)
{
return
dispatch
(
addBreakpoint
(
location
options
)
)
;
}
breakpoint
=
{
.
.
.
breakpoint
disabled
:
false
options
}
;
dispatch
(
{
type
:
"
SET_BREAKPOINT
"
breakpoint
}
)
;
return
dispatch
(
clientSetBreakpoint
(
breakpoint
)
)
;
}
;
}
