import
{
setBreakpointPositions
}
from
"
.
/
breakpointPositions
"
;
import
{
setSymbols
}
from
"
.
.
/
sources
/
symbols
"
;
import
{
assertPendingBreakpoint
findFunctionByName
findPosition
makeBreakpointLocation
}
from
"
.
.
/
.
.
/
utils
/
breakpoint
"
;
import
{
comparePosition
createLocation
}
from
"
.
.
/
.
.
/
utils
/
location
"
;
import
{
originalToGeneratedId
isOriginalId
}
from
"
devtools
-
source
-
map
"
;
import
{
getSource
getBreakpoint
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
removeBreakpoint
addBreakpoint
}
from
"
.
"
;
import
type
{
ThunkArgs
}
from
"
.
.
/
types
"
;
import
type
{
LoadedSymbols
}
from
"
.
.
/
.
.
/
reducers
/
types
"
;
import
type
{
SourceLocation
ASTLocation
PendingBreakpoint
SourceId
BreakpointPositions
}
from
"
.
.
/
.
.
/
types
"
;
async
function
findBreakpointPosition
(
{
getState
dispatch
}
location
:
SourceLocation
)
{
const
positions
:
BreakpointPositions
=
await
dispatch
(
setBreakpointPositions
(
{
sourceId
:
location
.
sourceId
}
)
)
;
const
position
=
findPosition
(
positions
location
)
;
return
position
&
&
position
.
generatedLocation
;
}
async
function
findNewLocation
(
{
name
offset
index
}
:
ASTLocation
location
:
SourceLocation
source
thunkArgs
)
{
const
symbols
:
LoadedSymbols
=
await
thunkArgs
.
dispatch
(
setSymbols
(
{
source
}
)
)
;
const
func
=
findFunctionByName
(
symbols
name
index
)
;
let
line
=
location
.
line
;
if
(
func
)
{
line
=
func
.
location
.
start
.
line
+
offset
.
line
;
}
return
{
line
column
:
location
.
column
sourceUrl
:
source
.
url
sourceId
:
source
.
id
}
;
}
export
function
syncBreakpoint
(
sourceId
:
SourceId
pendingBreakpoint
:
PendingBreakpoint
)
{
return
async
(
thunkArgs
:
ThunkArgs
)
=
>
{
const
{
getState
client
dispatch
}
=
thunkArgs
;
assertPendingBreakpoint
(
pendingBreakpoint
)
;
const
source
=
getSource
(
getState
(
)
sourceId
)
;
const
generatedSourceId
=
isOriginalId
(
sourceId
)
?
originalToGeneratedId
(
sourceId
)
:
sourceId
;
const
generatedSource
=
getSource
(
getState
(
)
generatedSourceId
)
;
if
(
!
source
|
|
!
generatedSource
)
{
return
;
}
const
{
location
generatedLocation
astLocation
}
=
pendingBreakpoint
;
const
sourceGeneratedLocation
=
createLocation
(
{
.
.
.
generatedLocation
sourceId
:
generatedSourceId
}
)
;
if
(
source
=
=
generatedSource
&
&
location
.
sourceUrl
!
=
generatedLocation
.
sourceUrl
)
{
const
breakpointLocation
=
makeBreakpointLocation
(
getState
(
)
sourceGeneratedLocation
)
;
if
(
getBreakpoint
(
getState
(
)
sourceGeneratedLocation
)
|
|
!
client
.
hasBreakpoint
(
breakpointLocation
)
)
{
return
;
}
return
dispatch
(
addBreakpoint
(
sourceGeneratedLocation
pendingBreakpoint
.
options
pendingBreakpoint
.
disabled
)
)
;
}
const
previousLocation
=
{
.
.
.
location
sourceId
}
;
const
newLocation
=
await
findNewLocation
(
astLocation
previousLocation
source
thunkArgs
)
;
const
newGeneratedLocation
=
await
findBreakpointPosition
(
thunkArgs
newLocation
)
;
if
(
!
newGeneratedLocation
)
{
return
;
}
const
isSameLocation
=
comparePosition
(
generatedLocation
newGeneratedLocation
)
;
if
(
!
isSameLocation
)
{
const
bp
=
getBreakpoint
(
getState
(
)
sourceGeneratedLocation
)
;
if
(
bp
)
{
dispatch
(
removeBreakpoint
(
bp
)
)
;
}
else
{
const
breakpointLocation
=
makeBreakpointLocation
(
getState
(
)
sourceGeneratedLocation
)
;
client
.
removeBreakpoint
(
breakpointLocation
)
;
}
}
return
dispatch
(
addBreakpoint
(
newLocation
pendingBreakpoint
.
options
pendingBreakpoint
.
disabled
)
)
;
}
;
}
