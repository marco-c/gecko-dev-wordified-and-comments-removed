"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
syncBreakpointPromise
=
syncBreakpointPromise
;
exports
.
syncBreakpoint
=
syncBreakpoint
;
var
_breakpoint
=
require
(
"
.
.
/
.
.
/
utils
/
breakpoint
/
index
"
)
;
var
_sourceMaps
=
require
(
"
.
.
/
.
.
/
utils
/
source
-
maps
"
)
;
var
_source
=
require
(
"
.
.
/
.
.
/
utils
/
source
"
)
;
var
_devtoolsSourceMap
=
require
(
"
devtools
/
client
/
shared
/
source
-
map
/
index
.
js
"
)
;
var
_selectors
=
require
(
"
.
.
/
.
.
/
selectors
/
index
"
)
;
async
function
makeScopedLocation
(
{
name
offset
}
location
source
)
{
const
scope
=
await
(
0
_breakpoint
.
findScopeByName
)
(
source
name
)
;
const
line
=
scope
?
scope
.
location
.
start
.
line
+
offset
.
line
:
location
.
line
;
return
{
line
column
:
location
.
column
sourceUrl
:
source
.
url
sourceId
:
source
.
id
}
;
}
function
createSyncData
(
id
pendingBreakpoint
location
generatedLocation
previousLocation
text
originalText
)
{
const
overrides
=
{
.
.
.
pendingBreakpoint
generatedLocation
id
text
originalText
}
;
const
breakpoint
=
(
0
_breakpoint
.
createBreakpoint
)
(
location
overrides
)
;
(
0
_breakpoint
.
assertBreakpoint
)
(
breakpoint
)
;
return
{
breakpoint
previousLocation
}
;
}
async
function
syncBreakpointPromise
(
getState
client
sourceMaps
sourceId
pendingBreakpoint
)
{
(
0
_breakpoint
.
assertPendingBreakpoint
)
(
pendingBreakpoint
)
;
const
source
=
(
0
_selectors
.
getSource
)
(
getState
(
)
sourceId
)
;
const
generatedSourceId
=
(
0
_devtoolsSourceMap
.
isOriginalId
)
(
sourceId
)
?
(
0
_devtoolsSourceMap
.
originalToGeneratedId
)
(
sourceId
)
:
sourceId
;
const
generatedSource
=
(
0
_selectors
.
getSource
)
(
getState
(
)
generatedSourceId
)
;
if
(
!
source
)
{
return
null
;
}
const
{
location
astLocation
}
=
pendingBreakpoint
;
const
previousLocation
=
{
.
.
.
location
sourceId
}
;
const
scopedLocation
=
await
makeScopedLocation
(
astLocation
previousLocation
source
)
;
const
scopedGeneratedLocation
=
await
(
0
_sourceMaps
.
getGeneratedLocation
)
(
getState
(
)
source
scopedLocation
sourceMaps
)
;
const
generatedLocation
=
{
.
.
.
pendingBreakpoint
.
generatedLocation
sourceId
:
generatedSourceId
}
;
const
isSameLocation
=
!
(
0
_breakpoint
.
locationMoved
)
(
generatedLocation
scopedGeneratedLocation
)
;
const
existingClient
=
client
.
getBreakpointByLocation
(
generatedLocation
)
;
if
(
pendingBreakpoint
.
disabled
|
|
existingClient
&
&
isSameLocation
)
{
const
id
=
pendingBreakpoint
.
disabled
?
"
"
:
existingClient
.
id
;
const
originalText
=
(
0
_source
.
getTextAtPosition
)
(
source
previousLocation
)
;
const
text
=
(
0
_source
.
getTextAtPosition
)
(
generatedSource
generatedLocation
)
;
return
createSyncData
(
id
pendingBreakpoint
scopedLocation
scopedGeneratedLocation
previousLocation
text
originalText
)
;
}
if
(
existingClient
)
{
await
client
.
removeBreakpoint
(
generatedLocation
)
;
}
if
(
!
scopedGeneratedLocation
.
line
)
{
return
{
previousLocation
breakpoint
:
null
}
;
}
const
{
id
actualLocation
}
=
await
client
.
setBreakpoint
(
scopedGeneratedLocation
pendingBreakpoint
.
condition
(
0
_devtoolsSourceMap
.
isOriginalId
)
(
sourceId
)
)
;
const
newGeneratedLocation
=
actualLocation
;
const
newLocation
=
await
sourceMaps
.
getOriginalLocation
(
newGeneratedLocation
)
;
const
originalText
=
(
0
_source
.
getTextAtPosition
)
(
source
newLocation
)
;
const
text
=
(
0
_source
.
getTextAtPosition
)
(
generatedSource
newGeneratedLocation
)
;
return
createSyncData
(
id
pendingBreakpoint
newLocation
newGeneratedLocation
previousLocation
text
originalText
)
;
}
function
syncBreakpoint
(
sourceId
pendingBreakpoint
)
{
return
async
(
{
dispatch
getState
client
sourceMaps
}
)
=
>
{
const
response
=
await
syncBreakpointPromise
(
getState
client
sourceMaps
sourceId
pendingBreakpoint
)
;
if
(
!
response
)
{
return
;
}
const
{
breakpoint
previousLocation
}
=
response
;
return
dispatch
(
{
type
:
"
SYNC_BREAKPOINT
"
breakpoint
previousLocation
}
)
;
}
;
}
