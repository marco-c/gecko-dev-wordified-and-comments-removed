import
{
isStepping
getPauseReason
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
evaluateExpressions
}
from
"
.
.
/
expressions
"
;
import
{
inDebuggerEval
}
from
"
.
.
/
.
.
/
utils
/
pause
"
;
import
type
{
ThunkArgs
}
from
"
.
.
/
types
"
;
import
type
{
ResumedPacket
}
from
"
.
.
/
.
.
/
client
/
firefox
/
types
"
;
export
function
resumed
(
packet
:
ResumedPacket
)
{
return
async
(
{
dispatch
client
getState
}
:
ThunkArgs
)
=
>
{
const
why
=
getPauseReason
(
getState
(
)
)
;
const
wasPausedInEval
=
inDebuggerEval
(
why
)
;
const
wasStepping
=
isStepping
(
getState
(
)
)
;
dispatch
(
{
type
:
"
RESUME
"
thread
:
packet
.
from
wasStepping
}
)
;
if
(
!
wasStepping
&
&
!
wasPausedInEval
)
{
await
dispatch
(
evaluateExpressions
(
)
)
;
}
}
;
}
