"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
updateFrameLocation
=
updateFrameLocation
;
exports
.
mapDisplayNames
=
mapDisplayNames
;
exports
.
mapFrames
=
mapFrames
;
var
_selectors
=
require
(
"
.
.
/
.
.
/
selectors
/
index
"
)
;
var
_ast
=
require
(
"
.
.
/
.
.
/
utils
/
ast
"
)
;
function
updateFrameLocation
(
frame
sourceMaps
)
{
return
sourceMaps
.
getOriginalLocation
(
frame
.
location
)
.
then
(
loc
=
>
(
{
.
.
.
frame
location
:
loc
generatedLocation
:
frame
.
generatedLocation
|
|
frame
.
location
}
)
)
;
}
function
updateFrameLocations
(
frames
sourceMaps
)
{
if
(
!
frames
|
|
frames
.
length
=
=
0
)
{
return
Promise
.
resolve
(
frames
)
;
}
return
Promise
.
all
(
frames
.
map
(
frame
=
>
updateFrameLocation
(
frame
sourceMaps
)
)
)
;
}
function
mapDisplayNames
(
frames
getState
)
{
return
frames
.
map
(
frame
=
>
{
const
source
=
(
0
_selectors
.
getSourceFromId
)
(
getState
(
)
frame
.
location
.
sourceId
)
;
const
symbols
=
(
0
_selectors
.
getSymbols
)
(
getState
(
)
source
)
;
if
(
!
symbols
|
|
!
symbols
.
functions
)
{
return
frame
;
}
const
originalFunction
=
(
0
_ast
.
findClosestFunction
)
(
symbols
frame
.
location
)
;
if
(
!
originalFunction
)
{
return
frame
;
}
const
originalDisplayName
=
originalFunction
.
name
;
return
{
.
.
.
frame
originalDisplayName
}
;
}
)
;
}
function
mapFrames
(
)
{
return
async
function
(
{
dispatch
getState
sourceMaps
}
)
{
const
frames
=
(
0
_selectors
.
getFrames
)
(
getState
(
)
)
;
if
(
!
frames
)
{
return
;
}
let
mappedFrames
=
await
updateFrameLocations
(
frames
sourceMaps
)
;
mappedFrames
=
mapDisplayNames
(
mappedFrames
getState
)
;
dispatch
(
{
type
:
"
MAP_FRAMES
"
frames
:
mappedFrames
}
)
;
}
;
}
