import
{
generatedToOriginalId
}
from
"
devtools
-
source
-
map
"
;
import
{
flatten
}
from
"
lodash
"
;
import
{
toggleBlackBox
}
from
"
.
/
blackbox
"
;
import
{
syncBreakpoint
setBreakpointPositions
}
from
"
.
.
/
breakpoints
"
;
import
{
loadSourceText
}
from
"
.
/
loadSourceText
"
;
import
{
togglePrettyPrint
}
from
"
.
/
prettyPrint
"
;
import
{
selectLocation
}
from
"
.
.
/
sources
"
;
import
{
getRawSourceURL
isPrettyURL
isOriginal
isInlineScript
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
getBlackBoxList
getSource
getPendingSelectedLocation
getPendingBreakpointsForSource
hasBreakpointPositions
getContext
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
prefs
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
sourceQueue
from
"
.
.
/
.
.
/
utils
/
source
-
queue
"
;
import
type
{
Source
SourceId
Context
}
from
"
.
.
/
.
.
/
types
"
;
import
type
{
Action
ThunkArgs
}
from
"
.
.
/
types
"
;
function
createOriginalSource
(
originalUrl
generatedSource
sourceMaps
)
:
Source
{
return
{
url
:
originalUrl
relativeUrl
:
originalUrl
id
:
generatedToOriginalId
(
generatedSource
.
id
originalUrl
)
isPrettyPrinted
:
false
isWasm
:
false
isBlackBoxed
:
false
loadedState
:
"
unloaded
"
introductionUrl
:
null
introductionType
:
undefined
isExtension
:
false
actors
:
[
]
}
;
}
function
loadSourceMaps
(
cx
:
Context
sources
:
Source
[
]
)
{
return
async
function
(
{
dispatch
sourceMaps
}
:
ThunkArgs
)
:
Promise
<
Promise
<
Source
>
[
]
>
{
const
sourceList
=
await
Promise
.
all
(
sources
.
map
(
async
(
{
id
}
)
=
>
{
const
originalSources
=
await
dispatch
(
loadSourceMap
(
cx
id
)
)
;
sourceQueue
.
queueSources
(
originalSources
)
;
return
originalSources
;
}
)
)
;
await
sourceQueue
.
flush
(
)
;
for
(
const
source
of
sources
)
{
dispatch
(
checkPendingBreakpoints
(
cx
source
.
id
)
)
;
}
return
flatten
(
sourceList
)
;
}
;
}
function
loadSourceMap
(
cx
:
Context
sourceId
:
SourceId
)
{
return
async
function
(
{
dispatch
getState
sourceMaps
}
:
ThunkArgs
)
:
Promise
<
Source
[
]
>
{
const
source
=
getSource
(
getState
(
)
sourceId
)
;
if
(
!
prefs
.
clientSourceMapsEnabled
|
|
!
source
|
|
isOriginal
(
source
)
|
|
!
source
.
sourceMapURL
)
{
return
[
]
;
}
let
urls
=
null
;
try
{
const
urlInfo
=
{
.
.
.
source
}
;
if
(
!
urlInfo
.
url
)
{
urlInfo
.
url
=
urlInfo
.
introductionUrl
;
}
urls
=
await
sourceMaps
.
getOriginalURLs
(
urlInfo
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
if
(
!
urls
)
{
const
currentSource
=
getSource
(
getState
(
)
sourceId
)
;
dispatch
(
(
{
type
:
"
UPDATE_SOURCE
"
cx
source
:
(
(
{
.
.
.
currentSource
sourceMapURL
:
"
"
}
:
any
)
:
Source
)
}
:
Action
)
)
;
return
[
]
;
}
return
urls
.
map
(
url
=
>
createOriginalSource
(
url
source
sourceMaps
)
)
;
}
;
}
function
checkSelectedSource
(
cx
:
Context
sourceId
:
string
)
{
return
async
(
{
dispatch
getState
}
:
ThunkArgs
)
=
>
{
const
source
=
getSource
(
getState
(
)
sourceId
)
;
const
pendingLocation
=
getPendingSelectedLocation
(
getState
(
)
)
;
if
(
!
pendingLocation
|
|
!
pendingLocation
.
url
|
|
!
source
|
|
!
source
.
url
)
{
return
;
}
const
pendingUrl
=
pendingLocation
.
url
;
const
rawPendingUrl
=
getRawSourceURL
(
pendingUrl
)
;
if
(
rawPendingUrl
=
=
=
source
.
url
)
{
if
(
isPrettyURL
(
pendingUrl
)
)
{
const
prettySource
=
await
dispatch
(
togglePrettyPrint
(
cx
source
.
id
)
)
;
return
dispatch
(
checkPendingBreakpoints
(
cx
prettySource
.
id
)
)
;
}
await
dispatch
(
selectLocation
(
cx
{
sourceId
:
source
.
id
line
:
typeof
pendingLocation
.
line
=
=
=
"
number
"
?
pendingLocation
.
line
:
0
column
:
pendingLocation
.
column
}
)
)
;
}
}
;
}
function
checkPendingBreakpoints
(
cx
:
Context
sourceId
:
string
)
{
return
async
(
{
dispatch
getState
}
:
ThunkArgs
)
=
>
{
const
source
=
getSource
(
getState
(
)
sourceId
)
;
if
(
!
source
)
{
return
;
}
const
pendingBreakpoints
=
getPendingBreakpointsForSource
(
getState
(
)
source
)
;
if
(
pendingBreakpoints
.
length
=
=
=
0
)
{
return
;
}
await
dispatch
(
loadSourceText
(
cx
source
)
)
;
await
Promise
.
all
(
pendingBreakpoints
.
map
(
bp
=
>
{
return
dispatch
(
syncBreakpoint
(
cx
sourceId
bp
)
)
;
}
)
)
;
}
;
}
function
restoreBlackBoxedSources
(
cx
:
Context
sources
:
Source
[
]
)
{
return
async
(
{
dispatch
}
:
ThunkArgs
)
=
>
{
const
tabs
=
getBlackBoxList
(
)
;
if
(
tabs
.
length
=
=
0
)
{
return
;
}
for
(
const
source
of
sources
)
{
if
(
tabs
.
includes
(
source
.
url
)
&
&
!
source
.
isBlackBoxed
)
{
dispatch
(
toggleBlackBox
(
cx
source
)
)
;
}
}
}
;
}
export
function
newSource
(
source
:
Source
)
{
return
async
(
{
dispatch
}
:
ThunkArgs
)
=
>
{
await
dispatch
(
newSources
(
[
source
]
)
)
;
}
;
}
export
function
newSources
(
sources
:
Source
[
]
)
{
return
async
(
{
dispatch
getState
}
:
ThunkArgs
)
=
>
{
const
cx
=
getContext
(
getState
(
)
)
;
const
_newSources
=
sources
.
filter
(
source
=
>
!
getSource
(
getState
(
)
source
.
id
)
|
|
isInlineScript
(
source
)
)
;
const
sourcesNeedingPositions
=
_newSources
.
filter
(
source
=
>
hasBreakpointPositions
(
getState
(
)
source
.
id
)
)
;
dispatch
(
{
type
:
"
ADD_SOURCES
"
cx
sources
}
)
;
for
(
const
source
of
_newSources
)
{
dispatch
(
checkSelectedSource
(
cx
source
.
id
)
)
;
}
for
(
const
source
of
sourcesNeedingPositions
)
{
if
(
!
hasBreakpointPositions
(
getState
(
)
source
.
id
)
)
{
dispatch
(
setBreakpointPositions
(
cx
source
.
id
)
)
;
}
}
dispatch
(
restoreBlackBoxedSources
(
cx
_newSources
)
)
;
dispatch
(
loadSourceMaps
(
cx
_newSources
)
)
;
}
;
}
