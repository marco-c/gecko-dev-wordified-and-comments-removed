import
{
PROMISE
}
from
"
.
.
/
utils
/
middleware
/
promise
"
;
import
{
getSource
getGeneratedSource
getSourcesEpoch
}
from
"
.
.
/
.
.
/
selectors
"
;
import
{
setBreakpointPositions
}
from
"
.
.
/
breakpoints
"
;
import
{
prettyPrintSource
}
from
"
.
/
prettyPrint
"
;
import
*
as
parser
from
"
.
.
/
.
.
/
workers
/
parser
"
;
import
{
isLoaded
isOriginal
isPretty
}
from
"
.
.
/
.
.
/
utils
/
source
"
;
import
{
Telemetry
}
from
"
devtools
-
modules
"
;
import
type
{
ThunkArgs
}
from
"
.
.
/
types
"
;
import
type
{
Source
}
from
"
.
.
/
.
.
/
types
"
;
const
requests
=
new
Map
(
)
;
const
loadSourceHistogram
=
"
DEVTOOLS_DEBUGGER_LOAD_SOURCE_MS
"
;
const
telemetry
=
new
Telemetry
(
)
;
async
function
loadSource
(
state
source
:
Source
{
sourceMaps
client
}
)
:
Promise
<
?
{
text
:
string
contentType
:
string
}
>
{
if
(
isPretty
(
source
)
&
&
isOriginal
(
source
)
)
{
const
generatedSource
=
getGeneratedSource
(
state
source
)
;
return
prettyPrintSource
(
sourceMaps
source
generatedSource
)
;
}
if
(
isOriginal
(
source
)
)
{
const
result
=
await
sourceMaps
.
getOriginalSourceText
(
source
)
;
if
(
!
result
)
{
throw
new
Error
(
"
Original
source
text
unavailable
"
)
;
}
return
result
;
}
if
(
!
source
.
actors
.
length
)
{
throw
new
Error
(
"
No
source
actor
for
loadSource
"
)
;
}
telemetry
.
start
(
loadSourceHistogram
source
)
;
const
response
=
await
client
.
sourceContents
(
source
.
actors
[
0
]
)
;
telemetry
.
finish
(
loadSourceHistogram
source
)
;
return
{
text
:
response
.
source
contentType
:
response
.
contentType
|
|
"
text
/
javascript
"
}
;
}
async
function
loadSourceTextPromise
(
source
:
Source
epoch
:
number
{
dispatch
getState
client
sourceMaps
}
:
ThunkArgs
)
:
Promise
<
?
Source
>
{
if
(
isLoaded
(
source
)
)
{
return
source
;
}
await
dispatch
(
{
type
:
"
LOAD_SOURCE_TEXT
"
sourceId
:
source
.
id
epoch
[
PROMISE
]
:
loadSource
(
getState
(
)
source
{
sourceMaps
client
}
)
}
)
;
const
newSource
=
getSource
(
getState
(
)
source
.
id
)
;
if
(
!
newSource
)
{
return
;
}
if
(
!
newSource
.
isWasm
&
&
isLoaded
(
newSource
)
)
{
parser
.
setSource
(
newSource
)
;
dispatch
(
setBreakpointPositions
(
newSource
.
id
)
)
;
}
return
newSource
;
}
export
function
loadSourceText
(
inputSource
:
?
Source
)
{
return
async
(
thunkArgs
:
ThunkArgs
)
=
>
{
if
(
!
inputSource
)
{
return
;
}
const
source
=
inputSource
;
const
epoch
=
getSourcesEpoch
(
thunkArgs
.
getState
(
)
)
;
const
id
=
{
epoch
}
:
{
source
.
id
}
;
let
promise
=
requests
.
get
(
id
)
;
if
(
!
promise
)
{
promise
=
(
async
(
)
=
>
{
try
{
return
await
loadSourceTextPromise
(
source
epoch
thunkArgs
)
;
}
catch
(
e
)
{
}
finally
{
requests
.
delete
(
id
)
;
}
}
)
(
)
;
requests
.
set
(
id
promise
)
;
}
return
promise
;
}
;
}
