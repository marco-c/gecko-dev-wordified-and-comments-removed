declare
var
describe
:
(
name
:
string
func
:
(
)
=
>
void
)
=
>
void
;
declare
var
it
:
(
desc
:
string
func
:
(
)
=
>
void
)
=
>
void
;
declare
var
expect
:
(
value
:
any
)
=
>
any
;
import
update
{
initialSourcesState
getRelativeSources
}
from
"
.
.
/
sources
"
;
import
{
foobar
}
from
"
.
.
/
.
.
/
test
/
fixtures
"
;
import
type
{
Source
}
from
"
.
.
/
.
.
/
types
"
;
import
{
prefs
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
const
fakeSources
=
foobar
.
sources
.
sources
;
const
extenstionSource
=
{
id
:
"
extenstionId
"
url
:
"
http
:
/
/
example
.
com
/
script
.
js
"
}
;
const
firefoxExtensionSource
=
{
id
:
"
firefoxExtension
"
url
:
"
moz
-
extension
:
/
/
id
/
js
/
content
.
js
"
}
;
const
chromeExtensionSource
=
{
id
:
"
chromeExtension
"
url
:
"
chrome
-
extension
:
/
/
id
/
js
/
content
.
js
"
}
;
const
mockedSources
=
[
extenstionSource
firefoxExtensionSource
chromeExtensionSource
]
;
const
mockedSourceActors
=
[
{
actor
:
"
extensionId
-
actor
"
source
:
"
extenstionId
"
thread
:
"
foo
"
}
{
actor
:
"
firefoxExtension
-
actor
"
source
:
"
firefoxExtension
"
thread
:
"
foo
"
}
{
actor
:
"
chromeExtension
-
actor
"
source
:
"
chromeExtension
"
thread
:
"
foo
"
}
]
;
describe
(
"
sources
reducer
"
(
)
=
>
{
it
(
"
should
work
"
(
)
=
>
{
let
state
=
initialSourcesState
(
)
;
state
=
update
(
state
{
type
:
"
ADD_SOURCE
"
source
:
(
(
fakeSources
.
fooSourceActor
:
any
)
:
Source
)
}
)
;
expect
(
Object
.
keys
(
state
.
sources
)
)
.
toHaveLength
(
1
)
;
}
)
;
}
)
;
describe
(
"
sources
selectors
"
(
)
=
>
{
it
(
"
should
return
all
extensions
when
chrome
preference
enabled
"
(
)
=
>
{
prefs
.
chromeAndExtenstionsEnabled
=
true
;
let
state
=
initialSourcesState
(
)
;
state
=
{
sources
:
update
(
state
{
type
:
"
ADD_SOURCES
"
sources
:
(
(
mockedSources
:
any
)
:
Source
[
]
)
sourceActors
:
mockedSourceActors
}
)
}
;
const
selectedRelativeSources
=
getRelativeSources
(
state
)
;
const
threadSources
=
selectedRelativeSources
.
foo
;
expect
(
Object
.
values
(
threadSources
)
)
.
toHaveLength
(
3
)
;
}
)
;
it
(
"
should
omit
all
extensions
when
chrome
preference
enabled
"
(
)
=
>
{
prefs
.
chromeAndExtenstionsEnabled
=
false
;
let
state
=
initialSourcesState
(
)
;
state
=
{
sources
:
update
(
state
{
type
:
"
ADD_SOURCES
"
sources
:
(
(
mockedSources
:
any
)
:
Source
[
]
)
sourceActors
:
mockedSourceActors
}
)
}
;
const
selectedRelativeSources
=
getRelativeSources
(
state
)
;
const
threadSources
=
selectedRelativeSources
.
foo
;
expect
(
Object
.
values
(
threadSources
)
)
.
toHaveLength
(
1
)
;
}
)
;
}
)
;
