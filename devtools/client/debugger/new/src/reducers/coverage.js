import
makeRecord
from
"
.
.
/
utils
/
makeRecord
"
;
import
*
as
I
from
"
immutable
"
;
import
fromJS
from
"
.
.
/
utils
/
fromJS
"
;
import
type
{
Action
}
from
"
.
.
/
actions
/
types
"
;
import
type
{
Record
}
from
"
.
.
/
utils
/
makeRecord
"
;
export
type
CoverageState
=
{
coverageOn
:
boolean
hitCount
:
Object
}
;
export
const
createCoverageState
=
makeRecord
(
(
{
coverageOn
:
false
hitCount
:
I
.
Map
(
)
}
:
CoverageState
)
)
;
function
update
(
state
:
Record
<
CoverageState
>
=
createCoverageState
(
)
action
:
Action
)
:
Record
<
CoverageState
>
{
switch
(
action
.
type
)
{
case
"
RECORD_COVERAGE
"
:
return
state
.
mergeIn
(
[
"
hitCount
"
]
fromJS
(
action
.
value
.
coverage
)
)
.
setIn
(
[
"
coverageOn
"
]
true
)
;
default
:
{
return
state
;
}
}
}
type
OuterState
=
{
coverage
:
Record
<
CoverageState
>
}
;
export
function
getHitCountForSource
(
state
:
OuterState
sourceId
:
?
string
)
{
const
hitCount
=
state
.
coverage
.
get
(
"
hitCount
"
)
;
return
hitCount
.
get
(
sourceId
)
;
}
export
function
getCoverageEnabled
(
state
:
OuterState
)
{
return
state
.
coverage
.
get
(
"
coverageOn
"
)
;
}
export
default
update
;
