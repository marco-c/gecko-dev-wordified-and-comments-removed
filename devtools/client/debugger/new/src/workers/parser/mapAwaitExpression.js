import
generate
from
"
babel
/
generator
"
;
import
*
as
t
from
"
babel
/
types
"
;
import
{
hasNode
}
from
"
.
/
utils
/
ast
"
;
import
{
isTopLevel
}
from
"
.
/
utils
/
helpers
"
;
function
hasTopLevelAwait
(
ast
:
Object
)
:
boolean
{
const
hasAwait
=
hasNode
(
ast
(
node
ancestors
b
)
=
>
t
.
isAwaitExpression
(
node
)
&
&
isTopLevel
(
ancestors
)
)
;
return
hasAwait
;
}
function
wrapExpressionFromAst
(
ast
)
:
string
{
const
statements
=
ast
.
program
.
body
;
const
lastStatement
=
statements
[
statements
.
length
-
1
]
;
const
body
=
statements
.
slice
(
0
-
1
)
.
concat
(
t
.
returnStatement
(
lastStatement
.
expression
)
)
;
const
newAst
=
t
.
expressionStatement
(
t
.
callExpression
(
t
.
arrowFunctionExpression
(
[
]
t
.
blockStatement
(
body
)
true
)
[
]
)
)
;
return
generate
(
newAst
)
.
code
;
}
export
default
function
mapTopLevelAwait
(
expression
:
string
ast
?
:
Object
)
:
string
{
if
(
!
ast
)
{
if
(
expression
.
includes
(
"
await
"
)
)
{
return
(
async
(
)
=
>
{
{
expression
}
}
)
(
)
;
;
}
return
expression
;
}
if
(
!
hasTopLevelAwait
(
ast
)
)
{
return
expression
;
}
return
wrapExpressionFromAst
(
ast
)
;
}
