import
type
{
Position
}
from
"
.
.
/
.
.
/
types
"
;
import
{
parseScript
parseConsoleScript
}
from
"
.
/
utils
/
ast
"
;
import
{
buildScopeList
}
from
"
.
/
getScopes
"
;
import
generate
from
"
babel
/
generator
"
;
import
*
as
t
from
"
babel
/
types
"
;
function
replaceNode
(
ancestors
node
)
{
const
ancestor
=
ancestors
[
ancestors
.
length
-
1
]
;
if
(
typeof
ancestor
.
index
=
=
=
"
number
"
)
{
ancestor
.
node
[
ancestor
.
key
]
[
ancestor
.
index
]
=
node
;
}
else
{
ancestor
.
node
[
ancestor
.
key
]
=
node
;
}
}
function
getFirstExpression
(
ast
)
{
const
statements
=
ast
.
program
.
body
;
if
(
statements
.
length
=
=
0
)
{
return
null
;
}
return
statements
[
0
]
.
expression
;
}
function
locationKey
(
start
:
Position
)
:
string
{
return
{
start
.
line
}
:
{
start
.
column
}
;
}
export
default
function
mapOriginalExpression
(
expression
:
string
mappings
:
{
[
string
]
:
string
|
null
}
)
:
string
{
const
ast
=
parseConsoleScript
(
expression
)
;
const
scopes
=
buildScopeList
(
ast
"
"
)
;
let
shouldUpdate
=
false
;
const
nodes
=
new
Map
(
)
;
const
replacements
=
new
Map
(
)
;
for
(
const
name
of
Object
.
keys
(
scopes
[
0
]
.
bindings
)
)
{
const
{
refs
}
=
scopes
[
0
]
.
bindings
[
name
]
;
const
mapping
=
mappings
[
name
]
;
if
(
!
refs
.
every
(
ref
=
>
ref
.
type
=
=
=
"
ref
"
)
|
|
!
mapping
|
|
mapping
=
=
=
name
)
{
continue
;
}
let
node
=
nodes
.
get
(
name
)
;
if
(
!
node
)
{
node
=
getFirstExpression
(
parseScript
(
mapping
)
)
;
nodes
.
set
(
name
node
)
;
}
for
(
const
ref
of
refs
)
{
let
{
line
column
}
=
ref
.
start
;
if
(
typeof
column
!
=
=
"
number
"
)
{
column
=
0
;
}
replacements
.
set
(
locationKey
(
{
line
column
}
)
node
)
;
}
}
if
(
replacements
.
size
=
=
=
0
)
{
return
expression
;
}
t
.
traverse
(
ast
(
node
ancestors
)
=
>
{
if
(
!
t
.
isIdentifier
(
node
)
&
&
!
t
.
isThisExpression
(
node
)
)
{
return
;
}
const
ancestor
=
ancestors
[
ancestors
.
length
-
1
]
;
if
(
t
.
isObjectProperty
(
ancestor
.
node
)
&
&
ancestor
.
key
!
=
=
"
value
"
)
{
return
;
}
const
replacement
=
replacements
.
get
(
locationKey
(
node
.
loc
.
start
)
)
;
if
(
replacement
)
{
replaceNode
(
ancestors
t
.
cloneNode
(
replacement
)
)
;
shouldUpdate
=
true
;
}
}
)
;
if
(
shouldUpdate
)
{
return
generate
(
ast
)
.
code
;
}
return
expression
;
}
