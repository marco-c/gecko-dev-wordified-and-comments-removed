import
{
buildScopeList
parseSourceScopes
type
SourceScope
type
ParsedScope
type
BindingData
type
BindingDeclarationLocation
type
BindingLocation
type
BindingLocationType
type
BindingMetaValue
type
BindingType
}
from
"
.
/
visitor
"
;
export
type
{
SourceScope
BindingData
BindingDeclarationLocation
BindingLocation
BindingLocationType
BindingMetaValue
BindingType
}
;
import
type
{
Location
}
from
"
.
.
/
.
.
/
.
.
/
types
"
;
let
parsedScopesCache
=
new
Map
(
)
;
export
default
function
getScopes
(
location
:
Location
)
:
SourceScope
[
]
{
const
{
sourceId
}
=
location
;
let
parsedScopes
=
parsedScopesCache
.
get
(
sourceId
)
;
if
(
!
parsedScopes
)
{
parsedScopes
=
parseSourceScopes
(
sourceId
)
;
parsedScopesCache
.
set
(
sourceId
parsedScopes
)
;
}
return
parsedScopes
?
findScopes
(
parsedScopes
location
)
:
[
]
;
}
export
function
clearScopes
(
)
{
parsedScopesCache
=
new
Map
(
)
;
}
export
{
buildScopeList
}
;
function
findScopes
(
scopes
:
ParsedScope
[
]
location
:
Location
)
:
SourceScope
[
]
{
let
searchInScopes
:
?
(
ParsedScope
[
]
)
=
scopes
;
const
found
=
[
]
;
while
(
searchInScopes
)
{
const
foundOne
=
searchInScopes
.
some
(
s
=
>
{
if
(
compareLocations
(
s
.
start
location
)
<
=
0
&
&
compareLocations
(
location
s
.
end
)
<
0
)
{
found
.
unshift
(
s
)
;
searchInScopes
=
s
.
children
;
return
true
;
}
return
false
;
}
)
;
if
(
!
foundOne
)
{
break
;
}
}
return
found
.
map
(
i
=
>
{
return
{
type
:
i
.
type
displayName
:
i
.
displayName
start
:
i
.
start
end
:
i
.
end
bindings
:
i
.
bindings
}
;
}
)
;
}
function
compareLocations
(
a
:
Location
b
:
Location
)
:
number
{
return
a
.
line
=
=
b
.
line
?
a
.
column
-
b
.
column
:
a
.
line
-
b
.
line
;
}
