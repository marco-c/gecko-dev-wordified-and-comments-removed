import
type
{
Frame
Source
SourceLocation
}
from
"
.
.
/
.
.
/
types
"
;
import
type
{
PausedPacket
FramesResponse
FramePacket
SourcePayload
}
from
"
.
/
types
"
;
import
{
clientCommands
}
from
"
.
/
commands
"
;
export
function
createFrame
(
frame
:
FramePacket
)
:
?
Frame
{
if
(
!
frame
)
{
return
null
;
}
let
title
;
if
(
frame
.
type
=
=
"
call
"
)
{
const
c
=
frame
.
callee
;
title
=
c
.
name
|
|
c
.
userDisplayName
|
|
c
.
displayName
;
}
else
{
title
=
(
{
frame
.
type
}
)
;
}
const
location
=
{
sourceId
:
frame
.
where
.
source
.
actor
line
:
frame
.
where
.
line
column
:
frame
.
where
.
column
}
;
return
{
id
:
frame
.
actor
displayName
:
title
location
generatedLocation
:
location
this
:
frame
.
this
scope
:
frame
.
environment
}
;
}
export
function
createSource
(
thread
:
string
source
:
SourcePayload
{
supportsWasm
}
:
{
supportsWasm
:
boolean
}
)
:
Source
{
const
createdSource
=
{
id
:
source
.
actor
thread
url
:
source
.
url
relativeUrl
:
source
.
url
isPrettyPrinted
:
false
isWasm
:
false
sourceMapURL
:
source
.
sourceMapURL
introductionUrl
:
source
.
introductionUrl
isBlackBoxed
:
false
loadedState
:
"
unloaded
"
}
;
clientCommands
.
registerSource
(
createdSource
)
;
return
Object
.
assign
(
createdSource
{
isWasm
:
supportsWasm
&
&
source
.
introductionType
=
=
=
"
wasm
"
}
)
;
}
export
function
createPause
(
thread
:
string
packet
:
PausedPacket
response
:
FramesResponse
)
:
any
{
const
frame
=
packet
.
frame
|
|
response
.
frames
[
0
]
;
return
{
.
.
.
packet
thread
frame
:
createFrame
(
frame
)
frames
:
response
.
frames
.
map
(
createFrame
)
}
;
}
export
function
createBreakpointLocation
(
location
:
SourceLocation
actualLocation
?
:
Object
)
:
SourceLocation
{
if
(
!
actualLocation
)
{
return
location
;
}
return
{
sourceId
:
actualLocation
.
source
.
actor
sourceUrl
:
actualLocation
.
source
.
url
line
:
actualLocation
.
line
column
:
actualLocation
.
column
}
;
}
export
function
createWorker
(
actor
:
string
url
:
string
)
{
return
{
actor
url
type
:
0
}
;
}
