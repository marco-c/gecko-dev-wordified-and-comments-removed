import
type
{
BreakpointLocation
BreakpointOptions
FrameId
ActorId
Script
Source
Pause
PendingLocation
Frame
SourceId
Worker
Range
}
from
"
.
.
/
.
.
/
types
"
;
type
URL
=
string
;
export
type
FramePacket
=
{
actor
:
ActorId
arguments
:
any
[
]
displayName
:
string
environment
:
any
this
:
any
depth
?
:
number
oldest
?
:
boolean
type
:
"
pause
"
|
"
call
"
where
:
{
|
actor
:
string
line
:
number
column
:
number
|
}
}
;
export
type
SourcePayload
=
{
actor
:
ActorId
generatedUrl
?
:
URL
introductionType
:
string
introductionUrl
?
:
URL
isBlackBoxed
:
boolean
isPrettyPrinted
:
boolean
isSourceMapped
:
boolean
sourceMapURL
?
:
URL
url
:
URL
}
;
export
type
SourcePacket
=
{
from
:
ActorId
source
:
SourcePayload
type
:
string
}
;
export
type
SourcesPacket
=
{
from
:
ActorId
sources
:
SourcePayload
[
]
}
;
export
type
PausedPacket
=
{
actor
:
ActorId
from
:
ActorId
type
:
string
frame
:
FramePacket
why
:
{
actors
:
ActorId
[
]
type
:
string
onNext
?
:
Function
}
}
;
export
type
ResumedPacket
=
{
from
:
ActorId
type
:
string
}
;
export
type
FramesResponse
=
{
frames
:
FramePacket
[
]
from
:
ActorId
}
;
export
type
TabPayload
=
{
actor
:
ActorId
animationsActor
:
ActorId
consoleActor
:
ActorId
cssPropertiesActor
:
ActorId
directorManagerActor
:
ActorId
emulationActor
:
ActorId
eventLoopLagActor
:
ActorId
framerateActor
:
ActorId
inspectorActor
:
ActorId
memoryActor
:
ActorId
monitorActor
:
ActorId
outerWindowID
:
number
performanceActor
:
ActorId
performanceEntriesActor
:
ActorId
profilerActor
:
ActorId
promisesActor
:
ActorId
reflowActor
:
ActorId
storageActor
:
ActorId
styleEditorActor
:
ActorId
styleSheetsActor
:
ActorId
timelineActor
:
ActorId
title
:
string
url
:
URL
webExtensionInspectedWindowActor
:
ActorId
}
;
export
type
Actions
=
{
paused
:
Pause
=
>
void
resumed
:
ResumedPacket
=
>
void
newSources
:
(
Source
[
]
)
=
>
void
fetchEventListeners
:
(
)
=
>
void
updateWorkers
:
(
)
=
>
void
}
;
export
type
TabTarget
=
{
on
:
(
string
Function
)
=
>
void
activeConsole
:
{
evaluateJS
:
(
script
:
Script
func
:
Function
params
?
:
{
frameActor
:
?
FrameId
}
)
=
>
void
evaluateJSAsync
:
(
script
:
Script
func
:
Function
params
?
:
{
frameActor
:
?
FrameId
}
)
=
>
Promise
<
{
result
:
?
Object
}
>
autocomplete
:
(
input
:
string
cursor
:
number
func
:
Function
frameId
:
?
string
)
=
>
void
emit
:
(
string
any
)
=
>
void
}
form
:
{
consoleActor
:
any
}
root
:
any
navigateTo
:
(
{
url
:
string
}
)
=
>
Promise
<
*
>
listWorkers
:
(
)
=
>
Promise
<
*
>
reload
:
(
)
=
>
Promise
<
*
>
destroy
:
(
)
=
>
void
isBrowsingContext
:
boolean
isContentProcess
:
boolean
traits
:
Object
}
;
export
type
DebuggerClient
=
{
_activeRequests
:
{
get
:
any
=
>
any
delete
:
any
=
>
void
}
mainRoot
:
{
traits
:
any
getFront
:
string
=
>
Promise
<
*
>
}
connect
:
(
)
=
>
Promise
<
*
>
request
:
(
packet
:
Object
)
=
>
Promise
<
*
>
attachConsole
:
(
actor
:
String
listeners
:
Array
<
*
>
)
=
>
Promise
<
*
>
createObjectClient
:
(
grip
:
Grip
)
=
>
{
}
release
:
(
actor
:
String
)
=
>
{
}
}
;
export
type
TabClient
=
{
listWorkers
:
(
)
=
>
Promise
<
*
>
addListener
:
(
string
Function
)
=
>
void
on
:
(
string
Function
)
=
>
void
}
;
export
type
Grip
=
{
actor
:
string
}
;
export
type
FunctionGrip
=
{
|
class
:
"
Function
"
name
:
string
parameterNames
:
string
[
]
displayName
:
string
userDisplayName
:
string
url
:
string
line
:
number
column
:
number
|
}
;
export
type
SourceClient
=
{
source
:
(
)
=
>
{
source
:
any
contentType
?
:
string
}
_activeThread
:
ThreadClient
actor
:
string
getBreakpointPositionsCompressed
:
(
range
:
?
Range
)
=
>
Promise
<
any
>
prettyPrint
:
number
=
>
Promise
<
*
>
disablePrettyPrint
:
(
)
=
>
Promise
<
*
>
blackBox
:
(
range
?
:
Range
)
=
>
Promise
<
*
>
unblackBox
:
(
range
?
:
Range
)
=
>
Promise
<
*
>
}
;
export
type
ObjectClient
=
{
getPrototypeAndProperties
:
(
)
=
>
any
}
;
export
type
ThreadClient
=
{
resume
:
Function
=
>
Promise
<
*
>
stepIn
:
Function
=
>
Promise
<
*
>
stepOver
:
Function
=
>
Promise
<
*
>
stepOut
:
Function
=
>
Promise
<
*
>
rewind
:
Function
=
>
Promise
<
*
>
reverseStepIn
:
Function
=
>
Promise
<
*
>
reverseStepOver
:
Function
=
>
Promise
<
*
>
reverseStepOut
:
Function
=
>
Promise
<
*
>
breakOnNext
:
(
)
=
>
Promise
<
*
>
source
:
(
{
actor
:
SourceId
}
)
=
>
SourceClient
pauseGrip
:
(
Grip
|
Function
)
=
>
ObjectClient
pauseOnExceptions
:
(
boolean
boolean
)
=
>
Promise
<
*
>
setBreakpoint
:
(
BreakpointLocation
BreakpointOptions
)
=
>
Promise
<
*
>
removeBreakpoint
:
PendingLocation
=
>
Promise
<
*
>
setXHRBreakpoint
:
(
path
:
string
method
:
string
)
=
>
Promise
<
boolean
>
removeXHRBreakpoint
:
(
path
:
string
method
:
string
)
=
>
Promise
<
boolean
>
interrupt
:
(
)
=
>
Promise
<
*
>
eventListeners
:
(
)
=
>
Promise
<
*
>
getFrames
:
(
number
number
)
=
>
FramesResponse
getEnvironment
:
(
frame
:
Frame
)
=
>
Promise
<
*
>
addListener
:
(
string
Function
)
=
>
void
getSources
:
(
)
=
>
Promise
<
SourcesPacket
>
reconfigure
:
(
{
observeAsmJS
:
boolean
}
)
=
>
Promise
<
*
>
getLastPausePacket
:
(
)
=
>
?
PausedPacket
_parent
:
TabClient
actor
:
ActorId
request
:
(
payload
:
Object
)
=
>
Promise
<
*
>
url
:
string
setEventListenerBreakpoints
:
(
string
[
]
)
=
>
void
skipBreakpoints
:
boolean
=
>
Promise
<
{
|
skip
:
boolean
|
}
>
}
;
export
type
Panel
=
{
|
emit
:
(
eventName
:
string
)
=
>
void
openLink
:
(
url
:
string
)
=
>
void
openWorkerToolbox
:
(
worker
:
Worker
)
=
>
void
openElementInInspector
:
(
grip
:
Object
)
=
>
void
openConsoleAndEvaluate
:
(
input
:
string
)
=
>
void
|
}
;
