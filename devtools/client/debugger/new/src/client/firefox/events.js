"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
clientEvents
=
exports
.
setupEvents
=
undefined
;
var
_create
=
require
(
"
.
/
create
"
)
;
var
_sourceQueue
=
require
(
"
.
.
/
.
.
/
utils
/
source
-
queue
"
)
;
var
_sourceQueue2
=
_interopRequireDefault
(
_sourceQueue
)
;
var
_prefs
=
require
(
"
.
.
/
.
.
/
utils
/
prefs
"
)
;
function
_interopRequireDefault
(
obj
)
{
return
obj
&
&
obj
.
__esModule
?
obj
:
{
default
:
obj
}
;
}
const
CALL_STACK_PAGE_SIZE
=
1000
;
let
threadClient
;
let
actions
;
let
supportsWasm
;
let
isInterrupted
;
function
setupEvents
(
dependencies
)
{
threadClient
=
dependencies
.
threadClient
;
actions
=
dependencies
.
actions
;
supportsWasm
=
dependencies
.
supportsWasm
;
_sourceQueue2
.
default
.
initialize
(
{
actions
supportsWasm
createSource
:
_create
.
createSource
}
)
;
if
(
threadClient
)
{
Object
.
keys
(
clientEvents
)
.
forEach
(
eventName
=
>
{
threadClient
.
addListener
(
eventName
clientEvents
[
eventName
]
)
;
}
)
;
if
(
threadClient
.
_parent
)
{
threadClient
.
_parent
.
addListener
(
"
workerListChanged
"
workerListChanged
)
;
}
}
}
async
function
paused
(
_
packet
)
{
const
{
why
}
=
packet
;
if
(
why
.
type
=
=
=
"
interrupted
"
&
&
!
packet
.
why
.
onNext
)
{
isInterrupted
=
true
;
return
;
}
const
response
=
await
threadClient
.
getFrames
(
0
CALL_STACK_PAGE_SIZE
)
;
if
(
why
.
type
!
=
"
alreadyPaused
"
)
{
const
pause
=
(
0
_create
.
createPause
)
(
packet
response
)
;
await
_sourceQueue2
.
default
.
flush
(
)
;
actions
.
paused
(
pause
)
;
}
}
function
resumed
(
_
packet
)
{
if
(
isInterrupted
)
{
isInterrupted
=
false
;
return
;
}
actions
.
resumed
(
packet
)
;
}
function
newSource
(
_
{
source
}
)
{
_sourceQueue2
.
default
.
queue
(
source
)
;
if
(
_prefs
.
features
.
eventListeners
)
{
actions
.
fetchEventListeners
(
)
;
}
}
function
workerListChanged
(
)
{
actions
.
updateWorkers
(
)
;
}
const
clientEvents
=
{
paused
resumed
newSource
}
;
exports
.
setupEvents
=
setupEvents
;
exports
.
clientEvents
=
clientEvents
;
