import
Services
from
"
devtools
-
services
"
;
import
{
addThreadEventListeners
}
from
"
.
/
events
"
;
export
async
function
checkServerSupportsListWorkers
(
{
tabTarget
debuggerClient
}
:
Object
)
{
const
root
=
await
tabTarget
.
root
;
if
(
!
root
)
{
return
false
;
}
const
deviceFront
=
await
debuggerClient
.
mainRoot
.
getFront
(
"
device
"
)
;
const
description
=
await
deviceFront
.
getDescription
(
)
;
const
isFennec
=
description
.
apptype
=
=
=
"
mobile
/
android
"
;
if
(
!
isFennec
)
{
return
true
;
}
const
version
=
description
.
platformversion
;
return
Services
.
vc
.
compare
(
version
"
61
.
0
"
)
>
=
0
;
}
export
async
function
updateWorkerClients
(
{
tabTarget
debuggerClient
threadClient
workerClients
}
:
Object
)
{
const
newWorkerClients
=
{
}
;
const
supportsListWorkers
=
await
checkServerSupportsListWorkers
(
{
tabTarget
debuggerClient
}
)
;
if
(
!
threadClient
.
_parent
|
|
typeof
threadClient
.
_parent
.
listWorkers
!
=
"
function
"
|
|
!
supportsListWorkers
)
{
return
newWorkerClients
;
}
const
{
workers
}
=
await
threadClient
.
_parent
.
listWorkers
(
)
;
for
(
const
workerTargetFront
of
workers
)
{
await
workerTargetFront
.
attach
(
)
;
const
[
workerThread
]
=
await
workerTargetFront
.
attachThread
(
)
;
if
(
workerClients
[
workerThread
.
actor
]
)
{
if
(
workerClients
[
workerThread
.
actor
]
.
thread
!
=
workerThread
)
{
throw
new
Error
(
Multiple
clients
for
actor
ID
:
{
workerThread
.
actor
}
)
;
}
newWorkerClients
[
workerThread
.
actor
]
=
workerClients
[
workerThread
.
actor
]
;
}
else
{
addThreadEventListeners
(
workerThread
)
;
workerThread
.
url
=
workerTargetFront
.
url
;
workerThread
.
resume
(
)
;
const
[
consoleClient
]
=
await
debuggerClient
.
attachConsole
(
workerTargetFront
.
targetForm
.
consoleActor
[
]
)
;
newWorkerClients
[
workerThread
.
actor
]
=
{
url
:
workerTargetFront
.
url
thread
:
workerThread
console
:
consoleClient
}
;
}
}
return
newWorkerClients
;
}
