import
{
groupBy
get
sortedUniqBy
}
from
"
lodash
"
;
import
{
createSelector
}
from
"
reselect
"
;
import
{
getViewport
}
from
"
.
.
/
selectors
"
;
import
{
getVisibleBreakpoints
}
from
"
.
/
visibleBreakpoints
"
;
import
{
getVisiblePausePoints
}
from
"
.
/
visiblePausePoints
"
;
import
{
makeLocationId
}
from
"
.
.
/
utils
/
breakpoint
"
;
import
type
{
SourceLocation
}
from
"
.
.
/
types
"
;
export
type
ColumnBreakpoint
=
{
|
+
location
:
SourceLocation
+
enabled
:
boolean
+
condition
:
?
string
|
}
;
function
contains
(
location
range
)
{
return
(
location
.
line
>
=
range
.
start
.
line
&
&
location
.
line
<
=
range
.
end
.
line
&
&
location
.
column
>
=
range
.
start
.
column
&
&
location
.
column
<
=
range
.
end
.
column
)
;
}
function
groupBreakpoints
(
breakpoints
)
{
const
map
=
groupBy
(
breakpoints
(
{
location
}
)
=
>
location
.
line
)
;
for
(
const
line
in
map
)
{
map
[
line
]
=
groupBy
(
map
[
line
]
(
{
location
}
)
=
>
location
.
column
)
;
}
return
map
;
}
function
findBreakpoint
(
location
breakpointMap
)
{
const
{
line
column
}
=
location
;
const
breakpoints
=
get
(
breakpointMap
[
line
column
]
)
;
if
(
breakpoints
)
{
return
breakpoints
[
0
]
;
}
}
function
getLineCount
(
columnBreakpoints
)
{
const
lineCount
=
{
}
;
columnBreakpoints
.
forEach
(
(
{
location
:
{
line
}
}
)
=
>
{
if
(
!
lineCount
[
line
]
)
{
lineCount
[
line
]
=
0
;
}
lineCount
[
line
]
=
lineCount
[
line
]
+
1
;
}
)
;
return
lineCount
;
}
export
function
formatColumnBreakpoints
(
columnBreakpoints
)
{
console
.
log
(
"
Column
Breakpoints
\
n
\
n
"
columnBreakpoints
.
map
(
(
{
location
enabled
}
)
=
>
(
{
location
.
line
}
{
location
.
column
}
)
{
enabled
}
)
.
join
(
"
\
n
"
)
)
;
}
export
function
getColumnBreakpoints
(
pausePoints
breakpoints
viewport
)
{
if
(
!
pausePoints
)
{
return
[
]
;
}
const
breakpointMap
=
groupBreakpoints
(
breakpoints
)
;
let
columnBreakpoints
=
pausePoints
.
filter
(
(
{
types
location
}
)
=
>
types
.
break
&
&
breakpointMap
[
location
.
line
]
&
&
viewport
&
&
contains
(
location
viewport
)
)
;
columnBreakpoints
=
sortedUniqBy
(
columnBreakpoints
(
{
generatedLocation
}
)
=
>
makeLocationId
(
generatedLocation
)
)
;
const
lineCount
=
getLineCount
(
columnBreakpoints
)
;
columnBreakpoints
=
columnBreakpoints
.
filter
(
(
{
location
:
{
line
}
}
)
=
>
lineCount
[
line
]
>
1
)
;
return
columnBreakpoints
.
map
(
(
{
location
}
)
=
>
{
const
foundBreakpoint
=
findBreakpoint
(
location
breakpointMap
)
;
return
{
location
enabled
:
!
!
foundBreakpoint
condition
:
foundBreakpoint
?
foundBreakpoint
.
condition
:
null
}
;
}
)
;
}
export
const
visibleColumnBreakpoints
=
createSelector
(
getVisiblePausePoints
getVisibleBreakpoints
getViewport
getColumnBreakpoints
)
;
