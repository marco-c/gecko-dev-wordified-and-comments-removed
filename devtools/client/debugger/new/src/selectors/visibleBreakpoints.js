import
{
createSelector
}
from
"
reselect
"
;
import
{
uniqBy
}
from
"
lodash
"
;
import
{
getBreakpointsList
getBreakpointPositionsForLine
}
from
"
.
.
/
reducers
/
breakpoints
"
;
import
{
getSelectedSource
}
from
"
.
.
/
reducers
/
sources
"
;
import
{
sortBreakpoints
}
from
"
.
.
/
utils
/
breakpoint
"
;
import
{
getSelectedLocation
}
from
"
.
.
/
utils
/
source
-
maps
"
;
import
type
{
Breakpoint
Source
SourceLocation
}
from
"
.
.
/
types
"
;
import
type
{
Selector
State
}
from
"
.
.
/
reducers
/
types
"
;
function
isVisible
(
breakpoint
:
Breakpoint
selectedSource
:
Source
)
{
const
location
=
getSelectedLocation
(
breakpoint
selectedSource
)
;
return
location
.
sourceId
=
=
=
selectedSource
.
id
;
}
export
const
getVisibleBreakpoints
:
Selector
<
?
(
Breakpoint
[
]
)
>
=
createSelector
(
getSelectedSource
getBreakpointsList
(
selectedSource
:
?
Source
breakpoints
:
Breakpoint
[
]
)
=
>
{
if
(
selectedSource
=
=
null
)
{
return
null
;
}
const
source
:
Source
=
selectedSource
;
return
breakpoints
.
filter
(
bp
=
>
isVisible
(
bp
source
)
)
;
}
)
;
export
function
getFirstVisibleBreakpointPosition
(
state
:
State
location
:
SourceLocation
)
:
?
SourceLocation
{
const
{
sourceId
line
}
=
location
;
const
positions
=
getBreakpointPositionsForLine
(
state
sourceId
line
)
;
return
positions
&
&
positions
[
0
]
.
location
;
}
export
const
getFirstVisibleBreakpoints
:
Selector
<
Breakpoint
[
]
>
=
createSelector
(
getVisibleBreakpoints
breakpoints
=
>
{
if
(
!
breakpoints
)
{
return
[
]
;
}
return
(
uniqBy
(
sortBreakpoints
(
breakpoints
)
bp
=
>
bp
.
location
.
line
)
:
any
)
;
}
)
;
