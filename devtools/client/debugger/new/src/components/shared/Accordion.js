import
React
{
cloneElement
Component
}
from
"
react
"
;
import
Svg
from
"
.
/
Svg
"
;
import
"
.
/
Accordion
.
css
"
;
type
AccordionItem
=
{
buttons
?
:
Array
<
Object
>
component
:
React
Element
<
any
>
componentProps
:
Object
header
:
string
className
:
string
opened
:
boolean
onToggle
?
:
(
)
=
>
void
shouldOpen
?
:
(
)
=
>
void
}
;
type
Props
=
{
items
:
Array
<
Object
>
}
;
type
State
=
{
opened
:
boolean
[
]
created
:
boolean
[
]
}
;
class
Accordion
extends
Component
<
Props
State
>
{
constructor
(
props
:
Props
)
{
super
(
props
)
;
this
.
state
=
{
opened
:
props
.
items
.
map
(
item
=
>
item
.
opened
)
created
:
[
]
}
;
}
handleHeaderClick
(
i
:
number
)
{
const
item
=
this
.
props
.
items
[
i
]
;
const
opened
=
!
item
.
opened
;
item
.
opened
=
opened
;
if
(
item
.
onToggle
)
{
item
.
onToggle
(
opened
)
;
}
this
.
forceUpdate
(
)
;
}
onHandleHeaderKeyDown
(
e
:
SyntheticKeyboardEvent
<
HTMLHeadingElement
>
i
:
number
)
{
if
(
e
&
&
(
e
.
key
=
=
=
"
"
|
|
e
.
key
=
=
=
"
Enter
"
)
)
{
this
.
handleHeaderClick
(
i
)
;
}
}
renderContainer
=
(
item
:
AccordionItem
i
:
number
)
=
>
{
const
{
opened
}
=
item
;
return
(
<
li
role
=
"
listitem
"
className
=
{
item
.
className
}
key
=
{
i
}
>
<
h2
className
=
"
_header
"
tabIndex
=
"
0
"
onKeyDown
=
{
e
=
>
this
.
onHandleHeaderKeyDown
(
e
i
)
}
onClick
=
{
(
)
=
>
this
.
handleHeaderClick
(
i
)
}
>
<
Svg
name
=
"
arrow
"
className
=
{
opened
?
"
expanded
"
:
"
"
}
/
>
{
item
.
header
}
{
item
.
buttons
?
(
<
div
className
=
"
header
-
buttons
"
tabIndex
=
"
-
1
"
>
{
item
.
buttons
}
<
/
div
>
)
:
null
}
<
/
h2
>
{
opened
&
&
(
<
div
className
=
"
_content
"
>
{
cloneElement
(
item
.
component
item
.
componentProps
|
|
{
}
)
}
<
/
div
>
)
}
<
/
li
>
)
;
}
;
render
(
)
{
return
(
<
ul
role
=
"
list
"
className
=
"
accordion
"
>
{
this
.
props
.
items
.
map
(
this
.
renderContainer
)
}
<
/
ul
>
)
;
}
}
export
default
Accordion
;
