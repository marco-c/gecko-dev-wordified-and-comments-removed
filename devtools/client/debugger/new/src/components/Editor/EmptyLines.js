"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
var
_reactRedux
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
var
_react
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
var
_selectors
=
require
(
"
.
.
/
.
.
/
selectors
/
index
"
)
;
var
_editor
=
require
(
"
.
.
/
.
.
/
utils
/
editor
/
index
"
)
;
class
EmptyLines
extends
_react
.
Component
{
componentDidMount
(
)
{
this
.
disableEmptyLines
(
)
;
}
componentDidUpdate
(
)
{
this
.
disableEmptyLines
(
)
;
}
componentWillUnmount
(
)
{
const
{
emptyLines
selectedSource
editor
}
=
this
.
props
;
if
(
!
emptyLines
)
{
return
;
}
editor
.
codeMirror
.
operation
(
(
)
=
>
{
emptyLines
.
forEach
(
emptyLine
=
>
{
const
line
=
(
0
_editor
.
toEditorLine
)
(
selectedSource
.
get
(
"
id
"
)
emptyLine
)
;
editor
.
codeMirror
.
removeLineClass
(
line
"
line
"
"
empty
-
line
"
)
;
}
)
;
}
)
;
}
disableEmptyLines
(
)
{
const
{
emptyLines
selectedSource
editor
}
=
this
.
props
;
if
(
!
emptyLines
)
{
return
;
}
editor
.
codeMirror
.
operation
(
(
)
=
>
{
emptyLines
.
forEach
(
emptyLine
=
>
{
const
line
=
(
0
_editor
.
toEditorLine
)
(
selectedSource
.
get
(
"
id
"
)
emptyLine
)
;
editor
.
codeMirror
.
addLineClass
(
line
"
line
"
"
empty
-
line
"
)
;
}
)
;
}
)
;
}
render
(
)
{
return
null
;
}
}
const
mapStateToProps
=
state
=
>
{
const
selectedSource
=
(
0
_selectors
.
getSelectedSource
)
(
state
)
;
const
foundEmptyLines
=
(
0
_selectors
.
getEmptyLines
)
(
state
selectedSource
.
toJS
(
)
)
;
return
{
selectedSource
emptyLines
:
selectedSource
?
foundEmptyLines
:
[
]
}
;
}
;
exports
.
default
=
(
0
_reactRedux
.
connect
)
(
mapStateToProps
)
(
EmptyLines
)
;
