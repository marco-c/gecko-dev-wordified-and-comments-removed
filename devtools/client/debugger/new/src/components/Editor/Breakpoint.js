import
React
{
PureComponent
}
from
"
react
"
;
import
ReactDOM
from
"
react
-
dom
"
;
import
classnames
from
"
classnames
"
;
import
Svg
from
"
.
.
/
shared
/
Svg
"
;
import
{
getDocument
toEditorLine
}
from
"
.
.
/
.
.
/
utils
/
editor
"
;
import
{
features
}
from
"
.
.
/
.
.
/
utils
/
prefs
"
;
import
type
{
Source
Breakpoint
as
BreakpointType
}
from
"
.
.
/
.
.
/
types
"
;
const
breakpointSvg
=
document
.
createElement
(
"
div
"
)
;
ReactDOM
.
render
(
<
Svg
name
=
"
breakpoint
"
/
>
breakpointSvg
)
;
function
makeMarker
(
isDisabled
:
boolean
)
{
const
bp
=
breakpointSvg
.
cloneNode
(
true
)
;
bp
.
className
=
classnames
(
"
editor
new
-
breakpoint
"
{
"
breakpoint
-
disabled
"
:
isDisabled
"
folding
-
enabled
"
:
features
.
codeFolding
}
)
;
return
bp
;
}
type
Props
=
{
breakpoint
:
BreakpointType
selectedSource
:
Source
editor
:
Object
}
;
class
Breakpoint
extends
PureComponent
<
Props
>
{
addBreakpoint
:
Function
;
addBreakpoint
=
(
)
=
>
{
const
{
breakpoint
editor
selectedSource
}
=
this
.
props
;
if
(
breakpoint
.
hidden
)
{
return
;
}
if
(
!
selectedSource
|
|
breakpoint
.
loading
)
{
return
;
}
const
sourceId
=
selectedSource
.
id
;
const
line
=
toEditorLine
(
sourceId
breakpoint
.
location
.
line
)
;
editor
.
codeMirror
.
setGutterMarker
(
line
"
breakpoints
"
makeMarker
(
breakpoint
.
disabled
)
)
;
editor
.
codeMirror
.
addLineClass
(
line
"
line
"
"
new
-
breakpoint
"
)
;
if
(
breakpoint
.
condition
)
{
editor
.
codeMirror
.
addLineClass
(
line
"
line
"
"
has
-
condition
"
)
;
}
else
{
editor
.
codeMirror
.
removeLineClass
(
line
"
line
"
"
has
-
condition
"
)
;
}
}
;
componentDidMount
(
)
{
this
.
addBreakpoint
(
)
;
}
componentDidUpdate
(
)
{
this
.
addBreakpoint
(
)
;
}
componentWillUnmount
(
)
{
const
{
editor
breakpoint
selectedSource
}
=
this
.
props
;
if
(
!
selectedSource
)
{
return
;
}
if
(
breakpoint
.
loading
)
{
return
;
}
const
sourceId
=
selectedSource
.
id
;
const
doc
=
getDocument
(
sourceId
)
;
if
(
!
doc
)
{
return
;
}
const
line
=
toEditorLine
(
sourceId
breakpoint
.
location
.
line
)
;
if
(
doc
.
setGutterMarker
)
{
doc
.
setGutterMarker
(
line
"
breakpoints
"
null
)
;
}
else
{
editor
.
codeMirror
.
setGutterMarker
(
line
"
breakpoints
"
null
)
;
}
doc
.
removeLineClass
(
line
"
line
"
"
new
-
breakpoint
"
)
;
doc
.
removeLineClass
(
line
"
line
"
"
has
-
condition
"
)
;
}
render
(
)
{
return
null
;
}
}
export
default
Breakpoint
;
