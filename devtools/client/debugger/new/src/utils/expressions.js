import
{
correctIndentation
}
from
"
.
/
indentation
"
;
import
type
{
Expression
}
from
"
.
.
/
types
"
;
export
function
sanitizeInput
(
input
:
string
)
{
return
input
.
replace
(
/
"
/
g
'
"
'
)
;
}
export
function
wrapExpression
(
input
:
string
)
{
return
correctIndentation
(
try
{
{
sanitizeInput
(
input
)
}
}
catch
(
e
)
{
e
}
)
;
}
function
isUnavailable
(
value
)
{
if
(
!
value
.
preview
|
|
!
value
.
preview
.
name
)
{
return
false
;
}
return
[
"
ReferenceError
"
"
TypeError
"
]
.
includes
(
value
.
preview
.
name
)
;
}
export
function
getValue
(
expression
:
Expression
)
{
const
value
=
expression
.
value
;
if
(
!
value
)
{
return
{
path
:
expression
.
from
value
:
{
unavailable
:
true
}
}
;
}
if
(
value
.
exception
)
{
if
(
isUnavailable
(
value
.
exception
)
)
{
return
{
value
:
{
unavailable
:
true
}
}
;
}
return
{
path
:
value
.
from
value
:
value
.
exception
}
;
}
if
(
value
.
error
)
{
return
{
path
:
value
.
from
value
:
value
.
error
}
;
}
if
(
value
.
result
&
&
value
.
result
.
class
=
=
"
Error
"
)
{
const
{
name
message
}
=
value
.
result
.
preview
;
if
(
isUnavailable
(
value
.
result
)
)
{
return
{
value
:
{
unavailable
:
true
}
}
;
}
const
newValue
=
{
name
}
:
{
message
}
;
return
{
path
:
value
.
input
value
:
newValue
}
;
}
if
(
typeof
value
.
result
=
=
"
object
"
)
{
return
{
path
:
value
.
result
.
actor
value
:
value
.
result
}
;
}
return
{
path
:
value
.
input
value
:
value
.
result
}
;
}
