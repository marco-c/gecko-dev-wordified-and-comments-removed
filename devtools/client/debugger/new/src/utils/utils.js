export
function
handleError
(
err
:
any
)
{
console
.
log
(
"
ERROR
:
"
err
)
;
}
export
function
promisify
(
context
:
any
method
:
any
.
.
.
args
:
any
)
:
Promise
<
mixed
>
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
args
.
push
(
response
=
>
{
if
(
response
.
error
)
{
reject
(
response
)
;
}
else
{
resolve
(
response
)
;
}
}
)
;
method
.
apply
(
context
args
)
;
}
)
;
}
export
function
endTruncateStr
(
str
:
any
size
:
number
)
{
if
(
str
.
length
>
size
)
{
return
{
str
.
slice
(
str
.
length
-
size
)
}
;
}
return
str
;
}
export
function
waitForMs
(
ms
:
number
)
:
Promise
<
void
>
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
export
function
downloadFile
(
data
:
string
fileName
:
string
)
{
const
{
body
}
=
document
;
if
(
!
body
)
{
return
;
}
const
a
=
document
.
createElement
(
"
a
"
)
;
body
.
appendChild
(
a
)
;
a
.
className
=
"
download
-
anchor
"
;
a
.
href
=
window
.
URL
.
createObjectURL
(
new
Blob
(
[
data
]
{
type
:
"
text
/
javascript
"
}
)
)
;
a
.
setAttribute
(
"
download
"
fileName
)
;
a
.
click
(
)
;
body
.
removeChild
(
a
)
;
}
