"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
simplifyDisplayName
=
simplifyDisplayName
;
exports
.
formatDisplayName
=
formatDisplayName
;
exports
.
formatCopyName
=
formatCopyName
;
var
_source
=
require
(
"
.
.
/
.
.
/
source
"
)
;
var
_utils
=
require
(
"
.
.
/
.
.
/
.
.
/
utils
/
utils
"
)
;
const
objectProperty
=
/
(
[
\
w
\
d
]
+
)
/
;
const
arrayProperty
=
/
\
[
(
.
*
?
)
\
]
/
;
const
functionProperty
=
/
(
[
\
w
\
d
]
+
)
[
\
/
\
.
<
]
*
?
/
;
const
annonymousProperty
=
/
(
[
\
w
\
d
]
+
)
\
(
\
^
\
)
/
;
function
simplifyDisplayName
(
displayName
)
{
if
(
/
\
s
/
.
exec
(
displayName
)
)
{
return
displayName
;
}
const
scenarios
=
[
objectProperty
arrayProperty
functionProperty
annonymousProperty
]
;
for
(
const
reg
of
scenarios
)
{
const
match
=
reg
.
exec
(
displayName
)
;
if
(
match
)
{
return
match
[
1
]
;
}
}
return
displayName
;
}
const
displayNameMap
=
{
Babel
:
{
tryCatch
:
"
Async
"
}
Backbone
:
{
"
extend
/
child
"
:
"
Create
Class
"
"
.
create
"
:
"
Create
Model
"
}
jQuery
:
{
"
jQuery
.
event
.
dispatch
"
:
"
Dispatch
Event
"
}
React
:
{
"
ReactCompositeComponent
.
_renderValidatedComponentWithoutOwnerOrContext
/
renderedElement
<
"
:
"
Render
"
_renderValidatedComponentWithoutOwnerOrContext
:
"
Render
"
}
VueJS
:
{
"
renderMixin
/
Vue
.
prototype
.
_render
"
:
"
Render
"
}
Webpack
:
{
__webpack_require__
:
"
Bootstrap
"
}
}
;
function
mapDisplayNames
(
frame
library
)
{
const
{
displayName
}
=
frame
;
return
displayNameMap
[
library
]
&
&
displayNameMap
[
library
]
[
displayName
]
|
|
displayName
;
}
function
formatDisplayName
(
frame
{
shouldMapDisplayName
=
true
}
=
{
}
)
{
let
{
displayName
originalDisplayName
library
}
=
frame
;
displayName
=
originalDisplayName
|
|
displayName
;
if
(
library
&
&
shouldMapDisplayName
)
{
displayName
=
mapDisplayNames
(
frame
library
)
;
}
displayName
=
simplifyDisplayName
(
displayName
)
;
return
(
0
_utils
.
endTruncateStr
)
(
displayName
25
)
;
}
function
formatCopyName
(
frame
)
{
const
displayName
=
formatDisplayName
(
frame
)
;
const
fileName
=
(
0
_source
.
getFilename
)
(
frame
.
source
)
;
const
frameLocation
=
frame
.
location
.
line
;
return
{
displayName
}
(
{
fileName
}
#
{
frameLocation
}
)
;
}
