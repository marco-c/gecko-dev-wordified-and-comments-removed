"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
getScope
=
getScope
;
var
_devtoolsReps
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
reps
.
js
"
)
;
var
_getVariables
=
require
(
"
.
/
getVariables
"
)
;
var
_utils
=
require
(
"
.
/
utils
"
)
;
var
_frames
=
require
(
"
.
.
/
.
.
/
pause
/
frames
/
index
"
)
;
function
getScopeTitle
(
type
scope
)
{
if
(
type
=
=
=
"
block
"
&
&
scope
.
block
&
&
scope
.
block
.
displayName
)
{
return
scope
.
block
.
displayName
;
}
if
(
type
=
=
=
"
function
"
&
&
scope
.
function
)
{
return
scope
.
function
.
displayName
?
(
0
_frames
.
simplifyDisplayName
)
(
scope
.
function
.
displayName
)
:
L10N
.
getStr
(
"
anonymous
"
)
;
}
return
L10N
.
getStr
(
"
scopes
.
block
"
)
;
}
function
getScope
(
scope
selectedFrame
frameScopes
why
scopeIndex
)
{
const
{
type
actor
}
=
scope
;
const
isLocalScope
=
scope
.
actor
=
=
=
frameScopes
.
actor
;
const
key
=
{
actor
}
-
{
scopeIndex
}
;
if
(
type
=
=
=
"
function
"
|
|
type
=
=
=
"
block
"
)
{
const
bindings
=
scope
.
bindings
;
let
vars
=
(
0
_getVariables
.
getBindingVariables
)
(
bindings
key
)
;
if
(
isLocalScope
)
{
vars
=
vars
.
concat
(
(
0
_utils
.
getFramePopVariables
)
(
why
key
)
)
;
let
thisDesc_
=
selectedFrame
.
this
;
if
(
"
this
"
in
bindings
)
{
thisDesc_
=
bindings
.
this
?
bindings
.
this
.
value
:
null
;
}
const
this_
=
(
0
_utils
.
getThisVariable
)
(
thisDesc_
key
)
;
if
(
this_
)
{
vars
.
push
(
this_
)
;
}
}
if
(
vars
&
&
vars
.
length
)
{
const
title
=
getScopeTitle
(
type
scope
)
;
vars
.
sort
(
(
a
b
)
=
>
a
.
name
.
localeCompare
(
b
.
name
)
)
;
return
{
name
:
title
path
:
key
contents
:
vars
type
:
_devtoolsReps
.
ObjectInspectorUtils
.
node
.
NODE_TYPES
.
BLOCK
}
;
}
}
else
if
(
type
=
=
=
"
object
"
&
&
scope
.
object
)
{
let
value
=
scope
.
object
;
if
(
value
.
class
=
=
=
"
Window
"
)
{
value
=
{
.
.
.
scope
.
object
displayClass
:
"
Global
"
}
;
}
return
{
name
:
scope
.
object
.
class
path
:
key
contents
:
{
value
}
}
;
}
return
null
;
}
