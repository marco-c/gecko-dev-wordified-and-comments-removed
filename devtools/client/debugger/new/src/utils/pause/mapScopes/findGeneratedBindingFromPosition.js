"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
findGeneratedBindingForStandardBinding
=
findGeneratedBindingForStandardBinding
;
exports
.
findGeneratedBindingForImportBinding
=
findGeneratedBindingForImportBinding
;
exports
.
findGeneratedBindingForNormalDeclaration
=
findGeneratedBindingForNormalDeclaration
;
exports
.
findGeneratedBindingForImportDeclaration
=
findGeneratedBindingForImportDeclaration
;
var
_locColumn
=
require
(
"
.
/
locColumn
"
)
;
var
_mappingContains
=
require
(
"
.
/
mappingContains
"
)
;
var
_getGeneratedLocationRanges
=
require
(
"
.
/
getGeneratedLocationRanges
"
)
;
var
_firefox
=
require
(
"
.
.
/
.
.
/
.
.
/
client
/
firefox
"
)
;
async
function
findGeneratedBindingForStandardBinding
(
sourceMaps
client
source
pos
name
bindingType
generatedAstBindings
)
{
return
await
findGeneratedReference
(
(
await
(
0
_getGeneratedLocationRanges
.
getGeneratedLocationRanges
)
(
generatedAstBindings
source
pos
bindingType
pos
.
type
sourceMaps
)
)
)
;
}
async
function
findGeneratedBindingForImportBinding
(
sourceMaps
client
source
pos
name
bindingType
generatedAstBindings
)
{
return
await
findGeneratedImportReference
(
(
await
(
0
_getGeneratedLocationRanges
.
getGeneratedLocationRanges
)
(
generatedAstBindings
source
pos
bindingType
pos
.
type
sourceMaps
)
)
)
;
}
async
function
findGeneratedBindingForNormalDeclaration
(
sourceMaps
client
source
pos
name
bindingType
generatedAstBindings
)
{
return
await
findGeneratedReference
(
(
await
(
0
_getGeneratedLocationRanges
.
getGeneratedLocationRanges
)
(
generatedAstBindings
source
pos
.
declaration
bindingType
pos
.
type
sourceMaps
)
)
)
;
}
async
function
findGeneratedBindingForImportDeclaration
(
sourceMaps
client
source
pos
name
bindingType
generatedAstBindings
)
{
const
importName
=
pos
.
importName
;
if
(
typeof
importName
!
=
=
"
string
"
)
{
return
null
;
}
return
await
findGeneratedImportDeclaration
(
(
await
(
0
_getGeneratedLocationRanges
.
getGeneratedLocationRanges
)
(
generatedAstBindings
source
pos
.
declaration
bindingType
pos
.
type
sourceMaps
)
)
importName
)
;
}
async
function
findGeneratedReference
(
applicableBindings
)
{
if
(
applicableBindings
.
length
>
4
)
{
applicableBindings
=
[
]
;
}
for
(
const
applicable
of
applicableBindings
)
{
const
result
=
await
mapBindingReferenceToDescriptor
(
applicable
)
;
if
(
result
)
{
return
result
;
}
}
return
null
;
}
async
function
findGeneratedImportReference
(
applicableBindings
)
{
applicableBindings
=
applicableBindings
.
filter
(
(
applicable
i
)
=
>
{
if
(
!
applicable
.
firstInRange
|
|
applicable
.
binding
.
loc
.
type
!
=
=
"
ref
"
|
|
applicable
.
binding
.
loc
.
meta
)
{
return
true
;
}
const
next
=
i
+
1
<
applicableBindings
.
length
?
applicableBindings
[
i
+
1
]
:
null
;
return
!
next
|
|
next
.
binding
.
loc
.
type
!
=
=
"
ref
"
|
|
!
next
.
binding
.
loc
.
meta
;
}
)
;
if
(
applicableBindings
.
length
>
2
)
{
applicableBindings
=
[
]
;
}
for
(
const
applicable
of
applicableBindings
)
{
const
result
=
await
mapImportReferenceToDescriptor
(
applicable
)
;
if
(
result
)
{
return
result
;
}
}
return
null
;
}
async
function
findGeneratedImportDeclaration
(
applicableBindings
importName
)
{
if
(
applicableBindings
.
length
>
10
)
{
applicableBindings
=
[
]
;
}
let
result
=
null
;
for
(
const
{
binding
}
of
applicableBindings
)
{
if
(
binding
.
loc
.
type
=
=
=
"
ref
"
)
{
continue
;
}
const
namespaceDesc
=
await
binding
.
desc
(
)
;
if
(
isPrimitiveValue
(
namespaceDesc
)
)
{
continue
;
}
if
(
!
isObjectValue
(
namespaceDesc
)
)
{
result
=
{
name
:
binding
.
name
desc
:
namespaceDesc
expression
:
binding
.
name
}
;
continue
;
}
const
desc
=
await
readDescriptorProperty
(
namespaceDesc
importName
)
;
const
expression
=
{
binding
.
name
}
.
{
importName
}
;
if
(
desc
)
{
result
=
{
name
:
binding
.
name
desc
expression
}
;
break
;
}
}
return
result
;
}
async
function
mapBindingReferenceToDescriptor
(
{
binding
range
firstInRange
firstOnLine
}
)
{
if
(
range
.
start
.
line
=
=
=
binding
.
loc
.
start
.
line
&
&
(
firstInRange
|
|
firstOnLine
|
|
(
0
_locColumn
.
locColumn
)
(
range
.
start
)
>
=
(
0
_locColumn
.
locColumn
)
(
binding
.
loc
.
start
)
)
&
&
(
0
_locColumn
.
locColumn
)
(
range
.
start
)
<
=
(
0
_locColumn
.
locColumn
)
(
binding
.
loc
.
end
)
)
{
return
{
name
:
binding
.
name
desc
:
await
binding
.
desc
(
)
expression
:
binding
.
name
}
;
}
return
null
;
}
async
function
mapImportReferenceToDescriptor
(
{
binding
range
}
)
{
if
(
binding
.
loc
.
type
!
=
=
"
ref
"
)
{
return
null
;
}
if
(
!
(
0
_mappingContains
.
mappingContains
)
(
range
binding
.
loc
)
)
{
return
null
;
}
let
expression
=
binding
.
name
;
let
desc
=
await
binding
.
desc
(
)
;
if
(
binding
.
loc
.
type
=
=
=
"
ref
"
)
{
const
{
meta
}
=
binding
.
loc
;
for
(
let
op
=
meta
index
=
0
;
op
&
&
(
0
_mappingContains
.
mappingContains
)
(
range
op
)
&
&
desc
&
&
index
<
2
;
index
+
+
op
=
op
&
&
op
.
parent
)
{
if
(
op
.
type
=
=
=
"
call
"
)
{
return
null
;
}
if
(
op
.
type
=
=
=
"
inherit
"
)
{
continue
;
}
desc
=
await
readDescriptorProperty
(
desc
op
.
property
)
;
expression
+
=
.
{
op
.
property
}
;
}
}
return
desc
?
{
name
:
binding
.
name
desc
expression
}
:
null
;
}
function
isPrimitiveValue
(
desc
)
{
return
desc
&
&
(
!
desc
.
value
|
|
typeof
desc
.
value
!
=
=
"
object
"
)
;
}
function
isObjectValue
(
desc
)
{
return
desc
&
&
!
isPrimitiveValue
(
desc
)
&
&
desc
.
value
.
type
=
=
=
"
object
"
&
&
!
desc
.
value
.
optimizedOut
;
}
async
function
readDescriptorProperty
(
desc
property
)
{
if
(
!
desc
)
{
return
null
;
}
if
(
typeof
desc
.
value
!
=
=
"
object
"
|
|
!
desc
.
value
)
{
return
{
value
:
{
type
:
"
undefined
"
}
}
;
}
if
(
!
isObjectValue
(
desc
)
)
{
return
desc
;
}
const
objectClient
=
(
0
_firefox
.
createObjectClient
)
(
desc
.
value
)
;
return
(
await
objectClient
.
getProperty
(
property
)
)
.
descriptor
;
}
