"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
buildGeneratedBindingList
=
buildGeneratedBindingList
;
var
_lodash
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
lodash
"
)
;
var
_firefox
=
require
(
"
.
.
/
.
.
/
.
.
/
client
/
firefox
"
)
;
var
_locColumn
=
require
(
"
.
/
locColumn
"
)
;
function
buildGeneratedBindingList
(
scopes
generatedAstScopes
thisBinding
)
{
const
frameThisOwner
=
generatedAstScopes
.
find
(
generated
=
>
"
this
"
in
generated
.
bindings
)
;
let
globalScope
=
null
;
const
clientScopes
=
[
]
;
for
(
let
s
=
scopes
;
s
;
s
=
s
.
parent
)
{
const
bindings
=
s
.
bindings
?
Object
.
assign
(
{
}
.
.
.
s
.
bindings
.
arguments
s
.
bindings
.
variables
)
:
{
}
;
clientScopes
.
push
(
bindings
)
;
globalScope
=
s
;
}
const
generatedMainScopes
=
generatedAstScopes
.
slice
(
0
-
2
)
;
const
generatedGlobalScopes
=
generatedAstScopes
.
slice
(
-
2
)
;
const
clientMainScopes
=
clientScopes
.
slice
(
0
generatedMainScopes
.
length
)
;
const
clientGlobalScopes
=
clientScopes
.
slice
(
generatedMainScopes
.
length
)
;
const
generatedBindings
=
generatedMainScopes
.
reduce
(
(
acc
generated
i
)
=
>
{
const
bindings
=
clientMainScopes
[
i
]
;
if
(
generated
=
=
=
frameThisOwner
&
&
thisBinding
)
{
bindings
.
this
=
{
value
:
thisBinding
}
;
}
for
(
const
name
of
Object
.
keys
(
generated
.
bindings
)
)
{
if
(
name
=
=
=
"
this
"
&
&
!
bindings
[
name
]
)
{
continue
;
}
const
{
refs
}
=
generated
.
bindings
[
name
]
;
for
(
const
loc
of
refs
)
{
acc
.
push
(
{
name
loc
desc
:
(
)
=
>
Promise
.
resolve
(
bindings
[
name
]
|
|
null
)
}
)
;
}
}
return
acc
;
}
[
]
)
;
for
(
const
generated
of
generatedGlobalScopes
)
{
for
(
const
name
of
Object
.
keys
(
generated
.
bindings
)
)
{
const
{
refs
}
=
generated
.
bindings
[
name
]
;
const
bindings
=
clientGlobalScopes
.
find
(
b
=
>
(
0
_lodash
.
has
)
(
b
name
)
)
;
for
(
const
loc
of
refs
)
{
if
(
bindings
)
{
generatedBindings
.
push
(
{
name
loc
desc
:
(
)
=
>
Promise
.
resolve
(
bindings
[
name
]
)
}
)
;
}
else
{
const
globalGrip
=
globalScope
&
&
globalScope
.
object
;
if
(
globalGrip
)
{
generatedBindings
.
push
(
{
name
loc
desc
:
async
(
)
=
>
{
const
objectClient
=
(
0
_firefox
.
createObjectClient
)
(
globalGrip
)
;
return
(
await
objectClient
.
getProperty
(
name
)
)
.
descriptor
;
}
}
)
;
}
}
}
}
}
return
generatedBindings
.
sort
(
(
a
b
)
=
>
{
const
aStart
=
a
.
loc
.
start
;
const
bStart
=
b
.
loc
.
start
;
if
(
aStart
.
line
=
=
=
bStart
.
line
)
{
return
(
0
_locColumn
.
locColumn
)
(
aStart
)
-
(
0
_locColumn
.
locColumn
)
(
bStart
)
;
}
return
aStart
.
line
-
bStart
.
line
;
}
)
;
}
