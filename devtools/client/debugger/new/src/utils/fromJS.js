import
*
as
I
from
"
immutable
"
;
import
{
isFunction
}
from
"
lodash
"
;
function
hasOwnProperty
(
value
key
)
{
if
(
value
.
hasOwnProperty
&
&
isFunction
(
value
.
hasOwnProperty
)
)
{
return
value
.
hasOwnProperty
(
key
)
;
}
if
(
value
.
prototype
&
&
value
.
prototype
.
hasOwnProperty
)
{
return
value
.
prototype
.
hasOwnProperty
(
key
)
;
}
return
false
;
}
function
createMap
(
value
)
{
const
hasLength
=
hasOwnProperty
(
value
"
length
"
)
;
const
length
=
value
.
length
;
if
(
hasLength
)
{
value
.
length
=
{
value
.
length
}
;
}
let
map
=
I
.
Seq
(
value
)
.
map
(
fromJS
)
.
toMap
(
)
;
if
(
hasLength
)
{
map
=
map
.
set
(
"
length
"
length
)
;
value
.
length
=
length
;
}
return
map
;
}
function
createList
(
value
)
{
return
I
.
Seq
(
value
)
.
map
(
fromJS
)
.
toList
(
)
;
}
function
fromJS
(
value
:
any
)
:
any
{
if
(
Array
.
isArray
(
value
)
)
{
return
createList
(
value
)
;
}
if
(
value
&
&
value
.
constructor
&
&
value
.
constructor
.
meta
)
{
const
kind
=
value
.
constructor
.
meta
.
kind
;
if
(
kind
=
=
=
"
struct
"
)
{
return
createMap
(
value
)
;
}
else
if
(
kind
=
=
=
"
list
"
)
{
return
createList
(
value
)
;
}
}
if
(
value
=
=
null
|
|
typeof
value
!
=
=
"
object
"
)
{
return
value
;
}
return
createMap
(
value
)
;
}
module
.
exports
=
fromJS
;
