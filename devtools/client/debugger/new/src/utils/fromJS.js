"
use
strict
"
;
var
_immutable
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
immutable
"
)
;
var
I
=
_interopRequireWildcard
(
_immutable
)
;
var
_lodash
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
lodash
"
)
;
function
_interopRequireWildcard
(
obj
)
{
if
(
obj
&
&
obj
.
__esModule
)
{
return
obj
;
}
else
{
var
newObj
=
{
}
;
if
(
obj
!
=
null
)
{
for
(
var
key
in
obj
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
obj
key
)
)
{
var
desc
=
Object
.
defineProperty
&
&
Object
.
getOwnPropertyDescriptor
?
Object
.
getOwnPropertyDescriptor
(
obj
key
)
:
{
}
;
if
(
desc
.
get
|
|
desc
.
set
)
{
Object
.
defineProperty
(
newObj
key
desc
)
;
}
else
{
newObj
[
key
]
=
obj
[
key
]
;
}
}
}
}
newObj
.
default
=
obj
;
return
newObj
;
}
}
function
hasOwnProperty
(
value
key
)
{
if
(
value
.
hasOwnProperty
&
&
(
0
_lodash
.
isFunction
)
(
value
.
hasOwnProperty
)
)
{
return
value
.
hasOwnProperty
(
key
)
;
}
if
(
value
.
prototype
&
&
value
.
prototype
.
hasOwnProperty
)
{
return
value
.
prototype
.
hasOwnProperty
(
key
)
;
}
return
false
;
}
function
createMap
(
value
)
{
const
hasLength
=
hasOwnProperty
(
value
"
length
"
)
;
const
length
=
value
.
length
;
if
(
hasLength
)
{
value
.
length
=
{
value
.
length
}
;
}
let
map
=
I
.
Seq
(
value
)
.
map
(
fromJS
)
.
toMap
(
)
;
if
(
hasLength
)
{
map
=
map
.
set
(
"
length
"
length
)
;
value
.
length
=
length
;
}
return
map
;
}
function
createList
(
value
)
{
return
I
.
Seq
(
value
)
.
map
(
fromJS
)
.
toList
(
)
;
}
function
fromJS
(
value
)
{
if
(
Array
.
isArray
(
value
)
)
{
return
createList
(
value
)
;
}
if
(
value
&
&
value
.
constructor
&
&
value
.
constructor
.
meta
)
{
const
kind
=
value
.
constructor
.
meta
.
kind
;
if
(
kind
=
=
=
"
struct
"
)
{
return
createMap
(
value
)
;
}
else
if
(
kind
=
=
=
"
list
"
)
{
return
createList
(
value
)
;
}
}
if
(
value
=
=
null
|
|
typeof
value
!
=
=
"
object
"
)
{
return
value
;
}
return
createMap
(
value
)
;
}
module
.
exports
=
fromJS
;
