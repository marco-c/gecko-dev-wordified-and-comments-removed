"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
sourceTypes
=
exports
.
isMinified
=
undefined
;
var
_isMinified
=
require
(
"
.
/
isMinified
"
)
;
Object
.
defineProperty
(
exports
"
isMinified
"
{
enumerable
:
true
get
:
function
(
)
{
return
_isMinified
.
isMinified
;
}
}
)
;
exports
.
shouldPrettyPrint
=
shouldPrettyPrint
;
exports
.
isJavaScript
=
isJavaScript
;
exports
.
isPretty
=
isPretty
;
exports
.
isPrettyURL
=
isPrettyURL
;
exports
.
isThirdParty
=
isThirdParty
;
exports
.
getPrettySourceURL
=
getPrettySourceURL
;
exports
.
getRawSourceURL
=
getRawSourceURL
;
exports
.
getFormattedSourceId
=
getFormattedSourceId
;
exports
.
getFilename
=
getFilename
;
exports
.
getTruncatedFileName
=
getTruncatedFileName
;
exports
.
getDisplayPath
=
getDisplayPath
;
exports
.
getFileURL
=
getFileURL
;
exports
.
getSourcePath
=
getSourcePath
;
exports
.
getSourceLineCount
=
getSourceLineCount
;
exports
.
getMode
=
getMode
;
exports
.
isLoaded
=
isLoaded
;
exports
.
isLoading
=
isLoading
;
exports
.
getTextAtPosition
=
getTextAtPosition
;
exports
.
getSourceClassnames
=
getSourceClassnames
;
exports
.
getRelativeUrl
=
getRelativeUrl
;
exports
.
underRoot
=
underRoot
;
exports
.
isOriginal
=
isOriginal
;
exports
.
isGenerated
=
isGenerated
;
var
_devtoolsSourceMap
=
require
(
"
devtools
/
client
/
shared
/
source
-
map
/
index
.
js
"
)
;
var
_devtoolsModules
=
require
(
"
devtools
/
client
/
debugger
/
new
/
dist
/
vendors
"
)
.
vendored
[
"
devtools
-
modules
"
]
;
var
_utils
=
require
(
"
.
/
utils
"
)
;
var
_text
=
require
(
"
.
.
/
utils
/
text
"
)
;
var
_url
=
require
(
"
.
.
/
utils
/
url
"
)
;
var
_sourcesTree
=
require
(
"
.
/
sources
-
tree
/
index
"
)
;
var
_prefs
=
require
(
"
.
/
prefs
"
)
;
const
sourceTypes
=
exports
.
sourceTypes
=
{
coffee
:
"
coffeescript
"
js
:
"
javascript
"
jsx
:
"
react
"
ts
:
"
typescript
"
vue
:
"
vue
"
}
;
function
trimUrlQuery
(
url
)
{
const
length
=
url
.
length
;
const
q1
=
url
.
indexOf
(
"
?
"
)
;
const
q2
=
url
.
indexOf
(
"
&
"
)
;
const
q3
=
url
.
indexOf
(
"
#
"
)
;
const
q
=
Math
.
min
(
q1
!
=
-
1
?
q1
:
length
q2
!
=
-
1
?
q2
:
length
q3
!
=
-
1
?
q3
:
length
)
;
return
url
.
slice
(
0
q
)
;
}
function
shouldPrettyPrint
(
source
)
{
if
(
!
source
|
|
isPretty
(
source
)
|
|
!
isJavaScript
(
source
)
|
|
isOriginal
(
source
)
|
|
source
.
sourceMapURL
|
|
!
_prefs
.
prefs
.
clientSourceMapsEnabled
)
{
return
false
;
}
return
true
;
}
function
isJavaScript
(
source
)
{
const
url
=
source
.
url
;
const
contentType
=
source
.
contentType
;
return
url
&
&
/
\
.
(
jsm
|
js
)
?
/
.
test
(
trimUrlQuery
(
url
)
)
|
|
!
!
(
contentType
&
&
contentType
.
includes
(
"
javascript
"
)
)
;
}
function
isPretty
(
source
)
{
const
url
=
source
.
url
;
return
isPrettyURL
(
url
)
;
}
function
isPrettyURL
(
url
)
{
return
url
?
/
formatted
/
.
test
(
url
)
:
false
;
}
function
isThirdParty
(
source
)
{
const
url
=
source
.
url
;
if
(
!
source
|
|
!
url
)
{
return
false
;
}
return
!
!
url
.
match
(
/
(
node_modules
|
bower_components
)
/
)
;
}
function
getPrettySourceURL
(
url
)
{
if
(
!
url
)
{
url
=
"
"
;
}
return
{
url
}
:
formatted
;
}
function
getRawSourceURL
(
url
)
{
return
url
?
url
.
replace
(
/
:
formatted
/
"
"
)
:
url
;
}
function
resolveFileURL
(
url
transformUrl
=
initialUrl
=
>
initialUrl
truncate
=
true
)
{
url
=
getRawSourceURL
(
url
|
|
"
"
)
;
const
name
=
transformUrl
(
url
)
;
if
(
!
truncate
)
{
return
name
;
}
return
(
0
_utils
.
endTruncateStr
)
(
name
50
)
;
}
function
getFormattedSourceId
(
id
)
{
const
sourceId
=
id
.
split
(
"
/
"
)
[
1
]
;
return
SOURCE
{
sourceId
}
;
}
function
getFilename
(
source
)
{
const
{
url
id
}
=
source
;
if
(
!
getRawSourceURL
(
url
)
)
{
return
getFormattedSourceId
(
id
)
;
}
const
{
filename
}
=
(
0
_sourcesTree
.
getURL
)
(
source
)
;
return
getRawSourceURL
(
filename
)
;
}
function
getTruncatedFileName
(
source
length
=
30
)
{
return
(
0
_text
.
truncateMiddleText
)
(
getFilename
(
source
)
length
)
;
}
function
getDisplayPath
(
mySource
sources
)
{
const
filename
=
getFilename
(
mySource
)
;
const
similarSources
=
sources
.
filter
(
source
=
>
getRawSourceURL
(
mySource
.
url
)
!
=
getRawSourceURL
(
source
.
url
)
&
&
filename
=
=
getFilename
(
source
)
)
;
if
(
similarSources
.
length
=
=
0
)
{
return
undefined
;
}
const
paths
=
[
mySource
.
.
.
similarSources
]
.
map
(
source
=
>
(
0
_sourcesTree
.
getURL
)
(
source
)
.
path
.
split
(
"
/
"
)
.
reverse
(
)
.
slice
(
1
)
)
;
let
similar
=
true
;
const
displayPath
=
[
]
;
for
(
let
i
=
0
;
similar
&
&
i
<
paths
[
0
]
.
length
;
i
+
+
)
{
const
[
dir
.
.
.
dirs
]
=
paths
.
map
(
path
=
>
path
[
i
]
)
;
displayPath
.
push
(
dir
)
;
similar
=
dirs
.
includes
(
dir
)
;
}
return
displayPath
.
reverse
(
)
.
join
(
"
/
"
)
;
}
function
getFileURL
(
source
truncate
=
true
)
{
const
{
url
id
}
=
source
;
if
(
!
url
)
{
return
getFormattedSourceId
(
id
)
;
}
return
resolveFileURL
(
url
_devtoolsModules
.
getUnicodeUrl
truncate
)
;
}
const
contentTypeModeMap
=
{
"
text
/
javascript
"
:
{
name
:
"
javascript
"
}
"
text
/
typescript
"
:
{
name
:
"
javascript
"
typescript
:
true
}
"
text
/
coffeescript
"
:
{
name
:
"
coffeescript
"
}
"
text
/
typescript
-
jsx
"
:
{
name
:
"
jsx
"
base
:
{
name
:
"
javascript
"
typescript
:
true
}
}
"
text
/
jsx
"
:
{
name
:
"
jsx
"
}
"
text
/
x
-
elm
"
:
{
name
:
"
elm
"
}
"
text
/
x
-
clojure
"
:
{
name
:
"
clojure
"
}
"
text
/
wasm
"
:
{
name
:
"
text
"
}
"
text
/
html
"
:
{
name
:
"
htmlmixed
"
}
}
;
function
getSourcePath
(
url
)
{
if
(
!
url
)
{
return
"
"
;
}
const
{
path
href
}
=
(
0
_url
.
parse
)
(
url
)
;
return
path
|
|
href
;
}
function
getSourceLineCount
(
source
)
{
if
(
source
.
error
)
{
return
0
;
}
if
(
source
.
isWasm
)
{
const
{
binary
}
=
source
.
text
;
return
binary
.
length
;
}
return
source
.
text
!
=
undefined
?
source
.
text
.
split
(
"
\
n
"
)
.
length
:
0
;
}
function
getMode
(
source
symbols
)
{
if
(
source
.
isWasm
)
{
return
{
name
:
"
text
"
}
;
}
const
{
contentType
text
url
}
=
source
;
if
(
!
text
)
{
return
{
name
:
"
text
"
}
;
}
if
(
url
&
&
url
.
match
(
/
\
.
jsx
/
i
)
|
|
symbols
&
&
symbols
.
hasJsx
)
{
if
(
symbols
&
&
symbols
.
hasTypes
)
{
return
{
name
:
"
text
/
typescript
-
jsx
"
}
;
}
return
{
name
:
"
jsx
"
}
;
}
if
(
symbols
&
&
symbols
.
hasTypes
)
{
if
(
symbols
.
hasJsx
)
{
return
{
name
:
"
text
/
typescript
-
jsx
"
}
;
}
return
{
name
:
"
text
/
typescript
"
}
;
}
const
languageMimeMap
=
[
{
ext
:
"
.
c
"
mode
:
"
text
/
x
-
csrc
"
}
{
ext
:
"
.
kt
"
mode
:
"
text
/
x
-
kotlin
"
}
{
ext
:
"
.
cpp
"
mode
:
"
text
/
x
-
c
+
+
src
"
}
{
ext
:
"
.
m
"
mode
:
"
text
/
x
-
objectivec
"
}
{
ext
:
"
.
rs
"
mode
:
"
text
/
x
-
rustsrc
"
}
{
ext
:
"
.
hx
"
mode
:
"
text
/
x
-
haxe
"
}
]
;
if
(
url
)
{
const
result
=
languageMimeMap
.
find
(
(
{
ext
}
)
=
>
url
.
endsWith
(
ext
)
)
;
if
(
result
!
=
=
undefined
)
{
return
{
name
:
result
.
mode
}
;
}
}
if
(
url
&
&
url
.
match
(
/
\
.
marko
/
i
)
)
{
return
{
name
:
"
javascript
"
}
;
}
const
isHTMLLike
=
text
.
match
(
/
^
\
s
*
<
/
)
;
if
(
!
contentType
)
{
if
(
isHTMLLike
)
{
return
{
name
:
"
htmlmixed
"
}
;
}
return
{
name
:
"
text
"
}
;
}
if
(
text
.
match
(
/
^
\
s
*
(
\
/
\
/
flow
|
\
/
\
*
flow
\
*
\
/
)
/
)
)
{
return
contentTypeModeMap
[
"
text
/
typescript
"
]
;
}
if
(
/
script
|
elm
|
jsx
|
clojure
|
wasm
|
html
/
.
test
(
contentType
)
)
{
if
(
contentType
in
contentTypeModeMap
)
{
return
contentTypeModeMap
[
contentType
]
;
}
return
contentTypeModeMap
[
"
text
/
javascript
"
]
;
}
if
(
isHTMLLike
)
{
return
{
name
:
"
htmlmixed
"
}
;
}
return
{
name
:
"
text
"
}
;
}
function
isLoaded
(
source
)
{
return
source
.
loadedState
=
=
=
"
loaded
"
;
}
function
isLoading
(
source
)
{
return
source
.
loadedState
=
=
=
"
loading
"
;
}
function
getTextAtPosition
(
source
location
)
{
if
(
!
source
|
|
source
.
isWasm
|
|
!
source
.
text
)
{
return
"
"
;
}
const
line
=
location
.
line
;
const
column
=
location
.
column
|
|
0
;
const
lineText
=
source
.
text
.
split
(
"
\
n
"
)
[
line
-
1
]
;
if
(
!
lineText
)
{
return
"
"
;
}
return
lineText
.
slice
(
column
column
+
100
)
.
trim
(
)
;
}
function
getSourceClassnames
(
source
sourceMetaData
)
{
const
defaultClassName
=
"
file
"
;
if
(
!
source
|
|
!
source
.
url
)
{
return
defaultClassName
;
}
if
(
sourceMetaData
&
&
sourceMetaData
.
framework
)
{
return
sourceMetaData
.
framework
.
toLowerCase
(
)
;
}
if
(
isPretty
(
source
)
)
{
return
"
prettyPrint
"
;
}
if
(
source
.
isBlackBoxed
)
{
return
"
blackBox
"
;
}
return
sourceTypes
[
(
0
_sourcesTree
.
getFileExtension
)
(
source
)
]
|
|
defaultClassName
;
}
function
getRelativeUrl
(
source
root
)
{
const
{
group
path
}
=
(
0
_sourcesTree
.
getURL
)
(
source
)
;
if
(
!
root
)
{
return
path
;
}
const
url
=
group
+
path
;
return
url
.
slice
(
url
.
indexOf
(
root
)
+
root
.
length
+
1
)
;
}
function
underRoot
(
source
root
)
{
return
source
.
url
&
&
source
.
url
.
includes
(
root
)
;
}
function
isOriginal
(
source
)
{
return
(
0
_devtoolsSourceMap
.
isOriginalId
)
(
source
.
id
)
;
}
function
isGenerated
(
source
)
{
return
(
0
_devtoolsSourceMap
.
isGeneratedId
)
(
source
.
id
)
;
}
