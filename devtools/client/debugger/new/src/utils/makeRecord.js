import
*
as
I
from
"
immutable
"
;
export
type
Record
<
T
:
Object
>
=
{
equals
<
A
>
(
other
:
A
)
:
boolean
get
<
A
>
(
key
:
Keys
<
T
>
notSetValue
?
:
any
)
:
A
getIn
<
A
>
(
keyPath
:
Array
<
any
>
notSetValue
?
:
any
)
:
A
hasIn
<
A
>
(
keyPath
:
Array
<
any
>
)
:
boolean
set
<
A
>
(
key
:
Keys
<
T
>
value
:
A
)
:
Record
<
T
>
setIn
(
keyPath
:
Array
<
any
>
.
.
.
iterables
:
Array
<
any
>
)
:
Record
<
T
>
merge
(
values
:
Shape
<
T
>
)
:
Record
<
T
>
mergeIn
(
keyPath
:
Array
<
any
>
.
.
.
iterables
:
Array
<
any
>
)
:
Record
<
T
>
delete
<
A
>
(
key
:
Keys
<
T
>
value
:
A
)
:
Record
<
T
>
deleteIn
(
keyPath
:
Array
<
any
>
.
.
.
iterables
:
Array
<
any
>
)
:
Record
<
T
>
update
<
A
>
(
key
:
Keys
<
T
>
value
:
A
)
:
Record
<
T
>
updateIn
(
keyPath
:
Array
<
any
>
.
.
.
iterables
:
Array
<
any
>
)
:
Record
<
T
>
remove
<
A
>
(
key
:
Keys
<
T
>
)
:
Record
<
T
>
toJS
(
)
:
T
}
&
T
;
function
makeRecord
<
T
>
(
spec
:
T
&
Object
)
:
(
)
=
>
Record
<
T
>
{
return
I
.
Record
(
spec
)
;
}
export
default
makeRecord
;
