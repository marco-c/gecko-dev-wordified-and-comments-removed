"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
getDomain
=
getDomain
;
exports
.
findNodeInContents
=
findNodeInContents
;
exports
.
createTreeNodeMatcher
=
createTreeNodeMatcher
;
var
_url
=
require
(
"
devtools
/
client
/
debugger
/
new
/
dist
/
vendors
"
)
.
vendored
[
"
url
"
]
;
var
_utils
=
require
(
"
.
/
utils
"
)
;
function
getDomain
(
url
)
{
if
(
!
url
)
{
return
null
;
}
const
{
host
}
=
(
0
_url
.
parse
)
(
url
)
;
if
(
!
host
)
{
return
null
;
}
return
host
.
startsWith
(
"
www
.
"
)
?
host
.
substr
(
"
www
.
"
.
length
)
:
host
;
}
function
isExactDomainMatch
(
part
debuggeeHost
)
{
return
part
.
startsWith
(
"
www
.
"
)
?
part
.
substr
(
"
www
.
"
.
length
)
=
=
=
debuggeeHost
:
part
=
=
=
debuggeeHost
;
}
function
findNodeInContents
(
tree
matcher
)
{
const
{
contents
}
=
tree
;
if
(
contents
.
length
=
=
=
0
)
{
return
{
found
:
false
index
:
0
}
;
}
let
left
=
0
;
let
right
=
contents
.
length
-
1
;
while
(
left
<
right
)
{
const
middle
=
Math
.
floor
(
(
left
+
right
)
/
2
)
;
if
(
matcher
(
contents
[
middle
]
)
<
0
)
{
left
=
middle
+
1
;
}
else
{
right
=
middle
;
}
}
const
result
=
matcher
(
contents
[
left
]
)
;
if
(
result
=
=
=
0
)
{
return
{
found
:
true
index
:
left
}
;
}
return
{
found
:
false
index
:
result
>
0
?
left
:
left
+
1
}
;
}
const
IndexName
=
"
(
index
)
"
;
function
createTreeNodeMatcherWithIndex
(
)
{
return
node
=
>
node
.
name
=
=
=
IndexName
?
0
:
1
;
}
function
createTreeNodeMatcherWithDebuggeeHost
(
debuggeeHost
)
{
return
node
=
>
{
if
(
node
.
name
=
=
=
IndexName
)
{
return
-
1
;
}
return
isExactDomainMatch
(
node
.
name
debuggeeHost
)
?
0
:
1
;
}
;
}
function
createTreeNodeMatcherWithNameAndOther
(
part
isDir
debuggeeHost
)
{
return
node
=
>
{
if
(
node
.
name
=
=
=
IndexName
)
{
return
-
1
;
}
if
(
debuggeeHost
&
&
isExactDomainMatch
(
node
.
name
debuggeeHost
)
)
{
return
-
1
;
}
const
nodeIsDir
=
(
0
_utils
.
nodeHasChildren
)
(
node
)
;
if
(
nodeIsDir
&
&
!
isDir
)
{
return
-
1
;
}
else
if
(
!
nodeIsDir
&
&
isDir
)
{
return
1
;
}
return
node
.
name
.
localeCompare
(
part
)
;
}
;
}
function
createTreeNodeMatcher
(
part
isDir
debuggeeHost
)
{
if
(
part
=
=
=
IndexName
)
{
return
createTreeNodeMatcherWithIndex
(
)
;
}
if
(
debuggeeHost
&
&
isExactDomainMatch
(
part
debuggeeHost
)
)
{
return
createTreeNodeMatcherWithDebuggeeHost
(
debuggeeHost
)
;
}
return
createTreeNodeMatcherWithNameAndOther
(
part
isDir
debuggeeHost
)
;
}
