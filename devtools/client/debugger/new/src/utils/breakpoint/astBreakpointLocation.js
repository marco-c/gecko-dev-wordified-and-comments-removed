import
{
getSymbols
}
from
"
.
.
/
.
.
/
workers
/
parser
"
;
import
{
findClosestFunction
}
from
"
.
.
/
ast
"
;
import
type
{
SymbolDeclarations
}
from
"
.
.
/
.
.
/
workers
/
parser
"
;
import
type
{
Location
Source
ASTLocation
}
from
"
.
.
/
.
.
/
types
"
;
export
function
getASTLocation
(
source
:
Source
symbols
:
SymbolDeclarations
location
:
Location
)
:
ASTLocation
{
if
(
source
.
isWasm
|
|
!
symbols
|
|
symbols
.
loading
)
{
return
{
name
:
undefined
offset
:
location
}
;
}
const
scope
=
findClosestFunction
(
symbols
location
)
;
if
(
scope
)
{
const
line
=
location
.
line
-
scope
.
location
.
start
.
line
;
return
{
name
:
scope
.
name
offset
:
{
line
column
:
undefined
}
}
;
}
return
{
name
:
undefined
offset
:
location
}
;
}
export
async
function
findScopeByName
(
source
:
Source
name
:
?
string
)
{
const
symbols
=
await
getSymbols
(
source
.
id
)
;
const
functions
=
symbols
.
functions
;
return
functions
.
find
(
node
=
>
node
.
name
=
=
=
name
)
;
}
