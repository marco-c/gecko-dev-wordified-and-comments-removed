function
defer
(
)
{
let
resolve
reject
;
const
promise
=
new
Promise
(
(
res
rej
)
=
>
{
resolve
=
res
;
reject
=
rej
;
}
)
;
return
{
resolve
reject
promise
}
;
}
function
executeSoon
(
fn
)
{
setTimeout
(
fn
0
)
;
}
function
filterByKey
(
obj
predicate
)
{
return
Object
.
keys
(
obj
)
.
reduce
(
(
res
key
)
=
>
{
if
(
predicate
(
key
)
)
{
return
Object
.
assign
(
res
{
[
key
]
:
obj
[
key
]
}
)
;
}
return
res
;
}
{
}
)
;
}
function
generateKey
(
)
{
return
{
performance
.
now
(
)
}
;
}
module
.
exports
=
{
defer
executeSoon
filterByKey
generateKey
}
;
