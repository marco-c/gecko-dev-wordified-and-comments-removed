const
{
executeSoon
filterByKey
}
=
require
(
"
.
.
/
.
.
/
utils
"
)
;
const
PROMISE
=
(
exports
.
PROMISE
=
"
dispatch
/
promise
"
)
;
let
seqIdVal
=
1
;
function
seqIdGen
(
)
{
return
seqIdVal
+
+
;
}
function
promiseMiddleware
(
{
dispatch
getState
}
)
{
return
next
=
>
action
=
>
{
if
(
!
action
|
|
!
Object
.
keys
(
action
)
.
includes
(
PROMISE
)
)
{
return
next
(
action
)
;
}
const
promiseInst
=
action
[
PROMISE
]
;
const
seqId
=
seqIdGen
(
)
.
toString
(
)
;
action
=
Object
.
assign
(
filterByKey
(
action
key
=
>
key
!
=
=
PROMISE
)
{
seqId
}
)
;
dispatch
(
Object
.
assign
(
{
}
action
{
status
:
"
start
"
}
)
)
;
return
Promise
.
resolve
(
promiseInst
)
.
finally
(
(
)
=
>
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
)
.
then
(
value
=
>
{
dispatch
(
Object
.
assign
(
{
}
action
{
status
:
"
done
"
value
:
value
}
)
)
;
return
value
;
}
error
=
>
{
dispatch
(
Object
.
assign
(
{
}
action
{
status
:
"
error
"
error
:
error
.
message
|
|
error
}
)
)
;
return
Promise
.
reject
(
error
)
;
}
)
;
}
;
}
exports
.
promise
=
promiseMiddleware
;
