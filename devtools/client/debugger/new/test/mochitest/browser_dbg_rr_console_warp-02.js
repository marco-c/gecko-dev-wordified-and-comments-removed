function
waitForThreadEvents
(
threadClient
eventName
)
{
info
(
Waiting
for
thread
event
'
{
eventName
}
'
to
fire
.
)
;
return
new
Promise
(
function
(
resolve
reject
)
{
threadClient
.
addListener
(
eventName
function
onEvent
(
eventName
.
.
.
args
)
{
info
(
Thread
event
'
{
eventName
}
'
fired
.
)
;
threadClient
.
removeListener
(
eventName
onEvent
)
;
resolve
.
apply
(
resolve
args
)
;
}
)
;
}
)
;
}
async
function
test
(
)
{
waitForExplicitFinish
(
)
;
const
dbg
=
await
attatchRecordingDebugger
(
"
doc_rr_logs
.
html
"
{
waitForRecording
:
true
}
)
;
const
{
tab
toolbox
threadClient
}
=
dbg
;
const
console
=
await
getSplitConsole
(
dbg
)
;
const
hud
=
console
.
hud
;
let
message
=
await
warpToMessage
(
hud
threadClient
"
number
:
1
"
)
;
ok
(
!
message
.
classList
.
contains
(
"
paused
-
before
"
)
"
paused
before
message
is
not
shown
"
)
;
await
stepOverToLine
(
threadClient
18
)
;
await
reverseStepOverToLine
(
threadClient
17
)
;
message
=
findMessage
(
hud
"
number
:
1
"
)
ok
(
message
.
classList
.
contains
(
"
paused
-
before
"
)
"
paused
before
message
is
shown
"
)
;
await
toolbox
.
destroy
(
)
;
await
gBrowser
.
removeTab
(
tab
)
;
finish
(
)
;
}
