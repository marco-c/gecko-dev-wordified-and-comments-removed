Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
debugger
/
new
/
test
/
mochitest
/
helpers
.
js
"
this
)
;
const
EXAMPLE_URL
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
debugger
/
new
/
test
/
mochitest
/
examples
/
"
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
debugger
.
new
-
debugger
-
frontend
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
debugger
.
new
-
debugger
-
frontend
"
)
;
}
)
;
async
function
takeScreenshot
(
dbg
)
{
let
canvas
=
dbg
.
win
.
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
html
:
canvas
"
)
;
let
context
=
canvas
.
getContext
(
"
2d
"
)
;
canvas
.
width
=
dbg
.
win
.
innerWidth
;
canvas
.
height
=
dbg
.
win
.
innerHeight
;
context
.
drawWindow
(
dbg
.
win
0
0
canvas
.
width
canvas
.
height
"
white
"
)
;
await
waitForTime
(
1000
)
;
dump
(
[
SCREENSHOT
]
{
canvas
.
toDataURL
(
)
}
\
n
)
;
}
async
function
attachDebugger
(
tab
)
{
let
target
=
TargetFactory
.
forTab
(
tab
)
;
let
toolbox
=
await
gDevTools
.
showToolbox
(
target
"
jsdebugger
"
)
;
ok
(
toolbox
.
threadClient
.
state
=
=
"
resuming
"
"
Thread
is
attached
"
)
;
return
toolbox
;
}
async
function
setBreakpoint
(
threadClient
expectedFile
lineno
)
{
let
{
sources
}
=
await
threadClient
.
getSources
(
)
;
ok
(
sources
.
length
=
=
1
"
Got
one
source
"
)
;
ok
(
RegExp
(
expectedFile
)
.
test
(
sources
[
0
]
.
url
)
"
Source
is
"
+
expectedFile
)
;
let
sourceClient
=
threadClient
.
source
(
sources
[
0
]
)
;
await
sourceClient
.
setBreakpoint
(
{
line
:
lineno
}
)
;
}
function
resumeThenPauseAtLineFunctionFactory
(
method
)
{
return
async
function
(
threadClient
lineno
)
{
threadClient
[
method
]
(
)
;
await
threadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
let
frameLine
=
(
"
frame
"
in
packet
)
?
packet
.
frame
.
where
.
line
:
undefined
;
ok
(
frameLine
=
=
lineno
"
Paused
at
line
"
+
frameLine
+
"
expected
"
+
lineno
)
;
}
)
;
}
;
}
var
rewindToLine
=
resumeThenPauseAtLineFunctionFactory
(
"
rewind
"
)
;
var
resumeToLine
=
resumeThenPauseAtLineFunctionFactory
(
"
resume
"
)
;
var
reverseStepOverToLine
=
resumeThenPauseAtLineFunctionFactory
(
"
reverseStepOver
"
)
;
var
stepOverToLine
=
resumeThenPauseAtLineFunctionFactory
(
"
stepOver
"
)
;
var
reverseStepInToLine
=
resumeThenPauseAtLineFunctionFactory
(
"
reverseStepIn
"
)
;
var
stepInToLine
=
resumeThenPauseAtLineFunctionFactory
(
"
stepIn
"
)
;
var
reverseStepOutToLine
=
resumeThenPauseAtLineFunctionFactory
(
"
reverseStepOut
"
)
;
var
stepOutToLine
=
resumeThenPauseAtLineFunctionFactory
(
"
stepOut
"
)
;
async
function
evaluateInTopFrame
(
threadClient
text
)
{
let
{
frames
}
=
await
threadClient
.
getFrames
(
0
1
)
;
ok
(
frames
.
length
=
=
1
"
Got
one
frame
"
)
;
let
response
=
await
threadClient
.
eval
(
frames
[
0
]
.
actor
text
)
;
ok
(
response
.
type
=
=
"
resumed
"
"
Got
resume
response
from
eval
"
)
;
let
rval
;
await
threadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
ok
(
packet
.
type
=
=
"
paused
"
&
&
packet
.
why
.
type
=
=
"
clientEvaluated
"
&
&
"
return
"
in
packet
.
why
.
frameFinished
"
Eval
returned
a
value
"
)
;
rval
=
packet
.
why
.
frameFinished
[
"
return
"
]
;
}
)
;
return
(
rval
.
type
=
=
"
undefined
"
)
?
undefined
:
rval
;
}
async
function
checkEvaluateInTopFrame
(
threadClient
text
expected
)
{
let
rval
=
await
evaluateInTopFrame
(
threadClient
text
)
;
ok
(
rval
=
=
expected
"
Eval
returned
"
+
expected
)
;
}
async
function
checkEvaluateInTopFrameThrows
(
threadClient
text
)
{
let
{
frames
}
=
await
threadClient
.
getFrames
(
0
1
)
;
ok
(
frames
.
length
=
=
1
"
Got
one
frame
"
)
;
let
response
=
await
threadClient
.
eval
(
frames
[
0
]
.
actor
text
)
;
ok
(
response
.
type
=
=
"
resumed
"
"
Got
resume
response
from
eval
"
)
;
await
threadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
ok
(
packet
.
type
=
=
"
paused
"
&
&
packet
.
why
.
type
=
=
"
clientEvaluated
"
&
&
"
throw
"
in
packet
.
why
.
frameFinished
"
Eval
threw
an
exception
"
)
;
}
)
;
}
function
newRecordingFile
(
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
this
)
;
return
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
tmpDir
"
MochitestRecording
"
+
Math
.
round
(
Math
.
random
(
)
*
1000000000
)
)
;
}
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
this
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
No
such
actor
for
ID
/
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
Component
not
initialized
/
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
this
.
worker
is
null
/
)
;
