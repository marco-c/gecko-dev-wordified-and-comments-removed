async
function
waitForSourceCount
(
dbg
i
)
{
await
waitUntil
(
(
)
=
>
{
return
findAllElements
(
dbg
"
sourceNodes
"
)
.
length
=
=
=
i
;
}
)
;
}
async
function
assertSourceCount
(
dbg
count
)
{
await
waitForSourceCount
(
dbg
count
)
;
is
(
findAllElements
(
dbg
"
sourceNodes
"
)
.
length
count
{
count
}
sources
)
;
}
function
getLabel
(
dbg
index
)
{
return
findElement
(
dbg
"
sourceNode
"
index
)
.
textContent
.
trim
(
)
;
}
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
sources
.
html
"
)
;
const
{
selectors
:
{
getSelectedSource
}
getState
}
=
dbg
;
await
waitForSources
(
dbg
"
simple1
"
"
simple2
"
"
nested
-
source
"
"
long
.
js
"
)
;
assertSourceCount
(
dbg
2
)
;
await
clickElement
(
dbg
"
sourceArrow
"
2
)
;
assertSourceCount
(
dbg
7
)
;
await
clickElement
(
dbg
"
sourceArrow
"
3
)
;
assertSourceCount
(
dbg
8
)
;
ok
(
!
findElementWithSelector
(
dbg
"
.
sources
-
list
.
focused
"
)
"
Source
is
not
focused
"
)
;
const
selected
=
waitForDispatch
(
dbg
"
SELECT_SOURCE
"
)
;
await
clickElement
(
dbg
"
sourceNode
"
4
)
;
await
selected
;
ok
(
findElementWithSelector
(
dbg
"
.
sources
-
list
.
focused
"
)
"
Source
is
focused
"
)
;
ok
(
getSelectedSource
(
getState
(
)
)
.
get
(
"
url
"
)
.
includes
(
"
nested
-
source
.
js
"
)
"
The
right
source
is
selected
"
)
;
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
script
=
content
.
document
.
createElement
(
"
script
"
)
;
script
.
src
=
"
math
.
min
.
js
"
;
content
.
document
.
body
.
appendChild
(
script
)
;
}
)
;
await
waitForSourceCount
(
dbg
9
)
;
is
(
getLabel
(
dbg
7
)
"
math
.
min
.
js
"
"
The
dynamic
script
exists
"
)
;
}
)
;
