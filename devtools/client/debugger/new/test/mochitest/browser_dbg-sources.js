function
getLabel
(
dbg
index
)
{
return
findElement
(
dbg
"
sourceNode
"
index
)
.
textContent
.
trim
(
)
.
replace
(
/
^
[
\
s
\
u200b
]
*
/
g
"
"
)
;
}
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
sources
.
html
"
)
;
const
{
selectors
:
{
getSelectedSource
}
getState
}
=
dbg
;
await
waitForSources
(
dbg
"
simple1
"
"
simple2
"
"
nested
-
source
"
"
long
.
js
"
)
;
await
assertSourceCount
(
dbg
2
)
;
await
clickElement
(
dbg
"
sourceDirectoryLabel
"
2
)
;
await
assertSourceCount
(
dbg
7
)
;
await
clickElement
(
dbg
"
sourceDirectoryLabel
"
3
)
;
await
assertSourceCount
(
dbg
8
)
;
const
selected
=
waitForDispatch
(
dbg
"
SET_SELECTED_LOCATION
"
)
;
await
clickElement
(
dbg
"
sourceNode
"
4
)
;
await
selected
;
await
waitForSelectedSource
(
dbg
)
;
await
waitForElementWithSelector
(
dbg
"
.
sources
-
list
.
focused
"
)
;
const
focusedNode
=
findElementWithSelector
(
dbg
"
.
sources
-
list
.
focused
"
)
;
const
fourthNode
=
findElement
(
dbg
"
sourceNode
"
4
)
;
const
selectedSource
=
getSelectedSource
(
getState
(
)
)
.
url
;
ok
(
fourthNode
.
classList
.
contains
(
"
focused
"
)
"
4th
node
is
focused
"
)
;
ok
(
selectedSource
.
includes
(
"
nested
-
source
.
js
"
)
"
nested
-
source
is
selected
"
)
;
await
waitForSelectedSource
(
dbg
"
nested
-
source
"
)
;
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
script
=
content
.
document
.
createElement
(
"
script
"
)
;
script
.
src
=
"
math
.
min
.
js
"
;
content
.
document
.
body
.
appendChild
(
script
)
;
}
)
;
await
waitForSourceCount
(
dbg
9
)
;
is
(
getLabel
(
dbg
7
)
"
math
.
min
.
js
"
"
math
.
min
.
js
-
The
dynamic
script
exists
"
)
;
}
)
;
