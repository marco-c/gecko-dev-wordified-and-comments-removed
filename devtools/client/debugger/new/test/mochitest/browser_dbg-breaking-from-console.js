async
function
waitOnToolbox
(
toolbox
event
)
{
return
new
Promise
(
resolve
=
>
toolbox
.
on
(
event
resolve
)
)
;
}
add_task
(
function
*
(
)
{
const
url
=
EXAMPLE_URL
+
"
doc
-
script
-
switching
.
html
"
;
const
toolbox
=
yield
openNewTabAndToolbox
(
url
"
webconsole
"
)
;
let
jsterm
=
toolbox
.
getPanel
(
"
webconsole
"
)
.
hud
.
jsterm
;
jsterm
.
execute
(
"
debugger
"
)
;
yield
waitOnToolbox
(
toolbox
"
jsdebugger
-
selected
"
)
;
is
(
toolbox
.
threadClient
.
state
"
paused
"
)
;
const
dbg
=
createDebuggerContext
(
toolbox
)
;
const
{
selectors
:
{
getSelectedSource
}
getState
}
=
dbg
;
yield
waitForDispatch
(
dbg
"
LOAD_SOURCE_TEXT
"
)
;
is
(
dbg
.
win
.
cm
.
getValue
(
)
"
debugger
"
)
;
const
source
=
getSelectedSource
(
getState
(
)
)
.
toJS
(
)
;
assertPausedLocation
(
dbg
source
1
)
;
}
)
;
