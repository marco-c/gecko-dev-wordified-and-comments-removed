const
expressionSelectors
=
{
input
:
"
input
.
input
-
expression
"
}
;
function
getLabel
(
dbg
index
)
{
return
findElement
(
dbg
"
expressionNode
"
index
)
.
innerText
;
}
function
getValue
(
dbg
index
)
{
return
findElement
(
dbg
"
expressionValue
"
index
)
.
innerText
;
}
function
assertEmptyValue
(
dbg
index
)
{
const
value
=
findElement
(
dbg
"
expressionValue
"
index
)
;
if
(
value
)
{
is
(
value
.
innerText
"
"
)
;
return
;
}
is
(
value
null
)
;
}
function
toggleExpression
(
dbg
index
)
{
findElement
(
dbg
"
expressionNode
"
index
)
.
click
(
)
;
}
async
function
addExpression
(
dbg
input
)
{
info
(
"
Adding
an
expression
"
)
;
findElementWithSelector
(
dbg
expressionSelectors
.
input
)
.
focus
(
)
;
type
(
dbg
input
)
;
pressKey
(
dbg
"
Enter
"
)
;
await
waitForDispatch
(
dbg
"
EVALUATE_EXPRESSION
"
)
;
}
async
function
editExpression
(
dbg
input
)
{
info
(
"
updating
the
expression
"
)
;
dblClickElement
(
dbg
"
expressionNode
"
1
)
;
pressKey
(
dbg
"
End
"
)
;
type
(
dbg
input
)
;
pressKey
(
dbg
"
Enter
"
)
;
await
waitForDispatch
(
dbg
"
EVALUATE_EXPRESSION
"
)
;
}
async
function
addBadExpression
(
dbg
input
)
{
const
paused
=
waitForPaused
(
dbg
)
;
const
added
=
addExpression
(
dbg
input
)
;
await
paused
;
ok
(
dbg
.
selectors
.
isEvaluatingExpression
(
dbg
.
getState
(
)
)
)
;
await
resume
(
dbg
)
;
await
added
;
}
add_task
(
async
function
(
)
{
const
dbg
=
await
initDebugger
(
"
doc
-
script
-
switching
.
html
"
)
;
await
togglePauseOnExceptions
(
dbg
true
false
)
;
await
addExpression
(
dbg
"
location
"
)
;
await
addBadExpression
(
dbg
"
foo
.
bar
"
)
;
await
addBadExpression
(
dbg
"
foo
.
batt
"
)
;
await
addExpression
(
dbg
"
2
"
)
;
is
(
getValue
(
dbg
2
)
"
(
unavailable
)
"
)
is
(
getValue
(
dbg
3
)
"
(
unavailable
)
"
)
is
(
getValue
(
dbg
4
)
2
)
;
toggleExpression
(
dbg
1
)
;
await
waitForDispatch
(
dbg
"
LOAD_OBJECT_PROPERTIES
"
)
;
is
(
findAllElements
(
dbg
"
expressionNodes
"
)
.
length
20
)
;
}
)
;
