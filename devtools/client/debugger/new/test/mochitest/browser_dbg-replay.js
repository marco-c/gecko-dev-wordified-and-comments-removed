function
clickButton
(
dbg
button
)
{
const
resumeFired
=
waitForDispatch
(
dbg
"
COMMAND
"
)
;
clickElement
(
dbg
button
)
;
return
resumeFired
;
}
function
clickReplayButton
(
dbg
button
)
{
const
replayFired
=
waitForDispatch
(
dbg
"
TRAVEL_TO
"
)
;
clickElement
(
dbg
button
)
;
return
replayFired
;
}
async
function
clickStepOver
(
dbg
)
{
await
clickButton
(
dbg
"
stepOver
"
)
;
return
waitForPaused
(
dbg
)
;
}
async
function
clickStepBack
(
dbg
)
{
await
clickReplayButton
(
dbg
"
replayPrevious
"
)
;
return
waitForPaused
(
dbg
)
;
}
async
function
clickStepForward
(
dbg
)
{
await
clickReplayButton
(
dbg
"
replayNext
"
)
;
return
waitForPaused
(
dbg
)
;
}
async
function
clickStepIn
(
dbg
)
{
await
clickButton
(
dbg
"
stepIn
"
)
;
return
waitForPaused
(
dbg
)
;
}
async
function
clickStepOut
(
dbg
)
{
await
clickButton
(
dbg
"
stepOut
"
)
;
return
waitForPaused
(
dbg
)
;
}
async
function
clickResume
(
dbg
)
{
return
clickButton
(
dbg
"
resume
"
)
;
}
function
assertHistoryPosition
(
dbg
position
)
{
const
{
selectors
:
{
getHistoryPosition
getHistoryFrame
}
getState
}
=
dbg
;
ok
(
getHistoryPosition
(
getState
(
)
)
=
=
=
position
-
1
"
has
correct
position
in
history
"
)
;
}
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
debugger
.
features
.
replay
"
true
)
;
const
dbg
=
await
initDebugger
(
"
doc
-
debugger
-
statements
.
html
"
)
;
await
reload
(
dbg
)
;
await
waitForPaused
(
dbg
)
;
await
waitForLoadedSource
(
dbg
"
debugger
-
statements
.
html
"
)
;
assertPausedLocation
(
dbg
)
;
await
clickResume
(
dbg
)
;
await
waitForPaused
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
await
clickStepOver
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
await
clickStepIn
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
await
clickStepOver
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
await
clickStepOut
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
await
clickStepBack
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
assertHistoryPosition
(
dbg
4
)
;
await
clickStepBack
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
assertHistoryPosition
(
dbg
3
)
;
await
clickStepBack
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
assertHistoryPosition
(
dbg
2
)
;
await
clickStepBack
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
assertHistoryPosition
(
dbg
1
)
;
await
clickStepForward
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
assertHistoryPosition
(
dbg
2
)
;
await
clickStepForward
(
dbg
)
;
assertPausedLocation
(
dbg
)
;
assertHistoryPosition
(
dbg
3
)
;
await
clickResume
(
dbg
)
;
assertHistoryPosition
(
dbg
0
)
;
}
)
;
