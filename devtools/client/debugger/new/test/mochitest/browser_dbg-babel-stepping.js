async
function
breakpointSteps
(
dbg
fixture
{
line
column
}
steps
)
{
const
{
selectors
:
{
getBreakpoint
getBreakpoints
}
getState
}
=
dbg
;
const
filename
=
fixtures
/
{
fixture
}
/
input
.
js
;
await
waitForSources
(
dbg
filename
)
;
ok
(
true
"
Original
sources
exist
"
)
;
const
source
=
findSource
(
dbg
filename
)
;
await
selectSource
(
dbg
source
)
;
await
addBreakpoint
(
dbg
source
line
)
;
is
(
getBreakpoints
(
getState
(
)
)
.
size
1
"
One
breakpoint
exists
"
)
;
ok
(
getBreakpoint
(
getState
(
)
{
sourceId
:
source
.
id
line
column
}
)
"
Breakpoint
has
correct
line
"
)
;
const
fnName
=
fixture
.
replace
(
/
-
(
[
a
-
z
]
)
/
g
(
s
c
)
=
>
c
.
toUpperCase
(
)
)
;
const
invokeResult
=
invokeInTab
(
fnName
)
;
let
invokeFailed
=
await
Promise
.
race
(
[
waitForPaused
(
dbg
)
invokeResult
.
then
(
(
)
=
>
new
Promise
(
(
)
=
>
{
}
)
(
)
=
>
true
)
]
)
;
if
(
invokeFailed
)
{
return
invokeResult
;
}
assertPausedLocation
(
dbg
)
;
await
removeBreakpoint
(
dbg
source
.
id
line
column
)
;
is
(
getBreakpoints
(
getState
(
)
)
.
size
0
"
Breakpoint
reverted
"
)
;
await
runSteps
(
dbg
source
steps
)
;
await
resume
(
dbg
)
;
await
invokeResult
;
ok
(
true
Ran
tests
for
{
fixture
}
at
line
{
line
}
column
{
column
}
)
;
}
async
function
runSteps
(
dbg
source
steps
)
{
const
{
selectors
:
{
getVisibleSelectedFrame
}
getState
}
=
dbg
;
for
(
const
[
i
[
type
position
]
]
of
steps
.
entries
(
)
)
{
switch
(
type
)
{
case
"
stepOver
"
:
await
stepOver
(
dbg
)
;
break
;
case
"
stepIn
"
:
await
stepIn
(
dbg
)
;
break
;
default
:
throw
new
Error
(
"
Unknown
stepping
type
"
)
;
}
const
{
location
}
=
getVisibleSelectedFrame
(
getState
(
)
)
;
is
(
location
.
sourceId
source
.
id
Step
{
i
}
has
correct
sourceId
)
;
is
(
location
.
line
position
.
line
Step
{
i
}
has
correct
line
)
;
is
(
location
.
column
position
.
column
Step
{
i
}
has
correct
column
)
;
assertPausedLocation
(
dbg
)
;
}
}
add_task
(
async
function
(
)
{
requestLongerTimeout
(
4
)
;
const
dbg
=
await
initDebugger
(
"
doc
-
babel
.
html
"
)
;
await
breakpointSteps
(
dbg
"
step
-
over
-
for
-
of
"
{
line
:
4
column
:
2
}
[
[
"
stepOver
"
{
line
:
6
column
:
2
}
]
[
"
stepOver
"
{
line
:
7
column
:
4
}
]
[
"
stepOver
"
{
line
:
6
column
:
2
}
]
[
"
stepOver
"
{
line
:
7
column
:
4
}
]
[
"
stepOver
"
{
line
:
6
column
:
2
}
]
[
"
stepOver
"
{
line
:
10
column
:
2
}
]
]
)
;
await
breakpointSteps
(
dbg
"
step
-
over
-
for
-
of
-
array
"
{
line
:
3
column
:
2
}
[
[
"
stepOver
"
{
line
:
5
column
:
2
}
]
[
"
stepOver
"
{
line
:
5
column
:
7
}
]
[
"
stepOver
"
{
line
:
6
column
:
4
}
]
[
"
stepOver
"
{
line
:
5
column
:
2
}
]
[
"
stepOver
"
{
line
:
5
column
:
7
}
]
[
"
stepOver
"
{
line
:
6
column
:
4
}
]
[
"
stepOver
"
{
line
:
5
column
:
2
}
]
[
"
stepOver
"
{
line
:
9
column
:
2
}
]
]
)
;
await
breakpointSteps
(
dbg
"
step
-
over
-
for
-
of
-
closure
"
{
line
:
6
column
:
2
}
[
[
"
stepOver
"
{
line
:
8
column
:
2
}
]
[
"
stepOver
"
{
line
:
12
column
:
2
}
]
]
)
;
await
breakpointSteps
(
dbg
"
step
-
over
-
for
-
of
-
array
-
closure
"
{
line
:
3
column
:
2
}
[
[
"
stepOver
"
{
line
:
5
column
:
2
}
]
[
"
stepOver
"
{
line
:
5
column
:
7
}
]
[
"
stepOver
"
{
line
:
5
column
:
2
}
]
[
"
stepOver
"
{
line
:
5
column
:
7
}
]
[
"
stepOver
"
{
line
:
5
column
:
2
}
]
[
"
stepOver
"
{
line
:
9
column
:
2
}
]
]
)
;
await
breakpointSteps
(
dbg
"
step
-
over
-
function
-
params
"
{
line
:
6
column
:
2
}
[
[
"
stepOver
"
{
line
:
7
column
:
2
}
]
[
"
stepIn
"
{
line
:
2
column
:
2
}
]
]
)
;
await
breakpointSteps
(
dbg
"
step
-
over
-
regenerator
-
await
"
{
line
:
2
column
:
2
}
[
]
)
;
}
)
;
