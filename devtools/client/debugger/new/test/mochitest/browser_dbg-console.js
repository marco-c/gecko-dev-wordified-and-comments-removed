function
getSplitConsole
(
dbg
)
{
const
{
toolbox
win
}
=
dbg
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
toolbox
.
splitconsoleEnabled
"
)
;
}
)
;
if
(
!
win
)
{
win
=
toolbox
.
win
;
}
if
(
!
toolbox
.
splitConsole
)
{
pressKey
(
dbg
"
Escape
"
)
;
}
return
new
Promise
(
resolve
=
>
{
toolbox
.
getPanelWhenReady
(
"
webconsole
"
)
.
then
(
(
)
=
>
{
ok
(
toolbox
.
splitConsole
"
Split
console
is
shown
.
"
)
;
let
jsterm
=
toolbox
.
getPanel
(
"
webconsole
"
)
.
hud
.
jsterm
;
resolve
(
jsterm
)
;
}
)
;
}
)
;
}
add_task
(
function
*
(
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
toolbox
.
splitconsoleEnabled
"
true
)
;
const
dbg
=
yield
initDebugger
(
"
doc
-
script
-
switching
.
html
"
)
;
yield
selectSource
(
dbg
"
switching
-
01
"
)
;
yield
getSplitConsole
(
dbg
)
;
ok
(
dbg
.
toolbox
.
splitConsole
"
Split
console
is
shown
.
"
)
;
clickElement
(
dbg
"
codeMirror
"
)
;
pressKey
(
dbg
"
Escape
"
)
;
ok
(
!
dbg
.
toolbox
.
splitConsole
"
Split
console
is
hidden
.
"
)
;
}
)
;
