"
use
strict
"
;
const
{
Cc
Ci
Cu
Cr
}
=
require
(
"
chrome
"
)
;
const
promise
=
require
(
"
promise
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
function
DebuggerPanel
(
iframeWindow
toolbox
)
{
this
.
panelWin
=
iframeWindow
;
this
.
_toolbox
=
toolbox
;
this
.
_destroyer
=
null
;
this
.
_view
=
this
.
panelWin
.
DebuggerView
;
this
.
_controller
=
this
.
panelWin
.
DebuggerController
;
this
.
_view
.
_hostType
=
this
.
_toolbox
.
hostType
;
this
.
_controller
.
_target
=
this
.
target
;
this
.
_controller
.
_toolbox
=
this
.
_toolbox
;
this
.
handleHostChanged
=
this
.
handleHostChanged
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
exports
.
DebuggerPanel
=
DebuggerPanel
;
DebuggerPanel
.
prototype
=
{
open
:
function
(
)
{
let
targetPromise
;
if
(
!
this
.
target
.
isRemote
)
{
targetPromise
=
this
.
target
.
attach
(
)
;
this
.
target
.
tab
.
addEventListener
(
"
TabSelect
"
this
)
;
}
else
{
targetPromise
=
promise
.
resolve
(
this
.
target
)
;
}
return
targetPromise
.
then
(
(
)
=
>
this
.
_controller
.
startupDebugger
(
)
)
.
then
(
(
)
=
>
this
.
_controller
.
connect
(
)
)
.
then
(
(
)
=
>
{
this
.
_toolbox
.
on
(
"
host
-
changed
"
this
.
handleHostChanged
)
;
let
keysToClone
=
[
"
resumeKey
"
"
stepOverKey
"
"
stepInKey
"
"
stepOutKey
"
]
;
for
(
let
key
of
keysToClone
)
{
let
elm
=
this
.
panelWin
.
document
.
getElementById
(
key
)
;
let
keycode
=
elm
.
getAttribute
(
"
keycode
"
)
;
let
modifiers
=
elm
.
getAttribute
(
"
modifiers
"
)
;
let
command
=
elm
.
getAttribute
(
"
command
"
)
;
let
handler
=
this
.
_view
.
Toolbar
.
getCommandHandler
(
command
)
;
let
keyShortcut
=
this
.
translateToKeyShortcut
(
keycode
modifiers
)
;
this
.
_toolbox
.
useKeyWithSplitConsole
(
keyShortcut
handler
"
jsdebugger
"
)
;
}
this
.
isReady
=
true
;
this
.
emit
(
"
ready
"
)
;
return
this
;
}
)
.
catch
(
function
onError
(
aReason
)
{
DevToolsUtils
.
reportException
(
"
DebuggerPanel
.
prototype
.
open
"
aReason
)
;
}
)
;
}
translateToKeyShortcut
:
function
(
keycode
modifiers
)
{
keycode
=
keycode
.
replace
(
"
VK_
"
"
"
)
;
if
(
modifiers
.
includes
(
"
shift
"
)
)
{
keycode
=
"
Shift
+
"
+
keycode
;
}
if
(
modifiers
.
includes
(
"
alt
"
)
)
{
keycode
=
"
Alt
+
"
+
keycode
;
}
if
(
modifiers
.
includes
(
"
control
"
)
)
{
keycode
=
"
Ctrl
+
"
+
keycode
;
}
if
(
modifiers
.
includes
(
"
meta
"
)
)
{
keycode
=
"
Cmd
+
"
+
keycode
;
}
if
(
modifiers
.
includes
(
"
accel
"
)
)
{
keycode
=
"
CmdOrCtrl
+
"
+
keycode
;
}
return
keycode
;
}
get
target
(
)
{
return
this
.
_toolbox
.
target
;
}
destroy
:
function
(
)
{
if
(
this
.
_destroyer
)
{
return
this
.
_destroyer
;
}
if
(
!
this
.
target
.
isRemote
)
{
this
.
target
.
tab
.
removeEventListener
(
"
TabSelect
"
this
)
;
}
return
this
.
_destroyer
=
this
.
_controller
.
shutdownDebugger
(
)
.
then
(
(
)
=
>
{
this
.
emit
(
"
destroyed
"
)
;
}
)
;
}
getMappedExpression
(
expression
)
{
return
expression
;
}
isPaused
(
)
{
let
framesController
=
this
.
panelWin
.
DebuggerController
.
StackFrames
;
let
thread
=
framesController
.
activeThread
;
return
thread
&
&
thread
.
paused
;
}
getFrames
(
)
{
let
framesController
=
this
.
panelWin
.
DebuggerController
.
StackFrames
;
let
thread
=
framesController
.
activeThread
;
if
(
this
.
isPaused
(
)
)
{
return
{
frames
:
thread
.
cachedFrames
selected
:
framesController
.
currentFrameDepth
}
;
}
return
null
;
}
addBreakpoint
:
function
(
location
)
{
const
{
actions
}
=
this
.
panelWin
;
const
{
dispatch
}
=
this
.
_controller
;
return
dispatch
(
actions
.
addBreakpoint
(
location
)
)
;
}
removeBreakpoint
:
function
(
location
)
{
const
{
actions
}
=
this
.
panelWin
;
const
{
dispatch
}
=
this
.
_controller
;
return
dispatch
(
actions
.
removeBreakpoint
(
location
)
)
;
}
blackbox
:
function
(
source
flag
)
{
const
{
actions
}
=
this
.
panelWin
;
const
{
dispatch
}
=
this
.
_controller
;
return
dispatch
(
actions
.
blackbox
(
source
flag
)
)
;
}
handleHostChanged
:
function
(
)
{
this
.
_view
.
handleHostChanged
(
this
.
_toolbox
.
hostType
)
;
}
handleEvent
:
function
(
aEvent
)
{
if
(
aEvent
.
target
=
=
this
.
target
.
tab
&
&
this
.
_controller
.
activeThread
.
state
=
=
"
paused
"
)
{
DevToolsUtils
.
executeSoon
(
(
)
=
>
this
.
_toolbox
.
focusTool
(
"
jsdebugger
"
)
)
;
}
}
}
;
