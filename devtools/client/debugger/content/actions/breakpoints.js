"
use
strict
"
;
const
constants
=
require
(
'
.
.
/
constants
'
)
;
const
promise
=
require
(
'
promise
'
)
;
const
{
asPaused
}
=
require
(
'
.
.
/
utils
'
)
;
const
{
PROMISE
}
=
require
(
'
devtools
/
client
/
shared
/
redux
/
middleware
/
promise
'
)
;
const
{
getSource
getBreakpoint
getBreakpoints
makeLocationId
}
=
require
(
'
.
.
/
queries
'
)
;
const
BREAKPOINT_CLIENT_STORE
=
new
Map
(
)
;
function
setBreakpointClient
(
actor
client
)
{
BREAKPOINT_CLIENT_STORE
.
set
(
actor
client
)
;
}
function
getBreakpointClient
(
actor
)
{
return
BREAKPOINT_CLIENT_STORE
.
get
(
actor
)
;
}
function
enableBreakpoint
(
location
)
{
return
addBreakpoint
(
location
)
;
}
function
_breakpointExists
(
state
location
)
{
const
currentBp
=
getBreakpoint
(
state
location
)
;
return
currentBp
&
&
!
currentBp
.
disabled
;
}
function
_getOrCreateBreakpoint
(
state
location
condition
)
{
return
getBreakpoint
(
state
location
)
|
|
{
location
condition
}
;
}
function
addBreakpoint
(
location
condition
)
{
return
(
dispatch
getState
)
=
>
{
if
(
_breakpointExists
(
getState
(
)
location
)
)
{
return
;
}
const
bp
=
_getOrCreateBreakpoint
(
getState
(
)
location
condition
)
;
return
dispatch
(
{
type
:
constants
.
ADD_BREAKPOINT
breakpoint
:
bp
condition
:
condition
[
PROMISE
]
:
Task
.
spawn
(
function
*
(
)
{
const
sourceClient
=
gThreadClient
.
source
(
getSource
(
getState
(
)
bp
.
location
.
actor
)
)
;
const
[
response
bpClient
]
=
yield
sourceClient
.
setBreakpoint
(
{
line
:
bp
.
location
.
line
column
:
bp
.
location
.
column
condition
:
bp
.
condition
}
)
;
const
{
isPending
actualLocation
}
=
response
;
setBreakpointClient
(
bpClient
.
actor
bpClient
)
;
return
{
text
:
DebuggerView
.
editor
.
getText
(
(
actualLocation
?
actualLocation
.
line
:
bp
.
location
.
line
)
-
1
)
.
trim
(
)
actualLocation
:
isPending
?
null
:
actualLocation
actor
:
bpClient
.
actor
}
;
}
)
}
)
;
}
}
function
disableBreakpoint
(
location
)
{
return
_removeOrDisableBreakpoint
(
location
true
)
;
}
function
removeBreakpoint
(
location
)
{
return
_removeOrDisableBreakpoint
(
location
)
;
}
function
_removeOrDisableBreakpoint
(
location
isDisabled
)
{
return
(
dispatch
getState
)
=
>
{
let
bp
=
getBreakpoint
(
getState
(
)
location
)
;
if
(
!
bp
)
{
throw
new
Error
(
'
attempt
to
remove
breakpoint
that
does
not
exist
'
)
;
}
if
(
bp
.
loading
)
{
throw
new
Error
(
'
attempt
to
remove
unsaved
breakpoint
'
)
;
}
const
bpClient
=
getBreakpointClient
(
bp
.
actor
)
;
const
action
=
{
type
:
constants
.
REMOVE_BREAKPOINT
breakpoint
:
bp
disabled
:
isDisabled
}
;
if
(
!
bp
.
disabled
)
{
return
dispatch
(
Object
.
assign
(
{
}
action
{
[
PROMISE
]
:
bpClient
.
remove
(
)
}
)
)
;
}
else
{
return
dispatch
(
Object
.
assign
(
{
}
action
{
status
:
"
done
"
}
)
)
;
}
}
}
function
removeAllBreakpoints
(
)
{
return
(
dispatch
getState
)
=
>
{
const
breakpoints
=
getBreakpoints
(
getState
(
)
)
;
const
activeBreakpoints
=
breakpoints
.
filter
(
bp
=
>
!
bp
.
disabled
)
;
activeBreakpoints
.
forEach
(
bp
=
>
removeBreakpoint
(
bp
.
location
)
)
;
}
}
function
setBreakpointCondition
(
location
condition
)
{
return
(
dispatch
getState
)
=
>
{
const
bp
=
getBreakpoint
(
getState
(
)
location
)
;
if
(
!
bp
)
{
throw
new
Error
(
"
Breakpoint
does
not
exist
at
the
specified
location
"
)
;
}
if
(
bp
.
loading
)
{
throw
new
Error
(
"
breakpoint
must
be
saved
"
)
;
}
const
bpClient
=
getBreakpointClient
(
bp
.
actor
)
;
return
dispatch
(
{
type
:
constants
.
SET_BREAKPOINT_CONDITION
breakpoint
:
bp
condition
:
condition
[
PROMISE
]
:
Task
.
spawn
(
function
*
(
)
{
const
newClient
=
yield
bpClient
.
setCondition
(
gThreadClient
condition
)
;
setBreakpointClient
(
bpClient
.
actor
null
)
;
setBreakpointClient
(
newClient
.
actor
newClient
)
;
return
{
actor
:
newClient
.
actor
}
;
}
)
}
)
;
}
;
}
module
.
exports
=
{
enableBreakpoint
addBreakpoint
disableBreakpoint
removeBreakpoint
removeAllBreakpoints
setBreakpointCondition
}
