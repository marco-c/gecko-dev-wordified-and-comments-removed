"
use
strict
"
;
const
constants
=
require
(
"
.
.
/
constants
"
)
;
const
{
asPaused
}
=
require
(
"
.
.
/
utils
"
)
;
const
{
reportException
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
setNamedTimeout
}
=
require
(
"
devtools
/
client
/
shared
/
widgets
/
view
-
helpers
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
FETCH_EVENT_LISTENERS_DELAY
=
200
;
function
fetchEventListeners
(
)
{
return
(
dispatch
getState
)
=
>
{
setNamedTimeout
(
"
event
-
listeners
-
fetch
"
FETCH_EVENT_LISTENERS_DELAY
(
)
=
>
{
if
(
getState
(
)
.
eventListeners
.
fetchingListeners
)
{
dispatch
(
{
type
:
services
.
WAIT_UNTIL
predicate
:
action
=
>
(
action
.
type
=
=
=
constants
.
FETCH_EVENT_LISTENERS
&
&
action
.
status
=
=
=
"
done
"
)
run
:
dispatch
=
>
dispatch
(
fetchEventListeners
(
)
)
}
)
;
return
;
}
dispatch
(
{
type
:
constants
.
FETCH_EVENT_LISTENERS
status
:
"
begin
"
}
)
;
asPaused
(
gThreadClient
_getListeners
)
.
then
(
listeners
=
>
{
window
.
emit
(
EVENTS
.
EVENT_LISTENERS_FETCHED
)
;
dispatch
(
{
type
:
constants
.
FETCH_EVENT_LISTENERS
status
:
"
done
"
listeners
:
listeners
}
)
;
}
)
;
}
)
;
}
;
}
const
_getListeners
=
Task
.
async
(
function
*
(
)
{
const
response
=
yield
gThreadClient
.
eventListeners
(
)
;
response
.
listeners
.
sort
(
(
a
b
)
=
>
a
.
type
>
b
.
type
?
1
:
-
1
)
;
let
fetchedDefinitions
=
new
Map
(
)
;
let
listeners
=
[
]
;
for
(
let
listener
of
response
.
listeners
)
{
let
definitionSite
;
if
(
fetchedDefinitions
.
has
(
listener
.
function
.
actor
)
)
{
definitionSite
=
fetchedDefinitions
.
get
(
listener
.
function
.
actor
)
;
}
else
if
(
listener
.
function
.
class
=
=
"
Function
"
)
{
definitionSite
=
yield
_getDefinitionSite
(
listener
.
function
)
;
if
(
!
definitionSite
)
{
continue
;
}
fetchedDefinitions
.
set
(
listener
.
function
.
actor
definitionSite
)
;
}
listener
.
function
.
url
=
definitionSite
;
listeners
.
push
(
listener
)
;
}
fetchedDefinitions
.
clear
(
)
;
return
listeners
;
}
)
;
const
_getDefinitionSite
=
Task
.
async
(
function
*
(
aFunction
)
{
const
grip
=
gThreadClient
.
pauseGrip
(
aFunction
)
;
let
response
;
try
{
response
=
yield
grip
.
getDefinitionSite
(
)
;
}
catch
(
e
)
{
reportException
(
"
_getDefinitionSite
"
e
)
;
return
null
;
}
return
response
.
source
.
url
;
}
)
;
function
updateEventBreakpoints
(
eventNames
)
{
return
dispatch
=
>
{
setNamedTimeout
(
"
event
-
breakpoints
-
update
"
0
(
)
=
>
{
gThreadClient
.
pauseOnDOMEvents
(
eventNames
function
(
)
{
window
.
emit
(
EVENTS
.
EVENT_BREAKPOINTS_UPDATED
)
;
dispatch
(
{
type
:
constants
.
UPDATE_EVENT_BREAKPOINTS
eventNames
:
eventNames
}
)
;
}
)
;
}
)
;
}
;
}
module
.
exports
=
{
updateEventBreakpoints
fetchEventListeners
}
;
