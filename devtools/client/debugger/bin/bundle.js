const
path
=
require
(
"
path
"
)
;
const
{
rollup
}
=
require
(
"
rollup
"
)
;
const
nodeResolve
=
require
(
"
rollup
/
plugin
-
node
-
resolve
"
)
;
const
commonjs
=
require
(
"
rollup
/
plugin
-
commonjs
"
)
;
const
injectProcessEnv
=
require
(
"
rollup
-
plugin
-
inject
-
process
-
env
"
)
;
const
nodePolyfills
=
require
(
"
rollup
-
plugin
-
node
-
polyfills
"
)
;
const
projectPath
=
path
.
resolve
(
__dirname
"
.
.
"
)
;
const
bundlePath
=
path
.
join
(
projectPath
"
.
/
dist
"
)
;
process
.
env
.
NODE_ENV
=
"
production
"
;
function
getEntry
(
filename
)
{
return
path
.
join
(
__dirname
"
.
.
"
filename
)
;
}
(
async
function
bundle
(
)
{
const
rollupSucceeded
=
await
bundleRollup
(
)
;
process
.
exit
(
rollupSucceeded
?
0
:
1
)
;
}
)
(
)
;
async
function
bundleRollup
(
)
{
console
.
log
(
[
bundle
|
rollup
]
Start
bundling
)
;
let
success
=
true
;
const
entries
=
{
"
parser
-
worker
"
:
getEntry
(
"
src
/
workers
/
parser
/
worker
.
js
"
)
"
pretty
-
print
-
worker
"
:
getEntry
(
"
src
/
workers
/
pretty
-
print
/
worker
.
js
"
)
"
search
-
worker
"
:
getEntry
(
"
src
/
workers
/
search
/
worker
.
js
"
)
}
;
for
(
const
[
entryName
input
]
of
Object
.
entries
(
entries
)
)
{
let
bundle
;
try
{
bundle
=
await
rollup
(
{
input
:
{
[
entryName
]
:
input
}
plugins
:
[
commonjs
(
{
transformMixedEsModules
:
true
strictRequires
:
true
}
)
injectProcessEnv
(
{
NODE_ENV
:
"
production
"
}
)
nodeResolve
(
)
nodePolyfills
(
{
exclude
:
[
/
read
-
wasm
\
.
js
/
]
}
)
]
}
)
;
await
bundle
.
write
(
{
dir
:
bundlePath
entryFileNames
:
"
[
name
]
.
js
"
format
:
"
umd
"
}
)
;
}
catch
(
error
)
{
success
=
false
;
console
.
error
(
"
[
bundle
|
rollup
]
Something
went
wrong
.
"
error
)
;
}
if
(
bundle
)
{
await
bundle
.
close
(
)
;
}
}
console
.
log
(
[
bundle
|
rollup
]
Done
bundling
)
;
return
success
;
}
