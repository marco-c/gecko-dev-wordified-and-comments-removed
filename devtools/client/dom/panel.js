"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
loader
.
lazyRequireGetter
(
this
"
openContentLink
"
"
devtools
/
client
/
shared
/
link
"
true
)
;
function
DomPanel
(
iframeWindow
toolbox
)
{
this
.
panelWin
=
iframeWindow
;
this
.
_toolbox
=
toolbox
;
this
.
onTabNavigated
=
this
.
onTabNavigated
.
bind
(
this
)
;
this
.
onContentMessage
=
this
.
onContentMessage
.
bind
(
this
)
;
this
.
onPanelVisibilityChange
=
this
.
onPanelVisibilityChange
.
bind
(
this
)
;
this
.
pendingRequests
=
new
Map
(
)
;
EventEmitter
.
decorate
(
this
)
;
}
DomPanel
.
prototype
=
{
async
open
(
)
{
const
onGetProperties
=
new
Promise
(
resolve
=
>
{
this
.
_resolveOpen
=
resolve
;
}
)
;
this
.
initialize
(
)
;
this
.
refresh
(
)
;
await
onGetProperties
;
this
.
isReady
=
true
;
this
.
emit
(
"
ready
"
)
;
return
this
;
}
initialize
:
function
(
)
{
this
.
panelWin
.
addEventListener
(
"
devtools
/
content
/
message
"
this
.
onContentMessage
true
)
;
this
.
target
.
on
(
"
navigate
"
this
.
onTabNavigated
)
;
this
.
_toolbox
.
on
(
"
select
"
this
.
onPanelVisibilityChange
)
;
const
provider
=
{
getToolbox
:
this
.
getToolbox
.
bind
(
this
)
getPrototypeAndProperties
:
this
.
getPrototypeAndProperties
.
bind
(
this
)
openLink
:
this
.
openLink
.
bind
(
this
)
onPropertiesFetched
:
(
)
=
>
{
if
(
this
.
_resolveOpen
)
{
this
.
_resolveOpen
(
)
;
this
.
_resolveOpen
=
null
;
}
}
}
;
exportIntoContentScope
(
this
.
panelWin
provider
"
DomProvider
"
)
;
this
.
shouldRefresh
=
true
;
}
destroy
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
this
.
target
.
off
(
"
navigate
"
this
.
onTabNavigated
)
;
this
.
_toolbox
.
off
(
"
select
"
this
.
onPanelVisibilityChange
)
;
this
.
emit
(
"
destroyed
"
)
;
}
refresh
:
function
(
)
{
if
(
!
this
.
isPanelVisible
(
)
)
{
return
;
}
if
(
!
this
.
shouldRefresh
)
{
return
;
}
this
.
shouldRefresh
=
false
;
this
.
getRootGrip
(
)
.
then
(
rootGrip
=
>
{
this
.
postContentMessage
(
"
initialize
"
rootGrip
)
;
}
)
;
}
onTabNavigated
:
function
(
)
{
this
.
shouldRefresh
=
true
;
this
.
refresh
(
)
;
}
onPanelVisibilityChange
:
function
(
)
{
this
.
refresh
(
)
;
}
isPanelVisible
:
function
(
)
{
return
this
.
_toolbox
.
currentToolId
=
=
=
"
dom
"
;
}
getPrototypeAndProperties
:
async
function
(
objectFront
)
{
if
(
!
objectFront
.
actorID
)
{
console
.
error
(
"
No
actor
!
"
objectFront
)
;
throw
new
Error
(
"
Failed
to
get
object
front
.
"
)
;
}
if
(
!
this
.
target
)
{
return
null
;
}
let
request
=
this
.
pendingRequests
.
get
(
objectFront
.
actorID
)
;
if
(
!
request
)
{
request
=
objectFront
.
getPrototypeAndProperties
(
)
;
this
.
pendingRequests
.
set
(
objectFront
.
actorID
request
)
;
}
const
response
=
await
request
;
this
.
pendingRequests
.
delete
(
objectFront
.
actorID
)
;
if
(
!
this
.
pendingRequests
.
size
)
{
this
.
emit
(
"
no
-
pending
-
requests
"
)
;
}
return
response
;
}
openLink
:
function
(
url
)
{
openContentLink
(
url
)
;
}
getRootGrip
:
async
function
(
)
{
const
{
result
}
=
await
this
.
target
.
activeConsole
.
evaluateJSAsync
(
"
window
"
)
;
return
result
;
}
postContentMessage
:
function
(
type
args
)
{
const
data
=
{
type
:
type
args
:
args
}
;
const
event
=
new
this
.
panelWin
.
MessageEvent
(
"
devtools
/
chrome
/
message
"
{
bubbles
:
true
cancelable
:
true
data
:
data
}
)
;
this
.
panelWin
.
dispatchEvent
(
event
)
;
}
onContentMessage
:
function
(
event
)
{
const
data
=
event
.
data
;
const
method
=
data
.
type
;
if
(
typeof
this
[
method
]
=
=
"
function
"
)
{
this
[
method
]
(
data
.
args
)
;
}
}
getToolbox
:
function
(
)
{
return
this
.
_toolbox
;
}
get
target
(
)
{
return
this
.
_toolbox
.
target
;
}
}
;
function
exportIntoContentScope
(
win
obj
defineAs
)
{
const
clone
=
Cu
.
createObjectIn
(
win
{
defineAs
:
defineAs
}
)
;
const
props
=
Object
.
getOwnPropertyNames
(
obj
)
;
for
(
let
i
=
0
;
i
<
props
.
length
;
i
+
+
)
{
const
propName
=
props
[
i
]
;
const
propValue
=
obj
[
propName
]
;
if
(
typeof
propValue
=
=
"
function
"
)
{
Cu
.
exportFunction
(
propValue
clone
{
defineAs
:
propName
}
)
;
}
}
}
exports
.
DomPanel
=
DomPanel
;
