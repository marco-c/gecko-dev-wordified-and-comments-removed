"
use
strict
"
;
const
React
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
"
)
;
const
{
connect
}
=
require
(
"
devtools
/
client
/
shared
/
vendor
/
react
-
redux
"
)
;
const
{
createFactories
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
rep
-
utils
"
)
;
const
TreeView
=
React
.
createFactory
(
require
(
"
devtools
/
client
/
shared
/
components
/
tree
/
tree
-
view
"
)
)
;
const
{
Rep
}
=
createFactories
(
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
rep
"
)
)
;
const
{
Grip
}
=
require
(
"
devtools
/
client
/
shared
/
components
/
reps
/
grip
"
)
;
const
{
GripProvider
}
=
require
(
"
.
.
/
grip
-
provider
"
)
;
const
{
DomDecorator
}
=
require
(
"
.
.
/
dom
-
decorator
"
)
;
const
PropTypes
=
React
.
PropTypes
;
var
DomTree
=
React
.
createClass
(
{
displayName
:
"
DomTree
"
propTypes
:
{
object
:
PropTypes
.
any
filter
:
PropTypes
.
string
dispatch
:
PropTypes
.
func
.
isRequired
grips
:
PropTypes
.
object
}
onFilter
:
function
(
object
)
{
if
(
!
this
.
props
.
filter
)
{
return
true
;
}
return
(
object
.
name
&
&
object
.
name
.
indexOf
(
this
.
props
.
filter
)
>
-
1
)
;
}
render
:
function
(
)
{
let
columns
=
[
{
"
id
"
:
"
value
"
}
]
;
let
renderValue
=
props
=
>
{
return
Rep
(
Object
.
assign
(
{
}
props
{
defaultRep
:
Grip
cropLimit
:
50
}
)
)
;
}
;
return
(
TreeView
(
{
object
:
this
.
props
.
object
provider
:
new
GripProvider
(
this
.
props
.
grips
this
.
props
.
dispatch
)
decorator
:
new
DomDecorator
(
)
mode
:
"
short
"
columns
:
columns
renderValue
:
renderValue
onFilter
:
this
.
onFilter
}
)
)
;
}
}
)
;
const
mapStateToProps
=
(
state
)
=
>
{
return
{
grips
:
state
.
grips
filter
:
state
.
filter
}
;
}
;
module
.
exports
=
connect
(
mapStateToProps
)
(
DomTree
)
;
