"
use
strict
"
;
const
constants
=
require
(
"
.
.
/
constants
"
)
;
function
getInitialState
(
)
{
return
new
Map
(
)
;
}
function
grips
(
state
=
getInitialState
(
)
action
)
{
if
(
action
.
type
!
=
constants
.
FETCH_PROPERTIES
)
{
return
state
;
}
switch
(
action
.
status
)
{
case
"
start
"
:
return
onRequestProperties
(
state
action
)
;
case
"
end
"
:
return
onReceiveProperties
(
state
action
)
;
}
return
state
;
}
function
onRequestProperties
(
state
action
)
{
return
state
;
}
function
onReceiveProperties
(
cache
action
)
{
const
response
=
action
.
response
;
const
from
=
response
.
from
;
const
className
=
action
.
grip
.
class
;
mergeProperties
(
response
)
;
const
previewProps
=
response
.
preview
?
response
.
preview
.
ownProperties
:
null
;
const
ownProps
=
response
.
ownProperties
|
|
previewProps
|
|
[
]
;
const
props
=
Object
.
keys
(
ownProps
)
.
map
(
key
=
>
{
if
(
className
=
=
=
"
Array
"
&
&
isInteger
(
key
)
)
{
key
=
parseInt
(
key
10
)
;
}
return
new
Property
(
key
ownProps
[
key
]
key
)
;
}
)
;
props
.
sort
(
sortName
)
;
const
newCache
=
new
Map
(
cache
)
;
newCache
.
set
(
from
props
)
;
return
newCache
;
}
function
mergeProperties
(
response
)
{
const
{
ownProperties
}
=
response
;
const
safeGetterValues
=
response
.
safeGetterValues
|
|
{
}
;
for
(
const
name
of
Object
.
keys
(
safeGetterValues
)
)
{
if
(
name
in
ownProperties
)
{
const
{
getterValue
getterPrototypeLevel
}
=
safeGetterValues
[
name
]
;
ownProperties
[
name
]
.
getterValue
=
getterValue
;
ownProperties
[
name
]
.
getterPrototypeLevel
=
getterPrototypeLevel
;
}
else
{
ownProperties
[
name
]
=
safeGetterValues
[
name
]
;
}
}
}
function
sortName
(
a
b
)
{
if
(
!
a
.
value
.
enumerable
&
&
b
.
value
.
enumerable
)
{
return
1
;
}
if
(
a
.
value
.
enumerable
&
&
!
b
.
value
.
enumerable
)
{
return
-
1
;
}
return
a
.
name
>
b
.
name
?
1
:
-
1
;
}
function
isInteger
(
n
)
{
return
isFinite
(
n
)
&
&
parseInt
(
n
10
)
=
=
n
;
}
function
Property
(
name
value
key
)
{
this
.
name
=
name
;
this
.
value
=
value
;
this
.
key
=
key
;
}
exports
.
grips
=
grips
;
exports
.
Property
=
Property
;
