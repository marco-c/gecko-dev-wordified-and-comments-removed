"
use
strict
"
;
const
{
fetchProperties
}
=
require
(
"
devtools
/
client
/
dom
/
content
/
actions
/
grips
"
)
;
const
{
Property
}
=
require
(
"
devtools
/
client
/
dom
/
content
/
reducers
/
grips
"
)
;
function
GripProvider
(
grips
dispatch
)
{
this
.
grips
=
grips
;
this
.
dispatch
=
dispatch
;
}
GripProvider
.
prototype
=
{
getChildren
:
function
(
object
)
{
let
grip
=
object
;
if
(
object
instanceof
Property
)
{
grip
=
this
.
getValue
(
object
)
;
}
if
(
!
grip
|
|
!
grip
.
actorID
)
{
return
[
]
;
}
const
props
=
this
.
grips
.
get
(
grip
.
actorID
)
;
if
(
!
props
)
{
return
this
.
dispatch
(
fetchProperties
(
grip
)
)
;
}
return
props
;
}
hasChildren
:
function
(
object
)
{
if
(
object
instanceof
Property
)
{
const
value
=
this
.
getValue
(
object
)
;
if
(
!
value
)
{
return
false
;
}
const
grip
=
value
&
&
value
.
getGrip
?
value
.
getGrip
(
)
:
value
;
let
hasChildren
=
grip
.
ownPropertyLength
>
0
;
if
(
grip
.
preview
)
{
hasChildren
=
hasChildren
|
|
grip
.
preview
.
ownPropertiesLength
>
0
;
}
if
(
grip
.
preview
)
{
const
preview
=
grip
.
preview
;
const
k
=
preview
.
kind
;
const
objectsWithProps
=
[
"
DOMNode
"
"
ObjectWithURL
"
]
;
hasChildren
=
hasChildren
|
|
objectsWithProps
.
includes
(
k
)
;
hasChildren
=
hasChildren
|
|
(
k
=
=
"
ArrayLike
"
&
&
preview
.
length
>
0
)
;
}
return
grip
.
type
=
=
"
object
"
&
&
hasChildren
;
}
return
null
;
}
getValue
:
function
(
object
)
{
if
(
object
instanceof
Property
)
{
const
value
=
object
.
value
;
return
typeof
value
.
value
!
=
"
undefined
"
?
value
.
value
:
value
.
getterValue
;
}
return
object
;
}
getLabel
:
function
(
object
)
{
return
object
instanceof
Property
?
object
.
name
:
null
;
}
getKey
:
function
(
object
)
{
return
object
instanceof
Property
?
object
.
key
:
null
;
}
getType
:
function
(
object
)
{
const
grip
=
object
&
&
object
.
getGrip
?
object
.
getGrip
(
)
:
object
;
return
grip
.
class
?
grip
.
class
:
"
"
;
}
}
;
exports
.
GripProvider
=
GripProvider
;
