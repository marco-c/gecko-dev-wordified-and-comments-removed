"
use
strict
"
;
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
jsm
"
)
;
const
{
KeyCodes
}
=
require
(
"
devtools
/
client
/
shared
/
keycodes
"
)
;
const
EXPORTED_SYMBOLS
=
[
"
SplitView
"
]
;
var
bindings
=
new
WeakMap
(
)
;
class
SplitView
{
constructor
(
root
)
{
this
.
_root
=
root
;
this
.
_controller
=
root
.
querySelector
(
"
.
splitview
-
controller
"
)
;
this
.
_nav
=
root
.
querySelector
(
"
.
splitview
-
nav
"
)
;
this
.
_side
=
root
.
querySelector
(
"
.
splitview
-
side
-
details
"
)
;
this
.
_activeSummary
=
null
;
this
.
_filter
=
null
;
this
.
_nav
.
addEventListener
(
"
keydown
"
event
=
>
{
function
getFocusedItemWithin
(
nav
)
{
let
node
=
nav
.
ownerDocument
.
activeElement
;
while
(
node
&
&
node
.
parentNode
!
=
nav
)
{
node
=
node
.
parentNode
;
}
return
node
;
}
if
(
event
.
target
.
ownerDocument
!
=
this
.
_nav
.
ownerDocument
|
|
event
.
target
.
tagName
=
=
"
input
"
|
|
event
.
target
.
tagName
=
=
"
textarea
"
|
|
event
.
target
.
classList
.
contains
(
"
textbox
"
)
)
{
return
false
;
}
let
newFocusOrdinal
;
if
(
event
.
keyCode
=
=
KeyCodes
.
DOM_VK_PAGE_UP
|
|
event
.
keyCode
=
=
KeyCodes
.
DOM_VK_HOME
)
{
newFocusOrdinal
=
0
;
}
else
if
(
event
.
keyCode
=
=
KeyCodes
.
DOM_VK_PAGE_DOWN
|
|
event
.
keyCode
=
=
KeyCodes
.
DOM_VK_END
)
{
newFocusOrdinal
=
this
.
_nav
.
childNodes
.
length
-
1
;
}
else
if
(
event
.
keyCode
=
=
KeyCodes
.
DOM_VK_UP
)
{
newFocusOrdinal
=
getFocusedItemWithin
(
this
.
_nav
)
.
getAttribute
(
"
data
-
ordinal
"
)
;
newFocusOrdinal
-
-
;
}
else
if
(
event
.
keyCode
=
=
KeyCodes
.
DOM_VK_DOWN
)
{
newFocusOrdinal
=
getFocusedItemWithin
(
this
.
_nav
)
.
getAttribute
(
"
data
-
ordinal
"
)
;
newFocusOrdinal
+
+
;
}
if
(
newFocusOrdinal
!
=
=
undefined
)
{
event
.
stopPropagation
(
)
;
const
el
=
this
.
#
getSummaryElementByOrdinal
(
newFocusOrdinal
)
;
if
(
el
)
{
el
.
focus
(
)
;
}
return
false
;
}
return
true
;
}
)
;
}
get
rootElement
(
)
{
return
this
.
_root
;
}
get
activeSummary
(
)
{
return
this
.
_activeSummary
;
}
set
activeSummary
(
summary
)
{
if
(
summary
=
=
this
.
_activeSummary
)
{
return
;
}
if
(
this
.
_activeSummary
)
{
const
binding
=
bindings
.
get
(
this
.
_activeSummary
)
;
this
.
_activeSummary
.
classList
.
remove
(
"
splitview
-
active
"
)
;
binding
.
_details
.
classList
.
remove
(
"
splitview
-
active
"
)
;
}
if
(
!
summary
)
{
return
;
}
const
binding
=
bindings
.
get
(
summary
)
;
summary
.
classList
.
add
(
"
splitview
-
active
"
)
;
binding
.
_details
.
classList
.
add
(
"
splitview
-
active
"
)
;
this
.
_activeSummary
=
summary
;
if
(
binding
.
onShow
)
{
binding
.
onShow
(
summary
binding
.
_details
binding
.
data
)
;
}
}
#
getSummaryElementByOrdinal
(
ordinal
)
{
return
this
.
_nav
.
querySelector
(
"
*
>
li
[
data
-
ordinal
=
'
"
+
ordinal
+
"
'
]
"
)
;
}
appendItem
(
summary
details
options
)
{
const
binding
=
options
|
|
{
}
;
binding
.
_summary
=
summary
;
binding
.
_details
=
details
;
bindings
.
set
(
summary
binding
)
;
this
.
_nav
.
appendChild
(
summary
)
;
summary
.
addEventListener
(
"
click
"
event
=
>
{
event
.
stopPropagation
(
)
;
this
.
activeSummary
=
summary
;
}
)
;
this
.
_side
.
appendChild
(
details
)
;
}
appendTemplatedItem
(
name
options
)
{
options
=
options
|
|
{
}
;
let
summary
=
this
.
_root
.
querySelector
(
"
#
splitview
-
tpl
-
summary
-
"
+
name
)
;
let
details
=
this
.
_root
.
querySelector
(
"
#
splitview
-
tpl
-
details
-
"
+
name
)
;
summary
=
summary
.
cloneNode
(
true
)
;
summary
.
id
=
"
"
;
if
(
options
.
ordinal
!
=
=
undefined
)
{
summary
.
style
.
MozBoxOrdinalGroup
=
options
.
ordinal
;
summary
.
setAttribute
(
"
data
-
ordinal
"
options
.
ordinal
)
;
}
details
=
details
.
cloneNode
(
true
)
;
details
.
id
=
"
"
;
this
.
appendItem
(
summary
details
options
)
;
return
{
summary
details
}
;
}
removeItem
(
summary
)
{
if
(
summary
=
=
this
.
_activeSummary
)
{
this
.
activeSummary
=
null
;
}
const
binding
=
bindings
.
get
(
summary
)
;
summary
.
remove
(
)
;
binding
.
_details
.
remove
(
)
;
}
removeAll
(
)
{
while
(
this
.
_nav
.
hasChildNodes
(
)
)
{
this
.
removeItem
(
this
.
_nav
.
firstChild
)
;
}
}
setItemClassName
(
summary
className
)
{
const
binding
=
bindings
.
get
(
summary
)
;
let
viewSpecific
;
viewSpecific
=
summary
.
className
.
match
(
/
(
splitview
\
-
[
\
w
-
]
+
)
/
g
)
;
viewSpecific
=
viewSpecific
?
viewSpecific
.
join
(
"
"
)
:
"
"
;
summary
.
className
=
viewSpecific
+
"
"
+
className
;
viewSpecific
=
binding
.
_details
.
className
.
match
(
/
(
splitview
\
-
[
\
w
-
]
+
)
/
g
)
;
viewSpecific
=
viewSpecific
?
viewSpecific
.
join
(
"
"
)
:
"
"
;
binding
.
_details
.
className
=
viewSpecific
+
"
"
+
className
;
}
}
