"
use
strict
"
;
const
TESTCASE_URI
=
TEST_BASE_HTTP
+
"
sync
.
html
"
;
const
expectedText
=
body
{
border
-
width
:
15px
;
/
*
!
color
:
red
;
*
/
}
#
testid
{
/
*
!
font
-
size
:
4em
;
*
/
}
;
async
function
closeAndReopenToolbox
(
)
{
await
gDevTools
.
closeToolboxForTab
(
gBrowser
.
selectedTab
)
;
const
{
ui
:
newui
}
=
await
openStyleEditor
(
)
;
return
newui
;
}
async
function
waitForNextStyleSheetResourceUpdate
(
inspector
)
{
const
{
resourceCommand
}
=
inspector
.
commands
;
const
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
const
onAvailable
=
(
)
=
>
{
}
;
const
onUpdated
=
(
)
=
>
{
resourceCommand
.
unwatchResources
(
[
resourceCommand
.
TYPES
.
STYLESHEET
]
{
onAvailable
onUpdated
}
)
;
resolve
(
)
;
}
;
await
resourceCommand
.
watchResources
(
[
resourceCommand
.
TYPES
.
STYLESHEET
]
{
onAvailable
onUpdated
}
)
;
return
{
onResourceUpdated
:
promise
}
;
}
add_task
(
async
function
(
)
{
await
addTab
(
TESTCASE_URI
)
;
const
{
inspector
view
}
=
await
openRuleView
(
)
;
await
selectNode
(
"
#
testid
"
inspector
)
;
let
ruleEditor
=
getRuleViewRuleEditor
(
view
1
)
;
let
{
onResourceUpdated
}
=
await
waitForNextStyleSheetResourceUpdate
(
inspector
)
;
let
propEditor
=
ruleEditor
.
rule
.
textProps
[
0
]
.
editor
;
let
onModification
=
view
.
once
(
"
ruleview
-
changed
"
)
;
propEditor
.
enable
.
click
(
)
;
await
onModification
;
await
onResourceUpdated
;
(
{
onResourceUpdated
}
=
await
waitForNextStyleSheetResourceUpdate
(
inspector
)
)
;
ruleEditor
=
getRuleViewRuleEditor
(
view
3
)
;
propEditor
=
ruleEditor
.
rule
.
textProps
[
1
]
.
editor
;
onModification
=
view
.
once
(
"
ruleview
-
changed
"
)
;
propEditor
.
enable
.
click
(
)
;
await
onModification
;
await
onResourceUpdated
;
let
{
ui
}
=
await
openStyleEditor
(
)
;
let
editor
=
await
ui
.
editors
[
0
]
.
getSourceEditor
(
)
;
let
text
=
editor
.
sourceEditor
.
getText
(
)
;
is
(
text
expectedText
"
style
inspector
changes
are
synced
"
)
;
ui
=
await
closeAndReopenToolbox
(
)
;
editor
=
await
ui
.
editors
[
0
]
.
getSourceEditor
(
)
;
text
=
editor
.
sourceEditor
.
getText
(
)
;
is
(
text
expectedText
"
changes
remain
after
close
and
reopen
"
)
;
const
textContent
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
return
content
.
document
.
querySelector
(
"
style
"
)
.
textContent
;
}
)
;
isnot
(
textContent
expectedText
"
changes
not
written
back
to
style
node
"
)
;
}
)
;
