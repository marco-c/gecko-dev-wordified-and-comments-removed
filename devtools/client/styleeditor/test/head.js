"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
shared
/
test
/
head
.
js
"
this
)
;
const
TEST_BASE
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
styleeditor
/
test
/
"
;
const
TEST_BASE_HTTP
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
styleeditor
/
test
/
"
;
const
TEST_BASE_HTTPS
=
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
styleeditor
/
test
/
"
;
const
TEST_HOST
=
"
mochi
.
test
:
8888
"
;
var
addTab
=
function
(
url
win
)
{
info
(
"
Adding
a
new
tab
with
URL
:
'
"
+
url
+
"
'
"
)
;
return
new
Promise
(
resolve
=
>
{
let
targetWindow
=
win
|
|
window
;
let
targetBrowser
=
targetWindow
.
gBrowser
;
let
tab
=
targetBrowser
.
selectedTab
=
targetBrowser
.
addTab
(
url
)
;
BrowserTestUtils
.
browserLoaded
(
targetBrowser
.
selectedBrowser
)
.
then
(
function
(
)
{
info
(
"
URL
'
"
+
url
+
"
'
loading
complete
"
)
;
resolve
(
tab
)
;
}
)
;
}
)
;
}
;
var
navigateTo
=
function
(
url
)
{
info
(
Navigating
to
{
url
}
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
browser
.
loadURI
(
url
)
;
return
BrowserTestUtils
.
browserLoaded
(
browser
)
;
}
;
var
navigateToAndWaitForStyleSheets
=
async
function
(
url
ui
)
{
let
onReset
=
ui
.
once
(
"
stylesheets
-
reset
"
)
;
await
navigateTo
(
url
)
;
await
onReset
;
}
;
var
reloadPageAndWaitForStyleSheets
=
async
function
(
ui
)
{
info
(
"
Reloading
the
page
.
"
)
;
let
onReset
=
ui
.
once
(
"
stylesheets
-
reset
"
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
await
ContentTask
.
spawn
(
browser
null
"
(
)
=
>
content
.
location
.
reload
(
)
"
)
;
await
onReset
;
}
;
var
openStyleEditor
=
async
function
(
tab
)
{
if
(
!
tab
)
{
tab
=
gBrowser
.
selectedTab
;
}
let
target
=
TargetFactory
.
forTab
(
tab
)
;
let
toolbox
=
await
gDevTools
.
showToolbox
(
target
"
styleeditor
"
)
;
let
panel
=
toolbox
.
getPanel
(
"
styleeditor
"
)
;
let
ui
=
panel
.
UI
;
let
animations
=
ui
.
_root
.
getAnimations
(
{
subtree
:
true
}
)
;
await
Promise
.
all
(
animations
.
map
(
a
=
>
a
.
finished
)
)
;
return
{
toolbox
panel
ui
}
;
}
;
var
openStyleEditorForURL
=
async
function
(
url
win
)
{
let
tab
=
await
addTab
(
url
win
)
;
let
result
=
await
openStyleEditor
(
tab
)
;
result
.
tab
=
tab
;
return
result
;
}
;
var
getComputedStyleProperty
=
async
function
(
args
)
{
return
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
args
function
(
{
selector
pseudo
name
}
)
{
let
element
=
content
.
document
.
querySelector
(
selector
)
;
let
style
=
content
.
getComputedStyle
(
element
pseudo
)
;
return
style
.
getPropertyValue
(
name
)
;
}
)
;
}
;
