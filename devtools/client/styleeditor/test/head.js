"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
inspector
/
shared
/
test
/
head
.
js
"
this
)
;
const
TEST_BASE
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
styleeditor
/
test
/
"
;
const
TEST_BASE_HTTP
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
styleeditor
/
test
/
"
;
const
TEST_BASE_HTTPS
=
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
styleeditor
/
test
/
"
;
const
TEST_HOST
=
"
mochi
.
test
:
8888
"
;
var
addTab
=
function
(
url
win
)
{
info
(
"
Adding
a
new
tab
with
URL
:
'
"
+
url
+
"
'
"
)
;
return
new
Promise
(
resolve
=
>
{
const
targetWindow
=
win
|
|
window
;
const
targetBrowser
=
targetWindow
.
gBrowser
;
const
tab
=
(
targetBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
targetBrowser
url
)
)
;
BrowserTestUtils
.
browserLoaded
(
targetBrowser
.
selectedBrowser
)
.
then
(
function
(
)
{
info
(
"
URL
'
"
+
url
+
"
'
loading
complete
"
)
;
resolve
(
tab
)
;
}
)
;
}
)
;
}
;
var
navigateToAndWaitForStyleSheets
=
async
function
(
url
ui
editorCount
)
{
const
onClear
=
ui
.
once
(
"
stylesheets
-
clear
"
)
;
await
navigateTo
(
url
)
;
await
onClear
;
await
waitUntil
(
(
)
=
>
ui
.
editors
.
length
=
=
=
editorCount
)
;
}
;
var
reloadPageAndWaitForStyleSheets
=
async
function
(
ui
editorCount
)
{
info
(
"
Reloading
the
page
.
"
)
;
const
onClear
=
ui
.
once
(
"
stylesheets
-
clear
"
)
;
let
count
=
0
;
const
onAllEditorAdded
=
new
Promise
(
res
=
>
{
const
off
=
ui
.
on
(
"
editor
-
added
"
editor
=
>
{
count
+
+
;
info
(
Received
{
editor
.
friendlyName
}
(
{
count
}
/
{
editorCount
}
)
)
;
if
(
count
=
=
editorCount
)
{
res
(
)
;
off
(
)
;
}
}
)
;
}
)
;
await
reloadBrowser
(
)
;
await
onClear
;
await
onAllEditorAdded
;
info
(
"
All
expected
editors
added
"
)
;
}
;
var
openStyleEditor
=
async
function
(
tab
)
{
if
(
!
tab
)
{
tab
=
gBrowser
.
selectedTab
;
}
const
toolbox
=
await
gDevTools
.
showToolboxForTab
(
tab
{
toolId
:
"
styleeditor
"
}
)
;
const
panel
=
toolbox
.
getPanel
(
"
styleeditor
"
)
;
const
ui
=
panel
.
UI
;
return
{
toolbox
panel
ui
}
;
}
;
var
openStyleEditorForURL
=
async
function
(
url
win
)
{
const
tab
=
await
addTab
(
url
win
)
;
const
result
=
await
openStyleEditor
(
tab
)
;
result
.
tab
=
tab
;
return
result
;
}
;
var
getComputedStyleProperty
=
async
function
(
args
)
{
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
args
]
function
(
{
selector
pseudo
name
}
)
{
const
element
=
content
.
document
.
querySelector
(
selector
)
;
const
style
=
content
.
getComputedStyle
(
element
pseudo
)
;
return
style
.
getPropertyValue
(
name
)
;
}
)
;
}
;
function
waitForManyEvents
(
ui
delay
)
{
return
new
Promise
(
resolve
=
>
{
let
timer
;
let
count
=
0
;
const
onEvent
=
(
)
=
>
{
count
+
+
;
clearTimeout
(
timer
)
;
timer
=
setTimeout
(
(
)
=
>
{
ui
.
off
(
"
media
-
list
-
changed
"
onEvent
)
;
resolve
(
count
)
;
}
delay
)
;
}
;
ui
.
on
(
"
media
-
list
-
changed
"
onEvent
)
;
}
)
;
}
function
createNewStyleSheet
(
ui
panelWindow
)
{
info
(
"
Creating
a
new
stylesheet
now
"
)
;
return
new
Promise
(
resolve
=
>
{
ui
.
once
(
"
editor
-
added
"
editor
=
>
{
editor
.
getSourceEditor
(
)
.
then
(
resolve
)
;
}
)
;
waitForFocus
(
function
(
)
{
const
newButton
=
panelWindow
.
document
.
querySelector
(
"
.
style
-
editor
-
newButton
"
)
;
ok
(
newButton
"
'
new
'
button
exists
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
newButton
{
}
panelWindow
)
;
}
panelWindow
)
;
}
)
;
}
