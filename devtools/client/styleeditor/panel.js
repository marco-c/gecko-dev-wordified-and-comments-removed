"
use
strict
"
;
var
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
var
{
StyleEditorUI
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
client
/
styleeditor
/
StyleEditorUI
.
sys
.
mjs
"
)
;
var
{
getString
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
client
/
styleeditor
/
StyleEditorUtil
.
sys
.
mjs
"
)
;
var
StyleEditorPanel
=
function
StyleEditorPanel
(
panelWin
toolbox
commands
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_toolbox
=
toolbox
;
this
.
_commands
=
commands
;
this
.
_panelWin
=
panelWin
;
this
.
_panelDoc
=
panelWin
.
document
;
this
.
_showError
=
this
.
_showError
.
bind
(
this
)
;
}
;
exports
.
StyleEditorPanel
=
StyleEditorPanel
;
StyleEditorPanel
.
prototype
=
{
get
panelWindow
(
)
{
return
this
.
_panelWin
;
}
async
open
(
options
)
{
const
{
cssProperties
}
=
await
this
.
_toolbox
.
target
.
getFront
(
"
cssProperties
"
)
;
this
.
UI
=
new
StyleEditorUI
(
this
.
_toolbox
this
.
_commands
this
.
_panelDoc
cssProperties
)
;
this
.
UI
.
on
(
"
error
"
this
.
_showError
)
;
await
this
.
UI
.
initialize
(
options
)
;
return
this
;
}
_showError
(
data
)
{
if
(
!
this
.
_toolbox
)
{
return
;
}
let
errorMessage
=
getString
(
data
.
key
)
;
if
(
data
.
append
)
{
errorMessage
+
=
"
"
+
data
.
append
;
}
const
notificationBox
=
this
.
_toolbox
.
getNotificationBox
(
)
;
const
notification
=
notificationBox
.
getNotificationWithValue
(
"
styleeditor
-
error
"
)
;
let
level
=
notificationBox
.
PRIORITY_CRITICAL_LOW
;
if
(
data
.
level
=
=
=
"
info
"
)
{
level
=
notificationBox
.
PRIORITY_INFO_LOW
;
}
else
if
(
data
.
level
=
=
=
"
warning
"
)
{
level
=
notificationBox
.
PRIORITY_WARNING_LOW
;
}
if
(
!
notification
)
{
notificationBox
.
appendNotification
(
errorMessage
"
styleeditor
-
error
"
"
"
level
)
;
}
}
selectStyleSheet
(
stylesheet
line
col
)
{
if
(
!
this
.
UI
)
{
return
null
;
}
return
this
.
UI
.
selectStyleSheet
(
stylesheet
line
-
1
col
?
col
-
1
:
0
)
;
}
selectOriginalSheet
(
originalId
line
col
)
{
if
(
!
this
.
UI
)
{
return
null
;
}
const
originalSheet
=
this
.
UI
.
getOriginalSourceSheet
(
originalId
)
;
return
this
.
UI
.
selectStyleSheet
(
originalSheet
line
-
1
col
?
col
-
1
:
0
)
;
}
getStylesheetResourceForGeneratedURL
(
url
)
{
if
(
!
this
.
UI
)
{
return
null
;
}
return
this
.
UI
.
getStylesheetResourceForGeneratedURL
(
url
)
;
}
destroy
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
this
.
_toolbox
=
null
;
this
.
_panelWin
=
null
;
this
.
_panelDoc
=
null
;
this
.
UI
.
destroy
(
)
;
this
.
UI
=
null
;
}
}
;
ChromeUtils
.
defineLazyGetter
(
StyleEditorPanel
.
prototype
"
strings
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
devtools
/
locale
/
styleeditor
.
properties
"
)
;
}
)
;
