"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
StyleSheetEditor
"
]
;
const
{
require
loader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
jsm
"
)
;
const
Editor
=
require
(
"
devtools
/
client
/
shared
/
sourceeditor
/
editor
"
)
;
const
{
shortSource
prettifyCSS
}
=
require
(
"
devtools
/
shared
/
inspector
/
css
-
logic
"
)
;
const
{
throttle
}
=
require
(
"
devtools
/
shared
/
throttle
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
lazy
=
{
}
;
loader
.
lazyGetter
(
lazy
"
BufferStream
"
(
)
=
>
{
const
{
CC
}
=
require
(
"
chrome
"
)
;
return
CC
(
"
mozilla
.
org
/
io
/
arraybuffer
-
input
-
stream
;
1
"
"
nsIArrayBufferInputStream
"
"
setData
"
)
;
}
)
;
loader
.
lazyRequireGetter
(
lazy
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
true
)
;
loader
.
lazyRequireGetter
(
lazy
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
true
)
;
const
{
getString
showFilePicker
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
styleeditor
/
StyleEditorUtil
.
jsm
"
)
;
const
LOAD_ERROR
=
"
error
-
load
"
;
const
SAVE_ERROR
=
"
error
-
save
"
;
const
SELECTOR_HIGHLIGHTER_TYPE
=
"
SelectorHighlighter
"
;
const
UPDATE_STYLESHEET_DELAY
=
500
;
const
AUTOCOMPLETION_PREF
=
"
devtools
.
styleeditor
.
autocompletion
-
enabled
"
;
const
TRANSITION_PREF
=
"
devtools
.
styleeditor
.
transitions
"
;
const
CHECK_LINKED_SHEET_DELAY
=
500
;
const
MAX_CHECK_COUNT
=
10
;
const
SELECTOR_HIGHLIGHT_TIMEOUT
=
500
;
const
EMIT_MEDIA_RULES_THROTTLING
=
500
;
const
STYLE_SHEET_UPDATE_CAUSED_BY_STYLE_EDITOR
=
"
styleeditor
"
;
function
StyleSheetEditor
(
resource
win
styleSheetFriendlyIndex
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_resource
=
resource
;
this
.
_inputElement
=
null
;
this
.
sourceEditor
=
null
;
this
.
_window
=
win
;
this
.
_isNew
=
this
.
styleSheet
.
isNew
;
this
.
styleSheetFriendlyIndex
=
styleSheetFriendlyIndex
;
this
.
_justSetText
=
false
;
this
.
_state
=
{
text
:
"
"
selection
:
{
start
:
{
line
:
0
ch
:
0
}
end
:
{
line
:
0
ch
:
0
}
}
}
;
this
.
_styleSheetFilePath
=
null
;
if
(
this
.
styleSheet
.
href
&
&
Services
.
io
.
extractScheme
(
this
.
styleSheet
.
href
)
=
=
"
file
"
)
{
this
.
_styleSheetFilePath
=
this
.
styleSheet
.
href
;
}
this
.
onPropertyChange
=
this
.
onPropertyChange
.
bind
(
this
)
;
this
.
onMediaRulesChanged
=
this
.
onMediaRulesChanged
.
bind
(
this
)
;
this
.
checkLinkedFileForChanges
=
this
.
checkLinkedFileForChanges
.
bind
(
this
)
;
this
.
markLinkedFileBroken
=
this
.
markLinkedFileBroken
.
bind
(
this
)
;
this
.
saveToFile
=
this
.
saveToFile
.
bind
(
this
)
;
this
.
updateStyleSheet
=
this
.
updateStyleSheet
.
bind
(
this
)
;
this
.
_updateStyleSheet
=
this
.
_updateStyleSheet
.
bind
(
this
)
;
this
.
_onMouseMove
=
this
.
_onMouseMove
.
bind
(
this
)
;
this
.
_focusOnSourceEditorReady
=
false
;
this
.
savedFile
=
this
.
styleSheet
.
file
;
this
.
linkCSSFile
(
)
;
this
.
emitMediaRulesChanged
=
throttle
(
this
.
emitMediaRulesChanged
EMIT_MEDIA_RULES_THROTTLING
this
)
;
this
.
mediaRules
=
[
]
;
}
StyleSheetEditor
.
prototype
=
{
get
resourceId
(
)
{
return
this
.
_resource
.
resourceId
;
}
get
styleSheet
(
)
{
return
this
.
_resource
;
}
get
unsaved
(
)
{
return
this
.
sourceEditor
&
&
!
this
.
sourceEditor
.
isClean
(
)
;
}
get
isNew
(
)
{
return
this
.
_isNew
;
}
get
cssSheet
(
)
{
if
(
this
.
styleSheet
.
isOriginalSource
)
{
return
this
.
styleSheet
.
relatedStyleSheet
;
}
return
this
.
styleSheet
;
}
get
savedFile
(
)
{
return
this
.
_savedFile
;
}
set
savedFile
(
name
)
{
this
.
_savedFile
=
name
;
this
.
linkCSSFile
(
)
;
}
get
friendlyName
(
)
{
if
(
this
.
savedFile
)
{
return
this
.
savedFile
.
leafName
;
}
if
(
this
.
_isNew
)
{
const
index
=
this
.
styleSheetFriendlyIndex
+
1
|
|
0
;
return
getString
(
"
newStyleSheet
"
index
)
;
}
if
(
!
this
.
styleSheet
.
href
)
{
const
index
=
this
.
styleSheetFriendlyIndex
+
1
|
|
0
;
return
getString
(
"
inlineStyleSheet
"
index
)
;
}
if
(
!
this
.
_friendlyName
)
{
this
.
_friendlyName
=
shortSource
(
this
.
styleSheet
)
;
try
{
this
.
_friendlyName
=
decodeURI
(
this
.
_friendlyName
)
;
}
catch
(
ex
)
{
}
}
return
this
.
_friendlyName
;
}
get
transitionsEnabled
(
)
{
return
Services
.
prefs
.
getBoolPref
(
TRANSITION_PREF
)
;
}
linkCSSFile
(
)
{
if
(
!
this
.
styleSheet
.
isOriginalSource
)
{
return
;
}
const
relatedSheet
=
this
.
styleSheet
.
relatedStyleSheet
;
if
(
!
relatedSheet
|
|
!
relatedSheet
.
href
)
{
return
;
}
let
path
;
const
href
=
removeQuery
(
relatedSheet
.
href
)
;
const
uri
=
lazy
.
NetUtil
.
newURI
(
href
)
;
if
(
uri
.
scheme
=
=
"
file
"
)
{
const
file
=
uri
.
QueryInterface
(
Ci
.
nsIFileURL
)
.
file
;
path
=
file
.
path
;
}
else
if
(
this
.
savedFile
)
{
const
origHref
=
removeQuery
(
this
.
styleSheet
.
href
)
;
const
origUri
=
lazy
.
NetUtil
.
newURI
(
origHref
)
;
path
=
findLinkedFilePath
(
uri
origUri
this
.
savedFile
)
;
}
else
{
return
;
}
if
(
this
.
linkedCSSFile
=
=
path
)
{
return
;
}
this
.
linkedCSSFile
=
path
;
this
.
linkedCSSFileError
=
null
;
IOUtils
.
stat
(
path
)
.
then
(
info
=
>
{
this
.
_fileModDate
=
info
.
lastModified
;
}
this
.
markLinkedFileBroken
)
;
this
.
emit
(
"
linked
-
css
-
file
"
)
;
}
async
_fetchSourceText
(
options
=
{
}
)
{
const
styleSheetsFront
=
await
this
.
_getStyleSheetsFront
(
)
;
let
longStr
=
null
;
if
(
this
.
styleSheet
.
isOriginalSource
)
{
longStr
=
await
this
.
styleSheet
.
getText
(
)
;
}
else
{
longStr
=
await
styleSheetsFront
.
getText
(
this
.
resourceId
)
;
}
this
.
_state
.
text
=
await
longStr
.
string
(
)
;
}
_prettifySourceTextIfNeeded
(
)
{
if
(
!
this
.
styleSheet
.
isOriginalSource
)
{
const
ruleCount
=
this
.
styleSheet
.
ruleCount
;
const
{
result
mappings
}
=
prettifyCSS
(
this
.
_state
.
text
ruleCount
)
;
this
.
_mappings
=
mappings
;
this
.
_state
.
text
=
result
;
}
}
async
fetchSource
(
)
{
try
{
await
this
.
_fetchSourceText
(
)
;
this
.
sourceLoaded
=
true
;
}
catch
(
e
)
{
if
(
this
.
_isDestroyed
)
{
console
.
warn
(
Could
not
fetch
the
source
for
{
this
.
styleSheet
.
href
}
the
editor
was
destroyed
)
;
console
.
error
(
e
)
;
}
else
{
console
.
error
(
e
)
;
this
.
emit
(
"
error
"
{
key
:
LOAD_ERROR
append
:
this
.
styleSheet
.
href
level
:
"
warning
"
}
)
;
throw
e
;
}
}
}
setCursor
(
line
column
)
{
line
=
line
|
|
0
;
column
=
column
|
|
0
;
const
position
=
this
.
translateCursorPosition
(
line
column
)
;
this
.
sourceEditor
.
setCursor
(
{
line
:
position
.
line
ch
:
position
.
column
}
)
;
}
translateCursorPosition
(
line
column
)
{
if
(
Array
.
isArray
(
this
.
_mappings
)
)
{
for
(
const
mapping
of
this
.
_mappings
)
{
if
(
mapping
.
original
.
line
=
=
=
line
&
&
mapping
.
original
.
column
=
=
=
column
)
{
line
=
mapping
.
generated
.
line
;
column
=
mapping
.
generated
.
column
;
continue
;
}
}
}
return
{
line
column
}
;
}
onPropertyChange
(
property
value
)
{
this
.
emit
(
"
property
-
change
"
property
value
)
;
}
async
onStyleApplied
(
update
)
{
const
updateIsFromSyleSheetEditor
=
update
?
.
event
?
.
cause
=
=
=
STYLE_SHEET_UPDATE_CAUSED_BY_STYLE_EDITOR
;
if
(
updateIsFromSyleSheetEditor
)
{
this
.
emit
(
"
style
-
applied
"
)
;
return
;
}
if
(
this
.
sourceEditor
)
{
await
this
.
_fetchSourceText
(
)
;
this
.
_prettifySourceTextIfNeeded
(
)
;
const
sourceText
=
this
.
_state
.
text
;
this
.
_justSetText
=
true
;
const
firstLine
=
this
.
sourceEditor
.
getFirstVisibleLine
(
)
;
const
pos
=
this
.
sourceEditor
.
getCursor
(
)
;
this
.
sourceEditor
.
setText
(
sourceText
)
;
this
.
sourceEditor
.
setFirstVisibleLine
(
firstLine
)
;
this
.
sourceEditor
.
setCursor
(
pos
)
;
this
.
emit
(
"
style
-
applied
"
)
;
}
}
onMediaRulesChanged
(
rules
)
{
if
(
!
rules
.
length
&
&
!
this
.
mediaRules
.
length
)
{
return
;
}
this
.
mediaRules
=
rules
;
this
.
emitMediaRulesChanged
(
)
;
}
emitMediaRulesChanged
(
)
{
this
.
emit
(
"
media
-
rules
-
changed
"
this
.
mediaRules
)
;
}
async
load
(
inputElement
cssProperties
)
{
if
(
this
.
_isDestroyed
)
{
throw
new
Error
(
"
Won
'
t
load
source
editor
as
the
style
sheet
has
"
+
"
already
been
removed
from
Style
Editor
.
"
)
;
}
this
.
_inputElement
=
inputElement
;
this
.
_prettifySourceTextIfNeeded
(
)
;
const
walker
=
await
this
.
getWalker
(
)
;
const
config
=
{
value
:
this
.
_state
.
text
lineNumbers
:
true
mode
:
Editor
.
modes
.
css
readOnly
:
false
autoCloseBrackets
:
"
{
}
(
)
"
extraKeys
:
this
.
_getKeyBindings
(
)
contextMenu
:
"
sourceEditorContextMenu
"
autocomplete
:
Services
.
prefs
.
getBoolPref
(
AUTOCOMPLETION_PREF
)
autocompleteOpts
:
{
walker
cssProperties
}
cssProperties
}
;
const
sourceEditor
=
(
this
.
_sourceEditor
=
new
Editor
(
config
)
)
;
sourceEditor
.
on
(
"
dirty
-
change
"
this
.
onPropertyChange
)
;
await
sourceEditor
.
appendTo
(
inputElement
)
;
sourceEditor
.
on
(
"
saveRequested
"
this
.
saveToFile
)
;
if
(
!
this
.
styleSheet
.
isOriginalSource
)
{
sourceEditor
.
on
(
"
change
"
this
.
updateStyleSheet
)
;
}
this
.
sourceEditor
=
sourceEditor
;
if
(
this
.
_focusOnSourceEditorReady
)
{
this
.
_focusOnSourceEditorReady
=
false
;
sourceEditor
.
focus
(
)
;
}
sourceEditor
.
setSelection
(
this
.
_state
.
selection
.
start
this
.
_state
.
selection
.
end
)
;
const
highlighter
=
await
this
.
getHighlighter
(
)
;
if
(
highlighter
&
&
walker
&
&
sourceEditor
.
container
?
.
contentWindow
)
{
sourceEditor
.
container
.
contentWindow
.
addEventListener
(
"
mousemove
"
this
.
_onMouseMove
)
;
}
sourceEditor
.
insertCommandsController
(
)
;
this
.
emit
(
"
source
-
editor
-
load
"
)
;
}
getSourceEditor
(
)
{
const
self
=
this
;
if
(
this
.
sourceEditor
)
{
return
Promise
.
resolve
(
this
)
;
}
return
new
Promise
(
resolve
=
>
{
this
.
on
(
"
source
-
editor
-
load
"
(
)
=
>
{
resolve
(
self
)
;
}
)
;
}
)
;
}
focus
(
)
{
if
(
this
.
sourceEditor
)
{
this
.
sourceEditor
.
focus
(
)
;
}
else
{
this
.
_focusOnSourceEditorReady
=
true
;
}
}
onShow
(
options
=
{
}
)
{
if
(
this
.
sourceEditor
)
{
this
.
sourceEditor
.
refresh
(
)
;
}
if
(
options
.
reason
!
=
=
"
filter
-
auto
"
)
{
this
.
focus
(
)
;
}
}
async
toggleDisabled
(
)
{
const
styleSheetsFront
=
await
this
.
_getStyleSheetsFront
(
)
;
styleSheetsFront
.
toggleDisabled
(
this
.
resourceId
)
.
catch
(
console
.
error
)
;
}
updateStyleSheet
(
)
{
if
(
this
.
_updateTask
)
{
this
.
_window
.
clearTimeout
(
this
.
_updateTask
)
;
}
this
.
_updateTask
=
this
.
_window
.
setTimeout
(
this
.
_updateStyleSheet
UPDATE_STYLESHEET_DELAY
)
;
}
async
_updateStyleSheet
(
)
{
if
(
this
.
styleSheet
.
disabled
)
{
return
;
}
if
(
this
.
_justSetText
)
{
this
.
_justSetText
=
false
;
return
;
}
this
.
_updateTask
=
null
;
if
(
this
.
sourceEditor
)
{
this
.
_state
.
text
=
this
.
sourceEditor
.
getText
(
)
;
}
try
{
const
styleSheetsFront
=
await
this
.
_getStyleSheetsFront
(
)
;
await
styleSheetsFront
.
update
(
this
.
resourceId
this
.
_state
.
text
this
.
transitionsEnabled
STYLE_SHEET_UPDATE_CAUSED_BY_STYLE_EDITOR
)
;
this
.
_mappings
=
null
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
_onMouseMove
(
e
)
{
if
(
this
.
highlighter
)
{
this
.
highlighter
.
hide
(
)
;
}
if
(
this
.
mouseMoveTimeout
)
{
this
.
_window
.
clearTimeout
(
this
.
mouseMoveTimeout
)
;
this
.
mouseMoveTimeout
=
null
;
}
this
.
mouseMoveTimeout
=
this
.
_window
.
setTimeout
(
(
)
=
>
{
this
.
_highlightSelectorAt
(
e
.
clientX
e
.
clientY
)
;
}
SELECTOR_HIGHLIGHT_TIMEOUT
)
;
}
async
_highlightSelectorAt
(
x
y
)
{
const
pos
=
this
.
sourceEditor
.
getPositionFromCoords
(
{
left
:
x
top
:
y
}
)
;
const
info
=
this
.
sourceEditor
.
getInfoAt
(
pos
)
;
if
(
!
info
|
|
info
.
state
!
=
=
"
selector
"
)
{
return
;
}
const
onGetHighlighter
=
this
.
getHighlighter
(
)
;
const
walker
=
await
this
.
getWalker
(
)
;
const
node
=
await
walker
.
getStyleSheetOwnerNode
(
this
.
resourceId
)
;
const
highlighter
=
await
onGetHighlighter
;
await
highlighter
.
show
(
node
{
selector
:
info
.
selector
hideInfoBar
:
true
showOnly
:
"
border
"
region
:
"
border
"
}
)
;
this
.
emit
(
"
node
-
highlighted
"
)
;
}
async
getWalker
(
)
{
if
(
this
.
walker
)
{
return
this
.
walker
;
}
const
{
targetFront
}
=
this
.
_resource
;
const
inspectorFront
=
await
targetFront
.
getFront
(
"
inspector
"
)
;
this
.
walker
=
inspectorFront
.
walker
;
return
this
.
walker
;
}
async
getHighlighter
(
)
{
if
(
this
.
highlighter
)
{
return
this
.
highlighter
;
}
const
walker
=
await
this
.
getWalker
(
)
;
try
{
this
.
highlighter
=
await
walker
.
parentFront
.
getHighlighterByType
(
SELECTOR_HIGHLIGHTER_TYPE
)
;
return
this
.
highlighter
;
}
catch
(
e
)
{
console
.
warn
(
"
The
selectorHighlighter
couldn
'
t
be
instantiated
"
+
"
elements
matching
hovered
selectors
will
not
be
highlighted
"
)
;
}
return
null
;
}
saveToFile
(
file
callback
)
{
const
onFile
=
returnFile
=
>
{
if
(
!
returnFile
)
{
if
(
callback
)
{
callback
(
null
)
;
}
return
;
}
if
(
this
.
sourceEditor
)
{
this
.
_state
.
text
=
this
.
sourceEditor
.
getText
(
)
;
}
const
ostream
=
lazy
.
FileUtils
.
openSafeFileOutputStream
(
returnFile
)
;
const
buffer
=
new
TextEncoder
(
)
.
encode
(
this
.
_state
.
text
)
.
buffer
;
const
istream
=
new
lazy
.
BufferStream
(
buffer
0
buffer
.
byteLength
)
;
lazy
.
NetUtil
.
asyncCopy
(
istream
ostream
status
=
>
{
if
(
!
Components
.
isSuccessCode
(
status
)
)
{
if
(
callback
)
{
callback
(
null
)
;
}
this
.
emit
(
"
error
"
{
key
:
SAVE_ERROR
}
)
;
return
;
}
lazy
.
FileUtils
.
closeSafeFileOutputStream
(
ostream
)
;
this
.
onFileSaved
(
returnFile
)
;
if
(
callback
)
{
callback
(
returnFile
)
;
}
}
)
;
}
;
let
defaultName
;
if
(
this
.
_friendlyName
)
{
defaultName
=
PathUtils
.
isAbsolute
(
this
.
_friendlyName
)
?
PathUtils
.
filename
(
this
.
_friendlyName
)
:
this
.
_friendlyName
;
}
showFilePicker
(
file
|
|
this
.
_styleSheetFilePath
true
this
.
_window
onFile
defaultName
)
;
}
onFileSaved
(
returnFile
)
{
this
.
_friendlyName
=
null
;
this
.
savedFile
=
returnFile
;
if
(
this
.
sourceEditor
)
{
this
.
sourceEditor
.
setClean
(
)
;
}
this
.
emit
(
"
property
-
change
"
)
;
this
.
_modCheckCount
=
0
;
this
.
_window
.
clearTimeout
(
this
.
_timeout
)
;
if
(
this
.
linkedCSSFile
&
&
!
this
.
linkedCSSFileError
)
{
this
.
_timeout
=
this
.
_window
.
setTimeout
(
this
.
checkLinkedFileForChanges
CHECK_LINKED_SHEET_DELAY
)
;
}
}
checkLinkedFileForChanges
(
)
{
IOUtils
.
stat
(
this
.
linkedCSSFile
)
.
then
(
info
=
>
{
const
lastChange
=
info
.
lastModified
;
if
(
this
.
_fileModDate
&
&
lastChange
!
=
this
.
_fileModDate
)
{
this
.
_fileModDate
=
lastChange
;
this
.
_modCheckCount
=
0
;
this
.
updateLinkedStyleSheet
(
)
;
return
;
}
if
(
+
+
this
.
_modCheckCount
>
MAX_CHECK_COUNT
)
{
this
.
updateLinkedStyleSheet
(
)
;
return
;
}
this
.
_timeout
=
this
.
_window
.
setTimeout
(
this
.
checkLinkedFileForChanges
CHECK_LINKED_SHEET_DELAY
)
;
}
this
.
markLinkedFileBroken
)
;
}
markLinkedFileBroken
(
error
)
{
this
.
linkedCSSFileError
=
error
|
|
true
;
this
.
emit
(
"
linked
-
css
-
file
-
error
"
)
;
error
+
=
"
querying
"
+
this
.
linkedCSSFile
+
"
original
source
location
:
"
+
this
.
savedFile
.
path
;
console
.
error
(
error
)
;
}
updateLinkedStyleSheet
(
)
{
IOUtils
.
read
(
this
.
linkedCSSFile
)
.
then
(
async
array
=
>
{
const
decoder
=
new
TextDecoder
(
)
;
const
text
=
decoder
.
decode
(
array
)
;
const
styleSheetsFront
=
await
this
.
_getStyleSheetsFront
(
)
;
await
styleSheetsFront
.
update
(
this
.
resourceId
text
this
.
transitionsEnabled
STYLE_SHEET_UPDATE_CAUSED_BY_STYLE_EDITOR
)
;
}
this
.
markLinkedFileBroken
)
;
}
_getKeyBindings
(
)
{
const
saveStyleSheetKeybind
=
Editor
.
accel
(
getString
(
"
saveStyleSheet
.
commandkey
"
)
)
;
const
focusFilterInputKeybind
=
Editor
.
accel
(
getString
(
"
focusFilterInput
.
commandkey
"
)
)
;
return
{
Esc
:
false
[
saveStyleSheetKeybind
]
:
(
)
=
>
{
this
.
saveToFile
(
this
.
savedFile
)
;
}
[
"
Shift
-
"
+
saveStyleSheetKeybind
]
:
(
)
=
>
{
this
.
saveToFile
(
)
;
}
[
focusFilterInputKeybind
]
:
(
)
=
>
{
this
.
emit
(
"
filter
-
input
-
keyboard
-
shortcut
"
)
;
}
}
;
}
_getStyleSheetsFront
(
)
{
return
this
.
_resource
.
targetFront
.
getFront
(
"
stylesheets
"
)
;
}
destroy
(
)
{
if
(
this
.
_sourceEditor
)
{
this
.
_sourceEditor
.
off
(
"
dirty
-
change
"
this
.
onPropertyChange
)
;
this
.
_sourceEditor
.
off
(
"
saveRequested
"
this
.
saveToFile
)
;
this
.
_sourceEditor
.
off
(
"
change
"
this
.
updateStyleSheet
)
;
if
(
this
.
_sourceEditor
.
container
?
.
contentWindow
)
{
this
.
_sourceEditor
.
container
.
contentWindow
.
removeEventListener
(
"
mousemove
"
this
.
_onMouseMove
)
;
}
this
.
_sourceEditor
.
destroy
(
)
;
}
this
.
_isDestroyed
=
true
;
}
}
;
function
findLinkedFilePath
(
uri
origUri
file
)
{
const
{
origBranch
branch
}
=
findUnsharedBranches
(
origUri
uri
)
;
const
project
=
findProjectPath
(
file
origBranch
)
;
const
parts
=
project
.
concat
(
branch
)
;
const
path
=
PathUtils
.
join
.
apply
(
this
parts
)
;
return
path
;
}
function
findProjectPath
(
file
branch
)
{
const
path
=
PathUtils
.
split
(
file
.
path
)
;
for
(
let
i
=
2
;
i
<
=
branch
.
length
;
i
+
+
)
{
if
(
path
[
path
.
length
-
i
]
!
=
branch
[
branch
.
length
-
i
]
)
{
return
path
.
slice
(
0
path
.
length
-
i
+
1
)
;
}
}
return
path
.
slice
(
0
path
.
length
-
branch
.
length
)
;
}
function
findUnsharedBranches
(
origUri
uri
)
{
origUri
=
PathUtils
.
split
(
origUri
.
pathQueryRef
)
;
uri
=
PathUtils
.
split
(
uri
.
pathQueryRef
)
;
for
(
let
i
=
0
;
i
<
uri
.
length
-
1
;
i
+
+
)
{
if
(
uri
[
i
]
!
=
origUri
[
i
]
)
{
return
{
branch
:
uri
.
slice
(
i
)
origBranch
:
origUri
.
slice
(
i
)
}
;
}
}
return
{
branch
:
uri
origBranch
:
origUri
}
;
}
function
removeQuery
(
href
)
{
return
href
.
replace
(
/
\
?
.
*
/
"
"
)
;
}
