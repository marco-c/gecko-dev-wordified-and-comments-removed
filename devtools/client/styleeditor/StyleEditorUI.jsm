"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
StyleEditorUI
"
]
;
const
{
loader
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
jsm
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
getString
text
showFilePicker
optionsPopupMenu
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
styleeditor
/
StyleEditorUtil
.
jsm
"
)
;
const
{
StyleSheetEditor
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
styleeditor
/
StyleSheetEditor
.
jsm
"
)
;
const
{
PluralForm
}
=
require
(
"
devtools
/
shared
/
plural
-
form
"
)
;
const
{
PrefObserver
}
=
require
(
"
devtools
/
client
/
shared
/
prefs
"
)
;
const
KeyShortcuts
=
require
(
"
devtools
/
client
/
shared
/
key
-
shortcuts
"
)
;
const
lazy
=
{
}
;
loader
.
lazyRequireGetter
(
lazy
"
KeyCodes
"
"
devtools
/
client
/
shared
/
keycodes
"
true
)
;
loader
.
lazyRequireGetter
(
lazy
"
OriginalSource
"
"
devtools
/
client
/
styleeditor
/
original
-
source
"
true
)
;
loader
.
lazyRequireGetter
(
lazy
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
true
)
;
loader
.
lazyRequireGetter
(
lazy
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
true
)
;
loader
.
lazyRequireGetter
(
lazy
"
ResponsiveUIManager
"
"
devtools
/
client
/
responsive
/
manager
"
)
;
loader
.
lazyRequireGetter
(
lazy
"
openContentLink
"
"
devtools
/
client
/
shared
/
link
"
true
)
;
loader
.
lazyRequireGetter
(
lazy
"
copyString
"
"
devtools
/
shared
/
platform
/
clipboard
"
true
)
;
const
LOAD_ERROR
=
"
error
-
load
"
;
const
PREF_MEDIA_SIDEBAR
=
"
devtools
.
styleeditor
.
showMediaSidebar
"
;
const
PREF_SIDEBAR_WIDTH
=
"
devtools
.
styleeditor
.
mediaSidebarWidth
"
;
const
PREF_NAV_WIDTH
=
"
devtools
.
styleeditor
.
navSidebarWidth
"
;
const
PREF_ORIG_SOURCES
=
"
devtools
.
source
-
map
.
client
-
service
.
enabled
"
;
const
FILTERED_CLASSNAME
=
"
splitview
-
filtered
"
;
const
ALL_FILTERED_CLASSNAME
=
"
splitview
-
all
-
filtered
"
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
class
StyleEditorUI
extends
EventEmitter
{
#
activeSummary
=
null
;
#
commands
;
#
contextMenu
;
#
contextMenuStyleSheet
;
#
copyUrlItem
;
#
cssProperties
;
#
filter
;
#
filterInput
;
#
filterInputClearButton
;
#
loadingStyleSheets
;
#
nav
;
#
openLinkNewTabItem
;
#
optionsButton
;
#
optionsMenu
;
#
panelDoc
;
#
prefObserver
;
#
root
;
#
seenSheets
=
new
Map
(
)
;
#
shortcuts
;
#
side
;
#
sourceMapPrefObserver
;
#
styleSheetBoundToSelect
;
#
styleSheetToSelect
;
#
summaryDataMap
=
new
WeakMap
(
)
;
#
toolbox
;
#
tplDetails
;
#
tplSummary
;
#
uiAbortController
=
new
AbortController
(
)
;
#
window
;
constructor
(
toolbox
commands
panelDoc
cssProperties
)
{
super
(
)
;
this
.
#
toolbox
=
toolbox
;
this
.
#
commands
=
commands
;
this
.
#
panelDoc
=
panelDoc
;
this
.
#
cssProperties
=
cssProperties
;
this
.
#
window
=
this
.
#
panelDoc
.
defaultView
;
this
.
#
root
=
this
.
#
panelDoc
.
getElementById
(
"
style
-
editor
-
chrome
"
)
;
this
.
editors
=
[
]
;
this
.
selectedEditor
=
null
;
this
.
savedLocations
=
{
}
;
this
.
#
prefObserver
=
new
PrefObserver
(
"
devtools
.
styleeditor
.
"
)
;
this
.
#
prefObserver
.
on
(
PREF_MEDIA_SIDEBAR
this
.
#
onMediaPrefChanged
)
;
this
.
#
sourceMapPrefObserver
=
new
PrefObserver
(
"
devtools
.
source
-
map
.
client
-
service
.
"
)
;
this
.
#
sourceMapPrefObserver
.
on
(
PREF_ORIG_SOURCES
this
.
#
onOrigSourcesPrefChanged
)
;
}
get
cssProperties
(
)
{
return
this
.
#
cssProperties
;
}
get
currentTarget
(
)
{
return
this
.
#
commands
.
targetCommand
.
targetFront
;
}
get
selectedStyleSheetIndex
(
)
{
return
this
.
selectedEditor
?
this
.
selectedEditor
.
styleSheet
.
styleSheetIndex
:
-
1
;
}
async
initialize
(
options
=
{
}
)
{
this
.
createUI
(
)
;
if
(
options
.
stylesheetToSelect
)
{
const
{
stylesheet
line
column
}
=
options
.
stylesheetToSelect
;
if
(
stylesheet
.
resourceId
)
{
try
{
await
this
.
#
handleStyleSheetResource
(
stylesheet
)
;
await
this
.
selectStyleSheet
(
stylesheet
line
-
1
column
?
column
-
1
:
0
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
}
await
this
.
#
toolbox
.
resourceCommand
.
watchResources
(
[
this
.
#
toolbox
.
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
]
{
onAvailable
:
this
.
#
onResourceAvailable
}
)
;
await
this
.
#
commands
.
targetCommand
.
watchTargets
(
{
types
:
[
this
.
#
commands
.
targetCommand
.
TYPES
.
FRAME
]
onAvailable
:
this
.
#
onTargetAvailable
onDestroyed
:
this
.
#
onTargetDestroyed
}
)
;
this
.
#
startLoadingStyleSheets
(
)
;
await
this
.
#
toolbox
.
resourceCommand
.
watchResources
(
[
this
.
#
toolbox
.
resourceCommand
.
TYPES
.
STYLESHEET
]
{
onAvailable
:
this
.
#
onResourceAvailable
onUpdated
:
this
.
#
onResourceUpdated
}
)
;
await
this
.
#
waitForLoadingStyleSheets
(
)
;
}
createUI
(
)
{
this
.
#
filterInput
=
this
.
#
root
.
querySelector
(
"
.
devtools
-
filterinput
"
)
;
this
.
#
filterInputClearButton
=
this
.
#
root
.
querySelector
(
"
.
devtools
-
searchinput
-
clear
"
)
;
this
.
#
nav
=
this
.
#
root
.
querySelector
(
"
.
splitview
-
nav
"
)
;
this
.
#
side
=
this
.
#
root
.
querySelector
(
"
.
splitview
-
side
-
details
"
)
;
this
.
#
tplSummary
=
this
.
#
root
.
querySelector
(
"
#
splitview
-
tpl
-
summary
-
stylesheet
"
)
;
this
.
#
tplDetails
=
this
.
#
root
.
querySelector
(
"
#
splitview
-
tpl
-
details
-
stylesheet
"
)
;
const
eventListenersConfig
=
{
signal
:
this
.
#
uiAbortController
.
signal
}
;
this
.
#
root
.
querySelector
(
"
.
style
-
editor
-
newButton
"
)
.
addEventListener
(
"
click
"
async
(
)
=
>
{
const
stylesheetsFront
=
await
this
.
currentTarget
.
getFront
(
"
stylesheets
"
)
;
stylesheetsFront
.
addStyleSheet
(
null
)
;
this
.
#
clearFilterInput
(
)
;
}
eventListenersConfig
)
;
this
.
#
root
.
querySelector
(
"
.
style
-
editor
-
importButton
"
)
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
#
importFromFile
(
this
.
_mockImportFile
|
|
null
this
.
#
window
)
;
this
.
#
clearFilterInput
(
)
;
}
eventListenersConfig
)
;
this
.
#
root
.
querySelector
(
"
#
style
-
editor
-
options
"
)
.
addEventListener
(
"
click
"
this
.
#
onOptionsButtonClick
eventListenersConfig
)
;
this
.
#
filterInput
.
addEventListener
(
"
input
"
this
.
#
onFilterInputChange
eventListenersConfig
)
;
this
.
#
filterInputClearButton
.
addEventListener
(
"
click
"
(
)
=
>
this
.
#
clearFilterInput
(
)
eventListenersConfig
)
;
this
.
#
panelDoc
.
addEventListener
(
"
contextmenu
"
(
)
=
>
{
this
.
#
contextMenuStyleSheet
=
null
;
}
{
.
.
.
eventListenersConfig
capture
:
true
}
)
;
this
.
#
optionsButton
=
this
.
#
panelDoc
.
getElementById
(
"
style
-
editor
-
options
"
)
;
this
.
#
contextMenu
=
this
.
#
panelDoc
.
getElementById
(
"
sidebar
-
context
"
)
;
this
.
#
contextMenu
.
addEventListener
(
"
popupshowing
"
this
.
#
updateContextMenuItems
eventListenersConfig
)
;
this
.
#
openLinkNewTabItem
=
this
.
#
panelDoc
.
getElementById
(
"
context
-
openlinknewtab
"
)
;
this
.
#
openLinkNewTabItem
.
addEventListener
(
"
command
"
this
.
#
openLinkNewTab
eventListenersConfig
)
;
this
.
#
copyUrlItem
=
this
.
#
panelDoc
.
getElementById
(
"
context
-
copyurl
"
)
;
this
.
#
copyUrlItem
.
addEventListener
(
"
command
"
this
.
#
copyUrl
eventListenersConfig
)
;
this
.
#
nav
.
addEventListener
(
"
keydown
"
this
.
#
onNavKeyDown
eventListenersConfig
)
;
this
.
#
shortcuts
=
new
KeyShortcuts
(
{
window
:
this
.
#
window
}
)
;
this
.
#
shortcuts
.
on
(
CmdOrCtrl
+
{
getString
(
"
focusFilterInput
.
commandkey
"
)
}
this
.
#
onFocusFilterInputKeyboardShortcut
)
;
const
nav
=
this
.
#
panelDoc
.
querySelector
(
"
.
splitview
-
controller
"
)
;
nav
.
setAttribute
(
"
width
"
Services
.
prefs
.
getIntPref
(
PREF_NAV_WIDTH
)
)
;
}
#
clearFilterInput
(
)
{
this
.
#
filterInput
.
value
=
"
"
;
this
.
#
onFilterInputChange
(
)
;
}
#
onFilterInputChange
=
(
)
=
>
{
this
.
#
filter
=
this
.
#
filterInput
.
value
;
this
.
#
filterInputClearButton
.
toggleAttribute
(
"
hidden
"
!
this
.
#
filter
)
;
for
(
const
summary
of
this
.
#
nav
.
childNodes
)
{
this
.
handleSummaryVisibility
(
summary
{
triggerOnFilterStateChange
:
false
}
)
;
}
this
.
#
onFilterStateChange
(
)
;
if
(
this
.
#
activeSummary
=
=
null
)
{
const
firstVisibleSummary
=
Array
.
from
(
this
.
#
nav
.
childNodes
)
.
find
(
node
=
>
!
node
.
classList
.
contains
(
FILTERED_CLASSNAME
)
)
;
if
(
firstVisibleSummary
)
{
this
.
setActiveSummary
(
firstVisibleSummary
{
reason
:
"
filter
-
auto
"
}
)
;
}
}
}
;
#
onFilterStateChange
(
)
{
const
summaries
=
Array
.
from
(
this
.
#
nav
.
childNodes
)
;
const
hasVisibleSummary
=
summaries
.
some
(
node
=
>
!
node
.
classList
.
contains
(
FILTERED_CLASSNAME
)
)
;
const
allFiltered
=
summaries
.
length
>
0
&
&
!
hasVisibleSummary
;
this
.
#
nav
.
classList
.
toggle
(
ALL_FILTERED_CLASSNAME
allFiltered
)
;
this
.
#
filterInput
.
closest
(
"
.
devtools
-
searchbox
"
)
.
classList
.
toggle
(
"
devtools
-
searchbox
-
no
-
match
"
!
!
allFiltered
)
;
}
#
onFocusFilterInputKeyboardShortcut
=
e
=
>
{
if
(
e
)
{
e
.
stopPropagation
(
)
;
e
.
preventDefault
(
)
;
}
this
.
#
filterInput
.
select
(
)
;
}
;
#
onNavKeyDown
=
event
=
>
{
function
getFocusedItemWithin
(
nav
)
{
let
node
=
nav
.
ownerDocument
.
activeElement
;
while
(
node
&
&
node
.
parentNode
!
=
nav
)
{
node
=
node
.
parentNode
;
}
return
node
;
}
if
(
event
.
target
.
ownerDocument
!
=
this
.
#
nav
.
ownerDocument
|
|
event
.
target
.
tagName
=
=
"
input
"
|
|
event
.
target
.
tagName
=
=
"
textarea
"
|
|
event
.
target
.
classList
.
contains
(
"
textbox
"
)
)
{
return
false
;
}
const
visibleElements
=
Array
.
from
(
this
.
#
nav
.
querySelectorAll
(
li
:
not
(
.
{
FILTERED_CLASSNAME
}
)
)
)
;
visibleElements
.
sort
(
(
a
b
)
=
>
a
.
getAttribute
(
"
data
-
ordinal
"
)
-
b
.
getAttribute
(
"
data
-
ordinal
"
)
)
;
let
elementToFocus
;
if
(
event
.
keyCode
=
=
lazy
.
KeyCodes
.
DOM_VK_PAGE_UP
|
|
event
.
keyCode
=
=
lazy
.
KeyCodes
.
DOM_VK_HOME
)
{
elementToFocus
=
visibleElements
[
0
]
;
}
else
if
(
event
.
keyCode
=
=
lazy
.
KeyCodes
.
DOM_VK_PAGE_DOWN
|
|
event
.
keyCode
=
=
lazy
.
KeyCodes
.
DOM_VK_END
)
{
elementToFocus
=
visibleElements
.
at
(
-
1
)
;
}
else
if
(
event
.
keyCode
=
=
lazy
.
KeyCodes
.
DOM_VK_UP
)
{
const
focusedIndex
=
visibleElements
.
indexOf
(
getFocusedItemWithin
(
this
.
#
nav
)
)
;
elementToFocus
=
visibleElements
[
focusedIndex
-
1
]
;
}
else
if
(
event
.
keyCode
=
=
lazy
.
KeyCodes
.
DOM_VK_DOWN
)
{
const
focusedIndex
=
visibleElements
.
indexOf
(
getFocusedItemWithin
(
this
.
#
nav
)
)
;
elementToFocus
=
visibleElements
[
focusedIndex
+
1
]
;
}
if
(
elementToFocus
!
=
=
undefined
)
{
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
elementToFocus
.
focus
(
)
;
return
false
;
}
return
true
;
}
;
#
onOptionsButtonClick
=
(
{
screenX
screenY
}
)
=
>
{
this
.
#
optionsMenu
=
optionsPopupMenu
(
this
.
#
toggleOrigSources
this
.
#
toggleMediaSidebar
)
;
this
.
#
optionsMenu
.
once
(
"
open
"
(
)
=
>
{
this
.
#
optionsButton
.
setAttribute
(
"
open
"
true
)
;
}
)
;
this
.
#
optionsMenu
.
once
(
"
close
"
(
)
=
>
{
this
.
#
optionsButton
.
removeAttribute
(
"
open
"
)
;
}
)
;
this
.
#
optionsMenu
.
popup
(
screenX
screenY
this
.
#
toolbox
.
doc
)
;
}
;
#
onOrigSourcesPrefChanged
=
async
(
)
=
>
{
this
.
#
clear
(
)
;
this
.
#
root
.
classList
.
add
(
"
loading
"
)
;
for
(
const
resource
of
this
.
#
toolbox
.
resourceCommand
.
getAllResources
(
this
.
#
toolbox
.
resourceCommand
.
TYPES
.
STYLESHEET
)
)
{
await
this
.
#
handleStyleSheetResource
(
resource
)
;
}
this
.
#
root
.
classList
.
remove
(
"
loading
"
)
;
this
.
emit
(
"
stylesheets
-
refreshed
"
)
;
}
;
#
clear
=
(
)
=
>
{
if
(
this
.
selectedEditor
&
&
this
.
selectedEditor
.
sourceEditor
)
{
const
href
=
this
.
selectedEditor
.
styleSheet
.
href
;
const
{
line
ch
}
=
this
.
selectedEditor
.
sourceEditor
.
getCursor
(
)
;
this
.
#
styleSheetToSelect
=
{
stylesheet
:
href
line
:
line
col
:
ch
}
;
}
for
(
const
editor
of
this
.
editors
)
{
if
(
editor
.
savedFile
)
{
const
identifier
=
this
.
getStyleSheetIdentifier
(
editor
.
styleSheet
)
;
this
.
savedLocations
[
identifier
]
=
editor
.
savedFile
;
}
}
this
.
#
clearStyleSheetEditors
(
)
;
while
(
this
.
#
nav
.
hasChildNodes
(
)
)
{
this
.
removeSplitViewItem
(
this
.
#
nav
.
firstChild
)
;
}
this
.
selectedEditor
=
null
;
this
.
#
seenSheets
=
new
Map
(
)
;
this
.
emit
(
"
stylesheets
-
clear
"
)
;
}
;
#
addStyleSheet
(
resource
)
{
if
(
!
this
.
#
seenSheets
.
has
(
resource
)
)
{
const
promise
=
(
async
(
)
=
>
{
let
editor
=
await
this
.
#
addStyleSheetEditor
(
resource
)
;
const
sourceMapService
=
this
.
#
toolbox
.
sourceMapService
;
if
(
!
sourceMapService
|
|
!
Services
.
prefs
.
getBoolPref
(
PREF_ORIG_SOURCES
)
)
{
return
editor
;
}
const
{
href
nodeHref
resourceId
:
id
sourceMapURL
sourceMapBaseURL
}
=
resource
;
const
sources
=
await
sourceMapService
.
getOriginalURLs
(
{
id
url
:
href
|
|
nodeHref
sourceMapBaseURL
sourceMapURL
}
)
;
if
(
sources
&
&
sources
.
length
)
{
const
parentEditorName
=
editor
.
friendlyName
;
this
.
#
removeStyleSheetEditor
(
editor
)
;
editor
=
null
;
for
(
const
{
id
:
originalId
url
:
originalURL
}
of
sources
)
{
const
original
=
new
lazy
.
OriginalSource
(
originalURL
originalId
sourceMapService
)
;
original
.
styleSheetIndex
=
resource
.
styleSheetIndex
;
original
.
relatedStyleSheet
=
resource
;
original
.
relatedEditorName
=
parentEditorName
;
original
.
resourceId
=
resource
.
resourceId
;
original
.
targetFront
=
resource
.
targetFront
;
original
.
mediaRules
=
resource
.
mediaRules
;
await
this
.
#
addStyleSheetEditor
(
original
)
;
}
}
return
editor
;
}
)
(
)
;
this
.
#
seenSheets
.
set
(
resource
promise
)
;
}
return
this
.
#
seenSheets
.
get
(
resource
)
;
}
#
removeStyleSheet
(
resource
editor
)
{
this
.
#
seenSheets
.
delete
(
resource
)
;
this
.
#
removeStyleSheetEditor
(
editor
)
;
}
#
getInlineStyleSheetsCount
(
)
{
return
this
.
editors
.
filter
(
editor
=
>
!
editor
.
styleSheet
.
href
)
.
length
;
}
#
getNewStyleSheetsCount
(
)
{
return
this
.
editors
.
filter
(
editor
=
>
editor
.
isNew
)
.
length
;
}
#
getNextFriendlyIndex
(
styleSheet
)
{
if
(
styleSheet
.
href
)
{
return
undefined
;
}
return
styleSheet
.
isNew
?
this
.
#
getNewStyleSheetsCount
(
)
:
this
.
#
getInlineStyleSheetsCount
(
)
;
}
async
#
addStyleSheetEditor
(
resource
)
{
const
editor
=
new
StyleSheetEditor
(
resource
this
.
#
window
this
.
#
getNextFriendlyIndex
(
resource
)
)
;
editor
.
on
(
"
property
-
change
"
this
.
#
summaryChange
.
bind
(
this
editor
)
)
;
editor
.
on
(
"
media
-
rules
-
changed
"
this
.
#
updateMediaList
.
bind
(
this
editor
)
)
;
editor
.
on
(
"
linked
-
css
-
file
"
this
.
#
summaryChange
.
bind
(
this
editor
)
)
;
editor
.
on
(
"
linked
-
css
-
file
-
error
"
this
.
#
summaryChange
.
bind
(
this
editor
)
)
;
editor
.
on
(
"
error
"
this
.
#
onError
)
;
editor
.
on
(
"
filter
-
input
-
keyboard
-
shortcut
"
this
.
#
onFocusFilterInputKeyboardShortcut
)
;
editor
.
onMediaRulesChanged
(
resource
.
mediaRules
)
;
this
.
editors
.
push
(
editor
)
;
try
{
await
editor
.
fetchSource
(
)
;
}
catch
(
e
)
{
if
(
!
this
.
editors
.
includes
(
editor
)
)
{
return
null
;
}
throw
e
;
}
this
.
#
sourceLoaded
(
editor
)
;
if
(
resource
.
fileName
)
{
this
.
emit
(
"
test
:
editor
-
updated
"
editor
)
;
}
return
editor
;
}
#
importFromFile
(
file
parentWindow
)
{
const
onFileSelected
=
selectedFile
=
>
{
if
(
!
selectedFile
)
{
return
;
}
lazy
.
NetUtil
.
asyncFetch
(
{
uri
:
lazy
.
NetUtil
.
newURI
(
selectedFile
)
loadingNode
:
this
.
#
window
.
document
securityFlags
:
Ci
.
nsILoadInfo
.
SEC_ALLOW_CROSS_ORIGIN_INHERITS_SEC_CONTEXT
contentPolicyType
:
Ci
.
nsIContentPolicy
.
TYPE_OTHER
}
async
(
stream
status
)
=
>
{
if
(
!
Components
.
isSuccessCode
(
status
)
)
{
this
.
emit
(
"
error
"
{
key
:
LOAD_ERROR
level
:
"
warning
"
}
)
;
return
;
}
const
source
=
lazy
.
NetUtil
.
readInputStreamToString
(
stream
stream
.
available
(
)
)
;
stream
.
close
(
)
;
const
stylesheetsFront
=
await
this
.
currentTarget
.
getFront
(
"
stylesheets
"
)
;
stylesheetsFront
.
addStyleSheet
(
source
selectedFile
.
path
)
;
}
)
;
}
;
showFilePicker
(
file
false
parentWindow
onFileSelected
)
;
}
#
onError
=
data
=
>
{
this
.
emit
(
"
error
"
data
)
;
}
;
#
toggleOrigSources
(
)
{
const
isEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_ORIG_SOURCES
)
;
Services
.
prefs
.
setBoolPref
(
PREF_ORIG_SOURCES
!
isEnabled
)
;
}
#
toggleMediaSidebar
(
)
{
const
isEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_MEDIA_SIDEBAR
)
;
Services
.
prefs
.
setBoolPref
(
PREF_MEDIA_SIDEBAR
!
isEnabled
)
;
}
#
onMediaPrefChanged
=
(
)
=
>
{
this
.
editors
.
forEach
(
this
.
#
updateMediaList
)
;
}
;
#
updateContextMenuItems
=
async
(
)
=
>
{
this
.
#
openLinkNewTabItem
.
hidden
=
!
this
.
#
contextMenuStyleSheet
;
this
.
#
copyUrlItem
.
hidden
=
!
this
.
#
contextMenuStyleSheet
;
if
(
this
.
#
contextMenuStyleSheet
)
{
this
.
#
openLinkNewTabItem
.
setAttribute
(
"
disabled
"
!
this
.
#
contextMenuStyleSheet
.
href
)
;
this
.
#
copyUrlItem
.
setAttribute
(
"
disabled
"
!
this
.
#
contextMenuStyleSheet
.
href
)
;
}
}
;
#
openLinkNewTab
=
(
)
=
>
{
if
(
this
.
#
contextMenuStyleSheet
)
{
lazy
.
openContentLink
(
this
.
#
contextMenuStyleSheet
.
href
)
;
}
}
;
#
copyUrl
=
(
)
=
>
{
if
(
this
.
#
contextMenuStyleSheet
)
{
lazy
.
copyString
(
this
.
#
contextMenuStyleSheet
.
href
)
;
}
}
;
#
removeStyleSheetEditor
(
editor
)
{
if
(
editor
.
summary
)
{
this
.
removeSplitViewItem
(
editor
.
summary
)
;
}
else
{
const
self
=
this
;
this
.
on
(
"
editor
-
added
"
function
onAdd
(
added
)
{
if
(
editor
=
=
added
)
{
self
.
off
(
"
editor
-
added
"
onAdd
)
;
self
.
removeSplitViewItem
(
editor
.
summary
)
;
}
}
)
;
}
editor
.
destroy
(
)
;
this
.
editors
.
splice
(
this
.
editors
.
indexOf
(
editor
)
1
)
;
}
#
clearStyleSheetEditors
(
)
{
for
(
const
editor
of
this
.
editors
)
{
editor
.
destroy
(
)
;
}
this
.
editors
=
[
]
;
}
#
sourceLoaded
(
editor
)
{
const
details
=
this
.
#
tplDetails
.
cloneNode
(
true
)
;
details
.
id
=
"
"
;
const
summary
=
this
.
#
tplSummary
.
cloneNode
(
true
)
;
summary
.
id
=
"
"
;
let
ordinal
=
editor
.
styleSheet
.
styleSheetIndex
;
ordinal
=
ordinal
=
=
-
1
?
Number
.
MAX_SAFE_INTEGER
:
ordinal
;
summary
.
style
.
MozBoxOrdinalGroup
=
ordinal
;
summary
.
setAttribute
(
"
data
-
ordinal
"
ordinal
)
;
this
.
#
nav
.
appendChild
(
summary
)
;
this
.
#
side
.
appendChild
(
details
)
;
this
.
#
summaryDataMap
.
set
(
summary
{
details
editor
}
)
;
const
createdEditor
=
editor
;
createdEditor
.
summary
=
summary
;
createdEditor
.
details
=
details
;
const
eventListenersConfig
=
{
signal
:
this
.
#
uiAbortController
.
signal
}
;
summary
.
addEventListener
(
"
click
"
event
=
>
{
event
.
stopPropagation
(
)
;
this
.
setActiveSummary
(
summary
)
;
}
eventListenersConfig
)
;
summary
.
querySelector
(
"
.
stylesheet
-
enabled
"
)
.
addEventListener
(
"
click
"
event
=
>
{
event
.
stopPropagation
(
)
;
event
.
target
.
blur
(
)
;
createdEditor
.
toggleDisabled
(
)
;
}
eventListenersConfig
)
;
summary
.
querySelector
(
"
.
stylesheet
-
name
"
)
.
addEventListener
(
"
keypress
"
event
=
>
{
if
(
event
.
keyCode
=
=
lazy
.
KeyCodes
.
DOM_VK_RETURN
)
{
this
.
setActiveSummary
(
summary
)
;
}
}
eventListenersConfig
)
;
summary
.
querySelector
(
"
.
stylesheet
-
saveButton
"
)
.
addEventListener
(
"
click
"
event
=
>
{
event
.
stopPropagation
(
)
;
event
.
target
.
blur
(
)
;
createdEditor
.
saveToFile
(
createdEditor
.
savedFile
)
;
}
eventListenersConfig
)
;
this
.
#
updateSummaryForEditor
(
createdEditor
summary
)
;
summary
.
addEventListener
(
"
contextmenu
"
(
)
=
>
{
this
.
#
contextMenuStyleSheet
=
createdEditor
.
styleSheet
;
}
eventListenersConfig
)
;
summary
.
addEventListener
(
"
focus
"
function
onSummaryFocus
(
event
)
{
if
(
event
.
target
=
=
summary
)
{
summary
.
querySelector
(
"
.
stylesheet
-
name
"
)
.
focus
(
)
;
}
}
eventListenersConfig
)
;
const
sidebar
=
details
.
querySelector
(
"
.
stylesheet
-
sidebar
"
)
;
sidebar
.
setAttribute
(
"
width
"
Services
.
prefs
.
getIntPref
(
PREF_SIDEBAR_WIDTH
)
)
;
const
splitter
=
details
.
querySelector
(
"
.
devtools
-
side
-
splitter
"
)
;
splitter
.
addEventListener
(
"
mousemove
"
(
)
=
>
{
const
sidebarWidth
=
sidebar
.
getAttribute
(
"
width
"
)
;
Services
.
prefs
.
setIntPref
(
PREF_SIDEBAR_WIDTH
sidebarWidth
)
;
const
sidebars
=
[
.
.
.
this
.
#
panelDoc
.
querySelectorAll
(
"
.
stylesheet
-
sidebar
"
)
]
;
for
(
const
mediaSidebar
of
sidebars
)
{
mediaSidebar
.
setAttribute
(
"
width
"
sidebarWidth
)
;
}
}
eventListenersConfig
)
;
if
(
createdEditor
.
isNew
)
{
this
.
#
selectEditor
(
createdEditor
)
;
}
if
(
this
.
#
isEditorToSelect
(
createdEditor
)
)
{
this
.
switchToSelectedSheet
(
)
;
}
if
(
!
this
.
selectedEditor
&
&
!
this
.
#
styleSheetBoundToSelect
&
&
createdEditor
.
styleSheet
.
styleSheetIndex
=
=
0
&
&
!
summary
.
classList
.
contains
(
FILTERED_CLASSNAME
)
)
{
this
.
#
selectEditor
(
createdEditor
)
;
}
this
.
emit
(
"
editor
-
added
"
createdEditor
)
;
}
switchToSelectedSheet
(
)
{
const
toSelect
=
this
.
#
styleSheetToSelect
;
for
(
const
editor
of
this
.
editors
)
{
if
(
this
.
#
isEditorToSelect
(
editor
)
)
{
this
.
#
styleSheetBoundToSelect
=
this
.
#
styleSheetToSelect
;
this
.
#
styleSheetToSelect
=
null
;
return
this
.
#
selectEditor
(
editor
toSelect
.
line
toSelect
.
col
)
;
}
}
return
Promise
.
resolve
(
)
;
}
#
isEditorToSelect
(
editor
)
{
const
toSelect
=
this
.
#
styleSheetToSelect
;
if
(
!
toSelect
)
{
return
false
;
}
const
isHref
=
toSelect
.
stylesheet
=
=
=
null
|
|
typeof
toSelect
.
stylesheet
=
=
"
string
"
;
return
(
(
isHref
&
&
editor
.
styleSheet
.
href
=
=
toSelect
.
stylesheet
)
|
|
toSelect
.
stylesheet
=
=
editor
.
styleSheet
)
;
}
#
selectEditor
(
editor
line
=
null
col
=
null
)
{
if
(
!
this
.
editors
.
includes
(
editor
)
)
{
return
null
;
}
const
editorPromise
=
editor
.
getSourceEditor
(
)
.
then
(
(
)
=
>
{
if
(
line
!
=
=
null
|
|
col
!
=
=
null
)
{
editor
.
setCursor
(
line
col
)
;
}
this
.
#
styleSheetBoundToSelect
=
null
;
}
)
;
const
summaryPromise
=
this
.
getEditorSummary
(
editor
)
.
then
(
summary
=
>
{
if
(
!
this
.
editors
.
includes
(
editor
)
)
{
throw
new
Error
(
"
Editor
was
destroyed
"
)
;
}
this
.
setActiveSummary
(
summary
)
;
}
)
;
return
Promise
.
all
(
[
editorPromise
summaryPromise
]
)
;
}
getEditorSummary
(
editor
)
{
const
self
=
this
;
if
(
editor
.
summary
)
{
return
Promise
.
resolve
(
editor
.
summary
)
;
}
return
new
Promise
(
resolve
=
>
{
this
.
on
(
"
editor
-
added
"
function
onAdd
(
selected
)
{
if
(
selected
=
=
editor
)
{
self
.
off
(
"
editor
-
added
"
onAdd
)
;
resolve
(
editor
.
summary
)
;
}
}
)
;
}
)
;
}
getEditorDetails
(
editor
)
{
const
self
=
this
;
if
(
editor
.
details
)
{
return
Promise
.
resolve
(
editor
.
details
)
;
}
return
new
Promise
(
resolve
=
>
{
this
.
on
(
"
editor
-
added
"
function
onAdd
(
selected
)
{
if
(
selected
=
=
editor
)
{
self
.
off
(
"
editor
-
added
"
onAdd
)
;
resolve
(
editor
.
details
)
;
}
}
)
;
}
)
;
}
getStyleSheetIdentifier
(
styleSheet
)
{
return
styleSheet
.
href
?
styleSheet
.
href
:
"
inline
-
"
+
styleSheet
.
styleSheetIndex
+
"
-
at
-
"
+
styleSheet
.
nodeHref
;
}
getOriginalSourceSheet
(
sourceId
)
{
for
(
const
editor
of
this
.
editors
)
{
const
{
styleSheet
}
=
editor
;
if
(
styleSheet
.
isOriginalSource
&
&
styleSheet
.
sourceId
=
=
=
sourceId
)
{
return
styleSheet
;
}
}
return
null
;
}
getStylesheetFrontForGeneratedURL
(
url
)
{
for
(
const
styleSheet
of
this
.
#
seenSheets
.
keys
(
)
)
{
const
sheetURL
=
styleSheet
.
href
|
|
styleSheet
.
nodeHref
;
if
(
!
styleSheet
.
isOriginalSource
&
&
sheetURL
=
=
=
url
)
{
return
styleSheet
;
}
}
return
null
;
}
selectStyleSheet
(
stylesheet
line
col
)
{
this
.
#
styleSheetToSelect
=
{
stylesheet
:
stylesheet
line
:
line
col
:
col
}
;
return
this
.
switchToSelectedSheet
(
)
;
}
#
summaryChange
(
editor
)
{
this
.
#
updateSummaryForEditor
(
editor
)
;
}
#
updateSummaryForEditor
(
editor
summary
)
{
summary
=
summary
|
|
editor
.
summary
;
if
(
!
summary
)
{
return
;
}
let
ruleCount
=
editor
.
styleSheet
.
ruleCount
;
if
(
editor
.
styleSheet
.
relatedStyleSheet
)
{
ruleCount
=
editor
.
styleSheet
.
relatedStyleSheet
.
ruleCount
;
}
if
(
ruleCount
=
=
=
undefined
)
{
ruleCount
=
"
-
"
;
}
summary
.
classList
.
toggle
(
"
disabled
"
!
!
editor
.
styleSheet
.
disabled
)
;
summary
.
classList
.
toggle
(
"
unsaved
"
!
!
editor
.
unsaved
)
;
summary
.
classList
.
toggle
(
"
linked
-
file
-
error
"
!
!
editor
.
linkedCSSFileError
)
;
const
label
=
summary
.
querySelector
(
"
.
stylesheet
-
name
>
label
"
)
;
label
.
setAttribute
(
"
value
"
editor
.
friendlyName
)
;
if
(
editor
.
styleSheet
.
href
)
{
label
.
setAttribute
(
"
tooltiptext
"
editor
.
styleSheet
.
href
)
;
}
let
linkedCSSSource
=
"
"
;
if
(
editor
.
linkedCSSFile
)
{
linkedCSSSource
=
PathUtils
.
filename
(
editor
.
linkedCSSFile
)
;
}
else
if
(
editor
.
styleSheet
.
relatedEditorName
)
{
linkedCSSSource
=
editor
.
styleSheet
.
relatedEditorName
;
}
text
(
summary
"
.
stylesheet
-
linked
-
file
"
linkedCSSSource
)
;
text
(
summary
"
.
stylesheet
-
title
"
editor
.
styleSheet
.
title
|
|
"
"
)
;
text
(
summary
"
.
stylesheet
-
rule
-
count
"
PluralForm
.
get
(
ruleCount
getString
(
"
ruleCount
.
label
"
)
)
.
replace
(
"
#
1
"
ruleCount
)
)
;
this
.
handleSummaryVisibility
(
summary
)
;
}
#
updateMediaList
=
editor
=
>
{
(
async
function
(
)
{
const
details
=
await
this
.
getEditorDetails
(
editor
)
;
const
list
=
details
.
querySelector
(
"
.
stylesheet
-
media
-
list
"
)
;
while
(
list
.
firstChild
)
{
list
.
firstChild
.
remove
(
)
;
}
const
rules
=
editor
.
mediaRules
;
const
showSidebar
=
Services
.
prefs
.
getBoolPref
(
PREF_MEDIA_SIDEBAR
)
;
const
sidebar
=
details
.
querySelector
(
"
.
stylesheet
-
sidebar
"
)
;
let
inSource
=
false
;
for
(
const
rule
of
rules
)
{
const
{
line
column
parentStyleSheet
}
=
rule
;
let
location
=
{
line
:
line
column
:
column
source
:
editor
.
styleSheet
.
href
styleSheet
:
parentStyleSheet
}
;
if
(
editor
.
styleSheet
.
isOriginalSource
)
{
const
styleSheet
=
editor
.
cssSheet
;
location
=
await
editor
.
styleSheet
.
getOriginalLocation
(
styleSheet
line
column
)
;
}
if
(
location
.
source
!
=
editor
.
styleSheet
.
href
)
{
continue
;
}
inSource
=
true
;
const
div
=
this
.
#
panelDoc
.
createElementNS
(
HTML_NS
"
div
"
)
;
div
.
className
=
"
media
-
rule
-
label
"
;
div
.
addEventListener
(
"
click
"
this
.
#
jumpToLocation
.
bind
(
this
location
)
)
;
const
cond
=
this
.
#
panelDoc
.
createElementNS
(
HTML_NS
"
div
"
)
;
cond
.
className
=
"
media
-
rule
-
condition
"
;
if
(
!
rule
.
matches
)
{
cond
.
classList
.
add
(
"
media
-
condition
-
unmatched
"
)
;
}
if
(
this
.
#
toolbox
.
descriptorFront
.
isLocalTab
)
{
this
.
#
setConditionContents
(
cond
rule
.
conditionText
)
;
}
else
{
cond
.
textContent
=
rule
.
conditionText
;
}
div
.
appendChild
(
cond
)
;
const
link
=
this
.
#
panelDoc
.
createElementNS
(
HTML_NS
"
div
"
)
;
link
.
className
=
"
media
-
rule
-
line
theme
-
link
"
;
if
(
location
.
line
!
=
-
1
)
{
link
.
textContent
=
"
:
"
+
location
.
line
;
}
div
.
appendChild
(
link
)
;
list
.
appendChild
(
div
)
;
}
sidebar
.
hidden
=
!
showSidebar
|
|
!
inSource
;
this
.
emit
(
"
media
-
list
-
changed
"
editor
)
;
}
.
bind
(
this
)
(
)
.
catch
(
console
.
error
)
)
;
}
;
#
setConditionContents
(
element
rawText
)
{
const
minMaxPattern
=
/
(
min
\
-
|
max
\
-
)
(
width
|
height
)
:
\
s
\
d
+
(
px
)
/
gi
;
let
match
=
minMaxPattern
.
exec
(
rawText
)
;
let
lastParsed
=
0
;
while
(
match
&
&
match
.
index
!
=
minMaxPattern
.
lastIndex
)
{
const
matchEnd
=
match
.
index
+
match
[
0
]
.
length
;
const
node
=
this
.
#
panelDoc
.
createTextNode
(
rawText
.
substring
(
lastParsed
match
.
index
)
)
;
element
.
appendChild
(
node
)
;
const
link
=
this
.
#
panelDoc
.
createElementNS
(
HTML_NS
"
a
"
)
;
link
.
href
=
"
#
"
;
link
.
className
=
"
media
-
responsive
-
mode
-
toggle
"
;
link
.
textContent
=
rawText
.
substring
(
match
.
index
matchEnd
)
;
link
.
addEventListener
(
"
click
"
this
.
#
onMediaConditionClick
.
bind
(
this
)
)
;
element
.
appendChild
(
link
)
;
match
=
minMaxPattern
.
exec
(
rawText
)
;
lastParsed
=
matchEnd
;
}
const
node
=
this
.
#
panelDoc
.
createTextNode
(
rawText
.
substring
(
lastParsed
rawText
.
length
)
)
;
element
.
appendChild
(
node
)
;
}
#
onMediaConditionClick
(
e
)
{
const
conditionText
=
e
.
target
.
textContent
;
const
isWidthCond
=
conditionText
.
toLowerCase
(
)
.
indexOf
(
"
width
"
)
>
-
1
;
const
mediaVal
=
parseInt
(
/
\
d
+
/
.
exec
(
conditionText
)
10
)
;
const
options
=
isWidthCond
?
{
width
:
mediaVal
}
:
{
height
:
mediaVal
}
;
this
.
#
launchResponsiveMode
(
options
)
;
e
.
preventDefault
(
)
;
e
.
stopPropagation
(
)
;
}
async
#
launchResponsiveMode
(
options
=
{
}
)
{
const
tab
=
this
.
currentTarget
.
localTab
;
const
win
=
this
.
currentTarget
.
localTab
.
ownerDocument
.
defaultView
;
await
lazy
.
ResponsiveUIManager
.
openIfNeeded
(
win
tab
{
trigger
:
"
style_editor
"
}
)
;
this
.
emit
(
"
responsive
-
mode
-
opened
"
)
;
lazy
.
ResponsiveUIManager
.
getResponsiveUIForTab
(
tab
)
.
setViewportSize
(
options
)
;
}
#
jumpToLocation
(
location
)
{
const
source
=
location
.
styleSheet
|
|
location
.
source
;
this
.
selectStyleSheet
(
source
location
.
line
-
1
location
.
column
-
1
)
;
}
#
startLoadingStyleSheets
(
)
{
this
.
#
root
.
classList
.
add
(
"
loading
"
)
;
this
.
#
loadingStyleSheets
=
[
]
;
}
async
#
waitForLoadingStyleSheets
(
)
{
while
(
this
.
#
loadingStyleSheets
?
.
length
>
0
)
{
const
pending
=
this
.
#
loadingStyleSheets
;
this
.
#
loadingStyleSheets
=
[
]
;
await
Promise
.
all
(
pending
)
;
}
this
.
#
loadingStyleSheets
=
null
;
this
.
#
root
.
classList
.
remove
(
"
loading
"
)
;
}
async
#
handleStyleSheetResource
(
resource
)
{
try
{
const
{
fileName
}
=
resource
;
let
file
=
fileName
?
new
lazy
.
FileUtils
.
File
(
fileName
)
:
null
;
if
(
!
file
)
{
const
identifier
=
this
.
getStyleSheetIdentifier
(
resource
)
;
const
savedFile
=
this
.
savedLocations
[
identifier
]
;
if
(
savedFile
)
{
file
=
savedFile
;
}
}
resource
.
file
=
file
;
await
this
.
#
addStyleSheet
(
resource
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
this
.
emit
(
"
error
"
{
key
:
LOAD_ERROR
level
:
"
warning
"
}
)
;
}
}
#
onTargetAvailable
=
(
{
targetFront
}
)
=
>
{
}
;
#
onTargetDestroyed
=
(
{
targetFront
}
)
=
>
{
const
editorsCopy
=
[
.
.
.
this
.
editors
]
;
for
(
const
editor
of
editorsCopy
)
{
const
{
styleSheet
}
=
editor
;
if
(
styleSheet
.
targetFront
=
=
targetFront
)
{
this
.
#
removeStyleSheet
(
styleSheet
editor
)
;
}
}
}
;
#
onResourceAvailable
=
async
resources
=
>
{
const
promises
=
[
]
;
for
(
const
resource
of
resources
)
{
if
(
resource
.
resourceType
=
=
=
this
.
#
toolbox
.
resourceCommand
.
TYPES
.
STYLESHEET
)
{
const
onStyleSheetHandled
=
this
.
#
handleStyleSheetResource
(
resource
)
;
if
(
this
.
#
loadingStyleSheets
)
{
this
.
#
loadingStyleSheets
.
push
(
onStyleSheetHandled
)
;
}
promises
.
push
(
onStyleSheetHandled
)
;
continue
;
}
if
(
!
resource
.
targetFront
.
isTopLevel
)
{
continue
;
}
if
(
resource
.
name
=
=
=
"
will
-
navigate
"
)
{
this
.
#
startLoadingStyleSheets
(
)
;
this
.
#
clear
(
)
;
}
else
if
(
resource
.
name
=
=
=
"
dom
-
complete
"
)
{
promises
.
push
(
this
.
#
waitForLoadingStyleSheets
(
)
)
;
}
}
await
Promise
.
all
(
promises
)
;
}
;
#
onResourceUpdated
=
async
updates
=
>
{
for
(
const
{
resource
update
}
of
updates
)
{
if
(
update
.
resourceType
=
=
=
this
.
#
toolbox
.
resourceCommand
.
TYPES
.
STYLESHEET
)
{
const
editor
=
this
.
editors
.
find
(
e
=
>
e
.
resourceId
=
=
=
update
.
resourceId
)
;
switch
(
update
.
updateType
)
{
case
"
style
-
applied
"
:
{
editor
.
onStyleApplied
(
update
)
;
break
;
}
case
"
property
-
change
"
:
{
for
(
const
[
property
value
]
of
Object
.
entries
(
update
.
resourceUpdates
)
)
{
editor
.
onPropertyChange
(
property
value
)
;
}
break
;
}
case
"
media
-
rules
-
changed
"
:
case
"
matches
-
change
"
:
{
const
{
mediaRules
}
=
resource
;
editor
.
onMediaRulesChanged
(
mediaRules
)
;
break
;
}
}
}
}
}
;
setActiveSummary
(
summary
options
=
{
}
)
{
if
(
summary
=
=
this
.
#
activeSummary
)
{
return
;
}
if
(
this
.
#
activeSummary
)
{
const
binding
=
this
.
#
summaryDataMap
.
get
(
this
.
#
activeSummary
)
;
this
.
#
activeSummary
.
classList
.
remove
(
"
splitview
-
active
"
)
;
binding
.
details
.
classList
.
remove
(
"
splitview
-
active
"
)
;
}
this
.
#
activeSummary
=
summary
;
if
(
!
summary
)
{
this
.
selectedEditor
=
null
;
return
;
}
const
{
details
}
=
this
.
#
summaryDataMap
.
get
(
summary
)
;
summary
.
classList
.
add
(
"
splitview
-
active
"
)
;
details
.
classList
.
add
(
"
splitview
-
active
"
)
;
this
.
showSummaryEditor
(
summary
options
)
;
}
async
showSummaryEditor
(
summary
options
)
{
const
{
details
editor
}
=
this
.
#
summaryDataMap
.
get
(
summary
)
;
this
.
selectedEditor
=
editor
;
try
{
if
(
!
editor
.
sourceEditor
)
{
const
inputElement
=
details
.
querySelector
(
"
.
stylesheet
-
editor
-
input
"
)
;
await
editor
.
load
(
inputElement
this
.
#
cssProperties
)
;
}
editor
.
onShow
(
options
)
;
this
.
emit
(
"
editor
-
selected
"
editor
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
removeSplitViewItem
(
summary
)
{
if
(
summary
=
=
this
.
#
activeSummary
)
{
this
.
setActiveSummary
(
null
)
;
}
const
data
=
this
.
#
summaryDataMap
.
get
(
summary
)
;
if
(
!
data
)
{
return
;
}
summary
.
remove
(
)
;
data
.
details
.
remove
(
)
;
}
handleSummaryVisibility
(
summary
{
triggerOnFilterStateChange
=
true
}
=
{
}
)
{
if
(
!
this
.
#
filter
)
{
summary
.
classList
.
remove
(
FILTERED_CLASSNAME
)
;
return
;
}
const
label
=
summary
.
querySelector
(
"
.
stylesheet
-
name
label
"
)
;
const
itemText
=
label
.
value
.
toLowerCase
(
)
;
const
matchesSearch
=
itemText
.
includes
(
this
.
#
filter
.
toLowerCase
(
)
)
;
summary
.
classList
.
toggle
(
FILTERED_CLASSNAME
!
matchesSearch
)
;
if
(
this
.
#
activeSummary
=
=
summary
&
&
!
matchesSearch
)
{
this
.
setActiveSummary
(
null
)
;
}
if
(
triggerOnFilterStateChange
)
{
this
.
#
onFilterStateChange
(
)
;
}
}
destroy
(
)
{
this
.
#
toolbox
.
resourceCommand
.
unwatchResources
(
[
this
.
#
toolbox
.
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
this
.
#
toolbox
.
resourceCommand
.
TYPES
.
STYLESHEET
]
{
onAvailable
:
this
.
#
onResourceAvailable
onUpdated
:
this
.
#
onResourceUpdated
}
)
;
this
.
#
commands
.
targetCommand
.
unwatchTargets
(
{
types
:
[
this
.
#
commands
.
targetCommand
.
TYPES
.
FRAME
]
onAvailable
:
this
.
#
onTargetAvailable
onDestroyed
:
this
.
#
onTargetDestroyed
}
)
;
if
(
this
.
#
uiAbortController
)
{
this
.
#
uiAbortController
.
abort
(
)
;
this
.
#
uiAbortController
=
null
;
}
this
.
#
clearStyleSheetEditors
(
)
;
this
.
#
seenSheets
=
null
;
this
.
#
filterInput
=
null
;
this
.
#
filterInputClearButton
=
null
;
this
.
#
nav
=
null
;
this
.
#
side
=
null
;
this
.
#
tplDetails
=
null
;
this
.
#
tplSummary
=
null
;
const
sidebar
=
this
.
#
panelDoc
.
querySelector
(
"
.
splitview
-
controller
"
)
;
const
sidebarWidth
=
sidebar
.
getAttribute
(
"
width
"
)
;
Services
.
prefs
.
setIntPref
(
PREF_NAV_WIDTH
sidebarWidth
)
;
if
(
this
.
#
sourceMapPrefObserver
)
{
this
.
#
sourceMapPrefObserver
.
off
(
PREF_ORIG_SOURCES
this
.
#
onOrigSourcesPrefChanged
)
;
this
.
#
sourceMapPrefObserver
.
destroy
(
)
;
this
.
#
sourceMapPrefObserver
=
null
;
}
if
(
this
.
#
prefObserver
)
{
this
.
#
prefObserver
.
off
(
PREF_MEDIA_SIDEBAR
this
.
#
onMediaPrefChanged
)
;
this
.
#
prefObserver
.
destroy
(
)
;
this
.
#
prefObserver
=
null
;
}
if
(
this
.
#
shortcuts
)
{
this
.
#
shortcuts
.
destroy
(
)
;
this
.
#
shortcuts
=
null
;
}
}
}
