"
use
strict
"
;
function
createController
(
ed
)
{
return
{
supportsCommand
:
function
(
cmd
)
{
switch
(
cmd
)
{
case
"
cmd_find
"
:
case
"
cmd_findAgain
"
:
case
"
cmd_gotoLine
"
:
case
"
cmd_undo
"
:
case
"
cmd_redo
"
:
case
"
cmd_delete
"
:
case
"
cmd_selectAll
"
:
return
true
;
}
return
false
;
}
isCommandEnabled
:
function
(
cmd
)
{
const
cm
=
ed
.
codeMirror
;
switch
(
cmd
)
{
case
"
cmd_find
"
:
case
"
cmd_gotoLine
"
:
case
"
cmd_selectAll
"
:
return
true
;
case
"
cmd_findAgain
"
:
return
cm
.
state
.
search
!
=
null
&
&
cm
.
state
.
search
.
query
!
=
null
;
case
"
cmd_undo
"
:
return
ed
.
canUndo
(
)
;
case
"
cmd_redo
"
:
return
ed
.
canRedo
(
)
;
case
"
cmd_delete
"
:
return
ed
.
somethingSelected
(
)
;
}
return
false
;
}
doCommand
:
function
(
cmd
)
{
const
cm
=
ed
.
codeMirror
;
const
map
=
{
"
cmd_selectAll
"
:
"
selectAll
"
"
cmd_find
"
:
"
find
"
"
cmd_undo
"
:
"
undo
"
"
cmd_redo
"
:
"
redo
"
"
cmd_delete
"
:
"
delCharAfter
"
"
cmd_findAgain
"
:
"
findNext
"
}
;
if
(
map
[
cmd
]
)
{
cm
.
execCommand
(
map
[
cmd
]
)
;
return
;
}
if
(
cmd
=
=
"
cmd_gotoLine
"
)
{
ed
.
jumpToLine
(
)
;
}
}
onEvent
:
function
(
)
{
}
}
;
}
function
insertCommandsController
(
sourceEditor
)
{
const
input
=
sourceEditor
.
codeMirror
.
getInputField
(
)
;
const
controller
=
createController
(
sourceEditor
)
;
input
.
controllers
.
insertControllerAt
(
0
controller
)
;
}
module
.
exports
=
{
insertCommandsController
}
;
