"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
var
{
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
debugger
-
client
"
)
;
var
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
var
{
WebGLFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
webgl
"
)
;
var
{
Toolbox
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
"
)
;
var
{
isWebGLSupported
}
=
require
(
"
devtools
/
client
/
shared
/
webgl
-
utils
"
)
;
const
EXAMPLE_URL
=
"
http
:
/
/
example
.
com
/
browser
/
devtools
/
client
/
shadereditor
/
test
/
"
;
const
SIMPLE_CANVAS_URL
=
EXAMPLE_URL
+
"
doc_simple
-
canvas
.
html
"
;
const
SHADER_ORDER_URL
=
EXAMPLE_URL
+
"
doc_shader
-
order
.
html
"
;
const
MULTIPLE_CONTEXTS_URL
=
EXAMPLE_URL
+
"
doc_multiple
-
contexts
.
html
"
;
const
OVERLAPPING_GEOMETRY_CANVAS_URL
=
EXAMPLE_URL
+
"
doc_overlapping
-
geometry
.
html
"
;
const
BLENDED_GEOMETRY_CANVAS_URL
=
EXAMPLE_URL
+
"
doc_blended
-
geometry
.
html
"
;
var
gEnableLogging
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
log
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
debugger
.
log
"
false
)
;
var
gToolEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
shadereditor
.
enabled
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
debugger
.
log
"
gEnableLogging
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
shadereditor
.
enabled
"
gToolEnabled
)
;
info
(
"
Forcing
GC
after
shadereditor
test
.
"
)
;
Cu
.
forceGC
(
)
;
}
)
;
function
loadFrameScripts
(
)
{
if
(
!
content
)
{
loadFrameScriptUtils
(
)
;
}
}
function
handleError
(
aError
)
{
ok
(
false
"
Got
an
error
:
"
+
aError
.
message
+
"
\
n
"
+
aError
.
stack
)
;
finish
(
)
;
}
function
ifWebGLSupported
(
)
{
ok
(
false
"
You
need
to
define
a
'
ifWebGLSupported
'
function
.
"
)
;
finish
(
)
;
}
function
ifWebGLUnsupported
(
)
{
todo
(
false
"
Skipping
test
because
WebGL
isn
'
t
supported
.
"
)
;
finish
(
)
;
}
function
test
(
)
{
let
generator
=
isWebGLSupported
(
document
)
?
ifWebGLSupported
:
ifWebGLUnsupported
;
Task
.
spawn
(
generator
)
.
catch
(
handleError
)
;
}
function
createCanvas
(
)
{
return
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
canvas
"
)
;
}
function
onceSpread
(
aTarget
aEvent
)
{
let
deferred
=
defer
(
)
;
aTarget
.
once
(
aEvent
(
.
.
.
args
)
=
>
deferred
.
resolve
(
args
)
)
;
return
deferred
.
promise
;
}
function
observe
(
aNotificationName
aOwnsWeak
=
false
)
{
info
(
"
Waiting
for
observer
notification
:
'
"
+
aNotificationName
+
"
.
"
)
;
let
deferred
=
defer
(
)
;
Services
.
obs
.
addObserver
(
function
onNotification
(
.
.
.
aArgs
)
{
Services
.
obs
.
removeObserver
(
onNotification
aNotificationName
)
;
deferred
.
resolve
.
apply
(
deferred
aArgs
)
;
}
aNotificationName
aOwnsWeak
)
;
return
deferred
.
promise
;
}
function
isApprox
(
aFirst
aSecond
aMargin
=
1
)
{
return
Math
.
abs
(
aFirst
-
aSecond
)
<
=
aMargin
;
}
function
isApproxColor
(
aFirst
aSecond
aMargin
)
{
return
isApprox
(
aFirst
.
r
aSecond
.
r
aMargin
)
&
&
isApprox
(
aFirst
.
g
aSecond
.
g
aMargin
)
&
&
isApprox
(
aFirst
.
b
aSecond
.
b
aMargin
)
&
&
isApprox
(
aFirst
.
a
aSecond
.
a
aMargin
)
;
}
function
ensurePixelIs
(
aFront
aPosition
aColor
aWaitFlag
=
false
aSelector
=
"
canvas
"
)
{
return
Task
.
spawn
(
function
*
(
)
{
let
pixel
=
yield
aFront
.
getPixel
(
{
selector
:
aSelector
position
:
aPosition
}
)
;
if
(
isApproxColor
(
pixel
aColor
)
)
{
ok
(
true
"
Expected
pixel
is
shown
at
:
"
+
aPosition
.
toSource
(
)
)
;
return
;
}
if
(
aWaitFlag
)
{
yield
aFront
.
waitForFrame
(
)
;
return
ensurePixelIs
(
aFront
aPosition
aColor
aWaitFlag
aSelector
)
;
}
ok
(
false
"
Expected
pixel
was
not
already
shown
at
:
"
+
aPosition
.
toSource
(
)
)
;
throw
new
Error
(
"
Expected
pixel
was
not
already
shown
at
:
"
+
aPosition
.
toSource
(
)
)
;
}
)
;
}
function
navigateInHistory
(
aTarget
aDirection
aWaitForTargetEvent
=
"
navigate
"
)
{
if
(
!
content
)
{
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
mm
.
sendAsyncMessage
(
"
devtools
:
test
:
history
"
{
direction
:
aDirection
}
)
;
}
else
{
executeSoon
(
(
)
=
>
content
.
history
[
aDirection
]
(
)
)
;
}
return
once
(
aTarget
aWaitForTargetEvent
)
;
}
function
navigate
(
aTarget
aUrl
aWaitForTargetEvent
=
"
navigate
"
)
{
executeSoon
(
(
)
=
>
aTarget
.
activeTab
.
navigateTo
(
aUrl
)
)
;
return
once
(
aTarget
aWaitForTargetEvent
)
;
}
function
reload
(
aTarget
aWaitForTargetEvent
=
"
navigate
"
)
{
executeSoon
(
(
)
=
>
aTarget
.
activeTab
.
reload
(
)
)
;
return
once
(
aTarget
aWaitForTargetEvent
)
;
}
function
initBackend
(
aUrl
)
{
info
(
"
Initializing
a
shader
editor
front
.
"
)
;
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerAllActors
(
)
;
return
Task
.
spawn
(
function
*
(
)
{
let
tab
=
yield
addTab
(
aUrl
)
;
let
target
=
TargetFactory
.
forTab
(
tab
)
;
yield
target
.
makeRemote
(
)
;
let
front
=
new
WebGLFront
(
target
.
client
target
.
form
)
;
return
{
target
front
}
;
}
)
;
}
function
initShaderEditor
(
aUrl
)
{
info
(
"
Initializing
a
shader
editor
pane
.
"
)
;
return
Task
.
spawn
(
function
*
(
)
{
let
tab
=
yield
addTab
(
aUrl
)
;
let
target
=
TargetFactory
.
forTab
(
tab
)
;
yield
target
.
makeRemote
(
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
shadereditor
.
enabled
"
true
)
;
let
toolbox
=
yield
gDevTools
.
showToolbox
(
target
"
shadereditor
"
)
;
let
panel
=
toolbox
.
getCurrentPanel
(
)
;
return
{
target
panel
}
;
}
)
;
}
function
teardown
(
aPanel
)
{
info
(
"
Destroying
the
specified
shader
editor
.
"
)
;
return
promise
.
all
(
[
once
(
aPanel
"
destroyed
"
)
removeTab
(
aPanel
.
target
.
tab
)
]
)
;
}
function
getPrograms
(
front
count
onAdd
)
{
let
actors
=
[
]
;
let
deferred
=
defer
(
)
;
front
.
on
(
"
program
-
linked
"
function
onLink
(
actor
)
{
if
(
actors
.
length
!
=
=
count
)
{
actors
.
push
(
actor
)
;
if
(
typeof
onAdd
=
=
=
"
function
"
)
onAdd
(
actors
)
;
}
if
(
actors
.
length
=
=
=
count
)
{
front
.
off
(
"
program
-
linked
"
onLink
)
;
deferred
.
resolve
(
actors
)
;
}
}
)
;
return
deferred
.
promise
;
}
