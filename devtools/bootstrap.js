"
use
strict
"
;
const
Cu
=
Components
.
utils
;
const
Ci
=
Components
.
interfaces
;
const
{
Services
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
function
actionOccurred
(
id
)
{
let
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
let
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
;
let
telemetry
=
new
Telemetry
(
)
;
telemetry
.
actionOccurred
(
id
)
;
}
function
MultiWindowKeyListener
(
{
keyCode
ctrlKey
altKey
callback
}
)
{
let
keyListener
=
function
(
event
)
{
if
(
event
.
ctrlKey
=
=
!
!
ctrlKey
&
&
event
.
altKey
=
=
!
!
altKey
&
&
event
.
keyCode
=
=
=
keyCode
)
{
callback
(
event
)
;
event
.
preventDefault
(
)
;
}
}
;
let
observer
=
function
(
window
topic
data
)
{
if
(
topic
=
=
=
"
domwindowopened
"
)
{
window
.
addEventListener
(
"
keyup
"
keyListener
)
;
}
else
{
window
.
removeEventListener
(
"
keyup
"
keyListener
)
;
}
}
;
return
{
start
:
function
(
)
{
let
e
=
Services
.
ww
.
getWindowEnumerator
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
let
window
=
e
.
getNext
(
)
;
observer
(
window
"
domwindowopened
"
null
)
;
}
Services
.
ww
.
registerNotification
(
observer
)
;
}
stop
:
function
(
)
{
Services
.
ww
.
unregisterNotification
(
observer
)
;
let
e
=
Services
.
ww
.
getWindowEnumerator
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
let
window
=
e
.
getNext
(
)
;
observer
(
window
"
domwindowclosed
"
null
)
;
}
}
}
;
}
;
let
getTopLevelWindow
=
function
(
window
)
{
return
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShellTreeItem
)
.
rootTreeItem
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
}
;
function
reload
(
event
)
{
let
top
=
getTopLevelWindow
(
event
.
view
)
let
isBrowser
=
top
.
location
.
href
.
includes
(
"
/
browser
.
xul
"
)
&
&
top
.
gDevToolsBrowser
;
let
reloadToolbox
=
false
;
if
(
isBrowser
&
&
top
.
gDevToolsBrowser
.
hasToolboxOpened
)
{
reloadToolbox
=
top
.
gDevToolsBrowser
.
hasToolboxOpened
(
top
)
;
}
dump
(
"
Reload
DevTools
.
(
reload
-
toolbox
:
"
+
reloadToolbox
+
"
)
\
n
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
startupcache
-
invalidate
"
null
)
;
const
{
devtools
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
devtools
.
reload
(
)
;
let
windowsEnum
=
Services
.
wm
.
getEnumerator
(
null
)
;
while
(
windowsEnum
.
hasMoreElements
(
)
)
{
let
window
=
windowsEnum
.
getNext
(
)
;
let
windowtype
=
window
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
;
if
(
windowtype
=
=
"
navigator
:
browser
"
&
&
window
.
gBrowser
)
{
for
(
let
tab
of
window
.
gBrowser
.
tabs
)
{
let
browser
=
tab
.
linkedBrowser
;
let
location
=
browser
.
documentURI
.
spec
;
let
mm
=
browser
.
messageManager
;
if
(
location
.
startsWith
(
"
about
:
debugging
"
)
|
|
location
.
startsWith
(
"
chrome
:
/
/
devtools
/
"
)
)
{
browser
.
reload
(
)
;
}
mm
.
loadFrameScript
(
"
data
:
text
/
javascript
new
"
+
function
(
)
{
let
isJSONView
=
content
.
document
.
baseURI
.
startsWith
(
"
resource
:
/
/
devtools
/
"
)
;
if
(
isJSONView
)
{
content
.
location
.
reload
(
)
;
}
}
false
)
;
}
const
desc
=
Object
.
getOwnPropertyDescriptor
(
window
"
DeveloperToolbar
"
)
;
if
(
desc
&
&
!
desc
.
get
)
{
let
wasVisible
=
window
.
DeveloperToolbar
.
visible
;
window
.
DeveloperToolbar
.
hide
(
)
.
then
(
(
)
=
>
{
window
.
DeveloperToolbar
.
destroy
(
)
;
let
{
DeveloperToolbar
}
=
devtools
.
require
(
"
devtools
/
client
/
shared
/
developer
-
toolbar
"
)
;
window
.
DeveloperToolbar
=
new
DeveloperToolbar
(
window
window
.
document
.
getElementById
(
"
developer
-
toolbar
"
)
)
;
if
(
wasVisible
)
{
window
.
DeveloperToolbar
.
show
(
)
;
}
}
)
;
}
}
else
if
(
windowtype
=
=
=
"
devtools
:
webide
"
)
{
window
.
location
.
reload
(
)
;
}
else
if
(
windowtype
=
=
=
"
devtools
:
webconsole
"
)
{
let
HUDService
=
devtools
.
require
(
"
devtools
/
client
/
webconsole
/
hudservice
"
)
;
HUDService
.
toggleBrowserConsole
(
)
.
then
(
(
)
=
>
{
HUDService
.
toggleBrowserConsole
(
)
;
}
)
;
}
}
if
(
reloadToolbox
)
{
let
{
setTimeout
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
{
}
)
;
setTimeout
(
(
)
=
>
{
let
{
TargetFactory
}
=
devtools
.
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
let
{
gDevTools
}
=
devtools
.
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
let
target
=
TargetFactory
.
forTab
(
top
.
gBrowser
.
selectedTab
)
;
gDevTools
.
showToolbox
(
target
)
;
}
1000
)
;
}
actionOccurred
(
"
reloadAddonReload
"
)
;
}
let
listener
;
function
startup
(
)
{
dump
(
"
DevTools
addon
started
.
\
n
"
)
;
listener
=
new
MultiWindowKeyListener
(
{
keyCode
:
Ci
.
nsIDOMKeyEvent
.
DOM_VK_R
ctrlKey
:
true
altKey
:
true
callback
:
reload
}
)
;
listener
.
start
(
)
;
}
function
shutdown
(
)
{
listener
.
stop
(
)
;
listener
=
null
;
}
function
install
(
)
{
actionOccurred
(
"
reloadAddonInstalled
"
)
;
}
function
uninstall
(
)
{
}
