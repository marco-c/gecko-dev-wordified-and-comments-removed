"
use
strict
"
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
function
eventSource
(
proto
)
{
proto
.
addListener
=
function
(
name
listener
)
{
if
(
typeof
listener
!
=
"
function
"
)
{
throw
TypeError
(
"
Listeners
must
be
functions
.
"
)
;
}
if
(
!
this
.
_listeners
)
{
this
.
_listeners
=
{
}
;
}
this
.
_getListeners
(
name
)
.
push
(
listener
)
;
}
;
proto
.
addOneTimeListener
=
function
(
name
listener
)
{
return
new
Promise
(
resolve
=
>
{
let
l
=
(
eventName
.
.
.
rest
)
=
>
{
this
.
removeListener
(
name
l
)
;
if
(
listener
)
{
listener
(
eventName
.
.
.
rest
)
;
}
resolve
(
rest
[
0
]
)
;
}
;
this
.
addListener
(
name
l
)
;
}
)
;
}
;
proto
.
removeListener
=
function
(
name
listener
)
{
if
(
!
this
.
_listeners
|
|
(
listener
&
&
!
this
.
_listeners
[
name
]
)
)
{
return
;
}
if
(
!
listener
)
{
this
.
_listeners
[
name
]
=
[
]
;
}
else
{
this
.
_listeners
[
name
]
=
this
.
_listeners
[
name
]
.
filter
(
l
=
>
l
!
=
listener
)
;
}
}
;
proto
.
_getListeners
=
function
(
name
)
{
if
(
name
in
this
.
_listeners
)
{
return
this
.
_listeners
[
name
]
;
}
this
.
_listeners
[
name
]
=
[
]
;
return
this
.
_listeners
[
name
]
;
}
;
proto
.
emit
=
function
(
)
{
if
(
!
this
.
_listeners
)
{
return
;
}
let
name
=
arguments
[
0
]
;
let
listeners
=
this
.
_getListeners
(
name
)
.
slice
(
0
)
;
for
(
let
listener
of
listeners
)
{
try
{
listener
.
apply
(
null
arguments
)
;
}
catch
(
e
)
{
DevToolsUtils
.
reportException
(
"
notify
event
'
"
+
name
+
"
'
"
e
)
;
}
}
}
;
}
module
.
exports
=
eventSource
;
