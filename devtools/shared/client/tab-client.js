"
use
strict
"
;
const
promise
=
require
(
"
devtools
/
shared
/
deprecated
-
sync
-
thenables
"
)
;
const
eventSource
=
require
(
"
devtools
/
shared
/
client
/
event
-
source
"
)
;
const
{
arg
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
debugger
-
client
"
)
;
loader
.
lazyRequireGetter
(
this
"
ThreadClient
"
"
devtools
/
shared
/
client
/
thread
-
client
"
)
;
function
TabClient
(
client
form
)
{
this
.
client
=
client
;
this
.
_actor
=
form
.
from
;
this
.
_threadActor
=
form
.
threadActor
;
this
.
javascriptEnabled
=
form
.
javascriptEnabled
;
this
.
cacheDisabled
=
form
.
cacheDisabled
;
this
.
thread
=
null
;
this
.
request
=
this
.
client
.
request
;
this
.
traits
=
form
.
traits
|
|
{
}
;
this
.
events
=
[
"
workerListChanged
"
]
;
}
TabClient
.
prototype
=
{
get
actor
(
)
{
return
this
.
_actor
;
}
get
_transport
(
)
{
return
this
.
client
.
_transport
;
}
attachThread
:
function
(
options
=
{
}
)
{
if
(
this
.
thread
)
{
return
promise
.
resolve
(
[
{
}
this
.
thread
]
)
;
}
const
packet
=
{
to
:
this
.
_threadActor
type
:
"
attach
"
options
}
;
return
this
.
request
(
packet
)
.
then
(
response
=
>
{
this
.
thread
=
new
ThreadClient
(
this
this
.
_threadActor
)
;
this
.
client
.
registerClient
(
this
.
thread
)
;
return
[
response
this
.
thread
]
;
}
)
;
}
detach
:
DebuggerClient
.
requester
(
{
type
:
"
detach
"
}
{
before
:
function
(
packet
)
{
if
(
this
.
thread
)
{
this
.
thread
.
detach
(
)
;
}
return
packet
;
}
after
:
function
(
response
)
{
this
.
client
.
unregisterClient
(
this
)
;
return
response
;
}
}
)
focus
:
DebuggerClient
.
requester
(
{
type
:
"
focus
"
}
{
}
)
ensureCSSErrorReportingEnabled
:
DebuggerClient
.
requester
(
{
type
:
"
ensureCSSErrorReportingEnabled
"
}
{
}
)
reload
:
function
(
options
=
{
force
:
false
}
)
{
return
this
.
_reload
(
options
)
;
}
_reload
:
DebuggerClient
.
requester
(
{
type
:
"
reload
"
options
:
arg
(
0
)
}
)
navigateTo
:
DebuggerClient
.
requester
(
{
type
:
"
navigateTo
"
url
:
arg
(
0
)
}
)
reconfigure
:
DebuggerClient
.
requester
(
{
type
:
"
reconfigure
"
options
:
arg
(
0
)
}
)
listWorkers
:
DebuggerClient
.
requester
(
{
type
:
"
listWorkers
"
}
)
attachWorker
:
function
(
workerTargetActor
)
{
return
this
.
client
.
attachWorker
(
workerTargetActor
)
;
}
logInPage
:
DebuggerClient
.
requester
(
{
type
:
"
logInPage
"
text
:
arg
(
0
)
category
:
arg
(
1
)
flags
:
arg
(
2
)
}
)
}
;
eventSource
(
TabClient
.
prototype
)
;
module
.
exports
=
TabClient
;
