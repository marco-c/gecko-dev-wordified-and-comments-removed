"
use
strict
"
;
const
{
DebuggerClient
}
=
require
(
"
.
/
debugger
-
client
"
)
;
loader
.
lazyRequireGetter
(
this
"
BreakpointClient
"
"
devtools
/
shared
/
client
/
breakpoint
-
client
"
)
;
const
noop
=
(
)
=
>
{
}
;
function
SourceClient
(
client
form
)
{
this
.
_form
=
form
;
this
.
_isBlackBoxed
=
form
.
isBlackBoxed
;
this
.
_isPrettyPrinted
=
form
.
isPrettyPrinted
;
this
.
_activeThread
=
client
;
this
.
_client
=
client
.
client
;
}
SourceClient
.
prototype
=
{
get
_transport
(
)
{
return
this
.
_client
.
_transport
;
}
get
isBlackBoxed
(
)
{
return
this
.
_isBlackBoxed
;
}
get
isPrettyPrinted
(
)
{
return
this
.
_isPrettyPrinted
;
}
get
actor
(
)
{
return
this
.
_form
.
actor
;
}
get
request
(
)
{
return
this
.
_client
.
request
;
}
get
url
(
)
{
return
this
.
_form
.
url
;
}
blackBox
:
DebuggerClient
.
requester
(
{
type
:
"
blackbox
"
}
{
after
:
function
(
response
)
{
if
(
!
response
.
error
)
{
this
.
_isBlackBoxed
=
true
;
if
(
this
.
_activeThread
)
{
this
.
_activeThread
.
emit
(
"
blackboxchange
"
this
)
;
}
}
return
response
;
}
}
)
unblackBox
:
DebuggerClient
.
requester
(
{
type
:
"
unblackbox
"
}
{
after
:
function
(
response
)
{
if
(
!
response
.
error
)
{
this
.
_isBlackBoxed
=
false
;
if
(
this
.
_activeThread
)
{
this
.
_activeThread
.
emit
(
"
blackboxchange
"
this
)
;
}
}
return
response
;
}
}
)
getExecutableLines
:
function
(
cb
=
noop
)
{
let
packet
=
{
to
:
this
.
_form
.
actor
type
:
"
getExecutableLines
"
}
;
return
this
.
_client
.
request
(
packet
)
.
then
(
res
=
>
{
cb
(
res
.
lines
)
;
return
res
.
lines
;
}
)
;
}
source
:
function
(
callback
=
noop
)
{
let
packet
=
{
to
:
this
.
_form
.
actor
type
:
"
source
"
}
;
return
this
.
_client
.
request
(
packet
)
.
then
(
response
=
>
{
return
this
.
_onSourceResponse
(
response
callback
)
;
}
)
;
}
prettyPrint
:
function
(
indent
callback
=
noop
)
{
const
packet
=
{
to
:
this
.
_form
.
actor
type
:
"
prettyPrint
"
indent
}
;
return
this
.
_client
.
request
(
packet
)
.
then
(
response
=
>
{
if
(
!
response
.
error
)
{
this
.
_isPrettyPrinted
=
true
;
this
.
_activeThread
.
_clearFrames
(
)
;
this
.
_activeThread
.
emit
(
"
prettyprintchange
"
this
)
;
}
return
this
.
_onSourceResponse
(
response
callback
)
;
}
)
;
}
disablePrettyPrint
:
function
(
callback
=
noop
)
{
const
packet
=
{
to
:
this
.
_form
.
actor
type
:
"
disablePrettyPrint
"
}
;
return
this
.
_client
.
request
(
packet
)
.
then
(
response
=
>
{
if
(
!
response
.
error
)
{
this
.
_isPrettyPrinted
=
false
;
this
.
_activeThread
.
_clearFrames
(
)
;
this
.
_activeThread
.
emit
(
"
prettyprintchange
"
this
)
;
}
return
this
.
_onSourceResponse
(
response
callback
)
;
}
)
;
}
_onSourceResponse
:
function
(
response
callback
)
{
if
(
response
.
error
)
{
callback
(
response
)
;
return
response
;
}
if
(
typeof
response
.
source
=
=
=
"
string
"
)
{
callback
(
response
)
;
return
response
;
}
let
{
contentType
source
}
=
response
;
if
(
source
.
type
=
=
=
"
arrayBuffer
"
)
{
let
arrayBuffer
=
this
.
_activeThread
.
threadArrayBuffer
(
source
)
;
return
arrayBuffer
.
slice
(
0
arrayBuffer
.
length
)
.
then
(
function
(
resp
)
{
if
(
resp
.
error
)
{
callback
(
resp
)
;
return
resp
;
}
const
str
=
atob
(
resp
.
encoded
)
;
let
newResponse
=
{
source
:
{
binary
:
str
toString
:
(
)
=
>
"
[
wasm
]
"
}
contentType
}
;
callback
(
newResponse
)
;
return
newResponse
;
}
)
;
}
let
longString
=
this
.
_activeThread
.
threadLongString
(
source
)
;
return
longString
.
substring
(
0
longString
.
length
)
.
then
(
function
(
resp
)
{
if
(
resp
.
error
)
{
callback
(
resp
)
;
return
resp
;
}
let
newResponse
=
{
source
:
resp
.
substring
contentType
:
contentType
}
;
callback
(
newResponse
)
;
return
newResponse
;
}
)
;
}
setBreakpoint
:
function
(
{
line
column
condition
noSliding
}
onResponse
=
noop
)
{
let
doSetBreakpoint
=
callback
=
>
{
let
root
=
this
.
_client
.
mainRoot
;
let
location
=
{
line
column
}
;
let
packet
=
{
to
:
this
.
actor
type
:
"
setBreakpoint
"
location
condition
noSliding
}
;
if
(
!
root
.
traits
.
debuggerSourceActors
)
{
packet
.
to
=
this
.
_activeThread
.
actor
;
packet
.
location
.
url
=
this
.
url
;
}
return
this
.
_client
.
request
(
packet
)
.
then
(
response
=
>
{
let
bpClient
;
if
(
response
.
actor
)
{
bpClient
=
new
BreakpointClient
(
this
.
_client
this
response
.
actor
location
root
.
traits
.
conditionalBreakpoints
?
condition
:
undefined
)
;
}
onResponse
(
response
bpClient
)
;
if
(
callback
)
{
callback
(
)
;
}
return
[
response
bpClient
]
;
}
)
;
}
;
if
(
this
.
_activeThread
.
paused
)
{
return
doSetBreakpoint
(
)
;
}
return
this
.
_activeThread
.
interrupt
(
)
.
then
(
response
=
>
{
if
(
response
.
error
)
{
onResponse
(
response
)
;
return
response
;
}
const
{
type
why
}
=
response
;
const
cleanUp
=
type
=
=
"
paused
"
&
&
why
.
type
=
=
"
interrupted
"
?
(
)
=
>
this
.
_activeThread
.
resume
(
)
:
noop
;
return
doSetBreakpoint
(
cleanUp
)
;
}
)
;
}
}
;
module
.
exports
=
SourceClient
;
