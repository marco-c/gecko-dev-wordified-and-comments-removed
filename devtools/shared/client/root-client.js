"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
{
arg
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
debugger
-
client
"
)
;
function
RootClient
(
client
greeting
)
{
this
.
_client
=
client
;
this
.
actor
=
greeting
.
from
;
this
.
applicationType
=
greeting
.
applicationType
;
this
.
traits
=
greeting
.
traits
;
}
exports
.
RootClient
=
RootClient
;
RootClient
.
prototype
=
{
constructor
:
RootClient
getRoot
:
DebuggerClient
.
requester
(
{
type
:
"
getRoot
"
}
)
listTabs
:
DebuggerClient
.
requester
(
{
type
:
"
listTabs
"
options
:
arg
(
0
)
}
)
listAddons
:
DebuggerClient
.
requester
(
{
type
:
"
listAddons
"
}
)
listWorkers
:
DebuggerClient
.
requester
(
{
type
:
"
listWorkers
"
}
)
listServiceWorkerRegistrations
:
DebuggerClient
.
requester
(
{
type
:
"
listServiceWorkerRegistrations
"
}
)
listProcesses
:
DebuggerClient
.
requester
(
{
type
:
"
listProcesses
"
}
)
getTab
:
function
(
filter
)
{
let
packet
=
{
to
:
this
.
actor
type
:
"
getTab
"
}
;
if
(
filter
)
{
if
(
typeof
(
filter
.
outerWindowID
)
=
=
"
number
"
)
{
packet
.
outerWindowID
=
filter
.
outerWindowID
;
}
else
if
(
typeof
(
filter
.
tabId
)
=
=
"
number
"
)
{
packet
.
tabId
=
filter
.
tabId
;
}
else
if
(
"
tab
"
in
filter
)
{
let
browser
=
filter
.
tab
.
linkedBrowser
;
if
(
browser
.
frameLoader
.
tabParent
)
{
packet
.
tabId
=
browser
.
frameLoader
.
tabParent
.
tabId
;
}
else
if
(
browser
.
outerWindowID
)
{
packet
.
outerWindowID
=
browser
.
outerWindowID
;
}
else
{
let
windowUtils
=
browser
.
contentWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
packet
.
outerWindowID
=
windowUtils
.
outerWindowID
;
}
}
else
{
throw
new
Error
(
"
Unsupported
argument
given
to
getTab
request
"
)
;
}
}
return
this
.
request
(
packet
)
;
}
getWindow
:
function
(
{
outerWindowID
}
)
{
if
(
!
outerWindowID
)
{
throw
new
Error
(
"
Must
specify
outerWindowID
"
)
;
}
let
packet
=
{
to
:
this
.
actor
type
:
"
getWindow
"
outerWindowID
}
;
return
this
.
request
(
packet
)
;
}
protocolDescription
:
DebuggerClient
.
requester
(
{
type
:
"
protocolDescription
"
}
)
get
_transport
(
)
{
return
this
.
_client
.
_transport
;
}
get
request
(
)
{
return
this
.
_client
.
request
;
}
}
;
module
.
exports
=
RootClient
;
