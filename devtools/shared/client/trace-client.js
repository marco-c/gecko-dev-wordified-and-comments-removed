"
use
strict
"
;
const
{
arg
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
debugger
-
client
"
)
;
function
TraceClient
(
client
actor
)
{
this
.
_client
=
client
;
this
.
_actor
=
actor
;
this
.
_activeTraces
=
new
Set
(
)
;
this
.
_waitingPackets
=
new
Map
(
)
;
this
.
_expectedPacket
=
0
;
this
.
request
=
this
.
_client
.
request
;
this
.
events
=
[
]
;
}
TraceClient
.
prototype
=
{
get
actor
(
)
{
return
this
.
_actor
;
}
get
tracing
(
)
{
return
this
.
_activeTraces
.
size
>
0
;
}
get
_transport
(
)
{
return
this
.
_client
.
_transport
;
}
detach
:
DebuggerClient
.
requester
(
{
type
:
"
detach
"
}
{
after
:
function
(
response
)
{
this
.
_client
.
unregisterClient
(
this
)
;
return
response
;
}
}
)
startTrace
:
DebuggerClient
.
requester
(
{
type
:
"
startTrace
"
name
:
arg
(
1
)
trace
:
arg
(
0
)
}
{
after
:
function
(
response
)
{
if
(
response
.
error
)
{
return
response
;
}
if
(
!
this
.
tracing
)
{
this
.
_waitingPackets
.
clear
(
)
;
this
.
_expectedPacket
=
0
;
}
this
.
_activeTraces
.
add
(
response
.
name
)
;
return
response
;
}
}
)
stopTrace
:
DebuggerClient
.
requester
(
{
type
:
"
stopTrace
"
name
:
arg
(
0
)
}
{
after
:
function
(
response
)
{
if
(
response
.
error
)
{
return
response
;
}
this
.
_activeTraces
.
delete
(
response
.
name
)
;
return
response
;
}
}
)
}
;
module
.
exports
=
TraceClient
;
