"
use
strict
"
;
const
{
arg
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
debugger
-
client
"
)
;
loader
.
lazyRequireGetter
(
this
"
PropertyIteratorClient
"
"
devtools
/
shared
/
client
/
property
-
iterator
-
client
"
)
;
loader
.
lazyRequireGetter
(
this
"
SymbolIteratorClient
"
"
devtools
/
shared
/
client
/
symbol
-
iterator
-
client
"
)
;
function
ObjectClient
(
client
grip
)
{
this
.
_grip
=
grip
;
this
.
_client
=
client
;
this
.
request
=
this
.
_client
.
request
;
}
ObjectClient
.
prototype
=
{
get
actor
(
)
{
return
this
.
_grip
.
actor
;
}
get
_transport
(
)
{
return
this
.
_client
.
_transport
;
}
valid
:
true
get
isFrozen
(
)
{
return
this
.
_grip
.
frozen
;
}
get
isSealed
(
)
{
return
this
.
_grip
.
sealed
;
}
get
isExtensible
(
)
{
return
this
.
_grip
.
extensible
;
}
getDefinitionSite
:
DebuggerClient
.
requester
(
{
type
:
"
definitionSite
"
}
{
before
:
function
(
packet
)
{
if
(
this
.
_grip
.
class
!
=
"
Function
"
)
{
throw
new
Error
(
"
getDefinitionSite
is
only
valid
for
function
grips
.
"
)
;
}
return
packet
;
}
}
)
getParameterNames
:
DebuggerClient
.
requester
(
{
type
:
"
parameterNames
"
}
{
before
:
function
(
packet
)
{
if
(
this
.
_grip
.
class
!
=
=
"
Function
"
)
{
throw
new
Error
(
"
getParameterNames
is
only
valid
for
function
grips
.
"
)
;
}
return
packet
;
}
}
)
getOwnPropertyNames
:
DebuggerClient
.
requester
(
{
type
:
"
ownPropertyNames
"
}
)
getPrototypeAndProperties
:
DebuggerClient
.
requester
(
{
type
:
"
prototypeAndProperties
"
}
)
enumProperties
:
DebuggerClient
.
requester
(
{
type
:
"
enumProperties
"
options
:
arg
(
0
)
}
{
after
:
function
(
response
)
{
if
(
response
.
iterator
)
{
return
{
iterator
:
new
PropertyIteratorClient
(
this
.
_client
response
.
iterator
)
}
;
}
return
response
;
}
}
)
enumEntries
:
DebuggerClient
.
requester
(
{
type
:
"
enumEntries
"
}
{
before
:
function
(
packet
)
{
if
(
!
[
"
Map
"
"
WeakMap
"
"
Set
"
"
WeakSet
"
"
Storage
"
]
.
includes
(
this
.
_grip
.
class
)
)
{
throw
new
Error
(
"
enumEntries
is
only
valid
for
Map
/
Set
/
Storage
-
like
grips
.
"
)
;
}
return
packet
;
}
after
:
function
(
response
)
{
if
(
response
.
iterator
)
{
return
{
iterator
:
new
PropertyIteratorClient
(
this
.
_client
response
.
iterator
)
}
;
}
return
response
;
}
}
)
enumSymbols
:
DebuggerClient
.
requester
(
{
type
:
"
enumSymbols
"
}
{
before
:
function
(
packet
)
{
if
(
this
.
_grip
.
type
!
=
=
"
object
"
)
{
throw
new
Error
(
"
enumSymbols
is
only
valid
for
objects
grips
.
"
)
;
}
return
packet
;
}
after
:
function
(
response
)
{
if
(
response
.
iterator
)
{
return
{
iterator
:
new
SymbolIteratorClient
(
this
.
_client
response
.
iterator
)
}
;
}
return
response
;
}
}
)
getProperty
:
DebuggerClient
.
requester
(
{
type
:
"
property
"
name
:
arg
(
0
)
}
)
getPropertyValue
:
DebuggerClient
.
requester
(
{
type
:
"
propertyValue
"
name
:
arg
(
0
)
}
)
getPrototype
:
DebuggerClient
.
requester
(
{
type
:
"
prototype
"
}
)
getDisplayString
:
DebuggerClient
.
requester
(
{
type
:
"
displayString
"
}
)
getScope
:
DebuggerClient
.
requester
(
{
type
:
"
scope
"
}
{
before
:
function
(
packet
)
{
if
(
this
.
_grip
.
class
!
=
=
"
Function
"
)
{
throw
new
Error
(
"
scope
is
only
valid
for
function
grips
.
"
)
;
}
return
packet
;
}
}
)
getDependentPromises
:
DebuggerClient
.
requester
(
{
type
:
"
dependentPromises
"
}
{
before
:
function
(
packet
)
{
if
(
this
.
_grip
.
class
!
=
=
"
Promise
"
)
{
throw
new
Error
(
"
getDependentPromises
is
only
valid
for
promise
"
+
"
grips
.
"
)
;
}
return
packet
;
}
}
)
getPromiseAllocationStack
:
DebuggerClient
.
requester
(
{
type
:
"
allocationStack
"
}
{
before
:
function
(
packet
)
{
if
(
this
.
_grip
.
class
!
=
=
"
Promise
"
)
{
throw
new
Error
(
"
getAllocationStack
is
only
valid
for
promise
grips
.
"
)
;
}
return
packet
;
}
}
)
getPromiseFulfillmentStack
:
DebuggerClient
.
requester
(
{
type
:
"
fulfillmentStack
"
}
{
before
:
function
(
packet
)
{
if
(
this
.
_grip
.
class
!
=
=
"
Promise
"
)
{
throw
new
Error
(
"
getPromiseFulfillmentStack
is
only
valid
for
"
+
"
promise
grips
.
"
)
;
}
return
packet
;
}
}
)
getPromiseRejectionStack
:
DebuggerClient
.
requester
(
{
type
:
"
rejectionStack
"
}
{
before
:
function
(
packet
)
{
if
(
this
.
_grip
.
class
!
=
=
"
Promise
"
)
{
throw
new
Error
(
"
getPromiseRejectionStack
is
only
valid
for
"
+
"
promise
grips
.
"
)
;
}
return
packet
;
}
}
)
}
;
module
.
exports
=
ObjectClient
;
