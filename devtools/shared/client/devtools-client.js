"
use
strict
"
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
getStack
callFunctionWithAsyncStack
}
=
require
(
"
devtools
/
shared
/
platform
/
stack
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
UnsolicitedNotifications
}
=
require
(
"
devtools
/
shared
/
client
/
constants
"
)
;
loader
.
lazyRequireGetter
(
this
"
Authentication
"
"
devtools
/
shared
/
security
/
auth
"
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerSocket
"
"
devtools
/
shared
/
security
/
socket
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
loader
.
lazyRequireGetter
(
this
"
createRootFront
"
"
devtools
/
shared
/
protocol
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ObjectFront
"
"
devtools
/
client
/
fronts
/
object
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
Front
"
"
devtools
/
shared
/
protocol
"
true
)
;
function
DevToolsClient
(
transport
)
{
this
.
_transport
=
transport
;
this
.
_transport
.
hooks
=
this
;
this
.
_pendingRequests
=
new
Map
(
)
;
this
.
_activeRequests
=
new
Map
(
)
;
this
.
_eventsEnabled
=
true
;
this
.
traits
=
{
}
;
this
.
request
=
this
.
request
.
bind
(
this
)
;
this
.
mainRoot
=
null
;
this
.
expectReply
(
"
root
"
packet
=
>
{
if
(
packet
.
error
)
{
console
.
error
(
"
Error
when
waiting
for
root
actor
"
packet
)
;
return
;
}
this
.
mainRoot
=
createRootFront
(
this
packet
)
;
this
.
emit
(
"
connected
"
packet
.
applicationType
packet
.
traits
)
;
}
)
;
}
DevToolsClient
.
socketConnect
=
function
(
options
)
{
return
DebuggerSocket
.
connect
(
options
)
;
}
;
DevToolsUtils
.
defineLazyGetter
(
DevToolsClient
"
Authenticators
"
(
)
=
>
{
return
Authentication
.
Authenticators
;
}
)
;
DevToolsUtils
.
defineLazyGetter
(
DevToolsClient
"
AuthenticationResult
"
(
)
=
>
{
return
Authentication
.
AuthenticationResult
;
}
)
;
DevToolsClient
.
prototype
=
{
connect
(
)
{
return
new
Promise
(
resolve
=
>
{
this
.
once
(
"
connected
"
(
applicationType
traits
)
=
>
{
this
.
traits
=
traits
;
resolve
(
[
applicationType
traits
]
)
;
}
)
;
this
.
_transport
.
ready
(
)
;
}
)
;
}
close
(
)
{
const
promise
=
new
Promise
(
resolve
=
>
{
this
.
_eventsEnabled
=
false
;
const
cleanup
=
(
)
=
>
{
if
(
this
.
_transport
)
{
this
.
_transport
.
close
(
)
;
}
this
.
_transport
=
null
;
}
;
if
(
this
.
_closed
)
{
cleanup
(
)
;
resolve
(
)
;
return
;
}
this
.
once
(
"
closed
"
resolve
)
;
cleanup
(
)
;
}
)
;
return
promise
;
}
release
(
to
)
{
return
this
.
request
(
{
to
type
:
"
release
"
}
)
;
}
request
(
packet
onResponse
)
{
if
(
!
this
.
mainRoot
)
{
throw
Error
(
"
Have
not
yet
received
a
hello
packet
from
the
server
.
"
)
;
}
const
type
=
packet
.
type
|
|
"
"
;
if
(
!
packet
.
to
)
{
throw
Error
(
"
'
"
+
type
+
"
'
request
packet
has
no
destination
.
"
)
;
}
const
safeOnResponse
=
response
=
>
{
if
(
!
onResponse
)
{
return
response
;
}
return
onResponse
(
response
)
|
|
response
;
}
;
if
(
this
.
_closed
)
{
const
msg
=
"
'
"
+
type
+
"
'
request
packet
to
"
+
"
'
"
+
packet
.
to
+
"
'
"
+
"
can
'
t
be
sent
as
the
connection
is
closed
.
"
;
const
resp
=
{
error
:
"
connectionClosed
"
message
:
msg
}
;
return
Promise
.
reject
(
safeOnResponse
(
resp
)
)
;
}
const
request
=
new
Request
(
packet
)
;
request
.
format
=
"
json
"
;
request
.
stack
=
getStack
(
)
;
const
promise
=
new
Promise
(
(
resolve
reject
)
=
>
{
function
listenerJson
(
resp
)
{
removeRequestListeners
(
)
;
resp
=
safeOnResponse
(
resp
)
;
if
(
resp
.
error
)
{
reject
(
resp
)
;
}
else
{
resolve
(
resp
)
;
}
}
function
listenerBulk
(
resp
)
{
removeRequestListeners
(
)
;
resolve
(
safeOnResponse
(
resp
)
)
;
}
const
removeRequestListeners
=
(
)
=
>
{
request
.
off
(
"
json
-
reply
"
listenerJson
)
;
request
.
off
(
"
bulk
-
reply
"
listenerBulk
)
;
}
;
request
.
on
(
"
json
-
reply
"
listenerJson
)
;
request
.
on
(
"
bulk
-
reply
"
listenerBulk
)
;
}
)
;
this
.
_sendOrQueueRequest
(
request
)
;
request
.
then
=
promise
.
then
.
bind
(
promise
)
;
request
.
catch
=
promise
.
catch
.
bind
(
promise
)
;
return
request
;
}
startBulkRequest
(
request
)
{
if
(
!
this
.
traits
.
bulk
)
{
throw
Error
(
"
Server
doesn
'
t
support
bulk
transfers
"
)
;
}
if
(
!
this
.
mainRoot
)
{
throw
Error
(
"
Have
not
yet
received
a
hello
packet
from
the
server
.
"
)
;
}
if
(
!
request
.
type
)
{
throw
Error
(
"
Bulk
packet
is
missing
the
required
'
type
'
field
.
"
)
;
}
if
(
!
request
.
actor
)
{
throw
Error
(
"
'
"
+
request
.
type
+
"
'
bulk
packet
has
no
destination
.
"
)
;
}
if
(
!
request
.
length
)
{
throw
Error
(
"
'
"
+
request
.
type
+
"
'
bulk
packet
has
no
length
.
"
)
;
}
request
=
new
Request
(
request
)
;
request
.
format
=
"
bulk
"
;
this
.
_sendOrQueueRequest
(
request
)
;
return
request
;
}
_sendOrQueueRequest
(
request
)
{
const
actor
=
request
.
actor
;
if
(
!
this
.
_activeRequests
.
has
(
actor
)
)
{
this
.
_sendRequest
(
request
)
;
}
else
{
this
.
_queueRequest
(
request
)
;
}
}
_sendRequest
(
request
)
{
const
actor
=
request
.
actor
;
this
.
expectReply
(
actor
request
)
;
if
(
request
.
format
=
=
=
"
json
"
)
{
this
.
_transport
.
send
(
request
.
request
)
;
return
;
}
this
.
_transport
.
startBulkSend
(
request
.
request
)
.
then
(
(
.
.
.
args
)
=
>
{
request
.
emit
(
"
bulk
-
send
-
ready
"
.
.
.
args
)
;
}
)
;
}
_queueRequest
(
request
)
{
const
actor
=
request
.
actor
;
const
queue
=
this
.
_pendingRequests
.
get
(
actor
)
|
|
[
]
;
queue
.
push
(
request
)
;
this
.
_pendingRequests
.
set
(
actor
queue
)
;
}
_attemptNextRequest
(
actor
)
{
if
(
this
.
_activeRequests
.
has
(
actor
)
)
{
return
;
}
const
queue
=
this
.
_pendingRequests
.
get
(
actor
)
;
if
(
!
queue
)
{
return
;
}
const
request
=
queue
.
shift
(
)
;
if
(
queue
.
length
=
=
=
0
)
{
this
.
_pendingRequests
.
delete
(
actor
)
;
}
this
.
_sendRequest
(
request
)
;
}
expectReply
(
actor
request
)
{
if
(
this
.
_activeRequests
.
has
(
actor
)
)
{
throw
Error
(
"
clashing
handlers
for
next
reply
from
"
+
actor
)
;
}
if
(
typeof
request
=
=
=
"
function
"
)
{
const
handler
=
request
;
request
=
new
Request
(
)
;
request
.
on
(
"
json
-
reply
"
handler
)
;
}
this
.
_activeRequests
.
set
(
actor
request
)
;
}
onPacket
(
packet
)
{
if
(
!
packet
.
from
)
{
DevToolsUtils
.
reportException
(
"
onPacket
"
new
Error
(
"
Server
did
not
specify
an
actor
dropping
packet
:
"
+
JSON
.
stringify
(
packet
)
)
)
;
return
;
}
if
(
this
.
mainRoot
&
&
packet
.
from
=
=
this
.
mainRoot
.
actorID
&
&
packet
.
type
=
=
"
forwardingCancelled
"
)
{
this
.
purgeRequests
(
packet
.
prefix
)
;
return
;
}
const
front
=
this
.
getFrontByID
(
packet
.
from
)
;
if
(
front
)
{
front
.
onPacket
(
packet
)
;
return
;
}
let
activeRequest
;
if
(
this
.
_activeRequests
.
has
(
packet
.
from
)
&
&
!
(
packet
.
type
in
UnsolicitedNotifications
)
)
{
activeRequest
=
this
.
_activeRequests
.
get
(
packet
.
from
)
;
this
.
_activeRequests
.
delete
(
packet
.
from
)
;
}
this
.
_attemptNextRequest
(
packet
.
from
)
;
if
(
packet
.
type
)
{
this
.
emit
(
packet
.
type
packet
)
;
}
if
(
activeRequest
)
{
const
emitReply
=
(
)
=
>
activeRequest
.
emit
(
"
json
-
reply
"
packet
)
;
if
(
activeRequest
.
stack
)
{
callFunctionWithAsyncStack
(
emitReply
activeRequest
.
stack
"
DevTools
RDP
"
)
;
}
else
{
emitReply
(
)
;
}
}
}
onBulkPacket
(
packet
)
{
const
{
actor
}
=
packet
;
if
(
!
actor
)
{
DevToolsUtils
.
reportException
(
"
onBulkPacket
"
new
Error
(
"
Server
did
not
specify
an
actor
dropping
bulk
packet
:
"
+
JSON
.
stringify
(
packet
)
)
)
;
return
;
}
if
(
!
this
.
_activeRequests
.
has
(
actor
)
)
{
return
;
}
const
activeRequest
=
this
.
_activeRequests
.
get
(
actor
)
;
this
.
_activeRequests
.
delete
(
actor
)
;
this
.
_attemptNextRequest
(
actor
)
;
activeRequest
.
emit
(
"
bulk
-
reply
"
packet
)
;
}
onClosed
(
)
{
if
(
this
.
_closed
)
{
return
;
}
this
.
_closed
=
true
;
this
.
emit
(
"
closed
"
)
;
this
.
purgeRequests
(
)
;
for
(
const
pool
of
this
.
_pools
)
{
pool
.
cleanup
(
)
;
}
}
purgeRequests
(
prefix
=
"
"
)
{
const
reject
=
function
(
type
request
)
{
let
msg
;
if
(
request
.
request
)
{
msg
=
"
'
"
+
request
.
request
.
type
+
"
'
"
+
type
+
"
request
packet
"
+
"
to
'
"
+
request
.
actor
+
"
'
"
+
"
can
'
t
be
sent
as
the
connection
just
closed
.
"
;
}
else
{
msg
=
"
server
side
packet
can
'
t
be
received
as
the
connection
just
closed
.
"
;
}
const
packet
=
{
error
:
"
connectionClosed
"
message
:
msg
}
;
request
.
emit
(
"
json
-
reply
"
packet
)
;
}
;
let
pendingRequestsToReject
=
[
]
;
this
.
_pendingRequests
.
forEach
(
(
requests
actor
)
=
>
{
if
(
!
actor
.
startsWith
(
prefix
)
)
{
return
;
}
this
.
_pendingRequests
.
delete
(
actor
)
;
pendingRequestsToReject
=
pendingRequestsToReject
.
concat
(
requests
)
;
}
)
;
pendingRequestsToReject
.
forEach
(
request
=
>
reject
(
"
pending
"
request
)
)
;
let
activeRequestsToReject
=
[
]
;
this
.
_activeRequests
.
forEach
(
(
request
actor
)
=
>
{
if
(
!
actor
.
startsWith
(
prefix
)
)
{
return
;
}
this
.
_activeRequests
.
delete
(
actor
)
;
activeRequestsToReject
=
activeRequestsToReject
.
concat
(
request
)
;
}
)
;
activeRequestsToReject
.
forEach
(
request
=
>
reject
(
"
active
"
request
)
)
;
}
waitForRequestsToSettle
(
)
{
let
requests
=
[
]
;
this
.
_pendingRequests
.
forEach
(
requestsForActor
=
>
{
requests
=
requests
.
concat
(
requestsForActor
)
;
}
)
;
this
.
_activeRequests
.
forEach
(
requestForActor
=
>
{
requests
=
requests
.
concat
(
requestForActor
)
;
}
)
;
const
fronts
=
new
Set
(
)
;
const
poolsToVisit
=
[
.
.
.
this
.
_pools
]
;
while
(
poolsToVisit
.
length
)
{
const
pool
=
poolsToVisit
.
shift
(
)
;
if
(
pool
instanceof
Front
)
{
fronts
.
add
(
pool
)
;
}
for
(
const
child
of
pool
.
poolChildren
(
)
)
{
poolsToVisit
.
push
(
child
)
;
}
}
for
(
const
front
of
fronts
)
{
if
(
front
.
hasRequests
(
)
)
{
requests
.
push
(
front
.
waitForRequestsToSettle
(
)
)
;
}
}
if
(
!
requests
.
length
)
{
return
Promise
.
resolve
(
)
;
}
return
DevToolsUtils
.
settleAll
(
requests
)
.
catch
(
(
)
=
>
{
}
)
.
then
(
(
)
=
>
{
return
this
.
waitForRequestsToSettle
(
)
;
}
)
;
}
__pools
:
null
get
_pools
(
)
{
if
(
this
.
__pools
)
{
return
this
.
__pools
;
}
this
.
__pools
=
new
Set
(
)
;
return
this
.
__pools
;
}
addActorPool
(
pool
)
{
this
.
_pools
.
add
(
pool
)
;
}
removeActorPool
(
pool
)
{
this
.
_pools
.
delete
(
pool
)
;
}
getFrontByID
(
actorID
)
{
const
pool
=
this
.
poolFor
(
actorID
)
;
return
pool
?
pool
.
get
(
actorID
)
:
null
;
}
poolFor
(
actorID
)
{
for
(
const
pool
of
this
.
_pools
)
{
if
(
pool
.
has
(
actorID
)
)
{
return
pool
;
}
}
return
null
;
}
createObjectFront
(
grip
threadFront
)
{
return
new
ObjectFront
(
this
threadFront
.
targetFront
threadFront
grip
)
;
}
get
transport
(
)
{
return
this
.
_transport
;
}
dumpPools
(
)
{
for
(
const
pool
of
this
.
_pools
)
{
console
.
log
(
%
c
{
pool
.
actorID
}
"
font
-
weight
:
bold
;
"
[
.
.
.
pool
.
__poolMap
.
keys
(
)
]
)
;
}
}
}
;
EventEmitter
.
decorate
(
DevToolsClient
.
prototype
)
;
class
Request
extends
EventEmitter
{
constructor
(
request
)
{
super
(
)
;
this
.
request
=
request
;
}
get
actor
(
)
{
return
this
.
request
.
to
|
|
this
.
request
.
actor
;
}
}
module
.
exports
=
{
DevToolsClient
}
;
