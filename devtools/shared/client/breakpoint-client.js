"
use
strict
"
;
const
promise
=
require
(
"
devtools
/
shared
/
deprecated
-
sync
-
thenables
"
)
;
const
eventSource
=
require
(
"
devtools
/
shared
/
client
/
event
-
source
"
)
;
const
{
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
debugger
-
client
"
)
;
function
BreakpointClient
(
client
sourceClient
actor
location
condition
)
{
this
.
_client
=
client
;
this
.
_actor
=
actor
;
this
.
location
=
location
;
this
.
location
.
actor
=
sourceClient
.
actor
;
this
.
location
.
url
=
sourceClient
.
url
;
this
.
source
=
sourceClient
;
this
.
request
=
this
.
_client
.
request
;
if
(
condition
)
{
this
.
condition
=
condition
;
}
}
BreakpointClient
.
prototype
=
{
_actor
:
null
get
actor
(
)
{
return
this
.
_actor
;
}
get
_transport
(
)
{
return
this
.
_client
.
_transport
;
}
remove
:
DebuggerClient
.
requester
(
{
type
:
"
delete
"
}
)
setCondition
:
function
(
gThreadClient
condition
)
{
const
deferred
=
promise
.
defer
(
)
;
const
info
=
{
line
:
this
.
location
.
line
column
:
this
.
location
.
column
condition
:
condition
}
;
this
.
remove
(
response
=
>
{
if
(
response
&
&
response
.
error
)
{
deferred
.
reject
(
response
)
;
return
;
}
deferred
.
resolve
(
this
.
source
.
setBreakpoint
(
info
)
.
then
(
(
[
newBreakpoint
]
)
=
>
{
return
newBreakpoint
;
}
)
)
;
}
)
;
return
deferred
.
promise
;
}
}
;
eventSource
(
BreakpointClient
.
prototype
)
;
module
.
exports
=
BreakpointClient
;
