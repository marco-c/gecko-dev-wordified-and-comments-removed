"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
function
ContentObserver
(
targetActor
)
{
this
.
_contentWindow
=
targetActor
.
window
;
this
.
_onContentGlobalCreated
=
this
.
_onContentGlobalCreated
.
bind
(
this
)
;
this
.
_onInnerWindowDestroyed
=
this
.
_onInnerWindowDestroyed
.
bind
(
this
)
;
this
.
startListening
(
)
;
}
module
.
exports
.
ContentObserver
=
ContentObserver
;
ContentObserver
.
prototype
=
{
startListening
:
function
(
)
{
Services
.
obs
.
addObserver
(
this
.
_onContentGlobalCreated
"
content
-
document
-
global
-
created
"
)
;
Services
.
obs
.
addObserver
(
this
.
_onInnerWindowDestroyed
"
inner
-
window
-
destroyed
"
)
;
}
stopListening
:
function
(
)
{
Services
.
obs
.
removeObserver
(
this
.
_onContentGlobalCreated
"
content
-
document
-
global
-
created
"
)
;
Services
.
obs
.
removeObserver
(
this
.
_onInnerWindowDestroyed
"
inner
-
window
-
destroyed
"
)
;
}
_onContentGlobalCreated
:
function
(
subject
topic
data
)
{
if
(
subject
=
=
this
.
_contentWindow
)
{
EventEmitter
.
emit
(
this
"
global
-
created
"
subject
)
;
}
}
_onInnerWindowDestroyed
:
function
(
subject
topic
data
)
{
const
id
=
subject
.
QueryInterface
(
Ci
.
nsISupportsPRUint64
)
.
data
;
EventEmitter
.
emit
(
this
"
global
-
destroyed
"
id
)
;
}
}
;
ContentObserver
.
GetInnerWindowID
=
function
(
window
)
{
return
window
.
windowGlobalChild
.
innerWindowId
;
}
;
