"
use
strict
"
;
var
{
Loader
Require
resolveURI
unload
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
base
-
loader
.
js
"
)
;
var
{
requireRawId
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
loader
-
plugin
-
raw
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
EXPORTED_SYMBOLS
=
[
"
DevToolsLoader
"
"
useDistinctSystemPrincipalLoader
"
"
releaseDistinctSystemPrincipalLoader
"
"
require
"
"
loader
"
"
StructuredCloneHolder
"
]
;
var
gNextLoaderID
=
0
;
var
systemLoader
=
null
;
var
systemLoaderRequesters
=
new
Set
(
)
;
function
useDistinctSystemPrincipalLoader
(
requester
)
{
if
(
!
systemLoader
)
{
systemLoader
=
new
DevToolsLoader
(
{
invisibleToDebugger
:
true
}
)
;
systemLoaderRequesters
.
clear
(
)
;
}
systemLoaderRequesters
.
add
(
requester
)
;
return
systemLoader
;
}
function
releaseDistinctSystemPrincipalLoader
(
requester
)
{
systemLoaderRequesters
.
delete
(
requester
)
;
if
(
systemLoaderRequesters
.
size
=
=
0
)
{
systemLoader
.
destroy
(
)
;
systemLoader
=
null
;
}
}
function
DevToolsLoader
(
{
invisibleToDebugger
=
false
freshCompartment
=
false
}
=
{
}
)
{
const
paths
=
{
"
damp
-
test
"
:
"
resource
:
/
/
damp
-
test
/
content
"
devtools
:
"
resource
:
/
/
devtools
"
"
xpcshell
-
test
"
:
"
resource
:
/
/
test
"
"
devtools
/
client
/
locales
"
:
"
chrome
:
/
/
devtools
/
locale
"
"
devtools
/
shared
/
locales
"
:
"
chrome
:
/
/
devtools
-
shared
/
locale
"
"
devtools
/
startup
/
locales
"
:
"
chrome
:
/
/
devtools
-
startup
/
locale
"
"
toolkit
/
locales
"
:
"
chrome
:
/
/
global
/
locale
"
.
.
.
this
.
devPaths
}
;
this
.
loader
=
new
Loader
(
{
paths
invisibleToDebugger
freshCompartment
sandboxName
:
"
DevTools
(
Module
loader
)
"
supportAMDModules
:
true
requireHook
:
(
id
require
)
=
>
{
if
(
id
.
startsWith
(
"
raw
!
"
)
|
|
id
.
startsWith
(
"
theme
-
loader
!
"
)
)
{
return
requireRawId
(
id
require
)
;
}
return
require
(
id
)
;
}
}
)
;
this
.
require
=
Require
(
this
.
loader
{
id
:
"
devtools
"
}
)
;
const
{
modules
globals
}
=
this
.
require
(
"
devtools
/
shared
/
loader
/
builtin
-
modules
"
)
;
for
(
const
id
in
modules
)
{
const
uri
=
resolveURI
(
id
this
.
loader
.
mapping
)
;
this
.
loader
.
modules
[
uri
]
=
{
get
exports
(
)
{
return
modules
[
id
]
;
}
}
;
}
Object
.
defineProperties
(
this
.
loader
.
globals
Object
.
getOwnPropertyDescriptors
(
globals
)
)
;
this
.
id
=
gNextLoaderID
+
+
;
globals
.
loader
.
id
=
this
.
id
;
this
.
lazyGetter
=
globals
.
loader
.
lazyGetter
;
this
.
lazyImporter
=
globals
.
loader
.
lazyImporter
;
this
.
lazyServiceGetter
=
globals
.
loader
.
lazyServiceGetter
;
this
.
lazyRequireGetter
=
globals
.
loader
.
lazyRequireGetter
;
}
DevToolsLoader
.
prototype
=
{
get
devPaths
(
)
{
if
(
AppConstants
.
DEBUG_JS_MODULES
)
{
return
{
"
devtools
/
client
/
shared
/
vendor
/
react
"
:
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dev
"
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
"
:
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
dev
"
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
server
"
:
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
server
-
dev
"
"
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
"
:
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
prop
-
types
-
dev
"
"
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
test
-
utils
"
:
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
-
test
-
utils
-
dev
"
}
;
}
return
{
}
;
}
destroy
(
reason
=
"
shutdown
"
)
{
unload
(
this
.
loader
reason
)
;
delete
this
.
loader
;
}
isLoaderPluginId
(
id
)
{
return
id
.
startsWith
(
"
raw
!
"
)
;
}
}
;
var
loader
=
new
DevToolsLoader
(
{
invisibleToDebugger
:
Services
.
appinfo
.
name
!
=
=
"
Firefox
"
}
)
;
var
require
=
loader
.
require
;
