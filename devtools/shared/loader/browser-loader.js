"
use
strict
"
;
const
BaseLoader
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
base
-
loader
.
js
"
)
;
const
{
require
:
devtoolsRequire
loader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
jsm
"
)
;
const
flags
=
devtoolsRequire
(
"
devtools
/
shared
/
flags
"
)
;
const
{
joinURI
}
=
devtoolsRequire
(
"
devtools
/
shared
/
path
"
)
;
const
{
assert
}
=
devtoolsRequire
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
lazy
=
{
}
;
loader
.
lazyRequireGetter
(
lazy
"
getMockedModule
"
"
devtools
/
shared
/
loader
/
browser
-
loader
-
mocks
"
{
}
)
;
const
BROWSER_BASED_DIRS
=
[
"
resource
:
/
/
devtools
/
client
/
inspector
/
boxmodel
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
changes
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
computed
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
events
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
flexbox
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
fonts
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
grids
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
layout
"
"
resource
:
/
/
devtools
/
client
/
inspector
/
markup
"
"
resource
:
/
/
devtools
/
client
/
jsonview
"
"
resource
:
/
/
devtools
/
client
/
netmonitor
/
src
/
utils
"
"
resource
:
/
/
devtools
/
client
/
shared
/
fluent
-
l10n
"
"
resource
:
/
/
devtools
/
client
/
shared
/
source
-
map
"
"
resource
:
/
/
devtools
/
client
/
shared
/
redux
"
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
"
"
resource
:
/
/
devtools
/
client
/
shared
/
worker
-
utils
"
]
;
const
COMMON_LIBRARY_DIRS
=
[
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
"
]
;
const
browserBasedDirsRegExp
=
/
^
resource
\
:
\
/
\
/
devtools
\
/
client
\
/
\
S
*
\
/
components
\
/
/
;
function
BrowserLoader
(
options
)
{
const
browserLoaderBuilder
=
new
BrowserLoaderBuilder
(
options
)
;
return
{
loader
:
browserLoaderBuilder
.
loader
require
:
browserLoaderBuilder
.
require
}
;
}
function
BrowserLoaderBuilder
(
{
baseURI
commonLibRequire
useOnlyShared
window
}
)
{
assert
(
!
!
baseURI
!
=
=
!
!
useOnlyShared
"
Cannot
use
both
baseURI
and
useOnlyShared
.
"
)
;
const
loaderOptions
=
devtoolsRequire
(
"
loader
/
options
"
)
;
const
opts
=
{
sandboxPrototype
:
window
sandboxName
:
"
DevTools
(
UI
loader
)
"
paths
:
loaderOptions
.
paths
invisibleToDebugger
:
loaderOptions
.
invisibleToDebugger
supportAMDModules
:
true
requireHook
:
(
id
require
)
=
>
{
if
(
loader
.
isLoaderPluginId
(
id
)
)
{
return
devtoolsRequire
(
id
)
;
}
const
uri
=
require
.
resolve
(
id
)
;
if
(
flags
.
testing
&
&
lazy
.
getMockedModule
(
uri
)
)
{
return
lazy
.
getMockedModule
(
uri
)
;
}
if
(
commonLibRequire
&
&
COMMON_LIBRARY_DIRS
.
some
(
dir
=
>
uri
.
startsWith
(
dir
)
)
)
{
return
commonLibRequire
(
uri
)
;
}
const
isBrowserDir
=
BROWSER_BASED_DIRS
.
some
(
dir
=
>
uri
.
startsWith
(
dir
)
)
|
|
uri
.
match
(
browserBasedDirsRegExp
)
!
=
null
;
if
(
(
useOnlyShared
|
|
!
uri
.
startsWith
(
baseURI
)
)
&
&
!
isBrowserDir
)
{
return
devtoolsRequire
(
uri
)
;
}
return
require
(
uri
)
;
}
globals
:
{
console
:
window
.
console
loader
:
{
lazyGetter
:
loader
.
lazyGetter
lazyImporter
:
loader
.
lazyImporter
lazyServiceGetter
:
loader
.
lazyServiceGetter
lazyRequireGetter
:
this
.
lazyRequireGetter
.
bind
(
this
)
}
}
}
;
const
mainModule
=
BaseLoader
.
Module
(
baseURI
joinURI
(
baseURI
"
main
.
js
"
)
)
;
this
.
loader
=
BaseLoader
.
Loader
(
opts
)
;
if
(
flags
.
testing
)
{
window
.
getBrowserLoaderForWindow
=
(
)
=
>
this
;
}
this
.
require
=
BaseLoader
.
Require
(
this
.
loader
mainModule
)
;
}
BrowserLoaderBuilder
.
prototype
=
{
lazyRequireGetter
:
function
(
obj
properties
module
destructure
)
{
if
(
Array
.
isArray
(
properties
)
&
&
!
destructure
)
{
throw
new
Error
(
"
Pass
destructure
=
true
to
call
lazyRequireGetter
with
an
array
of
properties
"
)
;
}
if
(
!
Array
.
isArray
(
properties
)
)
{
properties
=
[
properties
]
;
}
for
(
const
property
of
properties
)
{
loader
.
lazyGetter
(
obj
property
(
)
=
>
{
return
destructure
?
this
.
require
(
module
)
[
property
]
:
this
.
require
(
module
|
|
property
)
;
}
)
;
}
}
}
;
this
.
BrowserLoader
=
BrowserLoader
;
this
.
EXPORTED_SYMBOLS
=
[
"
BrowserLoader
"
]
;
