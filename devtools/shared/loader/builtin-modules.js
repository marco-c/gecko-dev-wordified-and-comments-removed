"
use
strict
"
;
const
{
Cu
Cc
Ci
Services
}
=
require
(
"
chrome
"
)
;
const
jsmScope
=
require
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
jsm
"
)
;
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
const
{
CanonicalBrowsingContext
BrowsingContext
WebExtensionPolicy
WindowGlobalParent
WindowGlobalChild
console
DebuggerNotificationObserver
DOMPoint
DOMQuad
DOMRect
HeapSnapshot
IOUtils
L10nRegistry
Localization
NamedNodeMap
NodeFilter
PathUtils
StructuredCloneHolder
TelemetryStopwatch
}
=
Cu
.
getGlobalForObject
(
jsmScope
)
;
const
debuggerSandbox
=
(
exports
.
internalSandbox
=
Cu
.
Sandbox
(
systemPrincipal
{
freshCompartment
:
true
wantGlobalProperties
:
[
"
AbortController
"
"
atob
"
"
btoa
"
"
Blob
"
"
ChromeUtils
"
"
crypto
"
"
CSS
"
"
CSSRule
"
"
DOMParser
"
"
Element
"
"
Event
"
"
FileReader
"
"
FormData
"
"
indexedDB
"
"
InspectorUtils
"
"
Node
"
"
TextDecoder
"
"
TextEncoder
"
"
URL
"
"
URLSearchParams
"
"
Window
"
"
XMLHttpRequest
"
]
}
)
)
;
const
{
AbortController
atob
btoa
Blob
ChromeUtils
crypto
CSS
CSSRule
DOMParser
Element
Event
FileReader
FormData
indexedDB
InspectorUtils
Node
TextDecoder
TextEncoder
URL
URLSearchParams
Window
XMLHttpRequest
}
=
debuggerSandbox
;
function
defineLazyGetter
(
object
name
lambda
)
{
Object
.
defineProperty
(
object
name
{
get
:
function
(
)
{
delete
object
[
name
]
;
const
value
=
lambda
.
apply
(
object
)
;
Object
.
defineProperty
(
object
name
{
value
writable
:
true
configurable
:
true
enumerable
:
true
}
)
;
return
value
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
function
defineLazyServiceGetter
(
object
name
contract
interfaceName
)
{
defineLazyGetter
(
object
name
function
(
)
{
return
Cc
[
contract
]
.
getService
(
Ci
[
interfaceName
]
)
;
}
)
;
}
function
defineLazyModuleGetter
(
object
name
resource
)
{
defineLazyGetter
(
object
name
function
(
)
{
try
{
return
ChromeUtils
.
import
(
resource
)
[
name
]
;
}
catch
(
ex
)
{
Cu
.
reportError
(
"
Failed
to
load
module
"
+
resource
+
"
.
"
)
;
throw
ex
;
}
}
)
;
}
function
lazyRequireGetter
(
obj
properties
module
destructure
)
{
if
(
Array
.
isArray
(
properties
)
&
&
!
destructure
)
{
throw
new
Error
(
"
Pass
destructure
=
true
to
call
lazyRequireGetter
with
an
array
of
properties
"
)
;
}
if
(
!
Array
.
isArray
(
properties
)
)
{
properties
=
[
properties
]
;
}
for
(
const
property
of
properties
)
{
defineLazyGetter
(
obj
property
(
)
=
>
{
return
destructure
?
require
(
module
)
[
property
]
:
require
(
module
|
|
property
)
;
}
)
;
}
}
exports
.
modules
=
{
ChromeUtils
DebuggerNotificationObserver
HeapSnapshot
InspectorUtils
Promise
Services
:
Object
.
create
(
Services
)
TelemetryStopwatch
}
;
defineLazyGetter
(
exports
.
modules
"
Debugger
"
(
)
=
>
{
const
global
=
Cu
.
getGlobalForObject
(
this
)
;
if
(
global
.
Debugger
)
{
return
global
.
Debugger
;
}
const
{
addDebuggerToGlobal
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
"
)
;
addDebuggerToGlobal
(
global
)
;
return
global
.
Debugger
;
}
)
;
defineLazyGetter
(
exports
.
modules
"
ChromeDebugger
"
(
)
=
>
{
const
{
addDebuggerToGlobal
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
"
)
;
addDebuggerToGlobal
(
debuggerSandbox
)
;
return
debuggerSandbox
.
Debugger
;
}
)
;
defineLazyGetter
(
exports
.
modules
"
xpcInspector
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
jsinspector
;
1
"
]
.
getService
(
Ci
.
nsIJSInspector
)
;
}
)
;
exports
.
globals
=
{
AbortController
atob
Blob
btoa
CanonicalBrowsingContext
BrowsingContext
WebExtensionPolicy
WindowGlobalParent
WindowGlobalChild
console
crypto
CSS
CSSRule
DOMParser
DOMPoint
DOMQuad
Event
NamedNodeMap
NodeFilter
DOMRect
Element
FileReader
FormData
IOUtils
isWorker
:
false
L10nRegistry
loader
:
{
lazyGetter
:
defineLazyGetter
lazyImporter
:
defineLazyModuleGetter
lazyServiceGetter
:
defineLazyServiceGetter
lazyRequireGetter
:
lazyRequireGetter
id
:
null
}
Localization
Node
PathUtils
reportError
:
Cu
.
reportError
StructuredCloneHolder
TextDecoder
TextEncoder
URL
URLSearchParams
Window
XMLHttpRequest
}
;
const
globals
=
{
}
;
function
lazyGlobal
(
name
getter
)
{
defineLazyGetter
(
globals
name
getter
)
;
Object
.
defineProperty
(
exports
.
globals
name
{
get
:
function
(
)
{
return
globals
[
name
]
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
lazyGlobal
(
"
clearTimeout
"
(
)
=
>
{
return
require
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
.
clearTimeout
;
}
)
;
lazyGlobal
(
"
setTimeout
"
(
)
=
>
{
return
require
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
.
setTimeout
;
}
)
;
lazyGlobal
(
"
clearInterval
"
(
)
=
>
{
return
require
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
.
clearInterval
;
}
)
;
lazyGlobal
(
"
setInterval
"
(
)
=
>
{
return
require
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
.
setInterval
;
}
)
;
lazyGlobal
(
"
WebSocket
"
(
)
=
>
{
return
Services
.
appShell
.
hiddenDOMWindow
.
WebSocket
;
}
)
;
lazyGlobal
(
"
indexedDB
"
(
)
=
>
{
return
require
(
"
devtools
/
shared
/
indexed
-
db
"
)
.
createDevToolsIndexedDB
(
indexedDB
)
;
}
)
;
