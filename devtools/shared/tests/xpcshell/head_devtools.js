"
use
strict
"
;
const
{
require
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
jsm
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
testing
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
testing
"
)
;
}
)
;
var
ALLOW_CONSOLE_ERRORS
=
false
;
var
listener
=
{
observe
(
message
)
{
let
string
;
try
{
message
.
QueryInterface
(
Ci
.
nsIScriptError
)
;
dump
(
message
.
sourceName
+
"
:
"
+
message
.
lineNumber
+
"
:
"
+
scriptErrorFlagsToKind
(
message
.
flags
)
+
"
:
"
+
message
.
errorMessage
+
"
\
n
"
)
;
string
=
message
.
errorMessage
;
}
catch
(
ex
)
{
try
{
string
=
"
"
+
message
.
message
;
}
catch
(
e
)
{
string
=
"
<
error
converting
error
message
to
string
>
"
;
}
}
while
(
DevToolsServer
.
xpcInspector
.
eventLoopNestLevel
>
0
)
{
DevToolsServer
.
xpcInspector
.
exitNestedEventLoop
(
)
;
}
if
(
!
ALLOW_CONSOLE_ERRORS
)
{
do_throw
(
"
head_devtools
.
js
got
console
message
:
"
+
string
+
"
\
n
"
)
;
}
}
}
;
Services
.
console
.
registerListener
(
listener
)
;
