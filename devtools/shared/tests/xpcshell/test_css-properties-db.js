"
use
strict
"
;
const
{
PSEUDO_ELEMENTS
CSS_PROPERTIES
PREFERENCES
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
css
/
generated
/
properties
-
db
.
js
"
)
;
const
{
generateCssProperties
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
css
-
properties
.
js
"
)
;
const
{
Preferences
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
sys
.
mjs
"
)
;
function
run_test
(
)
{
const
propertiesErrorMessage
=
"
If
this
assertion
fails
then
the
client
side
CSS
"
+
"
properties
list
in
devtools
is
out
of
sync
with
the
"
+
"
CSS
properties
on
the
platform
.
To
fix
this
"
+
"
assertion
run
mach
devtools
-
css
-
db
to
re
-
generate
"
+
"
the
client
side
properties
.
"
;
deepEqual
(
PSEUDO_ELEMENTS
InspectorUtils
.
getCSSPseudoElementNames
(
)
"
The
pseudo
elements
match
on
the
client
and
platform
.
"
+
propertiesErrorMessage
)
;
const
prefs
=
InspectorUtils
.
getCSSPropertyPrefs
(
)
;
deepEqual
(
PREFERENCES
prefs
.
map
(
(
{
name
pref
}
)
=
>
[
name
pref
]
)
"
The
preferences
match
on
the
client
and
platform
.
"
+
propertiesErrorMessage
)
;
const
platformProperties
=
generateCssProperties
(
)
;
for
(
const
propertyName
in
CSS_PROPERTIES
)
{
const
platformProperty
=
platformProperties
[
propertyName
]
;
const
clientProperty
=
CSS_PROPERTIES
[
propertyName
]
;
const
deepEqual
=
isJsonDeepEqual
(
platformProperty
clientProperty
)
;
if
(
deepEqual
)
{
ok
(
true
The
static
database
and
platform
match
for
"
{
propertyName
}
"
.
)
;
}
else
{
ok
(
false
The
static
database
and
platform
do
not
match
for
+
"
{
propertyName
}
"
.
{
propertiesErrorMessage
}
)
;
}
}
const
mismatches
=
getKeyMismatches
(
platformProperties
CSS_PROPERTIES
)
.
filter
(
name
=
>
name
&
&
!
name
.
includes
(
"
-
moz
-
osx
-
"
)
)
;
if
(
mismatches
.
length
=
=
=
0
)
{
ok
(
true
"
No
client
and
platform
CSS
property
database
mismatches
were
found
.
"
)
;
}
mismatches
.
forEach
(
propertyName
=
>
{
if
(
getPreference
(
propertyName
)
=
=
=
false
)
{
ok
(
true
The
static
database
and
platform
do
not
agree
on
the
property
+
"
{
propertyName
}
"
This
is
ok
because
it
is
currently
disabled
through
+
a
preference
.
)
;
}
else
{
ok
(
false
The
static
database
and
platform
do
not
agree
on
the
property
+
"
{
propertyName
}
"
{
propertiesErrorMessage
}
)
;
}
}
)
;
}
function
isJsonDeepEqual
(
a
b
)
{
if
(
a
=
=
=
b
)
{
return
true
;
}
if
(
Array
.
isArray
(
a
)
&
&
Array
.
isArray
(
b
)
)
{
if
(
a
.
length
!
=
=
b
.
length
)
{
return
false
;
}
for
(
let
i
=
0
;
i
<
a
.
length
;
i
+
+
)
{
if
(
!
isJsonDeepEqual
(
a
[
i
]
b
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
if
(
typeof
a
=
=
=
"
object
"
&
&
typeof
b
=
=
=
"
object
"
)
{
for
(
const
key
in
a
)
{
if
(
!
isJsonDeepEqual
(
a
[
key
]
b
[
key
]
)
)
{
return
false
;
}
}
return
Object
.
keys
(
a
)
.
length
=
=
=
Object
.
keys
(
b
)
.
length
;
}
return
false
;
}
function
getKeyMismatches
(
a
b
)
{
const
aNames
=
Object
.
keys
(
a
)
;
const
bNames
=
Object
.
keys
(
b
)
;
const
aMismatches
=
aNames
.
filter
(
key
=
>
!
bNames
.
includes
(
key
)
)
;
const
bMismatches
=
bNames
.
filter
(
key
=
>
{
return
!
aNames
.
includes
(
key
)
&
&
!
aMismatches
.
includes
(
key
)
;
}
)
;
return
aMismatches
.
concat
(
bMismatches
)
;
}
function
getPreference
(
propertyName
)
{
const
preference
=
PREFERENCES
.
find
(
(
[
prefPropertyName
preferenceKey
]
)
=
>
{
return
prefPropertyName
=
=
=
propertyName
&
&
!
!
preferenceKey
;
}
)
;
if
(
preference
)
{
return
Preferences
.
get
(
preference
[
1
]
)
;
}
return
undefined
;
}
