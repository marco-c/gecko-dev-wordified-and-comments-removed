"
use
strict
"
;
const
{
FileUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
sys
.
mjs
"
)
;
const
TEST_CONTENT
=
"
a
d
"
;
const
UTF8_TEST_BUFFER
=
new
Uint8Array
(
[
0x61
0xc3
0xa9
0x64
]
)
;
const
ISO_8859_1_BUFFER
=
new
Uint8Array
(
[
0x61
0xe9
0x64
]
)
;
add_task
(
async
function
test_arrow_urls
(
)
{
const
{
path
}
=
createTemporaryFile
(
"
.
js
"
)
;
const
url
=
"
resource
:
/
/
gre
/
modules
/
XPIProvider
.
jsm
-
>
file
:
/
/
"
+
path
;
await
IOUtils
.
writeUTF8
(
path
TEST_CONTENT
)
;
const
{
content
}
=
await
DevToolsUtils
.
fetch
(
url
)
;
deepEqual
(
content
TEST_CONTENT
"
The
file
contents
were
correctly
read
.
"
)
;
}
)
;
add_task
(
async
function
test_empty
(
)
{
const
{
path
}
=
createTemporaryFile
(
)
;
const
{
content
}
=
await
DevToolsUtils
.
fetch
(
"
file
:
/
/
"
+
path
)
;
deepEqual
(
content
"
"
"
The
empty
file
was
read
correctly
.
"
)
;
}
)
;
add_task
(
async
function
test_encoding_utf8
(
)
{
const
{
path
}
=
createTemporaryFile
(
)
;
await
IOUtils
.
write
(
path
UTF8_TEST_BUFFER
)
;
const
{
content
}
=
await
DevToolsUtils
.
fetch
(
path
)
;
deepEqual
(
content
TEST_CONTENT
"
The
UTF
-
8
encoded
file
was
correctly
read
.
"
)
;
}
)
;
add_task
(
async
function
test_encoding_iso_8859_1
(
)
{
const
{
path
}
=
createTemporaryFile
(
)
;
await
IOUtils
.
write
(
path
ISO_8859_1_BUFFER
)
;
const
{
content
}
=
await
DevToolsUtils
.
fetch
(
path
)
;
deepEqual
(
content
TEST_CONTENT
"
The
ISO
8859
-
1
encoded
file
was
correctly
read
.
"
)
;
}
)
;
add_task
(
async
function
test_missing
(
)
{
await
DevToolsUtils
.
fetch
(
"
file
:
/
/
/
file
/
not
/
found
.
right
"
)
.
then
(
result
=
>
{
info
(
result
)
;
ok
(
false
"
Fetch
resolved
unexpectedly
when
the
file
was
not
found
.
"
)
;
}
(
)
=
>
{
ok
(
true
"
Fetch
rejected
as
expected
because
the
file
was
not
found
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_schemeless_files
(
)
{
const
{
path
}
=
createTemporaryFile
(
)
;
await
IOUtils
.
writeUTF8
(
path
TEST_CONTENT
)
;
const
{
content
}
=
await
DevToolsUtils
.
fetch
(
path
)
;
deepEqual
(
content
TEST_CONTENT
"
The
content
was
correct
.
"
)
;
}
)
;
function
createTemporaryFile
(
extension
)
{
const
name
=
"
test_fetch
-
file
-
"
+
Math
.
random
(
)
+
(
extension
|
|
"
"
)
;
const
file
=
FileUtils
.
getFile
(
"
TmpD
"
[
name
]
)
;
file
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
parseInt
(
"
0755
"
8
)
)
;
registerCleanupFunction
(
(
)
=
>
{
file
.
remove
(
false
)
;
}
)
;
return
file
;
}
