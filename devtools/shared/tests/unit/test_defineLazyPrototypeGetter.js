"
use
strict
"
;
function
Class
(
)
{
}
DevToolsUtils
.
defineLazyPrototypeGetter
(
Class
.
prototype
"
foo
"
(
)
=
>
[
]
)
;
function
run_test
(
)
{
test_prototype_attributes
(
)
;
test_instance_attributes
(
)
;
test_multiple_instances
(
)
;
test_callback_receiver
(
)
;
}
function
test_prototype_attributes
(
)
{
const
descriptor
=
Object
.
getOwnPropertyDescriptor
(
Class
.
prototype
"
foo
"
)
;
Assert
.
equal
(
typeof
descriptor
.
get
"
function
"
)
;
Assert
.
equal
(
descriptor
.
set
undefined
)
;
Assert
.
equal
(
descriptor
.
enumerable
false
)
;
Assert
.
equal
(
descriptor
.
configurable
true
)
;
}
function
test_instance_attributes
(
)
{
const
instance
=
new
Class
(
)
;
Assert
.
ok
(
!
instance
.
hasOwnProperty
(
"
foo
"
)
)
;
instance
.
foo
;
Assert
.
ok
(
instance
.
hasOwnProperty
(
"
foo
"
)
)
;
const
descriptor
=
Object
.
getOwnPropertyDescriptor
(
instance
"
foo
"
)
;
Assert
.
ok
(
descriptor
.
value
instanceof
Array
)
;
Assert
.
equal
(
descriptor
.
writable
true
)
;
Assert
.
equal
(
descriptor
.
enumerable
false
)
;
Assert
.
equal
(
descriptor
.
configurable
true
)
;
}
function
test_multiple_instances
(
)
{
const
instance1
=
new
Class
(
)
;
const
instance2
=
new
Class
(
)
;
const
foo1
=
instance1
.
foo
;
const
foo2
=
instance2
.
foo
;
Assert
.
ok
(
foo1
instanceof
Array
)
;
Assert
.
ok
(
foo2
instanceof
Array
)
;
Assert
.
equal
(
instance1
.
foo
foo1
)
;
Assert
.
equal
(
instance2
.
foo
foo2
)
;
Assert
.
notEqual
(
foo1
foo2
)
;
}
function
test_callback_receiver
(
)
{
function
Foo
(
)
{
}
DevToolsUtils
.
defineLazyPrototypeGetter
(
Foo
.
prototype
"
foo
"
function
(
)
{
return
this
;
}
)
;
const
instance
=
new
Foo
(
)
;
Assert
.
equal
(
instance
.
foo
instance
)
;
}
