"
use
strict
"
;
function
testBug1091706
(
)
{
const
loader
=
new
DevToolsLoader
(
)
;
const
require
=
loader
.
require
;
const
indent1
=
require
(
"
devtools
/
shared
/
indentation
"
)
;
const
indent2
=
require
(
"
devtools
/
shared
/
indentation
"
)
;
Assert
.
ok
(
indent1
=
=
=
indent2
)
;
}
function
testInvalidModule
(
)
{
const
loader
=
new
DevToolsLoader
(
)
;
const
require
=
loader
.
require
;
try
{
require
(
"
foo
"
)
;
Assert
.
ok
(
false
"
require
should
throw
"
)
;
}
catch
(
error
)
{
Assert
.
equal
(
error
.
message
"
Module
foo
is
not
found
at
foo
.
js
"
)
;
Assert
.
ok
(
error
.
stack
.
includes
(
"
testInvalidModule
"
)
"
Exception
'
s
stack
includes
the
test
function
"
)
;
}
try
{
require
(
"
devtools
/
foo
"
)
;
Assert
.
ok
(
false
"
require
should
throw
"
)
;
}
catch
(
error
)
{
Assert
.
equal
(
error
.
message
"
Module
devtools
/
foo
is
not
found
at
resource
:
/
/
devtools
/
foo
.
js
"
)
;
Assert
.
ok
(
error
.
stack
.
includes
(
"
testInvalidModule
"
)
"
Exception
'
s
stack
includes
the
test
function
"
)
;
}
}
function
testThrowingModule
(
)
{
const
loader
=
new
DevToolsLoader
(
)
;
const
require
=
loader
.
require
;
try
{
require
(
"
xpcshell
-
test
/
throwing
-
module
-
1
.
js
"
)
;
Assert
.
ok
(
false
"
require
should
throw
"
)
;
}
catch
(
error
)
{
Assert
.
equal
(
error
.
message
"
my
-
exception
"
)
;
Assert
.
ok
(
error
.
stack
.
includes
(
"
testThrowingModule
"
)
"
Exception
'
s
stack
includes
the
test
function
"
)
;
Assert
.
ok
(
error
.
stack
.
includes
(
"
throwingMethod
"
)
"
Exception
'
s
stack
also
includes
the
module
function
that
throws
"
)
;
}
try
{
require
(
"
xpcshell
-
test
/
throwing
-
module
-
2
.
js
"
)
;
Assert
.
ok
(
false
"
require
should
throw
"
)
;
}
catch
(
error
)
{
Assert
.
equal
(
error
.
message
"
Error
while
loading
module
xpcshell
-
test
/
throwing
-
module
-
2
.
js
at
"
+
"
resource
:
/
/
test
/
throwing
-
module
-
2
.
js
:
\
nmy
-
exception
"
)
;
Assert
.
ok
(
error
.
stack
.
includes
(
"
testThrowingModule
"
)
"
Exception
'
s
stack
includes
the
test
function
"
)
;
Assert
.
ok
(
!
error
.
stack
.
includes
(
"
throwingMethod
"
)
"
Exception
'
s
stack
also
includes
the
module
function
that
throws
"
)
;
}
}
function
run_test
(
)
{
testBug1091706
(
)
;
testInvalidModule
(
)
;
testThrowingModule
(
)
;
}
