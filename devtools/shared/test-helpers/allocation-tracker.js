"
use
strict
"
;
const
MemoryReporter
=
Cc
[
"
mozilla
.
org
/
memory
-
reporter
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIMemoryReporterManager
)
;
const
global
=
Cu
.
getGlobalForObject
(
this
)
;
const
{
addDebuggerToGlobal
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
sys
.
mjs
"
{
global
:
"
contextual
"
}
)
;
addDebuggerToGlobal
(
global
)
;
exports
.
allocationTracker
=
function
(
{
watchGlobal
watchAllGlobals
watchDevToolsGlobals
}
=
{
}
)
{
logTracker
(
"
Start
logging
allocations
"
)
;
let
dbg
=
new
global
.
Debugger
(
)
;
dbg
.
memory
.
trackingAllocationSites
=
true
;
dbg
.
memory
.
allocationSamplingProbability
=
1
.
0
;
dbg
.
memory
.
maxAllocationsLogLength
=
5000000
;
let
acceptGlobal
;
if
(
watchGlobal
)
{
acceptGlobal
=
(
)
=
>
false
;
dbg
.
addDebuggee
(
watchGlobal
)
;
}
else
if
(
watchAllGlobals
)
{
acceptGlobal
=
(
)
=
>
true
;
}
else
if
(
watchDevToolsGlobals
)
{
const
builtinGlobal
=
require
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
builtin
-
modules
.
js
"
)
;
acceptGlobal
=
g
=
>
{
if
(
g
.
class
=
=
"
self
-
hosting
-
global
"
)
{
logTracker
(
"
NEW
GLOBAL
:
-
:
"
+
g
.
class
)
;
return
false
;
}
let
ref
=
g
.
unsafeDereference
(
)
;
if
(
g
.
class
=
=
"
Window
"
&
&
ref
.
top
)
{
ref
=
ref
.
top
;
}
const
location
=
Cu
.
getRealmLocation
(
ref
)
;
let
accept
=
!
!
location
.
match
(
/
devtools
/
i
)
;
if
(
ref
=
=
Cu
.
getGlobalForObject
(
builtinGlobal
)
|
|
ref
=
=
Cu
.
getGlobalForObject
(
builtinGlobal
.
modules
.
ChromeDebugger
)
)
{
accept
=
false
;
}
logTracker
(
"
NEW
GLOBAL
:
"
+
(
accept
?
"
+
"
:
"
-
"
)
+
"
:
"
+
location
)
;
return
accept
;
}
;
}
if
(
watchAllGlobals
|
|
watchDevToolsGlobals
)
{
dbg
.
addAllGlobalsAsDebuggees
(
)
;
for
(
const
g
of
dbg
.
getDebuggees
(
)
)
{
if
(
!
acceptGlobal
(
g
)
)
{
dbg
.
removeDebuggee
(
g
)
;
}
}
}
dbg
.
removeDebuggee
(
global
)
;
dbg
.
onNewGlobalObject
=
function
(
g
)
{
if
(
acceptGlobal
(
g
)
)
{
dbg
.
addDebuggee
(
g
)
;
}
}
;
return
{
get
overflowed
(
)
{
return
dbg
.
memory
.
allocationsLogOverflowed
;
}
async
startRecordingAllocations
(
debug_allocations
)
{
dbg
.
memory
.
allocationSamplingProbability
=
0
.
0
;
this
.
flushAllocations
(
)
;
await
this
.
doGC
(
)
;
dbg
.
memory
.
allocationSamplingProbability
=
1
.
0
;
const
memory
=
this
.
getAllocatedMemory
(
)
;
const
objects
=
this
.
stillAllocatedObjects
(
)
;
if
(
debug_allocations
=
=
"
allocations
"
)
{
this
.
flushAllocations
(
)
;
}
const
allocations
=
debug_allocations
=
=
"
leaks
"
?
this
.
getAllAllocations
(
)
:
null
;
this
.
data
=
{
memory
objects
allocations
}
;
return
this
.
data
;
}
async
stopRecordingAllocations
(
debug_allocations
)
{
if
(
debug_allocations
!
=
"
allocations
"
)
{
this
.
flushAllocations
(
)
;
}
if
(
watchAllGlobals
)
{
dbg
.
memory
.
allocationSamplingProbability
=
0
.
0
;
}
await
this
.
doGC
(
)
;
if
(
!
watchAllGlobals
)
{
const
allocations
=
dbg
.
memory
.
drainAllocationsLog
(
)
;
if
(
allocations
.
length
)
{
this
.
logAllocationLog
(
allocations
"
Allocation
that
happened
during
the
GC
"
)
;
console
.
error
(
"
Allocation
happened
during
the
GC
.
Are
you
waiting
correctly
before
calling
stopRecordingAllocations
?
"
)
;
}
}
const
memory
=
this
.
getAllocatedMemory
(
)
;
const
objects
=
this
.
stillAllocatedObjects
(
)
;
let
leaks
;
if
(
debug_allocations
=
=
"
allocations
"
)
{
this
.
logAllocationLog
(
)
;
}
else
if
(
debug_allocations
=
=
"
leaks
"
)
{
leaks
=
this
.
logAllocationSitesDiff
(
this
.
data
.
allocations
)
;
}
return
{
objectsWithoutStack
:
objects
.
objectsWithoutStack
-
this
.
data
.
objects
.
objectsWithoutStack
objectsWithStack
:
objects
.
objectsWithStack
-
this
.
data
.
objects
.
objectsWithStack
memory
:
memory
-
this
.
data
.
memory
leaks
}
;
}
getAllAllocations
(
)
{
const
sensus
=
dbg
.
memory
.
takeCensus
(
{
breakdown
:
{
by
:
"
allocationStack
"
}
}
)
;
const
sources
=
{
}
;
for
(
const
[
k
v
]
of
sensus
.
entries
(
)
)
{
const
src
=
k
.
source
|
|
"
UNKNOWN
"
;
const
line
=
k
.
line
|
|
"
?
"
;
const
count
=
v
.
count
;
let
item
=
sources
[
src
]
;
if
(
!
item
)
{
item
=
sources
[
src
]
=
{
count
:
0
lines
:
{
}
}
;
}
item
.
count
+
=
count
;
if
(
line
!
=
-
1
)
{
if
(
!
item
.
lines
[
line
]
)
{
item
.
lines
[
line
]
=
0
;
}
item
.
lines
[
line
]
+
=
count
;
}
}
return
sources
;
}
sourcesDiff
(
previousSources
newSources
)
{
for
(
const
src
in
previousSources
)
{
const
previousItem
=
previousSources
[
src
]
;
const
item
=
newSources
[
src
]
;
if
(
!
item
)
{
continue
;
}
item
.
count
-
=
previousItem
.
count
;
for
(
const
line
in
previousItem
.
lines
)
{
const
count
=
previousItem
.
lines
[
line
]
;
if
(
line
!
=
-
1
)
{
if
(
!
item
.
lines
[
line
]
)
{
continue
;
}
item
.
lines
[
line
]
-
=
count
;
}
}
}
}
logAllocationSites
(
message
sources
{
first
=
1000
}
=
{
}
)
{
const
allocationList
=
Object
.
entries
(
sources
)
.
sort
(
(
[
itemA
]
[
itemB
]
)
=
>
itemB
.
count
-
itemA
.
count
)
.
filter
(
(
_
i
)
=
>
i
<
first
)
.
map
(
(
[
src
item
]
)
=
>
{
const
lines
=
[
]
;
Object
.
entries
(
item
.
lines
)
.
filter
(
(
[
count
]
)
=
>
count
>
0
)
.
sort
(
(
[
lineA
countA
]
[
lineB
countB
]
)
=
>
{
if
(
countA
!
=
countB
)
{
return
countB
-
countA
;
}
return
lineB
-
lineA
;
}
)
.
forEach
(
(
[
line
count
]
)
=
>
{
lines
.
push
(
line
+
"
:
"
+
count
)
;
}
)
;
return
{
src
count
:
item
.
count
lines
}
;
}
)
.
filter
(
(
{
count
}
)
=
>
count
>
0
)
;
logTracker
(
"
DEVTOOLS
ALLOCATION
:
"
+
message
+
"
:
\
n
"
+
JSON
.
stringify
(
allocationList
null
2
)
)
;
return
allocationList
;
}
logAllocationSitesDiff
(
previousSources
)
{
const
newSources
=
this
.
getAllAllocations
(
)
;
this
.
sourcesDiff
(
previousSources
newSources
)
;
return
this
.
logAllocationSites
(
"
allocations
which
leaked
"
newSources
)
;
}
allocationsToSources
(
allocations
)
{
const
sources
=
{
}
;
for
(
const
alloc
of
allocations
)
{
const
{
frame
}
=
alloc
;
let
src
=
"
UNKNOWN
"
;
let
line
=
-
1
;
try
{
if
(
frame
)
{
src
=
frame
.
source
|
|
"
UNKNOWN
"
;
line
=
frame
.
line
|
|
-
1
;
}
}
catch
(
e
)
{
}
let
item
=
sources
[
src
]
;
if
(
!
item
)
{
item
=
sources
[
src
]
=
{
count
:
0
lines
:
{
}
}
;
}
item
.
count
+
+
;
if
(
line
!
=
-
1
)
{
if
(
!
item
.
lines
[
line
]
)
{
item
.
lines
[
line
]
=
0
;
}
item
.
lines
[
line
]
+
+
;
}
}
return
sources
;
}
logAllocationLog
(
allocations
msg
=
"
"
)
{
if
(
!
allocations
)
{
allocations
=
dbg
.
memory
.
drainAllocationsLog
(
)
;
}
const
sources
=
this
.
allocationsToSources
(
allocations
)
;
return
this
.
logAllocationSites
(
msg
?
msg
:
"
all
allocations
(
which
may
be
freed
or
are
still
allocated
)
"
sources
)
;
}
logCount
(
)
{
logTracker
(
"
DEVTOOLS
ALLOCATION
:
Javascript
object
allocations
:
"
+
this
.
countAllocations
(
)
)
;
}
countAllocations
(
)
{
const
allocations
=
dbg
.
memory
.
drainAllocationsLog
(
)
;
return
allocations
.
length
;
}
flushAllocations
(
)
{
dbg
.
memory
.
drainAllocationsLog
(
)
;
}
stillAllocatedObjects
(
)
{
const
sensus
=
dbg
.
memory
.
takeCensus
(
{
breakdown
:
{
by
:
"
allocationStack
"
}
}
)
;
let
objectsWithStack
=
0
;
let
objectsWithoutStack
=
0
;
for
(
const
[
k
v
]
of
sensus
.
entries
(
)
)
{
if
(
k
=
=
=
"
noStack
"
)
{
objectsWithoutStack
+
=
v
.
count
;
}
else
{
objectsWithStack
+
=
v
.
count
;
}
}
return
{
objectsWithStack
objectsWithoutStack
}
;
}
getAllocatedMemory
(
)
{
return
MemoryReporter
.
residentUnique
;
}
async
doGC
(
)
{
const
numCycles
=
3
;
for
(
let
i
=
0
;
i
<
numCycles
;
i
+
+
)
{
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
await
new
Promise
(
resolve
=
>
Cu
.
schedulePreciseShrinkingGC
(
resolve
)
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
1000
)
)
;
}
await
new
Promise
(
resolve
=
>
MemoryReporter
.
minimizeMemoryUsage
(
resolve
)
)
;
}
getSnapshotFile
(
)
{
return
ChromeUtils
.
saveHeapSnapshot
(
{
debugger
:
dbg
}
)
;
}
traceObjects
(
objects
snapshotFile
)
{
if
(
!
snapshotFile
)
{
snapshotFile
=
this
.
getSnapshotFile
(
)
;
}
const
snapshot
=
ChromeUtils
.
readHeapSnapshot
(
snapshotFile
)
;
function
getObjectDescription
(
id
prefix
=
0
)
{
prefix
=
"
"
.
repeat
(
prefix
)
;
if
(
!
id
)
{
return
prefix
+
"
<
null
>
"
;
}
try
{
let
stack
=
[
.
.
.
snapshot
.
describeNode
(
{
by
:
"
allocationStack
"
}
id
)
]
;
if
(
stack
)
{
stack
=
stack
.
find
(
(
[
src
]
)
=
>
src
!
=
"
noStack
"
)
;
if
(
stack
)
{
const
{
line
column
source
}
=
stack
[
0
]
;
if
(
source
)
{
const
lines
=
getFileContent
(
source
)
;
const
lineBefore
=
lines
[
line
-
2
]
;
const
lineText
=
lines
[
line
-
1
]
;
const
lineAfter
=
lines
[
line
]
;
const
filename
=
source
.
substr
(
source
.
lastIndexOf
(
"
/
"
)
+
1
)
;
stack
=
"
allocated
at
"
+
source
+
"
:
\
n
"
;
if
(
lineBefore
.
trim
(
)
.
length
)
{
stack
+
=
prefix
+
{
filename
}
{
line
-
1
}
\
u007C
;
stack
+
=
"
\
x1b
[
2m
"
+
lineBefore
+
"
\
n
"
;
}
stack
+
=
prefix
+
{
filename
}
{
line
}
>
\
u007C
;
stack
+
=
"
\
x1b
[
2m
"
+
lineText
.
substr
(
0
column
-
1
)
+
"
\
x1b
[
0m
"
+
"
\
u21A6
"
+
lineText
.
substr
(
column
-
1
)
+
"
\
n
"
;
if
(
lineAfter
.
trim
(
)
.
length
)
{
stack
+
=
prefix
+
{
filename
}
{
line
+
1
}
\
u007C
;
stack
+
=
lineAfter
;
}
}
else
{
stack
=
"
(
missing
source
)
"
;
}
}
else
{
stack
=
"
(
without
allocation
stack
)
"
;
}
}
else
{
stack
=
"
(
without
description
)
"
;
}
let
objectClass
=
Object
.
entries
(
snapshot
.
describeNode
(
{
by
:
"
objectClass
"
}
id
)
)
[
0
]
[
0
]
;
if
(
objectClass
=
=
"
other
"
)
{
objectClass
=
Object
.
entries
(
snapshot
.
describeNode
(
{
by
:
"
internalType
"
}
id
)
)
[
0
]
[
0
]
;
}
const
arrow
=
prefix
>
0
?
"
\
\
-
-
>
"
:
"
"
;
return
prefix
+
arrow
+
objectClass
+
"
"
+
stack
;
}
catch
(
e
)
{
if
(
e
.
name
=
=
"
NS_ERROR_ILLEGAL_VALUE
"
)
{
return
(
prefix
+
"
<
not
-
in
-
memory
-
snapshot
:
is
-
from
-
untracked
-
global
?
>
"
)
;
}
return
prefix
+
"
<
invalid
:
"
+
id
+
"
:
"
+
e
+
"
>
"
;
}
}
const
fileContents
=
new
Map
(
)
;
function
getFileContent
(
url
)
{
let
content
=
fileContents
.
get
(
url
)
;
if
(
content
)
{
return
content
;
}
content
=
readURI
(
url
)
.
split
(
"
\
n
"
)
;
fileContents
.
set
(
url
content
)
;
return
content
;
}
function
readURI
(
uri
)
{
const
{
NetUtil
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
sys
.
mjs
"
{
global
:
"
contextual
"
}
)
;
const
stream
=
NetUtil
.
newChannel
(
{
uri
:
NetUtil
.
newURI
(
uri
"
UTF
-
8
"
)
loadUsingSystemPrincipal
:
true
}
)
.
open
(
)
;
const
count
=
stream
.
available
(
)
;
const
data
=
NetUtil
.
readInputStreamToString
(
stream
count
{
charset
:
"
UTF
-
8
"
}
)
;
stream
.
close
(
)
;
return
data
;
}
function
printPath
(
src
dst
)
{
let
paths
;
try
{
paths
=
snapshot
.
computeShortestPaths
(
src
[
dst
]
10
)
;
}
catch
(
e
)
{
}
if
(
paths
&
&
paths
.
has
(
dst
)
)
{
let
pathLength
=
Infinity
;
let
n
=
0
;
for
(
const
path
of
paths
.
get
(
dst
)
)
{
n
+
+
;
if
(
path
.
length
>
pathLength
+
1
)
{
continue
;
}
pathLength
=
path
.
length
;
logTracker
(
Path
#
{
n
}
:
\
n
+
path
.
map
(
(
{
predecessor
edge
}
i
)
=
>
{
return
(
getObjectDescription
(
predecessor
i
)
+
"
\
n
"
+
"
"
.
repeat
(
i
)
+
"
Holds
the
following
object
via
'
"
+
edge
+
"
'
attribute
:
\
n
"
)
;
}
)
.
join
(
"
"
)
+
getObjectDescription
(
dst
path
.
length
)
)
;
}
}
else
{
logTracker
(
"
NO
-
PATH
"
)
;
}
}
const
tree
=
snapshot
.
computeDominatorTree
(
)
;
for
(
const
objectNodeId
of
objects
)
{
logTracker
(
"
#
Tracing
object
#
"
+
objectNodeId
+
"
\
n
"
)
;
logTracker
(
"
#
#
#
Path
(
s
)
from
root
:
"
)
;
printPath
(
tree
.
root
objectNodeId
)
;
}
}
stop
(
)
{
logTracker
(
"
Stop
logging
allocations
"
)
;
dbg
.
onNewGlobalObject
=
undefined
;
dbg
.
removeAllDebuggees
(
)
;
dbg
=
null
;
}
}
;
}
;
function
logTracker
(
message
)
{
dump
(
\
x1b
[
2m
[
TRACKER
]
\
x1b
[
0m
{
message
}
\
n
)
;
}
