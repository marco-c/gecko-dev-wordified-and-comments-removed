"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
global
=
require
(
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
"
)
;
const
{
addDebuggerToGlobal
}
=
global
;
addDebuggerToGlobal
(
global
)
;
const
{
Debugger
}
=
global
;
exports
.
allocationTracker
=
function
(
)
{
dump
(
"
DEVTOOLS
ALLOCATION
:
Start
logging
allocations
\
n
"
)
;
let
dbg
=
new
Debugger
(
)
;
dbg
.
memory
.
trackingAllocationSites
=
true
;
dbg
.
memory
.
allocationSamplingProbability
=
1
.
0
;
dbg
.
memory
.
maxAllocationsLogLength
=
5000000
;
dbg
.
addAllGlobalsAsDebuggees
(
)
;
dbg
.
removeDebuggee
(
Cu
.
getGlobalForObject
(
{
}
)
)
;
dbg
.
onNewGlobalObject
=
function
(
g
)
{
dbg
.
addDebuggee
(
g
)
;
}
;
return
{
get
overflowed
(
)
{
return
dbg
.
memory
.
allocationsLogOverflowed
;
}
logAllocationSites
(
{
first
=
5
}
=
{
}
)
{
const
allocations
=
dbg
.
memory
.
drainAllocationsLog
(
)
;
const
sources
=
{
}
;
for
(
const
alloc
of
allocations
)
{
const
{
frame
}
=
alloc
;
let
src
=
"
UNKNOWN
"
;
let
line
=
-
1
;
try
{
if
(
frame
)
{
src
=
frame
.
source
|
|
"
UNKNOWN
"
;
line
=
frame
.
line
|
|
-
1
;
}
}
catch
(
e
)
{
}
let
item
=
sources
[
src
]
;
if
(
!
item
)
{
item
=
sources
[
src
]
=
{
count
:
0
lines
:
{
}
}
;
}
item
.
count
+
+
;
if
(
line
!
=
-
1
)
{
if
(
!
item
.
lines
[
line
]
)
{
item
.
lines
[
line
]
=
0
;
}
item
.
lines
[
line
]
+
+
;
}
}
const
allocationList
=
Object
.
entries
(
sources
)
.
sort
(
(
[
srcA
itemA
]
[
srcB
itemB
]
)
=
>
itemA
.
count
<
itemB
.
count
)
.
filter
(
(
_
i
)
=
>
i
<
first
)
.
map
(
(
[
src
item
]
)
=
>
{
const
lines
=
[
]
;
Object
.
entries
(
item
.
lines
)
.
filter
(
(
[
line
count
]
)
=
>
count
>
5
)
.
sort
(
(
[
lineA
countA
]
[
lineB
countB
]
)
=
>
{
if
(
countA
!
=
countB
)
{
return
countA
<
countB
;
}
return
lineA
<
lineB
;
}
)
.
forEach
(
(
[
line
count
]
)
=
>
{
lines
.
push
(
line
+
"
:
"
+
count
)
;
}
)
;
return
{
src
count
:
item
.
count
lines
}
;
}
)
;
dump
(
"
DEVTOOLS
ALLOCATION
:
Javascript
object
allocations
:
"
+
allocations
.
length
+
"
\
n
"
+
JSON
.
stringify
(
allocationList
null
2
)
+
"
\
n
"
)
;
}
logCount
(
)
{
dump
(
"
DEVTOOLS
ALLOCATION
:
Javascript
object
allocations
:
"
+
this
.
countAllocations
(
)
+
"
\
n
"
)
;
}
countAllocations
(
)
{
const
allocations
=
dbg
.
memory
.
drainAllocationsLog
(
)
;
return
allocations
.
length
;
}
flushAllocations
(
)
{
dbg
.
memory
.
drainAllocationsLog
(
)
;
}
stop
(
)
{
dump
(
"
DEVTOOLS
ALLOCATION
:
Stop
logging
allocations
\
n
"
)
;
dbg
.
onNewGlobalObject
=
undefined
;
dbg
.
removeAllDebuggees
(
)
;
dbg
=
null
;
}
}
;
}
;
