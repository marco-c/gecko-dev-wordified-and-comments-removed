"
use
strict
"
;
const
{
startTracing
addTracingListener
stopTracing
removeTracingListener
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
tracer
/
tracer
.
jsm
"
)
;
let
testFileContent
;
function
traceFrame
(
{
frame
}
)
{
const
{
script
}
=
frame
;
const
{
lineNumber
columnNumber
}
=
script
.
getOffsetMetadata
(
frame
.
offset
)
;
const
{
url
}
=
script
.
source
;
const
filename
=
url
.
substr
(
url
.
lastIndexOf
(
"
/
"
)
+
1
)
;
const
line
=
testFileContent
[
lineNumber
-
1
]
;
const
code
=
"
\
x1b
[
2m
"
+
line
.
substr
(
0
columnNumber
-
1
)
+
"
\
x1b
[
0m
"
+
"
\
u21A6
"
+
line
.
substr
(
columnNumber
-
1
)
;
const
position
=
(
lineNumber
+
"
:
"
+
columnNumber
)
.
padEnd
(
7
)
;
logStep
(
{
filename
}
{
position
}
:
:
{
code
}
)
;
return
false
;
}
function
logStep
(
message
)
{
dump
(
\
x1b
[
2m
[
STEP
]
\
x1b
[
0m
{
message
}
\
n
)
;
}
const
tracingListener
=
{
onTracingFrame
:
traceFrame
onTracingFrameStep
:
traceFrame
}
;
exports
.
start
=
function
(
testGlobal
testUrl
pause
)
{
const
tracerOptions
=
{
global
:
testGlobal
traceSteps
:
true
filterFrameSourceUrl
:
testUrl
}
;
testFileContent
=
readURI
(
testUrl
)
.
split
(
"
\
n
"
)
;
if
(
!
isNaN
(
pause
)
)
{
tracerOptions
.
pauseOnStep
=
Number
(
pause
)
;
logStep
(
Tracing
all
test
script
steps
with
{
pause
}
ms
pause
)
;
logStep
(
/
!
\
\
Be
conscious
about
each
pause
releasing
the
event
loop
and
breaking
run
-
to
-
completion
.
)
;
}
else
{
logStep
(
Tracing
all
test
script
steps
)
;
}
logStep
(
'
\
u21A6
'
symbol
highlights
what
precise
instruction
is
being
called
)
;
startTracing
(
tracerOptions
)
;
addTracingListener
(
tracingListener
)
;
}
;
exports
.
stop
=
function
(
)
{
stopTracing
(
)
;
removeTracingListener
(
tracingListener
)
;
}
;
function
readURI
(
uri
)
{
const
{
NetUtil
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
sys
.
mjs
"
{
global
:
"
contextual
"
}
)
;
const
stream
=
NetUtil
.
newChannel
(
{
uri
:
NetUtil
.
newURI
(
uri
"
UTF
-
8
"
)
loadUsingSystemPrincipal
:
true
}
)
.
open
(
)
;
const
count
=
stream
.
available
(
)
;
const
data
=
NetUtil
.
readInputStreamToString
(
stream
count
{
charset
:
"
UTF
-
8
"
}
)
;
stream
.
close
(
)
;
return
data
;
}
