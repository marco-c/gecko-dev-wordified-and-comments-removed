let
MESSAGE_COUNTER
=
0
;
function
dumpn
(
_msg
)
{
}
export
function
DevToolsWorker
(
url
opts
)
{
opts
=
opts
|
|
{
}
;
this
.
_worker
=
new
ChromeWorker
(
url
)
;
this
.
_verbose
=
opts
.
verbose
;
this
.
_name
=
opts
.
name
;
this
.
_worker
.
addEventListener
(
"
error
"
this
.
onError
)
;
}
DevToolsWorker
.
prototype
.
performTask
=
function
(
task
data
transfer
)
{
if
(
this
.
_destroyed
)
{
return
Promise
.
reject
(
"
Cannot
call
performTask
on
a
destroyed
DevToolsWorker
"
)
;
}
const
worker
=
this
.
_worker
;
const
id
=
+
+
MESSAGE_COUNTER
;
const
payload
=
{
task
id
data
}
;
if
(
this
.
_verbose
&
&
dumpn
)
{
dumpn
(
"
Sending
message
to
worker
"
+
(
this
.
_name
?
"
(
"
+
this
.
_name
+
"
)
"
:
"
"
)
+
"
:
"
+
JSON
.
stringify
(
payload
null
2
)
)
;
}
worker
.
postMessage
(
payload
transfer
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
listener
=
(
{
data
:
result
}
)
=
>
{
if
(
this
.
_verbose
&
&
dumpn
)
{
dumpn
(
"
Received
message
from
worker
"
+
(
this
.
_name
?
"
(
"
+
this
.
_name
+
"
)
"
:
"
"
)
+
"
:
"
+
JSON
.
stringify
(
result
null
2
)
)
;
}
if
(
result
.
id
!
=
=
id
)
{
return
;
}
worker
.
removeEventListener
(
"
message
"
listener
)
;
if
(
result
.
error
)
{
reject
(
result
.
error
)
;
}
else
{
resolve
(
result
.
response
)
;
}
}
;
worker
.
addEventListener
(
"
message
"
listener
)
;
}
)
;
}
;
DevToolsWorker
.
prototype
.
destroy
=
function
(
)
{
this
.
_worker
.
terminate
(
)
;
this
.
_worker
=
null
;
this
.
_destroyed
=
true
;
}
;
DevToolsWorker
.
prototype
.
onError
=
function
(
{
message
filename
lineno
}
)
{
dump
(
new
Error
(
message
+
"
"
+
filename
+
"
:
"
+
lineno
)
+
"
\
n
"
)
;
}
;
export
function
workerify
(
fn
)
{
console
.
warn
(
"
workerify
should
only
be
used
in
tests
or
measuring
performance
.
"
+
"
This
creates
an
object
URL
on
the
browser
window
and
should
not
be
"
+
"
used
in
production
.
"
)
;
const
{
URL
Blob
}
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
const
stringifiedFn
=
createWorkerString
(
fn
)
;
const
blob
=
new
Blob
(
[
stringifiedFn
]
)
;
const
url
=
URL
.
createObjectURL
(
blob
)
;
const
worker
=
new
DevToolsWorker
(
url
)
;
const
wrapperFn
=
(
data
transfer
)
=
>
worker
.
performTask
(
"
workerifiedTask
"
data
transfer
)
;
wrapperFn
.
destroy
=
function
(
)
{
URL
.
revokeObjectURL
(
url
)
;
worker
.
destroy
(
)
;
}
;
return
wrapperFn
;
}
function
createWorkerString
(
fn
)
{
return
importScripts
(
"
resource
:
/
/
gre
/
modules
/
workers
/
require
.
js
"
)
;
const
{
createTask
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
worker
/
helper
.
js
"
)
;
createTask
(
self
"
workerifiedTask
"
{
fn
.
toString
(
)
}
)
;
;
}
