"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
CSS_ANGLEUNIT
}
=
require
(
"
devtools
/
shared
/
css
/
properties
-
db
"
)
;
const
{
getAngleValueInDegrees
}
=
require
(
"
devtools
/
shared
/
css
/
parsing
-
utils
"
)
;
const
{
getCSSLexer
}
=
require
(
"
devtools
/
shared
/
css
/
lexer
"
)
;
const
{
cssColors
}
=
require
(
"
devtools
/
shared
/
css
/
color
-
db
"
)
;
const
COLOR_UNIT_PREF
=
"
devtools
.
defaultColorUnit
"
;
const
SPECIALVALUES
=
new
Set
(
[
"
currentcolor
"
"
initial
"
"
inherit
"
"
transparent
"
"
unset
"
]
)
;
function
CssColor
(
colorValue
supportsCssColor4ColorFunction
=
false
)
{
this
.
newColor
(
colorValue
)
;
this
.
cssColor4
=
supportsCssColor4ColorFunction
;
}
module
.
exports
.
colorUtils
=
{
CssColor
:
CssColor
rgbToHsl
:
rgbToHsl
setAlpha
:
setAlpha
classifyColor
:
classifyColor
rgbToColorName
:
rgbToColorName
colorToRGBA
:
colorToRGBA
isValidCSSColor
:
isValidCSSColor
}
;
CssColor
.
COLORUNIT
=
{
"
authored
"
:
"
authored
"
"
hex
"
:
"
hex
"
"
name
"
:
"
name
"
"
rgb
"
:
"
rgb
"
"
hsl
"
:
"
hsl
"
}
;
CssColor
.
prototype
=
{
_colorUnit
:
null
_colorUnitUppercase
:
false
authored
:
null
lowerCased
:
null
cssColor4
:
false
_setColorUnitUppercase
:
function
(
color
)
{
this
.
_colorUnitUppercase
=
(
color
=
=
=
color
.
toUpperCase
(
)
)
&
&
(
color
!
=
=
color
.
toLowerCase
(
)
)
;
}
get
colorUnit
(
)
{
if
(
this
.
_colorUnit
=
=
=
null
)
{
let
defaultUnit
=
Services
.
prefs
.
getCharPref
(
COLOR_UNIT_PREF
)
;
this
.
_colorUnit
=
CssColor
.
COLORUNIT
[
defaultUnit
]
;
this
.
_setColorUnitUppercase
(
this
.
authored
)
;
}
return
this
.
_colorUnit
;
}
set
colorUnit
(
unit
)
{
this
.
_colorUnit
=
unit
;
}
setAuthoredUnitFromColor
:
function
(
color
)
{
if
(
Services
.
prefs
.
getCharPref
(
COLOR_UNIT_PREF
)
=
=
=
CssColor
.
COLORUNIT
.
authored
)
{
this
.
_colorUnit
=
classifyColor
(
color
)
;
this
.
_setColorUnitUppercase
(
color
)
;
}
}
get
hasAlpha
(
)
{
if
(
!
this
.
valid
)
{
return
false
;
}
return
this
.
_getRGBATuple
(
)
.
a
!
=
=
1
;
}
get
valid
(
)
{
return
isValidCSSColor
(
this
.
authored
this
.
cssColor4
)
;
}
get
transparent
(
)
{
try
{
let
tuple
=
this
.
_getRGBATuple
(
)
;
return
!
(
tuple
.
r
|
|
tuple
.
g
|
|
tuple
.
b
|
|
tuple
.
a
)
;
}
catch
(
e
)
{
return
false
;
}
}
get
specialValue
(
)
{
return
SPECIALVALUES
.
has
(
this
.
lowerCased
)
?
this
.
authored
:
null
;
}
get
name
(
)
{
let
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
let
tuple
=
this
.
_getRGBATuple
(
)
;
if
(
tuple
.
a
!
=
=
1
)
{
return
this
.
hex
;
}
let
{
r
g
b
}
=
tuple
;
return
rgbToColorName
(
r
g
b
)
|
|
this
.
hex
;
}
get
hex
(
)
{
let
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
if
(
this
.
hasAlpha
)
{
return
this
.
alphaHex
;
}
let
hex
=
this
.
longHex
;
if
(
hex
.
charAt
(
1
)
=
=
hex
.
charAt
(
2
)
&
&
hex
.
charAt
(
3
)
=
=
hex
.
charAt
(
4
)
&
&
hex
.
charAt
(
5
)
=
=
hex
.
charAt
(
6
)
)
{
hex
=
"
#
"
+
hex
.
charAt
(
1
)
+
hex
.
charAt
(
3
)
+
hex
.
charAt
(
5
)
;
}
return
hex
;
}
get
alphaHex
(
)
{
let
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
let
alphaHex
=
this
.
longAlphaHex
;
if
(
alphaHex
.
charAt
(
1
)
=
=
alphaHex
.
charAt
(
2
)
&
&
alphaHex
.
charAt
(
3
)
=
=
alphaHex
.
charAt
(
4
)
&
&
alphaHex
.
charAt
(
5
)
=
=
alphaHex
.
charAt
(
6
)
&
&
alphaHex
.
charAt
(
7
)
=
=
alphaHex
.
charAt
(
8
)
)
{
alphaHex
=
"
#
"
+
alphaHex
.
charAt
(
1
)
+
alphaHex
.
charAt
(
3
)
+
alphaHex
.
charAt
(
5
)
+
alphaHex
.
charAt
(
7
)
;
}
return
alphaHex
;
}
get
longHex
(
)
{
let
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
if
(
this
.
hasAlpha
)
{
return
this
.
longAlphaHex
;
}
let
tuple
=
this
.
_getRGBATuple
(
)
;
return
"
#
"
+
(
(
1
<
<
24
)
+
(
tuple
.
r
<
<
16
)
+
(
tuple
.
g
<
<
8
)
+
(
tuple
.
b
<
<
0
)
)
.
toString
(
16
)
.
substr
(
-
6
)
;
}
get
longAlphaHex
(
)
{
let
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
let
tuple
=
this
.
_getRGBATuple
(
)
;
return
"
#
"
+
(
(
1
<
<
24
)
+
(
tuple
.
r
<
<
16
)
+
(
tuple
.
g
<
<
8
)
+
(
tuple
.
b
<
<
0
)
)
.
toString
(
16
)
.
substr
(
-
6
)
+
Math
.
round
(
tuple
.
a
*
255
)
.
toString
(
16
)
.
padEnd
(
2
"
0
"
)
;
}
get
rgb
(
)
{
let
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
if
(
!
this
.
hasAlpha
)
{
if
(
this
.
lowerCased
.
startsWith
(
"
rgb
(
"
)
)
{
return
this
.
authored
;
}
let
tuple
=
this
.
_getRGBATuple
(
)
;
return
"
rgb
(
"
+
tuple
.
r
+
"
"
+
tuple
.
g
+
"
"
+
tuple
.
b
+
"
)
"
;
}
return
this
.
rgba
;
}
get
rgba
(
)
{
let
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
if
(
this
.
lowerCased
.
startsWith
(
"
rgba
(
"
)
)
{
return
this
.
authored
;
}
let
components
=
this
.
_getRGBATuple
(
)
;
return
"
rgba
(
"
+
components
.
r
+
"
"
+
components
.
g
+
"
"
+
components
.
b
+
"
"
+
components
.
a
+
"
)
"
;
}
get
hsl
(
)
{
let
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
if
(
this
.
lowerCased
.
startsWith
(
"
hsl
(
"
)
)
{
return
this
.
authored
;
}
if
(
this
.
hasAlpha
)
{
return
this
.
hsla
;
}
return
this
.
_hsl
(
)
;
}
get
hsla
(
)
{
let
invalidOrSpecialValue
=
this
.
_getInvalidOrSpecialValue
(
)
;
if
(
invalidOrSpecialValue
!
=
=
false
)
{
return
invalidOrSpecialValue
;
}
if
(
this
.
lowerCased
.
startsWith
(
"
hsla
(
"
)
)
{
return
this
.
authored
;
}
if
(
this
.
hasAlpha
)
{
let
a
=
this
.
_getRGBATuple
(
)
.
a
;
return
this
.
_hsl
(
a
)
;
}
return
this
.
_hsl
(
1
)
;
}
_getInvalidOrSpecialValue
:
function
(
)
{
if
(
this
.
specialValue
)
{
return
this
.
specialValue
;
}
if
(
!
this
.
valid
)
{
return
"
"
;
}
return
false
;
}
newColor
:
function
(
color
)
{
this
.
lowerCased
=
color
.
toLowerCase
(
)
;
this
.
authored
=
color
;
this
.
_setColorUnitUppercase
(
color
)
;
return
this
;
}
nextColorUnit
:
function
(
)
{
let
formats
=
[
"
hex
"
"
hsl
"
"
rgb
"
"
name
"
]
;
let
currentFormat
=
classifyColor
(
this
.
toString
(
)
)
;
let
putOnEnd
=
formats
.
splice
(
0
formats
.
indexOf
(
currentFormat
)
)
;
formats
=
formats
.
concat
(
putOnEnd
)
;
let
currentDisplayedColor
=
this
[
formats
[
0
]
]
;
for
(
let
format
of
formats
)
{
if
(
this
[
format
]
.
toLowerCase
(
)
!
=
=
currentDisplayedColor
.
toLowerCase
(
)
)
{
this
.
colorUnit
=
CssColor
.
COLORUNIT
[
format
]
;
break
;
}
}
return
this
.
toString
(
)
;
}
toString
:
function
(
)
{
let
color
;
switch
(
this
.
colorUnit
)
{
case
CssColor
.
COLORUNIT
.
authored
:
color
=
this
.
authored
;
break
;
case
CssColor
.
COLORUNIT
.
hex
:
color
=
this
.
hex
;
break
;
case
CssColor
.
COLORUNIT
.
hsl
:
color
=
this
.
hsl
;
break
;
case
CssColor
.
COLORUNIT
.
name
:
color
=
this
.
name
;
break
;
case
CssColor
.
COLORUNIT
.
rgb
:
color
=
this
.
rgb
;
break
;
default
:
color
=
this
.
rgb
;
}
if
(
this
.
_colorUnitUppercase
&
&
this
.
colorUnit
!
=
CssColor
.
COLORUNIT
.
authored
)
{
color
=
color
.
toUpperCase
(
)
;
}
return
color
;
}
_getRGBATuple
:
function
(
)
{
let
tuple
=
colorToRGBA
(
this
.
authored
this
.
cssColor4
)
;
tuple
.
a
=
parseFloat
(
tuple
.
a
.
toFixed
(
1
)
)
;
return
tuple
;
}
_hsl
:
function
(
maybeAlpha
)
{
if
(
this
.
lowerCased
.
startsWith
(
"
hsl
(
"
)
&
&
maybeAlpha
=
=
=
undefined
)
{
return
this
.
authored
;
}
let
{
r
g
b
}
=
this
.
_getRGBATuple
(
)
;
let
[
h
s
l
]
=
rgbToHsl
(
[
r
g
b
]
)
;
if
(
maybeAlpha
!
=
=
undefined
)
{
return
"
hsla
(
"
+
h
+
"
"
+
s
+
"
%
"
+
l
+
"
%
"
+
maybeAlpha
+
"
)
"
;
}
return
"
hsl
(
"
+
h
+
"
"
+
s
+
"
%
"
+
l
+
"
%
)
"
;
}
valueOf
:
function
(
)
{
return
this
.
rgba
;
}
}
;
function
rgbToHsl
(
[
r
g
b
]
)
{
r
=
r
/
255
;
g
=
g
/
255
;
b
=
b
/
255
;
let
max
=
Math
.
max
(
r
g
b
)
;
let
min
=
Math
.
min
(
r
g
b
)
;
let
h
;
let
s
;
let
l
=
(
max
+
min
)
/
2
;
if
(
max
=
=
min
)
{
h
=
s
=
0
;
}
else
{
let
d
=
max
-
min
;
s
=
l
>
0
.
5
?
d
/
(
2
-
max
-
min
)
:
d
/
(
max
+
min
)
;
switch
(
max
)
{
case
r
:
h
=
(
(
g
-
b
)
/
d
)
%
6
;
break
;
case
g
:
h
=
(
b
-
r
)
/
d
+
2
;
break
;
case
b
:
h
=
(
r
-
g
)
/
d
+
4
;
break
;
}
h
*
=
60
;
if
(
h
<
0
)
{
h
+
=
360
;
}
}
return
[
roundTo
(
h
1
)
roundTo
(
s
*
100
1
)
roundTo
(
l
*
100
1
)
]
;
}
function
roundTo
(
number
digits
)
{
const
multiplier
=
Math
.
pow
(
10
digits
)
;
return
Math
.
round
(
number
*
multiplier
)
/
multiplier
;
}
function
setAlpha
(
colorValue
alpha
useCssColor4ColorFunction
=
false
)
{
let
color
=
new
CssColor
(
colorValue
useCssColor4ColorFunction
)
;
if
(
!
color
.
valid
)
{
throw
new
Error
(
"
Invalid
color
.
"
)
;
}
if
(
!
(
alpha
>
=
0
&
&
alpha
<
=
1
)
)
{
alpha
=
1
;
}
let
{
r
g
b
}
=
color
.
_getRGBATuple
(
)
;
return
"
rgba
(
"
+
r
+
"
"
+
g
+
"
"
+
b
+
"
"
+
alpha
+
"
)
"
;
}
function
classifyColor
(
value
)
{
value
=
value
.
toLowerCase
(
)
;
if
(
value
.
startsWith
(
"
rgb
(
"
)
|
|
value
.
startsWith
(
"
rgba
(
"
)
)
{
return
CssColor
.
COLORUNIT
.
rgb
;
}
else
if
(
value
.
startsWith
(
"
hsl
(
"
)
|
|
value
.
startsWith
(
"
hsla
(
"
)
)
{
return
CssColor
.
COLORUNIT
.
hsl
;
}
else
if
(
/
^
#
[
0
-
9a
-
f
]
+
/
.
exec
(
value
)
)
{
return
CssColor
.
COLORUNIT
.
hex
;
}
return
CssColor
.
COLORUNIT
.
name
;
}
var
cssRGBMap
;
function
rgbToColorName
(
r
g
b
)
{
if
(
!
cssRGBMap
)
{
cssRGBMap
=
{
}
;
for
(
let
name
in
cssColors
)
{
let
key
=
JSON
.
stringify
(
cssColors
[
name
]
)
;
if
(
!
(
key
in
cssRGBMap
)
)
{
cssRGBMap
[
key
]
=
name
;
}
}
}
return
cssRGBMap
[
JSON
.
stringify
(
[
r
g
b
1
]
)
]
|
|
"
"
;
}
function
_hslValue
(
m1
m2
h
)
{
if
(
h
<
0
.
0
)
{
h
+
=
1
.
0
;
}
if
(
h
>
1
.
0
)
{
h
-
=
1
.
0
;
}
if
(
h
<
1
.
0
/
6
.
0
)
{
return
m1
+
(
m2
-
m1
)
*
h
*
6
.
0
;
}
if
(
h
<
1
.
0
/
2
.
0
)
{
return
m2
;
}
if
(
h
<
2
.
0
/
3
.
0
)
{
return
m1
+
(
m2
-
m1
)
*
(
2
.
0
/
3
.
0
-
h
)
*
6
.
0
;
}
return
m1
;
}
function
hslToRGB
(
[
h
s
l
]
)
{
let
r
g
b
;
let
m1
m2
;
if
(
l
<
=
0
.
5
)
{
m2
=
l
*
(
s
+
1
)
;
}
else
{
m2
=
l
+
s
-
l
*
s
;
}
m1
=
l
*
2
-
m2
;
r
=
Math
.
round
(
255
*
_hslValue
(
m1
m2
h
+
1
.
0
/
3
.
0
)
)
;
g
=
Math
.
round
(
255
*
_hslValue
(
m1
m2
h
)
)
;
b
=
Math
.
round
(
255
*
_hslValue
(
m1
m2
h
-
1
.
0
/
3
.
0
)
)
;
return
[
r
g
b
]
;
}
function
hexToRGBA
(
name
)
{
let
r
g
b
a
=
1
;
if
(
name
.
length
=
=
=
3
)
{
r
=
parseInt
(
name
.
charAt
(
0
)
+
name
.
charAt
(
0
)
16
)
;
g
=
parseInt
(
name
.
charAt
(
1
)
+
name
.
charAt
(
1
)
16
)
;
b
=
parseInt
(
name
.
charAt
(
2
)
+
name
.
charAt
(
2
)
16
)
;
}
else
if
(
name
.
length
=
=
=
4
)
{
r
=
parseInt
(
name
.
charAt
(
0
)
+
name
.
charAt
(
0
)
16
)
;
g
=
parseInt
(
name
.
charAt
(
1
)
+
name
.
charAt
(
1
)
16
)
;
b
=
parseInt
(
name
.
charAt
(
2
)
+
name
.
charAt
(
2
)
16
)
;
a
=
parseInt
(
name
.
charAt
(
3
)
+
name
.
charAt
(
3
)
16
)
/
255
;
}
else
if
(
name
.
length
=
=
=
6
)
{
r
=
parseInt
(
name
.
charAt
(
0
)
+
name
.
charAt
(
1
)
16
)
;
g
=
parseInt
(
name
.
charAt
(
2
)
+
name
.
charAt
(
3
)
16
)
;
b
=
parseInt
(
name
.
charAt
(
4
)
+
name
.
charAt
(
5
)
16
)
;
}
else
if
(
name
.
length
=
=
=
8
)
{
r
=
parseInt
(
name
.
charAt
(
0
)
+
name
.
charAt
(
1
)
16
)
;
g
=
parseInt
(
name
.
charAt
(
2
)
+
name
.
charAt
(
3
)
16
)
;
b
=
parseInt
(
name
.
charAt
(
4
)
+
name
.
charAt
(
5
)
16
)
;
a
=
parseInt
(
name
.
charAt
(
6
)
+
name
.
charAt
(
7
)
16
)
/
255
;
}
else
{
return
null
;
}
a
=
Math
.
round
(
a
*
10
)
/
10
;
return
{
r
g
b
a
}
;
}
function
clamp
(
value
min
max
)
{
if
(
value
<
min
)
{
value
=
min
;
}
if
(
value
>
max
)
{
value
=
max
;
}
return
value
;
}
function
getToken
(
lexer
)
{
if
(
lexer
.
_hasPushBackToken
)
{
lexer
.
_hasPushBackToken
=
false
;
return
lexer
.
_currentToken
;
}
while
(
true
)
{
let
token
=
lexer
.
nextToken
(
)
;
if
(
!
token
|
|
(
token
.
tokenType
!
=
=
"
comment
"
&
&
token
.
tokenType
!
=
=
"
whitespace
"
)
)
{
lexer
.
_currentToken
=
token
;
return
token
;
}
}
}
function
unGetToken
(
lexer
)
{
if
(
lexer
.
_hasPushBackToken
)
{
throw
new
Error
(
"
Double
pushback
.
"
)
;
}
lexer
.
_hasPushBackToken
=
true
;
}
function
expectSymbol
(
lexer
symbol
)
{
let
token
=
getToken
(
lexer
)
;
if
(
!
token
)
{
return
false
;
}
if
(
token
.
tokenType
!
=
=
"
symbol
"
|
|
token
.
text
!
=
=
symbol
)
{
unGetToken
(
lexer
)
;
return
false
;
}
return
true
;
}
const
COLOR_COMPONENT_TYPE
=
{
"
integer
"
:
"
integer
"
"
number
"
:
"
number
"
"
percentage
"
:
"
percentage
"
}
;
function
parseColorComponent
(
lexer
type
separator
colorArray
)
{
let
token
=
getToken
(
lexer
)
;
if
(
!
token
)
{
return
false
;
}
switch
(
type
)
{
case
COLOR_COMPONENT_TYPE
.
integer
:
if
(
token
.
tokenType
!
=
=
"
number
"
|
|
!
token
.
isInteger
)
{
return
false
;
}
break
;
case
COLOR_COMPONENT_TYPE
.
number
:
if
(
token
.
tokenType
!
=
=
"
number
"
)
{
return
false
;
}
break
;
case
COLOR_COMPONENT_TYPE
.
percentage
:
if
(
token
.
tokenType
!
=
=
"
percentage
"
)
{
return
false
;
}
break
;
default
:
throw
new
Error
(
"
Invalid
color
component
type
.
"
)
;
}
let
colorComponent
=
0
;
if
(
type
=
=
=
COLOR_COMPONENT_TYPE
.
percentage
)
{
colorComponent
=
clamp
(
token
.
number
0
1
)
;
}
else
{
colorComponent
=
clamp
(
token
.
number
0
255
)
;
}
if
(
separator
!
=
=
"
"
&
&
!
expectSymbol
(
lexer
separator
)
)
{
return
false
;
}
colorArray
.
push
(
colorComponent
)
;
return
true
;
}
function
parseColorOpacityAndCloseParen
(
lexer
separator
colorArray
)
{
if
(
expectSymbol
(
lexer
"
)
"
)
)
{
colorArray
.
push
(
1
)
;
return
true
;
}
if
(
!
expectSymbol
(
lexer
separator
)
)
{
return
false
;
}
let
token
=
getToken
(
lexer
)
;
if
(
!
token
)
{
return
false
;
}
if
(
token
.
tokenType
!
=
=
"
number
"
&
&
token
.
tokenType
!
=
=
"
percentage
"
)
{
return
false
;
}
if
(
!
expectSymbol
(
lexer
"
)
"
)
)
{
return
false
;
}
colorArray
.
push
(
clamp
(
token
.
number
0
1
)
)
;
return
true
;
}
function
parseHue
(
lexer
colorArray
)
{
let
token
=
getToken
(
lexer
)
;
if
(
!
token
)
{
return
false
;
}
let
val
=
0
;
if
(
token
.
tokenType
=
=
=
"
number
"
)
{
val
=
token
.
number
;
}
else
if
(
token
.
tokenType
=
=
=
"
dimension
"
&
&
token
.
text
in
CSS_ANGLEUNIT
)
{
val
=
getAngleValueInDegrees
(
token
.
number
token
.
text
)
;
}
else
{
return
false
;
}
val
=
val
/
360
.
0
;
colorArray
.
push
(
val
-
Math
.
floor
(
val
)
)
;
return
true
;
}
function
parseHsl
(
lexer
)
{
const
commaSeparator
=
"
"
;
let
hsl
=
[
]
;
let
a
=
[
]
;
if
(
!
parseHue
(
lexer
hsl
)
)
{
return
null
;
}
let
hasComma
=
expectSymbol
(
lexer
commaSeparator
)
;
let
separatorBeforeAlpha
=
hasComma
?
commaSeparator
:
"
/
"
;
if
(
parseColorComponent
(
lexer
COLOR_COMPONENT_TYPE
.
percentage
hasComma
?
commaSeparator
:
"
"
hsl
)
&
&
parseColorComponent
(
lexer
COLOR_COMPONENT_TYPE
.
percentage
"
"
hsl
)
&
&
parseColorOpacityAndCloseParen
(
lexer
separatorBeforeAlpha
a
)
)
{
return
[
.
.
.
hslToRGB
(
hsl
)
.
.
.
a
]
;
}
return
null
;
}
function
parseOldStyleHsl
(
lexer
hasAlpha
)
{
const
commaSeparator
=
"
"
;
const
closeParen
=
"
)
"
;
let
hsl
=
[
]
;
let
a
=
[
]
;
let
token
=
getToken
(
lexer
)
;
if
(
!
token
|
|
token
.
tokenType
!
=
=
"
number
"
)
{
return
null
;
}
if
(
!
expectSymbol
(
lexer
commaSeparator
)
)
{
return
null
;
}
let
val
=
token
.
number
/
360
.
0
;
hsl
.
push
(
val
-
Math
.
floor
(
val
)
)
;
if
(
hasAlpha
)
{
if
(
parseColorComponent
(
lexer
COLOR_COMPONENT_TYPE
.
percentage
commaSeparator
hsl
)
&
&
parseColorComponent
(
lexer
COLOR_COMPONENT_TYPE
.
percentage
commaSeparator
hsl
)
&
&
parseColorComponent
(
lexer
COLOR_COMPONENT_TYPE
.
number
closeParen
a
)
)
{
return
[
.
.
.
hslToRGB
(
hsl
)
.
.
.
a
]
;
}
}
else
if
(
parseColorComponent
(
lexer
COLOR_COMPONENT_TYPE
.
percentage
commaSeparator
hsl
)
&
&
parseColorComponent
(
lexer
COLOR_COMPONENT_TYPE
.
percentage
closeParen
hsl
)
)
{
return
[
.
.
.
hslToRGB
(
hsl
)
1
]
;
}
return
null
;
}
function
parseRgb
(
lexer
)
{
const
commaSeparator
=
"
"
;
let
rgba
=
[
]
;
let
token
=
getToken
(
lexer
)
;
if
(
token
.
tokenType
!
=
=
"
percentage
"
&
&
token
.
tokenType
!
=
=
"
number
"
)
{
return
null
;
}
unGetToken
(
lexer
)
;
let
type
=
(
token
.
tokenType
=
=
=
"
percentage
"
)
?
COLOR_COMPONENT_TYPE
.
percentage
:
COLOR_COMPONENT_TYPE
.
number
;
if
(
!
parseColorComponent
(
lexer
type
"
"
rgba
)
)
{
return
null
;
}
let
hasComma
=
expectSymbol
(
lexer
commaSeparator
)
;
let
separatorBeforeAlpha
=
hasComma
?
commaSeparator
:
"
/
"
;
if
(
parseColorComponent
(
lexer
type
hasComma
?
commaSeparator
:
"
"
rgba
)
&
&
parseColorComponent
(
lexer
type
"
"
rgba
)
&
&
parseColorOpacityAndCloseParen
(
lexer
separatorBeforeAlpha
rgba
)
)
{
if
(
type
=
=
=
COLOR_COMPONENT_TYPE
.
percentage
)
{
rgba
[
0
]
=
Math
.
round
(
255
*
rgba
[
0
]
)
;
rgba
[
1
]
=
Math
.
round
(
255
*
rgba
[
1
]
)
;
rgba
[
2
]
=
Math
.
round
(
255
*
rgba
[
2
]
)
;
}
return
rgba
;
}
return
null
;
}
function
parseOldStyleRgb
(
lexer
hasAlpha
)
{
const
commaSeparator
=
"
"
;
const
closeParen
=
"
)
"
;
let
rgba
=
[
]
;
let
token
=
getToken
(
lexer
)
;
if
(
token
.
tokenType
!
=
=
"
percentage
"
&
&
(
token
.
tokenType
!
=
=
"
number
"
|
|
!
token
.
isInteger
)
)
{
return
null
;
}
unGetToken
(
lexer
)
;
let
type
=
(
token
.
tokenType
=
=
=
"
percentage
"
)
?
COLOR_COMPONENT_TYPE
.
percentage
:
COLOR_COMPONENT_TYPE
.
integer
;
if
(
hasAlpha
)
{
if
(
!
parseColorComponent
(
lexer
type
commaSeparator
rgba
)
|
|
!
parseColorComponent
(
lexer
type
commaSeparator
rgba
)
|
|
!
parseColorComponent
(
lexer
type
commaSeparator
rgba
)
|
|
!
parseColorComponent
(
lexer
COLOR_COMPONENT_TYPE
.
number
closeParen
rgba
)
)
{
return
null
;
}
}
else
if
(
!
parseColorComponent
(
lexer
type
commaSeparator
rgba
)
|
|
!
parseColorComponent
(
lexer
type
commaSeparator
rgba
)
|
|
!
parseColorComponent
(
lexer
type
closeParen
rgba
)
)
{
return
null
;
}
if
(
type
=
=
=
COLOR_COMPONENT_TYPE
.
percentage
)
{
rgba
[
0
]
=
Math
.
round
(
255
*
rgba
[
0
]
)
;
rgba
[
1
]
=
Math
.
round
(
255
*
rgba
[
1
]
)
;
rgba
[
2
]
=
Math
.
round
(
255
*
rgba
[
2
]
)
;
}
if
(
!
hasAlpha
)
{
rgba
.
push
(
1
)
;
}
return
rgba
;
}
function
colorToRGBA
(
name
useCssColor4ColorFunction
=
false
)
{
name
=
name
.
trim
(
)
.
toLowerCase
(
)
;
if
(
name
in
cssColors
)
{
let
result
=
cssColors
[
name
]
;
return
{
r
:
result
[
0
]
g
:
result
[
1
]
b
:
result
[
2
]
a
:
result
[
3
]
}
;
}
else
if
(
name
=
=
=
"
transparent
"
)
{
return
{
r
:
0
g
:
0
b
:
0
a
:
0
}
;
}
else
if
(
name
=
=
=
"
currentcolor
"
)
{
return
{
r
:
0
g
:
0
b
:
0
a
:
1
}
;
}
let
lexer
=
getCSSLexer
(
name
)
;
let
func
=
getToken
(
lexer
)
;
if
(
!
func
)
{
return
null
;
}
if
(
func
.
tokenType
=
=
=
"
id
"
|
|
func
.
tokenType
=
=
=
"
hash
"
)
{
if
(
getToken
(
lexer
)
!
=
=
null
)
{
return
null
;
}
return
hexToRGBA
(
func
.
text
)
;
}
const
expectedFunctions
=
[
"
rgba
"
"
rgb
"
"
hsla
"
"
hsl
"
]
;
if
(
!
func
|
|
func
.
tokenType
!
=
=
"
function
"
|
|
!
expectedFunctions
.
includes
(
func
.
text
)
)
{
return
null
;
}
let
hsl
=
func
.
text
=
=
=
"
hsl
"
|
|
func
.
text
=
=
=
"
hsla
"
;
let
vals
;
if
(
!
useCssColor4ColorFunction
)
{
let
hasAlpha
=
(
func
.
text
=
=
=
"
rgba
"
|
|
func
.
text
=
=
=
"
hsla
"
)
;
vals
=
hsl
?
parseOldStyleHsl
(
lexer
hasAlpha
)
:
parseOldStyleRgb
(
lexer
hasAlpha
)
;
}
else
{
vals
=
hsl
?
parseHsl
(
lexer
)
:
parseRgb
(
lexer
)
;
}
if
(
!
vals
)
{
return
null
;
}
if
(
getToken
(
lexer
)
!
=
=
null
)
{
return
null
;
}
return
{
r
:
vals
[
0
]
g
:
vals
[
1
]
b
:
vals
[
2
]
a
:
vals
[
3
]
}
;
}
function
isValidCSSColor
(
name
useCssColor4ColorFunction
=
false
)
{
return
colorToRGBA
(
name
useCssColor4ColorFunction
)
!
=
=
null
;
}
