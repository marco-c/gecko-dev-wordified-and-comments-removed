"
use
strict
"
;
const
{
Arg
RetVal
generateActorSpec
types
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
types
.
addDictType
(
"
browsertype
"
{
id
:
"
string
"
name
:
"
string
"
version
:
"
string
"
status
:
"
string
"
}
)
;
types
.
addDictType
(
"
compatibilityissues
"
{
type
:
"
string
"
property
:
"
string
"
aliases
:
"
nullable
:
array
:
string
"
url
:
"
string
"
deprecated
:
"
boolean
"
experimental
:
"
boolean
"
unsupportedBrowsers
:
"
array
:
browsertype
"
}
)
;
types
.
addDictType
(
"
declaration
"
{
name
:
"
string
"
value
:
"
string
"
}
)
;
const
compatibilitySpec
=
generateActorSpec
(
{
typeName
:
"
compatibility
"
methods
:
{
getTraits
:
{
request
:
{
}
response
:
{
traits
:
RetVal
(
"
json
"
)
}
}
getCSSDeclarationBlockIssues
:
{
request
:
{
domRulesDeclarations
:
Arg
(
0
"
array
:
array
:
declaration
"
)
targetBrowsers
:
Arg
(
1
"
array
:
browsertype
"
)
}
response
:
{
compatibilityIssues
:
RetVal
(
"
array
:
array
:
compatibilityissues
"
)
}
}
getNodeCssIssues
:
{
request
:
{
node
:
Arg
(
0
"
domnode
"
)
targetBrowsers
:
Arg
(
1
"
array
:
browsertype
"
)
}
response
:
{
compatibilityIssues
:
RetVal
(
"
array
:
compatibilityissues
"
)
}
}
}
}
)
;
exports
.
compatibilitySpec
=
compatibilitySpec
;
