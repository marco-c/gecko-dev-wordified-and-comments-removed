"
use
strict
"
;
const
{
types
generateActorSpec
RetVal
Option
Arg
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
types
.
addDictType
(
"
windowGlobalTarget
.
attach
"
{
threadActor
:
"
number
"
javascriptEnabled
:
"
nullable
:
boolean
"
traits
:
"
json
"
}
)
;
types
.
addDictType
(
"
windowGlobalTarget
.
switchtoframe
"
{
message
:
"
string
"
}
)
;
types
.
addDictType
(
"
windowGlobalTarget
.
listframes
"
{
frames
:
"
array
:
windowGlobalTarget
.
window
"
}
)
;
types
.
addDictType
(
"
windowGlobalTarget
.
window
"
{
id
:
"
string
"
parentID
:
"
nullable
:
string
"
url
:
"
nullable
:
string
"
title
:
"
nullable
:
string
"
destroy
:
"
nullable
:
boolean
"
}
)
;
types
.
addDictType
(
"
windowGlobalTarget
.
workers
"
{
workers
:
"
array
:
workerDescriptor
"
}
)
;
types
.
addDictType
(
"
windowGlobalTarget
.
reload
"
{
force
:
"
boolean
"
}
)
;
types
.
addDictType
(
"
windowGlobalTarget
.
reconfigure
"
{
cacheDisabled
:
"
nullable
:
boolean
"
colorSchemeSimulation
:
"
nullable
:
string
"
printSimulationEnabled
:
"
nullable
:
boolean
"
restoreFocus
:
"
nullable
:
boolean
"
serviceWorkersTestingEnabled
:
"
nullable
:
boolean
"
}
)
;
const
windowGlobalTargetSpecPrototype
=
{
typeName
:
"
windowGlobalTarget
"
methods
:
{
attach
:
{
request
:
{
}
response
:
RetVal
(
"
windowGlobalTarget
.
attach
"
)
}
detach
:
{
request
:
{
}
response
:
{
}
}
ensureCSSErrorReportingEnabled
:
{
request
:
{
}
response
:
{
}
}
focus
:
{
request
:
{
}
response
:
{
}
}
goForward
:
{
request
:
{
}
response
:
{
}
}
goBack
:
{
request
:
{
}
response
:
{
}
}
reload
:
{
request
:
{
options
:
Option
(
0
"
windowGlobalTarget
.
reload
"
)
}
response
:
{
}
}
navigateTo
:
{
request
:
{
url
:
Option
(
0
"
string
"
)
}
response
:
{
}
}
reconfigure
:
{
request
:
{
options
:
Option
(
0
"
windowGlobalTarget
.
reconfigure
"
)
}
response
:
{
}
}
switchToFrame
:
{
request
:
{
windowId
:
Option
(
0
"
string
"
)
}
response
:
RetVal
(
"
windowGlobalTarget
.
switchtoframe
"
)
}
listFrames
:
{
request
:
{
}
response
:
RetVal
(
"
windowGlobalTarget
.
listframes
"
)
}
listWorkers
:
{
request
:
{
}
response
:
RetVal
(
"
windowGlobalTarget
.
workers
"
)
}
logInPage
:
{
request
:
{
text
:
Option
(
0
"
string
"
)
category
:
Option
(
0
"
string
"
)
flags
:
Option
(
0
"
string
"
)
}
response
:
{
}
}
}
events
:
{
tabNavigated
:
{
type
:
"
tabNavigated
"
url
:
Option
(
0
"
string
"
)
title
:
Option
(
0
"
string
"
)
state
:
Option
(
0
"
string
"
)
isFrameSwitching
:
Option
(
0
"
boolean
"
)
}
frameUpdate
:
{
type
:
"
frameUpdate
"
frames
:
Option
(
0
"
nullable
:
array
:
windowGlobalTarget
.
window
"
)
selected
:
Option
(
0
"
nullable
:
number
"
)
destroyAll
:
Option
(
0
"
nullable
:
boolean
"
)
}
workerListChanged
:
{
type
:
"
workerListChanged
"
}
"
resource
-
available
-
form
"
:
{
type
:
"
resource
-
available
-
form
"
resources
:
Arg
(
0
"
array
:
json
"
)
}
"
resource
-
destroyed
-
form
"
:
{
type
:
"
resource
-
destroyed
-
form
"
resources
:
Arg
(
0
"
array
:
json
"
)
}
"
resource
-
updated
-
form
"
:
{
type
:
"
resource
-
updated
-
form
"
resources
:
Arg
(
0
"
array
:
json
"
)
}
}
}
;
const
windowGlobalTargetSpec
=
generateActorSpec
(
windowGlobalTargetSpecPrototype
)
;
exports
.
windowGlobalTargetSpecPrototype
=
windowGlobalTargetSpecPrototype
;
exports
.
windowGlobalTargetSpec
=
windowGlobalTargetSpec
;
