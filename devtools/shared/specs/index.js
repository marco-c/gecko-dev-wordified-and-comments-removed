"
use
strict
"
;
const
Types
=
[
{
types
:
[
"
pagestyle
"
"
domstylerule
"
]
spec
:
"
devtools
/
shared
/
specs
/
styles
"
front
:
"
devtools
/
shared
/
fronts
/
styles
"
}
{
types
:
[
"
highlighter
"
"
customhighlighter
"
]
spec
:
"
devtools
/
shared
/
specs
/
highlighters
"
front
:
"
devtools
/
shared
/
fronts
/
highlighters
"
}
{
types
:
[
"
grid
"
"
layout
"
]
spec
:
"
devtools
/
shared
/
specs
/
layout
"
front
:
"
devtools
/
shared
/
fronts
/
layout
"
}
{
types
:
[
"
longstring
"
]
spec
:
"
devtools
/
shared
/
specs
/
string
"
front
:
"
devtools
/
shared
/
fronts
/
string
"
}
{
types
:
[
"
originalsource
"
"
mediarule
"
"
stylesheet
"
"
stylesheets
"
]
spec
:
"
devtools
/
shared
/
specs
/
stylesheets
"
front
:
"
devtools
/
shared
/
fronts
/
stylesheets
"
}
{
types
:
[
"
imageData
"
"
domnode
"
]
spec
:
"
devtools
/
shared
/
specs
/
node
"
front
:
"
devtools
/
shared
/
fronts
/
inspector
"
}
{
types
:
[
"
domwalker
"
]
spec
:
"
devtools
/
shared
/
specs
/
inspector
"
front
:
"
devtools
/
shared
/
fronts
/
inspector
"
}
{
types
:
[
"
performance
-
recording
"
]
spec
:
"
devtools
/
shared
/
specs
/
performance
-
recording
"
front
:
"
devtools
/
shared
/
fronts
/
performancec
-
recording
"
}
]
;
const
lazySpecs
=
new
Map
(
)
;
const
lazyFronts
=
new
Map
(
)
;
Types
.
forEach
(
item
=
>
{
item
.
types
.
forEach
(
type
=
>
{
lazySpecs
.
set
(
type
item
.
spec
)
;
lazyFronts
.
set
(
type
item
.
front
)
;
}
)
;
}
)
;
function
lazyLoadSpec
(
type
)
{
let
modulePath
=
lazySpecs
.
get
(
type
)
;
if
(
modulePath
)
{
try
{
require
(
modulePath
)
;
}
catch
(
e
)
{
throw
new
Error
(
Unable
to
load
lazy
spec
module
'
{
modulePath
}
'
for
type
'
{
type
}
'
)
;
}
lazySpecs
.
delete
(
type
)
;
return
true
;
}
return
false
;
}
exports
.
lazyLoadSpec
=
lazyLoadSpec
;
function
lazyLoadFront
(
type
)
{
let
modulePath
=
lazyFronts
.
get
(
type
)
;
if
(
modulePath
)
{
try
{
require
(
modulePath
)
;
}
catch
(
e
)
{
throw
new
Error
(
Unable
to
load
lazy
front
module
'
{
modulePath
}
'
for
type
'
{
type
}
'
)
;
}
lazyFronts
.
delete
(
type
)
;
return
true
;
}
return
false
;
}
exports
.
lazyLoadFront
=
lazyLoadFront
;
