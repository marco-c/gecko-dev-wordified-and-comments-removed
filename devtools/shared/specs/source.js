"
use
strict
"
;
const
{
Arg
RetVal
generateActorSpec
types
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
longstringType
=
types
.
getType
(
"
longstring
"
)
;
types
.
addType
(
"
sourcedata
"
{
write
:
(
value
context
detail
)
=
>
{
if
(
value
.
type
=
=
=
"
arrayBuffer
"
)
{
return
value
;
}
return
longstringType
.
write
(
value
context
detail
)
;
}
read
:
(
value
context
detail
)
=
>
{
if
(
value
.
type
=
=
=
"
arrayBuffer
"
)
{
return
value
;
}
return
longstringType
.
read
(
value
context
detail
)
;
}
}
)
;
types
.
addDictType
(
"
sourceposition
"
{
line
:
"
number
"
column
:
"
number
"
}
)
;
types
.
addDictType
(
"
nullablesourceposition
"
{
line
:
"
nullable
:
number
"
column
:
"
nullable
:
number
"
}
)
;
types
.
addDictType
(
"
breakpointquery
"
{
start
:
"
nullable
:
nullablesourceposition
"
end
:
"
nullable
:
nullablesourceposition
"
}
)
;
types
.
addDictType
(
"
source
.
onsource
"
{
contentType
:
"
nullable
:
string
"
source
:
"
nullable
:
sourcedata
"
}
)
;
const
sourceSpec
=
generateActorSpec
(
{
typeName
:
"
source
"
methods
:
{
getBreakpointPositions
:
{
request
:
{
query
:
Arg
(
0
"
nullable
:
breakpointquery
"
)
}
response
:
{
positions
:
RetVal
(
"
array
:
sourceposition
"
)
}
}
getBreakpointPositionsCompressed
:
{
request
:
{
query
:
Arg
(
0
"
nullable
:
breakpointquery
"
)
}
response
:
{
positions
:
RetVal
(
"
json
"
)
}
}
onSource
:
{
request
:
{
type
:
"
source
"
}
response
:
RetVal
(
"
source
.
onsource
"
)
}
setPausePoints
:
{
request
:
{
pausePoints
:
Arg
(
0
"
json
"
)
}
}
blackbox
:
{
request
:
{
range
:
Arg
(
0
"
nullable
:
json
"
)
}
response
:
{
pausedInSource
:
RetVal
(
"
boolean
"
)
}
}
unblackbox
:
{
request
:
{
range
:
Arg
(
0
"
nullable
:
json
"
)
}
}
}
}
)
;
exports
.
sourceSpec
=
sourceSpec
;
