"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
Arg
RetVal
types
}
=
protocol
;
let
childSpecs
=
{
}
;
function
createStorageSpec
(
options
)
{
let
methods
=
{
getStoreObjects
:
{
request
:
{
host
:
Arg
(
0
)
names
:
Arg
(
1
"
nullable
:
array
:
string
"
)
options
:
Arg
(
2
"
nullable
:
json
"
)
}
response
:
RetVal
(
options
.
storeObjectType
)
}
getFields
:
{
request
:
{
subType
:
Arg
(
0
"
nullable
:
string
"
)
}
response
:
{
value
:
RetVal
(
"
json
"
)
}
}
}
;
Object
.
assign
(
methods
options
.
methods
)
;
childSpecs
[
options
.
typeName
]
=
protocol
.
generateActorSpec
(
{
typeName
:
options
.
typeName
methods
}
)
;
}
types
.
addDictType
(
"
cookieobject
"
{
uniqueKey
:
"
string
"
name
:
"
string
"
value
:
"
longstring
"
path
:
"
nullable
:
string
"
host
:
"
string
"
isDomain
:
"
boolean
"
isSecure
:
"
boolean
"
isHttpOnly
:
"
boolean
"
creationTime
:
"
number
"
lastAccessed
:
"
number
"
expires
:
"
number
"
}
)
;
types
.
addDictType
(
"
cookiestoreobject
"
{
total
:
"
number
"
offset
:
"
number
"
data
:
"
array
:
nullable
:
cookieobject
"
}
)
;
const
editRemoveMethods
=
{
getFields
:
{
request
:
{
}
response
:
{
value
:
RetVal
(
"
json
"
)
}
}
editItem
:
{
request
:
{
data
:
Arg
(
0
"
json
"
)
}
response
:
{
}
}
removeItem
:
{
request
:
{
host
:
Arg
(
0
"
string
"
)
name
:
Arg
(
1
"
string
"
)
}
response
:
{
}
}
}
;
createStorageSpec
(
{
typeName
:
"
cookies
"
storeObjectType
:
"
cookiestoreobject
"
methods
:
Object
.
assign
(
{
}
editRemoveMethods
{
removeAll
:
{
request
:
{
host
:
Arg
(
0
"
string
"
)
domain
:
Arg
(
1
"
nullable
:
string
"
)
}
response
:
{
}
}
}
)
}
)
;
types
.
addDictType
(
"
storageobject
"
{
name
:
"
string
"
value
:
"
longstring
"
}
)
;
const
storageMethods
=
Object
.
assign
(
{
}
editRemoveMethods
{
removeAll
:
{
request
:
{
host
:
Arg
(
0
"
string
"
)
}
response
:
{
}
}
}
)
;
types
.
addDictType
(
"
storagestoreobject
"
{
total
:
"
number
"
offset
:
"
number
"
data
:
"
array
:
nullable
:
storageobject
"
}
)
;
createStorageSpec
(
{
typeName
:
"
localStorage
"
storeObjectType
:
"
storagestoreobject
"
methods
:
storageMethods
}
)
;
createStorageSpec
(
{
typeName
:
"
sessionStorage
"
storeObjectType
:
"
storagestoreobject
"
methods
:
storageMethods
}
)
;
types
.
addDictType
(
"
cacheobject
"
{
"
url
"
:
"
string
"
"
status
"
:
"
string
"
}
)
;
types
.
addDictType
(
"
cachestoreobject
"
{
total
:
"
number
"
offset
:
"
number
"
data
:
"
array
:
nullable
:
cacheobject
"
}
)
;
createStorageSpec
(
{
typeName
:
"
Cache
"
storeObjectType
:
"
cachestoreobject
"
methods
:
{
removeAll
:
{
request
:
{
host
:
Arg
(
0
"
string
"
)
name
:
Arg
(
1
"
string
"
)
}
response
:
{
}
}
removeItem
:
{
request
:
{
host
:
Arg
(
0
"
string
"
)
name
:
Arg
(
1
"
string
"
)
}
response
:
{
}
}
}
}
)
;
types
.
addDictType
(
"
idbobject
"
{
uniqueKey
:
"
string
"
name
:
"
nullable
:
string
"
db
:
"
nullable
:
string
"
objectStore
:
"
nullable
:
string
"
origin
:
"
nullable
:
string
"
version
:
"
nullable
:
number
"
storage
:
"
nullable
:
string
"
objectStores
:
"
nullable
:
number
"
keyPath
:
"
nullable
:
string
"
autoIncrement
:
"
nullable
:
boolean
"
indexes
:
"
nullable
:
string
"
value
:
"
nullable
:
longstring
"
}
)
;
types
.
addDictType
(
"
idbstoreobject
"
{
total
:
"
number
"
offset
:
"
number
"
data
:
"
array
:
nullable
:
idbobject
"
}
)
;
types
.
addDictType
(
"
idbdeleteresult
"
{
blocked
:
"
nullable
:
boolean
"
error
:
"
nullable
:
string
"
}
)
;
createStorageSpec
(
{
typeName
:
"
indexedDB
"
storeObjectType
:
"
idbstoreobject
"
methods
:
{
removeDatabase
:
{
request
:
{
host
:
Arg
(
0
"
string
"
)
name
:
Arg
(
1
"
string
"
)
}
response
:
RetVal
(
"
idbdeleteresult
"
)
}
removeAll
:
{
request
:
{
host
:
Arg
(
0
"
string
"
)
name
:
Arg
(
1
"
string
"
)
}
response
:
{
}
}
removeItem
:
{
request
:
{
host
:
Arg
(
0
"
string
"
)
name
:
Arg
(
1
"
string
"
)
}
response
:
{
}
}
}
}
)
;
types
.
addDictType
(
"
storeUpdateObject
"
{
changed
:
"
nullable
:
json
"
deleted
:
"
nullable
:
json
"
added
:
"
nullable
:
json
"
}
)
;
types
.
addDictType
(
"
storelist
"
Object
.
keys
(
childSpecs
)
.
reduce
(
(
obj
type
)
=
>
{
obj
[
type
]
=
type
;
return
obj
;
}
{
}
)
)
;
exports
.
childSpecs
=
childSpecs
;
exports
.
storageSpec
=
protocol
.
generateActorSpec
(
{
typeName
:
"
storage
"
events
:
{
"
stores
-
update
"
:
{
type
:
"
storesUpdate
"
data
:
Arg
(
0
"
storeUpdateObject
"
)
}
"
stores
-
cleared
"
:
{
type
:
"
storesCleared
"
data
:
Arg
(
0
"
json
"
)
}
"
stores
-
reloaded
"
:
{
type
:
"
storesReloaded
"
data
:
Arg
(
0
"
json
"
)
}
}
methods
:
{
listStores
:
{
request
:
{
}
response
:
RetVal
(
"
storelist
"
)
}
}
}
)
;
