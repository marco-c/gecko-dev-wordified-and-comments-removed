"
use
strict
"
;
const
{
RetVal
types
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
types
.
addActorType
(
"
domstylerule
"
)
;
types
.
addDictType
(
"
appliedstyle
"
{
rule
:
"
domstylerule
#
actorid
"
inherited
:
"
nullable
:
domnode
#
actorid
"
keyframes
:
"
nullable
:
domstylerule
#
actorid
"
}
)
;
types
.
addDictType
(
"
matchedselector
"
{
rule
:
"
domstylerule
#
actorid
"
selector
:
"
string
"
value
:
"
string
"
status
:
"
number
"
}
)
;
types
.
addDictType
(
"
appliedStylesReturn
"
{
entries
:
"
array
:
appliedstyle
"
rules
:
"
array
:
domstylerule
"
sheets
:
"
array
:
stylesheet
"
}
)
;
types
.
addDictType
(
"
modifiedStylesReturn
"
{
isMatching
:
RetVal
(
"
boolean
"
)
ruleProps
:
RetVal
(
"
nullable
:
appliedStylesReturn
"
)
}
)
;
types
.
addDictType
(
"
fontpreview
"
{
data
:
"
nullable
:
longstring
"
size
:
"
json
"
}
)
;
types
.
addDictType
(
"
fontvariationaxis
"
{
tag
:
"
string
"
name
:
"
string
"
minValue
:
"
number
"
maxValue
:
"
number
"
defaultValue
:
"
number
"
}
)
;
types
.
addDictType
(
"
fontvariationinstancevalue
"
{
axis
:
"
string
"
value
:
"
number
"
}
)
;
types
.
addDictType
(
"
fontvariationinstance
"
{
name
:
"
string
"
values
:
"
array
:
fontvariationinstancevalue
"
}
)
;
types
.
addDictType
(
"
fontface
"
{
name
:
"
string
"
CSSFamilyName
:
"
string
"
rule
:
"
nullable
:
domstylerule
"
srcIndex
:
"
number
"
URI
:
"
string
"
format
:
"
string
"
preview
:
"
nullable
:
fontpreview
"
localName
:
"
string
"
metadata
:
"
string
"
variationAxes
:
"
array
:
fontvariationaxis
"
variationInstances
:
"
array
:
fontvariationinstance
"
}
)
;
