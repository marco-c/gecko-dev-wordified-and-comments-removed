"
use
strict
"
;
const
{
types
generateActorSpec
RetVal
Option
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
types
.
addDictType
(
"
console
.
traits
"
{
evaluateJSAsync
:
"
boolean
"
transferredResponseSize
:
"
boolean
"
selectedObjectActor
:
"
boolean
"
fetchCacheDescriptor
:
"
boolean
"
}
)
;
types
.
addDictType
(
"
console
.
startlisteners
"
{
startedListeners
:
"
array
:
string
"
nativeConsoleAPI
:
"
boolean
"
traits
:
"
console
.
traits
"
}
)
;
types
.
addDictType
(
"
console
.
autocomplete
"
{
matches
:
"
array
:
string
"
matchProp
:
"
string
"
}
)
;
types
.
addDictType
(
"
console
.
evaluatejsasync
"
{
resultID
:
"
string
"
}
)
;
types
.
addDictType
(
"
console
.
cachedmessages
"
{
error
:
"
nullable
:
string
"
message
:
"
longstring
"
_type
:
"
nullable
:
string
"
timeStamp
:
"
nullable
:
string
"
}
)
;
const
webconsoleSpecPrototype
=
{
typeName
:
"
console
"
methods
:
{
startListeners
:
{
request
:
{
listeners
:
Option
(
0
"
array
:
string
"
)
}
response
:
RetVal
(
"
console
.
startlisteners
"
)
}
stopListeners
:
{
request
:
{
listeners
:
Option
(
0
"
nullable
:
array
:
string
"
)
}
response
:
RetVal
(
"
array
:
string
"
)
}
getCachedMessages
:
{
request
:
{
messageTypes
:
Option
(
0
"
array
:
string
"
)
}
response
:
RetVal
(
"
console
.
cachedmessages
"
)
}
evaluateJS
:
{
request
:
{
text
:
Option
(
0
"
string
"
)
bindObjectActor
:
Option
(
0
"
string
"
)
frameActor
:
Option
(
0
"
string
"
)
url
:
Option
(
0
"
string
"
)
selectedNodeActor
:
Option
(
0
"
string
"
)
selectedObjectActor
:
Option
(
0
"
string
"
)
mapped
:
Option
(
0
"
nullable
:
json
"
)
}
response
:
RetVal
(
"
json
"
)
}
evaluateJSAsync
:
{
request
:
{
text
:
Option
(
0
"
string
"
)
bindObjectActor
:
Option
(
0
"
string
"
)
frameActor
:
Option
(
0
"
string
"
)
url
:
Option
(
0
"
string
"
)
selectedNodeActor
:
Option
(
0
"
string
"
)
selectedObjectActor
:
Option
(
0
"
string
"
)
mapped
:
Option
(
0
"
nullable
:
json
"
)
}
response
:
RetVal
(
"
console
.
evaluatejsasync
"
)
}
autocomplete
:
{
request
:
{
text
:
Option
(
0
"
string
"
)
cursor
:
Option
(
0
"
nullable
:
number
"
)
frameActor
:
Option
(
0
"
nullable
:
string
"
)
selectedNodeActor
:
Option
(
0
"
nullable
:
string
"
)
}
response
:
RetVal
(
"
console
.
autocomplete
"
)
}
clearMessagesCache
:
{
oneway
:
true
}
getPreferences
:
{
request
:
{
preferences
:
Option
(
0
"
array
:
string
"
)
}
response
:
RetVal
(
"
json
"
)
}
setPreferences
:
{
request
:
{
preferences
:
Option
(
0
"
json
"
)
}
response
:
RetVal
(
"
json
"
)
}
sendHTTPRequest
:
{
request
:
{
request
:
Option
(
0
"
json
"
)
}
response
:
RetVal
(
"
json
"
)
}
}
}
;
const
webconsoleSpec
=
generateActorSpec
(
webconsoleSpecPrototype
)
;
exports
.
webconsoleSpecPrototype
=
webconsoleSpecPrototype
;
exports
.
webconsoleSpec
=
webconsoleSpec
;
