"
use
strict
"
;
const
{
Arg
Option
RetVal
generateActorSpec
types
}
=
require
(
"
devtools
/
shared
/
protocol
.
js
"
)
;
require
(
"
devtools
/
shared
/
specs
/
stylesheets
.
js
"
)
;
types
.
addActorType
(
"
domnode
"
)
;
types
.
addActorType
(
"
domstylerule
"
)
;
types
.
addLifetime
(
"
walker
"
"
walker
"
)
;
types
.
addDictType
(
"
appliedstyle
"
{
rule
:
"
domstylerule
#
actorid
"
inherited
:
"
nullable
:
domnode
#
actorid
"
keyframes
:
"
nullable
:
domstylerule
#
actorid
"
}
)
;
types
.
addDictType
(
"
matchedselector
"
{
rule
:
"
domstylerule
#
actorid
"
selector
:
"
string
"
value
:
"
string
"
status
:
"
number
"
}
)
;
types
.
addDictType
(
"
appliedStylesReturn
"
{
entries
:
"
array
:
appliedstyle
"
rules
:
"
array
:
domstylerule
"
sheets
:
"
array
:
stylesheet
"
}
)
;
types
.
addDictType
(
"
modifiedStylesReturn
"
{
isMatching
:
RetVal
(
"
boolean
"
)
ruleProps
:
RetVal
(
"
nullable
:
appliedStylesReturn
"
)
}
)
;
types
.
addDictType
(
"
fontpreview
"
{
data
:
"
nullable
:
longstring
"
size
:
"
json
"
}
)
;
types
.
addDictType
(
"
fontface
"
{
name
:
"
string
"
CSSFamilyName
:
"
string
"
rule
:
"
nullable
:
domstylerule
"
srcIndex
:
"
number
"
URI
:
"
string
"
format
:
"
string
"
preview
:
"
nullable
:
fontpreview
"
localName
:
"
string
"
metadata
:
"
string
"
}
)
;
const
pageStyleSpec
=
generateActorSpec
(
{
typeName
:
"
pagestyle
"
events
:
{
"
stylesheet
-
updated
"
:
{
type
:
"
styleSheetUpdated
"
styleSheet
:
Arg
(
0
"
stylesheet
"
)
}
}
methods
:
{
getComputed
:
{
request
:
{
node
:
Arg
(
0
"
domnode
"
)
markMatched
:
Option
(
1
"
boolean
"
)
onlyMatched
:
Option
(
1
"
boolean
"
)
filter
:
Option
(
1
"
string
"
)
}
response
:
{
computed
:
RetVal
(
"
json
"
)
}
}
getAllUsedFontFaces
:
{
request
:
{
includePreviews
:
Option
(
0
"
boolean
"
)
previewText
:
Option
(
0
"
string
"
)
previewFontSize
:
Option
(
0
"
string
"
)
previewFillStyle
:
Option
(
0
"
string
"
)
}
response
:
{
fontFaces
:
RetVal
(
"
array
:
fontface
"
)
}
}
getUsedFontFaces
:
{
request
:
{
node
:
Arg
(
0
"
domnode
"
)
includePreviews
:
Option
(
1
"
boolean
"
)
previewText
:
Option
(
1
"
string
"
)
previewFontSize
:
Option
(
1
"
string
"
)
previewFillStyle
:
Option
(
1
"
string
"
)
}
response
:
{
fontFaces
:
RetVal
(
"
array
:
fontface
"
)
}
}
getMatchedSelectors
:
{
request
:
{
node
:
Arg
(
0
"
domnode
"
)
property
:
Arg
(
1
"
string
"
)
filter
:
Option
(
2
"
string
"
)
}
response
:
RetVal
(
types
.
addDictType
(
"
matchedselectorresponse
"
{
rules
:
"
array
:
domstylerule
"
sheets
:
"
array
:
stylesheet
"
matched
:
"
array
:
matchedselector
"
}
)
)
}
getApplied
:
{
request
:
{
node
:
Arg
(
0
"
domnode
"
)
inherited
:
Option
(
1
"
boolean
"
)
matchedSelectors
:
Option
(
1
"
boolean
"
)
filter
:
Option
(
1
"
string
"
)
}
response
:
RetVal
(
"
appliedStylesReturn
"
)
}
isPositionEditable
:
{
request
:
{
node
:
Arg
(
0
"
domnode
"
)
}
response
:
{
value
:
RetVal
(
"
boolean
"
)
}
}
getLayout
:
{
request
:
{
node
:
Arg
(
0
"
domnode
"
)
autoMargins
:
Option
(
1
"
boolean
"
)
}
response
:
RetVal
(
"
json
"
)
}
addNewRule
:
{
request
:
{
node
:
Arg
(
0
"
domnode
"
)
pseudoClasses
:
Arg
(
1
"
nullable
:
array
:
string
"
)
editAuthored
:
Arg
(
2
"
boolean
"
)
}
response
:
RetVal
(
"
appliedStylesReturn
"
)
}
}
}
)
;
exports
.
pageStyleSpec
=
pageStyleSpec
;
