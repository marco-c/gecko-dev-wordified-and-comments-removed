"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
Arg
Option
RetVal
generateActorSpec
}
=
protocol
;
protocol
.
types
.
addType
(
"
array
-
buffer
-
view
"
{
write
:
(
v
)
=
>
"
[
"
+
Array
.
join
(
v
"
"
)
+
"
]
"
read
:
(
v
)
=
>
JSON
.
parse
(
v
)
}
)
;
protocol
.
types
.
addDictType
(
"
snapshot
-
image
"
{
index
:
"
number
"
width
:
"
number
"
height
:
"
number
"
scaling
:
"
number
"
flipped
:
"
boolean
"
pixels
:
"
array
-
buffer
-
view
"
}
)
;
protocol
.
types
.
addDictType
(
"
snapshot
-
overview
"
{
calls
:
"
array
:
function
-
call
"
thumbnails
:
"
array
:
snapshot
-
image
"
screenshot
:
"
snapshot
-
image
"
}
)
;
exports
.
CANVAS_CONTEXTS
=
[
"
CanvasRenderingContext2D
"
"
WebGLRenderingContext
"
]
;
exports
.
ANIMATION_GENERATORS
=
[
"
requestAnimationFrame
"
]
;
exports
.
LOOP_GENERATORS
=
[
"
setTimeout
"
]
;
exports
.
DRAW_CALLS
=
[
"
fill
"
"
stroke
"
"
clearRect
"
"
fillRect
"
"
strokeRect
"
"
fillText
"
"
strokeText
"
"
drawImage
"
"
clear
"
"
drawArrays
"
"
drawElements
"
"
finish
"
"
flush
"
]
;
exports
.
INTERESTING_CALLS
=
[
"
save
"
"
restore
"
"
useProgram
"
]
;
const
frameSnapshotSpec
=
generateActorSpec
(
{
typeName
:
"
frame
-
snapshot
"
methods
:
{
getOverview
:
{
response
:
{
overview
:
RetVal
(
"
snapshot
-
overview
"
)
}
}
generateScreenshotFor
:
{
request
:
{
call
:
Arg
(
0
"
function
-
call
"
)
}
response
:
{
screenshot
:
RetVal
(
"
snapshot
-
image
"
)
}
}
}
}
)
;
exports
.
frameSnapshotSpec
=
frameSnapshotSpec
;
const
canvasSpec
=
generateActorSpec
(
{
typeName
:
"
canvas
"
methods
:
{
setup
:
{
request
:
{
reload
:
Option
(
0
"
boolean
"
)
}
oneway
:
true
}
finalize
:
{
oneway
:
true
}
isInitialized
:
{
response
:
{
initialized
:
RetVal
(
"
boolean
"
)
}
}
isRecording
:
{
response
:
{
recording
:
RetVal
(
"
boolean
"
)
}
}
recordAnimationFrame
:
{
response
:
{
snapshot
:
RetVal
(
"
nullable
:
frame
-
snapshot
"
)
}
}
stopRecordingAnimationFrame
:
{
oneway
:
true
}
}
}
)
;
exports
.
canvasSpec
=
canvasSpec
;
