const
{
Arg
Option
RetVal
generateActorSpec
types
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
"
use
strict
"
;
types
.
addType
(
"
profiler
-
data
"
{
read
:
(
v
)
=
>
{
if
(
typeof
v
.
profile
=
=
=
"
string
"
)
{
let
newValue
=
Object
.
create
(
null
)
;
newValue
.
profile
=
JSON
.
parse
(
v
.
profile
)
;
newValue
.
currentTime
=
v
.
currentTime
;
return
newValue
;
}
return
v
;
}
}
)
;
const
profilerSpec
=
generateActorSpec
(
{
typeName
:
"
profiler
"
events
:
{
"
console
-
api
-
profiler
"
:
{
data
:
Arg
(
0
"
json
"
)
}
"
profiler
-
started
"
:
{
data
:
Arg
(
0
"
json
"
)
}
"
profiler
-
stopped
"
:
{
data
:
Arg
(
0
"
json
"
)
}
"
profiler
-
status
"
:
{
data
:
Arg
(
0
"
json
"
)
}
"
eventNotification
"
:
{
subject
:
Option
(
0
"
json
"
)
topic
:
Option
(
0
"
string
"
)
details
:
Option
(
0
"
json
"
)
}
}
methods
:
{
startProfiler
:
{
request
:
{
entries
:
Option
(
0
"
nullable
:
number
"
)
interval
:
Option
(
0
"
nullable
:
number
"
)
features
:
Option
(
0
"
nullable
:
array
:
string
"
)
threadFilters
:
Option
(
0
"
nullable
:
array
:
string
"
)
}
response
:
RetVal
(
"
json
"
)
}
stopProfiler
:
{
response
:
RetVal
(
"
json
"
)
}
getProfile
:
{
request
:
{
startTime
:
Option
(
0
"
nullable
:
number
"
)
stringify
:
Option
(
0
"
nullable
:
boolean
"
)
}
response
:
RetVal
(
"
profiler
-
data
"
)
}
getFeatures
:
{
response
:
RetVal
(
"
json
"
)
}
getBufferInfo
:
{
response
:
RetVal
(
"
json
"
)
}
getStartOptions
:
{
response
:
RetVal
(
"
json
"
)
}
isActive
:
{
response
:
RetVal
(
"
json
"
)
}
getSharedLibraryInformation
:
{
response
:
RetVal
(
"
json
"
)
}
registerEventNotifications
:
{
request
:
{
events
:
Option
(
0
"
nullable
:
array
:
string
"
)
}
response
:
RetVal
(
"
json
"
)
}
unregisterEventNotifications
:
{
request
:
{
events
:
Option
(
0
"
nullable
:
array
:
string
"
)
}
response
:
RetVal
(
"
json
"
)
}
setProfilerStatusInterval
:
{
request
:
{
interval
:
Arg
(
0
"
number
"
)
}
oneway
:
true
}
}
}
)
;
exports
.
profilerSpec
=
profilerSpec
;
