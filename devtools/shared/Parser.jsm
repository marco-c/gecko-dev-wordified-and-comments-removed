"
use
strict
"
;
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Reflect
"
"
resource
:
/
/
gre
/
modules
/
reflect
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
Parser
"
]
;
this
.
Parser
=
function
Parser
(
)
{
this
.
_cache
=
new
Map
(
)
;
this
.
errors
=
[
]
;
this
.
logExceptions
=
true
;
}
;
Parser
.
prototype
=
{
get
(
source
url
=
"
"
)
{
if
(
this
.
_cache
.
has
(
url
)
)
{
return
this
.
_cache
.
get
(
url
)
;
}
const
regexp
=
/
<
script
[
^
>
]
*
?
(
?
:
>
(
[
^
]
*
?
)
<
\
/
script
\
s
*
>
|
\
/
>
)
/
gim
;
const
syntaxTrees
=
[
]
;
const
scriptMatches
=
[
]
;
let
scriptMatch
;
if
(
source
.
match
(
/
^
\
s
*
<
/
)
)
{
while
(
(
scriptMatch
=
regexp
.
exec
(
source
)
)
)
{
scriptMatches
.
push
(
scriptMatch
[
1
]
|
|
"
"
)
;
}
}
if
(
!
scriptMatches
.
length
)
{
try
{
const
nodes
=
Reflect
.
parse
(
source
)
;
const
length
=
source
.
length
;
syntaxTrees
.
push
(
new
SyntaxTree
(
nodes
url
length
)
)
;
}
catch
(
e
)
{
this
.
errors
.
push
(
e
)
;
if
(
this
.
logExceptions
)
{
DevToolsUtils
.
reportException
(
url
e
)
;
}
}
}
else
{
for
(
const
script
of
scriptMatches
)
{
try
{
const
nodes
=
Reflect
.
parse
(
script
)
;
const
offset
=
source
.
indexOf
(
script
)
;
const
length
=
script
.
length
;
syntaxTrees
.
push
(
new
SyntaxTree
(
nodes
url
length
offset
)
)
;
}
catch
(
e
)
{
this
.
errors
.
push
(
e
)
;
if
(
this
.
logExceptions
)
{
DevToolsUtils
.
reportException
(
url
e
)
;
}
}
}
}
const
pool
=
new
SyntaxTreesPool
(
syntaxTrees
url
)
;
if
(
url
)
{
this
.
_cache
.
set
(
url
pool
)
;
}
return
pool
;
}
_cache
:
null
errors
:
null
}
;
function
SyntaxTreesPool
(
syntaxTrees
url
=
"
<
unknown
>
"
)
{
this
.
_trees
=
syntaxTrees
;
this
.
_url
=
url
;
this
.
_cache
=
new
Map
(
)
;
}
SyntaxTreesPool
.
prototype
=
{
getLastSyntaxTree
(
)
{
return
this
.
_trees
[
this
.
_trees
.
length
-
1
]
;
}
_trees
:
null
_cache
:
null
}
;
function
SyntaxTree
(
nodes
url
length
offset
=
0
)
{
this
.
AST
=
nodes
;
this
.
url
=
url
;
this
.
length
=
length
;
this
.
offset
=
offset
;
}
