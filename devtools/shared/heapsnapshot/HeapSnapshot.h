#
ifndef
mozilla_devtools_HeapSnapshot__
#
define
mozilla_devtools_HeapSnapshot__
#
include
"
js
/
HashTable
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
devtools
/
DeserializedNode
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefCounted
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
CoreDump
.
pb
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCRTGlue
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsXPCOM
.
h
"
namespace
mozilla
{
namespace
devtools
{
class
DominatorTree
;
struct
NSFreePolicy
{
void
operator
(
)
(
void
*
ptr
)
{
NS_Free
(
ptr
)
;
}
}
;
using
UniqueTwoByteString
=
UniquePtr
<
char16_t
[
]
NSFreePolicy
>
;
using
UniqueOneByteString
=
UniquePtr
<
char
[
]
NSFreePolicy
>
;
class
HeapSnapshot
final
:
public
nsISupports
public
nsWrapperCache
{
friend
struct
DeserializedNode
;
friend
struct
DeserializedEdge
;
friend
struct
DeserializedStackFrame
;
friend
class
JS
:
:
ubi
:
:
Concrete
<
JS
:
:
ubi
:
:
DeserializedNode
>
;
explicit
HeapSnapshot
(
JSContext
*
cx
nsISupports
*
aParent
)
:
timestamp
(
Nothing
(
)
)
rootId
(
0
)
nodes
(
cx
)
frames
(
cx
)
mParent
(
aParent
)
{
MOZ_ASSERT
(
aParent
)
;
}
;
bool
init
(
JSContext
*
cx
const
uint8_t
*
buffer
uint32_t
size
)
;
using
NodeIdSet
=
js
:
:
HashSet
<
NodeId
>
;
bool
saveNode
(
const
protobuf
:
:
Node
&
node
NodeIdSet
&
edgeReferents
)
;
bool
saveStackFrame
(
const
protobuf
:
:
StackFrame
&
frame
StackFrameId
&
outFrameId
)
;
public
:
static
const
size_t
MAX_STACK_DEPTH
=
60
;
private
:
Maybe
<
uint64_t
>
timestamp
;
NodeId
rootId
;
using
NodeSet
=
js
:
:
HashSet
<
DeserializedNode
DeserializedNode
:
:
HashPolicy
>
;
NodeSet
nodes
;
using
FrameSet
=
js
:
:
HashSet
<
DeserializedStackFrame
DeserializedStackFrame
:
:
HashPolicy
>
;
FrameSet
frames
;
Vector
<
UniqueTwoByteString
>
internedTwoByteStrings
;
Vector
<
UniqueOneByteString
>
internedOneByteStrings
;
using
StringOrRef
=
Variant
<
const
std
:
:
string
*
uint64_t
>
;
template
<
typename
CharT
typename
InternedStringSet
>
const
CharT
*
getOrInternString
(
InternedStringSet
&
internedStrings
Maybe
<
StringOrRef
>
&
maybeStrOrRef
)
;
protected
:
nsCOMPtr
<
nsISupports
>
mParent
;
virtual
~
HeapSnapshot
(
)
{
}
public
:
static
already_AddRefed
<
HeapSnapshot
>
Create
(
JSContext
*
cx
dom
:
:
GlobalObject
&
global
const
uint8_t
*
buffer
uint32_t
size
ErrorResult
&
rv
)
;
static
already_AddRefed
<
nsIFile
>
CreateUniqueCoreDumpFile
(
ErrorResult
&
rv
const
TimeStamp
&
now
nsAString
&
outFilePath
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
HeapSnapshot
)
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
HeapSnapshot
)
nsISupports
*
GetParentObject
(
)
const
{
return
mParent
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
const
char16_t
*
borrowUniqueString
(
const
char16_t
*
duplicateString
size_t
length
)
;
JS
:
:
ubi
:
:
Node
getRoot
(
)
{
MOZ_ASSERT
(
nodes
.
initialized
(
)
)
;
auto
p
=
nodes
.
lookup
(
rootId
)
;
MOZ_ASSERT
(
p
)
;
const
DeserializedNode
&
node
=
*
p
;
return
JS
:
:
ubi
:
:
Node
(
const_cast
<
DeserializedNode
*
>
(
&
node
)
)
;
}
Maybe
<
JS
:
:
ubi
:
:
Node
>
getNodeById
(
JS
:
:
ubi
:
:
Node
:
:
Id
nodeId
)
{
auto
p
=
nodes
.
lookup
(
nodeId
)
;
if
(
!
p
)
return
Nothing
(
)
;
return
Some
(
JS
:
:
ubi
:
:
Node
(
const_cast
<
DeserializedNode
*
>
(
&
*
p
)
)
)
;
}
void
TakeCensus
(
JSContext
*
cx
JS
:
:
HandleObject
options
JS
:
:
MutableHandleValue
rval
ErrorResult
&
rv
)
;
void
DescribeNode
(
JSContext
*
cx
JS
:
:
HandleObject
breakdown
uint64_t
nodeId
JS
:
:
MutableHandleValue
rval
ErrorResult
&
rv
)
;
already_AddRefed
<
DominatorTree
>
ComputeDominatorTree
(
ErrorResult
&
rv
)
;
void
ComputeShortestPaths
(
JSContext
*
cx
uint64_t
start
const
dom
:
:
Sequence
<
uint64_t
>
&
targets
uint64_t
maxNumPaths
JS
:
:
MutableHandleObject
results
ErrorResult
&
rv
)
;
dom
:
:
Nullable
<
uint64_t
>
GetCreationTime
(
)
{
static
const
uint64_t
maxTime
=
uint64_t
(
1
)
<
<
53
;
if
(
timestamp
.
isSome
(
)
&
&
timestamp
.
ref
(
)
<
=
maxTime
)
{
return
dom
:
:
Nullable
<
uint64_t
>
(
timestamp
.
ref
(
)
)
;
}
return
dom
:
:
Nullable
<
uint64_t
>
(
)
;
}
}
;
class
CoreDumpWriter
{
public
:
virtual
~
CoreDumpWriter
(
)
{
}
;
virtual
bool
writeMetadata
(
uint64_t
timestamp
)
=
0
;
enum
EdgePolicy
:
bool
{
INCLUDE_EDGES
=
true
EXCLUDE_EDGES
=
false
}
;
virtual
bool
writeNode
(
const
JS
:
:
ubi
:
:
Node
&
node
EdgePolicy
includeEdges
)
=
0
;
}
;
bool
WriteHeapGraph
(
JSContext
*
cx
const
JS
:
:
ubi
:
:
Node
&
node
CoreDumpWriter
&
writer
bool
wantNames
JS
:
:
CompartmentSet
*
compartments
JS
:
:
AutoCheckCannotGC
&
noGC
uint32_t
&
outNodeCount
uint32_t
&
outEdgeCount
)
;
inline
bool
WriteHeapGraph
(
JSContext
*
cx
const
JS
:
:
ubi
:
:
Node
&
node
CoreDumpWriter
&
writer
bool
wantNames
JS
:
:
CompartmentSet
*
compartments
JS
:
:
AutoCheckCannotGC
&
noGC
)
{
uint32_t
ignoreNodeCount
;
uint32_t
ignoreEdgeCount
;
return
WriteHeapGraph
(
cx
node
writer
wantNames
compartments
noGC
ignoreNodeCount
ignoreEdgeCount
)
;
}
MallocSizeOf
GetCurrentThreadDebuggerMallocSizeOf
(
)
;
}
}
#
endif
