"
use
strict
"
;
const
DEFAULT_MAX_DEPTH
=
3
;
const
DEFAULT_MAX_SIBLINGS
=
15
;
function
DominatorTreeNode
(
nodeId
retainedSize
)
{
this
.
nodeId
=
nodeId
;
this
.
retainedSize
=
retainedSize
;
this
.
parentId
=
undefined
;
this
.
children
=
undefined
;
this
.
moreChildrenAvailable
=
true
;
}
DominatorTreeNode
.
prototype
=
null
;
module
.
exports
=
DominatorTreeNode
;
DominatorTreeNode
.
addChild
=
function
(
parent
child
)
{
if
(
parent
.
children
=
=
=
undefined
)
{
parent
.
children
=
[
]
;
}
parent
.
children
.
push
(
child
)
;
child
.
parentId
=
parent
.
nodeId
;
}
;
DominatorTreeNode
.
partialTraversal
=
function
(
dominatorTree
maxDepth
=
DEFAULT_MAX_DEPTH
maxSiblings
=
DEFAULT_MAX_SIBLINGS
)
{
function
dfs
(
nodeId
depth
)
{
const
size
=
dominatorTree
.
getRetainedSize
(
nodeId
)
;
const
node
=
new
DominatorTreeNode
(
nodeId
size
)
;
const
childNodeIds
=
dominatorTree
.
getImmediatelyDominated
(
nodeId
)
;
const
newDepth
=
depth
+
1
;
if
(
newDepth
<
maxDepth
)
{
const
endIdx
=
Math
.
min
(
childNodeIds
.
length
maxSiblings
)
;
for
(
let
i
=
0
;
i
<
endIdx
;
i
+
+
)
{
DominatorTreeNode
.
addChild
(
node
dfs
(
childNodeIds
[
i
]
newDepth
)
)
;
}
node
.
moreChildrenAvailable
=
childNodeIds
.
length
<
endIdx
;
}
else
{
node
.
moreChildrenAvailable
=
childNodeIds
.
length
>
0
;
}
return
node
;
}
return
dfs
(
dominatorTree
.
root
0
)
;
}
;
