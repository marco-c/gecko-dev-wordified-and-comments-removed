function
Visitor
(
)
{
}
;
exports
.
Visitor
=
Visitor
;
Visitor
.
prototype
.
enter
=
function
(
breakdown
report
edge
)
{
}
;
Visitor
.
prototype
.
exit
=
function
(
breakdown
report
edge
)
{
}
;
Visitor
.
prototype
.
count
=
function
(
breakdown
report
edge
)
{
}
const
EDGES
=
Object
.
create
(
null
)
;
EDGES
.
count
=
function
(
breakdown
report
)
{
return
[
]
;
}
;
EDGES
.
internalType
=
function
(
breakdown
report
)
{
return
Object
.
keys
(
report
)
.
map
(
key
=
>
(
{
edge
:
key
referent
:
report
[
key
]
breakdown
:
breakdown
.
then
}
)
)
;
}
;
EDGES
.
objectClass
=
function
(
breakdown
report
)
{
return
Object
.
keys
(
report
)
.
map
(
key
=
>
(
{
edge
:
key
referent
:
report
[
key
]
breakdown
:
key
=
=
=
"
other
"
?
breakdown
.
other
:
breakdown
.
then
}
)
)
;
}
;
EDGES
.
coarseType
=
function
(
breakdown
report
)
{
return
[
{
edge
:
"
objects
"
referent
:
report
.
objects
breakdown
:
breakdown
.
objects
}
{
edge
:
"
scripts
"
referent
:
report
.
scripts
breakdown
:
breakdown
.
scripts
}
{
edge
:
"
strings
"
referent
:
report
.
strings
breakdown
:
breakdown
.
strings
}
{
edge
:
"
other
"
referent
:
report
.
other
breakdown
:
breakdown
.
other
}
]
;
}
;
EDGES
.
allocationStack
=
function
(
breakdown
report
)
{
const
edges
=
[
]
;
report
.
forEach
(
(
value
key
)
=
>
{
edges
.
push
(
{
edge
:
key
referent
:
value
breakdown
:
key
=
=
=
"
noStack
"
?
breakdown
.
noStack
:
breakdown
.
then
}
)
;
}
)
;
return
edges
;
}
;
EDGES
.
filename
=
function
(
breakdown
report
)
{
return
Object
.
keys
(
report
)
.
map
(
key
=
>
(
{
edge
:
key
referent
:
report
[
key
]
breakdown
:
key
=
=
=
"
noFilename
"
?
breakdown
.
noFilename
:
breakdown
.
then
}
)
)
;
}
;
function
getReportEdges
(
breakdown
report
)
{
return
EDGES
[
breakdown
.
by
]
(
breakdown
report
)
;
}
exports
.
getReportEdges
=
getReportEdges
;
function
recursiveWalk
(
breakdown
edge
report
visitor
)
{
if
(
breakdown
.
by
=
=
=
"
count
"
)
{
visitor
.
enter
(
breakdown
report
edge
)
;
visitor
.
count
(
breakdown
report
edge
)
;
visitor
.
exit
(
breakdown
report
edge
)
;
}
else
{
visitor
.
enter
(
breakdown
report
edge
)
;
for
(
let
{
edge
referent
breakdown
:
subBreakdown
}
of
getReportEdges
(
breakdown
report
)
)
{
recursiveWalk
(
subBreakdown
edge
referent
visitor
)
;
}
visitor
.
exit
(
breakdown
report
edge
)
;
}
}
;
function
walk
(
breakdown
report
visitor
)
{
recursiveWalk
(
breakdown
null
report
visitor
)
;
}
;
exports
.
walk
=
walk
;
function
isMap
(
obj
)
{
return
Object
.
prototype
.
toString
.
call
(
obj
)
=
=
=
"
[
object
Map
]
"
;
}
function
DiffVisitor
(
otherCensus
)
{
this
.
_otherCensus
=
otherCensus
;
this
.
_totalBytes
=
0
;
this
.
_totalCount
=
0
;
this
.
_otherCensusStack
=
[
]
;
this
.
_edgesVisited
=
[
new
Set
(
)
]
;
this
.
_results
=
null
;
this
.
_resultsStack
=
[
]
;
}
DiffVisitor
.
prototype
=
Object
.
create
(
Visitor
.
prototype
)
;
DiffVisitor
.
prototype
.
_get
=
function
(
report
edge
)
{
if
(
!
report
)
{
return
undefined
;
}
return
isMap
(
report
)
?
report
.
get
(
edge
)
:
report
[
edge
]
;
}
;
DiffVisitor
.
prototype
.
_set
=
function
(
report
edge
val
)
{
if
(
isMap
(
report
)
)
{
report
.
set
(
edge
val
)
;
}
else
{
report
[
edge
]
=
val
;
}
}
;
DiffVisitor
.
prototype
.
enter
=
function
(
breakdown
report
edge
)
{
const
isFirstTimeEntering
=
this
.
_results
=
=
=
null
;
const
newResults
=
breakdown
.
by
=
=
=
"
allocationStack
"
?
new
Map
(
)
:
{
}
;
let
newOther
;
if
(
!
this
.
_results
)
{
this
.
_results
=
newResults
;
newOther
=
this
.
_otherCensus
;
}
else
{
const
topResults
=
this
.
_resultsStack
[
this
.
_resultsStack
.
length
-
1
]
;
this
.
_set
(
topResults
edge
newResults
)
;
const
topOther
=
this
.
_otherCensusStack
[
this
.
_otherCensusStack
.
length
-
1
]
;
newOther
=
this
.
_get
(
topOther
edge
)
;
}
this
.
_resultsStack
.
push
(
newResults
)
;
this
.
_otherCensusStack
.
push
(
newOther
)
;
const
visited
=
this
.
_edgesVisited
[
this
.
_edgesVisited
.
length
-
1
]
;
visited
.
add
(
edge
)
;
this
.
_edgesVisited
.
push
(
new
Set
(
)
)
;
}
;
DiffVisitor
.
prototype
.
exit
=
function
(
breakdown
report
edge
)
{
const
other
=
this
.
_otherCensusStack
[
this
.
_otherCensusStack
.
length
-
1
]
;
if
(
other
)
{
const
visited
=
this
.
_edgesVisited
[
this
.
_edgesVisited
.
length
-
1
]
;
const
unvisited
=
getReportEdges
(
breakdown
other
)
.
map
(
e
=
>
e
.
edge
)
.
filter
(
e
=
>
!
visited
.
has
(
e
)
)
;
const
results
=
this
.
_resultsStack
[
this
.
_resultsStack
.
length
-
1
]
;
for
(
let
edge
of
unvisited
)
{
this
.
_set
(
results
edge
this
.
_get
(
other
edge
)
)
;
}
}
this
.
_otherCensusStack
.
pop
(
)
;
this
.
_resultsStack
.
pop
(
)
;
this
.
_edgesVisited
.
pop
(
)
;
}
;
DiffVisitor
.
prototype
.
count
=
function
(
breakdown
report
edge
)
{
const
other
=
this
.
_otherCensusStack
[
this
.
_otherCensusStack
.
length
-
1
]
;
const
results
=
this
.
_resultsStack
[
this
.
_resultsStack
.
length
-
1
]
;
if
(
breakdown
.
count
)
{
this
.
_totalCount
+
=
report
.
count
;
}
if
(
breakdown
.
bytes
)
{
this
.
_totalBytes
+
=
report
.
bytes
;
}
if
(
other
)
{
if
(
breakdown
.
count
)
{
results
.
count
=
other
.
count
-
report
.
count
;
}
if
(
breakdown
.
bytes
)
{
results
.
bytes
=
other
.
bytes
-
report
.
bytes
;
}
}
else
{
if
(
breakdown
.
count
)
{
results
.
count
=
-
report
.
count
;
}
if
(
breakdown
.
bytes
)
{
results
.
bytes
=
-
report
.
bytes
;
}
}
}
;
const
basisTotalBytes
=
exports
.
basisTotalBytes
=
Symbol
(
"
basisTotalBytes
"
)
;
const
basisTotalCount
=
exports
.
basisTotalCount
=
Symbol
(
"
basisTotalCount
"
)
;
DiffVisitor
.
prototype
.
results
=
function
(
)
{
if
(
!
this
.
_results
)
{
throw
new
Error
(
"
Attempt
to
get
results
before
computing
diff
!
"
)
;
}
if
(
this
.
_resultsStack
.
length
)
{
throw
new
Error
(
"
Attempt
to
get
results
while
still
computing
diff
!
"
)
;
}
this
.
_results
[
basisTotalBytes
]
=
this
.
_totalBytes
;
this
.
_results
[
basisTotalCount
]
=
this
.
_totalCount
;
return
this
.
_results
;
}
;
function
diff
(
breakdown
startCensus
endCensus
)
{
const
visitor
=
new
DiffVisitor
(
endCensus
)
;
walk
(
breakdown
startCensus
visitor
)
;
return
visitor
.
results
(
)
;
}
;
exports
.
diff
=
diff
const
createParentMap
=
exports
.
createParentMap
=
function
(
node
getId
=
node
=
>
node
.
id
aggregator
=
Object
.
create
(
null
)
)
{
if
(
node
.
children
)
{
for
(
let
i
=
0
length
=
node
.
children
.
length
;
i
<
length
;
i
+
+
)
{
const
child
=
node
.
children
[
i
]
;
aggregator
[
getId
(
child
)
]
=
getId
(
node
)
;
createParentMap
(
child
getId
aggregator
)
;
}
}
return
aggregator
;
}
;
