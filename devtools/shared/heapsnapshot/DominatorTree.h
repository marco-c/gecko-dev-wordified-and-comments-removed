#
ifndef
mozilla_devtools_DominatorTree__
#
define
mozilla_devtools_DominatorTree__
#
include
"
mozilla
/
devtools
/
HeapSnapshot
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
RefCounted
.
h
"
#
include
"
js
/
UbiNodeDominatorTree
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
devtools
{
class
DominatorTree
final
:
public
nsISupports
public
nsWrapperCache
{
protected
:
nsCOMPtr
<
nsISupports
>
mParent
;
virtual
~
DominatorTree
(
)
{
}
private
:
JS
:
:
ubi
:
:
DominatorTree
mDominatorTree
;
RefPtr
<
HeapSnapshot
>
mHeapSnapshot
;
public
:
explicit
DominatorTree
(
JS
:
:
ubi
:
:
DominatorTree
&
&
aDominatorTree
HeapSnapshot
*
aHeapSnapshot
nsISupports
*
aParent
)
:
mParent
(
aParent
)
mDominatorTree
(
Move
(
aDominatorTree
)
)
mHeapSnapshot
(
aHeapSnapshot
)
{
MOZ_ASSERT
(
aParent
)
;
MOZ_ASSERT
(
aHeapSnapshot
)
;
}
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
;
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
DominatorTree
)
;
nsISupports
*
GetParentObject
(
)
const
{
return
mParent
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
uint64_t
Root
(
)
const
{
return
mDominatorTree
.
root
(
)
.
identifier
(
)
;
}
dom
:
:
Nullable
<
uint64_t
>
GetRetainedSize
(
uint64_t
aNodeId
ErrorResult
&
aRv
)
;
}
;
}
}
#
endif
