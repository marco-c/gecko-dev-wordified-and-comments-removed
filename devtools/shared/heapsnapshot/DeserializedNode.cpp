#
include
"
mozilla
/
devtools
/
DeserializedNode
.
h
"
#
include
"
mozilla
/
devtools
/
HeapSnapshot
.
h
"
#
include
"
nsCRTGlue
.
h
"
namespace
mozilla
{
namespace
devtools
{
DeserializedEdge
:
:
DeserializedEdge
(
)
:
referent
(
0
)
name
(
nullptr
)
{
}
DeserializedEdge
:
:
DeserializedEdge
(
DeserializedEdge
&
&
rhs
)
{
referent
=
rhs
.
referent
;
name
=
rhs
.
name
;
}
DeserializedEdge
&
DeserializedEdge
:
:
operator
=
(
DeserializedEdge
&
&
rhs
)
{
MOZ_ASSERT
(
&
rhs
!
=
this
)
;
this
-
>
~
DeserializedEdge
(
)
;
new
(
this
)
DeserializedEdge
(
Move
(
rhs
)
)
;
return
*
this
;
}
bool
DeserializedEdge
:
:
init
(
const
protobuf
:
:
Edge
&
edge
HeapSnapshot
&
owner
)
{
if
(
!
edge
.
has_referent
(
)
)
return
false
;
referent
=
edge
.
referent
(
)
;
if
(
edge
.
has_name
(
)
)
{
const
char16_t
*
duplicateEdgeName
=
reinterpret_cast
<
const
char16_t
*
>
(
edge
.
name
(
)
.
c_str
(
)
)
;
name
=
owner
.
borrowUniqueString
(
duplicateEdgeName
edge
.
name
(
)
.
length
(
)
/
sizeof
(
char16_t
)
)
;
if
(
!
name
)
return
false
;
}
return
true
;
}
JS
:
:
ubi
:
:
Node
DeserializedNode
:
:
getEdgeReferent
(
const
DeserializedEdge
&
edge
)
{
auto
ptr
=
owner
-
>
nodes
.
lookup
(
edge
.
referent
)
;
MOZ_ASSERT
(
ptr
)
;
return
JS
:
:
ubi
:
:
Node
(
const_cast
<
DeserializedNode
*
>
(
&
*
ptr
)
)
;
}
JS
:
:
ubi
:
:
StackFrame
DeserializedStackFrame
:
:
getParentStackFrame
(
)
const
{
MOZ_ASSERT
(
parent
.
isSome
(
)
)
;
auto
ptr
=
owner
-
>
frames
.
lookup
(
parent
.
ref
(
)
)
;
MOZ_ASSERT
(
ptr
)
;
return
JS
:
:
ubi
:
:
StackFrame
(
const_cast
<
DeserializedStackFrame
*
>
(
&
*
ptr
)
)
;
}
}
}
namespace
JS
{
namespace
ubi
{
using
mozilla
:
:
devtools
:
:
DeserializedEdge
;
const
char16_t
Concrete
<
DeserializedNode
>
:
:
concreteTypeName
[
]
=
MOZ_UTF16
(
"
mozilla
:
:
devtools
:
:
DeserializedNode
"
)
;
const
char16_t
*
Concrete
<
DeserializedNode
>
:
:
typeName
(
)
const
{
return
get
(
)
.
typeName
;
}
Node
:
:
Size
Concrete
<
DeserializedNode
>
:
:
size
(
mozilla
:
:
MallocSizeOf
mallocSizeof
)
const
{
return
get
(
)
.
size
;
}
class
DeserializedEdgeRange
:
public
EdgeRange
{
EdgeVector
edges
;
size_t
i
;
void
settle
(
)
{
front_
=
i
<
edges
.
length
(
)
?
&
edges
[
i
]
:
nullptr
;
}
public
:
explicit
DeserializedEdgeRange
(
)
:
edges
(
)
i
(
0
)
{
settle
(
)
;
}
bool
init
(
DeserializedNode
&
node
)
{
if
(
!
edges
.
reserve
(
node
.
edges
.
length
(
)
)
)
return
false
;
for
(
DeserializedEdge
*
edgep
=
node
.
edges
.
begin
(
)
;
edgep
!
=
node
.
edges
.
end
(
)
;
edgep
+
+
)
{
char16_t
*
name
=
nullptr
;
if
(
edgep
-
>
name
)
{
name
=
NS_strdup
(
edgep
-
>
name
)
;
if
(
!
name
)
return
false
;
}
auto
referent
=
node
.
getEdgeReferent
(
*
edgep
)
;
edges
.
infallibleAppend
(
mozilla
:
:
Move
(
Edge
(
name
referent
)
)
)
;
}
settle
(
)
;
return
true
;
}
void
popFront
(
)
override
{
i
+
+
;
settle
(
)
;
}
}
;
StackFrame
Concrete
<
DeserializedNode
>
:
:
allocationStack
(
)
const
{
MOZ_ASSERT
(
hasAllocationStack
(
)
)
;
auto
id
=
get
(
)
.
allocationStack
.
ref
(
)
;
auto
ptr
=
get
(
)
.
owner
-
>
frames
.
lookup
(
id
)
;
MOZ_ASSERT
(
ptr
)
;
return
JS
:
:
ubi
:
:
StackFrame
(
const_cast
<
DeserializedStackFrame
*
>
(
&
*
ptr
)
)
;
}
UniquePtr
<
EdgeRange
>
Concrete
<
DeserializedNode
>
:
:
edges
(
JSRuntime
*
rt
bool
)
const
{
UniquePtr
<
DeserializedEdgeRange
JS
:
:
DeletePolicy
<
DeserializedEdgeRange
>
>
range
(
js_new
<
DeserializedEdgeRange
>
(
)
)
;
if
(
!
range
|
|
!
range
-
>
init
(
get
(
)
)
)
return
nullptr
;
return
UniquePtr
<
EdgeRange
>
(
range
.
release
(
)
)
;
}
StackFrame
ConcreteStackFrame
<
DeserializedStackFrame
>
:
:
parent
(
)
const
{
return
get
(
)
.
parent
.
isNothing
(
)
?
StackFrame
(
)
:
get
(
)
.
getParentStackFrame
(
)
;
}
bool
ConcreteStackFrame
<
DeserializedStackFrame
>
:
:
constructSavedFrameStack
(
JSContext
*
cx
MutableHandleObject
outSavedFrameStack
)
const
{
StackFrame
f
(
&
get
(
)
)
;
return
ConstructSavedFrameStackSlow
(
cx
f
outSavedFrameStack
)
;
}
}
}
