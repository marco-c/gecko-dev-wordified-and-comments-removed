"
use
strict
"
;
const
{
Visitor
walk
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
heapsnapshot
/
CensusUtils
.
js
"
)
;
let
INC
=
0
;
function
isSavedFrame
(
obj
)
{
return
Object
.
prototype
.
toString
.
call
(
obj
)
=
=
=
"
[
object
SavedFrame
]
"
;
}
function
CensusTreeNodeCache
(
)
{
}
CensusTreeNodeCache
.
prototype
=
null
;
function
CensusTreeNodeCacheValue
(
)
{
this
.
node
=
undefined
;
this
.
children
=
undefined
;
}
CensusTreeNodeCacheValue
.
prototype
=
null
;
CensusTreeNodeCache
.
hashFrame
=
function
(
frame
)
{
return
FRAME
{
frame
.
functionDisplayName
}
{
frame
.
source
}
{
frame
.
line
}
{
frame
.
column
}
{
frame
.
asyncCause
}
;
}
;
CensusTreeNodeCache
.
hashNode
=
function
(
node
)
{
return
isSavedFrame
(
node
.
name
)
?
CensusTreeNodeCache
.
hashFrame
(
node
.
name
)
:
NODE
{
node
.
name
}
;
}
;
CensusTreeNodeCache
.
insertFrame
=
function
(
cache
value
)
{
cache
[
CensusTreeNodeCache
.
hashFrame
(
value
.
node
.
name
)
]
=
value
;
}
;
CensusTreeNodeCache
.
insertNode
=
function
(
cache
value
)
{
if
(
isSavedFrame
(
value
.
node
.
name
)
)
{
CensusTreeNodeCache
.
insertFrame
(
cache
value
)
;
}
else
{
cache
[
CensusTreeNodeCache
.
hashNode
(
value
.
node
)
]
=
value
;
}
}
;
CensusTreeNodeCache
.
lookupFrame
=
function
(
cache
frame
)
{
return
cache
[
CensusTreeNodeCache
.
hashFrame
(
frame
)
]
;
}
;
CensusTreeNodeCache
.
lookupNode
=
function
(
cache
node
)
{
return
isSavedFrame
(
node
.
name
)
?
CensusTreeNodeCache
.
lookupFrame
(
cache
node
.
name
)
:
cache
[
CensusTreeNodeCache
.
hashNode
(
node
)
]
;
}
;
function
addChild
(
parent
child
)
{
if
(
!
parent
.
children
)
{
parent
.
children
=
[
]
;
}
child
.
parent
=
parent
.
id
;
parent
.
children
.
push
(
child
)
;
}
function
getArrayOfFrames
(
stack
)
{
const
frames
=
[
]
;
let
frame
=
stack
;
while
(
frame
)
{
frames
.
push
(
frame
)
;
frame
=
frame
.
parent
;
}
frames
.
reverse
(
)
;
return
frames
;
}
function
makeCensusTreeNodeSubTree
(
breakdown
report
edge
cache
outParams
)
{
if
(
!
isSavedFrame
(
edge
)
)
{
const
node
=
new
CensusTreeNode
(
edge
)
;
outParams
.
top
=
outParams
.
bottom
=
node
;
return
;
}
const
frames
=
getArrayOfFrames
(
edge
)
;
let
currentCache
=
cache
;
let
prevNode
;
for
(
let
i
=
0
length
=
frames
.
length
;
i
<
length
;
i
+
+
)
{
const
frame
=
frames
[
i
]
;
let
isNewNode
=
false
;
let
val
=
CensusTreeNodeCache
.
lookupFrame
(
currentCache
frame
)
;
if
(
!
val
)
{
isNewNode
=
true
;
val
=
new
CensusTreeNodeCacheValue
(
)
;
val
.
node
=
new
CensusTreeNode
(
frame
)
;
CensusTreeNodeCache
.
insertFrame
(
currentCache
val
)
;
if
(
prevNode
)
{
addChild
(
prevNode
val
.
node
)
;
}
}
if
(
i
=
=
=
0
)
{
outParams
.
bottom
=
isNewNode
?
val
.
node
:
null
;
}
if
(
i
=
=
=
length
-
1
)
{
outParams
.
top
=
val
.
node
;
}
prevNode
=
val
.
node
;
if
(
i
!
=
=
length
-
1
&
&
!
val
.
children
)
{
val
.
children
=
new
CensusTreeNodeCache
(
)
;
}
currentCache
=
val
.
children
;
}
}
function
CensusTreeNodeVisitor
(
)
{
this
.
_root
=
null
;
this
.
_nodeStack
=
[
]
;
this
.
_outParams
=
{
top
:
null
bottom
:
null
}
;
this
.
_cacheStack
=
[
new
CensusTreeNodeCache
(
)
]
;
}
CensusTreeNodeVisitor
.
prototype
=
Object
.
create
(
Visitor
)
;
CensusTreeNodeVisitor
.
prototype
.
enter
=
function
(
breakdown
report
edge
)
{
const
cache
=
this
.
_cacheStack
[
this
.
_cacheStack
.
length
-
1
]
;
makeCensusTreeNodeSubTree
(
breakdown
report
edge
cache
this
.
_outParams
)
;
const
{
top
bottom
}
=
this
.
_outParams
;
if
(
!
this
.
_root
)
{
this
.
_root
=
bottom
;
}
else
{
if
(
bottom
)
{
addChild
(
this
.
_nodeStack
[
this
.
_nodeStack
.
length
-
1
]
bottom
)
;
}
}
this
.
_cacheStack
.
push
(
new
CensusTreeNodeCache
)
;
this
.
_nodeStack
.
push
(
top
)
;
}
;
function
values
(
cache
)
{
return
Object
.
keys
(
cache
)
.
map
(
k
=
>
cache
[
k
]
)
;
}
CensusTreeNodeVisitor
.
prototype
.
exit
=
function
(
breakdown
report
edge
)
{
function
dfs
(
node
childrenCache
)
{
if
(
childrenCache
)
{
const
childValues
=
values
(
childrenCache
)
;
for
(
let
i
=
0
length
=
childValues
.
length
;
i
<
length
;
i
+
+
)
{
dfs
(
childValues
[
i
]
.
node
childValues
[
i
]
.
children
)
;
}
}
node
.
totalCount
=
node
.
count
;
node
.
totalBytes
=
node
.
bytes
;
if
(
node
.
children
)
{
node
.
children
.
sort
(
compareByTotal
)
;
for
(
let
i
=
0
length
=
node
.
children
.
length
;
i
<
length
;
i
+
+
)
{
node
.
totalCount
+
=
node
.
children
[
i
]
.
totalCount
;
node
.
totalBytes
+
=
node
.
children
[
i
]
.
totalBytes
;
}
}
}
const
top
=
this
.
_nodeStack
.
pop
(
)
;
const
cache
=
this
.
_cacheStack
.
pop
(
)
;
dfs
(
top
cache
)
;
}
;
CensusTreeNodeVisitor
.
prototype
.
count
=
function
(
breakdown
report
edge
)
{
const
node
=
this
.
_nodeStack
[
this
.
_nodeStack
.
length
-
1
]
;
if
(
breakdown
.
count
)
{
node
.
count
=
report
.
count
;
}
if
(
breakdown
.
bytes
)
{
node
.
bytes
=
report
.
bytes
;
}
}
;
CensusTreeNodeVisitor
.
prototype
.
root
=
function
(
)
{
if
(
!
this
.
_root
)
{
throw
new
Error
(
"
Attempt
to
get
the
root
before
walking
the
census
report
!
"
)
;
}
if
(
this
.
_nodeStack
.
length
)
{
throw
new
Error
(
"
Attempt
to
get
the
root
while
walking
the
census
report
!
"
)
;
}
return
this
.
_root
;
}
;
function
CensusTreeNode
(
name
)
{
this
.
name
=
name
;
this
.
bytes
=
0
;
this
.
totalBytes
=
0
;
this
.
count
=
0
;
this
.
totalCount
=
0
;
this
.
children
=
undefined
;
this
.
id
=
+
+
INC
;
this
.
parent
=
undefined
;
}
CensusTreeNode
.
prototype
=
null
;
function
compareByTotal
(
node1
node2
)
{
return
node2
.
totalBytes
-
node1
.
totalBytes
|
|
node2
.
totalCount
-
node1
.
totalCount
|
|
node2
.
bytes
-
node1
.
bytes
|
|
node2
.
count
-
node1
.
count
;
}
function
compareBySelf
(
node1
node2
)
{
return
node2
.
bytes
-
node1
.
bytes
|
|
node2
.
count
-
node1
.
count
|
|
node2
.
totalBytes
-
node1
.
totalBytes
|
|
node2
.
totalCount
-
node1
.
totalCount
;
}
function
invert
(
tree
)
{
const
inverted
=
new
CensusTreeNodeCacheValue
(
)
;
inverted
.
node
=
new
CensusTreeNode
(
null
)
;
const
path
=
[
]
;
(
function
addInvertedPaths
(
node
)
{
path
.
push
(
node
)
;
if
(
node
.
children
)
{
for
(
let
i
=
0
length
=
node
.
children
.
length
;
i
<
length
;
i
+
+
)
{
addInvertedPaths
(
node
.
children
[
i
]
)
;
}
}
else
{
let
current
=
inverted
;
for
(
let
i
=
path
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
const
node
=
path
[
i
]
;
if
(
!
current
.
children
)
{
current
.
children
=
new
CensusTreeNodeCache
(
)
;
}
let
val
=
CensusTreeNodeCache
.
lookupNode
(
current
.
children
node
)
;
if
(
val
)
{
val
.
node
.
count
+
=
node
.
count
;
val
.
node
.
totalCount
+
=
node
.
totalCount
;
val
.
node
.
bytes
+
=
node
.
bytes
;
val
.
node
.
totalBytes
+
=
node
.
totalBytes
;
}
else
{
val
=
new
CensusTreeNodeCacheValue
(
)
;
val
.
node
=
new
CensusTreeNode
(
node
.
name
)
;
val
.
node
.
count
=
node
.
count
;
val
.
node
.
totalCount
=
node
.
totalCount
;
val
.
node
.
bytes
=
node
.
bytes
;
val
.
node
.
totalBytes
=
node
.
totalBytes
;
addChild
(
current
.
node
val
.
node
)
;
CensusTreeNodeCache
.
insertNode
(
current
.
children
val
)
;
}
current
=
val
;
}
}
path
.
pop
(
)
;
}
(
tree
)
)
;
(
function
ensureSorted
(
node
)
{
if
(
node
.
children
)
{
node
.
children
.
sort
(
compareBySelf
)
;
for
(
let
i
=
0
length
=
node
.
children
.
length
;
i
<
length
;
i
+
+
)
{
ensureSorted
(
node
.
children
[
i
]
)
;
}
}
}
(
inverted
.
node
)
)
;
return
inverted
.
node
;
}
exports
.
censusReportToCensusTreeNode
=
function
(
breakdown
report
options
=
{
invert
:
false
}
)
{
const
visitor
=
new
CensusTreeNodeVisitor
(
)
;
walk
(
breakdown
report
visitor
)
;
const
root
=
visitor
.
root
(
)
;
return
options
.
invert
?
invert
(
root
)
:
root
;
}
;
