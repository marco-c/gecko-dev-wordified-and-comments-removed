"
use
strict
"
;
console
.
log
(
"
Initializing
worker
.
"
)
;
self
.
onmessage
=
e
=
>
{
console
.
log
(
"
Starting
test
.
"
)
;
try
{
const
path
=
ChromeUtils
.
saveHeapSnapshot
(
{
runtime
:
true
}
)
;
const
snapshot
=
ChromeUtils
.
readHeapSnapshot
(
path
)
;
const
dominatorTree
=
snapshot
.
computeDominatorTree
(
)
;
ok
(
dominatorTree
)
;
ok
(
dominatorTree
instanceof
DominatorTree
)
;
let
threw
=
false
;
try
{
new
DominatorTree
(
)
;
}
catch
(
excp
)
{
threw
=
true
;
}
ok
(
threw
"
Constructor
shouldn
'
t
be
usable
"
)
;
}
catch
(
ex
)
{
ok
(
false
"
Unexpected
error
inside
worker
:
\
n
"
+
ex
.
toString
(
)
+
"
\
n
"
+
ex
.
stack
)
;
}
finally
{
done
(
)
;
}
}
;
function
ok
(
val
msg
)
{
console
.
log
(
"
ok
(
"
+
!
!
val
+
'
"
'
+
msg
+
'
"
)
'
)
;
self
.
postMessage
(
{
type
:
"
assertion
"
passed
:
!
!
val
msg
stack
:
Error
(
)
.
stack
}
)
;
}
function
done
(
)
{
console
.
log
(
"
done
(
)
"
)
;
self
.
postMessage
(
{
type
:
"
done
"
}
)
;
}
