"
use
strict
"
;
function
run_test
(
)
{
const
stack1
=
saveStack
(
1
)
;
const
stack2
=
saveStack
(
1
)
;
const
stack3
=
saveStack
(
1
)
;
const
COUNT
=
{
by
:
"
count
"
count
:
true
bytes
:
true
}
;
const
INTERNAL_TYPE
=
{
by
:
"
internalType
"
then
:
COUNT
}
;
const
BREAKDOWN
=
{
by
:
"
allocationStack
"
then
:
INTERNAL_TYPE
noStack
:
INTERNAL_TYPE
}
;
const
MOCK_SNAPSHOT
=
{
takeCensus
:
(
{
breakdown
}
)
=
>
{
assertStructurallyEquivalent
(
breakdown
CensusUtils
.
countToBucketBreakdown
(
BREAKDOWN
)
)
;
return
new
Map
(
[
[
stack1
{
JSObject
:
[
101
102
103
]
JSString
:
[
111
112
113
]
}
]
[
stack2
{
JSObject
:
[
201
202
203
]
JSString
:
[
211
212
213
]
}
]
[
stack3
{
JSObject
:
[
301
302
303
]
JSString
:
[
311
312
313
]
}
]
[
"
noStack
"
{
JSObject
:
[
401
402
403
]
JSString
:
[
411
412
413
]
}
]
]
)
;
}
}
;
const
INDICES
=
new
Set
(
[
3
5
9
]
)
;
const
EXPECTED
=
new
Set
(
[
111
112
113
201
202
203
311
312
313
]
)
;
const
actual
=
new
Set
(
CensusUtils
.
getCensusIndividuals
(
INDICES
BREAKDOWN
MOCK_SNAPSHOT
)
)
;
assertStructurallyEquivalent
(
EXPECTED
actual
)
;
}
