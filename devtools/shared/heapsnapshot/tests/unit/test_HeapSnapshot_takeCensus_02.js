"
use
strict
"
;
function
run_test
(
)
{
const
dbg
=
new
Debugger
(
)
;
const
census0
=
saveHeapSnapshotAndTakeCensus
(
dbg
)
;
Census
.
walkCensus
(
census0
"
census0
"
Census
.
assertAllZeros
)
;
function
newGlobalWithDefs
(
)
{
const
g
=
newGlobal
(
)
;
g
.
eval
(
function
times
(
n
fn
)
{
var
a
=
[
]
;
for
(
var
i
=
0
;
i
<
n
;
i
+
+
)
a
.
push
(
fn
(
)
)
;
return
a
;
}
)
;
return
g
;
}
const
g
=
newGlobalWithDefs
(
)
;
dbg
.
addDebuggee
(
g
)
;
g
.
eval
(
"
var
objs
=
times
(
100
(
)
=
>
(
{
}
)
)
;
"
)
;
g
.
eval
(
"
var
rxs
=
times
(
200
(
)
=
>
/
foo
/
)
;
"
)
;
g
.
eval
(
"
var
ars
=
times
(
400
(
)
=
>
[
]
)
;
"
)
;
g
.
eval
(
"
var
fns
=
times
(
800
(
)
=
>
(
)
=
>
{
}
)
;
"
)
;
const
census1
=
dbg
.
memory
.
takeCensus
(
dbg
)
;
Census
.
walkCensus
(
census1
"
census1
"
Census
.
assertAllNotLessThan
(
{
"
objects
"
:
{
"
Object
"
:
{
count
:
100
}
"
RegExp
"
:
{
count
:
200
}
"
Array
"
:
{
count
:
400
}
"
Function
"
:
{
count
:
800
}
}
}
)
)
;
do_test_finished
(
)
;
}
