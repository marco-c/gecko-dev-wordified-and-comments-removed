"
use
strict
"
;
if
(
typeof
Debugger
!
=
"
function
"
)
{
const
{
addDebuggerToGlobal
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
"
)
;
addDebuggerToGlobal
(
this
)
;
}
function
run_test
(
)
{
Services
.
prefs
.
setBoolPref
(
"
security
.
allow_parent_unrestricted_js_loads
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
allow_eval_with_system_principal
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
allow_eval_in_parent_process
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
allow_parent_unrestricted_js_loads
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
allow_eval_with_system_principal
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
allow_eval_in_parent_process
"
)
;
}
)
;
const
debuggee
=
new
Cu
.
Sandbox
(
null
)
;
const
dbg
=
new
Debugger
(
debuggee
)
;
dbg
.
memory
.
trackingAllocationSites
=
true
;
debuggee
.
eval
(
"
this
.
objects
=
[
]
"
)
;
for
(
let
i
=
0
;
i
<
100
;
i
+
+
)
{
debuggee
.
eval
(
"
this
.
objects
.
push
(
{
}
)
"
)
;
}
const
filePath
=
ChromeUtils
.
saveHeapSnapshot
(
{
runtime
:
true
}
)
;
ok
(
true
"
Should
be
able
to
save
a
snapshot
.
"
)
;
const
snapshot
=
ChromeUtils
.
readHeapSnapshot
(
filePath
)
;
ok
(
snapshot
"
Should
be
able
to
read
a
heap
snapshot
"
)
;
ok
(
HeapSnapshot
.
isInstance
(
snapshot
)
"
Should
be
an
instanceof
HeapSnapshot
"
)
;
do_test_finished
(
)
;
}
