"
use
strict
"
;
function
waitForThirtyMilliseconds
(
)
{
const
start
=
Date
.
now
(
)
;
while
(
Date
.
now
(
)
-
start
<
30
)
{
}
}
const
BREAKDOWN
=
{
by
:
"
internalType
"
then
:
{
by
:
"
count
"
count
:
true
bytes
:
true
}
}
;
add_task
(
async
function
(
)
{
const
client
=
new
HeapAnalysesClient
(
)
;
const
start
=
Date
.
now
(
)
*
1000
;
waitForThirtyMilliseconds
(
)
;
const
snapshotFilePath
=
saveNewHeapSnapshot
(
)
;
waitForThirtyMilliseconds
(
)
;
const
end
=
Date
.
now
(
)
*
1000
;
await
client
.
readHeapSnapshot
(
snapshotFilePath
)
;
ok
(
true
"
Should
have
read
the
heap
snapshot
"
)
;
let
threw
=
false
;
try
{
await
client
.
getCreationTime
(
"
/
not
/
a
/
real
/
path
"
{
breakdown
:
BREAKDOWN
}
)
;
}
catch
(
_
)
{
threw
=
true
;
}
ok
(
threw
"
getCreationTime
should
throw
when
snapshot
does
not
exist
"
)
;
const
time
=
await
client
.
getCreationTime
(
snapshotFilePath
{
breakdown
:
BREAKDOWN
}
)
;
dumpn
(
"
Start
=
"
+
start
)
;
dumpn
(
"
End
=
"
+
end
)
;
dumpn
(
"
Time
=
"
+
time
)
;
Assert
.
greaterOrEqual
(
time
start
"
creation
time
occurred
after
start
"
)
;
Assert
.
lessOrEqual
(
time
end
"
creation
time
occurred
before
end
"
)
;
client
.
destroy
(
)
;
}
)
;
