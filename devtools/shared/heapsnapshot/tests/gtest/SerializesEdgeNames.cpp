#
include
"
DevTools
.
h
"
using
testing
:
:
Field
;
using
testing
:
:
IsNull
;
using
testing
:
:
Property
;
using
testing
:
:
Return
;
DEF_TEST
(
SerializesEdgeNames
{
FakeNode
node
;
FakeNode
referent
;
const
char16_t
edgeName
[
]
=
u
"
edge
name
"
;
const
char16_t
emptyStr
[
]
=
u
"
"
;
AddEdge
(
node
referent
edgeName
)
;
AddEdge
(
node
referent
emptyStr
)
;
AddEdge
(
node
referent
nullptr
)
;
:
:
testing
:
:
NiceMock
<
MockWriter
>
writer
;
EXPECT_CALL
(
writer
writeNode
(
AllOf
(
EdgesLength
(
cx
3
)
Edge
(
cx
0
Field
(
&
JS
:
:
ubi
:
:
Edge
:
:
name
UniqueUTF16StrEq
(
edgeName
)
)
)
Edge
(
cx
1
Field
(
&
JS
:
:
ubi
:
:
Edge
:
:
name
UniqueUTF16StrEq
(
emptyStr
)
)
)
Edge
(
cx
2
Field
(
&
JS
:
:
ubi
:
:
Edge
:
:
name
UniqueIsNull
(
)
)
)
)
_
)
)
.
Times
(
1
)
.
WillOnce
(
Return
(
true
)
)
;
ExpectWriteNode
(
writer
referent
)
;
JS
:
:
AutoCheckCannotGC
noGC
(
rt
)
;
ASSERT_TRUE
(
WriteHeapGraph
(
cx
JS
:
:
ubi
:
:
Node
(
&
node
)
writer
true
nullptr
noGC
)
)
;
}
)
;
