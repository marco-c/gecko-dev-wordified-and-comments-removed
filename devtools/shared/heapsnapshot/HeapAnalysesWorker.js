"
use
strict
"
;
importScripts
(
"
resource
:
/
/
gre
/
modules
/
workers
/
require
.
js
"
)
;
importScripts
(
"
resource
:
/
/
devtools
/
shared
/
worker
/
helper
.
js
"
)
;
const
{
CensusTreeNode
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
heapsnapshot
/
census
-
tree
-
node
.
js
"
)
;
const
CensusUtils
=
require
(
"
resource
:
/
/
devtools
/
shared
/
heapsnapshot
/
CensusUtils
.
js
"
)
;
const
snapshots
=
Object
.
create
(
null
)
;
workerHelper
.
createTask
(
self
"
readHeapSnapshot
"
(
{
snapshotFilePath
}
)
=
>
{
snapshots
[
snapshotFilePath
]
=
ThreadSafeChromeUtils
.
readHeapSnapshot
(
snapshotFilePath
)
;
return
true
;
}
)
;
workerHelper
.
createTask
(
self
"
takeCensus
"
(
{
snapshotFilePath
censusOptions
requestOptions
}
)
=
>
{
if
(
!
snapshots
[
snapshotFilePath
]
)
{
throw
new
Error
(
No
known
heap
snapshot
for
'
{
snapshotFilePath
}
'
)
;
}
let
report
=
snapshots
[
snapshotFilePath
]
.
takeCensus
(
censusOptions
)
;
return
requestOptions
.
asTreeNode
?
new
CensusTreeNode
(
censusOptions
.
breakdown
report
)
:
report
;
}
)
;
workerHelper
.
createTask
(
self
"
takeCensusDiff
"
request
=
>
{
const
{
firstSnapshotFilePath
secondSnapshotFilePath
censusOptions
requestOptions
}
=
request
;
if
(
!
snapshots
[
firstSnapshotFilePath
]
)
{
throw
new
Error
(
No
known
heap
snapshot
for
'
{
firstSnapshotFilePath
}
'
)
;
}
if
(
!
snapshots
[
secondSnapshotFilePath
]
)
{
throw
new
Error
(
No
known
heap
snapshot
for
'
{
secondSnapshotFilePath
}
'
)
;
}
const
first
=
snapshots
[
firstSnapshotFilePath
]
.
takeCensus
(
censusOptions
)
;
const
second
=
snapshots
[
secondSnapshotFilePath
]
.
takeCensus
(
censusOptions
)
;
const
delta
=
CensusUtils
.
diff
(
censusOptions
.
breakdown
first
second
)
;
return
requestOptions
.
asTreeNode
?
new
CensusTreeNode
(
censusOptions
.
breakdown
delta
)
:
delta
;
}
)
;
