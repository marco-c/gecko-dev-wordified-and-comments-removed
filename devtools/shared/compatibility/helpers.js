"
use
strict
"
;
function
getCompatTable
(
compatNode
terms
)
{
let
targetNode
=
getCompatNode
(
compatNode
terms
)
;
if
(
!
targetNode
)
{
return
null
;
}
if
(
!
targetNode
.
__compat
)
{
for
(
const
field
in
targetNode
)
{
if
(
field
.
endsWith
(
"
_context
"
)
)
{
targetNode
=
targetNode
[
field
]
;
break
;
}
}
}
return
targetNode
.
__compat
;
}
function
getCompatNode
(
compatNode
terms
)
{
for
(
const
term
of
terms
)
{
compatNode
=
getChildCompatNode
(
compatNode
term
)
;
if
(
!
compatNode
)
{
return
null
;
}
}
return
compatNode
;
}
function
getChildCompatNode
(
compatNode
term
)
{
term
=
term
.
toLowerCase
(
)
;
let
child
=
null
;
for
(
const
field
in
compatNode
)
{
if
(
field
.
toLowerCase
(
)
=
=
=
term
)
{
child
=
compatNode
[
field
]
;
break
;
}
}
if
(
!
child
)
{
return
null
;
}
if
(
child
.
_aliasOf
)
{
child
=
compatNode
[
child
.
_aliasOf
]
;
}
return
child
;
}
module
.
exports
=
{
getCompatNode
getCompatTable
}
;
