"
use
strict
"
;
var
CC
=
Components
.
Constructor
;
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
jsm
"
)
;
const
{
NetUtil
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
debugger
.
remote
-
enabled
"
true
)
;
const
{
ActorRegistry
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
actor
-
registry
.
js
"
)
;
const
{
DevToolsServer
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
devtools
-
server
.
js
"
)
;
const
{
DevToolsClient
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
devtools
-
client
.
js
"
)
;
const
{
SocketListener
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
security
/
socket
.
js
"
)
;
function
scriptErrorLogLevel
(
message
)
{
switch
(
message
.
logLevel
)
{
case
Ci
.
nsIConsoleMessage
.
info
:
return
"
info
"
;
case
Ci
.
nsIConsoleMessage
.
warn
:
return
"
warning
"
;
default
:
Assert
.
equal
(
message
.
logLevel
Ci
.
nsIConsoleMessage
.
error
)
;
return
"
error
"
;
}
}
var
errorCount
=
0
;
var
listener
=
{
observe
(
message
)
{
errorCount
+
+
;
let
string
=
"
"
;
try
{
message
.
QueryInterface
(
Ci
.
nsIScriptError
)
;
dump
(
message
.
sourceName
+
"
:
"
+
message
.
lineNumber
+
"
:
"
+
scriptErrorLogLevel
(
message
)
+
"
:
"
+
message
.
errorMessage
+
"
\
n
"
)
;
string
=
message
.
errorMessage
;
}
catch
(
x
)
{
try
{
string
=
message
.
message
;
}
catch
(
e
)
{
string
=
"
<
error
converting
error
message
to
string
>
"
;
}
}
while
(
DevToolsServer
.
xpcInspector
.
eventLoopNestLevel
>
0
)
{
DevToolsServer
.
xpcInspector
.
exitNestedEventLoop
(
)
;
}
do_throw
(
"
head_dbg
.
js
got
console
message
:
"
+
string
+
"
\
n
"
)
;
}
}
;
Services
.
console
.
registerListener
(
listener
)
;
function
initTestDevToolsServer
(
)
{
ActorRegistry
.
registerModule
(
"
devtools
/
server
/
actors
/
thread
"
{
prefix
:
"
script
"
constructor
:
"
ScriptActor
"
type
:
{
global
:
true
target
:
true
}
}
)
;
const
{
createRootActor
}
=
require
(
"
xpcshell
-
test
/
testactors
"
)
;
DevToolsServer
.
setRootActor
(
createRootActor
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
keepAlive
=
true
;
}
function
getTestTempFile
(
fileName
allowMissing
)
{
let
thisTest
=
_TEST_FILE
.
toString
(
)
.
replace
(
/
\
\
/
g
"
/
"
)
;
thisTest
=
thisTest
.
substring
(
thisTest
.
lastIndexOf
(
"
/
"
)
+
1
)
;
thisTest
=
thisTest
.
replace
(
/
\
.
.
*
/
"
"
)
;
return
do_get_file
(
fileName
+
"
-
"
+
thisTest
allowMissing
)
;
}
function
writeTestTempFile
(
fileName
content
)
{
const
file
=
getTestTempFile
(
fileName
true
)
;
const
stream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
stream
.
init
(
file
-
1
-
1
0
)
;
try
{
do
{
const
numWritten
=
stream
.
write
(
content
content
.
length
)
;
content
=
content
.
slice
(
numWritten
)
;
}
while
(
content
.
length
)
;
}
finally
{
stream
.
close
(
)
;
}
}
var
socket_transport
=
async
function
(
)
{
if
(
!
DevToolsServer
.
listeningSockets
)
{
const
AuthenticatorType
=
DevToolsServer
.
Authenticators
.
get
(
"
PROMPT
"
)
;
const
authenticator
=
new
AuthenticatorType
.
Server
(
)
;
authenticator
.
allowConnection
=
(
)
=
>
{
return
DevToolsServer
.
AuthenticationResult
.
ALLOW
;
}
;
const
socketOptions
=
{
authenticator
portOrPath
:
-
1
}
;
const
debuggerListener
=
new
SocketListener
(
DevToolsServer
socketOptions
)
;
await
debuggerListener
.
open
(
)
;
}
const
port
=
DevToolsServer
.
_listeners
[
0
]
.
port
;
info
(
"
DevTools
server
port
is
"
+
port
)
;
return
DevToolsClient
.
socketConnect
(
{
host
:
"
127
.
0
.
0
.
1
"
port
}
)
;
}
;
function
local_transport
(
)
{
return
Promise
.
resolve
(
DevToolsServer
.
connectPipe
(
)
)
;
}
var
gReallyLong
;
function
really_long
(
)
{
if
(
gReallyLong
)
{
return
gReallyLong
;
}
let
ret
=
"
0123456789
"
;
for
(
let
i
=
0
;
i
<
18
;
i
+
+
)
{
ret
+
=
ret
;
}
gReallyLong
=
ret
;
return
ret
;
}
