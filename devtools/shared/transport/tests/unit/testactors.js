"
use
strict
"
;
const
{
ActorPool
appendExtraActors
createExtraActors
}
=
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
const
{
RootActor
}
=
require
(
"
devtools
/
server
/
actors
/
root
"
)
;
const
{
ThreadActor
}
=
require
(
"
devtools
/
server
/
actors
/
thread
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
var
gTestGlobals
=
[
]
;
DebuggerServer
.
addTestGlobal
=
function
(
global
)
{
gTestGlobals
.
push
(
global
)
;
}
;
function
TestTabList
(
connection
)
{
this
.
conn
=
connection
;
this
.
_targetActors
=
[
]
;
this
.
_targetActorPool
=
new
ActorPool
(
connection
)
;
for
(
const
global
of
gTestGlobals
)
{
const
actor
=
new
TestTargetActor
(
connection
global
)
;
actor
.
selected
=
false
;
this
.
_targetActors
.
push
(
actor
)
;
this
.
_targetActorPool
.
addActor
(
actor
)
;
}
if
(
this
.
_targetActors
.
length
>
0
)
{
this
.
_targetActors
[
0
]
.
selected
=
true
;
}
connection
.
addActorPool
(
this
.
_targetActorPool
)
;
}
TestTabList
.
prototype
=
{
constructor
:
TestTabList
getList
:
function
(
)
{
return
Promise
.
resolve
(
[
.
.
.
this
.
_targetActors
]
)
;
}
}
;
exports
.
createRootActor
=
function
createRootActor
(
connection
)
{
const
root
=
new
RootActor
(
connection
{
tabList
:
new
TestTabList
(
connection
)
globalActorFactories
:
DebuggerServer
.
globalActorFactories
}
)
;
root
.
applicationType
=
"
xpcshell
-
tests
"
;
return
root
;
}
;
function
TestTargetActor
(
connection
global
)
{
this
.
conn
=
connection
;
this
.
_global
=
global
;
this
.
_threadActor
=
new
ThreadActor
(
this
this
.
_global
)
;
this
.
conn
.
addActor
(
this
.
_threadActor
)
;
this
.
_attached
=
false
;
this
.
_extraActors
=
{
}
;
}
TestTargetActor
.
prototype
=
{
constructor
:
TestTargetActor
actorPrefix
:
"
TestTargetActor
"
get
window
(
)
{
return
{
wrappedJSObject
:
this
.
_global
}
;
}
get
url
(
)
{
return
this
.
_global
.
__name
;
}
form
:
function
(
)
{
const
response
=
{
actor
:
this
.
actorID
title
:
this
.
_global
.
__name
}
;
const
actorPool
=
new
ActorPool
(
this
.
conn
)
;
this
.
_createExtraActors
(
DebuggerServer
.
targetScopedActorFactories
actorPool
)
;
if
(
!
actorPool
.
isEmpty
(
)
)
{
this
.
_targetActorPool
=
actorPool
;
this
.
conn
.
addActorPool
(
this
.
_targetActorPool
)
;
}
this
.
_appendExtraActors
(
response
)
;
return
response
;
}
onAttach
:
function
(
request
)
{
this
.
_attached
=
true
;
const
response
=
{
type
:
"
tabAttached
"
threadActor
:
this
.
_threadActor
.
actorID
}
;
this
.
_appendExtraActors
(
response
)
;
return
response
;
}
onDetach
:
function
(
request
)
{
if
(
!
this
.
_attached
)
{
return
{
"
error
"
:
"
wrongState
"
}
;
}
return
{
type
:
"
detached
"
}
;
}
_createExtraActors
:
createExtraActors
_appendExtraActors
:
appendExtraActors
}
;
TestTargetActor
.
prototype
.
requestTypes
=
{
"
attach
"
:
TestTargetActor
.
prototype
.
onAttach
"
detach
"
:
TestTargetActor
.
prototype
.
onDetach
}
;
