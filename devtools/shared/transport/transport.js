"
use
strict
"
;
const
DevToolsUtils
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
{
dumpn
dumpv
}
=
DevToolsUtils
;
const
flags
=
require
(
"
resource
:
/
/
devtools
/
shared
/
flags
.
js
"
)
;
const
StreamUtils
=
require
(
"
resource
:
/
/
devtools
/
shared
/
transport
/
stream
-
utils
.
js
"
)
;
const
{
Packet
JSONPacket
BulkPacket
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
transport
/
packets
.
js
"
)
;
loader
.
lazyGetter
(
this
"
ScriptableInputStream
"
(
)
=
>
{
return
Components
.
Constructor
(
"
mozilla
.
org
/
scriptableinputstream
;
1
"
"
nsIScriptableInputStream
"
"
init
"
)
;
}
)
;
const
PACKET_HEADER_MAX
=
200
;
function
DebuggerTransport
(
input
output
)
{
this
.
_input
=
input
;
this
.
_scriptableInput
=
new
ScriptableInputStream
(
input
)
;
this
.
_output
=
output
;
this
.
_incomingHeader
=
"
"
;
this
.
_incoming
=
null
;
this
.
_outgoing
=
[
]
;
this
.
hooks
=
null
;
this
.
active
=
false
;
this
.
_incomingEnabled
=
true
;
this
.
_outgoingEnabled
=
true
;
this
.
close
=
this
.
close
.
bind
(
this
)
;
}
DebuggerTransport
.
prototype
=
{
send
(
object
)
{
const
packet
=
new
JSONPacket
(
this
)
;
packet
.
object
=
object
;
this
.
_outgoing
.
push
(
packet
)
;
this
.
_flushOutgoing
(
)
;
}
startBulkSend
(
header
)
{
const
packet
=
new
BulkPacket
(
this
)
;
packet
.
header
=
header
;
this
.
_outgoing
.
push
(
packet
)
;
this
.
_flushOutgoing
(
)
;
return
packet
.
streamReadyForWriting
;
}
close
(
reason
)
{
this
.
active
=
false
;
this
.
_input
.
close
(
)
;
this
.
_scriptableInput
.
close
(
)
;
this
.
_output
.
close
(
)
;
this
.
_destroyIncoming
(
)
;
this
.
_destroyAllOutgoing
(
)
;
if
(
this
.
hooks
)
{
this
.
hooks
.
onTransportClosed
(
reason
)
;
this
.
hooks
=
null
;
}
if
(
reason
)
{
dumpn
(
"
Transport
closed
:
"
+
DevToolsUtils
.
safeErrorString
(
reason
)
)
;
}
else
{
dumpn
(
"
Transport
closed
.
"
)
;
}
}
get
_currentOutgoing
(
)
{
return
this
.
_outgoing
[
0
]
;
}
_flushOutgoing
(
)
{
if
(
!
this
.
_outgoingEnabled
|
|
this
.
_outgoing
.
length
=
=
=
0
)
{
return
;
}
if
(
this
.
_currentOutgoing
.
done
)
{
this
.
_finishCurrentOutgoing
(
)
;
}
if
(
this
.
_outgoing
.
length
)
{
const
threadManager
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
)
;
this
.
_output
.
asyncWait
(
this
0
0
threadManager
.
currentThread
)
;
}
}
pauseOutgoing
(
)
{
this
.
_outgoingEnabled
=
false
;
}
resumeOutgoing
(
)
{
this
.
_outgoingEnabled
=
true
;
this
.
_flushOutgoing
(
)
;
}
onOutputStreamReady
:
DevToolsUtils
.
makeInfallible
(
function
(
stream
)
{
if
(
!
this
.
_outgoingEnabled
|
|
this
.
_outgoing
.
length
=
=
=
0
)
{
return
;
}
try
{
this
.
_currentOutgoing
.
write
(
stream
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_BASE_STREAM_WOULD_BLOCK
)
{
this
.
close
(
e
.
result
)
;
return
;
}
throw
e
;
}
this
.
_flushOutgoing
(
)
;
}
"
DebuggerTransport
.
prototype
.
onOutputStreamReady
"
)
_finishCurrentOutgoing
(
)
{
if
(
this
.
_currentOutgoing
)
{
this
.
_currentOutgoing
.
destroy
(
)
;
this
.
_outgoing
.
shift
(
)
;
}
}
_destroyAllOutgoing
(
)
{
for
(
const
packet
of
this
.
_outgoing
)
{
packet
.
destroy
(
)
;
}
this
.
_outgoing
=
[
]
;
}
ready
(
)
{
this
.
active
=
true
;
this
.
_waitForIncoming
(
)
;
}
_waitForIncoming
(
)
{
if
(
this
.
_incomingEnabled
)
{
const
threadManager
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
)
;
this
.
_input
.
asyncWait
(
this
0
0
threadManager
.
currentThread
)
;
}
}
pauseIncoming
(
)
{
this
.
_incomingEnabled
=
false
;
}
resumeIncoming
(
)
{
this
.
_incomingEnabled
=
true
;
this
.
_flushIncoming
(
)
;
this
.
_waitForIncoming
(
)
;
}
onInputStreamReady
:
DevToolsUtils
.
makeInfallible
(
function
(
stream
)
{
try
{
while
(
stream
.
available
(
)
&
&
this
.
_incomingEnabled
&
&
this
.
_processIncoming
(
stream
stream
.
available
(
)
)
)
{
}
this
.
_waitForIncoming
(
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_BASE_STREAM_WOULD_BLOCK
)
{
this
.
close
(
e
.
result
)
;
}
else
{
throw
e
;
}
}
}
"
DebuggerTransport
.
prototype
.
onInputStreamReady
"
)
_processIncoming
(
stream
count
)
{
dumpv
(
"
Data
available
:
"
+
count
)
;
if
(
!
count
)
{
dumpv
(
"
Nothing
to
read
skipping
"
)
;
return
false
;
}
try
{
if
(
!
this
.
_incoming
)
{
dumpv
(
"
Creating
a
new
packet
from
incoming
"
)
;
if
(
!
this
.
_readHeader
(
stream
)
)
{
return
false
;
}
this
.
_incoming
=
Packet
.
fromHeader
(
this
.
_incomingHeader
this
)
;
if
(
!
this
.
_incoming
)
{
throw
new
Error
(
"
No
packet
types
for
header
:
"
+
this
.
_incomingHeader
)
;
}
}
if
(
!
this
.
_incoming
.
done
)
{
dumpv
(
"
Existing
packet
incomplete
keep
reading
"
)
;
this
.
_incoming
.
read
(
stream
this
.
_scriptableInput
)
;
}
}
catch
(
e
)
{
const
msg
=
"
Error
reading
incoming
packet
:
(
"
+
e
+
"
-
"
+
e
.
stack
+
"
)
"
;
dumpn
(
msg
)
;
this
.
close
(
)
;
return
false
;
}
if
(
!
this
.
_incoming
.
done
)
{
dumpv
(
"
Packet
not
done
wait
for
more
"
)
;
return
true
;
}
this
.
_flushIncoming
(
)
;
return
true
;
}
_readHeader
(
)
{
const
amountToRead
=
PACKET_HEADER_MAX
-
this
.
_incomingHeader
.
length
;
this
.
_incomingHeader
+
=
StreamUtils
.
delimitedRead
(
this
.
_scriptableInput
"
:
"
amountToRead
)
;
if
(
flags
.
wantVerbose
)
{
dumpv
(
"
Header
read
:
"
+
this
.
_incomingHeader
)
;
}
if
(
this
.
_incomingHeader
.
endsWith
(
"
:
"
)
)
{
if
(
flags
.
wantVerbose
)
{
dumpv
(
"
Found
packet
header
successfully
:
"
+
this
.
_incomingHeader
)
;
}
return
true
;
}
if
(
this
.
_incomingHeader
.
length
>
=
PACKET_HEADER_MAX
)
{
throw
new
Error
(
"
Failed
to
parse
packet
header
!
"
)
;
}
return
false
;
}
_flushIncoming
(
)
{
if
(
!
this
.
_incoming
.
done
)
{
return
;
}
if
(
flags
.
wantLogging
)
{
dumpn
(
"
Got
:
"
+
this
.
_incoming
)
;
}
this
.
_destroyIncoming
(
)
;
}
_onJSONObjectReady
(
object
)
{
DevToolsUtils
.
executeSoon
(
DevToolsUtils
.
makeInfallible
(
(
)
=
>
{
if
(
this
.
active
)
{
this
.
hooks
.
onPacket
(
object
)
;
}
}
"
DebuggerTransport
instance
'
s
this
.
hooks
.
onPacket
"
)
)
;
}
_onBulkReadReady
(
.
.
.
args
)
{
DevToolsUtils
.
executeSoon
(
DevToolsUtils
.
makeInfallible
(
(
)
=
>
{
if
(
this
.
active
)
{
this
.
hooks
.
onBulkPacket
(
.
.
.
args
)
;
}
}
"
DebuggerTransport
instance
'
s
this
.
hooks
.
onBulkPacket
"
)
)
;
}
_destroyIncoming
(
)
{
if
(
this
.
_incoming
)
{
this
.
_incoming
.
destroy
(
)
;
}
this
.
_incomingHeader
=
"
"
;
this
.
_incoming
=
null
;
}
}
;
exports
.
DebuggerTransport
=
DebuggerTransport
;
