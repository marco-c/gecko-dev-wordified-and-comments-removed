"
use
strict
"
;
const
{
components
Cc
Ci
}
=
require
(
"
chrome
"
)
;
loader
.
lazyImporter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
gNSURLStore
=
new
Map
(
)
;
const
COOKIE_SAMESITE
=
{
LAX
:
"
Lax
"
STRICT
:
"
Strict
"
UNSET
:
"
Unset
"
}
;
var
NetworkHelper
=
{
convertToUnicode
:
function
(
text
charset
)
{
const
conv
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
try
{
conv
.
charset
=
charset
|
|
"
UTF
-
8
"
;
return
conv
.
ConvertToUnicode
(
text
)
;
}
catch
(
ex
)
{
return
text
;
}
}
readAndConvertFromStream
:
function
(
stream
charset
)
{
let
text
=
null
;
try
{
text
=
NetUtil
.
readInputStreamToString
(
stream
stream
.
available
(
)
)
;
return
this
.
convertToUnicode
(
text
charset
)
;
}
catch
(
err
)
{
return
text
;
}
}
readPostTextFromRequest
:
function
(
request
charset
)
{
if
(
request
instanceof
Ci
.
nsIUploadChannel
)
{
const
iStream
=
request
.
uploadStream
;
let
isSeekableStream
=
false
;
if
(
iStream
instanceof
Ci
.
nsISeekableStream
)
{
isSeekableStream
=
true
;
}
let
prevOffset
;
if
(
isSeekableStream
)
{
prevOffset
=
iStream
.
tell
(
)
;
iStream
.
seek
(
Ci
.
nsISeekableStream
.
NS_SEEK_SET
0
)
;
}
const
text
=
this
.
readAndConvertFromStream
(
iStream
charset
)
;
if
(
isSeekableStream
&
&
prevOffset
=
=
0
)
{
iStream
.
seek
(
Ci
.
nsISeekableStream
.
NS_SEEK_SET
0
)
;
}
return
text
;
}
return
null
;
}
readPostTextFromPage
:
function
(
docShell
charset
)
{
const
webNav
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
return
this
.
readPostTextFromPageViaWebNav
(
webNav
charset
)
;
}
readPostTextFromPageViaWebNav
:
function
(
webNav
charset
)
{
if
(
webNav
instanceof
Ci
.
nsIWebPageDescriptor
)
{
const
descriptor
=
webNav
.
currentDescriptor
;
if
(
descriptor
instanceof
Ci
.
nsISHEntry
&
&
descriptor
.
postData
&
&
descriptor
instanceof
Ci
.
nsISeekableStream
)
{
descriptor
.
seek
(
Ci
.
nsISeekableStream
.
NS_SEEK_SET
0
)
;
return
this
.
readAndConvertFromStream
(
descriptor
charset
)
;
}
}
return
null
;
}
getAppIdForRequest
:
function
(
request
)
{
try
{
return
this
.
getRequestLoadContext
(
request
)
.
appId
;
}
catch
(
ex
)
{
}
return
null
;
}
getTopFrameForRequest
:
function
(
request
)
{
try
{
return
this
.
getRequestLoadContext
(
request
)
.
topFrameElement
;
}
catch
(
ex
)
{
}
return
null
;
}
getWindowForRequest
:
function
(
request
)
{
try
{
return
this
.
getRequestLoadContext
(
request
)
.
associatedWindow
;
}
catch
(
ex
)
{
}
return
null
;
}
getRequestLoadContext
:
function
(
request
)
{
try
{
return
request
.
notificationCallbacks
.
getInterface
(
Ci
.
nsILoadContext
)
;
}
catch
(
ex
)
{
}
try
{
return
request
.
loadGroup
.
notificationCallbacks
.
getInterface
(
Ci
.
nsILoadContext
)
;
}
catch
(
ex
)
{
}
return
null
;
}
isTopLevelLoad
:
function
(
request
)
{
if
(
request
instanceof
Ci
.
nsIChannel
)
{
const
loadInfo
=
request
.
loadInfo
;
if
(
loadInfo
&
&
loadInfo
.
isTopLevelLoad
)
{
return
(
request
.
loadFlags
&
Ci
.
nsIChannel
.
LOAD_DOCUMENT_URI
)
;
}
}
return
false
;
}
loadFromCache
:
function
(
url
charset
callback
)
{
const
channel
=
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
;
channel
.
loadFlags
=
Ci
.
nsIRequest
.
LOAD_FROM_CACHE
|
Ci
.
nsICachingChannel
.
LOAD_ONLY_FROM_CACHE
|
Ci
.
nsICachingChannel
.
LOAD_BYPASS_LOCAL_CACHE_IF_BUSY
;
NetUtil
.
asyncFetch
(
channel
(
inputStream
statusCode
request
)
=
>
{
if
(
!
components
.
isSuccessCode
(
statusCode
)
)
{
callback
(
null
)
;
return
;
}
const
requestChannel
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
const
contentCharset
=
requestChannel
.
contentCharset
|
|
charset
;
callback
(
this
.
readAndConvertFromStream
(
inputStream
contentCharset
)
)
;
}
)
;
}
parseCookieHeader
:
function
(
header
)
{
const
cookies
=
header
.
split
(
"
;
"
)
;
const
result
=
[
]
;
cookies
.
forEach
(
function
(
cookie
)
{
const
equal
=
cookie
.
indexOf
(
"
=
"
)
;
const
name
=
cookie
.
substr
(
0
equal
)
;
const
value
=
cookie
.
substr
(
equal
+
1
)
;
result
.
push
(
{
name
:
unescape
(
name
.
trim
(
)
)
value
:
unescape
(
value
.
trim
(
)
)
}
)
;
}
)
;
return
result
;
}
parseSetCookieHeader
:
function
(
header
)
{
function
parseSameSiteAttribute
(
attribute
)
{
switch
(
attribute
)
{
case
COOKIE_SAMESITE
.
LAX
:
return
COOKIE_SAMESITE
.
LAX
;
case
COOKIE_SAMESITE
.
STRICT
:
return
COOKIE_SAMESITE
.
STRICT
;
default
:
return
COOKIE_SAMESITE
.
UNSET
;
}
}
const
rawCookies
=
header
.
split
(
/
\
r
\
n
|
\
n
|
\
r
/
)
;
const
cookies
=
[
]
;
rawCookies
.
forEach
(
function
(
cookie
)
{
const
equal
=
cookie
.
indexOf
(
"
=
"
)
;
const
name
=
unescape
(
cookie
.
substr
(
0
equal
)
.
trim
(
)
)
;
const
parts
=
cookie
.
substr
(
equal
+
1
)
.
split
(
"
;
"
)
;
const
value
=
unescape
(
parts
.
shift
(
)
.
trim
(
)
)
;
cookie
=
{
name
:
name
value
:
value
}
;
parts
.
forEach
(
function
(
part
)
{
part
=
part
.
trim
(
)
;
if
(
part
.
toLowerCase
(
)
=
=
"
secure
"
)
{
cookie
.
secure
=
true
;
}
else
if
(
part
.
toLowerCase
(
)
=
=
"
httponly
"
)
{
cookie
.
httpOnly
=
true
;
}
else
if
(
part
.
indexOf
(
"
=
"
)
>
-
1
)
{
const
pair
=
part
.
split
(
"
=
"
)
;
pair
[
0
]
=
pair
[
0
]
.
toLowerCase
(
)
;
if
(
pair
[
0
]
=
=
"
path
"
|
|
pair
[
0
]
=
=
"
domain
"
)
{
cookie
[
pair
[
0
]
]
=
pair
[
1
]
;
}
else
if
(
pair
[
0
]
=
=
"
samesite
"
)
{
cookie
[
pair
[
0
]
]
=
parseSameSiteAttribute
(
pair
[
1
]
)
;
}
else
if
(
pair
[
0
]
=
=
"
expires
"
)
{
try
{
pair
[
1
]
=
pair
[
1
]
.
replace
(
/
-
/
g
"
"
)
;
cookie
.
expires
=
new
Date
(
pair
[
1
]
)
.
toISOString
(
)
;
}
catch
(
ex
)
{
}
}
}
}
)
;
cookies
.
push
(
cookie
)
;
}
)
;
return
cookies
;
}
mimeCategoryMap
:
{
"
text
/
plain
"
:
"
txt
"
"
text
/
html
"
:
"
html
"
"
text
/
xml
"
:
"
xml
"
"
text
/
xsl
"
:
"
txt
"
"
text
/
xul
"
:
"
txt
"
"
text
/
css
"
:
"
css
"
"
text
/
sgml
"
:
"
txt
"
"
text
/
rtf
"
:
"
txt
"
"
text
/
x
-
setext
"
:
"
txt
"
"
text
/
richtext
"
:
"
txt
"
"
text
/
javascript
"
:
"
js
"
"
text
/
jscript
"
:
"
txt
"
"
text
/
tab
-
separated
-
values
"
:
"
txt
"
"
text
/
rdf
"
:
"
txt
"
"
text
/
xif
"
:
"
txt
"
"
text
/
ecmascript
"
:
"
js
"
"
text
/
vnd
.
curl
"
:
"
txt
"
"
text
/
x
-
json
"
:
"
json
"
"
text
/
x
-
js
"
:
"
txt
"
"
text
/
js
"
:
"
txt
"
"
text
/
vbscript
"
:
"
txt
"
"
view
-
source
"
:
"
txt
"
"
view
-
fragment
"
:
"
txt
"
"
application
/
xml
"
:
"
xml
"
"
application
/
xhtml
+
xml
"
:
"
xml
"
"
application
/
atom
+
xml
"
:
"
xml
"
"
application
/
rss
+
xml
"
:
"
xml
"
"
application
/
vnd
.
mozilla
.
maybe
.
feed
"
:
"
xml
"
"
application
/
vnd
.
mozilla
.
xul
+
xml
"
:
"
xml
"
"
application
/
javascript
"
:
"
js
"
"
application
/
x
-
javascript
"
:
"
js
"
"
application
/
x
-
httpd
-
php
"
:
"
txt
"
"
application
/
rdf
+
xml
"
:
"
xml
"
"
application
/
ecmascript
"
:
"
js
"
"
application
/
http
-
index
-
format
"
:
"
txt
"
"
application
/
json
"
:
"
json
"
"
application
/
x
-
js
"
:
"
txt
"
"
application
/
x
-
mpegurl
"
:
"
txt
"
"
application
/
vnd
.
apple
.
mpegurl
"
:
"
txt
"
"
multipart
/
mixed
"
:
"
txt
"
"
multipart
/
x
-
mixed
-
replace
"
:
"
txt
"
"
image
/
svg
+
xml
"
:
"
svg
"
"
application
/
octet
-
stream
"
:
"
bin
"
"
image
/
jpeg
"
:
"
image
"
"
image
/
jpg
"
:
"
image
"
"
image
/
gif
"
:
"
image
"
"
image
/
png
"
:
"
image
"
"
image
/
bmp
"
:
"
image
"
"
application
/
x
-
shockwave
-
flash
"
:
"
flash
"
"
video
/
x
-
flv
"
:
"
flash
"
"
audio
/
mpeg3
"
:
"
media
"
"
audio
/
x
-
mpeg
-
3
"
:
"
media
"
"
video
/
mpeg
"
:
"
media
"
"
video
/
x
-
mpeg
"
:
"
media
"
"
video
/
vnd
.
mpeg
.
dash
.
mpd
"
:
"
xml
"
"
audio
/
ogg
"
:
"
media
"
"
application
/
ogg
"
:
"
media
"
"
application
/
x
-
ogg
"
:
"
media
"
"
application
/
x
-
midi
"
:
"
media
"
"
audio
/
midi
"
:
"
media
"
"
audio
/
x
-
mid
"
:
"
media
"
"
audio
/
x
-
midi
"
:
"
media
"
"
music
/
crescendo
"
:
"
media
"
"
audio
/
wav
"
:
"
media
"
"
audio
/
x
-
wav
"
:
"
media
"
"
text
/
json
"
:
"
json
"
"
application
/
x
-
json
"
:
"
json
"
"
application
/
json
-
rpc
"
:
"
json
"
"
application
/
x
-
web
-
app
-
manifest
+
json
"
:
"
json
"
"
application
/
manifest
+
json
"
:
"
json
"
}
isTextMimeType
:
function
(
mimeType
)
{
if
(
mimeType
.
indexOf
(
"
text
/
"
)
=
=
0
)
{
return
true
;
}
if
(
/
^
application
\
/
\
w
+
(
?
:
[
\
.
-
]
\
w
+
)
*
(
?
:
\
+
xml
|
[
-
+
]
json
)
/
.
test
(
mimeType
)
)
{
return
true
;
}
const
category
=
this
.
mimeCategoryMap
[
mimeType
]
|
|
null
;
switch
(
category
)
{
case
"
txt
"
:
case
"
js
"
:
case
"
json
"
:
case
"
css
"
:
case
"
html
"
:
case
"
svg
"
:
case
"
xml
"
:
return
true
;
default
:
return
false
;
}
}
parseSecurityInfo
:
function
(
securityInfo
httpActivity
)
{
const
info
=
{
state
:
"
insecure
"
}
;
if
(
!
securityInfo
)
{
return
info
;
}
securityInfo
.
QueryInterface
(
Ci
.
nsITransportSecurityInfo
)
;
const
wpl
=
Ci
.
nsIWebProgressListener
;
const
NSSErrorsService
=
Cc
[
"
mozilla
.
org
/
nss_errors_service
;
1
"
]
.
getService
(
Ci
.
nsINSSErrorsService
)
;
const
SSLStatus
=
securityInfo
.
SSLStatus
;
if
(
!
NSSErrorsService
.
isNSSErrorCode
(
securityInfo
.
errorCode
)
)
{
const
state
=
securityInfo
.
securityState
;
let
uri
=
null
;
if
(
httpActivity
.
channel
&
&
httpActivity
.
channel
.
URI
)
{
uri
=
httpActivity
.
channel
.
URI
;
}
if
(
uri
&
&
!
uri
.
schemeIs
(
"
https
"
)
&
&
!
uri
.
schemeIs
(
"
wss
"
)
)
{
info
.
state
=
"
insecure
"
;
}
else
if
(
state
&
wpl
.
STATE_IS_SECURE
)
{
info
.
state
=
"
secure
"
;
}
else
if
(
state
&
wpl
.
STATE_IS_BROKEN
)
{
info
.
state
=
"
weak
"
;
info
.
weaknessReasons
=
this
.
getReasonsForWeakness
(
state
)
;
}
else
if
(
state
&
wpl
.
STATE_IS_INSECURE
)
{
return
info
;
}
else
{
DevToolsUtils
.
reportException
(
"
NetworkHelper
.
parseSecurityInfo
"
"
Security
state
"
+
state
+
"
has
no
known
STATE_IS_
*
flags
.
"
)
;
return
info
;
}
info
.
cipherSuite
=
SSLStatus
.
cipherName
;
info
.
keaGroupName
=
SSLStatus
.
keaGroupName
;
info
.
signatureSchemeName
=
SSLStatus
.
signatureSchemeName
;
info
.
protocolVersion
=
this
.
formatSecurityProtocol
(
SSLStatus
.
protocolVersion
)
;
info
.
cert
=
this
.
parseCertificateInfo
(
SSLStatus
.
serverCert
)
;
info
.
certificateTransparency
=
SSLStatus
.
certificateTransparencyStatus
;
if
(
httpActivity
.
hostname
)
{
const
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
const
flags
=
(
httpActivity
.
private
)
?
Ci
.
nsISocketProvider
.
NO_PERMANENT_STORAGE
:
0
;
if
(
!
uri
)
{
const
host
=
httpActivity
.
hostname
;
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
"
+
host
)
;
}
info
.
hsts
=
sss
.
isSecureURI
(
sss
.
HEADER_HSTS
uri
flags
)
;
info
.
hpkp
=
sss
.
isSecureURI
(
sss
.
HEADER_HPKP
uri
flags
)
;
}
else
{
DevToolsUtils
.
reportException
(
"
NetworkHelper
.
parseSecurityInfo
"
"
Could
not
get
HSTS
/
HPKP
status
as
hostname
is
not
available
.
"
)
;
info
.
hsts
=
false
;
info
.
hpkp
=
false
;
}
}
else
{
info
.
state
=
"
broken
"
;
info
.
errorMessage
=
securityInfo
.
errorCodeString
;
}
return
info
;
}
parseCertificateInfo
:
function
(
cert
)
{
const
info
=
{
}
;
if
(
cert
)
{
info
.
subject
=
{
commonName
:
cert
.
commonName
organization
:
cert
.
organization
organizationalUnit
:
cert
.
organizationalUnit
}
;
info
.
issuer
=
{
commonName
:
cert
.
issuerCommonName
organization
:
cert
.
issuerOrganization
organizationUnit
:
cert
.
issuerOrganizationUnit
}
;
info
.
validity
=
{
start
:
cert
.
validity
.
notBeforeLocalDay
end
:
cert
.
validity
.
notAfterLocalDay
}
;
info
.
fingerprint
=
{
sha1
:
cert
.
sha1Fingerprint
sha256
:
cert
.
sha256Fingerprint
}
;
}
else
{
DevToolsUtils
.
reportException
(
"
NetworkHelper
.
parseCertificateInfo
"
"
Secure
connection
established
without
certificate
.
"
)
;
}
return
info
;
}
formatSecurityProtocol
:
function
(
version
)
{
switch
(
version
)
{
case
Ci
.
nsISSLStatus
.
TLS_VERSION_1
:
return
"
TLSv1
"
;
case
Ci
.
nsISSLStatus
.
TLS_VERSION_1_1
:
return
"
TLSv1
.
1
"
;
case
Ci
.
nsISSLStatus
.
TLS_VERSION_1_2
:
return
"
TLSv1
.
2
"
;
case
Ci
.
nsISSLStatus
.
TLS_VERSION_1_3
:
return
"
TLSv1
.
3
"
;
default
:
DevToolsUtils
.
reportException
(
"
NetworkHelper
.
formatSecurityProtocol
"
"
protocolVersion
"
+
version
+
"
is
unknown
.
"
)
;
return
"
Unknown
"
;
}
}
getReasonsForWeakness
:
function
(
state
)
{
const
wpl
=
Ci
.
nsIWebProgressListener
;
const
reasons
=
[
]
;
if
(
state
&
wpl
.
STATE_IS_BROKEN
)
{
const
isCipher
=
state
&
wpl
.
STATE_USES_WEAK_CRYPTO
;
if
(
isCipher
)
{
reasons
.
push
(
"
cipher
"
)
;
}
if
(
!
isCipher
)
{
DevToolsUtils
.
reportException
(
"
NetworkHelper
.
getReasonsForWeakness
"
"
STATE_IS_BROKEN
without
a
known
reason
.
Full
state
was
:
"
+
state
)
;
}
}
return
reasons
;
}
parseQueryString
:
function
(
queryString
)
{
if
(
!
queryString
)
{
return
null
;
}
const
paramsArray
=
queryString
.
replace
(
/
^
[
?
&
]
/
"
"
)
.
split
(
"
&
"
)
.
map
(
e
=
>
{
const
param
=
e
.
split
(
"
=
"
)
;
return
{
name
:
param
[
0
]
?
NetworkHelper
.
convertToUnicode
(
unescape
(
param
[
0
]
)
)
:
"
"
value
:
param
[
1
]
?
NetworkHelper
.
convertToUnicode
(
unescape
(
param
[
1
]
)
)
:
"
"
}
;
}
)
;
return
paramsArray
;
}
nsIURL
:
function
(
url
store
=
gNSURLStore
)
{
if
(
store
.
has
(
url
)
)
{
return
store
.
get
(
url
)
;
}
const
uri
=
Services
.
io
.
newURI
(
url
)
.
QueryInterface
(
Ci
.
nsIURL
)
;
store
.
set
(
url
uri
)
;
return
uri
;
}
}
;
for
(
const
prop
of
Object
.
getOwnPropertyNames
(
NetworkHelper
)
)
{
exports
[
prop
]
=
NetworkHelper
[
prop
]
;
}
