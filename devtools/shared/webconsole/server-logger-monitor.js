"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
makeInfallible
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
loader
.
lazyGetter
(
this
"
NetworkHelper
"
(
)
=
>
require
(
"
devtools
/
shared
/
webconsole
/
network
-
helper
"
)
)
;
const
trace
=
{
log
:
function
(
.
.
.
args
)
{
}
}
;
const
acceptableHeaders
=
[
"
x
-
chromelogger
-
data
"
]
;
var
ServerLoggerMonitor
=
{
initialize
:
function
(
)
{
this
.
onChildMessage
=
this
.
onChildMessage
.
bind
(
this
)
;
this
.
onExamineResponse
=
this
.
onExamineResponse
.
bind
(
this
)
;
this
.
targets
=
new
Set
(
)
;
}
attach
:
makeInfallible
(
function
(
{
mm
prefix
}
)
{
trace
.
log
(
"
ServerLoggerMonitor
.
attach
;
"
arguments
)
;
let
setMessageManager
=
newMM
=
>
{
if
(
mm
)
{
mm
.
removeMessageListener
(
"
debug
:
server
-
logger
"
this
.
onChildMessage
)
;
}
mm
=
newMM
;
if
(
mm
)
{
mm
.
addMessageListener
(
"
debug
:
server
-
logger
"
this
.
onChildMessage
)
;
}
}
;
setMessageManager
(
mm
)
;
return
{
onBrowserSwap
:
setMessageManager
onDisconnected
:
(
)
=
>
{
trace
.
log
(
"
ServerLoggerMonitor
.
onDisconnectChild
;
"
arguments
)
;
setMessageManager
(
null
)
;
}
}
;
}
)
onChildMessage
:
function
(
msg
)
{
let
method
=
msg
.
data
.
method
;
trace
.
log
(
"
ServerLoggerMonitor
.
onChildMessage
;
"
method
msg
)
;
switch
(
method
)
{
case
"
attachChild
"
:
return
this
.
onAttachChild
(
msg
)
;
case
"
detachChild
"
:
return
this
.
onDetachChild
(
msg
)
;
default
:
trace
.
log
(
"
Unknown
method
name
:
"
method
)
;
return
undefined
;
}
}
onAttachChild
:
function
(
event
)
{
let
target
=
event
.
target
;
let
size
=
this
.
targets
.
size
;
trace
.
log
(
"
ServerLoggerMonitor
.
onAttachChild
;
size
:
"
size
target
)
;
if
(
!
size
)
{
trace
.
log
(
"
ServerLoggerMonitor
.
onAttatchChild
;
Add
HTTP
Observer
"
)
;
Services
.
obs
.
addObserver
(
this
.
onExamineResponse
"
http
-
on
-
examine
-
response
"
false
)
;
}
this
.
targets
.
add
(
target
)
;
}
onDetachChild
:
function
(
event
)
{
let
target
=
event
.
target
;
this
.
targets
.
delete
(
target
)
;
let
size
=
this
.
targets
.
size
;
trace
.
log
(
"
ServerLoggerMonitor
.
onDetachChild
;
size
:
"
size
target
)
;
if
(
!
size
)
{
trace
.
log
(
"
ServerLoggerMonitor
.
onDetachChild
;
Remove
HTTP
Observer
"
)
;
Services
.
obs
.
removeObserver
(
this
.
onExamineResponse
"
http
-
on
-
examine
-
response
"
)
;
}
}
onExamineResponse
:
makeInfallible
(
function
(
subject
topic
)
{
let
httpChannel
=
subject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
trace
.
log
(
"
ServerLoggerMonitor
.
onExamineResponse
;
"
httpChannel
.
name
this
.
targets
)
;
if
(
!
httpChannel
.
loadInfo
&
&
httpChannel
.
loadInfo
.
loadingDocument
=
=
=
null
&
&
httpChannel
.
loadInfo
.
loadingPrincipal
=
=
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
{
return
;
}
let
requestFrame
=
NetworkHelper
.
getTopFrameForRequest
(
httpChannel
)
;
if
(
!
requestFrame
)
{
return
;
}
if
(
!
this
.
targets
.
has
(
requestFrame
)
)
{
return
;
}
let
headers
=
[
]
;
httpChannel
.
visitResponseHeaders
(
(
header
value
)
=
>
{
header
=
header
.
toLowerCase
(
)
;
if
(
acceptableHeaders
.
indexOf
(
header
)
!
=
=
-
1
)
{
headers
.
push
(
{
header
:
header
value
:
value
}
)
;
}
}
)
;
if
(
!
headers
.
length
)
{
return
;
}
let
{
messageManager
}
=
requestFrame
;
messageManager
.
sendAsyncMessage
(
"
debug
:
server
-
logger
"
{
method
:
"
examineHeaders
"
headers
:
headers
}
)
;
trace
.
log
(
"
ServerLoggerMonitor
.
onExamineResponse
;
headers
"
headers
.
length
"
"
headers
)
;
}
)
}
;
function
setupParentProcess
(
event
)
{
return
ServerLoggerMonitor
.
attach
(
event
)
;
}
ServerLoggerMonitor
.
initialize
(
)
;
exports
.
setupParentProcess
=
setupParentProcess
;
