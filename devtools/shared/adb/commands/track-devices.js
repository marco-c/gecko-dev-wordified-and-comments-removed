"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
dumpn
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
setTimeout
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
const
{
adbProcess
}
=
require
(
"
.
.
/
adb
-
process
"
)
;
const
client
=
require
(
"
.
.
/
adb
-
client
"
)
;
const
OKAY
=
0x59414b4f
;
class
TrackDevicesCommand
extends
EventEmitter
{
run
(
)
{
this
.
_waitForFirst
=
true
;
this
.
_devices
=
{
}
;
this
.
_socket
=
client
.
connect
(
)
;
this
.
_socket
.
s
.
onopen
=
this
.
_onOpen
.
bind
(
this
)
;
this
.
_socket
.
s
.
onerror
=
this
.
_onError
.
bind
(
this
)
;
this
.
_socket
.
s
.
onclose
=
this
.
_onClose
.
bind
(
this
)
;
this
.
_socket
.
s
.
ondata
=
this
.
_onData
.
bind
(
this
)
;
}
stop
(
)
{
if
(
this
.
_socket
)
{
this
.
_socket
.
close
(
)
;
this
.
_socket
.
s
.
onopen
=
null
;
this
.
_socket
.
s
.
onerror
=
null
;
this
.
_socket
.
s
.
onclose
=
null
;
this
.
_socket
.
s
.
ondata
=
null
;
}
}
_onOpen
(
)
{
dumpn
(
"
trackDevices
onopen
"
)
;
const
req
=
client
.
createRequest
(
"
host
:
track
-
devices
"
)
;
this
.
_socket
.
send
(
req
)
;
}
_onError
(
event
)
{
dumpn
(
"
trackDevices
onerror
:
"
+
event
)
;
}
_onClose
(
)
{
dumpn
(
"
trackDevices
onclose
"
)
;
for
(
const
dev
in
this
.
_devices
)
{
this
.
_devices
[
dev
]
=
false
;
this
.
emit
(
"
device
-
disconnected
"
dev
)
;
}
setTimeout
(
(
)
=
>
{
if
(
adbProcess
.
ready
)
{
adbProcess
.
start
(
)
.
then
(
(
)
=
>
{
this
.
run
(
)
;
}
)
;
}
}
2000
)
;
}
_onData
(
event
)
{
dumpn
(
"
trackDevices
ondata
"
)
;
const
data
=
event
.
data
;
dumpn
(
"
length
=
"
+
data
.
byteLength
)
;
const
dec
=
new
TextDecoder
(
)
;
dumpn
(
dec
.
decode
(
new
Uint8Array
(
data
)
)
.
trim
(
)
)
;
if
(
this
.
_waitForFirst
)
{
if
(
!
client
.
checkResponse
(
data
OKAY
)
)
{
this
.
_socket
.
close
(
)
;
return
;
}
}
const
packet
=
client
.
unpackPacket
(
data
!
this
.
_waitForFirst
)
;
this
.
_waitForFirst
=
false
;
if
(
packet
.
data
=
=
"
"
)
{
for
(
const
dev
in
this
.
_devices
)
{
this
.
_devices
[
dev
]
=
false
;
this
.
emit
(
"
device
-
disconnected
"
dev
)
;
}
}
else
{
const
lines
=
packet
.
data
.
split
(
"
\
n
"
)
;
const
newDev
=
{
}
;
lines
.
forEach
(
function
(
line
)
{
if
(
line
.
length
=
=
0
)
{
return
;
}
const
[
dev
status
]
=
line
.
split
(
"
\
t
"
)
;
newDev
[
dev
]
=
status
!
=
=
"
offline
"
;
}
)
;
for
(
const
dev
in
newDev
)
{
if
(
this
.
_devices
[
dev
]
!
=
newDev
[
dev
]
)
{
if
(
dev
in
this
.
_devices
|
|
newDev
[
dev
]
)
{
const
topic
=
newDev
[
dev
]
?
"
device
-
connected
"
:
"
device
-
disconnected
"
;
this
.
emit
(
topic
dev
)
;
}
this
.
_devices
[
dev
]
=
newDev
[
dev
]
;
}
}
}
}
}
exports
.
TrackDevicesCommand
=
TrackDevicesCommand
;
