"
use
strict
"
;
const
{
AddonManager
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
ADB_LINK
=
Services
.
prefs
.
getCharPref
(
"
devtools
.
remote
.
adb
.
extensionURL
"
)
;
const
ADB_ADDON_ID
=
Services
.
prefs
.
getCharPref
(
"
devtools
.
remote
.
adb
.
extensionID
"
)
;
const
OLD_ADB_ADDON_ID
=
"
adbhelper
mozilla
.
org
"
;
const
ADB_ADDON_STATES
=
{
DOWNLOADING
:
"
downloading
"
INSTALLED
:
"
installed
"
INSTALLING
:
"
installing
"
PREPARING
:
"
preparing
"
UNINSTALLED
:
"
uninstalled
"
UNKNOWN
:
"
unknown
"
}
;
exports
.
ADB_ADDON_STATES
=
ADB_ADDON_STATES
;
class
ADBAddon
extends
EventEmitter
{
constructor
(
)
{
super
(
)
;
this
.
_status
=
ADB_ADDON_STATES
.
UNKNOWN
;
this
.
uninstallOldExtension
(
)
;
const
addonsListener
=
{
}
;
addonsListener
.
onEnabled
=
addonsListener
.
onDisabled
=
addonsListener
.
onInstalled
=
addonsListener
.
onUninstalled
=
(
)
=
>
this
.
updateInstallStatus
(
)
;
AddonManager
.
addAddonListener
(
addonsListener
)
;
this
.
updateInstallStatus
(
)
;
}
set
status
(
value
)
{
if
(
this
.
_status
!
=
value
)
{
this
.
_status
=
value
;
this
.
emit
(
"
update
"
)
;
}
}
get
status
(
)
{
return
this
.
_status
;
}
async
updateInstallStatus
(
)
{
const
addon
=
await
AddonManager
.
getAddonByID
(
ADB_ADDON_ID
)
;
if
(
addon
&
&
!
addon
.
userDisabled
)
{
this
.
status
=
ADB_ADDON_STATES
.
INSTALLED
;
}
else
{
this
.
status
=
ADB_ADDON_STATES
.
UNINSTALLED
;
}
}
_getXpiLink
(
)
{
const
platform
=
Services
.
appShell
.
hiddenDOMWindow
.
navigator
.
platform
;
let
OS
=
"
"
;
if
(
platform
.
includes
(
"
Win
"
)
)
{
OS
=
"
win32
"
;
}
else
if
(
platform
.
includes
(
"
Mac
"
)
)
{
OS
=
"
mac64
"
;
}
else
if
(
platform
.
includes
(
"
Linux
"
)
)
{
if
(
platform
.
includes
(
"
x86_64
"
)
)
{
OS
=
"
linux64
"
;
}
else
{
OS
=
"
linux
"
;
}
}
return
ADB_LINK
.
replace
(
/
#
OS
#
/
g
OS
)
;
}
async
install
(
source
)
{
const
addon
=
await
AddonManager
.
getAddonByID
(
ADB_ADDON_ID
)
;
if
(
addon
&
&
!
addon
.
userDisabled
)
{
this
.
status
=
ADB_ADDON_STATES
.
INSTALLED
;
return
;
}
this
.
status
=
ADB_ADDON_STATES
.
PREPARING
;
if
(
addon
&
&
addon
.
userDisabled
)
{
await
addon
.
enable
(
)
;
}
else
{
const
install
=
await
AddonManager
.
getInstallForURL
(
this
.
_getXpiLink
(
)
"
application
/
x
-
xpinstall
"
null
null
null
null
null
{
source
}
)
;
install
.
addListener
(
this
)
;
install
.
install
(
)
;
}
}
async
uninstall
(
)
{
const
addon
=
await
AddonManager
.
getAddonByID
(
ADB_ADDON_ID
)
;
addon
.
uninstall
(
)
;
}
async
uninstallOldExtension
(
)
{
const
oldAddon
=
await
AddonManager
.
getAddonByID
(
OLD_ADB_ADDON_ID
)
;
if
(
oldAddon
)
{
oldAddon
.
uninstall
(
)
;
}
}
installFailureHandler
(
install
message
)
{
this
.
status
=
ADB_ADDON_STATES
.
UNINSTALLED
;
this
.
emit
(
"
failure
"
message
)
;
}
onDownloadStarted
(
)
{
this
.
status
=
ADB_ADDON_STATES
.
DOWNLOADING
;
}
onDownloadProgress
(
install
)
{
if
(
install
.
maxProgress
=
=
-
1
)
{
this
.
emit
(
"
progress
"
-
1
)
;
}
else
{
this
.
emit
(
"
progress
"
install
.
progress
/
install
.
maxProgress
)
;
}
}
onDownloadCancelled
(
install
)
{
this
.
installFailureHandler
(
install
"
Download
cancelled
"
)
;
}
onDownloadFailed
(
install
)
{
this
.
installFailureHandler
(
install
"
Download
failed
"
)
;
}
onInstallStarted
(
)
{
this
.
status
=
ADB_ADDON_STATES
.
INSTALLING
;
}
onInstallCancelled
(
install
)
{
this
.
installFailureHandler
(
install
"
Install
cancelled
"
)
;
}
onInstallFailed
(
install
)
{
this
.
installFailureHandler
(
install
"
Install
failed
"
)
;
}
onInstallEnded
(
{
addon
}
)
{
addon
.
enable
(
)
;
}
}
exports
.
adbAddon
=
new
ADBAddon
(
)
;
