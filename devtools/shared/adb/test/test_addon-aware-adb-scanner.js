"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
AddonAwareADBScanner
}
=
require
(
"
devtools
/
shared
/
adb
/
addon
-
aware
-
adb
-
scanner
"
)
;
function
prepareMockScanner
(
)
{
const
mockScanner
=
{
enable
:
sinon
.
spy
(
)
disable
:
sinon
.
spy
(
)
scan
:
sinon
.
spy
(
)
listRuntimes
:
sinon
.
spy
(
)
}
;
EventEmitter
.
decorate
(
mockScanner
)
;
return
mockScanner
;
}
function
prepareMockAddon
(
)
{
const
mockAddon
=
{
status
:
"
unknown
"
}
;
EventEmitter
.
decorate
(
mockAddon
)
;
return
mockAddon
;
}
function
prepareMocks
(
)
{
const
mockScanner
=
prepareMockScanner
(
)
;
const
mockAddon
=
prepareMockAddon
(
)
;
const
addonAwareAdbScanner
=
new
AddonAwareADBScanner
(
mockScanner
mockAddon
)
;
return
{
addonAwareAdbScanner
mockAddon
mockScanner
}
;
}
add_task
(
async
function
testCallingEnable
(
)
{
const
{
mockScanner
mockAddon
addonAwareAdbScanner
}
=
prepareMocks
(
)
;
mockAddon
.
status
=
"
uninstalled
"
;
addonAwareAdbScanner
.
enable
(
)
;
ok
(
mockScanner
.
enable
.
notCalled
"
enable
(
)
was
not
called
"
)
;
mockScanner
.
enable
.
reset
(
)
;
mockAddon
.
status
=
"
installed
"
;
addonAwareAdbScanner
.
enable
(
)
;
ok
(
mockScanner
.
enable
.
called
"
enable
(
)
was
called
"
)
;
mockScanner
.
enable
.
reset
(
)
;
}
)
;
add_task
(
async
function
testUpdatingAddonEnablesDisablesScanner
(
)
{
const
{
mockScanner
mockAddon
addonAwareAdbScanner
}
=
prepareMocks
(
)
;
addonAwareAdbScanner
.
enable
(
)
;
ok
(
mockScanner
.
enable
.
notCalled
"
enable
(
)
was
not
called
initially
"
)
;
mockAddon
.
status
=
"
installed
"
;
mockAddon
.
emit
(
"
update
"
)
;
ok
(
mockScanner
.
enable
.
called
"
enable
(
)
was
called
when
installing
the
addon
"
)
;
ok
(
mockScanner
.
disable
.
notCalled
"
disable
(
)
was
not
called
when
installing
the
addon
"
)
;
mockScanner
.
enable
.
reset
(
)
;
mockScanner
.
disable
.
reset
(
)
;
mockAddon
.
status
=
"
uninstalled
"
;
mockAddon
.
emit
(
"
update
"
)
;
ok
(
mockScanner
.
enable
.
notCalled
"
enable
(
)
was
not
called
when
uninstalling
the
addon
"
)
;
ok
(
mockScanner
.
disable
.
called
"
disable
(
)
was
called
when
uninstalling
the
addon
"
)
;
mockScanner
.
enable
.
reset
(
)
;
mockScanner
.
disable
.
reset
(
)
;
mockAddon
.
status
=
"
installed
"
;
mockAddon
.
emit
(
"
update
"
)
;
ok
(
mockScanner
.
enable
.
called
"
enable
(
)
was
called
when
installing
the
addon
"
)
;
ok
(
mockScanner
.
disable
.
notCalled
"
disable
(
)
was
not
called
when
installing
the
addon
"
)
;
mockScanner
.
enable
.
reset
(
)
;
mockScanner
.
disable
.
reset
(
)
;
}
)
;
add_task
(
async
function
testScannerIsDisabledWhenMissingAddonUpdate
(
)
{
const
{
mockScanner
mockAddon
addonAwareAdbScanner
}
=
prepareMocks
(
)
;
mockAddon
.
status
=
"
installed
"
;
addonAwareAdbScanner
.
enable
(
)
;
ok
(
mockScanner
.
enable
.
called
"
enable
(
)
was
called
initially
"
)
;
mockScanner
.
enable
.
reset
(
)
;
mockAddon
.
status
=
"
uninstalled
"
;
addonAwareAdbScanner
.
disable
(
)
;
ok
(
mockScanner
.
disable
.
called
"
disable
(
)
was
called
when
uninstalling
the
addon
"
)
;
mockScanner
.
disable
.
reset
(
)
;
}
)
;
add_task
(
async
function
testInnerEnableIsNotCalledIfNotStarted
(
)
{
const
{
mockScanner
mockAddon
addonAwareAdbScanner
}
=
prepareMocks
(
)
;
mockAddon
.
status
=
"
installed
"
;
mockAddon
.
emit
(
"
update
"
)
;
ok
(
mockScanner
.
enable
.
notCalled
"
enable
(
)
was
not
called
"
)
;
mockAddon
.
status
=
"
uninstalled
"
;
mockAddon
.
emit
(
"
update
"
)
;
ok
(
mockScanner
.
disable
.
notCalled
"
disable
(
)
was
not
called
"
)
;
addonAwareAdbScanner
.
enable
(
)
;
ok
(
mockScanner
.
enable
.
notCalled
"
enable
(
)
was
not
called
"
)
;
ok
(
mockScanner
.
disable
.
notCalled
"
disable
(
)
was
not
called
"
)
;
}
)
;
add_task
(
async
function
testEnableIsNoLongerCalledAfterDisabling
(
)
{
const
{
mockScanner
mockAddon
addonAwareAdbScanner
}
=
prepareMocks
(
)
;
mockAddon
.
status
=
"
installed
"
;
addonAwareAdbScanner
.
enable
(
)
;
ok
(
mockScanner
.
enable
.
called
"
enable
(
)
was
called
since
addon
was
already
installed
"
)
;
mockScanner
.
enable
.
reset
(
)
;
addonAwareAdbScanner
.
enable
(
)
;
ok
(
mockScanner
.
enable
.
called
"
enable
(
)
was
called
again
"
)
;
mockScanner
.
enable
.
reset
(
)
;
addonAwareAdbScanner
.
disable
(
)
;
ok
(
mockScanner
.
disable
.
called
"
disable
(
)
was
called
"
)
;
mockScanner
.
disable
.
reset
(
)
;
mockAddon
.
emit
(
"
update
"
)
;
ok
(
mockScanner
.
enable
.
notCalled
"
enable
(
)
is
not
called
since
the
main
scanner
is
disabled
"
)
;
}
)
;
add_task
(
async
function
testListUpdatedEventForwarding
(
)
{
const
{
mockScanner
addonAwareAdbScanner
}
=
prepareMocks
(
)
;
const
spy
=
sinon
.
spy
(
)
;
addonAwareAdbScanner
.
on
(
"
runtime
-
list
-
updated
"
spy
)
;
mockScanner
.
emit
(
"
runtime
-
list
-
updated
"
)
;
ok
(
spy
.
called
"
The
runtime
-
list
-
updated
event
was
forwarded
from
ADBScanner
"
)
;
addonAwareAdbScanner
.
off
(
"
runtime
-
list
-
updated
"
spy
)
;
}
)
;
add_task
(
async
function
testScanCallForwarding
(
)
{
const
{
mockScanner
addonAwareAdbScanner
}
=
prepareMocks
(
)
;
ok
(
mockScanner
.
scan
.
notCalled
"
ADBScanner
scan
(
)
is
not
called
initially
"
)
;
addonAwareAdbScanner
.
scan
(
)
;
mockScanner
.
emit
(
"
runtime
-
list
-
updated
"
)
;
ok
(
mockScanner
.
scan
.
called
"
ADBScanner
scan
(
)
was
called
"
)
;
mockScanner
.
scan
.
reset
(
)
;
}
)
;
add_task
(
async
function
testListRuntimesCallForwarding
(
)
{
const
{
mockScanner
addonAwareAdbScanner
}
=
prepareMocks
(
)
;
ok
(
mockScanner
.
listRuntimes
.
notCalled
"
ADBScanner
listRuntimes
(
)
is
not
called
initially
"
)
;
addonAwareAdbScanner
.
listRuntimes
(
)
;
mockScanner
.
emit
(
"
runtime
-
list
-
updated
"
)
;
ok
(
mockScanner
.
listRuntimes
.
called
"
ADBScanner
listRuntimes
(
)
was
called
"
)
;
mockScanner
.
scan
.
reset
(
)
;
}
)
;
