"
use
strict
"
;
const
{
RuntimeTypes
}
=
require
(
"
devtools
/
client
/
webide
/
modules
/
runtime
-
types
"
)
;
const
{
ADB
}
=
require
(
"
devtools
/
shared
/
adb
/
adb
"
)
;
function
AdbRuntime
(
adbDevice
model
socketPath
)
{
this
.
_adbDevice
=
adbDevice
;
this
.
_model
=
model
;
this
.
_socketPath
=
socketPath
;
}
AdbRuntime
.
prototype
=
{
type
:
RuntimeTypes
.
USB
connect
(
connection
)
{
return
ADB
.
prepareTCPConnection
(
this
.
_socketPath
)
.
then
(
port
=
>
{
connection
.
host
=
"
localhost
"
;
connection
.
port
=
port
;
connection
.
connect
(
)
;
}
)
;
}
get
id
(
)
{
return
this
.
_adbDevice
.
id
+
"
|
"
+
this
.
_socketPath
;
}
}
;
AdbRuntime
.
prototype
.
_channel
=
function
(
)
{
const
packageName
=
this
.
_packageName
(
)
;
switch
(
packageName
)
{
case
"
org
.
mozilla
.
firefox
"
:
return
"
"
;
case
"
org
.
mozilla
.
firefox_beta
"
:
return
"
Beta
"
;
case
"
org
.
mozilla
.
fennec
"
:
case
"
org
.
mozilla
.
fennec_aurora
"
:
return
"
Nightly
"
;
default
:
return
"
Custom
"
;
}
}
;
AdbRuntime
.
prototype
.
_packageName
=
function
(
)
{
return
this
.
_socketPath
.
startsWith
(
"
"
)
?
this
.
_socketPath
.
substr
(
1
)
.
split
(
"
/
"
)
[
0
]
:
this
.
_socketPath
.
split
(
"
/
"
)
[
3
]
;
}
;
Object
.
defineProperty
(
AdbRuntime
.
prototype
"
shortName
"
{
get
(
)
{
return
Firefox
{
this
.
_channel
(
)
}
;
}
}
)
;
Object
.
defineProperty
(
AdbRuntime
.
prototype
"
deviceName
"
{
get
(
)
{
return
this
.
_model
|
|
this
.
_adbDevice
.
id
;
}
}
)
;
Object
.
defineProperty
(
AdbRuntime
.
prototype
"
name
"
{
get
(
)
{
const
channel
=
this
.
_channel
(
)
;
return
"
Firefox
"
+
channel
+
"
on
Android
(
"
+
this
.
deviceName
+
"
)
"
;
}
}
)
;
exports
.
AdbRuntime
=
AdbRuntime
;
