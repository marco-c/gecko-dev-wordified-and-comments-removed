"
use
strict
"
;
const
{
RuntimeTypes
}
=
require
(
"
devtools
/
client
/
webide
/
modules
/
runtime
-
types
"
)
;
const
{
prepareTCPConnection
}
=
require
(
"
devtools
/
shared
/
adb
/
commands
/
index
"
)
;
const
{
shell
}
=
require
(
"
devtools
/
shared
/
adb
/
commands
/
index
"
)
;
class
AdbRuntime
{
constructor
(
adbDevice
socketPath
)
{
this
.
type
=
RuntimeTypes
.
USB
;
this
.
_adbDevice
=
adbDevice
;
this
.
_socketPath
=
socketPath
;
}
async
init
(
)
{
const
packageName
=
this
.
_packageName
(
)
;
const
query
=
dumpsys
package
{
packageName
}
|
grep
versionName
;
const
versionNameString
=
await
shell
(
this
.
_adbDevice
.
id
query
)
;
const
matches
=
versionNameString
.
match
(
/
versionName
=
(
[
\
d
.
]
+
)
/
)
;
if
(
matches
&
&
matches
[
1
]
)
{
this
.
_versionName
=
matches
[
1
]
;
}
}
get
id
(
)
{
return
this
.
_adbDevice
.
id
+
"
|
"
+
this
.
_socketPath
;
}
get
isFenix
(
)
{
return
this
.
_packageName
(
)
.
includes
(
"
org
.
mozilla
.
fenix
"
)
;
}
get
deviceId
(
)
{
return
this
.
_adbDevice
.
id
;
}
get
deviceName
(
)
{
return
this
.
_adbDevice
.
name
;
}
get
versionName
(
)
{
return
this
.
_versionName
;
}
get
shortName
(
)
{
const
packageName
=
this
.
_packageName
(
)
;
switch
(
packageName
)
{
case
"
org
.
mozilla
.
firefox
"
:
return
"
Firefox
"
;
case
"
org
.
mozilla
.
firefox_beta
"
:
return
"
Firefox
Beta
"
;
case
"
org
.
mozilla
.
fennec
"
:
case
"
org
.
mozilla
.
fennec_aurora
"
:
return
"
Firefox
Nightly
"
;
case
"
org
.
mozilla
.
fenix
"
:
return
"
Firefox
Preview
"
;
case
"
org
.
mozilla
.
fenix
.
beta
"
:
return
"
Firefox
Preview
Beta
"
;
case
"
org
.
mozilla
.
fenix
.
nightly
"
:
return
"
Firefox
Preview
Nightly
"
;
default
:
return
"
Firefox
Custom
"
;
}
}
get
socketPath
(
)
{
return
this
.
_socketPath
;
}
get
name
(
)
{
return
{
this
.
shortName
}
on
Android
(
{
this
.
deviceName
}
)
;
}
connect
(
connection
)
{
return
prepareTCPConnection
(
this
.
deviceId
this
.
_socketPath
)
.
then
(
port
=
>
{
connection
.
host
=
"
localhost
"
;
connection
.
port
=
port
;
connection
.
connect
(
)
;
}
)
;
}
_packageName
(
)
{
return
this
.
_socketPath
.
startsWith
(
"
"
)
?
this
.
_socketPath
.
substr
(
1
)
.
split
(
"
/
"
)
[
0
]
:
this
.
_socketPath
.
split
(
"
/
"
)
[
3
]
;
}
}
exports
.
AdbRuntime
=
AdbRuntime
;
