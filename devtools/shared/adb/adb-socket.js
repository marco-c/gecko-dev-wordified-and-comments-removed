"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
function
createTCPSocket
(
location
port
options
)
{
const
{
TCPSocket
}
=
Cu
.
getGlobalForObject
(
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
)
;
return
new
TCPSocket
(
location
port
options
)
;
}
class
AdbSocket
{
constructor
(
)
{
this
.
s
=
createTCPSocket
(
"
127
.
0
.
0
.
1
"
5037
{
binaryType
:
"
arraybuffer
"
}
)
;
}
_hexdump
(
aArray
)
{
let
decoder
=
new
TextDecoder
(
"
windows
-
1252
"
)
;
let
array
=
new
Uint8Array
(
aArray
.
buffer
)
;
let
s
=
decoder
.
decode
(
array
)
;
let
len
=
array
.
length
;
let
dbg
=
"
len
=
"
+
len
+
"
"
;
let
l
=
len
>
20
?
20
:
len
;
for
(
let
i
=
0
;
i
<
l
;
i
+
+
)
{
let
c
=
array
[
i
]
.
toString
(
16
)
;
if
(
c
.
length
=
=
1
)
c
=
"
0
"
+
c
;
dbg
+
=
c
;
}
dbg
+
=
"
"
;
for
(
let
i
=
0
;
i
<
l
;
i
+
+
)
{
let
c
=
array
[
i
]
;
if
(
c
<
32
|
|
c
>
127
)
{
dbg
+
=
"
.
"
;
}
else
{
dbg
+
=
s
[
i
]
;
}
}
console
.
debug
(
dbg
)
;
}
send
(
aArray
)
{
this
.
_hexdump
(
aArray
)
;
this
.
s
.
send
(
aArray
.
buffer
aArray
.
byteOffset
aArray
.
byteLength
)
;
}
close
(
)
{
if
(
this
.
s
.
readyState
=
=
=
"
open
"
|
|
this
.
s
.
readyState
=
=
=
"
connecting
"
)
{
this
.
s
.
close
(
)
;
}
}
}
exports
.
AdbSocket
=
AdbSocket
;
