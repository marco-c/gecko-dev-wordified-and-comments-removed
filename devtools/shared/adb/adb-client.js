"
use
strict
"
;
const
{
AdbSocket
}
=
require
(
"
.
/
adb
-
socket
"
)
;
const
OKAY
=
0x59414b4f
;
const
FAIL
=
0x4c494146
;
const
_sockets
=
[
]
;
function
getBuffer
(
aPacket
)
{
return
aPacket
.
buffer
?
aPacket
.
buffer
:
aPacket
;
}
function
unpackPacket
(
aPacket
aIgnoreResponse
)
{
const
buffer
=
getBuffer
(
aPacket
)
;
console
.
debug
(
"
Len
buffer
:
"
+
buffer
.
byteLength
)
;
if
(
buffer
.
byteLength
=
=
=
4
&
&
!
aIgnoreResponse
)
{
console
.
debug
(
"
Packet
empty
"
)
;
return
{
length
:
0
data
:
"
"
}
;
}
const
lengthView
=
new
Uint8Array
(
buffer
aIgnoreResponse
?
0
:
4
4
)
;
const
decoder
=
new
TextDecoder
(
)
;
const
length
=
parseInt
(
decoder
.
decode
(
lengthView
)
16
)
;
const
text
=
new
Uint8Array
(
buffer
aIgnoreResponse
?
4
:
8
length
)
;
return
{
length
data
:
decoder
.
decode
(
text
)
}
;
}
function
checkResponse
(
aPacket
aExpected
=
OKAY
)
{
const
buffer
=
getBuffer
(
aPacket
)
;
const
view
=
new
Uint32Array
(
buffer
0
1
)
;
if
(
view
[
0
]
=
=
FAIL
)
{
console
.
debug
(
"
Response
:
FAIL
"
)
;
}
console
.
debug
(
"
view
[
0
]
=
"
+
view
[
0
]
)
;
return
view
[
0
]
=
=
aExpected
;
}
function
createRequest
(
aCommand
)
{
let
length
=
aCommand
.
length
.
toString
(
16
)
.
toUpperCase
(
)
;
while
(
length
.
length
<
4
)
{
length
=
"
0
"
+
length
;
}
const
encoder
=
new
TextEncoder
(
)
;
console
.
debug
(
"
Created
request
:
"
+
length
+
aCommand
)
;
return
encoder
.
encode
(
length
+
aCommand
)
;
}
function
close
(
)
{
_sockets
.
forEach
(
function
(
s
)
{
s
.
close
(
)
;
}
)
;
}
function
connect
(
)
{
const
tmp
=
new
AdbSocket
(
)
;
_sockets
.
push
(
tmp
)
;
return
tmp
;
}
const
client
=
{
getBuffer
unpackPacket
checkResponse
createRequest
connect
close
}
;
module
.
exports
=
client
;
