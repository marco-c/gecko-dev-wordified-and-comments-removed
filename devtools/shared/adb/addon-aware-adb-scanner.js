"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
loader
.
lazyRequireGetter
(
this
"
adbAddon
"
"
devtools
/
shared
/
adb
/
adb
-
addon
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ADBScanner
"
"
devtools
/
shared
/
adb
/
adb
-
scanner
"
true
)
;
class
AddonAwareADBScanner
extends
EventEmitter
{
constructor
(
)
{
super
(
)
;
this
.
_onScannerListUpdated
=
this
.
_onScannerListUpdated
.
bind
(
this
)
;
this
.
_onAddonUpdate
=
this
.
_onAddonUpdate
.
bind
(
this
)
;
this
.
_scanner
=
new
ADBScanner
(
)
;
this
.
_scanner
.
on
(
"
runtime
-
list
-
updated
"
this
.
_onScannerListUpdated
)
;
}
enable
(
)
{
if
(
adbAddon
.
status
=
=
=
"
installed
"
)
{
this
.
_scanner
.
enable
(
)
;
}
adbAddon
.
off
(
"
update
"
this
.
_onAddonUpdate
)
;
adbAddon
.
on
(
"
update
"
this
.
_onAddonUpdate
)
;
}
disable
(
)
{
this
.
_scanner
.
disable
(
)
;
adbAddon
.
off
(
"
update
"
this
.
_onAddonUpdate
)
;
}
scan
(
)
{
return
this
.
_scanner
.
scan
(
)
;
}
listRuntimes
(
)
{
return
this
.
_scanner
.
listRuntimes
(
)
;
}
_onAddonUpdate
(
)
{
if
(
adbAddon
.
status
=
=
=
"
installed
"
)
{
this
.
_scanner
.
enable
(
)
;
}
else
{
this
.
_scanner
.
disable
(
)
;
}
}
_onScannerListUpdated
(
)
{
this
.
emit
(
"
runtime
-
list
-
updated
"
)
;
}
}
exports
.
AddonAwareADBScanner
=
AddonAwareADBScanner
;
