"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
TargetList
"
"
devtools
/
shared
/
resources
/
target
-
list
"
true
)
;
class
LegacyWorkersWatcher
{
constructor
(
targetList
onTargetAvailable
onTargetDestroyed
)
{
this
.
targetList
=
targetList
;
this
.
rootFront
=
targetList
.
rootFront
;
this
.
target
=
targetList
.
targetFront
;
this
.
onTargetAvailable
=
onTargetAvailable
;
this
.
onTargetDestroyed
=
onTargetDestroyed
;
this
.
targetsByProcess
=
new
WeakMap
(
)
;
this
.
targetsListeners
=
new
WeakMap
(
)
;
this
.
_onProcessAvailable
=
this
.
_onProcessAvailable
.
bind
(
this
)
;
this
.
_onProcessDestroyed
=
this
.
_onProcessDestroyed
.
bind
(
this
)
;
}
async
_onProcessAvailable
(
{
targetFront
}
)
{
this
.
targetsByProcess
.
set
(
targetFront
new
Set
(
)
)
;
const
listener
=
this
.
_workerListChanged
.
bind
(
this
targetFront
)
;
this
.
targetsListeners
.
set
(
targetFront
listener
)
;
const
front
=
targetFront
.
isParentProcess
?
this
.
rootFront
:
targetFront
;
front
.
on
(
"
workerListChanged
"
listener
)
;
await
this
.
_workerListChanged
(
targetFront
)
;
}
async
_onProcessDestroyed
(
{
targetFront
}
)
{
const
existingTargets
=
this
.
targetsByProcess
.
get
(
targetFront
)
;
for
(
const
target
of
existingTargets
)
{
this
.
onTargetDestroyed
(
target
)
;
target
.
destroy
(
)
;
existingTargets
.
delete
(
target
)
;
}
this
.
targetsByProcess
.
delete
(
targetFront
)
;
this
.
targetsListeners
.
delete
(
targetFront
)
;
}
_supportWorkerTarget
(
workerTarget
)
{
return
(
workerTarget
.
isDedicatedWorker
&
&
!
workerTarget
.
url
.
startsWith
(
"
resource
:
/
/
gre
/
modules
/
subprocess
/
subprocess_worker
"
)
)
;
}
async
_workerListChanged
(
targetFront
)
{
const
front
=
targetFront
.
isParentProcess
?
this
.
rootFront
:
targetFront
;
const
{
workers
}
=
await
front
.
listWorkers
(
)
;
const
existingTargets
=
this
.
targetsByProcess
.
get
(
targetFront
)
;
for
(
const
target
of
existingTargets
)
{
if
(
!
workers
.
includes
(
target
)
)
{
this
.
onTargetDestroyed
(
target
)
;
target
.
destroy
(
)
;
existingTargets
.
delete
(
target
)
;
}
}
const
promises
=
[
]
;
for
(
const
workerTarget
of
workers
)
{
if
(
!
this
.
_supportWorkerTarget
(
workerTarget
)
|
|
existingTargets
.
has
(
workerTarget
)
)
{
continue
;
}
existingTargets
.
add
(
workerTarget
)
;
promises
.
push
(
this
.
onTargetAvailable
(
workerTarget
)
)
;
}
await
Promise
.
all
(
promises
)
;
}
async
listen
(
)
{
if
(
this
.
target
.
isParentProcess
)
{
await
this
.
targetList
.
watchTargets
(
[
TargetList
.
TYPES
.
PROCESS
]
this
.
_onProcessAvailable
this
.
_onProcessDestroyed
)
;
await
this
.
_onProcessAvailable
(
{
targetFront
:
this
.
target
}
)
;
}
else
{
this
.
targetsByProcess
.
set
(
this
.
target
new
Set
(
)
)
;
this
.
_workerListChangedListener
=
this
.
_workerListChanged
.
bind
(
this
this
.
target
)
;
this
.
target
.
on
(
"
workerListChanged
"
this
.
_workerListChangedListener
)
;
await
this
.
_workerListChanged
(
this
.
target
)
;
}
}
unlisten
(
)
{
if
(
this
.
target
.
isParentProcess
)
{
for
(
const
targetFront
of
this
.
targetList
.
getAllTargets
(
TargetList
.
TYPES
.
PROCESS
)
)
{
const
listener
=
this
.
targetsListeners
.
get
(
targetFront
)
;
targetFront
.
off
(
"
workerListChanged
"
listener
)
;
this
.
targetsByProcess
.
delete
(
targetFront
)
;
this
.
targetsListeners
.
delete
(
targetFront
)
;
}
this
.
targetList
.
unwatchTargets
(
[
TargetList
.
TYPES
.
PROCESS
]
this
.
_onProcessAvailable
this
.
_onProcessDestroyed
)
;
}
else
{
this
.
target
.
off
(
"
workerListChanged
"
this
.
_workerListChangedListener
)
;
delete
this
.
_workerListChangedListener
;
this
.
targetsByProcess
.
delete
(
this
.
target
)
;
this
.
targetsListeners
.
delete
(
this
.
target
)
;
}
}
}
module
.
exports
=
{
LegacyWorkersWatcher
}
;
