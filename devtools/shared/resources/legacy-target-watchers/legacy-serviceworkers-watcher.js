"
use
strict
"
;
const
{
WorkersListener
}
=
require
(
"
devtools
/
client
/
shared
/
workers
-
listener
"
)
;
const
{
LegacyWorkersWatcher
}
=
require
(
"
devtools
/
shared
/
resources
/
legacy
-
target
-
watchers
/
legacy
-
workers
-
watcher
"
)
;
class
LegacyServiceWorkersWatcher
extends
LegacyWorkersWatcher
{
constructor
(
targetList
onTargetAvailable
onTargetDestroyed
)
{
super
(
targetList
onTargetAvailable
onTargetDestroyed
)
;
this
.
_registrations
=
[
]
;
this
.
_processTargets
=
new
Set
(
)
;
this
.
_workersListener
=
new
WorkersListener
(
this
.
rootFront
{
registrationsOnly
:
true
}
)
;
this
.
_onRegistrationListChanged
=
this
.
_onRegistrationListChanged
.
bind
(
this
)
;
this
.
_onNavigate
=
this
.
_onNavigate
.
bind
(
this
)
;
this
.
_isServiceWorkerWatcher
=
true
;
}
_recordWorkerTarget
(
workerTarget
)
{
return
!
!
this
.
_getRegistrationForWorkerTarget
(
workerTarget
)
;
}
_supportWorkerTarget
(
workerTarget
)
{
if
(
!
workerTarget
.
isServiceWorker
)
{
return
false
;
}
const
registration
=
this
.
_getRegistrationForWorkerTarget
(
workerTarget
)
;
return
registration
&
&
this
.
_isRegistrationValidForTarget
(
registration
)
;
}
async
listen
(
)
{
this
.
_workersListener
.
addListener
(
this
.
_onRegistrationListChanged
)
;
await
this
.
_onRegistrationListChanged
(
)
;
if
(
this
.
target
.
isLocalTab
)
{
this
.
target
.
on
(
"
navigate
"
this
.
_onNavigate
)
;
}
await
super
.
listen
(
)
;
}
unlisten
(
)
{
this
.
_workersListener
.
removeListener
(
this
.
_onRegistrationListChanged
)
;
if
(
this
.
target
.
isLocalTab
)
{
this
.
target
.
off
(
"
navigate
"
this
.
_onNavigate
)
;
}
super
.
unlisten
(
)
;
}
async
_onProcessAvailable
(
{
targetFront
}
)
{
if
(
this
.
target
.
isLocalTab
)
{
const
origin
=
new
URL
(
this
.
target
.
url
)
.
origin
;
try
{
await
targetFront
.
pauseMatchingServiceWorkers
(
{
origin
}
)
;
}
catch
(
e
)
{
if
(
targetFront
.
actorID
)
{
throw
e
;
}
else
{
console
.
warn
(
"
Process
target
destroyed
while
calling
pauseMatchingServiceWorkers
"
)
;
}
}
}
this
.
_processTargets
.
add
(
targetFront
)
;
return
super
.
_onProcessAvailable
(
{
targetFront
}
)
;
}
_shouldDestroyTargetsOnNavigation
(
)
{
return
!
!
this
.
targetList
.
destroyServiceWorkersOnNavigation
;
}
_onProcessDestroyed
(
{
targetFront
}
)
{
this
.
_processTargets
.
delete
(
targetFront
)
;
return
super
.
_onProcessDestroyed
(
{
targetFront
}
)
;
}
_onNavigate
(
)
{
const
allServiceWorkerTargets
=
this
.
_getAllServiceWorkerTargets
(
)
;
const
shouldDestroy
=
this
.
_shouldDestroyTargetsOnNavigation
(
)
;
for
(
const
target
of
allServiceWorkerTargets
)
{
const
isRegisteredBefore
=
this
.
targetList
.
isTargetRegistered
(
target
)
;
if
(
shouldDestroy
&
&
isRegisteredBefore
)
{
this
.
onTargetDestroyed
(
target
)
;
}
const
isRegisteredAfter
=
this
.
targetList
.
isTargetRegistered
(
target
)
;
const
isValidTarget
=
this
.
_supportWorkerTarget
(
target
)
;
if
(
isValidTarget
&
&
!
isRegisteredAfter
)
{
this
.
onTargetAvailable
(
target
)
;
}
}
}
async
_onRegistrationListChanged
(
)
{
await
this
.
_updateRegistrations
(
)
;
const
allServiceWorkerTargets
=
this
.
_getAllServiceWorkerTargets
(
)
;
for
(
const
target
of
allServiceWorkerTargets
)
{
const
hasRegistration
=
this
.
_getRegistrationForWorkerTarget
(
target
)
;
if
(
!
hasRegistration
)
{
if
(
this
.
targetList
.
isTargetRegistered
(
target
)
)
{
this
.
onTargetDestroyed
(
target
)
;
}
this
.
_removeTargetReferences
(
target
)
;
}
}
}
_removeTargetReferences
(
target
)
{
const
allProcessTargets
=
this
.
_getProcessTargets
(
)
.
filter
(
t
=
>
this
.
targetsByProcess
.
get
(
t
)
)
;
for
(
const
processTarget
of
allProcessTargets
)
{
this
.
targetsByProcess
.
get
(
processTarget
)
.
delete
(
target
)
;
}
}
async
_updateRegistrations
(
)
{
const
{
registrations
}
=
await
this
.
rootFront
.
listServiceWorkerRegistrations
(
)
;
this
.
_registrations
=
registrations
;
}
_getRegistrationForWorkerTarget
(
workerTarget
)
{
return
this
.
_registrations
.
find
(
r
=
>
{
return
(
r
.
evaluatingWorker
?
.
id
=
=
=
workerTarget
.
id
|
|
r
.
activeWorker
?
.
id
=
=
=
workerTarget
.
id
|
|
r
.
installingWorker
?
.
id
=
=
=
workerTarget
.
id
|
|
r
.
waitingWorker
?
.
id
=
=
=
workerTarget
.
id
)
;
}
)
;
}
_getProcessTargets
(
)
{
return
[
.
.
.
this
.
_processTargets
]
;
}
_getAllServiceWorkerTargets
(
)
{
const
allProcessTargets
=
this
.
_getProcessTargets
(
)
.
filter
(
target
=
>
this
.
targetsByProcess
.
get
(
target
)
)
;
const
serviceWorkerTargets
=
[
]
;
for
(
const
target
of
allProcessTargets
)
{
serviceWorkerTargets
.
push
(
.
.
.
this
.
targetsByProcess
.
get
(
target
)
)
;
}
return
serviceWorkerTargets
;
}
_isRegistrationValidForTarget
(
registration
)
{
if
(
this
.
target
.
isParentProcess
)
{
return
true
;
}
if
(
!
this
.
target
.
isLocalTab
)
{
return
false
;
}
const
targetDomain
=
new
URL
(
this
.
target
.
url
)
.
hostname
;
try
{
const
registrationDomain
=
new
URL
(
registration
.
url
)
.
hostname
;
return
registrationDomain
=
=
=
targetDomain
;
}
catch
(
e
)
{
return
false
;
}
}
}
module
.
exports
=
{
LegacyServiceWorkersWatcher
}
;
