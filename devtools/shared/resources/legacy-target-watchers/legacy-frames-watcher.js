"
use
strict
"
;
class
LegacyFramesWatcher
{
constructor
(
targetList
onTargetAvailable
)
{
this
.
targetList
=
targetList
;
this
.
rootFront
=
targetList
.
rootFront
;
this
.
target
=
targetList
.
targetFront
;
this
.
onTargetAvailable
=
onTargetAvailable
;
}
async
listen
(
)
{
const
{
frames
}
=
await
this
.
target
.
listRemoteFrames
(
)
;
const
promises
=
frames
.
filter
(
descriptor
=
>
descriptor
.
parentID
=
=
this
.
target
.
browsingContextID
|
|
descriptor
.
id
=
=
this
.
target
.
browsingContextID
)
.
map
(
async
descriptor
=
>
{
const
target
=
await
descriptor
.
getTarget
(
)
;
if
(
!
target
)
{
console
.
error
(
"
Wasn
'
t
able
to
retrieve
the
target
for
"
descriptor
.
actorID
)
;
return
;
}
await
this
.
onTargetAvailable
(
target
)
;
}
)
;
await
Promise
.
all
(
promises
)
;
}
unlisten
(
)
{
}
}
module
.
exports
=
{
LegacyFramesWatcher
}
;
