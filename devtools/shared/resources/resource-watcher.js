"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
Services
=
require
(
"
Services
"
)
;
class
ResourceWatcher
{
constructor
(
targetList
)
{
this
.
targetList
=
targetList
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
this
.
_onResourceAvailable
=
this
.
_onResourceAvailable
.
bind
(
this
)
;
this
.
_availableListeners
=
new
EventEmitter
(
)
;
this
.
_destroyedListeners
=
new
EventEmitter
(
)
;
this
.
_listenerCount
=
new
Map
(
)
;
this
.
_previouslyListenedTypes
=
new
Set
(
)
;
}
get
contentToolboxFissionPrefValue
(
)
{
if
(
!
this
.
_contentToolboxFissionPrefValue
)
{
this
.
_contentToolboxFissionPrefValue
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
contenttoolbox
.
fission
"
false
)
;
}
return
this
.
_contentToolboxFissionPrefValue
;
}
async
watch
(
resources
onAvailable
onDestroyed
)
{
await
this
.
_watchAllTargets
(
)
;
for
(
const
resource
of
resources
)
{
this
.
_availableListeners
.
on
(
resource
onAvailable
)
;
if
(
onDestroyed
)
{
this
.
_destroyedListeners
.
on
(
resource
onDestroyed
)
;
}
await
this
.
_startListening
(
resource
)
;
}
}
unwatch
(
resources
onAvailable
onDestroyed
)
{
for
(
const
resource
of
resources
)
{
this
.
_availableListeners
.
off
(
resource
onAvailable
)
;
if
(
onDestroyed
)
{
this
.
_destroyedListeners
.
off
(
resource
onDestroyed
)
;
}
this
.
_stopListening
(
resource
)
;
}
let
listeners
=
0
;
for
(
const
count
of
this
.
_listenerCount
)
{
listeners
+
=
count
;
}
if
(
listeners
<
=
0
)
{
this
.
_unwatchAllTargets
(
)
;
}
}
async
_watchAllTargets
(
)
{
if
(
this
.
_isWatchingTargets
)
{
return
;
}
this
.
_isWatchingTargets
=
true
;
await
this
.
targetList
.
watchTargets
(
this
.
targetList
.
ALL_TYPES
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
;
}
async
_unwatchAllTargets
(
)
{
if
(
!
this
.
_isWatchingTargets
)
{
return
;
}
this
.
_isWatchingTargets
=
false
;
await
this
.
targetList
.
unwatchTargets
(
this
.
targetList
.
ALL_TYPES
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
;
}
async
_onTargetAvailable
(
{
type
targetFront
isTopLevel
}
)
{
for
(
const
resourceType
of
Object
.
values
(
ResourceWatcher
.
TYPES
)
)
{
if
(
!
this
.
_listenerCount
.
get
(
resourceType
)
)
{
continue
;
}
await
this
.
_watchResourcesForTarget
(
type
targetFront
isTopLevel
resourceType
)
;
}
}
_onTargetDestroyed
(
{
type
targetFront
}
)
{
}
_onResourceAvailable
(
targetFront
resourceType
resource
)
{
this
.
_availableListeners
.
emit
(
resourceType
{
resourceType
targetFront
resource
}
)
;
}
_onResourceDestroyed
(
targetFront
resourceType
resource
)
{
this
.
_destroyedListeners
.
emit
(
resourceType
{
resourceType
targetFront
resource
}
)
;
}
async
_startListening
(
resourceType
)
{
const
isDocumentEvent
=
resourceType
=
=
=
ResourceWatcher
.
TYPES
.
DOCUMENT_EVENTS
;
let
listeners
=
this
.
_listenerCount
.
get
(
resourceType
)
|
|
0
;
listeners
+
+
;
if
(
listeners
>
1
)
{
if
(
isDocumentEvent
)
{
this
.
_listenerCount
.
set
(
resourceType
listeners
)
;
return
;
}
throw
new
Error
(
The
ResourceWatcher
is
already
listening
to
"
{
resourceType
}
"
+
"
the
client
should
call
watch
only
once
per
resource
type
.
"
)
;
}
const
wasListening
=
this
.
_previouslyListenedTypes
.
has
(
resourceType
)
;
if
(
wasListening
&
&
!
isDocumentEvent
)
{
throw
new
Error
(
The
ResourceWatcher
previously
watched
"
{
resourceType
}
"
+
"
and
doesn
'
t
support
watching
again
on
a
previous
resource
.
"
)
;
}
this
.
_listenerCount
.
set
(
resourceType
listeners
)
;
this
.
_previouslyListenedTypes
.
add
(
resourceType
)
;
const
promises
=
[
]
;
for
(
const
targetType
of
this
.
targetList
.
ALL_TYPES
)
{
for
(
const
target
of
this
.
targetList
.
getAllTargets
(
targetType
)
)
{
promises
.
push
(
this
.
_watchResourcesForTarget
(
targetType
target
target
=
=
this
.
targetList
.
targetFront
resourceType
)
)
;
}
}
await
Promise
.
all
(
promises
)
;
}
_watchResourcesForTarget
(
targetType
targetFront
isTopLevel
resourceType
)
{
const
onAvailable
=
this
.
_onResourceAvailable
.
bind
(
this
targetFront
resourceType
)
;
return
LegacyListeners
[
resourceType
]
(
{
targetList
:
this
.
targetList
targetType
targetFront
isTopLevel
isFissionEnabledOnContentToolbox
:
this
.
contentToolboxFissionPrefValue
onAvailable
}
)
;
}
_stopListening
(
resourceType
)
{
let
listeners
=
this
.
_listenerCount
.
get
(
resourceType
)
;
if
(
!
listeners
|
|
listeners
<
=
0
)
{
throw
new
Error
(
Stopped
listening
for
resource
'
{
resourceType
}
'
that
isn
'
t
being
listened
to
)
;
}
listeners
-
-
;
this
.
_listenerCount
.
set
(
resourceType
listeners
)
;
if
(
listeners
>
0
)
{
return
;
}
for
(
const
targetType
of
this
.
targetList
.
ALL_TYPES
)
{
for
(
const
target
of
this
.
targetList
.
getAllTargets
(
targetType
)
)
{
this
.
_unwatchResourcesForTarget
(
targetType
target
resourceType
)
;
}
}
}
_unwatchResourcesForTarget
(
targetType
targetFront
resourceType
)
{
}
}
ResourceWatcher
.
TYPES
=
ResourceWatcher
.
prototype
.
TYPES
=
{
CONSOLE_MESSAGES
:
"
console
-
messages
"
ERROR_MESSAGES
:
"
error
-
messages
"
PLATFORM_MESSAGES
:
"
platform
-
messages
"
DOCUMENT_EVENTS
:
"
document
-
events
"
ROOT_NODE
:
"
root
-
node
"
}
;
module
.
exports
=
{
ResourceWatcher
}
;
const
LegacyListeners
=
{
[
ResourceWatcher
.
TYPES
.
CONSOLE_MESSAGES
]
:
require
(
"
devtools
/
shared
/
resources
/
legacy
-
listeners
/
console
-
messages
"
)
[
ResourceWatcher
.
TYPES
.
ERROR_MESSAGES
]
:
require
(
"
devtools
/
shared
/
resources
/
legacy
-
listeners
/
error
-
messages
"
)
[
ResourceWatcher
.
TYPES
.
PLATFORM_MESSAGES
]
:
require
(
"
devtools
/
shared
/
resources
/
legacy
-
listeners
/
platform
-
messages
"
)
async
[
ResourceWatcher
.
TYPES
.
DOCUMENT_EVENTS
]
(
{
targetList
targetType
targetFront
isTopLevel
onAvailable
}
)
{
if
(
!
isTopLevel
)
{
return
;
}
const
webConsoleFront
=
await
targetFront
.
getFront
(
"
console
"
)
;
webConsoleFront
.
on
(
"
documentEvent
"
onAvailable
)
;
await
webConsoleFront
.
startListeners
(
[
"
DocumentEvents
"
]
)
;
}
[
ResourceWatcher
.
TYPES
.
ROOT_NODE
]
:
require
(
"
devtools
/
shared
/
resources
/
legacy
-
listeners
/
root
-
node
"
)
}
;
