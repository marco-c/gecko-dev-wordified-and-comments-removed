"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
BROWSERTOOLBOX_FISSION_ENABLED
=
"
devtools
.
browsertoolbox
.
fission
"
;
const
CONTENTTOOLBOX_FISSION_ENABLED
=
"
devtools
.
contenttoolbox
.
fission
"
;
class
LegacyImplementationProcesses
{
constructor
(
rootFront
target
onTargetAvailable
onTargetDestroyed
)
{
this
.
rootFront
=
rootFront
;
this
.
target
=
target
;
this
.
onTargetAvailable
=
onTargetAvailable
;
this
.
onTargetDestroyed
=
onTargetDestroyed
;
this
.
descriptors
=
new
Set
(
)
;
this
.
_processListChanged
=
this
.
_processListChanged
.
bind
(
this
)
;
}
async
_processListChanged
(
)
{
const
{
processes
}
=
await
this
.
rootFront
.
listProcesses
(
)
;
for
(
const
descriptor
of
this
.
descriptors
)
{
if
(
!
processes
.
includes
(
descriptor
)
)
{
const
target
=
descriptor
.
getCachedTarget
(
)
;
if
(
target
)
{
this
.
onTargetDestroyed
(
target
)
;
}
descriptor
.
destroy
(
)
;
this
.
descriptors
.
delete
(
descriptor
)
;
}
}
for
(
const
descriptor
of
processes
)
{
if
(
!
this
.
descriptors
.
has
(
descriptor
)
)
{
this
.
descriptors
.
add
(
descriptor
)
;
const
target
=
await
descriptor
.
getTarget
(
)
;
if
(
!
target
)
{
console
.
error
(
"
Wasn
'
t
able
to
retrieve
the
target
for
"
descriptor
.
actorID
)
;
return
;
}
await
this
.
onTargetAvailable
(
target
)
;
}
}
}
async
listen
(
)
{
this
.
rootFront
.
on
(
"
processListChanged
"
this
.
_processListChanged
)
;
await
this
.
_processListChanged
(
)
;
}
unlisten
(
)
{
this
.
rootFront
.
off
(
"
processListChanged
"
this
.
_processListChanged
)
;
}
}
class
LegacyImplementationFrames
{
constructor
(
rootFront
target
onTargetAvailable
)
{
this
.
rootFront
=
rootFront
;
this
.
target
=
target
;
this
.
onTargetAvailable
=
onTargetAvailable
;
}
async
listen
(
)
{
const
{
frames
}
=
await
this
.
target
.
listRemoteFrames
(
)
;
for
(
const
frame
of
frames
)
{
if
(
frame
.
parentID
=
=
this
.
target
.
browsingContextID
|
|
frame
.
id
=
=
this
.
target
.
browsingContextID
)
{
const
target
=
await
frame
.
getTarget
(
)
;
if
(
!
target
)
{
console
.
error
(
"
Wasn
'
t
able
to
retrieve
the
target
for
"
frame
.
actorID
)
;
continue
;
}
await
this
.
onTargetAvailable
(
target
)
;
}
}
}
unlisten
(
)
{
}
}
class
LegacyImplementationWorkers
{
constructor
(
rootFront
target
onTargetAvailable
onTargetDestroyed
)
{
this
.
rootFront
=
rootFront
;
this
.
target
=
target
;
this
.
onTargetAvailable
=
onTargetAvailable
;
this
.
onTargetDestroyed
=
onTargetDestroyed
;
this
.
targets
=
new
Set
(
)
;
this
.
_workerListChanged
=
this
.
_workerListChanged
.
bind
(
this
)
;
}
async
_workerListChanged
(
)
{
const
{
workers
}
=
await
this
.
target
.
listWorkers
(
)
;
for
(
const
target
of
this
.
targets
)
{
if
(
!
workers
.
includes
(
target
)
)
{
this
.
onTargetDestroyed
(
target
)
;
target
.
destroy
(
)
;
this
.
targets
.
delete
(
target
)
;
}
}
for
(
const
target
of
workers
)
{
if
(
!
this
.
targets
.
has
(
target
)
)
{
this
.
targets
.
add
(
target
)
;
await
this
.
onTargetAvailable
(
target
)
;
}
}
}
async
listen
(
)
{
this
.
target
.
on
(
"
workerListChanged
"
this
.
_workerListChanged
)
;
await
this
.
_workerListChanged
(
)
;
}
unlisten
(
)
{
this
.
target
.
off
(
"
workerListChanged
"
this
.
_workerListChanged
)
;
}
}
class
TargetList
{
constructor
(
rootFront
targetFront
)
{
this
.
rootFront
=
rootFront
;
this
.
targetFront
=
targetFront
;
this
.
_listenersStarted
=
new
Set
(
)
;
this
.
_targets
=
new
Set
(
)
;
this
.
_targets
.
add
(
targetFront
)
;
this
.
_createListeners
=
new
EventEmitter
(
)
;
this
.
_destroyListeners
=
new
EventEmitter
(
)
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
this
.
legacyImplementation
=
{
process
:
new
LegacyImplementationProcesses
(
this
.
rootFront
this
.
targetFront
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
frame
:
new
LegacyImplementationFrames
(
this
.
rootFront
this
.
targetFront
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
worker
:
new
LegacyImplementationWorkers
(
this
.
rootFront
this
.
targetFront
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
}
;
this
.
listenForWorkers
=
false
;
}
async
_onTargetAvailable
(
targetFront
isTargetSwitching
=
false
)
{
if
(
this
.
_targets
.
has
(
targetFront
)
)
{
if
(
targetFront
!
=
this
.
targetFront
)
{
console
.
error
(
"
Target
is
already
registered
in
the
TargetList
"
targetFront
.
actorID
)
;
}
return
;
}
this
.
_targets
.
add
(
targetFront
)
;
const
targetType
=
this
.
_getTargetType
(
targetFront
)
;
await
this
.
_createListeners
.
emitAsync
(
targetType
{
type
:
targetType
targetFront
isTopLevel
:
targetFront
=
=
this
.
targetFront
isTargetSwitching
}
)
;
}
_onTargetDestroyed
(
targetFront
isTargetSwitching
=
false
)
{
const
targetType
=
this
.
_getTargetType
(
targetFront
)
;
this
.
_destroyListeners
.
emit
(
targetType
{
type
:
targetType
targetFront
isTopLevel
:
targetFront
=
=
this
.
targetFront
isTargetSwitching
}
)
;
this
.
_targets
.
delete
(
targetFront
)
;
}
_setListening
(
type
value
)
{
if
(
value
)
{
this
.
_listenersStarted
.
add
(
type
)
;
}
else
{
this
.
_listenersStarted
.
delete
(
type
)
;
}
}
_isListening
(
type
)
{
return
this
.
_listenersStarted
.
has
(
type
)
;
}
async
startListening
(
)
{
let
types
=
[
]
;
if
(
this
.
targetFront
.
isParentProcess
)
{
const
fissionBrowserToolboxEnabled
=
Services
.
prefs
.
getBoolPref
(
BROWSERTOOLBOX_FISSION_ENABLED
)
;
if
(
fissionBrowserToolboxEnabled
)
{
types
=
TargetList
.
ALL_TYPES
;
}
}
else
if
(
this
.
targetFront
.
isLocalTab
)
{
const
fissionContentToolboxEnabled
=
Services
.
prefs
.
getBoolPref
(
CONTENTTOOLBOX_FISSION_ENABLED
)
;
if
(
fissionContentToolboxEnabled
)
{
types
=
[
TargetList
.
TYPES
.
FRAME
]
;
}
}
if
(
this
.
listenForWorkers
&
&
!
types
.
includes
(
TargetList
.
TYPES
.
WORKER
)
)
{
types
.
push
(
TargetList
.
TYPES
.
WORKER
)
;
}
for
(
const
type
of
types
)
{
if
(
this
.
_isListening
(
type
)
)
{
continue
;
}
this
.
_setListening
(
type
true
)
;
if
(
this
.
legacyImplementation
[
type
]
)
{
await
this
.
legacyImplementation
[
type
]
.
listen
(
)
;
}
else
{
throw
new
Error
(
Unsupported
target
type
'
{
type
}
'
)
;
}
}
}
stopListening
(
)
{
for
(
const
type
of
TargetList
.
ALL_TYPES
)
{
if
(
!
this
.
_isListening
(
type
)
)
{
continue
;
}
this
.
_setListening
(
type
false
)
;
if
(
this
.
legacyImplementation
[
type
]
)
{
this
.
legacyImplementation
[
type
]
.
unlisten
(
)
;
}
else
{
throw
new
Error
(
Unsupported
target
type
'
{
type
}
'
)
;
}
}
}
_getTargetType
(
target
)
{
const
{
typeName
}
=
target
;
if
(
typeName
=
=
"
browsingContextTarget
"
)
{
return
TargetList
.
TYPES
.
FRAME
;
}
else
if
(
typeName
=
=
"
contentProcessTarget
"
|
|
typeName
=
=
"
parentProcessTarget
"
)
{
return
TargetList
.
TYPES
.
PROCESS
;
}
else
if
(
typeName
=
=
"
workerTarget
"
)
{
return
TargetList
.
TYPES
.
WORKER
;
}
throw
new
Error
(
"
Unsupported
target
typeName
:
"
+
typeName
)
;
}
_matchTargetType
(
type
target
)
{
return
type
=
=
=
this
.
_getTargetType
(
target
)
;
}
async
watchTargets
(
types
onAvailable
onDestroy
)
{
if
(
typeof
onAvailable
!
=
"
function
"
)
{
throw
new
Error
(
"
TargetList
.
watchTargets
expects
a
function
as
second
argument
"
)
;
}
for
(
const
type
of
types
)
{
for
(
const
targetFront
of
this
.
_targets
)
{
if
(
this
.
_matchTargetType
(
type
targetFront
)
)
{
try
{
await
onAvailable
(
{
type
targetFront
isTopLevel
:
targetFront
=
=
this
.
targetFront
isTargetSwitching
:
false
}
)
;
}
catch
(
e
)
{
console
.
error
(
"
Exception
when
calling
onAvailable
handler
"
e
.
message
e
)
;
}
}
}
this
.
_createListeners
.
on
(
type
onAvailable
)
;
if
(
onDestroy
)
{
this
.
_destroyListeners
.
on
(
type
onDestroy
)
;
}
}
}
async
unwatchTargets
(
types
onAvailable
onDestroy
)
{
if
(
typeof
onAvailable
!
=
"
function
"
)
{
throw
new
Error
(
"
TargetList
.
unwatchTargets
expects
a
function
as
second
argument
"
)
;
}
for
(
const
type
of
types
)
{
this
.
_createListeners
.
off
(
type
onAvailable
)
;
if
(
onDestroy
)
{
this
.
_destroyListeners
.
off
(
type
onDestroy
)
;
}
}
}
getAllTargets
(
type
)
{
if
(
!
type
)
{
throw
new
Error
(
"
getAllTargets
expects
a
'
type
'
argument
"
)
;
}
const
targets
=
[
.
.
.
this
.
_targets
]
.
filter
(
target
=
>
this
.
_matchTargetType
(
type
target
)
)
;
return
targets
;
}
async
getAllFronts
(
targetType
frontType
)
{
const
fronts
=
[
]
;
const
targets
=
this
.
getAllTargets
(
targetType
)
;
for
(
const
target
of
targets
)
{
const
front
=
await
target
.
getFront
(
frontType
)
;
fronts
.
push
(
front
)
;
}
return
fronts
;
}
async
switchToTarget
(
newTarget
)
{
for
(
const
target
of
this
.
_targets
)
{
const
isTargetSwitching
=
target
=
=
this
.
targetFront
;
this
.
_onTargetDestroyed
(
target
isTargetSwitching
)
;
}
this
.
stopListening
(
)
;
this
.
_targets
.
clear
(
)
;
this
.
targetFront
=
newTarget
;
await
this
.
_onTargetAvailable
(
newTarget
true
)
;
await
this
.
startListening
(
)
;
}
}
TargetList
.
TYPES
=
TargetList
.
prototype
.
TYPES
=
{
PROCESS
:
"
process
"
FRAME
:
"
frame
"
WORKER
:
"
worker
"
}
;
TargetList
.
ALL_TYPES
=
TargetList
.
prototype
.
ALL_TYPES
=
Object
.
values
(
TargetList
.
TYPES
)
;
module
.
exports
=
{
TargetList
}
;
