"
use
strict
"
;
const
{
ResourceWatcher
}
=
require
(
"
devtools
/
shared
/
resources
/
resource
-
watcher
"
)
;
module
.
exports
=
async
function
(
{
targetList
targetFront
onAvailable
}
)
{
const
isAllowed
=
targetFront
.
isTopLevel
|
|
targetFront
.
targetType
=
=
=
targetList
.
TYPES
.
PROCESS
;
if
(
!
isAllowed
)
{
return
;
}
const
webConsoleFront
=
await
targetFront
.
getFront
(
"
console
"
)
;
await
webConsoleFront
.
startListeners
(
[
"
PageError
"
]
)
;
let
{
messages
}
=
await
webConsoleFront
.
getCachedMessages
(
[
webConsoleFront
.
traits
.
newCacheStructure
?
"
LogMessage
"
:
"
PageError
"
]
)
;
messages
=
messages
.
filter
(
message
=
>
{
return
(
webConsoleFront
.
traits
.
newCacheStructure
|
|
message
.
_type
=
=
=
"
LogMessage
"
)
;
}
)
;
for
(
const
message
of
messages
)
{
if
(
message
.
_type
)
{
delete
message
.
_type
;
}
message
.
resourceType
=
ResourceWatcher
.
TYPES
.
PLATFORM_MESSAGE
;
}
onAvailable
(
messages
)
;
webConsoleFront
.
on
(
"
logMessage
"
message
=
>
{
message
.
resourceType
=
ResourceWatcher
.
TYPES
.
PLATFORM_MESSAGE
;
onAvailable
(
[
message
]
)
;
}
)
;
}
;
