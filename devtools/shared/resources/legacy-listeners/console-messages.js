"
use
strict
"
;
const
{
ResourceWatcher
}
=
require
(
"
devtools
/
shared
/
resources
/
resource
-
watcher
"
)
;
module
.
exports
=
async
function
(
{
targetCommand
targetFront
onAvailable
}
)
{
const
listenForFrames
=
targetCommand
.
descriptorFront
.
isLocalTab
;
const
listenForWorkers
=
!
targetCommand
.
rootFront
.
traits
.
workerConsoleApiMessagesDispatchedToMainThread
;
const
acceptTarget
=
targetFront
.
isTopLevel
|
|
targetFront
.
targetType
=
=
=
targetCommand
.
TYPES
.
PROCESS
|
|
(
targetFront
.
targetType
=
=
=
targetCommand
.
TYPES
.
FRAME
&
&
listenForFrames
)
|
|
(
targetFront
.
targetType
=
=
=
targetCommand
.
TYPES
.
WORKER
&
&
listenForWorkers
)
;
if
(
!
acceptTarget
)
{
return
;
}
const
webConsoleFront
=
await
targetFront
.
getFront
(
"
console
"
)
;
if
(
webConsoleFront
.
isDestroyed
(
)
)
{
return
;
}
await
webConsoleFront
.
startListeners
(
[
"
ConsoleAPI
"
]
)
;
const
{
messages
}
=
await
webConsoleFront
.
getCachedMessages
(
[
"
ConsoleAPI
"
]
)
;
for
(
const
message
of
messages
)
{
message
.
resourceType
=
ResourceWatcher
.
TYPES
.
CONSOLE_MESSAGE
;
}
onAvailable
(
messages
)
;
webConsoleFront
.
on
(
"
consoleAPICall
"
message
=
>
{
if
(
message
.
clonedFromContentProcess
)
{
return
;
}
message
.
resourceType
=
ResourceWatcher
.
TYPES
.
CONSOLE_MESSAGE
;
onAvailable
(
[
message
]
)
;
}
)
;
}
;
