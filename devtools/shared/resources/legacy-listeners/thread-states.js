"
use
strict
"
;
const
{
ResourceWatcher
}
=
require
(
"
devtools
/
shared
/
resources
/
resource
-
watcher
"
)
;
module
.
exports
=
async
function
(
{
targetList
targetFront
onAvailable
}
)
{
const
isBrowserToolbox
=
targetList
.
targetFront
.
isParentProcess
;
const
isNonTopLevelFrameTarget
=
!
targetFront
.
isTopLevel
&
&
targetFront
.
targetType
=
=
=
targetList
.
TYPES
.
FRAME
;
if
(
isBrowserToolbox
&
&
isNonTopLevelFrameTarget
)
{
return
;
}
await
targetFront
.
onThreadAttached
;
if
(
targetFront
.
isDestroyed
(
)
)
{
return
;
}
const
threadFront
=
await
targetFront
.
getFront
(
"
thread
"
)
;
let
isInterrupted
=
false
;
const
onPausedPacket
=
packet
=
>
{
const
{
why
}
=
packet
;
if
(
why
.
type
=
=
=
"
interrupted
"
&
&
!
why
.
onNext
)
{
isInterrupted
=
true
;
return
;
}
if
(
why
.
type
=
=
"
alreadyPaused
"
|
|
why
.
type
=
=
"
attached
"
)
{
return
;
}
onAvailable
(
[
{
resourceType
:
ResourceWatcher
.
TYPES
.
THREAD_STATE
state
:
"
paused
"
why
frame
:
packet
.
frame
}
]
)
;
}
;
threadFront
.
on
(
"
paused
"
onPausedPacket
)
;
threadFront
.
on
(
"
resumed
"
packet
=
>
{
if
(
isInterrupted
)
{
isInterrupted
=
false
;
return
;
}
onAvailable
(
[
{
resourceType
:
ResourceWatcher
.
TYPES
.
THREAD_STATE
state
:
"
resumed
"
}
]
)
;
}
)
;
const
pausedPacket
=
threadFront
.
getLastPausePacket
(
)
;
if
(
pausedPacket
)
{
onPausedPacket
(
pausedPacket
)
;
}
}
;
