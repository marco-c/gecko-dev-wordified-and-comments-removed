"
use
strict
"
;
const
{
ResourceWatcher
}
=
require
(
"
devtools
/
shared
/
resources
/
resource
-
watcher
"
)
;
module
.
exports
=
async
function
(
{
targetFront
onAvailable
onUpdated
}
)
{
if
(
!
targetFront
.
hasActor
(
"
styleSheets
"
)
)
{
return
;
}
const
onStyleSheetAdded
=
async
(
styleSheet
isNew
fileName
)
=
>
{
const
onMediaRules
=
styleSheet
.
getMediaRules
(
)
;
const
resource
=
toResource
(
styleSheet
isNew
fileName
)
;
styleSheet
.
on
(
"
style
-
applied
"
(
)
=
>
{
onUpdated
(
[
{
resourceType
:
resource
.
resourceType
resourceId
:
resource
.
resourceId
updateType
:
"
style
-
applied
"
}
]
)
;
}
)
;
styleSheet
.
on
(
"
property
-
change
"
(
property
value
)
=
>
{
onUpdated
(
[
{
resourceType
:
resource
.
resourceType
resourceId
:
resource
.
resourceId
updateType
:
"
property
-
change
"
resourceUpdates
:
{
[
property
]
:
value
}
}
]
)
;
}
)
;
styleSheet
.
on
(
"
media
-
rules
-
changed
"
mediaRules
=
>
{
onUpdated
(
[
{
resourceType
:
resource
.
resourceType
resourceId
:
resource
.
resourceId
updateType
:
"
media
-
rules
-
changed
"
resourceUpdates
:
{
mediaRules
}
}
]
)
;
}
)
;
try
{
resource
.
mediaRules
=
await
onMediaRules
;
}
catch
(
e
)
{
console
.
warn
(
"
fetching
media
rules
failed
"
e
)
;
}
return
resource
;
}
;
const
styleSheetsFront
=
await
targetFront
.
getFront
(
"
stylesheets
"
)
;
try
{
const
styleSheets
=
await
styleSheetsFront
.
getStyleSheets
(
)
;
onAvailable
(
await
Promise
.
all
(
styleSheets
.
map
(
styleSheet
=
>
onStyleSheetAdded
(
styleSheet
false
null
)
)
)
)
;
styleSheetsFront
.
on
(
"
stylesheet
-
added
"
async
(
styleSheet
isNew
fileName
)
=
>
{
onAvailable
(
[
await
onStyleSheetAdded
(
styleSheet
isNew
fileName
)
]
)
;
}
)
;
}
catch
(
e
)
{
console
.
warn
(
"
fetching
stylesheets
failed
"
e
)
;
}
}
;
function
toResource
(
styleSheet
isNew
fileName
)
{
Object
.
assign
(
styleSheet
{
resourceId
:
styleSheet
.
actorID
resourceType
:
ResourceWatcher
.
TYPES
.
STYLESHEET
isNew
fileName
}
)
;
return
styleSheet
;
}
