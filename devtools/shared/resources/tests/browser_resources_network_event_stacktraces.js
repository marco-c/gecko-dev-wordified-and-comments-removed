"
use
strict
"
;
const
{
ResourceWatcher
}
=
require
(
"
devtools
/
shared
/
resources
/
resource
-
watcher
"
)
;
const
TEST_URI
=
{
URL_ROOT_SSL
}
network_document
.
html
;
const
REQUEST_STUB
=
{
code
:
await
fetch
(
"
/
request_post_0
.
html
"
{
method
:
"
POST
"
}
)
;
expected
:
{
stacktraceAvailable
:
true
lastFrame
:
{
filename
:
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
shared
/
resources
/
tests
/
network_document
.
html
"
lineNumber
:
1
columnNumber
:
40
functionName
:
"
triggerRequest
"
asyncCause
:
null
}
}
}
;
add_task
(
async
function
(
)
{
info
(
"
Test
network
stacktraces
events
legacy
listener
"
)
;
await
pushPref
(
"
devtools
.
testing
.
enableServerWatcherSupport
"
false
)
;
await
testNetworkEventStackTraceResources
(
REQUEST_STUB
)
;
}
)
;
async
function
testNetworkEventStackTraceResources
(
requestStub
)
{
const
tab
=
await
addTab
(
TEST_URI
)
;
const
{
client
resourceWatcher
targetList
}
=
await
initResourceWatcher
(
tab
)
;
const
networkEvents
=
new
Map
(
)
;
const
stackTraces
=
new
Map
(
)
;
function
onResourceAvailable
(
resources
)
{
for
(
const
resource
of
resources
)
{
if
(
resource
.
resourceType
=
=
=
ResourceWatcher
.
TYPES
.
NETWORK_EVENT_STACKTRACE
)
{
ok
(
!
networkEvents
.
has
(
resource
.
channelId
)
"
The
network
event
does
not
exist
"
)
;
is
(
resource
.
stacktrace
requestStub
.
expected
.
stacktrace
"
The
stacktrace
is
available
"
)
;
is
(
JSON
.
stringify
(
resource
.
lastFrame
)
JSON
.
stringify
(
requestStub
.
expected
.
lastFrame
)
"
The
last
frame
of
the
stacktrace
is
available
"
)
;
stackTraces
.
set
(
resource
.
channelId
true
)
;
return
;
}
if
(
resource
.
resourceType
=
=
=
ResourceWatcher
.
TYPES
.
NETWORK_EVENT
)
{
ok
(
stackTraces
.
has
(
resource
.
resourceId
)
"
The
stack
trace
exists
"
)
;
networkEvents
.
set
(
resource
.
resourceId
true
)
;
}
}
}
function
onResourceUpdated
(
)
{
}
await
resourceWatcher
.
watchResources
(
[
ResourceWatcher
.
TYPES
.
NETWORK_EVENT_STACKTRACE
ResourceWatcher
.
TYPES
.
NETWORK_EVENT
]
{
onAvailable
:
onResourceAvailable
onUpdated
:
onResourceUpdated
}
)
;
await
triggerNetworkRequests
(
tab
.
linkedBrowser
[
requestStub
.
code
]
)
;
resourceWatcher
.
unwatchResources
(
[
ResourceWatcher
.
TYPES
.
NETWORK_EVENT_STACKTRACE
ResourceWatcher
.
TYPES
.
NETWORK_EVENT
]
{
onAvailable
:
onResourceAvailable
onUpdated
:
onResourceUpdated
}
)
;
await
targetList
.
destroy
(
)
;
await
client
.
close
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
