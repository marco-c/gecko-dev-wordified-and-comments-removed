"
use
strict
"
;
const
{
TargetList
}
=
require
(
"
devtools
/
shared
/
resources
/
target
-
list
"
)
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
<
div
id
=
"
test
"
>
<
/
div
>
)
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browsertoolbox
.
fission
"
true
)
;
await
pushPref
(
"
dom
.
ipc
.
processPrelaunch
.
enabled
"
false
)
;
await
pushPref
(
"
dom
.
ipc
.
keepProcessesAlive
.
web
"
1
)
;
const
client
=
await
createLocalClient
(
)
;
const
mainRoot
=
client
.
mainRoot
;
const
targetDescriptor
=
await
mainRoot
.
getMainProcess
(
)
;
const
mainProcess
=
await
targetDescriptor
.
getTarget
(
)
;
const
targetList
=
new
TargetList
(
mainRoot
mainProcess
)
;
await
targetList
.
startListening
(
)
;
await
testProcesses
(
targetList
mainProcess
)
;
await
targetList
.
stopListening
(
)
;
await
client
.
close
(
)
;
}
)
;
async
function
testProcesses
(
targetList
target
)
{
info
(
"
Test
TargetList
against
processes
"
)
;
const
originalProcessesCount
=
Services
.
ppmm
.
childCount
-
1
;
const
processes
=
await
targetList
.
getAllTargets
(
TargetList
.
TYPES
.
PROCESS
)
;
is
(
processes
.
length
originalProcessesCount
"
Get
a
target
for
all
content
processes
"
)
;
const
processes2
=
await
targetList
.
getAllTargets
(
TargetList
.
TYPES
.
PROCESS
)
;
is
(
processes2
.
length
originalProcessesCount
"
retrieved
the
same
number
of
processes
"
)
;
function
sortFronts
(
f1
f2
)
{
return
f1
.
actorID
<
f2
.
actorID
;
}
processes
.
sort
(
sortFronts
)
;
processes2
.
sort
(
sortFronts
)
;
for
(
let
i
=
0
;
i
<
processes
.
length
;
i
+
+
)
{
is
(
processes
[
i
]
processes2
[
i
]
process
{
i
}
targets
are
the
same
)
;
}
const
targets
=
new
Set
(
)
;
const
onAvailable
=
(
{
targetFront
}
)
=
>
{
if
(
targets
.
has
(
targetFront
)
)
{
ok
(
false
"
The
same
target
is
notified
multiple
times
via
onAvailable
"
)
;
}
is
(
targetFront
.
targetType
TargetList
.
TYPES
.
PROCESS
"
We
are
only
notified
about
process
targets
"
)
;
ok
(
targetFront
=
=
target
?
targetFront
.
isTopLevel
:
!
targetFront
.
isTopLevel
"
isTopLevel
property
is
correct
"
)
;
targets
.
add
(
targetFront
)
;
}
;
const
onDestroyed
=
(
{
targetFront
}
)
=
>
{
if
(
!
targets
.
has
(
targetFront
)
)
{
ok
(
false
"
A
target
is
declared
destroyed
via
onDestroyed
without
being
notified
via
onAvailable
"
)
;
}
is
(
targetFront
.
targetType
TargetList
.
TYPES
.
PROCESS
"
We
are
only
notified
about
process
targets
"
)
;
ok
(
!
targetFront
.
isTopLevel
"
We
are
never
notified
about
the
top
level
target
destruction
"
)
;
targets
.
delete
(
targetFront
)
;
}
;
await
targetList
.
watchTargets
(
[
TargetList
.
TYPES
.
PROCESS
]
onAvailable
onDestroyed
)
;
is
(
targets
.
size
originalProcessesCount
"
retrieved
the
same
number
of
processes
via
watchTargets
"
)
;
for
(
let
i
=
0
;
i
<
processes
.
length
;
i
+
+
)
{
ok
(
targets
.
has
(
processes
[
i
]
)
process
{
i
}
targets
are
the
same
via
watchTargets
)
;
}
const
previousTargets
=
new
Set
(
targets
)
;
const
onProcessCreated
=
new
Promise
(
resolve
=
>
{
const
onAvailable2
=
(
{
targetFront
}
)
=
>
{
if
(
previousTargets
.
has
(
targetFront
)
)
{
return
;
}
targetList
.
unwatchTargets
(
[
TargetList
.
TYPES
.
PROCESS
]
onAvailable2
)
;
resolve
(
targetFront
)
;
}
;
targetList
.
watchTargets
(
[
TargetList
.
TYPES
.
PROCESS
]
onAvailable2
)
;
}
)
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
TEST_URL
forceNewProcess
:
true
}
)
;
const
createdTarget
=
await
onProcessCreated
;
ok
(
targets
.
has
(
createdTarget
)
"
The
new
tab
process
is
in
the
list
"
)
;
const
processCountAfterTabOpen
=
targets
.
size
;
const
onProcessDestroyed
=
new
Promise
(
resolve
=
>
{
const
onAvailable3
=
(
)
=
>
{
}
;
const
onDestroyed3
=
(
{
targetFront
}
)
=
>
{
resolve
(
targetFront
)
;
targetList
.
unwatchTargets
(
[
TargetList
.
TYPES
.
PROCESS
]
onAvailable3
onDestroyed3
)
;
}
;
targetList
.
watchTargets
(
[
TargetList
.
TYPES
.
PROCESS
]
onAvailable3
onDestroyed3
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
const
destroyedTarget
=
await
onProcessDestroyed
;
is
(
targets
.
size
processCountAfterTabOpen
-
1
"
The
closed
tab
'
s
process
has
been
reported
as
destroyed
"
)
;
ok
(
!
targets
.
has
(
destroyedTarget
)
"
The
destroyed
target
is
no
longer
in
the
list
"
)
;
is
(
destroyedTarget
createdTarget
"
The
destroyed
target
is
the
one
that
has
been
reported
as
created
"
)
;
await
targetList
.
unwatchTargets
(
[
TargetList
.
TYPES
.
PROCESS
]
onAvailable
onDestroyed
)
;
const
processes3
=
await
targetList
.
getAllTargets
(
TargetList
.
TYPES
.
PROCESS
)
;
is
(
processes3
.
length
processCountAfterTabOpen
-
1
"
getAllTargets
reports
a
new
target
"
)
;
}
