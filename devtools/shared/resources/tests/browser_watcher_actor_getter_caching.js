"
use
strict
"
;
const
{
TargetList
}
=
require
(
"
devtools
/
shared
/
resources
/
target
-
list
"
)
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
Actor
caching
test
"
;
add_task
(
async
function
(
)
{
info
(
"
Setup
the
test
page
with
workers
of
all
types
"
)
;
const
client
=
await
createLocalClient
(
)
;
const
tab
=
await
addTab
(
TEST_URL
)
;
info
(
"
Create
a
target
list
for
a
tab
target
"
)
;
const
descriptor
=
await
client
.
mainRoot
.
getTab
(
{
tab
}
)
;
const
targetList
=
new
TargetList
(
descriptor
)
;
await
targetList
.
startListening
(
)
;
const
{
watcherFront
}
=
targetList
;
ok
(
watcherFront
"
A
watcherFront
is
available
on
targetList
"
)
;
info
(
"
Check
that
getNetworkParentActor
does
not
create
duplicate
actors
"
)
;
testActorGetter
(
watcherFront
(
)
=
>
watcherFront
.
getNetworkParentActor
(
)
"
networkParent
"
)
;
info
(
"
Check
that
getBreakpointListActor
does
not
create
duplicate
actors
"
)
;
testActorGetter
(
watcherFront
(
)
=
>
watcherFront
.
getBreakpointListActor
(
)
"
breakpoint
-
list
"
)
;
info
(
"
Check
that
getTargetConfigurationActor
does
not
create
duplicate
actors
"
)
;
testActorGetter
(
watcherFront
(
)
=
>
watcherFront
.
getTargetConfigurationActor
(
)
"
target
-
configuration
"
)
;
targetList
.
destroy
(
)
;
await
client
.
waitForRequestsToSettle
(
)
;
await
client
.
close
(
)
;
}
)
;
async
function
testActorGetter
(
watcherFront
actorGetterFn
typeName
)
{
checkPoolChildrenSize
(
watcherFront
typeName
0
)
;
const
actor
=
await
actorGetterFn
(
)
;
checkPoolChildrenSize
(
watcherFront
typeName
1
)
;
const
otherActor
=
await
actorGetterFn
(
)
;
is
(
actor
otherActor
"
Returned
the
same
actor
for
"
+
typeName
)
;
checkPoolChildrenSize
(
watcherFront
typeName
1
)
;
}
