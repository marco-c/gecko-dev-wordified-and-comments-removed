"
use
strict
"
;
add_task
(
async
function
(
)
{
const
tab
=
await
addTab
(
"
data
:
text
/
html
Test
"
)
;
const
{
client
resourceWatcher
targetCommand
}
=
await
initResourceCommand
(
tab
)
;
await
resourceWatcher
.
watchResources
(
[
resourceWatcher
.
TYPES
.
CONSOLE_MESSAGE
]
{
onAvailable
:
(
)
=
>
{
}
}
)
;
info
(
"
Spawn
a
content
task
in
order
to
be
able
to
manipulate
actors
and
resource
watchers
directly
"
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
[
]
function
(
)
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
TargetActorRegistry
}
=
require
(
"
devtools
/
server
/
actors
/
targets
/
target
-
actor
-
registry
.
jsm
"
)
;
const
{
getResourceWatcher
TYPES
}
=
require
(
"
devtools
/
server
/
actors
/
resources
/
index
"
)
;
const
targetActor
=
TargetActorRegistry
.
getTargetActor
(
content
.
browsingContext
.
browserId
)
;
const
watcher
=
getResourceWatcher
(
targetActor
TYPES
.
CONSOLE_MESSAGE
)
;
content
.
_testTargetActor
=
targetActor
;
is
(
!
!
watcher
true
"
The
console
message
resource
watcher
was
created
"
)
;
}
)
;
info
(
"
Close
the
client
which
will
destroy
the
target
"
)
;
targetCommand
.
destroy
(
)
;
await
client
.
close
(
)
;
info
(
"
Spawn
a
content
task
in
order
to
run
some
assertions
on
actors
and
resource
watchers
directly
"
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
[
]
function
(
)
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
getResourceWatcher
TYPES
}
=
require
(
"
devtools
/
server
/
actors
/
resources
/
index
"
)
;
ok
(
content
.
_testTargetActor
&
&
!
content
.
_testTargetActor
.
actorID
"
The
target
was
destroyed
when
the
client
was
closed
"
)
;
const
watcher
=
getResourceWatcher
(
content
.
_testTargetActor
TYPES
.
CONSOLE_MESSAGE
)
;
is
(
!
!
watcher
false
"
The
console
message
resource
watcher
isn
'
t
registered
anymore
after
the
target
was
destroyed
"
)
;
delete
content
.
_testTargetActor
;
}
)
;
}
)
;
