"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
const
{
DevToolsClient
}
=
require
(
"
devtools
/
client
/
devtools
-
client
"
)
;
const
{
DevToolsServer
}
=
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
async
function
createLocalClient
(
)
{
DevToolsServer
.
init
(
)
;
DevToolsServer
.
allowChromeProcess
=
true
;
if
(
!
DevToolsServer
.
createRootActor
)
{
DevToolsServer
.
registerAllActors
(
)
;
}
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
const
client
=
new
DevToolsClient
(
transport
)
;
await
client
.
connect
(
)
;
return
client
;
}
async
function
initResourceWatcherAndTarget
(
tab
)
{
const
{
TargetList
}
=
require
(
"
devtools
/
shared
/
resources
/
target
-
list
"
)
;
const
{
ResourceWatcher
}
=
require
(
"
devtools
/
shared
/
resources
/
resource
-
watcher
"
)
;
const
client
=
await
createLocalClient
(
)
;
let
descriptor
;
if
(
tab
)
{
descriptor
=
await
client
.
mainRoot
.
getTab
(
{
tab
}
)
;
}
else
{
descriptor
=
await
client
.
mainRoot
.
getMainProcess
(
)
;
}
const
target
=
await
descriptor
.
getTarget
(
)
;
const
targetList
=
new
TargetList
(
client
.
mainRoot
target
)
;
await
targetList
.
startListening
(
)
;
const
resourceWatcher
=
new
ResourceWatcher
(
targetList
)
;
return
{
client
resourceWatcher
targetList
}
;
}
function
checkObject
(
object
expected
)
{
if
(
object
&
&
object
.
getGrip
)
{
object
=
object
.
getGrip
(
)
;
}
for
(
const
name
of
Object
.
keys
(
expected
)
)
{
const
expectedValue
=
expected
[
name
]
;
const
value
=
object
[
name
]
;
checkValue
(
name
value
expectedValue
)
;
}
}
function
checkValue
(
name
value
expected
)
{
if
(
expected
=
=
=
null
)
{
ok
(
!
value
"
'
"
+
name
+
"
'
is
null
"
)
;
}
else
if
(
value
=
=
=
undefined
)
{
ok
(
false
"
'
"
+
name
+
"
'
is
undefined
"
)
;
}
else
if
(
value
=
=
=
null
)
{
ok
(
false
"
'
"
+
name
+
"
'
is
null
"
)
;
}
else
if
(
typeof
expected
=
=
"
string
"
|
|
typeof
expected
=
=
"
number
"
|
|
typeof
expected
=
=
"
boolean
"
)
{
is
(
value
expected
"
property
'
"
+
name
+
"
'
"
)
;
}
else
if
(
expected
instanceof
RegExp
)
{
ok
(
expected
.
test
(
value
)
name
+
"
:
"
+
expected
+
"
matched
"
+
value
)
;
}
else
if
(
Array
.
isArray
(
expected
)
)
{
info
(
"
checking
array
for
property
'
"
+
name
+
"
'
"
)
;
checkObject
(
value
expected
)
;
}
else
if
(
typeof
expected
=
=
"
object
"
)
{
info
(
"
checking
object
for
property
'
"
+
name
+
"
'
"
)
;
checkObject
(
value
expected
)
;
}
}
async
function
triggerError
(
browser
expression
)
{
await
ContentTask
.
spawn
(
browser
expression
function
frameScript
(
expr
)
{
const
document
=
content
.
document
;
const
container
=
document
.
createElement
(
"
script
"
)
;
document
.
body
.
appendChild
(
container
)
;
container
.
textContent
=
expr
;
container
.
remove
(
)
;
}
)
;
await
new
Promise
(
res
=
>
setTimeout
(
res
10
)
)
;
}
