"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
client
/
shared
/
test
/
shared
-
head
.
js
"
this
)
;
const
{
DevToolsClient
}
=
require
(
"
devtools
/
client
/
devtools
-
client
"
)
;
const
{
DevToolsServer
}
=
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
async
function
_initResourceWatcherFromCommands
(
commands
{
listenForWorkers
=
false
}
=
{
}
)
{
const
targetCommand
=
commands
.
targetCommand
;
if
(
listenForWorkers
)
{
targetCommand
.
listenForWorkers
=
true
;
}
await
targetCommand
.
startListening
(
)
;
return
{
client
:
commands
.
client
commands
resourceWatcher
:
commands
.
resourceCommand
targetCommand
}
;
}
async
function
initResourceWatcher
(
tab
options
)
{
const
commands
=
await
CommandsFactory
.
forTab
(
tab
)
;
return
_initResourceWatcherFromCommands
(
commands
options
)
;
}
async
function
initMultiProcessResourceWatcher
(
)
{
const
commands
=
await
CommandsFactory
.
forMainProcess
(
)
;
return
_initResourceWatcherFromCommands
(
commands
)
;
}
function
checkObject
(
object
expected
)
{
if
(
object
&
&
object
.
getGrip
)
{
object
=
object
.
getGrip
(
)
;
}
for
(
const
name
of
Object
.
keys
(
expected
)
)
{
const
expectedValue
=
expected
[
name
]
;
const
value
=
object
[
name
]
;
checkValue
(
name
value
expectedValue
)
;
}
}
function
checkValue
(
name
value
expected
)
{
if
(
expected
=
=
=
null
)
{
is
(
value
null
'
{
name
}
'
is
null
)
;
}
else
if
(
value
=
=
=
undefined
)
{
is
(
value
undefined
'
{
name
}
'
is
undefined
)
;
}
else
if
(
value
=
=
=
null
)
{
is
(
value
expected
'
{
name
}
'
has
expected
value
)
;
}
else
if
(
typeof
expected
=
=
"
string
"
|
|
typeof
expected
=
=
"
number
"
|
|
typeof
expected
=
=
"
boolean
"
)
{
is
(
value
expected
"
property
'
"
+
name
+
"
'
"
)
;
}
else
if
(
expected
instanceof
RegExp
)
{
ok
(
expected
.
test
(
value
)
name
+
"
:
"
+
expected
+
"
matched
"
+
value
)
;
}
else
if
(
Array
.
isArray
(
expected
)
)
{
info
(
"
checking
array
for
property
'
"
+
name
+
"
'
"
)
;
ok
(
Array
.
isArray
(
value
)
property
'
{
name
}
'
is
an
array
)
;
is
(
value
.
length
expected
.
length
"
Array
has
expected
length
"
)
;
if
(
value
.
length
!
=
=
expected
.
length
)
{
is
(
JSON
.
stringify
(
value
null
2
)
JSON
.
stringify
(
expected
null
2
)
)
;
}
else
{
checkObject
(
value
expected
)
;
}
}
else
if
(
typeof
expected
=
=
"
object
"
)
{
info
(
"
checking
object
for
property
'
"
+
name
+
"
'
"
)
;
checkObject
(
value
expected
)
;
}
}
async
function
triggerNetworkRequests
(
browser
commands
)
{
for
(
let
i
=
0
;
i
<
commands
.
length
;
i
+
+
)
{
await
SpecialPowers
.
spawn
(
browser
[
commands
[
i
]
]
async
function
(
code
)
{
const
script
=
content
.
document
.
createElement
(
"
script
"
)
;
script
.
append
(
content
.
document
.
createTextNode
(
async
function
triggerRequest
(
)
{
{
code
}
}
)
)
;
content
.
document
.
body
.
append
(
script
)
;
await
content
.
wrappedJSObject
.
triggerRequest
(
)
;
script
.
remove
(
)
;
}
)
;
}
}
