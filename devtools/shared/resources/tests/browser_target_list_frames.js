"
use
strict
"
;
const
{
TargetList
}
=
require
(
"
devtools
/
shared
/
resources
/
target
-
list
"
)
;
const
FISSION_TEST_URL
=
URL_ROOT_SSL
+
"
/
fission_document
.
html
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browsertoolbox
.
fission
"
true
)
;
await
pushPref
(
"
devtools
.
contenttoolbox
.
fission
"
true
)
;
await
pushPref
(
"
dom
.
ipc
.
processPrelaunch
.
enabled
"
false
)
;
await
pushPref
(
"
dom
.
ipc
.
keepProcessesAlive
.
web
"
1
)
;
const
client
=
await
createLocalClient
(
)
;
const
mainRoot
=
client
.
mainRoot
;
await
testBrowserFrames
(
mainRoot
)
;
await
testTabFrames
(
mainRoot
)
;
await
client
.
close
(
)
;
}
)
;
async
function
testBrowserFrames
(
mainRoot
)
{
info
(
"
Test
TargetList
against
frames
via
the
parent
process
target
"
)
;
const
targetDescriptor
=
await
mainRoot
.
getMainProcess
(
)
;
const
target
=
await
targetDescriptor
.
getTarget
(
)
;
const
targetList
=
new
TargetList
(
mainRoot
target
)
;
await
targetList
.
startListening
(
)
;
const
frames
=
await
targetList
.
getAllTargets
(
[
TargetList
.
TYPES
.
FRAME
]
)
;
const
hasBrowserDocument
=
frames
.
find
(
frameTarget
=
>
frameTarget
.
url
=
=
window
.
location
.
href
)
;
ok
(
hasBrowserDocument
"
retrieve
the
target
for
the
browser
document
"
)
;
const
frames2
=
await
targetList
.
getAllTargets
(
[
TargetList
.
TYPES
.
FRAME
]
)
;
is
(
frames2
.
length
frames
.
length
"
retrieved
the
same
number
of
frames
"
)
;
function
sortFronts
(
f1
f2
)
{
return
f1
.
actorID
<
f2
.
actorID
;
}
frames
.
sort
(
sortFronts
)
;
frames2
.
sort
(
sortFronts
)
;
for
(
let
i
=
0
;
i
<
frames
.
length
;
i
+
+
)
{
is
(
frames
[
i
]
frames2
[
i
]
frame
{
i
}
targets
are
the
same
)
;
}
const
targets
=
[
]
;
const
onAvailable
=
(
{
targetFront
}
)
=
>
{
is
(
targetFront
.
targetType
TargetList
.
TYPES
.
FRAME
"
We
are
only
notified
about
frame
targets
"
)
;
ok
(
targetFront
=
=
target
?
targetFront
.
isTopLevel
:
!
targetFront
.
isTopLevel
"
isTopLevel
property
is
correct
"
)
;
targets
.
push
(
targetFront
)
;
}
;
await
targetList
.
watchTargets
(
[
TargetList
.
TYPES
.
FRAME
]
onAvailable
)
;
is
(
targets
.
length
frames
.
length
"
retrieved
the
same
number
of
frames
via
watchTargets
"
)
;
frames
.
sort
(
sortFronts
)
;
targets
.
sort
(
sortFronts
)
;
for
(
let
i
=
0
;
i
<
frames
.
length
;
i
+
+
)
{
is
(
frames
[
i
]
targets
[
i
]
frame
{
i
}
targets
are
the
same
via
watchTargets
)
;
}
targetList
.
unwatchTargets
(
[
TargetList
.
TYPES
.
FRAME
]
onAvailable
)
;
targetList
.
stopListening
(
)
;
}
async
function
testTabFrames
(
mainRoot
)
{
info
(
"
Test
TargetList
against
frames
via
a
tab
target
"
)
;
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
const
tab
=
await
addTab
(
FISSION_TEST_URL
)
;
const
descriptor
=
await
mainRoot
.
getTab
(
{
tab
}
)
;
const
target
=
await
descriptor
.
getTarget
(
)
;
const
targetList
=
new
TargetList
(
mainRoot
target
)
;
await
targetList
.
startListening
(
)
;
const
frames
=
await
targetList
.
getAllTargets
(
[
TargetList
.
TYPES
.
FRAME
]
)
;
is
(
frames
.
length
1
"
retrieved
only
the
top
level
document
"
)
;
const
targets
=
[
]
;
const
onAvailable
=
(
{
targetFront
}
)
=
>
{
is
(
targetFront
.
targetType
TargetList
.
TYPES
.
FRAME
"
We
are
only
notified
about
frame
targets
"
)
;
ok
(
targetFront
=
=
target
?
targetFront
.
isTopLevel
:
!
targetFront
.
isTopLevel
"
isTopLevel
property
is
correct
"
)
;
targets
.
push
(
targetFront
)
;
}
;
await
targetList
.
watchTargets
(
[
TargetList
.
TYPES
.
FRAME
]
onAvailable
)
;
is
(
targets
.
length
frames
.
length
"
retrieved
the
same
number
of
frames
via
watchTargets
"
)
;
for
(
let
i
=
0
;
i
<
frames
.
length
;
i
+
+
)
{
is
(
frames
[
i
]
targets
[
i
]
frame
{
i
}
targets
are
the
same
via
watchTargets
)
;
}
targetList
.
unwatchTargets
(
[
TargetList
.
TYPES
.
FRAME
]
onAvailable
)
;
targetList
.
stopListening
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
