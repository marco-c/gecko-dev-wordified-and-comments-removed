"
use
strict
"
;
const
{
TargetList
}
=
require
(
"
devtools
/
shared
/
resources
/
target
-
list
"
)
;
const
FISSION_TEST_URL
=
URL_ROOT
+
"
fission_document
.
html
"
;
const
CHROME_WORKER_URL
=
CHROME_URL_ROOT
+
"
test_worker
.
js
"
;
const
WORKER_URL
=
URL_ROOT
+
"
test_worker
.
js
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
browsertoolbox
.
fission
"
true
)
;
await
pushPref
(
"
dom
.
ipc
.
processPrelaunch
.
enabled
"
false
)
;
const
client
=
await
createLocalClient
(
)
;
const
mainRoot
=
client
.
mainRoot
;
await
testBrowserWorkers
(
mainRoot
)
;
await
testTabWorkers
(
mainRoot
)
;
await
client
.
close
(
)
;
}
)
;
async
function
testBrowserWorkers
(
mainRoot
)
{
info
(
"
Test
TargetList
against
workers
via
the
parent
process
target
"
)
;
const
worker
=
new
Worker
(
CHROME_WORKER_URL
)
;
const
target
=
await
mainRoot
.
getMainProcess
(
)
;
const
targetList
=
new
TargetList
(
mainRoot
target
)
;
await
targetList
.
startListening
(
)
;
const
workers
=
await
targetList
.
getAllTargets
(
TargetList
.
TYPES
.
WORKER
)
;
const
hasWorker
=
workers
.
find
(
workerTarget
=
>
{
return
workerTarget
.
url
=
=
CHROME_WORKER_URL
;
}
)
;
ok
(
hasWorker
"
retrieve
the
target
for
the
worker
"
)
;
const
workers2
=
await
targetList
.
getAllTargets
(
TargetList
.
TYPES
.
WORKER
)
;
is
(
workers2
.
length
workers
.
length
"
retrieved
the
same
number
of
workers
"
)
;
function
sortFronts
(
f1
f2
)
{
return
f1
.
actorID
<
f2
.
actorID
;
}
workers
.
sort
(
sortFronts
)
;
workers2
.
sort
(
sortFronts
)
;
for
(
let
i
=
0
;
i
<
workers
.
length
;
i
+
+
)
{
is
(
workers
[
i
]
workers2
[
i
]
worker
{
i
}
targets
are
the
same
)
;
}
const
targets
=
[
]
;
const
onAvailable
=
(
{
type
targetFront
isTopLevel
}
)
=
>
{
is
(
type
TargetList
.
TYPES
.
WORKER
"
We
are
only
notified
about
worker
targets
"
)
;
ok
(
targetFront
=
=
target
?
isTopLevel
:
!
isTopLevel
"
isTopLevel
argument
is
correct
"
)
;
targets
.
push
(
targetFront
)
;
}
;
await
targetList
.
watchTargets
(
[
TargetList
.
TYPES
.
WORKER
]
onAvailable
)
;
is
(
targets
.
length
workers
.
length
"
retrieved
the
same
number
of
workers
via
watchTargets
"
)
;
workers
.
sort
(
sortFronts
)
;
targets
.
sort
(
sortFronts
)
;
for
(
let
i
=
0
;
i
<
workers
.
length
;
i
+
+
)
{
is
(
workers
[
i
]
targets
[
i
]
worker
{
i
}
targets
are
the
same
via
watchTargets
)
;
}
targetList
.
unwatchTargets
(
[
TargetList
.
TYPES
.
WORKER
]
onAvailable
)
;
const
onWorkerCreated
=
new
Promise
(
resolve
=
>
{
const
onAvailable2
=
(
{
type
targetFront
isTopLevel
}
)
=
>
{
if
(
targets
.
includes
(
targetFront
)
)
{
return
;
}
targetList
.
unwatchTargets
(
[
TargetList
.
TYPES
.
WORKER
]
onAvailable2
)
;
resolve
(
targetFront
)
;
}
;
targetList
.
watchTargets
(
[
TargetList
.
TYPES
.
WORKER
]
onAvailable2
)
;
}
)
;
const
worker2
=
new
Worker
(
CHROME_WORKER_URL
+
"
#
second
"
)
;
const
workerTarget
=
await
onWorkerCreated
;
is
(
workerTarget
.
url
CHROME_WORKER_URL
+
"
#
second
"
"
This
worker
target
is
about
the
new
worker
"
)
;
const
workers3
=
await
targetList
.
getAllTargets
(
TargetList
.
TYPES
.
WORKER
)
;
const
hasWorker2
=
workers3
.
find
(
worderTarget
=
>
workerTarget
.
url
=
=
CHROME_WORKER_URL
+
"
#
second
"
)
;
ok
(
hasWorker2
"
retrieve
the
target
for
tab
via
getAllTargets
"
)
;
targetList
.
stopListening
(
)
;
}
async
function
testTabWorkers
(
mainRoot
)
{
info
(
"
Test
TargetList
against
workers
via
a
tab
target
"
)
;
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
const
tab
=
await
addTab
(
FISSION_TEST_URL
)
;
const
target
=
await
mainRoot
.
getTab
(
{
tab
}
)
;
await
target
.
attach
(
)
;
const
targetList
=
new
TargetList
(
mainRoot
target
)
;
targetList
.
listenForWorkers
=
true
;
await
targetList
.
startListening
(
)
;
const
workers
=
await
targetList
.
getAllTargets
(
TargetList
.
TYPES
.
WORKER
)
;
is
(
workers
.
length
1
"
retrieved
the
worker
"
)
;
is
(
workers
[
0
]
.
url
WORKER_URL
"
The
first
worker
is
the
page
worker
"
)
;
const
targets
=
[
]
;
const
onAvailable
=
(
{
type
targetFront
isTopLevel
}
)
=
>
{
is
(
type
TargetList
.
TYPES
.
WORKER
"
We
are
only
notified
about
worker
targets
"
)
;
ok
(
!
isTopLevel
"
The
workers
are
never
top
level
"
)
;
targets
.
push
(
targetFront
)
;
}
;
await
targetList
.
watchTargets
(
[
TargetList
.
TYPES
.
WORKER
]
onAvailable
)
;
is
(
targets
.
length
1
"
retrieved
just
the
worker
"
)
;
is
(
targets
[
0
]
workers
[
0
]
"
Got
the
exact
same
target
front
"
)
;
targetList
.
unwatchTargets
(
[
TargetList
.
TYPES
.
WORKER
]
onAvailable
)
;
targetList
.
stopListening
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
