"
use
strict
"
;
(
function
(
factory
)
{
if
(
this
.
module
&
&
module
.
id
.
indexOf
(
"
stack
"
)
>
=
0
)
{
const
{
components
Cu
}
=
require
(
"
chrome
"
)
;
factory
.
call
(
this
components
Cu
exports
)
;
}
else
{
this
.
isWorker
=
false
;
factory
.
call
(
this
Components
Components
.
utils
this
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
callFunctionWithAsyncStack
"
"
describeNthCaller
"
"
getStack
"
]
;
}
}
)
.
call
(
this
function
(
components
Cu
exports
)
{
function
describeNthCaller
(
n
)
{
if
(
isWorker
)
{
return
"
"
;
}
let
caller
=
components
.
stack
;
while
(
n
>
=
0
)
{
-
-
n
;
caller
=
caller
.
caller
;
}
let
func
=
caller
.
name
;
let
file
=
caller
.
filename
;
if
(
file
.
includes
(
"
-
>
"
)
)
{
file
=
caller
.
filename
.
split
(
/
-
>
/
)
[
1
]
;
}
let
path
=
file
+
"
:
"
+
caller
.
lineNumber
;
return
func
+
"
(
)
-
>
"
+
path
;
}
function
getStack
(
)
{
return
components
.
stack
.
caller
;
}
function
callFunctionWithAsyncStack
(
callee
stack
id
)
{
if
(
isWorker
)
{
return
callee
(
)
;
}
return
Cu
.
callFunctionWithAsyncStack
(
callee
stack
id
)
;
}
exports
.
callFunctionWithAsyncStack
=
callFunctionWithAsyncStack
;
exports
.
describeNthCaller
=
describeNthCaller
;
exports
.
getStack
=
getStack
;
}
)
;
