"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
NetworkObserver
:
"
resource
:
/
/
devtools
/
shared
/
network
-
observer
/
NetworkObserver
.
sys
.
mjs
"
}
)
;
const
TEST_DIR
=
gTestPath
.
substr
(
0
gTestPath
.
lastIndexOf
(
"
/
"
)
)
;
const
CHROME_URL_ROOT
=
TEST_DIR
+
"
/
"
;
const
URL_ROOT
=
CHROME_URL_ROOT
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
https
:
/
/
example
.
com
/
"
)
;
async
function
loadURL
(
browser
url
)
{
const
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
BrowserTestUtils
.
loadURIString
(
browser
url
)
;
return
loaded
;
}
async
function
addTab
(
url
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
registerCleanupFunction
(
(
)
=
>
{
gBrowser
.
removeTab
(
tab
)
;
}
)
;
return
tab
;
}
function
createNetworkEventOwner
(
event
)
{
return
{
addEventTimings
:
(
)
=
>
{
}
addResponseCache
:
(
)
=
>
{
}
addResponseContent
:
(
)
=
>
{
}
addResponseStart
:
(
)
=
>
{
}
addSecurityInfo
:
(
)
=
>
{
}
addServerTimings
:
(
)
=
>
{
}
}
;
}
async
function
waitForNetworkEvents
(
expectedUrl
expectedRequestsCount
)
{
let
eventsCount
=
0
;
const
networkObserver
=
new
NetworkObserver
(
{
ignoreChannelFunction
:
channel
=
>
channel
.
URI
.
spec
!
=
=
expectedUrl
onNetworkEvent
:
event
=
>
{
info
(
"
waitForNetworkEvents
received
a
new
event
"
)
;
eventsCount
+
+
;
return
createNetworkEventOwner
(
event
)
;
}
}
)
;
registerCleanupFunction
(
(
)
=
>
networkObserver
.
destroy
(
)
)
;
info
(
"
Wait
until
the
events
count
reaches
"
+
expectedRequestsCount
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
eventsCount
>
=
expectedRequestsCount
)
;
return
eventsCount
;
}
