"
use
strict
"
;
add_task
(
async
function
testServiceWorkerSuccessRequests
(
)
{
await
addTab
(
URL_ROOT
+
"
doc_network
-
observer
.
html
"
)
;
const
REQUEST_URL
=
URL_ROOT
+
sjs_network
-
observer
-
test
-
server
.
sjs
?
sts
=
200
&
fmt
=
;
const
EXPECTED_REQUESTS
=
[
https
:
/
/
example
.
com
/
browser
/
devtools
/
shared
/
network
-
observer
/
test
/
browser
/
serviceworker
.
js
REQUEST_URL
+
"
js
"
REQUEST_URL
+
"
css
"
REQUEST_URL
+
"
json
"
]
;
const
onNetworkEvents
=
waitForNetworkEvents
(
null
4
)
;
info
(
"
Register
the
service
worker
and
send
requests
.
.
.
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
REQUEST_URL
]
async
url
=
>
{
await
content
.
wrappedJSObject
.
registerServiceWorker
(
)
;
content
.
wrappedJSObject
.
fetch
(
url
+
"
js
"
)
;
content
.
wrappedJSObject
.
fetch
(
url
+
"
css
"
)
;
}
)
;
const
events
=
await
onNetworkEvents
;
is
(
events
.
length
4
"
Received
the
expected
number
of
network
events
"
)
;
for
(
const
{
options
channel
}
of
events
)
{
info
(
Assert
the
info
for
the
request
from
{
channel
.
URI
.
spec
}
)
;
ok
(
EXPECTED_REQUESTS
.
includes
(
channel
.
URI
.
spec
)
The
request
for
{
channel
.
URI
.
spec
}
is
an
expected
service
worker
request
)
;
Assert
.
notStrictEqual
(
channel
.
loadInfo
.
browsingContextID
0
The
request
for
{
channel
.
URI
.
spec
}
has
a
Browsing
Context
ID
of
{
channel
.
loadInfo
.
browsingContextID
}
)
;
if
(
channel
.
URI
.
spec
.
includes
(
"
serviceworker
.
js
"
)
)
{
ok
(
!
options
.
fromServiceWorker
The
request
for
{
channel
.
URI
.
spec
}
is
not
from
the
service
worker
\
n
)
;
}
else
{
ok
(
options
.
fromServiceWorker
The
request
for
{
channel
.
URI
.
spec
}
is
from
the
service
worker
\
n
)
;
}
}
info
(
"
Unregistering
the
service
worker
.
.
.
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
await
content
.
wrappedJSObject
.
unregisterServiceWorker
(
)
;
}
)
;
}
)
;
add_task
(
async
function
testServiceWorkerFailedRequests
(
)
{
await
addTab
(
URL_ROOT
+
"
doc_network
-
observer
-
missing
-
service
-
worker
.
html
"
)
;
const
REQUEST_URL
=
URL_ROOT
+
sjs_network
-
observer
-
test
-
server
.
sjs
?
sts
=
200
&
fmt
=
js
;
const
EXPECTED_REQUESTS
=
[
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
shared
/
network
-
observer
/
test
/
browser
/
serviceworker
-
missing
.
js
"
"
https
:
/
/
example
.
com
/
browser
/
devtools
/
shared
/
network
-
observer
/
test
/
browser
/
sjs_network
-
observer
-
test
-
server
.
sjs
?
sts
=
200
&
fmt
=
js
"
]
;
const
onNetworkEvents
=
waitForNetworkEvents
(
null
2
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
REQUEST_URL
]
async
url
=
>
{
await
content
.
wrappedJSObject
.
registerServiceWorker
(
)
;
content
.
wrappedJSObject
.
fetch
(
url
)
;
}
)
;
const
events
=
await
onNetworkEvents
;
is
(
events
.
length
2
"
Received
the
expected
number
of
network
events
"
)
;
for
(
const
{
options
channel
}
of
events
)
{
info
(
Assert
the
info
for
the
request
from
{
channel
.
URI
.
spec
}
)
;
ok
(
EXPECTED_REQUESTS
.
includes
(
channel
.
URI
.
spec
)
The
request
for
{
channel
.
URI
.
spec
}
is
an
expected
request
)
;
Assert
.
notStrictEqual
(
channel
.
loadInfo
.
browsingContextID
0
The
request
for
{
channel
.
URI
.
spec
}
has
a
Browsing
Context
ID
of
{
channel
.
loadInfo
.
browsingContextID
}
)
;
ok
(
!
options
.
fromServiceWorker
The
request
for
{
channel
.
URI
.
spec
}
is
not
from
the
service
worker
\
n
)
;
}
}
)
;
