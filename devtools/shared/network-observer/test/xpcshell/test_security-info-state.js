"
use
strict
"
;
const
wpl
=
Ci
.
nsIWebProgressListener
;
const
MockSecurityInfo
=
{
securityState
:
wpl
.
STATE_IS_BROKEN
errorCode
:
0
protocolVersion
:
3
cipherName
:
"
TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
"
}
;
add_task
(
async
function
run_test
(
)
{
await
test_nullSecurityInfo
(
)
;
await
test_insecureSecurityInfoWithNSSError
(
)
;
await
test_insecureSecurityInfoWithoutNSSError
(
)
;
await
test_brokenSecurityInfo
(
)
;
await
test_secureSecurityInfo
(
)
;
}
)
;
async
function
test_nullSecurityInfo
(
)
{
const
result
=
await
NetworkHelper
.
parseSecurityInfo
(
null
{
}
{
}
new
Map
(
)
)
;
equal
(
result
.
state
"
insecure
"
"
state
=
=
'
insecure
'
when
securityInfo
was
undefined
"
)
;
}
async
function
test_insecureSecurityInfoWithNSSError
(
)
{
MockSecurityInfo
.
securityState
=
wpl
.
STATE_IS_INSECURE
;
MockSecurityInfo
.
errorCode
=
-
8180
;
const
result
=
await
NetworkHelper
.
parseSecurityInfo
(
MockSecurityInfo
{
}
{
}
new
Map
(
)
)
;
equal
(
result
.
state
"
broken
"
"
state
=
=
'
broken
'
if
securityState
contains
STATE_IS_INSECURE
flag
AND
"
+
"
errorCode
is
NSS
error
.
"
)
;
MockSecurityInfo
.
errorCode
=
0
;
}
async
function
test_insecureSecurityInfoWithoutNSSError
(
)
{
MockSecurityInfo
.
securityState
=
wpl
.
STATE_IS_INSECURE
;
const
result
=
await
NetworkHelper
.
parseSecurityInfo
(
MockSecurityInfo
{
}
{
}
new
Map
(
)
)
;
equal
(
result
.
state
"
insecure
"
"
state
=
=
'
insecure
'
if
securityState
contains
STATE_IS_INSECURE
flag
BUT
"
+
"
errorCode
is
not
NSS
error
.
"
)
;
}
async
function
test_secureSecurityInfo
(
)
{
MockSecurityInfo
.
securityState
=
wpl
.
STATE_IS_SECURE
;
const
result
=
await
NetworkHelper
.
parseSecurityInfo
(
MockSecurityInfo
{
}
{
}
new
Map
(
)
)
;
equal
(
result
.
state
"
secure
"
"
state
=
=
'
secure
'
if
securityState
contains
STATE_IS_SECURE
flag
"
)
;
}
async
function
test_brokenSecurityInfo
(
)
{
MockSecurityInfo
.
securityState
=
wpl
.
STATE_IS_BROKEN
;
const
result
=
await
NetworkHelper
.
parseSecurityInfo
(
MockSecurityInfo
{
}
{
}
new
Map
(
)
)
;
equal
(
result
.
state
"
weak
"
"
state
=
=
'
weak
'
if
securityState
contains
STATE_IS_BROKEN
flag
"
)
;
}
