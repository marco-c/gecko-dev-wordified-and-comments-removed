"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
incremental
-
js
-
value
-
script
.
sjs
"
;
add_task
(
async
function
(
)
{
info
(
"
#
#
#
Test
reloading
a
Tab
"
)
;
const
tab
=
await
addTab
(
TEST_URL
)
;
const
commands
=
await
CommandsFactory
.
forTab
(
tab
)
;
const
targetCommand
=
commands
.
targetCommand
;
await
targetCommand
.
startListening
(
)
;
const
firstJSValue
=
await
getContentVariable
(
)
;
is
(
firstJSValue
"
1
"
"
Got
an
initial
value
for
the
JS
variable
"
)
;
const
onReloaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
targetCommand
.
reloadTopLevelTarget
(
)
;
info
(
"
Wait
for
the
tab
to
be
reloaded
"
)
;
await
onReloaded
;
const
secondJSValue
=
await
getContentVariable
(
)
;
is
(
secondJSValue
"
1
"
"
The
first
reload
didn
'
t
bypass
the
cache
so
the
JS
Script
is
the
same
and
we
got
the
same
value
"
)
;
const
onSecondReloaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
targetCommand
.
reloadTopLevelTarget
(
true
)
;
info
(
"
Wait
for
the
tab
to
be
reloaded
"
)
;
await
onSecondReloaded
;
const
thirdJSValue
=
await
getContentVariable
(
)
;
is
(
thirdJSValue
"
3
"
"
The
second
reload
did
bypass
the
cache
so
the
JS
Script
is
different
and
we
got
a
new
value
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
commands
.
destroy
(
)
;
}
)
;
add_task
(
async
function
(
)
{
info
(
"
#
#
#
Test
reloading
an
Add
-
on
"
)
;
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
temporary
"
background
(
)
{
const
{
browser
}
=
this
;
browser
.
test
.
log
(
"
background
script
executed
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
const
commands
=
await
CommandsFactory
.
forAddon
(
extension
.
id
)
;
const
targetCommand
=
commands
.
targetCommand
;
await
targetCommand
.
startListening
(
)
;
const
{
onResource
:
onReloaded
}
=
await
commands
.
resourceCommand
.
waitForNextResource
(
commands
.
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
{
ignoreExistingResources
:
true
predicate
(
resource
)
{
return
resource
.
name
=
=
"
dom
-
loading
"
;
}
}
)
;
const
backgroundPageURL
=
targetCommand
.
targetFront
.
url
;
ok
(
backgroundPageURL
"
Got
the
background
page
URL
"
)
;
await
targetCommand
.
reloadTopLevelTarget
(
)
;
info
(
"
Wait
for
next
dom
-
loading
DOCUMENT_EVENT
"
)
;
const
event
=
await
onReloaded
;
is
(
event
.
url
backgroundPageURL
"
We
received
the
DOCUMENT_EVENT
'
s
for
the
expected
document
:
the
new
background
page
.
"
)
;
await
commands
.
destroy
(
)
;
await
extension
.
unload
(
)
;
}
)
;
function
getContentVariable
(
)
{
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
return
content
.
wrappedJSObject
.
jsValue
;
}
)
;
}
