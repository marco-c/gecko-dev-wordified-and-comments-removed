"
use
strict
"
;
const
TEST_URL
=
URL_ROOT
+
"
incremental
-
js
-
value
-
script
.
sjs
"
;
add_task
(
async
function
(
)
{
info
(
"
#
#
#
Test
reloading
a
Tab
"
)
;
const
tab
=
await
addTab
(
TEST_URL
)
;
const
commands
=
await
CommandsFactory
.
forTab
(
tab
)
;
const
targetCommand
=
commands
.
targetCommand
;
await
targetCommand
.
startListening
(
)
;
const
firstJSValue
=
await
getContentVariable
(
)
;
is
(
firstJSValue
"
1
"
"
Got
an
initial
value
for
the
JS
variable
"
)
;
const
onReloaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
targetCommand
.
reloadTopLevelTarget
(
)
;
info
(
"
Wait
for
the
tab
to
be
reloaded
"
)
;
await
onReloaded
;
const
secondJSValue
=
await
getContentVariable
(
)
;
is
(
secondJSValue
"
1
"
"
The
first
reload
didn
'
t
bypass
the
cache
so
the
JS
Script
is
the
same
and
we
got
the
same
value
"
)
;
const
onSecondReloaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
targetCommand
.
reloadTopLevelTarget
(
true
)
;
info
(
"
Wait
for
the
tab
to
be
reloaded
"
)
;
await
onSecondReloaded
;
const
thirdJSValue
=
await
getContentVariable
(
)
;
is
(
thirdJSValue
"
3
"
"
The
second
reload
did
bypass
the
cache
so
the
JS
Script
is
different
and
we
got
a
new
value
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
commands
.
destroy
(
)
;
}
)
;
add_task
(
async
function
(
)
{
info
(
"
#
#
#
Test
reloading
a
content
process
"
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
data
:
text
/
html
foo
"
forceNewProcess
:
true
}
)
;
const
{
osPid
}
=
tab
.
linkedBrowser
.
browsingContext
.
currentWindowGlobal
;
const
commands
=
await
CommandsFactory
.
forProcess
(
osPid
)
;
await
commands
.
targetCommand
.
startListening
(
)
;
try
{
await
commands
.
targetCommand
.
reloadTopLevelTarget
(
)
;
ok
(
false
"
reloadToLevelTarget
(
)
should
have
thrown
for
the
main
process
"
)
;
}
catch
(
e
)
{
is
(
e
.
message
"
The
top
level
target
isn
'
t
a
BrowsingContext
and
don
'
t
support
being
reloaded
"
)
;
}
await
commands
.
destroy
(
)
;
}
)
;
function
getContentVariable
(
)
{
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
return
content
.
wrappedJSObject
.
jsValue
;
}
)
;
}
