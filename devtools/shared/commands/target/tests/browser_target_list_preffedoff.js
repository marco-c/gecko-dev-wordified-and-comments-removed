"
use
strict
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
dom
.
ipc
.
processPrelaunch
.
enabled
"
false
)
;
await
pushPref
(
"
dom
.
ipc
.
keepProcessesAlive
.
web
"
1
)
;
await
pushPref
(
"
devtools
.
browsertoolbox
.
fission
"
false
)
;
await
testPreffedOffMainProcess
(
)
;
}
)
;
async
function
testPreffedOffMainProcess
(
)
{
info
(
"
Test
TargetCommand
when
devtools
'
s
fission
pref
is
false
via
the
parent
process
target
"
)
;
const
commands
=
await
CommandsFactory
.
forMainProcess
(
)
;
const
targetList
=
commands
.
targetCommand
;
const
{
TYPES
}
=
targetList
;
await
targetList
.
startListening
(
)
;
const
mainProcess
=
targetList
.
targetFront
;
const
processes
=
await
targetList
.
getAllTargets
(
[
TYPES
.
PROCESS
]
)
;
is
(
processes
.
length
0
"
We
only
get
a
frame
target
for
the
top
level
target
"
)
;
const
frames
=
await
targetList
.
getAllTargets
(
[
TYPES
.
FRAME
]
)
;
is
(
frames
.
length
1
"
We
get
only
one
frame
when
preffed
-
off
"
)
;
is
(
frames
[
0
]
mainProcess
"
The
target
is
the
top
level
one
via
getAllTargets
"
)
;
const
processTargets
=
[
]
;
const
onProcessAvailable
=
(
{
targetFront
}
)
=
>
{
processTargets
.
push
(
targetFront
)
;
}
;
await
targetList
.
watchTargets
(
[
TYPES
.
PROCESS
]
onProcessAvailable
)
;
is
(
processTargets
.
length
0
"
We
get
no
process
when
preffed
-
off
"
)
;
targetList
.
unwatchTargets
(
[
TYPES
.
PROCESS
]
onProcessAvailable
)
;
const
frameTargets
=
[
]
;
const
onFrameAvailable
=
(
{
targetFront
}
)
=
>
{
is
(
targetFront
.
targetType
TYPES
.
FRAME
"
We
are
only
notified
about
frame
targets
"
)
;
ok
(
targetFront
.
isTopLevel
"
We
are
only
notified
about
the
top
level
target
"
)
;
frameTargets
.
push
(
targetFront
)
;
}
;
await
targetList
.
watchTargets
(
[
TYPES
.
FRAME
]
onFrameAvailable
)
;
is
(
frameTargets
.
length
1
"
We
get
one
frame
via
watchTargets
when
preffed
-
off
"
)
;
is
(
frameTargets
[
0
]
mainProcess
"
The
target
is
the
top
level
one
via
watchTargets
"
)
;
targetList
.
unwatchTargets
(
[
TYPES
.
FRAME
]
onFrameAvailable
)
;
targetList
.
destroy
(
)
;
await
commands
.
destroy
(
)
;
}
