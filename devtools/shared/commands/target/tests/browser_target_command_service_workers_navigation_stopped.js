"
use
strict
"
;
loadHelperScript
(
"
helper_service_workers_navigation
.
js
"
)
;
const
COM_PAGE_URL
=
URL_ROOT_SSL
+
"
test_sw_page
.
html
"
;
const
COM_WORKER_URL
=
URL_ROOT_SSL
+
"
test_sw_page_worker
.
js
"
;
add_task
(
async
function
test_NavigationToPageWithExistingStoppedWorker
(
)
{
await
setupServiceWorkerNavigationTest
(
)
;
const
tab
=
await
addTab
(
COM_PAGE_URL
)
;
info
(
"
Wait
until
the
service
worker
registration
is
registered
"
)
;
await
waitForRegistrationReady
(
tab
COM_PAGE_URL
COM_WORKER_URL
)
;
await
stopServiceWorker
(
COM_WORKER_URL
)
;
const
{
hooks
commands
targetCommand
}
=
await
watchServiceWorkerTargets
(
tab
)
;
await
wait
(
1000
)
;
info
(
"
Verify
that
no
SW
is
reported
after
it
has
been
stopped
and
we
start
watching
for
service
workers
"
)
;
await
checkHooks
(
hooks
{
available
:
0
destroyed
:
0
targets
:
[
]
}
)
;
info
(
"
Reload
the
worker
module
via
the
postMessage
call
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
const
registration
=
await
content
.
wrappedJSObject
.
registrationPromise
;
registration
.
active
.
postMessage
(
"
"
)
;
}
)
;
info
(
"
Verify
that
the
SW
is
notified
"
)
;
await
checkHooks
(
hooks
{
available
:
1
destroyed
:
0
targets
:
[
COM_WORKER_URL
]
}
)
;
await
unregisterServiceWorker
(
COM_WORKER_URL
)
;
await
checkHooks
(
hooks
{
available
:
1
destroyed
:
1
targets
:
[
]
}
)
;
targetCommand
.
destroy
(
)
;
await
commands
.
waitForRequestsToSettle
(
)
;
await
commands
.
destroy
(
)
;
await
removeTab
(
tab
)
;
}
)
;
