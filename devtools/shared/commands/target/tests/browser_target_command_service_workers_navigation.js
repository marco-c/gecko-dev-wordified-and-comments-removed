"
use
strict
"
;
const
COM_PAGE_URL
=
URL_ROOT_SSL
+
"
test_sw_page
.
html
"
;
const
COM_WORKER_URL
=
URL_ROOT_SSL
+
"
test_sw_page_worker
.
js
"
;
const
ORG_PAGE_URL
=
URL_ROOT_ORG_SSL
+
"
test_sw_page
.
html
"
;
const
ORG_WORKER_URL
=
URL_ROOT_ORG_SSL
+
"
test_sw_page_worker
.
js
"
;
add_task
(
async
function
test_NavigationBetweenTwoDomains_NoDestroy
(
)
{
await
setupServiceWorkerNavigationTest
(
)
;
const
tab
=
await
addTab
(
COM_PAGE_URL
)
;
const
{
hooks
commands
targetCommand
}
=
await
watchServiceWorkerTargets
(
tab
)
;
await
checkHooks
(
hooks
{
available
:
1
destroyed
:
0
targets
:
[
COM_WORKER_URL
]
}
)
;
info
(
"
Go
to
.
org
page
wait
for
onAvailable
to
be
called
"
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
ORG_PAGE_URL
)
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
0
targets
:
[
COM_WORKER_URL
ORG_WORKER_URL
]
}
)
;
info
(
"
Reload
.
org
page
onAvailable
and
onDestroyed
should
not
be
called
"
)
;
await
BrowserTestUtils
.
reloadTab
(
gBrowser
.
selectedTab
)
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
0
targets
:
[
COM_WORKER_URL
ORG_WORKER_URL
]
}
)
;
info
(
"
Unregister
.
org
service
worker
and
wait
until
onDestroyed
is
called
.
"
)
;
await
unregisterServiceWorker
(
tab
ORG_PAGE_URL
)
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
1
targets
:
[
COM_WORKER_URL
]
}
)
;
info
(
"
Go
back
to
.
com
page
"
)
;
const
onBrowserLoaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
COM_PAGE_URL
)
;
await
onBrowserLoaded
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
1
targets
:
[
COM_WORKER_URL
]
}
)
;
info
(
"
Unregister
.
com
service
worker
and
wait
until
onDestroyed
is
called
.
"
)
;
await
unregisterServiceWorker
(
tab
COM_PAGE_URL
)
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
2
targets
:
[
]
}
)
;
targetCommand
.
destroy
(
)
;
await
commands
.
waitForRequestsToSettle
(
)
;
await
commands
.
destroy
(
)
;
await
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_NavigationToPageWithExistingWorker
(
)
{
await
setupServiceWorkerNavigationTest
(
)
;
const
tab
=
await
addTab
(
COM_PAGE_URL
)
;
info
(
"
Wait
until
the
service
worker
registration
is
registered
"
)
;
await
waitForRegistrationReady
(
tab
COM_PAGE_URL
)
;
info
(
"
Navigate
to
another
page
"
)
;
let
onBrowserLoaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
ORG_PAGE_URL
)
;
info
(
"
Wait
until
we
have
fully
navigated
to
the
.
org
page
"
)
;
await
onBrowserLoaded
;
await
waitForRegistrationReady
(
tab
ORG_PAGE_URL
)
;
const
{
hooks
commands
targetCommand
}
=
await
watchServiceWorkerTargets
(
tab
)
;
await
checkHooks
(
hooks
{
available
:
1
destroyed
:
0
targets
:
[
ORG_WORKER_URL
]
}
)
;
info
(
"
Unregister
.
org
service
worker
and
wait
until
onDestroyed
is
called
.
"
)
;
await
unregisterServiceWorker
(
tab
ORG_PAGE_URL
)
;
await
checkHooks
(
hooks
{
available
:
1
destroyed
:
1
targets
:
[
]
}
)
;
info
(
"
Go
back
.
com
page
wait
for
onAvailable
to
be
called
"
)
;
onBrowserLoaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
COM_PAGE_URL
)
;
await
onBrowserLoaded
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
1
targets
:
[
COM_WORKER_URL
]
}
)
;
info
(
"
Unregister
.
com
service
worker
and
wait
until
onDestroyed
is
called
.
"
)
;
await
unregisterServiceWorker
(
tab
COM_PAGE_URL
)
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
2
targets
:
[
]
}
)
;
targetCommand
.
destroy
(
)
;
await
commands
.
waitForRequestsToSettle
(
)
;
await
commands
.
destroy
(
)
;
await
removeTab
(
tab
)
;
}
)
;
async
function
setupServiceWorkerNavigationTest
(
)
{
await
pushPref
(
"
dom
.
ipc
.
processPrelaunch
.
enabled
"
false
)
;
await
pushPref
(
"
dom
.
serviceWorkers
.
idle_timeout
"
3000
)
;
}
async
function
watchServiceWorkerTargets
(
tab
)
{
info
(
"
Create
a
target
list
for
a
tab
target
"
)
;
const
commands
=
await
CommandsFactory
.
forTab
(
tab
)
;
const
targetCommand
=
commands
.
targetCommand
;
targetCommand
.
listenForServiceWorkers
=
true
;
await
targetCommand
.
startListening
(
)
;
const
hooks
=
{
availableCount
:
0
destroyedCount
:
0
targets
:
[
]
}
;
const
onAvailable
=
async
(
{
targetFront
}
)
=
>
{
hooks
.
availableCount
+
+
;
hooks
.
targets
.
push
(
targetFront
)
;
}
;
const
onDestroyed
=
(
{
targetFront
}
)
=
>
{
hooks
.
destroyedCount
+
+
;
hooks
.
targets
.
splice
(
hooks
.
targets
.
indexOf
(
targetFront
)
1
)
;
}
;
await
targetCommand
.
watchTargets
(
{
types
:
[
targetCommand
.
TYPES
.
SERVICE_WORKER
]
onAvailable
onDestroyed
}
)
;
return
{
hooks
commands
targetCommand
}
;
}
async
function
unregisterServiceWorker
(
tab
expectedPageUrl
)
{
await
waitForRegistrationReady
(
tab
expectedPageUrl
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
const
registration
=
await
content
.
wrappedJSObject
.
registrationPromise
;
registration
.
unregister
(
)
;
}
)
;
}
async
function
waitForRegistrationReady
(
tab
expectedPageUrl
)
{
await
asyncWaitUntil
(
(
)
=
>
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
expectedPageUrl
]
function
(
_url
)
{
try
{
const
win
=
content
.
wrappedJSObject
;
const
isExpectedUrl
=
win
.
location
.
href
=
=
=
_url
;
const
hasRegistration
=
!
!
win
.
registrationPromise
;
return
isExpectedUrl
&
&
hasRegistration
;
}
catch
(
e
)
{
return
false
;
}
}
)
)
;
}
async
function
checkHooks
(
hooks
{
available
destroyed
targets
}
)
{
info
(
Wait
for
availableCount
=
{
available
}
and
destroyedCount
=
{
destroyed
}
)
;
await
waitUntil
(
(
)
=
>
hooks
.
availableCount
=
=
available
&
&
hooks
.
destroyedCount
=
=
destroyed
)
;
is
(
hooks
.
availableCount
available
"
onAvailable
was
called
as
expected
"
)
;
is
(
hooks
.
destroyedCount
destroyed
"
onDestroyed
was
called
as
expected
"
)
;
is
(
hooks
.
targets
.
length
targets
.
length
"
Expected
number
of
targets
"
)
;
targets
.
forEach
(
(
url
i
)
=
>
{
is
(
hooks
.
targets
[
i
]
.
url
url
SW
target
{
i
}
has
the
expected
url
)
;
}
)
;
}
