"
use
strict
"
;
loadHelperScript
(
"
helper_service_workers_navigation
.
js
"
)
;
const
COM_PAGE_URL
=
URL_ROOT_SSL
+
"
test_sw_page
.
html
"
;
const
COM_WORKER_URL
=
URL_ROOT_SSL
+
"
test_sw_page_worker
.
js
"
;
const
ORG_PAGE_URL
=
URL_ROOT_ORG_SSL
+
"
test_sw_page
.
html
"
;
const
ORG_WORKER_URL
=
URL_ROOT_ORG_SSL
+
"
test_sw_page_worker
.
js
"
;
add_task
(
async
function
test_NavigationBetweenTwoDomains_NoDestroy
(
)
{
await
setupServiceWorkerNavigationTest
(
)
;
const
tab
=
await
addTab
(
COM_PAGE_URL
)
;
const
{
hooks
commands
targetCommand
}
=
await
watchServiceWorkerTargets
(
tab
)
;
await
checkHooks
(
hooks
{
available
:
1
destroyed
:
0
targets
:
[
COM_WORKER_URL
]
}
)
;
info
(
"
Go
to
.
org
page
wait
for
onAvailable
to
be
called
"
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
ORG_PAGE_URL
)
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
0
targets
:
[
COM_WORKER_URL
ORG_WORKER_URL
]
}
)
;
info
(
"
Reload
.
org
page
onAvailable
and
onDestroyed
should
not
be
called
"
)
;
await
BrowserTestUtils
.
reloadTab
(
gBrowser
.
selectedTab
)
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
0
targets
:
[
COM_WORKER_URL
ORG_WORKER_URL
]
}
)
;
info
(
"
Unregister
.
org
service
worker
and
wait
until
onDestroyed
is
called
.
"
)
;
await
unregisterServiceWorker
(
ORG_WORKER_URL
)
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
1
targets
:
[
COM_WORKER_URL
]
}
)
;
info
(
"
Go
back
to
.
com
page
"
)
;
const
onBrowserLoaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
COM_PAGE_URL
)
;
await
onBrowserLoaded
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
1
targets
:
[
COM_WORKER_URL
]
}
)
;
info
(
"
Unregister
.
com
service
worker
and
wait
until
onDestroyed
is
called
.
"
)
;
await
unregisterServiceWorker
(
COM_WORKER_URL
)
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
2
targets
:
[
]
}
)
;
targetCommand
.
destroy
(
)
;
await
commands
.
waitForRequestsToSettle
(
)
;
await
commands
.
destroy
(
)
;
await
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_NavigationToPageWithExistingWorker
(
)
{
await
setupServiceWorkerNavigationTest
(
)
;
const
tab
=
await
addTab
(
COM_PAGE_URL
)
;
info
(
"
Wait
until
the
service
worker
registration
is
registered
"
)
;
await
waitForRegistrationReady
(
tab
COM_PAGE_URL
COM_WORKER_URL
)
;
info
(
"
Navigate
to
another
page
"
)
;
let
onBrowserLoaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
ORG_PAGE_URL
)
;
info
(
"
Wait
until
we
have
fully
navigated
to
the
.
org
page
"
)
;
await
onBrowserLoaded
;
await
waitForRegistrationReady
(
tab
ORG_PAGE_URL
ORG_WORKER_URL
)
;
const
{
hooks
commands
targetCommand
}
=
await
watchServiceWorkerTargets
(
tab
)
;
await
checkHooks
(
hooks
{
available
:
1
destroyed
:
0
targets
:
[
ORG_WORKER_URL
]
}
)
;
info
(
"
Unregister
.
org
service
worker
and
wait
until
onDestroyed
is
called
.
"
)
;
await
unregisterServiceWorker
(
ORG_WORKER_URL
)
;
await
checkHooks
(
hooks
{
available
:
1
destroyed
:
1
targets
:
[
]
}
)
;
info
(
"
Go
back
.
com
page
wait
for
onAvailable
to
be
called
"
)
;
onBrowserLoaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
COM_PAGE_URL
)
;
await
onBrowserLoaded
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
1
targets
:
[
COM_WORKER_URL
]
}
)
;
info
(
"
Unregister
.
com
service
worker
and
wait
until
onDestroyed
is
called
.
"
)
;
await
unregisterServiceWorker
(
COM_WORKER_URL
)
;
await
checkHooks
(
hooks
{
available
:
2
destroyed
:
2
targets
:
[
]
}
)
;
targetCommand
.
destroy
(
)
;
await
commands
.
waitForRequestsToSettle
(
)
;
await
commands
.
destroy
(
)
;
await
removeTab
(
tab
)
;
}
)
;
