"
use
strict
"
;
const
initialReducerState
=
{
targets
:
[
]
selected
:
null
lastTargetRefresh
:
Date
.
now
(
)
}
;
function
update
(
state
=
initialReducerState
action
)
{
switch
(
action
.
type
)
{
case
"
SELECT_TARGET
"
:
{
const
{
targetActorID
}
=
action
;
if
(
state
.
selected
?
.
actorID
=
=
=
targetActorID
)
{
return
state
;
}
const
selectedTarget
=
state
.
targets
.
find
(
target
=
>
target
.
actorID
=
=
=
targetActorID
)
;
if
(
!
selectedTarget
)
{
return
state
;
}
return
{
.
.
.
state
selected
:
selectedTarget
}
;
}
case
"
REGISTER_TARGET
"
:
{
return
{
.
.
.
state
targets
:
[
.
.
.
state
.
targets
action
.
targetFront
]
}
;
}
case
"
REFRESH_TARGETS
"
:
{
return
{
.
.
.
state
lastTargetRefresh
:
Date
.
now
(
)
}
;
}
case
"
UNREGISTER_TARGET
"
:
{
const
targets
=
state
.
targets
.
filter
(
target
=
>
target
!
=
=
action
.
targetFront
)
;
let
{
selected
}
=
state
;
if
(
selected
=
=
=
action
.
targetFront
)
{
selected
=
null
;
}
return
{
.
.
.
state
targets
selected
}
;
}
}
return
state
;
}
module
.
exports
=
update
;
