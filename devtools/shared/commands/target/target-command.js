"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
BROWSERTOOLBOX_FISSION_ENABLED
=
"
devtools
.
browsertoolbox
.
fission
"
;
const
SERVER_TARGET_SWITCHING_ENABLED
=
"
devtools
.
target
-
switching
.
server
.
enabled
"
;
const
{
LegacyProcessesWatcher
}
=
require
(
"
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
processes
-
watcher
"
)
;
const
{
LegacyServiceWorkersWatcher
}
=
require
(
"
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
serviceworkers
-
watcher
"
)
;
const
{
LegacySharedWorkersWatcher
}
=
require
(
"
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
sharedworkers
-
watcher
"
)
;
const
{
LegacyWorkersWatcher
}
=
require
(
"
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
workers
-
watcher
"
)
;
class
TargetCommand
extends
EventEmitter
{
constructor
(
{
descriptorFront
}
)
{
super
(
)
;
this
.
descriptorFront
=
descriptorFront
;
this
.
rootFront
=
descriptorFront
.
client
.
mainRoot
;
this
.
onLocalTabRemotenessChange
=
this
.
onLocalTabRemotenessChange
.
bind
(
this
)
;
if
(
this
.
descriptorFront
.
isLocalTab
)
{
this
.
descriptorFront
.
on
(
"
remoteness
-
change
"
this
.
onLocalTabRemotenessChange
)
;
}
this
.
_listenersStarted
=
new
Set
(
)
;
this
.
_targets
=
new
Set
(
)
;
this
.
_pendingWatchTargetInitialization
=
new
Map
(
)
;
this
.
_createListeners
=
new
EventEmitter
(
)
;
this
.
_destroyListeners
=
new
EventEmitter
(
)
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
this
.
legacyImplementation
=
{
process
:
new
LegacyProcessesWatcher
(
this
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
worker
:
new
LegacyWorkersWatcher
(
this
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
shared_worker
:
new
LegacySharedWorkersWatcher
(
this
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
service_worker
:
new
LegacyServiceWorkersWatcher
(
this
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
}
;
this
.
listenForWorkers
=
this
.
rootFront
.
traits
.
workerConsoleApiMessagesDispatchedToMainThread
=
=
=
false
;
this
.
listenForServiceWorkers
=
false
;
this
.
destroyServiceWorkersOnNavigation
=
false
;
}
async
_onTargetAvailable
(
targetFront
)
{
const
isTargetSwitching
=
targetFront
.
isTopLevel
;
if
(
this
.
_targets
.
has
(
targetFront
)
)
{
if
(
targetFront
!
=
this
.
targetFront
)
{
console
.
error
(
"
Target
is
already
registered
in
the
TargetCommand
"
targetFront
.
actorID
)
;
}
return
;
}
if
(
this
.
isDestroyed
(
)
|
|
targetFront
.
isDestroyedOrBeingDestroyed
(
)
)
{
return
;
}
if
(
targetFront
.
isTopLevel
)
{
for
(
const
target
of
this
.
_targets
)
{
const
isDestroyedTargetSwitching
=
target
=
=
this
.
targetFront
;
this
.
_onTargetDestroyed
(
target
{
isTargetSwitching
:
isDestroyedTargetSwitching
}
)
;
}
this
.
stopListening
(
{
onlyLegacy
:
true
}
)
;
this
.
_targets
.
clear
(
)
;
this
.
targetFront
=
targetFront
;
this
.
descriptorFront
.
setTarget
(
targetFront
)
;
}
const
targetType
=
this
.
getTargetType
(
targetFront
)
;
targetFront
.
setTargetType
(
targetType
)
;
this
.
_targets
.
add
(
targetFront
)
;
try
{
await
targetFront
.
attachAndInitThread
(
this
)
;
}
catch
(
e
)
{
console
.
error
(
"
Error
when
attaching
target
:
"
e
)
;
this
.
_targets
.
delete
(
targetFront
)
;
return
;
}
for
(
const
targetFrontsSet
of
this
.
_pendingWatchTargetInitialization
.
values
(
)
)
{
targetFrontsSet
.
delete
(
targetFront
)
;
}
if
(
this
.
isDestroyed
(
)
|
|
targetFront
.
isDestroyedOrBeingDestroyed
(
)
)
{
return
;
}
await
this
.
_createListeners
.
emitAsync
(
targetType
{
targetFront
isTargetSwitching
}
)
;
if
(
targetFront
.
isTopLevel
)
{
await
this
.
startListening
(
{
onlyLegacy
:
true
}
)
;
}
this
.
emitForTests
(
"
processed
-
available
-
target
"
targetFront
)
;
if
(
isTargetSwitching
)
{
this
.
emitForTests
(
"
switched
-
target
"
targetFront
)
;
}
}
_onTargetDestroyed
(
targetFront
{
isTargetSwitching
=
false
shouldDestroyTargetFront
=
true
}
=
{
}
)
{
if
(
targetFront
=
=
this
.
targetFront
)
{
isTargetSwitching
=
true
;
}
this
.
_destroyListeners
.
emit
(
targetFront
.
targetType
{
targetFront
isTargetSwitching
}
)
;
this
.
_targets
.
delete
(
targetFront
)
;
if
(
shouldDestroyTargetFront
)
{
targetFront
.
baseFrontClassDestroy
(
)
;
targetFront
.
destroy
(
)
;
}
}
_setListening
(
type
value
)
{
if
(
value
)
{
this
.
_listenersStarted
.
add
(
type
)
;
}
else
{
this
.
_listenersStarted
.
delete
(
type
)
;
}
}
_isListening
(
type
)
{
return
this
.
_listenersStarted
.
has
(
type
)
;
}
hasTargetWatcherSupport
(
targetTypeOrTrait
)
{
if
(
this
.
targetFront
.
isParentProcess
&
&
!
Services
.
prefs
.
getBoolPref
(
BROWSERTOOLBOX_FISSION_ENABLED
false
)
)
{
return
false
;
}
if
(
targetTypeOrTrait
)
{
return
!
!
this
.
watcherFront
?
.
traits
[
targetTypeOrTrait
]
;
}
return
!
!
this
.
watcherFront
;
}
isServerTargetSwitchingEnabled
(
)
{
if
(
typeof
this
.
_isServerTargetSwitchingEnabled
=
=
"
undefined
"
)
{
this
.
_isServerTargetSwitchingEnabled
=
Services
.
prefs
.
getBoolPref
(
SERVER_TARGET_SWITCHING_ENABLED
false
)
;
}
return
this
.
_isServerTargetSwitchingEnabled
;
}
async
startListening
(
{
onlyLegacy
=
false
}
=
{
}
)
{
if
(
!
this
.
targetFront
)
{
this
.
targetFront
=
await
this
.
descriptorFront
.
getTarget
(
)
;
this
.
targetFront
.
setTargetType
(
this
.
getTargetType
(
this
.
targetFront
)
)
;
this
.
targetFront
.
setIsTopLevel
(
true
)
;
this
.
_targets
.
add
(
this
.
targetFront
)
;
}
if
(
!
this
.
watcherFront
)
{
const
supportsWatcher
=
this
.
descriptorFront
.
traits
?
.
watcher
;
if
(
supportsWatcher
)
{
this
.
watcherFront
=
await
this
.
descriptorFront
.
getWatcher
(
)
;
this
.
watcherFront
.
on
(
"
target
-
available
"
this
.
_onTargetAvailable
)
;
this
.
watcherFront
.
on
(
"
target
-
destroyed
"
this
.
_onTargetDestroyed
)
;
}
}
let
types
=
[
]
;
if
(
this
.
targetFront
.
isParentProcess
)
{
const
fissionBrowserToolboxEnabled
=
Services
.
prefs
.
getBoolPref
(
BROWSERTOOLBOX_FISSION_ENABLED
)
;
if
(
fissionBrowserToolboxEnabled
)
{
types
=
TargetCommand
.
ALL_TYPES
;
}
}
else
if
(
this
.
descriptorFront
.
isLocalTab
)
{
types
=
[
TargetCommand
.
TYPES
.
FRAME
]
;
}
if
(
this
.
listenForWorkers
&
&
!
types
.
includes
(
TargetCommand
.
TYPES
.
WORKER
)
)
{
types
.
push
(
TargetCommand
.
TYPES
.
WORKER
)
;
}
if
(
this
.
listenForWorkers
&
&
!
types
.
includes
(
TargetCommand
.
TYPES
.
SHARED_WORKER
)
)
{
types
.
push
(
TargetCommand
.
TYPES
.
SHARED_WORKER
)
;
}
if
(
this
.
listenForServiceWorkers
&
&
!
types
.
includes
(
TargetCommand
.
TYPES
.
SERVICE_WORKER
)
)
{
types
.
push
(
TargetCommand
.
TYPES
.
SERVICE_WORKER
)
;
}
for
(
const
type
of
types
)
{
if
(
this
.
_isListening
(
type
)
)
{
continue
;
}
this
.
_setListening
(
type
true
)
;
if
(
this
.
hasTargetWatcherSupport
(
type
)
)
{
if
(
!
onlyLegacy
)
{
await
this
.
watcherFront
.
watchTargets
(
type
)
;
}
}
else
if
(
this
.
legacyImplementation
[
type
]
)
{
await
this
.
legacyImplementation
[
type
]
.
listen
(
)
;
}
else
{
throw
new
Error
(
Unsupported
target
type
'
{
type
}
'
)
;
}
}
}
stopListening
(
{
onlyLegacy
=
false
}
=
{
}
)
{
for
(
const
type
of
TargetCommand
.
ALL_TYPES
)
{
if
(
!
this
.
_isListening
(
type
)
)
{
continue
;
}
this
.
_setListening
(
type
false
)
;
if
(
this
.
hasTargetWatcherSupport
(
type
)
)
{
if
(
!
onlyLegacy
)
{
this
.
watcherFront
.
unwatchTargets
(
type
)
;
}
}
else
if
(
this
.
legacyImplementation
[
type
]
)
{
this
.
legacyImplementation
[
type
]
.
unlisten
(
)
;
}
else
{
throw
new
Error
(
Unsupported
target
type
'
{
type
}
'
)
;
}
}
}
getTargetType
(
target
)
{
const
{
typeName
}
=
target
;
if
(
typeName
=
=
"
browsingContextTarget
"
)
{
return
TargetCommand
.
TYPES
.
FRAME
;
}
if
(
typeName
=
=
"
contentProcessTarget
"
|
|
typeName
=
=
"
parentProcessTarget
"
)
{
return
TargetCommand
.
TYPES
.
PROCESS
;
}
if
(
typeName
=
=
"
workerDescriptor
"
|
|
typeName
=
=
"
workerTarget
"
)
{
if
(
target
.
isSharedWorker
)
{
return
TargetCommand
.
TYPES
.
SHARED_WORKER
;
}
if
(
target
.
isServiceWorker
)
{
return
TargetCommand
.
TYPES
.
SERVICE_WORKER
;
}
return
TargetCommand
.
TYPES
.
WORKER
;
}
throw
new
Error
(
"
Unsupported
target
typeName
:
"
+
typeName
)
;
}
_matchTargetType
(
type
target
)
{
return
type
=
=
=
target
.
targetType
;
}
async
watchTargets
(
types
onAvailable
onDestroy
)
{
if
(
typeof
onAvailable
!
=
"
function
"
)
{
throw
new
Error
(
"
TargetCommand
.
watchTargets
expects
a
function
as
second
argument
"
)
;
}
const
targetFronts
=
[
.
.
.
this
.
_targets
]
.
filter
(
targetFront
=
>
types
.
includes
(
targetFront
.
targetType
)
)
;
this
.
_pendingWatchTargetInitialization
.
set
(
onAvailable
new
Set
(
targetFronts
)
)
;
const
promises
=
targetFronts
.
map
(
async
targetFront
=
>
{
try
{
await
targetFront
.
attachAndInitThread
(
this
)
;
}
catch
(
e
)
{
console
.
error
(
"
Error
when
attaching
target
:
"
e
)
;
return
;
}
if
(
this
.
_pendingWatchTargetInitialization
&
&
this
.
_pendingWatchTargetInitialization
.
has
(
onAvailable
)
&
&
!
this
.
_pendingWatchTargetInitialization
.
get
(
onAvailable
)
.
has
(
targetFront
)
)
{
return
;
}
try
{
await
onAvailable
(
{
targetFront
isTargetSwitching
:
false
}
)
;
}
catch
(
e
)
{
console
.
error
(
"
Exception
when
calling
onAvailable
handler
"
e
.
message
e
)
;
}
}
)
;
for
(
const
type
of
types
)
{
this
.
_createListeners
.
on
(
type
onAvailable
)
;
if
(
onDestroy
)
{
this
.
_destroyListeners
.
on
(
type
onDestroy
)
;
}
}
await
Promise
.
all
(
promises
)
;
this
.
_pendingWatchTargetInitialization
.
delete
(
onAvailable
)
;
}
unwatchTargets
(
types
onAvailable
onDestroy
)
{
if
(
typeof
onAvailable
!
=
"
function
"
)
{
throw
new
Error
(
"
TargetCommand
.
unwatchTargets
expects
a
function
as
second
argument
"
)
;
}
for
(
const
type
of
types
)
{
this
.
_createListeners
.
off
(
type
onAvailable
)
;
if
(
onDestroy
)
{
this
.
_destroyListeners
.
off
(
type
onDestroy
)
;
}
}
this
.
_pendingWatchTargetInitialization
.
delete
(
onAvailable
)
;
}
getAllTargets
(
types
)
{
if
(
!
types
?
.
length
)
{
throw
new
Error
(
"
getAllTargets
expects
a
non
-
empty
array
of
types
"
)
;
}
const
targets
=
[
.
.
.
this
.
_targets
]
.
filter
(
target
=
>
types
.
some
(
type
=
>
this
.
_matchTargetType
(
type
target
)
)
)
;
return
targets
;
}
async
getAllFronts
(
targetType
frontType
)
{
const
fronts
=
[
]
;
const
targets
=
this
.
getAllTargets
(
[
targetType
]
)
;
for
(
const
target
of
targets
)
{
const
front
=
await
target
.
getFront
(
frontType
)
;
fronts
.
push
(
front
)
;
}
return
fronts
;
}
async
onLocalTabRemotenessChange
(
targetFront
)
{
if
(
this
.
isServerTargetSwitchingEnabled
(
)
)
{
return
;
}
if
(
targetFront
)
{
await
targetFront
.
once
(
"
target
-
destroyed
"
)
;
}
const
newTarget
=
await
this
.
descriptorFront
.
getTarget
(
)
;
if
(
!
newTarget
)
{
console
.
warn
(
Couldn
'
t
get
the
target
for
descriptor
{
this
.
descriptorFront
.
actorID
}
)
;
return
;
}
this
.
switchToTarget
(
newTarget
)
;
}
async
switchToTarget
(
newTarget
)
{
await
this
.
_onTargetAvailable
(
newTarget
)
;
}
isTargetRegistered
(
targetFront
)
{
return
this
.
_targets
.
has
(
targetFront
)
;
}
isDestroyed
(
)
{
return
this
.
_isDestroyed
;
}
destroy
(
)
{
this
.
stopListening
(
)
;
this
.
_createListeners
.
off
(
)
;
this
.
_destroyListeners
.
off
(
)
;
this
.
_isDestroyed
=
true
;
}
}
TargetCommand
.
TYPES
=
TargetCommand
.
prototype
.
TYPES
=
{
PROCESS
:
"
process
"
FRAME
:
"
frame
"
WORKER
:
"
worker
"
SHARED_WORKER
:
"
shared_worker
"
SERVICE_WORKER
:
"
service_worker
"
}
;
TargetCommand
.
ALL_TYPES
=
TargetCommand
.
prototype
.
ALL_TYPES
=
Object
.
values
(
TargetCommand
.
TYPES
)
;
module
.
exports
=
TargetCommand
;
