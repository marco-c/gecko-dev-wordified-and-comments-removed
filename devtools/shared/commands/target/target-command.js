"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
BROWSERTOOLBOX_FISSION_ENABLED
=
"
devtools
.
browsertoolbox
.
fission
"
;
const
BROWSERTOOLBOX_SCOPE_PREF
=
"
devtools
.
browsertoolbox
.
scope
"
;
const
BROWSERTOOLBOX_SCOPE_EVERYTHING
=
"
everything
"
;
const
BROWSERTOOLBOX_SCOPE_PARENTPROCESS
=
"
parent
-
process
"
;
class
TargetCommand
extends
EventEmitter
{
#
selectedTargetFront
;
constructor
(
{
descriptorFront
commands
}
)
{
super
(
)
;
this
.
commands
=
commands
;
this
.
descriptorFront
=
descriptorFront
;
this
.
rootFront
=
descriptorFront
.
client
.
mainRoot
;
this
.
_updateBrowserToolboxScope
=
this
.
_updateBrowserToolboxScope
.
bind
(
this
)
;
Services
.
prefs
.
addObserver
(
BROWSERTOOLBOX_SCOPE_PREF
this
.
_updateBrowserToolboxScope
)
;
this
.
onLocalTabRemotenessChange
=
this
.
onLocalTabRemotenessChange
.
bind
(
this
)
;
if
(
this
.
descriptorFront
.
isTabDescriptor
)
{
this
.
descriptorFront
.
on
(
"
remoteness
-
change
"
this
.
onLocalTabRemotenessChange
)
;
}
if
(
this
.
isServerTargetSwitchingEnabled
(
)
)
{
this
.
_onFirstTarget
=
new
Promise
(
r
=
>
(
this
.
_resolveOnFirstTarget
=
r
)
)
;
}
this
.
_listenersStarted
=
new
Set
(
)
;
this
.
_targets
=
new
Set
(
)
;
this
.
_pendingWatchTargetInitialization
=
new
Map
(
)
;
this
.
_createListeners
=
new
EventEmitter
(
)
;
this
.
_destroyListeners
=
new
EventEmitter
(
)
;
this
.
_selectListeners
=
new
EventEmitter
(
)
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
this
.
_onTargetSelected
=
this
.
_onTargetSelected
.
bind
(
this
)
;
this
.
legacyImplementation
=
{
}
;
this
.
listenForWorkers
=
this
.
rootFront
.
traits
.
workerConsoleApiMessagesDispatchedToMainThread
=
=
=
false
;
this
.
listenForServiceWorkers
=
false
;
this
.
destroyServiceWorkersOnNavigation
=
false
;
this
.
_gotFirstTopLevelTarget
=
false
;
this
.
_onResourceAvailable
=
this
.
_onResourceAvailable
.
bind
(
this
)
;
}
get
selectedTargetFront
(
)
{
return
this
.
#
selectedTargetFront
|
|
this
.
targetFront
;
}
_updateBrowserToolboxScope
(
)
{
const
fissionBrowserToolboxEnabled
=
Services
.
prefs
.
getBoolPref
(
BROWSERTOOLBOX_FISSION_ENABLED
)
;
if
(
!
fissionBrowserToolboxEnabled
)
{
return
;
}
const
browserToolboxScope
=
Services
.
prefs
.
getCharPref
(
BROWSERTOOLBOX_SCOPE_PREF
)
;
if
(
browserToolboxScope
=
=
BROWSERTOOLBOX_SCOPE_EVERYTHING
)
{
this
.
startListening
(
)
;
}
else
if
(
browserToolboxScope
=
=
BROWSERTOOLBOX_SCOPE_PARENTPROCESS
)
{
const
disabledTargetTypes
=
[
TargetCommand
.
TYPES
.
FRAME
TargetCommand
.
TYPES
.
PROCESS
]
;
for
(
const
type
of
disabledTargetTypes
)
{
this
.
stopListeningForType
(
type
{
isTargetSwitching
:
false
}
)
;
}
}
}
async
_onTargetAvailable
(
targetFront
)
{
targetFront
.
commands
=
this
.
commands
;
const
isTargetSwitching
=
targetFront
.
isTopLevel
;
const
isFirstTarget
=
targetFront
.
isTopLevel
&
&
!
this
.
_gotFirstTopLevelTarget
;
if
(
this
.
_targets
.
has
(
targetFront
)
)
{
if
(
targetFront
!
=
this
.
targetFront
)
{
console
.
error
(
"
Target
is
already
registered
in
the
TargetCommand
"
targetFront
.
actorID
)
;
}
return
;
}
if
(
this
.
isDestroyed
(
)
|
|
targetFront
.
isDestroyedOrBeingDestroyed
(
)
)
{
return
;
}
if
(
targetFront
.
isTopLevel
)
{
if
(
!
isFirstTarget
)
{
this
.
_destroyExistingTargetsOnTargetSwitching
(
)
;
}
this
.
targetFront
=
targetFront
;
this
.
descriptorFront
.
setTarget
(
targetFront
)
;
this
.
#
selectedTargetFront
=
null
;
if
(
isFirstTarget
&
&
this
.
isServerTargetSwitchingEnabled
(
)
)
{
this
.
_gotFirstTopLevelTarget
=
true
;
this
.
_resolveOnFirstTarget
(
)
;
}
}
const
targetType
=
this
.
getTargetType
(
targetFront
)
;
targetFront
.
setTargetType
(
targetType
)
;
this
.
_targets
.
add
(
targetFront
)
;
try
{
await
targetFront
.
attachAndInitThread
(
this
)
;
}
catch
(
e
)
{
console
.
error
(
"
Error
when
attaching
target
:
"
e
)
;
this
.
_targets
.
delete
(
targetFront
)
;
return
;
}
for
(
const
targetFrontsSet
of
this
.
_pendingWatchTargetInitialization
.
values
(
)
)
{
targetFrontsSet
.
delete
(
targetFront
)
;
}
if
(
this
.
isDestroyed
(
)
|
|
targetFront
.
isDestroyedOrBeingDestroyed
(
)
)
{
return
;
}
await
this
.
_createListeners
.
emitAsync
(
targetType
{
targetFront
isTargetSwitching
}
)
;
if
(
targetFront
.
isTopLevel
&
&
!
isFirstTarget
)
{
await
this
.
startListening
(
{
isTargetSwitching
:
true
}
)
;
}
this
.
emit
(
"
processed
-
available
-
target
"
targetFront
)
;
if
(
isTargetSwitching
)
{
this
.
emit
(
"
switched
-
target
"
targetFront
)
;
}
}
_destroyExistingTargetsOnTargetSwitching
(
)
{
const
destroyedTargets
=
[
]
;
for
(
const
target
of
this
.
_targets
)
{
const
isDestroyedTargetSwitching
=
target
=
=
this
.
targetFront
;
const
isServiceWorker
=
target
.
targetType
=
=
=
this
.
TYPES
.
SERVICE_WORKER
;
const
isPopup
=
target
.
targetForm
.
isPopup
;
if
(
!
isPopup
&
&
(
!
isServiceWorker
|
|
this
.
destroyServiceWorkersOnNavigation
)
)
{
this
.
_onTargetDestroyed
(
target
{
isTargetSwitching
:
isDestroyedTargetSwitching
shouldDestroyTargetFront
:
!
isServiceWorker
}
)
;
destroyedTargets
.
push
(
target
)
;
}
}
this
.
stopListening
(
{
isTargetSwitching
:
true
}
)
;
for
(
const
target
of
destroyedTargets
)
{
this
.
_targets
.
delete
(
target
)
;
}
}
_onTargetDestroyed
(
targetFront
{
isTargetSwitching
=
false
shouldDestroyTargetFront
=
true
}
=
{
}
)
{
if
(
targetFront
=
=
this
.
targetFront
)
{
isTargetSwitching
=
true
;
}
this
.
_destroyListeners
.
emit
(
targetFront
.
targetType
{
targetFront
isTargetSwitching
}
)
;
this
.
_targets
.
delete
(
targetFront
)
;
if
(
this
.
#
selectedTargetFront
=
=
targetFront
)
{
if
(
isTargetSwitching
)
{
this
.
#
selectedTargetFront
=
null
;
}
else
{
this
.
selectTarget
(
this
.
targetFront
)
;
}
}
if
(
shouldDestroyTargetFront
)
{
targetFront
.
baseFrontClassDestroy
(
)
;
targetFront
.
destroy
(
)
;
delete
targetFront
.
commands
;
}
}
async
_onTargetSelected
(
targetFront
)
{
if
(
this
.
#
selectedTargetFront
=
=
targetFront
)
{
return
;
}
this
.
#
selectedTargetFront
=
targetFront
;
const
targetType
=
this
.
getTargetType
(
targetFront
)
;
await
this
.
_selectListeners
.
emitAsync
(
targetType
{
targetFront
}
)
;
}
_setListening
(
type
value
)
{
if
(
value
)
{
this
.
_listenersStarted
.
add
(
type
)
;
}
else
{
this
.
_listenersStarted
.
delete
(
type
)
;
}
}
_isListening
(
type
)
{
return
this
.
_listenersStarted
.
has
(
type
)
;
}
hasTargetWatcherSupport
(
targetTypeOrTrait
)
{
if
(
this
.
descriptorFront
.
isBrowserProcessDescriptor
&
&
!
Services
.
prefs
.
getBoolPref
(
BROWSERTOOLBOX_FISSION_ENABLED
false
)
)
{
return
false
;
}
if
(
targetTypeOrTrait
)
{
return
!
!
this
.
watcherFront
?
.
traits
[
targetTypeOrTrait
]
;
}
return
!
!
this
.
watcherFront
;
}
async
startListening
(
{
isTargetSwitching
=
false
}
=
{
}
)
{
if
(
!
this
.
isServerTargetSwitchingEnabled
(
)
&
&
!
this
.
_gotFirstTopLevelTarget
)
{
await
this
.
_createFirstTarget
(
)
;
}
if
(
!
this
.
watcherFront
)
{
const
supportsWatcher
=
this
.
descriptorFront
.
traits
?
.
watcher
;
if
(
supportsWatcher
)
{
this
.
watcherFront
=
await
this
.
descriptorFront
.
getWatcher
(
)
;
this
.
watcherFront
.
on
(
"
target
-
available
"
this
.
_onTargetAvailable
)
;
this
.
watcherFront
.
on
(
"
target
-
destroyed
"
this
.
_onTargetDestroyed
)
;
}
}
const
types
=
this
.
_computeTargetTypes
(
)
;
for
(
const
type
of
types
)
{
if
(
this
.
_isListening
(
type
)
)
{
continue
;
}
this
.
_setListening
(
type
true
)
;
if
(
this
.
hasTargetWatcherSupport
(
type
)
)
{
if
(
!
isTargetSwitching
)
{
await
this
.
watcherFront
.
watchTargets
(
type
)
;
}
}
else
if
(
LegacyTargetWatchers
[
type
]
)
{
if
(
!
this
.
legacyImplementation
[
type
]
)
{
this
.
legacyImplementation
[
type
]
=
new
LegacyTargetWatchers
[
type
]
(
this
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
this
.
commands
)
;
}
await
this
.
legacyImplementation
[
type
]
.
listen
(
)
;
}
else
{
throw
new
Error
(
Unsupported
target
type
'
{
type
}
'
)
;
}
}
if
(
!
this
.
_watchingDocumentEvent
&
&
!
this
.
isDestroyed
(
)
)
{
this
.
_watchingDocumentEvent
=
true
;
await
this
.
commands
.
resourceCommand
.
watchResources
(
[
this
.
commands
.
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
]
{
onAvailable
:
this
.
_onResourceAvailable
}
)
;
}
if
(
this
.
isServerTargetSwitchingEnabled
(
)
)
{
await
this
.
_onFirstTarget
;
}
}
async
_createFirstTarget
(
)
{
this
.
targetFront
=
await
this
.
descriptorFront
.
getTarget
(
)
;
this
.
targetFront
.
setTargetType
(
this
.
getTargetType
(
this
.
targetFront
)
)
;
this
.
targetFront
.
setIsTopLevel
(
true
)
;
this
.
_gotFirstTopLevelTarget
=
true
;
this
.
targetFront
.
commands
=
this
.
commands
;
this
.
_targets
.
add
(
this
.
targetFront
)
;
}
_computeTargetTypes
(
)
{
let
types
=
[
]
;
if
(
this
.
descriptorFront
.
isTabDescriptor
&
&
this
.
hasTargetWatcherSupport
(
TargetCommand
.
TYPES
.
FRAME
)
)
{
types
=
[
TargetCommand
.
TYPES
.
FRAME
]
;
}
else
if
(
this
.
descriptorFront
.
isBrowserProcessDescriptor
)
{
const
fissionBrowserToolboxEnabled
=
Services
.
prefs
.
getBoolPref
(
BROWSERTOOLBOX_FISSION_ENABLED
)
;
const
browserToolboxScope
=
Services
.
prefs
.
getCharPref
(
BROWSERTOOLBOX_SCOPE_PREF
)
;
if
(
fissionBrowserToolboxEnabled
&
&
browserToolboxScope
=
=
BROWSERTOOLBOX_SCOPE_EVERYTHING
)
{
types
=
TargetCommand
.
ALL_TYPES
;
}
}
if
(
this
.
listenForWorkers
&
&
!
types
.
includes
(
TargetCommand
.
TYPES
.
WORKER
)
)
{
types
.
push
(
TargetCommand
.
TYPES
.
WORKER
)
;
}
if
(
this
.
listenForWorkers
&
&
!
types
.
includes
(
TargetCommand
.
TYPES
.
SHARED_WORKER
)
)
{
types
.
push
(
TargetCommand
.
TYPES
.
SHARED_WORKER
)
;
}
if
(
this
.
listenForServiceWorkers
&
&
!
types
.
includes
(
TargetCommand
.
TYPES
.
SERVICE_WORKER
)
)
{
types
.
push
(
TargetCommand
.
TYPES
.
SERVICE_WORKER
)
;
}
return
types
;
}
stopListening
(
{
isTargetSwitching
=
false
}
=
{
}
)
{
if
(
this
.
_watchingDocumentEvent
&
&
!
isTargetSwitching
)
{
this
.
commands
.
resourceCommand
.
unwatchResources
(
[
this
.
commands
.
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
]
{
onAvailable
:
this
.
_onResourceAvailable
}
)
;
this
.
_watchingDocumentEvent
=
false
;
}
for
(
const
type
of
TargetCommand
.
ALL_TYPES
)
{
this
.
stopListeningForType
(
type
{
isTargetSwitching
}
)
;
}
}
stopListeningForType
(
type
{
isTargetSwitching
}
)
{
if
(
!
this
.
_isListening
(
type
)
)
{
return
;
}
this
.
_setListening
(
type
false
)
;
if
(
this
.
hasTargetWatcherSupport
(
type
)
)
{
if
(
!
isTargetSwitching
&
&
!
this
.
watcherFront
.
isDestroyed
(
)
)
{
this
.
watcherFront
.
unwatchTargets
(
type
)
;
}
}
else
if
(
this
.
legacyImplementation
[
type
]
)
{
this
.
legacyImplementation
[
type
]
.
unlisten
(
{
isTargetSwitching
}
)
;
}
else
{
throw
new
Error
(
Unsupported
target
type
'
{
type
}
'
)
;
}
}
getTargetType
(
target
)
{
const
{
typeName
}
=
target
;
if
(
typeName
=
=
"
windowGlobalTarget
"
)
{
return
TargetCommand
.
TYPES
.
FRAME
;
}
if
(
typeName
=
=
"
contentProcessTarget
"
|
|
typeName
=
=
"
parentProcessTarget
"
)
{
return
TargetCommand
.
TYPES
.
PROCESS
;
}
if
(
typeName
=
=
"
workerDescriptor
"
|
|
typeName
=
=
"
workerTarget
"
)
{
if
(
target
.
isSharedWorker
)
{
return
TargetCommand
.
TYPES
.
SHARED_WORKER
;
}
if
(
target
.
isServiceWorker
)
{
return
TargetCommand
.
TYPES
.
SERVICE_WORKER
;
}
return
TargetCommand
.
TYPES
.
WORKER
;
}
throw
new
Error
(
"
Unsupported
target
typeName
:
"
+
typeName
)
;
}
_matchTargetType
(
type
target
)
{
return
type
=
=
=
target
.
targetType
;
}
_onResourceAvailable
(
resources
)
{
for
(
const
resource
of
resources
)
{
if
(
resource
.
resourceType
=
=
=
this
.
commands
.
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
)
{
const
{
targetFront
}
=
resource
;
if
(
resource
.
title
!
=
=
undefined
&
&
targetFront
?
.
setTitle
)
{
targetFront
.
setTitle
(
resource
.
title
)
;
}
if
(
resource
.
url
!
=
=
undefined
&
&
targetFront
?
.
setUrl
)
{
targetFront
.
setUrl
(
resource
.
url
)
;
}
}
}
}
async
watchTargets
(
options
=
{
}
)
{
const
availableOptions
=
[
"
types
"
"
onAvailable
"
"
onDestroyed
"
"
onSelected
"
]
;
const
unsupportedKeys
=
Object
.
keys
(
options
)
.
filter
(
key
=
>
!
availableOptions
.
includes
(
key
)
)
;
if
(
unsupportedKeys
.
length
>
0
)
{
throw
new
Error
(
TargetCommand
.
watchTargets
does
not
expect
the
following
options
:
{
unsupportedKeys
.
join
(
"
"
)
}
)
;
}
const
{
types
onAvailable
onDestroyed
onSelected
}
=
options
;
if
(
typeof
onAvailable
!
=
"
function
"
)
{
throw
new
Error
(
"
TargetCommand
.
watchTargets
expects
a
function
for
the
onAvailable
option
"
)
;
}
for
(
const
type
of
types
)
{
if
(
!
this
.
_isValidTargetType
(
type
)
)
{
throw
new
Error
(
TargetCommand
.
watchTargets
invoked
with
an
unknown
type
:
"
{
type
}
"
)
;
}
}
const
targetFronts
=
[
.
.
.
this
.
_targets
]
.
filter
(
targetFront
=
>
types
.
includes
(
targetFront
.
targetType
)
)
;
this
.
_pendingWatchTargetInitialization
.
set
(
onAvailable
new
Set
(
targetFronts
)
)
;
const
promises
=
targetFronts
.
map
(
async
targetFront
=
>
{
try
{
await
targetFront
.
attachAndInitThread
(
this
)
;
}
catch
(
e
)
{
console
.
error
(
"
Error
when
attaching
target
:
"
e
)
;
return
;
}
if
(
this
.
_pendingWatchTargetInitialization
&
&
this
.
_pendingWatchTargetInitialization
.
has
(
onAvailable
)
&
&
!
this
.
_pendingWatchTargetInitialization
.
get
(
onAvailable
)
.
has
(
targetFront
)
)
{
return
;
}
try
{
await
onAvailable
(
{
targetFront
isTargetSwitching
:
false
}
)
;
}
catch
(
e
)
{
console
.
error
(
"
Exception
when
calling
onAvailable
handler
"
e
.
message
e
)
;
}
}
)
;
for
(
const
type
of
types
)
{
this
.
_createListeners
.
on
(
type
onAvailable
)
;
if
(
onDestroyed
)
{
this
.
_destroyListeners
.
on
(
type
onDestroyed
)
;
}
if
(
onSelected
)
{
this
.
_selectListeners
.
on
(
type
onSelected
)
;
}
}
await
Promise
.
all
(
promises
)
;
this
.
_pendingWatchTargetInitialization
.
delete
(
onAvailable
)
;
}
unwatchTargets
(
options
=
{
}
)
{
const
availableOptions
=
[
"
types
"
"
onAvailable
"
"
onDestroyed
"
"
onSelected
"
]
;
const
unsupportedKeys
=
Object
.
keys
(
options
)
.
filter
(
key
=
>
!
availableOptions
.
includes
(
key
)
)
;
if
(
unsupportedKeys
.
length
>
0
)
{
throw
new
Error
(
TargetCommand
.
unwatchTargets
does
not
expect
the
following
options
:
{
unsupportedKeys
.
join
(
"
"
)
}
)
;
}
const
{
types
onAvailable
onDestroyed
onSelected
}
=
options
;
if
(
typeof
onAvailable
!
=
"
function
"
)
{
throw
new
Error
(
"
TargetCommand
.
unwatchTargets
expects
a
function
for
the
onAvailable
option
"
)
;
}
for
(
const
type
of
types
)
{
if
(
!
this
.
_isValidTargetType
(
type
)
)
{
throw
new
Error
(
TargetCommand
.
unwatchTargets
invoked
with
an
unknown
type
:
"
{
type
}
"
)
;
}
this
.
_createListeners
.
off
(
type
onAvailable
)
;
if
(
onDestroyed
)
{
this
.
_destroyListeners
.
off
(
type
onDestroyed
)
;
}
if
(
onSelected
)
{
this
.
_selectListeners
.
off
(
type
onSelected
)
;
}
}
this
.
_pendingWatchTargetInitialization
.
delete
(
onAvailable
)
;
}
getAllTargets
(
types
)
{
if
(
!
types
?
.
length
)
{
throw
new
Error
(
"
getAllTargets
expects
a
non
-
empty
array
of
types
"
)
;
}
const
targets
=
[
.
.
.
this
.
_targets
]
.
filter
(
target
=
>
types
.
some
(
type
=
>
this
.
_matchTargetType
(
type
target
)
)
)
;
return
targets
;
}
async
getAllTargetsInSelectedTargetTree
(
types
)
{
const
allTargets
=
this
.
getAllTargets
(
types
)
;
if
(
this
.
isTopLevelTargetSelected
(
)
)
{
return
allTargets
;
}
const
targets
=
[
this
.
selectedTargetFront
]
;
for
(
const
target
of
allTargets
)
{
const
isInSelectedTree
=
await
target
.
isTargetAnAncestor
(
this
.
selectedTargetFront
)
;
if
(
isInSelectedTree
)
{
targets
.
push
(
target
)
;
}
}
return
targets
;
}
async
getAllFronts
(
targetTypes
frontType
{
onlyInSelectedTargetTree
=
false
}
=
{
}
)
{
if
(
!
Array
.
isArray
(
targetTypes
)
|
|
!
targetTypes
?
.
length
)
{
throw
new
Error
(
"
getAllFronts
expects
a
non
-
empty
array
of
target
types
"
)
;
}
const
promises
=
[
]
;
const
targets
=
!
onlyInSelectedTargetTree
?
this
.
getAllTargets
(
targetTypes
)
:
await
this
.
getAllTargetsInSelectedTargetTree
(
targetTypes
)
;
for
(
const
target
of
targets
)
{
if
(
(
frontType
=
=
"
thread
"
&
&
!
target
.
targetForm
.
threadActor
)
|
|
(
frontType
=
=
"
console
"
&
&
!
target
.
targetForm
.
consoleActor
)
)
{
continue
;
}
promises
.
push
(
target
.
getFront
(
frontType
)
)
;
}
return
Promise
.
all
(
promises
)
;
}
async
onLocalTabRemotenessChange
(
targetFront
)
{
if
(
this
.
isServerTargetSwitchingEnabled
(
)
)
{
return
;
}
if
(
targetFront
)
{
await
targetFront
.
once
(
"
target
-
destroyed
"
)
;
}
const
newTarget
=
await
this
.
descriptorFront
.
getTarget
(
)
;
if
(
!
newTarget
)
{
console
.
warn
(
Couldn
'
t
get
the
target
for
descriptor
{
this
.
descriptorFront
.
actorID
}
)
;
return
;
}
this
.
switchToTarget
(
newTarget
)
;
}
async
reloadTopLevelTarget
(
bypassCache
=
false
)
{
if
(
!
this
.
descriptorFront
.
traits
.
supportsReloadDescriptor
)
{
throw
new
Error
(
"
The
top
level
target
doesn
'
t
support
being
reloaded
"
)
;
}
const
{
onResource
:
onReloaded
}
=
await
this
.
commands
.
resourceCommand
.
waitForNextResource
(
this
.
commands
.
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
{
ignoreExistingResources
:
true
predicate
(
resource
)
{
return
resource
.
name
=
=
"
dom
-
complete
"
;
}
}
)
;
await
this
.
descriptorFront
.
reloadDescriptor
(
{
bypassCache
}
)
;
await
onReloaded
;
}
async
switchToTarget
(
newTarget
)
{
await
this
.
_onTargetAvailable
(
newTarget
)
;
}
selectTarget
(
targetFront
)
{
return
this
.
_onTargetSelected
(
targetFront
)
;
}
isTopLevelTargetSelected
(
)
{
return
this
.
selectedTargetFront
=
=
=
this
.
targetFront
;
}
isNonTopLevelTargetSelected
(
)
{
return
this
.
selectedTargetFront
!
=
=
this
.
targetFront
;
}
isTargetRegistered
(
targetFront
)
{
return
this
.
_targets
.
has
(
targetFront
)
;
}
getParentTarget
(
targetFront
)
{
const
{
parentInnerWindowId
}
=
targetFront
.
targetForm
;
if
(
parentInnerWindowId
)
{
const
targets
=
this
.
getAllTargets
(
[
TargetCommand
.
TYPES
.
FRAME
]
)
;
const
parent
=
targets
.
find
(
target
=
>
target
.
innerWindowId
=
=
parentInnerWindowId
)
;
if
(
parent
)
{
return
parent
;
}
}
return
this
.
watcherFront
.
getParentWindowGlobalTarget
(
targetFront
.
browsingContextID
)
;
}
isDestroyed
(
)
{
return
this
.
_isDestroyed
;
}
isServerTargetSwitchingEnabled
(
)
{
if
(
this
.
descriptorFront
.
isServerTargetSwitchingEnabled
)
{
return
this
.
descriptorFront
.
isServerTargetSwitchingEnabled
(
)
;
}
return
false
;
}
_isValidTargetType
(
type
)
{
return
this
.
ALL_TYPES
.
includes
(
type
)
;
}
destroy
(
)
{
this
.
stopListening
(
)
;
this
.
_createListeners
.
off
(
)
;
this
.
_destroyListeners
.
off
(
)
;
this
.
_selectListeners
.
off
(
)
;
this
.
#
selectedTargetFront
=
null
;
this
.
_isDestroyed
=
true
;
Services
.
prefs
.
removeObserver
(
BROWSERTOOLBOX_SCOPE_PREF
this
.
_updateBrowserToolboxScope
)
;
}
}
TargetCommand
.
TYPES
=
TargetCommand
.
prototype
.
TYPES
=
{
PROCESS
:
"
process
"
FRAME
:
"
frame
"
WORKER
:
"
worker
"
SHARED_WORKER
:
"
shared_worker
"
SERVICE_WORKER
:
"
service_worker
"
}
;
TargetCommand
.
ALL_TYPES
=
TargetCommand
.
prototype
.
ALL_TYPES
=
Object
.
values
(
TargetCommand
.
TYPES
)
;
const
LegacyTargetWatchers
=
{
}
;
loader
.
lazyRequireGetter
(
LegacyTargetWatchers
TargetCommand
.
TYPES
.
PROCESS
"
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
processes
-
watcher
"
)
;
loader
.
lazyRequireGetter
(
LegacyTargetWatchers
TargetCommand
.
TYPES
.
WORKER
"
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
workers
-
watcher
"
)
;
loader
.
lazyRequireGetter
(
LegacyTargetWatchers
TargetCommand
.
TYPES
.
SHARED_WORKER
"
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
sharedworkers
-
watcher
"
)
;
loader
.
lazyRequireGetter
(
LegacyTargetWatchers
TargetCommand
.
TYPES
.
SERVICE_WORKER
"
devtools
/
shared
/
commands
/
target
/
legacy
-
target
-
watchers
/
legacy
-
serviceworkers
-
watcher
"
)
;
module
.
exports
=
TargetCommand
;
