"
use
strict
"
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
TRACER_LOG_METHODS
"
"
resource
:
/
/
devtools
/
shared
/
specs
/
tracer
.
js
"
true
)
;
class
TracerCommand
extends
EventEmitter
{
constructor
(
{
commands
}
)
{
super
(
)
;
this
.
#
targetConfigurationCommand
=
commands
.
targetConfigurationCommand
;
this
.
#
resourceCommand
=
commands
.
resourceCommand
;
}
isTracingEnabled
=
false
;
isTracingActive
=
false
;
#
resourceCommand
;
#
targetConfigurationCommand
;
async
initialize
(
)
{
return
this
.
#
resourceCommand
.
watchResources
(
[
this
.
#
resourceCommand
.
TYPES
.
JSTRACER_STATE
]
{
onAvailable
:
this
.
onResourcesAvailable
}
)
;
}
destroy
(
)
{
this
.
#
resourceCommand
.
unwatchResources
(
[
this
.
#
resourceCommand
.
TYPES
.
JSTRACER_STATE
]
{
onAvailable
:
this
.
onResourcesAvailable
}
)
;
}
onResourcesAvailable
=
resources
=
>
{
for
(
const
resource
of
resources
)
{
if
(
resource
.
resourceType
!
=
this
.
#
resourceCommand
.
TYPES
.
JSTRACER_STATE
)
{
continue
;
}
if
(
resource
.
enabled
)
{
resource
.
targetFront
.
getJsTracerCollectedFramesArray
(
)
.
length
=
0
;
}
if
(
resource
.
enabled
=
=
this
.
isTracingActive
&
&
resource
.
enabled
=
=
this
.
isTracingEnabled
)
{
continue
;
}
this
.
isTracingActive
=
resource
.
enabled
;
this
.
isTracingEnabled
=
resource
.
enabled
;
this
.
emit
(
"
toggle
"
)
;
}
}
;
getTracingOptions
(
)
{
const
logMethod
=
Services
.
prefs
.
getStringPref
(
"
devtools
.
debugger
.
javascript
-
tracing
-
log
-
method
"
"
"
)
;
return
{
logMethod
traceDOMMutations
:
logMethod
=
=
TRACER_LOG_METHODS
.
DEBUGGER_SIDEBAR
?
[
"
add
"
"
attributes
"
"
remove
"
]
:
null
traceValues
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
javascript
-
tracing
-
values
"
false
)
traceOnNextInteraction
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
javascript
-
tracing
-
on
-
next
-
interaction
"
false
)
traceOnNextLoad
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
javascript
-
tracing
-
on
-
next
-
load
"
false
)
traceFunctionReturn
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
javascript
-
tracing
-
function
-
return
"
false
)
}
;
}
async
toggle
(
)
{
this
.
isTracingEnabled
=
!
this
.
isTracingEnabled
;
await
this
.
emitAsync
(
"
toggle
"
)
;
await
this
.
#
targetConfigurationCommand
.
updateConfiguration
(
{
tracerOptions
:
this
.
isTracingEnabled
?
this
.
getTracingOptions
(
)
:
undefined
}
)
;
}
}
module
.
exports
=
TracerCommand
;
