"
use
strict
"
;
class
TracerCommand
{
constructor
(
{
commands
}
)
{
this
.
#
targetConfigurationCommand
=
commands
.
targetConfigurationCommand
;
this
.
#
resourceCommand
=
commands
.
resourceCommand
;
}
#
resourceCommand
;
#
targetConfigurationCommand
;
#
isTracing
=
false
;
async
initialize
(
)
{
return
this
.
#
resourceCommand
.
watchResources
(
[
this
.
#
resourceCommand
.
TYPES
.
JSTRACER_STATE
]
{
onAvailable
:
this
.
onResourcesAvailable
}
)
;
}
destroy
(
)
{
this
.
#
resourceCommand
.
unwatchResources
(
[
this
.
#
resourceCommand
.
TYPES
.
JSTRACER_STATE
]
{
onAvailable
:
this
.
onResourcesAvailable
}
)
;
}
onResourcesAvailable
=
resources
=
>
{
for
(
const
resource
of
resources
)
{
if
(
resource
.
resourceType
!
=
this
.
#
resourceCommand
.
TYPES
.
JSTRACER_STATE
)
{
continue
;
}
this
.
#
isTracing
=
resource
.
enabled
;
}
}
;
#
getTracingOptions
(
)
{
return
{
logMethod
:
Services
.
prefs
.
getStringPref
(
"
devtools
.
debugger
.
javascript
-
tracing
-
log
-
method
"
"
"
)
traceValues
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
javascript
-
tracing
-
values
"
false
)
traceOnNextInteraction
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
javascript
-
tracing
-
on
-
next
-
interaction
"
false
)
traceOnNextLoad
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
javascript
-
tracing
-
on
-
next
-
load
"
false
)
traceFunctionReturn
:
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
javascript
-
tracing
-
function
-
return
"
false
)
}
;
}
async
toggle
(
)
{
this
.
#
isTracing
=
!
this
.
#
isTracing
;
await
this
.
#
targetConfigurationCommand
.
updateConfiguration
(
{
tracerOptions
:
this
.
#
isTracing
?
this
.
#
getTracingOptions
(
)
:
undefined
}
)
;
}
}
module
.
exports
=
TracerCommand
;
