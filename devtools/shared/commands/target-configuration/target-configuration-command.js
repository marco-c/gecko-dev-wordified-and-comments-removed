"
use
strict
"
;
class
TargetConfigurationCommand
{
constructor
(
{
commands
watcherFront
}
)
{
this
.
_commands
=
commands
;
this
.
_watcherFront
=
watcherFront
;
}
async
getFront
(
)
{
const
front
=
await
this
.
_watcherFront
.
getTargetConfigurationActor
(
)
;
if
(
!
this
.
_configuration
)
{
this
.
_configuration
=
front
.
initialConfiguration
;
}
return
front
;
}
_hasTargetWatcherSupport
(
)
{
return
this
.
_commands
.
targetCommand
.
hasTargetWatcherSupport
(
)
;
}
get
configuration
(
)
{
return
this
.
_configuration
|
|
{
}
;
}
async
updateConfiguration
(
configuration
)
{
if
(
this
.
_hasTargetWatcherSupport
(
)
)
{
const
front
=
await
this
.
getFront
(
)
;
const
updatedConfiguration
=
await
front
.
updateConfiguration
(
configuration
)
;
this
.
_configuration
=
updatedConfiguration
;
}
else
{
await
this
.
_commands
.
targetCommand
.
targetFront
.
reconfigure
(
{
options
:
configuration
}
)
;
}
}
async
isJavascriptEnabled
(
)
{
if
(
this
.
_hasTargetWatcherSupport
(
)
&
&
typeof
this
.
configuration
.
javascriptEnabled
!
=
=
"
undefined
"
)
{
return
this
.
configuration
.
javascriptEnabled
;
}
return
this
.
_commands
.
targetCommand
.
targetFront
.
_javascriptEnabled
;
}
async
setTouchEventsOverride
(
flag
)
{
await
this
.
updateConfiguration
(
{
touchEventsOverride
:
flag
}
)
;
const
responsiveFront
=
await
this
.
_commands
.
targetCommand
.
targetFront
.
getFront
(
"
responsive
"
)
;
const
reloadNeeded
=
await
responsiveFront
.
toggleTouchSimulator
(
{
enable
:
flag
=
=
=
"
enabled
"
}
)
;
return
reloadNeeded
;
}
async
simulateScreenOrientationChange
(
{
type
angle
isViewportRotated
}
)
{
await
this
.
updateConfiguration
(
{
rdmPaneOrientation
:
{
type
angle
}
}
)
;
if
(
!
isViewportRotated
)
{
return
;
}
const
responsiveFront
=
await
this
.
_commands
.
targetCommand
.
targetFront
.
getFront
(
"
responsive
"
)
;
await
responsiveFront
.
dispatchOrientationChangeEvent
(
)
;
}
}
module
.
exports
=
TargetConfigurationCommand
;
