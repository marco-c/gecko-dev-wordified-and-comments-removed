"
use
strict
"
;
const
Commands
=
{
inspectedWindowCommand
:
"
devtools
/
shared
/
commands
/
inspected
-
window
/
inspected
-
window
-
command
"
inspectorCommand
:
"
devtools
/
shared
/
commands
/
inspector
/
inspector
-
command
"
resourceCommand
:
"
devtools
/
shared
/
commands
/
resource
/
resource
-
command
"
rootResourceCommand
:
"
devtools
/
shared
/
commands
/
root
-
resource
/
root
-
resource
-
command
"
scriptCommand
:
"
devtools
/
shared
/
commands
/
script
/
script
-
command
"
targetCommand
:
"
devtools
/
shared
/
commands
/
target
/
target
-
command
"
targetConfigurationCommand
:
"
devtools
/
shared
/
commands
/
target
-
configuration
/
target
-
configuration
-
command
"
threadConfigurationCommand
:
"
devtools
/
shared
/
commands
/
thread
-
configuration
/
thread
-
configuration
-
command
"
}
;
async
function
createCommandsDictionary
(
descriptorFront
)
{
let
watcherFront
;
const
supportsWatcher
=
descriptorFront
.
traits
?
.
watcher
;
if
(
supportsWatcher
)
{
watcherFront
=
await
descriptorFront
.
getWatcher
(
)
;
}
const
{
client
}
=
descriptorFront
;
const
dictionary
=
{
client
descriptorFront
watcherFront
waitForRequestsToSettle
(
)
{
return
descriptorFront
.
client
.
waitForRequestsToSettle
(
)
;
}
async
destroy
(
)
{
await
descriptorFront
.
destroy
(
)
;
await
client
.
close
(
)
;
}
}
;
for
(
const
name
in
Commands
)
{
loader
.
lazyGetter
(
dictionary
name
(
)
=
>
{
const
Constructor
=
require
(
Commands
[
name
]
)
;
return
new
Constructor
(
{
commands
:
dictionary
descriptorFront
watcherFront
}
)
;
}
)
;
}
return
dictionary
;
}
exports
.
createCommandsDictionary
=
createCommandsDictionary
;
