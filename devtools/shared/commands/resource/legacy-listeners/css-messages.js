"
use
strict
"
;
const
ResourceCommand
=
require
(
"
resource
:
/
/
devtools
/
shared
/
commands
/
resource
/
resource
-
command
.
js
"
)
;
const
{
MESSAGE_CATEGORY
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
constants
.
js
"
)
;
module
.
exports
=
async
function
(
{
targetCommand
targetFront
onAvailable
}
)
{
const
isAllowed
=
typeof
targetFront
.
ensureCSSErrorReportingEnabled
=
=
"
function
"
&
&
(
targetFront
.
isTopLevel
|
|
targetFront
.
targetType
=
=
=
targetCommand
.
TYPES
.
FRAME
)
;
if
(
!
isAllowed
)
{
return
;
}
const
webConsoleFront
=
await
targetFront
.
getFront
(
"
console
"
)
;
if
(
webConsoleFront
.
isDestroyed
(
)
)
{
return
;
}
await
webConsoleFront
.
startListeners
(
[
"
PageError
"
]
)
;
const
{
messages
}
=
await
webConsoleFront
.
getCachedMessages
(
[
"
PageError
"
]
)
;
const
cachedMessages
=
[
]
;
for
(
const
message
of
messages
)
{
if
(
message
.
pageError
?
.
category
!
=
=
MESSAGE_CATEGORY
.
CSS_PARSER
)
{
continue
;
}
message
.
resourceType
=
ResourceCommand
.
TYPES
.
CSS_MESSAGE
;
message
.
cssSelectors
=
message
.
pageError
.
cssSelectors
;
delete
message
.
pageError
.
cssSelectors
;
cachedMessages
.
push
(
message
)
;
}
onAvailable
(
cachedMessages
)
;
webConsoleFront
.
on
(
"
pageError
"
message
=
>
{
if
(
message
.
pageError
.
category
!
=
=
MESSAGE_CATEGORY
.
CSS_PARSER
)
{
return
;
}
message
.
resourceType
=
ResourceCommand
.
TYPES
.
CSS_MESSAGE
;
message
.
cssSelectors
=
message
.
pageError
.
cssSelectors
;
delete
message
.
pageError
.
cssSelectors
;
onAvailable
(
[
message
]
)
;
}
)
;
await
targetFront
.
ensureCSSErrorReportingEnabled
(
)
;
}
;
