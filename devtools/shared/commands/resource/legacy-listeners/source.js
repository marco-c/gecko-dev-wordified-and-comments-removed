"
use
strict
"
;
const
ResourceCommand
=
require
(
"
devtools
/
shared
/
commands
/
resource
/
resource
-
command
"
)
;
module
.
exports
=
async
function
(
{
targetCommand
targetFront
onAvailable
}
)
{
const
isBrowserToolbox
=
targetCommand
.
descriptorFront
.
isParentProcessDescriptor
;
const
isNonTopLevelFrameTarget
=
!
targetFront
.
isTopLevel
&
&
targetFront
.
targetType
=
=
=
targetCommand
.
TYPES
.
FRAME
;
if
(
isBrowserToolbox
&
&
isNonTopLevelFrameTarget
)
{
return
;
}
const
threadFront
=
await
targetFront
.
getFront
(
"
thread
"
)
;
const
sourcesActorIDCache
=
new
Set
(
)
;
threadFront
.
on
(
"
newSource
"
(
{
source
}
)
=
>
{
if
(
sourcesActorIDCache
.
has
(
source
.
actor
)
)
{
return
;
}
sourcesActorIDCache
.
add
(
source
.
actor
)
;
source
.
resourceType
=
ResourceCommand
.
TYPES
.
SOURCE
;
onAvailable
(
[
source
]
)
;
}
)
;
let
sources
;
try
{
sources
=
await
threadFront
.
sources
(
)
;
}
catch
(
e
)
{
if
(
threadFront
.
isDestroyed
(
)
)
{
return
;
}
throw
e
;
}
sources
=
sources
.
filter
(
source
=
>
{
return
!
sourcesActorIDCache
.
has
(
source
.
actor
)
;
}
)
;
for
(
const
source
of
sources
)
{
sourcesActorIDCache
.
add
(
source
.
actor
)
;
source
.
resourceType
=
ResourceCommand
.
TYPES
.
SOURCE
;
}
onAvailable
(
sources
)
;
}
;
