"
use
strict
"
;
const
{
MESSAGE_CATEGORY
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
constants
.
js
"
)
;
const
httpServer
=
createTestHTTPServer
(
)
;
httpServer
.
registerPathHandler
(
/
test_css_messages
.
html
(
req
res
)
=
>
{
res
.
setStatusLine
(
req
.
httpVersion
200
"
OK
"
)
;
res
.
write
(
<
meta
charset
=
utf8
>
<
style
>
html
{
body
{
color
:
bloup
;
}
}
<
/
style
>
Test
CSS
Messages
)
;
}
)
;
const
TEST_URI
=
http
:
/
/
localhost
:
{
httpServer
.
identity
.
primaryPort
}
/
test_css_messages
.
html
;
add_task
(
async
function
(
)
{
await
testWatchingCssMessages
(
)
;
await
testWatchingCachedCssMessages
(
)
;
}
)
;
async
function
testWatchingCssMessages
(
)
{
await
pushPref
(
"
dom
.
ipc
.
processPrelaunch
.
enabled
"
false
)
;
const
tab
=
await
addTab
(
TEST_URI
)
;
const
{
client
resourceCommand
targetCommand
}
=
await
initResourceCommand
(
tab
)
;
const
receivedMessages
=
[
]
;
const
{
onAvailable
onAllMessagesReceived
}
=
setupOnAvailableFunction
(
targetCommand
receivedMessages
false
)
;
await
resourceCommand
.
watchResources
(
[
resourceCommand
.
TYPES
.
CSS_MESSAGE
]
{
onAvailable
}
)
;
info
(
"
Now
log
CSS
warning
*
after
*
the
call
to
ResourceCommand
.
watchResources
and
after
"
+
"
having
received
the
existing
message
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
receivedMessages
.
length
=
=
=
1
)
;
info
(
"
Trigger
a
CSS
Warning
"
)
;
triggerCSSWarning
(
tab
)
;
info
(
"
Waiting
for
all
expected
CSS
messages
to
be
received
"
)
;
await
onAllMessagesReceived
;
ok
(
true
"
All
the
expected
CSS
messages
were
received
"
)
;
Services
.
console
.
reset
(
)
;
targetCommand
.
destroy
(
)
;
await
client
.
close
(
)
;
}
async
function
testWatchingCachedCssMessages
(
)
{
await
pushPref
(
"
dom
.
ipc
.
processPrelaunch
.
enabled
"
false
)
;
const
tab
=
await
addTab
(
TEST_URI
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
content
.
docShell
.
cssErrorReportingEnabled
=
true
;
}
)
;
await
reloadBrowser
(
)
;
await
triggerCSSWarning
(
tab
)
;
const
{
client
resourceCommand
targetCommand
}
=
await
initResourceCommand
(
tab
)
;
const
receivedMessages
=
[
]
;
const
{
onAvailable
}
=
setupOnAvailableFunction
(
targetCommand
receivedMessages
true
)
;
await
resourceCommand
.
watchResources
(
[
resourceCommand
.
TYPES
.
CSS_MESSAGE
]
{
onAvailable
}
)
;
is
(
receivedMessages
.
length
3
"
Cached
messages
were
retrieved
as
expected
"
)
;
Services
.
console
.
reset
(
)
;
targetCommand
.
destroy
(
)
;
await
client
.
close
(
)
;
}
function
setupOnAvailableFunction
(
targetCommand
receivedMessages
isAlreadyExistingResource
)
{
const
FRACTIONAL_NUMBER_REGEX
=
/
^
\
d
+
(
\
.
\
d
{
1
3
}
)
?
/
;
const
expectedMessages
=
[
{
pageError
:
{
errorMessage
:
/
Expected
color
but
found
bloup
/
sourceName
:
/
test_css_messages
/
category
:
MESSAGE_CATEGORY
.
CSS_PARSER
timeStamp
:
FRACTIONAL_NUMBER_REGEX
error
:
false
warning
:
true
}
cssSelectors
:
"
:
is
(
html
)
body
"
isAlreadyExistingResource
}
{
pageError
:
{
errorMessage
:
/
Error
in
parsing
value
for
width
/
sourceName
:
/
test_css_messages
/
category
:
MESSAGE_CATEGORY
.
CSS_PARSER
timeStamp
:
FRACTIONAL_NUMBER_REGEX
error
:
false
warning
:
true
}
isAlreadyExistingResource
}
{
pageError
:
{
errorMessage
:
/
Error
in
parsing
value
for
height
/
sourceName
:
/
test_css_messages
/
category
:
MESSAGE_CATEGORY
.
CSS_PARSER
timeStamp
:
FRACTIONAL_NUMBER_REGEX
error
:
false
warning
:
true
}
isAlreadyExistingResource
}
]
;
let
done
;
const
onAllMessagesReceived
=
new
Promise
(
resolve
=
>
(
done
=
resolve
)
)
;
const
onAvailable
=
resources
=
>
{
for
(
const
resource
of
resources
)
{
const
{
pageError
}
=
resource
;
is
(
resource
.
targetFront
targetCommand
.
targetFront
"
The
targetFront
property
is
the
expected
one
"
)
;
if
(
!
pageError
.
sourceName
.
includes
(
"
test_css_messages
"
)
)
{
info
(
Ignore
error
from
unknown
source
:
"
{
pageError
.
sourceName
}
"
)
;
continue
;
}
const
index
=
receivedMessages
.
length
;
receivedMessages
.
push
(
resource
)
;
info
(
checking
received
css
message
#
{
index
}
:
{
pageError
.
errorMessage
}
)
;
ok
(
pageError
"
The
resource
has
a
pageError
attribute
"
)
;
checkObject
(
resource
expectedMessages
[
index
]
)
;
if
(
receivedMessages
.
length
=
=
expectedMessages
.
length
)
{
done
(
)
;
}
}
}
;
return
{
onAvailable
onAllMessagesReceived
}
;
}
function
triggerCSSWarning
(
tab
)
{
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
function
frameScript
(
)
{
content
.
document
.
body
.
style
.
width
=
"
red
"
;
content
.
document
.
body
.
style
.
height
=
"
blue
"
;
}
)
;
}
