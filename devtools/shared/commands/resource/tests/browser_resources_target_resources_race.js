"
use
strict
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
dom
.
ipc
.
processPrelaunch
.
enabled
"
false
)
;
const
{
client
resourceCommand
targetCommand
}
=
await
initMultiProcessResourceCommand
(
)
;
const
expectedPlatformMessage
=
"
expectedMessage
"
;
info
(
"
Log
a
message
*
before
*
calling
ResourceCommand
.
watchResources
"
)
;
Services
.
console
.
logStringMessage
(
expectedPlatformMessage
)
;
info
(
"
Call
watchResources
from
2
separate
call
sites
consecutively
"
)
;
const
onCssMessageAvailable
=
(
)
=
>
{
}
;
const
initialWatchPromise
=
resourceCommand
.
watchResources
(
[
resourceCommand
.
TYPES
.
CSS_MESSAGE
]
{
onAvailable
:
onCssMessageAvailable
}
)
;
const
{
onResource
:
onMessageReceived
}
=
await
resourceCommand
.
waitForNextResource
(
resourceCommand
.
TYPES
.
PLATFORM_MESSAGE
{
ignoreExistingResources
:
false
predicate
:
r
=
>
r
.
message
=
=
=
expectedPlatformMessage
}
)
;
info
(
"
Waiting
for
the
expected
message
to
be
received
"
)
;
await
onMessageReceived
;
ok
(
true
"
All
the
expected
messages
were
received
"
)
;
info
(
"
Wait
for
the
other
watchResources
promise
to
finish
"
)
;
await
initialWatchPromise
;
resourceCommand
.
unwatchResources
(
[
resourceCommand
.
TYPES
.
CSS_MESSAGE
]
{
onAvailable
:
onCssMessageAvailable
}
)
;
Services
.
console
.
reset
(
)
;
targetCommand
.
destroy
(
)
;
await
client
.
close
(
)
;
}
)
;
