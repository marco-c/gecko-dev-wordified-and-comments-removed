"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
throttle
}
=
require
(
"
devtools
/
shared
/
throttle
"
)
;
const
BROWSERTOOLBOX_FISSION_ENABLED
=
"
devtools
.
browsertoolbox
.
fission
"
;
class
ResourceCommand
{
constructor
(
{
commands
}
)
{
this
.
targetCommand
=
commands
.
targetCommand
;
this
.
_onTargetAvailable
=
this
.
_onTargetAvailable
.
bind
(
this
)
;
this
.
_onTargetDestroyed
=
this
.
_onTargetDestroyed
.
bind
(
this
)
;
this
.
_onResourceAvailable
=
this
.
_onResourceAvailable
.
bind
(
this
)
;
this
.
_onResourceDestroyed
=
this
.
_onResourceDestroyed
.
bind
(
this
)
;
this
.
_watchers
=
[
]
;
this
.
_pendingWatchers
=
new
Set
(
)
;
this
.
_cache
=
[
]
;
this
.
_listenerCount
=
new
Map
(
)
;
this
.
_existingLegacyListeners
=
new
WeakMap
(
)
;
this
.
_processingExistingResources
=
new
Set
(
)
;
this
.
_notifyWatchers
=
this
.
_notifyWatchers
.
bind
(
this
)
;
this
.
_throttledNotifyWatchers
=
throttle
(
this
.
_notifyWatchers
100
)
;
}
get
watcherFront
(
)
{
return
this
.
targetCommand
.
watcherFront
;
}
getAllResources
(
resourceType
)
{
return
this
.
_cache
.
filter
(
r
=
>
r
.
resourceType
=
=
=
resourceType
)
;
}
getResourceById
(
resourceType
resourceId
)
{
return
this
.
_cache
.
find
(
r
=
>
r
.
resourceType
=
=
=
resourceType
&
&
r
.
resourceId
=
=
=
resourceId
)
;
}
async
watchResources
(
resources
options
)
{
const
{
onAvailable
onUpdated
onDestroyed
ignoreExistingResources
=
false
}
=
options
;
if
(
typeof
onAvailable
!
=
=
"
function
"
)
{
throw
new
Error
(
"
ResourceCommand
.
watchResources
expects
an
onAvailable
function
as
argument
"
)
;
}
const
pendingWatcher
=
{
resources
onAvailable
}
;
this
.
_pendingWatchers
.
add
(
pendingWatcher
)
;
if
(
!
this
.
_listenerRegistered
&
&
this
.
watcherFront
)
{
this
.
_listenerRegistered
=
true
;
this
.
watcherFront
.
on
(
"
resource
-
available
-
form
"
this
.
_onResourceAvailable
.
bind
(
this
{
watcherFront
:
this
.
watcherFront
}
)
)
;
this
.
watcherFront
.
on
(
"
resource
-
updated
-
form
"
this
.
_onResourceUpdated
.
bind
(
this
{
watcherFront
:
this
.
watcherFront
}
)
)
;
this
.
watcherFront
.
on
(
"
resource
-
destroyed
-
form
"
this
.
_onResourceDestroyed
.
bind
(
this
{
watcherFront
:
this
.
watcherFront
}
)
)
;
}
const
promises
=
[
]
;
for
(
const
resource
of
resources
)
{
if
(
!
this
.
_hasListenerForResource
(
resource
)
)
{
promises
.
push
(
this
.
_startListening
(
resource
)
)
;
}
}
await
Promise
.
all
(
promises
)
;
this
.
_notifyWatchers
(
)
;
this
.
_pendingWatchers
.
delete
(
pendingWatcher
)
;
const
watchedResources
=
pendingWatcher
.
resources
;
if
(
!
watchedResources
.
length
)
{
return
;
}
this
.
_watchers
.
push
(
{
resources
:
watchedResources
onAvailable
onUpdated
onDestroyed
pendingEvents
:
[
]
}
)
;
if
(
!
ignoreExistingResources
)
{
await
this
.
_forwardCachedResources
(
watchedResources
onAvailable
)
;
}
}
unwatchResources
(
resources
options
)
{
const
{
onAvailable
}
=
options
;
if
(
typeof
onAvailable
!
=
=
"
function
"
)
{
throw
new
Error
(
"
ResourceCommand
.
unwatchResources
expects
an
onAvailable
function
as
argument
"
)
;
}
const
watchedResources
=
[
]
;
for
(
const
resource
of
resources
)
{
if
(
this
.
_hasListenerForResource
(
resource
)
)
{
watchedResources
.
push
(
resource
)
;
}
}
const
allWatchers
=
[
.
.
.
this
.
_watchers
.
.
.
this
.
_pendingWatchers
]
;
for
(
const
watcherEntry
of
allWatchers
)
{
if
(
watcherEntry
.
onAvailable
=
=
onAvailable
)
{
watcherEntry
.
resources
=
watcherEntry
.
resources
.
filter
(
resourceType
=
>
{
return
!
resources
.
includes
(
resourceType
)
;
}
)
;
}
}
this
.
_watchers
=
this
.
_watchers
.
filter
(
entry
=
>
{
return
entry
.
resources
.
length
>
0
;
}
)
;
for
(
const
resource
of
watchedResources
)
{
if
(
!
this
.
_hasListenerForResource
(
resource
)
)
{
this
.
_stopListening
(
resource
)
;
}
}
let
listeners
=
0
;
for
(
const
count
of
this
.
_listenerCount
.
values
(
)
)
{
listeners
+
=
count
;
}
if
(
listeners
<
=
0
)
{
this
.
_unwatchAllTargets
(
)
;
}
}
async
_watchAllTargets
(
)
{
if
(
!
this
.
_watchTargetsPromise
)
{
this
.
_watchTargetsPromise
=
this
.
targetCommand
.
watchTargets
(
this
.
targetCommand
.
ALL_TYPES
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
;
}
return
this
.
_watchTargetsPromise
;
}
_unwatchAllTargets
(
)
{
if
(
!
this
.
_watchTargetsPromise
)
{
return
;
}
this
.
_watchTargetsPromise
=
null
;
this
.
targetCommand
.
unwatchTargets
(
this
.
targetCommand
.
ALL_TYPES
this
.
_onTargetAvailable
this
.
_onTargetDestroyed
)
;
}
async
_onTargetAvailable
(
{
targetFront
isTargetSwitching
}
)
{
targetFront
.
resourceCommand
=
this
;
const
resources
=
[
]
;
if
(
isTargetSwitching
)
{
this
.
_onWillNavigate
(
targetFront
)
;
for
(
const
resourceType
of
Object
.
values
(
ResourceCommand
.
TYPES
)
)
{
if
(
!
this
.
_listenerCount
.
get
(
resourceType
)
)
{
continue
;
}
if
(
this
.
_shouldRestartListenerOnTargetSwitching
(
resourceType
)
)
{
this
.
_stopListening
(
resourceType
{
bypassListenerCount
:
true
}
)
;
resources
.
push
(
resourceType
)
;
}
}
}
if
(
targetFront
.
isDestroyed
(
)
)
{
return
;
}
targetFront
.
on
(
"
will
-
navigate
"
(
)
=
>
this
.
_onWillNavigate
(
targetFront
)
)
;
if
(
!
isTargetSwitching
)
{
for
(
const
resourceType
of
Object
.
values
(
ResourceCommand
.
TYPES
)
)
{
if
(
!
this
.
_listenerCount
.
get
(
resourceType
)
)
{
continue
;
}
await
this
.
_watchResourcesForTarget
(
targetFront
resourceType
)
;
}
}
targetFront
.
on
(
"
resource
-
available
-
form
"
this
.
_onResourceAvailable
.
bind
(
this
{
targetFront
}
)
)
;
targetFront
.
on
(
"
resource
-
updated
-
form
"
this
.
_onResourceUpdated
.
bind
(
this
{
targetFront
}
)
)
;
targetFront
.
on
(
"
resource
-
destroyed
-
form
"
this
.
_onResourceDestroyed
.
bind
(
this
{
targetFront
}
)
)
;
if
(
isTargetSwitching
)
{
await
Promise
.
all
(
resources
.
map
(
resourceType
=
>
this
.
_startListening
(
resourceType
{
bypassListenerCount
:
true
}
)
)
)
;
}
}
_shouldRestartListenerOnTargetSwitching
(
resourceType
)
{
if
(
!
this
.
targetCommand
.
isServerTargetSwitchingEnabled
(
)
)
{
return
true
;
}
return
!
this
.
hasResourceCommandSupport
(
resourceType
)
;
}
_onTargetDestroyed
(
{
targetFront
}
)
{
this
.
_existingLegacyListeners
.
set
(
targetFront
[
]
)
;
}
async
_onResourceAvailable
(
{
targetFront
watcherFront
}
resources
)
{
for
(
let
resource
of
resources
)
{
const
{
resourceType
}
=
resource
;
if
(
watcherFront
)
{
targetFront
=
await
this
.
_getTargetForWatcherResource
(
resource
)
;
}
resource
.
isAlreadyExistingResource
=
this
.
_processingExistingResources
.
has
(
resourceType
)
;
if
(
!
resource
.
targetFront
)
{
resource
.
targetFront
=
targetFront
;
}
if
(
ResourceTransformers
[
resourceType
]
)
{
resource
=
ResourceTransformers
[
resourceType
]
(
{
resource
targetCommand
:
this
.
targetCommand
targetFront
watcherFront
:
this
.
watcherFront
}
)
;
}
this
.
_queueResourceEvent
(
"
available
"
resourceType
resource
)
;
this
.
_cache
.
push
(
resource
)
;
}
this
.
_throttledNotifyWatchers
(
)
;
}
async
_onResourceUpdated
(
{
targetFront
watcherFront
}
updates
)
{
for
(
const
update
of
updates
)
{
const
{
resourceType
resourceId
resourceUpdates
nestedResourceUpdates
}
=
update
;
if
(
!
resourceId
)
{
console
.
warn
(
Expected
resource
{
resourceType
}
to
have
a
resourceId
)
;
}
const
existingResource
=
this
.
_cache
.
find
(
cachedResource
=
>
cachedResource
.
resourceType
=
=
=
resourceType
&
&
cachedResource
.
resourceId
=
=
=
resourceId
)
;
if
(
!
existingResource
)
{
continue
;
}
if
(
resourceUpdates
)
{
Object
.
assign
(
existingResource
resourceUpdates
)
;
}
if
(
nestedResourceUpdates
)
{
for
(
const
{
path
value
}
of
nestedResourceUpdates
)
{
let
target
=
existingResource
;
for
(
let
i
=
0
;
i
<
path
.
length
-
1
;
i
+
+
)
{
target
=
target
[
path
[
i
]
]
;
}
target
[
path
[
path
.
length
-
1
]
]
=
value
;
}
}
this
.
_queueResourceEvent
(
"
updated
"
resourceType
{
resource
:
existingResource
update
}
)
;
}
this
.
_throttledNotifyWatchers
(
)
;
}
async
_onResourceDestroyed
(
{
targetFront
watcherFront
}
resources
)
{
for
(
const
resource
of
resources
)
{
const
{
resourceType
resourceId
}
=
resource
;
let
index
=
-
1
;
if
(
resourceId
)
{
index
=
this
.
_cache
.
findIndex
(
cachedResource
=
>
cachedResource
.
resourceType
=
=
resourceType
&
&
cachedResource
.
resourceId
=
=
resourceId
)
;
}
else
{
index
=
this
.
_cache
.
indexOf
(
resource
)
;
}
if
(
index
>
=
0
)
{
this
.
_cache
.
splice
(
index
1
)
;
}
else
{
console
.
warn
(
Resource
{
resourceId
|
|
"
"
}
of
{
resourceType
}
was
not
found
.
)
;
}
this
.
_queueResourceEvent
(
"
destroyed
"
resourceType
resource
)
;
}
this
.
_throttledNotifyWatchers
(
)
;
}
_hasListenerForResource
(
resourceType
)
{
return
this
.
_watchers
.
some
(
(
{
resources
}
)
=
>
{
return
resources
.
includes
(
resourceType
)
;
}
)
;
}
_queueResourceEvent
(
callbackType
resourceType
update
)
{
for
(
const
{
resources
pendingEvents
}
of
this
.
_watchers
)
{
if
(
!
resources
.
includes
(
resourceType
)
)
{
continue
;
}
if
(
pendingEvents
.
length
>
0
)
{
const
lastEvent
=
pendingEvents
[
pendingEvents
.
length
-
1
]
;
if
(
lastEvent
.
callbackType
=
=
callbackType
)
{
lastEvent
.
updates
.
push
(
update
)
;
continue
;
}
}
pendingEvents
.
push
(
{
callbackType
updates
:
[
update
]
}
)
;
}
}
_notifyWatchers
(
)
{
for
(
const
watcherEntry
of
this
.
_watchers
)
{
const
{
onAvailable
onUpdated
onDestroyed
pendingEvents
}
=
watcherEntry
;
watcherEntry
.
pendingEvents
=
[
]
;
for
(
const
{
callbackType
updates
}
of
pendingEvents
)
{
try
{
if
(
callbackType
=
=
"
available
"
)
{
onAvailable
(
updates
)
;
}
else
if
(
callbackType
=
=
"
updated
"
&
&
onUpdated
)
{
onUpdated
(
updates
)
;
}
else
if
(
callbackType
=
=
"
destroyed
"
&
&
onDestroyed
)
{
onDestroyed
(
updates
)
;
}
}
catch
(
e
)
{
console
.
error
(
"
Exception
while
calling
a
ResourceCommand
"
callbackType
"
callback
"
"
:
"
e
)
;
}
}
}
}
_getTargetForWatcherResource
(
resource
)
{
const
{
browsingContextID
resourceType
}
=
resource
;
if
(
browsingContextID
=
=
-
1
)
{
return
null
;
}
if
(
!
browsingContextID
)
{
console
.
error
(
Resource
of
{
resourceType
}
is
missing
a
browsingContextID
attribute
)
;
return
null
;
}
return
this
.
watcherFront
.
getBrowsingContextTarget
(
browsingContextID
)
;
}
_onWillNavigate
(
targetFront
)
{
if
(
targetFront
.
isTopLevel
)
{
this
.
_cache
=
[
]
;
return
;
}
this
.
_cache
=
this
.
_cache
.
filter
(
cachedResource
=
>
cachedResource
.
targetFront
!
=
=
targetFront
)
;
}
hasResourceCommandSupport
(
resourceType
)
{
if
(
this
.
targetCommand
.
targetFront
.
isParentProcess
&
&
!
Services
.
prefs
.
getBoolPref
(
BROWSERTOOLBOX_FISSION_ENABLED
false
)
)
{
return
false
;
}
return
this
.
watcherFront
?
.
traits
?
.
resources
?
.
[
resourceType
]
;
}
_hasResourceCommandSupportForTarget
(
resourceType
targetFront
)
{
if
(
!
this
.
targetCommand
.
hasTargetWatcherSupport
(
targetFront
.
targetType
)
)
{
return
false
;
}
return
this
.
hasResourceCommandSupport
(
resourceType
)
;
}
async
_startListening
(
resourceType
{
bypassListenerCount
=
false
}
=
{
}
)
{
if
(
!
bypassListenerCount
)
{
let
listeners
=
this
.
_listenerCount
.
get
(
resourceType
)
|
|
0
;
listeners
+
+
;
this
.
_listenerCount
.
set
(
resourceType
listeners
)
;
if
(
listeners
>
1
)
{
return
;
}
}
this
.
_processingExistingResources
.
add
(
resourceType
)
;
const
shouldRunLegacyListeners
=
!
this
.
hasResourceCommandSupport
(
resourceType
)
|
|
this
.
_shouldRunLegacyListenerEvenWithWatcherSupport
(
resourceType
)
;
if
(
shouldRunLegacyListeners
)
{
const
promises
=
[
]
;
const
targets
=
this
.
targetCommand
.
getAllTargets
(
this
.
targetCommand
.
ALL_TYPES
)
;
for
(
const
target
of
targets
)
{
promises
.
push
(
this
.
_watchResourcesForTarget
(
target
resourceType
)
)
;
}
await
Promise
.
all
(
promises
)
;
}
await
this
.
_watchAllTargets
(
)
;
if
(
this
.
hasResourceCommandSupport
(
resourceType
)
)
{
await
this
.
watcherFront
.
watchResources
(
[
resourceType
]
)
;
}
this
.
_processingExistingResources
.
delete
(
resourceType
)
;
}
_shouldRunLegacyListenerEvenWithWatcherSupport
(
resourceType
)
{
return
(
resourceType
=
=
ResourceCommand
.
TYPES
.
SOURCE
|
|
resourceType
=
=
ResourceCommand
.
TYPES
.
THREAD_STATE
)
;
}
async
_forwardCachedResources
(
resourceTypes
onAvailable
)
{
const
cachedResources
=
this
.
_cache
.
filter
(
resource
=
>
resourceTypes
.
includes
(
resource
.
resourceType
)
)
;
if
(
cachedResources
.
length
>
0
)
{
await
onAvailable
(
cachedResources
)
;
}
}
async
_watchResourcesForTarget
(
targetFront
resourceType
)
{
if
(
this
.
_hasResourceCommandSupportForTarget
(
resourceType
targetFront
)
)
{
return
;
}
if
(
targetFront
.
isDestroyed
(
)
)
{
return
;
}
const
onAvailable
=
this
.
_onResourceAvailable
.
bind
(
this
{
targetFront
}
)
;
const
onUpdated
=
this
.
_onResourceUpdated
.
bind
(
this
{
targetFront
}
)
;
const
onDestroyed
=
this
.
_onResourceDestroyed
.
bind
(
this
{
targetFront
}
)
;
if
(
!
(
resourceType
in
LegacyListeners
)
)
{
throw
new
Error
(
Missing
legacy
listener
for
{
resourceType
}
)
;
}
const
legacyListeners
=
this
.
_existingLegacyListeners
.
get
(
targetFront
)
|
|
[
]
;
if
(
legacyListeners
.
includes
(
resourceType
)
)
{
console
.
warn
(
Already
started
legacy
listener
for
{
resourceType
}
on
{
targetFront
.
actorID
}
)
;
return
;
}
this
.
_existingLegacyListeners
.
set
(
targetFront
legacyListeners
.
concat
(
resourceType
)
)
;
try
{
await
LegacyListeners
[
resourceType
]
(
{
targetCommand
:
this
.
targetCommand
targetFront
onAvailable
onDestroyed
onUpdated
}
)
;
}
catch
(
e
)
{
console
.
error
(
Failed
to
start
[
{
resourceType
}
]
legacy
listener
for
target
{
targetFront
.
actorID
}
e
)
;
}
}
_stopListening
(
resourceType
{
bypassListenerCount
=
false
}
=
{
}
)
{
if
(
!
bypassListenerCount
)
{
let
listeners
=
this
.
_listenerCount
.
get
(
resourceType
)
;
if
(
!
listeners
|
|
listeners
<
=
0
)
{
throw
new
Error
(
Stopped
listening
for
resource
'
{
resourceType
}
'
that
isn
'
t
being
listened
to
)
;
}
listeners
-
-
;
this
.
_listenerCount
.
set
(
resourceType
listeners
)
;
if
(
listeners
>
0
)
{
return
;
}
}
this
.
_cache
=
this
.
_cache
.
filter
(
cachedResource
=
>
cachedResource
.
resourceType
!
=
=
resourceType
)
;
if
(
this
.
hasResourceCommandSupport
(
resourceType
)
)
{
if
(
!
this
.
watcherFront
.
isDestroyed
(
)
)
{
this
.
watcherFront
.
unwatchResources
(
[
resourceType
]
)
;
}
const
shouldRunLegacyListeners
=
this
.
_shouldRunLegacyListenerEvenWithWatcherSupport
(
resourceType
)
;
if
(
!
shouldRunLegacyListeners
)
{
return
;
}
}
const
targets
=
this
.
targetCommand
.
getAllTargets
(
this
.
targetCommand
.
ALL_TYPES
)
;
for
(
const
target
of
targets
)
{
this
.
_unwatchResourcesForTarget
(
target
resourceType
)
;
}
}
_unwatchResourcesForTarget
(
targetFront
resourceType
)
{
if
(
this
.
_hasResourceCommandSupportForTarget
(
resourceType
targetFront
)
)
{
}
const
listeners
=
this
.
_existingLegacyListeners
.
get
(
targetFront
)
;
if
(
listeners
&
&
listeners
.
includes
(
resourceType
)
)
{
const
remainingListeners
=
listeners
.
filter
(
l
=
>
l
!
=
=
resourceType
)
;
this
.
_existingLegacyListeners
.
set
(
targetFront
remainingListeners
)
;
}
}
}
ResourceCommand
.
TYPES
=
ResourceCommand
.
prototype
.
TYPES
=
{
CONSOLE_MESSAGE
:
"
console
-
message
"
CSS_CHANGE
:
"
css
-
change
"
CSS_MESSAGE
:
"
css
-
message
"
ERROR_MESSAGE
:
"
error
-
message
"
PLATFORM_MESSAGE
:
"
platform
-
message
"
CLONED_CONTENT_PROCESS_MESSAGE
:
"
cloned
-
content
-
process
-
message
"
DOCUMENT_EVENT
:
"
document
-
event
"
ROOT_NODE
:
"
root
-
node
"
STYLESHEET
:
"
stylesheet
"
NETWORK_EVENT
:
"
network
-
event
"
WEBSOCKET
:
"
websocket
"
COOKIE
:
"
cookies
"
LOCAL_STORAGE
:
"
local
-
storage
"
SESSION_STORAGE
:
"
session
-
storage
"
CACHE_STORAGE
:
"
Cache
"
EXTENSION_STORAGE
:
"
extension
-
storage
"
INDEXED_DB
:
"
indexed
-
db
"
NETWORK_EVENT_STACKTRACE
:
"
network
-
event
-
stacktrace
"
SOURCE
:
"
source
"
THREAD_STATE
:
"
thread
-
state
"
SERVER_SENT_EVENT
:
"
server
-
sent
-
event
"
}
;
module
.
exports
=
ResourceCommand
;
const
LegacyListeners
=
{
[
ResourceCommand
.
TYPES
.
CONSOLE_MESSAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
console
-
messages
"
)
[
ResourceCommand
.
TYPES
.
CSS_CHANGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
css
-
changes
"
)
[
ResourceCommand
.
TYPES
.
CSS_MESSAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
css
-
messages
"
)
[
ResourceCommand
.
TYPES
.
ERROR_MESSAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
error
-
messages
"
)
[
ResourceCommand
.
TYPES
.
PLATFORM_MESSAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
platform
-
messages
"
)
[
ResourceCommand
.
TYPES
.
CLONED_CONTENT_PROCESS_MESSAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
cloned
-
content
-
process
-
messages
"
)
async
[
ResourceCommand
.
TYPES
.
DOCUMENT_EVENT
]
(
{
targetCommand
targetFront
onAvailable
}
)
{
if
(
!
targetFront
.
isTopLevel
)
{
return
;
}
const
webConsoleFront
=
await
targetFront
.
getFront
(
"
console
"
)
;
webConsoleFront
.
on
(
"
documentEvent
"
event
=
>
{
event
.
resourceType
=
ResourceCommand
.
TYPES
.
DOCUMENT_EVENT
;
onAvailable
(
[
event
]
)
;
}
)
;
await
webConsoleFront
.
startListeners
(
[
"
DocumentEvents
"
]
)
;
}
[
ResourceCommand
.
TYPES
.
ROOT_NODE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
root
-
node
"
)
[
ResourceCommand
.
TYPES
.
STYLESHEET
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
stylesheet
"
)
[
ResourceCommand
.
TYPES
.
NETWORK_EVENT
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
network
-
events
"
)
[
ResourceCommand
.
TYPES
.
WEBSOCKET
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
websocket
"
)
[
ResourceCommand
.
TYPES
.
COOKIE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
cookie
"
)
[
ResourceCommand
.
TYPES
.
CACHE_STORAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
cache
-
storage
"
)
[
ResourceCommand
.
TYPES
.
LOCAL_STORAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
local
-
storage
"
)
[
ResourceCommand
.
TYPES
.
SESSION_STORAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
session
-
storage
"
)
[
ResourceCommand
.
TYPES
.
EXTENSION_STORAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
extension
-
storage
"
)
[
ResourceCommand
.
TYPES
.
INDEXED_DB
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
indexed
-
db
"
)
[
ResourceCommand
.
TYPES
.
NETWORK_EVENT_STACKTRACE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
network
-
event
-
stacktraces
"
)
[
ResourceCommand
.
TYPES
.
SOURCE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
source
"
)
[
ResourceCommand
.
TYPES
.
THREAD_STATE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
thread
-
states
"
)
[
ResourceCommand
.
TYPES
.
SERVER_SENT_EVENT
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
legacy
-
listeners
/
server
-
sent
-
events
"
)
}
;
const
ResourceTransformers
=
{
[
ResourceCommand
.
TYPES
.
CONSOLE_MESSAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
transformers
/
console
-
messages
"
)
[
ResourceCommand
.
TYPES
.
ERROR_MESSAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
transformers
/
error
-
messages
"
)
[
ResourceCommand
.
TYPES
.
CACHE_STORAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
transformers
/
storage
-
cache
.
js
"
)
[
ResourceCommand
.
TYPES
.
COOKIE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
transformers
/
storage
-
cookie
.
js
"
)
[
ResourceCommand
.
TYPES
.
INDEXED_DB
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
transformers
/
storage
-
indexed
-
db
.
js
"
)
[
ResourceCommand
.
TYPES
.
LOCAL_STORAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
transformers
/
storage
-
local
-
storage
.
js
"
)
[
ResourceCommand
.
TYPES
.
SESSION_STORAGE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
transformers
/
storage
-
session
-
storage
.
js
"
)
[
ResourceCommand
.
TYPES
.
NETWORK_EVENT
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
transformers
/
network
-
events
"
)
[
ResourceCommand
.
TYPES
.
THREAD_STATE
]
:
require
(
"
devtools
/
shared
/
commands
/
resource
/
transformers
/
thread
-
states
"
)
}
;
