"
use
strict
"
;
const
{
getAdHocFrontOrPrimitiveGrip
}
=
require
(
"
resource
:
/
/
devtools
/
client
/
fronts
/
object
.
js
"
)
;
class
InspectedWindowCommand
{
constructor
(
{
commands
}
)
{
this
.
commands
=
commands
;
}
getFront
(
)
{
return
this
.
commands
.
targetCommand
.
targetFront
.
getFront
(
"
webExtensionInspectedWindow
"
)
;
}
async
eval
(
webExtensionCallerInfo
expression
options
=
{
}
)
{
const
{
consoleFront
}
=
options
;
if
(
consoleFront
)
{
options
.
evalResultAsGrip
=
true
;
options
.
toolboxConsoleActorID
=
consoleFront
.
actor
;
delete
options
.
consoleFront
;
}
const
front
=
await
this
.
getFront
(
)
;
const
response
=
await
front
.
eval
(
webExtensionCallerInfo
expression
options
)
;
if
(
!
consoleFront
)
{
return
response
;
}
if
(
!
response
.
hasOwnProperty
(
"
exceptionInfo
"
)
&
&
!
response
.
hasOwnProperty
(
"
valueGrip
"
)
)
{
throw
new
Error
(
"
Response
does
not
have
exceptionInfo
or
valueGrip
property
"
)
;
}
if
(
response
.
exceptionInfo
)
{
console
.
error
(
response
.
exceptionInfo
.
description
.
.
.
(
response
.
exceptionInfo
.
details
|
|
[
]
)
)
;
return
response
;
}
return
getAdHocFrontOrPrimitiveGrip
(
response
.
valueGrip
consoleFront
|
|
this
)
;
}
async
reload
(
callerInfo
options
=
{
}
)
{
if
(
this
.
_reloadPending
)
{
return
null
;
}
this
.
_reloadPending
=
true
;
try
{
await
this
.
commands
.
targetConfigurationCommand
.
updateConfiguration
(
{
customUserAgent
:
options
.
userAgent
}
)
;
const
front
=
await
this
.
getFront
(
)
;
const
result
=
await
front
.
reload
(
callerInfo
options
)
;
this
.
_reloadPending
=
false
;
return
result
;
}
catch
(
e
)
{
this
.
_reloadPending
=
false
;
Cu
.
reportError
(
e
)
;
return
Promise
.
reject
(
{
message
:
"
An
unexpected
error
occurred
"
}
)
;
}
}
}
module
.
exports
=
InspectedWindowCommand
;
