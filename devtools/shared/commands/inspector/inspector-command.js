"
use
strict
"
;
class
InspectorCommand
{
constructor
(
{
commands
}
)
{
this
.
commands
=
commands
;
}
async
getAllInspectorFronts
(
)
{
return
this
.
commands
.
targetCommand
.
getAllFronts
(
[
this
.
commands
.
targetCommand
.
TYPES
.
FRAME
]
"
inspector
"
)
;
}
async
walkerSearch
(
walkerFront
query
options
=
{
}
)
{
const
result
=
await
walkerFront
.
search
(
query
options
)
;
return
result
.
list
.
items
(
)
;
}
async
findNextNode
(
query
{
reverse
}
=
{
}
)
{
const
inspectors
=
await
this
.
getAllInspectorFronts
(
)
;
const
nodes
=
await
Promise
.
all
(
inspectors
.
map
(
(
{
walker
}
)
=
>
this
.
walkerSearch
(
walker
query
{
reverse
}
)
)
)
;
const
results
=
nodes
.
flat
(
)
;
if
(
this
.
_searchQuery
!
=
=
query
)
{
this
.
_searchQuery
=
query
;
this
.
_currentIndex
=
-
1
;
}
if
(
!
results
.
length
)
{
return
null
;
}
this
.
_currentIndex
=
reverse
?
this
.
_currentIndex
-
1
:
this
.
_currentIndex
+
1
;
if
(
this
.
_currentIndex
>
=
results
.
length
)
{
this
.
_currentIndex
=
0
;
}
if
(
this
.
_currentIndex
<
0
)
{
this
.
_currentIndex
=
results
.
length
-
1
;
}
return
{
node
:
results
[
this
.
_currentIndex
]
resultsIndex
:
this
.
_currentIndex
resultsLength
:
results
.
length
}
;
}
async
getSuggestionsForQuery
(
query
firstPart
state
)
{
const
inspectors
=
await
this
.
getAllInspectorFronts
(
)
;
const
mergedSuggestions
=
[
]
;
await
Promise
.
all
(
inspectors
.
map
(
async
(
{
walker
}
)
=
>
{
const
{
suggestions
}
=
await
walker
.
getSuggestionsForQuery
(
query
firstPart
state
)
;
for
(
const
[
suggestion
count
type
]
of
suggestions
)
{
const
existing
=
mergedSuggestions
.
find
(
(
[
s
t
]
)
=
>
s
=
=
suggestion
&
&
t
=
=
type
)
;
if
(
existing
)
{
existing
[
1
]
+
=
count
;
}
else
{
mergedSuggestions
.
push
(
[
suggestion
count
type
]
)
;
}
}
}
)
)
;
return
sortSuggestions
(
mergedSuggestions
)
;
}
async
findNodeFrontFromSelectors
(
nodeSelectors
)
{
if
(
!
nodeSelectors
|
|
!
Array
.
isArray
(
nodeSelectors
)
|
|
nodeSelectors
.
length
=
=
=
0
)
{
console
.
warn
(
"
findNodeFrontFromSelectors
expect
a
non
-
empty
array
but
got
"
nodeSelectors
)
;
return
null
;
}
const
{
walker
}
=
await
this
.
commands
.
targetCommand
.
targetFront
.
getFront
(
"
inspector
"
)
;
const
querySelectors
=
async
nodeFront
=
>
{
const
selector
=
nodeSelectors
.
shift
(
)
;
if
(
!
selector
)
{
return
nodeFront
;
}
nodeFront
=
await
nodeFront
.
walkerFront
.
querySelector
(
nodeFront
selector
)
;
if
(
!
nodeFront
)
{
return
null
;
}
if
(
nodeSelectors
.
length
>
0
)
{
const
domLoadingPromises
=
[
]
;
if
(
!
nodeFront
.
useChildTargetToFetchChildren
)
{
domLoadingPromises
.
push
(
nodeFront
.
waitForFrameLoad
(
)
)
;
}
const
{
onResource
:
onDomInteractiveResource
}
=
await
this
.
commands
.
resourceCommand
.
waitForNextResource
(
this
.
commands
.
resourceCommand
.
TYPES
.
DOCUMENT_EVENT
{
predicate
:
resource
=
>
resource
.
name
=
=
"
dom
-
interactive
"
&
&
resource
.
targetFront
!
=
=
nodeFront
.
targetFront
&
&
resource
.
targetFront
.
browsingContextID
=
=
nodeFront
.
browsingContextID
}
)
;
const
newTargetResolveValue
=
Symbol
(
)
;
domLoadingPromises
.
push
(
onDomInteractiveResource
.
then
(
(
)
=
>
newTargetResolveValue
)
)
;
const
loadResult
=
await
Promise
.
any
(
domLoadingPromises
)
;
if
(
loadResult
=
=
newTargetResolveValue
)
{
nodeFront
.
_form
.
useChildTargetToFetchChildren
=
true
;
}
const
{
nodes
}
=
await
walker
.
children
(
nodeFront
)
;
nodeFront
=
nodes
.
find
(
node
=
>
{
const
{
nodeType
}
=
node
;
return
(
nodeType
=
=
=
Node
.
DOCUMENT_FRAGMENT_NODE
|
|
nodeType
=
=
=
Node
.
DOCUMENT_NODE
)
;
}
)
;
if
(
!
nodeFront
)
{
return
null
;
}
}
const
childrenNodeFront
=
await
querySelectors
(
nodeFront
)
;
return
childrenNodeFront
|
|
nodeFront
;
}
;
const
rootNodeFront
=
await
walker
.
getRootNode
(
)
;
return
querySelectors
(
rootNodeFront
)
;
}
}
function
sortSuggestions
(
suggestions
)
{
const
sorted
=
suggestions
.
sort
(
(
a
b
)
=
>
{
let
sortA
=
10000
-
a
[
1
]
+
a
[
0
]
;
let
sortB
=
10000
-
b
[
1
]
+
b
[
0
]
;
const
firstA
=
a
[
0
]
.
substring
(
0
1
)
;
const
firstB
=
b
[
0
]
.
substring
(
0
1
)
;
const
getSortKeyPrefix
=
firstLetter
=
>
{
if
(
firstLetter
=
=
=
"
#
"
)
{
return
"
2
"
;
}
if
(
firstLetter
=
=
=
"
.
"
)
{
return
"
1
"
;
}
return
"
0
"
;
}
;
sortA
=
getSortKeyPrefix
(
firstA
)
+
sortA
;
sortB
=
getSortKeyPrefix
(
firstB
)
+
sortB
;
return
sortA
.
localeCompare
(
sortB
)
;
}
)
;
return
sorted
.
slice
(
0
25
)
;
}
module
.
exports
=
InspectorCommand
;
