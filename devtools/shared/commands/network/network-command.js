"
use
strict
"
;
class
NetworkCommand
{
constructor
(
{
descriptorFront
watcherFront
commands
}
)
{
this
.
commands
=
commands
;
this
.
descriptorFront
=
descriptorFront
;
this
.
watcherFront
=
watcherFront
;
}
async
sendHTTPRequest
(
data
)
{
const
networkContentFront
=
await
this
.
commands
.
targetCommand
.
targetFront
.
getFront
(
"
networkContent
"
)
;
const
{
channelId
}
=
await
networkContentFront
.
sendHTTPRequest
(
data
)
;
return
{
channelId
}
;
}
async
getBlockedUrls
(
)
{
const
networkParentFront
=
await
this
.
watcherFront
.
getNetworkParentActor
(
)
;
return
networkParentFront
.
getBlockedUrls
(
)
;
}
async
setBlockedUrls
(
urls
)
{
const
networkParentFront
=
await
this
.
watcherFront
.
getNetworkParentActor
(
)
;
return
networkParentFront
.
setBlockedUrls
(
urls
)
;
}
async
blockRequestForUrl
(
url
)
{
const
networkParentFront
=
await
this
.
watcherFront
.
getNetworkParentActor
(
)
;
return
networkParentFront
.
blockRequest
(
{
url
}
)
;
}
async
unblockRequestForUrl
(
url
)
{
const
networkParentFront
=
await
this
.
watcherFront
.
getNetworkParentActor
(
)
;
return
networkParentFront
.
unblockRequest
(
{
url
}
)
;
}
destroy
(
)
{
}
}
module
.
exports
=
NetworkCommand
;
