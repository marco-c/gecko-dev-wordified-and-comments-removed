"
use
strict
"
;
const
{
createCommandsDictionary
}
=
require
(
"
devtools
/
shared
/
commands
/
index
"
)
;
const
{
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
jsm
"
)
;
loader
.
lazyRequireGetter
(
this
"
DevToolsServer
"
"
devtools
/
server
/
devtools
-
server
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
DevToolsClient
"
"
devtools
/
client
/
devtools
-
client
"
true
)
;
exports
.
CommandsFactory
=
{
async
forTab
(
tab
{
client
isWebExtension
}
=
{
}
)
{
if
(
!
client
)
{
client
=
await
createLocalClient
(
)
;
}
const
descriptor
=
await
client
.
mainRoot
.
getTab
(
{
tab
isWebExtension
}
)
;
descriptor
.
doNotAttachThreadActor
=
isWebExtension
;
const
commands
=
await
createCommandsDictionary
(
descriptor
)
;
return
commands
;
}
async
forMainProcess
(
{
client
}
=
{
}
)
{
if
(
!
client
)
{
client
=
await
createLocalClient
(
)
;
}
const
descriptor
=
await
client
.
mainRoot
.
getMainProcess
(
)
;
const
commands
=
await
createCommandsDictionary
(
descriptor
)
;
return
commands
;
}
async
forRemoteTabInTest
(
{
browserId
client
}
)
{
if
(
!
client
)
{
client
=
await
createLocalClient
(
)
;
}
const
descriptor
=
await
client
.
mainRoot
.
getTab
(
{
browserId
}
)
;
const
commands
=
await
createCommandsDictionary
(
descriptor
)
;
return
commands
;
}
async
forWorker
(
id
)
{
const
client
=
await
createLocalClient
(
)
;
const
descriptor
=
await
client
.
mainRoot
.
getWorker
(
id
)
;
const
commands
=
await
createCommandsDictionary
(
descriptor
)
;
return
commands
;
}
async
forAddon
(
id
)
{
const
client
=
await
createLocalClient
(
)
;
const
descriptor
=
await
client
.
mainRoot
.
getAddon
(
{
id
}
)
;
const
commands
=
await
createCommandsDictionary
(
descriptor
)
;
return
commands
;
}
async
forProcess
(
osPid
)
{
const
client
=
await
createLocalClient
(
)
;
const
descriptor
=
await
client
.
mainRoot
.
getProcess
(
osPid
)
;
const
commands
=
await
createCommandsDictionary
(
descriptor
)
;
return
commands
;
}
async
spawnClientToDebugSystemPrincipal
(
)
{
const
customLoader
=
new
DevToolsLoader
(
{
freshCompartment
:
true
}
)
;
const
{
DevToolsServer
:
customDevToolsServer
}
=
customLoader
.
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
customDevToolsServer
.
init
(
)
;
customDevToolsServer
.
registerAllActors
(
)
;
customDevToolsServer
.
allowChromeProcess
=
true
;
const
client
=
new
DevToolsClient
(
customDevToolsServer
.
connectPipe
(
)
)
;
await
client
.
connect
(
)
;
return
client
;
}
async
forBrowserConsole
(
)
{
const
client
=
await
this
.
spawnClientToDebugSystemPrincipal
(
)
;
const
descriptor
=
await
client
.
mainRoot
.
getMainProcess
(
)
;
descriptor
.
doNotAttachThreadActor
=
true
;
await
descriptor
.
getTarget
(
)
;
const
commands
=
await
createCommandsDictionary
(
descriptor
)
;
return
commands
;
}
}
;
async
function
createLocalClient
(
)
{
ensureDevToolsServerInitialized
(
)
;
const
client
=
new
DevToolsClient
(
DevToolsServer
.
connectPipe
(
)
)
;
await
client
.
connect
(
)
;
return
client
;
}
exports
.
createLocalClientForTests
=
createLocalClient
;
function
ensureDevToolsServerInitialized
(
)
{
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerAllActors
(
)
;
DevToolsServer
.
allowChromeProcess
=
true
;
}
