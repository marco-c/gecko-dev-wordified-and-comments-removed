"
use
strict
"
;
class
ThreadConfigurationCommand
{
constructor
(
{
commands
watcherFront
}
)
{
this
.
_commands
=
commands
;
this
.
_watcherFront
=
watcherFront
;
}
async
getThreadConfigurationFront
(
)
{
const
front
=
await
this
.
_watcherFront
.
getThreadConfigurationActor
(
)
;
return
front
;
}
async
updateConfiguration
(
configuration
)
{
if
(
this
.
_commands
.
targetCommand
.
hasTargetWatcherSupport
(
)
)
{
const
threadConfigurationFront
=
await
this
.
getThreadConfigurationFront
(
)
;
const
updatedConfiguration
=
await
threadConfigurationFront
.
updateConfiguration
(
configuration
)
;
this
.
_configuration
=
updatedConfiguration
;
}
else
{
const
threadFronts
=
await
this
.
_commands
.
targetCommand
.
getAllFronts
(
this
.
_commands
.
targetCommand
.
ALL_TYPES
"
thread
"
)
;
await
Promise
.
all
(
threadFronts
.
map
(
threadFront
=
>
threadFront
.
pauseOnExceptions
(
configuration
.
pauseOnExceptions
configuration
.
ignoreCaughtExceptions
)
)
)
;
}
}
}
module
.
exports
=
ThreadConfigurationCommand
;
