"
use
strict
"
;
class
ThreadConfigurationCommand
{
constructor
(
{
commands
watcherFront
}
)
{
this
.
_commands
=
commands
;
this
.
_watcherFront
=
watcherFront
;
}
async
getThreadConfigurationFront
(
)
{
const
front
=
await
this
.
_watcherFront
.
getThreadConfigurationActor
(
)
;
return
front
;
}
async
updateConfiguration
(
configuration
)
{
if
(
this
.
_commands
.
targetCommand
.
hasTargetWatcherSupport
(
)
)
{
const
filteredConfiguration
=
Object
.
fromEntries
(
Object
.
entries
(
configuration
)
.
filter
(
(
[
key
value
]
)
=
>
!
[
"
breakpoints
"
"
eventBreakpoints
"
]
.
includes
(
key
)
)
)
;
const
threadConfigurationFront
=
await
this
.
getThreadConfigurationFront
(
)
;
const
updatedConfiguration
=
await
threadConfigurationFront
.
updateConfiguration
(
filteredConfiguration
)
;
this
.
_configuration
=
updatedConfiguration
;
}
let
threadFronts
=
await
this
.
_commands
.
targetCommand
.
getAllFronts
(
this
.
_commands
.
targetCommand
.
ALL_TYPES
"
thread
"
)
;
if
(
this
.
_commands
.
targetCommand
.
rootFront
.
traits
.
supportsThreadConfigurationOptions
)
{
threadFronts
=
threadFronts
.
filter
(
threadFront
=
>
!
this
.
_commands
.
targetCommand
.
hasTargetWatcherSupport
(
threadFront
.
targetFront
.
targetType
)
)
;
}
await
Promise
.
all
(
threadFronts
.
map
(
threadFront
=
>
threadFront
.
reconfigure
(
configuration
)
)
)
;
}
}
module
.
exports
=
ThreadConfigurationCommand
;
