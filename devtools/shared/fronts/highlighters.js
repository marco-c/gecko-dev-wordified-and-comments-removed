"
use
strict
"
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
flags
=
require
(
"
devtools
/
shared
/
flags
"
)
;
const
{
customHighlighterSpec
highlighterSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
highlighters
"
)
;
class
HighlighterFront
extends
FrontClassWithSpec
(
highlighterSpec
)
{
constructor
(
client
form
)
{
super
(
client
form
)
;
this
.
isNodeFrontHighlighted
=
false
;
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
traits
=
json
.
traits
|
|
{
}
;
}
pick
(
doFocus
)
{
if
(
doFocus
&
&
super
.
pickAndFocus
)
{
return
super
.
pickAndFocus
(
)
;
}
return
super
.
pick
(
)
;
}
async
highlight
(
nodeFront
options
=
{
}
)
{
if
(
!
nodeFront
)
{
return
;
}
this
.
isNodeFrontHighlighted
=
true
;
await
this
.
showBoxModel
(
nodeFront
options
)
;
this
.
emit
(
"
node
-
highlight
"
nodeFront
)
;
}
async
unhighlight
(
forceHide
=
false
)
{
forceHide
=
forceHide
|
|
!
flags
.
testing
;
if
(
this
.
isNodeFrontHighlighted
&
&
forceHide
)
{
this
.
isNodeFrontHighlighted
=
false
;
await
this
.
hideBoxModel
(
)
;
}
this
.
emit
(
"
node
-
unhighlight
"
)
;
}
}
exports
.
HighlighterFront
=
HighlighterFront
;
registerFront
(
HighlighterFront
)
;
class
CustomHighlighterFront
extends
FrontClassWithSpec
(
customHighlighterSpec
)
{
constructor
(
client
form
)
{
super
(
client
form
)
;
this
.
_isShown
=
false
;
}
show
(
.
.
.
args
)
{
this
.
_isShown
=
true
;
return
super
.
show
(
.
.
.
args
)
;
}
hide
(
)
{
this
.
_isShown
=
false
;
return
super
.
hide
(
)
;
}
isShown
(
)
{
return
this
.
_isShown
;
}
}
exports
.
CustomHighlighterFront
=
CustomHighlighterFront
;
registerFront
(
CustomHighlighterFront
)
;
