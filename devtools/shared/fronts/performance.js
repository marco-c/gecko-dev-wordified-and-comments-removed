"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
{
Front
FrontClass
custom
preEvent
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
PerformanceRecordingFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
performance
-
recording
"
)
;
const
{
performanceSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
performance
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
loader
.
lazyRequireGetter
(
this
"
PerformanceIO
"
"
devtools
/
client
/
performance
/
modules
/
io
"
)
;
loader
.
lazyRequireGetter
(
this
"
LegacyPerformanceFront
"
"
devtools
/
client
/
performance
/
legacy
/
front
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getSystemInfo
"
"
devtools
/
shared
/
system
"
true
)
;
const
PerformanceFront
=
FrontClass
(
performanceSpec
{
initialize
:
function
(
client
form
)
{
Front
.
prototype
.
initialize
.
call
(
this
client
form
)
;
this
.
actorID
=
form
.
performanceActor
;
this
.
manage
(
this
)
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
connect
:
custom
(
Task
.
async
(
function
*
(
)
{
let
systemClient
=
yield
getSystemInfo
(
)
;
let
{
traits
}
=
yield
this
.
_connect
(
{
systemClient
}
)
;
this
.
_traits
=
traits
;
return
this
.
_traits
;
}
)
{
impl
:
"
_connect
"
}
)
get
traits
(
)
{
if
(
!
this
.
_traits
)
{
Cu
.
reportError
(
"
Cannot
access
traits
of
PerformanceFront
before
"
+
"
calling
connect
(
)
.
"
)
;
}
return
this
.
_traits
;
}
getBufferUsageForRecording
:
function
(
recording
)
{
if
(
!
recording
.
isRecording
(
)
)
{
return
void
0
;
}
let
{
position
:
currentPosition
totalSize
generation
:
currentGeneration
}
=
this
.
_currentBufferStatus
;
let
{
position
:
origPosition
generation
:
origGeneration
}
=
recording
.
getStartingBufferStatus
(
)
;
let
normalizedCurrent
=
(
totalSize
*
(
currentGeneration
-
origGeneration
)
)
+
currentPosition
;
let
percent
=
(
normalizedCurrent
-
origPosition
)
/
totalSize
;
if
(
percent
<
0
)
{
return
0
;
}
else
if
(
percent
>
1
)
{
return
1
;
}
return
percent
;
}
importRecording
:
function
(
file
)
{
return
PerformanceIO
.
loadRecordingFromFile
(
file
)
.
then
(
recordingData
=
>
{
let
model
=
new
PerformanceRecordingFront
(
)
;
model
.
_imported
=
true
;
model
.
_label
=
recordingData
.
label
|
|
"
"
;
model
.
_duration
=
recordingData
.
duration
;
model
.
_markers
=
recordingData
.
markers
;
model
.
_frames
=
recordingData
.
frames
;
model
.
_memory
=
recordingData
.
memory
;
model
.
_ticks
=
recordingData
.
ticks
;
model
.
_allocations
=
recordingData
.
allocations
;
model
.
_profile
=
recordingData
.
profile
;
model
.
_configuration
=
recordingData
.
configuration
|
|
{
}
;
model
.
_systemHost
=
recordingData
.
systemHost
;
model
.
_systemClient
=
recordingData
.
systemClient
;
return
model
;
}
)
;
}
_onProfilerStatus
:
preEvent
(
"
profiler
-
status
"
function
(
data
)
{
this
.
_currentBufferStatus
=
data
;
}
)
_onTimelineEvent
:
preEvent
(
"
timeline
-
data
"
function
(
type
data
recordings
)
{
for
(
let
recording
of
recordings
)
{
recording
.
_addTimelineData
(
type
data
)
;
}
}
)
}
)
;
exports
.
PerformanceFront
=
PerformanceFront
;
exports
.
createPerformanceFront
=
function
createPerformanceFront
(
target
)
{
if
(
target
.
TEST_PERFORMANCE_LEGACY_FRONT
|
|
!
target
.
form
.
performanceActor
)
{
return
new
LegacyPerformanceFront
(
target
)
;
}
return
new
PerformanceFront
(
target
.
client
target
.
form
)
;
}
;
