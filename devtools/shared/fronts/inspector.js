"
use
strict
"
;
require
(
"
devtools
/
shared
/
fronts
/
styles
"
)
;
require
(
"
devtools
/
shared
/
fronts
/
highlighters
"
)
;
const
{
SimpleStringFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
string
"
)
;
const
{
Front
FrontClassWithSpec
custom
preEvent
types
}
=
require
(
"
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
inspectorSpec
nodeSpec
nodeListSpec
walkerSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
inspector
"
)
;
const
promise
=
require
(
"
promise
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
Class
}
=
require
(
"
sdk
/
core
/
heritage
"
)
;
const
events
=
require
(
"
sdk
/
event
/
core
"
)
;
const
object
=
require
(
"
sdk
/
util
/
object
"
)
;
const
nodeConstants
=
require
(
"
devtools
/
shared
/
dom
-
node
-
constants
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
CommandUtils
"
"
devtools
/
client
/
shared
/
developer
-
toolbar
"
true
)
;
const
HIDDEN_CLASS
=
"
__fx
-
devtools
-
hide
-
shortcut__
"
;
const
AttributeModificationList
=
Class
(
{
initialize
:
function
(
node
)
{
this
.
node
=
node
;
this
.
modifications
=
[
]
;
}
apply
:
function
(
)
{
let
ret
=
this
.
node
.
modifyAttributes
(
this
.
modifications
)
;
return
ret
;
}
destroy
:
function
(
)
{
this
.
node
=
null
;
this
.
modification
=
null
;
}
setAttributeNS
:
function
(
ns
name
value
)
{
this
.
modifications
.
push
(
{
attributeNamespace
:
ns
attributeName
:
name
newValue
:
value
}
)
;
}
setAttribute
:
function
(
name
value
)
{
this
.
setAttributeNS
(
undefined
name
value
)
;
}
removeAttributeNS
:
function
(
ns
name
)
{
this
.
setAttributeNS
(
ns
name
undefined
)
;
}
removeAttribute
:
function
(
name
)
{
this
.
setAttributeNS
(
undefined
name
undefined
)
;
}
}
)
;
const
NodeFront
=
FrontClassWithSpec
(
nodeSpec
{
initialize
:
function
(
conn
form
detail
ctx
)
{
this
.
_parent
=
null
;
this
.
_child
=
null
;
this
.
_next
=
null
;
this
.
_prev
=
null
;
Front
.
prototype
.
initialize
.
call
(
this
conn
form
detail
ctx
)
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
form
:
function
(
form
detail
ctx
)
{
if
(
detail
=
=
=
"
actorid
"
)
{
this
.
actorID
=
form
;
return
;
}
if
(
form
.
shortValue
)
{
form
.
nodeValue
=
form
.
incompleteValue
?
null
:
form
.
shortValue
;
}
this
.
_form
=
object
.
merge
(
form
)
;
this
.
_form
.
attrs
=
this
.
_form
.
attrs
?
this
.
_form
.
attrs
.
slice
(
)
:
[
]
;
if
(
form
.
parent
)
{
let
parentNodeFront
=
ctx
.
marshallPool
(
)
.
ensureParentFront
(
form
.
parent
)
;
this
.
reparent
(
parentNodeFront
)
;
}
if
(
form
.
inlineTextChild
)
{
this
.
inlineTextChild
=
types
.
getType
(
"
domnode
"
)
.
read
(
form
.
inlineTextChild
ctx
)
;
}
else
{
this
.
inlineTextChild
=
undefined
;
}
}
parentNode
:
function
(
)
{
return
this
.
_parent
;
}
updateMutation
:
function
(
change
)
{
if
(
change
.
type
=
=
=
"
attributes
"
)
{
this
.
_attrMap
=
undefined
;
let
found
=
false
;
for
(
let
i
=
0
;
i
<
this
.
attributes
.
length
;
i
+
+
)
{
let
attr
=
this
.
attributes
[
i
]
;
if
(
attr
.
name
=
=
change
.
attributeName
&
&
attr
.
namespace
=
=
change
.
attributeNamespace
)
{
if
(
change
.
newValue
!
=
=
null
)
{
attr
.
value
=
change
.
newValue
;
}
else
{
this
.
attributes
.
splice
(
i
1
)
;
}
found
=
true
;
break
;
}
}
if
(
!
found
&
&
change
.
newValue
!
=
=
null
)
{
this
.
attributes
.
push
(
{
name
:
change
.
attributeName
namespace
:
change
.
attributeNamespace
value
:
change
.
newValue
}
)
;
}
}
else
if
(
change
.
type
=
=
=
"
characterData
"
)
{
this
.
_form
.
nodeValue
=
change
.
newValue
;
}
else
if
(
change
.
type
=
=
=
"
pseudoClassLock
"
)
{
this
.
_form
.
pseudoClassLocks
=
change
.
pseudoClassLocks
;
}
else
if
(
change
.
type
=
=
=
"
events
"
)
{
this
.
_form
.
hasEventListeners
=
change
.
hasEventListeners
;
}
}
get
id
(
)
{
return
this
.
getAttribute
(
"
id
"
)
;
}
get
nodeType
(
)
{
return
this
.
_form
.
nodeType
;
}
get
namespaceURI
(
)
{
return
this
.
_form
.
namespaceURI
;
}
get
nodeName
(
)
{
return
this
.
_form
.
nodeName
;
}
get
displayName
(
)
{
let
{
displayName
nodeName
}
=
this
.
_form
;
return
displayName
|
|
nodeName
.
toLowerCase
(
)
;
}
get
doctypeString
(
)
{
return
"
<
!
DOCTYPE
"
+
this
.
_form
.
name
+
(
this
.
_form
.
publicId
?
"
PUBLIC
\
"
"
+
this
.
_form
.
publicId
+
"
\
"
"
:
"
"
)
+
(
this
.
_form
.
systemId
?
"
\
"
"
+
this
.
_form
.
systemId
+
"
\
"
"
:
"
"
)
+
"
>
"
;
}
get
baseURI
(
)
{
return
this
.
_form
.
baseURI
;
}
get
className
(
)
{
return
this
.
getAttribute
(
"
class
"
)
|
|
"
"
;
}
get
hasChildren
(
)
{
return
this
.
_form
.
numChildren
>
0
;
}
get
numChildren
(
)
{
return
this
.
_form
.
numChildren
;
}
get
hasEventListeners
(
)
{
return
this
.
_form
.
hasEventListeners
;
}
get
isBeforePseudoElement
(
)
{
return
this
.
_form
.
isBeforePseudoElement
;
}
get
isAfterPseudoElement
(
)
{
return
this
.
_form
.
isAfterPseudoElement
;
}
get
isPseudoElement
(
)
{
return
this
.
isBeforePseudoElement
|
|
this
.
isAfterPseudoElement
;
}
get
isAnonymous
(
)
{
return
this
.
_form
.
isAnonymous
;
}
get
isInHTMLDocument
(
)
{
return
this
.
_form
.
isInHTMLDocument
;
}
get
tagName
(
)
{
return
this
.
nodeType
=
=
=
nodeConstants
.
ELEMENT_NODE
?
this
.
nodeName
:
null
;
}
get
isDocumentElement
(
)
{
return
!
!
this
.
_form
.
isDocumentElement
;
}
get
name
(
)
{
return
this
.
_form
.
name
;
}
get
publicId
(
)
{
return
this
.
_form
.
publicId
;
}
get
systemId
(
)
{
return
this
.
_form
.
systemId
;
}
getAttribute
:
function
(
name
)
{
let
attr
=
this
.
_getAttribute
(
name
)
;
return
attr
?
attr
.
value
:
null
;
}
hasAttribute
:
function
(
name
)
{
this
.
_cacheAttributes
(
)
;
return
(
name
in
this
.
_attrMap
)
;
}
get
hidden
(
)
{
let
cls
=
this
.
getAttribute
(
"
class
"
)
;
return
cls
&
&
cls
.
indexOf
(
HIDDEN_CLASS
)
>
-
1
;
}
get
attributes
(
)
{
return
this
.
_form
.
attrs
;
}
get
pseudoClassLocks
(
)
{
return
this
.
_form
.
pseudoClassLocks
|
|
[
]
;
}
hasPseudoClassLock
:
function
(
pseudo
)
{
return
this
.
pseudoClassLocks
.
some
(
locked
=
>
locked
=
=
=
pseudo
)
;
}
get
isDisplayed
(
)
{
return
"
isDisplayed
"
in
this
.
_form
?
this
.
_form
.
isDisplayed
:
true
;
}
get
isTreeDisplayed
(
)
{
let
parent
=
this
;
while
(
parent
)
{
if
(
!
parent
.
isDisplayed
)
{
return
false
;
}
parent
=
parent
.
parentNode
(
)
;
}
return
true
;
}
getNodeValue
:
custom
(
function
(
)
{
if
(
this
.
_form
.
nodeValue
=
=
=
null
&
&
this
.
_form
.
shortValue
)
{
return
this
.
_getNodeValue
(
)
;
}
let
str
=
this
.
_form
.
nodeValue
|
|
"
"
;
return
promise
.
resolve
(
new
SimpleStringFront
(
str
)
)
;
}
{
impl
:
"
_getNodeValue
"
}
)
getFormProperty
:
function
(
name
)
{
return
this
.
_form
.
props
?
this
.
_form
.
props
[
name
]
:
null
;
}
hasFormProperty
:
function
(
name
)
{
return
this
.
_form
.
props
?
(
name
in
this
.
_form
.
props
)
:
null
;
}
get
formProperties
(
)
{
return
this
.
_form
.
props
;
}
startModifyingAttributes
:
function
(
)
{
return
AttributeModificationList
(
this
)
;
}
_cacheAttributes
:
function
(
)
{
if
(
typeof
this
.
_attrMap
!
=
"
undefined
"
)
{
return
;
}
this
.
_attrMap
=
{
}
;
for
(
let
attr
of
this
.
attributes
)
{
this
.
_attrMap
[
attr
.
name
]
=
attr
;
}
}
_getAttribute
:
function
(
name
)
{
this
.
_cacheAttributes
(
)
;
return
this
.
_attrMap
[
name
]
|
|
undefined
;
}
reparent
:
function
(
parent
)
{
if
(
this
.
_parent
=
=
=
parent
)
{
return
;
}
if
(
this
.
_parent
&
&
this
.
_parent
.
_child
=
=
=
this
)
{
this
.
_parent
.
_child
=
this
.
_next
;
}
if
(
this
.
_prev
)
{
this
.
_prev
.
_next
=
this
.
_next
;
}
if
(
this
.
_next
)
{
this
.
_next
.
_prev
=
this
.
_prev
;
}
this
.
_next
=
null
;
this
.
_prev
=
null
;
this
.
_parent
=
parent
;
if
(
!
parent
)
{
return
;
}
this
.
_next
=
parent
.
_child
;
if
(
this
.
_next
)
{
this
.
_next
.
_prev
=
this
;
}
parent
.
_child
=
this
;
}
treeChildren
:
function
(
)
{
let
ret
=
[
]
;
for
(
let
child
=
this
.
_child
;
child
!
=
null
;
child
=
child
.
_next
)
{
ret
.
push
(
child
)
;
}
return
ret
;
}
isLocalToBeDeprecated
:
function
(
)
{
return
!
!
this
.
conn
.
_transport
.
_serverConnection
;
}
rawNode
:
function
(
rawNode
)
{
if
(
!
this
.
isLocalToBeDeprecated
(
)
)
{
console
.
warn
(
"
Tried
to
use
rawNode
on
a
remote
connection
.
"
)
;
return
null
;
}
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
let
actor
=
DebuggerServer
.
_searchAllConnectionsForActor
(
this
.
actorID
)
;
if
(
!
actor
)
{
return
null
;
}
return
actor
.
rawNode
;
}
}
)
;
exports
.
NodeFront
=
NodeFront
;
const
NodeListFront
=
FrontClassWithSpec
(
nodeListSpec
{
initialize
:
function
(
client
form
)
{
Front
.
prototype
.
initialize
.
call
(
this
client
form
)
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
marshallPool
:
function
(
)
{
return
this
.
parent
(
)
;
}
form
:
function
(
json
)
{
this
.
length
=
json
.
length
;
}
item
:
custom
(
function
(
index
)
{
return
this
.
_item
(
index
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
{
impl
:
"
_item
"
}
)
items
:
custom
(
function
(
start
end
)
{
return
this
.
_items
(
start
end
)
.
then
(
response
=
>
{
return
response
.
nodes
;
}
)
;
}
{
impl
:
"
_items
"
}
)
}
)
;
exports
.
NodeListFront
=
NodeListFront
;
const
WalkerFront
=
FrontClassWithSpec
(
walkerSpec
{
autoCleanup
:
true
pick
:
custom
(
function
(
)
{
return
this
.
_pick
(
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
{
impl
:
"
_pick
"
}
)
initialize
:
function
(
client
form
)
{
this
.
_createRootNodePromise
(
)
;
Front
.
prototype
.
initialize
.
call
(
this
client
form
)
;
this
.
_orphaned
=
new
Set
(
)
;
this
.
_retainedOrphans
=
new
Set
(
)
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
form
:
function
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
rootNode
=
types
.
getType
(
"
domnode
"
)
.
read
(
json
.
root
this
)
;
this
.
_rootNodeDeferred
.
resolve
(
this
.
rootNode
)
;
this
.
traits
=
json
.
traits
|
|
{
}
;
}
getRootNode
:
function
(
)
{
return
this
.
_rootNodeDeferred
.
promise
;
}
_createRootNodePromise
:
function
(
)
{
this
.
_rootNodeDeferred
=
defer
(
)
;
this
.
_rootNodeDeferred
.
promise
.
then
(
(
)
=
>
{
events
.
emit
(
this
"
new
-
root
"
)
;
}
)
;
}
ensureParentFront
:
function
(
id
)
{
let
front
=
this
.
get
(
id
)
;
if
(
front
)
{
return
front
;
}
return
types
.
getType
(
"
domnode
"
)
.
read
(
{
actor
:
id
}
this
"
standin
"
)
;
}
retainNode
:
custom
(
function
(
node
)
{
return
this
.
_retainNode
(
node
)
.
then
(
(
)
=
>
{
node
.
retained
=
true
;
}
)
;
}
{
impl
:
"
_retainNode
"
}
)
unretainNode
:
custom
(
function
(
node
)
{
return
this
.
_unretainNode
(
node
)
.
then
(
(
)
=
>
{
node
.
retained
=
false
;
if
(
this
.
_retainedOrphans
.
has
(
node
)
)
{
this
.
_retainedOrphans
.
delete
(
node
)
;
this
.
_releaseFront
(
node
)
;
}
}
)
;
}
{
impl
:
"
_unretainNode
"
}
)
releaseNode
:
custom
(
function
(
node
options
=
{
}
)
{
let
actorID
=
node
.
actorID
;
this
.
_releaseFront
(
node
!
!
options
.
force
)
;
return
this
.
_releaseNode
(
{
actorID
:
actorID
}
)
;
}
{
impl
:
"
_releaseNode
"
}
)
findInspectingNode
:
custom
(
function
(
)
{
return
this
.
_findInspectingNode
(
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
{
impl
:
"
_findInspectingNode
"
}
)
querySelector
:
custom
(
function
(
queryNode
selector
)
{
return
this
.
_querySelector
(
queryNode
selector
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
{
impl
:
"
_querySelector
"
}
)
getNodeActorFromObjectActor
:
custom
(
function
(
objectActorID
)
{
return
this
.
_getNodeActorFromObjectActor
(
objectActorID
)
.
then
(
response
=
>
{
return
response
?
response
.
node
:
null
;
}
)
;
}
{
impl
:
"
_getNodeActorFromObjectActor
"
}
)
getStyleSheetOwnerNode
:
custom
(
function
(
styleSheetActorID
)
{
return
this
.
_getStyleSheetOwnerNode
(
styleSheetActorID
)
.
then
(
response
=
>
{
return
response
?
response
.
node
:
null
;
}
)
;
}
{
impl
:
"
_getStyleSheetOwnerNode
"
}
)
getNodeFromActor
:
custom
(
function
(
actorID
path
)
{
return
this
.
_getNodeFromActor
(
actorID
path
)
.
then
(
response
=
>
{
return
response
?
response
.
node
:
null
;
}
)
;
}
{
impl
:
"
_getNodeFromActor
"
}
)
search
:
custom
(
Task
.
async
(
function
*
(
query
options
=
{
}
)
{
let
nodeList
;
let
searchType
;
let
searchData
=
this
.
searchData
=
this
.
searchData
|
|
{
}
;
let
selectorOnly
=
!
!
options
.
selectorOnly
;
if
(
selectorOnly
|
|
!
this
.
traits
.
textSearch
)
{
searchType
=
"
selector
"
;
if
(
this
.
traits
.
multiFrameQuerySelectorAll
)
{
nodeList
=
yield
this
.
multiFrameQuerySelectorAll
(
query
)
;
}
else
{
nodeList
=
yield
this
.
querySelectorAll
(
this
.
rootNode
query
)
;
}
}
else
{
searchType
=
"
search
"
;
let
result
=
yield
this
.
_search
(
query
options
)
;
nodeList
=
result
.
list
;
}
if
(
searchData
.
query
!
=
=
query
|
|
searchData
.
selectorOnly
!
=
=
selectorOnly
)
{
searchData
.
selectorOnly
=
selectorOnly
;
searchData
.
query
=
query
;
searchData
.
index
=
-
1
;
}
if
(
!
nodeList
.
length
)
{
return
null
;
}
searchData
.
index
=
options
.
reverse
?
searchData
.
index
-
1
:
searchData
.
index
+
1
;
if
(
searchData
.
index
>
=
nodeList
.
length
)
{
searchData
.
index
=
0
;
}
if
(
searchData
.
index
<
0
)
{
searchData
.
index
=
nodeList
.
length
-
1
;
}
let
node
=
yield
nodeList
.
item
(
searchData
.
index
)
;
return
{
type
:
searchType
node
:
node
resultsLength
:
nodeList
.
length
resultsIndex
:
searchData
.
index
}
;
}
)
{
impl
:
"
_search
"
}
)
_releaseFront
:
function
(
node
force
)
{
if
(
node
.
retained
&
&
!
force
)
{
node
.
reparent
(
null
)
;
this
.
_retainedOrphans
.
add
(
node
)
;
return
;
}
if
(
node
.
retained
)
{
this
.
_retainedOrphans
.
delete
(
node
)
;
}
for
(
let
child
of
node
.
treeChildren
(
)
)
{
this
.
_releaseFront
(
child
force
)
;
}
node
.
reparent
(
null
)
;
node
.
destroy
(
)
;
}
getMutations
:
custom
(
function
(
options
=
{
}
)
{
return
this
.
_getMutations
(
options
)
.
then
(
mutations
=
>
{
let
emitMutations
=
[
]
;
for
(
let
change
of
mutations
)
{
let
targetID
;
let
targetFront
;
if
(
change
.
type
=
=
=
"
newRoot
"
)
{
this
.
rootNode
=
types
.
getType
(
"
domnode
"
)
.
read
(
change
.
target
this
)
;
this
.
_rootNodeDeferred
.
resolve
(
this
.
rootNode
)
;
targetID
=
this
.
rootNode
.
actorID
;
targetFront
=
this
.
rootNode
;
}
else
{
targetID
=
change
.
target
;
targetFront
=
this
.
get
(
targetID
)
;
}
if
(
!
targetFront
)
{
console
.
trace
(
"
Got
a
mutation
for
an
unexpected
actor
:
"
+
targetID
+
"
please
file
a
bug
on
bugzilla
.
mozilla
.
org
!
"
)
;
continue
;
}
let
emittedMutation
=
object
.
merge
(
change
{
target
:
targetFront
}
)
;
if
(
change
.
type
=
=
=
"
childList
"
|
|
change
.
type
=
=
=
"
nativeAnonymousChildList
"
)
{
let
addedFronts
=
[
]
;
let
removedFronts
=
[
]
;
for
(
let
removed
of
change
.
removed
)
{
let
removedFront
=
this
.
get
(
removed
)
;
if
(
!
removedFront
)
{
console
.
error
(
"
Got
a
removal
of
an
actor
we
didn
'
t
know
about
:
"
+
removed
)
;
continue
;
}
removedFront
.
reparent
(
null
)
;
this
.
_orphaned
.
add
(
removedFront
)
;
removedFronts
.
push
(
removedFront
)
;
}
for
(
let
added
of
change
.
added
)
{
let
addedFront
=
this
.
get
(
added
)
;
if
(
!
addedFront
)
{
console
.
error
(
"
Got
an
addition
of
an
actor
we
didn
'
t
know
"
+
"
about
:
"
+
added
)
;
continue
;
}
addedFront
.
reparent
(
targetFront
)
;
this
.
_orphaned
.
delete
(
addedFront
)
;
addedFronts
.
push
(
addedFront
)
;
}
emittedMutation
.
added
=
addedFronts
;
emittedMutation
.
removed
=
removedFronts
;
if
(
"
numChildren
"
in
change
)
{
targetFront
.
_form
.
numChildren
=
change
.
numChildren
;
}
}
else
if
(
change
.
type
=
=
=
"
frameLoad
"
)
{
for
(
let
child
of
targetFront
.
treeChildren
(
)
)
{
if
(
child
.
nodeType
=
=
=
nodeConstants
.
DOCUMENT_NODE
)
{
console
.
trace
(
"
Got
an
unexpected
frameLoad
in
the
inspector
"
+
"
please
file
a
bug
on
bugzilla
.
mozilla
.
org
!
"
)
;
}
}
}
else
if
(
change
.
type
=
=
=
"
documentUnload
"
)
{
if
(
targetFront
=
=
=
this
.
rootNode
)
{
this
.
_createRootNodePromise
(
)
;
}
emittedMutation
.
target
=
targetFront
.
actorID
;
emittedMutation
.
targetParent
=
targetFront
.
parentNode
(
)
;
this
.
_releaseFront
(
targetFront
true
)
;
}
else
if
(
change
.
type
=
=
=
"
unretained
"
)
{
for
(
let
released
of
change
.
nodes
)
{
let
releasedFront
=
this
.
get
(
released
)
;
this
.
_retainedOrphans
.
delete
(
released
)
;
this
.
_releaseFront
(
releasedFront
true
)
;
}
}
else
{
targetFront
.
updateMutation
(
change
)
;
}
if
(
change
.
type
=
=
=
"
inlineTextChild
"
|
|
change
.
type
=
=
=
"
childList
"
|
|
change
.
type
=
=
=
"
nativeAnonymousChildList
"
)
{
if
(
change
.
inlineTextChild
)
{
targetFront
.
inlineTextChild
=
types
.
getType
(
"
domnode
"
)
.
read
(
change
.
inlineTextChild
this
)
;
}
else
{
targetFront
.
inlineTextChild
=
undefined
;
}
}
emitMutations
.
push
(
emittedMutation
)
;
}
if
(
options
.
cleanup
)
{
for
(
let
node
of
this
.
_orphaned
)
{
this
.
_releaseFront
(
node
)
;
}
this
.
_orphaned
=
new
Set
(
)
;
}
events
.
emit
(
this
"
mutations
"
emitMutations
)
;
}
)
;
}
{
impl
:
"
_getMutations
"
}
)
onMutations
:
preEvent
(
"
new
-
mutations
"
function
(
)
{
this
.
getMutations
(
{
cleanup
:
this
.
autoCleanup
}
)
.
catch
(
(
)
=
>
{
}
)
;
}
)
isLocal
:
function
(
)
{
return
!
!
this
.
conn
.
_transport
.
_serverConnection
;
}
frontForRawNode
:
function
(
rawNode
)
{
if
(
!
this
.
isLocal
(
)
)
{
console
.
warn
(
"
Tried
to
use
frontForRawNode
on
a
remote
connection
.
"
)
;
return
null
;
}
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
let
walkerActor
=
DebuggerServer
.
_searchAllConnectionsForActor
(
this
.
actorID
)
;
if
(
!
walkerActor
)
{
throw
Error
(
"
Could
not
find
client
side
for
actor
"
+
this
.
actorID
)
;
}
let
nodeActor
=
walkerActor
.
_ref
(
rawNode
)
;
let
nodeType
=
types
.
getType
(
"
domnode
"
)
;
let
returnNode
=
nodeType
.
read
(
nodeType
.
write
(
nodeActor
walkerActor
)
this
)
;
let
top
=
returnNode
;
let
extras
=
walkerActor
.
parents
(
nodeActor
{
sameTypeRootTreeItem
:
true
}
)
;
for
(
let
extraActor
of
extras
)
{
top
=
nodeType
.
read
(
nodeType
.
write
(
extraActor
walkerActor
)
this
)
;
}
if
(
top
!
=
=
this
.
rootNode
)
{
this
.
_orphaned
.
add
(
top
)
;
walkerActor
.
_orphaned
.
add
(
DebuggerServer
.
_searchAllConnectionsForActor
(
top
.
actorID
)
)
;
}
return
returnNode
;
}
removeNode
:
custom
(
Task
.
async
(
function
*
(
node
)
{
let
previousSibling
=
yield
this
.
previousSibling
(
node
)
;
let
nextSibling
=
yield
this
.
_removeNode
(
node
)
;
return
{
previousSibling
:
previousSibling
nextSibling
:
nextSibling
}
;
}
)
{
impl
:
"
_removeNode
"
}
)
}
)
;
exports
.
WalkerFront
=
WalkerFront
;
var
InspectorFront
=
FrontClassWithSpec
(
inspectorSpec
{
initialize
:
function
(
client
tabForm
)
{
Front
.
prototype
.
initialize
.
call
(
this
client
)
;
this
.
actorID
=
tabForm
.
inspectorActor
;
this
.
manage
(
this
)
;
}
destroy
:
function
(
)
{
delete
this
.
walker
;
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
getWalker
:
custom
(
function
(
options
=
{
}
)
{
return
this
.
_getWalker
(
options
)
.
then
(
walker
=
>
{
this
.
walker
=
walker
;
return
walker
;
}
)
;
}
{
impl
:
"
_getWalker
"
}
)
getPageStyle
:
custom
(
function
(
)
{
return
this
.
_getPageStyle
(
)
.
then
(
pageStyle
=
>
{
if
(
this
.
walker
)
{
return
pageStyle
;
}
return
this
.
getWalker
(
)
.
then
(
(
)
=
>
{
return
pageStyle
;
}
)
;
}
)
;
}
{
impl
:
"
_getPageStyle
"
}
)
pickColorFromPage
:
custom
(
Task
.
async
(
function
*
(
toolbox
options
)
{
if
(
toolbox
)
{
let
{
target
}
=
toolbox
;
let
requisition
=
yield
CommandUtils
.
createRequisition
(
target
{
environment
:
CommandUtils
.
createEnvironment
(
{
target
}
)
}
)
;
yield
requisition
.
updateExec
(
"
eyedropper
-
-
hide
"
)
;
}
yield
this
.
_pickColorFromPage
(
options
)
;
}
)
{
impl
:
"
_pickColorFromPage
"
}
)
}
)
;
exports
.
InspectorFront
=
InspectorFront
;
