"
use
strict
"
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
const
telemetry
=
new
Telemetry
(
)
;
const
TELEMETRY_EYEDROPPER_OPENED
=
"
DEVTOOLS_EYEDROPPER_OPENED_COUNT
"
;
const
TELEMETRY_EYEDROPPER_OPENED_MENU
=
"
DEVTOOLS_MENU_EYEDROPPER_OPENED_COUNT
"
;
const
SHOW_ALL_ANONYMOUS_CONTENT_PREF
=
"
devtools
.
inspector
.
showAllAnonymousContent
"
;
const
SHOW_UA_SHADOW_ROOTS_PREF
=
"
devtools
.
inspector
.
showUserAgentShadowRoots
"
;
const
{
FrontClassWithSpec
types
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
inspectorSpec
walkerSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
inspector
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
loader
.
lazyRequireGetter
(
this
"
nodeConstants
"
"
devtools
/
shared
/
dom
-
node
-
constants
"
)
;
loader
.
lazyRequireGetter
(
this
"
Selection
"
"
devtools
/
client
/
framework
/
selection
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
flags
"
"
devtools
/
shared
/
flags
"
)
;
class
WalkerFront
extends
FrontClassWithSpec
(
walkerSpec
)
{
pick
(
)
{
return
super
.
pick
(
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
constructor
(
client
form
)
{
super
(
client
form
)
;
this
.
_createRootNodePromise
(
)
;
this
.
_orphaned
=
new
Set
(
)
;
this
.
_retainedOrphans
=
new
Set
(
)
;
this
.
autoCleanup
=
true
;
this
.
before
(
"
new
-
mutations
"
this
.
onMutations
.
bind
(
this
)
)
;
}
destroy
(
)
{
super
.
destroy
(
)
;
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
rootNode
=
types
.
getType
(
"
domnode
"
)
.
read
(
json
.
root
this
)
;
this
.
_rootNodeDeferred
.
resolve
(
this
.
rootNode
)
;
this
.
traits
=
json
.
traits
|
|
{
}
;
}
getRootNode
(
)
{
return
this
.
_rootNodeDeferred
.
promise
;
}
_createRootNodePromise
(
)
{
this
.
_rootNodeDeferred
=
defer
(
)
;
this
.
_rootNodeDeferred
.
promise
.
then
(
(
)
=
>
{
this
.
emit
(
"
new
-
root
"
)
;
}
)
;
}
ensureDOMNodeFront
(
id
)
{
const
front
=
this
.
get
(
id
)
;
if
(
front
)
{
return
front
;
}
return
types
.
getType
(
"
domnode
"
)
.
read
(
{
actor
:
id
}
this
"
standin
"
)
;
}
retainNode
(
node
)
{
return
super
.
retainNode
(
node
)
.
then
(
(
)
=
>
{
node
.
retained
=
true
;
}
)
;
}
unretainNode
(
node
)
{
return
super
.
unretainNode
(
node
)
.
then
(
(
)
=
>
{
node
.
retained
=
false
;
if
(
this
.
_retainedOrphans
.
has
(
node
)
)
{
this
.
_retainedOrphans
.
delete
(
node
)
;
this
.
_releaseFront
(
node
)
;
}
}
)
;
}
releaseNode
(
node
options
=
{
}
)
{
const
actorID
=
node
.
actorID
;
this
.
_releaseFront
(
node
!
!
options
.
force
)
;
return
super
.
releaseNode
(
{
actorID
:
actorID
}
)
;
}
findInspectingNode
(
)
{
return
super
.
findInspectingNode
(
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
querySelector
(
queryNode
selector
)
{
return
super
.
querySelector
(
queryNode
selector
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
async
gripToNodeFront
(
grip
)
{
const
response
=
await
this
.
getNodeActorFromObjectActor
(
grip
.
actor
)
;
const
nodeFront
=
response
?
response
.
node
:
null
;
if
(
!
nodeFront
)
{
throw
new
Error
(
"
The
ValueGrip
passed
could
not
be
translated
to
a
NodeFront
"
)
;
}
return
nodeFront
;
}
getNodeActorFromWindowID
(
windowID
)
{
return
super
.
getNodeActorFromWindowID
(
windowID
)
.
then
(
response
=
>
{
return
response
?
response
.
node
:
null
;
}
)
;
}
getStyleSheetOwnerNode
(
styleSheetActorID
)
{
return
super
.
getStyleSheetOwnerNode
(
styleSheetActorID
)
.
then
(
response
=
>
{
return
response
?
response
.
node
:
null
;
}
)
;
}
getNodeFromActor
(
actorID
path
)
{
return
super
.
getNodeFromActor
(
actorID
path
)
.
then
(
response
=
>
{
return
response
?
response
.
node
:
null
;
}
)
;
}
async
search
(
query
options
=
{
}
)
{
const
searchData
=
this
.
searchData
=
this
.
searchData
|
|
{
}
;
const
result
=
await
super
.
search
(
query
options
)
;
const
nodeList
=
result
.
list
;
if
(
searchData
.
query
!
=
=
query
)
{
searchData
.
query
=
query
;
searchData
.
index
=
-
1
;
}
if
(
!
nodeList
.
length
)
{
return
null
;
}
searchData
.
index
=
options
.
reverse
?
searchData
.
index
-
1
:
searchData
.
index
+
1
;
if
(
searchData
.
index
>
=
nodeList
.
length
)
{
searchData
.
index
=
0
;
}
if
(
searchData
.
index
<
0
)
{
searchData
.
index
=
nodeList
.
length
-
1
;
}
const
node
=
await
nodeList
.
item
(
searchData
.
index
)
;
return
{
type
:
"
search
"
node
:
node
resultsLength
:
nodeList
.
length
resultsIndex
:
searchData
.
index
}
;
}
_releaseFront
(
node
force
)
{
if
(
node
.
retained
&
&
!
force
)
{
node
.
reparent
(
null
)
;
this
.
_retainedOrphans
.
add
(
node
)
;
return
;
}
if
(
node
.
retained
)
{
this
.
_retainedOrphans
.
delete
(
node
)
;
}
for
(
const
child
of
node
.
treeChildren
(
)
)
{
this
.
_releaseFront
(
child
force
)
;
}
node
.
reparent
(
null
)
;
node
.
destroy
(
)
;
}
getMutations
(
options
=
{
}
)
{
return
super
.
getMutations
(
options
)
.
then
(
mutations
=
>
{
const
emitMutations
=
[
]
;
for
(
const
change
of
mutations
)
{
let
targetID
;
let
targetFront
;
if
(
change
.
type
=
=
=
"
newRoot
"
)
{
if
(
this
.
rootNode
)
{
this
.
_createRootNodePromise
(
)
;
}
this
.
rootNode
=
types
.
getType
(
"
domnode
"
)
.
read
(
change
.
target
this
)
;
this
.
_rootNodeDeferred
.
resolve
(
this
.
rootNode
)
;
targetID
=
this
.
rootNode
.
actorID
;
targetFront
=
this
.
rootNode
;
}
else
{
targetID
=
change
.
target
;
targetFront
=
this
.
get
(
targetID
)
;
}
if
(
!
targetFront
)
{
console
.
warn
(
"
Got
a
mutation
for
an
unexpected
actor
:
"
+
targetID
+
"
please
file
a
bug
on
bugzilla
.
mozilla
.
org
!
"
)
;
console
.
trace
(
)
;
continue
;
}
const
emittedMutation
=
Object
.
assign
(
change
{
target
:
targetFront
}
)
;
if
(
change
.
type
=
=
=
"
childList
"
|
|
change
.
type
=
=
=
"
nativeAnonymousChildList
"
)
{
const
addedFronts
=
[
]
;
const
removedFronts
=
[
]
;
for
(
const
removed
of
change
.
removed
)
{
const
removedFront
=
this
.
get
(
removed
)
;
if
(
!
removedFront
)
{
console
.
error
(
"
Got
a
removal
of
an
actor
we
didn
'
t
know
about
:
"
+
removed
)
;
continue
;
}
removedFront
.
reparent
(
null
)
;
this
.
_orphaned
.
add
(
removedFront
)
;
removedFronts
.
push
(
removedFront
)
;
}
for
(
const
added
of
change
.
added
)
{
const
addedFront
=
this
.
get
(
added
)
;
if
(
!
addedFront
)
{
console
.
error
(
"
Got
an
addition
of
an
actor
we
didn
'
t
know
"
+
"
about
:
"
+
added
)
;
continue
;
}
addedFront
.
reparent
(
targetFront
)
;
this
.
_orphaned
.
delete
(
addedFront
)
;
addedFronts
.
push
(
addedFront
)
;
}
emittedMutation
.
added
=
addedFronts
;
emittedMutation
.
removed
=
removedFronts
;
if
(
"
numChildren
"
in
change
)
{
targetFront
.
_form
.
numChildren
=
change
.
numChildren
;
}
}
else
if
(
change
.
type
=
=
=
"
frameLoad
"
)
{
for
(
const
child
of
targetFront
.
treeChildren
(
)
)
{
if
(
child
.
nodeType
=
=
=
nodeConstants
.
DOCUMENT_NODE
)
{
console
.
warn
(
"
Got
an
unexpected
frameLoad
in
the
inspector
"
+
"
please
file
a
bug
on
bugzilla
.
mozilla
.
org
!
"
)
;
console
.
trace
(
)
;
}
}
}
else
if
(
change
.
type
=
=
=
"
documentUnload
"
)
{
if
(
targetFront
=
=
=
this
.
rootNode
)
{
this
.
_createRootNodePromise
(
)
;
}
emittedMutation
.
target
=
targetFront
.
actorID
;
emittedMutation
.
targetParent
=
targetFront
.
parentNode
(
)
;
this
.
_releaseFront
(
targetFront
true
)
;
}
else
if
(
change
.
type
=
=
=
"
shadowRootAttached
"
)
{
targetFront
.
_form
.
isShadowHost
=
true
;
}
else
if
(
change
.
type
=
=
=
"
customElementDefined
"
)
{
targetFront
.
_form
.
customElementLocation
=
change
.
customElementLocation
;
}
else
if
(
change
.
type
=
=
=
"
unretained
"
)
{
for
(
const
released
of
change
.
nodes
)
{
const
releasedFront
=
this
.
get
(
released
)
;
this
.
_retainedOrphans
.
delete
(
released
)
;
this
.
_releaseFront
(
releasedFront
true
)
;
}
}
else
{
targetFront
.
updateMutation
(
change
)
;
}
if
(
change
.
type
=
=
=
"
inlineTextChild
"
|
|
change
.
type
=
=
=
"
childList
"
|
|
change
.
type
=
=
=
"
shadowRootAttached
"
|
|
change
.
type
=
=
=
"
nativeAnonymousChildList
"
)
{
if
(
change
.
inlineTextChild
)
{
targetFront
.
inlineTextChild
=
types
.
getType
(
"
domnode
"
)
.
read
(
change
.
inlineTextChild
this
)
;
}
else
{
targetFront
.
inlineTextChild
=
undefined
;
}
}
emitMutations
.
push
(
emittedMutation
)
;
}
if
(
options
.
cleanup
)
{
for
(
const
node
of
this
.
_orphaned
)
{
this
.
_releaseFront
(
node
)
;
}
this
.
_orphaned
=
new
Set
(
)
;
}
this
.
emit
(
"
mutations
"
emitMutations
)
;
}
)
;
}
onMutations
(
)
{
this
.
getMutations
(
{
cleanup
:
this
.
autoCleanup
}
)
.
catch
(
(
)
=
>
{
}
)
;
}
isLocal
(
)
{
return
!
!
this
.
conn
.
_transport
.
_serverConnection
;
}
async
removeNode
(
node
)
{
const
previousSibling
=
await
this
.
previousSibling
(
node
)
;
const
nextSibling
=
await
super
.
removeNode
(
node
)
;
return
{
previousSibling
:
previousSibling
nextSibling
:
nextSibling
}
;
}
}
exports
.
WalkerFront
=
WalkerFront
;
registerFront
(
WalkerFront
)
;
class
InspectorFront
extends
FrontClassWithSpec
(
inspectorSpec
)
{
constructor
(
client
tabForm
)
{
super
(
client
tabForm
)
;
this
.
actorID
=
tabForm
.
inspectorActor
;
this
.
_client
=
client
;
this
.
_highlighters
=
new
Map
(
)
;
this
.
manage
(
this
)
;
}
async
initialize
(
)
{
await
Promise
.
all
(
[
this
.
_getWalker
(
)
this
.
_getHighlighter
(
)
]
)
;
this
.
selection
=
new
Selection
(
this
.
walker
)
;
}
async
_getWalker
(
)
{
const
showAllAnonymousContent
=
Services
.
prefs
.
getBoolPref
(
SHOW_ALL_ANONYMOUS_CONTENT_PREF
)
;
const
showUserAgentShadowRoots
=
Services
.
prefs
.
getBoolPref
(
SHOW_UA_SHADOW_ROOTS_PREF
)
;
this
.
walker
=
await
this
.
getWalker
(
{
showAllAnonymousContent
showUserAgentShadowRoots
}
)
;
}
async
_getHighlighter
(
)
{
const
autohide
=
!
flags
.
testing
;
this
.
highlighter
=
await
this
.
getHighlighter
(
autohide
)
;
}
hasHighlighter
(
type
)
{
return
this
.
_highlighters
.
has
(
type
)
;
}
destroy
(
)
{
this
.
selection
.
destroy
(
)
;
this
.
destroyHighlighters
(
)
;
super
.
destroy
(
)
;
}
destroyHighlighters
(
)
{
for
(
const
type
of
this
.
_highlighters
.
keys
(
)
)
{
if
(
this
.
_highlighters
.
has
(
type
)
)
{
this
.
_highlighters
.
get
(
type
)
.
finalize
(
)
;
this
.
_highlighters
.
delete
(
type
)
;
}
}
}
async
getHighlighterByType
(
typeName
)
{
let
highlighter
=
null
;
try
{
highlighter
=
await
super
.
getHighlighterByType
(
typeName
)
;
}
catch
(
_
)
{
throw
new
Error
(
"
The
target
doesn
'
t
support
"
+
creating
highlighters
by
types
or
{
typeName
}
is
unknown
)
;
}
return
highlighter
;
}
getKnownHighlighter
(
type
)
{
return
this
.
_highlighters
.
get
(
type
)
;
}
async
getOrCreateHighlighterByType
(
type
)
{
let
front
=
this
.
_highlighters
.
get
(
type
)
;
if
(
!
front
)
{
front
=
await
this
.
getHighlighterByType
(
type
)
;
this
.
_highlighters
.
set
(
type
front
)
;
}
return
front
;
}
async
pickColorFromPage
(
options
)
{
await
super
.
pickColorFromPage
(
options
)
;
if
(
options
&
&
options
.
fromMenu
)
{
telemetry
.
getHistogramById
(
TELEMETRY_EYEDROPPER_OPENED_MENU
)
.
add
(
true
)
;
}
else
{
telemetry
.
getHistogramById
(
TELEMETRY_EYEDROPPER_OPENED
)
.
add
(
true
)
;
}
}
}
exports
.
InspectorFront
=
InspectorFront
;
registerFront
(
InspectorFront
)
;
