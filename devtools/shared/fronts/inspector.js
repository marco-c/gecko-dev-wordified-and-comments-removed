"
use
strict
"
;
const
{
Front
FrontClassWithSpec
custom
preEvent
types
}
=
require
(
"
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
inspectorSpec
walkerSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
inspector
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
loader
.
lazyRequireGetter
(
this
"
nodeConstants
"
"
devtools
/
shared
/
dom
-
node
-
constants
"
)
;
loader
.
lazyRequireGetter
(
this
"
CommandUtils
"
"
devtools
/
client
/
shared
/
developer
-
toolbar
"
true
)
;
const
WalkerFront
=
FrontClassWithSpec
(
walkerSpec
{
autoCleanup
:
true
pick
:
custom
(
function
(
)
{
return
this
.
_pick
(
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
{
impl
:
"
_pick
"
}
)
initialize
:
function
(
client
form
)
{
this
.
_createRootNodePromise
(
)
;
Front
.
prototype
.
initialize
.
call
(
this
client
form
)
;
this
.
_orphaned
=
new
Set
(
)
;
this
.
_retainedOrphans
=
new
Set
(
)
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
form
:
function
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
rootNode
=
types
.
getType
(
"
domnode
"
)
.
read
(
json
.
root
this
)
;
this
.
_rootNodeDeferred
.
resolve
(
this
.
rootNode
)
;
this
.
traits
=
json
.
traits
|
|
{
}
;
}
getRootNode
:
function
(
)
{
return
this
.
_rootNodeDeferred
.
promise
;
}
_createRootNodePromise
:
function
(
)
{
this
.
_rootNodeDeferred
=
defer
(
)
;
this
.
_rootNodeDeferred
.
promise
.
then
(
(
)
=
>
{
this
.
emit
(
"
new
-
root
"
)
;
}
)
;
}
ensureParentFront
:
function
(
id
)
{
let
front
=
this
.
get
(
id
)
;
if
(
front
)
{
return
front
;
}
return
types
.
getType
(
"
domnode
"
)
.
read
(
{
actor
:
id
}
this
"
standin
"
)
;
}
retainNode
:
custom
(
function
(
node
)
{
return
this
.
_retainNode
(
node
)
.
then
(
(
)
=
>
{
node
.
retained
=
true
;
}
)
;
}
{
impl
:
"
_retainNode
"
}
)
unretainNode
:
custom
(
function
(
node
)
{
return
this
.
_unretainNode
(
node
)
.
then
(
(
)
=
>
{
node
.
retained
=
false
;
if
(
this
.
_retainedOrphans
.
has
(
node
)
)
{
this
.
_retainedOrphans
.
delete
(
node
)
;
this
.
_releaseFront
(
node
)
;
}
}
)
;
}
{
impl
:
"
_unretainNode
"
}
)
releaseNode
:
custom
(
function
(
node
options
=
{
}
)
{
let
actorID
=
node
.
actorID
;
this
.
_releaseFront
(
node
!
!
options
.
force
)
;
return
this
.
_releaseNode
(
{
actorID
:
actorID
}
)
;
}
{
impl
:
"
_releaseNode
"
}
)
findInspectingNode
:
custom
(
function
(
)
{
return
this
.
_findInspectingNode
(
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
{
impl
:
"
_findInspectingNode
"
}
)
querySelector
:
custom
(
function
(
queryNode
selector
)
{
return
this
.
_querySelector
(
queryNode
selector
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
{
impl
:
"
_querySelector
"
}
)
getNodeActorFromObjectActor
:
custom
(
function
(
objectActorID
)
{
return
this
.
_getNodeActorFromObjectActor
(
objectActorID
)
.
then
(
response
=
>
{
return
response
?
response
.
node
:
null
;
}
)
;
}
{
impl
:
"
_getNodeActorFromObjectActor
"
}
)
getNodeActorFromWindowID
:
custom
(
function
(
windowID
)
{
return
this
.
_getNodeActorFromWindowID
(
windowID
)
.
then
(
response
=
>
{
return
response
?
response
.
node
:
null
;
}
)
;
}
{
impl
:
"
_getNodeActorFromWindowID
"
}
)
getStyleSheetOwnerNode
:
custom
(
function
(
styleSheetActorID
)
{
return
this
.
_getStyleSheetOwnerNode
(
styleSheetActorID
)
.
then
(
response
=
>
{
return
response
?
response
.
node
:
null
;
}
)
;
}
{
impl
:
"
_getStyleSheetOwnerNode
"
}
)
getNodeFromActor
:
custom
(
function
(
actorID
path
)
{
return
this
.
_getNodeFromActor
(
actorID
path
)
.
then
(
response
=
>
{
return
response
?
response
.
node
:
null
;
}
)
;
}
{
impl
:
"
_getNodeFromActor
"
}
)
search
:
custom
(
Task
.
async
(
function
*
(
query
options
=
{
}
)
{
let
nodeList
;
let
searchType
;
let
searchData
=
this
.
searchData
=
this
.
searchData
|
|
{
}
;
let
selectorOnly
=
!
!
options
.
selectorOnly
;
if
(
selectorOnly
)
{
searchType
=
"
selector
"
;
nodeList
=
yield
this
.
multiFrameQuerySelectorAll
(
query
)
;
}
else
{
searchType
=
"
search
"
;
let
result
=
yield
this
.
_search
(
query
options
)
;
nodeList
=
result
.
list
;
}
if
(
searchData
.
query
!
=
=
query
|
|
searchData
.
selectorOnly
!
=
=
selectorOnly
)
{
searchData
.
selectorOnly
=
selectorOnly
;
searchData
.
query
=
query
;
searchData
.
index
=
-
1
;
}
if
(
!
nodeList
.
length
)
{
return
null
;
}
searchData
.
index
=
options
.
reverse
?
searchData
.
index
-
1
:
searchData
.
index
+
1
;
if
(
searchData
.
index
>
=
nodeList
.
length
)
{
searchData
.
index
=
0
;
}
if
(
searchData
.
index
<
0
)
{
searchData
.
index
=
nodeList
.
length
-
1
;
}
let
node
=
yield
nodeList
.
item
(
searchData
.
index
)
;
return
{
type
:
searchType
node
:
node
resultsLength
:
nodeList
.
length
resultsIndex
:
searchData
.
index
}
;
}
)
{
impl
:
"
_search
"
}
)
_releaseFront
:
function
(
node
force
)
{
if
(
node
.
retained
&
&
!
force
)
{
node
.
reparent
(
null
)
;
this
.
_retainedOrphans
.
add
(
node
)
;
return
;
}
if
(
node
.
retained
)
{
this
.
_retainedOrphans
.
delete
(
node
)
;
}
for
(
let
child
of
node
.
treeChildren
(
)
)
{
this
.
_releaseFront
(
child
force
)
;
}
node
.
reparent
(
null
)
;
node
.
destroy
(
)
;
}
getMutations
:
custom
(
function
(
options
=
{
}
)
{
return
this
.
_getMutations
(
options
)
.
then
(
mutations
=
>
{
let
emitMutations
=
[
]
;
for
(
let
change
of
mutations
)
{
let
targetID
;
let
targetFront
;
if
(
change
.
type
=
=
=
"
newRoot
"
)
{
if
(
this
.
rootNode
)
{
this
.
_createRootNodePromise
(
)
;
}
this
.
rootNode
=
types
.
getType
(
"
domnode
"
)
.
read
(
change
.
target
this
)
;
this
.
_rootNodeDeferred
.
resolve
(
this
.
rootNode
)
;
targetID
=
this
.
rootNode
.
actorID
;
targetFront
=
this
.
rootNode
;
}
else
{
targetID
=
change
.
target
;
targetFront
=
this
.
get
(
targetID
)
;
}
if
(
!
targetFront
)
{
console
.
warn
(
"
Got
a
mutation
for
an
unexpected
actor
:
"
+
targetID
+
"
please
file
a
bug
on
bugzilla
.
mozilla
.
org
!
"
)
;
console
.
trace
(
)
;
continue
;
}
let
emittedMutation
=
Object
.
assign
(
change
{
target
:
targetFront
}
)
;
if
(
change
.
type
=
=
=
"
childList
"
|
|
change
.
type
=
=
=
"
nativeAnonymousChildList
"
)
{
let
addedFronts
=
[
]
;
let
removedFronts
=
[
]
;
for
(
let
removed
of
change
.
removed
)
{
let
removedFront
=
this
.
get
(
removed
)
;
if
(
!
removedFront
)
{
console
.
error
(
"
Got
a
removal
of
an
actor
we
didn
'
t
know
about
:
"
+
removed
)
;
continue
;
}
removedFront
.
reparent
(
null
)
;
this
.
_orphaned
.
add
(
removedFront
)
;
removedFronts
.
push
(
removedFront
)
;
}
for
(
let
added
of
change
.
added
)
{
let
addedFront
=
this
.
get
(
added
)
;
if
(
!
addedFront
)
{
console
.
error
(
"
Got
an
addition
of
an
actor
we
didn
'
t
know
"
+
"
about
:
"
+
added
)
;
continue
;
}
addedFront
.
reparent
(
targetFront
)
;
this
.
_orphaned
.
delete
(
addedFront
)
;
addedFronts
.
push
(
addedFront
)
;
}
emittedMutation
.
added
=
addedFronts
;
emittedMutation
.
removed
=
removedFronts
;
if
(
"
numChildren
"
in
change
)
{
targetFront
.
_form
.
numChildren
=
change
.
numChildren
;
}
}
else
if
(
change
.
type
=
=
=
"
frameLoad
"
)
{
for
(
let
child
of
targetFront
.
treeChildren
(
)
)
{
if
(
child
.
nodeType
=
=
=
nodeConstants
.
DOCUMENT_NODE
)
{
console
.
warn
(
"
Got
an
unexpected
frameLoad
in
the
inspector
"
+
"
please
file
a
bug
on
bugzilla
.
mozilla
.
org
!
"
)
;
console
.
trace
(
)
;
}
}
}
else
if
(
change
.
type
=
=
=
"
documentUnload
"
)
{
if
(
targetFront
=
=
=
this
.
rootNode
)
{
this
.
_createRootNodePromise
(
)
;
}
emittedMutation
.
target
=
targetFront
.
actorID
;
emittedMutation
.
targetParent
=
targetFront
.
parentNode
(
)
;
this
.
_releaseFront
(
targetFront
true
)
;
}
else
if
(
change
.
type
=
=
=
"
unretained
"
)
{
for
(
let
released
of
change
.
nodes
)
{
let
releasedFront
=
this
.
get
(
released
)
;
this
.
_retainedOrphans
.
delete
(
released
)
;
this
.
_releaseFront
(
releasedFront
true
)
;
}
}
else
{
targetFront
.
updateMutation
(
change
)
;
}
if
(
change
.
type
=
=
=
"
inlineTextChild
"
|
|
change
.
type
=
=
=
"
childList
"
|
|
change
.
type
=
=
=
"
nativeAnonymousChildList
"
)
{
if
(
change
.
inlineTextChild
)
{
targetFront
.
inlineTextChild
=
types
.
getType
(
"
domnode
"
)
.
read
(
change
.
inlineTextChild
this
)
;
}
else
{
targetFront
.
inlineTextChild
=
undefined
;
}
}
emitMutations
.
push
(
emittedMutation
)
;
}
if
(
options
.
cleanup
)
{
for
(
let
node
of
this
.
_orphaned
)
{
this
.
_releaseFront
(
node
)
;
}
this
.
_orphaned
=
new
Set
(
)
;
}
this
.
emit
(
"
mutations
"
emitMutations
)
;
}
)
;
}
{
impl
:
"
_getMutations
"
}
)
onMutations
:
preEvent
(
"
new
-
mutations
"
function
(
)
{
this
.
getMutations
(
{
cleanup
:
this
.
autoCleanup
}
)
.
catch
(
(
)
=
>
{
}
)
;
}
)
isLocal
:
function
(
)
{
return
!
!
this
.
conn
.
_transport
.
_serverConnection
;
}
frontForRawNode
:
function
(
rawNode
)
{
if
(
!
this
.
isLocal
(
)
)
{
console
.
warn
(
"
Tried
to
use
frontForRawNode
on
a
remote
connection
.
"
)
;
return
null
;
}
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
let
walkerActor
=
DebuggerServer
.
searchAllConnectionsForActor
(
this
.
actorID
)
;
if
(
!
walkerActor
)
{
throw
Error
(
"
Could
not
find
client
side
for
actor
"
+
this
.
actorID
)
;
}
let
nodeActor
=
walkerActor
.
_ref
(
rawNode
)
;
let
nodeType
=
types
.
getType
(
"
domnode
"
)
;
let
returnNode
=
nodeType
.
read
(
nodeType
.
write
(
nodeActor
walkerActor
)
this
)
;
let
top
=
returnNode
;
let
extras
=
walkerActor
.
parents
(
nodeActor
{
sameTypeRootTreeItem
:
true
}
)
;
for
(
let
extraActor
of
extras
)
{
top
=
nodeType
.
read
(
nodeType
.
write
(
extraActor
walkerActor
)
this
)
;
}
if
(
top
!
=
=
this
.
rootNode
)
{
this
.
_orphaned
.
add
(
top
)
;
walkerActor
.
_orphaned
.
add
(
DebuggerServer
.
searchAllConnectionsForActor
(
top
.
actorID
)
)
;
}
return
returnNode
;
}
removeNode
:
custom
(
Task
.
async
(
function
*
(
node
)
{
let
previousSibling
=
yield
this
.
previousSibling
(
node
)
;
let
nextSibling
=
yield
this
.
_removeNode
(
node
)
;
return
{
previousSibling
:
previousSibling
nextSibling
:
nextSibling
}
;
}
)
{
impl
:
"
_removeNode
"
}
)
}
)
;
exports
.
WalkerFront
=
WalkerFront
;
var
InspectorFront
=
FrontClassWithSpec
(
inspectorSpec
{
initialize
:
function
(
client
tabForm
)
{
Front
.
prototype
.
initialize
.
call
(
this
client
)
;
this
.
actorID
=
tabForm
.
inspectorActor
;
this
.
manage
(
this
)
;
}
destroy
:
function
(
)
{
delete
this
.
walker
;
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
getWalker
:
custom
(
function
(
options
=
{
}
)
{
return
this
.
_getWalker
(
options
)
.
then
(
walker
=
>
{
this
.
walker
=
walker
;
return
walker
;
}
)
;
}
{
impl
:
"
_getWalker
"
}
)
getPageStyle
:
custom
(
function
(
)
{
return
this
.
_getPageStyle
(
)
.
then
(
pageStyle
=
>
{
if
(
this
.
walker
)
{
return
pageStyle
;
}
return
this
.
getWalker
(
)
.
then
(
(
)
=
>
{
return
pageStyle
;
}
)
;
}
)
;
}
{
impl
:
"
_getPageStyle
"
}
)
pickColorFromPage
:
custom
(
Task
.
async
(
function
*
(
toolbox
options
)
{
if
(
toolbox
)
{
CommandUtils
.
executeOnTarget
(
toolbox
.
target
"
eyedropper
-
-
hide
"
)
;
}
yield
this
.
_pickColorFromPage
(
options
)
;
}
)
{
impl
:
"
_pickColorFromPage
"
}
)
}
)
;
exports
.
InspectorFront
=
InspectorFront
;
