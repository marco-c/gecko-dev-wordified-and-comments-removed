"
use
strict
"
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
LongStringClient
=
require
(
"
devtools
/
shared
/
client
/
long
-
string
-
client
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
webconsoleSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
webconsole
"
)
;
class
WebConsoleFront
extends
FrontClassWithSpec
(
webconsoleSpec
)
{
constructor
(
client
)
{
super
(
client
)
;
this
.
_client
=
client
;
this
.
traits
=
{
}
;
this
.
_longStrings
=
{
}
;
this
.
events
=
[
]
;
this
.
formAttributeName
=
"
consoleActor
"
;
this
.
_networkRequests
=
new
Map
(
)
;
this
.
pendingEvaluationResults
=
new
Map
(
)
;
this
.
onEvaluationResult
=
this
.
onEvaluationResult
.
bind
(
this
)
;
this
.
onNetworkEvent
=
this
.
_onNetworkEvent
.
bind
(
this
)
;
this
.
onNetworkEventUpdate
=
this
.
_onNetworkEventUpdate
.
bind
(
this
)
;
this
.
on
(
"
evaluationResult
"
this
.
onEvaluationResult
)
;
this
.
on
(
"
serverNetworkEvent
"
this
.
onNetworkEvent
)
;
this
.
_client
.
addListener
(
"
networkEventUpdate
"
this
.
onNetworkEventUpdate
)
;
}
getNetworkRequest
(
actorId
)
{
return
this
.
_networkRequests
.
get
(
actorId
)
;
}
getNetworkEvents
(
)
{
return
this
.
_networkRequests
.
values
(
)
;
}
get
actor
(
)
{
return
this
.
actorID
;
}
_onNetworkEvent
(
packet
)
{
const
actor
=
packet
.
eventActor
;
const
networkInfo
=
{
_type
:
"
NetworkEvent
"
timeStamp
:
actor
.
timeStamp
node
:
null
actor
:
actor
.
actor
discardRequestBody
:
true
discardResponseBody
:
true
startedDateTime
:
actor
.
startedDateTime
request
:
{
url
:
actor
.
url
method
:
actor
.
method
}
isXHR
:
actor
.
isXHR
cause
:
actor
.
cause
response
:
{
}
timings
:
{
}
updates
:
[
]
private
:
actor
.
private
fromCache
:
actor
.
fromCache
fromServiceWorker
:
actor
.
fromServiceWorker
isThirdPartyTrackingResource
:
actor
.
isThirdPartyTrackingResource
referrerPolicy
:
actor
.
referrerPolicy
blockedReason
:
actor
.
blockedReason
}
;
this
.
_networkRequests
.
set
(
actor
.
actor
networkInfo
)
;
this
.
emit
(
"
networkEvent
"
networkInfo
)
;
}
_onNetworkEventUpdate
(
type
packet
)
{
const
networkInfo
=
this
.
getNetworkRequest
(
packet
.
from
)
;
if
(
!
networkInfo
)
{
return
;
}
networkInfo
.
updates
.
push
(
packet
.
updateType
)
;
switch
(
packet
.
updateType
)
{
case
"
requestHeaders
"
:
networkInfo
.
request
.
headersSize
=
packet
.
headersSize
;
break
;
case
"
requestPostData
"
:
networkInfo
.
discardRequestBody
=
packet
.
discardRequestBody
;
networkInfo
.
request
.
bodySize
=
packet
.
dataSize
;
break
;
case
"
responseStart
"
:
networkInfo
.
response
.
httpVersion
=
packet
.
response
.
httpVersion
;
networkInfo
.
response
.
status
=
packet
.
response
.
status
;
networkInfo
.
response
.
statusText
=
packet
.
response
.
statusText
;
networkInfo
.
response
.
headersSize
=
packet
.
response
.
headersSize
;
networkInfo
.
response
.
remoteAddress
=
packet
.
response
.
remoteAddress
;
networkInfo
.
response
.
remotePort
=
packet
.
response
.
remotePort
;
networkInfo
.
discardResponseBody
=
packet
.
response
.
discardResponseBody
;
break
;
case
"
responseContent
"
:
networkInfo
.
response
.
content
=
{
mimeType
:
packet
.
mimeType
}
;
networkInfo
.
response
.
bodySize
=
packet
.
contentSize
;
networkInfo
.
response
.
transferredSize
=
packet
.
transferredSize
;
networkInfo
.
discardResponseBody
=
packet
.
discardResponseBody
;
break
;
case
"
eventTimings
"
:
networkInfo
.
totalTime
=
packet
.
totalTime
;
break
;
case
"
securityInfo
"
:
networkInfo
.
securityState
=
packet
.
state
;
break
;
case
"
responseCache
"
:
networkInfo
.
response
.
responseCache
=
packet
.
responseCache
;
break
;
}
this
.
emit
(
"
networkEventUpdate
"
{
packet
:
packet
networkInfo
}
)
;
}
evaluateJS
(
string
opts
=
{
}
)
{
const
options
=
{
text
:
string
bindObjectActor
:
opts
.
bindObjectActor
frameActor
:
opts
.
frameActor
url
:
opts
.
url
selectedNodeActor
:
opts
.
selectedNodeActor
selectedObjectActor
:
opts
.
selectedObjectActor
}
;
return
super
.
evaluateJS
(
options
)
;
}
evaluateJSAsync
(
string
opts
=
{
}
)
{
const
options
=
{
text
:
string
bindObjectActor
:
opts
.
bindObjectActor
frameActor
:
opts
.
frameActor
url
:
opts
.
url
selectedNodeActor
:
opts
.
selectedNodeActor
selectedObjectActor
:
opts
.
selectedObjectActor
mapped
:
opts
.
mapped
}
;
return
new
Promise
(
async
(
resolve
reject
)
=
>
{
const
response
=
await
super
.
evaluateJSAsync
(
options
)
;
if
(
this
.
pendingEvaluationResults
)
{
this
.
pendingEvaluationResults
.
set
(
response
.
resultID
resp
=
>
{
if
(
resp
.
error
)
{
reject
(
resp
)
;
}
else
{
resolve
(
resp
)
;
}
}
)
;
}
}
)
;
}
onEvaluationResult
(
packet
)
{
const
onResponse
=
this
.
pendingEvaluationResults
.
get
(
packet
.
resultID
)
;
if
(
onResponse
)
{
onResponse
(
packet
)
;
this
.
pendingEvaluationResults
.
delete
(
packet
.
resultID
)
;
}
else
{
DevToolsUtils
.
reportException
(
"
onEvaluationResult
"
"
No
response
handler
for
an
evaluateJSAsync
result
(
resultID
:
"
+
packet
.
resultID
+
"
)
"
)
;
}
}
getRequestHeaders
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getRequestHeaders
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getRequestCookies
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getRequestCookies
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getRequestPostData
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getRequestPostData
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseHeaders
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseHeaders
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseCookies
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseCookies
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseContent
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseContent
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getResponseCache
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getResponseCache
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getEventTimings
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getEventTimings
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getSecurityInfo
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getSecurityInfo
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
getStackTrace
(
actor
onResponse
)
{
const
packet
=
{
to
:
actor
type
:
"
getStackTrace
"
}
;
return
this
.
_client
.
request
(
packet
onResponse
)
;
}
async
startListeners
(
listeners
)
{
const
response
=
await
super
.
startListeners
(
listeners
)
;
this
.
hasNativeConsoleAPI
=
response
.
nativeConsoleAPI
;
this
.
traits
=
response
.
traits
;
return
response
;
}
longString
(
grip
)
{
if
(
grip
.
actor
in
this
.
_longStrings
)
{
return
this
.
_longStrings
[
grip
.
actor
]
;
}
const
client
=
new
LongStringClient
(
this
.
_client
grip
)
;
this
.
_longStrings
[
grip
.
actor
]
=
client
;
return
client
;
}
destroy
(
)
{
if
(
!
this
.
_client
)
{
return
null
;
}
this
.
off
(
"
evaluationResult
"
this
.
onEvaluationResult
)
;
this
.
off
(
"
serverNetworkEvent
"
this
.
onNetworkEvent
)
;
this
.
_client
.
removeListener
(
"
networkEventUpdate
"
this
.
onNetworkEventUpdate
)
;
this
.
_longStrings
=
null
;
this
.
_client
=
null
;
this
.
pendingEvaluationResults
.
clear
(
)
;
this
.
pendingEvaluationResults
=
null
;
this
.
clearNetworkRequests
(
)
;
this
.
_networkRequests
=
null
;
return
super
.
destroy
(
)
;
}
clearNetworkRequests
(
)
{
this
.
_networkRequests
.
clear
(
)
;
}
getString
(
stringGrip
)
{
if
(
typeof
stringGrip
!
=
=
"
object
"
|
|
stringGrip
.
type
!
=
=
"
longString
"
)
{
return
Promise
.
resolve
(
stringGrip
)
;
}
if
(
stringGrip
.
_fullText
)
{
return
stringGrip
.
_fullText
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
{
initial
length
}
=
stringGrip
;
const
longStringClient
=
this
.
longString
(
stringGrip
)
;
longStringClient
.
substring
(
initial
.
length
length
response
=
>
{
if
(
response
.
error
)
{
DevToolsUtils
.
reportException
(
"
getString
"
response
.
error
+
"
:
"
+
response
.
message
)
;
reject
(
response
)
;
}
resolve
(
initial
+
response
.
substring
)
;
}
)
;
}
)
;
}
}
exports
.
WebConsoleFront
=
WebConsoleFront
;
registerFront
(
WebConsoleFront
)
;
