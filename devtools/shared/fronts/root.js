"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
{
rootSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
root
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
loader
.
lazyRequireGetter
(
this
"
getFront
"
"
devtools
/
shared
/
protocol
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ProcessDescriptorFront
"
"
devtools
/
shared
/
fronts
/
descriptors
/
process
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
FrameDescriptorFront
"
"
devtools
/
shared
/
fronts
/
descriptors
/
frame
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
BrowsingContextTargetFront
"
"
devtools
/
shared
/
fronts
/
targets
/
browsing
-
context
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ContentProcessTargetFront
"
"
devtools
/
shared
/
fronts
/
targets
/
content
-
process
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
LocalTabTargetFront
"
"
devtools
/
shared
/
fronts
/
targets
/
local
-
tab
"
true
)
;
class
RootFront
extends
FrontClassWithSpec
(
rootSpec
)
{
constructor
(
client
form
)
{
super
(
client
)
;
this
.
actorID
=
form
.
from
;
this
.
applicationType
=
form
.
applicationType
;
this
.
traits
=
form
.
traits
;
Object
.
defineProperty
(
this
"
rootForm
"
{
get
(
)
{
delete
this
.
rootForm
;
this
.
rootForm
=
this
.
getRoot
(
)
;
return
this
.
rootForm
;
}
configurable
:
true
}
)
;
this
.
fronts
=
new
Map
(
)
;
this
.
_client
=
client
;
}
async
listAllWorkers
(
)
{
let
registrations
=
[
]
;
let
workers
=
[
]
;
try
{
(
{
registrations
}
=
await
this
.
listServiceWorkerRegistrations
(
)
)
;
workers
=
await
this
.
listAllWorkerTargets
(
)
;
}
catch
(
e
)
{
}
const
result
=
{
service
:
[
]
shared
:
[
]
other
:
[
]
}
;
registrations
.
forEach
(
front
=
>
{
const
{
activeWorker
waitingWorker
installingWorker
evaluatingWorker
}
=
front
;
const
newestWorker
=
activeWorker
|
|
waitingWorker
|
|
installingWorker
|
|
evaluatingWorker
;
result
.
service
.
push
(
{
active
:
front
.
active
fetch
:
front
.
fetch
id
:
front
.
id
lastUpdateTime
:
front
.
lastUpdateTime
name
:
front
.
url
registrationFront
:
front
scope
:
front
.
scope
url
:
front
.
url
newestWorkerId
:
newestWorker
&
&
newestWorker
.
id
}
)
;
}
)
;
workers
.
forEach
(
front
=
>
{
const
worker
=
{
id
:
front
.
id
name
:
front
.
url
url
:
front
.
url
workerTargetFront
:
front
}
;
switch
(
front
.
type
)
{
case
Ci
.
nsIWorkerDebugger
.
TYPE_SERVICE
:
const
registration
=
result
.
service
.
find
(
r
=
>
{
if
(
!
r
.
registrationFront
)
{
return
false
;
}
const
{
isParentInterceptEnabled
}
=
r
.
registrationFront
.
traits
;
if
(
!
r
.
newestWorkerId
|
|
!
isParentInterceptEnabled
)
{
return
r
.
scope
=
=
=
front
.
scope
;
}
return
r
.
newestWorkerId
=
=
=
front
.
id
;
}
)
;
if
(
registration
)
{
if
(
!
registration
.
url
)
{
registration
.
name
=
registration
.
url
=
front
.
url
;
}
registration
.
workerTargetFront
=
front
;
}
else
{
worker
.
fetch
=
front
.
fetch
;
worker
.
scope
=
front
.
scope
;
worker
.
active
=
false
;
result
.
service
.
push
(
worker
)
;
}
break
;
case
Ci
.
nsIWorkerDebugger
.
TYPE_SHARED
:
result
.
shared
.
push
(
worker
)
;
break
;
default
:
result
.
other
.
push
(
worker
)
;
}
}
)
;
return
result
;
}
async
listAllWorkerTargets
(
)
{
let
{
workers
}
=
await
this
.
listWorkers
(
)
;
const
{
processes
}
=
await
this
.
listProcesses
(
)
;
for
(
const
processDescriptorFront
of
processes
)
{
if
(
processDescriptorFront
.
isParent
)
{
continue
;
}
const
front
=
await
processDescriptorFront
.
getTarget
(
)
;
if
(
front
)
{
const
response
=
await
front
.
listWorkers
(
)
;
workers
=
workers
.
concat
(
response
.
workers
)
;
}
}
return
workers
;
}
async
listProcesses
(
)
{
const
{
processes
}
=
await
super
.
listProcesses
(
)
;
const
processDescriptors
=
processes
.
map
(
form
=
>
{
if
(
form
.
actor
&
&
form
.
actor
.
includes
(
"
processDescriptor
"
)
)
{
return
this
.
_getProcessDescriptorFront
(
form
)
;
}
return
{
id
:
form
.
id
isParent
:
form
.
parent
getTarget
:
(
)
=
>
{
return
this
.
getProcess
(
form
.
id
)
;
}
}
;
}
)
;
return
{
processes
:
processDescriptors
}
;
}
getMainProcess
(
)
{
return
this
.
getProcess
(
0
)
;
}
async
getProcess
(
id
)
{
const
{
form
}
=
await
super
.
getProcess
(
id
)
;
if
(
form
.
actor
&
&
form
.
actor
.
includes
(
"
processDescriptor
"
)
)
{
const
processDescriptorFront
=
this
.
_getProcessDescriptorFront
(
form
)
;
return
processDescriptorFront
.
getTarget
(
)
;
}
let
front
=
this
.
actor
(
form
.
actor
)
;
if
(
front
)
{
return
front
;
}
if
(
form
.
actor
.
includes
(
"
contentProcessTarget
"
)
)
{
front
=
new
ContentProcessTargetFront
(
this
.
_client
null
this
)
;
}
else
{
front
=
new
BrowsingContextTargetFront
(
this
.
_client
null
this
)
;
}
front
.
actorID
=
form
.
actor
;
front
.
form
(
form
)
;
this
.
manage
(
front
)
;
return
front
;
}
_getFrameDescriptorFront
(
form
)
{
let
front
=
this
.
actor
(
form
.
actor
)
;
if
(
front
)
{
return
front
;
}
front
=
new
FrameDescriptorFront
(
this
.
_client
null
this
)
;
front
.
form
(
form
)
;
front
.
actorID
=
form
.
actor
;
this
.
manage
(
front
)
;
return
front
;
}
_getProcessDescriptorFront
(
form
)
{
let
front
=
this
.
actor
(
form
.
actor
)
;
if
(
front
)
{
return
front
;
}
front
=
new
ProcessDescriptorFront
(
this
.
_client
null
this
)
;
front
.
form
(
form
)
;
front
.
actorID
=
form
.
actor
;
this
.
manage
(
front
)
;
return
front
;
}
async
getBrowsingContextDescriptor
(
id
)
{
const
form
=
await
super
.
getBrowsingContextDescriptor
(
id
)
;
if
(
form
.
actor
&
&
form
.
actor
.
includes
(
"
processDescriptor
"
)
)
{
return
this
.
_getProcessDescriptorFront
(
form
)
;
}
return
this
.
_getFrameDescriptorFront
(
form
)
;
}
async
listTabs
(
options
)
{
const
{
selected
tabs
}
=
await
super
.
listTabs
(
options
)
;
for
(
const
i
in
tabs
)
{
tabs
[
i
]
.
setIsSelected
(
i
=
=
selected
)
;
}
return
tabs
;
}
async
getTab
(
filter
)
{
const
packet
=
{
}
;
if
(
filter
)
{
if
(
typeof
filter
.
outerWindowID
=
=
"
number
"
)
{
packet
.
outerWindowID
=
filter
.
outerWindowID
;
}
else
if
(
typeof
filter
.
tabId
=
=
"
number
"
)
{
packet
.
tabId
=
filter
.
tabId
;
}
else
if
(
"
tab
"
in
filter
)
{
const
browser
=
filter
.
tab
.
linkedBrowser
;
if
(
browser
.
frameLoader
.
remoteTab
)
{
packet
.
tabId
=
browser
.
frameLoader
.
remoteTab
.
tabId
;
}
else
if
(
browser
.
outerWindowID
)
{
packet
.
outerWindowID
=
browser
.
outerWindowID
;
}
else
{
const
windowUtils
=
browser
.
contentWindow
.
windowUtils
;
packet
.
outerWindowID
=
windowUtils
.
outerWindowID
;
}
}
else
{
throw
new
Error
(
"
Unsupported
argument
given
to
getTab
request
"
)
;
}
}
const
form
=
await
super
.
getTab
(
packet
)
;
let
front
=
this
.
actor
(
form
.
actor
)
;
if
(
front
)
{
front
.
form
(
form
)
;
return
front
;
}
if
(
filter
&
&
filter
.
tab
&
&
filter
.
tab
.
tagName
=
=
"
tab
"
)
{
front
=
new
LocalTabTargetFront
(
this
.
_client
null
this
filter
.
tab
)
;
}
else
{
front
=
new
BrowsingContextTargetFront
(
this
.
_client
null
this
)
;
}
front
.
actorID
=
form
.
actor
;
front
.
form
(
form
)
;
this
.
manage
(
front
)
;
return
front
;
}
async
getAddon
(
{
id
}
)
{
const
addons
=
await
this
.
listAddons
(
)
;
const
webextensionDescriptorFront
=
addons
.
find
(
addon
=
>
addon
.
id
=
=
=
id
)
;
return
webextensionDescriptorFront
;
}
async
getWorker
(
id
)
{
const
{
service
shared
other
}
=
await
this
.
listAllWorkers
(
)
;
const
worker
=
[
.
.
.
service
.
.
.
shared
.
.
.
other
]
.
find
(
w
=
>
w
.
id
=
=
=
id
)
;
if
(
!
worker
)
{
return
null
;
}
return
worker
.
workerTargetFront
|
|
worker
.
registrationFront
;
}
echo
(
packet
)
{
packet
.
type
=
"
echo
"
;
return
this
.
request
(
packet
)
;
}
async
getFront
(
typeName
)
{
let
front
=
this
.
fronts
.
get
(
typeName
)
;
if
(
front
)
{
return
front
;
}
const
rootForm
=
await
this
.
rootForm
;
front
=
getFront
(
this
.
_client
typeName
rootForm
)
;
this
.
fronts
.
set
(
typeName
front
)
;
return
front
;
}
}
exports
.
RootFront
=
RootFront
;
registerFront
(
RootFront
)
;
