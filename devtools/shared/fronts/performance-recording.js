"
use
strict
"
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
performanceRecordingSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
performance
-
recording
"
)
;
loader
.
lazyRequireGetter
(
this
"
PerformanceIO
"
"
devtools
/
client
/
performance
/
modules
/
io
"
)
;
loader
.
lazyRequireGetter
(
this
"
PerformanceRecordingCommon
"
"
devtools
/
shared
/
performance
/
recording
-
common
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
RecordingUtils
"
"
devtools
/
shared
/
performance
/
recording
-
utils
"
)
;
class
PerformanceRecordingFront
extends
FrontClassWithSpec
(
performanceRecordingSpec
)
{
form
(
form
detail
)
{
if
(
detail
=
=
=
"
actorid
"
)
{
this
.
actorID
=
form
;
return
;
}
this
.
actorID
=
form
.
actor
;
this
.
_form
=
form
;
this
.
_configuration
=
form
.
configuration
;
this
.
_startingBufferStatus
=
form
.
startingBufferStatus
;
this
.
_console
=
form
.
console
;
this
.
_label
=
form
.
label
;
this
.
_startTime
=
form
.
startTime
;
this
.
_localStartTime
=
form
.
localStartTime
;
this
.
_recording
=
form
.
recording
;
this
.
_completed
=
form
.
completed
;
this
.
_duration
=
form
.
duration
;
if
(
form
.
finalizedData
)
{
this
.
_profile
=
form
.
profile
;
this
.
_systemHost
=
form
.
systemHost
;
this
.
_systemClient
=
form
.
systemClient
;
}
if
(
this
.
_completed
&
&
!
this
.
_markersSorted
)
{
this
.
_markers
=
this
.
_markers
.
sort
(
(
a
b
)
=
>
(
a
.
start
>
b
.
start
)
)
;
this
.
_markersSorted
=
true
;
}
}
constructor
(
client
form
config
)
{
super
(
client
form
)
;
this
.
_markers
=
[
]
;
this
.
_frames
=
[
]
;
this
.
_memory
=
[
]
;
this
.
_ticks
=
[
]
;
this
.
_allocations
=
{
sites
:
[
]
timestamps
:
[
]
frames
:
[
]
sizes
:
[
]
}
;
}
destroy
(
)
{
super
.
destroy
(
)
;
}
exportRecording
(
file
)
{
const
recordingData
=
this
.
getAllData
(
)
;
return
PerformanceIO
.
saveRecordingToFile
(
recordingData
file
)
;
}
_addTimelineData
(
eventName
data
)
{
const
config
=
this
.
getConfiguration
(
)
;
switch
(
eventName
)
{
case
"
markers
"
:
{
if
(
!
config
.
withMarkers
)
{
break
;
}
const
{
markers
}
=
data
;
RecordingUtils
.
offsetMarkerTimes
(
markers
this
.
_startTime
)
;
RecordingUtils
.
pushAll
(
this
.
_markers
markers
)
;
break
;
}
case
"
frames
"
:
{
if
(
!
config
.
withMarkers
)
{
break
;
}
const
{
frames
}
=
data
;
RecordingUtils
.
pushAll
(
this
.
_frames
frames
)
;
break
;
}
case
"
memory
"
:
{
if
(
!
config
.
withMemory
)
{
break
;
}
const
{
delta
measurement
}
=
data
;
this
.
_memory
.
push
(
{
delta
:
delta
-
this
.
_startTime
value
:
measurement
.
total
/
1024
/
1024
}
)
;
break
;
}
case
"
ticks
"
:
{
if
(
!
config
.
withTicks
)
{
break
;
}
const
{
timestamps
}
=
data
;
this
.
_ticks
=
timestamps
;
break
;
}
case
"
allocations
"
:
{
if
(
!
config
.
withAllocations
)
{
break
;
}
const
{
allocations
:
sites
allocationsTimestamps
:
timestamps
allocationSizes
:
sizes
frames
}
=
data
;
RecordingUtils
.
offsetAndScaleTimestamps
(
timestamps
this
.
_startTime
)
;
RecordingUtils
.
pushAll
(
this
.
_allocations
.
sites
sites
)
;
RecordingUtils
.
pushAll
(
this
.
_allocations
.
timestamps
timestamps
)
;
RecordingUtils
.
pushAll
(
this
.
_allocations
.
frames
frames
)
;
RecordingUtils
.
pushAll
(
this
.
_allocations
.
sizes
sizes
)
;
break
;
}
}
}
toString
(
)
{
return
"
[
object
PerformanceRecordingFront
]
"
;
}
}
Object
.
defineProperties
(
PerformanceRecordingFront
.
prototype
Object
.
getOwnPropertyDescriptors
(
PerformanceRecordingCommon
)
)
;
exports
.
PerformanceRecordingFront
=
PerformanceRecordingFront
;
registerFront
(
PerformanceRecordingFront
)
;
