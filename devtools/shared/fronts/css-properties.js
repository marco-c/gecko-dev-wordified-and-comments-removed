"
use
strict
"
;
const
{
FrontClassWithSpec
Front
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
cssPropertiesSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
css
-
properties
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
var
NON_ASCII
=
"
[
^
\
\
x00
-
\
\
x7F
]
"
;
var
ESCAPE
=
"
\
\
\
\
[
^
\
n
\
r
]
"
;
var
FIRST_CHAR
=
[
"
[
_a
-
z
]
"
NON_ASCII
ESCAPE
]
.
join
(
"
|
"
)
;
var
TRAILING_CHAR
=
[
"
[
_a
-
z0
-
9
-
]
"
NON_ASCII
ESCAPE
]
.
join
(
"
|
"
)
;
var
IS_VARIABLE_TOKEN
=
new
RegExp
(
^
-
-
(
{
FIRST_CHAR
}
)
(
{
TRAILING_CHAR
}
)
*
"
i
"
)
;
function
isCssVariable
(
input
)
{
return
!
!
input
.
match
(
IS_VARIABLE_TOKEN
)
;
}
var
cachedCssProperties
=
new
WeakMap
(
)
;
const
CssPropertiesFront
=
FrontClassWithSpec
(
cssPropertiesSpec
{
initialize
:
function
(
client
{
cssPropertiesActor
}
)
{
Front
.
prototype
.
initialize
.
call
(
this
client
{
actor
:
cssPropertiesActor
}
)
;
this
.
manage
(
this
)
;
}
}
)
;
exports
.
CssPropertiesFront
=
CssPropertiesFront
;
function
CssProperties
(
properties
)
{
this
.
properties
=
properties
;
this
.
isKnown
=
this
.
isKnown
.
bind
(
this
)
;
}
CssProperties
.
prototype
=
{
isKnown
(
property
)
{
return
this
.
properties
.
includes
(
property
)
|
|
isCssVariable
(
property
)
;
}
}
;
exports
.
CssProperties
=
CssProperties
;
exports
.
initCssProperties
=
Task
.
async
(
function
*
(
toolbox
)
{
let
client
=
toolbox
.
target
.
client
;
if
(
cachedCssProperties
.
has
(
client
)
)
{
return
cachedCssProperties
.
get
(
client
)
;
}
let
propertiesList
front
;
if
(
toolbox
.
target
.
hasActor
(
"
cssProperties
"
)
)
{
front
=
CssPropertiesFront
(
client
toolbox
.
target
.
form
)
;
const
db
=
yield
front
.
getCSSDatabase
(
)
;
propertiesList
=
db
.
propertiesList
;
}
else
{
const
db
=
require
(
"
devtools
/
client
/
shared
/
css
-
properties
-
db
"
)
;
propertiesList
=
db
.
propertiesList
;
}
const
cssProperties
=
new
CssProperties
(
propertiesList
)
;
cachedCssProperties
.
set
(
client
{
cssProperties
front
}
)
;
return
{
cssProperties
front
}
;
}
)
;
exports
.
getCssProperties
=
function
(
toolbox
)
{
if
(
!
cachedCssProperties
.
has
(
toolbox
.
target
.
client
)
)
{
throw
new
Error
(
"
The
CSS
database
has
not
been
initialized
please
make
"
+
"
sure
initCssDatabase
was
called
once
before
for
this
"
+
"
toolbox
.
"
)
;
}
return
cachedCssProperties
.
get
(
toolbox
.
target
.
client
)
.
cssProperties
;
}
;
exports
.
CssPropertiesFront
=
CssPropertiesFront
;
