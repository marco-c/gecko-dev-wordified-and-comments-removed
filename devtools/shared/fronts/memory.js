"
use
strict
"
;
const
{
memorySpec
}
=
require
(
"
devtools
/
shared
/
specs
/
memory
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
loader
.
lazyRequireGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
HeapSnapshotFileUtils
"
"
devtools
/
shared
/
heapsnapshot
/
HeapSnapshotFileUtils
"
)
;
const
MemoryFront
=
protocol
.
FrontClass
(
memorySpec
{
initialize
:
function
(
client
form
rootForm
=
null
)
{
protocol
.
Front
.
prototype
.
initialize
.
call
(
this
client
form
)
;
this
.
_client
=
client
;
this
.
actorID
=
form
.
memoryActor
;
this
.
heapSnapshotFileActorID
=
rootForm
?
rootForm
.
heapSnapshotFileActor
:
null
;
this
.
manage
(
this
)
;
}
saveHeapSnapshot
:
protocol
.
custom
(
Task
.
async
(
function
*
(
options
=
{
}
)
{
const
snapshotId
=
yield
this
.
_saveHeapSnapshotImpl
(
options
.
boundaries
)
;
if
(
!
options
.
forceCopy
&
&
(
yield
HeapSnapshotFileUtils
.
haveHeapSnapshotTempFile
(
snapshotId
)
)
)
{
return
HeapSnapshotFileUtils
.
getHeapSnapshotTempFilePath
(
snapshotId
)
;
}
return
yield
this
.
transferHeapSnapshot
(
snapshotId
)
;
}
)
{
impl
:
"
_saveHeapSnapshotImpl
"
}
)
transferHeapSnapshot
:
protocol
.
custom
(
function
(
snapshotId
)
{
if
(
!
this
.
heapSnapshotFileActorID
)
{
throw
new
Error
(
"
MemoryFront
initialized
without
a
rootForm
"
)
;
}
const
request
=
this
.
_client
.
request
(
{
to
:
this
.
heapSnapshotFileActorID
type
:
"
transferHeapSnapshot
"
snapshotId
}
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
outFilePath
=
HeapSnapshotFileUtils
.
getNewUniqueHeapSnapshotTempFilePath
(
)
;
const
outFile
=
new
FileUtils
.
File
(
outFilePath
)
;
const
outFileStream
=
FileUtils
.
openSafeFileOutputStream
(
outFile
)
;
request
.
on
(
"
bulk
-
reply
"
Task
.
async
(
function
*
(
{
copyTo
}
)
{
yield
copyTo
(
outFileStream
)
;
FileUtils
.
closeSafeFileOutputStream
(
outFileStream
)
;
resolve
(
outFilePath
)
;
}
)
)
;
}
)
;
}
)
}
)
;
exports
.
MemoryFront
=
MemoryFront
;
