"
use
strict
"
;
const
{
objectSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
object
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
class
ObjectFront
extends
FrontClassWithSpec
(
objectSpec
)
{
constructor
(
client
grip
)
{
super
(
client
)
;
this
.
_grip
=
grip
;
this
.
_client
=
client
;
this
.
valid
=
true
;
this
.
actorID
=
this
.
_grip
.
actor
;
this
.
manage
(
this
)
;
}
get
actor
(
)
{
return
this
.
actorID
;
}
get
_transport
(
)
{
return
this
.
_client
.
_transport
;
}
get
isFrozen
(
)
{
return
this
.
_grip
.
frozen
;
}
get
isSealed
(
)
{
return
this
.
_grip
.
sealed
;
}
get
isExtensible
(
)
{
return
this
.
_grip
.
extensible
;
}
getDefinitionSite
(
)
{
if
(
this
.
_grip
.
class
!
=
"
Function
"
)
{
console
.
error
(
"
getDefinitionSite
is
only
valid
for
function
grips
.
"
)
;
return
null
;
}
return
super
.
definitionSite
(
)
;
}
getParameterNames
(
)
{
if
(
this
.
_grip
.
class
!
=
=
"
Function
"
)
{
console
.
error
(
"
getParameterNames
is
only
valid
for
function
grips
.
"
)
;
return
null
;
}
return
super
.
parameterNames
(
)
;
}
getOwnPropertyNames
(
)
{
return
super
.
ownPropertyNames
(
)
;
}
getPrototypeAndProperties
(
)
{
return
super
.
prototypeAndProperties
(
)
;
}
enumProperties
(
options
)
{
return
super
.
enumProperties
(
options
)
;
}
enumEntries
(
)
{
if
(
!
[
"
Map
"
"
WeakMap
"
"
Set
"
"
WeakSet
"
"
Storage
"
]
.
includes
(
this
.
_grip
.
class
)
)
{
console
.
error
(
"
enumEntries
is
only
valid
for
Map
/
Set
/
Storage
-
like
grips
.
"
)
;
return
null
;
}
return
super
.
enumEntries
(
)
;
}
enumSymbols
(
)
{
if
(
this
.
_grip
.
type
!
=
=
"
object
"
)
{
console
.
error
(
"
enumSymbols
is
only
valid
for
objects
grips
.
"
)
;
return
null
;
}
return
super
.
enumSymbols
(
)
;
}
getProperty
(
name
)
{
return
super
.
property
(
name
)
;
}
getPropertyValue
(
name
receiverId
)
{
return
super
.
propertyValue
(
name
receiverId
)
;
}
getPrototype
(
)
{
return
super
.
prototype
(
)
;
}
getDisplayString
(
)
{
return
super
.
displayString
(
)
;
}
getScope
(
)
{
if
(
this
.
_grip
.
class
!
=
=
"
Function
"
)
{
console
.
error
(
"
scope
is
only
valid
for
function
grips
.
"
)
;
return
null
;
}
return
super
.
scope
(
)
;
}
getProxySlots
(
)
{
if
(
this
.
_grip
.
class
!
=
=
"
Proxy
"
)
{
console
.
error
(
"
getProxySlots
is
only
valid
for
proxy
grips
.
"
)
;
return
null
;
}
const
response
=
super
.
proxySlots
(
)
;
if
(
response
.
error
=
=
=
"
unrecognizedPacketType
"
)
{
const
{
proxyTarget
proxyHandler
}
=
this
.
_grip
;
return
{
proxyTarget
proxyHandler
}
;
}
return
response
;
}
}
module
.
exports
=
ObjectFront
;
registerFront
(
ObjectFront
)
;
