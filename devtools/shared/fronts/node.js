"
use
strict
"
;
const
{
Front
FrontClassWithSpec
custom
types
}
=
require
(
"
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
nodeSpec
nodeListSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
node
"
)
;
const
promise
=
require
(
"
promise
"
)
;
const
{
SimpleStringFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
string
"
)
;
loader
.
lazyRequireGetter
(
this
"
nodeConstants
"
"
devtools
/
shared
/
dom
-
node
-
constants
"
)
;
const
HIDDEN_CLASS
=
"
__fx
-
devtools
-
hide
-
shortcut__
"
;
const
NodeListFront
=
FrontClassWithSpec
(
nodeListSpec
{
initialize
:
function
(
client
form
)
{
Front
.
prototype
.
initialize
.
call
(
this
client
form
)
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
marshallPool
:
function
(
)
{
return
this
.
parent
(
)
;
}
form
:
function
(
json
)
{
this
.
length
=
json
.
length
;
}
item
:
custom
(
function
(
index
)
{
return
this
.
_item
(
index
)
.
then
(
response
=
>
{
return
response
.
node
;
}
)
;
}
{
impl
:
"
_item
"
}
)
items
:
custom
(
function
(
start
end
)
{
return
this
.
_items
(
start
end
)
.
then
(
response
=
>
{
return
response
.
nodes
;
}
)
;
}
{
impl
:
"
_items
"
}
)
}
)
;
exports
.
NodeListFront
=
NodeListFront
;
class
AttributeModificationList
{
constructor
(
node
)
{
this
.
node
=
node
;
this
.
modifications
=
[
]
;
}
apply
(
)
{
const
ret
=
this
.
node
.
modifyAttributes
(
this
.
modifications
)
;
return
ret
;
}
destroy
(
)
{
this
.
node
=
null
;
this
.
modification
=
null
;
}
setAttributeNS
(
ns
name
value
)
{
this
.
modifications
.
push
(
{
attributeNamespace
:
ns
attributeName
:
name
newValue
:
value
}
)
;
}
setAttribute
(
name
value
)
{
this
.
setAttributeNS
(
undefined
name
value
)
;
}
removeAttributeNS
(
ns
name
)
{
this
.
setAttributeNS
(
ns
name
undefined
)
;
}
removeAttribute
(
name
)
{
this
.
setAttributeNS
(
undefined
name
undefined
)
;
}
}
const
NodeFront
=
FrontClassWithSpec
(
nodeSpec
{
initialize
:
function
(
conn
form
detail
ctx
)
{
this
.
_parent
=
null
;
this
.
_child
=
null
;
this
.
_next
=
null
;
this
.
_prev
=
null
;
Front
.
prototype
.
initialize
.
call
(
this
conn
form
detail
ctx
)
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
form
:
function
(
form
detail
ctx
)
{
if
(
detail
=
=
=
"
actorid
"
)
{
this
.
actorID
=
form
;
return
;
}
if
(
form
.
shortValue
)
{
form
.
nodeValue
=
form
.
incompleteValue
?
null
:
form
.
shortValue
;
}
this
.
_form
=
Object
.
assign
(
{
}
form
)
;
this
.
_form
.
attrs
=
this
.
_form
.
attrs
?
this
.
_form
.
attrs
.
slice
(
)
:
[
]
;
if
(
form
.
parent
)
{
const
parentNodeFront
=
ctx
.
marshallPool
(
)
.
ensureDOMNodeFront
(
form
.
parent
)
;
this
.
reparent
(
parentNodeFront
)
;
}
if
(
form
.
host
)
{
this
.
host
=
ctx
.
marshallPool
(
)
.
ensureDOMNodeFront
(
form
.
host
)
;
}
if
(
form
.
inlineTextChild
)
{
this
.
inlineTextChild
=
types
.
getType
(
"
domnode
"
)
.
read
(
form
.
inlineTextChild
ctx
)
;
}
else
{
this
.
inlineTextChild
=
undefined
;
}
}
parentNode
:
function
(
)
{
return
this
.
_parent
;
}
parentOrHost
:
function
(
)
{
return
this
.
isShadowRoot
?
this
.
host
:
this
.
_parent
;
}
updateMutation
:
function
(
change
)
{
if
(
change
.
type
=
=
=
"
attributes
"
)
{
this
.
_attrMap
=
undefined
;
let
found
=
false
;
for
(
let
i
=
0
;
i
<
this
.
attributes
.
length
;
i
+
+
)
{
const
attr
=
this
.
attributes
[
i
]
;
if
(
attr
.
name
=
=
change
.
attributeName
&
&
attr
.
namespace
=
=
change
.
attributeNamespace
)
{
if
(
change
.
newValue
!
=
=
null
)
{
attr
.
value
=
change
.
newValue
;
}
else
{
this
.
attributes
.
splice
(
i
1
)
;
}
found
=
true
;
break
;
}
}
if
(
!
found
&
&
change
.
newValue
!
=
=
null
)
{
this
.
attributes
.
push
(
{
name
:
change
.
attributeName
namespace
:
change
.
attributeNamespace
value
:
change
.
newValue
}
)
;
}
}
else
if
(
change
.
type
=
=
=
"
characterData
"
)
{
this
.
_form
.
nodeValue
=
change
.
newValue
;
}
else
if
(
change
.
type
=
=
=
"
pseudoClassLock
"
)
{
this
.
_form
.
pseudoClassLocks
=
change
.
pseudoClassLocks
;
}
else
if
(
change
.
type
=
=
=
"
events
"
)
{
this
.
_form
.
hasEventListeners
=
change
.
hasEventListeners
;
}
}
get
id
(
)
{
return
this
.
getAttribute
(
"
id
"
)
;
}
get
nodeType
(
)
{
return
this
.
_form
.
nodeType
;
}
get
namespaceURI
(
)
{
return
this
.
_form
.
namespaceURI
;
}
get
nodeName
(
)
{
return
this
.
_form
.
nodeName
;
}
get
displayName
(
)
{
const
{
displayName
nodeName
}
=
this
.
_form
;
return
displayName
|
|
nodeName
.
toLowerCase
(
)
;
}
get
doctypeString
(
)
{
return
"
<
!
DOCTYPE
"
+
this
.
_form
.
name
+
(
this
.
_form
.
publicId
?
"
PUBLIC
\
"
"
+
this
.
_form
.
publicId
+
"
\
"
"
:
"
"
)
+
(
this
.
_form
.
systemId
?
"
\
"
"
+
this
.
_form
.
systemId
+
"
\
"
"
:
"
"
)
+
"
>
"
;
}
get
baseURI
(
)
{
return
this
.
_form
.
baseURI
;
}
get
className
(
)
{
return
this
.
getAttribute
(
"
class
"
)
|
|
"
"
;
}
get
hasChildren
(
)
{
return
this
.
_form
.
numChildren
>
0
;
}
get
numChildren
(
)
{
return
this
.
_form
.
numChildren
;
}
get
hasEventListeners
(
)
{
return
this
.
_form
.
hasEventListeners
;
}
get
isBeforePseudoElement
(
)
{
return
this
.
_form
.
isBeforePseudoElement
;
}
get
isAfterPseudoElement
(
)
{
return
this
.
_form
.
isAfterPseudoElement
;
}
get
isPseudoElement
(
)
{
return
this
.
isBeforePseudoElement
|
|
this
.
isAfterPseudoElement
;
}
get
isAnonymous
(
)
{
return
this
.
_form
.
isAnonymous
;
}
get
isInHTMLDocument
(
)
{
return
this
.
_form
.
isInHTMLDocument
;
}
get
tagName
(
)
{
return
this
.
nodeType
=
=
=
nodeConstants
.
ELEMENT_NODE
?
this
.
nodeName
:
null
;
}
get
isDocumentElement
(
)
{
return
!
!
this
.
_form
.
isDocumentElement
;
}
get
isShadowRoot
(
)
{
return
this
.
_form
.
isShadowRoot
;
}
get
shadowRootMode
(
)
{
return
this
.
_form
.
shadowRootMode
;
}
get
isShadowHost
(
)
{
return
this
.
_form
.
isShadowHost
;
}
get
isDirectShadowHostChild
(
)
{
return
this
.
_form
.
isDirectShadowHostChild
;
}
get
name
(
)
{
return
this
.
_form
.
name
;
}
get
publicId
(
)
{
return
this
.
_form
.
publicId
;
}
get
systemId
(
)
{
return
this
.
_form
.
systemId
;
}
getAttribute
:
function
(
name
)
{
const
attr
=
this
.
_getAttribute
(
name
)
;
return
attr
?
attr
.
value
:
null
;
}
hasAttribute
:
function
(
name
)
{
this
.
_cacheAttributes
(
)
;
return
(
name
in
this
.
_attrMap
)
;
}
get
hidden
(
)
{
const
cls
=
this
.
getAttribute
(
"
class
"
)
;
return
cls
&
&
cls
.
indexOf
(
HIDDEN_CLASS
)
>
-
1
;
}
get
attributes
(
)
{
return
this
.
_form
.
attrs
;
}
get
pseudoClassLocks
(
)
{
return
this
.
_form
.
pseudoClassLocks
|
|
[
]
;
}
hasPseudoClassLock
:
function
(
pseudo
)
{
return
this
.
pseudoClassLocks
.
some
(
locked
=
>
locked
=
=
=
pseudo
)
;
}
get
displayType
(
)
{
return
this
.
_form
.
displayType
;
}
get
isDisplayed
(
)
{
return
this
.
_form
.
isDisplayed
;
}
get
isTreeDisplayed
(
)
{
let
parent
=
this
;
while
(
parent
)
{
if
(
!
parent
.
isDisplayed
)
{
return
false
;
}
parent
=
parent
.
parentNode
(
)
;
}
return
true
;
}
getNodeValue
:
custom
(
function
(
)
{
if
(
this
.
_form
.
nodeValue
=
=
=
null
&
&
this
.
_form
.
shortValue
)
{
return
this
.
_getNodeValue
(
)
;
}
const
str
=
this
.
_form
.
nodeValue
|
|
"
"
;
return
promise
.
resolve
(
new
SimpleStringFront
(
str
)
)
;
}
{
impl
:
"
_getNodeValue
"
}
)
startModifyingAttributes
:
function
(
)
{
return
new
AttributeModificationList
(
this
)
;
}
_cacheAttributes
:
function
(
)
{
if
(
typeof
this
.
_attrMap
!
=
"
undefined
"
)
{
return
;
}
this
.
_attrMap
=
{
}
;
for
(
const
attr
of
this
.
attributes
)
{
this
.
_attrMap
[
attr
.
name
]
=
attr
;
}
}
_getAttribute
:
function
(
name
)
{
this
.
_cacheAttributes
(
)
;
return
this
.
_attrMap
[
name
]
|
|
undefined
;
}
reparent
:
function
(
parent
)
{
if
(
this
.
_parent
=
=
=
parent
)
{
return
;
}
if
(
this
.
_parent
&
&
this
.
_parent
.
_child
=
=
=
this
)
{
this
.
_parent
.
_child
=
this
.
_next
;
}
if
(
this
.
_prev
)
{
this
.
_prev
.
_next
=
this
.
_next
;
}
if
(
this
.
_next
)
{
this
.
_next
.
_prev
=
this
.
_prev
;
}
this
.
_next
=
null
;
this
.
_prev
=
null
;
this
.
_parent
=
parent
;
if
(
!
parent
)
{
return
;
}
this
.
_next
=
parent
.
_child
;
if
(
this
.
_next
)
{
this
.
_next
.
_prev
=
this
;
}
parent
.
_child
=
this
;
}
treeChildren
:
function
(
)
{
const
ret
=
[
]
;
for
(
let
child
=
this
.
_child
;
child
!
=
null
;
child
=
child
.
_next
)
{
ret
.
push
(
child
)
;
}
return
ret
;
}
isLocalToBeDeprecated
:
function
(
)
{
return
!
!
this
.
conn
.
_transport
.
_serverConnection
;
}
rawNode
:
function
(
rawNode
)
{
if
(
!
this
.
isLocalToBeDeprecated
(
)
)
{
console
.
warn
(
"
Tried
to
use
rawNode
on
a
remote
connection
.
"
)
;
return
null
;
}
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
actor
=
DebuggerServer
.
searchAllConnectionsForActor
(
this
.
actorID
)
;
if
(
!
actor
)
{
return
null
;
}
return
actor
.
rawNode
;
}
}
)
;
exports
.
NodeFront
=
NodeFront
;
