"
use
strict
"
;
const
{
addonTargetSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
targets
/
addon
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
loader
.
lazyRequireGetter
(
this
"
BrowsingContextTargetFront
"
"
devtools
/
shared
/
fronts
/
targets
/
browsing
-
context
"
true
)
;
class
AddonTargetFront
extends
FrontClassWithSpec
(
addonTargetSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
client
=
client
;
this
.
traits
=
{
}
;
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
targetForm
=
json
;
for
(
const
name
in
json
)
{
if
(
name
=
=
"
actor
"
)
{
continue
;
}
this
[
name
]
=
json
[
name
]
;
}
}
isLegacyTemporaryExtension
(
)
{
if
(
!
this
.
type
)
{
return
false
;
}
return
(
this
.
type
=
=
"
extension
"
&
&
this
.
temporarilyInstalled
&
&
!
this
.
isWebExtension
&
&
!
this
.
isAPIExtension
)
;
}
async
connect
(
)
{
if
(
this
.
isWebExtension
&
&
this
.
client
.
mainRoot
.
traits
.
webExtensionAddonConnect
)
{
const
{
form
}
=
await
super
.
connect
(
)
;
const
front
=
new
BrowsingContextTargetFront
(
this
.
client
{
actor
:
form
.
actor
}
)
;
front
.
form
(
form
)
;
this
.
manage
(
front
)
;
return
front
;
}
return
this
;
}
async
attach
(
)
{
if
(
this
.
_attach
)
{
return
this
.
_attach
;
}
this
.
_attach
=
(
async
(
)
=
>
{
const
response
=
await
super
.
attach
(
)
;
this
.
_threadActor
=
response
.
threadActor
;
return
this
.
attachConsole
(
)
;
}
)
(
)
;
return
this
.
_attach
;
}
reconfigure
(
)
{
return
Promise
.
resolve
(
)
;
}
}
exports
.
AddonTargetFront
=
AddonTargetFront
;
registerFront
(
AddonTargetFront
)
;
