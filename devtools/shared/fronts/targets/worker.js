"
use
strict
"
;
const
{
workerTargetSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
targets
/
worker
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
TargetMixin
}
=
require
(
"
.
/
target
-
mixin
"
)
;
loader
.
lazyRequireGetter
(
this
"
ThreadClient
"
"
devtools
/
shared
/
client
/
thread
-
client
"
)
;
class
WorkerTargetFront
extends
TargetMixin
(
FrontClassWithSpec
(
workerTargetSpec
)
)
{
constructor
(
client
)
{
super
(
client
)
;
this
.
thread
=
null
;
this
.
traits
=
{
}
;
this
.
_isClosed
=
false
;
this
.
once
(
"
worker
-
close
"
this
.
destroy
.
bind
(
this
)
)
;
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
targetForm
=
json
;
this
.
_url
=
json
.
url
;
this
.
type
=
json
.
type
;
this
.
scope
=
json
.
scope
;
this
.
fetch
=
json
.
fetch
;
}
get
isClosed
(
)
{
return
this
.
_isClosed
;
}
destroy
(
)
{
this
.
_isClosed
=
true
;
if
(
this
.
thread
)
{
this
.
client
.
unregisterClient
(
this
.
thread
)
;
this
.
thread
=
null
;
}
super
.
destroy
(
)
;
}
async
attach
(
)
{
if
(
this
.
_attach
)
{
return
this
.
_attach
;
}
this
.
_attach
=
(
async
(
)
=
>
{
const
response
=
await
super
.
attach
(
)
;
this
.
_url
=
response
.
url
;
const
connectResponse
=
await
this
.
connect
(
{
}
)
;
this
.
targetForm
.
consoleActor
=
connectResponse
.
consoleActor
;
this
.
threadActor
=
connectResponse
.
threadActor
;
return
this
.
attachConsole
(
)
;
}
)
(
)
;
return
this
.
_attach
;
}
async
detach
(
)
{
if
(
this
.
isClosed
)
{
return
{
}
;
}
let
response
;
try
{
response
=
await
super
.
detach
(
)
;
}
catch
(
e
)
{
console
.
warn
(
Error
while
detaching
the
worker
target
front
:
{
e
.
message
}
)
;
}
this
.
destroy
(
)
;
return
response
;
}
reconfigure
(
)
{
return
Promise
.
resolve
(
)
;
}
async
attachThread
(
options
=
{
}
)
{
if
(
this
.
thread
)
{
const
response
=
[
{
type
:
"
connected
"
threadActor
:
this
.
thread
.
_actor
consoleActor
:
this
.
targetForm
.
consoleActor
}
this
.
thread
]
;
return
response
;
}
const
attachResponse
=
await
this
.
client
.
request
(
{
to
:
this
.
threadActor
type
:
"
attach
"
options
}
)
;
this
.
thread
=
new
ThreadClient
(
this
this
.
threadActor
)
;
this
.
client
.
registerClient
(
this
.
thread
)
;
return
[
attachResponse
this
.
thread
]
;
}
}
exports
.
WorkerTargetFront
=
WorkerTargetFront
;
registerFront
(
exports
.
WorkerTargetFront
)
;
