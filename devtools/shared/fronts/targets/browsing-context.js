"
use
strict
"
;
const
{
browsingContextTargetSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
targets
/
browsing
-
context
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
TargetMixin
}
=
require
(
"
.
/
target
-
mixin
"
)
;
loader
.
lazyRequireGetter
(
this
"
ThreadClient
"
"
devtools
/
shared
/
client
/
thread
-
client
"
)
;
class
BrowsingContextTargetFront
extends
TargetMixin
(
FrontClassWithSpec
(
browsingContextTargetSpec
)
)
{
constructor
(
client
)
{
super
(
client
)
;
this
.
thread
=
null
;
this
.
configureOptions
=
{
javascriptEnabled
:
null
}
;
this
.
_selected
=
false
;
this
.
_onTabNavigated
=
this
.
_onTabNavigated
.
bind
(
this
)
;
this
.
_onFrameUpdate
=
this
.
_onFrameUpdate
.
bind
(
this
)
;
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
targetForm
=
json
;
this
.
outerWindowID
=
json
.
outerWindowID
;
this
.
favicon
=
json
.
favicon
;
this
.
_title
=
json
.
title
;
this
.
_url
=
json
.
url
;
}
get
selected
(
)
{
return
this
.
_selected
;
}
setIsSelected
(
selected
)
{
this
.
_selected
=
selected
;
}
attachThread
(
options
=
{
}
)
{
if
(
this
.
thread
)
{
return
Promise
.
resolve
(
[
{
}
this
.
thread
]
)
;
}
const
packet
=
{
to
:
this
.
_threadActor
type
:
"
attach
"
options
}
;
return
this
.
client
.
request
(
packet
)
.
then
(
response
=
>
{
this
.
thread
=
new
ThreadClient
(
this
this
.
_threadActor
)
;
this
.
client
.
registerClient
(
this
.
thread
)
;
return
[
response
this
.
thread
]
;
}
)
;
}
_onFrameUpdate
(
packet
)
{
this
.
emit
(
"
frame
-
update
"
packet
)
;
}
_onTabNavigated
(
packet
)
{
const
event
=
Object
.
create
(
null
)
;
event
.
url
=
packet
.
url
;
event
.
title
=
packet
.
title
;
event
.
nativeConsoleAPI
=
packet
.
nativeConsoleAPI
;
event
.
isFrameSwitching
=
packet
.
isFrameSwitching
;
if
(
!
packet
.
isFrameSwitching
|
|
this
.
isWebExtension
)
{
this
.
_url
=
packet
.
url
;
this
.
_title
=
packet
.
title
;
}
if
(
packet
.
state
=
=
"
start
"
)
{
this
.
emit
(
"
will
-
navigate
"
event
)
;
}
else
{
this
.
emit
(
"
navigate
"
event
)
;
}
}
async
attach
(
)
{
if
(
this
.
_attach
)
{
return
this
.
_attach
;
}
this
.
_attach
=
(
async
(
)
=
>
{
this
.
on
(
"
tabNavigated
"
this
.
_onTabNavigated
)
;
this
.
on
(
"
frameUpdate
"
this
.
_onFrameUpdate
)
;
const
response
=
await
super
.
attach
(
)
;
this
.
_threadActor
=
response
.
threadActor
;
this
.
configureOptions
.
javascriptEnabled
=
response
.
javascriptEnabled
;
this
.
traits
=
response
.
traits
|
|
{
}
;
if
(
this
.
targetForm
.
consoleActor
)
{
await
this
.
attachConsole
(
)
;
}
}
)
(
)
;
return
this
.
_attach
;
}
async
reconfigure
(
{
options
}
)
{
const
response
=
await
super
.
reconfigure
(
{
options
}
)
;
if
(
typeof
options
.
javascriptEnabled
!
=
"
undefined
"
)
{
this
.
configureOptions
.
javascriptEnabled
=
options
.
javascriptEnabled
;
}
return
response
;
}
async
detach
(
)
{
let
response
;
try
{
response
=
await
super
.
detach
(
)
;
}
catch
(
e
)
{
console
.
warn
(
Error
while
detaching
the
browsing
context
target
front
:
{
e
.
message
}
)
;
}
if
(
this
.
thread
)
{
try
{
await
this
.
thread
.
detach
(
)
;
}
catch
(
e
)
{
console
.
warn
(
Error
while
detaching
the
thread
front
:
{
e
.
message
}
)
;
}
}
this
.
off
(
"
tabNavigated
"
this
.
_onTabNavigated
)
;
this
.
off
(
"
frameUpdate
"
this
.
_onFrameUpdate
)
;
return
response
;
}
}
exports
.
BrowsingContextTargetFront
=
BrowsingContextTargetFront
;
registerFront
(
exports
.
BrowsingContextTargetFront
)
;
