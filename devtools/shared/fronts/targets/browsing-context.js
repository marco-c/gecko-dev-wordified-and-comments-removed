"
use
strict
"
;
const
{
browsingContextTargetSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
targets
/
browsing
-
context
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
custom
}
=
protocol
;
loader
.
lazyRequireGetter
(
this
"
ThreadClient
"
"
devtools
/
shared
/
client
/
thread
-
client
"
)
;
const
BrowsingContextTargetFront
=
protocol
.
FrontClassWithSpec
(
browsingContextTargetSpec
{
initialize
:
function
(
client
form
)
{
protocol
.
Front
.
prototype
.
initialize
.
call
(
this
client
form
)
;
this
.
thread
=
null
;
this
.
configureOptions
=
{
javascriptEnabled
:
null
}
;
this
.
client
=
client
;
}
attachThread
:
function
(
options
=
{
}
)
{
if
(
this
.
thread
)
{
return
Promise
.
resolve
(
[
{
}
this
.
thread
]
)
;
}
const
packet
=
{
to
:
this
.
_threadActor
type
:
"
attach
"
options
}
;
return
this
.
client
.
request
(
packet
)
.
then
(
response
=
>
{
this
.
thread
=
new
ThreadClient
(
this
this
.
_threadActor
)
;
this
.
client
.
registerClient
(
this
.
thread
)
;
return
[
response
this
.
thread
]
;
}
)
;
}
attach
:
custom
(
async
function
(
)
{
const
response
=
await
this
.
_attach
(
)
;
this
.
_threadActor
=
response
.
threadActor
;
this
.
configureOptions
.
javascriptEnabled
=
response
.
javascriptEnabled
;
this
.
traits
=
response
.
traits
|
|
{
}
;
return
response
;
}
{
impl
:
"
_attach
"
}
)
reconfigure
:
custom
(
async
function
(
{
options
}
)
{
const
response
=
await
this
.
_reconfigure
(
{
options
}
)
;
if
(
typeof
options
.
javascriptEnabled
!
=
"
undefined
"
)
{
this
.
configureOptions
.
javascriptEnabled
=
options
.
javascriptEnabled
;
}
return
response
;
}
{
impl
:
"
_reconfigure
"
}
)
detach
:
custom
(
async
function
(
)
{
let
response
;
try
{
response
=
await
this
.
_detach
(
)
;
}
catch
(
e
)
{
console
.
warn
(
Error
while
detaching
the
browsing
context
target
front
:
{
e
.
message
}
)
;
}
if
(
this
.
thread
)
{
try
{
await
this
.
thread
.
detach
(
)
;
}
catch
(
e
)
{
console
.
warn
(
Error
while
detaching
the
thread
front
:
{
e
.
message
}
)
;
}
}
this
.
destroy
(
)
;
return
response
;
}
{
impl
:
"
_detach
"
}
)
attachWorker
:
function
(
workerTargetActor
)
{
return
this
.
client
.
attachWorker
(
workerTargetActor
)
;
}
}
)
;
exports
.
BrowsingContextTargetFront
=
BrowsingContextTargetFront
;
