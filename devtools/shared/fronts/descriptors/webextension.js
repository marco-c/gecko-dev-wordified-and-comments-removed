"
use
strict
"
;
const
{
webExtensionDescriptorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
descriptors
/
webextension
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
loader
.
lazyRequireGetter
(
this
"
BrowsingContextTargetFront
"
"
devtools
/
shared
/
fronts
/
targets
/
browsing
-
context
"
true
)
;
class
WebExtensionDescriptorFront
extends
FrontClassWithSpec
(
webExtensionDescriptorSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
client
=
client
;
this
.
traits
=
{
}
;
}
form
(
json
)
{
this
.
actorID
=
json
.
actor
;
this
.
targetForm
=
json
;
this
.
traits
=
json
.
traits
|
|
{
}
;
for
(
const
name
in
json
)
{
if
(
name
=
=
"
actor
"
)
{
continue
;
}
this
[
name
]
=
json
[
name
]
;
}
}
async
getTarget
(
)
{
if
(
this
.
isWebExtension
)
{
let
form
=
null
;
if
(
!
this
.
traits
.
isDescriptor
)
{
form
=
await
super
.
connect
(
)
;
}
else
{
form
=
await
super
.
getTarget
(
)
;
}
const
front
=
new
BrowsingContextTargetFront
(
this
.
conn
null
this
)
;
front
.
form
(
form
)
;
this
.
manage
(
front
)
;
return
front
;
}
return
this
;
}
}
exports
.
WebExtensionDescriptorFront
=
WebExtensionDescriptorFront
;
registerFront
(
WebExtensionDescriptorFront
)
;
