"
use
strict
"
;
const
{
processDescriptorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
descriptors
/
process
"
)
;
const
{
BrowsingContextTargetFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
targets
/
browsing
-
context
"
)
;
const
{
ContentProcessTargetFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
targets
/
content
-
process
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
class
ProcessDescriptorFront
extends
FrontClassWithSpec
(
processDescriptorSpec
)
{
constructor
(
client
targetFront
parentFront
)
{
super
(
client
targetFront
parentFront
)
;
this
.
isParent
=
false
;
this
.
_processTargetFront
=
null
;
this
.
_targetFrontPromise
=
null
;
this
.
_client
=
client
;
}
form
(
json
)
{
this
.
id
=
json
.
id
;
this
.
isParent
=
json
.
isParent
;
}
async
_createProcessTargetFront
(
form
)
{
let
front
=
null
;
if
(
form
.
actor
.
includes
(
"
parentProcessTarget
"
)
)
{
front
=
new
BrowsingContextTargetFront
(
this
.
_client
null
this
)
;
}
else
{
front
=
new
ContentProcessTargetFront
(
this
.
_client
null
this
)
;
}
front
.
actorID
=
form
.
actor
;
front
.
form
(
form
)
;
front
.
processID
=
this
.
id
;
this
.
manage
(
front
)
;
return
front
;
}
async
getTarget
(
)
{
if
(
this
.
_processTargetFront
&
&
this
.
_processTargetFront
.
actorID
)
{
return
this
.
_processTargetFront
;
}
if
(
this
.
_targetFrontPromise
)
{
return
this
.
_targetFrontPromise
;
}
this
.
_targetFrontPromise
=
(
async
(
)
=
>
{
try
{
const
targetForm
=
await
super
.
getTarget
(
)
;
this
.
_processTargetFront
=
await
this
.
_createProcessTargetFront
(
targetForm
)
;
await
this
.
_processTargetFront
.
attach
(
)
;
this
.
_targetFrontPromise
=
null
;
return
this
.
_processTargetFront
;
}
catch
(
e
)
{
console
.
log
(
Request
to
connect
to
ProcessDescriptor
"
{
this
.
id
}
"
failed
:
{
e
}
)
;
return
null
;
}
}
)
(
)
;
return
this
.
_targetFrontPromise
;
}
destroy
(
)
{
this
.
_processTargetFront
=
null
;
this
.
_targetFrontPromise
=
null
;
super
.
destroy
(
)
;
}
}
exports
.
ProcessDescriptorFront
=
ProcessDescriptorFront
;
registerFront
(
ProcessDescriptorFront
)
;
