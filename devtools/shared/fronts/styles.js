"
use
strict
"
;
const
{
Front
FrontClassWithSpec
custom
preEvent
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
pageStyleSpec
styleRuleSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
styles
"
)
;
const
promise
=
require
(
"
promise
"
)
;
loader
.
lazyRequireGetter
(
this
"
RuleRewriter
"
"
devtools
/
shared
/
css
/
parsing
-
utils
"
true
)
;
const
PageStyleFront
=
FrontClassWithSpec
(
pageStyleSpec
{
initialize
:
function
(
conn
form
ctx
detail
)
{
Front
.
prototype
.
initialize
.
call
(
this
conn
form
ctx
detail
)
;
this
.
inspector
=
this
.
parent
(
)
;
}
form
:
function
(
form
detail
)
{
if
(
detail
=
=
=
"
actorid
"
)
{
this
.
actorID
=
form
;
return
;
}
this
.
_form
=
form
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
get
walker
(
)
{
return
this
.
inspector
.
walker
;
}
get
supportsAuthoredStyles
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
authoredStyles
;
}
get
supportsFontVariations
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
fontVariations
;
}
getMatchedSelectors
:
custom
(
function
(
node
property
options
)
{
return
this
.
_getMatchedSelectors
(
node
property
options
)
.
then
(
ret
=
>
{
return
ret
.
matched
;
}
)
;
}
{
impl
:
"
_getMatchedSelectors
"
}
)
getApplied
:
custom
(
async
function
(
node
options
=
{
}
)
{
if
(
!
this
.
_form
.
traits
|
|
!
this
.
_form
.
traits
.
getAppliedCreatesStyleCache
)
{
await
this
.
getLayout
(
node
)
;
}
let
ret
=
await
this
.
_getApplied
(
node
options
)
;
return
ret
.
entries
;
}
{
impl
:
"
_getApplied
"
}
)
addNewRule
:
custom
(
function
(
node
pseudoClasses
)
{
let
addPromise
;
if
(
this
.
supportsAuthoredStyles
)
{
addPromise
=
this
.
_addNewRule
(
node
pseudoClasses
true
)
;
}
else
{
addPromise
=
this
.
_addNewRule
(
node
pseudoClasses
)
;
}
return
addPromise
.
then
(
ret
=
>
{
return
ret
.
entries
[
0
]
;
}
)
;
}
{
impl
:
"
_addNewRule
"
}
)
}
)
;
exports
.
PageStyleFront
=
PageStyleFront
;
const
StyleRuleFront
=
FrontClassWithSpec
(
styleRuleSpec
{
initialize
:
function
(
client
form
ctx
detail
)
{
Front
.
prototype
.
initialize
.
call
(
this
client
form
ctx
detail
)
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
form
:
function
(
form
detail
)
{
if
(
detail
=
=
=
"
actorid
"
)
{
this
.
actorID
=
form
;
return
;
}
this
.
actorID
=
form
.
actor
;
this
.
_form
=
form
;
if
(
this
.
_mediaText
)
{
this
.
_mediaText
=
null
;
}
}
_locationChangedPre
:
preEvent
(
"
location
-
changed
"
function
(
line
column
)
{
this
.
_clearOriginalLocation
(
)
;
this
.
_form
.
line
=
line
;
this
.
_form
.
column
=
column
;
}
)
startModifyingProperties
:
function
(
cssProperties
)
{
if
(
this
.
canSetRuleText
)
{
return
new
RuleRewriter
(
cssProperties
.
isKnown
this
this
.
authoredText
)
;
}
return
new
RuleModificationList
(
this
)
;
}
get
type
(
)
{
return
this
.
_form
.
type
;
}
get
line
(
)
{
return
this
.
_form
.
line
|
|
-
1
;
}
get
column
(
)
{
return
this
.
_form
.
column
|
|
-
1
;
}
get
cssText
(
)
{
return
this
.
_form
.
cssText
;
}
get
authoredText
(
)
{
return
this
.
_form
.
authoredText
|
|
this
.
_form
.
cssText
;
}
get
declarations
(
)
{
return
this
.
_form
.
declarations
|
|
[
]
;
}
get
keyText
(
)
{
return
this
.
_form
.
keyText
;
}
get
name
(
)
{
return
this
.
_form
.
name
;
}
get
selectors
(
)
{
return
this
.
_form
.
selectors
;
}
get
media
(
)
{
return
this
.
_form
.
media
;
}
get
mediaText
(
)
{
if
(
!
this
.
_form
.
media
)
{
return
null
;
}
if
(
this
.
_mediaText
)
{
return
this
.
_mediaText
;
}
this
.
_mediaText
=
this
.
media
.
join
(
"
"
)
;
return
this
.
_mediaText
;
}
get
parentRule
(
)
{
return
this
.
conn
.
getActor
(
this
.
_form
.
parentRule
)
;
}
get
parentStyleSheet
(
)
{
return
this
.
conn
.
getActor
(
this
.
_form
.
parentStyleSheet
)
;
}
get
element
(
)
{
return
this
.
conn
.
getActor
(
this
.
_form
.
element
)
;
}
get
href
(
)
{
if
(
this
.
_form
.
href
)
{
return
this
.
_form
.
href
;
}
let
sheet
=
this
.
parentStyleSheet
;
return
sheet
?
sheet
.
href
:
"
"
;
}
get
nodeHref
(
)
{
let
sheet
=
this
.
parentStyleSheet
;
return
sheet
?
sheet
.
nodeHref
:
"
"
;
}
get
supportsModifySelectorUnmatched
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
modifySelectorUnmatched
;
}
get
canSetRuleText
(
)
{
return
this
.
_form
.
traits
&
&
this
.
_form
.
traits
.
canSetRuleText
;
}
get
location
(
)
{
return
{
source
:
this
.
parentStyleSheet
href
:
this
.
href
line
:
this
.
line
column
:
this
.
column
}
;
}
_clearOriginalLocation
:
function
(
)
{
this
.
_originalLocation
=
null
;
}
getOriginalLocation
:
function
(
)
{
if
(
this
.
_originalLocation
)
{
return
promise
.
resolve
(
this
.
_originalLocation
)
;
}
let
parentSheet
=
this
.
parentStyleSheet
;
if
(
!
parentSheet
)
{
return
promise
.
resolve
(
this
.
location
)
;
}
return
parentSheet
.
getOriginalLocation
(
this
.
line
this
.
column
)
.
then
(
(
{
fromSourceMap
source
line
column
}
)
=
>
{
let
location
=
{
href
:
source
line
:
line
column
:
column
mediaText
:
this
.
mediaText
}
;
if
(
fromSourceMap
=
=
=
false
)
{
location
.
source
=
this
.
parentStyleSheet
;
}
if
(
!
source
)
{
location
.
href
=
this
.
href
;
}
this
.
_originalLocation
=
location
;
return
location
;
}
)
;
}
modifySelector
:
custom
(
async
function
(
node
value
)
{
let
response
;
if
(
this
.
supportsModifySelectorUnmatched
)
{
if
(
this
.
canSetRuleText
)
{
response
=
await
this
.
modifySelector2
(
node
value
true
)
;
}
else
{
response
=
await
this
.
modifySelector2
(
node
value
)
;
}
}
else
{
response
=
await
this
.
_modifySelector
(
value
)
;
}
if
(
response
.
ruleProps
)
{
response
.
ruleProps
=
response
.
ruleProps
.
entries
[
0
]
;
}
return
response
;
}
{
impl
:
"
_modifySelector
"
}
)
setRuleText
:
custom
(
function
(
newText
)
{
this
.
_form
.
authoredText
=
newText
;
return
this
.
_setRuleText
(
newText
)
;
}
{
impl
:
"
_setRuleText
"
}
)
}
)
;
exports
.
StyleRuleFront
=
StyleRuleFront
;
class
RuleModificationList
{
constructor
(
rule
)
{
this
.
rule
=
rule
;
this
.
modifications
=
[
]
;
}
apply
(
)
{
return
this
.
rule
.
modifyProperties
(
this
.
modifications
)
;
}
setProperty
(
index
name
value
priority
)
{
this
.
modifications
.
push
(
{
type
:
"
set
"
name
:
name
value
:
value
priority
:
priority
}
)
;
}
removeProperty
(
index
name
)
{
this
.
modifications
.
push
(
{
type
:
"
remove
"
name
:
name
}
)
;
}
renameProperty
(
index
name
)
{
this
.
removeProperty
(
index
name
)
;
}
setPropertyEnabled
(
index
name
isEnabled
)
{
if
(
!
isEnabled
)
{
this
.
removeProperty
(
index
name
)
;
}
}
createProperty
(
)
{
}
}
