"
use
strict
"
;
const
{
cssUsageSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
csscoverage
"
)
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
/
shared
/
locales
/
csscoverage
.
properties
"
)
;
loader
.
lazyRequireGetter
(
this
"
gDevTools
"
"
devtools
/
client
/
framework
/
devtools
"
true
)
;
const
l10n
=
exports
.
l10n
=
{
lookup
:
(
msg
)
=
>
L10N
.
getStr
(
msg
)
}
;
var
isRunning
=
false
;
var
notification
;
var
target
;
var
chromeWindow
;
class
CSSUsageFront
extends
FrontClassWithSpec
(
cssUsageSpec
)
{
constructor
(
client
form
)
{
super
(
client
form
)
;
this
.
actorID
=
form
.
cssUsageActor
;
this
.
manage
(
this
)
;
this
.
before
(
"
state
-
change
"
this
.
_onStateChange
.
bind
(
this
)
)
;
}
_onStateChange
(
ev
)
{
isRunning
=
ev
.
isRunning
;
ev
.
target
=
target
;
if
(
isRunning
)
{
const
gnb
=
chromeWindow
.
gNotificationBox
;
notification
=
gnb
.
getNotificationWithValue
(
"
csscoverage
-
running
"
)
;
if
(
notification
=
=
null
)
{
const
notifyStop
=
reason
=
>
{
if
(
reason
=
=
"
removed
"
)
{
this
.
stop
(
)
;
}
}
;
const
msg
=
l10n
.
lookup
(
"
csscoverageRunningReply
"
)
;
notification
=
gnb
.
appendNotification
(
msg
"
csscoverage
-
running
"
"
"
gnb
.
PRIORITY_INFO_HIGH
null
notifyStop
)
;
}
}
else
{
if
(
notification
)
{
notification
.
close
(
)
;
notification
=
undefined
;
}
gDevTools
.
showToolbox
(
target
"
styleeditor
"
)
;
target
=
undefined
;
}
}
start
(
newChromeWindow
newTarget
noreload
=
false
)
{
target
=
newTarget
;
chromeWindow
=
newChromeWindow
;
return
super
.
start
(
noreload
)
;
}
toggle
(
newChromeWindow
newTarget
)
{
target
=
newTarget
;
chromeWindow
=
newChromeWindow
;
return
super
.
toggle
(
)
;
}
isRunning
(
)
{
return
isRunning
;
}
}
exports
.
CSSUsageFront
=
CSSUsageFront
;
registerFront
(
CSSUsageFront
)
;
