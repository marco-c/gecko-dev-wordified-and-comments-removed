"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
{
Front
FrontClassWithSpec
custom
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
profilerSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
profiler
"
)
;
loader
.
lazyRequireGetter
(
this
"
events
"
"
sdk
/
event
/
core
"
)
;
loader
.
lazyRequireGetter
(
this
"
extend
"
"
sdk
/
util
/
object
"
true
)
;
exports
.
ProfilerFront
=
FrontClassWithSpec
(
profilerSpec
{
initialize
(
client
form
)
{
Front
.
prototype
.
initialize
.
call
(
this
client
form
)
;
this
.
actorID
=
form
.
profilerActor
;
this
.
manage
(
this
)
;
this
.
_onProfilerEvent
=
this
.
_onProfilerEvent
.
bind
(
this
)
;
events
.
on
(
this
"
*
"
this
.
_onProfilerEvent
)
;
}
destroy
(
)
{
events
.
off
(
this
"
*
"
this
.
_onProfilerEvent
)
;
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
getProfile
:
custom
(
function
(
options
)
{
return
this
.
_getProfile
(
extend
(
{
stringify
:
true
}
options
)
)
;
}
{
impl
:
"
_getProfile
"
}
)
_onProfilerEvent
(
eventName
data
)
{
if
(
data
.
relayed
)
{
return
;
}
data
.
relayed
=
true
;
if
(
eventName
=
=
=
"
eventNotification
"
)
{
events
.
emit
(
this
data
.
topic
data
)
;
}
else
{
this
.
conn
.
emit
(
"
eventNotification
"
{
subject
:
data
.
subject
topic
:
data
.
topic
data
:
data
.
data
details
:
data
.
details
}
)
;
if
(
this
.
conn
.
_getListeners
(
"
eventNotification
"
)
.
length
)
{
Cu
.
reportError
(
ProfilerActor
'
s
"
eventNotification
"
on
the
DebuggerClient
has
been
deprecated
.
Use
the
ProfilerFront
found
in
"
devtools
/
server
/
actors
/
profiler
"
.
)
;
}
}
}
}
)
;
