"
use
strict
"
;
const
{
Front
FrontClassWithSpec
custom
preEvent
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
animationPlayerSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
animation
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
AnimationPlayerFront
=
FrontClassWithSpec
(
animationPlayerSpec
{
initialize
:
function
(
conn
form
detail
ctx
)
{
Front
.
prototype
.
initialize
.
call
(
this
conn
form
detail
ctx
)
;
this
.
state
=
{
}
;
}
form
:
function
(
form
detail
)
{
if
(
detail
=
=
=
"
actorid
"
)
{
this
.
actorID
=
form
;
return
;
}
this
.
_form
=
form
;
this
.
state
=
this
.
initialState
;
}
destroy
:
function
(
)
{
Front
.
prototype
.
destroy
.
call
(
this
)
;
}
get
animationTargetNodeFront
(
)
{
if
(
!
this
.
_form
.
animationTargetNodeActorID
)
{
return
null
;
}
return
this
.
conn
.
getActor
(
this
.
_form
.
animationTargetNodeActorID
)
;
}
get
initialState
(
)
{
return
{
type
:
this
.
_form
.
type
startTime
:
this
.
_form
.
startTime
previousStartTime
:
this
.
_form
.
previousStartTime
currentTime
:
this
.
_form
.
currentTime
playState
:
this
.
_form
.
playState
playbackRate
:
this
.
_form
.
playbackRate
name
:
this
.
_form
.
name
duration
:
this
.
_form
.
duration
delay
:
this
.
_form
.
delay
endDelay
:
this
.
_form
.
endDelay
iterationCount
:
this
.
_form
.
iterationCount
iterationStart
:
this
.
_form
.
iterationStart
isRunningOnCompositor
:
this
.
_form
.
isRunningOnCompositor
propertyState
:
this
.
_form
.
propertyState
documentCurrentTime
:
this
.
_form
.
documentCurrentTime
}
;
}
onChanged
:
preEvent
(
"
changed
"
function
(
partialState
)
{
let
{
state
}
=
this
.
reconstructState
(
partialState
)
;
this
.
state
=
state
;
}
)
refreshState
:
Task
.
async
(
function
*
(
)
{
let
data
=
yield
this
.
getCurrentState
(
)
;
if
(
this
.
currentStateHasChanged
)
{
this
.
state
=
data
;
}
}
)
getCurrentState
:
custom
(
function
(
)
{
this
.
currentStateHasChanged
=
false
;
return
this
.
_getCurrentState
(
)
.
then
(
partialData
=
>
{
let
{
state
hasChanged
}
=
this
.
reconstructState
(
partialData
)
;
this
.
currentStateHasChanged
=
hasChanged
;
return
state
;
}
)
;
}
{
impl
:
"
_getCurrentState
"
}
)
reconstructState
:
function
(
data
)
{
let
hasChanged
=
false
;
for
(
let
key
in
this
.
state
)
{
if
(
typeof
data
[
key
]
=
=
=
"
undefined
"
)
{
data
[
key
]
=
this
.
state
[
key
]
;
}
else
if
(
data
[
key
]
!
=
=
this
.
state
[
key
]
)
{
hasChanged
=
true
;
}
}
return
{
state
:
data
hasChanged
}
;
}
}
)
;
exports
.
AnimationPlayerFront
=
AnimationPlayerFront
;
