"
use
strict
"
;
const
{
FrontClassWithSpec
registerFront
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
webSocketSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
websocket
"
)
;
class
WebSocketFront
extends
FrontClassWithSpec
(
webSocketSpec
)
{
constructor
(
client
)
{
super
(
client
)
;
this
.
_onWebSocketOpened
=
this
.
_onWebSocketOpened
.
bind
(
this
)
;
this
.
_onWebSocketClosed
=
this
.
_onWebSocketClosed
.
bind
(
this
)
;
this
.
_onFrameSent
=
this
.
_onFrameSent
.
bind
(
this
)
;
this
.
_onFrameReceived
=
this
.
_onFrameReceived
.
bind
(
this
)
;
this
.
formAttributeName
=
"
webSocketActor
"
;
this
.
on
(
"
serverWebSocketOpened
"
this
.
_onWebSocketOpened
)
;
this
.
on
(
"
serverWebSocketClosed
"
this
.
_onWebSocketClosed
)
;
this
.
on
(
"
serverFrameSent
"
this
.
_onFrameSent
)
;
this
.
on
(
"
serverFrameReceived
"
this
.
_onFrameReceived
)
;
}
destroy
(
)
{
this
.
off
(
"
serverWebSocketOpened
"
)
;
this
.
off
(
"
serverWebSocketClosed
"
)
;
this
.
off
(
"
serverFrameSent
"
)
;
this
.
off
(
"
serverFrameReceived
"
)
;
return
super
.
destroy
(
)
;
}
async
_onWebSocketOpened
(
httpChannelId
effectiveURI
protocols
extensions
)
{
this
.
emit
(
"
webSocketOpened
"
httpChannelId
effectiveURI
protocols
extensions
)
;
}
async
_onWebSocketClosed
(
wasClean
code
reason
)
{
this
.
emit
(
"
webSocketClosed
"
wasClean
code
reason
)
;
}
async
_onFrameReceived
(
httpChannelId
data
)
{
this
.
emit
(
"
frameReceived
"
httpChannelId
data
)
;
}
async
_onFrameSent
(
httpChannelId
data
)
{
this
.
emit
(
"
frameSent
"
httpChannelId
data
)
;
}
}
exports
.
WebSocketFront
=
WebSocketFront
;
registerFront
(
WebSocketFront
)
;
