function
run_test
(
)
{
for
(
var
k
in
SOURCE_MAP_TEST_MODULE
)
{
if
(
/
^
test
/
.
test
(
k
)
)
{
SOURCE_MAP_TEST_MODULE
[
k
]
(
assert
)
;
}
}
}
var
SOURCE_MAP_TEST_MODULE
=
(
function
(
modules
)
{
var
installedModules
=
{
}
;
function
__webpack_require__
(
moduleId
)
{
if
(
installedModules
[
moduleId
]
)
return
installedModules
[
moduleId
]
.
exports
;
var
module
=
installedModules
[
moduleId
]
=
{
exports
:
{
}
id
:
moduleId
loaded
:
false
}
;
modules
[
moduleId
]
.
call
(
module
.
exports
module
module
.
exports
__webpack_require__
)
;
module
.
loaded
=
true
;
return
module
.
exports
;
}
__webpack_require__
.
m
=
modules
;
__webpack_require__
.
c
=
installedModules
;
__webpack_require__
.
p
=
"
"
;
return
__webpack_require__
(
0
)
;
}
)
(
[
function
(
module
exports
__webpack_require__
)
{
{
var
binarySearch
=
__webpack_require__
(
1
)
;
function
numberCompare
(
a
b
)
{
return
a
-
b
;
}
exports
[
'
test
too
high
with
default
(
glb
)
bias
'
]
=
function
(
assert
)
{
var
needle
=
30
;
var
haystack
=
[
2
4
6
8
10
12
14
16
18
20
]
;
assert
.
doesNotThrow
(
function
(
)
{
binarySearch
.
search
(
needle
haystack
numberCompare
)
;
}
)
;
assert
.
equal
(
haystack
[
binarySearch
.
search
(
needle
haystack
numberCompare
)
]
20
)
;
}
;
exports
[
'
test
too
low
with
default
(
glb
)
bias
'
]
=
function
(
assert
)
{
var
needle
=
1
;
var
haystack
=
[
2
4
6
8
10
12
14
16
18
20
]
;
assert
.
doesNotThrow
(
function
(
)
{
binarySearch
.
search
(
needle
haystack
numberCompare
)
;
}
)
;
assert
.
equal
(
binarySearch
.
search
(
needle
haystack
numberCompare
)
-
1
)
;
}
;
exports
[
'
test
too
high
with
lub
bias
'
]
=
function
(
assert
)
{
var
needle
=
30
;
var
haystack
=
[
2
4
6
8
10
12
14
16
18
20
]
;
assert
.
doesNotThrow
(
function
(
)
{
binarySearch
.
search
(
needle
haystack
numberCompare
)
;
}
)
;
assert
.
equal
(
binarySearch
.
search
(
needle
haystack
numberCompare
binarySearch
.
LEAST_UPPER_BOUND
)
-
1
)
;
}
;
exports
[
'
test
too
low
with
lub
bias
'
]
=
function
(
assert
)
{
var
needle
=
1
;
var
haystack
=
[
2
4
6
8
10
12
14
16
18
20
]
;
assert
.
doesNotThrow
(
function
(
)
{
binarySearch
.
search
(
needle
haystack
numberCompare
)
;
}
)
;
assert
.
equal
(
haystack
[
binarySearch
.
search
(
needle
haystack
numberCompare
binarySearch
.
LEAST_UPPER_BOUND
)
]
2
)
;
}
;
exports
[
'
test
exact
search
'
]
=
function
(
assert
)
{
var
needle
=
4
;
var
haystack
=
[
2
4
6
8
10
12
14
16
18
20
]
;
assert
.
equal
(
haystack
[
binarySearch
.
search
(
needle
haystack
numberCompare
)
]
4
)
;
}
;
exports
[
'
test
fuzzy
search
with
default
(
glb
)
bias
'
]
=
function
(
assert
)
{
var
needle
=
19
;
var
haystack
=
[
2
4
6
8
10
12
14
16
18
20
]
;
assert
.
equal
(
haystack
[
binarySearch
.
search
(
needle
haystack
numberCompare
)
]
18
)
;
}
;
exports
[
'
test
fuzzy
search
with
lub
bias
'
]
=
function
(
assert
)
{
var
needle
=
19
;
var
haystack
=
[
2
4
6
8
10
12
14
16
18
20
]
;
assert
.
equal
(
haystack
[
binarySearch
.
search
(
needle
haystack
numberCompare
binarySearch
.
LEAST_UPPER_BOUND
)
]
20
)
;
}
;
exports
[
'
test
multiple
matches
'
]
=
function
(
assert
)
{
var
needle
=
5
;
var
haystack
=
[
1
1
2
5
5
5
13
21
]
;
assert
.
equal
(
binarySearch
.
search
(
needle
haystack
numberCompare
binarySearch
.
LEAST_UPPER_BOUND
)
3
)
;
}
;
exports
[
'
test
multiple
matches
at
the
beginning
'
]
=
function
(
assert
)
{
var
needle
=
1
;
var
haystack
=
[
1
1
2
5
5
5
13
21
]
;
assert
.
equal
(
binarySearch
.
search
(
needle
haystack
numberCompare
binarySearch
.
LEAST_UPPER_BOUND
)
0
)
;
}
;
}
}
function
(
module
exports
)
{
{
exports
.
GREATEST_LOWER_BOUND
=
1
;
exports
.
LEAST_UPPER_BOUND
=
2
;
function
recursiveSearch
(
aLow
aHigh
aNeedle
aHaystack
aCompare
aBias
)
{
var
mid
=
Math
.
floor
(
(
aHigh
-
aLow
)
/
2
)
+
aLow
;
var
cmp
=
aCompare
(
aNeedle
aHaystack
[
mid
]
true
)
;
if
(
cmp
=
=
=
0
)
{
return
mid
;
}
else
if
(
cmp
>
0
)
{
if
(
aHigh
-
mid
>
1
)
{
return
recursiveSearch
(
mid
aHigh
aNeedle
aHaystack
aCompare
aBias
)
;
}
if
(
aBias
=
=
exports
.
LEAST_UPPER_BOUND
)
{
return
aHigh
<
aHaystack
.
length
?
aHigh
:
-
1
;
}
else
{
return
mid
;
}
}
else
{
if
(
mid
-
aLow
>
1
)
{
return
recursiveSearch
(
aLow
mid
aNeedle
aHaystack
aCompare
aBias
)
;
}
if
(
aBias
=
=
exports
.
LEAST_UPPER_BOUND
)
{
return
mid
;
}
else
{
return
aLow
<
0
?
-
1
:
aLow
;
}
}
}
exports
.
search
=
function
search
(
aNeedle
aHaystack
aCompare
aBias
)
{
if
(
aHaystack
.
length
=
=
=
0
)
{
return
-
1
;
}
var
index
=
recursiveSearch
(
-
1
aHaystack
.
length
aNeedle
aHaystack
aCompare
aBias
|
|
exports
.
GREATEST_LOWER_BOUND
)
;
if
(
index
<
0
)
{
return
-
1
;
}
while
(
index
-
1
>
=
0
)
{
if
(
aCompare
(
aHaystack
[
index
]
aHaystack
[
index
-
1
]
true
)
!
=
=
0
)
{
break
;
}
-
-
index
;
}
return
index
;
}
;
}
}
]
)
;
