"
use
strict
"
;
var
{
Ci
}
=
require
(
"
chrome
"
)
;
var
Services
=
require
(
"
Services
"
)
;
var
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
loader
.
lazyRequireGetter
(
this
"
DebuggerSocket
"
"
devtools
/
shared
/
security
/
socket
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
AuthenticationResult
"
"
devtools
/
shared
/
security
/
auth
"
true
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
L10N
=
new
LocalizationHelper
(
"
devtools
-
shared
/
locale
/
debugger
.
properties
"
)
;
var
Client
=
exports
.
Client
=
{
}
;
var
Server
=
exports
.
Server
=
{
}
;
Client
.
defaultSendOOB
=
(
{
authResult
oob
}
)
=
>
{
if
(
authResult
!
=
AuthenticationResult
.
PENDING
)
{
throw
new
Error
(
"
Expected
PENDING
result
got
"
+
authResult
)
;
}
let
title
=
L10N
.
getStr
(
"
clientSendOOBTitle
"
)
;
let
header
=
L10N
.
getStr
(
"
clientSendOOBHeader
"
)
;
let
hashMsg
=
L10N
.
getFormatStr
(
"
clientSendOOBHash
"
oob
.
sha256
)
;
let
token
=
oob
.
sha256
.
replace
(
/
:
/
g
"
"
)
.
toLowerCase
(
)
+
oob
.
k
;
let
tokenMsg
=
L10N
.
getFormatStr
(
"
clientSendOOBToken
"
token
)
;
let
msg
=
{
header
}
\
n
\
n
{
hashMsg
}
\
n
{
tokenMsg
}
;
let
prompt
=
Services
.
prompt
;
let
flags
=
prompt
.
BUTTON_POS_0
*
prompt
.
BUTTON_TITLE_CANCEL
;
let
promptWindow
;
let
windowListener
=
{
onOpenWindow
(
xulWindow
)
{
let
win
=
xulWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
win
.
addEventListener
(
"
load
"
function
listener
(
)
{
win
.
removeEventListener
(
"
load
"
listener
false
)
;
if
(
win
.
document
.
documentElement
.
getAttribute
(
"
id
"
)
!
=
"
commonDialog
"
)
{
return
;
}
promptWindow
=
win
;
Services
.
wm
.
removeListener
(
windowListener
)
;
}
false
)
;
}
onCloseWindow
(
)
{
}
onWindowTitleChange
(
)
{
}
}
;
Services
.
wm
.
addListener
(
windowListener
)
;
DevToolsUtils
.
executeSoon
(
(
)
=
>
{
prompt
.
confirmEx
(
null
title
msg
flags
null
null
null
null
{
value
:
false
}
)
;
}
)
;
return
{
close
(
)
{
if
(
!
promptWindow
)
{
return
;
}
promptWindow
.
document
.
documentElement
.
acceptDialog
(
)
;
promptWindow
=
null
;
}
}
;
}
;
Server
.
defaultAllowConnection
=
(
{
client
server
}
)
=
>
{
let
title
=
L10N
.
getStr
(
"
remoteIncomingPromptTitle
"
)
;
let
header
=
L10N
.
getStr
(
"
remoteIncomingPromptHeader
"
)
;
let
clientEndpoint
=
{
client
.
host
}
:
{
client
.
port
}
;
let
clientMsg
=
L10N
.
getFormatStr
(
"
remoteIncomingPromptClientEndpoint
"
clientEndpoint
)
;
let
serverEndpoint
=
{
server
.
host
}
:
{
server
.
port
}
;
let
serverMsg
=
L10N
.
getFormatStr
(
"
remoteIncomingPromptServerEndpoint
"
serverEndpoint
)
;
let
footer
=
L10N
.
getStr
(
"
remoteIncomingPromptFooter
"
)
;
let
msg
=
{
header
}
\
n
\
n
{
clientMsg
}
\
n
{
serverMsg
}
\
n
\
n
{
footer
}
;
let
disableButton
=
L10N
.
getStr
(
"
remoteIncomingPromptDisable
"
)
;
let
prompt
=
Services
.
prompt
;
let
flags
=
prompt
.
BUTTON_POS_0
*
prompt
.
BUTTON_TITLE_OK
+
prompt
.
BUTTON_POS_1
*
prompt
.
BUTTON_TITLE_CANCEL
+
prompt
.
BUTTON_POS_2
*
prompt
.
BUTTON_TITLE_IS_STRING
+
prompt
.
BUTTON_POS_1_DEFAULT
;
let
result
=
prompt
.
confirmEx
(
null
title
msg
flags
null
null
disableButton
null
{
value
:
false
}
)
;
if
(
result
=
=
=
0
)
{
return
AuthenticationResult
.
ALLOW
;
}
if
(
result
=
=
=
2
)
{
return
AuthenticationResult
.
DISABLE_ALL
;
}
return
AuthenticationResult
.
DENY
;
}
;
Server
.
defaultReceiveOOB
=
(
)
=
>
{
let
title
=
L10N
.
getStr
(
"
serverReceiveOOBTitle
"
)
;
let
msg
=
L10N
.
getStr
(
"
serverReceiveOOBBody
"
)
;
let
input
=
{
value
:
null
}
;
let
prompt
=
Services
.
prompt
;
let
result
=
prompt
.
prompt
(
null
title
msg
input
null
{
value
:
false
}
)
;
if
(
!
result
)
{
return
null
;
}
input
=
input
.
value
.
trim
(
)
;
let
sha256
=
input
.
substring
(
0
64
)
;
sha256
=
sha256
.
replace
(
/
\
w
{
2
}
/
g
"
&
:
"
)
.
slice
(
0
-
1
)
.
toUpperCase
(
)
;
let
k
=
input
.
substring
(
64
)
;
return
{
sha256
k
}
;
}
;
