"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
prompt
"
"
devtools
/
shared
/
security
/
prompt
"
)
;
function
createEnum
(
obj
)
{
for
(
const
key
in
obj
)
{
obj
[
key
]
=
key
;
}
return
obj
;
}
var
AuthenticationResult
=
(
exports
.
AuthenticationResult
=
createEnum
(
{
DISABLE_ALL
:
null
DENY
:
null
PENDING
:
null
ALLOW
:
null
ALLOW_PERSIST
:
null
}
)
)
;
var
Authenticators
=
{
}
;
var
Prompt
=
(
Authenticators
.
Prompt
=
{
}
)
;
Prompt
.
mode
=
"
PROMPT
"
;
Prompt
.
Client
=
function
(
)
{
}
;
Prompt
.
Client
.
prototype
=
{
mode
:
Prompt
.
mode
validateSettings
(
)
{
}
validateConnection
(
)
{
return
true
;
}
authenticate
(
)
{
}
}
;
Prompt
.
Server
=
function
(
)
{
}
;
Prompt
.
Server
.
prototype
=
{
mode
:
Prompt
.
mode
augmentAdvertisement
(
listener
advertisement
)
{
advertisement
.
authentication
=
Prompt
.
mode
;
}
authenticate
(
{
client
server
}
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
prompt
-
connection
"
)
)
{
return
AuthenticationResult
.
ALLOW
;
}
return
this
.
allowConnection
(
{
authentication
:
this
.
mode
client
server
}
)
;
}
allowConnection
:
prompt
.
Server
.
defaultAllowConnection
}
;
exports
.
Authenticators
=
{
get
(
mode
)
{
if
(
!
mode
)
{
mode
=
Prompt
.
mode
;
}
for
(
const
key
in
Authenticators
)
{
const
auth
=
Authenticators
[
key
]
;
if
(
auth
.
mode
=
=
=
mode
)
{
return
auth
;
}
}
throw
new
Error
(
"
Unknown
authenticator
mode
:
"
+
mode
)
;
}
}
;
