"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
const
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
xpcInspector
=
require
(
"
xpcInspector
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
{
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
main
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
debugger
.
remote
-
enabled
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
remote
.
tls
-
handshake
-
timeout
"
1000
)
;
function
scriptErrorFlagsToKind
(
flags
)
{
let
kind
;
if
(
flags
&
Ci
.
nsIScriptError
.
warningFlag
)
{
kind
=
"
warning
"
;
}
if
(
flags
&
Ci
.
nsIScriptError
.
exceptionFlag
)
{
kind
=
"
exception
"
;
}
else
{
kind
=
"
error
"
;
}
if
(
flags
&
Ci
.
nsIScriptError
.
strictFlag
)
{
kind
=
"
strict
"
+
kind
;
}
return
kind
;
}
var
listener
=
{
observe
:
function
(
message
)
{
let
string
;
try
{
message
.
QueryInterface
(
Ci
.
nsIScriptError
)
;
dump
(
message
.
sourceName
+
"
:
"
+
message
.
lineNumber
+
"
:
"
+
scriptErrorFlagsToKind
(
message
.
flags
)
+
"
:
"
+
message
.
errorMessage
+
"
\
n
"
)
;
string
=
message
.
errorMessage
;
}
catch
(
ex
)
{
try
{
string
=
"
"
+
message
.
message
;
}
catch
(
e
)
{
string
=
"
<
error
converting
error
message
to
string
>
"
;
}
}
while
(
xpcInspector
.
eventLoopNestLevel
>
0
)
{
xpcInspector
.
exitNestedEventLoop
(
)
;
}
if
(
!
(
message
.
flags
&
Ci
.
nsIScriptError
.
strictFlag
)
)
{
do_print
(
"
head_dbg
.
js
got
console
message
:
"
+
string
+
"
\
n
"
)
;
}
}
}
;
var
consoleService
=
Cc
[
"
mozilla
.
org
/
consoleservice
;
1
"
]
.
getService
(
Ci
.
nsIConsoleService
)
;
consoleService
.
registerListener
(
listener
)
;
function
initTestDebuggerServer
(
)
{
DebuggerServer
.
registerModule
(
"
xpcshell
-
test
/
testactors
"
)
;
DebuggerServer
.
init
(
)
;
}
