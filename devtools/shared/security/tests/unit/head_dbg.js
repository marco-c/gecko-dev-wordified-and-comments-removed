"
use
strict
"
;
var
Cc
=
Components
.
classes
;
var
Ci
=
Components
.
interfaces
;
var
Cu
=
Components
.
utils
;
var
Cr
=
Components
.
results
;
var
CC
=
Components
.
Constructor
;
const
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
promise
=
require
(
"
promise
"
)
;
const
{
Task
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
{
}
)
;
const
Services
=
require
(
"
Services
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
xpcInspector
=
require
(
"
xpcInspector
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
{
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
main
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
debugger
.
remote
-
enabled
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
devtools
.
remote
.
tls
-
handshake
-
timeout
"
1000
)
;
function
scriptErrorFlagsToKind
(
aFlags
)
{
var
kind
;
if
(
aFlags
&
Ci
.
nsIScriptError
.
warningFlag
)
kind
=
"
warning
"
;
if
(
aFlags
&
Ci
.
nsIScriptError
.
exceptionFlag
)
kind
=
"
exception
"
;
else
kind
=
"
error
"
;
if
(
aFlags
&
Ci
.
nsIScriptError
.
strictFlag
)
kind
=
"
strict
"
+
kind
;
return
kind
;
}
var
errorCount
=
0
;
var
listener
=
{
observe
:
function
(
aMessage
)
{
errorCount
+
+
;
try
{
var
scriptError
=
aMessage
.
QueryInterface
(
Ci
.
nsIScriptError
)
;
dump
(
aMessage
.
sourceName
+
"
:
"
+
aMessage
.
lineNumber
+
"
:
"
+
scriptErrorFlagsToKind
(
aMessage
.
flags
)
+
"
:
"
+
aMessage
.
errorMessage
+
"
\
n
"
)
;
var
string
=
aMessage
.
errorMessage
;
}
catch
(
x
)
{
try
{
var
string
=
"
"
+
aMessage
.
message
;
}
catch
(
x
)
{
var
string
=
"
<
error
converting
error
message
to
string
>
"
;
}
}
while
(
xpcInspector
.
eventLoopNestLevel
>
0
)
{
xpcInspector
.
exitNestedEventLoop
(
)
;
}
if
(
!
(
aMessage
.
flags
&
Ci
.
nsIScriptError
.
strictFlag
)
)
{
do_print
(
"
head_dbg
.
js
got
console
message
:
"
+
string
+
"
\
n
"
)
;
}
}
}
;
var
consoleService
=
Cc
[
"
mozilla
.
org
/
consoleservice
;
1
"
]
.
getService
(
Ci
.
nsIConsoleService
)
;
consoleService
.
registerListener
(
listener
)
;
function
initTestDebuggerServer
(
)
{
DebuggerServer
.
registerModule
(
"
xpcshell
-
test
/
testactors
"
)
;
DebuggerServer
.
init
(
)
;
}
