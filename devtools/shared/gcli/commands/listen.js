"
use
strict
"
;
const
{
Cc
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
l10n
=
require
(
"
gcli
/
l10n
"
)
;
const
{
XPCOMUtils
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
DevToolsLoader
"
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
BRAND_SHORT_NAME
=
Cc
[
"
mozilla
.
org
/
intl
/
stringbundle
;
1
"
]
.
getService
(
Ci
.
nsIStringBundleService
)
.
createBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
.
GetStringFromName
(
"
brandShortName
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
debuggerServer
"
(
)
=
>
{
let
serverLoader
=
new
DevToolsLoader
(
)
;
serverLoader
.
invisibleToDebugger
=
true
;
let
{
DebuggerServer
:
debuggerServer
}
=
serverLoader
.
require
(
"
devtools
/
server
/
main
"
)
;
debuggerServer
.
init
(
)
;
debuggerServer
.
registerAllActors
(
)
;
debuggerServer
.
allowChromeProcess
=
!
l10n
.
hiddenByChromePref
(
)
;
return
debuggerServer
;
}
)
;
exports
.
items
=
[
{
item
:
"
command
"
runAt
:
"
client
"
name
:
"
listen
"
description
:
l10n
.
lookup
(
"
listenDesc
"
)
manual
:
l10n
.
lookupFormat
(
"
listenManual2
"
[
BRAND_SHORT_NAME
]
)
params
:
[
{
name
:
"
port
"
type
:
"
number
"
get
defaultValue
(
)
{
return
Services
.
prefs
.
getIntPref
(
"
devtools
.
debugger
.
remote
-
port
"
)
;
}
description
:
l10n
.
lookup
(
"
listenPortDesc
"
)
}
{
name
:
"
protocol
"
get
defaultValue
(
)
{
let
webSocket
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
remote
-
websocket
"
)
;
let
protocol
;
if
(
webSocket
=
=
=
true
)
{
protocol
=
"
websocket
"
;
}
else
{
protocol
=
"
mozilla
-
rdp
"
;
}
return
protocol
;
}
type
:
{
name
:
"
selection
"
data
:
[
"
mozilla
-
rdp
"
"
websocket
"
]
}
description
:
l10n
.
lookup
(
"
listenProtocolDesc
"
)
}
]
exec
:
function
(
args
context
)
{
let
listener
=
debuggerServer
.
createListener
(
)
;
if
(
!
listener
)
{
throw
new
Error
(
l10n
.
lookup
(
"
listenDisabledOutput
"
)
)
;
}
let
webSocket
=
false
;
if
(
args
.
protocol
=
=
=
"
websocket
"
)
{
webSocket
=
true
;
}
else
if
(
args
.
protocol
=
=
=
"
mozilla
-
rdp
"
)
{
webSocket
=
false
;
}
listener
.
portOrPath
=
args
.
port
;
listener
.
webSocket
=
webSocket
;
listener
.
open
(
)
;
if
(
debuggerServer
.
initialized
)
{
return
l10n
.
lookupFormat
(
"
listenInitOutput
"
[
"
"
+
args
.
port
]
)
;
}
return
l10n
.
lookup
(
"
listenNoInitOutput
"
)
;
}
}
{
item
:
"
command
"
runAt
:
"
client
"
name
:
"
unlisten
"
description
:
l10n
.
lookup
(
"
unlistenDesc
"
)
manual
:
l10n
.
lookup
(
"
unlistenManual
"
)
exec
:
function
(
args
context
)
{
debuggerServer
.
closeAllListeners
(
)
;
return
l10n
.
lookup
(
"
unlistenOutput
"
)
;
}
}
]
;
