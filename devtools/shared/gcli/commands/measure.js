"
use
strict
"
;
const
events
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
loader
.
lazyRequireGetter
(
this
"
CommandState
"
"
devtools
/
shared
/
gcli
/
command
-
state
"
true
)
;
const
l10n
=
require
(
"
gcli
/
l10n
"
)
;
require
(
"
devtools
/
server
/
actors
/
inspector
"
)
;
const
{
MeasuringToolHighlighter
HighlighterEnvironment
}
=
require
(
"
devtools
/
server
/
actors
/
highlighters
"
)
;
const
highlighters
=
new
WeakMap
(
)
;
exports
.
items
=
[
{
name
:
"
measure
"
runAt
:
"
client
"
description
:
l10n
.
lookup
(
"
measureDesc
"
)
manual
:
l10n
.
lookup
(
"
measureManual
"
)
buttonId
:
"
command
-
button
-
measure
"
buttonClass
:
"
command
-
button
command
-
button
-
invertable
"
tooltipText
:
l10n
.
lookup
(
"
measureTooltip
"
)
state
:
{
isChecked
:
(
target
)
=
>
CommandState
.
isEnabledForTarget
(
target
"
measure
"
)
onChange
:
(
target
handler
)
=
>
CommandState
.
on
(
"
changed
"
handler
)
offChange
:
(
target
handler
)
=
>
CommandState
.
off
(
"
changed
"
handler
)
}
exec
:
function
*
(
args
context
)
{
let
{
target
}
=
context
.
environment
;
let
response
=
yield
context
.
updateExec
(
"
measure_server
"
)
;
let
isEnabled
=
response
.
data
;
if
(
isEnabled
)
{
CommandState
.
enableForTarget
(
target
"
measure
"
)
;
}
else
{
CommandState
.
disableForTarget
(
target
"
measure
"
)
;
}
target
.
once
(
"
will
-
navigate
"
(
)
=
>
CommandState
.
disableForTarget
(
target
"
measure
"
)
)
;
}
}
{
name
:
"
measure_server
"
runAt
:
"
server
"
hidden
:
true
returnType
:
"
highlighterVisibility
"
exec
:
function
(
args
context
)
{
let
env
=
context
.
environment
;
let
{
document
}
=
env
;
if
(
highlighters
.
has
(
document
)
)
{
let
{
highlighter
}
=
highlighters
.
get
(
document
)
;
highlighter
.
destroy
(
)
;
return
false
;
}
let
environment
=
new
HighlighterEnvironment
(
)
;
environment
.
initFromWindow
(
env
.
window
)
;
let
highlighter
=
new
MeasuringToolHighlighter
(
environment
)
;
highlighters
.
set
(
document
{
highlighter
environment
}
)
;
events
.
once
(
highlighter
"
destroy
"
(
)
=
>
{
if
(
highlighters
.
has
(
document
)
)
{
let
{
environment
:
toDestroy
}
=
highlighters
.
get
(
document
)
;
toDestroy
.
destroy
(
)
;
highlighters
.
delete
(
document
)
;
}
}
)
;
highlighter
.
show
(
)
;
return
true
;
}
}
]
;
