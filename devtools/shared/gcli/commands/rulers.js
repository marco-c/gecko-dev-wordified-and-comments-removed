"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
toolkit
/
event
-
emitter
"
)
;
const
eventEmitter
=
new
EventEmitter
(
)
;
const
events
=
require
(
"
sdk
/
event
/
core
"
)
;
loader
.
lazyRequireGetter
(
this
"
getOuterId
"
"
sdk
/
window
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getBrowserForTab
"
"
sdk
/
tabs
/
utils
"
true
)
;
const
l10n
=
require
(
"
gcli
/
l10n
"
)
;
require
(
"
devtools
/
server
/
actors
/
inspector
"
)
;
const
{
RulersHighlighter
HighlighterEnvironment
}
=
require
(
"
devtools
/
server
/
actors
/
highlighters
"
)
;
const
highlighters
=
new
WeakMap
(
)
;
const
visibleHighlighters
=
new
Set
(
)
;
const
isCheckedFor
=
(
tab
)
=
>
tab
?
visibleHighlighters
.
has
(
getBrowserForTab
(
tab
)
.
outerWindowID
)
:
false
;
exports
.
items
=
[
{
name
:
"
rulers
"
runAt
:
"
client
"
description
:
l10n
.
lookup
(
"
rulersDesc
"
)
manual
:
l10n
.
lookup
(
"
rulersManual
"
)
buttonId
:
"
command
-
button
-
rulers
"
buttonClass
:
"
command
-
button
command
-
button
-
invertable
"
tooltipText
:
l10n
.
lookup
(
"
rulersTooltip
"
)
state
:
{
isChecked
:
(
{
_tab
}
)
=
>
isCheckedFor
(
_tab
)
onChange
:
(
target
handler
)
=
>
eventEmitter
.
on
(
"
changed
"
handler
)
offChange
:
(
target
handler
)
=
>
eventEmitter
.
off
(
"
changed
"
handler
)
}
exec
:
function
*
(
args
context
)
{
let
{
target
}
=
context
.
environment
;
let
response
=
yield
context
.
updateExec
(
"
rulers_server
"
)
;
let
{
visible
id
}
=
response
.
data
;
if
(
visible
)
{
visibleHighlighters
.
add
(
id
)
;
}
else
{
visibleHighlighters
.
delete
(
id
)
;
}
eventEmitter
.
emit
(
"
changed
"
{
target
}
)
;
let
onNavigate
=
(
)
=
>
{
visibleHighlighters
.
delete
(
id
)
;
eventEmitter
.
emit
(
"
changed
"
{
target
}
)
;
}
;
target
.
off
(
"
will
-
navigate
"
onNavigate
)
;
target
.
once
(
"
will
-
navigate
"
onNavigate
)
;
}
}
{
name
:
"
rulers_server
"
runAt
:
"
server
"
hidden
:
true
returnType
:
"
highlighterVisibility
"
exec
:
function
(
args
context
)
{
let
env
=
context
.
environment
;
let
{
document
}
=
env
;
let
id
=
getOuterId
(
env
.
window
)
;
if
(
highlighters
.
has
(
document
)
)
{
let
{
highlighter
}
=
highlighters
.
get
(
document
)
;
highlighter
.
destroy
(
)
;
return
{
visible
:
false
id
}
;
}
let
environment
=
new
HighlighterEnvironment
(
)
;
environment
.
initFromWindow
(
env
.
window
)
;
let
highlighter
=
new
RulersHighlighter
(
environment
)
;
highlighters
.
set
(
document
{
highlighter
environment
}
)
;
events
.
once
(
highlighter
"
destroy
"
(
)
=
>
{
if
(
highlighters
.
has
(
document
)
)
{
let
{
environment
}
=
highlighters
.
get
(
document
)
;
environment
.
destroy
(
)
;
highlighters
.
delete
(
document
)
;
}
}
)
;
highlighter
.
show
(
)
;
return
{
visible
:
true
id
}
;
}
}
]
;
