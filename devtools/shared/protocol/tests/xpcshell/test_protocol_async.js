"
use
strict
"
;
const
{
waitForTick
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
protocol
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
Arg
RetVal
}
=
protocol
;
function
simpleHello
(
)
{
return
{
from
:
"
root
"
applicationType
:
"
xpcshell
-
tests
"
traits
:
[
]
}
;
}
const
rootSpec
=
protocol
.
generateActorSpec
(
{
typeName
:
"
root
"
methods
:
{
simpleReturn
:
{
response
:
{
value
:
RetVal
(
)
}
}
promiseReturn
:
{
request
:
{
toWait
:
Arg
(
0
"
number
"
)
}
response
:
{
value
:
RetVal
(
"
number
"
)
}
}
simpleThrow
:
{
response
:
{
value
:
RetVal
(
"
number
"
)
}
}
promiseThrow
:
{
request
:
{
toWait
:
Arg
(
0
"
number
"
)
}
response
:
{
value
:
RetVal
(
"
number
"
)
}
}
}
}
)
;
const
RootActor
=
protocol
.
ActorClassWithSpec
(
rootSpec
{
initialize
(
conn
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
manage
(
this
)
;
this
.
actorID
=
"
root
"
;
this
.
sequence
=
0
;
}
sayHello
:
simpleHello
simpleReturn
(
)
{
return
this
.
sequence
+
+
;
}
async
promiseReturn
(
toWait
)
{
const
sequence
=
this
.
sequence
+
+
;
while
(
this
.
sequence
-
sequence
<
toWait
)
{
await
waitForTick
(
)
;
}
return
sequence
;
}
simpleThrow
(
)
{
throw
new
Error
(
this
.
sequence
+
+
)
;
}
promiseThrow
(
toWait
)
{
return
this
.
promiseReturn
(
toWait
)
.
then
(
Promise
.
reject
)
;
}
}
)
;
class
RootFront
extends
protocol
.
FrontClassWithSpec
(
rootSpec
)
{
constructor
(
client
)
{
super
(
client
)
;
this
.
actorID
=
"
root
"
;
this
.
manage
(
this
)
;
}
}
protocol
.
registerFront
(
RootFront
)
;
add_task
(
async
function
(
)
{
DevToolsServer
.
createRootActor
=
RootActor
;
DevToolsServer
.
init
(
)
;
const
trace
=
connectPipeTracing
(
)
;
const
client
=
new
DevToolsClient
(
trace
)
;
await
client
.
connect
(
)
;
const
rootFront
=
client
.
mainRoot
;
const
calls
=
[
]
;
let
sequence
=
0
;
calls
.
push
(
rootFront
.
promiseReturn
(
2
)
.
then
(
ret
=
>
{
Assert
.
equal
(
sequence
0
)
;
Assert
.
equal
(
ret
sequence
+
+
)
;
}
)
)
;
calls
.
push
(
rootFront
.
simpleReturn
(
)
.
then
(
ret
=
>
{
Assert
.
equal
(
sequence
1
)
;
Assert
.
equal
(
ret
sequence
+
+
)
;
}
)
)
;
calls
.
push
(
rootFront
.
simpleReturn
(
)
.
then
(
ret
=
>
{
Assert
.
equal
(
sequence
2
)
;
Assert
.
equal
(
ret
sequence
+
+
)
;
}
)
)
;
calls
.
push
(
rootFront
.
simpleThrow
(
)
.
then
(
(
)
=
>
{
Assert
.
ok
(
false
"
simpleThrow
shouldn
'
t
succeed
!
"
)
;
}
error
=
>
{
Assert
.
equal
(
sequence
+
+
3
)
;
}
)
)
;
calls
.
push
(
rootFront
.
promiseThrow
(
2
)
.
then
(
(
)
=
>
{
Assert
.
ok
(
false
"
promiseThrow
shouldn
'
t
succeed
!
"
)
;
}
error
=
>
{
Assert
.
equal
(
sequence
+
+
4
)
;
Assert
.
ok
(
true
"
simple
throw
should
throw
"
)
;
}
)
)
;
calls
.
push
(
rootFront
.
simpleReturn
(
)
.
then
(
ret
=
>
{
Assert
.
equal
(
sequence
5
)
;
Assert
.
equal
(
ret
sequence
+
+
)
;
}
)
)
;
calls
.
push
(
rootFront
.
promiseReturn
(
1
)
.
then
(
ret
=
>
{
Assert
.
equal
(
sequence
6
)
;
Assert
.
equal
(
ret
sequence
+
+
)
;
}
)
)
;
calls
.
push
(
rootFront
.
simpleReturn
(
)
.
then
(
ret
=
>
{
Assert
.
equal
(
sequence
7
)
;
Assert
.
equal
(
ret
sequence
+
+
)
;
}
)
)
;
await
Promise
.
all
(
calls
)
;
await
client
.
close
(
)
;
}
)
;
