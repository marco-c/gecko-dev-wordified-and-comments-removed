"
use
strict
"
;
var
{
findPlaceholders
getPath
}
=
require
(
"
devtools
/
shared
/
protocol
/
utils
"
)
;
var
{
types
}
=
require
(
"
devtools
/
shared
/
protocol
/
types
"
)
;
var
Response
=
function
(
template
=
{
}
)
{
this
.
template
=
template
;
if
(
this
.
template
instanceof
RetVal
&
&
this
.
template
.
isArrayType
(
)
)
{
throw
Error
(
"
Arrays
should
be
wrapped
in
objects
"
)
;
}
const
placeholders
=
findPlaceholders
(
template
RetVal
)
;
if
(
placeholders
.
length
>
1
)
{
throw
Error
(
"
More
than
one
RetVal
specified
in
response
"
)
;
}
const
placeholder
=
placeholders
.
shift
(
)
;
if
(
placeholder
)
{
this
.
retVal
=
placeholder
.
placeholder
;
this
.
path
=
placeholder
.
path
;
}
}
;
Response
.
prototype
=
{
write
:
function
(
ret
ctx
)
{
if
(
this
.
template
instanceof
RetVal
)
{
return
this
.
template
.
write
(
ret
ctx
)
;
}
const
result
=
{
}
;
for
(
const
key
in
this
.
template
)
{
const
value
=
this
.
template
[
key
]
;
if
(
value
instanceof
RetVal
)
{
result
[
key
]
=
value
.
write
(
ret
ctx
)
;
}
else
{
throw
new
Error
(
"
Response
can
only
be
a
RetVal
instance
or
an
object
"
+
"
with
one
property
being
a
RetVal
instance
.
"
)
;
}
}
return
result
;
}
read
:
function
(
packet
ctx
)
{
if
(
!
this
.
retVal
)
{
return
undefined
;
}
const
v
=
getPath
(
packet
this
.
path
)
;
return
this
.
retVal
.
read
(
v
ctx
)
;
}
}
;
exports
.
Response
=
Response
;
var
RetVal
=
function
(
type
)
{
this
.
_type
=
type
;
loader
.
lazyGetter
(
this
"
type
"
function
(
)
{
return
types
.
getType
(
type
)
;
}
)
;
}
;
RetVal
.
prototype
=
{
write
:
function
(
v
ctx
)
{
return
this
.
type
.
write
(
v
ctx
)
;
}
read
:
function
(
v
ctx
)
{
return
this
.
type
.
read
(
v
ctx
)
;
}
isArrayType
:
function
(
)
{
return
typeof
this
.
_type
=
=
=
"
string
"
&
&
this
.
_type
.
startsWith
(
"
array
:
"
)
;
}
}
;
exports
.
RetVal
=
function
(
type
)
{
return
new
RetVal
(
type
)
;
}
;
