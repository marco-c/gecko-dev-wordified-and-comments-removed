"
use
strict
"
;
const
{
require
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
)
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
const
discovery
=
require
(
"
resource
:
/
/
devtools
/
shared
/
discovery
/
discovery
.
js
"
)
;
const
{
setTimeout
clearTimeout
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
discovery
.
log
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
discovery
.
log
"
)
;
}
)
;
function
log
(
msg
)
{
info
(
"
DISCOVERY
:
"
+
msg
)
;
}
var
gTestTransports
=
{
}
;
function
TestTransport
(
port
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
port
=
port
;
gTestTransports
[
this
.
port
]
=
this
;
}
TestTransport
.
prototype
=
{
send
(
object
port
)
{
log
(
"
Send
to
"
+
port
+
"
:
\
n
"
+
JSON
.
stringify
(
object
null
2
)
)
;
if
(
!
gTestTransports
[
port
]
)
{
log
(
"
No
listener
on
port
"
+
port
)
;
return
;
}
const
message
=
JSON
.
stringify
(
object
)
;
gTestTransports
[
port
]
.
onPacketReceived
(
null
message
)
;
}
destroy
(
)
{
delete
gTestTransports
[
this
.
port
]
;
}
onPacketReceived
(
socket
message
)
{
const
object
=
JSON
.
parse
(
message
)
;
object
.
from
=
"
localhost
"
;
log
(
"
Recv
on
"
+
this
.
port
+
"
:
\
n
"
+
JSON
.
stringify
(
object
null
2
)
)
;
this
.
emit
(
"
message
"
object
)
;
}
onStopListening
(
)
{
}
}
;
discovery
.
_factories
.
Transport
=
TestTransport
;
Object
.
defineProperty
(
discovery
.
device
"
name
"
{
get
(
)
{
return
"
test
-
device
"
;
}
}
)
;
add_task
(
async
function
(
)
{
deepEqual
(
discovery
.
getRemoteDevicesWithService
(
"
devtools
"
)
[
]
)
;
deepEqual
(
discovery
.
getRemoteDevicesWithService
(
"
penguins
"
)
[
]
)
;
discovery
.
scan
(
)
;
deepEqual
(
discovery
.
getRemoteDevicesWithService
(
"
devtools
"
)
[
]
)
;
deepEqual
(
discovery
.
getRemoteDevicesWithService
(
"
penguins
"
)
[
]
)
;
discovery
.
addService
(
"
devtools
"
{
port
:
1234
}
)
;
deepEqual
(
discovery
.
getRemoteDevicesWithService
(
"
devtools
"
)
[
]
)
;
deepEqual
(
discovery
.
getRemoteDevicesWithService
(
"
penguins
"
)
[
]
)
;
await
scanForChange
(
"
devtools
"
"
added
"
)
;
deepEqual
(
discovery
.
getRemoteDevicesWithService
(
"
devtools
"
)
[
"
test
-
device
"
]
)
;
deepEqual
(
discovery
.
getRemoteDevicesWithService
(
"
penguins
"
)
[
]
)
;
discovery
.
addService
(
"
penguins
"
{
tux
:
true
}
)
;
await
scanForChange
(
"
penguins
"
"
added
"
)
;
deepEqual
(
discovery
.
getRemoteDevicesWithService
(
"
devtools
"
)
[
"
test
-
device
"
]
)
;
deepEqual
(
discovery
.
getRemoteDevicesWithService
(
"
penguins
"
)
[
"
test
-
device
"
]
)
;
deepEqual
(
discovery
.
getRemoteDevices
(
)
[
"
test
-
device
"
]
)
;
deepEqual
(
discovery
.
getRemoteService
(
"
devtools
"
"
test
-
device
"
)
{
port
:
1234
host
:
"
localhost
"
}
)
;
deepEqual
(
discovery
.
getRemoteService
(
"
penguins
"
"
test
-
device
"
)
{
tux
:
true
host
:
"
localhost
"
}
)
;
discovery
.
removeService
(
"
devtools
"
)
;
await
scanForChange
(
"
devtools
"
"
removed
"
)
;
discovery
.
addService
(
"
penguins
"
{
tux
:
false
}
)
;
await
scanForChange
(
"
penguins
"
"
updated
"
)
;
await
scanForNoChange
(
"
penguins
"
"
removed
"
)
;
gTestTransports
=
{
}
;
discovery
.
removeService
(
"
penguins
"
)
;
await
scanForChange
(
"
penguins
"
"
removed
"
)
;
}
)
;
function
scanForChange
(
service
changeType
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
timer
=
setTimeout
(
(
)
=
>
{
reject
(
new
Error
(
"
Reply
never
arrived
"
)
)
;
}
discovery
.
replyTimeout
+
500
)
;
discovery
.
on
(
service
+
"
-
device
-
"
+
changeType
function
onChange
(
)
{
discovery
.
off
(
service
+
"
-
device
-
"
+
changeType
onChange
)
;
clearTimeout
(
timer
)
;
resolve
(
)
;
}
)
;
discovery
.
scan
(
)
;
}
)
;
}
function
scanForNoChange
(
service
changeType
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
timer
=
setTimeout
(
(
)
=
>
{
resolve
(
)
;
}
discovery
.
replyTimeout
+
500
)
;
discovery
.
on
(
service
+
"
-
device
-
"
+
changeType
function
onChange
(
)
{
discovery
.
off
(
service
+
"
-
device
-
"
+
changeType
onChange
)
;
clearTimeout
(
timer
)
;
reject
(
new
Error
(
"
Unexpected
change
occurred
"
)
)
;
}
)
;
discovery
.
scan
(
)
;
}
)
;
}
