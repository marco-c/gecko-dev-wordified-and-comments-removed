"
use
strict
"
;
const
MAX_DATA_URL_LENGTH
=
40
;
loader
.
lazyRequireGetter
(
this
"
getCSSLexer
"
"
resource
:
/
/
devtools
/
shared
/
css
/
lexer
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getTabPrefs
"
"
resource
:
/
/
devtools
/
shared
/
indentation
.
js
"
true
)
;
const
{
LocalizationHelper
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
l10n
.
js
"
)
;
const
styleInspectorL10N
=
new
LocalizationHelper
(
"
devtools
/
shared
/
locales
/
styleinspector
.
properties
"
)
;
exports
.
FILTER
=
{
USER
:
"
user
"
UA
:
"
ua
"
}
;
exports
.
STATUS
=
{
BEST
:
3
MATCHED
:
2
PARENT_MATCH
:
1
UNMATCHED
:
0
UNKNOWN
:
-
1
}
;
exports
.
CSSAtRuleClassNameType
=
{
CSSCounterStyleRule
:
"
counter
-
style
"
CSSDocumentRule
:
"
document
"
CSSFontFaceRule
:
"
font
-
face
"
CSSFontFeatureValuesRule
:
"
font
-
feature
-
values
"
CSSImportRule
:
"
import
"
CSSKeyframeRule
:
"
keyframe
"
CSSKeyframesRule
:
"
keyframes
"
CSSMediaRule
:
"
media
"
CSSNamespaceRule
:
"
namespace
"
CSSPageRule
:
"
page
"
CSSSupportsRule
:
"
supports
"
}
;
exports
.
getCSSAtRuleTypeName
=
function
(
cssRule
)
{
const
ruleClassName
=
ChromeUtils
.
getClassName
(
cssRule
)
;
const
atRuleTypeName
=
exports
.
CSSAtRuleClassNameType
[
ruleClassName
]
;
if
(
atRuleTypeName
)
{
return
"
"
+
atRuleTypeName
;
}
return
"
"
;
}
;
exports
.
l10n
=
name
=
>
styleInspectorL10N
.
getStr
(
name
)
;
exports
.
isAuthorStylesheet
=
function
(
sheet
)
{
return
sheet
.
parsingMode
=
=
=
"
author
"
;
}
;
exports
.
isUserStylesheet
=
function
(
sheet
)
{
return
sheet
.
parsingMode
=
=
=
"
user
"
;
}
;
exports
.
isAgentStylesheet
=
function
(
sheet
)
{
return
sheet
.
parsingMode
=
=
=
"
agent
"
;
}
;
exports
.
shortSource
=
function
(
sheet
)
{
if
(
!
sheet
)
{
return
exports
.
l10n
(
"
rule
.
sourceInline
"
)
;
}
if
(
!
sheet
.
href
)
{
return
exports
.
l10n
(
sheet
.
constructed
?
"
rule
.
sourceConstructed
"
:
"
rule
.
sourceInline
"
)
;
}
const
dataUrl
=
sheet
.
href
.
trim
(
)
.
match
(
/
^
data
:
.
*
?
(
(
?
:
.
|
\
r
|
\
n
)
*
)
/
)
;
if
(
dataUrl
)
{
return
dataUrl
[
1
]
.
length
>
MAX_DATA_URL_LENGTH
?
{
dataUrl
[
1
]
.
substr
(
0
MAX_DATA_URL_LENGTH
-
1
)
}
:
dataUrl
[
1
]
;
}
let
url
=
{
}
;
try
{
url
=
new
URL
(
sheet
.
href
)
;
}
catch
(
ex
)
{
}
if
(
url
.
pathname
)
{
const
index
=
url
.
pathname
.
lastIndexOf
(
"
/
"
)
;
if
(
index
!
=
=
-
1
&
&
index
<
url
.
pathname
.
length
)
{
return
url
.
pathname
.
slice
(
index
+
1
)
;
}
return
url
.
pathname
;
}
if
(
url
.
query
)
{
return
url
.
query
;
}
return
sheet
.
href
;
}
;
const
TAB_CHARS
=
"
\
t
"
;
const
SPACE_CHARS
=
"
"
;
function
getLineCountInComments
(
text
)
{
let
count
=
0
;
for
(
const
comment
of
text
.
match
(
/
\
/
\
*
(
?
:
.
|
\
n
)
*
?
\
*
\
/
/
gm
)
|
|
[
]
)
{
count
+
=
comment
.
split
(
"
\
n
"
)
.
length
+
1
;
}
return
count
;
}
function
prettifyCSS
(
text
ruleCount
)
{
if
(
prettifyCSS
.
LINE_SEPARATOR
=
=
null
)
{
const
os
=
Services
.
appinfo
.
OS
;
prettifyCSS
.
LINE_SEPARATOR
=
os
=
=
=
"
WINNT
"
?
"
\
r
\
n
"
:
"
\
n
"
;
}
const
trimmed
=
text
.
trim
(
)
;
if
(
trimmed
.
startsWith
(
"
<
!
-
-
"
)
)
{
text
=
trimmed
.
replace
(
/
^
<
!
-
-
/
"
"
)
.
replace
(
/
-
-
>
/
"
"
)
.
trim
(
)
;
}
const
originalText
=
text
;
text
=
text
.
trim
(
)
;
const
lineCount
=
text
.
split
(
"
\
n
"
)
.
length
-
1
-
getLineCountInComments
(
text
)
;
if
(
ruleCount
!
=
=
null
&
&
lineCount
>
=
ruleCount
)
{
return
{
result
:
originalText
mappings
:
[
]
}
;
}
let
indent
=
"
"
;
let
indentLevel
=
0
;
const
tokens
=
getCSSLexer
(
text
)
;
const
mappings
=
[
]
;
let
lineOffset
=
0
;
let
columnOffset
=
0
;
let
indentOffset
=
0
;
let
result
=
"
"
;
let
pushbackToken
=
undefined
;
const
readUntilSignificantToken
=
(
)
=
>
{
while
(
true
)
{
const
token
=
tokens
.
nextToken
(
)
;
if
(
!
token
|
|
token
.
tokenType
!
=
=
"
whitespace
"
)
{
pushbackToken
=
token
;
return
token
;
}
const
nextToken
=
tokens
.
nextToken
(
)
;
if
(
!
nextToken
|
|
nextToken
.
tokenType
!
=
=
"
comment
"
)
{
pushbackToken
=
nextToken
;
return
token
;
}
result
=
result
+
text
.
substring
(
token
.
startOffset
nextToken
.
endOffset
)
;
}
}
;
let
startIndex
;
let
endIndex
;
let
anyNonWS
;
let
isCloseBrace
;
let
lastWasWS
;
let
isInSelector
=
true
;
let
isInAtRuleDefinition
=
false
;
const
readUntilNewlineNeeded
=
(
)
=
>
{
let
token
;
while
(
true
)
{
if
(
pushbackToken
)
{
token
=
pushbackToken
;
pushbackToken
=
undefined
;
}
else
{
token
=
tokens
.
nextToken
(
)
;
}
if
(
!
token
)
{
endIndex
=
text
.
length
;
break
;
}
const
line
=
tokens
.
lineNumber
;
const
column
=
tokens
.
columnNumber
;
mappings
.
push
(
{
original
:
{
line
column
}
generated
:
{
line
:
lineOffset
+
line
column
:
columnOffset
}
}
)
;
columnOffset
+
=
token
.
endOffset
-
token
.
startOffset
;
if
(
token
.
tokenType
=
=
=
"
at
"
)
{
isInAtRuleDefinition
=
true
;
}
if
(
token
.
tokenType
=
=
=
"
symbol
"
&
&
token
.
text
=
=
=
"
}
"
)
{
isInSelector
=
true
;
isCloseBrace
=
true
;
break
;
}
else
if
(
token
.
tokenType
=
=
=
"
symbol
"
&
&
token
.
text
=
=
=
"
{
"
)
{
if
(
isInAtRuleDefinition
)
{
isInAtRuleDefinition
=
false
;
}
else
{
isInSelector
=
false
;
}
break
;
}
if
(
token
.
tokenType
!
=
=
"
whitespace
"
)
{
anyNonWS
=
true
;
}
if
(
startIndex
=
=
=
undefined
)
{
startIndex
=
token
.
startOffset
;
}
endIndex
=
token
.
endOffset
;
if
(
token
.
tokenType
=
=
=
"
symbol
"
&
&
token
.
text
=
=
=
"
;
"
)
{
break
;
}
if
(
token
.
tokenType
=
=
=
"
symbol
"
&
&
token
.
text
=
=
=
"
"
&
&
isInSelector
&
&
!
isInAtRuleDefinition
)
{
break
;
}
lastWasWS
=
token
.
tokenType
=
=
=
"
whitespace
"
;
}
return
token
;
}
;
while
(
true
)
{
startIndex
=
undefined
;
endIndex
=
undefined
;
anyNonWS
=
false
;
isCloseBrace
=
false
;
lastWasWS
=
false
;
let
token
=
readUntilNewlineNeeded
(
)
;
if
(
startIndex
!
=
=
undefined
)
{
if
(
isCloseBrace
&
&
!
anyNonWS
)
{
}
else
{
result
=
result
+
indent
+
text
.
substring
(
startIndex
endIndex
)
;
if
(
isCloseBrace
)
{
result
+
=
prettifyCSS
.
LINE_SEPARATOR
;
lineOffset
=
lineOffset
+
1
;
}
}
}
const
tabPrefs
=
getTabPrefs
(
)
;
if
(
isCloseBrace
)
{
indentLevel
=
Math
.
max
(
0
indentLevel
-
1
)
;
if
(
tabPrefs
.
indentWithTabs
)
{
indent
=
TAB_CHARS
.
repeat
(
indentLevel
)
;
indentOffset
=
4
*
indentLevel
;
}
else
{
indent
=
SPACE_CHARS
.
repeat
(
indentLevel
)
;
indentOffset
=
1
*
indentLevel
;
}
result
=
result
+
indent
+
"
}
"
;
}
if
(
!
token
)
{
break
;
}
if
(
token
.
tokenType
=
=
=
"
symbol
"
&
&
token
.
text
=
=
=
"
{
"
)
{
if
(
!
lastWasWS
)
{
result
+
=
"
"
;
columnOffset
+
+
;
}
result
+
=
"
{
"
;
if
(
tabPrefs
.
indentWithTabs
)
{
indent
=
TAB_CHARS
.
repeat
(
+
+
indentLevel
)
;
indentOffset
=
4
*
indentLevel
;
}
else
{
indent
=
SPACE_CHARS
.
repeat
(
+
+
indentLevel
)
;
indentOffset
=
1
*
indentLevel
;
}
}
token
=
readUntilSignificantToken
(
)
;
if
(
pushbackToken
&
&
token
&
&
token
.
tokenType
=
=
=
"
whitespace
"
&
&
/
\
n
/
g
.
test
(
text
.
substring
(
token
.
startOffset
token
.
endOffset
)
)
)
{
return
{
result
:
originalText
mappings
:
[
]
}
;
}
result
=
result
+
prettifyCSS
.
LINE_SEPARATOR
;
lineOffset
=
lineOffset
+
1
;
columnOffset
=
0
+
indentOffset
;
if
(
!
pushbackToken
)
{
break
;
}
}
return
{
result
mappings
}
;
}
exports
.
prettifyCSS
=
prettifyCSS
;
function
getBindingElementAndPseudo
(
node
)
{
let
bindingElement
=
node
;
let
pseudo
=
null
;
if
(
node
.
nodeName
=
=
"
_moz_generated_content_marker
"
)
{
bindingElement
=
node
.
parentNode
;
pseudo
=
"
:
:
marker
"
;
}
else
if
(
node
.
nodeName
=
=
"
_moz_generated_content_before
"
)
{
bindingElement
=
node
.
parentNode
;
pseudo
=
"
:
:
before
"
;
}
else
if
(
node
.
nodeName
=
=
"
_moz_generated_content_after
"
)
{
bindingElement
=
node
.
parentNode
;
pseudo
=
"
:
:
after
"
;
}
return
{
bindingElement
pseudo
}
;
}
exports
.
getBindingElementAndPseudo
=
getBindingElementAndPseudo
;
function
getCSSStyleRules
(
node
)
{
const
{
bindingElement
pseudo
}
=
getBindingElementAndPseudo
(
node
)
;
const
rules
=
InspectorUtils
.
getCSSStyleRules
(
bindingElement
pseudo
)
;
return
rules
;
}
exports
.
getCSSStyleRules
=
getCSSStyleRules
;
function
hasVisitedState
(
node
)
{
if
(
!
node
)
{
return
false
;
}
const
ELEMENT_STATE_VISITED
=
1
<
<
19
;
return
(
!
!
(
InspectorUtils
.
getContentState
(
node
)
&
ELEMENT_STATE_VISITED
)
|
|
InspectorUtils
.
hasPseudoClassLock
(
node
"
:
visited
"
)
)
;
}
exports
.
hasVisitedState
=
hasVisitedState
;
function
positionInNodeList
(
element
nodeList
)
{
for
(
let
i
=
0
;
i
<
nodeList
.
length
;
i
+
+
)
{
if
(
element
=
=
=
nodeList
[
i
]
)
{
return
i
;
}
}
return
-
1
;
}
function
findNodeAndContainer
(
node
)
{
const
shadowRoot
=
node
.
containingShadowRoot
;
while
(
node
?
.
isNativeAnonymous
)
{
node
=
node
.
parentNode
;
}
if
(
shadowRoot
)
{
return
{
containingDocOrShadow
:
shadowRoot
node
}
;
}
return
{
containingDocOrShadow
:
node
.
ownerDocument
node
}
;
}
const
findCssSelector
=
function
(
ele
)
{
const
{
node
containingDocOrShadow
}
=
findNodeAndContainer
(
ele
)
;
ele
=
node
;
if
(
!
containingDocOrShadow
|
|
!
containingDocOrShadow
.
contains
(
ele
)
)
{
return
"
"
;
}
const
cssEscape
=
ele
.
ownerGlobal
.
CSS
.
escape
;
if
(
ele
.
id
&
&
containingDocOrShadow
.
querySelectorAll
(
"
#
"
+
cssEscape
(
ele
.
id
)
)
.
length
=
=
=
1
)
{
return
"
#
"
+
cssEscape
(
ele
.
id
)
;
}
const
tagName
=
ele
.
localName
;
if
(
tagName
=
=
=
"
html
"
)
{
return
"
html
"
;
}
if
(
tagName
=
=
=
"
head
"
)
{
return
"
head
"
;
}
if
(
tagName
=
=
=
"
body
"
)
{
return
"
body
"
;
}
let
selector
index
matches
;
for
(
let
i
=
0
;
i
<
ele
.
classList
.
length
;
i
+
+
)
{
selector
=
"
.
"
+
cssEscape
(
ele
.
classList
.
item
(
i
)
)
;
matches
=
containingDocOrShadow
.
querySelectorAll
(
selector
)
;
if
(
matches
.
length
=
=
=
1
)
{
return
selector
;
}
selector
=
cssEscape
(
tagName
)
+
selector
;
matches
=
containingDocOrShadow
.
querySelectorAll
(
selector
)
;
if
(
matches
.
length
=
=
=
1
)
{
return
selector
;
}
index
=
positionInNodeList
(
ele
ele
.
parentNode
.
children
)
+
1
;
selector
=
selector
+
"
:
nth
-
child
(
"
+
index
+
"
)
"
;
matches
=
containingDocOrShadow
.
querySelectorAll
(
selector
)
;
if
(
matches
.
length
=
=
=
1
)
{
return
selector
;
}
}
index
=
positionInNodeList
(
ele
ele
.
parentNode
.
children
)
+
1
;
selector
=
cssEscape
(
tagName
)
+
"
:
nth
-
child
(
"
+
index
+
"
)
"
;
if
(
ele
.
parentNode
!
=
=
containingDocOrShadow
)
{
selector
=
findCssSelector
(
ele
.
parentNode
)
+
"
>
"
+
selector
;
}
return
selector
;
}
;
exports
.
findCssSelector
=
findCssSelector
;
function
getCssPath
(
ele
)
{
const
{
node
containingDocOrShadow
}
=
findNodeAndContainer
(
ele
)
;
ele
=
node
;
if
(
!
containingDocOrShadow
|
|
!
containingDocOrShadow
.
contains
(
ele
)
)
{
return
"
"
;
}
const
nodeGlobal
=
ele
.
ownerGlobal
.
Node
;
const
getElementSelector
=
element
=
>
{
if
(
!
element
.
localName
)
{
return
"
"
;
}
let
label
=
element
.
nodeName
=
=
element
.
nodeName
.
toUpperCase
(
)
?
element
.
localName
.
toLowerCase
(
)
:
element
.
localName
;
if
(
element
.
id
)
{
label
+
=
"
#
"
+
element
.
id
;
}
if
(
element
.
classList
)
{
for
(
const
cl
of
element
.
classList
)
{
label
+
=
"
.
"
+
cl
;
}
}
return
label
;
}
;
const
paths
=
[
]
;
while
(
ele
)
{
if
(
!
ele
|
|
ele
.
nodeType
!
=
=
nodeGlobal
.
ELEMENT_NODE
)
{
break
;
}
paths
.
splice
(
0
0
getElementSelector
(
ele
)
)
;
ele
=
ele
.
parentNode
;
}
return
paths
.
length
?
paths
.
join
(
"
"
)
:
"
"
;
}
exports
.
getCssPath
=
getCssPath
;
function
getXPath
(
ele
)
{
const
{
node
containingDocOrShadow
}
=
findNodeAndContainer
(
ele
)
;
ele
=
node
;
if
(
!
containingDocOrShadow
|
|
!
containingDocOrShadow
.
contains
(
ele
)
)
{
return
"
"
;
}
if
(
ele
.
id
)
{
return
/
/
*
[
id
=
"
{
ele
.
id
}
"
]
;
}
const
parts
=
[
]
;
const
nodeGlobal
=
ele
.
ownerGlobal
.
Node
;
while
(
ele
&
&
ele
.
nodeType
=
=
=
nodeGlobal
.
ELEMENT_NODE
)
{
let
nbOfPreviousSiblings
=
0
;
let
hasNextSiblings
=
false
;
let
sibling
=
ele
.
previousSibling
;
while
(
sibling
)
{
if
(
sibling
.
nodeType
!
=
=
nodeGlobal
.
DOCUMENT_TYPE_NODE
&
&
sibling
.
nodeName
=
=
ele
.
nodeName
)
{
nbOfPreviousSiblings
+
+
;
}
sibling
=
sibling
.
previousSibling
;
}
sibling
=
ele
.
nextSibling
;
while
(
sibling
)
{
if
(
sibling
.
nodeName
=
=
ele
.
nodeName
)
{
hasNextSiblings
=
true
;
break
;
}
sibling
=
sibling
.
nextSibling
;
}
const
prefix
=
ele
.
prefix
?
ele
.
prefix
+
"
:
"
:
"
"
;
const
nth
=
nbOfPreviousSiblings
|
|
hasNextSiblings
?
[
{
nbOfPreviousSiblings
+
1
}
]
:
"
"
;
parts
.
push
(
prefix
+
ele
.
localName
+
nth
)
;
ele
=
ele
.
parentNode
;
}
return
parts
.
length
?
"
/
"
+
parts
.
reverse
(
)
.
join
(
"
/
"
)
:
"
"
;
}
exports
.
getXPath
=
getXPath
;
