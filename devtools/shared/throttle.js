"
use
strict
"
;
function
throttle
(
func
wait
scope
)
{
let
args
result
;
let
timeout
=
null
;
let
previous
=
0
;
let
later
=
function
(
)
{
previous
=
Date
.
now
(
)
;
timeout
=
null
;
result
=
func
.
apply
(
scope
args
)
;
args
=
null
;
}
;
return
function
(
)
{
let
now
=
Date
.
now
(
)
;
let
remaining
=
wait
-
(
now
-
previous
)
;
args
=
arguments
;
if
(
remaining
<
=
0
)
{
clearTimeout
(
timeout
)
;
timeout
=
null
;
previous
=
now
;
result
=
func
.
apply
(
scope
args
)
;
args
=
null
;
}
else
if
(
!
timeout
)
{
timeout
=
setTimeout
(
later
remaining
)
;
}
return
result
;
}
;
}
exports
.
throttle
=
throttle
;
