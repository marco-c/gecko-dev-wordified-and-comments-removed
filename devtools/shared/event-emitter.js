"
use
strict
"
;
const
BAD_LISTENER
=
"
The
event
listener
must
be
a
function
.
"
;
const
eventListeners
=
Symbol
(
"
EventEmitter
/
listeners
"
)
;
const
onceResolvers
=
Symbol
(
"
EventEmitter
/
once
-
resolvers
"
)
;
loader
.
lazyRequireGetter
(
this
"
flags
"
"
resource
:
/
/
devtools
/
shared
/
flags
.
js
"
)
;
class
EventEmitter
{
static
decorate
(
target
)
{
const
descriptors
=
Object
.
getOwnPropertyDescriptors
(
this
.
prototype
)
;
delete
descriptors
.
constructor
;
return
Object
.
defineProperties
(
target
descriptors
)
;
}
on
(
type
listener
{
signal
}
=
{
}
)
{
if
(
typeof
listener
!
=
=
"
function
"
)
{
throw
new
Error
(
BAD_LISTENER
)
;
}
if
(
signal
?
.
aborted
=
=
=
true
)
{
return
(
)
=
>
{
}
;
}
if
(
!
(
eventListeners
in
this
)
)
{
this
[
eventListeners
]
=
new
Map
(
)
;
}
const
events
=
this
[
eventListeners
]
;
if
(
events
.
has
(
type
)
)
{
events
.
get
(
type
)
.
add
(
listener
)
;
}
else
{
events
.
set
(
type
new
Set
(
[
listener
]
)
)
;
}
const
offFn
=
(
)
=
>
this
.
off
(
type
listener
)
;
if
(
signal
)
{
signal
.
addEventListener
(
"
abort
"
offFn
{
once
:
true
}
)
;
}
return
offFn
;
}
off
(
type
listener
)
{
const
length
=
arguments
.
length
;
const
events
=
this
[
eventListeners
]
;
if
(
!
events
)
{
return
;
}
if
(
length
>
=
2
)
{
const
listenersForType
=
events
.
get
(
type
)
;
if
(
!
listenersForType
)
{
return
;
}
if
(
listenersForType
.
has
(
listener
)
)
{
listenersForType
.
delete
(
listener
)
;
delete
listener
[
onceResolvers
]
;
}
}
else
if
(
length
=
=
=
1
)
{
if
(
events
.
has
(
type
)
)
{
events
.
delete
(
type
)
;
}
}
else
if
(
length
=
=
=
0
)
{
events
.
clear
(
)
;
}
}
clearEvents
(
)
{
const
events
=
this
[
eventListeners
]
;
if
(
!
events
)
{
return
;
}
events
.
clear
(
)
;
}
once
(
type
listener
=
function
(
)
{
}
options
)
{
const
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
if
(
!
listener
[
onceResolvers
]
)
{
listener
[
onceResolvers
]
=
[
]
;
}
listener
[
onceResolvers
]
.
push
(
resolve
)
;
this
.
on
(
type
listener
options
)
;
return
promise
;
}
emit
(
type
.
.
.
rest
)
{
this
.
_emit
(
type
false
rest
)
;
}
emitAsync
(
type
.
.
.
rest
)
{
return
this
.
_emit
(
type
true
rest
)
;
}
emitForTests
(
type
.
.
.
rest
)
{
if
(
flags
.
testing
)
{
this
.
emit
(
type
.
.
.
rest
)
;
}
}
_emit
(
type
async
args
)
{
if
(
loggingEnabled
)
{
logEvent
(
type
args
)
;
}
const
targetEventListeners
=
this
[
eventListeners
]
;
if
(
!
targetEventListeners
)
{
return
undefined
;
}
const
listeners
=
targetEventListeners
.
get
(
type
)
;
if
(
!
listeners
?
.
size
)
{
return
undefined
;
}
const
promises
=
async
?
[
]
:
null
;
for
(
const
listener
of
new
Set
(
listeners
)
)
{
if
(
!
(
eventListeners
in
this
)
)
{
break
;
}
if
(
listeners
&
&
listeners
.
has
(
listener
)
)
{
try
{
const
resolvers
=
listener
[
onceResolvers
]
;
if
(
resolvers
)
{
this
.
off
(
type
listener
)
;
}
const
promise
=
listener
.
apply
(
this
args
)
;
if
(
resolvers
)
{
for
(
const
resolver
of
resolvers
)
{
resolver
(
args
[
0
]
)
;
}
}
if
(
async
)
{
if
(
!
promise
|
|
promise
.
constructor
.
name
!
=
"
Promise
"
)
{
console
.
warn
(
Listener
for
event
'
{
type
}
'
did
not
return
a
promise
.
)
;
}
else
{
promises
.
push
(
promise
)
;
}
}
}
catch
(
ex
)
{
console
.
error
(
ex
)
;
const
msg
=
ex
+
"
:
"
+
ex
.
stack
;
dump
(
msg
+
"
\
n
"
)
;
}
}
}
if
(
async
)
{
return
Promise
.
all
(
promises
)
;
}
return
undefined
;
}
count
(
type
)
{
if
(
eventListeners
in
this
)
{
const
listenersForType
=
this
[
eventListeners
]
.
get
(
type
)
;
if
(
listenersForType
)
{
return
listenersForType
.
size
;
}
}
return
0
;
}
}
module
.
exports
=
EventEmitter
;
const
{
getNthPathExcluding
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
platform
/
stack
.
js
"
)
;
let
loggingEnabled
=
false
;
if
(
!
isWorker
)
{
loggingEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
dump
.
emit
"
false
)
;
const
observer
=
{
observe
:
(
)
=
>
{
loggingEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
dump
.
emit
"
)
;
}
}
;
Services
.
prefs
.
addObserver
(
"
devtools
.
dump
.
emit
"
observer
)
;
const
unloadObserver
=
function
(
subject
)
{
if
(
subject
.
wrappedJSObject
=
=
require
(
"
loader
/
unload
"
)
)
{
Services
.
prefs
.
removeObserver
(
"
devtools
.
dump
.
emit
"
observer
)
;
Services
.
obs
.
removeObserver
(
unloadObserver
"
devtools
:
loader
:
destroy
"
)
;
}
}
;
Services
.
obs
.
addObserver
(
unloadObserver
"
devtools
:
loader
:
destroy
"
)
;
}
function
serialize
(
target
)
{
const
MAXLEN
=
60
;
if
(
typeof
target
=
=
=
"
undefined
"
)
{
return
"
undefined
"
;
}
if
(
target
=
=
=
null
)
{
return
"
null
"
;
}
if
(
typeof
target
=
=
=
"
string
"
|
|
typeof
target
=
=
=
"
number
"
)
{
return
truncate
(
target
MAXLEN
)
;
}
if
(
target
.
nodeName
)
{
let
out
=
target
.
nodeName
;
if
(
target
.
id
)
{
out
+
=
"
#
"
+
target
.
id
;
}
if
(
target
.
className
)
{
out
+
=
"
.
"
+
target
.
className
;
}
return
out
;
}
if
(
Array
.
isArray
(
target
)
)
{
return
truncate
(
target
.
toSource
(
)
MAXLEN
)
;
}
if
(
typeof
target
=
=
=
"
function
"
)
{
return
function
{
target
.
name
?
target
.
name
:
"
anonymous
"
}
(
)
;
}
if
(
target
?
.
constructor
?
.
name
=
=
=
"
Window
"
)
{
return
window
(
{
target
.
location
.
origin
}
)
;
}
if
(
typeof
target
=
=
=
"
object
"
)
{
let
out
=
"
{
"
;
const
entries
=
Object
.
entries
(
target
)
;
for
(
let
i
=
0
;
i
<
Math
.
min
(
10
entries
.
length
)
;
i
+
+
)
{
const
[
name
value
]
=
entries
[
i
]
;
if
(
i
>
0
)
{
out
+
=
"
"
;
}
out
+
=
{
name
}
:
{
truncate
(
value
MAXLEN
)
}
;
}
return
out
+
"
}
"
;
}
return
truncate
(
target
.
toSource
(
)
MAXLEN
)
;
}
function
truncate
(
value
maxLen
)
{
const
str
=
String
(
value
)
;
return
str
.
length
>
maxLen
?
str
.
substring
(
0
maxLen
)
+
"
.
.
.
"
:
str
;
}
function
logEvent
(
type
args
)
{
let
argsOut
=
"
"
;
try
{
argsOut
=
{
args
.
map
(
serialize
)
.
join
(
"
"
)
}
;
}
catch
(
e
)
{
}
const
path
=
getNthPathExcluding
(
0
"
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
if
(
args
.
length
)
{
dump
(
EMITTING
:
emit
(
{
type
}
{
argsOut
}
)
from
{
path
}
\
n
)
;
}
else
{
dump
(
EMITTING
:
emit
(
{
type
}
)
from
{
path
}
\
n
)
;
}
}
