"
use
strict
"
;
function
requireLazy
(
callback
)
{
let
cache
;
return
(
)
=
>
{
if
(
cache
=
=
=
undefined
)
{
cache
=
callback
(
)
;
}
return
cache
;
}
;
}
const
lazyServices
=
requireLazy
(
(
)
=
>
require
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
)
;
function
getActiveBrowsingContextID
(
)
{
const
{
Services
}
=
lazyServices
(
)
;
const
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
win
&
&
win
.
gBrowser
&
&
win
.
gBrowser
.
selectedBrowser
&
&
win
.
gBrowser
.
selectedBrowser
.
browsingContext
&
&
win
.
gBrowser
.
selectedBrowser
.
browsingContext
.
id
)
{
return
win
.
gBrowser
.
selectedBrowser
.
browsingContext
.
id
;
}
console
.
error
(
"
Failed
to
get
the
active
BrowsingContext
ID
while
starting
the
profiler
.
"
)
;
return
0
;
}
const
presets
=
{
"
web
-
developer
"
:
{
label
:
"
Web
Developer
"
description
:
"
Recommended
preset
for
most
web
app
debuggging
with
low
overhead
.
"
entries
:
10000000
interval
:
1
features
:
[
"
js
"
]
threads
:
[
"
GeckoMain
"
"
Compositor
"
"
Renderer
"
"
DOM
Worker
"
]
duration
:
0
}
"
firefox
-
platform
"
:
{
label
:
"
Firefox
Platform
"
description
:
"
Recommended
preset
for
internal
Firefox
platform
debugging
.
"
entries
:
10000000
interval
:
1
features
:
[
"
js
"
"
leaf
"
"
stackwalk
"
]
threads
:
[
"
GeckoMain
"
"
Compositor
"
"
Renderer
"
]
duration
:
0
}
"
firefox
-
front
-
end
"
:
{
label
:
"
Firefox
Front
-
End
"
description
:
"
Recommended
preset
for
internal
Firefox
front
-
end
debugging
.
"
entries
:
10000000
interval
:
1
features
:
[
"
js
"
"
leaf
"
"
stackwalk
"
]
threads
:
[
"
GeckoMain
"
"
Compositor
"
"
Renderer
"
"
DOM
Worker
"
]
duration
:
0
}
}
;
module
.
exports
=
{
getActiveBrowsingContextID
presets
}
;
