"
use
strict
"
;
const
{
Cu
Cc
Ci
}
=
require
(
"
chrome
"
)
;
const
promise
=
require
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
.
Promise
;
const
jsmScope
=
require
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
Services
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
const
{
console
DOMPoint
DOMQuad
DOMRect
HeapSnapshot
NamedNodeMap
NodeFilter
StructuredCloneHolder
TelemetryStopwatch
}
=
Cu
.
getGlobalForObject
(
jsmScope
)
;
const
debuggerSandbox
=
Cu
.
Sandbox
(
systemPrincipal
{
invisibleToDebugger
:
true
wantGlobalProperties
:
[
"
atob
"
"
btoa
"
"
Blob
"
"
ChromeUtils
"
"
CSS
"
"
CSSRule
"
"
DOMParser
"
"
Element
"
"
Event
"
"
FileReader
"
"
FormData
"
"
indexedDB
"
"
InspectorUtils
"
"
Node
"
"
TextDecoder
"
"
TextEncoder
"
"
URL
"
"
XMLHttpRequest
"
]
}
)
;
const
{
atob
btoa
Blob
ChromeUtils
CSS
CSSRule
DOMParser
Element
Event
FileReader
FormData
indexedDB
InspectorUtils
Node
TextDecoder
TextEncoder
URL
XMLHttpRequest
}
=
debuggerSandbox
;
function
defineLazyGetter
(
object
name
lambda
)
{
Object
.
defineProperty
(
object
name
{
get
:
function
(
)
{
delete
object
[
name
]
;
const
value
=
lambda
.
apply
(
object
)
;
Object
.
defineProperty
(
object
name
{
value
writable
:
true
configurable
:
true
enumerable
:
true
}
)
;
return
value
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
function
defineLazyServiceGetter
(
object
name
contract
interfaceName
)
{
defineLazyGetter
(
object
name
function
(
)
{
return
Cc
[
contract
]
.
getService
(
Ci
[
interfaceName
]
)
;
}
)
;
}
function
defineLazyModuleGetter
(
object
name
resource
symbol
preLambda
postLambda
proxy
)
{
proxy
=
proxy
|
|
{
}
;
if
(
typeof
(
preLambda
)
=
=
=
"
function
"
)
{
preLambda
.
apply
(
proxy
)
;
}
defineLazyGetter
(
object
name
function
(
)
{
const
temp
=
{
}
;
try
{
ChromeUtils
.
import
(
resource
temp
)
;
if
(
typeof
(
postLambda
)
=
=
=
"
function
"
)
{
postLambda
.
apply
(
proxy
)
;
}
}
catch
(
ex
)
{
Cu
.
reportError
(
"
Failed
to
load
module
"
+
resource
+
"
.
"
)
;
throw
ex
;
}
return
temp
[
symbol
|
|
name
]
;
}
)
;
}
function
lazyRequireGetter
(
obj
property
module
destructure
)
{
Object
.
defineProperty
(
obj
property
{
get
:
(
)
=
>
{
delete
obj
[
property
]
;
const
value
=
destructure
?
require
(
module
)
[
property
]
:
require
(
module
|
|
property
)
;
Object
.
defineProperty
(
obj
property
{
value
writable
:
true
configurable
:
true
enumerable
:
true
}
)
;
return
value
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
exports
.
modules
=
{
ChromeUtils
HeapSnapshot
InspectorUtils
promise
Promise
Services
:
Object
.
create
(
Services
)
TelemetryStopwatch
}
;
defineLazyGetter
(
exports
.
modules
"
Debugger
"
(
)
=
>
{
const
global
=
Cu
.
getGlobalForObject
(
this
)
;
if
(
global
.
Debugger
)
{
return
global
.
Debugger
;
}
const
{
addDebuggerToGlobal
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
"
)
;
addDebuggerToGlobal
(
global
)
;
return
global
.
Debugger
;
}
)
;
defineLazyGetter
(
exports
.
modules
"
ChromeDebugger
"
(
)
=
>
{
const
{
addDebuggerToGlobal
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
"
)
;
addDebuggerToGlobal
(
debuggerSandbox
)
;
return
debuggerSandbox
.
Debugger
;
}
)
;
defineLazyGetter
(
exports
.
modules
"
RecordReplayControl
"
(
)
=
>
{
const
global
=
Cu
.
getGlobalForObject
(
this
)
;
if
(
global
.
RecordReplayControl
)
{
return
global
.
RecordReplayControl
;
}
const
{
addDebuggerToGlobal
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
"
)
;
addDebuggerToGlobal
(
global
)
;
return
global
.
RecordReplayControl
;
}
)
;
defineLazyGetter
(
exports
.
modules
"
Timer
"
(
)
=
>
{
const
{
setTimeout
clearTimeout
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
return
{
setTimeout
clearTimeout
}
;
}
)
;
defineLazyGetter
(
exports
.
modules
"
xpcInspector
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
jsinspector
;
1
"
]
.
getService
(
Ci
.
nsIJSInspector
)
;
}
)
;
exports
.
globals
=
{
atob
Blob
btoa
console
CSS
CSSRule
define
(
factory
)
{
factory
(
this
.
require
this
.
exports
this
.
module
)
;
}
DOMParser
DOMPoint
DOMQuad
NamedNodeMap
NodeFilter
DOMRect
Element
Event
FileReader
FormData
isWorker
:
false
loader
:
{
lazyGetter
:
defineLazyGetter
lazyImporter
:
defineLazyModuleGetter
lazyServiceGetter
:
defineLazyServiceGetter
lazyRequireGetter
:
lazyRequireGetter
id
:
null
}
Node
reportError
:
Cu
.
reportError
StructuredCloneHolder
TextDecoder
TextEncoder
URL
XMLHttpRequest
}
;
const
globals
=
{
}
;
function
lazyGlobal
(
name
getter
)
{
defineLazyGetter
(
globals
name
getter
)
;
Object
.
defineProperty
(
exports
.
globals
name
{
get
:
function
(
)
{
return
globals
[
name
]
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
lazyGlobal
(
"
clearTimeout
"
(
)
=
>
{
return
require
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
.
clearTimeout
;
}
)
;
lazyGlobal
(
"
setTimeout
"
(
)
=
>
{
return
require
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
.
setTimeout
;
}
)
;
lazyGlobal
(
"
clearInterval
"
(
)
=
>
{
return
require
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
.
clearInterval
;
}
)
;
lazyGlobal
(
"
setInterval
"
(
)
=
>
{
return
require
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
.
setInterval
;
}
)
;
lazyGlobal
(
"
WebSocket
"
(
)
=
>
{
return
Services
.
appShell
.
hiddenDOMWindow
.
WebSocket
;
}
)
;
lazyGlobal
(
"
indexedDB
"
(
)
=
>
{
return
require
(
"
devtools
/
shared
/
indexed
-
db
"
)
.
createDevToolsIndexedDB
(
indexedDB
)
;
}
)
;
lazyGlobal
(
"
isReplaying
"
(
)
=
>
{
return
exports
.
modules
.
Debugger
.
recordReplayProcessKind
(
)
=
=
"
Middleman
"
;
}
)
;
