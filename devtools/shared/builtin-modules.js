"
use
strict
"
;
const
{
Cu
CC
Cc
Ci
}
=
require
(
"
chrome
"
)
;
const
{
Loader
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
commonjs
/
toolkit
/
loader
.
js
"
{
}
)
;
const
promise
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
{
}
)
.
Promise
;
const
jsmScope
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
const
{
Services
}
=
jsmScope
;
const
{
PromiseDebugging
ChromeUtils
ThreadSafeChromeUtils
HeapSnapshot
atob
btoa
Iterator
}
=
jsmScope
;
const
{
URL
}
=
Cu
.
Sandbox
(
CC
(
"
mozilla
.
org
/
systemprincipal
;
1
"
"
nsIPrincipal
"
)
(
)
{
wantGlobalProperties
:
[
"
URL
"
]
}
)
;
function
defineLazyGetter
(
aObject
aName
aLambda
)
{
Object
.
defineProperty
(
aObject
aName
{
get
:
function
(
)
{
delete
aObject
[
aName
]
;
let
value
=
aLambda
.
apply
(
aObject
)
;
Object
.
defineProperty
(
aObject
aName
{
value
writable
:
true
configurable
:
true
enumerable
:
true
}
)
;
return
value
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
function
defineLazyServiceGetter
(
aObject
aName
aContract
aInterfaceName
)
{
defineLazyGetter
(
aObject
aName
function
XPCU_serviceLambda
(
)
{
return
Cc
[
aContract
]
.
getService
(
Ci
[
aInterfaceName
]
)
;
}
)
;
}
function
defineLazyModuleGetter
(
aObject
aName
aResource
aSymbol
aPreLambda
aPostLambda
aProxy
)
{
let
proxy
=
aProxy
|
|
{
}
;
if
(
typeof
(
aPreLambda
)
=
=
=
"
function
"
)
{
aPreLambda
.
apply
(
proxy
)
;
}
defineLazyGetter
(
aObject
aName
function
XPCU_moduleLambda
(
)
{
var
temp
=
{
}
;
try
{
Cu
.
import
(
aResource
temp
)
;
if
(
typeof
(
aPostLambda
)
=
=
=
"
function
"
)
{
aPostLambda
.
apply
(
proxy
)
;
}
}
catch
(
ex
)
{
Cu
.
reportError
(
"
Failed
to
load
module
"
+
aResource
+
"
.
"
)
;
throw
ex
;
}
return
temp
[
aSymbol
|
|
aName
]
;
}
)
;
}
function
lazyRequireGetter
(
obj
property
module
destructure
)
{
Object
.
defineProperty
(
obj
property
{
get
:
(
)
=
>
{
delete
obj
[
property
]
;
let
value
=
destructure
?
require
(
module
)
[
property
]
:
require
(
module
|
|
property
)
;
Object
.
defineProperty
(
obj
property
{
value
writable
:
true
configurable
:
true
enumerable
:
true
}
)
;
return
value
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
exports
.
modules
=
{
"
Services
"
:
Object
.
create
(
Services
)
"
toolkit
/
loader
"
:
Loader
promise
PromiseDebugging
ChromeUtils
ThreadSafeChromeUtils
HeapSnapshot
}
;
defineLazyGetter
(
exports
.
modules
"
Debugger
"
(
)
=
>
{
let
sandbox
=
Cu
.
Sandbox
(
CC
(
"
mozilla
.
org
/
systemprincipal
;
1
"
"
nsIPrincipal
"
)
(
)
)
;
Cu
.
evalInSandbox
(
"
Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
'
)
;
"
+
"
addDebuggerToGlobal
(
this
)
;
"
sandbox
)
;
return
sandbox
.
Debugger
;
}
)
;
defineLazyGetter
(
exports
.
modules
"
Timer
"
(
)
=
>
{
let
{
setTimeout
clearTimeout
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
{
}
)
;
return
{
setTimeout
clearTimeout
}
;
}
)
;
defineLazyGetter
(
exports
.
modules
"
xpcInspector
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
jsinspector
;
1
"
]
.
getService
(
Ci
.
nsIJSInspector
)
;
}
)
;
defineLazyGetter
(
exports
.
modules
"
FileReader
"
(
)
=
>
{
let
sandbox
=
Cu
.
Sandbox
(
CC
(
"
mozilla
.
org
/
systemprincipal
;
1
"
"
nsIPrincipal
"
)
(
)
{
wantGlobalProperties
:
[
"
FileReader
"
]
}
)
;
return
sandbox
.
FileReader
;
}
)
;
exports
.
globals
=
{
isWorker
:
false
reportError
:
Cu
.
reportError
atob
:
atob
btoa
:
btoa
URL
loader
:
{
lazyGetter
:
defineLazyGetter
lazyImporter
:
defineLazyModuleGetter
lazyServiceGetter
:
defineLazyServiceGetter
lazyRequireGetter
:
lazyRequireGetter
id
:
null
}
XMLHttpRequest
:
function
(
)
{
return
Cc
[
"
mozilla
.
org
/
xmlextras
/
xmlhttprequest
;
1
"
]
.
createInstance
(
Ci
.
nsIXMLHttpRequest
)
;
}
Node
:
Ci
.
nsIDOMNode
Element
:
Ci
.
nsIDOMElement
DocumentFragment
:
Ci
.
nsIDOMDocumentFragment
define
(
factory
)
{
factory
(
this
.
require
this
.
exports
this
.
module
)
;
}
}
;
let
globals
=
{
}
;
function
lazyGlobal
(
name
getter
)
{
defineLazyGetter
(
globals
name
getter
)
;
Object
.
defineProperty
(
exports
.
globals
name
{
get
:
function
(
)
{
return
globals
[
name
]
;
}
configurable
:
true
enumerable
:
true
}
)
;
}
lazyGlobal
(
"
console
"
(
)
=
>
{
return
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
.
console
;
}
)
;
lazyGlobal
(
"
clearTimeout
"
(
)
=
>
{
return
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
{
}
)
.
clearTimeout
;
}
)
;
lazyGlobal
(
"
setTimeout
"
(
)
=
>
{
return
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
{
}
)
.
setTimeout
;
}
)
;
lazyGlobal
(
"
clearInterval
"
(
)
=
>
{
return
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
{
}
)
.
clearInterval
;
}
)
;
lazyGlobal
(
"
setInterval
"
(
)
=
>
{
return
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
{
}
)
.
setInterval
;
}
)
;
lazyGlobal
(
"
CSSRule
"
(
)
=
>
Ci
.
nsIDOMCSSRule
)
;
lazyGlobal
(
"
DOMParser
"
(
)
=
>
{
return
CC
(
"
mozilla
.
org
/
xmlextras
/
domparser
;
1
"
"
nsIDOMParser
"
)
;
}
)
;
lazyGlobal
(
"
CSS
"
(
)
=
>
{
let
sandbox
=
Cu
.
Sandbox
(
CC
(
"
mozilla
.
org
/
systemprincipal
;
1
"
"
nsIPrincipal
"
)
(
)
{
wantGlobalProperties
:
[
"
CSS
"
]
}
)
;
return
sandbox
.
CSS
;
}
)
;
lazyGlobal
(
"
WebSocket
"
(
)
=
>
{
return
Services
.
appShell
.
hiddenDOMWindow
.
WebSocket
;
}
)
;
lazyGlobal
(
"
indexedDB
"
(
)
=
>
{
return
require
(
"
sdk
/
indexed
-
db
"
)
.
indexedDB
;
}
)
;
