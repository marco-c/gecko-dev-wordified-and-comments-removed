"
use
strict
"
;
const
{
DevToolsShim
}
=
Components
.
utils
.
import
(
"
chrome
:
/
/
devtools
-
shim
/
content
/
DevToolsShim
.
jsm
"
{
}
)
;
function
createMockDevTools
(
)
{
let
methods
=
[
"
on
"
"
off
"
"
registerTool
"
"
registerTheme
"
"
unregisterTool
"
"
unregisterTheme
"
"
emit
"
"
saveDevToolsSession
"
"
restoreDevToolsSession
"
]
;
let
mock
=
{
callLog
:
{
}
}
;
for
(
let
method
of
methods
)
{
mock
[
method
]
=
function
(
.
.
.
args
)
{
mock
.
callLog
[
method
]
.
push
(
args
)
;
}
;
mock
.
callLog
[
method
]
=
[
]
;
}
return
mock
;
}
let
isInstalledMethodBackup
=
DevToolsShim
.
isInstalled
;
function
mockDevToolsInstalled
(
isInstalled
)
{
DevToolsShim
.
isInstalled
=
(
)
=
>
isInstalled
;
}
function
restoreDevToolsInstalled
(
)
{
DevToolsShim
.
isInstalled
=
isInstalledMethodBackup
;
}
function
checkCalls
(
mock
method
length
lastArgs
)
{
ok
(
mock
.
callLog
[
method
]
.
length
=
=
=
length
"
Devtools
.
on
was
called
the
expected
number
of
times
"
)
;
if
(
!
lastArgs
|
|
length
=
=
=
0
)
{
return
;
}
for
(
let
i
=
0
;
i
<
lastArgs
.
length
;
i
+
+
)
{
let
expectedArg
=
lastArgs
[
i
]
;
ok
(
mock
.
callLog
[
method
]
[
length
-
1
]
[
i
]
=
=
=
expectedArg
Devtools
.
{
method
}
was
called
with
the
expected
argument
(
index
{
i
}
)
)
;
}
}
function
test_register_unregister
(
)
{
mockDevToolsInstalled
(
true
)
;
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
DevToolsShim
.
register
(
createMockDevTools
(
)
)
;
ok
(
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
installed
"
)
;
DevToolsShim
.
unregister
(
)
;
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
restoreDevToolsInstalled
(
)
;
}
function
test_on_is_forwarded_to_devtools
(
)
{
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
function
cb1
(
)
{
}
function
cb2
(
)
{
}
let
mock
=
createMockDevTools
(
)
;
DevToolsShim
.
on
(
"
test_event
"
cb1
)
;
DevToolsShim
.
register
(
mock
)
;
checkCalls
(
mock
"
on
"
1
[
"
test_event
"
cb1
]
)
;
DevToolsShim
.
on
(
"
other_event
"
cb2
)
;
checkCalls
(
mock
"
on
"
2
[
"
other_event
"
cb2
]
)
;
restoreDevToolsInstalled
(
)
;
}
function
test_off_called_before_registering_devtools
(
)
{
mockDevToolsInstalled
(
true
)
;
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
function
cb1
(
)
{
}
let
mock
=
createMockDevTools
(
)
;
DevToolsShim
.
on
(
"
test_event
"
cb1
)
;
DevToolsShim
.
off
(
"
test_event
"
cb1
)
;
DevToolsShim
.
register
(
mock
)
;
checkCalls
(
mock
"
on
"
0
)
;
restoreDevToolsInstalled
(
)
;
}
function
test_off_called_before_with_bad_callback
(
)
{
mockDevToolsInstalled
(
true
)
;
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
function
cb1
(
)
{
}
function
cb2
(
)
{
}
let
mock
=
createMockDevTools
(
)
;
DevToolsShim
.
on
(
"
test_event
"
cb1
)
;
DevToolsShim
.
off
(
"
test_event
"
cb2
)
;
DevToolsShim
.
register
(
mock
)
;
checkCalls
(
mock
"
on
"
1
[
"
test_event
"
cb1
]
)
;
checkCalls
(
mock
"
off
"
0
)
;
restoreDevToolsInstalled
(
)
;
}
function
test_registering_tool
(
)
{
mockDevToolsInstalled
(
true
)
;
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
let
tool1
=
{
}
;
let
tool2
=
{
}
;
let
tool3
=
{
}
;
let
mock
=
createMockDevTools
(
)
;
DevToolsShim
.
registerTool
(
tool1
)
;
DevToolsShim
.
registerTool
(
tool3
)
;
DevToolsShim
.
unregisterTool
(
tool3
)
;
DevToolsShim
.
register
(
mock
)
;
checkCalls
(
mock
"
registerTool
"
1
[
tool1
]
)
;
DevToolsShim
.
registerTool
(
tool2
)
;
checkCalls
(
mock
"
registerTool
"
2
[
tool2
]
)
;
DevToolsShim
.
unregister
(
)
;
mock
=
createMockDevTools
(
)
;
DevToolsShim
.
register
(
mock
)
;
checkCalls
(
mock
"
registerTool
"
0
)
;
restoreDevToolsInstalled
(
)
;
}
function
test_registering_theme
(
)
{
mockDevToolsInstalled
(
true
)
;
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
let
theme1
=
{
}
;
let
theme2
=
{
}
;
let
theme3
=
{
}
;
let
mock
=
createMockDevTools
(
)
;
DevToolsShim
.
registerTheme
(
theme1
)
;
DevToolsShim
.
registerTheme
(
theme3
)
;
DevToolsShim
.
unregisterTheme
(
theme3
)
;
DevToolsShim
.
register
(
mock
)
;
checkCalls
(
mock
"
registerTheme
"
1
[
theme1
]
)
;
DevToolsShim
.
registerTheme
(
theme2
)
;
checkCalls
(
mock
"
registerTheme
"
2
[
theme2
]
)
;
DevToolsShim
.
unregister
(
)
;
mock
=
createMockDevTools
(
)
;
DevToolsShim
.
register
(
mock
)
;
checkCalls
(
mock
"
registerTheme
"
0
)
;
restoreDevToolsInstalled
(
)
;
}
function
test_events
(
)
{
mockDevToolsInstalled
(
true
)
;
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
let
mock
=
createMockDevTools
(
)
;
checkCalls
(
mock
"
emit
"
0
)
;
DevToolsShim
.
register
(
mock
)
;
checkCalls
(
mock
"
emit
"
1
[
"
devtools
-
registered
"
]
)
;
DevToolsShim
.
unregister
(
)
;
checkCalls
(
mock
"
emit
"
2
[
"
devtools
-
unregistered
"
]
)
;
restoreDevToolsInstalled
(
)
;
}
function
test_scratchpad_apis
(
)
{
mockDevToolsInstalled
(
false
)
;
ok
(
!
DevToolsShim
.
isInstalled
(
)
"
DevTools
are
not
installed
"
)
;
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
DevToolsShim
.
saveDevToolsSession
(
{
}
)
;
ok
(
!
DevToolsShim
.
isInstalled
(
)
"
DevTools
are
not
installed
"
)
;
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
DevToolsShim
.
restoreDevToolsSession
(
{
scratchpads
:
[
{
}
]
browserConsole
:
true
}
)
;
DevToolsShim
.
saveDevToolsSession
(
{
}
)
;
mockDevToolsInstalled
(
true
)
;
ok
(
DevToolsShim
.
isInstalled
(
)
"
DevTools
are
installed
"
)
;
ok
(
!
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
not
initialized
"
)
;
let
mock
=
createMockDevTools
(
)
;
DevToolsShim
.
_initDevTools
=
(
)
=
>
{
DevToolsShim
.
register
(
mock
)
;
}
;
let
scratchpadSessions
=
[
{
}
]
;
DevToolsShim
.
restoreDevToolsSession
(
scratchpadSessions
)
;
checkCalls
(
mock
"
restoreDevToolsSession
"
1
[
scratchpadSessions
]
)
;
ok
(
DevToolsShim
.
isInitialized
(
)
"
DevTools
are
initialized
"
)
;
DevToolsShim
.
saveDevToolsSession
(
{
}
)
;
checkCalls
(
mock
"
saveDevToolsSession
"
1
[
]
)
;
restoreDevToolsInstalled
(
)
;
}
function
run_test
(
)
{
test_register_unregister
(
)
;
DevToolsShim
.
unregister
(
)
;
test_on_is_forwarded_to_devtools
(
)
;
DevToolsShim
.
unregister
(
)
;
test_off_called_before_registering_devtools
(
)
;
DevToolsShim
.
unregister
(
)
;
test_off_called_before_with_bad_callback
(
)
;
DevToolsShim
.
unregister
(
)
;
test_registering_tool
(
)
;
DevToolsShim
.
unregister
(
)
;
test_registering_theme
(
)
;
DevToolsShim
.
unregister
(
)
;
test_scratchpad_apis
(
)
;
DevToolsShim
.
unregister
(
)
;
test_events
(
)
;
}
