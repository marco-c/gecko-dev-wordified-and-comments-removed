"
use
strict
"
;
const
Cu
=
Components
.
utils
;
const
Ci
=
Components
.
interfaces
;
const
{
Services
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
DevToolsShim
"
]
;
function
removeItem
(
array
callback
)
{
let
index
=
array
.
findIndex
(
callback
)
;
if
(
index
>
=
0
)
{
array
.
splice
(
index
1
)
;
}
}
this
.
DevToolsShim
=
{
gDevTools
:
null
listeners
:
[
]
tools
:
[
]
themes
:
[
]
isInstalled
:
function
(
)
{
return
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
.
hasSubstitution
(
"
devtools
"
)
;
}
isInitialized
:
function
(
)
{
return
!
!
this
.
gDevTools
;
}
register
:
function
(
gDevTools
)
{
this
.
gDevTools
=
gDevTools
;
this
.
_onDevToolsRegistered
(
)
;
this
.
gDevTools
.
emit
(
"
devtools
-
registered
"
)
;
}
unregister
:
function
(
)
{
if
(
this
.
isInitialized
(
)
)
{
this
.
gDevTools
.
emit
(
"
devtools
-
unregistered
"
)
;
this
.
gDevTools
=
null
;
}
}
on
:
function
(
event
listener
)
{
if
(
this
.
isInitialized
(
)
)
{
this
.
gDevTools
.
on
(
event
listener
)
;
}
else
{
this
.
listeners
.
push
(
[
event
listener
]
)
;
}
}
off
:
function
(
event
listener
)
{
if
(
this
.
isInitialized
(
)
)
{
this
.
gDevTools
.
off
(
event
listener
)
;
}
else
{
removeItem
(
this
.
listeners
(
[
e
l
]
)
=
>
e
=
=
=
event
&
&
l
=
=
=
listener
)
;
}
}
registerTool
:
function
(
tool
)
{
if
(
this
.
isInitialized
(
)
)
{
this
.
gDevTools
.
registerTool
(
tool
)
;
}
else
{
this
.
tools
.
push
(
tool
)
;
}
}
unregisterTool
:
function
(
tool
)
{
if
(
this
.
isInitialized
(
)
)
{
this
.
gDevTools
.
unregisterTool
(
tool
)
;
}
else
{
removeItem
(
this
.
tools
t
=
>
t
=
=
=
tool
)
;
}
}
registerTheme
:
function
(
theme
)
{
if
(
this
.
isInitialized
(
)
)
{
this
.
gDevTools
.
registerTheme
(
theme
)
;
}
else
{
this
.
themes
.
push
(
theme
)
;
}
}
unregisterTheme
:
function
(
theme
)
{
if
(
this
.
isInitialized
(
)
)
{
this
.
gDevTools
.
unregisterTheme
(
theme
)
;
}
else
{
removeItem
(
this
.
themes
t
=
>
t
=
=
=
theme
)
;
}
}
getOpenedScratchpads
:
function
(
)
{
if
(
!
this
.
isInitialized
(
)
)
{
return
[
]
;
}
return
this
.
gDevTools
.
getOpenedScratchpads
(
)
;
}
restoreScratchpadSession
:
function
(
scratchpads
)
{
if
(
!
this
.
isInstalled
(
)
)
{
return
;
}
if
(
!
this
.
isInitialized
(
)
)
{
this
.
_initDevTools
(
)
;
}
this
.
gDevTools
.
restoreScratchpadSession
(
scratchpads
)
;
}
inspectNode
:
function
(
tab
selectors
)
{
if
(
!
this
.
isInstalled
(
)
)
{
return
Promise
.
resolve
(
)
;
}
if
(
!
this
.
isInitialized
(
)
)
{
this
.
_initDevTools
(
)
;
}
return
this
.
gDevTools
.
inspectNode
(
tab
selectors
)
;
}
_initDevTools
:
function
(
)
{
let
{
loader
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
loader
.
require
(
"
devtools
/
client
/
framework
/
devtools
-
browser
"
)
;
}
_onDevToolsRegistered
:
function
(
)
{
for
(
let
[
event
listener
]
of
this
.
listeners
)
{
this
.
gDevTools
.
on
(
event
listener
)
;
}
for
(
let
tool
of
this
.
tools
)
{
this
.
gDevTools
.
registerTool
(
tool
)
;
}
for
(
let
theme
of
this
.
themes
)
{
this
.
gDevTools
.
registerTheme
(
theme
)
;
}
this
.
listeners
=
[
]
;
this
.
tools
=
[
]
;
this
.
themes
=
[
]
;
}
}
;
let
addonSdkMethods
=
[
"
closeToolbox
"
"
connectDebuggerServer
"
"
createDebuggerClient
"
"
getTargetForTab
"
"
getToolbox
"
"
initBrowserToolboxProcessForAddon
"
"
showToolbox
"
]
;
let
webExtensionsMethods
=
[
"
getTheme
"
]
;
for
(
let
method
of
[
.
.
.
addonSdkMethods
.
.
.
webExtensionsMethods
]
)
{
this
.
DevToolsShim
[
method
]
=
function
(
)
{
if
(
!
this
.
isInstalled
(
)
)
{
throw
new
Error
(
Method
{
method
}
unavailable
if
DevTools
are
not
installed
)
;
}
if
(
!
this
.
isInitialized
(
)
)
{
this
.
_initDevTools
(
)
;
}
return
this
.
gDevTools
[
method
]
.
apply
(
this
.
gDevTools
arguments
)
;
}
;
}
