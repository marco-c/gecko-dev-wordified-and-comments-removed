"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
DevToolsShim
"
]
;
function
removeItem
(
array
callback
)
{
let
index
=
array
.
findIndex
(
callback
)
;
if
(
index
>
=
0
)
{
array
.
splice
(
index
1
)
;
}
}
this
.
DevToolsShim
=
{
gDevTools
:
null
listeners
:
[
]
tools
:
[
]
themes
:
[
]
isInstalled
:
function
(
)
{
return
!
!
this
.
gDevTools
;
}
register
:
function
(
gDevTools
)
{
this
.
gDevTools
=
gDevTools
;
this
.
_onDevToolsRegistered
(
)
;
this
.
gDevTools
.
emit
(
"
devtools
-
registered
"
)
;
}
unregister
:
function
(
)
{
if
(
this
.
isInstalled
(
)
)
{
this
.
gDevTools
.
emit
(
"
devtools
-
unregistered
"
)
;
this
.
gDevTools
=
null
;
}
}
on
:
function
(
event
listener
)
{
if
(
this
.
isInstalled
(
)
)
{
this
.
gDevTools
.
on
(
event
listener
)
;
}
else
{
this
.
listeners
.
push
(
[
event
listener
]
)
;
}
}
off
:
function
(
event
listener
)
{
if
(
this
.
isInstalled
(
)
)
{
this
.
gDevTools
.
off
(
event
listener
)
;
}
else
{
removeItem
(
this
.
listeners
(
[
e
l
]
)
=
>
e
=
=
=
event
&
&
l
=
=
=
listener
)
;
}
}
registerTool
:
function
(
tool
)
{
if
(
this
.
isInstalled
(
)
)
{
this
.
gDevTools
.
registerTool
(
tool
)
;
}
else
{
this
.
tools
.
push
(
tool
)
;
}
}
unregisterTool
:
function
(
tool
)
{
if
(
this
.
isInstalled
(
)
)
{
this
.
gDevTools
.
unregisterTool
(
tool
)
;
}
else
{
removeItem
(
this
.
tools
t
=
>
t
=
=
=
tool
)
;
}
}
registerTheme
:
function
(
theme
)
{
if
(
this
.
isInstalled
(
)
)
{
this
.
gDevTools
.
registerTheme
(
theme
)
;
}
else
{
this
.
themes
.
push
(
theme
)
;
}
}
unregisterTheme
:
function
(
theme
)
{
if
(
this
.
isInstalled
(
)
)
{
this
.
gDevTools
.
unregisterTheme
(
theme
)
;
}
else
{
removeItem
(
this
.
themes
t
=
>
t
=
=
=
theme
)
;
}
}
getOpenedScratchpads
:
function
(
)
{
if
(
!
this
.
isInstalled
(
)
)
{
return
[
]
;
}
return
this
.
gDevTools
.
getOpenedScratchpads
(
)
;
}
restoreScratchpadSession
:
function
(
scratchpads
)
{
if
(
!
this
.
isInstalled
(
)
)
{
return
;
}
this
.
gDevTools
.
restoreScratchpadSession
(
scratchpads
)
;
}
_onDevToolsRegistered
:
function
(
)
{
for
(
let
[
event
listener
]
of
this
.
listeners
)
{
this
.
gDevTools
.
on
(
event
listener
)
;
}
for
(
let
tool
of
this
.
tools
)
{
this
.
gDevTools
.
registerTool
(
tool
)
;
}
for
(
let
theme
of
this
.
themes
)
{
this
.
gDevTools
.
registerTheme
(
theme
)
;
}
this
.
listeners
=
[
]
;
this
.
tools
=
[
]
;
this
.
themes
=
[
]
;
}
}
;
