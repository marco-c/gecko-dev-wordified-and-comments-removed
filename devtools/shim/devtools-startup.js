"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
const
kDebuggerPrefs
=
[
"
devtools
.
debugger
.
remote
-
enabled
"
"
devtools
.
chrome
.
enabled
"
]
;
const
TOOLBAR_VISIBLE_PREF
=
"
devtools
.
toolbar
.
visible
"
;
const
DEVTOOLS_ENABLED_PREF
=
"
devtools
.
enabled
"
;
const
{
XPCOMUtils
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
{
}
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CustomizableWidgets
"
"
resource
:
/
/
/
modules
/
CustomizableWidgets
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
StartupBundle
"
function
(
)
{
const
url
=
"
chrome
:
/
/
devtools
-
shim
/
locale
/
startup
.
properties
"
;
return
Services
.
strings
.
createBundle
(
url
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
KeyShortcutsBundle
"
function
(
)
{
const
url
=
"
chrome
:
/
/
devtools
-
shim
/
locale
/
key
-
shortcuts
.
properties
"
;
return
Services
.
strings
.
createBundle
(
url
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
KeyShortcuts
"
function
(
)
{
const
isMac
=
AppConstants
.
platform
=
=
"
macosx
"
;
const
modifiers
=
isMac
?
"
accel
alt
"
:
"
accel
shift
"
;
return
[
{
id
:
"
toggleToolbox
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
toggleToolbox
.
commandkey
"
)
modifiers
}
{
id
:
"
toggleToolboxF12
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
toggleToolboxF12
.
commandkey
"
)
modifiers
:
"
"
}
{
id
:
"
toggleToolbar
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
toggleToolbar
.
commandkey
"
)
modifiers
:
"
shift
"
}
{
id
:
"
webide
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
webide
.
commandkey
"
)
modifiers
:
"
shift
"
}
{
id
:
"
browserToolbox
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
browserToolbox
.
commandkey
"
)
modifiers
:
"
accel
alt
shift
"
}
{
id
:
"
browserConsole
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
browserConsole
.
commandkey
"
)
modifiers
:
"
accel
shift
"
}
{
id
:
"
responsiveDesignMode
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
responsiveDesignMode
.
commandkey
"
)
modifiers
}
{
id
:
"
scratchpad
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
scratchpad
.
commandkey
"
)
modifiers
:
"
shift
"
}
{
toolId
:
"
inspector
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
inspector
.
commandkey
"
)
modifiers
}
{
toolId
:
"
webconsole
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
webconsole
.
commandkey
"
)
modifiers
}
{
toolId
:
"
jsdebugger
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
debugger
.
commandkey
"
)
modifiers
}
{
toolId
:
"
netmonitor
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
netmonitor
.
commandkey
"
)
modifiers
}
{
toolId
:
"
styleeditor
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
styleeditor
.
commandkey
"
)
modifiers
:
"
shift
"
}
{
toolId
:
"
performance
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
performance
.
commandkey
"
)
modifiers
:
"
shift
"
}
{
toolId
:
"
storage
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
storage
.
commandkey
"
)
modifiers
:
"
shift
"
}
{
toolId
:
"
dom
"
shortcut
:
KeyShortcutsBundle
.
GetStringFromName
(
"
dom
.
commandkey
"
)
modifiers
}
]
;
}
)
;
function
DevToolsStartup
(
)
{
this
.
onEnabledPrefChanged
=
this
.
onEnabledPrefChanged
.
bind
(
this
)
;
this
.
onWindowReady
=
this
.
onWindowReady
.
bind
(
this
)
;
}
DevToolsStartup
.
prototype
=
{
initialized
:
false
recorded
:
false
developerToggleCreated
:
false
handle
:
function
(
cmdLine
)
{
let
consoleFlag
=
cmdLine
.
handleFlag
(
"
jsconsole
"
false
)
;
let
debuggerFlag
=
cmdLine
.
handleFlag
(
"
jsdebugger
"
false
)
;
let
devtoolsFlag
=
cmdLine
.
handleFlag
(
"
devtools
"
false
)
;
let
isInitialLaunch
=
cmdLine
.
state
=
=
Ci
.
nsICommandLine
.
STATE_INITIAL_LAUNCH
;
if
(
isInitialLaunch
)
{
let
hasDevToolsFlag
=
consoleFlag
|
|
devtoolsFlag
|
|
debuggerFlag
;
this
.
setupEnabledPref
(
hasDevToolsFlag
)
;
this
.
devtoolsFlag
=
devtoolsFlag
;
Services
.
obs
.
addObserver
(
this
.
onWindowReady
"
browser
-
delayed
-
startup
-
finished
"
)
;
Services
.
prefs
.
addObserver
(
DEVTOOLS_ENABLED_PREF
this
.
onEnabledPrefChanged
)
;
}
if
(
consoleFlag
)
{
this
.
handleConsoleFlag
(
cmdLine
)
;
}
if
(
debuggerFlag
)
{
this
.
handleDebuggerFlag
(
cmdLine
)
;
}
let
debuggerServerFlag
;
try
{
debuggerServerFlag
=
cmdLine
.
handleFlagWithParam
(
"
start
-
debugger
-
server
"
false
)
;
}
catch
(
e
)
{
debuggerServerFlag
=
cmdLine
.
handleFlag
(
"
start
-
debugger
-
server
"
false
)
;
}
if
(
debuggerServerFlag
)
{
this
.
handleDebuggerServerFlag
(
cmdLine
debuggerServerFlag
)
;
}
}
onWindowReady
(
window
)
{
this
.
hookWindow
(
window
)
;
if
(
Services
.
prefs
.
getBoolPref
(
TOOLBAR_VISIBLE_PREF
false
)
)
{
this
.
initDevTools
(
)
;
}
if
(
this
.
devtoolsFlag
)
{
this
.
handleDevToolsFlag
(
window
)
;
this
.
devtoolsFlag
=
false
;
}
JsonView
.
initialize
(
)
;
}
hookWindow
(
window
)
{
this
.
hookKeyShortcuts
(
window
)
;
if
(
!
this
.
developerToggleCreated
)
{
this
.
hookDeveloperToggle
(
)
;
this
.
developerToggleCreated
=
true
;
}
if
(
!
this
.
initialized
)
{
this
.
hookWebDeveloperMenu
(
window
)
;
}
this
.
createDevToolsEnableMenuItem
(
window
)
;
this
.
updateDevToolsMenuItems
(
window
)
;
}
hookDeveloperToggle
(
)
{
let
id
=
"
developer
-
button
"
;
let
widget
=
CustomizableUI
.
getWidget
(
id
)
;
if
(
widget
&
&
widget
.
provider
=
=
CustomizableUI
.
PROVIDER_API
)
{
return
;
}
let
item
=
{
id
:
id
type
:
"
view
"
viewId
:
"
PanelUI
-
developer
"
shortcutId
:
"
key_toggleToolbox
"
tooltiptext
:
"
developer
-
button
.
tooltiptext2
"
onViewShowing
:
(
event
)
=
>
{
if
(
Services
.
prefs
.
getBoolPref
(
DEVTOOLS_ENABLED_PREF
)
)
{
this
.
initDevTools
(
"
HamburgerMenu
"
)
;
}
let
doc
=
event
.
target
.
ownerDocument
;
let
menu
=
doc
.
getElementById
(
"
menuWebDeveloperPopup
"
)
;
let
itemsToDisplay
=
[
.
.
.
menu
.
children
]
;
itemsToDisplay
.
push
(
{
localName
:
"
menuseparator
"
getAttribute
:
(
)
=
>
{
}
}
)
;
itemsToDisplay
.
push
(
doc
.
getElementById
(
"
goOfflineMenuitem
"
)
)
;
let
developerItems
=
doc
.
getElementById
(
"
PanelUI
-
developerItems
"
)
;
let
{
clearSubview
fillSubviewFromMenuItems
}
=
Cu
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableWidgets
.
jsm
"
{
}
)
;
clearSubview
(
developerItems
)
;
fillSubviewFromMenuItems
(
itemsToDisplay
developerItems
)
;
}
onInit
(
anchor
)
{
this
.
onBeforeCreated
(
anchor
.
ownerDocument
)
;
}
onBeforeCreated
(
doc
)
{
if
(
doc
.
getElementById
(
"
PanelUI
-
developerItems
"
)
)
{
return
;
}
let
view
=
doc
.
createElement
(
"
panelview
"
)
;
view
.
id
=
"
PanelUI
-
developerItems
"
;
let
panel
=
doc
.
createElement
(
"
vbox
"
)
;
panel
.
setAttribute
(
"
class
"
"
panel
-
subview
-
body
"
)
;
view
.
appendChild
(
panel
)
;
doc
.
getElementById
(
"
PanelUI
-
multiView
"
)
.
appendChild
(
view
)
;
}
}
;
if
(
AppConstants
.
MOZ_DEV_EDITION
)
{
item
.
defaultArea
=
CustomizableUI
.
AREA_NAVBAR
;
}
CustomizableUI
.
createWidget
(
item
)
;
CustomizableWidgets
.
push
(
item
)
;
}
hookWebDeveloperMenu
(
window
)
{
let
menu
=
window
.
document
.
getElementById
(
"
webDeveloperMenu
"
)
;
let
onPopupShowing
=
(
)
=
>
{
if
(
!
Services
.
prefs
.
getBoolPref
(
DEVTOOLS_ENABLED_PREF
)
)
{
return
;
}
menu
.
removeEventListener
(
"
popupshowing
"
onPopupShowing
)
;
this
.
initDevTools
(
"
SystemMenu
"
)
;
}
;
menu
.
addEventListener
(
"
popupshowing
"
onPopupShowing
)
;
}
createDevToolsEnableMenuItem
(
window
)
{
let
{
document
}
=
window
;
let
item
=
document
.
createElement
(
"
menuitem
"
)
;
item
.
id
=
"
enableDeveloperTools
"
;
item
.
setAttribute
(
"
label
"
StartupBundle
.
GetStringFromName
(
"
enableDevTools
.
label
"
)
)
;
item
.
setAttribute
(
"
accesskey
"
StartupBundle
.
GetStringFromName
(
"
enableDevTools
.
accesskey
"
)
)
;
item
.
addEventListener
(
"
command
"
(
)
=
>
{
this
.
openInstallPage
(
"
SystemMenu
"
)
;
}
)
;
let
systemMenuItem
=
document
.
getElementById
(
"
menuWebDeveloperPopup
"
)
;
systemMenuItem
.
appendChild
(
item
)
;
}
updateDevToolsMenuItems
(
window
)
{
let
item
=
window
.
document
.
getElementById
(
"
enableDeveloperTools
"
)
;
item
.
hidden
=
Services
.
prefs
.
getBoolPref
(
DEVTOOLS_ENABLED_PREF
)
;
}
onEnabledPrefChanged
(
)
{
let
enumerator
=
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
let
window
=
enumerator
.
getNext
(
)
;
if
(
window
.
gBrowserInit
&
&
window
.
gBrowserInit
.
delayedStartupFinished
)
{
this
.
updateDevToolsMenuItems
(
window
)
;
}
}
}
isDevToolsUser
(
)
{
let
selfXssCount
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
selfxss
.
count
"
0
)
;
return
selfXssCount
>
0
;
}
setupEnabledPref
(
hasDevToolsFlag
)
{
if
(
Services
.
prefs
.
getBoolPref
(
DEVTOOLS_ENABLED_PREF
)
)
{
return
;
}
let
hasToolbarPref
=
Services
.
prefs
.
getBoolPref
(
TOOLBAR_VISIBLE_PREF
false
)
;
if
(
hasDevToolsFlag
|
|
hasToolbarPref
|
|
this
.
isDevToolsUser
(
)
)
{
Services
.
prefs
.
setBoolPref
(
DEVTOOLS_ENABLED_PREF
true
)
;
}
}
hookKeyShortcuts
(
window
)
{
let
doc
=
window
.
document
;
let
keyset
=
doc
.
createElement
(
"
keyset
"
)
;
keyset
.
setAttribute
(
"
id
"
"
devtoolsKeyset
"
)
;
for
(
let
key
of
KeyShortcuts
)
{
let
xulKey
=
this
.
createKey
(
doc
key
(
)
=
>
this
.
onKey
(
window
key
)
)
;
keyset
.
appendChild
(
xulKey
)
;
}
let
mainKeyset
=
doc
.
getElementById
(
"
mainKeyset
"
)
;
mainKeyset
.
parentNode
.
insertBefore
(
keyset
mainKeyset
)
;
}
onKey
(
window
key
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
DEVTOOLS_ENABLED_PREF
)
)
{
let
id
=
key
.
toolId
|
|
key
.
id
;
this
.
openInstallPage
(
"
KeyShortcut
"
id
)
;
}
else
{
let
startTime
=
window
.
performance
.
now
(
)
;
let
require
=
this
.
initDevTools
(
"
KeyShortcut
"
)
;
let
{
gDevToolsBrowser
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
-
browser
"
)
;
gDevToolsBrowser
.
onKeyShortcut
(
window
key
startTime
)
;
}
}
createKey
(
doc
{
id
toolId
shortcut
modifiers
:
mod
}
oncommand
)
{
let
k
=
doc
.
createElement
(
"
key
"
)
;
k
.
id
=
"
key_
"
+
(
id
|
|
toolId
)
;
if
(
shortcut
.
startsWith
(
"
VK_
"
)
)
{
k
.
setAttribute
(
"
keycode
"
shortcut
)
;
}
else
{
k
.
setAttribute
(
"
key
"
shortcut
)
;
}
if
(
mod
)
{
k
.
setAttribute
(
"
modifiers
"
mod
)
;
}
k
.
setAttribute
(
"
oncommand
"
"
;
"
)
;
k
.
addEventListener
(
"
command
"
oncommand
)
;
return
k
;
}
initDevTools
:
function
(
reason
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
DEVTOOLS_ENABLED_PREF
)
)
{
this
.
openInstallPage
(
reason
)
;
return
null
;
}
if
(
reason
&
&
!
this
.
recorded
)
{
try
{
Services
.
telemetry
.
getHistogramById
(
"
DEVTOOLS_ENTRY_POINT
"
)
.
add
(
reason
)
;
}
catch
(
e
)
{
dump
(
"
DevTools
telemetry
entry
point
failed
:
"
+
e
+
"
\
n
"
)
;
}
this
.
recorded
=
true
;
}
this
.
initialized
=
true
;
let
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
require
(
"
devtools
/
client
/
framework
/
devtools
-
browser
"
)
;
return
require
;
}
openInstallPage
:
function
(
reason
keyId
)
{
let
{
gBrowser
}
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
for
(
let
tab
of
gBrowser
.
tabs
)
{
let
browser
=
tab
.
linkedBrowser
;
let
location
=
browser
.
documentURI
?
browser
.
documentURI
.
spec
:
"
"
;
if
(
location
.
startsWith
(
"
about
:
devtools
"
)
&
&
!
location
.
startsWith
(
"
about
:
devtools
-
toolbox
"
)
)
{
gBrowser
.
selectedTab
=
tab
;
return
;
}
}
let
url
=
"
about
:
devtools
"
;
let
params
=
[
]
;
if
(
reason
)
{
params
.
push
(
"
reason
=
"
+
encodeURIComponent
(
reason
)
)
;
}
let
selectedBrowser
=
gBrowser
.
selectedBrowser
;
if
(
selectedBrowser
)
{
params
.
push
(
"
tabid
=
"
+
selectedBrowser
.
outerWindowID
)
;
}
if
(
keyId
)
{
params
.
push
(
"
keyid
=
"
+
keyId
)
;
}
if
(
params
.
length
>
0
)
{
url
+
=
"
?
"
+
params
.
join
(
"
&
"
)
;
}
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
url
{
relatedToCurrent
:
true
}
)
;
}
handleConsoleFlag
:
function
(
cmdLine
)
{
let
window
=
Services
.
wm
.
getMostRecentWindow
(
"
devtools
:
webconsole
"
)
;
if
(
!
window
)
{
let
require
=
this
.
initDevTools
(
"
CommandLine
"
)
;
let
{
HUDService
}
=
require
(
"
devtools
/
client
/
webconsole
/
hudservice
"
)
;
let
{
console
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
HUDService
.
toggleBrowserConsole
(
)
.
catch
(
console
.
error
)
;
}
else
{
window
.
focus
(
)
;
}
if
(
cmdLine
.
state
=
=
Ci
.
nsICommandLine
.
STATE_REMOTE_AUTO
)
{
cmdLine
.
preventDefault
=
true
;
}
}
handleDevToolsFlag
:
function
(
window
)
{
const
require
=
this
.
initDevTools
(
"
CommandLine
"
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
let
target
=
TargetFactory
.
forTab
(
window
.
gBrowser
.
selectedTab
)
;
gDevTools
.
showToolbox
(
target
)
;
}
_isRemoteDebuggingEnabled
(
)
{
let
remoteDebuggingEnabled
=
false
;
try
{
remoteDebuggingEnabled
=
kDebuggerPrefs
.
every
(
pref
=
>
{
return
Services
.
prefs
.
getBoolPref
(
pref
)
;
}
)
;
}
catch
(
ex
)
{
let
{
console
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
console
.
error
(
ex
)
;
return
false
;
}
if
(
!
remoteDebuggingEnabled
)
{
let
errorMsg
=
"
Could
not
run
chrome
debugger
!
You
need
the
following
"
+
"
prefs
to
be
set
to
true
:
"
+
kDebuggerPrefs
.
join
(
"
"
)
;
let
{
console
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
console
.
error
(
new
Error
(
errorMsg
)
)
;
dump
(
errorMsg
+
"
\
n
"
)
;
}
return
remoteDebuggingEnabled
;
}
handleDebuggerFlag
:
function
(
cmdLine
)
{
if
(
!
this
.
_isRemoteDebuggingEnabled
(
)
)
{
return
;
}
let
devtoolsThreadResumed
=
false
;
let
pauseOnStartup
=
cmdLine
.
handleFlag
(
"
wait
-
for
-
jsdebugger
"
false
)
;
if
(
pauseOnStartup
)
{
let
observe
=
function
(
subject
topic
data
)
{
devtoolsThreadResumed
=
true
;
Services
.
obs
.
removeObserver
(
observe
"
devtools
-
thread
-
resumed
"
)
;
}
;
Services
.
obs
.
addObserver
(
observe
"
devtools
-
thread
-
resumed
"
)
;
}
const
{
BrowserToolboxProcess
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
client
/
framework
/
ToolboxProcess
.
jsm
"
{
}
)
;
BrowserToolboxProcess
.
init
(
)
;
if
(
pauseOnStartup
)
{
let
tm
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
)
;
tm
.
spinEventLoopUntil
(
(
)
=
>
{
return
devtoolsThreadResumed
;
}
)
;
}
if
(
cmdLine
.
state
=
=
Ci
.
nsICommandLine
.
STATE_REMOTE_AUTO
)
{
cmdLine
.
preventDefault
=
true
;
}
}
handleDebuggerServerFlag
:
function
(
cmdLine
portOrPath
)
{
if
(
!
this
.
_isRemoteDebuggingEnabled
(
)
)
{
return
;
}
let
webSocket
=
false
;
let
defaultPort
=
Services
.
prefs
.
getIntPref
(
"
devtools
.
debugger
.
remote
-
port
"
)
;
if
(
portOrPath
=
=
=
true
)
{
webSocket
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
remote
-
websocket
"
)
;
portOrPath
=
defaultPort
;
}
else
if
(
portOrPath
.
startsWith
(
"
ws
:
"
)
)
{
webSocket
=
true
;
let
port
=
portOrPath
.
slice
(
3
)
;
portOrPath
=
Number
(
port
)
?
port
:
defaultPort
;
}
let
{
DevToolsLoader
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
try
{
let
serverLoader
=
new
DevToolsLoader
(
)
;
serverLoader
.
invisibleToDebugger
=
true
;
let
{
DebuggerServer
:
debuggerServer
}
=
serverLoader
.
require
(
"
devtools
/
server
/
main
"
)
;
debuggerServer
.
init
(
)
;
debuggerServer
.
addBrowserActors
(
)
;
debuggerServer
.
allowChromeProcess
=
true
;
let
listener
=
debuggerServer
.
createListener
(
)
;
listener
.
portOrPath
=
portOrPath
;
listener
.
webSocket
=
webSocket
;
listener
.
open
(
)
;
dump
(
"
Started
debugger
server
on
"
+
portOrPath
+
"
\
n
"
)
;
}
catch
(
e
)
{
dump
(
"
Unable
to
start
debugger
server
on
"
+
portOrPath
+
"
:
"
+
e
)
;
}
if
(
cmdLine
.
state
=
=
Ci
.
nsICommandLine
.
STATE_REMOTE_AUTO
)
{
cmdLine
.
preventDefault
=
true
;
}
}
get
KeyShortcuts
(
)
{
return
KeyShortcuts
;
}
get
wrappedJSObject
(
)
{
return
this
;
}
helpInfo
:
"
-
-
jsconsole
Open
the
Browser
Console
.
\
n
"
+
"
-
-
jsdebugger
Open
the
Browser
Toolbox
.
\
n
"
+
"
-
-
wait
-
for
-
jsdebugger
Spin
event
loop
until
JS
debugger
connects
.
\
n
"
+
"
Enables
debugging
(
some
)
application
startup
code
paths
.
\
n
"
+
"
Only
has
an
effect
when
-
-
jsdebugger
is
also
supplied
.
\
n
"
+
"
-
-
devtools
Open
DevTools
on
initial
load
.
\
n
"
+
"
-
-
start
-
debugger
-
server
[
ws
:
]
[
<
port
>
|
<
path
>
]
Start
the
debugger
server
on
\
n
"
+
"
a
TCP
port
or
Unix
domain
socket
path
.
Defaults
to
TCP
port
\
n
"
+
"
6000
.
Use
WebSocket
protocol
if
ws
:
prefix
is
specified
.
\
n
"
classID
:
Components
.
ID
(
"
{
9e9a9283
-
0ce9
-
4e4a
-
8f1c
-
ba129a032c32
}
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsICommandLineHandler
]
)
}
;
const
JsonView
=
{
initialized
:
false
initialize
:
function
(
)
{
if
(
this
.
initialized
)
{
return
;
}
this
.
initialized
=
true
;
Services
.
ppmm
.
loadProcessScript
(
"
resource
:
/
/
devtools
/
client
/
jsonview
/
converter
-
observer
.
js
"
true
)
;
Services
.
ppmm
.
addMessageListener
(
"
devtools
:
jsonview
:
save
"
this
.
onSave
)
;
}
onSave
:
function
(
message
)
{
let
chrome
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
let
browser
=
chrome
.
gBrowser
.
selectedBrowser
;
if
(
message
.
data
=
=
=
null
)
{
chrome
.
saveBrowser
(
browser
)
;
}
else
{
let
persistable
=
browser
.
frameLoader
;
persistable
.
startPersistence
(
0
{
onDocumentReady
(
doc
)
{
let
uri
=
chrome
.
makeURI
(
doc
.
documentURI
doc
.
characterSet
)
;
let
filename
=
chrome
.
getDefaultFileName
(
undefined
uri
doc
null
)
;
chrome
.
internalSave
(
message
.
data
doc
filename
null
doc
.
contentType
false
null
null
null
doc
false
null
undefined
)
;
}
onError
(
status
)
{
throw
new
Error
(
"
JSON
Viewer
'
s
onSave
failed
in
startPersistence
"
)
;
}
}
)
;
}
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
DevToolsStartup
]
)
;
