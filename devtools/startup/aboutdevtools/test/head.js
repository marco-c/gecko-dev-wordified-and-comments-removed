"
use
strict
"
;
waitForExplicitFinish
(
)
;
const
waitUntil
=
function
(
predicate
interval
=
100
)
{
if
(
predicate
(
)
)
{
return
Promise
.
resolve
(
true
)
;
}
return
new
Promise
(
resolve
=
>
{
setTimeout
(
function
(
)
{
waitUntil
(
predicate
interval
)
.
then
(
(
)
=
>
resolve
(
true
)
)
;
}
interval
)
;
}
)
;
}
;
const
addTab
=
async
function
(
url
)
{
info
(
"
Adding
a
new
tab
with
URL
:
"
+
url
)
;
const
{
gBrowser
}
=
window
;
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
url
)
;
gBrowser
.
selectedTab
=
tab
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
info
(
"
Tab
added
and
finished
loading
"
)
;
return
tab
;
}
;
const
removeTab
=
async
function
(
tab
)
{
info
(
"
Removing
tab
.
"
)
;
const
{
gBrowser
}
=
tab
.
ownerGlobal
;
await
new
Promise
(
resolve
=
>
{
gBrowser
.
tabContainer
.
addEventListener
(
"
TabClose
"
resolve
{
once
:
true
}
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
info
(
"
Tab
removed
and
finished
closing
"
)
;
}
;
const
openAboutDevTools
=
async
function
(
)
{
info
(
"
Open
about
:
devtools
programmatically
in
a
new
tab
"
)
;
const
tab
=
await
addTab
(
"
about
:
devtools
"
)
;
const
browser
=
tab
.
linkedBrowser
;
const
doc
=
browser
.
contentDocument
;
const
win
=
browser
.
contentWindow
;
return
{
tab
doc
win
}
;
}
;
const
pushPref
=
function
(
preferenceName
value
)
{
return
new
Promise
(
resolve
=
>
{
const
options
=
{
set
:
[
[
preferenceName
value
]
]
}
;
SpecialPowers
.
pushPrefEnv
(
options
resolve
)
;
}
)
;
}
;
function
synthesizeToggleToolboxKey
(
)
{
info
(
"
Trigger
the
toogle
toolbox
shortcut
"
)
;
if
(
Services
.
appinfo
.
OS
=
=
"
Darwin
"
)
{
EventUtils
.
synthesizeKey
(
"
i
"
{
accelKey
:
true
altKey
:
true
}
)
;
}
else
{
EventUtils
.
synthesizeKey
(
"
i
"
{
accelKey
:
true
shiftKey
:
true
}
)
;
}
}
function
isAboutDevtoolsTab
(
tab
)
{
const
browser
=
tab
.
linkedBrowser
;
const
location
=
browser
.
documentURI
.
spec
;
return
location
.
startsWith
(
"
about
:
devtools
"
)
;
}
