"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
DevtoolsStartup
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
devtools
/
startup
-
clh
;
1
"
]
.
getService
(
Ci
.
nsICommandLineHandler
)
.
wrappedJSObject
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
Telemetry
"
function
(
)
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
Telemetry
=
require
(
"
devtools
/
client
/
shared
/
telemetry
"
)
;
return
Telemetry
;
}
)
;
const
DEVTOOLS_ENABLED_PREF
=
"
devtools
.
enabled
"
;
const
DEVTOOLS_POLICY_DISABLED_PREF
=
"
devtools
.
policy
.
disabled
"
;
const
EXPORTED_SYMBOLS
=
[
"
DevToolsShim
"
]
;
function
removeItem
(
array
callback
)
{
const
index
=
array
.
findIndex
(
callback
)
;
if
(
index
>
=
0
)
{
array
.
splice
(
index
1
)
;
}
}
const
DevToolsShim
=
{
_gDevTools
:
null
listeners
:
[
]
get
telemetry
(
)
{
if
(
!
this
.
_telemetry
)
{
this
.
_telemetry
=
new
Telemetry
(
)
;
this
.
_telemetry
.
setEventRecordingEnabled
(
true
)
;
}
return
this
.
_telemetry
;
}
isEnabled
:
function
(
)
{
const
enabled
=
Services
.
prefs
.
getBoolPref
(
DEVTOOLS_ENABLED_PREF
)
;
return
enabled
&
&
!
this
.
isDisabledByPolicy
(
)
;
}
isDisabledByPolicy
:
function
(
)
{
return
Services
.
prefs
.
getBoolPref
(
DEVTOOLS_POLICY_DISABLED_PREF
false
)
;
}
isInitialized
:
function
(
)
{
return
!
!
this
.
_gDevTools
;
}
getToolboxes
:
function
(
)
{
if
(
this
.
isInitialized
(
)
)
{
return
this
.
_gDevTools
.
getToolboxes
(
)
;
}
return
[
]
;
}
register
:
function
(
gDevTools
)
{
this
.
_gDevTools
=
gDevTools
;
this
.
_onDevToolsRegistered
(
)
;
this
.
_gDevTools
.
emit
(
"
devtools
-
registered
"
)
;
}
unregister
:
function
(
)
{
if
(
this
.
isInitialized
(
)
)
{
this
.
_gDevTools
.
emit
(
"
devtools
-
unregistered
"
)
;
this
.
_gDevTools
=
null
;
}
}
on
:
function
(
event
listener
)
{
if
(
this
.
isInitialized
(
)
)
{
this
.
_gDevTools
.
on
(
event
listener
)
;
}
else
{
this
.
listeners
.
push
(
[
event
listener
]
)
;
}
}
off
:
function
(
event
listener
)
{
if
(
this
.
isInitialized
(
)
)
{
this
.
_gDevTools
.
off
(
event
listener
)
;
}
else
{
removeItem
(
this
.
listeners
(
[
e
l
]
)
=
>
e
=
=
=
event
&
&
l
=
=
=
listener
)
;
}
}
saveDevToolsSession
:
function
(
state
)
{
if
(
!
this
.
isInitialized
(
)
)
{
return
;
}
this
.
_gDevTools
.
saveDevToolsSession
(
state
)
;
}
restoreDevToolsSession
:
function
(
session
)
{
if
(
!
this
.
isEnabled
(
)
)
{
return
;
}
const
{
browserConsole
browserToolbox
}
=
session
;
const
hasDevToolsData
=
browserConsole
|
|
browserToolbox
;
if
(
!
hasDevToolsData
)
{
return
;
}
this
.
initDevTools
(
"
SessionRestore
"
)
;
this
.
_gDevTools
.
restoreDevToolsSession
(
session
)
;
}
inspectA11Y
:
function
(
tab
domReference
)
{
if
(
!
this
.
isEnabled
(
)
)
{
if
(
!
this
.
isDisabledByPolicy
(
)
)
{
DevtoolsStartup
.
openInstallPage
(
"
ContextMenu
"
)
;
}
return
Promise
.
resolve
(
)
;
}
const
startTime
=
Cu
.
now
(
)
;
this
.
initDevTools
(
"
ContextMenu
"
)
;
return
this
.
_gDevTools
.
inspectA11Y
(
tab
domReference
startTime
)
;
}
inspectNode
:
function
(
tab
domReference
)
{
if
(
!
this
.
isEnabled
(
)
)
{
if
(
!
this
.
isDisabledByPolicy
(
)
)
{
DevtoolsStartup
.
openInstallPage
(
"
ContextMenu
"
)
;
}
return
Promise
.
resolve
(
)
;
}
const
startTime
=
Cu
.
now
(
)
;
this
.
initDevTools
(
"
ContextMenu
"
)
;
return
this
.
_gDevTools
.
inspectNode
(
tab
domReference
startTime
)
;
}
_onDevToolsRegistered
:
function
(
)
{
for
(
const
[
event
listener
]
of
this
.
listeners
)
{
this
.
_gDevTools
.
on
(
event
listener
)
;
}
this
.
listeners
=
[
]
;
}
initDevTools
:
function
(
reason
)
{
if
(
!
this
.
isEnabled
(
)
)
{
throw
new
Error
(
"
DevTools
are
not
enabled
and
can
not
be
initialized
.
"
)
;
}
if
(
reason
)
{
const
window
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
this
.
telemetry
.
addEventProperty
(
window
"
open
"
"
tools
"
null
"
shortcut
"
"
"
)
;
this
.
telemetry
.
addEventProperty
(
window
"
open
"
"
tools
"
null
"
entrypoint
"
reason
)
;
}
if
(
!
this
.
isInitialized
(
)
)
{
DevtoolsStartup
.
initDevTools
(
reason
)
;
}
}
}
;
const
webExtensionsMethods
=
[
"
createDescriptorForTab
"
"
createWebExtensionInspectedWindowFront
"
"
getTheme
"
"
openBrowserConsole
"
]
;
const
otherToolMethods
=
[
"
showToolboxForTab
"
]
;
for
(
const
method
of
[
.
.
.
webExtensionsMethods
.
.
.
otherToolMethods
]
)
{
DevToolsShim
[
method
]
=
function
(
)
{
if
(
!
this
.
isEnabled
(
)
)
{
throw
new
Error
(
"
Could
not
call
a
DevToolsShim
webextension
method
(
'
"
+
method
+
"
'
)
:
DevTools
are
not
initialized
.
"
)
;
}
this
.
initDevTools
(
)
;
return
this
.
_gDevTools
[
method
]
.
apply
(
this
.
_gDevTools
arguments
)
;
}
;
}
