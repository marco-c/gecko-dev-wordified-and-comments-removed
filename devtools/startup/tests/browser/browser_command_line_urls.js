"
use
strict
"
;
const
{
DevToolsStartup
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
DevToolsStartup
.
sys
.
mjs
"
)
;
const
{
require
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
URL_ROOT
=
"
https
:
/
/
example
.
org
/
browser
/
devtools
/
startup
/
tests
/
browser
/
"
;
const
startup
=
new
DevToolsStartup
(
)
;
startup
.
initialized
=
true
;
add_task
(
async
function
ignoredUrls
(
)
{
const
tabCount
=
gBrowser
.
tabs
.
length
;
sendUrlViaCommandLine
(
"
https
:
/
/
foo
user
:
123
"
)
;
sendUrlViaCommandLine
(
"
https
:
/
/
foo
user
:
123
"
)
;
sendUrlViaCommandLine
(
"
https
:
/
/
foo
123
:
456
"
)
;
sendUrlViaCommandLine
(
"
https
:
/
/
foo
/
index
.
html
:
123
:
456
"
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
1000
)
)
;
is
(
tabCount
gBrowser
.
tabs
.
length
)
;
}
)
;
add_task
(
async
function
openingWithDevToolsClosed
(
)
{
const
url
=
URL_ROOT
+
"
command
-
line
.
html
:
5
:
2
"
;
const
tabCount
=
gBrowser
.
tabs
.
length
;
const
ignoredUrl
=
sendUrlViaCommandLine
(
url
)
;
ok
(
ignoredUrl
"
The
url
is
ignored
when
no
devtools
are
opened
"
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
1000
)
)
;
is
(
tabCount
gBrowser
.
tabs
.
length
)
;
}
)
;
add_task
(
async
function
openingWithDevToolsButUnknownSource
(
)
{
const
url
=
URL_ROOT
+
"
command
-
line
.
html
:
5
:
2
"
;
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
data
:
text
/
html
;
charset
=
utf
-
8
<
title
>
foo
<
/
title
>
"
)
;
gBrowser
.
selectedTab
=
tab
;
const
toolbox
=
await
gDevTools
.
showToolboxForTab
(
tab
{
toolId
:
"
jsdebugger
"
}
)
;
const
newTabOpened
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
)
;
sendUrlViaCommandLine
(
url
)
;
const
newTab
=
await
newTabOpened
;
is
(
newTab
.
linkedBrowser
.
documentURI
.
spec
"
view
-
source
:
"
+
URL_ROOT
+
"
command
-
line
.
html
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
!
!
content
.
getSelection
(
)
)
;
const
selection
=
content
.
getSelection
(
)
;
Assert
.
equal
(
selection
.
toString
(
)
"
<
title
>
Command
line
test
page
<
/
title
>
"
"
The
5th
line
is
selected
in
view
-
source
"
)
;
}
)
;
await
gBrowser
.
removeTab
(
newTab
)
;
await
toolbox
.
destroy
(
)
;
await
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
openingWithDevToolsAndKnownSource
(
)
{
const
line
=
5
;
const
column
=
2
;
const
url
=
URL_ROOT
+
command
-
line
.
js
:
{
line
}
:
{
column
}
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
URL_ROOT
+
"
command
-
line
.
html
"
)
;
const
toolbox
=
await
gDevTools
.
showToolboxForTab
(
tab
{
toolId
:
"
jsdebugger
"
}
)
;
info
(
"
Open
a
first
URL
with
line
and
column
"
)
;
sendUrlViaCommandLine
(
url
)
;
const
dbg
=
toolbox
.
getPanel
(
"
jsdebugger
"
)
;
const
selectedLocation
=
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
const
location
=
dbg
.
_selectors
.
getSelectedLocation
(
dbg
.
_getState
(
)
)
;
return
location
?
.
line
=
=
line
?
location
:
false
;
}
)
;
is
(
selectedLocation
.
source
.
url
URL_ROOT
+
"
command
-
line
.
js
"
)
;
is
(
selectedLocation
.
line
line
)
;
is
(
selectedLocation
.
column
column
-
1
)
;
info
(
"
Open
another
URL
with
only
a
line
"
)
;
const
secondLine
=
6
;
const
url2
=
URL_ROOT
+
command
-
line
.
js
:
{
secondLine
}
;
sendUrlViaCommandLine
(
url2
)
;
const
selectedLocation2
=
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
const
location
=
dbg
.
_selectors
.
getSelectedLocation
(
dbg
.
_getState
(
)
)
;
return
location
.
line
=
=
secondLine
?
location
:
false
;
}
)
;
is
(
selectedLocation2
.
source
.
url
URL_ROOT
+
"
command
-
line
.
js
"
)
;
is
(
selectedLocation2
.
line
secondLine
)
;
is
(
selectedLocation2
.
column
0
)
;
await
toolbox
.
destroy
(
)
;
await
gBrowser
.
removeTab
(
tab
)
;
}
)
;
function
sendUrlViaCommandLine
(
url
)
{
const
cmdLine
=
Cu
.
createCommandLine
(
[
"
-
url
"
url
]
null
Ci
.
nsICommandLine
.
STATE_REMOTE_EXPLICIT
)
;
startup
.
handle
(
cmdLine
)
;
return
cmdLine
.
findFlag
(
"
url
"
false
)
!
=
-
1
;
}
