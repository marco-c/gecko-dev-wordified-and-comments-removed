"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
startTracing
"
"
stopTracing
"
"
addTracingListener
"
"
removeTracingListener
"
]
;
const
listeners
=
new
Set
(
)
;
const
customLazy
=
{
get
Debugger
(
)
{
if
(
globalThis
.
Debugger
)
{
return
globalThis
.
Debugger
;
}
if
(
typeof
isWorker
=
=
"
boolean
"
)
{
return
require
(
"
Debugger
"
)
;
}
const
{
addDebuggerToGlobal
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
sys
.
mjs
"
)
;
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
const
debuggerSandbox
=
Cu
.
Sandbox
(
systemPrincipal
)
;
addDebuggerToGlobal
(
debuggerSandbox
)
;
delete
customLazy
.
Debugger
;
customLazy
.
Debugger
=
debuggerSandbox
.
Debugger
;
return
customLazy
.
Debugger
;
}
get
DistinctCompartmentDebugger
(
)
{
const
{
addDebuggerToGlobal
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
sys
.
mjs
"
)
;
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
const
debuggerSandbox
=
Cu
.
Sandbox
(
systemPrincipal
{
freshCompartment
:
true
}
)
;
addDebuggerToGlobal
(
debuggerSandbox
)
;
delete
customLazy
.
DistinctCompartmentDebugger
;
customLazy
.
DistinctCompartmentDebugger
=
debuggerSandbox
.
Debugger
;
return
customLazy
.
DistinctCompartmentDebugger
;
}
}
;
class
JavaScriptTracer
{
constructor
(
options
)
{
this
.
onEnterFrame
=
this
.
onEnterFrame
.
bind
(
this
)
;
this
.
tracedGlobal
=
options
.
global
|
|
Cu
.
getGlobalForObject
(
options
)
;
this
.
dbg
=
this
.
makeDebugger
(
)
;
this
.
depth
=
0
;
this
.
prefix
=
options
.
prefix
?
{
options
.
prefix
}
:
:
"
"
;
this
.
loggingMethod
=
options
.
loggingMethod
;
if
(
!
this
.
loggingMethod
)
{
this
.
loggingMethod
=
typeof
isWorker
=
=
"
boolean
"
|
|
globalThis
.
constructor
.
name
=
=
"
WorkerDebuggerGlobalScope
"
?
dump
.
bind
(
null
)
:
dump
;
}
this
.
traceDOMEvents
=
!
!
options
.
traceDOMEvents
;
this
.
traceValues
=
!
!
options
.
traceValues
;
this
.
maxDepth
=
options
.
maxDepth
;
this
.
maxRecords
=
options
.
maxRecords
;
this
.
records
=
0
;
if
(
options
.
traceOnNextInteraction
&
&
typeof
isWorker
!
=
=
"
boolean
"
)
{
this
.
abortController
=
new
AbortController
(
)
;
const
listener
=
(
)
=
>
{
this
.
abortController
.
abort
(
)
;
if
(
this
.
dbg
)
{
this
.
#
startTracing
(
)
;
}
}
;
const
eventOptions
=
{
signal
:
this
.
abortController
.
signal
capture
:
true
}
;
const
eventHandler
=
this
.
tracedGlobal
.
docShell
.
chromeEventHandler
;
eventHandler
.
addEventListener
(
"
mousedown
"
listener
eventOptions
)
;
eventHandler
.
addEventListener
(
"
keydown
"
listener
eventOptions
)
;
}
else
{
this
.
#
startTracing
(
)
;
}
this
.
notifyToggle
(
true
)
;
}
#
startTracing
(
)
{
this
.
dbg
.
onEnterFrame
=
this
.
onEnterFrame
;
if
(
this
.
traceDOMEvents
)
{
this
.
startTracingDOMEvents
(
)
;
}
}
startTracingDOMEvents
(
)
{
this
.
debuggerNotificationObserver
=
new
DebuggerNotificationObserver
(
)
;
this
.
eventListener
=
this
.
eventListener
.
bind
(
this
)
;
this
.
debuggerNotificationObserver
.
addListener
(
this
.
eventListener
)
;
this
.
debuggerNotificationObserver
.
connect
(
this
.
tracedGlobal
)
;
this
.
currentDOMEvent
=
null
;
}
stopTracingDOMEvents
(
)
{
if
(
this
.
debuggerNotificationObserver
)
{
this
.
debuggerNotificationObserver
.
removeListener
(
this
.
eventListener
)
;
this
.
debuggerNotificationObserver
.
disconnect
(
this
.
tracedGlobal
)
;
this
.
debuggerNotificationObserver
=
null
;
}
this
.
currentDOMEvent
=
null
;
}
eventListener
(
notification
)
{
if
(
notification
.
phase
=
=
"
pre
"
)
{
if
(
notification
.
type
=
=
"
domEvent
"
)
{
let
{
type
}
=
notification
.
event
;
if
(
!
type
)
{
type
=
this
.
dbg
.
makeGlobalObjectReference
(
notification
.
global
)
.
makeDebuggeeValue
(
notification
.
event
)
.
getProperty
(
"
type
"
)
.
return
;
}
this
.
currentDOMEvent
=
DOM
(
{
type
}
)
;
}
else
{
this
.
currentDOMEvent
=
notification
.
type
;
}
}
else
{
this
.
currentDOMEvent
=
null
;
}
}
stopTracing
(
reason
=
"
"
)
{
if
(
!
this
.
isTracing
(
)
)
{
return
;
}
this
.
dbg
.
onEnterFrame
=
undefined
;
this
.
dbg
.
removeAllDebuggees
(
)
;
this
.
dbg
.
onNewGlobalObject
=
undefined
;
this
.
dbg
=
null
;
this
.
depth
=
0
;
this
.
options
=
null
;
if
(
this
.
abortController
)
{
this
.
abortController
.
abort
(
)
;
this
.
abortController
=
null
;
}
if
(
this
.
traceDOMEvents
)
{
this
.
stopTracingDOMEvents
(
)
;
}
this
.
tracedGlobal
=
null
;
this
.
notifyToggle
(
false
reason
)
;
}
isTracing
(
)
{
return
!
!
this
.
dbg
;
}
makeDebugger
(
)
{
const
{
isSystemPrincipal
}
=
typeof
Cu
=
=
"
object
"
?
Cu
.
getObjectPrincipal
(
this
.
tracedGlobal
)
:
{
}
;
const
dbg
=
isSystemPrincipal
?
new
customLazy
.
DistinctCompartmentDebugger
(
)
:
new
customLazy
.
Debugger
(
)
;
dbg
.
addDebuggee
(
this
.
tracedGlobal
)
;
return
dbg
;
}
notifyToggle
(
state
reason
)
{
let
shouldLogToStdout
=
listeners
.
size
=
=
0
;
for
(
const
listener
of
listeners
)
{
if
(
typeof
listener
.
onTracingToggled
=
=
"
function
"
)
{
shouldLogToStdout
|
=
listener
.
onTracingToggled
(
state
reason
)
;
}
}
if
(
shouldLogToStdout
)
{
if
(
state
)
{
this
.
loggingMethod
(
this
.
prefix
+
"
Start
tracing
JavaScript
\
n
"
)
;
}
else
{
if
(
reason
)
{
reason
=
(
reason
:
{
reason
}
)
;
}
this
.
loggingMethod
(
this
.
prefix
+
"
Stop
tracing
JavaScript
"
+
reason
+
"
\
n
"
)
;
}
}
}
notifyInfiniteLoop
(
)
{
let
shouldLogToStdout
=
listeners
.
size
=
=
0
;
for
(
const
listener
of
listeners
)
{
if
(
typeof
listener
.
onTracingInfiniteLoop
=
=
"
function
"
)
{
shouldLogToStdout
|
=
listener
.
onTracingInfiniteLoop
(
)
;
}
}
if
(
shouldLogToStdout
)
{
this
.
loggingMethod
(
this
.
prefix
+
"
Looks
like
an
infinite
recursion
?
We
stopped
the
JavaScript
tracer
but
code
may
still
be
running
!
\
n
"
)
;
}
}
onEnterFrame
(
frame
)
{
if
(
!
this
.
dbg
)
{
return
;
}
try
{
if
(
this
.
maxDepth
&
&
this
.
depth
>
=
this
.
maxDepth
)
{
return
;
}
if
(
this
.
depth
=
=
=
0
&
&
this
.
maxRecords
)
{
if
(
this
.
records
>
=
this
.
maxRecords
)
{
this
.
stopTracing
(
"
max
-
records
"
)
;
return
;
}
this
.
records
+
+
;
}
if
(
this
.
depth
=
=
100
)
{
this
.
notifyInfiniteLoop
(
)
;
this
.
stopTracing
(
"
infinite
-
loop
"
)
;
return
;
}
let
shouldLogToStdout
=
true
;
if
(
listeners
.
size
>
0
)
{
shouldLogToStdout
=
false
;
const
formatedDisplayName
=
formatDisplayName
(
frame
)
;
for
(
const
listener
of
listeners
)
{
if
(
typeof
listener
.
onTracingFrame
=
=
"
function
"
)
{
shouldLogToStdout
|
=
listener
.
onTracingFrame
(
{
frame
depth
:
this
.
depth
formatedDisplayName
prefix
:
this
.
prefix
currentDOMEvent
:
this
.
currentDOMEvent
}
)
;
}
}
}
if
(
shouldLogToStdout
)
{
this
.
logFrameToStdout
(
frame
)
;
}
this
.
depth
+
+
;
frame
.
onPop
=
(
)
=
>
{
this
.
depth
-
-
;
}
;
}
catch
(
e
)
{
console
.
error
(
"
Exception
while
tracing
javascript
"
e
)
;
}
}
logFrameToStdout
(
frame
)
{
const
{
script
}
=
frame
;
const
{
lineNumber
columnNumber
}
=
script
.
getOffsetMetadata
(
frame
.
offset
)
;
const
padding
=
"
"
.
repeat
(
this
.
depth
+
1
)
;
if
(
this
.
currentDOMEvent
&
&
this
.
depth
=
=
0
)
{
this
.
loggingMethod
(
this
.
prefix
+
padding
+
this
.
currentDOMEvent
+
"
\
n
"
)
;
}
const
href
=
{
script
.
source
.
url
}
:
{
lineNumber
}
:
{
columnNumber
}
;
const
urlLink
=
\
x1B
]
8
;
;
{
href
}
\
x1B
\
\
{
href
}
\
x1B
]
8
;
;
\
x1B
\
\
;
let
message
=
{
padding
}
[
{
frame
.
implementation
}
]
>
{
urlLink
}
-
{
formatDisplayName
(
frame
)
}
;
if
(
this
.
traceValues
&
&
frame
.
arguments
)
{
message
+
=
"
(
"
;
for
(
let
i
=
0
l
=
frame
.
arguments
.
length
;
i
<
l
;
i
+
+
)
{
const
arg
=
frame
.
arguments
[
i
]
;
if
(
arg
?
.
unsafeDereference
)
{
if
(
arg
.
isClassConstructor
)
{
message
+
=
"
class
"
+
arg
.
name
;
}
else
{
message
+
=
objectToString
(
arg
.
unsafeDereference
(
)
)
;
}
}
else
{
message
+
=
primitiveToString
(
arg
)
;
}
if
(
i
<
l
-
1
)
{
message
+
=
"
"
;
}
}
message
+
=
"
)
"
;
}
this
.
loggingMethod
(
this
.
prefix
+
message
+
"
\
n
"
)
;
}
}
function
objectToString
(
obj
)
{
if
(
Element
.
isInstance
(
obj
)
)
{
let
message
=
<
{
obj
.
tagName
}
;
if
(
obj
.
id
)
{
message
+
=
#
{
obj
.
id
}
;
}
if
(
obj
.
className
)
{
message
+
=
.
{
obj
.
className
}
;
}
message
+
=
"
>
"
;
return
message
;
}
else
if
(
Array
.
isArray
(
obj
)
)
{
return
Array
(
{
obj
.
length
}
)
;
}
else
if
(
Event
.
isInstance
(
obj
)
)
{
return
Event
(
{
obj
.
type
}
)
target
=
{
objectToString
(
obj
.
target
)
}
;
}
else
if
(
typeof
obj
=
=
=
"
function
"
)
{
return
function
{
obj
.
name
|
|
"
anonymous
"
}
(
)
;
}
return
obj
;
}
function
primitiveToString
(
value
)
{
const
type
=
typeof
value
;
if
(
type
=
=
=
"
string
"
)
{
return
JSON
.
stringify
(
value
)
;
}
else
if
(
value
=
=
=
0
&
&
1
/
value
=
=
=
-
Infinity
)
{
return
"
-
0
"
;
}
else
if
(
type
=
=
=
"
bigint
"
)
{
return
BigInt
(
{
value
}
)
;
}
else
if
(
value
&
&
typeof
value
.
toString
=
=
=
"
function
"
)
{
return
value
.
toString
(
)
;
}
return
value
;
}
function
formatDisplayName
(
frame
)
{
if
(
frame
.
type
=
=
=
"
call
"
)
{
const
callee
=
frame
.
callee
;
return
"
"
+
(
callee
.
name
|
|
callee
.
displayName
|
|
"
anonymous
"
)
;
}
return
(
{
frame
.
type
}
)
;
}
let
activeTracer
=
null
;
function
startTracing
(
options
)
{
if
(
!
options
)
{
throw
new
Error
(
"
startTracing
excepts
an
options
object
as
first
argument
"
)
;
}
if
(
!
activeTracer
)
{
activeTracer
=
new
JavaScriptTracer
(
options
)
;
}
else
{
console
.
warn
(
"
Can
'
t
start
JavaScript
tracing
another
tracer
is
still
active
and
we
only
support
one
tracer
at
a
time
.
"
)
;
}
}
function
stopTracing
(
)
{
if
(
activeTracer
)
{
activeTracer
.
stopTracing
(
)
;
activeTracer
=
null
;
}
else
{
console
.
warn
(
"
Can
'
t
stop
JavaScript
Tracing
as
we
were
not
tracing
.
"
)
;
}
}
function
addTracingListener
(
listener
)
{
listeners
.
add
(
listener
)
;
if
(
activeTracer
?
.
isTracing
(
)
&
&
typeof
listener
.
onTracingToggled
=
=
"
function
"
)
{
listener
.
onTracingToggled
(
true
)
;
}
}
function
removeTracingListener
(
listener
)
{
listeners
.
delete
(
listener
)
;
}
if
(
typeof
module
=
=
"
object
"
)
{
module
.
exports
=
{
startTracing
stopTracing
addTracingListener
removeTracingListener
}
;
}
