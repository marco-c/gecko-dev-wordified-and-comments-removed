const
PROPERTIES
=
[
{
property
:
"
z
-
index
"
value
:
"
2
"
}
{
property
:
"
top
"
value
:
"
20px
"
}
{
property
:
"
right
"
value
:
"
20px
"
}
{
property
:
"
bottom
"
value
:
"
20px
"
}
{
property
:
"
left
"
value
:
"
20px
"
}
]
;
const
POSITIONS
=
[
{
position
:
"
unset
"
isActive
:
false
}
{
position
:
"
initial
"
isActive
:
false
}
{
position
:
"
inherit
"
isActive
:
false
}
{
position
:
"
static
"
isActive
:
false
}
{
position
:
"
absolute
"
isActive
:
true
}
{
position
:
"
relative
"
isActive
:
true
}
{
position
:
"
fixed
"
isActive
:
true
}
{
position
:
"
sticky
"
isActive
:
true
}
]
;
function
makeTestCase
(
property
value
position
isActive
)
{
return
{
info
:
{
property
}
is
{
isActive
?
"
"
:
"
in
"
}
active
when
position
is
{
position
}
property
tagName
:
"
div
"
rules
:
[
div
{
{
property
}
:
{
value
}
;
position
:
{
position
}
;
}
]
isActive
}
;
}
const
mainTests
=
[
]
;
for
(
const
{
property
value
}
of
PROPERTIES
)
{
for
(
const
{
position
isActive
}
of
POSITIONS
)
{
mainTests
.
push
(
makeTestCase
(
property
value
position
isActive
)
)
;
}
}
mainTests
.
push
(
{
info
:
"
z
-
index
is
active
even
on
unpositioned
elements
if
they
are
grid
items
"
property
:
"
z
-
index
"
createTestElement
:
rootNode
=
>
{
const
container
=
document
.
createElement
(
"
div
"
)
;
const
element
=
document
.
createElement
(
"
span
"
)
;
container
.
append
(
element
)
;
rootNode
.
append
(
container
)
;
return
element
;
}
rules
:
[
"
div
{
display
:
grid
;
}
"
"
span
{
z
-
index
:
3
;
}
"
]
ruleIndex
:
1
isActive
:
true
}
)
;
mainTests
.
push
(
{
info
:
"
z
-
index
is
active
even
on
unpositioned
elements
if
they
are
flex
items
"
property
:
"
z
-
index
"
createTestElement
:
rootNode
=
>
{
const
container
=
document
.
createElement
(
"
div
"
)
;
const
element
=
document
.
createElement
(
"
span
"
)
;
container
.
append
(
element
)
;
rootNode
.
append
(
container
)
;
return
element
;
}
rules
:
[
"
div
{
display
:
flex
;
}
"
"
span
{
z
-
index
:
3
;
}
"
]
ruleIndex
:
1
isActive
:
true
}
)
;
export
default
mainTests
;
