"
use
strict
"
;
var
Cu
=
Components
.
utils
;
const
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
debugger
-
client
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
Services
=
require
(
"
Services
"
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
debugger
.
log
"
true
)
;
SimpleTest
.
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
devtools
.
debugger
.
log
"
)
;
}
)
;
if
(
!
DebuggerServer
.
initialized
)
{
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerActors
(
{
browser
:
true
root
:
true
tab
:
true
}
)
;
SimpleTest
.
registerCleanupFunction
(
function
(
)
{
DebuggerServer
.
destroy
(
)
;
}
)
;
}
async
function
attachURL
(
url
)
{
let
win
=
window
.
open
(
url
"
_blank
"
)
;
let
client
=
null
;
let
cleanup
=
function
*
(
)
{
if
(
client
)
{
yield
client
.
close
(
)
;
client
=
null
;
}
if
(
win
)
{
win
.
close
(
)
;
win
=
null
;
}
}
;
SimpleTest
.
registerCleanupFunction
(
cleanup
)
;
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
await
client
.
connect
(
)
;
let
{
tabs
}
=
await
client
.
listTabs
(
)
;
let
attachedTab
=
tabs
.
find
(
tab
=
>
tab
.
url
=
=
=
url
)
;
if
(
!
attachedTab
)
{
throw
new
Error
(
Could
not
find
a
tab
matching
URL
{
url
}
)
;
}
const
[
tabClient
]
=
await
client
.
attachTab
(
attachedTab
.
actor
)
;
const
[
consoleClient
]
=
await
client
.
attachConsole
(
attachedTab
.
consoleActor
[
]
)
;
return
{
tab
:
attachedTab
tabClient
consoleClient
cleanup
}
;
}
