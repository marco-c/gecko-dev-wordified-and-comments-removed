"
use
strict
"
;
add_task
(
threadFrontTest
(
(
{
threadFront
debuggee
}
)
=
>
{
return
new
Promise
(
resolve
=
>
{
threadFront
.
once
(
"
paused
"
async
function
(
packet
)
{
const
line
=
debuggee
.
line0
+
3
;
const
source
=
await
getSourceById
(
threadFront
packet
.
frame
.
where
.
actor
)
;
const
response
=
await
threadFront
.
setBreakpoint
(
{
sourceUrl
:
source
.
url
line
}
{
}
)
;
assert
.
equal
(
response
.
actuallocation
.
source
.
actor
source
.
actor
)
;
Assert
.
equal
(
response
.
actualLocation
.
line
location
.
line
+
1
)
;
threadFront
.
once
(
"
paused
"
function
(
packet
)
{
Assert
.
equal
(
packet
.
frame
.
where
.
actor
source
.
actor
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
location
.
line
+
1
)
;
Assert
.
equal
(
packet
.
why
.
type
"
breakpoint
"
)
;
Assert
.
equal
(
packet
.
why
.
actors
[
0
]
response
.
bpClient
.
actor
)
;
Assert
.
equal
(
debuggee
.
a
1
)
;
Assert
.
equal
(
debuggee
.
b
undefined
)
;
response
.
bpClient
.
remove
(
function
(
response
)
{
threadFront
.
resume
(
)
.
then
(
resolve
)
;
}
)
;
}
)
;
threadFront
.
resume
(
)
;
}
)
;
Cu
.
evalInSandbox
(
"
var
line0
=
Error
(
)
.
lineNumber
;
\
n
"
+
"
function
foo
(
)
{
\
n
"
+
"
this
.
a
=
1
;
\
n
"
+
"
/
/
A
comment
.
\
n
"
+
"
this
.
b
=
2
;
\
n
"
+
"
}
\
n
"
debuggee
"
1
.
7
"
"
script1
.
js
"
)
;
Cu
.
evalInSandbox
(
"
var
line1
=
Error
(
)
.
lineNumber
;
\
n
"
+
"
debugger
;
\
n
"
+
"
foo
(
)
;
\
n
"
debuggee
"
1
.
7
"
"
script2
.
js
"
)
;
}
)
;
}
)
)
;
