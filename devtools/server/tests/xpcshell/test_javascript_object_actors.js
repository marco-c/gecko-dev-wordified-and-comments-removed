"
use
strict
"
;
Services
.
prefs
.
setBoolPref
(
"
security
.
allow_eval_with_system_principal
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
allow_eval_with_system_principal
"
)
;
}
)
;
const
{
JSObjectsTestUtils
CONTEXTS
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
JSObjectsTestUtils
.
sys
.
mjs
"
)
;
JSObjectsTestUtils
.
init
(
this
)
;
const
EXPECTED_VALUES_FILE
=
"
test_javascript_object_actors
.
snapshot
.
mjs
"
;
add_task
(
threadFrontTest
(
async
function
test
(
{
threadFront
debuggee
_isWorkerServer
}
)
{
await
JSObjectsTestUtils
.
runTest
(
EXPECTED_VALUES_FILE
async
function
(
{
context
expression
}
)
{
if
(
context
!
=
CONTEXTS
.
JS
)
{
return
undefined
;
}
debuggee
.
eval
(
function
stopMe
(
arg
)
{
debugger
;
}
)
;
const
packet
=
await
executeOnNextTickAndWaitForPause
(
async
(
)
=
>
{
let
value
;
try
{
value
=
debuggee
.
eval
(
expression
)
;
}
catch
(
e
)
{
value
=
e
;
}
if
(
value
instanceof
debuggee
.
Promise
)
{
value
.
catch
(
function
(
)
{
}
)
;
}
debuggee
.
stopMe
(
value
)
;
}
threadFront
)
;
const
firstArg
=
packet
.
frame
.
arguments
[
0
]
;
await
threadFront
.
resume
(
)
;
stripActorIDs
(
firstArg
)
;
return
firstArg
;
}
)
;
}
{
principal
:
"
https
:
/
/
example
.
org
"
}
)
)
;
function
stripActorIDs
(
obj
)
{
for
(
const
name
in
obj
)
{
if
(
name
=
=
"
actor
"
)
{
obj
[
name
]
=
"
<
actor
-
id
>
"
;
}
if
(
typeof
obj
[
name
]
=
=
"
object
"
)
{
stripActorIDs
(
obj
[
name
]
)
;
}
}
}
