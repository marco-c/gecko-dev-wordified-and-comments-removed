"
use
strict
"
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
}
)
=
>
{
const
packet
=
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evalCode
(
debuggee
)
threadFront
)
;
const
environment
=
await
packet
.
frame
.
getEnvironment
(
)
;
const
grip
=
environment
.
bindings
.
variables
.
p
;
ok
(
grip
.
value
.
preview
)
;
equal
(
grip
.
value
.
class
"
Promise
"
)
;
equal
(
grip
.
value
.
promiseState
.
state
"
rejected
"
)
;
equal
(
grip
.
value
.
promiseState
.
reason
.
actorID
packet
.
frame
.
arguments
[
0
]
.
actorID
"
The
promise
'
s
rejected
state
reason
should
be
the
same
value
passed
"
+
"
to
the
then
function
"
)
;
}
)
)
;
function
evalCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
"
doTest
(
)
;
\
n
"
+
function
doTest
(
)
{
var
resolved
=
Promise
.
reject
(
new
Error
(
"
uh
oh
"
)
)
;
resolved
.
catch
(
(
)
=
>
{
var
p
=
resolved
;
debugger
;
}
)
;
}
debuggee
)
;
}
