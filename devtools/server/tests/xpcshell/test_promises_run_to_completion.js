"
use
strict
"
;
const
Debugger
=
require
(
"
Debugger
"
)
;
function
test_promises_run_to_completion
(
)
{
const
g
=
createTestGlobal
(
"
test
global
for
test_promises_run_to_completion
.
js
"
)
;
const
dbg
=
new
Debugger
(
g
)
;
g
.
Assert
=
Assert
;
const
log
=
[
"
"
]
;
g
.
log
=
log
;
dbg
.
onDebuggerStatement
=
function
handleDebuggerStatement
(
)
{
dbg
.
onDebuggerStatement
=
undefined
;
log
[
0
]
+
=
"
debug
-
handler
(
"
;
Promise
.
resolve
(
42
)
.
then
(
v
=
>
{
Assert
.
equal
(
v
42
"
debugger
callback
promise
handler
got
the
right
value
"
)
;
log
[
0
]
+
=
"
debug
-
react
"
;
}
)
;
log
[
0
]
+
=
"
(
"
;
force_microtask_checkpoint
(
)
;
log
[
0
]
+
=
"
)
"
;
Promise
.
resolve
(
42
)
.
then
(
(
)
=
>
{
log
[
0
]
+
=
"
(
trailing
)
"
;
}
)
;
log
[
0
]
+
=
"
)
"
;
}
;
Cu
.
evalInSandbox
(
log
[
0
]
+
=
"
eval
(
"
;
Promise
.
resolve
(
42
)
.
then
(
function
debuggeePromiseCallback
(
v
)
{
Assert
.
equal
(
v
42
"
debuggee
promise
handler
got
the
right
value
"
)
;
/
/
Debugger
microtask
checkpoints
must
not
run
debuggee
microtasks
so
/
/
this
callback
should
run
at
the
next
microtask
checkpoint
*
not
*
/
/
performed
by
the
debugger
.
log
[
0
]
+
=
"
eval
-
react
"
;
}
)
;
log
[
0
]
+
=
"
debugger
(
"
;
debugger
;
log
[
0
]
+
=
"
)
)
"
;
g
)
;
log
[
0
]
+
=
"
final
(
"
;
force_microtask_checkpoint
(
)
;
log
[
0
]
+
=
"
)
"
;
Assert
.
equal
(
log
[
0
]
\
eval
(
\
debugger
(
\
debug
-
handler
(
\
(
debug
-
react
)
\
)
\
(
trailing
)
\
)
)
\
final
(
\
eval
-
react
\
)
"
microtasks
ran
as
expected
"
)
;
run_next_test
(
)
;
}
function
force_microtask_checkpoint
(
)
{
let
ran
=
false
;
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
{
ran
=
true
;
}
)
;
Services
.
tm
.
spinEventLoopUntil
(
"
Test
(
test_promises_run_to_completion
.
js
:
force_microtask_checkpoint
)
"
(
)
=
>
ran
)
;
}
add_test
(
test_promises_run_to_completion
)
;
