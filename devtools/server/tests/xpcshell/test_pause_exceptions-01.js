"
use
strict
"
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
commands
}
)
=
>
{
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evaluateTestCode
(
debuggee
)
threadFront
)
;
await
commands
.
threadConfigurationCommand
.
updateConfiguration
(
{
pauseOnExceptions
:
true
ignoreCaughtExceptions
:
false
}
)
;
threadFront
.
resume
(
)
;
const
packet
=
await
waitForPause
(
threadFront
)
;
Assert
.
equal
(
packet
.
why
.
type
"
exception
"
)
;
Assert
.
equal
(
packet
.
why
.
exception
42
)
;
threadFront
.
resume
(
)
;
}
)
)
;
function
evaluateTestCode
(
debuggee
)
{
debuggee
.
eval
(
"
(
"
+
function
(
)
{
function
stopMe
(
)
{
debugger
;
throw
42
;
}
try
{
stopMe
(
)
;
}
catch
(
e
)
{
}
}
+
"
)
(
)
"
)
;
}
