"
use
strict
"
;
const
{
ExtensionTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
jsm
"
)
;
const
{
createMissingIndexedDBDirs
extensionScriptWithMessageListener
getExtensionConfig
openAddonStoragePanel
shutdown
startupExtension
}
=
require
(
"
resource
:
/
/
test
/
helper_test_extension_storage_actor
.
js
"
)
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
Message
manager
disconnected
/
)
;
const
{
createAppInfo
promiseStartupManager
}
=
AddonTestUtils
;
const
EXTENSION_STORAGE_ENABLED_PREF
=
"
devtools
.
storage
.
extensionStorage
.
enabled
"
;
AddonTestUtils
.
init
(
this
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
42
"
)
;
ExtensionTestUtils
.
init
(
this
)
;
Services
.
prefs
.
setBoolPref
(
EXTENSION_STORAGE_ENABLED_PREF
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
EXTENSION_STORAGE_ENABLED_PREF
)
;
}
)
;
add_task
(
async
function
setup
(
)
{
await
promiseStartupManager
(
)
;
const
dir
=
createMissingIndexedDBDirs
(
)
;
Assert
.
ok
(
dir
.
exists
(
)
"
Should
have
a
'
storage
/
permanent
'
dir
in
the
profile
dir
"
)
;
}
)
;
add_task
(
async
function
test_panel_live_reload
(
)
{
const
EXTENSION_ID
=
"
test_panel_live_reload
xpcshell
.
mozilla
.
org
"
;
let
manifest
=
{
version
:
"
1
.
0
"
applications
:
{
gecko
:
{
id
:
EXTENSION_ID
}
}
}
;
info
(
"
Loading
extension
version
1
.
0
"
)
;
const
extension
=
await
startupExtension
(
getExtensionConfig
(
{
manifest
background
:
extensionScriptWithMessageListener
}
)
)
;
info
(
"
Waiting
for
message
from
test
extension
"
)
;
const
host
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
info
(
"
Adding
storage
item
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
a
:
123
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
const
{
target
extensionStorage
storageFront
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
manifest
=
{
.
.
.
manifest
version
:
"
2
.
0
"
}
;
info
(
"
Update
to
version
2
.
0
"
)
;
const
promiseStoragePanelUpdated
=
new
Promise
(
resolve
=
>
{
storageFront
.
on
(
"
stores
-
update
"
function
updateListener
(
updates
)
{
info
(
Got
stores
-
update
event
:
{
JSON
.
stringify
(
updates
)
}
)
;
const
extStorageAdded
=
updates
.
added
?
.
extensionStorage
;
if
(
host
in
extStorageAdded
&
&
extStorageAdded
[
host
]
.
length
>
0
)
{
storageFront
.
off
(
"
stores
-
update
"
updateListener
)
;
resolve
(
)
;
}
}
)
;
}
)
;
await
extension
.
upgrade
(
getExtensionConfig
(
{
manifest
background
:
extensionScriptWithMessageListener
}
)
)
;
await
Promise
.
all
(
[
extension
.
awaitMessage
(
"
extension
-
origin
"
)
promiseStoragePanelUpdated
]
)
;
const
{
data
}
=
await
extensionStorage
.
getStoreObjects
(
host
)
;
Assert
.
deepEqual
(
data
[
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
"
123
"
}
isValueEditable
:
true
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
await
shutdown
(
extension
target
)
;
}
)
;
