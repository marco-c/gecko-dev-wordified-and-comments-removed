"
use
strict
"
;
async
function
connect
(
)
{
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerAllActors
(
)
;
const
client
=
new
DevToolsClient
(
DevToolsServer
.
connectPipe
(
)
)
;
await
client
.
connect
(
)
;
const
addons
=
await
client
.
mainRoot
.
getFront
(
"
addons
"
)
;
return
[
client
addons
]
;
}
add_task
(
async
function
setup
(
)
{
await
startupAddonsManager
(
)
;
}
)
;
add_task
(
async
function
testSuccessfulInstall
(
)
{
const
[
client
addons
]
=
await
connect
(
)
;
const
allowMissing
=
false
;
const
usePlatformSeparator
=
true
;
const
addonPath
=
getFilePath
(
"
addons
/
web
-
extension
"
allowMissing
usePlatformSeparator
)
;
const
installedAddon
=
await
addons
.
installTemporaryAddon
(
addonPath
)
;
equal
(
installedAddon
.
id
"
test
-
addons
-
actor
mozilla
.
org
"
)
;
equal
(
installedAddon
.
actor
false
)
;
const
addonList
=
await
client
.
mainRoot
.
listAddons
(
)
;
ok
(
addonList
&
&
addonList
.
map
(
a
=
>
a
.
name
)
"
Received
list
of
add
-
ons
"
)
;
const
addon
=
addonList
.
find
(
a
=
>
a
.
id
=
=
=
installedAddon
.
id
)
;
ok
(
addon
"
Test
add
-
on
appeared
in
root
install
list
"
)
;
await
close
(
client
)
;
}
)
;
add_task
(
async
function
testNonExistantPath
(
)
{
const
[
client
addons
]
=
await
connect
(
)
;
await
Assert
.
rejects
(
addons
.
installTemporaryAddon
(
"
some
-
non
-
existant
-
path
"
)
/
Could
not
install
add
-
on
.
*
Component
returned
failure
/
)
;
await
close
(
client
)
;
}
)
;
