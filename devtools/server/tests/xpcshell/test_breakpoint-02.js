"
use
strict
"
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
client
debuggee
}
)
=
>
{
const
packet
=
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evaluateTestCode
(
debuggee
)
threadFront
)
;
const
source
=
await
getSourceById
(
threadFront
packet
.
frame
.
where
.
actor
)
;
const
location
=
{
sourceUrl
:
source
.
url
line
:
debuggee
.
line0
+
3
}
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
debuggee
.
line0
+
1
)
;
Assert
.
equal
(
packet
.
why
.
type
"
debuggerStatement
"
)
;
await
threadFront
.
resume
(
)
;
threadFront
.
once
(
"
paused
"
function
(
packet
)
{
Assert
.
equal
(
packet
.
why
.
type
"
interrupted
"
)
;
}
)
;
threadFront
.
setBreakpoint
(
location
{
}
)
;
await
client
.
waitForRequestsToSettle
(
)
;
}
)
)
;
function
evaluateTestCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
"
var
line0
=
Error
(
)
.
lineNumber
;
\
n
"
+
"
debugger
;
\
n
"
+
"
var
a
=
1
;
\
n
"
+
"
var
b
=
2
;
\
n
"
debuggee
)
;
}
