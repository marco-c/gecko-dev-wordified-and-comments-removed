"
use
strict
"
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
}
)
=
>
{
const
packet1
=
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evalCode
(
debuggee
)
threadFront
)
;
const
source
=
await
getSourceById
(
threadFront
packet1
.
frame
.
where
.
actor
)
;
const
location1
=
{
sourceUrl
:
source
.
url
line
:
3
}
;
threadFront
.
setBreakpoint
(
location1
{
condition
:
"
a
=
=
=
2
"
}
)
;
const
location2
=
{
sourceUrl
:
source
.
url
line
:
4
}
;
threadFront
.
setBreakpoint
(
location2
{
condition
:
"
a
=
=
=
1
"
}
)
;
const
packet2
=
await
resumeAndWaitForPause
(
threadFront
)
;
Assert
.
equal
(
packet2
.
why
.
type
"
breakpoint
"
)
;
Assert
.
equal
(
packet2
.
frame
.
where
.
line
4
)
;
await
threadFront
.
removeBreakpoint
(
location2
)
;
await
threadFront
.
resume
(
)
;
}
)
)
;
function
evalCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
"
debugger
;
\
n
"
+
"
var
a
=
1
;
\
n
"
+
"
var
b
=
2
;
\
n
"
+
"
b
+
+
;
"
+
"
debugger
;
"
debuggee
"
1
.
8
"
"
test
.
js
"
1
)
;
}
