"
use
strict
"
;
const
ConsoleMessages
=
require
(
"
devtools
/
server
/
actors
/
resources
/
console
-
messages
"
)
;
add_task
(
threadFrontTest
(
async
(
{
threadActor
threadFront
debuggee
client
}
)
=
>
{
let
lastMessage
lastExpression
;
const
targetActor
=
threadActor
.
_parent
;
targetActor
.
_consoleActor
=
{
evaluateJS
(
expression
)
{
lastExpression
=
expression
;
}
}
;
ConsoleMessages
.
watch
(
targetActor
{
onAvailable
:
messages
=
>
{
if
(
messages
.
length
>
0
)
{
lastMessage
=
messages
[
0
]
.
message
;
}
}
}
)
;
const
packet
=
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evalCode
(
debuggee
)
threadFront
)
;
const
source
=
await
getSourceById
(
threadFront
packet
.
frame
.
where
.
actor
)
;
threadFront
.
setBreakpoint
(
{
sourceUrl
:
source
.
url
line
:
3
}
{
logValue
:
"
a
"
}
)
;
await
client
.
waitForRequestsToSettle
(
)
;
await
threadFront
.
resume
(
)
;
if
(
lastMessage
)
{
Assert
.
equal
(
lastMessage
.
level
"
logPoint
"
)
;
Assert
.
equal
(
lastMessage
.
arguments
[
0
]
"
three
"
)
;
}
else
{
Assert
.
equal
(
lastExpression
.
text
"
console
.
log
(
.
.
.
[
a
]
)
"
)
;
Assert
.
equal
(
lastExpression
.
lineNumber
3
)
;
}
}
)
)
;
function
evalCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
"
debugger
;
\
n
"
+
"
var
a
=
'
three
'
;
\
n
"
+
"
var
b
=
2
;
\
n
"
debuggee
"
1
.
8
"
"
test
.
js
"
1
)
;
}
