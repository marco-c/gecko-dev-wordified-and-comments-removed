"
use
strict
"
;
const
BLACK_BOXED_URL
=
"
http
:
/
/
example
.
com
/
blackboxme
.
js
"
;
const
SOURCE_URL
=
"
http
:
/
/
example
.
com
/
source
.
js
"
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
}
)
=
>
{
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evalCode
(
debuggee
)
threadFront
)
;
threadFront
.
setBreakpoint
(
{
sourceUrl
:
BLACK_BOXED_URL
line
:
2
}
{
}
)
;
await
threadFront
.
resume
(
)
;
const
{
error
sources
}
=
await
threadFront
.
getSources
(
)
;
Assert
.
ok
(
!
error
"
Should
not
get
an
error
:
"
+
error
)
;
const
sourceFront
=
threadFront
.
source
(
sources
.
filter
(
s
=
>
s
.
url
=
=
BLACK_BOXED_URL
)
[
0
]
)
;
await
blackBox
(
sourceFront
)
;
const
packet1
=
await
executeOnNextTickAndWaitForPause
(
debuggee
.
runTest
threadFront
)
;
Assert
.
equal
(
packet1
.
why
.
type
"
debuggerStatement
"
"
We
should
pass
over
the
breakpoint
since
the
source
is
black
boxed
.
"
)
;
await
threadFront
.
resume
(
)
;
await
unBlackBox
(
sourceFront
)
;
const
packet2
=
await
executeOnNextTickAndWaitForPause
(
debuggee
.
runTest
threadFront
)
;
Assert
.
equal
(
packet2
.
why
.
type
"
breakpoint
"
"
We
should
hit
the
breakpoint
again
"
)
;
await
threadFront
.
resume
(
)
;
}
)
)
;
function
evalCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
"
"
+
function
doStuff
(
k
)
{
const
arg
=
15
;
k
(
arg
)
;
}
debuggee
"
1
.
8
"
BLACK_BOXED_URL
1
)
;
Cu
.
evalInSandbox
(
"
"
+
function
runTest
(
)
{
doStuff
(
function
(
)
{
debugger
;
}
)
;
}
+
"
\
n
debugger
;
"
debuggee
"
1
.
8
"
SOURCE_URL
1
)
;
}
