"
use
strict
"
;
const
{
waitForTick
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
client
debuggee
commands
}
)
=
>
{
let
onResume
=
null
;
let
packet
=
null
;
threadFront
.
once
(
"
paused
"
function
(
pkt
)
{
packet
=
pkt
;
onResume
=
threadFront
.
resume
(
)
;
}
)
;
await
commands
.
threadConfigurationCommand
.
updateConfiguration
(
{
pauseOnExceptions
:
true
ignoreCaughtExceptions
:
true
}
)
;
await
evaluateTestCode
(
debuggee
"
42
"
)
;
await
onResume
;
Assert
.
equal
(
!
!
packet
true
)
;
Assert
.
equal
(
packet
.
why
.
type
"
exception
"
)
;
Assert
.
equal
(
packet
.
why
.
exception
"
42
"
)
;
packet
=
null
;
threadFront
.
once
(
"
paused
"
function
(
pkt
)
{
packet
=
pkt
;
onResume
=
threadFront
.
resume
(
)
;
}
)
;
await
commands
.
threadConfigurationCommand
.
updateConfiguration
(
{
pauseOnExceptions
:
false
ignoreCaughtExceptions
:
true
}
)
;
await
evaluateTestCode
(
debuggee
"
43
"
)
;
Assert
.
equal
(
!
!
packet
false
)
;
await
commands
.
threadConfigurationCommand
.
updateConfiguration
(
{
pauseOnExceptions
:
true
ignoreCaughtExceptions
:
true
}
)
;
await
evaluateTestCode
(
debuggee
"
44
"
)
;
await
onResume
;
Assert
.
equal
(
!
!
packet
true
)
;
Assert
.
equal
(
packet
.
why
.
type
"
exception
"
)
;
Assert
.
equal
(
packet
.
why
.
exception
"
44
"
)
;
}
{
doNotRunWorker
:
true
}
)
)
;
async
function
evaluateTestCode
(
debuggee
throwValue
)
{
await
waitForTick
(
)
;
try
{
Cu
.
evalInSandbox
(
/
/
1
function
stopMeAgain
(
)
{
/
/
2
throw
{
throwValue
}
;
/
/
3
}
/
/
4
stopMeAgain
(
)
;
/
/
5
debuggee
"
1
.
8
"
"
test_pause_exceptions
-
04
.
js
"
1
)
;
}
catch
(
e
)
{
}
}
