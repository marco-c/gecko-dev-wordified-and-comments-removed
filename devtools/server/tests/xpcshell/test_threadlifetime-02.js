"
use
strict
"
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
client
}
)
=
>
{
const
packet
=
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evaluateTestCode
(
debuggee
)
threadFront
)
;
const
pauseGrip
=
packet
.
frame
.
arguments
[
0
]
;
const
response
=
await
client
.
request
(
{
to
:
pauseGrip
.
actor
type
:
"
threadGrip
"
}
)
;
Assert
.
equal
(
response
.
error
undefined
)
;
threadFront
.
resume
(
)
;
const
packet2
=
await
waitForPause
(
threadFront
)
;
Assert
.
equal
(
pauseGrip
.
actor
packet2
.
frame
.
arguments
[
0
]
.
actor
)
;
const
objFront
=
new
ObjectFront
(
threadFront
.
conn
threadFront
.
targetFront
threadFront
pauseGrip
)
;
await
objFront
.
release
(
)
;
const
objFront2
=
new
ObjectFront
(
threadFront
.
conn
threadFront
.
targetFront
threadFront
pauseGrip
)
;
try
{
await
objFront2
.
request
(
{
to
:
pauseGrip
.
actor
type
:
"
bogusRequest
"
}
)
.
catch
(
function
(
error
)
{
Assert
.
ok
(
!
!
error
.
message
.
match
(
/
noSuchActor
/
)
)
;
threadFront
.
resume
(
)
;
throw
new
Error
(
)
;
}
)
;
ok
(
false
"
bogusRequest
should
throw
"
)
;
}
catch
(
e
)
{
ok
(
true
"
bogusRequest
thrown
"
)
;
}
}
)
)
;
function
evaluateTestCode
(
debuggee
)
{
debuggee
.
eval
(
"
(
"
+
function
(
)
{
function
stopMe
(
arg1
)
{
debugger
;
debugger
;
}
stopMe
(
{
obj
:
true
}
)
;
}
+
"
)
(
)
"
)
;
}
