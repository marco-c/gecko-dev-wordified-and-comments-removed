"
use
strict
"
;
const
{
FileUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
sys
.
mjs
"
)
;
const
{
ExtensionTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
jsm
"
)
;
const
{
CommandsFactory
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
commands
/
commands
-
factory
.
js
"
)
;
async
function
setupExtensionDebugging
(
id
)
{
const
commands
=
await
CommandsFactory
.
forAddon
(
id
)
;
const
target
=
await
commands
.
descriptorFront
.
getTarget
(
)
;
return
{
front
:
commands
.
descriptorFront
target
}
;
}
exports
.
setupExtensionDebugging
=
setupExtensionDebugging
;
async
function
startupExtension
(
extConfig
)
{
const
extension
=
ExtensionTestUtils
.
loadExtension
(
extConfig
)
;
await
extension
.
startup
(
)
;
return
extension
;
}
exports
.
startupExtension
=
startupExtension
;
async
function
openAddonStoragePanel
(
id
)
{
const
{
target
}
=
await
setupExtensionDebugging
(
id
)
;
const
storageFront
=
await
target
.
getFront
(
"
storage
"
)
;
const
stores
=
await
storageFront
.
listStores
(
)
;
const
extensionStorage
=
stores
.
extensionStorage
|
|
null
;
return
{
target
extensionStorage
storageFront
}
;
}
exports
.
openAddonStoragePanel
=
openAddonStoragePanel
;
function
getExtensionConfig
(
options
=
{
}
)
{
const
{
manifest
.
.
.
otherOptions
}
=
options
;
const
baseConfig
=
{
manifest
:
{
.
.
.
manifest
permissions
:
[
"
storage
"
]
}
useAddonManager
:
"
temporary
"
}
;
return
{
.
.
.
baseConfig
.
.
.
otherOptions
}
;
}
exports
.
getExtensionConfig
=
getExtensionConfig
;
const
ext_no_bg
=
{
files
:
{
"
extension_page_in_tab
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
/
head
>
<
body
>
<
h1
>
Extension
Page
in
a
Tab
<
/
h1
>
<
script
src
=
"
extension_page_in_tab
.
js
"
>
<
/
script
>
<
/
body
>
<
/
html
>
"
extension_page_in_tab
.
js
"
:
extensionScriptWithMessageListener
}
}
;
exports
.
ext_no_bg
=
ext_no_bg
;
async
function
extensionScriptWithMessageListener
(
)
{
let
fireOnChanged
=
false
;
browser
.
storage
.
onChanged
.
addListener
(
(
)
=
>
{
if
(
fireOnChanged
)
{
fireOnChanged
=
false
;
browser
.
test
.
sendMessage
(
"
storage
-
local
-
onChanged
"
)
;
}
}
)
;
browser
.
test
.
onMessage
.
addListener
(
async
(
msg
.
.
.
args
)
=
>
{
let
item
=
null
;
switch
(
msg
)
{
case
"
storage
-
local
-
set
"
:
await
browser
.
storage
.
local
.
set
(
args
[
0
]
)
;
break
;
case
"
storage
-
local
-
get
"
:
item
=
await
browser
.
storage
.
local
.
get
(
args
[
0
]
)
;
break
;
case
"
storage
-
local
-
remove
"
:
await
browser
.
storage
.
local
.
remove
(
args
[
0
]
)
;
break
;
case
"
storage
-
local
-
clear
"
:
await
browser
.
storage
.
local
.
clear
(
)
;
break
;
case
"
storage
-
local
-
fireOnChanged
"
:
{
fireOnChanged
=
true
;
return
;
}
default
:
browser
.
test
.
fail
(
Unexpected
test
message
:
{
msg
}
)
;
}
browser
.
test
.
sendMessage
(
{
msg
}
:
done
item
)
;
}
)
;
browser
.
test
.
sendMessage
(
"
extension
-
origin
"
window
.
location
.
origin
)
;
}
exports
.
extensionScriptWithMessageListener
=
extensionScriptWithMessageListener
;
async
function
shutdown
(
extension
target
)
{
if
(
target
)
{
await
target
.
destroy
(
)
;
}
await
extension
.
unload
(
)
;
}
exports
.
shutdown
=
shutdown
;
function
createMissingIndexedDBDirs
(
)
{
const
dir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
.
clone
(
)
;
dir
.
append
(
"
storage
"
)
;
if
(
!
dir
.
exists
(
)
)
{
dir
.
create
(
dir
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
}
dir
.
append
(
"
permanent
"
)
;
if
(
!
dir
.
exists
(
)
)
{
dir
.
create
(
dir
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
}
return
dir
;
}
exports
.
createMissingIndexedDBDirs
=
createMissingIndexedDBDirs
;
