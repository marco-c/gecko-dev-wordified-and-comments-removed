"
use
strict
"
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
commands
}
)
=
>
{
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evaluateTestCode
(
debuggee
)
threadFront
)
;
await
commands
.
threadConfigurationCommand
.
updateConfiguration
(
{
pauseOnExceptions
:
true
ignoreCaughtExceptions
:
true
}
)
;
await
resume
(
threadFront
)
;
const
paused
=
await
waitForPause
(
threadFront
)
;
Assert
.
equal
(
paused
.
why
.
type
"
exception
"
)
;
equal
(
paused
.
frame
.
where
.
line
6
"
paused
at
throw
"
)
;
await
resume
(
threadFront
)
;
}
{
doNotRunWorker
:
true
}
)
)
;
function
evaluateTestCode
(
debuggee
)
{
try
{
Cu
.
evalInSandbox
(
/
/
1
debugger
;
/
/
2
try
{
/
/
3
throw
"
foo
"
;
/
/
4
}
catch
(
e
)
{
}
/
/
5
throw
"
bar
"
;
/
/
6
debuggee
"
1
.
8
"
"
test_pause_exceptions
-
03
.
js
"
1
)
;
}
catch
(
e
)
{
}
}
