"
use
strict
"
;
add_task
(
async
function
setup
(
)
{
await
startupAddonsManager
(
)
;
}
)
;
async
function
sendRequest
(
transport
request
)
{
return
new
Promise
(
resolve
=
>
{
transport
.
hooks
=
{
onPacket
:
resolve
}
;
transport
.
send
(
request
)
;
}
)
;
}
add_task
(
async
function
test_webext_run_apis
(
)
{
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerAllActors
(
)
;
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
await
new
Promise
(
resolve
=
>
{
transport
.
hooks
=
{
onPacket
:
resolve
}
;
}
)
;
const
getRootResponse
=
await
sendRequest
(
transport
{
to
:
"
root
"
type
:
"
getRoot
"
}
)
;
ok
(
getRootResponse
"
received
a
response
after
calling
RootActor
:
:
getRoot
"
)
;
ok
(
getRootResponse
.
addonsActor
"
getRoot
returned
an
addonsActor
id
"
)
;
const
addonId
=
"
test
-
addons
-
actor
mozilla
.
org
"
;
const
addonPath
=
getFilePath
(
"
addons
/
web
-
extension
"
false
true
)
;
const
{
addon
}
=
await
sendRequest
(
transport
{
to
:
getRootResponse
.
addonsActor
type
:
"
installTemporaryAddon
"
addonPath
}
)
;
ok
(
addon
"
addonsActor
allows
to
install
a
temporary
add
-
on
"
)
;
equal
(
addon
.
id
addonId
"
temporary
add
-
on
is
the
expected
one
"
)
;
equal
(
addon
.
actor
false
"
temporary
add
-
on
does
not
have
an
actor
"
)
;
const
{
addons
}
=
await
sendRequest
(
transport
{
to
:
"
root
"
type
:
"
listAddons
"
}
)
;
ok
(
Array
.
isArray
(
addons
)
"
listAddons
(
)
returns
a
list
of
add
-
ons
"
)
;
const
installedAddon
=
addons
[
0
]
;
equal
(
installedAddon
.
id
addonId
"
installed
add
-
on
is
the
expected
one
"
)
;
ok
(
installedAddon
.
actor
"
returned
add
-
on
has
an
actor
"
)
;
const
reloadPromise
=
AddonTestUtils
.
promiseAddonEvent
(
"
onInstalled
"
)
;
await
sendRequest
(
transport
{
to
:
installedAddon
.
actor
type
:
"
reload
"
}
)
;
await
reloadPromise
;
}
)
;
