"
use
strict
"
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
}
)
=
>
{
const
packet
=
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evalCode
(
debuggee
)
threadFront
)
;
const
environment
=
await
packet
.
frame
.
getEnvironment
(
)
;
const
grip
=
environment
.
bindings
.
variables
.
p
.
value
;
ok
(
grip
.
preview
)
;
equal
(
grip
.
class
"
Promise
"
)
;
equal
(
grip
.
preview
.
ownProperties
[
"
<
state
>
"
]
.
value
"
pending
"
)
;
const
objClient
=
threadFront
.
pauseGrip
(
grip
)
;
const
{
promiseState
}
=
await
objClient
.
getPromiseState
(
)
;
equal
(
promiseState
.
state
"
pending
"
)
;
}
)
)
;
function
evalCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
"
doTest
(
)
;
\
n
"
+
function
doTest
(
)
{
var
p
=
new
Promise
(
function
(
)
{
}
)
;
debugger
;
}
debuggee
)
;
}
