"
use
strict
"
;
const
{
Pool
}
=
require
(
"
devtools
/
shared
/
protocol
/
Pool
"
)
;
const
{
DevToolsServerConnection
}
=
require
(
"
devtools
/
server
/
devtools
-
server
-
connection
"
)
;
const
{
LocalDebuggerTransport
}
=
require
(
"
devtools
/
shared
/
transport
/
local
-
transport
"
)
;
class
FakeActor
extends
Pool
{
constructor
(
.
.
.
args
)
{
super
(
.
.
.
args
)
;
this
.
destroyedCount
=
0
;
}
destroy
(
)
{
this
.
destroyedCount
+
+
;
super
.
destroy
(
)
;
}
}
add_task
(
async
function
(
)
{
const
transport
=
new
LocalDebuggerTransport
(
)
;
const
conn
=
new
DevToolsServerConnection
(
"
prefix
"
transport
)
;
const
actor1
=
new
FakeActor
(
conn
)
;
const
pool1
=
new
Pool
(
conn
"
pool
-
1
"
)
;
pool1
.
manage
(
actor1
)
;
const
actor2a
=
new
FakeActor
(
conn
)
;
const
actor2b
=
new
FakeActor
(
conn
)
;
const
pool2
=
new
Pool
(
conn
"
pool
-
2
"
)
;
pool2
.
manage
(
actor2a
)
;
pool2
.
manage
(
actor2b
)
;
ok
(
!
!
actor1
.
actorID
"
actor1
has
a
valid
actorID
"
)
;
ok
(
!
!
actor2a
.
actorID
"
actor2a
has
a
valid
actorID
"
)
;
ok
(
!
!
actor2b
.
actorID
"
actor2b
has
a
valid
actorID
"
)
;
conn
.
close
(
)
;
equal
(
actor1
.
destroyedCount
1
"
actor1
was
successfully
destroyed
"
)
;
equal
(
actor2a
.
destroyedCount
1
"
actor2
was
successfully
destroyed
"
)
;
equal
(
actor2b
.
destroyedCount
1
"
actor2
was
successfully
destroyed
"
)
;
}
)
;
add_task
(
async
function
(
)
{
const
transport
=
new
LocalDebuggerTransport
(
)
;
const
conn
=
new
DevToolsServerConnection
(
"
prefix
"
transport
)
;
const
childActor
=
new
FakeActor
(
conn
)
;
const
parentActor
=
new
FakeActor
(
conn
)
;
const
pool
=
new
Pool
(
conn
"
pool
"
)
;
pool
.
manage
(
parentActor
)
;
parentActor
.
manage
(
childActor
)
;
ok
(
!
!
parentActor
.
actorID
"
customActor
has
a
valid
actorID
"
)
;
ok
(
!
!
childActor
.
actorID
"
childActor
has
a
valid
actorID
"
)
;
conn
.
close
(
)
;
equal
(
parentActor
.
destroyedCount
1
"
parentActor
was
destroyed
once
"
)
;
equal
(
parentActor
.
destroyedCount
1
"
customActor
was
destroyed
once
"
)
;
}
)
;
