"
use
strict
"
;
add_task
(
threadClientTest
(
(
{
threadClient
debuggee
}
)
=
>
{
return
new
Promise
(
resolve
=
>
{
threadClient
.
addOneTimeListener
(
"
paused
"
async
function
(
event
packet
)
{
const
source
=
await
getSourceById
(
threadClient
packet
.
frame
.
where
.
actor
)
;
const
location
=
{
sourceUrl
:
source
.
url
line
:
debuggee
.
line0
+
3
column
:
5
}
;
threadClient
.
setBreakpoint
(
location
{
}
)
;
threadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
Assert
.
equal
(
packet
.
type
"
paused
"
)
;
Assert
.
equal
(
packet
.
why
.
type
"
breakpoint
"
)
;
Assert
.
equal
(
debuggee
.
i
0
)
;
threadClient
.
removeBreakpoint
(
location
)
;
const
location2
=
{
sourceUrl
:
source
.
url
line
:
debuggee
.
line0
+
3
column
:
12
}
;
threadClient
.
setBreakpoint
(
location2
{
}
)
;
threadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
Assert
.
equal
(
packet
.
type
"
paused
"
)
;
Assert
.
equal
(
packet
.
why
.
type
"
breakpoint
"
)
;
Assert
.
equal
(
debuggee
.
i
1
)
;
threadClient
.
removeBreakpoint
(
location2
)
;
threadClient
.
resume
(
resolve
)
;
}
)
;
threadClient
.
resume
(
)
;
}
)
;
threadClient
.
resume
(
)
;
}
)
;
Cu
.
evalInSandbox
(
"
var
line0
=
Error
(
)
.
lineNumber
;
\
n
"
+
"
debugger
;
\
n
"
+
"
var
a
i
=
0
;
\
n
"
+
"
for
(
i
=
1
;
i
<
=
2
;
i
+
+
)
{
\
n
"
+
"
a
=
i
;
\
n
"
+
"
}
\
n
"
debuggee
)
;
}
)
;
}
)
)
;
