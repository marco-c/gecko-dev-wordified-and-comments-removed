"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadClient
;
var
gCallback
;
function
run_test
(
)
{
run_test_with_server
(
DebuggerServer
function
(
)
{
run_test_with_server
(
WorkerDebuggerServer
do_test_finished
)
;
}
)
;
do_test_pending
(
)
;
}
function
run_test_with_server
(
server
callback
)
{
gCallback
=
callback
;
initTestDebuggerServer
(
server
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
stack
"
server
)
;
gClient
=
new
DebuggerClient
(
server
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
stack
"
function
(
response
targetFront
threadClient
)
{
gThreadClient
=
threadClient
;
test_breakpoint_running
(
)
;
}
)
;
}
)
;
}
function
test_breakpoint_running
(
)
{
gThreadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
const
location
=
{
line
:
gDebuggee
.
line0
+
3
}
;
gThreadClient
.
resume
(
)
;
gThreadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
Assert
.
equal
(
packet
.
type
"
paused
"
)
;
Assert
.
equal
(
packet
.
why
.
type
"
interrupted
"
)
;
}
)
;
const
source
=
gThreadClient
.
source
(
packet
.
frame
.
where
.
source
)
;
source
.
setBreakpoint
(
location
)
.
then
(
function
(
)
{
executeSoon
(
function
(
)
{
gClient
.
close
(
)
.
then
(
gCallback
)
;
}
)
;
}
function
(
response
)
{
Assert
.
notEqual
(
response
.
error
"
noScript
"
)
;
executeSoon
(
function
(
)
{
gClient
.
close
(
)
.
then
(
gCallback
)
;
}
)
;
}
)
;
}
)
;
Cu
.
evalInSandbox
(
"
var
line0
=
Error
(
)
.
lineNumber
;
\
n
"
+
"
debugger
;
\
n
"
+
"
var
a
=
1
;
\
n
"
+
"
var
b
=
2
;
\
n
"
gDebuggee
)
;
}
