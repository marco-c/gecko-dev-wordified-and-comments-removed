"
use
strict
"
;
add_task
(
threadClientTest
(
async
(
{
threadClient
debuggee
client
}
)
=
>
{
dumpn
(
"
Evaluating
test
code
and
waiting
for
first
debugger
statement
"
)
;
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evaluateTestCode
(
debuggee
)
client
)
;
const
step1
=
await
stepIn
(
client
threadClient
)
;
equal
(
step1
.
type
"
paused
"
)
;
equal
(
step1
.
frame
.
where
.
line
3
)
;
equal
(
step1
.
why
.
type
"
resumeLimit
"
)
;
equal
(
debuggee
.
a
undefined
)
;
equal
(
debuggee
.
b
undefined
)
;
const
step2
=
await
stepIn
(
client
threadClient
)
;
equal
(
step2
.
type
"
paused
"
)
;
equal
(
step2
.
frame
.
where
.
line
4
)
;
equal
(
step2
.
why
.
type
"
resumeLimit
"
)
;
equal
(
debuggee
.
a
1
)
;
equal
(
debuggee
.
b
undefined
)
;
const
step3
=
await
stepIn
(
client
threadClient
)
;
equal
(
step3
.
type
"
paused
"
)
;
equal
(
step3
.
frame
.
where
.
line
4
)
;
equal
(
step3
.
why
.
type
"
resumeLimit
"
)
;
equal
(
debuggee
.
a
1
)
;
equal
(
debuggee
.
b
2
)
;
await
new
Promise
(
resolve
=
>
{
threadClient
.
stepIn
(
(
)
=
>
{
threadClient
.
addOneTimeListener
(
"
paused
"
(
event
packet
)
=
>
{
equal
(
packet
.
type
"
paused
"
)
;
equal
(
packet
.
why
.
type
"
debuggerStatement
"
)
;
resolve
(
)
;
}
)
;
debuggee
.
eval
(
"
debugger
;
"
)
;
}
)
;
}
)
;
}
)
)
;
function
evaluateTestCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
/
/
1
debugger
;
/
/
2
var
a
=
1
;
/
/
3
var
b
=
2
;
debuggee
"
1
.
8
"
"
test_stepping
-
05
-
test
-
code
.
js
"
1
)
;
}
