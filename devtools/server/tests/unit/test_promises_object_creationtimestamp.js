"
use
strict
"
;
const
{
PromisesFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
promises
"
)
;
var
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Preferences
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
add_task
(
function
*
(
)
{
let
timerPrecision
=
Preferences
.
get
(
"
privacy
.
reduceTimerPrecision
"
)
;
Preferences
.
set
(
"
privacy
.
reduceTimerPrecision
"
false
)
;
registerCleanupFunction
(
function
(
)
{
Preferences
.
set
(
"
privacy
.
reduceTimerPrecision
"
timerPrecision
)
;
}
)
;
let
client
=
yield
startTestDebuggerServer
(
"
promises
-
object
-
test
"
)
;
let
chromeActors
=
yield
getChromeActors
(
client
)
;
ok
(
Promise
.
toString
(
)
.
includes
(
"
native
code
"
)
"
Expect
native
DOM
Promise
.
"
)
;
yield
attachTab
(
client
chromeActors
)
;
yield
testPromiseCreationTimestamp
(
client
chromeActors
v
=
>
{
return
new
Promise
(
resolve
=
>
resolve
(
v
)
)
;
}
)
;
let
response
=
yield
listTabs
(
client
)
;
let
targetTab
=
findTab
(
response
.
tabs
"
promises
-
object
-
test
"
)
;
ok
(
targetTab
"
Found
our
target
tab
.
"
)
;
yield
testPromiseCreationTimestamp
(
client
targetTab
v
=
>
{
const
debuggee
=
DebuggerServer
.
getTestGlobal
(
"
promises
-
object
-
test
"
)
;
return
debuggee
.
Promise
.
resolve
(
v
)
;
}
)
;
yield
close
(
client
)
;
}
)
;
function
*
testPromiseCreationTimestamp
(
client
form
makePromise
)
{
let
front
=
PromisesFront
(
client
form
)
;
let
resolution
=
"
MyLittleSecret
"
+
Math
.
random
(
)
;
yield
front
.
attach
(
)
;
yield
front
.
listPromises
(
)
;
let
onNewPromise
=
new
Promise
(
resolve
=
>
{
EventEmitter
.
on
(
front
"
new
-
promises
"
promises
=
>
{
for
(
let
p
of
promises
)
{
if
(
p
.
promiseState
.
state
=
=
=
"
fulfilled
"
&
&
p
.
promiseState
.
value
=
=
=
resolution
)
{
resolve
(
p
)
;
}
}
}
)
;
}
)
;
let
start
=
Date
.
now
(
)
;
let
promise
=
makePromise
(
resolution
)
;
let
end
=
Date
.
now
(
)
;
let
grip
=
yield
onNewPromise
;
ok
(
grip
"
Found
our
new
promise
.
"
)
;
let
creationTimestamp
=
grip
.
promiseState
.
creationTimestamp
;
ok
(
start
-
1
<
=
creationTimestamp
&
&
creationTimestamp
<
=
end
+
1
"
Expect
promise
creation
timestamp
to
be
within
elapsed
time
range
:
"
+
(
start
-
1
)
+
"
<
=
"
+
creationTimestamp
+
"
<
=
"
+
(
end
+
1
)
)
;
yield
front
.
detach
(
)
;
void
promise
;
}
