"
use
strict
"
;
add_task
(
threadClientTest
(
async
(
{
threadClient
debuggee
}
)
=
>
{
dumpn
(
"
Evaluating
test
code
and
waiting
for
first
debugger
statement
"
)
;
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evaluateTestCode
(
debuggee
)
threadClient
)
;
dumpn
(
"
Step
Over
to
f
(
)
"
)
;
const
step1
=
await
stepOver
(
threadClient
)
;
equal
(
step1
.
why
.
type
"
resumeLimit
"
)
;
equal
(
step1
.
frame
.
where
.
line
6
)
;
equal
(
debuggee
.
a
undefined
)
;
equal
(
debuggee
.
b
undefined
)
;
dumpn
(
"
Step
Over
f
(
)
"
)
;
const
step2
=
await
stepOver
(
threadClient
)
;
equal
(
step2
.
frame
.
where
.
line
7
)
;
equal
(
step2
.
why
.
type
"
resumeLimit
"
)
;
equal
(
debuggee
.
a
1
)
;
equal
(
debuggee
.
b
undefined
)
;
}
)
)
;
function
evaluateTestCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
/
/
1
function
f
(
)
{
/
/
2
this
.
a
=
1
;
/
/
3
}
/
/
4
debugger
;
/
/
5
f
(
)
;
/
/
6
let
b
=
2
;
/
/
7
debuggee
"
1
.
8
"
"
test_stepping
-
01
-
test
-
code
.
js
"
1
)
;
}
