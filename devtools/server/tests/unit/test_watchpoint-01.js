"
use
strict
"
;
add_task
(
threadFrontTest
(
async
args
=
>
{
await
testSetWatchpoint
(
args
)
;
await
testGetWatchpoint
(
args
)
;
await
testRemoveWatchpoint
(
args
)
;
}
)
)
;
async
function
testSetWatchpoint
(
{
threadFront
debuggee
}
)
{
function
evaluateTestCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
/
/
1
function
stopMe
(
obj
)
{
/
/
2
debugger
;
/
/
3
obj
.
a
=
2
;
/
/
4
}
/
/
stopMe
(
{
a
:
1
}
)
debuggee
"
1
.
8
"
"
test_watchpoint
-
01
.
js
"
)
;
}
const
packet
=
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evaluateTestCode
(
debuggee
)
threadFront
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
3
)
;
const
args
=
packet
.
frame
.
arguments
;
const
obj
=
args
[
0
]
;
const
objClient
=
threadFront
.
pauseGrip
(
obj
)
;
await
objClient
.
addWatchpoint
(
"
a
"
"
obj
.
a
"
"
set
"
)
;
const
packet2
=
await
resumeAndWaitForPause
(
threadFront
)
;
Assert
.
equal
(
packet2
.
frame
.
where
.
line
4
)
;
Assert
.
equal
(
packet2
.
why
.
type
"
setWatchpoint
"
)
;
Assert
.
equal
(
obj
.
preview
.
ownProperties
.
a
.
value
1
)
;
await
resume
(
threadFront
)
;
}
async
function
testGetWatchpoint
(
{
threadFront
debuggee
}
)
{
function
evaluateTestCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
/
/
1
function
stopMe
(
obj
)
{
/
/
2
debugger
;
/
/
3
obj
.
a
+
4
;
/
/
4
}
/
/
stopMe
(
{
a
:
1
}
)
debuggee
"
1
.
8
"
"
test_watchpoint
-
01
.
js
"
)
;
}
const
packet
=
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evaluateTestCode
(
debuggee
)
threadFront
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
3
)
;
const
args
=
packet
.
frame
.
arguments
;
const
obj
=
args
[
0
]
;
const
objClient
=
threadFront
.
pauseGrip
(
obj
)
;
await
objClient
.
addWatchpoint
(
"
a
"
"
obj
.
a
"
"
get
"
)
;
const
packet2
=
await
resumeAndWaitForPause
(
threadFront
)
;
Assert
.
equal
(
packet2
.
frame
.
where
.
line
4
)
;
Assert
.
equal
(
packet2
.
why
.
type
"
getWatchpoint
"
)
;
Assert
.
equal
(
obj
.
preview
.
ownProperties
.
a
.
value
1
)
;
await
resume
(
threadFront
)
;
}
async
function
testRemoveWatchpoint
(
{
threadFront
debuggee
}
)
{
function
evaluateTestCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
/
/
1
function
stopMe
(
obj
)
{
/
/
2
debugger
;
/
/
3
obj
.
a
=
2
;
/
/
4
debugger
;
/
/
5
}
/
/
stopMe
(
{
a
:
1
}
)
debuggee
"
1
.
8
"
"
test_watchpoint
-
01
.
js
"
)
;
}
const
packet
=
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evaluateTestCode
(
debuggee
)
threadFront
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
3
)
;
const
args
=
packet
.
frame
.
arguments
;
const
obj
=
args
[
0
]
;
const
objClient
=
threadFront
.
pauseGrip
(
obj
)
;
await
objClient
.
addWatchpoint
(
"
a
"
"
obj
.
a
"
"
set
"
)
;
await
objClient
.
removeWatchpoint
(
"
a
"
)
;
const
packet2
=
await
resumeAndWaitForPause
(
threadFront
)
;
Assert
.
equal
(
packet2
.
frame
.
where
.
line
5
)
;
await
resume
(
threadFront
)
;
}
