"
use
strict
"
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
}
)
=
>
{
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
evalCode
(
debuggee
)
threadFront
)
;
const
{
error
}
=
await
threadFront
.
getSources
(
)
;
Assert
.
ok
(
!
error
"
Should
not
get
an
error
:
"
+
error
)
;
const
sourceFront
=
await
getSource
(
threadFront
BLACK_BOXED_URL
)
;
await
blackBox
(
sourceFront
)
;
threadFront
.
pauseOnExceptions
(
true
false
)
;
threadFront
.
resume
(
)
;
const
packet
=
await
waitForPause
(
threadFront
)
;
const
source
=
await
getSourceById
(
threadFront
packet
.
frame
.
where
.
actor
)
;
Assert
.
equal
(
source
.
url
SOURCE_URL
"
We
shouldn
'
t
pause
while
in
the
black
boxed
source
.
"
)
;
await
threadFront
.
resume
(
)
;
}
)
)
;
const
BLACK_BOXED_URL
=
"
http
:
/
/
example
.
com
/
blackboxme
.
js
"
;
const
SOURCE_URL
=
"
http
:
/
/
example
.
com
/
source
.
js
"
;
function
evalCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
"
"
+
function
doStuff
(
k
)
{
throw
new
Error
(
"
error
msg
"
)
;
k
(
100
)
;
}
debuggee
"
1
.
8
"
BLACK_BOXED_URL
1
)
;
Cu
.
evalInSandbox
(
"
"
+
function
runTest
(
)
{
doStuff
(
function
(
n
)
{
debugger
;
}
)
;
}
+
"
\
ndebugger
;
\
n
"
+
"
try
{
runTest
(
)
}
catch
(
ex
)
{
}
"
debuggee
"
1
.
8
"
SOURCE_URL
1
)
;
}
