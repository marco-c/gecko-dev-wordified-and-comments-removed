"
use
strict
"
;
var
gDebuggee
;
var
gThreadFront
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
}
)
=
>
{
gThreadFront
=
threadFront
;
gDebuggee
=
debuggee
;
test_black_box
(
)
;
}
{
waitForFinish
:
true
}
)
)
;
const
BLACK_BOXED_URL
=
"
http
:
/
/
example
.
com
/
blackboxme
.
js
"
;
const
SOURCE_URL
=
"
http
:
/
/
example
.
com
/
source
.
js
"
;
function
test_black_box
(
)
{
gThreadFront
.
once
(
"
paused
"
test_black_box_exception
)
;
Cu
.
evalInSandbox
(
"
"
+
function
doStuff
(
k
)
{
throw
new
Error
(
"
error
msg
"
)
;
k
(
100
)
;
}
gDebuggee
"
1
.
8
"
BLACK_BOXED_URL
1
)
;
Cu
.
evalInSandbox
(
"
"
+
function
runTest
(
)
{
doStuff
(
function
(
n
)
{
debugger
;
}
)
;
}
+
"
\
ndebugger
;
\
n
"
+
"
try
{
runTest
(
)
}
catch
(
ex
)
{
}
"
gDebuggee
"
1
.
8
"
SOURCE_URL
1
)
;
}
function
test_black_box_exception
(
)
{
gThreadFront
.
getSources
(
)
.
then
(
async
function
(
{
error
sources
}
)
{
Assert
.
ok
(
!
error
"
Should
not
get
an
error
:
"
+
error
)
;
const
sourceFront
=
await
getSource
(
gThreadFront
BLACK_BOXED_URL
)
;
await
blackBox
(
sourceFront
)
;
gThreadFront
.
pauseOnExceptions
(
true
false
)
;
gThreadFront
.
once
(
"
paused
"
async
function
(
packet
)
{
const
source
=
await
getSourceById
(
gThreadFront
packet
.
frame
.
where
.
actor
)
;
Assert
.
equal
(
source
.
url
SOURCE_URL
"
We
shouldn
'
t
pause
while
in
the
black
boxed
source
.
"
)
;
await
gThreadFront
.
resume
(
)
;
threadFrontTestFinished
(
)
;
}
)
;
gThreadFront
.
resume
(
)
;
}
)
;
}
