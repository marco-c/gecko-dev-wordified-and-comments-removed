"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadClient
;
function
run_test
(
)
{
run_test_with_server
(
DebuggerServer
function
(
)
{
run_test_with_server
(
WorkerDebuggerServer
do_test_finished
)
;
}
)
;
do_test_pending
(
)
;
}
function
run_test_with_server
(
server
callback
)
{
initTestDebuggerServer
(
server
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
breakpoints
"
server
)
;
gDebuggee
.
console
=
{
log
:
x
=
>
void
x
}
;
gClient
=
new
DebuggerClient
(
server
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
breakpoints
"
function
(
response
tabClient
threadClient
)
{
gThreadClient
=
threadClient
;
testBreakpoint
(
)
;
}
)
;
}
)
;
}
const
URL
=
"
test
.
js
"
;
function
setUpCode
(
)
{
Cu
.
evalInSandbox
(
"
"
+
function
test
(
)
{
var
a
=
1
;
debugger
;
}
+
"
\
ndebugger
;
"
gDebuggee
"
1
.
8
"
URL
)
;
}
const
testBreakpoint
=
async
function
(
)
{
const
source
=
await
getSource
(
gThreadClient
URL
)
;
const
[
response
]
=
await
setBreakpoint
(
source
{
line
:
2
}
)
;
ok
(
!
response
.
error
)
;
const
actor
=
response
.
actor
;
ok
(
actor
)
;
await
executeOnNextTickAndWaitForPause
(
setUpCode
gClient
)
;
await
resume
(
gThreadClient
)
;
const
packet
=
await
executeOnNextTickAndWaitForPause
(
gDebuggee
.
test
gClient
)
;
equal
(
packet
.
why
.
type
"
breakpoint
"
)
;
notEqual
(
packet
.
why
.
actors
.
indexOf
(
actor
)
-
1
)
;
finishClient
(
gClient
)
;
}
;
