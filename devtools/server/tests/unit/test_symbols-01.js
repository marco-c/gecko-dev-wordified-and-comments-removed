"
use
strict
"
;
const
URL
=
"
foo
.
js
"
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
const
debuggee
=
addTestGlobal
(
"
test
-
symbols
"
)
;
const
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
client
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
client
"
test
-
symbols
"
function
(
response
targetFront
threadClient
)
{
add_task
(
testSymbols
.
bind
(
null
threadClient
client
debuggee
)
)
;
run_next_test
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
async
function
testSymbols
(
threadClient
client
debuggee
)
{
const
evalCode
=
(
)
=
>
{
Cu
.
evalInSandbox
(
"
(
"
+
function
(
)
{
var
symbolWithName
=
Symbol
(
"
Chris
"
)
;
var
symbolWithoutName
=
Symbol
(
)
;
var
iteratorSymbol
=
Symbol
.
iterator
;
debugger
;
}
+
"
(
)
)
"
debuggee
"
1
.
8
"
URL
1
)
;
}
;
const
packet
=
await
executeOnNextTickAndWaitForPause
(
evalCode
threadClient
)
;
const
{
symbolWithName
symbolWithoutName
iteratorSymbol
}
=
packet
.
frame
.
environment
.
bindings
.
variables
;
equal
(
symbolWithName
.
value
.
type
"
symbol
"
)
;
equal
(
symbolWithName
.
value
.
name
"
Chris
"
)
;
equal
(
symbolWithoutName
.
value
.
type
"
symbol
"
)
;
ok
(
!
(
"
name
"
in
symbolWithoutName
.
value
)
)
;
equal
(
iteratorSymbol
.
value
.
type
"
symbol
"
)
;
equal
(
iteratorSymbol
.
value
.
name
"
Symbol
.
iterator
"
)
;
finishClient
(
client
)
;
}
