"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadClient
;
var
gCallback
;
function
run_test
(
)
{
run_test_with_server
(
DebuggerServer
function
(
)
{
run_test_with_server
(
WorkerDebuggerServer
do_test_finished
)
;
}
)
;
do_test_pending
(
)
;
}
async
function
run_test_with_server
(
server
callback
)
{
gCallback
=
callback
;
initTestDebuggerServer
(
server
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
grips
"
server
)
;
gDebuggee
.
eval
(
function
stopMe
(
arg1
arg2
)
{
debugger
;
}
.
toString
(
)
)
;
gClient
=
new
DebuggerClient
(
server
.
connectPipe
(
)
)
;
await
gClient
.
connect
(
)
;
const
[
threadClient
]
=
await
attachTestTabAndResume
(
gClient
"
test
-
grips
"
)
;
gThreadClient
=
threadClient
;
test_proxy_grip
(
)
;
}
async
function
test_proxy_grip
(
)
{
gThreadClient
.
addOneTimeListener
(
"
paused
"
async
function
(
event
packet
)
{
let
[
opaqueProxyGrip
transparentProxyGrip
]
=
packet
.
frame
.
arguments
;
check_opaque_grip
(
opaqueProxyGrip
)
;
check_proxy_grip
(
transparentProxyGrip
)
;
let
trapDidRun
=
gDebuggee
.
eval
(
"
global
.
eval
(
'
trapDidRun
'
)
"
)
;
strictEqual
(
trapDidRun
false
"
No
proxy
trap
did
run
.
"
)
;
await
gThreadClient
.
resume
(
)
;
await
gClient
.
close
(
)
;
gCallback
(
)
;
}
)
;
gDebuggee
.
eval
(
var
global
=
Components
.
utils
.
Sandbox
(
null
)
;
var
proxy
=
global
.
eval
(
\
var
trapDidRun
=
false
;
new
Proxy
(
{
}
new
Proxy
(
{
}
{
get
:
(
_
trap
)
=
>
{
trapDidRun
=
true
;
throw
new
Error
(
"
proxy
"
+
trap
+
"
trap
was
called
.
"
)
;
}
}
)
)
;
\
)
;
stopMe
(
proxy
Components
.
utils
.
waiveXrays
(
proxy
)
)
;
)
;
}
function
check_opaque_grip
(
grip
)
{
strictEqual
(
grip
.
class
"
Opaque
"
"
The
grip
has
an
Opaque
class
.
"
)
;
strictEqual
(
grip
.
ownPropertyLength
0
"
The
grip
has
no
properties
.
"
)
;
}
function
check_proxy_grip
(
grip
)
{
strictEqual
(
grip
.
class
"
Proxy
"
"
The
grip
has
a
Proxy
class
.
"
)
;
ok
(
grip
.
proxyTarget
"
There
is
a
[
[
ProxyTarget
]
]
grip
.
"
)
;
ok
(
grip
.
proxyHandler
"
There
is
a
[
[
ProxyHandler
]
]
grip
.
"
)
;
const
{
preview
}
=
grip
;
strictEqual
(
preview
.
ownPropertiesLength
2
"
The
preview
has
2
properties
.
"
)
;
let
target
=
preview
.
ownProperties
[
"
<
target
>
"
]
.
value
;
strictEqual
(
target
grip
.
proxyTarget
"
<
target
>
contains
the
[
[
ProxyTarget
]
]
.
"
)
;
let
handler
=
preview
.
ownProperties
[
"
<
handler
>
"
]
.
value
;
strictEqual
(
handler
grip
.
proxyHandler
"
<
handler
>
contains
the
[
[
ProxyHandler
]
]
.
"
)
;
}
