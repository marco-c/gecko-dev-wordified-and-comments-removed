"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadClient
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
source
-
map
"
)
;
gClient
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
source
-
map
"
function
(
response
tabClient
threadClient
)
{
gThreadClient
=
threadClient
;
test_minified
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
function
test_minified
(
)
{
gThreadClient
.
addOneTimeListener
(
"
newSource
"
function
_onNewSource
(
event
packet
)
{
do_check_eq
(
event
"
newSource
"
)
;
do_check_eq
(
packet
.
type
"
newSource
"
)
;
do_check_true
(
!
!
packet
.
source
)
;
do_check_eq
(
packet
.
source
.
url
"
http
:
/
/
example
.
com
/
foo
.
js
"
"
The
new
source
should
be
foo
.
js
"
)
;
do_check_eq
(
packet
.
source
.
url
.
indexOf
(
"
foo
.
min
.
js
"
)
-
1
"
The
new
source
should
not
be
the
minified
file
"
)
;
}
)
;
gThreadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
do_check_eq
(
event
"
paused
"
)
;
do_check_eq
(
packet
.
why
.
type
"
debuggerStatement
"
)
;
let
location
=
{
line
:
5
}
;
getSource
(
gThreadClient
"
http
:
/
/
example
.
com
/
foo
.
js
"
)
.
then
(
source
=
>
{
source
.
setBreakpoint
(
location
function
(
response
bpClient
)
{
do_check_true
(
!
response
.
error
)
;
testHitBreakpoint
(
)
;
}
)
;
}
)
;
}
)
;
let
code
=
'
(
function
(
)
{
debugger
;
function
r
(
r
)
{
var
n
=
r
+
r
;
var
u
=
null
;
return
n
}
for
(
var
n
=
0
;
n
<
10
;
n
+
+
)
{
r
(
n
)
}
}
)
(
)
;
\
n
/
/
#
sourceMappingURL
=
data
:
text
/
json
{
"
file
"
:
"
foo
.
min
.
js
"
"
version
"
:
3
"
sources
"
:
[
"
foo
.
js
"
]
"
names
"
:
[
"
foo
"
"
n
"
"
bar
"
"
unused
"
"
i
"
]
"
mappings
"
:
"
CAAC
WACC
QACA
SAASA
GAAIC
GACX
GAAIC
GAAMD
EAAIA
CACd
IAAIE
GAAS
IACb
OAAOD
GAET
IAAK
GAAIE
GAAI
EAAGA
EAAI
GAAIA
IAAK
CAC3BJ
EAAII
"
}
'
;
Components
.
utils
.
evalInSandbox
(
code
gDebuggee
"
1
.
8
"
"
http
:
/
/
example
.
com
/
foo
.
min
.
js
"
1
)
;
}
function
testHitBreakpoint
(
timesHit
=
0
)
{
gClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
+
+
timesHit
;
do_check_eq
(
event
"
paused
"
)
;
do_check_eq
(
packet
.
why
.
type
"
breakpoint
"
)
;
if
(
timesHit
=
=
=
10
)
{
gThreadClient
.
resume
(
(
)
=
>
finishClient
(
gClient
)
)
;
}
else
{
testHitBreakpoint
(
timesHit
)
;
}
}
)
;
gThreadClient
.
resume
(
)
;
}
