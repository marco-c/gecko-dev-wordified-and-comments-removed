"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadClient
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
black
-
box
"
)
;
gClient
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
black
-
box
"
function
(
response
tabClient
threadClient
)
{
gThreadClient
=
threadClient
;
test_black_box
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
const
BLACK_BOXED_URL
=
"
http
:
/
/
example
.
com
/
blackboxme
.
js
"
;
const
SOURCE_URL
=
"
http
:
/
/
example
.
com
/
source
.
js
"
;
function
test_black_box
(
)
{
gClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
gThreadClient
.
eval
(
packet
.
frame
.
actor
"
doStuff
"
function
(
response
)
{
gThreadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
let
obj
=
gThreadClient
.
pauseGrip
(
packet
.
why
.
frameFinished
.
return
)
;
obj
.
getDefinitionSite
(
runWithSource
)
;
}
)
;
}
)
;
function
runWithSource
(
packet
)
{
let
source
=
gThreadClient
.
source
(
packet
.
source
)
;
source
.
setBreakpoint
(
{
line
:
2
}
function
(
response
)
{
Assert
.
ok
(
!
response
.
error
"
Should
be
able
to
set
breakpoint
.
"
)
;
test_black_box_paused
(
)
;
}
)
;
}
}
)
;
Cu
.
evalInSandbox
(
"
"
+
function
doStuff
(
k
)
{
debugger
;
k
(
100
)
;
}
gDebuggee
"
1
.
8
"
BLACK_BOXED_URL
1
)
;
Cu
.
evalInSandbox
(
"
"
+
function
runTest
(
)
{
doStuff
(
function
(
n
)
{
return
n
;
}
)
;
}
+
"
\
n
runTest
(
)
;
"
gDebuggee
"
1
.
8
"
SOURCE_URL
1
)
;
}
function
test_black_box_paused
(
)
{
gThreadClient
.
getSources
(
function
(
{
error
sources
}
)
{
Assert
.
ok
(
!
error
"
Should
not
get
an
error
:
"
+
error
)
;
let
sourceClient
=
gThreadClient
.
source
(
sources
.
filter
(
s
=
>
s
.
url
=
=
BLACK_BOXED_URL
)
[
0
]
)
;
sourceClient
.
blackBox
(
function
(
{
error
pausedInSource
}
)
{
Assert
.
ok
(
!
error
"
Should
not
get
an
error
:
"
+
error
)
;
Assert
.
ok
(
pausedInSource
"
We
should
be
notified
that
we
are
currently
paused
in
this
source
"
)
;
finishClient
(
gClient
)
;
}
)
;
}
)
;
}
