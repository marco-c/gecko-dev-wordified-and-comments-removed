"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadFront
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
black
-
box
"
)
;
gClient
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
black
-
box
"
function
(
response
targetFront
threadFront
)
{
gThreadFront
=
threadFront
;
test_black_box
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
const
BLACK_BOXED_URL
=
"
http
:
/
/
example
.
com
/
blackboxme
.
js
"
;
const
SOURCE_URL
=
"
http
:
/
/
example
.
com
/
source
.
js
"
;
function
test_black_box
(
)
{
gThreadFront
.
once
(
"
paused
"
function
(
packet
)
{
gThreadFront
.
setBreakpoint
(
{
sourceUrl
:
BLACK_BOXED_URL
line
:
2
}
{
}
)
;
test_black_box_paused
(
)
;
}
)
;
Cu
.
evalInSandbox
(
"
"
+
function
doStuff
(
k
)
{
debugger
;
k
(
100
)
;
}
gDebuggee
"
1
.
8
"
BLACK_BOXED_URL
1
)
;
Cu
.
evalInSandbox
(
"
"
+
function
runTest
(
)
{
doStuff
(
function
(
n
)
{
return
n
;
}
)
;
}
+
"
\
n
runTest
(
)
;
"
gDebuggee
"
1
.
8
"
SOURCE_URL
1
)
;
}
function
test_black_box_paused
(
)
{
gThreadFront
.
getSources
(
)
.
then
(
async
function
(
{
error
sources
}
)
{
Assert
.
ok
(
!
error
"
Should
not
get
an
error
:
"
+
error
)
;
const
sourceFront
=
gThreadFront
.
source
(
sources
.
filter
(
s
=
>
s
.
url
=
=
BLACK_BOXED_URL
)
[
0
]
)
;
const
pausedInSource
=
await
blackBox
(
sourceFront
)
;
Assert
.
ok
(
pausedInSource
"
We
should
be
notified
that
we
are
currently
paused
in
this
source
"
)
;
await
gThreadFront
.
resume
(
)
;
finishClient
(
gClient
)
;
}
)
;
}
