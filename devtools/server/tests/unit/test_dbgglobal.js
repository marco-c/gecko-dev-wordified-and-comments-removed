"
use
strict
"
;
const
{
SocketListener
}
=
require
(
"
devtools
/
shared
/
security
/
socket
"
)
;
function
run_test
(
)
{
const
socketListener
=
new
SocketListener
(
DebuggerServer
{
}
)
;
Assert
.
throws
(
(
)
=
>
DebuggerServer
.
_addListener
(
socketListener
)
/
DebuggerServer
has
not
been
initialized
/
"
_addListener
should
throw
before
it
has
been
initialized
"
)
;
Assert
.
throws
(
DebuggerServer
.
closeAllListeners
/
this
is
undefined
/
"
closeAllListeners
should
throw
before
it
has
been
initialized
"
)
;
Assert
.
throws
(
DebuggerServer
.
connectPipe
/
this
is
undefined
/
"
connectPipe
should
throw
before
it
has
been
initialized
"
)
;
DebuggerServer
.
init
(
)
;
Assert
.
throws
(
DebuggerServer
.
closeAllListeners
/
this
is
undefined
/
"
closeAllListeners
should
throw
if
createRootActor
hasn
'
t
been
added
"
)
;
Assert
.
throws
(
DebuggerServer
.
connectPipe
/
this
is
undefined
/
"
closeAllListeners
should
throw
if
createRootActor
hasn
'
t
been
added
"
)
;
const
{
createRootActor
}
=
require
(
"
xpcshell
-
test
/
testactors
"
)
;
DebuggerServer
.
setRootActor
(
createRootActor
)
;
DebuggerServer
.
_addListener
(
socketListener
)
;
DebuggerServer
.
closeAllListeners
(
)
;
const
client1
=
DebuggerServer
.
connectPipe
(
)
;
client1
.
hooks
=
{
onPacket
:
function
(
packet1
)
{
Assert
.
equal
(
packet1
.
from
"
root
"
)
;
Assert
.
equal
(
packet1
.
applicationType
"
xpcshell
-
tests
"
)
;
const
client2
=
DebuggerServer
.
connectPipe
(
)
;
client2
.
hooks
=
{
onPacket
:
function
(
packet2
)
{
Assert
.
equal
(
packet2
.
from
"
root
"
)
;
Assert
.
notEqual
(
packet1
.
testConnectionPrefix
packet2
.
testConnectionPrefix
)
;
client2
.
close
(
)
;
}
onClosed
:
function
(
result
)
{
client1
.
close
(
)
;
}
}
;
client2
.
ready
(
)
;
}
onClosed
:
function
(
result
)
{
do_test_finished
(
)
;
}
}
;
client1
.
ready
(
)
;
do_test_pending
(
)
;
}
