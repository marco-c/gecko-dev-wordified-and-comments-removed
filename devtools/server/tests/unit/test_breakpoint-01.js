"
use
strict
"
;
add_task
(
threadClientTest
(
async
(
{
threadClient
debuggee
}
)
=
>
{
(
async
(
)
=
>
{
info
(
"
Wait
for
the
debugger
statement
to
be
hit
"
)
;
let
packet
=
await
waitForPause
(
threadClient
)
;
const
source
=
await
getSourceById
(
threadClient
packet
.
frame
.
where
.
actor
)
;
const
location
=
{
sourceUrl
:
source
.
url
line
:
debuggee
.
line0
+
3
}
;
threadClient
.
setBreakpoint
(
location
{
}
)
;
await
threadClient
.
resume
(
)
;
packet
=
await
waitForPause
(
threadClient
)
;
info
(
"
Paused
at
the
breakpoint
"
)
;
Assert
.
equal
(
packet
.
type
"
paused
"
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
actor
source
.
actor
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
location
.
line
)
;
Assert
.
equal
(
packet
.
why
.
type
"
breakpoint
"
)
;
info
(
"
Check
that
the
breakpoint
worked
.
"
)
;
Assert
.
equal
(
debuggee
.
a
1
)
;
Assert
.
equal
(
debuggee
.
b
undefined
)
;
await
threadClient
.
resume
(
)
;
}
)
(
)
;
do_timeout
(
0
(
)
=
>
{
Cu
.
evalInSandbox
(
"
var
line0
=
Error
(
)
.
lineNumber
;
\
n
"
+
"
debugger
;
\
n
"
+
"
var
a
=
1
;
\
n
"
+
"
var
b
=
2
;
\
n
"
debuggee
)
;
}
)
;
}
)
)
;
