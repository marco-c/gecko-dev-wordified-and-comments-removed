"
use
strict
"
;
add_task
(
threadClientTest
(
async
(
{
threadClient
debuggee
client
}
)
=
>
{
await
getSources
(
threadClient
)
;
let
packet
=
await
executeOnNextTickAndWaitForPause
(
(
)
=
>
{
evalCode
(
debuggee
)
;
}
client
)
;
const
source
=
threadClient
.
source
(
packet
.
frame
.
where
.
source
)
;
const
location
=
{
line
:
debuggee
.
line0
+
8
}
;
const
[
res
bpClient
]
=
await
setBreakpoint
(
source
location
)
;
ok
(
!
res
.
error
)
;
await
resume
(
threadClient
)
;
packet
=
await
waitForPause
(
client
)
;
Assert
.
equal
(
packet
.
type
"
paused
"
)
;
Assert
.
equal
(
packet
.
why
.
type
"
breakpoint
"
)
;
Assert
.
equal
(
packet
.
why
.
actors
[
0
]
bpClient
.
actor
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
source
.
actor
source
.
actor
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
location
.
line
)
;
await
resume
(
threadClient
)
;
}
)
)
;
function
evalCode
(
debuggee
)
{
Cu
.
evalInSandbox
(
"
var
line0
=
Error
(
)
.
lineNumber
;
\
n
(
"
+
function
(
)
{
debugger
;
var
a
=
(
function
(
)
{
return
(
function
(
)
{
return
(
function
(
)
{
return
(
function
(
)
{
return
(
function
(
)
{
var
x
=
10
;
return
1
;
}
)
(
)
;
}
)
(
)
;
}
)
(
)
;
}
)
(
)
;
}
)
(
)
;
}
+
"
)
(
)
"
debuggee
)
;
}
