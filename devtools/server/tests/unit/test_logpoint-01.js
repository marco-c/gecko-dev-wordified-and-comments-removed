"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadClient
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
logpoint
"
)
;
gClient
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
logpoint
"
function
(
response
targetFront
threadClient
)
{
gThreadClient
=
threadClient
;
test_simple_breakpoint
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
function
test_simple_breakpoint
(
)
{
const
rootActor
=
gClient
.
transport
.
_serverConnection
.
rootActor
;
const
threadActor
=
rootActor
.
_parameters
.
tabList
.
_targetActors
[
0
]
.
threadActor
;
let
lastMessage
;
threadActor
.
_parent
.
_consoleActor
=
{
onConsoleAPICall
(
message
)
{
lastMessage
=
message
;
}
}
;
gThreadClient
.
addOneTimeListener
(
"
paused
"
async
function
(
event
packet
)
{
const
source
=
await
getSourceById
(
gThreadClient
packet
.
frame
.
where
.
actor
)
;
gThreadClient
.
setBreakpoint
(
{
sourceUrl
:
source
.
url
line
:
3
}
{
logValue
:
"
a
"
}
)
;
gThreadClient
.
resume
(
)
;
}
)
;
Cu
.
evalInSandbox
(
"
debugger
;
\
n
"
+
"
var
a
=
'
three
'
;
\
n
"
+
"
var
b
=
2
;
\
n
"
gDebuggee
"
1
.
8
"
"
test
.
js
"
1
)
;
Assert
.
equal
(
lastMessage
.
arguments
[
0
]
"
three
"
)
;
finishClient
(
gClient
)
;
}
