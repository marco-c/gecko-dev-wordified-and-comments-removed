"
use
strict
"
;
Services
.
prefs
.
setBoolPref
(
"
security
.
allow_eval_with_system_principal
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
allow_eval_with_system_principal
"
)
;
}
)
;
async
function
run_test
(
)
{
do_test_pending
(
)
;
await
run_test_with_server
(
DebuggerServer
)
;
await
run_test_with_server
(
WorkerDebuggerServer
)
;
do_test_finished
(
)
;
}
async
function
run_test_with_server
(
server
)
{
initTestDebuggerServer
(
server
)
;
const
debuggee
=
addTestGlobal
(
"
test
-
grips
"
server
)
;
debuggee
.
eval
(
function
stopMe
(
arg1
)
{
debugger
;
}
.
toString
(
)
)
;
const
dbgClient
=
new
DebuggerClient
(
server
.
connectPipe
(
)
)
;
await
dbgClient
.
connect
(
)
;
const
[
threadClient
]
=
await
attachTestTabAndResume
(
dbgClient
"
test
-
grips
"
)
;
const
isArrayLike
=
object
=
>
test_object_grip_is_array_like
(
debuggee
dbgClient
threadClient
object
)
;
equal
(
await
isArrayLike
(
{
}
)
false
"
An
empty
object
is
not
ArrayLike
"
)
;
equal
(
await
isArrayLike
(
{
length
:
0
}
)
false
"
An
object
with
only
a
length
property
is
not
ArrayLike
"
)
;
equal
(
await
isArrayLike
(
{
2
:
"
two
"
}
)
false
"
Object
not
starting
at
0
is
not
ArrayLike
"
)
;
equal
(
await
isArrayLike
(
{
0
:
"
zero
"
2
:
"
two
"
}
)
false
"
Object
with
non
-
consecutive
numeric
keys
is
not
ArrayLike
"
)
;
equal
(
await
isArrayLike
(
{
0
:
"
zero
"
2
:
"
two
"
length
:
2
}
)
false
"
Object
with
non
-
consecutive
numeric
keys
is
not
ArrayLike
"
)
;
equal
(
await
isArrayLike
(
{
0
:
"
zero
"
1
:
"
one
"
2
:
"
two
"
three
:
3
}
)
false
"
Object
with
a
non
-
numeric
property
other
than
length
is
not
ArrayLike
"
)
;
equal
(
await
isArrayLike
(
{
0
:
"
zero
"
1
:
"
one
"
2
:
"
two
"
three
:
3
length
:
3
}
)
false
"
Object
with
a
non
-
numeric
property
other
than
length
is
not
ArrayLike
"
)
;
equal
(
await
isArrayLike
(
{
0
:
"
zero
"
1
:
"
one
"
2
:
"
two
"
length
:
30
}
)
false
"
Object
with
a
wrongful
length
property
is
not
ArrayLike
"
)
;
equal
(
await
isArrayLike
(
{
0
:
"
zero
"
}
)
true
)
;
equal
(
await
isArrayLike
(
{
0
:
"
zero
"
1
:
"
two
"
}
)
true
)
;
equal
(
await
isArrayLike
(
{
0
:
"
zero
"
1
:
"
one
"
2
:
"
two
"
length
:
3
}
)
true
)
;
await
dbgClient
.
close
(
)
;
}
async
function
test_object_grip_is_array_like
(
debuggee
dbgClient
threadClient
object
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
threadClient
.
addOneTimeListener
(
"
paused
"
async
function
(
event
packet
)
{
const
[
grip
]
=
packet
.
frame
.
arguments
;
await
threadClient
.
resume
(
)
;
resolve
(
grip
.
preview
.
kind
=
=
=
"
ArrayLike
"
)
;
}
)
;
debuggee
.
eval
(
stopMe
(
{
JSON
.
stringify
(
object
)
}
)
;
)
;
}
)
;
}
