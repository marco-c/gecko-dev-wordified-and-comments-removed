"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadClient
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
stack
"
)
;
gClient
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
stack
"
function
(
response
tabClient
threadClient
)
{
gThreadClient
=
threadClient
;
test_pause_frame
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
function
test_pause_frame
(
)
{
gThreadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
gThreadClient
.
getFrames
(
0
null
function
(
frameResponse
)
{
Assert
.
equal
(
frameResponse
.
frames
.
length
5
)
;
const
expectPopped
=
frameResponse
.
frames
.
slice
(
0
3
)
.
map
(
frame
=
>
frame
.
actor
)
;
expectPopped
.
sort
(
)
;
gThreadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
pausePacket
)
{
const
popped
=
pausePacket
.
poppedFrames
.
sort
(
)
;
Assert
.
equal
(
popped
.
length
3
)
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
Assert
.
equal
(
expectPopped
[
i
]
popped
[
i
]
)
;
}
gThreadClient
.
resume
(
(
)
=
>
finishClient
(
gClient
)
)
;
}
)
;
gThreadClient
.
resume
(
)
;
}
)
;
}
)
;
gDebuggee
.
eval
(
"
(
"
+
function
(
)
{
function
depth3
(
)
{
debugger
;
}
function
depth2
(
)
{
depth3
(
)
;
}
function
depth1
(
)
{
depth2
(
)
;
}
depth1
(
)
;
debugger
;
}
+
"
)
(
)
"
)
;
}
