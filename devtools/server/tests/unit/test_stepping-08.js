"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gCallback
;
function
run_test
(
)
{
do_test_pending
(
)
;
run_test_with_server
(
DebuggerServer
function
(
)
{
run_test_with_server
(
WorkerDebuggerServer
do_test_finished
)
;
}
)
;
}
function
run_test_with_server
(
server
callback
)
{
gCallback
=
callback
;
initTestDebuggerServer
(
server
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
stepping
"
server
)
;
gClient
=
new
DebuggerClient
(
server
.
connectPipe
(
)
)
;
gClient
.
connect
(
testStepOutWithBreakpoint
)
;
}
async
function
testStepOutWithBreakpoint
(
)
{
const
[
attachResponse
threadClient
]
=
await
attachTestTabAndResume
(
gClient
"
test
-
stepping
"
)
;
ok
(
!
attachResponse
.
error
"
Should
not
get
an
error
attaching
"
)
;
dumpn
(
"
Evaluating
test
code
and
waiting
for
first
debugger
statement
"
)
;
const
dbgStmt
=
await
executeOnNextTickAndWaitForPause
(
evaluateTestCode
gClient
)
;
equal
(
dbgStmt
.
frame
.
where
.
line
3
"
Should
be
at
debugger
statement
on
line
3
"
)
;
dumpn
(
"
Setting
breakpoint
in
innerFunction
"
)
;
const
source
=
threadClient
.
source
(
dbgStmt
.
frame
.
where
.
source
)
;
await
source
.
setBreakpoint
(
{
line
:
7
}
)
;
dumpn
(
"
Step
in
to
innerFunction
"
)
;
const
step1
=
await
stepIn
(
gClient
threadClient
)
;
equal
(
step1
.
frame
.
where
.
line
7
)
;
dumpn
(
"
Step
out
of
innerFunction
"
)
;
const
step2
=
await
stepOut
(
gClient
threadClient
)
;
equal
(
step2
.
frame
.
where
.
line
4
)
;
finishClient
(
gClient
gCallback
)
;
}
function
evaluateTestCode
(
)
{
Cu
.
evalInSandbox
(
/
/
1
function
outerFunction
(
)
{
/
/
2
debugger
;
innerFunction
(
)
;
/
/
3
}
/
/
4
/
/
5
function
innerFunction
(
)
{
/
/
6
var
x
=
0
;
/
/
7
var
y
=
72
;
/
/
8
return
x
+
y
;
/
/
9
}
/
/
10
outerFunction
(
)
;
/
/
11
gDebuggee
"
1
.
8
"
"
test_stepping
-
08
-
test
-
code
.
js
"
1
)
;
}
