"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gCallback
;
function
run_test
(
)
{
do_test_pending
(
)
;
run_test_with_server
(
DebuggerServer
function
(
)
{
run_test_with_server
(
WorkerDebuggerServer
do_test_finished
)
;
}
)
;
}
function
run_test_with_server
(
server
callback
)
{
gCallback
=
callback
;
initTestDebuggerServer
(
server
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
stepping
"
server
)
;
gClient
=
new
DebuggerClient
(
server
.
connectPipe
(
)
)
;
gClient
.
connect
(
testStepOutWithBreakpoint
)
;
}
async
function
testStepOutWithBreakpoint
(
)
{
const
[
attachResponse
threadClient
]
=
await
attachTestTabAndResume
(
gClient
"
test
-
stepping
"
)
;
ok
(
!
attachResponse
.
error
"
Should
not
get
an
error
attaching
"
)
;
dumpn
(
"
Evaluating
test
code
and
waiting
for
first
debugger
statement
"
)
;
const
dbgStmt
=
await
executeOnNextTickAndWaitForPause
(
evaluateTestCode
gClient
)
;
equal
(
dbgStmt
.
frame
.
where
.
line
2
"
Should
be
at
debugger
statement
on
line
2
"
)
;
dumpn
(
"
Step
out
of
inner
and
into
outer
"
)
;
const
step2
=
await
stepOut
(
gClient
threadClient
)
;
equal
(
step2
.
frame
.
where
.
line
2
)
;
equal
(
step2
.
why
.
frameFinished
.
return
42
)
;
finishClient
(
gClient
gCallback
)
;
}
function
evaluateTestCode
(
)
{
Cu
.
evalInSandbox
(
function
outer
(
)
{
inner
(
)
;
return
42
;
}
function
inner
(
)
{
debugger
;
}
outer
(
)
;
gDebuggee
"
1
.
8
"
"
test_stepping
-
09
-
test
-
code
.
js
"
1
)
;
}
