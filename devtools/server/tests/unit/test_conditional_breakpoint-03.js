"
use
strict
"
;
var
gDebuggee
;
var
gThreadFront
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
}
)
=
>
{
gThreadFront
=
threadFront
;
gDebuggee
=
debuggee
;
test_simple_breakpoint
(
)
;
}
{
waitForFinish
:
true
}
)
)
;
function
test_simple_breakpoint
(
)
{
gThreadFront
.
once
(
"
paused
"
async
function
(
packet
)
{
const
source
=
await
getSourceById
(
gThreadFront
packet
.
frame
.
where
.
actor
)
;
gThreadFront
.
pauseOnExceptions
(
true
false
)
;
const
location
=
{
sourceUrl
:
source
.
url
line
:
3
}
;
gThreadFront
.
setBreakpoint
(
location
{
condition
:
"
throw
new
Error
(
)
"
}
)
;
gThreadFront
.
once
(
"
paused
"
async
function
(
packet
)
{
Assert
.
equal
(
packet
.
why
.
type
"
exception
"
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
1
)
;
await
stepOver
(
gThreadFront
)
;
packet
=
await
stepOver
(
gThreadFront
)
;
Assert
.
equal
(
packet
.
why
.
type
"
breakpointConditionThrown
"
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
3
)
;
gThreadFront
.
removeBreakpoint
(
location
)
;
gThreadFront
.
resume
(
)
.
then
(
function
(
)
{
threadFrontTestFinished
(
)
;
}
)
;
}
)
;
gThreadFront
.
resume
(
)
;
}
)
;
Cu
.
evalInSandbox
(
"
debugger
;
\
n
"
+
"
var
a
=
1
;
\
n
"
+
"
var
b
=
2
;
\
n
"
gDebuggee
"
1
.
8
"
"
test
.
js
"
1
)
;
}
