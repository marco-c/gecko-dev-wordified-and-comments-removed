"
use
strict
"
;
add_task
(
threadClientTest
(
(
{
threadClient
debuggee
}
)
=
>
{
return
new
Promise
(
resolve
=
>
{
let
done
=
false
;
threadClient
.
addOneTimeListener
(
"
paused
"
async
function
(
event
packet
)
{
const
source
=
await
getSourceById
(
threadClient
packet
.
frame
.
where
.
actor
)
;
const
location
=
{
line
:
debuggee
.
line0
+
2
}
;
source
.
setBreakpoint
(
location
)
.
then
(
function
(
[
response
bpClient
]
)
{
threadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
Assert
.
equal
(
packet
.
type
"
paused
"
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
actor
source
.
actor
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
location
.
line
)
;
Assert
.
equal
(
packet
.
why
.
type
"
breakpoint
"
)
;
Assert
.
equal
(
packet
.
why
.
actors
[
0
]
bpClient
.
actor
)
;
Assert
.
equal
(
debuggee
.
a
undefined
)
;
bpClient
.
remove
(
function
(
response
)
{
done
=
true
;
threadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
threadClient
.
resume
(
function
(
)
{
Assert
.
ok
(
false
)
;
}
)
;
}
)
;
threadClient
.
resume
(
)
;
}
)
;
}
)
;
threadClient
.
resume
(
)
;
}
)
;
}
)
;
Cu
.
evalInSandbox
(
"
var
line0
=
Error
(
)
.
lineNumber
;
\
n
"
+
"
function
foo
(
stop
)
{
\
n
"
+
"
this
.
a
=
1
;
\
n
"
+
"
if
(
stop
)
return
;
\
n
"
+
"
delete
this
.
a
;
\
n
"
+
"
foo
(
true
)
;
\
n
"
+
"
}
\
n
"
+
"
debugger
;
\
n
"
+
"
foo
(
)
;
\
n
"
debuggee
)
;
if
(
!
done
)
{
Assert
.
ok
(
false
)
;
}
resolve
(
)
;
}
)
;
}
)
)
;
