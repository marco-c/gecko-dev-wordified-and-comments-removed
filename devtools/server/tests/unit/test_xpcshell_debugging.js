"
use
strict
"
;
add_task
(
async
function
(
)
{
const
testFile
=
do_get_file
(
"
xpcshell_debugging_script
.
js
"
)
;
let
testResumed
=
false
;
const
{
DebuggerServer
}
=
_setupDebuggerServer
(
[
testFile
.
path
]
(
)
=
>
{
testResumed
=
true
;
}
)
;
const
transport
=
DebuggerServer
.
connectPipe
(
)
;
const
client
=
new
DebuggerClient
(
transport
)
;
await
client
.
connect
(
)
;
const
deviceFront
=
await
client
.
mainRoot
.
getFront
(
"
device
"
)
;
const
desc
=
await
deviceFront
.
getDescription
(
)
;
equal
(
desc
.
geckobuildid
Services
.
appinfo
.
platformBuildID
"
device
actor
works
"
)
;
const
front
=
await
client
.
mainRoot
.
getMainProcess
(
)
;
const
[
threadClient
]
=
await
front
.
attachThread
(
)
;
const
onResumed
=
new
Promise
(
resolve
=
>
{
threadClient
.
addOneTimeListener
(
"
paused
"
(
event
packet
)
=
>
{
equal
(
packet
.
why
.
type
"
breakpoint
"
"
yay
-
hit
the
breakpoint
at
the
first
line
in
our
script
"
)
;
threadClient
.
addOneTimeListener
(
"
paused
"
(
event
packet
)
=
>
{
equal
(
packet
.
why
.
type
"
debuggerStatement
"
"
yay
-
hit
the
'
debugger
'
statement
in
our
script
"
)
;
threadClient
.
resume
(
)
.
then
(
resolve
)
;
}
)
;
threadClient
.
resume
(
)
;
}
)
;
}
)
;
threadClient
.
resume
(
)
.
then
(
(
)
=
>
{
ok
(
testResumed
)
;
load
(
testFile
.
path
)
;
}
)
;
await
onResumed
;
finishClient
(
client
)
;
}
)
;
