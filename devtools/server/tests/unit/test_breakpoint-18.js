"
use
strict
"
;
add_task
(
threadClientTest
(
(
{
threadClient
debuggee
client
}
)
=
>
{
return
new
Promise
(
resolve
=
>
{
debuggee
.
console
=
{
log
:
x
=
>
void
x
}
;
threadClient
.
once
(
"
paused
"
async
(
packet1
)
=
>
{
await
setBreakpoint
(
packet1
threadClient
client
)
;
threadClient
.
once
(
"
paused
"
(
{
why
}
)
=
>
{
Assert
.
equal
(
why
.
type
"
breakpoint
"
)
;
threadClient
.
once
(
"
paused
"
(
packet3
)
=
>
{
testDbgStatement
(
packet3
)
;
resolve
(
)
;
}
)
;
threadClient
.
resume
(
)
;
}
)
;
debuggee
.
test
(
)
;
}
)
;
Cu
.
evalInSandbox
(
"
debugger
;
\
n
"
+
function
test
(
)
{
console
.
log
(
"
foo
bar
"
)
;
debugger
;
}
debuggee
"
1
.
8
"
"
http
:
/
/
example
.
com
/
"
1
)
;
}
)
;
}
)
)
;
function
setBreakpoint
(
packet
threadClient
client
)
{
return
new
Promise
(
async
resolve
=
>
{
const
source
=
await
getSourceById
(
threadClient
packet
.
frame
.
where
.
actor
)
;
threadClient
.
once
(
"
resumed
"
resolve
)
;
threadClient
.
setBreakpoint
(
{
sourceUrl
:
source
.
url
line
:
3
}
{
}
)
;
await
client
.
waitForRequestsToSettle
(
)
;
await
threadClient
.
resume
(
)
;
}
)
;
}
function
testDbgStatement
(
{
why
}
)
{
Assert
.
equal
(
why
.
type
"
debuggerStatement
"
)
;
Assert
.
notEqual
(
why
.
type
"
breakpoint
"
)
;
}
