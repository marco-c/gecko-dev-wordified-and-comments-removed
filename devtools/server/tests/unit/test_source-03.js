"
use
strict
"
;
const
SOURCE_URL
=
getFileUrl
(
"
source
-
03
.
js
"
)
;
add_task
(
threadClientTest
(
async
(
{
threadClient
server
}
)
=
>
{
const
promise
=
waitForNewSource
(
threadClient
SOURCE_URL
)
;
server
.
allowNewThreadGlobals
(
)
;
const
debuggee1
=
Cu
.
Sandbox
(
systemPrincipal
)
;
debuggee1
.
__name
=
"
debuggee2
.
js
"
;
const
debuggee2
=
Cu
.
Sandbox
(
systemPrincipal
)
;
debuggee2
.
__name
=
"
debuggee2
.
js
"
;
server
.
disallowNewThreadGlobals
(
)
;
loadSubScript
(
SOURCE_URL
debuggee1
)
;
loadSubScript
(
SOURCE_URL
debuggee2
)
;
await
promise
;
await
setBreakpoint
(
threadClient
{
sourceUrl
:
SOURCE_URL
line
:
4
}
)
;
const
{
sources
}
=
await
getSources
(
threadClient
)
;
Assert
.
equal
(
sources
.
length
1
)
;
let
pausedOne
=
false
;
threadClient
.
once
(
"
paused
"
function
(
packet
)
{
pausedOne
=
true
;
resume
(
threadClient
)
;
}
)
;
Cu
.
evalInSandbox
(
"
init
(
)
"
debuggee1
"
1
.
8
"
"
test
.
js
"
1
)
;
Assert
.
equal
(
pausedOne
true
)
;
let
pausedTwo
=
false
;
threadClient
.
once
(
"
paused
"
function
(
packet
)
{
pausedTwo
=
true
;
resume
(
threadClient
)
;
}
)
;
Cu
.
evalInSandbox
(
"
init
(
)
"
debuggee2
"
1
.
8
"
"
test
.
js
"
1
)
;
Assert
.
equal
(
pausedTwo
true
)
;
}
{
doNotRunWorker
:
true
}
)
)
;
