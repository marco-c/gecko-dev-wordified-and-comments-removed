"
use
strict
"
;
const
URL
=
"
foo
.
js
"
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
const
debuggee
=
addTestGlobal
(
"
test
-
symbols
"
)
;
const
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
client
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
client
"
test
-
symbols
"
function
(
response
targetFront
threadFront
)
{
add_task
(
testSymbols
.
bind
(
null
client
threadFront
debuggee
)
)
;
run_next_test
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
async
function
testSymbols
(
client
threadFront
debuggee
)
{
const
evalCode
=
(
)
=
>
{
Cu
.
evalInSandbox
(
"
(
"
+
function
(
)
{
Symbol
.
prototype
.
toString
=
(
)
=
>
{
throw
new
Error
(
"
lololol
"
)
;
}
;
var
sym
=
Symbol
(
"
le
troll
"
)
;
debugger
;
}
+
"
(
)
)
"
debuggee
"
1
.
8
"
URL
1
)
;
}
;
const
packet
=
await
executeOnNextTickAndWaitForPause
(
evalCode
threadFront
)
;
const
{
sym
}
=
packet
.
frame
.
environment
.
bindings
.
variables
;
equal
(
sym
.
value
.
type
"
symbol
"
)
;
equal
(
sym
.
value
.
name
"
le
troll
"
)
;
finishClient
(
client
)
;
}
