"
use
strict
"
;
const
{
ExtensionTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
jsm
"
)
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
Message
manager
disconnected
/
)
;
const
{
createAppInfo
promiseStartupManager
}
=
AddonTestUtils
;
const
LEAVE_UUID_PREF
=
"
extensions
.
webextensions
.
keepUuidOnUninstall
"
;
const
LEAVE_STORAGE_PREF
=
"
extensions
.
webextensions
.
keepStorageOnUninstall
"
;
const
EXTENSION_STORAGE_ENABLED_PREF
=
"
devtools
.
storage
.
extensionStorage
.
enabled
"
;
AddonTestUtils
.
init
(
this
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
42
"
)
;
ExtensionTestUtils
.
init
(
this
)
;
Services
.
prefs
.
setBoolPref
(
EXTENSION_STORAGE_ENABLED_PREF
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
EXTENSION_STORAGE_ENABLED_PREF
)
;
}
)
;
async
function
startDebugger
(
)
{
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerAllActors
(
)
;
const
transport
=
DebuggerServer
.
connectPipe
(
)
;
const
client
=
new
DebuggerClient
(
transport
)
;
await
client
.
connect
(
)
;
return
client
;
}
async
function
setupExtensionDebugging
(
id
)
{
const
client
=
await
startDebugger
(
)
;
const
front
=
await
client
.
mainRoot
.
getAddon
(
{
id
}
)
;
const
target
=
await
front
.
getTarget
(
)
;
return
{
front
target
}
;
}
async
function
startupExtension
(
extConfig
)
{
const
extension
=
ExtensionTestUtils
.
loadExtension
(
extConfig
)
;
await
extension
.
startup
(
)
;
return
extension
;
}
async
function
openAddonStoragePanel
(
id
)
{
const
{
target
}
=
await
setupExtensionDebugging
(
id
)
;
const
storageFront
=
await
target
.
getFront
(
"
storage
"
)
;
const
stores
=
await
storageFront
.
listStores
(
)
;
const
extensionStorage
=
stores
.
extensionStorage
|
|
null
;
return
{
target
extensionStorage
}
;
}
function
getExtensionConfig
(
options
=
{
}
)
{
const
{
manifest
.
.
.
otherOptions
}
=
options
;
const
baseConfig
=
{
manifest
:
{
.
.
.
manifest
permissions
:
[
"
storage
"
]
}
useAddonManager
:
"
temporary
"
}
;
return
{
.
.
.
baseConfig
.
.
.
otherOptions
}
;
}
async
function
extensionScriptWithMessageListener
(
)
{
let
fireOnChanged
=
false
;
browser
.
storage
.
onChanged
.
addListener
(
(
)
=
>
{
if
(
fireOnChanged
)
{
fireOnChanged
=
false
;
browser
.
test
.
sendMessage
(
"
storage
-
local
-
onChanged
"
)
;
}
}
)
;
browser
.
test
.
onMessage
.
addListener
(
async
(
msg
.
.
.
args
)
=
>
{
let
value
=
null
;
switch
(
msg
)
{
case
"
storage
-
local
-
set
"
:
await
browser
.
storage
.
local
.
set
(
args
[
0
]
)
;
break
;
case
"
storage
-
local
-
get
"
:
value
=
(
await
browser
.
storage
.
local
.
get
(
args
[
0
]
)
)
[
args
[
0
]
]
;
break
;
case
"
storage
-
local
-
remove
"
:
await
browser
.
storage
.
local
.
remove
(
args
[
0
]
)
;
break
;
case
"
storage
-
local
-
clear
"
:
await
browser
.
storage
.
local
.
clear
(
)
;
break
;
case
"
storage
-
local
-
fireOnChanged
"
:
{
fireOnChanged
=
true
;
return
;
}
default
:
browser
.
test
.
fail
(
Unexpected
test
message
:
{
msg
}
)
;
}
browser
.
test
.
sendMessage
(
{
msg
}
:
done
value
)
;
}
)
;
browser
.
test
.
sendMessage
(
"
extension
-
origin
"
window
.
location
.
origin
)
;
}
const
ext_no_bg
=
{
files
:
{
"
extension_page_in_tab
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
/
head
>
<
body
>
<
h1
>
Extension
Page
in
a
Tab
<
/
h1
>
<
script
src
=
"
extension_page_in_tab
.
js
"
>
<
/
script
>
<
/
body
>
<
/
html
>
"
extension_page_in_tab
.
js
"
:
extensionScriptWithMessageListener
}
}
;
async
function
shutdown
(
extension
target
)
{
if
(
target
)
{
await
target
.
destroy
(
)
;
}
await
extension
.
unload
(
)
;
}
add_task
(
async
function
setup
(
)
{
await
promiseStartupManager
(
)
;
}
)
;
add_task
(
async
function
test_extension_store_exists
(
)
{
const
extension
=
await
startupExtension
(
getExtensionConfig
(
)
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
ok
(
extensionStorage
"
Should
have
an
extensionStorage
store
"
)
;
await
shutdown
(
extension
target
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
WebExtensionPolicy
.
useRemoteWebExtensions
}
async
function
test_extension_origin_matches_debugger_target
(
)
{
async
function
background
(
)
{
browser
.
test
.
sendMessage
(
"
extension
-
origin
"
window
.
location
.
origin
)
;
}
const
extension
=
await
startupExtension
(
getExtensionConfig
(
{
background
}
)
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
const
{
hosts
}
=
extensionStorage
;
const
expectedHost
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
ok
(
expectedHost
in
hosts
"
Should
have
the
expected
extension
host
in
the
extensionStorage
store
"
)
;
await
shutdown
(
extension
target
)
;
}
)
;
add_task
(
async
function
test_panel_live_updates
(
)
{
const
extension
=
await
startupExtension
(
getExtensionConfig
(
{
background
:
extensionScriptWithMessageListener
}
)
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
const
host
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
let
{
data
}
=
await
extensionStorage
.
getStoreObjects
(
host
)
;
Assert
.
deepEqual
(
data
[
]
"
Got
the
expected
results
on
empty
storage
.
local
"
)
;
info
(
"
Waiting
for
extension
to
bulk
add
50
items
to
storage
local
"
)
;
const
bulkStorageItems
=
{
}
;
const
numItems
=
2
;
for
(
let
i
=
1
;
i
<
=
numItems
;
i
+
+
)
{
bulkStorageItems
[
i
]
=
i
;
}
extension
.
sendMessage
(
"
storage
-
local
-
fireOnChanged
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
.
.
.
bulkStorageItems
a
:
123
b
:
[
4
5
]
c
:
{
d
:
678
}
d
:
true
e
:
"
hi
"
f
:
null
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
onChanged
"
)
;
info
(
"
Confirming
items
added
by
extension
match
items
in
extensionStorage
store
"
)
;
const
bulkStorageObjects
=
[
]
;
for
(
const
[
name
value
]
of
Object
.
entries
(
bulkStorageItems
)
)
{
bulkStorageObjects
.
push
(
{
area
:
"
local
"
name
value
:
{
str
:
String
(
value
)
}
}
)
;
}
data
=
(
await
extensionStorage
.
getStoreObjects
(
host
)
)
.
data
;
Assert
.
deepEqual
(
data
[
.
.
.
bulkStorageObjects
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
"
123
"
}
}
{
area
:
"
local
"
name
:
"
b
"
value
:
{
str
:
"
[
4
5
]
"
}
}
{
area
:
"
local
"
name
:
"
c
"
value
:
{
str
:
'
{
"
d
"
:
678
}
'
}
}
{
area
:
"
local
"
name
:
"
d
"
value
:
{
str
:
"
true
"
}
}
{
area
:
"
local
"
name
:
"
e
"
value
:
{
str
:
"
hi
"
}
}
{
area
:
"
local
"
name
:
"
f
"
value
:
{
str
:
"
null
"
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
info
(
"
Waiting
for
extension
to
edit
a
few
storage
item
values
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
fireOnChanged
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
a
:
[
"
c
"
"
d
"
]
b
:
456
c
:
false
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
onChanged
"
)
;
info
(
"
Confirming
items
edited
by
extension
match
items
in
extensionStorage
store
"
)
;
data
=
(
await
extensionStorage
.
getStoreObjects
(
host
)
)
.
data
;
Assert
.
deepEqual
(
data
[
.
.
.
bulkStorageObjects
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
'
[
"
c
"
"
d
"
]
'
}
}
{
area
:
"
local
"
name
:
"
b
"
value
:
{
str
:
"
456
"
}
}
{
area
:
"
local
"
name
:
"
c
"
value
:
{
str
:
"
false
"
}
}
{
area
:
"
local
"
name
:
"
d
"
value
:
{
str
:
"
true
"
}
}
{
area
:
"
local
"
name
:
"
e
"
value
:
{
str
:
"
hi
"
}
}
{
area
:
"
local
"
name
:
"
f
"
value
:
{
str
:
"
null
"
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
info
(
"
Waiting
for
extension
to
remove
a
few
storage
item
values
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
fireOnChanged
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
remove
"
[
"
d
"
"
e
"
"
f
"
]
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
remove
:
done
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
onChanged
"
)
;
info
(
"
Confirming
items
removed
by
extension
were
removed
in
extensionStorage
store
"
)
;
data
=
(
await
extensionStorage
.
getStoreObjects
(
host
)
)
.
data
;
Assert
.
deepEqual
(
data
[
.
.
.
bulkStorageObjects
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
'
[
"
c
"
"
d
"
]
'
}
}
{
area
:
"
local
"
name
:
"
b
"
value
:
{
str
:
"
456
"
}
}
{
area
:
"
local
"
name
:
"
c
"
value
:
{
str
:
"
false
"
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
info
(
"
Waiting
for
extension
to
remove
all
remaining
storage
items
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
fireOnChanged
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
clear
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
clear
:
done
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
onChanged
"
)
;
info
(
"
Confirming
extensionStorage
store
was
cleared
"
)
;
data
=
(
await
extensionStorage
.
getStoreObjects
(
host
)
)
.
data
;
Assert
.
deepEqual
(
data
[
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
await
shutdown
(
extension
target
)
;
}
)
;
add_task
(
async
function
test_panel_data_matches_extension_with_transient_page_open
(
)
{
const
extension
=
await
startupExtension
(
getExtensionConfig
(
{
files
:
ext_no_bg
.
files
}
)
)
;
const
url
=
extension
.
extension
.
baseURI
.
resolve
(
"
extension_page_in_tab
.
html
"
)
;
const
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
url
{
extension
}
)
;
const
host
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
a
:
123
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
const
{
data
}
=
await
extensionStorage
.
getStoreObjects
(
host
)
;
Assert
.
deepEqual
(
data
[
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
"
123
"
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
await
contentPage
.
close
(
)
;
await
shutdown
(
extension
target
)
;
}
)
;
add_task
(
async
function
test_panel_data_matches_extension_with_no_pages_open
(
)
{
const
extension
=
await
startupExtension
(
getExtensionConfig
(
{
files
:
ext_no_bg
.
files
}
)
)
;
const
url
=
extension
.
extension
.
baseURI
.
resolve
(
"
extension_page_in_tab
.
html
"
)
;
const
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
url
{
extension
}
)
;
const
host
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
a
:
123
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
await
contentPage
.
close
(
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
const
{
data
}
=
await
extensionStorage
.
getStoreObjects
(
host
)
;
Assert
.
deepEqual
(
data
[
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
"
123
"
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
await
shutdown
(
extension
target
)
;
}
)
;
add_task
(
async
function
test_panel_data_live_updates_for_extension_without_bg_page
(
)
{
const
extension
=
await
startupExtension
(
getExtensionConfig
(
{
files
:
ext_no_bg
.
files
}
)
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
const
url
=
extension
.
extension
.
baseURI
.
resolve
(
"
extension_page_in_tab
.
html
"
)
;
const
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
url
{
extension
}
)
;
const
host
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
let
{
data
}
=
await
extensionStorage
.
getStoreObjects
(
host
)
;
Assert
.
deepEqual
(
data
[
]
"
Got
the
expected
results
on
empty
storage
.
local
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
fireOnChanged
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
a
:
123
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
onChanged
"
)
;
data
=
(
await
extensionStorage
.
getStoreObjects
(
host
)
)
.
data
;
Assert
.
deepEqual
(
data
[
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
"
123
"
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
fireOnChanged
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
a
:
123
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
onChanged
"
)
;
data
=
(
await
extensionStorage
.
getStoreObjects
(
host
)
)
.
data
;
Assert
.
deepEqual
(
data
[
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
"
123
"
}
}
]
"
The
results
are
unchanged
when
an
extension
page
adds
duplicate
items
"
)
;
await
contentPage
.
close
(
)
;
await
shutdown
(
extension
target
)
;
}
)
;
add_task
(
async
function
test_panel_data_matches_data_added_prior_to_ext_startup
(
)
{
Services
.
prefs
.
setBoolPref
(
LEAVE_UUID_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
LEAVE_STORAGE_PREF
true
)
;
let
extension
=
await
startupExtension
(
getExtensionConfig
(
{
background
:
extensionScriptWithMessageListener
}
)
)
;
const
host
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
a
:
123
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
await
shutdown
(
extension
)
;
extension
=
await
startupExtension
(
getExtensionConfig
(
{
background
:
extensionScriptWithMessageListener
}
)
)
;
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
let
{
data
}
=
await
extensionStorage
.
getStoreObjects
(
host
)
;
Assert
.
deepEqual
(
data
[
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
"
123
"
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
fireOnChanged
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
b
:
456
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
onChanged
"
)
;
data
=
(
await
extensionStorage
.
getStoreObjects
(
host
)
)
.
data
;
Assert
.
deepEqual
(
data
[
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
"
123
"
}
}
{
area
:
"
local
"
name
:
"
b
"
value
:
{
str
:
"
456
"
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
Services
.
prefs
.
setBoolPref
(
LEAVE_STORAGE_PREF
false
)
;
Services
.
prefs
.
setBoolPref
(
LEAVE_UUID_PREF
false
)
;
await
shutdown
(
extension
target
)
;
}
)
;
add_task
(
function
cleanup_for_test_panel_data_matches_data_added_prior_to_ext_startup
(
)
{
Services
.
prefs
.
clearUserPref
(
LEAVE_UUID_PREF
)
;
Services
.
prefs
.
clearUserPref
(
LEAVE_STORAGE_PREF
)
;
}
)
;
add_task
(
async
function
test_panel_live_reload
(
)
{
const
EXTENSION_ID
=
"
test_panel_live_reload
xpcshell
.
mozilla
.
org
"
;
let
manifest
=
{
version
:
"
1
.
0
"
applications
:
{
gecko
:
{
id
:
EXTENSION_ID
}
}
}
;
info
(
"
Loading
extension
version
1
.
0
"
)
;
const
extension
=
await
startupExtension
(
getExtensionConfig
(
{
manifest
background
:
extensionScriptWithMessageListener
}
)
)
;
info
(
"
Waiting
for
message
from
test
extension
"
)
;
const
host
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
info
(
"
Adding
storage
item
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
a
:
123
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
manifest
=
{
.
.
.
manifest
version
:
"
2
.
0
"
}
;
info
(
"
Update
to
version
2
.
0
"
)
;
await
extension
.
upgrade
(
getExtensionConfig
(
{
manifest
background
:
extensionScriptWithMessageListener
}
)
)
;
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
const
{
data
}
=
await
extensionStorage
.
getStoreObjects
(
host
)
;
Assert
.
deepEqual
(
data
[
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
"
123
"
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
await
shutdown
(
extension
target
)
;
}
)
;
add_task
(
async
function
test_panel_live_reload_for_extension_without_bg_page
(
)
{
const
EXTENSION_ID
=
"
test_local_storage_live_reload
xpcshell
.
mozilla
.
org
"
;
let
manifest
=
{
version
:
"
1
.
0
"
applications
:
{
gecko
:
{
id
:
EXTENSION_ID
}
}
}
;
info
(
"
Loading
and
starting
extension
version
1
.
0
"
)
;
const
extension
=
await
startupExtension
(
getExtensionConfig
(
{
manifest
files
:
ext_no_bg
.
files
}
)
)
;
info
(
"
Opening
extension
page
in
a
tab
"
)
;
const
url
=
extension
.
extension
.
baseURI
.
resolve
(
"
extension_page_in_tab
.
html
"
)
;
const
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
url
{
extension
}
)
;
const
host
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
info
(
"
Waiting
for
extension
page
in
a
tab
to
add
storage
item
"
)
;
extension
.
sendMessage
(
"
storage
-
local
-
set
"
{
a
:
123
}
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
set
:
done
"
)
;
await
contentPage
.
close
(
)
;
info
(
"
Opening
storage
panel
"
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
manifest
=
{
.
.
.
manifest
version
:
"
2
.
0
"
}
;
info
(
"
Updating
extension
to
version
2
.
0
"
)
;
await
extension
.
upgrade
(
getExtensionConfig
(
{
manifest
files
:
ext_no_bg
.
files
}
)
)
;
const
{
data
}
=
await
extensionStorage
.
getStoreObjects
(
host
)
;
Assert
.
deepEqual
(
data
[
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
"
123
"
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
await
shutdown
(
extension
target
)
;
}
)
;
add_task
(
async
function
test_panel_live_reload_when_extension_auto_adds_items
(
)
{
async
function
background
(
)
{
await
browser
.
storage
.
local
.
set
(
{
a
:
{
b
:
123
}
c
:
{
d
:
456
}
}
)
;
browser
.
test
.
sendMessage
(
"
extension
-
origin
"
window
.
location
.
origin
)
;
}
const
EXTENSION_ID
=
"
test_local_storage_live_reload
xpcshell
.
mozilla
.
org
"
;
let
manifest
=
{
version
:
"
1
.
0
"
applications
:
{
gecko
:
{
id
:
EXTENSION_ID
}
}
}
;
info
(
"
Loading
and
starting
extension
version
1
.
0
"
)
;
const
extension
=
await
startupExtension
(
getExtensionConfig
(
{
manifest
background
}
)
)
;
info
(
"
Waiting
for
message
from
test
extension
"
)
;
const
host
=
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
info
(
"
Opening
storage
panel
"
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
manifest
=
{
.
.
.
manifest
version
:
"
2
.
0
"
}
;
info
(
"
Update
to
version
2
.
0
"
)
;
await
extension
.
upgrade
(
getExtensionConfig
(
{
manifest
background
}
)
)
;
await
extension
.
awaitMessage
(
"
extension
-
origin
"
)
;
const
{
data
}
=
await
extensionStorage
.
getStoreObjects
(
host
)
;
Assert
.
deepEqual
(
data
[
{
area
:
"
local
"
name
:
"
a
"
value
:
{
str
:
'
{
"
b
"
:
123
}
'
}
}
{
area
:
"
local
"
name
:
"
c
"
value
:
{
str
:
'
{
"
d
"
:
456
}
'
}
}
]
"
Got
the
expected
results
on
populated
storage
.
local
"
)
;
await
shutdown
(
extension
target
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
WebExtensionPolicy
.
useRemoteWebExtensions
}
async
function
test_extensionStorage_store_disabled_on_pref
(
)
{
Services
.
prefs
.
setBoolPref
(
EXTENSION_STORAGE_ENABLED_PREF
false
)
;
const
extension
=
await
startupExtension
(
getExtensionConfig
(
)
)
;
const
{
target
extensionStorage
}
=
await
openAddonStoragePanel
(
extension
.
id
)
;
ok
(
extensionStorage
=
=
=
null
"
Should
not
have
an
extensionStorage
store
when
pref
disabled
"
)
;
await
shutdown
(
extension
target
)
;
}
)
;
