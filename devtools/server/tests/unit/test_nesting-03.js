"
use
strict
"
;
var
gClient1
gClient2
gThreadClient1
gThreadClient2
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
addTestGlobal
(
"
test
-
nesting1
"
)
;
addTestGlobal
(
"
test
-
nesting1
"
)
;
gClient1
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient1
.
connect
(
function
(
)
{
attachTestThread
(
gClient1
"
test
-
nesting1
"
function
(
response
targetFront
threadClient
)
{
gThreadClient1
=
threadClient
;
start_second_connection
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
function
start_second_connection
(
)
{
gClient2
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient2
.
connect
(
function
(
)
{
attachTestThread
(
gClient2
"
test
-
nesting1
"
function
(
response
targetFront
threadClient
)
{
gThreadClient2
=
threadClient
;
test_nesting
(
)
;
}
)
;
}
)
;
}
async
function
test_nesting
(
)
{
try
{
await
gThreadClient1
.
resume
(
)
;
}
catch
(
e
)
{
Assert
.
ok
(
e
.
includes
(
"
wrongOrder
"
)
)
;
}
try
{
await
gThreadClient2
.
resume
(
)
;
}
catch
(
e
)
{
Assert
.
ok
(
!
e
)
;
}
gThreadClient1
.
resume
(
)
.
then
(
response
=
>
{
Assert
.
ok
(
!
response
.
error
)
;
gClient1
.
close
(
(
)
=
>
finishClient
(
gClient2
)
)
;
}
)
;
}
