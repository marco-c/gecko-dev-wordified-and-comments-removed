"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadClient
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
black
-
box
"
)
;
gClient
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
black
-
box
"
function
(
response
targetFront
threadClient
)
{
gThreadClient
=
threadClient
;
test_black_box
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
const
BLACK_BOXED_URL
=
"
http
:
/
/
example
.
com
/
blackboxme
.
js
"
;
const
SOURCE_URL
=
"
http
:
/
/
example
.
com
/
source
.
js
"
;
function
test_black_box
(
)
{
gClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
gThreadClient
.
eval
(
packet
.
frame
.
actor
"
doStuff
"
function
(
response
)
{
gThreadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
const
obj
=
gThreadClient
.
pauseGrip
(
packet
.
why
.
frameFinished
.
return
)
;
obj
.
getDefinitionSite
(
runWithSource
)
;
}
)
;
}
)
;
function
runWithSource
(
packet
)
{
const
source
=
gThreadClient
.
source
(
packet
.
source
)
;
gThreadClient
.
setBreakpoint
(
{
sourceUrl
:
source
.
url
line
:
2
}
{
}
)
;
gThreadClient
.
resume
(
test_black_box_breakpoint
)
;
}
}
)
;
Cu
.
evalInSandbox
(
"
"
+
function
doStuff
(
k
)
{
const
arg
=
15
;
k
(
arg
)
;
}
gDebuggee
"
1
.
8
"
BLACK_BOXED_URL
1
)
;
Cu
.
evalInSandbox
(
"
"
+
function
runTest
(
)
{
doStuff
(
function
(
n
)
{
debugger
;
}
)
;
}
+
"
\
n
debugger
;
"
gDebuggee
"
1
.
8
"
SOURCE_URL
1
)
;
}
function
test_black_box_breakpoint
(
)
{
gThreadClient
.
getSources
(
async
function
(
{
error
sources
}
)
{
Assert
.
ok
(
!
error
"
Should
not
get
an
error
:
"
+
error
)
;
const
sourceClient
=
gThreadClient
.
source
(
sources
.
filter
(
s
=
>
s
.
url
=
=
BLACK_BOXED_URL
)
[
0
]
)
;
await
blackBox
(
sourceClient
)
;
gClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
Assert
.
equal
(
packet
.
why
.
type
"
debuggerStatement
"
"
We
should
pass
over
the
breakpoint
since
the
source
is
black
boxed
.
"
)
;
gThreadClient
.
resume
(
test_unblack_box_breakpoint
.
bind
(
null
sourceClient
)
)
;
}
)
;
gDebuggee
.
runTest
(
)
;
}
)
;
}
async
function
test_unblack_box_breakpoint
(
sourceClient
)
{
await
unBlackBox
(
sourceClient
)
;
gClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
Assert
.
equal
(
packet
.
why
.
type
"
breakpoint
"
"
We
should
hit
the
breakpoint
again
"
)
;
gClient
.
addOneTimeListener
(
"
paused
"
gThreadClient
.
resume
.
bind
(
gThreadClient
finishClient
.
bind
(
null
gClient
)
)
)
;
gThreadClient
.
resume
(
)
;
}
)
;
gDebuggee
.
runTest
(
)
;
}
