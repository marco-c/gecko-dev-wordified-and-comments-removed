"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadClient
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
grips
"
)
;
gClient
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
grips
"
function
(
response
tabClient
threadClient
)
{
gThreadClient
=
threadClient
;
test_thread_lifetime
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
function
test_thread_lifetime
(
)
{
gThreadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
let
actors
=
[
]
;
let
last
;
for
(
let
grip
of
packet
.
frame
.
arguments
)
{
actors
.
push
(
grip
.
actor
)
;
last
=
grip
.
actor
;
}
gThreadClient
.
threadGrips
(
actors
function
(
response
)
{
do_check_eq
(
response
.
error
undefined
)
;
gThreadClient
.
addOneTimeListener
(
"
paused
"
function
(
event
packet
)
{
actors
.
forEach
(
function
(
actor
i
)
{
do_check_eq
(
actor
packet
.
frame
.
arguments
[
i
]
.
actor
)
;
}
)
;
gThreadClient
.
releaseMany
(
actors
function
(
response
)
{
do_check_eq
(
response
.
error
undefined
)
;
gClient
.
request
(
{
to
:
last
type
:
"
bogusRequest
"
}
function
(
response
)
{
do_check_eq
(
response
.
error
"
noSuchActor
"
)
;
gThreadClient
.
resume
(
function
(
response
)
{
finishClient
(
gClient
)
;
}
)
;
}
)
;
}
)
;
}
)
;
gThreadClient
.
resume
(
)
;
}
)
;
}
)
;
gDebuggee
.
eval
(
"
(
"
+
function
(
)
{
function
stopMe
(
arg1
arg2
arg3
)
{
debugger
;
debugger
;
}
stopMe
(
{
obj
:
1
}
{
obj
:
2
}
{
obj
:
3
}
)
;
}
+
"
)
(
)
"
)
;
}
