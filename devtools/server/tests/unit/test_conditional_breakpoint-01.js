"
use
strict
"
;
var
gDebuggee
;
var
gClient
;
var
gThreadFront
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
gDebuggee
=
addTestGlobal
(
"
test
-
conditional
-
breakpoint
"
)
;
gClient
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
conditional
-
breakpoint
"
function
(
response
targetFront
threadFront
)
{
gThreadFront
=
threadFront
;
test_simple_breakpoint
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
function
test_simple_breakpoint
(
)
{
let
hitBreakpoint
=
false
;
gThreadFront
.
once
(
"
paused
"
async
function
(
packet
)
{
const
source
=
await
getSourceById
(
gThreadFront
packet
.
frame
.
where
.
actor
)
;
const
location
=
{
sourceUrl
:
source
.
url
line
:
3
}
;
gThreadFront
.
setBreakpoint
(
location
{
condition
:
"
a
=
=
=
1
"
}
)
;
gThreadFront
.
once
(
"
paused
"
function
(
packet
)
{
Assert
.
equal
(
hitBreakpoint
false
)
;
hitBreakpoint
=
true
;
Assert
.
equal
(
packet
.
why
.
type
"
breakpoint
"
)
;
Assert
.
equal
(
packet
.
frame
.
where
.
line
3
)
;
gThreadFront
.
removeBreakpoint
(
location
)
;
gThreadFront
.
resume
(
)
.
then
(
function
(
)
{
finishClient
(
gClient
)
;
}
)
;
}
)
;
gThreadFront
.
resume
(
)
;
}
)
;
Cu
.
evalInSandbox
(
"
debugger
;
\
n
"
+
"
var
a
=
1
;
\
n
"
+
"
var
b
=
2
;
\
n
"
gDebuggee
"
1
.
8
"
"
test
.
js
"
1
)
;
Assert
.
equal
(
hitBreakpoint
true
)
;
}
