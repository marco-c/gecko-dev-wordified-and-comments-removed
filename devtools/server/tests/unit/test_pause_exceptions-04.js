"
use
strict
"
;
add_task
(
threadClientTest
(
async
(
{
threadClient
client
debuggee
}
)
=
>
{
let
onResume
=
null
;
let
packet
=
null
;
threadClient
.
once
(
"
paused
"
function
(
pkt
)
{
packet
=
pkt
;
onResume
=
threadClient
.
resume
(
)
;
}
)
;
await
threadClient
.
pauseOnExceptions
(
true
true
)
;
try
{
Cu
.
evalInSandbox
(
/
/
1
function
stopMe
(
)
{
/
/
2
throw
42
;
/
/
3
}
/
/
4
stopMe
(
)
;
/
/
5
debuggee
"
1
.
8
"
"
test_pause_exceptions
-
04
.
js
"
1
)
;
}
catch
(
e
)
{
}
await
onResume
;
Assert
.
equal
(
!
!
packet
true
)
;
Assert
.
equal
(
packet
.
why
.
type
"
exception
"
)
;
Assert
.
equal
(
packet
.
why
.
exception
"
42
"
)
;
packet
=
null
;
threadClient
.
once
(
"
paused
"
function
(
pkt
)
{
packet
=
pkt
;
onResume
=
threadClient
.
resume
(
)
;
}
)
;
await
threadClient
.
pauseOnExceptions
(
false
true
)
;
try
{
Cu
.
evalInSandbox
(
/
/
1
function
dontStopMe
(
)
{
/
/
2
throw
43
;
/
/
3
}
/
/
4
dontStopMe
(
)
;
/
/
5
debuggee
"
1
.
8
"
"
test_pause_exceptions
-
04
.
js
"
1
)
;
}
catch
(
e
)
{
}
Assert
.
equal
(
!
!
packet
false
)
;
await
threadClient
.
pauseOnExceptions
(
true
true
)
;
try
{
Cu
.
evalInSandbox
(
/
/
1
function
stopMeAgain
(
)
{
/
/
2
throw
44
;
/
/
3
}
/
/
4
stopMeAgain
(
)
;
/
/
5
debuggee
"
1
.
8
"
"
test_pause_exceptions
-
04
.
js
"
1
)
;
}
catch
(
e
)
{
}
await
onResume
;
Assert
.
equal
(
!
!
packet
true
)
;
Assert
.
equal
(
packet
.
why
.
type
"
exception
"
)
;
Assert
.
equal
(
packet
.
why
.
exception
"
44
"
)
;
}
{
doNotRunWorker
:
true
}
)
)
;
