"
use
strict
"
;
function
check_actors
(
expect
)
{
Assert
.
equal
(
expect
DebuggerServer
.
tabActorFactories
.
hasOwnProperty
(
"
registeredActor1
"
)
)
;
Assert
.
equal
(
expect
DebuggerServer
.
tabActorFactories
.
hasOwnProperty
(
"
registeredActor2
"
)
)
;
Assert
.
equal
(
expect
DebuggerServer
.
globalActorFactories
.
hasOwnProperty
(
"
registeredActor2
"
)
)
;
Assert
.
equal
(
expect
DebuggerServer
.
globalActorFactories
.
hasOwnProperty
(
"
registeredActor1
"
)
)
;
}
function
run_test
(
)
{
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerAllActors
(
)
;
add_test
(
test_deprecated_api
)
;
add_test
(
test_lazy_api
)
;
add_test
(
cleanup
)
;
run_next_test
(
)
;
}
function
test_deprecated_api
(
)
{
DebuggerServer
.
registerModule
(
"
xpcshell
-
test
/
registertestactors
-
01
"
)
;
DebuggerServer
.
registerModule
(
"
xpcshell
-
test
/
registertestactors
-
02
"
)
;
check_actors
(
true
)
;
DebuggerServer
.
registerModule
(
"
xpcshell
-
test
/
registertestactors
-
01
"
)
;
DebuggerServer
.
registerModule
(
"
xpcshell
-
test
/
registertestactors
-
02
"
)
;
DebuggerServer
.
unregisterModule
(
"
xpcshell
-
test
/
registertestactors
-
01
"
)
;
DebuggerServer
.
unregisterModule
(
"
xpcshell
-
test
/
registertestactors
-
02
"
)
;
check_actors
(
false
)
;
DebuggerServer
.
registerModule
(
"
xpcshell
-
test
/
registertestactors
-
01
"
)
;
DebuggerServer
.
registerModule
(
"
xpcshell
-
test
/
registertestactors
-
02
"
)
;
check_actors
(
true
)
;
run_next_test
(
)
;
}
function
test_lazy_api
(
)
{
let
isActorLoaded
=
false
;
let
isActorInstantiated
=
false
;
function
onActorEvent
(
subject
topic
data
)
{
if
(
data
=
=
"
loaded
"
)
{
isActorLoaded
=
true
;
}
else
if
(
data
=
=
"
instantiated
"
)
{
isActorInstantiated
=
true
;
}
}
Services
.
obs
.
addObserver
(
onActorEvent
"
actor
"
)
;
DebuggerServer
.
registerModule
(
"
xpcshell
-
test
/
registertestactors
-
03
"
{
prefix
:
"
lazy
"
constructor
:
"
LazyActor
"
type
:
{
global
:
true
tab
:
true
}
}
)
;
Assert
.
ok
(
DebuggerServer
.
tabActorFactories
.
hasOwnProperty
(
"
lazyActor
"
)
)
;
Assert
.
ok
(
DebuggerServer
.
globalActorFactories
.
hasOwnProperty
(
"
lazyActor
"
)
)
;
Assert
.
ok
(
!
isActorLoaded
)
;
Assert
.
ok
(
!
isActorInstantiated
)
;
const
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
client
.
connect
(
)
.
then
(
function
onConnect
(
)
{
client
.
listTabs
(
)
.
then
(
onListTabs
)
;
}
)
;
function
onListTabs
(
response
)
{
Assert
.
ok
(
!
isActorLoaded
)
;
Assert
.
ok
(
!
isActorInstantiated
)
;
Assert
.
ok
(
"
lazyActor
"
in
response
)
;
const
{
LazyFront
}
=
require
(
"
xpcshell
-
test
/
registertestactors
-
03
"
)
;
const
front
=
LazyFront
(
client
response
)
;
front
.
hello
(
)
.
then
(
onRequest
)
;
}
function
onRequest
(
response
)
{
Assert
.
equal
(
response
"
world
"
)
;
Assert
.
ok
(
isActorLoaded
)
;
Assert
.
ok
(
isActorInstantiated
)
;
Services
.
obs
.
removeObserver
(
onActorEvent
"
actor
"
)
;
client
.
close
(
)
.
then
(
(
)
=
>
run_next_test
(
)
)
;
}
}
function
cleanup
(
)
{
DebuggerServer
.
destroy
(
)
;
check_actors
(
false
)
;
Assert
.
ok
(
!
DebuggerServer
.
tabActorFactories
.
hasOwnProperty
(
"
lazyActor
"
)
)
;
Assert
.
ok
(
!
DebuggerServer
.
globalActorFactories
.
hasOwnProperty
(
"
lazyActor
"
)
)
;
run_next_test
(
)
;
}
