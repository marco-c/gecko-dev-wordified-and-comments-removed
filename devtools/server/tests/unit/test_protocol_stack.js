"
use
strict
"
;
var
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
var
{
RetVal
}
=
protocol
;
function
simpleHello
(
)
{
return
{
from
:
"
root
"
applicationType
:
"
xpcshell
-
tests
"
traits
:
[
]
}
;
}
const
rootSpec
=
protocol
.
generateActorSpec
(
{
typeName
:
"
root
"
methods
:
{
simpleReturn
:
{
response
:
{
value
:
RetVal
(
)
}
}
}
}
)
;
var
RootActor
=
protocol
.
ActorClassWithSpec
(
rootSpec
{
initialize
:
function
(
conn
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
manage
(
this
)
;
this
.
actorID
=
"
root
"
;
this
.
sequence
=
0
;
}
sayHello
:
simpleHello
simpleReturn
:
function
(
)
{
return
this
.
sequence
+
+
;
}
}
)
;
var
RootFront
=
protocol
.
FrontClassWithSpec
(
rootSpec
{
initialize
:
function
(
client
)
{
this
.
actorID
=
"
root
"
;
protocol
.
Front
.
prototype
.
initialize
.
call
(
this
client
)
;
this
.
manage
(
this
)
;
}
}
)
;
function
run_test
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
javascript
.
options
.
asyncstack
"
)
)
{
info
(
"
Async
stacks
are
disabled
.
"
)
;
return
;
}
DebuggerServer
.
createRootActor
=
RootActor
;
DebuggerServer
.
init
(
)
;
let
trace
=
connectPipeTracing
(
)
;
let
client
=
new
DebuggerClient
(
trace
)
;
let
rootClient
;
client
.
connect
(
)
.
then
(
function
onConnect
(
)
{
rootClient
=
RootFront
(
client
)
;
rootClient
.
simpleReturn
(
)
.
then
(
(
)
=
>
{
let
stack
=
Components
.
stack
;
while
(
stack
)
{
info
(
stack
.
name
)
;
if
(
stack
.
name
.
includes
(
"
run_test
/
onConnect
"
)
)
{
ok
(
true
"
Complete
stack
"
)
;
return
;
}
stack
=
stack
.
asyncCaller
|
|
stack
.
caller
;
}
ok
(
false
"
Incomplete
stack
"
)
;
}
(
)
=
>
{
ok
(
false
"
Request
failed
unexpectedly
"
)
;
}
)
.
then
(
(
)
=
>
{
client
.
close
(
)
.
then
(
(
)
=
>
{
do_test_finished
(
)
;
}
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
