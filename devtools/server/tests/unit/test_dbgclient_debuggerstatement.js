"
use
strict
"
;
var
gClient
;
var
gTabClient
;
var
gDebuggee
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
gDebuggee
=
testGlobal
(
"
test
-
1
"
)
;
DebuggerServer
.
addTestGlobal
(
gDebuggee
)
;
let
transport
=
DebuggerServer
.
connectPipe
(
)
;
gClient
=
new
DebuggerClient
(
transport
)
;
gClient
.
connect
(
)
.
then
(
function
(
[
type
traits
]
)
{
attachTestTab
(
gClient
"
test
-
1
"
function
(
reply
tabClient
)
{
gTabClient
=
tabClient
;
test_threadAttach
(
reply
.
threadActor
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
function
test_threadAttach
(
threadActorID
)
{
info
(
"
Trying
to
attach
to
thread
"
+
threadActorID
)
;
gTabClient
.
attachThread
(
{
}
function
(
response
threadClient
)
{
Assert
.
equal
(
threadClient
.
state
"
paused
"
)
;
Assert
.
equal
(
threadClient
.
actor
threadActorID
)
;
threadClient
.
resume
(
function
(
)
{
Assert
.
equal
(
threadClient
.
state
"
attached
"
)
;
test_debugger_statement
(
threadClient
)
;
}
)
;
}
)
;
}
function
test_debugger_statement
(
threadClient
)
{
threadClient
.
addListener
(
"
paused
"
function
(
event
packet
)
{
Assert
.
equal
(
threadClient
.
state
"
paused
"
)
;
Assert
.
ok
(
gDebuggee
.
a
)
;
Assert
.
ok
(
!
gDebuggee
.
b
)
;
let
xpcInspector
=
Cc
[
"
mozilla
.
org
/
jsinspector
;
1
"
]
.
getService
(
Ci
.
nsIJSInspector
)
;
Assert
.
equal
(
xpcInspector
.
eventLoopNestLevel
1
)
;
threadClient
.
resume
(
cleanup
)
;
}
)
;
Cu
.
evalInSandbox
(
"
var
a
=
true
;
var
b
=
false
;
debugger
;
var
b
=
true
;
"
gDebuggee
)
;
Assert
.
ok
(
gDebuggee
.
b
)
;
}
function
cleanup
(
)
{
gClient
.
addListener
(
"
closed
"
function
(
event
)
{
do_test_finished
(
)
;
}
)
;
try
{
let
xpcInspector
=
Cc
[
"
mozilla
.
org
/
jsinspector
;
1
"
]
.
getService
(
Ci
.
nsIJSInspector
)
;
Assert
.
equal
(
xpcInspector
.
eventLoopNestLevel
0
)
;
}
catch
(
e
)
{
dump
(
e
)
;
}
gClient
.
close
(
)
;
}
