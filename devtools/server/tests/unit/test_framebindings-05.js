"
use
strict
"
;
var
gDebuggee
;
var
gThreadFront
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
}
)
=
>
{
gThreadFront
=
threadFront
;
gDebuggee
=
debuggee
;
test_pause_frame
(
)
;
}
{
waitForFinish
:
true
}
)
)
;
function
test_pause_frame
(
)
{
gThreadFront
.
once
(
"
paused
"
async
function
(
packet
)
{
const
env
=
packet
.
frame
.
environment
;
Assert
.
notEqual
(
env
undefined
)
;
const
objClient
=
gThreadFront
.
pauseGrip
(
env
.
object
)
;
let
response
=
await
objClient
.
getPrototypeAndProperties
(
)
;
Assert
.
equal
(
response
.
ownProperties
.
PI
.
value
Math
.
PI
)
;
Assert
.
equal
(
response
.
ownProperties
.
cos
.
value
.
type
"
object
"
)
;
Assert
.
equal
(
response
.
ownProperties
.
cos
.
value
.
class
"
Function
"
)
;
Assert
.
ok
(
!
!
response
.
ownProperties
.
cos
.
value
.
actor
)
;
const
parentEnv
=
env
.
parent
.
parent
;
Assert
.
notEqual
(
parentEnv
undefined
)
;
const
parentClient
=
gThreadFront
.
pauseGrip
(
parentEnv
.
object
)
;
response
=
await
parentClient
.
getPrototypeAndProperties
(
)
;
Assert
.
equal
(
response
.
ownProperties
.
a
.
value
Math
.
PI
*
100
)
;
Assert
.
equal
(
response
.
ownProperties
.
r
.
value
10
)
;
Assert
.
equal
(
response
.
ownProperties
.
Object
.
value
.
type
"
object
"
)
;
Assert
.
equal
(
response
.
ownProperties
.
Object
.
value
.
class
"
Function
"
)
;
Assert
.
ok
(
!
!
response
.
ownProperties
.
Object
.
value
.
actor
)
;
await
gThreadFront
.
resume
(
)
;
threadFrontTestFinished
(
)
;
}
)
;
gDebuggee
.
eval
(
"
var
a
r
=
10
;
\
n
"
+
"
with
(
Math
)
{
\
n
"
+
"
a
=
PI
*
r
*
r
;
\
n
"
+
"
debugger
;
\
n
"
+
"
}
"
)
;
}
