"
use
strict
"
;
Services
.
prefs
.
setBoolPref
(
"
security
.
allow_eval_with_system_principal
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
allow_eval_with_system_principal
"
)
;
}
)
;
add_task
(
threadFrontTest
(
async
(
{
threadFront
debuggee
client
}
)
=
>
{
return
new
Promise
(
resolve
=
>
{
threadFront
.
once
(
"
paused
"
function
(
packet
)
{
const
[
f
s
ne
e
]
=
packet
.
frame
.
arguments
;
const
[
fClient
sClient
neClient
eClient
]
=
packet
.
frame
.
arguments
.
map
(
a
=
>
threadFront
.
pauseGrip
(
a
)
)
;
Assert
.
ok
(
!
f
.
extensible
)
;
Assert
.
ok
(
!
fClient
.
isExtensible
)
;
Assert
.
ok
(
!
s
.
extensible
)
;
Assert
.
ok
(
!
sClient
.
isExtensible
)
;
Assert
.
ok
(
!
ne
.
extensible
)
;
Assert
.
ok
(
!
neClient
.
isExtensible
)
;
Assert
.
ok
(
e
.
extensible
)
;
Assert
.
ok
(
eClient
.
isExtensible
)
;
threadFront
.
resume
(
)
.
then
(
resolve
)
;
}
)
;
debuggee
.
eval
(
function
stopMe
(
arg1
)
{
debugger
;
}
.
toString
(
)
)
;
debuggee
.
eval
(
"
(
"
+
function
(
)
{
const
f
=
{
}
;
Object
.
freeze
(
f
)
;
const
s
=
{
}
;
Object
.
seal
(
s
)
;
const
ne
=
{
}
;
Object
.
preventExtensions
(
ne
)
;
stopMe
(
f
s
ne
{
}
)
;
}
+
"
(
)
)
"
)
;
}
)
;
}
)
)
;
