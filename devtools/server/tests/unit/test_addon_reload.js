"
use
strict
"
;
const
{
AddonManager
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
startupAddonsManager
(
)
;
function
promiseAddonEvent
(
event
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
[
event
]
:
function
(
.
.
.
args
)
{
AddonManager
.
removeAddonListener
(
listener
)
;
resolve
(
args
)
;
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
}
)
;
}
function
promiseWebExtensionStartup
(
)
{
const
{
Management
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
{
}
)
;
return
new
Promise
(
resolve
=
>
{
let
listener
=
(
evt
extension
)
=
>
{
Management
.
off
(
"
ready
"
listener
)
;
resolve
(
extension
)
;
}
;
Management
.
on
(
"
ready
"
listener
)
;
}
)
;
}
async
function
findAddonInRootList
(
client
addonId
)
{
const
result
=
await
client
.
listAddons
(
)
;
const
addonActor
=
result
.
addons
.
filter
(
addon
=
>
addon
.
id
=
=
=
addonId
)
[
0
]
;
ok
(
addonActor
Found
add
-
on
actor
for
{
addonId
}
)
;
return
addonActor
;
}
async
function
reloadAddon
(
client
addonActor
)
{
const
onInstalled
=
promiseAddonEvent
(
"
onInstalled
"
)
;
await
client
.
request
(
{
to
:
addonActor
.
actor
type
:
"
reload
"
}
)
;
await
onInstalled
;
}
function
getSupportFile
(
path
)
{
const
allowMissing
=
false
;
return
do_get_file
(
path
allowMissing
)
;
}
add_task
(
async
function
testReloadExitedAddon
(
)
{
const
client
=
await
new
Promise
(
resolve
=
>
{
get_chrome_actors
(
client
=
>
resolve
(
client
)
)
;
}
)
;
const
addonFile
=
getSupportFile
(
"
addons
/
web
-
extension
"
)
;
const
[
installedAddon
]
=
await
Promise
.
all
(
[
AddonManager
.
installTemporaryAddon
(
addonFile
)
promiseWebExtensionStartup
(
)
]
)
;
const
addonFile2
=
getSupportFile
(
"
addons
/
web
-
extension2
"
)
;
const
[
installedAddon2
]
=
await
Promise
.
all
(
[
AddonManager
.
installTemporaryAddon
(
addonFile2
)
promiseWebExtensionStartup
(
)
]
)
;
let
addonActor
=
await
findAddonInRootList
(
client
installedAddon
.
id
)
;
await
Promise
.
all
(
[
reloadAddon
(
client
addonActor
)
promiseWebExtensionStartup
(
)
]
)
;
const
onUninstalled
=
promiseAddonEvent
(
"
onUninstalled
"
)
;
installedAddon2
.
uninstall
(
)
;
await
onUninstalled
;
const
newAddonActor
=
await
findAddonInRootList
(
client
installedAddon
.
id
)
;
equal
(
newAddonActor
.
id
addonActor
.
id
)
;
equal
(
newAddonActor
.
actor
addonActor
.
actor
)
;
const
onAddonListChanged
=
new
Promise
(
(
resolve
)
=
>
{
client
.
addListener
(
"
addonListChanged
"
function
listener
(
)
{
client
.
removeListener
(
"
addonListChanged
"
listener
)
;
resolve
(
)
;
}
)
;
}
)
;
const
addonUpgradeFile
=
getSupportFile
(
"
addons
/
web
-
extension
-
upgrade
"
)
;
const
[
upgradedAddon
]
=
await
Promise
.
all
(
[
AddonManager
.
installTemporaryAddon
(
addonUpgradeFile
)
promiseWebExtensionStartup
(
)
]
)
;
await
onAddonListChanged
;
const
upgradedAddonActor
=
await
findAddonInRootList
(
client
upgradedAddon
.
id
)
;
equal
(
upgradedAddonActor
.
id
addonActor
.
id
)
;
equal
(
upgradedAddonActor
.
actor
addonActor
.
actor
)
;
equal
(
upgradedAddonActor
.
name
"
Test
Addons
Actor
Upgrade
"
)
;
await
close
(
client
)
;
}
)
;
