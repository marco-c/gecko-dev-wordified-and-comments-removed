"
use
strict
"
;
var
gClient
;
var
gThreadActor
;
function
run_test
(
)
{
initTestDebuggerServer
(
)
;
addTestGlobal
(
"
test
-
nesting
"
)
;
gClient
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
gClient
.
connect
(
)
.
then
(
function
(
)
{
attachTestTabAndResume
(
gClient
"
test
-
nesting
"
function
(
response
tabClient
threadClient
)
{
gThreadActor
=
threadClient
.
_transport
.
_serverConnection
.
getActor
(
threadClient
.
_actor
)
;
test_nesting
(
)
;
}
)
;
}
)
;
do_test_pending
(
)
;
}
function
test_nesting
(
)
{
const
thread
=
gThreadActor
;
const
{
resolve
promise
:
p
}
=
defer
(
)
;
let
currentStep
=
0
;
executeSoon
(
function
(
)
{
let
eventLoop
;
executeSoon
(
function
(
)
{
Assert
.
equal
(
+
+
currentStep
2
)
;
Assert
.
equal
(
thread
.
_nestedEventLoops
.
size
2
)
;
executeSoon
(
function
(
)
{
Assert
.
equal
(
+
+
currentStep
3
)
;
Assert
.
equal
(
thread
.
_nestedEventLoops
.
size
2
)
;
Assert
.
ok
(
!
!
eventLoop
)
;
eventLoop
.
resolve
(
)
;
}
)
;
resolve
(
true
)
;
Assert
.
equal
(
thread
.
_nestedEventLoops
.
size
2
)
;
}
)
;
Assert
.
equal
(
+
+
currentStep
1
)
;
Assert
.
equal
(
thread
.
_nestedEventLoops
.
size
1
)
;
eventLoop
=
thread
.
_nestedEventLoops
.
push
(
)
;
eventLoop
.
enter
(
)
;
}
)
;
Assert
.
equal
(
thread
.
unsafeSynchronize
(
p
)
true
)
;
Assert
.
equal
(
+
+
currentStep
4
)
;
Assert
.
equal
(
thread
.
_nestedEventLoops
.
size
0
)
;
finishClient
(
gClient
)
;
}
