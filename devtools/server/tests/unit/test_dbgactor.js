"
use
strict
"
;
const
xpcInspector
=
Cc
[
"
mozilla
.
org
/
jsinspector
;
1
"
]
.
getService
(
Ci
.
nsIJSInspector
)
;
add_task
(
threadClientTest
(
async
(
{
threadClient
debuggee
targetFront
}
)
=
>
{
Assert
.
equal
(
xpcInspector
.
eventLoopNestLevel
0
)
;
await
new
Promise
(
resolve
=
>
{
threadClient
.
on
(
"
paused
"
function
(
packet
)
{
Assert
.
equal
(
false
"
error
"
in
packet
)
;
Assert
.
equal
(
packet
.
from
threadClient
.
actor
)
;
Assert
.
equal
(
packet
.
type
"
paused
"
)
;
Assert
.
ok
(
"
actor
"
in
packet
)
;
Assert
.
ok
(
"
why
"
in
packet
)
;
Assert
.
equal
(
packet
.
why
.
type
"
debuggerStatement
"
)
;
Assert
.
ok
(
debuggee
.
a
)
;
Assert
.
ok
(
!
debuggee
.
b
)
;
Assert
.
equal
(
xpcInspector
.
eventLoopNestLevel
1
)
;
threadClient
.
resume
(
)
.
then
(
resolve
)
;
}
)
;
Cu
.
evalInSandbox
(
"
var
a
=
true
;
var
b
=
false
;
debugger
;
var
b
=
true
;
"
debuggee
)
;
Assert
.
ok
(
debuggee
.
b
)
;
}
)
;
Assert
.
equal
(
xpcInspector
.
eventLoopNestLevel
0
)
;
}
)
)
;
