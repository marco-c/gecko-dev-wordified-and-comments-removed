"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
FrontClassWithSpec
}
=
protocol
;
const
{
DevToolsServerConnection
}
=
require
(
"
devtools
/
server
/
devtools
-
server
-
connection
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
inContentSpec
=
protocol
.
generateActorSpec
(
{
typeName
:
"
inContent
"
methods
:
{
isInContent
:
{
request
:
{
}
response
:
{
isInContent
:
protocol
.
RetVal
(
"
boolean
"
)
}
}
spawnInParent
:
{
request
:
{
url
:
protocol
.
Arg
(
0
)
}
response
:
protocol
.
RetVal
(
"
json
"
)
}
}
}
)
;
exports
.
InContentActor
=
protocol
.
ActorClassWithSpec
(
inContentSpec
{
initialize
(
conn
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
}
isInContent
(
)
{
return
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
;
}
async
spawnInParent
(
url
)
{
const
actorID
=
await
this
.
conn
.
spawnActorInParentProcess
(
this
.
actorID
{
module
:
url
constructor
:
"
InParentActor
"
args
:
[
1
2
3
]
}
)
;
return
{
inParentActor
:
actorID
}
;
}
}
)
;
class
InContentFront
extends
FrontClassWithSpec
(
inContentSpec
)
{
}
exports
.
InContentFront
=
InContentFront
;
const
inParentSpec
=
protocol
.
generateActorSpec
(
{
typeName
:
"
inParent
"
methods
:
{
test
:
{
request
:
{
}
response
:
protocol
.
RetVal
(
"
json
"
)
}
}
}
)
;
exports
.
InParentActor
=
protocol
.
ActorClassWithSpec
(
inParentSpec
{
initialize
(
conn
a1
a2
a3
mm
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
conn
=
conn
;
this
.
args
=
[
a1
a2
a3
]
;
this
.
mm
=
mm
;
}
test
(
)
{
return
{
args
:
this
.
args
isInParent
:
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
conn
:
this
.
conn
instanceof
DevToolsServerConnection
mm
:
Object
.
getPrototypeOf
(
this
.
mm
)
.
constructor
.
name
}
;
}
}
)
;
class
InParentFront
extends
FrontClassWithSpec
(
inParentSpec
)
{
}
exports
.
InParentFront
=
InParentFront
;
