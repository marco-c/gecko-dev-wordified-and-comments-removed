"
use
strict
"
;
add_task
(
async
function
(
)
{
if
(
DebuggerServer
.
initialized
)
{
DebuggerServer
.
destroy
(
)
;
}
await
testDebuggerServerInitialized
(
)
;
}
)
;
async
function
testDebuggerServerInitialized
(
)
{
const
browser
=
await
addTab
(
"
data
:
text
/
html
;
charset
=
utf
-
8
foo
"
)
;
const
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
ok
(
!
DebuggerServer
.
initialized
"
By
default
the
DebuggerServer
isn
'
t
initialized
in
parent
process
"
)
;
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
ok
(
!
DebuggerServer
.
initialized
"
By
default
the
DebuggerServer
isn
'
t
initialized
not
in
content
process
"
)
;
}
)
;
const
target
=
await
TargetFactory
.
forTab
(
tab
)
;
ok
(
DebuggerServer
.
initialized
"
TargetFactory
.
forTab
will
initialize
the
DebuggerServer
in
parent
process
"
)
;
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
ok
(
DebuggerServer
.
initialized
"
TargetFactory
.
forTab
will
initialize
the
DebuggerServer
in
content
process
"
)
;
}
)
;
await
target
.
destroy
(
)
;
ok
(
DebuggerServer
.
initialized
"
Destroying
the
target
doesn
'
t
destroy
the
DebuggerServer
in
the
parent
process
"
)
;
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
ok
(
!
DebuggerServer
.
initialized
"
But
destroying
the
target
ends
up
destroying
the
DebuggerServer
in
the
content
"
+
"
process
"
)
;
}
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
