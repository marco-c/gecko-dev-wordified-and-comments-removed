"
use
strict
"
;
var
Cc
=
Components
.
classes
;
var
Ci
=
Components
.
interfaces
;
var
Cu
=
Components
.
utils
;
const
{
console
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
const
{
require
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
const
{
DebuggerClient
}
=
require
(
"
devtools
/
shared
/
client
/
main
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
{
defer
}
=
require
(
"
promise
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
PATH
=
"
browser
/
devtools
/
server
/
tests
/
browser
/
"
;
const
MAIN_DOMAIN
=
"
http
:
/
/
test1
.
example
.
org
/
"
+
PATH
;
const
ALT_DOMAIN
=
"
http
:
/
/
sectest1
.
example
.
org
/
"
+
PATH
;
const
ALT_DOMAIN_SECURED
=
"
https
:
/
/
sectest1
.
example
.
org
:
443
/
"
+
PATH
;
const
SEPARATOR_GUID
=
"
{
9d414cc5
-
8319
-
0a04
-
0586
-
c0a6ae01670a
}
"
;
waitForExplicitFinish
(
)
;
var
addTab
=
Task
.
async
(
function
*
(
url
)
{
info
(
Adding
a
new
tab
with
URL
:
{
url
}
)
;
let
tab
=
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
url
)
;
yield
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
info
(
Tab
added
and
URL
{
url
}
loaded
)
;
return
tab
.
linkedBrowser
;
}
)
;
function
*
initAnimationsFrontForUrl
(
url
)
{
const
{
AnimationsFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
animation
"
)
;
const
{
InspectorFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
inspector
"
)
;
yield
addTab
(
url
)
;
initDebuggerServer
(
)
;
let
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
let
form
=
yield
connectDebuggerClient
(
client
)
;
let
inspector
=
InspectorFront
(
client
form
)
;
let
walker
=
yield
inspector
.
getWalker
(
)
;
let
animations
=
AnimationsFront
(
client
form
)
;
return
{
inspector
walker
animations
client
}
;
}
function
*
initLayoutFrontForUrl
(
url
)
{
const
{
InspectorFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
inspector
"
)
;
yield
addTab
(
url
)
;
initDebuggerServer
(
)
;
let
client
=
new
DebuggerClient
(
DebuggerServer
.
connectPipe
(
)
)
;
let
form
=
yield
connectDebuggerClient
(
client
)
;
let
inspector
=
InspectorFront
(
client
form
)
;
let
walker
=
yield
inspector
.
getWalker
(
)
;
let
layout
=
yield
walker
.
getLayoutInspector
(
)
;
return
{
inspector
walker
layout
client
}
;
}
function
initDebuggerServer
(
)
{
try
{
DebuggerServer
.
destroy
(
)
;
}
catch
(
e
)
{
info
(
DebuggerServer
destroy
error
:
{
e
}
\
n
{
e
.
stack
}
)
;
}
DebuggerServer
.
init
(
)
;
DebuggerServer
.
addBrowserActors
(
)
;
}
function
connectDebuggerClient
(
client
)
{
return
client
.
connect
(
)
.
then
(
(
)
=
>
client
.
listTabs
(
)
)
.
then
(
tabs
=
>
{
return
tabs
.
tabs
[
tabs
.
selected
]
;
}
)
;
}
function
once
(
target
eventName
useCapture
=
false
)
{
info
(
"
Waiting
for
event
:
'
"
+
eventName
+
"
'
on
"
+
target
+
"
.
"
)
;
return
new
Promise
(
resolve
=
>
{
for
(
let
[
add
remove
]
of
[
[
"
addEventListener
"
"
removeEventListener
"
]
[
"
addListener
"
"
removeListener
"
]
[
"
on
"
"
off
"
]
]
)
{
if
(
(
add
in
target
)
&
&
(
remove
in
target
)
)
{
target
[
add
]
(
eventName
function
onEvent
(
.
.
.
aArgs
)
{
info
(
"
Got
event
:
'
"
+
eventName
+
"
'
on
"
+
target
+
"
.
"
)
;
target
[
remove
]
(
eventName
onEvent
useCapture
)
;
resolve
(
.
.
.
aArgs
)
;
}
useCapture
)
;
break
;
}
}
}
)
;
}
function
forceCollections
(
)
{
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
Cu
.
forceShrinkingGC
(
)
;
}
function
getMockTabActor
(
win
)
{
return
{
window
:
win
isRootActor
:
true
}
;
}
registerCleanupFunction
(
function
tearDown
(
)
{
Services
.
cookies
.
removeAll
(
)
;
while
(
gBrowser
.
tabs
.
length
>
1
)
{
gBrowser
.
removeCurrentTab
(
)
;
}
}
)
;
function
idleWait
(
time
)
{
return
DevToolsUtils
.
waitForTime
(
time
)
;
}
function
busyWait
(
time
)
{
let
start
=
Date
.
now
(
)
;
let
stack
;
while
(
Date
.
now
(
)
-
start
<
time
)
{
stack
=
Components
.
stack
;
}
}
function
waitUntil
(
predicate
interval
=
10
)
{
if
(
predicate
(
)
)
{
return
Promise
.
resolve
(
true
)
;
}
return
new
Promise
(
resolve
=
>
{
setTimeout
(
function
(
)
{
waitUntil
(
predicate
)
.
then
(
(
)
=
>
resolve
(
true
)
)
;
}
interval
)
;
}
)
;
}
function
waitForMarkerType
(
front
types
predicate
unpackFun
=
(
name
data
)
=
>
data
.
markers
eventName
=
"
timeline
-
data
"
)
{
types
=
[
]
.
concat
(
types
)
;
predicate
=
predicate
|
|
function
(
)
{
return
true
;
}
;
let
filteredMarkers
=
[
]
;
let
{
promise
resolve
}
=
defer
(
)
;
info
(
"
Waiting
for
markers
of
type
:
"
+
types
)
;
function
handler
(
name
data
)
{
if
(
typeof
name
=
=
=
"
string
"
&
&
name
!
=
=
"
markers
"
)
{
return
;
}
let
markers
=
unpackFun
(
name
data
)
;
info
(
"
Got
markers
:
"
+
JSON
.
stringify
(
markers
null
2
)
)
;
filteredMarkers
=
filteredMarkers
.
concat
(
markers
.
filter
(
m
=
>
types
.
indexOf
(
m
.
name
)
!
=
=
-
1
)
)
;
if
(
types
.
every
(
t
=
>
filteredMarkers
.
some
(
m
=
>
m
.
name
=
=
=
t
)
)
&
&
predicate
(
filteredMarkers
)
)
{
front
.
off
(
eventName
handler
)
;
resolve
(
filteredMarkers
)
;
}
}
front
.
on
(
eventName
handler
)
;
return
promise
;
}
function
getCookieId
(
name
domain
path
)
{
return
{
name
}
{
SEPARATOR_GUID
}
{
domain
}
{
SEPARATOR_GUID
}
{
path
}
;
}
