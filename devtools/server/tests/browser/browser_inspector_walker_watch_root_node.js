"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
server
/
tests
/
browser
/
inspector
-
helpers
.
js
"
this
)
;
add_task
(
async
function
(
)
{
const
{
walker
}
=
await
initInspectorFront
(
data
:
text
/
html
<
div
>
)
;
const
browser
=
gBrowser
.
selectedBrowser
;
info
(
"
Call
watchRootNode
"
)
;
let
onAvailableCounter1
=
0
;
const
onAvailable1
=
(
)
=
>
onAvailableCounter1
+
+
;
await
walker
.
watchRootNode
(
onAvailable1
)
;
info
(
"
Wait
until
onAvailable1
has
been
called
"
)
;
await
waitUntil
(
(
)
=
>
onAvailableCounter1
=
=
=
1
)
;
is
(
onAvailableCounter1
1
"
onAvailable1
has
been
called
1
time
"
)
;
info
(
"
Reload
the
selected
browser
"
)
;
browser
.
reload
(
)
;
info
(
"
Wait
until
the
watchRootNode
callback
has
been
called
"
)
;
await
waitUntil
(
(
)
=
>
onAvailableCounter1
=
=
=
2
)
;
is
(
onAvailableCounter1
2
"
onAvailable1
has
been
called
2
times
"
)
;
info
(
"
Call
watchNode
with
only
the
onAvailable
callback
"
)
;
let
onAvailableCounter2
=
0
;
const
onAvailable2
=
(
)
=
>
onAvailableCounter2
+
+
;
await
walker
.
watchRootNode
(
onAvailable2
)
;
info
(
"
Wait
until
onAvailable2
has
been
called
"
)
;
await
waitUntil
(
(
)
=
>
onAvailableCounter2
=
=
=
1
)
;
is
(
onAvailableCounter2
1
"
onAvailable2
has
been
called
1
time
"
)
;
info
(
"
Reload
the
selected
browser
"
)
;
browser
.
reload
(
)
;
info
(
"
Wait
until
the
watchRootNode
callback
has
been
called
"
)
;
await
waitUntil
(
(
)
=
>
{
return
onAvailableCounter1
=
=
=
3
&
&
onAvailableCounter2
=
=
=
2
;
}
)
;
is
(
onAvailableCounter1
3
"
onAvailable1
has
been
called
3
times
"
)
;
is
(
onAvailableCounter2
2
"
onAvailable2
has
been
called
2
times
"
)
;
info
(
"
Call
unwatchRootNode
for
the
onAvailable2
callback
"
)
;
walker
.
unwatchRootNode
(
onAvailable2
)
;
info
(
"
Reload
the
selected
browser
"
)
;
browser
.
reload
(
)
;
info
(
"
Wait
until
the
watchRootNode
callback
has
been
called
"
)
;
await
waitUntil
(
(
)
=
>
onAvailableCounter1
=
=
=
4
)
;
is
(
onAvailableCounter1
4
"
onAvailable1
has
been
called
4
times
"
)
;
is
(
onAvailableCounter2
2
"
onAvailable2
was
not
called
again
"
)
;
info
(
"
Call
unwatchRootNode
for
the
onAvailable1
callback
"
)
;
walker
.
unwatchRootNode
(
onAvailable1
)
;
info
(
"
Reload
the
selected
browser
"
)
;
const
reloaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
browser
.
reload
(
)
;
await
reloaded
;
is
(
onAvailableCounter1
4
"
onAvailable1
was
not
called
again
"
)
;
is
(
onAvailableCounter2
2
"
onAvailable2
was
not
called
again
"
)
;
info
(
"
Call
watchRootNode
for
the
onAvailable1
callback
again
"
)
;
await
walker
.
watchRootNode
(
onAvailable1
)
;
info
(
"
Reload
the
selected
browser
"
)
;
browser
.
reload
(
)
;
await
waitUntil
(
(
)
=
>
onAvailableCounter1
=
=
=
5
)
;
is
(
onAvailableCounter1
5
"
onAvailable1
was
called
again
once
"
)
;
is
(
onAvailableCounter2
2
"
onAvailable2
was
not
called
again
"
)
;
walker
.
unwatchRootNode
(
onAvailable1
)
;
}
)
;
add_task
(
async
function
testCallingWatchSuccessivelyWithoutReload
(
)
{
const
{
walker
}
=
await
initInspectorFront
(
data
:
text
/
html
<
div
>
)
;
info
(
"
Call
watchRootNode
"
)
;
let
onAvailableCounter
=
0
;
const
onAvailable
=
(
)
=
>
onAvailableCounter
+
+
;
await
walker
.
watchRootNode
(
onAvailable
)
;
info
(
"
Wait
until
onAvailable
has
been
called
"
)
;
await
waitUntil
(
(
)
=
>
onAvailableCounter
=
=
=
1
)
;
info
(
"
Unwatch
and
watch
again
"
)
;
walker
.
unwatchRootNode
(
onAvailable
)
;
await
walker
.
watchRootNode
(
onAvailable
)
;
info
(
"
Wait
until
the
callback
is
called
again
"
)
;
await
waitUntil
(
(
)
=
>
onAvailableCounter
=
=
=
2
)
;
walker
.
unwatchRootNode
(
onAvailable
)
;
}
)
;
