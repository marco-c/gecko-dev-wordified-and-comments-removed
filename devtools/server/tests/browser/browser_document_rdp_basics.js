"
use
strict
"
;
const
TEST_URL
=
"
data
:
text
/
html
new
-
tab
"
;
add_task
(
async
(
)
=
>
{
await
pushPref
(
"
devtools
.
debugger
.
log
"
true
)
;
await
pushPref
(
"
devtools
.
debugger
.
log
.
verbose
"
true
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerAllActors
(
)
;
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
const
client
=
new
DevToolsClient
(
transport
)
;
await
client
.
connect
(
)
;
client
.
mainRoot
.
destroy
(
)
;
const
{
tabs
}
=
await
client
.
request
(
{
to
:
"
root
"
type
:
"
listTabs
"
}
)
;
const
onTabListUpdated
=
client
.
once
(
"
tabListChanged
"
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
TEST_URL
}
)
;
await
onTabListUpdated
;
const
{
tabs
:
newTabs
}
=
await
client
.
request
(
{
to
:
"
root
"
type
:
"
listTabs
"
}
)
;
is
(
newTabs
.
length
tabs
.
length
+
1
)
;
const
tabDescriptorActor
=
newTabs
.
pop
(
)
;
is
(
tabDescriptorActor
.
url
TEST_URL
)
;
const
watcherActor
=
await
client
.
request
(
{
to
:
tabDescriptorActor
.
actor
type
:
"
getWatcher
"
isServerTargetSwitchingEnabled
:
true
}
)
;
const
onTopTargetAvailable
=
client
.
once
(
"
target
-
available
-
form
"
)
;
await
client
.
request
(
{
to
:
watcherActor
.
actor
type
:
"
watchTargets
"
targetType
:
"
frame
"
}
)
;
const
{
target
:
topTarget
}
=
await
onTopTargetAvailable
;
is
(
topTarget
.
url
TEST_URL
)
;
const
onConsoleMessages
=
client
.
once
(
"
resources
-
available
-
array
"
)
;
await
client
.
request
(
{
to
:
watcherActor
.
actor
type
:
"
watchResources
"
resourceTypes
:
[
"
console
-
message
"
]
}
)
;
const
webConsoleActorID
=
topTarget
.
consoleActor
;
await
client
.
request
(
{
to
:
webConsoleActorID
type
:
"
evaluateJSAsync
"
text
:
"
console
.
log
(
'
42
'
)
"
}
)
;
const
{
type
array
}
=
await
onConsoleMessages
;
is
(
type
"
resources
-
available
-
array
"
)
;
is
(
array
.
length
1
"
The
top
array
has
only
one
array
as
only
one
resourceType
is
notified
"
)
;
is
(
array
[
0
]
.
length
2
)
;
const
[
resourceType
resources
]
=
array
[
0
]
;
is
(
resourceType
"
console
-
message
"
)
;
is
(
resources
.
length
1
"
Received
only
one
console
-
message
resource
"
)
;
is
(
resources
[
0
]
.
message
.
arguments
[
0
]
"
42
"
)
;
await
client
.
close
(
)
;
}
)
;
