"
use
strict
"
;
const
{
connectToFrame
}
=
require
(
"
devtools
/
server
/
connectors
/
frame
-
connector
"
)
;
add_task
(
async
(
)
=
>
{
const
browser
=
document
.
createXULElement
(
"
browser
"
)
;
browser
.
setAttribute
(
"
type
"
"
content
"
)
;
document
.
body
.
appendChild
(
browser
)
;
DevToolsServer
.
init
(
)
;
if
(
!
DevToolsServer
.
createRootActor
)
{
DevToolsServer
.
registerAllActors
(
)
;
}
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
const
conn
=
transport
.
_serverConnection
;
const
client
=
new
DevToolsClient
(
transport
)
;
const
onChild
=
msg
=
>
{
Services
.
ppmm
.
removeMessageListener
(
"
test
:
setupChild
"
onChild
)
;
const
args
=
msg
.
json
;
is
(
args
[
0
]
1
"
Got
first
numeric
argument
"
)
;
is
(
args
[
1
]
"
two
"
"
Got
second
string
argument
"
)
;
is
(
args
[
2
]
.
three
true
"
Got
last
JSON
argument
"
)
;
DevToolsServer
.
setupInChild
(
{
module
:
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
server
/
tests
/
browser
/
setup
-
in
-
child
.
js
"
setupChild
:
"
callParent
"
}
)
;
}
;
Services
.
ppmm
.
addMessageListener
(
"
test
:
setupChild
"
onChild
)
;
const
onDone
=
new
Promise
(
resolve
=
>
{
const
onParent
=
(
_
topic
args
)
=
>
{
Services
.
obs
.
removeObserver
(
onParent
"
test
:
setupParent
"
)
;
args
=
JSON
.
parse
(
args
)
;
is
(
args
[
0
]
true
"
Got
mm
argument
a
message
manager
"
)
;
ok
(
args
[
1
]
.
match
(
/
server
\
d
+
.
conn
\
d
+
.
child
\
d
+
/
)
"
Got
prefix
argument
"
)
;
resolve
(
)
;
}
;
Services
.
obs
.
addObserver
(
onParent
"
test
:
setupParent
"
)
;
}
)
;
await
connectToFrame
(
conn
browser
)
;
DevToolsServer
.
setupInChild
(
{
module
:
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
server
/
tests
/
browser
/
setup
-
in
-
child
.
js
"
setupChild
:
"
setupChild
"
args
:
[
1
"
two
"
{
three
:
true
}
]
}
)
;
await
onDone
;
await
client
.
close
(
)
;
DevToolsServer
.
destroy
(
)
;
browser
.
remove
(
)
;
}
)
;
