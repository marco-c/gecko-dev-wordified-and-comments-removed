"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
<
title
>
Test
getFontPreviewData
<
/
title
>
"
;
add_task
(
async
function
(
)
{
await
addTab
(
TEST_URI
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
const
{
require
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
)
;
const
{
getFontPreviewData
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
style
-
utils
.
js
"
)
;
const
font
=
Services
.
appinfo
.
OS
=
=
=
"
WINNT
"
?
"
Arial
"
:
"
Liberation
Sans
"
;
let
fontPreviewData
=
getFontPreviewData
(
font
content
.
document
)
;
ok
(
fontPreviewData
?
.
dataURL
"
Returned
a
font
preview
with
a
valid
dataURL
"
)
;
is
(
fontPreviewData
.
ctx
.
font
40px
{
Services
.
appinfo
.
OS
=
=
=
"
WINNT
"
?
"
Arial
"
:
"
Liberation
Sans
"
}
serif
"
Expected
font
style
was
used
in
the
canvas
"
)
;
const
image
=
content
.
document
.
createElement
(
"
img
"
)
;
let
imageLoaded
=
new
Promise
(
loaded
=
>
image
.
addEventListener
(
"
load
"
loaded
{
once
:
true
}
)
)
;
image
.
src
=
fontPreviewData
.
dataURL
;
await
imageLoaded
;
const
{
naturalWidth
:
widthImage1
naturalHeight
:
heightImage1
}
=
image
;
Assert
.
greater
(
widthImage1
0
"
Preview
width
is
greater
than
0
"
)
;
Assert
.
greater
(
heightImage1
0
"
Preview
height
is
greater
than
0
"
)
;
fontPreviewData
=
getFontPreviewData
(
font
content
.
document
{
previewText
:
"
Abcdef
"
}
)
;
ok
(
fontPreviewData
?
.
dataURL
"
Returned
a
font
preview
with
a
valid
dataURL
"
)
;
imageLoaded
=
new
Promise
(
loaded
=
>
image
.
addEventListener
(
"
load
"
loaded
{
once
:
true
}
)
)
;
image
.
src
=
fontPreviewData
.
dataURL
;
await
imageLoaded
;
const
{
naturalWidth
:
widthImage2
naturalHeight
:
heightImage2
}
=
image
;
Assert
.
greater
(
widthImage2
widthImage1
"
Preview
width
is
greater
than
with
default
parameters
"
)
;
Assert
.
strictEqual
(
heightImage2
heightImage1
"
Preview
height
is
the
same
as
with
default
parameters
"
)
;
fontPreviewData
=
getFontPreviewData
(
font
content
.
document
{
previewFontSize
:
20
}
)
;
ok
(
fontPreviewData
?
.
dataURL
"
Returned
a
font
preview
with
a
valid
dataURL
"
)
;
imageLoaded
=
new
Promise
(
loaded
=
>
image
.
addEventListener
(
"
load
"
loaded
{
once
:
true
}
)
)
;
image
.
src
=
fontPreviewData
.
dataURL
;
await
imageLoaded
;
const
{
naturalWidth
:
widthImage3
naturalHeight
:
heightImage3
}
=
image
;
Assert
.
less
(
widthImage3
widthImage1
"
Preview
width
is
smaller
than
with
default
parameters
"
)
;
Assert
.
less
(
heightImage3
heightImage1
"
Preview
height
is
smaller
than
with
default
parameters
"
)
;
fontPreviewData
=
getFontPreviewData
(
font
content
.
document
{
previewText
:
"
Abc
\
ndef
"
}
)
;
ok
(
fontPreviewData
?
.
dataURL
"
Returned
a
font
preview
with
a
valid
dataURL
"
)
;
imageLoaded
=
new
Promise
(
loaded
=
>
image
.
addEventListener
(
"
load
"
loaded
{
once
:
true
}
)
)
;
image
.
src
=
fontPreviewData
.
dataURL
;
await
imageLoaded
;
const
{
naturalWidth
:
widthImage4
naturalHeight
:
heightImage4
}
=
image
;
Assert
.
strictEqual
(
widthImage4
widthImage1
"
Preview
width
is
the
same
as
with
default
parameters
"
)
;
Assert
.
greater
(
heightImage4
heightImage1
"
Preview
height
is
greater
than
with
default
parameters
"
)
;
is
(
getFontPreviewData
(
"
monospace
"
content
.
document
)
.
ctx
.
font
40px
monospace
serif
"
Expected
font
style
was
used
in
the
canvas
"
)
;
is
(
getFontPreviewData
(
"
Zilla
Bold
"
content
.
document
)
.
ctx
.
font
40px
"
Zilla
Bold
"
serif
"
Expected
font
style
was
used
in
the
canvas
"
)
;
is
(
getFontPreviewData
(
'
Font
Awesome
5
Brands
'
content
.
document
)
.
ctx
.
font
40px
"
Font
Awesome
5
Brands
"
serif
"
Expected
font
style
was
used
in
the
canvas
"
)
;
}
)
;
}
)
;
