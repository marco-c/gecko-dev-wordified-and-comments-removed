"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
server
/
tests
/
browser
/
inspector
-
helpers
.
js
"
this
)
;
add_task
(
async
function
testRetain
(
)
{
const
{
walker
}
=
await
initInspectorFront
(
MAIN_DOMAIN
+
"
inspector
-
traversal
-
data
.
html
"
)
;
const
bodyFront
=
await
walker
.
querySelector
(
walker
.
rootNode
"
body
"
)
;
await
walker
.
retainNode
(
bodyFront
)
;
const
frame
=
await
walker
.
querySelector
(
walker
.
rootNode
"
#
childFrame
"
)
;
const
children
=
await
walker
.
children
(
frame
{
maxNodes
:
1
}
)
;
const
childDoc
=
children
.
nodes
[
0
]
;
const
childListFront
=
await
walker
.
querySelector
(
childDoc
"
#
longlist
"
)
;
const
originalOwnershipSize
=
await
assertOwnershipTrees
(
walker
)
;
await
walker
.
retainNode
(
childListFront
)
;
await
walker
.
releaseNode
(
bodyFront
.
parentNode
(
)
)
;
const
clientTree
=
clientOwnershipTree
(
walker
)
;
is
(
ownershipTreeSize
(
clientTree
.
root
)
+
ownershipTreeSize
(
clientTree
.
retained
[
0
]
)
+
1
originalOwnershipSize
"
Should
have
only
lost
one
item
overall
.
"
)
;
is
(
walker
.
_retainedOrphans
.
size
1
"
Should
have
retained
one
orphan
"
)
;
ok
(
walker
.
_retainedOrphans
.
has
(
bodyFront
)
"
Should
have
retained
the
expected
node
.
"
)
;
await
walker
.
unretainNode
(
bodyFront
)
;
await
assertOwnershipTrees
(
walker
)
;
is
(
walker
.
_retainedOrphans
.
size
1
"
Should
still
only
have
one
retained
orphan
.
"
)
;
ok
(
!
walker
.
_retainedOrphans
.
has
(
bodyFront
)
"
Should
have
dropped
the
body
node
.
"
)
;
ok
(
walker
.
_retainedOrphans
.
has
(
childListFront
)
"
Should
have
retained
the
child
node
.
"
)
;
const
onMutations
=
waitForMutation
(
walker
isUnretained
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
content
.
document
.
querySelector
(
"
#
childFrame
"
)
.
src
=
"
data
:
text
/
html
<
html
>
new
child
<
/
html
>
"
;
}
)
;
await
onMutations
;
await
assertOwnershipTrees
(
walker
)
;
is
(
walker
.
_retainedOrphans
.
size
0
"
Should
have
no
more
retained
orphans
.
"
)
;
}
)
;
add_task
(
async
function
testWinRace
(
)
{
const
{
walker
}
=
await
initInspectorFront
(
MAIN_DOMAIN
+
"
inspector
-
traversal
-
data
.
html
"
)
;
const
front
=
await
walker
.
querySelector
(
walker
.
rootNode
"
#
a
"
)
;
const
onMutation
=
waitForMutation
(
walker
isChildList
)
;
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
contentNode
=
content
.
document
.
querySelector
(
"
#
a
"
)
;
contentNode
.
remove
(
)
;
}
)
;
await
walker
.
retainNode
(
front
)
;
await
onMutation
;
await
assertOwnershipTrees
(
walker
)
;
is
(
walker
.
_retainedOrphans
.
size
1
"
Should
have
a
retained
orphan
.
"
)
;
ok
(
walker
.
_retainedOrphans
.
has
(
front
)
"
Should
have
retained
our
expected
node
.
"
)
;
await
walker
.
unretainNode
(
front
)
;
await
assertOwnershipTrees
(
walker
)
;
is
(
walker
.
_retainedOrphans
.
size
0
"
Should
have
no
more
retained
orphans
.
"
)
;
}
)
;
add_task
(
async
function
testLoseRace
(
)
{
const
{
walker
}
=
await
initInspectorFront
(
MAIN_DOMAIN
+
"
inspector
-
traversal
-
data
.
html
"
)
;
const
front
=
await
walker
.
querySelector
(
walker
.
rootNode
"
#
z
"
)
;
const
onMutation
=
walker
.
once
(
"
new
-
mutations
"
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
contentNode
=
content
.
document
.
querySelector
(
"
#
z
"
)
;
contentNode
.
remove
(
)
;
}
)
;
await
onMutation
;
is
(
walker
.
_requests
.
length
1
"
Should
have
an
outstanding
request
.
"
)
;
try
{
await
walker
.
retainNode
(
front
)
;
ok
(
false
"
Request
should
not
have
succeeded
!
"
)
;
}
catch
(
err
)
{
is
(
walker
.
_retainedOrphans
.
size
0
"
Should
have
no
more
retained
orphans
.
"
)
;
}
}
)
;
