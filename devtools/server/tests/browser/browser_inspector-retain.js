"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
server
/
tests
/
browser
/
inspector
-
helpers
.
js
"
this
)
;
add_task
(
async
function
testWinRace
(
)
{
const
{
walker
}
=
await
initInspectorFront
(
MAIN_DOMAIN
+
"
inspector
-
traversal
-
data
.
html
"
)
;
const
front
=
await
walker
.
querySelector
(
walker
.
rootNode
"
#
a
"
)
;
const
onMutation
=
waitForMutation
(
walker
isChildList
)
;
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
const
contentNode
=
content
.
document
.
querySelector
(
"
#
a
"
)
;
contentNode
.
remove
(
)
;
}
)
;
await
walker
.
retainNode
(
front
)
;
await
onMutation
;
await
assertOwnershipTrees
(
walker
)
;
is
(
walker
.
_retainedOrphans
.
size
1
"
Should
have
a
retained
orphan
.
"
)
;
ok
(
walker
.
_retainedOrphans
.
has
(
front
)
"
Should
have
retained
our
expected
node
.
"
)
;
await
walker
.
unretainNode
(
front
)
;
await
assertOwnershipTrees
(
walker
)
;
is
(
walker
.
_retainedOrphans
.
size
0
"
Should
have
no
more
retained
orphans
.
"
)
;
}
)
;
add_task
(
async
function
testLoseRace
(
)
{
const
{
walker
}
=
await
initInspectorFront
(
MAIN_DOMAIN
+
"
inspector
-
traversal
-
data
.
html
"
)
;
const
front
=
await
walker
.
querySelector
(
walker
.
rootNode
"
#
z
"
)
;
const
onMutation
=
walker
.
once
(
"
new
-
mutations
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
const
contentNode
=
content
.
document
.
querySelector
(
"
#
z
"
)
;
contentNode
.
remove
(
)
;
}
)
;
await
onMutation
;
is
(
walker
.
_requests
.
length
1
"
Should
have
an
outstanding
request
.
"
)
;
try
{
await
walker
.
retainNode
(
front
)
;
ok
(
false
"
Request
should
not
have
succeeded
!
"
)
;
}
catch
(
err
)
{
is
(
walker
.
_retainedOrphans
.
size
0
"
Should
have
no
more
retained
orphans
.
"
)
;
}
}
)
;
