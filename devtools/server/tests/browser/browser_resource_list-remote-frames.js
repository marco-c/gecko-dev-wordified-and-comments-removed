"
use
strict
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
fission
.
autostart
"
true
)
;
const
tabTarget
=
await
addTabTarget
(
MAIN_DOMAIN
+
"
doc_iframe
.
html
"
)
;
await
testLocalListFrames
(
tabTarget
)
;
await
testBrowserListFrames
(
tabTarget
)
;
}
)
;
async
function
testLocalListFrames
(
tabTarget
)
{
const
{
frames
}
=
await
tabTarget
.
listRemoteFrames
(
)
;
is
(
frames
.
length
2
"
Got
two
frames
"
)
;
for
(
const
frame
of
frames
)
{
const
frameTarget
=
await
frame
.
getTarget
(
)
;
is
(
frameTarget
null
"
We
cannot
get
remote
iframe
fronts
yet
"
)
;
}
const
browser
=
gBrowser
.
selectedBrowser
;
const
oopID
=
await
ContentTask
.
spawn
(
browser
{
}
async
(
)
=
>
{
const
oop
=
content
.
document
.
querySelector
(
"
iframe
"
)
;
return
oop
.
frameLoader
.
browsingContext
.
id
;
}
)
;
ok
(
frames
.
find
(
f
=
>
f
.
id
=
=
=
oopID
)
"
tabTarget
.
listRemoteFrames
returns
the
oop
frame
descriptor
"
)
;
}
async
function
testBrowserListFrames
(
tabTarget
)
{
const
target
=
await
tabTarget
.
client
.
mainRoot
.
getMainProcess
(
)
;
await
getFrames
(
target
tabTarget
)
;
}
async
function
getFrames
(
target
)
{
const
{
frames
}
=
await
target
.
listRemoteFrames
(
)
;
const
descriptor
=
frames
.
find
(
f
=
>
f
.
url
&
&
f
.
url
.
includes
(
"
doc_iframe
"
)
)
;
ok
(
descriptor
"
we
have
a
descriptor
with
the
url
'
doc_iframe
'
"
)
;
const
front
=
await
descriptor
.
getTarget
(
)
;
ok
(
front
.
hasActor
(
"
console
"
)
"
Got
the
console
actor
"
)
;
ok
(
front
.
hasActor
(
"
thread
"
)
"
Got
the
thread
actor
"
)
;
const
consoleFront
=
await
front
.
getFront
(
"
console
"
)
;
const
{
result
}
=
await
consoleFront
.
evaluateJS
(
"
var
a
=
42
;
a
"
)
;
is
(
result
42
"
console
.
eval
worked
"
)
;
const
childFrames
=
frames
.
filter
(
d
=
>
d
.
parentID
=
=
=
descriptor
.
id
)
;
for
(
const
frame
of
childFrames
)
{
const
frameTarget
=
await
frame
.
getTarget
(
)
;
is
(
frameTarget
null
"
We
cannot
get
remote
iframe
fronts
yet
"
)
;
}
await
getFirstFrameAgain
(
front
descriptor
target
)
;
}
async
function
getFirstFrameAgain
(
firstTargetFront
descriptor
target
)
{
const
targetFront
=
await
descriptor
.
getTarget
(
)
;
is
(
targetFront
firstTargetFront
"
Second
call
to
getTarget
with
the
same
id
returns
the
same
form
"
)
;
const
{
frames
}
=
await
target
.
listRemoteFrames
(
)
;
const
secondDescriptor
=
frames
.
find
(
f
=
>
{
return
f
.
id
=
=
=
descriptor
.
id
;
}
)
;
const
secondTargetFront
=
await
secondDescriptor
.
getTarget
(
)
;
is
(
secondTargetFront
firstTargetFront
"
Second
call
to
listFrames
with
the
same
id
returns
the
same
form
"
)
;
}
