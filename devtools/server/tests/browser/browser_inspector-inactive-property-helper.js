"
use
strict
"
;
add_task
(
async
function
(
)
{
await
pushPref
(
"
devtools
.
inspector
.
inactive
.
css
.
enabled
"
true
)
;
const
{
inactivePropertyHelper
}
=
require
(
"
devtools
/
server
/
actors
/
utils
/
inactive
-
property
-
helper
"
)
;
let
{
isPropertyUsed
}
=
inactivePropertyHelper
;
isPropertyUsed
=
isPropertyUsed
.
bind
(
inactivePropertyHelper
)
;
const
tests
=
[
{
info
:
"
vertical
-
align
is
inactive
on
a
block
element
"
property
:
"
vertical
-
align
"
tagName
:
"
div
"
rules
:
[
"
div
{
vertical
-
align
:
top
;
}
"
]
isActive
:
false
}
{
info
:
"
vertical
-
align
is
inactive
on
a
span
with
display
block
"
property
:
"
vertical
-
align
"
tagName
:
"
span
"
rules
:
[
"
span
{
vertical
-
align
:
top
;
display
:
block
;
}
"
]
isActive
:
false
}
{
info
:
"
vertical
-
align
is
active
on
a
div
with
display
inline
-
block
"
property
:
"
vertical
-
align
"
tagName
:
"
div
"
rules
:
[
"
div
{
vertical
-
align
:
top
;
display
:
inline
-
block
;
}
"
]
isActive
:
true
}
{
info
:
"
vertical
-
align
is
active
on
a
table
-
cell
"
property
:
"
vertical
-
align
"
tagName
:
"
div
"
rules
:
[
"
div
{
vertical
-
align
:
top
;
display
:
table
-
cell
;
}
"
]
isActive
:
true
}
{
info
:
"
vertical
-
align
is
active
on
a
block
element
:
:
first
-
letter
"
property
:
"
vertical
-
align
"
tagName
:
"
div
"
rules
:
[
"
div
:
:
first
-
letter
{
vertical
-
align
:
top
;
}
"
]
isActive
:
true
}
{
info
:
"
vertical
-
align
is
active
on
a
block
element
:
:
first
-
line
"
property
:
"
vertical
-
align
"
tagName
:
"
div
"
rules
:
[
"
div
:
:
first
-
line
{
vertical
-
align
:
top
;
}
"
]
isActive
:
true
}
{
info
:
"
vertical
-
align
is
active
on
an
inline
element
"
property
:
"
vertical
-
align
"
tagName
:
"
span
"
rules
:
[
"
span
{
vertical
-
align
:
top
;
}
"
]
isActive
:
true
}
]
;
for
(
const
{
info
:
summary
property
tagName
rules
ruleIndex
isActive
}
of
tests
)
{
info
(
summary
)
;
const
main
=
document
.
createElement
(
"
main
"
)
;
document
.
firstElementChild
.
appendChild
(
main
)
;
const
el
=
document
.
createElement
(
tagName
)
;
const
style
=
document
.
createElement
(
"
style
"
)
;
main
.
append
(
style
el
)
;
for
(
const
dataRule
of
rules
)
{
style
.
sheet
.
insertRule
(
dataRule
)
;
}
const
rule
=
style
.
sheet
.
cssRules
[
ruleIndex
|
|
0
]
;
const
{
used
}
=
isPropertyUsed
(
el
getComputedStyle
(
el
)
rule
property
)
;
ok
(
used
=
=
=
isActive
"
{
property
}
"
is
{
isActive
?
"
active
"
:
"
inactive
"
}
)
;
main
.
remove
(
)
;
}
}
)
;
