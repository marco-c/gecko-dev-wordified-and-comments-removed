"
use
strict
"
;
const
{
ProfilerTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
ProfilerTestUtils
.
sys
.
mjs
"
)
;
add_setup
(
ProfilerTestUtils
.
assertProfilerInactive
)
;
requestLongerTimeout
(
2
)
;
async
function
decompressGzip
(
buffer
)
{
if
(
buffer
.
resizable
)
{
buffer
=
buffer
.
transferToFixedLength
(
)
;
}
const
decompressionStream
=
new
DecompressionStream
(
"
gzip
"
)
;
const
decoderStream
=
new
TextDecoderStream
(
)
;
const
decodedStream
=
decompressionStream
.
readable
.
pipeThrough
(
decoderStream
)
;
const
writer
=
decompressionStream
.
writable
.
getWriter
(
)
;
writer
.
write
(
buffer
)
;
const
writePromise
=
writer
.
close
(
)
;
let
result
=
"
"
;
for
await
(
const
chunk
of
decodedStream
)
{
result
+
=
chunk
;
}
await
writePromise
;
return
JSON
.
parse
(
result
)
;
}
add_task
(
async
function
(
)
{
const
{
front
client
}
=
await
initPerfFront
(
)
;
is
(
await
front
.
isSupportedPlatform
(
)
true
"
This
test
only
runs
on
supported
platforms
.
"
)
;
is
(
await
front
.
isActive
(
)
false
"
The
profiler
is
not
active
yet
.
"
)
;
const
profilerStarted
=
once
(
front
"
profiler
-
started
"
)
;
await
front
.
startProfiler
(
)
;
await
profilerStarted
;
is
(
await
front
.
isActive
(
)
true
"
The
profiler
was
started
.
"
)
;
const
profilerStopped1
=
once
(
front
"
profiler
-
stopped
"
)
;
const
{
profile
:
gzippedProfile
additionalInformation
}
=
await
front
.
getProfileAndStopProfiler
(
)
;
await
profilerStopped1
;
is
(
await
front
.
isActive
(
)
false
"
The
profiler
was
stopped
.
"
)
;
const
profile
=
await
decompressGzip
(
gzippedProfile
)
;
ok
(
"
threads
"
in
profile
"
The
actor
was
used
to
record
a
profile
.
"
)
;
ok
(
additionalInformation
.
sharedLibraries
"
We
retrieved
some
shared
libraries
as
well
.
"
)
;
await
front
.
startProfiler
(
)
;
is
(
await
front
.
isActive
(
)
true
"
The
profiler
was
re
-
started
.
"
)
;
const
profilerStopped2
=
once
(
front
"
profiler
-
stopped
"
)
;
await
front
.
stopProfilerAndDiscardProfile
(
)
;
await
profilerStopped2
;
is
(
await
front
.
isActive
(
)
false
"
The
profiler
was
stopped
and
the
profile
discarded
.
"
)
;
await
front
.
destroy
(
)
;
await
client
.
close
(
)
;
}
)
;
add_task
(
async
function
test_error_case
(
)
{
const
{
front
client
}
=
await
initPerfFront
(
)
;
try
{
await
front
.
getProfileAndStopProfiler
(
)
;
ok
(
false
"
Getting
the
profile
should
fail
"
)
;
}
catch
(
e
)
{
Assert
.
stringContains
(
e
.
message
"
The
profiler
is
not
active
.
"
"
The
error
contains
the
expected
error
message
.
"
)
;
}
await
front
.
destroy
(
)
;
await
client
.
close
(
)
;
}
)
;
