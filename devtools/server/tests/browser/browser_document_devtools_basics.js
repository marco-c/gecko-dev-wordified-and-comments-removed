"
use
strict
"
;
const
TEST_URL
=
"
data
:
text
/
html
new
-
tab
"
;
add_task
(
async
(
)
=
>
{
await
pushPref
(
"
devtools
.
debugger
.
log
"
true
)
;
await
pushPref
(
"
devtools
.
debugger
.
log
.
verbose
"
true
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerAllActors
(
)
;
const
transport
=
DevToolsServer
.
connectPipe
(
)
;
const
client
=
new
DevToolsClient
(
transport
)
;
await
client
.
connect
(
)
;
const
tabs
=
await
client
.
mainRoot
.
listTabs
(
)
;
const
onTabListUpdated
=
client
.
mainRoot
.
once
(
"
tabListChanged
"
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
TEST_URL
}
)
;
await
onTabListUpdated
;
const
newTabs
=
await
client
.
mainRoot
.
listTabs
(
)
;
is
(
newTabs
.
length
tabs
.
length
+
1
)
;
const
tabDescriptorActor
=
newTabs
.
pop
(
)
;
is
(
tabDescriptorActor
.
url
TEST_URL
)
;
const
watcherActor
=
await
tabDescriptorActor
.
getWatcher
(
)
;
const
onTopTargetAvailable
=
watcherActor
.
once
(
"
target
-
available
"
)
;
await
watcherActor
.
watchTargets
(
"
frame
"
)
;
const
topTarget
=
await
onTopTargetAvailable
;
is
(
topTarget
.
url
TEST_URL
)
;
const
onConsoleMessages
=
topTarget
.
once
(
"
resource
-
available
-
form
"
)
;
await
watcherActor
.
watchResources
(
[
"
console
-
message
"
]
)
;
const
webConsoleActor
=
await
topTarget
.
getFront
(
"
console
"
)
;
await
webConsoleActor
.
evaluateJSAsync
(
{
text
:
"
console
.
log
(
'
42
'
)
"
}
)
;
const
resources
=
await
onConsoleMessages
;
is
(
resources
[
0
]
.
message
.
arguments
[
0
]
"
42
"
)
;
await
client
.
close
(
)
;
}
)
;
