"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
server
/
tests
/
browser
/
inspector
-
helpers
.
js
"
this
)
;
add_task
(
async
function
testRemoveSubtree
(
)
{
const
{
target
walker
}
=
await
initInspectorFront
(
MAIN_DOMAIN
+
"
inspector
-
traversal
-
data
.
html
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
function
ignoreNode
(
node
)
{
return
node
.
nodeType
=
=
=
Node
.
TEXT_NODE
&
&
!
/
[
^
\
s
]
/
.
test
(
node
.
nodeValue
)
;
}
let
nextSibling
=
content
.
document
.
querySelector
(
"
#
longlist
"
)
.
nextSibling
;
while
(
nextSibling
&
&
ignoreNode
(
nextSibling
)
)
{
nextSibling
=
nextSibling
.
nextSibling
;
}
let
previousSibling
=
content
.
document
.
querySelector
(
"
#
longlist
"
)
.
previousSibling
;
while
(
previousSibling
&
&
ignoreNode
(
previousSibling
)
)
{
previousSibling
=
previousSibling
.
previousSibling
;
}
content
.
nextSibling
=
nextSibling
;
content
.
previousSibling
=
previousSibling
;
}
)
;
let
originalOwnershipSize
=
0
;
const
longlist
=
await
walker
.
querySelector
(
walker
.
rootNode
"
#
longlist
"
)
;
const
longlistID
=
longlist
.
actorID
;
await
walker
.
children
(
longlist
)
;
originalOwnershipSize
=
await
assertOwnershipTrees
(
walker
)
;
is
(
originalOwnershipSize
56
"
Correct
number
of
items
in
ownership
tree
"
)
;
const
onMutation
=
waitForMutation
(
walker
isChildList
)
;
const
siblings
=
await
walker
.
removeNode
(
longlist
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
[
siblings
.
previousSibling
.
actorID
siblings
.
nextSibling
.
actorID
]
]
function
(
[
previousActorID
nextActorID
]
)
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
debugger
-
server
"
)
;
previousActorID
=
String
(
previousActorID
)
;
nextActorID
=
String
(
nextActorID
)
;
const
previous
=
DebuggerServer
.
searchAllConnectionsForActor
(
previousActorID
)
;
const
next
=
DebuggerServer
.
searchAllConnectionsForActor
(
nextActorID
)
;
is
(
previous
.
rawNode
content
.
previousSibling
"
Should
have
returned
the
previous
sibling
.
"
)
;
is
(
next
.
rawNode
content
.
nextSibling
"
Should
have
returned
the
next
sibling
.
"
)
;
}
)
;
await
onMutation
;
const
newOwnershipSize
=
await
assertOwnershipTrees
(
walker
)
;
is
(
newOwnershipSize
originalOwnershipSize
-
51
"
Ownership
tree
should
be
lower
"
)
;
return
checkMissing
(
target
longlistID
)
;
}
)
;
