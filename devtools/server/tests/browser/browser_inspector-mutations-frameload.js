"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
devtools
/
server
/
tests
/
browser
/
inspector
-
helpers
.
js
"
this
)
;
async
function
loadChildSelector
(
walker
selector
)
{
const
frame
=
await
walker
.
querySelector
(
walker
.
rootNode
"
#
childFrame
"
)
;
ok
(
frame
.
numChildren
>
0
"
Child
frame
should
consider
its
loaded
document
as
a
child
.
"
)
;
const
children
=
await
walker
.
children
(
frame
)
;
const
nodeList
=
await
walker
.
querySelectorAll
(
children
.
nodes
[
0
]
selector
)
;
return
nodeList
.
items
(
)
;
}
function
getUnloadedDoc
(
mutations
)
{
for
(
const
change
of
mutations
)
{
if
(
isUnload
(
change
)
)
{
return
change
.
target
;
}
}
return
null
;
}
add_task
(
async
function
loadNewChild
(
)
{
const
{
target
walker
}
=
await
initInspectorFront
(
MAIN_DOMAIN
+
"
inspector
-
traversal
-
data
.
html
"
)
;
await
loadChildSelector
(
walker
"
#
longlist
div
"
)
;
const
onMutations
=
waitForMutation
(
walker
isChildList
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
childFrame
=
content
.
document
.
querySelector
(
"
#
childFrame
"
)
;
childFrame
.
src
=
"
data
:
text
/
html
<
html
>
new
child
<
/
html
>
"
;
}
)
;
let
mutations
=
await
onMutations
;
const
unloaded
=
getUnloadedDoc
(
mutations
)
;
mutations
=
assertSrcChange
(
mutations
)
;
mutations
=
assertUnload
(
mutations
)
;
mutations
=
assertFrameLoad
(
mutations
)
;
mutations
=
assertChildList
(
mutations
)
;
is
(
mutations
.
length
0
"
Got
the
expected
mutations
.
"
)
;
assertOwnershipTrees
(
walker
)
;
return
checkMissing
(
target
unloaded
)
;
}
)
;
add_task
(
async
function
loadNewChild
(
)
{
const
{
walker
}
=
await
initInspectorFront
(
MAIN_DOMAIN
+
"
inspector
-
traversal
-
data
.
html
"
)
;
await
loadChildSelector
(
walker
"
#
longlist
div
"
)
;
let
onMutations
=
waitForMutation
(
walker
isChildList
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
childFrame
=
content
.
document
.
querySelector
(
"
#
childFrame
"
)
;
childFrame
.
src
=
"
data
:
text
/
html
<
html
>
new
child
<
/
html
>
"
;
}
)
;
await
onMutations
;
onMutations
=
waitForMutation
(
walker
isChildList
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
childFrame
=
content
.
document
.
querySelector
(
"
#
childFrame
"
)
;
childFrame
.
src
=
"
data
:
text
/
html
<
html
>
second
new
child
<
/
html
>
"
;
}
)
;
let
mutations
=
await
onMutations
;
mutations
=
assertSrcChange
(
mutations
)
;
mutations
=
assertFrameLoad
(
mutations
)
;
mutations
=
assertChildList
(
mutations
)
;
ok
(
!
getUnloadedDoc
(
mutations
)
"
Should
not
have
gotten
an
unload
.
"
)
;
is
(
mutations
.
length
0
"
Got
the
expected
mutations
.
"
)
;
assertOwnershipTrees
(
walker
)
;
}
)
;
add_task
(
async
function
loadNewChildTwiceAndCareAboutIt
(
)
{
const
{
target
walker
}
=
await
initInspectorFront
(
MAIN_DOMAIN
+
"
inspector
-
traversal
-
data
.
html
"
)
;
await
loadChildSelector
(
walker
"
#
longlist
div
"
)
;
let
onMutations
=
waitForMutation
(
walker
isChildList
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
childFrame
=
content
.
document
.
querySelector
(
"
#
childFrame
"
)
;
childFrame
.
src
=
"
data
:
text
/
html
<
html
>
new
child
<
/
html
>
"
;
}
)
;
await
onMutations
;
await
loadChildSelector
(
walker
"
#
longlist
div
"
)
;
onMutations
=
waitForMutation
(
walker
isChildList
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
childFrame
=
content
.
document
.
querySelector
(
"
#
childFrame
"
)
;
childFrame
.
src
=
"
data
:
text
/
html
<
html
>
second
new
child
<
/
html
>
"
;
}
)
;
let
mutations
=
await
onMutations
;
const
unloaded
=
getUnloadedDoc
(
mutations
)
;
mutations
=
assertSrcChange
(
mutations
)
;
mutations
=
assertUnload
(
mutations
)
;
mutations
=
assertFrameLoad
(
mutations
)
;
mutations
=
assertChildList
(
mutations
)
;
is
(
mutations
.
length
0
"
Got
the
expected
mutations
.
"
)
;
assertOwnershipTrees
(
walker
)
;
return
checkMissing
(
target
unloaded
)
;
}
)
;
add_task
(
async
function
testBack
(
)
{
const
{
target
walker
}
=
await
initInspectorFront
(
MAIN_DOMAIN
+
"
inspector
-
traversal
-
data
.
html
"
)
;
await
loadChildSelector
(
walker
"
#
longlist
div
"
)
;
let
onMutations
=
waitForMutation
(
walker
isChildList
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
childFrame
=
content
.
document
.
querySelector
(
"
#
childFrame
"
)
;
childFrame
.
src
=
"
data
:
text
/
html
<
html
>
new
child
<
/
html
>
"
;
}
)
;
await
onMutations
;
await
loadChildSelector
(
walker
"
#
longlist
div
"
)
;
onMutations
=
waitForMutation
(
walker
isChildList
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
childFrame
=
content
.
document
.
querySelector
(
"
#
childFrame
"
)
;
childFrame
.
contentWindow
.
history
.
back
(
)
;
}
)
;
let
mutations
=
await
onMutations
;
const
unloaded
=
getUnloadedDoc
(
mutations
)
;
mutations
=
assertSrcChange
(
mutations
)
;
mutations
=
assertUnload
(
mutations
)
;
mutations
=
assertFrameLoad
(
mutations
)
;
mutations
=
assertChildList
(
mutations
)
;
is
(
mutations
.
length
0
"
Got
the
expected
mutations
.
"
)
;
assertOwnershipTrees
(
walker
)
;
return
checkMissing
(
target
unloaded
)
;
}
)
;
