"
use
strict
"
;
const
{
reportException
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
{
expectState
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
common
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
DeferredTask
:
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
sys
.
mjs
"
}
{
global
:
"
contextual
"
}
)
;
loader
.
lazyRequireGetter
(
this
"
StackFrameCache
"
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
stack
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ParentProcessTargetActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
parent
-
process
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ContentProcessTargetActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
content
-
process
.
js
"
true
)
;
function
Memory
(
parent
frameCache
=
new
StackFrameCache
(
)
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
parent
=
parent
;
this
.
_mgr
=
Cc
[
"
mozilla
.
org
/
memory
-
reporter
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIMemoryReporterManager
)
;
this
.
state
=
"
detached
"
;
this
.
_dbg
=
null
;
this
.
_frameCache
=
frameCache
;
this
.
_onGarbageCollection
=
this
.
_onGarbageCollection
.
bind
(
this
)
;
this
.
_emitAllocations
=
this
.
_emitAllocations
.
bind
(
this
)
;
this
.
_onWindowReady
=
this
.
_onWindowReady
.
bind
(
this
)
;
EventEmitter
.
on
(
this
.
parent
"
window
-
ready
"
this
.
_onWindowReady
)
;
}
Memory
.
prototype
=
{
destroy
(
)
{
EventEmitter
.
off
(
this
.
parent
"
window
-
ready
"
this
.
_onWindowReady
)
;
this
.
_mgr
=
null
;
if
(
this
.
state
=
=
=
"
attached
"
)
{
this
.
detach
(
)
;
}
}
get
dbg
(
)
{
if
(
!
this
.
_dbg
)
{
this
.
_dbg
=
this
.
parent
.
makeDebugger
(
)
;
}
return
this
.
_dbg
;
}
attach
(
)
{
if
(
this
.
state
=
=
"
attached
"
)
{
return
this
.
state
;
}
this
.
dbg
.
addDebuggees
(
)
;
this
.
dbg
.
memory
.
onGarbageCollection
=
this
.
_onGarbageCollection
.
bind
(
this
)
;
this
.
state
=
"
attached
"
;
return
this
.
state
;
}
detach
:
expectState
(
"
attached
"
function
(
)
{
this
.
_clearDebuggees
(
)
;
this
.
dbg
.
disable
(
)
;
this
.
_dbg
=
null
;
this
.
state
=
"
detached
"
;
return
this
.
state
;
}
"
detaching
from
the
debugger
"
)
getState
(
)
{
return
this
.
state
;
}
_clearDebuggees
(
)
{
if
(
this
.
_dbg
)
{
if
(
this
.
isRecordingAllocations
(
)
)
{
this
.
dbg
.
memory
.
drainAllocationsLog
(
)
;
}
this
.
_clearFrames
(
)
;
this
.
dbg
.
removeAllDebuggees
(
)
;
}
}
_clearFrames
(
)
{
if
(
this
.
isRecordingAllocations
(
)
)
{
this
.
_frameCache
.
clearFrames
(
)
;
}
}
_onWindowReady
(
{
isTopLevel
}
)
{
if
(
this
.
state
=
=
"
attached
"
)
{
this
.
_clearDebuggees
(
)
;
if
(
isTopLevel
&
&
this
.
isRecordingAllocations
(
)
)
{
this
.
_frameCache
.
initFrames
(
)
;
}
this
.
dbg
.
addDebuggees
(
)
;
}
}
isRecordingAllocations
(
)
{
return
this
.
dbg
.
memory
.
trackingAllocationSites
;
}
saveHeapSnapshot
:
expectState
(
"
attached
"
function
(
boundaries
=
null
)
{
if
(
!
boundaries
)
{
if
(
this
.
parent
instanceof
ParentProcessTargetActor
|
|
this
.
parent
instanceof
ContentProcessTargetActor
)
{
boundaries
=
{
runtime
:
true
}
;
}
else
{
boundaries
=
{
debugger
:
this
.
dbg
}
;
}
}
return
ChromeUtils
.
saveHeapSnapshotGetId
(
boundaries
)
;
}
"
saveHeapSnapshot
"
)
takeCensus
:
expectState
(
"
attached
"
function
(
)
{
return
this
.
dbg
.
memory
.
takeCensus
(
)
;
}
"
taking
census
"
)
startRecordingAllocations
:
expectState
(
"
attached
"
function
(
options
=
{
}
)
{
if
(
this
.
isRecordingAllocations
(
)
)
{
return
this
.
_getCurrentTime
(
)
;
}
this
.
_frameCache
.
initFrames
(
)
;
this
.
dbg
.
memory
.
allocationSamplingProbability
=
options
.
probability
!
=
null
?
options
.
probability
:
1
.
0
;
this
.
drainAllocationsTimeoutTimer
=
options
.
drainAllocationsTimeout
;
if
(
this
.
drainAllocationsTimeoutTimer
!
=
null
)
{
if
(
this
.
_poller
)
{
this
.
_poller
.
disarm
(
)
;
}
this
.
_poller
=
new
lazy
.
DeferredTask
(
this
.
_emitAllocations
this
.
drainAllocationsTimeoutTimer
0
)
;
this
.
_poller
.
arm
(
)
;
}
if
(
options
.
maxLogLength
!
=
null
)
{
this
.
dbg
.
memory
.
maxAllocationsLogLength
=
options
.
maxLogLength
;
}
this
.
dbg
.
memory
.
trackingAllocationSites
=
true
;
return
this
.
_getCurrentTime
(
)
;
}
"
starting
recording
allocations
"
)
stopRecordingAllocations
:
expectState
(
"
attached
"
function
(
)
{
if
(
!
this
.
isRecordingAllocations
(
)
)
{
return
this
.
_getCurrentTime
(
)
;
}
this
.
dbg
.
memory
.
trackingAllocationSites
=
false
;
this
.
_clearFrames
(
)
;
if
(
this
.
_poller
)
{
this
.
_poller
.
disarm
(
)
;
this
.
_poller
=
null
;
}
return
this
.
_getCurrentTime
(
)
;
}
"
stopping
recording
allocations
"
)
getAllocationsSettings
:
expectState
(
"
attached
"
function
(
)
{
return
{
maxLogLength
:
this
.
dbg
.
memory
.
maxAllocationsLogLength
probability
:
this
.
dbg
.
memory
.
allocationSamplingProbability
}
;
}
"
getting
allocations
settings
"
)
getAllocations
:
expectState
(
"
attached
"
function
(
)
{
if
(
this
.
dbg
.
memory
.
allocationsLogOverflowed
)
{
reportException
(
"
MemoryBridge
.
prototype
.
getAllocations
"
"
Warning
:
allocations
log
overflowed
and
lost
some
data
.
"
)
;
}
const
allocations
=
this
.
dbg
.
memory
.
drainAllocationsLog
(
)
;
const
packet
=
{
allocations
:
[
]
allocationsTimestamps
:
[
]
allocationSizes
:
[
]
}
;
for
(
const
{
frame
:
stack
timestamp
size
}
of
allocations
)
{
if
(
stack
&
&
Cu
.
isDeadWrapper
(
stack
)
)
{
continue
;
}
const
waived
=
Cu
.
waiveXrays
(
stack
)
;
const
index
=
this
.
_frameCache
.
addFrame
(
waived
)
;
packet
.
allocations
.
push
(
index
)
;
packet
.
allocationsTimestamps
.
push
(
timestamp
)
;
packet
.
allocationSizes
.
push
(
size
)
;
}
return
this
.
_frameCache
.
updateFramePacket
(
packet
)
;
}
"
getting
allocations
"
)
forceGarbageCollection
(
)
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
Cu
.
forceGC
(
)
;
}
}
forceCycleCollection
(
)
{
Cu
.
forceCC
(
)
;
}
measure
(
)
{
const
result
=
{
}
;
const
jsObjectsSize
=
{
}
;
const
jsStringsSize
=
{
}
;
const
jsOtherSize
=
{
}
;
const
domSize
=
{
}
;
const
styleSize
=
{
}
;
const
otherSize
=
{
}
;
const
totalSize
=
{
}
;
const
jsMilliseconds
=
{
}
;
const
nonJSMilliseconds
=
{
}
;
try
{
this
.
_mgr
.
sizeOfTab
(
this
.
parent
.
window
jsObjectsSize
jsStringsSize
jsOtherSize
domSize
styleSize
otherSize
totalSize
jsMilliseconds
nonJSMilliseconds
)
;
result
.
total
=
totalSize
.
value
;
result
.
domSize
=
domSize
.
value
;
result
.
styleSize
=
styleSize
.
value
;
result
.
jsObjectsSize
=
jsObjectsSize
.
value
;
result
.
jsStringsSize
=
jsStringsSize
.
value
;
result
.
jsOtherSize
=
jsOtherSize
.
value
;
result
.
otherSize
=
otherSize
.
value
;
result
.
jsMilliseconds
=
jsMilliseconds
.
value
.
toFixed
(
1
)
;
result
.
nonJSMilliseconds
=
nonJSMilliseconds
.
value
.
toFixed
(
1
)
;
}
catch
(
e
)
{
reportException
(
"
MemoryBridge
.
prototype
.
measure
"
e
)
;
}
return
result
;
}
residentUnique
(
)
{
return
this
.
_mgr
.
residentUnique
;
}
_onGarbageCollection
(
data
)
{
this
.
emit
(
"
garbage
-
collection
"
data
)
;
if
(
this
.
_poller
)
{
this
.
_poller
.
disarm
(
)
;
this
.
_emitAllocations
(
)
;
}
}
_emitAllocations
(
)
{
this
.
emit
(
"
allocations
"
this
.
getAllocations
(
)
)
;
this
.
_poller
.
arm
(
)
;
}
_getCurrentTime
(
)
{
const
docShell
=
this
.
parent
.
isRootActor
?
this
.
parent
.
docShell
:
this
.
parent
.
originalDocShell
;
if
(
docShell
)
{
return
docShell
.
now
(
)
;
}
return
ChromeUtils
.
now
(
)
;
}
}
;
exports
.
Memory
=
Memory
;
