"
use
strict
"
;
var
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
var
{
dumpn
}
=
DevToolsUtils
;
loader
.
lazyRequireGetter
(
this
"
DevToolsServer
"
"
resource
:
/
/
devtools
/
server
/
devtools
-
server
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ChildDebuggerTransport
"
"
resource
:
/
/
devtools
/
shared
/
transport
/
child
-
transport
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
function
connectToFrame
(
connection
frame
onDestroy
)
{
return
new
Promise
(
resolve
=
>
{
const
mm
=
frame
.
messageManager
|
|
frame
.
frameLoader
.
messageManager
;
mm
.
loadFrameScript
(
"
resource
:
/
/
devtools
/
server
/
startup
/
frame
.
js
"
false
)
;
const
trackMessageManager
=
(
)
=
>
{
if
(
!
actor
)
{
mm
.
addMessageListener
(
"
debug
:
actor
"
onActorCreated
)
;
}
}
;
const
untrackMessageManager
=
(
)
=
>
{
if
(
!
actor
)
{
mm
.
removeMessageListener
(
"
debug
:
actor
"
onActorCreated
)
;
}
}
;
let
actor
childTransport
;
const
prefix
=
connection
.
allocID
(
"
child
"
)
;
const
connPrefix
=
prefix
+
"
/
"
;
const
onActorCreated
=
DevToolsUtils
.
makeInfallible
(
function
(
msg
)
{
if
(
msg
.
json
.
prefix
!
=
prefix
)
{
return
;
}
mm
.
removeMessageListener
(
"
debug
:
actor
"
onActorCreated
)
;
childTransport
=
new
ChildDebuggerTransport
(
mm
prefix
)
;
childTransport
.
hooks
=
{
onPacket
:
connection
.
send
.
bind
(
connection
)
}
;
childTransport
.
ready
(
)
;
connection
.
setForwarding
(
prefix
childTransport
)
;
dumpn
(
Start
forwarding
for
frame
with
prefix
{
prefix
}
)
;
actor
=
msg
.
json
.
actor
;
resolve
(
actor
)
;
}
)
;
const
destroy
=
DevToolsUtils
.
makeInfallible
(
function
(
)
{
connection
.
off
(
"
closed
"
destroy
)
;
Services
.
obs
.
removeObserver
(
onMessageManagerClose
"
message
-
manager
-
close
"
)
;
DevToolsServer
.
emit
(
"
disconnected
-
from
-
child
:
"
+
connPrefix
{
mm
prefix
:
connPrefix
}
)
;
if
(
actor
)
{
actor
=
null
;
}
if
(
onDestroy
)
{
onDestroy
(
mm
)
;
}
if
(
childTransport
)
{
childTransport
.
close
(
)
;
childTransport
=
null
;
connection
.
cancelForwarding
(
prefix
)
;
try
{
mm
.
sendAsyncMessage
(
"
debug
:
disconnect
"
{
prefix
}
)
;
}
catch
(
e
)
{
}
}
else
{
resolve
(
null
)
;
}
untrackMessageManager
(
)
;
}
)
;
trackMessageManager
(
)
;
const
onMessageManagerClose
=
function
(
subject
)
{
if
(
subject
=
=
mm
)
{
destroy
(
)
;
}
}
;
Services
.
obs
.
addObserver
(
onMessageManagerClose
"
message
-
manager
-
close
"
)
;
connection
.
on
(
"
closed
"
destroy
)
;
mm
.
sendAsyncMessage
(
"
debug
:
connect
"
{
prefix
}
)
;
}
)
;
}
exports
.
connectToFrame
=
connectToFrame
;
