"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
WindowGlobalLogger
"
]
;
function
getWindowGlobalUri
(
windowGlobal
)
{
let
windowGlobalUri
=
"
"
;
if
(
windowGlobal
.
documentURI
)
{
windowGlobalUri
=
windowGlobal
.
documentURI
.
spec
;
}
else
if
(
windowGlobal
.
browsingContext
?
.
window
)
{
windowGlobalUri
=
windowGlobal
.
browsingContext
.
window
.
location
.
href
;
if
(
!
windowGlobalUri
)
{
windowGlobalUri
=
windowGlobal
.
browsingContext
.
window
.
document
.
documentURI
;
}
}
return
windowGlobalUri
;
}
const
WindowGlobalLogger
=
{
logWindowGlobal
(
windowGlobal
message
)
{
const
{
browsingContext
}
=
windowGlobal
;
const
{
parent
}
=
browsingContext
;
const
windowGlobalUri
=
getWindowGlobalUri
(
windowGlobal
)
;
const
isInitialDocument
=
"
isInitialDocument
"
in
windowGlobal
?
windowGlobal
.
isInitialDocument
:
windowGlobal
.
browsingContext
.
window
?
.
document
.
isInitialDocument
;
const
details
=
[
]
;
details
.
push
(
"
BrowsingContext
.
browserId
:
"
+
browsingContext
.
browserId
"
BrowsingContext
.
id
:
"
+
browsingContext
.
id
"
innerWindowId
:
"
+
windowGlobal
.
innerWindowId
"
opener
.
id
:
"
+
browsingContext
.
opener
?
.
id
"
pid
:
"
+
windowGlobal
.
osPid
"
isClosed
:
"
+
windowGlobal
.
isClosed
"
isInProcess
:
"
+
windowGlobal
.
isInProcess
"
isCurrentGlobal
:
"
+
windowGlobal
.
isCurrentGlobal
"
isProcessRoot
:
"
+
windowGlobal
.
isProcessRoot
"
currentRemoteType
:
"
+
browsingContext
.
currentRemoteType
"
hasParent
:
"
+
(
parent
?
parent
.
id
:
"
no
"
)
"
uri
:
"
+
(
windowGlobalUri
?
windowGlobalUri
:
"
no
uri
"
)
"
isProcessRoot
:
"
+
windowGlobal
.
isProcessRoot
"
BrowsingContext
.
isContent
:
"
+
windowGlobal
.
browsingContext
.
isContent
"
isInitialDocument
:
"
+
isInitialDocument
)
;
const
header
=
"
[
WindowGlobalLogger
]
"
+
message
;
const
padding
=
"
"
;
const
formattedDetails
=
details
.
map
(
s
=
>
padding
+
s
)
;
const
detailsString
=
formattedDetails
.
join
(
"
\
n
"
)
;
dump
(
header
+
"
\
n
"
+
detailsString
+
"
\
n
"
)
;
}
}
;
