"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DevToolsFrameChild
"
]
;
const
{
EventEmitter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
Loader
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
TargetActorRegistry
:
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
target
-
actor
-
registry
.
jsm
"
}
)
;
const
SHARED_DATA_KEY_NAME
=
"
DevTools
:
watchedPerWatcher
"
;
const
DEBUG
=
false
;
function
shouldNotifyWindowGlobal
(
windowGlobal
watchedBrowsingContextID
)
{
const
browsingContext
=
windowGlobal
.
browsingContext
;
const
window
=
Services
.
wm
.
getCurrentInnerWindowWithId
(
windowGlobal
.
innerWindowId
)
;
if
(
!
window
.
docShell
.
hasLoadedNonBlankURI
)
{
return
false
;
}
if
(
watchedBrowsingContextID
&
&
browsingContext
.
top
.
id
!
=
watchedBrowsingContextID
)
{
return
false
;
}
if
(
!
browsingContext
.
parent
&
&
browsingContext
.
id
=
=
watchedBrowsingContextID
)
{
return
false
;
}
if
(
Cu
.
isRemoteProxy
(
windowGlobal
.
window
)
)
{
return
false
;
}
if
(
browsingContext
.
parent
&
&
browsingContext
.
parent
.
window
&
&
!
Cu
.
isRemoteProxy
(
browsingContext
.
parent
.
window
)
)
{
return
false
;
}
return
true
;
}
function
logWindowGlobal
(
windowGlobal
message
)
{
if
(
!
DEBUG
)
{
return
;
}
const
browsingContext
=
windowGlobal
.
browsingContext
;
dump
(
message
+
"
|
BrowsingContext
.
id
:
"
+
browsingContext
.
id
+
"
Inner
Window
ID
:
"
+
windowGlobal
.
innerWindowId
+
"
pid
:
"
+
windowGlobal
.
osPid
+
"
isClosed
:
"
+
windowGlobal
.
isClosed
+
"
isInProcess
:
"
+
windowGlobal
.
isInProcess
+
"
isCurrentGlobal
:
"
+
windowGlobal
.
isCurrentGlobal
+
"
currentRemoteType
:
"
+
browsingContext
.
currentRemoteType
+
"
hasParent
:
"
+
(
browsingContext
.
parent
?
browsingContext
.
parent
.
id
:
"
no
"
)
+
"
=
>
"
+
(
windowGlobal
.
documentURI
?
windowGlobal
.
documentURI
.
spec
:
"
no
-
uri
"
)
+
"
\
n
"
)
;
}
class
DevToolsFrameChild
extends
JSWindowActorChild
{
constructor
(
)
{
super
(
)
;
this
.
_connections
=
new
Map
(
)
;
this
.
_onConnectionChange
=
this
.
_onConnectionChange
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
instantiate
(
)
{
const
{
sharedData
}
=
Services
.
cpmm
;
const
watchedDataByWatcherActor
=
sharedData
.
get
(
SHARED_DATA_KEY_NAME
)
;
if
(
!
watchedDataByWatcherActor
)
{
throw
new
Error
(
"
Request
to
instantiate
the
target
(
s
)
for
the
BrowsingContext
but
sharedData
is
empty
about
watched
targets
"
)
;
}
for
(
const
[
watcherActorID
{
targets
connectionPrefix
browsingContextID
resources
}
]
of
watchedDataByWatcherActor
)
{
if
(
targets
.
has
(
"
frame
"
)
&
&
shouldNotifyWindowGlobal
(
this
.
manager
browsingContextID
)
)
{
this
.
_createTargetActor
(
watcherActorID
connectionPrefix
resources
)
;
}
}
}
_createTargetActor
(
watcherActorID
parentConnectionPrefix
initialWatchedResources
)
{
if
(
this
.
_connections
.
get
(
watcherActorID
)
)
{
throw
new
Error
(
"
DevToolsFrameChild
_createTargetActor
was
called
more
than
once
"
+
for
the
same
Watcher
(
Actor
ID
:
"
{
watcherActorID
}
"
)
)
;
}
const
forwardingPrefix
=
parentConnectionPrefix
+
"
windowGlobal
"
+
this
.
manager
.
innerWindowId
;
logWindowGlobal
(
this
.
manager
"
Instantiate
WindowGlobalTarget
with
prefix
:
"
+
forwardingPrefix
)
;
const
{
connection
targetActor
}
=
this
.
_createConnectionAndActor
(
forwardingPrefix
)
;
this
.
_connections
.
set
(
watcherActorID
{
connection
actor
:
targetActor
}
)
;
if
(
initialWatchedResources
.
size
>
0
)
{
targetActor
.
watchTargetResources
(
[
.
.
.
initialWatchedResources
]
)
;
}
this
.
sendAsyncMessage
(
"
DevToolsFrameChild
:
connectFromContent
"
{
watcherActorID
forwardingPrefix
actor
:
targetActor
.
form
(
)
}
)
;
}
_destroyTargetActor
(
watcherActorID
)
{
const
connectionInfo
=
this
.
_connections
.
get
(
watcherActorID
)
;
if
(
!
connectionInfo
)
{
throw
new
Error
(
Trying
to
destroy
a
target
actor
that
doesn
'
t
exists
or
has
already
been
destroyed
.
Watcher
Actor
ID
:
{
watcherActorID
}
)
;
}
connectionInfo
.
connection
.
close
(
)
;
this
.
_connections
.
delete
(
watcherActorID
)
;
if
(
this
.
_connections
.
size
=
=
0
)
{
this
.
didDestroy
(
)
;
}
}
_createConnectionAndActor
(
forwardingPrefix
)
{
this
.
useCustomLoader
=
this
.
document
.
nodePrincipal
.
isSystemPrincipal
;
if
(
!
this
.
loader
)
{
this
.
loader
=
this
.
useCustomLoader
?
new
Loader
.
DevToolsLoader
(
{
invisibleToDebugger
:
true
}
)
:
Loader
;
}
const
{
DevToolsServer
}
=
this
.
loader
.
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
const
{
ActorPool
}
=
this
.
loader
.
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
const
{
FrameTargetActor
}
=
this
.
loader
.
require
(
"
devtools
/
server
/
actors
/
targets
/
frame
"
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerActors
(
{
target
:
true
}
)
;
DevToolsServer
.
on
(
"
connectionchange
"
this
.
_onConnectionChange
)
;
const
connection
=
DevToolsServer
.
connectToParentWindowActor
(
this
forwardingPrefix
)
;
const
targetActor
=
new
FrameTargetActor
(
connection
this
.
docShell
{
followWindowGlobalLifeCycle
:
true
doNotFireFrameUpdates
:
true
}
)
;
const
actorPool
=
new
ActorPool
(
connection
"
frame
-
child
"
)
;
actorPool
.
addActor
(
targetActor
)
;
connection
.
addActorPool
(
actorPool
)
;
return
{
connection
targetActor
}
;
}
_onConnectionChange
(
)
{
const
{
DevToolsServer
}
=
this
.
loader
.
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
if
(
DevToolsServer
.
hasConnection
(
)
|
|
DevToolsServer
.
keepAlive
)
{
return
;
}
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
DevToolsServer
.
off
(
"
connectionchange
"
this
.
_onConnectionChange
)
;
DevToolsServer
.
destroy
(
)
;
}
async
sendPacket
(
packet
prefix
)
{
return
this
.
sendQuery
(
"
DevToolsFrameChild
:
packet
"
{
packet
prefix
}
)
;
}
async
sendQuery
(
msg
args
)
{
try
{
const
res
=
await
super
.
sendQuery
(
msg
args
)
;
return
res
;
}
catch
(
e
)
{
console
.
error
(
"
Failed
to
sendQuery
in
DevToolsFrameChild
"
msg
)
;
console
.
error
(
e
.
toString
(
)
)
;
throw
e
;
}
}
receiveMessage
(
message
)
{
if
(
message
.
name
!
=
"
DevToolsFrameParent
:
packet
"
)
{
const
{
browsingContextID
}
=
message
.
data
;
if
(
this
.
manager
.
browsingContext
.
id
!
=
browsingContextID
&
&
!
shouldNotifyWindowGlobal
(
this
.
manager
browsingContextID
)
)
{
throw
new
Error
(
"
Mismatch
between
DevToolsFrameParent
and
DevToolsFrameChild
"
+
(
this
.
manager
.
browsingContext
.
id
=
=
browsingContextID
?
"
window
global
shouldn
'
t
be
notified
(
shouldNotifyWindowGlobal
mismatch
)
"
:
expected
browsing
context
with
ID
{
browsingContextID
}
but
got
{
this
.
manager
.
browsingContext
.
id
}
)
)
;
}
}
switch
(
message
.
name
)
{
case
"
DevToolsFrameParent
:
instantiate
-
already
-
available
"
:
{
const
{
watcherActorID
connectionPrefix
watchedResources
}
=
message
.
data
;
return
this
.
_createTargetActor
(
watcherActorID
connectionPrefix
watchedResources
)
;
}
case
"
DevToolsFrameParent
:
destroy
"
:
{
const
{
watcherActorID
}
=
message
.
data
;
return
this
.
_destroyTargetActor
(
watcherActorID
)
;
}
case
"
DevToolsFrameParent
:
watchResources
"
:
{
const
{
watcherActorID
browsingContextID
resourceTypes
}
=
message
.
data
;
return
this
.
_watchResources
(
watcherActorID
browsingContextID
resourceTypes
)
;
}
case
"
DevToolsFrameParent
:
unwatchResources
"
:
{
const
{
watcherActorID
browsingContextID
resourceTypes
}
=
message
.
data
;
return
this
.
_unwatchResources
(
watcherActorID
browsingContextID
resourceTypes
)
;
}
case
"
DevToolsFrameParent
:
packet
"
:
return
this
.
emit
(
"
packet
-
received
"
message
)
;
default
:
throw
new
Error
(
"
Unsupported
message
in
DevToolsFrameParent
:
"
+
message
.
name
)
;
}
}
_getTargetActorForWatcherActorID
(
watcherActorID
browsingContextID
)
{
const
connectionInfo
=
this
.
_connections
.
get
(
watcherActorID
)
;
let
targetActor
=
connectionInfo
?
connectionInfo
.
actor
:
null
;
if
(
!
targetActor
&
&
this
.
manager
.
browsingContext
.
id
=
=
browsingContextID
)
{
targetActor
=
TargetActorRegistry
.
getTargetActor
(
browsingContextID
)
;
}
return
targetActor
;
}
_watchResources
(
watcherActorID
browsingContextID
resourceTypes
)
{
const
targetActor
=
this
.
_getTargetActorForWatcherActorID
(
watcherActorID
browsingContextID
)
;
if
(
!
targetActor
)
{
throw
new
Error
(
No
target
actor
for
this
Watcher
Actor
ID
:
"
{
watcherActorID
}
"
/
BrowsingContextID
:
{
browsingContextID
}
)
;
}
return
targetActor
.
watchTargetResources
(
resourceTypes
)
;
}
_unwatchResources
(
watcherActorID
browsingContextID
resourceTypes
)
{
const
targetActor
=
this
.
_getTargetActorForWatcherActorID
(
watcherActorID
browsingContextID
)
;
if
(
targetActor
)
{
return
targetActor
.
unwatchTargetResources
(
resourceTypes
)
;
}
return
null
;
}
handleEvent
(
{
type
}
)
{
if
(
type
=
=
"
DOMWindowCreated
"
)
{
this
.
instantiate
(
)
;
}
}
didDestroy
(
)
{
for
(
const
[
connectionInfo
]
of
this
.
_connections
)
{
connectionInfo
.
connection
.
close
(
)
;
}
this
.
_connections
.
clear
(
)
;
if
(
this
.
useCustomLoader
)
{
this
.
loader
.
destroy
(
)
;
}
}
}
