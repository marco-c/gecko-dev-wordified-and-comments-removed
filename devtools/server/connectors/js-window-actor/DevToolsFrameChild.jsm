"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DevToolsFrameChild
"
]
;
const
{
EventEmitter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
)
;
const
Loader
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
class
DevToolsFrameChild
extends
JSWindowActorChild
{
constructor
(
)
{
super
(
)
;
this
.
_connections
=
new
Map
(
)
;
this
.
_onConnectionChange
=
this
.
_onConnectionChange
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
connect
(
msg
)
{
this
.
useCustomLoader
=
this
.
document
.
nodePrincipal
.
isSystemPrincipal
;
this
.
loader
=
this
.
useCustomLoader
?
new
Loader
.
DevToolsLoader
(
{
invisibleToDebugger
:
true
}
)
:
Loader
;
const
{
prefix
}
=
msg
.
data
;
if
(
this
.
_connections
.
get
(
prefix
)
)
{
throw
new
Error
(
"
DevToolsFrameChild
connect
was
called
more
than
once
"
+
for
the
same
connection
(
prefix
:
"
{
prefix
}
"
)
)
;
}
const
{
connection
targetActor
}
=
this
.
_createConnectionAndActor
(
prefix
)
;
this
.
_connections
.
set
(
prefix
{
connection
actor
:
targetActor
}
)
;
const
{
actor
}
=
this
.
_connections
.
get
(
prefix
)
;
return
{
actor
:
actor
.
form
(
)
}
;
}
_createConnectionAndActor
(
prefix
)
{
const
{
DevToolsServer
}
=
this
.
loader
.
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
const
{
ActorPool
}
=
this
.
loader
.
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
const
{
FrameTargetActor
}
=
this
.
loader
.
require
(
"
devtools
/
server
/
actors
/
targets
/
frame
"
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerActors
(
{
target
:
true
}
)
;
DevToolsServer
.
on
(
"
connectionchange
"
this
.
_onConnectionChange
)
;
const
connection
=
DevToolsServer
.
connectToParentWindowActor
(
prefix
this
)
;
const
targetActor
=
new
FrameTargetActor
(
connection
this
.
docShell
)
;
const
actorPool
=
new
ActorPool
(
connection
)
;
actorPool
.
addActor
(
targetActor
)
;
connection
.
addActorPool
(
actorPool
)
;
return
{
connection
targetActor
}
;
}
_onConnectionChange
(
)
{
const
{
DevToolsServer
}
=
this
.
loader
.
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
if
(
DevToolsServer
.
hasConnection
(
)
|
|
DevToolsServer
.
keepAlive
)
{
return
;
}
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
DevToolsServer
.
off
(
"
connectionchange
"
this
.
_onConnectionChange
)
;
DevToolsServer
.
destroy
(
)
;
}
disconnect
(
msg
)
{
const
{
prefix
}
=
msg
.
data
;
const
connectionInfo
=
this
.
_connections
.
get
(
prefix
)
;
if
(
!
connectionInfo
)
{
console
.
error
(
"
No
connection
available
in
DevToolsFrameChild
:
:
disconnect
"
)
;
return
;
}
connectionInfo
.
connection
.
close
(
)
;
this
.
_connections
.
delete
(
prefix
)
;
}
async
sendPacket
(
packet
prefix
)
{
return
this
.
sendQuery
(
"
DevToolsFrameChild
:
packet
"
{
packet
prefix
}
)
;
}
async
sendQuery
(
msg
args
)
{
try
{
const
res
=
await
super
.
sendQuery
(
msg
args
)
;
return
res
;
}
catch
(
e
)
{
console
.
error
(
"
Failed
to
sendQuery
in
DevToolsFrameChild
"
msg
)
;
console
.
error
(
e
.
toString
(
)
)
;
throw
e
;
}
}
receiveMessage
(
data
)
{
switch
(
data
.
name
)
{
case
"
DevToolsFrameParent
:
connect
"
:
return
this
.
connect
(
data
)
;
case
"
DevToolsFrameParent
:
disconnect
"
:
return
this
.
disconnect
(
data
)
;
case
"
DevToolsFrameParent
:
packet
"
:
return
this
.
emit
(
"
packet
-
received
"
data
)
;
default
:
throw
new
Error
(
"
Unsupported
message
in
DevToolsFrameParent
:
"
+
data
.
name
)
;
}
}
didDestroy
(
)
{
for
(
const
[
connectionInfo
]
of
this
.
_connections
)
{
connectionInfo
.
connection
.
close
(
)
;
}
if
(
this
.
useCustomLoader
)
{
this
.
loader
.
destroy
(
)
;
}
}
}
