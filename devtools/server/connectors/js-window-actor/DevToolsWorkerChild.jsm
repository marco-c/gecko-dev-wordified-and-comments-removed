"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DevToolsWorkerChild
"
]
;
const
{
EventEmitter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
wdm
"
"
mozilla
.
org
/
dom
/
workers
/
workerdebuggermanager
;
1
"
"
nsIWorkerDebuggerManager
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
Loader
"
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
)
;
const
SHARED_DATA_KEY_NAME
=
"
DevTools
:
watchedPerWatcher
"
;
class
DevToolsWorkerChild
extends
JSWindowActorChild
{
constructor
(
)
{
super
(
)
;
this
.
_connections
=
new
Map
(
)
;
this
.
_onConnectionChange
=
this
.
_onConnectionChange
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
_onWorkerRegistered
(
dbg
)
{
if
(
!
this
.
_shouldHandleWorker
(
dbg
)
)
{
return
;
}
for
(
const
[
watcherActorID
{
connection
forwardingPrefix
}
]
of
this
.
_connections
)
{
this
.
_createWorkerTargetActor
(
{
dbg
connection
forwardingPrefix
watcherActorID
}
)
;
}
}
_onWorkerUnregistered
(
dbg
)
{
for
(
const
[
watcherActorID
{
workers
forwardingPrefix
}
]
of
this
.
_connections
)
{
const
unregisteredActorIndex
=
workers
.
findIndex
(
worker
=
>
worker
.
dbg
.
id
=
=
=
dbg
.
id
)
;
if
(
unregisteredActorIndex
=
=
=
-
1
)
{
continue
;
}
const
[
unregisteredActor
]
=
workers
.
splice
(
unregisteredActorIndex
1
)
;
this
.
sendAsyncMessage
(
"
DevToolsWorkerChild
:
workerTargetDestroyed
"
{
watcherActorID
forwardingPrefix
workerTargetForm
:
unregisteredActor
.
workerTargetForm
}
)
;
}
}
onDOMWindowCreated
(
)
{
const
{
sharedData
}
=
Services
.
cpmm
;
const
watchedDataByWatcherActor
=
sharedData
.
get
(
SHARED_DATA_KEY_NAME
)
;
if
(
!
watchedDataByWatcherActor
)
{
throw
new
Error
(
"
Request
to
instantiate
the
target
(
s
)
for
the
Worker
but
sharedData
is
empty
about
watched
targets
"
)
;
}
for
(
const
[
watcherActorID
watchedData
]
of
watchedDataByWatcherActor
)
{
const
{
targets
connectionPrefix
browserId
}
=
watchedData
;
if
(
targets
.
includes
(
"
worker
"
)
&
&
shouldNotifyWindowGlobal
(
this
.
manager
browserId
)
)
{
this
.
_watchWorkerTargets
(
{
watcherActorID
parentConnectionPrefix
:
connectionPrefix
watchedData
ignoreExistingTargets
:
true
}
)
;
}
}
}
receiveMessage
(
message
)
{
if
(
message
.
name
!
=
"
DevToolsWorkerParent
:
packet
"
)
{
const
{
browserId
}
=
message
.
data
;
if
(
this
.
manager
.
browsingContext
.
browserId
!
=
browserId
&
&
!
shouldNotifyWindowGlobal
(
this
.
manager
browserId
)
)
{
throw
new
Error
(
"
Mismatch
between
DevToolsWorkerParent
and
DevToolsWorkerChild
"
+
(
this
.
manager
.
browsingContext
.
browserId
=
=
browserId
?
"
window
global
shouldn
'
t
be
notified
(
shouldNotifyWindowGlobal
mismatch
)
"
:
expected
browsing
context
with
ID
{
browserId
}
but
got
{
this
.
manager
.
browsingContext
.
browserId
}
)
)
;
}
}
switch
(
message
.
name
)
{
case
"
DevToolsWorkerParent
:
instantiate
-
already
-
available
"
:
{
const
{
watcherActorID
connectionPrefix
watchedData
}
=
message
.
data
;
return
this
.
_watchWorkerTargets
(
{
watcherActorID
parentConnectionPrefix
:
connectionPrefix
watchedData
}
)
;
}
case
"
DevToolsWorkerParent
:
destroy
"
:
{
const
{
watcherActorID
}
=
message
.
data
;
return
this
.
_destroyTargetActors
(
watcherActorID
)
;
}
case
"
DevToolsWorkerParent
:
addWatcherDataEntry
"
:
{
const
{
watcherActorID
type
entries
}
=
message
.
data
;
return
this
.
_addWatcherDataEntry
(
watcherActorID
type
entries
)
;
}
case
"
DevToolsWorkerParent
:
removeWatcherDataEntry
"
:
{
const
{
watcherActorID
type
entries
}
=
message
.
data
;
return
this
.
_removeWatcherDataEntry
(
watcherActorID
type
entries
)
;
}
case
"
DevToolsWorkerParent
:
packet
"
:
return
this
.
emit
(
"
packet
-
received
"
message
)
;
default
:
throw
new
Error
(
"
Unsupported
message
in
DevToolsWorkerParent
:
"
+
message
.
name
)
;
}
}
async
_watchWorkerTargets
(
{
watcherActorID
parentConnectionPrefix
ignoreExistingTargets
watchedData
}
)
{
if
(
this
.
_connections
.
has
(
watcherActorID
)
)
{
throw
new
Error
(
"
DevToolsWorkerChild
_watchWorkerTargets
was
called
more
than
once
"
+
for
the
same
Watcher
(
Actor
ID
:
"
{
watcherActorID
}
"
)
)
;
}
if
(
!
this
.
_workerDebuggerListener
)
{
this
.
_workerDebuggerListener
=
{
onRegister
:
this
.
_onWorkerRegistered
.
bind
(
this
)
onUnregister
:
this
.
_onWorkerUnregistered
.
bind
(
this
)
}
;
wdm
.
addListener
(
this
.
_workerDebuggerListener
)
;
}
const
forwardingPrefix
=
parentConnectionPrefix
+
"
workerGlobal
"
+
this
.
manager
.
innerWindowId
;
const
connection
=
this
.
_createConnection
(
forwardingPrefix
)
;
this
.
_connections
.
set
(
watcherActorID
{
connection
workers
:
[
]
forwardingPrefix
watchedData
}
)
;
if
(
ignoreExistingTargets
!
=
=
true
)
{
await
Promise
.
all
(
Array
.
from
(
wdm
.
getWorkerDebuggerEnumerator
(
)
)
.
filter
(
dbg
=
>
this
.
_shouldHandleWorker
(
dbg
)
)
.
map
(
dbg
=
>
this
.
_createWorkerTargetActor
(
{
dbg
connection
forwardingPrefix
watcherActorID
}
)
)
)
;
}
}
_createConnection
(
forwardingPrefix
)
{
const
{
DevToolsServer
}
=
Loader
.
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerActors
(
{
target
:
true
}
)
;
DevToolsServer
.
on
(
"
connectionchange
"
this
.
_onConnectionChange
)
;
const
connection
=
DevToolsServer
.
connectToParentWindowActor
(
this
forwardingPrefix
)
;
return
connection
;
}
_shouldHandleWorker
(
dbg
)
{
return
(
!
dbg
.
isClosed
&
&
dbg
.
type
=
=
=
Ci
.
nsIWorkerDebugger
.
TYPE_DEDICATED
&
&
dbg
.
window
=
=
=
this
.
manager
?
.
browsingContext
?
.
window
)
;
}
async
_createWorkerTargetActor
(
{
dbg
connection
forwardingPrefix
watcherActorID
}
)
{
try
{
dbg
.
setDebuggerReady
(
false
)
;
}
catch
(
e
)
{
}
const
watcherConnectionData
=
this
.
_connections
.
get
(
watcherActorID
)
;
const
{
watchedData
}
=
watcherConnectionData
;
const
workerThreadServerForwardingPrefix
=
connection
.
allocID
(
"
workerTarget
"
)
;
const
{
connectToWorker
}
=
Loader
.
require
(
"
devtools
/
server
/
connectors
/
worker
-
connector
"
)
;
const
{
workerTargetForm
}
=
await
connectToWorker
(
connection
dbg
workerThreadServerForwardingPrefix
{
watchedData
}
)
;
watcherConnectionData
.
workers
.
push
(
{
dbg
workerTargetForm
workerThreadServerForwardingPrefix
}
)
;
this
.
sendAsyncMessage
(
"
DevToolsWorkerChild
:
workerTargetAvailable
"
{
watcherActorID
forwardingPrefix
workerTargetForm
}
)
;
return
workerTargetForm
;
}
_destroyTargetActors
(
watcherActorID
)
{
const
watcherConnectionData
=
this
.
_connections
.
get
(
watcherActorID
)
;
if
(
!
watcherConnectionData
)
{
console
.
error
(
Trying
to
destroy
a
target
actor
that
doesn
'
t
exists
or
has
already
been
destroyed
.
Watcher
Actor
ID
:
{
watcherActorID
}
)
;
return
;
}
for
(
const
{
dbg
workerThreadServerForwardingPrefix
}
of
watcherConnectionData
.
workers
)
{
try
{
dbg
.
postMessage
(
JSON
.
stringify
(
{
type
:
"
disconnect
"
forwardingPrefix
:
workerThreadServerForwardingPrefix
}
)
)
;
}
catch
(
e
)
{
}
}
watcherConnectionData
.
connection
.
close
(
)
;
this
.
_connections
.
delete
(
watcherActorID
)
;
}
_onConnectionChange
(
)
{
const
{
DevToolsServer
}
=
Loader
.
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
if
(
DevToolsServer
.
hasConnection
(
)
|
|
DevToolsServer
.
keepAlive
)
{
return
;
}
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
DevToolsServer
.
off
(
"
connectionchange
"
this
.
_onConnectionChange
)
;
DevToolsServer
.
destroy
(
)
;
}
async
sendPacket
(
packet
prefix
)
{
return
this
.
sendAsyncMessage
(
"
DevToolsWorkerChild
:
packet
"
{
packet
prefix
}
)
;
}
async
_addWatcherDataEntry
(
watcherActorID
type
entries
)
{
const
watcherConnectionData
=
this
.
_connections
.
get
(
watcherActorID
)
;
if
(
!
watcherConnectionData
)
{
return
;
}
if
(
!
watcherConnectionData
.
watchedData
[
type
]
)
{
watcherConnectionData
.
watchedData
[
type
]
=
[
]
;
}
watcherConnectionData
.
watchedData
[
type
]
.
push
(
.
.
.
entries
)
;
const
promises
=
[
]
;
for
(
const
{
dbg
workerThreadServerForwardingPrefix
}
of
watcherConnectionData
.
workers
)
{
promises
.
push
(
addWatcherDataEntryInWorkerTarget
(
{
dbg
workerThreadServerForwardingPrefix
type
entries
}
)
)
;
}
await
Promise
.
all
(
promises
)
;
}
_removeWatcherDataEntry
(
watcherActorID
type
entries
)
{
const
watcherConnectionData
=
this
.
_connections
.
get
(
watcherActorID
)
;
if
(
!
watcherConnectionData
)
{
return
;
}
if
(
watcherConnectionData
.
watchedData
[
type
]
)
{
watcherConnectionData
.
watchedData
[
type
]
=
watcherConnectionData
.
watchedData
[
type
]
.
filter
(
entry
=
>
!
entries
.
includes
(
entry
)
)
;
}
for
(
const
{
dbg
workerThreadServerForwardingPrefix
}
of
watcherConnectionData
.
workers
)
{
dbg
.
postMessage
(
JSON
.
stringify
(
{
type
:
"
remove
-
watcher
-
data
-
entry
"
forwardingPrefix
:
workerThreadServerForwardingPrefix
dataEntryType
:
type
entries
}
)
)
;
}
}
handleEvent
(
{
type
}
)
{
if
(
type
=
=
"
DOMWindowCreated
"
)
{
this
.
onDOMWindowCreated
(
)
;
}
}
_removeExistingWorkerDebuggerListener
(
)
{
if
(
this
.
_workerDebuggerListener
)
{
wdm
.
removeListener
(
this
.
_workerDebuggerListener
)
;
this
.
_workerDebuggerListener
=
null
;
}
}
didDestroy
(
)
{
this
.
_removeExistingWorkerDebuggerListener
(
)
;
for
(
const
[
watcherActorID
watcherConnectionData
]
of
this
.
_connections
)
{
const
{
connection
}
=
watcherConnectionData
;
this
.
_destroyTargetActors
(
watcherActorID
)
;
connection
.
close
(
)
;
}
this
.
_connections
.
clear
(
)
;
}
}
function
shouldNotifyWindowGlobal
(
windowGlobal
watchedBrowserId
)
{
const
browsingContext
=
windowGlobal
.
browsingContext
;
if
(
watchedBrowserId
&
&
browsingContext
.
browserId
!
=
watchedBrowserId
)
{
return
false
;
}
if
(
Cu
.
isRemoteProxy
(
windowGlobal
.
window
)
)
{
return
false
;
}
return
true
;
}
function
addWatcherDataEntryInWorkerTarget
(
{
dbg
workerThreadServerForwardingPrefix
type
entries
}
)
{
return
new
Promise
(
resolve
=
>
{
const
listener
=
{
onMessage
:
message
=
>
{
message
=
JSON
.
parse
(
message
)
;
if
(
message
.
type
=
=
=
"
watcher
-
data
-
entry
-
added
"
)
{
resolve
(
)
;
dbg
.
removeListener
(
listener
)
;
}
}
onClose
:
(
)
=
>
resolve
(
)
}
;
dbg
.
addListener
(
listener
)
;
dbg
.
postMessage
(
JSON
.
stringify
(
{
type
:
"
add
-
watcher
-
data
-
entry
"
forwardingPrefix
:
workerThreadServerForwardingPrefix
dataEntryType
:
type
entries
}
)
)
;
}
)
;
}
