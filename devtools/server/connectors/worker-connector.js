"
use
strict
"
;
var
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
loader
.
lazyRequireGetter
(
this
"
MainThreadWorkerDebuggerTransport
"
"
devtools
/
shared
/
transport
/
worker
-
transport
"
true
)
;
function
connectToWorker
(
connection
dbg
forwardingPrefix
options
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
if
(
dbg
.
isClosed
)
{
reject
(
"
closed
"
)
;
}
if
(
!
dbg
.
isInitialized
)
{
dbg
.
initialize
(
"
resource
:
/
/
devtools
/
server
/
startup
/
worker
.
js
"
)
;
const
listener
=
{
onClose
:
(
)
=
>
{
dbg
.
removeListener
(
listener
)
;
}
onMessage
:
message
=
>
{
message
=
JSON
.
parse
(
message
)
;
if
(
message
.
type
!
=
=
"
rpc
"
)
{
if
(
message
.
type
=
=
"
worker
-
thread
-
attached
"
)
{
dbg
.
setDebuggerReady
(
true
)
;
}
return
;
}
Promise
.
resolve
(
)
.
then
(
(
)
=
>
{
const
method
=
{
fetch
:
DevToolsUtils
.
fetch
}
[
message
.
method
]
;
if
(
!
method
)
{
throw
Error
(
"
Unknown
method
:
"
+
message
.
method
)
;
}
return
method
.
apply
(
undefined
message
.
params
)
;
}
)
.
then
(
value
=
>
{
dbg
.
postMessage
(
JSON
.
stringify
(
{
type
:
"
rpc
"
result
:
value
error
:
null
id
:
message
.
id
}
)
)
;
}
reason
=
>
{
dbg
.
postMessage
(
JSON
.
stringify
(
{
type
:
"
rpc
"
result
:
null
error
:
reason
id
:
message
.
id
}
)
)
;
}
)
;
}
}
;
dbg
.
addListener
(
listener
)
;
}
if
(
dbg
.
isClosed
)
{
reject
(
"
closed
"
)
;
}
dbg
.
postMessage
(
JSON
.
stringify
(
{
type
:
"
connect
"
forwardingPrefix
options
}
)
)
;
const
listener
=
{
onClose
:
(
)
=
>
{
dbg
.
removeListener
(
listener
)
;
reject
(
"
closed
"
)
;
}
onMessage
:
message
=
>
{
message
=
JSON
.
parse
(
message
)
;
if
(
message
.
type
!
=
=
"
connected
"
|
|
message
.
forwardingPrefix
!
=
=
forwardingPrefix
)
{
return
;
}
dbg
.
removeListener
(
listener
)
;
const
transport
=
new
MainThreadWorkerDebuggerTransport
(
dbg
forwardingPrefix
)
;
transport
.
ready
(
)
;
transport
.
hooks
=
{
onClosed
:
(
)
=
>
{
if
(
!
dbg
.
isClosed
)
{
try
{
dbg
.
postMessage
(
JSON
.
stringify
(
{
type
:
"
disconnect
"
forwardingPrefix
}
)
)
;
}
catch
(
e
)
{
}
}
connection
.
cancelForwarding
(
forwardingPrefix
)
;
}
onPacket
:
packet
=
>
{
connection
.
send
(
packet
)
;
}
}
;
connection
.
setForwarding
(
forwardingPrefix
transport
)
;
resolve
(
{
workerTargetForm
:
message
.
workerTargetForm
transport
:
transport
}
)
;
}
}
;
dbg
.
addListener
(
listener
)
;
}
)
;
}
exports
.
connectToWorker
=
connectToWorker
;
