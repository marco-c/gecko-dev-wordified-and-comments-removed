"
use
strict
"
;
const
{
utils
:
Cu
interfaces
:
Ci
}
=
Components
;
this
.
EXPORTED_SYMBOLS
=
[
"
init
"
]
;
let
gLoader
;
function
setupServer
(
mm
)
{
if
(
gLoader
)
{
return
gLoader
;
}
let
{
DevToolsLoader
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
gLoader
=
new
DevToolsLoader
(
)
;
gLoader
.
invisibleToDebugger
=
true
;
let
{
DebuggerServer
}
=
gLoader
.
require
(
"
devtools
/
server
/
main
"
)
;
if
(
!
DebuggerServer
.
initialized
)
{
DebuggerServer
.
init
(
)
;
}
DebuggerServer
.
addChildActors
(
)
;
mm
.
addMessageListener
(
"
debug
:
content
-
process
-
destroy
"
function
onDestroy
(
)
{
mm
.
removeMessageListener
(
"
debug
:
content
-
process
-
destroy
"
onDestroy
)
;
DebuggerServer
.
destroy
(
)
;
gLoader
.
destroy
(
)
;
gLoader
=
null
;
}
)
;
return
gLoader
;
}
function
init
(
msg
)
{
let
mm
=
msg
.
target
;
mm
.
QueryInterface
(
Ci
.
nsISyncMessageSender
)
;
let
prefix
=
msg
.
data
.
prefix
;
let
loader
=
setupServer
(
mm
)
;
let
{
DebuggerServer
}
=
loader
.
require
(
"
devtools
/
server
/
main
"
)
;
let
conn
=
DebuggerServer
.
connectToParent
(
prefix
mm
)
;
conn
.
parentMessageManager
=
mm
;
let
{
ChildProcessActor
}
=
loader
.
require
(
"
devtools
/
server
/
actors
/
child
-
process
"
)
;
let
{
ActorPool
}
=
loader
.
require
(
"
devtools
/
server
/
main
"
)
;
let
actor
=
new
ChildProcessActor
(
conn
)
;
let
actorPool
=
new
ActorPool
(
conn
)
;
actorPool
.
addActor
(
actor
)
;
conn
.
addActorPool
(
actorPool
)
;
let
response
=
{
actor
:
actor
.
form
(
)
}
;
mm
.
sendAsyncMessage
(
"
debug
:
content
-
process
-
actor
"
response
)
;
}
