"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
Option
RetVal
}
=
protocol
;
const
{
actorBridgeWithSpec
}
=
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
const
{
Timeline
}
=
require
(
"
devtools
/
server
/
performance
/
timeline
"
)
;
const
{
timelineSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
timeline
"
)
;
const
events
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
exports
.
TimelineActor
=
protocol
.
ActorClassWithSpec
(
timelineSpec
{
initialize
:
function
(
conn
tabActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
tabActor
=
tabActor
;
this
.
bridge
=
new
Timeline
(
tabActor
)
;
this
.
_onTimelineEvent
=
this
.
_onTimelineEvent
.
bind
(
this
)
;
events
.
on
(
this
.
bridge
"
*
"
this
.
_onTimelineEvent
)
;
}
destroy
:
function
(
)
{
events
.
off
(
this
.
bridge
"
*
"
this
.
_onTimelineEvent
)
;
this
.
bridge
.
destroy
(
)
;
this
.
bridge
=
null
;
this
.
tabActor
=
null
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
_onTimelineEvent
:
function
(
eventName
.
.
.
args
)
{
events
.
emit
(
this
eventName
.
.
.
args
)
;
}
isRecording
:
actorBridgeWithSpec
(
"
isRecording
"
{
request
:
{
}
response
:
{
value
:
RetVal
(
"
boolean
"
)
}
}
)
start
:
actorBridgeWithSpec
(
"
start
"
{
request
:
{
withMarkers
:
Option
(
0
"
boolean
"
)
withTicks
:
Option
(
0
"
boolean
"
)
withMemory
:
Option
(
0
"
boolean
"
)
withFrames
:
Option
(
0
"
boolean
"
)
withGCEvents
:
Option
(
0
"
boolean
"
)
withDocLoadingEvents
:
Option
(
0
"
boolean
"
)
}
response
:
{
value
:
RetVal
(
"
number
"
)
}
}
)
stop
:
actorBridgeWithSpec
(
"
stop
"
{
response
:
{
value
:
RetVal
(
"
nullable
:
number
"
)
}
}
)
}
)
;
