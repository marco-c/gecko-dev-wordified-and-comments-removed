"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
GeckoProfileCollector
"
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
gecko
-
profile
-
collector
.
js
"
true
)
;
class
ProfilerTracingListener
{
constructor
(
{
targetActor
traceValues
traceActor
}
)
{
this
.
targetActor
=
targetActor
;
this
.
traceValues
=
traceValues
;
this
.
sourcesManager
=
targetActor
.
sourcesManager
;
this
.
traceActor
=
traceActor
;
this
.
geckoProfileCollector
=
new
GeckoProfileCollector
(
)
;
this
.
geckoProfileCollector
.
start
(
)
;
}
stop
(
)
{
return
this
.
geckoProfileCollector
.
stop
(
)
;
}
onTracingToggled
(
enabled
)
{
if
(
!
enabled
)
{
this
.
traceActor
.
stopTracing
(
)
;
}
return
false
;
}
onTracingPending
(
)
{
return
false
;
}
onTracingInfiniteLoop
(
)
{
this
.
traceActor
.
stopTracing
(
)
;
return
true
;
}
onTracingDOMMutation
(
{
depth
prefix
type
caller
element
}
)
{
return
false
;
}
onTracingFrameStep
(
{
frame
depth
prefix
}
)
{
return
false
;
}
onTracingFrame
(
{
frame
depth
formatedDisplayName
prefix
currentDOMEvent
}
)
{
const
{
script
}
=
frame
;
const
{
lineNumber
columnNumber
}
=
script
.
getOffsetMetadata
(
frame
.
offset
)
;
const
url
=
script
.
source
.
url
;
const
columnBase
=
script
.
format
=
=
=
"
wasm
"
?
0
:
1
;
const
column
=
columnNumber
-
columnBase
;
if
(
this
.
sourcesManager
.
isBlackBoxed
(
url
lineNumber
column
)
)
{
return
false
;
}
if
(
currentDOMEvent
&
&
depth
=
=
0
)
{
this
.
geckoProfileCollector
.
logDOMEvent
(
currentDOMEvent
)
;
}
this
.
geckoProfileCollector
.
onEnterFrame
(
{
name
:
formatedDisplayName
.
replace
(
"
"
"
"
)
url
lineNumber
columnNumber
category
:
frame
.
implementation
sourceId
:
script
.
source
.
id
}
)
;
return
false
;
}
onTracingFrameExit
(
{
frameId
frame
depth
formatedDisplayName
prefix
why
rv
}
)
{
const
{
script
}
=
frame
;
const
{
lineNumber
columnNumber
}
=
script
.
getOffsetMetadata
(
frame
.
offset
)
;
const
url
=
script
.
source
.
url
;
const
columnBase
=
script
.
format
=
=
=
"
wasm
"
?
0
:
1
;
const
column
=
columnNumber
-
columnBase
;
if
(
this
.
sourcesManager
.
isBlackBoxed
(
url
lineNumber
column
)
)
{
return
false
;
}
this
.
geckoProfileCollector
.
onFramePop
(
)
;
return
false
;
}
}
exports
.
ProfilerTracingListener
=
ProfilerTracingListener
;
