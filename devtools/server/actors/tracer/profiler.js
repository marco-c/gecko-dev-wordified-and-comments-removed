"
use
strict
"
;
class
ProfilerTracingListener
{
constructor
(
{
targetActor
traceActor
}
)
{
this
.
targetActor
=
targetActor
;
this
.
traceActor
=
traceActor
;
}
async
stop
(
nativeTrace
)
{
Services
.
profiler
.
Pause
(
)
;
let
profile
;
try
{
profile
=
await
Services
.
profiler
.
getProfileDataAsync
(
)
;
if
(
Object
.
keys
(
profile
)
.
length
=
=
=
0
)
{
console
.
error
(
"
An
empty
object
was
received
from
getProfileDataAsync
.
getProfileDataAsync
(
)
"
+
"
meaning
that
a
profile
could
not
successfully
be
serialized
and
captured
.
"
)
;
profile
=
null
;
}
}
catch
(
e
)
{
profile
=
null
;
console
.
error
(
There
was
an
error
fetching
a
profile
e
)
;
}
Services
.
profiler
.
StopProfiler
(
)
;
return
profile
;
}
onTracingToggled
(
enabled
)
{
if
(
!
enabled
)
{
this
.
traceActor
.
stopTracing
(
)
;
}
else
{
Services
.
profiler
.
StartProfiler
(
128
*
1024
*
1024
1
[
"
screenshots
"
"
tracing
"
]
[
"
GeckoMain
"
"
DOM
Worker
"
]
this
.
targetActor
.
sessionContext
.
browserId
0
)
;
}
return
false
;
}
onTracingPending
(
)
{
return
false
;
}
onTracingDOMMutation
(
{
depth
prefix
type
caller
element
}
)
{
let
elementDescription
=
element
.
tagName
?
.
toLowerCase
(
)
;
if
(
element
.
id
)
{
elementDescription
+
=
#
{
element
.
id
}
;
}
if
(
element
.
className
)
{
elementDescription
+
=
.
{
element
.
className
.
trim
(
)
.
replace
(
/
+
/
g
"
.
"
)
}
;
}
const
description
=
{
type
}
on
{
elementDescription
}
;
ChromeUtils
.
addProfilerMarker
(
"
DOM
-
Mutation
"
undefined
description
)
;
return
false
;
}
}
exports
.
ProfilerTracingListener
=
ProfilerTracingListener
;
