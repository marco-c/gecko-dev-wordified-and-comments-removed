"
use
strict
"
;
const
protocol
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
LongStringActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
string
.
js
"
)
;
const
{
styleSheetsSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
style
-
sheets
.
js
"
)
;
const
InspectorUtils
=
require
(
"
InspectorUtils
"
)
;
loader
.
lazyRequireGetter
(
this
"
UPDATE_GENERAL
"
"
devtools
/
server
/
actors
/
style
-
sheet
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
hasStyleSheetWatcherSupportForTarget
"
"
devtools
/
server
/
actors
/
utils
/
stylesheets
-
manager
"
true
)
;
var
StyleSheetsActor
=
protocol
.
ActorClassWithSpec
(
styleSheetsSpec
{
get
window
(
)
{
return
this
.
parentActor
.
window
;
}
get
document
(
)
{
return
this
.
window
.
document
;
}
initialize
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
targetActor
.
conn
)
;
this
.
parentActor
=
targetActor
;
this
.
_onApplicableStateChanged
=
this
.
_onApplicableStateChanged
.
bind
(
this
)
;
this
.
_onNewStyleSheetActor
=
this
.
_onNewStyleSheetActor
.
bind
(
this
)
;
this
.
_onWindowReady
=
this
.
_onWindowReady
.
bind
(
this
)
;
this
.
_transitionSheetLoaded
=
false
;
this
.
parentActor
.
on
(
"
stylesheet
-
added
"
this
.
_onNewStyleSheetActor
)
;
this
.
parentActor
.
on
(
"
window
-
ready
"
this
.
_onWindowReady
)
;
this
.
parentActor
.
chromeEventHandler
.
addEventListener
(
"
StyleSheetApplicableStateChanged
"
this
.
_onApplicableStateChanged
true
)
;
}
getTraits
(
)
{
return
{
traits
:
{
}
}
;
}
destroy
(
)
{
for
(
const
win
of
this
.
parentActor
.
windows
)
{
win
.
document
.
styleSheetChangeEventsEnabled
=
false
;
}
this
.
parentActor
.
off
(
"
stylesheet
-
added
"
this
.
_onNewStyleSheetActor
)
;
this
.
parentActor
.
off
(
"
window
-
ready
"
this
.
_onWindowReady
)
;
this
.
parentActor
.
chromeEventHandler
.
removeEventListener
(
"
StyleSheetApplicableStateChanged
"
this
.
_onApplicableStateChanged
true
)
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
_onWindowReady
(
evt
)
{
this
.
_addStyleSheets
(
evt
.
window
)
;
}
_onNewStyleSheetActor
(
actor
)
{
const
info
=
this
.
_addingStyleSheetInfo
?
.
get
(
actor
.
rawSheet
)
;
this
.
_addingStyleSheetInfo
?
.
delete
(
actor
.
rawSheet
)
;
this
.
emit
(
"
stylesheet
-
added
"
actor
info
?
info
.
isNew
:
false
info
?
info
.
fileName
:
null
)
;
}
async
getStyleSheets
(
)
{
let
actors
=
[
]
;
const
windows
=
this
.
parentActor
.
windows
;
for
(
const
win
of
windows
)
{
const
sheets
=
await
this
.
_addStyleSheets
(
win
)
;
actors
=
actors
.
concat
(
sheets
)
;
}
return
actors
;
}
_shouldListSheet
(
sheet
)
{
if
(
sheet
.
href
?
.
toLowerCase
(
)
=
=
=
"
about
:
preferencestylesheet
"
)
{
return
false
;
}
return
true
;
}
_onApplicableStateChanged
(
{
applicable
stylesheet
}
)
{
if
(
applicable
&
&
stylesheet
.
ownerNode
&
&
this
.
_shouldListSheet
(
stylesheet
)
&
&
!
this
.
_haveAncestorWithSameURL
(
stylesheet
)
)
{
this
.
parentActor
.
createStyleSheetActor
(
stylesheet
)
;
}
}
_addStyleSheets
(
win
)
{
return
async
function
(
)
{
const
doc
=
win
.
document
;
doc
.
styleSheetChangeEventsEnabled
=
true
;
const
documentOnly
=
!
doc
.
nodePrincipal
.
isSystemPrincipal
;
const
styleSheets
=
InspectorUtils
.
getAllStyleSheets
(
doc
documentOnly
)
;
let
actors
=
[
]
;
for
(
let
i
=
0
;
i
<
styleSheets
.
length
;
i
+
+
)
{
const
sheet
=
styleSheets
[
i
]
;
if
(
!
this
.
_shouldListSheet
(
sheet
)
)
{
continue
;
}
const
actor
=
this
.
parentActor
.
createStyleSheetActor
(
sheet
)
;
actors
.
push
(
actor
)
;
const
imports
=
await
this
.
_getImported
(
doc
actor
)
;
actors
=
actors
.
concat
(
imports
)
;
}
return
actors
;
}
.
bind
(
this
)
(
)
;
}
_getImported
(
doc
styleSheet
)
{
return
async
function
(
)
{
const
rules
=
await
styleSheet
.
getCSSRules
(
)
;
let
imported
=
[
]
;
for
(
let
i
=
0
;
i
<
rules
.
length
;
i
+
+
)
{
const
rule
=
rules
[
i
]
;
if
(
rule
.
type
=
=
CSSRule
.
IMPORT_RULE
)
{
const
sheet
=
rule
.
styleSheet
;
if
(
!
sheet
|
|
this
.
_haveAncestorWithSameURL
(
sheet
)
|
|
!
this
.
_shouldListSheet
(
sheet
)
)
{
continue
;
}
const
actor
=
this
.
parentActor
.
createStyleSheetActor
(
rule
.
styleSheet
)
;
imported
.
push
(
actor
)
;
const
children
=
await
this
.
_getImported
(
doc
actor
)
;
imported
=
imported
.
concat
(
children
)
;
}
else
if
(
rule
.
type
!
=
CSSRule
.
CHARSET_RULE
)
{
break
;
}
}
return
imported
;
}
.
bind
(
this
)
(
)
;
}
_haveAncestorWithSameURL
(
sheet
)
{
const
sheetHref
=
sheet
.
href
;
while
(
sheet
.
parentStyleSheet
)
{
if
(
sheet
.
parentStyleSheet
.
href
=
=
sheetHref
)
{
return
true
;
}
sheet
=
sheet
.
parentStyleSheet
;
}
return
false
;
}
async
addStyleSheet
(
text
fileName
=
null
)
{
if
(
this
.
_hasStyleSheetWatcherSupport
(
)
)
{
const
styleSheetsManager
=
this
.
_getStyleSheetsManager
(
)
;
await
styleSheetsManager
.
addStyleSheet
(
this
.
document
text
fileName
)
;
return
;
}
const
parent
=
this
.
document
.
documentElement
;
const
style
=
this
.
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
style
"
)
;
style
.
setAttribute
(
"
type
"
"
text
/
css
"
)
;
if
(
text
)
{
style
.
appendChild
(
this
.
document
.
createTextNode
(
text
)
)
;
}
parent
.
appendChild
(
style
)
;
if
(
!
this
.
_addingStyleSheetInfo
)
{
this
.
_addingStyleSheetInfo
=
new
WeakMap
(
)
;
}
this
.
_addingStyleSheetInfo
.
set
(
style
.
sheet
{
isNew
:
true
fileName
}
)
;
const
actor
=
this
.
parentActor
.
createStyleSheetActor
(
style
.
sheet
)
;
return
actor
;
}
_getStyleSheetActor
(
resourceId
)
{
return
this
.
parentActor
.
_targetScopedActorPool
.
getActorByID
(
resourceId
)
;
}
_hasStyleSheetWatcherSupport
(
)
{
return
hasStyleSheetWatcherSupportForTarget
(
this
.
parentActor
)
;
}
_getStyleSheetsManager
(
)
{
return
this
.
parentActor
.
getStyleSheetManager
(
)
;
}
toggleDisabled
(
resourceId
)
{
if
(
this
.
_hasStyleSheetWatcherSupport
(
)
)
{
const
styleSheetsManager
=
this
.
_getStyleSheetsManager
(
)
;
return
styleSheetsManager
.
toggleDisabled
(
resourceId
)
;
}
const
actor
=
this
.
_getStyleSheetActor
(
resourceId
)
;
return
actor
.
toggleDisabled
(
)
;
}
async
getText
(
resourceId
)
{
if
(
this
.
_hasStyleSheetWatcherSupport
(
)
)
{
const
styleSheetsManager
=
this
.
_getStyleSheetsManager
(
)
;
const
text
=
await
styleSheetsManager
.
getText
(
resourceId
)
;
return
new
LongStringActor
(
this
.
conn
text
|
|
"
"
)
;
}
const
actor
=
this
.
_getStyleSheetActor
(
resourceId
)
;
return
actor
.
getText
(
)
;
}
update
(
resourceId
text
transition
cause
=
"
"
)
{
if
(
this
.
_hasStyleSheetWatcherSupport
(
)
)
{
const
styleSheetsManager
=
this
.
_getStyleSheetsManager
(
)
;
return
styleSheetsManager
.
setStyleSheetText
(
resourceId
text
{
transition
kind
:
UPDATE_GENERAL
cause
}
)
;
}
const
actor
=
this
.
_getStyleSheetActor
(
resourceId
)
;
return
actor
.
update
(
text
transition
UPDATE_GENERAL
cause
)
;
}
}
)
;
exports
.
StyleSheetsActor
=
StyleSheetsActor
;
