"
use
strict
"
;
const
protocol
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
LongStringActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
string
.
js
"
)
;
const
{
styleSheetsSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
style
-
sheets
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
UPDATE_GENERAL
"
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
stylesheets
-
manager
.
js
"
true
)
;
var
StyleSheetsActor
=
protocol
.
ActorClassWithSpec
(
styleSheetsSpec
{
get
window
(
)
{
return
this
.
parentActor
.
window
;
}
get
document
(
)
{
return
this
.
window
.
document
;
}
initialize
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
targetActor
.
conn
)
;
this
.
parentActor
=
targetActor
;
}
getTraits
(
)
{
return
{
traits
:
{
}
}
;
}
destroy
(
)
{
for
(
const
win
of
this
.
parentActor
.
windows
)
{
win
.
document
.
styleSheetChangeEventsEnabled
=
false
;
}
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
async
addStyleSheet
(
text
fileName
=
null
)
{
const
styleSheetsManager
=
this
.
_getStyleSheetsManager
(
)
;
await
styleSheetsManager
.
addStyleSheet
(
this
.
document
text
fileName
)
;
}
_getStyleSheetsManager
(
)
{
return
this
.
parentActor
.
getStyleSheetManager
(
)
;
}
toggleDisabled
(
resourceId
)
{
const
styleSheetsManager
=
this
.
_getStyleSheetsManager
(
)
;
return
styleSheetsManager
.
toggleDisabled
(
resourceId
)
;
}
async
getText
(
resourceId
)
{
const
styleSheetsManager
=
this
.
_getStyleSheetsManager
(
)
;
const
text
=
await
styleSheetsManager
.
getText
(
resourceId
)
;
return
new
LongStringActor
(
this
.
conn
text
|
|
"
"
)
;
}
update
(
resourceId
text
transition
cause
=
"
"
)
{
const
styleSheetsManager
=
this
.
_getStyleSheetsManager
(
)
;
return
styleSheetsManager
.
setStyleSheetText
(
resourceId
text
{
transition
kind
:
UPDATE_GENERAL
cause
}
)
;
}
}
)
;
exports
.
StyleSheetsActor
=
StyleSheetsActor
;
