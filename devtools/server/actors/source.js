"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
sourceSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
source
.
js
"
)
;
const
{
setBreakpointAtEntryPoints
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
breakpoint
.
js
"
)
;
const
{
getSourcemapBaseURL
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
source
-
map
-
utils
.
js
"
)
;
const
{
getDebuggerSourceURL
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
source
-
url
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
ArrayBufferActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
array
-
buffer
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
LongStringActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
string
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
DevToolsUtils
"
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
windowsDrive
=
/
^
(
[
a
-
zA
-
Z
]
:
)
/
;
function
resolveSourceURL
(
sourceURL
targetActor
)
{
if
(
sourceURL
)
{
try
{
let
baseURL
;
if
(
targetActor
.
window
)
{
baseURL
=
targetActor
.
window
.
location
?
.
href
;
}
if
(
targetActor
.
workerUrl
)
{
baseURL
=
targetActor
.
workerUrl
;
}
return
new
URL
(
sourceURL
baseURL
|
|
undefined
)
.
href
;
}
catch
(
err
)
{
}
}
return
null
;
}
function
getSourceURL
(
source
targetActor
)
{
let
resourceURL
=
getDebuggerSourceURL
(
source
)
|
|
"
"
;
resourceURL
=
resourceURL
.
split
(
"
-
>
"
)
.
pop
(
)
;
resourceURL
=
resourceURL
.
replace
(
/
line
\
d
+
>
.
*
/
"
"
)
;
let
result
=
resolveSourceURL
(
source
.
displayURL
targetActor
)
;
if
(
!
result
)
{
result
=
resolveSourceURL
(
resourceURL
targetActor
)
|
|
resourceURL
;
if
(
resourceURL
&
&
resourceURL
.
match
(
windowsDrive
)
&
&
result
.
slice
(
0
2
)
=
=
resourceURL
.
slice
(
0
2
)
.
toLowerCase
(
)
)
{
result
=
resourceURL
.
slice
(
0
2
)
+
result
.
slice
(
2
)
;
}
}
return
result
|
|
null
;
}
class
SourceActor
extends
Actor
{
constructor
(
{
source
thread
}
)
{
super
(
thread
.
conn
sourceSpec
)
;
this
.
_threadActor
=
thread
;
this
.
_url
=
undefined
;
this
.
_source
=
source
;
this
.
__isInlineSource
=
undefined
;
}
get
_isInlineSource
(
)
{
const
source
=
this
.
_source
;
if
(
this
.
__isInlineSource
=
=
=
undefined
)
{
this
.
__isInlineSource
=
source
.
introductionType
=
=
=
"
inlineScript
"
&
&
!
resolveSourceURL
(
source
.
displayURL
this
.
threadActor
.
targetActor
)
&
&
!
this
.
url
.
startsWith
(
"
about
:
srcdoc
"
)
;
}
return
this
.
__isInlineSource
;
}
get
threadActor
(
)
{
return
this
.
_threadActor
;
}
get
sourcesManager
(
)
{
return
this
.
_threadActor
.
sourcesManager
;
}
get
dbg
(
)
{
return
this
.
threadActor
.
dbg
;
}
get
breakpointActorMap
(
)
{
return
this
.
threadActor
.
breakpointActorMap
;
}
get
url
(
)
{
if
(
this
.
_url
=
=
=
undefined
)
{
this
.
_url
=
getSourceURL
(
this
.
_source
this
.
threadActor
.
targetActor
)
;
}
return
this
.
_url
;
}
get
extensionName
(
)
{
if
(
this
.
_extensionName
=
=
=
undefined
)
{
this
.
_extensionName
=
null
;
if
(
!
isWorker
&
&
this
.
url
?
.
startsWith
(
"
moz
-
extension
:
"
)
)
{
try
{
const
extURI
=
Services
.
io
.
newURI
(
this
.
url
)
;
const
policy
=
WebExtensionPolicy
.
getByURI
(
extURI
)
;
if
(
policy
)
{
this
.
_extensionName
=
policy
.
name
;
}
}
catch
(
e
)
{
console
.
warn
(
Failed
to
find
extension
name
for
{
this
.
url
}
:
{
e
}
)
;
}
}
}
return
this
.
_extensionName
;
}
get
internalSourceId
(
)
{
return
this
.
_source
.
id
;
}
form
(
)
{
const
source
=
this
.
_source
;
let
introductionType
=
source
.
introductionType
;
if
(
introductionType
=
=
=
"
srcScript
"
|
|
introductionType
=
=
=
"
inlineScript
"
|
|
introductionType
=
=
=
"
injectedScript
"
)
{
introductionType
=
"
scriptElement
"
;
}
const
columnBase
=
source
.
introductionType
=
=
=
"
wasm
"
?
0
:
1
;
return
{
actor
:
this
.
actorID
extensionName
:
this
.
extensionName
url
:
this
.
url
isBlackBoxed
:
this
.
sourcesManager
.
isBlackBoxed
(
this
.
url
)
sourceMapBaseURL
:
getSourcemapBaseURL
(
this
.
url
this
.
threadActor
.
targetActor
.
window
)
sourceMapURL
:
source
.
sourceMapURL
introductionType
isInlineSource
:
this
.
_isInlineSource
sourceStartLine
:
source
.
startLine
sourceStartColumn
:
source
.
startColumn
-
columnBase
sourceLength
:
source
.
text
?
.
length
}
;
}
destroy
(
)
{
const
parent
=
this
.
getParent
(
)
;
if
(
parent
&
&
parent
.
sourceActors
)
{
delete
parent
.
sourceActors
[
this
.
actorID
]
;
}
super
.
destroy
(
)
;
}
get
_isWasm
(
)
{
return
this
.
_source
.
introductionType
=
=
=
"
wasm
"
;
}
async
_getSourceText
(
)
{
if
(
this
.
_isWasm
)
{
const
wasm
=
this
.
_source
.
binary
;
const
buffer
=
wasm
.
buffer
;
DevToolsUtils
.
assert
(
wasm
.
byteOffset
=
=
=
0
&
&
wasm
.
byteLength
=
=
=
buffer
.
byteLength
"
Typed
array
from
wasm
source
binary
must
cover
entire
buffer
"
)
;
return
{
content
:
buffer
contentType
:
"
text
/
wasm
"
}
;
}
if
(
this
.
_source
.
text
!
=
=
"
[
no
source
]
"
&
&
!
this
.
_isInlineSource
)
{
return
{
content
:
this
.
actualText
(
)
contentType
:
"
text
/
javascript
"
}
;
}
return
this
.
sourcesManager
.
urlContents
(
this
.
url
false
this
.
_isInlineSource
)
;
}
actualText
(
)
{
const
padding
=
this
.
_source
.
startLine
?
"
\
n
"
.
repeat
(
this
.
_source
.
startLine
-
1
)
:
"
"
;
return
padding
+
this
.
_source
.
text
;
}
contentMatches
(
fileContents
)
{
const
lineBreak
=
/
\
r
\
n
?
|
\
n
|
\
u2028
|
\
u2029
/
;
const
contentLines
=
fileContents
.
content
.
split
(
lineBreak
)
;
const
sourceLines
=
this
.
_source
.
text
.
split
(
lineBreak
)
;
let
line
=
this
.
_source
.
startLine
-
1
;
for
(
const
sourceLine
of
sourceLines
)
{
const
contentLine
=
contentLines
[
line
+
+
]
|
|
"
"
;
if
(
!
contentLine
.
includes
(
sourceLine
)
)
{
return
false
;
}
}
return
true
;
}
getBreakableLines
(
)
{
const
positions
=
this
.
_getBreakpointPositions
(
)
;
const
lines
=
new
Set
(
)
;
for
(
const
position
of
positions
)
{
if
(
!
lines
.
has
(
position
.
line
)
)
{
lines
.
add
(
position
.
line
)
;
}
}
return
Array
.
from
(
lines
)
;
}
_getTopLevelDebuggeeScripts
(
)
{
if
(
this
.
_scripts
)
{
return
this
.
_scripts
;
}
let
scripts
=
this
.
dbg
.
findScripts
(
{
source
:
this
.
_source
}
)
;
if
(
!
this
.
_isWasm
)
{
const
allScripts
=
new
Set
(
scripts
)
;
for
(
const
script
of
allScripts
)
{
for
(
const
child
of
script
.
getChildScripts
(
)
)
{
allScripts
.
delete
(
child
)
;
}
}
scripts
=
[
.
.
.
allScripts
]
;
}
this
.
_scripts
=
scripts
;
return
scripts
;
}
resetDebuggeeScripts
(
)
{
this
.
_scripts
=
null
;
}
_getTopLevelBreakpointPositionScripts
(
)
{
if
(
this
.
_breakpointPositionScripts
)
{
return
this
.
_breakpointPositionScripts
;
}
let
scripts
=
this
.
_getTopLevelDebuggeeScripts
(
)
;
if
(
!
this
.
_isWasm
&
&
!
scripts
.
some
(
script
=
>
!
script
.
isFunction
)
)
{
let
newScript
;
try
{
newScript
=
this
.
_source
.
reparse
(
)
;
}
catch
(
e
)
{
}
if
(
newScript
)
{
scripts
=
[
newScript
]
;
}
}
this
.
_breakpointPositionScripts
=
scripts
;
return
scripts
;
}
_findDebuggeeScripts
(
query
forBreakpointPositions
)
{
const
scripts
=
forBreakpointPositions
?
this
.
_getTopLevelBreakpointPositionScripts
(
)
:
this
.
_getTopLevelDebuggeeScripts
(
)
;
const
{
start
:
{
line
:
startLine
=
0
column
:
startColumn
=
0
}
=
{
}
end
:
{
line
:
endLine
=
Infinity
column
:
endColumn
=
Infinity
}
=
{
}
}
=
query
|
|
{
}
;
const
rv
=
[
]
;
addMatchingScripts
(
scripts
)
;
return
rv
;
function
scriptMatches
(
script
)
{
let
lineCount
;
try
{
lineCount
=
script
.
lineCount
;
}
catch
(
err
)
{
return
false
;
}
const
columnBase
=
script
.
format
=
=
=
"
wasm
"
?
0
:
1
;
if
(
script
.
startLine
>
endLine
|
|
script
.
startLine
+
lineCount
<
=
startLine
|
|
(
script
.
startLine
=
=
endLine
&
&
script
.
startColumn
-
columnBase
>
endColumn
)
)
{
return
false
;
}
if
(
lineCount
=
=
1
&
&
script
.
startLine
=
=
startLine
&
&
script
.
startColumn
-
columnBase
+
script
.
sourceLength
<
=
startColumn
)
{
return
false
;
}
return
true
;
}
function
addMatchingScripts
(
childScripts
)
{
for
(
const
script
of
childScripts
)
{
if
(
scriptMatches
(
script
)
)
{
rv
.
push
(
script
)
;
if
(
script
.
format
=
=
=
"
js
"
)
{
addMatchingScripts
(
script
.
getChildScripts
(
)
)
;
}
}
}
}
}
_getBreakpointPositions
(
query
)
{
const
scripts
=
this
.
_findDebuggeeScripts
(
query
true
)
;
const
positions
=
[
]
;
for
(
const
script
of
scripts
)
{
this
.
_addScriptBreakpointPositions
(
query
script
positions
)
;
}
return
(
positions
.
sort
(
(
a
b
)
=
>
{
const
lineDiff
=
a
.
line
-
b
.
line
;
return
lineDiff
=
=
=
0
?
a
.
column
-
b
.
column
:
lineDiff
;
}
)
)
;
}
_addScriptBreakpointPositions
(
query
script
positions
)
{
const
{
start
:
{
line
:
startLine
=
0
column
:
startColumn
=
0
}
=
{
}
end
:
{
line
:
endLine
=
Infinity
column
:
endColumn
=
Infinity
}
=
{
}
}
=
query
|
|
{
}
;
const
columnBase
=
script
.
format
=
=
=
"
wasm
"
?
0
:
1
;
const
offsets
=
script
.
getPossibleBreakpoints
(
)
;
for
(
const
{
lineNumber
columnNumber
}
of
offsets
)
{
if
(
lineNumber
<
startLine
|
|
(
lineNumber
=
=
=
startLine
&
&
columnNumber
-
columnBase
<
startColumn
)
|
|
lineNumber
>
endLine
|
|
(
lineNumber
=
=
=
endLine
&
&
columnNumber
-
columnBase
>
=
endColumn
)
)
{
continue
;
}
positions
.
push
(
{
line
:
lineNumber
column
:
columnNumber
-
columnBase
}
)
;
}
}
getBreakpointPositionsCompressed
(
query
)
{
const
items
=
this
.
_getBreakpointPositions
(
query
)
;
const
compressed
=
{
}
;
for
(
const
{
line
column
}
of
items
)
{
if
(
!
compressed
[
line
]
)
{
compressed
[
line
]
=
[
]
;
}
compressed
[
line
]
.
push
(
column
)
;
}
return
compressed
;
}
async
source
(
)
{
try
{
const
{
content
contentType
}
=
await
this
.
_getSourceText
(
)
;
if
(
typeof
content
=
=
=
"
object
"
&
&
content
&
&
content
.
constructor
&
&
content
.
constructor
.
name
=
=
=
"
ArrayBuffer
"
)
{
return
{
source
:
new
ArrayBufferActor
(
this
.
threadActor
.
conn
content
)
contentType
}
;
}
return
{
source
:
new
LongStringActor
(
this
.
threadActor
.
conn
content
)
contentType
}
;
}
catch
(
error
)
{
throw
new
Error
(
"
Could
not
load
the
source
for
"
+
this
.
url
+
"
.
\
n
"
+
DevToolsUtils
.
safeErrorString
(
error
)
)
;
}
}
blackbox
(
range
)
{
this
.
sourcesManager
.
blackBox
(
this
.
url
range
)
;
if
(
this
.
threadActor
.
state
=
=
"
paused
"
&
&
this
.
threadActor
.
youngestFrame
&
&
this
.
threadActor
.
youngestFrame
.
script
.
url
=
=
this
.
url
)
{
return
true
;
}
return
false
;
}
unblackbox
(
range
)
{
this
.
sourcesManager
.
unblackBox
(
this
.
url
range
)
;
}
setPausePoints
(
pausePoints
)
{
const
uncompressed
=
{
}
;
const
points
=
{
0
:
{
}
1
:
{
break
:
true
}
2
:
{
step
:
true
}
3
:
{
break
:
true
step
:
true
}
}
;
for
(
const
line
in
pausePoints
)
{
uncompressed
[
line
]
=
{
}
;
for
(
const
col
in
pausePoints
[
line
]
)
{
uncompressed
[
line
]
[
col
]
=
points
[
pausePoints
[
line
]
[
col
]
]
;
}
}
this
.
pausePoints
=
uncompressed
;
}
async
applyBreakpoint
(
actor
)
{
const
{
line
column
}
=
actor
.
location
;
const
entryPoints
=
[
]
;
if
(
column
=
=
=
undefined
)
{
const
query
=
{
start
:
{
line
}
end
:
{
line
}
}
;
const
scripts
=
this
.
_findDebuggeeScripts
(
query
)
.
filter
(
script
=
>
!
actor
.
hasScript
(
script
)
)
;
const
lineMatches
=
[
]
;
for
(
const
script
of
scripts
)
{
const
possibleBreakpoints
=
script
.
getPossibleBreakpoints
(
{
line
}
)
;
for
(
const
possibleBreakpoint
of
possibleBreakpoints
)
{
lineMatches
.
push
(
{
.
.
.
possibleBreakpoint
script
}
)
;
}
}
lineMatches
.
sort
(
(
a
b
)
=
>
a
.
columnNumber
-
b
.
columnNumber
)
;
if
(
lineMatches
.
length
)
{
const
firstColumn
=
lineMatches
[
0
]
.
columnNumber
;
const
firstColumnMatches
=
lineMatches
.
filter
(
m
=
>
m
.
columnNumber
=
=
=
firstColumn
)
;
for
(
const
{
script
offset
}
of
firstColumnMatches
)
{
entryPoints
.
push
(
{
script
offsets
:
[
offset
]
}
)
;
}
}
}
else
{
const
query
=
{
start
:
{
line
column
}
end
:
{
line
column
}
}
;
const
scripts
=
this
.
_findDebuggeeScripts
(
query
)
.
filter
(
script
=
>
!
actor
.
hasScript
(
script
)
)
;
for
(
const
script
of
scripts
)
{
const
columnBase
=
script
.
format
=
=
=
"
wasm
"
?
0
:
1
;
const
possibleBreakpoint
=
script
.
getPossibleBreakpoints
(
{
line
minColumn
:
column
+
columnBase
maxColumn
:
column
+
columnBase
+
1
}
)
.
pop
(
)
;
if
(
possibleBreakpoint
)
{
const
{
offset
}
=
possibleBreakpoint
;
entryPoints
.
push
(
{
script
offsets
:
[
offset
]
}
)
;
}
}
}
setBreakpointAtEntryPoints
(
actor
entryPoints
)
;
}
}
exports
.
SourceActor
=
SourceActor
;
