"
use
strict
"
;
const
{
Ci
Cu
}
=
require
(
"
chrome
"
)
;
const
{
setBreakpointAtEntryPoints
}
=
require
(
"
devtools
/
server
/
actors
/
breakpoint
"
)
;
const
{
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
assert
fetch
}
=
DevToolsUtils
;
const
{
joinURI
}
=
require
(
"
devtools
/
shared
/
path
"
)
;
const
{
sourceSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
source
"
)
;
loader
.
lazyRequireGetter
(
this
"
ArrayBufferActor
"
"
devtools
/
server
/
actors
/
array
-
buffer
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
LongStringActor
"
"
devtools
/
server
/
actors
/
string
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
Services
"
)
;
loader
.
lazyGetter
(
this
"
WebExtensionPolicy
"
(
)
=
>
Cu
.
getGlobalForObject
(
Cu
)
.
WebExtensionPolicy
)
;
function
isEvalSource
(
source
)
{
const
introType
=
source
.
introductionType
;
if
(
introType
=
=
"
scriptElement
"
&
&
source
.
introductionScript
)
{
return
true
;
}
return
(
introType
=
=
=
"
eval
"
|
|
introType
=
=
=
"
debugger
eval
"
|
|
introType
=
=
=
"
Function
"
|
|
introType
=
=
=
"
eventHandler
"
|
|
introType
=
=
=
"
setTimeout
"
|
|
introType
=
=
=
"
setInterval
"
)
;
}
exports
.
isEvalSource
=
isEvalSource
;
function
getSourceURL
(
source
window
)
{
if
(
isEvalSource
(
source
)
)
{
if
(
source
.
displayURL
&
&
source
.
introductionScript
)
{
if
(
source
.
introductionScript
.
source
.
url
=
=
=
"
debugger
eval
code
"
)
{
if
(
window
)
{
return
joinURI
(
window
.
location
.
href
source
.
displayURL
)
;
}
}
else
if
(
!
isEvalSource
(
source
.
introductionScript
.
source
)
)
{
return
joinURI
(
source
.
introductionScript
.
source
.
url
source
.
displayURL
)
;
}
}
return
source
.
displayURL
;
}
else
if
(
source
.
url
=
=
=
"
debugger
eval
code
"
)
{
return
null
;
}
return
source
.
url
;
}
exports
.
getSourceURL
=
getSourceURL
;
const
SourceActor
=
ActorClassWithSpec
(
sourceSpec
{
typeName
:
"
source
"
initialize
:
function
(
{
source
thread
isInlineSource
contentType
}
)
{
this
.
_threadActor
=
thread
;
this
.
_url
=
null
;
this
.
_source
=
source
;
this
.
_contentType
=
contentType
;
this
.
_isInlineSource
=
isInlineSource
;
this
.
source
=
this
.
source
.
bind
(
this
)
;
this
.
_getSourceText
=
this
.
_getSourceText
.
bind
(
this
)
;
this
.
_init
=
null
;
}
get
isInlineSource
(
)
{
return
this
.
_isInlineSource
;
}
get
threadActor
(
)
{
return
this
.
_threadActor
;
}
get
sources
(
)
{
return
this
.
_threadActor
.
sources
;
}
get
dbg
(
)
{
return
this
.
threadActor
.
dbg
;
}
get
breakpointActorMap
(
)
{
return
this
.
threadActor
.
breakpointActorMap
;
}
get
url
(
)
{
if
(
!
this
.
_url
)
{
this
.
_url
=
getSourceURL
(
this
.
_source
this
.
threadActor
.
_parent
.
window
)
;
}
return
this
.
_url
;
}
get
extensionName
(
)
{
if
(
this
.
_extensionName
=
=
=
undefined
)
{
this
.
_extensionName
=
null
;
if
(
!
isWorker
&
&
this
.
url
)
{
try
{
const
extURI
=
Services
.
io
.
newURI
(
this
.
url
)
;
if
(
extURI
)
{
const
policy
=
WebExtensionPolicy
.
getByURI
(
extURI
)
;
if
(
policy
)
{
this
.
_extensionName
=
policy
.
name
;
}
}
}
catch
(
e
)
{
}
}
}
return
this
.
_extensionName
;
}
get
isCacheEnabled
(
)
{
if
(
this
.
threadActor
.
_parent
.
_getCacheDisabled
)
{
return
!
this
.
threadActor
.
_parent
.
_getCacheDisabled
(
)
;
}
return
true
;
}
form
:
function
(
)
{
const
source
=
this
.
_source
;
let
introductionUrl
=
null
;
if
(
source
.
introductionScript
)
{
introductionUrl
=
source
.
introductionScript
.
source
.
url
;
}
return
{
actor
:
this
.
actorID
extensionName
:
this
.
extensionName
url
:
this
.
url
?
this
.
url
.
split
(
"
-
>
"
)
.
pop
(
)
:
null
isBlackBoxed
:
this
.
threadActor
.
sources
.
isBlackBoxed
(
this
.
url
)
sourceMapURL
:
source
?
source
.
sourceMapURL
:
null
introductionUrl
:
introductionUrl
?
introductionUrl
.
split
(
"
-
>
"
)
.
pop
(
)
:
null
introductionType
:
source
?
source
.
introductionType
:
null
}
;
}
destroy
:
function
(
)
{
if
(
this
.
registeredPool
&
&
this
.
registeredPool
.
sourceActors
)
{
delete
this
.
registeredPool
.
sourceActors
[
this
.
actorID
]
;
}
}
_findDebuggeeScripts
(
query
=
null
)
{
query
=
{
.
.
.
query
}
;
assert
(
!
(
"
url
"
in
query
)
&
&
!
(
"
source
"
in
query
)
"
Debuggee
source
and
URL
are
set
automatically
"
)
;
query
.
source
=
this
.
_source
;
return
this
.
dbg
.
findScripts
(
query
)
;
}
_reportLoadSourceError
:
function
(
error
)
{
try
{
DevToolsUtils
.
reportException
(
"
SourceActor
"
error
)
;
JSON
.
stringify
(
this
.
form
(
)
null
4
)
.
split
(
/
\
n
/
g
)
.
forEach
(
line
=
>
console
.
error
(
"
\
t
"
line
)
)
;
}
catch
(
e
)
{
}
}
_getSourceText
:
async
function
(
)
{
const
toResolvedContent
=
t
=
>
(
{
content
:
t
contentType
:
this
.
_contentType
}
)
;
const
isWasm
=
this
.
_source
.
introductionType
=
=
=
"
wasm
"
;
if
(
isWasm
)
{
const
wasm
=
this
.
_source
.
binary
;
const
buffer
=
wasm
.
buffer
;
assert
(
wasm
.
byteOffset
=
=
=
0
&
&
wasm
.
byteLength
=
=
=
buffer
.
byteLength
"
Typed
array
from
wasm
source
binary
must
cover
entire
buffer
"
)
;
return
toResolvedContent
(
buffer
)
;
}
if
(
this
.
dbg
.
replaying
)
{
assert
(
!
this
.
_contentType
)
;
return
this
.
dbg
.
replayingContent
(
this
.
url
)
;
}
if
(
this
.
_source
&
&
this
.
_source
.
text
!
=
=
"
[
no
source
]
"
&
&
this
.
_contentType
&
&
(
this
.
_contentType
.
includes
(
"
javascript
"
)
|
|
this
.
_contentType
=
=
=
"
text
/
wasm
"
)
)
{
return
toResolvedContent
(
this
.
_source
.
text
)
;
}
const
loadFromCache
=
this
.
isInlineSource
&
&
this
.
isCacheEnabled
;
const
win
=
this
.
threadActor
.
_parent
.
window
;
let
principal
cacheKey
;
if
(
!
isWorker
&
&
win
instanceof
Ci
.
nsIDOMWindow
)
{
const
docShell
=
win
.
docShell
;
const
channel
=
docShell
.
currentDocumentChannel
;
principal
=
channel
.
loadInfo
.
loadingPrincipal
;
if
(
loadFromCache
&
&
docShell
.
currentDocumentChannel
instanceof
Ci
.
nsICacheInfoChannel
)
{
cacheKey
=
docShell
.
currentDocumentChannel
.
cacheKey
;
}
}
const
sourceFetched
=
fetch
(
this
.
url
{
principal
cacheKey
loadFromCache
}
)
;
return
sourceFetched
.
then
(
result
=
>
{
this
.
_contentType
=
result
.
contentType
;
return
result
;
}
error
=
>
{
this
.
_reportLoadSourceError
(
error
)
;
throw
error
;
}
)
;
}
getBreakableLines
(
)
{
const
positions
=
this
.
getBreakpointPositions
(
)
;
const
lines
=
new
Set
(
)
;
for
(
const
position
of
positions
)
{
if
(
!
lines
.
has
(
position
.
line
)
)
{
lines
.
add
(
position
.
line
)
;
}
}
return
Array
.
from
(
lines
)
;
}
getBreakpointPositions
(
query
)
{
const
{
start
:
{
line
:
startLine
=
0
column
:
startColumn
=
0
}
=
{
}
end
:
{
line
:
endLine
=
Infinity
column
:
endColumn
=
Infinity
}
=
{
}
}
=
query
|
|
{
}
;
const
scripts
=
this
.
_findDebuggeeScripts
(
)
;
const
positions
=
[
]
;
for
(
const
script
of
scripts
)
{
if
(
script
.
startLine
>
endLine
|
|
script
.
startLine
+
script
.
lineCount
<
startLine
)
{
continue
;
}
const
offsets
=
script
.
getPossibleBreakpoints
(
)
;
for
(
const
{
lineNumber
columnNumber
}
of
offsets
)
{
if
(
lineNumber
<
startLine
|
|
(
lineNumber
=
=
=
startLine
&
&
columnNumber
<
startColumn
)
|
|
lineNumber
>
endLine
|
|
(
lineNumber
=
=
=
endLine
&
&
columnNumber
>
=
endColumn
)
)
{
continue
;
}
positions
.
push
(
{
line
:
lineNumber
column
:
columnNumber
}
)
;
}
}
return
(
positions
.
sort
(
(
a
b
)
=
>
{
const
lineDiff
=
a
.
line
-
b
.
line
;
return
lineDiff
=
=
=
0
?
a
.
column
-
b
.
column
:
lineDiff
;
}
)
)
;
}
getBreakpointPositionsCompressed
(
query
)
{
const
items
=
this
.
getBreakpointPositions
(
query
)
;
const
compressed
=
{
}
;
for
(
const
{
line
column
}
of
items
)
{
if
(
!
compressed
[
line
]
)
{
compressed
[
line
]
=
[
]
;
}
compressed
[
line
]
.
push
(
column
)
;
}
return
compressed
;
}
source
:
function
(
)
{
return
Promise
.
resolve
(
this
.
_init
)
.
then
(
this
.
_getSourceText
)
.
then
(
(
{
content
contentType
}
)
=
>
{
if
(
typeof
content
=
=
=
"
object
"
&
&
content
&
&
content
.
constructor
&
&
content
.
constructor
.
name
=
=
=
"
ArrayBuffer
"
)
{
return
{
source
:
new
ArrayBufferActor
(
this
.
threadActor
.
conn
content
)
contentType
}
;
}
return
{
source
:
new
LongStringActor
(
this
.
threadActor
.
conn
content
)
contentType
}
;
}
)
.
catch
(
error
=
>
{
reportError
(
error
"
Got
an
exception
during
SA_onSource
:
"
)
;
throw
new
Error
(
"
Could
not
load
the
source
for
"
+
this
.
url
+
"
.
\
n
"
+
DevToolsUtils
.
safeErrorString
(
error
)
)
;
}
)
;
}
blackbox
:
function
(
range
)
{
this
.
threadActor
.
sources
.
blackBox
(
this
.
url
range
)
;
if
(
this
.
threadActor
.
state
=
=
"
paused
"
&
&
this
.
threadActor
.
youngestFrame
&
&
this
.
threadActor
.
youngestFrame
.
script
.
url
=
=
this
.
url
)
{
return
true
;
}
return
false
;
}
unblackbox
:
function
(
range
)
{
this
.
threadActor
.
sources
.
unblackBox
(
this
.
url
range
)
;
}
setPausePoints
:
function
(
pausePoints
)
{
const
uncompressed
=
{
}
;
const
points
=
{
0
:
{
}
1
:
{
break
:
true
}
2
:
{
step
:
true
}
3
:
{
break
:
true
step
:
true
}
}
;
for
(
const
line
in
pausePoints
)
{
uncompressed
[
line
]
=
{
}
;
for
(
const
col
in
pausePoints
[
line
]
)
{
uncompressed
[
line
]
[
col
]
=
points
[
pausePoints
[
line
]
[
col
]
]
;
}
}
this
.
pausePoints
=
uncompressed
;
}
applyBreakpoint
:
function
(
actor
)
{
const
{
line
column
}
=
actor
.
location
;
const
entryPoints
=
[
]
;
if
(
column
=
=
=
undefined
)
{
const
scripts
=
this
.
_findDebuggeeScripts
(
{
line
}
)
.
filter
(
script
=
>
!
actor
.
hasScript
(
script
)
)
;
const
lineMatches
=
[
]
;
for
(
const
script
of
scripts
)
{
const
possibleBreakpoints
=
script
.
getPossibleBreakpoints
(
{
line
}
)
;
for
(
const
possibleBreakpoint
of
possibleBreakpoints
)
{
lineMatches
.
push
(
{
.
.
.
possibleBreakpoint
script
}
)
;
}
}
lineMatches
.
sort
(
(
a
b
)
=
>
a
.
columnNumber
-
b
.
columnNumber
)
;
if
(
lineMatches
.
length
>
0
)
{
const
firstColumn
=
lineMatches
[
0
]
.
columnNumber
;
const
firstColumnMatches
=
lineMatches
.
filter
(
m
=
>
m
.
columnNumber
=
=
=
firstColumn
)
;
for
(
const
{
script
offset
}
of
firstColumnMatches
)
{
entryPoints
.
push
(
{
script
offsets
:
[
offset
]
}
)
;
}
}
}
else
{
const
scripts
=
this
.
_findDebuggeeScripts
(
{
line
column
}
)
.
filter
(
script
=
>
!
actor
.
hasScript
(
script
)
)
;
for
(
const
script
of
scripts
)
{
const
possibleBreakpoint
=
script
.
getPossibleBreakpoints
(
{
line
minColumn
:
column
maxColumn
:
column
+
1
}
)
.
pop
(
)
;
if
(
possibleBreakpoint
)
{
const
{
offset
}
=
possibleBreakpoint
;
entryPoints
.
push
(
{
script
offsets
:
[
offset
]
}
)
;
}
}
}
setBreakpointAtEntryPoints
(
actor
entryPoints
)
;
}
}
)
;
exports
.
SourceActor
=
SourceActor
;
