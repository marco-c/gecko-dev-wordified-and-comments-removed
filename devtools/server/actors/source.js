"
use
strict
"
;
const
{
Cc
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
BreakpointActor
setBreakpointAtEntryPoints
}
=
require
(
"
devtools
/
server
/
actors
/
breakpoint
"
)
;
const
{
OriginalLocation
GeneratedLocation
}
=
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
const
{
createValueGrip
}
=
require
(
"
devtools
/
server
/
actors
/
object
/
utils
"
)
;
const
{
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
assert
fetch
}
=
DevToolsUtils
;
const
{
joinURI
}
=
require
(
"
devtools
/
shared
/
path
"
)
;
const
{
sourceSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
source
"
)
;
const
{
findClosestScriptBySource
}
=
require
(
"
devtools
/
server
/
actors
/
utils
/
closest
-
scripts
"
)
;
loader
.
lazyRequireGetter
(
this
"
mapURIToAddonID
"
"
devtools
/
server
/
actors
/
utils
/
map
-
uri
-
to
-
addon
-
id
"
)
;
loader
.
lazyRequireGetter
(
this
"
arrayBufferGrip
"
"
devtools
/
server
/
actors
/
array
-
buffer
"
true
)
;
function
isEvalSource
(
source
)
{
const
introType
=
source
.
introductionType
;
return
(
introType
=
=
=
"
eval
"
|
|
introType
=
=
=
"
debugger
eval
"
|
|
introType
=
=
=
"
Function
"
|
|
introType
=
=
=
"
eventHandler
"
|
|
introType
=
=
=
"
setTimeout
"
|
|
introType
=
=
=
"
setInterval
"
)
;
}
exports
.
isEvalSource
=
isEvalSource
;
function
getSourceURL
(
source
window
)
{
if
(
isEvalSource
(
source
)
)
{
if
(
source
.
displayURL
&
&
source
.
introductionScript
)
{
if
(
source
.
introductionScript
.
source
.
url
=
=
=
"
debugger
eval
code
"
)
{
if
(
window
)
{
return
joinURI
(
window
.
location
.
href
source
.
displayURL
)
;
}
}
else
if
(
!
isEvalSource
(
source
.
introductionScript
.
source
)
)
{
return
joinURI
(
source
.
introductionScript
.
source
.
url
source
.
displayURL
)
;
}
}
return
source
.
displayURL
;
}
else
if
(
source
.
url
=
=
=
"
debugger
eval
code
"
)
{
return
null
;
}
return
source
.
url
;
}
exports
.
getSourceURL
=
getSourceURL
;
function
resolveURIToLocalPath
(
uri
)
{
let
resolved
;
switch
(
uri
.
scheme
)
{
case
"
jar
"
:
case
"
file
"
:
return
uri
;
case
"
chrome
"
:
resolved
=
Cc
[
"
mozilla
.
org
/
chrome
/
chrome
-
registry
;
1
"
]
.
getService
(
Ci
.
nsIChromeRegistry
)
.
convertChromeURL
(
uri
)
;
return
resolveURIToLocalPath
(
resolved
)
;
case
"
resource
"
:
resolved
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
resource
"
]
.
getService
(
Ci
.
nsIResProtocolHandler
)
.
resolveURI
(
uri
)
;
uri
=
Services
.
io
.
newURI
(
resolved
)
;
return
resolveURIToLocalPath
(
uri
)
;
default
:
return
null
;
}
}
const
SourceActor
=
ActorClassWithSpec
(
sourceSpec
{
typeName
:
"
source
"
initialize
:
function
(
{
source
thread
originalUrl
generatedSource
isInlineSource
contentType
}
)
{
this
.
_threadActor
=
thread
;
this
.
_originalUrl
=
originalUrl
;
this
.
_source
=
source
;
this
.
_generatedSource
=
generatedSource
;
this
.
_contentType
=
contentType
;
this
.
_isInlineSource
=
isInlineSource
;
this
.
onSource
=
this
.
onSource
.
bind
(
this
)
;
this
.
_getSourceText
=
this
.
_getSourceText
.
bind
(
this
)
;
this
.
_mapSourceToAddon
(
)
;
this
.
_init
=
null
;
}
get
isSourceMapped
(
)
{
return
!
!
(
!
this
.
isInlineSource
&
&
(
this
.
_originalURL
|
|
this
.
_generatedSource
)
)
;
}
get
isInlineSource
(
)
{
return
this
.
_isInlineSource
;
}
get
threadActor
(
)
{
return
this
.
_threadActor
;
}
get
sources
(
)
{
return
this
.
_threadActor
.
sources
;
}
get
dbg
(
)
{
return
this
.
threadActor
.
dbg
;
}
get
source
(
)
{
return
this
.
_source
;
}
get
generatedSource
(
)
{
return
this
.
_generatedSource
;
}
get
breakpointActorMap
(
)
{
return
this
.
threadActor
.
breakpointActorMap
;
}
get
url
(
)
{
if
(
this
.
source
)
{
return
getSourceURL
(
this
.
source
this
.
threadActor
.
_parent
.
window
)
;
}
return
this
.
_originalUrl
;
}
get
addonID
(
)
{
return
this
.
_addonID
;
}
get
addonPath
(
)
{
return
this
.
_addonPath
;
}
get
isCacheEnabled
(
)
{
if
(
this
.
threadActor
.
_parent
.
_getCacheDisabled
)
{
return
!
this
.
threadActor
.
_parent
.
_getCacheDisabled
(
)
;
}
return
true
;
}
form
:
function
(
)
{
const
source
=
this
.
source
|
|
this
.
generatedSource
;
let
introductionUrl
=
null
;
if
(
source
&
&
source
.
introductionScript
)
{
introductionUrl
=
source
.
introductionScript
.
source
.
url
;
}
return
{
actor
:
this
.
actorID
generatedUrl
:
this
.
generatedSource
?
this
.
generatedSource
.
url
:
null
url
:
this
.
url
?
this
.
url
.
split
(
"
-
>
"
)
.
pop
(
)
:
null
addonID
:
this
.
_addonID
addonPath
:
this
.
_addonPath
isBlackBoxed
:
this
.
threadActor
.
sources
.
isBlackBoxed
(
this
.
url
)
isSourceMapped
:
this
.
isSourceMapped
sourceMapURL
:
source
?
source
.
sourceMapURL
:
null
introductionUrl
:
introductionUrl
?
introductionUrl
.
split
(
"
-
>
"
)
.
pop
(
)
:
null
introductionType
:
source
?
source
.
introductionType
:
null
}
;
}
destroy
:
function
(
)
{
if
(
this
.
registeredPool
&
&
this
.
registeredPool
.
sourceActors
)
{
delete
this
.
registeredPool
.
sourceActors
[
this
.
actorID
]
;
}
}
_mapSourceToAddon
:
function
(
)
{
let
nsuri
;
try
{
nsuri
=
Services
.
io
.
newURI
(
this
.
url
.
split
(
"
-
>
"
)
.
pop
(
)
)
;
}
catch
(
e
)
{
return
;
}
const
localURI
=
resolveURIToLocalPath
(
nsuri
)
;
if
(
!
localURI
)
{
return
;
}
const
id
=
mapURIToAddonID
(
localURI
)
;
if
(
!
id
)
{
return
;
}
this
.
_addonID
=
id
;
if
(
localURI
instanceof
Ci
.
nsIJARURI
)
{
this
.
_addonPath
=
localURI
.
JAREntry
;
}
else
if
(
localURI
instanceof
Ci
.
nsIFileURL
)
{
const
target
=
localURI
.
file
;
let
path
=
target
.
leafName
;
let
root
=
target
.
parent
;
let
file
=
root
.
parent
;
while
(
file
&
&
mapURIToAddonID
(
Services
.
io
.
newFileURI
(
file
)
)
)
{
path
=
root
.
leafName
+
"
/
"
+
path
;
root
=
file
;
file
=
file
.
parent
;
}
if
(
!
file
)
{
const
error
=
new
Error
(
"
Could
not
find
the
root
of
the
add
-
on
for
"
+
this
.
url
)
;
DevToolsUtils
.
reportException
(
"
SourceActor
.
prototype
.
_mapSourceToAddon
"
error
)
;
return
;
}
this
.
_addonPath
=
path
;
}
}
_reportLoadSourceError
:
function
(
error
)
{
try
{
DevToolsUtils
.
reportException
(
"
SourceActor
"
error
)
;
JSON
.
stringify
(
this
.
form
(
)
null
4
)
.
split
(
/
\
n
/
g
)
.
forEach
(
line
=
>
console
.
error
(
"
\
t
"
line
)
)
;
}
catch
(
e
)
{
}
}
_getSourceText
:
async
function
(
)
{
const
toResolvedContent
=
t
=
>
(
{
content
:
t
contentType
:
this
.
_contentType
}
)
;
const
isWasm
=
this
.
source
&
&
this
.
source
.
introductionType
=
=
=
"
wasm
"
;
if
(
isWasm
)
{
const
wasm
=
this
.
source
.
binary
;
const
buffer
=
wasm
.
buffer
;
assert
(
wasm
.
byteOffset
=
=
=
0
&
&
wasm
.
byteLength
=
=
=
buffer
.
byteLength
"
Typed
array
from
wasm
source
binary
must
cover
entire
buffer
"
)
;
return
toResolvedContent
(
buffer
)
;
}
if
(
this
.
dbg
.
replaying
)
{
assert
(
!
this
.
_contentType
)
;
return
this
.
dbg
.
replayingContent
(
this
.
url
)
;
}
if
(
this
.
source
&
&
this
.
source
.
text
!
=
=
"
[
no
source
]
"
&
&
this
.
_contentType
&
&
(
this
.
_contentType
.
includes
(
"
javascript
"
)
|
|
this
.
_contentType
=
=
=
"
text
/
wasm
"
)
)
{
return
toResolvedContent
(
this
.
source
.
text
)
;
}
const
loadFromCache
=
this
.
isInlineSource
&
&
this
.
isCacheEnabled
;
const
win
=
this
.
threadActor
.
_parent
.
window
;
let
principal
cacheKey
;
if
(
!
isWorker
&
&
win
instanceof
Ci
.
nsIDOMWindow
)
{
const
docShell
=
win
.
docShell
;
const
channel
=
docShell
.
currentDocumentChannel
;
principal
=
channel
.
loadInfo
.
loadingPrincipal
;
if
(
loadFromCache
&
&
docShell
.
currentDocumentChannel
instanceof
Ci
.
nsICacheInfoChannel
)
{
cacheKey
=
docShell
.
currentDocumentChannel
.
cacheKey
;
}
}
const
sourceFetched
=
fetch
(
this
.
url
{
principal
cacheKey
loadFromCache
}
)
;
return
sourceFetched
.
then
(
result
=
>
{
this
.
_contentType
=
result
.
contentType
;
return
result
;
}
error
=
>
{
this
.
_reportLoadSourceError
(
error
)
;
throw
error
;
}
)
;
}
getExecutableLines
:
async
function
(
)
{
const
offsetsLines
=
new
Set
(
)
;
for
(
const
s
of
this
.
dbg
.
findScripts
(
{
source
:
this
.
source
}
)
)
{
for
(
const
offset
of
s
.
getAllColumnOffsets
(
)
)
{
offsetsLines
.
add
(
offset
.
lineNumber
)
;
}
}
const
lines
=
[
.
.
.
offsetsLines
]
;
lines
.
sort
(
(
a
b
)
=
>
{
return
a
-
b
;
}
)
;
return
lines
;
}
onSource
:
function
(
)
{
return
Promise
.
resolve
(
this
.
_init
)
.
then
(
this
.
_getSourceText
)
.
then
(
(
{
content
contentType
}
)
=
>
{
if
(
typeof
content
=
=
=
"
object
"
&
&
content
&
&
content
.
constructor
&
&
content
.
constructor
.
name
=
=
=
"
ArrayBuffer
"
)
{
return
{
source
:
arrayBufferGrip
(
content
this
.
threadActor
.
threadLifetimePool
)
contentType
}
;
}
return
{
source
:
createValueGrip
(
content
this
.
threadActor
.
threadLifetimePool
this
.
threadActor
.
objectGrip
)
contentType
:
contentType
}
;
}
)
.
catch
(
error
=
>
{
reportError
(
error
"
Got
an
exception
during
SA_onSource
:
"
)
;
throw
new
Error
(
"
Could
not
load
the
source
for
"
+
this
.
url
+
"
.
\
n
"
+
DevToolsUtils
.
safeErrorString
(
error
)
)
;
}
)
;
}
blackbox
:
function
(
)
{
this
.
threadActor
.
sources
.
blackBox
(
this
.
url
)
;
if
(
this
.
threadActor
.
state
=
=
"
paused
"
&
&
this
.
threadActor
.
youngestFrame
&
&
this
.
threadActor
.
youngestFrame
.
script
.
url
=
=
this
.
url
)
{
return
true
;
}
return
false
;
}
unblackbox
:
function
(
)
{
this
.
threadActor
.
sources
.
unblackBox
(
this
.
url
)
;
}
setPausePoints
:
function
(
pausePoints
)
{
const
uncompressed
=
{
}
;
const
points
=
{
0
:
{
}
1
:
{
break
:
true
}
2
:
{
step
:
true
}
3
:
{
break
:
true
step
:
true
}
}
;
for
(
const
line
in
pausePoints
)
{
uncompressed
[
line
]
=
{
}
;
for
(
const
col
in
pausePoints
[
line
]
)
{
uncompressed
[
line
]
[
col
]
=
points
[
pausePoints
[
line
]
[
col
]
]
;
}
}
this
.
pausePoints
=
uncompressed
;
}
setBreakpoint
:
function
(
line
column
condition
noSliding
inNestedLoop
)
{
if
(
!
inNestedLoop
&
&
this
.
threadActor
.
state
!
=
=
"
paused
"
)
{
const
errorObject
=
{
error
:
"
wrongState
"
message
:
"
Cannot
set
breakpoint
while
debuggee
is
running
.
"
}
;
throw
errorObject
;
}
const
location
=
new
OriginalLocation
(
this
line
column
)
;
return
this
.
_getOrCreateBreakpointActor
(
location
condition
noSliding
)
.
then
(
(
actor
)
=
>
{
const
response
=
{
actor
:
actor
.
actorID
isPending
:
actor
.
isPending
}
;
const
actualLocation
=
actor
.
originalLocation
;
if
(
!
actualLocation
.
equals
(
location
)
)
{
response
.
actualLocation
=
actualLocation
.
toJSON
(
)
;
}
return
response
;
}
)
;
}
_getOrCreateBreakpointActor
:
function
(
originalLocation
condition
noSliding
)
{
let
actor
=
this
.
breakpointActorMap
.
getActor
(
originalLocation
)
;
if
(
!
actor
)
{
actor
=
new
BreakpointActor
(
this
.
threadActor
originalLocation
)
;
this
.
threadActor
.
threadLifetimePool
.
addActor
(
actor
)
;
this
.
breakpointActorMap
.
setActor
(
originalLocation
actor
)
;
}
actor
.
condition
=
condition
;
return
this
.
_setBreakpoint
(
actor
noSliding
)
;
}
_setBreakpoint
:
function
(
actor
noSliding
)
{
const
{
originalLocation
}
=
actor
;
const
{
originalLine
originalSourceActor
}
=
originalLocation
;
if
(
!
this
.
isSourceMapped
)
{
const
generatedLocation
=
GeneratedLocation
.
fromOriginalLocation
(
originalLocation
)
;
const
isWasm
=
this
.
source
&
&
this
.
source
.
introductionType
=
=
=
"
wasm
"
;
if
(
!
this
.
_setBreakpointAtGeneratedLocation
(
actor
generatedLocation
)
&
&
!
noSliding
&
&
!
isWasm
)
{
const
query
=
{
line
:
originalLine
}
;
if
(
this
.
source
)
{
query
.
source
=
this
.
source
;
}
else
{
query
.
url
=
this
.
url
;
}
const
scripts
=
this
.
dbg
.
findScripts
(
query
)
;
if
(
originalLocation
.
originalColumn
|
|
scripts
.
length
=
=
=
0
)
{
return
Promise
.
resolve
(
actor
)
;
}
const
largestScript
=
scripts
.
reduce
(
(
largestScr
script
)
=
>
{
if
(
script
.
lineCount
>
largestScr
.
lineCount
)
{
return
script
;
}
return
largestScr
;
}
)
;
const
maxLine
=
largestScript
.
startLine
+
largestScript
.
lineCount
-
1
;
let
actualLine
=
originalLine
;
for
(
;
actualLine
<
=
maxLine
;
actualLine
+
+
)
{
const
loc
=
new
GeneratedLocation
(
this
actualLine
)
;
if
(
this
.
_setBreakpointAtGeneratedLocation
(
actor
loc
)
)
{
break
;
}
}
if
(
actualLine
>
maxLine
)
{
return
Promise
.
reject
(
{
error
:
"
noCodeAtLineColumn
"
message
:
"
Could
not
find
any
entry
points
to
set
a
breakpoint
on
"
+
"
even
though
I
was
told
a
script
existed
on
the
line
I
started
"
+
"
the
search
with
.
"
}
)
;
}
const
actualLocation
=
new
OriginalLocation
(
originalSourceActor
actualLine
)
;
const
existingActor
=
this
.
breakpointActorMap
.
getActor
(
actualLocation
)
;
this
.
breakpointActorMap
.
deleteActor
(
originalLocation
)
;
if
(
existingActor
)
{
actor
.
delete
(
)
;
actor
=
existingActor
;
}
else
{
actor
.
originalLocation
=
actualLocation
;
this
.
breakpointActorMap
.
setActor
(
actualLocation
actor
)
;
}
}
return
Promise
.
resolve
(
actor
)
;
}
return
this
.
sources
.
getAllGeneratedLocations
(
originalLocation
)
.
then
(
(
generatedLocations
)
=
>
{
this
.
_setBreakpointAtAllGeneratedLocations
(
actor
generatedLocations
)
;
return
actor
;
}
)
;
}
_setBreakpointAtAllGeneratedLocations
:
function
(
actor
generatedLocations
)
{
let
success
=
false
;
for
(
const
generatedLocation
of
generatedLocations
)
{
if
(
this
.
_setBreakpointAtGeneratedLocation
(
actor
generatedLocation
)
)
{
success
=
true
;
}
}
return
success
;
}
_setBreakpointAtGeneratedLocation
:
function
(
actor
generatedLocation
)
{
const
{
generatedSourceActor
generatedLine
generatedColumn
generatedLastColumn
}
=
generatedLocation
;
const
query
=
{
line
:
generatedLine
}
;
if
(
generatedSourceActor
.
source
)
{
query
.
source
=
generatedSourceActor
.
source
;
}
else
{
query
.
url
=
generatedSourceActor
.
url
;
}
let
scripts
=
this
.
dbg
.
findScripts
(
query
)
;
scripts
=
scripts
.
filter
(
(
script
)
=
>
!
actor
.
hasScript
(
script
)
)
;
const
entryPoints
=
[
]
;
if
(
generatedColumn
=
=
=
undefined
)
{
for
(
const
script
of
scripts
)
{
const
offsets
=
script
.
getLineOffsets
(
generatedLine
)
;
if
(
offsets
.
length
>
0
)
{
entryPoints
.
push
(
{
script
offsets
}
)
;
}
}
}
else
{
const
columnToOffsetMaps
=
scripts
.
map
(
script
=
>
[
script
script
.
getAllColumnOffsets
(
)
.
filter
(
(
{
lineNumber
}
)
=
>
lineNumber
=
=
=
generatedLine
)
]
)
;
for
(
const
[
script
columnToOffsetMap
]
of
columnToOffsetMaps
)
{
for
(
const
{
columnNumber
:
column
offset
}
of
columnToOffsetMap
)
{
if
(
column
>
=
generatedColumn
&
&
column
<
=
generatedLastColumn
)
{
entryPoints
.
push
(
{
script
offsets
:
[
offset
]
}
)
;
}
}
}
if
(
entryPoints
.
length
=
=
=
0
)
{
const
closestScripts
=
findClosestScriptBySource
(
columnToOffsetMaps
.
map
(
pair
=
>
pair
[
0
]
)
generatedLine
generatedColumn
)
;
const
columnToOffsetLookup
=
new
Map
(
columnToOffsetMaps
)
;
for
(
const
script
of
closestScripts
)
{
const
columnToOffsetMap
=
columnToOffsetLookup
.
get
(
script
)
;
if
(
columnToOffsetMap
.
length
>
0
)
{
const
firstColumnOffset
=
columnToOffsetMap
[
0
]
;
const
lastColumnOffset
=
columnToOffsetMap
[
columnToOffsetMap
.
length
-
1
]
;
if
(
generatedColumn
<
firstColumnOffset
.
columnNumber
)
{
entryPoints
.
push
(
{
script
offsets
:
[
firstColumnOffset
.
offset
]
}
)
;
}
if
(
generatedColumn
>
lastColumnOffset
.
columnNumber
)
{
entryPoints
.
push
(
{
script
offsets
:
[
lastColumnOffset
.
offset
]
}
)
;
}
}
}
}
}
if
(
entryPoints
.
length
=
=
=
0
)
{
return
false
;
}
setBreakpointAtEntryPoints
(
actor
entryPoints
)
;
return
true
;
}
}
)
;
exports
.
SourceActor
=
SourceActor
;
