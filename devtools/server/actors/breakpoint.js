"
use
strict
"
;
const
{
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
breakpointSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
breakpoint
"
)
;
function
setBreakpointAtEntryPoints
(
actor
entryPoints
)
{
for
(
const
{
script
offsets
}
of
entryPoints
)
{
actor
.
addScript
(
script
)
;
for
(
const
offset
of
offsets
)
{
script
.
setBreakpoint
(
offset
actor
)
;
}
}
}
exports
.
setBreakpointAtEntryPoints
=
setBreakpointAtEntryPoints
;
const
BreakpointActor
=
ActorClassWithSpec
(
breakpointSpec
{
initialize
:
function
(
threadActor
generatedLocation
)
{
this
.
scripts
=
new
Set
(
)
;
this
.
threadActor
=
threadActor
;
this
.
generatedLocation
=
generatedLocation
;
this
.
condition
=
null
;
this
.
isPending
=
true
;
}
destroy
:
function
(
)
{
this
.
removeScripts
(
)
;
}
hasScript
:
function
(
script
)
{
return
this
.
scripts
.
has
(
script
)
;
}
addScript
:
function
(
script
)
{
this
.
scripts
.
add
(
script
)
;
this
.
isPending
=
false
;
}
removeScripts
:
function
(
)
{
for
(
const
script
of
this
.
scripts
)
{
script
.
clearBreakpoint
(
this
)
;
}
this
.
scripts
.
clear
(
)
;
}
checkCondition
:
function
(
frame
)
{
const
completion
=
frame
.
eval
(
this
.
condition
)
;
if
(
completion
)
{
if
(
completion
.
throw
)
{
let
message
=
"
Unknown
exception
"
;
try
{
if
(
completion
.
throw
.
getOwnPropertyDescriptor
)
{
message
=
completion
.
throw
.
getOwnPropertyDescriptor
(
"
message
"
)
.
value
;
}
else
if
(
completion
.
toString
)
{
message
=
completion
.
toString
(
)
;
}
}
catch
(
ex
)
{
}
return
{
result
:
true
message
:
message
}
;
}
else
if
(
completion
.
yield
)
{
assert
(
false
"
Shouldn
'
t
ever
get
yield
completions
from
an
eval
"
)
;
}
else
{
return
{
result
:
!
!
completion
.
return
}
;
}
}
return
{
result
:
undefined
}
;
}
hit
:
function
(
frame
)
{
const
{
generatedSourceActor
generatedLine
generatedColumn
}
=
this
.
threadActor
.
sources
.
getFrameLocation
(
frame
)
;
const
url
=
generatedSourceActor
.
url
;
if
(
this
.
threadActor
.
sources
.
isBlackBoxed
(
url
generatedLine
generatedColumn
)
|
|
this
.
threadActor
.
skipBreakpoints
|
|
frame
.
onStep
)
{
return
undefined
;
}
const
locationAtFinish
=
frame
.
onPop
&
&
frame
.
onPop
.
generatedLocation
;
if
(
locationAtFinish
&
&
locationAtFinish
.
generatedLine
=
=
=
generatedLine
&
&
locationAtFinish
.
generatedColumn
=
=
=
generatedColumn
)
{
return
undefined
;
}
const
reason
=
{
}
;
if
(
this
.
threadActor
.
_hiddenBreakpoints
.
has
(
this
.
actorID
)
)
{
reason
.
type
=
"
pauseOnDOMEvents
"
;
}
else
if
(
!
this
.
condition
)
{
reason
.
type
=
"
breakpoint
"
;
reason
.
actors
=
[
this
.
actorID
]
;
}
else
{
const
{
result
message
}
=
this
.
checkCondition
(
frame
)
;
if
(
result
)
{
if
(
!
message
)
{
reason
.
type
=
"
breakpoint
"
;
}
else
{
reason
.
type
=
"
breakpointConditionThrown
"
;
reason
.
message
=
message
;
}
reason
.
actors
=
[
this
.
actorID
]
;
}
else
{
return
undefined
;
}
}
return
this
.
threadActor
.
_pauseAndRespond
(
frame
reason
)
;
}
delete
:
function
(
)
{
if
(
this
.
generatedLocation
)
{
this
.
threadActor
.
breakpointActorMap
.
deleteActor
(
this
.
generatedLocation
)
;
}
this
.
threadActor
.
threadLifetimePool
.
removeActor
(
this
)
;
this
.
removeScripts
(
)
;
}
}
)
;
exports
.
BreakpointActor
=
BreakpointActor
;
