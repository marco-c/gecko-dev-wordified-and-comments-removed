"
use
strict
"
;
const
{
formatDisplayName
}
=
require
(
"
devtools
/
server
/
actors
/
frame
"
)
;
function
setBreakpointAtEntryPoints
(
actor
entryPoints
)
{
for
(
const
{
script
offsets
}
of
entryPoints
)
{
actor
.
addScript
(
script
offsets
)
;
}
}
exports
.
setBreakpointAtEntryPoints
=
setBreakpointAtEntryPoints
;
function
BreakpointActor
(
threadActor
location
)
{
this
.
scripts
=
new
Map
(
)
;
this
.
threadActor
=
threadActor
;
this
.
location
=
location
;
this
.
options
=
null
;
}
BreakpointActor
.
prototype
=
{
setOptions
(
options
)
{
for
(
const
[
script
offsets
]
of
this
.
scripts
)
{
this
.
_updateOptionsForScript
(
script
offsets
options
)
;
}
this
.
options
=
options
;
}
destroy
:
function
(
)
{
this
.
removeScripts
(
)
;
}
hasScript
:
function
(
script
)
{
return
this
.
scripts
.
has
(
script
)
;
}
addScript
:
function
(
script
offsets
)
{
this
.
scripts
.
set
(
script
offsets
.
concat
(
this
.
scripts
.
get
(
offsets
)
|
|
[
]
)
)
;
for
(
const
offset
of
offsets
)
{
script
.
setBreakpoint
(
offset
this
)
;
}
this
.
_updateOptionsForScript
(
script
offsets
this
.
options
)
;
}
removeScripts
:
function
(
)
{
for
(
const
[
script
]
of
this
.
scripts
)
{
script
.
clearBreakpoint
(
this
)
;
}
this
.
scripts
.
clear
(
)
;
}
_updateOptionsForScript
(
script
offsets
options
)
{
if
(
this
.
threadActor
.
dbg
.
replaying
&
&
options
.
logValue
)
{
for
(
const
offset
of
offsets
)
{
const
{
lineNumber
columnNumber
}
=
script
.
getOffsetLocation
(
offset
)
;
script
.
replayVirtualConsoleLog
(
offset
options
.
logValue
options
.
condition
(
executionPoint
rv
)
=
>
{
const
message
=
{
filename
:
script
.
url
lineNumber
columnNumber
executionPoint
arguments
:
[
"
return
"
in
rv
?
rv
.
return
:
rv
.
throw
]
logpointId
:
options
.
logGroupId
}
;
this
.
threadActor
.
_parent
.
_consoleActor
.
onConsoleAPICall
(
message
)
;
}
)
;
}
}
}
getThrownMessage
(
completion
)
{
try
{
if
(
completion
.
throw
.
getOwnPropertyDescriptor
)
{
return
completion
.
throw
.
getOwnPropertyDescriptor
(
"
message
"
)
.
value
;
}
else
if
(
completion
.
toString
)
{
return
completion
.
toString
(
)
;
}
}
catch
(
ex
)
{
}
return
"
Unknown
exception
"
;
}
checkCondition
:
function
(
frame
condition
)
{
const
completion
=
frame
.
eval
(
condition
)
;
if
(
completion
)
{
if
(
completion
.
throw
)
{
return
{
result
:
true
message
:
this
.
getThrownMessage
(
completion
)
}
;
}
else
if
(
completion
.
yield
)
{
assert
(
false
"
Shouldn
'
t
ever
get
yield
completions
from
an
eval
"
)
;
}
else
{
return
{
result
:
!
!
completion
.
return
}
;
}
}
return
{
result
:
undefined
}
;
}
hit
:
function
(
frame
)
{
const
location
=
this
.
threadActor
.
sources
.
getFrameLocation
(
frame
)
;
const
{
sourceActor
line
column
}
=
location
;
if
(
this
.
threadActor
.
sources
.
isBlackBoxed
(
sourceActor
.
url
line
column
)
|
|
this
.
threadActor
.
skipBreakpoints
|
|
frame
.
onStep
)
{
return
undefined
;
}
const
locationAtFinish
=
frame
.
onPop
&
&
frame
.
onPop
.
location
;
if
(
locationAtFinish
&
&
locationAtFinish
.
line
=
=
=
line
&
&
locationAtFinish
.
column
=
=
=
column
)
{
return
undefined
;
}
if
(
!
this
.
threadActor
.
hasMoved
(
location
"
breakpoint
"
)
)
{
return
undefined
;
}
const
reason
=
{
type
:
"
breakpoint
"
actors
:
[
this
.
actorID
]
}
;
const
{
condition
logValue
}
=
this
.
options
|
|
{
}
;
if
(
logValue
&
&
this
.
threadActor
.
dbg
.
replaying
)
{
return
undefined
;
}
if
(
condition
)
{
const
{
result
message
}
=
this
.
checkCondition
(
frame
condition
)
;
if
(
result
)
{
if
(
message
)
{
reason
.
type
=
"
breakpointConditionThrown
"
;
reason
.
message
=
message
;
}
}
else
{
return
undefined
;
}
}
if
(
logValue
)
{
const
displayName
=
formatDisplayName
(
frame
)
;
const
completion
=
frame
.
evalWithBindings
(
[
{
logValue
}
]
{
displayName
}
)
;
let
value
;
let
level
=
"
logPoint
"
;
if
(
!
completion
)
{
value
=
[
"
Log
value
evaluation
incomplete
"
]
;
}
else
if
(
"
return
"
in
completion
)
{
value
=
completion
.
return
;
}
else
{
value
=
[
"
[
Logpoint
threw
]
:
"
+
this
.
getThrownMessage
(
completion
)
]
;
level
=
"
logPointError
"
;
}
if
(
value
&
&
typeof
value
.
unsafeDereference
=
=
=
"
function
"
)
{
value
=
value
.
unsafeDereference
(
)
;
}
const
message
=
{
filename
:
sourceActor
.
url
lineNumber
:
line
columnNumber
:
column
arguments
:
value
level
}
;
this
.
threadActor
.
_parent
.
_consoleActor
.
onConsoleAPICall
(
message
)
;
return
undefined
;
}
return
this
.
threadActor
.
_pauseAndRespond
(
frame
reason
)
;
}
delete
:
function
(
)
{
this
.
threadActor
.
breakpointActorMap
.
deleteActor
(
this
.
location
)
;
this
.
threadActor
.
threadLifetimePool
.
removeActor
(
this
)
;
this
.
removeScripts
(
)
;
}
}
;
exports
.
BreakpointActor
=
BreakpointActor
;
