"
use
strict
"
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
webExtensionSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
addon
/
webextension
"
)
;
loader
.
lazyImporter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
loader
.
lazyImporter
(
this
"
ExtensionParent
"
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
)
;
const
WebExtensionActor
=
protocol
.
ActorClassWithSpec
(
webExtensionSpec
{
initialize
(
conn
addon
)
{
this
.
conn
=
conn
;
this
.
addon
=
addon
;
this
.
addonId
=
addon
.
id
;
this
.
_childFormPromise
=
null
;
AddonManager
.
addAddonListener
(
this
)
;
}
destroy
(
)
{
AddonManager
.
removeAddonListener
(
this
)
;
this
.
addon
=
null
;
this
.
_childFormPromise
=
null
;
if
(
this
.
_destroyProxy
)
{
this
.
_destroyProxy
(
)
;
delete
this
.
_destroyProxy
;
}
}
reload
(
)
{
return
this
.
addon
.
reload
(
)
.
then
(
(
)
=
>
{
return
{
}
;
}
)
;
}
form
(
)
{
const
policy
=
ExtensionParent
.
WebExtensionPolicy
.
getByID
(
this
.
addonId
)
;
return
{
actor
:
this
.
actorID
id
:
this
.
addonId
name
:
this
.
addon
.
name
url
:
this
.
addon
.
sourceURI
?
this
.
addon
.
sourceURI
.
spec
:
undefined
iconDataURL
:
this
.
_iconDataURL
iconURL
:
this
.
addon
.
iconURL
isSystem
:
this
.
addon
.
isSystem
debuggable
:
this
.
addon
.
isDebuggable
temporarilyInstalled
:
this
.
addon
.
temporarilyInstalled
type
:
this
.
addon
.
type
isWebExtension
:
this
.
addon
.
isWebExtension
isAPIExtension
:
this
.
addon
.
isAPIExtension
manifestURL
:
policy
&
&
policy
.
getURL
(
"
manifest
.
json
"
)
warnings
:
ExtensionParent
.
DebugUtils
.
getExtensionManifestWarnings
(
this
.
addonId
)
}
;
}
connect
(
)
{
if
(
this
.
_childFormPormise
)
{
return
this
.
_childFormPromise
;
}
const
proxy
=
new
WebExtensionTargetActorProxy
(
this
.
conn
this
)
;
this
.
_childFormPromise
=
proxy
.
connect
(
)
.
then
(
form
=
>
{
return
Object
.
assign
(
form
{
id
:
this
.
addon
.
id
name
:
this
.
addon
.
name
iconURL
:
this
.
addon
.
iconURL
isOOP
:
proxy
.
isOOP
}
)
;
}
)
;
this
.
_destroyProxy
=
(
)
=
>
proxy
.
destroy
(
)
;
return
this
.
_childFormPromise
;
}
async
loadIconDataURL
(
)
{
this
.
_iconDataURL
=
await
this
.
getIconDataURL
(
)
;
}
async
getIconDataURL
(
)
{
if
(
!
this
.
addon
.
iconURL
)
{
return
null
;
}
const
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
responseType
=
"
blob
"
;
xhr
.
open
(
"
GET
"
this
.
addon
.
iconURL
true
)
;
if
(
this
.
addon
.
iconURL
.
toLowerCase
(
)
.
endsWith
(
"
.
svg
"
)
)
{
xhr
.
overrideMimeType
(
"
image
/
svg
+
xml
"
)
;
}
try
{
const
blob
=
await
new
Promise
(
(
resolve
reject
)
=
>
{
xhr
.
onload
=
(
)
=
>
resolve
(
xhr
.
response
)
;
xhr
.
onerror
=
reject
;
xhr
.
send
(
)
;
}
)
;
const
reader
=
new
FileReader
(
)
;
return
await
new
Promise
(
(
resolve
reject
)
=
>
{
reader
.
onloadend
=
(
)
=
>
resolve
(
reader
.
result
)
;
reader
.
onerror
=
reject
;
reader
.
readAsDataURL
(
blob
)
;
}
)
;
}
catch
(
_
)
{
console
.
warn
(
Failed
to
create
data
url
from
[
{
this
.
addon
.
iconURL
}
]
)
;
return
null
;
}
}
onProxyDestroy
(
)
{
this
.
_childFormPromise
=
null
;
delete
this
.
_destroyProxy
;
}
onInstalled
(
addon
)
{
if
(
addon
.
id
!
=
this
.
addonId
)
{
return
;
}
this
.
addon
=
addon
;
}
onUninstalled
(
addon
)
{
if
(
addon
!
=
this
.
addon
)
{
return
;
}
this
.
destroy
(
)
;
}
}
)
;
exports
.
WebExtensionActor
=
WebExtensionActor
;
function
WebExtensionTargetActorProxy
(
connection
parentActor
)
{
this
.
_conn
=
connection
;
this
.
_parentActor
=
parentActor
;
this
.
addonId
=
parentActor
.
addonId
;
this
.
_onChildExit
=
this
.
_onChildExit
.
bind
(
this
)
;
this
.
_form
=
null
;
this
.
_browser
=
null
;
this
.
_childActorID
=
null
;
}
WebExtensionTargetActorProxy
.
prototype
=
{
async
connect
(
)
{
if
(
this
.
_browser
)
{
throw
new
Error
(
"
This
actor
is
already
connected
to
the
extension
process
"
)
;
}
const
onDestroy
=
this
.
destroy
.
bind
(
this
)
;
this
.
_browser
=
await
ExtensionParent
.
DebugUtils
.
getExtensionProcessBrowser
(
this
)
;
this
.
_form
=
await
DebuggerServer
.
connectToFrame
(
this
.
_conn
this
.
_browser
onDestroy
{
addonId
:
this
.
addonId
}
)
;
this
.
_childActorID
=
this
.
_form
.
actor
;
this
.
_mm
.
addMessageListener
(
"
debug
:
webext_child_exit
"
this
.
_onChildExit
)
;
return
this
.
_form
;
}
get
isOOP
(
)
{
return
this
.
_browser
?
this
.
_browser
.
isRemoteBrowser
:
undefined
;
}
get
_mm
(
)
{
return
this
.
_browser
&
&
(
this
.
_browser
.
messageManager
|
|
this
.
_browser
.
frameLoader
.
messageManager
)
;
}
destroy
(
)
{
if
(
this
.
_mm
)
{
this
.
_mm
.
removeMessageListener
(
"
debug
:
webext_child_exit
"
this
.
_onChildExit
)
;
this
.
_mm
.
sendAsyncMessage
(
"
debug
:
webext_parent_exit
"
{
actor
:
this
.
_childActorID
}
)
;
ExtensionParent
.
DebugUtils
.
releaseExtensionProcessBrowser
(
this
)
;
}
if
(
this
.
_parentActor
)
{
this
.
_parentActor
.
onProxyDestroy
(
)
;
}
this
.
_parentActor
=
null
;
this
.
_browser
=
null
;
this
.
_childActorID
=
null
;
this
.
_form
=
null
;
}
_onChildExit
(
msg
)
{
if
(
msg
.
json
.
actor
!
=
=
this
.
_childActorID
)
{
return
;
}
this
.
destroy
(
)
;
}
}
;
