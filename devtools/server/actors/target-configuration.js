"
use
strict
"
;
const
{
ActorClassWithSpec
Actor
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
targetConfigurationSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
target
-
configuration
"
)
;
const
{
WatchedDataHelpers
}
=
require
(
"
devtools
/
server
/
actors
/
watcher
/
WatchedDataHelpers
.
jsm
"
)
;
const
{
SUPPORTED_DATA
}
=
WatchedDataHelpers
;
const
{
TARGET_CONFIGURATION
}
=
SUPPORTED_DATA
;
const
Services
=
require
(
"
Services
"
)
;
const
SUPPORTED_OPTIONS
=
{
cacheDisabled
:
true
colorSchemeSimulation
:
true
customUserAgent
:
true
javascriptEnabled
:
true
overrideDPPX
:
true
paintFlashing
:
true
printSimulationEnabled
:
true
rdmPaneOrientation
:
true
restoreFocus
:
true
serviceWorkersTestingEnabled
:
true
touchEventsOverride
:
true
}
;
const
TargetConfigurationActor
=
ActorClassWithSpec
(
targetConfigurationSpec
{
initialize
(
watcherActor
)
{
this
.
watcherActor
=
watcherActor
;
Actor
.
prototype
.
initialize
.
call
(
this
this
.
watcherActor
.
conn
)
;
this
.
_onBrowsingContextAttached
=
this
.
_onBrowsingContextAttached
.
bind
(
this
)
;
Services
.
obs
.
addObserver
(
this
.
_onBrowsingContextAttached
"
browsing
-
context
-
attached
"
)
;
this
.
_browsingContext
=
this
.
watcherActor
.
browserElement
?
.
browsingContext
;
}
form
(
)
{
return
{
actor
:
this
.
actorID
configuration
:
this
.
_getConfiguration
(
)
traits
:
{
supportedOptions
:
SUPPORTED_OPTIONS
}
}
;
}
_onBrowsingContextAttached
(
browsingContext
)
{
if
(
browsingContext
.
parent
)
{
return
;
}
if
(
this
.
watcherActor
.
browserId
&
&
browsingContext
.
browserId
!
=
this
.
watcherActor
.
browserId
)
{
return
;
}
const
rdmEnabledInPreviousBrowsingContext
=
this
.
_browsingContext
.
inRDMPane
;
this
.
_browsingContext
=
browsingContext
;
if
(
rdmEnabledInPreviousBrowsingContext
)
{
this
.
_browsingContext
.
inRDMPane
=
true
;
}
this
.
_updateParentProcessConfiguration
(
this
.
_getConfiguration
(
)
)
;
}
_getConfiguration
(
)
{
const
targetConfigurationData
=
this
.
watcherActor
.
getWatchedData
(
TARGET_CONFIGURATION
)
;
if
(
!
targetConfigurationData
)
{
return
{
}
;
}
const
cfgMap
=
{
}
;
for
(
const
{
key
value
}
of
targetConfigurationData
)
{
cfgMap
[
key
]
=
value
;
}
return
cfgMap
;
}
async
updateConfiguration
(
configuration
)
{
const
cfgArray
=
Object
.
keys
(
configuration
)
.
filter
(
key
=
>
{
if
(
!
SUPPORTED_OPTIONS
[
key
]
)
{
console
.
warn
(
Unsupported
option
for
TargetConfiguration
:
{
key
}
)
;
return
false
;
}
return
true
;
}
)
.
map
(
key
=
>
(
{
key
value
:
configuration
[
key
]
}
)
)
;
this
.
_updateParentProcessConfiguration
(
configuration
)
;
await
this
.
watcherActor
.
addDataEntry
(
TARGET_CONFIGURATION
cfgArray
)
;
return
this
.
_getConfiguration
(
)
;
}
_updateParentProcessConfiguration
(
configuration
)
{
if
(
!
this
.
_browsingContext
)
{
return
;
}
for
(
const
[
key
value
]
of
Object
.
entries
(
configuration
)
)
{
switch
(
key
)
{
case
"
colorSchemeSimulation
"
:
this
.
_setColorSchemeSimulation
(
value
)
;
break
;
case
"
customUserAgent
"
:
this
.
_setCustomUserAgent
(
value
)
;
break
;
case
"
overrideDPPX
"
:
this
.
_setDPPXOverride
(
value
)
;
break
;
case
"
printSimulationEnabled
"
:
this
.
_setPrintSimulationEnabled
(
value
)
;
break
;
case
"
rdmPaneOrientation
"
:
this
.
_setRDMPaneOrientation
(
value
)
;
break
;
case
"
serviceWorkersTestingEnabled
"
:
this
.
_setServiceWorkersTestingEnabled
(
value
)
;
break
;
case
"
touchEventsOverride
"
:
this
.
_setTouchEventsOverride
(
value
)
;
break
;
}
}
}
_restoreParentProcessConfiguration
(
)
{
if
(
!
this
.
_browsingContext
)
{
return
;
}
this
.
_setServiceWorkersTestingEnabled
(
false
)
;
this
.
_setPrintSimulationEnabled
(
false
)
;
if
(
this
.
_resetColorSchemeSimulationOnDestroy
)
{
this
.
_setColorSchemeSimulation
(
null
)
;
}
if
(
this
.
_initialUserAgent
!
=
=
undefined
)
{
this
.
_setCustomUserAgent
(
this
.
_initialUserAgent
)
;
}
if
(
this
.
_initialDPPXOverride
!
=
=
undefined
)
{
this
.
_setDPPXOverride
(
this
.
_initialDPPXOverride
)
;
}
if
(
this
.
_initialTouchEventsOverride
!
=
=
undefined
)
{
this
.
_setTouchEventsOverride
(
this
.
_initialTouchEventsOverride
)
;
}
}
_setServiceWorkersTestingEnabled
(
enabled
)
{
if
(
this
.
_browsingContext
.
serviceWorkersTestingEnabled
!
=
enabled
)
{
this
.
_browsingContext
.
serviceWorkersTestingEnabled
=
enabled
;
}
}
_setPrintSimulationEnabled
(
enabled
)
{
const
value
=
enabled
?
"
print
"
:
"
"
;
if
(
this
.
_browsingContext
.
mediumOverride
!
=
value
)
{
this
.
_browsingContext
.
mediumOverride
=
value
;
}
}
_setColorSchemeSimulation
(
override
)
{
const
value
=
override
|
|
"
none
"
;
if
(
this
.
_browsingContext
.
prefersColorSchemeOverride
!
=
value
)
{
this
.
_browsingContext
.
prefersColorSchemeOverride
=
value
;
this
.
_resetColorSchemeSimulationOnDestroy
=
true
;
}
}
_setCustomUserAgent
(
userAgent
=
"
"
)
{
if
(
this
.
_browsingContext
.
customUserAgent
=
=
=
userAgent
)
{
return
;
}
if
(
this
.
_initialUserAgent
=
=
=
undefined
)
{
this
.
_initialUserAgent
=
this
.
_browsingContext
.
customUserAgent
;
}
this
.
_browsingContext
.
customUserAgent
=
userAgent
;
}
_setDPPXOverride
(
dppx
)
{
if
(
this
.
_browsingContext
.
overrideDPPX
=
=
=
dppx
)
{
return
;
}
if
(
!
dppx
&
&
this
.
_initialDPPXOverride
)
{
dppx
=
this
.
_initialDPPXOverride
;
}
else
if
(
dppx
!
=
=
undefined
&
&
this
.
_initialDPPXOverride
=
=
=
undefined
)
{
this
.
_initialDPPXOverride
=
this
.
_browsingContext
.
overrideDPPX
;
}
if
(
dppx
!
=
=
undefined
)
{
this
.
_browsingContext
.
overrideDPPX
=
dppx
;
}
}
_setTouchEventsOverride
(
flag
)
{
if
(
this
.
_browsingContext
.
touchEventsOverride
=
=
=
flag
)
{
return
;
}
if
(
!
flag
&
&
this
.
_initialTouchEventsOverride
)
{
flag
=
this
.
_initialTouchEventsOverride
;
}
else
if
(
flag
!
=
=
undefined
&
&
this
.
_initialTouchEventsOverride
=
=
=
undefined
)
{
this
.
_initialTouchEventsOverride
=
this
.
_browsingContext
.
touchEventsOverride
;
}
if
(
flag
!
=
=
undefined
)
{
this
.
_browsingContext
.
touchEventsOverride
=
flag
;
}
}
_setRDMPaneOrientation
(
{
type
angle
}
)
{
this
.
_browsingContext
.
setRDMPaneOrientation
(
type
angle
)
;
}
destroy
(
)
{
Services
.
obs
.
removeObserver
(
this
.
_onBrowsingContextAttached
"
browsing
-
context
-
attached
"
)
;
this
.
_restoreParentProcessConfiguration
(
)
;
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
}
)
;
exports
.
TargetConfigurationActor
=
TargetConfigurationActor
;
