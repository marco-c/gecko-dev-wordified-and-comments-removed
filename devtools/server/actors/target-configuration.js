"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
targetConfigurationSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
target
-
configuration
.
js
"
)
;
const
{
SessionDataHelpers
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
server
/
actors
/
watcher
/
SessionDataHelpers
.
sys
.
mjs
"
{
global
:
"
contextual
"
}
)
;
const
{
isBrowsingContextPartOfContext
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
server
/
actors
/
watcher
/
browsing
-
context
-
helpers
.
sys
.
mjs
"
{
global
:
"
contextual
"
}
)
;
const
{
SUPPORTED_DATA
}
=
SessionDataHelpers
;
const
{
TARGET_CONFIGURATION
}
=
SUPPORTED_DATA
;
const
SUPPORTED_OPTIONS
=
{
cacheDisabled
:
true
colorSchemeSimulation
:
true
customFormatters
:
true
customUserAgent
:
true
isTracerFeatureEnabled
:
true
javascriptEnabled
:
true
overrideDPPX
:
true
printSimulationEnabled
:
true
rdmPaneMaxTouchPoints
:
true
rdmPaneOrientation
:
true
recordAllocations
:
true
reloadOnTouchSimulationToggle
:
true
restoreFocus
:
true
serviceWorkersTestingEnabled
:
true
setTabOffline
:
true
touchEventsOverride
:
true
tracerOptions
:
true
useSimpleHighlightersForReducedMotion
:
true
}
;
class
TargetConfigurationActor
extends
Actor
{
constructor
(
watcherActor
)
{
super
(
watcherActor
.
conn
targetConfigurationSpec
)
;
this
.
watcherActor
=
watcherActor
;
this
.
_onBrowsingContextAttached
=
this
.
_onBrowsingContextAttached
.
bind
(
this
)
;
Services
.
obs
.
addObserver
(
this
.
_onBrowsingContextAttached
"
browsing
-
context
-
attached
"
)
;
this
.
_onBfCacheNavigation
=
this
.
_onBfCacheNavigation
.
bind
(
this
)
;
this
.
watcherActor
.
on
(
"
bf
-
cache
-
navigation
-
pageshow
"
this
.
_onBfCacheNavigation
)
;
this
.
_browsingContext
=
this
.
watcherActor
.
browserElement
?
.
browsingContext
;
}
#
consolePrefValue
;
form
(
)
{
return
{
actor
:
this
.
actorID
configuration
:
this
.
_getConfiguration
(
)
traits
:
{
supportedOptions
:
SUPPORTED_OPTIONS
}
}
;
}
_shouldHandleConfigurationInParentProcess
(
)
{
return
this
.
watcherActor
.
sessionContext
.
type
=
=
"
browser
-
element
"
;
}
_onBrowsingContextAttached
(
browsingContext
)
{
if
(
!
this
.
_shouldHandleConfigurationInParentProcess
(
)
)
{
return
;
}
if
(
browsingContext
.
parent
)
{
return
;
}
if
(
!
isBrowsingContextPartOfContext
(
browsingContext
this
.
watcherActor
.
sessionContext
{
acceptNoWindowGlobal
:
true
forceAcceptTopLevelTarget
:
true
}
)
)
{
return
;
}
const
rdmEnabledInPreviousBrowsingContext
=
this
.
_browsingContext
.
inRDMPane
;
if
(
this
.
_browsingContext
&
&
this
.
_browsingContext
.
browserId
=
=
=
browsingContext
.
browserId
&
&
!
this
.
_browsingContext
.
isDiscarded
)
{
this
.
_restoreParentProcessConfiguration
(
)
;
}
this
.
_browsingContext
=
browsingContext
;
if
(
rdmEnabledInPreviousBrowsingContext
)
{
this
.
_browsingContext
.
inRDMPane
=
true
;
}
this
.
_updateParentProcessConfiguration
(
this
.
_getConfiguration
(
)
)
;
}
_onBfCacheNavigation
(
{
windowGlobal
}
=
{
}
)
{
if
(
windowGlobal
)
{
this
.
_onBrowsingContextAttached
(
windowGlobal
.
browsingContext
)
;
}
}
_getConfiguration
(
)
{
const
targetConfigurationData
=
this
.
watcherActor
.
getSessionDataForType
(
TARGET_CONFIGURATION
)
;
if
(
!
targetConfigurationData
)
{
return
{
}
;
}
const
cfgMap
=
{
}
;
for
(
const
{
key
value
}
of
targetConfigurationData
)
{
cfgMap
[
key
]
=
value
;
}
return
cfgMap
;
}
async
updateConfiguration
(
configuration
)
{
const
cfgArray
=
Object
.
keys
(
configuration
)
.
filter
(
key
=
>
{
if
(
!
SUPPORTED_OPTIONS
[
key
]
)
{
console
.
warn
(
Unsupported
option
for
TargetConfiguration
:
{
key
}
)
;
return
false
;
}
return
true
;
}
)
.
map
(
key
=
>
(
{
key
value
:
configuration
[
key
]
}
)
)
;
this
.
_updateParentProcessConfiguration
(
configuration
)
;
await
this
.
watcherActor
.
addOrSetDataEntry
(
TARGET_CONFIGURATION
cfgArray
"
add
"
)
;
return
this
.
_getConfiguration
(
)
;
}
_updateParentProcessConfiguration
(
configuration
)
{
if
(
"
tracerOptions
"
in
configuration
)
{
this
.
_setTracerOptions
(
configuration
.
tracerOptions
)
;
}
if
(
!
this
.
_shouldHandleConfigurationInParentProcess
(
)
)
{
return
;
}
let
shouldReload
=
false
;
for
(
const
[
key
value
]
of
Object
.
entries
(
configuration
)
)
{
switch
(
key
)
{
case
"
colorSchemeSimulation
"
:
this
.
_setColorSchemeSimulation
(
value
)
;
break
;
case
"
customUserAgent
"
:
this
.
_setCustomUserAgent
(
value
)
;
break
;
case
"
javascriptEnabled
"
:
if
(
value
!
=
=
undefined
)
{
if
(
value
!
=
this
.
isJavascriptEnabled
(
)
)
{
shouldReload
=
true
;
}
this
.
_setJavascriptEnabled
(
value
)
;
}
break
;
case
"
overrideDPPX
"
:
this
.
_setDPPXOverride
(
value
)
;
break
;
case
"
printSimulationEnabled
"
:
this
.
_setPrintSimulationEnabled
(
value
)
;
break
;
case
"
rdmPaneMaxTouchPoints
"
:
this
.
_setRDMPaneMaxTouchPoints
(
value
)
;
break
;
case
"
rdmPaneOrientation
"
:
this
.
_setRDMPaneOrientation
(
value
)
;
break
;
case
"
serviceWorkersTestingEnabled
"
:
this
.
_setServiceWorkersTestingEnabled
(
value
)
;
break
;
case
"
touchEventsOverride
"
:
this
.
_setTouchEventsOverride
(
value
)
;
break
;
case
"
cacheDisabled
"
:
this
.
_setCacheDisabled
(
value
)
;
break
;
case
"
setTabOffline
"
:
this
.
_setTabOffline
(
value
)
;
break
;
}
}
if
(
shouldReload
)
{
this
.
_browsingContext
.
reload
(
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
)
;
}
}
_restoreParentProcessConfiguration
(
)
{
if
(
this
.
#
consolePrefValue
!
=
=
undefined
)
{
this
.
_setTracerOptions
(
)
;
}
if
(
!
this
.
_shouldHandleConfigurationInParentProcess
(
)
)
{
return
;
}
this
.
_setServiceWorkersTestingEnabled
(
false
)
;
this
.
_setPrintSimulationEnabled
(
false
)
;
this
.
_setCacheDisabled
(
false
)
;
this
.
_setTabOffline
(
false
)
;
if
(
this
.
_resetColorSchemeSimulationOnDestroy
)
{
this
.
_setColorSchemeSimulation
(
null
)
;
}
if
(
this
.
_initialUserAgent
!
=
=
undefined
)
{
this
.
_setCustomUserAgent
(
this
.
_initialUserAgent
)
;
}
if
(
this
.
_initialDPPXOverride
!
=
=
undefined
)
{
this
.
_setDPPXOverride
(
this
.
_initialDPPXOverride
)
;
}
if
(
this
.
_initialJavascriptEnabled
!
=
=
undefined
)
{
this
.
_setJavascriptEnabled
(
this
.
_initialJavascriptEnabled
)
;
}
if
(
this
.
_initialTouchEventsOverride
!
=
=
undefined
)
{
this
.
_setTouchEventsOverride
(
this
.
_initialTouchEventsOverride
)
;
}
}
_setServiceWorkersTestingEnabled
(
enabled
)
{
if
(
this
.
_browsingContext
.
serviceWorkersTestingEnabled
!
=
enabled
)
{
this
.
_browsingContext
.
serviceWorkersTestingEnabled
=
enabled
;
}
}
_setPrintSimulationEnabled
(
enabled
)
{
const
value
=
enabled
?
"
print
"
:
"
"
;
if
(
this
.
_browsingContext
.
mediumOverride
!
=
value
)
{
this
.
_browsingContext
.
mediumOverride
=
value
;
}
}
_setColorSchemeSimulation
(
override
)
{
const
value
=
override
|
|
"
none
"
;
if
(
this
.
_browsingContext
.
prefersColorSchemeOverride
!
=
value
)
{
this
.
_browsingContext
.
prefersColorSchemeOverride
=
value
;
this
.
_resetColorSchemeSimulationOnDestroy
=
true
;
}
}
_setCustomUserAgent
(
userAgent
=
"
"
)
{
if
(
this
.
_browsingContext
.
customUserAgent
=
=
=
userAgent
)
{
return
;
}
if
(
this
.
_initialUserAgent
=
=
=
undefined
)
{
this
.
_initialUserAgent
=
this
.
_browsingContext
.
customUserAgent
;
}
this
.
_browsingContext
.
customUserAgent
=
userAgent
;
}
isJavascriptEnabled
(
)
{
return
this
.
_browsingContext
.
allowJavascript
;
}
_setJavascriptEnabled
(
allow
)
{
if
(
this
.
_initialJavascriptEnabled
=
=
=
undefined
)
{
this
.
_initialJavascriptEnabled
=
this
.
_browsingContext
.
allowJavascript
;
}
if
(
allow
!
=
=
undefined
)
{
this
.
_browsingContext
.
allowJavascript
=
allow
;
}
}
_setDPPXOverride
(
dppx
)
{
if
(
this
.
_browsingContext
.
overrideDPPX
=
=
=
dppx
)
{
return
;
}
if
(
!
dppx
&
&
this
.
_initialDPPXOverride
)
{
dppx
=
this
.
_initialDPPXOverride
;
}
else
if
(
dppx
!
=
=
undefined
&
&
this
.
_initialDPPXOverride
=
=
=
undefined
)
{
this
.
_initialDPPXOverride
=
this
.
_browsingContext
.
overrideDPPX
;
}
if
(
dppx
!
=
=
undefined
)
{
this
.
_browsingContext
.
overrideDPPX
=
dppx
;
}
}
_setTouchEventsOverride
(
flag
)
{
if
(
this
.
_browsingContext
.
touchEventsOverride
=
=
=
flag
)
{
return
;
}
if
(
!
flag
&
&
this
.
_initialTouchEventsOverride
)
{
flag
=
this
.
_initialTouchEventsOverride
;
}
else
if
(
flag
!
=
=
undefined
&
&
this
.
_initialTouchEventsOverride
=
=
=
undefined
)
{
this
.
_initialTouchEventsOverride
=
this
.
_browsingContext
.
touchEventsOverride
;
}
if
(
flag
!
=
=
undefined
)
{
this
.
_browsingContext
.
touchEventsOverride
=
flag
;
}
}
_setRDMPaneMaxTouchPoints
(
maxTouchPoints
)
{
this
.
_browsingContext
.
setRDMPaneMaxTouchPoints
(
maxTouchPoints
)
;
}
_setRDMPaneOrientation
(
{
type
angle
}
)
{
this
.
_browsingContext
.
setRDMPaneOrientation
(
type
angle
)
;
}
_setCacheDisabled
(
disabled
)
{
const
value
=
disabled
?
Ci
.
nsIRequest
.
LOAD_BYPASS_CACHE
:
Ci
.
nsIRequest
.
LOAD_NORMAL
;
if
(
this
.
_browsingContext
.
defaultLoadFlags
!
=
value
)
{
this
.
_browsingContext
.
defaultLoadFlags
=
value
;
}
}
_setTabOffline
(
offline
)
{
if
(
!
this
.
_browsingContext
.
isDiscarded
)
{
this
.
_browsingContext
.
forceOffline
=
offline
;
}
}
destroy
(
)
{
Services
.
obs
.
removeObserver
(
this
.
_onBrowsingContextAttached
"
browsing
-
context
-
attached
"
)
;
this
.
watcherActor
.
off
(
"
bf
-
cache
-
navigation
-
pageshow
"
this
.
_onBfCacheNavigation
)
;
if
(
this
.
_browsingContext
&
&
!
this
.
_browsingContext
.
isDiscarded
)
{
this
.
_restoreParentProcessConfiguration
(
)
;
}
super
.
destroy
(
)
;
}
_setTracerOptions
(
options
)
{
if
(
!
options
)
{
if
(
this
.
#
consolePrefValue
=
=
=
-
1
)
{
Services
.
prefs
.
clearUserPref
(
"
logging
.
console
"
)
;
}
else
{
Services
.
prefs
.
setIntPref
(
"
logging
.
console
"
this
.
#
consolePrefValue
)
;
}
this
.
#
consolePrefValue
=
undefined
;
return
;
}
const
LOG_DISABLED
=
-
1
;
const
LOG_VERBOSE
=
5
;
this
.
#
consolePrefValue
=
Services
.
prefs
.
getIntPref
(
"
logging
.
console
"
LOG_DISABLED
)
;
Services
.
prefs
.
setIntPref
(
"
logging
.
console
"
LOG_VERBOSE
)
;
}
}
exports
.
TargetConfigurationActor
=
TargetConfigurationActor
;
