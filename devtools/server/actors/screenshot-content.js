"
use
strict
"
;
const
{
Actor
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
screenshotContentSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
screenshot
-
content
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
STRINGS_URI
=
"
devtools
/
shared
/
locales
/
screenshot
.
properties
"
;
const
L10N
=
new
LocalizationHelper
(
STRINGS_URI
)
;
loader
.
lazyRequireGetter
(
this
[
"
getCurrentZoom
"
"
getRect
"
]
"
devtools
/
shared
/
layout
/
utils
"
true
)
;
exports
.
ScreenshotContentActor
=
ActorClassWithSpec
(
screenshotContentSpec
{
initialize
(
conn
targetActor
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
targetActor
=
targetActor
;
}
_getRectForNode
(
node
)
{
const
originWindow
=
this
.
targetActor
.
ignoreSubFrames
?
node
.
ownerGlobal
:
node
.
ownerGlobal
.
top
;
return
getRect
(
originWindow
node
node
.
ownerGlobal
)
;
}
prepareCapture
(
{
fullpage
selector
nodeActorID
}
)
{
const
{
window
}
=
this
.
targetActor
;
const
windowDpr
=
window
.
browsingContext
.
top
.
overrideDPPX
|
|
window
.
devicePixelRatio
;
const
windowZoom
=
getCurrentZoom
(
window
)
;
const
messages
=
[
]
;
if
(
!
fullpage
&
&
!
selector
&
&
!
nodeActorID
)
{
return
{
rect
:
null
messages
windowDpr
windowZoom
}
;
}
let
left
;
let
top
;
let
width
;
let
height
;
if
(
fullpage
)
{
const
winUtils
=
window
.
windowUtils
;
const
scrollbarHeight
=
{
}
;
const
scrollbarWidth
=
{
}
;
winUtils
.
getScrollbarSize
(
false
scrollbarWidth
scrollbarHeight
)
;
left
=
0
;
top
=
0
;
width
=
window
.
innerWidth
+
window
.
scrollMaxX
-
window
.
scrollMinX
-
scrollbarWidth
.
value
;
height
=
window
.
innerHeight
+
window
.
scrollMaxY
-
window
.
scrollMinY
-
scrollbarHeight
.
value
;
}
else
if
(
selector
)
{
const
node
=
window
.
document
.
querySelector
(
selector
)
;
if
(
!
node
)
{
messages
.
push
(
{
level
:
"
warn
"
text
:
L10N
.
getFormatStr
(
"
screenshotNoSelectorMatchWarning
"
selector
)
}
)
;
return
{
error
:
true
messages
}
;
}
(
{
left
top
width
height
}
=
this
.
_getRectForNode
(
node
)
)
;
}
else
if
(
nodeActorID
)
{
const
nodeActor
=
this
.
conn
.
getActor
(
nodeActorID
)
;
if
(
!
nodeActor
)
{
messages
.
push
(
{
level
:
"
error
"
text
:
Screenshot
actor
failed
to
find
Node
actor
for
'
{
nodeActorID
}
'
}
)
;
return
{
error
:
true
messages
}
;
}
(
{
left
top
width
height
}
=
this
.
_getRectForNode
(
nodeActor
.
rawNode
)
)
;
}
return
{
windowDpr
windowZoom
rect
:
{
left
top
width
height
}
messages
}
;
}
}
)
;
