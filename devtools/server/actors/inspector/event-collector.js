"
use
strict
"
;
const
{
isAfterPseudoElement
isBeforePseudoElement
isMarkerPseudoElement
isNativeAnonymous
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
layout
/
utils
.
js
"
)
;
const
Debugger
=
require
(
"
Debugger
"
)
;
const
{
EXCLUDED_LISTENER
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
inspector
/
constants
.
js
"
)
;
const
JQUERY_LIVE_REGEX
=
/
return
typeof
\
w
+
.
*
.
event
\
.
triggered
[
\
s
\
S
]
*
\
.
event
\
.
(
dispatch
|
handle
)
.
*
arguments
/
;
const
REACT_EVENT_NAMES
=
[
"
onAbort
"
"
onAnimationEnd
"
"
onAnimationIteration
"
"
onAnimationStart
"
"
onAuxClick
"
"
onBeforeInput
"
"
onBlur
"
"
onCanPlay
"
"
onCanPlayThrough
"
"
onCancel
"
"
onChange
"
"
onClick
"
"
onClose
"
"
onCompositionEnd
"
"
onCompositionStart
"
"
onCompositionUpdate
"
"
onContextMenu
"
"
onCopy
"
"
onCut
"
"
onDoubleClick
"
"
onDrag
"
"
onDragEnd
"
"
onDragEnter
"
"
onDragExit
"
"
onDragLeave
"
"
onDragOver
"
"
onDragStart
"
"
onDrop
"
"
onDurationChange
"
"
onEmptied
"
"
onEncrypted
"
"
onEnded
"
"
onError
"
"
onFocus
"
"
onGotPointerCapture
"
"
onInput
"
"
onInvalid
"
"
onKeyDown
"
"
onKeyPress
"
"
onKeyUp
"
"
onLoad
"
"
onLoadStart
"
"
onLoadedData
"
"
onLoadedMetadata
"
"
onLostPointerCapture
"
"
onMouseDown
"
"
onMouseEnter
"
"
onMouseLeave
"
"
onMouseMove
"
"
onMouseOut
"
"
onMouseOver
"
"
onMouseUp
"
"
onPaste
"
"
onPause
"
"
onPlay
"
"
onPlaying
"
"
onPointerCancel
"
"
onPointerDown
"
"
onPointerEnter
"
"
onPointerLeave
"
"
onPointerMove
"
"
onPointerOut
"
"
onPointerOver
"
"
onPointerUp
"
"
onProgress
"
"
onRateChange
"
"
onReset
"
"
onScroll
"
"
onSeeked
"
"
onSeeking
"
"
onSelect
"
"
onStalled
"
"
onSubmit
"
"
onSuspend
"
"
onTimeUpdate
"
"
onToggle
"
"
onTouchCancel
"
"
onTouchEnd
"
"
onTouchMove
"
"
onTouchStart
"
"
onTransitionEnd
"
"
onVolumeChange
"
"
onWaiting
"
"
onWheel
"
"
onAbortCapture
"
"
onAnimationEndCapture
"
"
onAnimationIterationCapture
"
"
onAnimationStartCapture
"
"
onAuxClickCapture
"
"
onBeforeInputCapture
"
"
onBlurCapture
"
"
onCanPlayCapture
"
"
onCanPlayThroughCapture
"
"
onCancelCapture
"
"
onChangeCapture
"
"
onClickCapture
"
"
onCloseCapture
"
"
onCompositionEndCapture
"
"
onCompositionStartCapture
"
"
onCompositionUpdateCapture
"
"
onContextMenuCapture
"
"
onCopyCapture
"
"
onCutCapture
"
"
onDoubleClickCapture
"
"
onDragCapture
"
"
onDragEndCapture
"
"
onDragEnterCapture
"
"
onDragExitCapture
"
"
onDragLeaveCapture
"
"
onDragOverCapture
"
"
onDragStartCapture
"
"
onDropCapture
"
"
onDurationChangeCapture
"
"
onEmptiedCapture
"
"
onEncryptedCapture
"
"
onEndedCapture
"
"
onErrorCapture
"
"
onFocusCapture
"
"
onGotPointerCaptureCapture
"
"
onInputCapture
"
"
onInvalidCapture
"
"
onKeyDownCapture
"
"
onKeyPressCapture
"
"
onKeyUpCapture
"
"
onLoadCapture
"
"
onLoadStartCapture
"
"
onLoadedDataCapture
"
"
onLoadedMetadataCapture
"
"
onLostPointerCaptureCapture
"
"
onMouseDownCapture
"
"
onMouseEnterCapture
"
"
onMouseLeaveCapture
"
"
onMouseMoveCapture
"
"
onMouseOutCapture
"
"
onMouseOverCapture
"
"
onMouseUpCapture
"
"
onPasteCapture
"
"
onPauseCapture
"
"
onPlayCapture
"
"
onPlayingCapture
"
"
onPointerCancelCapture
"
"
onPointerDownCapture
"
"
onPointerEnterCapture
"
"
onPointerLeaveCapture
"
"
onPointerMoveCapture
"
"
onPointerOutCapture
"
"
onPointerOverCapture
"
"
onPointerUpCapture
"
"
onProgressCapture
"
"
onRateChangeCapture
"
"
onResetCapture
"
"
onScrollCapture
"
"
onSeekedCapture
"
"
onSeekingCapture
"
"
onSelectCapture
"
"
onStalledCapture
"
"
onSubmitCapture
"
"
onSuspendCapture
"
"
onTimeUpdateCapture
"
"
onToggleCapture
"
"
onTouchCancelCapture
"
"
onTouchEndCapture
"
"
onTouchMoveCapture
"
"
onTouchStartCapture
"
"
onTransitionEndCapture
"
"
onVolumeChangeCapture
"
"
onWaitingCapture
"
"
onWheelCapture
"
]
;
class
MainEventCollector
{
get
chromeEnabled
(
)
{
if
(
typeof
this
.
_chromeEnabled
=
=
=
"
undefined
"
)
{
this
.
_chromeEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
chrome
.
enabled
"
)
;
}
return
this
.
_chromeEnabled
;
}
hasListeners
(
node
)
{
return
this
.
getListeners
(
node
{
checkOnly
:
true
}
)
;
}
getListeners
(
_node
{
checkOnly
:
_checkOnly
}
)
{
throw
new
Error
(
"
You
have
to
implement
the
method
getListeners
(
)
!
"
)
;
}
getDOMListeners
(
node
)
{
const
listeners
=
[
]
;
const
listenersTargets
=
[
]
;
if
(
typeof
node
.
nodeName
!
=
=
"
undefined
"
&
&
node
.
nodeName
.
toLowerCase
(
)
=
=
=
"
html
"
)
{
listenersTargets
.
push
(
node
.
ownerGlobal
node
node
.
parentNode
)
;
}
else
{
listenersTargets
.
push
(
node
)
;
}
for
(
const
el
of
listenersTargets
)
{
const
elListeners
=
Services
.
els
.
getListenerInfoFor
(
el
)
;
if
(
!
elListeners
)
{
continue
;
}
for
(
const
listener
of
elListeners
)
{
const
obj
=
this
.
unwrap
(
listener
.
listenerObject
)
;
if
(
!
obj
|
|
!
obj
[
EXCLUDED_LISTENER
]
)
{
listeners
.
push
(
listener
)
;
}
}
}
return
listeners
;
}
getJQuery
(
node
)
{
if
(
Cu
.
isDeadWrapper
(
node
)
)
{
return
null
;
}
const
global
=
this
.
unwrap
(
node
.
ownerGlobal
)
;
if
(
!
global
)
{
return
null
;
}
const
hasJQuery
=
global
.
jQuery
?
.
fn
?
.
jquery
;
if
(
hasJQuery
)
{
return
global
.
jQuery
;
}
return
null
;
}
unwrap
(
obj
)
{
return
Cu
.
isXrayWrapper
(
obj
)
?
obj
.
wrappedJSObject
:
obj
;
}
isChromeHandler
(
handler
)
{
try
{
const
handlerPrincipal
=
Cu
.
getObjectPrincipal
(
handler
)
;
return
(
handlerPrincipal
.
isSystemPrincipal
|
|
handlerPrincipal
.
isExpandedPrincipal
)
;
}
catch
(
e
)
{
return
false
;
}
}
}
class
DOMEventCollector
extends
MainEventCollector
{
getListeners
(
node
{
checkOnly
}
=
{
}
)
{
const
handlers
=
[
]
;
const
listeners
=
this
.
getDOMListeners
(
node
)
;
for
(
const
listener
of
listeners
)
{
if
(
!
listener
.
type
)
{
continue
;
}
const
obj
=
listener
.
listenerObject
;
if
(
!
obj
)
{
continue
;
}
let
handler
=
null
;
if
(
typeof
obj
=
=
=
"
object
"
)
{
const
unwrapped
=
this
.
unwrap
(
obj
)
;
if
(
typeof
unwrapped
.
handleEvent
=
=
=
"
function
"
)
{
handler
=
Cu
.
unwaiveXrays
(
unwrapped
.
handleEvent
)
;
}
}
else
if
(
typeof
obj
=
=
=
"
function
"
)
{
if
(
JQUERY_LIVE_REGEX
.
test
(
obj
.
toString
(
)
)
)
{
continue
;
}
handler
=
obj
;
}
if
(
!
handler
)
{
continue
;
}
if
(
!
this
.
chromeEnabled
&
&
this
.
isChromeHandler
(
handler
)
)
{
continue
;
}
if
(
checkOnly
)
{
return
true
;
}
const
eventInfo
=
{
nsIEventListenerInfo
:
listener
capturing
:
listener
.
capturing
type
:
listener
.
type
handler
enabled
:
listener
.
enabled
}
;
handlers
.
push
(
eventInfo
)
;
}
if
(
checkOnly
)
{
return
false
;
}
return
handlers
;
}
}
class
JQueryEventCollector
extends
MainEventCollector
{
getListeners
(
node
{
checkOnly
}
=
{
}
)
{
const
jQuery
=
this
.
getJQuery
(
node
)
;
const
handlers
=
[
]
;
if
(
!
jQuery
|
|
isNativeAnonymous
(
node
)
|
|
isMarkerPseudoElement
(
node
)
|
|
isBeforePseudoElement
(
node
)
|
|
isAfterPseudoElement
(
node
)
)
{
if
(
checkOnly
)
{
return
false
;
}
return
handlers
;
}
let
eventsObj
=
null
;
const
data
=
jQuery
.
_data
|
|
jQuery
.
data
;
if
(
data
)
{
try
{
eventsObj
=
data
(
node
"
events
"
)
;
}
catch
(
e
)
{
}
}
else
{
let
entry
;
try
{
entry
=
entry
=
jQuery
(
node
)
[
0
]
;
}
catch
(
e
)
{
}
if
(
!
entry
|
|
!
entry
.
events
)
{
if
(
checkOnly
)
{
return
false
;
}
return
handlers
;
}
eventsObj
=
entry
.
events
;
}
if
(
eventsObj
)
{
for
(
const
type
in
eventsObj
)
{
let
events
=
eventsObj
[
type
]
;
if
(
!
Array
.
isArray
(
events
)
)
{
events
=
Object
.
values
(
events
)
;
}
for
(
const
event
of
events
)
{
if
(
node
.
nodeType
=
=
node
.
DOCUMENT_NODE
&
&
event
.
selector
)
{
continue
;
}
if
(
typeof
event
=
=
=
"
function
"
|
|
typeof
event
=
=
=
"
object
"
)
{
const
handler
=
event
.
handler
|
|
event
;
if
(
!
this
.
chromeEnabled
&
&
this
.
isChromeHandler
(
handler
)
)
{
continue
;
}
if
(
checkOnly
)
{
return
true
;
}
const
eventInfo
=
{
type
handler
tags
:
"
jQuery
"
hide
:
{
capturing
:
true
}
}
;
handlers
.
push
(
eventInfo
)
;
}
}
}
}
if
(
checkOnly
)
{
return
false
;
}
return
handlers
;
}
}
class
JQueryLiveEventCollector
extends
MainEventCollector
{
getListeners
(
node
{
checkOnly
}
=
{
}
)
{
const
jQuery
=
this
.
getJQuery
(
node
)
;
const
handlers
=
[
]
;
if
(
!
jQuery
)
{
if
(
checkOnly
)
{
return
false
;
}
return
handlers
;
}
const
jqueryData
=
jQuery
.
_data
|
|
jQuery
.
data
;
if
(
jqueryData
)
{
const
win
=
this
.
unwrap
(
node
.
ownerGlobal
)
;
let
events
=
null
;
try
{
events
=
jqueryData
(
win
.
document
"
events
"
)
;
}
catch
(
e
)
{
}
if
(
events
&
&
node
.
ownerDocument
&
&
node
.
matches
)
{
for
(
const
eventName
in
events
)
{
const
eventHolder
=
events
[
eventName
]
;
for
(
const
idx
in
eventHolder
)
{
if
(
typeof
idx
!
=
=
"
string
"
|
|
isNaN
(
parseInt
(
idx
10
)
)
)
{
continue
;
}
const
event
=
eventHolder
[
idx
]
;
let
{
selector
data
}
=
event
;
if
(
!
selector
&
&
data
)
{
selector
=
data
.
selector
|
|
data
;
}
if
(
!
selector
)
{
continue
;
}
let
matches
;
try
{
matches
=
node
.
matches
(
selector
)
;
}
catch
(
e
)
{
}
if
(
!
matches
)
{
continue
;
}
if
(
typeof
event
=
=
=
"
function
"
|
|
typeof
event
=
=
=
"
object
"
)
{
const
handler
=
event
.
handler
|
|
event
;
if
(
!
this
.
chromeEnabled
&
&
this
.
isChromeHandler
(
handler
)
)
{
continue
;
}
if
(
checkOnly
)
{
return
true
;
}
const
eventInfo
=
{
type
:
event
.
origType
|
|
event
.
type
.
substr
(
selector
.
length
+
1
)
handler
tags
:
"
jQuery
Live
"
hide
:
{
capturing
:
true
}
}
;
if
(
!
eventInfo
.
type
&
&
data
?
.
live
)
{
eventInfo
.
type
=
event
.
data
.
live
;
}
handlers
.
push
(
eventInfo
)
;
}
}
}
}
}
if
(
checkOnly
)
{
return
false
;
}
return
handlers
;
}
normalizeListener
(
handlerDO
)
{
function
isFunctionInProxy
(
funcDO
)
{
const
displayName
=
funcDO
.
displayName
;
if
(
displayName
&
&
displayName
.
startsWith
(
"
proxy
/
"
)
)
{
return
true
;
}
const
calleeDS
=
funcDO
.
environment
?
.
calleeScript
;
if
(
!
calleeDS
)
{
return
false
;
}
const
calleeName
=
calleeDS
.
displayName
;
return
calleeName
=
=
"
proxy
"
;
}
function
getFirstFunctionVariable
(
funcDO
)
{
const
names
=
funcDO
.
environment
?
funcDO
.
environment
.
names
(
)
:
[
]
;
for
(
const
varName
of
names
)
{
const
varDO
=
handlerDO
.
environment
?
handlerDO
.
environment
.
getVariable
(
varName
)
:
null
;
if
(
!
varDO
)
{
continue
;
}
if
(
varDO
.
class
=
=
"
Function
"
)
{
return
varDO
;
}
}
return
null
;
}
if
(
!
isFunctionInProxy
(
handlerDO
)
)
{
return
handlerDO
;
}
const
MAX_NESTED_HANDLER_COUNT
=
2
;
for
(
let
i
=
0
;
i
<
MAX_NESTED_HANDLER_COUNT
;
i
+
+
)
{
const
funcDO
=
getFirstFunctionVariable
(
handlerDO
)
;
if
(
!
funcDO
)
{
return
handlerDO
;
}
handlerDO
=
funcDO
;
if
(
isFunctionInProxy
(
handlerDO
)
)
{
continue
;
}
break
;
}
return
handlerDO
;
}
}
class
ReactEventCollector
extends
MainEventCollector
{
getListeners
(
node
{
checkOnly
}
=
{
}
)
{
const
handlers
=
[
]
;
const
props
=
this
.
getProps
(
node
)
;
if
(
props
)
{
for
(
const
[
name
prop
]
of
Object
.
entries
(
props
)
)
{
if
(
REACT_EVENT_NAMES
.
includes
(
name
)
)
{
const
listener
=
prop
?
.
__reactBoundMethod
|
|
prop
;
if
(
typeof
listener
!
=
=
"
function
"
)
{
continue
;
}
if
(
!
this
.
chromeEnabled
&
&
this
.
isChromeHandler
(
listener
)
)
{
continue
;
}
if
(
checkOnly
)
{
return
true
;
}
const
handler
=
{
type
:
name
handler
:
listener
tags
:
"
React
"
override
:
{
capturing
:
name
.
endsWith
(
"
Capture
"
)
}
}
;
handlers
.
push
(
handler
)
;
}
}
}
if
(
checkOnly
)
{
return
false
;
}
return
handlers
;
}
getProps
(
node
)
{
node
=
this
.
unwrap
(
node
)
;
for
(
const
key
of
Object
.
keys
(
node
)
)
{
if
(
key
.
startsWith
(
"
__reactInternalInstance
"
)
)
{
const
value
=
node
[
key
]
;
if
(
value
.
memoizedProps
)
{
return
value
.
memoizedProps
;
}
return
value
?
.
_currentElement
?
.
props
;
}
}
return
null
;
}
normalizeListener
(
handlerDO
listener
)
{
let
functionText
=
"
"
;
if
(
handlerDO
.
boundTargetFunction
)
{
handlerDO
=
handlerDO
.
boundTargetFunction
;
}
const
script
=
handlerDO
.
script
;
const
introScript
=
script
?
.
source
.
introductionScript
;
if
(
introScript
&
&
introScript
.
displayName
.
endsWith
(
"
/
transform
.
run
"
)
)
{
listener
.
hide
.
debugger
=
true
;
listener
.
hide
.
filename
=
true
;
if
(
!
handlerDO
.
isArrowFunction
)
{
functionText
+
=
"
function
(
"
;
}
else
{
functionText
+
=
"
(
"
;
}
functionText
+
=
handlerDO
.
parameterNames
.
join
(
"
"
)
;
functionText
+
=
"
)
{
\
n
"
;
const
scriptSource
=
script
.
source
.
text
;
functionText
+
=
scriptSource
.
substr
(
script
.
sourceStart
script
.
sourceLength
)
;
listener
.
override
.
handler
=
functionText
;
}
return
handlerDO
;
}
}
class
EventCollector
{
constructor
(
targetActor
)
{
this
.
targetActor
=
targetActor
;
this
.
eventCollectors
=
[
new
ReactEventCollector
(
)
new
JQueryLiveEventCollector
(
)
new
JQueryEventCollector
(
)
new
DOMEventCollector
(
)
]
;
}
destroy
(
)
{
this
.
eventCollectors
=
null
;
}
hasEventListeners
(
node
)
{
for
(
const
collector
of
this
.
eventCollectors
)
{
if
(
collector
.
hasListeners
(
node
)
)
{
return
true
;
}
}
return
false
;
}
get
chromeEnabled
(
)
{
if
(
typeof
this
.
_chromeEnabled
=
=
=
"
undefined
"
)
{
this
.
_chromeEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
chrome
.
enabled
"
)
;
}
return
this
.
_chromeEnabled
;
}
getEventListeners
(
node
)
{
const
listenerArray
=
[
]
;
let
dbg
;
if
(
!
this
.
chromeEnabled
)
{
dbg
=
new
Debugger
(
)
;
}
else
{
const
ChromeDebugger
=
require
(
"
ChromeDebugger
"
)
;
dbg
=
new
ChromeDebugger
(
)
;
}
for
(
const
collector
of
this
.
eventCollectors
)
{
const
listeners
=
collector
.
getListeners
(
node
)
;
if
(
!
listeners
)
{
continue
;
}
for
(
const
listener
of
listeners
)
{
const
eventObj
=
this
.
processHandlerForEvent
(
listener
dbg
collector
.
normalizeListener
)
;
if
(
eventObj
)
{
listenerArray
.
push
(
eventObj
)
;
}
}
}
listenerArray
.
sort
(
(
a
b
)
=
>
{
return
a
.
type
.
localeCompare
(
b
.
type
)
;
}
)
;
return
listenerArray
;
}
processHandlerForEvent
(
listener
dbg
normalizeListener
)
{
let
globalDO
;
let
eventObj
;
try
{
const
{
capturing
handler
}
=
listener
;
const
global
=
Cu
.
getGlobalForObject
(
handler
)
;
globalDO
=
dbg
.
addDebuggee
(
global
)
;
let
listenerDO
=
globalDO
.
makeDebuggeeValue
(
handler
)
;
if
(
normalizeListener
)
{
listenerDO
=
normalizeListener
(
listenerDO
listener
)
;
}
const
hide
=
listener
.
hide
|
|
{
}
;
const
override
=
listener
.
override
|
|
{
}
;
const
tags
=
listener
.
tags
|
|
"
"
;
const
type
=
listener
.
type
|
|
"
"
;
const
enabled
=
!
!
listener
.
enabled
;
let
functionSource
=
handler
.
toString
(
)
;
let
line
=
0
;
let
column
=
null
;
let
native
=
false
;
let
url
=
"
"
;
let
sourceActor
=
"
"
;
if
(
listenerDO
.
class
=
=
=
"
Object
"
|
|
/
^
XUL
\
w
*
Element
/
.
test
(
listenerDO
.
class
)
)
{
let
desc
;
while
(
!
desc
&
&
listenerDO
)
{
desc
=
listenerDO
.
getOwnPropertyDescriptor
(
"
handleEvent
"
)
;
listenerDO
=
listenerDO
.
proto
;
}
if
(
desc
?
.
value
)
{
listenerDO
=
desc
.
value
;
}
}
if
(
listenerDO
.
isBoundFunction
)
{
listenerDO
=
listenerDO
.
boundTargetFunction
;
}
const
{
isArrowFunction
name
script
parameterNames
}
=
listenerDO
;
if
(
script
)
{
const
scriptSource
=
script
.
source
.
text
;
const
columnBase
=
script
.
format
=
=
=
"
wasm
"
?
0
:
1
;
line
=
script
.
startLine
;
column
=
script
.
startColumn
-
columnBase
;
url
=
script
.
url
;
const
actor
=
this
.
targetActor
.
sourcesManager
.
getOrCreateSourceActor
(
script
.
source
)
;
sourceActor
=
actor
?
actor
.
actorID
:
null
;
if
(
functionSource
=
=
=
"
[
object
Object
]
"
|
|
functionSource
=
=
=
"
[
object
XULElement
]
"
|
|
functionSource
.
includes
(
"
[
native
code
]
"
)
)
{
functionSource
=
scriptSource
.
substr
(
script
.
sourceStart
script
.
sourceLength
)
;
if
(
!
isArrowFunction
)
{
functionSource
=
"
function
"
+
functionSource
;
}
}
}
else
{
native
=
true
;
}
if
(
parameterNames
&
&
parameterNames
.
length
)
{
const
prefix
=
"
function
"
+
name
+
"
(
)
"
;
const
paramString
=
parameterNames
.
join
(
"
"
)
;
if
(
functionSource
.
startsWith
(
prefix
)
)
{
functionSource
=
functionSource
.
substr
(
prefix
.
length
)
;
functionSource
=
function
{
name
}
(
{
paramString
}
)
{
functionSource
}
;
}
}
let
origin
;
if
(
native
)
{
origin
=
"
[
native
code
]
"
;
}
else
{
origin
=
url
+
(
line
?
"
:
"
+
line
+
(
column
=
=
=
null
?
"
"
:
"
:
"
+
column
)
:
"
"
)
;
}
eventObj
=
{
type
:
override
.
type
|
|
type
handler
:
override
.
handler
|
|
functionSource
.
trim
(
)
origin
:
override
.
origin
|
|
origin
tags
:
override
.
tags
|
|
tags
capturing
:
typeof
override
.
capturing
!
=
=
"
undefined
"
?
override
.
capturing
:
capturing
hide
:
typeof
override
.
hide
!
=
=
"
undefined
"
?
override
.
hide
:
hide
native
sourceActor
nsIEventListenerInfo
:
listener
.
nsIEventListenerInfo
enabled
}
;
if
(
!
sourceActor
)
{
eventObj
.
hide
.
debugger
=
true
;
}
}
finally
{
if
(
globalDO
)
{
dbg
.
removeDebuggee
(
globalDO
)
;
}
}
return
eventObj
;
}
}
exports
.
EventCollector
=
EventCollector
;
