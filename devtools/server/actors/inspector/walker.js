"
use
strict
"
;
const
{
Ci
Cu
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
walkerSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
inspector
"
)
;
const
{
LongStringActor
}
=
require
(
"
devtools
/
server
/
actors
/
string
"
)
;
const
InspectorUtils
=
require
(
"
InspectorUtils
"
)
;
loader
.
lazyRequireGetter
(
this
"
getFrameElement
"
"
devtools
/
shared
/
layout
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
isAnonymous
"
"
devtools
/
shared
/
layout
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
loadSheet
"
"
devtools
/
shared
/
layout
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
throttle
"
"
devtools
/
shared
/
throttle
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
allAnonymousContentTreeWalkerFilter
"
"
devtools
/
server
/
actors
/
inspector
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
isNodeDead
"
"
devtools
/
server
/
actors
/
inspector
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
nodeDocument
"
"
devtools
/
server
/
actors
/
inspector
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
standardTreeWalkerFilter
"
"
devtools
/
server
/
actors
/
inspector
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
DocumentWalker
"
"
devtools
/
server
/
actors
/
inspector
/
document
-
walker
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
SKIP_TO_SIBLING
"
"
devtools
/
server
/
actors
/
inspector
/
document
-
walker
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
NodeActor
"
"
devtools
/
server
/
actors
/
inspector
/
node
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
NodeListActor
"
"
devtools
/
server
/
actors
/
inspector
/
node
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
LayoutActor
"
"
devtools
/
server
/
actors
/
layout
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
getLayoutChangesObserver
"
"
devtools
/
server
/
actors
/
reflow
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
releaseLayoutChangesObserver
"
"
devtools
/
server
/
actors
/
reflow
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
WalkerSearch
"
"
devtools
/
server
/
actors
/
utils
/
walker
-
search
"
true
)
;
loader
.
lazyServiceGetter
(
this
"
eventListenerService
"
"
mozilla
.
org
/
eventlistenerservice
;
1
"
"
nsIEventListenerService
"
)
;
loader
.
lazyServiceGetter
(
this
"
DOMParser
"
"
mozilla
.
org
/
xmlextras
/
domparser
;
1
"
"
nsIDOMParser
"
)
;
const
MUTATIONS_THROTTLING_DELAY
=
100
;
const
IMMEDIATE_MUTATIONS
=
[
"
documentUnload
"
"
frameLoad
"
"
newRoot
"
"
pseudoClassLock
"
]
;
const
HIDDEN_CLASS
=
"
__fx
-
devtools
-
hide
-
shortcut__
"
;
const
PSEUDO_SELECTORS
=
[
[
"
:
active
"
1
]
[
"
:
hover
"
1
]
[
"
:
focus
"
1
]
[
"
:
visited
"
0
]
[
"
:
link
"
0
]
[
"
:
first
-
letter
"
0
]
[
"
:
first
-
child
"
2
]
[
"
:
before
"
2
]
[
"
:
after
"
2
]
[
"
:
lang
(
"
0
]
[
"
:
not
(
"
3
]
[
"
:
first
-
of
-
type
"
0
]
[
"
:
last
-
of
-
type
"
0
]
[
"
:
only
-
of
-
type
"
0
]
[
"
:
only
-
child
"
2
]
[
"
:
nth
-
child
(
"
3
]
[
"
:
nth
-
last
-
child
(
"
0
]
[
"
:
nth
-
of
-
type
(
"
0
]
[
"
:
nth
-
last
-
of
-
type
(
"
0
]
[
"
:
last
-
child
"
2
]
[
"
:
root
"
0
]
[
"
:
empty
"
0
]
[
"
:
target
"
0
]
[
"
:
enabled
"
0
]
[
"
:
disabled
"
0
]
[
"
:
checked
"
1
]
[
"
:
:
selection
"
0
]
]
;
const
HELPER_SHEET
=
"
data
:
text
/
css
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
.
__fx
-
devtools
-
hide
-
shortcut__
{
visibility
:
hidden
!
important
;
}
:
-
moz
-
devtools
-
highlighted
{
outline
:
2px
dashed
#
F06
!
important
;
outline
-
offset
:
-
2px
!
important
;
}
)
;
exports
.
DEFAULT_VALUE_SUMMARY_LENGTH
=
50
;
var
gValueSummaryLength
=
exports
.
DEFAULT_VALUE_SUMMARY_LENGTH
;
exports
.
getValueSummaryLength
=
function
(
)
{
return
gValueSummaryLength
;
}
;
exports
.
setValueSummaryLength
=
function
(
val
)
{
gValueSummaryLength
=
val
;
}
;
var
WalkerActor
=
protocol
.
ActorClassWithSpec
(
walkerSpec
{
initialize
:
function
(
conn
tabActor
options
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
tabActor
=
tabActor
;
this
.
rootWin
=
tabActor
.
window
;
this
.
rootDoc
=
this
.
rootWin
.
document
;
this
.
_refMap
=
new
Map
(
)
;
this
.
_pendingMutations
=
[
]
;
this
.
_activePseudoClassLocks
=
new
Set
(
)
;
this
.
showAllAnonymousContent
=
options
.
showAllAnonymousContent
;
this
.
walkerSearch
=
new
WalkerSearch
(
this
)
;
this
.
_orphaned
=
new
Set
(
)
;
this
.
_retainedOrphans
=
new
Set
(
)
;
this
.
onMutations
=
this
.
onMutations
.
bind
(
this
)
;
this
.
onSlotchange
=
this
.
onSlotchange
.
bind
(
this
)
;
this
.
onFrameLoad
=
this
.
onFrameLoad
.
bind
(
this
)
;
this
.
onFrameUnload
=
this
.
onFrameUnload
.
bind
(
this
)
;
this
.
_throttledEmitNewMutations
=
throttle
(
this
.
_emitNewMutations
.
bind
(
this
)
MUTATIONS_THROTTLING_DELAY
)
;
tabActor
.
on
(
"
will
-
navigate
"
this
.
onFrameUnload
)
;
tabActor
.
on
(
"
window
-
ready
"
this
.
onFrameLoad
)
;
this
.
rootNode
=
this
.
document
(
)
;
this
.
layoutChangeObserver
=
getLayoutChangesObserver
(
this
.
tabActor
)
;
this
.
_onReflows
=
this
.
_onReflows
.
bind
(
this
)
;
this
.
layoutChangeObserver
.
on
(
"
reflows
"
this
.
_onReflows
)
;
this
.
_onResize
=
this
.
_onResize
.
bind
(
this
)
;
this
.
layoutChangeObserver
.
on
(
"
resize
"
this
.
_onResize
)
;
this
.
_onEventListenerChange
=
this
.
_onEventListenerChange
.
bind
(
this
)
;
eventListenerService
.
addListenerChangeListener
(
this
.
_onEventListenerChange
)
;
}
_onEventListenerChange
:
function
(
changesEnum
)
{
let
changes
=
changesEnum
.
enumerate
(
)
;
while
(
changes
.
hasMoreElements
(
)
)
{
let
current
=
changes
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIEventListenerChange
)
;
let
target
=
current
.
target
;
if
(
this
.
_refMap
.
has
(
target
)
)
{
let
actor
=
this
.
getNode
(
target
)
;
let
mutation
=
{
type
:
"
events
"
target
:
actor
.
actorID
hasEventListeners
:
actor
.
_hasEventListeners
}
;
this
.
queueMutation
(
mutation
)
;
}
}
}
form
:
function
(
)
{
return
{
actor
:
this
.
actorID
root
:
this
.
rootNode
.
form
(
)
traits
:
{
}
}
;
}
toString
:
function
(
)
{
return
"
[
WalkerActor
"
+
this
.
actorID
+
"
]
"
;
}
getDocumentWalker
:
function
(
node
whatToShow
skipTo
)
{
let
filter
=
this
.
showAllAnonymousContent
?
allAnonymousContentTreeWalkerFilter
:
standardTreeWalkerFilter
;
return
new
DocumentWalker
(
node
this
.
rootWin
{
whatToShow
filter
skipTo
showAnonymousContent
:
true
}
)
;
}
getNonAnonymousWalker
:
function
(
node
whatToShow
skipTo
)
{
let
nodeFilter
=
standardTreeWalkerFilter
;
return
new
DocumentWalker
(
node
this
.
rootWin
{
whatToShow
nodeFilter
skipTo
showAnonymousContent
:
false
}
)
;
}
destroy
:
function
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
try
{
this
.
clearPseudoClassLocks
(
)
;
this
.
_activePseudoClassLocks
=
null
;
this
.
_hoveredNode
=
null
;
this
.
rootWin
=
null
;
this
.
rootDoc
=
null
;
this
.
rootNode
=
null
;
this
.
layoutHelpers
=
null
;
this
.
_orphaned
=
null
;
this
.
_retainedOrphans
=
null
;
this
.
_refMap
=
null
;
this
.
tabActor
.
off
(
"
will
-
navigate
"
this
.
onFrameUnload
)
;
this
.
tabActor
.
off
(
"
window
-
ready
"
this
.
onFrameLoad
)
;
this
.
onFrameLoad
=
null
;
this
.
onFrameUnload
=
null
;
this
.
walkerSearch
.
destroy
(
)
;
this
.
layoutChangeObserver
.
off
(
"
reflows
"
this
.
_onReflows
)
;
this
.
layoutChangeObserver
.
off
(
"
resize
"
this
.
_onResize
)
;
this
.
layoutChangeObserver
=
null
;
releaseLayoutChangesObserver
(
this
.
tabActor
)
;
eventListenerService
.
removeListenerChangeListener
(
this
.
_onEventListenerChange
)
;
this
.
onMutations
=
null
;
this
.
layoutActor
=
null
;
this
.
tabActor
=
null
;
this
.
emit
(
"
destroyed
"
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
release
:
function
(
)
{
}
unmanage
:
function
(
actor
)
{
if
(
actor
instanceof
NodeActor
)
{
if
(
this
.
_activePseudoClassLocks
&
&
this
.
_activePseudoClassLocks
.
has
(
actor
)
)
{
this
.
clearPseudoClassLocks
(
actor
)
;
}
this
.
_refMap
.
delete
(
actor
.
rawNode
)
;
}
protocol
.
Actor
.
prototype
.
unmanage
.
call
(
this
actor
)
;
}
hasNode
:
function
(
rawNode
)
{
return
this
.
_refMap
.
has
(
rawNode
)
;
}
getNode
:
function
(
rawNode
)
{
return
this
.
_refMap
.
get
(
rawNode
)
;
}
_ref
:
function
(
node
)
{
let
actor
=
this
.
getNode
(
node
)
;
if
(
actor
)
{
return
actor
;
}
actor
=
new
NodeActor
(
this
node
)
;
this
.
manage
(
actor
)
;
this
.
_refMap
.
set
(
node
actor
)
;
if
(
node
.
nodeType
=
=
=
Ci
.
nsIDOMNode
.
DOCUMENT_NODE
)
{
actor
.
watchDocument
(
node
this
.
onMutations
)
;
}
if
(
actor
.
isShadowRoot
)
{
actor
.
watchDocument
(
node
.
ownerDocument
this
.
onMutations
)
;
actor
.
watchSlotchange
(
this
.
onSlotchange
)
;
}
return
actor
;
}
_onReflows
:
function
(
reflows
)
{
let
changes
=
[
]
;
for
(
let
[
node
actor
]
of
this
.
_refMap
)
{
if
(
Cu
.
isDeadWrapper
(
node
)
)
{
continue
;
}
let
displayType
=
actor
.
displayType
;
let
isDisplayed
=
actor
.
isDisplayed
;
if
(
displayType
!
=
=
actor
.
currentDisplayType
|
|
isDisplayed
!
=
=
actor
.
wasDisplayed
)
{
changes
.
push
(
actor
)
;
actor
.
currentDisplayType
=
displayType
;
actor
.
wasDisplayed
=
isDisplayed
;
}
}
if
(
changes
.
length
)
{
this
.
emit
(
"
display
-
change
"
changes
)
;
}
}
_onResize
:
function
(
)
{
this
.
emit
(
"
resize
"
)
;
}
attachElement
:
function
(
node
)
{
let
{
nodes
newParents
}
=
this
.
attachElements
(
[
node
]
)
;
return
{
node
:
nodes
[
0
]
newParents
:
newParents
}
;
}
attachElements
:
function
(
nodes
)
{
let
nodeActors
=
[
]
;
let
newParents
=
new
Set
(
)
;
for
(
let
node
of
nodes
)
{
if
(
!
(
node
instanceof
NodeActor
)
)
{
if
(
!
this
.
showAllAnonymousContent
&
&
isAnonymous
(
node
)
)
{
node
=
this
.
getDocumentWalker
(
node
)
.
currentNode
;
}
node
=
this
.
_ref
(
node
)
;
}
this
.
ensurePathToRoot
(
node
newParents
)
;
nodeActors
.
push
(
node
)
;
}
return
{
nodes
:
nodeActors
newParents
:
[
.
.
.
newParents
]
}
;
}
document
:
function
(
node
)
{
let
doc
=
isNodeDead
(
node
)
?
this
.
rootDoc
:
nodeDocument
(
node
.
rawNode
)
;
return
this
.
_ref
(
doc
)
;
}
documentElement
:
function
(
node
)
{
let
elt
=
isNodeDead
(
node
)
?
this
.
rootDoc
.
documentElement
:
nodeDocument
(
node
.
rawNode
)
.
documentElement
;
return
this
.
_ref
(
elt
)
;
}
parentNode
:
function
(
node
)
{
let
parent
;
try
{
let
walker
=
node
.
isDirectShadowHostChild
?
this
.
getNonAnonymousWalker
(
node
.
rawNode
)
:
this
.
getDocumentWalker
(
node
.
rawNode
)
;
parent
=
walker
.
parentNode
(
)
;
}
catch
(
e
)
{
let
walker
=
this
.
getNonAnonymousWalker
(
node
.
rawNode
)
;
parent
=
walker
.
parentNode
(
)
;
}
if
(
parent
)
{
return
this
.
_ref
(
parent
)
;
}
return
null
;
}
inlineTextChild
:
function
(
node
)
{
if
(
node
.
isBeforePseudoElement
|
|
node
.
isAfterPseudoElement
|
|
node
.
rawNode
.
nodeType
!
=
Ci
.
nsIDOMNode
.
ELEMENT_NODE
|
|
node
.
rawNode
.
children
.
length
>
0
)
{
return
undefined
;
}
let
walker
=
node
.
isDirectShadowHostChild
?
this
.
getNonAnonymousWalker
(
node
.
rawNode
)
:
this
.
getDocumentWalker
(
node
.
rawNode
)
;
let
firstChild
=
walker
.
firstChild
(
)
;
if
(
!
firstChild
|
|
walker
.
nextSibling
(
)
|
|
firstChild
.
nodeType
!
=
=
Ci
.
nsIDOMNode
.
TEXT_NODE
|
|
firstChild
.
nodeValue
.
length
>
gValueSummaryLength
)
{
return
undefined
;
}
return
this
.
_ref
(
firstChild
)
;
}
retainNode
:
function
(
node
)
{
node
.
retained
=
true
;
}
unretainNode
:
function
(
node
)
{
node
.
retained
=
false
;
if
(
this
.
_retainedOrphans
.
has
(
node
)
)
{
this
.
_retainedOrphans
.
delete
(
node
)
;
this
.
releaseNode
(
node
)
;
}
}
releaseNode
:
function
(
node
options
=
{
}
)
{
if
(
isNodeDead
(
node
)
)
{
return
;
}
if
(
node
.
retained
&
&
!
options
.
force
)
{
this
.
_retainedOrphans
.
add
(
node
)
;
return
;
}
if
(
node
.
retained
)
{
this
.
_retainedOrphans
.
delete
(
node
)
;
}
let
walker
=
this
.
getDocumentWalker
(
node
.
rawNode
)
;
let
child
=
walker
.
firstChild
(
)
;
while
(
child
)
{
let
childActor
=
this
.
getNode
(
child
)
;
if
(
childActor
)
{
this
.
releaseNode
(
childActor
options
)
;
}
child
=
walker
.
nextSibling
(
)
;
}
node
.
destroy
(
)
;
}
ensurePathToRoot
:
function
(
node
newParents
=
new
Set
(
)
)
{
if
(
!
node
)
{
return
newParents
;
}
let
walker
=
this
.
getDocumentWalker
(
node
.
rawNode
)
;
let
cur
;
while
(
(
cur
=
walker
.
parentNode
(
)
)
)
{
let
parent
=
this
.
getNode
(
cur
)
;
if
(
!
parent
)
{
newParents
.
add
(
this
.
_ref
(
cur
)
)
;
}
else
{
return
newParents
;
}
}
return
newParents
;
}
children
:
function
(
node
options
=
{
}
)
{
if
(
isNodeDead
(
node
)
)
{
return
{
hasFirst
:
true
hasLast
:
true
nodes
:
[
]
}
;
}
if
(
options
.
center
&
&
options
.
start
)
{
throw
Error
(
"
Can
'
t
specify
both
'
center
'
and
'
start
'
options
.
"
)
;
}
let
maxNodes
=
options
.
maxNodes
|
|
-
1
;
if
(
maxNodes
=
=
-
1
)
{
maxNodes
=
Number
.
MAX_VALUE
;
}
let
isShadowHost
=
!
!
node
.
rawNode
.
shadowRoot
;
let
isShadowRoot
=
!
!
node
.
rawNode
.
host
;
let
isUnslottedHostChild
=
false
;
if
(
node
.
isDirectShadowHostChild
)
{
try
{
this
.
getDocumentWalker
(
node
.
rawNode
options
.
whatToShow
SKIP_TO_SIBLING
)
;
}
catch
(
e
)
{
isUnslottedHostChild
=
true
;
}
}
let
getFilteredWalker
=
documentWalkerNode
=
>
{
let
{
whatToShow
}
=
options
;
let
skipTo
=
SKIP_TO_SIBLING
;
let
useAnonymousWalker
=
!
(
isShadowRoot
|
|
isShadowHost
|
|
isUnslottedHostChild
)
;
if
(
!
useAnonymousWalker
)
{
return
this
.
getNonAnonymousWalker
(
documentWalkerNode
whatToShow
skipTo
)
;
}
return
this
.
getDocumentWalker
(
documentWalkerNode
whatToShow
skipTo
)
;
}
;
let
rawNode
=
node
.
rawNode
;
let
firstChild
=
getFilteredWalker
(
rawNode
)
.
firstChild
(
)
;
let
lastChild
=
getFilteredWalker
(
rawNode
)
.
lastChild
(
)
;
if
(
!
firstChild
&
&
!
isShadowHost
)
{
return
{
hasFirst
:
true
hasLast
:
true
nodes
:
[
]
}
;
}
let
nodes
=
[
]
;
if
(
firstChild
)
{
let
start
;
if
(
options
.
center
)
{
start
=
options
.
center
.
rawNode
;
}
else
if
(
options
.
start
)
{
start
=
options
.
start
.
rawNode
;
}
else
{
start
=
firstChild
;
}
let
backwardWalker
=
getFilteredWalker
(
start
)
;
if
(
backwardWalker
.
currentNode
!
=
firstChild
&
&
options
.
center
)
{
backwardWalker
.
previousSibling
(
)
;
let
backwardCount
=
Math
.
floor
(
maxNodes
/
2
)
;
let
backwardNodes
=
this
.
_readBackward
(
backwardWalker
backwardCount
)
;
nodes
=
backwardNodes
;
}
let
forwardWalker
=
getFilteredWalker
(
start
)
;
let
forwardCount
=
maxNodes
-
nodes
.
length
;
nodes
=
nodes
.
concat
(
this
.
_readForward
(
forwardWalker
forwardCount
)
)
;
let
remaining
=
maxNodes
-
nodes
.
length
;
if
(
options
.
center
&
&
remaining
>
0
&
&
nodes
[
0
]
.
rawNode
!
=
firstChild
)
{
let
firstNodes
=
this
.
_readBackward
(
backwardWalker
remaining
)
;
nodes
=
firstNodes
.
concat
(
nodes
)
;
}
}
if
(
!
isShadowHost
)
{
nodes
=
nodes
.
filter
(
n
=
>
!
n
.
isDirectShadowHostChild
)
;
}
let
hasFirst
hasLast
;
if
(
nodes
.
length
>
0
)
{
hasFirst
=
nodes
[
0
]
.
rawNode
=
=
firstChild
;
hasLast
=
nodes
[
nodes
.
length
-
1
]
.
rawNode
=
=
lastChild
;
}
else
{
hasFirst
=
hasLast
=
true
;
}
if
(
isShadowHost
)
{
let
{
before
after
}
=
this
.
_getBeforeAfterElements
(
node
.
rawNode
)
;
nodes
=
[
this
.
_ref
(
node
.
rawNode
.
shadowRoot
)
.
.
.
(
before
?
[
before
]
:
[
]
)
.
.
.
nodes
.
.
.
(
after
?
[
after
]
:
[
]
)
]
;
}
return
{
hasFirst
hasLast
nodes
}
;
}
_getBeforeAfterElements
:
function
(
node
)
{
let
firstChildWalker
=
this
.
getDocumentWalker
(
node
)
;
let
before
=
this
.
_ref
(
firstChildWalker
.
firstChild
(
)
)
;
let
lastChildWalker
=
this
.
getDocumentWalker
(
node
)
;
let
after
=
this
.
_ref
(
lastChildWalker
.
lastChild
(
)
)
;
return
{
before
:
before
.
isBeforePseudoElement
?
before
:
undefined
after
:
after
.
isAfterPseudoElement
?
after
:
undefined
}
;
}
nextSibling
:
function
(
node
options
=
{
}
)
{
if
(
isNodeDead
(
node
)
)
{
return
null
;
}
let
walker
=
this
.
getDocumentWalker
(
node
.
rawNode
options
.
whatToShow
)
;
let
sibling
=
walker
.
nextSibling
(
)
;
return
sibling
?
this
.
_ref
(
sibling
)
:
null
;
}
previousSibling
:
function
(
node
options
=
{
}
)
{
if
(
isNodeDead
(
node
)
)
{
return
null
;
}
let
walker
=
this
.
getDocumentWalker
(
node
.
rawNode
options
.
whatToShow
)
;
let
sibling
=
walker
.
previousSibling
(
)
;
return
sibling
?
this
.
_ref
(
sibling
)
:
null
;
}
_readForward
:
function
(
walker
count
)
{
let
ret
=
[
]
;
let
node
=
walker
.
currentNode
;
do
{
if
(
!
walker
.
isSkippedNode
(
node
)
)
{
ret
.
push
(
this
.
_ref
(
node
)
)
;
}
node
=
walker
.
nextSibling
(
)
;
}
while
(
node
&
&
-
-
count
)
;
return
ret
;
}
_readBackward
:
function
(
walker
count
)
{
let
ret
=
[
]
;
let
node
=
walker
.
currentNode
;
do
{
if
(
!
walker
.
isSkippedNode
(
node
)
)
{
ret
.
push
(
this
.
_ref
(
node
)
)
;
}
node
=
walker
.
previousSibling
(
)
;
}
while
(
node
&
&
-
-
count
)
;
ret
.
reverse
(
)
;
return
ret
;
}
querySelector
:
function
(
baseNode
selector
)
{
if
(
isNodeDead
(
baseNode
)
)
{
return
{
}
;
}
let
node
=
baseNode
.
rawNode
.
querySelector
(
selector
)
;
if
(
!
node
)
{
return
{
}
;
}
return
this
.
attachElement
(
node
)
;
}
querySelectorAll
:
function
(
baseNode
selector
)
{
let
nodeList
=
null
;
try
{
nodeList
=
baseNode
.
rawNode
.
querySelectorAll
(
selector
)
;
}
catch
(
e
)
{
}
return
new
NodeListActor
(
this
nodeList
)
;
}
_multiFrameQuerySelectorAll
:
function
(
selector
)
{
let
nodes
=
[
]
;
for
(
let
{
document
}
of
this
.
tabActor
.
windows
)
{
try
{
nodes
=
[
.
.
.
nodes
.
.
.
document
.
querySelectorAll
(
selector
)
]
;
}
catch
(
e
)
{
}
}
return
nodes
;
}
multiFrameQuerySelectorAll
:
function
(
selector
)
{
return
new
NodeListActor
(
this
this
.
_multiFrameQuerySelectorAll
(
selector
)
)
;
}
search
:
function
(
query
)
{
let
results
=
this
.
walkerSearch
.
search
(
query
)
;
let
nodeList
=
new
NodeListActor
(
this
results
.
map
(
r
=
>
r
.
node
)
)
;
return
{
list
:
nodeList
metadata
:
[
]
}
;
}
getSuggestionsForQuery
:
function
(
query
completing
selectorState
)
{
let
sugs
=
{
classes
:
new
Map
(
)
tags
:
new
Map
(
)
ids
:
new
Map
(
)
}
;
let
result
=
[
]
;
let
nodes
=
null
;
switch
(
selectorState
)
{
case
"
pseudo
"
:
result
=
PSEUDO_SELECTORS
.
filter
(
item
=
>
{
return
item
[
0
]
.
startsWith
(
"
:
"
+
completing
)
;
}
)
;
break
;
case
"
class
"
:
if
(
!
query
)
{
nodes
=
this
.
_multiFrameQuerySelectorAll
(
"
[
class
]
"
)
;
}
else
{
nodes
=
this
.
_multiFrameQuerySelectorAll
(
query
)
;
}
for
(
let
node
of
nodes
)
{
for
(
let
className
of
node
.
classList
)
{
sugs
.
classes
.
set
(
className
(
sugs
.
classes
.
get
(
className
)
|
0
)
+
1
)
;
}
}
sugs
.
classes
.
delete
(
"
"
)
;
sugs
.
classes
.
delete
(
HIDDEN_CLASS
)
;
for
(
let
[
className
count
]
of
sugs
.
classes
)
{
if
(
className
.
startsWith
(
completing
)
)
{
result
.
push
(
[
"
.
"
+
CSS
.
escape
(
className
)
count
selectorState
]
)
;
}
}
break
;
case
"
id
"
:
if
(
!
query
)
{
nodes
=
this
.
_multiFrameQuerySelectorAll
(
"
[
id
]
"
)
;
}
else
{
nodes
=
this
.
_multiFrameQuerySelectorAll
(
query
)
;
}
for
(
let
node
of
nodes
)
{
sugs
.
ids
.
set
(
node
.
id
(
sugs
.
ids
.
get
(
node
.
id
)
|
0
)
+
1
)
;
}
for
(
let
[
id
count
]
of
sugs
.
ids
)
{
if
(
id
.
startsWith
(
completing
)
&
&
id
!
=
=
"
"
)
{
result
.
push
(
[
"
#
"
+
CSS
.
escape
(
id
)
count
selectorState
]
)
;
}
}
break
;
case
"
tag
"
:
if
(
!
query
)
{
nodes
=
this
.
_multiFrameQuerySelectorAll
(
"
*
"
)
;
}
else
{
nodes
=
this
.
_multiFrameQuerySelectorAll
(
query
)
;
}
for
(
let
node
of
nodes
)
{
let
tag
=
node
.
localName
;
sugs
.
tags
.
set
(
tag
(
sugs
.
tags
.
get
(
tag
)
|
0
)
+
1
)
;
}
for
(
let
[
tag
count
]
of
sugs
.
tags
)
{
if
(
(
new
RegExp
(
"
^
"
+
completing
+
"
.
*
"
"
i
"
)
)
.
test
(
tag
)
)
{
result
.
push
(
[
tag
count
selectorState
]
)
;
}
}
if
(
!
query
)
{
result
=
[
.
.
.
result
.
.
.
this
.
getSuggestionsForQuery
(
null
completing
"
class
"
)
.
suggestions
.
.
.
this
.
getSuggestionsForQuery
(
null
completing
"
id
"
)
.
suggestions
]
;
}
break
;
case
"
null
"
:
nodes
=
this
.
_multiFrameQuerySelectorAll
(
query
)
;
for
(
let
node
of
nodes
)
{
sugs
.
ids
.
set
(
node
.
id
(
sugs
.
ids
.
get
(
node
.
id
)
|
0
)
+
1
)
;
let
tag
=
node
.
localName
;
sugs
.
tags
.
set
(
tag
(
sugs
.
tags
.
get
(
tag
)
|
0
)
+
1
)
;
for
(
let
className
of
node
.
classList
)
{
sugs
.
classes
.
set
(
className
(
sugs
.
classes
.
get
(
className
)
|
0
)
+
1
)
;
}
}
for
(
let
[
tag
count
]
of
sugs
.
tags
)
{
tag
&
&
result
.
push
(
[
tag
count
]
)
;
}
for
(
let
[
id
count
]
of
sugs
.
ids
)
{
id
&
&
result
.
push
(
[
"
#
"
+
id
count
]
)
;
}
sugs
.
classes
.
delete
(
"
"
)
;
sugs
.
classes
.
delete
(
HIDDEN_CLASS
)
;
for
(
let
[
className
count
]
of
sugs
.
classes
)
{
className
&
&
result
.
push
(
[
"
.
"
+
className
count
]
)
;
}
}
result
=
result
.
sort
(
(
a
b
)
=
>
{
let
sortA
=
(
10000
-
a
[
1
]
)
+
a
[
0
]
;
let
sortB
=
(
10000
-
b
[
1
]
)
+
b
[
0
]
;
let
firstA
=
a
[
0
]
.
substring
(
0
1
)
;
let
firstB
=
b
[
0
]
.
substring
(
0
1
)
;
if
(
firstA
=
=
=
"
#
"
)
{
sortA
=
"
2
"
+
sortA
;
}
else
if
(
firstA
=
=
=
"
.
"
)
{
sortA
=
"
1
"
+
sortA
;
}
else
{
sortA
=
"
0
"
+
sortA
;
}
if
(
firstB
=
=
=
"
#
"
)
{
sortB
=
"
2
"
+
sortB
;
}
else
if
(
firstB
=
=
=
"
.
"
)
{
sortB
=
"
1
"
+
sortB
;
}
else
{
sortB
=
"
0
"
+
sortB
;
}
return
sortA
.
localeCompare
(
sortB
)
;
}
)
;
result
.
slice
(
0
25
)
;
return
{
query
:
query
suggestions
:
result
}
;
}
addPseudoClassLock
:
function
(
node
pseudo
options
=
{
}
)
{
if
(
isNodeDead
(
node
)
)
{
return
;
}
for
(
let
locked
of
this
.
_activePseudoClassLocks
)
{
if
(
InspectorUtils
.
hasPseudoClassLock
(
locked
.
rawNode
pseudo
)
)
{
this
.
_removePseudoClassLock
(
locked
pseudo
)
;
}
}
let
enabled
=
options
.
enabled
=
=
=
undefined
|
|
options
.
enabled
;
this
.
_addPseudoClassLock
(
node
pseudo
enabled
)
;
if
(
!
options
.
parents
)
{
return
;
}
let
walker
=
this
.
getDocumentWalker
(
node
.
rawNode
)
;
let
cur
;
while
(
(
cur
=
walker
.
parentNode
(
)
)
)
{
let
curNode
=
this
.
_ref
(
cur
)
;
this
.
_addPseudoClassLock
(
curNode
pseudo
enabled
)
;
}
}
_queuePseudoClassMutation
:
function
(
node
)
{
this
.
queueMutation
(
{
target
:
node
.
actorID
type
:
"
pseudoClassLock
"
pseudoClassLocks
:
node
.
writePseudoClassLocks
(
)
}
)
;
}
_addPseudoClassLock
:
function
(
node
pseudo
enabled
)
{
if
(
node
.
rawNode
.
nodeType
!
=
=
Ci
.
nsIDOMNode
.
ELEMENT_NODE
)
{
return
false
;
}
InspectorUtils
.
addPseudoClassLock
(
node
.
rawNode
pseudo
enabled
)
;
this
.
_activePseudoClassLocks
.
add
(
node
)
;
this
.
_queuePseudoClassMutation
(
node
)
;
return
true
;
}
hideNode
:
function
(
node
)
{
if
(
isNodeDead
(
node
)
)
{
return
;
}
loadSheet
(
node
.
rawNode
.
ownerGlobal
HELPER_SHEET
)
;
node
.
rawNode
.
classList
.
add
(
HIDDEN_CLASS
)
;
}
unhideNode
:
function
(
node
)
{
if
(
isNodeDead
(
node
)
)
{
return
;
}
node
.
rawNode
.
classList
.
remove
(
HIDDEN_CLASS
)
;
}
removePseudoClassLock
:
function
(
node
pseudo
options
=
{
}
)
{
if
(
isNodeDead
(
node
)
)
{
return
;
}
this
.
_removePseudoClassLock
(
node
pseudo
)
;
for
(
let
locked
of
this
.
_activePseudoClassLocks
)
{
if
(
node
.
rawNode
.
contains
(
locked
.
rawNode
)
&
&
InspectorUtils
.
hasPseudoClassLock
(
locked
.
rawNode
pseudo
)
)
{
this
.
_removePseudoClassLock
(
locked
pseudo
)
;
}
}
if
(
!
options
.
parents
)
{
return
;
}
let
walker
=
this
.
getDocumentWalker
(
node
.
rawNode
)
;
let
cur
;
while
(
(
cur
=
walker
.
parentNode
(
)
)
)
{
let
curNode
=
this
.
_ref
(
cur
)
;
this
.
_removePseudoClassLock
(
curNode
pseudo
)
;
}
}
_removePseudoClassLock
:
function
(
node
pseudo
)
{
if
(
node
.
rawNode
.
nodeType
!
=
Ci
.
nsIDOMNode
.
ELEMENT_NODE
)
{
return
false
;
}
InspectorUtils
.
removePseudoClassLock
(
node
.
rawNode
pseudo
)
;
if
(
!
node
.
writePseudoClassLocks
(
)
)
{
this
.
_activePseudoClassLocks
.
delete
(
node
)
;
}
this
.
_queuePseudoClassMutation
(
node
)
;
return
true
;
}
clearPseudoClassLocks
:
function
(
node
)
{
if
(
node
&
&
isNodeDead
(
node
)
)
{
return
;
}
if
(
node
)
{
InspectorUtils
.
clearPseudoClassLocks
(
node
.
rawNode
)
;
this
.
_activePseudoClassLocks
.
delete
(
node
)
;
this
.
_queuePseudoClassMutation
(
node
)
;
}
else
{
for
(
let
locked
of
this
.
_activePseudoClassLocks
)
{
InspectorUtils
.
clearPseudoClassLocks
(
locked
.
rawNode
)
;
this
.
_activePseudoClassLocks
.
delete
(
locked
)
;
this
.
_queuePseudoClassMutation
(
locked
)
;
}
}
}
innerHTML
:
function
(
node
)
{
let
html
=
"
"
;
if
(
!
isNodeDead
(
node
)
)
{
html
=
node
.
rawNode
.
innerHTML
;
}
return
LongStringActor
(
this
.
conn
html
)
;
}
setInnerHTML
:
function
(
node
value
)
{
if
(
isNodeDead
(
node
)
)
{
return
;
}
let
rawNode
=
node
.
rawNode
;
if
(
rawNode
.
nodeType
!
=
=
rawNode
.
ownerDocument
.
ELEMENT_NODE
)
{
throw
new
Error
(
"
Can
only
change
innerHTML
to
element
nodes
"
)
;
}
rawNode
.
innerHTML
=
value
;
}
outerHTML
:
function
(
node
)
{
let
outerHTML
=
"
"
;
if
(
!
isNodeDead
(
node
)
)
{
outerHTML
=
node
.
rawNode
.
outerHTML
;
}
return
LongStringActor
(
this
.
conn
outerHTML
)
;
}
setOuterHTML
:
function
(
node
value
)
{
if
(
isNodeDead
(
node
)
)
{
return
;
}
let
parsedDOM
=
DOMParser
.
parseFromString
(
value
"
text
/
html
"
)
;
let
rawNode
=
node
.
rawNode
;
let
parentNode
=
rawNode
.
parentNode
;
if
(
rawNode
.
tagName
=
=
=
"
BODY
"
)
{
if
(
parsedDOM
.
head
.
innerHTML
=
=
=
"
"
)
{
parentNode
.
replaceChild
(
parsedDOM
.
body
rawNode
)
;
}
else
{
rawNode
.
outerHTML
=
value
;
}
}
else
if
(
rawNode
.
tagName
=
=
=
"
HEAD
"
)
{
if
(
parsedDOM
.
body
.
innerHTML
=
=
=
"
"
)
{
parentNode
.
replaceChild
(
parsedDOM
.
head
rawNode
)
;
}
else
{
rawNode
.
outerHTML
=
value
;
}
}
else
if
(
node
.
isDocumentElement
(
)
)
{
let
finalAttributeModifications
=
[
]
;
let
attributeModifications
=
{
}
;
for
(
let
attribute
of
rawNode
.
attributes
)
{
attributeModifications
[
attribute
.
name
]
=
null
;
}
for
(
let
attribute
of
parsedDOM
.
documentElement
.
attributes
)
{
attributeModifications
[
attribute
.
name
]
=
attribute
.
value
;
}
for
(
let
key
in
attributeModifications
)
{
finalAttributeModifications
.
push
(
{
attributeName
:
key
newValue
:
attributeModifications
[
key
]
}
)
;
}
node
.
modifyAttributes
(
finalAttributeModifications
)
;
rawNode
.
replaceChild
(
parsedDOM
.
head
rawNode
.
querySelector
(
"
head
"
)
)
;
rawNode
.
replaceChild
(
parsedDOM
.
body
rawNode
.
querySelector
(
"
body
"
)
)
;
}
else
{
rawNode
.
outerHTML
=
value
;
}
}
insertAdjacentHTML
:
function
(
node
position
value
)
{
if
(
isNodeDead
(
node
)
)
{
return
{
node
:
[
]
newParents
:
[
]
}
;
}
let
rawNode
=
node
.
rawNode
;
let
isInsertAsSibling
=
position
=
=
=
"
beforeBegin
"
|
|
position
=
=
=
"
afterEnd
"
;
if
(
isInsertAsSibling
&
&
node
.
isDocumentElement
(
)
)
{
throw
new
Error
(
"
Can
'
t
insert
adjacent
element
to
the
root
.
"
)
;
}
let
rawParentNode
=
rawNode
.
parentNode
;
if
(
!
rawParentNode
&
&
isInsertAsSibling
)
{
throw
new
Error
(
"
Can
'
t
insert
as
sibling
without
parent
node
.
"
)
;
}
let
range
=
rawNode
.
ownerDocument
.
createRange
(
)
;
if
(
position
=
=
=
"
beforeBegin
"
|
|
position
=
=
=
"
afterEnd
"
)
{
range
.
selectNode
(
rawNode
)
;
}
else
{
range
.
selectNodeContents
(
rawNode
)
;
}
let
docFrag
=
range
.
createContextualFragment
(
value
)
;
let
newRawNodes
=
Array
.
from
(
docFrag
.
childNodes
)
;
switch
(
position
)
{
case
"
beforeBegin
"
:
rawParentNode
.
insertBefore
(
docFrag
rawNode
)
;
break
;
case
"
afterEnd
"
:
rawParentNode
.
insertBefore
(
docFrag
rawNode
.
nextSibling
)
;
break
;
case
"
afterBegin
"
:
rawNode
.
insertBefore
(
docFrag
rawNode
.
firstChild
)
;
break
;
case
"
beforeEnd
"
:
rawNode
.
appendChild
(
docFrag
)
;
break
;
default
:
throw
new
Error
(
"
Invalid
position
value
.
Must
be
either
"
+
"
'
beforeBegin
'
'
beforeEnd
'
'
afterBegin
'
or
'
afterEnd
'
.
"
)
;
}
return
this
.
attachElements
(
newRawNodes
)
;
}
duplicateNode
:
function
(
{
rawNode
}
)
{
let
clonedNode
=
rawNode
.
cloneNode
(
true
)
;
rawNode
.
parentNode
.
insertBefore
(
clonedNode
rawNode
.
nextSibling
)
;
}
isDocumentOrDocumentElementNode
:
function
(
node
)
{
return
(
(
node
.
rawNode
.
ownerDocument
&
&
node
.
rawNode
.
ownerDocument
.
documentElement
=
=
=
this
.
rawNode
)
|
|
node
.
rawNode
.
nodeType
=
=
=
Ci
.
nsIDOMNode
.
DOCUMENT_NODE
)
;
}
removeNode
:
function
(
node
)
{
if
(
isNodeDead
(
node
)
|
|
this
.
isDocumentOrDocumentElementNode
(
node
)
)
{
throw
Error
(
"
Cannot
remove
document
document
elements
or
dead
nodes
.
"
)
;
}
let
nextSibling
=
this
.
nextSibling
(
node
)
;
node
.
rawNode
.
remove
(
)
;
return
nextSibling
;
}
removeNodes
:
function
(
nodes
)
{
for
(
let
node
of
nodes
)
{
if
(
isNodeDead
(
node
)
|
|
this
.
isDocumentOrDocumentElementNode
(
node
)
)
{
throw
Error
(
"
Cannot
remove
document
document
elements
or
dead
nodes
"
)
;
}
}
for
(
let
node
of
nodes
)
{
node
.
rawNode
.
remove
(
)
;
}
}
insertBefore
:
function
(
node
parent
sibling
)
{
if
(
isNodeDead
(
node
)
|
|
isNodeDead
(
parent
)
|
|
(
sibling
&
&
isNodeDead
(
sibling
)
)
)
{
return
;
}
let
rawNode
=
node
.
rawNode
;
let
rawParent
=
parent
.
rawNode
;
let
rawSibling
=
sibling
?
sibling
.
rawNode
:
null
;
if
(
rawNode
.
parentNode
=
=
=
rawParent
)
{
let
currentNextSibling
=
this
.
nextSibling
(
node
)
;
currentNextSibling
=
currentNextSibling
?
currentNextSibling
.
rawNode
:
null
;
if
(
rawNode
=
=
=
rawSibling
|
|
currentNextSibling
=
=
=
rawSibling
)
{
return
;
}
}
rawParent
.
insertBefore
(
rawNode
rawSibling
)
;
}
editTagName
:
function
(
node
tagName
)
{
if
(
isNodeDead
(
node
)
)
{
return
null
;
}
let
oldNode
=
node
.
rawNode
;
let
newNode
;
try
{
newNode
=
nodeDocument
(
oldNode
)
.
createElement
(
tagName
)
;
}
catch
(
x
)
{
return
Promise
.
reject
(
new
Error
(
"
Could
not
change
node
'
s
tagName
to
"
+
tagName
)
)
;
}
let
attrs
=
oldNode
.
attributes
;
for
(
let
i
=
0
;
i
<
attrs
.
length
;
i
+
+
)
{
newNode
.
setAttribute
(
attrs
[
i
]
.
name
attrs
[
i
]
.
value
)
;
}
oldNode
.
parentNode
.
insertBefore
(
newNode
oldNode
)
;
while
(
oldNode
.
firstChild
)
{
newNode
.
appendChild
(
oldNode
.
firstChild
)
;
}
oldNode
.
remove
(
)
;
return
null
;
}
getMutations
:
function
(
options
=
{
}
)
{
let
pending
=
this
.
_pendingMutations
|
|
[
]
;
this
.
_pendingMutations
=
[
]
;
this
.
_waitingForGetMutations
=
false
;
if
(
options
.
cleanup
)
{
for
(
let
node
of
this
.
_orphaned
)
{
this
.
releaseNode
(
node
)
;
}
this
.
_orphaned
=
new
Set
(
)
;
}
return
pending
;
}
queueMutation
:
function
(
mutation
)
{
if
(
!
this
.
actorID
|
|
this
.
_destroyed
)
{
return
;
}
this
.
_pendingMutations
.
push
(
mutation
)
;
if
(
this
.
_waitingForGetMutations
)
{
return
;
}
if
(
IMMEDIATE_MUTATIONS
.
includes
(
mutation
.
type
)
)
{
this
.
_emitNewMutations
(
)
;
}
else
{
this
.
_throttledEmitNewMutations
(
)
;
}
}
_emitNewMutations
:
function
(
)
{
if
(
!
this
.
actorID
|
|
this
.
_destroyed
)
{
return
;
}
if
(
this
.
_waitingForGetMutations
|
|
this
.
_pendingMutations
.
length
=
=
0
)
{
return
;
}
this
.
_waitingForGetMutations
=
true
;
this
.
emit
(
"
new
-
mutations
"
)
;
}
onMutations
:
function
(
mutations
)
{
this
.
emit
(
"
any
-
mutation
"
)
;
for
(
let
change
of
mutations
)
{
let
targetActor
=
this
.
getNode
(
change
.
target
)
;
if
(
!
targetActor
)
{
continue
;
}
let
targetNode
=
change
.
target
;
let
type
=
change
.
type
;
let
mutation
=
{
type
:
type
target
:
targetActor
.
actorID
}
;
if
(
type
=
=
=
"
attributes
"
)
{
mutation
.
attributeName
=
change
.
attributeName
;
mutation
.
attributeNamespace
=
change
.
attributeNamespace
|
|
undefined
;
mutation
.
newValue
=
targetNode
.
hasAttribute
(
mutation
.
attributeName
)
?
targetNode
.
getAttribute
(
mutation
.
attributeName
)
:
null
;
}
else
if
(
type
=
=
=
"
characterData
"
)
{
mutation
.
newValue
=
targetNode
.
nodeValue
;
this
.
_maybeQueueInlineTextChildMutation
(
change
targetNode
)
;
}
else
if
(
type
=
=
=
"
childList
"
|
|
type
=
=
=
"
nativeAnonymousChildList
"
)
{
let
removedActors
=
[
]
;
let
addedActors
=
[
]
;
for
(
let
removed
of
change
.
removedNodes
)
{
let
removedActor
=
this
.
getNode
(
removed
)
;
if
(
!
removedActor
)
{
continue
;
}
this
.
_orphaned
.
add
(
removedActor
)
;
removedActors
.
push
(
removedActor
.
actorID
)
;
}
for
(
let
added
of
change
.
addedNodes
)
{
let
addedActor
=
this
.
getNode
(
added
)
;
if
(
!
addedActor
)
{
continue
;
}
this
.
_orphaned
.
delete
(
addedActor
)
;
addedActors
.
push
(
addedActor
.
actorID
)
;
}
mutation
.
numChildren
=
targetActor
.
numChildren
;
mutation
.
removed
=
removedActors
;
mutation
.
added
=
addedActors
;
let
inlineTextChild
=
this
.
inlineTextChild
(
targetActor
)
;
if
(
inlineTextChild
)
{
mutation
.
inlineTextChild
=
inlineTextChild
.
form
(
)
;
}
}
this
.
queueMutation
(
mutation
)
;
}
}
_maybeQueueInlineTextChildMutation
:
function
(
mutation
)
{
let
{
oldValue
target
}
=
mutation
;
let
newValue
=
target
.
nodeValue
;
let
limit
=
gValueSummaryLength
;
if
(
(
oldValue
.
length
<
=
limit
&
&
newValue
.
length
<
=
limit
)
|
|
(
oldValue
.
length
>
limit
&
&
newValue
.
length
>
limit
)
)
{
return
;
}
let
parentActor
=
this
.
getNode
(
target
.
parentNode
)
;
if
(
!
parentActor
|
|
parentActor
.
rawNode
.
children
.
length
>
0
)
{
return
;
}
let
inlineTextChild
=
this
.
inlineTextChild
(
parentActor
)
;
this
.
queueMutation
(
{
type
:
"
inlineTextChild
"
target
:
parentActor
.
actorID
inlineTextChild
:
inlineTextChild
?
inlineTextChild
.
form
(
)
:
undefined
}
)
;
}
onSlotchange
:
function
(
event
)
{
let
target
=
event
.
target
;
let
targetActor
=
this
.
getNode
(
target
)
;
if
(
!
targetActor
)
{
return
;
}
this
.
queueMutation
(
{
type
:
"
slotchange
"
target
:
targetActor
.
actorID
}
)
;
}
onFrameLoad
:
function
(
{
window
isTopLevel
}
)
{
let
{
readyState
}
=
window
.
document
;
if
(
readyState
!
=
"
interactive
"
&
&
readyState
!
=
"
complete
"
)
{
window
.
addEventListener
(
"
DOMContentLoaded
"
this
.
onFrameLoad
.
bind
(
this
{
window
isTopLevel
}
)
{
once
:
true
}
)
;
return
;
}
if
(
isTopLevel
)
{
if
(
this
.
rootDoc
&
&
!
Cu
.
isDeadWrapper
(
this
.
rootDoc
)
&
&
this
.
rootDoc
.
defaultView
)
{
this
.
onFrameUnload
(
{
window
:
this
.
rootDoc
.
defaultView
}
)
;
}
this
.
rootWin
=
window
;
this
.
rootDoc
=
window
.
document
;
this
.
rootNode
=
this
.
document
(
)
;
this
.
queueMutation
(
{
type
:
"
newRoot
"
target
:
this
.
rootNode
.
form
(
)
}
)
;
return
;
}
let
frame
=
getFrameElement
(
window
)
;
let
frameActor
=
this
.
getNode
(
frame
)
;
if
(
!
frameActor
)
{
return
;
}
this
.
queueMutation
(
{
type
:
"
frameLoad
"
target
:
frameActor
.
actorID
}
)
;
this
.
queueMutation
(
{
type
:
"
childList
"
target
:
frameActor
.
actorID
added
:
[
]
removed
:
[
]
}
)
;
}
_childOfWindow
:
function
(
window
domNode
)
{
let
win
=
nodeDocument
(
domNode
)
.
defaultView
;
while
(
win
)
{
if
(
win
=
=
=
window
)
{
return
true
;
}
win
=
getFrameElement
(
win
)
;
}
return
false
;
}
onFrameUnload
:
function
(
{
window
}
)
{
let
releasedOrphans
=
[
]
;
for
(
let
retained
of
this
.
_retainedOrphans
)
{
if
(
Cu
.
isDeadWrapper
(
retained
.
rawNode
)
|
|
this
.
_childOfWindow
(
window
retained
.
rawNode
)
)
{
this
.
_retainedOrphans
.
delete
(
retained
)
;
releasedOrphans
.
push
(
retained
.
actorID
)
;
this
.
releaseNode
(
retained
{
force
:
true
}
)
;
}
}
if
(
releasedOrphans
.
length
>
0
)
{
this
.
queueMutation
(
{
target
:
this
.
rootNode
.
actorID
type
:
"
unretained
"
nodes
:
releasedOrphans
}
)
;
}
let
doc
=
window
.
document
;
let
documentActor
=
this
.
getNode
(
doc
)
;
if
(
!
documentActor
)
{
return
;
}
if
(
this
.
rootDoc
=
=
=
doc
)
{
this
.
rootDoc
=
null
;
this
.
rootNode
=
null
;
}
this
.
queueMutation
(
{
type
:
"
documentUnload
"
target
:
documentActor
.
actorID
}
)
;
let
walker
=
this
.
getDocumentWalker
(
doc
)
;
let
parentNode
=
walker
.
parentNode
(
)
;
if
(
parentNode
)
{
this
.
queueMutation
(
{
type
:
"
childList
"
target
:
this
.
getNode
(
parentNode
)
.
actorID
added
:
[
]
removed
:
[
]
}
)
;
}
this
.
releaseNode
(
documentActor
{
force
:
true
}
)
;
}
_isInDOMTree
:
function
(
rawNode
)
{
let
walker
=
this
.
getDocumentWalker
(
rawNode
)
;
let
current
=
walker
.
currentNode
;
while
(
walker
.
parentNode
(
)
)
{
current
=
walker
.
currentNode
;
}
if
(
current
.
nodeType
=
=
=
Ci
.
nsIDOMNode
.
DOCUMENT_FRAGMENT_NODE
|
|
current
!
=
=
this
.
rootDoc
)
{
return
false
;
}
return
true
;
}
isInDOMTree
:
function
(
node
)
{
if
(
isNodeDead
(
node
)
)
{
return
false
;
}
return
this
.
_isInDOMTree
(
node
.
rawNode
)
;
}
getNodeActorFromObjectActor
:
function
(
objectActorID
)
{
let
actor
=
this
.
conn
.
getActor
(
objectActorID
)
;
if
(
!
actor
)
{
return
null
;
}
let
debuggerObject
=
this
.
conn
.
getActor
(
objectActorID
)
.
obj
;
let
rawNode
=
debuggerObject
.
unsafeDereference
(
)
;
if
(
!
this
.
_isInDOMTree
(
rawNode
)
)
{
return
null
;
}
if
(
rawNode
.
defaultView
&
&
rawNode
=
=
=
rawNode
.
defaultView
.
document
)
{
rawNode
=
rawNode
.
documentElement
;
}
return
this
.
attachElement
(
rawNode
)
;
}
getNodeActorFromWindowID
:
function
(
windowID
)
{
let
win
;
try
{
win
=
Services
.
wm
.
getOuterWindowWithId
(
windowID
)
;
}
catch
(
e
)
{
}
if
(
!
win
)
{
return
{
error
:
"
noWindow
"
message
:
"
The
related
docshell
is
destroyed
or
not
found
"
}
;
}
else
if
(
!
win
.
frameElement
)
{
return
this
.
attachElement
(
win
.
document
.
body
|
|
win
.
document
.
documentElement
)
;
}
return
this
.
attachElement
(
win
.
frameElement
)
;
}
getStyleSheetOwnerNode
:
function
(
styleSheetActorID
)
{
return
this
.
getNodeFromActor
(
styleSheetActorID
[
"
ownerNode
"
]
)
;
}
getNodeFromActor
:
function
(
actorID
path
)
{
let
actor
=
this
.
conn
.
getActor
(
actorID
)
;
if
(
!
actor
)
{
return
null
;
}
let
obj
=
actor
;
for
(
let
name
of
path
)
{
if
(
!
(
name
in
obj
)
)
{
return
null
;
}
obj
=
obj
[
name
]
;
}
return
this
.
attachElement
(
obj
)
;
}
getLayoutInspector
:
function
(
)
{
if
(
!
this
.
layoutActor
)
{
this
.
layoutActor
=
new
LayoutActor
(
this
.
conn
this
.
tabActor
this
)
;
}
return
this
.
layoutActor
;
}
getOffsetParent
:
function
(
node
)
{
if
(
isNodeDead
(
node
)
)
{
return
null
;
}
let
offsetParent
=
node
.
rawNode
.
offsetParent
;
if
(
!
offsetParent
)
{
return
null
;
}
return
this
.
_ref
(
offsetParent
)
;
}
}
)
;
exports
.
WalkerActor
=
WalkerActor
;
