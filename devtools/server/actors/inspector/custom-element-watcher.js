"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
InspectorUtils
=
require
(
"
InspectorUtils
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
class
CustomElementWatcher
extends
EventEmitter
{
constructor
(
chromeEventHandler
)
{
super
(
)
;
this
.
chromeEventHandler
=
chromeEventHandler
;
this
.
_onCustomElementDefined
=
this
.
_onCustomElementDefined
.
bind
(
this
)
;
this
.
chromeEventHandler
.
addEventListener
(
"
customelementdefined
"
this
.
_onCustomElementDefined
)
;
this
.
watchedRegistries
=
new
WeakMap
(
)
;
}
destroy
(
)
{
this
.
watchedRegistries
=
null
;
this
.
chromeEventHandler
.
removeEventListener
(
"
customelementdefined
"
this
.
_onCustomElementDefined
)
;
}
manageNode
(
nodeActor
)
{
if
(
!
this
.
_isValidNode
(
nodeActor
)
)
{
return
;
}
if
(
!
this
.
_shouldWatchDefinition
(
nodeActor
)
)
{
return
;
}
const
registry
=
nodeActor
.
rawNode
.
ownerGlobal
.
customElements
;
const
registryMap
=
this
.
_getMapForRegistry
(
registry
)
;
const
name
=
nodeActor
.
rawNode
.
localName
;
if
(
!
registryMap
.
has
(
name
)
)
{
registryMap
.
set
(
name
new
Set
(
)
)
;
}
registryMap
.
get
(
name
)
.
add
(
nodeActor
)
;
}
unmanageNode
(
nodeActor
)
{
if
(
!
this
.
_isValidNode
(
nodeActor
)
)
{
return
;
}
const
win
=
nodeActor
.
rawNode
.
ownerGlobal
;
const
registry
=
win
.
customElements
;
const
registryMap
=
this
.
_getMapForRegistry
(
registry
)
;
const
name
=
nodeActor
.
rawNode
.
localName
;
if
(
registryMap
&
&
registryMap
.
has
(
name
)
)
{
registryMap
.
get
(
name
)
.
delete
(
nodeActor
)
;
}
}
_getMapForRegistry
(
registry
)
{
if
(
!
this
.
watchedRegistries
.
has
(
registry
)
)
{
this
.
watchedRegistries
.
set
(
registry
new
Map
(
)
)
;
}
return
this
.
watchedRegistries
.
get
(
registry
)
;
}
_shouldWatchDefinition
(
nodeActor
)
{
const
doc
=
nodeActor
.
rawNode
.
ownerDocument
;
const
namespaceURI
=
doc
.
documentElement
.
namespaceURI
;
const
name
=
nodeActor
.
rawNode
.
localName
;
const
isValidName
=
InspectorUtils
.
isCustomElementName
(
name
namespaceURI
)
;
const
customElements
=
doc
.
defaultView
.
customElements
;
return
isValidName
&
&
!
customElements
.
get
(
name
)
;
}
_onCustomElementDefined
(
event
)
{
const
doc
=
event
.
target
;
const
registry
=
doc
.
defaultView
.
customElements
;
const
registryMap
=
this
.
watchedRegistries
.
get
(
registry
)
;
const
name
=
event
.
detail
;
const
nodeActors
=
registryMap
.
get
(
name
)
;
this
.
emit
(
"
element
-
defined
"
nodeActors
)
;
registryMap
.
delete
(
name
)
;
}
_isValidNode
(
nodeActor
)
{
const
node
=
nodeActor
.
rawNode
;
return
!
Cu
.
isDeadWrapper
(
node
)
&
&
node
.
ownerGlobal
&
&
node
.
ownerDocument
&
&
node
.
ownerDocument
.
documentElement
;
}
}
exports
.
CustomElementWatcher
=
CustomElementWatcher
;
