"
use
strict
"
;
const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
const
protocol
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
LongStringActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
string
.
js
"
)
;
const
{
inspectorSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
inspector
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
InspectorActorUtils
"
"
resource
:
/
/
devtools
/
server
/
actors
/
inspector
/
utils
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
WalkerActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
inspector
/
walker
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
EyeDropper
"
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
/
eye
-
dropper
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
PageStyleActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
page
-
style
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
[
"
CustomHighlighterActor
"
"
isTypeRegistered
"
"
HighlighterEnvironment
"
]
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
CompatibilityActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
compatibility
/
compatibility
.
js
"
true
)
;
const
SVG_NS
=
"
http
:
/
/
www
.
w3
.
org
/
2000
/
svg
"
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
exports
.
InspectorActor
=
protocol
.
ActorClassWithSpec
(
inspectorSpec
{
initialize
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
targetActor
=
targetActor
;
this
.
_onColorPicked
=
this
.
_onColorPicked
.
bind
(
this
)
;
this
.
_onColorPickCanceled
=
this
.
_onColorPickCanceled
.
bind
(
this
)
;
this
.
destroyEyeDropper
=
this
.
destroyEyeDropper
.
bind
(
this
)
;
}
destroy
(
)
{
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
this
.
destroyEyeDropper
(
)
;
this
.
_compatibility
=
null
;
this
.
_pageStylePromise
=
null
;
this
.
_walkerPromise
=
null
;
this
.
walker
=
null
;
this
.
targetActor
=
null
;
}
get
window
(
)
{
return
this
.
targetActor
.
window
;
}
getWalker
(
options
=
{
}
)
{
if
(
this
.
_walkerPromise
)
{
return
this
.
_walkerPromise
;
}
this
.
_walkerPromise
=
new
Promise
(
resolve
=
>
{
const
domReady
=
(
)
=
>
{
const
targetActor
=
this
.
targetActor
;
this
.
walker
=
WalkerActor
(
this
.
conn
targetActor
options
)
;
this
.
manage
(
this
.
walker
)
;
this
.
walker
.
once
(
"
destroyed
"
(
)
=
>
{
this
.
_walkerPromise
=
null
;
this
.
_pageStylePromise
=
null
;
}
)
;
resolve
(
this
.
walker
)
;
}
;
if
(
this
.
window
.
document
.
readyState
=
=
=
"
loading
"
)
{
const
abortController
=
new
AbortController
(
)
;
Promise
.
race
(
[
new
Promise
(
r
=
>
{
this
.
window
.
addEventListener
(
"
DOMContentLoaded
"
r
{
capture
:
true
once
:
true
signal
:
abortController
.
signal
}
)
;
}
)
new
Promise
(
r
=
>
setTimeout
(
r
500
)
)
]
)
.
then
(
domReady
)
.
finally
(
(
)
=
>
abortController
.
abort
(
)
)
;
}
else
{
domReady
(
)
;
}
}
)
;
return
this
.
_walkerPromise
;
}
getPageStyle
(
)
{
if
(
this
.
_pageStylePromise
)
{
return
this
.
_pageStylePromise
;
}
this
.
_pageStylePromise
=
this
.
getWalker
(
)
.
then
(
walker
=
>
{
const
pageStyle
=
PageStyleActor
(
this
)
;
this
.
manage
(
pageStyle
)
;
return
pageStyle
;
}
)
;
return
this
.
_pageStylePromise
;
}
getCompatibility
(
)
{
if
(
this
.
_compatibility
)
{
return
this
.
_compatibility
;
}
this
.
_compatibility
=
CompatibilityActor
(
this
)
;
this
.
manage
(
this
.
_compatibility
)
;
return
this
.
_compatibility
;
}
async
getHighlighterByType
(
typeName
)
{
if
(
isTypeRegistered
(
typeName
)
)
{
const
highlighterActor
=
CustomHighlighterActor
(
this
typeName
)
;
if
(
highlighterActor
.
instance
.
isReady
)
{
await
highlighterActor
.
instance
.
isReady
;
}
return
highlighterActor
;
}
return
null
;
}
getImageDataFromURL
(
url
maxDim
)
{
const
img
=
new
this
.
window
.
Image
(
)
;
img
.
src
=
url
;
return
InspectorActorUtils
.
imageToImageData
(
img
maxDim
)
.
then
(
imageData
=
>
{
return
{
data
:
LongStringActor
(
this
.
conn
imageData
.
data
)
size
:
imageData
.
size
}
;
}
)
;
}
resolveRelativeURL
(
url
node
)
{
const
document
=
InspectorActorUtils
.
isNodeDead
(
node
)
?
this
.
window
.
document
:
InspectorActorUtils
.
nodeDocument
(
node
.
rawNode
)
;
if
(
!
document
)
{
return
url
;
}
const
baseURI
=
Services
.
io
.
newURI
(
document
.
location
.
href
)
;
return
Services
.
io
.
newURI
(
url
null
baseURI
)
.
spec
;
}
createEyeDropper
(
)
{
this
.
destroyEyeDropper
(
)
;
this
.
_highlighterEnv
=
new
HighlighterEnvironment
(
)
;
this
.
_highlighterEnv
.
initFromTargetActor
(
this
.
targetActor
)
;
this
.
_eyeDropper
=
new
EyeDropper
(
this
.
_highlighterEnv
)
;
return
this
.
_eyeDropper
.
isReady
;
}
destroyEyeDropper
(
)
{
if
(
this
.
_eyeDropper
)
{
this
.
cancelPickColorFromPage
(
)
;
this
.
_eyeDropper
.
destroy
(
)
;
this
.
_eyeDropper
=
null
;
this
.
_highlighterEnv
.
destroy
(
)
;
this
.
_highlighterEnv
=
null
;
}
}
async
pickColorFromPage
(
options
)
{
await
this
.
createEyeDropper
(
)
;
this
.
_eyeDropper
.
show
(
this
.
window
.
document
.
documentElement
options
)
;
this
.
_eyeDropper
.
once
(
"
selected
"
this
.
_onColorPicked
)
;
this
.
_eyeDropper
.
once
(
"
canceled
"
this
.
_onColorPickCanceled
)
;
this
.
targetActor
.
once
(
"
will
-
navigate
"
this
.
destroyEyeDropper
)
;
}
cancelPickColorFromPage
(
)
{
if
(
this
.
_eyeDropper
)
{
this
.
_eyeDropper
.
hide
(
)
;
this
.
_eyeDropper
.
off
(
"
selected
"
this
.
_onColorPicked
)
;
this
.
_eyeDropper
.
off
(
"
canceled
"
this
.
_onColorPickCanceled
)
;
this
.
targetActor
.
off
(
"
will
-
navigate
"
this
.
destroyEyeDropper
)
;
}
}
supportsHighlighters
(
)
{
const
doc
=
this
.
targetActor
.
window
.
document
;
const
ns
=
doc
.
documentElement
.
namespaceURI
;
if
(
ns
=
=
=
XUL_NS
)
{
return
false
;
}
if
(
ns
=
=
=
SVG_NS
)
{
return
false
;
}
return
true
;
}
_onColorPicked
(
color
)
{
this
.
emit
(
"
color
-
picked
"
color
)
;
}
_onColorPickCanceled
(
)
{
this
.
emit
(
"
color
-
pick
-
canceled
"
)
;
}
}
)
;
