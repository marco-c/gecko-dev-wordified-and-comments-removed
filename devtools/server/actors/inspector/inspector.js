"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
LongStringActor
}
=
require
(
"
devtools
/
server
/
actors
/
string
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
const
{
inspectorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
inspector
"
)
;
loader
.
lazyRequireGetter
(
this
"
InspectorActorUtils
"
"
devtools
/
server
/
actors
/
inspector
/
utils
"
)
;
loader
.
lazyRequireGetter
(
this
"
WalkerActor
"
"
devtools
/
server
/
actors
/
inspector
/
walker
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
EyeDropper
"
"
devtools
/
server
/
actors
/
highlighters
/
eye
-
dropper
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
PageStyleActor
"
"
devtools
/
server
/
actors
/
styles
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
HighlighterActor
"
"
devtools
/
server
/
actors
/
highlighters
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
CustomHighlighterActor
"
"
devtools
/
server
/
actors
/
highlighters
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
isTypeRegistered
"
"
devtools
/
server
/
actors
/
highlighters
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
HighlighterEnvironment
"
"
devtools
/
server
/
actors
/
highlighters
"
true
)
;
const
SVG_NS
=
"
http
:
/
/
www
.
w3
.
org
/
2000
/
svg
"
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
exports
.
InspectorActor
=
protocol
.
ActorClassWithSpec
(
inspectorSpec
{
initialize
:
function
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
targetActor
=
targetActor
;
this
.
_onColorPicked
=
this
.
_onColorPicked
.
bind
(
this
)
;
this
.
_onColorPickCanceled
=
this
.
_onColorPickCanceled
.
bind
(
this
)
;
this
.
destroyEyeDropper
=
this
.
destroyEyeDropper
.
bind
(
this
)
;
}
destroy
:
function
(
)
{
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
this
.
destroyEyeDropper
(
)
;
this
.
_highlighterPromise
=
null
;
this
.
_pageStylePromise
=
null
;
this
.
_walkerPromise
=
null
;
this
.
walker
=
null
;
this
.
targetActor
=
null
;
}
get
window
(
)
{
return
this
.
targetActor
.
window
;
}
getWalker
:
function
(
options
=
{
}
)
{
if
(
this
.
_walkerPromise
)
{
return
this
.
_walkerPromise
;
}
const
deferred
=
defer
(
)
;
this
.
_walkerPromise
=
deferred
.
promise
;
const
window
=
this
.
window
;
const
domReady
=
(
)
=
>
{
const
targetActor
=
this
.
targetActor
;
window
.
removeEventListener
(
"
DOMContentLoaded
"
domReady
true
)
;
this
.
walker
=
WalkerActor
(
this
.
conn
targetActor
options
)
;
this
.
manage
(
this
.
walker
)
;
this
.
walker
.
once
(
"
destroyed
"
(
)
=
>
{
this
.
_walkerPromise
=
null
;
this
.
_pageStylePromise
=
null
;
}
)
;
deferred
.
resolve
(
this
.
walker
)
;
}
;
if
(
window
.
document
.
readyState
=
=
=
"
loading
"
)
{
window
.
addEventListener
(
"
DOMContentLoaded
"
domReady
true
)
;
}
else
{
domReady
(
)
;
}
return
this
.
_walkerPromise
;
}
getPageStyle
:
function
(
)
{
if
(
this
.
_pageStylePromise
)
{
return
this
.
_pageStylePromise
;
}
this
.
_pageStylePromise
=
this
.
getWalker
(
)
.
then
(
walker
=
>
{
const
pageStyle
=
PageStyleActor
(
this
)
;
this
.
manage
(
pageStyle
)
;
return
pageStyle
;
}
)
;
return
this
.
_pageStylePromise
;
}
getHighlighter
:
function
(
autohide
)
{
if
(
this
.
_highlighterPromise
)
{
return
this
.
_highlighterPromise
;
}
this
.
_highlighterPromise
=
this
.
getWalker
(
)
.
then
(
walker
=
>
{
const
highlighter
=
HighlighterActor
(
this
autohide
)
;
this
.
manage
(
highlighter
)
;
return
highlighter
;
}
)
;
return
this
.
_highlighterPromise
;
}
getHighlighterByType
:
function
(
typeName
)
{
if
(
isTypeRegistered
(
typeName
)
)
{
return
CustomHighlighterActor
(
this
typeName
)
;
}
return
null
;
}
getImageDataFromURL
:
function
(
url
maxDim
)
{
const
img
=
new
this
.
window
.
Image
(
)
;
img
.
src
=
url
;
return
InspectorActorUtils
.
imageToImageData
(
img
maxDim
)
.
then
(
imageData
=
>
{
return
{
data
:
LongStringActor
(
this
.
conn
imageData
.
data
)
size
:
imageData
.
size
}
;
}
)
;
}
resolveRelativeURL
:
function
(
url
node
)
{
const
document
=
InspectorActorUtils
.
isNodeDead
(
node
)
?
this
.
window
.
document
:
InspectorActorUtils
.
nodeDocument
(
node
.
rawNode
)
;
if
(
!
document
)
{
return
url
;
}
const
baseURI
=
Services
.
io
.
newURI
(
document
.
location
.
href
)
;
return
Services
.
io
.
newURI
(
url
null
baseURI
)
.
spec
;
}
createEyeDropper
:
function
(
)
{
this
.
destroyEyeDropper
(
)
;
this
.
_highlighterEnv
=
new
HighlighterEnvironment
(
)
;
this
.
_highlighterEnv
.
initFromTargetActor
(
this
.
targetActor
)
;
this
.
_eyeDropper
=
new
EyeDropper
(
this
.
_highlighterEnv
)
;
}
destroyEyeDropper
:
function
(
)
{
if
(
this
.
_eyeDropper
)
{
this
.
cancelPickColorFromPage
(
)
;
this
.
_eyeDropper
.
destroy
(
)
;
this
.
_eyeDropper
=
null
;
this
.
_highlighterEnv
.
destroy
(
)
;
this
.
_highlighterEnv
=
null
;
}
}
pickColorFromPage
:
function
(
options
)
{
this
.
createEyeDropper
(
)
;
this
.
_eyeDropper
.
show
(
this
.
window
.
document
.
documentElement
options
)
;
this
.
_eyeDropper
.
once
(
"
selected
"
this
.
_onColorPicked
)
;
this
.
_eyeDropper
.
once
(
"
canceled
"
this
.
_onColorPickCanceled
)
;
this
.
targetActor
.
once
(
"
will
-
navigate
"
this
.
destroyEyeDropper
)
;
}
cancelPickColorFromPage
:
function
(
)
{
if
(
this
.
_eyeDropper
)
{
this
.
_eyeDropper
.
hide
(
)
;
this
.
_eyeDropper
.
off
(
"
selected
"
this
.
_onColorPicked
)
;
this
.
_eyeDropper
.
off
(
"
canceled
"
this
.
_onColorPickCanceled
)
;
this
.
targetActor
.
off
(
"
will
-
navigate
"
this
.
destroyEyeDropper
)
;
}
}
supportsHighlighters
:
function
(
)
{
const
doc
=
this
.
targetActor
.
window
.
document
;
const
ns
=
doc
.
documentElement
.
namespaceURI
;
if
(
ns
=
=
=
XUL_NS
)
{
return
false
;
}
if
(
ns
=
=
=
SVG_NS
)
{
return
false
;
}
return
true
;
}
_onColorPicked
:
function
(
color
)
{
this
.
emit
(
"
color
-
picked
"
color
)
;
}
_onColorPickCanceled
:
function
(
)
{
this
.
emit
(
"
color
-
pick
-
canceled
"
)
;
}
}
)
;
