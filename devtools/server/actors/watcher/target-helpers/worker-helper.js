"
use
strict
"
;
const
DEVTOOLS_WORKER_JS_WINDOW_ACTOR_NAME
=
"
DevToolsWorker
"
;
async
function
createTargets
(
watcher
)
{
const
browsingContexts
=
watcher
.
getAllBrowsingContexts
(
{
acceptSameProcessIframes
:
true
forceAcceptTopLevelTarget
:
true
}
)
;
const
promises
=
[
]
;
for
(
const
browsingContext
of
browsingContexts
)
{
const
promise
=
browsingContext
.
currentWindowGlobal
.
getActor
(
DEVTOOLS_WORKER_JS_WINDOW_ACTOR_NAME
)
.
instantiateWorkerTargets
(
{
watcherActorID
:
watcher
.
actorID
connectionPrefix
:
watcher
.
conn
.
prefix
sessionContext
:
watcher
.
sessionContext
sessionData
:
watcher
.
sessionData
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
async
function
destroyTargets
(
watcher
)
{
const
browsingContexts
=
watcher
.
getAllBrowsingContexts
(
{
acceptSameProcessIframes
:
true
forceAcceptTopLevelTarget
:
true
}
)
;
for
(
const
browsingContext
of
browsingContexts
)
{
let
windowActor
;
try
{
windowActor
=
browsingContext
.
currentWindowGlobal
.
getActor
(
DEVTOOLS_WORKER_JS_WINDOW_ACTOR_NAME
)
;
}
catch
(
e
)
{
continue
;
}
windowActor
.
destroyWorkerTargets
(
{
watcherActorID
:
watcher
.
actorID
sessionContext
:
watcher
.
sessionContext
}
)
;
}
}
async
function
addOrSetSessionDataEntry
(
{
watcher
type
entries
updateType
}
)
{
const
browsingContexts
=
watcher
.
getAllBrowsingContexts
(
{
acceptSameProcessIframes
:
true
forceAcceptTopLevelTarget
:
true
}
)
;
const
promises
=
[
]
;
for
(
const
browsingContext
of
browsingContexts
)
{
const
promise
=
browsingContext
.
currentWindowGlobal
.
getActor
(
DEVTOOLS_WORKER_JS_WINDOW_ACTOR_NAME
)
.
addOrSetSessionDataEntry
(
{
watcherActorID
:
watcher
.
actorID
sessionContext
:
watcher
.
sessionContext
type
entries
updateType
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
function
removeSessionDataEntry
(
{
watcher
type
entries
}
)
{
const
browsingContexts
=
watcher
.
getAllBrowsingContexts
(
{
acceptSameProcessIframes
:
true
forceAcceptTopLevelTarget
:
true
}
)
;
for
(
const
browsingContext
of
browsingContexts
)
{
browsingContext
.
currentWindowGlobal
.
getActor
(
DEVTOOLS_WORKER_JS_WINDOW_ACTOR_NAME
)
.
removeSessionDataEntry
(
{
watcherActorID
:
watcher
.
actorID
sessionContext
:
watcher
.
sessionContext
type
entries
}
)
;
}
}
module
.
exports
=
{
createTargets
destroyTargets
addOrSetSessionDataEntry
removeSessionDataEntry
}
;
