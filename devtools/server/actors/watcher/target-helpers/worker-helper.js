"
use
strict
"
;
const
{
getAllRemoteBrowsingContexts
shouldNotifyWindowGlobal
}
=
require
(
"
devtools
/
server
/
actors
/
watcher
/
target
-
helpers
/
utils
.
js
"
)
;
const
DEVTOOLS_WORKER_JS_WINDOW_ACTOR_NAME
=
"
DevToolsWorker
"
;
async
function
createTargets
(
watcher
)
{
const
browsingContexts
=
getFilteredBrowsingContext
(
watcher
.
browserElement
)
;
const
promises
=
[
]
;
for
(
const
browsingContext
of
browsingContexts
)
{
const
promise
=
browsingContext
.
currentWindowGlobal
.
getActor
(
DEVTOOLS_WORKER_JS_WINDOW_ACTOR_NAME
)
.
instantiateWorkerTargets
(
{
watcherActorID
:
watcher
.
actorID
connectionPrefix
:
watcher
.
conn
.
prefix
browserId
:
watcher
.
browserId
watchedData
:
watcher
.
watchedData
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
async
function
destroyTargets
(
watcher
)
{
const
browsingContexts
=
getFilteredBrowsingContext
(
watcher
.
browserElement
)
;
for
(
const
browsingContext
of
browsingContexts
)
{
browsingContext
.
currentWindowGlobal
.
getActor
(
DEVTOOLS_WORKER_JS_WINDOW_ACTOR_NAME
)
.
destroyWorkerTargets
(
{
watcherActorID
:
watcher
.
actorID
browserId
:
watcher
.
browserId
}
)
;
}
}
async
function
addWatcherDataEntry
(
{
watcher
type
entries
}
)
{
const
browsingContexts
=
getFilteredBrowsingContext
(
watcher
.
browserElement
)
;
const
promises
=
[
]
;
for
(
const
browsingContext
of
browsingContexts
)
{
const
promise
=
browsingContext
.
currentWindowGlobal
.
getActor
(
DEVTOOLS_WORKER_JS_WINDOW_ACTOR_NAME
)
.
addWatcherDataEntry
(
{
watcherActorID
:
watcher
.
actorID
browserId
:
watcher
.
browserId
type
entries
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
function
removeWatcherDataEntry
(
{
watcher
type
entries
}
)
{
const
browsingContexts
=
getFilteredBrowsingContext
(
watcher
.
browserElement
)
;
for
(
const
browsingContext
of
browsingContexts
)
{
browsingContext
.
currentWindowGlobal
.
getActor
(
DEVTOOLS_WORKER_JS_WINDOW_ACTOR_NAME
)
.
removeWatcherDataEntry
(
{
watcherActorID
:
watcher
.
actorID
browserId
:
watcher
.
browserId
type
entries
}
)
;
}
}
function
getFilteredBrowsingContext
(
browserElement
)
{
const
browsingContexts
=
getAllRemoteBrowsingContexts
(
browserElement
?
.
browsingContext
)
;
if
(
browserElement
?
.
browsingContext
)
{
browsingContexts
.
push
(
browserElement
?
.
browsingContext
)
;
}
return
browsingContexts
.
filter
(
browsingContext
=
>
shouldNotifyWindowGlobal
(
browsingContext
browserElement
?
.
browserId
{
acceptNonRemoteFrame
:
true
}
)
)
;
}
module
.
exports
=
{
createTargets
destroyTargets
addWatcherDataEntry
removeWatcherDataEntry
}
;
