"
use
strict
"
;
function
getAllContentProcesses
(
)
{
return
ChromeUtils
.
getAllDOMProcesses
(
)
.
filter
(
process
=
>
process
.
childID
!
=
=
0
)
;
}
async
function
createTargets
(
watcher
)
{
const
promises
=
[
]
;
for
(
const
domProcess
of
getAllContentProcesses
(
)
)
{
const
processActor
=
domProcess
.
getActor
(
"
DevToolsProcess
"
)
;
promises
.
push
(
processActor
.
instantiateTarget
(
{
watcherActorID
:
watcher
.
actorID
connectionPrefix
:
watcher
.
conn
.
prefix
sessionContext
:
watcher
.
sessionContext
sessionData
:
watcher
.
sessionData
}
)
)
;
}
await
Promise
.
all
(
promises
)
;
}
function
destroyTargets
(
watcher
options
)
{
for
(
const
domProcess
of
getAllContentProcesses
(
)
)
{
const
processActor
=
domProcess
.
getActor
(
"
DevToolsProcess
"
)
;
processActor
.
destroyTarget
(
{
watcherActorID
:
watcher
.
actorID
isModeSwitching
:
options
.
isModeSwitching
}
)
;
}
}
async
function
addOrSetSessionDataEntry
(
{
watcher
type
entries
updateType
}
)
{
const
promises
=
[
]
;
for
(
const
domProcess
of
getAllContentProcesses
(
)
)
{
const
processActor
=
domProcess
.
getActor
(
"
DevToolsProcess
"
)
;
promises
.
push
(
processActor
.
addOrSetSessionDataEntry
(
{
watcherActorID
:
watcher
.
actorID
type
entries
updateType
}
)
)
;
}
await
Promise
.
all
(
promises
)
;
}
async
function
removeSessionDataEntry
(
{
watcher
type
entries
}
)
{
const
promises
=
[
]
;
for
(
const
domProcess
of
getAllContentProcesses
(
)
)
{
const
processActor
=
domProcess
.
getActor
(
"
DevToolsProcess
"
)
;
promises
.
push
(
processActor
.
removeSessionDataEntry
(
{
watcherActorID
:
watcher
.
actorID
type
entries
}
)
)
;
}
await
Promise
.
all
(
promises
)
;
}
module
.
exports
=
{
createTargets
destroyTargets
addOrSetSessionDataEntry
removeSessionDataEntry
}
;
