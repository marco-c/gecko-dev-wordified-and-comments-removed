"
use
strict
"
;
const
{
WatcherRegistry
}
=
require
(
"
devtools
/
server
/
actors
/
watcher
/
WatcherRegistry
.
jsm
"
)
;
const
{
WindowGlobalLogger
}
=
require
(
"
devtools
/
server
/
connectors
/
js
-
window
-
actor
/
WindowGlobalLogger
.
jsm
"
)
;
const
Targets
=
require
(
"
devtools
/
server
/
actors
/
targets
/
index
"
)
;
const
{
getAllRemoteBrowsingContexts
shouldNotifyWindowGlobal
}
=
require
(
"
devtools
/
server
/
actors
/
watcher
/
target
-
helpers
/
utils
.
js
"
)
;
async
function
createTargets
(
watcher
)
{
const
browsingContexts
=
getFilteredRemoteBrowsingContext
(
watcher
.
browserElement
)
;
const
promises
=
[
]
;
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
const
promise
=
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
instantiateTarget
(
{
watcherActorID
:
watcher
.
actorID
connectionPrefix
:
watcher
.
conn
.
prefix
browserId
:
watcher
.
browserId
watchedData
:
watcher
.
watchedData
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
function
destroyTargets
(
watcher
)
{
const
browsingContexts
=
getFilteredRemoteBrowsingContext
(
watcher
.
browserElement
)
;
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
destroyTarget
(
{
watcherActorID
:
watcher
.
actorID
browserId
:
watcher
.
browserId
}
)
;
}
}
async
function
addWatcherDataEntry
(
{
watcher
type
entries
}
)
{
const
browsingContexts
=
getWatchingBrowsingContexts
(
watcher
)
;
const
promises
=
[
]
;
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
const
promise
=
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
addWatcherDataEntry
(
{
watcherActorID
:
watcher
.
actorID
browserId
:
watcher
.
browserId
type
entries
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
function
removeWatcherDataEntry
(
{
watcher
type
entries
}
)
{
const
browsingContexts
=
getWatchingBrowsingContexts
(
watcher
)
;
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
removeWatcherDataEntry
(
{
watcherActorID
:
watcher
.
actorID
browserId
:
watcher
.
browserId
type
entries
}
)
;
}
}
module
.
exports
=
{
createTargets
destroyTargets
addWatcherDataEntry
removeWatcherDataEntry
}
;
function
getWatchingBrowsingContexts
(
watcher
)
{
const
watchingAdditionalTargets
=
WatcherRegistry
.
isWatchingTargets
(
watcher
Targets
.
TYPES
.
FRAME
)
;
const
{
browserElement
}
=
watcher
;
const
browsingContexts
=
watchingAdditionalTargets
?
getFilteredRemoteBrowsingContext
(
browserElement
)
:
[
]
;
if
(
browserElement
)
{
const
topBrowsingContext
=
browserElement
.
browsingContext
;
if
(
topBrowsingContext
.
currentWindowGlobal
.
osPid
!
=
-
1
)
{
browsingContexts
.
push
(
topBrowsingContext
)
;
}
}
return
browsingContexts
;
}
function
getFilteredRemoteBrowsingContext
(
browserElement
)
{
return
getAllRemoteBrowsingContexts
(
browserElement
?
.
browsingContext
)
.
filter
(
browsingContext
=
>
shouldNotifyWindowGlobal
(
browsingContext
browserElement
?
.
browserId
)
)
;
}
const
DEBUG
=
false
;
function
logWindowGlobal
(
windowGlobal
message
)
{
if
(
!
DEBUG
)
{
return
;
}
WindowGlobalLogger
.
logWindowGlobal
(
windowGlobal
message
)
;
}
