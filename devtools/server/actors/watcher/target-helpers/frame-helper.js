"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
WatcherRegistry
}
=
require
(
"
devtools
/
server
/
actors
/
watcher
/
WatcherRegistry
.
jsm
"
)
;
const
{
WindowGlobalLogger
}
=
require
(
"
devtools
/
server
/
connectors
/
js
-
window
-
actor
/
WindowGlobalLogger
.
jsm
"
)
;
const
Targets
=
require
(
"
devtools
/
server
/
actors
/
targets
/
index
"
)
;
const
{
getAllRemoteBrowsingContexts
shouldNotifyWindowGlobal
}
=
require
(
"
devtools
/
server
/
actors
/
watcher
/
target
-
helpers
/
utils
.
js
"
)
;
const
browsingContextAttachedObserverByWatcher
=
new
Map
(
)
;
const
isEveryFrameTargetEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
every
-
frame
-
target
.
enabled
"
false
)
;
async
function
createTargets
(
watcher
)
{
if
(
watcher
.
context
.
type
=
=
"
browser
-
element
"
)
{
watcher
.
browserElement
.
browsingContext
.
watchedByDevTools
=
true
;
}
if
(
!
browsingContextAttachedObserverByWatcher
.
has
(
watcher
)
)
{
const
browserId
=
watcher
.
context
.
browserId
;
const
onBrowsingContextAttached
=
browsingContext
=
>
{
if
(
!
browsingContext
.
parent
&
&
(
watcher
.
context
.
type
!
=
"
browser
-
element
"
|
|
browserId
=
=
=
browsingContext
.
browserId
)
)
{
browsingContext
.
watchedByDevTools
=
true
;
}
}
;
Services
.
obs
.
addObserver
(
onBrowsingContextAttached
"
browsing
-
context
-
attached
"
)
;
browsingContextAttachedObserverByWatcher
.
set
(
watcher
onBrowsingContextAttached
)
;
}
if
(
watcher
.
isServerTargetSwitchingEnabled
&
&
watcher
.
browserElement
)
{
await
createTargetForBrowsingContext
(
{
watcher
browsingContext
:
watcher
.
browserElement
.
browsingContext
retryOnAbortError
:
true
}
)
;
}
const
browsingContexts
=
getFilteredRemoteBrowsingContext
(
watcher
.
browserElement
)
;
await
Promise
.
allSettled
(
browsingContexts
.
map
(
browsingContext
=
>
createTargetForBrowsingContext
(
{
watcher
browsingContext
}
)
)
)
;
}
async
function
createTargetForBrowsingContext
(
{
watcher
browsingContext
retryOnAbortError
=
false
}
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
if
(
!
browsingContext
.
parent
)
{
browsingContext
.
watchedByDevTools
=
true
;
}
try
{
await
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
instantiateTarget
(
{
watcherActorID
:
watcher
.
actorID
connectionPrefix
:
watcher
.
conn
.
prefix
context
:
watcher
.
context
sessionData
:
watcher
.
sessionData
}
)
;
}
catch
(
e
)
{
console
.
warn
(
"
Failed
to
create
DevTools
Frame
target
for
browsingContext
"
browsingContext
.
id
"
:
"
e
retryOnAbortError
?
"
retrying
"
:
"
"
)
;
if
(
retryOnAbortError
&
&
e
.
name
=
=
=
"
AbortError
"
)
{
await
createTargetForBrowsingContext
(
{
watcher
browsingContext
retryOnAbortError
}
)
;
}
else
{
throw
e
;
}
}
}
function
destroyTargets
(
watcher
)
{
const
browsingContexts
=
getFilteredRemoteBrowsingContext
(
watcher
.
browserElement
)
;
if
(
watcher
.
isServerTargetSwitchingEnabled
&
&
watcher
.
context
.
type
=
=
"
browser
-
element
"
)
{
browsingContexts
.
push
(
watcher
.
browserElement
.
browsingContext
)
;
}
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
if
(
!
browsingContext
.
parent
)
{
browsingContext
.
watchedByDevTools
=
false
;
}
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
destroyTarget
(
{
watcherActorID
:
watcher
.
actorID
context
:
watcher
.
context
}
)
;
}
if
(
watcher
.
context
.
type
=
=
"
browser
-
element
"
)
{
watcher
.
browserElement
.
browsingContext
.
watchedByDevTools
=
false
;
}
if
(
browsingContextAttachedObserverByWatcher
.
has
(
watcher
)
)
{
Services
.
obs
.
removeObserver
(
browsingContextAttachedObserverByWatcher
.
get
(
watcher
)
"
browsing
-
context
-
attached
"
)
;
browsingContextAttachedObserverByWatcher
.
delete
(
watcher
)
;
}
}
async
function
addSessionDataEntry
(
{
watcher
type
entries
}
)
{
const
browsingContexts
=
getWatchingBrowsingContexts
(
watcher
)
;
const
promises
=
[
]
;
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
const
promise
=
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
addSessionDataEntry
(
{
watcherActorID
:
watcher
.
actorID
context
:
watcher
.
context
type
entries
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
function
removeSessionDataEntry
(
{
watcher
type
entries
}
)
{
const
browsingContexts
=
getWatchingBrowsingContexts
(
watcher
)
;
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
removeSessionDataEntry
(
{
watcherActorID
:
watcher
.
actorID
context
:
watcher
.
context
type
entries
}
)
;
}
}
module
.
exports
=
{
createTargets
destroyTargets
addSessionDataEntry
removeSessionDataEntry
}
;
function
getWatchingBrowsingContexts
(
watcher
)
{
const
watchingAdditionalTargets
=
WatcherRegistry
.
isWatchingTargets
(
watcher
Targets
.
TYPES
.
FRAME
)
;
const
{
browserElement
}
=
watcher
;
const
browsingContexts
=
watchingAdditionalTargets
?
getFilteredRemoteBrowsingContext
(
browserElement
)
:
[
]
;
if
(
watcher
.
context
.
type
=
=
"
browser
-
element
"
)
{
const
topBrowsingContext
=
browserElement
.
browsingContext
;
if
(
topBrowsingContext
.
currentWindowGlobal
.
osPid
!
=
-
1
)
{
browsingContexts
.
push
(
topBrowsingContext
)
;
}
}
return
browsingContexts
;
}
function
getFilteredRemoteBrowsingContext
(
browserElement
)
{
return
getAllRemoteBrowsingContexts
(
browserElement
?
.
browsingContext
)
.
filter
(
browsingContext
=
>
shouldNotifyWindowGlobal
(
browsingContext
browserElement
?
.
browserId
{
acceptNonRemoteFrame
:
isEveryFrameTargetEnabled
}
)
)
;
}
const
DEBUG
=
false
;
function
logWindowGlobal
(
windowGlobal
message
)
{
if
(
!
DEBUG
)
{
return
;
}
WindowGlobalLogger
.
logWindowGlobal
(
windowGlobal
message
)
;
}
