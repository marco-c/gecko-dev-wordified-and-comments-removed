"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
isBrowsingContextPartOfContext
"
"
isWindowGlobalPartOfContext
"
"
getAllBrowsingContextsForContext
"
]
;
let
Services
;
if
(
typeof
module
=
=
"
object
"
)
{
Services
=
require
(
"
Services
"
)
;
}
else
{
(
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
)
;
}
const
isEveryFrameTargetEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
every
-
frame
-
target
.
enabled
"
false
)
;
function
isBrowsingContextPartOfContext
(
browsingContext
sessionContext
{
forceAcceptTopLevelTarget
=
false
windowGlobal
}
=
{
}
)
{
if
(
browsingContext
instanceof
CanonicalBrowsingContext
)
{
windowGlobal
=
browsingContext
.
currentWindowGlobal
;
if
(
!
windowGlobal
)
{
return
false
;
}
if
(
!
browsingContext
.
isContent
)
{
return
false
;
}
}
else
if
(
!
windowGlobal
)
{
throw
new
Error
(
"
isBrowsingContextPartOfContext
expect
a
windowGlobal
argument
when
called
from
the
content
process
"
)
;
}
if
(
sessionContext
.
type
=
=
"
all
"
)
{
if
(
!
isEveryFrameTargetEnabled
&
&
!
windowGlobal
.
isProcessRoot
)
{
return
false
;
}
return
true
;
}
if
(
sessionContext
.
type
=
=
"
browser
-
element
"
)
{
if
(
browsingContext
.
browserId
!
=
sessionContext
.
browserId
)
{
return
false
;
}
const
isClientSideTargetSwitching
=
!
sessionContext
.
isServerTargetSwitchingEnabled
;
const
isTopLevelBrowsingContext
=
!
browsingContext
.
parent
;
if
(
isClientSideTargetSwitching
&
&
!
forceAcceptTopLevelTarget
&
&
isTopLevelBrowsingContext
)
{
return
false
;
}
if
(
!
isEveryFrameTargetEnabled
&
&
!
windowGlobal
.
isProcessRoot
)
{
return
false
;
}
return
true
;
}
if
(
sessionContext
.
type
=
=
"
webextension
"
)
{
const
principal
=
windowGlobal
.
documentPrincipal
|
|
browsingContext
.
window
.
document
.
nodePrincipal
;
return
principal
.
addonId
=
=
sessionContext
.
addonId
;
}
throw
new
Error
(
"
Unsupported
session
context
type
:
"
+
sessionContext
.
type
)
;
}
function
isWindowGlobalPartOfContext
(
windowGlobal
sessionContext
{
forceAcceptTopLevelTarget
=
false
acceptInitialDocument
=
false
}
=
{
}
)
{
const
window
=
Services
.
wm
.
getCurrentInnerWindowWithId
(
windowGlobal
.
innerWindowId
)
;
if
(
Cu
.
isRemoteProxy
(
window
)
)
{
return
false
;
}
if
(
(
windowGlobal
.
isInitialDocument
|
|
window
?
.
document
.
isInitialDocument
)
&
&
!
acceptInitialDocument
)
{
return
false
;
}
return
isBrowsingContextPartOfContext
(
windowGlobal
.
browsingContext
sessionContext
{
forceAcceptTopLevelTarget
windowGlobal
}
)
;
}
function
getAllBrowsingContextsForContext
(
sessionContext
)
{
const
browsingContexts
=
[
]
;
function
walk
(
browsingContext
)
{
if
(
browsingContexts
.
includes
(
browsingContext
)
)
{
return
;
}
browsingContexts
.
push
(
browsingContext
)
;
for
(
const
child
of
browsingContext
.
children
)
{
walk
(
child
)
;
}
if
(
(
sessionContext
.
type
=
=
"
all
"
|
|
sessionContext
.
type
=
=
"
webextension
"
)
&
&
browsingContext
.
window
)
{
for
(
const
browser
of
browsingContext
.
window
.
document
.
querySelectorAll
(
browser
[
remote
=
"
true
"
]
)
)
{
walk
(
browser
.
browsingContext
)
;
}
}
}
if
(
sessionContext
.
type
=
=
"
browser
-
element
"
)
{
const
topBrowsingContext
=
BrowsingContext
.
getCurrentTopByBrowserId
(
sessionContext
.
browserId
)
;
const
realTopBrowsingContext
=
topBrowsingContext
.
embedderElement
.
browsingContext
;
walk
(
realTopBrowsingContext
)
;
}
else
if
(
sessionContext
.
type
=
=
"
all
"
|
|
sessionContext
.
type
=
=
"
webextension
"
)
{
for
(
const
window
of
Services
.
ww
.
getWindowEnumerator
(
)
)
{
if
(
window
.
docShell
.
browsingContext
)
{
walk
(
window
.
docShell
.
browsingContext
)
;
}
}
}
else
{
throw
new
Error
(
"
Unsupported
session
context
type
:
"
+
sessionContext
.
type
)
;
}
return
browsingContexts
.
filter
(
bc
=
>
isBrowsingContextPartOfContext
(
bc
sessionContext
{
forceAcceptTopLevelTarget
:
true
}
)
)
;
}
if
(
typeof
module
=
=
"
object
"
)
{
module
.
exports
=
{
isBrowsingContextPartOfContext
isWindowGlobalPartOfContext
getAllBrowsingContextsForContext
}
;
}
