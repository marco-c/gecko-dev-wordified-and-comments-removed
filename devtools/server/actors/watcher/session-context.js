"
use
strict
"
;
const
Targets
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
index
.
js
"
)
;
const
Resources
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
resources
/
index
.
js
"
)
;
const
SESSION_TYPES
=
{
ALL
:
"
all
"
BROWSER_ELEMENT
:
"
browser
-
element
"
CONTENT_PROCESS
:
"
content
-
process
"
WEBEXTENSION
:
"
webextension
"
WORKER
:
"
worker
"
}
;
function
createBrowserSessionContext
(
)
{
const
type
=
SESSION_TYPES
.
ALL
;
return
{
type
isServerTargetSwitchingEnabled
:
false
supportedTargets
:
getWatcherSupportedTargets
(
type
)
supportedResources
:
getWatcherSupportedResources
(
type
)
}
;
}
function
createBrowserElementSessionContext
(
browserElement
config
)
{
const
type
=
SESSION_TYPES
.
BROWSER_ELEMENT
;
return
{
type
browserId
:
browserElement
.
browserId
isServerTargetSwitchingEnabled
:
config
.
isServerTargetSwitchingEnabled
isPopupDebuggingEnabled
:
config
.
isPopupDebuggingEnabled
supportedTargets
:
getWatcherSupportedTargets
(
type
)
supportedResources
:
getWatcherSupportedResources
(
type
)
}
;
}
function
createWebExtensionSessionContext
(
{
addonId
}
config
)
{
const
type
=
SESSION_TYPES
.
WEBEXTENSION
;
return
{
type
addonId
isServerTargetSwitchingEnabled
:
config
.
isServerTargetSwitchingEnabled
supportedTargets
:
getWatcherSupportedTargets
(
type
)
supportedResources
:
getWatcherSupportedResources
(
type
)
}
;
}
function
createContentProcessSessionContext
(
)
{
const
type
=
SESSION_TYPES
.
CONTENT_PROCESS
;
return
{
type
supportedTargets
:
getWatcherSupportedTargets
(
type
)
supportedResources
:
getWatcherSupportedResources
(
type
)
}
;
}
function
createWorkerSessionContext
(
)
{
const
type
=
SESSION_TYPES
.
WORKER
;
return
{
type
supportedTargets
:
getWatcherSupportedTargets
(
type
)
supportedResources
:
getWatcherSupportedResources
(
type
)
}
;
}
function
getWatcherSupportedTargets
(
type
)
{
return
{
[
Targets
.
TYPES
.
FRAME
]
:
true
[
Targets
.
TYPES
.
PROCESS
]
:
true
[
Targets
.
TYPES
.
WORKER
]
:
true
[
Targets
.
TYPES
.
SERVICE_WORKER
]
:
type
=
=
SESSION_TYPES
.
BROWSER_ELEMENT
|
|
type
=
=
SESSION_TYPES
.
ALL
[
Targets
.
TYPES
.
SHARED_WORKER
]
:
type
=
=
SESSION_TYPES
.
ALL
[
Targets
.
TYPES
.
CONTENT_SCRIPT
]
:
type
=
=
SESSION_TYPES
.
BROWSER_ELEMENT
}
;
}
function
getWatcherSupportedResources
(
type
)
{
const
isTabOrWebExtensionToolbox
=
type
=
=
SESSION_TYPES
.
BROWSER_ELEMENT
|
|
type
=
=
SESSION_TYPES
.
WEBEXTENSION
;
return
{
[
Resources
.
TYPES
.
CONSOLE_MESSAGE
]
:
true
[
Resources
.
TYPES
.
CSS_CHANGE
]
:
isTabOrWebExtensionToolbox
[
Resources
.
TYPES
.
CSS_MESSAGE
]
:
true
[
Resources
.
TYPES
.
CSS_REGISTERED_PROPERTIES
]
:
true
[
Resources
.
TYPES
.
DOCUMENT_EVENT
]
:
true
[
Resources
.
TYPES
.
CACHE_STORAGE
]
:
true
[
Resources
.
TYPES
.
COOKIE
]
:
true
[
Resources
.
TYPES
.
ERROR_MESSAGE
]
:
true
[
Resources
.
TYPES
.
EXTENSION_STORAGE
]
:
true
[
Resources
.
TYPES
.
INDEXED_DB
]
:
true
[
Resources
.
TYPES
.
LOCAL_STORAGE
]
:
true
[
Resources
.
TYPES
.
SESSION_STORAGE
]
:
true
[
Resources
.
TYPES
.
PLATFORM_MESSAGE
]
:
true
[
Resources
.
TYPES
.
NETWORK_EVENT
]
:
true
[
Resources
.
TYPES
.
NETWORK_EVENT_STACKTRACE
]
:
true
[
Resources
.
TYPES
.
REFLOW
]
:
true
[
Resources
.
TYPES
.
STYLESHEET
]
:
true
[
Resources
.
TYPES
.
SOURCE
]
:
true
[
Resources
.
TYPES
.
THREAD_STATE
]
:
true
[
Resources
.
TYPES
.
SERVER_SENT_EVENT
]
:
true
[
Resources
.
TYPES
.
WEBSOCKET
]
:
true
[
Resources
.
TYPES
.
JSTRACER_TRACE
]
:
true
[
Resources
.
TYPES
.
JSTRACER_STATE
]
:
true
[
Resources
.
TYPES
.
LAST_PRIVATE_CONTEXT_EXIT
]
:
true
}
;
}
module
.
exports
=
{
createBrowserSessionContext
createBrowserElementSessionContext
createWebExtensionSessionContext
createContentProcessSessionContext
createWorkerSessionContext
SESSION_TYPES
}
;
