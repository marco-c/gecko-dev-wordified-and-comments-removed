"
use
strict
"
;
const
{
TYPES
:
{
DOCUMENT_EVENT
}
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
resources
/
index
.
js
"
)
;
const
isEveryFrameTargetEnabled
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
every
-
frame
-
target
.
enabled
"
false
)
;
const
{
getAllBrowsingContextsForContext
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
server
/
actors
/
watcher
/
browsing
-
context
-
helpers
.
sys
.
mjs
"
)
;
const
{
WILL_NAVIGATE_TIME_SHIFT
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
/
listeners
/
document
-
events
.
js
"
)
;
class
ParentProcessDocumentEventWatcher
{
async
watch
(
watcherActor
{
onAvailable
}
)
{
this
.
watcherActor
=
watcherActor
;
this
.
onAvailable
=
onAvailable
;
this
.
_onceWillNavigate
=
new
Map
(
)
;
const
topLevelBrowsingContexts
=
getAllBrowsingContextsForContext
(
this
.
watcherActor
.
sessionContext
)
.
filter
(
browsingContext
=
>
browsingContext
.
top
=
=
browsingContext
)
;
this
.
webProgresses
=
topLevelBrowsingContexts
.
map
(
browsingContext
=
>
browsingContext
.
webProgress
)
;
this
.
webProgresses
.
forEach
(
webProgress
=
>
{
webProgress
.
addProgressListener
(
this
Ci
.
nsIWebProgress
.
NOTIFY_STATE_DOCUMENT
)
;
}
)
;
}
onceWillNavigateIsEmitted
(
innerWindowId
)
{
const
isTracked
=
this
.
webProgresses
.
find
(
webProgress
=
>
webProgress
.
browsingContext
.
currentWindowGlobal
.
innerWindowId
=
=
innerWindowId
)
;
if
(
isTracked
)
{
return
new
Promise
(
resolve
=
>
{
this
.
_onceWillNavigate
.
set
(
innerWindowId
resolve
)
;
}
)
;
}
return
Promise
.
resolve
(
)
;
}
onStateChange
(
progress
request
flag
status
)
{
const
isStart
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_START
;
const
isDocument
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_IS_DOCUMENT
;
if
(
isDocument
&
&
isStart
)
{
const
{
browsingContext
}
=
progress
;
if
(
!
browsingContext
.
currentWindowGlobal
.
isProcessRoot
&
&
!
isEveryFrameTargetEnabled
)
{
return
;
}
if
(
browsingContext
.
currentWindowGlobal
.
isInitialDocument
)
{
return
;
}
const
isTopLevel
=
browsingContext
.
top
=
=
browsingContext
;
const
isRestoring
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_RESTORING
;
if
(
!
isTopLevel
&
&
isRestoring
)
{
return
;
}
const
newURI
=
request
instanceof
Ci
.
nsIChannel
?
request
.
URI
.
spec
:
null
;
const
{
innerWindowId
}
=
browsingContext
.
currentWindowGlobal
;
this
.
onAvailable
(
[
{
browsingContextID
:
browsingContext
.
id
innerWindowId
resourceType
:
DOCUMENT_EVENT
name
:
"
will
-
navigate
"
time
:
Date
.
now
(
)
-
WILL_NAVIGATE_TIME_SHIFT
isFrameSwitching
:
false
newURI
}
]
)
;
const
callback
=
this
.
_onceWillNavigate
.
get
(
innerWindowId
)
;
if
(
callback
)
{
this
.
_onceWillNavigate
.
delete
(
innerWindowId
)
;
callback
(
)
;
}
}
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
"
nsISupportsWeakReference
"
]
)
;
}
destroy
(
)
{
this
.
webProgresses
.
forEach
(
webProgress
=
>
{
webProgress
.
removeProgressListener
(
this
Ci
.
nsIWebProgress
.
NOTIFY_STATE_DOCUMENT
)
;
}
)
;
this
.
webProgresses
=
null
;
}
}
module
.
exports
=
ParentProcessDocumentEventWatcher
;
