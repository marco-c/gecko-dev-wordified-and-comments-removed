"
use
strict
"
;
class
ExtensionsBackgroundScriptStatusWatcher
{
async
watch
(
rootActor
{
onAvailable
}
)
{
this
.
rootActor
=
rootActor
;
this
.
onAvailable
=
onAvailable
;
Services
.
obs
.
addObserver
(
this
"
extension
:
background
-
script
-
status
"
)
;
}
observe
(
subject
topic
)
{
switch
(
topic
)
{
case
"
extension
:
background
-
script
-
status
"
:
{
const
{
addonId
isRunning
}
=
subject
.
wrappedJSObject
;
this
.
onBackgroundScriptStatus
(
addonId
isRunning
)
;
break
;
}
}
}
onBackgroundScriptStatus
(
addonId
isRunning
)
{
this
.
onAvailable
(
[
{
payload
:
{
addonId
isRunning
}
}
]
)
;
}
destroy
(
)
{
if
(
this
.
onAvailable
)
{
this
.
onAvailable
=
null
;
Services
.
obs
.
removeObserver
(
this
"
extension
:
background
-
script
-
status
"
)
;
}
}
}
module
.
exports
=
ExtensionsBackgroundScriptStatusWatcher
;
