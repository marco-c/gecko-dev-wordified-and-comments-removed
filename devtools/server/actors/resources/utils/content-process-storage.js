"
use
strict
"
;
const
{
storageTypePool
}
=
require
(
"
devtools
/
server
/
actors
/
storage
"
)
;
const
BATCH_DELAY
=
200
;
class
ContentProcessStorage
{
constructor
(
storageKey
storageType
)
{
this
.
storageKey
=
storageKey
;
this
.
storageType
=
storageType
;
}
async
watch
(
targetActor
{
onAvailable
onUpdated
onDestroyed
}
)
{
const
ActorConstructor
=
storageTypePool
.
get
(
this
.
storageKey
)
;
this
.
actor
=
new
ActorConstructor
(
{
get
conn
(
)
{
return
targetActor
.
conn
;
}
get
windows
(
)
{
return
targetActor
.
windows
;
}
get
window
(
)
{
return
targetActor
.
window
;
}
get
document
(
)
{
return
this
.
window
.
document
;
}
get
originAttributes
(
)
{
return
this
.
document
.
effectiveStoragePrincipal
.
originAttributes
;
}
update
(
action
storeType
data
)
{
if
(
!
this
.
boundUpdate
)
{
this
.
boundUpdate
=
{
}
;
}
if
(
action
=
=
=
"
cleared
"
)
{
const
response
=
{
}
;
response
[
this
.
storageKey
]
=
data
;
onDestroyed
(
[
{
.
.
.
storage
clearedHostsOrPaths
:
data
}
]
)
;
}
if
(
this
.
batchTimer
)
{
clearTimeout
(
this
.
batchTimer
)
;
}
if
(
!
this
.
boundUpdate
[
action
]
)
{
this
.
boundUpdate
[
action
]
=
{
}
;
}
if
(
!
this
.
boundUpdate
[
action
]
[
storeType
]
)
{
this
.
boundUpdate
[
action
]
[
storeType
]
=
{
}
;
}
for
(
const
host
in
data
)
{
if
(
!
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
)
{
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
=
[
]
;
}
for
(
const
name
of
data
[
host
]
)
{
if
(
!
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
.
includes
(
name
)
)
{
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
.
push
(
name
)
;
}
}
}
if
(
action
=
=
=
"
added
"
)
{
this
.
_removeNamesFromUpdateList
(
"
deleted
"
storeType
data
)
;
this
.
_removeNamesFromUpdateList
(
"
changed
"
storeType
data
)
;
}
else
if
(
action
=
=
=
"
changed
"
&
&
this
.
boundUpdate
?
.
added
?
.
[
storeType
]
)
{
this
.
_removeNamesFromUpdateList
(
"
changed
"
storeType
this
.
boundUpdate
.
added
[
storeType
]
)
;
}
else
if
(
action
=
=
=
"
deleted
"
)
{
this
.
_removeNamesFromUpdateList
(
"
added
"
storeType
data
)
;
this
.
_removeNamesFromUpdateList
(
"
changed
"
storeType
data
)
;
for
(
const
host
in
data
)
{
if
(
data
[
host
]
.
length
=
=
=
0
&
&
this
.
boundUpdate
?
.
added
?
.
[
storeType
]
?
.
[
host
]
)
{
delete
this
.
boundUpdate
.
added
[
storeType
]
[
host
]
;
}
if
(
data
[
host
]
.
length
=
=
=
0
&
&
this
.
boundUpdate
?
.
changed
?
.
[
storeType
]
?
.
[
host
]
)
{
delete
this
.
boundUpdate
.
changed
[
storeType
]
[
host
]
;
}
}
}
this
.
batchTimer
=
setTimeout
(
(
)
=
>
{
clearTimeout
(
this
.
batchTimer
)
;
onUpdated
(
[
{
.
.
.
storage
added
:
this
.
boundUpdate
.
added
changed
:
this
.
boundUpdate
.
changed
deleted
:
this
.
boundUpdate
.
deleted
}
]
)
;
this
.
boundUpdate
=
{
}
;
}
BATCH_DELAY
)
;
return
null
;
}
_removeNamesFromUpdateList
(
action
storeType
data
)
{
for
(
const
host
in
data
)
{
if
(
this
.
boundUpdate
?
.
[
action
]
?
.
[
storeType
]
?
.
[
host
]
)
{
for
(
const
name
in
data
[
host
]
)
{
const
index
=
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
.
indexOf
(
name
)
;
if
(
index
>
-
1
)
{
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
.
splice
(
index
1
)
;
}
}
if
(
!
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
.
length
)
{
delete
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
;
}
}
}
return
null
;
}
on
(
)
{
targetActor
.
on
.
apply
(
this
arguments
)
;
}
off
(
)
{
targetActor
.
off
.
apply
(
this
arguments
)
;
}
once
(
)
{
targetActor
.
once
.
apply
(
this
arguments
)
;
}
}
)
;
targetActor
.
manage
(
this
.
actor
)
;
const
form
=
this
.
actor
.
form
(
)
;
const
storage
=
form
;
storage
.
resourceType
=
this
.
storageType
;
storage
.
resourceId
=
this
.
storageType
;
storage
.
resourceKey
=
this
.
storageKey
;
onAvailable
(
[
storage
]
)
;
}
destroy
(
)
{
this
.
actor
?
.
destroy
(
)
;
this
.
actor
=
null
;
}
}
module
.
exports
=
ContentProcessStorage
;
