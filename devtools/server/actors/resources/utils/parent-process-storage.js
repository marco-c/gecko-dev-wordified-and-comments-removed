"
use
strict
"
;
const
{
storageTypePool
}
=
require
(
"
devtools
/
server
/
actors
/
storage
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
BATCH_DELAY
=
200
;
function
getFilteredStorageEvents
(
updates
storageType
)
{
const
filteredUpdate
=
Object
.
create
(
null
)
;
for
(
const
updateType
in
updates
)
{
if
(
updates
[
updateType
]
[
storageType
]
)
{
if
(
!
filteredUpdate
[
updateType
]
)
{
filteredUpdate
[
updateType
]
=
{
}
;
}
filteredUpdate
[
updateType
]
[
storageType
]
=
updates
[
updateType
]
[
storageType
]
;
}
}
return
Object
.
keys
(
filteredUpdate
)
.
length
>
0
?
filteredUpdate
:
null
;
}
class
ParentProcessStorage
{
constructor
(
storageKey
storageType
)
{
this
.
storageKey
=
storageKey
;
this
.
storageType
=
storageType
;
this
.
onStoresUpdate
=
this
.
onStoresUpdate
.
bind
(
this
)
;
this
.
onStoresCleared
=
this
.
onStoresCleared
.
bind
(
this
)
;
}
async
watch
(
watcherActor
{
onAvailable
onUpdated
onDestroyed
}
)
{
const
browsingContext
=
watcherActor
.
browserElement
.
browsingContext
;
const
ActorConstructor
=
storageTypePool
.
get
(
this
.
storageKey
)
;
const
storageActor
=
new
StorageActorMock
(
watcherActor
)
;
this
.
storageActor
=
storageActor
;
this
.
actor
=
new
ActorConstructor
(
storageActor
)
;
if
(
typeof
this
.
actor
.
preListStores
=
=
=
"
function
"
)
{
await
this
.
actor
.
preListStores
(
)
;
}
watcherActor
.
manage
(
this
.
actor
)
;
const
storage
=
this
.
actor
.
form
(
)
;
storage
.
resourceType
=
this
.
storageType
;
storage
.
resourceId
=
{
this
.
storageType
}
-
{
browsingContext
.
id
}
;
storage
.
resourceKey
=
this
.
storageKey
;
storage
.
browsingContextID
=
browsingContext
.
id
;
onAvailable
(
[
storage
]
)
;
storageActor
.
on
(
"
stores
-
update
"
this
.
onStoresUpdate
)
;
storageActor
.
on
(
"
stores
-
cleared
"
this
.
onStoresCleared
)
;
}
onStoresUpdate
(
response
)
{
response
=
getFilteredStorageEvents
(
response
this
.
storageKey
)
;
if
(
!
response
)
{
return
;
}
this
.
actor
.
emit
(
"
single
-
store
-
update
"
{
changed
:
response
.
changed
added
:
response
.
added
deleted
:
response
.
deleted
}
)
;
}
onStoresCleared
(
response
)
{
const
cleared
=
response
[
this
.
storageKey
]
;
if
(
!
cleared
)
{
return
;
}
this
.
actor
.
emit
(
"
single
-
store
-
cleared
"
{
clearedHostsOrPaths
:
cleared
}
)
;
}
destroy
(
)
{
this
.
actor
?
.
destroy
(
)
;
this
.
actor
=
null
;
if
(
this
.
storageActor
)
{
this
.
storageActor
.
off
(
"
stores
-
update
"
this
.
onStoresUpdate
)
;
this
.
storageActor
.
off
(
"
stores
-
cleared
"
this
.
onStoresCleared
)
;
this
.
storageActor
.
destroy
(
)
;
this
.
storageActor
=
null
;
}
}
}
module
.
exports
=
ParentProcessStorage
;
class
StorageActorMock
extends
EventEmitter
{
constructor
(
watcherActor
)
{
super
(
)
;
this
.
conn
=
watcherActor
.
conn
;
this
.
watcherActor
=
watcherActor
;
this
.
observe
=
this
.
observe
.
bind
(
this
)
;
Services
.
obs
.
addObserver
(
this
"
window
-
global
-
created
"
)
;
Services
.
obs
.
addObserver
(
this
"
window
-
global
-
destroyed
"
)
;
this
.
boundUpdate
=
{
}
;
}
destroy
(
)
{
Services
.
obs
.
removeObserver
(
this
"
window
-
global
-
created
"
)
;
Services
.
obs
.
removeObserver
(
this
"
window
-
global
-
destroyed
"
)
;
clearTimeout
(
this
.
batchTimer
)
;
this
.
batchTimer
=
null
;
}
get
windows
(
)
{
const
browsingContext
=
this
.
watcherActor
.
browserElement
.
browsingContext
;
const
contexts
=
browsingContext
.
getAllBrowsingContextsInSubtree
(
)
;
return
contexts
.
filter
(
x
=
>
!
!
x
.
currentWindowGlobal
)
.
map
(
x
=
>
{
const
uri
=
x
.
currentWindowGlobal
.
documentURI
;
return
{
location
:
uri
}
;
}
)
.
filter
(
x
=
>
x
.
location
.
displaySpec
!
=
=
"
about
:
blank
"
)
;
}
getHostName
(
uri
)
{
switch
(
uri
.
scheme
)
{
case
"
about
"
:
case
"
file
"
:
case
"
javascript
"
:
case
"
resource
"
:
case
"
moz
-
extension
"
:
return
uri
.
displaySpec
;
case
"
http
"
:
case
"
https
"
:
return
uri
.
prePath
;
default
:
return
null
;
}
}
getWindowFromHost
(
host
)
{
const
browsingContext
=
this
.
watcherActor
.
browserElement
.
browsingContext
;
const
contexts
=
browsingContext
.
getAllBrowsingContextsInSubtree
(
)
.
filter
(
x
=
>
!
!
x
.
currentWindowGlobal
)
;
const
hostBrowsingContext
=
contexts
.
find
(
x
=
>
{
const
hostName
=
this
.
getHostName
(
x
.
currentWindowGlobal
.
documentURI
)
;
return
hostName
=
=
=
host
;
}
)
;
const
principal
=
hostBrowsingContext
.
currentWindowGlobal
.
documentPrincipal
;
return
{
document
:
{
effectiveStoragePrincipal
:
principal
}
}
;
}
observe
(
subject
topic
)
{
if
(
this
.
watcherActor
.
browserId
&
&
subject
.
browsingContext
.
browserId
!
=
this
.
watcherActor
.
browserId
)
{
return
;
}
if
(
subject
.
documentURI
.
displaySpec
=
=
=
"
about
:
blank
"
)
{
return
;
}
const
windowMock
=
{
location
:
subject
.
documentURI
}
;
if
(
topic
=
=
=
"
window
-
global
-
created
"
)
{
this
.
emit
(
"
window
-
ready
"
windowMock
)
;
}
else
if
(
topic
=
=
=
"
window
-
global
-
destroyed
"
)
{
this
.
emit
(
"
window
-
destroyed
"
windowMock
)
;
}
}
update
(
action
storeType
data
)
{
if
(
action
=
=
"
cleared
"
)
{
this
.
emit
(
"
stores
-
cleared
"
{
[
storeType
]
:
data
}
)
;
return
null
;
}
if
(
this
.
batchTimer
)
{
clearTimeout
(
this
.
batchTimer
)
;
}
if
(
!
this
.
boundUpdate
[
action
]
)
{
this
.
boundUpdate
[
action
]
=
{
}
;
}
if
(
!
this
.
boundUpdate
[
action
]
[
storeType
]
)
{
this
.
boundUpdate
[
action
]
[
storeType
]
=
{
}
;
}
for
(
const
host
in
data
)
{
if
(
!
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
)
{
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
=
[
]
;
}
for
(
const
name
of
data
[
host
]
)
{
if
(
!
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
.
includes
(
name
)
)
{
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
.
push
(
name
)
;
}
}
}
if
(
action
=
=
"
added
"
)
{
this
.
removeNamesFromUpdateList
(
"
deleted
"
storeType
data
)
;
this
.
removeNamesFromUpdateList
(
"
changed
"
storeType
data
)
;
}
else
if
(
action
=
=
"
changed
"
&
&
this
.
boundUpdate
.
added
&
&
this
.
boundUpdate
.
added
[
storeType
]
)
{
this
.
removeNamesFromUpdateList
(
"
changed
"
storeType
this
.
boundUpdate
.
added
[
storeType
]
)
;
}
else
if
(
action
=
=
"
deleted
"
)
{
this
.
removeNamesFromUpdateList
(
"
added
"
storeType
data
)
;
this
.
removeNamesFromUpdateList
(
"
changed
"
storeType
data
)
;
for
(
const
host
in
data
)
{
if
(
data
[
host
]
.
length
=
=
0
&
&
this
.
boundUpdate
.
added
&
&
this
.
boundUpdate
.
added
[
storeType
]
&
&
this
.
boundUpdate
.
added
[
storeType
]
[
host
]
)
{
delete
this
.
boundUpdate
.
added
[
storeType
]
[
host
]
;
}
if
(
data
[
host
]
.
length
=
=
0
&
&
this
.
boundUpdate
.
changed
&
&
this
.
boundUpdate
.
changed
[
storeType
]
&
&
this
.
boundUpdate
.
changed
[
storeType
]
[
host
]
)
{
delete
this
.
boundUpdate
.
changed
[
storeType
]
[
host
]
;
}
}
}
this
.
batchTimer
=
setTimeout
(
(
)
=
>
{
clearTimeout
(
this
.
batchTimer
)
;
this
.
emit
(
"
stores
-
update
"
this
.
boundUpdate
)
;
this
.
boundUpdate
=
{
}
;
}
BATCH_DELAY
)
;
return
null
;
}
removeNamesFromUpdateList
(
action
storeType
data
)
{
for
(
const
host
in
data
)
{
if
(
this
.
boundUpdate
[
action
]
&
&
this
.
boundUpdate
[
action
]
[
storeType
]
&
&
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
)
{
for
(
const
name
of
data
[
host
]
)
{
const
index
=
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
.
indexOf
(
name
)
;
if
(
index
>
-
1
)
{
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
.
splice
(
index
1
)
;
}
}
if
(
!
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
.
length
)
{
delete
this
.
boundUpdate
[
action
]
[
storeType
]
[
host
]
;
}
}
}
return
null
;
}
}
