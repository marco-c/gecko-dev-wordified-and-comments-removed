"
use
strict
"
;
const
TYPES
=
{
CONSOLE_MESSAGE
:
"
console
-
message
"
PLATFORM_MESSAGE
:
"
platform
-
message
"
}
;
exports
.
TYPES
=
TYPES
;
const
Resources
=
{
[
TYPES
.
CONSOLE_MESSAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
console
-
messages
"
}
[
TYPES
.
PLATFORM_MESSAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
platform
-
messages
"
}
}
;
for
(
const
resource
of
Object
.
values
(
Resources
)
)
{
resource
.
watchers
=
new
WeakMap
(
)
;
loader
.
lazyRequireGetter
(
resource
"
WatcherClass
"
resource
.
path
)
;
}
function
watchTargetResources
(
targetActor
resourceTypes
)
{
for
(
const
resourceType
of
resourceTypes
)
{
if
(
!
(
resourceType
in
Resources
)
)
{
throw
new
Error
(
Unsupported
resource
type
'
{
resourceType
}
'
)
;
}
const
{
watchers
WatcherClass
}
=
Resources
[
resourceType
]
;
if
(
watchers
.
has
(
targetActor
)
)
{
continue
;
}
const
watcher
=
new
WatcherClass
(
targetActor
{
onAvailable
:
targetActor
.
notifyResourceAvailable
}
)
;
watchers
.
set
(
targetActor
watcher
)
;
}
}
exports
.
watchTargetResources
=
watchTargetResources
;
function
unwatchTargetResources
(
targetActor
resourceTypes
)
{
for
(
const
resourceType
of
resourceTypes
)
{
if
(
!
(
resourceType
in
Resources
)
)
{
throw
new
Error
(
Unsupported
resource
type
'
{
resourceType
}
'
)
;
}
const
{
watchers
}
=
Resources
[
resourceType
]
;
const
watcher
=
watchers
.
get
(
targetActor
)
;
watcher
.
destroy
(
)
;
watchers
.
delete
(
targetActor
)
;
}
}
exports
.
unwatchTargetResources
=
unwatchTargetResources
;
function
unwatchAllTargetResources
(
targetActor
)
{
for
(
const
{
watchers
}
of
Object
.
values
(
Resources
)
)
{
const
watcher
=
watchers
.
get
(
targetActor
)
;
if
(
watcher
)
{
watcher
.
destroy
(
)
;
watchers
.
delete
(
targetActor
)
;
}
}
}
exports
.
unwatchAllTargetResources
=
unwatchAllTargetResources
;
function
getResourceWatcher
(
targetActor
resourceType
)
{
if
(
!
(
resourceType
in
Resources
)
)
{
throw
new
Error
(
Unsupported
resource
type
'
{
resourceType
}
'
)
;
}
const
{
watchers
}
=
Resources
[
resourceType
]
;
return
watchers
.
get
(
targetActor
)
;
}
exports
.
getResourceWatcher
=
getResourceWatcher
;
