"
use
strict
"
;
const
Targets
=
require
(
"
devtools
/
server
/
actors
/
targets
/
index
"
)
;
const
TYPES
=
{
CONSOLE_MESSAGE
:
"
console
-
message
"
CSS_CHANGE
:
"
css
-
change
"
CSS_MESSAGE
:
"
css
-
message
"
DOCUMENT_EVENT
:
"
document
-
event
"
ERROR_MESSAGE
:
"
error
-
message
"
PLATFORM_MESSAGE
:
"
platform
-
message
"
NETWORK_EVENT
:
"
network
-
event
"
STYLESHEET
:
"
stylesheet
"
NETWORK_EVENT_STACKTRACE
:
"
network
-
event
-
stacktrace
"
SOURCE
:
"
source
"
THREAD_STATE
:
"
thread
-
state
"
SERVER_SENT_EVENT
:
"
server
-
sent
-
event
"
WEBSOCKET
:
"
websocket
"
CACHE_STORAGE
:
"
Cache
"
COOKIE
:
"
cookies
"
LOCAL_STORAGE
:
"
local
-
storage
"
SESSION_STORAGE
:
"
session
-
storage
"
}
;
exports
.
TYPES
=
TYPES
;
const
FrameTargetResources
=
augmentResourceDictionary
(
{
[
TYPES
.
CACHE_STORAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
storage
-
cache
"
}
[
TYPES
.
CONSOLE_MESSAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
console
-
messages
"
}
[
TYPES
.
CSS_CHANGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
css
-
changes
"
}
[
TYPES
.
CSS_MESSAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
css
-
messages
"
}
[
TYPES
.
DOCUMENT_EVENT
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
document
-
event
"
}
[
TYPES
.
ERROR_MESSAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
error
-
messages
"
}
[
TYPES
.
LOCAL_STORAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
storage
-
local
-
storage
"
}
[
TYPES
.
PLATFORM_MESSAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
platform
-
messages
"
}
[
TYPES
.
SESSION_STORAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
storage
-
session
-
storage
"
}
[
TYPES
.
STYLESHEET
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
stylesheets
"
}
[
TYPES
.
NETWORK_EVENT_STACKTRACE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
network
-
events
-
stacktraces
"
}
[
TYPES
.
SOURCE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
sources
"
}
[
TYPES
.
THREAD_STATE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
thread
-
states
"
}
[
TYPES
.
SERVER_SENT_EVENT
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
server
-
sent
-
events
"
}
[
TYPES
.
WEBSOCKET
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
websockets
"
}
}
)
;
const
ProcessTargetResources
=
augmentResourceDictionary
(
{
[
TYPES
.
CONSOLE_MESSAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
console
-
messages
"
}
[
TYPES
.
ERROR_MESSAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
error
-
messages
"
}
[
TYPES
.
PLATFORM_MESSAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
platform
-
messages
"
}
[
TYPES
.
SOURCE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
sources
"
}
[
TYPES
.
THREAD_STATE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
thread
-
states
"
}
}
)
;
const
WorkerTargetResources
=
augmentResourceDictionary
(
{
[
TYPES
.
CONSOLE_MESSAGE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
console
-
messages
"
}
[
TYPES
.
SOURCE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
sources
"
}
[
TYPES
.
THREAD_STATE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
thread
-
states
"
}
}
)
;
const
ParentProcessResources
=
augmentResourceDictionary
(
{
[
TYPES
.
NETWORK_EVENT
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
network
-
events
"
}
[
TYPES
.
COOKIE
]
:
{
path
:
"
devtools
/
server
/
actors
/
resources
/
storage
-
cookie
"
}
}
)
;
function
augmentResourceDictionary
(
dict
)
{
for
(
const
resource
of
Object
.
values
(
dict
)
)
{
resource
.
watchers
=
new
WeakMap
(
)
;
loader
.
lazyRequireGetter
(
resource
"
WatcherClass
"
resource
.
path
)
;
}
return
dict
;
}
function
getResourceTypeDictionary
(
watcherOrTargetActor
)
{
const
{
typeName
}
=
watcherOrTargetActor
;
if
(
typeName
=
=
"
watcher
"
)
{
return
ParentProcessResources
;
}
const
{
targetType
}
=
watcherOrTargetActor
;
return
getResourceTypeDictionaryForTargetType
(
targetType
)
;
}
function
getResourceTypeDictionaryForTargetType
(
targetType
)
{
switch
(
targetType
)
{
case
Targets
.
TYPES
.
FRAME
:
return
FrameTargetResources
;
case
Targets
.
TYPES
.
PROCESS
:
return
ProcessTargetResources
;
case
Targets
.
TYPES
.
WORKER
:
return
WorkerTargetResources
;
default
:
throw
new
Error
(
Unsupported
target
actor
typeName
'
{
targetType
}
'
)
;
}
}
function
getResourceTypeEntry
(
watcherOrTargetActor
resourceType
)
{
const
dict
=
getResourceTypeDictionary
(
watcherOrTargetActor
)
;
if
(
!
(
resourceType
in
dict
)
)
{
throw
new
Error
(
Unsupported
resource
type
'
{
resourceType
}
'
for
{
watcherOrTargetActor
.
typeName
}
)
;
}
return
dict
[
resourceType
]
;
}
async
function
watchResources
(
watcherOrTargetActor
resourceTypes
)
{
const
{
targetType
}
=
watcherOrTargetActor
;
if
(
targetType
)
{
resourceTypes
=
getResourceTypesForTargetType
(
resourceTypes
targetType
)
;
}
for
(
const
resourceType
of
resourceTypes
)
{
const
{
watchers
WatcherClass
}
=
getResourceTypeEntry
(
watcherOrTargetActor
resourceType
)
;
if
(
watchers
.
has
(
watcherOrTargetActor
)
)
{
continue
;
}
const
watcher
=
new
WatcherClass
(
)
;
await
watcher
.
watch
(
watcherOrTargetActor
{
onAvailable
:
watcherOrTargetActor
.
notifyResourceAvailable
onDestroyed
:
watcherOrTargetActor
.
notifyResourceDestroyed
onUpdated
:
watcherOrTargetActor
.
notifyResourceUpdated
}
)
;
watchers
.
set
(
watcherOrTargetActor
watcher
)
;
}
}
exports
.
watchResources
=
watchResources
;
function
getParentProcessResourceTypes
(
resourceTypes
)
{
return
resourceTypes
.
filter
(
resourceType
=
>
{
return
resourceType
in
ParentProcessResources
;
}
)
;
}
exports
.
getParentProcessResourceTypes
=
getParentProcessResourceTypes
;
function
getResourceTypesForTargetType
(
resourceTypes
targetType
)
{
const
resourceDictionnary
=
getResourceTypeDictionaryForTargetType
(
targetType
)
;
return
resourceTypes
.
filter
(
resourceType
=
>
{
return
resourceType
in
resourceDictionnary
;
}
)
;
}
exports
.
getResourceTypesForTargetType
=
getResourceTypesForTargetType
;
function
hasResourceTypesForTargets
(
resourceTypes
)
{
return
resourceTypes
.
some
(
resourceType
=
>
{
return
resourceType
in
FrameTargetResources
;
}
)
;
}
exports
.
hasResourceTypesForTargets
=
hasResourceTypesForTargets
;
function
unwatchResources
(
watcherOrTargetActor
resourceTypes
)
{
for
(
const
resourceType
of
resourceTypes
)
{
const
{
watchers
}
=
getResourceTypeEntry
(
watcherOrTargetActor
resourceType
)
;
const
watcher
=
watchers
.
get
(
watcherOrTargetActor
)
;
if
(
watcher
)
{
watcher
.
destroy
(
)
;
watchers
.
delete
(
watcherOrTargetActor
)
;
}
}
}
exports
.
unwatchResources
=
unwatchResources
;
function
unwatchAllTargetResources
(
watcherOrTargetActor
)
{
for
(
const
{
watchers
}
of
Object
.
values
(
getResourceTypeDictionary
(
watcherOrTargetActor
)
)
)
{
const
watcher
=
watchers
.
get
(
watcherOrTargetActor
)
;
if
(
watcher
)
{
watcher
.
destroy
(
)
;
watchers
.
delete
(
watcherOrTargetActor
)
;
}
}
}
exports
.
unwatchAllTargetResources
=
unwatchAllTargetResources
;
function
getResourceWatcher
(
watcherOrTargetActor
resourceType
)
{
const
{
watchers
}
=
getResourceTypeEntry
(
watcherOrTargetActor
resourceType
)
;
return
watchers
.
get
(
watcherOrTargetActor
)
;
}
exports
.
getResourceWatcher
=
getResourceWatcher
;
