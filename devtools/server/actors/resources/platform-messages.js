"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
TYPES
:
{
PLATFORM_MESSAGE
}
}
=
require
(
"
devtools
/
server
/
actors
/
resources
/
index
"
)
;
const
{
stringIsLong
}
=
require
(
"
devtools
/
server
/
actors
/
object
/
utils
"
)
;
const
{
LongStringActor
}
=
require
(
"
devtools
/
server
/
actors
/
string
"
)
;
const
listeners
=
new
WeakMap
(
)
;
function
watch
(
targetActor
{
onAvailable
}
)
{
if
(
listeners
.
has
(
targetActor
)
)
{
throw
new
Error
(
"
Already
listening
to
console
messages
for
this
target
actor
"
)
;
}
if
(
!
targetActor
.
isRootActor
)
{
return
;
}
const
listener
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIConsoleListener
]
)
observe
(
message
)
{
if
(
!
shouldHandleMessage
(
message
)
)
{
return
;
}
onAvailable
(
[
buildResourceFromMessage
(
targetActor
message
)
]
)
;
}
}
;
const
cachedMessages
=
Services
.
console
.
getMessageArray
(
)
;
Services
.
console
.
registerListener
(
listener
)
;
listeners
.
set
(
targetActor
listener
)
;
const
messages
=
[
]
;
for
(
const
message
of
cachedMessages
)
{
if
(
!
shouldHandleMessage
(
message
)
)
{
continue
;
}
messages
.
push
(
buildResourceFromMessage
(
targetActor
message
)
)
;
}
onAvailable
(
messages
)
;
}
function
shouldHandleMessage
(
message
)
{
if
(
message
instanceof
Ci
.
nsIScriptError
)
{
return
false
;
}
return
true
;
}
function
buildResourceFromMessage
(
targetActor
message
)
{
return
{
message
:
createStringGrip
(
targetActor
message
.
message
)
timeStamp
:
message
.
timeStamp
resourceType
:
PLATFORM_MESSAGE
}
;
}
function
unwatch
(
targetActor
)
{
const
listener
=
listeners
.
get
(
targetActor
)
;
if
(
!
listener
)
{
return
;
}
Services
.
console
.
unregisterListener
(
listener
)
;
listeners
.
delete
(
targetActor
)
;
}
module
.
exports
=
{
watch
unwatch
}
;
function
createStringGrip
(
targetActor
string
)
{
if
(
string
&
&
stringIsLong
(
string
)
)
{
const
actor
=
new
LongStringActor
(
targetActor
.
conn
string
)
;
targetActor
.
manage
(
actor
)
;
return
actor
.
form
(
)
;
}
return
string
;
}
