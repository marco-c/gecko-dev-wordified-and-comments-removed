"
use
strict
"
;
const
{
TYPES
:
{
THREAD_STATE
}
}
=
require
(
"
devtools
/
server
/
actors
/
resources
/
index
"
)
;
const
{
PAUSE_REASONS
}
=
require
(
"
devtools
/
server
/
actors
/
thread
"
)
;
const
STATES
=
{
PAUSED
:
"
paused
"
RESUMED
:
"
resumed
"
}
;
class
BreakpointWatcher
{
constructor
(
)
{
this
.
onPaused
=
this
.
onPaused
.
bind
(
this
)
;
this
.
onResumed
=
this
.
onResumed
.
bind
(
this
)
;
}
async
watch
(
targetActor
{
onAvailable
}
)
{
targetActor
.
attach
(
)
;
const
{
threadActor
}
=
targetActor
;
this
.
threadActor
=
threadActor
;
this
.
onAvailable
=
onAvailable
;
this
.
isInterrupted
=
false
;
threadActor
.
on
(
"
paused
"
this
.
onPaused
)
;
threadActor
.
on
(
"
resumed
"
this
.
onResumed
)
;
if
(
threadActor
.
isPaused
(
)
&
&
threadActor
.
lastPausedPacket
(
)
)
{
this
.
onPaused
(
threadActor
.
lastPausedPacket
(
)
)
;
}
}
destroy
(
)
{
this
.
threadActor
.
off
(
"
paused
"
this
.
onPaused
)
;
this
.
threadActor
.
off
(
"
resumed
"
this
.
onResumed
)
;
}
onPaused
(
packet
)
{
const
{
why
}
=
packet
;
if
(
why
.
type
=
=
=
PAUSE_REASONS
.
INTERRUPTED
&
&
!
why
.
onNext
)
{
this
.
isInterrupted
=
true
;
return
;
}
if
(
why
.
type
=
=
PAUSE_REASONS
.
ALREADY_PAUSED
)
{
return
;
}
this
.
onAvailable
(
[
{
resourceType
:
THREAD_STATE
state
:
STATES
.
PAUSED
why
frame
:
packet
.
frame
.
form
(
)
}
]
)
;
}
onResumed
(
packet
)
{
if
(
this
.
isInterrupted
)
{
this
.
isInterrupted
=
false
;
return
;
}
this
.
onAvailable
(
[
{
resourceType
:
THREAD_STATE
state
:
STATES
.
RESUMED
}
]
)
;
}
}
module
.
exports
=
BreakpointWatcher
;
