"
use
strict
"
;
const
{
JSTracer
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
server
/
tracer
/
tracer
.
sys
.
mjs
"
{
global
:
"
contextual
"
}
)
;
const
Targets
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
index
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
TRACER_LOG_METHODS
"
"
resource
:
/
/
devtools
/
shared
/
specs
/
tracer
.
js
"
true
)
;
class
TracingStateWatcher
{
async
watch
(
targetActor
{
onAvailable
}
)
{
if
(
targetActor
.
targetType
=
=
Targets
.
TYPES
.
PROCESS
)
{
return
;
}
this
.
targetActor
=
targetActor
;
this
.
onAvailable
=
onAvailable
;
this
.
tracingListener
=
{
onTracingToggled
:
this
.
onTracingToggled
.
bind
(
this
)
}
;
JSTracer
.
addTracingListener
(
this
.
tracingListener
)
;
}
destroy
(
)
{
if
(
!
this
.
tracingListener
)
{
return
;
}
JSTracer
.
removeTracingListener
(
this
.
tracingListener
)
;
}
onTracingToggled
(
enabled
reason
)
{
const
tracerActor
=
this
.
targetActor
.
getTargetScopedActor
(
"
tracer
"
)
;
const
logMethod
=
tracerActor
?
.
getLogMethod
(
)
;
if
(
!
logMethod
)
{
return
;
}
this
.
onAvailable
(
[
{
enabled
logMethod
profile
:
logMethod
=
=
TRACER_LOG_METHODS
.
PROFILER
&
&
!
enabled
?
tracerActor
.
getProfile
(
)
:
undefined
timeStamp
:
ChromeUtils
.
dateNow
(
)
reason
traceValues
:
tracerActor
.
traceValues
}
]
)
;
}
}
module
.
exports
=
TracingStateWatcher
;
