"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
Memory
}
=
require
(
"
devtools
/
server
/
performance
/
memory
"
)
;
const
{
actorBridgeWithSpec
}
=
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
const
{
memorySpec
}
=
require
(
"
devtools
/
shared
/
specs
/
memory
"
)
;
loader
.
lazyRequireGetter
(
this
"
StackFrameCache
"
"
devtools
/
server
/
actors
/
utils
/
stack
"
true
)
;
exports
.
MemoryActor
=
protocol
.
ActorClassWithSpec
(
memorySpec
{
initialize
(
conn
parent
frameCache
=
new
StackFrameCache
(
)
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
_onGarbageCollection
=
this
.
_onGarbageCollection
.
bind
(
this
)
;
this
.
_onAllocations
=
this
.
_onAllocations
.
bind
(
this
)
;
this
.
bridge
=
new
Memory
(
parent
frameCache
)
;
this
.
bridge
.
on
(
"
garbage
-
collection
"
this
.
_onGarbageCollection
)
;
this
.
bridge
.
on
(
"
allocations
"
this
.
_onAllocations
)
;
}
destroy
(
)
{
this
.
bridge
.
off
(
"
garbage
-
collection
"
this
.
_onGarbageCollection
)
;
this
.
bridge
.
off
(
"
allocations
"
this
.
_onAllocations
)
;
this
.
bridge
.
destroy
(
)
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
attach
:
actorBridgeWithSpec
(
"
attach
"
)
detach
:
actorBridgeWithSpec
(
"
detach
"
)
getState
:
actorBridgeWithSpec
(
"
getState
"
)
saveHeapSnapshot
(
boundaries
)
{
return
this
.
bridge
.
saveHeapSnapshot
(
boundaries
)
;
}
takeCensus
:
actorBridgeWithSpec
(
"
takeCensus
"
)
startRecordingAllocations
:
actorBridgeWithSpec
(
"
startRecordingAllocations
"
)
stopRecordingAllocations
:
actorBridgeWithSpec
(
"
stopRecordingAllocations
"
)
getAllocationsSettings
:
actorBridgeWithSpec
(
"
getAllocationsSettings
"
)
getAllocations
:
actorBridgeWithSpec
(
"
getAllocations
"
)
forceGarbageCollection
:
actorBridgeWithSpec
(
"
forceGarbageCollection
"
)
forceCycleCollection
:
actorBridgeWithSpec
(
"
forceCycleCollection
"
)
measure
:
actorBridgeWithSpec
(
"
measure
"
)
residentUnique
:
actorBridgeWithSpec
(
"
residentUnique
"
)
_onGarbageCollection
(
data
)
{
if
(
this
.
conn
.
transport
)
{
this
.
emit
(
"
garbage
-
collection
"
data
)
;
}
}
_onAllocations
(
data
)
{
if
(
this
.
conn
.
transport
)
{
this
.
emit
(
"
allocations
"
data
)
;
}
}
}
)
;
