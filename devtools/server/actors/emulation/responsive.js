"
use
strict
"
;
const
protocol
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
responsiveSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
responsive
.
js
"
)
;
const
ResponsiveActor
=
protocol
.
ActorClassWithSpec
(
responsiveSpec
{
initialize
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
targetActor
=
targetActor
;
this
.
docShell
=
targetActor
.
docShell
;
}
destroy
(
)
{
this
.
clearNetworkThrottling
(
)
;
this
.
targetActor
=
null
;
this
.
docShell
=
null
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
get
_consoleActor
(
)
{
if
(
this
.
targetActor
.
isDestroyed
(
)
)
{
return
null
;
}
const
form
=
this
.
targetActor
.
form
(
)
;
return
this
.
conn
.
_getOrCreateActor
(
form
.
consoleActor
)
;
}
get
win
(
)
{
return
this
.
docShell
.
chromeEventHandler
.
ownerGlobal
;
}
_previousNetworkThrottling
:
undefined
setNetworkThrottling
(
{
downloadThroughput
uploadThroughput
latency
}
)
{
const
throttleData
=
{
latencyMean
:
latency
latencyMax
:
latency
downloadBPSMean
:
downloadThroughput
downloadBPSMax
:
downloadThroughput
uploadBPSMean
:
uploadThroughput
uploadBPSMax
:
uploadThroughput
}
;
return
this
.
_setNetworkThrottling
(
throttleData
)
;
}
_setNetworkThrottling
(
throttleData
)
{
const
current
=
this
.
_getNetworkThrottling
(
)
;
let
match
=
throttleData
=
=
current
;
if
(
match
&
&
current
&
&
throttleData
)
{
match
=
Object
.
entries
(
current
)
.
every
(
(
[
k
v
]
)
=
>
{
return
throttleData
[
k
]
=
=
=
v
;
}
)
;
}
if
(
match
)
{
return
false
;
}
if
(
this
.
_previousNetworkThrottling
=
=
=
undefined
)
{
this
.
_previousNetworkThrottling
=
current
;
}
const
consoleActor
=
this
.
_consoleActor
;
if
(
!
consoleActor
)
{
return
false
;
}
consoleActor
.
startListeners
(
[
"
NetworkActivity
"
]
)
;
consoleActor
.
setPreferences
(
{
"
NetworkMonitor
.
throttleData
"
:
throttleData
}
)
;
return
true
;
}
getNetworkThrottling
(
)
{
const
throttleData
=
this
.
_getNetworkThrottling
(
)
;
if
(
!
throttleData
)
{
return
null
;
}
const
{
downloadBPSMax
uploadBPSMax
latencyMax
}
=
throttleData
;
return
{
downloadThroughput
:
downloadBPSMax
uploadThroughput
:
uploadBPSMax
latency
:
latencyMax
}
;
}
_getNetworkThrottling
(
)
{
const
consoleActor
=
this
.
_consoleActor
;
if
(
!
consoleActor
)
{
return
null
;
}
const
prefs
=
consoleActor
.
getPreferences
(
[
"
NetworkMonitor
.
throttleData
"
]
)
;
return
prefs
.
preferences
[
"
NetworkMonitor
.
throttleData
"
]
|
|
null
;
}
clearNetworkThrottling
(
)
{
if
(
this
.
_previousNetworkThrottling
!
=
=
undefined
)
{
return
this
.
_setNetworkThrottling
(
this
.
_previousNetworkThrottling
)
;
}
return
false
;
}
_previousTouchEventsOverride
:
undefined
setElementPickerState
(
state
pickerType
)
{
this
.
targetActor
.
touchSimulator
.
setElementPickerState
(
state
pickerType
)
;
}
async
dispatchOrientationChangeEvent
(
)
{
const
{
CustomEvent
}
=
this
.
win
;
const
orientationChangeEvent
=
new
CustomEvent
(
"
orientationchange
"
)
;
this
.
win
.
dispatchEvent
(
orientationChangeEvent
)
;
}
}
)
;
exports
.
ResponsiveActor
=
ResponsiveActor
;
