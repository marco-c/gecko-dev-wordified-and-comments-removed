"
use
strict
"
;
const
protocol
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
responsiveSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
responsive
.
js
"
)
;
const
ResponsiveActor
=
protocol
.
ActorClassWithSpec
(
responsiveSpec
{
initialize
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
targetActor
=
targetActor
;
this
.
docShell
=
targetActor
.
docShell
;
}
destroy
(
)
{
this
.
targetActor
=
null
;
this
.
docShell
=
null
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
get
win
(
)
{
return
this
.
docShell
.
chromeEventHandler
.
ownerGlobal
;
}
_previousTouchEventsOverride
:
undefined
setElementPickerState
(
state
pickerType
)
{
this
.
targetActor
.
touchSimulator
.
setElementPickerState
(
state
pickerType
)
;
}
async
dispatchOrientationChangeEvent
(
)
{
const
{
CustomEvent
}
=
this
.
win
;
const
orientationChangeEvent
=
new
CustomEvent
(
"
orientationchange
"
)
;
this
.
win
.
dispatchEvent
(
orientationChangeEvent
)
;
}
}
)
;
exports
.
ResponsiveActor
=
ResponsiveActor
;
