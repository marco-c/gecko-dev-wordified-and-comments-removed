"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
responsiveSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
responsive
"
)
;
loader
.
lazyRequireGetter
(
this
"
ScreenshotActor
"
"
devtools
/
server
/
actors
/
screenshot
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
TouchSimulator
"
"
devtools
/
server
/
actors
/
emulation
/
touch
-
simulator
"
true
)
;
const
FLOATING_SCROLLBARS_SHEET
=
Services
.
io
.
newURI
(
"
chrome
:
/
/
devtools
/
skin
/
floating
-
scrollbars
-
responsive
-
design
.
css
"
)
;
const
ResponsiveActor
=
protocol
.
ActorClassWithSpec
(
responsiveSpec
{
initialize
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
targetActor
=
targetActor
;
this
.
docShell
=
targetActor
.
docShell
;
this
.
onWindowReady
=
this
.
onWindowReady
.
bind
(
this
)
;
this
.
targetActor
.
on
(
"
window
-
ready
"
this
.
onWindowReady
)
;
}
destroy
(
)
{
this
.
clearDPPXOverride
(
)
;
this
.
clearNetworkThrottling
(
)
;
this
.
clearTouchEventsOverride
(
)
;
this
.
clearMetaViewportOverride
(
)
;
this
.
clearUserAgentOverride
(
)
;
this
.
targetActor
.
off
(
"
window
-
ready
"
this
.
onWindowReady
)
;
this
.
targetActor
=
null
;
this
.
docShell
=
null
;
this
.
_screenshotActor
=
null
;
this
.
_touchSimulator
=
null
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
async
onWindowReady
(
)
{
await
this
.
setFloatingScrollbars
(
true
)
;
}
get
_consoleActor
(
)
{
if
(
this
.
targetActor
.
exited
|
|
this
.
targetActor
.
isDestroyed
(
)
)
{
return
null
;
}
const
form
=
this
.
targetActor
.
form
(
)
;
return
this
.
conn
.
_getOrCreateActor
(
form
.
consoleActor
)
;
}
get
screenshotActor
(
)
{
if
(
!
this
.
_screenshotActor
)
{
this
.
_screenshotActor
=
new
ScreenshotActor
(
this
.
conn
this
.
targetActor
)
;
this
.
manage
(
this
.
_screenshotActor
)
;
}
return
this
.
_screenshotActor
;
}
get
touchSimulator
(
)
{
if
(
!
this
.
_touchSimulator
)
{
this
.
_touchSimulator
=
new
TouchSimulator
(
this
.
targetActor
.
chromeEventHandler
)
;
}
return
this
.
_touchSimulator
;
}
get
win
(
)
{
return
this
.
docShell
.
chromeEventHandler
.
ownerGlobal
;
}
_previousDPPXOverride
:
undefined
setDPPXOverride
(
dppx
)
{
if
(
this
.
getDPPXOverride
(
)
=
=
=
dppx
)
{
return
false
;
}
if
(
this
.
_previousDPPXOverride
=
=
=
undefined
)
{
this
.
_previousDPPXOverride
=
this
.
getDPPXOverride
(
)
;
}
this
.
docShell
.
contentViewer
.
overrideDPPX
=
dppx
;
return
true
;
}
getDPPXOverride
(
)
{
return
this
.
docShell
.
contentViewer
.
overrideDPPX
;
}
clearDPPXOverride
(
)
{
if
(
this
.
_previousDPPXOverride
!
=
=
undefined
)
{
return
this
.
setDPPXOverride
(
this
.
_previousDPPXOverride
)
;
}
return
false
;
}
_previousNetworkThrottling
:
undefined
setNetworkThrottling
(
{
downloadThroughput
uploadThroughput
latency
}
)
{
const
throttleData
=
{
latencyMean
:
latency
latencyMax
:
latency
downloadBPSMean
:
downloadThroughput
downloadBPSMax
:
downloadThroughput
uploadBPSMean
:
uploadThroughput
uploadBPSMax
:
uploadThroughput
}
;
return
this
.
_setNetworkThrottling
(
throttleData
)
;
}
_setNetworkThrottling
(
throttleData
)
{
const
current
=
this
.
_getNetworkThrottling
(
)
;
let
match
=
throttleData
=
=
current
;
if
(
match
&
&
current
&
&
throttleData
)
{
match
=
Object
.
entries
(
current
)
.
every
(
(
[
k
v
]
)
=
>
{
return
throttleData
[
k
]
=
=
=
v
;
}
)
;
}
if
(
match
)
{
return
false
;
}
if
(
this
.
_previousNetworkThrottling
=
=
=
undefined
)
{
this
.
_previousNetworkThrottling
=
current
;
}
const
consoleActor
=
this
.
_consoleActor
;
if
(
!
consoleActor
)
{
return
false
;
}
consoleActor
.
startListeners
(
[
"
NetworkActivity
"
]
)
;
consoleActor
.
setPreferences
(
{
"
NetworkMonitor
.
throttleData
"
:
throttleData
}
)
;
return
true
;
}
getNetworkThrottling
(
)
{
const
throttleData
=
this
.
_getNetworkThrottling
(
)
;
if
(
!
throttleData
)
{
return
null
;
}
const
{
downloadBPSMax
uploadBPSMax
latencyMax
}
=
throttleData
;
return
{
downloadThroughput
:
downloadBPSMax
uploadThroughput
:
uploadBPSMax
latency
:
latencyMax
}
;
}
_getNetworkThrottling
(
)
{
const
consoleActor
=
this
.
_consoleActor
;
if
(
!
consoleActor
)
{
return
null
;
}
const
prefs
=
consoleActor
.
getPreferences
(
[
"
NetworkMonitor
.
throttleData
"
]
)
;
return
prefs
.
preferences
[
"
NetworkMonitor
.
throttleData
"
]
|
|
null
;
}
clearNetworkThrottling
(
)
{
if
(
this
.
_previousNetworkThrottling
!
=
=
undefined
)
{
return
this
.
_setNetworkThrottling
(
this
.
_previousNetworkThrottling
)
;
}
return
false
;
}
_previousTouchEventsOverride
:
undefined
setElementPickerState
(
state
pickerType
)
{
this
.
touchSimulator
.
setElementPickerState
(
state
pickerType
)
;
}
setTouchEventsOverride
(
flag
)
{
if
(
this
.
getTouchEventsOverride
(
)
=
=
flag
)
{
return
false
;
}
if
(
this
.
_previousTouchEventsOverride
=
=
=
undefined
)
{
this
.
_previousTouchEventsOverride
=
this
.
getTouchEventsOverride
(
)
;
}
if
(
flag
=
=
"
enabled
"
)
{
this
.
touchSimulator
.
start
(
)
;
}
else
{
this
.
touchSimulator
.
stop
(
)
;
}
this
.
docShell
.
browsingContext
.
touchEventsOverride
=
flag
;
return
true
;
}
getTouchEventsOverride
(
)
{
return
this
.
docShell
.
browsingContext
.
touchEventsOverride
;
}
clearTouchEventsOverride
(
)
{
if
(
this
.
_previousTouchEventsOverride
!
=
=
undefined
)
{
return
this
.
setTouchEventsOverride
(
this
.
_previousTouchEventsOverride
)
;
}
return
false
;
}
_previousMetaViewportOverride
:
undefined
setMetaViewportOverride
(
flag
)
{
if
(
this
.
getMetaViewportOverride
(
)
=
=
flag
)
{
return
false
;
}
if
(
this
.
_previousMetaViewportOverride
=
=
=
undefined
)
{
this
.
_previousMetaViewportOverride
=
this
.
getMetaViewportOverride
(
)
;
}
this
.
docShell
.
metaViewportOverride
=
flag
;
return
true
;
}
getMetaViewportOverride
(
)
{
return
this
.
docShell
.
metaViewportOverride
;
}
clearMetaViewportOverride
(
)
{
if
(
this
.
_previousMetaViewportOverride
!
=
=
undefined
)
{
return
this
.
setMetaViewportOverride
(
this
.
_previousMetaViewportOverride
)
;
}
return
false
;
}
_previousUserAgentOverride
:
undefined
setUserAgentOverride
(
userAgent
)
{
if
(
this
.
getUserAgentOverride
(
)
=
=
userAgent
)
{
return
false
;
}
if
(
this
.
_previousUserAgentOverride
=
=
=
undefined
)
{
this
.
_previousUserAgentOverride
=
this
.
getUserAgentOverride
(
)
;
}
this
.
docShell
.
customUserAgent
=
userAgent
;
return
true
;
}
getUserAgentOverride
(
)
{
return
this
.
docShell
.
browsingContext
.
customUserAgent
;
}
clearUserAgentOverride
(
)
{
if
(
this
.
_previousUserAgentOverride
!
=
=
undefined
)
{
return
this
.
setUserAgentOverride
(
this
.
_previousUserAgentOverride
)
;
}
return
false
;
}
setScreenOrientation
(
type
angle
)
{
if
(
this
.
win
.
screen
.
orientation
.
angle
!
=
=
angle
|
|
this
.
win
.
screen
.
orientation
.
type
!
=
=
type
)
{
this
.
docShell
.
browsingContext
.
setRDMPaneOrientation
(
type
angle
)
;
}
}
async
simulateScreenOrientationChange
(
type
angle
isViewportRotated
=
false
)
{
if
(
!
isViewportRotated
)
{
this
.
setScreenOrientation
(
type
angle
)
;
return
;
}
const
{
CustomEvent
}
=
this
.
win
;
const
orientationChangeEvent
=
new
CustomEvent
(
"
orientationchange
"
)
;
this
.
setScreenOrientation
(
type
angle
)
;
this
.
win
.
dispatchEvent
(
orientationChangeEvent
)
;
}
async
captureScreenshot
(
)
{
return
this
.
screenshotActor
.
capture
(
{
}
)
;
}
async
setFloatingScrollbars
(
applyFloatingScrollbars
)
{
const
docShell
=
this
.
docShell
;
const
allDocShells
=
[
docShell
]
;
for
(
let
i
=
0
;
i
<
docShell
.
childCount
;
i
+
+
)
{
const
child
=
docShell
.
getChildAt
(
i
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
allDocShells
.
push
(
child
)
;
}
for
(
const
d
of
allDocShells
)
{
const
win
=
d
.
contentViewer
.
DOMDocument
.
defaultView
;
const
winUtils
=
win
.
windowUtils
;
try
{
if
(
applyFloatingScrollbars
)
{
winUtils
.
loadSheet
(
FLOATING_SCROLLBARS_SHEET
this
.
win
.
AGENT_SHEET
)
;
}
else
{
winUtils
.
removeSheet
(
FLOATING_SCROLLBARS_SHEET
this
.
win
.
AGENT_SHEET
)
;
}
}
catch
(
e
)
{
}
}
this
.
flushStyle
(
)
;
}
async
setMaxTouchPoints
(
touchSimulationEnabled
)
{
const
maxTouchPoints
=
touchSimulationEnabled
?
1
:
0
;
this
.
docShell
.
browsingContext
.
setRDMPaneMaxTouchPoints
(
maxTouchPoints
)
;
}
flushStyle
(
)
{
const
isSticky
=
this
.
docShell
.
contentViewer
.
sticky
;
this
.
docShell
.
contentViewer
.
sticky
=
false
;
this
.
docShell
.
contentViewer
.
hide
(
)
;
this
.
docShell
.
contentViewer
.
show
(
)
;
this
.
docShell
.
contentViewer
.
sticky
=
isSticky
;
}
}
)
;
exports
.
ResponsiveActor
=
ResponsiveActor
;
