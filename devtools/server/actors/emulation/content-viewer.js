"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
contentViewerSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
content
-
viewer
"
)
;
const
ContentViewerActor
=
protocol
.
ActorClassWithSpec
(
contentViewerSpec
{
initialize
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
targetActor
=
targetActor
;
this
.
docShell
=
targetActor
.
docShell
;
this
.
onWillNavigate
=
this
.
onWillNavigate
.
bind
(
this
)
;
this
.
onWindowReady
=
this
.
onWindowReady
.
bind
(
this
)
;
this
.
targetActor
.
on
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
this
.
targetActor
.
on
(
"
window
-
ready
"
this
.
onWindowReady
)
;
}
destroy
(
)
{
this
.
stopPrintMediaSimulation
(
)
;
this
.
setEmulatedColorScheme
(
)
;
this
.
targetActor
.
off
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
this
.
targetActor
.
off
(
"
window
-
ready
"
this
.
onWindowReady
)
;
this
.
targetActor
=
null
;
this
.
docShell
=
null
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
onWillNavigate
(
{
isTopLevel
}
)
{
if
(
this
.
_printSimulationEnabled
&
&
isTopLevel
)
{
this
.
stopPrintMediaSimulation
(
true
)
;
}
}
onWindowReady
(
{
isTopLevel
}
)
{
if
(
this
.
_printSimulationEnabled
&
&
isTopLevel
)
{
this
.
startPrintMediaSimulation
(
)
;
}
}
getEmulatedColorScheme
(
)
{
return
this
.
_emulatedColorScheme
;
}
setEmulatedColorScheme
(
scheme
=
null
)
{
if
(
this
.
_emulatedColorScheme
=
=
=
scheme
)
{
return
;
}
let
internalColorScheme
;
switch
(
scheme
)
{
case
"
light
"
:
internalColorScheme
=
Ci
.
nsIContentViewer
.
PREFERS_COLOR_SCHEME_LIGHT
;
break
;
case
"
dark
"
:
internalColorScheme
=
Ci
.
nsIContentViewer
.
PREFERS_COLOR_SCHEME_DARK
;
break
;
case
"
no
-
preference
"
:
internalColorScheme
=
Ci
.
nsIContentViewer
.
PREFERS_COLOR_SCHEME_NO_PREFERENCE
;
break
;
default
:
internalColorScheme
=
Ci
.
nsIContentViewer
.
PREFERS_COLOR_SCHEME_NONE
;
}
this
.
_emulatedColorScheme
=
scheme
;
this
.
docShell
.
contentViewer
.
emulatePrefersColorScheme
(
internalColorScheme
)
;
}
_emulatedColorScheme
:
null
_printSimulationEnabled
:
false
getIsPrintSimulationEnabled
(
)
{
return
this
.
_printSimulationEnabled
;
}
async
startPrintMediaSimulation
(
)
{
this
.
_printSimulationEnabled
=
true
;
this
.
targetActor
.
docShell
.
contentViewer
.
emulateMedium
(
"
print
"
)
;
}
async
stopPrintMediaSimulation
(
state
=
false
)
{
this
.
_printSimulationEnabled
=
state
;
this
.
targetActor
.
docShell
.
contentViewer
.
stopEmulatingMedium
(
)
;
}
}
)
;
exports
.
ContentViewerActor
=
ContentViewerActor
;
