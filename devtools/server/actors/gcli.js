"
use
strict
"
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
method
Arg
Option
RetVal
Actor
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
gcliSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
gcli
"
)
;
const
events
=
require
(
"
sdk
/
event
/
core
"
)
;
const
{
createSystem
}
=
require
(
"
gcli
/
system
"
)
;
const
GcliActor
=
ActorClassWithSpec
(
gcliSpec
{
initialize
:
function
(
conn
tabActor
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
_commandsChanged
=
this
.
_commandsChanged
.
bind
(
this
)
;
this
.
_tabActor
=
tabActor
;
this
.
_requisitionPromise
=
undefined
;
}
destroy
:
function
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
if
(
this
.
_requisitionPromise
=
=
null
)
{
this
.
_commandsChanged
=
undefined
;
this
.
_tabActor
=
undefined
;
return
Promise
.
resolve
(
)
;
}
return
this
.
_getRequisition
(
)
.
then
(
requisition
=
>
{
requisition
.
destroy
(
)
;
this
.
_system
.
commands
.
onCommandsChange
.
remove
(
this
.
_commandsChanged
)
;
this
.
_system
.
destroy
(
)
;
this
.
_system
=
undefined
;
this
.
_requisitionPromise
=
undefined
;
this
.
_tabActor
=
undefined
;
this
.
_commandsChanged
=
undefined
;
}
)
;
}
_testOnlyAddItemsByModule
:
function
(
names
)
{
return
this
.
_getRequisition
(
)
.
then
(
requisition
=
>
{
return
requisition
.
system
.
addItemsByModule
(
names
)
;
}
)
;
}
_testOnlyRemoveItemsByModule
:
function
(
names
)
{
return
this
.
_getRequisition
(
)
.
then
(
requisition
=
>
{
return
requisition
.
system
.
removeItemsByModule
(
names
)
;
}
)
;
}
specs
:
function
(
customProps
)
{
return
this
.
_getRequisition
(
)
.
then
(
requisition
=
>
{
return
requisition
.
system
.
commands
.
getCommandSpecs
(
customProps
)
;
}
)
;
}
execute
:
function
(
typed
)
{
return
this
.
_getRequisition
(
)
.
then
(
requisition
=
>
{
return
requisition
.
updateExec
(
typed
)
.
then
(
output
=
>
output
.
toJson
(
)
)
;
}
)
;
}
state
:
function
(
typed
start
rank
)
{
return
this
.
_getRequisition
(
)
.
then
(
requisition
=
>
{
return
requisition
.
update
(
typed
)
.
then
(
(
)
=
>
{
return
requisition
.
getStateData
(
start
rank
)
;
}
)
;
}
)
;
}
parseType
:
function
(
typed
paramName
)
{
return
this
.
_getRequisition
(
)
.
then
(
requisition
=
>
{
return
requisition
.
update
(
typed
)
.
then
(
(
)
=
>
{
let
assignment
=
requisition
.
getAssignment
(
paramName
)
;
return
Promise
.
resolve
(
assignment
.
predictions
)
.
then
(
predictions
=
>
{
return
{
status
:
assignment
.
getStatus
(
)
.
toString
(
)
message
:
assignment
.
message
predictions
:
predictions
}
;
}
)
;
}
)
;
}
)
;
}
nudgeType
:
function
(
typed
by
paramName
)
{
return
this
.
requisition
.
update
(
typed
)
.
then
(
(
)
=
>
{
const
assignment
=
this
.
requisition
.
getAssignment
(
paramName
)
;
return
this
.
requisition
.
nudge
(
assignment
by
)
.
then
(
(
)
=
>
{
return
assignment
.
arg
=
=
null
?
undefined
:
assignment
.
arg
.
text
;
}
)
;
}
)
;
}
getSelectionLookup
:
function
(
commandName
paramName
)
{
return
this
.
_getRequisition
(
)
.
then
(
requisition
=
>
{
const
command
=
requisition
.
system
.
commands
.
get
(
commandName
)
;
if
(
command
=
=
null
)
{
throw
new
Error
(
"
No
command
called
'
"
+
commandName
+
"
'
"
)
;
}
let
type
;
command
.
params
.
forEach
(
param
=
>
{
if
(
param
.
name
=
=
=
paramName
)
{
type
=
param
.
type
;
}
}
)
;
if
(
type
=
=
null
)
{
throw
new
Error
(
"
No
parameter
called
'
"
+
paramName
+
"
'
in
'
"
+
commandName
+
"
'
"
)
;
}
const
reply
=
type
.
getLookup
(
requisition
.
executionContext
)
;
return
Promise
.
resolve
(
reply
)
.
then
(
lookup
=
>
{
return
lookup
.
map
(
info
=
>
(
{
name
:
info
.
name
}
)
)
;
}
)
;
}
)
;
}
_getRequisition
:
function
(
)
{
if
(
this
.
_tabActor
=
=
null
)
{
throw
new
Error
(
"
GcliActor
used
post
-
destroy
"
)
;
}
if
(
this
.
_requisitionPromise
!
=
null
)
{
return
this
.
_requisitionPromise
;
}
const
Requisition
=
require
(
"
gcli
/
cli
"
)
.
Requisition
;
const
tabActor
=
this
.
_tabActor
;
this
.
_system
=
createSystem
(
{
location
:
"
server
"
}
)
;
this
.
_system
.
commands
.
onCommandsChange
.
add
(
this
.
_commandsChanged
)
;
const
gcliInit
=
require
(
"
devtools
/
shared
/
gcli
/
commands
/
index
"
)
;
gcliInit
.
addAllItemsByModule
(
this
.
_system
)
;
this
.
_requisitionPromise
=
this
.
_system
.
load
(
)
.
then
(
(
)
=
>
{
const
environment
=
{
get
chromeWindow
(
)
{
throw
new
Error
(
"
environment
.
chromeWindow
is
not
available
in
runAt
:
server
commands
"
)
;
}
get
chromeDocument
(
)
{
throw
new
Error
(
"
environment
.
chromeDocument
is
not
available
in
runAt
:
server
commands
"
)
;
}
get
window
(
)
{
return
tabActor
.
window
;
}
get
document
(
)
{
return
tabActor
.
window
&
&
tabActor
.
window
.
document
;
}
}
;
return
new
Requisition
(
this
.
_system
{
environment
:
environment
}
)
;
}
)
;
return
this
.
_requisitionPromise
;
}
_commandsChanged
:
function
(
)
{
events
.
emit
(
this
"
commands
-
changed
"
)
;
}
}
)
;
exports
.
GcliActor
=
GcliActor
;
