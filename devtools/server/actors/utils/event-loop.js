"
use
strict
"
;
const
xpcInspector
=
require
(
"
xpcInspector
"
)
;
function
EventLoopStack
(
{
thread
connection
}
)
{
this
.
_thread
=
thread
;
this
.
_connection
=
connection
;
}
EventLoopStack
.
prototype
=
{
get
size
(
)
{
return
xpcInspector
.
eventLoopNestLevel
;
}
get
lastPausedUrl
(
)
{
let
url
=
null
;
if
(
this
.
size
>
0
)
{
try
{
url
=
xpcInspector
.
lastNestRequestor
.
url
;
}
catch
(
e
)
{
dumpn
(
e
)
;
}
}
return
url
;
}
get
lastConnection
(
)
{
return
xpcInspector
.
lastNestRequestor
.
_connection
;
}
push
:
function
(
)
{
return
new
EventLoop
(
{
thread
:
this
.
_thread
connection
:
this
.
_connection
}
)
;
}
}
;
function
EventLoop
(
{
thread
connection
}
)
{
this
.
_thread
=
thread
;
this
.
_connection
=
connection
;
this
.
enter
=
this
.
enter
.
bind
(
this
)
;
this
.
resolve
=
this
.
resolve
.
bind
(
this
)
;
}
EventLoop
.
prototype
=
{
entered
:
false
resolved
:
false
get
url
(
)
{
return
this
.
_thread
.
_parent
.
url
;
}
enter
:
function
(
)
{
const
preNestData
=
this
.
preNest
(
)
;
this
.
entered
=
true
;
xpcInspector
.
enterNestedEventLoop
(
this
)
;
if
(
xpcInspector
.
eventLoopNestLevel
>
0
)
{
const
{
resolved
}
=
xpcInspector
.
lastNestRequestor
;
if
(
resolved
)
{
xpcInspector
.
exitNestedEventLoop
(
)
;
}
}
this
.
postNest
(
preNestData
)
;
}
resolve
:
function
(
)
{
if
(
!
this
.
entered
)
{
throw
new
Error
(
"
Can
'
t
resolve
an
event
loop
before
it
has
been
entered
!
"
)
;
}
if
(
this
.
resolved
)
{
throw
new
Error
(
"
Already
resolved
this
nested
event
loop
!
"
)
;
}
this
.
resolved
=
true
;
if
(
this
=
=
=
xpcInspector
.
lastNestRequestor
)
{
xpcInspector
.
exitNestedEventLoop
(
)
;
return
true
;
}
return
false
;
}
getAllWindowDebuggees
(
)
{
return
(
this
.
_thread
.
dbg
.
getDebuggees
(
)
.
filter
(
debuggee
=
>
{
return
debuggee
.
class
=
=
"
Window
"
;
}
)
.
map
(
debuggee
=
>
{
return
debuggee
.
unsafeDereference
(
)
;
}
)
.
filter
(
window
=
>
window
.
top
=
=
=
window
)
)
;
}
preNest
(
)
{
const
windows
=
[
]
;
for
(
const
window
of
this
.
getAllWindowDebuggees
(
)
)
{
const
{
windowUtils
}
=
window
;
windowUtils
.
suppressEventHandling
(
true
)
;
windowUtils
.
suspendTimeouts
(
)
;
windows
.
push
(
window
)
;
}
return
windows
;
}
postNest
(
pausedWindows
)
{
for
(
const
window
of
pausedWindows
)
{
const
{
windowUtils
}
=
window
;
windowUtils
.
resumeTimeouts
(
)
;
windowUtils
.
suppressEventHandling
(
false
)
;
}
}
}
;
exports
.
EventLoopStack
=
EventLoopStack
;
