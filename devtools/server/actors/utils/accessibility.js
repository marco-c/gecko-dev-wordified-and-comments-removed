"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
Ci
"
"
chrome
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
colorUtils
"
"
devtools
/
shared
/
css
/
color
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
CssLogic
"
"
devtools
/
server
/
actors
/
inspector
/
css
-
logic
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
InspectorActorUtils
"
"
devtools
/
server
/
actors
/
inspector
/
utils
"
)
;
loader
.
lazyRequireGetter
(
this
"
Services
"
)
;
function
getContrastRatioFor
(
node
)
{
const
backgroundColor
=
InspectorActorUtils
.
getClosestBackgroundColor
(
node
)
;
const
backgroundImage
=
InspectorActorUtils
.
getClosestBackgroundImage
(
node
)
;
const
computedStyles
=
CssLogic
.
getComputedStyle
(
node
)
;
if
(
!
computedStyles
)
{
return
null
;
}
const
{
color
"
font
-
size
"
:
fontSize
"
font
-
weight
"
:
fontWeight
}
=
computedStyles
;
const
isBoldText
=
parseInt
(
fontWeight
10
)
>
=
600
;
const
backgroundRgbaColor
=
new
colorUtils
.
CssColor
(
backgroundColor
true
)
;
const
textRgbaColor
=
new
colorUtils
.
CssColor
(
color
true
)
;
if
(
textRgbaColor
.
isTransparent
(
)
)
{
return
null
;
}
if
(
backgroundImage
!
=
=
"
none
"
)
{
return
null
;
}
let
{
r
:
bgR
g
:
bgG
b
:
bgB
a
:
bgA
}
=
backgroundRgbaColor
.
getRGBATuple
(
)
;
let
{
r
:
textR
g
:
textG
b
:
textB
a
:
textA
}
=
textRgbaColor
.
getRGBATuple
(
)
;
const
opacity
=
parseFloat
(
computedStyles
.
opacity
)
;
if
(
opacity
<
1
)
{
bgA
=
opacity
*
bgA
;
textA
=
opacity
*
textA
;
}
return
{
ratio
:
colorUtils
.
calculateContrastRatio
(
[
bgR
bgG
bgB
bgA
]
[
textR
textG
textB
textA
]
)
largeText
:
Math
.
ceil
(
parseFloat
(
fontSize
)
*
72
)
/
96
>
=
(
isBoldText
?
14
:
18
)
}
;
}
function
isDefunct
(
accessible
)
{
if
(
!
Services
.
appinfo
.
accessibilityEnabled
)
{
return
true
;
}
let
defunct
=
false
;
try
{
const
extraState
=
{
}
;
accessible
.
getState
(
{
}
extraState
)
;
defunct
=
!
!
(
extraState
.
value
&
Ci
.
nsIAccessibleStates
.
EXT_STATE_DEFUNCT
)
;
}
catch
(
e
)
{
defunct
=
true
;
}
return
defunct
;
}
exports
.
getContrastRatioFor
=
getContrastRatioFor
;
exports
.
isDefunct
=
isDefunct
;
