"
use
strict
"
;
const
{
Cu
CC
}
=
require
(
"
chrome
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
exports
.
registerActor
=
function
(
sourceText
fileName
options
)
{
exports
.
registerActorInCurrentProcess
(
sourceText
fileName
options
)
;
return
DebuggerServer
.
setupInChild
(
{
module
:
"
devtools
/
server
/
actors
/
utils
/
actor
-
registry
-
utils
"
setupChild
:
"
registerActorInCurrentProcess
"
args
:
[
sourceText
fileName
options
]
waitForEval
:
true
}
)
;
}
;
exports
.
registerActorInCurrentProcess
=
function
(
sourceText
fileName
options
)
{
const
principal
=
CC
(
"
mozilla
.
org
/
systemprincipal
;
1
"
"
nsIPrincipal
"
)
(
)
;
const
sandbox
=
Cu
.
Sandbox
(
principal
)
;
sandbox
.
exports
=
{
}
;
sandbox
.
require
=
require
;
Cu
.
evalInSandbox
(
sourceText
sandbox
"
1
.
8
"
fileName
1
)
;
const
{
prefix
constructor
type
}
=
options
;
if
(
type
.
global
&
&
!
DebuggerServer
.
globalActorFactories
.
hasOwnProperty
(
prefix
)
)
{
DebuggerServer
.
addGlobalActor
(
{
constructorName
:
constructor
constructorFun
:
sandbox
[
constructor
]
}
prefix
)
;
}
if
(
type
.
target
&
&
!
DebuggerServer
.
targetScopedActorFactories
.
hasOwnProperty
(
prefix
)
)
{
DebuggerServer
.
addTargetScopedActor
(
{
constructorName
:
constructor
constructorFun
:
sandbox
[
constructor
]
}
prefix
)
;
}
}
;
exports
.
unregisterActor
=
function
(
options
)
{
exports
.
unregisterActorInCurrentProcess
(
options
)
;
DebuggerServer
.
setupInChild
(
{
module
:
"
devtools
/
server
/
actors
/
utils
/
actor
-
registry
-
utils
"
setupChild
:
"
unregisterActorInCurrentProcess
"
args
:
[
options
]
}
)
;
}
;
exports
.
unregisterActorInCurrentProcess
=
function
(
options
)
{
if
(
options
.
target
)
{
DebuggerServer
.
removeTargetScopedActor
(
options
)
;
}
if
(
options
.
global
)
{
DebuggerServer
.
removeGlobalActor
(
options
)
;
}
}
;
