"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
PREF_UNUSED_CSS_ENABLED
=
"
devtools
.
inspector
.
inactive
.
css
.
enabled
"
;
class
InactivePropertyHelper
{
get
VALIDATORS
(
)
{
return
[
{
invalidProperties
:
[
"
flex
-
direction
"
"
flex
-
flow
"
"
flex
-
wrap
"
]
when
:
(
)
=
>
!
this
.
flexContainer
fixId
:
"
inactive
-
css
-
not
-
flex
-
container
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
flex
-
container
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
flex
"
"
flex
-
basis
"
"
flex
-
grow
"
"
flex
-
shrink
"
"
order
"
]
when
:
(
)
=
>
!
this
.
flexItem
fixId
:
"
inactive
-
css
-
not
-
flex
-
item
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
flex
-
item
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
grid
-
auto
-
columns
"
"
grid
-
auto
-
flow
"
"
grid
-
auto
-
rows
"
"
grid
-
template
"
"
grid
-
gap
"
"
row
-
gap
"
"
column
-
gap
"
"
justify
-
items
"
]
when
:
(
)
=
>
!
this
.
gridContainer
fixId
:
"
inactive
-
css
-
not
-
grid
-
container
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
grid
-
container
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
grid
-
area
"
"
grid
-
column
"
"
grid
-
column
-
end
"
"
grid
-
column
-
start
"
"
grid
-
row
"
"
grid
-
row
-
end
"
"
grid
-
row
-
start
"
"
justify
-
self
"
]
when
:
(
)
=
>
!
this
.
gridItem
fixId
:
"
inactive
-
css
-
not
-
grid
-
item
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
grid
-
item
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
align
-
self
"
]
when
:
(
)
=
>
!
this
.
gridItem
&
&
!
this
.
flexItem
fixId
:
"
inactive
-
css
-
not
-
grid
-
or
-
flex
-
item
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
grid
-
or
-
flex
-
item
"
numFixProps
:
4
}
{
invalidProperties
:
[
"
align
-
content
"
"
align
-
items
"
"
justify
-
content
"
]
when
:
(
)
=
>
!
this
.
gridContainer
&
&
!
this
.
flexContainer
fixId
:
"
inactive
-
css
-
not
-
grid
-
or
-
flex
-
container
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
grid
-
or
-
flex
-
container
"
numFixProps
:
2
}
]
;
}
get
unusedCssEnabled
(
)
{
if
(
!
this
.
_unusedCssEnabled
)
{
this
.
_unusedCssEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_UNUSED_CSS_ENABLED
false
)
;
}
return
this
.
_unusedCssEnabled
;
}
isPropertyUsed
(
el
elStyle
cssRule
property
)
{
if
(
!
this
.
unusedCssEnabled
)
{
return
{
used
:
true
}
;
}
let
fixId
=
"
"
;
let
msgId
=
"
"
;
let
numFixProps
=
0
;
let
used
=
true
;
this
.
VALIDATORS
.
some
(
validator
=
>
{
let
isRuleConcerned
=
false
;
if
(
validator
.
invalidProperties
)
{
isRuleConcerned
=
validator
.
invalidProperties
=
=
=
"
*
"
|
|
validator
.
invalidProperties
.
includes
(
property
)
;
}
else
if
(
validator
.
validProperties
)
{
isRuleConcerned
=
!
validator
.
validProperties
.
includes
(
property
)
;
}
if
(
!
isRuleConcerned
)
{
return
false
;
}
this
.
select
(
el
elStyle
cssRule
property
)
;
if
(
validator
.
when
(
)
)
{
fixId
=
validator
.
fixId
;
msgId
=
validator
.
msgId
;
numFixProps
=
validator
.
numFixProps
;
used
=
false
;
return
true
;
}
return
false
;
}
)
;
return
{
fixId
msgId
numFixProps
property
used
}
;
}
select
(
node
style
cssRule
property
)
{
this
.
_node
=
node
;
this
.
_cssRule
=
cssRule
;
this
.
_property
=
property
;
this
.
_style
=
style
;
}
get
node
(
)
{
return
this
.
_node
;
}
get
style
(
)
{
return
this
.
_style
;
}
checkStyle
(
propName
values
)
{
return
this
.
checkStyleForNode
(
this
.
node
propName
values
)
;
}
checkStyleForNode
(
node
propName
values
)
{
return
values
.
some
(
value
=
>
this
.
style
[
propName
]
=
=
=
value
)
;
}
get
flexContainer
(
)
{
return
this
.
checkStyle
(
"
display
"
[
"
flex
"
"
inline
-
flex
"
]
)
;
}
get
flexItem
(
)
{
return
this
.
isFlexItem
(
this
.
node
)
;
}
get
gridContainer
(
)
{
return
this
.
checkStyle
(
"
display
"
[
"
grid
"
"
inline
-
grid
"
]
)
;
}
get
gridItem
(
)
{
return
this
.
isGridItem
(
this
.
node
)
;
}
isFlexItem
(
node
)
{
return
!
!
node
.
parentFlexElement
;
}
isFlexContainer
(
node
)
{
return
!
!
node
.
getAsFlexContainer
(
)
;
}
isGridContainer
(
node
)
{
return
!
!
node
.
getGridFragments
(
)
.
length
>
0
;
}
isGridItem
(
node
)
{
return
!
!
this
.
getParentGridElement
(
this
.
node
)
;
}
getParentGridElement
(
node
)
{
if
(
node
.
nodeType
=
=
=
node
.
ELEMENT_NODE
)
{
const
display
=
this
.
style
.
display
;
if
(
!
display
|
|
display
=
=
=
"
none
"
|
|
display
=
=
=
"
contents
"
)
{
return
null
;
}
const
position
=
this
.
style
.
position
;
if
(
position
=
=
=
"
absolute
"
|
|
position
=
=
=
"
fixed
"
|
|
this
.
style
.
cssFloat
!
=
=
"
none
"
)
{
return
null
;
}
}
else
if
(
node
.
nodeType
!
=
=
node
.
TEXT_NODE
)
{
return
null
;
}
for
(
let
p
=
node
.
flattenedTreeParentNode
;
p
;
p
=
p
.
flattenedTreeParentNode
)
{
const
style
=
node
.
ownerGlobal
.
getComputedStyle
(
p
)
;
const
display
=
style
.
display
;
if
(
display
.
includes
(
"
grid
"
)
&
&
!
!
p
.
getGridFragments
(
)
.
length
>
0
)
{
return
p
;
}
if
(
display
!
=
=
"
contents
"
)
{
return
null
;
}
}
return
null
;
}
}
exports
.
inactivePropertyHelper
=
new
InactivePropertyHelper
(
)
;
