"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
INACTIVE_CSS_ENABLED
=
Services
.
prefs
.
getBoolPref
(
"
devtools
.
inspector
.
inactive
.
css
.
enabled
"
false
)
;
class
InactivePropertyHelper
{
get
VALIDATORS
(
)
{
return
[
{
invalidProperties
:
[
"
flex
-
direction
"
"
flex
-
flow
"
"
flex
-
wrap
"
]
when
:
(
)
=
>
!
this
.
flexContainer
fixId
:
"
inactive
-
css
-
not
-
flex
-
container
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
flex
-
container
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
flex
"
"
flex
-
basis
"
"
flex
-
grow
"
"
flex
-
shrink
"
"
order
"
]
when
:
(
)
=
>
!
this
.
flexItem
fixId
:
"
inactive
-
css
-
not
-
flex
-
item
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
flex
-
item
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
grid
-
auto
-
columns
"
"
grid
-
auto
-
flow
"
"
grid
-
auto
-
rows
"
"
grid
-
template
"
"
grid
-
gap
"
"
justify
-
items
"
]
when
:
(
)
=
>
!
this
.
gridContainer
fixId
:
"
inactive
-
css
-
not
-
grid
-
container
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
grid
-
container
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
grid
-
area
"
"
grid
-
column
"
"
grid
-
column
-
end
"
"
grid
-
column
-
start
"
"
grid
-
row
"
"
grid
-
row
-
end
"
"
grid
-
row
-
start
"
"
justify
-
self
"
]
when
:
(
)
=
>
!
this
.
gridItem
fixId
:
"
inactive
-
css
-
not
-
grid
-
item
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
grid
-
item
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
align
-
self
"
"
place
-
self
"
]
when
:
(
)
=
>
!
this
.
gridItem
&
&
!
this
.
flexItem
fixId
:
"
inactive
-
css
-
not
-
grid
-
or
-
flex
-
item
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
grid
-
or
-
flex
-
item
"
numFixProps
:
4
}
{
invalidProperties
:
[
"
align
-
content
"
"
align
-
items
"
"
justify
-
content
"
"
place
-
content
"
"
place
-
items
"
"
row
-
gap
"
]
when
:
(
)
=
>
!
this
.
gridContainer
&
&
!
this
.
flexContainer
fixId
:
"
inactive
-
css
-
not
-
grid
-
or
-
flex
-
container
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
grid
-
or
-
flex
-
container
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
column
-
gap
"
"
gap
"
]
when
:
(
)
=
>
!
this
.
gridContainer
&
&
!
this
.
flexContainer
&
&
!
this
.
multiColContainer
fixId
:
"
inactive
-
css
-
not
-
grid
-
or
-
flex
-
container
-
or
-
multicol
-
container
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
grid
-
or
-
flex
-
container
-
or
-
multicol
-
container
"
numFixProps
:
3
}
{
invalidProperties
:
[
"
vertical
-
align
"
]
when
:
(
)
=
>
{
const
{
selectorText
}
=
this
.
cssRule
;
const
isFirstLetter
=
selectorText
&
&
selectorText
.
includes
(
"
:
:
first
-
letter
"
)
;
const
isFirstLine
=
selectorText
&
&
selectorText
.
includes
(
"
:
:
first
-
line
"
)
;
return
!
this
.
isInlineLevel
(
)
&
&
!
isFirstLetter
&
&
!
isFirstLine
;
}
fixId
:
"
inactive
-
css
-
not
-
inline
-
or
-
tablecell
-
fix
"
msgId
:
"
inactive
-
css
-
not
-
inline
-
or
-
tablecell
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
max
-
width
"
"
min
-
width
"
"
width
"
]
when
:
(
)
=
>
this
.
nonReplacedInlineBox
|
|
this
.
tableRow
|
|
this
.
rowGroup
fixId
:
"
inactive
-
css
-
non
-
replaced
-
inline
-
or
-
table
-
row
-
or
-
row
-
group
-
fix
"
msgId
:
"
inactive
-
css
-
property
-
because
-
of
-
display
"
numFixProps
:
2
}
{
invalidProperties
:
[
"
max
-
height
"
"
min
-
height
"
"
height
"
]
when
:
(
)
=
>
this
.
nonReplacedInlineBox
|
|
this
.
tableColumn
|
|
this
.
columnGroup
fixId
:
"
inactive
-
css
-
non
-
replaced
-
inline
-
or
-
table
-
column
-
or
-
column
-
group
-
fix
"
msgId
:
"
inactive
-
css
-
property
-
because
-
of
-
display
"
numFixProps
:
1
}
]
;
}
get
invalidProperties
(
)
{
if
(
!
this
.
_invalidProperties
)
{
const
allProps
=
this
.
VALIDATORS
.
map
(
v
=
>
v
.
invalidProperties
)
.
flat
(
)
;
this
.
_invalidProperties
=
new
Set
(
allProps
)
;
}
return
this
.
_invalidProperties
;
}
isPropertyUsed
(
el
elStyle
cssRule
property
)
{
if
(
!
INACTIVE_CSS_ENABLED
|
|
!
this
.
invalidProperties
.
has
(
property
)
)
{
return
{
used
:
true
}
;
}
let
fixId
=
"
"
;
let
msgId
=
"
"
;
let
numFixProps
=
0
;
let
used
=
true
;
this
.
VALIDATORS
.
some
(
validator
=
>
{
let
isRuleConcerned
=
false
;
if
(
validator
.
invalidProperties
)
{
isRuleConcerned
=
validator
.
invalidProperties
=
=
=
"
*
"
|
|
validator
.
invalidProperties
.
includes
(
property
)
;
}
if
(
!
isRuleConcerned
)
{
return
false
;
}
this
.
select
(
el
elStyle
cssRule
property
)
;
if
(
validator
.
when
(
)
)
{
fixId
=
validator
.
fixId
;
msgId
=
validator
.
msgId
;
numFixProps
=
validator
.
numFixProps
;
used
=
false
;
return
true
;
}
return
false
;
}
)
;
this
.
unselect
(
)
;
let
display
;
try
{
display
=
elStyle
?
elStyle
.
display
:
null
;
}
catch
(
e
)
{
}
return
{
display
fixId
msgId
numFixProps
property
used
}
;
}
select
(
node
style
cssRule
property
)
{
this
.
_node
=
node
;
this
.
_cssRule
=
cssRule
;
this
.
_property
=
property
;
this
.
_style
=
style
;
}
unselect
(
)
{
this
.
_node
=
null
;
this
.
_cssRule
=
null
;
this
.
_property
=
null
;
this
.
_style
=
null
;
}
get
node
(
)
{
return
this
.
_node
;
}
get
style
(
)
{
return
this
.
_style
;
}
get
cssRule
(
)
{
return
this
.
_cssRule
;
}
checkStyle
(
propName
values
)
{
return
this
.
checkStyleForNode
(
this
.
node
propName
values
)
;
}
checkStyleForNode
(
node
propName
values
)
{
if
(
!
this
.
style
)
{
return
false
;
}
return
values
.
some
(
value
=
>
this
.
style
[
propName
]
=
=
=
value
)
;
}
isInlineLevel
(
)
{
return
this
.
checkStyle
(
"
display
"
[
"
inline
"
"
inline
-
block
"
"
inline
-
table
"
"
inline
-
flex
"
"
inline
-
grid
"
"
table
-
cell
"
"
table
-
row
"
"
table
-
row
-
group
"
"
table
-
header
-
group
"
"
table
-
footer
-
group
"
]
)
;
}
get
flexContainer
(
)
{
return
this
.
checkStyle
(
"
display
"
[
"
flex
"
"
inline
-
flex
"
]
)
;
}
get
flexItem
(
)
{
return
this
.
isFlexItem
(
this
.
node
)
;
}
get
gridContainer
(
)
{
return
this
.
checkStyle
(
"
display
"
[
"
grid
"
"
inline
-
grid
"
]
)
;
}
get
gridItem
(
)
{
return
this
.
isGridItem
(
this
.
node
)
;
}
get
multiColContainer
(
)
{
const
autoColumnWidth
=
this
.
checkStyle
(
"
column
-
width
"
[
"
auto
"
]
)
;
const
autoColumnCount
=
this
.
checkStyle
(
"
column
-
count
"
[
"
auto
"
]
)
;
return
!
autoColumnWidth
|
|
!
autoColumnCount
;
}
get
tableRow
(
)
{
return
this
.
style
&
&
this
.
style
.
display
=
=
=
"
table
-
row
"
;
}
get
rowGroup
(
)
{
return
(
this
.
style
&
&
(
this
.
style
.
display
=
=
=
"
table
-
row
-
group
"
|
|
this
.
style
.
display
=
=
=
"
table
-
header
-
group
"
|
|
this
.
style
.
display
=
=
=
"
table
-
footer
-
group
"
)
)
;
}
get
tableColumn
(
)
{
return
this
.
style
&
&
this
.
style
.
display
=
=
=
"
table
-
column
"
;
}
get
columnGroup
(
)
{
return
this
.
style
&
&
this
.
style
.
display
=
=
=
"
table
-
column
-
group
"
;
}
get
hasCssLayout
(
)
{
return
!
this
.
isSvg
&
&
!
this
.
isMathMl
;
}
get
nonReplacedInlineBox
(
)
{
return
(
this
.
hasCssLayout
&
&
this
.
nonReplaced
&
&
this
.
style
&
&
this
.
style
.
display
=
=
=
"
inline
"
)
;
}
get
nonReplaced
(
)
{
return
!
this
.
replaced
;
}
get
replaced
(
)
{
if
(
this
.
nodeNameOneOf
(
[
"
audio
"
"
br
"
"
button
"
"
canvas
"
"
embed
"
"
hr
"
"
iframe
"
"
input
"
"
math
"
"
object
"
"
picture
"
"
select
"
"
svg
"
"
textarea
"
"
video
"
]
)
)
{
return
true
;
}
if
(
this
.
nodeName
=
=
=
"
img
"
&
&
this
.
node
.
complete
)
{
return
true
;
}
return
false
;
}
get
nodeName
(
)
{
return
this
.
node
.
nodeName
?
this
.
node
.
nodeName
.
toLowerCase
(
)
:
null
;
}
get
isMathMl
(
)
{
return
this
.
node
.
namespaceURI
=
=
=
"
http
:
/
/
www
.
w3
.
org
/
1998
/
Math
/
MathML
"
;
}
get
isSvg
(
)
{
return
this
.
node
.
namespaceURI
=
=
=
"
http
:
/
/
www
.
w3
.
org
/
2000
/
svg
"
;
}
nodeNameOneOf
(
values
)
{
return
values
.
includes
(
this
.
nodeName
)
;
}
isFlexItem
(
node
)
{
return
!
!
node
.
parentFlexElement
;
}
isFlexContainer
(
node
)
{
return
!
!
node
.
getAsFlexContainer
(
)
;
}
isGridContainer
(
node
)
{
return
!
!
node
.
getGridFragments
(
)
.
length
>
0
;
}
isGridItem
(
node
)
{
return
!
!
this
.
getParentGridElement
(
this
.
node
)
;
}
getParentGridElement
(
node
)
{
if
(
node
.
flattenedTreeParentNode
=
=
=
node
.
ownerDocument
)
{
return
null
;
}
if
(
node
.
nodeType
=
=
=
node
.
ELEMENT_NODE
)
{
const
display
=
this
.
style
?
this
.
style
.
display
:
null
;
if
(
!
display
|
|
display
=
=
=
"
none
"
|
|
display
=
=
=
"
contents
"
)
{
return
null
;
}
const
position
=
this
.
style
?
this
.
style
.
position
:
null
;
const
cssFloat
=
this
.
style
?
this
.
style
.
cssFloat
:
null
;
if
(
position
=
=
=
"
absolute
"
|
|
position
=
=
=
"
fixed
"
|
|
cssFloat
!
=
=
"
none
"
)
{
return
null
;
}
}
else
if
(
node
.
nodeType
!
=
=
node
.
TEXT_NODE
)
{
return
null
;
}
for
(
let
p
=
node
.
flattenedTreeParentNode
;
p
;
p
=
p
.
flattenedTreeParentNode
)
{
const
style
=
node
.
ownerGlobal
.
getComputedStyle
(
p
)
;
const
display
=
style
.
display
;
if
(
display
.
includes
(
"
grid
"
)
&
&
!
!
p
.
getGridFragments
(
)
.
length
>
0
)
{
return
p
;
}
if
(
display
!
=
=
"
contents
"
)
{
return
null
;
}
}
return
null
;
}
}
exports
.
inactivePropertyHelper
=
new
InactivePropertyHelper
(
)
;
