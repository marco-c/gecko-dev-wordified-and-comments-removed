"
use
strict
"
;
const
getDistance
=
(
x1
y1
x2
y2
)
=
>
{
return
Math
.
round
(
Math
.
hypot
(
x2
-
x1
y2
-
y1
)
)
;
}
;
const
clickedOnEllipseEdge
=
(
x
y
cx
cy
rx
ry
clickWidthX
clickWidthY
)
=
>
{
const
inner
=
(
(
x
-
cx
)
*
*
2
)
/
(
rx
-
clickWidthX
)
*
*
2
+
(
(
y
-
cy
)
*
*
2
)
/
(
ry
-
clickWidthY
)
*
*
2
;
const
outer
=
(
(
x
-
cx
)
*
*
2
)
/
(
rx
+
clickWidthX
)
*
*
2
+
(
(
y
-
cy
)
*
*
2
)
/
(
ry
+
clickWidthY
)
*
*
2
;
return
inner
>
=
1
&
&
outer
<
=
1
;
}
;
const
distanceToLine
=
(
x1
y1
x2
y2
x3
y3
)
=
>
{
const
num
=
Math
.
abs
(
(
y2
-
y1
)
*
x3
-
(
x2
-
x1
)
*
y3
+
x2
*
y1
-
y2
*
x1
)
;
const
denom
=
getDistance
(
x1
y1
x2
y2
)
;
return
num
/
denom
;
}
;
const
projection
=
(
ax
ay
bx
by
cx
cy
)
=
>
{
const
ab
=
[
bx
-
ax
by
-
ay
]
;
const
ac
=
[
cx
-
ax
cy
-
ay
]
;
const
scalar
=
dotProduct
(
ab
ac
)
/
dotProduct
(
ab
ab
)
;
return
[
ax
+
scalar
*
ab
[
0
]
ay
+
scalar
*
ab
[
1
]
]
;
}
;
const
dotProduct
=
(
a
b
)
=
>
{
return
a
.
reduce
(
(
prev
curr
i
)
=
>
{
return
prev
+
curr
*
b
[
i
]
;
}
0
)
;
}
;
const
clickedOnPoint
=
(
x
y
pointX
pointY
radiusX
radiusY
)
=
>
{
return
x
>
=
pointX
-
radiusX
&
&
x
<
=
pointX
+
radiusX
&
&
y
>
=
pointY
-
radiusY
&
&
y
<
=
pointY
+
radiusY
;
}
;
const
roundTo
=
(
value
exp
)
=
>
{
if
(
typeof
exp
=
=
=
"
undefined
"
|
|
+
exp
=
=
=
0
)
{
return
Math
.
round
(
value
)
;
}
value
=
+
value
;
exp
=
+
exp
;
if
(
isNaN
(
value
)
|
|
!
(
typeof
exp
=
=
=
"
number
"
&
&
exp
%
1
=
=
=
0
)
)
{
return
NaN
;
}
value
=
value
.
toString
(
)
.
split
(
"
e
"
)
;
value
=
Math
.
round
(
+
(
value
[
0
]
+
"
e
"
+
(
value
[
1
]
?
(
+
value
[
1
]
-
exp
)
:
-
exp
)
)
)
;
value
=
value
.
toString
(
)
.
split
(
"
e
"
)
;
return
+
(
value
[
0
]
+
"
e
"
+
(
value
[
1
]
?
(
+
value
[
1
]
+
exp
)
:
exp
)
)
;
}
;
exports
.
getDistance
=
getDistance
;
exports
.
clickedOnEllipseEdge
=
clickedOnEllipseEdge
;
exports
.
distanceToLine
=
distanceToLine
;
exports
.
projection
=
projection
;
exports
.
clickedOnPoint
=
clickedOnPoint
;
exports
.
roundTo
=
roundTo
;
