"
use
strict
"
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
const
{
getSourcemapBaseURL
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
source
-
map
-
utils
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
[
"
addPseudoClassLock
"
"
removePseudoClassLock
"
]
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
loadSheet
"
"
resource
:
/
/
devtools
/
shared
/
layout
/
utils
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
[
"
getStyleSheetOwnerNode
"
"
getStyleSheetText
"
]
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
stylesheet
-
utils
.
js
"
true
)
;
const
TRANSITION_PSEUDO_CLASS
=
"
:
-
moz
-
styleeditor
-
transitioning
"
;
const
TRANSITION_DURATION_MS
=
500
;
const
TRANSITION_BUFFER_MS
=
1000
;
const
TRANSITION_RULE_SELECTOR
=
:
root
{
TRANSITION_PSEUDO_CLASS
}
:
root
{
TRANSITION_PSEUDO_CLASS
}
*
:
not
(
:
-
moz
-
native
-
anonymous
)
;
const
TRANSITION_SHEET
=
"
data
:
text
/
css
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
{
TRANSITION_RULE_SELECTOR
}
{
transition
-
duration
:
{
TRANSITION_DURATION_MS
}
ms
!
important
;
transition
-
delay
:
0ms
!
important
;
transition
-
timing
-
function
:
ease
-
out
!
important
;
transition
-
property
:
all
!
important
;
}
)
;
const
UPDATE_PRESERVING_RULES
=
0
;
const
UPDATE_GENERAL
=
1
;
const
modifiedStyleSheets
=
new
WeakMap
(
)
;
class
StyleSheetsManager
extends
EventEmitter
{
#
mqlList
=
[
]
;
#
styleSheetCount
=
0
;
#
styleSheetMap
=
new
Map
(
)
;
#
styleSheetCreationData
;
#
targetActor
;
#
transitionSheetLoaded
;
#
transitionTimeout
;
constructor
(
targetActor
)
{
super
(
)
;
this
.
#
targetActor
=
targetActor
;
}
async
startWatching
(
)
{
const
promises
=
[
]
;
for
(
const
window
of
this
.
#
targetActor
.
windows
)
{
promises
.
push
(
this
.
#
getStyleSheetsForWindow
(
window
)
)
;
}
this
.
#
targetActor
.
chromeEventHandler
.
addEventListener
(
"
StyleSheetApplicableStateChanged
"
this
.
#
onApplicableStateChanged
true
)
;
this
.
#
targetActor
.
chromeEventHandler
.
addEventListener
(
"
StyleSheetRemoved
"
this
.
#
onStylesheetRemoved
true
)
;
this
.
#
watchStyleSheetChangeEvents
(
)
;
this
.
#
targetActor
.
on
(
"
window
-
ready
"
this
.
#
onTargetActorWindowReady
)
;
let
styleSheets
=
await
Promise
.
all
(
promises
)
;
styleSheets
=
styleSheets
.
flat
(
)
;
for
(
const
styleSheet
of
styleSheets
)
{
const
resourceId
=
this
.
#
findStyleSheetResourceId
(
styleSheet
)
;
if
(
resourceId
)
{
this
.
emitAsync
(
"
applicable
-
stylesheet
-
added
"
{
resourceId
styleSheet
}
)
;
}
else
{
this
.
#
registerStyleSheet
(
styleSheet
)
;
}
}
}
#
watchStyleSheetChangeEvents
(
)
{
for
(
const
window
of
this
.
#
targetActor
.
windows
)
{
this
.
#
watchStyleSheetChangeEventsForWindow
(
window
)
;
}
}
#
onTargetActorWindowReady
=
(
{
window
}
)
=
>
{
this
.
#
watchStyleSheetChangeEventsForWindow
(
window
)
;
}
;
#
watchStyleSheetChangeEventsForWindow
(
window
)
{
window
.
document
.
styleSheetChangeEventsEnabled
=
true
;
}
#
unwatchStyleSheetChangeEvents
(
)
{
for
(
const
window
of
this
.
#
targetActor
.
windows
)
{
window
.
document
.
styleSheetChangeEventsEnabled
=
false
;
}
}
async
addStyleSheet
(
document
text
fileName
)
{
const
parent
=
document
.
documentElement
;
const
style
=
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
style
"
)
;
style
.
setAttribute
(
"
type
"
"
text
/
css
"
)
;
style
.
setDevtoolsAsTriggeringPrincipal
(
)
;
if
(
text
)
{
style
.
appendChild
(
document
.
createTextNode
(
text
)
)
;
}
parent
.
appendChild
(
style
)
;
let
resolve
=
null
;
const
promise
=
new
Promise
(
r
=
>
{
resolve
=
r
;
}
)
;
if
(
!
this
.
#
styleSheetCreationData
)
{
this
.
#
styleSheetCreationData
=
new
WeakMap
(
)
;
}
this
.
#
styleSheetCreationData
.
set
(
style
.
sheet
{
isCreatedByDevTools
:
true
fileName
resolve
}
)
;
await
promise
;
return
style
.
sheet
;
}
getStyleSheetResourceId
(
styleSheet
)
{
const
existingResourceId
=
this
.
#
findStyleSheetResourceId
(
styleSheet
)
;
if
(
existingResourceId
)
{
return
existingResourceId
;
}
return
this
.
#
registerStyleSheet
(
styleSheet
)
;
}
#
findStyleSheetResourceId
(
styleSheet
)
{
for
(
const
[
resourceId
existingStyleSheet
]
of
this
.
#
styleSheetMap
.
entries
(
)
)
{
if
(
styleSheet
=
=
=
existingStyleSheet
)
{
return
resourceId
;
}
}
return
null
;
}
getOwnerNode
(
resourceId
)
{
const
styleSheet
=
this
.
#
styleSheetMap
.
get
(
resourceId
)
;
return
styleSheet
.
ownerNode
;
}
getStyleSheetIndex
(
resourceId
)
{
const
styleSheet
=
this
.
#
styleSheetMap
.
get
(
resourceId
)
;
const
styleSheets
=
InspectorUtils
.
getAllStyleSheets
(
this
.
#
targetActor
.
window
.
document
true
)
;
let
i
=
0
;
for
(
const
sheet
of
styleSheets
)
{
if
(
!
this
.
#
shouldListSheet
(
sheet
)
)
{
continue
;
}
if
(
sheet
=
=
styleSheet
)
{
return
i
;
}
i
+
+
;
}
return
-
1
;
}
async
getText
(
resourceId
)
{
const
styleSheet
=
this
.
#
styleSheetMap
.
get
(
resourceId
)
;
const
modifiedText
=
modifiedStyleSheets
.
get
(
styleSheet
)
;
if
(
modifiedText
!
=
=
undefined
)
{
return
modifiedText
;
}
return
getStyleSheetText
(
styleSheet
)
;
}
toggleDisabled
(
resourceId
)
{
const
styleSheet
=
this
.
#
styleSheetMap
.
get
(
resourceId
)
;
styleSheet
.
disabled
=
!
styleSheet
.
disabled
;
this
.
#
notifyPropertyChanged
(
resourceId
"
disabled
"
styleSheet
.
disabled
)
;
return
styleSheet
.
disabled
;
}
async
setStyleSheetText
(
resourceId
text
{
transition
=
false
kind
=
UPDATE_GENERAL
cause
=
"
"
}
=
{
}
)
{
const
styleSheet
=
this
.
#
styleSheetMap
.
get
(
resourceId
)
;
InspectorUtils
.
parseStyleSheet
(
styleSheet
text
)
;
modifiedStyleSheets
.
set
(
styleSheet
text
)
;
for
(
const
mql
of
this
.
#
mqlList
)
{
mql
.
onchange
=
null
;
}
const
{
atRules
ruleCount
}
=
this
.
getStyleSheetRuleCountAndAtRules
(
styleSheet
)
;
if
(
kind
!
=
=
UPDATE_PRESERVING_RULES
)
{
this
.
#
notifyPropertyChanged
(
resourceId
"
ruleCount
"
ruleCount
)
;
}
if
(
transition
)
{
this
.
#
startTransition
(
resourceId
kind
cause
)
;
}
else
{
this
.
emit
(
"
stylesheet
-
updated
"
{
resourceId
updateKind
:
"
style
-
applied
"
updates
:
{
event
:
{
kind
cause
}
}
}
)
;
}
this
.
emit
(
"
stylesheet
-
updated
"
{
resourceId
updateKind
:
"
at
-
rules
-
changed
"
updates
:
{
resourceUpdates
:
{
atRules
}
}
}
)
;
}
#
startTransition
(
resourceId
kind
cause
)
{
const
styleSheet
=
this
.
#
styleSheetMap
.
get
(
resourceId
)
;
const
document
=
styleSheet
.
associatedDocument
;
const
window
=
document
.
ownerGlobal
;
if
(
!
this
.
#
transitionSheetLoaded
)
{
this
.
#
transitionSheetLoaded
=
true
;
loadSheet
(
window
TRANSITION_SHEET
)
;
}
addPseudoClassLock
(
document
.
documentElement
TRANSITION_PSEUDO_CLASS
)
;
window
.
clearTimeout
(
this
.
#
transitionTimeout
)
;
this
.
#
transitionTimeout
=
window
.
setTimeout
(
this
.
#
onTransitionEnd
.
bind
(
this
resourceId
kind
cause
)
TRANSITION_DURATION_MS
+
TRANSITION_BUFFER_MS
)
;
}
#
onTransitionEnd
(
resourceId
kind
cause
)
{
const
styleSheet
=
this
.
#
styleSheetMap
.
get
(
resourceId
)
;
const
document
=
styleSheet
.
associatedDocument
;
this
.
#
transitionTimeout
=
null
;
removePseudoClassLock
(
document
.
documentElement
TRANSITION_PSEUDO_CLASS
)
;
this
.
emit
(
"
stylesheet
-
updated
"
{
resourceId
updateKind
:
"
style
-
applied
"
updates
:
{
event
:
{
kind
cause
}
}
}
)
;
}
#
getCSSRules
(
styleSheet
)
{
try
{
return
styleSheet
.
cssRules
;
}
catch
(
e
)
{
}
if
(
!
styleSheet
.
ownerNode
)
{
return
Promise
.
resolve
(
[
]
)
;
}
return
new
Promise
(
resolve
=
>
{
styleSheet
.
ownerNode
.
addEventListener
(
"
load
"
(
)
=
>
resolve
(
styleSheet
.
cssRules
)
{
once
:
true
}
)
;
}
)
;
}
async
#
getImportedStyleSheets
(
document
styleSheet
)
{
const
importedStyleSheets
=
[
]
;
for
(
const
rule
of
await
this
.
#
getCSSRules
(
styleSheet
)
)
{
const
ruleClassName
=
ChromeUtils
.
getClassName
(
rule
)
;
if
(
ruleClassName
=
=
"
CSSImportRule
"
)
{
if
(
!
rule
.
styleSheet
|
|
this
.
#
haveAncestorWithSameURL
(
rule
.
styleSheet
)
|
|
!
this
.
#
shouldListSheet
(
rule
.
styleSheet
)
)
{
continue
;
}
importedStyleSheets
.
push
(
rule
.
styleSheet
)
;
const
children
=
await
this
.
#
getImportedStyleSheets
(
document
rule
.
styleSheet
)
;
importedStyleSheets
.
push
(
.
.
.
children
)
;
}
else
if
(
ruleClassName
!
=
"
CSSCharsetRule
"
)
{
break
;
}
}
return
importedStyleSheets
;
}
getStyleSheetRuleCountAndAtRules
(
styleSheet
)
{
const
resourceId
=
this
.
#
findStyleSheetResourceId
(
styleSheet
)
;
if
(
!
resourceId
)
{
return
[
]
;
}
this
.
#
mqlList
=
[
]
;
let
win
;
const
getStyleSheetAssociatedWindow
=
(
)
=
>
{
if
(
!
win
)
{
win
=
styleSheet
.
associatedDocument
?
.
ownerGlobal
;
}
return
win
;
}
;
const
styleSheetRules
=
InspectorUtils
.
getAllStyleSheetCSSStyleRules
(
styleSheet
)
;
const
ruleCount
=
styleSheetRules
.
length
;
const
atRules
=
[
]
;
for
(
const
rule
of
styleSheetRules
)
{
const
className
=
ChromeUtils
.
getClassName
(
rule
)
;
if
(
className
=
=
=
"
CSSMediaRule
"
)
{
let
matches
=
false
;
try
{
const
mql
=
getStyleSheetAssociatedWindow
(
)
.
matchMedia
(
rule
.
media
.
mediaText
)
;
matches
=
mql
.
matches
;
mql
.
onchange
=
this
.
#
onMatchesChange
.
bind
(
this
resourceId
atRules
.
length
)
;
this
.
#
mqlList
.
push
(
mql
)
;
}
catch
(
e
)
{
}
atRules
.
push
(
{
type
:
"
media
"
conditionText
:
rule
.
conditionText
matches
line
:
InspectorUtils
.
getRelativeRuleLine
(
rule
)
column
:
InspectorUtils
.
getRuleColumn
(
rule
)
}
)
;
}
else
if
(
className
=
=
=
"
CSSContainerRule
"
)
{
atRules
.
push
(
{
type
:
"
container
"
conditionText
:
rule
.
conditionText
line
:
InspectorUtils
.
getRelativeRuleLine
(
rule
)
column
:
InspectorUtils
.
getRuleColumn
(
rule
)
}
)
;
}
else
if
(
className
=
=
=
"
CSSSupportsRule
"
)
{
atRules
.
push
(
{
type
:
"
support
"
conditionText
:
rule
.
conditionText
line
:
InspectorUtils
.
getRelativeRuleLine
(
rule
)
column
:
InspectorUtils
.
getRuleColumn
(
rule
)
}
)
;
}
else
if
(
className
=
=
=
"
CSSLayerBlockRule
"
)
{
atRules
.
push
(
{
type
:
"
layer
"
layerName
:
rule
.
name
line
:
InspectorUtils
.
getRelativeRuleLine
(
rule
)
column
:
InspectorUtils
.
getRuleColumn
(
rule
)
}
)
;
}
}
return
{
ruleCount
atRules
}
;
}
#
onMatchesChange
(
resourceId
index
mql
)
{
this
.
emit
(
"
stylesheet
-
updated
"
{
resourceId
updateKind
:
"
matches
-
change
"
updates
:
{
nestedResourceUpdates
:
[
{
path
:
[
"
atRules
"
index
"
matches
"
]
value
:
mql
.
matches
}
]
}
}
)
;
}
getNodeHref
(
styleSheet
)
{
const
{
ownerNode
}
=
styleSheet
;
if
(
!
ownerNode
)
{
return
null
;
}
if
(
ownerNode
.
nodeType
=
=
ownerNode
.
DOCUMENT_NODE
)
{
return
ownerNode
.
location
.
href
;
}
if
(
ownerNode
.
ownerDocument
?
.
location
)
{
return
ownerNode
.
ownerDocument
.
location
.
href
;
}
return
null
;
}
getSourcemapBaseURL
(
styleSheet
)
{
const
ownerNode
=
getStyleSheetOwnerNode
(
styleSheet
)
;
const
ownerDocument
=
ownerNode
?
ownerNode
.
ownerDocument
:
this
.
#
targetActor
.
window
;
return
getSourcemapBaseURL
(
styleSheet
.
href
|
|
this
.
getNodeHref
(
styleSheet
)
ownerDocument
)
;
}
async
#
getStyleSheetsForWindow
(
window
)
{
const
{
document
}
=
window
;
const
documentOnly
=
!
document
.
nodePrincipal
.
isSystemPrincipal
;
const
styleSheets
=
[
]
;
for
(
const
styleSheet
of
InspectorUtils
.
getAllStyleSheets
(
document
documentOnly
)
)
{
if
(
!
this
.
#
shouldListSheet
(
styleSheet
)
)
{
continue
;
}
styleSheets
.
push
(
styleSheet
)
;
const
importedStyleSheets
=
await
this
.
#
getImportedStyleSheets
(
document
styleSheet
)
;
styleSheets
.
push
(
.
.
.
importedStyleSheets
)
;
}
return
styleSheets
;
}
#
haveAncestorWithSameURL
(
styleSheet
)
{
const
href
=
styleSheet
.
href
;
while
(
styleSheet
.
parentStyleSheet
)
{
if
(
styleSheet
.
parentStyleSheet
.
href
=
=
href
)
{
return
true
;
}
styleSheet
=
styleSheet
.
parentStyleSheet
;
}
return
false
;
}
#
notifyPropertyChanged
(
resourceId
property
value
)
{
this
.
emit
(
"
stylesheet
-
updated
"
{
resourceId
updateKind
:
"
property
-
change
"
updates
:
{
resourceUpdates
:
{
[
property
]
:
value
}
}
}
)
;
}
#
onApplicableStateChanged
=
(
{
applicable
stylesheet
:
styleSheet
}
)
=
>
{
if
(
applicable
&
&
styleSheet
.
associatedDocument
&
&
(
!
this
.
#
targetActor
.
ignoreSubFrames
|
|
styleSheet
.
associatedDocument
.
ownerGlobal
=
=
=
this
.
#
targetActor
.
window
)
&
&
this
.
#
shouldListSheet
(
styleSheet
)
&
&
!
this
.
#
haveAncestorWithSameURL
(
styleSheet
)
)
{
this
.
#
registerStyleSheet
(
styleSheet
)
;
}
}
;
#
onStylesheetRemoved
=
event
=
>
{
this
.
#
unregisterStyleSheet
(
event
.
stylesheet
)
;
}
;
#
registerStyleSheet
(
styleSheet
)
{
const
existingResourceId
=
this
.
#
findStyleSheetResourceId
(
styleSheet
)
;
if
(
existingResourceId
)
{
return
existingResourceId
;
}
const
resourceId
=
{
this
.
#
targetActor
.
actorID
}
:
stylesheet
:
{
this
.
#
styleSheetCount
+
+
}
;
this
.
#
styleSheetMap
.
set
(
resourceId
styleSheet
)
;
const
creationData
=
this
.
#
styleSheetCreationData
?
.
get
(
styleSheet
)
;
this
.
#
styleSheetCreationData
?
.
delete
(
styleSheet
)
;
const
onEventHandlerDone
=
this
.
emitAsync
(
"
applicable
-
stylesheet
-
added
"
{
resourceId
styleSheet
creationData
}
)
;
if
(
creationData
)
{
onEventHandlerDone
.
then
(
(
)
=
>
creationData
?
.
resolve
(
)
)
;
}
return
resourceId
;
}
#
unregisterStyleSheet
(
styleSheet
)
{
const
existingResourceId
=
this
.
#
findStyleSheetResourceId
(
styleSheet
)
;
if
(
!
existingResourceId
)
{
return
;
}
this
.
#
styleSheetMap
.
delete
(
existingResourceId
)
;
this
.
#
styleSheetCreationData
?
.
delete
(
styleSheet
)
;
this
.
emit
(
"
applicable
-
stylesheet
-
removed
"
{
resourceId
:
existingResourceId
}
)
;
}
#
shouldListSheet
(
styleSheet
)
{
const
href
=
styleSheet
.
href
?
.
toLowerCase
(
)
;
if
(
href
=
=
=
"
resource
:
/
/
content
-
accessible
/
accessiblecaret
.
css
"
|
|
(
href
=
=
=
"
resource
:
/
/
devtools
-
highlighter
-
styles
/
highlighters
.
css
"
&
&
this
.
#
targetActor
.
sessionContext
.
type
!
=
=
"
all
"
)
)
{
return
false
;
}
return
true
;
}
destroy
(
)
{
this
.
#
targetActor
.
off
(
"
window
-
ready
"
this
.
#
watchStyleSheetChangeEvents
)
;
try
{
this
.
#
targetActor
.
chromeEventHandler
.
removeEventListener
(
"
StyleSheetApplicableStateChanged
"
this
.
#
onApplicableStateChanged
true
)
;
this
.
#
targetActor
.
chromeEventHandler
.
removeEventListener
(
"
StyleSheetRemoved
"
this
.
#
onStylesheetRemoved
true
)
;
this
.
#
unwatchStyleSheetChangeEvents
(
)
;
}
catch
(
e
)
{
console
.
error
(
"
Error
when
destroying
StyleSheet
manager
for
"
this
.
#
targetActor
"
:
"
e
)
;
}
this
.
#
styleSheetMap
.
clear
(
)
;
this
.
#
styleSheetMap
=
null
;
this
.
#
targetActor
=
null
;
this
.
#
styleSheetCreationData
=
null
;
this
.
#
mqlList
=
null
;
}
}
module
.
exports
=
{
StyleSheetsManager
UPDATE_GENERAL
UPDATE_PRESERVING_RULES
}
;
