"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
fetch
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
InspectorUtils
=
require
(
"
InspectorUtils
"
)
;
const
{
getSourcemapBaseURL
}
=
require
(
"
devtools
/
server
/
actors
/
utils
/
source
-
map
-
utils
"
)
;
const
{
TYPES
}
=
require
(
"
devtools
/
server
/
actors
/
resources
/
index
"
)
;
loader
.
lazyRequireGetter
(
this
[
"
addPseudoClassLock
"
"
removePseudoClassLock
"
]
"
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
loadSheet
"
"
devtools
/
shared
/
layout
/
utils
"
true
)
;
loader
.
lazyRequireGetter
(
this
[
"
getSheetOwnerNode
"
"
UPDATE_GENERAL
"
"
UPDATE_PRESERVING_RULES
"
]
"
devtools
/
server
/
actors
/
style
-
sheet
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
TargetActorRegistry
"
"
devtools
/
server
/
actors
/
targets
/
target
-
actor
-
registry
.
jsm
"
true
)
;
const
SHARED_DATA_KEY_NAME
=
"
DevTools
:
watchedPerWatcher
"
;
const
TRANSITION_PSEUDO_CLASS
=
"
:
-
moz
-
styleeditor
-
transitioning
"
;
const
TRANSITION_DURATION_MS
=
500
;
const
TRANSITION_BUFFER_MS
=
1000
;
const
TRANSITION_RULE_SELECTOR
=
:
root
{
TRANSITION_PSEUDO_CLASS
}
:
root
{
TRANSITION_PSEUDO_CLASS
}
*
;
const
TRANSITION_SHEET
=
"
data
:
text
/
css
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
{
TRANSITION_RULE_SELECTOR
}
{
transition
-
duration
:
{
TRANSITION_DURATION_MS
}
ms
!
important
;
transition
-
delay
:
0ms
!
important
;
transition
-
timing
-
function
:
ease
-
out
!
important
;
transition
-
property
:
all
!
important
;
}
)
;
const
modifiedStyleSheets
=
new
WeakMap
(
)
;
class
StyleSheetsManager
extends
EventEmitter
{
_styleSheetCount
=
0
;
_styleSheetMap
=
new
Map
(
)
;
_mqlList
=
[
]
;
constructor
(
targetActor
)
{
super
(
)
;
this
.
_targetActor
=
targetActor
;
this
.
_onApplicableStateChanged
=
this
.
_onApplicableStateChanged
.
bind
(
this
)
;
this
.
_onTargetActorWindowReady
=
this
.
_onTargetActorWindowReady
.
bind
(
this
)
;
}
async
startWatching
(
)
{
const
promises
=
[
]
;
for
(
const
window
of
this
.
_targetActor
.
windows
)
{
promises
.
push
(
this
.
_getStyleSheetsForWindow
(
window
)
)
;
}
this
.
_targetActor
.
chromeEventHandler
.
addEventListener
(
"
StyleSheetApplicableStateChanged
"
this
.
_onApplicableStateChanged
true
)
;
this
.
_watchStyleSheetChangeEvents
(
)
;
this
.
_targetActor
.
on
(
"
window
-
ready
"
this
.
_onTargetActorWindowReady
)
;
let
styleSheets
=
await
Promise
.
all
(
promises
)
;
styleSheets
=
styleSheets
.
flat
(
)
;
for
(
const
styleSheet
of
styleSheets
)
{
this
.
_registerStyleSheet
(
styleSheet
)
;
}
}
_watchStyleSheetChangeEvents
(
)
{
for
(
const
window
of
this
.
_targetActor
.
windows
)
{
this
.
_watchStyleSheetChangeEventsForWindow
(
window
)
;
}
}
_onTargetActorWindowReady
(
{
window
}
)
{
this
.
_watchStyleSheetChangeEventsForWindow
(
window
)
;
}
_watchStyleSheetChangeEventsForWindow
(
window
)
{
window
.
document
.
styleSheetChangeEventsEnabled
=
true
;
}
_unwatchStyleSheetChangeEvents
(
)
{
for
(
const
window
of
this
.
_targetActor
.
windows
)
{
window
.
document
.
styleSheetChangeEventsEnabled
=
false
;
}
}
async
addStyleSheet
(
document
text
fileName
)
{
const
parent
=
document
.
documentElement
;
const
style
=
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
style
"
)
;
style
.
setAttribute
(
"
type
"
"
text
/
css
"
)
;
if
(
text
)
{
style
.
appendChild
(
document
.
createTextNode
(
text
)
)
;
}
parent
.
appendChild
(
style
)
;
let
resolve
=
null
;
const
promise
=
new
Promise
(
r
=
>
{
resolve
=
r
;
}
)
;
if
(
!
this
.
_styleSheetCreationData
)
{
this
.
_styleSheetCreationData
=
new
WeakMap
(
)
;
}
this
.
_styleSheetCreationData
.
set
(
style
.
sheet
{
isCreatedByDevTools
:
true
fileName
resolve
}
)
;
await
promise
;
return
style
.
sheet
;
}
getStyleSheetResourceId
(
styleSheet
)
{
const
existingResourceId
=
this
.
_findStyleSheetResourceId
(
styleSheet
)
;
if
(
existingResourceId
)
{
return
existingResourceId
;
}
return
this
.
_registerStyleSheet
(
styleSheet
)
;
}
_findStyleSheetResourceId
(
styleSheet
)
{
for
(
const
[
resourceId
existingStyleSheet
]
of
this
.
_styleSheetMap
.
entries
(
)
)
{
if
(
styleSheet
=
=
=
existingStyleSheet
)
{
return
resourceId
;
}
}
return
null
;
}
getOwnerNode
(
resourceId
)
{
const
styleSheet
=
this
.
_styleSheetMap
.
get
(
resourceId
)
;
return
styleSheet
.
ownerNode
;
}
getStyleSheetIndex
(
resourceId
)
{
const
styleSheet
=
this
.
_styleSheetMap
.
get
(
resourceId
)
;
return
this
.
_getStyleSheetIndex
(
styleSheet
)
;
}
async
getText
(
resourceId
)
{
const
styleSheet
=
this
.
_styleSheetMap
.
get
(
resourceId
)
;
const
modifiedText
=
modifiedStyleSheets
.
get
(
styleSheet
)
;
if
(
modifiedText
!
=
=
undefined
)
{
return
modifiedText
;
}
if
(
!
styleSheet
.
href
)
{
return
styleSheet
.
ownerNode
.
textContent
;
}
return
this
.
_fetchStyleSheet
(
styleSheet
)
;
}
toggleDisabled
(
resourceId
)
{
const
styleSheet
=
this
.
_styleSheetMap
.
get
(
resourceId
)
;
styleSheet
.
disabled
=
!
styleSheet
.
disabled
;
this
.
_notifyPropertyChanged
(
resourceId
"
disabled
"
styleSheet
.
disabled
)
;
return
styleSheet
.
disabled
;
}
async
update
(
resourceId
text
transition
kind
=
UPDATE_GENERAL
cause
=
"
"
)
{
const
styleSheet
=
this
.
_styleSheetMap
.
get
(
resourceId
)
;
InspectorUtils
.
parseStyleSheet
(
styleSheet
text
)
;
modifiedStyleSheets
.
set
(
styleSheet
text
)
;
if
(
kind
!
=
=
UPDATE_PRESERVING_RULES
)
{
this
.
_notifyPropertyChanged
(
resourceId
"
ruleCount
"
styleSheet
.
cssRules
.
length
)
;
}
if
(
transition
)
{
this
.
_startTransition
(
resourceId
kind
cause
)
;
}
else
{
this
.
emit
(
"
stylesheet
-
updated
"
{
resourceId
updateKind
:
"
style
-
applied
"
updates
:
{
event
:
{
kind
cause
}
}
}
)
;
}
for
(
const
mql
of
this
.
_mqlList
)
{
mql
.
onchange
=
null
;
}
const
mediaRules
=
await
this
.
_getMediaRules
(
styleSheet
)
;
this
.
emit
(
"
stylesheet
-
updated
"
{
resourceId
updateKind
:
"
media
-
rules
-
changed
"
updates
:
{
resourceUpdates
:
{
mediaRules
}
}
}
)
;
}
_startTransition
(
resourceId
kind
cause
)
{
const
styleSheet
=
this
.
_styleSheetMap
.
get
(
resourceId
)
;
const
document
=
styleSheet
.
ownerNode
.
ownerDocument
;
const
window
=
styleSheet
.
ownerNode
.
ownerGlobal
;
if
(
!
this
.
_transitionSheetLoaded
)
{
this
.
_transitionSheetLoaded
=
true
;
loadSheet
(
window
TRANSITION_SHEET
)
;
}
addPseudoClassLock
(
document
.
documentElement
TRANSITION_PSEUDO_CLASS
)
;
window
.
clearTimeout
(
this
.
_transitionTimeout
)
;
this
.
_transitionTimeout
=
window
.
setTimeout
(
this
.
_onTransitionEnd
.
bind
(
this
resourceId
kind
cause
)
TRANSITION_DURATION_MS
+
TRANSITION_BUFFER_MS
)
;
}
_onTransitionEnd
(
resourceId
kind
cause
)
{
const
styleSheet
=
this
.
_styleSheetMap
.
get
(
resourceId
)
;
const
document
=
styleSheet
.
ownerNode
.
ownerDocument
;
this
.
_transitionTimeout
=
null
;
removePseudoClassLock
(
document
.
documentElement
TRANSITION_PSEUDO_CLASS
)
;
this
.
emit
(
"
stylesheet
-
updated
"
{
resourceId
updateKind
:
"
style
-
applied
"
updates
:
{
event
:
{
kind
cause
}
}
}
)
;
}
async
_fetchStyleSheet
(
styleSheet
)
{
const
href
=
styleSheet
.
href
;
const
options
=
{
loadFromCache
:
true
policy
:
Ci
.
nsIContentPolicy
.
TYPE_INTERNAL_STYLESHEET
charset
:
this
.
_getCSSCharset
(
styleSheet
)
}
;
const
excludedProtocolsRe
=
/
^
(
chrome
|
file
|
resource
|
moz
-
extension
)
:
\
/
\
/
/
;
if
(
!
excludedProtocolsRe
.
test
(
href
)
)
{
const
ownerNode
=
getSheetOwnerNode
(
styleSheet
)
;
if
(
ownerNode
)
{
options
.
window
=
ownerNode
.
ownerDocument
.
defaultView
;
options
.
principal
=
ownerNode
.
ownerDocument
.
nodePrincipal
;
}
}
let
result
;
try
{
result
=
await
fetch
(
href
options
)
;
}
catch
(
e
)
{
console
.
error
(
stylesheets
:
fetch
failed
for
{
href
}
+
using
system
principal
instead
.
)
;
options
.
window
=
undefined
;
options
.
principal
=
undefined
;
result
=
await
fetch
(
href
options
)
;
}
return
result
.
content
;
}
_getCSSCharset
(
styleSheet
)
{
if
(
styleSheet
)
{
if
(
styleSheet
.
ownerNode
?
.
getAttribute
)
{
const
linkCharset
=
styleSheet
.
ownerNode
.
getAttribute
(
"
charset
"
)
;
if
(
linkCharset
!
=
null
)
{
return
linkCharset
;
}
}
if
(
styleSheet
.
ownerNode
?
.
ownerDocument
.
characterSet
)
{
return
styleSheet
.
ownerNode
.
ownerDocument
.
characterSet
;
}
}
return
"
UTF
-
8
"
;
}
_getCSSRules
(
styleSheet
)
{
try
{
return
styleSheet
.
cssRules
;
}
catch
(
e
)
{
}
if
(
!
styleSheet
.
ownerNode
)
{
return
Promise
.
resolve
(
[
]
)
;
}
return
new
Promise
(
resolve
=
>
{
styleSheet
.
ownerNode
.
addEventListener
(
"
load
"
(
)
=
>
resolve
(
styleSheet
.
cssRules
)
{
once
:
true
}
)
;
}
)
;
}
async
_getImportedStyleSheets
(
document
styleSheet
)
{
const
importedStyleSheets
=
[
]
;
for
(
const
rule
of
await
this
.
_getCSSRules
(
styleSheet
)
)
{
if
(
rule
.
type
=
=
CSSRule
.
IMPORT_RULE
)
{
if
(
!
rule
.
styleSheet
|
|
this
.
_haveAncestorWithSameURL
(
rule
.
styleSheet
)
|
|
!
this
.
_shouldListSheet
(
rule
.
styleSheet
)
)
{
continue
;
}
importedStyleSheets
.
push
(
rule
.
styleSheet
)
;
const
children
=
await
this
.
_getImportedStyleSheets
(
document
rule
.
styleSheet
)
;
importedStyleSheets
.
push
(
.
.
.
children
)
;
}
else
if
(
rule
.
type
!
=
CSSRule
.
CHARSET_RULE
)
{
break
;
}
}
return
importedStyleSheets
;
}
async
_getMediaRules
(
styleSheet
)
{
const
resourceId
=
this
.
_findStyleSheetResourceId
(
styleSheet
)
;
if
(
!
resourceId
)
{
return
[
]
;
}
this
.
_mqlList
=
[
]
;
const
styleSheetRules
=
await
this
.
_getCSSRules
(
styleSheet
)
;
const
mediaRules
=
Array
.
from
(
styleSheetRules
)
.
filter
(
rule
=
>
rule
.
type
=
=
=
CSSRule
.
MEDIA_RULE
)
;
return
mediaRules
.
map
(
(
rule
index
)
=
>
{
let
matches
=
false
;
try
{
const
window
=
styleSheet
.
ownerNode
.
ownerGlobal
;
const
mql
=
window
.
matchMedia
(
rule
.
media
.
mediaText
)
;
matches
=
mql
.
matches
;
mql
.
onchange
=
this
.
_onMatchesChange
.
bind
(
this
resourceId
index
)
;
this
.
_mqlList
.
push
(
mql
)
;
}
catch
(
e
)
{
}
return
{
mediaText
:
rule
.
media
.
mediaText
conditionText
:
rule
.
conditionText
matches
line
:
InspectorUtils
.
getRuleLine
(
rule
)
column
:
InspectorUtils
.
getRuleColumn
(
rule
)
}
;
}
)
;
}
_onMatchesChange
(
resourceId
index
mql
)
{
this
.
emit
(
"
stylesheet
-
updated
"
{
resourceId
updateKind
:
"
matches
-
change
"
updates
:
{
nestedResourceUpdates
:
[
{
path
:
[
"
mediaRules
"
index
"
matches
"
]
value
:
mql
.
matches
}
]
}
}
)
;
}
_getNodeHref
(
styleSheet
)
{
const
{
ownerNode
}
=
styleSheet
;
if
(
!
ownerNode
)
{
return
null
;
}
if
(
ownerNode
.
nodeType
=
=
ownerNode
.
DOCUMENT_NODE
)
{
return
ownerNode
.
location
.
href
;
}
else
if
(
ownerNode
.
ownerDocument
?
.
location
)
{
return
ownerNode
.
ownerDocument
.
location
.
href
;
}
return
null
;
}
_getSourcemapBaseURL
(
styleSheet
)
{
const
ownerNode
=
getSheetOwnerNode
(
styleSheet
)
;
const
ownerDocument
=
ownerNode
?
ownerNode
.
ownerDocument
:
this
.
_targetActor
.
window
;
return
getSourcemapBaseURL
(
styleSheet
.
href
|
|
this
.
_getNodeHref
(
styleSheet
)
ownerDocument
)
;
}
_getStyleSheetIndex
(
styleSheet
)
{
const
styleSheets
=
InspectorUtils
.
getAllStyleSheets
(
this
.
_targetActor
.
window
.
document
true
)
;
return
styleSheets
.
indexOf
(
styleSheet
)
;
}
async
_getStyleSheetsForWindow
(
window
)
{
const
{
document
}
=
window
;
const
documentOnly
=
!
document
.
nodePrincipal
.
isSystemPrincipal
;
const
styleSheets
=
[
]
;
for
(
const
styleSheet
of
InspectorUtils
.
getAllStyleSheets
(
document
documentOnly
)
)
{
if
(
!
this
.
_shouldListSheet
(
styleSheet
)
)
{
continue
;
}
styleSheets
.
push
(
styleSheet
)
;
const
importedStyleSheets
=
await
this
.
_getImportedStyleSheets
(
document
styleSheet
)
;
styleSheets
.
push
(
.
.
.
importedStyleSheets
)
;
}
return
styleSheets
;
}
_haveAncestorWithSameURL
(
styleSheet
)
{
const
href
=
styleSheet
.
href
;
while
(
styleSheet
.
parentStyleSheet
)
{
if
(
styleSheet
.
parentStyleSheet
.
href
=
=
href
)
{
return
true
;
}
styleSheet
=
styleSheet
.
parentStyleSheet
;
}
return
false
;
}
_notifyPropertyChanged
(
resourceId
property
value
)
{
this
.
emit
(
"
stylesheet
-
updated
"
{
resourceId
updateKind
:
"
property
-
change
"
updates
:
{
resourceUpdates
:
{
[
property
]
:
value
}
}
}
)
;
}
_onApplicableStateChanged
(
{
applicable
stylesheet
:
styleSheet
}
)
{
if
(
applicable
&
&
styleSheet
.
ownerNode
&
&
this
.
_shouldListSheet
(
styleSheet
)
&
&
!
this
.
_haveAncestorWithSameURL
(
styleSheet
)
)
{
this
.
_registerStyleSheet
(
styleSheet
)
;
}
}
_registerStyleSheet
(
styleSheet
)
{
const
existingResourceId
=
this
.
_findStyleSheetResourceId
(
styleSheet
)
;
if
(
existingResourceId
)
{
return
existingResourceId
;
}
const
resourceId
=
{
this
.
_targetActor
.
actorID
}
:
stylesheet
:
{
this
.
_styleSheetCount
+
+
}
;
this
.
_styleSheetMap
.
set
(
resourceId
styleSheet
)
;
const
creationData
=
this
.
_styleSheetCreationData
?
.
get
(
styleSheet
)
;
this
.
_styleSheetCreationData
?
.
delete
(
styleSheet
)
;
const
onEventHandlerDone
=
this
.
emitAsync
(
"
applicable
-
stylesheet
-
added
"
{
resourceId
styleSheet
creationData
}
)
;
if
(
creationData
)
{
onEventHandlerDone
.
then
(
(
)
=
>
creationData
?
.
resolve
(
)
)
;
}
return
resourceId
;
}
_shouldListSheet
(
styleSheet
)
{
if
(
styleSheet
.
href
?
.
toLowerCase
(
)
=
=
=
"
about
:
preferencestylesheet
"
)
{
return
false
;
}
return
true
;
}
destroy
(
)
{
this
.
_targetActor
.
off
(
"
window
-
ready
"
this
.
_watchStyleSheetChangeEvents
)
;
try
{
this
.
_targetActor
.
chromeEventHandler
.
removeEventListener
(
"
StyleSheetApplicableStateChanged
"
this
.
_onApplicableStateChanged
true
)
;
this
.
_unwatchStyleSheetChangeEvents
(
)
;
}
catch
(
e
)
{
console
.
error
(
"
Error
when
destroying
StyleSheet
manager
for
"
this
.
_targetActor
"
:
"
e
)
;
}
}
}
function
hasStyleSheetWatcherSupportForTarget
(
targetActor
)
{
const
{
sharedData
}
=
Services
.
cpmm
;
const
watchedDataByWatcherActor
=
sharedData
.
get
(
SHARED_DATA_KEY_NAME
)
;
if
(
!
watchedDataByWatcherActor
)
{
return
false
;
}
const
watcherData
=
Array
.
from
(
watchedDataByWatcherActor
.
values
(
)
)
.
find
(
watchedData
=
>
{
const
actors
=
TargetActorRegistry
.
getTargetActors
(
targetActor
.
browserId
watchedData
.
connectionPrefix
)
;
return
actors
.
includes
(
targetActor
)
;
}
)
;
return
watcherData
?
.
watcherTraits
?
.
resources
?
.
[
TYPES
.
STYLESHEET
]
|
|
false
;
}
module
.
exports
=
{
StyleSheetsManager
hasStyleSheetWatcherSupportForTarget
}
;
