"
use
strict
"
;
var
{
Ci
}
=
require
(
"
chrome
"
)
;
var
gRegisteredModules
=
Object
.
create
(
null
)
;
const
ActorRegistry
=
{
globalActorFactories
:
{
}
targetScopedActorFactories
:
{
}
init
(
connections
)
{
this
.
_connections
=
connections
;
}
registerModule
(
id
options
)
{
if
(
id
in
gRegisteredModules
)
{
return
;
}
if
(
!
options
)
{
throw
new
Error
(
"
ActorRegistry
.
registerModule
requires
an
options
argument
"
)
;
}
const
{
prefix
constructor
type
}
=
options
;
if
(
typeof
prefix
!
=
=
"
string
"
)
{
throw
new
Error
(
Lazy
actor
definition
for
'
{
id
}
'
requires
a
string
+
'
prefix
'
option
.
)
;
}
if
(
typeof
constructor
!
=
=
"
string
"
)
{
throw
new
Error
(
Lazy
actor
definition
for
'
{
id
}
'
requires
a
string
+
'
constructor
'
option
.
)
;
}
if
(
!
(
"
global
"
in
type
)
&
&
!
(
"
target
"
in
type
)
)
{
throw
new
Error
(
Lazy
actor
definition
for
'
{
id
}
'
requires
a
dictionary
+
'
type
'
option
whose
attributes
can
be
'
global
'
or
'
target
'
.
)
;
}
const
name
=
prefix
+
"
Actor
"
;
const
mod
=
{
id
prefix
constructorName
:
constructor
type
globalActor
:
type
.
global
targetScopedActor
:
type
.
target
}
;
gRegisteredModules
[
id
]
=
mod
;
if
(
mod
.
targetScopedActor
)
{
this
.
addTargetScopedActor
(
mod
name
)
;
}
if
(
mod
.
globalActor
)
{
this
.
addGlobalActor
(
mod
name
)
;
}
}
unregisterModule
(
id
)
{
const
mod
=
gRegisteredModules
[
id
]
;
if
(
!
mod
)
{
throw
new
Error
(
"
Tried
to
unregister
a
module
that
was
not
previously
registered
.
"
)
;
}
if
(
mod
.
targetScopedActor
)
{
this
.
removeTargetScopedActor
(
mod
)
;
}
if
(
mod
.
globalActor
)
{
this
.
removeGlobalActor
(
mod
)
;
}
delete
gRegisteredModules
[
id
]
;
}
addBrowserActors
(
)
{
this
.
registerModule
(
"
devtools
/
server
/
actors
/
preference
"
{
prefix
:
"
preference
"
constructor
:
"
PreferenceActor
"
type
:
{
global
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
actor
-
registry
"
{
prefix
:
"
actorRegistry
"
constructor
:
"
ActorRegistryActor
"
type
:
{
global
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
addon
/
addons
"
{
prefix
:
"
addons
"
constructor
:
"
AddonsActor
"
type
:
{
global
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
device
"
{
prefix
:
"
device
"
constructor
:
"
DeviceActor
"
type
:
{
global
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
heap
-
snapshot
-
file
"
{
prefix
:
"
heapSnapshotFile
"
constructor
:
"
HeapSnapshotFileActor
"
type
:
{
global
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
perf
"
{
prefix
:
"
perf
"
constructor
:
"
PerfActor
"
type
:
{
global
:
true
}
}
)
;
}
addTargetScopedActors
(
)
{
this
.
registerModule
(
"
devtools
/
server
/
actors
/
webconsole
"
{
prefix
:
"
console
"
constructor
:
"
WebConsoleActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
inspector
/
inspector
"
{
prefix
:
"
inspector
"
constructor
:
"
InspectorActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
stylesheets
"
{
prefix
:
"
styleSheets
"
constructor
:
"
StyleSheetsActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
storage
"
{
prefix
:
"
storage
"
constructor
:
"
StorageActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
memory
"
{
prefix
:
"
memory
"
constructor
:
"
MemoryActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
framerate
"
{
prefix
:
"
framerate
"
constructor
:
"
FramerateActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
reflow
"
{
prefix
:
"
reflow
"
constructor
:
"
ReflowActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
css
-
properties
"
{
prefix
:
"
cssProperties
"
constructor
:
"
CssPropertiesActor
"
type
:
{
target
:
true
}
}
)
;
if
(
"
nsIProfiler
"
in
Ci
)
{
this
.
registerModule
(
"
devtools
/
server
/
actors
/
performance
"
{
prefix
:
"
performance
"
constructor
:
"
PerformanceActor
"
type
:
{
target
:
true
}
}
)
;
}
this
.
registerModule
(
"
devtools
/
server
/
actors
/
animation
"
{
prefix
:
"
animations
"
constructor
:
"
AnimationsActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
promises
"
{
prefix
:
"
promises
"
constructor
:
"
PromisesActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
emulation
"
{
prefix
:
"
emulation
"
constructor
:
"
EmulationActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
addon
/
webextension
-
inspected
-
window
"
{
prefix
:
"
webExtensionInspectedWindow
"
constructor
:
"
WebExtensionInspectedWindowActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
accessibility
/
accessibility
"
{
prefix
:
"
accessibility
"
constructor
:
"
AccessibilityActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
screenshot
"
{
prefix
:
"
screenshot
"
constructor
:
"
ScreenshotActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
changes
"
{
prefix
:
"
changes
"
constructor
:
"
ChangesActor
"
type
:
{
target
:
true
}
}
)
;
this
.
registerModule
(
"
devtools
/
server
/
actors
/
network
-
monitor
/
websocket
-
actor
"
{
prefix
:
"
webSocket
"
constructor
:
"
WebSocketActor
"
type
:
{
target
:
true
}
}
)
;
}
addTargetScopedActor
(
options
name
)
{
if
(
!
name
)
{
throw
Error
(
"
addTargetScopedActor
requires
the
name
argument
"
)
;
}
if
(
[
"
title
"
"
url
"
"
actor
"
]
.
includes
(
name
)
)
{
throw
Error
(
name
+
"
is
not
allowed
"
)
;
}
if
(
this
.
targetScopedActorFactories
.
hasOwnProperty
(
name
)
)
{
throw
Error
(
name
+
"
already
exists
"
)
;
}
this
.
targetScopedActorFactories
[
name
]
=
{
options
name
}
;
}
removeTargetScopedActor
(
actorOrName
)
{
let
name
;
if
(
typeof
actorOrName
=
=
"
string
"
)
{
name
=
actorOrName
;
}
else
{
const
actor
=
actorOrName
;
for
(
const
factoryName
in
this
.
targetScopedActorFactories
)
{
const
handler
=
this
.
targetScopedActorFactories
[
factoryName
]
;
if
(
handler
.
options
.
constructorName
=
=
actor
.
name
|
|
handler
.
options
.
id
=
=
actor
.
id
)
{
name
=
factoryName
;
break
;
}
}
}
if
(
!
name
)
{
return
;
}
delete
this
.
targetScopedActorFactories
[
name
]
;
for
(
const
connID
of
Object
.
getOwnPropertyNames
(
this
.
_connections
)
)
{
if
(
this
.
_connections
[
connID
]
.
rootActor
)
{
this
.
_connections
[
connID
]
.
rootActor
.
removeActorByName
(
name
)
;
}
}
}
addGlobalActor
(
options
name
)
{
if
(
!
name
)
{
throw
Error
(
"
addGlobalActor
requires
the
name
argument
"
)
;
}
if
(
[
"
from
"
"
tabs
"
"
selected
"
]
.
includes
(
name
)
)
{
throw
Error
(
name
+
"
is
not
allowed
"
)
;
}
if
(
this
.
globalActorFactories
.
hasOwnProperty
(
name
)
)
{
throw
Error
(
name
+
"
already
exists
"
)
;
}
this
.
globalActorFactories
[
name
]
=
{
options
name
}
;
}
removeGlobalActor
(
actorOrName
)
{
let
name
;
if
(
typeof
actorOrName
=
=
"
string
"
)
{
name
=
actorOrName
;
}
else
{
const
actor
=
actorOrName
;
for
(
const
factoryName
in
this
.
globalActorFactories
)
{
const
handler
=
this
.
globalActorFactories
[
factoryName
]
;
if
(
handler
.
options
.
constructorName
=
=
actor
.
name
|
|
handler
.
options
.
id
=
=
actor
.
id
)
{
name
=
factoryName
;
break
;
}
}
}
if
(
!
name
)
{
return
;
}
delete
this
.
globalActorFactories
[
name
]
;
for
(
const
connID
of
Object
.
getOwnPropertyNames
(
this
.
_connections
)
)
{
if
(
this
.
_connections
[
connID
]
.
rootActor
)
{
this
.
_connections
[
connID
]
.
rootActor
.
removeActorByName
(
name
)
;
}
}
}
destroy
(
)
{
for
(
const
id
of
Object
.
getOwnPropertyNames
(
gRegisteredModules
)
)
{
this
.
unregisterModule
(
id
)
;
}
gRegisteredModules
=
Object
.
create
(
null
)
;
this
.
globalActorFactories
=
{
}
;
this
.
targetScopedActorFactories
=
{
}
;
}
}
;
exports
.
ActorRegistry
=
ActorRegistry
;
