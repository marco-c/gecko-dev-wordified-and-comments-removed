"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
makeSideeffectFreeDebugger
"
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
/
eval
-
with
-
debugger
.
js
"
true
)
;
const
_invalidCustomFormatterHooks
=
new
WeakSet
(
)
;
function
customFormatterHeader
(
rawValue
)
{
const
globalWrapper
=
Cu
.
getGlobalForObject
(
rawValue
)
;
const
global
=
globalWrapper
?
.
wrappedJSObject
;
if
(
global
&
&
Array
.
isArray
(
global
.
devtoolsFormatters
)
)
{
const
dbg
=
makeSideeffectFreeDebugger
(
)
;
const
dbgGlobal
=
dbg
.
makeGlobalObjectReference
(
global
)
;
for
(
const
[
index
formatter
]
of
global
.
devtoolsFormatters
.
entries
(
)
)
{
if
(
_invalidCustomFormatterHooks
.
has
(
formatter
)
)
{
continue
;
}
const
headerType
=
typeof
formatter
?
.
header
;
if
(
headerType
!
=
=
"
function
"
)
{
_invalidCustomFormatterHooks
.
add
(
formatter
)
;
logCustomFormatterError
(
globalWrapper
devtoolsFormatters
[
{
index
}
]
.
header
should
be
a
function
got
{
headerType
}
)
;
continue
;
}
try
{
const
formatterHeaderDbgValue
=
dbgGlobal
.
makeDebuggeeValue
(
formatter
.
header
)
;
const
debuggeeValue
=
dbgGlobal
.
makeDebuggeeValue
(
rawValue
)
;
const
header
=
formatterHeaderDbgValue
.
call
(
dbgGlobal
debuggeeValue
)
;
let
errorMsg
=
"
"
;
if
(
header
?
.
return
?
.
class
=
=
=
"
Array
"
)
{
const
rawHeader
=
header
.
return
.
unsafeDereference
(
)
;
if
(
rawHeader
.
length
=
=
=
0
)
{
_invalidCustomFormatterHooks
.
add
(
formatter
)
;
logCustomFormatterError
(
globalWrapper
devtoolsFormatters
[
{
index
}
]
.
header
returned
an
empty
array
formatterHeaderDbgValue
?
.
script
)
;
continue
;
}
let
hasBody
=
false
;
const
hasBodyType
=
typeof
formatter
?
.
hasBody
;
if
(
hasBodyType
=
=
=
"
function
"
)
{
const
formatterHasBodyDbgValue
=
dbgGlobal
.
makeDebuggeeValue
(
formatter
.
hasBody
)
;
hasBody
=
formatterHasBodyDbgValue
.
call
(
dbgGlobal
debuggeeValue
)
;
if
(
hasBody
=
=
null
)
{
_invalidCustomFormatterHooks
.
add
(
formatter
)
;
logCustomFormatterError
(
globalWrapper
devtoolsFormatters
[
{
index
}
]
.
hasBody
was
not
run
because
it
has
side
effects
formatterHasBodyDbgValue
?
.
script
)
;
continue
;
}
else
if
(
"
throw
"
in
hasBody
)
{
_invalidCustomFormatterHooks
.
add
(
formatter
)
;
logCustomFormatterError
(
globalWrapper
devtoolsFormatters
[
{
index
}
]
.
hasBody
threw
:
{
hasBody
.
throw
.
getProperty
(
"
message
"
)
?
.
return
}
formatterHasBodyDbgValue
?
.
script
)
;
continue
;
}
}
else
if
(
hasBodyType
!
=
=
"
undefined
"
)
{
_invalidCustomFormatterHooks
.
add
(
formatter
)
;
logCustomFormatterError
(
globalWrapper
devtoolsFormatters
[
{
index
}
]
.
hasBody
should
be
a
function
got
{
hasBodyType
}
)
;
continue
;
}
return
{
useCustomFormatter
:
true
customFormatterIndex
:
index
header
:
global
.
structuredClone
(
rawHeader
)
hasBody
:
!
!
hasBody
?
.
return
}
;
}
if
(
header
?
.
return
=
=
=
null
)
{
continue
;
}
_invalidCustomFormatterHooks
.
add
(
formatter
)
;
if
(
header
=
=
null
)
{
errorMsg
=
devtoolsFormatters
[
{
index
}
]
.
header
was
not
run
because
it
has
side
effects
;
}
else
if
(
"
return
"
in
header
)
{
let
type
=
typeof
header
.
return
;
if
(
type
=
=
=
"
object
"
)
{
type
=
header
.
return
?
.
class
;
}
errorMsg
=
devtoolsFormatters
[
{
index
}
]
.
header
should
return
an
array
got
{
type
}
;
}
else
if
(
"
throw
"
in
header
)
{
errorMsg
=
devtoolsFormatters
[
{
index
}
]
.
header
threw
:
{
header
.
throw
.
getProperty
(
"
message
"
)
?
.
return
}
;
}
logCustomFormatterError
(
globalWrapper
errorMsg
formatterHeaderDbgValue
?
.
script
)
;
}
catch
(
e
)
{
logCustomFormatterError
(
globalWrapper
devtoolsFormatters
[
{
index
}
]
couldn
'
t
be
run
:
{
e
.
message
}
)
;
}
finally
{
dbg
.
removeAllDebuggees
(
)
;
}
}
}
return
null
;
}
exports
.
customFormatterHeader
=
customFormatterHeader
;
async
function
customFormatterBody
(
rawValue
customFormatterIndex
)
{
const
globalWrapper
=
Cu
.
getGlobalForObject
(
rawValue
)
;
const
global
=
globalWrapper
?
.
wrappedJSObject
;
const
dbg
=
makeSideeffectFreeDebugger
(
)
;
try
{
const
dbgGlobal
=
dbg
.
makeGlobalObjectReference
(
global
)
;
const
formatter
=
global
.
devtoolsFormatters
[
customFormatterIndex
]
;
if
(
_invalidCustomFormatterHooks
.
has
(
formatter
)
)
{
return
{
customFormatterBody
:
null
}
;
}
const
bodyType
=
typeof
formatter
?
.
body
;
if
(
bodyType
!
=
=
"
function
"
)
{
_invalidCustomFormatterHooks
.
add
(
formatter
)
;
logCustomFormatterError
(
globalWrapper
devtoolsFormatters
[
{
customFormatterIndex
}
]
.
body
should
be
a
function
got
{
bodyType
}
)
;
return
{
customFormatterBody
:
null
}
;
}
const
formatterBodyDbgValue
=
formatter
&
&
dbgGlobal
.
makeDebuggeeValue
(
formatter
.
body
)
;
const
body
=
formatterBodyDbgValue
.
call
(
dbgGlobal
dbgGlobal
.
makeDebuggeeValue
(
rawValue
)
)
;
if
(
body
?
.
return
?
.
class
=
=
=
"
Array
"
)
{
const
rawBody
=
body
.
return
.
unsafeDereference
(
)
;
if
(
rawBody
.
length
=
=
=
0
)
{
_invalidCustomFormatterHooks
.
add
(
formatter
)
;
logCustomFormatterError
(
globalWrapper
devtoolsFormatters
[
{
customFormatterIndex
}
]
.
body
returned
an
empty
array
formatterBodyDbgValue
?
.
script
)
;
return
{
customFormatterBody
:
null
}
;
}
return
{
customFormatterBody
:
global
.
structuredClone
(
rawBody
)
}
;
}
_invalidCustomFormatterHooks
.
add
(
formatter
)
;
let
errorMsg
=
"
"
;
if
(
body
=
=
null
)
{
errorMsg
=
devtoolsFormatters
[
{
customFormatterIndex
}
]
.
body
was
not
run
because
it
has
side
effects
;
}
else
if
(
"
return
"
in
body
)
{
let
type
=
body
.
return
=
=
=
null
?
"
null
"
:
typeof
body
.
return
;
if
(
type
=
=
=
"
object
"
)
{
type
=
body
.
return
?
.
class
;
}
errorMsg
=
devtoolsFormatters
[
{
customFormatterIndex
}
]
.
body
should
return
an
array
got
{
type
}
;
}
else
if
(
"
throw
"
in
body
)
{
errorMsg
=
devtoolsFormatters
[
{
customFormatterIndex
}
]
.
body
threw
:
{
body
.
throw
.
getProperty
(
"
message
"
)
?
.
return
}
;
}
logCustomFormatterError
(
globalWrapper
errorMsg
formatterBodyDbgValue
?
.
script
)
;
}
catch
(
e
)
{
logCustomFormatterError
(
globalWrapper
Custom
formatter
with
index
{
customFormatterIndex
}
couldn
'
t
be
run
:
{
e
.
message
}
)
;
}
finally
{
dbg
.
removeAllDebuggees
(
)
;
}
return
{
}
;
}
exports
.
customFormatterBody
=
customFormatterBody
;
function
logCustomFormatterError
(
window
errorMsg
script
)
{
const
scriptErrorClass
=
Cc
[
"
mozilla
.
org
/
scripterror
;
1
"
]
;
const
scriptError
=
scriptErrorClass
.
createInstance
(
Ci
.
nsIScriptError
)
;
const
{
url
source
startLine
startColumn
}
=
script
?
?
{
}
;
scriptError
.
initWithWindowID
(
Custom
formatter
failed
:
{
errorMsg
}
url
source
startLine
startColumn
Ci
.
nsIScriptError
.
errorFlag
"
devtoolsFormatter
"
window
.
windowGlobalChild
.
innerWindowId
)
;
Services
.
console
.
logMessage
(
scriptError
)
;
}
