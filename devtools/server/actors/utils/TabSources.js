"
use
strict
"
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
assert
}
=
DevToolsUtils
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
{
GeneratedLocation
}
=
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
loader
.
lazyRequireGetter
(
this
"
SourceActor
"
"
devtools
/
server
/
actors
/
source
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
isEvalSource
"
"
devtools
/
server
/
actors
/
source
"
true
)
;
function
TabSources
(
threadActor
allowSourceFn
=
(
)
=
>
true
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_thread
=
threadActor
;
this
.
_autoBlackBox
=
true
;
this
.
allowSource
=
source
=
>
{
return
!
isHiddenSource
(
source
)
&
&
allowSourceFn
(
source
)
;
}
;
this
.
blackBoxedSources
=
new
Map
(
)
;
this
.
neverAutoBlackBoxSources
=
new
Set
(
)
;
this
.
_sourceActors
=
new
Map
(
)
;
this
.
_htmlDocumentSourceActors
=
Object
.
create
(
null
)
;
}
const
MINIFIED_SOURCE_REGEXP
=
/
\
bmin
\
.
js
/
;
TabSources
.
prototype
=
{
setOptions
:
function
(
options
)
{
let
shouldReset
=
false
;
if
(
"
autoBlackBox
"
in
options
)
{
shouldReset
=
true
;
this
.
_autoBlackBox
=
options
.
autoBlackBox
;
}
if
(
shouldReset
)
{
this
.
reset
(
)
;
}
}
reset
:
function
(
)
{
this
.
_sourceActors
=
new
Map
(
)
;
this
.
_htmlDocumentSourceActors
=
Object
.
create
(
null
)
;
}
source
:
function
(
{
source
isInlineSource
contentType
}
)
{
assert
(
source
"
TabSources
.
prototype
.
source
needs
a
source
"
)
;
if
(
!
this
.
allowSource
(
source
)
)
{
return
null
;
}
if
(
source
.
url
in
this
.
_htmlDocumentSourceActors
)
{
return
this
.
_htmlDocumentSourceActors
[
source
.
url
]
;
}
let
originalUrl
=
null
;
if
(
isInlineSource
)
{
originalUrl
=
source
.
url
;
source
=
null
;
}
else
if
(
this
.
_sourceActors
.
has
(
source
)
)
{
return
this
.
_sourceActors
.
get
(
source
)
;
}
const
actor
=
new
SourceActor
(
{
thread
:
this
.
_thread
source
:
source
originalUrl
:
originalUrl
isInlineSource
:
isInlineSource
contentType
:
contentType
}
)
;
const
sourceActorStore
=
this
.
_thread
.
sourceActorStore
;
const
id
=
sourceActorStore
.
getReusableActorId
(
source
originalUrl
)
;
if
(
id
)
{
actor
.
actorID
=
id
;
}
this
.
_thread
.
threadLifetimePool
.
addActor
(
actor
)
;
sourceActorStore
.
setReusableActorId
(
source
originalUrl
actor
.
actorID
)
;
if
(
this
.
_autoBlackBox
&
&
!
this
.
neverAutoBlackBoxSources
.
has
(
actor
.
url
)
&
&
this
.
_isMinifiedURL
(
actor
.
url
)
)
{
this
.
blackBox
(
actor
.
url
)
;
this
.
neverAutoBlackBoxSources
.
add
(
actor
.
url
)
;
}
if
(
source
)
{
this
.
_sourceActors
.
set
(
source
actor
)
;
}
else
{
this
.
_htmlDocumentSourceActors
[
originalUrl
]
=
actor
;
}
this
.
emit
(
"
newSource
"
actor
)
;
return
actor
;
}
_getSourceActor
:
function
(
source
)
{
if
(
source
.
url
in
this
.
_htmlDocumentSourceActors
)
{
return
this
.
_htmlDocumentSourceActors
[
source
.
url
]
;
}
if
(
this
.
_sourceActors
.
has
(
source
)
)
{
return
this
.
_sourceActors
.
get
(
source
)
;
}
return
null
;
}
hasSourceActor
:
function
(
source
)
{
return
!
!
this
.
_getSourceActor
(
source
)
;
}
getSourceActor
:
function
(
source
)
{
const
sourceActor
=
this
.
_getSourceActor
(
source
)
;
if
(
!
sourceActor
)
{
throw
new
Error
(
"
getSource
:
could
not
find
source
actor
for
"
+
(
source
.
url
|
|
"
source
"
)
)
;
}
return
sourceActor
;
}
getSourceActorByURL
:
function
(
url
)
{
if
(
url
)
{
for
(
const
[
source
actor
]
of
this
.
_sourceActors
)
{
if
(
source
.
url
=
=
=
url
)
{
return
actor
;
}
}
if
(
url
in
this
.
_htmlDocumentSourceActors
)
{
return
this
.
_htmlDocumentSourceActors
[
url
]
;
}
}
throw
new
Error
(
"
getSourceActorByURL
:
could
not
find
source
for
"
+
url
)
;
}
_isMinifiedURL
:
function
(
uri
)
{
if
(
!
uri
)
{
return
false
;
}
try
{
const
url
=
new
URL
(
uri
)
;
const
pathname
=
url
.
pathname
;
return
MINIFIED_SOURCE_REGEXP
.
test
(
pathname
.
slice
(
pathname
.
lastIndexOf
(
"
/
"
)
+
1
)
)
;
}
catch
(
e
)
{
return
MINIFIED_SOURCE_REGEXP
.
test
(
uri
)
;
}
}
createSourceActor
:
function
(
source
)
{
const
url
=
isEvalSource
(
source
)
?
null
:
source
.
url
;
const
spec
=
{
source
}
;
const
element
=
source
.
element
?
source
.
element
.
unsafeDereference
(
)
:
null
;
if
(
element
&
&
(
element
.
tagName
!
=
=
"
SCRIPT
"
|
|
!
element
.
hasAttribute
(
"
src
"
)
)
)
{
spec
.
isInlineSource
=
true
;
}
else
if
(
source
.
introductionType
=
=
=
"
wasm
"
)
{
spec
.
contentType
=
"
text
/
wasm
"
;
}
else
if
(
source
.
introductionType
=
=
=
"
debugger
eval
"
)
{
spec
.
contentType
=
"
text
/
javascript
"
;
}
else
if
(
url
)
{
if
(
url
.
indexOf
(
"
Scratchpad
/
"
)
=
=
=
0
|
|
url
.
indexOf
(
"
javascript
:
"
)
=
=
=
0
|
|
url
=
=
=
"
debugger
eval
code
"
)
{
spec
.
contentType
=
"
text
/
javascript
"
;
}
else
{
try
{
const
pathname
=
new
URL
(
url
)
.
pathname
;
const
filename
=
pathname
.
slice
(
pathname
.
lastIndexOf
(
"
/
"
)
+
1
)
;
const
index
=
filename
.
lastIndexOf
(
"
.
"
)
;
const
extension
=
index
>
=
0
?
filename
.
slice
(
index
+
1
)
:
"
"
;
if
(
extension
=
=
=
"
xml
"
)
{
spec
.
isInlineSource
=
true
;
}
else
if
(
extension
=
=
=
"
js
"
)
{
spec
.
contentType
=
"
text
/
javascript
"
;
}
}
catch
(
e
)
{
const
filename
=
url
;
const
index
=
filename
.
lastIndexOf
(
"
.
"
)
;
const
extension
=
index
>
=
0
?
filename
.
slice
(
index
+
1
)
:
"
"
;
if
(
extension
=
=
=
"
js
"
)
{
spec
.
contentType
=
"
text
/
javascript
"
;
}
}
}
}
else
{
spec
.
contentType
=
"
text
/
javascript
"
;
}
return
this
.
source
(
spec
)
;
}
getScriptOffsetLocation
:
function
(
script
offset
)
{
const
{
lineNumber
columnNumber
}
=
script
.
getOffsetLocation
(
offset
)
;
return
new
GeneratedLocation
(
this
.
createSourceActor
(
script
.
source
)
lineNumber
columnNumber
)
;
}
getFrameLocation
:
function
(
frame
)
{
if
(
!
frame
|
|
!
frame
.
script
)
{
return
new
GeneratedLocation
(
)
;
}
return
this
.
getScriptOffsetLocation
(
frame
.
script
frame
.
offset
)
;
}
isBlackBoxed
:
function
(
url
line
column
)
{
const
ranges
=
this
.
blackBoxedSources
.
get
(
url
)
;
if
(
!
ranges
)
{
return
this
.
blackBoxedSources
.
has
(
url
)
;
}
const
range
=
ranges
.
find
(
r
=
>
isLocationInRange
(
{
line
column
}
r
)
)
;
return
!
!
range
;
}
blackBox
:
function
(
url
range
)
{
if
(
!
range
)
{
return
this
.
blackBoxedSources
.
set
(
url
null
)
;
}
const
ranges
=
this
.
blackBoxedSources
.
get
(
url
)
|
|
[
]
;
const
index
=
ranges
.
findIndex
(
r
=
>
(
r
.
end
.
line
<
=
range
.
start
.
line
&
&
r
.
end
.
column
<
=
range
.
start
.
column
)
)
;
ranges
.
splice
(
index
+
1
0
range
)
;
this
.
blackBoxedSources
.
set
(
url
ranges
)
;
return
true
;
}
unblackBox
:
function
(
url
range
)
{
if
(
!
range
)
{
return
this
.
blackBoxedSources
.
delete
(
url
)
;
}
const
ranges
=
this
.
blackBoxedSources
.
get
(
url
)
;
const
index
=
ranges
.
findIndex
(
r
=
>
r
.
start
.
line
=
=
=
range
.
start
.
line
&
&
r
.
start
.
column
=
=
=
range
.
start
.
column
&
&
r
.
end
.
line
=
=
=
range
.
end
.
line
&
&
r
.
end
.
column
=
=
=
range
.
end
.
column
)
;
if
(
index
!
=
=
-
1
)
{
ranges
.
splice
(
index
1
)
;
}
if
(
ranges
.
length
=
=
=
0
)
{
return
this
.
blackBoxedSources
.
delete
(
url
)
;
}
return
this
.
blackBoxedSources
.
set
(
url
ranges
)
;
}
iter
:
function
(
)
{
const
actors
=
Object
.
keys
(
this
.
_htmlDocumentSourceActors
)
.
map
(
k
=
>
{
return
this
.
_htmlDocumentSourceActors
[
k
]
;
}
)
;
for
(
const
actor
of
this
.
_sourceActors
.
values
(
)
)
{
actors
.
push
(
actor
)
;
}
return
actors
;
}
}
;
function
isHiddenSource
(
source
)
{
return
source
.
introductionType
=
=
=
"
Function
.
prototype
"
;
}
function
isLocationInRange
(
{
line
column
}
range
)
{
return
(
range
.
start
.
line
<
=
line
|
|
(
range
.
start
.
line
=
=
line
&
&
range
.
start
.
column
<
=
column
)
)
&
&
(
range
.
end
.
line
>
=
line
|
|
(
range
.
end
.
line
=
=
line
&
&
range
.
end
.
column
>
=
column
)
)
;
}
exports
.
TabSources
=
TabSources
;
exports
.
isHiddenSource
=
isHiddenSource
;
