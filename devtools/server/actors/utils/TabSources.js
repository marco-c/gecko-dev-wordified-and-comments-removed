"
use
strict
"
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
assert
fetch
}
=
DevToolsUtils
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
old
-
event
-
emitter
"
)
;
const
{
OriginalLocation
GeneratedLocation
}
=
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
const
{
resolve
}
=
require
(
"
promise
"
)
;
const
{
joinURI
}
=
require
(
"
devtools
/
shared
/
path
"
)
;
loader
.
lazyRequireGetter
(
this
"
SourceActor
"
"
devtools
/
server
/
actors
/
source
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
isEvalSource
"
"
devtools
/
server
/
actors
/
source
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
SourceMapConsumer
"
"
source
-
map
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
SourceMapGenerator
"
"
source
-
map
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
WasmRemap
"
"
devtools
/
shared
/
wasm
-
source
-
map
"
true
)
;
function
TabSources
(
threadActor
allowSourceFn
=
(
)
=
>
true
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_thread
=
threadActor
;
this
.
_useSourceMaps
=
true
;
this
.
_autoBlackBox
=
true
;
this
.
_anonSourceMapId
=
1
;
this
.
allowSource
=
source
=
>
{
return
!
isHiddenSource
(
source
)
&
&
allowSourceFn
(
source
)
;
}
;
this
.
blackBoxedSources
=
new
Set
(
)
;
this
.
prettyPrintedSources
=
new
Map
(
)
;
this
.
neverAutoBlackBoxSources
=
new
Set
(
)
;
this
.
_sourceMaps
=
new
Map
(
)
;
this
.
_sourceMapCache
=
Object
.
create
(
null
)
;
this
.
_sourceActors
=
new
Map
(
)
;
this
.
_sourceMappedSourceActors
=
Object
.
create
(
null
)
;
}
const
MINIFIED_SOURCE_REGEXP
=
/
\
bmin
\
.
js
/
;
TabSources
.
prototype
=
{
setOptions
:
function
(
options
)
{
let
shouldReset
=
false
;
if
(
"
useSourceMaps
"
in
options
)
{
shouldReset
=
true
;
this
.
_useSourceMaps
=
options
.
useSourceMaps
;
}
if
(
"
autoBlackBox
"
in
options
)
{
shouldReset
=
true
;
this
.
_autoBlackBox
=
options
.
autoBlackBox
;
}
if
(
shouldReset
)
{
this
.
reset
(
)
;
}
}
reset
:
function
(
opts
=
{
}
)
{
this
.
_sourceActors
=
new
Map
(
)
;
this
.
_sourceMaps
=
new
Map
(
)
;
this
.
_sourceMappedSourceActors
=
Object
.
create
(
null
)
;
if
(
opts
.
sourceMaps
)
{
this
.
_sourceMapCache
=
Object
.
create
(
null
)
;
}
}
source
:
function
(
{
source
originalUrl
generatedSource
isInlineSource
contentType
}
)
{
assert
(
source
|
|
(
originalUrl
&
&
generatedSource
)
"
TabSources
.
prototype
.
source
needs
an
originalUrl
or
a
source
"
)
;
if
(
source
)
{
if
(
!
this
.
allowSource
(
source
)
)
{
return
null
;
}
if
(
source
.
url
in
this
.
_sourceMappedSourceActors
)
{
return
this
.
_sourceMappedSourceActors
[
source
.
url
]
;
}
if
(
isInlineSource
)
{
originalUrl
=
source
.
url
;
source
=
null
;
}
else
if
(
this
.
_sourceActors
.
has
(
source
)
)
{
return
this
.
_sourceActors
.
get
(
source
)
;
}
}
else
if
(
originalUrl
)
{
for
(
let
[
sourceData
actor
]
of
this
.
_sourceActors
)
{
if
(
sourceData
.
url
=
=
=
originalUrl
)
{
return
actor
;
}
}
if
(
originalUrl
in
this
.
_sourceMappedSourceActors
)
{
return
this
.
_sourceMappedSourceActors
[
originalUrl
]
;
}
}
let
actor
=
new
SourceActor
(
{
thread
:
this
.
_thread
source
:
source
originalUrl
:
originalUrl
generatedSource
:
generatedSource
isInlineSource
:
isInlineSource
contentType
:
contentType
}
)
;
let
sourceActorStore
=
this
.
_thread
.
sourceActorStore
;
let
id
=
sourceActorStore
.
getReusableActorId
(
source
originalUrl
)
;
if
(
id
)
{
actor
.
actorID
=
id
;
}
this
.
_thread
.
threadLifetimePool
.
addActor
(
actor
)
;
sourceActorStore
.
setReusableActorId
(
source
originalUrl
actor
.
actorID
)
;
if
(
this
.
_autoBlackBox
&
&
!
this
.
neverAutoBlackBoxSources
.
has
(
actor
.
url
)
&
&
this
.
_isMinifiedURL
(
actor
.
url
)
)
{
this
.
blackBox
(
actor
.
url
)
;
this
.
neverAutoBlackBoxSources
.
add
(
actor
.
url
)
;
}
if
(
source
)
{
this
.
_sourceActors
.
set
(
source
actor
)
;
}
else
{
this
.
_sourceMappedSourceActors
[
originalUrl
]
=
actor
;
}
this
.
_emitNewSource
(
actor
)
;
return
actor
;
}
_emitNewSource
:
function
(
actor
)
{
if
(
!
actor
.
source
)
{
this
.
emit
(
"
newSource
"
actor
)
;
}
else
{
this
.
fetchSourceMap
(
actor
.
source
)
.
then
(
map
=
>
{
if
(
!
map
)
{
this
.
emit
(
"
newSource
"
actor
)
;
}
}
)
;
}
}
getSourceActor
:
function
(
source
)
{
if
(
source
.
url
in
this
.
_sourceMappedSourceActors
)
{
return
this
.
_sourceMappedSourceActors
[
source
.
url
]
;
}
if
(
this
.
_sourceActors
.
has
(
source
)
)
{
return
this
.
_sourceActors
.
get
(
source
)
;
}
throw
new
Error
(
"
getSource
:
could
not
find
source
actor
for
"
+
(
source
.
url
|
|
"
source
"
)
)
;
}
getSourceActorByURL
:
function
(
url
)
{
if
(
url
)
{
for
(
let
[
source
actor
]
of
this
.
_sourceActors
)
{
if
(
source
.
url
=
=
=
url
)
{
return
actor
;
}
}
if
(
url
in
this
.
_sourceMappedSourceActors
)
{
return
this
.
_sourceMappedSourceActors
[
url
]
;
}
}
throw
new
Error
(
"
getSourceActorByURL
:
could
not
find
source
for
"
+
url
)
;
}
_isMinifiedURL
:
function
(
uri
)
{
if
(
!
uri
)
{
return
false
;
}
try
{
let
url
=
new
URL
(
uri
)
;
let
pathname
=
url
.
pathname
;
return
MINIFIED_SOURCE_REGEXP
.
test
(
pathname
.
slice
(
pathname
.
lastIndexOf
(
"
/
"
)
+
1
)
)
;
}
catch
(
e
)
{
return
MINIFIED_SOURCE_REGEXP
.
test
(
uri
)
;
}
}
createNonSourceMappedActor
:
function
(
source
)
{
let
url
=
isEvalSource
(
source
)
?
null
:
source
.
url
;
let
spec
=
{
source
}
;
let
element
=
source
.
element
?
source
.
element
.
unsafeDereference
(
)
:
null
;
if
(
element
&
&
(
element
.
tagName
!
=
=
"
SCRIPT
"
|
|
!
element
.
hasAttribute
(
"
src
"
)
)
)
{
spec
.
isInlineSource
=
true
;
}
else
if
(
source
.
introductionType
=
=
=
"
wasm
"
)
{
spec
.
contentType
=
"
text
/
wasm
"
;
}
else
if
(
url
)
{
if
(
url
.
indexOf
(
"
Scratchpad
/
"
)
=
=
=
0
|
|
url
.
indexOf
(
"
javascript
:
"
)
=
=
=
0
|
|
url
=
=
=
"
debugger
eval
code
"
)
{
spec
.
contentType
=
"
text
/
javascript
"
;
}
else
{
try
{
let
pathname
=
new
URL
(
url
)
.
pathname
;
let
filename
=
pathname
.
slice
(
pathname
.
lastIndexOf
(
"
/
"
)
+
1
)
;
let
index
=
filename
.
lastIndexOf
(
"
.
"
)
;
let
extension
=
index
>
=
0
?
filename
.
slice
(
index
+
1
)
:
"
"
;
if
(
extension
=
=
=
"
xml
"
)
{
spec
.
isInlineSource
=
true
;
}
else
if
(
extension
=
=
=
"
js
"
)
{
spec
.
contentType
=
"
text
/
javascript
"
;
}
}
catch
(
e
)
{
const
filename
=
url
;
const
index
=
filename
.
lastIndexOf
(
"
.
"
)
;
const
extension
=
index
>
=
0
?
filename
.
slice
(
index
+
1
)
:
"
"
;
if
(
extension
=
=
=
"
js
"
)
{
spec
.
contentType
=
"
text
/
javascript
"
;
}
}
}
}
else
{
spec
.
contentType
=
"
text
/
javascript
"
;
}
return
this
.
source
(
spec
)
;
}
_createSourceMappedActors
:
function
(
source
)
{
if
(
!
this
.
_useSourceMaps
|
|
!
source
.
sourceMapURL
)
{
return
resolve
(
null
)
;
}
return
this
.
fetchSourceMap
(
source
)
.
then
(
map
=
>
{
if
(
map
)
{
return
map
.
sources
.
map
(
s
=
>
{
return
this
.
source
(
{
originalUrl
:
s
generatedSource
:
source
}
)
;
}
)
.
filter
(
isNotNull
)
;
}
return
null
;
}
)
;
}
createSourceActors
:
function
(
source
)
{
return
this
.
_createSourceMappedActors
(
source
)
.
then
(
actors
=
>
{
let
actor
=
this
.
createNonSourceMappedActor
(
source
)
;
return
(
actors
|
|
[
actor
]
)
.
filter
(
isNotNull
)
;
}
)
;
}
fetchSourceMap
:
function
(
source
)
{
if
(
!
this
.
_useSourceMaps
)
{
return
resolve
(
null
)
;
}
else
if
(
this
.
_sourceMaps
.
has
(
source
)
)
{
return
this
.
_sourceMaps
.
get
(
source
)
;
}
else
if
(
!
source
|
|
!
source
.
sourceMapURL
)
{
return
resolve
(
null
)
;
}
let
sourceMapURL
=
source
.
sourceMapURL
;
if
(
source
.
url
)
{
sourceMapURL
=
joinURI
(
source
.
url
sourceMapURL
)
;
}
let
result
=
this
.
_fetchSourceMap
(
sourceMapURL
source
.
url
)
;
let
isWasm
=
source
.
introductionType
=
=
"
wasm
"
;
if
(
isWasm
)
{
result
=
result
.
then
(
(
map
)
=
>
new
WasmRemap
(
map
)
)
;
}
this
.
_sourceMaps
.
set
(
source
result
)
;
return
result
;
}
getSourceMap
:
function
(
source
)
{
return
resolve
(
this
.
_sourceMaps
.
get
(
source
)
)
;
}
setSourceMap
:
function
(
source
map
)
{
this
.
_sourceMaps
.
set
(
source
resolve
(
map
)
)
;
}
_fetchSourceMap
:
function
(
absSourceMapURL
sourceURL
)
{
assert
(
this
.
_useSourceMaps
"
Cannot
fetch
sourcemaps
if
they
are
disabled
"
)
;
if
(
this
.
_sourceMapCache
[
absSourceMapURL
]
)
{
return
this
.
_sourceMapCache
[
absSourceMapURL
]
;
}
let
fetching
=
fetch
(
absSourceMapURL
{
loadFromCache
:
false
}
)
.
then
(
(
{
content
}
)
=
>
{
let
map
=
new
SourceMapConsumer
(
content
)
;
this
.
_setSourceMapRoot
(
map
absSourceMapURL
sourceURL
)
;
return
map
;
}
)
.
catch
(
error
=
>
{
if
(
!
DevToolsUtils
.
reportingDisabled
)
{
DevToolsUtils
.
reportException
(
"
TabSources
.
prototype
.
_fetchSourceMap
"
error
)
;
}
return
null
;
}
)
;
this
.
_sourceMapCache
[
absSourceMapURL
]
=
fetching
;
return
fetching
;
}
_setSourceMapRoot
:
function
(
sourceMap
absSourceMapURL
scriptURL
)
{
if
(
sourceMap
.
hasContentsOfAllSources
(
)
)
{
return
;
}
const
base
=
this
.
_dirname
(
absSourceMapURL
.
indexOf
(
"
data
:
"
)
=
=
=
0
?
scriptURL
:
absSourceMapURL
)
;
sourceMap
.
sourceRoot
=
sourceMap
.
sourceRoot
?
joinURI
(
base
sourceMap
.
sourceRoot
)
:
base
;
}
_dirname
:
function
(
path
)
{
let
url
=
new
URL
(
path
)
;
let
href
=
url
.
href
;
return
href
.
slice
(
0
href
.
lastIndexOf
(
"
/
"
)
)
;
}
clearSourceMapCache
:
function
(
sourceMapURL
opts
=
{
hard
:
false
}
)
{
let
oldSm
=
this
.
_sourceMapCache
[
sourceMapURL
]
;
if
(
opts
.
hard
)
{
delete
this
.
_sourceMapCache
[
sourceMapURL
]
;
}
if
(
oldSm
)
{
for
(
let
[
source
sm
]
of
this
.
_sourceMaps
.
entries
(
)
)
{
if
(
sm
=
=
=
oldSm
)
{
this
.
_sourceMaps
.
delete
(
source
)
;
}
}
}
}
setSourceMapHard
:
function
(
source
url
map
)
{
if
(
!
url
)
{
url
=
"
internal
:
/
/
sourcemap
"
+
(
this
.
_anonSourceMapId
+
+
)
+
"
/
"
;
}
source
.
sourceMapURL
=
url
;
this
.
_sourceMapCache
[
url
]
=
resolve
(
map
)
;
this
.
emit
(
"
updatedSource
"
this
.
getSourceActor
(
source
)
)
;
}
getFrameLocation
:
function
(
frame
)
{
if
(
!
frame
|
|
!
frame
.
script
)
{
return
new
GeneratedLocation
(
)
;
}
let
{
lineNumber
columnNumber
}
=
frame
.
script
.
getOffsetLocation
(
frame
.
offset
)
;
return
new
GeneratedLocation
(
this
.
createNonSourceMappedActor
(
frame
.
script
.
source
)
lineNumber
columnNumber
)
;
}
getOriginalLocation
:
function
(
generatedLocation
)
{
let
{
generatedSourceActor
generatedLine
generatedColumn
}
=
generatedLocation
;
let
source
=
generatedSourceActor
.
source
;
return
this
.
fetchSourceMap
(
source
)
.
then
(
map
=
>
{
if
(
map
)
{
let
{
source
:
originalUrl
line
:
originalLine
column
:
originalColumn
name
:
originalName
}
=
map
.
originalPositionFor
(
{
line
:
generatedLine
column
:
generatedColumn
=
=
null
?
Infinity
:
generatedColumn
}
)
;
return
new
OriginalLocation
(
originalUrl
?
this
.
source
(
{
originalUrl
:
originalUrl
generatedSource
:
source
}
)
:
null
originalLine
originalColumn
originalName
)
;
}
return
OriginalLocation
.
fromGeneratedLocation
(
generatedLocation
)
;
}
)
;
}
getAllGeneratedLocations
:
function
(
originalLocation
)
{
let
{
originalSourceActor
originalLine
originalColumn
}
=
originalLocation
;
let
source
=
(
originalSourceActor
.
source
|
|
originalSourceActor
.
generatedSource
)
;
return
this
.
fetchSourceMap
(
source
)
.
then
(
(
map
)
=
>
{
if
(
map
)
{
map
.
computeColumnSpans
(
)
;
return
map
.
allGeneratedPositionsFor
(
{
source
:
originalSourceActor
.
url
line
:
originalLine
column
:
originalColumn
}
)
.
map
(
(
{
line
column
lastColumn
}
)
=
>
{
return
new
GeneratedLocation
(
this
.
createNonSourceMappedActor
(
source
)
line
column
lastColumn
)
;
}
)
;
}
return
[
GeneratedLocation
.
fromOriginalLocation
(
originalLocation
)
]
;
}
)
;
}
getGeneratedLocation
:
function
(
originalLocation
)
{
let
{
originalSourceActor
}
=
originalLocation
;
let
source
=
originalSourceActor
.
source
|
|
originalSourceActor
.
generatedSource
;
return
this
.
fetchSourceMap
(
source
)
.
then
(
(
map
)
=
>
{
if
(
map
)
{
let
{
originalLine
originalColumn
}
=
originalLocation
;
let
{
line
:
generatedLine
column
:
generatedColumn
}
=
map
.
generatedPositionFor
(
{
source
:
originalSourceActor
.
url
line
:
originalLine
column
:
originalColumn
=
=
null
?
0
:
originalColumn
bias
:
SourceMapConsumer
.
LEAST_UPPER_BOUND
}
)
;
return
new
GeneratedLocation
(
this
.
createNonSourceMappedActor
(
source
)
generatedLine
generatedColumn
)
;
}
return
GeneratedLocation
.
fromOriginalLocation
(
originalLocation
)
;
}
)
;
}
isBlackBoxed
:
function
(
url
)
{
return
this
.
blackBoxedSources
.
has
(
url
)
;
}
blackBox
:
function
(
url
)
{
this
.
blackBoxedSources
.
add
(
url
)
;
}
unblackBox
:
function
(
url
)
{
this
.
blackBoxedSources
.
delete
(
url
)
;
}
isPrettyPrinted
:
function
(
url
)
{
return
this
.
prettyPrintedSources
.
has
(
url
)
;
}
prettyPrint
:
function
(
url
indent
)
{
this
.
prettyPrintedSources
.
set
(
url
indent
)
;
}
prettyPrintIndent
:
function
(
url
)
{
return
this
.
prettyPrintedSources
.
get
(
url
)
;
}
disablePrettyPrint
:
function
(
url
)
{
this
.
prettyPrintedSources
.
delete
(
url
)
;
}
iter
:
function
(
)
{
let
actors
=
Object
.
keys
(
this
.
_sourceMappedSourceActors
)
.
map
(
k
=
>
{
return
this
.
_sourceMappedSourceActors
[
k
]
;
}
)
;
for
(
let
actor
of
this
.
_sourceActors
.
values
(
)
)
{
if
(
!
this
.
_sourceMaps
.
has
(
actor
.
source
)
)
{
actors
.
push
(
actor
)
;
}
}
return
actors
;
}
}
;
function
isHiddenSource
(
source
)
{
return
source
.
introductionType
=
=
=
"
Function
.
prototype
"
;
}
function
isNotNull
(
thing
)
{
return
thing
!
=
=
null
;
}
exports
.
TabSources
=
TabSources
;
exports
.
isHiddenSource
=
isHiddenSource
;
