"
use
strict
"
;
const
{
formatDisplayName
}
=
require
(
"
devtools
/
server
/
actors
/
frame
"
)
;
function
getThrownMessage
(
completion
)
{
try
{
if
(
completion
.
throw
.
getOwnPropertyDescriptor
)
{
return
completion
.
throw
.
getOwnPropertyDescriptor
(
"
message
"
)
.
value
;
}
else
if
(
completion
.
toString
)
{
return
completion
.
toString
(
)
;
}
}
catch
(
ex
)
{
}
return
"
Unknown
exception
"
;
}
module
.
exports
.
getThrownMessage
=
getThrownMessage
;
function
logEvent
(
{
threadActor
frame
level
expression
bindings
}
)
{
const
{
sourceActor
line
column
}
=
threadActor
.
sources
.
getFrameLocation
(
frame
)
;
const
displayName
=
formatDisplayName
(
frame
)
;
if
(
isWorker
)
{
threadActor
.
_parent
.
_consoleActor
.
evaluateJS
(
{
text
:
console
.
log
(
.
.
.
{
expression
}
)
bindings
:
{
displayName
.
.
.
bindings
}
url
:
sourceActor
.
url
lineNumber
:
line
}
)
;
return
undefined
;
}
const
completion
=
frame
.
evalWithBindings
(
expression
{
displayName
.
.
.
bindings
}
)
;
let
value
;
if
(
!
completion
)
{
value
=
[
"
Evaluation
failed
"
]
;
}
else
if
(
"
return
"
in
completion
)
{
value
=
completion
.
return
;
}
else
{
value
=
[
getThrownMessage
(
completion
)
]
;
level
=
{
level
}
Error
;
}
if
(
value
&
&
typeof
value
.
unsafeDereference
=
=
=
"
function
"
)
{
value
=
value
.
unsafeDereference
(
)
;
}
const
message
=
{
filename
:
sourceActor
.
url
lineNumber
:
line
columnNumber
:
column
arguments
:
value
level
}
;
threadActor
.
_parent
.
_consoleActor
.
onConsoleAPICall
(
message
)
;
return
undefined
;
}
module
.
exports
.
logEvent
=
logEvent
;
