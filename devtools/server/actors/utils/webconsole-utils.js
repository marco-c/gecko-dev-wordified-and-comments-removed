"
use
strict
"
;
const
{
Cc
Ci
Cu
components
}
=
require
(
"
chrome
"
)
;
if
(
!
isWorker
)
{
loader
.
lazyImporter
(
this
"
VariablesView
"
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
VariablesView
.
jsm
"
)
;
}
const
CONSOLE_WORKER_IDS
=
exports
.
CONSOLE_WORKER_IDS
=
[
"
SharedWorker
"
"
ServiceWorker
"
"
Worker
"
]
;
var
WebConsoleUtils
=
{
getWorkerType
:
function
(
message
)
{
let
id
=
message
?
message
.
innerID
:
null
;
return
CONSOLE_WORKER_IDS
[
CONSOLE_WORKER_IDS
.
indexOf
(
id
)
]
|
|
null
;
}
cloneObject
:
function
(
object
recursive
filter
)
{
if
(
typeof
object
!
=
"
object
"
)
{
return
object
;
}
let
temp
;
if
(
Array
.
isArray
(
object
)
)
{
temp
=
[
]
;
Array
.
forEach
(
object
function
(
value
index
)
{
if
(
!
filter
|
|
filter
(
index
value
object
)
)
{
temp
.
push
(
recursive
?
WebConsoleUtils
.
cloneObject
(
value
)
:
value
)
;
}
}
)
;
}
else
{
temp
=
{
}
;
for
(
let
key
in
object
)
{
let
value
=
object
[
key
]
;
if
(
object
.
hasOwnProperty
(
key
)
&
&
(
!
filter
|
|
filter
(
key
value
object
)
)
)
{
temp
[
key
]
=
recursive
?
WebConsoleUtils
.
cloneObject
(
value
)
:
value
;
}
}
}
return
temp
;
}
getInnerWindowId
:
function
(
window
)
{
return
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
.
currentInnerWindowID
;
}
getInnerWindowIDsForFrames
:
function
(
window
)
{
let
innerWindowID
=
this
.
getInnerWindowId
(
window
)
;
let
ids
=
[
innerWindowID
]
;
if
(
window
.
frames
)
{
for
(
let
i
=
0
;
i
<
window
.
frames
.
length
;
i
+
+
)
{
let
frame
=
window
.
frames
[
i
]
;
ids
=
ids
.
concat
(
this
.
getInnerWindowIDsForFrames
(
frame
)
)
;
}
}
return
ids
;
}
getPropertyDescriptor
:
function
(
object
prop
)
{
let
desc
=
null
;
while
(
object
)
{
try
{
if
(
(
desc
=
Object
.
getOwnPropertyDescriptor
(
object
prop
)
)
)
{
break
;
}
}
catch
(
ex
)
{
if
(
ex
.
name
!
=
"
NS_ERROR_XPC_BAD_CONVERT_JS
"
&
&
ex
.
name
!
=
"
NS_ERROR_XPC_BAD_OP_ON_WN_PROTO
"
&
&
ex
.
name
!
=
"
TypeError
"
)
{
throw
ex
;
}
}
try
{
object
=
Object
.
getPrototypeOf
(
object
)
;
}
catch
(
ex
)
{
if
(
ex
.
name
=
=
"
TypeError
"
)
{
return
desc
;
}
throw
ex
;
}
}
return
desc
;
}
createValueGrip
:
function
(
value
objectWrapper
)
{
switch
(
typeof
value
)
{
case
"
boolean
"
:
return
value
;
case
"
string
"
:
return
objectWrapper
(
value
)
;
case
"
number
"
:
if
(
value
=
=
=
Infinity
)
{
return
{
type
:
"
Infinity
"
}
;
}
else
if
(
value
=
=
=
-
Infinity
)
{
return
{
type
:
"
-
Infinity
"
}
;
}
else
if
(
Number
.
isNaN
(
value
)
)
{
return
{
type
:
"
NaN
"
}
;
}
else
if
(
!
value
&
&
1
/
value
=
=
=
-
Infinity
)
{
return
{
type
:
"
-
0
"
}
;
}
return
value
;
case
"
undefined
"
:
return
{
type
:
"
undefined
"
}
;
case
"
object
"
:
if
(
value
=
=
=
null
)
{
return
{
type
:
"
null
"
}
;
}
case
"
function
"
:
return
objectWrapper
(
value
)
;
default
:
console
.
error
(
"
Failed
to
provide
a
grip
for
value
of
"
+
typeof
value
+
"
:
"
+
value
)
;
return
null
;
}
}
}
;
exports
.
WebConsoleUtils
=
WebConsoleUtils
;
var
WebConsoleCommands
=
{
_registeredCommands
:
new
Map
(
)
_originalCommands
:
new
Map
(
)
_registerOriginal
:
function
(
name
command
)
{
this
.
register
(
name
command
)
;
this
.
_originalCommands
.
set
(
name
this
.
getCommand
(
name
)
)
;
}
register
:
function
(
name
command
)
{
this
.
_registeredCommands
.
set
(
name
command
)
;
}
unregister
:
function
(
name
)
{
this
.
_registeredCommands
.
delete
(
name
)
;
if
(
this
.
_originalCommands
.
has
(
name
)
)
{
this
.
register
(
name
this
.
_originalCommands
.
get
(
name
)
)
;
}
}
getCommand
:
function
(
name
)
{
return
this
.
_registeredCommands
.
get
(
name
)
;
}
hasCommand
:
function
(
name
)
{
return
this
.
_registeredCommands
.
has
(
name
)
;
}
}
;
exports
.
WebConsoleCommands
=
WebConsoleCommands
;
WebConsoleCommands
.
_registerOriginal
(
"
"
function
(
owner
selector
)
{
return
owner
.
window
.
document
.
querySelector
(
selector
)
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
"
function
(
owner
selector
)
{
let
nodes
=
owner
.
window
.
document
.
querySelectorAll
(
selector
)
;
let
result
=
new
owner
.
window
.
Array
(
)
;
for
(
let
i
=
0
;
i
<
nodes
.
length
;
i
+
+
)
{
result
.
push
(
nodes
[
i
]
)
;
}
return
result
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
_
"
{
get
:
function
(
owner
)
{
return
owner
.
consoleActor
.
getLastConsoleInputEvaluation
(
)
;
}
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
x
"
function
(
owner
xPath
context
)
{
let
nodes
=
new
owner
.
window
.
Array
(
)
;
let
doc
=
owner
.
window
.
document
;
context
=
context
|
|
doc
;
let
results
=
doc
.
evaluate
(
xPath
context
null
Ci
.
nsIDOMXPathResult
.
ANY_TYPE
null
)
;
let
node
;
while
(
(
node
=
results
.
iterateNext
(
)
)
)
{
nodes
.
push
(
node
)
;
}
return
nodes
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
0
"
{
get
:
function
(
owner
)
{
return
owner
.
makeDebuggeeValue
(
owner
.
selectedNode
)
;
}
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
clear
"
function
(
owner
)
{
owner
.
helperResult
=
{
type
:
"
clearOutput
"
}
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
clearHistory
"
function
(
owner
)
{
owner
.
helperResult
=
{
type
:
"
clearHistory
"
}
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
keys
"
function
(
owner
object
)
{
return
Cu
.
cloneInto
(
Object
.
keys
(
Cu
.
waiveXrays
(
object
)
)
owner
.
window
)
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
values
"
function
(
owner
object
)
{
let
values
=
[
]
;
let
waived
=
Cu
.
waiveXrays
(
object
)
;
let
names
=
Object
.
getOwnPropertyNames
(
waived
)
;
for
(
let
name
of
names
)
{
values
.
push
(
waived
[
name
]
)
;
}
return
Cu
.
cloneInto
(
values
owner
.
window
)
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
help
"
function
(
owner
)
{
owner
.
helperResult
=
{
type
:
"
help
"
}
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
cd
"
function
(
owner
window
)
{
if
(
!
window
)
{
owner
.
consoleActor
.
evalWindow
=
null
;
owner
.
helperResult
=
{
type
:
"
cd
"
}
;
return
;
}
if
(
typeof
window
=
=
"
string
"
)
{
window
=
owner
.
window
.
document
.
querySelector
(
window
)
;
}
if
(
window
instanceof
Ci
.
nsIDOMElement
&
&
window
.
contentWindow
)
{
window
=
window
.
contentWindow
;
}
if
(
!
(
window
instanceof
Ci
.
nsIDOMWindow
)
)
{
owner
.
helperResult
=
{
type
:
"
error
"
message
:
"
cdFunctionInvalidArgument
"
}
;
return
;
}
owner
.
consoleActor
.
evalWindow
=
window
;
owner
.
helperResult
=
{
type
:
"
cd
"
}
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
inspect
"
function
(
owner
object
)
{
let
dbgObj
=
owner
.
makeDebuggeeValue
(
object
)
;
let
grip
=
owner
.
createValueGrip
(
dbgObj
)
;
owner
.
helperResult
=
{
type
:
"
inspectObject
"
input
:
owner
.
evalInput
object
:
grip
}
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
pprint
"
function
(
owner
object
)
{
if
(
object
=
=
=
null
|
|
object
=
=
=
undefined
|
|
object
=
=
=
true
|
|
object
=
=
=
false
)
{
owner
.
helperResult
=
{
type
:
"
error
"
message
:
"
helperFuncUnsupportedTypeError
"
}
;
return
null
;
}
owner
.
helperResult
=
{
rawOutput
:
true
}
;
if
(
typeof
object
=
=
"
function
"
)
{
return
object
+
"
\
n
"
;
}
let
output
=
[
]
;
let
obj
=
object
;
for
(
let
name
in
obj
)
{
let
desc
=
WebConsoleUtils
.
getPropertyDescriptor
(
obj
name
)
|
|
{
}
;
if
(
desc
.
get
|
|
desc
.
set
)
{
let
getGrip
=
VariablesView
.
getGrip
(
desc
.
get
)
;
let
setGrip
=
VariablesView
.
getGrip
(
desc
.
set
)
;
let
getString
=
VariablesView
.
getString
(
getGrip
)
;
let
setString
=
VariablesView
.
getString
(
setGrip
)
;
output
.
push
(
name
+
"
:
"
"
get
:
"
+
getString
"
set
:
"
+
setString
)
;
}
else
{
let
valueGrip
=
VariablesView
.
getGrip
(
obj
[
name
]
)
;
let
valueString
=
VariablesView
.
getString
(
valueGrip
)
;
output
.
push
(
name
+
"
:
"
+
valueString
)
;
}
}
return
"
"
+
output
.
join
(
"
\
n
"
)
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
print
"
function
(
owner
value
)
{
owner
.
helperResult
=
{
rawOutput
:
true
}
;
if
(
typeof
value
=
=
=
"
symbol
"
)
{
return
Symbol
.
prototype
.
toString
.
call
(
value
)
;
}
return
String
(
Cu
.
waiveXrays
(
value
)
)
;
}
)
;
WebConsoleCommands
.
_registerOriginal
(
"
copy
"
function
(
owner
value
)
{
let
payload
;
try
{
if
(
value
instanceof
Ci
.
nsIDOMElement
)
{
payload
=
value
.
outerHTML
;
}
else
if
(
typeof
value
=
=
"
string
"
)
{
payload
=
value
;
}
else
{
payload
=
JSON
.
stringify
(
value
null
"
"
)
;
}
}
catch
(
ex
)
{
payload
=
"
/
*
"
+
ex
+
"
*
/
"
;
}
owner
.
helperResult
=
{
type
:
"
copyValueToClipboard
"
value
:
payload
}
;
}
)
;
function
addWebConsoleCommands
(
owner
)
{
let
commands
=
isWorker
?
[
]
:
WebConsoleCommands
.
_registeredCommands
;
if
(
!
owner
)
{
throw
new
Error
(
"
The
owner
is
required
"
)
;
}
for
(
let
[
name
command
]
of
commands
)
{
if
(
typeof
command
=
=
=
"
function
"
)
{
owner
.
sandbox
[
name
]
=
command
.
bind
(
undefined
owner
)
;
}
else
if
(
typeof
command
=
=
=
"
object
"
)
{
let
clone
=
Object
.
assign
(
{
}
command
{
enumerable
:
true
configurable
:
true
}
)
;
if
(
typeof
command
.
get
=
=
=
"
function
"
)
{
clone
.
get
=
command
.
get
.
bind
(
undefined
owner
)
;
}
if
(
typeof
command
.
set
=
=
=
"
function
"
)
{
clone
.
set
=
command
.
set
.
bind
(
undefined
owner
)
;
}
Object
.
defineProperty
(
owner
.
sandbox
name
clone
)
;
}
}
}
exports
.
addWebConsoleCommands
=
addWebConsoleCommands
;
