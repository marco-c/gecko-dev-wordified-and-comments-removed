"
use
strict
"
;
const
{
Cc
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
loader
.
lazyGetter
(
this
"
ppmm
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
parentprocessmessagemanager
;
1
"
]
.
getService
(
)
;
}
)
;
function
ProcessActorList
(
)
{
this
.
_actors
=
new
Map
(
)
;
this
.
_onListChanged
=
null
;
this
.
_mustNotify
=
false
;
this
.
_hasObserver
=
false
;
}
ProcessActorList
.
prototype
=
{
getList
:
function
(
)
{
const
processes
=
[
]
;
for
(
let
i
=
0
;
i
<
ppmm
.
childCount
;
i
+
+
)
{
const
mm
=
ppmm
.
getChildAt
(
i
)
;
processes
.
push
(
{
id
:
mm
.
isInProcess
?
0
:
mm
.
osPid
parent
:
mm
.
isInProcess
tabCount
:
undefined
}
)
;
}
this
.
_mustNotify
=
true
;
this
.
_checkListening
(
)
;
return
processes
;
}
get
onListChanged
(
)
{
return
this
.
_onListChanged
;
}
set
onListChanged
(
onListChanged
)
{
if
(
typeof
onListChanged
!
=
=
"
function
"
&
&
onListChanged
!
=
=
null
)
{
throw
new
Error
(
"
onListChanged
must
be
either
a
function
or
null
.
"
)
;
}
if
(
onListChanged
=
=
=
this
.
_onListChanged
)
{
return
;
}
this
.
_onListChanged
=
onListChanged
;
this
.
_checkListening
(
)
;
}
_checkListening
:
function
(
)
{
if
(
this
.
_onListChanged
!
=
=
null
&
&
this
.
_mustNotify
)
{
if
(
!
this
.
_hasObserver
)
{
Services
.
obs
.
addObserver
(
this
"
ipc
:
content
-
created
"
)
;
Services
.
obs
.
addObserver
(
this
"
ipc
:
content
-
shutdown
"
)
;
this
.
_hasObserver
=
true
;
}
}
else
if
(
this
.
_hasObserver
)
{
Services
.
obs
.
removeObserver
(
this
"
ipc
:
content
-
created
"
)
;
Services
.
obs
.
removeObserver
(
this
"
ipc
:
content
-
shutdown
"
)
;
this
.
_hasObserver
=
false
;
}
}
observe
(
)
{
if
(
this
.
_mustNotify
)
{
this
.
_onListChanged
(
)
;
this
.
_mustNotify
=
false
;
}
}
}
;
exports
.
ProcessActorList
=
ProcessActorList
;
