"
use
strict
"
;
const
{
ActorClassWithSpec
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
blackboxingSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
blackboxing
.
js
"
)
;
const
{
SessionDataHelpers
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
watcher
/
SessionDataHelpers
.
jsm
"
)
;
const
{
SUPPORTED_DATA
}
=
SessionDataHelpers
;
const
{
BLACKBOXING
}
=
SUPPORTED_DATA
;
const
BlackboxingActor
=
ActorClassWithSpec
(
blackboxingSpec
{
initialize
(
watcherActor
)
{
this
.
watcherActor
=
watcherActor
;
Actor
.
prototype
.
initialize
.
call
(
this
this
.
watcherActor
.
conn
)
;
}
destroy
(
conn
)
{
Actor
.
prototype
.
destroy
.
call
(
this
conn
)
;
}
blackbox
(
url
ranges
)
{
if
(
!
ranges
.
length
)
{
return
this
.
watcherActor
.
addDataEntry
(
BLACKBOXING
[
{
url
range
:
null
}
]
)
;
}
return
this
.
watcherActor
.
addDataEntry
(
BLACKBOXING
ranges
.
map
(
range
=
>
{
return
{
url
range
}
;
}
)
)
;
}
unblackbox
(
url
ranges
)
{
if
(
!
ranges
.
length
)
{
const
existingRanges
=
(
this
.
watcherActor
.
getSessionDataForType
(
BLACKBOXING
)
|
|
[
]
)
.
filter
(
entry
=
>
entry
.
url
=
=
url
)
;
return
this
.
watcherActor
.
removeDataEntry
(
BLACKBOXING
existingRanges
)
;
}
return
this
.
watcherActor
.
removeDataEntry
(
BLACKBOXING
ranges
.
map
(
range
=
>
{
return
{
url
range
}
;
}
)
)
;
}
}
)
;
exports
.
BlackboxingActor
=
BlackboxingActor
;
