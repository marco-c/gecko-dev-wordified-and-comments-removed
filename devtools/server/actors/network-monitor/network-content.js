"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
networkContentSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
network
-
content
.
js
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
NetUtil
:
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
sys
.
mjs
"
NetworkUtils
:
"
resource
:
/
/
devtools
/
shared
/
network
-
observer
/
NetworkUtils
.
sys
.
mjs
"
}
)
;
loader
.
lazyRequireGetter
(
this
"
WebConsoleUtils
"
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
/
utils
.
js
"
true
)
;
const
{
TYPES
:
{
NETWORK_EVENT_STACKTRACE
}
getResourceWatcher
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
resources
/
index
.
js
"
)
;
class
NetworkContentActor
extends
Actor
{
constructor
(
conn
targetActor
)
{
super
(
conn
networkContentSpec
)
;
this
.
targetActor
=
targetActor
;
}
get
networkEventStackTraceWatcher
(
)
{
return
getResourceWatcher
(
this
.
targetActor
NETWORK_EVENT_STACKTRACE
)
;
}
async
sendHTTPRequest
(
request
)
{
return
new
Promise
(
resolve
=
>
{
const
{
url
method
headers
body
cause
}
=
request
;
const
doc
=
this
.
targetActor
.
window
.
document
;
const
channel
=
lazy
.
NetUtil
.
newChannel
(
{
uri
:
lazy
.
NetUtil
.
newURI
(
url
)
loadingNode
:
doc
securityFlags
:
Ci
.
nsILoadInfo
.
SEC_ALLOW_CROSS_ORIGIN_INHERITS_SEC_CONTEXT
contentPolicyType
:
lazy
.
NetworkUtils
.
stringToCauseType
(
cause
.
type
)
|
|
Ci
.
nsIContentPolicy
.
TYPE_OTHER
}
)
;
channel
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
channel
.
loadGroup
=
doc
.
documentLoadGroup
;
channel
.
loadFlags
|
=
Ci
.
nsIRequest
.
LOAD_BYPASS_CACHE
|
Ci
.
nsIRequest
.
INHIBIT_CACHING
|
Ci
.
nsIRequest
.
LOAD_ANONYMOUS
;
if
(
method
=
=
"
CONNECT
"
)
{
throw
new
Error
(
"
The
CONNECT
method
is
restricted
and
cannot
be
sent
by
devtools
"
)
;
}
channel
.
requestMethod
=
method
;
if
(
headers
)
{
for
(
const
{
name
value
}
of
headers
)
{
if
(
name
.
toLowerCase
(
)
=
=
"
referer
"
)
{
channel
.
setNewReferrerInfo
(
value
Ci
.
nsIReferrerInfo
.
UNSAFE_URL
true
)
;
}
else
{
channel
.
setRequestHeader
(
name
value
false
)
;
}
}
}
if
(
body
)
{
channel
.
QueryInterface
(
Ci
.
nsIUploadChannel2
)
;
const
bodyStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
bodyStream
.
setData
(
body
body
.
length
)
;
channel
.
explicitSetUploadStream
(
bodyStream
null
-
1
method
false
)
;
}
lazy
.
NetUtil
.
asyncFetch
(
channel
(
)
=
>
resolve
(
{
channelId
:
channel
.
channelId
}
)
)
;
}
)
;
}
getStackTrace
(
resourceId
)
{
if
(
!
this
.
networkEventStackTraceWatcher
)
{
throw
new
Error
(
"
Not
listening
for
network
event
stacktraces
"
)
;
}
const
stacktrace
=
this
.
networkEventStackTraceWatcher
.
getStackTrace
(
resourceId
)
;
return
WebConsoleUtils
.
removeFramesAboveDebuggerEval
(
stacktrace
)
;
}
}
exports
.
NetworkContentActor
=
NetworkContentActor
;
