"
use
strict
"
;
const
{
ActorClassWithSpec
Actor
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
networkParentSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
network
-
parent
"
)
;
const
{
TYPES
:
{
NETWORK_EVENT
}
getResourceWatcher
}
=
require
(
"
devtools
/
server
/
actors
/
resources
/
index
"
)
;
const
NetworkParentActor
=
ActorClassWithSpec
(
networkParentSpec
{
initialize
(
watcherActor
)
{
this
.
watcherActor
=
watcherActor
;
Actor
.
prototype
.
initialize
.
call
(
this
this
.
watcherActor
.
conn
)
;
}
destroy
(
conn
)
{
Actor
.
prototype
.
destroy
.
call
(
this
conn
)
;
}
get
networkEventWatcher
(
)
{
return
getResourceWatcher
(
this
.
watcherActor
NETWORK_EVENT
)
;
}
setBlockedUrls
(
urls
)
{
if
(
!
this
.
networkEventWatcher
)
{
throw
new
Error
(
"
Not
listening
for
network
events
"
)
;
}
this
.
networkEventWatcher
.
setBlockedUrls
(
urls
)
;
return
{
}
;
}
getBlockedUrls
(
)
{
if
(
!
this
.
networkEventWatcher
)
{
throw
new
Error
(
"
Not
listening
for
network
events
"
)
;
}
return
this
.
networkEventWatcher
.
getBlockedUrls
(
)
;
}
}
)
;
exports
.
NetworkParentActor
=
NetworkParentActor
;
