"
use
strict
"
;
const
{
Actor
ActorClassWithSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
networkMonitorSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
network
-
monitor
.
js
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
NetworkObserver
:
"
resource
:
/
/
devtools
/
shared
/
network
-
observer
/
NetworkObserver
.
sys
.
mjs
"
NetworkUtils
:
"
resource
:
/
/
devtools
/
shared
/
network
-
observer
/
NetworkUtils
.
sys
.
mjs
"
}
)
;
loader
.
lazyRequireGetter
(
this
"
NetworkEventActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
network
-
monitor
/
network
-
event
.
js
"
true
)
;
const
NetworkMonitorActor
=
ActorClassWithSpec
(
networkMonitorSpec
{
initialize
(
conn
channelFilters
parentID
messageManager
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
_netEvents
=
new
Map
(
)
;
this
.
_networkEventActorsByURL
=
new
Map
(
)
;
this
.
channelFilters
=
channelFilters
;
this
.
parentID
=
parentID
;
this
.
messageManager
=
messageManager
;
this
.
onNetworkEvent
=
this
.
onNetworkEvent
.
bind
(
this
)
;
this
.
shouldIgnoreChannel
=
this
.
shouldIgnoreChannel
.
bind
(
this
)
;
this
.
observer
=
new
lazy
.
NetworkObserver
(
this
.
shouldIgnoreChannel
this
.
onNetworkEvent
)
;
this
.
stackTraces
=
new
Set
(
)
;
this
.
lastFrames
=
new
Map
(
)
;
this
.
onStackTraceAvailable
=
this
.
onStackTraceAvailable
.
bind
(
this
)
;
this
.
onSetPreference
=
this
.
onSetPreference
.
bind
(
this
)
;
this
.
onBlockRequest
=
this
.
onBlockRequest
.
bind
(
this
)
;
this
.
onUnblockRequest
=
this
.
onUnblockRequest
.
bind
(
this
)
;
this
.
onSetBlockedUrls
=
this
.
onSetBlockedUrls
.
bind
(
this
)
;
this
.
onGetBlockedUrls
=
this
.
onGetBlockedUrls
.
bind
(
this
)
;
this
.
onGetNetworkEventActor
=
this
.
onGetNetworkEventActor
.
bind
(
this
)
;
this
.
onDestroyMessage
=
this
.
onDestroyMessage
.
bind
(
this
)
;
this
.
startListening
(
)
;
}
onDestroyMessage
(
{
data
}
)
{
if
(
data
.
actorID
=
=
this
.
parentID
)
{
this
.
destroy
(
)
;
}
}
startListening
(
)
{
this
.
messageManager
.
addMessageListener
(
"
debug
:
request
-
stack
-
available
"
this
.
onStackTraceAvailable
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
netmonitor
-
preference
"
this
.
onSetPreference
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
block
-
request
"
this
.
onBlockRequest
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
unblock
-
request
"
this
.
onUnblockRequest
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
set
-
blocked
-
urls
"
this
.
onSetBlockedUrls
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
get
-
blocked
-
urls
"
this
.
onGetBlockedUrls
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
get
-
network
-
event
-
actor
:
request
"
this
.
onGetNetworkEventActor
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
destroy
-
network
-
monitor
"
this
.
onDestroyMessage
)
;
}
stopListening
(
)
{
this
.
messageManager
.
removeMessageListener
(
"
debug
:
request
-
stack
-
available
"
this
.
onStackTraceAvailable
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
netmonitor
-
preference
"
this
.
onSetPreference
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
block
-
request
"
this
.
onBlockRequest
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
unblock
-
request
"
this
.
onUnblockRequest
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
set
-
blocked
-
urls
"
this
.
onSetBlockedUrls
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
get
-
blocked
-
urls
"
this
.
onGetBlockedUrls
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
get
-
network
-
event
-
actor
:
request
"
this
.
onGetNetworkEventActor
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
destroy
-
network
-
monitor
"
this
.
onDestroyMessage
)
;
}
destroy
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
if
(
this
.
observer
)
{
this
.
observer
.
destroy
(
)
;
this
.
observer
=
null
;
}
this
.
stackTraces
.
clear
(
)
;
this
.
lastFrames
.
clear
(
)
;
if
(
this
.
messageManager
)
{
this
.
stopListening
(
)
;
this
.
messageManager
=
null
;
}
}
onStackTraceAvailable
(
msg
)
{
const
{
channelId
}
=
msg
.
data
;
if
(
!
msg
.
data
.
stacktrace
)
{
this
.
lastFrames
.
delete
(
channelId
)
;
this
.
stackTraces
.
delete
(
channelId
)
;
}
else
{
if
(
msg
.
data
.
lastFrame
)
{
this
.
lastFrames
.
set
(
channelId
msg
.
data
.
lastFrame
)
;
}
this
.
stackTraces
.
add
(
channelId
)
;
}
}
onSetPreference
(
{
data
}
)
{
if
(
"
saveRequestAndResponseBodies
"
in
data
)
{
this
.
observer
.
setSaveRequestAndResponseBodies
(
data
.
saveRequestAndResponseBodies
)
;
}
if
(
"
throttleData
"
in
data
)
{
this
.
observer
.
setThrottleData
(
data
.
throttleData
)
;
}
}
onBlockRequest
(
{
data
}
)
{
const
{
filter
}
=
data
;
this
.
observer
.
blockRequest
(
filter
)
;
this
.
messageManager
.
sendAsyncMessage
(
"
debug
:
block
-
request
:
response
"
)
;
}
onUnblockRequest
(
{
data
}
)
{
const
{
filter
}
=
data
;
this
.
observer
.
unblockRequest
(
filter
)
;
this
.
messageManager
.
sendAsyncMessage
(
"
debug
:
unblock
-
request
:
response
"
)
;
}
onSetBlockedUrls
(
{
data
}
)
{
const
{
urls
}
=
data
;
this
.
observer
.
setBlockedUrls
(
urls
)
;
this
.
messageManager
.
sendAsyncMessage
(
"
debug
:
set
-
blocked
-
urls
:
response
"
)
;
}
onGetBlockedUrls
(
)
{
const
urls
=
this
.
observer
.
getBlockedUrls
(
)
;
this
.
messageManager
.
sendAsyncMessage
(
"
debug
:
get
-
blocked
-
urls
:
response
"
urls
)
;
}
onGetNetworkEventActor
(
{
data
}
)
{
const
actor
=
this
.
getNetworkEventActor
(
data
.
channelId
)
;
this
.
messageManager
.
sendAsyncMessage
(
"
debug
:
get
-
network
-
event
-
actor
:
response
"
{
channelId
:
data
.
channelId
actor
:
actor
.
form
(
)
}
)
;
}
getNetworkEventActor
(
channelId
)
{
let
actor
=
this
.
_netEvents
.
get
(
channelId
)
;
if
(
actor
)
{
return
actor
;
}
actor
=
new
NetworkEventActor
(
this
)
;
this
.
manage
(
actor
)
;
this
.
_netEvents
.
set
(
channelId
actor
)
;
return
actor
;
}
onNetworkEvent
(
event
)
{
const
{
channelId
cause
url
}
=
event
;
const
actor
=
this
.
getNetworkEventActor
(
channelId
)
;
this
.
_netEvents
.
set
(
channelId
actor
)
;
let
id
;
if
(
cause
.
type
=
=
"
websocket
"
)
{
id
=
url
.
replace
(
/
^
http
/
"
ws
"
)
;
}
else
{
id
=
channelId
;
}
event
.
cause
.
stacktrace
=
this
.
stackTraces
.
has
(
id
)
;
if
(
event
.
cause
.
stacktrace
)
{
this
.
stackTraces
.
delete
(
id
)
;
}
if
(
this
.
lastFrames
.
has
(
id
)
)
{
event
.
cause
.
lastFrame
=
this
.
lastFrames
.
get
(
id
)
;
this
.
lastFrames
.
delete
(
id
)
;
}
actor
.
init
(
event
)
;
this
.
_networkEventActorsByURL
.
set
(
actor
.
_request
.
url
actor
)
;
this
.
conn
.
sendActorEvent
(
this
.
parentID
"
networkEvent
"
{
eventActor
:
actor
.
form
(
)
}
)
;
return
actor
;
}
shouldIgnoreChannel
(
channel
)
{
return
!
lazy
.
NetworkUtils
.
matchRequest
(
channel
this
.
channelFilters
)
;
}
}
)
;
exports
.
NetworkMonitorActor
=
NetworkMonitorActor
;
