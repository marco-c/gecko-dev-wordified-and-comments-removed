"
use
strict
"
;
const
{
Ci
Cu
Cc
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
ChromeActor
}
=
require
(
"
.
/
chrome
"
)
;
const
makeDebugger
=
require
(
"
.
/
utils
/
make
-
debugger
"
)
;
loader
.
lazyRequireGetter
(
this
"
mapURIToAddonID
"
"
devtools
/
server
/
actors
/
utils
/
map
-
uri
-
to
-
addon
-
id
"
)
;
loader
.
lazyRequireGetter
(
this
"
unwrapDebuggerObjectGlobal
"
"
devtools
/
server
/
actors
/
script
"
true
)
;
const
FALLBACK_DOC_MESSAGE
=
"
Your
addon
does
not
have
any
document
opened
yet
.
"
;
function
WebExtensionChildActor
(
conn
chromeGlobal
prefix
addonId
)
{
ChromeActor
.
call
(
this
conn
)
;
this
.
_chromeGlobal
=
chromeGlobal
;
this
.
_prefix
=
prefix
;
this
.
id
=
addonId
;
this
.
_allowSource
=
this
.
_allowSource
.
bind
(
this
)
;
this
.
_onParentExit
=
this
.
_onParentExit
.
bind
(
this
)
;
this
.
_chromeGlobal
.
addMessageListener
(
"
debug
:
webext_parent_exit
"
this
.
_onParentExit
)
;
this
.
consoleAPIListenerOptions
=
{
addonId
:
this
.
id
}
;
this
.
aps
=
Cc
[
"
mozilla
.
org
/
addons
/
policy
-
service
;
1
"
]
.
getService
(
Ci
.
nsIAddonPolicyService
)
;
this
.
makeDebugger
=
makeDebugger
.
bind
(
null
{
findDebuggees
:
dbg
=
>
{
return
dbg
.
findAllGlobals
(
)
.
filter
(
this
.
_shouldAddNewGlobalAsDebuggee
)
;
}
shouldAddNewGlobalAsDebuggee
:
this
.
_shouldAddNewGlobalAsDebuggee
.
bind
(
this
)
}
)
;
let
extensionWindow
=
this
.
_searchForExtensionWindow
(
)
;
if
(
extensionWindow
)
{
this
.
_setWindow
(
extensionWindow
)
;
}
}
exports
.
WebExtensionChildActor
=
WebExtensionChildActor
;
WebExtensionChildActor
.
prototype
=
Object
.
create
(
ChromeActor
.
prototype
)
;
WebExtensionChildActor
.
prototype
.
actorPrefix
=
"
webExtension
"
;
WebExtensionChildActor
.
prototype
.
constructor
=
WebExtensionChildActor
;
WebExtensionChildActor
.
prototype
.
isRootActor
=
true
;
WebExtensionChildActor
.
prototype
.
exit
=
function
(
)
{
if
(
this
.
_chromeGlobal
)
{
let
chromeGlobal
=
this
.
_chromeGlobal
;
this
.
_chromeGlobal
=
null
;
chromeGlobal
.
removeMessageListener
(
"
debug
:
webext_parent_exit
"
this
.
_onParentExit
)
;
chromeGlobal
.
sendAsyncMessage
(
"
debug
:
webext_child_exit
"
{
actor
:
this
.
actorID
}
)
;
}
this
.
addon
=
null
;
this
.
id
=
null
;
return
ChromeActor
.
prototype
.
exit
.
apply
(
this
)
;
}
;
WebExtensionChildActor
.
prototype
.
_createFallbackWindow
=
function
(
)
{
if
(
this
.
fallbackWindow
)
{
return
;
}
this
.
fallbackWebNav
=
Services
.
appShell
.
createWindowlessBrowser
(
true
)
;
this
.
fallbackWindow
=
this
.
fallbackWebNav
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
this
.
fallbackWindow
.
document
.
body
.
innerText
=
FALLBACK_DOC_MESSAGE
;
}
;
WebExtensionChildActor
.
prototype
.
_destroyFallbackWindow
=
function
(
)
{
if
(
this
.
fallbackWebNav
)
{
this
.
fallbackWebNav
.
loadURI
(
"
about
:
blank
"
0
null
null
null
)
;
this
.
fallbackWebNav
.
close
(
)
;
this
.
fallbackWebNav
=
null
;
this
.
fallbackWindow
=
null
;
}
}
;
WebExtensionChildActor
.
prototype
.
_searchForExtensionWindow
=
function
(
)
{
let
e
=
Services
.
ww
.
getWindowEnumerator
(
null
)
;
while
(
e
.
hasMoreElements
(
)
)
{
let
window
=
e
.
getNext
(
)
;
if
(
window
.
document
.
nodePrincipal
.
addonId
=
=
this
.
id
)
{
return
window
;
}
}
return
undefined
;
}
;
WebExtensionChildActor
.
prototype
.
_onDocShellDestroy
=
function
(
docShell
)
{
this
.
_unwatchDocShell
(
docShell
)
;
let
webProgress
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
this
.
_notifyDocShellDestroy
(
webProgress
)
;
if
(
this
.
attached
&
&
docShell
=
=
this
.
docShell
)
{
this
.
_createFallbackWindow
(
)
;
this
.
_changeTopLevelDocument
(
this
.
fallbackWindow
)
;
}
}
;
WebExtensionChildActor
.
prototype
.
_onNewExtensionWindow
=
function
(
window
)
{
if
(
!
this
.
window
|
|
this
.
window
=
=
=
this
.
fallbackWindow
)
{
this
.
_changeTopLevelDocument
(
window
)
;
}
}
;
WebExtensionChildActor
.
prototype
.
_attach
=
function
(
)
{
if
(
!
this
.
window
|
|
this
.
window
.
document
.
nodePrincipal
.
addonId
!
=
=
this
.
id
)
{
let
extensionWindow
=
this
.
_searchForExtensionWindow
(
)
;
if
(
!
extensionWindow
)
{
this
.
_createFallbackWindow
(
)
;
this
.
_setWindow
(
this
.
fallbackWindow
)
;
}
else
{
this
.
_setWindow
(
extensionWindow
)
;
}
}
ChromeActor
.
prototype
.
_attach
.
apply
(
this
)
;
}
;
WebExtensionChildActor
.
prototype
.
_detach
=
function
(
)
{
ChromeActor
.
prototype
.
_detach
.
apply
(
this
)
;
this
.
_destroyFallbackWindow
(
)
;
}
;
WebExtensionChildActor
.
prototype
.
_docShellToWindow
=
function
(
docShell
)
{
const
baseWindowDetails
=
ChromeActor
.
prototype
.
_docShellToWindow
.
call
(
this
docShell
)
;
let
webProgress
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
let
window
=
webProgress
.
DOMWindow
;
let
addonID
=
window
.
document
.
nodePrincipal
.
addonId
;
let
sameTypeRootAddonID
=
docShell
.
QueryInterface
(
Ci
.
nsIDocShellTreeItem
)
.
sameTypeRootTreeItem
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
.
document
.
nodePrincipal
.
addonId
;
return
Object
.
assign
(
baseWindowDetails
{
addonID
sameTypeRootAddonID
}
)
;
}
;
WebExtensionChildActor
.
prototype
.
_docShellsToWindows
=
function
(
docshells
)
{
return
ChromeActor
.
prototype
.
_docShellsToWindows
.
call
(
this
docshells
)
.
filter
(
windowDetails
=
>
{
return
windowDetails
.
addonID
=
=
=
this
.
id
|
|
windowDetails
.
sameTypeRootAddonID
=
=
=
this
.
id
;
}
)
;
}
;
WebExtensionChildActor
.
prototype
.
isExtensionWindow
=
function
(
window
)
{
return
window
.
document
.
nodePrincipal
.
addonId
=
=
this
.
id
;
}
;
WebExtensionChildActor
.
prototype
.
isExtensionWindowDescendent
=
function
(
window
)
{
let
docShell
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
;
let
rootWin
=
docShell
.
sameTypeRootTreeItem
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
return
this
.
isExtensionWindow
(
rootWin
)
;
}
;
WebExtensionChildActor
.
prototype
.
_allowSource
=
function
(
source
)
{
if
(
source
.
element
)
{
let
domEl
=
unwrapDebuggerObjectGlobal
(
source
.
element
)
;
return
(
this
.
isExtensionWindow
(
domEl
.
ownerGlobal
)
|
|
this
.
isExtensionWindowDescendent
(
domEl
.
ownerGlobal
)
)
;
}
let
url
=
source
.
url
.
split
(
"
-
>
"
)
.
pop
(
)
;
if
(
url
=
=
=
"
debugger
eval
code
"
)
{
return
false
;
}
let
uri
;
try
{
uri
=
Services
.
io
.
newURI
(
url
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
Unexpected
invalid
url
:
{
url
}
)
;
return
false
;
}
if
(
[
"
resource
"
"
chrome
"
"
file
"
]
.
includes
(
uri
.
scheme
)
)
{
return
false
;
}
try
{
let
addonID
=
this
.
aps
.
extensionURIToAddonId
(
uri
)
;
return
addonID
=
=
this
.
id
;
}
catch
(
err
)
{
return
false
;
}
}
;
WebExtensionChildActor
.
prototype
.
_shouldAddNewGlobalAsDebuggee
=
function
(
newGlobal
)
{
const
global
=
unwrapDebuggerObjectGlobal
(
newGlobal
)
;
if
(
global
instanceof
Ci
.
nsIDOMWindow
)
{
if
(
global
.
document
instanceof
Ci
.
nsIDOMXULDocument
)
{
return
false
;
}
if
(
global
.
document
.
ownerGlobal
&
&
this
.
isExtensionWindow
(
global
)
)
{
this
.
_onNewExtensionWindow
(
global
.
document
.
ownerGlobal
)
;
}
return
global
.
document
.
ownerGlobal
&
&
this
.
isExtensionWindowDescendent
(
global
.
document
.
ownerGlobal
)
;
}
try
{
let
metadata
=
Cu
.
getSandboxMetadata
(
global
)
;
if
(
metadata
)
{
return
metadata
.
addonID
=
=
=
this
.
id
;
}
}
catch
(
e
)
{
}
return
false
;
}
;
WebExtensionChildActor
.
prototype
.
_onParentExit
=
function
(
msg
)
{
if
(
msg
.
json
.
actor
!
=
=
this
.
actorID
)
{
return
;
}
this
.
exit
(
)
;
}
;
