"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
styleRuleSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
style
-
rule
.
js
"
)
;
const
{
getCSSLexer
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
css
/
lexer
.
js
"
)
;
const
TrackChangeEmitter
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
track
-
change
-
emitter
.
js
"
)
;
const
{
getRuleText
getTextAtLineColumn
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
style
-
utils
.
js
"
)
;
const
{
style
:
{
ELEMENT_STYLE
}
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
constants
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
CssLogic
"
"
resource
:
/
/
devtools
/
server
/
actors
/
inspector
/
css
-
logic
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
SharedCssLogic
"
"
resource
:
/
/
devtools
/
shared
/
inspector
/
css
-
logic
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
isCssPropertyKnown
"
"
resource
:
/
/
devtools
/
server
/
actors
/
css
-
properties
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
isPropertyUsed
"
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
inactive
-
property
-
helper
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
parseNamedDeclarations
"
"
resource
:
/
/
devtools
/
shared
/
css
/
parsing
-
utils
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
[
"
UPDATE_PRESERVING_RULES
"
"
UPDATE_GENERAL
"
]
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
stylesheets
-
manager
.
js
"
true
)
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
class
StyleRuleActor
extends
Actor
{
constructor
(
pageStyle
item
)
{
super
(
pageStyle
.
conn
styleRuleSpec
)
;
this
.
pageStyle
=
pageStyle
;
this
.
rawStyle
=
item
.
style
;
this
.
_parentSheet
=
null
;
this
.
_declarations
=
[
]
;
this
.
_pendingDeclarationChanges
=
[
]
;
if
(
CSSRule
.
isInstance
(
item
)
)
{
this
.
type
=
item
.
type
;
this
.
rawRule
=
item
;
this
.
_computeRuleIndex
(
)
;
if
(
this
.
#
isRuleSupported
(
)
&
&
this
.
rawRule
.
parentStyleSheet
)
{
this
.
line
=
InspectorUtils
.
getRelativeRuleLine
(
this
.
rawRule
)
;
this
.
column
=
InspectorUtils
.
getRuleColumn
(
this
.
rawRule
)
;
this
.
_parentSheet
=
this
.
rawRule
.
parentStyleSheet
;
}
}
else
{
this
.
type
=
ELEMENT_STYLE
;
this
.
rawNode
=
item
;
this
.
rawRule
=
{
style
:
item
.
style
toString
(
)
{
return
"
[
element
rule
"
+
this
.
style
+
"
]
"
;
}
}
;
}
}
destroy
(
)
{
if
(
!
this
.
rawStyle
)
{
return
;
}
super
.
destroy
(
)
;
this
.
rawStyle
=
null
;
this
.
pageStyle
=
null
;
this
.
rawNode
=
null
;
this
.
rawRule
=
null
;
this
.
_declarations
=
null
;
}
get
marshallPool
(
)
{
return
this
.
pageStyle
;
}
get
canSetRuleText
(
)
{
return
(
this
.
type
=
=
=
ELEMENT_STYLE
|
|
(
this
.
_parentSheet
&
&
!
InspectorUtils
.
hasRulesModifiedByCSSOM
(
this
.
_parentSheet
)
&
&
this
.
_parentSheet
.
href
!
=
=
"
about
:
PreferenceStyleSheet
"
)
)
;
}
get
ancestorRules
(
)
{
const
ancestors
=
[
]
;
let
rule
=
this
.
rawRule
;
while
(
rule
.
parentRule
)
{
ancestors
.
unshift
(
this
.
pageStyle
.
_styleRef
(
rule
.
parentRule
)
)
;
rule
=
rule
.
parentRule
;
}
return
ancestors
;
}
get
metadata
(
)
{
const
data
=
{
}
;
data
.
id
=
this
.
actorID
;
data
.
ancestors
=
this
.
ancestorRules
.
map
(
rule
=
>
{
const
ancestorData
=
{
id
:
rule
.
actorID
ruleIndex
:
rule
.
_ruleIndex
}
;
const
typeName
=
SharedCssLogic
.
getCSSAtRuleTypeName
(
rule
.
rawRule
)
;
if
(
typeName
)
{
ancestorData
.
typeName
=
typeName
;
}
if
(
rule
.
rawRule
.
conditionText
!
=
=
undefined
)
{
ancestorData
.
conditionText
=
rule
.
rawRule
.
conditionText
;
}
if
(
rule
.
rawRule
.
name
!
=
=
undefined
)
{
ancestorData
.
name
=
rule
.
rawRule
.
name
;
}
if
(
rule
.
rawRule
.
keyText
!
=
=
undefined
)
{
ancestorData
.
keyText
=
rule
.
rawRule
.
keyText
;
}
if
(
rule
.
rawRule
.
selectorText
!
=
=
undefined
)
{
ancestorData
.
selectorText
=
rule
.
rawRule
.
selectorText
;
}
return
ancestorData
;
}
)
;
if
(
this
.
type
=
=
=
ELEMENT_STYLE
&
&
this
.
rawNode
)
{
try
{
data
.
selector
=
SharedCssLogic
.
findCssSelector
(
this
.
rawNode
)
;
}
catch
(
err
)
{
}
data
.
source
=
{
type
:
"
element
"
href
:
this
.
rawNode
.
baseURI
index
:
data
.
selector
isFramed
:
this
.
rawNode
.
ownerGlobal
!
=
=
this
.
pageStyle
.
ownerWindow
}
;
const
nodeActor
=
this
.
pageStyle
.
walker
.
getNode
(
this
.
rawNode
)
;
if
(
nodeActor
)
{
data
.
source
.
id
=
nodeActor
.
actorID
;
}
data
.
ruleIndex
=
0
;
}
else
{
data
.
selector
=
this
.
type
=
=
=
CSSRule
.
KEYFRAME_RULE
?
this
.
rawRule
.
keyText
:
this
.
rawRule
.
selectorText
;
data
.
ruleIndex
=
this
.
_ruleIndex
;
const
sheet
=
this
.
_parentSheet
;
const
inspectorActor
=
this
.
pageStyle
.
inspector
;
const
resourceId
=
this
.
pageStyle
.
styleSheetsManager
.
getStyleSheetResourceId
(
sheet
)
;
const
styleSheetIndex
=
this
.
pageStyle
.
styleSheetsManager
.
getStyleSheetIndex
(
resourceId
)
;
data
.
source
=
{
type
:
sheet
.
href
?
"
stylesheet
"
:
"
inline
"
href
:
sheet
.
href
|
|
inspectorActor
.
window
.
location
.
toString
(
)
id
:
resourceId
index
:
styleSheetIndex
isFramed
:
inspectorActor
.
window
!
=
=
inspectorActor
.
window
.
top
}
;
}
return
data
;
}
getDocument
(
sheet
)
{
if
(
!
sheet
.
associatedDocument
)
{
throw
new
Error
(
"
Failed
trying
to
get
the
document
of
an
invalid
stylesheet
"
)
;
}
return
sheet
.
associatedDocument
;
}
toString
(
)
{
return
"
[
StyleRuleActor
for
"
+
this
.
rawRule
+
"
]
"
;
}
form
(
)
{
const
form
=
{
actor
:
this
.
actorID
type
:
this
.
type
line
:
this
.
line
|
|
undefined
column
:
this
.
column
traits
:
{
canSetRuleText
:
this
.
canSetRuleText
}
}
;
const
{
computeDesugaredSelector
ancestorData
}
=
this
.
_getAncestorDataForForm
(
)
;
form
.
ancestorData
=
ancestorData
;
if
(
this
.
_parentSheet
)
{
form
.
parentStyleSheet
=
this
.
pageStyle
.
styleSheetsManager
.
getStyleSheetResourceId
(
this
.
_parentSheet
)
;
}
form
.
authoredText
=
this
.
authoredText
;
switch
(
this
.
type
)
{
case
CSSRule
.
STYLE_RULE
:
form
.
selectors
=
CssLogic
.
getSelectors
(
this
.
rawRule
)
;
if
(
computeDesugaredSelector
)
{
form
.
desugaredSelectors
=
CssLogic
.
getSelectors
(
this
.
rawRule
true
)
;
}
form
.
cssText
=
this
.
rawStyle
.
cssText
|
|
"
"
;
break
;
case
ELEMENT_STYLE
:
const
doc
=
this
.
rawNode
.
ownerDocument
;
form
.
href
=
doc
.
location
?
doc
.
location
.
href
:
"
"
;
form
.
cssText
=
this
.
rawStyle
.
cssText
|
|
"
"
;
form
.
authoredText
=
this
.
rawNode
.
getAttribute
(
"
style
"
)
;
break
;
case
CSSRule
.
CHARSET_RULE
:
form
.
encoding
=
this
.
rawRule
.
encoding
;
break
;
case
CSSRule
.
IMPORT_RULE
:
form
.
href
=
this
.
rawRule
.
href
;
break
;
case
CSSRule
.
KEYFRAMES_RULE
:
form
.
cssText
=
this
.
rawRule
.
cssText
;
form
.
name
=
this
.
rawRule
.
name
;
break
;
case
CSSRule
.
KEYFRAME_RULE
:
form
.
cssText
=
this
.
rawStyle
.
cssText
|
|
"
"
;
form
.
keyText
=
this
.
rawRule
.
keyText
|
|
"
"
;
break
;
}
if
(
form
.
authoredText
|
|
form
.
cssText
)
{
const
cssText
=
typeof
form
.
authoredText
=
=
=
"
string
"
?
form
.
authoredText
:
form
.
cssText
;
const
declarations
=
parseNamedDeclarations
(
isCssPropertyKnown
cssText
true
)
;
const
el
=
this
.
pageStyle
.
selectedElement
;
const
style
=
this
.
pageStyle
.
cssLogic
.
computedStyle
;
const
userAgent
=
this
.
_parentSheet
&
&
SharedCssLogic
.
isAgentStylesheet
(
this
.
_parentSheet
)
;
const
chrome
=
(
(
)
=
>
{
if
(
!
this
.
_parentSheet
)
{
return
false
;
}
if
(
SharedCssLogic
.
isUserStylesheet
(
this
.
_parentSheet
)
)
{
return
true
;
}
if
(
this
.
_parentSheet
.
href
)
{
return
this
.
_parentSheet
.
href
.
startsWith
(
"
chrome
:
"
)
;
}
return
el
&
&
el
.
ownerDocument
.
documentURI
.
startsWith
(
"
chrome
:
"
)
;
}
)
(
)
;
const
quirks
=
!
userAgent
&
&
el
&
&
el
.
ownerDocument
.
compatMode
=
=
"
BackCompat
"
;
const
supportsOptions
=
{
userAgent
chrome
quirks
}
;
form
.
declarations
=
declarations
.
map
(
decl
=
>
{
decl
.
isValid
=
InspectorUtils
.
supports
(
{
decl
.
name
}
:
{
decl
.
value
}
supportsOptions
)
;
decl
.
isUsed
=
isPropertyUsed
(
el
style
this
.
rawRule
decl
.
name
)
;
decl
.
isNameValid
=
InspectorUtils
.
supports
(
{
decl
.
name
}
:
initial
supportsOptions
)
;
return
decl
;
}
)
;
this
.
_pendingDeclarationChanges
.
forEach
(
change
=
>
this
.
logDeclarationChange
(
change
declarations
this
.
_declarations
)
)
;
this
.
_pendingDeclarationChanges
=
[
]
;
this
.
_declarations
=
declarations
;
}
return
form
;
}
_getAncestorDataForForm
(
)
{
const
ancestorData
=
[
]
;
let
computeDesugaredSelector
=
false
;
for
(
const
ancestorRule
of
this
.
ancestorRules
)
{
const
rawRule
=
ancestorRule
.
rawRule
;
const
ruleClassName
=
ChromeUtils
.
getClassName
(
rawRule
)
;
const
type
=
SharedCssLogic
.
CSSAtRuleClassNameType
[
ruleClassName
]
;
if
(
ruleClassName
=
=
=
"
CSSMediaRule
"
&
&
rawRule
.
media
?
.
length
)
{
ancestorData
.
push
(
{
type
value
:
Array
.
from
(
rawRule
.
media
)
.
join
(
"
"
)
}
)
;
}
else
if
(
ruleClassName
=
=
=
"
CSSLayerBlockRule
"
)
{
ancestorData
.
push
(
{
actorID
:
ancestorRule
.
actorID
type
value
:
rawRule
.
name
}
)
;
}
else
if
(
ruleClassName
=
=
=
"
CSSContainerRule
"
)
{
ancestorData
.
push
(
{
type
containerName
:
rawRule
.
containerName
containerQuery
:
rawRule
.
containerQuery
}
)
;
}
else
if
(
ruleClassName
=
=
=
"
CSSSupportsRule
"
)
{
ancestorData
.
push
(
{
type
conditionText
:
rawRule
.
conditionText
}
)
;
}
else
if
(
rawRule
.
selectorText
)
{
ancestorData
.
push
(
{
type
selectorText
:
rawRule
.
selectorText
}
)
;
computeDesugaredSelector
=
true
;
}
}
if
(
this
.
_parentSheet
)
{
let
rule
=
this
.
rawRule
;
while
(
(
rule
=
rule
.
parentStyleSheet
?
.
ownerRule
)
)
{
if
(
rule
.
layerName
!
=
=
null
)
{
ancestorData
.
unshift
(
{
type
:
"
layer
"
value
:
rule
.
layerName
}
)
;
}
if
(
rule
.
media
?
.
mediaText
|
|
rule
.
supportsText
)
{
const
parts
=
[
]
;
if
(
rule
.
supportsText
)
{
parts
.
push
(
supports
(
{
rule
.
supportsText
}
)
)
;
}
if
(
rule
.
media
?
.
mediaText
)
{
parts
.
push
(
rule
.
media
.
mediaText
)
;
}
ancestorData
.
unshift
(
{
type
:
"
import
"
value
:
parts
.
join
(
"
"
)
}
)
;
}
}
}
return
{
ancestorData
computeDesugaredSelector
}
;
}
_notifyLocationChanged
(
line
column
)
{
this
.
emit
(
"
location
-
changed
"
line
column
)
;
}
_computeRuleIndex
(
)
{
let
rule
=
this
.
rawRule
;
const
result
=
[
]
;
while
(
rule
)
{
let
cssRules
=
[
]
;
if
(
rule
.
parentRule
)
{
cssRules
=
rule
.
parentRule
.
cssRules
;
}
else
if
(
rule
.
parentStyleSheet
)
{
cssRules
=
rule
.
parentStyleSheet
.
cssRules
;
}
let
found
=
false
;
for
(
let
i
=
0
;
i
<
cssRules
.
length
;
i
+
+
)
{
if
(
rule
=
=
=
cssRules
.
item
(
i
)
)
{
found
=
true
;
result
.
unshift
(
i
)
;
break
;
}
}
if
(
!
found
)
{
this
.
_ruleIndex
=
null
;
return
;
}
rule
=
rule
.
parentRule
;
}
this
.
_ruleIndex
=
result
;
}
_getRuleFromIndex
(
parentSheet
)
{
let
currentRule
=
null
;
for
(
const
i
of
this
.
_ruleIndex
)
{
if
(
currentRule
=
=
=
null
)
{
currentRule
=
parentSheet
.
cssRules
[
i
]
;
}
else
{
currentRule
=
currentRule
.
cssRules
.
item
(
i
)
;
}
}
return
currentRule
;
}
onStyleApplied
(
kind
)
{
if
(
kind
=
=
=
UPDATE_GENERAL
)
{
return
;
}
if
(
this
.
_ruleIndex
)
{
const
oldRule
=
this
.
rawRule
;
const
oldActor
=
this
.
pageStyle
.
refMap
.
get
(
oldRule
)
;
this
.
rawRule
=
this
.
_getRuleFromIndex
(
this
.
_parentSheet
)
;
if
(
oldActor
)
{
this
.
pageStyle
.
updateStyleRef
(
oldRule
this
.
rawRule
this
)
;
}
const
line
=
InspectorUtils
.
getRelativeRuleLine
(
this
.
rawRule
)
;
const
column
=
InspectorUtils
.
getRuleColumn
(
this
.
rawRule
)
;
if
(
line
!
=
=
this
.
line
|
|
column
!
=
=
this
.
column
)
{
this
.
_notifyLocationChanged
(
line
column
)
;
}
this
.
line
=
line
;
this
.
column
=
column
;
}
}
#
SUPPORTED_RULES_CLASSNAMES
=
new
Set
(
[
"
CSSContainerRule
"
"
CSSKeyframeRule
"
"
CSSKeyframesRule
"
"
CSSLayerBlockRule
"
"
CSSMediaRule
"
"
CSSStyleRule
"
"
CSSSupportsRule
"
]
)
;
#
isRuleSupported
(
)
{
try
{
const
ruleClassName
=
ChromeUtils
.
getClassName
(
this
.
rawRule
)
;
return
this
.
#
SUPPORTED_RULES_CLASSNAMES
.
has
(
ruleClassName
)
;
}
catch
(
e
)
{
}
return
false
;
}
async
getAuthoredCssText
(
skipCache
=
false
)
{
if
(
!
this
.
canSetRuleText
|
|
!
this
.
#
isRuleSupported
(
)
)
{
return
Promise
.
resolve
(
"
"
)
;
}
if
(
typeof
this
.
authoredText
=
=
=
"
string
"
&
&
!
skipCache
)
{
return
Promise
.
resolve
(
this
.
authoredText
)
;
}
const
resourceId
=
this
.
pageStyle
.
styleSheetsManager
.
getStyleSheetResourceId
(
this
.
_parentSheet
)
;
const
cssText
=
await
this
.
pageStyle
.
styleSheetsManager
.
getText
(
resourceId
)
;
const
{
text
}
=
getRuleText
(
cssText
this
.
line
this
.
column
)
;
this
.
authoredText
=
text
;
return
this
.
authoredText
;
}
async
getRuleText
(
)
{
if
(
!
this
.
#
isRuleSupported
(
true
)
&
&
this
.
type
!
=
=
ELEMENT_STYLE
)
{
return
Promise
.
resolve
(
"
"
)
;
}
let
ruleBodyText
;
let
selectorText
;
if
(
this
.
type
=
=
=
ELEMENT_STYLE
)
{
ruleBodyText
=
this
.
rawNode
.
getAttribute
(
"
style
"
)
;
selectorText
=
this
.
metadata
.
selector
;
}
else
{
ruleBodyText
=
await
this
.
getAuthoredCssText
(
true
)
;
const
resourceId
=
this
.
pageStyle
.
styleSheetsManager
.
getStyleSheetResourceId
(
this
.
_parentSheet
)
;
const
stylesheetText
=
await
this
.
pageStyle
.
styleSheetsManager
.
getText
(
resourceId
)
;
const
[
start
end
]
=
getSelectorOffsets
(
stylesheetText
this
.
line
this
.
column
)
;
selectorText
=
stylesheetText
.
substring
(
start
end
)
;
}
const
text
=
{
selectorText
}
{
{
ruleBodyText
}
}
;
const
{
result
}
=
SharedCssLogic
.
prettifyCSS
(
text
)
;
return
Promise
.
resolve
(
result
)
;
}
async
setRuleText
(
newText
modifications
=
[
]
)
{
if
(
!
this
.
canSetRuleText
)
{
throw
new
Error
(
"
invalid
call
to
setRuleText
"
)
;
}
if
(
this
.
type
=
=
=
ELEMENT_STYLE
)
{
this
.
rawNode
.
setAttributeDevtools
(
"
style
"
newText
)
;
}
else
{
const
resourceId
=
this
.
pageStyle
.
styleSheetsManager
.
getStyleSheetResourceId
(
this
.
_parentSheet
)
;
let
cssText
=
await
this
.
pageStyle
.
styleSheetsManager
.
getText
(
resourceId
)
;
const
{
offset
text
}
=
getRuleText
(
cssText
this
.
line
this
.
column
)
;
cssText
=
cssText
.
substring
(
0
offset
)
+
newText
+
cssText
.
substring
(
offset
+
text
.
length
)
;
await
this
.
pageStyle
.
styleSheetsManager
.
setStyleSheetText
(
resourceId
cssText
{
kind
:
UPDATE_PRESERVING_RULES
}
)
;
}
this
.
authoredText
=
newText
;
await
this
.
updateAncestorRulesAuthoredText
(
)
;
this
.
pageStyle
.
refreshObservedRules
(
this
.
ancestorRules
)
;
this
.
_pendingDeclarationChanges
.
push
(
.
.
.
modifications
)
;
return
this
;
}
async
updateAncestorRulesAuthoredText
(
)
{
const
promises
=
[
]
;
for
(
const
ancestorRule
of
this
.
ancestorRules
)
{
promises
.
push
(
ancestorRule
.
getAuthoredCssText
(
true
)
)
;
}
await
Promise
.
all
(
promises
)
;
}
modifyProperties
(
modifications
)
{
let
document
;
if
(
this
.
rawNode
)
{
document
=
this
.
rawNode
.
ownerDocument
;
}
else
{
let
parentStyleSheet
=
this
.
_parentSheet
;
while
(
parentStyleSheet
.
ownerRule
)
{
parentStyleSheet
=
parentStyleSheet
.
ownerRule
.
parentStyleSheet
;
}
document
=
this
.
getDocument
(
parentStyleSheet
)
;
}
const
tempElement
=
document
.
createElementNS
(
XHTML_NS
"
div
"
)
;
for
(
const
mod
of
modifications
)
{
if
(
mod
.
type
=
=
=
"
set
"
)
{
tempElement
.
style
.
setProperty
(
mod
.
name
mod
.
value
mod
.
priority
|
|
"
"
)
;
this
.
rawStyle
.
setProperty
(
mod
.
name
tempElement
.
style
.
getPropertyValue
(
mod
.
name
)
mod
.
priority
|
|
"
"
)
;
}
else
if
(
mod
.
type
=
=
=
"
remove
"
|
|
mod
.
type
=
=
=
"
disable
"
)
{
this
.
rawStyle
.
removeProperty
(
mod
.
name
)
;
}
}
this
.
pageStyle
.
refreshObservedRules
(
this
.
ancestorRules
)
;
this
.
_pendingDeclarationChanges
.
push
(
.
.
.
modifications
)
;
return
this
;
}
async
_addNewSelector
(
value
editAuthored
)
{
const
rule
=
this
.
rawRule
;
const
parentStyleSheet
=
this
.
_parentSheet
;
if
(
editAuthored
)
{
const
document
=
this
.
getDocument
(
this
.
_parentSheet
)
;
try
{
document
.
querySelector
(
value
)
;
}
catch
(
e
)
{
return
null
;
}
const
resourceId
=
this
.
pageStyle
.
styleSheetsManager
.
getStyleSheetResourceId
(
this
.
_parentSheet
)
;
let
authoredText
=
await
this
.
pageStyle
.
styleSheetsManager
.
getText
(
resourceId
)
;
const
[
startOffset
endOffset
]
=
getSelectorOffsets
(
authoredText
this
.
line
this
.
column
)
;
authoredText
=
authoredText
.
substring
(
0
startOffset
)
+
value
+
authoredText
.
substring
(
endOffset
)
;
await
this
.
pageStyle
.
styleSheetsManager
.
setStyleSheetText
(
resourceId
authoredText
{
kind
:
UPDATE_PRESERVING_RULES
}
)
;
}
else
{
const
parent
=
this
.
rawRule
.
parentRule
|
|
parentStyleSheet
;
const
cssRules
=
parent
.
cssRules
;
const
cssText
=
rule
.
cssText
;
const
selectorText
=
rule
.
selectorText
;
for
(
let
i
=
0
;
i
<
cssRules
.
length
;
i
+
+
)
{
if
(
rule
=
=
=
cssRules
.
item
(
i
)
)
{
try
{
const
ruleText
=
cssText
.
slice
(
selectorText
.
length
)
.
trim
(
)
;
parent
.
insertRule
(
value
+
"
"
+
ruleText
i
)
;
parent
.
deleteRule
(
i
+
1
)
;
break
;
}
catch
(
e
)
{
return
null
;
}
}
}
}
await
this
.
updateAncestorRulesAuthoredText
(
)
;
return
this
.
_getRuleFromIndex
(
parentStyleSheet
)
;
}
logDeclarationChange
(
change
newDeclarations
oldDeclarations
)
{
const
index
=
change
.
index
;
let
{
value
:
prevValue
name
:
prevName
priority
:
prevPriority
commentOffsets
}
=
oldDeclarations
[
index
]
|
|
{
}
;
const
{
value
:
currentValue
name
:
currentName
}
=
newDeclarations
[
index
]
|
|
{
}
;
const
prevDisabled
=
!
!
commentOffsets
;
prevValue
=
prevValue
&
&
prevPriority
?
{
prevValue
}
!
important
:
prevValue
;
const
data
=
this
.
metadata
;
switch
(
change
.
type
)
{
case
"
set
"
:
data
.
type
=
prevValue
?
"
declaration
-
add
"
:
"
declaration
-
update
"
;
const
changeName
=
currentName
|
|
change
.
name
;
const
name
=
change
.
newName
?
change
.
newName
:
changeName
;
const
changeValue
=
currentValue
|
|
change
.
value
;
const
newValue
=
change
.
priority
?
{
changeValue
}
!
important
:
changeValue
;
const
value
=
change
.
newName
?
prevValue
:
newValue
;
data
.
add
=
[
{
property
:
name
value
index
}
]
;
if
(
prevValue
)
{
data
.
remove
=
[
{
property
:
prevName
value
:
prevValue
index
}
]
;
}
else
{
data
.
remove
=
null
;
}
if
(
prevDisabled
&
&
!
change
.
newName
&
&
prevValue
=
=
=
newValue
)
{
data
.
remove
=
null
;
}
break
;
case
"
remove
"
:
data
.
type
=
"
declaration
-
remove
"
;
data
.
add
=
null
;
data
.
remove
=
[
{
property
:
change
.
name
value
:
prevValue
index
}
]
;
break
;
case
"
disable
"
:
data
.
type
=
"
declaration
-
disable
"
;
data
.
add
=
null
;
data
.
remove
=
[
{
property
:
change
.
name
value
:
prevValue
index
}
]
;
break
;
}
TrackChangeEmitter
.
trackChange
(
data
)
;
}
logSelectorChange
(
oldSelector
newSelector
)
{
TrackChangeEmitter
.
trackChange
(
{
.
.
.
this
.
metadata
type
:
"
selector
-
remove
"
add
:
null
remove
:
null
selector
:
oldSelector
}
)
;
TrackChangeEmitter
.
trackChange
(
{
.
.
.
this
.
metadata
type
:
"
selector
-
add
"
add
:
null
remove
:
null
selector
:
newSelector
}
)
;
}
modifySelector
(
node
value
editAuthored
=
false
)
{
if
(
this
.
type
=
=
=
ELEMENT_STYLE
|
|
this
.
rawRule
.
selectorText
=
=
=
value
)
{
return
{
ruleProps
:
null
isMatching
:
true
}
;
}
const
oldValue
=
this
.
rawRule
.
selectorText
;
let
selectorPromise
=
this
.
_addNewSelector
(
value
editAuthored
)
;
if
(
editAuthored
)
{
selectorPromise
=
selectorPromise
.
then
(
newCssRule
=
>
{
if
(
newCssRule
)
{
this
.
logSelectorChange
(
oldValue
value
)
;
const
style
=
this
.
pageStyle
.
_styleRef
(
newCssRule
)
;
return
style
.
getAuthoredCssText
(
)
.
then
(
(
)
=
>
newCssRule
)
;
}
return
newCssRule
;
}
)
;
}
return
selectorPromise
.
then
(
newCssRule
=
>
{
let
ruleProps
=
null
;
let
isMatching
=
false
;
if
(
newCssRule
)
{
const
ruleEntry
=
this
.
pageStyle
.
findEntryMatchingRule
(
node
newCssRule
)
;
if
(
ruleEntry
.
length
=
=
=
1
)
{
ruleProps
=
this
.
pageStyle
.
getAppliedProps
(
node
ruleEntry
{
matchedSelectors
:
true
}
)
;
}
else
{
ruleProps
=
this
.
pageStyle
.
getNewAppliedProps
(
node
newCssRule
)
;
}
isMatching
=
ruleProps
.
entries
.
some
(
ruleProp
=
>
!
!
ruleProp
.
matchedDesugaredSelectors
.
length
)
;
}
return
{
ruleProps
isMatching
}
;
}
)
;
}
getQueryContainerForNode
(
ancestorRuleIndex
nodeActor
)
{
const
ancestorRule
=
this
.
ancestorRules
[
ancestorRuleIndex
]
;
if
(
!
ancestorRule
)
{
console
.
error
(
Couldn
'
t
not
find
an
ancestor
rule
at
index
{
ancestorRuleIndex
}
)
;
return
{
node
:
null
}
;
}
const
containerEl
=
ancestorRule
.
rawRule
.
queryContainerFor
(
nodeActor
.
rawNode
)
;
if
(
!
containerEl
)
{
return
{
node
:
null
}
;
}
const
computedStyle
=
CssLogic
.
getComputedStyle
(
containerEl
)
;
return
{
node
:
this
.
pageStyle
.
walker
.
getNode
(
containerEl
)
containerType
:
computedStyle
.
containerType
inlineSize
:
computedStyle
.
inlineSize
blockSize
:
computedStyle
.
blockSize
}
;
}
maybeRefresh
(
forceRefresh
)
{
let
hasChanged
=
false
;
const
el
=
this
.
pageStyle
.
selectedElement
;
const
style
=
CssLogic
.
getComputedStyle
(
el
)
;
for
(
const
decl
of
this
.
_declarations
)
{
const
isUsed
=
isPropertyUsed
(
el
style
this
.
rawRule
decl
.
name
)
;
if
(
decl
.
isUsed
.
used
!
=
=
isUsed
.
used
)
{
decl
.
isUsed
=
isUsed
;
hasChanged
=
true
;
}
}
if
(
hasChanged
|
|
forceRefresh
)
{
this
.
emit
(
"
rule
-
updated
"
this
)
;
}
}
}
exports
.
StyleRuleActor
=
StyleRuleActor
;
function
getSelectorOffsets
(
initialText
line
column
)
{
if
(
typeof
line
=
=
=
"
undefined
"
|
|
typeof
column
=
=
=
"
undefined
"
)
{
throw
new
Error
(
"
Location
information
is
missing
"
)
;
}
const
{
offset
:
textOffset
text
}
=
getTextAtLineColumn
(
initialText
line
column
)
;
const
lexer
=
getCSSLexer
(
text
)
;
let
endOffset
;
while
(
true
)
{
const
token
=
lexer
.
nextToken
(
)
;
if
(
!
token
)
{
break
;
}
if
(
token
.
tokenType
=
=
=
"
symbol
"
&
&
token
.
text
=
=
=
"
{
"
)
{
if
(
endOffset
=
=
=
undefined
)
{
break
;
}
return
[
textOffset
textOffset
+
endOffset
]
;
}
if
(
token
.
tokenType
!
=
=
"
comment
"
&
&
token
.
tokenType
!
=
=
"
whitespace
"
)
{
endOffset
=
token
.
endOffset
;
}
}
throw
new
Error
(
"
could
not
find
bounds
of
rule
"
)
;
}
