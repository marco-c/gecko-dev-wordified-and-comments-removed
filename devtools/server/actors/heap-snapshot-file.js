"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
method
Arg
}
=
protocol
;
const
Services
=
require
(
"
Services
"
)
;
const
{
Task
}
=
require
(
"
devtools
/
shared
/
task
"
)
;
const
{
heapSnapshotFileSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
heap
-
snapshot
-
file
"
)
;
loader
.
lazyRequireGetter
(
this
"
DevToolsUtils
"
"
devtools
/
shared
/
DevToolsUtils
"
)
;
loader
.
lazyRequireGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
HeapSnapshotFileUtils
"
"
devtools
/
shared
/
heapsnapshot
/
HeapSnapshotFileUtils
"
)
;
exports
.
HeapSnapshotFileActor
=
protocol
.
ActorClassWithSpec
(
heapSnapshotFileSpec
{
initialize
:
function
(
conn
parent
)
{
if
(
Services
.
appInfo
&
&
(
Services
.
appInfo
.
processType
!
=
=
Services
.
appInfo
.
PROCESS_TYPE_DEFAULT
)
)
{
const
err
=
new
Error
(
"
Attempt
to
create
a
HeapSnapshotFileActor
in
a
"
+
"
child
process
!
The
HeapSnapshotFileActor
*
MUST
*
"
+
"
be
in
the
parent
process
!
"
)
;
DevToolsUtils
.
reportException
(
"
HeapSnapshotFileActor
.
prototype
.
initialize
"
err
)
;
return
;
}
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
parent
)
;
}
transferHeapSnapshot
:
Task
.
async
(
function
*
(
snapshotId
)
{
const
snapshotFilePath
=
HeapSnapshotFileUtils
.
getHeapSnapshotTempFilePath
(
snapshotId
)
;
if
(
!
snapshotFilePath
)
{
throw
new
Error
(
No
heap
snapshot
with
id
:
{
snapshotId
}
)
;
}
const
streamPromise
=
DevToolsUtils
.
openFileStream
(
snapshotFilePath
)
;
const
{
size
}
=
yield
OS
.
File
.
stat
(
snapshotFilePath
)
;
const
bulkPromise
=
this
.
conn
.
startBulkSend
(
{
actor
:
this
.
actorID
type
:
"
heap
-
snapshot
"
length
:
size
}
)
;
const
[
bulk
stream
]
=
yield
Promise
.
all
(
[
bulkPromise
streamPromise
]
)
;
try
{
yield
bulk
.
copyFrom
(
stream
)
;
}
finally
{
stream
.
close
(
)
;
}
}
)
}
)
;
