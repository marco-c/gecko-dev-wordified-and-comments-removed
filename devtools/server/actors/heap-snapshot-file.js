"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
heapSnapshotFileSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
heap
-
snapshot
-
file
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
DevToolsUtils
"
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
HeapSnapshotFileUtils
"
"
resource
:
/
/
devtools
/
shared
/
heapsnapshot
/
HeapSnapshotFileUtils
.
js
"
)
;
exports
.
HeapSnapshotFileActor
=
class
HeapSnapshotFileActor
extends
Actor
{
constructor
(
conn
)
{
super
(
conn
heapSnapshotFileSpec
)
;
if
(
Services
.
appinfo
.
processType
!
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
const
err
=
new
Error
(
"
Attempt
to
create
a
HeapSnapshotFileActor
in
a
"
+
"
child
process
!
The
HeapSnapshotFileActor
*
MUST
*
"
+
"
be
in
the
parent
process
!
"
)
;
DevToolsUtils
.
reportException
(
"
HeapSnapshotFileActor
'
s
constructor
"
err
)
;
}
}
async
transferHeapSnapshot
(
snapshotId
startBulkSend
)
{
const
snapshotFilePath
=
HeapSnapshotFileUtils
.
getHeapSnapshotTempFilePath
(
snapshotId
)
;
if
(
!
snapshotFilePath
)
{
throw
new
Error
(
No
heap
snapshot
with
id
:
{
snapshotId
}
)
;
}
const
streamPromise
=
DevToolsUtils
.
openFileStream
(
snapshotFilePath
)
;
const
{
size
}
=
await
IOUtils
.
stat
(
snapshotFilePath
)
;
const
bulkPromise
=
startBulkSend
(
size
)
;
const
[
bulk
stream
]
=
await
Promise
.
all
(
[
bulkPromise
streamPromise
]
)
;
try
{
await
bulk
.
copyFrom
(
stream
)
;
}
finally
{
stream
.
close
(
)
;
}
}
}
;
