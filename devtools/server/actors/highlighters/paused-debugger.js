"
use
strict
"
;
const
{
CanvasFrameAnonymousContentHelper
createNode
}
=
require
(
"
.
/
utils
/
markup
"
)
;
function
PausedDebuggerOverlay
(
highlighterEnv
)
{
this
.
env
=
highlighterEnv
;
this
.
markup
=
new
CanvasFrameAnonymousContentHelper
(
highlighterEnv
this
.
_buildMarkup
.
bind
(
this
)
)
;
}
PausedDebuggerOverlay
.
prototype
=
{
typeName
:
"
PausedDebuggerOverlay
"
ID_CLASS_PREFIX
:
"
paused
-
dbg
-
"
_buildMarkup
(
)
{
let
{
window
}
=
this
.
env
;
let
prefix
=
this
.
ID_CLASS_PREFIX
;
let
container
=
createNode
(
window
{
attributes
:
{
"
class
"
:
"
highlighter
-
container
"
}
}
)
;
let
wrapper
=
createNode
(
window
{
parent
:
container
attributes
:
{
"
id
"
:
"
root
"
"
class
"
:
"
root
"
"
hidden
"
:
"
true
"
"
overlay
"
:
"
true
"
}
prefix
}
)
;
let
toolbar
=
createNode
(
window
{
parent
:
wrapper
attributes
:
{
"
id
"
:
"
toolbar
"
"
class
"
:
"
toolbar
"
}
prefix
}
)
;
createNode
(
window
{
nodeType
:
"
span
"
parent
:
toolbar
attributes
:
{
"
id
"
:
"
reason
"
"
class
"
:
"
reason
"
}
prefix
}
)
;
return
container
;
}
destroy
(
)
{
this
.
hide
(
)
;
this
.
markup
.
destroy
(
)
;
this
.
env
=
null
;
}
getElement
(
id
)
{
return
this
.
markup
.
getElement
(
this
.
ID_CLASS_PREFIX
+
id
)
;
}
show
(
node
options
=
{
}
)
{
if
(
this
.
env
.
isXUL
)
{
return
false
;
}
let
root
=
this
.
getElement
(
"
root
"
)
;
root
.
removeAttribute
(
"
hidden
"
)
;
if
(
options
.
onlyToolbar
)
{
root
.
removeAttribute
(
"
overlay
"
)
;
}
else
{
root
.
setAttribute
(
"
overlay
"
"
true
"
)
;
}
let
toolbar
=
this
.
getElement
(
"
toolbar
"
)
;
if
(
options
.
reason
)
{
this
.
getElement
(
"
reason
"
)
.
setTextContent
(
options
.
reason
)
;
toolbar
.
removeAttribute
(
"
hidden
"
)
;
}
else
{
toolbar
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
return
true
;
}
hide
(
)
{
if
(
this
.
env
.
isXUL
)
{
return
;
}
this
.
getElement
(
"
root
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
}
;
exports
.
PausedDebuggerOverlay
=
PausedDebuggerOverlay
;
