"
use
strict
"
;
const
{
CanvasFrameAnonymousContentHelper
}
=
require
(
"
.
/
utils
/
markup
"
)
;
const
{
getAdjustedQuads
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
function
RectHighlighter
(
highlighterEnv
)
{
this
.
win
=
highlighterEnv
.
window
;
this
.
markup
=
new
CanvasFrameAnonymousContentHelper
(
highlighterEnv
this
.
_buildMarkup
.
bind
(
this
)
)
;
}
RectHighlighter
.
prototype
=
{
typeName
:
"
RectHighlighter
"
_buildMarkup
(
)
{
let
doc
=
this
.
win
.
document
;
let
container
=
doc
.
createElement
(
"
div
"
)
;
container
.
className
=
"
highlighter
-
container
"
;
container
.
innerHTML
=
"
<
div
id
=
\
"
highlighted
-
rect
\
"
"
+
"
class
=
\
"
highlighted
-
rect
\
"
hidden
=
\
"
true
\
"
>
"
;
return
container
;
}
destroy
(
)
{
this
.
win
=
null
;
this
.
markup
.
destroy
(
)
;
}
getElement
(
id
)
{
return
this
.
markup
.
getElement
(
id
)
;
}
_hasValidOptions
(
options
)
{
let
isValidNb
=
n
=
>
typeof
n
=
=
=
"
number
"
&
&
n
>
=
0
&
&
isFinite
(
n
)
;
return
options
&
&
options
.
rect
&
&
isValidNb
(
options
.
rect
.
x
)
&
&
isValidNb
(
options
.
rect
.
y
)
&
&
options
.
rect
.
width
&
&
isValidNb
(
options
.
rect
.
width
)
&
&
options
.
rect
.
height
&
&
isValidNb
(
options
.
rect
.
height
)
;
}
show
(
node
options
)
{
if
(
!
this
.
_hasValidOptions
(
options
)
|
|
!
node
|
|
!
node
.
ownerDocument
)
{
this
.
hide
(
)
;
return
false
;
}
let
contextNode
=
node
.
ownerDocument
.
documentElement
;
let
quads
=
getAdjustedQuads
(
this
.
win
contextNode
)
;
if
(
!
quads
.
length
)
{
this
.
hide
(
)
;
return
false
;
}
let
{
bounds
}
=
quads
[
0
]
;
let
x
=
"
left
:
"
+
(
bounds
.
x
+
options
.
rect
.
x
)
+
"
px
;
"
;
let
y
=
"
top
:
"
+
(
bounds
.
y
+
options
.
rect
.
y
)
+
"
px
;
"
;
let
width
=
"
width
:
"
+
options
.
rect
.
width
+
"
px
;
"
;
let
height
=
"
height
:
"
+
options
.
rect
.
height
+
"
px
;
"
;
let
style
=
x
+
y
+
width
+
height
;
if
(
options
.
fill
)
{
style
+
=
"
background
:
"
+
options
.
fill
+
"
;
"
;
}
let
rect
=
this
.
getElement
(
"
highlighted
-
rect
"
)
;
rect
.
setAttribute
(
"
style
"
style
)
;
rect
.
removeAttribute
(
"
hidden
"
)
;
return
true
;
}
hide
(
)
{
this
.
getElement
(
"
highlighted
-
rect
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
}
;
exports
.
RectHighlighter
=
RectHighlighter
;
