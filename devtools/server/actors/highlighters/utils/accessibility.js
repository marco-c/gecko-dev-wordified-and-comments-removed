"
use
strict
"
;
const
{
getCurrentZoom
getViewportDimensions
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
const
{
moveInfobar
createNode
}
=
require
(
"
.
/
markup
"
)
;
const
{
truncateString
}
=
require
(
"
devtools
/
shared
/
inspector
/
utils
"
)
;
const
MAX_STRING_LENGTH
=
50
;
class
Infobar
{
constructor
(
highlighter
)
{
this
.
highlighter
=
highlighter
;
}
get
document
(
)
{
return
this
.
highlighter
.
win
.
document
;
}
get
bounds
(
)
{
return
this
.
highlighter
.
_bounds
;
}
get
options
(
)
{
return
this
.
highlighter
.
options
;
}
get
prefix
(
)
{
return
this
.
highlighter
.
ID_CLASS_PREFIX
;
}
get
win
(
)
{
return
this
.
highlighter
.
win
;
}
_moveInfobar
(
container
)
{
const
{
left
:
x
top
:
y
bottom
width
}
=
this
.
bounds
;
const
infobarBounds
=
{
x
y
bottom
width
}
;
moveInfobar
(
container
infobarBounds
this
.
win
)
;
}
buildMarkup
(
root
)
{
const
container
=
createNode
(
this
.
win
{
parent
:
root
attributes
:
{
"
class
"
:
"
infobar
-
container
"
"
id
"
:
"
infobar
-
container
"
"
aria
-
hidden
"
:
"
true
"
"
hidden
"
:
"
true
"
}
prefix
:
this
.
prefix
}
)
;
const
infobar
=
createNode
(
this
.
win
{
parent
:
container
attributes
:
{
"
class
"
:
"
infobar
"
"
id
"
:
"
infobar
"
}
prefix
:
this
.
prefix
}
)
;
const
infobarText
=
createNode
(
this
.
win
{
parent
:
infobar
attributes
:
{
"
class
"
:
"
infobar
-
text
"
"
id
"
:
"
infobar
-
text
"
}
prefix
:
this
.
prefix
}
)
;
createNode
(
this
.
win
{
nodeType
:
"
span
"
parent
:
infobarText
attributes
:
{
"
class
"
:
"
infobar
-
role
"
"
id
"
:
"
infobar
-
role
"
}
prefix
:
this
.
prefix
}
)
;
createNode
(
this
.
win
{
nodeType
:
"
span
"
parent
:
infobarText
attributes
:
{
"
class
"
:
"
infobar
-
name
"
"
id
"
:
"
infobar
-
name
"
}
prefix
:
this
.
prefix
}
)
;
}
destroy
(
)
{
this
.
highlighter
=
null
;
}
getElement
(
id
)
{
return
this
.
highlighter
.
getElement
(
id
)
;
}
getTextContent
(
id
)
{
const
anonymousContent
=
this
.
highlighter
.
markup
.
content
;
return
anonymousContent
.
getTextContentForElement
(
{
this
.
prefix
}
{
id
}
)
;
}
hide
(
)
{
const
container
=
this
.
getElement
(
"
infobar
-
container
"
)
;
container
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
show
(
)
{
const
container
=
this
.
getElement
(
"
infobar
-
container
"
)
;
container
.
removeAttribute
(
"
hidden
"
)
;
this
.
update
(
container
)
;
}
update
(
container
)
{
const
{
name
role
}
=
this
.
options
;
this
.
updateRole
(
role
this
.
getElement
(
"
infobar
-
role
"
)
)
;
this
.
updateName
(
name
this
.
getElement
(
"
infobar
-
name
"
)
)
;
this
.
_moveInfobar
(
container
)
;
}
setTextContent
(
el
text
)
{
el
.
setTextContent
(
text
)
;
}
updateName
(
name
el
)
{
const
nameText
=
name
?
"
{
truncateString
(
name
MAX_STRING_LENGTH
)
}
"
:
"
"
;
this
.
setTextContent
(
el
nameText
)
;
}
updateRole
(
role
el
)
{
this
.
setTextContent
(
el
role
)
;
}
}
class
XULWindowInfobar
extends
Infobar
{
_moveInfobar
(
container
)
{
const
arrow
=
this
.
getElement
(
"
arrow
"
)
;
container
.
removeAttribute
(
"
hidden
"
)
;
arrow
.
removeAttribute
(
"
hidden
"
)
;
const
{
left
:
boundsLeft
right
:
boundsRight
top
:
boundsTop
bottom
:
boundsBottom
}
=
this
.
bounds
;
const
boundsMidPoint
=
(
boundsLeft
+
boundsRight
)
/
2
;
container
.
style
.
left
=
{
boundsMidPoint
}
px
;
const
zoom
=
getCurrentZoom
(
this
.
win
)
;
let
{
width
:
viewportWidth
height
:
viewportHeight
}
=
getViewportDimensions
(
this
.
win
)
;
const
{
width
height
left
}
=
container
.
getBoundingClientRect
(
)
;
const
containerHalfWidth
=
width
/
2
;
const
containerHeight
=
height
;
const
margin
=
100
*
zoom
;
viewportHeight
*
=
zoom
;
viewportWidth
*
=
zoom
;
const
topBoundary
=
margin
;
const
bottomBoundary
=
viewportHeight
-
containerHeight
;
const
leftBoundary
=
containerHalfWidth
;
const
rightBoundary
=
viewportWidth
-
containerHalfWidth
;
const
isOffScreenOnTop
=
boundsBottom
<
topBoundary
;
const
isOffScreenOnBottom
=
boundsBottom
>
bottomBoundary
;
const
isOffScreenOnLeft
=
left
<
leftBoundary
;
const
isOffScreenOnRight
=
left
>
rightBoundary
;
if
(
isOffScreenOnLeft
)
{
container
.
style
.
left
=
{
leftBoundary
+
boundsLeft
}
px
;
arrow
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
else
if
(
isOffScreenOnRight
)
{
const
leftOffset
=
rightBoundary
-
boundsRight
;
container
.
style
.
left
=
{
rightBoundary
-
leftOffset
-
containerHalfWidth
}
px
;
arrow
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
const
bubbleArrowSize
=
"
var
(
-
-
highlighter
-
bubble
-
arrow
-
size
)
"
;
if
(
isOffScreenOnTop
)
{
if
(
boundsTop
<
0
)
{
container
.
style
.
top
=
bubbleArrowSize
;
}
else
{
container
.
style
.
top
=
calc
(
{
boundsBottom
}
px
+
{
bubbleArrowSize
}
)
;
}
arrow
.
setAttribute
(
"
class
"
"
accessible
-
arrow
top
"
)
;
}
else
if
(
isOffScreenOnBottom
)
{
container
.
style
.
top
=
calc
(
{
bottomBoundary
}
px
-
{
bubbleArrowSize
}
)
;
arrow
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
else
{
container
.
style
.
top
=
calc
(
{
boundsTop
}
px
-
(
{
containerHeight
}
px
+
{
bubbleArrowSize
}
)
)
;
arrow
.
setAttribute
(
"
class
"
"
accessible
-
arrow
bottom
"
)
;
}
}
buildMarkup
(
root
)
{
super
.
buildMarkup
(
root
createNode
)
;
createNode
(
this
.
win
{
parent
:
this
.
getElement
(
"
infobar
"
)
attributes
:
{
"
class
"
:
"
arrow
"
"
id
"
:
"
arrow
"
}
prefix
:
this
.
prefix
}
)
;
}
getTextContent
(
id
)
{
return
this
.
getElement
(
id
)
.
textContent
;
}
getElement
(
id
)
{
return
this
.
win
.
document
.
getElementById
(
{
this
.
prefix
}
{
id
}
)
;
}
setTextContent
(
el
text
)
{
el
.
textContent
=
text
;
}
}
function
getBounds
(
win
{
x
y
w
h
zoom
}
)
{
let
{
mozInnerScreenX
mozInnerScreenY
scrollX
scrollY
}
=
win
;
let
zoomFactor
=
getCurrentZoom
(
win
)
;
let
left
=
x
;
let
right
=
x
+
w
;
let
top
=
y
;
let
bottom
=
y
+
h
;
if
(
zoom
)
{
zoomFactor
=
zoom
;
mozInnerScreenX
/
=
zoomFactor
;
mozInnerScreenY
/
=
zoomFactor
;
scrollX
/
=
zoomFactor
;
scrollY
/
=
zoomFactor
;
}
left
-
=
mozInnerScreenX
-
scrollX
;
right
-
=
mozInnerScreenX
-
scrollX
;
top
-
=
mozInnerScreenY
-
scrollY
;
bottom
-
=
mozInnerScreenY
-
scrollY
;
left
*
=
zoomFactor
;
right
*
=
zoomFactor
;
top
*
=
zoomFactor
;
bottom
*
=
zoomFactor
;
const
width
=
right
-
left
;
const
height
=
bottom
-
top
;
return
{
left
right
top
bottom
width
height
}
;
}
exports
.
MAX_STRING_LENGTH
=
MAX_STRING_LENGTH
;
exports
.
getBounds
=
getBounds
;
exports
.
Infobar
=
Infobar
;
exports
.
XULWindowInfobar
=
XULWindowInfobar
;
