"
use
strict
"
;
const
EventEmitter
=
require
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
const
{
setIgnoreLayoutChanges
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
layout
/
utils
.
js
"
)
;
const
{
CanvasFrameAnonymousContentHelper
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
.
js
"
)
;
class
ViewportSizeHighlighter
{
constructor
(
highlighterEnv
parent
options
=
{
}
)
{
this
.
env
=
highlighterEnv
;
this
.
parent
=
parent
;
this
.
ID_CLASS_PREFIX
=
options
?
.
prefix
|
|
"
viewport
-
size
-
highlighter
-
"
;
this
.
hideTimeout
=
options
?
.
hideTimeout
;
this
.
markup
=
new
CanvasFrameAnonymousContentHelper
(
highlighterEnv
this
.
_buildMarkup
.
bind
(
this
)
{
waitForDocumentToLoad
:
options
?
.
waitForDocumentToLoad
?
?
true
}
)
;
this
.
_onPageResize
=
this
.
_onPageResize
.
bind
(
this
)
;
this
.
isReady
=
this
.
markup
.
initialize
(
)
;
const
{
pageListenerTarget
}
=
highlighterEnv
;
pageListenerTarget
.
addEventListener
(
"
pagehide
"
this
)
;
}
static
get
XULSupported
(
)
{
return
true
;
}
get
isFadingViewportHighlighter
(
)
{
return
this
.
hideTimeout
!
=
=
undefined
;
}
_buildMarkup
(
)
{
const
prefix
=
this
.
ID_CLASS_PREFIX
;
const
container
=
this
.
markup
.
createNode
(
{
attributes
:
{
class
:
"
highlighter
-
container
"
}
}
)
;
this
.
markup
.
createNode
(
{
parent
:
container
attributes
:
{
class
:
"
viewport
-
infobar
-
container
"
id
:
"
viewport
-
infobar
-
container
"
position
:
"
top
"
hidden
:
"
true
"
}
prefix
}
)
;
return
container
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
pagehide
"
:
if
(
event
.
target
.
defaultView
=
=
=
this
.
env
.
window
)
{
this
.
destroy
(
)
;
}
break
;
}
}
_update
(
)
{
const
{
window
}
=
this
.
env
;
setIgnoreLayoutChanges
(
true
)
;
this
.
updateViewportInfobar
(
)
;
setIgnoreLayoutChanges
(
false
window
.
document
.
documentElement
)
;
}
updateViewportInfobar
(
)
{
const
{
window
}
=
this
.
env
;
const
{
innerHeight
innerWidth
}
=
window
;
const
infobarId
=
this
.
ID_CLASS_PREFIX
+
"
viewport
-
infobar
-
container
"
;
const
textContent
=
innerWidth
+
"
px
\
u00D7
"
+
innerHeight
+
"
px
"
;
this
.
markup
.
getElement
(
infobarId
)
.
setTextContent
(
textContent
)
;
}
destroy
(
)
{
if
(
this
.
_destroyed
)
{
return
;
}
this
.
_destroyed
=
true
;
if
(
this
.
isFadingViewportHighlighter
&
&
this
.
parent
.
highlightersState
?
.
fadingViewportSizeHiglighter
)
{
this
.
parent
.
highlightersState
.
fadingViewportSizeHiglighter
=
null
;
}
this
.
hide
(
)
;
const
{
pageListenerTarget
}
=
this
.
env
;
if
(
pageListenerTarget
)
{
pageListenerTarget
.
removeEventListener
(
"
pagehide
"
this
)
;
}
this
.
markup
.
destroy
(
)
;
EventEmitter
.
emit
(
this
"
destroy
"
)
;
}
show
(
)
{
const
{
pageListenerTarget
}
=
this
.
env
;
pageListenerTarget
.
addEventListener
(
"
resize
"
this
.
_onPageResize
)
;
if
(
this
.
isFadingViewportHighlighter
)
{
this
.
parent
.
highlightersState
.
fadingViewportSizeHiglighter
=
this
;
}
else
{
if
(
this
.
parent
.
highlightersState
.
fadingViewportSizeHiglighter
)
{
this
.
parent
.
highlightersState
.
fadingViewportSizeHiglighter
.
hide
(
)
;
}
this
.
_showInfobarContainer
(
)
;
this
.
_update
(
)
;
}
return
true
;
}
_onPageResize
(
)
{
const
{
window
}
=
this
.
env
;
if
(
this
.
isFadingViewportHighlighter
)
{
window
.
clearTimeout
(
this
.
resizeTimer
)
;
}
this
.
_showInfobarContainer
(
)
;
this
.
_update
(
)
;
if
(
this
.
isFadingViewportHighlighter
)
{
this
.
resizeTimer
=
window
.
setTimeout
(
(
)
=
>
{
this
.
_hideInfobarContainer
(
)
;
}
this
.
hideTimeout
)
;
}
}
_showInfobarContainer
(
)
{
this
.
markup
.
removeAttributeForElement
(
this
.
ID_CLASS_PREFIX
+
"
viewport
-
infobar
-
container
"
"
hidden
"
)
;
}
hide
(
)
{
const
{
pageListenerTarget
window
}
=
this
.
env
;
pageListenerTarget
.
removeEventListener
(
"
resize
"
this
.
_onPageResize
)
;
this
.
_hideInfobarContainer
(
)
;
if
(
this
.
isFadingViewportHighlighter
)
{
window
.
clearTimeout
(
this
.
resizeTimer
)
;
}
else
if
(
this
.
parent
.
highlightersState
?
.
fadingViewportSizeHiglighter
)
{
this
.
parent
.
highlightersState
.
fadingViewportSizeHiglighter
.
show
(
)
;
}
}
_hideInfobarContainer
(
)
{
this
.
markup
.
setAttributeForElement
(
this
.
ID_CLASS_PREFIX
+
"
viewport
-
infobar
-
container
"
"
hidden
"
"
true
"
)
;
}
}
exports
.
ViewportSizeHighlighter
=
ViewportSizeHighlighter
;
