"
use
strict
"
;
const
{
extend
}
=
require
(
"
sdk
/
core
/
heritage
"
)
;
const
{
AutoRefreshHighlighter
}
=
require
(
"
.
/
auto
-
refresh
"
)
;
const
{
CanvasFrameAnonymousContentHelper
getComputedStyle
createSVGNode
createNode
}
=
require
(
"
.
/
utils
/
markup
"
)
;
const
{
setIgnoreLayoutChanges
getNodeBounds
}
=
require
(
"
devtools
/
toolkit
/
layout
/
utils
"
)
;
const
ARROW_LINE_MIN_DISTANCE
=
10
;
let
MARKER_COUNTER
=
1
;
function
CssTransformHighlighter
(
highlighterEnv
)
{
AutoRefreshHighlighter
.
call
(
this
highlighterEnv
)
;
this
.
markup
=
new
CanvasFrameAnonymousContentHelper
(
this
.
highlighterEnv
this
.
_buildMarkup
.
bind
(
this
)
)
;
}
CssTransformHighlighter
.
prototype
=
extend
(
AutoRefreshHighlighter
.
prototype
{
typeName
:
"
CssTransformHighlighter
"
ID_CLASS_PREFIX
:
"
css
-
transform
-
"
_buildMarkup
:
function
(
)
{
let
container
=
createNode
(
this
.
win
{
attributes
:
{
"
class
"
:
"
highlighter
-
container
"
}
}
)
;
let
rootWrapper
=
createNode
(
this
.
win
{
parent
:
container
attributes
:
{
"
id
"
:
"
root
"
"
class
"
:
"
root
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
let
svg
=
createSVGNode
(
this
.
win
{
nodeType
:
"
svg
"
parent
:
rootWrapper
attributes
:
{
"
id
"
:
"
elements
"
"
hidden
"
:
"
true
"
"
width
"
:
"
100
%
"
"
height
"
:
"
100
%
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
this
.
markerId
=
"
arrow
-
marker
-
"
+
MARKER_COUNTER
;
MARKER_COUNTER
+
+
;
let
marker
=
createSVGNode
(
this
.
win
{
nodeType
:
"
marker
"
parent
:
svg
attributes
:
{
"
id
"
:
this
.
markerId
"
markerWidth
"
:
"
10
"
"
markerHeight
"
:
"
5
"
"
orient
"
:
"
auto
"
"
markerUnits
"
:
"
strokeWidth
"
"
refX
"
:
"
10
"
"
refY
"
:
"
5
"
"
viewBox
"
:
"
0
0
10
10
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
createSVGNode
(
this
.
win
{
nodeType
:
"
path
"
parent
:
marker
attributes
:
{
"
d
"
:
"
M
0
0
L
10
5
L
0
10
z
"
"
fill
"
:
"
#
08C
"
}
}
)
;
let
shapesGroup
=
createSVGNode
(
this
.
win
{
nodeType
:
"
g
"
parent
:
svg
}
)
;
createSVGNode
(
this
.
win
{
nodeType
:
"
polygon
"
parent
:
shapesGroup
attributes
:
{
"
id
"
:
"
untransformed
"
"
class
"
:
"
untransformed
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
createSVGNode
(
this
.
win
{
nodeType
:
"
polygon
"
parent
:
shapesGroup
attributes
:
{
"
id
"
:
"
transformed
"
"
class
"
:
"
transformed
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
for
(
let
nb
of
[
"
1
"
"
2
"
"
3
"
"
4
"
]
)
{
createSVGNode
(
this
.
win
{
nodeType
:
"
line
"
parent
:
shapesGroup
attributes
:
{
"
id
"
:
"
line
"
+
nb
"
class
"
:
"
line
"
"
marker
-
end
"
:
"
url
(
#
"
+
this
.
markerId
+
"
)
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
}
return
container
;
}
destroy
:
function
(
)
{
AutoRefreshHighlighter
.
prototype
.
destroy
.
call
(
this
)
;
this
.
markup
.
destroy
(
)
;
}
getElement
:
function
(
id
)
{
return
this
.
markup
.
getElement
(
this
.
ID_CLASS_PREFIX
+
id
)
;
}
_show
:
function
(
)
{
if
(
!
this
.
_isTransformed
(
this
.
currentNode
)
)
{
this
.
hide
(
)
;
return
false
;
}
return
this
.
_update
(
)
;
}
_isTransformed
:
function
(
node
)
{
let
style
=
getComputedStyle
(
node
)
;
return
style
&
&
(
style
.
transform
!
=
=
"
none
"
&
&
style
.
display
!
=
=
"
inline
"
)
;
}
_setPolygonPoints
:
function
(
quad
id
)
{
let
points
=
[
]
;
for
(
let
point
of
[
"
p1
"
"
p2
"
"
p3
"
"
p4
"
]
)
{
points
.
push
(
quad
[
point
]
.
x
+
"
"
+
quad
[
point
]
.
y
)
;
}
this
.
getElement
(
id
)
.
setAttribute
(
"
points
"
points
.
join
(
"
"
)
)
;
}
_setLinePoints
:
function
(
p1
p2
id
)
{
let
line
=
this
.
getElement
(
id
)
;
line
.
setAttribute
(
"
x1
"
p1
.
x
)
;
line
.
setAttribute
(
"
y1
"
p1
.
y
)
;
line
.
setAttribute
(
"
x2
"
p2
.
x
)
;
line
.
setAttribute
(
"
y2
"
p2
.
y
)
;
let
dist
=
Math
.
sqrt
(
Math
.
pow
(
p2
.
x
-
p1
.
x
2
)
+
Math
.
pow
(
p2
.
y
-
p1
.
y
2
)
)
;
if
(
dist
<
ARROW_LINE_MIN_DISTANCE
)
{
line
.
removeAttribute
(
"
marker
-
end
"
)
;
}
else
{
line
.
setAttribute
(
"
marker
-
end
"
"
url
(
#
"
+
this
.
markerId
+
"
)
"
)
;
}
}
_update
:
function
(
)
{
setIgnoreLayoutChanges
(
true
)
;
let
quads
=
this
.
currentQuads
.
border
;
if
(
!
quads
.
length
|
|
quads
[
0
]
.
bounds
.
width
<
=
0
|
|
quads
[
0
]
.
bounds
.
height
<
=
0
)
{
this
.
_hideShapes
(
)
;
return
false
;
}
let
[
quad
]
=
quads
;
let
untransformedQuad
=
getNodeBounds
(
this
.
win
this
.
currentNode
)
;
this
.
_setPolygonPoints
(
quad
"
transformed
"
)
;
this
.
_setPolygonPoints
(
untransformedQuad
"
untransformed
"
)
;
for
(
let
nb
of
[
"
1
"
"
2
"
"
3
"
"
4
"
]
)
{
this
.
_setLinePoints
(
untransformedQuad
[
"
p
"
+
nb
]
quad
[
"
p
"
+
nb
]
"
line
"
+
nb
)
;
}
this
.
markup
.
scaleRootElement
(
this
.
currentNode
this
.
ID_CLASS_PREFIX
+
"
root
"
)
;
this
.
_showShapes
(
)
;
setIgnoreLayoutChanges
(
false
this
.
currentNode
.
ownerDocument
.
documentElement
)
;
return
true
;
}
_hide
:
function
(
)
{
setIgnoreLayoutChanges
(
true
)
;
this
.
_hideShapes
(
)
;
setIgnoreLayoutChanges
(
false
this
.
currentNode
.
ownerDocument
.
documentElement
)
;
}
_hideShapes
:
function
(
)
{
this
.
getElement
(
"
elements
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
_showShapes
:
function
(
)
{
this
.
getElement
(
"
elements
"
)
.
removeAttribute
(
"
hidden
"
)
;
}
}
)
;
exports
.
CssTransformHighlighter
=
CssTransformHighlighter
;
