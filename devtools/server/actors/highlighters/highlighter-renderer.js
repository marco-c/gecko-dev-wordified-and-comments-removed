"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
HighlighterEnvironment
}
=
require
(
"
devtools
/
server
/
actors
/
highlighters
"
)
;
const
{
CanvasFrameAnonymousContentHelper
}
=
require
(
"
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
"
)
;
class
HighlighterRenderer
{
constructor
(
)
{
this
.
typeName
=
"
"
;
this
.
onMessage
=
this
.
onMessage
.
bind
(
this
)
;
}
init
(
isBrowserToolboxHighlighter
)
{
this
.
win
=
Services
.
wm
.
getMostRecentBrowserWindow
(
)
;
const
{
gBrowser
}
=
this
.
win
;
const
browser
=
gBrowser
.
selectedBrowser
;
const
browserContainer
=
gBrowser
.
getBrowserContainer
(
browser
)
;
const
parent
=
isBrowserToolboxHighlighter
?
this
.
win
.
document
.
documentElement
:
browserContainer
.
querySelector
(
"
.
browserStack
"
)
;
const
iframe
=
parent
.
querySelector
(
:
scope
>
.
devtools
-
highlighter
-
renderer
)
;
if
(
iframe
)
{
this
.
iframe
=
iframe
;
this
.
setupMarkup
(
)
;
}
else
{
this
.
iframe
=
this
.
win
.
document
.
createElement
(
"
iframe
"
)
;
this
.
iframe
.
classList
.
add
(
"
devtools
-
highlighter
-
renderer
"
)
;
if
(
isBrowserToolboxHighlighter
)
{
parent
.
append
(
this
.
iframe
)
;
}
else
{
parent
.
querySelector
(
"
browser
"
)
.
after
(
this
.
iframe
)
;
}
this
.
iframe
.
contentWindow
.
addEventListener
(
"
DOMContentLoaded
"
this
.
setupMarkup
.
bind
(
this
)
)
;
}
}
setupMarkup
(
)
{
if
(
!
this
.
iframe
|
|
!
this
.
iframe
.
contentWindow
)
{
throw
Error
(
"
The
highlighter
renderer
'
s
host
iframe
is
missing
or
not
yet
ready
"
)
;
}
this
.
highlighterEnv
=
new
HighlighterEnvironment
(
)
;
this
.
highlighterEnv
.
initFromWindow
(
this
.
iframe
.
contentWindow
)
;
this
.
markup
=
new
CanvasFrameAnonymousContentHelper
(
this
.
highlighterEnv
this
.
_buildMarkup
.
bind
(
this
)
)
;
}
setMessageManager
(
mm
prefix
)
{
if
(
this
.
messageManager
=
=
=
mm
)
{
return
;
}
this
.
_msgName
=
debug
:
{
prefix
}
{
this
.
typeName
}
;
if
(
this
.
messageManager
)
{
const
oldMM
=
this
.
messageManager
;
oldMM
.
removeMessageListener
(
this
.
_msgName
this
.
onMessage
)
;
}
this
.
messageManager
=
mm
;
if
(
mm
)
{
mm
.
addMessageListener
(
this
.
_msgName
this
.
onMessage
)
;
}
}
postMessage
(
topic
data
=
{
}
)
{
this
.
messageManager
.
sendAsyncMessage
(
{
this
.
_msgName
}
:
event
{
topic
data
}
)
;
}
onMessage
(
msg
)
{
const
{
topic
data
}
=
msg
.
json
;
switch
(
topic
)
{
case
"
render
"
:
this
.
render
(
data
)
;
break
;
case
"
destroy
"
:
this
.
destroy
(
)
;
break
;
}
}
render
(
)
{
throw
new
Error
(
"
Highlighter
renderer
class
had
to
implement
render
method
"
)
;
}
destroy
(
)
{
if
(
this
.
highlighterEnv
)
{
this
.
highlighterEnv
.
destroy
(
)
;
this
.
highlighterEnv
=
null
;
}
if
(
this
.
markup
)
{
this
.
markup
.
destroy
(
)
;
this
.
markup
=
null
;
}
if
(
this
.
iframe
)
{
this
.
iframe
.
remove
(
)
;
this
.
iframe
=
null
;
}
this
.
win
=
null
;
this
.
setMessageManager
(
null
)
;
}
}
exports
.
HighlighterRenderer
=
HighlighterRenderer
;
