"
use
strict
"
;
const
{
getBounds
}
=
require
(
"
.
/
utils
/
accessibility
"
)
;
const
{
createNode
isNodeValid
}
=
require
(
"
.
/
utils
/
markup
"
)
;
const
{
loadSheet
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
const
ACCESSIBLE_BOUNDS_SHEET
=
"
data
:
text
/
css
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
.
accessible
-
bounds
{
position
:
fixed
;
pointer
-
events
:
none
;
z
-
index
:
10
;
display
:
block
;
background
-
color
:
#
6a5acd
!
important
;
opacity
:
0
.
6
;
}
)
;
class
XULWindowAccessibleHighlighter
{
constructor
(
highlighterEnv
)
{
this
.
highlighterEnv
=
highlighterEnv
;
this
.
win
=
highlighterEnv
.
window
;
}
static
get
XULSupported
(
)
{
return
true
;
}
_buildMarkup
(
)
{
const
doc
=
this
.
win
.
document
;
loadSheet
(
doc
.
ownerGlobal
ACCESSIBLE_BOUNDS_SHEET
)
;
this
.
container
=
createNode
(
this
.
win
{
parent
:
doc
.
body
|
|
doc
.
documentElement
attributes
:
{
"
class
"
:
"
highlighter
-
container
"
"
role
"
:
"
presentation
"
}
}
)
;
this
.
bounds
=
createNode
(
this
.
win
{
parent
:
this
.
container
attributes
:
{
"
class
"
:
"
accessible
-
bounds
"
"
role
"
:
"
presentation
"
}
}
)
;
}
get
_bounds
(
)
{
return
getBounds
(
this
.
win
this
.
options
)
;
}
show
(
node
options
=
{
}
)
{
const
isSameNode
=
node
=
=
=
this
.
currentNode
;
const
hasBounds
=
options
&
&
typeof
options
.
x
=
=
"
number
"
&
&
typeof
options
.
y
=
=
"
number
"
&
&
typeof
options
.
w
=
=
"
number
"
&
&
typeof
options
.
h
=
=
"
number
"
;
if
(
!
hasBounds
|
|
!
isNodeValid
(
node
)
|
|
isSameNode
)
{
return
false
;
}
this
.
options
=
options
;
this
.
currentNode
=
node
;
return
this
.
_show
(
)
;
}
_show
(
)
{
if
(
this
.
_highlightTimer
)
{
clearTimeout
(
this
.
_highlightTimer
)
;
this
.
_highlightTimer
=
null
;
}
const
shown
=
this
.
_update
(
)
;
const
{
duration
}
=
this
.
options
;
if
(
shown
&
&
duration
)
{
this
.
_highlightTimer
=
setTimeout
(
(
)
=
>
{
this
.
_hideAccessibleBounds
(
)
;
}
duration
)
;
}
return
shown
;
}
_update
(
)
{
this
.
_hideAccessibleBounds
(
)
;
const
bounds
=
this
.
_bounds
;
if
(
!
bounds
)
{
return
false
;
}
let
boundsEl
=
this
.
bounds
;
if
(
!
boundsEl
)
{
this
.
_buildMarkup
(
)
;
boundsEl
=
this
.
bounds
;
}
const
{
left
top
width
height
}
=
bounds
;
boundsEl
.
style
.
top
=
{
top
}
px
;
boundsEl
.
style
.
left
=
{
left
}
px
;
boundsEl
.
style
.
width
=
{
width
}
px
;
boundsEl
.
style
.
height
=
{
height
}
px
;
this
.
_showAccessibleBounds
(
)
;
return
true
;
}
hide
(
)
{
if
(
!
this
.
currentNode
|
|
!
this
.
highlighterEnv
.
window
)
{
return
;
}
this
.
_hideAccessibleBounds
(
)
;
this
.
currentNode
=
null
;
this
.
options
=
null
;
}
_showAccessibleBounds
(
)
{
if
(
this
.
container
)
{
this
.
container
.
removeAttribute
(
"
hidden
"
)
;
}
}
_hideAccessibleBounds
(
)
{
if
(
this
.
container
)
{
this
.
container
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
}
destroy
(
)
{
if
(
this
.
_highlightTimer
)
{
clearTimeout
(
this
.
_highlightTimer
)
;
this
.
_highlightTimer
=
null
;
}
this
.
hide
(
)
;
if
(
this
.
container
)
{
this
.
container
.
remove
(
)
;
}
this
.
win
=
null
;
}
}
exports
.
XULWindowAccessibleHighlighter
=
XULWindowAccessibleHighlighter
;
