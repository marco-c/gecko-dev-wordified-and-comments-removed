"
use
strict
"
;
const
{
AutoRefreshHighlighter
}
=
require
(
"
.
/
auto
-
refresh
"
)
;
const
{
getBounds
}
=
require
(
"
.
/
utils
/
accessibility
"
)
;
const
{
CanvasFrameAnonymousContentHelper
createNode
createSVGNode
}
=
require
(
"
.
/
utils
/
markup
"
)
;
const
{
setIgnoreLayoutChanges
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
class
AccessibleHighlighter
extends
AutoRefreshHighlighter
{
constructor
(
highlighterEnv
)
{
super
(
highlighterEnv
)
;
this
.
ID_CLASS_PREFIX
=
"
accessible
-
"
;
this
.
markup
=
new
CanvasFrameAnonymousContentHelper
(
this
.
highlighterEnv
this
.
_buildMarkup
.
bind
(
this
)
)
;
this
.
onPageHide
=
this
.
onPageHide
.
bind
(
this
)
;
this
.
onWillNavigate
=
this
.
onWillNavigate
.
bind
(
this
)
;
this
.
highlighterEnv
.
on
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
this
.
pageListenerTarget
=
highlighterEnv
.
pageListenerTarget
;
this
.
pageListenerTarget
.
addEventListener
(
"
pagehide
"
this
.
onPageHide
)
;
}
_buildMarkup
(
)
{
const
container
=
createNode
(
this
.
win
{
attributes
:
{
"
class
"
:
"
highlighter
-
container
"
"
role
"
:
"
presentation
"
}
}
)
;
const
root
=
createNode
(
this
.
win
{
parent
:
container
attributes
:
{
"
id
"
:
"
root
"
"
class
"
:
"
root
"
"
role
"
:
"
presentation
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
const
svg
=
createSVGNode
(
this
.
win
{
nodeType
:
"
svg
"
parent
:
root
attributes
:
{
"
id
"
:
"
elements
"
"
width
"
:
"
100
%
"
"
height
"
:
"
100
%
"
"
hidden
"
:
"
true
"
"
role
"
:
"
presentation
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
createSVGNode
(
this
.
win
{
nodeType
:
"
path
"
parent
:
svg
attributes
:
{
"
class
"
:
"
bounds
"
"
id
"
:
"
bounds
"
"
role
"
:
"
presentation
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
return
container
;
}
destroy
(
)
{
if
(
this
.
_highlightTimer
)
{
clearTimeout
(
this
.
_highlightTimer
)
;
this
.
_highlightTimer
=
null
;
}
this
.
highlighterEnv
.
off
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
this
.
pageListenerTarget
.
removeEventListener
(
"
pagehide
"
this
.
onPageHide
)
;
this
.
pageListenerTarget
=
null
;
this
.
markup
.
destroy
(
)
;
AutoRefreshHighlighter
.
prototype
.
destroy
.
call
(
this
)
;
}
getElement
(
id
)
{
return
this
.
markup
.
getElement
(
this
.
ID_CLASS_PREFIX
+
id
)
;
}
_show
(
)
{
if
(
this
.
_highlightTimer
)
{
clearTimeout
(
this
.
_highlightTimer
)
;
this
.
_highlightTimer
=
null
;
}
const
{
duration
}
=
this
.
options
;
const
shown
=
this
.
_update
(
)
;
if
(
shown
&
&
duration
)
{
this
.
_highlightTimer
=
setTimeout
(
(
)
=
>
{
this
.
hide
(
)
;
}
duration
)
;
}
return
shown
;
}
_update
(
)
{
let
shown
=
false
;
setIgnoreLayoutChanges
(
true
)
;
if
(
this
.
_updateAccessibleBounds
(
)
)
{
this
.
_showAccessibleBounds
(
)
;
shown
=
true
;
}
else
{
this
.
hide
(
)
;
}
setIgnoreLayoutChanges
(
false
this
.
highlighterEnv
.
window
.
document
.
documentElement
)
;
return
shown
;
}
_hide
(
)
{
setIgnoreLayoutChanges
(
true
)
;
this
.
_hideAccessibleBounds
(
)
;
setIgnoreLayoutChanges
(
false
this
.
highlighterEnv
.
window
.
document
.
documentElement
)
;
}
_hideAccessibleBounds
(
)
{
this
.
getElement
(
"
elements
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
_showAccessibleBounds
(
)
{
this
.
getElement
(
"
elements
"
)
.
removeAttribute
(
"
hidden
"
)
;
}
get
_bounds
(
)
{
return
getBounds
(
this
.
win
this
.
options
)
;
}
_updateAccessibleBounds
(
)
{
const
bounds
=
this
.
_bounds
;
if
(
!
bounds
)
{
this
.
_hideAccessibleBounds
(
)
;
return
false
;
}
const
boundsEl
=
this
.
getElement
(
"
bounds
"
)
;
const
{
left
right
top
bottom
}
=
bounds
;
const
path
=
M
{
left
}
{
top
}
L
{
right
}
{
top
}
L
{
right
}
{
bottom
}
L
{
left
}
{
bottom
}
;
boundsEl
.
setAttribute
(
"
d
"
path
)
;
const
rootId
=
this
.
ID_CLASS_PREFIX
+
"
elements
"
;
this
.
markup
.
scaleRootElement
(
this
.
currentNode
rootId
)
;
return
true
;
}
onPageHide
(
{
target
}
)
{
if
(
target
.
defaultView
=
=
=
this
.
win
)
{
this
.
hide
(
)
;
}
}
onWillNavigate
(
{
isTopLevel
}
)
{
if
(
isTopLevel
)
{
this
.
hide
(
)
;
}
}
}
exports
.
AccessibleHighlighter
=
AccessibleHighlighter
;
