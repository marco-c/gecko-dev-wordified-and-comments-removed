"
use
strict
"
;
const
{
AutoRefreshHighlighter
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
/
auto
-
refresh
.
js
"
)
;
const
{
CanvasFrameAnonymousContentHelper
isNodeValid
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
.
js
"
)
;
const
{
TEXT_NODE
DOCUMENT_NODE
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
dom
-
node
-
constants
.
js
"
)
;
const
{
getCurrentZoom
setIgnoreLayoutChanges
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
layout
/
utils
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
[
"
getBounds
"
"
getBoundsXUL
"
"
Infobar
"
]
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
/
utils
/
accessibility
.
js
"
true
)
;
class
AccessibleHighlighter
extends
AutoRefreshHighlighter
{
constructor
(
highlighterEnv
)
{
super
(
highlighterEnv
)
;
this
.
accessibleInfobar
=
new
Infobar
(
this
)
;
this
.
markup
=
new
CanvasFrameAnonymousContentHelper
(
this
.
highlighterEnv
this
.
_buildMarkup
.
bind
(
this
)
)
;
this
.
isReady
=
this
.
markup
.
initialize
(
)
;
this
.
onPageHide
=
this
.
onPageHide
.
bind
(
this
)
;
this
.
onWillNavigate
=
this
.
onWillNavigate
.
bind
(
this
)
;
this
.
highlighterEnv
.
on
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
this
.
pageListenerTarget
=
highlighterEnv
.
pageListenerTarget
;
this
.
pageListenerTarget
.
addEventListener
(
"
pagehide
"
this
.
onPageHide
)
;
}
static
get
XULSupported
(
)
{
return
true
;
}
get
supportsSimpleHighlighters
(
)
{
return
true
;
}
_buildMarkup
(
)
{
const
container
=
this
.
markup
.
createNode
(
{
attributes
:
{
class
:
"
highlighter
-
container
"
"
aria
-
hidden
"
:
"
true
"
}
}
)
;
this
.
rootEl
=
this
.
markup
.
createNode
(
{
parent
:
container
attributes
:
{
id
:
"
accessible
-
root
"
class
:
"
accessible
-
root
"
+
(
this
.
highlighterEnv
.
useSimpleHighlightersForReducedMotion
?
"
use
-
simple
-
highlighters
"
:
"
"
)
}
}
)
;
const
svg
=
this
.
markup
.
createSVGNode
(
{
nodeType
:
"
svg
"
parent
:
this
.
rootEl
attributes
:
{
id
:
"
accessible
-
elements
"
width
:
"
100
%
"
height
:
"
100
%
"
hidden
:
"
true
"
}
}
)
;
this
.
markup
.
createSVGNode
(
{
nodeType
:
"
path
"
parent
:
svg
attributes
:
{
class
:
"
accessible
-
bounds
"
id
:
"
accessible
-
bounds
"
}
}
)
;
this
.
accessibleInfobar
.
buildMarkup
(
this
.
rootEl
)
;
return
container
;
}
destroy
(
)
{
if
(
this
.
_highlightTimer
)
{
clearTimeout
(
this
.
_highlightTimer
)
;
this
.
_highlightTimer
=
null
;
}
this
.
highlighterEnv
.
off
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
this
.
pageListenerTarget
.
removeEventListener
(
"
pagehide
"
this
.
onPageHide
)
;
this
.
pageListenerTarget
=
null
;
AutoRefreshHighlighter
.
prototype
.
destroy
.
call
(
this
)
;
this
.
accessibleInfobar
.
destroy
(
)
;
this
.
accessibleInfobar
=
null
;
this
.
markup
.
destroy
(
)
;
this
.
rootEl
=
null
;
}
getElement
(
id
)
{
return
this
.
markup
.
getElement
(
id
)
;
}
_isNodeValid
(
node
)
{
return
(
super
.
_isNodeValid
(
node
)
|
|
isNodeValid
(
node
TEXT_NODE
)
|
|
isNodeValid
(
node
DOCUMENT_NODE
)
)
;
}
_show
(
)
{
if
(
this
.
_highlightTimer
)
{
clearTimeout
(
this
.
_highlightTimer
)
;
this
.
_highlightTimer
=
null
;
}
const
{
duration
}
=
this
.
options
;
const
shown
=
this
.
_update
(
)
;
if
(
shown
)
{
this
.
emit
(
"
highlighter
-
event
"
{
options
:
this
.
options
type
:
"
shown
"
}
)
;
if
(
duration
)
{
this
.
_highlightTimer
=
setTimeout
(
(
)
=
>
{
this
.
hide
(
)
;
}
duration
)
;
}
}
return
shown
;
}
_update
(
)
{
let
shown
=
false
;
setIgnoreLayoutChanges
(
true
)
;
if
(
this
.
_updateAccessibleBounds
(
)
)
{
this
.
_showAccessibleBounds
(
)
;
this
.
accessibleInfobar
.
show
(
)
;
shown
=
true
;
}
else
{
this
.
hide
(
)
;
}
setIgnoreLayoutChanges
(
false
this
.
highlighterEnv
.
window
.
document
.
documentElement
)
;
return
shown
;
}
_hide
(
)
{
setIgnoreLayoutChanges
(
true
)
;
this
.
_hideAccessibleBounds
(
)
;
this
.
accessibleInfobar
.
hide
(
)
;
setIgnoreLayoutChanges
(
false
this
.
highlighterEnv
.
window
.
document
.
documentElement
)
;
}
hideAccessibleBounds
(
)
{
if
(
this
.
getElement
(
"
accessible
-
elements
"
)
.
hasAttribute
(
"
hidden
"
)
)
{
return
;
}
this
.
_hideAccessibleBounds
(
)
;
this
.
_shouldRestoreBoundsVisibility
=
true
;
}
showAccessibleBounds
(
)
{
if
(
this
.
_shouldRestoreBoundsVisibility
)
{
this
.
_showAccessibleBounds
(
)
;
}
}
_hideAccessibleBounds
(
)
{
this
.
_shouldRestoreBoundsVisibility
=
null
;
setIgnoreLayoutChanges
(
true
)
;
this
.
getElement
(
"
accessible
-
elements
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
setIgnoreLayoutChanges
(
false
this
.
highlighterEnv
.
window
.
document
.
documentElement
)
;
}
_showAccessibleBounds
(
)
{
this
.
_shouldRestoreBoundsVisibility
=
null
;
if
(
!
this
.
currentNode
|
|
!
this
.
highlighterEnv
.
window
)
{
return
;
}
setIgnoreLayoutChanges
(
true
)
;
this
.
getElement
(
"
accessible
-
elements
"
)
.
removeAttribute
(
"
hidden
"
)
;
setIgnoreLayoutChanges
(
false
this
.
highlighterEnv
.
window
.
document
.
documentElement
)
;
}
get
_bounds
(
)
{
let
{
win
options
}
=
this
;
let
getBoundsFn
=
getBounds
;
if
(
this
.
options
.
isXUL
)
{
let
zoom
=
getCurrentZoom
(
this
.
currentNode
)
;
zoom
*
=
zoom
;
options
=
{
.
.
.
options
zoom
}
;
getBoundsFn
=
getBoundsXUL
;
win
=
this
.
win
.
parent
.
ownerGlobal
;
}
return
getBoundsFn
(
win
options
)
;
}
_updateAccessibleBounds
(
)
{
const
bounds
=
this
.
_bounds
;
if
(
!
bounds
)
{
this
.
_hide
(
)
;
return
false
;
}
const
boundsEl
=
this
.
getElement
(
"
accessible
-
bounds
"
)
;
const
{
left
right
top
bottom
}
=
bounds
;
const
path
=
M
{
left
}
{
top
}
L
{
right
}
{
top
}
L
{
right
}
{
bottom
}
L
{
left
}
{
bottom
}
L
{
left
}
{
top
}
;
boundsEl
.
setAttribute
(
"
d
"
path
)
;
this
.
markup
.
scaleRootElement
(
this
.
currentNode
"
accessible
-
elements
"
)
;
return
true
;
}
onPageHide
(
{
target
}
)
{
if
(
target
.
defaultView
=
=
=
this
.
win
)
{
this
.
hide
(
)
;
}
}
onWillNavigate
(
{
isTopLevel
}
)
{
if
(
isTopLevel
)
{
this
.
hide
(
)
;
}
}
}
exports
.
AccessibleHighlighter
=
AccessibleHighlighter
;
