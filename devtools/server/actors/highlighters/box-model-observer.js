"
use
strict
"
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
debugger
-
server
"
)
;
const
{
AutoRefreshHighlighter
}
=
require
(
"
devtools
/
server
/
actors
/
highlighters
/
auto
-
refresh
"
)
;
const
{
getBindingElementAndPseudo
hasPseudoClassLock
isNodeValid
}
=
require
(
"
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
"
)
;
const
{
PSEUDO_CLASSES
}
=
require
(
"
devtools
/
shared
/
css
/
constants
"
)
;
const
{
getCurrentZoom
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
const
{
getNodeDisplayName
getNodeGridFlexType
}
=
require
(
"
devtools
/
server
/
actors
/
inspector
/
utils
"
)
;
const
nodeConstants
=
require
(
"
devtools
/
shared
/
dom
-
node
-
constants
"
)
;
const
{
LocalizationHelper
}
=
require
(
"
devtools
/
shared
/
l10n
"
)
;
const
STRINGS_URI
=
"
devtools
/
shared
/
locales
/
highlighters
.
properties
"
;
const
L10N
=
new
LocalizationHelper
(
STRINGS_URI
)
;
const
{
BOX_MODEL_REGIONS
BoxModelHighlighterRenderer
}
=
require
(
"
devtools
/
server
/
actors
/
highlighters
/
box
-
model
-
renderer
"
)
;
class
BoxModelHighlighterObserver
extends
AutoRefreshHighlighter
{
constructor
(
highlighterEnv
conn
)
{
super
(
highlighterEnv
)
;
this
.
conn
=
conn
;
this
.
_ignoreScroll
=
true
;
this
.
typeName
=
this
.
constructor
.
name
.
replace
(
"
Observer
"
"
"
)
;
if
(
DebuggerServer
.
isInChildProcess
)
{
this
.
conn
.
setupInParent
(
{
module
:
"
devtools
/
server
/
actors
/
highlighters
/
box
-
model
-
renderer
"
setupParent
:
"
setupParentProcess
"
}
)
;
}
else
{
this
.
renderer
=
new
BoxModelHighlighterRenderer
(
)
;
}
this
.
regionFill
=
{
}
;
this
.
onPageHide
=
this
.
onPageHide
.
bind
(
this
)
;
this
.
onWillNavigate
=
this
.
onWillNavigate
.
bind
(
this
)
;
this
.
highlighterEnv
.
on
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
const
{
pageListenerTarget
}
=
highlighterEnv
;
pageListenerTarget
.
addEventListener
(
"
pagehide
"
this
.
onPageHide
)
;
}
destroy
(
)
{
this
.
highlighterEnv
.
off
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
const
{
pageListenerTarget
}
=
this
.
highlighterEnv
;
if
(
pageListenerTarget
)
{
pageListenerTarget
.
removeEventListener
(
"
pagehide
"
this
.
onPageHide
)
;
}
if
(
DebuggerServer
.
isInChildProcess
)
{
this
.
postMessage
(
"
destroy
"
)
;
}
else
{
this
.
renderer
.
destroy
(
)
;
this
.
renderer
=
null
;
}
AutoRefreshHighlighter
.
prototype
.
destroy
.
call
(
this
)
;
}
get
messageManager
(
)
{
if
(
!
DebuggerServer
.
isInChildProcess
)
{
throw
new
Error
(
"
Message
manager
should
only
be
used
when
actor
is
in
child
process
.
"
)
;
}
return
this
.
conn
.
parentMessageManager
;
}
postMessage
(
topic
data
=
{
}
)
{
this
.
_msgName
=
debug
:
{
this
.
conn
.
prefix
}
{
this
.
typeName
}
;
this
.
messageManager
.
sendAsyncMessage
(
this
.
_msgName
{
topic
data
}
)
;
}
render
(
data
)
{
if
(
DebuggerServer
.
isInChildProcess
)
{
this
.
postMessage
(
"
render
"
data
)
;
}
else
{
this
.
renderer
.
render
(
data
)
;
}
}
_isNodeValid
(
node
)
{
return
(
node
&
&
(
isNodeValid
(
node
)
|
|
isNodeValid
(
node
nodeConstants
.
TEXT_NODE
)
)
)
;
}
_show
(
)
{
if
(
!
BOX_MODEL_REGIONS
.
includes
(
this
.
options
.
region
)
)
{
this
.
options
.
region
=
"
content
"
;
}
const
shown
=
this
.
_update
(
)
;
this
.
_trackMutations
(
)
;
return
shown
;
}
_trackMutations
(
)
{
if
(
isNodeValid
(
this
.
currentNode
)
)
{
const
win
=
this
.
currentNode
.
ownerGlobal
;
this
.
currentNodeObserver
=
new
win
.
MutationObserver
(
this
.
update
)
;
this
.
currentNodeObserver
.
observe
(
this
.
currentNode
{
attributes
:
true
}
)
;
}
}
_untrackMutations
(
)
{
if
(
isNodeValid
(
this
.
currentNode
)
&
&
this
.
currentNodeObserver
)
{
this
.
currentNodeObserver
.
disconnect
(
)
;
this
.
currentNodeObserver
=
null
;
}
}
_update
(
)
{
const
node
=
this
.
currentNode
;
let
shown
=
false
;
if
(
this
.
_nodeNeedsHighlighting
(
)
)
{
const
data
=
{
.
.
.
this
.
options
currentQuads
:
{
.
.
.
this
.
currentQuads
}
regionFill
:
{
.
.
.
this
.
regionFill
}
nodeData
:
this
.
_getNodeData
(
)
showBoxModel
:
true
showInfoBar
:
!
this
.
options
.
hideInfoBar
&
&
(
node
.
nodeType
=
=
=
node
.
ELEMENT_NODE
|
|
node
.
nodeType
=
=
=
node
.
TEXT_NODE
)
}
;
this
.
render
(
data
)
;
shown
=
true
;
}
else
{
this
.
_hide
(
)
;
}
return
shown
;
}
_hide
(
)
{
this
.
_untrackMutations
(
)
;
this
.
render
(
{
showBoxModel
:
false
showInfoBar
:
false
}
)
;
}
_nodeNeedsHighlighting
(
)
{
return
(
this
.
currentQuads
.
margin
.
length
|
|
this
.
currentQuads
.
border
.
length
|
|
this
.
currentQuads
.
padding
.
length
|
|
this
.
currentQuads
.
content
.
length
)
;
}
_getNodeData
(
)
{
if
(
!
this
.
currentNode
)
{
return
null
;
}
const
{
bindingElement
:
node
pseudo
}
=
getBindingElementAndPseudo
(
this
.
currentNode
)
;
const
displayName
=
getNodeDisplayName
(
node
)
;
const
id
=
node
.
id
?
"
#
"
+
node
.
id
:
"
"
;
const
classList
=
(
node
.
classList
|
|
[
]
)
.
length
?
"
.
"
+
[
.
.
.
node
.
classList
]
.
join
(
"
.
"
)
:
"
"
;
let
pseudos
=
this
.
_getPseudoClasses
(
node
)
.
join
(
"
"
)
;
if
(
pseudo
)
{
pseudos
+
=
"
:
"
+
pseudo
;
}
const
zoom
=
getCurrentZoom
(
this
.
win
)
;
const
{
grid
:
gridType
flex
:
flexType
}
=
getNodeGridFlexType
(
node
)
;
const
gridLayoutTextType
=
this
.
_getLayoutTextType
(
"
gridType
"
gridType
)
;
const
flexLayoutTextType
=
this
.
_getLayoutTextType
(
"
flexType
"
flexType
)
;
return
{
classList
displayName
flexLayoutTextType
gridLayoutTextType
id
pseudos
zoom
}
;
}
_getLayoutTextType
(
layoutTypeKey
{
isContainer
isItem
}
)
{
if
(
!
isContainer
&
&
!
isItem
)
{
return
"
"
;
}
if
(
isContainer
&
&
!
isItem
)
{
return
L10N
.
getStr
(
{
layoutTypeKey
}
.
container
)
;
}
if
(
!
isContainer
&
&
isItem
)
{
return
L10N
.
getStr
(
{
layoutTypeKey
}
.
item
)
;
}
return
L10N
.
getStr
(
{
layoutTypeKey
}
.
dual
)
;
}
_getPseudoClasses
(
node
)
{
if
(
node
.
nodeType
!
=
=
nodeConstants
.
ELEMENT_NODE
)
{
return
[
]
;
}
return
PSEUDO_CLASSES
.
filter
(
pseudo
=
>
hasPseudoClassLock
(
node
pseudo
)
)
;
}
onPageHide
(
{
target
}
)
{
if
(
target
.
defaultView
=
=
=
this
.
win
)
{
this
.
hide
(
)
;
}
}
onWillNavigate
(
{
isTopLevel
}
)
{
if
(
isTopLevel
)
{
this
.
hide
(
)
;
}
}
}
exports
.
BoxModelHighlighterObserver
=
BoxModelHighlighterObserver
;
