"
use
strict
"
;
const
{
CanvasFrameAnonymousContentHelper
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
.
js
"
)
;
loader
.
lazyGetter
(
this
"
HighlightersBundle
"
(
)
=
>
{
return
new
Localization
(
[
"
devtools
/
shared
/
highlighters
.
ftl
"
]
true
)
;
}
)
;
loader
.
lazyGetter
(
this
"
isAndroid
"
(
)
=
>
{
return
Services
.
appinfo
.
OS
=
=
=
"
Android
"
;
}
)
;
class
RemoteNodePickerNotice
{
#
highlighterEnvironment
;
#
previousHoveredElement
;
rootElementId
=
"
node
-
picker
-
notice
-
root
"
;
hideButtonId
=
"
node
-
picker
-
notice
-
hide
-
button
"
;
infoNoticeElementId
=
"
node
-
picker
-
notice
-
info
"
;
constructor
(
highlighterEnvironment
)
{
this
.
#
highlighterEnvironment
=
highlighterEnvironment
;
this
.
markup
=
new
CanvasFrameAnonymousContentHelper
(
this
.
#
highlighterEnvironment
this
.
#
buildMarkup
{
contentRootHostClassName
:
"
devtools
-
highlighter
-
remote
-
node
-
picker
-
notice
"
}
)
;
this
.
isReady
=
this
.
markup
.
initialize
(
)
;
}
#
buildMarkup
=
(
)
=
>
{
const
container
=
this
.
markup
.
createNode
(
{
attributes
:
{
class
:
"
highlighter
-
container
"
}
}
)
;
const
wrapper
=
this
.
markup
.
createNode
(
{
parent
:
container
attributes
:
{
id
:
this
.
rootElementId
hidden
:
"
true
"
overlay
:
"
true
"
}
}
)
;
const
toolbar
=
this
.
markup
.
createNode
(
{
parent
:
wrapper
attributes
:
{
id
:
"
node
-
picker
-
notice
-
toolbar
"
class
:
"
toolbar
"
}
}
)
;
this
.
markup
.
createNode
(
{
parent
:
toolbar
attributes
:
{
id
:
"
node
-
picker
-
notice
-
icon
"
class
:
isAndroid
?
"
touch
"
:
"
"
}
}
)
;
const
actionStr
=
HighlightersBundle
.
formatValueSync
(
isAndroid
?
"
remote
-
node
-
picker
-
notice
-
action
-
touch
"
:
"
remote
-
node
-
picker
-
notice
-
action
-
desktop
"
)
;
this
.
markup
.
createNode
(
{
nodeType
:
"
span
"
parent
:
toolbar
text
:
HighlightersBundle
.
formatValueSync
(
"
remote
-
node
-
picker
-
notice
"
{
action
:
actionStr
}
)
attributes
:
{
id
:
this
.
infoNoticeElementId
}
}
)
;
this
.
markup
.
createNode
(
{
nodeType
:
"
button
"
parent
:
toolbar
text
:
HighlightersBundle
.
formatValueSync
(
"
remote
-
node
-
picker
-
notice
-
hide
-
button
"
)
attributes
:
{
id
:
this
.
hideButtonId
}
}
)
;
return
container
;
}
;
destroy
(
)
{
this
.
hide
(
)
;
this
.
markup
.
destroy
(
)
;
this
.
#
highlighterEnvironment
=
null
;
this
.
#
previousHoveredElement
=
null
;
}
onClick
(
e
)
{
const
target
=
e
.
originalTarget
|
|
e
.
target
;
const
targetId
=
target
?
.
id
;
if
(
targetId
=
=
=
this
.
hideButtonId
)
{
this
.
hide
(
)
;
}
}
handleHoveredElement
(
e
)
{
const
hideButton
=
this
.
markup
.
getElement
(
this
.
hideButtonId
)
;
const
target
=
e
.
originalTarget
|
|
e
.
target
;
const
targetId
=
target
?
.
id
;
if
(
this
.
#
previousHoveredElement
?
.
id
=
=
=
targetId
)
{
return
;
}
if
(
targetId
=
=
=
this
.
hideButtonId
)
{
hideButton
.
classList
?
.
add
(
"
hover
"
)
;
}
else
{
hideButton
.
classList
?
.
remove
(
"
hover
"
)
;
}
this
.
#
previousHoveredElement
=
target
;
}
getMarkupRootElement
(
)
{
return
this
.
markup
.
getElement
(
this
.
rootElementId
)
;
}
async
show
(
)
{
if
(
this
.
#
highlighterEnvironment
.
isXUL
)
{
return
false
;
}
await
this
.
isReady
;
const
root
=
this
.
getMarkupRootElement
(
)
;
root
.
removeAttribute
(
"
hidden
"
)
;
root
.
setAttribute
(
"
overlay
"
"
true
"
)
;
return
true
;
}
hide
(
)
{
if
(
this
.
#
highlighterEnvironment
.
isXUL
)
{
return
;
}
this
.
getMarkupRootElement
(
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
this
.
markup
.
getElement
(
this
.
hideButtonId
)
.
classList
.
remove
(
"
hover
"
)
;
this
.
#
previousHoveredElement
=
null
;
}
}
exports
.
RemoteNodePickerNotice
=
RemoteNodePickerNotice
;
