"
use
strict
"
;
const
{
isNodeValid
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
.
js
"
)
;
const
{
BoxModelHighlighter
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
/
box
-
model
.
js
"
)
;
const
MAX_HIGHLIGHTED_ELEMENTS
=
100
;
class
SelectorHighlighter
{
constructor
(
highlighterEnv
inspector
)
{
this
.
highlighterEnv
=
highlighterEnv
;
this
.
inspector
=
inspector
;
this
.
_highlighters
=
[
]
;
}
async
show
(
node
options
=
{
}
)
{
this
.
hide
(
)
;
if
(
!
isNodeValid
(
node
)
|
|
!
options
.
selector
)
{
return
false
;
}
let
nodes
=
[
]
;
if
(
options
.
ruleActorID
&
&
this
.
inspector
)
{
const
pageStyle
=
await
this
.
inspector
.
getPageStyle
(
)
;
const
rule
=
pageStyle
.
getActorByID
(
options
.
ruleActorID
)
;
if
(
rule
)
{
nodes
=
rule
.
rawRule
.
querySelectorAll
(
node
.
getRootNode
(
)
)
;
}
}
else
{
try
{
nodes
=
node
.
ownerDocument
.
querySelectorAll
(
options
.
selector
)
;
}
catch
(
e
)
{
}
}
delete
options
.
selector
;
const
promises
=
[
]
;
for
(
let
i
=
0
;
i
<
Math
.
min
(
nodes
.
length
MAX_HIGHLIGHTED_ELEMENTS
)
;
i
+
+
)
{
promises
.
push
(
this
.
_showHighlighter
(
nodes
[
i
]
options
)
)
;
}
await
Promise
.
all
(
promises
)
;
return
true
;
}
async
_showHighlighter
(
node
options
)
{
const
highlighter
=
new
BoxModelHighlighter
(
this
.
highlighterEnv
)
;
await
highlighter
.
isReady
;
highlighter
.
show
(
node
options
)
;
this
.
_highlighters
.
push
(
highlighter
)
;
}
hide
(
)
{
for
(
const
highlighter
of
this
.
_highlighters
)
{
highlighter
.
destroy
(
)
;
}
this
.
_highlighters
=
[
]
;
}
destroy
(
)
{
this
.
hide
(
)
;
this
.
highlighterEnv
=
null
;
}
}
exports
.
SelectorHighlighter
=
SelectorHighlighter
;
