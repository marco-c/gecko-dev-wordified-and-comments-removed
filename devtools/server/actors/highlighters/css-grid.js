"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
extend
}
=
require
(
"
sdk
/
core
/
heritage
"
)
;
const
{
AutoRefreshHighlighter
}
=
require
(
"
.
/
auto
-
refresh
"
)
;
const
{
CanvasFrameAnonymousContentHelper
createNode
createSVGNode
moveInfobar
}
=
require
(
"
.
/
utils
/
markup
"
)
;
const
{
getCurrentZoom
setIgnoreLayoutChanges
getWindowDimensions
getMaxSurfaceSize
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
const
{
stringifyGridFragments
}
=
require
(
"
devtools
/
server
/
actors
/
utils
/
css
-
grid
-
utils
"
)
;
const
CSS_GRID_ENABLED_PREF
=
"
layout
.
css
.
grid
.
enabled
"
;
const
DEFAULT_GRID_COLOR
=
"
#
4B0082
"
;
const
COLUMNS
=
"
cols
"
;
const
ROWS
=
"
rows
"
;
const
GRID_LINES_PROPERTIES
=
{
"
edge
"
:
{
lineDash
:
[
0
0
]
alpha
:
1
}
"
explicit
"
:
{
lineDash
:
[
5
3
]
alpha
:
0
.
75
}
"
implicit
"
:
{
lineDash
:
[
2
2
]
alpha
:
0
.
5
}
}
;
const
GRID_GAP_PATTERN_WIDTH
=
14
;
const
GRID_GAP_PATTERN_HEIGHT
=
14
;
const
GRID_GAP_PATTERN_LINE_DASH
=
[
5
3
]
;
const
GRID_GAP_ALPHA
=
0
.
5
;
const
gCachedGridPattern
=
new
Map
(
)
;
const
MAX_ALLOC_SIZE
=
500000000
;
const
BYTES_PER_PIXEL
=
4
;
const
MAX_ALLOC_PIXELS
=
MAX_ALLOC_SIZE
/
BYTES_PER_PIXEL
;
const
MAX_ALLOC_PIXELS_PER_SIDE
=
Math
.
sqrt
(
MAX_ALLOC_PIXELS
)
|
0
;
function
CssGridHighlighter
(
highlighterEnv
)
{
AutoRefreshHighlighter
.
call
(
this
highlighterEnv
)
;
this
.
maxCanvasSizePerSide
=
getMaxSurfaceSize
(
this
.
highlighterEnv
.
window
)
;
this
.
_contentSize
=
{
width
:
0
height
:
0
}
;
this
.
markup
=
new
CanvasFrameAnonymousContentHelper
(
this
.
highlighterEnv
this
.
_buildMarkup
.
bind
(
this
)
)
;
this
.
onNavigate
=
this
.
onNavigate
.
bind
(
this
)
;
this
.
onPageHide
=
this
.
onPageHide
.
bind
(
this
)
;
this
.
onWillNavigate
=
this
.
onWillNavigate
.
bind
(
this
)
;
this
.
highlighterEnv
.
on
(
"
navigate
"
this
.
onNavigate
)
;
this
.
highlighterEnv
.
on
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
let
{
pageListenerTarget
}
=
highlighterEnv
;
pageListenerTarget
.
addEventListener
(
"
pagehide
"
this
.
onPageHide
)
;
}
CssGridHighlighter
.
prototype
=
extend
(
AutoRefreshHighlighter
.
prototype
{
typeName
:
"
CssGridHighlighter
"
ID_CLASS_PREFIX
:
"
css
-
grid
-
"
_buildMarkup
(
)
{
let
container
=
createNode
(
this
.
win
{
attributes
:
{
"
class
"
:
"
highlighter
-
container
"
}
}
)
;
let
root
=
createNode
(
this
.
win
{
parent
:
container
attributes
:
{
"
id
"
:
"
root
"
"
class
"
:
"
root
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
createNode
(
this
.
win
{
parent
:
root
nodeType
:
"
canvas
"
attributes
:
{
"
id
"
:
"
canvas
"
"
class
"
:
"
canvas
"
"
hidden
"
:
"
true
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
let
svg
=
createSVGNode
(
this
.
win
{
nodeType
:
"
svg
"
parent
:
root
attributes
:
{
"
id
"
:
"
elements
"
"
width
"
:
"
100
%
"
"
height
"
:
"
100
%
"
"
hidden
"
:
"
true
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
let
regions
=
createSVGNode
(
this
.
win
{
nodeType
:
"
g
"
parent
:
svg
attributes
:
{
"
class
"
:
"
regions
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
createSVGNode
(
this
.
win
{
nodeType
:
"
path
"
parent
:
regions
attributes
:
{
"
class
"
:
"
areas
"
"
id
"
:
"
areas
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
createSVGNode
(
this
.
win
{
nodeType
:
"
path
"
parent
:
regions
attributes
:
{
"
class
"
:
"
cells
"
"
id
"
:
"
cells
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
let
areaInfobarContainer
=
createNode
(
this
.
win
{
parent
:
container
attributes
:
{
"
class
"
:
"
area
-
infobar
-
container
"
"
id
"
:
"
area
-
infobar
-
container
"
"
position
"
:
"
top
"
"
hidden
"
:
"
true
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
let
areaInfobar
=
createNode
(
this
.
win
{
parent
:
areaInfobarContainer
attributes
:
{
"
class
"
:
"
infobar
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
let
areaTextbox
=
createNode
(
this
.
win
{
parent
:
areaInfobar
attributes
:
{
"
class
"
:
"
infobar
-
text
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
createNode
(
this
.
win
{
nodeType
:
"
span
"
parent
:
areaTextbox
attributes
:
{
"
class
"
:
"
area
-
infobar
-
name
"
"
id
"
:
"
area
-
infobar
-
name
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
createNode
(
this
.
win
{
nodeType
:
"
span
"
parent
:
areaTextbox
attributes
:
{
"
class
"
:
"
area
-
infobar
-
dimensions
"
"
id
"
:
"
area
-
infobar
-
dimensions
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
let
cellInfobarContainer
=
createNode
(
this
.
win
{
parent
:
container
attributes
:
{
"
class
"
:
"
cell
-
infobar
-
container
"
"
id
"
:
"
cell
-
infobar
-
container
"
"
position
"
:
"
top
"
"
hidden
"
:
"
true
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
let
cellInfobar
=
createNode
(
this
.
win
{
parent
:
cellInfobarContainer
attributes
:
{
"
class
"
:
"
infobar
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
let
cellTextbox
=
createNode
(
this
.
win
{
parent
:
cellInfobar
attributes
:
{
"
class
"
:
"
infobar
-
text
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
createNode
(
this
.
win
{
nodeType
:
"
span
"
parent
:
cellTextbox
attributes
:
{
"
class
"
:
"
cell
-
infobar
-
position
"
"
id
"
:
"
cell
-
infobar
-
position
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
createNode
(
this
.
win
{
nodeType
:
"
span
"
parent
:
cellTextbox
attributes
:
{
"
class
"
:
"
cell
-
infobar
-
dimensions
"
"
id
"
:
"
cell
-
infobar
-
dimensions
"
}
prefix
:
this
.
ID_CLASS_PREFIX
}
)
;
return
container
;
}
destroy
(
)
{
let
{
highlighterEnv
}
=
this
;
highlighterEnv
.
off
(
"
navigate
"
this
.
onNavigate
)
;
highlighterEnv
.
off
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
let
{
pageListenerTarget
}
=
highlighterEnv
;
if
(
pageListenerTarget
)
{
pageListenerTarget
.
removeEventListener
(
"
pagehide
"
this
.
onPageHide
)
;
}
this
.
markup
.
destroy
(
)
;
this
.
_clearCache
(
)
;
AutoRefreshHighlighter
.
prototype
.
destroy
.
call
(
this
)
;
}
getElement
(
id
)
{
return
this
.
markup
.
getElement
(
this
.
ID_CLASS_PREFIX
+
id
)
;
}
get
ctx
(
)
{
return
this
.
canvas
.
getCanvasContext
(
"
2d
"
)
;
}
get
canvas
(
)
{
return
this
.
getElement
(
"
canvas
"
)
;
}
get
color
(
)
{
return
this
.
options
.
color
|
|
DEFAULT_GRID_COLOR
;
}
getGridGapPattern
(
devicePixelRatio
dimension
)
{
let
gridPatternMap
=
null
;
if
(
gCachedGridPattern
.
has
(
devicePixelRatio
)
)
{
gridPatternMap
=
gCachedGridPattern
.
get
(
devicePixelRatio
)
;
}
else
{
gridPatternMap
=
new
Map
(
)
;
}
if
(
gridPatternMap
.
has
(
dimension
)
)
{
return
gridPatternMap
.
get
(
dimension
)
;
}
let
canvas
=
createNode
(
this
.
win
{
nodeType
:
"
canvas
"
}
)
;
let
width
=
canvas
.
width
=
GRID_GAP_PATTERN_WIDTH
*
devicePixelRatio
;
let
height
=
canvas
.
height
=
GRID_GAP_PATTERN_HEIGHT
*
devicePixelRatio
;
let
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
ctx
.
save
(
)
;
ctx
.
setLineDash
(
GRID_GAP_PATTERN_LINE_DASH
)
;
ctx
.
beginPath
(
)
;
ctx
.
translate
(
.
5
.
5
)
;
if
(
dimension
=
=
=
COLUMNS
)
{
ctx
.
moveTo
(
0
0
)
;
ctx
.
lineTo
(
width
height
)
;
}
else
{
ctx
.
moveTo
(
width
0
)
;
ctx
.
lineTo
(
0
height
)
;
}
ctx
.
strokeStyle
=
this
.
color
;
ctx
.
globalAlpha
=
GRID_GAP_ALPHA
;
ctx
.
stroke
(
)
;
ctx
.
restore
(
)
;
let
pattern
=
ctx
.
createPattern
(
canvas
"
repeat
"
)
;
gridPatternMap
.
set
(
dimension
pattern
)
;
gCachedGridPattern
.
set
(
devicePixelRatio
gridPatternMap
)
;
return
pattern
;
}
onNavigate
(
)
{
this
.
_clearCache
(
)
;
}
onPageHide
:
function
(
{
target
}
)
{
if
(
target
.
defaultView
=
=
=
this
.
win
)
{
this
.
hide
(
)
;
}
}
onWillNavigate
(
{
isTopLevel
}
)
{
if
(
isTopLevel
)
{
this
.
hide
(
)
;
}
}
_show
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
CSS_GRID_ENABLED_PREF
)
&
&
!
this
.
isGrid
(
)
)
{
this
.
hide
(
)
;
return
false
;
}
this
.
_clearCache
(
)
;
this
.
_hide
(
)
;
return
this
.
_update
(
)
;
}
_clearCache
(
)
{
gCachedGridPattern
.
clear
(
)
;
}
showGridArea
(
areaName
)
{
this
.
renderGridArea
(
areaName
)
;
}
showAllGridAreas
(
)
{
this
.
renderGridArea
(
)
;
}
clearGridAreas
(
)
{
let
areas
=
this
.
getElement
(
"
areas
"
)
;
areas
.
setAttribute
(
"
d
"
"
"
)
;
}
showGridCell
(
{
gridFragmentIndex
rowNumber
columnNumber
}
)
{
this
.
renderGridCell
(
gridFragmentIndex
rowNumber
columnNumber
)
;
}
clearGridCell
(
)
{
let
cells
=
this
.
getElement
(
"
cells
"
)
;
cells
.
setAttribute
(
"
d
"
"
"
)
;
}
isGrid
(
)
{
return
this
.
currentNode
.
getGridFragments
(
)
.
length
>
0
;
}
_hasMoved
(
)
{
let
hasMoved
=
AutoRefreshHighlighter
.
prototype
.
_hasMoved
.
call
(
this
)
;
let
oldGridData
=
stringifyGridFragments
(
this
.
gridData
)
;
this
.
gridData
=
this
.
currentNode
.
getGridFragments
(
)
;
let
newGridData
=
stringifyGridFragments
(
this
.
gridData
)
;
return
hasMoved
|
|
oldGridData
!
=
=
newGridData
;
}
_update
(
)
{
setIgnoreLayoutChanges
(
true
)
;
let
root
=
this
.
getElement
(
"
root
"
)
;
root
.
setAttribute
(
"
style
"
"
display
:
none
"
)
;
this
.
currentNode
.
offsetWidth
;
let
{
width
height
}
=
getWindowDimensions
(
this
.
win
)
;
this
.
clearCanvas
(
width
height
)
;
this
.
clearGridAreas
(
)
;
this
.
clearGridCell
(
)
;
for
(
let
i
=
0
;
i
<
this
.
gridData
.
length
;
i
+
+
)
{
let
fragment
=
this
.
gridData
[
i
]
;
let
quad
=
this
.
currentQuads
.
content
[
i
]
;
this
.
renderFragment
(
fragment
quad
)
;
}
if
(
this
.
options
.
showAllGridAreas
)
{
this
.
showAllGridAreas
(
)
;
}
else
if
(
this
.
options
.
showGridArea
)
{
this
.
showGridArea
(
this
.
options
.
showGridArea
)
;
}
if
(
this
.
options
.
showGridCell
)
{
this
.
showGridCell
(
this
.
options
.
showGridCell
)
;
}
this
.
_showGrid
(
)
;
this
.
_showGridElements
(
)
;
root
.
setAttribute
(
"
style
"
position
:
absolute
;
width
:
{
width
}
px
;
height
:
{
height
}
px
;
overflow
:
hidden
)
;
setIgnoreLayoutChanges
(
false
this
.
highlighterEnv
.
document
.
documentElement
)
;
return
true
;
}
_updateGridAreaInfobar
(
area
x1
x2
y1
y2
)
{
let
width
=
x2
-
x1
;
let
height
=
y2
-
y1
;
let
dim
=
parseFloat
(
width
.
toPrecision
(
6
)
)
+
"
\
u00D7
"
+
parseFloat
(
height
.
toPrecision
(
6
)
)
;
this
.
getElement
(
"
area
-
infobar
-
name
"
)
.
setTextContent
(
area
.
name
)
;
this
.
getElement
(
"
area
-
infobar
-
dimensions
"
)
.
setTextContent
(
dim
)
;
let
container
=
this
.
getElement
(
"
area
-
infobar
-
container
"
)
;
this
.
_moveInfobar
(
container
x1
x2
y1
y2
)
;
}
_updateGridCellInfobar
(
rowNumber
columnNumber
x1
x2
y1
y2
)
{
let
width
=
x2
-
x1
;
let
height
=
y2
-
y1
;
let
dim
=
parseFloat
(
width
.
toPrecision
(
6
)
)
+
"
\
u00D7
"
+
parseFloat
(
height
.
toPrecision
(
6
)
)
;
let
position
=
{
rowNumber
}
\
/
{
columnNumber
}
;
this
.
getElement
(
"
cell
-
infobar
-
position
"
)
.
setTextContent
(
position
)
;
this
.
getElement
(
"
cell
-
infobar
-
dimensions
"
)
.
setTextContent
(
dim
)
;
let
container
=
this
.
getElement
(
"
cell
-
infobar
-
container
"
)
;
this
.
_moveInfobar
(
container
x1
x2
y1
y2
)
;
}
_moveInfobar
(
container
x1
x2
y1
y2
)
{
let
bounds
=
{
bottom
:
y2
height
:
y2
-
y1
left
:
x1
right
:
x2
top
:
y1
width
:
x2
-
x1
x
:
x1
y
:
y1
}
;
moveInfobar
(
container
bounds
this
.
win
)
;
}
clearCanvas
(
width
height
)
{
let
ratio
=
parseFloat
(
(
this
.
win
.
devicePixelRatio
|
|
1
)
.
toFixed
(
2
)
)
;
height
*
=
ratio
;
width
*
=
ratio
;
let
hasResolutionChanged
=
false
;
if
(
height
!
=
=
this
.
_contentSize
.
height
|
|
width
!
=
=
this
.
_contentSize
.
width
)
{
hasResolutionChanged
=
true
;
this
.
_contentSize
.
width
=
width
;
this
.
_contentSize
.
height
=
height
;
}
let
isCanvasClipped
=
false
;
if
(
height
>
this
.
maxCanvasSizePerSide
)
{
height
=
this
.
maxCanvasSizePerSide
;
isCanvasClipped
=
true
;
}
if
(
width
>
this
.
maxCanvasSizePerSide
)
{
width
=
this
.
maxCanvasSizePerSide
;
isCanvasClipped
=
true
;
}
if
(
width
*
height
>
MAX_ALLOC_PIXELS
)
{
isCanvasClipped
=
true
;
if
(
height
>
width
&
&
width
<
MAX_ALLOC_PIXELS_PER_SIDE
)
{
height
=
(
MAX_ALLOC_PIXELS
/
width
)
|
0
;
}
else
if
(
width
>
height
&
&
height
<
MAX_ALLOC_PIXELS_PER_SIDE
)
{
width
=
(
MAX_ALLOC_PIXELS
/
height
)
|
0
;
}
else
{
height
=
width
=
MAX_ALLOC_PIXELS_PER_SIDE
;
}
}
if
(
hasResolutionChanged
&
&
isCanvasClipped
)
{
this
.
win
.
console
.
warn
(
"
The
CSS
Grid
Highlighter
could
have
been
clipped
due
"
+
"
the
size
of
the
document
inspected
\
n
"
+
"
See
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1343217
"
+
"
for
further
information
.
"
)
;
}
this
.
canvas
.
setAttribute
(
"
width
"
width
)
;
this
.
canvas
.
setAttribute
(
"
height
"
height
)
;
this
.
canvas
.
setAttribute
(
"
style
"
width
:
{
width
/
ratio
}
px
;
height
:
{
height
/
ratio
}
px
;
)
;
this
.
ctx
.
clearRect
(
0
0
width
height
)
;
}
getFirstRowLinePos
(
fragment
)
{
return
fragment
.
rows
.
lines
[
0
]
.
start
;
}
getLastRowLinePos
(
fragment
)
{
return
fragment
.
rows
.
lines
[
fragment
.
rows
.
lines
.
length
-
1
]
.
start
;
}
getFirstColLinePos
(
fragment
)
{
return
fragment
.
cols
.
lines
[
0
]
.
start
;
}
getLastColLinePos
(
fragment
)
{
return
fragment
.
cols
.
lines
[
fragment
.
cols
.
lines
.
length
-
1
]
.
start
;
}
getLastEdgeLineIndex
(
tracks
)
{
let
trackIndex
=
tracks
.
length
-
1
;
while
(
trackIndex
>
=
0
&
&
tracks
[
trackIndex
]
.
type
!
=
"
explicit
"
)
{
trackIndex
-
-
;
}
return
trackIndex
+
1
;
}
renderFragment
(
fragment
quad
)
{
this
.
renderLines
(
fragment
.
cols
quad
COLUMNS
"
left
"
"
top
"
"
height
"
this
.
getFirstRowLinePos
(
fragment
)
this
.
getLastRowLinePos
(
fragment
)
)
;
this
.
renderLines
(
fragment
.
rows
quad
ROWS
"
top
"
"
left
"
"
width
"
this
.
getFirstColLinePos
(
fragment
)
this
.
getLastColLinePos
(
fragment
)
)
;
}
renderLines
(
gridDimension
{
bounds
}
dimensionType
mainSide
crossSide
mainSize
startPos
endPos
)
{
let
lineStartPos
=
(
bounds
[
crossSide
]
/
getCurrentZoom
(
this
.
win
)
)
+
startPos
;
let
lineEndPos
=
(
bounds
[
crossSide
]
/
getCurrentZoom
(
this
.
win
)
)
+
endPos
;
if
(
this
.
options
.
showInfiniteLines
)
{
lineStartPos
=
0
;
lineEndPos
=
parseInt
(
this
.
canvas
.
getAttribute
(
mainSize
)
10
)
;
}
let
lastEdgeLineIndex
=
this
.
getLastEdgeLineIndex
(
gridDimension
.
tracks
)
;
for
(
let
i
=
0
;
i
<
gridDimension
.
lines
.
length
;
i
+
+
)
{
let
line
=
gridDimension
.
lines
[
i
]
;
let
linePos
=
(
bounds
[
mainSide
]
/
getCurrentZoom
(
this
.
win
)
)
+
line
.
start
;
if
(
this
.
options
.
showGridLineNumbers
)
{
this
.
renderGridLineNumber
(
line
.
number
linePos
lineStartPos
dimensionType
)
;
}
if
(
i
=
=
0
|
|
i
=
=
lastEdgeLineIndex
)
{
this
.
renderLine
(
linePos
lineStartPos
lineEndPos
dimensionType
"
edge
"
)
;
}
else
{
this
.
renderLine
(
linePos
lineStartPos
lineEndPos
dimensionType
gridDimension
.
tracks
[
i
-
1
]
.
type
)
;
}
if
(
line
.
breadth
>
0
)
{
this
.
renderGridGap
(
linePos
lineStartPos
lineEndPos
line
.
breadth
dimensionType
)
;
this
.
renderLine
(
linePos
+
line
.
breadth
lineStartPos
lineEndPos
dimensionType
gridDimension
.
tracks
[
i
]
.
type
)
;
}
}
}
renderLine
(
linePos
startPos
endPos
dimensionType
lineType
)
{
let
ratio
=
this
.
win
.
devicePixelRatio
;
linePos
=
Math
.
round
(
linePos
*
ratio
)
;
startPos
=
Math
.
round
(
startPos
*
ratio
)
;
endPos
=
Math
.
round
(
endPos
*
ratio
)
;
this
.
ctx
.
save
(
)
;
this
.
ctx
.
setLineDash
(
GRID_LINES_PROPERTIES
[
lineType
]
.
lineDash
)
;
this
.
ctx
.
beginPath
(
)
;
this
.
ctx
.
translate
(
.
5
.
5
)
;
if
(
dimensionType
=
=
=
COLUMNS
)
{
this
.
ctx
.
moveTo
(
linePos
startPos
)
;
this
.
ctx
.
lineTo
(
linePos
endPos
)
;
}
else
{
this
.
ctx
.
moveTo
(
startPos
linePos
)
;
this
.
ctx
.
lineTo
(
endPos
linePos
)
;
}
this
.
ctx
.
strokeStyle
=
this
.
color
;
this
.
ctx
.
globalAlpha
=
GRID_LINES_PROPERTIES
[
lineType
]
.
alpha
;
this
.
ctx
.
stroke
(
)
;
this
.
ctx
.
restore
(
)
;
}
renderGridLineNumber
(
lineNumber
linePos
startPos
dimensionType
)
{
let
ratio
=
this
.
win
.
devicePixelRatio
;
linePos
=
Math
.
round
(
linePos
*
ratio
)
;
startPos
=
Math
.
round
(
startPos
*
ratio
)
;
this
.
ctx
.
save
(
)
;
let
textWidth
=
this
.
ctx
.
measureText
(
lineNumber
)
.
width
;
let
textHeight
=
textWidth
*
2
;
if
(
dimensionType
=
=
=
COLUMNS
)
{
let
yPos
=
Math
.
max
(
startPos
textHeight
)
;
this
.
ctx
.
fillText
(
lineNumber
linePos
yPos
)
;
}
else
{
let
xPos
=
Math
.
max
(
startPos
textWidth
)
;
this
.
ctx
.
fillText
(
lineNumber
xPos
-
textWidth
linePos
)
;
}
this
.
ctx
.
restore
(
)
;
}
renderGridGap
(
linePos
startPos
endPos
breadth
dimensionType
)
{
let
ratio
=
this
.
win
.
devicePixelRatio
;
linePos
=
Math
.
round
(
linePos
*
ratio
)
;
startPos
=
Math
.
round
(
startPos
*
ratio
)
;
endPos
=
Math
.
round
(
endPos
*
ratio
)
;
breadth
=
Math
.
round
(
breadth
*
ratio
)
;
this
.
ctx
.
save
(
)
;
this
.
ctx
.
fillStyle
=
this
.
getGridGapPattern
(
ratio
dimensionType
)
;
if
(
dimensionType
=
=
=
COLUMNS
)
{
this
.
ctx
.
fillRect
(
linePos
startPos
breadth
endPos
-
startPos
)
;
}
else
{
this
.
ctx
.
fillRect
(
startPos
linePos
endPos
-
startPos
breadth
)
;
}
this
.
ctx
.
restore
(
)
;
}
renderGridArea
(
areaName
)
{
let
paths
=
[
]
;
let
currentZoom
=
getCurrentZoom
(
this
.
win
)
;
for
(
let
i
=
0
;
i
<
this
.
gridData
.
length
;
i
+
+
)
{
let
fragment
=
this
.
gridData
[
i
]
;
let
{
bounds
}
=
this
.
currentQuads
.
content
[
i
]
;
for
(
let
area
of
fragment
.
areas
)
{
if
(
areaName
&
&
areaName
!
=
area
.
name
)
{
continue
;
}
let
rowStart
=
fragment
.
rows
.
lines
[
area
.
rowStart
-
1
]
;
let
rowEnd
=
fragment
.
rows
.
lines
[
area
.
rowEnd
-
1
]
;
let
columnStart
=
fragment
.
cols
.
lines
[
area
.
columnStart
-
1
]
;
let
columnEnd
=
fragment
.
cols
.
lines
[
area
.
columnEnd
-
1
]
;
let
x1
=
columnStart
.
start
+
columnStart
.
breadth
+
(
bounds
.
left
/
currentZoom
)
;
let
x2
=
columnEnd
.
start
+
(
bounds
.
left
/
currentZoom
)
;
let
y1
=
rowStart
.
start
+
rowStart
.
breadth
+
(
bounds
.
top
/
currentZoom
)
;
let
y2
=
rowEnd
.
start
+
(
bounds
.
top
/
currentZoom
)
;
let
path
=
"
M
"
+
x1
+
"
"
+
y1
+
"
"
+
"
L
"
+
x2
+
"
"
+
y1
+
"
"
+
"
L
"
+
x2
+
"
"
+
y2
+
"
"
+
"
L
"
+
x1
+
"
"
+
y2
;
paths
.
push
(
path
)
;
if
(
areaName
)
{
this
.
_updateGridAreaInfobar
(
area
x1
x2
y1
y2
)
;
this
.
_showGridAreaInfoBar
(
)
;
}
}
}
let
areas
=
this
.
getElement
(
"
areas
"
)
;
areas
.
setAttribute
(
"
d
"
paths
.
join
(
"
"
)
)
;
}
renderGridCell
(
gridFragmentIndex
rowNumber
columnNumber
)
{
let
fragment
=
this
.
gridData
[
gridFragmentIndex
]
;
if
(
!
fragment
)
{
return
;
}
let
row
=
fragment
.
rows
.
tracks
[
rowNumber
-
1
]
;
let
column
=
fragment
.
cols
.
tracks
[
columnNumber
-
1
]
;
if
(
!
row
|
|
!
column
)
{
return
;
}
let
currentZoom
=
getCurrentZoom
(
this
.
win
)
;
let
{
bounds
}
=
this
.
currentQuads
.
content
[
gridFragmentIndex
]
;
let
x1
=
column
.
start
+
(
bounds
.
left
/
currentZoom
)
;
let
x2
=
column
.
start
+
column
.
breadth
+
(
bounds
.
left
/
currentZoom
)
;
let
y1
=
row
.
start
+
(
bounds
.
top
/
currentZoom
)
;
let
y2
=
row
.
start
+
row
.
breadth
+
(
bounds
.
top
/
currentZoom
)
;
let
path
=
"
M
"
+
x1
+
"
"
+
y1
+
"
"
+
"
L
"
+
x2
+
"
"
+
y1
+
"
"
+
"
L
"
+
x2
+
"
"
+
y2
+
"
"
+
"
L
"
+
x1
+
"
"
+
y2
;
let
cells
=
this
.
getElement
(
"
cells
"
)
;
cells
.
setAttribute
(
"
d
"
path
)
;
this
.
_updateGridCellInfobar
(
rowNumber
columnNumber
x1
x2
y1
y2
)
;
this
.
_showGridCellInfoBar
(
)
;
}
_hide
(
)
{
setIgnoreLayoutChanges
(
true
)
;
this
.
_hideGrid
(
)
;
this
.
_hideGridElements
(
)
;
this
.
_hideGridAreaInfoBar
(
)
;
this
.
_hideGridCellInfoBar
(
)
;
setIgnoreLayoutChanges
(
false
this
.
highlighterEnv
.
document
.
documentElement
)
;
}
_hideGrid
(
)
{
this
.
getElement
(
"
canvas
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
_showGrid
(
)
{
this
.
getElement
(
"
canvas
"
)
.
removeAttribute
(
"
hidden
"
)
;
}
_hideGridElements
(
)
{
this
.
getElement
(
"
elements
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
_showGridElements
(
)
{
this
.
getElement
(
"
elements
"
)
.
removeAttribute
(
"
hidden
"
)
;
}
_hideGridAreaInfoBar
(
)
{
this
.
getElement
(
"
area
-
infobar
-
container
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
_showGridAreaInfoBar
(
)
{
this
.
getElement
(
"
area
-
infobar
-
container
"
)
.
removeAttribute
(
"
hidden
"
)
;
}
_hideGridCellInfoBar
(
)
{
this
.
getElement
(
"
cell
-
infobar
-
container
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
_showGridCellInfoBar
(
)
{
this
.
getElement
(
"
cell
-
infobar
-
container
"
)
.
removeAttribute
(
"
hidden
"
)
;
}
}
)
;
exports
.
CssGridHighlighter
=
CssGridHighlighter
;
