"
use
strict
"
;
const
{
ActorClassWithSpec
Actor
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
breakpointListSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
breakpoint
-
list
"
)
;
const
{
WatchedDataHelpers
}
=
require
(
"
devtools
/
server
/
actors
/
watcher
/
WatchedDataHelpers
.
jsm
"
)
;
const
{
SUPPORTED_DATA
}
=
WatchedDataHelpers
;
const
{
BREAKPOINTS
XHR_BREAKPOINTS
EVENT_BREAKPOINTS
}
=
SUPPORTED_DATA
;
const
BreakpointListActor
=
ActorClassWithSpec
(
breakpointListSpec
{
initialize
(
watcherActor
)
{
this
.
watcherActor
=
watcherActor
;
Actor
.
prototype
.
initialize
.
call
(
this
this
.
watcherActor
.
conn
)
;
}
destroy
(
conn
)
{
Actor
.
prototype
.
destroy
.
call
(
this
conn
)
;
}
setBreakpoint
(
location
options
)
{
return
this
.
watcherActor
.
addDataEntry
(
BREAKPOINTS
[
{
location
options
}
]
)
;
}
removeBreakpoint
(
location
options
)
{
return
this
.
watcherActor
.
removeDataEntry
(
BREAKPOINTS
[
{
location
options
}
]
)
;
}
setXHRBreakpoint
(
path
method
)
{
return
this
.
watcherActor
.
addDataEntry
(
XHR_BREAKPOINTS
[
{
path
method
}
]
)
;
}
removeXHRBreakpoint
(
path
method
)
{
return
this
.
watcherActor
.
removeDataEntry
(
XHR_BREAKPOINTS
[
{
path
method
}
]
)
;
}
setActiveEventBreakpoints
(
ids
)
{
const
existingIds
=
this
.
watcherActor
.
getWatchedData
(
EVENT_BREAKPOINTS
)
;
const
addIds
=
ids
.
filter
(
id
=
>
!
existingIds
.
includes
(
id
)
)
;
const
removeIds
=
existingIds
.
filter
(
id
=
>
!
ids
.
includes
(
id
)
)
;
if
(
addIds
.
length
)
{
this
.
watcherActor
.
addDataEntry
(
EVENT_BREAKPOINTS
addIds
)
;
}
if
(
removeIds
.
length
)
{
this
.
watcherActor
.
removeDataEntry
(
EVENT_BREAKPOINTS
removeIds
)
;
}
}
}
)
;
exports
.
BreakpointListActor
=
BreakpointListActor
;
