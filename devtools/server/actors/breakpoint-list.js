"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
breakpointListSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
breakpoint
-
list
.
js
"
)
;
const
{
SessionDataHelpers
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
watcher
/
SessionDataHelpers
.
jsm
"
)
;
const
{
SUPPORTED_DATA
}
=
SessionDataHelpers
;
const
{
BREAKPOINTS
XHR_BREAKPOINTS
EVENT_BREAKPOINTS
}
=
SUPPORTED_DATA
;
class
BreakpointListActor
extends
Actor
{
constructor
(
watcherActor
)
{
super
(
watcherActor
.
conn
breakpointListSpec
)
;
this
.
watcherActor
=
watcherActor
;
}
setBreakpoint
(
location
options
)
{
return
this
.
watcherActor
.
addOrSetDataEntry
(
BREAKPOINTS
[
{
location
options
}
]
"
add
"
)
;
}
removeBreakpoint
(
location
options
)
{
return
this
.
watcherActor
.
removeDataEntry
(
BREAKPOINTS
[
{
location
options
}
]
)
;
}
setXHRBreakpoint
(
path
method
)
{
return
this
.
watcherActor
.
addOrSetDataEntry
(
XHR_BREAKPOINTS
[
{
path
method
}
]
"
add
"
)
;
}
removeXHRBreakpoint
(
path
method
)
{
return
this
.
watcherActor
.
removeDataEntry
(
XHR_BREAKPOINTS
[
{
path
method
}
]
)
;
}
async
setActiveEventBreakpoints
(
ids
)
{
await
this
.
watcherActor
.
addOrSetDataEntry
(
EVENT_BREAKPOINTS
ids
"
set
"
)
;
}
}
exports
.
BreakpointListActor
=
BreakpointListActor
;
