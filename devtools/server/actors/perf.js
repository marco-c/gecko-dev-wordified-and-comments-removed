"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
perfSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
perf
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
RecordingUtils
"
"
resource
:
/
/
devtools
/
shared
/
performance
-
new
/
recording
-
utils
.
js
"
)
;
const
IS_SUPPORTED_PLATFORM
=
"
nsIProfiler
"
in
Ci
;
exports
.
PerfActor
=
class
PerfActor
extends
Actor
{
constructor
(
conn
)
{
super
(
conn
perfSpec
)
;
if
(
IS_SUPPORTED_PLATFORM
)
{
this
.
_observer
=
{
observe
:
this
.
_observe
.
bind
(
this
)
}
;
Services
.
obs
.
addObserver
(
this
.
_observer
"
profiler
-
started
"
)
;
Services
.
obs
.
addObserver
(
this
.
_observer
"
profiler
-
stopped
"
)
;
}
}
destroy
(
)
{
super
.
destroy
(
)
;
if
(
!
IS_SUPPORTED_PLATFORM
)
{
return
;
}
Services
.
obs
.
removeObserver
(
this
.
_observer
"
profiler
-
started
"
)
;
Services
.
obs
.
removeObserver
(
this
.
_observer
"
profiler
-
stopped
"
)
;
}
startProfiler
(
options
)
{
if
(
!
IS_SUPPORTED_PLATFORM
)
{
return
false
;
}
const
settings
=
{
entries
:
options
.
entries
|
|
1000000
duration
:
options
.
duration
|
|
0
interval
:
options
.
interval
|
|
1
features
:
options
.
features
|
|
[
"
js
"
"
stackwalk
"
"
cpu
"
"
responsiveness
"
]
threads
:
options
.
threads
|
|
[
"
GeckoMain
"
"
Compositor
"
]
activeTabID
:
RecordingUtils
.
getActiveBrowserID
(
)
}
;
try
{
Services
.
profiler
.
StartProfiler
(
settings
.
entries
settings
.
interval
settings
.
features
settings
.
threads
settings
.
activeTabID
settings
.
duration
)
;
}
catch
(
e
)
{
return
false
;
}
return
true
;
}
stopProfilerAndDiscardProfile
(
)
{
if
(
!
IS_SUPPORTED_PLATFORM
)
{
return
;
}
Services
.
profiler
.
StopProfiler
(
)
;
}
async
getSymbolTable
(
debugPath
breakpadId
)
{
const
[
addr
index
buffer
]
=
await
Services
.
profiler
.
getSymbolTable
(
debugPath
breakpadId
)
;
return
[
Array
.
from
(
addr
)
Array
.
from
(
index
)
Array
.
from
(
buffer
)
]
;
}
async
getProfileAndStopProfiler
(
)
{
if
(
!
IS_SUPPORTED_PLATFORM
)
{
return
null
;
}
Services
.
profiler
.
Pause
(
)
;
let
profile
;
try
{
profile
=
await
Services
.
profiler
.
getProfileDataAsync
(
)
;
if
(
Object
.
keys
(
profile
)
.
length
=
=
=
0
)
{
console
.
error
(
"
An
empty
object
was
received
from
getProfileDataAsync
.
getProfileDataAsync
(
)
"
+
"
meaning
that
a
profile
could
not
successfully
be
serialized
and
captured
.
"
)
;
profile
=
null
;
}
}
catch
(
e
)
{
profile
=
null
;
console
.
error
(
There
was
an
error
fetching
a
profile
e
)
;
}
Services
.
profiler
.
StopProfiler
(
)
;
return
profile
;
}
isActive
(
)
{
if
(
!
IS_SUPPORTED_PLATFORM
)
{
return
false
;
}
return
Services
.
profiler
.
IsActive
(
)
;
}
isSupportedPlatform
(
)
{
return
IS_SUPPORTED_PLATFORM
;
}
_observe
(
subject
topic
_data
)
{
switch
(
topic
)
{
case
"
profiler
-
started
"
:
{
const
param
=
subject
.
QueryInterface
(
Ci
.
nsIProfilerStartParams
)
;
this
.
emit
(
topic
param
.
entries
param
.
interval
param
.
features
param
.
duration
param
.
activeTabID
)
;
break
;
}
case
"
profiler
-
stopped
"
:
this
.
emit
(
topic
)
;
break
;
}
}
getSupportedFeatures
(
)
{
if
(
!
IS_SUPPORTED_PLATFORM
)
{
return
[
]
;
}
return
Services
.
profiler
.
GetFeatures
(
)
;
}
}
;
