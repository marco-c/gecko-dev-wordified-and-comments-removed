"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
threadConfigurationSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
thread
-
configuration
.
js
"
)
;
const
{
SessionDataHelpers
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
watcher
/
SessionDataHelpers
.
jsm
"
)
;
const
{
SUPPORTED_DATA
:
{
THREAD_CONFIGURATION
}
}
=
SessionDataHelpers
;
const
SUPPORTED_OPTIONS
=
{
ignoreCaughtExceptions
:
true
logEventBreakpoints
:
true
observeAsmJS
:
true
observeWasm
:
true
pauseOnExceptions
:
true
pauseOverlay
:
true
pauseWorkersUntilAttach
:
true
shouldIncludeAsyncLiveFrames
:
true
shouldIncludeSavedFrames
:
true
shouldPauseOnDebuggerStatement
:
true
skipBreakpoints
:
true
}
;
class
ThreadConfigurationActor
extends
Actor
{
constructor
(
watcherActor
)
{
super
(
watcherActor
.
conn
threadConfigurationSpec
)
;
this
.
watcherActor
=
watcherActor
;
}
async
updateConfiguration
(
configuration
)
{
const
configArray
=
Object
.
keys
(
configuration
)
.
filter
(
key
=
>
{
if
(
!
SUPPORTED_OPTIONS
[
key
]
)
{
console
.
warn
(
Unsupported
option
for
ThreadConfiguration
:
{
key
}
)
;
return
false
;
}
return
true
;
}
)
.
map
(
key
=
>
(
{
key
value
:
configuration
[
key
]
}
)
)
;
await
this
.
watcherActor
.
addOrSetDataEntry
(
THREAD_CONFIGURATION
configArray
"
add
"
)
;
}
}
exports
.
ThreadConfigurationActor
=
ThreadConfigurationActor
;
