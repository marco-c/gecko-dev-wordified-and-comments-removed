"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
CallWatcher
}
=
require
(
"
devtools
/
server
/
actors
/
utils
/
call
-
watcher
"
)
;
const
{
createValueGrip
}
=
require
(
"
devtools
/
server
/
actors
/
object
/
utils
"
)
;
const
AutomationTimeline
=
require
(
"
.
/
utils
/
automation
-
timeline
"
)
;
const
{
audionodeSpec
webAudioSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
webaudio
"
)
;
const
{
WebAudioFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
webaudio
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
AUDIO_NODE_DEFINITION
=
require
(
"
devtools
/
server
/
actors
/
utils
/
audionodes
.
json
"
)
;
const
ENABLE_AUTOMATION
=
false
;
const
AUTOMATION_GRANULARITY
=
2000
;
const
AUTOMATION_GRANULARITY_MAX
=
6000
;
const
AUDIO_GLOBALS
=
[
"
BaseAudioContext
"
"
AudioContext
"
"
AudioNode
"
"
AudioParam
"
]
;
var
AudioNodeActor
=
exports
.
AudioNodeActor
=
protocol
.
ActorClassWithSpec
(
audionodeSpec
{
form
:
function
(
)
{
return
{
actor
:
this
.
actorID
type
:
this
.
type
source
:
this
.
source
bypassable
:
this
.
bypassable
}
;
}
initialize
:
function
(
conn
node
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
nativeID
=
node
.
id
;
this
.
node
=
Cu
.
getWeakReference
(
node
)
;
this
.
automation
=
{
}
;
try
{
this
.
type
=
getConstructorName
(
node
)
;
}
catch
(
e
)
{
this
.
type
=
"
"
;
}
this
.
source
=
!
!
AUDIO_NODE_DEFINITION
[
this
.
type
]
.
source
;
this
.
bypassable
=
!
AUDIO_NODE_DEFINITION
[
this
.
type
]
.
unbypassable
;
Object
.
keys
(
AUDIO_NODE_DEFINITION
[
this
.
type
]
.
properties
|
|
{
}
)
.
filter
(
isAudioParam
.
bind
(
null
node
)
)
.
forEach
(
paramName
=
>
{
this
.
automation
[
paramName
]
=
new
AutomationTimeline
(
node
[
paramName
]
.
defaultValue
)
;
}
)
;
}
getType
:
function
(
)
{
return
this
.
type
;
}
isBypassed
:
function
(
)
{
const
node
=
this
.
node
.
get
(
)
;
if
(
node
=
=
=
null
)
{
return
false
;
}
return
!
!
node
.
passThrough
;
}
bypass
:
function
(
enable
)
{
const
node
=
this
.
node
.
get
(
)
;
if
(
node
=
=
=
null
)
{
return
undefined
;
}
if
(
this
.
bypassable
)
{
node
.
passThrough
=
enable
;
}
return
this
.
isBypassed
(
)
;
}
setParam
:
function
(
param
value
)
{
const
node
=
this
.
node
.
get
(
)
;
if
(
node
=
=
=
null
)
{
return
CollectedAudioNodeError
(
)
;
}
try
{
if
(
isAudioParam
(
node
param
)
)
{
node
[
param
]
.
value
=
value
;
this
.
automation
[
param
]
.
setValue
(
value
)
;
}
else
{
node
[
param
]
=
value
;
}
return
undefined
;
}
catch
(
e
)
{
return
constructError
(
e
)
;
}
}
getParam
:
function
(
param
)
{
const
node
=
this
.
node
.
get
(
)
;
if
(
node
=
=
=
null
)
{
return
CollectedAudioNodeError
(
)
;
}
const
value
=
isAudioParam
(
node
param
)
?
node
[
param
]
.
value
:
node
[
param
]
;
const
grip
=
createValueGrip
(
value
null
createObjectGrip
)
;
return
grip
;
}
getParamFlags
:
function
(
param
)
{
return
(
(
AUDIO_NODE_DEFINITION
[
this
.
type
]
|
|
{
}
)
.
properties
|
|
{
}
)
[
param
]
;
}
getParams
:
function
(
param
)
{
const
props
=
Object
.
keys
(
AUDIO_NODE_DEFINITION
[
this
.
type
]
.
properties
|
|
{
}
)
;
return
props
.
map
(
prop
=
>
(
{
param
:
prop
value
:
this
.
getParam
(
prop
)
flags
:
this
.
getParamFlags
(
prop
)
}
)
)
;
}
connectParam
:
function
(
destActor
paramName
output
)
{
const
srcNode
=
this
.
node
.
get
(
)
;
const
destNode
=
destActor
.
node
.
get
(
)
;
if
(
srcNode
=
=
=
null
|
|
destNode
=
=
=
null
)
{
return
CollectedAudioNodeError
(
)
;
}
try
{
XPCNativeWrapper
.
unwrap
(
srcNode
)
.
connect
(
destNode
[
paramName
]
output
)
;
}
catch
(
e
)
{
return
constructError
(
e
)
;
}
return
undefined
;
}
connectNode
:
function
(
destActor
output
input
)
{
const
srcNode
=
this
.
node
.
get
(
)
;
const
destNode
=
destActor
.
node
.
get
(
)
;
if
(
srcNode
=
=
=
null
|
|
destNode
=
=
=
null
)
{
return
CollectedAudioNodeError
(
)
;
}
try
{
XPCNativeWrapper
.
unwrap
(
srcNode
)
.
connect
(
destNode
output
input
)
;
}
catch
(
e
)
{
return
constructError
(
e
)
;
}
return
undefined
;
}
disconnect
:
function
(
destActor
output
)
{
const
node
=
this
.
node
.
get
(
)
;
if
(
node
=
=
=
null
)
{
return
CollectedAudioNodeError
(
)
;
}
try
{
XPCNativeWrapper
.
unwrap
(
node
)
.
disconnect
(
output
)
;
}
catch
(
e
)
{
return
constructError
(
e
)
;
}
return
undefined
;
}
getAutomationData
:
function
(
paramName
)
{
const
timeline
=
this
.
automation
[
paramName
]
;
if
(
!
timeline
)
{
return
null
;
}
const
values
=
[
]
;
let
i
=
0
;
if
(
!
timeline
.
events
.
length
)
{
return
{
events
:
timeline
.
events
values
}
;
}
const
firstEvent
=
timeline
.
events
[
0
]
;
const
lastEvent
=
timeline
.
events
[
timeline
.
events
.
length
-
1
]
;
const
timeDelta
=
(
lastEvent
.
time
+
lastEvent
.
duration
)
-
firstEvent
.
time
;
const
scale
=
timeDelta
/
AUTOMATION_GRANULARITY
;
for
(
;
i
<
AUTOMATION_GRANULARITY
;
i
+
+
)
{
const
delta
=
firstEvent
.
time
+
(
i
*
scale
)
;
const
value
=
timeline
.
getValueAtTime
(
delta
)
;
values
.
push
(
{
delta
value
}
)
;
}
if
(
lastEvent
.
type
=
=
=
"
setTargetAtTime
"
)
{
for
(
;
i
<
AUTOMATION_GRANULARITY_MAX
;
i
+
+
)
{
const
delta
=
firstEvent
.
time
+
(
+
+
i
*
scale
)
;
const
value
=
timeline
.
getValueAtTime
(
delta
)
;
values
.
push
(
{
delta
value
}
)
;
}
}
return
{
events
:
timeline
.
events
values
}
;
}
addAutomationEvent
:
function
(
paramName
eventName
args
=
[
]
)
{
const
node
=
this
.
node
.
get
(
)
;
const
timeline
=
this
.
automation
[
paramName
]
;
if
(
node
=
=
=
null
)
{
return
CollectedAudioNodeError
(
)
;
}
if
(
!
timeline
|
|
!
node
[
paramName
]
[
eventName
]
)
{
return
InvalidCommandError
(
)
;
}
try
{
const
param
=
XPCNativeWrapper
.
unwrap
(
node
[
paramName
]
)
;
const
contentGlobal
=
Cu
.
getGlobalForObject
(
param
)
;
const
contentArgs
=
Cu
.
cloneInto
(
args
contentGlobal
)
;
if
(
eventName
=
=
=
"
setValueCurveAtTime
"
)
{
const
curve
=
new
contentGlobal
.
Float32Array
(
contentArgs
[
0
]
)
;
contentArgs
[
0
]
=
curve
;
}
param
[
eventName
]
.
apply
(
param
contentArgs
)
;
}
catch
(
e
)
{
return
constructError
(
e
)
;
}
return
undefined
;
}
_recordAutomationEvent
:
function
(
paramName
eventName
args
)
{
const
timeline
=
this
.
automation
[
paramName
]
;
timeline
[
eventName
]
.
apply
(
timeline
args
)
;
}
}
)
;
exports
.
WebAudioActor
=
protocol
.
ActorClassWithSpec
(
webAudioSpec
{
initialize
:
function
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
targetActor
=
targetActor
;
this
.
_onContentFunctionCall
=
this
.
_onContentFunctionCall
.
bind
(
this
)
;
this
.
_nativeToActorID
=
new
Map
(
)
;
this
.
_onGlobalDestroyed
=
this
.
_onGlobalDestroyed
.
bind
(
this
)
;
this
.
_onGlobalCreated
=
this
.
_onGlobalCreated
.
bind
(
this
)
;
}
destroy
:
function
(
conn
)
{
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
conn
)
;
this
.
finalize
(
)
;
}
getDefinition
:
function
(
)
{
return
AUDIO_NODE_DEFINITION
;
}
setup
:
function
(
{
reload
}
)
{
this
.
_firstNodeCreated
=
false
;
this
.
_nativeToActorID
.
clear
(
)
;
if
(
this
.
_initialized
)
{
if
(
reload
)
{
this
.
targetActor
.
window
.
location
.
reload
(
)
;
}
return
;
}
this
.
_initialized
=
true
;
this
.
_callWatcher
=
new
CallWatcher
(
this
.
conn
this
.
targetActor
)
;
this
.
_callWatcher
.
onCall
=
this
.
_onContentFunctionCall
;
this
.
_callWatcher
.
setup
(
{
tracedGlobals
:
AUDIO_GLOBALS
startRecording
:
true
performReload
:
reload
holdWeak
:
true
storeCalls
:
false
}
)
;
this
.
targetActor
.
on
(
"
window
-
ready
"
this
.
_onGlobalCreated
)
;
this
.
targetActor
.
on
(
"
window
-
destroyed
"
this
.
_onGlobalDestroyed
)
;
}
_onContentFunctionCall
:
function
(
functionCall
)
{
const
{
name
}
=
functionCall
.
details
;
if
(
WebAudioFront
.
NODE_ROUTING_METHODS
.
has
(
name
)
)
{
this
.
_handleRoutingCall
(
functionCall
)
;
}
else
if
(
WebAudioFront
.
NODE_CREATION_METHODS
.
has
(
name
)
)
{
this
.
_handleCreationCall
(
functionCall
)
;
}
else
if
(
ENABLE_AUTOMATION
&
&
WebAudioFront
.
AUTOMATION_METHODS
.
has
(
name
)
)
{
this
.
_handleAutomationCall
(
functionCall
)
;
}
}
_handleRoutingCall
:
function
(
functionCall
)
{
const
{
caller
args
name
}
=
functionCall
.
details
;
const
source
=
caller
;
const
dest
=
args
[
0
]
;
const
isAudioPar
=
dest
?
getConstructorName
(
dest
)
=
=
=
"
AudioParam
"
:
false
;
if
(
name
=
=
=
"
connect
"
&
&
isAudioPar
)
{
this
.
_onConnectParam
(
source
dest
)
;
}
else
if
(
name
=
=
=
"
connect
"
)
{
this
.
_onConnectNode
(
source
dest
)
;
}
else
if
(
name
=
=
=
"
disconnect
"
)
{
this
.
_onDisconnectNode
(
source
)
;
}
}
_handleCreationCall
:
function
(
functionCall
)
{
const
{
caller
result
}
=
functionCall
.
details
;
if
(
!
this
.
_firstNodeCreated
)
{
this
.
_onStartContext
(
)
;
this
.
_onCreateNode
(
caller
.
destination
)
;
this
.
_firstNodeCreated
=
true
;
}
this
.
_onCreateNode
(
result
)
;
}
_handleAutomationCall
:
function
(
functionCall
)
{
let
{
caller
name
args
}
=
functionCall
.
details
;
const
wrappedParam
=
new
XPCNativeWrapper
(
caller
)
;
args
=
sanitizeAutomationArgs
(
args
)
;
const
nodeActor
=
this
.
_getActorByNativeID
(
wrappedParam
.
_parentID
)
;
nodeActor
.
_recordAutomationEvent
(
wrappedParam
.
_paramName
name
args
)
;
this
.
_onAutomationEvent
(
{
node
:
nodeActor
paramName
:
wrappedParam
.
_paramName
eventName
:
name
args
:
args
}
)
;
}
finalize
:
function
(
)
{
if
(
!
this
.
_initialized
)
{
return
;
}
this
.
_initialized
=
false
;
try
{
Services
.
obs
.
removeObserver
(
this
"
webaudio
-
node
-
demise
"
)
;
}
catch
(
e
)
{
}
this
.
targetActor
.
off
(
"
window
-
destroyed
"
this
.
_onGlobalDestroyed
)
;
this
.
targetActor
.
off
(
"
window
-
ready
"
this
.
_onGlobalCreated
)
;
this
.
targetActor
=
null
;
this
.
_nativeToActorID
=
null
;
this
.
_callWatcher
.
eraseRecording
(
)
;
this
.
_callWatcher
.
finalize
(
)
;
this
.
_callWatcher
=
null
;
}
_constructAudioNode
:
function
(
node
)
{
node
=
new
XPCNativeWrapper
(
node
)
;
this
.
_instrumentParams
(
node
)
;
const
actor
=
new
AudioNodeActor
(
this
.
conn
node
)
;
this
.
manage
(
actor
)
;
this
.
_nativeToActorID
.
set
(
node
.
id
actor
.
actorID
)
;
return
actor
;
}
_instrumentParams
:
function
(
node
)
{
const
type
=
getConstructorName
(
node
)
;
Object
.
keys
(
AUDIO_NODE_DEFINITION
[
type
]
.
properties
|
|
{
}
)
.
filter
(
isAudioParam
.
bind
(
null
node
)
)
.
forEach
(
paramName
=
>
{
const
param
=
node
[
paramName
]
;
param
.
_parentID
=
node
.
id
;
param
.
_paramName
=
paramName
;
}
)
;
}
_getActorByNativeID
:
function
(
nativeID
)
{
nativeID
=
~
~
nativeID
;
const
actorID
=
this
.
_nativeToActorID
.
get
(
nativeID
)
;
const
actor
=
actorID
!
=
null
?
this
.
conn
.
getActor
(
actorID
)
:
null
;
return
actor
;
}
_onStartContext
:
function
(
)
{
Services
.
obs
.
addObserver
(
this
"
webaudio
-
node
-
demise
"
)
;
this
.
emit
(
"
start
-
context
"
)
;
}
_onConnectNode
:
function
(
source
dest
)
{
const
sourceActor
=
this
.
_getActorByNativeID
(
source
.
id
)
;
const
destActor
=
this
.
_getActorByNativeID
(
dest
.
id
)
;
this
.
emit
(
"
connect
-
node
"
{
source
:
sourceActor
dest
:
destActor
}
)
;
}
_onConnectParam
:
function
(
source
param
)
{
const
sourceActor
=
this
.
_getActorByNativeID
(
source
.
id
)
;
const
destActor
=
this
.
_getActorByNativeID
(
param
.
_parentID
)
;
this
.
emit
(
"
connect
-
param
"
{
source
:
sourceActor
dest
:
destActor
param
:
param
.
_paramName
}
)
;
}
_onDisconnectNode
:
function
(
node
)
{
const
actor
=
this
.
_getActorByNativeID
(
node
.
id
)
;
this
.
emit
(
"
disconnect
-
node
"
actor
)
;
}
_onParamChange
:
function
(
node
param
value
)
{
const
actor
=
this
.
_getActorByNativeID
(
node
.
id
)
;
this
.
emit
(
"
param
-
change
"
{
source
:
actor
param
:
param
value
:
value
}
)
;
}
_onCreateNode
:
function
(
node
)
{
const
actor
=
this
.
_constructAudioNode
(
node
)
;
this
.
emit
(
"
create
-
node
"
actor
)
;
}
observe
:
function
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
webaudio
-
node
-
demise
"
:
this
.
_handleNodeDestroyed
(
~
~
data
)
;
break
;
}
}
_handleNodeDestroyed
:
function
(
nodeNativeID
)
{
const
actor
=
this
.
_getActorByNativeID
(
nodeNativeID
)
;
if
(
actor
)
{
this
.
_nativeToActorID
.
delete
(
nodeNativeID
)
;
this
.
emit
(
"
destroy
-
node
"
actor
)
;
}
}
_onGlobalCreated
:
function
(
)
{
this
.
_firstNodeCreated
=
false
;
this
.
_nativeToActorID
.
clear
(
)
;
this
.
_callWatcher
.
resumeRecording
(
)
;
}
_onAutomationEvent
:
function
(
{
node
paramName
eventName
args
}
)
{
this
.
emit
(
"
automation
-
event
"
{
node
:
node
paramName
:
paramName
eventName
:
eventName
args
:
args
}
)
;
}
_onGlobalDestroyed
:
function
(
{
id
}
)
{
if
(
this
.
_callWatcher
.
_tracedWindowId
!
=
=
id
)
{
return
;
}
if
(
this
.
_nativeToActorID
)
{
this
.
_nativeToActorID
.
clear
(
)
;
}
Services
.
obs
.
removeObserver
(
this
"
webaudio
-
node
-
demise
"
)
;
}
}
)
;
function
isAudioParam
(
node
prop
)
{
return
!
!
(
node
[
prop
]
&
&
/
AudioParam
/
.
test
(
node
[
prop
]
.
toString
(
)
)
)
;
}
function
constructError
(
err
)
{
return
{
message
:
err
.
message
type
:
err
.
constructor
.
name
}
;
}
function
CollectedAudioNodeError
(
)
{
return
{
message
:
"
AudioNode
has
been
garbage
collected
and
can
no
longer
be
reached
.
"
type
:
"
UnreachableAudioNode
"
}
;
}
function
InvalidCommandError
(
)
{
return
{
message
:
"
The
command
on
AudioNode
is
invalid
.
"
type
:
"
InvalidCommand
"
}
;
}
function
getConstructorName
(
obj
)
{
return
Object
.
prototype
.
toString
.
call
(
obj
)
.
match
(
/
\
[
object
(
[
^
\
[
\
]
]
*
)
\
]
\
]
?
/
)
[
1
]
;
}
function
createObjectGrip
(
value
)
{
return
{
type
:
"
object
"
preview
:
{
kind
:
"
ObjectWithText
"
text
:
"
"
}
class
:
getConstructorName
(
value
)
}
;
}
function
sanitizeAutomationArgs
(
args
)
{
return
args
.
reduce
(
(
newArgs
el
)
=
>
{
const
isArray
=
typeof
el
=
=
=
"
object
"
&
&
getConstructorName
(
el
)
=
=
=
"
Float32Array
"
;
newArgs
.
push
(
isArray
?
castToArray
(
el
)
:
el
)
;
return
newArgs
;
}
[
]
)
;
}
function
castToArray
(
typedArray
)
{
const
global
=
Cu
.
getGlobalForObject
(
this
)
;
const
safeView
=
Cu
.
cloneInto
(
typedArray
.
subarray
(
)
global
)
;
return
copyInto
(
[
]
safeView
)
;
}
function
copyInto
(
dest
source
)
{
for
(
let
i
=
0
;
i
<
source
.
length
;
i
+
+
)
{
dest
[
i
]
=
source
[
i
]
;
}
return
dest
;
}
