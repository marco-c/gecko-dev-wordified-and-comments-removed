"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
mediaRuleSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
media
-
rule
"
)
;
const
InspectorUtils
=
require
(
"
InspectorUtils
"
)
;
var
MediaRuleActor
=
protocol
.
ActorClassWithSpec
(
mediaRuleSpec
{
get
window
(
)
{
return
this
.
parentActor
.
window
;
}
get
document
(
)
{
return
this
.
window
.
document
;
}
get
matches
(
)
{
return
this
.
mql
?
this
.
mql
.
matches
:
null
;
}
initialize
(
mediaRule
parentActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
parentActor
.
conn
)
;
this
.
rawRule
=
mediaRule
;
this
.
parentActor
=
parentActor
;
this
.
conn
=
this
.
parentActor
.
conn
;
this
.
_matchesChange
=
this
.
_matchesChange
.
bind
(
this
)
;
this
.
line
=
InspectorUtils
.
getRelativeRuleLine
(
mediaRule
)
;
this
.
column
=
InspectorUtils
.
getRuleColumn
(
mediaRule
)
;
try
{
this
.
mql
=
this
.
window
.
matchMedia
(
mediaRule
.
media
.
mediaText
)
;
}
catch
(
e
)
{
}
if
(
this
.
mql
)
{
this
.
mql
.
addListener
(
this
.
_matchesChange
)
;
}
}
destroy
(
)
{
if
(
this
.
mql
)
{
if
(
!
Cu
.
isDeadWrapper
(
this
.
mql
)
)
{
this
.
mql
.
removeListener
(
this
.
_matchesChange
)
;
}
this
.
mql
=
null
;
}
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
form
(
)
{
const
form
=
{
actor
:
this
.
actorID
mediaText
:
this
.
rawRule
.
media
.
mediaText
conditionText
:
this
.
rawRule
.
conditionText
matches
:
this
.
matches
line
:
this
.
line
column
:
this
.
column
parentStyleSheet
:
this
.
parentActor
.
actorID
}
;
return
form
;
}
_matchesChange
(
)
{
this
.
emit
(
"
matches
-
change
"
this
.
matches
)
;
}
}
)
;
exports
.
MediaRuleActor
=
MediaRuleActor
;
