"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
var
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
compatibilitySpec
}
=
require
(
"
devtools
/
shared
/
specs
/
compatibility
"
)
;
loader
.
lazyRequireGetter
(
this
"
browsersDataset
"
"
devtools
/
shared
/
compatibility
/
dataset
/
browsers
.
json
"
)
;
loader
.
lazyGetter
(
this
"
mdnCompatibility
"
(
)
=
>
{
const
MDNCompatibility
=
require
(
"
devtools
/
shared
/
compatibility
/
MDNCompatibility
"
)
;
const
cssPropertiesCompatData
=
require
(
"
devtools
/
shared
/
compatibility
/
dataset
/
css
-
properties
.
json
"
)
;
return
new
MDNCompatibility
(
cssPropertiesCompatData
)
;
}
)
;
const
TARGET_BROWSER_ID
=
[
"
firefox
"
"
firefox_android
"
"
chrome
"
"
chrome_android
"
"
safari
"
"
safari_ios
"
"
edge
"
]
;
const
TARGET_BROWSER_STATUS
=
[
"
esr
"
"
current
"
"
beta
"
"
nightly
"
]
;
const
TARGET_BROWSER_PREF
=
"
devtools
.
inspector
.
compatibility
.
target
-
browsers
"
;
const
CompatibilityActor
=
protocol
.
ActorClassWithSpec
(
compatibilitySpec
{
initialize
:
function
(
inspector
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
inspector
.
conn
)
;
this
.
inspector
=
inspector
;
}
destroy
:
function
(
)
{
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
this
.
inspector
=
null
;
}
_getDefaultTargetBrowsers
(
)
{
const
targets
=
[
]
;
for
(
const
id
of
TARGET_BROWSER_ID
)
{
const
{
name
releases
}
=
browsersDataset
[
id
]
;
for
(
const
version
in
releases
)
{
const
{
status
}
=
releases
[
version
]
;
if
(
!
TARGET_BROWSER_STATUS
.
includes
(
status
)
)
{
continue
;
}
const
target
=
{
id
name
version
status
}
;
const
index
=
targets
.
findIndex
(
t
=
>
target
.
id
=
=
=
t
.
id
&
&
target
.
status
=
=
=
t
.
status
)
;
if
(
index
<
0
)
{
targets
.
push
(
target
)
;
continue
;
}
const
existingTarget
=
targets
[
index
]
;
if
(
parseFloat
(
existingTarget
.
version
)
<
parseFloat
(
target
.
version
)
)
{
targets
[
index
]
=
target
;
}
}
}
return
targets
;
}
_getTargetBrowsers
(
)
{
const
targetsString
=
Services
.
prefs
.
getCharPref
(
TARGET_BROWSER_PREF
)
;
return
targetsString
?
JSON
.
parse
(
targetsString
)
:
this
.
_getDefaultTargetBrowsers
(
)
;
}
getCSSDeclarationBlockIssues
:
function
(
declarationBlock
options
)
{
const
targetBrowsers
=
(
options
&
&
options
.
targetBrowsers
)
|
|
this
.
_getTargetBrowsers
(
)
;
return
mdnCompatibility
.
getCSSDeclarationBlockIssues
(
declarationBlock
targetBrowsers
)
;
}
async
getNodeCssIssues
(
node
targetBrowsers
)
{
const
pageStyle
=
await
this
.
inspector
.
getPageStyle
(
)
;
const
styles
=
await
pageStyle
.
getApplied
(
node
{
skipPseudo
:
false
}
)
;
const
declarationBlocks
=
styles
.
entries
.
map
(
(
{
rule
}
)
=
>
{
const
declarations
=
rule
.
form
(
)
.
declarations
;
if
(
!
declarations
)
{
return
null
;
}
return
declarations
.
filter
(
d
=
>
!
d
.
commentOffsets
)
;
}
)
.
filter
(
declarations
=
>
declarations
&
&
declarations
.
length
)
;
return
declarationBlocks
.
map
(
declarationBlock
=
>
mdnCompatibility
.
getCSSDeclarationBlockIssues
(
declarationBlock
targetBrowsers
)
)
.
flat
(
)
.
reduce
(
(
issues
issue
)
=
>
{
return
issues
.
find
(
i
=
>
i
.
type
=
=
=
issue
.
type
&
&
i
.
property
=
=
=
issue
.
property
)
?
issues
:
[
.
.
.
issues
issue
]
;
}
[
]
)
;
}
}
)
;
module
.
exports
=
{
CompatibilityActor
}
;
