"
use
strict
"
;
var
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
compatibilitySpec
}
=
require
(
"
devtools
/
shared
/
specs
/
compatibility
"
)
;
loader
.
lazyGetter
(
this
"
mdnCompatibility
"
(
)
=
>
{
const
MDNCompatibility
=
require
(
"
devtools
/
shared
/
compatibility
/
MDNCompatibility
"
)
;
const
cssPropertiesCompatData
=
require
(
"
devtools
/
shared
/
compatibility
/
dataset
/
css
-
properties
.
json
"
)
;
return
new
MDNCompatibility
(
cssPropertiesCompatData
)
;
}
)
;
const
CompatibilityActor
=
protocol
.
ActorClassWithSpec
(
compatibilitySpec
{
initialize
:
function
(
inspector
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
inspector
.
conn
)
;
this
.
inspector
=
inspector
;
}
destroy
:
function
(
)
{
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
this
.
inspector
=
null
;
}
async
getNodeCssIssues
(
node
targetBrowsers
)
{
const
pageStyle
=
await
this
.
inspector
.
getPageStyle
(
)
;
const
styles
=
await
pageStyle
.
getApplied
(
node
{
skipPseudo
:
false
}
)
;
const
declarationBlocks
=
styles
.
entries
.
map
(
(
{
rule
}
)
=
>
{
const
declarations
=
rule
.
form
(
)
.
declarations
;
if
(
!
declarations
)
{
return
null
;
}
return
declarations
.
filter
(
d
=
>
!
d
.
commentOffsets
)
;
}
)
.
filter
(
declarations
=
>
declarations
&
&
declarations
.
length
)
;
return
declarationBlocks
.
map
(
declarationBlock
=
>
mdnCompatibility
.
getCSSDeclarationBlockIssues
(
declarationBlock
targetBrowsers
)
)
.
flat
(
)
.
reduce
(
(
issues
issue
)
=
>
{
return
issues
.
find
(
i
=
>
i
.
type
=
=
=
issue
.
type
&
&
i
.
property
=
=
=
issue
.
property
)
?
issues
:
[
.
.
.
issues
issue
]
;
}
[
]
)
;
}
}
)
;
module
.
exports
=
{
CompatibilityActor
}
;
