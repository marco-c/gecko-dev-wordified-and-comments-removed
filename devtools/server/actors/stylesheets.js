"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
defer
=
require
(
"
devtools
/
shared
/
defer
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
LongStringActor
}
=
require
(
"
devtools
/
server
/
actors
/
string
"
)
;
const
{
fetch
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
mediaRuleSpec
styleSheetSpec
styleSheetsSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
stylesheets
"
)
;
const
{
addPseudoClassLock
removePseudoClassLock
}
=
require
(
"
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
"
)
;
const
InspectorUtils
=
require
(
"
InspectorUtils
"
)
;
loader
.
lazyRequireGetter
(
this
"
CssLogic
"
"
devtools
/
shared
/
inspector
/
css
-
logic
"
)
;
loader
.
lazyRequireGetter
(
this
"
addPseudoClassLock
"
"
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
removePseudoClassLock
"
"
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
loadSheet
"
"
devtools
/
shared
/
layout
/
utils
"
true
)
;
var
TRANSITION_PSEUDO_CLASS
=
"
:
-
moz
-
styleeditor
-
transitioning
"
;
var
TRANSITION_DURATION_MS
=
500
;
var
TRANSITION_BUFFER_MS
=
1000
;
var
TRANSITION_RULE_SELECTOR
=
:
root
{
TRANSITION_PSEUDO_CLASS
}
:
root
{
TRANSITION_PSEUDO_CLASS
}
*
;
var
TRANSITION_SHEET
=
"
data
:
text
/
css
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
{
TRANSITION_RULE_SELECTOR
}
{
transition
-
duration
:
{
TRANSITION_DURATION_MS
}
ms
!
important
;
transition
-
delay
:
0ms
!
important
;
transition
-
timing
-
function
:
ease
-
out
!
important
;
transition
-
property
:
all
!
important
;
}
)
;
const
UPDATE_PRESERVING_RULES
=
0
;
exports
.
UPDATE_PRESERVING_RULES
=
UPDATE_PRESERVING_RULES
;
const
UPDATE_GENERAL
=
1
;
exports
.
UPDATE_GENERAL
=
UPDATE_GENERAL
;
const
modifiedStyleSheets
=
new
WeakMap
(
)
;
var
MediaRuleActor
=
protocol
.
ActorClassWithSpec
(
mediaRuleSpec
{
get
window
(
)
{
return
this
.
parentActor
.
window
;
}
get
document
(
)
{
return
this
.
window
.
document
;
}
get
matches
(
)
{
return
this
.
mql
?
this
.
mql
.
matches
:
null
;
}
initialize
:
function
(
mediaRule
parentActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
null
)
;
this
.
rawRule
=
mediaRule
;
this
.
parentActor
=
parentActor
;
this
.
conn
=
this
.
parentActor
.
conn
;
this
.
_matchesChange
=
this
.
_matchesChange
.
bind
(
this
)
;
this
.
line
=
InspectorUtils
.
getRuleLine
(
mediaRule
)
;
this
.
column
=
InspectorUtils
.
getRuleColumn
(
mediaRule
)
;
try
{
this
.
mql
=
this
.
window
.
matchMedia
(
mediaRule
.
media
.
mediaText
)
;
}
catch
(
e
)
{
}
if
(
this
.
mql
)
{
this
.
mql
.
addListener
(
this
.
_matchesChange
)
;
}
}
destroy
:
function
(
)
{
if
(
this
.
mql
)
{
this
.
mql
.
removeListener
(
this
.
_matchesChange
)
;
}
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
form
:
function
(
detail
)
{
if
(
detail
=
=
=
"
actorid
"
)
{
return
this
.
actorID
;
}
const
form
=
{
actor
:
this
.
actorID
mediaText
:
this
.
rawRule
.
media
.
mediaText
conditionText
:
this
.
rawRule
.
conditionText
matches
:
this
.
matches
line
:
this
.
line
column
:
this
.
column
parentStyleSheet
:
this
.
parentActor
.
actorID
}
;
return
form
;
}
_matchesChange
:
function
(
)
{
this
.
emit
(
"
matches
-
change
"
this
.
matches
)
;
}
}
)
;
function
getSheetText
(
sheet
consoleActor
)
{
const
cssText
=
modifiedStyleSheets
.
get
(
sheet
)
;
if
(
cssText
!
=
=
undefined
)
{
return
Promise
.
resolve
(
cssText
)
;
}
if
(
!
sheet
.
href
)
{
const
content
=
sheet
.
ownerNode
.
textContent
;
return
Promise
.
resolve
(
content
)
;
}
return
fetchStylesheet
(
sheet
consoleActor
)
.
then
(
(
{
content
}
)
=
>
content
)
;
}
exports
.
getSheetText
=
getSheetText
;
function
fetchStylesheetFromNetworkMonitor
(
href
consoleActor
)
{
if
(
!
consoleActor
)
{
return
null
;
}
const
request
=
consoleActor
.
getNetworkEventActorForURL
(
href
)
;
if
(
!
request
)
{
return
null
;
}
const
content
=
request
.
_response
.
content
;
if
(
request
.
_discardResponseBody
|
|
request
.
_truncated
|
|
!
content
)
{
return
null
;
}
if
(
content
.
text
.
type
!
=
"
longString
"
)
{
return
{
content
:
content
.
text
contentType
:
content
.
mimeType
}
;
}
const
longStringActor
=
consoleActor
.
conn
.
_getOrCreateActor
(
content
.
text
.
actor
)
;
if
(
!
longStringActor
)
{
return
null
;
}
return
{
content
:
longStringActor
.
str
contentType
:
content
.
mimeType
}
;
}
function
getCSSCharset
(
sheet
)
{
if
(
sheet
)
{
if
(
sheet
.
ownerNode
&
&
sheet
.
ownerNode
.
getAttribute
)
{
const
linkCharset
=
sheet
.
ownerNode
.
getAttribute
(
"
charset
"
)
;
if
(
linkCharset
!
=
null
)
{
return
linkCharset
;
}
}
if
(
sheet
.
ownerNode
&
&
sheet
.
ownerNode
.
ownerDocument
.
characterSet
)
{
return
sheet
.
ownerNode
.
ownerDocument
.
characterSet
;
}
}
return
"
UTF
-
8
"
;
}
async
function
fetchStylesheet
(
sheet
consoleActor
)
{
const
href
=
sheet
.
href
;
let
result
=
fetchStylesheetFromNetworkMonitor
(
href
consoleActor
)
;
if
(
result
)
{
return
result
;
}
const
options
=
{
loadFromCache
:
true
policy
:
Ci
.
nsIContentPolicy
.
TYPE_INTERNAL_STYLESHEET
charset
:
getCSSCharset
(
sheet
)
}
;
const
excludedProtocolsRe
=
/
^
(
chrome
|
file
|
resource
|
moz
-
extension
)
:
\
/
\
/
/
;
if
(
!
excludedProtocolsRe
.
test
(
href
)
)
{
if
(
sheet
.
ownerNode
)
{
options
.
window
=
sheet
.
ownerNode
.
ownerDocument
.
defaultView
;
options
.
principal
=
sheet
.
ownerNode
.
ownerDocument
.
nodePrincipal
;
}
}
try
{
result
=
await
fetch
(
href
options
)
;
}
catch
(
e
)
{
console
.
error
(
stylesheets
actor
:
fetch
failed
for
{
href
}
+
using
system
principal
instead
.
)
;
options
.
window
=
undefined
;
options
.
principal
=
undefined
;
result
=
await
fetch
(
href
options
)
;
}
return
result
;
}
var
StyleSheetActor
=
protocol
.
ActorClassWithSpec
(
styleSheetSpec
{
toString
:
function
(
)
{
return
"
[
StyleSheetActor
"
+
this
.
actorID
+
"
]
"
;
}
get
window
(
)
{
return
this
.
parentActor
.
window
;
}
get
document
(
)
{
return
this
.
window
.
document
;
}
get
ownerWindow
(
)
{
return
this
.
ownerDocument
.
defaultView
;
}
get
ownerNode
(
)
{
return
this
.
rawSheet
.
ownerNode
;
}
get
href
(
)
{
return
this
.
rawSheet
.
href
;
}
get
safeHref
(
)
{
let
href
=
this
.
href
;
if
(
!
href
)
{
if
(
this
.
ownerNode
.
nodeType
=
=
this
.
ownerNode
.
DOCUMENT_NODE
)
{
href
=
this
.
ownerNode
.
location
.
href
;
}
else
if
(
this
.
ownerNode
.
ownerDocument
&
&
this
.
ownerNode
.
ownerDocument
.
location
)
{
href
=
this
.
ownerNode
.
ownerDocument
.
location
.
href
;
}
}
return
href
;
}
get
styleSheetIndex
(
)
{
if
(
this
.
_styleSheetIndex
=
=
-
1
)
{
for
(
let
i
=
0
;
i
<
this
.
document
.
styleSheets
.
length
;
i
+
+
)
{
if
(
this
.
document
.
styleSheets
[
i
]
=
=
this
.
rawSheet
)
{
this
.
_styleSheetIndex
=
i
;
break
;
}
}
}
return
this
.
_styleSheetIndex
;
}
destroy
:
function
(
)
{
if
(
this
.
_transitionTimeout
&
&
this
.
window
)
{
this
.
window
.
clearTimeout
(
this
.
_transitionTimeout
)
;
removePseudoClassLock
(
this
.
document
.
documentElement
TRANSITION_PSEUDO_CLASS
)
;
}
}
initialize
:
function
(
styleSheet
parentActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
null
)
;
this
.
rawSheet
=
styleSheet
;
this
.
parentActor
=
parentActor
;
this
.
conn
=
this
.
parentActor
.
conn
;
this
.
text
=
null
;
this
.
_styleSheetIndex
=
-
1
;
let
parentStyleSheet
=
styleSheet
;
while
(
parentStyleSheet
.
parentStyleSheet
)
{
parentStyleSheet
=
parentStyleSheet
.
parentStyleSheet
;
}
if
(
parentStyleSheet
.
ownerNode
)
{
this
.
ownerDocument
=
parentStyleSheet
.
ownerNode
.
ownerDocument
;
}
else
{
this
.
ownerDocument
=
parentActor
.
window
;
}
}
hasRulesModifiedByCSSOM
:
function
(
)
{
return
InspectorUtils
.
hasRulesModifiedByCSSOM
(
this
.
rawSheet
)
;
}
getCSSRules
:
function
(
)
{
let
rules
;
try
{
rules
=
this
.
rawSheet
.
cssRules
;
}
catch
(
e
)
{
}
if
(
rules
)
{
return
Promise
.
resolve
(
rules
)
;
}
if
(
!
this
.
ownerNode
)
{
return
Promise
.
resolve
(
[
]
)
;
}
if
(
this
.
_cssRules
)
{
return
this
.
_cssRules
;
}
const
deferred
=
defer
(
)
;
const
onSheetLoaded
=
(
event
)
=
>
{
this
.
ownerNode
.
removeEventListener
(
"
load
"
onSheetLoaded
)
;
deferred
.
resolve
(
this
.
rawSheet
.
cssRules
)
;
}
;
this
.
ownerNode
.
addEventListener
(
"
load
"
onSheetLoaded
)
;
this
.
_cssRules
=
deferred
.
promise
;
return
this
.
_cssRules
;
}
form
:
function
(
detail
)
{
if
(
detail
=
=
=
"
actorid
"
)
{
return
this
.
actorID
;
}
let
docHref
;
if
(
this
.
ownerNode
)
{
if
(
this
.
ownerNode
.
nodeType
=
=
this
.
ownerNode
.
DOCUMENT_NODE
)
{
docHref
=
this
.
ownerNode
.
location
.
href
;
}
else
if
(
this
.
ownerNode
.
ownerDocument
&
&
this
.
ownerNode
.
ownerDocument
.
location
)
{
docHref
=
this
.
ownerNode
.
ownerDocument
.
location
.
href
;
}
}
const
form
=
{
actor
:
this
.
actorID
href
:
this
.
href
nodeHref
:
docHref
disabled
:
this
.
rawSheet
.
disabled
title
:
this
.
rawSheet
.
title
system
:
!
CssLogic
.
isContentStylesheet
(
this
.
rawSheet
)
styleSheetIndex
:
this
.
styleSheetIndex
sourceMapURL
:
this
.
rawSheet
.
sourceMapURL
}
;
try
{
form
.
ruleCount
=
this
.
rawSheet
.
cssRules
.
length
;
}
catch
(
e
)
{
this
.
getCSSRules
(
)
.
then
(
(
)
=
>
{
this
.
_notifyPropertyChanged
(
"
ruleCount
"
)
;
}
)
;
}
return
form
;
}
toggleDisabled
:
function
(
)
{
this
.
rawSheet
.
disabled
=
!
this
.
rawSheet
.
disabled
;
this
.
_notifyPropertyChanged
(
"
disabled
"
)
;
return
this
.
rawSheet
.
disabled
;
}
_notifyPropertyChanged
:
function
(
property
)
{
this
.
emit
(
"
property
-
change
"
property
this
.
form
(
)
[
property
]
)
;
}
getText
:
function
(
)
{
return
this
.
_getText
(
)
.
then
(
(
text
)
=
>
{
return
new
LongStringActor
(
this
.
conn
text
|
|
"
"
)
;
}
)
;
}
_getText
:
function
(
)
{
if
(
typeof
this
.
text
=
=
=
"
string
"
)
{
return
Promise
.
resolve
(
this
.
text
)
;
}
return
getSheetText
(
this
.
rawSheet
this
.
_consoleActor
)
.
then
(
text
=
>
{
this
.
text
=
text
;
return
text
;
}
)
;
}
get
_consoleActor
(
)
{
if
(
this
.
parentActor
.
exited
)
{
return
null
;
}
const
form
=
this
.
parentActor
.
form
(
)
;
return
this
.
conn
.
_getOrCreateActor
(
form
.
consoleActor
)
;
}
getMediaRules
:
function
(
)
{
return
this
.
_getMediaRules
(
)
;
}
_getMediaRules
:
function
(
)
{
return
this
.
getCSSRules
(
)
.
then
(
(
rules
)
=
>
{
const
mediaRules
=
[
]
;
for
(
let
i
=
0
;
i
<
rules
.
length
;
i
+
+
)
{
const
rule
=
rules
[
i
]
;
if
(
rule
.
type
!
=
CSSRule
.
MEDIA_RULE
)
{
continue
;
}
const
actor
=
new
MediaRuleActor
(
rule
this
)
;
this
.
manage
(
actor
)
;
mediaRules
.
push
(
actor
)
;
}
return
mediaRules
;
}
)
;
}
update
:
function
(
text
transition
kind
=
UPDATE_GENERAL
)
{
InspectorUtils
.
parseStyleSheet
(
this
.
rawSheet
text
)
;
modifiedStyleSheets
.
set
(
this
.
rawSheet
text
)
;
this
.
text
=
text
;
if
(
kind
!
=
UPDATE_PRESERVING_RULES
)
{
this
.
_notifyPropertyChanged
(
"
ruleCount
"
)
;
}
if
(
transition
)
{
this
.
_startTransition
(
kind
)
;
}
else
{
this
.
emit
(
"
style
-
applied
"
kind
this
)
;
}
this
.
_getMediaRules
(
)
.
then
(
(
rules
)
=
>
{
this
.
emit
(
"
media
-
rules
-
changed
"
rules
)
;
}
)
;
}
_startTransition
:
function
(
kind
)
{
if
(
!
this
.
_transitionSheetLoaded
)
{
this
.
_transitionSheetLoaded
=
true
;
loadSheet
(
this
.
window
TRANSITION_SHEET
)
;
}
addPseudoClassLock
(
this
.
document
.
documentElement
TRANSITION_PSEUDO_CLASS
)
;
this
.
window
.
clearTimeout
(
this
.
_transitionTimeout
)
;
this
.
_transitionTimeout
=
this
.
window
.
setTimeout
(
this
.
_onTransitionEnd
.
bind
(
this
kind
)
TRANSITION_DURATION_MS
+
TRANSITION_BUFFER_MS
)
;
}
_onTransitionEnd
:
function
(
kind
)
{
this
.
_transitionTimeout
=
null
;
removePseudoClassLock
(
this
.
document
.
documentElement
TRANSITION_PSEUDO_CLASS
)
;
this
.
emit
(
"
style
-
applied
"
kind
this
)
;
}
}
)
;
exports
.
StyleSheetActor
=
StyleSheetActor
;
var
StyleSheetsActor
=
protocol
.
ActorClassWithSpec
(
styleSheetsSpec
{
get
window
(
)
{
return
this
.
parentActor
.
window
;
}
get
document
(
)
{
return
this
.
window
.
document
;
}
form
:
function
(
)
{
return
{
actor
:
this
.
actorID
}
;
}
initialize
:
function
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
null
)
;
this
.
parentActor
=
targetActor
;
this
.
_onNewStyleSheetActor
=
this
.
_onNewStyleSheetActor
.
bind
(
this
)
;
this
.
_onSheetAdded
=
this
.
_onSheetAdded
.
bind
(
this
)
;
this
.
_onWindowReady
=
this
.
_onWindowReady
.
bind
(
this
)
;
this
.
_transitionSheetLoaded
=
false
;
this
.
parentActor
.
on
(
"
stylesheet
-
added
"
this
.
_onNewStyleSheetActor
)
;
this
.
parentActor
.
on
(
"
window
-
ready
"
this
.
_onWindowReady
)
;
this
.
parentActor
.
chromeEventHandler
.
addEventListener
(
"
StyleSheetApplicableStateChanged
"
this
.
_onSheetAdded
true
)
;
this
.
_nextStyleSheetIsNew
=
false
;
}
destroy
:
function
(
)
{
for
(
const
win
of
this
.
parentActor
.
windows
)
{
win
.
document
.
styleSheetChangeEventsEnabled
=
false
;
}
this
.
parentActor
.
off
(
"
stylesheet
-
added
"
this
.
_onNewStyleSheetActor
)
;
this
.
parentActor
.
off
(
"
window
-
ready
"
this
.
_onWindowReady
)
;
this
.
parentActor
.
chromeEventHandler
.
removeEventListener
(
"
StyleSheetApplicableStateChanged
"
this
.
_onSheetAdded
true
)
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
_onWindowReady
:
function
(
evt
)
{
this
.
_addStyleSheets
(
evt
.
window
)
;
}
_onNewStyleSheetActor
:
function
(
actor
)
{
this
.
emit
(
"
stylesheet
-
added
"
actor
this
.
_nextStyleSheetIsNew
)
;
this
.
_nextStyleSheetIsNew
=
false
;
}
async
getStyleSheets
(
)
{
let
actors
=
[
]
;
for
(
const
win
of
this
.
parentActor
.
windows
)
{
const
sheets
=
await
this
.
_addStyleSheets
(
win
)
;
actors
=
actors
.
concat
(
sheets
)
;
}
return
actors
;
}
_shouldListSheet
:
function
(
sheet
)
{
if
(
sheet
.
href
&
&
sheet
.
href
.
toLowerCase
(
)
=
=
"
about
:
preferencestylesheet
"
)
{
return
false
;
}
return
true
;
}
_onSheetAdded
:
function
(
evt
)
{
const
sheet
=
evt
.
stylesheet
;
if
(
this
.
_shouldListSheet
(
sheet
)
&
&
!
this
.
_haveAncestorWithSameURL
(
sheet
)
)
{
this
.
parentActor
.
createStyleSheetActor
(
sheet
)
;
}
}
_addStyleSheets
:
function
(
win
)
{
return
(
async
function
(
)
{
const
doc
=
win
.
document
;
doc
.
styleSheetChangeEventsEnabled
=
true
;
const
isChrome
=
Services
.
scriptSecurityManager
.
isSystemPrincipal
(
doc
.
nodePrincipal
)
;
const
documentOnly
=
!
isChrome
;
const
styleSheets
=
InspectorUtils
.
getAllStyleSheets
(
doc
documentOnly
)
;
let
actors
=
[
]
;
for
(
let
i
=
0
;
i
<
styleSheets
.
length
;
i
+
+
)
{
const
sheet
=
styleSheets
[
i
]
;
if
(
!
this
.
_shouldListSheet
(
sheet
)
)
{
continue
;
}
const
actor
=
this
.
parentActor
.
createStyleSheetActor
(
sheet
)
;
actors
.
push
(
actor
)
;
const
imports
=
await
this
.
_getImported
(
doc
actor
)
;
actors
=
actors
.
concat
(
imports
)
;
}
return
actors
;
}
.
bind
(
this
)
)
(
)
;
}
_getImported
:
function
(
doc
styleSheet
)
{
return
(
async
function
(
)
{
const
rules
=
await
styleSheet
.
getCSSRules
(
)
;
let
imported
=
[
]
;
for
(
let
i
=
0
;
i
<
rules
.
length
;
i
+
+
)
{
const
rule
=
rules
[
i
]
;
if
(
rule
.
type
=
=
CSSRule
.
IMPORT_RULE
)
{
const
sheet
=
rule
.
styleSheet
;
if
(
!
sheet
|
|
this
.
_haveAncestorWithSameURL
(
sheet
)
|
|
!
this
.
_shouldListSheet
(
sheet
)
)
{
continue
;
}
const
actor
=
this
.
parentActor
.
createStyleSheetActor
(
rule
.
styleSheet
)
;
imported
.
push
(
actor
)
;
const
children
=
await
this
.
_getImported
(
doc
actor
)
;
imported
=
imported
.
concat
(
children
)
;
}
else
if
(
rule
.
type
!
=
CSSRule
.
CHARSET_RULE
)
{
break
;
}
}
return
imported
;
}
.
bind
(
this
)
)
(
)
;
}
_haveAncestorWithSameURL
(
sheet
)
{
const
sheetHref
=
sheet
.
href
;
while
(
sheet
.
parentStyleSheet
)
{
if
(
sheet
.
parentStyleSheet
.
href
=
=
sheetHref
)
{
return
true
;
}
sheet
=
sheet
.
parentStyleSheet
;
}
return
false
;
}
addStyleSheet
:
function
(
text
)
{
this
.
_nextStyleSheetIsNew
=
true
;
const
parent
=
this
.
document
.
documentElement
;
const
style
=
this
.
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
style
"
)
;
style
.
setAttribute
(
"
type
"
"
text
/
css
"
)
;
if
(
text
)
{
style
.
appendChild
(
this
.
document
.
createTextNode
(
text
)
)
;
}
parent
.
appendChild
(
style
)
;
const
actor
=
this
.
parentActor
.
createStyleSheetActor
(
style
.
sheet
)
;
return
actor
;
}
}
)
;
exports
.
StyleSheetsActor
=
StyleSheetsActor
;
