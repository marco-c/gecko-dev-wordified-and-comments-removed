"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
promisesSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
promises
"
)
;
const
{
expectState
ActorPool
}
=
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
const
{
ObjectActor
}
=
require
(
"
devtools
/
server
/
actors
/
object
"
)
;
const
{
createValueGrip
}
=
require
(
"
devtools
/
server
/
actors
/
object
/
utils
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
var
PromisesActor
=
protocol
.
ActorClassWithSpec
(
promisesSpec
{
initialize
:
function
(
conn
parentActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
conn
=
conn
;
this
.
parentActor
=
parentActor
;
this
.
state
=
"
detached
"
;
this
.
_dbg
=
null
;
this
.
_gripDepth
=
0
;
this
.
_navigationLifetimePool
=
null
;
this
.
_newPromises
=
null
;
this
.
_promisesSettled
=
null
;
this
.
objectGrip
=
this
.
objectGrip
.
bind
(
this
)
;
this
.
_makePromiseEventHandler
=
this
.
_makePromiseEventHandler
.
bind
(
this
)
;
this
.
_onWindowReady
=
this
.
_onWindowReady
.
bind
(
this
)
;
}
destroy
:
function
(
)
{
if
(
this
.
state
=
=
=
"
attached
"
)
{
this
.
detach
(
)
;
}
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
this
.
conn
)
;
}
get
dbg
(
)
{
if
(
!
this
.
_dbg
)
{
this
.
_dbg
=
this
.
parentActor
.
makeDebugger
(
)
;
}
return
this
.
_dbg
;
}
attach
:
expectState
(
"
detached
"
function
(
)
{
this
.
dbg
.
addDebuggees
(
)
;
this
.
_navigationLifetimePool
=
this
.
_createActorPool
(
)
;
this
.
conn
.
addActorPool
(
this
.
_navigationLifetimePool
)
;
this
.
_newPromises
=
[
]
;
this
.
_promisesSettled
=
[
]
;
this
.
dbg
.
findSources
(
)
.
forEach
(
source
=
>
{
this
.
parentActor
.
sources
.
createSourceActors
(
source
)
;
}
)
;
this
.
dbg
.
onNewScript
=
s
=
>
{
this
.
parentActor
.
sources
.
createSourceActors
(
s
.
source
)
;
}
;
EventEmitter
.
on
(
this
.
parentActor
"
window
-
ready
"
this
.
_onWindowReady
)
;
this
.
state
=
"
attached
"
;
}
"
attaching
to
the
PromisesActor
"
)
detach
:
expectState
(
"
attached
"
function
(
)
{
this
.
dbg
.
removeAllDebuggees
(
)
;
this
.
dbg
.
enabled
=
false
;
this
.
_dbg
=
null
;
this
.
_newPromises
=
null
;
this
.
_promisesSettled
=
null
;
if
(
this
.
_navigationLifetimePool
)
{
this
.
conn
.
removeActorPool
(
this
.
_navigationLifetimePool
)
;
this
.
_navigationLifetimePool
=
null
;
}
EventEmitter
.
off
(
this
.
parentActor
"
window
-
ready
"
this
.
_onWindowReady
)
;
this
.
state
=
"
detached
"
;
}
)
_createActorPool
:
function
(
)
{
const
pool
=
new
ActorPool
(
this
.
conn
)
;
pool
.
objectActors
=
new
WeakMap
(
)
;
return
pool
;
}
_createObjectActorForPromise
:
function
(
promise
)
{
if
(
this
.
_navigationLifetimePool
.
objectActors
.
has
(
promise
)
)
{
return
this
.
_navigationLifetimePool
.
objectActors
.
get
(
promise
)
;
}
const
actor
=
new
ObjectActor
(
promise
{
getGripDepth
:
(
)
=
>
this
.
_gripDepth
incrementGripDepth
:
(
)
=
>
this
.
_gripDepth
+
+
decrementGripDepth
:
(
)
=
>
this
.
_gripDepth
-
-
createValueGrip
:
v
=
>
createValueGrip
(
v
this
.
_navigationLifetimePool
this
.
objectGrip
)
sources
:
(
)
=
>
this
.
parentActor
.
sources
createEnvironmentActor
:
(
)
=
>
DevToolsUtils
.
reportException
(
"
PromisesActor
"
Error
(
"
createEnvironmentActor
not
yet
implemented
"
)
)
getGlobalDebugObject
:
(
)
=
>
null
}
this
.
conn
)
;
this
.
_navigationLifetimePool
.
addActor
(
actor
)
;
this
.
_navigationLifetimePool
.
objectActors
.
set
(
promise
actor
)
;
return
actor
;
}
objectGrip
:
function
(
value
)
{
return
this
.
_createObjectActorForPromise
(
value
)
.
form
(
)
;
}
listPromises
:
function
(
)
{
const
promises
=
this
.
dbg
.
findObjects
(
{
class
:
"
Promise
"
}
)
;
this
.
dbg
.
onNewPromise
=
this
.
_makePromiseEventHandler
(
this
.
_newPromises
"
new
-
promises
"
)
;
this
.
dbg
.
onPromiseSettled
=
this
.
_makePromiseEventHandler
(
this
.
_promisesSettled
"
promises
-
settled
"
)
;
return
promises
.
map
(
p
=
>
this
.
_createObjectActorForPromise
(
p
)
)
;
}
_makePromiseEventHandler
:
function
(
array
eventName
)
{
return
promise
=
>
{
const
actor
=
this
.
_createObjectActorForPromise
(
promise
)
;
const
needsScheduling
=
array
.
length
=
=
0
;
array
.
push
(
actor
)
;
if
(
needsScheduling
)
{
DevToolsUtils
.
executeSoon
(
(
)
=
>
{
this
.
emit
(
eventName
array
.
splice
(
0
array
.
length
)
)
;
}
)
;
}
}
;
}
_onWindowReady
:
expectState
(
"
attached
"
function
(
{
isTopLevel
}
)
{
if
(
!
isTopLevel
)
{
return
;
}
this
.
_navigationLifetimePool
.
cleanup
(
)
;
this
.
dbg
.
removeAllDebuggees
(
)
;
this
.
dbg
.
addDebuggees
(
)
;
}
)
}
)
;
exports
.
PromisesActor
=
PromisesActor
;
