"
use
strict
"
;
const
{
Cc
Ci
}
=
require
(
"
chrome
"
)
;
loader
.
lazyGetter
(
this
"
DOMUtils
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
inspector
/
dom
-
utils
;
1
"
]
.
getService
(
Ci
.
inIDOMUtils
)
;
}
)
;
loader
.
lazyGetter
(
this
"
appInfo
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
]
.
getService
(
Ci
.
nsIXULAppInfo
)
;
}
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
ActorClassWithSpec
Actor
}
=
protocol
;
const
{
cssPropertiesSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
css
-
properties
"
)
;
const
{
CSS_PROPERTIES
CSS_TYPES
}
=
require
(
"
devtools
/
shared
/
css
/
properties
-
db
"
)
;
const
{
cssColors
}
=
require
(
"
devtools
/
shared
/
css
/
color
-
db
"
)
;
exports
.
CssPropertiesActor
=
ActorClassWithSpec
(
cssPropertiesSpec
{
typeName
:
"
cssProperties
"
initialize
(
conn
parent
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
parent
=
parent
;
}
destroy
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
getCSSDatabase
(
clientBrowserVersion
)
{
const
serverBrowserVersion
=
appInfo
.
platformVersion
.
match
(
/
^
\
d
+
/
)
[
0
]
;
if
(
clientBrowserVersion
!
=
=
0
&
&
clientBrowserVersion
=
=
=
serverBrowserVersion
)
{
return
{
}
;
}
const
properties
=
generateCssProperties
(
)
;
const
pseudoElements
=
DOMUtils
.
getCSSPseudoElementNames
(
)
;
return
{
properties
pseudoElements
}
;
}
}
)
;
function
generateCssProperties
(
)
{
const
properties
=
{
}
;
const
propertyNames
=
DOMUtils
.
getCSSPropertyNames
(
DOMUtils
.
INCLUDE_ALIASES
)
;
const
colors
=
Object
.
keys
(
cssColors
)
;
propertyNames
.
forEach
(
name
=
>
{
let
supports
=
[
]
;
for
(
let
type
in
CSS_TYPES
)
{
if
(
safeCssPropertySupportsType
(
name
DOMUtils
[
"
TYPE_
"
+
type
]
)
)
{
supports
.
push
(
CSS_TYPES
[
type
]
)
;
}
}
let
values
=
DOMUtils
.
getCSSValuesForProperty
(
name
)
;
if
(
values
.
includes
(
"
aliceblue
"
)
)
{
values
=
values
.
filter
(
x
=
>
!
colors
.
includes
(
x
)
)
;
values
.
unshift
(
"
COLOR
"
)
;
}
let
subproperties
=
DOMUtils
.
getSubpropertiesForCSSProperty
(
name
)
;
const
clientDefinition
=
CSS_PROPERTIES
[
name
]
|
|
{
}
;
const
serverDefinition
=
{
isInherited
:
DOMUtils
.
isInheritedProperty
(
name
)
values
supports
subproperties
}
;
properties
[
name
]
=
Object
.
assign
(
clientDefinition
serverDefinition
)
;
}
)
;
return
properties
;
}
exports
.
generateCssProperties
=
generateCssProperties
;
function
isCssPropertyKnown
(
name
)
{
try
{
DOMUtils
.
cssPropertyIsShorthand
(
name
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
exports
.
isCssPropertyKnown
=
isCssPropertyKnown
;
function
safeCssPropertySupportsType
(
name
type
)
{
try
{
return
DOMUtils
.
cssPropertySupportsType
(
name
type
)
;
}
catch
(
e
)
{
return
false
;
}
}
