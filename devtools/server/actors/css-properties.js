"
use
strict
"
;
const
{
Cc
Ci
Cu
}
=
require
(
"
chrome
"
)
;
loader
.
lazyGetter
(
this
"
DOMUtils
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
inspector
/
dom
-
utils
;
1
"
]
.
getService
(
Ci
.
inIDOMUtils
)
;
}
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
ActorClassWithSpec
Actor
}
=
protocol
;
const
{
cssPropertiesSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
css
-
properties
"
)
;
const
clientCssDatabase
=
require
(
"
devtools
/
shared
/
css
-
properties
-
db
"
)
var
CssPropertiesActor
=
exports
.
CssPropertiesActor
=
ActorClassWithSpec
(
cssPropertiesSpec
{
typeName
:
"
cssProperties
"
initialize
:
function
(
conn
parent
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
parent
=
parent
;
}
destroy
:
function
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
getCSSDatabase
:
function
(
)
{
const
db
=
{
}
;
const
properties
=
DOMUtils
.
getCSSPropertyNames
(
DOMUtils
.
INCLUDE_ALIASES
)
;
properties
.
forEach
(
name
=
>
{
const
clientDefinition
=
clientCssDatabase
[
name
]
|
|
{
}
;
const
serverDefinition
=
{
isInherited
:
DOMUtils
.
isInheritedProperty
(
name
)
}
;
db
[
name
]
=
Object
.
assign
(
clientDefinition
serverDefinition
)
;
}
)
;
return
db
;
}
}
)
;
function
isCssPropertyKnown
(
name
)
{
try
{
DOMUtils
.
cssPropertyIsShorthand
(
name
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
exports
.
isCssPropertyKnown
=
isCssPropertyKnown
