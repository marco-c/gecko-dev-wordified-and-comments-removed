"
use
strict
"
;
const
protocol
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
ActorClassWithSpec
Actor
}
=
protocol
;
const
{
cssPropertiesSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
css
-
properties
.
js
"
)
;
const
{
cssColors
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
css
/
color
-
db
.
js
"
)
;
const
InspectorUtils
=
require
(
"
InspectorUtils
"
)
;
loader
.
lazyRequireGetter
(
this
"
CSS_TYPES
"
"
resource
:
/
/
devtools
/
shared
/
css
/
constants
.
js
"
true
)
;
exports
.
CssPropertiesActor
=
ActorClassWithSpec
(
cssPropertiesSpec
{
initialize
(
conn
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
}
destroy
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
getCSSDatabase
(
)
{
const
properties
=
generateCssProperties
(
)
;
const
pseudoElements
=
InspectorUtils
.
getCSSPseudoElementNames
(
)
;
const
supportedFeature
=
{
"
css
-
color
-
4
-
color
-
function
"
:
InspectorUtils
.
isValidCSSColor
(
"
rgb
(
1
1
1
/
100
%
)
"
)
}
;
return
{
properties
pseudoElements
supportedFeature
}
;
}
}
)
;
function
generateCssProperties
(
)
{
const
properties
=
{
}
;
const
propertyNames
=
InspectorUtils
.
getCSSPropertyNames
(
{
includeAliases
:
true
}
)
;
const
colors
=
Object
.
keys
(
cssColors
)
;
propertyNames
.
forEach
(
name
=
>
{
const
supports
=
[
]
;
for
(
const
type
in
CSS_TYPES
)
{
if
(
safeCssPropertySupportsType
(
name
type
)
)
{
supports
.
push
(
type
)
;
}
}
let
values
=
InspectorUtils
.
getCSSValuesForProperty
(
name
)
;
if
(
values
.
includes
(
"
aliceblue
"
)
)
{
values
=
values
.
filter
(
x
=
>
!
colors
.
includes
(
x
)
)
;
values
.
unshift
(
"
COLOR
"
)
;
}
const
subproperties
=
InspectorUtils
.
getSubpropertiesForCSSProperty
(
name
)
;
properties
[
name
]
=
{
isInherited
:
InspectorUtils
.
isInheritedProperty
(
name
)
values
supports
subproperties
}
;
}
)
;
return
properties
;
}
exports
.
generateCssProperties
=
generateCssProperties
;
function
isCssPropertyKnown
(
name
)
{
try
{
InspectorUtils
.
cssPropertyIsShorthand
(
name
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
exports
.
isCssPropertyKnown
=
isCssPropertyKnown
;
function
safeCssPropertySupportsType
(
name
type
)
{
try
{
return
InspectorUtils
.
cssPropertySupportsType
(
name
type
)
;
}
catch
(
e
)
{
return
false
;
}
}
