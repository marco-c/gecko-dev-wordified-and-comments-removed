"
use
strict
"
;
var
{
ConsoleAPIListener
}
=
require
(
"
devtools
/
server
/
actors
/
webconsole
/
listeners
"
)
;
var
{
update
}
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
loader
.
lazyRequireGetter
(
this
"
WebConsoleActor
"
"
devtools
/
server
/
actors
/
webconsole
"
true
)
;
const
{
extend
}
=
require
(
"
devtools
/
shared
/
extend
"
)
;
const
{
ActorClassWithSpec
Actor
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
webconsoleSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
webconsole
"
)
;
const
addonConsolePrototype
=
extend
(
{
}
WebConsoleActor
.
prototype
)
;
addonConsolePrototype
.
initialize
=
function
(
addon
connection
parentActor
)
{
this
.
addon
=
addon
;
Actor
.
prototype
.
initialize
.
call
(
this
connection
)
;
WebConsoleActor
.
call
(
this
connection
parentActor
)
;
}
;
update
(
addonConsolePrototype
{
actorPrefix
:
"
addonConsole
"
addon
:
null
get
window
(
)
{
return
this
.
parentActor
.
global
;
}
destroy
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
WebConsoleActor
.
prototype
.
destroy
.
call
(
this
)
;
this
.
addon
=
null
;
}
startListeners
:
function
ACAOnStartListeners
(
request
)
{
let
startedListeners
=
[
]
;
while
(
request
.
listeners
.
length
>
0
)
{
let
listener
=
request
.
listeners
.
shift
(
)
;
switch
(
listener
)
{
case
"
ConsoleAPI
"
:
if
(
!
this
.
consoleAPIListener
)
{
this
.
consoleAPIListener
=
new
ConsoleAPIListener
(
null
this
{
addonId
:
this
.
addon
.
id
}
)
;
this
.
consoleAPIListener
.
init
(
)
;
}
startedListeners
.
push
(
listener
)
;
break
;
}
}
return
{
startedListeners
:
startedListeners
nativeConsoleAPI
:
true
traits
:
this
.
traits
}
;
}
}
)
;
exports
.
AddonConsoleActor
=
ActorClassWithSpec
(
webconsoleSpec
addonConsolePrototype
)
;
exports
.
AddonConsoleActor
.
prototype
.
typeName
=
"
addonConsole
"
;
