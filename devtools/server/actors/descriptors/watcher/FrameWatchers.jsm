"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
registerWatcher
"
"
unregisterWatcher
"
"
getWatcher
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ActorManagerParent
"
"
resource
:
/
/
gre
/
modules
/
ActorManagerParent
.
jsm
"
)
;
const
watchers
=
new
Map
(
)
;
async
function
registerWatcher
(
watcher
watchedBrowsingContextID
)
{
const
prefix
=
watcher
.
conn
.
prefix
;
if
(
watchers
.
has
(
prefix
)
)
{
throw
new
Error
(
A
watcher
has
already
been
registered
via
prefix
{
prefix
}
.
)
;
}
watchers
.
set
(
prefix
watcher
)
;
if
(
watchers
.
size
=
=
1
)
{
ActorManagerParent
.
addJSWindowActors
(
{
DevToolsFrame
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
devtools
/
server
/
connectors
/
js
-
window
-
actor
/
DevToolsFrameParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
devtools
/
server
/
connectors
/
js
-
window
-
actor
/
DevToolsFrameChild
.
jsm
"
events
:
{
DOMWindowCreated
:
{
}
}
}
allFrames
:
true
}
}
)
;
ActorManagerParent
.
flush
(
)
;
}
const
browsingContexts
=
getAllRemoteBrowsingContexts
(
watchedBrowsingContextID
)
;
for
(
const
browsingContext
of
browsingContexts
)
{
if
(
!
shouldNotifyWindowGlobal
(
browsingContext
.
currentWindowGlobal
watchedBrowsingContextID
)
)
{
continue
;
}
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
await
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
instantiateTarget
(
{
prefix
browsingContextID
:
watchedBrowsingContextID
}
)
;
}
}
function
unregisterWatcher
(
watcher
)
{
watchers
.
delete
(
watcher
.
conn
.
prefix
)
;
if
(
watchers
.
size
=
=
0
)
{
ChromeUtils
.
unregisterWindowActor
(
"
DevToolsFrame
"
)
;
}
}
function
getWatcher
(
parentConnectionPrefix
)
{
return
watchers
.
get
(
parentConnectionPrefix
)
;
}
function
getAllRemoteBrowsingContexts
(
browsingContextID
)
{
const
browsingContexts
=
[
]
;
function
walk
(
browsingContext
)
{
if
(
browsingContexts
.
includes
(
browsingContext
)
)
{
return
;
}
browsingContexts
.
push
(
browsingContext
)
;
for
(
const
child
of
browsingContext
.
children
)
{
walk
(
child
)
;
}
if
(
browsingContext
.
window
)
{
for
(
const
browser
of
browsingContext
.
window
.
document
.
querySelectorAll
(
browser
[
remote
=
"
true
"
]
)
)
{
walk
(
browser
.
browsingContext
)
;
}
}
}
if
(
browsingContextID
)
{
walk
(
BrowsingContext
.
get
(
browsingContextID
)
)
;
browsingContexts
.
shift
(
)
;
}
else
{
for
(
const
window
of
Services
.
ww
.
getWindowEnumerator
(
)
)
{
if
(
window
.
docShell
.
browsingContext
)
{
walk
(
window
.
docShell
.
browsingContext
)
;
}
}
}
return
browsingContexts
;
}
function
shouldNotifyWindowGlobal
(
windowGlobal
watchedBrowsingContextID
)
{
const
browsingContext
=
windowGlobal
.
browsingContext
;
if
(
browsingContext
.
currentRemoteType
=
=
"
extension
"
)
{
return
false
;
}
if
(
windowGlobal
.
osPid
=
=
-
1
&
&
windowGlobal
.
isInProcess
)
{
return
false
;
}
if
(
windowGlobal
.
documentURI
&
&
windowGlobal
.
documentURI
.
spec
=
=
"
about
:
blank
"
)
{
return
false
;
}
if
(
watchedBrowsingContextID
&
&
browsingContext
.
top
.
id
!
=
watchedBrowsingContextID
)
{
return
false
;
}
return
(
!
browsingContext
.
parent
|
|
windowGlobal
.
osPid
!
=
(
browsingContext
.
parent
.
currentWindowGlobal
|
|
browsingContext
.
parent
.
window
.
windowGlobalChild
)
.
osPid
)
;
}
const
DEBUG
=
false
;
function
logWindowGlobal
(
windowGlobal
message
)
{
if
(
!
DEBUG
)
{
return
;
}
const
browsingContext
=
windowGlobal
.
browsingContext
;
dump
(
message
+
"
|
BrowsingContext
.
id
:
"
+
browsingContext
.
id
+
"
Inner
Window
ID
:
"
+
windowGlobal
.
innerWindowId
+
"
pid
:
"
+
windowGlobal
.
osPid
+
"
isClosed
:
"
+
windowGlobal
.
isClosed
+
"
isInProcess
:
"
+
windowGlobal
.
isInProcess
+
"
isCurrentGlobal
:
"
+
windowGlobal
.
isCurrentGlobal
+
"
currentRemoteType
:
"
+
browsingContext
.
currentRemoteType
+
"
=
>
"
+
(
windowGlobal
.
documentURI
?
windowGlobal
.
documentURI
.
spec
:
"
no
-
uri
"
)
+
"
\
n
"
)
;
}
