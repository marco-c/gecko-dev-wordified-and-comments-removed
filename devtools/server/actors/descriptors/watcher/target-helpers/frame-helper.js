"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
WatcherRegistry
}
=
require
(
"
devtools
/
server
/
actors
/
descriptors
/
watcher
/
WatcherRegistry
.
jsm
"
)
;
async
function
createTargets
(
watcher
watchedResources
)
{
const
browsingContexts
=
getFilteredRemoteBrowsingContext
(
watcher
.
browsingContextID
)
;
const
promises
=
[
]
;
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
const
promise
=
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
instantiateTarget
(
{
watcherActorID
:
watcher
.
actorID
connectionPrefix
:
watcher
.
conn
.
prefix
browsingContextID
:
watcher
.
browsingContextID
watchedResources
:
watcher
.
watchedResources
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
async
function
destroyTargets
(
watcher
)
{
const
browsingContexts
=
getFilteredRemoteBrowsingContext
(
watcher
.
browsingContextID
)
;
const
promises
=
[
]
;
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
const
promise
=
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
destroyTarget
(
{
watcherActorID
:
watcher
.
actorID
browsingContextID
:
watcher
.
browsingContextID
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
async
function
watchResources
(
{
watcher
resourceTypes
}
)
{
const
watchingAdditionalTargets
=
WatcherRegistry
.
isWatchingTargets
(
watcher
"
frame
"
)
;
const
{
browsingContextID
}
=
watcher
;
const
browsingContexts
=
watchingAdditionalTargets
?
getFilteredRemoteBrowsingContext
(
browsingContextID
)
:
[
]
;
if
(
browsingContextID
)
{
const
topBrowsingContext
=
BrowsingContext
.
get
(
browsingContextID
)
;
if
(
topBrowsingContext
.
currentWindowGlobal
.
osPid
!
=
-
1
)
{
browsingContexts
.
push
(
topBrowsingContext
)
;
}
}
const
promises
=
[
]
;
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
const
promise
=
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
watchFrameResources
(
{
watcherActorID
:
watcher
.
actorID
browsingContextID
:
watcher
.
browsingContextID
resourceTypes
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
function
unwatchResources
(
{
watcher
resourceTypes
}
)
{
const
watchingAdditionalTargets
=
WatcherRegistry
.
isWatchingTargets
(
watcher
"
frame
"
)
;
const
{
browsingContextID
}
=
watcher
;
const
browsingContexts
=
watchingAdditionalTargets
?
getFilteredRemoteBrowsingContext
(
browsingContextID
)
:
[
]
;
if
(
browsingContextID
)
{
const
topBrowsingContext
=
BrowsingContext
.
get
(
browsingContextID
)
;
if
(
topBrowsingContext
.
currentWindowGlobal
.
osPid
!
=
-
1
)
{
browsingContexts
.
push
(
topBrowsingContext
)
;
}
}
for
(
const
browsingContext
of
browsingContexts
)
{
logWindowGlobal
(
browsingContext
.
currentWindowGlobal
"
Existing
WindowGlobal
"
)
;
browsingContext
.
currentWindowGlobal
.
getActor
(
"
DevToolsFrame
"
)
.
unwatchFrameResources
(
{
watcherActorID
:
watcher
.
actorID
browsingContextID
:
watcher
.
browsingContextID
resourceTypes
}
)
;
}
}
module
.
exports
=
{
createTargets
destroyTargets
watchResources
unwatchResources
}
;
function
getFilteredRemoteBrowsingContext
(
watchedBrowsingContextID
)
{
return
getAllRemoteBrowsingContexts
(
watchedBrowsingContextID
)
.
filter
(
browsingContext
=
>
shouldNotifyWindowGlobal
(
browsingContext
.
currentWindowGlobal
watchedBrowsingContextID
)
)
;
}
function
getAllRemoteBrowsingContexts
(
browsingContextID
)
{
const
browsingContexts
=
[
]
;
function
walk
(
browsingContext
)
{
if
(
browsingContexts
.
includes
(
browsingContext
)
)
{
return
;
}
browsingContexts
.
push
(
browsingContext
)
;
for
(
const
child
of
browsingContext
.
children
)
{
walk
(
child
)
;
}
if
(
browsingContext
.
window
)
{
for
(
const
browser
of
browsingContext
.
window
.
document
.
querySelectorAll
(
browser
[
remote
=
"
true
"
]
)
)
{
walk
(
browser
.
browsingContext
)
;
}
}
}
if
(
browsingContextID
)
{
walk
(
BrowsingContext
.
get
(
browsingContextID
)
)
;
browsingContexts
.
shift
(
)
;
}
else
{
for
(
const
window
of
Services
.
ww
.
getWindowEnumerator
(
)
)
{
if
(
window
.
docShell
.
browsingContext
)
{
walk
(
window
.
docShell
.
browsingContext
)
;
}
}
}
return
browsingContexts
;
}
function
shouldNotifyWindowGlobal
(
windowGlobal
watchedBrowsingContextID
)
{
const
browsingContext
=
windowGlobal
.
browsingContext
;
if
(
browsingContext
.
currentRemoteType
=
=
"
extension
"
)
{
return
false
;
}
if
(
windowGlobal
.
osPid
=
=
-
1
&
&
windowGlobal
.
isInProcess
)
{
return
false
;
}
if
(
windowGlobal
.
documentURI
&
&
windowGlobal
.
documentURI
.
spec
=
=
"
about
:
blank
"
)
{
return
false
;
}
if
(
watchedBrowsingContextID
&
&
browsingContext
.
top
.
id
!
=
watchedBrowsingContextID
)
{
return
false
;
}
return
(
!
browsingContext
.
parent
|
|
windowGlobal
.
osPid
!
=
browsingContext
.
parent
.
currentWindowGlobal
.
osPid
)
;
}
const
DEBUG
=
false
;
function
logWindowGlobal
(
windowGlobal
message
)
{
if
(
!
DEBUG
)
{
return
;
}
const
browsingContext
=
windowGlobal
.
browsingContext
;
dump
(
message
+
"
|
BrowsingContext
.
id
:
"
+
browsingContext
.
id
+
"
Inner
Window
ID
:
"
+
windowGlobal
.
innerWindowId
+
"
pid
:
"
+
windowGlobal
.
osPid
+
"
isClosed
:
"
+
windowGlobal
.
isClosed
+
"
isInProcess
:
"
+
windowGlobal
.
isInProcess
+
"
isCurrentGlobal
:
"
+
windowGlobal
.
isCurrentGlobal
+
"
currentRemoteType
:
"
+
browsingContext
.
currentRemoteType
+
"
=
>
"
+
(
windowGlobal
.
documentURI
?
windowGlobal
.
documentURI
.
spec
:
"
no
-
uri
"
)
+
"
\
n
"
)
;
}
