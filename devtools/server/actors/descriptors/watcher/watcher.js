"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
watcherSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
watcher
"
)
;
const
Resources
=
require
(
"
devtools
/
server
/
actors
/
resources
/
index
"
)
;
const
{
TargetActorRegistry
}
=
require
(
"
devtools
/
server
/
actors
/
targets
/
target
-
actor
-
registry
.
jsm
"
)
;
const
{
WatcherRegistry
}
=
require
(
"
devtools
/
server
/
actors
/
descriptors
/
watcher
/
WatcherRegistry
.
jsm
"
)
;
const
TARGET_TYPES
=
{
FRAME
:
"
frame
"
}
;
const
TARGET_HELPERS
=
{
}
;
loader
.
lazyRequireGetter
(
TARGET_HELPERS
TARGET_TYPES
.
FRAME
"
devtools
/
server
/
actors
/
descriptors
/
watcher
/
target
-
helpers
/
frame
-
helper
"
)
;
exports
.
WatcherActor
=
protocol
.
ActorClassWithSpec
(
watcherSpec
{
initialize
:
function
(
conn
options
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
_browser
=
options
&
&
options
.
browser
;
}
destroy
:
function
(
)
{
for
(
const
targetType
of
Object
.
values
(
TARGET_TYPES
)
)
{
this
.
unwatchTargets
(
targetType
)
;
}
this
.
unwatchResources
(
Object
.
values
(
Resources
.
TYPES
)
)
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
get
browsingContextID
(
)
{
return
this
.
_browser
?
this
.
_browser
.
browsingContext
.
id
:
null
;
}
get
watchedResources
(
)
{
return
WatcherRegistry
.
getWatchedResources
(
this
)
;
}
form
(
)
{
return
{
actor
:
this
.
actorID
traits
:
{
frame
:
true
resources
:
{
[
Resources
.
TYPES
.
CONSOLE_MESSAGE
]
:
false
}
}
}
;
}
async
watchTargets
(
targetType
)
{
WatcherRegistry
.
watchTargets
(
this
targetType
)
;
const
watchedResources
=
WatcherRegistry
.
getWatchedResources
(
this
)
;
const
targetHelperModule
=
TARGET_HELPERS
[
targetType
]
;
await
targetHelperModule
.
createTargets
(
this
watchedResources
)
;
}
unwatchTargets
(
targetType
)
{
const
isWatchingTargets
=
WatcherRegistry
.
unwatchTargets
(
this
targetType
)
;
if
(
!
isWatchingTargets
)
{
return
;
}
const
targetHelperModule
=
TARGET_HELPERS
[
targetType
]
;
targetHelperModule
.
destroyTargets
(
this
)
;
WatcherRegistry
.
maybeUnregisteringJSWindowActor
(
)
;
}
notifyTargetAvailable
(
actor
)
{
this
.
emit
(
"
target
-
available
-
form
"
actor
)
;
}
notifyTargetDestroyed
(
actor
)
{
this
.
emit
(
"
target
-
destroyed
-
form
"
actor
)
;
}
getParentBrowsingContextID
(
browsingContextID
)
{
const
browsingContext
=
BrowsingContext
.
get
(
browsingContextID
)
;
if
(
!
browsingContext
)
{
throw
new
Error
(
BrowsingContext
with
ID
=
{
browsingContextID
}
doesn
'
t
exist
.
)
;
}
if
(
browsingContext
.
parent
)
{
return
browsingContext
.
parent
.
id
;
}
if
(
browsingContext
.
embedderWindowGlobal
)
{
return
browsingContext
.
embedderWindowGlobal
.
browsingContext
.
id
;
}
return
null
;
}
async
watchResources
(
resourceTypes
)
{
WatcherRegistry
.
watchResources
(
this
resourceTypes
)
;
for
(
const
targetType
in
TARGET_HELPERS
)
{
if
(
!
WatcherRegistry
.
isWatchingTargets
(
this
targetType
)
&
&
targetType
!
=
TARGET_TYPES
.
FRAME
)
{
continue
;
}
const
targetHelperModule
=
TARGET_HELPERS
[
targetType
]
;
await
targetHelperModule
.
watchResources
(
{
watcher
:
this
resourceTypes
}
)
;
}
const
targetActor
=
TargetActorRegistry
.
getTargetActor
(
this
.
browsingContextID
)
;
if
(
targetActor
)
{
await
targetActor
.
watchTargetResources
(
resourceTypes
)
;
}
}
unwatchResources
(
resourceTypes
)
{
const
isWatchingResources
=
WatcherRegistry
.
unwatchResources
(
this
resourceTypes
)
;
if
(
!
isWatchingResources
)
{
return
;
}
if
(
!
this
.
_browser
|
|
this
.
_browser
.
browsingContext
)
{
for
(
const
targetType
in
TARGET_HELPERS
)
{
if
(
!
WatcherRegistry
.
isWatchingTargets
(
this
targetType
)
&
&
targetType
!
=
TARGET_TYPES
.
FRAME
)
{
continue
;
}
const
targetHelperModule
=
TARGET_HELPERS
[
targetType
]
;
targetHelperModule
.
unwatchResources
(
{
watcher
:
this
resourceTypes
}
)
;
}
}
WatcherRegistry
.
maybeUnregisteringJSWindowActor
(
)
;
}
}
)
;
