"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
watcherSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
watcher
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
registerWatcher
unregisterWatcher
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
server
/
actors
/
descriptors
/
watcher
/
FrameWatchers
.
jsm
"
)
;
exports
.
WatcherActor
=
protocol
.
ActorClassWithSpec
(
watcherSpec
{
initialize
:
function
(
conn
options
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
_browser
=
options
&
&
options
.
browser
;
}
destroy
:
function
(
)
{
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
this
.
unwatchTargets
(
"
frame
"
)
;
}
form
(
)
{
return
{
actor
:
this
.
actorID
traits
:
{
frame
:
true
}
}
;
}
async
watchTargets
(
targetType
)
{
const
{
prefix
}
=
this
.
conn
;
const
perPrefixMap
=
Services
.
ppmm
.
sharedData
.
get
(
"
DevTools
:
watchedPerPrefix
"
)
|
|
new
Map
(
)
;
let
perPrefixData
=
perPrefixMap
.
get
(
prefix
)
;
if
(
!
perPrefixData
)
{
perPrefixData
=
{
targets
:
new
Set
(
)
browsingContextID
:
null
}
;
perPrefixMap
.
set
(
prefix
perPrefixData
)
;
}
if
(
perPrefixData
.
targets
.
has
(
targetType
)
)
{
throw
new
Error
(
Already
watching
for
'
{
targetType
}
'
target
)
;
}
perPrefixData
.
targets
.
add
(
targetType
)
;
if
(
this
.
_browser
)
{
perPrefixData
.
browsingContextID
=
this
.
_browser
.
browsingContext
.
id
;
}
Services
.
ppmm
.
sharedData
.
set
(
"
DevTools
:
watchedPerPrefix
"
perPrefixMap
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
if
(
targetType
=
=
"
frame
"
)
{
await
registerWatcher
(
this
this
.
_browser
?
this
.
_browser
.
browsingContext
.
id
:
null
)
;
}
}
unwatchTargets
(
targetType
)
{
const
perPrefixMap
=
Services
.
ppmm
.
sharedData
.
get
(
"
DevTools
:
watchedPerPrefix
"
)
;
if
(
!
perPrefixMap
)
{
return
;
}
const
{
prefix
}
=
this
.
conn
;
const
perPrefixData
=
perPrefixMap
.
get
(
prefix
)
;
if
(
!
perPrefixData
)
{
return
;
}
perPrefixData
.
targets
.
delete
(
targetType
)
;
if
(
perPrefixData
.
targets
.
size
=
=
=
0
)
{
perPrefixMap
.
delete
(
prefix
)
;
}
Services
.
ppmm
.
sharedData
.
set
(
"
DevTools
:
watchedPerPrefix
"
perPrefixMap
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
if
(
targetType
=
=
"
frame
"
)
{
unregisterWatcher
(
this
)
;
}
}
notifyTargetAvailable
(
actor
)
{
this
.
emit
(
"
target
-
available
-
form
"
actor
)
;
}
notifyTargetDestroyed
(
actor
)
{
this
.
emit
(
"
target
-
destroyed
-
form
"
actor
)
;
}
}
)
;
