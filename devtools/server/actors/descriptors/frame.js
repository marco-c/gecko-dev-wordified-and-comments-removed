"
use
strict
"
;
const
{
ActorClassWithSpec
Actor
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
frameDescriptorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
descriptors
/
frame
"
)
;
loader
.
lazyRequireGetter
(
this
"
connectToFrame
"
"
devtools
/
server
/
connectors
/
frame
-
connector
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
connectToFrameWithJsWindowActor
"
"
devtools
/
server
/
connectors
/
js
-
window
-
actor
/
frame
-
js
-
window
-
actor
-
connector
"
true
)
;
const
FrameDescriptorActor
=
ActorClassWithSpec
(
frameDescriptorSpec
{
initialize
(
connection
browsingContext
)
{
if
(
typeof
browsingContext
.
id
!
=
"
number
"
)
{
throw
Error
(
"
Frame
Descriptor
requires
a
valid
BrowsingContext
.
"
)
;
}
Actor
.
prototype
.
initialize
.
call
(
this
connection
)
;
this
.
destroy
=
this
.
destroy
.
bind
(
this
)
;
this
.
id
=
browsingContext
.
id
;
this
.
_browsingContext
=
browsingContext
;
this
.
_embedderElement
=
browsingContext
.
embedderElement
;
}
async
_connectMessageManager
(
)
{
return
connectToFrame
(
this
.
conn
this
.
_embedderElement
this
.
destroy
)
;
}
async
_connectBrowsingContext
(
)
{
return
connectToFrameWithJsWindowActor
(
this
.
conn
this
.
_browsingContext
this
.
destroy
)
;
}
get
_mm
(
)
{
return
(
this
.
_embedderElement
&
&
(
this
.
_embedderElement
.
messageManager
|
|
this
.
_embedderElement
.
frameLoader
.
messageManager
)
)
;
}
async
getTarget
(
)
{
let
form
;
if
(
this
.
_mm
)
{
form
=
await
this
.
_connectMessageManager
(
)
;
}
else
{
form
=
await
this
.
_connectBrowsingContext
(
)
;
}
return
form
;
}
getParentID
(
)
{
if
(
this
.
_browsingContext
.
parent
)
{
return
this
.
_browsingContext
.
parent
.
id
;
}
if
(
this
.
_browsingContext
.
embedderWindowGlobal
)
{
return
this
.
_browsingContext
.
embedderWindowGlobal
.
browsingContext
.
id
;
}
return
null
;
}
form
(
)
{
const
url
=
this
.
_browsingContext
.
currentWindowGlobal
?
this
.
_browsingContext
.
currentWindowGlobal
.
documentURI
.
displaySpec
:
null
;
const
parentID
=
this
.
getParentID
(
)
;
return
{
actor
:
this
.
actorID
id
:
this
.
id
url
parentID
}
;
}
destroy
(
)
{
this
.
_browsingContext
=
null
;
this
.
_embedderElement
=
null
;
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
}
)
;
exports
.
FrameDescriptorActor
=
FrameDescriptorActor
;
