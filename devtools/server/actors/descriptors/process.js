"
use
strict
"
;
const
{
DevToolsServer
}
=
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
const
{
Cc
Ci
}
=
require
(
"
chrome
"
)
;
const
{
createBrowserSessionContext
createContentProcessSessionContext
}
=
require
(
"
devtools
/
server
/
actors
/
watcher
/
session
-
context
"
)
;
const
{
ActorClassWithSpec
Actor
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
processDescriptorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
descriptors
/
process
"
)
;
loader
.
lazyRequireGetter
(
this
"
ContentProcessTargetActor
"
"
devtools
/
server
/
actors
/
targets
/
content
-
process
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ParentProcessTargetActor
"
"
devtools
/
server
/
actors
/
targets
/
parent
-
process
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
connectToContentProcess
"
"
devtools
/
server
/
connectors
/
content
-
process
-
connector
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
WatcherActor
"
"
devtools
/
server
/
actors
/
watcher
"
true
)
;
const
ProcessDescriptorActor
=
ActorClassWithSpec
(
processDescriptorSpec
{
initialize
(
connection
options
=
{
}
)
{
if
(
"
id
"
in
options
&
&
typeof
options
.
id
!
=
"
number
"
)
{
throw
Error
(
"
process
connect
requires
a
valid
id
attribute
.
"
)
;
}
Actor
.
prototype
.
initialize
.
call
(
this
connection
)
;
this
.
id
=
options
.
id
;
this
.
_windowGlobalTargetActor
=
null
;
this
.
isParent
=
options
.
parent
;
this
.
destroy
=
this
.
destroy
.
bind
(
this
)
;
}
get
browsingContextID
(
)
{
if
(
this
.
_windowGlobalTargetActor
)
{
return
this
.
_windowGlobalTargetActor
.
docShell
.
browsingContext
.
id
;
}
return
null
;
}
get
isWindowlessParent
(
)
{
return
this
.
isParent
&
&
(
this
.
isXpcshell
|
|
this
.
isBackgroundTaskMode
)
;
}
get
isXpcshell
(
)
{
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
return
env
.
exists
(
"
XPCSHELL_TEST_PROFILE_DIR
"
)
;
}
get
isBackgroundTaskMode
(
)
{
const
bts
=
Cc
[
"
mozilla
.
org
/
backgroundtasks
;
1
"
]
?
.
getService
(
Ci
.
nsIBackgroundTasks
)
;
return
bts
&
&
bts
.
isBackgroundTaskMode
;
}
_parentProcessConnect
(
{
isBrowserToolboxFission
}
)
{
let
targetActor
;
if
(
this
.
isWindowlessParent
)
{
targetActor
=
new
ContentProcessTargetActor
(
this
.
conn
{
isXpcShellTarget
:
true
sessionContext
:
createContentProcessSessionContext
(
)
}
)
;
}
else
{
targetActor
=
new
ParentProcessTargetActor
(
this
.
conn
{
isTopLevelTarget
:
true
sessionContext
:
createBrowserSessionContext
(
{
isBrowserToolboxFission
}
)
}
)
;
this
.
_windowGlobalTargetActor
=
targetActor
;
}
this
.
manage
(
targetActor
)
;
return
targetActor
.
form
(
)
;
}
async
_childProcessConnect
(
)
{
const
{
id
}
=
this
;
const
mm
=
this
.
_lookupMessageManager
(
id
)
;
if
(
!
mm
)
{
return
{
error
:
"
noProcess
"
message
:
"
There
is
no
process
with
id
'
"
+
id
+
"
'
.
"
}
;
}
const
childTargetForm
=
await
connectToContentProcess
(
this
.
conn
mm
this
.
destroy
)
;
return
childTargetForm
;
}
_lookupMessageManager
(
id
)
{
for
(
let
i
=
0
;
i
<
Services
.
ppmm
.
childCount
;
i
+
+
)
{
const
mm
=
Services
.
ppmm
.
getChildAt
(
i
)
;
if
(
id
?
mm
.
osPid
=
=
id
:
mm
.
isInProcess
)
{
return
mm
;
}
}
return
null
;
}
async
getTarget
(
{
isBrowserToolboxFission
}
)
{
if
(
!
DevToolsServer
.
allowChromeProcess
)
{
return
{
error
:
"
forbidden
"
message
:
"
You
are
not
allowed
to
debug
processes
.
"
}
;
}
if
(
this
.
isParent
)
{
return
this
.
_parentProcessConnect
(
{
isBrowserToolboxFission
}
)
;
}
return
this
.
_childProcessConnect
(
)
;
}
getWatcher
(
{
isBrowserToolboxFission
}
)
{
if
(
!
this
.
watcher
)
{
this
.
watcher
=
new
WatcherActor
(
this
.
conn
createBrowserSessionContext
(
{
isBrowserToolboxFission
}
)
)
;
this
.
manage
(
this
.
watcher
)
;
}
return
this
.
watcher
;
}
form
(
)
{
return
{
actor
:
this
.
actorID
id
:
this
.
id
isParent
:
this
.
isParent
isWindowlessParent
:
this
.
isWindowlessParent
traits
:
{
watcher
:
this
.
isParent
supportsReloadDescriptor
:
this
.
isParent
&
&
!
this
.
isWindowlessParent
}
}
;
}
async
reloadDescriptor
(
)
{
if
(
!
this
.
isParent
|
|
this
.
isWindowlessParent
)
{
throw
new
Error
(
"
reloadDescriptor
is
only
available
for
parent
process
descriptors
"
)
;
}
Services
.
obs
.
notifyObservers
(
null
"
startupcache
-
invalidate
"
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
env
.
set
(
"
MOZ_DISABLE_SAFE_MODE_KEY
"
"
1
"
)
;
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eAttemptQuit
|
Ci
.
nsIAppStartup
.
eRestart
)
;
}
destroy
(
)
{
this
.
emit
(
"
descriptor
-
destroyed
"
)
;
this
.
_windowGlobalTargetActor
=
null
;
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
}
)
;
exports
.
ProcessDescriptorActor
=
ProcessDescriptorActor
;
