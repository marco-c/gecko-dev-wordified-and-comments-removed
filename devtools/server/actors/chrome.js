"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
DebuggerServer
}
=
require
(
"
.
.
/
main
"
)
;
const
{
getChildDocShells
TabActor
}
=
require
(
"
.
/
tab
"
)
;
const
makeDebugger
=
require
(
"
.
/
utils
/
make
-
debugger
"
)
;
function
ChromeActor
(
connection
)
{
TabActor
.
call
(
this
connection
)
;
this
.
makeDebugger
=
makeDebugger
.
bind
(
null
{
findDebuggees
:
dbg
=
>
dbg
.
findAllGlobals
(
)
shouldAddNewGlobalAsDebuggee
:
(
)
=
>
true
}
)
;
this
.
listenForNewDocShells
=
true
;
let
window
=
Services
.
wm
.
getMostRecentWindow
(
DebuggerServer
.
chromeWindowType
)
;
if
(
!
window
)
{
window
=
Services
.
wm
.
getMostRecentWindow
(
null
)
;
}
if
(
!
window
)
{
try
{
window
=
Services
.
appShell
.
hiddenDOMWindow
;
}
catch
(
e
)
{
}
}
let
docShell
=
window
?
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
:
null
;
Object
.
defineProperty
(
this
"
docShell
"
{
value
:
docShell
configurable
:
true
}
)
;
}
exports
.
ChromeActor
=
ChromeActor
;
ChromeActor
.
prototype
=
Object
.
create
(
TabActor
.
prototype
)
;
ChromeActor
.
prototype
.
constructor
=
ChromeActor
;
ChromeActor
.
prototype
.
isRootActor
=
true
;
Object
.
defineProperty
(
ChromeActor
.
prototype
"
docShells
"
{
get
:
function
(
)
{
let
docShells
=
[
]
;
let
e
=
Services
.
ww
.
getWindowEnumerator
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
let
window
=
e
.
getNext
(
)
;
let
docShell
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
docShells
=
docShells
.
concat
(
getChildDocShells
(
docShell
)
)
;
}
return
docShells
;
}
}
)
;
ChromeActor
.
prototype
.
observe
=
function
(
subject
topic
data
)
{
TabActor
.
prototype
.
observe
.
call
(
this
subject
topic
data
)
;
if
(
!
this
.
attached
)
{
return
;
}
subject
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
if
(
topic
=
=
"
chrome
-
webnavigation
-
create
"
)
{
this
.
_onDocShellCreated
(
subject
)
;
}
else
if
(
topic
=
=
"
chrome
-
webnavigation
-
destroy
"
)
{
this
.
_onDocShellDestroy
(
subject
)
;
}
}
;
ChromeActor
.
prototype
.
_attach
=
function
(
)
{
if
(
this
.
attached
)
{
return
false
;
}
TabActor
.
prototype
.
_attach
.
call
(
this
)
;
Services
.
obs
.
addObserver
(
this
"
chrome
-
webnavigation
-
create
"
)
;
Services
.
obs
.
addObserver
(
this
"
chrome
-
webnavigation
-
destroy
"
)
;
let
e
=
Services
.
ww
.
getWindowEnumerator
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
let
window
=
e
.
getNext
(
)
;
let
docShell
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
if
(
docShell
=
=
this
.
docShell
)
{
continue
;
}
this
.
_progressListener
.
watch
(
docShell
)
;
}
return
undefined
;
}
;
ChromeActor
.
prototype
.
_detach
=
function
(
)
{
if
(
!
this
.
attached
)
{
return
false
;
}
Services
.
obs
.
removeObserver
(
this
"
chrome
-
webnavigation
-
create
"
)
;
Services
.
obs
.
removeObserver
(
this
"
chrome
-
webnavigation
-
destroy
"
)
;
let
e
=
Services
.
ww
.
getWindowEnumerator
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
let
window
=
e
.
getNext
(
)
;
let
docShell
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
if
(
docShell
=
=
this
.
docShell
)
{
continue
;
}
this
.
_progressListener
.
unwatch
(
docShell
)
;
}
TabActor
.
prototype
.
_detach
.
call
(
this
)
;
return
undefined
;
}
;
ChromeActor
.
prototype
.
preNest
=
function
(
)
{
let
e
=
Services
.
wm
.
getEnumerator
(
null
)
;
while
(
e
.
hasMoreElements
(
)
)
{
let
win
=
e
.
getNext
(
)
;
let
windowUtils
=
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
windowUtils
.
suppressEventHandling
(
true
)
;
windowUtils
.
suspendTimeouts
(
)
;
}
}
;
ChromeActor
.
prototype
.
postNest
=
function
(
nestData
)
{
let
e
=
Services
.
wm
.
getEnumerator
(
null
)
;
while
(
e
.
hasMoreElements
(
)
)
{
let
win
=
e
.
getNext
(
)
;
let
windowUtils
=
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
windowUtils
.
resumeTimeouts
(
)
;
windowUtils
.
suppressEventHandling
(
false
)
;
}
}
;
