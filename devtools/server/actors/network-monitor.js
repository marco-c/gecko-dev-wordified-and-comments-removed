"
use
strict
"
;
const
{
Actor
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
networkMonitorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
network
-
monitor
"
)
;
loader
.
lazyRequireGetter
(
this
"
NetworkObserver
"
"
devtools
/
server
/
actors
/
network
-
monitor
/
network
-
observer
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
NetworkEventActor
"
"
devtools
/
server
/
actors
/
network
-
event
"
true
)
;
const
NetworkMonitorActor
=
ActorClassWithSpec
(
networkMonitorSpec
{
initialize
(
conn
filters
parentID
messageManager
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
_netEvents
=
new
Map
(
)
;
this
.
_networkEventActorsByURL
=
new
Map
(
)
;
this
.
parentID
=
parentID
;
this
.
messageManager
=
messageManager
;
this
.
observer
=
new
NetworkObserver
(
filters
this
)
;
this
.
observer
.
init
(
)
;
this
.
stackTraces
=
new
Set
(
)
;
this
.
onStackTraceAvailable
=
this
.
onStackTraceAvailable
.
bind
(
this
)
;
this
.
onRequestContent
=
this
.
onRequestContent
.
bind
(
this
)
;
this
.
onSetPreference
=
this
.
onSetPreference
.
bind
(
this
)
;
this
.
onBlockRequest
=
this
.
onBlockRequest
.
bind
(
this
)
;
this
.
onGetNetworkEventActor
=
this
.
onGetNetworkEventActor
.
bind
(
this
)
;
this
.
onDestroyMessage
=
this
.
onDestroyMessage
.
bind
(
this
)
;
this
.
startListening
(
)
;
}
onDestroyMessage
(
{
data
}
)
{
if
(
data
.
actorID
=
=
this
.
parentID
)
{
this
.
destroy
(
)
;
}
}
startListening
(
)
{
this
.
messageManager
.
addMessageListener
(
"
debug
:
request
-
stack
-
available
"
this
.
onStackTraceAvailable
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
request
-
content
:
request
"
this
.
onRequestContent
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
netmonitor
-
preference
"
this
.
onSetPreference
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
block
-
request
"
this
.
onBlockRequest
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
get
-
network
-
event
-
actor
:
request
"
this
.
onGetNetworkEventActor
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
destroy
-
network
-
monitor
"
this
.
onDestroyMessage
)
;
}
stopListening
(
)
{
this
.
messageManager
.
removeMessageListener
(
"
debug
:
request
-
stack
-
available
"
this
.
onStackTraceAvailable
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
request
-
content
:
request
"
this
.
onRequestContent
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
netmonitor
-
preference
"
this
.
onSetPreference
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
block
-
request
"
this
.
onBlockRequest
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
get
-
network
-
event
-
actor
:
request
"
this
.
onGetNetworkEventActor
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
destroy
-
network
-
monitor
"
this
.
onDestroyMessage
)
;
}
destroy
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
if
(
this
.
observer
)
{
this
.
observer
.
destroy
(
)
;
this
.
observer
=
null
;
}
this
.
stackTraces
.
clear
(
)
;
if
(
this
.
messageManager
)
{
this
.
stopListening
(
)
;
this
.
messageManager
=
null
;
}
}
onBrowserSwap
(
mm
)
{
this
.
stopListening
(
)
;
this
.
messageManager
=
mm
;
this
.
stackTraces
=
new
Set
(
)
;
this
.
startListening
(
)
;
}
onStackTraceAvailable
(
msg
)
{
const
{
channelId
}
=
msg
.
data
;
if
(
!
msg
.
data
.
stacktrace
)
{
this
.
stackTraces
.
delete
(
channelId
)
;
}
else
{
this
.
stackTraces
.
add
(
channelId
)
;
}
}
getRequestContentForActor
(
actor
)
{
const
content
=
actor
.
_response
.
content
;
if
(
actor
.
_discardResponseBody
|
|
actor
.
_truncated
|
|
!
content
|
|
!
content
.
size
)
{
return
null
;
}
if
(
content
.
text
.
type
!
=
"
longString
"
)
{
return
{
content
:
content
.
text
contentType
:
content
.
mimeType
}
;
}
const
longStringActor
=
this
.
conn
.
_getOrCreateActor
(
content
.
text
.
actor
)
;
if
(
!
longStringActor
)
{
return
null
;
}
return
{
content
:
longStringActor
.
str
contentType
:
content
.
mimeType
}
;
}
onRequestContent
(
msg
)
{
const
{
url
}
=
msg
.
data
;
const
actor
=
this
.
_networkEventActorsByURL
.
get
(
url
)
;
const
content
=
actor
?
this
.
getRequestContentForActor
(
actor
)
:
null
;
this
.
messageManager
.
sendAsyncMessage
(
"
debug
:
request
-
content
:
response
"
{
url
content
}
)
;
}
onSetPreference
(
{
data
}
)
{
if
(
"
saveRequestAndResponseBodies
"
in
data
)
{
this
.
observer
.
saveRequestAndResponseBodies
=
data
.
saveRequestAndResponseBodies
;
}
if
(
"
throttleData
"
in
data
)
{
this
.
observer
.
throttleData
=
data
.
throttleData
;
}
}
onBlockRequest
(
{
data
}
)
{
const
{
filter
}
=
data
;
this
.
observer
.
blockRequest
(
filter
)
;
}
onGetNetworkEventActor
(
{
data
}
)
{
const
actor
=
this
.
getNetworkEventActor
(
data
.
channelId
)
;
this
.
messageManager
.
sendAsyncMessage
(
"
debug
:
get
-
network
-
event
-
actor
:
response
"
{
channelId
:
data
.
channelId
actor
:
actor
.
form
(
)
}
)
;
}
getNetworkEventActor
(
channelId
)
{
let
actor
=
this
.
_netEvents
.
get
(
channelId
)
;
if
(
actor
)
{
return
actor
;
}
actor
=
new
NetworkEventActor
(
this
)
;
this
.
manage
(
actor
)
;
this
.
_netEvents
.
set
(
channelId
actor
)
;
return
actor
;
}
onNetworkEvent
(
event
)
{
const
{
channelId
}
=
event
;
const
actor
=
this
.
getNetworkEventActor
(
channelId
)
;
this
.
_netEvents
.
set
(
channelId
actor
)
;
event
.
cause
.
stacktrace
=
this
.
stackTraces
.
has
(
channelId
)
;
if
(
event
.
cause
.
stacktrace
)
{
this
.
stackTraces
.
delete
(
channelId
)
;
}
actor
.
init
(
event
)
;
this
.
_networkEventActorsByURL
.
set
(
actor
.
_request
.
url
actor
)
;
this
.
conn
.
sendActorEvent
(
this
.
parentID
"
networkEvent
"
{
eventActor
:
actor
.
form
(
)
}
)
;
return
actor
;
}
}
)
;
exports
.
NetworkMonitorActor
=
NetworkMonitorActor
;
