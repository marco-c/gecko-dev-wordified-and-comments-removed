"
use
strict
"
;
const
{
Actor
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
networkMonitorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
network
-
monitor
"
)
;
loader
.
lazyRequireGetter
(
this
"
NetworkMonitor
"
"
devtools
/
shared
/
webconsole
/
network
-
monitor
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
NetworkEventActor
"
"
devtools
/
server
/
actors
/
network
-
event
"
true
)
;
const
NetworkMonitorActor
=
ActorClassWithSpec
(
networkMonitorSpec
{
_netEvents
:
new
Map
(
)
_networkEventActorsByURL
:
new
Map
(
)
initialize
(
conn
filters
parentID
messageManager
stackTraceCollector
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
parentID
=
parentID
;
this
.
messageManager
=
messageManager
;
this
.
stackTraceCollector
=
stackTraceCollector
;
this
.
netMonitor
=
new
NetworkMonitor
(
filters
this
)
;
this
.
netMonitor
.
init
(
)
;
if
(
this
.
messageManager
)
{
this
.
stackTraces
=
new
Map
(
)
;
this
.
onStackTraceAvailable
=
this
.
onStackTraceAvailable
.
bind
(
this
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
request
-
stack
-
available
"
this
.
onStackTraceAvailable
)
;
this
.
destroy
=
this
.
destroy
.
bind
(
this
)
;
this
.
messageManager
.
addMessageListener
(
"
debug
:
destroy
-
network
-
monitor
"
this
.
destroy
)
;
}
}
destroy
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
if
(
this
.
netMonitor
)
{
this
.
netMonitor
.
destroy
(
)
;
this
.
netMonitor
=
null
;
}
if
(
this
.
messageManager
)
{
this
.
stackTraces
.
clear
(
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
request
-
stack
-
available
"
this
.
onStackTraceAvailable
)
;
this
.
messageManager
.
removeMessageListener
(
"
debug
:
destroy
-
network
-
monitor
"
this
.
destroy
)
;
this
.
messageManager
=
null
;
}
}
onStackTraceAvailable
(
msg
)
{
if
(
!
msg
.
data
.
stacktrace
)
{
this
.
stackTraces
.
delete
(
msg
.
data
.
channelId
)
;
}
else
{
this
.
stackTraces
.
set
(
msg
.
data
.
channelId
msg
.
data
.
stacktrace
)
;
}
}
getNetworkEventActor
(
channelId
)
{
let
actor
=
this
.
_netEvents
.
get
(
channelId
)
;
if
(
actor
)
{
return
actor
;
}
actor
=
new
NetworkEventActor
(
this
)
;
this
.
manage
(
actor
)
;
this
.
_netEvents
.
set
(
channelId
actor
)
;
return
actor
;
}
onNetworkEvent
(
event
)
{
const
{
channelId
}
=
event
;
const
actor
=
this
.
getNetworkEventActor
(
channelId
)
;
this
.
_netEvents
.
set
(
channelId
actor
)
;
if
(
this
.
messageManager
)
{
event
.
cause
.
stacktrace
=
this
.
stackTraces
.
get
(
channelId
)
;
}
else
{
event
.
cause
.
stacktrace
=
this
.
stackTraceCollector
.
getStackTrace
(
channelId
)
;
}
actor
.
init
(
event
)
;
this
.
_networkEventActorsByURL
.
set
(
actor
.
_request
.
url
actor
)
;
const
packet
=
{
from
:
this
.
parentID
type
:
"
networkEvent
"
eventActor
:
actor
.
form
(
)
}
;
this
.
conn
.
send
(
packet
)
;
return
actor
;
}
}
)
;
exports
.
NetworkMonitorActor
=
NetworkMonitorActor
;
