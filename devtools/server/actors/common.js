"
use
strict
"
;
function
SourceLocation
(
actor
line
column
)
{
this
.
_connection
=
actor
?
actor
.
conn
:
null
;
this
.
_actorID
=
actor
?
actor
.
actorID
:
undefined
;
this
.
_line
=
line
;
this
.
_column
=
column
;
}
SourceLocation
.
prototype
=
{
get
sourceActor
(
)
{
return
this
.
_connection
?
this
.
_connection
.
getActor
(
this
.
_actorID
)
:
null
;
}
get
url
(
)
{
return
this
.
sourceActor
.
url
;
}
get
line
(
)
{
return
this
.
_line
;
}
get
column
(
)
{
return
this
.
_column
;
}
get
sourceUrl
(
)
{
return
this
.
sourceActor
.
url
;
}
equals
(
other
)
{
return
(
this
.
sourceActor
.
url
=
=
other
.
sourceActor
.
url
&
&
this
.
line
=
=
=
other
.
line
&
&
(
this
.
column
=
=
=
undefined
|
|
other
.
column
=
=
=
undefined
|
|
this
.
column
=
=
=
other
.
column
)
)
;
}
toJSON
(
)
{
return
{
source
:
this
.
sourceActor
.
form
(
)
line
:
this
.
line
column
:
this
.
column
}
;
}
}
;
exports
.
SourceLocation
=
SourceLocation
;
function
expectState
(
expectedState
methodFunc
activity
)
{
return
function
(
.
.
.
args
)
{
if
(
this
.
state
!
=
=
expectedState
)
{
const
msg
=
Wrong
state
while
{
activity
}
:
+
Expected
'
{
expectedState
}
'
+
but
current
state
is
'
{
this
.
state
}
'
.
;
return
Promise
.
reject
(
new
Error
(
msg
)
)
;
}
return
methodFunc
.
apply
(
this
args
)
;
}
;
}
exports
.
expectState
=
expectState
;
function
actorBridgeWithSpec
(
methodName
)
{
return
function
(
)
{
return
this
.
bridge
[
methodName
]
.
apply
(
this
.
bridge
arguments
)
;
}
;
}
exports
.
actorBridgeWithSpec
=
actorBridgeWithSpec
;
