"
use
strict
"
;
const
{
fetch
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
modifiedStyleSheets
=
new
WeakMap
(
)
;
function
getSheetText
(
sheet
)
{
const
cssText
=
modifiedStyleSheets
.
get
(
sheet
)
;
if
(
cssText
!
=
=
undefined
)
{
return
Promise
.
resolve
(
cssText
)
;
}
if
(
!
sheet
.
href
)
{
const
content
=
sheet
.
ownerNode
.
textContent
;
return
Promise
.
resolve
(
content
)
;
}
return
fetchStylesheet
(
sheet
)
.
then
(
(
{
content
}
)
=
>
content
)
;
}
exports
.
getSheetText
=
getSheetText
;
function
getSheetOwnerNode
(
sheet
)
{
if
(
sheet
.
ownerNode
)
{
return
sheet
.
ownerNode
;
}
let
parentStyleSheet
=
sheet
;
while
(
parentStyleSheet
.
parentStyleSheet
&
&
parentStyleSheet
!
=
=
parentStyleSheet
.
parentStyleSheet
)
{
parentStyleSheet
=
parentStyleSheet
.
parentStyleSheet
;
}
return
parentStyleSheet
.
ownerNode
;
}
exports
.
getSheetOwnerNode
=
getSheetOwnerNode
;
function
getCSSCharset
(
sheet
)
{
if
(
sheet
)
{
if
(
sheet
.
ownerNode
?
.
getAttribute
)
{
const
linkCharset
=
sheet
.
ownerNode
.
getAttribute
(
"
charset
"
)
;
if
(
linkCharset
!
=
null
)
{
return
linkCharset
;
}
}
if
(
sheet
.
ownerNode
?
.
ownerDocument
.
characterSet
)
{
return
sheet
.
ownerNode
.
ownerDocument
.
characterSet
;
}
}
return
"
UTF
-
8
"
;
}
async
function
fetchStylesheet
(
sheet
)
{
const
href
=
sheet
.
href
;
const
options
=
{
loadFromCache
:
true
policy
:
Ci
.
nsIContentPolicy
.
TYPE_INTERNAL_STYLESHEET
charset
:
getCSSCharset
(
sheet
)
}
;
const
excludedProtocolsRe
=
/
^
(
chrome
|
file
|
resource
|
moz
-
extension
)
:
\
/
\
/
/
;
if
(
!
excludedProtocolsRe
.
test
(
href
)
)
{
const
ownerNode
=
getSheetOwnerNode
(
sheet
)
;
if
(
ownerNode
)
{
options
.
window
=
ownerNode
.
ownerDocument
.
defaultView
;
options
.
principal
=
ownerNode
.
ownerDocument
.
nodePrincipal
;
}
}
let
result
;
try
{
result
=
await
fetch
(
href
options
)
;
}
catch
(
e
)
{
console
.
error
(
stylesheets
actor
:
fetch
failed
for
{
href
}
+
using
system
principal
instead
.
)
;
options
.
window
=
undefined
;
options
.
principal
=
undefined
;
result
=
await
fetch
(
href
options
)
;
}
return
result
;
}
