"
use
strict
"
;
const
protocol
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
LongStringActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
string
.
js
"
)
;
const
{
fetch
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
{
styleSheetSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
style
-
sheet
.
js
"
)
;
const
InspectorUtils
=
require
(
"
InspectorUtils
"
)
;
const
{
getSourcemapBaseURL
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
source
-
map
-
utils
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
CssLogic
"
"
resource
:
/
/
devtools
/
shared
/
inspector
/
css
-
logic
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
[
"
addPseudoClassLock
"
"
removePseudoClassLock
"
]
"
resource
:
/
/
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
loadSheet
"
"
resource
:
/
/
devtools
/
shared
/
layout
/
utils
.
js
"
true
)
;
var
TRANSITION_PSEUDO_CLASS
=
"
:
-
moz
-
styleeditor
-
transitioning
"
;
var
TRANSITION_DURATION_MS
=
500
;
var
TRANSITION_BUFFER_MS
=
1000
;
var
TRANSITION_RULE_SELECTOR
=
:
root
{
TRANSITION_PSEUDO_CLASS
}
:
root
{
TRANSITION_PSEUDO_CLASS
}
*
;
var
TRANSITION_SHEET
=
"
data
:
text
/
css
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
{
TRANSITION_RULE_SELECTOR
}
{
transition
-
duration
:
{
TRANSITION_DURATION_MS
}
ms
!
important
;
transition
-
delay
:
0ms
!
important
;
transition
-
timing
-
function
:
ease
-
out
!
important
;
transition
-
property
:
all
!
important
;
}
)
;
const
UPDATE_PRESERVING_RULES
=
0
;
exports
.
UPDATE_PRESERVING_RULES
=
UPDATE_PRESERVING_RULES
;
const
UPDATE_GENERAL
=
1
;
exports
.
UPDATE_GENERAL
=
UPDATE_GENERAL
;
const
modifiedStyleSheets
=
new
WeakMap
(
)
;
function
getSheetText
(
sheet
)
{
const
cssText
=
modifiedStyleSheets
.
get
(
sheet
)
;
if
(
cssText
!
=
=
undefined
)
{
return
Promise
.
resolve
(
cssText
)
;
}
if
(
!
sheet
.
href
)
{
const
content
=
sheet
.
ownerNode
.
textContent
;
return
Promise
.
resolve
(
content
)
;
}
return
fetchStylesheet
(
sheet
)
.
then
(
(
{
content
}
)
=
>
content
)
;
}
exports
.
getSheetText
=
getSheetText
;
function
getSheetOwnerNode
(
sheet
)
{
if
(
sheet
.
ownerNode
)
{
return
sheet
.
ownerNode
;
}
let
parentStyleSheet
=
sheet
;
while
(
parentStyleSheet
.
parentStyleSheet
&
&
parentStyleSheet
!
=
=
parentStyleSheet
.
parentStyleSheet
)
{
parentStyleSheet
=
parentStyleSheet
.
parentStyleSheet
;
}
return
parentStyleSheet
.
ownerNode
;
}
exports
.
getSheetOwnerNode
=
getSheetOwnerNode
;
function
getCSSCharset
(
sheet
)
{
if
(
sheet
)
{
if
(
sheet
.
ownerNode
?
.
getAttribute
)
{
const
linkCharset
=
sheet
.
ownerNode
.
getAttribute
(
"
charset
"
)
;
if
(
linkCharset
!
=
null
)
{
return
linkCharset
;
}
}
if
(
sheet
.
ownerNode
?
.
ownerDocument
.
characterSet
)
{
return
sheet
.
ownerNode
.
ownerDocument
.
characterSet
;
}
}
return
"
UTF
-
8
"
;
}
async
function
fetchStylesheet
(
sheet
)
{
const
href
=
sheet
.
href
;
const
options
=
{
loadFromCache
:
true
policy
:
Ci
.
nsIContentPolicy
.
TYPE_INTERNAL_STYLESHEET
charset
:
getCSSCharset
(
sheet
)
}
;
const
excludedProtocolsRe
=
/
^
(
chrome
|
file
|
resource
|
moz
-
extension
)
:
\
/
\
/
/
;
if
(
!
excludedProtocolsRe
.
test
(
href
)
)
{
const
ownerNode
=
getSheetOwnerNode
(
sheet
)
;
if
(
ownerNode
)
{
options
.
window
=
ownerNode
.
ownerDocument
.
defaultView
;
options
.
principal
=
ownerNode
.
ownerDocument
.
nodePrincipal
;
}
}
let
result
;
try
{
result
=
await
fetch
(
href
options
)
;
}
catch
(
e
)
{
console
.
error
(
stylesheets
actor
:
fetch
failed
for
{
href
}
+
using
system
principal
instead
.
)
;
options
.
window
=
undefined
;
options
.
principal
=
undefined
;
result
=
await
fetch
(
href
options
)
;
}
return
result
;
}
var
StyleSheetActor
=
protocol
.
ActorClassWithSpec
(
styleSheetSpec
{
toString
(
)
{
return
"
[
StyleSheetActor
"
+
this
.
actorID
+
"
]
"
;
}
get
window
(
)
{
return
this
.
parentActor
.
window
;
}
get
document
(
)
{
return
this
.
window
.
document
;
}
get
ownerWindow
(
)
{
return
this
.
ownerDocument
.
defaultView
;
}
get
ownerNode
(
)
{
return
this
.
rawSheet
.
ownerNode
;
}
get
href
(
)
{
return
this
.
rawSheet
.
href
;
}
get
safeHref
(
)
{
let
href
=
this
.
href
;
if
(
!
href
)
{
if
(
this
.
ownerNode
.
nodeType
=
=
this
.
ownerNode
.
DOCUMENT_NODE
)
{
href
=
this
.
ownerNode
.
location
.
href
;
}
else
if
(
this
.
ownerNode
.
ownerDocument
&
&
this
.
ownerNode
.
ownerDocument
.
location
)
{
href
=
this
.
ownerNode
.
ownerDocument
.
location
.
href
;
}
}
return
href
;
}
get
styleSheetIndex
(
)
{
if
(
this
.
_styleSheetIndex
=
=
-
1
)
{
const
styleSheets
=
InspectorUtils
.
getAllStyleSheets
(
this
.
document
true
)
;
for
(
let
i
=
0
;
i
<
styleSheets
.
length
;
i
+
+
)
{
if
(
styleSheets
[
i
]
=
=
this
.
rawSheet
)
{
this
.
_styleSheetIndex
=
i
;
break
;
}
}
}
return
this
.
_styleSheetIndex
;
}
destroy
(
)
{
if
(
this
.
_transitionTimeout
&
&
this
.
window
)
{
this
.
window
.
clearTimeout
(
this
.
_transitionTimeout
)
;
removePseudoClassLock
(
this
.
document
.
documentElement
TRANSITION_PSEUDO_CLASS
)
;
}
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
initialize
(
styleSheet
parentActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
parentActor
.
conn
)
;
this
.
rawSheet
=
styleSheet
;
this
.
parentActor
=
parentActor
;
this
.
conn
=
this
.
parentActor
.
conn
;
this
.
text
=
null
;
this
.
_styleSheetIndex
=
-
1
;
let
parentStyleSheet
=
styleSheet
;
while
(
parentStyleSheet
.
parentStyleSheet
)
{
parentStyleSheet
=
parentStyleSheet
.
parentStyleSheet
;
}
if
(
parentStyleSheet
.
ownerNode
)
{
this
.
ownerDocument
=
parentStyleSheet
.
ownerNode
.
ownerDocument
;
}
else
{
this
.
ownerDocument
=
parentActor
.
window
;
}
}
hasRulesModifiedByCSSOM
(
)
{
return
InspectorUtils
.
hasRulesModifiedByCSSOM
(
this
.
rawSheet
)
;
}
getCSSRules
(
)
{
let
rules
;
try
{
rules
=
this
.
rawSheet
.
cssRules
;
}
catch
(
e
)
{
}
if
(
rules
)
{
return
Promise
.
resolve
(
rules
)
;
}
if
(
!
this
.
ownerNode
)
{
return
Promise
.
resolve
(
[
]
)
;
}
if
(
this
.
_cssRules
)
{
return
this
.
_cssRules
;
}
this
.
_cssRules
=
new
Promise
(
resolve
=
>
{
const
onSheetLoaded
=
event
=
>
{
this
.
ownerNode
.
removeEventListener
(
"
load
"
onSheetLoaded
)
;
resolve
(
this
.
rawSheet
.
cssRules
)
;
}
;
this
.
ownerNode
.
addEventListener
(
"
load
"
onSheetLoaded
)
;
}
)
;
return
this
.
_cssRules
;
}
form
(
)
{
let
docHref
;
if
(
this
.
ownerNode
)
{
if
(
this
.
ownerNode
.
nodeType
=
=
this
.
ownerNode
.
DOCUMENT_NODE
)
{
docHref
=
this
.
ownerNode
.
location
.
href
;
}
else
if
(
this
.
ownerNode
.
ownerDocument
&
&
this
.
ownerNode
.
ownerDocument
.
location
)
{
docHref
=
this
.
ownerNode
.
ownerDocument
.
location
.
href
;
}
}
const
form
=
{
actor
:
this
.
actorID
href
:
this
.
href
nodeHref
:
docHref
disabled
:
this
.
rawSheet
.
disabled
constructed
:
this
.
rawSheet
.
constructed
title
:
this
.
rawSheet
.
title
system
:
CssLogic
.
isAgentStylesheet
(
this
.
rawSheet
)
styleSheetIndex
:
this
.
styleSheetIndex
sourceMapBaseURL
:
getSourcemapBaseURL
(
this
.
href
|
|
docHref
this
.
ownerWindow
)
sourceMapURL
:
this
.
rawSheet
.
sourceMapURL
}
;
try
{
form
.
ruleCount
=
this
.
rawSheet
.
cssRules
.
length
;
}
catch
(
e
)
{
this
.
getCSSRules
(
)
.
then
(
(
)
=
>
{
this
.
_notifyPropertyChanged
(
"
ruleCount
"
)
;
}
)
;
}
return
form
;
}
toggleDisabled
(
)
{
this
.
rawSheet
.
disabled
=
!
this
.
rawSheet
.
disabled
;
this
.
_notifyPropertyChanged
(
"
disabled
"
)
;
return
this
.
rawSheet
.
disabled
;
}
_notifyPropertyChanged
(
property
)
{
this
.
emit
(
"
property
-
change
"
property
this
.
form
(
)
[
property
]
)
;
}
getText
(
)
{
return
this
.
_getText
(
)
.
then
(
text
=
>
{
return
new
LongStringActor
(
this
.
conn
text
|
|
"
"
)
;
}
)
;
}
_getText
(
)
{
if
(
typeof
this
.
text
=
=
=
"
string
"
)
{
return
Promise
.
resolve
(
this
.
text
)
;
}
return
getSheetText
(
this
.
rawSheet
)
.
then
(
text
=
>
{
this
.
text
=
text
;
return
text
;
}
)
;
}
update
(
text
transition
kind
=
UPDATE_GENERAL
cause
)
{
InspectorUtils
.
parseStyleSheet
(
this
.
rawSheet
text
)
;
modifiedStyleSheets
.
set
(
this
.
rawSheet
text
)
;
this
.
text
=
text
;
if
(
kind
!
=
UPDATE_PRESERVING_RULES
)
{
this
.
_notifyPropertyChanged
(
"
ruleCount
"
)
;
}
if
(
transition
)
{
this
.
_startTransition
(
kind
cause
)
;
}
else
{
this
.
emit
(
"
style
-
applied
"
kind
this
cause
)
;
}
}
_startTransition
(
kind
cause
)
{
if
(
!
this
.
_transitionSheetLoaded
)
{
this
.
_transitionSheetLoaded
=
true
;
loadSheet
(
this
.
window
TRANSITION_SHEET
)
;
}
addPseudoClassLock
(
this
.
document
.
documentElement
TRANSITION_PSEUDO_CLASS
)
;
this
.
window
.
clearTimeout
(
this
.
_transitionTimeout
)
;
this
.
_transitionTimeout
=
this
.
window
.
setTimeout
(
this
.
_onTransitionEnd
.
bind
(
this
kind
cause
)
TRANSITION_DURATION_MS
+
TRANSITION_BUFFER_MS
)
;
}
_onTransitionEnd
(
kind
cause
)
{
this
.
_transitionTimeout
=
null
;
removePseudoClassLock
(
this
.
document
.
documentElement
TRANSITION_PSEUDO_CLASS
)
;
this
.
emit
(
"
style
-
applied
"
kind
this
cause
)
;
}
}
)
;
exports
.
StyleSheetActor
=
StyleSheetActor
;
