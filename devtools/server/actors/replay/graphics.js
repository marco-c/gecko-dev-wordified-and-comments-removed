"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
CC
=
Components
.
Constructor
;
const
sandbox
=
Cu
.
Sandbox
(
CC
(
"
mozilla
.
org
/
systemprincipal
;
1
"
"
nsIPrincipal
"
)
(
)
)
;
Cu
.
evalInSandbox
(
"
Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
'
)
;
"
+
"
addDebuggerToGlobal
(
this
)
;
"
sandbox
)
;
const
RecordReplayControl
=
sandbox
.
RecordReplayControl
;
function
setupContents
(
window
)
{
const
overlay
=
(
window
.
middlemanOverlay
=
window
.
document
.
createElement
(
"
div
"
)
)
;
overlay
.
style
.
position
=
"
absolute
"
;
overlay
.
style
.
visibility
=
"
hidden
"
;
overlay
.
style
.
backgroundColor
=
"
#
F9F9FA
"
;
overlay
.
style
.
width
=
"
100
%
"
;
overlay
.
style
.
height
=
"
29px
"
;
overlay
.
style
.
left
=
"
0px
"
;
overlay
.
style
.
bottom
=
"
0px
"
;
overlay
.
style
[
"
border
-
top
"
]
=
"
1px
solid
#
DCE1E4
"
;
const
progressBar
=
window
.
document
.
createElement
(
"
div
"
)
;
progressBar
.
style
.
position
=
"
relative
"
;
progressBar
.
style
.
width
=
"
calc
(
100
%
-
20px
)
"
;
progressBar
.
style
.
height
=
"
6px
"
;
progressBar
.
style
.
background
=
"
#
DCDCDC
"
;
progressBar
.
style
.
margin
=
"
11px
10px
"
;
overlay
.
appendChild
(
progressBar
)
;
const
progress
=
(
window
.
middlemanProgress
=
window
.
document
.
createElement
(
"
div
"
)
)
;
progress
.
style
.
position
=
"
absolute
"
;
progress
.
style
.
width
=
"
0
"
;
progress
.
style
.
height
=
"
100
%
"
;
progress
.
style
.
background
=
"
#
B7B6B6
"
;
progressBar
.
appendChild
(
progress
)
;
window
.
document
.
body
.
prepend
(
overlay
)
;
const
canvas
=
window
.
middlemanCanvas
=
window
.
document
.
createElement
(
"
canvas
"
)
;
canvas
.
style
.
position
=
"
absolute
"
;
window
.
document
.
body
.
style
.
margin
=
"
0px
"
;
window
.
document
.
body
.
prepend
(
canvas
)
;
}
function
getOverlay
(
window
)
{
if
(
!
window
.
middlemanOverlay
)
{
setupContents
(
window
)
;
}
return
window
.
middlemanOverlay
;
}
function
getCanvas
(
window
)
{
if
(
!
window
.
middlemanCanvas
)
{
setupContents
(
window
)
;
}
return
window
.
middlemanCanvas
;
}
function
updateWindowCanvas
(
window
buffer
width
height
hadFailure
)
{
const
canvas
=
getCanvas
(
window
)
;
canvas
.
width
=
width
;
canvas
.
height
=
height
;
const
scale
=
window
.
devicePixelRatio
;
if
(
scale
!
=
1
)
{
canvas
.
style
.
transform
=
scale
(
{
1
/
scale
}
)
translate
(
-
{
width
/
scale
}
px
-
{
height
/
scale
}
px
)
;
}
const
cx
=
canvas
.
getContext
(
"
2d
"
)
;
const
graphicsData
=
new
Uint8Array
(
buffer
)
;
const
imageData
=
cx
.
getImageData
(
0
0
width
height
)
;
imageData
.
data
.
set
(
graphicsData
)
;
cx
.
putImageData
(
imageData
0
0
)
;
if
(
hadFailure
)
{
cx
.
fillStyle
=
"
red
"
;
cx
.
font
=
"
48px
serif
"
;
cx
.
fillText
(
"
PAINT
FAILURE
"
10
50
)
;
}
window
.
document
.
title
=
"
RECORD
/
REPLAY
"
;
updateWindowOverlay
(
window
)
;
}
function
UpdateCanvas
(
buffer
width
height
hadFailure
)
{
try
{
for
(
const
window
of
Services
.
ww
.
getWindowEnumerator
(
)
)
{
updateWindowCanvas
(
window
buffer
width
height
hadFailure
)
;
}
}
catch
(
e
)
{
dump
(
"
Middleman
Graphics
UpdateCanvas
Exception
:
"
+
e
+
"
\
n
"
)
;
}
}
function
updateWindowOverlay
(
window
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
recordreplay
.
timeline
.
enabled
"
)
)
{
return
;
}
const
overlay
=
getOverlay
(
window
)
;
const
position
=
RecordReplayControl
.
recordingPosition
(
)
|
|
1
;
if
(
position
=
=
=
undefined
)
{
overlay
.
style
.
visibility
=
"
hidden
"
;
}
else
{
overlay
.
style
.
visibility
=
"
visible
"
;
window
.
middlemanProgress
.
style
.
width
=
(
Math
.
round
(
position
*
10000
)
/
100
)
+
"
%
"
;
}
}
function
UpdateOverlay
(
)
{
try
{
for
(
const
window
of
Services
.
ww
.
getWindowEnumerator
(
)
)
{
updateWindowOverlay
(
window
)
;
}
}
catch
(
e
)
{
dump
(
"
Middleman
Graphics
UpdateOverlay
Exception
:
"
+
e
+
"
\
n
"
)
;
}
}
var
EXPORTED_SYMBOLS
=
[
"
UpdateCanvas
"
"
UpdateOverlay
"
]
;
