"
use
strict
"
;
function
getNeighbors
(
frame
offset
rewinding
)
{
return
rewinding
?
frame
.
script
.
getPredecessorOffsets
(
offset
)
:
frame
.
script
.
getSuccessorOffsets
(
offset
)
;
}
function
findStepOffsets
(
frame
rewinding
)
{
const
seen
=
[
]
;
const
result
=
[
]
;
let
worklist
=
getNeighbors
(
frame
frame
.
offset
rewinding
)
;
while
(
worklist
.
length
)
{
const
offset
=
worklist
.
pop
(
)
;
if
(
seen
.
includes
(
offset
)
)
{
continue
;
}
seen
.
push
(
offset
)
;
const
meta
=
frame
.
script
.
getOffsetMetadata
(
offset
)
;
if
(
meta
.
isStepStart
)
{
if
(
!
result
.
includes
(
offset
)
)
{
result
.
push
(
offset
)
;
}
}
else
{
const
neighbors
=
getNeighbors
(
frame
offset
rewinding
)
;
worklist
=
[
.
.
.
worklist
.
.
.
neighbors
]
;
}
}
return
result
;
}
exports
.
findStepOffsets
=
findStepOffsets
;
