"
use
strict
"
;
const
CC
=
Components
.
Constructor
;
const
sandbox
=
Cu
.
Sandbox
(
CC
(
"
mozilla
.
org
/
systemprincipal
;
1
"
"
nsIPrincipal
"
)
(
)
{
wantGlobalProperties
:
[
"
InspectorUtils
"
"
CSSRule
"
]
}
)
;
Cu
.
evalInSandbox
(
"
Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
'
)
;
"
+
"
Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
Services
.
jsm
'
)
;
"
+
"
Components
.
utils
.
import
(
'
resource
:
/
/
devtools
/
shared
/
execution
-
point
-
utils
.
js
'
)
;
"
+
"
addDebuggerToGlobal
(
this
)
;
"
sandbox
)
;
const
{
Debugger
RecordReplayControl
Services
InspectorUtils
CSSRule
pointPrecedes
pointEquals
pointArrayIncludes
findClosestPoint
}
=
sandbox
;
function
formatDisplayName
(
frame
)
{
if
(
frame
.
type
=
=
=
"
call
"
)
{
const
callee
=
frame
.
callee
;
return
callee
.
name
|
|
callee
.
userDisplayName
|
|
callee
.
displayName
;
}
return
(
{
frame
.
type
}
)
;
}
const
dbg
=
new
Debugger
(
)
;
const
gFirstGlobal
=
dbg
.
makeGlobalObjectReference
(
sandbox
)
;
const
gAllGlobals
=
[
]
;
dbg
.
onNewGlobalObject
=
function
(
global
)
{
try
{
dbg
.
addDebuggee
(
global
)
;
gAllGlobals
.
push
(
global
)
;
scanningOnNewGlobal
(
global
)
;
}
catch
(
e
)
{
if
(
!
/
debugger
and
debuggee
must
be
in
different
compartments
/
.
test
(
"
"
+
e
)
)
{
throw
e
;
}
}
}
;
const
dump
=
str
=
>
{
RecordReplayControl
.
dump
(
[
Child
#
{
RecordReplayControl
.
childId
(
)
}
]
:
{
str
}
)
;
}
;
function
assert
(
v
)
{
if
(
!
v
)
{
dump
(
Assertion
Failed
:
{
Error
(
)
.
stack
}
\
n
)
;
throw
new
Error
(
"
Assertion
Failed
!
"
)
;
}
}
function
throwError
(
v
)
{
dump
(
Error
:
{
v
}
\
n
)
;
throw
new
Error
(
v
)
;
}
function
IdMap
(
)
{
this
.
_idToObject
=
[
undefined
]
;
this
.
_objectToId
=
new
Map
(
)
;
}
IdMap
.
prototype
=
{
add
(
object
)
{
assert
(
object
&
&
!
this
.
_objectToId
.
has
(
object
)
)
;
const
id
=
this
.
_idToObject
.
length
;
this
.
_idToObject
.
push
(
object
)
;
this
.
_objectToId
.
set
(
object
id
)
;
return
id
;
}
getId
(
object
)
{
const
id
=
this
.
_objectToId
.
get
(
object
)
;
return
id
=
=
=
undefined
?
0
:
id
;
}
getObject
(
id
)
{
return
this
.
_idToObject
[
id
]
;
}
forEach
(
callback
)
{
for
(
let
i
=
1
;
i
<
this
.
_idToObject
.
length
;
i
+
+
)
{
callback
(
i
this
.
_idToObject
[
i
]
)
;
}
}
}
;
function
countScriptFrames
(
)
{
let
count
=
0
;
let
frame
=
dbg
.
getNewestFrame
(
)
;
while
(
frame
)
{
if
(
considerScript
(
frame
.
script
)
)
{
count
+
+
;
}
frame
=
frame
.
older
;
}
return
count
;
}
function
scriptFrameForIndex
(
index
)
{
let
indexFromTop
=
countScriptFrames
(
)
-
1
-
index
;
let
frame
=
dbg
.
getNewestFrame
(
)
;
while
(
true
)
{
if
(
considerScript
(
frame
.
script
)
)
{
if
(
indexFromTop
-
-
=
=
0
)
{
break
;
}
}
frame
=
frame
.
older
;
}
return
frame
;
}
function
isNonNullObject
(
obj
)
{
return
obj
&
&
(
typeof
obj
=
=
"
object
"
|
|
typeof
obj
=
=
"
function
"
)
;
}
function
getMemoryUsage
(
)
{
const
memoryKinds
=
{
Generic
:
[
1
]
Snapshots
:
[
2
3
4
5
6
7
]
ScriptHits
:
[
8
]
}
;
const
rv
=
{
}
;
for
(
const
[
name
kinds
]
of
Object
.
entries
(
memoryKinds
)
)
{
let
total
=
0
;
kinds
.
forEach
(
kind
=
>
{
total
+
=
RecordReplayControl
.
memoryUsage
(
kind
)
;
}
)
;
rv
[
name
]
=
total
;
}
return
rv
;
}
const
gScripts
=
new
IdMap
(
)
;
const
gNewScripts
=
[
]
;
function
addScript
(
script
)
{
const
id
=
gScripts
.
add
(
script
)
;
script
.
setInstrumentationId
(
id
)
;
script
.
getChildScripts
(
)
.
forEach
(
addScript
)
;
}
const
gScriptSources
=
new
IdMap
(
)
;
function
addScriptSource
(
source
)
{
if
(
!
gScriptSources
.
getId
(
source
)
)
{
gScriptSources
.
add
(
source
)
;
}
}
function
considerScript
(
script
)
{
return
RecordReplayControl
.
shouldUpdateProgressCounter
(
script
.
url
)
;
}
function
setEmptyInstrumentationId
(
script
)
{
script
.
setInstrumentationId
(
0
)
;
script
.
getChildScripts
(
)
.
forEach
(
setEmptyInstrumentationId
)
;
}
dbg
.
onNewScript
=
function
(
script
)
{
if
(
RecordReplayControl
.
areThreadEventsDisallowed
(
)
)
{
return
;
}
if
(
!
considerScript
(
script
)
)
{
setEmptyInstrumentationId
(
script
)
;
return
;
}
addScript
(
script
)
;
addScriptSource
(
script
.
source
)
;
if
(
gManifest
.
kind
=
=
"
resume
"
)
{
gNewScripts
.
push
(
getScriptData
(
gScripts
.
getId
(
script
)
)
)
;
}
installPendingHandlers
(
)
;
}
;
const
gHtmlContent
=
new
Map
(
)
;
getWindow
(
)
.
docShell
.
watchedByDevtools
=
true
;
Services
.
obs
.
addObserver
(
{
observe
(
subject
topic
data
)
{
assert
(
topic
=
=
"
webnavigation
-
create
"
)
;
subject
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
subject
.
watchedByDevtools
=
true
;
}
}
"
webnavigation
-
create
"
)
;
Services
.
obs
.
addObserver
(
{
observe
(
subject
topic
data
)
{
assert
(
topic
=
=
"
devtools
-
html
-
content
"
)
;
const
{
uri
contents
}
=
JSON
.
parse
(
data
)
;
if
(
gHtmlContent
.
has
(
uri
)
)
{
const
existing
=
gHtmlContent
.
get
(
uri
)
;
existing
.
content
=
existing
.
content
+
contents
;
}
else
{
gHtmlContent
.
set
(
uri
{
content
:
contents
contentType
:
"
text
/
html
"
}
)
;
}
}
}
"
devtools
-
html
-
content
"
)
;
const
gConsoleMessages
=
[
]
;
const
gNewConsoleMessages
=
[
]
;
function
newConsoleMessage
(
contents
)
{
gConsoleMessages
.
push
(
contents
)
;
if
(
gManifest
.
kind
=
=
"
resume
"
)
{
gNewConsoleMessages
.
push
(
contents
)
;
}
}
function
convertStack
(
stack
)
{
if
(
stack
)
{
const
{
source
line
column
functionDisplayName
}
=
stack
;
const
parent
=
convertStack
(
stack
.
parent
)
;
return
{
source
line
column
functionDisplayName
parent
}
;
}
return
null
;
}
const
gWarpTargetPoints
=
[
null
]
;
Services
.
console
.
registerListener
(
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIConsoleListener
]
)
observe
(
message
)
{
if
(
message
instanceof
Ci
.
nsIScriptError
)
{
let
executionPoint
=
gWarpTargetPoints
[
message
.
timeWarpTarget
]
;
if
(
!
executionPoint
)
{
executionPoint
=
currentScriptedExecutionPoint
(
)
;
}
const
contents
=
JSON
.
parse
(
JSON
.
stringify
(
message
)
)
;
contents
.
stack
=
convertStack
(
message
.
stack
)
;
contents
.
executionPoint
=
executionPoint
;
contents
.
messageType
=
"
PageError
"
;
newConsoleMessage
(
contents
)
;
}
}
}
)
;
Services
.
obs
.
addObserver
(
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
observe
(
message
topic
data
)
{
const
apiMessage
=
message
.
wrappedJSObject
;
const
contents
=
{
messageType
:
"
ConsoleAPI
"
}
;
for
(
const
id
in
apiMessage
)
{
if
(
id
!
=
"
wrappedJSObject
"
&
&
id
!
=
"
arguments
"
)
{
contents
[
id
]
=
JSON
.
parse
(
JSON
.
stringify
(
apiMessage
[
id
]
)
)
;
}
}
contents
.
executionPoint
=
currentScriptedExecutionPoint
(
)
;
if
(
apiMessage
.
arguments
)
{
contents
.
arguments
=
apiMessage
.
arguments
.
map
(
v
=
>
{
return
convertValue
(
makeDebuggeeValue
(
v
)
)
;
}
)
;
contents
.
argumentsData
=
new
PreviewedObjects
(
)
;
contents
.
arguments
.
forEach
(
v
=
>
contents
.
argumentsData
.
addValue
(
v
true
)
)
;
ClearPausedState
(
)
;
}
newConsoleMessage
(
contents
)
;
}
}
"
console
-
api
-
log
-
event
"
)
;
function
NewTimeWarpTarget
(
)
{
gWarpTargetPoints
.
push
(
currentScriptedExecutionPoint
(
)
)
;
return
gWarpTargetPoints
.
length
-
1
;
}
function
scanningOnNewGlobal
(
global
)
{
global
.
setInstrumentation
(
global
.
makeDebuggeeNativeFunction
(
RecordReplayControl
.
instrumentationCallback
)
[
"
main
"
"
entry
"
"
breakpoint
"
"
exit
"
]
)
;
if
(
RecordReplayControl
.
isScanningScripts
(
)
)
{
global
.
setInstrumentationActive
(
true
)
;
}
}
function
ScriptResumeFrame
(
script
)
{
RecordReplayControl
.
setFrameDepth
(
countScriptFrames
(
)
-
1
)
;
RecordReplayControl
.
onResumeFrame
(
"
"
script
)
;
}
function
startScanningAllScripts
(
)
{
if
(
RecordReplayControl
.
isScanningScripts
(
)
)
{
return
;
}
RecordReplayControl
.
setScanningScripts
(
true
)
;
for
(
const
global
of
gAllGlobals
)
{
global
.
setInstrumentationActive
(
true
)
;
}
dbg
.
onExceptionUnwind
=
frame
=
>
{
if
(
considerScript
(
frame
.
script
)
)
{
frame
.
onPop
=
(
)
=
>
{
const
script
=
gScripts
.
getId
(
frame
.
script
)
;
RecordReplayControl
.
setFrameDepth
(
countScriptFrames
(
)
)
;
RecordReplayControl
.
onExitFrame
(
"
"
script
)
;
}
;
}
}
;
}
function
stopScanningAllScripts
(
)
{
if
(
!
RecordReplayControl
.
isScanningScripts
(
)
)
{
return
;
}
RecordReplayControl
.
setScanningScripts
(
false
)
;
for
(
const
global
of
gAllGlobals
)
{
global
.
setInstrumentationActive
(
false
)
;
}
dbg
.
onExceptionUnwind
=
undefined
;
}
function
findScriptHits
(
position
startpoint
endpoint
)
{
const
{
kind
script
offset
frameIndex
:
bpFrameIndex
}
=
position
;
const
hits
=
[
]
;
for
(
let
checkpoint
=
startpoint
;
checkpoint
<
endpoint
;
checkpoint
+
+
)
{
const
allHits
=
RecordReplayControl
.
findScriptHits
(
checkpoint
script
offset
)
;
for
(
const
{
progress
frameIndex
}
of
allHits
)
{
switch
(
kind
)
{
case
"
OnStep
"
:
if
(
bpFrameIndex
!
=
frameIndex
)
{
continue
;
}
case
"
Break
"
:
hits
.
push
(
{
checkpoint
progress
position
:
{
kind
:
"
OnStep
"
script
offset
frameIndex
}
}
)
;
}
}
}
return
hits
;
}
function
findAllScriptHits
(
script
frameIndex
offsets
startpoint
endpoint
)
{
const
allHits
=
[
]
;
for
(
const
offset
of
offsets
)
{
const
position
=
{
kind
:
"
OnStep
"
script
offset
frameIndex
}
;
const
hits
=
findScriptHits
(
position
startpoint
endpoint
)
;
allHits
.
push
(
.
.
.
hits
)
;
}
return
allHits
;
}
function
findChangeFrames
(
checkpoint
which
kind
frameIndex
maybeScript
)
{
const
hits
=
RecordReplayControl
.
findChangeFrames
(
checkpoint
which
)
;
return
hits
.
filter
(
hit
=
>
hit
.
frameIndex
=
=
frameIndex
&
&
(
!
maybeScript
|
|
hit
.
script
=
=
maybeScript
)
)
.
map
(
(
{
script
progress
}
)
=
>
(
{
checkpoint
progress
position
:
{
kind
script
frameIndex
}
}
)
)
;
}
function
findFrameSteps
(
{
targetPoint
breakpointOffsets
}
)
{
const
{
checkpoint
position
:
{
script
frameIndex
:
targetIndex
}
}
=
targetPoint
;
let
entryPoint
;
if
(
targetPoint
.
position
.
kind
=
=
"
EnterFrame
"
)
{
entryPoint
=
targetPoint
;
}
else
{
const
entryHits
=
[
.
.
.
findChangeFrames
(
checkpoint
0
"
EnterFrame
"
targetIndex
script
)
.
.
.
findChangeFrames
(
checkpoint
2
"
EnterFrame
"
targetIndex
script
)
]
;
entryPoint
=
findClosestPoint
(
entryHits
targetPoint
true
true
)
;
assert
(
entryPoint
)
;
}
const
exitHits
=
findChangeFrames
(
checkpoint
1
"
OnPop
"
targetIndex
script
)
;
const
exitPoint
=
findClosestPoint
(
exitHits
targetPoint
false
true
)
;
const
breakpointHits
=
findAllScriptHits
(
script
targetIndex
breakpointOffsets
checkpoint
checkpoint
+
1
)
;
const
enterFrameHits
=
findChangeFrames
(
checkpoint
0
"
EnterFrame
"
targetIndex
+
1
)
;
const
steps
=
breakpointHits
.
concat
(
enterFrameHits
)
.
filter
(
point
=
>
{
return
pointPrecedes
(
entryPoint
point
)
&
&
pointPrecedes
(
point
exitPoint
)
;
}
)
;
steps
.
push
(
entryPoint
exitPoint
)
;
steps
.
sort
(
(
pointA
pointB
)
=
>
{
return
pointPrecedes
(
pointB
pointA
)
;
}
)
;
return
steps
;
}
let
gHasEnterFrameHandler
=
false
;
const
gPendingPcHandlers
=
[
]
;
const
gInstalledPcHandlers
=
[
]
;
const
gOnPopFilters
=
[
]
;
function
clearPositionHandlers
(
)
{
dbg
.
clearAllBreakpoints
(
)
;
dbg
.
onEnterFrame
=
undefined
;
dbg
.
onDebuggerStatement
=
undefined
;
gHasEnterFrameHandler
=
false
;
gPendingPcHandlers
.
length
=
0
;
gInstalledPcHandlers
.
length
=
0
;
gOnPopFilters
.
length
=
0
;
}
function
installPendingHandlers
(
)
{
const
pending
=
gPendingPcHandlers
.
map
(
position
=
>
position
)
;
gPendingPcHandlers
.
length
=
0
;
pending
.
forEach
(
ensurePositionHandler
)
;
}
let
gPopFrameResult
=
null
;
function
onPopFrame
(
completion
)
{
gPopFrameResult
=
completion
;
positionHit
(
{
kind
:
"
OnPop
"
script
:
gScripts
.
getId
(
this
.
script
)
frameIndex
:
countScriptFrames
(
)
-
1
}
)
;
gPopFrameResult
=
null
;
}
function
onEnterFrame
(
frame
)
{
if
(
considerScript
(
frame
.
script
)
)
{
if
(
gHasEnterFrameHandler
)
{
ensurePositionHandler
(
{
kind
:
"
OnStep
"
script
:
gScripts
.
getId
(
frame
.
script
)
frameIndex
:
countScriptFrames
(
)
-
1
offset
:
frame
.
script
.
mainOffset
}
)
;
}
gOnPopFilters
.
forEach
(
filter
=
>
{
if
(
filter
(
frame
)
)
{
frame
.
onPop
=
onPopFrame
;
}
}
)
;
}
}
function
addOnPopFilter
(
filter
)
{
let
frame
=
dbg
.
getNewestFrame
(
)
;
while
(
frame
)
{
if
(
considerScript
(
frame
.
script
)
&
&
filter
(
frame
)
)
{
frame
.
onPop
=
onPopFrame
;
}
frame
=
frame
.
older
;
}
gOnPopFilters
.
push
(
filter
)
;
dbg
.
onEnterFrame
=
onEnterFrame
;
}
function
ensurePositionHandler
(
position
)
{
switch
(
position
.
kind
)
{
case
"
Break
"
:
case
"
OnStep
"
:
let
debugScript
;
if
(
position
.
script
)
{
debugScript
=
gScripts
.
getObject
(
position
.
script
)
;
if
(
!
debugScript
)
{
gPendingPcHandlers
.
push
(
position
)
;
return
;
}
debugScript
.
mainOffset
;
}
const
match
=
function
(
{
script
offset
}
)
{
return
script
=
=
position
.
script
&
&
offset
=
=
position
.
offset
;
}
;
if
(
gInstalledPcHandlers
.
some
(
match
)
)
{
return
;
}
gInstalledPcHandlers
.
push
(
{
script
:
position
.
script
offset
:
position
.
offset
}
)
;
debugScript
.
setBreakpoint
(
position
.
offset
{
hit
(
frame
)
{
if
(
position
.
offset
=
=
debugScript
.
mainOffset
)
{
positionHit
(
{
kind
:
"
EnterFrame
"
script
:
position
.
script
frameIndex
:
countScriptFrames
(
)
-
1
}
)
;
}
positionHit
(
{
kind
:
"
OnStep
"
script
:
position
.
script
offset
:
position
.
offset
frameIndex
:
countScriptFrames
(
)
-
1
}
frame
)
;
}
}
)
;
break
;
case
"
OnPop
"
:
assert
(
position
.
script
)
;
addOnPopFilter
(
frame
=
>
gScripts
.
getId
(
frame
.
script
)
=
=
position
.
script
)
;
break
;
case
"
EnterFrame
"
:
dbg
.
onEnterFrame
=
onEnterFrame
;
gHasEnterFrameHandler
=
true
;
break
;
}
}
let
gPausedObjects
=
new
IdMap
(
)
;
let
gDereferencedObjects
=
new
Map
(
)
;
function
getObjectId
(
obj
)
{
const
id
=
gPausedObjects
.
getId
(
obj
)
;
if
(
!
id
&
&
obj
)
{
assert
(
obj
instanceof
Debugger
.
Object
|
|
obj
instanceof
Debugger
.
Environment
)
;
if
(
obj
instanceof
Debugger
.
Object
)
{
if
(
gDereferencedObjects
.
has
(
obj
.
unsafeDereference
(
)
)
)
{
const
canonical
=
gDereferencedObjects
.
get
(
obj
.
unsafeDereference
(
)
)
;
return
gPausedObjects
.
getId
(
canonical
)
;
}
gDereferencedObjects
.
set
(
obj
.
unsafeDereference
(
)
obj
)
;
}
return
gPausedObjects
.
add
(
obj
)
;
}
return
id
;
}
function
convertValue
(
value
)
{
if
(
value
instanceof
Debugger
.
Object
)
{
return
{
object
:
getObjectId
(
value
)
}
;
}
if
(
value
=
=
=
undefined
|
|
value
=
=
Infinity
|
|
value
=
=
-
Infinity
|
|
Object
.
is
(
value
NaN
)
|
|
Object
.
is
(
value
-
0
)
)
{
return
{
special
:
"
"
+
value
}
;
}
return
value
;
}
function
convertCompletionValue
(
value
)
{
if
(
"
return
"
in
value
)
{
return
{
return
:
convertValue
(
value
.
return
)
}
;
}
if
(
"
throw
"
in
value
)
{
return
{
throw
:
convertValue
(
value
.
throw
)
stack
:
convertSavedFrameToPlainObject
(
value
.
stack
)
}
;
}
throwError
(
"
Unexpected
completion
value
"
)
;
}
function
convertSavedFrameToPlainObject
(
frame
)
{
if
(
!
frame
)
{
return
null
;
}
return
{
source
:
frame
.
source
sourceId
:
frame
.
sourceId
line
:
frame
.
line
column
:
frame
.
column
functionDisplayName
:
frame
.
functionDisplayName
asyncCause
:
frame
.
asyncCause
parent
:
convertSavedFrameToPlainObject
(
frame
.
parent
)
asyncParent
:
convertSavedFrameToPlainObject
(
frame
.
asyncParent
)
}
;
}
function
convertValueFromParent
(
value
)
{
if
(
isNonNullObject
(
value
)
)
{
if
(
value
.
object
)
{
return
gPausedObjects
.
getObject
(
value
.
object
)
;
}
switch
(
value
.
special
)
{
case
"
undefined
"
:
return
undefined
;
case
"
Infinity
"
:
return
Infinity
;
case
"
-
Infinity
"
:
return
-
Infinity
;
case
"
NaN
"
:
return
NaN
;
case
"
0
"
:
return
-
0
;
}
}
return
value
;
}
function
makeDebuggeeValue
(
value
)
{
if
(
isNonNullObject
(
value
)
)
{
assert
(
!
(
value
instanceof
Debugger
.
Object
)
)
;
try
{
const
global
=
Cu
.
getGlobalForObject
(
value
)
;
const
dbgGlobal
=
dbg
.
makeGlobalObjectReference
(
global
)
;
return
dbgGlobal
.
makeDebuggeeValue
(
value
)
;
}
catch
(
e
)
{
return
gFirstGlobal
.
makeDebuggeeValue
(
value
)
;
}
}
return
value
;
}
function
getDebuggeeValue
(
value
)
{
if
(
value
&
&
typeof
value
=
=
"
object
"
)
{
assert
(
value
instanceof
Debugger
.
Object
)
;
return
value
.
unsafeDereference
(
)
;
}
return
value
;
}
function
ClearPausedState
(
)
{
gPausedObjects
=
new
IdMap
(
)
;
gDereferencedObjects
=
new
Map
(
)
;
}
let
gManifest
=
{
kind
:
"
primordial
"
}
;
let
gManifestStartTime
;
const
gNewDebuggerStatements
=
[
]
;
let
gPauseOnDebuggerStatement
=
false
;
function
ensureRunToPointPositionHandlers
(
{
endpoint
snapshotPoints
}
)
{
if
(
gLastCheckpoint
=
=
endpoint
.
checkpoint
)
{
assert
(
endpoint
.
position
)
;
ensurePositionHandler
(
endpoint
.
position
)
;
}
snapshotPoints
.
forEach
(
snapshot
=
>
{
if
(
gLastCheckpoint
=
=
snapshot
.
checkpoint
&
&
snapshot
.
position
)
{
ensurePositionHandler
(
snapshot
.
position
)
;
}
}
)
;
}
const
gManifestStartHandlers
=
{
resume
(
{
breakpoints
pauseOnDebuggerStatement
}
)
{
RecordReplayControl
.
resumeExecution
(
)
;
breakpoints
.
forEach
(
ensurePositionHandler
)
;
gPauseOnDebuggerStatement
=
pauseOnDebuggerStatement
;
dbg
.
onDebuggerStatement
=
debuggerStatementHit
;
}
restoreSnapshot
(
{
numSnapshots
}
)
{
RecordReplayControl
.
restoreSnapshot
(
numSnapshots
)
;
throwError
(
"
Unreachable
!
"
)
;
}
runToPoint
(
manifest
)
{
ensureRunToPointPositionHandlers
(
manifest
)
;
RecordReplayControl
.
resumeExecution
(
)
;
}
scanRecording
(
)
{
RecordReplayControl
.
resumeExecution
(
)
;
}
findHits
(
{
position
startpoint
endpoint
}
)
{
RecordReplayControl
.
manifestFinished
(
findScriptHits
(
position
startpoint
endpoint
)
)
;
}
findFrameSteps
(
info
)
{
RecordReplayControl
.
manifestFinished
(
findFrameSteps
(
info
)
)
;
}
flushRecording
(
)
{
RecordReplayControl
.
flushRecording
(
)
;
RecordReplayControl
.
manifestFinished
(
)
;
}
setMainChild
(
)
{
const
endpoint
=
RecordReplayControl
.
setMainChild
(
)
;
RecordReplayControl
.
manifestFinished
(
{
endpoint
}
)
;
}
debuggerRequest
(
{
request
}
)
{
const
response
=
processRequest
(
request
)
;
RecordReplayControl
.
manifestFinished
(
{
response
divergedFromRecording
:
gDivergedFromRecording
}
)
;
}
batchDebuggerRequest
(
{
requests
}
)
{
for
(
const
request
of
requests
)
{
processRequest
(
request
)
;
}
RecordReplayControl
.
manifestFinished
(
{
divergedFromRecording
:
gDivergedFromRecording
}
)
;
}
getPauseData
(
)
{
divergeFromRecording
(
)
;
const
data
=
getPauseData
(
)
;
data
.
paintData
=
RecordReplayControl
.
repaint
(
)
;
RecordReplayControl
.
manifestFinished
(
data
)
;
}
hitLogpoint
(
{
text
condition
}
)
{
divergeFromRecording
(
)
;
const
frame
=
scriptFrameForIndex
(
countScriptFrames
(
)
-
1
)
;
if
(
condition
)
{
const
crv
=
frame
.
eval
(
condition
)
;
if
(
"
return
"
in
crv
&
&
!
crv
.
return
)
{
RecordReplayControl
.
manifestFinished
(
{
result
:
null
}
)
;
return
;
}
}
const
displayName
=
formatDisplayName
(
frame
)
;
const
rv
=
frame
.
evalWithBindings
(
[
{
text
}
]
{
displayName
}
)
;
const
pauseData
=
getPauseData
(
)
;
pauseData
.
paintData
=
RecordReplayControl
.
repaint
(
)
;
ClearPausedState
(
)
;
let
result
;
if
(
rv
.
return
)
{
result
=
getDebuggeeValue
(
rv
.
return
)
;
}
else
{
result
=
[
getDebuggeeValue
(
rv
.
throw
)
]
;
}
result
=
result
.
map
(
v
=
>
convertValue
(
makeDebuggeeValue
(
v
)
)
)
;
const
resultData
=
new
PreviewedObjects
(
)
;
result
.
forEach
(
v
=
>
resultData
.
addValue
(
v
true
)
)
;
RecordReplayControl
.
manifestFinished
(
{
result
resultData
pauseData
}
)
;
}
}
;
function
ManifestStart
(
manifest
)
{
try
{
gManifest
=
manifest
;
gManifestStartTime
=
RecordReplayControl
.
currentExecutionTime
(
)
;
if
(
gManifestStartHandlers
[
manifest
.
kind
]
)
{
gManifestStartHandlers
[
manifest
.
kind
]
(
manifest
)
;
}
else
{
dump
(
Unknown
manifest
:
{
JSON
.
stringify
(
manifest
)
}
\
n
)
;
}
}
catch
(
e
)
{
printError
(
"
ManifestStart
"
e
)
;
}
}
const
FirstCheckpointId
=
1
;
let
gLastCheckpoint
;
function
currentExecutionPoint
(
position
)
{
const
checkpoint
=
gLastCheckpoint
;
const
progress
=
RecordReplayControl
.
progressCounter
(
)
;
return
{
checkpoint
progress
position
}
;
}
function
currentScriptedExecutionPoint
(
)
{
const
numFrames
=
countScriptFrames
(
)
;
if
(
!
numFrames
)
{
return
null
;
}
const
index
=
numFrames
-
1
;
const
frame
=
scriptFrameForIndex
(
index
)
;
return
currentExecutionPoint
(
{
kind
:
"
OnStep
"
script
:
gScripts
.
getId
(
frame
.
script
)
offset
:
frame
.
offset
frameIndex
:
index
}
)
;
}
function
finishResume
(
point
)
{
RecordReplayControl
.
manifestFinished
(
{
point
duration
:
RecordReplayControl
.
currentExecutionTime
(
)
-
gManifestStartTime
consoleMessages
:
gNewConsoleMessages
scripts
:
gNewScripts
debuggerStatements
:
gNewDebuggerStatements
}
)
;
gNewConsoleMessages
.
length
=
0
;
gNewScripts
.
length
=
0
;
gNewDebuggerStatements
.
length
=
0
;
}
const
gManifestFinishedAfterCheckpointHandlers
=
{
primordial
(
_
point
)
{
assert
(
point
.
checkpoint
=
=
FirstCheckpointId
)
;
if
(
!
newSnapshot
(
point
)
)
{
return
;
}
RecordReplayControl
.
manifestFinished
(
{
point
}
)
;
}
resume
(
_
point
)
{
clearPositionHandlers
(
)
;
finishResume
(
point
)
;
}
runToPoint
(
{
endpoint
snapshotPoints
}
point
)
{
assert
(
endpoint
.
checkpoint
>
=
point
.
checkpoint
)
;
if
(
pointArrayIncludes
(
snapshotPoints
point
)
&
&
!
newSnapshot
(
point
)
)
{
return
;
}
if
(
!
endpoint
.
position
&
&
point
.
checkpoint
=
=
endpoint
.
checkpoint
)
{
RecordReplayControl
.
manifestFinished
(
{
point
}
)
;
}
}
scanRecording
(
{
endpoint
snapshotPoints
}
point
)
{
stopScanningAllScripts
(
)
;
if
(
pointArrayIncludes
(
snapshotPoints
point
)
&
&
!
newSnapshot
(
point
)
)
{
return
;
}
if
(
point
.
checkpoint
=
=
endpoint
.
checkpoint
)
{
const
duration
=
RecordReplayControl
.
currentExecutionTime
(
)
-
gManifestStartTime
;
RecordReplayControl
.
manifestFinished
(
{
point
duration
memoryUsage
:
getMemoryUsage
(
)
}
)
;
}
}
}
;
const
gManifestPrepareAfterCheckpointHandlers
=
{
runToPoint
:
ensureRunToPointPositionHandlers
scanRecording
(
{
endpoint
}
)
{
assert
(
!
endpoint
.
position
)
;
startScanningAllScripts
(
)
;
}
}
;
function
processManifestAfterCheckpoint
(
point
restoredSnapshot
)
{
if
(
gManifestFinishedAfterCheckpointHandlers
[
gManifest
.
kind
]
)
{
gManifestFinishedAfterCheckpointHandlers
[
gManifest
.
kind
]
(
gManifest
point
)
;
}
if
(
gManifestPrepareAfterCheckpointHandlers
[
gManifest
.
kind
]
)
{
gManifestPrepareAfterCheckpointHandlers
[
gManifest
.
kind
]
(
gManifest
point
)
;
}
}
function
HitCheckpoint
(
id
)
{
gLastCheckpoint
=
id
;
const
point
=
currentExecutionPoint
(
)
;
try
{
processManifestAfterCheckpoint
(
point
)
;
}
catch
(
e
)
{
printError
(
"
AfterCheckpoint
"
e
)
;
}
}
const
gManifestPositionHandlers
=
{
resume
(
manifest
point
)
{
clearPositionHandlers
(
)
;
finishResume
(
point
)
;
}
runToPoint
(
{
endpoint
snapshotPoints
}
point
)
{
if
(
pointArrayIncludes
(
snapshotPoints
point
)
)
{
clearPositionHandlers
(
)
;
if
(
newSnapshot
(
point
)
)
{
ensureRunToPointPositionHandlers
(
{
endpoint
snapshotPoints
}
)
;
}
}
if
(
pointEquals
(
point
endpoint
)
)
{
clearPositionHandlers
(
)
;
RecordReplayControl
.
manifestFinished
(
{
point
}
)
;
}
}
}
;
function
positionHit
(
position
frame
)
{
const
point
=
currentExecutionPoint
(
position
)
;
if
(
gManifestPositionHandlers
[
gManifest
.
kind
]
)
{
gManifestPositionHandlers
[
gManifest
.
kind
]
(
gManifest
point
)
;
}
else
{
throwError
(
Unexpected
manifest
in
positionHit
:
{
gManifest
.
kind
}
)
;
}
}
function
debuggerStatementHit
(
)
{
assert
(
gManifest
.
kind
=
=
"
resume
"
)
;
const
point
=
currentScriptedExecutionPoint
(
)
;
gNewDebuggerStatements
.
push
(
point
)
;
if
(
gPauseOnDebuggerStatement
)
{
clearPositionHandlers
(
)
;
finishResume
(
point
)
;
}
}
function
newSnapshot
(
point
)
{
if
(
RecordReplayControl
.
newSnapshot
(
)
)
{
return
true
;
}
RecordReplayControl
.
manifestFinished
(
{
restoredSnapshot
:
true
point
}
)
;
return
false
;
}
function
getScriptData
(
id
)
{
const
script
=
gScripts
.
getObject
(
id
)
;
return
{
id
sourceId
:
gScriptSources
.
getId
(
script
.
source
)
startLine
:
script
.
startLine
lineCount
:
script
.
lineCount
sourceStart
:
script
.
sourceStart
sourceLength
:
script
.
sourceLength
displayName
:
script
.
displayName
url
:
script
.
url
format
:
script
.
format
}
;
}
function
getSourceData
(
id
)
{
const
source
=
gScriptSources
.
getObject
(
id
)
;
const
introductionScript
=
gScripts
.
getId
(
source
.
introductionScript
)
;
return
{
id
:
id
text
:
source
.
text
url
:
source
.
url
displayURL
:
source
.
displayURL
elementAttributeName
:
source
.
elementAttributeName
introductionScript
introductionOffset
:
introductionScript
?
source
.
introductionOffset
:
undefined
introductionType
:
source
.
introductionType
sourceMapURL
:
source
.
sourceMapURL
}
;
}
function
forwardToScript
(
name
)
{
return
request
=
>
gScripts
.
getObject
(
request
.
id
)
[
name
]
(
request
.
value
)
;
}
function
getFrameData
(
index
)
{
const
frame
=
scriptFrameForIndex
(
index
)
;
let
_arguments
=
null
;
if
(
frame
.
arguments
)
{
_arguments
=
[
]
;
for
(
let
i
=
0
;
i
<
frame
.
arguments
.
length
;
i
+
+
)
{
_arguments
.
push
(
convertValue
(
frame
.
arguments
[
i
]
)
)
;
}
}
const
script
=
gScripts
.
getId
(
frame
.
script
)
;
return
{
index
type
:
frame
.
type
callee
:
getObjectId
(
frame
.
callee
)
environment
:
getObjectId
(
frame
.
environment
)
generator
:
frame
.
generator
constructing
:
frame
.
constructing
this
:
convertValue
(
frame
.
this
)
script
offset
:
frame
.
offset
arguments
:
_arguments
}
;
}
function
unknownObjectProperties
(
why
)
{
return
[
{
name
:
"
Unknown
properties
"
desc
:
{
value
:
why
enumerable
:
true
}
}
]
;
}
function
getObjectData
(
id
)
{
const
object
=
gPausedObjects
.
getObject
(
id
)
;
if
(
object
instanceof
Debugger
.
Object
)
{
const
rv
=
{
id
kind
:
"
Object
"
callable
:
object
.
callable
isBoundFunction
:
object
.
isBoundFunction
isArrowFunction
:
object
.
isArrowFunction
isGeneratorFunction
:
object
.
isGeneratorFunction
isAsyncFunction
:
object
.
isAsyncFunction
proto
:
getObjectId
(
object
.
proto
)
class
:
object
.
class
name
:
object
.
name
displayName
:
object
.
displayName
parameterNames
:
object
.
parameterNames
script
:
gScripts
.
getId
(
object
.
script
)
environment
:
getObjectId
(
object
.
environment
)
isProxy
:
object
.
isProxy
isExtensible
:
object
.
isExtensible
(
)
isSealed
:
object
.
isSealed
(
)
isFrozen
:
object
.
isFrozen
(
)
}
;
if
(
rv
.
isBoundFunction
)
{
rv
.
boundTargetFunction
=
getObjectId
(
object
.
boundTargetFunction
)
;
rv
.
boundThis
=
convertValue
(
object
.
boundThis
)
;
rv
.
boundArguments
=
getObjectId
(
makeDebuggeeValue
(
object
.
boundArguments
)
)
;
}
if
(
rv
.
isProxy
)
{
rv
.
proxyUnwrapped
=
convertValue
(
object
.
unwrap
(
)
)
;
rv
.
proxyTarget
=
convertValue
(
object
.
proxyTarget
)
;
rv
.
proxyHandler
=
convertValue
(
object
.
proxyHandler
)
;
}
if
(
object
.
errorMessageName
)
{
rv
.
errorMessageName
=
object
.
errorMessageName
;
}
if
(
object
.
errorNotes
)
{
rv
.
errorNotes
=
object
.
errorNotes
;
}
if
(
object
.
errorLineNumber
)
{
rv
.
errorLineNumber
=
object
.
errorLineNumber
;
}
if
(
object
.
errorColumnNumber
)
{
rv
.
errorColumnNumber
=
object
.
errorColumnNumber
;
}
const
raw
=
object
.
unsafeDereference
(
)
;
switch
(
object
.
class
)
{
case
"
Uint8Array
"
:
case
"
Uint8ClampedArray
"
:
case
"
Uint16Array
"
:
case
"
Uint32Array
"
:
case
"
Int8Array
"
:
case
"
Int16Array
"
:
case
"
Int32Array
"
:
case
"
Float32Array
"
:
case
"
Float64Array
"
:
{
const
typedProto
=
Object
.
getPrototypeOf
(
Uint8Array
.
prototype
)
;
const
{
get
}
=
Object
.
getOwnPropertyDescriptor
(
typedProto
"
length
"
)
;
rv
.
typedArrayLength
=
get
.
call
(
raw
)
;
break
;
}
case
"
Set
"
:
{
const
{
get
}
=
Object
.
getOwnPropertyDescriptor
(
Set
.
prototype
"
size
"
)
;
rv
.
containerSize
=
get
.
call
(
raw
)
;
break
;
}
case
"
Map
"
:
{
const
{
get
}
=
Object
.
getOwnPropertyDescriptor
(
Map
.
prototype
"
size
"
)
;
rv
.
containerSize
=
get
.
call
(
raw
)
;
break
;
}
case
"
RegExp
"
:
rv
.
regExpString
=
RegExp
.
prototype
.
toString
.
call
(
raw
)
;
break
;
case
"
Date
"
:
rv
.
dateTime
=
Date
.
prototype
.
getTime
.
call
(
raw
)
;
break
;
case
"
Error
"
:
case
"
EvalError
"
:
case
"
RangeError
"
:
case
"
ReferenceError
"
:
case
"
SyntaxError
"
:
case
"
TypeError
"
:
case
"
URIError
"
:
rv
.
errorProperties
=
{
name
:
raw
.
name
message
:
raw
.
message
stack
:
raw
.
stack
fileName
:
raw
.
fileName
lineNumber
:
raw
.
lineNumber
columnNumber
:
raw
.
columnNumber
}
;
break
;
}
return
rv
;
}
if
(
object
instanceof
Debugger
.
Environment
)
{
return
{
id
kind
:
"
Environment
"
type
:
object
.
type
parent
:
getObjectId
(
object
.
parent
)
object
:
object
.
type
=
=
"
declarative
"
?
0
:
getObjectId
(
object
.
object
)
callee
:
getObjectId
(
object
.
callee
)
optimizedOut
:
object
.
optimizedOut
}
;
}
throwError
(
Unknown
object
kind
:
{
object
}
)
;
}
function
getObjectProperties
(
object
)
{
let
names
;
try
{
names
=
object
.
getOwnPropertyNames
(
)
;
}
catch
(
e
)
{
return
unknownObjectProperties
(
e
.
toString
(
)
)
;
}
const
rv
=
Object
.
create
(
null
)
;
names
.
forEach
(
name
=
>
{
let
desc
;
try
{
desc
=
object
.
getOwnPropertyDescriptor
(
name
)
;
}
catch
(
e
)
{
desc
=
{
name
desc
:
{
value
:
"
Unknown
:
"
+
e
enumerable
:
true
}
}
;
}
if
(
"
value
"
in
desc
)
{
desc
.
value
=
convertValue
(
desc
.
value
)
;
}
if
(
"
get
"
in
desc
)
{
desc
.
get
=
getObjectId
(
desc
.
get
)
;
}
if
(
"
set
"
in
desc
)
{
desc
.
set
=
getObjectId
(
desc
.
set
)
;
}
rv
[
name
]
=
desc
;
}
)
;
return
rv
;
}
function
getObjectContainerContents
(
object
)
{
const
raw
=
object
.
unsafeDereference
(
)
;
switch
(
object
.
class
)
{
case
"
Set
"
:
{
const
iter
=
Cu
.
waiveXrays
(
Set
.
prototype
.
values
.
call
(
raw
)
)
;
return
[
.
.
.
iter
]
.
map
(
v
=
>
convertValue
(
makeDebuggeeValue
(
v
)
)
)
;
}
case
"
Map
"
:
{
const
iter
=
Cu
.
waiveXrays
(
Map
.
prototype
.
entries
.
call
(
raw
)
)
;
return
[
.
.
.
iter
]
.
map
(
(
[
k
v
]
)
=
>
[
convertValue
(
makeDebuggeeValue
(
k
)
)
convertValue
(
makeDebuggeeValue
(
v
)
)
]
)
;
}
case
"
WeakSet
"
:
{
const
keys
=
ChromeUtils
.
nondeterministicGetWeakSetKeys
(
raw
)
;
return
keys
.
map
(
k
=
>
convertValue
(
makeDebuggeeValue
(
Cu
.
waiveXrays
(
k
)
)
)
)
;
}
case
"
WeakMap
"
:
{
const
keys
=
ChromeUtils
.
nondeterministicGetWeakMapKeys
(
raw
)
;
return
keys
.
map
(
k
=
>
[
convertValue
(
makeDebuggeeValue
(
k
)
)
convertValue
(
makeDebuggeeValue
(
WeakMap
.
prototype
.
get
.
call
(
raw
k
)
)
)
]
)
;
}
default
:
return
null
;
}
}
function
getEnvironmentNames
(
env
)
{
try
{
const
names
=
env
.
names
(
)
;
return
names
.
map
(
name
=
>
{
return
{
name
value
:
convertValue
(
env
.
getVariable
(
name
)
)
}
;
}
)
;
}
catch
(
e
)
{
return
[
{
name
:
"
Unknown
names
"
value
:
"
Exception
thrown
in
getEnvironmentNames
"
}
]
;
}
}
function
getWindow
(
)
{
for
(
const
window
of
Services
.
ww
.
getWindowEnumerator
(
)
)
{
return
window
;
}
return
null
;
}
const
OBJECT_PREVIEW_MAX_ITEMS
=
10
;
function
PreviewedObjects
(
)
{
this
.
objects
=
{
}
;
this
.
environments
=
{
}
;
}
PreviewedObjects
.
prototype
=
{
addValue
(
value
includeProperties
)
{
if
(
value
&
&
typeof
value
=
=
"
object
"
&
&
value
.
object
)
{
this
.
addObject
(
value
.
object
includeProperties
)
;
}
}
addObject
(
id
includeProperties
)
{
if
(
!
id
)
{
return
;
}
const
needObject
=
!
this
.
objects
[
id
]
;
const
needProperties
=
includeProperties
&
&
(
needObject
|
|
!
this
.
objects
[
id
]
.
preview
.
enumerableOwnProperties
)
;
if
(
!
needObject
&
&
!
needProperties
)
{
return
;
}
const
object
=
gPausedObjects
.
getObject
(
id
)
;
assert
(
object
instanceof
Debugger
.
Object
)
;
const
properties
=
getObjectProperties
(
object
)
;
const
propertyEntries
=
Object
.
entries
(
properties
)
;
if
(
needObject
)
{
this
.
objects
[
id
]
=
{
data
:
getObjectData
(
id
)
preview
:
{
ownPropertyNamesCount
:
propertyEntries
.
length
}
}
;
const
preview
=
this
.
objects
[
id
]
.
preview
;
if
(
properties
.
length
)
{
preview
.
lengthProperty
=
properties
.
length
;
}
if
(
properties
.
displayName
)
{
preview
.
displayNameProperty
=
properties
.
displayName
;
}
}
if
(
needProperties
)
{
const
preview
=
this
.
objects
[
id
]
.
preview
;
const
enumerableOwnProperties
=
Object
.
create
(
null
)
;
let
enumerablePropertyCount
=
0
;
for
(
const
[
name
desc
]
of
propertyEntries
)
{
if
(
desc
.
enumerable
)
{
enumerableOwnProperties
[
name
]
=
desc
;
this
.
addPropertyDescriptor
(
desc
false
)
;
if
(
+
+
enumerablePropertyCount
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
}
preview
.
enumerableOwnProperties
=
enumerableOwnProperties
;
const
containerContents
=
getObjectContainerContents
(
object
)
;
if
(
containerContents
)
{
preview
.
containerContents
=
containerContents
.
slice
(
0
OBJECT_PREVIEW_MAX_ITEMS
)
;
preview
.
containerContents
.
forEach
(
v
=
>
this
.
addContainerValue
(
v
)
)
;
}
}
}
addPropertyDescriptor
(
desc
includeProperties
)
{
if
(
desc
.
value
)
{
this
.
addValue
(
desc
.
value
includeProperties
)
;
}
if
(
desc
.
get
)
{
this
.
addObject
(
desc
.
get
includeProperties
)
;
}
if
(
desc
.
set
)
{
this
.
addObject
(
desc
.
set
includeProperties
)
;
}
}
addContainerValue
(
value
)
{
if
(
value
.
length
=
=
2
)
{
value
.
forEach
(
v
=
>
this
.
addValue
(
v
)
)
;
}
else
{
this
.
addValue
(
value
)
;
}
}
addEnvironment
(
id
)
{
if
(
!
id
|
|
this
.
environments
[
id
]
)
{
return
;
}
const
env
=
gPausedObjects
.
getObject
(
id
)
;
assert
(
env
instanceof
Debugger
.
Environment
)
;
const
data
=
getObjectData
(
id
)
;
const
names
=
getEnvironmentNames
(
env
)
;
this
.
environments
[
id
]
=
{
data
names
}
;
names
.
forEach
(
(
{
value
}
)
=
>
this
.
addValue
(
value
true
)
)
;
this
.
addObject
(
data
.
callee
)
;
this
.
addEnvironment
(
data
.
parent
)
;
}
}
;
function
getPauseData
(
)
{
const
numFrames
=
countScriptFrames
(
)
;
if
(
!
numFrames
)
{
return
{
}
;
}
const
rv
=
new
PreviewedObjects
(
)
;
rv
.
frames
=
[
]
;
rv
.
scripts
=
{
}
;
rv
.
offsetMetadata
=
[
]
;
function
addScript
(
id
)
{
if
(
!
rv
.
scripts
[
id
]
)
{
rv
.
scripts
[
id
]
=
getScriptData
(
id
)
;
}
}
for
(
let
i
=
0
;
i
<
numFrames
;
i
+
+
)
{
const
dbgFrame
=
scriptFrameForIndex
(
i
)
;
const
frame
=
getFrameData
(
i
)
;
const
script
=
gScripts
.
getObject
(
frame
.
script
)
;
rv
.
frames
.
push
(
frame
)
;
rv
.
offsetMetadata
.
push
(
{
scriptId
:
frame
.
script
offset
:
frame
.
offset
metadata
:
script
.
getOffsetMetadata
(
dbgFrame
.
offset
)
}
)
;
addScript
(
frame
.
script
)
;
rv
.
addValue
(
frame
.
this
true
)
;
if
(
frame
.
arguments
)
{
for
(
const
arg
of
frame
.
arguments
)
{
rv
.
addValue
(
arg
true
)
;
}
}
rv
.
addObject
(
frame
.
callee
false
)
;
rv
.
addEnvironment
(
frame
.
environment
true
)
;
}
return
rv
;
}
let
gDivergedFromRecording
=
false
;
function
divergeFromRecording
(
)
{
RecordReplayControl
.
divergeFromRecording
(
)
;
gDivergedFromRecording
=
true
;
}
const
gRequestHandlers
=
{
repaint
(
)
{
divergeFromRecording
(
)
;
return
RecordReplayControl
.
repaint
(
)
;
}
findScripts
(
request
)
{
const
query
=
Object
.
assign
(
{
}
request
.
query
)
;
if
(
"
global
"
in
query
)
{
query
.
global
=
gPausedObjects
.
getObject
(
query
.
global
)
;
}
if
(
"
source
"
in
query
)
{
query
.
source
=
gScriptSources
.
getObject
(
query
.
source
)
;
if
(
!
query
.
source
)
{
return
[
]
;
}
}
const
scripts
=
dbg
.
findScripts
(
query
)
;
const
rv
=
[
]
;
scripts
.
forEach
(
script
=
>
{
if
(
considerScript
(
script
)
)
{
rv
.
push
(
getScriptData
(
gScripts
.
getId
(
script
)
)
)
;
}
}
)
;
return
rv
;
}
getScript
(
request
)
{
return
getScriptData
(
request
.
id
)
;
}
getContent
(
request
)
{
if
(
gHtmlContent
.
has
(
request
.
url
)
)
{
return
gHtmlContent
.
get
(
request
.
url
)
;
}
return
RecordReplayControl
.
getContent
(
request
.
url
)
;
}
findSources
(
request
)
{
const
sources
=
[
]
;
gScriptSources
.
forEach
(
id
=
>
{
sources
.
push
(
getSourceData
(
id
)
)
;
}
)
;
return
sources
;
}
getSource
(
request
)
{
return
getSourceData
(
request
.
id
)
;
}
getObject
(
request
)
{
return
getObjectData
(
request
.
id
)
;
}
getObjectProperties
(
request
)
{
divergeFromRecording
(
)
;
const
object
=
gPausedObjects
.
getObject
(
request
.
id
)
;
return
getObjectProperties
(
object
)
;
}
getObjectContainerContents
(
request
)
{
const
object
=
gPausedObjects
.
getObject
(
request
.
id
)
;
return
getObjectContainerContents
(
object
)
;
}
objectApply
(
request
)
{
divergeFromRecording
(
)
;
const
obj
=
gPausedObjects
.
getObject
(
request
.
id
)
;
const
thisv
=
convertValueFromParent
(
request
.
thisv
)
;
const
args
=
request
.
args
.
map
(
v
=
>
convertValueFromParent
(
v
)
)
;
const
rv
=
obj
.
apply
(
thisv
args
)
;
return
convertCompletionValue
(
rv
)
;
}
getEnvironmentNames
(
request
)
{
divergeFromRecording
(
)
;
const
env
=
gPausedObjects
.
getObject
(
request
.
id
)
;
return
getEnvironmentNames
(
env
)
;
}
getFrame
(
request
)
{
if
(
request
.
index
=
=
-
1
)
{
const
numFrames
=
countScriptFrames
(
)
;
if
(
!
numFrames
)
{
return
{
}
;
}
request
.
index
=
numFrames
-
1
;
}
return
getFrameData
(
request
.
index
)
;
}
pauseData
(
request
)
{
divergeFromRecording
(
)
;
return
getPauseData
(
)
;
}
getLineOffsets
:
forwardToScript
(
"
getLineOffsets
"
)
getOffsetLocation
:
forwardToScript
(
"
getOffsetLocation
"
)
getSuccessorOffsets
:
forwardToScript
(
"
getSuccessorOffsets
"
)
getPredecessorOffsets
:
forwardToScript
(
"
getPredecessorOffsets
"
)
getAllColumnOffsets
:
forwardToScript
(
"
getAllColumnOffsets
"
)
getOffsetMetadata
:
forwardToScript
(
"
getOffsetMetadata
"
)
getPossibleBreakpoints
:
forwardToScript
(
"
getPossibleBreakpoints
"
)
getPossibleBreakpointOffsets
:
forwardToScript
(
"
getPossibleBreakpointOffsets
"
)
frameStepsInfo
(
request
)
{
const
script
=
gScripts
.
getObject
(
request
.
script
)
;
return
{
breakpointOffsets
:
script
.
getPossibleBreakpointOffsets
(
)
}
;
}
frameEvaluate
(
request
)
{
divergeFromRecording
(
)
;
const
frame
=
scriptFrameForIndex
(
request
.
index
)
;
const
rv
=
frame
.
eval
(
request
.
text
request
.
options
)
;
return
convertCompletionValue
(
rv
)
;
}
popFrameResult
(
request
)
{
return
gPopFrameResult
?
convertCompletionValue
(
gPopFrameResult
)
:
{
}
;
}
findConsoleMessages
(
request
)
{
return
gConsoleMessages
;
}
getFixedObjects
(
request
)
{
divergeFromRecording
(
)
;
const
window
=
getWindow
(
)
;
return
{
window
:
getObjectId
(
makeDebuggeeValue
(
window
)
)
document
:
getObjectId
(
makeDebuggeeValue
(
window
.
document
)
)
Services
:
getObjectId
(
makeDebuggeeValue
(
Services
)
)
InspectorUtils
:
getObjectId
(
makeDebuggeeValue
(
InspectorUtils
)
)
CSSRule
:
getObjectId
(
makeDebuggeeValue
(
CSSRule
)
)
}
;
}
newDeepTreeWalker
(
request
)
{
divergeFromRecording
(
)
;
const
walker
=
Cc
[
"
mozilla
.
org
/
inspector
/
deep
-
tree
-
walker
;
1
"
]
.
createInstance
(
Ci
.
inIDeepTreeWalker
)
;
return
{
id
:
getObjectId
(
makeDebuggeeValue
(
walker
)
)
}
;
}
getObjectPropertyValue
(
request
)
{
divergeFromRecording
(
)
;
const
object
=
gPausedObjects
.
getObject
(
request
.
id
)
;
try
{
const
rv
=
object
.
unsafeDereference
(
)
[
request
.
name
]
;
return
{
return
:
convertValue
(
makeDebuggeeValue
(
rv
)
)
}
;
}
catch
(
e
)
{
return
{
throw
:
"
"
+
e
}
;
}
}
setObjectPropertyValue
(
request
)
{
divergeFromRecording
(
)
;
const
object
=
gPausedObjects
.
getObject
(
request
.
id
)
;
const
value
=
getDebuggeeValue
(
convertValueFromParent
(
request
.
value
)
)
;
try
{
object
.
unsafeDereference
(
)
[
request
.
name
]
=
value
;
return
{
return
:
request
.
value
}
;
}
catch
(
e
)
{
return
{
throw
:
"
"
+
e
}
;
}
}
createObject
(
request
)
{
const
global
=
dbg
.
getDebuggees
(
)
[
0
]
;
const
value
=
global
.
executeInGlobal
(
"
(
{
}
)
"
)
;
return
{
id
:
getObjectId
(
value
.
return
)
}
;
}
findEventTarget
(
request
)
{
const
element
=
getWindow
(
)
.
document
.
elementFromPoint
(
request
.
clientX
request
.
clientY
)
;
if
(
!
element
)
{
return
{
id
:
0
}
;
}
const
obj
=
makeDebuggeeValue
(
element
)
;
return
{
id
:
getObjectId
(
obj
)
}
;
}
}
;
function
processRequest
(
request
)
{
try
{
if
(
gRequestHandlers
[
request
.
type
]
)
{
return
gRequestHandlers
[
request
.
type
]
(
request
)
;
}
return
{
exception
:
"
No
handler
for
"
+
request
.
type
}
;
}
catch
(
e
)
{
printError
(
"
processRequest
"
e
)
;
return
{
exception
:
Request
failed
:
{
request
.
type
}
}
;
}
}
function
printError
(
why
e
)
{
let
msg
;
try
{
msg
=
"
"
+
e
+
"
line
"
+
e
.
lineNumber
;
}
catch
(
ee
)
{
msg
=
"
Unknown
"
;
}
dump
(
Record
/
Replay
Error
:
{
why
}
:
{
msg
}
\
n
)
;
}
var
EXPORTED_SYMBOLS
=
[
"
ManifestStart
"
"
HitCheckpoint
"
"
NewTimeWarpTarget
"
"
ScriptResumeFrame
"
]
;
