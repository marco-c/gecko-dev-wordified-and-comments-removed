"
use
strict
"
;
const
CC
=
Components
.
Constructor
;
const
sandbox
=
Cu
.
Sandbox
(
CC
(
"
mozilla
.
org
/
systemprincipal
;
1
"
"
nsIPrincipal
"
)
(
)
)
;
Cu
.
evalInSandbox
(
"
Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
'
)
;
"
+
"
Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
Services
.
jsm
'
)
;
"
+
"
addDebuggerToGlobal
(
this
)
;
"
sandbox
)
;
const
Debugger
=
sandbox
.
Debugger
;
const
RecordReplayControl
=
sandbox
.
RecordReplayControl
;
const
Services
=
sandbox
.
Services
;
const
dbg
=
new
Debugger
(
)
;
dbg
.
onNewGlobalObject
=
function
(
global
)
{
dbg
.
addDebuggee
(
global
)
;
}
;
function
assert
(
v
)
{
if
(
!
v
)
{
RecordReplayControl
.
dump
(
"
Assertion
Failed
:
"
+
(
new
Error
(
)
)
.
stack
+
"
\
n
"
)
;
throw
new
Error
(
"
Assertion
Failed
!
"
)
;
}
}
function
IdMap
(
)
{
this
.
_idToObject
=
[
undefined
]
;
this
.
_objectToId
=
new
Map
(
)
;
}
IdMap
.
prototype
=
{
add
(
object
)
{
assert
(
object
&
&
!
this
.
_objectToId
.
has
(
object
)
)
;
const
id
=
this
.
_idToObject
.
length
;
this
.
_idToObject
.
push
(
object
)
;
this
.
_objectToId
.
set
(
object
id
)
;
return
id
;
}
getId
(
object
)
{
const
id
=
this
.
_objectToId
.
get
(
object
)
;
return
(
id
=
=
=
undefined
)
?
0
:
id
;
}
getObject
(
id
)
{
return
this
.
_idToObject
[
id
]
;
}
forEach
(
callback
)
{
for
(
let
i
=
1
;
i
<
this
.
_idToObject
.
length
;
i
+
+
)
{
callback
(
i
this
.
_idToObject
[
i
]
)
;
}
}
lastId
(
)
{
return
this
.
_idToObject
.
length
-
1
;
}
}
;
function
countScriptFrames
(
)
{
let
count
=
0
;
let
frame
=
dbg
.
getNewestFrame
(
)
;
while
(
frame
)
{
if
(
considerScript
(
frame
.
script
)
)
{
count
+
+
;
}
frame
=
frame
.
older
;
}
return
count
;
}
function
scriptFrameForIndex
(
index
)
{
let
indexFromTop
=
countScriptFrames
(
)
-
1
-
index
;
let
frame
=
dbg
.
getNewestFrame
(
)
;
while
(
true
)
{
if
(
considerScript
(
frame
.
script
)
)
{
if
(
indexFromTop
-
-
=
=
0
)
{
break
;
}
}
frame
=
frame
.
older
;
}
return
frame
;
}
const
gScripts
=
new
IdMap
(
)
;
function
addScript
(
script
)
{
gScripts
.
add
(
script
)
;
script
.
getChildScripts
(
)
.
forEach
(
addScript
)
;
}
const
gScriptSources
=
new
IdMap
(
)
;
function
addScriptSource
(
source
)
{
if
(
!
gScriptSources
.
getId
(
source
)
)
{
gScriptSources
.
add
(
source
)
;
}
}
function
considerScript
(
script
)
{
return
script
.
url
&
&
!
script
.
url
.
startsWith
(
"
resource
:
"
)
&
&
!
script
.
url
.
startsWith
(
"
chrome
:
"
)
;
}
dbg
.
onNewScript
=
function
(
script
)
{
if
(
RecordReplayControl
.
areThreadEventsDisallowed
(
)
)
{
return
;
}
if
(
!
considerScript
(
script
)
)
{
return
;
}
addScript
(
script
)
;
addScriptSource
(
script
.
source
)
;
RecordReplayControl
.
advanceProgressCounter
(
)
;
hitGlobalHandler
(
"
NewScript
"
)
;
installPendingHandlers
(
)
;
}
;
const
gConsoleMessages
=
[
]
;
function
newConsoleMessage
(
messageType
executionPoint
contents
)
{
RecordReplayControl
.
advanceProgressCounter
(
)
;
if
(
!
executionPoint
)
{
executionPoint
=
RecordReplayControl
.
currentExecutionPoint
(
{
kind
:
"
ConsoleMessage
"
}
)
;
}
contents
.
messageType
=
messageType
;
contents
.
executionPoint
=
executionPoint
;
gConsoleMessages
.
push
(
contents
)
;
hitGlobalHandler
(
"
ConsoleMessage
"
)
;
}
function
convertStack
(
stack
)
{
if
(
stack
)
{
const
{
source
line
column
functionDisplayName
}
=
stack
;
const
parent
=
convertStack
(
stack
.
parent
)
;
return
{
source
line
column
functionDisplayName
parent
}
;
}
return
null
;
}
Services
.
console
.
registerListener
(
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIConsoleListener
]
)
observe
(
message
)
{
if
(
message
instanceof
Ci
.
nsIScriptError
)
{
let
executionPoint
;
if
(
message
.
timeWarpTarget
)
{
executionPoint
=
RecordReplayControl
.
timeWarpTargetExecutionPoint
(
message
.
timeWarpTarget
)
;
}
const
contents
=
JSON
.
parse
(
JSON
.
stringify
(
message
)
)
;
contents
.
stack
=
convertStack
(
message
.
stack
)
;
newConsoleMessage
(
"
PageError
"
executionPoint
contents
)
;
}
}
}
)
;
Services
.
obs
.
addObserver
(
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
observe
(
message
topic
data
)
{
const
apiMessage
=
message
.
wrappedJSObject
;
const
contents
=
{
}
;
for
(
const
id
in
apiMessage
)
{
if
(
id
!
=
"
wrappedJSObject
"
&
&
id
!
=
"
arguments
"
)
{
contents
[
id
]
=
JSON
.
parse
(
JSON
.
stringify
(
apiMessage
[
id
]
)
)
;
}
}
if
(
apiMessage
.
arguments
)
{
contents
.
arguments
=
apiMessage
.
arguments
.
map
(
makeDebuggeeValue
)
;
}
newConsoleMessage
(
"
ConsoleAPI
"
null
contents
)
;
}
}
"
console
-
api
-
log
-
event
"
)
;
function
convertConsoleMessage
(
contents
)
{
const
result
=
{
}
;
for
(
const
id
in
contents
)
{
if
(
id
=
=
"
arguments
"
&
&
contents
.
messageType
=
=
"
ConsoleAPI
"
)
{
result
.
arguments
=
contents
.
arguments
.
map
(
convertValue
)
;
}
else
{
result
[
id
]
=
contents
[
id
]
;
}
}
return
result
;
}
let
gPositionHandlerKinds
=
Object
.
create
(
null
)
;
const
gPendingPcHandlers
=
[
]
;
const
gInstalledPcHandlers
=
[
]
;
const
gOnPopFilters
=
[
]
;
function
ClearPositionHandlers
(
)
{
dbg
.
clearAllBreakpoints
(
)
;
dbg
.
onEnterFrame
=
undefined
;
gPositionHandlerKinds
=
Object
.
create
(
null
)
;
gPendingPcHandlers
.
length
=
0
;
gInstalledPcHandlers
.
length
=
0
;
gOnPopFilters
.
length
=
0
;
}
function
installPendingHandlers
(
)
{
const
pending
=
gPendingPcHandlers
.
map
(
position
=
>
position
)
;
gPendingPcHandlers
.
length
=
0
;
pending
.
forEach
(
EnsurePositionHandler
)
;
}
function
hitGlobalHandler
(
kind
)
{
if
(
gPositionHandlerKinds
[
kind
]
)
{
RecordReplayControl
.
positionHit
(
{
kind
}
)
;
}
}
let
gPopFrameResult
=
null
;
function
onPopFrame
(
completion
)
{
gPopFrameResult
=
completion
;
RecordReplayControl
.
positionHit
(
{
kind
:
"
OnPop
"
script
:
gScripts
.
getId
(
this
.
script
)
frameIndex
:
countScriptFrames
(
)
-
1
}
)
;
gPopFrameResult
=
null
;
}
function
onEnterFrame
(
frame
)
{
hitGlobalHandler
(
"
EnterFrame
"
)
;
if
(
considerScript
(
frame
.
script
)
)
{
gOnPopFilters
.
forEach
(
filter
=
>
{
if
(
filter
(
frame
)
)
{
frame
.
onPop
=
onPopFrame
;
}
}
)
;
}
}
function
addOnPopFilter
(
filter
)
{
let
frame
=
dbg
.
getNewestFrame
(
)
;
while
(
frame
)
{
if
(
considerScript
(
frame
.
script
)
&
&
filter
(
frame
)
)
{
frame
.
onPop
=
onPopFrame
;
}
frame
=
frame
.
older
;
}
gOnPopFilters
.
push
(
filter
)
;
dbg
.
onEnterFrame
=
onEnterFrame
;
}
function
EnsurePositionHandler
(
position
)
{
gPositionHandlerKinds
[
position
.
kind
]
=
true
;
switch
(
position
.
kind
)
{
case
"
Break
"
:
case
"
OnStep
"
:
let
debugScript
;
if
(
position
.
script
)
{
debugScript
=
gScripts
.
getObject
(
position
.
script
)
;
if
(
!
debugScript
)
{
gPendingPcHandlers
.
push
(
position
)
;
return
;
}
}
const
match
=
function
(
{
script
offset
}
)
{
return
script
=
=
position
.
script
&
&
offset
=
=
position
.
offset
;
}
;
if
(
gInstalledPcHandlers
.
some
(
match
)
)
{
return
;
}
gInstalledPcHandlers
.
push
(
{
script
:
position
.
script
offset
:
position
.
offset
}
)
;
debugScript
.
setBreakpoint
(
position
.
offset
{
hit
(
)
{
RecordReplayControl
.
positionHit
(
{
kind
:
"
OnStep
"
script
:
position
.
script
offset
:
position
.
offset
frameIndex
:
countScriptFrames
(
)
-
1
}
)
;
}
}
)
;
break
;
case
"
OnPop
"
:
if
(
position
.
script
)
{
addOnPopFilter
(
frame
=
>
gScripts
.
getId
(
frame
.
script
)
=
=
position
.
script
)
;
}
else
{
addOnPopFilter
(
frame
=
>
true
)
;
}
break
;
case
"
EnterFrame
"
:
dbg
.
onEnterFrame
=
onEnterFrame
;
break
;
}
}
function
GetEntryPosition
(
position
)
{
if
(
position
.
kind
=
=
"
Break
"
|
|
position
.
kind
=
=
"
OnStep
"
)
{
const
script
=
gScripts
.
getObject
(
position
.
script
)
;
if
(
script
)
{
return
{
kind
:
"
Break
"
script
:
position
.
script
offset
:
script
.
mainOffset
}
;
}
}
return
null
;
}
let
gPausedObjects
=
new
IdMap
(
)
;
function
getObjectId
(
obj
)
{
const
id
=
gPausedObjects
.
getId
(
obj
)
;
if
(
!
id
&
&
obj
)
{
assert
(
(
obj
instanceof
Debugger
.
Object
)
|
|
(
obj
instanceof
Debugger
.
Environment
)
)
;
return
gPausedObjects
.
add
(
obj
)
;
}
return
id
;
}
function
convertValue
(
value
)
{
if
(
value
instanceof
Debugger
.
Object
)
{
return
{
object
:
getObjectId
(
value
)
}
;
}
if
(
value
=
=
=
undefined
)
{
return
{
special
:
"
undefined
"
}
;
}
if
(
value
!
=
=
value
)
{
return
{
special
:
"
NaN
"
}
;
}
if
(
value
=
=
Infinity
)
{
return
{
special
:
"
Infinity
"
}
;
}
if
(
value
=
=
-
Infinity
)
{
return
{
special
:
"
-
Infinity
"
}
;
}
return
value
;
}
function
convertCompletionValue
(
value
)
{
if
(
"
return
"
in
value
)
{
return
{
return
:
convertValue
(
value
.
return
)
}
;
}
if
(
"
throw
"
in
value
)
{
return
{
throw
:
convertValue
(
value
.
throw
)
}
;
}
throw
new
Error
(
"
Unexpected
completion
value
"
)
;
}
function
makeDebuggeeValue
(
value
)
{
if
(
value
&
&
typeof
value
=
=
"
object
"
)
{
assert
(
!
(
value
instanceof
Debugger
.
Object
)
)
;
const
global
=
Cu
.
getGlobalForObject
(
value
)
;
const
dbgGlobal
=
dbg
.
makeGlobalObjectReference
(
global
)
;
return
dbgGlobal
.
makeDebuggeeValue
(
value
)
;
}
return
value
;
}
function
ClearPausedState
(
)
{
gPausedObjects
=
new
IdMap
(
)
;
}
function
getScriptData
(
id
)
{
const
script
=
gScripts
.
getObject
(
id
)
;
return
{
id
sourceId
:
gScriptSources
.
getId
(
script
.
source
)
startLine
:
script
.
startLine
lineCount
:
script
.
lineCount
sourceStart
:
script
.
sourceStart
sourceLength
:
script
.
sourceLength
displayName
:
script
.
displayName
url
:
script
.
url
}
;
}
function
forwardToScript
(
name
)
{
return
request
=
>
gScripts
.
getObject
(
request
.
id
)
[
name
]
(
request
.
value
)
;
}
const
gRequestHandlers
=
{
findScripts
(
request
)
{
const
rv
=
[
]
;
gScripts
.
forEach
(
(
id
)
=
>
{
rv
.
push
(
getScriptData
(
id
)
)
;
}
)
;
return
rv
;
}
getScript
(
request
)
{
return
getScriptData
(
request
.
id
)
;
}
getNewScript
(
request
)
{
return
getScriptData
(
gScripts
.
lastId
(
)
)
;
}
getContent
(
request
)
{
return
RecordReplayControl
.
getContent
(
request
.
url
)
;
}
getSource
(
request
)
{
const
source
=
gScriptSources
.
getObject
(
request
.
id
)
;
const
introductionScript
=
gScripts
.
getId
(
source
.
introductionScript
)
;
return
{
id
:
request
.
id
text
:
source
.
text
url
:
source
.
url
displayURL
:
source
.
displayURL
elementAttributeName
:
source
.
elementAttributeName
introductionScript
introductionOffset
:
introductionScript
?
source
.
introductionOffset
:
undefined
introductionType
:
source
.
introductionType
sourceMapURL
:
source
.
sourceMapURL
}
;
}
getObject
(
request
)
{
const
object
=
gPausedObjects
.
getObject
(
request
.
id
)
;
if
(
object
instanceof
Debugger
.
Object
)
{
return
{
id
:
request
.
id
kind
:
"
Object
"
callable
:
object
.
callable
isBoundFunction
:
object
.
isBoundFunction
isArrowFunction
:
object
.
isArrowFunction
isGeneratorFunction
:
object
.
isGeneratorFunction
isAsyncFunction
:
object
.
isAsyncFunction
proto
:
getObjectId
(
object
.
proto
)
class
:
object
.
class
name
:
object
.
name
displayName
:
object
.
displayName
parameterNames
:
object
.
parameterNames
script
:
gScripts
.
getId
(
object
.
script
)
environment
:
getObjectId
(
object
.
environment
)
global
:
getObjectId
(
object
.
global
)
isProxy
:
object
.
isProxy
isExtensible
:
object
.
isExtensible
(
)
isSealed
:
object
.
isSealed
(
)
isFrozen
:
object
.
isFrozen
(
)
}
;
}
if
(
object
instanceof
Debugger
.
Environment
)
{
return
{
id
:
request
.
id
kind
:
"
Environment
"
type
:
object
.
type
parent
:
getObjectId
(
object
.
parent
)
object
:
object
.
type
=
=
"
declarative
"
?
0
:
getObjectId
(
object
.
object
)
callee
:
getObjectId
(
object
.
callee
)
optimizedOut
:
object
.
optimizedOut
}
;
}
throw
new
Error
(
"
Unknown
object
kind
"
)
;
}
getObjectProperties
(
request
)
{
if
(
!
RecordReplayControl
.
maybeDivergeFromRecording
(
)
)
{
return
[
{
name
:
"
Unknown
properties
"
desc
:
{
value
:
"
Recording
divergence
in
getObjectProperties
"
enumerable
:
true
}
}
]
;
}
const
object
=
gPausedObjects
.
getObject
(
request
.
id
)
;
const
names
=
object
.
getOwnPropertyNames
(
)
;
return
names
.
map
(
name
=
>
{
const
desc
=
object
.
getOwnPropertyDescriptor
(
name
)
;
if
(
"
value
"
in
desc
)
{
desc
.
value
=
convertValue
(
desc
.
value
)
;
}
if
(
"
get
"
in
desc
)
{
desc
.
get
=
getObjectId
(
desc
.
get
)
;
}
if
(
"
set
"
in
desc
)
{
desc
.
set
=
getObjectId
(
desc
.
set
)
;
}
return
{
name
desc
}
;
}
)
;
}
getEnvironmentNames
(
request
)
{
if
(
!
RecordReplayControl
.
maybeDivergeFromRecording
(
)
)
{
return
[
{
name
:
"
Unknown
names
"
value
:
"
Recording
divergence
in
getEnvironmentNames
"
}
]
;
}
const
env
=
gPausedObjects
.
getObject
(
request
.
id
)
;
const
names
=
env
.
names
(
)
;
return
names
.
map
(
name
=
>
{
return
{
name
value
:
convertValue
(
env
.
getVariable
(
name
)
)
}
;
}
)
;
}
getFrame
(
request
)
{
if
(
request
.
index
=
=
-
1
)
{
const
numFrames
=
countScriptFrames
(
)
;
if
(
!
numFrames
)
{
return
{
}
;
}
request
.
index
=
numFrames
-
1
;
}
const
frame
=
scriptFrameForIndex
(
request
.
index
)
;
let
_arguments
=
null
;
if
(
frame
.
arguments
)
{
_arguments
=
[
]
;
for
(
let
i
=
0
;
i
<
frame
.
arguments
.
length
;
i
+
+
)
{
_arguments
.
push
(
convertValue
(
frame
.
arguments
[
i
]
)
)
;
}
}
return
{
index
:
request
.
index
type
:
frame
.
type
callee
:
getObjectId
(
frame
.
callee
)
environment
:
getObjectId
(
frame
.
environment
)
generator
:
frame
.
generator
constructing
:
frame
.
constructing
this
:
convertValue
(
frame
.
this
)
script
:
gScripts
.
getId
(
frame
.
script
)
offset
:
frame
.
offset
arguments
:
_arguments
}
;
}
getLineOffsets
:
forwardToScript
(
"
getLineOffsets
"
)
getOffsetLocation
:
forwardToScript
(
"
getOffsetLocation
"
)
getSuccessorOffsets
:
forwardToScript
(
"
getSuccessorOffsets
"
)
getPredecessorOffsets
:
forwardToScript
(
"
getPredecessorOffsets
"
)
frameEvaluate
(
request
)
{
if
(
!
RecordReplayControl
.
maybeDivergeFromRecording
(
)
)
{
return
{
throw
:
"
Recording
divergence
in
frameEvaluate
"
}
;
}
const
frame
=
scriptFrameForIndex
(
request
.
index
)
;
const
rv
=
frame
.
eval
(
request
.
text
request
.
options
)
;
return
convertCompletionValue
(
rv
)
;
}
popFrameResult
(
request
)
{
return
gPopFrameResult
?
convertCompletionValue
(
gPopFrameResult
)
:
{
}
;
}
findConsoleMessages
(
request
)
{
return
gConsoleMessages
.
map
(
convertConsoleMessage
)
;
}
getNewConsoleMessage
(
request
)
{
return
convertConsoleMessage
(
gConsoleMessages
[
gConsoleMessages
.
length
-
1
]
)
;
}
}
;
function
ProcessRequest
(
request
)
{
try
{
if
(
gRequestHandlers
[
request
.
type
]
)
{
return
gRequestHandlers
[
request
.
type
]
(
request
)
;
}
return
{
exception
:
"
No
handler
for
"
+
request
.
type
}
;
}
catch
(
e
)
{
RecordReplayControl
.
dump
(
"
ReplayDebugger
Record
/
Replay
Error
:
"
+
e
+
"
\
n
"
)
;
return
{
exception
:
"
"
+
e
}
;
}
}
var
EXPORTED_SYMBOLS
=
[
"
EnsurePositionHandler
"
"
ClearPositionHandlers
"
"
ClearPausedState
"
"
ProcessRequest
"
"
GetEntryPosition
"
]
;
