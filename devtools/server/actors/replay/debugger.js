"
use
strict
"
;
const
RecordReplayControl
=
!
isWorker
&
&
require
(
"
RecordReplayControl
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
Direction
=
{
FORWARD
:
"
FORWARD
"
BACKWARD
:
"
BACKWARD
"
NONE
:
"
NONE
"
}
;
function
ReplayDebugger
(
)
{
const
existing
=
RecordReplayControl
.
registerReplayDebugger
(
this
)
;
if
(
existing
)
{
return
existing
;
}
assert
(
this
.
_control
)
;
assert
(
this
.
_searchControl
)
;
this
.
_direction
=
Direction
.
NONE
;
this
.
_breakpoints
=
[
]
;
this
.
_frames
=
[
]
;
this
.
_objects
=
[
]
;
this
.
_scripts
=
[
]
;
this
.
_scriptSources
=
[
]
;
this
.
_threadPauseCount
=
0
;
this
.
_cancelPerformPause
=
false
;
this
.
_resumeCallback
=
null
;
this
.
_searches
=
[
]
;
this
.
replayingOnForcedPause
=
null
;
this
.
replayingOnPositionChange
=
null
;
}
const
NewestFrameIndex
=
-
1
;
ReplayDebugger
.
prototype
=
{
replaying
:
true
canRewind
:
RecordReplayControl
.
canRewind
replayCurrentExecutionPoint
(
)
{
assert
(
this
.
_paused
)
;
return
this
.
_control
.
pausePoint
(
)
;
}
replayRecordingEndpoint
(
)
{
return
this
.
_sendRequest
(
{
type
:
"
recordingEndpoint
"
}
)
;
}
replayIsRecording
(
)
{
return
this
.
_control
.
childIsRecording
(
)
;
}
addDebuggee
(
)
{
}
removeAllDebuggees
(
)
{
}
replayingContent
(
url
)
{
this
.
_ensurePaused
(
)
;
return
this
.
_sendRequest
(
{
type
:
"
getContent
"
url
}
)
;
}
_sendRequest
(
request
)
{
const
data
=
this
.
_control
.
sendRequest
(
request
)
;
dumpv
(
"
SendRequest
:
"
+
JSON
.
stringify
(
request
)
+
"
-
>
"
+
JSON
.
stringify
(
data
)
)
;
if
(
data
.
exception
)
{
ThrowError
(
data
.
exception
)
;
}
return
data
;
}
_sendRequestAllowDiverge
(
request
)
{
this
.
_control
.
maybeSwitchToReplayingChild
(
)
;
return
this
.
_sendRequest
(
request
)
;
}
_repaint
(
)
{
const
rv
=
this
.
_sendRequestAllowDiverge
(
{
type
:
"
repaint
"
}
)
;
if
(
"
width
"
in
rv
&
&
"
height
"
in
rv
)
{
RecordReplayControl
.
hadRepaint
(
rv
.
width
rv
.
height
)
;
}
else
{
RecordReplayControl
.
hadRepaintFailure
(
)
;
}
}
get
_paused
(
)
{
return
!
!
this
.
_control
.
pausePoint
(
)
;
}
replayResumeBackward
(
)
{
this
.
_resume
(
false
)
;
}
replayResumeForward
(
)
{
this
.
_resume
(
true
)
;
}
_resume
(
forward
)
{
this
.
_ensurePaused
(
)
;
this
.
_setResume
(
(
)
=
>
{
this
.
_direction
=
forward
?
Direction
.
FORWARD
:
Direction
.
BACKWARD
;
dumpv
(
"
Resuming
"
+
this
.
_direction
)
;
this
.
_control
.
resume
(
forward
)
;
if
(
this
.
_paused
)
{
this
.
_capturePauseData
(
)
;
this
.
replayingOnForcedPause
(
this
.
getNewestFrame
(
)
)
;
}
}
)
;
}
replayTimeWarp
(
target
)
{
this
.
_ensurePaused
(
)
;
this
.
_setResume
(
(
)
=
>
{
this
.
_direction
=
Direction
.
NONE
;
dumpv
(
"
Warping
"
+
JSON
.
stringify
(
target
)
)
;
this
.
_control
.
timeWarp
(
target
)
;
assert
(
this
.
_paused
)
;
this
.
_capturePauseData
(
)
;
this
.
replayingOnForcedPause
(
this
.
getNewestFrame
(
)
)
;
}
)
;
}
replayPause
(
)
{
this
.
_ensurePaused
(
)
;
this
.
_resumeCallback
=
null
;
}
_ensurePaused
(
)
{
if
(
!
this
.
_paused
)
{
this
.
_control
.
waitUntilPaused
(
)
;
assert
(
this
.
_paused
)
;
}
}
_onPause
(
)
{
if
(
this
.
replayingOnPositionChange
)
{
this
.
replayingOnPositionChange
(
)
;
}
this
.
_cancelPerformPause
=
false
;
Services
.
tm
.
dispatchToMainThread
(
this
.
_performPause
.
bind
(
this
)
)
;
}
_performPause
(
)
{
if
(
!
this
.
_paused
|
|
this
.
_cancelPerformPause
|
|
this
.
_resumeCallback
)
{
return
;
}
const
point
=
this
.
replayCurrentExecutionPoint
(
)
;
dumpv
(
"
PerformPause
"
+
JSON
.
stringify
(
point
)
)
;
if
(
!
point
.
position
)
{
}
else
{
for
(
const
{
handler
position
}
of
this
.
_breakpoints
)
{
if
(
RecordReplayControl
.
positionSubsumes
(
position
point
.
position
)
)
{
handler
(
)
;
assert
(
!
this
.
_threadPauseCount
)
;
if
(
this
.
_resumeCallback
)
{
break
;
}
}
}
}
assert
(
!
this
.
_threadPauseCount
)
;
if
(
!
this
.
_resumeCallback
)
{
switch
(
this
.
_direction
)
{
case
Direction
.
FORWARD
:
this
.
replayResumeForward
(
)
;
break
;
case
Direction
.
BACKWARD
:
this
.
replayResumeBackward
(
)
;
break
;
}
}
}
_onSwitchChild
(
)
{
if
(
this
.
replayingOnPositionChange
)
{
this
.
replayingOnPositionChange
(
)
;
}
}
replayPushThreadPause
(
)
{
assert
(
this
.
_paused
)
;
assert
(
!
this
.
_resumeCallback
)
;
if
(
+
+
this
.
_threadPauseCount
=
=
1
)
{
this
.
_control
.
markExplicitPause
(
)
;
this
.
_direction
=
Direction
.
NONE
;
this
.
_repaint
(
)
;
this
.
_cancelPerformPause
=
true
;
}
const
point
=
this
.
replayCurrentExecutionPoint
(
)
;
dumpv
(
"
PushPause
"
+
JSON
.
stringify
(
point
)
)
;
}
replayPopThreadPause
(
)
{
dumpv
(
"
PopPause
"
)
;
if
(
-
-
this
.
_threadPauseCount
=
=
0
&
&
this
.
_resumeCallback
)
{
Services
.
tm
.
dispatchToMainThread
(
this
.
_performResume
.
bind
(
this
)
)
;
}
}
_setResume
(
callback
)
{
assert
(
this
.
_paused
)
;
this
.
_resumeCallback
=
callback
;
if
(
!
this
.
_threadPauseCount
)
{
Services
.
tm
.
dispatchToMainThread
(
this
.
_performResume
.
bind
(
this
)
)
;
}
}
_performResume
(
)
{
assert
(
this
.
_paused
&
&
!
this
.
_threadPauseCount
)
;
if
(
this
.
_resumeCallback
&
&
!
this
.
_threadPauseCount
)
{
const
callback
=
this
.
_resumeCallback
;
this
.
_invalidateAfterUnpause
(
)
;
this
.
_resumeCallback
=
null
;
callback
(
)
;
}
}
_invalidateAfterUnpause
(
)
{
this
.
_frames
.
forEach
(
frame
=
>
frame
.
_invalidate
(
)
)
;
this
.
_frames
.
length
=
0
;
this
.
_objects
.
forEach
(
obj
=
>
obj
.
_invalidate
(
)
)
;
this
.
_objects
.
length
=
0
;
}
_capturePauseData
(
)
{
if
(
this
.
_frames
.
length
)
{
return
;
}
const
pauseData
=
this
.
_sendRequestAllowDiverge
(
{
type
:
"
pauseData
"
}
)
;
if
(
!
pauseData
.
frames
)
{
return
;
}
for
(
const
data
of
Object
.
values
(
pauseData
.
scripts
)
)
{
this
.
_addScript
(
data
)
;
}
for
(
const
{
scriptId
offset
metadata
}
of
pauseData
.
offsetMetadata
)
{
if
(
this
.
_scripts
[
scriptId
]
)
{
const
script
=
this
.
_getScript
(
scriptId
)
;
script
.
_addOffsetMetadata
(
offset
metadata
)
;
}
}
for
(
const
{
data
preview
}
of
Object
.
values
(
pauseData
.
objects
)
)
{
if
(
!
this
.
_objects
[
data
.
id
]
)
{
this
.
_addObject
(
data
)
;
}
this
.
_getObject
(
data
.
id
)
.
_preview
=
preview
;
}
for
(
const
{
data
names
}
of
Object
.
values
(
pauseData
.
environments
)
)
{
if
(
!
this
.
_objects
[
data
.
id
]
)
{
this
.
_addObject
(
data
)
;
}
this
.
_getObject
(
data
.
id
)
.
_names
=
names
;
}
for
(
const
frame
of
pauseData
.
frames
)
{
this
.
_frames
[
frame
.
index
]
=
new
ReplayDebuggerFrame
(
this
frame
)
;
}
}
_forEachSearch
(
callback
)
{
for
(
const
{
position
}
of
this
.
_searches
)
{
callback
(
position
)
;
}
}
_virtualConsoleLog
(
position
text
condition
callback
)
{
this
.
_searches
.
push
(
{
position
text
condition
callback
results
:
[
]
}
)
;
this
.
_searchControl
.
reset
(
)
;
}
_evaluateVirtualConsoleLog
(
search
)
{
const
frameData
=
this
.
_searchControl
.
sendRequest
(
{
type
:
"
getFrame
"
index
:
NewestFrameIndex
}
)
;
if
(
!
(
"
index
"
in
frameData
)
)
{
return
null
;
}
if
(
search
.
condition
)
{
const
rv
=
this
.
_searchControl
.
sendRequest
(
{
type
:
"
frameEvaluate
"
index
:
frameData
.
index
text
:
search
.
condition
convertOptions
:
{
snapshot
:
true
}
}
)
;
const
crv
=
this
.
_convertCompletionValue
(
rv
)
;
if
(
"
return
"
in
crv
&
&
!
crv
.
return
)
{
return
null
;
}
}
const
rv
=
this
.
_searchControl
.
sendRequest
(
{
type
:
"
frameEvaluate
"
index
:
frameData
.
index
text
:
search
.
text
convertOptions
:
{
snapshot
:
true
}
}
)
;
return
this
.
_convertCompletionValue
(
rv
)
;
}
_onSearchPause
(
point
)
{
for
(
const
search
of
this
.
_searches
)
{
if
(
RecordReplayControl
.
positionSubsumes
(
search
.
position
point
.
position
)
)
{
if
(
!
search
.
results
.
some
(
existing
=
>
point
.
progress
=
=
existing
.
progress
)
)
{
search
.
results
.
push
(
point
)
;
const
evaluateResult
=
this
.
_evaluateVirtualConsoleLog
(
search
)
;
if
(
evaluateResult
)
{
search
.
callback
(
point
evaluateResult
)
;
}
}
}
}
}
_setBreakpoint
(
handler
position
data
)
{
this
.
_ensurePaused
(
)
;
dumpv
(
"
AddBreakpoint
"
+
JSON
.
stringify
(
position
)
)
;
this
.
_control
.
addBreakpoint
(
position
)
;
this
.
_breakpoints
.
push
(
{
handler
position
data
}
)
;
}
_clearMatchingBreakpoints
(
callback
)
{
this
.
_ensurePaused
(
)
;
const
newBreakpoints
=
this
.
_breakpoints
.
filter
(
bp
=
>
!
callback
(
bp
)
)
;
if
(
newBreakpoints
.
length
!
=
this
.
_breakpoints
.
length
)
{
dumpv
(
"
ClearBreakpoints
"
)
;
this
.
_control
.
clearBreakpoints
(
)
;
for
(
const
{
position
}
of
newBreakpoints
)
{
dumpv
(
"
AddBreakpoint
"
+
JSON
.
stringify
(
position
)
)
;
this
.
_control
.
addBreakpoint
(
position
)
;
}
}
this
.
_breakpoints
=
newBreakpoints
;
}
_searchBreakpoints
(
callback
)
{
for
(
const
breakpoint
of
this
.
_breakpoints
)
{
const
v
=
callback
(
breakpoint
)
;
if
(
v
)
{
return
v
;
}
}
return
undefined
;
}
_breakpointKindGetter
(
kind
)
{
return
this
.
_searchBreakpoints
(
(
{
position
data
}
)
=
>
{
return
(
position
.
kind
=
=
kind
)
?
data
:
null
;
}
)
;
}
_breakpointKindSetter
(
kind
handler
callback
)
{
if
(
handler
)
{
this
.
_setBreakpoint
(
callback
{
kind
}
handler
)
;
}
else
{
this
.
_clearMatchingBreakpoints
(
(
{
position
}
)
=
>
position
.
kind
=
=
kind
)
;
}
}
replayClearSteppingHooks
(
)
{
this
.
_clearMatchingBreakpoints
(
(
{
position
}
)
=
>
position
.
kind
=
=
"
OnStep
"
|
|
position
.
kind
=
=
"
OnPop
"
)
;
}
_getScript
(
id
)
{
if
(
!
id
)
{
return
null
;
}
const
rv
=
this
.
_scripts
[
id
]
;
if
(
rv
)
{
return
rv
;
}
return
this
.
_addScript
(
this
.
_sendRequest
(
{
type
:
"
getScript
"
id
}
)
)
;
}
_addScript
(
data
)
{
if
(
!
this
.
_scripts
[
data
.
id
]
)
{
this
.
_scripts
[
data
.
id
]
=
new
ReplayDebuggerScript
(
this
data
)
;
}
return
this
.
_scripts
[
data
.
id
]
;
}
_convertScriptQuery
(
query
)
{
const
rv
=
Object
.
assign
(
{
}
query
)
;
if
(
"
global
"
in
query
)
{
rv
.
global
=
query
.
global
.
_data
.
id
;
}
if
(
"
source
"
in
query
)
{
rv
.
source
=
query
.
source
.
_data
.
id
;
}
return
rv
;
}
findScripts
(
query
)
{
this
.
_ensurePaused
(
)
;
const
data
=
this
.
_sendRequest
(
{
type
:
"
findScripts
"
query
:
this
.
_convertScriptQuery
(
query
)
}
)
;
return
data
.
map
(
script
=
>
this
.
_addScript
(
script
)
)
;
}
findAllConsoleMessages
(
)
{
this
.
_ensurePaused
(
)
;
const
messages
=
this
.
_sendRequest
(
{
type
:
"
findConsoleMessages
"
}
)
;
return
messages
.
map
(
this
.
_convertConsoleMessage
.
bind
(
this
)
)
;
}
_getSource
(
id
)
{
const
source
=
this
.
_scriptSources
[
id
]
;
if
(
source
)
{
return
source
;
}
return
this
.
_addSource
(
this
.
_sendRequest
(
{
type
:
"
getSource
"
id
}
)
)
;
}
_addSource
(
data
)
{
if
(
!
this
.
_scriptSources
[
data
.
id
]
)
{
this
.
_scriptSources
[
data
.
id
]
=
new
ReplayDebuggerScriptSource
(
this
data
)
;
}
return
this
.
_scriptSources
[
data
.
id
]
;
}
findSources
(
)
{
this
.
_ensurePaused
(
)
;
const
data
=
this
.
_sendRequest
(
{
type
:
"
findSources
"
}
)
;
return
data
.
map
(
source
=
>
this
.
_addSource
(
source
)
)
;
}
adoptSource
(
source
)
{
assert
(
source
.
_dbg
=
=
this
)
;
return
source
;
}
_getObject
(
id
)
{
if
(
id
&
&
!
this
.
_objects
[
id
]
)
{
const
data
=
this
.
_sendRequest
(
{
type
:
"
getObject
"
id
}
)
;
this
.
_addObject
(
data
)
;
}
return
this
.
_objects
[
id
]
;
}
_addObject
(
data
)
{
switch
(
data
.
kind
)
{
case
"
Object
"
:
this
.
_objects
[
data
.
id
]
=
new
ReplayDebuggerObject
(
this
data
)
;
break
;
case
"
Environment
"
:
this
.
_objects
[
data
.
id
]
=
new
ReplayDebuggerEnvironment
(
this
data
)
;
break
;
default
:
ThrowError
(
"
Unknown
object
kind
"
)
;
}
}
_convertValue
(
value
)
{
if
(
isNonNullObject
(
value
)
)
{
if
(
value
.
object
)
{
return
this
.
_getObject
(
value
.
object
)
;
}
if
(
value
.
snapshot
)
{
return
new
ReplayDebuggerObjectSnapshot
(
this
value
.
snapshot
)
;
}
switch
(
value
.
special
)
{
case
"
undefined
"
:
return
undefined
;
case
"
Infinity
"
:
return
Infinity
;
case
"
-
Infinity
"
:
return
-
Infinity
;
case
"
NaN
"
:
return
NaN
;
case
"
0
"
:
return
-
0
;
}
}
return
value
;
}
_convertCompletionValue
(
value
)
{
if
(
"
return
"
in
value
)
{
return
{
return
:
this
.
_convertValue
(
value
.
return
)
}
;
}
if
(
"
throw
"
in
value
)
{
return
{
throw
:
this
.
_convertValue
(
value
.
throw
)
}
;
}
ThrowError
(
"
Unexpected
completion
value
"
)
;
return
null
;
}
_convertValueForChild
(
value
)
{
if
(
isNonNullObject
(
value
)
)
{
assert
(
value
instanceof
ReplayDebuggerObject
)
;
return
{
object
:
value
.
_data
.
id
}
;
}
else
if
(
value
=
=
=
undefined
|
|
value
=
=
Infinity
|
|
value
=
=
-
Infinity
|
|
Object
.
is
(
value
NaN
)
|
|
Object
.
is
(
value
-
0
)
)
{
return
{
special
:
"
"
+
value
}
;
}
return
value
;
}
_getFrame
(
index
)
{
if
(
index
=
=
NewestFrameIndex
)
{
if
(
this
.
_frames
.
length
)
{
return
this
.
_frames
[
this
.
_frames
.
length
-
1
]
;
}
}
else
{
assert
(
index
<
this
.
_frames
.
length
)
;
if
(
this
.
_frames
[
index
]
)
{
return
this
.
_frames
[
index
]
;
}
}
const
data
=
this
.
_sendRequest
(
{
type
:
"
getFrame
"
index
}
)
;
if
(
index
=
=
NewestFrameIndex
)
{
if
(
"
index
"
in
data
)
{
index
=
data
.
index
;
}
else
{
return
null
;
}
}
this
.
_frames
[
index
]
=
new
ReplayDebuggerFrame
(
this
data
)
;
return
this
.
_frames
[
index
]
;
}
getNewestFrame
(
)
{
return
this
.
_getFrame
(
NewestFrameIndex
)
;
}
_convertConsoleMessage
(
message
)
{
if
(
message
.
messageType
=
=
"
ConsoleAPI
"
&
&
message
.
arguments
)
{
for
(
let
i
=
0
;
i
<
message
.
arguments
.
length
;
i
+
+
)
{
message
.
arguments
[
i
]
=
this
.
_convertValue
(
message
.
arguments
[
i
]
)
;
}
}
return
message
;
}
_getNewScript
(
)
{
return
this
.
_addScript
(
this
.
_sendRequest
(
{
type
:
"
getNewScript
"
}
)
)
;
}
get
onNewScript
(
)
{
return
this
.
_breakpointKindGetter
(
"
NewScript
"
)
;
}
set
onNewScript
(
handler
)
{
this
.
_breakpointKindSetter
(
"
NewScript
"
handler
(
)
=
>
handler
.
call
(
this
this
.
_getNewScript
(
)
)
)
;
}
get
onEnterFrame
(
)
{
return
this
.
_breakpointKindGetter
(
"
EnterFrame
"
)
;
}
set
onEnterFrame
(
handler
)
{
this
.
_breakpointKindSetter
(
"
EnterFrame
"
handler
(
)
=
>
{
handler
.
call
(
this
this
.
getNewestFrame
(
)
)
;
}
)
;
}
get
replayingOnPopFrame
(
)
{
return
this
.
_searchBreakpoints
(
(
{
position
data
}
)
=
>
{
return
(
position
.
kind
=
=
"
OnPop
"
&
&
!
position
.
script
)
?
data
:
null
;
}
)
;
}
set
replayingOnPopFrame
(
handler
)
{
if
(
handler
)
{
this
.
_setBreakpoint
(
(
)
=
>
{
this
.
_capturePauseData
(
)
;
handler
.
call
(
this
this
.
getNewestFrame
(
)
)
;
}
{
kind
:
"
OnPop
"
}
handler
)
;
}
else
{
this
.
_clearMatchingBreakpoints
(
(
{
position
}
)
=
>
{
return
position
.
kind
=
=
"
OnPop
"
&
&
!
position
.
script
;
}
)
;
}
}
getNewConsoleMessage
(
)
{
const
message
=
this
.
_sendRequest
(
{
type
:
"
getNewConsoleMessage
"
}
)
;
return
this
.
_convertConsoleMessage
(
message
)
;
}
get
onConsoleMessage
(
)
{
return
this
.
_breakpointKindGetter
(
"
ConsoleMessage
"
)
;
}
set
onConsoleMessage
(
handler
)
{
this
.
_breakpointKindSetter
(
"
ConsoleMessage
"
handler
(
)
=
>
handler
.
call
(
this
this
.
getNewConsoleMessage
(
)
)
)
;
}
clearAllBreakpoints
:
NYI
}
;
function
ReplayDebuggerScript
(
dbg
data
)
{
this
.
_dbg
=
dbg
;
this
.
_data
=
data
;
this
.
_offsetMetadata
=
[
]
;
}
ReplayDebuggerScript
.
prototype
=
{
get
displayName
(
)
{
return
this
.
_data
.
displayName
;
}
get
url
(
)
{
return
this
.
_data
.
url
;
}
get
startLine
(
)
{
return
this
.
_data
.
startLine
;
}
get
lineCount
(
)
{
return
this
.
_data
.
lineCount
;
}
get
source
(
)
{
return
this
.
_dbg
.
_getSource
(
this
.
_data
.
sourceId
)
;
}
get
sourceStart
(
)
{
return
this
.
_data
.
sourceStart
;
}
get
sourceLength
(
)
{
return
this
.
_data
.
sourceLength
;
}
get
format
(
)
{
return
this
.
_data
.
format
;
}
_forward
(
type
value
)
{
this
.
_dbg
.
_ensurePaused
(
)
;
return
this
.
_dbg
.
_sendRequest
(
{
type
id
:
this
.
_data
.
id
value
}
)
;
}
getLineOffsets
(
line
)
{
return
this
.
_forward
(
"
getLineOffsets
"
line
)
;
}
getOffsetLocation
(
pc
)
{
return
this
.
_forward
(
"
getOffsetLocation
"
pc
)
;
}
getSuccessorOffsets
(
pc
)
{
return
this
.
_forward
(
"
getSuccessorOffsets
"
pc
)
;
}
getPredecessorOffsets
(
pc
)
{
return
this
.
_forward
(
"
getPredecessorOffsets
"
pc
)
;
}
getAllColumnOffsets
(
)
{
return
this
.
_forward
(
"
getAllColumnOffsets
"
)
;
}
getPossibleBreakpoints
(
query
)
{
return
this
.
_forward
(
"
getPossibleBreakpoints
"
query
)
;
}
getPossibleBreakpointOffsets
(
query
)
{
return
this
.
_forward
(
"
getPossibleBreakpointOffsets
"
query
)
;
}
getOffsetMetadata
(
pc
)
{
if
(
!
this
.
_offsetMetadata
[
pc
]
)
{
this
.
_addOffsetMetadata
(
pc
this
.
_forward
(
"
getOffsetMetadata
"
pc
)
)
;
}
return
this
.
_offsetMetadata
[
pc
]
;
}
_addOffsetMetadata
(
pc
metadata
)
{
this
.
_offsetMetadata
[
pc
]
=
metadata
;
}
setBreakpoint
(
offset
handler
)
{
this
.
_dbg
.
_setBreakpoint
(
(
)
=
>
{
this
.
_dbg
.
_capturePauseData
(
)
;
handler
.
hit
(
this
.
_dbg
.
getNewestFrame
(
)
)
;
}
{
kind
:
"
Break
"
script
:
this
.
_data
.
id
offset
}
handler
)
;
}
clearBreakpoint
(
handler
)
{
this
.
_dbg
.
_clearMatchingBreakpoints
(
(
{
position
data
}
)
=
>
{
return
position
.
script
=
=
this
.
_data
.
id
&
&
handler
=
=
data
;
}
)
;
}
replayVirtualConsoleLog
(
offset
text
condition
callback
)
{
this
.
_dbg
.
_virtualConsoleLog
(
{
kind
:
"
Break
"
script
:
this
.
_data
.
id
offset
}
text
condition
callback
)
;
}
get
isGeneratorFunction
(
)
{
NYI
(
)
;
}
get
isAsyncFunction
(
)
{
NYI
(
)
;
}
getChildScripts
:
NYI
getAllOffsets
:
NYI
getBreakpoints
:
NYI
clearAllBreakpoints
:
NYI
isInCatchScope
:
NYI
}
;
function
ReplayDebuggerScriptSource
(
dbg
data
)
{
this
.
_dbg
=
dbg
;
this
.
_data
=
data
;
}
ReplayDebuggerScriptSource
.
prototype
=
{
get
text
(
)
{
return
this
.
_data
.
text
;
}
get
url
(
)
{
return
this
.
_data
.
url
;
}
get
displayURL
(
)
{
return
this
.
_data
.
displayURL
;
}
get
elementAttributeName
(
)
{
return
this
.
_data
.
elementAttributeName
;
}
get
introductionOffset
(
)
{
return
this
.
_data
.
introductionOffset
;
}
get
introductionType
(
)
{
return
this
.
_data
.
introductionType
;
}
get
sourceMapURL
(
)
{
return
this
.
_data
.
sourceMapURL
;
}
get
element
(
)
{
return
null
;
}
get
introductionScript
(
)
{
return
this
.
_dbg
.
_getScript
(
this
.
_data
.
introductionScript
)
;
}
get
binary
(
)
{
NYI
(
)
;
}
}
;
function
ReplayDebuggerFrame
(
dbg
data
)
{
this
.
_dbg
=
dbg
;
this
.
_data
=
data
;
if
(
this
.
_data
.
arguments
)
{
this
.
_data
.
arguments
=
this
.
_data
.
arguments
.
map
(
a
=
>
this
.
_dbg
.
_convertValue
(
a
)
)
;
}
}
ReplayDebuggerFrame
.
prototype
=
{
_invalidate
(
)
{
this
.
_data
=
null
;
}
get
type
(
)
{
return
this
.
_data
.
type
;
}
get
callee
(
)
{
return
this
.
_dbg
.
_getObject
(
this
.
_data
.
callee
)
;
}
get
environment
(
)
{
return
this
.
_dbg
.
_getObject
(
this
.
_data
.
environment
)
;
}
get
generator
(
)
{
return
this
.
_data
.
generator
;
}
get
constructing
(
)
{
return
this
.
_data
.
constructing
;
}
get
this
(
)
{
return
this
.
_dbg
.
_convertValue
(
this
.
_data
.
this
)
;
}
get
script
(
)
{
return
this
.
_dbg
.
_getScript
(
this
.
_data
.
script
)
;
}
get
offset
(
)
{
return
this
.
_data
.
offset
;
}
get
arguments
(
)
{
return
this
.
_data
.
arguments
;
}
get
live
(
)
{
return
true
;
}
eval
(
text
options
)
{
const
rv
=
this
.
_dbg
.
_sendRequestAllowDiverge
(
{
type
:
"
frameEvaluate
"
index
:
this
.
_data
.
index
text
options
}
)
;
return
this
.
_dbg
.
_convertCompletionValue
(
rv
)
;
}
_positionMatches
(
position
kind
)
{
return
position
.
kind
=
=
kind
&
&
position
.
script
=
=
this
.
_data
.
script
&
&
position
.
frameIndex
=
=
this
.
_data
.
index
;
}
get
onStep
(
)
{
return
this
.
_dbg
.
_searchBreakpoints
(
(
{
position
data
}
)
=
>
{
return
this
.
_positionMatches
(
position
"
OnStep
"
)
?
data
:
null
;
}
)
;
}
set
onStep
(
handler
)
{
NotAllowed
(
)
;
}
setReplayingOnStep
(
handler
offsets
)
{
offsets
.
forEach
(
offset
=
>
{
this
.
_dbg
.
_setBreakpoint
(
(
)
=
>
{
this
.
_dbg
.
_capturePauseData
(
)
;
handler
.
call
(
this
.
_dbg
.
getNewestFrame
(
)
)
;
}
{
kind
:
"
OnStep
"
script
:
this
.
_data
.
script
offset
frameIndex
:
this
.
_data
.
index
}
handler
)
;
}
)
;
}
get
onPop
(
)
{
return
this
.
_dbg
.
_searchBreakpoints
(
(
{
position
data
}
)
=
>
{
return
this
.
_positionMatches
(
position
"
OnPop
"
)
?
data
:
null
;
}
)
;
}
set
onPop
(
handler
)
{
if
(
handler
)
{
this
.
_dbg
.
_setBreakpoint
(
(
)
=
>
{
this
.
_dbg
.
_capturePauseData
(
)
;
const
result
=
this
.
_dbg
.
_sendRequest
(
{
type
:
"
popFrameResult
"
}
)
;
handler
.
call
(
this
.
_dbg
.
getNewestFrame
(
)
this
.
_dbg
.
_convertCompletionValue
(
result
)
)
;
}
{
kind
:
"
OnPop
"
script
:
this
.
_data
.
script
frameIndex
:
this
.
_data
.
index
}
handler
)
;
}
else
{
NotAllowed
(
)
;
}
}
get
older
(
)
{
if
(
this
.
_data
.
index
=
=
0
)
{
return
null
;
}
return
this
.
_dbg
.
_getFrame
(
this
.
_data
.
index
-
1
)
;
}
get
implementation
(
)
{
NYI
(
)
;
}
evalWithBindings
:
NYI
}
;
function
ReplayDebuggerObject
(
dbg
data
)
{
this
.
_dbg
=
dbg
;
this
.
_data
=
data
;
this
.
_preview
=
null
;
this
.
_properties
=
null
;
}
ReplayDebuggerObject
.
prototype
=
{
_invalidate
(
)
{
this
.
_data
=
null
;
this
.
_preview
=
null
;
this
.
_properties
=
null
;
}
get
callable
(
)
{
return
this
.
_data
.
callable
;
}
get
isBoundFunction
(
)
{
return
this
.
_data
.
isBoundFunction
;
}
get
isArrowFunction
(
)
{
return
this
.
_data
.
isArrowFunction
;
}
get
isGeneratorFunction
(
)
{
return
this
.
_data
.
isGeneratorFunction
;
}
get
isAsyncFunction
(
)
{
return
this
.
_data
.
isAsyncFunction
;
}
get
class
(
)
{
return
this
.
_data
.
class
;
}
get
name
(
)
{
return
this
.
_data
.
name
;
}
get
displayName
(
)
{
return
this
.
_data
.
displayName
;
}
get
parameterNames
(
)
{
return
this
.
_data
.
parameterNames
;
}
get
script
(
)
{
return
this
.
_dbg
.
_getScript
(
this
.
_data
.
script
)
;
}
get
environment
(
)
{
return
this
.
_dbg
.
_getObject
(
this
.
_data
.
environment
)
;
}
get
isProxy
(
)
{
return
this
.
_data
.
isProxy
;
}
get
proto
(
)
{
return
this
.
_dbg
.
_getObject
(
this
.
_data
.
proto
)
;
}
isExtensible
(
)
{
return
this
.
_data
.
isExtensible
;
}
isSealed
(
)
{
return
this
.
_data
.
isSealed
;
}
isFrozen
(
)
{
return
this
.
_data
.
isFrozen
;
}
unsafeDereference
(
)
{
return
null
;
}
getOwnPropertyNames
(
)
{
this
.
_ensureProperties
(
)
;
return
Object
.
keys
(
this
.
_properties
)
;
}
getEnumerableOwnPropertyNamesForPreview
(
)
{
if
(
this
.
_preview
)
{
return
Object
.
keys
(
this
.
_preview
.
enumerableOwnProperties
)
;
}
return
this
.
getOwnPropertyNames
(
)
;
}
getOwnPropertyNamesCount
(
)
{
if
(
this
.
_preview
)
{
return
this
.
_preview
.
ownPropertyNamesCount
;
}
return
this
.
getOwnPropertyNames
(
)
.
length
;
}
getOwnPropertySymbols
(
)
{
return
[
]
;
}
getOwnPropertyDescriptor
(
name
)
{
if
(
this
.
_preview
)
{
if
(
this
.
_preview
.
enumerableOwnProperties
)
{
const
desc
=
this
.
_preview
.
enumerableOwnProperties
[
name
]
;
if
(
desc
)
{
return
this
.
_convertPropertyDescriptor
(
desc
)
;
}
}
if
(
name
=
=
"
length
"
)
{
return
this
.
_convertPropertyDescriptor
(
this
.
_preview
.
lengthProperty
)
;
}
if
(
name
=
=
"
displayName
"
)
{
return
this
.
_convertPropertyDescriptor
(
this
.
_preview
.
displayNameProperty
)
;
}
}
this
.
_ensureProperties
(
)
;
return
this
.
_convertPropertyDescriptor
(
this
.
_properties
[
name
]
)
;
}
_ensureProperties
(
)
{
if
(
!
this
.
_properties
)
{
const
id
=
this
.
_data
.
id
;
this
.
_properties
=
this
.
_dbg
.
_sendRequestAllowDiverge
(
{
type
:
"
getObjectProperties
"
id
}
)
;
}
}
_convertPropertyDescriptor
(
desc
)
{
if
(
!
desc
)
{
return
undefined
;
}
const
rv
=
Object
.
assign
(
{
}
desc
)
;
if
(
"
value
"
in
desc
)
{
rv
.
value
=
this
.
_dbg
.
_convertValue
(
desc
.
value
)
;
}
if
(
"
get
"
in
desc
)
{
rv
.
get
=
this
.
_dbg
.
_getObject
(
desc
.
get
)
;
}
if
(
"
set
"
in
desc
)
{
rv
.
set
=
this
.
_dbg
.
_getObject
(
desc
.
set
)
;
}
return
rv
;
}
unwrap
(
)
{
if
(
!
this
.
isProxy
)
{
return
this
;
}
return
this
.
_dbg
.
_convertValue
(
this
.
_data
.
proxyUnwrapped
)
;
}
get
proxyTarget
(
)
{
return
this
.
_dbg
.
_convertValue
(
this
.
_data
.
proxyTarget
)
;
}
get
proxyHandler
(
)
{
return
this
.
_dbg
.
_convertValue
(
this
.
_data
.
proxyHandler
)
;
}
get
boundTargetFunction
(
)
{
if
(
this
.
isBoundFunction
)
{
return
this
.
_dbg
.
_getObject
(
this
.
_data
.
boundTargetFunction
)
;
}
return
undefined
;
}
get
boundThis
(
)
{
if
(
this
.
isBoundFunction
)
{
return
this
.
_dbg
.
_convertValue
(
this
.
_data
.
boundThis
)
;
}
return
undefined
;
}
get
boundArguments
(
)
{
if
(
this
.
isBoundFunction
)
{
return
this
.
_dbg
.
_getObject
(
this
.
_data
.
boundArguments
)
;
}
return
undefined
;
}
call
(
thisv
.
.
.
args
)
{
return
this
.
apply
(
thisv
args
)
;
}
apply
(
thisv
args
)
{
thisv
=
this
.
_dbg
.
_convertValueForChild
(
thisv
)
;
args
=
(
args
|
|
[
]
)
.
map
(
v
=
>
this
.
_dbg
.
_convertValueForChild
(
v
)
)
;
const
rv
=
this
.
_dbg
.
_sendRequestAllowDiverge
(
{
type
:
"
objectApply
"
id
:
this
.
_data
.
id
thisv
args
}
)
;
return
this
.
_dbg
.
_convertCompletionValue
(
rv
)
;
}
get
allocationSite
(
)
{
NYI
(
)
;
}
get
errorMessageName
(
)
{
NYI
(
)
;
}
get
errorNotes
(
)
{
NYI
(
)
;
}
get
errorLineNumber
(
)
{
NYI
(
)
;
}
get
errorColumnNumber
(
)
{
NYI
(
)
;
}
get
isPromise
(
)
{
NYI
(
)
;
}
asEnvironment
:
NYI
executeInGlobal
:
NYI
executeInGlobalWithBindings
:
NYI
makeDebuggeeValue
:
NotAllowed
preventExtensions
:
NotAllowed
seal
:
NotAllowed
freeze
:
NotAllowed
defineProperty
:
NotAllowed
defineProperties
:
NotAllowed
deleteProperty
:
NotAllowed
forceLexicalInitializationByName
:
NotAllowed
}
;
ReplayDebugger
.
Object
=
ReplayDebuggerObject
;
function
ReplayDebuggerObjectSnapshot
(
dbg
data
)
{
this
.
_dbg
=
dbg
;
this
.
_data
=
data
;
this
.
_properties
=
Object
.
create
(
null
)
;
data
.
properties
.
forEach
(
(
{
name
desc
}
)
=
>
{
this
.
_properties
[
name
]
=
desc
;
}
)
;
}
ReplayDebuggerObjectSnapshot
.
prototype
=
ReplayDebuggerObject
.
prototype
;
function
ReplayDebuggerEnvironment
(
dbg
data
)
{
this
.
_dbg
=
dbg
;
this
.
_data
=
data
;
this
.
_names
=
null
;
}
ReplayDebuggerEnvironment
.
prototype
=
{
_invalidate
(
)
{
this
.
_data
=
null
;
this
.
_names
=
null
;
}
get
type
(
)
{
return
this
.
_data
.
type
;
}
get
parent
(
)
{
return
this
.
_dbg
.
_getObject
(
this
.
_data
.
parent
)
;
}
get
object
(
)
{
return
this
.
_dbg
.
_getObject
(
this
.
_data
.
object
)
;
}
get
callee
(
)
{
return
this
.
_dbg
.
_getObject
(
this
.
_data
.
callee
)
;
}
get
optimizedOut
(
)
{
return
this
.
_data
.
optimizedOut
;
}
_ensureNames
(
)
{
if
(
!
this
.
_names
)
{
const
names
=
this
.
_dbg
.
_sendRequestAllowDiverge
(
{
type
:
"
getEnvironmentNames
"
id
:
this
.
_data
.
id
}
)
;
this
.
_names
=
{
}
;
names
.
forEach
(
(
{
name
value
}
)
=
>
{
this
.
_names
[
name
]
=
this
.
_dbg
.
_convertValue
(
value
)
;
}
)
;
}
}
names
(
)
{
this
.
_ensureNames
(
)
;
return
Object
.
keys
(
this
.
_names
)
;
}
getVariable
(
name
)
{
this
.
_ensureNames
(
)
;
return
this
.
_names
[
name
]
;
}
get
inspectable
(
)
{
return
true
;
}
find
:
NYI
setVariable
:
NotAllowed
}
;
function
dumpv
(
str
)
{
}
function
NYI
(
)
{
ThrowError
(
"
Not
yet
implemented
"
)
;
}
function
NotAllowed
(
)
{
ThrowError
(
"
Not
allowed
"
)
;
}
function
ThrowError
(
msg
)
{
const
error
=
new
Error
(
msg
)
;
dump
(
"
ReplayDebugger
Server
Error
:
"
+
msg
+
"
Stack
:
"
+
error
.
stack
+
"
\
n
"
)
;
throw
error
;
}
function
assert
(
v
)
{
if
(
!
v
)
{
ThrowError
(
"
Assertion
Failed
!
"
)
;
}
}
function
isNonNullObject
(
obj
)
{
return
obj
&
&
(
typeof
obj
=
=
"
object
"
|
|
typeof
obj
=
=
"
function
"
)
;
}
module
.
exports
=
ReplayDebugger
;
