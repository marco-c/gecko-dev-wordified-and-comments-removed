"
use
strict
"
;
const
{
ActorPool
}
=
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
const
{
createValueGrip
}
=
require
(
"
devtools
/
server
/
actors
/
object
/
utils
"
)
;
const
{
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
frameSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
frame
"
)
;
const
FrameActor
=
ActorClassWithSpec
(
frameSpec
{
initialize
:
function
(
frame
threadActor
)
{
this
.
frame
=
frame
;
this
.
threadActor
=
threadActor
;
}
_frameLifetimePool
:
null
get
frameLifetimePool
(
)
{
if
(
!
this
.
_frameLifetimePool
)
{
this
.
_frameLifetimePool
=
new
ActorPool
(
this
.
conn
)
;
this
.
conn
.
addActorPool
(
this
.
_frameLifetimePool
)
;
}
return
this
.
_frameLifetimePool
;
}
destroy
:
function
(
)
{
this
.
conn
.
removeActorPool
(
this
.
_frameLifetimePool
)
;
this
.
_frameLifetimePool
=
null
;
}
getEnvironment
:
function
(
)
{
try
{
if
(
!
this
.
frame
.
environment
)
{
return
{
}
;
}
}
catch
(
e
)
{
return
{
}
;
}
const
envActor
=
this
.
threadActor
.
createEnvironmentActor
(
this
.
frame
.
environment
this
.
frameLifetimePool
)
;
return
envActor
.
form
(
)
;
}
form
:
function
(
)
{
const
threadActor
=
this
.
threadActor
;
const
form
=
{
actor
:
this
.
actorID
type
:
this
.
frame
.
type
}
;
if
(
this
.
frame
.
type
=
=
=
"
call
"
)
{
form
.
callee
=
createValueGrip
(
this
.
frame
.
callee
threadActor
.
_pausePool
threadActor
.
objectGrip
)
;
}
if
(
!
this
.
threadActor
.
_options
.
ignoreFrameEnvironment
&
&
this
.
frame
.
environment
)
{
form
.
environment
=
this
.
getEnvironment
(
)
;
}
if
(
this
.
frame
.
type
!
=
"
wasmcall
"
)
{
form
.
this
=
createValueGrip
(
this
.
frame
.
this
threadActor
.
_pausePool
threadActor
.
objectGrip
)
;
}
form
.
arguments
=
this
.
_args
(
)
;
if
(
this
.
frame
.
script
)
{
const
generatedLocation
=
this
.
threadActor
.
sources
.
getFrameLocation
(
this
.
frame
)
;
form
.
where
=
{
source
:
generatedLocation
.
generatedSourceActor
.
form
(
)
line
:
generatedLocation
.
generatedLine
column
:
generatedLocation
.
generatedColumn
}
;
}
if
(
!
this
.
frame
.
older
)
{
form
.
oldest
=
true
;
}
return
form
;
}
_args
:
function
(
)
{
if
(
!
this
.
frame
.
arguments
)
{
return
[
]
;
}
return
this
.
frame
.
arguments
.
map
(
arg
=
>
createValueGrip
(
arg
this
.
threadActor
.
_pausePool
this
.
threadActor
.
objectGrip
)
)
;
}
}
)
;
exports
.
FrameActor
=
FrameActor
;
