"
use
strict
"
;
const
{
Actor
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
Profiler
}
=
require
(
"
devtools
/
server
/
performance
/
profiler
"
)
;
const
{
actorBridgeWithSpec
}
=
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
const
{
profilerSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
profiler
"
)
;
loader
.
lazyRequireGetter
(
this
"
events
"
"
sdk
/
event
/
core
"
)
;
var
ProfilerActor
=
exports
.
ProfilerActor
=
protocol
.
ActorClassWithSpec
(
profilerSpec
{
initialize
:
function
(
conn
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
_onProfilerEvent
=
this
.
_onProfilerEvent
.
bind
(
this
)
;
this
.
bridge
=
new
Profiler
(
)
;
events
.
on
(
this
.
bridge
"
*
"
this
.
_onProfilerEvent
)
;
}
disconnect
:
function
(
)
{
this
.
destroy
(
)
;
}
destroy
:
function
(
)
{
events
.
off
(
this
.
bridge
"
*
"
this
.
_onProfilerEvent
)
;
this
.
bridge
.
destroy
(
)
;
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
startProfiler
:
actorBridgeWithSpec
(
"
start
"
)
stopProfiler
:
actorBridgeWithSpec
(
"
stop
"
)
getProfile
:
actorBridgeWithSpec
(
"
getProfile
"
)
getFeatures
:
actorBridgeWithSpec
(
"
getFeatures
"
)
getBufferInfo
:
actorBridgeWithSpec
(
"
getBufferInfo
"
)
getStartOptions
:
actorBridgeWithSpec
(
"
getStartOptions
"
)
isActive
:
actorBridgeWithSpec
(
"
isActive
"
)
getSharedLibraryInformation
:
actorBridgeWithSpec
(
"
getSharedLibraryInformation
"
)
registerEventNotifications
:
actorBridgeWithSpec
(
"
registerEventNotifications
"
)
unregisterEventNotifications
:
actorBridgeWithSpec
(
"
unregisterEventNotifications
"
)
setProfilerStatusInterval
:
actorBridgeWithSpec
(
"
setProfilerStatusInterval
"
)
_onProfilerEvent
:
function
(
eventName
.
.
.
data
)
{
events
.
emit
(
this
eventName
.
.
.
data
)
;
}
}
)
;
