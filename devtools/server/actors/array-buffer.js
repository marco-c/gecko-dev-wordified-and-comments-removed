"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
arrayBufferSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
array
-
buffer
.
js
"
)
;
class
ArrayBufferActor
extends
Actor
{
constructor
(
conn
buffer
)
{
super
(
conn
arrayBufferSpec
)
;
this
.
buffer
=
buffer
;
this
.
bufferLength
=
buffer
.
byteLength
;
this
.
rawObj
=
this
.
buffer
;
}
form
(
)
{
return
{
actor
:
this
.
actorID
length
:
this
.
bufferLength
typeName
:
this
.
typeName
}
;
}
slice
(
start
count
)
{
const
slice
=
new
Uint8Array
(
this
.
buffer
start
count
)
;
const
parts
=
[
]
;
let
offset
=
0
;
const
PortionSize
=
0x6000
;
while
(
offset
+
PortionSize
<
count
)
{
parts
.
push
(
btoa
(
String
.
fromCharCode
.
apply
(
null
slice
.
subarray
(
offset
offset
+
PortionSize
)
)
)
)
;
offset
+
=
PortionSize
;
}
parts
.
push
(
btoa
(
String
.
fromCharCode
.
apply
(
null
slice
.
subarray
(
offset
count
)
)
)
)
;
return
{
from
:
this
.
actorID
encoded
:
parts
.
join
(
"
"
)
}
;
}
}
module
.
exports
=
{
ArrayBufferActor
}
;
