"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
changesSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
changes
"
)
;
const
TrackChangeEmitter
=
require
(
"
devtools
/
server
/
actors
/
utils
/
track
-
change
-
emitter
"
)
;
const
ChangesActor
=
protocol
.
ActorClassWithSpec
(
changesSpec
{
initialize
:
function
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
targetActor
=
targetActor
;
this
.
onTrackChange
=
this
.
pushChange
.
bind
(
this
)
;
TrackChangeEmitter
.
on
(
"
track
-
change
"
this
.
onTrackChange
)
;
this
.
changes
=
[
]
;
}
destroy
:
function
(
)
{
this
.
clearChanges
(
)
;
TrackChangeEmitter
.
off
(
"
track
-
change
"
this
.
onTrackChange
)
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
changeCount
:
function
(
)
{
return
this
.
changes
.
length
;
}
change
:
function
(
index
)
{
if
(
index
>
=
0
&
&
index
<
this
.
changes
.
length
)
{
return
Object
.
assign
(
{
}
this
.
changes
[
index
]
)
;
}
return
undefined
;
}
allChanges
:
function
(
)
{
return
this
.
changes
.
slice
(
)
;
}
pushChange
:
function
(
change
)
{
this
.
changes
.
push
(
change
)
;
}
popChange
:
function
(
)
{
return
this
.
changes
.
pop
(
)
;
}
clearChanges
:
function
(
)
{
this
.
changes
.
length
=
0
;
}
}
)
;
exports
.
ChangesActor
=
ChangesActor
;
