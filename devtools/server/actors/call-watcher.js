"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
serializeStack
parseStack
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
base
-
loader
.
js
"
{
}
)
;
const
{
functionCallSpec
callWatcherSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
call
-
watcher
"
)
;
const
{
CallWatcherFront
}
=
require
(
"
devtools
/
shared
/
fronts
/
call
-
watcher
"
)
;
var
FunctionCallActor
=
protocol
.
ActorClassWithSpec
(
functionCallSpec
{
initialize
:
function
(
conn
[
window
global
caller
type
name
stack
timestamp
args
result
]
holdWeak
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
details
=
{
global
:
global
type
:
type
name
:
name
stack
:
stack
timestamp
:
timestamp
}
;
if
(
holdWeak
)
{
const
weakRefs
=
{
window
:
Cu
.
getWeakReference
(
window
)
caller
:
Cu
.
getWeakReference
(
caller
)
args
:
Cu
.
getWeakReference
(
args
)
result
:
Cu
.
getWeakReference
(
result
)
}
;
Object
.
defineProperties
(
this
.
details
{
window
:
{
get
:
(
)
=
>
weakRefs
.
window
.
get
(
)
}
caller
:
{
get
:
(
)
=
>
weakRefs
.
caller
.
get
(
)
}
args
:
{
get
:
(
)
=
>
weakRefs
.
args
.
get
(
)
}
result
:
{
get
:
(
)
=
>
weakRefs
.
result
.
get
(
)
}
}
)
;
}
else
{
this
.
details
.
window
=
window
;
this
.
details
.
caller
=
caller
;
this
.
details
.
args
=
args
;
this
.
details
.
result
=
result
;
}
this
.
details
.
previews
=
{
caller
:
this
.
_generateStringPreview
(
caller
)
args
:
this
.
_generateArgsPreview
(
args
)
result
:
this
.
_generateStringPreview
(
result
)
}
;
}
form
:
function
(
)
{
return
{
actor
:
this
.
actorID
type
:
this
.
details
.
type
name
:
this
.
details
.
name
file
:
this
.
details
.
stack
[
0
]
.
file
line
:
this
.
details
.
stack
[
0
]
.
line
timestamp
:
this
.
details
.
timestamp
callerPreview
:
this
.
details
.
previews
.
caller
argsPreview
:
this
.
details
.
previews
.
args
resultPreview
:
this
.
details
.
previews
.
result
}
;
}
getDetails
:
function
(
)
{
const
{
type
name
stack
timestamp
}
=
this
.
details
;
for
(
let
i
=
stack
.
length
-
1
;
;
)
{
if
(
stack
[
i
]
.
file
)
{
break
;
}
stack
.
pop
(
)
;
i
-
-
;
}
return
{
type
:
type
name
:
name
stack
:
stack
timestamp
:
timestamp
}
;
}
_generateArgsPreview
:
function
(
args
)
{
const
{
global
name
caller
}
=
this
.
details
;
let
methodSignatureEnums
;
const
knownGlobal
=
CallWatcherFront
.
KNOWN_METHODS
[
global
]
;
if
(
knownGlobal
)
{
const
knownMethod
=
knownGlobal
[
name
]
;
if
(
knownMethod
)
{
const
isOverloaded
=
typeof
knownMethod
.
enums
=
=
=
"
function
"
;
if
(
isOverloaded
)
{
methodSignatureEnums
=
knownMethod
.
enums
(
args
)
;
}
else
{
methodSignatureEnums
=
knownMethod
.
enums
;
}
}
}
const
serializeArgs
=
(
)
=
>
args
.
map
(
(
arg
i
)
=
>
{
if
(
arg
=
=
=
undefined
)
{
return
"
undefined
"
;
}
if
(
arg
=
=
=
null
)
{
return
"
null
"
;
}
if
(
typeof
arg
=
=
"
function
"
)
{
return
"
Function
"
;
}
if
(
typeof
arg
=
=
"
object
"
)
{
return
"
Object
"
;
}
if
(
methodSignatureEnums
&
&
methodSignatureEnums
.
has
(
i
)
)
{
return
getBitToEnumValue
(
global
caller
arg
)
;
}
return
arg
+
"
"
;
}
)
;
return
serializeArgs
(
)
.
join
(
"
"
)
;
}
_generateStringPreview
:
function
(
data
)
{
if
(
data
=
=
=
undefined
)
{
return
"
undefined
"
;
}
if
(
data
=
=
=
null
)
{
return
"
null
"
;
}
if
(
typeof
data
=
=
"
function
"
)
{
return
"
Function
"
;
}
if
(
typeof
data
=
=
"
object
"
)
{
return
"
Object
"
;
}
return
data
+
"
"
;
}
}
)
;
exports
.
CallWatcherActor
=
protocol
.
ActorClassWithSpec
(
callWatcherSpec
{
initialize
:
function
(
conn
targetActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
targetActor
=
targetActor
;
this
.
_onGlobalCreated
=
this
.
_onGlobalCreated
.
bind
(
this
)
;
this
.
_onGlobalDestroyed
=
this
.
_onGlobalDestroyed
.
bind
(
this
)
;
this
.
_onContentFunctionCall
=
this
.
_onContentFunctionCall
.
bind
(
this
)
;
this
.
targetActor
.
on
(
"
window
-
ready
"
this
.
_onGlobalCreated
)
;
this
.
targetActor
.
on
(
"
window
-
destroyed
"
this
.
_onGlobalDestroyed
)
;
}
destroy
:
function
(
conn
)
{
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
conn
)
;
this
.
targetActor
.
off
(
"
window
-
ready
"
this
.
_onGlobalCreated
)
;
this
.
targetActor
.
off
(
"
window
-
destroyed
"
this
.
_onGlobalDestroyed
)
;
this
.
finalize
(
)
;
}
onCall
:
null
setup
:
function
(
{
tracedGlobals
tracedFunctions
startRecording
performReload
holdWeak
storeCalls
}
)
{
if
(
this
.
_initialized
)
{
return
;
}
this
.
_initialized
=
true
;
this
.
_timestampEpoch
=
0
;
this
.
_functionCalls
=
[
]
;
this
.
_tracedGlobals
=
tracedGlobals
|
|
[
]
;
this
.
_tracedFunctions
=
tracedFunctions
|
|
[
]
;
this
.
_holdWeak
=
!
!
holdWeak
;
this
.
_storeCalls
=
!
!
storeCalls
;
if
(
startRecording
)
{
this
.
resumeRecording
(
)
;
}
if
(
performReload
)
{
this
.
targetActor
.
window
.
location
.
reload
(
)
;
}
}
finalize
:
function
(
)
{
if
(
!
this
.
_initialized
)
{
return
;
}
this
.
_initialized
=
false
;
this
.
_finalized
=
true
;
this
.
_tracedGlobals
=
null
;
this
.
_tracedFunctions
=
null
;
}
isRecording
:
function
(
)
{
return
this
.
_recording
;
}
initTimestampEpoch
:
function
(
)
{
this
.
_timestampEpoch
=
this
.
targetActor
.
window
.
performance
.
now
(
)
;
}
resumeRecording
:
function
(
)
{
this
.
_recording
=
true
;
}
pauseRecording
:
function
(
)
{
this
.
_recording
=
false
;
return
this
.
_functionCalls
;
}
eraseRecording
:
function
(
)
{
this
.
_functionCalls
=
[
]
;
}
_onGlobalCreated
:
function
(
{
window
id
isTopLevel
}
)
{
if
(
!
this
.
_initialized
)
{
return
;
}
if
(
!
isTopLevel
)
{
return
;
}
const
self
=
this
;
this
.
_tracedWindowId
=
id
;
const
unwrappedWindow
=
XPCNativeWrapper
.
unwrap
(
window
)
;
const
callback
=
this
.
_onContentFunctionCall
;
for
(
const
global
of
this
.
_tracedGlobals
)
{
const
prototype
=
unwrappedWindow
[
global
]
.
prototype
;
const
properties
=
Object
.
keys
(
prototype
)
;
properties
.
forEach
(
name
=
>
overrideSymbol
(
global
prototype
name
callback
)
)
;
}
for
(
const
name
of
this
.
_tracedFunctions
)
{
overrideSymbol
(
"
window
"
unwrappedWindow
name
callback
)
;
}
function
overrideSymbol
(
global
target
name
subcallback
)
{
const
propertyDescriptor
=
Object
.
getOwnPropertyDescriptor
(
target
name
)
;
if
(
propertyDescriptor
.
get
|
|
propertyDescriptor
.
set
)
{
overrideAccessor
(
global
target
name
propertyDescriptor
subcallback
)
;
return
;
}
if
(
propertyDescriptor
.
writable
&
&
typeof
propertyDescriptor
.
value
=
=
"
function
"
)
{
overrideFunction
(
global
target
name
propertyDescriptor
subcallback
)
;
}
}
function
overrideFunction
(
global
target
name
descriptor
subcallback
)
{
const
originalFunc
=
Cu
.
unwaiveXrays
(
target
[
name
]
)
;
Cu
.
exportFunction
(
function
(
.
.
.
args
)
{
let
result
;
try
{
result
=
Cu
.
waiveXrays
(
originalFunc
.
apply
(
this
args
)
)
;
}
catch
(
e
)
{
throw
createContentError
(
e
unwrappedWindow
)
;
}
if
(
self
.
_recording
)
{
const
type
=
CallWatcherFront
.
METHOD_FUNCTION
;
const
stack
=
getStack
(
name
)
;
const
now
=
self
.
targetActor
.
window
.
performance
.
now
(
)
;
const
timestamp
=
now
-
self
.
_timestampEpoch
;
subcallback
(
unwrappedWindow
global
this
type
name
stack
timestamp
args
result
)
;
}
return
result
;
}
target
{
defineAs
:
name
}
)
;
Object
.
defineProperty
(
target
name
{
configurable
:
descriptor
.
configurable
enumerable
:
descriptor
.
enumerable
writable
:
true
}
)
;
}
function
overrideAccessor
(
global
target
name
descriptor
subcallback
)
{
const
originalGetter
=
Cu
.
unwaiveXrays
(
target
.
__lookupGetter__
(
name
)
)
;
const
originalSetter
=
Cu
.
unwaiveXrays
(
target
.
__lookupSetter__
(
name
)
)
;
Object
.
defineProperty
(
target
name
{
get
:
function
(
.
.
.
args
)
{
if
(
!
originalGetter
)
{
return
undefined
;
}
const
result
=
Cu
.
waiveXrays
(
originalGetter
.
apply
(
this
args
)
)
;
if
(
self
.
_recording
)
{
const
type
=
CallWatcherFront
.
GETTER_FUNCTION
;
const
stack
=
getStack
(
name
)
;
const
now
=
self
.
targetActor
.
window
.
performance
.
now
(
)
;
const
timestamp
=
now
-
self
.
_timestampEpoch
;
subcallback
(
unwrappedWindow
global
this
type
name
stack
timestamp
args
result
)
;
}
return
result
;
}
set
:
function
(
.
.
.
args
)
{
if
(
!
originalSetter
)
{
return
;
}
originalSetter
.
apply
(
this
args
)
;
if
(
self
.
_recording
)
{
const
type
=
CallWatcherFront
.
SETTER_FUNCTION
;
const
stack
=
getStack
(
name
)
;
const
now
=
self
.
targetActor
.
window
.
performance
.
now
(
)
;
const
timestamp
=
now
-
self
.
_timestampEpoch
;
subcallback
(
unwrappedWindow
global
this
type
name
stack
timestamp
args
undefined
)
;
}
}
configurable
:
descriptor
.
configurable
enumerable
:
descriptor
.
enumerable
}
)
;
}
function
getStack
(
caller
)
{
let
stack
;
try
{
throw
new
Error
(
)
;
}
catch
(
e
)
{
stack
=
e
.
stack
;
}
const
calls
=
[
]
;
let
callIndex
=
0
;
let
currNewLinePivot
=
stack
.
indexOf
(
"
\
n
"
)
+
1
;
let
nextNewLinePivot
=
stack
.
indexOf
(
"
\
n
"
currNewLinePivot
)
;
while
(
nextNewLinePivot
>
0
)
{
const
nameDelimiterIndex
=
stack
.
indexOf
(
"
"
currNewLinePivot
)
;
const
columnDelimiterIndex
=
stack
.
lastIndexOf
(
"
:
"
nextNewLinePivot
-
1
)
;
const
lineDelimiterIndex
=
stack
.
lastIndexOf
(
"
:
"
columnDelimiterIndex
-
1
)
;
if
(
!
calls
[
callIndex
]
)
{
calls
[
callIndex
]
=
{
name
:
"
"
file
:
"
"
line
:
0
}
;
}
if
(
!
calls
[
callIndex
+
1
]
)
{
calls
[
callIndex
+
1
]
=
{
name
:
"
"
file
:
"
"
line
:
0
}
;
}
if
(
callIndex
>
0
)
{
const
file
=
stack
.
substring
(
nameDelimiterIndex
+
1
lineDelimiterIndex
)
;
const
line
=
stack
.
substring
(
lineDelimiterIndex
+
1
columnDelimiterIndex
)
;
const
name
=
stack
.
substring
(
currNewLinePivot
nameDelimiterIndex
)
;
calls
[
callIndex
]
.
name
=
name
;
calls
[
callIndex
-
1
]
.
file
=
file
;
calls
[
callIndex
-
1
]
.
line
=
line
;
}
else
{
calls
[
0
]
.
name
=
caller
;
}
currNewLinePivot
=
nextNewLinePivot
+
1
;
nextNewLinePivot
=
stack
.
indexOf
(
"
\
n
"
currNewLinePivot
)
;
callIndex
+
+
;
}
return
calls
;
}
}
_onGlobalDestroyed
:
function
(
{
window
id
isTopLevel
}
)
{
if
(
this
.
_tracedWindowId
=
=
id
)
{
this
.
pauseRecording
(
)
;
this
.
eraseRecording
(
)
;
this
.
_timestampEpoch
=
0
;
}
}
_onContentFunctionCall
:
function
(
.
.
.
details
)
{
if
(
this
.
_finalized
)
{
return
;
}
const
functionCall
=
new
FunctionCallActor
(
this
.
conn
details
this
.
_holdWeak
)
;
if
(
this
.
_storeCalls
)
{
this
.
_functionCalls
.
push
(
functionCall
)
;
}
if
(
this
.
onCall
)
{
this
.
onCall
(
functionCall
)
;
}
else
{
this
.
emit
(
"
call
"
functionCall
)
;
}
}
}
)
;
var
gEnumRegex
=
/
^
[
A
-
Z
]
[
A
-
Z0
-
9_
]
+
/
;
var
gEnumsLookupTable
=
{
}
;
var
INVALID_ENUMS
=
[
"
INVALID_ENUM
"
"
NO_ERROR
"
"
INVALID_VALUE
"
"
OUT_OF_MEMORY
"
"
NONE
"
]
;
function
getBitToEnumValue
(
type
object
arg
)
{
let
table
=
gEnumsLookupTable
[
type
]
;
if
(
!
table
)
{
table
=
gEnumsLookupTable
[
type
]
=
{
}
;
for
(
const
key
in
object
)
{
if
(
key
.
match
(
gEnumRegex
)
)
{
table
[
object
[
key
]
]
=
key
;
}
}
}
if
(
table
[
arg
]
)
{
return
table
[
arg
]
;
}
const
flags
=
[
]
;
for
(
let
flag
in
table
)
{
if
(
INVALID_ENUMS
.
includes
(
table
[
flag
]
)
)
{
continue
;
}
flag
=
flag
|
0
;
if
(
flag
&
&
(
arg
&
flag
)
=
=
=
flag
)
{
flags
.
push
(
table
[
flag
]
)
;
}
}
table
[
arg
]
=
flags
.
join
(
"
|
"
)
|
|
arg
;
return
table
[
arg
]
;
}
function
createContentError
(
e
win
)
{
const
{
message
name
stack
}
=
e
;
const
parsedStack
=
parseStack
(
stack
)
;
const
{
fileName
lineNumber
columnNumber
}
=
parsedStack
[
parsedStack
.
length
-
1
]
;
let
error
;
const
isDOMException
=
ChromeUtils
.
getClassName
(
e
)
=
=
=
"
DOMException
"
;
const
constructor
=
isDOMException
?
win
.
DOMException
:
(
win
[
e
.
name
]
|
|
win
.
Error
)
;
if
(
isDOMException
)
{
error
=
new
constructor
(
message
name
)
;
Object
.
defineProperties
(
error
{
code
:
{
value
:
e
.
code
}
columnNumber
:
{
value
:
0
}
filename
:
{
value
:
fileName
}
lineNumber
:
{
value
:
lineNumber
}
result
:
{
value
:
e
.
result
}
stack
:
{
value
:
serializeStack
(
parsedStack
)
}
}
)
;
}
else
{
error
=
new
constructor
(
message
fileName
lineNumber
)
;
Object
.
defineProperty
(
error
"
columnNumber
"
{
value
:
columnNumber
}
)
;
}
return
error
;
}
