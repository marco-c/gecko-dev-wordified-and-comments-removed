const
{
Cc
Ci
Cu
CC
}
=
require
(
"
chrome
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
Arg
method
RetVal
}
=
protocol
;
const
Services
=
require
(
"
Services
"
)
;
const
{
preferenceSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
preference
"
)
;
exports
.
register
=
function
(
handle
)
{
handle
.
addGlobalActor
(
PreferenceActor
"
preferenceActor
"
)
;
}
;
exports
.
unregister
=
function
(
handle
)
{
}
;
var
PreferenceActor
=
exports
.
PreferenceActor
=
protocol
.
ActorClassWithSpec
(
preferenceSpec
{
typeName
:
"
preference
"
getBoolPref
:
function
(
name
)
{
return
Services
.
prefs
.
getBoolPref
(
name
)
;
}
getCharPref
:
function
(
name
)
{
return
Services
.
prefs
.
getCharPref
(
name
)
;
}
getIntPref
:
function
(
name
)
{
return
Services
.
prefs
.
getIntPref
(
name
)
;
}
getAllPrefs
:
function
(
)
{
let
prefs
=
{
}
;
Services
.
prefs
.
getChildList
(
"
"
)
.
forEach
(
function
(
name
index
)
{
try
{
let
value
;
switch
(
Services
.
prefs
.
getPrefType
(
name
)
)
{
case
Ci
.
nsIPrefBranch
.
PREF_STRING
:
value
=
Services
.
prefs
.
getCharPref
(
name
)
;
break
;
case
Ci
.
nsIPrefBranch
.
PREF_INT
:
value
=
Services
.
prefs
.
getIntPref
(
name
)
;
break
;
case
Ci
.
nsIPrefBranch
.
PREF_BOOL
:
value
=
Services
.
prefs
.
getBoolPref
(
name
)
;
break
;
default
:
}
prefs
[
name
]
=
{
value
:
value
hasUserValue
:
Services
.
prefs
.
prefHasUserValue
(
name
)
}
;
}
catch
(
e
)
{
}
}
)
;
return
prefs
;
}
setBoolPref
:
function
(
name
value
)
{
Services
.
prefs
.
setBoolPref
(
name
value
)
;
Services
.
prefs
.
savePrefFile
(
null
)
;
}
setCharPref
:
function
(
name
value
)
{
Services
.
prefs
.
setCharPref
(
name
value
)
;
Services
.
prefs
.
savePrefFile
(
null
)
;
}
setIntPref
:
function
(
name
value
)
{
Services
.
prefs
.
setIntPref
(
name
value
)
;
Services
.
prefs
.
savePrefFile
(
null
)
;
}
clearUserPref
:
function
(
name
)
{
Services
.
prefs
.
clearUserPref
(
name
)
;
Services
.
prefs
.
savePrefFile
(
null
)
;
}
}
)
;
