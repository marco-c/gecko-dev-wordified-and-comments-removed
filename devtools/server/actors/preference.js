"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
preferenceSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
preference
"
)
;
const
{
PREF_STRING
PREF_INT
PREF_BOOL
}
=
Services
.
prefs
;
function
ensurePrefType
(
name
expectedType
)
{
const
type
=
Services
.
prefs
.
getPrefType
(
name
)
;
if
(
type
!
=
=
expectedType
)
{
throw
new
Error
(
preference
is
not
of
the
right
type
:
{
name
}
)
;
}
}
var
PreferenceActor
=
protocol
.
ActorClassWithSpec
(
preferenceSpec
{
getTraits
:
function
(
)
{
return
{
}
;
}
getBoolPref
:
function
(
name
)
{
ensurePrefType
(
name
PREF_BOOL
)
;
return
Services
.
prefs
.
getBoolPref
(
name
)
;
}
getCharPref
:
function
(
name
)
{
ensurePrefType
(
name
PREF_STRING
)
;
return
Services
.
prefs
.
getCharPref
(
name
)
;
}
getIntPref
:
function
(
name
)
{
ensurePrefType
(
name
PREF_INT
)
;
return
Services
.
prefs
.
getIntPref
(
name
)
;
}
getAllPrefs
:
function
(
)
{
const
prefs
=
{
}
;
Services
.
prefs
.
getChildList
(
"
"
)
.
forEach
(
function
(
name
index
)
{
try
{
let
value
;
switch
(
Services
.
prefs
.
getPrefType
(
name
)
)
{
case
PREF_STRING
:
value
=
Services
.
prefs
.
getCharPref
(
name
)
;
break
;
case
PREF_INT
:
value
=
Services
.
prefs
.
getIntPref
(
name
)
;
break
;
case
PREF_BOOL
:
value
=
Services
.
prefs
.
getBoolPref
(
name
)
;
break
;
default
:
}
prefs
[
name
]
=
{
value
:
value
hasUserValue
:
Services
.
prefs
.
prefHasUserValue
(
name
)
}
;
}
catch
(
e
)
{
}
}
)
;
return
prefs
;
}
setBoolPref
:
function
(
name
value
)
{
Services
.
prefs
.
setBoolPref
(
name
value
)
;
Services
.
prefs
.
savePrefFile
(
null
)
;
}
setCharPref
:
function
(
name
value
)
{
Services
.
prefs
.
setCharPref
(
name
value
)
;
Services
.
prefs
.
savePrefFile
(
null
)
;
}
setIntPref
:
function
(
name
value
)
{
Services
.
prefs
.
setIntPref
(
name
value
)
;
Services
.
prefs
.
savePrefFile
(
null
)
;
}
clearUserPref
:
function
(
name
)
{
Services
.
prefs
.
clearUserPref
(
name
)
;
Services
.
prefs
.
savePrefFile
(
null
)
;
}
}
)
;
exports
.
PreferenceActor
=
PreferenceActor
;
