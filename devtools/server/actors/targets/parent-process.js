"
use
strict
"
;
const
{
DevToolsServer
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
devtools
-
server
.
js
"
)
;
const
{
getChildDocShells
WindowGlobalTargetActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
window
-
global
.
js
"
)
;
const
makeDebugger
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
make
-
debugger
.
js
"
)
;
const
{
parentProcessTargetSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
targets
/
parent
-
process
.
js
"
)
;
class
ParentProcessTargetActor
extends
WindowGlobalTargetActor
{
constructor
(
conn
{
isTopLevelTarget
sessionContext
}
)
{
super
(
conn
{
isTopLevelTarget
sessionContext
customSpec
:
parentProcessTargetSpec
}
)
;
this
.
makeDebugger
=
makeDebugger
.
bind
(
null
{
findDebuggees
:
dbg
=
>
dbg
.
findAllGlobals
(
)
.
map
(
g
=
>
g
.
unsafeDereference
(
)
)
shouldAddNewGlobalAsDebuggee
:
(
)
=
>
true
}
)
;
this
.
watchNewDocShells
=
true
;
this
.
isRootActor
=
true
;
Services
.
obs
.
addObserver
(
this
"
chrome
-
webnavigation
-
create
"
)
;
Services
.
obs
.
addObserver
(
this
"
chrome
-
webnavigation
-
destroy
"
)
;
this
.
setDocShell
(
this
.
_getInitialDocShell
(
)
)
;
}
setDocShell
(
initialDocShell
)
{
super
.
setDocShell
(
initialDocShell
)
;
for
(
const
{
docShell
}
of
Services
.
ww
.
getWindowEnumerator
(
)
)
{
if
(
docShell
=
=
this
.
docShell
)
{
continue
;
}
this
.
_progressListener
.
watch
(
docShell
)
;
}
}
_getInitialDocShell
(
)
{
let
window
=
Services
.
wm
.
getMostRecentWindow
(
DevToolsServer
.
chromeWindowType
)
;
if
(
!
window
)
{
window
=
Services
.
wm
.
getMostRecentWindow
(
null
)
;
}
return
window
.
docShell
;
}
get
docShells
(
)
{
let
docShells
=
[
]
;
for
(
const
{
docShell
}
of
Services
.
ww
.
getWindowEnumerator
(
)
)
{
docShells
=
docShells
.
concat
(
getChildDocShells
(
docShell
)
)
;
}
return
docShells
;
}
observe
(
subject
topic
data
)
{
super
.
observe
(
subject
topic
data
)
;
if
(
this
.
isDestroyed
(
)
)
{
return
;
}
subject
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
if
(
topic
=
=
"
chrome
-
webnavigation
-
create
"
)
{
this
.
_onDocShellCreated
(
subject
)
;
}
else
if
(
topic
=
=
"
chrome
-
webnavigation
-
destroy
"
)
{
this
.
_onDocShellDestroy
(
subject
)
;
}
}
_detach
(
)
{
if
(
this
.
isDestroyed
(
)
)
{
return
false
;
}
Services
.
obs
.
removeObserver
(
this
"
chrome
-
webnavigation
-
create
"
)
;
Services
.
obs
.
removeObserver
(
this
"
chrome
-
webnavigation
-
destroy
"
)
;
for
(
const
{
docShell
}
of
Services
.
ww
.
getWindowEnumerator
(
)
)
{
if
(
docShell
=
=
this
.
docShell
)
{
continue
;
}
this
.
_progressListener
.
unwatch
(
docShell
)
;
}
return
super
.
_detach
(
)
;
}
}
exports
.
ParentProcessTargetActor
=
ParentProcessTargetActor
;
