"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
TargetActorRegistry
"
]
;
const
windowGlobalTargetActors
=
new
Set
(
)
;
let
xpcShellTargetActor
=
null
;
var
TargetActorRegistry
=
{
registerTargetActor
(
targetActor
)
{
windowGlobalTargetActors
.
add
(
targetActor
)
;
}
unregisterTargetActor
(
targetActor
)
{
windowGlobalTargetActors
.
delete
(
targetActor
)
;
}
registerXpcShellTargetActor
(
targetActor
)
{
xpcShellTargetActor
=
targetActor
;
}
unregisterXpcShellTargetActor
(
targetActor
)
{
xpcShellTargetActor
=
null
;
}
getTopLevelTargetActorForContext
(
sessionContext
connectionPrefix
)
{
if
(
sessionContext
.
type
=
=
"
all
"
)
{
if
(
Services
.
appinfo
.
processType
=
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
if
(
xpcShellTargetActor
)
{
return
xpcShellTargetActor
;
}
const
actors
=
this
.
getTargetActors
(
sessionContext
connectionPrefix
)
;
return
actors
[
0
]
;
}
return
null
;
}
else
if
(
sessionContext
.
type
=
=
"
browser
-
element
"
|
|
sessionContext
.
type
=
=
"
webextension
"
)
{
const
actors
=
this
.
getTargetActors
(
sessionContext
connectionPrefix
)
;
return
actors
.
find
(
actor
=
>
{
return
actor
.
isTopLevelTarget
;
}
)
;
}
throw
new
Error
(
"
Unsupported
session
context
type
:
"
+
sessionContext
.
type
)
;
}
getTargetActors
(
sessionContext
connectionPrefix
)
{
const
actors
=
[
]
;
for
(
const
actor
of
windowGlobalTargetActors
)
{
const
isMatchingPrefix
=
actor
.
actorID
.
startsWith
(
connectionPrefix
)
;
const
isMatchingContext
=
(
sessionContext
.
type
=
=
"
all
"
&
&
actor
.
typeName
=
=
=
"
parentProcessTarget
"
)
|
|
(
sessionContext
.
type
=
=
"
browser
-
element
"
&
&
(
actor
.
browserId
=
=
sessionContext
.
browserId
|
|
actor
.
openerBrowserId
=
=
sessionContext
.
browserId
)
)
|
|
(
sessionContext
.
type
=
=
"
webextension
"
&
&
actor
.
addonId
=
=
sessionContext
.
addonId
)
;
if
(
isMatchingPrefix
&
&
isMatchingContext
)
{
actors
.
push
(
actor
)
;
}
}
return
actors
;
}
getTargetActorsCountForBrowserElement
(
browserId
)
{
let
count
=
0
;
for
(
const
actor
of
windowGlobalTargetActors
)
{
if
(
actor
.
browserId
=
=
browserId
)
{
count
+
+
;
}
}
return
count
;
}
}
;
