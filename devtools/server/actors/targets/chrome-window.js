"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
BrowsingContextTargetActor
browsingContextTargetPrototype
}
=
require
(
"
devtools
/
server
/
actors
/
targets
/
browsing
-
context
"
)
;
const
{
extend
}
=
require
(
"
devtools
/
shared
/
extend
"
)
;
const
{
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
chromeWindowTargetSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
targets
/
chrome
-
window
"
)
;
const
chromeWindowTargetPrototype
=
extend
(
{
}
browsingContextTargetPrototype
)
;
chromeWindowTargetPrototype
.
initialize
=
function
(
connection
window
)
{
BrowsingContextTargetActor
.
prototype
.
initialize
.
call
(
this
connection
)
;
const
docShell
=
window
.
docShell
;
Object
.
defineProperty
(
this
"
docShell
"
{
value
:
docShell
configurable
:
true
}
)
;
}
;
chromeWindowTargetPrototype
.
isRootActor
=
true
;
chromeWindowTargetPrototype
.
observe
=
function
(
subject
topic
data
)
{
BrowsingContextTargetActor
.
prototype
.
observe
.
call
(
this
subject
topic
data
)
;
if
(
!
this
.
attached
)
{
return
;
}
if
(
topic
=
=
"
chrome
-
webnavigation
-
destroy
"
)
{
this
.
_onDocShellDestroy
(
subject
)
;
}
}
;
chromeWindowTargetPrototype
.
_attach
=
function
(
)
{
if
(
this
.
attached
)
{
return
false
;
}
BrowsingContextTargetActor
.
prototype
.
_attach
.
call
(
this
)
;
if
(
this
.
docShell
.
itemType
=
=
Ci
.
nsIDocShellTreeItem
.
typeChrome
)
{
Services
.
obs
.
addObserver
(
this
"
chrome
-
webnavigation
-
destroy
"
)
;
}
return
true
;
}
;
chromeWindowTargetPrototype
.
_detach
=
function
(
)
{
if
(
!
this
.
attached
)
{
return
false
;
}
if
(
this
.
docShell
.
itemType
=
=
Ci
.
nsIDocShellTreeItem
.
typeChrome
)
{
Services
.
obs
.
removeObserver
(
this
"
chrome
-
webnavigation
-
destroy
"
)
;
}
BrowsingContextTargetActor
.
prototype
.
_detach
.
call
(
this
)
;
return
true
;
}
;
exports
.
ChromeWindowTargetActor
=
ActorClassWithSpec
(
chromeWindowTargetSpec
chromeWindowTargetPrototype
)
;
