"
use
strict
"
;
const
{
connectToFrame
}
=
require
(
"
devtools
/
server
/
connectors
/
frame
-
connector
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
loader
.
lazyImporter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
const
proxySpec
=
protocol
.
generateActorSpec
(
{
typeName
:
"
frameTargetProxy
"
methods
:
{
}
events
:
{
}
}
)
;
exports
.
FrameTargetActorProxy
=
protocol
.
ActorClassWithSpec
(
proxySpec
{
initialize
:
function
(
conn
browser
options
=
{
}
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
_conn
=
conn
;
this
.
_browser
=
browser
;
this
.
_form
=
null
;
this
.
exited
=
false
;
this
.
options
=
options
;
}
async
connect
(
)
{
const
onDestroy
=
(
)
=
>
{
if
(
this
.
_deferredUpdate
)
{
this
.
_deferredUpdate
.
reject
(
{
error
:
"
tabDestroyed
"
message
:
"
Tab
destroyed
while
performing
a
FrameTargetActorProxy
update
"
}
)
;
}
this
.
exit
(
)
;
}
;
await
this
.
_unzombifyIfNeeded
(
)
;
const
connect
=
connectToFrame
(
this
.
_conn
this
.
_browser
onDestroy
)
;
const
form
=
await
connect
;
this
.
_form
=
form
;
if
(
this
.
options
.
favicons
)
{
this
.
_form
.
favicon
=
await
this
.
getFaviconData
(
)
;
}
return
this
;
}
get
_tabbrowser
(
)
{
if
(
this
.
_browser
&
&
typeof
this
.
_browser
.
getTabBrowser
=
=
"
function
"
)
{
return
this
.
_browser
.
getTabBrowser
(
)
;
}
return
null
;
}
get
_mm
(
)
{
return
(
this
.
_browser
.
messageManager
|
|
this
.
_browser
.
frameLoader
.
messageManager
)
;
}
async
getFaviconData
(
)
{
try
{
const
{
data
}
=
await
PlacesUtils
.
promiseFaviconData
(
this
.
_form
.
url
)
;
return
data
;
}
catch
(
e
)
{
return
null
;
}
}
async
update
(
options
=
{
}
)
{
this
.
options
=
options
;
if
(
this
.
exited
)
{
return
this
.
connect
(
)
;
}
await
this
.
_unzombifyIfNeeded
(
)
;
const
form
=
await
new
Promise
(
resolve
=
>
{
const
onFormUpdate
=
msg
=
>
{
if
(
this
.
_form
.
actor
!
=
msg
.
json
.
actor
)
{
return
;
}
this
.
_mm
.
removeMessageListener
(
"
debug
:
form
"
onFormUpdate
)
;
resolve
(
msg
.
json
)
;
}
;
this
.
_mm
.
addMessageListener
(
"
debug
:
form
"
onFormUpdate
)
;
this
.
_mm
.
sendAsyncMessage
(
"
debug
:
form
"
)
;
}
)
;
this
.
_form
=
form
;
if
(
this
.
options
.
favicons
)
{
this
.
_form
.
favicon
=
await
this
.
getFaviconData
(
)
;
}
return
this
;
}
_isZombieTab
(
)
{
if
(
this
.
_browser
.
hasAttribute
(
"
pending
"
)
)
{
return
true
;
}
const
tabbrowser
=
this
.
_tabbrowser
;
const
tab
=
tabbrowser
?
tabbrowser
.
getTabForBrowser
(
this
.
_browser
)
:
null
;
return
tab
&
&
tab
.
hasAttribute
&
&
tab
.
hasAttribute
(
"
pending
"
)
;
}
_getZombieTabTitle
(
)
{
if
(
this
.
_browser
&
&
this
.
_browser
.
__SS_restore
)
{
const
sessionStore
=
this
.
_browser
.
__SS_data
;
const
entry
=
sessionStore
.
entries
[
sessionStore
.
index
-
1
]
;
return
entry
.
title
;
}
if
(
this
.
_tabbrowser
)
{
const
tab
=
this
.
_tabbrowser
.
getTabForBrowser
(
this
.
_browser
)
;
if
(
tab
)
{
return
tab
.
label
;
}
}
return
null
;
}
_getZombieTabUrl
(
)
{
if
(
this
.
_browser
&
&
this
.
_browser
.
__SS_restore
)
{
const
sessionStore
=
this
.
_browser
.
__SS_data
;
const
entry
=
sessionStore
.
entries
[
sessionStore
.
index
-
1
]
;
return
entry
.
url
;
}
return
null
;
}
async
_unzombifyIfNeeded
(
)
{
if
(
!
this
.
options
.
forceUnzombify
|
|
!
this
.
_isZombieTab
(
)
)
{
return
;
}
const
browserApp
=
this
.
_browser
?
this
.
_browser
.
ownerGlobal
.
BrowserApp
:
null
;
if
(
browserApp
)
{
const
waitForUnzombify
=
new
Promise
(
resolve
=
>
{
this
.
_browser
.
addEventListener
(
"
DOMContentLoaded
"
resolve
{
capture
:
true
once
:
true
}
)
;
}
)
;
const
tab
=
browserApp
.
getTabForBrowser
(
this
.
_browser
)
;
tab
.
unzombify
(
)
;
await
waitForUnzombify
;
}
}
form
(
)
{
const
form
=
Object
.
assign
(
{
}
this
.
_form
)
;
if
(
this
.
_isZombieTab
(
)
)
{
form
.
title
=
this
.
_getZombieTabTitle
(
)
|
|
form
.
title
;
form
.
url
=
this
.
_getZombieTabUrl
(
)
|
|
form
.
url
;
}
return
form
;
}
exit
(
)
{
this
.
_browser
=
null
;
this
.
_form
=
null
;
this
.
exited
=
true
;
}
}
)
;
