"
use
strict
"
;
const
{
workerTargetSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
targets
/
worker
.
js
"
)
;
const
{
WebConsoleActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
.
js
"
)
;
const
{
ThreadActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
thread
.
js
"
)
;
const
{
TracerActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
tracer
.
js
"
)
;
const
Targets
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
index
.
js
"
)
;
const
makeDebuggerUtil
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
make
-
debugger
.
js
"
)
;
const
{
SourcesManager
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
sources
-
manager
.
js
"
)
;
const
{
BaseTargetActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
base
-
target
-
actor
.
js
"
)
;
class
WorkerTargetActor
extends
BaseTargetActor
{
constructor
(
conn
workerGlobal
workerDebuggerData
sessionContext
)
{
super
(
conn
Targets
.
TYPES
.
WORKER
workerTargetSpec
)
;
this
.
workerGlobal
=
workerGlobal
;
this
.
sessionContext
=
sessionContext
;
if
(
workerDebuggerData
.
type
=
=
2
)
{
this
.
targetType
=
Targets
.
TYPES
.
SERVICE_WORKER
;
}
else
if
(
workerDebuggerData
.
type
=
=
1
)
{
this
.
targetType
=
Targets
.
TYPES
.
SHARED_WORKER
;
}
this
.
_workerDebuggerData
=
workerDebuggerData
;
this
.
_sourcesManager
=
null
;
this
.
workerConsoleApiMessagesDispatchedToMainThread
=
workerDebuggerData
.
workerConsoleApiMessagesDispatchedToMainThread
;
this
.
makeDebugger
=
makeDebuggerUtil
.
bind
(
null
{
findDebuggees
:
(
)
=
>
{
return
[
workerGlobal
]
;
}
shouldAddNewGlobalAsDebuggee
:
(
)
=
>
true
}
)
;
this
.
threadActor
=
new
ThreadActor
(
this
this
.
workerGlobal
)
;
this
.
_consoleActor
=
new
WebConsoleActor
(
this
.
conn
this
)
;
this
.
tracerActor
=
new
TracerActor
(
this
.
conn
this
)
;
this
.
manage
(
this
.
threadActor
)
;
this
.
manage
(
this
.
_consoleActor
)
;
this
.
manage
(
this
.
tracerActor
)
;
}
get
workerUrl
(
)
{
return
this
.
_workerDebuggerData
.
url
;
}
form
(
)
{
return
{
actor
:
this
.
actorID
consoleActor
:
this
.
_consoleActor
?
.
actorID
threadActor
:
this
.
threadActor
?
.
actorID
tracerActor
:
this
.
tracerActor
?
.
actorID
id
:
this
.
_workerDebuggerData
.
id
type
:
this
.
_workerDebuggerData
.
type
url
:
this
.
_workerDebuggerData
.
url
traits
:
{
supportsTopLevelTargetFlag
:
false
}
}
;
}
get
dbg
(
)
{
if
(
!
this
.
_dbg
)
{
this
.
_dbg
=
this
.
makeDebugger
(
)
;
}
return
this
.
_dbg
;
}
get
sourcesManager
(
)
{
if
(
this
.
_sourcesManager
=
=
=
null
)
{
this
.
_sourcesManager
=
new
SourcesManager
(
this
.
threadActor
)
;
}
return
this
.
_sourcesManager
;
}
onThreadAttached
(
)
{
this
.
emit
(
"
worker
-
thread
-
attached
"
)
;
}
destroy
(
)
{
super
.
destroy
(
)
;
if
(
this
.
_sourcesManager
)
{
this
.
_sourcesManager
.
destroy
(
)
;
this
.
_sourcesManager
=
null
;
}
this
.
workerGlobal
=
null
;
this
.
_dbg
=
null
;
this
.
_consoleActor
=
null
;
this
.
threadActor
=
null
;
}
}
exports
.
WorkerTargetActor
=
WorkerTargetActor
;
