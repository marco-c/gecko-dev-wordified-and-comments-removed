"
use
strict
"
;
const
{
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
Resources
=
require
(
"
devtools
/
server
/
actors
/
resources
/
index
"
)
;
const
{
WatchedDataHelpers
}
=
require
(
"
devtools
/
server
/
actors
/
watcher
/
WatchedDataHelpers
.
jsm
"
)
;
const
{
STATES
:
THREAD_STATES
}
=
require
(
"
devtools
/
server
/
actors
/
thread
"
)
;
const
{
RESOURCES
BREAKPOINTS
TARGET_CONFIGURATION
THREAD_CONFIGURATION
XHR_BREAKPOINTS
}
=
WatchedDataHelpers
.
SUPPORTED_DATA
;
loader
.
lazyRequireGetter
(
this
"
StyleSheetsManager
"
"
devtools
/
server
/
actors
/
utils
/
stylesheets
-
manager
"
true
)
;
module
.
exports
=
function
(
targetType
targetActorSpec
implementation
)
{
const
proto
=
{
targetType
async
addWatcherDataEntry
(
type
entries
)
{
if
(
type
=
=
RESOURCES
)
{
await
this
.
_watchTargetResources
(
entries
)
;
}
else
if
(
type
=
=
BREAKPOINTS
)
{
if
(
typeof
this
.
attach
=
=
"
function
"
)
{
this
.
attach
(
)
;
}
const
isTargetCreation
=
this
.
threadActor
.
state
=
=
THREAD_STATES
.
DETACHED
;
if
(
isTargetCreation
&
&
!
this
.
targetType
.
endsWith
(
"
worker
"
)
)
{
await
this
.
threadActor
.
attach
(
{
breakpoints
:
entries
}
)
;
}
else
{
await
Promise
.
all
(
entries
.
map
(
(
{
location
options
}
)
=
>
this
.
threadActor
.
setBreakpoint
(
location
options
)
)
)
;
}
}
else
if
(
type
=
=
TARGET_CONFIGURATION
)
{
if
(
typeof
this
.
updateTargetConfiguration
=
=
"
function
"
)
{
const
options
=
{
}
;
for
(
const
{
key
value
}
of
entries
)
{
options
[
key
]
=
value
;
}
this
.
updateTargetConfiguration
(
options
)
;
}
}
else
if
(
type
=
=
THREAD_CONFIGURATION
)
{
if
(
typeof
this
.
attach
=
=
"
function
"
)
{
this
.
attach
(
)
;
}
const
threadOptions
=
{
}
;
for
(
const
{
key
value
}
of
entries
)
{
threadOptions
[
key
]
=
value
;
}
if
(
!
this
.
targetType
.
endsWith
(
"
worker
"
)
&
&
this
.
threadActor
.
state
=
=
THREAD_STATES
.
DETACHED
)
{
await
this
.
threadActor
.
attach
(
threadOptions
)
;
}
else
{
await
this
.
threadActor
.
reconfigure
(
threadOptions
)
;
}
}
else
if
(
type
=
=
XHR_BREAKPOINTS
)
{
if
(
typeof
this
.
attach
=
=
"
function
"
)
{
this
.
attach
(
)
;
}
if
(
this
.
threadActor
.
state
=
=
THREAD_STATES
.
DETACHED
&
&
!
this
.
targetType
.
endsWith
(
"
worker
"
)
)
{
await
this
.
threadActor
.
attach
(
)
;
}
await
Promise
.
all
(
entries
.
map
(
(
{
path
method
}
)
=
>
this
.
threadActor
.
setXHRBreakpoint
(
path
method
)
)
)
;
}
}
removeWatcherDataEntry
(
type
entries
)
{
if
(
type
=
=
RESOURCES
)
{
return
this
.
_unwatchTargetResources
(
entries
)
;
}
else
if
(
type
=
=
BREAKPOINTS
)
{
for
(
const
{
location
}
of
entries
)
{
this
.
threadActor
.
removeBreakpoint
(
location
)
;
}
}
else
if
(
type
=
=
TARGET_CONFIGURATION
|
|
type
=
=
THREAD_CONFIGURATION
)
{
}
else
if
(
type
=
=
XHR_BREAKPOINTS
)
{
for
(
const
{
path
method
}
of
entries
)
{
this
.
threadActor
.
removeXHRBreakpoint
(
path
method
)
;
}
}
return
Promise
.
resolve
(
)
;
}
_watchTargetResources
(
resourceTypes
)
{
return
Resources
.
watchResources
(
this
resourceTypes
)
;
}
_unwatchTargetResources
(
resourceTypes
)
{
return
Resources
.
unwatchResources
(
this
resourceTypes
)
;
}
notifyResourceAvailable
(
resources
)
{
this
.
_emitResourcesForm
(
"
resource
-
available
-
form
"
resources
)
;
}
notifyResourceDestroyed
(
resources
)
{
this
.
_emitResourcesForm
(
"
resource
-
destroyed
-
form
"
resources
)
;
}
notifyResourceUpdated
(
resources
)
{
this
.
_emitResourcesForm
(
"
resource
-
updated
-
form
"
resources
)
;
}
_emitResourcesForm
(
name
resources
)
{
if
(
resources
.
length
=
=
=
0
|
|
this
.
isDestroyed
(
)
)
{
return
;
}
this
.
emit
(
name
resources
)
;
}
getStyleSheetManager
(
)
{
if
(
!
this
.
_styleSheetManager
)
{
this
.
_styleSheetManager
=
new
StyleSheetsManager
(
this
)
;
}
return
this
.
_styleSheetManager
;
}
destroy
(
)
{
if
(
this
.
_styleSheetManager
)
{
this
.
_styleSheetManager
.
destroy
(
)
;
this
.
_styleSheetManager
=
null
;
}
implementation
.
destroy
.
call
(
this
)
;
}
}
;
Object
.
defineProperties
(
proto
Object
.
getOwnPropertyDescriptors
(
implementation
)
)
;
proto
.
initialize
=
function
(
)
{
this
.
notifyResourceAvailable
=
this
.
notifyResourceAvailable
.
bind
(
this
)
;
this
.
notifyResourceDestroyed
=
this
.
notifyResourceDestroyed
.
bind
(
this
)
;
this
.
notifyResourceUpdated
=
this
.
notifyResourceUpdated
.
bind
(
this
)
;
if
(
typeof
implementation
.
initialize
=
=
"
function
"
)
{
implementation
.
initialize
.
apply
(
this
arguments
)
;
}
}
;
return
ActorClassWithSpec
(
targetActorSpec
proto
)
;
}
;
