"
use
strict
"
;
const
{
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
Resources
=
require
(
"
devtools
/
server
/
actors
/
resources
/
index
"
)
;
module
.
exports
=
function
(
targetType
targetActorSpec
implementation
)
{
const
proto
=
{
targetType
addWatcherDataEntry
(
type
entries
)
{
if
(
type
=
=
"
resources
"
)
{
return
this
.
_watchTargetResources
(
entries
)
;
}
return
Promise
.
resolve
(
)
;
}
removeWatcherDataEntry
(
type
entries
)
{
if
(
type
=
=
"
resources
"
)
{
return
this
.
_unwatchTargetResources
(
entries
)
;
}
return
Promise
.
resolve
(
)
;
}
_watchTargetResources
(
resourceTypes
)
{
return
Resources
.
watchResources
(
this
resourceTypes
)
;
}
_unwatchTargetResources
(
resourceTypes
)
{
return
Resources
.
unwatchResources
(
this
resourceTypes
)
;
}
notifyResourceAvailable
(
resources
)
{
this
.
_emitResourcesForm
(
"
resource
-
available
-
form
"
resources
)
;
}
notifyResourceDestroyed
(
resources
)
{
this
.
_emitResourcesForm
(
"
resource
-
destroyed
-
form
"
resources
)
;
}
notifyResourceUpdated
(
resources
)
{
this
.
_emitResourcesForm
(
"
resource
-
updated
-
form
"
resources
)
;
}
_emitResourcesForm
(
name
resources
)
{
if
(
resources
.
length
=
=
=
0
|
|
this
.
isDestroyed
(
)
)
{
return
;
}
this
.
emit
(
name
resources
)
;
}
}
;
Object
.
defineProperties
(
proto
Object
.
getOwnPropertyDescriptors
(
implementation
)
)
;
proto
.
initialize
=
function
(
)
{
this
.
notifyResourceAvailable
=
this
.
notifyResourceAvailable
.
bind
(
this
)
;
this
.
notifyResourceDestroyed
=
this
.
notifyResourceDestroyed
.
bind
(
this
)
;
this
.
notifyResourceUpdated
=
this
.
notifyResourceUpdated
.
bind
(
this
)
;
if
(
typeof
implementation
.
initialize
=
=
"
function
"
)
{
implementation
.
initialize
.
apply
(
this
arguments
)
;
}
}
;
return
ActorClassWithSpec
(
targetActorSpec
proto
)
;
}
;
