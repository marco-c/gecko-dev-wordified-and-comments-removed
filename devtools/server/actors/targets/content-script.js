"
use
strict
"
;
const
{
ThreadActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
thread
.
js
"
)
;
const
{
WebConsoleActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
.
js
"
)
;
const
makeDebugger
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
make
-
debugger
.
js
"
)
;
const
{
assert
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
{
SourcesManager
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
sources
-
manager
.
js
"
)
;
const
{
contentScriptTargetSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
targets
/
content
-
script
.
js
"
)
;
const
Targets
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
index
.
js
"
)
;
const
Resources
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
resources
/
index
.
js
"
)
;
const
{
BaseTargetActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
base
-
target
-
actor
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
TracerActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
tracer
.
js
"
true
)
;
class
WebExtensionContentScriptTargetActor
extends
BaseTargetActor
{
constructor
(
conn
{
sessionContext
contentScriptSandbox
}
=
{
}
)
{
super
(
conn
Targets
.
TYPES
.
CONTENT_SCRIPT
contentScriptTargetSpec
)
;
this
.
threadActor
=
null
;
this
.
sessionContext
=
sessionContext
;
this
.
contentScriptSandbox
=
contentScriptSandbox
;
const
metadata
=
Cu
.
getSandboxMetadata
(
contentScriptSandbox
)
;
this
.
addonId
=
metadata
.
addonId
;
this
.
innerWindowId
=
metadata
[
"
inner
-
window
-
id
"
]
;
this
.
makeDebugger
=
makeDebugger
.
bind
(
null
{
findDebuggees
:
_dbg
=
>
[
this
.
contentScriptSandbox
]
shouldAddNewGlobalAsDebuggee
:
(
)
=
>
false
}
)
;
}
get
isRootActor
(
)
{
return
false
;
}
get
targetGlobal
(
)
{
return
this
.
contentScriptSandbox
;
}
get
sourcesManager
(
)
{
if
(
!
this
.
_sourcesManager
)
{
assert
(
this
.
threadActor
"
threadActor
should
exist
when
creating
SourcesManager
.
"
)
;
this
.
_sourcesManager
=
new
SourcesManager
(
this
.
threadActor
)
;
}
return
this
.
_sourcesManager
;
}
get
dbg
(
)
{
if
(
!
this
.
_dbg
)
{
this
.
_dbg
=
this
.
makeDebugger
(
)
;
}
return
this
.
_dbg
;
}
form
(
)
{
if
(
!
this
.
_consoleActor
)
{
this
.
_consoleActor
=
new
WebConsoleActor
(
this
.
conn
this
)
;
this
.
manage
(
this
.
_consoleActor
)
;
}
if
(
!
this
.
threadActor
)
{
this
.
threadActor
=
new
ThreadActor
(
this
)
;
this
.
manage
(
this
.
threadActor
)
;
}
if
(
!
this
.
tracerActor
)
{
this
.
tracerActor
=
new
TracerActor
(
this
.
conn
this
)
;
this
.
manage
(
this
.
tracerActor
)
;
}
const
policy
=
WebExtensionPolicy
.
getByID
(
this
.
addonId
)
;
return
{
actor
:
this
.
actorID
addonId
:
this
.
addonId
targetType
:
this
.
targetType
title
:
policy
.
name
innerWindowId
:
this
.
innerWindowId
consoleActor
:
this
.
_consoleActor
.
actorID
threadActor
:
this
.
threadActor
.
actorID
tracerActor
:
this
.
tracerActor
.
actorID
traits
:
{
networkMonitor
:
false
supportsTopLevelTargetFlag
:
false
}
}
;
}
destroy
(
{
isModeSwitching
}
=
{
}
)
{
if
(
this
.
destroying
)
{
return
;
}
this
.
destroying
=
true
;
Resources
.
unwatchAllResources
(
this
)
;
this
.
emit
(
"
destroyed
"
{
isModeSwitching
}
)
;
super
.
destroy
(
)
;
if
(
this
.
threadActor
)
{
this
.
threadActor
=
null
;
}
if
(
this
.
_sourcesManager
)
{
this
.
_sourcesManager
.
destroy
(
)
;
this
.
_sourcesManager
=
null
;
}
if
(
this
.
_dbg
)
{
this
.
_dbg
.
disable
(
)
;
this
.
_dbg
=
null
;
}
}
}
exports
.
WebExtensionContentScriptTargetActor
=
WebExtensionContentScriptTargetActor
;
