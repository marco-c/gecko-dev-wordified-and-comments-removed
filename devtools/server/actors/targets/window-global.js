"
use
strict
"
;
var
{
Ci
Cu
Cr
Cc
}
=
require
(
"
chrome
"
)
;
var
Services
=
require
(
"
Services
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
var
{
ActorRegistry
}
=
require
(
"
devtools
/
server
/
actors
/
utils
/
actor
-
registry
"
)
;
var
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
var
{
assert
}
=
DevToolsUtils
;
var
{
SourcesManager
}
=
require
(
"
devtools
/
server
/
actors
/
utils
/
sources
-
manager
"
)
;
var
makeDebugger
=
require
(
"
devtools
/
server
/
actors
/
utils
/
make
-
debugger
"
)
;
const
InspectorUtils
=
require
(
"
InspectorUtils
"
)
;
const
Targets
=
require
(
"
devtools
/
server
/
actors
/
targets
/
index
"
)
;
const
{
TargetActorRegistry
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
target
-
actor
-
registry
.
jsm
"
)
;
const
EXTENSION_CONTENT_JSM
=
"
resource
:
/
/
gre
/
modules
/
ExtensionContent
.
jsm
"
;
const
{
Actor
Pool
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
LazyPool
createExtraActors
}
=
require
(
"
devtools
/
shared
/
protocol
/
lazy
-
pool
"
)
;
const
{
windowGlobalTargetSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
targets
/
window
-
global
"
)
;
const
Resources
=
require
(
"
devtools
/
server
/
actors
/
resources
/
index
"
)
;
const
TargetActorMixin
=
require
(
"
devtools
/
server
/
actors
/
targets
/
target
-
actor
-
mixin
"
)
;
loader
.
lazyRequireGetter
(
this
[
"
ThreadActor
"
"
unwrapDebuggerObjectGlobal
"
]
"
devtools
/
server
/
actors
/
thread
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
WorkerDescriptorActorList
"
"
devtools
/
server
/
actors
/
worker
/
worker
-
descriptor
-
actor
-
list
"
true
)
;
loader
.
lazyImporter
(
this
"
ExtensionContent
"
EXTENSION_CONTENT_JSM
)
;
loader
.
lazyRequireGetter
(
this
[
"
StyleSheetActor
"
"
getSheetText
"
]
"
devtools
/
server
/
actors
/
style
-
sheet
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
TouchSimulator
"
"
devtools
/
server
/
actors
/
emulation
/
touch
-
simulator
"
true
)
;
function
getWindowID
(
window
)
{
return
window
.
windowGlobalChild
.
innerWindowId
;
}
function
getDocShellChromeEventHandler
(
docShell
)
{
let
handler
=
docShell
.
chromeEventHandler
;
if
(
!
handler
)
{
try
{
handler
=
docShell
.
domWindow
;
}
catch
(
e
)
{
}
}
return
handler
;
}
function
getChildDocShells
(
parentDocShell
)
{
return
parentDocShell
.
browsingContext
.
getAllBrowsingContextsInSubtree
(
)
.
filter
(
browsingContext
=
>
{
return
browsingContext
.
docShell
;
}
)
.
map
(
browsingContext
=
>
{
return
browsingContext
.
docShell
;
}
)
;
}
exports
.
getChildDocShells
=
getChildDocShells
;
function
getInnerId
(
window
)
{
return
window
.
windowGlobalChild
.
innerWindowId
;
}
const
windowGlobalTargetPrototype
=
{
initialize
:
function
(
connection
{
docShell
followWindowGlobalLifeCycle
isTopLevelTarget
ignoreSubFrames
}
)
{
Actor
.
prototype
.
initialize
.
call
(
this
connection
)
;
if
(
!
docShell
)
{
throw
new
Error
(
"
A
docShell
should
be
provided
as
constructor
argument
of
WindowGlobalTargetActor
"
)
;
}
this
.
docShell
=
docShell
;
this
.
followWindowGlobalLifeCycle
=
followWindowGlobalLifeCycle
;
this
.
isTopLevelTarget
=
!
!
isTopLevelTarget
;
this
.
ignoreSubFrames
=
ignoreSubFrames
;
this
.
_extraActors
=
{
}
;
this
.
_sourcesManager
=
null
;
this
.
_styleSheetActors
=
new
Map
(
)
;
this
.
_shouldAddNewGlobalAsDebuggee
=
this
.
_shouldAddNewGlobalAsDebuggee
.
bind
(
this
)
;
this
.
makeDebugger
=
makeDebugger
.
bind
(
null
{
findDebuggees
:
(
)
=
>
{
return
this
.
windows
.
concat
(
this
.
webextensionsContentScriptGlobals
)
;
}
shouldAddNewGlobalAsDebuggee
:
this
.
_shouldAddNewGlobalAsDebuggee
}
)
;
this
.
watchNewDocShells
=
false
;
this
.
_isNewPerfPanelEnabled
=
false
;
this
.
_workerDescriptorActorList
=
null
;
this
.
_workerDescriptorActorPool
=
null
;
this
.
_onWorkerDescriptorActorListChanged
=
this
.
_onWorkerDescriptorActorListChanged
.
bind
(
this
)
;
this
.
_onConsoleApiProfilerEvent
=
this
.
_onConsoleApiProfilerEvent
.
bind
(
this
)
;
Services
.
obs
.
addObserver
(
this
.
_onConsoleApiProfilerEvent
"
console
-
api
-
profiler
"
)
;
TargetActorRegistry
.
registerTargetActor
(
this
)
;
}
consoleAPIListenerOptions
:
{
}
_allowSource
(
)
{
return
true
;
}
get
attached
(
)
{
return
!
!
this
.
_attached
;
}
get
dbg
(
)
{
if
(
!
this
.
_dbg
)
{
this
.
_dbg
=
this
.
makeDebugger
(
)
;
}
return
this
.
_dbg
;
}
get
_consoleActor
(
)
{
if
(
this
.
isDestroyed
(
)
)
{
return
null
;
}
const
form
=
this
.
form
(
)
;
return
this
.
conn
.
_getOrCreateActor
(
form
.
consoleActor
)
;
}
get
_memoryActor
(
)
{
if
(
this
.
isDestroyed
(
)
)
{
return
null
;
}
const
form
=
this
.
form
(
)
;
return
this
.
conn
.
_getOrCreateActor
(
form
.
memoryActor
)
;
}
_targetScopedActorPool
:
null
get
chromeEventHandler
(
)
{
return
getDocShellChromeEventHandler
(
this
.
docShell
)
;
}
get
messageManager
(
)
{
try
{
return
this
.
docShell
.
messageManager
;
}
catch
(
e
)
{
return
null
;
}
}
get
docShells
(
)
{
if
(
this
.
ignoreSubFrames
)
{
return
[
this
.
docShell
]
;
}
return
getChildDocShells
(
this
.
docShell
)
;
}
get
window
(
)
{
return
this
.
docShell
&
&
this
.
docShell
.
domWindow
;
}
get
outerWindowID
(
)
{
if
(
this
.
docShell
)
{
return
this
.
docShell
.
outerWindowID
;
}
return
null
;
}
get
browsingContext
(
)
{
return
this
.
docShell
?
.
browsingContext
;
}
get
browsingContextID
(
)
{
return
this
.
browsingContext
?
.
id
;
}
get
browserId
(
)
{
return
this
.
browsingContext
?
.
browserId
;
}
get
webextensionsContentScriptGlobals
(
)
{
if
(
Cu
.
isModuleLoaded
(
EXTENSION_CONTENT_JSM
)
)
{
return
ExtensionContent
.
getContentScriptGlobals
(
this
.
window
)
;
}
return
[
]
;
}
get
windows
(
)
{
return
this
.
docShells
.
map
(
docShell
=
>
{
return
docShell
.
domWindow
;
}
)
;
}
get
originalDocShell
(
)
{
if
(
!
this
.
_originalWindow
)
{
return
this
.
docShell
;
}
return
this
.
_originalWindow
.
docShell
;
}
get
originalWindow
(
)
{
return
this
.
_originalWindow
|
|
this
.
window
;
}
get
webProgress
(
)
{
return
this
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
}
get
webNavigation
(
)
{
return
this
.
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
}
get
contentDocument
(
)
{
return
this
.
webNavigation
.
document
;
}
get
title
(
)
{
return
this
.
contentDocument
.
title
;
}
get
url
(
)
{
if
(
this
.
webNavigation
.
currentURI
)
{
return
this
.
webNavigation
.
currentURI
.
spec
;
}
return
null
;
}
get
sourcesManager
(
)
{
if
(
!
this
.
_sourcesManager
)
{
this
.
_sourcesManager
=
new
SourcesManager
(
this
.
threadActor
this
.
_allowSource
)
;
}
return
this
.
_sourcesManager
;
}
_createExtraActors
(
)
{
if
(
!
this
.
_targetScopedActorPool
)
{
this
.
_targetScopedActorPool
=
new
LazyPool
(
this
.
conn
)
;
}
return
createExtraActors
(
ActorRegistry
.
targetScopedActorFactories
this
.
_targetScopedActorPool
this
)
;
}
form
(
)
{
assert
(
!
this
.
isDestroyed
(
)
"
form
(
)
shouldn
'
t
be
called
on
destroyed
browser
actor
.
"
)
;
assert
(
this
.
actorID
"
Actor
should
have
an
actorID
.
"
)
;
const
innerWindowId
=
this
.
window
?
getInnerId
(
this
.
window
)
:
null
;
const
response
=
{
actor
:
this
.
actorID
browsingContextID
:
this
.
browsingContextID
followWindowGlobalLifeCycle
:
this
.
followWindowGlobalLifeCycle
innerWindowId
isTopLevelTarget
:
this
.
isTopLevelTarget
traits
:
{
isBrowsingContext
:
true
supportsTopLevelTargetFlag
:
true
frames
:
true
logInPage
:
true
watchpoints
:
true
navigation
:
true
}
}
;
if
(
!
this
.
docShell
.
isBeingDestroyed
(
)
)
{
response
.
title
=
this
.
title
;
response
.
url
=
this
.
url
;
response
.
outerWindowID
=
this
.
outerWindowID
;
}
const
actors
=
this
.
_createExtraActors
(
)
;
Object
.
assign
(
response
actors
)
;
if
(
this
.
threadActor
)
{
Object
.
assign
(
response
{
threadActor
:
this
.
threadActor
.
actorID
}
)
;
}
return
response
;
}
destroy
(
{
isTargetSwitching
=
false
}
=
{
}
)
{
if
(
this
.
isDestroyed
(
)
)
{
return
;
}
if
(
this
.
_attached
)
{
this
.
threadActor
.
_parentClosed
=
true
;
}
if
(
this
.
_touchSimulator
)
{
this
.
_touchSimulator
.
stop
(
)
;
this
.
_touchSimulator
=
null
;
}
this
.
_detach
(
{
isTargetSwitching
}
)
;
this
.
docShell
=
null
;
this
.
_extraActors
=
null
;
Services
.
obs
.
removeObserver
(
this
.
_onConsoleApiProfilerEvent
"
console
-
api
-
profiler
"
)
;
Actor
.
prototype
.
destroy
.
call
(
this
)
;
TargetActorRegistry
.
unregisterTargetActor
(
this
)
;
Resources
.
unwatchAllTargetResources
(
this
)
;
}
_shouldAddNewGlobalAsDebuggee
(
wrappedGlobal
)
{
const
global
=
unwrapDebuggerObjectGlobal
(
wrappedGlobal
)
;
if
(
!
global
)
{
return
false
;
}
let
metadata
=
{
}
;
let
id
=
"
"
;
try
{
id
=
getInnerId
(
this
.
window
)
;
metadata
=
Cu
.
getSandboxMetadata
(
global
)
;
}
catch
(
e
)
{
}
if
(
metadata
?
.
[
"
inner
-
window
-
id
"
]
&
&
metadata
[
"
inner
-
window
-
id
"
]
=
=
id
)
{
return
true
;
}
return
false
;
}
_attach
(
)
{
if
(
this
.
_attached
)
{
return
;
}
this
.
_createThreadActor
(
)
;
this
.
_progressListener
=
new
DebuggerProgressListener
(
this
)
;
this
.
_originalWindow
=
this
.
window
;
this
.
_docShellsObserved
=
false
;
DevToolsUtils
.
executeSoon
(
(
)
=
>
this
.
_watchDocshells
(
)
)
;
this
.
_attached
=
true
;
}
_watchDocshells
(
)
{
if
(
this
.
isDestroyed
(
)
)
{
return
;
}
Services
.
obs
.
addObserver
(
this
"
webnavigation
-
create
"
)
;
Services
.
obs
.
addObserver
(
this
"
webnavigation
-
destroy
"
)
;
this
.
_docShellsObserved
=
true
;
this
.
_progressListener
.
watch
(
this
.
docShell
)
;
this
.
_updateChildDocShells
(
)
;
}
_unwatchDocshells
(
)
{
if
(
this
.
_progressListener
)
{
this
.
_progressListener
.
destroy
(
)
;
this
.
_progressListener
=
null
;
this
.
_originalWindow
=
null
;
}
if
(
this
.
_docShellsObserved
)
{
Services
.
obs
.
removeObserver
(
this
"
webnavigation
-
create
"
)
;
Services
.
obs
.
removeObserver
(
this
"
webnavigation
-
destroy
"
)
;
this
.
_docShellsObserved
=
true
;
}
}
_unwatchDocShell
(
docShell
)
{
if
(
this
.
_progressListener
)
{
this
.
_progressListener
.
unwatch
(
docShell
)
;
}
}
switchToFrame
(
request
)
{
const
windowId
=
request
.
windowId
;
let
win
;
try
{
win
=
Services
.
wm
.
getOuterWindowWithId
(
windowId
)
;
}
catch
(
e
)
{
}
if
(
!
win
)
{
throw
{
error
:
"
noWindow
"
message
:
"
The
related
docshell
is
destroyed
or
not
found
"
}
;
}
else
if
(
win
=
=
this
.
window
)
{
return
{
}
;
}
DevToolsUtils
.
executeSoon
(
(
)
=
>
this
.
_changeTopLevelDocument
(
win
)
)
;
return
{
}
;
}
listFrames
(
request
)
{
const
windows
=
this
.
_docShellsToWindows
(
this
.
docShells
)
;
return
{
frames
:
windows
}
;
}
ensureWorkerDescriptorActorList
(
)
{
if
(
this
.
_workerDescriptorActorList
=
=
=
null
)
{
this
.
_workerDescriptorActorList
=
new
WorkerDescriptorActorList
(
this
.
conn
{
type
:
Ci
.
nsIWorkerDebugger
.
TYPE_DEDICATED
window
:
this
.
window
}
)
;
}
return
this
.
_workerDescriptorActorList
;
}
pauseWorkersUntilAttach
(
shouldPause
)
{
this
.
ensureWorkerDescriptorActorList
(
)
.
workerPauser
.
setPauseMatching
(
shouldPause
)
;
}
listWorkers
(
request
)
{
if
(
!
this
.
attached
)
{
throw
{
error
:
"
wrongState
"
}
;
}
return
this
.
ensureWorkerDescriptorActorList
(
)
.
getList
(
)
.
then
(
actors
=
>
{
const
pool
=
new
Pool
(
this
.
conn
"
worker
-
targets
"
)
;
for
(
const
actor
of
actors
)
{
pool
.
manage
(
actor
)
;
}
if
(
this
.
_workerDescriptorActorPool
)
{
this
.
_workerDescriptorActorPool
.
destroy
(
)
;
}
this
.
_workerDescriptorActorPool
=
pool
;
this
.
_workerDescriptorActorList
.
onListChanged
=
this
.
_onWorkerDescriptorActorListChanged
;
return
{
workers
:
actors
}
;
}
)
;
}
logInPage
(
request
)
{
const
{
text
category
flags
}
=
request
;
const
scriptErrorClass
=
Cc
[
"
mozilla
.
org
/
scripterror
;
1
"
]
;
const
scriptError
=
scriptErrorClass
.
createInstance
(
Ci
.
nsIScriptError
)
;
scriptError
.
initWithWindowID
(
text
null
null
0
0
flags
category
getInnerId
(
this
.
window
)
)
;
Services
.
console
.
logMessage
(
scriptError
)
;
return
{
}
;
}
_onWorkerDescriptorActorListChanged
(
)
{
this
.
_workerDescriptorActorList
.
onListChanged
=
null
;
this
.
emit
(
"
workerListChanged
"
)
;
}
_onConsoleApiProfilerEvent
(
subject
topic
data
)
{
if
(
this
.
_isNewPerfPanelEnabled
)
{
const
warningFlag
=
1
;
this
.
logInPage
(
{
text
:
"
console
.
profile
is
not
compatible
with
the
new
Performance
recorder
.
"
+
"
The
new
Performance
recorder
can
be
disabled
in
the
advanced
section
of
the
Settings
panel
.
"
+
"
See
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1730896
"
category
:
"
console
.
profile
unavailable
"
flags
:
warningFlag
}
)
;
}
}
observe
(
subject
topic
data
)
{
if
(
!
this
.
attached
)
{
return
;
}
subject
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
if
(
topic
=
=
"
webnavigation
-
create
"
)
{
this
.
_onDocShellCreated
(
subject
)
;
}
else
if
(
topic
=
=
"
webnavigation
-
destroy
"
)
{
this
.
_onDocShellDestroy
(
subject
)
;
}
}
_onDocShellCreated
(
docShell
)
{
DevToolsUtils
.
executeSoon
(
(
)
=
>
{
if
(
docShell
.
isBeingDestroyed
(
)
)
{
return
;
}
if
(
this
.
_isRootDocShell
(
docShell
)
&
&
this
.
watchNewDocShells
)
{
this
.
_progressListener
.
watch
(
docShell
)
;
}
this
.
_notifyDocShellsUpdate
(
[
docShell
]
)
;
}
)
;
}
_onDocShellDestroy
(
docShell
)
{
this
.
_unwatchDocShell
(
docShell
)
;
const
webProgress
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
this
.
_notifyDocShellDestroy
(
webProgress
)
;
if
(
webProgress
.
DOMWindow
=
=
this
.
_originalWindow
)
{
const
rootDocShells
=
this
.
docShells
.
filter
(
d
=
>
{
return
d
!
=
this
.
docShell
&
&
this
.
_isRootDocShell
(
d
)
;
}
)
;
if
(
rootDocShells
.
length
>
0
)
{
const
newRoot
=
rootDocShells
[
0
]
;
this
.
_originalWindow
=
newRoot
.
DOMWindow
;
this
.
_changeTopLevelDocument
(
this
.
_originalWindow
)
;
}
else
{
this
.
destroy
(
)
;
}
return
;
}
if
(
webProgress
.
DOMWindow
=
=
this
.
window
&
&
this
.
window
!
=
this
.
_originalWindow
)
{
this
.
_changeTopLevelDocument
(
this
.
_originalWindow
)
;
}
}
_isRootDocShell
(
docShell
)
{
return
!
docShell
.
parent
;
}
_docShellToWindow
(
docShell
)
{
const
webProgress
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
const
window
=
webProgress
.
DOMWindow
;
const
id
=
docShell
.
outerWindowID
;
let
parentID
=
undefined
;
if
(
window
.
parent
&
&
window
.
parent
!
=
window
&
&
window
!
=
this
.
_originalWindow
)
{
parentID
=
window
.
parent
.
docShell
.
outerWindowID
;
}
return
{
id
parentID
url
:
window
.
location
.
href
title
:
window
.
document
.
title
}
;
}
_docShellsToWindows
(
docshells
)
{
return
docshells
.
filter
(
docShell
=
>
{
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
if
(
docShell
.
document
.
isInitialDocument
)
{
return
false
;
}
return
true
;
}
)
.
map
(
docShell
=
>
this
.
_docShellToWindow
(
docShell
)
)
;
}
_notifyDocShellsUpdate
(
docshells
)
{
if
(
!
this
.
isTopLevelTarget
)
{
return
;
}
const
windows
=
this
.
_docShellsToWindows
(
docshells
)
;
if
(
windows
.
length
=
=
0
)
{
return
;
}
this
.
emit
(
"
frameUpdate
"
{
frames
:
windows
}
)
;
}
_updateChildDocShells
(
)
{
this
.
_notifyDocShellsUpdate
(
this
.
docShells
)
;
}
_notifyDocShellDestroy
(
webProgress
)
{
if
(
!
this
.
isTopLevelTarget
)
{
return
;
}
webProgress
=
webProgress
.
QueryInterface
(
Ci
.
nsIWebProgress
)
;
const
id
=
webProgress
.
DOMWindow
.
docShell
.
outerWindowID
;
this
.
emit
(
"
frameUpdate
"
{
frames
:
[
{
id
destroy
:
true
}
]
}
)
;
}
_createThreadActor
(
)
{
this
.
threadActor
=
new
ThreadActor
(
this
this
.
window
)
;
this
.
manage
(
this
.
threadActor
)
;
}
_destroyThreadActor
(
)
{
this
.
threadActor
.
destroy
(
)
;
this
.
threadActor
=
null
;
if
(
this
.
_sourcesManager
)
{
this
.
_sourcesManager
.
destroy
(
)
;
this
.
_sourcesManager
=
null
;
}
}
_detach
(
{
isTargetSwitching
}
=
{
}
)
{
if
(
!
this
.
attached
)
{
return
false
;
}
if
(
this
.
docShell
)
{
this
.
_unwatchDocShell
(
this
.
docShell
)
;
if
(
!
isTargetSwitching
)
{
this
.
_restoreTargetConfiguration
(
)
;
}
}
this
.
_unwatchDocshells
(
)
;
this
.
_destroyThreadActor
(
)
;
this
.
_styleSheetActors
.
clear
(
)
;
if
(
this
.
_targetScopedActorPool
)
{
this
.
_targetScopedActorPool
.
destroy
(
)
;
this
.
_targetScopedActorPool
=
null
;
}
if
(
this
.
_workerDescriptorActorList
!
=
=
null
)
{
this
.
_workerDescriptorActorList
.
destroy
(
)
;
this
.
_workerDescriptorActorList
=
null
;
}
if
(
this
.
_workerDescriptorActorPool
!
=
=
null
)
{
this
.
_workerDescriptorActorPool
.
destroy
(
)
;
this
.
_workerDescriptorActorPool
=
null
;
}
if
(
this
.
_dbg
)
{
this
.
_dbg
.
disable
(
)
;
this
.
_dbg
=
null
;
}
this
.
_attached
=
false
;
if
(
this
.
followWindowGlobalLifeCycle
)
{
return
true
;
}
return
true
;
}
attach
(
request
)
{
if
(
this
.
isDestroyed
(
)
)
{
throw
{
error
:
"
destroyed
"
}
;
}
this
.
_attach
(
)
;
return
{
threadActor
:
this
.
threadActor
.
actorID
}
;
}
detach
(
request
)
{
if
(
!
this
.
_detach
(
)
)
{
throw
{
error
:
"
wrongState
"
}
;
}
return
{
}
;
}
focus
(
)
{
if
(
this
.
window
)
{
this
.
window
.
focus
(
)
;
}
return
{
}
;
}
goForward
(
)
{
Services
.
tm
.
dispatchToMainThread
(
DevToolsUtils
.
makeInfallible
(
(
)
=
>
{
if
(
Services
.
startup
.
shuttingDown
)
{
return
;
}
this
.
webNavigation
.
goForward
(
)
;
}
"
WindowGlobalTargetActor
.
prototype
.
goForward
'
s
delayed
body
"
)
)
;
return
{
}
;
}
goBack
(
)
{
Services
.
tm
.
dispatchToMainThread
(
DevToolsUtils
.
makeInfallible
(
(
)
=
>
{
if
(
Services
.
startup
.
shuttingDown
)
{
return
;
}
this
.
webNavigation
.
goBack
(
)
;
}
"
WindowGlobalTargetActor
.
prototype
.
goBack
'
s
delayed
body
"
)
)
;
return
{
}
;
}
reload
(
request
)
{
const
force
=
request
?
.
options
?
.
force
;
Services
.
tm
.
dispatchToMainThread
(
DevToolsUtils
.
makeInfallible
(
(
)
=
>
{
if
(
Services
.
startup
.
shuttingDown
)
{
return
;
}
this
.
webNavigation
.
reload
(
force
?
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_CACHE
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
)
;
}
"
WindowGlobalTargetActor
.
prototype
.
reload
'
s
delayed
body
"
)
)
;
return
{
}
;
}
navigateTo
(
request
)
{
Services
.
tm
.
dispatchToMainThread
(
DevToolsUtils
.
makeInfallible
(
(
)
=
>
{
this
.
window
.
location
=
request
.
url
;
}
"
WindowGlobalTargetActor
.
prototype
.
navigateTo
'
s
delayed
body
:
"
+
request
.
url
)
)
;
return
{
}
;
}
async
ensureCSSErrorReportingEnabled
(
request
)
{
const
promises
=
[
]
;
for
(
const
docShell
of
this
.
docShells
)
{
if
(
docShell
.
cssErrorReportingEnabled
)
{
continue
;
}
try
{
docShell
.
cssErrorReportingEnabled
=
true
;
}
catch
(
e
)
{
continue
;
}
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
const
sheets
=
InspectorUtils
.
getAllStyleSheets
(
docShell
.
document
true
)
;
for
(
const
sheet
of
sheets
)
{
if
(
InspectorUtils
.
hasRulesModifiedByCSSOM
(
sheet
)
)
{
continue
;
}
const
onStyleSheetParsed
=
getSheetText
(
sheet
)
.
then
(
text
=
>
{
InspectorUtils
.
parseStyleSheet
(
sheet
text
false
)
;
}
)
.
catch
(
e
=
>
console
.
error
(
"
Error
while
parsing
stylesheet
"
)
)
;
promises
.
push
(
onStyleSheetParsed
)
;
}
}
await
Promise
.
all
(
promises
)
;
return
{
}
;
}
reconfigure
(
request
)
{
const
options
=
request
.
options
|
|
{
}
;
return
this
.
updateTargetConfiguration
(
options
)
;
}
updateTargetConfiguration
(
options
=
{
}
calledFromDocumentCreation
=
false
)
{
if
(
!
this
.
docShell
)
{
return
;
}
let
reload
=
false
;
if
(
typeof
options
.
touchEventsOverride
!
=
=
"
undefined
"
)
{
const
enableTouchSimulator
=
options
.
touchEventsOverride
=
=
=
"
enabled
"
;
this
.
docShell
.
metaViewportOverride
=
enableTouchSimulator
?
Ci
.
nsIDocShell
.
META_VIEWPORT_OVERRIDE_ENABLED
:
Ci
.
nsIDocShell
.
META_VIEWPORT_OVERRIDE_NONE
;
if
(
enableTouchSimulator
!
=
=
this
.
touchSimulator
.
enabled
&
&
options
.
reloadOnTouchSimulationToggle
=
=
=
true
&
&
this
.
isTopLevelTarget
&
&
!
calledFromDocumentCreation
)
{
reload
=
true
;
}
if
(
enableTouchSimulator
)
{
this
.
touchSimulator
.
start
(
)
;
}
else
{
this
.
touchSimulator
.
stop
(
)
;
}
}
if
(
typeof
options
.
isNewPerfPanelEnabled
=
=
"
boolean
"
)
{
this
.
_isNewPerfPanelEnabled
=
options
.
isNewPerfPanelEnabled
;
}
if
(
!
this
.
isTopLevelTarget
)
{
return
;
}
if
(
typeof
options
.
paintFlashing
!
=
=
"
undefined
"
&
&
options
.
PaintFlashing
!
=
=
this
.
_getPaintFlashing
(
)
)
{
this
.
_setPaintFlashingEnabled
(
options
.
paintFlashing
)
;
}
if
(
typeof
options
.
restoreFocus
=
=
"
boolean
"
)
{
this
.
_restoreFocus
=
options
.
restoreFocus
;
}
if
(
typeof
options
.
recordAllocations
=
=
"
object
"
)
{
const
actor
=
this
.
_memoryActor
;
if
(
options
.
recordAllocations
=
=
null
)
{
actor
.
stopRecordingAllocations
(
)
;
}
else
{
actor
.
attach
(
)
;
actor
.
startRecordingAllocations
(
options
.
recordAllocations
)
;
}
}
if
(
reload
)
{
this
.
webNavigation
.
reload
(
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
)
;
}
}
get
touchSimulator
(
)
{
if
(
!
this
.
_touchSimulator
)
{
this
.
_touchSimulator
=
new
TouchSimulator
(
this
.
chromeEventHandler
)
;
}
return
this
.
_touchSimulator
;
}
_restoreTargetConfiguration
(
)
{
this
.
_setPaintFlashingEnabled
(
false
)
;
if
(
this
.
_restoreFocus
&
&
this
.
browsingContext
?
.
isActive
)
{
this
.
window
.
focus
(
)
;
}
}
_setPaintFlashingEnabled
(
enabled
)
{
const
windowUtils
=
this
.
window
.
windowUtils
;
windowUtils
.
paintFlashing
=
enabled
;
}
_getPaintFlashing
(
)
{
if
(
!
this
.
docShell
)
{
return
null
;
}
return
this
.
window
.
windowUtils
.
paintFlashing
;
}
_changeTopLevelDocument
(
window
)
{
this
.
_willNavigate
(
{
window
:
this
.
window
newURI
:
window
.
location
.
href
request
:
null
isFrameSwitching
:
true
navigationStart
:
Date
.
now
(
)
}
)
;
this
.
_windowDestroyed
(
this
.
window
{
isFrozen
:
true
isFrameSwitching
:
true
}
)
;
this
.
_setWindow
(
window
)
;
DevToolsUtils
.
executeSoon
(
(
)
=
>
{
if
(
!
this
.
attached
)
{
return
;
}
this
.
_windowReady
(
window
{
isFrameSwitching
:
true
}
)
;
DevToolsUtils
.
executeSoon
(
(
)
=
>
{
this
.
_navigate
(
window
true
)
;
}
)
;
}
)
;
}
_setWindow
(
window
)
{
this
.
docShell
=
window
.
docShell
;
this
.
emit
(
"
changed
-
toplevel
-
document
"
)
;
this
.
emit
(
"
frameUpdate
"
{
selected
:
this
.
outerWindowID
}
)
;
}
_windowReady
(
window
{
isFrameSwitching
isBFCache
}
=
{
}
)
{
const
isTopLevel
=
window
=
=
this
.
window
;
if
(
this
.
ignoreSubFrames
&
&
!
this
.
isTopLevel
)
{
return
;
}
if
(
window
=
=
this
.
_originalWindow
&
&
!
isFrameSwitching
)
{
this
.
_updateChildDocShells
(
)
;
}
if
(
this
.
followWindowGlobalLifeCycle
&
&
isTopLevel
&
&
!
isFrameSwitching
)
{
return
;
}
this
.
emit
(
"
window
-
ready
"
{
window
isTopLevel
isBFCache
id
:
getWindowID
(
window
)
isFrameSwitching
}
)
;
}
_windowDestroyed
(
window
{
id
=
null
isFrozen
=
false
isFrameSwitching
=
false
}
)
{
const
isTopLevel
=
window
=
=
this
.
window
;
if
(
this
.
ignoreSubFrames
&
&
!
this
.
isTopLevel
)
{
return
;
}
if
(
this
.
followWindowGlobalLifeCycle
&
&
isTopLevel
&
&
!
isFrameSwitching
)
{
return
;
}
this
.
emit
(
"
window
-
destroyed
"
{
window
isTopLevel
id
:
id
|
|
getWindowID
(
window
)
isFrozen
}
)
;
}
_willNavigate
(
{
window
newURI
request
isFrameSwitching
=
false
navigationStart
}
)
{
let
isTopLevel
=
window
=
=
this
.
window
;
if
(
this
.
ignoreSubFrames
&
&
!
this
.
isTopLevel
)
{
return
;
}
let
reset
=
false
;
if
(
window
=
=
this
.
_originalWindow
&
&
!
isFrameSwitching
)
{
if
(
this
.
window
!
=
this
.
_originalWindow
)
{
reset
=
true
;
window
=
this
.
window
;
isTopLevel
=
true
;
}
}
this
.
emit
(
"
will
-
navigate
"
{
window
isTopLevel
newURI
request
navigationStart
isFrameSwitching
}
)
;
if
(
!
isTopLevel
)
{
return
;
}
if
(
!
this
.
followWindowGlobalLifeCycle
)
{
this
.
emit
(
"
tabNavigated
"
{
url
:
newURI
nativeConsoleAPI
:
true
state
:
"
start
"
isFrameSwitching
}
)
;
}
if
(
reset
)
{
this
.
_setWindow
(
this
.
_originalWindow
)
;
}
}
_navigate
(
window
isFrameSwitching
=
false
)
{
const
isTopLevel
=
window
=
=
this
.
window
;
if
(
this
.
ignoreSubFrames
&
&
!
this
.
isTopLevel
)
{
return
;
}
this
.
emit
(
"
navigate
"
{
window
:
window
isTopLevel
:
isTopLevel
}
)
;
if
(
!
isTopLevel
)
{
return
;
}
if
(
this
.
followWindowGlobalLifeCycle
)
{
return
;
}
this
.
emit
(
"
tabNavigated
"
{
url
:
this
.
url
title
:
this
.
title
nativeConsoleAPI
:
this
.
hasNativeConsoleAPI
(
this
.
window
)
state
:
"
stop
"
isFrameSwitching
:
isFrameSwitching
}
)
;
}
hasNativeConsoleAPI
(
window
)
{
let
isNative
=
false
;
try
{
const
console
=
window
.
wrappedJSObject
.
console
;
isNative
=
new
XPCNativeWrapper
(
console
)
.
IS_NATIVE_CONSOLE
;
}
catch
(
ex
)
{
}
return
isNative
;
}
createStyleSheetActor
(
styleSheet
)
{
assert
(
!
this
.
isDestroyed
(
)
"
Target
must
not
be
destroyed
to
create
a
sheet
actor
.
"
)
;
if
(
this
.
_styleSheetActors
.
has
(
styleSheet
)
)
{
return
this
.
_styleSheetActors
.
get
(
styleSheet
)
;
}
const
actor
=
new
StyleSheetActor
(
styleSheet
this
)
;
this
.
_styleSheetActors
.
set
(
styleSheet
actor
)
;
this
.
_targetScopedActorPool
.
manage
(
actor
)
;
this
.
emit
(
"
stylesheet
-
added
"
actor
)
;
return
actor
;
}
removeActorByName
(
name
)
{
if
(
name
in
this
.
_extraActors
)
{
const
actor
=
this
.
_extraActors
[
name
]
;
if
(
this
.
_targetScopedActorPool
.
has
(
actor
)
)
{
this
.
_targetScopedActorPool
.
removeActor
(
actor
)
;
}
delete
this
.
_extraActors
[
name
]
;
}
}
}
;
exports
.
windowGlobalTargetPrototype
=
windowGlobalTargetPrototype
;
exports
.
WindowGlobalTargetActor
=
TargetActorMixin
(
Targets
.
TYPES
.
FRAME
windowGlobalTargetSpec
windowGlobalTargetPrototype
)
;
function
DebuggerProgressListener
(
targetActor
)
{
this
.
_targetActor
=
targetActor
;
this
.
_onWindowCreated
=
this
.
onWindowCreated
.
bind
(
this
)
;
this
.
_onWindowHidden
=
this
.
onWindowHidden
.
bind
(
this
)
;
Services
.
obs
.
addObserver
(
this
"
inner
-
window
-
destroyed
"
)
;
this
.
_knownWindowIDs
=
new
Map
(
)
;
this
.
_watchedDocShells
=
new
WeakSet
(
)
;
}
DebuggerProgressListener
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
"
nsISupportsWeakReference
"
]
)
destroy
(
)
{
Services
.
obs
.
removeObserver
(
this
"
inner
-
window
-
destroyed
"
)
;
this
.
_knownWindowIDs
.
clear
(
)
;
this
.
_knownWindowIDs
=
null
;
}
watch
(
docShell
)
{
const
docShellWindow
=
docShell
.
domWindow
;
this
.
_watchedDocShells
.
add
(
docShellWindow
)
;
const
webProgress
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
webProgress
.
addProgressListener
(
this
Ci
.
nsIWebProgress
.
NOTIFY_STATE_WINDOW
|
Ci
.
nsIWebProgress
.
NOTIFY_STATE_DOCUMENT
)
;
const
handler
=
getDocShellChromeEventHandler
(
docShell
)
;
handler
.
addEventListener
(
"
DOMWindowCreated
"
this
.
_onWindowCreated
true
)
;
handler
.
addEventListener
(
"
pageshow
"
this
.
_onWindowCreated
true
)
;
handler
.
addEventListener
(
"
pagehide
"
this
.
_onWindowHidden
true
)
;
const
windows
=
this
.
_targetActor
.
ignoreSubFrames
?
[
docShellWindow
]
:
this
.
_getWindowsInDocShell
(
docShell
)
;
for
(
const
win
of
windows
)
{
this
.
_targetActor
.
_windowReady
(
win
)
;
this
.
_knownWindowIDs
.
set
(
getWindowID
(
win
)
win
)
;
}
if
(
this
.
_targetActor
.
typeName
=
=
=
"
parentProcessTarget
"
)
{
docShell
.
browsingContext
.
watchedByDevTools
=
true
;
}
}
unwatch
(
docShell
)
{
const
docShellWindow
=
docShell
.
domWindow
;
if
(
!
this
.
_watchedDocShells
.
has
(
docShellWindow
)
)
{
return
;
}
this
.
_watchedDocShells
.
delete
(
docShellWindow
)
;
const
webProgress
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
try
{
webProgress
.
removeProgressListener
(
this
)
;
}
catch
(
e
)
{
}
const
handler
=
getDocShellChromeEventHandler
(
docShell
)
;
handler
.
removeEventListener
(
"
DOMWindowCreated
"
this
.
_onWindowCreated
true
)
;
handler
.
removeEventListener
(
"
pageshow
"
this
.
_onWindowCreated
true
)
;
handler
.
removeEventListener
(
"
pagehide
"
this
.
_onWindowHidden
true
)
;
const
windows
=
this
.
_targetActor
.
ignoreSubFrames
?
[
docShellWindow
]
:
this
.
_getWindowsInDocShell
(
docShell
)
;
for
(
const
win
of
windows
)
{
this
.
_knownWindowIDs
.
delete
(
getWindowID
(
win
)
)
;
}
if
(
this
.
_targetActor
.
typeName
=
=
=
"
parentProcessTarget
"
)
{
docShell
.
browsingContext
.
watchedByDevTools
=
false
;
}
}
_getWindowsInDocShell
(
docShell
)
{
return
getChildDocShells
(
docShell
)
.
map
(
d
=
>
{
return
d
.
domWindow
;
}
)
;
}
onWindowCreated
:
DevToolsUtils
.
makeInfallible
(
function
(
evt
)
{
if
(
!
this
.
_targetActor
.
attached
)
{
return
;
}
if
(
evt
.
inFrameSwap
)
{
return
;
}
const
window
=
evt
.
target
.
defaultView
;
if
(
!
window
)
{
return
;
}
const
innerID
=
getWindowID
(
window
)
;
if
(
this
.
_knownWindowIDs
.
has
(
innerID
)
)
{
return
;
}
this
.
_knownWindowIDs
.
set
(
innerID
window
)
;
const
isBFCache
=
evt
.
type
=
=
"
pageshow
"
;
this
.
_targetActor
.
_windowReady
(
window
{
isBFCache
}
)
;
}
"
DebuggerProgressListener
.
prototype
.
onWindowCreated
"
)
onWindowHidden
:
DevToolsUtils
.
makeInfallible
(
function
(
evt
)
{
if
(
!
this
.
_targetActor
.
attached
)
{
return
;
}
if
(
evt
.
inFrameSwap
)
{
return
;
}
if
(
!
evt
.
persisted
)
{
return
;
}
const
window
=
evt
.
target
.
defaultView
;
if
(
!
window
)
{
return
;
}
this
.
_targetActor
.
_windowDestroyed
(
window
{
isFrozen
:
true
}
)
;
this
.
_knownWindowIDs
.
delete
(
getWindowID
(
window
)
)
;
}
"
DebuggerProgressListener
.
prototype
.
onWindowHidden
"
)
observe
:
DevToolsUtils
.
makeInfallible
(
function
(
subject
topic
)
{
if
(
!
this
.
_targetActor
.
attached
)
{
return
;
}
const
innerID
=
subject
.
QueryInterface
(
Ci
.
nsISupportsPRUint64
)
.
data
;
const
window
=
this
.
_knownWindowIDs
.
get
(
innerID
)
;
if
(
window
)
{
this
.
_knownWindowIDs
.
delete
(
innerID
)
;
this
.
_targetActor
.
_windowDestroyed
(
window
{
id
:
innerID
}
)
;
}
if
(
this
.
_watchedDocShells
.
has
(
window
)
&
&
!
window
.
docShell
.
chromeEventHandler
)
{
this
.
unwatch
(
window
.
docShell
)
;
this
.
watch
(
window
.
docShell
)
;
}
}
"
DebuggerProgressListener
.
prototype
.
observe
"
)
onStateChange
:
DevToolsUtils
.
makeInfallible
(
function
(
progress
request
flag
status
)
{
if
(
!
this
.
_targetActor
.
attached
)
{
return
;
}
progress
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
if
(
progress
.
isBeingDestroyed
(
)
)
{
return
;
}
const
isStart
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_START
;
const
isStop
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
;
const
isDocument
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_IS_DOCUMENT
;
const
isWindow
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_IS_WINDOW
;
const
navigationStart
=
Date
.
now
(
)
;
if
(
isDocument
&
&
isStop
)
{
this
.
_targetActor
.
_notifyDocShellsUpdate
(
[
progress
]
)
;
}
const
window
=
progress
.
DOMWindow
;
if
(
isDocument
&
&
isStart
)
{
const
newURI
=
request
instanceof
Ci
.
nsIChannel
?
request
.
URI
.
spec
:
null
;
this
.
_targetActor
.
_willNavigate
(
{
window
newURI
request
isFrameSwitching
:
false
navigationStart
}
)
;
}
if
(
isWindow
&
&
isStop
)
{
if
(
request
.
status
!
=
Cr
.
NS_OK
&
&
request
.
status
!
=
Cr
.
NS_BINDING_ABORTED
)
{
const
handler
=
getDocShellChromeEventHandler
(
progress
)
;
const
onLoad
=
evt
=
>
{
if
(
evt
.
target
=
=
=
window
.
document
)
{
handler
.
removeEventListener
(
"
DOMContentLoaded
"
onLoad
true
)
;
this
.
_targetActor
.
_navigate
(
window
)
;
}
}
;
handler
.
addEventListener
(
"
DOMContentLoaded
"
onLoad
true
)
;
}
else
{
this
.
_targetActor
.
_navigate
(
window
)
;
}
}
}
"
DebuggerProgressListener
.
prototype
.
onStateChange
"
)
}
;
