"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
tracerSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
tracer
.
js
"
)
;
const
{
TYPES
getResourceWatcher
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
resources
/
index
.
js
"
)
;
const
LOG_METHODS
=
{
STDOUT
:
"
stdout
"
CONSOLE
:
"
console
"
}
;
const
CONSOLE_ARGS_STYLES
=
[
"
color
:
var
(
-
-
theme
-
toolbarbutton
-
checked
-
hover
-
background
)
"
"
padding
-
inline
:
4px
;
margin
-
inline
:
2px
;
background
-
color
:
var
(
-
-
theme
-
toolbarbutton
-
checked
-
hover
-
background
)
;
color
:
var
(
-
-
theme
-
toolbarbutton
-
checked
-
hover
-
color
)
;
"
"
"
"
color
:
var
(
-
-
theme
-
highlight
-
blue
)
;
margin
-
inline
:
2px
;
"
]
;
class
TracerActor
extends
Actor
{
constructor
(
conn
targetActor
)
{
super
(
conn
tracerSpec
)
;
this
.
targetActor
=
targetActor
;
this
.
onEnterFrame
=
this
.
onEnterFrame
.
bind
(
this
)
;
}
isTracing
(
)
{
return
!
!
this
.
dbg
;
}
getLogMethod
(
)
{
return
this
.
logMethod
;
}
startTracing
(
logMethod
=
LOG_METHODS
.
STDOUT
)
{
this
.
logMethod
=
logMethod
;
if
(
!
this
.
isTracing
(
)
)
{
this
.
dbg
=
this
.
targetActor
.
makeDebugger
(
)
;
this
.
depth
=
0
;
if
(
this
.
logMethod
=
=
LOG_METHODS
.
STDOUT
)
{
dump
(
"
Start
tracing
JavaScript
\
n
"
)
;
}
this
.
dbg
.
onEnterFrame
=
this
.
onEnterFrame
;
this
.
dbg
.
enable
(
)
;
}
const
tracingStateWatcher
=
getResourceWatcher
(
this
.
targetActor
TYPES
.
TRACING_STATE
)
;
if
(
tracingStateWatcher
)
{
tracingStateWatcher
.
onTracingToggled
(
true
logMethod
)
;
}
}
stopTracing
(
)
{
if
(
!
this
.
isTracing
(
)
)
{
return
;
}
if
(
this
.
logMethod
=
=
LOG_METHODS
.
STDOUT
)
{
dump
(
"
Stop
tracing
JavaScript
\
n
"
)
;
}
this
.
dbg
.
onEnterFrame
=
undefined
;
this
.
dbg
.
disable
(
)
;
this
.
dbg
=
null
;
this
.
depth
=
0
;
const
tracingStateWatcher
=
getResourceWatcher
(
this
.
targetActor
TYPES
.
TRACING_STATE
)
;
if
(
tracingStateWatcher
)
{
tracingStateWatcher
.
onTracingToggled
(
false
)
;
}
}
onEnterFrame
(
frame
)
{
if
(
!
this
.
dbg
)
{
return
;
}
try
{
if
(
this
.
depth
=
=
100
)
{
const
message
=
"
Looks
like
an
infinite
recursion
?
We
stopped
the
JavaScript
tracer
but
code
may
still
be
running
!
"
;
if
(
this
.
logMethod
=
=
LOG_METHODS
.
STDOUT
)
{
dump
(
message
+
"
\
n
"
)
;
}
else
if
(
this
.
logMethod
=
=
LOG_METHODS
.
CONSOLE
)
{
logConsoleMessage
(
{
targetActor
:
this
.
targetActor
source
:
script
.
source
args
:
[
message
]
styles
:
[
]
}
)
;
}
this
.
stopTracing
(
)
;
return
;
}
const
{
script
}
=
frame
;
const
{
lineNumber
columnNumber
}
=
script
.
getOffsetMetadata
(
frame
.
offset
)
;
if
(
this
.
logMethod
=
=
LOG_METHODS
.
STDOUT
)
{
const
padding
=
"
"
.
repeat
(
this
.
depth
+
1
)
;
const
message
=
{
padding
}
[
{
frame
.
implementation
}
]
>
{
script
.
source
.
url
}
{
lineNumber
}
:
{
columnNumber
}
-
{
formatDisplayName
(
frame
)
}
;
dump
(
message
+
"
\
n
"
)
;
}
else
if
(
this
.
logMethod
=
=
LOG_METHODS
.
CONSOLE
)
{
const
args
=
[
"
"
.
repeat
(
this
.
depth
+
1
)
frame
.
implementation
"
"
formatDisplayName
(
frame
)
]
;
logConsoleMessage
(
{
targetActor
:
this
.
targetActor
source
:
script
.
source
lineNumber
columnNumber
args
styles
:
CONSOLE_ARGS_STYLES
}
)
;
}
this
.
depth
+
+
;
frame
.
onPop
=
(
)
=
>
{
this
.
depth
-
-
;
}
;
}
catch
(
e
)
{
console
.
error
(
"
Exception
while
tracing
javascript
"
e
)
;
}
}
}
exports
.
TracerActor
=
TracerActor
;
function
formatDisplayName
(
frame
)
{
if
(
frame
.
type
=
=
=
"
call
"
)
{
const
callee
=
frame
.
callee
;
return
"
"
+
(
callee
.
name
|
|
callee
.
displayName
|
|
"
anonymous
"
)
;
}
return
(
{
frame
.
type
}
)
;
}
function
logConsoleMessage
(
{
targetActor
source
lineNumber
columnNumber
args
styles
}
)
{
const
message
=
{
filename
:
source
.
url
lineNumber
columnNumber
arguments
:
args
styles
level
:
"
logTrace
"
chromeContext
:
targetActor
.
actorID
&
&
/
conn
\
d
+
\
.
parentProcessTarget
\
d
+
/
.
test
(
targetActor
.
actorID
)
sourceId
:
source
.
id
}
;
const
consoleMessageWatcher
=
getResourceWatcher
(
targetActor
TYPES
.
CONSOLE_MESSAGE
)
;
if
(
consoleMessageWatcher
)
{
consoleMessageWatcher
.
emitMessage
(
message
)
;
}
}
