"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
{
XPCOMUtils
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
events
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
old
-
event
-
emitter
"
)
;
const
{
reflowSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
reflow
"
)
;
exports
.
ReflowActor
=
protocol
.
ActorClassWithSpec
(
reflowSpec
{
initialize
:
function
(
conn
tabActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
tabActor
=
tabActor
;
this
.
_onReflow
=
this
.
_onReflow
.
bind
(
this
)
;
this
.
observer
=
getLayoutChangesObserver
(
tabActor
)
;
this
.
_isStarted
=
false
;
}
destroy
:
function
(
)
{
this
.
stop
(
)
;
releaseLayoutChangesObserver
(
this
.
tabActor
)
;
this
.
observer
=
null
;
this
.
tabActor
=
null
;
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
}
start
:
function
(
)
{
if
(
!
this
.
_isStarted
)
{
this
.
observer
.
on
(
"
reflows
"
this
.
_onReflow
)
;
this
.
_isStarted
=
true
;
}
}
stop
:
function
(
)
{
if
(
this
.
_isStarted
)
{
this
.
observer
.
off
(
"
reflows
"
this
.
_onReflow
)
;
this
.
_isStarted
=
false
;
}
}
_onReflow
:
function
(
event
reflows
)
{
if
(
this
.
_isStarted
)
{
events
.
emit
(
this
"
reflows
"
reflows
)
;
}
}
}
)
;
function
Observable
(
tabActor
callback
)
{
this
.
tabActor
=
tabActor
;
this
.
callback
=
callback
;
this
.
_onWindowReady
=
this
.
_onWindowReady
.
bind
(
this
)
;
this
.
_onWindowDestroyed
=
this
.
_onWindowDestroyed
.
bind
(
this
)
;
events
.
on
(
this
.
tabActor
"
window
-
ready
"
this
.
_onWindowReady
)
;
events
.
on
(
this
.
tabActor
"
window
-
destroyed
"
this
.
_onWindowDestroyed
)
;
}
Observable
.
prototype
=
{
isObserving
:
false
destroy
:
function
(
)
{
if
(
this
.
isDestroyed
)
{
return
;
}
this
.
isDestroyed
=
true
;
this
.
stop
(
)
;
events
.
off
(
this
.
tabActor
"
window
-
ready
"
this
.
_onWindowReady
)
;
events
.
off
(
this
.
tabActor
"
window
-
destroyed
"
this
.
_onWindowDestroyed
)
;
this
.
callback
=
null
;
this
.
tabActor
=
null
;
}
start
:
function
(
)
{
if
(
this
.
isObserving
)
{
return
;
}
this
.
isObserving
=
true
;
this
.
_startListeners
(
this
.
tabActor
.
windows
)
;
}
stop
:
function
(
)
{
if
(
!
this
.
isObserving
)
{
return
;
}
this
.
isObserving
=
false
;
if
(
this
.
tabActor
.
attached
&
&
this
.
tabActor
.
docShell
)
{
this
.
_stopListeners
(
this
.
tabActor
.
windows
)
;
}
}
_onWindowReady
:
function
(
{
window
}
)
{
if
(
this
.
isObserving
)
{
this
.
_startListeners
(
[
window
]
)
;
}
}
_onWindowDestroyed
:
function
(
{
window
}
)
{
if
(
this
.
isObserving
)
{
this
.
_stopListeners
(
[
window
]
)
;
}
}
_startListeners
:
function
(
windows
)
{
}
_stopListeners
:
function
(
windows
)
{
}
notifyCallback
:
function
(
.
.
.
args
)
{
this
.
isObserving
&
&
this
.
callback
&
&
this
.
callback
.
apply
(
null
args
)
;
}
}
;
var
gIgnoreLayoutChanges
=
false
;
exports
.
setIgnoreLayoutChanges
=
function
(
ignore
syncReflowNode
)
{
if
(
syncReflowNode
)
{
let
forceSyncReflow
=
syncReflowNode
.
offsetWidth
;
}
gIgnoreLayoutChanges
=
ignore
;
}
;
function
LayoutChangesObserver
(
tabActor
)
{
this
.
tabActor
=
tabActor
;
this
.
_startEventLoop
=
this
.
_startEventLoop
.
bind
(
this
)
;
this
.
_onReflow
=
this
.
_onReflow
.
bind
(
this
)
;
this
.
_onResize
=
this
.
_onResize
.
bind
(
this
)
;
this
.
reflowObserver
=
new
ReflowObserver
(
this
.
tabActor
this
.
_onReflow
)
;
this
.
resizeObserver
=
new
WindowResizeObserver
(
this
.
tabActor
this
.
_onResize
)
;
EventEmitter
.
decorate
(
this
)
;
}
exports
.
LayoutChangesObserver
=
LayoutChangesObserver
;
LayoutChangesObserver
.
prototype
=
{
EVENT_BATCHING_DELAY
:
300
destroy
:
function
(
)
{
this
.
isObserving
=
false
;
this
.
reflowObserver
.
destroy
(
)
;
this
.
reflows
=
null
;
this
.
resizeObserver
.
destroy
(
)
;
this
.
hasResized
=
false
;
this
.
tabActor
=
null
;
}
start
:
function
(
)
{
if
(
this
.
isObserving
)
{
return
;
}
this
.
isObserving
=
true
;
this
.
reflows
=
[
]
;
this
.
hasResized
=
false
;
this
.
_startEventLoop
(
)
;
this
.
reflowObserver
.
start
(
)
;
this
.
resizeObserver
.
start
(
)
;
}
stop
:
function
(
)
{
if
(
!
this
.
isObserving
)
{
return
;
}
this
.
isObserving
=
false
;
this
.
_stopEventLoop
(
)
;
this
.
reflows
=
[
]
;
this
.
hasResized
=
false
;
this
.
reflowObserver
.
stop
(
)
;
this
.
resizeObserver
.
stop
(
)
;
}
_startEventLoop
:
function
(
)
{
if
(
!
this
.
tabActor
|
|
!
this
.
tabActor
.
attached
)
{
return
;
}
if
(
this
.
reflows
&
&
this
.
reflows
.
length
)
{
this
.
emit
(
"
reflows
"
this
.
reflows
)
;
this
.
reflows
=
[
]
;
}
if
(
this
.
hasResized
)
{
this
.
emit
(
"
resize
"
)
;
this
.
hasResized
=
false
;
}
this
.
eventLoopTimer
=
this
.
_setTimeout
(
this
.
_startEventLoop
this
.
EVENT_BATCHING_DELAY
)
;
}
_stopEventLoop
:
function
(
)
{
this
.
_clearTimeout
(
this
.
eventLoopTimer
)
;
}
_setTimeout
:
function
(
cb
ms
)
{
return
setTimeout
(
cb
ms
)
;
}
_clearTimeout
:
function
(
t
)
{
return
clearTimeout
(
t
)
;
}
_onReflow
:
function
(
start
end
isInterruptible
)
{
if
(
gIgnoreLayoutChanges
)
{
return
;
}
this
.
reflows
.
push
(
{
start
:
start
end
:
end
isInterruptible
:
isInterruptible
}
)
;
}
_onResize
:
function
(
)
{
if
(
gIgnoreLayoutChanges
)
{
return
;
}
this
.
hasResized
=
true
;
}
}
;
var
observedWindows
=
new
Map
(
)
;
function
getLayoutChangesObserver
(
tabActor
)
{
let
observerData
=
observedWindows
.
get
(
tabActor
)
;
if
(
observerData
)
{
observerData
.
refCounting
+
+
;
return
observerData
.
observer
;
}
let
obs
=
new
LayoutChangesObserver
(
tabActor
)
;
observedWindows
.
set
(
tabActor
{
observer
:
obs
refCounting
:
1
}
)
;
obs
.
start
(
)
;
return
obs
;
}
exports
.
getLayoutChangesObserver
=
getLayoutChangesObserver
;
function
releaseLayoutChangesObserver
(
tabActor
)
{
let
observerData
=
observedWindows
.
get
(
tabActor
)
;
if
(
!
observerData
)
{
return
;
}
observerData
.
refCounting
-
-
;
if
(
!
observerData
.
refCounting
)
{
observerData
.
observer
.
destroy
(
)
;
observedWindows
.
delete
(
tabActor
)
;
}
}
exports
.
releaseLayoutChangesObserver
=
releaseLayoutChangesObserver
;
class
ReflowObserver
extends
Observable
{
constructor
(
tabActor
callback
)
{
super
(
tabActor
callback
)
;
}
_startListeners
(
windows
)
{
for
(
let
window
of
windows
)
{
let
docshell
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
docshell
.
addWeakReflowObserver
(
this
)
;
}
}
_stopListeners
(
windows
)
{
for
(
let
window
of
windows
)
{
try
{
let
docshell
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
docshell
.
removeWeakReflowObserver
(
this
)
;
}
catch
(
e
)
{
}
}
}
reflow
(
start
end
)
{
this
.
notifyCallback
(
start
end
false
)
;
}
reflowInterruptible
(
start
end
)
{
this
.
notifyCallback
(
start
end
true
)
;
}
}
ReflowObserver
.
prototype
.
QueryInterface
=
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIReflowObserver
Ci
.
nsISupportsWeakReference
]
)
;
class
WindowResizeObserver
extends
Observable
{
constructor
(
tabActor
callback
)
{
super
(
tabActor
callback
)
;
this
.
onResize
=
this
.
onResize
.
bind
(
this
)
;
}
_startListeners
(
)
{
this
.
listenerTarget
.
addEventListener
(
"
resize
"
this
.
onResize
)
;
}
_stopListeners
(
)
{
this
.
listenerTarget
.
removeEventListener
(
"
resize
"
this
.
onResize
)
;
}
onResize
(
)
{
this
.
notifyCallback
(
)
;
}
get
listenerTarget
(
)
{
if
(
this
.
tabActor
.
isRootActor
)
{
return
this
.
tabActor
.
window
;
}
return
this
.
tabActor
.
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
.
chromeEventHandler
;
}
}
