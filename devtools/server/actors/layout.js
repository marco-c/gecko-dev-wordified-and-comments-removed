"
use
strict
"
;
const
events
=
require
(
"
sdk
/
event
/
core
"
)
;
const
{
Actor
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
getStringifiableFragments
}
=
require
(
"
devtools
/
server
/
actors
/
utils
/
css
-
grid
-
utils
"
)
;
const
{
gridSpec
layoutSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
layout
"
)
;
var
GridActor
=
ActorClassWithSpec
(
gridSpec
{
initialize
(
layoutActor
containerEl
)
{
Actor
.
prototype
.
initialize
.
call
(
this
layoutActor
.
conn
)
;
this
.
containerEl
=
containerEl
;
this
.
walker
=
layoutActor
.
walker
;
}
destroy
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
this
.
containerEl
=
null
;
this
.
gridFragments
=
null
;
this
.
walker
=
null
;
}
form
(
detail
)
{
if
(
detail
=
=
=
"
actorid
"
)
{
return
this
.
actorID
;
}
let
gridFragments
=
this
.
containerEl
.
getGridFragments
(
)
;
this
.
gridFragments
=
getStringifiableFragments
(
gridFragments
)
;
let
form
=
{
actor
:
this
.
actorID
gridFragments
:
this
.
gridFragments
}
;
return
form
;
}
}
)
;
var
LayoutActor
=
ActorClassWithSpec
(
layoutSpec
{
initialize
(
conn
tabActor
walker
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
tabActor
=
tabActor
;
this
.
walker
=
walker
;
this
.
onNavigate
=
this
.
onNavigate
.
bind
(
this
)
;
events
.
on
(
this
.
tabActor
"
navigate
"
this
.
onNavigate
)
;
}
destroy
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
events
.
off
(
this
.
tabActor
"
navigate
"
this
.
onNavigate
)
;
this
.
tabActor
=
null
;
this
.
walker
=
null
;
}
getGrids
(
rootNode
)
{
let
grids
=
[
]
;
let
treeWalker
=
this
.
walker
.
getDocumentWalker
(
rootNode
)
;
while
(
treeWalker
.
nextNode
(
)
)
{
let
currentNode
=
treeWalker
.
currentNode
;
if
(
currentNode
.
getGridFragments
&
&
currentNode
.
getGridFragments
(
)
.
length
>
0
)
{
let
gridActor
=
new
GridActor
(
this
currentNode
)
;
grids
.
push
(
gridActor
)
;
}
}
return
grids
;
}
getAllGrids
(
rootNode
traverseFrames
)
{
if
(
!
traverseFrames
)
{
return
this
.
getGrids
(
rootNode
.
rawNode
)
;
}
let
grids
=
[
]
;
for
(
let
{
document
}
of
this
.
tabActor
.
windows
)
{
grids
=
[
.
.
.
grids
.
.
.
this
.
getGrids
(
document
.
documentElement
)
]
;
}
return
grids
;
}
onNavigate
(
)
{
let
grids
=
this
.
getAllGrids
(
this
.
walker
.
rootNode
)
;
events
.
emit
(
this
"
grid
-
layout
-
changed
"
grids
)
;
}
}
)
;
exports
.
GridActor
=
GridActor
;
exports
.
LayoutActor
=
LayoutActor
;
