"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
{
directorRegistrySpec
}
=
require
(
"
devtools
/
shared
/
specs
/
director
-
registry
"
)
;
const
ERR_DIRECTOR_INSTALL_TWICE
=
"
Trying
to
install
a
director
-
script
twice
"
;
const
ERR_DIRECTOR_INSTALL_EMPTY
=
"
Trying
to
install
an
empty
director
-
script
"
;
const
ERR_DIRECTOR_UNINSTALL_UNKNOWN
=
"
Trying
to
uninstall
an
unkown
director
-
script
"
;
const
ERR_DIRECTOR_PARENT_UNKNOWN_METHOD
=
"
Unknown
parent
process
method
"
;
const
ERR_DIRECTOR_CHILD_NOTIMPLEMENTED_METHOD
=
"
Unexpected
call
to
notImplemented
method
"
;
const
ERR_DIRECTOR_CHILD_MULTIPLE_REPLIES
=
"
Unexpected
multiple
replies
to
called
parent
method
"
;
const
ERR_DIRECTOR_CHILD_NO_REPLY
=
"
Unexpected
no
reply
to
called
parent
method
"
;
var
gDirectorScripts
=
Object
.
create
(
null
)
;
const
DirectorRegistry
=
exports
.
DirectorRegistry
=
{
install
:
function
(
id
scriptDef
)
{
if
(
id
in
gDirectorScripts
)
{
console
.
error
(
ERR_DIRECTOR_INSTALL_TWICE
id
)
;
return
false
;
}
if
(
!
scriptDef
)
{
console
.
error
(
ERR_DIRECTOR_INSTALL_EMPTY
id
)
;
return
false
;
}
gDirectorScripts
[
id
]
=
scriptDef
;
return
true
;
}
uninstall
:
function
(
id
)
{
if
(
id
in
gDirectorScripts
)
{
delete
gDirectorScripts
[
id
]
;
return
true
;
}
console
.
error
(
ERR_DIRECTOR_UNINSTALL_UNKNOWN
id
)
;
return
false
;
}
checkInstalled
:
function
(
id
)
{
return
(
this
.
list
(
)
.
indexOf
(
id
)
>
=
0
)
;
}
get
:
function
(
id
)
{
return
gDirectorScripts
[
id
]
;
}
list
:
function
(
)
{
return
Object
.
keys
(
gDirectorScripts
)
;
}
clear
:
function
(
)
{
gDirectorScripts
=
Object
.
create
(
null
)
;
}
}
;
exports
.
setupParentProcess
=
function
setupParentProcess
(
{
mm
prefix
}
)
{
setMessageManager
(
mm
)
;
function
handleChildRequest
(
msg
)
{
switch
(
msg
.
json
.
method
)
{
case
"
get
"
:
return
DirectorRegistry
.
get
(
msg
.
json
.
args
[
0
]
)
;
case
"
list
"
:
return
DirectorRegistry
.
list
(
)
;
default
:
console
.
error
(
ERR_DIRECTOR_PARENT_UNKNOWN_METHOD
msg
.
json
.
method
)
;
throw
new
Error
(
ERR_DIRECTOR_PARENT_UNKNOWN_METHOD
)
;
}
}
function
setMessageManager
(
newMM
)
{
if
(
mm
)
{
mm
.
removeMessageListener
(
"
debug
:
director
-
registry
-
request
"
handleChildRequest
)
;
}
mm
=
newMM
;
if
(
mm
)
{
mm
.
addMessageListener
(
"
debug
:
director
-
registry
-
request
"
handleChildRequest
)
;
}
}
return
{
onBrowserSwap
:
setMessageManager
onDisconnected
:
(
)
=
>
setMessageManager
(
null
)
}
;
}
;
const
DirectorRegistryActor
=
exports
.
DirectorRegistryActor
=
protocol
.
ActorClassWithSpec
(
directorRegistrySpec
{
initialize
:
function
(
conn
parentActor
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
this
.
maybeSetupChildProcess
(
conn
)
;
}
destroy
:
function
(
conn
)
{
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
conn
)
;
this
.
finalize
(
)
;
}
finalize
:
function
(
)
{
}
maybeSetupChildProcess
(
conn
)
{
if
(
!
DebuggerServer
.
isInChildProcess
)
{
return
;
}
const
{
sendSyncMessage
}
=
conn
.
parentMessageManager
;
conn
.
setupInParent
(
{
module
:
"
devtools
/
server
/
actors
/
director
-
registry
"
setupParent
:
"
setupParentProcess
"
}
)
;
DirectorRegistry
.
install
=
notImplemented
.
bind
(
null
"
install
"
)
;
DirectorRegistry
.
uninstall
=
notImplemented
.
bind
(
null
"
uninstall
"
)
;
DirectorRegistry
.
clear
=
notImplemented
.
bind
(
null
"
clear
"
)
;
DirectorRegistry
.
get
=
callParentProcess
.
bind
(
null
"
get
"
)
;
DirectorRegistry
.
list
=
callParentProcess
.
bind
(
null
"
list
"
)
;
function
notImplemented
(
method
)
{
console
.
error
(
ERR_DIRECTOR_CHILD_NOTIMPLEMENTED_METHOD
method
)
;
throw
Error
(
ERR_DIRECTOR_CHILD_NOTIMPLEMENTED_METHOD
)
;
}
function
callParentProcess
(
method
.
.
.
args
)
{
var
reply
=
sendSyncMessage
(
"
debug
:
director
-
registry
-
request
"
{
method
:
method
args
:
args
}
)
;
if
(
reply
.
length
=
=
=
0
)
{
console
.
error
(
ERR_DIRECTOR_CHILD_NO_REPLY
)
;
throw
Error
(
ERR_DIRECTOR_CHILD_NO_REPLY
)
;
}
else
if
(
reply
.
length
>
1
)
{
console
.
error
(
ERR_DIRECTOR_CHILD_MULTIPLE_REPLIES
)
;
throw
Error
(
ERR_DIRECTOR_CHILD_MULTIPLE_REPLIES
)
;
}
return
reply
[
0
]
;
}
}
install
:
function
(
id
{
scriptCode
scriptOptions
}
)
{
if
(
!
id
|
|
id
.
length
=
=
=
0
)
{
throw
Error
(
"
director
-
script
id
is
mandatory
"
)
;
}
if
(
!
scriptCode
)
{
throw
Error
(
"
director
-
script
scriptCode
is
mandatory
"
)
;
}
return
DirectorRegistry
.
install
(
id
{
scriptId
:
id
scriptCode
:
scriptCode
scriptOptions
:
scriptOptions
}
)
;
}
uninstall
:
function
(
id
)
{
return
DirectorRegistry
.
uninstall
(
id
)
;
}
list
:
function
(
)
{
return
DirectorRegistry
.
list
(
)
;
}
}
)
;
