"
use
strict
"
;
const
{
Ci
Cu
}
=
require
(
"
chrome
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
customHighlighterSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
highlighters
"
)
;
loader
.
lazyRequireGetter
(
this
"
isXUL
"
"
devtools
/
server
/
actors
/
highlighters
/
utils
/
markup
"
true
)
;
const
highlighterTypes
=
new
Map
(
)
;
const
isTypeRegistered
=
typeName
=
>
highlighterTypes
.
has
(
typeName
)
;
exports
.
isTypeRegistered
=
isTypeRegistered
;
const
register
=
(
typeName
modulePath
)
=
>
{
if
(
highlighterTypes
.
has
(
typeName
)
)
{
throw
Error
(
{
typeName
}
is
already
registered
.
)
;
}
highlighterTypes
.
set
(
typeName
modulePath
)
;
}
;
exports
.
register
=
register
;
exports
.
CustomHighlighterActor
=
protocol
.
ActorClassWithSpec
(
customHighlighterSpec
{
initialize
:
function
(
parent
typeName
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
null
)
;
this
.
_parent
=
parent
;
const
modulePath
=
highlighterTypes
.
get
(
typeName
)
;
if
(
!
modulePath
)
{
const
list
=
[
.
.
.
highlighterTypes
.
keys
(
)
]
;
throw
new
Error
(
{
typeName
}
isn
'
t
a
valid
highlighter
class
(
{
list
}
)
)
;
}
const
constructor
=
require
(
"
devtools
/
server
/
actors
/
highlighters
/
"
+
modulePath
)
[
typeName
]
;
if
(
!
isXUL
(
this
.
_parent
.
targetActor
.
window
)
|
|
constructor
.
XULSupported
)
{
this
.
_highlighterEnv
=
new
HighlighterEnvironment
(
)
;
this
.
_highlighterEnv
.
initFromTargetActor
(
parent
.
targetActor
)
;
this
.
_highlighter
=
new
constructor
(
this
.
_highlighterEnv
)
;
if
(
this
.
_highlighter
.
on
)
{
this
.
_highlighter
.
on
(
"
highlighter
-
event
"
this
.
_onHighlighterEvent
.
bind
(
this
)
)
;
}
}
else
{
throw
new
Error
(
"
Custom
"
+
typeName
+
"
highlighter
cannot
be
created
in
a
XUL
window
"
)
;
}
}
get
conn
(
)
{
return
this
.
_parent
&
&
this
.
_parent
.
conn
;
}
destroy
:
function
(
)
{
protocol
.
Actor
.
prototype
.
destroy
.
call
(
this
)
;
this
.
finalize
(
)
;
this
.
_parent
=
null
;
}
release
:
function
(
)
{
}
get
instance
(
)
{
return
this
.
_highlighter
;
}
show
:
function
(
node
options
)
{
if
(
!
this
.
_highlighter
)
{
return
null
;
}
const
rawNode
=
node
?
.
rawNode
;
return
this
.
_highlighter
.
show
(
rawNode
options
)
;
}
hide
:
function
(
)
{
if
(
this
.
_highlighter
)
{
this
.
_highlighter
.
hide
(
)
;
}
}
_onHighlighterEvent
:
function
(
data
)
{
this
.
emit
(
"
highlighter
-
event
"
data
)
;
}
finalize
:
function
(
)
{
if
(
this
.
_highlighter
)
{
if
(
this
.
_highlighter
.
off
)
{
this
.
_highlighter
.
off
(
"
highlighter
-
event
"
this
.
_onHighlighterEvent
.
bind
(
this
)
)
;
}
this
.
_highlighter
.
destroy
(
)
;
this
.
_highlighter
=
null
;
}
if
(
this
.
_highlighterEnv
)
{
this
.
_highlighterEnv
.
destroy
(
)
;
this
.
_highlighterEnv
=
null
;
}
}
}
)
;
function
HighlighterEnvironment
(
)
{
this
.
relayTargetActorWindowReady
=
this
.
relayTargetActorWindowReady
.
bind
(
this
)
;
this
.
relayTargetActorNavigate
=
this
.
relayTargetActorNavigate
.
bind
(
this
)
;
this
.
relayTargetActorWillNavigate
=
this
.
relayTargetActorWillNavigate
.
bind
(
this
)
;
EventEmitter
.
decorate
(
this
)
;
}
exports
.
HighlighterEnvironment
=
HighlighterEnvironment
;
HighlighterEnvironment
.
prototype
=
{
initFromTargetActor
:
function
(
targetActor
)
{
this
.
_targetActor
=
targetActor
;
this
.
_targetActor
.
on
(
"
window
-
ready
"
this
.
relayTargetActorWindowReady
)
;
this
.
_targetActor
.
on
(
"
navigate
"
this
.
relayTargetActorNavigate
)
;
this
.
_targetActor
.
on
(
"
will
-
navigate
"
this
.
relayTargetActorWillNavigate
)
;
}
initFromWindow
:
function
(
win
)
{
this
.
_win
=
win
;
const
self
=
this
;
this
.
listener
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
"
nsISupportsWeakReference
"
]
)
onStateChange
:
function
(
progress
request
flag
)
{
const
isStart
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_START
;
const
isStop
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
;
const
isWindow
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_IS_WINDOW
;
const
isDocument
=
flag
&
Ci
.
nsIWebProgressListener
.
STATE_IS_DOCUMENT
;
if
(
progress
.
DOMWindow
!
=
=
win
)
{
return
;
}
if
(
isDocument
&
&
isStart
)
{
self
.
emit
(
"
will
-
navigate
"
{
window
:
win
isTopLevel
:
true
}
)
;
}
if
(
isWindow
&
&
isStop
)
{
self
.
emit
(
"
navigate
"
{
window
:
win
isTopLevel
:
true
}
)
;
}
}
}
;
this
.
webProgress
.
addProgressListener
(
this
.
listener
Ci
.
nsIWebProgress
.
NOTIFY_STATE_WINDOW
|
Ci
.
nsIWebProgress
.
NOTIFY_STATE_DOCUMENT
)
;
}
get
isInitialized
(
)
{
return
this
.
_win
|
|
this
.
_targetActor
;
}
get
isXUL
(
)
{
return
isXUL
(
this
.
window
)
;
}
get
window
(
)
{
if
(
!
this
.
isInitialized
)
{
throw
new
Error
(
"
Initialize
HighlighterEnvironment
with
a
targetActor
"
+
"
or
window
first
"
)
;
}
const
win
=
this
.
_targetActor
?
this
.
_targetActor
.
window
:
this
.
_win
;
try
{
return
Cu
.
isDeadWrapper
(
win
)
?
null
:
win
;
}
catch
(
e
)
{
return
null
;
}
}
get
document
(
)
{
return
this
.
window
&
&
this
.
window
.
document
;
}
get
docShell
(
)
{
return
this
.
window
&
&
this
.
window
.
docShell
;
}
get
webProgress
(
)
{
return
(
this
.
docShell
&
&
this
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
)
;
}
get
pageListenerTarget
(
)
{
if
(
this
.
_targetActor
&
&
this
.
_targetActor
.
isRootActor
)
{
return
this
.
window
;
}
return
this
.
docShell
&
&
this
.
docShell
.
chromeEventHandler
;
}
relayTargetActorWindowReady
:
function
(
data
)
{
this
.
emit
(
"
window
-
ready
"
data
)
;
}
relayTargetActorNavigate
:
function
(
data
)
{
this
.
emit
(
"
navigate
"
data
)
;
}
relayTargetActorWillNavigate
:
function
(
data
)
{
this
.
emit
(
"
will
-
navigate
"
data
)
;
}
destroy
:
function
(
)
{
if
(
this
.
_targetActor
)
{
this
.
_targetActor
.
off
(
"
window
-
ready
"
this
.
relayTargetActorWindowReady
)
;
this
.
_targetActor
.
off
(
"
navigate
"
this
.
relayTargetActorNavigate
)
;
this
.
_targetActor
.
off
(
"
will
-
navigate
"
this
.
relayTargetActorWillNavigate
)
;
}
if
(
this
.
_win
)
{
try
{
this
.
webProgress
.
removeProgressListener
(
this
.
listener
)
;
}
catch
(
e
)
{
}
}
this
.
_targetActor
=
null
;
this
.
_win
=
null
;
}
}
;
register
(
"
AccessibleHighlighter
"
"
accessible
"
)
;
register
(
"
BoxModelHighlighter
"
"
box
-
model
"
)
;
register
(
"
CssGridHighlighter
"
"
css
-
grid
"
)
;
register
(
"
CssTransformHighlighter
"
"
css
-
transform
"
)
;
register
(
"
EyeDropper
"
"
eye
-
dropper
"
)
;
register
(
"
FlexboxHighlighter
"
"
flexbox
"
)
;
register
(
"
FontsHighlighter
"
"
fonts
"
)
;
register
(
"
GeometryEditorHighlighter
"
"
geometry
-
editor
"
)
;
register
(
"
MeasuringToolHighlighter
"
"
measuring
-
tool
"
)
;
register
(
"
PausedDebuggerOverlay
"
"
paused
-
debugger
"
)
;
register
(
"
RulersHighlighter
"
"
rulers
"
)
;
register
(
"
SelectorHighlighter
"
"
selector
"
)
;
register
(
"
ShapesHighlighter
"
"
shapes
"
)
;
register
(
"
TabbingOrderHighlighter
"
"
tabbing
-
order
"
)
;
