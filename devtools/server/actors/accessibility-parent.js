"
use
strict
"
;
const
{
Cc
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
PREF_ACCESSIBILITY_FORCE_DISABLED
=
"
accessibility
.
force_disabled
"
;
class
AccessibilityParent
{
constructor
(
mm
prefix
)
{
this
.
_msgName
=
debug
:
{
prefix
}
accessibility
;
this
.
onAccessibilityMessage
=
this
.
onAccessibilityMessage
.
bind
(
this
)
;
this
.
setMessageManager
(
mm
)
;
this
.
userPref
=
Services
.
prefs
.
getIntPref
(
PREF_ACCESSIBILITY_FORCE_DISABLED
)
;
Services
.
obs
.
addObserver
(
this
"
a11y
-
consumers
-
changed
"
)
;
Services
.
prefs
.
addObserver
(
PREF_ACCESSIBILITY_FORCE_DISABLED
this
)
;
if
(
this
.
enabled
&
&
!
this
.
accService
)
{
this
.
accService
=
Cc
[
"
mozilla
.
org
/
accessibilityService
;
1
"
]
.
getService
(
Ci
.
nsIAccessibilityService
)
;
}
this
.
messageManager
.
sendAsyncMessage
(
{
this
.
_msgName
}
:
event
{
topic
:
"
initialized
"
data
:
{
enabled
:
this
.
enabled
canBeDisabled
:
this
.
canBeDisabled
canBeEnabled
:
this
.
canBeEnabled
}
}
)
;
}
setMessageManager
(
mm
)
{
if
(
this
.
messageManager
=
=
=
mm
)
{
return
;
}
if
(
this
.
messageManager
)
{
let
oldMM
=
this
.
messageManager
;
oldMM
.
removeMessageListener
(
this
.
_msgName
this
.
onAccessibilityMessage
)
;
}
this
.
messageManager
=
mm
;
if
(
mm
)
{
mm
.
addMessageListener
(
this
.
_msgName
this
.
onAccessibilityMessage
)
;
}
}
onAccessibilityMessage
(
msg
)
{
let
{
action
}
=
msg
.
json
;
switch
(
action
)
{
case
"
enable
"
:
this
.
enable
(
)
;
break
;
case
"
disable
"
:
this
.
disable
(
)
;
break
;
case
"
disconnect
"
:
this
.
destroy
(
)
;
break
;
default
:
break
;
}
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
a11y
-
consumers
-
changed
"
)
{
let
{
PlatformAPI
}
=
JSON
.
parse
(
data
)
;
this
.
messageManager
.
sendAsyncMessage
(
{
this
.
_msgName
}
:
event
{
topic
:
"
can
-
be
-
disabled
-
change
"
data
:
!
PlatformAPI
}
)
;
}
else
if
(
!
this
.
disabling
&
&
topic
=
=
=
"
nsPref
:
changed
"
&
&
data
=
=
=
PREF_ACCESSIBILITY_FORCE_DISABLED
)
{
this
.
messageManager
.
sendAsyncMessage
(
{
this
.
_msgName
}
:
event
{
topic
:
"
can
-
be
-
enabled
-
change
"
data
:
Services
.
prefs
.
getIntPref
(
PREF_ACCESSIBILITY_FORCE_DISABLED
)
<
1
}
)
;
}
}
get
enabled
(
)
{
return
Services
.
appinfo
.
accessibilityEnabled
;
}
get
canBeDisabled
(
)
{
if
(
this
.
enabled
)
{
let
a11yService
=
Cc
[
"
mozilla
.
org
/
accessibilityService
;
1
"
]
.
getService
(
Ci
.
nsIAccessibilityService
)
;
let
{
PlatformAPI
}
=
JSON
.
parse
(
a11yService
.
getConsumers
(
)
)
;
return
!
PlatformAPI
;
}
return
true
;
}
get
canBeEnabled
(
)
{
return
Services
.
prefs
.
getIntPref
(
PREF_ACCESSIBILITY_FORCE_DISABLED
)
<
1
;
}
enable
(
)
{
if
(
this
.
enabled
|
|
!
this
.
canBeEnabled
)
{
return
;
}
this
.
accService
=
Cc
[
"
mozilla
.
org
/
accessibilityService
;
1
"
]
.
getService
(
Ci
.
nsIAccessibilityService
)
;
}
disable
(
)
{
if
(
!
this
.
enabled
|
|
!
this
.
canBeDisabled
)
{
return
;
}
this
.
disabling
=
true
;
this
.
accService
=
null
;
Services
.
prefs
.
setIntPref
(
PREF_ACCESSIBILITY_FORCE_DISABLED
1
)
;
Services
.
prefs
.
setIntPref
(
PREF_ACCESSIBILITY_FORCE_DISABLED
this
.
userPref
)
;
delete
this
.
disabling
;
}
destroy
(
)
{
Services
.
obs
.
removeObserver
(
this
"
a11y
-
consumers
-
changed
"
)
;
Services
.
prefs
.
removeObserver
(
PREF_ACCESSIBILITY_FORCE_DISABLED
this
)
;
this
.
setMessageManager
(
null
)
;
this
.
accService
=
null
;
}
}
function
setupParentProcess
(
{
mm
prefix
}
)
{
let
accessibility
=
new
AccessibilityParent
(
mm
prefix
)
;
return
{
onBrowserSwap
:
newMM
=
>
accessibility
.
setMessageManager
(
newMM
)
onDisconnected
:
(
)
=
>
{
accessibility
.
destroy
(
)
;
accessibility
=
null
;
}
}
;
}
exports
.
setupParentProcess
=
setupParentProcess
;
