"
use
strict
"
;
var
{
Cr
}
=
require
(
"
chrome
"
)
;
var
{
TabActor
tabPrototype
}
=
require
(
"
devtools
/
server
/
actors
/
tab
"
)
;
const
{
extend
}
=
require
(
"
devtools
/
shared
/
extend
"
)
;
const
{
ActorClassWithSpec
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
tabSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
tab
"
)
;
const
contentPrototype
=
extend
(
{
}
tabPrototype
)
;
contentPrototype
.
initialize
=
function
(
connection
chromeGlobal
)
{
this
.
_chromeGlobal
=
chromeGlobal
;
TabActor
.
prototype
.
initialize
.
call
(
this
connection
chromeGlobal
)
;
this
.
traits
.
reconfigure
=
false
;
this
.
_sendForm
=
this
.
_sendForm
.
bind
(
this
)
;
this
.
_chromeGlobal
.
addMessageListener
(
"
debug
:
form
"
this
.
_sendForm
)
;
Object
.
defineProperty
(
this
"
docShell
"
{
value
:
this
.
_chromeGlobal
.
docShell
configurable
:
true
}
)
;
}
;
Object
.
defineProperty
(
contentPrototype
"
title
"
{
get
:
function
(
)
{
return
this
.
window
.
document
.
title
;
}
enumerable
:
true
configurable
:
true
}
)
;
contentPrototype
.
exit
=
function
(
)
{
if
(
this
.
_sendForm
)
{
try
{
this
.
_chromeGlobal
.
removeMessageListener
(
"
debug
:
form
"
this
.
_sendForm
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_NULL_POINTER
)
{
throw
e
;
}
}
this
.
_sendForm
=
null
;
}
TabActor
.
prototype
.
exit
.
call
(
this
)
;
this
.
_chromeGlobal
=
null
;
}
;
contentPrototype
.
_sendForm
=
function
(
)
{
this
.
_chromeGlobal
.
sendAsyncMessage
(
"
debug
:
form
"
this
.
form
(
)
)
;
}
;
exports
.
ContentActor
=
ActorClassWithSpec
(
tabSpec
contentPrototype
)
;
