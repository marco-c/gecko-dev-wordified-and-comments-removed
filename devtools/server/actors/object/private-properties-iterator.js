"
use
strict
"
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
privatePropertiesIteratorSpec
}
=
require
(
"
devtools
/
shared
/
specs
/
private
-
properties
-
iterator
"
)
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
PrivatePropertiesIteratorActor
=
protocol
.
ActorClassWithSpec
(
privatePropertiesIteratorSpec
{
initialize
(
objectActor
conn
)
{
protocol
.
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
let
privateProperties
=
[
]
;
if
(
DevToolsUtils
.
isSafeDebuggerObject
(
objectActor
.
obj
)
)
{
try
{
privateProperties
=
objectActor
.
obj
.
getOwnPrivateProperties
(
)
;
}
catch
(
err
)
{
}
}
this
.
iterator
=
{
size
:
privateProperties
.
length
propertyDescription
(
index
)
{
const
symbol
=
privateProperties
[
index
]
;
return
{
name
:
symbol
.
description
descriptor
:
objectActor
.
_propertyDescriptor
(
symbol
)
}
;
}
}
;
}
form
(
)
{
return
{
type
:
this
.
typeName
actor
:
this
.
actorID
count
:
this
.
iterator
.
size
}
;
}
slice
(
{
start
count
}
)
{
const
privateProperties
=
[
]
;
for
(
let
i
=
start
m
=
start
+
count
;
i
<
m
;
i
+
+
)
{
privateProperties
.
push
(
this
.
iterator
.
propertyDescription
(
i
)
)
;
}
return
{
privateProperties
}
;
}
all
(
)
{
return
this
.
slice
(
{
start
:
0
count
:
this
.
iterator
.
size
}
)
;
}
}
)
;
exports
.
PrivatePropertiesIteratorActor
=
PrivatePropertiesIteratorActor
;
