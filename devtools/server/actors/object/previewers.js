"
use
strict
"
;
const
{
DevToolsServer
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
devtools
-
server
.
js
"
)
;
const
DevToolsUtils
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
ObjectUtils
"
"
resource
:
/
/
devtools
/
server
/
actors
/
object
/
utils
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
PropertyIterators
"
"
resource
:
/
/
devtools
/
server
/
actors
/
object
/
property
-
iterator
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
propertyDescriptor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
object
/
property
-
descriptor
.
js
"
true
)
;
const
OBJECT_PREVIEW_MAX_ITEMS
=
10
;
const
ERROR_CLASSNAMES
=
new
Set
(
[
"
Error
"
"
EvalError
"
"
RangeError
"
"
ReferenceError
"
"
SyntaxError
"
"
TypeError
"
"
URIError
"
"
InternalError
"
"
AggregateError
"
"
CompileError
"
"
DebuggeeWouldRun
"
"
LinkError
"
"
RuntimeError
"
"
Exception
"
]
)
;
const
ARRAY_LIKE_CLASSNAMES
=
new
Set
(
[
"
DOMStringList
"
"
DOMTokenList
"
"
CSSRuleList
"
"
MediaList
"
"
StyleSheetList
"
"
NamedNodeMap
"
"
FileList
"
"
NodeList
"
]
)
;
const
OBJECT_WITH_URL_CLASSNAMES
=
new
Set
(
[
"
CSSImportRule
"
"
CSSStyleSheet
"
"
Location
"
]
)
;
const
previewers
=
{
String
:
[
function
(
objectActor
grip
)
{
return
wrappedPrimitivePreviewer
(
"
String
"
String
objectActor
grip
)
;
}
]
Boolean
:
[
function
(
objectActor
grip
)
{
return
wrappedPrimitivePreviewer
(
"
Boolean
"
Boolean
objectActor
grip
)
;
}
]
Number
:
[
function
(
objectActor
grip
)
{
return
wrappedPrimitivePreviewer
(
"
Number
"
Number
objectActor
grip
)
;
}
]
Symbol
:
[
function
(
objectActor
grip
)
{
return
wrappedPrimitivePreviewer
(
"
Symbol
"
Symbol
objectActor
grip
)
;
}
]
Function
:
[
function
(
{
obj
hooks
}
grip
)
{
if
(
obj
.
name
)
{
grip
.
name
=
obj
.
name
;
}
if
(
obj
.
displayName
)
{
grip
.
displayName
=
obj
.
displayName
.
substr
(
0
500
)
;
}
if
(
obj
.
parameterNames
)
{
grip
.
parameterNames
=
obj
.
parameterNames
;
}
let
userDisplayName
;
try
{
userDisplayName
=
obj
.
getOwnPropertyDescriptor
(
"
displayName
"
)
;
}
catch
(
e
)
{
}
if
(
userDisplayName
&
&
typeof
userDisplayName
.
value
=
=
"
string
"
&
&
userDisplayName
.
value
)
{
grip
.
userDisplayName
=
hooks
.
createValueGrip
(
userDisplayName
.
value
)
;
}
grip
.
isAsync
=
obj
.
isAsyncFunction
;
grip
.
isGenerator
=
obj
.
isGeneratorFunction
;
if
(
obj
.
script
)
{
const
columnBase
=
obj
.
script
.
format
=
=
=
"
wasm
"
?
0
:
1
;
grip
.
location
=
{
url
:
obj
.
script
.
url
line
:
obj
.
script
.
startLine
column
:
obj
.
script
.
startColumn
-
columnBase
}
;
}
return
true
;
}
]
RegExp
:
[
function
(
objectActor
grip
)
{
let
str
;
if
(
isWorker
)
{
try
{
str
=
DevToolsUtils
.
callPropertyOnObject
(
objectActor
.
obj
"
toString
"
)
;
}
catch
(
e
)
{
grip
.
displayString
=
"
RegExp
with
overloaded
toString
"
;
}
}
else
{
const
{
RegExp
}
=
objectActor
.
targetActor
.
targetGlobal
;
str
=
RegExp
.
prototype
.
toString
.
call
(
objectActor
.
safeRawObj
)
;
}
if
(
typeof
str
!
=
"
string
"
)
{
return
false
;
}
grip
.
displayString
=
objectActor
.
hooks
.
createValueGrip
(
str
)
;
return
true
;
}
]
Date
:
[
function
(
objectActor
grip
)
{
let
time
;
if
(
isWorker
)
{
time
=
Date
.
prototype
.
getTime
.
call
(
objectActor
.
rawObj
)
;
}
else
{
const
{
Date
}
=
objectActor
.
targetActor
.
targetGlobal
;
time
=
Date
.
prototype
.
getTime
.
call
(
objectActor
.
safeRawObj
)
;
}
if
(
typeof
time
!
=
"
number
"
)
{
return
false
;
}
grip
.
preview
=
{
timestamp
:
objectActor
.
hooks
.
createValueGrip
(
time
)
}
;
return
true
;
}
]
Array
:
[
function
(
{
obj
rawObj
hooks
}
grip
)
{
const
length
=
ObjectUtils
.
getArrayLength
(
obj
)
;
grip
.
preview
=
{
kind
:
"
ArrayLike
"
length
:
length
}
;
if
(
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
items
=
(
grip
.
preview
.
items
=
[
]
)
;
for
(
let
i
=
0
;
i
<
length
;
+
+
i
)
{
if
(
rawObj
&
&
!
isWorker
)
{
const
desc
=
Object
.
getOwnPropertyDescriptor
(
Cu
.
waiveXrays
(
rawObj
)
i
)
;
if
(
desc
&
&
!
desc
.
get
&
&
!
desc
.
set
)
{
let
value
=
Cu
.
unwaiveXrays
(
desc
.
value
)
;
value
=
ObjectUtils
.
makeDebuggeeValueIfNeeded
(
obj
value
)
;
items
.
push
(
hooks
.
createValueGrip
(
value
)
)
;
}
else
if
(
!
desc
)
{
items
.
push
(
null
)
;
}
else
{
const
item
=
{
}
;
if
(
desc
.
get
)
{
let
getter
=
Cu
.
unwaiveXrays
(
desc
.
get
)
;
getter
=
ObjectUtils
.
makeDebuggeeValueIfNeeded
(
obj
getter
)
;
item
.
get
=
hooks
.
createValueGrip
(
getter
)
;
}
if
(
desc
.
set
)
{
let
setter
=
Cu
.
unwaiveXrays
(
desc
.
set
)
;
setter
=
ObjectUtils
.
makeDebuggeeValueIfNeeded
(
obj
setter
)
;
item
.
set
=
hooks
.
createValueGrip
(
setter
)
;
}
items
.
push
(
item
)
;
}
}
else
if
(
rawObj
&
&
!
obj
.
getOwnPropertyDescriptor
(
i
)
)
{
items
.
push
(
null
)
;
}
else
{
const
value
=
DevToolsUtils
.
getProperty
(
obj
i
)
;
items
.
push
(
hooks
.
createValueGrip
(
value
)
)
;
}
if
(
items
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
Set
:
[
function
(
objectActor
grip
)
{
const
size
=
DevToolsUtils
.
getProperty
(
objectActor
.
obj
"
size
"
)
;
if
(
typeof
size
!
=
"
number
"
)
{
return
false
;
}
grip
.
preview
=
{
kind
:
"
ArrayLike
"
length
:
size
}
;
if
(
objectActor
.
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
items
=
(
grip
.
preview
.
items
=
[
]
)
;
for
(
const
item
of
PropertyIterators
.
enumSetEntries
(
objectActor
)
)
{
items
.
push
(
item
)
;
if
(
items
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
WeakSet
:
[
function
(
objectActor
grip
)
{
const
enumEntries
=
PropertyIterators
.
enumWeakSetEntries
(
objectActor
)
;
grip
.
preview
=
{
kind
:
"
ArrayLike
"
length
:
enumEntries
.
size
}
;
if
(
objectActor
.
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
items
=
(
grip
.
preview
.
items
=
[
]
)
;
for
(
const
item
of
enumEntries
)
{
items
.
push
(
item
)
;
if
(
items
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
Map
:
[
function
(
objectActor
grip
)
{
const
size
=
DevToolsUtils
.
getProperty
(
objectActor
.
obj
"
size
"
)
;
if
(
typeof
size
!
=
"
number
"
)
{
return
false
;
}
grip
.
preview
=
{
kind
:
"
MapLike
"
size
:
size
}
;
if
(
objectActor
.
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
entries
=
(
grip
.
preview
.
entries
=
[
]
)
;
for
(
const
entry
of
PropertyIterators
.
enumMapEntries
(
objectActor
)
)
{
entries
.
push
(
entry
)
;
if
(
entries
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
WeakMap
:
[
function
(
objectActor
grip
)
{
const
enumEntries
=
PropertyIterators
.
enumWeakMapEntries
(
objectActor
)
;
grip
.
preview
=
{
kind
:
"
MapLike
"
size
:
enumEntries
.
size
}
;
if
(
objectActor
.
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
entries
=
(
grip
.
preview
.
entries
=
[
]
)
;
for
(
const
entry
of
enumEntries
)
{
entries
.
push
(
entry
)
;
if
(
entries
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
URLSearchParams
:
[
function
(
objectActor
grip
)
{
const
enumEntries
=
PropertyIterators
.
enumURLSearchParamsEntries
(
objectActor
)
;
grip
.
preview
=
{
kind
:
"
MapLike
"
size
:
enumEntries
.
size
}
;
if
(
objectActor
.
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
entries
=
(
grip
.
preview
.
entries
=
[
]
)
;
for
(
const
entry
of
enumEntries
)
{
entries
.
push
(
entry
)
;
if
(
entries
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
FormData
:
[
function
(
objectActor
grip
)
{
const
enumEntries
=
PropertyIterators
.
enumFormDataEntries
(
objectActor
)
;
grip
.
preview
=
{
kind
:
"
MapLike
"
size
:
enumEntries
.
size
}
;
if
(
objectActor
.
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
entries
=
(
grip
.
preview
.
entries
=
[
]
)
;
for
(
const
entry
of
enumEntries
)
{
entries
.
push
(
entry
)
;
if
(
entries
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
Headers
:
[
function
(
objectActor
grip
)
{
if
(
isWorker
)
{
return
false
;
}
const
enumEntries
=
PropertyIterators
.
enumHeadersEntries
(
objectActor
)
;
grip
.
preview
=
{
kind
:
"
MapLike
"
size
:
enumEntries
.
size
}
;
if
(
objectActor
.
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
entries
=
(
grip
.
preview
.
entries
=
[
]
)
;
for
(
const
entry
of
enumEntries
)
{
entries
.
push
(
entry
)
;
if
(
entries
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
HighlightRegistry
:
[
function
(
objectActor
grip
)
{
const
enumEntries
=
PropertyIterators
.
enumHighlightRegistryEntries
(
objectActor
)
;
grip
.
preview
=
{
kind
:
"
MapLike
"
size
:
enumEntries
.
size
}
;
if
(
objectActor
.
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
entries
=
(
grip
.
preview
.
entries
=
[
]
)
;
for
(
const
entry
of
enumEntries
)
{
entries
.
push
(
entry
)
;
if
(
entries
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
MIDIInputMap
:
[
function
(
objectActor
grip
)
{
const
enumEntries
=
PropertyIterators
.
enumMidiInputMapEntries
(
objectActor
)
;
grip
.
preview
=
{
kind
:
"
MapLike
"
size
:
enumEntries
.
size
}
;
if
(
objectActor
.
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
entries
=
(
grip
.
preview
.
entries
=
[
]
)
;
for
(
const
entry
of
enumEntries
)
{
entries
.
push
(
entry
)
;
if
(
entries
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
MIDIOutputMap
:
[
function
(
objectActor
grip
)
{
const
enumEntries
=
PropertyIterators
.
enumMidiOutputMapEntries
(
objectActor
)
;
grip
.
preview
=
{
kind
:
"
MapLike
"
size
:
enumEntries
.
size
}
;
if
(
objectActor
.
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
entries
=
(
grip
.
preview
.
entries
=
[
]
)
;
for
(
const
entry
of
enumEntries
)
{
entries
.
push
(
entry
)
;
if
(
entries
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
DOMStringMap
:
[
function
(
{
obj
hooks
safeRawObj
}
grip
)
{
if
(
!
safeRawObj
)
{
return
false
;
}
const
keys
=
obj
.
getOwnPropertyNames
(
)
;
grip
.
preview
=
{
kind
:
"
MapLike
"
size
:
keys
.
length
}
;
if
(
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
entries
=
(
grip
.
preview
.
entries
=
[
]
)
;
for
(
const
key
of
keys
)
{
const
value
=
ObjectUtils
.
makeDebuggeeValueIfNeeded
(
obj
safeRawObj
[
key
]
)
;
entries
.
push
(
[
key
hooks
.
createValueGrip
(
value
)
]
)
;
if
(
entries
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
Promise
:
[
function
(
{
obj
hooks
}
grip
)
{
const
{
state
value
reason
}
=
ObjectUtils
.
getPromiseState
(
obj
)
;
const
ownProperties
=
Object
.
create
(
null
)
;
ownProperties
[
"
<
state
>
"
]
=
{
value
:
state
}
;
let
ownPropertiesLength
=
1
;
if
(
hooks
.
getGripDepth
(
)
=
=
=
1
)
{
if
(
state
=
=
"
fulfilled
"
)
{
ownProperties
[
"
<
value
>
"
]
=
{
value
:
hooks
.
createValueGrip
(
value
)
}
;
+
+
ownPropertiesLength
;
}
else
if
(
state
=
=
"
rejected
"
)
{
ownProperties
[
"
<
reason
>
"
]
=
{
value
:
hooks
.
createValueGrip
(
reason
)
}
;
+
+
ownPropertiesLength
;
}
}
grip
.
preview
=
{
kind
:
"
Object
"
ownProperties
ownPropertiesLength
}
;
return
true
;
}
]
Proxy
:
[
function
(
{
obj
hooks
}
grip
)
{
if
(
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
hasTargetAndHandler
=
obj
.
isProxy
;
grip
.
preview
=
{
kind
:
"
Object
"
ownProperties
:
Object
.
create
(
null
)
ownPropertiesLength
:
2
*
hasTargetAndHandler
}
;
if
(
hasTargetAndHandler
)
{
Object
.
assign
(
grip
.
preview
.
ownProperties
{
"
<
target
>
"
:
{
value
:
hooks
.
createValueGrip
(
obj
.
proxyTarget
)
}
"
<
handler
>
"
:
{
value
:
hooks
.
createValueGrip
(
obj
.
proxyHandler
)
}
}
)
;
}
return
true
;
}
]
CustomStateSet
:
[
function
(
objectActor
grip
)
{
const
size
=
DevToolsUtils
.
getProperty
(
objectActor
.
obj
"
size
"
)
;
if
(
typeof
size
!
=
"
number
"
)
{
return
false
;
}
grip
.
preview
=
{
kind
:
"
ArrayLike
"
length
:
size
}
;
const
items
=
(
grip
.
preview
.
items
=
[
]
)
;
for
(
const
item
of
PropertyIterators
.
enumCustomStateSetEntries
(
objectActor
)
)
{
items
.
push
(
item
)
;
if
(
items
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
return
true
;
}
]
}
;
function
wrappedPrimitivePreviewer
(
className
classObj
objectActor
grip
)
{
const
{
safeRawObj
}
=
objectActor
;
let
v
=
null
;
try
{
v
=
classObj
.
prototype
.
valueOf
.
call
(
safeRawObj
)
;
}
catch
(
ex
)
{
return
false
;
}
if
(
v
=
=
=
null
)
{
return
false
;
}
const
{
obj
hooks
}
=
objectActor
;
const
canHandle
=
GenericObject
(
objectActor
grip
className
)
;
if
(
!
canHandle
)
{
return
false
;
}
grip
.
preview
.
wrappedValue
=
hooks
.
createValueGrip
(
ObjectUtils
.
makeDebuggeeValueIfNeeded
(
obj
v
)
)
;
return
true
;
}
function
GenericObject
(
objectActor
grip
className
)
{
const
{
obj
hooks
safeRawObj
}
=
objectActor
;
if
(
grip
.
preview
|
|
grip
.
displayString
|
|
hooks
.
getGripDepth
(
)
>
1
)
{
return
false
;
}
const
preview
=
(
grip
.
preview
=
{
kind
:
"
Object
"
ownProperties
:
Object
.
create
(
null
)
}
)
;
const
names
=
ObjectUtils
.
getPropNamesFromObject
(
obj
safeRawObj
)
;
preview
.
ownPropertiesLength
=
names
.
length
;
let
length
i
=
0
;
let
specialStringBehavior
=
className
=
=
=
"
String
"
;
if
(
specialStringBehavior
)
{
length
=
DevToolsUtils
.
getProperty
(
obj
"
length
"
)
;
if
(
typeof
length
!
=
"
number
"
)
{
specialStringBehavior
=
false
;
}
}
for
(
const
name
of
names
)
{
if
(
specialStringBehavior
&
&
/
^
[
0
-
9
]
+
/
.
test
(
name
)
)
{
const
num
=
parseInt
(
name
10
)
;
if
(
num
.
toString
(
)
=
=
=
name
&
&
num
>
=
0
&
&
num
<
length
)
{
continue
;
}
}
const
desc
=
propertyDescriptor
(
objectActor
name
true
)
;
if
(
!
desc
)
{
continue
;
}
preview
.
ownProperties
[
name
]
=
desc
;
if
(
+
+
i
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
if
(
i
=
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
return
true
;
}
const
privatePropertiesSymbols
=
ObjectUtils
.
getSafePrivatePropertiesSymbols
(
obj
)
;
if
(
privatePropertiesSymbols
.
length
>
0
)
{
preview
.
privatePropertiesLength
=
privatePropertiesSymbols
.
length
;
preview
.
privateProperties
=
[
]
;
for
(
const
privateProperty
of
privatePropertiesSymbols
)
{
if
(
!
privateProperty
.
description
|
|
!
privateProperty
.
description
.
startsWith
(
"
#
"
)
)
{
continue
;
}
const
descriptor
=
propertyDescriptor
(
objectActor
privateProperty
)
;
if
(
!
descriptor
)
{
continue
;
}
preview
.
privateProperties
.
push
(
Object
.
assign
(
{
descriptor
}
hooks
.
createValueGrip
(
privateProperty
)
)
)
;
if
(
+
+
i
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
}
if
(
i
=
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
return
true
;
}
const
symbols
=
ObjectUtils
.
getSafeOwnPropertySymbols
(
obj
)
;
if
(
symbols
.
length
>
0
)
{
preview
.
ownSymbolsLength
=
symbols
.
length
;
preview
.
ownSymbols
=
[
]
;
for
(
const
symbol
of
symbols
)
{
const
descriptor
=
propertyDescriptor
(
objectActor
symbol
true
)
;
if
(
!
descriptor
)
{
continue
;
}
preview
.
ownSymbols
.
push
(
Object
.
assign
(
{
descriptor
}
hooks
.
createValueGrip
(
symbol
)
)
)
;
if
(
+
+
i
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
}
if
(
i
=
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
return
true
;
}
const
safeGetterValues
=
objectActor
.
_findSafeGetterValues
(
Object
.
keys
(
preview
.
ownProperties
)
OBJECT_PREVIEW_MAX_ITEMS
-
i
)
;
if
(
Object
.
keys
(
safeGetterValues
)
.
length
)
{
preview
.
safeGetterValues
=
safeGetterValues
;
}
return
true
;
}
previewers
.
Object
=
[
function
TypedArray
(
{
obj
hooks
}
grip
)
{
if
(
!
ObjectUtils
.
isTypedArray
(
obj
)
)
{
return
false
;
}
grip
.
preview
=
{
kind
:
"
ArrayLike
"
length
:
ObjectUtils
.
getArrayLength
(
obj
)
}
;
if
(
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
previewLength
=
Math
.
min
(
OBJECT_PREVIEW_MAX_ITEMS
grip
.
preview
.
length
)
;
grip
.
preview
.
items
=
[
]
;
for
(
let
i
=
0
;
i
<
previewLength
;
i
+
+
)
{
const
desc
=
obj
.
getOwnPropertyDescriptor
(
i
)
;
if
(
!
desc
)
{
break
;
}
grip
.
preview
.
items
.
push
(
desc
.
value
)
;
}
return
true
;
}
function
Error
(
objectActor
grip
className
)
{
if
(
!
ERROR_CLASSNAMES
.
has
(
className
)
)
{
return
false
;
}
const
{
hooks
obj
}
=
objectActor
;
const
name
=
DevToolsUtils
.
getProperty
(
obj
"
name
"
true
)
;
const
msg
=
DevToolsUtils
.
getProperty
(
obj
"
message
"
true
)
;
const
stack
=
DevToolsUtils
.
getProperty
(
obj
"
stack
"
)
;
const
fileName
=
DevToolsUtils
.
getProperty
(
obj
"
fileName
"
)
;
const
lineNumber
=
DevToolsUtils
.
getProperty
(
obj
"
lineNumber
"
)
;
const
columnNumber
=
DevToolsUtils
.
getProperty
(
obj
"
columnNumber
"
)
;
grip
.
preview
=
{
kind
:
"
Error
"
name
:
hooks
.
createValueGrip
(
name
)
message
:
hooks
.
createValueGrip
(
msg
)
stack
:
hooks
.
createValueGrip
(
stack
)
fileName
:
hooks
.
createValueGrip
(
fileName
)
lineNumber
:
hooks
.
createValueGrip
(
lineNumber
)
columnNumber
:
hooks
.
createValueGrip
(
columnNumber
)
}
;
const
errorHasCause
=
obj
.
getOwnPropertyNames
(
)
.
includes
(
"
cause
"
)
;
if
(
errorHasCause
)
{
grip
.
preview
.
cause
=
hooks
.
createValueGrip
(
DevToolsUtils
.
getProperty
(
obj
"
cause
"
true
)
)
;
}
return
true
;
}
function
CSSMediaRule
(
objectActor
grip
className
)
{
const
{
safeRawObj
}
=
objectActor
;
if
(
!
safeRawObj
|
|
className
!
=
"
CSSMediaRule
"
|
|
isWorker
)
{
return
false
;
}
const
{
hooks
}
=
objectActor
;
grip
.
preview
=
{
kind
:
"
ObjectWithText
"
text
:
hooks
.
createValueGrip
(
safeRawObj
.
conditionText
)
}
;
return
true
;
}
function
CSSStyleRule
(
objectActor
grip
className
)
{
const
{
safeRawObj
}
=
objectActor
;
if
(
!
safeRawObj
|
|
className
!
=
"
CSSStyleRule
"
|
|
isWorker
)
{
return
false
;
}
const
{
hooks
}
=
objectActor
;
grip
.
preview
=
{
kind
:
"
ObjectWithText
"
text
:
hooks
.
createValueGrip
(
safeRawObj
.
selectorText
)
}
;
return
true
;
}
function
ObjectWithURL
(
objectActor
grip
className
)
{
const
{
safeRawObj
}
=
objectActor
;
if
(
isWorker
|
|
!
safeRawObj
)
{
return
false
;
}
const
isWindow
=
Window
.
isInstance
(
safeRawObj
)
;
if
(
!
OBJECT_WITH_URL_CLASSNAMES
.
has
(
className
)
&
&
!
isWindow
)
{
return
false
;
}
const
{
hooks
}
=
objectActor
;
let
url
;
if
(
isWindow
&
&
safeRawObj
.
location
)
{
try
{
url
=
safeRawObj
.
location
.
href
;
}
catch
(
e
)
{
url
=
safeRawObj
.
browsingContext
?
.
embedderElement
?
.
src
|
|
"
Restricted
"
;
}
}
else
if
(
safeRawObj
.
href
)
{
url
=
safeRawObj
.
href
;
}
else
{
return
false
;
}
grip
.
preview
=
{
kind
:
"
ObjectWithURL
"
url
:
hooks
.
createValueGrip
(
url
)
}
;
return
true
;
}
function
ArrayLike
(
objectActor
grip
className
)
{
const
{
safeRawObj
}
=
objectActor
;
if
(
!
safeRawObj
|
|
!
ARRAY_LIKE_CLASSNAMES
.
has
(
className
)
|
|
typeof
safeRawObj
.
length
!
=
"
number
"
|
|
isWorker
)
{
return
false
;
}
const
{
obj
hooks
}
=
objectActor
;
grip
.
preview
=
{
kind
:
"
ArrayLike
"
length
:
safeRawObj
.
length
}
;
if
(
hooks
.
getGripDepth
(
)
>
1
)
{
return
true
;
}
const
items
=
(
grip
.
preview
.
items
=
[
]
)
;
for
(
let
i
=
0
;
i
<
safeRawObj
.
length
&
&
items
.
length
<
OBJECT_PREVIEW_MAX_ITEMS
;
i
+
+
)
{
const
value
=
ObjectUtils
.
makeDebuggeeValueIfNeeded
(
obj
safeRawObj
[
i
]
)
;
items
.
push
(
hooks
.
createValueGrip
(
value
)
)
;
}
return
true
;
}
function
CSSStyleDeclaration
(
objectActor
grip
className
)
{
const
{
safeRawObj
}
=
objectActor
;
if
(
!
safeRawObj
|
|
(
className
!
=
"
CSSStyleDeclaration
"
&
&
className
!
=
"
CSS2Properties
"
)
|
|
isWorker
)
{
return
false
;
}
const
{
hooks
}
=
objectActor
;
grip
.
preview
=
{
kind
:
"
MapLike
"
size
:
safeRawObj
.
length
}
;
const
entries
=
(
grip
.
preview
.
entries
=
[
]
)
;
for
(
let
i
=
0
;
i
<
OBJECT_PREVIEW_MAX_ITEMS
&
&
i
<
safeRawObj
.
length
;
i
+
+
)
{
const
prop
=
safeRawObj
[
i
]
;
const
value
=
safeRawObj
.
getPropertyValue
(
prop
)
;
entries
.
push
(
[
prop
hooks
.
createValueGrip
(
value
)
]
)
;
}
return
true
;
}
function
DOMNode
(
objectActor
grip
className
)
{
const
{
safeRawObj
}
=
objectActor
;
if
(
className
=
=
"
Object
"
|
|
!
safeRawObj
|
|
!
Node
.
isInstance
(
safeRawObj
)
|
|
isWorker
)
{
return
false
;
}
const
{
obj
hooks
}
=
objectActor
;
const
preview
=
(
grip
.
preview
=
{
kind
:
"
DOMNode
"
nodeType
:
safeRawObj
.
nodeType
nodeName
:
safeRawObj
.
nodeName
isConnected
:
safeRawObj
.
isConnected
=
=
=
true
}
)
;
if
(
safeRawObj
.
nodeType
=
=
safeRawObj
.
DOCUMENT_NODE
&
&
safeRawObj
.
location
)
{
preview
.
location
=
hooks
.
createValueGrip
(
safeRawObj
.
location
.
href
)
;
}
else
if
(
obj
.
class
=
=
"
DocumentFragment
"
)
{
preview
.
childNodesLength
=
safeRawObj
.
childNodes
.
length
;
if
(
hooks
.
getGripDepth
(
)
<
2
)
{
preview
.
childNodes
=
[
]
;
for
(
const
node
of
safeRawObj
.
childNodes
)
{
const
actor
=
hooks
.
createValueGrip
(
obj
.
makeDebuggeeValue
(
node
)
)
;
preview
.
childNodes
.
push
(
actor
)
;
if
(
preview
.
childNodes
.
length
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
}
}
else
if
(
Element
.
isInstance
(
safeRawObj
)
)
{
if
(
safeRawObj
.
namespaceURI
=
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
)
{
preview
.
nodeName
=
preview
.
nodeName
.
toLowerCase
(
)
;
}
preview
.
attributes
=
{
}
;
preview
.
attributesLength
=
safeRawObj
.
attributes
.
length
;
for
(
const
attr
of
safeRawObj
.
attributes
)
{
preview
.
attributes
[
attr
.
nodeName
]
=
hooks
.
createValueGrip
(
attr
.
value
)
;
}
}
else
if
(
obj
.
class
=
=
"
Attr
"
)
{
preview
.
value
=
hooks
.
createValueGrip
(
safeRawObj
.
value
)
;
}
else
if
(
obj
.
class
=
=
"
Text
"
|
|
obj
.
class
=
=
"
CDATASection
"
|
|
obj
.
class
=
=
"
Comment
"
)
{
preview
.
textContent
=
hooks
.
createValueGrip
(
safeRawObj
.
textContent
)
;
}
return
true
;
}
function
DOMEvent
(
objectActor
grip
)
{
const
{
safeRawObj
}
=
objectActor
;
if
(
!
safeRawObj
|
|
!
Event
.
isInstance
(
safeRawObj
)
|
|
isWorker
)
{
return
false
;
}
const
{
obj
hooks
}
=
objectActor
;
const
preview
=
(
grip
.
preview
=
{
kind
:
"
DOMEvent
"
type
:
safeRawObj
.
type
properties
:
Object
.
create
(
null
)
}
)
;
if
(
hooks
.
getGripDepth
(
)
<
2
)
{
const
target
=
obj
.
makeDebuggeeValue
(
safeRawObj
.
target
)
;
preview
.
target
=
hooks
.
createValueGrip
(
target
)
;
}
if
(
obj
.
class
=
=
"
KeyboardEvent
"
)
{
preview
.
eventKind
=
"
key
"
;
preview
.
modifiers
=
ObjectUtils
.
getModifiersForEvent
(
safeRawObj
)
;
}
const
props
=
ObjectUtils
.
getPropsForEvent
(
obj
.
class
)
;
for
(
const
prop
of
props
)
{
let
value
=
safeRawObj
[
prop
]
;
if
(
ObjectUtils
.
isObjectOrFunction
(
value
)
)
{
if
(
hooks
.
getGripDepth
(
)
>
1
)
{
continue
;
}
value
=
obj
.
makeDebuggeeValue
(
value
)
;
}
preview
.
properties
[
prop
]
=
hooks
.
createValueGrip
(
value
)
;
}
if
(
!
props
.
length
)
{
let
i
=
0
;
for
(
const
prop
in
safeRawObj
)
{
let
value
=
safeRawObj
[
prop
]
;
if
(
prop
=
=
"
target
"
|
|
prop
=
=
"
type
"
|
|
value
=
=
=
null
|
|
typeof
value
=
=
"
function
"
)
{
continue
;
}
if
(
value
&
&
typeof
value
=
=
"
object
"
)
{
if
(
hooks
.
getGripDepth
(
)
>
1
)
{
continue
;
}
value
=
obj
.
makeDebuggeeValue
(
value
)
;
}
preview
.
properties
[
prop
]
=
hooks
.
createValueGrip
(
value
)
;
if
(
+
+
i
=
=
OBJECT_PREVIEW_MAX_ITEMS
)
{
break
;
}
}
}
return
true
;
}
function
DOMException
(
objectActor
grip
className
)
{
const
{
safeRawObj
}
=
objectActor
;
if
(
!
safeRawObj
|
|
className
!
=
=
"
DOMException
"
|
|
isWorker
)
{
return
false
;
}
const
{
hooks
}
=
objectActor
;
grip
.
preview
=
{
kind
:
"
DOMException
"
name
:
hooks
.
createValueGrip
(
safeRawObj
.
name
)
message
:
hooks
.
createValueGrip
(
safeRawObj
.
message
)
code
:
hooks
.
createValueGrip
(
safeRawObj
.
code
)
result
:
hooks
.
createValueGrip
(
safeRawObj
.
result
)
filename
:
hooks
.
createValueGrip
(
safeRawObj
.
filename
)
lineNumber
:
hooks
.
createValueGrip
(
safeRawObj
.
lineNumber
)
columnNumber
:
hooks
.
createValueGrip
(
safeRawObj
.
columnNumber
)
stack
:
hooks
.
createValueGrip
(
safeRawObj
.
stack
)
}
;
return
true
;
}
function
Object
(
objectActor
grip
className
)
{
return
GenericObject
(
objectActor
grip
className
)
;
}
]
;
module
.
exports
=
previewers
;
