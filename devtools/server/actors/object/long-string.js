"
use
strict
"
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
function
LongStringActor
(
string
)
{
this
.
string
=
string
;
this
.
stringLength
=
string
.
length
;
}
LongStringActor
.
prototype
=
{
actorPrefix
:
"
longString
"
rawValue
:
function
(
)
{
return
this
.
string
;
}
destroy
:
function
(
)
{
this
.
_releaseActor
(
)
;
}
grip
:
function
(
)
{
return
{
type
:
"
longString
"
initial
:
this
.
string
.
substring
(
0
DebuggerServer
.
LONG_STRING_INITIAL_LENGTH
)
length
:
this
.
stringLength
actor
:
this
.
actorID
}
;
}
onSubstring
:
function
(
request
)
{
return
{
from
:
this
.
actorID
substring
:
this
.
string
.
substring
(
request
.
start
request
.
end
)
}
;
}
onRelease
:
function
(
)
{
this
.
_releaseActor
(
)
;
this
.
registeredPool
.
removeActor
(
this
)
;
return
{
}
;
}
_releaseActor
:
function
(
)
{
if
(
this
.
registeredPool
&
&
this
.
registeredPool
.
longStringActors
)
{
delete
this
.
registeredPool
.
longStringActors
[
this
.
string
]
;
}
}
}
;
LongStringActor
.
prototype
.
requestTypes
=
{
substring
:
LongStringActor
.
prototype
.
onSubstring
release
:
LongStringActor
.
prototype
.
onRelease
}
;
function
longStringGrip
(
str
pool
)
{
if
(
!
pool
.
longStringActors
)
{
pool
.
longStringActors
=
{
}
;
}
if
(
pool
.
longStringActors
.
hasOwnProperty
(
str
)
)
{
return
pool
.
longStringActors
[
str
]
.
grip
(
)
;
}
const
actor
=
new
LongStringActor
(
str
)
;
pool
.
addActor
(
actor
)
;
pool
.
longStringActors
[
str
]
=
actor
;
return
actor
.
grip
(
)
;
}
module
.
exports
=
{
LongStringActor
longStringGrip
}
;
