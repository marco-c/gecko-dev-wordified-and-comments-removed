"
use
strict
"
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
function
SymbolIteratorActor
(
objectActor
)
{
let
symbols
=
[
]
;
if
(
DevToolsUtils
.
isSafeDebuggerObject
(
objectActor
.
obj
)
)
{
try
{
symbols
=
objectActor
.
obj
.
getOwnPropertySymbols
(
)
;
}
catch
(
err
)
{
}
}
this
.
iterator
=
{
size
:
symbols
.
length
symbolDescription
(
index
)
{
const
symbol
=
symbols
[
index
]
;
return
{
name
:
symbol
.
toString
(
)
descriptor
:
objectActor
.
_propertyDescriptor
(
symbol
)
}
;
}
}
;
}
SymbolIteratorActor
.
prototype
=
{
actorPrefix
:
"
symbolIterator
"
grip
(
)
{
return
{
type
:
this
.
actorPrefix
actor
:
this
.
actorID
count
:
this
.
iterator
.
size
}
;
}
slice
(
{
start
count
}
)
{
let
ownSymbols
=
[
]
;
for
(
let
i
=
start
m
=
start
+
count
;
i
<
m
;
i
+
+
)
{
ownSymbols
.
push
(
this
.
iterator
.
symbolDescription
(
i
)
)
;
}
return
{
ownSymbols
}
;
}
all
(
)
{
return
this
.
slice
(
{
start
:
0
count
:
this
.
iterator
.
size
}
)
;
}
}
;
SymbolIteratorActor
.
prototype
.
requestTypes
=
{
"
slice
"
:
SymbolIteratorActor
.
prototype
.
slice
"
all
"
:
SymbolIteratorActor
.
prototype
.
all
}
;
exports
.
SymbolIteratorActor
=
SymbolIteratorActor
;
