"
use
strict
"
;
const
{
Pool
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
loader
.
lazyRequireGetter
(
this
"
ObjectActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
object
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
PauseScopedObjectActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
pause
-
scoped
.
js
"
true
)
;
class
ObjectActorPool
extends
Pool
{
constructor
(
threadActor
label
uniqueActorPerValue
=
false
)
{
super
(
threadActor
.
conn
label
)
;
this
.
threadActor
=
threadActor
;
this
.
uniqueActorPerValue
=
uniqueActorPerValue
;
}
objectActors
=
new
WeakMap
(
)
;
createObjectGrip
(
object
depth
objectActorAttributes
=
{
}
)
{
if
(
this
.
uniqueActorPerValue
)
{
if
(
this
.
objectActors
.
has
(
object
)
)
{
return
this
.
objectActors
.
get
(
object
)
.
form
(
{
depth
}
)
;
}
if
(
this
.
threadActor
.
threadLifetimePool
.
objectActors
.
has
(
object
)
)
{
return
this
.
threadActor
.
threadLifetimePool
.
objectActors
.
get
(
object
)
.
form
(
{
depth
}
)
;
}
}
const
isGripForThreadActor
=
this
=
=
this
.
threadActor
.
threadLifetimePool
|
|
this
=
=
this
.
threadActor
.
pauseLifetimePool
;
const
ActorClass
=
isGripForThreadActor
?
PauseScopedObjectActor
:
ObjectActor
;
const
actor
=
new
ActorClass
(
this
.
threadActor
object
{
.
.
.
objectActorAttributes
}
)
;
this
.
manage
(
actor
)
;
if
(
this
.
uniqueActorPerValue
)
{
this
.
objectActors
.
set
(
object
actor
)
;
}
return
actor
.
form
(
{
depth
}
)
;
}
}
exports
.
ObjectActorPool
=
ObjectActorPool
;
