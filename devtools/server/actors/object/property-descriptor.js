"
use
strict
"
;
const
DevToolsUtils
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
{
isStorage
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
object
/
utils
.
js
"
)
;
function
propertyDescriptor
(
objectActor
name
onlyEnumerable
)
{
if
(
!
DevToolsUtils
.
isSafeDebuggerObject
(
objectActor
.
obj
)
)
{
return
undefined
;
}
let
desc
;
try
{
desc
=
objectActor
.
obj
.
getOwnPropertyDescriptor
(
name
)
;
}
catch
(
e
)
{
return
{
configurable
:
false
writable
:
false
enumerable
:
false
value
:
e
.
name
}
;
}
if
(
isStorage
(
objectActor
.
obj
)
)
{
if
(
name
=
=
=
"
length
"
)
{
return
undefined
;
}
return
desc
;
}
if
(
!
desc
|
|
(
onlyEnumerable
&
&
!
desc
.
enumerable
)
)
{
return
undefined
;
}
const
retval
=
{
configurable
:
desc
.
configurable
enumerable
:
desc
.
enumerable
}
;
const
{
rawObj
}
=
objectActor
;
if
(
"
value
"
in
desc
)
{
retval
.
writable
=
desc
.
writable
;
retval
.
value
=
objectActor
.
hooks
.
createValueGrip
(
desc
.
value
)
;
}
else
if
(
objectActor
.
threadActor
.
getWatchpoint
(
rawObj
name
.
toString
(
)
)
)
{
const
watchpoint
=
objectActor
.
threadActor
.
getWatchpoint
(
rawObj
name
.
toString
(
)
)
;
retval
.
value
=
objectActor
.
hooks
.
createValueGrip
(
watchpoint
.
desc
.
value
)
;
retval
.
watchpoint
=
watchpoint
.
watchpointType
;
}
else
{
if
(
"
get
"
in
desc
)
{
retval
.
get
=
objectActor
.
hooks
.
createValueGrip
(
desc
.
get
)
;
}
if
(
"
set
"
in
desc
)
{
retval
.
set
=
objectActor
.
hooks
.
createValueGrip
(
desc
.
set
)
;
}
}
return
retval
;
}
exports
.
propertyDescriptor
=
propertyDescriptor
;
