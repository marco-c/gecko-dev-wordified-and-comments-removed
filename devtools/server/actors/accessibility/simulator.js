"
use
strict
"
;
const
{
Actor
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
simulatorSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
accessibility
.
js
"
)
;
const
{
simulation
:
{
COLOR_TRANSFORMATION_MATRICES
}
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
accessibility
/
constants
.
js
"
)
;
class
SimulatorActor
extends
Actor
{
constructor
(
conn
targetActor
)
{
super
(
conn
simulatorSpec
)
;
this
.
targetActor
=
targetActor
;
}
simulate
(
options
)
{
if
(
options
.
types
.
length
>
1
)
{
return
false
;
}
return
this
.
setColorMatrix
(
COLOR_TRANSFORMATION_MATRICES
[
options
.
types
.
length
=
=
=
1
?
options
.
types
[
0
]
:
"
NONE
"
]
)
;
}
setColorMatrix
(
colorMatrix
)
{
if
(
!
this
.
docShell
)
{
return
false
;
}
try
{
this
.
docShell
.
setColorMatrix
(
colorMatrix
)
;
}
catch
(
error
)
{
return
false
;
}
return
true
;
}
disable
(
)
{
this
.
simulate
(
{
types
:
[
]
}
)
;
}
destroy
(
)
{
super
.
destroy
(
)
;
this
.
disable
(
)
;
this
.
targetActor
=
null
;
}
get
docShell
(
)
{
return
this
.
targetActor
&
&
this
.
targetActor
.
docShell
;
}
}
exports
.
SimulatorActor
=
SimulatorActor
;
