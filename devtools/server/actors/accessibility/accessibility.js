"
use
strict
"
;
const
{
Actor
ActorClassWithSpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
protocol
.
js
"
)
;
const
{
accessibilitySpec
}
=
require
(
"
resource
:
/
/
devtools
/
shared
/
specs
/
accessibility
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
AccessibleWalkerActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
accessibility
/
walker
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
SimulatorActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
accessibility
/
simulator
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
isWebRenderEnabled
"
"
resource
:
/
/
devtools
/
server
/
actors
/
utils
/
accessibility
.
js
"
true
)
;
const
AccessibilityActor
=
ActorClassWithSpec
(
accessibilitySpec
{
initialize
(
conn
targetActor
)
{
Actor
.
prototype
.
initialize
.
call
(
this
conn
)
;
Services
.
obs
.
addObserver
(
this
"
a11y
-
init
-
or
-
shutdown
"
)
;
this
.
targetActor
=
targetActor
;
}
getTraits
(
)
{
return
{
tabbingOrder
:
true
}
;
}
bootstrap
(
)
{
return
{
enabled
:
this
.
enabled
}
;
}
get
enabled
(
)
{
return
Services
.
appinfo
.
accessibilityEnabled
;
}
observe
(
subject
topic
data
)
{
const
enabled
=
data
=
=
=
"
1
"
;
if
(
enabled
&
&
this
.
enabled
)
{
this
.
emit
(
"
init
"
)
;
}
else
if
(
!
enabled
&
&
!
this
.
enabled
)
{
if
(
this
.
walker
)
{
this
.
walker
.
reset
(
)
;
}
this
.
emit
(
"
shutdown
"
)
;
}
}
getWalker
(
)
{
if
(
!
this
.
walker
)
{
this
.
walker
=
new
AccessibleWalkerActor
(
this
.
conn
this
.
targetActor
)
;
this
.
manage
(
this
.
walker
)
;
}
return
this
.
walker
;
}
getSimulator
(
)
{
if
(
!
isWebRenderEnabled
(
this
.
targetActor
.
window
)
)
{
return
null
;
}
if
(
!
this
.
simulator
)
{
this
.
simulator
=
new
SimulatorActor
(
this
.
conn
this
.
targetActor
)
;
this
.
manage
(
this
.
simulator
)
;
}
return
this
.
simulator
;
}
async
destroy
(
)
{
Actor
.
prototype
.
destroy
.
call
(
this
)
;
Services
.
obs
.
removeObserver
(
this
"
a11y
-
init
-
or
-
shutdown
"
)
;
this
.
walker
=
null
;
this
.
targetActor
=
null
;
}
}
)
;
exports
.
AccessibilityActor
=
AccessibilityActor
;
