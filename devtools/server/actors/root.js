"
use
strict
"
;
const
{
Cu
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
{
Pool
}
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
LazyPool
createExtraActors
}
=
require
(
"
devtools
/
shared
/
protocol
/
lazy
-
pool
"
)
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
loader
.
lazyRequireGetter
(
this
"
ChromeWindowTargetActor
"
"
devtools
/
server
/
actors
/
targets
/
chrome
-
window
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ContentProcessTargetActor
"
"
devtools
/
server
/
actors
/
targets
/
content
-
process
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ParentProcessTargetActor
"
"
devtools
/
server
/
actors
/
targets
/
parent
-
process
"
true
)
;
function
RootActor
(
connection
parameters
)
{
this
.
conn
=
connection
;
this
.
_parameters
=
parameters
;
this
.
_onTabListChanged
=
this
.
onTabListChanged
.
bind
(
this
)
;
this
.
_onAddonListChanged
=
this
.
onAddonListChanged
.
bind
(
this
)
;
this
.
_onWorkerListChanged
=
this
.
onWorkerListChanged
.
bind
(
this
)
;
this
.
_onServiceWorkerRegistrationListChanged
=
this
.
onServiceWorkerRegistrationListChanged
.
bind
(
this
)
;
this
.
_onProcessListChanged
=
this
.
onProcessListChanged
.
bind
(
this
)
;
this
.
_extraActors
=
{
}
;
this
.
_globalActorPool
=
new
LazyPool
(
this
.
conn
)
;
this
.
_parentProcessTargetActor
=
null
;
this
.
_processActors
=
new
Map
(
)
;
}
RootActor
.
prototype
=
{
constructor
:
RootActor
applicationType
:
"
browser
"
traits
:
{
sources
:
true
networkMonitor
:
true
storageInspector
:
true
storageInspectorReadOnly
:
true
conditionalBreakpoints
:
true
debuggerSourceActors
:
true
wasmBinarySource
:
true
bulk
:
true
directorScripts
:
true
noBlackBoxing
:
false
noPrettyPrinting
:
true
memoryActorAllocations
:
true
webConsoleCommands
:
true
get
allowChromeProcess
(
)
{
return
DebuggerServer
.
allowChromeProcess
;
}
profilerDataFilterable
:
true
heapSnapshots
:
true
documentLoadingMarkers
:
true
webExtensionAddonConnect
:
true
perfActorVersion
:
1
}
sayHello
:
function
(
)
{
return
{
from
:
this
.
actorID
applicationType
:
this
.
applicationType
testConnectionPrefix
:
this
.
conn
.
prefix
traits
:
this
.
traits
}
;
}
forwardingCancelled
:
function
(
prefix
)
{
return
{
from
:
this
.
actorID
type
:
"
forwardingCancelled
"
prefix
}
;
}
destroy
:
function
(
)
{
if
(
this
.
_parameters
.
tabList
)
{
this
.
_parameters
.
tabList
.
onListChanged
=
null
;
}
if
(
this
.
_parameters
.
addonList
)
{
this
.
_parameters
.
addonList
.
onListChanged
=
null
;
}
if
(
this
.
_parameters
.
workerList
)
{
this
.
_parameters
.
workerList
.
onListChanged
=
null
;
}
if
(
this
.
_parameters
.
serviceWorkerRegistrationList
)
{
this
.
_parameters
.
serviceWorkerRegistrationList
.
onListChanged
=
null
;
}
if
(
this
.
_parameters
.
processList
)
{
this
.
_parameters
.
processList
.
onListChanged
=
null
;
}
if
(
typeof
this
.
_parameters
.
onShutdown
=
=
=
"
function
"
)
{
this
.
_parameters
.
onShutdown
(
)
;
}
if
(
this
.
_tabTargetActorPool
)
{
this
.
_tabTargetActorPool
.
destroy
(
)
;
}
if
(
this
.
_globalActorPool
)
{
this
.
_globalActorPool
.
destroy
(
)
;
}
if
(
this
.
_chromeWindowActorPool
)
{
this
.
_chromeWindowActorPool
.
destroy
(
)
;
}
if
(
this
.
_addonTargetActorPool
)
{
this
.
_addonTargetActorPool
.
destroy
(
)
;
}
if
(
this
.
_workerTargetActorPool
)
{
this
.
_workerTargetActorPool
.
destroy
(
)
;
}
if
(
this
.
_serviceWorkerRegistrationActorPool
)
{
this
.
_serviceWorkerRegistrationActorPool
.
destroy
(
)
;
}
this
.
_extraActors
=
null
;
this
.
conn
=
null
;
this
.
_tabTargetActorPool
=
null
;
this
.
_globalActorPool
=
null
;
this
.
_chromeWindowActorPool
=
null
;
this
.
_parameters
=
null
;
this
.
_parentProcessTargetActor
=
null
;
this
.
_processActors
.
clear
(
)
;
}
onGetRoot
:
function
(
)
{
if
(
!
this
.
_globalActorPool
)
{
this
.
_globalActorPool
=
new
LazyPool
(
this
.
conn
)
;
}
const
actors
=
createExtraActors
(
this
.
_parameters
.
globalActorFactories
this
.
_globalActorPool
this
)
;
return
actors
;
}
onListTabs
:
async
function
(
options
)
{
const
tabList
=
this
.
_parameters
.
tabList
;
if
(
!
tabList
)
{
return
{
from
:
this
.
actorID
error
:
"
noTabs
"
message
:
"
This
root
actor
has
no
browser
tabs
.
"
}
;
}
tabList
.
onListChanged
=
this
.
_onTabListChanged
;
const
newActorPool
=
new
Pool
(
this
.
conn
)
;
const
targetActorList
=
[
]
;
let
selected
;
const
targetActors
=
await
tabList
.
getList
(
options
)
;
for
(
const
targetActor
of
targetActors
)
{
if
(
targetActor
.
exited
)
{
continue
;
}
if
(
targetActor
.
selected
)
{
selected
=
targetActorList
.
length
;
}
targetActor
.
parentID
=
this
.
actorID
;
newActorPool
.
manage
(
targetActor
)
;
targetActorList
.
push
(
targetActor
)
;
}
const
reply
=
this
.
onGetRoot
(
)
;
if
(
this
.
_tabTargetActorPool
)
{
this
.
_tabTargetActorPool
.
destroy
(
)
;
}
this
.
_tabTargetActorPool
=
newActorPool
;
Object
.
assign
(
reply
{
selected
:
selected
|
|
0
tabs
:
targetActorList
.
map
(
actor
=
>
actor
.
form
(
)
)
}
)
;
return
reply
;
}
onGetTab
:
async
function
(
options
)
{
const
tabList
=
this
.
_parameters
.
tabList
;
if
(
!
tabList
)
{
return
{
error
:
"
noTabs
"
message
:
"
This
root
actor
has
no
browser
tabs
.
"
}
;
}
if
(
!
this
.
_tabTargetActorPool
)
{
this
.
_tabTargetActorPool
=
new
Pool
(
this
.
conn
)
;
}
let
targetActor
;
try
{
targetActor
=
await
tabList
.
getTab
(
options
)
;
}
catch
(
error
)
{
if
(
error
.
error
)
{
return
error
;
}
return
{
error
:
"
noTab
"
message
:
"
Unexpected
error
while
calling
getTab
(
)
:
"
+
error
}
;
}
targetActor
.
parentID
=
this
.
actorID
;
this
.
_tabTargetActorPool
.
manage
(
targetActor
)
;
return
{
tab
:
targetActor
.
form
(
)
}
;
}
onGetWindow
:
function
(
{
outerWindowID
}
)
{
if
(
!
DebuggerServer
.
allowChromeProcess
)
{
return
{
from
:
this
.
actorID
error
:
"
forbidden
"
message
:
"
You
are
not
allowed
to
debug
windows
.
"
}
;
}
const
window
=
Services
.
wm
.
getOuterWindowWithId
(
outerWindowID
)
;
if
(
!
window
)
{
return
{
from
:
this
.
actorID
error
:
"
notFound
"
message
:
No
window
found
with
outerWindowID
{
outerWindowID
}
}
;
}
if
(
!
this
.
_chromeWindowActorPool
)
{
this
.
_chromeWindowActorPool
=
new
Pool
(
this
.
conn
)
;
}
const
actor
=
new
ChromeWindowTargetActor
(
this
.
conn
window
)
;
actor
.
parentID
=
this
.
actorID
;
this
.
_chromeWindowActorPool
.
manage
(
actor
)
;
return
{
from
:
this
.
actorID
window
:
actor
.
form
(
)
}
;
}
onTabListChanged
:
function
(
)
{
this
.
conn
.
send
(
{
from
:
this
.
actorID
type
:
"
tabListChanged
"
}
)
;
this
.
_parameters
.
tabList
.
onListChanged
=
null
;
}
onListAddons
:
function
(
)
{
const
addonList
=
this
.
_parameters
.
addonList
;
if
(
!
addonList
)
{
return
{
from
:
this
.
actorID
error
:
"
noAddons
"
message
:
"
This
root
actor
has
no
browser
addons
.
"
}
;
}
addonList
.
onListChanged
=
this
.
_onAddonListChanged
;
return
addonList
.
getList
(
)
.
then
(
(
addonTargetActors
)
=
>
{
const
addonTargetActorPool
=
new
Pool
(
this
.
conn
)
;
for
(
const
addonTargetActor
of
addonTargetActors
)
{
addonTargetActorPool
.
manage
(
addonTargetActor
)
;
}
if
(
this
.
_addonTargetActorPool
)
{
this
.
_addonTargetActorPool
.
destroy
(
)
;
}
this
.
_addonTargetActorPool
=
addonTargetActorPool
;
return
{
"
from
"
:
this
.
actorID
"
addons
"
:
addonTargetActors
.
map
(
addonTargetActor
=
>
addonTargetActor
.
form
(
)
)
}
;
}
)
;
}
onAddonListChanged
:
function
(
)
{
this
.
conn
.
send
(
{
from
:
this
.
actorID
type
:
"
addonListChanged
"
}
)
;
this
.
_parameters
.
addonList
.
onListChanged
=
null
;
}
onListWorkers
:
function
(
)
{
const
workerList
=
this
.
_parameters
.
workerList
;
if
(
!
workerList
)
{
return
{
from
:
this
.
actorID
error
:
"
noWorkers
"
message
:
"
This
root
actor
has
no
workers
.
"
}
;
}
workerList
.
onListChanged
=
this
.
_onWorkerListChanged
;
return
workerList
.
getList
(
)
.
then
(
actors
=
>
{
const
pool
=
new
Pool
(
this
.
conn
)
;
for
(
const
actor
of
actors
)
{
pool
.
manage
(
actor
)
;
}
if
(
this
.
_workerTargetActorPool
)
{
this
.
_workerTargetActorPool
.
destroy
(
)
;
}
this
.
_workerTargetActorPool
=
pool
;
return
{
"
from
"
:
this
.
actorID
"
workers
"
:
actors
.
map
(
actor
=
>
actor
.
form
(
)
)
}
;
}
)
;
}
onWorkerListChanged
:
function
(
)
{
this
.
conn
.
send
(
{
from
:
this
.
actorID
type
:
"
workerListChanged
"
}
)
;
this
.
_parameters
.
workerList
.
onListChanged
=
null
;
}
onListServiceWorkerRegistrations
:
function
(
)
{
const
registrationList
=
this
.
_parameters
.
serviceWorkerRegistrationList
;
if
(
!
registrationList
)
{
return
{
from
:
this
.
actorID
error
:
"
noServiceWorkerRegistrations
"
message
:
"
This
root
actor
has
no
service
worker
registrations
.
"
}
;
}
registrationList
.
onListChanged
=
this
.
_onServiceWorkerRegistrationListChanged
;
return
registrationList
.
getList
(
)
.
then
(
actors
=
>
{
const
pool
=
new
Pool
(
this
.
conn
)
;
for
(
const
actor
of
actors
)
{
pool
.
manage
(
actor
)
;
}
if
(
this
.
_serviceWorkerRegistrationActorPool
)
{
this
.
_serviceWorkerRegistrationActorPool
.
destroy
(
)
;
}
this
.
_serviceWorkerRegistrationActorPool
=
pool
;
return
{
"
from
"
:
this
.
actorID
"
registrations
"
:
actors
.
map
(
actor
=
>
actor
.
form
(
)
)
}
;
}
)
;
}
onServiceWorkerRegistrationListChanged
:
function
(
)
{
this
.
conn
.
send
(
{
from
:
this
.
actorID
type
:
"
serviceWorkerRegistrationListChanged
"
}
)
;
this
.
_parameters
.
serviceWorkerRegistrationList
.
onListChanged
=
null
;
}
onListProcesses
:
function
(
)
{
const
{
processList
}
=
this
.
_parameters
;
if
(
!
processList
)
{
return
{
from
:
this
.
actorID
error
:
"
noProcesses
"
message
:
"
This
root
actor
has
no
processes
.
"
}
;
}
processList
.
onListChanged
=
this
.
_onProcessListChanged
;
return
{
processes
:
processList
.
getList
(
)
}
;
}
onProcessListChanged
:
function
(
)
{
this
.
conn
.
send
(
{
from
:
this
.
actorID
type
:
"
processListChanged
"
}
)
;
this
.
_parameters
.
processList
.
onListChanged
=
null
;
}
async
onGetProcess
(
request
)
{
if
(
!
DebuggerServer
.
allowChromeProcess
)
{
return
{
error
:
"
forbidden
"
message
:
"
You
are
not
allowed
to
debug
chrome
.
"
}
;
}
if
(
(
"
id
"
in
request
)
&
&
typeof
(
request
.
id
)
!
=
"
number
"
)
{
return
{
error
:
"
wrongParameter
"
message
:
"
getProcess
requires
a
valid
id
attribute
.
"
}
;
}
if
(
(
!
(
"
id
"
in
request
)
)
|
|
request
.
id
=
=
=
0
)
{
let
isXpcshell
=
true
;
try
{
isXpcshell
=
!
Services
.
wm
.
getMostRecentWindow
(
null
)
&
&
!
Services
.
appShell
.
hiddenDOMWindow
;
}
catch
(
e
)
{
}
if
(
!
isXpcshell
&
&
this
.
_parentProcessTargetActor
&
&
(
!
this
.
_parentProcessTargetActor
.
docShell
|
|
this
.
_parentProcessTargetActor
.
docShell
.
isBeingDestroyed
)
)
{
this
.
_parentProcessTargetActor
.
destroy
(
)
;
this
.
_parentProcessTargetActor
=
null
;
}
if
(
!
this
.
_parentProcessTargetActor
)
{
if
(
isXpcshell
)
{
this
.
_parentProcessTargetActor
=
new
ContentProcessTargetActor
(
this
.
conn
)
;
}
else
{
this
.
_parentProcessTargetActor
=
new
ParentProcessTargetActor
(
this
.
conn
)
;
}
this
.
_globalActorPool
.
manage
(
this
.
_parentProcessTargetActor
)
;
}
return
{
form
:
this
.
_parentProcessTargetActor
.
form
(
)
}
;
}
const
{
id
}
=
request
;
const
mm
=
Services
.
ppmm
.
getChildAt
(
id
)
;
if
(
!
mm
)
{
return
{
error
:
"
noProcess
"
message
:
"
There
is
no
process
with
id
'
"
+
id
+
"
'
.
"
}
;
}
let
form
=
this
.
_processActors
.
get
(
id
)
;
if
(
form
)
{
return
{
form
}
;
}
const
onDestroy
=
(
)
=
>
{
this
.
_processActors
.
delete
(
id
)
;
}
;
form
=
await
DebuggerServer
.
connectToContentProcess
(
this
.
conn
mm
onDestroy
)
;
this
.
_processActors
.
set
(
id
form
)
;
return
{
form
}
;
}
onEcho
:
function
(
request
)
{
return
Cu
.
cloneInto
(
request
{
}
)
;
}
onProtocolDescription
:
function
(
)
{
return
require
(
"
devtools
/
shared
/
protocol
"
)
.
dumpProtocolSpec
(
)
;
}
removeActorByName
:
function
(
name
)
{
if
(
name
in
this
.
_extraActors
)
{
const
actor
=
this
.
_extraActors
[
name
]
;
if
(
this
.
_globalActorPool
.
has
(
actor
.
actorID
)
)
{
actor
.
destroy
(
)
;
}
if
(
this
.
_tabTargetActorPool
)
{
for
(
const
tab
in
this
.
_tabTargetActorPool
.
poolChildren
(
)
)
{
tab
.
removeActorByName
(
name
)
;
}
}
delete
this
.
_extraActors
[
name
]
;
}
}
}
;
RootActor
.
prototype
.
requestTypes
=
{
getRoot
:
RootActor
.
prototype
.
onGetRoot
listTabs
:
RootActor
.
prototype
.
onListTabs
getTab
:
RootActor
.
prototype
.
onGetTab
getWindow
:
RootActor
.
prototype
.
onGetWindow
listAddons
:
RootActor
.
prototype
.
onListAddons
listWorkers
:
RootActor
.
prototype
.
onListWorkers
listServiceWorkerRegistrations
:
RootActor
.
prototype
.
onListServiceWorkerRegistrations
listProcesses
:
RootActor
.
prototype
.
onListProcesses
getProcess
:
RootActor
.
prototype
.
onGetProcess
echo
:
RootActor
.
prototype
.
onEcho
protocolDescription
:
RootActor
.
prototype
.
onProtocolDescription
}
;
exports
.
RootActor
=
RootActor
;
