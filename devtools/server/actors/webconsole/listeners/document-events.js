"
use
strict
"
;
const
EventEmitter
=
require
(
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
WILL_NAVIGATE_TIME_SHIFT
=
20
;
exports
.
WILL_NAVIGATE_TIME_SHIFT
=
WILL_NAVIGATE_TIME_SHIFT
;
function
DocumentEventsListener
(
targetActor
)
{
this
.
targetActor
=
targetActor
;
EventEmitter
.
decorate
(
this
)
;
this
.
onWillNavigate
=
this
.
onWillNavigate
.
bind
(
this
)
;
this
.
onWindowReady
=
this
.
onWindowReady
.
bind
(
this
)
;
this
.
onContentLoaded
=
this
.
onContentLoaded
.
bind
(
this
)
;
this
.
onLoad
=
this
.
onLoad
.
bind
(
this
)
;
}
exports
.
DocumentEventsListener
=
DocumentEventsListener
;
DocumentEventsListener
.
prototype
=
{
listen
(
)
{
this
.
targetActor
.
on
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
this
.
targetActor
.
on
(
"
window
-
ready
"
this
.
onWindowReady
)
;
if
(
!
this
.
targetActor
.
attached
&
&
!
this
.
targetActor
.
followWindowGlobalLifeCycle
)
{
this
.
targetActor
.
attach
(
)
;
}
else
{
this
.
onWindowReady
(
{
window
:
this
.
targetActor
.
window
isTopLevel
:
true
}
)
;
}
}
onWillNavigate
(
{
window
isTopLevel
newURI
navigationStart
isFrameSwitching
}
)
{
if
(
!
isTopLevel
)
{
return
;
}
this
.
emit
(
"
will
-
navigate
"
{
time
:
navigationStart
-
WILL_NAVIGATE_TIME_SHIFT
newURI
isFrameSwitching
}
)
;
}
onWindowReady
(
{
window
isTopLevel
isFrameSwitching
}
)
{
if
(
!
isTopLevel
)
{
return
;
}
const
time
=
window
.
performance
.
timing
.
navigationStart
;
this
.
emit
(
"
dom
-
loading
"
{
time
isFrameSwitching
}
)
;
const
{
readyState
}
=
window
.
document
;
if
(
readyState
!
=
"
interactive
"
&
&
readyState
!
=
"
complete
"
)
{
window
.
addEventListener
(
"
DOMContentLoaded
"
e
=
>
this
.
onContentLoaded
(
e
isFrameSwitching
)
{
once
:
true
}
)
;
}
else
{
this
.
onContentLoaded
(
{
target
:
window
.
document
}
isFrameSwitching
)
;
}
if
(
readyState
!
=
"
complete
"
)
{
window
.
addEventListener
(
"
load
"
e
=
>
this
.
onLoad
(
e
isFrameSwitching
)
{
once
:
true
}
)
;
}
else
{
this
.
onLoad
(
{
target
:
window
.
document
}
isFrameSwitching
)
;
}
}
onContentLoaded
(
event
isFrameSwitching
)
{
if
(
this
.
destroyed
)
{
return
;
}
const
window
=
event
.
target
.
defaultView
;
const
time
=
window
.
performance
.
timing
.
domInteractive
;
this
.
emit
(
"
dom
-
interactive
"
{
time
isFrameSwitching
}
)
;
}
onLoad
(
event
isFrameSwitching
)
{
if
(
this
.
destroyed
)
{
return
;
}
const
window
=
event
.
target
.
defaultView
;
const
time
=
window
.
performance
.
timing
.
domComplete
;
this
.
emit
(
"
dom
-
complete
"
{
time
isFrameSwitching
hasNativeConsoleAPI
:
this
.
hasNativeConsoleAPI
(
window
)
}
)
;
}
hasNativeConsoleAPI
(
window
)
{
let
isNative
=
false
;
try
{
const
console
=
window
.
wrappedJSObject
.
console
;
if
(
console
)
{
isNative
=
new
XPCNativeWrapper
(
console
)
.
IS_NATIVE_CONSOLE
=
=
=
true
;
}
}
catch
(
ex
)
{
}
return
isNative
;
}
destroy
(
)
{
this
.
destroyed
=
true
;
this
.
targetActor
.
off
(
"
will
-
navigate
"
this
.
onWillNavigate
)
;
this
.
targetActor
.
off
(
"
window
-
ready
"
this
.
onWindowReady
)
;
}
}
;
