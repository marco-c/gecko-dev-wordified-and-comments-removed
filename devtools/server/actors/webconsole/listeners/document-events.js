"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
function
DocumentEventsListener
(
console
)
{
this
.
console
=
console
;
this
.
onWindowReady
=
this
.
onWindowReady
.
bind
(
this
)
;
this
.
onContentLoaded
=
this
.
onContentLoaded
.
bind
(
this
)
;
this
.
onLoad
=
this
.
onLoad
.
bind
(
this
)
;
this
.
listen
(
)
;
}
exports
.
DocumentEventsListener
=
DocumentEventsListener
;
DocumentEventsListener
.
prototype
=
{
listen
(
)
{
EventEmitter
.
on
(
this
.
console
.
parentActor
"
window
-
ready
"
this
.
onWindowReady
)
;
this
.
onWindowReady
(
{
window
:
this
.
console
.
window
isTopLevel
:
true
}
)
;
}
onWindowReady
(
{
window
isTopLevel
}
)
{
if
(
!
this
.
console
.
conn
)
{
return
;
}
if
(
!
isTopLevel
)
{
return
;
}
const
packet
=
{
from
:
this
.
console
.
actorID
type
:
"
documentEvent
"
name
:
"
dom
-
loading
"
time
:
window
.
performance
.
timing
.
navigationStart
}
;
this
.
console
.
conn
.
send
(
packet
)
;
const
{
readyState
}
=
window
.
document
;
if
(
readyState
!
=
"
interactive
"
&
&
readyState
!
=
"
complete
"
)
{
window
.
addEventListener
(
"
DOMContentLoaded
"
this
.
onContentLoaded
{
once
:
true
}
)
;
}
else
{
this
.
onContentLoaded
(
{
target
:
window
.
document
}
)
;
}
if
(
readyState
!
=
"
complete
"
)
{
window
.
addEventListener
(
"
load
"
this
.
onLoad
{
once
:
true
}
)
;
}
else
{
this
.
onLoad
(
{
target
:
window
.
document
}
)
;
}
}
onContentLoaded
(
event
)
{
if
(
!
this
.
console
.
conn
)
{
return
;
}
const
window
=
event
.
target
.
defaultView
;
const
packet
=
{
from
:
this
.
console
.
actorID
type
:
"
documentEvent
"
name
:
"
dom
-
interactive
"
time
:
window
.
performance
.
timing
.
domInteractive
}
;
this
.
console
.
conn
.
send
(
packet
)
;
}
onLoad
(
event
)
{
if
(
!
this
.
console
.
conn
)
{
return
;
}
const
window
=
event
.
target
.
defaultView
;
const
packet
=
{
from
:
this
.
console
.
actorID
type
:
"
documentEvent
"
name
:
"
dom
-
complete
"
time
:
window
.
performance
.
timing
.
domComplete
}
;
this
.
console
.
conn
.
send
(
packet
)
;
}
destroy
(
)
{
EventEmitter
.
off
(
this
.
console
.
parentActor
"
window
-
ready
"
this
.
onWindowReady
)
;
this
.
listener
=
null
;
}
}
;
