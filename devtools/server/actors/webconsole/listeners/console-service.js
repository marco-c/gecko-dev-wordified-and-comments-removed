"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
{
isWindowIncluded
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
WebConsoleUtils
}
=
require
(
"
devtools
/
server
/
actors
/
webconsole
/
utils
"
)
;
class
ConsoleServiceListener
{
constructor
(
window
handler
{
matchExactWindow
}
=
{
}
)
{
this
.
window
=
window
;
this
.
handler
=
handler
;
this
.
matchExactWindow
=
matchExactWindow
;
}
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsIConsoleListener
]
)
;
window
=
null
;
handler
=
null
;
init
(
)
{
Services
.
console
.
registerListener
(
this
)
;
}
observe
(
message
)
{
if
(
!
this
.
handler
)
{
return
;
}
if
(
this
.
window
)
{
if
(
!
(
message
instanceof
Ci
.
nsIScriptError
)
|
|
!
message
.
outerWindowID
|
|
!
this
.
isCategoryAllowed
(
message
.
category
)
)
{
return
;
}
const
errorWindow
=
Services
.
wm
.
getOuterWindowWithId
(
message
.
outerWindowID
)
;
if
(
!
errorWindow
)
{
return
;
}
if
(
this
.
matchExactWindow
&
&
this
.
window
!
=
=
errorWindow
)
{
return
;
}
if
(
!
isWindowIncluded
(
this
.
window
errorWindow
)
)
{
return
;
}
}
if
(
message
.
sourceName
=
=
=
"
debugger
eager
eval
code
"
)
{
return
;
}
this
.
handler
(
message
)
;
}
isCategoryAllowed
(
category
)
{
if
(
!
category
)
{
return
false
;
}
switch
(
category
)
{
case
"
XPConnect
JavaScript
"
:
case
"
component
javascript
"
:
case
"
chrome
javascript
"
:
case
"
chrome
registration
"
:
return
false
;
}
return
true
;
}
getCachedMessages
(
includePrivate
=
false
)
{
const
errors
=
Services
.
console
.
getMessageArray
(
)
|
|
[
]
;
if
(
!
this
.
window
)
{
return
errors
.
filter
(
error
=
>
{
if
(
error
instanceof
Ci
.
nsIScriptError
)
{
if
(
!
includePrivate
&
&
error
.
isFromPrivateWindow
)
{
return
false
;
}
}
return
true
;
}
)
;
}
const
ids
=
this
.
matchExactWindow
?
[
WebConsoleUtils
.
getInnerWindowId
(
this
.
window
)
]
:
WebConsoleUtils
.
getInnerWindowIDsForFrames
(
this
.
window
)
;
return
errors
.
filter
(
error
=
>
{
if
(
error
instanceof
Ci
.
nsIScriptError
)
{
if
(
!
includePrivate
&
&
error
.
isFromPrivateWindow
)
{
return
false
;
}
if
(
ids
&
&
(
!
ids
.
includes
(
error
.
innerWindowID
)
|
|
!
this
.
isCategoryAllowed
(
error
.
category
)
)
)
{
return
false
;
}
}
else
if
(
ids
?
.
[
0
]
)
{
return
false
;
}
return
true
;
}
)
;
}
destroy
(
)
{
Services
.
console
.
unregisterListener
(
this
)
;
this
.
handler
=
this
.
window
=
null
;
}
}
exports
.
ConsoleServiceListener
=
ConsoleServiceListener
;
