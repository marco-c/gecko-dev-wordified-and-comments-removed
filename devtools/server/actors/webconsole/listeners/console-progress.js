"
use
strict
"
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
function
ConsoleProgressListener
(
window
owner
)
{
this
.
window
=
window
;
this
.
owner
=
owner
;
}
exports
.
ConsoleProgressListener
=
ConsoleProgressListener
;
ConsoleProgressListener
.
prototype
=
{
MONITOR_FILE_ACTIVITY
:
1
MONITOR_LOCATION_CHANGE
:
2
_fileActivity
:
false
_locationChange
:
false
_initialized
:
false
_webProgress
:
null
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIWebProgressListener
Ci
.
nsISupportsWeakReference
]
)
_init
:
function
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
this
.
_webProgress
=
this
.
window
.
docShell
.
QueryInterface
(
Ci
.
nsIWebProgress
)
;
this
.
_webProgress
.
addProgressListener
(
this
Ci
.
nsIWebProgress
.
NOTIFY_STATE_ALL
)
;
this
.
_initialized
=
true
;
}
startMonitor
:
function
(
monitor
)
{
switch
(
monitor
)
{
case
this
.
MONITOR_FILE_ACTIVITY
:
this
.
_fileActivity
=
true
;
break
;
case
this
.
MONITOR_LOCATION_CHANGE
:
this
.
_locationChange
=
true
;
break
;
default
:
throw
new
Error
(
"
ConsoleProgressListener
:
unknown
monitor
type
"
+
monitor
+
"
!
"
)
;
}
this
.
_init
(
)
;
}
stopMonitor
:
function
(
monitor
)
{
switch
(
monitor
)
{
case
this
.
MONITOR_FILE_ACTIVITY
:
this
.
_fileActivity
=
false
;
break
;
case
this
.
MONITOR_LOCATION_CHANGE
:
this
.
_locationChange
=
false
;
break
;
default
:
throw
new
Error
(
"
ConsoleProgressListener
:
unknown
monitor
type
"
+
monitor
+
"
!
"
)
;
}
if
(
!
this
.
_fileActivity
&
&
!
this
.
_locationChange
)
{
this
.
destroy
(
)
;
}
}
onStateChange
:
function
(
progress
request
state
status
)
{
if
(
!
this
.
owner
)
{
return
;
}
if
(
this
.
_fileActivity
)
{
this
.
_checkFileActivity
(
progress
request
state
status
)
;
}
if
(
this
.
_locationChange
)
{
this
.
_checkLocationChange
(
progress
request
state
status
)
;
}
}
_checkFileActivity
:
function
(
progress
request
state
status
)
{
if
(
!
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_START
)
)
{
return
;
}
let
uri
=
null
;
if
(
request
instanceof
Ci
.
imgIRequest
)
{
const
imgIRequest
=
request
.
QueryInterface
(
Ci
.
imgIRequest
)
;
uri
=
imgIRequest
.
URI
;
}
else
if
(
request
instanceof
Ci
.
nsIChannel
)
{
const
nsIChannel
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
uri
=
nsIChannel
.
URI
;
}
if
(
!
uri
|
|
!
uri
.
schemeIs
(
"
file
"
)
&
&
!
uri
.
schemeIs
(
"
ftp
"
)
)
{
return
;
}
this
.
owner
.
onFileActivity
(
uri
.
spec
)
;
}
_checkLocationChange
:
function
(
progress
request
state
)
{
const
isStart
=
state
&
Ci
.
nsIWebProgressListener
.
STATE_START
;
const
isStop
=
state
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
;
const
isNetwork
=
state
&
Ci
.
nsIWebProgressListener
.
STATE_IS_NETWORK
;
const
isWindow
=
state
&
Ci
.
nsIWebProgressListener
.
STATE_IS_WINDOW
;
if
(
!
isNetwork
|
|
!
isWindow
|
|
progress
.
DOMWindow
!
=
this
.
window
)
{
return
;
}
if
(
isStart
&
&
request
instanceof
Ci
.
nsIChannel
)
{
this
.
owner
.
onLocationChange
(
"
start
"
request
.
URI
.
spec
"
"
)
;
}
else
if
(
isStop
)
{
this
.
owner
.
onLocationChange
(
"
stop
"
this
.
window
.
location
.
href
this
.
window
.
document
.
title
)
;
}
}
destroy
:
function
(
)
{
if
(
!
this
.
_initialized
)
{
return
;
}
this
.
_initialized
=
false
;
this
.
_fileActivity
=
false
;
this
.
_locationChange
=
false
;
try
{
this
.
_webProgress
.
removeProgressListener
(
this
)
;
}
catch
(
ex
)
{
}
this
.
_webProgress
=
null
;
this
.
window
=
null
;
this
.
owner
=
null
;
}
}
;
