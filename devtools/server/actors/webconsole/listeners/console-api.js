"
use
strict
"
;
const
{
Cc
Ci
}
=
require
(
"
chrome
"
)
;
const
{
isWindowIncluded
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
CONSOLE_WORKER_IDS
WebConsoleUtils
}
=
require
(
"
devtools
/
server
/
actors
/
webconsole
/
utils
"
)
;
function
ConsoleAPIListener
(
window
owner
{
addonId
}
=
{
}
)
{
this
.
window
=
window
;
this
.
owner
=
owner
;
this
.
addonId
=
addonId
;
}
exports
.
ConsoleAPIListener
=
ConsoleAPIListener
;
ConsoleAPIListener
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
window
:
null
owner
:
null
addonId
:
null
init
:
function
(
)
{
Services
.
obs
.
addObserver
(
this
"
console
-
api
-
log
-
event
"
)
;
}
observe
:
function
(
message
topic
)
{
if
(
!
this
.
owner
)
{
return
;
}
const
apiMessage
=
message
.
wrappedJSObject
;
if
(
!
this
.
isMessageRelevant
(
apiMessage
)
)
{
return
;
}
this
.
owner
.
onConsoleAPICall
(
apiMessage
)
;
}
isMessageRelevant
:
function
(
message
)
{
const
workerType
=
WebConsoleUtils
.
getWorkerType
(
message
)
;
if
(
this
.
window
&
&
workerType
=
=
=
"
ServiceWorker
"
)
{
const
scope
=
message
.
ID
;
if
(
!
this
.
window
.
shouldReportForServiceWorkerScope
(
scope
)
)
{
return
false
;
}
}
if
(
this
.
window
&
&
!
workerType
)
{
const
msgWindow
=
Services
.
wm
.
getCurrentInnerWindowWithId
(
message
.
innerID
)
;
if
(
!
msgWindow
|
|
!
isWindowIncluded
(
this
.
window
msgWindow
)
)
{
return
false
;
}
}
if
(
this
.
addonId
)
{
if
(
message
.
addonId
=
=
this
.
addonId
)
{
return
true
;
}
if
(
message
.
consoleID
&
&
message
.
consoleID
=
=
addon
/
{
this
.
addonId
}
)
{
return
true
;
}
return
false
;
}
return
true
;
}
getCachedMessages
:
function
(
includePrivate
=
false
)
{
let
messages
=
[
]
;
const
ConsoleAPIStorage
=
Cc
[
"
mozilla
.
org
/
consoleAPI
-
storage
;
1
"
]
.
getService
(
Ci
.
nsIConsoleAPIStorage
)
;
if
(
!
this
.
window
)
{
messages
=
ConsoleAPIStorage
.
getEvents
(
)
;
}
else
{
const
ids
=
WebConsoleUtils
.
getInnerWindowIDsForFrames
(
this
.
window
)
;
ids
.
forEach
(
(
id
)
=
>
{
messages
=
messages
.
concat
(
ConsoleAPIStorage
.
getEvents
(
id
)
)
;
}
)
;
}
CONSOLE_WORKER_IDS
.
forEach
(
(
id
)
=
>
{
messages
=
messages
.
concat
(
ConsoleAPIStorage
.
getEvents
(
id
)
)
;
}
)
;
messages
=
messages
.
filter
(
msg
=
>
{
return
this
.
isMessageRelevant
(
msg
)
;
}
)
;
if
(
includePrivate
)
{
return
messages
;
}
return
messages
.
filter
(
(
m
)
=
>
!
m
.
private
)
;
}
destroy
:
function
(
)
{
Services
.
obs
.
removeObserver
(
this
"
console
-
api
-
log
-
event
"
)
;
this
.
window
=
this
.
owner
=
null
;
}
}
;
