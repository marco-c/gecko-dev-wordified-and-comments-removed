"
use
strict
"
;
const
{
Cc
Ci
}
=
require
(
"
chrome
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
CONSOLE_WORKER_IDS
WebConsoleUtils
}
=
require
(
"
devtools
/
server
/
actors
/
webconsole
/
utils
"
)
;
class
ConsoleAPIListener
{
constructor
(
window
handler
{
addonId
excludeMessagesBoundToWindow
matchExactWindow
}
=
{
}
)
{
this
.
window
=
window
;
this
.
handler
=
handler
;
this
.
addonId
=
addonId
;
this
.
excludeMessagesBoundToWindow
=
excludeMessagesBoundToWindow
;
this
.
matchExactWindow
=
matchExactWindow
;
}
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
;
window
=
null
;
handler
=
null
;
addonId
=
null
;
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
console
-
api
-
log
-
event
"
)
;
}
observe
(
message
topic
)
{
if
(
!
this
.
handler
)
{
return
;
}
const
apiMessage
=
message
.
wrappedJSObject
;
if
(
!
this
.
isMessageRelevant
(
apiMessage
)
)
{
return
;
}
this
.
handler
(
apiMessage
)
;
}
isMessageRelevant
(
message
)
{
const
workerType
=
WebConsoleUtils
.
getWorkerType
(
message
)
;
if
(
this
.
window
&
&
workerType
=
=
=
"
ServiceWorker
"
)
{
const
scope
=
message
.
ID
;
if
(
!
this
.
window
.
shouldReportForServiceWorkerScope
(
scope
)
)
{
return
false
;
}
}
if
(
!
workerType
&
&
typeof
message
.
innerID
!
=
=
"
number
"
&
&
this
.
window
)
{
return
false
;
}
if
(
typeof
message
.
innerID
=
=
"
number
"
)
{
if
(
this
.
excludeMessagesBoundToWindow
&
&
message
.
innerID
)
{
return
false
;
}
if
(
this
.
window
)
{
const
matchesWindow
=
this
.
matchExactWindow
?
WebConsoleUtils
.
getInnerWindowId
(
this
.
window
)
=
=
=
message
.
innerID
:
WebConsoleUtils
.
getInnerWindowIDsForFrames
(
this
.
window
)
.
includes
(
message
.
innerID
)
;
if
(
!
matchesWindow
)
{
return
false
;
}
}
}
if
(
this
.
addonId
)
{
if
(
message
.
addonId
=
=
this
.
addonId
)
{
return
true
;
}
if
(
message
.
consoleID
&
&
message
.
consoleID
=
=
addon
/
{
this
.
addonId
}
)
{
return
true
;
}
return
false
;
}
return
true
;
}
getCachedMessages
(
includePrivate
=
false
)
{
let
messages
=
[
]
;
const
ConsoleAPIStorage
=
Cc
[
"
mozilla
.
org
/
consoleAPI
-
storage
;
1
"
]
.
getService
(
Ci
.
nsIConsoleAPIStorage
)
;
if
(
!
this
.
window
)
{
messages
=
ConsoleAPIStorage
.
getEvents
(
)
;
}
else
{
const
ids
=
this
.
matchExactWindow
?
[
WebConsoleUtils
.
getInnerWindowId
(
this
.
window
)
]
:
WebConsoleUtils
.
getInnerWindowIDsForFrames
(
this
.
window
)
;
ids
.
forEach
(
id
=
>
{
messages
=
messages
.
concat
(
ConsoleAPIStorage
.
getEvents
(
id
)
)
;
}
)
;
}
CONSOLE_WORKER_IDS
.
forEach
(
id
=
>
{
messages
=
messages
.
concat
(
ConsoleAPIStorage
.
getEvents
(
id
)
)
;
}
)
;
messages
=
messages
.
filter
(
msg
=
>
{
return
this
.
isMessageRelevant
(
msg
)
;
}
)
;
if
(
includePrivate
)
{
return
messages
;
}
return
messages
.
filter
(
m
=
>
!
m
.
private
)
;
}
destroy
(
)
{
Services
.
obs
.
removeObserver
(
this
"
console
-
api
-
log
-
event
"
)
;
this
.
window
=
this
.
handler
=
null
;
}
}
exports
.
ConsoleAPIListener
=
ConsoleAPIListener
;
