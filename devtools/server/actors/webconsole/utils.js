"
use
strict
"
;
const
CONSOLE_WORKER_IDS
=
(
exports
.
CONSOLE_WORKER_IDS
=
new
Set
(
[
"
SharedWorker
"
"
ServiceWorker
"
"
Worker
"
]
)
)
;
var
WebConsoleUtils
=
{
getWorkerType
(
message
)
{
const
innerID
=
message
?
.
innerID
;
return
CONSOLE_WORKER_IDS
.
has
(
innerID
)
?
innerID
:
null
;
}
getInnerWindowId
(
window
)
{
try
{
return
window
.
windowGlobalChild
.
innerWindowId
;
}
catch
(
e
)
{
return
null
;
}
}
getInnerWindowIDsForFrames
(
window
)
{
const
innerWindowID
=
this
.
getInnerWindowId
(
window
)
;
if
(
innerWindowID
=
=
=
null
)
{
return
[
]
;
}
let
ids
=
[
innerWindowID
]
;
if
(
window
.
frames
)
{
for
(
let
i
=
0
;
i
<
window
.
frames
.
length
;
i
+
+
)
{
const
frame
=
window
.
frames
[
i
]
;
ids
=
ids
.
concat
(
this
.
getInnerWindowIDsForFrames
(
frame
)
)
;
}
}
return
ids
;
}
createValueGrip
(
value
objectWrapper
)
{
switch
(
typeof
value
)
{
case
"
boolean
"
:
return
value
;
case
"
string
"
:
return
objectWrapper
(
value
)
;
case
"
number
"
:
if
(
value
=
=
=
Infinity
)
{
return
{
type
:
"
Infinity
"
}
;
}
else
if
(
value
=
=
=
-
Infinity
)
{
return
{
type
:
"
-
Infinity
"
}
;
}
else
if
(
Number
.
isNaN
(
value
)
)
{
return
{
type
:
"
NaN
"
}
;
}
else
if
(
!
value
&
&
1
/
value
=
=
=
-
Infinity
)
{
return
{
type
:
"
-
0
"
}
;
}
return
value
;
case
"
undefined
"
:
return
{
type
:
"
undefined
"
}
;
case
"
object
"
:
if
(
value
=
=
=
null
)
{
return
{
type
:
"
null
"
}
;
}
case
"
function
"
:
case
"
record
"
:
case
"
tuple
"
:
return
objectWrapper
(
value
)
;
default
:
console
.
error
(
"
Failed
to
provide
a
grip
for
value
of
"
+
typeof
value
+
"
:
"
+
value
)
;
return
null
;
}
}
removeFramesAboveDebuggerEval
(
stack
)
{
const
debuggerEvalFilename
=
"
debugger
eval
code
"
;
const
evalIndex
=
stack
.
findIndex
(
(
{
filename
}
idx
arr
)
=
>
{
const
nextFrame
=
arr
[
idx
+
1
]
;
return
(
filename
=
=
debuggerEvalFilename
&
&
(
!
nextFrame
|
|
nextFrame
.
filename
!
=
=
debuggerEvalFilename
)
)
;
}
)
;
if
(
evalIndex
!
=
-
1
)
{
return
stack
.
slice
(
0
evalIndex
+
1
)
;
}
if
(
stack
.
some
(
(
{
filename
}
)
=
>
filename
&
&
filename
.
startsWith
(
"
resource
:
/
/
devtools
/
"
)
)
)
{
return
null
;
}
return
stack
;
}
}
;
exports
.
WebConsoleUtils
=
WebConsoleUtils
;
