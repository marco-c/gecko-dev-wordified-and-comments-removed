"
use
strict
"
;
const
{
Cc
Ci
components
}
=
require
(
"
chrome
"
)
;
const
{
isWindowIncluded
}
=
require
(
"
devtools
/
shared
/
layout
/
utils
"
)
;
const
Services
=
require
(
"
Services
"
)
;
const
ChromeUtils
=
require
(
"
ChromeUtils
"
)
;
const
{
CONSOLE_WORKER_IDS
WebConsoleUtils
}
=
require
(
"
devtools
/
server
/
actors
/
webconsole
/
utils
"
)
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
const
CONTENT_PROCESS_SCRIPT
=
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
/
content
-
process
-
forward
.
js
"
;
function
ConsoleReflowListener
(
window
listener
)
{
this
.
docshell
=
window
.
docShell
;
this
.
listener
=
listener
;
this
.
docshell
.
addWeakReflowObserver
(
this
)
;
}
exports
.
ConsoleReflowListener
=
ConsoleReflowListener
;
ConsoleReflowListener
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIReflowObserver
Ci
.
nsISupportsWeakReference
]
)
docshell
:
null
listener
:
null
sendReflow
:
function
(
start
end
interruptible
)
{
const
frame
=
components
.
stack
.
caller
.
caller
;
let
filename
=
frame
?
frame
.
filename
:
null
;
if
(
filename
)
{
filename
=
filename
.
split
(
"
"
)
.
pop
(
)
;
}
this
.
listener
.
onReflowActivity
(
{
interruptible
:
interruptible
start
:
start
end
:
end
sourceURL
:
filename
sourceLine
:
frame
?
frame
.
lineNumber
:
null
functionName
:
frame
?
frame
.
name
:
null
}
)
;
}
reflow
:
function
(
start
end
)
{
this
.
sendReflow
(
start
end
false
)
;
}
reflowInterruptible
:
function
(
start
end
)
{
this
.
sendReflow
(
start
end
true
)
;
}
destroy
:
function
(
)
{
this
.
docshell
.
removeWeakReflowObserver
(
this
)
;
this
.
listener
=
this
.
docshell
=
null
;
}
}
;
function
ContentProcessListener
(
listener
)
{
this
.
listener
=
listener
;
Services
.
ppmm
.
addMessageListener
(
"
Console
:
Log
"
this
)
;
Services
.
ppmm
.
loadProcessScript
(
CONTENT_PROCESS_SCRIPT
true
)
;
}
exports
.
ContentProcessListener
=
ContentProcessListener
;
ContentProcessListener
.
prototype
=
{
receiveMessage
(
message
)
{
const
logMsg
=
message
.
data
;
logMsg
.
wrappedJSObject
=
logMsg
;
this
.
listener
.
onConsoleAPICall
(
logMsg
)
;
}
destroy
(
)
{
Services
.
ppmm
.
broadcastAsyncMessage
(
"
DevTools
:
StopForwardingContentProcessMessage
"
)
;
Services
.
ppmm
.
removeMessageListener
(
"
Console
:
Log
"
this
)
;
Services
.
ppmm
.
removeDelayedProcessScript
(
CONTENT_PROCESS_SCRIPT
)
;
this
.
listener
=
null
;
}
}
;
function
DocumentEventsListener
(
console
)
{
this
.
console
=
console
;
this
.
onWindowReady
=
this
.
onWindowReady
.
bind
(
this
)
;
this
.
onContentLoaded
=
this
.
onContentLoaded
.
bind
(
this
)
;
this
.
onLoad
=
this
.
onLoad
.
bind
(
this
)
;
this
.
listen
(
)
;
}
exports
.
DocumentEventsListener
=
DocumentEventsListener
;
DocumentEventsListener
.
prototype
=
{
listen
(
)
{
EventEmitter
.
on
(
this
.
console
.
parentActor
"
window
-
ready
"
this
.
onWindowReady
)
;
this
.
onWindowReady
(
{
window
:
this
.
console
.
window
isTopLevel
:
true
}
)
;
}
onWindowReady
(
{
window
isTopLevel
}
)
{
if
(
!
isTopLevel
)
{
return
;
}
const
{
readyState
}
=
window
.
document
;
if
(
readyState
!
=
"
interactive
"
&
&
readyState
!
=
"
complete
"
)
{
window
.
addEventListener
(
"
DOMContentLoaded
"
this
.
onContentLoaded
{
once
:
true
}
)
;
}
else
{
this
.
onContentLoaded
(
{
target
:
window
.
document
}
)
;
}
if
(
readyState
!
=
"
complete
"
)
{
window
.
addEventListener
(
"
load
"
this
.
onLoad
{
once
:
true
}
)
;
}
else
{
this
.
onLoad
(
{
target
:
window
.
document
}
)
;
}
}
onContentLoaded
(
event
)
{
const
window
=
event
.
target
.
defaultView
;
const
packet
=
{
from
:
this
.
console
.
actorID
type
:
"
documentEvent
"
name
:
"
dom
-
interactive
"
time
:
window
.
performance
.
timing
.
domInteractive
}
;
this
.
console
.
conn
.
send
(
packet
)
;
}
onLoad
(
event
)
{
const
window
=
event
.
target
.
defaultView
;
const
packet
=
{
from
:
this
.
console
.
actorID
type
:
"
documentEvent
"
name
:
"
dom
-
complete
"
time
:
window
.
performance
.
timing
.
domComplete
}
;
this
.
console
.
conn
.
send
(
packet
)
;
}
destroy
(
)
{
EventEmitter
.
off
(
this
.
console
.
parentActor
"
window
-
ready
"
this
.
onWindowReady
)
;
this
.
listener
=
null
;
}
}
;
