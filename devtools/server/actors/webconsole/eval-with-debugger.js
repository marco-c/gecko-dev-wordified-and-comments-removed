"
use
strict
"
;
const
Debugger
=
require
(
"
Debugger
"
)
;
const
DevToolsUtils
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
Reflect
:
"
resource
:
/
/
gre
/
modules
/
reflect
.
sys
.
mjs
"
}
)
;
loader
.
lazyRequireGetter
(
this
[
"
formatCommand
"
"
isCommand
"
]
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
/
commands
/
parser
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
WebConsoleCommandsManager
"
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
/
commands
/
manager
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
LongStringActor
"
"
resource
:
/
/
devtools
/
server
/
actors
/
string
.
js
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
eagerEcmaAllowlist
"
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
/
eager
-
ecma
-
allowlist
.
js
"
)
;
loader
.
lazyRequireGetter
(
this
"
eagerFunctionAllowlist
"
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
/
eager
-
function
-
allowlist
.
js
"
)
;
function
isObject
(
value
)
{
return
Object
(
value
)
=
=
=
value
;
}
exports
.
evalWithDebugger
=
function
(
string
options
=
{
}
webConsole
)
{
if
(
isCommand
(
string
.
trim
(
)
)
&
&
options
.
eager
)
{
return
{
result
:
null
}
;
}
const
evalString
=
getEvalInput
(
string
)
;
const
{
frame
dbg
}
=
getFrameDbg
(
options
webConsole
)
;
const
{
dbgGlobal
bindSelf
evalGlobal
}
=
getDbgGlobal
(
options
dbg
webConsole
)
;
const
helpers
=
getHelpers
(
dbgGlobal
options
webConsole
)
;
let
{
bindings
helperCache
}
=
bindCommands
(
isCommand
(
string
)
dbgGlobal
bindSelf
frame
helpers
)
;
if
(
options
.
bindings
)
{
bindings
=
{
.
.
.
(
bindings
|
|
{
}
)
.
.
.
options
.
bindings
}
;
}
helpers
.
evalInput
=
string
;
const
evalOptions
=
{
}
;
const
urlOption
=
options
.
url
|
|
(
options
.
eager
?
"
debugger
eager
eval
code
"
:
null
)
;
if
(
typeof
urlOption
=
=
=
"
string
"
)
{
evalOptions
.
url
=
urlOption
;
}
if
(
typeof
options
.
lineNumber
=
=
=
"
number
"
)
{
evalOptions
.
lineNumber
=
options
.
lineNumber
;
}
updateConsoleInputEvaluation
(
dbg
webConsole
)
;
let
noSideEffectDebugger
=
null
;
if
(
options
.
eager
)
{
noSideEffectDebugger
=
makeSideeffectFreeDebugger
(
evalGlobal
)
;
}
let
result
;
try
{
result
=
getEvalResult
(
dbg
evalString
evalOptions
bindings
frame
dbgGlobal
noSideEffectDebugger
)
;
}
finally
{
if
(
noSideEffectDebugger
)
{
noSideEffectDebugger
.
removeAllDebuggees
(
)
;
}
}
if
(
!
frame
&
&
result
&
&
"
throw
"
in
result
)
{
forceLexicalInitForVariableDeclarationsInThrowingExpression
(
dbgGlobal
string
)
;
}
const
{
helperResult
}
=
helpers
;
delete
helpers
.
evalInput
;
delete
helpers
.
helperResult
;
delete
helpers
.
selectedNode
;
cleanupBindings
(
bindings
helperCache
)
;
return
{
result
helperResult
dbg
frame
dbgGlobal
}
;
}
;
function
getEvalResult
(
dbg
string
evalOptions
bindings
frame
dbgGlobal
noSideEffectDebugger
)
{
if
(
noSideEffectDebugger
)
{
if
(
!
noSideEffectDebugger
.
hasDebuggee
(
dbgGlobal
.
unsafeDereference
(
)
)
)
{
return
null
;
}
frame
=
frame
?
noSideEffectDebugger
.
adoptFrame
(
frame
)
:
null
;
dbgGlobal
=
noSideEffectDebugger
.
adoptDebuggeeValue
(
dbgGlobal
)
;
if
(
bindings
)
{
bindings
=
Object
.
keys
(
bindings
)
.
reduce
(
(
acc
key
)
=
>
{
acc
[
key
]
=
noSideEffectDebugger
.
adoptDebuggeeValue
(
bindings
[
key
]
)
;
return
acc
;
}
{
}
)
;
}
}
let
result
;
if
(
frame
)
{
result
=
frame
.
evalWithBindings
(
string
bindings
evalOptions
)
;
}
else
{
result
=
dbgGlobal
.
executeInGlobalWithBindings
(
string
bindings
evalOptions
)
;
}
if
(
noSideEffectDebugger
&
&
result
)
{
if
(
"
return
"
in
result
)
{
result
.
return
=
dbg
.
adoptDebuggeeValue
(
result
.
return
)
;
}
if
(
"
throw
"
in
result
)
{
result
.
throw
=
dbg
.
adoptDebuggeeValue
(
result
.
throw
)
;
}
}
return
result
;
}
function
forceLexicalInitForVariableDeclarationsInThrowingExpression
(
dbgGlobal
string
)
{
if
(
isWorker
)
{
return
;
}
let
ast
;
try
{
ast
=
lazy
.
Reflect
.
parse
(
string
)
;
}
catch
(
e
)
{
return
;
}
try
{
for
(
const
line
of
ast
.
body
)
{
if
(
!
(
line
.
kind
=
=
"
let
"
|
|
line
.
kind
=
=
"
const
"
)
)
{
continue
;
}
const
identifiers
=
[
]
;
for
(
const
decl
of
line
.
declarations
)
{
switch
(
decl
.
id
.
type
)
{
case
"
Identifier
"
:
identifiers
.
push
(
decl
.
id
.
name
)
;
break
;
case
"
ArrayPattern
"
:
for
(
const
e
of
decl
.
id
.
elements
)
{
if
(
e
.
type
=
=
"
Identifier
"
)
{
identifiers
.
push
(
e
.
name
)
;
}
else
if
(
e
.
type
=
=
"
AssignmentExpression
"
)
{
identifiers
.
push
(
e
.
left
.
name
)
;
}
}
break
;
case
"
ObjectPattern
"
:
for
(
const
prop
of
decl
.
id
.
properties
)
{
if
(
prop
.
key
?
.
type
=
=
"
Identifier
"
)
{
identifiers
.
push
(
prop
.
key
.
name
)
;
}
if
(
prop
.
value
?
.
type
=
=
"
Identifier
"
)
{
identifiers
.
push
(
prop
.
value
.
name
)
;
}
else
if
(
prop
.
value
?
.
type
=
=
"
AssignmentExpression
"
)
{
identifiers
.
push
(
prop
.
value
.
left
.
name
)
;
}
else
if
(
prop
.
type
=
=
=
"
SpreadExpression
"
)
{
identifiers
.
push
(
prop
.
expression
.
name
)
;
}
}
break
;
}
}
for
(
const
name
of
identifiers
)
{
dbgGlobal
.
forceLexicalInitializationByName
(
name
)
;
}
}
}
catch
(
ex
)
{
console
.
error
(
"
Error
in
forceLexicalInitForVariableDeclarationsInThrowingExpression
:
"
ex
)
;
}
}
function
makeSideeffectFreeDebugger
(
maybeEvalGlobal
)
{
ensureSideEffectFreeNatives
(
maybeEvalGlobal
)
;
const
dbg
=
new
Debugger
(
)
;
dbg
.
addAllGlobalsAsDebuggees
(
)
;
const
timeoutDuration
=
100
;
const
endTime
=
Date
.
now
(
)
+
timeoutDuration
;
let
count
=
0
;
function
shouldCancel
(
)
{
return
+
+
count
%
100
=
=
=
0
&
&
Date
.
now
(
)
>
endTime
;
}
const
executedScripts
=
new
Set
(
)
;
const
handler
=
{
hit
:
(
)
=
>
null
}
;
dbg
.
onEnterFrame
=
frame
=
>
{
if
(
shouldCancel
(
)
)
{
return
null
;
}
frame
.
onStep
=
(
)
=
>
{
if
(
shouldCancel
(
)
)
{
return
null
;
}
return
undefined
;
}
;
const
script
=
frame
.
script
;
if
(
executedScripts
.
has
(
script
)
)
{
return
undefined
;
}
executedScripts
.
add
(
script
)
;
const
offsets
=
script
.
getEffectfulOffsets
(
)
;
for
(
const
offset
of
offsets
)
{
script
.
setBreakpoint
(
offset
handler
)
;
}
return
undefined
;
}
;
dbg
.
onNativeCall
=
(
callee
reason
)
=
>
{
try
{
if
(
(
reason
=
=
"
get
"
|
|
reason
=
=
"
call
"
)
&
&
nativeHasNoSideEffects
(
callee
)
)
{
return
undefined
;
}
}
catch
(
err
)
{
DevToolsUtils
.
reportException
(
"
evalWithDebugger
onNativeCall
"
new
Error
(
"
Unable
to
validate
native
function
against
allowlist
"
)
)
;
}
return
null
;
}
;
return
dbg
;
}
exports
.
makeSideeffectFreeDebugger
=
makeSideeffectFreeDebugger
;
let
gSideEffectFreeNatives
;
function
ensureSideEffectFreeNatives
(
maybeEvalGlobal
)
{
if
(
gSideEffectFreeNatives
)
{
return
;
}
const
{
natives
:
domNatives
idlPureAllowlist
}
=
eagerFunctionAllowlist
;
const
instanceFunctionAllowlist
=
[
]
;
function
collectMethodsAndGetters
(
obj
methodsAndGetters
)
{
if
(
"
methods
"
in
methodsAndGetters
)
{
for
(
const
name
of
methodsAndGetters
.
methods
)
{
const
func
=
obj
[
name
]
;
if
(
func
)
{
instanceFunctionAllowlist
.
push
(
func
)
;
}
}
}
if
(
"
getters
"
in
methodsAndGetters
)
{
for
(
const
name
of
methodsAndGetters
.
getters
)
{
const
func
=
Object
.
getOwnPropertyDescriptor
(
obj
name
)
?
.
get
;
if
(
func
)
{
instanceFunctionAllowlist
.
push
(
func
)
;
}
}
}
}
if
(
maybeEvalGlobal
&
&
typeof
Window
=
=
=
"
function
"
&
&
Window
.
isInstance
(
maybeEvalGlobal
)
&
&
"
Window
"
in
idlPureAllowlist
&
&
"
instance
"
in
idlPureAllowlist
.
Window
)
{
collectMethodsAndGetters
(
maybeEvalGlobal
idlPureAllowlist
.
Window
.
instance
)
;
const
maybeLocation
=
maybeEvalGlobal
.
location
;
if
(
maybeLocation
)
{
collectMethodsAndGetters
(
maybeLocation
idlPureAllowlist
.
Location
.
instance
)
;
}
const
maybeDocument
=
maybeEvalGlobal
.
document
;
if
(
maybeDocument
)
{
collectMethodsAndGetters
(
maybeDocument
idlPureAllowlist
.
Document
.
instance
)
;
}
}
const
natives
=
[
.
.
.
eagerEcmaAllowlist
.
.
.
domNatives
.
.
.
instanceFunctionAllowlist
]
;
const
map
=
new
Map
(
)
;
for
(
const
n
of
natives
)
{
if
(
!
map
.
has
(
n
.
name
)
)
{
map
.
set
(
n
.
name
[
]
)
;
}
map
.
get
(
n
.
name
)
.
push
(
n
)
;
}
gSideEffectFreeNatives
=
map
;
}
function
nativeHasNoSideEffects
(
fn
)
{
if
(
fn
.
isBoundFunction
)
{
fn
=
fn
.
boundTargetFunction
;
}
switch
(
fn
.
name
)
{
case
"
toString
"
:
case
"
toLocaleString
"
:
case
"
valueOf
"
:
return
true
;
}
const
natives
=
gSideEffectFreeNatives
.
get
(
fn
.
name
)
;
return
natives
&
&
natives
.
some
(
n
=
>
fn
.
isSameNativeWithJitInfo
(
n
)
)
;
}
function
updateConsoleInputEvaluation
(
dbg
webConsole
)
{
if
(
webConsole
.
_lastConsoleInputEvaluation
)
{
webConsole
.
_lastConsoleInputEvaluation
=
dbg
.
adoptDebuggeeValue
(
webConsole
.
_lastConsoleInputEvaluation
)
;
}
}
function
getEvalInput
(
string
)
{
const
trimmedString
=
string
.
trim
(
)
;
if
(
trimmedString
=
=
=
"
help
"
|
|
trimmedString
=
=
=
"
?
"
)
{
return
"
help
(
)
"
;
}
if
(
isCommand
(
string
)
)
{
try
{
return
formatCommand
(
string
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
;
return
throw
"
{
e
}
"
;
}
}
if
(
trimmedString
=
=
"
console
.
mihai
(
)
"
|
|
trimmedString
=
=
"
console
.
mihai
(
)
;
"
)
{
return
'
"
http
:
/
/
incompleteness
.
me
/
blog
/
2015
/
02
/
09
/
console
-
dot
-
mihai
/
"
'
;
}
return
string
;
}
function
getFrameDbg
(
options
webConsole
)
{
if
(
!
options
.
frameActor
)
{
return
{
frame
:
null
dbg
:
webConsole
.
dbg
}
;
}
const
frameActor
=
webConsole
.
conn
.
getActor
(
options
.
frameActor
)
;
if
(
frameActor
)
{
return
{
frame
:
frameActor
.
frame
dbg
:
frameActor
.
threadActor
.
dbg
}
;
}
return
DevToolsUtils
.
reportException
(
"
evalWithDebugger
"
Error
(
"
The
frame
actor
was
not
found
:
"
+
options
.
frameActor
)
)
;
}
function
getDbgGlobal
(
options
dbg
webConsole
)
{
let
evalGlobal
=
webConsole
.
evalGlobal
;
if
(
options
.
innerWindowID
)
{
const
window
=
Services
.
wm
.
getCurrentInnerWindowWithId
(
options
.
innerWindowID
)
;
if
(
window
)
{
evalGlobal
=
window
;
}
}
const
dbgGlobal
=
dbg
.
makeGlobalObjectReference
(
evalGlobal
)
;
if
(
!
options
.
selectedObjectActor
)
{
return
{
bindSelf
:
null
dbgGlobal
evalGlobal
}
;
}
const
actor
=
webConsole
.
getActorByID
(
options
.
selectedObjectActor
)
|
|
webConsole
.
parentActor
.
getActorByID
(
options
.
selectedObjectActor
)
;
if
(
!
actor
)
{
return
{
bindSelf
:
null
dbgGlobal
evalGlobal
}
;
}
const
jsVal
=
actor
instanceof
LongStringActor
?
actor
.
str
:
actor
.
rawValue
(
)
;
if
(
!
isObject
(
jsVal
)
)
{
return
{
bindSelf
:
jsVal
dbgGlobal
evalGlobal
}
;
}
const
bindSelf
=
dbgGlobal
.
makeDebuggeeValue
(
jsVal
)
;
return
{
bindSelf
dbgGlobal
evalGlobal
}
;
}
function
getHelpers
(
dbgGlobal
options
webConsole
)
{
const
helpers
=
webConsole
.
_getWebConsoleCommands
(
dbgGlobal
)
;
if
(
options
.
selectedNodeActor
)
{
const
actor
=
webConsole
.
conn
.
getActor
(
options
.
selectedNodeActor
)
;
if
(
actor
)
{
helpers
.
selectedNode
=
actor
.
rawNode
;
}
}
return
helpers
;
}
function
cleanupBindings
(
bindings
helperCache
)
{
for
(
const
[
helperName
helper
]
of
Object
.
entries
(
helperCache
)
)
{
bindings
[
helperName
]
=
helper
;
}
if
(
bindings
.
_self
)
{
delete
bindings
.
_self
;
}
}
function
bindCommands
(
isCmd
dbgGlobal
bindSelf
frame
helpers
)
{
const
bindings
=
helpers
.
sandbox
;
if
(
bindSelf
)
{
bindings
.
_self
=
bindSelf
;
}
const
availableHelpers
=
WebConsoleCommandsManager
.
getAllCommandNames
(
)
;
let
helpersToDisable
=
[
]
;
const
helperCache
=
{
}
;
if
(
!
isCmd
)
{
if
(
frame
)
{
const
env
=
frame
.
environment
;
if
(
env
)
{
helpersToDisable
=
availableHelpers
.
filter
(
name
=
>
!
!
env
.
find
(
name
)
)
;
}
}
else
{
helpersToDisable
=
availableHelpers
.
filter
(
name
=
>
!
!
dbgGlobal
.
getOwnPropertyDescriptor
(
name
)
)
;
}
helpersToDisable
.
push
(
"
screenshot
"
)
;
}
for
(
const
helper
of
helpersToDisable
)
{
helperCache
[
helper
]
=
bindings
[
helper
]
;
delete
bindings
[
helper
]
;
}
return
{
bindings
helperCache
}
;
}
