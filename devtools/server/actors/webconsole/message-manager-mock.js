"
use
strict
"
;
function
MessageManagerMock
(
)
{
this
.
_listeners
=
new
Map
(
)
;
}
MessageManagerMock
.
prototype
=
{
addMessageListener
(
name
listener
)
{
let
listeners
=
this
.
_listeners
.
get
(
name
)
;
if
(
!
listeners
)
{
listeners
=
[
]
;
this
.
_listeners
.
set
(
name
listeners
)
;
}
if
(
!
listeners
.
includes
(
listener
)
)
{
listeners
.
push
(
listener
)
;
}
}
removeMessageListener
(
name
listener
)
{
const
listeners
=
this
.
_listeners
.
get
(
name
)
;
const
idx
=
listeners
.
indexOf
(
listener
)
;
listeners
.
splice
(
idx
1
)
;
}
sendAsyncMessage
(
name
data
)
{
this
.
other
.
internalSendAsyncMessage
(
name
data
)
;
}
internalSendAsyncMessage
(
name
data
)
{
const
listeners
=
this
.
_listeners
.
get
(
name
)
;
if
(
!
listeners
)
{
return
;
}
const
message
=
{
target
:
this
data
}
;
for
(
const
listener
of
listeners
)
{
if
(
typeof
listener
=
=
=
"
object
"
&
&
typeof
listener
.
receiveMessage
=
=
=
"
function
"
)
{
listener
.
receiveMessage
(
message
)
;
}
else
if
(
typeof
listener
=
=
=
"
function
"
)
{
listener
(
message
)
;
}
}
}
}
;
exports
.
createMessageManagerMocks
=
function
(
)
{
const
a
=
new
MessageManagerMock
(
)
;
const
b
=
new
MessageManagerMock
(
)
;
a
.
other
=
b
;
b
.
other
=
a
;
return
[
a
b
]
;
}
;
