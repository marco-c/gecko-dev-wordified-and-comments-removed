"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
E10SUtils
"
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
ConsoleAPIStorage
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
consoleAPI
-
storage
;
1
"
]
.
getService
(
Ci
.
nsIConsoleAPIStorage
)
;
}
)
;
const
MSG_MGR_CONSOLE_MAX_SIZE
=
1024
*
1024
;
const
MSG_MGR_CONSOLE_VAR_SIZE
=
8
;
const
MSG_MGR_CONSOLE_INFO_MAX
=
1024
;
function
ContentProcessForward
(
)
{
this
.
onConsoleAPILogEvent
=
this
.
onConsoleAPILogEvent
.
bind
(
this
)
;
ConsoleAPIStorage
.
addLogEventListener
(
this
.
onConsoleAPILogEvent
Cc
[
"
mozilla
.
org
/
systemprincipal
;
1
"
]
.
createInstance
(
Ci
.
nsIPrincipal
)
)
;
Services
.
obs
.
addObserver
(
this
"
xpcom
-
shutdown
"
)
;
Services
.
cpmm
.
addMessageListener
(
"
DevTools
:
StopForwardingContentProcessMessage
"
this
)
;
}
ContentProcessForward
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
receiveMessage
(
message
)
{
if
(
message
.
name
=
=
"
DevTools
:
StopForwardingContentProcessMessage
"
)
{
this
.
uninit
(
)
;
}
}
onConsoleAPILogEvent
(
subject
data
)
{
const
consoleMsg
=
subject
.
wrappedJSObject
;
const
msgData
=
{
.
.
.
consoleMsg
arguments
:
[
]
filename
:
consoleMsg
.
filename
.
substring
(
0
MSG_MGR_CONSOLE_INFO_MAX
)
functionName
:
consoleMsg
.
functionName
&
&
consoleMsg
.
functionName
.
substring
(
0
MSG_MGR_CONSOLE_INFO_MAX
)
wrappedJSObject
:
null
}
;
const
unavailString
=
"
<
unavailable
>
"
;
const
unavailStringLength
=
unavailString
.
length
*
2
;
let
totalArgLength
=
0
;
for
(
let
arg
of
consoleMsg
.
arguments
)
{
if
(
(
typeof
arg
=
=
"
object
"
|
|
typeof
arg
=
=
"
function
"
)
&
&
arg
!
=
=
null
)
{
if
(
Services
.
appinfo
.
remoteType
=
=
=
lazy
.
E10SUtils
.
EXTENSION_REMOTE_TYPE
)
{
try
{
arg
=
Cu
.
cloneInto
(
arg
{
}
)
;
}
catch
(
e
)
{
arg
=
unavailString
;
}
}
else
{
arg
=
unavailString
;
}
totalArgLength
+
=
unavailStringLength
;
}
else
if
(
typeof
arg
=
=
"
string
"
)
{
totalArgLength
+
=
arg
.
length
*
2
;
}
else
{
totalArgLength
+
=
MSG_MGR_CONSOLE_VAR_SIZE
;
}
if
(
totalArgLength
<
=
MSG_MGR_CONSOLE_MAX_SIZE
)
{
msgData
.
arguments
.
push
(
arg
)
;
}
else
{
msgData
.
arguments
=
[
"
<
truncated
>
"
]
;
break
;
}
}
Services
.
cpmm
.
sendAsyncMessage
(
"
Console
:
Log
"
msgData
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
xpcom
-
shutdown
"
)
{
this
.
uninit
(
)
;
}
}
uninit
(
)
{
ConsoleAPIStorage
.
removeLogEventListener
(
this
.
onConsoleAPILogEvent
)
;
Services
.
obs
.
removeObserver
(
this
"
xpcom
-
shutdown
"
)
;
Services
.
cpmm
.
removeMessageListener
(
"
DevTools
:
StopForwardingContentProcessMessage
"
this
)
;
}
}
;
if
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
new
ContentProcessForward
(
)
;
}
