"
use
strict
"
;
loader
.
lazyRequireGetter
(
this
[
"
validCommands
"
]
"
resource
:
/
/
devtools
/
server
/
actors
/
webconsole
/
commands
/
manager
.
js
"
true
)
;
const
COMMAND
=
"
command
"
;
const
KEY
=
"
key
"
;
const
ARG
=
"
arg
"
;
const
COMMAND_PREFIX
=
/
^
:
/
;
const
KEY_PREFIX
=
/
^
-
-
/
;
const
DEFAULT_VALUE
=
true
;
const
COMMAND_DEFAULT_FLAG
=
{
block
:
"
url
"
screenshot
:
"
filename
"
unblock
:
"
url
"
}
;
function
formatCommand
(
string
)
{
if
(
!
isCommand
(
string
)
)
{
throw
Error
(
"
formatCommand
was
called
without
:
"
)
;
}
const
tokens
=
string
.
trim
(
)
.
split
(
/
\
s
+
/
)
.
map
(
createToken
)
;
const
{
command
args
}
=
parseCommand
(
tokens
)
;
const
argsString
=
formatArgs
(
args
)
;
return
{
command
}
(
{
argsString
}
)
;
}
function
formatArgs
(
args
)
{
return
Object
.
keys
(
args
)
.
length
?
JSON
.
stringify
(
args
)
:
"
"
;
}
function
createToken
(
string
)
{
if
(
isCommand
(
string
)
)
{
const
value
=
string
.
replace
(
COMMAND_PREFIX
"
"
)
;
if
(
!
value
|
|
!
validCommands
.
includes
(
value
)
)
{
throw
Error
(
'
{
value
}
'
is
not
a
valid
command
)
;
}
return
{
type
:
COMMAND
value
}
;
}
if
(
isKey
(
string
)
)
{
const
value
=
string
.
replace
(
KEY_PREFIX
"
"
)
;
if
(
!
value
)
{
throw
Error
(
"
invalid
flag
"
)
;
}
return
{
type
:
KEY
value
}
;
}
return
{
type
:
ARG
value
:
string
}
;
}
function
parseCommand
(
tokens
)
{
let
command
=
null
;
const
args
=
{
}
;
for
(
let
i
=
0
;
i
<
tokens
.
length
;
i
+
+
)
{
const
token
=
tokens
[
i
]
;
if
(
token
.
type
=
=
=
COMMAND
)
{
if
(
command
)
{
throw
Error
(
"
Invalid
command
"
)
;
}
command
=
token
.
value
;
}
if
(
token
.
type
=
=
=
KEY
)
{
const
nextTokenIndex
=
i
+
1
;
const
nextToken
=
tokens
[
nextTokenIndex
]
;
let
values
=
args
[
token
.
value
]
|
|
DEFAULT_VALUE
;
if
(
nextToken
&
&
nextToken
.
type
=
=
=
ARG
)
{
const
{
value
offset
}
=
collectString
(
nextToken
tokens
nextTokenIndex
)
;
const
typedValue
=
getTypedValue
(
value
)
;
if
(
values
=
=
=
DEFAULT_VALUE
)
{
values
=
typedValue
;
}
else
if
(
!
Array
.
isArray
(
values
)
)
{
values
=
[
values
typedValue
]
;
}
else
{
values
.
push
(
typedValue
)
;
}
i
=
nextTokenIndex
+
offset
;
}
args
[
token
.
value
]
=
values
;
}
const
defaultFlag
=
COMMAND_DEFAULT_FLAG
[
command
]
;
if
(
token
.
type
=
=
=
ARG
&
&
!
args
[
defaultFlag
]
)
{
const
{
value
offset
}
=
collectString
(
token
tokens
i
)
;
args
[
defaultFlag
]
=
getTypedValue
(
value
)
;
i
=
i
+
offset
;
}
}
return
{
command
args
}
;
}
const
stringChars
=
[
'
"
'
"
'
"
"
"
]
;
function
isStringChar
(
testChar
)
{
return
stringChars
.
includes
(
testChar
)
;
}
function
checkLastChar
(
string
testChar
)
{
const
lastChar
=
string
[
string
.
length
-
1
]
;
return
lastChar
=
=
=
testChar
;
}
function
hasUnescapedChar
(
value
char
rightOffset
leftOffset
)
{
const
lastPos
=
value
.
length
-
1
;
const
string
=
value
.
slice
(
rightOffset
lastPos
-
leftOffset
)
;
const
index
=
string
.
indexOf
(
char
)
;
if
(
index
=
=
=
-
1
)
{
return
false
;
}
const
prevChar
=
index
>
0
?
string
[
index
-
1
]
:
null
;
return
prevChar
!
=
=
"
\
\
"
;
}
function
collectString
(
token
tokens
index
)
{
const
firstChar
=
token
.
value
[
0
]
;
const
isString
=
isStringChar
(
firstChar
)
;
const
UNESCAPED_CHAR_ERROR
=
segment
=
>
String
has
unescaped
\
{
firstChar
}
\
in
[
{
segment
}
.
.
.
]
+
"
may
miss
a
space
between
arguments
"
;
let
value
=
token
.
value
;
if
(
!
isString
|
|
checkLastChar
(
value
firstChar
)
)
{
return
{
value
offset
:
0
}
;
}
if
(
hasUnescapedChar
(
value
firstChar
1
0
)
)
{
throw
Error
(
UNESCAPED_CHAR_ERROR
(
value
)
)
;
}
let
offset
=
null
;
for
(
let
i
=
index
+
1
;
i
<
=
tokens
.
length
;
i
+
+
)
{
if
(
i
=
=
=
tokens
.
length
)
{
throw
Error
(
"
String
does
not
terminate
"
)
;
}
const
nextToken
=
tokens
[
i
]
;
if
(
nextToken
.
type
!
=
=
ARG
)
{
throw
Error
(
String
does
not
terminate
before
flag
"
{
nextToken
.
value
}
"
)
;
}
value
=
{
value
}
{
nextToken
.
value
}
;
if
(
hasUnescapedChar
(
nextToken
.
value
firstChar
0
1
)
)
{
throw
Error
(
UNESCAPED_CHAR_ERROR
(
value
)
)
;
}
if
(
checkLastChar
(
nextToken
.
value
firstChar
)
)
{
offset
=
i
-
index
;
break
;
}
}
return
{
value
offset
}
;
}
function
isCommand
(
string
)
{
return
COMMAND_PREFIX
.
test
(
string
)
;
}
function
isKey
(
string
)
{
return
KEY_PREFIX
.
test
(
string
)
;
}
function
getTypedValue
(
value
)
{
if
(
!
isNaN
(
value
)
)
{
return
Number
(
value
)
;
}
if
(
value
=
=
=
"
true
"
|
|
value
=
=
=
"
false
"
)
{
return
Boolean
(
value
)
;
}
if
(
isStringChar
(
value
[
0
]
)
)
{
return
value
.
slice
(
1
value
.
length
-
1
)
;
}
return
value
;
}
exports
.
formatCommand
=
formatCommand
;
exports
.
isCommand
=
isCommand
;
