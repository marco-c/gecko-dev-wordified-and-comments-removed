"
use
strict
"
;
const
{
ObjectActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
object
.
js
"
)
;
class
PauseScopedObjectActor
extends
ObjectActor
{
constructor
(
obj
hooks
conn
)
{
super
(
obj
hooks
conn
)
;
this
.
hooks
.
isThreadLifetimePool
=
hooks
.
isThreadLifetimePool
;
const
guardWithPaused
=
[
"
decompile
"
"
displayString
"
"
ownPropertyNames
"
"
parameterNames
"
"
property
"
"
prototype
"
"
prototypeAndProperties
"
"
scope
"
]
;
for
(
const
methodName
of
guardWithPaused
)
{
this
[
methodName
]
=
this
.
withPaused
(
this
[
methodName
]
)
;
}
}
isPaused
(
)
{
return
this
.
threadActor
?
this
.
threadActor
.
state
=
=
=
"
paused
"
:
true
;
}
withPaused
(
method
)
{
return
function
(
)
{
if
(
this
.
isPaused
(
)
)
{
return
method
.
apply
(
this
arguments
)
;
}
return
{
error
:
"
wrongState
"
message
:
this
.
constructor
.
name
+
"
actors
can
only
be
accessed
while
the
thread
is
paused
.
"
}
;
}
;
}
destroy
(
)
{
if
(
this
.
hooks
.
isThreadLifetimePool
(
)
)
{
return
{
error
:
"
notReleasable
"
message
:
"
Only
thread
-
lifetime
actors
can
be
released
.
"
}
;
}
super
.
destroy
(
)
;
return
null
;
}
}
exports
.
PauseScopedObjectActor
=
PauseScopedObjectActor
;
