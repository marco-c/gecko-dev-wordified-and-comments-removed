"
use
strict
"
;
const
{
ObjectActor
}
=
require
(
"
devtools
/
server
/
actors
/
object
"
)
;
function
PauseScopedActor
(
)
{
}
PauseScopedActor
.
withPaused
=
function
(
method
)
{
return
function
(
)
{
if
(
this
.
isPaused
(
)
)
{
return
method
.
apply
(
this
arguments
)
;
}
return
this
.
_wrongState
(
)
;
}
;
}
;
PauseScopedActor
.
prototype
=
{
isPaused
:
function
(
)
{
return
this
.
threadActor
?
this
.
threadActor
.
state
=
=
=
"
paused
"
:
true
;
}
_wrongState
:
function
(
)
{
return
{
error
:
"
wrongState
"
message
:
this
.
constructor
.
name
+
"
actors
can
only
be
accessed
while
the
thread
is
paused
.
"
}
;
}
}
;
function
PauseScopedObjectActor
(
obj
hooks
)
{
ObjectActor
.
call
(
this
obj
hooks
)
;
this
.
hooks
.
promote
=
hooks
.
promote
;
this
.
hooks
.
isThreadLifetimePool
=
hooks
.
isThreadLifetimePool
;
}
PauseScopedObjectActor
.
prototype
=
Object
.
create
(
PauseScopedActor
.
prototype
)
;
Object
.
assign
(
PauseScopedObjectActor
.
prototype
ObjectActor
.
prototype
)
;
Object
.
assign
(
PauseScopedObjectActor
.
prototype
{
constructor
:
PauseScopedObjectActor
actorPrefix
:
"
pausedobj
"
onOwnPropertyNames
:
PauseScopedActor
.
withPaused
(
ObjectActor
.
prototype
.
onOwnPropertyNames
)
onPrototypeAndProperties
:
PauseScopedActor
.
withPaused
(
ObjectActor
.
prototype
.
onPrototypeAndProperties
)
onPrototype
:
PauseScopedActor
.
withPaused
(
ObjectActor
.
prototype
.
onPrototype
)
onProperty
:
PauseScopedActor
.
withPaused
(
ObjectActor
.
prototype
.
onProperty
)
onDecompile
:
PauseScopedActor
.
withPaused
(
ObjectActor
.
prototype
.
onDecompile
)
onDisplayString
:
PauseScopedActor
.
withPaused
(
ObjectActor
.
prototype
.
onDisplayString
)
onParameterNames
:
PauseScopedActor
.
withPaused
(
ObjectActor
.
prototype
.
onParameterNames
)
onThreadGrip
:
PauseScopedActor
.
withPaused
(
function
(
request
)
{
this
.
hooks
.
promote
(
)
;
return
{
}
;
}
)
onRelease
:
PauseScopedActor
.
withPaused
(
function
(
request
)
{
if
(
this
.
hooks
.
isThreadLifetimePool
(
)
)
{
return
{
error
:
"
notReleasable
"
message
:
"
Only
thread
-
lifetime
actors
can
be
released
.
"
}
;
}
this
.
release
(
)
;
return
{
}
;
}
)
}
)
;
Object
.
assign
(
PauseScopedObjectActor
.
prototype
.
requestTypes
{
"
threadGrip
"
:
PauseScopedObjectActor
.
prototype
.
onThreadGrip
}
)
;
exports
.
PauseScopedObjectActor
=
PauseScopedObjectActor
;
