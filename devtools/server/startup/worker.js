"
use
strict
"
;
let
nextId
=
0
;
const
rpcDeferreds
=
{
}
;
this
.
rpc
=
function
(
method
.
.
.
params
)
{
const
id
=
nextId
+
+
;
postMessage
(
JSON
.
stringify
(
{
type
:
"
rpc
"
method
params
id
}
)
)
;
const
deferred
=
defer
(
)
;
rpcDeferreds
[
id
]
=
deferred
;
return
deferred
.
promise
;
}
;
loadSubScript
(
"
resource
:
/
/
devtools
/
shared
/
worker
/
loader
.
js
"
)
;
const
defer
=
worker
.
require
(
"
devtools
/
shared
/
defer
"
)
;
const
{
WorkerTargetActor
}
=
worker
.
require
(
"
devtools
/
server
/
actors
/
targets
/
worker
"
)
;
const
{
DevToolsServer
}
=
worker
.
require
(
"
devtools
/
server
/
devtools
-
server
"
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
createRootActor
=
function
(
)
{
throw
new
Error
(
"
Should
never
get
here
!
"
)
;
}
;
const
connections
=
new
Map
(
)
;
this
.
addEventListener
(
"
message
"
function
(
event
)
{
const
packet
=
JSON
.
parse
(
event
.
data
)
;
switch
(
packet
.
type
)
{
case
"
connect
"
:
const
{
forwardingPrefix
}
=
packet
;
const
connection
=
DevToolsServer
.
connectToParent
(
forwardingPrefix
this
)
;
const
workerTargetActor
=
new
WorkerTargetActor
(
connection
global
)
;
workerTargetActor
.
manage
(
workerTargetActor
)
;
workerTargetActor
.
on
(
"
worker
-
thread
-
attached
"
function
onThreadAttached
(
)
{
postMessage
(
JSON
.
stringify
(
{
type
:
"
worker
-
thread
-
attached
"
}
)
)
;
}
)
;
workerTargetActor
.
attach
(
)
;
connections
.
set
(
forwardingPrefix
{
connection
}
)
;
postMessage
(
JSON
.
stringify
(
{
type
:
"
connected
"
forwardingPrefix
workerTargetForm
:
workerTargetActor
.
form
(
)
}
)
)
;
break
;
case
"
disconnect
"
:
connections
.
get
(
packet
.
forwardingPrefix
)
.
connection
.
close
(
)
;
connections
.
delete
(
packet
.
forwardingPrefix
)
;
break
;
case
"
rpc
"
:
const
deferred
=
rpcDeferreds
[
packet
.
id
]
;
delete
rpcDeferreds
[
packet
.
id
]
;
if
(
packet
.
error
)
{
deferred
.
reject
(
packet
.
error
)
;
}
deferred
.
resolve
(
packet
.
result
)
;
break
;
}
}
)
;
