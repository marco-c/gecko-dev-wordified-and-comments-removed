"
use
strict
"
;
try
{
var
chromeGlobal
=
this
;
(
function
(
)
{
let
loader
customLoader
=
false
;
if
(
content
.
document
.
nodePrincipal
.
isSystemPrincipal
)
{
const
{
useDistinctSystemPrincipalLoader
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
DistinctSystemPrincipalLoader
.
sys
.
mjs
"
{
global
:
"
shared
"
}
)
;
loader
=
useDistinctSystemPrincipalLoader
(
chromeGlobal
)
;
customLoader
=
true
;
}
else
{
loader
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
)
;
}
const
{
require
}
=
loader
;
const
DevToolsUtils
=
require
(
"
resource
:
/
/
devtools
/
shared
/
DevToolsUtils
.
js
"
)
;
const
{
DevToolsServer
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
devtools
-
server
.
js
"
)
;
DevToolsServer
.
init
(
)
;
DevToolsServer
.
registerActors
(
{
target
:
true
}
)
;
const
connections
=
new
Map
(
)
;
const
onConnect
=
DevToolsUtils
.
makeInfallible
(
function
(
msg
)
{
const
mm
=
msg
.
target
;
const
prefix
=
msg
.
data
.
prefix
;
if
(
DevToolsServer
.
hasConnectionForPrefix
(
prefix
)
)
{
return
;
}
removeMessageListener
(
"
debug
:
connect
"
onConnect
)
;
const
conn
=
DevToolsServer
.
connectToParent
(
prefix
mm
)
;
connections
.
set
(
prefix
conn
)
;
const
{
WindowGlobalTargetActor
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
targets
/
window
-
global
.
js
"
)
;
const
{
createBrowserElementSessionContext
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
watcher
/
session
-
context
.
js
"
)
;
const
{
docShell
}
=
chromeGlobal
;
const
fakeBrowserElement
=
{
browserId
:
docShell
.
browsingContext
.
browserId
}
;
const
actor
=
new
WindowGlobalTargetActor
(
conn
{
docShell
isTopLevelTarget
:
true
sessionContext
:
createBrowserElementSessionContext
(
fakeBrowserElement
{
}
)
}
)
;
actor
.
manage
(
actor
)
;
sendAsyncMessage
(
"
debug
:
actor
"
{
actor
:
actor
.
form
(
)
prefix
}
)
;
}
)
;
addMessageListener
(
"
debug
:
connect
"
onConnect
)
;
const
onDisconnect
=
DevToolsUtils
.
makeInfallible
(
function
(
msg
)
{
const
prefix
=
msg
.
data
.
prefix
;
const
conn
=
connections
.
get
(
prefix
)
;
if
(
!
conn
)
{
return
;
}
removeMessageListener
(
"
debug
:
disconnect
"
onDisconnect
)
;
conn
.
close
(
)
;
connections
.
delete
(
prefix
)
;
}
)
;
addMessageListener
(
"
debug
:
disconnect
"
onDisconnect
)
;
addEventListener
(
"
unload
"
(
)
=
>
{
for
(
const
conn
of
connections
.
values
(
)
)
{
conn
.
close
(
)
;
}
connections
.
clear
(
)
;
}
)
;
function
destroyLoader
(
)
{
if
(
DevToolsServer
.
hasConnection
(
)
|
|
DevToolsServer
.
keepAlive
)
{
return
;
}
DevToolsServer
.
off
(
"
connectionchange
"
destroyLoader
)
;
if
(
customLoader
)
{
const
{
releaseDistinctSystemPrincipalLoader
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
DistinctSystemPrincipalLoader
.
sys
.
mjs
"
{
global
:
"
shared
"
}
)
;
releaseDistinctSystemPrincipalLoader
(
chromeGlobal
)
;
}
}
DevToolsServer
.
on
(
"
connectionchange
"
destroyLoader
)
;
}
)
(
)
;
}
catch
(
e
)
{
dump
(
Exception
in
DevTools
frame
startup
:
{
e
}
\
n
)
;
}
