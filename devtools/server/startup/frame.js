"
use
strict
"
;
try
{
var
chromeGlobal
=
this
;
(
function
(
)
{
let
loader
customLoader
=
false
;
if
(
content
.
document
.
nodePrincipal
.
isSystemPrincipal
)
{
const
{
DevToolsLoader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
loader
=
new
DevToolsLoader
(
{
invisibleToDebugger
:
true
}
)
;
customLoader
=
true
;
}
else
{
loader
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
}
const
{
require
}
=
loader
;
const
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
const
{
dumpn
}
=
DevToolsUtils
;
const
{
DebuggerServer
}
=
require
(
"
devtools
/
server
/
main
"
)
;
const
{
ActorPool
}
=
require
(
"
devtools
/
server
/
actors
/
common
"
)
;
DebuggerServer
.
init
(
)
;
DebuggerServer
.
registerActors
(
{
target
:
true
}
)
;
const
connections
=
new
Map
(
)
;
const
onConnect
=
DevToolsUtils
.
makeInfallible
(
function
(
msg
)
{
removeMessageListener
(
"
debug
:
connect
"
onConnect
)
;
const
mm
=
msg
.
target
;
const
prefix
=
msg
.
data
.
prefix
;
const
addonId
=
msg
.
data
.
addonId
;
const
conn
=
DebuggerServer
.
connectToParent
(
prefix
mm
)
;
conn
.
parentMessageManager
=
mm
;
connections
.
set
(
prefix
conn
)
;
let
actor
;
if
(
addonId
)
{
const
{
WebExtensionTargetActor
}
=
require
(
"
devtools
/
server
/
actors
/
targets
/
webextension
"
)
;
actor
=
new
WebExtensionTargetActor
(
conn
chromeGlobal
prefix
addonId
)
;
}
else
{
const
{
FrameTargetActor
}
=
require
(
"
devtools
/
server
/
actors
/
targets
/
frame
"
)
;
actor
=
new
FrameTargetActor
(
conn
chromeGlobal
)
;
}
const
actorPool
=
new
ActorPool
(
conn
)
;
actorPool
.
addActor
(
actor
)
;
conn
.
addActorPool
(
actorPool
)
;
sendAsyncMessage
(
"
debug
:
actor
"
{
actor
:
actor
.
form
(
)
prefix
:
prefix
}
)
;
}
)
;
addMessageListener
(
"
debug
:
connect
"
onConnect
)
;
const
onSetupInChild
=
DevToolsUtils
.
makeInfallible
(
msg
=
>
{
const
{
module
setupChild
args
}
=
msg
.
data
;
let
m
;
try
{
m
=
require
(
module
)
;
if
(
!
(
setupChild
in
m
)
)
{
dumpn
(
ERROR
:
module
'
{
module
}
'
does
not
export
'
{
setupChild
}
'
)
;
return
false
;
}
m
[
setupChild
]
.
apply
(
m
args
)
;
}
catch
(
e
)
{
const
errorMessage
=
"
Exception
during
actor
module
setup
running
in
the
child
process
:
"
;
DevToolsUtils
.
reportException
(
errorMessage
+
e
)
;
dumpn
(
ERROR
:
{
errorMessage
}
\
n
\
t
module
:
'
{
module
}
'
\
n
\
t
+
setupChild
:
'
{
setupChild
}
'
\
n
{
DevToolsUtils
.
safeErrorString
(
e
)
}
)
;
return
false
;
}
if
(
msg
.
data
.
id
)
{
sendAsyncMessage
(
"
debug
:
setup
-
in
-
child
-
response
"
{
id
:
msg
.
data
.
id
}
)
;
}
return
true
;
}
)
;
addMessageListener
(
"
debug
:
setup
-
in
-
child
"
onSetupInChild
)
;
const
onDisconnect
=
DevToolsUtils
.
makeInfallible
(
function
(
msg
)
{
const
prefix
=
msg
.
data
.
prefix
;
const
conn
=
connections
.
get
(
prefix
)
;
if
(
!
conn
)
{
return
;
}
removeMessageListener
(
"
debug
:
disconnect
"
onDisconnect
)
;
conn
.
close
(
)
;
connections
.
delete
(
prefix
)
;
}
)
;
addMessageListener
(
"
debug
:
disconnect
"
onDisconnect
)
;
addEventListener
(
"
unload
"
(
)
=
>
{
for
(
const
conn
of
connections
.
values
(
)
)
{
conn
.
close
(
)
;
}
connections
.
clear
(
)
;
}
)
;
function
destroyServer
(
)
{
if
(
DebuggerServer
.
hasConnection
(
)
|
|
DebuggerServer
.
keepAlive
)
{
return
;
}
DebuggerServer
.
off
(
"
connectionchange
"
destroyServer
)
;
DebuggerServer
.
destroy
(
)
;
if
(
customLoader
)
{
loader
.
destroy
(
)
;
}
}
DebuggerServer
.
on
(
"
connectionchange
"
destroyServer
)
;
}
)
(
)
;
}
catch
(
e
)
{
dump
(
Exception
in
DevTools
frame
startup
:
{
e
}
\
n
)
;
}
