"
use
strict
"
;
var
{
Ci
Cc
}
=
require
(
"
chrome
"
)
;
var
Services
=
require
(
"
Services
"
)
;
var
{
ActorRegistry
}
=
require
(
"
devtools
/
server
/
actors
/
utils
/
actor
-
registry
"
)
;
var
DevToolsUtils
=
require
(
"
devtools
/
shared
/
DevToolsUtils
"
)
;
var
{
dumpn
}
=
DevToolsUtils
;
loader
.
lazyRequireGetter
(
this
"
DebuggerServerConnection
"
"
devtools
/
server
/
debugger
-
server
-
connection
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ContentProcessConnector
"
"
devtools
/
server
/
connectors
/
content
-
process
-
connector
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
FrameConnector
"
"
devtools
/
server
/
connectors
/
frame
-
connector
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
WorkerConnector
"
"
devtools
/
server
/
connectors
/
worker
-
connector
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
Authentication
"
"
devtools
/
shared
/
security
/
auth
"
)
;
loader
.
lazyRequireGetter
(
this
"
LocalDebuggerTransport
"
"
devtools
/
shared
/
transport
/
local
-
transport
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
ChildDebuggerTransport
"
"
devtools
/
shared
/
transport
/
child
-
transport
"
true
)
;
loader
.
lazyRequireGetter
(
this
"
WorkerThreadWorkerDebuggerTransport
"
"
devtools
/
shared
/
transport
/
worker
-
transport
"
true
)
;
loader
.
lazyGetter
(
this
"
generateUUID
"
(
)
=
>
{
const
{
generateUUID
}
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
return
generateUUID
;
}
)
;
const
CONTENT_PROCESS_SERVER_STARTUP_SCRIPT
=
"
resource
:
/
/
devtools
/
server
/
startup
/
content
-
process
.
js
"
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
shared
/
event
-
emitter
"
)
;
var
DebuggerServer
=
{
_listeners
:
[
]
_initialized
:
false
globalActorFactories
:
{
}
targetScopedActorFactories
:
{
}
LONG_STRING_LENGTH
:
10000
LONG_STRING_INITIAL_LENGTH
:
1000
LONG_STRING_READ_LENGTH
:
65
*
1024
chromeWindowType
:
"
navigator
:
browser
"
allowChromeProcess
:
false
keepAlive
:
false
get
rootlessServer
(
)
{
return
!
this
.
createRootActor
;
}
init
(
)
{
if
(
this
.
initialized
)
{
return
;
}
this
.
_connections
=
{
}
;
ActorRegistry
.
init
(
this
.
_connections
)
;
this
.
_nextConnID
=
0
;
this
.
_initialized
=
true
;
this
.
_onSocketListenerAccepted
=
this
.
_onSocketListenerAccepted
.
bind
(
this
)
;
}
get
protocol
(
)
{
return
require
(
"
devtools
/
shared
/
protocol
"
)
;
}
get
initialized
(
)
{
return
this
.
_initialized
;
}
hasConnection
(
)
{
return
Object
.
keys
(
this
.
_connections
)
.
length
>
0
;
}
destroy
(
)
{
if
(
!
this
.
_initialized
)
{
return
;
}
for
(
const
connID
of
Object
.
getOwnPropertyNames
(
this
.
_connections
)
)
{
this
.
_connections
[
connID
]
.
close
(
)
;
}
ActorRegistry
.
destroy
(
)
;
this
.
closeAllSocketListeners
(
)
;
this
.
_initialized
=
false
;
dumpn
(
"
Debugger
server
is
shut
down
.
"
)
;
}
_checkInit
(
)
{
if
(
!
this
.
_initialized
)
{
throw
new
Error
(
"
DebuggerServer
has
not
been
initialized
.
"
)
;
}
if
(
!
this
.
rootlessServer
&
&
!
this
.
createRootActor
)
{
throw
new
Error
(
"
Use
DebuggerServer
.
setRootActor
(
)
to
add
a
root
actor
"
+
"
implementation
.
"
)
;
}
}
registerActors
(
{
root
browser
target
}
)
{
if
(
browser
)
{
ActorRegistry
.
addBrowserActors
(
)
;
}
if
(
root
)
{
const
{
createRootActor
}
=
require
(
"
devtools
/
server
/
actors
/
webbrowser
"
)
;
this
.
setRootActor
(
createRootActor
)
;
}
if
(
target
)
{
ActorRegistry
.
addTargetScopedActors
(
)
;
}
}
registerAllActors
(
)
{
this
.
registerActors
(
{
root
:
true
browser
:
true
target
:
true
}
)
;
}
get
listeningSockets
(
)
{
return
this
.
_listeners
.
length
;
}
addSocketListener
(
listener
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
devtools
.
debugger
.
remote
-
enabled
"
)
)
{
throw
new
Error
(
"
Can
'
t
add
a
SocketListener
remote
debugging
disabled
"
)
;
}
this
.
_checkInit
(
)
;
listener
.
on
(
"
accepted
"
this
.
_onSocketListenerAccepted
)
;
this
.
_listeners
.
push
(
listener
)
;
}
removeSocketListener
(
listener
)
{
for
(
const
connID
of
Object
.
getOwnPropertyNames
(
this
.
_connections
)
)
{
const
connection
=
this
.
_connections
[
connID
]
;
if
(
connection
.
isAcceptedBy
(
listener
)
)
{
connection
.
close
(
)
;
}
}
this
.
_listeners
=
this
.
_listeners
.
filter
(
l
=
>
l
!
=
=
listener
)
;
listener
.
off
(
"
accepted
"
this
.
_onSocketListenerAccepted
)
;
}
closeAllSocketListeners
(
)
{
if
(
!
this
.
listeningSockets
)
{
return
false
;
}
for
(
const
listener
of
this
.
_listeners
)
{
listener
.
close
(
)
;
}
return
true
;
}
_onSocketListenerAccepted
(
transport
listener
)
{
this
.
_onConnection
(
transport
null
false
listener
)
;
}
connectPipe
(
prefix
)
{
this
.
_checkInit
(
)
;
const
serverTransport
=
new
LocalDebuggerTransport
(
)
;
const
clientTransport
=
new
LocalDebuggerTransport
(
serverTransport
)
;
serverTransport
.
other
=
clientTransport
;
const
connection
=
this
.
_onConnection
(
serverTransport
prefix
)
;
clientTransport
.
_serverConnection
=
connection
;
return
clientTransport
;
}
connectToParent
(
prefix
scopeOrManager
)
{
this
.
_checkInit
(
)
;
const
transport
=
isWorker
?
new
WorkerThreadWorkerDebuggerTransport
(
scopeOrManager
prefix
)
:
new
ChildDebuggerTransport
(
scopeOrManager
prefix
)
;
return
this
.
_onConnection
(
transport
prefix
true
)
;
}
connectToContentProcess
(
connection
mm
onDestroy
)
{
return
ContentProcessConnector
.
startServer
(
connection
mm
onDestroy
)
;
}
connectToWorker
(
connection
dbg
id
options
)
{
return
WorkerConnector
.
startServer
(
connection
dbg
id
options
)
;
}
connectToFrame
(
connection
frame
onDestroy
{
addonId
}
=
{
}
)
{
return
FrameConnector
.
startServer
(
connection
frame
onDestroy
{
addonId
}
)
;
}
get
isInChildProcess
(
)
{
return
(
Services
.
appinfo
.
processType
!
=
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
)
;
}
setupInChild
(
{
module
setupChild
args
waitForEval
}
)
{
if
(
this
.
_childMessageManagers
.
size
=
=
0
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
done
=
>
{
if
(
typeof
waitForEval
!
=
"
boolean
"
)
{
waitForEval
=
false
;
}
let
count
=
this
.
_childMessageManagers
.
size
;
const
id
=
waitForEval
?
generateUUID
(
)
.
toString
(
)
:
null
;
this
.
_childMessageManagers
.
forEach
(
mm
=
>
{
if
(
waitForEval
)
{
const
evalListener
=
msg
=
>
{
if
(
msg
.
data
.
id
!
=
=
id
)
{
return
;
}
mm
.
removeMessageListener
(
"
debug
:
setup
-
in
-
child
-
response
"
evalListener
)
;
if
(
-
-
count
=
=
=
0
)
{
done
(
)
;
}
}
;
mm
.
addMessageListener
(
"
debug
:
setup
-
in
-
child
-
response
"
evalListener
)
;
}
mm
.
sendAsyncMessage
(
"
debug
:
setup
-
in
-
child
"
{
module
:
module
setupChild
:
setupChild
args
:
args
id
:
id
}
)
;
}
)
;
if
(
!
waitForEval
)
{
done
(
)
;
}
}
)
;
}
_childMessageManagers
:
new
Set
(
)
_onConnection
(
transport
forwardingPrefix
noRootActor
=
false
socketListener
=
null
)
{
let
connID
;
if
(
forwardingPrefix
)
{
connID
=
forwardingPrefix
+
"
/
"
;
}
else
{
connID
=
"
server
"
+
loader
.
id
+
"
.
conn
"
+
this
.
_nextConnID
+
+
+
"
.
"
;
}
const
conn
=
new
DebuggerServerConnection
(
connID
transport
socketListener
)
;
this
.
_connections
[
connID
]
=
conn
;
if
(
!
noRootActor
)
{
conn
.
rootActor
=
this
.
createRootActor
(
conn
)
;
if
(
forwardingPrefix
)
{
conn
.
rootActor
.
actorID
=
forwardingPrefix
+
"
/
root
"
;
}
else
{
conn
.
rootActor
.
actorID
=
"
root
"
;
}
conn
.
addActor
(
conn
.
rootActor
)
;
transport
.
send
(
conn
.
rootActor
.
sayHello
(
)
)
;
}
transport
.
ready
(
)
;
this
.
emit
(
"
connectionchange
"
"
opened
"
conn
)
;
return
conn
;
}
_connectionClosed
(
connection
)
{
delete
this
.
_connections
[
connection
.
prefix
]
;
this
.
emit
(
"
connectionchange
"
"
closed
"
connection
)
;
}
setRootActor
(
actorFactory
)
{
this
.
createRootActor
=
actorFactory
;
}
removeContentServerScript
(
)
{
Services
.
ppmm
.
removeDelayedProcessScript
(
CONTENT_PROCESS_SERVER_STARTUP_SCRIPT
)
;
try
{
Services
.
ppmm
.
broadcastAsyncMessage
(
"
debug
:
close
-
content
-
server
"
)
;
}
catch
(
e
)
{
}
}
searchAllConnectionsForActor
(
actorID
)
{
for
(
const
connID
of
Object
.
getOwnPropertyNames
(
this
.
_connections
)
)
{
const
actor
=
this
.
_connections
[
connID
]
.
getActor
(
actorID
)
;
if
(
actor
)
{
return
actor
;
}
}
return
null
;
}
}
;
DevToolsUtils
.
defineLazyGetter
(
DebuggerServer
"
Authenticators
"
(
)
=
>
{
return
Authentication
.
Authenticators
;
}
)
;
DevToolsUtils
.
defineLazyGetter
(
DebuggerServer
"
AuthenticationResult
"
(
)
=
>
{
return
Authentication
.
AuthenticationResult
;
}
)
;
EventEmitter
.
decorate
(
DebuggerServer
)
;
exports
.
DebuggerServer
=
DebuggerServer
;
