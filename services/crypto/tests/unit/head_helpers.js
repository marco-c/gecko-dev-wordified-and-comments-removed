var
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
try
{
Cc
[
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
]
.
getService
(
Ci
.
nsIXULAppInfo
)
;
}
catch
(
ex
)
{
var
OS
=
"
XPCShell
"
;
if
(
mozinfo
.
os
=
=
"
win
"
)
{
OS
=
"
WINNT
"
;
}
else
if
(
mozinfo
.
os
=
=
"
mac
"
)
{
OS
=
"
Darwin
"
;
}
else
{
OS
=
"
Linux
"
;
}
const
{
updateAppInfo
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AppInfo
.
jsm
"
)
;
updateAppInfo
(
{
name
:
"
XPCShell
"
ID
:
"
{
3e3ba16c
-
1675
-
4e88
-
b9c8
-
afef81b3d2ef
}
"
version
:
"
1
"
platformVersion
:
"
"
OS
}
)
;
}
function
base64UrlDecode
(
s
)
{
s
=
s
.
replace
(
/
-
/
g
"
+
"
)
;
s
=
s
.
replace
(
/
_
/
g
"
/
"
)
;
switch
(
s
.
length
%
4
)
{
case
0
:
break
;
case
2
:
s
+
=
"
=
=
"
;
break
;
case
3
:
s
+
=
"
=
"
;
break
;
default
:
throw
new
Error
(
"
Illegal
base64url
string
!
"
)
;
}
return
atob
(
s
)
;
}
function
addResourceAlias
(
)
{
const
resProt
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
let
uri
=
Services
.
io
.
newURI
(
"
resource
:
/
/
gre
/
modules
/
services
-
crypto
/
"
)
;
resProt
.
setSubstitution
(
"
services
-
crypto
"
uri
)
;
}
addResourceAlias
(
)
;
var
_
=
function
(
some
debug
text
to
)
{
print
(
Array
.
from
(
arguments
)
.
join
(
"
"
)
)
;
}
;
