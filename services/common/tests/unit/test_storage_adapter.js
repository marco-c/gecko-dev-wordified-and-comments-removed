Cu
.
import
(
"
resource
:
/
/
services
-
common
/
moz
-
kinto
-
client
.
js
"
)
;
const
Kinto
=
loadKinto
(
)
;
const
FirefoxAdapter
=
Kinto
.
adapters
.
FirefoxAdapter
;
const
kintoFilename
=
"
kinto
.
sqlite
"
;
let
gFirefoxAdapter
=
null
;
function
do_get_kinto_adapter
(
)
{
if
(
gFirefoxAdapter
=
=
null
)
{
gFirefoxAdapter
=
new
FirefoxAdapter
(
"
test
"
)
;
}
return
gFirefoxAdapter
;
}
function
do_get_kinto_db
(
)
{
let
profile
=
do_get_profile
(
)
;
let
kintoDB
=
profile
.
clone
(
)
;
kintoDB
.
append
(
kintoFilename
)
;
return
kintoDB
;
}
function
cleanup_kinto
(
)
{
add_test
(
function
cleanup_kinto_files
(
)
{
let
kintoDB
=
do_get_kinto_db
(
)
;
kintoDB
.
remove
(
false
)
;
gFirefoxAdapter
=
null
;
run_next_test
(
)
;
}
)
;
}
function
test_collection_operations
(
)
{
add_task
(
function
*
test_kinto_clear
(
)
{
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
yield
adapter
.
clear
(
)
;
yield
adapter
.
close
(
)
;
}
)
;
add_task
(
function
*
test_kinto_create_new_get_existing
(
)
{
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
let
record
=
{
id
:
"
test
-
id
"
foo
:
"
bar
"
}
;
yield
adapter
.
create
(
record
)
;
let
newRecord
=
yield
adapter
.
get
(
"
test
-
id
"
)
;
deepEqual
(
record
newRecord
)
;
yield
adapter
.
close
(
)
;
}
)
;
add_task
(
function
*
test_kinto_can_remove_some_records
(
)
{
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
let
record
=
{
id
:
"
test
-
id
-
2
"
foo
:
"
baz
"
}
;
yield
adapter
.
create
(
record
)
;
let
newRecord
=
yield
adapter
.
get
(
"
test
-
id
-
2
"
)
;
deepEqual
(
record
newRecord
)
;
let
id
=
yield
adapter
.
delete
(
record
.
id
)
;
do_check_eq
(
record
.
id
id
)
;
newRecord
=
yield
adapter
.
get
(
record
.
id
)
;
do_check_eq
(
newRecord
undefined
)
;
newRecord
=
yield
adapter
.
get
(
"
test
-
id
"
)
;
do_check_neq
(
newRecord
undefined
)
;
yield
adapter
.
close
(
)
;
}
)
;
add_task
(
function
*
test_kinto_get_non_existant
(
)
{
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
let
newRecord
=
yield
adapter
.
get
(
"
missing
-
test
-
id
"
)
;
do_check_eq
(
newRecord
undefined
)
;
yield
adapter
.
close
(
)
;
}
)
;
add_task
(
function
*
test_kinto_update_get_existing
(
)
{
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
let
originalRecord
=
{
id
:
"
test
-
id
"
foo
:
"
bar
"
}
;
let
updatedRecord
=
{
id
:
"
test
-
id
"
foo
:
"
baz
"
}
;
yield
adapter
.
clear
(
)
;
yield
adapter
.
create
(
originalRecord
)
;
yield
adapter
.
update
(
updatedRecord
)
;
let
newRecord
=
yield
adapter
.
get
(
"
test
-
id
"
)
;
deepEqual
(
updatedRecord
newRecord
)
;
yield
adapter
.
close
(
)
;
}
)
;
add_task
(
function
*
test_kinto_list
(
)
{
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
let
originalRecord
=
{
id
:
"
test
-
id
-
1
"
foo
:
"
bar
"
}
;
let
records
=
yield
adapter
.
list
(
)
;
do_check_eq
(
records
.
length
1
)
;
yield
adapter
.
create
(
originalRecord
)
;
records
=
yield
adapter
.
list
(
)
;
do_check_eq
(
records
.
length
2
)
;
yield
adapter
.
close
(
)
;
}
)
;
add_task
(
function
*
test_kinto_last_modified
(
)
{
const
initialValue
=
0
;
const
intendedValue
=
12345678
;
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
let
lastModified
=
yield
adapter
.
getLastModified
(
)
;
do_check_eq
(
lastModified
initialValue
)
;
let
result
=
yield
adapter
.
saveLastModified
(
intendedValue
)
;
do_check_eq
(
result
intendedValue
)
;
lastModified
=
yield
adapter
.
getLastModified
(
)
;
do_check_eq
(
lastModified
intendedValue
)
;
result
=
yield
adapter
.
saveLastModified
(
"
"
+
intendedValue
+
"
blah
"
)
;
do_check_eq
(
result
intendedValue
)
;
lastModified
=
yield
adapter
.
getLastModified
(
)
;
do_check_eq
(
lastModified
intendedValue
)
;
yield
adapter
.
close
(
)
;
}
)
;
add_task
(
function
*
test_kinto_import_records
(
)
{
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
let
record1
=
{
id
:
1
foo
:
"
bar
"
}
;
let
record2
=
{
id
:
2
foo
:
"
baz
"
}
;
let
impactedRecords
=
yield
adapter
.
loadDump
(
[
record1
record2
]
)
;
do_check_eq
(
impactedRecords
.
length
2
)
;
let
newRecord1
=
yield
adapter
.
get
(
"
1
"
)
;
deepEqual
(
record1
newRecord1
)
;
let
newRecord2
=
yield
adapter
.
get
(
"
2
"
)
;
deepEqual
(
record2
newRecord2
)
;
yield
adapter
.
close
(
)
;
}
)
;
add_task
(
function
*
test_kinto_import_records_should_override_existing
(
)
{
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
yield
adapter
.
clear
(
)
;
records
=
yield
adapter
.
list
(
)
;
do_check_eq
(
records
.
length
0
)
;
let
impactedRecords
=
yield
adapter
.
loadDump
(
[
{
id
:
1
foo
:
"
bar
"
}
{
id
:
2
foo
:
"
baz
"
}
]
)
;
do_check_eq
(
impactedRecords
.
length
2
)
;
yield
adapter
.
loadDump
(
[
{
id
:
1
foo
:
"
baz
"
}
{
id
:
3
foo
:
"
bab
"
}
]
)
;
records
=
yield
adapter
.
list
(
)
;
do_check_eq
(
records
.
length
3
)
;
let
newRecord1
=
yield
adapter
.
get
(
"
1
"
)
;
deepEqual
(
newRecord1
.
foo
"
baz
"
)
;
yield
adapter
.
close
(
)
;
}
)
;
add_task
(
function
*
test_import_updates_lastModified
(
)
{
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
yield
adapter
.
loadDump
(
[
{
id
:
1
foo
:
"
bar
"
last_modified
:
1457896541
}
{
id
:
2
foo
:
"
baz
"
last_modified
:
1458796542
}
]
)
;
let
lastModified
=
yield
adapter
.
getLastModified
(
)
;
do_check_eq
(
lastModified
1458796542
)
;
yield
adapter
.
close
(
)
;
}
)
;
add_task
(
function
*
test_import_preserves_older_lastModified
(
)
{
let
adapter
=
do_get_kinto_adapter
(
)
;
yield
adapter
.
open
(
)
;
yield
adapter
.
saveLastModified
(
1458796543
)
;
yield
adapter
.
loadDump
(
[
{
id
:
1
foo
:
"
bar
"
last_modified
:
1457896541
}
{
id
:
2
foo
:
"
baz
"
last_modified
:
1458796542
}
]
)
;
let
lastModified
=
yield
adapter
.
getLastModified
(
)
;
do_check_eq
(
lastModified
1458796543
)
;
yield
adapter
.
close
(
)
;
}
)
;
}
add_test
(
function
test_db_creation
(
)
{
add_test
(
function
test_create_from_scratch
(
)
{
let
kintoDB
=
do_get_kinto_db
(
)
;
do_check_false
(
kintoDB
.
exists
(
)
)
;
run_next_test
(
)
;
}
)
;
test_collection_operations
(
)
;
cleanup_kinto
(
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_creation_from_empty_db
(
)
{
add_test
(
function
test_create_from_empty_db
(
)
{
let
profile
=
do_get_profile
(
)
;
let
kintoDB
=
do_get_kinto_db
(
)
;
let
emptyDB
=
do_get_file
(
"
test_storage_adapter
/
empty
.
sqlite
"
)
;
emptyDB
.
copyTo
(
profile
kintoFilename
)
;
run_next_test
(
)
;
}
)
;
test_collection_operations
(
)
;
cleanup_kinto
(
)
;
run_next_test
(
)
;
}
)
;
function
run_test
(
)
{
run_next_test
(
)
;
}
