"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
hawkrequest
.
js
"
)
;
var
SESSION_KEYS
=
{
sessionToken
:
h
(
"
a0a1a2a3a4a5a6a7
a8a9aaabacadaeaf
"
+
"
b0b1b2b3b4b5b6b7
b8b9babbbcbdbebf
"
)
tokenID
:
h
(
"
c0a29dcf46174973
da1378696e4c82ae
"
+
"
10f723cf4f4d9f75
e39f4ae3851595ab
"
)
reqHMACkey
:
h
(
"
9d8f22998ee7f579
8b887042466b72d5
"
+
"
3e56ab0c094388bf
65831f702d2febc0
"
)
}
;
function
do_register_cleanup
(
)
{
Services
.
prefs
.
resetUserPrefs
(
)
;
let
hawk
=
new
HAWKAuthenticatedRESTRequest
(
"
https
:
/
/
example
.
com
"
)
;
hawk
.
_intl
.
uninit
(
)
;
}
function
run_test
(
)
{
Log
.
repository
.
getLogger
(
"
Services
.
Common
.
RESTRequest
"
)
.
level
=
Log
.
Level
.
Trace
;
initTestLogging
(
"
Trace
"
)
;
run_next_test
(
)
;
}
add_test
(
function
test_intl_accept_language
(
)
{
let
testCount
=
0
;
let
languages
=
[
"
zu
-
NP
;
vo
"
"
fa
-
CG
;
ik
"
]
;
function
setLanguagePref
(
lang
)
{
Services
.
prefs
.
setStringPref
(
"
intl
.
accept_languages
"
lang
)
;
}
let
hawk
=
new
HAWKAuthenticatedRESTRequest
(
"
https
:
/
/
example
.
com
"
)
;
Services
.
prefs
.
addObserver
(
"
intl
.
accept_languages
"
checkLanguagePref
)
;
setLanguagePref
(
languages
[
testCount
]
)
;
function
checkLanguagePref
(
)
{
CommonUtils
.
nextTick
(
function
(
)
{
Assert
.
ok
(
testCount
<
languages
.
length
)
;
Assert
.
equal
(
hawk
.
_intl
.
accept_languages
languages
[
testCount
]
)
;
testCount
+
+
;
if
(
testCount
<
languages
.
length
)
{
setLanguagePref
(
languages
[
testCount
]
)
;
return
;
}
info
(
"
Checked
"
+
testCount
+
"
languages
.
Removing
checkLanguagePref
as
pref
observer
.
"
)
;
Services
.
prefs
.
removeObserver
(
"
intl
.
accept_languages
"
checkLanguagePref
)
;
run_next_test
(
)
;
}
)
;
}
}
)
;
add_test
(
function
test_hawk_authenticated_request
(
)
{
let
onProgressCalled
=
false
;
let
postData
=
{
your
:
"
data
"
}
;
let
then
=
34329600000
;
let
clockSkew
=
120000
;
let
timeOffset
=
-
1
*
clockSkew
;
let
localTime
=
then
+
clockSkew
;
let
acceptLanguage
=
"
zu
-
NP
"
;
Services
.
prefs
.
setStringPref
(
"
intl
.
accept_languages
"
acceptLanguage
)
;
let
credentials
=
{
id
:
"
eyJleHBpcmVzIjogMTM2NTAxMDg5OC4x
"
key
:
"
qTZf4ZFpAMpMoeSsX3zVRjiqmNs
=
"
algorithm
:
"
sha256
"
}
;
let
server
=
httpd_setup
(
{
"
/
elysium
"
:
function
(
request
response
)
{
Assert
.
ok
(
request
.
hasHeader
(
"
Authorization
"
)
)
;
let
authorization
=
request
.
getHeader
(
"
Authorization
"
)
;
let
tsMS
=
parseInt
(
/
ts
=
"
(
\
d
+
)
"
/
.
exec
(
authorization
)
[
1
]
10
)
*
1000
;
Assert
.
equal
(
tsMS
then
)
;
let
lang
=
request
.
getHeader
(
"
Accept
-
Language
"
)
;
Assert
.
equal
(
lang
acceptLanguage
)
;
let
message
=
"
yay
"
;
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
bodyOutputStream
.
write
(
message
message
.
length
)
;
}
}
)
;
function
onProgress
(
)
{
onProgressCalled
=
true
;
}
function
onComplete
(
error
)
{
Assert
.
equal
(
200
this
.
response
.
status
)
;
Assert
.
equal
(
this
.
response
.
body
"
yay
"
)
;
Assert
.
ok
(
onProgressCalled
)
;
Services
.
prefs
.
resetUserPrefs
(
)
;
let
pref
=
Services
.
prefs
.
getComplexValue
(
"
intl
.
accept_languages
"
Ci
.
nsIPrefLocalizedString
)
;
Assert
.
notEqual
(
acceptLanguage
pref
.
data
)
;
server
.
stop
(
run_next_test
)
;
}
let
url
=
server
.
baseURI
+
"
/
elysium
"
;
let
extra
=
{
now
:
localTime
localtimeOffsetMsec
:
timeOffset
}
;
let
request
=
new
HAWKAuthenticatedRESTRequest
(
url
credentials
extra
)
;
CommonUtils
.
nextTick
(
function
(
)
{
request
.
post
(
postData
onComplete
onProgress
)
;
}
)
;
}
)
;
add_test
(
function
test_hawk_language_pref_changed
(
)
{
let
languages
=
[
"
zu
-
NP
"
"
fa
-
CG
"
]
;
let
credentials
=
{
id
:
"
eyJleHBpcmVzIjogMTM2NTAxMDg5OC4x
"
key
:
"
qTZf4ZFpAMpMoeSsX3zVRjiqmNs
=
"
algorithm
:
"
sha256
"
}
;
function
setLanguage
(
lang
)
{
Services
.
prefs
.
setStringPref
(
"
intl
.
accept_languages
"
lang
)
;
}
let
server
=
httpd_setup
(
{
"
/
foo
"
:
function
(
request
response
)
{
Assert
.
equal
(
languages
[
1
]
request
.
getHeader
(
"
Accept
-
Language
"
)
)
;
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
}
}
)
;
let
url
=
server
.
baseURI
+
"
/
foo
"
;
let
request
;
setLanguage
(
languages
[
0
]
)
;
request
=
new
HAWKAuthenticatedRESTRequest
(
url
credentials
)
;
CommonUtils
.
nextTick
(
testFirstLanguage
)
;
function
testFirstLanguage
(
)
{
Assert
.
equal
(
languages
[
0
]
request
.
_intl
.
accept_languages
)
;
setLanguage
(
languages
[
1
]
)
;
CommonUtils
.
nextTick
(
testRequest
)
;
}
function
testRequest
(
)
{
request
=
new
HAWKAuthenticatedRESTRequest
(
url
credentials
)
;
request
.
post
(
{
}
function
(
error
)
{
Assert
.
equal
(
null
error
)
;
Assert
.
equal
(
200
this
.
response
.
status
)
;
Services
.
prefs
.
resetUserPrefs
(
)
;
server
.
stop
(
run_next_test
)
;
}
)
;
}
}
)
;
add_task
(
function
test_deriveHawkCredentials
(
)
{
let
credentials
=
deriveHawkCredentials
(
SESSION_KEYS
.
sessionToken
"
sessionToken
"
)
;
Assert
.
equal
(
credentials
.
algorithm
"
sha256
"
)
;
Assert
.
equal
(
credentials
.
id
SESSION_KEYS
.
tokenID
)
;
Assert
.
equal
(
CommonUtils
.
bytesAsHex
(
credentials
.
key
)
SESSION_KEYS
.
reqHMACkey
)
;
}
)
;
function
h
(
hexStr
)
{
return
hexStr
.
replace
(
/
\
s
+
/
g
"
"
)
;
}
