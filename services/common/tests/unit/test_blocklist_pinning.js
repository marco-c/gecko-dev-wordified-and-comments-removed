"
use
strict
"
;
const
{
Constructor
:
CC
}
=
Components
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
const
BlocklistClients
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
blocklist
-
clients
.
js
"
{
}
)
;
const
BinaryInputStream
=
CC
(
"
mozilla
.
org
/
binaryinputstream
;
1
"
"
nsIBinaryInputStream
"
"
setInputStream
"
)
;
var
id
=
"
xpcshell
tests
.
mozilla
.
org
"
;
var
appName
=
"
XPCShell
"
;
var
version
=
"
1
"
;
var
platformVersion
=
"
1
.
9
.
2
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AppInfo
.
jsm
"
this
)
;
updateAppInfo
(
{
name
:
appName
ID
:
id
version
platformVersion
:
platformVersion
?
platformVersion
:
"
1
.
0
"
crashReporter
:
true
}
)
;
let
server
;
add_task
(
async
function
test_something
(
)
{
BlocklistClients
.
initialize
(
)
;
const
PinningPreloadClient
=
BlocklistClients
.
PinningBlocklistClient
;
const
configPath
=
"
/
v1
/
"
;
const
recordsPath
=
"
/
v1
/
buckets
/
pinning
/
collections
/
pins
/
records
"
;
Services
.
prefs
.
setCharPref
(
"
services
.
settings
.
server
"
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
v1
)
;
function
handleResponse
(
request
response
)
{
try
{
const
sample
=
getSampleResponse
(
request
server
.
identity
.
primaryPort
)
;
if
(
!
sample
)
{
do_throw
(
unexpected
{
request
.
method
}
request
for
{
request
.
path
}
?
{
request
.
queryString
}
)
;
}
response
.
setStatusLine
(
null
sample
.
status
.
status
sample
.
status
.
statusText
)
;
for
(
let
headerLine
of
sample
.
sampleHeaders
)
{
let
headerElements
=
headerLine
.
split
(
"
:
"
)
;
response
.
setHeader
(
headerElements
[
0
]
headerElements
[
1
]
.
trimLeft
(
)
)
;
}
response
.
setHeader
(
"
Date
"
(
new
Date
(
)
)
.
toUTCString
(
)
)
;
response
.
write
(
sample
.
responseBody
)
;
}
catch
(
e
)
{
info
(
e
)
;
}
}
server
.
registerPathHandler
(
configPath
handleResponse
)
;
server
.
registerPathHandler
(
recordsPath
handleResponse
)
;
let
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
ok
(
!
sss
.
isSecureURI
(
sss
.
HEADER_HPKP
Services
.
io
.
newURI
(
"
https
:
/
/
one
.
example
.
com
"
)
0
)
)
;
ok
(
!
sss
.
isSecureURI
(
sss
.
HEADER_HPKP
Services
.
io
.
newURI
(
"
https
:
/
/
two
.
example
.
com
"
)
0
)
)
;
ok
(
!
sss
.
isSecureURI
(
sss
.
HEADER_HPKP
Services
.
io
.
newURI
(
"
https
:
/
/
three
.
example
.
com
"
)
0
)
)
;
ok
(
!
sss
.
isSecureURI
(
sss
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
four
.
example
.
com
"
)
0
)
)
;
ok
(
!
sss
.
isSecureURI
(
sss
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
five
.
example
.
com
"
)
0
)
)
;
await
PinningPreloadClient
.
maybeSync
(
2000
)
;
const
before
=
await
PinningPreloadClient
.
get
(
)
;
Assert
.
equal
(
before
.
length
1
)
;
ok
(
sss
.
isSecureURI
(
sss
.
HEADER_HPKP
Services
.
io
.
newURI
(
"
https
:
/
/
one
.
example
.
com
"
)
0
)
)
;
await
PinningPreloadClient
.
maybeSync
(
4000
)
;
const
after
=
await
PinningPreloadClient
.
get
(
)
;
Assert
.
equal
(
after
.
length
5
)
;
ok
(
sss
.
isSecureURI
(
sss
.
HEADER_HPKP
Services
.
io
.
newURI
(
"
https
:
/
/
two
.
example
.
com
"
)
0
)
)
;
ok
(
sss
.
isSecureURI
(
sss
.
HEADER_HPKP
Services
.
io
.
newURI
(
"
https
:
/
/
three
.
example
.
com
"
)
0
)
)
;
ok
(
!
sss
.
isSecureURI
(
sss
.
HEADER_HPKP
Services
.
io
.
newURI
(
"
https
:
/
/
four
.
example
.
com
"
)
0
)
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
settings
.
server
"
)
;
await
PinningPreloadClient
.
maybeSync
(
4000
)
;
await
PinningPreloadClient
.
maybeSync
(
3000
)
;
ok
(
sss
.
isSecureURI
(
sss
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
five
.
example
.
com
"
)
0
)
)
;
ok
(
!
sss
.
isSecureURI
(
sss
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
subdomain
.
five
.
example
.
com
"
)
0
)
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
settings
.
server
"
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
v1
)
;
await
PinningPreloadClient
.
maybeSync
(
5000
)
;
ok
(
sss
.
isSecureURI
(
sss
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
subdomain
.
five
.
example
.
com
"
)
0
)
)
;
}
)
;
function
run_test
(
)
{
Services
.
prefs
.
setBoolPref
(
"
services
.
settings
.
verify_signature
"
false
)
;
server
=
new
HttpServer
(
)
;
server
.
start
(
-
1
)
;
run_next_test
(
)
;
registerCleanupFunction
(
function
(
)
{
server
.
stop
(
(
)
=
>
{
}
)
;
}
)
;
}
function
getSampleResponse
(
req
port
)
{
const
responses
=
{
"
OPTIONS
"
:
{
"
sampleHeaders
"
:
[
"
Access
-
Control
-
Allow
-
Headers
:
Content
-
Length
Expires
Backoff
Retry
-
After
Last
-
Modified
Total
-
Records
ETag
Pragma
Cache
-
Control
authorization
content
-
type
if
-
none
-
match
Alert
Next
-
Page
"
"
Access
-
Control
-
Allow
-
Methods
:
GET
HEAD
OPTIONS
POST
DELETE
OPTIONS
"
"
Access
-
Control
-
Allow
-
Origin
:
*
"
"
Content
-
Type
:
application
/
json
;
charset
=
UTF
-
8
"
"
Server
:
waitress
"
]
"
status
"
:
{
status
:
200
statusText
:
"
OK
"
}
"
responseBody
"
:
"
null
"
}
"
GET
:
/
v1
/
?
"
:
{
"
sampleHeaders
"
:
[
"
Access
-
Control
-
Allow
-
Origin
:
*
"
"
Access
-
Control
-
Expose
-
Headers
:
Retry
-
After
Content
-
Length
Alert
Backoff
"
"
Content
-
Type
:
application
/
json
;
charset
=
UTF
-
8
"
"
Server
:
waitress
"
]
"
status
"
:
{
status
:
200
statusText
:
"
OK
"
}
"
responseBody
"
:
JSON
.
stringify
(
{
"
settings
"
:
{
"
batch_max_requests
"
:
25
}
"
url
"
:
http
:
/
/
localhost
:
{
port
}
/
v1
/
"
documentation
"
:
"
https
:
/
/
kinto
.
readthedocs
.
org
/
"
"
version
"
:
"
1
.
5
.
1
"
"
commit
"
:
"
cbc6f58
"
"
hello
"
:
"
kinto
"
}
)
}
"
GET
:
/
v1
/
buckets
/
pinning
/
collections
/
pins
/
records
?
_expected
=
2000
&
_sort
=
-
last_modified
"
:
{
"
sampleHeaders
"
:
[
"
Access
-
Control
-
Allow
-
Origin
:
*
"
"
Access
-
Control
-
Expose
-
Headers
:
Retry
-
After
Content
-
Length
Alert
Backoff
"
"
Content
-
Type
:
application
/
json
;
charset
=
UTF
-
8
"
"
Server
:
waitress
"
"
Etag
:
\
"
3000
\
"
"
]
"
status
"
:
{
status
:
200
statusText
:
"
OK
"
}
"
responseBody
"
:
JSON
.
stringify
(
{
"
data
"
:
[
{
"
pinType
"
:
"
KeyPin
"
"
hostName
"
:
"
one
.
example
.
com
"
"
includeSubdomains
"
:
false
"
expires
"
:
new
Date
(
)
.
getTime
(
)
+
1000000
"
pins
"
:
[
"
cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2
+
soZS7sWs
=
"
"
M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE
=
"
]
"
versions
"
:
[
Services
.
appinfo
.
version
]
"
id
"
:
"
78cf8900
-
fdea
-
4ce5
-
f8fb
-
b78710617718
"
"
last_modified
"
:
3000
}
]
}
)
}
"
GET
:
/
v1
/
buckets
/
pinning
/
collections
/
pins
/
records
?
_expected
=
4000
&
_sort
=
-
last_modified
&
_since
=
3000
"
:
{
"
sampleHeaders
"
:
[
"
Access
-
Control
-
Allow
-
Origin
:
*
"
"
Access
-
Control
-
Expose
-
Headers
:
Retry
-
After
Content
-
Length
Alert
Backoff
"
"
Content
-
Type
:
application
/
json
;
charset
=
UTF
-
8
"
"
Server
:
waitress
"
"
Etag
:
\
"
4000
\
"
"
]
"
status
"
:
{
status
:
200
statusText
:
"
OK
"
}
"
responseBody
"
:
JSON
.
stringify
(
{
"
data
"
:
[
{
"
pinType
"
:
"
KeyPin
"
"
hostName
"
:
"
two
.
example
.
com
"
"
includeSubdomains
"
:
false
"
expires
"
:
new
Date
(
)
.
getTime
(
)
+
1000000
"
pins
"
:
[
"
cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2
+
soZS7sWs
=
"
"
M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE
=
"
]
"
versions
"
:
[
Services
.
appinfo
.
version
]
"
id
"
:
"
dabafde9
-
df4a
-
ddba
-
2548
-
748da04cc02c
"
"
last_modified
"
:
4000
}
{
"
pinType
"
:
"
KeyPin
"
"
hostName
"
:
"
three
.
example
.
com
"
"
includeSubdomains
"
:
false
"
expires
"
:
new
Date
(
)
.
getTime
(
)
+
1000000
"
pins
"
:
[
"
cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2
+
soZS7sWs
=
"
"
M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE
=
"
]
"
versions
"
:
[
Services
.
appinfo
.
version
"
some
other
version
that
won
'
t
match
"
]
"
id
"
:
"
dabafde9
-
df4a
-
ddba
-
2548
-
748da04cc02d
"
"
last_modified
"
:
4000
}
{
"
pinType
"
:
"
KeyPin
"
"
hostName
"
:
"
four
.
example
.
com
"
"
includeSubdomains
"
:
false
"
expires
"
:
new
Date
(
)
.
getTime
(
)
+
1000000
"
pins
"
:
[
"
cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2
+
soZS7sWs
=
"
"
M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE
=
"
]
"
versions
"
:
[
"
some
version
that
won
'
t
match
"
]
"
id
"
:
"
dabafde9
-
df4a
-
ddba
-
2548
-
748da04cc02e
"
"
last_modified
"
:
4000
}
{
"
pinType
"
:
"
STSPin
"
"
hostName
"
:
"
five
.
example
.
com
"
"
includeSubdomains
"
:
false
"
expires
"
:
new
Date
(
)
.
getTime
(
)
+
1000000
"
versions
"
:
[
Services
.
appinfo
.
version
"
some
version
that
won
'
t
match
"
]
"
id
"
:
"
dabafde9
-
df4a
-
ddba
-
2548
-
748da04cc032
"
"
last_modified
"
:
4000
}
]
}
)
}
"
GET
:
/
v1
/
buckets
/
pinning
/
collections
/
pins
/
records
?
_expected
=
5000
&
_sort
=
-
last_modified
&
_since
=
4000
"
:
{
"
sampleHeaders
"
:
[
"
Access
-
Control
-
Allow
-
Origin
:
*
"
"
Access
-
Control
-
Expose
-
Headers
:
Retry
-
After
Content
-
Length
Alert
Backoff
"
"
Content
-
Type
:
application
/
json
;
charset
=
UTF
-
8
"
"
Server
:
waitress
"
"
Etag
:
\
"
5000
\
"
"
]
"
status
"
:
{
status
:
200
statusText
:
"
OK
"
}
"
responseBody
"
:
JSON
.
stringify
(
{
"
data
"
:
[
{
"
irrelevant
"
:
"
this
entry
looks
nothing
whatsoever
like
a
pin
preload
"
"
pinType
"
:
"
KeyPin
"
"
id
"
:
"
dabafde9
-
df4a
-
ddba
-
2548
-
748da04cc02f
"
"
last_modified
"
:
5000
}
{
"
irrelevant
"
:
"
this
entry
has
data
of
the
wrong
type
"
"
pinType
"
:
"
KeyPin
"
"
hostName
"
:
3
"
includeSubdomains
"
:
"
nonsense
"
"
expires
"
:
"
more
nonsense
"
"
pins
"
:
[
1
2
3
4
]
"
id
"
:
"
dabafde9
-
df4a
-
ddba
-
2548
-
748da04cc030
"
"
last_modified
"
:
5000
}
{
"
irrelevant
"
:
"
this
entry
is
missing
the
actual
pins
"
"
pinType
"
:
"
KeyPin
"
"
hostName
"
:
"
missingpins
.
example
.
com
"
"
includeSubdomains
"
:
false
"
expires
"
:
new
Date
(
)
.
getTime
(
)
+
1000000
"
versions
"
:
[
Services
.
appinfo
.
version
]
"
id
"
:
"
dabafde9
-
df4a
-
ddba
-
2548
-
748da04cc031
"
"
last_modified
"
:
5000
}
{
"
pinType
"
:
"
STSPin
"
"
hostName
"
:
"
five
.
example
.
com
"
"
includeSubdomains
"
:
true
"
expires
"
:
new
Date
(
)
.
getTime
(
)
+
1000000
"
versions
"
:
[
Services
.
appinfo
.
version
"
some
version
that
won
'
t
match
"
]
"
id
"
:
"
dabafde9
-
df4a
-
ddba
-
2548
-
748da04cc032
"
"
last_modified
"
:
5000
}
]
}
)
}
}
;
return
responses
[
{
req
.
method
}
:
{
req
.
path
}
?
{
req
.
queryString
}
]
|
|
responses
[
req
.
method
]
;
}
