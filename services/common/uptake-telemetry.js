"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UptakeTelemetry
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
const
TELEMETRY_HISTOGRAM_ID
=
"
UPTAKE_REMOTE_CONTENT_RESULT_1
"
;
class
UptakeTelemetry
{
static
get
STATUS
(
)
{
return
{
UP_TO_DATE
:
"
up_to_date
"
SUCCESS
:
"
success
"
BACKOFF
:
"
backoff
"
PREF_DISABLED
:
"
pref_disabled
"
PARSE_ERROR
:
"
parse_error
"
CONTENT_ERROR
:
"
content_error
"
SIGNATURE_ERROR
:
"
sign_error
"
SIGNATURE_RETRY_ERROR
:
"
sign_retry_error
"
CONFLICT_ERROR
:
"
conflict_error
"
SYNC_ERROR
:
"
sync_error
"
APPLY_ERROR
:
"
apply_error
"
SERVER_ERROR
:
"
server_error
"
CERTIFICATE_ERROR
:
"
certificate_error
"
DOWNLOAD_ERROR
:
"
download_error
"
TIMEOUT_ERROR
:
"
timeout_error
"
NETWORK_ERROR
:
"
network_error
"
NETWORK_OFFLINE_ERROR
:
"
offline_error
"
CLEANUP_ERROR
:
"
cleanup_error
"
UNKNOWN_ERROR
:
"
unknown_error
"
CUSTOM_1_ERROR
:
"
custom_1_error
"
CUSTOM_2_ERROR
:
"
custom_2_error
"
CUSTOM_3_ERROR
:
"
custom_3_error
"
CUSTOM_4_ERROR
:
"
custom_4_error
"
CUSTOM_5_ERROR
:
"
custom_5_error
"
}
;
}
static
report
(
source
status
)
{
Services
.
telemetry
.
getKeyedHistogramById
(
TELEMETRY_HISTOGRAM_ID
)
.
add
(
source
status
)
;
}
}
this
.
UptakeTelemetry
=
UptakeTelemetry
;
