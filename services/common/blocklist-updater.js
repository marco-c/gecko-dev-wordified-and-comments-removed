this
.
EXPORTED_SYMBOLS
=
[
"
checkVersions
"
"
addTestBlocklistClient
"
]
;
const
{
classes
:
Cc
Constructor
:
CC
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
'
fetch
'
]
)
;
const
BlocklistClients
=
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
blocklist
-
clients
.
js
"
{
}
)
;
const
PREF_SETTINGS_SERVER
=
"
services
.
settings
.
server
"
;
const
PREF_BLOCKLIST_CHANGES_PATH
=
"
services
.
blocklist
.
changes
.
path
"
;
const
PREF_BLOCKLIST_BUCKET
=
"
services
.
blocklist
.
bucket
"
;
const
PREF_BLOCKLIST_LAST_UPDATE
=
"
services
.
blocklist
.
last_update_seconds
"
;
const
PREF_BLOCKLIST_LAST_ETAG
=
"
services
.
blocklist
.
last_etag
"
;
const
PREF_BLOCKLIST_CLOCK_SKEW_SECONDS
=
"
services
.
blocklist
.
clock_skew_seconds
"
;
const
gBlocklistClients
=
{
[
BlocklistClients
.
OneCRLBlocklistClient
.
collectionName
]
:
BlocklistClients
.
OneCRLBlocklistClient
[
BlocklistClients
.
AddonBlocklistClient
.
collectionName
]
:
BlocklistClients
.
AddonBlocklistClient
[
BlocklistClients
.
GfxBlocklistClient
.
collectionName
]
:
BlocklistClients
.
GfxBlocklistClient
[
BlocklistClients
.
PluginBlocklistClient
.
collectionName
]
:
BlocklistClients
.
PluginBlocklistClient
}
;
this
.
addTestBlocklistClient
=
(
name
client
)
=
>
{
gBlocklistClients
[
name
]
=
client
;
}
this
.
checkVersions
=
function
(
)
{
return
Task
.
spawn
(
function
*
syncClients
(
)
{
let
kintoBase
=
Services
.
prefs
.
getCharPref
(
PREF_SETTINGS_SERVER
)
;
let
changesEndpoint
=
kintoBase
+
Services
.
prefs
.
getCharPref
(
PREF_BLOCKLIST_CHANGES_PATH
)
;
let
blocklistsBucket
=
Services
.
prefs
.
getCharPref
(
PREF_BLOCKLIST_BUCKET
)
;
const
headers
=
{
}
;
if
(
Services
.
prefs
.
prefHasUserValue
(
PREF_BLOCKLIST_LAST_ETAG
)
)
{
const
lastEtag
=
Services
.
prefs
.
getCharPref
(
PREF_BLOCKLIST_LAST_ETAG
)
;
if
(
lastEtag
)
{
headers
[
"
If
-
None
-
Match
"
]
=
lastEtag
;
}
}
let
response
=
yield
fetch
(
changesEndpoint
{
headers
}
)
;
let
versionInfo
;
if
(
response
.
status
=
=
304
)
{
versionInfo
=
{
data
:
[
]
}
;
}
else
{
versionInfo
=
yield
response
.
json
(
)
;
}
if
(
!
versionInfo
.
hasOwnProperty
(
"
data
"
)
)
{
throw
new
Error
(
"
Polling
for
changes
failed
.
"
)
;
}
let
serverTimeMillis
=
Date
.
parse
(
response
.
headers
.
get
(
"
Date
"
)
)
;
let
clockDifference
=
Math
.
floor
(
(
Date
.
now
(
)
-
serverTimeMillis
)
/
1000
)
;
Services
.
prefs
.
setIntPref
(
PREF_BLOCKLIST_CLOCK_SKEW_SECONDS
clockDifference
)
;
Services
.
prefs
.
setIntPref
(
PREF_BLOCKLIST_LAST_UPDATE
serverTimeMillis
/
1000
)
;
let
firstError
;
for
(
let
collectionInfo
of
versionInfo
.
data
)
{
if
(
collectionInfo
.
bucket
!
=
blocklistsBucket
)
{
continue
;
}
let
collection
=
collectionInfo
.
collection
;
let
client
=
gBlocklistClients
[
collection
]
;
if
(
client
&
&
client
.
maybeSync
)
{
let
lastModified
=
0
;
if
(
collectionInfo
.
last_modified
)
{
lastModified
=
collectionInfo
.
last_modified
;
}
try
{
yield
client
.
maybeSync
(
lastModified
serverTimeMillis
)
;
}
catch
(
e
)
{
if
(
!
firstError
)
{
firstError
=
e
;
}
}
}
}
if
(
firstError
)
{
throw
firstError
;
}
if
(
response
.
headers
.
has
(
"
ETag
"
)
)
{
const
currentEtag
=
response
.
headers
.
get
(
"
ETag
"
)
;
Services
.
prefs
.
setCharPref
(
PREF_BLOCKLIST_LAST_ETAG
currentEtag
)
;
}
}
)
;
}
;
