"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
BlocklistClients
"
]
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
RemoteSettings
"
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
jexlFilterFunc
"
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
const
PREF_SECURITY_SETTINGS_ONECRL_BUCKET
=
"
services
.
settings
.
security
.
onecrl
.
bucket
"
;
const
PREF_SECURITY_SETTINGS_ONECRL_COLLECTION
=
"
services
.
settings
.
security
.
onecrl
.
collection
"
;
const
PREF_SECURITY_SETTINGS_ONECRL_SIGNER
=
"
services
.
settings
.
security
.
onecrl
.
signer
"
;
const
PREF_SECURITY_SETTINGS_ONECRL_CHECKED
=
"
services
.
settings
.
security
.
onecrl
.
checked
"
;
const
PREF_BLOCKLIST_PINNING_ENABLED
=
"
services
.
blocklist
.
pinning
.
enabled
"
;
const
PREF_BLOCKLIST_PINNING_BUCKET
=
"
services
.
blocklist
.
pinning
.
bucket
"
;
const
PREF_BLOCKLIST_PINNING_COLLECTION
=
"
services
.
blocklist
.
pinning
.
collection
"
;
const
PREF_BLOCKLIST_PINNING_CHECKED_SECONDS
=
"
services
.
blocklist
.
pinning
.
checked
"
;
const
PREF_BLOCKLIST_PINNING_SIGNER
=
"
services
.
blocklist
.
pinning
.
signer
"
;
class
RevocationState
{
constructor
(
state
)
{
this
.
state
=
state
;
}
}
class
IssuerAndSerialRevocationState
extends
RevocationState
{
constructor
(
issuer
serial
state
)
{
super
(
state
)
;
this
.
issuer
=
issuer
;
this
.
serial
=
serial
;
}
}
IssuerAndSerialRevocationState
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsIIssuerAndSerialRevocationState
]
)
;
class
SubjectAndPubKeyRevocationState
extends
RevocationState
{
constructor
(
subject
pubKey
state
)
{
super
(
state
)
;
this
.
subject
=
subject
;
this
.
pubKey
=
pubKey
;
}
}
SubjectAndPubKeyRevocationState
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsISubjectAndPubKeyRevocationState
]
)
;
function
setRevocations
(
certStorage
revocations
)
{
return
new
Promise
(
(
resolve
)
=
>
certStorage
.
setRevocations
(
revocations
resolve
)
)
;
}
const
updateCertBlocklist
=
AppConstants
.
MOZ_NEW_CERT_STORAGE
?
async
function
(
{
data
:
{
current
created
updated
deleted
}
}
)
{
const
certList
=
Cc
[
"
mozilla
.
org
/
security
/
certstorage
;
1
"
]
.
getService
(
Ci
.
nsICertStorage
)
;
let
items
=
[
]
;
let
hasPriorRevocationData
=
await
new
Promise
(
(
resolve
)
=
>
{
certList
.
hasPriorData
(
Ci
.
nsICertStorage
.
DATA_TYPE_REVOCATION
(
rv
hasPriorData
)
=
>
{
if
(
rv
=
=
Cr
.
NS_OK
)
{
resolve
(
hasPriorData
)
;
}
else
{
resolve
(
false
)
;
}
}
)
;
}
)
;
if
(
!
hasPriorRevocationData
)
{
deleted
=
[
]
;
updated
=
[
]
;
created
=
current
;
}
for
(
let
item
of
deleted
)
{
if
(
item
.
issuerName
&
&
item
.
serialNumber
)
{
items
.
push
(
new
IssuerAndSerialRevocationState
(
item
.
issuerName
item
.
serialNumber
Ci
.
nsICertStorage
.
STATE_UNSET
)
)
;
}
else
if
(
item
.
subject
&
&
item
.
pubKeyHash
)
{
items
.
push
(
new
SubjectAndPubKeyRevocationState
(
item
.
subject
item
.
pubKeyHash
Ci
.
nsICertStorage
.
STATE_UNSET
)
)
;
}
}
const
toAdd
=
created
.
concat
(
updated
.
map
(
u
=
>
u
.
new
)
)
;
for
(
let
item
of
toAdd
)
{
if
(
item
.
issuerName
&
&
item
.
serialNumber
)
{
items
.
push
(
new
IssuerAndSerialRevocationState
(
item
.
issuerName
item
.
serialNumber
Ci
.
nsICertStorage
.
STATE_ENFORCE
)
)
;
}
else
if
(
item
.
subject
&
&
item
.
pubKeyHash
)
{
items
.
push
(
new
SubjectAndPubKeyRevocationState
(
item
.
subject
item
.
pubKeyHash
Ci
.
nsICertStorage
.
STATE_ENFORCE
)
)
;
}
}
try
{
await
setRevocations
(
certList
items
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
:
async
function
(
{
data
:
{
current
:
records
}
}
)
{
const
certList
=
Cc
[
"
mozilla
.
org
/
security
/
certblocklist
;
1
"
]
.
getService
(
Ci
.
nsICertBlocklist
)
;
for
(
let
item
of
records
)
{
try
{
if
(
item
.
issuerName
&
&
item
.
serialNumber
)
{
certList
.
revokeCertByIssuerAndSerial
(
item
.
issuerName
item
.
serialNumber
)
;
}
else
if
(
item
.
subject
&
&
item
.
pubKeyHash
)
{
certList
.
revokeCertBySubjectAndPubKey
(
item
.
subject
item
.
pubKeyHash
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
certList
.
saveEntries
(
)
;
}
;
async
function
updatePinningList
(
{
data
:
{
current
:
records
}
}
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
PREF_BLOCKLIST_PINNING_ENABLED
)
)
{
return
;
}
const
siteSecurityService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
siteSecurityService
.
clearPreloads
(
)
;
for
(
let
item
of
records
)
{
try
{
const
{
pinType
pins
=
[
]
versions
}
=
item
;
if
(
versions
.
includes
(
Services
.
appinfo
.
version
)
)
{
if
(
pinType
=
=
"
KeyPin
"
&
&
pins
.
length
)
{
siteSecurityService
.
setKeyPins
(
item
.
hostName
item
.
includeSubdomains
item
.
expires
pins
.
length
pins
true
)
;
}
if
(
pinType
=
=
"
STSPin
"
)
{
siteSecurityService
.
setHSTSPreload
(
item
.
hostName
item
.
includeSubdomains
item
.
expires
)
;
}
}
}
catch
(
e
)
{
}
}
}
var
OneCRLBlocklistClient
;
var
PinningBlocklistClient
;
function
initialize
(
options
=
{
}
)
{
const
{
verifySignature
=
true
}
=
options
;
OneCRLBlocklistClient
=
RemoteSettings
(
Services
.
prefs
.
getCharPref
(
PREF_SECURITY_SETTINGS_ONECRL_COLLECTION
)
{
bucketNamePref
:
PREF_SECURITY_SETTINGS_ONECRL_BUCKET
lastCheckTimePref
:
PREF_SECURITY_SETTINGS_ONECRL_CHECKED
signerName
:
Services
.
prefs
.
getCharPref
(
PREF_SECURITY_SETTINGS_ONECRL_SIGNER
)
}
)
;
OneCRLBlocklistClient
.
verifySignature
=
verifySignature
;
OneCRLBlocklistClient
.
on
(
"
sync
"
updateCertBlocklist
)
;
PinningBlocklistClient
=
RemoteSettings
(
Services
.
prefs
.
getCharPref
(
PREF_BLOCKLIST_PINNING_COLLECTION
)
{
bucketNamePref
:
PREF_BLOCKLIST_PINNING_BUCKET
lastCheckTimePref
:
PREF_BLOCKLIST_PINNING_CHECKED_SECONDS
signerName
:
Services
.
prefs
.
getCharPref
(
PREF_BLOCKLIST_PINNING_SIGNER
)
}
)
;
PinningBlocklistClient
.
verifySignature
=
verifySignature
;
PinningBlocklistClient
.
on
(
"
sync
"
updatePinningList
)
;
return
{
OneCRLBlocklistClient
PinningBlocklistClient
}
;
}
let
BlocklistClients
=
{
initialize
}
;
