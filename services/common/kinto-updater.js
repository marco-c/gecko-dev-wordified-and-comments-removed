this
.
EXPORTED_SYMBOLS
=
[
"
checkVersions
"
"
addTestKintoClient
"
]
;
const
{
classes
:
Cc
Constructor
:
CC
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
'
fetch
'
]
)
;
const
PREF_KINTO_CHANGES_PATH
=
"
services
.
kinto
.
changes
.
path
"
;
const
PREF_KINTO_BASE
=
"
services
.
kinto
.
base
"
;
const
PREF_KINTO_LAST_UPDATE
=
"
services
.
kinto
.
last_update_seconds
"
;
const
PREF_KINTO_CLOCK_SKEW_SECONDS
=
"
services
.
kinto
.
clock_skew_seconds
"
;
const
kintoClients
=
{
}
;
this
.
checkVersions
=
function
(
)
{
return
Task
.
spawn
(
function
*
(
)
{
let
kintoBase
=
Services
.
prefs
.
getCharPref
(
PREF_KINTO_BASE
)
;
let
changesEndpoint
=
kintoBase
+
Services
.
prefs
.
getCharPref
(
PREF_KINTO_CHANGES_PATH
)
;
let
response
=
yield
fetch
(
changesEndpoint
)
;
let
serverTimeMillis
=
Date
.
parse
(
response
.
headers
.
get
(
"
Date
"
)
)
;
let
clockDifference
=
Math
.
abs
(
Date
.
now
(
)
-
serverTimeMillis
)
/
1000
;
Services
.
prefs
.
setIntPref
(
PREF_KINTO_LAST_UPDATE
serverTimeMillis
/
1000
)
;
Services
.
prefs
.
setIntPref
(
PREF_KINTO_CLOCK_SKEW_SECONDS
clockDifference
)
;
let
versionInfo
=
yield
response
.
json
(
)
;
let
firstError
;
for
(
let
collectionInfo
of
versionInfo
.
data
)
{
let
collection
=
collectionInfo
.
collection
;
let
kintoClient
=
kintoClients
[
collection
]
;
if
(
kintoClient
&
&
kintoClient
.
maybeSync
)
{
let
lastModified
=
0
;
if
(
collectionInfo
.
last_modified
)
{
lastModified
=
collectionInfo
.
last_modified
}
try
{
yield
kintoClient
.
maybeSync
(
lastModified
serverTimeMillis
)
;
}
catch
(
e
)
{
if
(
!
firstError
)
{
firstError
=
e
;
}
}
}
}
if
(
firstError
)
{
throw
firstError
;
}
}
)
;
}
;
this
.
addTestKintoClient
=
function
(
name
kintoClient
)
{
kintoClients
[
name
]
=
kintoClient
;
}
;
kintoClients
.
certificates
=
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
KintoCertificateBlocklist
.
js
"
{
}
)
.
OneCRLClient
;
