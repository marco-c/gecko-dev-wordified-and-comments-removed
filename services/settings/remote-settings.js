"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
RemoteSettings
"
"
jexlFilterFunc
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
{
}
)
;
Cu
.
importGlobalProperties
(
[
"
fetch
"
]
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Kinto
"
"
resource
:
/
/
services
-
common
/
kinto
-
offline
-
client
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
KintoHttpClient
"
"
resource
:
/
/
services
-
common
/
kinto
-
http
-
client
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CanonicalJSON
"
"
resource
:
/
/
gre
/
modules
/
CanonicalJSON
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
UptakeTelemetry
"
"
resource
:
/
/
services
-
common
/
uptake
-
telemetry
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ClientEnvironmentBase
"
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
ClientEnvironment
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FilterExpressions
"
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
FilterExpressions
.
jsm
"
)
;
const
PREF_SETTINGS_SERVER
=
"
services
.
settings
.
server
"
;
const
PREF_SETTINGS_DEFAULT_BUCKET
=
"
services
.
settings
.
default_bucket
"
;
const
PREF_SETTINGS_DEFAULT_SIGNER
=
"
services
.
settings
.
default_signer
"
;
const
PREF_SETTINGS_VERIFY_SIGNATURE
=
"
services
.
settings
.
verify_signature
"
;
const
PREF_SETTINGS_SERVER_BACKOFF
=
"
services
.
settings
.
server
.
backoff
"
;
const
PREF_SETTINGS_CHANGES_PATH
=
"
services
.
settings
.
changes
.
path
"
;
const
PREF_SETTINGS_LAST_UPDATE
=
"
services
.
settings
.
last_update_seconds
"
;
const
PREF_SETTINGS_LAST_ETAG
=
"
services
.
settings
.
last_etag
"
;
const
PREF_SETTINGS_CLOCK_SKEW_SECONDS
=
"
services
.
settings
.
clock_skew_seconds
"
;
const
PREF_SETTINGS_LOAD_DUMP
=
"
services
.
settings
.
load_dump
"
;
const
TELEMETRY_HISTOGRAM_KEY
=
"
settings
-
changes
-
monitoring
"
;
const
INVALID_SIGNATURE
=
"
Invalid
content
/
signature
"
;
const
MISSING_SIGNATURE
=
"
Missing
signature
"
;
function
cacheProxy
(
target
)
{
const
cache
=
new
Map
(
)
;
return
new
Proxy
(
target
{
get
(
target
prop
receiver
)
{
if
(
!
cache
.
has
(
prop
)
)
{
cache
.
set
(
prop
target
[
prop
]
)
;
}
return
cache
.
get
(
prop
)
;
}
}
)
;
}
class
ClientEnvironment
extends
ClientEnvironmentBase
{
static
get
appID
(
)
{
Services
.
appinfo
.
QueryInterface
(
Ci
.
nsIXULAppInfo
)
;
return
Services
.
appinfo
.
ID
;
}
static
get
toolkitVersion
(
)
{
Services
.
appinfo
.
QueryInterface
(
Ci
.
nsIPlatformInfo
)
;
return
Services
.
appinfo
.
platformVersion
;
}
}
async
function
jexlFilterFunc
(
entry
environment
)
{
const
{
filter_expression
}
=
entry
;
if
(
!
filter_expression
)
{
return
entry
;
}
let
result
;
try
{
const
context
=
{
environment
}
;
result
=
await
FilterExpressions
.
eval
(
filter_expression
context
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
result
?
entry
:
null
;
}
function
mergeChanges
(
collection
localRecords
changes
)
{
const
records
=
{
}
;
localRecords
.
forEach
(
(
record
)
=
>
records
[
record
.
id
]
=
collection
.
cleanLocalFields
(
record
)
)
;
changes
.
forEach
(
(
record
)
=
>
records
[
record
.
id
]
=
record
)
;
return
Object
.
values
(
records
)
.
filter
(
(
record
)
=
>
!
record
.
deleted
)
.
sort
(
(
a
b
)
=
>
{
if
(
a
.
id
<
b
.
id
)
{
return
-
1
;
}
return
a
.
id
>
b
.
id
?
1
:
0
;
}
)
;
}
async
function
fetchCollectionMetadata
(
remote
collection
)
{
const
client
=
new
KintoHttpClient
(
remote
)
;
const
{
signature
}
=
await
client
.
bucket
(
collection
.
bucket
)
.
collection
(
collection
.
name
)
.
getData
(
)
;
return
signature
;
}
async
function
fetchRemoteCollection
(
remote
collection
)
{
const
client
=
new
KintoHttpClient
(
remote
)
;
return
client
.
bucket
(
collection
.
bucket
)
.
collection
(
collection
.
name
)
.
listRecords
(
{
sort
:
"
id
"
}
)
;
}
async
function
fetchLatestChanges
(
url
lastEtag
)
{
const
headers
=
{
}
;
if
(
lastEtag
)
{
headers
[
"
If
-
None
-
Match
"
]
=
lastEtag
;
}
const
response
=
await
fetch
(
url
{
headers
}
)
;
let
changes
=
[
]
;
if
(
response
.
status
!
=
304
)
{
let
payload
;
try
{
payload
=
await
response
.
json
(
)
;
}
catch
(
e
)
{
}
if
(
!
payload
.
hasOwnProperty
(
"
data
"
)
)
{
throw
new
Error
(
Server
error
response
{
JSON
.
stringify
(
payload
)
}
)
;
}
changes
=
payload
.
data
;
}
const
currentEtag
=
response
.
headers
.
has
(
"
ETag
"
)
?
response
.
headers
.
get
(
"
ETag
"
)
:
undefined
;
const
serverTimeMillis
=
Date
.
parse
(
response
.
headers
.
get
(
"
Date
"
)
)
;
let
backoffSeconds
;
if
(
response
.
headers
.
has
(
"
Backoff
"
)
)
{
const
value
=
parseInt
(
response
.
headers
.
get
(
"
Backoff
"
)
10
)
;
if
(
!
isNaN
(
value
)
)
{
backoffSeconds
=
value
;
}
}
return
{
changes
currentEtag
serverTimeMillis
backoffSeconds
}
;
}
class
RemoteSettingsClient
{
constructor
(
collectionName
{
bucketName
signerName
filterFunc
=
jexlFilterFunc
lastCheckTimePref
}
)
{
this
.
collectionName
=
collectionName
;
this
.
bucketName
=
bucketName
;
this
.
signerName
=
signerName
;
this
.
filterFunc
=
filterFunc
;
this
.
_lastCheckTimePref
=
lastCheckTimePref
;
this
.
_listeners
=
new
Map
(
)
;
this
.
_listeners
.
set
(
"
sync
"
[
]
)
;
this
.
_kinto
=
null
;
}
get
identifier
(
)
{
return
{
this
.
bucketName
}
/
{
this
.
collectionName
}
;
}
get
filename
(
)
{
const
identifier
=
OS
.
Path
.
join
(
.
.
.
this
.
identifier
.
split
(
"
/
"
)
)
;
return
{
identifier
}
.
json
;
}
get
lastCheckTimePref
(
)
{
return
this
.
_lastCheckTimePref
|
|
services
.
settings
.
{
this
.
bucketName
}
.
{
this
.
collectionName
}
.
last_check
;
}
async
emit
(
event
payload
)
{
const
callbacks
=
this
.
_listeners
.
get
(
"
sync
"
)
;
let
firstError
;
for
(
const
cb
of
callbacks
)
{
try
{
await
cb
(
payload
)
;
}
catch
(
e
)
{
firstError
=
e
;
}
}
if
(
firstError
)
{
throw
firstError
;
}
}
on
(
event
callback
)
{
if
(
!
this
.
_listeners
.
has
(
event
)
)
{
throw
new
Error
(
Unknown
event
type
{
event
}
)
;
}
this
.
_listeners
.
get
(
event
)
.
push
(
callback
)
;
}
async
openCollection
(
options
=
{
}
)
{
if
(
!
this
.
_kinto
)
{
this
.
_kinto
=
new
Kinto
(
{
bucket
:
this
.
bucketName
adapter
:
Kinto
.
adapters
.
IDB
}
)
;
}
return
this
.
_kinto
.
collection
(
this
.
collectionName
options
)
;
}
async
get
(
options
=
{
}
)
{
const
{
filters
=
{
}
order
}
=
options
;
const
c
=
await
this
.
openCollection
(
)
;
const
timestamp
=
await
c
.
db
.
getLastModified
(
)
;
if
(
timestamp
=
=
null
)
{
try
{
const
{
data
}
=
await
this
.
_loadDumpFile
(
)
;
await
c
.
loadDump
(
data
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
return
[
]
;
}
}
const
{
data
}
=
await
c
.
list
(
{
filters
order
}
)
;
return
this
.
_filterEntries
(
data
)
;
}
async
maybeSync
(
lastModified
serverTime
options
=
{
loadDump
:
true
}
)
{
const
{
loadDump
}
=
options
;
const
remote
=
Services
.
prefs
.
getCharPref
(
PREF_SETTINGS_SERVER
)
;
const
verifySignature
=
Services
.
prefs
.
getBoolPref
(
PREF_SETTINGS_VERIFY_SIGNATURE
true
)
;
const
colOptions
=
{
}
;
if
(
this
.
signerName
&
&
verifySignature
)
{
colOptions
.
hooks
=
{
"
incoming
-
changes
"
:
[
(
payload
collection
)
=
>
{
return
this
.
_validateCollectionSignature
(
remote
payload
collection
)
;
}
]
}
;
}
let
reportStatus
=
null
;
try
{
const
collection
=
await
this
.
openCollection
(
colOptions
)
;
let
collectionLastModified
=
await
collection
.
db
.
getLastModified
(
)
;
if
(
!
collectionLastModified
&
&
loadDump
)
{
try
{
const
initialData
=
await
this
.
_loadDumpFile
(
)
;
await
collection
.
loadDump
(
initialData
.
data
)
;
collectionLastModified
=
await
collection
.
db
.
getLastModified
(
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
if
(
lastModified
<
=
collectionLastModified
)
{
this
.
_updateLastCheck
(
serverTime
)
;
reportStatus
=
UptakeTelemetry
.
STATUS
.
UP_TO_DATE
;
return
;
}
let
syncResult
;
try
{
const
strategy
=
Kinto
.
syncStrategy
.
SERVER_WINS
;
syncResult
=
await
collection
.
sync
(
{
remote
strategy
}
)
;
const
{
ok
}
=
syncResult
;
if
(
!
ok
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
CONFLICT_ERROR
;
throw
new
Error
(
"
Sync
failed
"
)
;
}
}
catch
(
e
)
{
if
(
e
.
message
=
=
INVALID_SIGNATURE
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
SIGNATURE_ERROR
;
const
payload
=
await
fetchRemoteCollection
(
remote
collection
)
;
try
{
await
this
.
_validateCollectionSignature
(
remote
payload
collection
{
ignoreLocal
:
true
}
)
;
}
catch
(
e
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
SIGNATURE_RETRY_ERROR
;
throw
e
;
}
const
{
data
:
oldData
}
=
await
collection
.
list
(
)
;
syncResult
=
{
created
:
[
]
updated
:
[
]
deleted
:
[
]
}
;
const
localLastModified
=
await
collection
.
db
.
getLastModified
(
)
;
if
(
payload
.
last_modified
>
=
localLastModified
)
{
const
{
data
:
newData
}
=
payload
;
await
collection
.
clear
(
)
;
await
collection
.
loadDump
(
newData
)
;
const
oldById
=
new
Map
(
oldData
.
map
(
e
=
>
[
e
.
id
e
]
)
)
;
for
(
const
r
of
newData
)
{
const
old
=
oldById
.
get
(
r
.
id
)
;
if
(
old
)
{
if
(
old
.
last_modified
!
=
r
.
last_modified
)
{
syncResult
.
updated
.
push
(
{
old
new
:
r
}
)
;
}
oldById
.
delete
(
r
.
id
)
;
}
else
{
syncResult
.
created
.
push
(
r
)
;
}
}
syncResult
.
deleted
=
Array
.
from
(
oldById
.
values
(
)
)
;
}
}
else
{
if
(
e
.
message
=
=
MISSING_SIGNATURE
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
SIGNATURE_ERROR
;
}
else
if
(
/
NetworkError
/
.
test
(
e
.
message
)
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
NETWORK_ERROR
;
}
else
if
(
/
Backoff
/
.
test
(
e
.
message
)
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
BACKOFF
;
}
else
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
SYNC_ERROR
;
}
throw
e
;
}
}
const
{
created
:
allCreated
updated
:
allUpdated
deleted
:
allDeleted
}
=
syncResult
;
const
[
created
deleted
updatedFiltered
]
=
await
Promise
.
all
(
[
allCreated
allDeleted
allUpdated
.
map
(
e
=
>
e
.
new
)
]
.
map
(
this
.
_filterEntries
.
bind
(
this
)
)
)
;
const
updatedFilteredIds
=
new
Set
(
updatedFiltered
.
map
(
e
=
>
e
.
id
)
)
;
const
updated
=
allUpdated
.
filter
(
(
{
new
:
{
id
}
}
)
=
>
updatedFilteredIds
.
has
(
id
)
)
;
if
(
created
.
length
|
|
updated
.
length
|
|
deleted
.
length
)
{
const
{
data
:
allData
}
=
await
collection
.
list
(
)
;
const
current
=
await
this
.
_filterEntries
(
allData
)
;
const
payload
=
{
data
:
{
current
created
updated
deleted
}
}
;
try
{
await
this
.
emit
(
"
sync
"
payload
)
;
}
catch
(
e
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
APPLY_ERROR
;
throw
e
;
}
}
this
.
_updateLastCheck
(
serverTime
)
;
}
catch
(
e
)
{
if
(
reportStatus
=
=
=
null
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
UNKNOWN_ERROR
;
}
throw
e
;
}
finally
{
if
(
reportStatus
=
=
=
null
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
SUCCESS
;
}
UptakeTelemetry
.
report
(
this
.
identifier
reportStatus
)
;
}
}
async
_loadDumpFile
(
)
{
const
{
components
:
folderFile
}
=
OS
.
Path
.
split
(
this
.
filename
)
;
const
fileURI
=
resource
:
/
/
app
/
defaults
/
settings
/
{
folderFile
.
join
(
"
/
"
)
}
;
const
response
=
await
fetch
(
fileURI
)
;
if
(
!
response
.
ok
)
{
throw
new
Error
(
Could
not
read
from
'
{
fileURI
}
'
)
;
}
return
response
.
json
(
)
;
}
async
_validateCollectionSignature
(
remote
payload
collection
options
=
{
}
)
{
const
{
ignoreLocal
}
=
options
;
const
signaturePayload
=
await
fetchCollectionMetadata
(
remote
collection
)
;
if
(
!
signaturePayload
)
{
throw
new
Error
(
MISSING_SIGNATURE
)
;
}
const
{
x5u
signature
}
=
signaturePayload
;
const
certChainResponse
=
await
fetch
(
x5u
)
;
const
certChain
=
await
certChainResponse
.
text
(
)
;
const
verifier
=
Cc
[
"
mozilla
.
org
/
security
/
contentsignatureverifier
;
1
"
]
.
createInstance
(
Ci
.
nsIContentSignatureVerifier
)
;
let
toSerialize
;
if
(
ignoreLocal
)
{
toSerialize
=
{
last_modified
:
{
payload
.
last_modified
}
data
:
payload
.
data
}
;
}
else
{
const
{
data
:
localRecords
}
=
await
collection
.
list
(
)
;
const
records
=
mergeChanges
(
collection
localRecords
payload
.
changes
)
;
toSerialize
=
{
last_modified
:
{
payload
.
lastModified
}
data
:
records
}
;
}
const
serialized
=
CanonicalJSON
.
stringify
(
toSerialize
)
;
if
(
verifier
.
verifyContentSignature
(
serialized
"
p384ecdsa
=
"
+
signature
certChain
this
.
signerName
)
)
{
return
payload
;
}
throw
new
Error
(
INVALID_SIGNATURE
)
;
}
_updateLastCheck
(
serverTime
)
{
const
checkedServerTimeInSeconds
=
Math
.
round
(
serverTime
/
1000
)
;
Services
.
prefs
.
setIntPref
(
this
.
lastCheckTimePref
checkedServerTimeInSeconds
)
;
}
async
_filterEntries
(
data
)
{
if
(
!
this
.
filterFunc
)
{
return
data
;
}
const
environment
=
cacheProxy
(
ClientEnvironment
)
;
const
dataPromises
=
data
.
map
(
e
=
>
this
.
filterFunc
(
e
environment
)
)
;
const
results
=
await
Promise
.
all
(
dataPromises
)
;
return
results
.
filter
(
v
=
>
!
!
v
)
;
}
}
function
remoteSettingsFunction
(
)
{
const
_clients
=
new
Map
(
)
;
const
mainBucket
=
Services
.
prefs
.
getCharPref
(
PREF_SETTINGS_DEFAULT_BUCKET
)
;
const
defaultSigner
=
Services
.
prefs
.
getCharPref
(
PREF_SETTINGS_DEFAULT_SIGNER
)
;
const
remoteSettings
=
function
(
collectionName
options
)
{
const
rsOptions
=
{
bucketName
:
mainBucket
signerName
:
defaultSigner
.
.
.
options
}
;
const
{
bucketName
}
=
rsOptions
;
const
key
=
{
bucketName
}
/
{
collectionName
}
;
if
(
!
_clients
.
has
(
key
)
)
{
const
c
=
new
RemoteSettingsClient
(
collectionName
rsOptions
)
;
_clients
.
set
(
key
c
)
;
}
return
_clients
.
get
(
key
)
;
}
;
remoteSettings
.
pollChanges
=
async
(
)
=
>
{
if
(
Services
.
prefs
.
prefHasUserValue
(
PREF_SETTINGS_SERVER_BACKOFF
)
)
{
const
backoffReleaseTime
=
Services
.
prefs
.
getCharPref
(
PREF_SETTINGS_SERVER_BACKOFF
)
;
const
remainingMilliseconds
=
parseInt
(
backoffReleaseTime
10
)
-
Date
.
now
(
)
;
if
(
remainingMilliseconds
>
0
)
{
UptakeTelemetry
.
report
(
TELEMETRY_HISTOGRAM_KEY
UptakeTelemetry
.
STATUS
.
BACKOFF
)
;
throw
new
Error
(
Server
is
asking
clients
to
back
off
;
retry
in
{
Math
.
ceil
(
remainingMilliseconds
/
1000
)
}
s
.
)
;
}
else
{
Services
.
prefs
.
clearUserPref
(
PREF_SETTINGS_SERVER_BACKOFF
)
;
}
}
const
kintoBase
=
Services
.
prefs
.
getCharPref
(
PREF_SETTINGS_SERVER
)
;
const
changesEndpoint
=
kintoBase
+
Services
.
prefs
.
getCharPref
(
PREF_SETTINGS_CHANGES_PATH
)
;
let
lastEtag
;
if
(
Services
.
prefs
.
prefHasUserValue
(
PREF_SETTINGS_LAST_ETAG
)
)
{
lastEtag
=
Services
.
prefs
.
getCharPref
(
PREF_SETTINGS_LAST_ETAG
)
;
}
let
pollResult
;
try
{
pollResult
=
await
fetchLatestChanges
(
changesEndpoint
lastEtag
)
;
}
catch
(
e
)
{
let
report
;
if
(
/
Server
/
.
test
(
e
.
message
)
)
{
report
=
UptakeTelemetry
.
STATUS
.
SERVER_ERROR
;
}
else
if
(
/
NetworkError
/
.
test
(
e
.
message
)
)
{
report
=
UptakeTelemetry
.
STATUS
.
NETWORK_ERROR
;
}
else
{
report
=
UptakeTelemetry
.
STATUS
.
UNKNOWN_ERROR
;
}
UptakeTelemetry
.
report
(
TELEMETRY_HISTOGRAM_KEY
report
)
;
throw
new
Error
(
Polling
for
changes
failed
:
{
e
.
message
}
.
)
;
}
const
{
serverTimeMillis
changes
currentEtag
backoffSeconds
}
=
pollResult
;
const
report
=
changes
.
length
=
=
0
?
UptakeTelemetry
.
STATUS
.
UP_TO_DATE
:
UptakeTelemetry
.
STATUS
.
SUCCESS
;
UptakeTelemetry
.
report
(
TELEMETRY_HISTOGRAM_KEY
report
)
;
if
(
backoffSeconds
)
{
const
backoffReleaseTime
=
Date
.
now
(
)
+
backoffSeconds
*
1000
;
Services
.
prefs
.
setCharPref
(
PREF_SETTINGS_SERVER_BACKOFF
backoffReleaseTime
)
;
}
const
clockDifference
=
Math
.
floor
(
(
Date
.
now
(
)
-
serverTimeMillis
)
/
1000
)
;
Services
.
prefs
.
setIntPref
(
PREF_SETTINGS_CLOCK_SKEW_SECONDS
clockDifference
)
;
Services
.
prefs
.
setIntPref
(
PREF_SETTINGS_LAST_UPDATE
serverTimeMillis
/
1000
)
;
const
loadDump
=
Services
.
prefs
.
getBoolPref
(
PREF_SETTINGS_LOAD_DUMP
true
)
;
let
firstError
;
for
(
const
change
of
changes
)
{
const
{
bucket
collection
last_modified
:
lastModified
}
=
change
;
const
key
=
{
bucket
}
/
{
collection
}
;
if
(
!
_clients
.
has
(
key
)
)
{
continue
;
}
const
client
=
_clients
.
get
(
key
)
;
if
(
client
.
bucketName
!
=
bucket
)
{
continue
;
}
try
{
await
client
.
maybeSync
(
lastModified
serverTimeMillis
{
loadDump
}
)
;
}
catch
(
e
)
{
if
(
!
firstError
)
{
firstError
=
e
;
}
}
}
if
(
firstError
)
{
throw
firstError
;
}
if
(
currentEtag
)
{
Services
.
prefs
.
setCharPref
(
PREF_SETTINGS_LAST_ETAG
currentEtag
)
;
}
Services
.
obs
.
notifyObservers
(
null
"
remote
-
settings
-
changes
-
polled
"
)
;
}
;
return
remoteSettings
;
}
var
RemoteSettings
=
remoteSettingsFunction
(
)
;
