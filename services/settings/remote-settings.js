"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
RemoteSettings
"
"
jexlFilterFunc
"
"
remoteSettingsBroadcastHandler
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
UptakeTelemetry
"
"
resource
:
/
/
services
-
common
/
uptake
-
telemetry
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
pushBroadcastService
"
"
resource
:
/
/
gre
/
modules
/
PushBroadcastService
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
RemoteSettingsClient
"
"
resource
:
/
/
services
-
settings
/
RemoteSettingsClient
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Utils
"
"
resource
:
/
/
services
-
settings
/
Utils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FilterExpressions
"
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
FilterExpressions
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
fetch
"
]
)
;
const
PREF_SETTINGS_DEFAULT_BUCKET
=
"
services
.
settings
.
default_bucket
"
;
const
PREF_SETTINGS_BRANCH
=
"
services
.
settings
.
"
;
const
PREF_SETTINGS_SERVER
=
"
server
"
;
const
PREF_SETTINGS_DEFAULT_SIGNER
=
"
default_signer
"
;
const
PREF_SETTINGS_SERVER_BACKOFF
=
"
server
.
backoff
"
;
const
PREF_SETTINGS_LAST_UPDATE
=
"
last_update_seconds
"
;
const
PREF_SETTINGS_LAST_ETAG
=
"
last_etag
"
;
const
PREF_SETTINGS_CLOCK_SKEW_SECONDS
=
"
clock_skew_seconds
"
;
const
PREF_SETTINGS_LOAD_DUMP
=
"
load_dump
"
;
const
TELEMETRY_COMPONENT
=
"
remotesettings
"
;
const
TELEMETRY_SOURCE_POLL
=
"
settings
-
changes
-
monitoring
"
;
const
TELEMETRY_SOURCE_SYNC
=
"
settings
-
sync
"
;
const
BROADCAST_ID
=
"
remote
-
settings
/
monitor_changes
"
;
const
DEFAULT_SIGNER
=
"
remote
-
settings
.
content
-
signature
.
mozilla
.
org
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gPrefs
"
(
)
=
>
{
return
Services
.
prefs
.
getBranch
(
PREF_SETTINGS_BRANCH
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
console
"
(
)
=
>
Utils
.
log
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gServerURL
"
PREF_SETTINGS_BRANCH
+
PREF_SETTINGS_SERVER
)
;
async
function
jexlFilterFunc
(
entry
environment
)
{
const
{
filter_expression
}
=
entry
;
if
(
!
filter_expression
)
{
return
entry
;
}
let
result
;
try
{
const
context
=
{
env
:
environment
}
;
result
=
await
FilterExpressions
.
eval
(
filter_expression
context
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
result
?
entry
:
null
;
}
function
remoteSettingsFunction
(
)
{
const
_clients
=
new
Map
(
)
;
let
_invalidatePolling
=
false
;
const
defaultOptions
=
{
bucketNamePref
:
PREF_SETTINGS_DEFAULT_BUCKET
signerName
:
DEFAULT_SIGNER
filterFunc
:
jexlFilterFunc
}
;
const
remoteSettings
=
function
(
collectionName
options
)
{
if
(
!
_clients
.
has
(
collectionName
)
)
{
const
c
=
new
RemoteSettingsClient
(
collectionName
{
.
.
.
defaultOptions
.
.
.
options
}
)
;
_clients
.
set
(
collectionName
c
)
;
_invalidatePolling
=
true
;
console
.
debug
(
Instantiated
new
client
{
c
.
identifier
}
)
;
}
return
_clients
.
get
(
collectionName
)
;
}
;
async
function
_client
(
bucketName
collectionName
)
{
const
client
=
_clients
.
get
(
collectionName
)
;
if
(
client
&
&
client
.
bucketName
=
=
bucketName
)
{
return
client
;
}
if
(
bucketName
=
=
Services
.
prefs
.
getCharPref
(
PREF_SETTINGS_DEFAULT_BUCKET
)
)
{
const
c
=
new
RemoteSettingsClient
(
collectionName
defaultOptions
)
;
const
[
dbExists
localDump
]
=
await
Promise
.
all
(
[
Utils
.
hasLocalData
(
c
)
Utils
.
hasLocalDump
(
bucketName
collectionName
)
]
)
;
if
(
dbExists
|
|
localDump
)
{
return
c
;
}
}
console
.
debug
(
No
known
client
for
{
bucketName
}
/
{
collectionName
}
)
;
return
null
;
}
remoteSettings
.
pollChanges
=
async
(
{
expectedTimestamp
trigger
=
"
manual
"
}
=
{
}
)
=
>
{
const
startedAt
=
new
Date
(
)
;
let
pollTelemetryArgs
=
{
source
:
TELEMETRY_SOURCE_POLL
trigger
}
;
if
(
gPrefs
.
prefHasUserValue
(
PREF_SETTINGS_SERVER_BACKOFF
)
)
{
const
backoffReleaseTime
=
gPrefs
.
getCharPref
(
PREF_SETTINGS_SERVER_BACKOFF
)
;
const
remainingMilliseconds
=
parseInt
(
backoffReleaseTime
10
)
-
Date
.
now
(
)
;
if
(
remainingMilliseconds
>
0
)
{
await
UptakeTelemetry
.
report
(
TELEMETRY_COMPONENT
UptakeTelemetry
.
STATUS
.
BACKOFF
pollTelemetryArgs
)
;
throw
new
Error
(
Server
is
asking
clients
to
back
off
;
retry
in
{
Math
.
ceil
(
remainingMilliseconds
/
1000
)
}
s
.
)
;
}
else
{
gPrefs
.
clearUserPref
(
PREF_SETTINGS_SERVER_BACKOFF
)
;
}
}
console
.
info
(
"
Start
polling
for
changes
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
remote
-
settings
:
changes
-
poll
-
start
"
JSON
.
stringify
(
{
expectedTimestamp
}
)
)
;
const
lastEtag
=
_invalidatePolling
?
"
"
:
gPrefs
.
getCharPref
(
PREF_SETTINGS_LAST_ETAG
"
"
)
;
let
pollResult
;
try
{
pollResult
=
await
Utils
.
fetchLatestChanges
(
gServerURL
{
expectedTimestamp
lastEtag
}
)
;
}
catch
(
e
)
{
let
reportStatus
;
if
(
/
JSON
\
.
parse
/
.
test
(
e
.
message
)
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
PARSE_ERROR
;
}
else
if
(
/
content
-
type
/
.
test
(
e
.
message
)
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
CONTENT_ERROR
;
}
else
if
(
/
Server
/
.
test
(
e
.
message
)
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
SERVER_ERROR
;
}
else
if
(
/
Timeout
/
.
test
(
e
.
message
)
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
TIMEOUT_ERROR
;
}
else
if
(
/
NetworkError
/
.
test
(
e
.
message
)
)
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
NETWORK_ERROR
;
}
else
{
reportStatus
=
UptakeTelemetry
.
STATUS
.
UNKNOWN_ERROR
;
}
await
UptakeTelemetry
.
report
(
TELEMETRY_COMPONENT
reportStatus
pollTelemetryArgs
)
;
throw
new
Error
(
Polling
for
changes
failed
:
{
e
.
message
}
.
)
;
}
const
{
serverTimeMillis
changes
currentEtag
backoffSeconds
ageSeconds
}
=
pollResult
;
pollTelemetryArgs
=
{
age
:
ageSeconds
.
.
.
pollTelemetryArgs
}
;
const
reportStatus
=
changes
.
length
=
=
=
0
?
UptakeTelemetry
.
STATUS
.
UP_TO_DATE
:
UptakeTelemetry
.
STATUS
.
SUCCESS
;
await
UptakeTelemetry
.
report
(
TELEMETRY_COMPONENT
reportStatus
pollTelemetryArgs
)
;
if
(
backoffSeconds
)
{
console
.
info
(
"
Server
asks
clients
to
backoff
for
{
backoffSeconds
}
seconds
"
)
;
const
backoffReleaseTime
=
Date
.
now
(
)
+
backoffSeconds
*
1000
;
gPrefs
.
setCharPref
(
PREF_SETTINGS_SERVER_BACKOFF
backoffReleaseTime
)
;
}
const
clockDifference
=
Math
.
floor
(
(
Date
.
now
(
)
-
serverTimeMillis
)
/
1000
)
;
gPrefs
.
setIntPref
(
PREF_SETTINGS_CLOCK_SKEW_SECONDS
clockDifference
)
;
const
checkedServerTimeInSeconds
=
Math
.
round
(
serverTimeMillis
/
1000
)
;
gPrefs
.
setIntPref
(
PREF_SETTINGS_LAST_UPDATE
checkedServerTimeInSeconds
)
;
const
loadDump
=
gPrefs
.
getBoolPref
(
PREF_SETTINGS_LOAD_DUMP
true
)
;
let
firstError
;
for
(
const
change
of
changes
)
{
const
{
bucket
collection
last_modified
}
=
change
;
const
client
=
await
_client
(
bucket
collection
)
;
if
(
!
client
)
{
continue
;
}
try
{
await
client
.
maybeSync
(
last_modified
{
loadDump
trigger
}
)
;
Services
.
prefs
.
setIntPref
(
client
.
lastCheckTimePref
checkedServerTimeInSeconds
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
if
(
!
firstError
)
{
firstError
=
e
;
firstError
.
details
=
change
;
}
}
}
_invalidatePolling
=
false
;
const
durationMilliseconds
=
new
Date
(
)
-
startedAt
;
const
syncTelemetryArgs
=
{
source
:
TELEMETRY_SOURCE_SYNC
duration
:
durationMilliseconds
trigger
}
;
if
(
firstError
)
{
await
UptakeTelemetry
.
report
(
TELEMETRY_COMPONENT
UptakeTelemetry
.
STATUS
.
SYNC_ERROR
syncTelemetryArgs
)
;
throw
firstError
;
}
if
(
currentEtag
)
{
gPrefs
.
setCharPref
(
PREF_SETTINGS_LAST_ETAG
currentEtag
)
;
}
await
UptakeTelemetry
.
report
(
TELEMETRY_COMPONENT
UptakeTelemetry
.
STATUS
.
SUCCESS
syncTelemetryArgs
)
;
console
.
info
(
"
Polling
for
changes
done
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
remote
-
settings
:
changes
-
poll
-
end
"
)
;
}
;
remoteSettings
.
inspect
=
async
(
)
=
>
{
const
{
changes
currentEtag
:
serverTimestamp
}
=
await
Utils
.
fetchLatestChanges
(
gServerURL
)
;
const
collections
=
await
Promise
.
all
(
changes
.
map
(
async
change
=
>
{
const
{
bucket
collection
last_modified
:
serverTimestamp
}
=
change
;
const
client
=
await
_client
(
bucket
collection
)
;
if
(
!
client
)
{
return
null
;
}
const
kintoCol
=
await
client
.
openCollection
(
)
;
const
localTimestamp
=
await
kintoCol
.
db
.
getLastModified
(
)
;
const
lastCheck
=
Services
.
prefs
.
getIntPref
(
client
.
lastCheckTimePref
0
)
;
return
{
bucket
collection
localTimestamp
serverTimestamp
lastCheck
signerName
:
client
.
signerName
}
;
}
)
)
;
return
{
serverURL
:
gServerURL
pollingEndpoint
:
gServerURL
+
Utils
.
CHANGES_PATH
serverTimestamp
localTimestamp
:
gPrefs
.
getCharPref
(
PREF_SETTINGS_LAST_ETAG
null
)
lastCheck
:
gPrefs
.
getIntPref
(
PREF_SETTINGS_LAST_UPDATE
0
)
mainBucket
:
Services
.
prefs
.
getCharPref
(
PREF_SETTINGS_DEFAULT_BUCKET
)
defaultSigner
:
DEFAULT_SIGNER
collections
:
collections
.
filter
(
c
=
>
!
!
c
)
}
;
}
;
remoteSettings
.
init
=
(
)
=
>
{
console
.
info
(
"
Initialize
Remote
Settings
"
)
;
const
currentVersion
=
gPrefs
.
getStringPref
(
PREF_SETTINGS_LAST_ETAG
'
"
0
"
'
)
;
const
moduleInfo
=
{
moduleURI
:
__URI__
symbolName
:
"
remoteSettingsBroadcastHandler
"
}
;
pushBroadcastService
.
addListener
(
BROADCAST_ID
currentVersion
moduleInfo
)
;
}
;
return
remoteSettings
;
}
var
RemoteSettings
=
remoteSettingsFunction
(
)
;
var
remoteSettingsBroadcastHandler
=
{
async
receivedBroadcastMessage
(
version
broadcastID
context
)
{
const
{
phase
}
=
context
;
const
isStartup
=
[
pushBroadcastService
.
PHASES
.
HELLO
pushBroadcastService
.
PHASES
.
REGISTER
]
.
includes
(
phase
)
;
console
.
info
(
Push
notification
received
(
version
=
{
version
}
phase
=
{
phase
}
)
)
;
return
RemoteSettings
.
pollChanges
(
{
expectedTimestamp
:
version
trigger
:
isStartup
?
"
startup
"
:
"
broadcast
"
}
)
;
}
}
;
