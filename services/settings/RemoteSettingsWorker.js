"
use
strict
"
;
importScripts
(
"
resource
:
/
/
gre
/
modules
/
workers
/
require
.
js
"
"
resource
:
/
/
gre
/
modules
/
CanonicalJSON
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
third_party
/
jsesc
/
jsesc
.
js
"
)
;
const
IDB_NAME
=
"
remote
-
settings
"
;
const
IDB_VERSION
=
2
;
const
IDB_RECORDS_STORE
=
"
records
"
;
const
IDB_TIMESTAMPS_STORE
=
"
timestamps
"
;
const
Agent
=
{
async
canonicalStringify
(
records
timestamp
)
{
let
allRecords
=
records
.
sort
(
(
a
b
)
=
>
{
if
(
a
.
id
<
b
.
id
)
{
return
-
1
;
}
return
a
.
id
>
b
.
id
?
1
:
0
;
}
)
;
for
(
let
i
=
0
;
i
<
allRecords
.
length
;
)
{
const
rec
=
allRecords
[
i
]
;
const
next
=
allRecords
[
i
+
1
]
;
if
(
(
next
&
&
rec
.
id
=
=
next
.
id
)
|
|
rec
.
deleted
)
{
allRecords
.
splice
(
i
1
)
;
}
else
{
i
+
+
;
}
}
const
toSerialize
=
{
last_modified
:
"
"
+
timestamp
data
:
allRecords
}
;
return
CanonicalJSON
.
stringify
(
toSerialize
jsesc
)
;
}
async
importJSONDump
(
bucket
collection
)
{
const
{
data
:
records
}
=
await
loadJSONDump
(
bucket
collection
)
;
await
importDumpIDB
(
bucket
collection
records
)
;
return
records
.
length
;
}
async
checkFileHash
(
fileUrl
size
hash
)
{
let
resp
;
try
{
resp
=
await
fetch
(
fileUrl
)
;
}
catch
(
e
)
{
return
false
;
}
const
buffer
=
await
resp
.
arrayBuffer
(
)
;
const
bytes
=
new
Uint8Array
(
buffer
)
;
return
this
.
checkContentHash
(
bytes
size
hash
)
;
}
async
checkContentHash
(
buffer
size
hash
)
{
const
bytes
=
new
Uint8Array
(
buffer
)
;
if
(
bytes
.
length
!
=
=
size
)
{
return
false
;
}
const
hashBuffer
=
await
crypto
.
subtle
.
digest
(
"
SHA
-
256
"
bytes
)
;
const
hashBytes
=
new
Uint8Array
(
hashBuffer
)
;
const
toHex
=
b
=
>
b
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
;
const
hashStr
=
Array
.
from
(
hashBytes
toHex
)
.
join
(
"
"
)
;
return
hashStr
=
=
hash
;
}
}
;
self
.
onmessage
=
event
=
>
{
const
{
callbackId
method
args
=
[
]
}
=
event
.
data
;
Agent
[
method
]
(
.
.
.
args
)
.
then
(
result
=
>
{
self
.
postMessage
(
{
callbackId
result
}
)
;
}
)
.
catch
(
error
=
>
{
console
.
log
(
RemoteSettingsWorker
error
:
{
error
}
)
;
self
.
postMessage
(
{
callbackId
error
:
"
"
+
error
}
)
;
}
)
;
}
;
async
function
loadJSONDump
(
bucket
collection
)
{
const
fileURI
=
resource
:
/
/
app
/
defaults
/
settings
/
{
bucket
}
/
{
collection
}
.
json
;
let
response
;
try
{
response
=
await
fetch
(
fileURI
)
;
}
catch
(
e
)
{
return
{
data
:
[
]
}
;
}
return
response
.
json
(
)
;
}
async
function
importDumpIDB
(
bucket
collection
records
)
{
const
db
=
await
openIDB
(
IDB_NAME
IDB_VERSION
)
;
const
cid
=
bucket
+
"
/
"
+
collection
;
await
executeIDB
(
db
IDB_RECORDS_STORE
store
=
>
{
let
i
=
0
;
putNext
(
)
;
function
putNext
(
)
{
if
(
i
=
=
records
.
length
)
{
return
;
}
const
entry
=
{
.
.
.
records
[
i
]
_status
:
"
synced
"
_cid
:
cid
}
;
store
.
put
(
entry
)
.
onsuccess
=
putNext
;
+
+
i
;
}
}
)
;
const
timestamp
=
records
.
length
=
=
=
0
?
0
:
Math
.
max
(
.
.
.
records
.
map
(
record
=
>
record
.
last_modified
)
)
;
await
executeIDB
(
db
IDB_TIMESTAMPS_STORE
store
=
>
store
.
put
(
{
cid
value
:
timestamp
}
)
)
;
db
.
close
(
)
;
}
class
IndexedDBError
extends
Error
{
constructor
(
error
)
{
super
(
IndexedDB
:
{
error
.
message
}
)
;
this
.
name
=
error
.
name
;
this
.
stack
=
error
.
stack
;
}
}
async
function
openIDB
(
dbname
version
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
request
=
indexedDB
.
open
(
dbname
version
)
;
request
.
onupgradeneeded
=
(
)
=
>
{
reject
(
new
Error
(
IndexedDB
:
Error
accessing
{
dbname
}
Chrome
IDB
at
version
{
version
}
)
)
;
}
;
request
.
onerror
=
event
=
>
reject
(
new
IndexedDBError
(
event
.
target
.
error
)
)
;
request
.
onsuccess
=
event
=
>
{
const
db
=
event
.
target
.
result
;
resolve
(
db
)
;
}
;
}
)
;
}
async
function
executeIDB
(
db
storeName
callback
)
{
const
mode
=
"
readwrite
"
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
transaction
=
db
.
transaction
(
[
storeName
]
mode
)
;
const
store
=
transaction
.
objectStore
(
storeName
)
;
let
result
;
try
{
result
=
callback
(
store
)
;
}
catch
(
e
)
{
transaction
.
abort
(
)
;
reject
(
new
IndexedDBError
(
e
)
)
;
}
transaction
.
onerror
=
event
=
>
reject
(
new
IndexedDBError
(
event
.
target
.
error
)
)
;
transaction
.
oncomplete
=
event
=
>
resolve
(
result
)
;
}
)
;
}
