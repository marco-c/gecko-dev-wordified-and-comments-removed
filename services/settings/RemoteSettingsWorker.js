"
use
strict
"
;
importScripts
(
"
resource
:
/
/
gre
/
modules
/
workers
/
require
.
js
"
"
resource
:
/
/
gre
/
modules
/
CanonicalJSON
.
jsm
"
"
resource
:
/
/
services
-
settings
/
IDBHelpers
.
jsm
"
"
resource
:
/
/
services
-
settings
/
SharedUtils
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
third_party
/
jsesc
/
jsesc
.
js
"
)
;
const
IDB_RECORDS_STORE
=
"
records
"
;
const
IDB_TIMESTAMPS_STORE
=
"
timestamps
"
;
let
gShutdown
=
false
;
const
Agent
=
{
async
canonicalStringify
(
records
timestamp
)
{
let
allRecords
=
records
.
sort
(
(
a
b
)
=
>
{
if
(
a
.
id
<
b
.
id
)
{
return
-
1
;
}
return
a
.
id
>
b
.
id
?
1
:
0
;
}
)
;
for
(
let
i
=
0
;
i
<
allRecords
.
length
;
)
{
const
rec
=
allRecords
[
i
]
;
const
next
=
allRecords
[
i
+
1
]
;
if
(
(
next
&
&
rec
.
id
=
=
next
.
id
)
|
|
rec
.
deleted
)
{
allRecords
.
splice
(
i
1
)
;
}
else
{
i
+
+
;
}
}
const
toSerialize
=
{
last_modified
:
"
"
+
timestamp
data
:
allRecords
}
;
return
CanonicalJSON
.
stringify
(
toSerialize
jsesc
)
;
}
async
importJSONDump
(
bucket
collection
)
{
const
jsonBucket
=
bucket
.
replace
(
"
-
preview
"
"
"
)
;
const
{
data
:
records
}
=
await
loadJSONDump
(
jsonBucket
collection
)
;
if
(
records
=
=
=
null
)
{
return
-
1
;
}
if
(
gShutdown
)
{
throw
new
Error
(
"
Can
'
t
import
when
we
'
ve
started
shutting
down
.
"
)
;
}
await
importDumpIDB
(
bucket
collection
records
)
;
return
records
.
length
;
}
async
checkFileHash
(
fileUrl
size
hash
)
{
let
resp
;
try
{
resp
=
await
fetch
(
fileUrl
)
;
}
catch
(
e
)
{
return
false
;
}
const
buffer
=
await
resp
.
arrayBuffer
(
)
;
return
SharedUtils
.
checkContentHash
(
buffer
size
hash
)
;
}
async
prepareShutdown
(
)
{
gShutdown
=
true
;
let
transactions
=
Array
.
from
(
gPendingTransactions
)
;
for
(
let
transaction
of
transactions
)
{
try
{
transaction
.
abort
(
)
;
}
catch
(
ex
)
{
}
}
}
_test_only_import
(
bucket
collection
records
)
{
return
importDumpIDB
(
bucket
collection
records
)
;
}
}
;
self
.
onmessage
=
event
=
>
{
const
{
callbackId
method
args
=
[
]
}
=
event
.
data
;
Agent
[
method
]
(
.
.
.
args
)
.
then
(
result
=
>
{
self
.
postMessage
(
{
callbackId
result
}
)
;
}
)
.
catch
(
error
=
>
{
console
.
log
(
RemoteSettingsWorker
error
:
{
error
}
)
;
self
.
postMessage
(
{
callbackId
error
:
"
"
+
error
}
)
;
}
)
;
}
;
async
function
loadJSONDump
(
bucket
collection
)
{
const
fileURI
=
resource
:
/
/
app
/
defaults
/
settings
/
{
bucket
}
/
{
collection
}
.
json
;
let
response
;
try
{
response
=
await
fetch
(
fileURI
)
;
}
catch
(
e
)
{
return
{
data
:
null
}
;
}
if
(
gShutdown
)
{
throw
new
Error
(
"
Can
'
t
import
when
we
'
ve
started
shutting
down
.
"
)
;
}
return
response
.
json
(
)
;
}
let
gPendingTransactions
=
new
Set
(
)
;
async
function
importDumpIDB
(
bucket
collection
records
)
{
const
db
=
await
IDBHelpers
.
openIDB
(
false
)
;
try
{
if
(
gShutdown
)
{
throw
new
Error
(
"
Can
'
t
import
when
we
'
ve
started
shutting
down
.
"
)
;
}
const
cid
=
bucket
+
"
/
"
+
collection
;
records
.
forEach
(
item
=
>
{
item
.
_cid
=
cid
;
}
)
;
const
timestamp
=
records
.
length
=
=
=
0
?
0
:
Math
.
max
(
.
.
.
records
.
map
(
record
=
>
record
.
last_modified
)
)
;
let
{
transaction
promise
}
=
IDBHelpers
.
executeIDB
(
db
[
IDB_RECORDS_STORE
IDB_TIMESTAMPS_STORE
]
"
readwrite
"
(
[
recordsStore
timestampStore
]
rejectTransaction
)
=
>
{
recordsStore
.
delete
(
IDBKeyRange
.
bound
(
[
cid
]
[
cid
[
]
]
false
true
)
)
;
IDBHelpers
.
bulkOperationHelper
(
recordsStore
{
reject
:
rejectTransaction
completion
(
)
{
timestampStore
.
put
(
{
cid
value
:
timestamp
}
)
;
}
}
"
put
"
records
)
;
}
)
;
gPendingTransactions
.
add
(
transaction
)
;
promise
=
promise
.
finally
(
(
)
=
>
gPendingTransactions
.
delete
(
transaction
)
)
;
await
promise
;
}
finally
{
db
.
close
(
)
;
}
}
