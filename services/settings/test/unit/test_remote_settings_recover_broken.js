const
{
SyncHistory
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
SyncHistory
.
jsm
"
)
;
const
{
RemoteSettingsClient
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
RemoteSettingsClient
.
jsm
"
)
;
const
{
RemoteSettings
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
const
{
Utils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
Utils
.
jsm
"
)
;
const
PREF_SETTINGS_SERVER
=
"
services
.
settings
.
server
"
;
const
CHANGES_PATH
=
"
/
v1
"
+
Utils
.
CHANGES_PATH
;
const
BROKEN_SYNC_THRESHOLD
=
10
;
let
server
;
let
client
;
let
maybeSyncBackup
;
async
function
clear_state
(
)
{
Services
.
prefs
.
setCharPref
(
"
services
.
settings
.
loglevel
"
"
critical
"
)
;
Services
.
prefs
.
setCharPref
(
PREF_SETTINGS_SERVER
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
v1
)
;
await
new
SyncHistory
(
"
"
)
.
clear
(
)
;
let
timestamp
=
1337
;
server
.
registerPathHandler
(
CHANGES_PATH
(
request
response
)
=
>
{
response
.
setStatusLine
(
null
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
json
;
charset
=
UTF
-
8
"
)
;
response
.
setHeader
(
"
Date
"
new
Date
(
1000000
)
.
toUTCString
(
)
)
;
response
.
setHeader
(
"
ETag
"
"
{
timestamp
}
"
)
;
response
.
write
(
JSON
.
stringify
(
{
timestamp
changes
:
[
{
last_modified
:
+
+
timestamp
bucket
:
"
main
"
collection
:
"
desktop
-
manager
"
}
]
}
)
)
;
}
)
;
client
.
maybeSync
=
maybeSyncBackup
;
}
function
run_test
(
)
{
server
=
new
HttpServer
(
)
;
server
.
start
(
-
1
)
;
client
=
RemoteSettings
(
"
desktop
-
manager
"
)
;
maybeSyncBackup
=
client
.
maybeSync
;
run_next_test
(
)
;
registerCleanupFunction
(
(
)
=
>
{
server
.
stop
(
(
)
=
>
{
}
)
;
client
.
maybeSync
=
maybeSyncBackup
;
}
)
;
}
add_task
(
clear_state
)
;
add_task
(
async
function
test_db_is_destroyed_when_sync_is_broken
(
)
{
client
.
maybeSync
=
async
(
)
=
>
{
await
client
.
db
.
importChanges
(
{
}
1515
[
]
)
;
}
;
await
RemoteSettings
.
pollChanges
(
{
trigger
:
"
timer
"
}
)
;
client
.
maybeSync
=
(
)
=
>
{
throw
new
RemoteSettingsClient
.
InvalidSignatureError
(
"
main
/
desktop
-
manager
"
)
;
}
;
for
(
var
i
=
0
;
i
<
BROKEN_SYNC_THRESHOLD
;
i
+
+
)
{
try
{
await
RemoteSettings
.
pollChanges
(
{
trigger
:
"
timer
"
}
)
;
}
catch
(
e
)
{
}
}
Assert
.
equal
(
await
client
.
db
.
getLastModified
(
)
1515
"
Local
DB
was
not
destroyed
yet
"
)
;
try
{
await
RemoteSettings
.
pollChanges
(
{
trigger
:
"
timer
"
}
)
;
}
catch
(
e
)
{
}
Assert
.
equal
(
await
client
.
db
.
getLastModified
(
)
null
"
Local
DB
was
destroyed
"
)
;
}
)
;
add_task
(
clear_state
)
;
add_task
(
async
function
test_db_is_not_destroyed_when_state_is_server_error
(
)
{
await
client
.
db
.
importChanges
(
{
}
1515
[
]
)
;
let
lastError
;
for
(
var
i
=
0
;
i
<
BROKEN_SYNC_THRESHOLD
+
1
;
i
+
+
)
{
try
{
await
RemoteSettings
.
pollChanges
(
{
trigger
:
"
timer
"
}
)
;
}
catch
(
e
)
{
lastError
=
e
;
}
}
Assert
.
ok
(
/
Cannot
parse
server
content
/
.
test
(
lastError
.
message
)
"
Error
is
about
server
"
)
;
Assert
.
equal
(
await
client
.
db
.
getLastModified
(
)
1515
"
Local
DB
was
not
destroyed
"
)
;
}
)
;
add_task
(
clear_state
)
;
