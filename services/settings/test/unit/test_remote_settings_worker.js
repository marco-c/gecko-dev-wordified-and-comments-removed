const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
TestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
const
{
RemoteSettingsWorker
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
RemoteSettingsWorker
.
jsm
"
)
;
const
{
RemoteSettingsClient
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
RemoteSettingsClient
.
jsm
"
)
;
const
{
Database
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
Database
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
indexedDB
"
]
)
;
const
IS_ANDROID
=
AppConstants
.
platform
=
=
"
android
"
;
add_task
(
async
function
test_canonicaljson
(
)
{
const
records
=
[
{
id
:
"
1
"
title
:
"
title
1
"
}
{
id
:
"
2
"
title
:
"
title
2
"
}
]
;
const
timestamp
=
42
;
const
serialized
=
await
RemoteSettingsWorker
.
canonicalStringify
(
records
timestamp
)
;
Assert
.
equal
(
serialized
'
{
"
data
"
:
[
{
"
id
"
:
"
1
"
"
title
"
:
"
title
1
"
}
{
"
id
"
:
"
2
"
"
title
"
:
"
title
2
"
}
]
"
last_modified
"
:
"
42
"
}
'
)
;
}
)
;
add_task
(
async
function
test_import_json_dump_into_idb
(
)
{
if
(
IS_ANDROID
)
{
return
;
}
const
client
=
new
RemoteSettingsClient
(
"
language
-
dictionaries
"
{
bucketNamePref
:
"
services
.
settings
.
default_bucket
"
}
)
;
const
before
=
await
client
.
get
(
{
syncIfEmpty
:
false
}
)
;
Assert
.
equal
(
before
.
length
0
)
;
await
RemoteSettingsWorker
.
importJSONDump
(
"
main
"
"
language
-
dictionaries
"
)
;
const
after
=
await
client
.
get
(
{
syncIfEmpty
:
false
}
)
;
Assert
.
ok
(
after
.
length
>
0
)
;
let
lastModifiedStamp
=
await
client
.
getLastModified
(
)
;
Assert
.
equal
(
lastModifiedStamp
Math
.
max
(
.
.
.
after
.
map
(
record
=
>
record
.
last_modified
)
)
"
Should
have
correct
last
modified
timestamp
"
)
;
Database
.
_shutdownHandler
(
)
;
}
)
;
add_task
(
async
function
test_throws_error_if_worker_fails
(
)
{
let
error
;
try
{
await
RemoteSettingsWorker
.
canonicalStringify
(
null
42
)
;
}
catch
(
e
)
{
error
=
e
;
}
Assert
.
equal
(
error
.
message
.
endsWith
(
"
records
is
null
"
)
true
)
;
}
)
;
add_task
(
async
function
test_throws_error_if_worker_fails_async
(
)
{
if
(
IS_ANDROID
)
{
return
;
}
await
new
Promise
(
(
resolve
reject
)
=
>
{
const
request
=
indexedDB
.
deleteDatabase
(
"
remote
-
settings
"
)
;
request
.
onsuccess
=
event
=
>
resolve
(
)
;
request
.
onblocked
=
event
=
>
reject
(
new
Error
(
"
Cannot
delete
DB
"
)
)
;
request
.
onerror
=
event
=
>
reject
(
event
.
target
.
error
)
;
}
)
;
let
error
;
try
{
await
RemoteSettingsWorker
.
importJSONDump
(
"
main
"
"
language
-
dictionaries
"
)
;
}
catch
(
e
)
{
error
=
e
;
}
Assert
.
ok
(
/
IndexedDB
:
Error
accessing
remote
-
settings
/
.
test
(
error
.
message
)
)
;
}
)
;
add_task
(
async
function
test_throws_error_if_worker_crashes
(
)
{
let
error
;
try
{
await
RemoteSettingsWorker
.
_execute
(
"
unknown_method
"
)
;
}
catch
(
e
)
{
error
=
e
;
}
Assert
.
equal
(
error
.
message
"
TypeError
:
Agent
[
method
]
is
not
a
function
"
)
;
}
)
;
add_task
(
async
function
test_stops_worker_after_timeout
(
)
{
Services
.
prefs
.
setIntPref
(
"
services
.
settings
.
worker_idle_max_milliseconds
"
1
)
;
let
serialized
=
await
RemoteSettingsWorker
.
canonicalStringify
(
[
]
42
)
;
Assert
.
equal
(
serialized
'
{
"
data
"
:
[
]
"
last_modified
"
:
"
42
"
}
'
"
API
works
.
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
RemoteSettingsWorker
.
worker
)
;
Services
.
prefs
.
setIntPref
(
"
services
.
settings
.
worker_idle_max_milliseconds
"
600000
)
;
serialized
=
await
RemoteSettingsWorker
.
canonicalStringify
(
[
]
42
)
;
Assert
.
equal
(
serialized
'
{
"
data
"
:
[
]
"
last_modified
"
:
"
42
"
}
'
"
API
still
works
.
"
)
;
Assert
.
ok
(
RemoteSettingsWorker
.
worker
"
Worker
should
stay
alive
a
bit
.
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
settings
.
worker_idle_max_milliseconds
"
)
;
}
)
;
