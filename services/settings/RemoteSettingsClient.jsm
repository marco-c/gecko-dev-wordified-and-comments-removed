"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
RemoteSettingsClient
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
ClientEnvironmentBase
:
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
ClientEnvironment
.
jsm
"
Database
:
"
resource
:
/
/
services
-
settings
/
Database
.
jsm
"
Downloader
:
"
resource
:
/
/
services
-
settings
/
Attachments
.
jsm
"
IDBHelpers
:
"
resource
:
/
/
services
-
settings
/
IDBHelpers
.
jsm
"
KintoHttpClient
:
"
resource
:
/
/
services
-
common
/
kinto
-
http
-
client
.
js
"
ObjectUtils
:
"
resource
:
/
/
gre
/
modules
/
ObjectUtils
.
jsm
"
RemoteSettingsWorker
:
"
resource
:
/
/
services
-
settings
/
RemoteSettingsWorker
.
jsm
"
SharedUtils
:
"
resource
:
/
/
services
-
settings
/
SharedUtils
.
jsm
"
UptakeTelemetry
:
"
resource
:
/
/
services
-
common
/
uptake
-
telemetry
.
js
"
Utils
:
"
resource
:
/
/
services
-
settings
/
Utils
.
jsm
"
}
)
;
const
TELEMETRY_COMPONENT
=
"
remotesettings
"
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
console
"
(
)
=
>
lazy
.
Utils
.
log
)
;
function
cacheProxy
(
target
)
{
const
cache
=
new
Map
(
)
;
return
new
Proxy
(
target
{
get
(
target
prop
receiver
)
{
if
(
!
cache
.
has
(
prop
)
)
{
cache
.
set
(
prop
target
[
prop
]
)
;
}
return
cache
.
get
(
prop
)
;
}
}
)
;
}
class
EventEmitter
{
constructor
(
events
)
{
this
.
_listeners
=
new
Map
(
)
;
for
(
const
event
of
events
)
{
this
.
_listeners
.
set
(
event
[
]
)
;
}
}
async
emit
(
event
payload
)
{
const
callbacks
=
this
.
_listeners
.
get
(
event
)
;
let
lastError
;
for
(
const
cb
of
callbacks
)
{
try
{
await
cb
(
payload
)
;
}
catch
(
e
)
{
lastError
=
e
;
}
}
if
(
lastError
)
{
throw
lastError
;
}
}
hasListeners
(
event
)
{
return
this
.
_listeners
.
has
(
event
)
&
&
this
.
_listeners
.
get
(
event
)
.
length
>
0
;
}
on
(
event
callback
)
{
if
(
!
this
.
_listeners
.
has
(
event
)
)
{
throw
new
Error
(
Unknown
event
type
{
event
}
)
;
}
this
.
_listeners
.
get
(
event
)
.
push
(
callback
)
;
}
off
(
event
callback
)
{
if
(
!
this
.
_listeners
.
has
(
event
)
)
{
throw
new
Error
(
Unknown
event
type
{
event
}
)
;
}
const
callbacks
=
this
.
_listeners
.
get
(
event
)
;
const
i
=
callbacks
.
indexOf
(
callback
)
;
if
(
i
<
0
)
{
throw
new
Error
(
Unknown
callback
)
;
}
else
{
callbacks
.
splice
(
i
1
)
;
}
}
}
class
NetworkOfflineError
extends
Error
{
constructor
(
cid
)
{
super
(
"
Network
is
offline
"
)
;
this
.
name
=
"
NetworkOfflineError
"
;
}
}
class
InvalidSignatureError
extends
Error
{
constructor
(
cid
)
{
super
(
Invalid
content
signature
(
{
cid
}
)
)
;
this
.
name
=
"
InvalidSignatureError
"
;
}
}
class
MissingSignatureError
extends
InvalidSignatureError
{
constructor
(
cid
)
{
super
(
cid
)
;
this
.
message
=
Missing
signature
(
{
cid
}
)
;
this
.
name
=
"
MissingSignatureError
"
;
}
}
class
CorruptedDataError
extends
InvalidSignatureError
{
constructor
(
cid
)
{
super
(
cid
)
;
this
.
message
=
Corrupted
local
data
(
{
cid
}
)
;
this
.
name
=
"
CorruptedDataError
"
;
}
}
class
UnknownCollectionError
extends
Error
{
constructor
(
cid
)
{
super
(
Unknown
Collection
"
{
cid
}
"
)
;
this
.
name
=
"
UnknownCollectionError
"
;
}
}
class
AttachmentDownloader
extends
lazy
.
Downloader
{
constructor
(
client
)
{
super
(
client
.
bucketName
client
.
collectionName
)
;
this
.
_client
=
client
;
}
get
cacheImpl
(
)
{
const
cacheImpl
=
{
get
:
async
attachmentId
=
>
{
return
this
.
_client
.
db
.
getAttachment
(
attachmentId
)
;
}
set
:
async
(
attachmentId
attachment
)
=
>
{
return
this
.
_client
.
db
.
saveAttachment
(
attachmentId
attachment
)
;
}
delete
:
async
attachmentId
=
>
{
return
this
.
_client
.
db
.
saveAttachment
(
attachmentId
null
)
;
}
}
;
Object
.
defineProperty
(
this
"
cacheImpl
"
{
value
:
cacheImpl
}
)
;
return
cacheImpl
;
}
async
download
(
record
options
)
{
try
{
return
await
super
.
download
(
record
options
)
;
}
catch
(
err
)
{
let
status
=
lazy
.
UptakeTelemetry
.
STATUS
.
DOWNLOAD_ERROR
;
if
(
lazy
.
Utils
.
isOffline
)
{
status
=
lazy
.
UptakeTelemetry
.
STATUS
.
NETWORK_OFFLINE_ERROR
;
}
else
if
(
/
NetworkError
/
.
test
(
err
.
message
)
)
{
status
=
lazy
.
UptakeTelemetry
.
STATUS
.
NETWORK_ERROR
;
}
await
lazy
.
UptakeTelemetry
.
report
(
TELEMETRY_COMPONENT
status
{
source
:
this
.
_client
.
identifier
}
)
;
throw
err
;
}
}
async
deleteAll
(
)
{
let
allRecords
=
await
this
.
_client
.
db
.
list
(
)
;
return
Promise
.
all
(
allRecords
.
filter
(
r
=
>
!
!
r
.
attachment
)
.
map
(
r
=
>
Promise
.
all
(
[
this
.
deleteDownloaded
(
r
)
this
.
deleteFromDisk
(
r
)
]
)
)
)
;
}
}
class
RemoteSettingsClient
extends
EventEmitter
{
static
get
NetworkOfflineError
(
)
{
return
NetworkOfflineError
;
}
static
get
InvalidSignatureError
(
)
{
return
InvalidSignatureError
;
}
static
get
MissingSignatureError
(
)
{
return
MissingSignatureError
;
}
static
get
CorruptedDataError
(
)
{
return
CorruptedDataError
;
}
static
get
UnknownCollectionError
(
)
{
return
UnknownCollectionError
;
}
constructor
(
collectionName
{
bucketName
=
AppConstants
.
REMOTE_SETTINGS_DEFAULT_BUCKET
signerName
filterFunc
localFields
=
[
]
lastCheckTimePref
}
=
{
}
)
{
super
(
[
"
sync
"
]
)
;
this
.
collectionName
=
collectionName
;
this
.
bucketName
=
lazy
.
Utils
.
actualBucketName
(
bucketName
)
;
this
.
signerName
=
signerName
;
this
.
filterFunc
=
filterFunc
;
this
.
localFields
=
localFields
;
this
.
_lastCheckTimePref
=
lastCheckTimePref
;
this
.
_verifier
=
null
;
this
.
_syncRunning
=
false
;
this
.
verifySignature
=
AppConstants
.
REMOTE_SETTINGS_VERIFY_SIGNATURE
;
XPCOMUtils
.
defineLazyGetter
(
this
"
db
"
(
)
=
>
new
lazy
.
Database
(
this
.
identifier
)
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
attachments
"
(
)
=
>
new
AttachmentDownloader
(
this
)
)
;
}
refreshBucketName
(
)
{
this
.
bucketName
=
lazy
.
Utils
.
actualBucketName
(
this
.
bucketName
)
;
this
.
db
.
identifier
=
this
.
identifier
;
}
get
identifier
(
)
{
return
{
this
.
bucketName
}
/
{
this
.
collectionName
}
;
}
get
lastCheckTimePref
(
)
{
return
(
this
.
_lastCheckTimePref
|
|
services
.
settings
.
{
this
.
bucketName
}
.
{
this
.
collectionName
}
.
last_check
)
;
}
httpClient
(
)
{
const
api
=
new
lazy
.
KintoHttpClient
(
lazy
.
Utils
.
SERVER_URL
{
fetchFunc
:
lazy
.
Utils
.
fetch
}
)
;
return
api
.
bucket
(
this
.
bucketName
)
.
collection
(
this
.
collectionName
)
;
}
async
getLastModified
(
)
{
let
timestamp
=
-
1
;
try
{
timestamp
=
await
this
.
db
.
getLastModified
(
)
;
}
catch
(
err
)
{
lazy
.
console
.
warn
(
Error
retrieving
the
getLastModified
timestamp
from
{
this
.
identifier
}
RemoteSettingsClient
err
)
;
}
return
timestamp
;
}
async
get
(
options
=
{
}
)
{
const
{
filters
=
{
}
order
=
"
"
dumpFallback
=
true
loadDumpIfNewer
=
true
syncIfEmpty
=
true
}
=
options
;
let
{
verifySignature
=
false
}
=
options
;
let
data
;
try
{
let
lastModified
=
await
this
.
db
.
getLastModified
(
)
;
let
hasLocalData
=
lastModified
!
=
=
null
;
if
(
syncIfEmpty
&
&
!
hasLocalData
)
{
if
(
!
this
.
_importingPromise
)
{
this
.
_importingPromise
=
(
async
(
)
=
>
{
const
importedFromDump
=
lazy
.
Utils
.
LOAD_DUMPS
?
await
this
.
_importJSONDump
(
)
:
-
1
;
if
(
importedFromDump
<
0
)
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
Local
DB
is
empty
pull
data
from
server
)
;
await
this
.
sync
(
{
loadDump
:
false
sendEvents
:
false
}
)
;
}
return
true
;
}
)
(
)
;
}
else
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
Awaiting
existing
import
.
)
;
}
}
else
if
(
hasLocalData
&
&
loadDumpIfNewer
)
{
let
lastModifiedDump
=
await
lazy
.
Utils
.
getLocalDumpLastModified
(
this
.
bucketName
this
.
collectionName
)
;
if
(
lastModified
<
lastModifiedDump
)
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
Local
DB
is
stale
(
{
lastModified
}
)
using
dump
instead
(
{
lastModifiedDump
}
)
)
;
if
(
!
this
.
_importingPromise
)
{
this
.
_importingPromise
=
(
async
(
)
=
>
{
const
importedFromDump
=
await
this
.
_importJSONDump
(
)
;
return
importedFromDump
>
=
0
;
}
)
(
)
;
}
else
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
Awaiting
existing
import
.
)
;
}
}
}
if
(
this
.
_importingPromise
)
{
try
{
if
(
await
this
.
_importingPromise
)
{
verifySignature
=
false
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
finally
{
delete
this
.
_importingPromise
;
}
}
data
=
await
this
.
db
.
list
(
{
filters
order
}
)
;
}
catch
(
e
)
{
if
(
!
dumpFallback
)
{
throw
e
;
}
Cu
.
reportError
(
e
)
;
let
{
data
}
=
await
lazy
.
SharedUtils
.
loadJSONDump
(
this
.
bucketName
this
.
collectionName
)
;
if
(
data
!
=
=
null
)
{
lazy
.
console
.
info
(
{
this
.
identifier
}
falling
back
to
JSON
dump
)
;
}
else
{
lazy
.
console
.
info
(
{
this
.
identifier
}
no
dump
fallback
return
empty
list
)
;
data
=
[
]
;
}
if
(
!
lazy
.
ObjectUtils
.
isEmpty
(
filters
)
)
{
data
=
data
.
filter
(
r
=
>
lazy
.
Utils
.
filterObject
(
filters
r
)
)
;
}
if
(
order
)
{
data
=
lazy
.
Utils
.
sortObjects
(
order
data
)
;
}
return
this
.
_filterEntries
(
data
)
;
}
lazy
.
console
.
debug
(
{
this
.
identifier
}
{
data
.
length
}
records
before
filtering
.
)
;
if
(
verifySignature
)
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
verify
signature
of
local
data
on
read
)
;
const
allData
=
lazy
.
ObjectUtils
.
isEmpty
(
filters
)
?
data
:
await
this
.
db
.
list
(
)
;
const
localRecords
=
allData
.
map
(
r
=
>
this
.
_cleanLocalFields
(
r
)
)
;
const
timestamp
=
await
this
.
db
.
getLastModified
(
)
;
let
metadata
=
await
this
.
db
.
getMetadata
(
)
;
if
(
syncIfEmpty
&
&
lazy
.
ObjectUtils
.
isEmpty
(
metadata
)
)
{
await
this
.
sync
(
{
loadDump
:
false
sendEvents
:
false
}
)
;
metadata
=
await
this
.
db
.
getMetadata
(
)
;
}
await
this
.
_validateCollectionSignature
(
localRecords
timestamp
metadata
)
;
}
const
final
=
await
this
.
_filterEntries
(
data
)
;
lazy
.
console
.
debug
(
{
this
.
identifier
}
{
final
.
length
}
records
after
filtering
.
)
;
return
final
;
}
async
sync
(
options
)
{
const
{
changes
}
=
await
lazy
.
Utils
.
fetchLatestChanges
(
lazy
.
Utils
.
SERVER_URL
{
filters
:
{
collection
:
this
.
collectionName
bucket
:
this
.
bucketName
}
}
)
;
if
(
changes
.
length
=
=
=
0
)
{
throw
new
RemoteSettingsClient
.
UnknownCollectionError
(
this
.
identifier
)
;
}
const
[
{
last_modified
:
expectedTimestamp
}
]
=
changes
;
return
this
.
maybeSync
(
expectedTimestamp
{
.
.
.
options
trigger
:
"
forced
"
}
)
;
}
async
maybeSync
(
expectedTimestamp
options
=
{
}
)
{
const
{
loadDump
=
lazy
.
Utils
.
LOAD_DUMPS
trigger
=
"
manual
"
sendEvents
=
true
}
=
options
;
if
(
this
.
_syncRunning
)
{
lazy
.
console
.
warn
(
{
this
.
identifier
}
sync
already
running
)
;
return
;
}
if
(
Services
.
startup
.
shuttingDown
)
{
lazy
.
console
.
warn
(
{
this
.
identifier
}
sync
interrupted
by
shutdown
)
;
return
;
}
this
.
_syncRunning
=
true
;
let
importedFromDump
=
[
]
;
const
startedAt
=
new
Date
(
)
;
let
reportStatus
=
null
;
let
thrownError
=
null
;
try
{
if
(
lazy
.
Utils
.
isOffline
)
{
throw
new
RemoteSettingsClient
.
NetworkOfflineError
(
)
;
}
let
collectionLastModified
=
await
this
.
db
.
getLastModified
(
)
;
const
allData
=
await
this
.
db
.
list
(
)
;
let
localRecords
=
allData
.
map
(
r
=
>
this
.
_cleanLocalFields
(
r
)
)
;
const
localMetadata
=
await
this
.
db
.
getMetadata
(
)
;
if
(
!
collectionLastModified
&
&
loadDump
)
{
try
{
const
imported
=
await
this
.
_importJSONDump
(
)
;
if
(
imported
>
0
)
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
{
imported
}
records
loaded
from
JSON
dump
)
;
importedFromDump
=
await
this
.
db
.
list
(
)
;
localRecords
=
importedFromDump
;
}
collectionLastModified
=
await
this
.
db
.
getLastModified
(
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
let
syncResult
;
try
{
if
(
expectedTimestamp
=
=
collectionLastModified
)
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
local
data
is
up
-
to
-
date
)
;
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
UP_TO_DATE
;
if
(
this
.
verifySignature
&
&
lazy
.
ObjectUtils
.
isEmpty
(
localMetadata
)
)
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
pull
collection
metadata
)
;
const
metadata
=
await
this
.
httpClient
(
)
.
getData
(
{
query
:
{
_expected
:
expectedTimestamp
}
}
)
;
await
this
.
db
.
importChanges
(
metadata
)
;
if
(
this
.
verifySignature
&
&
importedFromDump
.
length
=
=
0
)
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
verify
signature
of
local
data
)
;
await
this
.
_validateCollectionSignature
(
localRecords
collectionLastModified
metadata
)
;
}
}
if
(
importedFromDump
.
length
=
=
0
)
{
return
;
}
syncResult
=
{
current
:
importedFromDump
created
:
importedFromDump
updated
:
[
]
deleted
:
[
]
}
;
}
else
{
syncResult
=
await
this
.
_importChanges
(
localRecords
collectionLastModified
localMetadata
expectedTimestamp
)
;
if
(
sendEvents
&
&
this
.
hasListeners
(
"
sync
"
)
)
{
const
importedById
=
importedFromDump
.
reduce
(
(
acc
r
)
=
>
{
acc
.
set
(
r
.
id
r
)
;
return
acc
;
}
new
Map
(
)
)
;
syncResult
.
deleted
.
forEach
(
r
=
>
importedById
.
delete
(
r
.
id
)
)
;
syncResult
.
updated
.
forEach
(
u
=
>
{
if
(
importedById
.
has
(
u
.
old
.
id
)
)
{
importedById
.
set
(
u
.
old
.
id
u
.
new
)
;
}
}
)
;
syncResult
.
created
=
syncResult
.
created
.
concat
(
Array
.
from
(
importedById
.
values
(
)
)
)
;
}
}
}
catch
(
e
)
{
if
(
e
instanceof
InvalidSignatureError
)
{
reportStatus
=
e
instanceof
CorruptedDataError
?
lazy
.
UptakeTelemetry
.
STATUS
.
CORRUPTION_ERROR
:
lazy
.
UptakeTelemetry
.
STATUS
.
SIGNATURE_ERROR
;
try
{
lazy
.
console
.
warn
(
{
this
.
identifier
}
Signature
verified
failed
.
Retry
from
scratch
)
;
syncResult
=
await
this
.
_importChanges
(
localRecords
collectionLastModified
localMetadata
expectedTimestamp
{
retry
:
true
}
)
;
}
catch
(
e
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
SIGNATURE_RETRY_ERROR
;
throw
e
;
}
}
else
{
reportStatus
=
this
.
_telemetryFromError
(
e
{
default
:
lazy
.
UptakeTelemetry
.
STATUS
.
SYNC_ERROR
}
)
;
throw
e
;
}
}
if
(
sendEvents
)
{
const
filteredSyncResult
=
await
this
.
_filterSyncResult
(
syncResult
)
;
if
(
filteredSyncResult
)
{
try
{
await
this
.
emit
(
"
sync
"
{
data
:
filteredSyncResult
}
)
;
}
catch
(
e
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
APPLY_ERROR
;
throw
e
;
}
}
else
{
lazy
.
console
.
info
(
All
changes
are
filtered
by
JEXL
expressions
for
{
this
.
identifier
}
)
;
}
}
}
catch
(
e
)
{
thrownError
=
e
;
if
(
Services
.
startup
.
shuttingDown
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
SHUTDOWN_ERROR
;
}
else
if
(
reportStatus
=
=
null
)
{
reportStatus
=
this
.
_telemetryFromError
(
e
{
default
:
lazy
.
UptakeTelemetry
.
STATUS
.
UNKNOWN_ERROR
}
)
;
}
throw
e
;
}
finally
{
const
durationMilliseconds
=
new
Date
(
)
-
startedAt
;
if
(
reportStatus
=
=
=
null
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
SUCCESS
;
}
let
reportArgs
=
{
source
:
this
.
identifier
trigger
duration
:
durationMilliseconds
}
;
const
channel
=
lazy
.
UptakeTelemetry
.
Policy
.
getChannel
(
)
;
if
(
thrownError
!
=
=
null
&
&
channel
=
=
"
nightly
"
&
&
[
lazy
.
UptakeTelemetry
.
STATUS
.
SYNC_ERROR
lazy
.
UptakeTelemetry
.
STATUS
.
CUSTOM_1_ERROR
lazy
.
UptakeTelemetry
.
STATUS
.
UNKNOWN_ERROR
lazy
.
UptakeTelemetry
.
STATUS
.
SHUTDOWN_ERROR
]
.
includes
(
reportStatus
)
)
{
reportArgs
=
{
.
.
.
reportArgs
errorName
:
thrownError
.
name
}
;
}
await
lazy
.
UptakeTelemetry
.
report
(
TELEMETRY_COMPONENT
reportStatus
reportArgs
)
;
lazy
.
console
.
debug
(
{
this
.
identifier
}
sync
status
is
{
reportStatus
}
)
;
this
.
_syncRunning
=
false
;
}
}
_telemetryFromError
(
e
options
=
{
default
:
null
}
)
{
let
reportStatus
=
options
.
default
;
if
(
e
instanceof
RemoteSettingsClient
.
NetworkOfflineError
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
NETWORK_OFFLINE_ERROR
;
}
else
if
(
e
instanceof
lazy
.
IDBHelpers
.
ShutdownError
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
SHUTDOWN_ERROR
;
}
else
if
(
/
unparseable
/
.
test
(
e
.
message
)
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
PARSE_ERROR
;
}
else
if
(
/
NetworkError
/
.
test
(
e
.
message
)
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
NETWORK_ERROR
;
}
else
if
(
/
Timeout
/
.
test
(
e
.
message
)
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
TIMEOUT_ERROR
;
}
else
if
(
/
HTTP
5
?
?
/
.
test
(
e
.
message
)
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
SERVER_ERROR
;
}
else
if
(
/
Backoff
/
.
test
(
e
.
message
)
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
BACKOFF
;
}
else
if
(
e
instanceof
lazy
.
IDBHelpers
.
IndexedDBError
|
|
/
IndexedDB
/
.
test
(
e
.
message
)
)
{
reportStatus
=
lazy
.
UptakeTelemetry
.
STATUS
.
CUSTOM_1_ERROR
;
}
return
reportStatus
;
}
async
_importJSONDump
(
)
{
lazy
.
console
.
info
(
{
this
.
identifier
}
try
to
restore
dump
)
;
const
result
=
await
lazy
.
RemoteSettingsWorker
.
importJSONDump
(
this
.
bucketName
this
.
collectionName
)
;
if
(
result
<
0
)
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
no
dump
available
)
;
}
else
{
lazy
.
console
.
info
(
{
this
.
identifier
}
imported
{
result
}
records
from
dump
)
;
}
return
result
;
}
async
_validateCollectionSignature
(
records
timestamp
metadata
)
{
if
(
!
metadata
?
.
signature
)
{
throw
new
MissingSignatureError
(
this
.
identifier
)
;
}
if
(
!
this
.
_verifier
)
{
this
.
_verifier
=
Cc
[
"
mozilla
.
org
/
security
/
contentsignatureverifier
;
1
"
]
.
createInstance
(
Ci
.
nsIContentSignatureVerifier
)
;
}
const
{
signature
:
{
x5u
signature
}
}
=
metadata
;
const
certChain
=
await
(
await
lazy
.
Utils
.
fetch
(
x5u
)
)
.
text
(
)
;
const
serialized
=
await
lazy
.
RemoteSettingsWorker
.
canonicalStringify
(
records
timestamp
)
;
if
(
!
(
await
this
.
_verifier
.
asyncVerifyContentSignature
(
serialized
"
p384ecdsa
=
"
+
signature
certChain
this
.
signerName
lazy
.
Utils
.
CERT_CHAIN_ROOT_IDENTIFIER
)
)
)
{
throw
new
InvalidSignatureError
(
this
.
identifier
)
;
}
}
async
_importChanges
(
localRecords
localTimestamp
localMetadata
expectedTimestamp
options
=
{
}
)
{
const
{
retry
=
false
}
=
options
;
const
since
=
retry
|
|
!
localTimestamp
?
undefined
:
"
{
localTimestamp
}
"
;
lazy
.
console
.
debug
(
{
this
.
identifier
}
Fetch
changes
from
server
(
expected
=
{
expectedTimestamp
}
since
=
{
since
}
)
)
;
const
{
metadata
remoteTimestamp
remoteRecords
}
=
await
this
.
_fetchChangeset
(
expectedTimestamp
since
)
;
const
syncResult
=
{
current
:
localRecords
created
:
[
]
updated
:
[
]
deleted
:
[
]
}
;
lazy
.
console
.
debug
(
{
this
.
identifier
}
local
timestamp
:
{
localTimestamp
}
remote
:
{
remoteTimestamp
}
)
;
if
(
localTimestamp
&
&
remoteTimestamp
<
localTimestamp
)
{
return
syncResult
;
}
await
this
.
db
.
importChanges
(
metadata
remoteTimestamp
remoteRecords
{
clear
:
retry
}
)
;
const
newLocal
=
await
this
.
db
.
list
(
)
;
const
newRecords
=
newLocal
.
map
(
r
=
>
this
.
_cleanLocalFields
(
r
)
)
;
if
(
this
.
verifySignature
)
{
try
{
await
this
.
_validateCollectionSignature
(
newRecords
remoteTimestamp
metadata
)
;
}
catch
(
e
)
{
lazy
.
console
.
error
(
{
this
.
identifier
}
Signature
failed
{
retry
?
"
again
"
:
"
"
}
{
e
}
)
;
if
(
!
(
e
instanceof
InvalidSignatureError
)
)
{
throw
e
;
}
let
localTrustworthy
=
false
;
lazy
.
console
.
debug
(
{
this
.
identifier
}
verify
data
before
sync
)
;
try
{
await
this
.
_validateCollectionSignature
(
localRecords
localTimestamp
localMetadata
)
;
localTrustworthy
=
true
;
}
catch
(
sigerr
)
{
if
(
!
(
sigerr
instanceof
InvalidSignatureError
)
)
{
throw
sigerr
;
}
lazy
.
console
.
debug
(
{
this
.
identifier
}
previous
data
was
invalid
)
;
}
if
(
!
localTrustworthy
&
&
!
retry
)
{
lazy
.
console
.
debug
(
{
this
.
identifier
}
clear
local
data
)
;
await
this
.
db
.
clear
(
)
;
lazy
.
console
.
error
(
{
this
.
identifier
}
local
data
was
corrupted
)
;
throw
new
CorruptedDataError
(
this
.
identifier
)
;
}
else
if
(
retry
)
{
if
(
localTrustworthy
)
{
await
this
.
db
.
importChanges
(
localMetadata
localTimestamp
localRecords
{
clear
:
true
}
)
;
}
else
{
const
imported
=
await
this
.
_importJSONDump
(
)
;
if
(
imported
<
0
)
{
await
this
.
db
.
clear
(
)
;
}
}
}
throw
e
;
}
}
else
{
lazy
.
console
.
warn
(
{
this
.
identifier
}
has
signature
disabled
)
;
}
if
(
this
.
hasListeners
(
"
sync
"
)
)
{
syncResult
.
current
=
newRecords
;
const
oldById
=
new
Map
(
localRecords
.
map
(
e
=
>
[
e
.
id
e
]
)
)
;
for
(
const
r
of
newRecords
)
{
const
old
=
oldById
.
get
(
r
.
id
)
;
if
(
old
)
{
oldById
.
delete
(
r
.
id
)
;
if
(
r
.
last_modified
!
=
old
.
last_modified
)
{
syncResult
.
updated
.
push
(
{
old
new
:
r
}
)
;
}
}
else
{
syncResult
.
created
.
push
(
r
)
;
}
}
syncResult
.
deleted
=
syncResult
.
deleted
.
concat
(
Array
.
from
(
oldById
.
values
(
)
)
)
;
lazy
.
console
.
debug
(
{
this
.
identifier
}
{
syncResult
.
created
.
length
}
created
.
{
syncResult
.
updated
.
length
}
updated
.
{
syncResult
.
deleted
.
length
}
deleted
.
)
;
}
return
syncResult
;
}
async
_fetchChangeset
(
expectedTimestamp
since
)
{
const
client
=
this
.
httpClient
(
)
;
const
{
metadata
timestamp
:
remoteTimestamp
changes
:
remoteRecords
}
=
await
client
.
execute
(
{
path
:
/
buckets
/
{
this
.
bucketName
}
/
collections
/
{
this
.
collectionName
}
/
changeset
}
{
query
:
{
_expected
:
expectedTimestamp
_since
:
since
}
}
)
;
return
{
remoteTimestamp
metadata
remoteRecords
}
;
}
async
_filterSyncResult
(
syncResult
)
{
const
{
current
:
allData
created
:
allCreated
updated
:
allUpdated
deleted
:
allDeleted
}
=
syncResult
;
const
[
created
deleted
updatedFiltered
]
=
await
Promise
.
all
(
[
allCreated
allDeleted
allUpdated
.
map
(
e
=
>
e
.
new
)
]
.
map
(
this
.
_filterEntries
.
bind
(
this
)
)
)
;
const
updatedFilteredIds
=
new
Set
(
updatedFiltered
.
map
(
e
=
>
e
.
id
)
)
;
const
updated
=
allUpdated
.
filter
(
(
{
new
:
{
id
}
}
)
=
>
updatedFilteredIds
.
has
(
id
)
)
;
if
(
!
created
.
length
&
&
!
updated
.
length
&
&
!
deleted
.
length
)
{
return
null
;
}
const
current
=
await
this
.
_filterEntries
(
allData
)
;
return
{
created
updated
deleted
current
}
;
}
async
_filterEntries
(
data
)
{
if
(
!
this
.
filterFunc
)
{
return
data
;
}
const
environment
=
cacheProxy
(
lazy
.
ClientEnvironmentBase
)
;
const
dataPromises
=
data
.
map
(
e
=
>
this
.
filterFunc
(
e
environment
)
)
;
const
results
=
await
Promise
.
all
(
dataPromises
)
;
return
results
.
filter
(
Boolean
)
;
}
_cleanLocalFields
(
record
)
{
const
keys
=
[
"
_status
"
]
.
concat
(
this
.
localFields
)
;
const
result
=
{
.
.
.
record
}
;
for
(
const
key
of
keys
)
{
delete
result
[
key
]
;
}
return
result
;
}
}
