const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
syncUsername
"
"
services
.
sync
.
username
"
)
;
function
WeaveService
(
)
{
this
.
wrappedJSObject
=
this
;
this
.
ready
=
false
;
}
WeaveService
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
74b89fb0
-
f200
-
4ae8
-
a3ec
-
dd164117f6de
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
get
Weave
(
)
{
const
{
Weave
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
return
Weave
;
}
ensureLoaded
(
)
{
this
.
Weave
.
Service
;
}
whenLoaded
(
)
{
if
(
this
.
ready
)
{
return
Promise
.
resolve
(
)
;
}
let
onReadyPromise
=
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
onReady
(
)
{
Services
.
obs
.
removeObserver
(
onReady
"
weave
:
service
:
ready
"
)
;
resolve
(
)
;
}
"
weave
:
service
:
ready
"
)
;
}
)
;
this
.
ensureLoaded
(
)
;
return
onReadyPromise
;
}
init
(
)
{
this
.
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
this
.
timer
.
initWithCallback
(
{
notify
:
(
)
=
>
{
let
isConfigured
=
false
;
if
(
this
.
enabled
)
{
var
{
Weave
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
isConfigured
=
Weave
.
Status
.
checkSetup
(
)
!
=
Weave
.
CLIENT_NOT_CONFIGURED
;
}
if
(
isConfigured
)
{
this
.
ensureLoaded
(
)
;
}
}
}
10000
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
get
enabled
(
)
{
return
(
!
!
syncUsername
&
&
Services
.
prefs
.
getBoolPref
(
"
identity
.
fxaccounts
.
enabled
"
)
)
;
}
}
;
function
AboutWeaveLog
(
)
{
}
AboutWeaveLog
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
d28f8a0b
-
95da
-
48f4
-
b712
-
caf37097be41
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAboutModule
Ci
.
nsISupportsWeakReference
]
)
getURIFlags
(
aURI
)
{
return
0
;
}
newChannel
(
aURI
aLoadInfo
)
{
let
dir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
weave
"
"
logs
"
]
true
)
;
let
uri
=
Services
.
io
.
newFileURI
(
dir
)
;
let
channel
=
Services
.
io
.
newChannelFromURIWithLoadInfo
(
uri
aLoadInfo
)
;
channel
.
originalURI
=
aURI
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
aLoadInfo
.
originAttributes
)
;
channel
.
owner
=
principal
;
return
channel
;
}
}
;
var
EXPORTED_SYMBOLS
=
[
"
WeaveService
"
"
AboutWeaveLog
"
]
;
