"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SyncAuthManager
"
"
AuthenticationError
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
{
Async
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
async
.
js
"
)
;
const
{
TokenServerClient
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
tokenserverclient
.
js
"
)
;
const
{
CryptoUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
crypto
/
utils
.
js
"
)
;
const
{
Svc
Utils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
const
{
LOGIN_FAILED_LOGIN_REJECTED
LOGIN_FAILED_NETWORK_ERROR
LOGIN_FAILED_NO_USERNAME
LOGIN_SUCCEEDED
MASTER_PASSWORD_LOCKED
STATUS_OK
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
constants
.
js
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
Weave
"
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
BulkKeyBundle
"
"
resource
:
/
/
services
-
sync
/
keys
.
js
"
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
fxAccounts
"
(
)
=
>
{
return
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
.
getFxAccountsSingleton
(
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
log
"
function
(
)
{
let
log
=
Log
.
repository
.
getLogger
(
"
Sync
.
SyncAuthManager
"
)
;
log
.
manageLevelFromPref
(
"
services
.
sync
.
log
.
logger
.
identity
"
)
;
return
log
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
IGNORE_CACHED_AUTH_CREDENTIALS
"
"
services
.
sync
.
debug
.
ignoreCachedAuthCredentials
"
)
;
var
fxAccountsCommon
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
)
;
const
SCOPE_OLD_SYNC
=
fxAccountsCommon
.
SCOPE_OLD_SYNC
;
const
OBSERVER_TOPICS
=
[
fxAccountsCommon
.
ONLOGIN_NOTIFICATION
fxAccountsCommon
.
ONVERIFIED_NOTIFICATION
fxAccountsCommon
.
ONLOGOUT_NOTIFICATION
fxAccountsCommon
.
ON_ACCOUNT_STATE_CHANGE_NOTIFICATION
"
weave
:
connected
"
]
;
function
AuthenticationError
(
details
source
)
{
this
.
details
=
details
;
this
.
source
=
source
;
}
AuthenticationError
.
prototype
=
{
toString
(
)
{
return
"
AuthenticationError
(
"
+
this
.
details
+
"
)
"
;
}
}
;
function
SyncAuthManager
(
)
{
this
.
_fxaService
=
lazy
.
fxAccounts
;
this
.
_tokenServerClient
=
new
TokenServerClient
(
)
;
this
.
_tokenServerClient
.
observerPrefix
=
"
weave
:
service
"
;
this
.
_log
=
lazy
.
log
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
_username
"
"
services
.
sync
.
username
"
)
;
this
.
asyncObserver
=
Async
.
asyncObserver
(
this
lazy
.
log
)
;
for
(
let
topic
of
OBSERVER_TOPICS
)
{
Services
.
obs
.
addObserver
(
this
.
asyncObserver
topic
)
;
}
}
SyncAuthManager
.
prototype
=
{
_fxaService
:
null
_tokenServerClient
:
null
_token
:
null
_userUid
:
null
hashedUID
(
)
{
const
id
=
this
.
_fxaService
.
telemetry
.
getSanitizedUID
(
)
;
if
(
!
id
)
{
throw
new
Error
(
"
hashedUID
:
Don
'
t
seem
to
have
previously
seen
a
token
"
)
;
}
return
id
;
}
hashedDeviceID
(
deviceID
)
{
const
id
=
this
.
_fxaService
.
telemetry
.
sanitizeDeviceId
(
deviceID
)
;
if
(
!
id
)
{
throw
new
Error
(
"
hashedUID
:
Don
'
t
seem
to
have
previously
seen
a
token
"
)
;
}
return
id
;
}
get
telemetryNodeType
(
)
{
return
this
.
_token
&
&
this
.
_token
.
node_type
?
this
.
_token
.
node_type
:
null
;
}
finalize
(
)
{
for
(
let
topic
of
OBSERVER_TOPICS
)
{
Services
.
obs
.
removeObserver
(
this
.
asyncObserver
topic
)
;
}
this
.
resetCredentials
(
)
;
this
.
_userUid
=
null
;
}
async
getSignedInUser
(
)
{
let
data
=
await
this
.
_fxaService
.
getSignedInUser
(
)
;
if
(
!
data
)
{
this
.
_userUid
=
null
;
return
null
;
}
if
(
this
.
_userUid
=
=
null
)
{
this
.
_userUid
=
data
.
uid
;
}
else
if
(
this
.
_userUid
!
=
data
.
uid
)
{
throw
new
Error
(
"
The
signed
in
user
has
changed
"
)
;
}
return
data
;
}
logout
(
)
{
this
.
_token
=
null
;
}
async
observe
(
subject
topic
data
)
{
this
.
_log
.
debug
(
"
observed
"
+
topic
)
;
if
(
!
this
.
username
)
{
this
.
_log
.
info
(
"
Sync
is
not
configured
so
ignoring
the
notification
"
)
;
return
;
}
switch
(
topic
)
{
case
"
weave
:
connected
"
:
case
fxAccountsCommon
.
ONLOGIN_NOTIFICATION
:
{
this
.
_log
.
info
(
"
Sync
has
been
connected
to
a
logged
in
user
"
)
;
this
.
resetCredentials
(
)
;
let
accountData
=
await
this
.
getSignedInUser
(
)
;
if
(
!
accountData
.
verified
)
{
this
.
_log
.
info
(
"
The
user
is
not
verified
"
)
;
break
;
}
}
case
fxAccountsCommon
.
ONVERIFIED_NOTIFICATION
:
{
this
.
_log
.
info
(
"
The
user
became
verified
"
)
;
lazy
.
Weave
.
Status
.
login
=
LOGIN_SUCCEEDED
;
let
isFirstSync
=
!
lazy
.
Weave
.
Service
.
locked
&
&
!
Svc
.
Prefs
.
get
(
"
client
.
syncID
"
null
)
;
if
(
isFirstSync
)
{
this
.
_log
.
info
(
"
Doing
initial
sync
actions
"
)
;
Svc
.
Prefs
.
set
(
"
firstSync
"
"
resetClient
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
weave
:
service
:
setup
-
complete
"
)
;
}
if
(
!
Svc
.
Prefs
.
get
(
"
testing
.
tps
"
false
)
)
{
lazy
.
Weave
.
Service
.
sync
(
{
why
:
"
login
"
}
)
;
}
break
;
}
case
fxAccountsCommon
.
ONLOGOUT_NOTIFICATION
:
lazy
.
Weave
.
Service
.
startOver
(
)
.
then
(
(
)
=
>
{
this
.
_log
.
trace
(
"
startOver
completed
"
)
;
}
)
.
catch
(
err
=
>
{
this
.
_log
.
warn
(
"
Failed
to
reset
sync
"
err
)
;
}
)
;
break
;
case
fxAccountsCommon
.
ON_ACCOUNT_STATE_CHANGE_NOTIFICATION
:
this
.
resetCredentials
(
)
;
break
;
}
}
_now
(
)
{
return
this
.
_fxaService
.
_internal
.
now
(
)
;
}
get
_localtimeOffsetMsec
(
)
{
return
this
.
_fxaService
.
_internal
.
localtimeOffsetMsec
;
}
get
syncKeyBundle
(
)
{
return
this
.
_syncKeyBundle
;
}
get
username
(
)
{
return
this
.
_username
;
}
set
username
(
value
)
{
throw
new
Error
(
"
don
'
t
set
the
username
"
)
;
}
resetCredentials
(
)
{
this
.
_syncKeyBundle
=
null
;
this
.
_token
=
null
;
lazy
.
Weave
.
Service
.
clusterURL
=
null
;
}
prefetchMigrationSentinel
(
service
)
{
}
async
unlockAndVerifyAuthState
(
)
{
let
data
=
await
this
.
getSignedInUser
(
)
;
const
fxa
=
this
.
_fxaService
;
if
(
!
data
)
{
lazy
.
log
.
debug
(
"
unlockAndVerifyAuthState
has
no
FxA
user
"
)
;
return
LOGIN_FAILED_NO_USERNAME
;
}
if
(
!
this
.
username
)
{
lazy
.
log
.
debug
(
"
unlockAndVerifyAuthState
finds
that
sync
isn
'
t
configured
"
)
;
return
LOGIN_FAILED_NO_USERNAME
;
}
if
(
!
data
.
verified
)
{
lazy
.
log
.
debug
(
"
unlockAndVerifyAuthState
has
an
unverified
user
"
)
;
return
LOGIN_FAILED_LOGIN_REJECTED
;
}
if
(
await
fxa
.
keys
.
canGetKeyForScope
(
SCOPE_OLD_SYNC
)
)
{
lazy
.
log
.
debug
(
"
unlockAndVerifyAuthState
already
has
(
or
can
fetch
)
sync
keys
"
)
;
return
STATUS_OK
;
}
if
(
!
Utils
.
ensureMPUnlocked
(
)
)
{
lazy
.
log
.
debug
(
"
unlockAndVerifyAuthState
:
user
declined
to
unlock
master
-
password
"
)
;
return
MASTER_PASSWORD_LOCKED
;
}
let
result
;
if
(
await
fxa
.
keys
.
canGetKeyForScope
(
SCOPE_OLD_SYNC
)
)
{
result
=
STATUS_OK
;
}
else
{
result
=
LOGIN_FAILED_LOGIN_REJECTED
;
}
lazy
.
log
.
debug
(
"
unlockAndVerifyAuthState
re
-
fetched
credentials
and
is
returning
"
result
)
;
return
result
;
}
_hasValidToken
(
)
{
if
(
lazy
.
IGNORE_CACHED_AUTH_CREDENTIALS
)
{
return
false
;
}
if
(
!
this
.
_token
)
{
return
false
;
}
if
(
this
.
_token
.
expiration
<
this
.
_now
(
)
)
{
return
false
;
}
return
true
;
}
get
_tokenServerUrl
(
)
{
let
url
=
Svc
.
Prefs
.
get
(
"
tokenServerURI
"
)
;
if
(
!
url
)
{
url
=
Services
.
prefs
.
getCharPref
(
"
identity
.
sync
.
tokenserver
.
uri
"
)
;
}
while
(
url
.
endsWith
(
"
/
"
)
)
{
url
=
url
.
slice
(
0
-
1
)
;
}
return
url
;
}
async
_fetchTokenForUser
(
)
{
const
fxa
=
this
.
_fxaService
;
if
(
!
(
await
fxa
.
keys
.
canGetKeyForScope
(
SCOPE_OLD_SYNC
)
)
)
{
this
.
_log
.
info
(
"
Unable
to
fetch
keys
(
master
-
password
locked
?
)
so
aborting
token
fetch
"
)
;
throw
new
Error
(
"
Can
'
t
fetch
a
token
as
we
can
'
t
get
keys
"
)
;
}
let
getToken
=
async
key
=
>
{
this
.
_log
.
info
(
"
Getting
a
sync
token
from
"
this
.
_tokenServerUrl
)
;
let
token
=
await
this
.
_fetchTokenUsingOAuth
(
key
)
;
this
.
_log
.
trace
(
"
Successfully
got
a
token
"
)
;
return
token
;
}
;
try
{
let
token
key
;
try
{
this
.
_log
.
info
(
"
Getting
sync
key
"
)
;
key
=
await
fxa
.
keys
.
getKeyForScope
(
SCOPE_OLD_SYNC
)
;
if
(
!
key
)
{
throw
new
Error
(
"
browser
does
not
have
the
sync
key
cannot
sync
"
)
;
}
token
=
await
getToken
(
key
)
;
}
catch
(
err
)
{
if
(
!
err
.
response
|
|
err
.
response
.
status
!
=
=
401
)
{
throw
err
;
}
this
.
_log
.
warn
(
"
Token
server
returned
401
retrying
token
fetch
with
fresh
credentials
"
)
;
key
=
await
fxa
.
keys
.
getKeyForScope
(
SCOPE_OLD_SYNC
)
;
token
=
await
getToken
(
key
)
;
}
token
.
expiration
=
this
.
_now
(
)
+
token
.
duration
*
1000
*
0
.
8
;
if
(
!
this
.
_syncKeyBundle
)
{
this
.
_syncKeyBundle
=
lazy
.
BulkKeyBundle
.
fromJWK
(
key
)
;
}
lazy
.
Weave
.
Status
.
login
=
LOGIN_SUCCEEDED
;
this
.
_token
=
token
;
return
token
;
}
catch
(
caughtErr
)
{
let
err
=
caughtErr
;
if
(
err
.
response
&
&
err
.
response
.
status
=
=
=
401
)
{
err
=
new
AuthenticationError
(
err
"
tokenserver
"
)
;
}
else
if
(
err
.
code
&
&
err
.
code
=
=
=
401
)
{
err
=
new
AuthenticationError
(
err
"
hawkclient
"
)
;
}
else
if
(
err
.
message
=
=
fxAccountsCommon
.
ERROR_AUTH_ERROR
)
{
err
=
new
AuthenticationError
(
err
"
fxaccounts
"
)
;
}
if
(
err
instanceof
AuthenticationError
)
{
this
.
_log
.
error
(
"
Authentication
error
in
_fetchTokenForUser
"
err
)
;
lazy
.
Weave
.
Status
.
login
=
LOGIN_FAILED_LOGIN_REJECTED
;
}
else
{
this
.
_log
.
error
(
"
Non
-
authentication
error
in
_fetchTokenForUser
"
err
)
;
lazy
.
Weave
.
Status
.
login
=
LOGIN_FAILED_NETWORK_ERROR
;
}
throw
err
;
}
}
async
_fetchTokenUsingOAuth
(
key
)
{
this
.
_log
.
debug
(
"
Getting
a
token
using
OAuth
"
)
;
const
fxa
=
this
.
_fxaService
;
const
ttl
=
fxAccountsCommon
.
OAUTH_TOKEN_FOR_SYNC_LIFETIME_SECONDS
;
const
accessToken
=
await
fxa
.
getOAuthToken
(
{
scope
:
SCOPE_OLD_SYNC
ttl
}
)
;
const
headers
=
{
"
X
-
KeyId
"
:
key
.
kid
}
;
return
this
.
_tokenServerClient
.
getTokenUsingOAuth
(
this
.
_tokenServerUrl
accessToken
headers
)
.
catch
(
async
err
=
>
{
if
(
err
.
response
&
&
err
.
response
.
status
=
=
=
401
)
{
await
fxa
.
removeCachedOAuthToken
(
{
token
:
accessToken
}
)
;
}
throw
err
;
}
)
;
}
async
_ensureValidToken
(
forceNewToken
=
false
)
{
let
signedInUser
=
await
this
.
getSignedInUser
(
)
;
if
(
!
signedInUser
)
{
throw
new
Error
(
"
no
user
is
logged
in
"
)
;
}
if
(
!
signedInUser
.
verified
)
{
throw
new
Error
(
"
user
is
not
verified
"
)
;
}
await
this
.
asyncObserver
.
promiseObserversComplete
(
)
;
if
(
!
forceNewToken
&
&
this
.
_hasValidToken
(
)
)
{
this
.
_log
.
trace
(
"
_ensureValidToken
already
has
one
"
)
;
return
this
.
_token
;
}
if
(
!
this
.
_ensureValidTokenPromise
)
{
this
.
_ensureValidTokenPromise
=
this
.
__ensureValidToken
(
)
.
finally
(
(
)
=
>
{
this
.
_ensureValidTokenPromise
=
null
;
}
)
;
}
return
this
.
_ensureValidTokenPromise
;
}
async
__ensureValidToken
(
)
{
this
.
_token
=
null
;
try
{
let
token
=
await
this
.
_fetchTokenForUser
(
)
;
this
.
_token
=
token
;
this
.
_fxaService
.
telemetry
.
_setHashedUID
(
token
.
hashed_fxa_uid
)
;
return
token
;
}
finally
{
Services
.
obs
.
notifyObservers
(
null
"
weave
:
service
:
login
:
got
-
hashed
-
id
"
)
;
}
}
getResourceAuthenticator
(
)
{
return
this
.
_getAuthenticationHeader
.
bind
(
this
)
;
}
async
_getAuthenticationHeader
(
httpObject
method
)
{
try
{
await
this
.
_ensureValidToken
(
)
;
}
catch
(
ex
)
{
this
.
_log
.
error
(
"
Failed
to
fetch
a
token
for
authentication
"
ex
)
;
return
null
;
}
if
(
!
this
.
_token
)
{
return
null
;
}
let
credentials
=
{
id
:
this
.
_token
.
id
key
:
this
.
_token
.
key
}
;
method
=
method
|
|
httpObject
.
method
;
let
options
=
{
now
:
this
.
_now
(
)
localtimeOffsetMsec
:
this
.
_localtimeOffsetMsec
credentials
}
;
let
headerValue
=
await
CryptoUtils
.
computeHAWK
(
httpObject
.
uri
method
options
)
;
return
{
headers
:
{
authorization
:
headerValue
.
field
}
}
;
}
async
setCluster
(
)
{
let
cluster
=
await
this
.
_findCluster
(
)
;
this
.
_log
.
debug
(
"
Cluster
value
=
"
+
cluster
)
;
if
(
cluster
=
=
null
)
{
return
false
;
}
cluster
=
cluster
.
toString
(
)
;
if
(
cluster
=
=
lazy
.
Weave
.
Service
.
clusterURL
)
{
return
false
;
}
this
.
_log
.
debug
(
"
Setting
cluster
to
"
+
cluster
)
;
lazy
.
Weave
.
Service
.
clusterURL
=
cluster
;
return
true
;
}
async
_findCluster
(
)
{
try
{
let
forceNewToken
=
false
;
if
(
lazy
.
Weave
.
Service
.
clusterURL
)
{
this
.
_log
.
debug
(
"
_findCluster
has
a
pre
-
existing
clusterURL
so
fetching
a
new
token
token
"
)
;
forceNewToken
=
true
;
}
let
token
=
await
this
.
_ensureValidToken
(
forceNewToken
)
;
let
endpoint
=
token
.
endpoint
;
if
(
!
endpoint
.
endsWith
(
"
/
"
)
)
{
endpoint
+
=
"
/
"
;
}
this
.
_log
.
debug
(
"
_findCluster
returning
"
+
endpoint
)
;
return
endpoint
;
}
catch
(
err
)
{
this
.
_log
.
info
(
"
Failed
to
fetch
the
cluster
URL
"
err
)
;
if
(
err
instanceof
AuthenticationError
)
{
return
null
;
}
throw
err
;
}
}
}
;
