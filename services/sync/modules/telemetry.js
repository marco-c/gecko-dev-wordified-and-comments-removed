"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
this
.
EXPORTED_SYMBOLS
=
[
"
SyncTelemetry
"
]
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
browserid_identity
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
status
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
resource
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
observers
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
async
.
js
"
)
;
let
constants
=
{
}
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
constants
.
js
"
constants
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TelemetryController
"
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TelemetryUtils
"
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
Telemetry
"
"
mozilla
.
org
/
base
/
telemetry
;
1
"
"
nsITelemetry
"
)
;
const
log
=
Log
.
repository
.
getLogger
(
"
Sync
.
Telemetry
"
)
;
const
TOPICS
=
[
"
profile
-
before
-
change
"
"
weave
:
service
:
sync
:
start
"
"
weave
:
service
:
sync
:
finish
"
"
weave
:
service
:
sync
:
error
"
"
weave
:
engine
:
sync
:
start
"
"
weave
:
engine
:
sync
:
finish
"
"
weave
:
engine
:
sync
:
error
"
"
weave
:
engine
:
sync
:
applied
"
"
weave
:
engine
:
sync
:
uploaded
"
"
weave
:
engine
:
validate
:
finish
"
"
weave
:
engine
:
validate
:
error
"
"
weave
:
telemetry
:
event
"
]
;
const
PING_FORMAT_VERSION
=
1
;
const
EMPTY_UID
=
"
0
"
.
repeat
(
32
)
;
const
ENGINES
=
new
Set
(
[
"
addons
"
"
bookmarks
"
"
clients
"
"
forms
"
"
history
"
"
passwords
"
"
prefs
"
"
tabs
"
"
extension
-
storage
"
]
)
;
const
reProfileDir
=
new
RegExp
(
OS
.
Constants
.
Path
.
profileDir
.
replace
(
/
[
.
*
+
?
^
{
}
(
)
|
[
\
]
\
\
]
/
g
"
\
\
&
"
)
"
gi
"
)
;
function
tryGetMonotonicTimestamp
(
)
{
try
{
return
Telemetry
.
msSinceProcessStart
(
)
;
}
catch
(
e
)
{
log
.
warn
(
"
Unable
to
get
a
monotonic
timestamp
!
"
)
;
return
-
1
;
}
}
function
timeDeltaFrom
(
monotonicStartTime
)
{
let
now
=
tryGetMonotonicTimestamp
(
)
;
if
(
monotonicStartTime
!
=
=
-
1
&
&
now
!
=
=
-
1
)
{
return
Math
.
round
(
now
-
monotonicStartTime
)
;
}
return
-
1
;
}
function
validateTelemetryEvent
(
eventDetails
)
{
let
{
object
method
value
extra
}
=
eventDetails
;
if
(
typeof
method
!
=
"
string
"
|
|
typeof
object
!
=
"
string
"
|
|
(
value
&
&
typeof
value
!
=
"
string
"
)
|
|
(
extra
&
&
typeof
extra
!
=
"
object
"
)
)
{
log
.
warn
(
"
Invalid
event
parameters
-
wrong
types
"
eventDetails
)
;
return
false
;
}
if
(
method
.
length
>
20
|
|
object
.
length
>
20
|
|
(
value
&
&
value
.
length
>
80
)
)
{
log
.
warn
(
"
Invalid
event
parameters
-
wrong
lengths
"
eventDetails
)
;
return
false
;
}
if
(
extra
)
{
if
(
Object
.
keys
(
extra
)
.
length
>
10
)
{
log
.
warn
(
"
Invalid
event
parameters
-
too
many
extra
keys
"
eventDetails
)
;
return
false
;
}
for
(
let
[
ename
evalue
]
of
Object
.
entries
(
extra
)
)
{
if
(
typeof
ename
!
=
"
string
"
|
|
ename
.
length
>
15
|
|
typeof
evalue
!
=
"
string
"
|
|
evalue
.
length
>
85
)
{
log
.
warn
(
Invalid
event
parameters
:
extra
item
"
{
ename
}
is
invalid
eventDetails
)
;
return
false
;
}
}
}
return
true
;
}
class
EngineRecord
{
constructor
(
name
)
{
this
.
startTime
=
tryGetMonotonicTimestamp
(
)
;
this
.
name
=
name
;
}
toJSON
(
)
{
let
result
=
Object
.
assign
(
{
}
this
)
;
delete
result
.
startTime
;
return
result
;
}
finished
(
error
)
{
let
took
=
timeDeltaFrom
(
this
.
startTime
)
;
if
(
took
>
0
)
{
this
.
took
=
took
;
}
if
(
error
)
{
this
.
failureReason
=
SyncTelemetry
.
transformError
(
error
)
;
}
}
recordApplied
(
counts
)
{
if
(
this
.
incoming
)
{
log
.
error
(
Incoming
records
applied
multiple
times
for
engine
{
this
.
name
}
!
)
;
return
;
}
if
(
this
.
name
=
=
=
"
clients
"
&
&
!
counts
.
failed
)
{
return
;
}
let
incomingData
=
{
}
;
let
properties
=
[
"
applied
"
"
failed
"
"
newFailed
"
"
reconciled
"
]
;
for
(
let
property
of
properties
)
{
if
(
counts
[
property
]
)
{
incomingData
[
property
]
=
counts
[
property
]
;
this
.
incoming
=
incomingData
;
}
}
}
recordValidation
(
validationResult
)
{
if
(
this
.
validation
)
{
log
.
error
(
Multiple
validations
occurred
for
engine
{
this
.
name
}
!
)
;
return
;
}
let
{
problems
version
duration
recordCount
}
=
validationResult
;
let
validation
=
{
version
:
version
|
|
0
checked
:
recordCount
|
|
0
}
;
if
(
duration
>
0
)
{
validation
.
took
=
Math
.
round
(
duration
)
;
}
let
summarized
=
problems
.
getSummary
(
true
)
.
filter
(
(
{
count
}
)
=
>
count
>
0
)
;
if
(
summarized
.
length
)
{
validation
.
problems
=
summarized
;
}
this
.
validation
=
validation
;
}
recordValidationError
(
e
)
{
if
(
this
.
validation
)
{
log
.
error
(
Multiple
validations
occurred
for
engine
{
this
.
name
}
!
)
;
return
;
}
this
.
validation
=
{
failureReason
:
SyncTelemetry
.
transformError
(
e
)
}
;
}
recordUploaded
(
counts
)
{
if
(
counts
.
sent
|
|
counts
.
failed
)
{
if
(
!
this
.
outgoing
)
{
this
.
outgoing
=
[
]
;
}
this
.
outgoing
.
push
(
{
sent
:
counts
.
sent
|
|
undefined
failed
:
counts
.
failed
|
|
undefined
}
)
;
}
}
}
class
TelemetryRecord
{
constructor
(
allowedEngines
)
{
this
.
allowedEngines
=
allowedEngines
;
this
.
failureReason
=
undefined
;
this
.
uid
=
"
"
;
this
.
when
=
Date
.
now
(
)
;
this
.
startTime
=
tryGetMonotonicTimestamp
(
)
;
this
.
took
=
0
;
this
.
engines
=
[
]
;
this
.
currentEngine
=
null
;
}
toJSON
(
)
{
let
result
=
{
when
:
this
.
when
took
:
this
.
took
failureReason
:
this
.
failureReason
status
:
this
.
status
devices
:
this
.
devices
}
;
let
engines
=
[
]
;
for
(
let
engine
of
this
.
engines
)
{
engines
.
push
(
engine
.
toJSON
(
)
)
;
}
if
(
engines
.
length
>
0
)
{
result
.
engines
=
engines
;
}
return
result
;
}
finished
(
error
)
{
this
.
took
=
timeDeltaFrom
(
this
.
startTime
)
;
if
(
this
.
currentEngine
!
=
null
)
{
log
.
error
(
"
Finished
called
for
the
sync
before
the
current
engine
finished
"
)
;
this
.
currentEngine
.
finished
(
null
)
;
this
.
onEngineStop
(
this
.
currentEngine
.
name
)
;
}
if
(
error
)
{
this
.
failureReason
=
SyncTelemetry
.
transformError
(
error
)
;
}
let
includeDeviceInfo
=
false
;
try
{
this
.
uid
=
Weave
.
Service
.
identity
.
hashedUID
(
)
;
this
.
deviceID
=
Weave
.
Service
.
identity
.
hashedDeviceID
(
Weave
.
Service
.
clientsEngine
.
localID
)
;
includeDeviceInfo
=
true
;
}
catch
(
e
)
{
this
.
uid
=
EMPTY_UID
;
this
.
deviceID
=
undefined
;
}
if
(
includeDeviceInfo
)
{
let
remoteDevices
=
Weave
.
Service
.
clientsEngine
.
remoteClients
;
this
.
devices
=
remoteDevices
.
map
(
device
=
>
{
return
{
os
:
device
.
os
version
:
device
.
version
id
:
Weave
.
Service
.
identity
.
hashedDeviceID
(
device
.
id
)
}
;
}
)
;
}
for
(
let
engine
of
this
.
engines
)
{
let
status
=
Status
.
engines
[
engine
.
name
]
;
if
(
status
&
&
status
!
=
=
constants
.
ENGINE_SUCCEEDED
)
{
engine
.
status
=
status
;
}
}
let
statusObject
=
{
}
;
let
serviceStatus
=
Status
.
service
;
if
(
serviceStatus
&
&
serviceStatus
!
=
=
constants
.
STATUS_OK
)
{
statusObject
.
service
=
serviceStatus
;
this
.
status
=
statusObject
;
}
let
syncStatus
=
Status
.
sync
;
if
(
syncStatus
&
&
syncStatus
!
=
=
constants
.
SYNC_SUCCEEDED
)
{
statusObject
.
sync
=
syncStatus
;
this
.
status
=
statusObject
;
}
}
onEngineStart
(
engineName
)
{
if
(
this
.
_shouldIgnoreEngine
(
engineName
false
)
)
{
return
;
}
if
(
this
.
currentEngine
)
{
log
.
error
(
Being
told
that
engine
{
engineName
}
has
started
but
current
engine
{
this
.
currentEngine
.
name
}
hasn
'
t
stopped
)
;
}
this
.
currentEngine
=
new
EngineRecord
(
engineName
)
;
}
onEngineStop
(
engineName
error
)
{
if
(
this
.
_shouldIgnoreEngine
(
engineName
!
!
this
.
currentEngine
)
)
{
return
;
}
if
(
!
this
.
currentEngine
)
{
if
(
!
error
)
{
return
;
}
log
.
error
(
Error
triggered
on
{
engineName
}
when
no
current
engine
exists
:
{
error
}
)
;
this
.
currentEngine
=
new
EngineRecord
(
engineName
)
;
}
this
.
currentEngine
.
finished
(
error
)
;
this
.
engines
.
push
(
this
.
currentEngine
)
;
this
.
currentEngine
=
null
;
}
onEngineApplied
(
engineName
counts
)
{
if
(
this
.
_shouldIgnoreEngine
(
engineName
)
)
{
return
;
}
this
.
currentEngine
.
recordApplied
(
counts
)
;
}
onEngineValidated
(
engineName
validationData
)
{
if
(
this
.
_shouldIgnoreEngine
(
engineName
false
)
)
{
return
;
}
let
engine
=
this
.
engines
.
find
(
e
=
>
e
.
name
=
=
=
engineName
)
;
if
(
!
engine
&
&
this
.
currentEngine
&
&
engineName
=
=
=
this
.
currentEngine
.
name
)
{
engine
=
this
.
currentEngine
;
}
if
(
engine
)
{
engine
.
recordValidation
(
validationData
)
;
}
else
{
log
.
warn
(
Validation
event
triggered
for
engine
{
engineName
}
which
hasn
'
t
been
synced
!
)
;
}
}
onEngineValidateError
(
engineName
error
)
{
if
(
this
.
_shouldIgnoreEngine
(
engineName
false
)
)
{
return
;
}
let
engine
=
this
.
engines
.
find
(
e
=
>
e
.
name
=
=
=
engineName
)
;
if
(
!
engine
&
&
this
.
currentEngine
&
&
engineName
=
=
=
this
.
currentEngine
.
name
)
{
engine
=
this
.
currentEngine
;
}
if
(
engine
)
{
engine
.
recordValidationError
(
error
)
;
}
else
{
log
.
warn
(
Validation
failure
event
triggered
for
engine
{
engineName
}
which
hasn
'
t
been
synced
!
)
;
}
}
onEngineUploaded
(
engineName
counts
)
{
if
(
this
.
_shouldIgnoreEngine
(
engineName
)
)
{
return
;
}
this
.
currentEngine
.
recordUploaded
(
counts
)
;
}
_shouldIgnoreEngine
(
engineName
shouldBeCurrent
=
true
)
{
if
(
!
this
.
allowedEngines
.
has
(
engineName
)
)
{
log
.
info
(
Notification
for
engine
{
engineName
}
but
we
aren
'
t
recording
telemetry
for
it
)
;
return
true
;
}
if
(
shouldBeCurrent
)
{
if
(
!
this
.
currentEngine
|
|
engineName
!
=
this
.
currentEngine
.
name
)
{
log
.
error
(
Notification
for
engine
{
engineName
}
but
it
isn
'
t
current
)
;
return
true
;
}
}
return
false
;
}
}
function
cleanErrorMessage
(
error
)
{
error
=
error
.
replace
(
reProfileDir
"
[
profileDir
]
"
)
;
if
(
error
.
endsWith
(
"
is
not
a
valid
URL
.
"
)
)
{
error
=
"
<
URL
>
is
not
a
valid
URL
.
"
;
}
error
=
error
.
replace
(
/
\
S
+
:
\
S
+
/
g
"
<
URL
>
"
)
;
return
error
;
}
class
SyncTelemetryImpl
{
constructor
(
allowedEngines
)
{
log
.
level
=
Log
.
Level
[
Svc
.
Prefs
.
get
(
"
log
.
logger
.
telemetry
"
"
Trace
"
)
]
;
this
.
allowedEngines
=
allowedEngines
;
this
.
current
=
null
;
this
.
setupObservers
(
)
;
this
.
payloads
=
[
]
;
this
.
discarded
=
0
;
this
.
events
=
[
]
;
this
.
maxEventsCount
=
Svc
.
Prefs
.
get
(
"
telemetry
.
maxEventsCount
"
1000
)
;
this
.
maxPayloadCount
=
Svc
.
Prefs
.
get
(
"
telemetry
.
maxPayloadCount
"
)
;
this
.
submissionInterval
=
Svc
.
Prefs
.
get
(
"
telemetry
.
submissionInterval
"
)
*
1000
;
this
.
lastSubmissionTime
=
Telemetry
.
msSinceProcessStart
(
)
;
this
.
lastUID
=
EMPTY_UID
;
this
.
lastDeviceID
=
undefined
;
let
sessionStartDate
=
Services
.
startup
.
getStartupInfo
(
)
.
main
;
this
.
sessionStartDate
=
TelemetryUtils
.
toLocalTimeISOString
(
TelemetryUtils
.
truncateToHours
(
sessionStartDate
)
)
;
}
getPingJSON
(
reason
)
{
return
{
why
:
reason
discarded
:
this
.
discarded
|
|
undefined
version
:
PING_FORMAT_VERSION
syncs
:
this
.
payloads
.
slice
(
)
uid
:
this
.
lastUID
deviceID
:
this
.
lastDeviceID
sessionStartDate
:
this
.
sessionStartDate
events
:
this
.
events
.
length
=
=
0
?
undefined
:
this
.
events
}
;
}
finish
(
reason
)
{
let
result
=
this
.
getPingJSON
(
reason
)
;
this
.
payloads
=
[
]
;
this
.
discarded
=
0
;
this
.
events
=
[
]
;
this
.
submit
(
result
)
;
}
setupObservers
(
)
{
for
(
let
topic
of
TOPICS
)
{
Observers
.
add
(
topic
this
this
)
;
}
}
shutdown
(
)
{
this
.
finish
(
"
shutdown
"
)
;
for
(
let
topic
of
TOPICS
)
{
Observers
.
remove
(
topic
this
this
)
;
}
}
submit
(
record
)
{
if
(
Services
.
prefs
.
prefHasUserValue
(
"
identity
.
sync
.
tokenserver
.
uri
"
)
)
{
log
.
trace
(
Not
sending
telemetry
ping
for
self
-
hosted
Sync
user
)
;
return
false
;
}
if
(
record
.
syncs
.
length
)
{
log
.
trace
(
submitting
{
record
.
syncs
.
length
}
sync
record
(
s
)
to
telemetry
)
;
TelemetryController
.
submitExternalPing
(
"
sync
"
record
)
;
return
true
;
}
return
false
;
}
onSyncStarted
(
)
{
if
(
this
.
current
)
{
log
.
warn
(
"
Observed
weave
:
service
:
sync
:
start
but
we
'
re
already
recording
a
sync
!
"
)
;
this
.
current
=
null
;
}
this
.
current
=
new
TelemetryRecord
(
this
.
allowedEngines
)
;
}
_checkCurrent
(
topic
)
{
if
(
!
this
.
current
)
{
log
.
warn
(
Observed
notification
{
topic
}
but
no
current
sync
is
being
recorded
.
)
;
return
false
;
}
return
true
;
}
shouldSubmitForIDChange
(
newUID
newDeviceID
)
{
if
(
newUID
!
=
EMPTY_UID
&
&
this
.
lastUID
!
=
EMPTY_UID
)
{
return
newUID
!
=
this
.
lastUID
;
}
if
(
newDeviceID
&
&
this
.
lastDeviceID
)
{
return
newDeviceID
!
=
this
.
lastDeviceID
;
}
return
false
;
}
onSyncFinished
(
error
)
{
if
(
!
this
.
current
)
{
log
.
warn
(
"
onSyncFinished
but
we
aren
'
t
recording
"
)
;
return
;
}
this
.
current
.
finished
(
error
)
;
if
(
this
.
payloads
.
length
)
{
if
(
this
.
shouldSubmitForIDChange
(
this
.
current
.
uid
this
.
current
.
deviceID
)
)
{
log
.
info
(
"
Early
submission
of
sync
telemetry
due
to
changed
IDs
"
)
;
this
.
finish
(
"
idchange
"
)
;
this
.
lastSubmissionTime
=
Telemetry
.
msSinceProcessStart
(
)
;
}
}
if
(
this
.
current
.
uid
!
=
=
EMPTY_UID
)
{
this
.
lastUID
=
this
.
current
.
uid
;
}
if
(
this
.
current
.
deviceID
)
{
this
.
lastDeviceID
=
this
.
current
.
deviceID
;
}
if
(
this
.
payloads
.
length
<
this
.
maxPayloadCount
)
{
this
.
payloads
.
push
(
this
.
current
.
toJSON
(
)
)
;
}
else
{
+
+
this
.
discarded
;
}
this
.
current
=
null
;
if
(
(
Telemetry
.
msSinceProcessStart
(
)
-
this
.
lastSubmissionTime
)
>
this
.
submissionInterval
)
{
this
.
finish
(
"
schedule
"
)
;
this
.
lastSubmissionTime
=
Telemetry
.
msSinceProcessStart
(
)
;
}
}
_recordEvent
(
eventDetails
)
{
if
(
this
.
events
.
length
>
=
this
.
maxEventsCount
)
{
log
.
warn
(
"
discarding
event
-
already
queued
our
maximum
"
eventDetails
)
;
return
;
}
if
(
!
validateTelemetryEvent
(
eventDetails
)
)
{
return
;
}
log
.
debug
(
"
recording
event
"
eventDetails
)
;
let
{
object
method
value
extra
}
=
eventDetails
;
if
(
extra
&
&
AsyncResource
.
serverTime
&
&
!
extra
.
serverTime
)
{
extra
.
serverTime
=
String
(
AsyncResource
.
serverTime
)
;
}
let
category
=
"
sync
"
;
let
ts
=
Math
.
floor
(
tryGetMonotonicTimestamp
(
)
)
;
let
event
=
[
ts
category
method
object
]
;
if
(
value
)
{
event
.
push
(
value
)
;
if
(
extra
)
{
event
.
push
(
extra
)
;
}
}
else
if
(
extra
)
{
event
.
push
(
null
)
;
event
.
push
(
extra
)
;
}
this
.
events
.
push
(
event
)
;
}
observe
(
subject
topic
data
)
{
log
.
trace
(
observed
{
topic
}
{
data
}
)
;
switch
(
topic
)
{
case
"
profile
-
before
-
change
"
:
this
.
shutdown
(
)
;
break
;
case
"
weave
:
service
:
sync
:
start
"
:
this
.
onSyncStarted
(
)
;
break
;
case
"
weave
:
service
:
sync
:
finish
"
:
if
(
this
.
_checkCurrent
(
topic
)
)
{
this
.
onSyncFinished
(
null
)
;
}
break
;
case
"
weave
:
service
:
sync
:
error
"
:
this
.
onSyncFinished
(
subject
|
|
"
Unknown
"
)
;
break
;
case
"
weave
:
engine
:
sync
:
start
"
:
if
(
this
.
_checkCurrent
(
topic
)
)
{
this
.
current
.
onEngineStart
(
data
)
;
}
break
;
case
"
weave
:
engine
:
sync
:
finish
"
:
if
(
this
.
_checkCurrent
(
topic
)
)
{
this
.
current
.
onEngineStop
(
data
null
)
;
}
break
;
case
"
weave
:
engine
:
sync
:
error
"
:
if
(
this
.
_checkCurrent
(
topic
)
)
{
this
.
current
.
onEngineStop
(
data
subject
|
|
"
Unknown
"
)
;
}
break
;
case
"
weave
:
engine
:
sync
:
applied
"
:
if
(
this
.
_checkCurrent
(
topic
)
)
{
this
.
current
.
onEngineApplied
(
data
subject
)
;
}
break
;
case
"
weave
:
engine
:
sync
:
uploaded
"
:
if
(
this
.
_checkCurrent
(
topic
)
)
{
this
.
current
.
onEngineUploaded
(
data
subject
)
;
}
break
;
case
"
weave
:
engine
:
validate
:
finish
"
:
if
(
this
.
_checkCurrent
(
topic
)
)
{
this
.
current
.
onEngineValidated
(
data
subject
)
;
}
break
;
case
"
weave
:
engine
:
validate
:
error
"
:
if
(
this
.
_checkCurrent
(
topic
)
)
{
this
.
current
.
onEngineValidateError
(
data
subject
|
|
"
Unknown
"
)
;
}
break
;
case
"
weave
:
telemetry
:
event
"
:
this
.
_recordEvent
(
subject
)
;
break
;
default
:
log
.
warn
(
unexpected
observer
topic
{
topic
}
)
;
break
;
}
}
transformError
(
error
)
{
if
(
Async
.
isShutdownException
(
error
)
)
{
return
{
name
:
"
shutdownerror
"
}
;
}
if
(
typeof
error
=
=
=
"
string
"
)
{
if
(
error
.
startsWith
(
"
error
.
"
)
)
{
return
{
name
:
"
othererror
"
error
}
;
}
error
=
cleanErrorMessage
(
error
)
;
return
{
name
:
"
unexpectederror
"
error
}
;
}
if
(
error
.
failureCode
)
{
return
{
name
:
"
othererror
"
error
:
error
.
failureCode
}
;
}
if
(
error
instanceof
AuthenticationError
)
{
return
{
name
:
"
autherror
"
from
:
error
.
source
}
;
}
if
(
error
instanceof
Ci
.
mozIStorageError
)
{
return
{
name
:
"
sqlerror
"
code
:
error
.
result
}
;
}
let
httpCode
=
error
.
status
|
|
(
error
.
response
&
&
error
.
response
.
status
)
|
|
error
.
code
;
if
(
httpCode
)
{
return
{
name
:
"
httperror
"
code
:
httpCode
}
;
}
if
(
error
.
result
)
{
return
{
name
:
"
nserror
"
code
:
error
.
result
}
;
}
return
{
name
:
"
unexpectederror
"
error
:
cleanErrorMessage
(
String
(
error
)
)
}
;
}
}
this
.
SyncTelemetry
=
new
SyncTelemetryImpl
(
ENGINES
)
;
