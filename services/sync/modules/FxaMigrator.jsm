"
use
strict
;
"
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
WeaveService
"
function
(
)
{
return
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsISupports
)
.
wrappedJSObject
;
}
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Weave
"
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
const
OBSERVER_STATE_CHANGE_TOPIC
=
"
fxa
-
migration
:
state
-
changed
"
;
const
OBSERVER_TOPICS
=
[
"
xpcom
-
shutdown
"
"
weave
:
eol
"
]
;
function
Migrator
(
)
{
this
.
log
.
level
=
Log
.
Level
.
Debug
;
for
(
let
topic
of
OBSERVER_TOPICS
)
{
Services
.
obs
.
addObserver
(
this
topic
false
)
;
}
}
Migrator
.
prototype
=
{
log
:
Log
.
repository
.
getLogger
(
"
Sync
.
SyncMigration
"
)
finalize
(
)
{
for
(
let
topic
of
OBSERVER_TOPICS
)
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
}
}
observe
(
subject
topic
data
)
{
this
.
log
.
debug
(
"
observed
"
+
topic
)
;
switch
(
topic
)
{
case
"
xpcom
-
shutdown
"
:
this
.
finalize
(
)
;
break
;
default
:
if
(
!
WeaveService
.
fxAccountsEnabled
)
{
this
.
log
.
info
(
"
Disconnecting
from
legacy
Sync
"
)
;
let
observe
;
Services
.
obs
.
addObserver
(
observe
=
(
)
=
>
{
this
.
log
.
info
(
"
observed
that
startOver
is
complete
"
)
;
Services
.
obs
.
removeObserver
(
observe
"
weave
:
service
:
start
-
over
:
finish
"
)
;
Services
.
obs
.
notifyObservers
(
null
OBSERVER_STATE_CHANGE_TOPIC
null
)
;
}
"
weave
:
service
:
start
-
over
:
finish
"
false
)
;
Weave
.
Service
.
startOver
(
)
;
}
}
}
get
learnMoreLink
(
)
{
try
{
var
url
=
Services
.
prefs
.
getCharPref
(
"
app
.
support
.
baseURL
"
)
;
}
catch
(
err
)
{
return
null
;
}
url
+
=
"
sync
-
upgrade
"
;
let
sb
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
weave
/
locale
/
services
/
sync
.
properties
"
)
;
return
{
text
:
sb
.
GetStringFromName
(
"
sync
.
eol
.
learnMore
.
label
"
)
href
:
Services
.
urlFormatter
.
formatURL
(
url
)
}
;
}
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
fxaMigrator
"
]
;
var
fxaMigrator
=
new
Migrator
(
)
;
