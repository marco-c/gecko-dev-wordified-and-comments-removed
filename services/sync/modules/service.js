this
.
EXPORTED_SYMBOLS
=
[
"
Service
"
]
;
const
CLUSTER_BACKOFF
=
5
*
60
*
1000
;
const
PBKDF2_KEY_BYTES
=
16
;
const
CRYPTO_COLLECTION
=
"
crypto
"
;
const
KEYS_WBO
=
"
keys
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
async
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
constants
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
/
clients
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
policies
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
record
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
resource
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
stages
/
enginesync
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
stages
/
declined
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
status
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
telemetry
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
function
getEngineModules
(
)
{
let
result
=
{
Addons
:
{
module
:
"
addons
.
js
"
symbol
:
"
AddonsEngine
"
}
Form
:
{
module
:
"
forms
.
js
"
symbol
:
"
FormEngine
"
}
History
:
{
module
:
"
history
.
js
"
symbol
:
"
HistoryEngine
"
}
Password
:
{
module
:
"
passwords
.
js
"
symbol
:
"
PasswordEngine
"
}
Prefs
:
{
module
:
"
prefs
.
js
"
symbol
:
"
PrefsEngine
"
}
Tab
:
{
module
:
"
tabs
.
js
"
symbol
:
"
TabEngine
"
}
ExtensionStorage
:
{
module
:
"
extension
-
storage
.
js
"
symbol
:
"
ExtensionStorageEngine
"
}
}
;
if
(
Svc
.
Prefs
.
get
(
"
engine
.
addresses
.
available
"
false
)
)
{
result
.
Addresses
=
{
module
:
"
resource
:
/
/
formautofill
/
FormAutofillSync
.
jsm
"
symbol
:
"
AddressesEngine
"
}
;
}
if
(
Svc
.
Prefs
.
get
(
"
engine
.
creditcards
.
available
"
false
)
)
{
result
.
CreditCards
=
{
module
:
"
resource
:
/
/
formautofill
/
FormAutofillSync
.
jsm
"
symbol
:
"
CreditCardsEngine
"
}
;
}
if
(
Svc
.
Prefs
.
get
(
"
engine
.
bookmarks
.
buffer
"
false
)
)
{
result
.
Bookmarks
=
{
module
:
"
bookmarks
.
js
"
symbol
:
"
BufferedBookmarksEngine
"
}
;
}
else
{
result
.
Bookmarks
=
{
module
:
"
bookmarks
.
js
"
symbol
:
"
BookmarksEngine
"
}
;
}
return
result
;
}
XPCOMUtils
.
defineLazyGetter
(
this
"
browserSessionID
"
Utils
.
makeGUID
)
;
function
Sync11Service
(
)
{
this
.
_notify
=
Utils
.
notify
(
"
weave
:
service
:
"
)
;
Utils
.
defineLazyIDProperty
(
this
"
syncID
"
"
services
.
sync
.
client
.
syncID
"
)
;
}
Sync11Service
.
prototype
=
{
_lock
:
Utils
.
lock
_locked
:
false
_loggedIn
:
false
infoURL
:
null
storageURL
:
null
metaURL
:
null
cryptoKeyURL
:
null
_clusterURL
:
null
get
clusterURL
(
)
{
return
this
.
_clusterURL
|
|
"
"
;
}
set
clusterURL
(
value
)
{
if
(
value
!
=
null
&
&
typeof
value
!
=
"
string
"
)
{
throw
new
Error
(
"
cluster
must
be
a
string
got
"
+
(
typeof
value
)
)
;
}
this
.
_clusterURL
=
value
;
this
.
_updateCachedURLs
(
)
;
}
get
isLoggedIn
(
)
{
return
this
.
_loggedIn
;
}
get
locked
(
)
{
return
this
.
_locked
;
}
lock
:
function
lock
(
)
{
if
(
this
.
_locked
)
return
false
;
this
.
_locked
=
true
;
return
true
;
}
unlock
:
function
unlock
(
)
{
this
.
_locked
=
false
;
}
_catch
(
func
)
{
function
lockExceptions
(
ex
)
{
if
(
Utils
.
isLockException
(
ex
)
)
{
this
.
_log
.
info
(
"
Cannot
start
sync
:
already
syncing
?
"
)
;
}
}
return
Utils
.
catch
.
call
(
this
func
lockExceptions
)
;
}
get
userBaseURL
(
)
{
if
(
!
this
.
_clusterManager
)
{
return
null
;
}
return
this
.
_clusterManager
.
getUserBaseURL
(
)
;
}
_updateCachedURLs
:
function
_updateCachedURLs
(
)
{
if
(
!
this
.
clusterURL
)
{
this
.
infoURL
=
undefined
;
this
.
storageURL
=
undefined
;
this
.
metaURL
=
undefined
;
this
.
cryptoKeysURL
=
undefined
;
return
;
}
this
.
_log
.
debug
(
"
Caching
URLs
under
storage
user
base
:
"
+
this
.
userBaseURL
)
;
this
.
infoURL
=
this
.
userBaseURL
+
"
info
/
collections
"
;
this
.
storageURL
=
this
.
userBaseURL
+
"
storage
/
"
;
this
.
metaURL
=
this
.
storageURL
+
"
meta
/
global
"
;
this
.
cryptoKeysURL
=
this
.
storageURL
+
CRYPTO_COLLECTION
+
"
/
"
+
KEYS_WBO
;
}
_checkCrypto
:
function
_checkCrypto
(
)
{
let
ok
=
false
;
try
{
let
iv
=
Weave
.
Crypto
.
generateRandomIV
(
)
;
if
(
iv
.
length
=
=
24
)
ok
=
true
;
}
catch
(
e
)
{
this
.
_log
.
debug
(
"
Crypto
check
failed
:
"
+
e
)
;
}
return
ok
;
}
lastHMACEvent
:
0
async
handleHMACEvent
(
)
{
let
now
=
Date
.
now
(
)
;
if
(
(
now
-
this
.
lastHMACEvent
)
<
HMAC_EVENT_INTERVAL
)
return
false
;
this
.
_log
.
info
(
"
Bad
HMAC
event
detected
.
Attempting
recovery
"
+
"
or
signaling
to
other
clients
.
"
)
;
this
.
lastHMACEvent
=
now
;
let
cryptoKeys
=
new
CryptoWrapper
(
CRYPTO_COLLECTION
KEYS_WBO
)
;
try
{
let
cryptoResp
=
(
await
cryptoKeys
.
fetch
(
this
.
resource
(
this
.
cryptoKeysURL
)
)
)
.
response
;
let
cipherText
=
cryptoKeys
.
ciphertext
;
if
(
!
cryptoResp
.
success
)
{
this
.
_log
.
warn
(
"
Failed
to
download
keys
.
"
)
;
return
false
;
}
let
keysChanged
=
await
this
.
handleFetchedKeys
(
this
.
identity
.
syncKeyBundle
cryptoKeys
true
)
;
if
(
keysChanged
)
{
this
.
_log
.
info
(
"
Suggesting
retry
.
"
)
;
return
true
;
}
cryptoKeys
.
ciphertext
=
cipherText
;
cryptoKeys
.
cleartext
=
null
;
let
uploadResp
=
await
this
.
_uploadCryptoKeys
(
cryptoKeys
cryptoResp
.
obj
.
modified
)
;
if
(
uploadResp
.
success
)
{
this
.
_log
.
info
(
"
Successfully
re
-
uploaded
keys
.
Continuing
sync
.
"
)
;
}
else
{
this
.
_log
.
warn
(
"
Got
error
response
re
-
uploading
keys
.
"
+
"
Continuing
sync
;
let
'
s
try
again
later
.
"
)
;
}
return
false
;
}
catch
(
ex
)
{
this
.
_log
.
warn
(
"
Got
exception
fetching
and
handling
crypto
keys
.
"
+
"
Will
try
again
later
.
"
ex
)
;
return
false
;
}
}
async
handleFetchedKeys
(
syncKey
cryptoKeys
skipReset
)
{
let
wasBlank
=
this
.
collectionKeys
.
isClear
;
let
keysChanged
=
await
this
.
collectionKeys
.
updateContents
(
syncKey
cryptoKeys
)
;
if
(
keysChanged
&
&
!
wasBlank
)
{
this
.
_log
.
debug
(
"
Keys
changed
:
"
+
JSON
.
stringify
(
keysChanged
)
)
;
if
(
!
skipReset
)
{
this
.
_log
.
info
(
"
Resetting
client
to
reflect
key
change
.
"
)
;
if
(
keysChanged
.
length
)
{
await
this
.
resetClient
(
keysChanged
)
;
}
else
{
await
this
.
resetClient
(
)
;
}
this
.
_log
.
info
(
"
Downloaded
new
keys
client
reset
.
Proceeding
.
"
)
;
}
return
true
;
}
return
false
;
}
async
onStartup
(
)
{
this
.
status
=
Status
;
this
.
identity
=
Status
.
_authManager
;
this
.
collectionKeys
=
new
CollectionKeyManager
(
)
;
this
.
scheduler
=
new
SyncScheduler
(
this
)
;
this
.
errorHandler
=
new
ErrorHandler
(
this
)
;
this
.
_log
=
Log
.
repository
.
getLogger
(
"
Sync
.
Service
"
)
;
this
.
_log
.
manageLevelFromPref
(
"
services
.
sync
.
log
.
logger
.
service
.
main
"
)
;
this
.
_log
.
info
(
"
Loading
Weave
"
+
WEAVE_VERSION
)
;
this
.
_clusterManager
=
this
.
identity
.
createClusterManager
(
this
)
;
this
.
recordManager
=
new
RecordManager
(
this
)
;
this
.
enabled
=
true
;
await
this
.
_registerEngines
(
)
;
let
ua
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
http
"
]
.
getService
(
Ci
.
nsIHttpProtocolHandler
)
.
userAgent
;
this
.
_log
.
info
(
ua
)
;
if
(
!
this
.
_checkCrypto
(
)
)
{
this
.
enabled
=
false
;
this
.
_log
.
info
(
"
Could
not
load
the
Weave
crypto
component
.
Disabling
"
+
"
Weave
since
it
will
not
work
correctly
.
"
)
;
}
Svc
.
Obs
.
add
(
"
weave
:
service
:
setup
-
complete
"
this
)
;
Svc
.
Obs
.
add
(
"
sync
:
collection_changed
"
this
)
;
Svc
.
Obs
.
add
(
"
fxaccounts
:
device_disconnected
"
this
)
;
Services
.
prefs
.
addObserver
(
PREFS_BRANCH
+
"
engine
.
"
this
)
;
if
(
!
this
.
enabled
)
{
this
.
_log
.
info
(
"
Firefox
Sync
disabled
.
"
)
;
}
this
.
_updateCachedURLs
(
)
;
let
status
=
this
.
_checkSetup
(
)
;
if
(
status
!
=
STATUS_DISABLED
&
&
status
!
=
CLIENT_NOT_CONFIGURED
)
{
this
.
_startTracking
(
)
;
}
CommonUtils
.
nextTick
(
(
)
=
>
{
this
.
status
.
ready
=
true
;
let
xps
=
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
xps
.
ready
=
true
;
Svc
.
Obs
.
notify
(
"
weave
:
service
:
ready
"
)
;
}
)
;
}
_checkSetup
:
function
_checkSetup
(
)
{
if
(
!
this
.
enabled
)
{
return
this
.
status
.
service
=
STATUS_DISABLED
;
}
return
this
.
status
.
checkSetup
(
)
;
}
async
_registerEngines
(
)
{
this
.
engineManager
=
new
EngineManager
(
this
)
;
let
engineModules
=
getEngineModules
(
)
;
let
engines
=
[
]
;
if
(
Svc
.
Prefs
.
has
(
"
registerEngines
"
)
)
{
engines
=
Svc
.
Prefs
.
get
(
"
registerEngines
"
)
.
split
(
"
"
)
;
this
.
_log
.
info
(
"
Registering
custom
set
of
engines
"
engines
)
;
}
else
{
engines
=
Object
.
keys
(
engineModules
)
;
}
let
declined
=
[
]
;
let
pref
=
Svc
.
Prefs
.
get
(
"
declinedEngines
"
)
;
if
(
pref
)
{
declined
=
pref
.
split
(
"
"
)
;
}
let
clientsEngine
=
new
ClientEngine
(
this
)
;
await
clientsEngine
.
initialize
(
)
;
this
.
clientsEngine
=
clientsEngine
;
for
(
let
name
of
engines
)
{
if
(
!
(
name
in
engineModules
)
)
{
this
.
_log
.
info
(
"
Do
not
know
about
engine
:
"
+
name
)
;
continue
;
}
let
{
module
symbol
}
=
engineModules
[
name
]
;
if
(
!
module
.
includes
(
"
:
"
)
)
{
module
=
"
resource
:
/
/
services
-
sync
/
engines
/
"
+
module
;
}
let
ns
=
{
}
;
try
{
ChromeUtils
.
import
(
module
ns
)
;
if
(
!
(
symbol
in
ns
)
)
{
this
.
_log
.
warn
(
"
Could
not
find
exported
engine
instance
:
"
+
symbol
)
;
continue
;
}
await
this
.
engineManager
.
register
(
ns
[
symbol
]
)
;
}
catch
(
ex
)
{
this
.
_log
.
warn
(
"
Could
not
register
engine
"
+
name
ex
)
;
}
}
this
.
engineManager
.
setDeclined
(
declined
)
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
sync
:
collection_changed
"
:
if
(
data
.
includes
(
"
clients
"
)
&
&
!
Svc
.
Prefs
.
get
(
"
testing
.
tps
"
false
)
)
{
this
.
sync
(
{
why
:
"
collection_changed
"
engines
:
[
]
}
)
.
catch
(
e
=
>
{
this
.
_log
.
error
(
e
)
;
}
)
;
}
break
;
case
"
fxaccounts
:
device_disconnected
"
:
data
=
JSON
.
parse
(
data
)
;
if
(
!
data
.
isLocalDevice
)
{
this
.
clientsEngine
.
updateKnownStaleClients
(
)
.
catch
(
e
=
>
{
this
.
_log
.
error
(
e
)
;
}
)
;
}
break
;
case
"
weave
:
service
:
setup
-
complete
"
:
let
status
=
this
.
_checkSetup
(
)
;
if
(
status
!
=
STATUS_DISABLED
&
&
status
!
=
CLIENT_NOT_CONFIGURED
)
{
this
.
_startTracking
(
)
;
}
break
;
case
"
nsPref
:
changed
"
:
if
(
this
.
_ignorePrefObserver
)
{
return
;
}
const
engine
=
data
.
slice
(
(
PREFS_BRANCH
+
"
engine
.
"
)
.
length
)
;
if
(
engine
.
includes
(
"
.
"
)
)
{
return
;
}
this
.
_handleEngineStatusChanged
(
engine
)
;
break
;
}
}
_handleEngineStatusChanged
(
engine
)
{
this
.
_log
.
trace
(
"
Status
for
"
+
engine
+
"
engine
changed
.
"
)
;
if
(
Svc
.
Prefs
.
get
(
"
engineStatusChanged
.
"
+
engine
false
)
)
{
Svc
.
Prefs
.
reset
(
"
engineStatusChanged
.
"
+
engine
)
;
}
else
{
Svc
.
Prefs
.
set
(
"
engineStatusChanged
.
"
+
engine
true
)
;
}
}
_startTracking
(
)
{
const
engines
=
[
this
.
clientsEngine
.
.
.
this
.
engineManager
.
getAll
(
)
]
;
for
(
let
engine
of
engines
)
{
try
{
engine
.
startTracking
(
)
;
}
catch
(
e
)
{
this
.
_log
.
error
(
Could
not
start
{
engine
.
name
}
engine
tracker
e
)
;
}
}
Svc
.
Obs
.
notify
(
"
weave
:
service
:
tracking
-
started
"
)
;
}
async
_stopTracking
(
)
{
const
engines
=
[
this
.
clientsEngine
.
.
.
this
.
engineManager
.
getAll
(
)
]
;
for
(
let
engine
of
engines
)
{
try
{
await
engine
.
stopTracking
(
)
;
}
catch
(
e
)
{
this
.
_log
.
error
(
Could
not
stop
{
engine
.
name
}
engine
tracker
e
)
;
}
}
Svc
.
Obs
.
notify
(
"
weave
:
service
:
tracking
-
stopped
"
)
;
}
resource
:
function
resource
(
url
)
{
let
res
=
new
Resource
(
url
)
;
res
.
authenticator
=
this
.
identity
.
getResourceAuthenticator
(
)
;
return
res
;
}
async
_fetchInfo
(
url
)
{
let
infoURL
=
url
|
|
this
.
infoURL
;
this
.
_log
.
trace
(
"
In
_fetchInfo
:
"
+
infoURL
)
;
let
info
;
try
{
info
=
await
this
.
resource
(
infoURL
)
.
get
(
)
;
}
catch
(
ex
)
{
this
.
errorHandler
.
checkServerError
(
ex
)
;
throw
ex
;
}
this
.
errorHandler
.
checkServerError
(
info
)
;
if
(
!
info
.
success
)
{
this
.
_log
.
error
(
"
Aborting
sync
:
failed
to
get
collections
.
"
)
;
throw
info
;
}
return
info
;
}
async
verifyAndFetchSymmetricKeys
(
infoResponse
)
{
this
.
_log
.
debug
(
"
Fetching
and
verifying
-
-
or
generating
-
-
symmetric
keys
.
"
)
;
let
syncKeyBundle
=
this
.
identity
.
syncKeyBundle
;
if
(
!
syncKeyBundle
)
{
this
.
status
.
login
=
LOGIN_FAILED_NO_PASSPHRASE
;
this
.
status
.
sync
=
CREDENTIALS_CHANGED
;
return
false
;
}
try
{
if
(
!
infoResponse
)
infoResponse
=
await
this
.
_fetchInfo
(
)
;
if
(
infoResponse
.
status
!
=
200
)
{
this
.
_log
.
warn
(
"
info
/
collections
returned
non
-
200
response
.
Failing
key
fetch
.
"
)
;
this
.
status
.
login
=
LOGIN_FAILED_SERVER_ERROR
;
this
.
errorHandler
.
checkServerError
(
infoResponse
)
;
return
false
;
}
let
infoCollections
=
infoResponse
.
obj
;
this
.
_log
.
info
(
"
Testing
info
/
collections
:
"
+
JSON
.
stringify
(
infoCollections
)
)
;
if
(
this
.
collectionKeys
.
updateNeeded
(
infoCollections
)
)
{
this
.
_log
.
info
(
"
collection
keys
reports
that
a
key
update
is
needed
.
"
)
;
let
cryptoKeys
;
if
(
infoCollections
&
&
(
CRYPTO_COLLECTION
in
infoCollections
)
)
{
try
{
cryptoKeys
=
new
CryptoWrapper
(
CRYPTO_COLLECTION
KEYS_WBO
)
;
let
cryptoResp
=
(
await
cryptoKeys
.
fetch
(
this
.
resource
(
this
.
cryptoKeysURL
)
)
)
.
response
;
if
(
cryptoResp
.
success
)
{
await
this
.
handleFetchedKeys
(
syncKeyBundle
cryptoKeys
)
;
return
true
;
}
else
if
(
cryptoResp
.
status
=
=
404
)
{
this
.
_log
.
warn
(
"
Got
404
for
crypto
/
keys
but
'
crypto
'
in
info
/
collections
.
Regenerating
.
"
)
;
cryptoKeys
=
null
;
}
else
{
this
.
status
.
login
=
LOGIN_FAILED_SERVER_ERROR
;
this
.
errorHandler
.
checkServerError
(
cryptoResp
)
;
this
.
_log
.
warn
(
"
Got
status
"
+
cryptoResp
.
status
+
"
fetching
crypto
keys
.
"
)
;
return
false
;
}
}
catch
(
ex
)
{
this
.
_log
.
warn
(
"
Got
exception
fetching
cryptoKeys
.
"
ex
)
;
if
(
Utils
.
isHMACMismatch
(
ex
)
)
{
this
.
status
.
login
=
LOGIN_FAILED_INVALID_PASSPHRASE
;
this
.
status
.
sync
=
CREDENTIALS_CHANGED
;
}
else
{
this
.
status
.
login
=
LOGIN_FAILED
;
}
return
false
;
}
}
else
{
this
.
_log
.
info
(
"
.
.
.
'
crypto
'
is
not
a
reported
collection
.
Generating
new
keys
.
"
)
;
}
if
(
!
cryptoKeys
)
{
this
.
_log
.
info
(
"
No
keys
!
Generating
new
ones
.
"
)
;
await
this
.
_freshStart
(
)
;
return
true
;
}
return
false
;
}
return
true
;
}
catch
(
ex
)
{
this
.
_log
.
debug
(
"
Failed
to
fetch
and
verify
keys
"
ex
)
;
this
.
errorHandler
.
checkServerError
(
ex
)
;
return
false
;
}
}
getMaxRecordPayloadSize
(
)
{
let
config
=
this
.
serverConfiguration
;
if
(
!
config
|
|
!
config
.
max_record_payload_bytes
)
{
this
.
_log
.
warn
(
"
No
config
or
incomplete
config
in
getMaxRecordPayloadSize
.
"
+
"
Are
we
running
tests
?
"
)
;
return
256
*
1024
;
}
let
payloadMax
=
config
.
max_record_payload_bytes
;
if
(
config
.
max_post_bytes
&
&
payloadMax
<
=
config
.
max_post_bytes
)
{
return
config
.
max_post_bytes
-
4096
;
}
return
payloadMax
;
}
getMemcacheMaxRecordPayloadSize
(
)
{
return
Math
.
min
(
512
*
1024
this
.
getMaxRecordPayloadSize
(
)
)
;
}
async
verifyLogin
(
allow40XRecovery
=
true
)
{
if
(
!
this
.
identity
.
username
)
{
this
.
_log
.
warn
(
"
No
username
in
verifyLogin
.
"
)
;
this
.
status
.
login
=
LOGIN_FAILED_NO_USERNAME
;
return
false
;
}
let
unlockedState
=
await
this
.
identity
.
unlockAndVerifyAuthState
(
)
;
this
.
_log
.
debug
(
"
Fetching
unlocked
auth
state
returned
"
+
unlockedState
)
;
if
(
unlockedState
!
=
STATUS_OK
)
{
this
.
status
.
login
=
unlockedState
;
return
false
;
}
try
{
if
(
this
.
clusterURL
=
=
"
"
&
&
!
(
await
this
.
_clusterManager
.
setCluster
(
)
)
)
{
this
.
status
.
sync
=
NO_SYNC_NODE_FOUND
;
return
true
;
}
let
test
=
await
this
.
resource
(
this
.
infoURL
)
.
get
(
)
;
switch
(
test
.
status
)
{
case
200
:
if
(
!
this
.
identity
.
syncKeyBundle
)
{
this
.
_log
.
warn
(
"
No
passphrase
in
verifyLogin
.
"
)
;
this
.
status
.
login
=
LOGIN_FAILED_NO_PASSPHRASE
;
return
false
;
}
if
(
(
await
this
.
_remoteSetup
(
test
)
)
)
{
this
.
status
.
login
=
LOGIN_SUCCEEDED
;
return
true
;
}
this
.
_log
.
warn
(
"
Remote
setup
failed
.
"
)
;
return
false
;
case
401
:
this
.
_log
.
warn
(
"
401
:
login
failed
.
"
)
;
case
404
:
if
(
allow40XRecovery
&
&
(
await
this
.
_clusterManager
.
setCluster
(
)
)
)
{
return
await
this
.
verifyLogin
(
false
)
;
}
this
.
status
.
login
=
this
.
identity
.
loginStatusFromVerification404
(
)
;
return
false
;
default
:
this
.
status
.
login
=
LOGIN_FAILED_SERVER_ERROR
;
this
.
errorHandler
.
checkServerError
(
test
)
;
return
false
;
}
}
catch
(
ex
)
{
this
.
_log
.
debug
(
"
verifyLogin
failed
"
ex
)
;
this
.
status
.
login
=
LOGIN_FAILED_NETWORK_ERROR
;
this
.
errorHandler
.
checkServerError
(
ex
)
;
return
false
;
}
}
async
generateNewSymmetricKeys
(
)
{
this
.
_log
.
info
(
"
Generating
new
keys
WBO
.
.
.
"
)
;
let
wbo
=
await
this
.
collectionKeys
.
generateNewKeysWBO
(
)
;
this
.
_log
.
info
(
"
Encrypting
new
key
bundle
.
"
)
;
await
wbo
.
encrypt
(
this
.
identity
.
syncKeyBundle
)
;
let
uploadRes
=
await
this
.
_uploadCryptoKeys
(
wbo
0
)
;
if
(
uploadRes
.
status
!
=
200
)
{
this
.
_log
.
warn
(
"
Got
status
"
+
uploadRes
.
status
+
"
uploading
new
keys
.
What
to
do
?
Throw
!
"
)
;
this
.
errorHandler
.
checkServerError
(
uploadRes
)
;
throw
new
Error
(
"
Unable
to
upload
symmetric
keys
.
"
)
;
}
this
.
_log
.
info
(
"
Got
status
"
+
uploadRes
.
status
+
"
uploading
keys
.
"
)
;
let
serverModified
=
uploadRes
.
obj
;
this
.
_log
.
debug
(
"
Server
reports
crypto
modified
:
"
+
serverModified
)
;
this
.
_log
.
debug
(
"
Verifying
server
collection
records
.
"
)
;
let
info
=
await
this
.
_fetchInfo
(
)
;
this
.
_log
.
debug
(
"
info
/
collections
is
:
"
+
info
)
;
if
(
info
.
status
!
=
200
)
{
this
.
_log
.
warn
(
"
Non
-
200
info
/
collections
response
.
Aborting
.
"
)
;
throw
new
Error
(
"
Unable
to
upload
symmetric
keys
.
"
)
;
}
info
=
info
.
obj
;
if
(
!
(
CRYPTO_COLLECTION
in
info
)
)
{
this
.
_log
.
error
(
"
Consistency
failure
:
info
/
collections
excludes
"
+
"
crypto
after
successful
upload
.
"
)
;
throw
new
Error
(
"
Symmetric
key
upload
failed
.
"
)
;
}
if
(
info
[
CRYPTO_COLLECTION
]
<
serverModified
)
{
this
.
_log
.
error
(
"
Consistency
failure
:
info
/
collections
crypto
entry
"
+
"
is
stale
after
successful
upload
.
"
)
;
throw
new
Error
(
"
Symmetric
key
upload
failed
.
"
)
;
}
let
cryptoKeys
=
new
CryptoWrapper
(
CRYPTO_COLLECTION
KEYS_WBO
)
;
let
cryptoResp
=
(
await
cryptoKeys
.
fetch
(
this
.
resource
(
this
.
cryptoKeysURL
)
)
)
.
response
;
if
(
cryptoResp
.
status
!
=
200
)
{
this
.
_log
.
warn
(
"
Failed
to
download
keys
.
"
)
;
throw
new
Error
(
"
Symmetric
key
download
failed
.
"
)
;
}
let
keysChanged
=
await
this
.
handleFetchedKeys
(
this
.
identity
.
syncKeyBundle
cryptoKeys
true
)
;
if
(
keysChanged
)
{
this
.
_log
.
info
(
"
Downloaded
keys
differed
as
expected
.
"
)
;
}
}
async
startOver
(
)
{
this
.
_log
.
trace
(
"
Invoking
Service
.
startOver
.
"
)
;
await
this
.
_stopTracking
(
)
;
this
.
status
.
resetSync
(
)
;
if
(
this
.
clusterURL
!
=
"
"
)
{
const
engines
=
[
this
.
clientsEngine
.
.
.
this
.
engineManager
.
getAll
(
)
]
;
for
(
let
engine
of
engines
)
{
try
{
await
engine
.
removeClientData
(
)
;
}
catch
(
ex
)
{
this
.
_log
.
warn
(
Deleting
client
data
for
{
engine
.
name
}
failed
ex
)
;
}
}
this
.
_log
.
debug
(
"
Finished
deleting
client
data
.
"
)
;
}
else
{
this
.
_log
.
debug
(
"
Skipping
client
data
removal
:
no
cluster
URL
.
"
)
;
}
this
.
_log
.
info
(
"
Service
.
startOver
dropping
sync
key
and
logging
out
.
"
)
;
this
.
identity
.
resetSyncKeyBundle
(
)
;
this
.
status
.
login
=
LOGIN_FAILED_NO_PASSPHRASE
;
this
.
logout
(
)
;
Svc
.
Obs
.
notify
(
"
weave
:
service
:
start
-
over
"
)
;
await
this
.
resetClient
(
)
;
this
.
collectionKeys
.
clear
(
)
;
this
.
status
.
resetBackoff
(
)
;
this
.
_ignorePrefObserver
=
true
;
Svc
.
Prefs
.
resetBranch
(
"
"
)
;
this
.
_ignorePrefObserver
=
false
;
this
.
clusterURL
=
null
;
Svc
.
Prefs
.
set
(
"
lastversion
"
WEAVE_VERSION
)
;
this
.
identity
.
deleteSyncCredentials
(
)
;
try
{
this
.
identity
.
finalize
(
)
;
this
.
status
.
__authManager
=
null
;
this
.
identity
=
Status
.
_authManager
;
this
.
_clusterManager
=
this
.
identity
.
createClusterManager
(
this
)
;
Svc
.
Obs
.
notify
(
"
weave
:
service
:
start
-
over
:
finish
"
)
;
}
catch
(
err
)
{
this
.
_log
.
error
(
"
startOver
failed
to
re
-
initialize
the
identity
manager
"
err
)
;
Svc
.
Obs
.
notify
(
"
weave
:
service
:
start
-
over
:
finish
"
)
;
}
}
async
login
(
)
{
async
function
onNotify
(
)
{
this
.
_loggedIn
=
false
;
if
(
this
.
scheduler
.
offline
)
{
this
.
status
.
login
=
LOGIN_FAILED_NETWORK_ERROR
;
throw
new
Error
(
"
Application
is
offline
login
should
not
be
called
"
)
;
}
this
.
_log
.
info
(
"
Logging
in
the
user
.
"
)
;
try
{
await
this
.
identity
.
ensureLoggedIn
(
)
;
}
finally
{
this
.
_checkSetup
(
)
;
}
this
.
_updateCachedURLs
(
)
;
this
.
_log
.
info
(
"
User
logged
in
successfully
-
verifying
login
.
"
)
;
if
(
!
(
await
this
.
verifyLogin
(
)
)
)
{
throw
new
Error
(
Login
failed
:
{
this
.
status
.
login
}
)
;
}
this
.
_loggedIn
=
true
;
return
true
;
}
let
notifier
=
this
.
_notify
(
"
login
"
"
"
onNotify
.
bind
(
this
)
)
;
return
this
.
_catch
(
this
.
_lock
(
"
service
.
js
:
login
"
notifier
)
)
(
)
;
}
logout
:
function
logout
(
)
{
this
.
_log
.
info
(
"
Logging
out
"
)
;
this
.
identity
.
logout
(
)
;
this
.
_loggedIn
=
false
;
Svc
.
Obs
.
notify
(
"
weave
:
service
:
logout
:
finish
"
)
;
}
async
_fetchServerConfiguration
(
)
{
let
infoURL
=
this
.
userBaseURL
+
"
info
/
configuration
"
;
this
.
_log
.
debug
(
"
Fetching
server
configuration
"
infoURL
)
;
let
configResponse
;
try
{
configResponse
=
await
this
.
resource
(
infoURL
)
.
get
(
)
;
}
catch
(
ex
)
{
this
.
_log
.
warn
(
"
Failed
to
fetch
info
/
configuration
"
ex
)
;
this
.
errorHandler
.
checkServerError
(
ex
)
;
return
false
;
}
if
(
configResponse
.
status
=
=
404
)
{
this
.
_log
.
debug
(
"
info
/
configuration
returned
404
-
using
default
upload
semantics
"
)
;
}
else
if
(
configResponse
.
status
!
=
200
)
{
this
.
_log
.
warn
(
info
/
configuration
returned
{
configResponse
.
status
}
-
using
default
configuration
)
;
this
.
errorHandler
.
checkServerError
(
configResponse
)
;
return
false
;
}
else
{
this
.
serverConfiguration
=
configResponse
.
obj
;
}
this
.
_log
.
trace
(
"
info
/
configuration
for
this
server
"
this
.
serverConfiguration
)
;
return
true
;
}
async
_remoteSetup
(
infoResponse
fetchConfig
=
true
)
{
if
(
fetchConfig
&
&
!
(
await
this
.
_fetchServerConfiguration
(
)
)
)
{
return
false
;
}
this
.
_log
.
debug
(
"
Fetching
global
metadata
record
"
)
;
let
meta
=
await
this
.
recordManager
.
get
(
this
.
metaURL
)
;
if
(
infoResponse
&
&
(
infoResponse
.
obj
.
meta
!
=
this
.
metaModified
)
&
&
(
!
meta
|
|
!
meta
.
isNew
)
)
{
this
.
_log
.
debug
(
"
Clearing
cached
meta
record
.
metaModified
is
"
+
JSON
.
stringify
(
this
.
metaModified
)
+
"
setting
to
"
+
JSON
.
stringify
(
infoResponse
.
obj
.
meta
)
)
;
this
.
recordManager
.
del
(
this
.
metaURL
)
;
let
newMeta
=
await
this
.
recordManager
.
get
(
this
.
metaURL
)
;
if
(
this
.
recordManager
.
response
.
status
=
=
401
)
{
this
.
_log
.
debug
(
"
Fetching
meta
/
global
record
on
the
server
returned
401
.
"
)
;
this
.
errorHandler
.
checkServerError
(
this
.
recordManager
.
response
)
;
return
false
;
}
if
(
this
.
recordManager
.
response
.
status
=
=
404
)
{
this
.
_log
.
debug
(
"
No
meta
/
global
record
on
the
server
.
Creating
one
.
"
)
;
try
{
await
this
.
_uploadNewMetaGlobal
(
)
;
}
catch
(
uploadRes
)
{
this
.
_log
.
warn
(
"
Unable
to
upload
new
meta
/
global
.
Failing
remote
setup
.
"
)
;
this
.
errorHandler
.
checkServerError
(
uploadRes
)
;
return
false
;
}
}
else
if
(
!
newMeta
)
{
this
.
_log
.
warn
(
"
Unable
to
get
meta
/
global
.
Failing
remote
setup
.
"
)
;
this
.
errorHandler
.
checkServerError
(
this
.
recordManager
.
response
)
;
return
false
;
}
else
{
newMeta
.
isNew
=
meta
.
isNew
;
newMeta
.
changed
=
meta
.
changed
;
}
meta
=
newMeta
;
this
.
metaModified
=
infoResponse
.
obj
.
meta
;
}
let
remoteVersion
=
(
meta
&
&
meta
.
payload
.
storageVersion
)
?
meta
.
payload
.
storageVersion
:
"
"
;
this
.
_log
.
debug
(
[
"
Weave
Version
:
"
WEAVE_VERSION
"
Local
Storage
:
"
STORAGE_VERSION
"
Remote
Storage
:
"
remoteVersion
]
.
join
(
"
"
)
)
;
if
(
!
meta
|
|
!
meta
.
payload
.
storageVersion
|
|
!
meta
.
payload
.
syncID
|
|
STORAGE_VERSION
>
parseFloat
(
remoteVersion
)
)
{
this
.
_log
.
info
(
"
One
of
:
no
meta
no
meta
storageVersion
or
no
meta
syncID
.
Fresh
start
needed
.
"
)
;
let
status
=
this
.
recordManager
.
response
.
status
;
if
(
status
!
=
200
&
&
status
!
=
404
)
{
this
.
status
.
sync
=
METARECORD_DOWNLOAD_FAIL
;
this
.
errorHandler
.
checkServerError
(
this
.
recordManager
.
response
)
;
this
.
_log
.
warn
(
"
Unknown
error
while
downloading
metadata
record
.
"
+
"
Aborting
sync
.
"
)
;
return
false
;
}
if
(
!
meta
)
this
.
_log
.
info
(
"
No
metadata
record
server
wipe
needed
"
)
;
if
(
meta
&
&
!
meta
.
payload
.
syncID
)
this
.
_log
.
warn
(
"
No
sync
id
server
wipe
needed
"
)
;
this
.
_log
.
info
(
"
Wiping
server
data
"
)
;
await
this
.
_freshStart
(
)
;
if
(
status
=
=
404
)
this
.
_log
.
info
(
"
Metadata
record
not
found
server
was
wiped
to
ensure
"
+
"
consistency
.
"
)
;
else
this
.
_log
.
info
(
"
Wiped
server
;
incompatible
metadata
:
"
+
remoteVersion
)
;
return
true
;
}
else
if
(
remoteVersion
>
STORAGE_VERSION
)
{
this
.
status
.
sync
=
VERSION_OUT_OF_DATE
;
this
.
_log
.
warn
(
"
Upgrade
required
to
access
newer
storage
version
.
"
)
;
return
false
;
}
else
if
(
meta
.
payload
.
syncID
!
=
this
.
syncID
)
{
this
.
_log
.
info
(
"
Sync
IDs
differ
.
Local
is
"
+
this
.
syncID
+
"
remote
is
"
+
meta
.
payload
.
syncID
)
;
await
this
.
resetClient
(
)
;
this
.
collectionKeys
.
clear
(
)
;
this
.
syncID
=
meta
.
payload
.
syncID
;
this
.
_log
.
debug
(
"
Clear
cached
values
and
take
syncId
:
"
+
this
.
syncID
)
;
if
(
!
(
await
this
.
verifyAndFetchSymmetricKeys
(
infoResponse
)
)
)
{
this
.
_log
.
warn
(
"
Failed
to
fetch
symmetric
keys
.
Failing
remote
setup
.
"
)
;
return
false
;
}
if
(
!
(
await
this
.
verifyLogin
(
)
)
)
{
this
.
status
.
sync
=
CREDENTIALS_CHANGED
;
this
.
_log
.
info
(
"
Credentials
have
changed
aborting
sync
and
forcing
re
-
login
.
"
)
;
return
false
;
}
return
true
;
}
if
(
!
(
await
this
.
verifyAndFetchSymmetricKeys
(
infoResponse
)
)
)
{
this
.
_log
.
warn
(
"
Failed
to
fetch
symmetric
keys
.
Failing
remote
setup
.
"
)
;
return
false
;
}
return
true
;
}
_shouldLogin
:
function
_shouldLogin
(
)
{
return
this
.
enabled
&
&
!
this
.
scheduler
.
offline
&
&
!
this
.
isLoggedIn
&
&
Async
.
isAppReady
(
)
;
}
_checkSync
:
function
_checkSync
(
ignore
)
{
let
reason
=
"
"
;
if
(
Status
.
service
=
=
CLIENT_NOT_CONFIGURED
)
reason
=
kSyncNotConfigured
;
else
if
(
Status
.
service
=
=
STATUS_DISABLED
|
|
!
this
.
enabled
)
reason
=
kSyncWeaveDisabled
;
else
if
(
this
.
scheduler
.
offline
)
reason
=
kSyncNetworkOffline
;
else
if
(
this
.
status
.
minimumNextSync
>
Date
.
now
(
)
)
reason
=
kSyncBackoffNotMet
;
else
if
(
(
this
.
status
.
login
=
=
MASTER_PASSWORD_LOCKED
)
&
&
Utils
.
mpLocked
(
)
)
reason
=
kSyncMasterPasswordLocked
;
else
if
(
Svc
.
Prefs
.
get
(
"
firstSync
"
)
=
=
"
notReady
"
)
reason
=
kFirstSyncChoiceNotMade
;
else
if
(
!
Async
.
isAppReady
(
)
)
reason
=
kFirefoxShuttingDown
;
if
(
ignore
&
&
ignore
.
includes
(
reason
)
)
return
"
"
;
return
reason
;
}
async
sync
(
{
engines
why
}
=
{
}
)
{
let
dateStr
=
Utils
.
formatTimestamp
(
new
Date
(
)
)
;
this
.
_log
.
debug
(
"
User
-
Agent
:
"
+
Utils
.
userAgent
)
;
await
this
.
promiseInitialized
;
this
.
_log
.
info
(
Starting
sync
at
{
dateStr
}
in
browser
session
{
browserSessionID
}
)
;
return
this
.
_catch
(
async
function
(
)
{
if
(
this
.
_shouldLogin
(
)
)
{
this
.
_log
.
debug
(
"
In
sync
:
should
login
.
"
)
;
if
(
!
(
await
this
.
login
(
)
)
)
{
this
.
_log
.
debug
(
"
Not
syncing
:
login
returned
false
.
"
)
;
return
;
}
}
else
{
this
.
_log
.
trace
(
"
In
sync
:
no
need
to
login
.
"
)
;
}
await
this
.
_lockedSync
(
engines
why
)
;
}
)
(
)
;
}
async
_lockedSync
(
engineNamesToSync
why
)
{
return
this
.
_lock
(
"
service
.
js
:
sync
"
this
.
_notify
(
"
sync
"
JSON
.
stringify
(
{
why
}
)
async
function
onNotify
(
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
WEAVE_START_COUNT
"
)
;
histogram
.
add
(
1
)
;
let
synchronizer
=
new
EngineSynchronizer
(
this
)
;
await
synchronizer
.
sync
(
engineNamesToSync
why
)
;
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
WEAVE_COMPLETE_SUCCESS_COUNT
"
)
;
histogram
.
add
(
1
)
;
if
(
this
.
clusterURL
)
{
this
.
identity
.
prefetchMigrationSentinel
(
this
)
;
}
if
(
this
.
metaURL
)
{
let
meta
=
await
this
.
recordManager
.
get
(
this
.
metaURL
)
;
if
(
!
meta
)
{
this
.
_log
.
warn
(
"
No
meta
/
global
;
can
'
t
update
declined
state
.
"
)
;
return
;
}
let
declinedEngines
=
new
DeclinedEngines
(
this
)
;
let
didChange
=
declinedEngines
.
updateDeclined
(
meta
this
.
engineManager
)
;
if
(
!
didChange
)
{
this
.
_log
.
info
(
"
No
change
to
declined
engines
.
Not
reuploading
meta
/
global
.
"
)
;
return
;
}
await
this
.
uploadMetaGlobal
(
meta
)
;
}
}
)
)
(
)
;
}
async
_uploadNewMetaGlobal
(
)
{
let
meta
=
new
WBORecord
(
"
meta
"
"
global
"
)
;
meta
.
payload
.
syncID
=
this
.
syncID
;
meta
.
payload
.
storageVersion
=
STORAGE_VERSION
;
meta
.
payload
.
declined
=
this
.
engineManager
.
getDeclined
(
)
;
meta
.
modified
=
0
;
meta
.
isNew
=
true
;
await
this
.
uploadMetaGlobal
(
meta
)
;
}
async
uploadMetaGlobal
(
meta
)
{
this
.
_log
.
debug
(
"
Uploading
meta
/
global
"
meta
)
;
let
res
=
this
.
resource
(
this
.
metaURL
)
;
res
.
setHeader
(
"
X
-
If
-
Unmodified
-
Since
"
meta
.
modified
)
;
let
response
=
await
res
.
put
(
meta
)
;
if
(
!
response
.
success
)
{
throw
response
;
}
meta
.
modified
=
response
.
obj
;
this
.
recordManager
.
set
(
this
.
metaURL
meta
)
;
}
async
_uploadCryptoKeys
(
cryptoKeys
lastModified
)
{
this
.
_log
.
debug
(
Uploading
crypto
/
keys
(
lastModified
:
{
lastModified
}
)
)
;
let
res
=
this
.
resource
(
this
.
cryptoKeysURL
)
;
res
.
setHeader
(
"
X
-
If
-
Unmodified
-
Since
"
lastModified
)
;
return
res
.
put
(
cryptoKeys
)
;
}
async
_freshStart
(
)
{
this
.
_log
.
info
(
"
Fresh
start
.
Resetting
client
.
"
)
;
await
this
.
resetClient
(
)
;
this
.
collectionKeys
.
clear
(
)
;
await
this
.
wipeServer
(
)
;
await
this
.
_uploadNewMetaGlobal
(
)
;
await
this
.
generateNewSymmetricKeys
(
)
;
}
async
wipeServer
(
collections
)
{
let
response
;
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
WEAVE_WIPE_SERVER_SUCCEEDED
"
)
;
if
(
!
collections
)
{
let
res
=
this
.
resource
(
this
.
storageURL
.
slice
(
0
-
1
)
)
;
res
.
setHeader
(
"
X
-
Confirm
-
Delete
"
"
1
"
)
;
try
{
response
=
await
res
.
delete
(
)
;
}
catch
(
ex
)
{
this
.
_log
.
debug
(
"
Failed
to
wipe
server
"
ex
)
;
histogram
.
add
(
false
)
;
throw
ex
;
}
if
(
response
.
status
!
=
200
&
&
response
.
status
!
=
404
)
{
this
.
_log
.
debug
(
"
Aborting
wipeServer
.
Server
responded
with
"
+
response
.
status
+
"
response
for
"
+
this
.
storageURL
)
;
histogram
.
add
(
false
)
;
throw
response
;
}
histogram
.
add
(
true
)
;
return
response
.
headers
[
"
x
-
weave
-
timestamp
"
]
;
}
let
timestamp
;
for
(
let
name
of
collections
)
{
let
url
=
this
.
storageURL
+
name
;
try
{
response
=
await
this
.
resource
(
url
)
.
delete
(
)
;
}
catch
(
ex
)
{
this
.
_log
.
debug
(
"
Failed
to
wipe
'
"
+
name
+
"
'
collection
"
ex
)
;
histogram
.
add
(
false
)
;
throw
ex
;
}
if
(
response
.
status
!
=
200
&
&
response
.
status
!
=
404
)
{
this
.
_log
.
debug
(
"
Aborting
wipeServer
.
Server
responded
with
"
+
response
.
status
+
"
response
for
"
+
url
)
;
histogram
.
add
(
false
)
;
throw
response
;
}
if
(
"
x
-
weave
-
timestamp
"
in
response
.
headers
)
{
timestamp
=
response
.
headers
[
"
x
-
weave
-
timestamp
"
]
;
}
}
histogram
.
add
(
true
)
;
return
timestamp
;
}
async
wipeClient
(
engines
)
{
if
(
!
engines
)
{
await
this
.
resetService
(
)
;
engines
=
[
this
.
clientsEngine
.
.
.
this
.
engineManager
.
getAll
(
)
]
;
}
else
{
engines
=
this
.
engineManager
.
get
(
engines
)
;
}
for
(
let
engine
of
engines
)
{
if
(
(
await
engine
.
canDecrypt
(
)
)
)
{
await
engine
.
wipeClient
(
)
;
}
}
}
async
wipeRemote
(
engines
)
{
try
{
await
this
.
resetClient
(
engines
)
;
await
this
.
wipeServer
(
engines
)
;
let
extra
=
{
reason
:
"
wipe
-
remote
"
}
;
if
(
engines
)
{
for
(
const
e
of
engines
)
{
await
this
.
clientsEngine
.
sendCommand
(
"
wipeEngine
"
[
e
]
null
extra
)
;
}
}
else
{
await
this
.
clientsEngine
.
sendCommand
(
"
wipeAll
"
[
]
null
extra
)
;
}
await
this
.
clientsEngine
.
sync
(
)
;
}
catch
(
ex
)
{
this
.
errorHandler
.
checkServerError
(
ex
)
;
throw
ex
;
}
}
async
resetService
(
)
{
return
this
.
_catch
(
async
function
reset
(
)
{
this
.
_log
.
info
(
"
Service
reset
.
"
)
;
this
.
syncID
=
"
"
;
this
.
recordManager
.
clearCache
(
)
;
}
)
(
)
;
}
async
resetClient
(
engines
)
{
return
this
.
_catch
(
async
function
doResetClient
(
)
{
if
(
!
engines
)
{
await
this
.
resetService
(
)
;
engines
=
[
this
.
clientsEngine
.
.
.
this
.
engineManager
.
getAll
(
)
]
;
}
else
{
engines
=
this
.
engineManager
.
get
(
engines
)
;
}
for
(
let
engine
of
engines
)
{
await
engine
.
resetClient
(
)
;
}
}
)
(
)
;
}
recordTelemetryEvent
(
object
method
value
extra
=
undefined
)
{
Svc
.
Obs
.
notify
(
"
weave
:
telemetry
:
event
"
{
object
method
value
extra
}
)
;
}
}
;
this
.
Service
=
new
Sync11Service
(
)
;
this
.
Service
.
promiseInitialized
=
new
Promise
(
resolve
=
>
{
this
.
Service
.
onStartup
(
)
.
then
(
resolve
)
;
}
)
;
