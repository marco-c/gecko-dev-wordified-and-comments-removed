"
use
strict
"
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
BookmarkRepairRequestor
"
"
resource
:
/
/
services
-
sync
/
bookmark_repair
.
js
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
getRepairRequestor
"
"
getAllRepairRequestors
"
"
CollectionRepairRequestor
"
"
getRepairResponder
"
"
CollectionRepairResponder
"
]
;
const
REQUESTORS
=
{
bookmarks
:
[
"
bookmark_repair
.
js
"
"
BookmarkRepairRequestor
"
]
}
const
RESPONDERS
=
{
}
function
_getRepairConstructor
(
which
collection
)
{
if
(
!
(
collection
in
which
)
)
{
return
null
;
}
let
[
modname
symbolname
]
=
which
[
collection
]
;
let
ns
=
{
}
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
"
+
modname
ns
)
;
return
ns
[
symbolname
]
;
}
function
getRepairRequestor
(
collection
)
{
let
ctor
=
_getRepairConstructor
(
REQUESTORS
collection
)
;
if
(
!
ctor
)
{
return
null
;
}
return
new
ctor
(
)
;
}
function
getAllRepairRequestors
(
)
{
let
result
=
{
}
;
for
(
let
collection
of
Object
.
keys
(
REQUESTORS
)
)
{
let
ctor
=
_getRepairConstructor
(
REQUESTORS
collection
)
;
result
[
collection
]
=
new
ctor
(
)
;
}
return
result
;
}
function
getRepairResponder
(
collection
)
{
let
ctor
=
_getRepairConstructor
(
RESPONDERS
collection
)
;
if
(
!
ctor
)
{
return
null
;
}
return
new
ctor
(
)
;
}
class
CollectionRepairRequestor
{
constructor
(
service
=
null
)
{
this
.
service
=
service
|
|
Weave
.
Service
;
}
startRepairs
(
validationInfo
flowID
)
{
throw
new
Error
(
"
not
implemented
"
)
;
}
continueRepairs
(
responseInfo
=
null
)
{
throw
new
Error
(
"
not
implemented
"
)
;
}
}
class
CollectionRepairResponder
{
constructor
(
service
=
null
)
{
this
.
service
=
service
|
|
Weave
.
Service
;
}
async
repair
(
request
rawCommand
)
{
throw
new
Error
(
"
not
implemented
"
)
;
}
}
