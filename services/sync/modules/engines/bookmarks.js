this
.
EXPORTED_SYMBOLS
=
[
'
BookmarksEngine
'
"
PlacesItem
"
"
Bookmark
"
"
BookmarkFolder
"
"
BookmarkQuery
"
"
Livemark
"
"
BookmarkSeparator
"
]
;
var
Cc
=
Components
.
classes
;
var
Ci
=
Components
.
interfaces
;
var
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PlacesSyncUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
async
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
constants
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
record
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
bookmark_utils
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PlacesBackups
.
jsm
"
)
;
const
ANNOS_TO_TRACK
=
[
BookmarkAnnos
.
DESCRIPTION_ANNO
BookmarkAnnos
.
SIDEBAR_ANNO
PlacesUtils
.
LMANNO_FEEDURI
PlacesUtils
.
LMANNO_SITEURI
]
;
const
SERVICE_NOT_SUPPORTED
=
"
Service
not
supported
on
this
platform
"
;
const
FOLDER_SORTINDEX
=
1000000
;
const
{
SOURCE_SYNC
}
=
Ci
.
nsINavBookmarksService
;
const
RECORD_PROPS_TO_BOOKMARK_PROPS
=
{
title
:
"
title
"
bmkUri
:
"
url
"
tags
:
"
tags
"
keyword
:
"
keyword
"
description
:
"
description
"
loadInSidebar
:
"
loadInSidebar
"
queryId
:
"
query
"
siteUri
:
"
site
"
feedUri
:
"
feed
"
}
;
this
.
PlacesItem
=
function
PlacesItem
(
collection
id
type
)
{
CryptoWrapper
.
call
(
this
collection
id
)
;
this
.
type
=
type
|
|
"
item
"
;
}
PlacesItem
.
prototype
=
{
decrypt
:
function
PlacesItem_decrypt
(
keyBundle
)
{
let
clear
=
CryptoWrapper
.
prototype
.
decrypt
.
call
(
this
keyBundle
)
;
if
(
!
this
.
deleted
)
this
.
__proto__
=
this
.
getTypeObject
(
this
.
type
)
.
prototype
;
return
clear
;
}
getTypeObject
:
function
PlacesItem_getTypeObject
(
type
)
{
switch
(
type
)
{
case
"
bookmark
"
:
case
"
microsummary
"
:
return
Bookmark
;
case
"
query
"
:
return
BookmarkQuery
;
case
"
folder
"
:
return
BookmarkFolder
;
case
"
livemark
"
:
return
Livemark
;
case
"
separator
"
:
return
BookmarkSeparator
;
case
"
item
"
:
return
PlacesItem
;
}
throw
"
Unknown
places
item
object
type
:
"
+
type
;
}
__proto__
:
CryptoWrapper
.
prototype
_logName
:
"
Sync
.
Record
.
PlacesItem
"
}
;
Utils
.
deferGetSet
(
PlacesItem
"
cleartext
"
[
"
hasDupe
"
"
parentid
"
"
parentName
"
"
type
"
]
)
;
this
.
Bookmark
=
function
Bookmark
(
collection
id
type
)
{
PlacesItem
.
call
(
this
collection
id
type
|
|
"
bookmark
"
)
;
}
Bookmark
.
prototype
=
{
__proto__
:
PlacesItem
.
prototype
_logName
:
"
Sync
.
Record
.
Bookmark
"
}
;
Utils
.
deferGetSet
(
Bookmark
"
cleartext
"
[
"
title
"
"
bmkUri
"
"
description
"
"
loadInSidebar
"
"
tags
"
"
keyword
"
]
)
;
this
.
BookmarkQuery
=
function
BookmarkQuery
(
collection
id
)
{
Bookmark
.
call
(
this
collection
id
"
query
"
)
;
}
BookmarkQuery
.
prototype
=
{
__proto__
:
Bookmark
.
prototype
_logName
:
"
Sync
.
Record
.
BookmarkQuery
"
}
;
Utils
.
deferGetSet
(
BookmarkQuery
"
cleartext
"
[
"
folderName
"
"
queryId
"
]
)
;
this
.
BookmarkFolder
=
function
BookmarkFolder
(
collection
id
type
)
{
PlacesItem
.
call
(
this
collection
id
type
|
|
"
folder
"
)
;
}
BookmarkFolder
.
prototype
=
{
__proto__
:
PlacesItem
.
prototype
_logName
:
"
Sync
.
Record
.
Folder
"
}
;
Utils
.
deferGetSet
(
BookmarkFolder
"
cleartext
"
[
"
description
"
"
title
"
"
children
"
]
)
;
this
.
Livemark
=
function
Livemark
(
collection
id
)
{
BookmarkFolder
.
call
(
this
collection
id
"
livemark
"
)
;
}
Livemark
.
prototype
=
{
__proto__
:
BookmarkFolder
.
prototype
_logName
:
"
Sync
.
Record
.
Livemark
"
}
;
Utils
.
deferGetSet
(
Livemark
"
cleartext
"
[
"
siteUri
"
"
feedUri
"
]
)
;
this
.
BookmarkSeparator
=
function
BookmarkSeparator
(
collection
id
)
{
PlacesItem
.
call
(
this
collection
id
"
separator
"
)
;
}
BookmarkSeparator
.
prototype
=
{
__proto__
:
PlacesItem
.
prototype
_logName
:
"
Sync
.
Record
.
Separator
"
}
;
Utils
.
deferGetSet
(
BookmarkSeparator
"
cleartext
"
"
pos
"
)
;
this
.
BookmarksEngine
=
function
BookmarksEngine
(
service
)
{
SyncEngine
.
call
(
this
"
Bookmarks
"
service
)
;
}
BookmarksEngine
.
prototype
=
{
__proto__
:
SyncEngine
.
prototype
_recordObj
:
PlacesItem
_storeObj
:
BookmarksStore
_trackerObj
:
BookmarksTracker
version
:
2
_defaultSort
:
"
index
"
syncPriority
:
4
_getStringUrlForId
(
id
)
{
let
url
;
try
{
let
stmt
=
this
.
_store
.
_getStmt
(
SELECT
h
.
url
FROM
moz_places
h
JOIN
moz_bookmarks
b
ON
h
.
id
=
b
.
fk
WHERE
b
.
id
=
:
id
)
;
stmt
.
params
.
id
=
id
;
let
rows
=
Async
.
querySpinningly
(
stmt
[
"
url
"
]
)
;
url
=
rows
.
length
=
=
0
?
"
<
not
found
>
"
:
rows
[
0
]
.
url
;
}
catch
(
ex
)
{
if
(
Async
.
isShutdownException
(
ex
)
)
{
throw
ex
;
}
if
(
ex
instanceof
Ci
.
mozIStorageError
)
{
url
=
<
failed
:
Storage
error
:
{
ex
.
message
}
(
{
ex
.
result
}
)
>
;
}
else
{
url
=
<
failed
:
{
ex
.
toString
(
)
}
>
;
}
}
return
url
;
}
_guidMapFailed
:
false
_buildGUIDMap
:
function
_buildGUIDMap
(
)
{
let
guidMap
=
{
}
;
let
tree
=
Async
.
promiseSpinningly
(
PlacesUtils
.
promiseBookmarksTree
(
"
"
{
includeItemIds
:
true
}
)
)
;
function
*
walkBookmarksTree
(
tree
parent
=
null
)
{
if
(
tree
)
{
if
(
parent
)
{
yield
[
tree
parent
]
;
}
if
(
tree
.
children
)
{
for
(
let
child
of
tree
.
children
)
{
yield
*
walkBookmarksTree
(
child
tree
)
;
}
}
}
}
function
*
walkBookmarksRoots
(
tree
rootGUIDs
)
{
for
(
let
guid
of
rootGUIDs
)
{
let
id
=
BookmarkSpecialIds
.
specialIdForGUID
(
guid
false
)
;
let
bookmarkRoot
=
id
=
=
=
null
?
null
:
tree
.
children
.
find
(
child
=
>
child
.
id
=
=
=
id
)
;
if
(
bookmarkRoot
=
=
=
null
)
{
continue
;
}
yield
*
walkBookmarksTree
(
bookmarkRoot
tree
)
;
}
}
let
rootsToWalk
=
BookmarkSpecialIds
.
guids
.
filter
(
guid
=
>
guid
!
=
=
'
places
'
&
&
guid
!
=
=
'
tags
'
)
;
for
(
let
[
node
parent
]
of
walkBookmarksRoots
(
tree
rootsToWalk
)
)
{
let
{
guid
id
type
:
placeType
}
=
node
;
guid
=
BookmarkSpecialIds
.
specialGUIDForId
(
id
)
|
|
guid
;
let
key
;
switch
(
placeType
)
{
case
PlacesUtils
.
TYPE_X_MOZ_PLACE
:
let
query
=
null
;
if
(
node
.
annos
&
&
node
.
uri
.
startsWith
(
"
place
:
"
)
)
{
query
=
node
.
annos
.
find
(
(
{
name
}
)
=
>
name
=
=
=
BookmarkAnnos
.
SMART_BOOKMARKS_ANNO
)
;
}
if
(
query
&
&
query
.
value
)
{
key
=
"
q
"
+
query
.
value
;
}
else
{
key
=
"
b
"
+
node
.
uri
+
"
:
"
+
node
.
title
;
}
break
;
case
PlacesUtils
.
TYPE_X_MOZ_PLACE_CONTAINER
:
key
=
"
f
"
+
node
.
title
;
break
;
case
PlacesUtils
.
TYPE_X_MOZ_PLACE_SEPARATOR
:
key
=
"
s
"
+
node
.
index
;
break
;
default
:
this
.
_log
.
error
(
"
Unknown
place
type
:
'
"
+
placeType
+
"
'
"
)
;
continue
;
}
let
parentName
=
parent
.
title
;
if
(
guidMap
[
parentName
]
=
=
null
)
guidMap
[
parentName
]
=
{
}
;
let
entry
=
new
String
(
guid
)
;
entry
.
hasDupe
=
guidMap
[
parentName
]
[
key
]
!
=
null
;
guidMap
[
parentName
]
[
key
]
=
entry
;
this
.
_log
.
trace
(
"
Mapped
:
"
+
[
parentName
key
entry
entry
.
hasDupe
]
)
;
}
return
guidMap
;
}
_mapDupe
:
function
_mapDupe
(
item
)
{
let
key
;
let
altKey
;
switch
(
item
.
type
)
{
case
"
query
"
:
if
(
item
.
queryId
)
{
key
=
"
q
"
+
item
.
queryId
;
altKey
=
"
b
"
+
item
.
bmkUri
+
"
:
"
+
item
.
title
;
break
;
}
case
"
bookmark
"
:
case
"
microsummary
"
:
key
=
"
b
"
+
item
.
bmkUri
+
"
:
"
+
item
.
title
;
break
;
case
"
folder
"
:
case
"
livemark
"
:
key
=
"
f
"
+
item
.
title
;
break
;
case
"
separator
"
:
key
=
"
s
"
+
item
.
pos
;
break
;
default
:
return
;
}
let
guidMap
=
this
.
_guidMap
;
this
.
_log
.
trace
(
"
Finding
mapping
:
"
+
item
.
parentName
+
"
"
+
key
)
;
let
parent
=
guidMap
[
item
.
parentName
]
;
if
(
!
parent
)
{
this
.
_log
.
trace
(
"
No
parent
=
>
no
dupe
.
"
)
;
return
undefined
;
}
let
dupe
=
parent
[
key
]
;
if
(
dupe
)
{
this
.
_log
.
trace
(
"
Mapped
dupe
:
"
+
dupe
)
;
return
dupe
;
}
if
(
altKey
)
{
dupe
=
parent
[
altKey
]
;
if
(
dupe
)
{
this
.
_log
.
trace
(
"
Mapped
dupe
using
altKey
"
+
altKey
+
"
:
"
+
dupe
)
;
return
dupe
;
}
}
this
.
_log
.
trace
(
"
No
dupe
found
for
key
"
+
key
+
"
/
"
+
altKey
+
"
.
"
)
;
return
undefined
;
}
_syncStartup
:
function
_syncStart
(
)
{
SyncEngine
.
prototype
.
_syncStartup
.
call
(
this
)
;
let
cb
=
Async
.
makeSpinningCallback
(
)
;
Task
.
spawn
(
function
*
(
)
{
if
(
this
.
lastSync
=
=
0
)
{
this
.
_log
.
debug
(
"
Bookmarks
backup
starting
.
"
)
;
yield
PlacesBackups
.
create
(
null
true
)
;
this
.
_log
.
debug
(
"
Bookmarks
backup
done
.
"
)
;
}
}
.
bind
(
this
)
)
.
then
(
cb
ex
=
>
{
this
.
_log
.
warn
(
"
Error
while
backing
up
bookmarks
but
continuing
with
sync
"
ex
)
;
cb
(
)
;
}
)
;
cb
.
wait
(
)
;
this
.
__defineGetter__
(
"
_guidMap
"
function
(
)
{
let
guidMap
;
try
{
guidMap
=
this
.
_buildGUIDMap
(
)
;
}
catch
(
ex
)
{
if
(
Async
.
isShutdownException
(
ex
)
)
{
throw
ex
;
}
this
.
_log
.
warn
(
"
Error
while
building
GUID
map
skipping
all
other
incoming
items
"
ex
)
;
throw
{
code
:
Engine
.
prototype
.
eEngineAbortApplyIncoming
cause
:
ex
}
;
}
delete
this
.
_guidMap
;
return
this
.
_guidMap
=
guidMap
;
}
)
;
this
.
_store
.
_childrenToOrder
=
{
}
;
}
_processIncoming
:
function
(
newitems
)
{
try
{
SyncEngine
.
prototype
.
_processIncoming
.
call
(
this
newitems
)
;
}
finally
{
this
.
_tracker
.
ignoreAll
=
true
;
this
.
_store
.
_orderChildren
(
)
;
this
.
_tracker
.
ignoreAll
=
false
;
delete
this
.
_store
.
_childrenToOrder
;
}
}
_syncFinish
:
function
_syncFinish
(
)
{
SyncEngine
.
prototype
.
_syncFinish
.
call
(
this
)
;
this
.
_tracker
.
_ensureMobileQuery
(
)
;
}
_syncCleanup
:
function
_syncCleanup
(
)
{
SyncEngine
.
prototype
.
_syncCleanup
.
call
(
this
)
;
delete
this
.
_guidMap
;
}
_createRecord
:
function
_createRecord
(
id
)
{
let
record
=
SyncEngine
.
prototype
.
_createRecord
.
call
(
this
id
)
;
let
entry
=
this
.
_mapDupe
(
record
)
;
if
(
entry
!
=
null
&
&
entry
.
hasDupe
)
{
record
.
hasDupe
=
true
;
}
return
record
;
}
_findDupe
:
function
_findDupe
(
item
)
{
this
.
_log
.
trace
(
"
Finding
dupe
for
"
+
item
.
id
+
"
(
already
duped
:
"
+
item
.
hasDupe
+
"
)
.
"
)
;
if
(
item
.
hasDupe
)
{
this
.
_log
.
trace
(
item
.
id
+
"
already
a
dupe
:
not
finding
one
.
"
)
;
return
;
}
let
mapped
=
this
.
_mapDupe
(
item
)
;
this
.
_log
.
debug
(
item
.
id
+
"
mapped
to
"
+
mapped
)
;
return
mapped
?
mapped
.
toString
(
)
:
mapped
;
}
}
;
function
BookmarksStore
(
name
engine
)
{
Store
.
call
(
this
name
engine
)
;
Svc
.
Obs
.
add
(
"
places
-
shutdown
"
function
(
)
{
for
(
let
query
in
this
.
_stmts
)
{
let
stmt
=
this
.
_stmts
[
query
]
;
stmt
.
finalize
(
)
;
}
this
.
_stmts
=
{
}
;
}
this
)
;
}
BookmarksStore
.
prototype
=
{
__proto__
:
Store
.
prototype
itemExists
:
function
BStore_itemExists
(
id
)
{
return
this
.
idForGUID
(
id
true
)
>
0
;
}
applyIncoming
:
function
BStore_applyIncoming
(
record
)
{
this
.
_log
.
debug
(
"
Applying
record
"
+
record
.
id
)
;
let
isSpecial
=
record
.
id
in
BookmarkSpecialIds
;
if
(
record
.
deleted
)
{
if
(
isSpecial
)
{
this
.
_log
.
warn
(
"
Ignoring
deletion
for
special
record
"
+
record
.
id
)
;
return
;
}
Store
.
prototype
.
applyIncoming
.
call
(
this
record
)
;
return
;
}
if
(
isSpecial
&
&
record
.
children
)
{
this
.
_log
.
debug
(
"
Processing
special
node
:
"
+
record
.
id
)
;
this
.
_childrenToOrder
[
record
.
id
]
=
record
.
children
;
return
;
}
if
(
record
.
type
=
=
"
query
"
&
&
!
record
.
bmkUri
)
{
this
.
_log
.
warn
(
"
Skipping
malformed
query
bookmark
:
"
+
record
.
id
)
;
return
;
}
let
parentGUID
=
record
.
parentid
;
if
(
!
parentGUID
)
{
throw
"
Record
"
+
record
.
id
+
"
has
invalid
parentid
:
"
+
parentGUID
;
}
this
.
_log
.
debug
(
"
Local
parent
is
"
+
parentGUID
)
;
Store
.
prototype
.
applyIncoming
.
call
(
this
record
)
;
if
(
record
.
type
=
=
"
folder
"
&
&
record
.
children
)
{
this
.
_childrenToOrder
[
record
.
id
]
=
record
.
children
;
}
}
create
:
function
BStore_create
(
record
)
{
switch
(
record
.
type
)
{
case
"
bookmark
"
:
case
"
query
"
:
case
"
microsummary
"
:
{
let
info
=
{
kind
:
record
.
type
url
:
record
.
bmkUri
parentGuid
:
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
parentid
)
title
:
record
.
title
guid
:
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
id
)
tags
:
record
.
tags
keyword
:
record
.
keyword
}
;
if
(
record
.
loadInSidebar
)
{
info
.
loadInSidebar
=
record
.
loadInSidebar
;
}
if
(
record
.
queryId
)
{
info
.
query
=
record
.
queryId
;
}
if
(
record
.
folderName
)
{
info
.
folder
=
record
.
folderName
;
}
if
(
record
.
description
)
{
info
.
description
=
record
.
description
;
}
let
bmk
=
Async
.
promiseSpinningly
(
PlacesSyncUtils
.
bookmarks
.
insert
(
info
)
)
;
this
.
_log
.
debug
(
"
created
bookmark
"
+
bmk
.
guid
+
"
under
"
+
bmk
.
parentGuid
+
"
as
"
+
bmk
.
title
+
"
"
+
bmk
.
url
.
href
)
;
}
break
;
case
"
folder
"
:
{
let
info
=
{
kind
:
PlacesSyncUtils
.
bookmarks
.
KINDS
.
FOLDER
parentGuid
:
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
parentid
)
guid
:
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
id
)
title
:
record
.
title
}
;
if
(
record
.
description
)
{
info
.
description
=
record
.
description
;
}
let
folder
=
Async
.
promiseSpinningly
(
PlacesSyncUtils
.
bookmarks
.
insert
(
info
)
)
;
this
.
_log
.
debug
(
"
created
folder
"
+
folder
.
guid
+
"
under
"
+
folder
.
parentGuid
+
"
as
"
+
folder
.
title
)
;
}
break
;
case
"
livemark
"
:
if
(
!
record
.
feedUri
)
{
this
.
_log
.
debug
(
"
No
feed
URI
:
skipping
livemark
record
"
+
record
.
id
)
;
return
;
}
let
info
=
{
kind
:
PlacesSyncUtils
.
bookmarks
.
KINDS
.
LIVEMARK
title
:
record
.
title
parentGuid
:
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
parentid
)
feed
:
record
.
feedUri
site
:
record
.
siteUri
guid
:
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
id
)
}
;
let
livemark
=
Async
.
promiseSpinningly
(
PlacesSyncUtils
.
bookmarks
.
insert
(
info
)
)
;
if
(
livemark
)
{
this
.
_log
.
debug
(
"
Created
livemark
"
+
livemark
.
id
+
"
under
"
+
livemark
.
parentId
+
"
as
"
+
livemark
.
title
+
"
"
+
livemark
.
siteURI
.
spec
+
"
"
+
livemark
.
feedURI
.
spec
+
"
GUID
"
+
livemark
.
guid
)
;
}
break
;
case
"
separator
"
:
{
let
separator
=
Async
.
promiseSpinningly
(
PlacesSyncUtils
.
bookmarks
.
insert
(
{
kind
:
PlacesSyncUtils
.
bookmarks
.
KINDS
.
SEPARATOR
parentGuid
:
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
parentid
)
guid
:
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
id
)
}
)
)
;
this
.
_log
.
debug
(
"
created
separator
"
+
separator
.
guid
+
"
under
"
+
separator
.
parentGuid
)
;
}
break
;
case
"
item
"
:
this
.
_log
.
debug
(
"
-
>
got
a
generic
places
item
.
.
do
nothing
?
"
)
;
return
;
default
:
this
.
_log
.
error
(
"
_create
:
Unknown
item
type
:
"
+
record
.
type
)
;
return
;
}
}
remove
:
function
BStore_remove
(
record
)
{
if
(
BookmarkSpecialIds
.
isSpecialGUID
(
record
.
id
)
)
{
this
.
_log
.
warn
(
"
Refusing
to
remove
special
folder
"
+
record
.
id
)
;
return
;
}
let
guid
=
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
id
)
;
try
{
let
info
=
Async
.
promiseSpinningly
(
PlacesSyncUtils
.
bookmarks
.
remove
(
guid
)
)
;
this
.
_log
.
debug
(
Removed
item
{
guid
}
with
type
{
info
.
type
}
)
;
}
catch
(
ex
)
{
this
.
_log
.
debug
(
Error
removing
{
record
.
id
}
ex
)
;
}
}
update
:
function
BStore_update
(
record
)
{
let
info
=
{
parentGuid
:
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
parentid
)
guid
:
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
record
.
id
)
kind
:
record
.
type
}
;
for
(
let
prop
of
Object
.
keys
(
RECORD_PROPS_TO_BOOKMARK_PROPS
)
)
{
let
bmkProp
=
RECORD_PROPS_TO_BOOKMARK_PROPS
[
prop
]
;
if
(
prop
in
record
.
cleartext
)
{
info
[
bmkProp
]
=
record
.
cleartext
[
prop
]
;
}
}
let
bmk
=
Async
.
promiseSpinningly
(
PlacesSyncUtils
.
bookmarks
.
update
(
info
)
)
;
this
.
_log
.
debug
(
"
updated
bookmark
"
+
bmk
.
guid
+
"
under
"
+
bmk
.
parentGuid
)
;
}
_orderChildren
:
function
_orderChildren
(
)
{
let
promises
=
Object
.
keys
(
this
.
_childrenToOrder
)
.
map
(
syncID
=
>
{
let
children
=
this
.
_childrenToOrder
[
syncID
]
;
if
(
!
children
.
length
)
{
return
Promise
.
resolve
(
)
;
}
let
guid
=
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
syncID
)
;
let
childGUIDs
=
children
.
map
(
syncID
=
>
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
syncID
)
)
;
return
PlacesSyncUtils
.
bookmarks
.
order
(
guid
childGUIDs
)
.
catch
(
ex
=
>
{
this
.
_log
.
debug
(
Could
not
order
children
for
{
guid
}
:
{
ex
}
)
;
}
)
;
}
)
;
Async
.
promiseSpinningly
(
Promise
.
all
(
promises
)
)
;
}
changeItemID
:
function
BStore_changeItemID
(
oldID
newID
)
{
this
.
_log
.
debug
(
"
Changing
GUID
"
+
oldID
+
"
to
"
+
newID
)
;
Async
.
promiseSpinningly
(
PlacesSyncUtils
.
bookmarks
.
changeGuid
(
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
oldID
)
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
newID
)
)
)
;
}
_getNode
:
function
BStore__getNode
(
folder
)
{
let
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
setFolders
(
[
folder
]
1
)
;
return
PlacesUtils
.
history
.
executeQuery
(
query
PlacesUtils
.
history
.
getNewQueryOptions
(
)
)
.
root
;
}
_getTags
:
function
BStore__getTags
(
uri
)
{
try
{
if
(
typeof
(
uri
)
=
=
"
string
"
)
uri
=
Utils
.
makeURI
(
uri
)
;
}
catch
(
e
)
{
this
.
_log
.
warn
(
"
Could
not
parse
URI
\
"
"
+
uri
+
"
\
"
:
"
+
e
)
;
}
return
PlacesUtils
.
tagging
.
getTagsForURI
(
uri
{
}
)
;
}
_getDescription
:
function
BStore__getDescription
(
id
)
{
try
{
return
PlacesUtils
.
annotations
.
getItemAnnotation
(
id
BookmarkAnnos
.
DESCRIPTION_ANNO
)
;
}
catch
(
e
)
{
return
null
;
}
}
_isLoadInSidebar
:
function
BStore__isLoadInSidebar
(
id
)
{
return
PlacesUtils
.
annotations
.
itemHasAnnotation
(
id
BookmarkAnnos
.
SIDEBAR_ANNO
)
;
}
createRecord
:
function
createRecord
(
id
collection
)
{
let
placeId
=
this
.
idForGUID
(
id
)
;
let
record
;
if
(
placeId
<
=
0
)
{
record
=
new
PlacesItem
(
collection
id
)
;
record
.
deleted
=
true
;
return
record
;
}
let
parent
=
PlacesUtils
.
bookmarks
.
getFolderIdForItem
(
placeId
)
;
switch
(
PlacesUtils
.
bookmarks
.
getItemType
(
placeId
)
)
{
case
PlacesUtils
.
bookmarks
.
TYPE_BOOKMARK
:
let
bmkUri
=
PlacesUtils
.
bookmarks
.
getBookmarkURI
(
placeId
)
.
spec
;
if
(
bmkUri
.
indexOf
(
"
place
:
"
)
=
=
0
)
{
record
=
new
BookmarkQuery
(
collection
id
)
;
let
folder
=
bmkUri
.
match
(
/
[
:
&
]
folder
=
(
\
d
+
)
/
)
;
try
{
if
(
folder
!
=
null
)
{
folder
=
folder
[
1
]
;
record
.
folderName
=
PlacesUtils
.
bookmarks
.
getItemTitle
(
folder
)
;
this
.
_log
.
trace
(
"
query
id
:
"
+
folder
+
"
=
"
+
record
.
folderName
)
;
}
}
catch
(
ex
)
{
}
try
{
let
anno
=
PlacesUtils
.
annotations
.
getItemAnnotation
(
placeId
BookmarkAnnos
.
SMART_BOOKMARKS_ANNO
)
;
if
(
anno
!
=
null
)
{
this
.
_log
.
trace
(
"
query
anno
:
"
+
BookmarkAnnos
.
SMART_BOOKMARKS_ANNO
+
"
=
"
+
anno
)
;
record
.
queryId
=
anno
;
}
}
catch
(
ex
)
{
}
}
else
{
record
=
new
Bookmark
(
collection
id
)
;
}
record
.
title
=
PlacesUtils
.
bookmarks
.
getItemTitle
(
placeId
)
;
record
.
parentName
=
PlacesUtils
.
bookmarks
.
getItemTitle
(
parent
)
;
record
.
bmkUri
=
bmkUri
;
record
.
tags
=
this
.
_getTags
(
record
.
bmkUri
)
;
record
.
keyword
=
PlacesUtils
.
bookmarks
.
getKeywordForBookmark
(
placeId
)
;
record
.
description
=
this
.
_getDescription
(
placeId
)
;
record
.
loadInSidebar
=
this
.
_isLoadInSidebar
(
placeId
)
;
break
;
case
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
:
if
(
PlacesUtils
.
annotations
.
itemHasAnnotation
(
placeId
PlacesUtils
.
LMANNO_FEEDURI
)
)
{
record
=
new
Livemark
(
collection
id
)
;
let
as
=
PlacesUtils
.
annotations
;
record
.
feedUri
=
as
.
getItemAnnotation
(
placeId
PlacesUtils
.
LMANNO_FEEDURI
)
;
try
{
record
.
siteUri
=
as
.
getItemAnnotation
(
placeId
PlacesUtils
.
LMANNO_SITEURI
)
;
}
catch
(
ex
)
{
}
}
else
{
record
=
new
BookmarkFolder
(
collection
id
)
;
}
if
(
parent
>
0
)
record
.
parentName
=
PlacesUtils
.
bookmarks
.
getItemTitle
(
parent
)
;
record
.
title
=
PlacesUtils
.
bookmarks
.
getItemTitle
(
placeId
)
;
record
.
description
=
this
.
_getDescription
(
placeId
)
;
record
.
children
=
Async
.
promiseSpinningly
(
PlacesSyncUtils
.
bookmarks
.
fetchChildGuids
(
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
id
)
)
)
;
break
;
case
PlacesUtils
.
bookmarks
.
TYPE_SEPARATOR
:
record
=
new
BookmarkSeparator
(
collection
id
)
;
if
(
parent
>
0
)
record
.
parentName
=
PlacesUtils
.
bookmarks
.
getItemTitle
(
parent
)
;
record
.
pos
=
PlacesUtils
.
bookmarks
.
getItemIndex
(
placeId
)
;
break
;
default
:
record
=
new
PlacesItem
(
collection
id
)
;
this
.
_log
.
warn
(
"
Unknown
item
type
cannot
serialize
:
"
+
PlacesUtils
.
bookmarks
.
getItemType
(
placeId
)
)
;
}
record
.
parentid
=
this
.
GUIDForId
(
parent
)
;
record
.
sortindex
=
this
.
_calculateIndex
(
record
)
;
return
record
;
}
_stmts
:
{
}
_getStmt
:
function
(
query
)
{
if
(
query
in
this
.
_stmts
)
{
return
this
.
_stmts
[
query
]
;
}
this
.
_log
.
trace
(
"
Creating
SQL
statement
:
"
+
query
)
;
let
db
=
PlacesUtils
.
history
.
QueryInterface
(
Ci
.
nsPIPlacesDatabase
)
.
DBConnection
;
return
this
.
_stmts
[
query
]
=
db
.
createAsyncStatement
(
query
)
;
}
get
_frecencyStm
(
)
{
return
this
.
_getStmt
(
"
SELECT
frecency
"
+
"
FROM
moz_places
"
+
"
WHERE
url_hash
=
hash
(
:
url
)
AND
url
=
:
url
"
+
"
LIMIT
1
"
)
;
}
_frecencyCols
:
[
"
frecency
"
]
GUIDForId
:
function
GUIDForId
(
id
)
{
let
special
=
BookmarkSpecialIds
.
specialGUIDForId
(
id
)
;
if
(
special
)
return
special
;
return
Async
.
promiseSpinningly
(
PlacesSyncUtils
.
bookmarks
.
ensureGuidForId
(
id
)
)
;
}
idForGUID
:
function
idForGUID
(
guid
noCreate
)
{
guid
=
guid
.
toString
(
)
;
if
(
BookmarkSpecialIds
.
isSpecialGUID
(
guid
)
)
return
BookmarkSpecialIds
.
specialIdForGUID
(
guid
!
noCreate
)
;
return
Async
.
promiseSpinningly
(
PlacesUtils
.
promiseItemId
(
guid
)
.
catch
(
ex
=
>
-
1
)
)
;
}
_calculateIndex
:
function
_calculateIndex
(
record
)
{
if
(
record
.
type
=
=
"
folder
"
)
return
FOLDER_SORTINDEX
;
let
index
=
0
;
if
(
record
.
parentid
=
=
"
toolbar
"
)
index
+
=
150
;
if
(
record
.
bmkUri
!
=
null
)
{
this
.
_frecencyStm
.
params
.
url
=
record
.
bmkUri
;
let
result
=
Async
.
querySpinningly
(
this
.
_frecencyStm
this
.
_frecencyCols
)
;
if
(
result
.
length
)
index
+
=
result
[
0
]
.
frecency
;
}
return
index
;
}
_getChildren
:
function
BStore_getChildren
(
guid
items
)
{
let
node
=
guid
;
if
(
typeof
(
node
)
=
=
"
string
"
)
{
let
nodeID
=
this
.
idForGUID
(
guid
true
)
;
if
(
!
nodeID
)
{
this
.
_log
.
debug
(
"
No
node
for
GUID
"
+
guid
+
"
;
returning
no
children
.
"
)
;
return
items
;
}
node
=
this
.
_getNode
(
nodeID
)
;
}
if
(
node
.
type
=
=
node
.
RESULT_TYPE_FOLDER
)
{
node
.
QueryInterface
(
Ci
.
nsINavHistoryQueryResultNode
)
;
node
.
containerOpen
=
true
;
try
{
for
(
let
i
=
0
;
i
<
node
.
childCount
;
i
+
+
)
{
let
child
=
node
.
getChild
(
i
)
;
items
[
this
.
GUIDForId
(
child
.
itemId
)
]
=
true
;
this
.
_getChildren
(
child
items
)
;
}
}
finally
{
node
.
containerOpen
=
false
;
}
}
return
items
;
}
getAllIDs
:
function
BStore_getAllIDs
(
)
{
let
items
=
{
"
menu
"
:
true
"
toolbar
"
:
true
"
unfiled
"
:
true
}
;
if
(
BookmarkSpecialIds
.
findMobileRoot
(
false
)
)
{
items
[
"
mobile
"
]
=
true
;
}
for
(
let
guid
of
BookmarkSpecialIds
.
guids
)
{
if
(
guid
!
=
"
places
"
&
&
guid
!
=
"
tags
"
)
this
.
_getChildren
(
guid
items
)
;
}
return
items
;
}
wipe
:
function
BStore_wipe
(
)
{
let
cb
=
Async
.
makeSpinningCallback
(
)
;
Task
.
spawn
(
function
*
(
)
{
yield
PlacesBackups
.
create
(
null
true
)
;
for
(
let
syncID
of
BookmarkSpecialIds
.
guids
)
{
if
(
syncID
=
=
"
places
"
)
{
continue
;
}
if
(
syncID
=
=
"
mobile
"
&
&
!
BookmarkSpecialIds
.
findMobileRoot
(
false
)
)
{
continue
;
}
let
guid
=
BookmarkSpecialIds
.
syncIDToPlacesGUID
(
syncID
)
;
yield
PlacesSyncUtils
.
bookmarks
.
clear
(
guid
)
;
}
cb
(
)
;
}
)
;
cb
.
wait
(
)
;
}
}
;
function
BookmarksTracker
(
name
engine
)
{
this
.
_batchDepth
=
0
;
this
.
_batchSawScoreIncrement
=
false
;
Tracker
.
call
(
this
name
engine
)
;
Svc
.
Obs
.
add
(
"
places
-
shutdown
"
this
)
;
}
BookmarksTracker
.
prototype
=
{
__proto__
:
Tracker
.
prototype
startTracking
:
function
(
)
{
PlacesUtils
.
bookmarks
.
addObserver
(
this
true
)
;
Svc
.
Obs
.
add
(
"
bookmarks
-
restore
-
begin
"
this
)
;
Svc
.
Obs
.
add
(
"
bookmarks
-
restore
-
success
"
this
)
;
Svc
.
Obs
.
add
(
"
bookmarks
-
restore
-
failed
"
this
)
;
}
stopTracking
:
function
(
)
{
PlacesUtils
.
bookmarks
.
removeObserver
(
this
)
;
Svc
.
Obs
.
remove
(
"
bookmarks
-
restore
-
begin
"
this
)
;
Svc
.
Obs
.
remove
(
"
bookmarks
-
restore
-
success
"
this
)
;
Svc
.
Obs
.
remove
(
"
bookmarks
-
restore
-
failed
"
this
)
;
}
observe
:
function
observe
(
subject
topic
data
)
{
Tracker
.
prototype
.
observe
.
call
(
this
subject
topic
data
)
;
switch
(
topic
)
{
case
"
bookmarks
-
restore
-
begin
"
:
this
.
_log
.
debug
(
"
Ignoring
changes
from
importing
bookmarks
.
"
)
;
this
.
ignoreAll
=
true
;
break
;
case
"
bookmarks
-
restore
-
success
"
:
this
.
_log
.
debug
(
"
Tracking
all
items
on
successful
import
.
"
)
;
this
.
ignoreAll
=
false
;
this
.
_log
.
debug
(
"
Restore
succeeded
:
wiping
server
and
other
clients
.
"
)
;
this
.
engine
.
service
.
resetClient
(
[
this
.
name
]
)
;
this
.
engine
.
service
.
wipeServer
(
[
this
.
name
]
)
;
this
.
engine
.
service
.
clientsEngine
.
sendCommand
(
"
wipeEngine
"
[
this
.
name
]
)
;
break
;
case
"
bookmarks
-
restore
-
failed
"
:
this
.
_log
.
debug
(
"
Tracking
all
items
on
failed
import
.
"
)
;
this
.
ignoreAll
=
false
;
break
;
}
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsINavBookmarkObserver
Ci
.
nsINavBookmarkObserver_MOZILLA_1_9_1_ADDITIONS
Ci
.
nsISupportsWeakReference
]
)
_add
:
function
BMT__add
(
itemId
guid
)
{
guid
=
BookmarkSpecialIds
.
specialGUIDForId
(
itemId
)
|
|
guid
;
if
(
this
.
addChangedID
(
guid
)
)
this
.
_upScore
(
)
;
}
_upScore
:
function
BMT__upScore
(
)
{
if
(
this
.
_batchDepth
=
=
0
)
{
this
.
score
+
=
SCORE_INCREMENT_XLARGE
;
}
else
{
this
.
_batchSawScoreIncrement
=
true
;
}
}
_ignore
:
function
BMT__ignore
(
itemId
folder
guid
)
{
if
(
this
.
ignoreAll
)
return
true
;
if
(
folder
=
=
null
)
{
try
{
folder
=
PlacesUtils
.
bookmarks
.
getFolderIdForItem
(
itemId
)
;
}
catch
(
ex
)
{
this
.
_log
.
debug
(
"
getFolderIdForItem
(
"
+
itemId
+
"
)
threw
;
calling
_ensureMobileQuery
.
"
)
;
this
.
_ensureMobileQuery
(
)
;
folder
=
PlacesUtils
.
bookmarks
.
getFolderIdForItem
(
itemId
)
;
}
}
let
tags
=
BookmarkSpecialIds
.
tags
;
if
(
folder
=
=
tags
)
return
true
;
if
(
PlacesUtils
.
bookmarks
.
getFolderIdForItem
(
folder
)
=
=
tags
)
return
true
;
if
(
PlacesUtils
.
annotations
.
itemHasAnnotation
(
itemId
BookmarkAnnos
.
EXCLUDEBACKUP_ANNO
)
)
{
this
.
removeChangedID
(
guid
)
;
return
true
;
}
return
false
;
}
onItemAdded
:
function
BMT_onItemAdded
(
itemId
folder
index
itemType
uri
title
dateAdded
guid
parentGuid
)
{
if
(
this
.
_ignore
(
itemId
folder
guid
)
)
return
;
this
.
_log
.
trace
(
"
onItemAdded
:
"
+
itemId
)
;
this
.
_add
(
itemId
guid
)
;
this
.
_add
(
folder
parentGuid
)
;
}
onItemRemoved
:
function
(
itemId
parentId
index
type
uri
guid
parentGuid
)
{
if
(
this
.
_ignore
(
itemId
parentId
guid
)
)
{
return
;
}
this
.
_log
.
trace
(
"
onItemRemoved
:
"
+
itemId
)
;
this
.
_add
(
itemId
guid
)
;
this
.
_add
(
parentId
parentGuid
)
;
}
_ensureMobileQuery
:
function
_ensureMobileQuery
(
)
{
let
find
=
val
=
>
PlacesUtils
.
annotations
.
getItemsWithAnnotation
(
BookmarkAnnos
.
ORGANIZERQUERY_ANNO
{
}
)
.
filter
(
id
=
>
PlacesUtils
.
annotations
.
getItemAnnotation
(
id
BookmarkAnnos
.
ORGANIZERQUERY_ANNO
)
=
=
val
)
;
let
all
=
find
(
BookmarkAnnos
.
ALLBOOKMARKS_ANNO
)
;
if
(
all
.
length
=
=
0
)
return
;
this
.
ignoreAll
=
true
;
let
mobile
=
find
(
BookmarkAnnos
.
MOBILE_ANNO
)
;
let
queryURI
=
Utils
.
makeURI
(
"
place
:
folder
=
"
+
BookmarkSpecialIds
.
mobile
)
;
let
title
=
Str
.
sync
.
get
(
"
mobile
.
label
"
)
;
if
(
PlacesUtils
.
bookmarks
.
getIdForItemAt
(
BookmarkSpecialIds
.
mobile
0
)
=
=
-
1
)
{
if
(
mobile
.
length
!
=
0
)
PlacesUtils
.
bookmarks
.
removeItem
(
mobile
[
0
]
SOURCE_SYNC
)
;
}
else
if
(
mobile
.
length
=
=
0
)
{
let
query
=
PlacesUtils
.
bookmarks
.
insertBookmark
(
all
[
0
]
queryURI
-
1
title
null
SOURCE_SYNC
)
;
PlacesUtils
.
annotations
.
setItemAnnotation
(
query
BookmarkAnnos
.
ORGANIZERQUERY_ANNO
BookmarkAnnos
.
MOBILE_ANNO
0
PlacesUtils
.
annotations
.
EXPIRE_NEVER
SOURCE_SYNC
)
;
PlacesUtils
.
annotations
.
setItemAnnotation
(
query
BookmarkAnnos
.
EXCLUDEBACKUP_ANNO
1
0
PlacesUtils
.
annotations
.
EXPIRE_NEVER
SOURCE_SYNC
)
;
}
else
if
(
PlacesUtils
.
bookmarks
.
getItemTitle
(
mobile
[
0
]
)
!
=
title
)
{
PlacesUtils
.
bookmarks
.
setItemTitle
(
mobile
[
0
]
title
SOURCE_SYNC
)
;
}
this
.
ignoreAll
=
false
;
}
onItemChanged
:
function
BMT_onItemChanged
(
itemId
property
isAnno
value
lastModified
itemType
parentId
guid
parentGuid
)
{
if
(
this
.
ignoreAll
)
return
;
if
(
isAnno
&
&
(
ANNOS_TO_TRACK
.
indexOf
(
property
)
=
=
-
1
)
)
return
;
if
(
property
=
=
"
favicon
"
)
return
;
if
(
this
.
_ignore
(
itemId
parentId
guid
)
)
return
;
this
.
_log
.
trace
(
"
onItemChanged
:
"
+
itemId
+
(
"
"
+
property
+
(
isAnno
?
"
(
anno
)
"
:
"
"
)
)
+
(
value
?
(
"
=
\
"
"
+
value
+
"
\
"
"
)
:
"
"
)
)
;
this
.
_add
(
itemId
guid
)
;
}
onItemMoved
:
function
BMT_onItemMoved
(
itemId
oldParent
oldIndex
newParent
newIndex
itemType
guid
oldParentGuid
newParentGuid
)
{
if
(
this
.
_ignore
(
itemId
newParent
guid
)
)
return
;
this
.
_log
.
trace
(
"
onItemMoved
:
"
+
itemId
)
;
this
.
_add
(
oldParent
oldParentGuid
)
;
if
(
oldParent
!
=
newParent
)
{
this
.
_add
(
itemId
guid
)
;
this
.
_add
(
newParent
newParentGuid
)
;
}
PlacesUtils
.
annotations
.
removeItemAnnotation
(
itemId
BookmarkAnnos
.
PARENT_ANNO
SOURCE_SYNC
)
;
}
onBeginUpdateBatch
:
function
(
)
{
+
+
this
.
_batchDepth
;
}
onEndUpdateBatch
:
function
(
)
{
if
(
-
-
this
.
_batchDepth
=
=
=
0
&
&
this
.
_batchSawScoreIncrement
)
{
this
.
score
+
=
SCORE_INCREMENT_XLARGE
;
this
.
_batchSawScoreIncrement
=
false
;
}
}
onItemVisited
:
function
(
)
{
}
}
;
