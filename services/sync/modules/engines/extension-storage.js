"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ExtensionStorageEngine
"
]
;
const
{
SCORE_INCREMENT_MEDIUM
MULTI_DEVICE_THRESHOLD
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
constants
.
js
"
)
;
const
{
SyncEngine
Tracker
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
.
js
"
)
;
const
{
Svc
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
extensionStorageSync
"
"
resource
:
/
/
gre
/
modules
/
ExtensionStorageSync
.
jsm
"
)
;
function
ExtensionStorageEngine
(
service
)
{
SyncEngine
.
call
(
this
"
Extension
-
Storage
"
service
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
_skipPercentageChance
"
"
services
.
sync
.
extension
-
storage
.
skipPercentageChance
"
0
)
;
}
ExtensionStorageEngine
.
prototype
=
{
__proto__
:
SyncEngine
.
prototype
_trackerObj
:
ExtensionStorageTracker
_storeObj
:
undefined
_recordObj
:
undefined
syncPriority
:
10
allowSkippedRecord
:
false
async
_sync
(
)
{
return
extensionStorageSync
.
syncAll
(
)
;
}
get
enabled
(
)
{
const
forced
=
Svc
.
Prefs
.
get
(
"
engine
.
"
+
this
.
prefName
+
"
.
force
"
undefined
)
;
if
(
forced
!
=
=
undefined
)
{
return
forced
;
}
return
Svc
.
Prefs
.
get
(
"
engine
.
addons
"
false
)
;
}
_wipeClient
(
)
{
return
extensionStorageSync
.
clearAll
(
)
;
}
shouldSkipSync
(
syncReason
)
{
if
(
syncReason
=
=
"
user
"
|
|
syncReason
=
=
"
startup
"
)
{
this
.
_log
.
info
(
Not
skipping
extension
storage
sync
:
reason
=
=
{
syncReason
}
)
;
return
false
;
}
if
(
this
.
_tracker
.
score
>
=
MULTI_DEVICE_THRESHOLD
)
{
this
.
_log
.
info
(
"
Not
skipping
extension
storage
sync
:
Would
trigger
resync
anyway
"
)
;
return
false
;
}
let
probability
=
this
.
_skipPercentageChance
/
100
.
0
;
let
shouldSkip
=
probability
>
Math
.
random
(
)
;
this
.
_log
.
info
(
Skipping
extension
-
storage
sync
with
a
chance
of
{
probability
}
:
{
shouldSkip
}
)
;
return
shouldSkip
;
}
}
;
function
ExtensionStorageTracker
(
name
engine
)
{
Tracker
.
call
(
this
name
engine
)
;
this
.
_ignoreAll
=
false
;
}
ExtensionStorageTracker
.
prototype
=
{
__proto__
:
Tracker
.
prototype
get
ignoreAll
(
)
{
return
this
.
_ignoreAll
;
}
set
ignoreAll
(
value
)
{
this
.
_ignoreAll
=
value
;
}
onStart
(
)
{
Svc
.
Obs
.
add
(
"
ext
.
storage
.
sync
-
changed
"
this
.
asyncObserver
)
;
}
onStop
(
)
{
Svc
.
Obs
.
remove
(
"
ext
.
storage
.
sync
-
changed
"
this
.
asyncObserver
)
;
}
async
observe
(
subject
topic
data
)
{
if
(
this
.
ignoreAll
)
{
return
;
}
if
(
topic
!
=
=
"
ext
.
storage
.
sync
-
changed
"
)
{
return
;
}
this
.
score
+
=
SCORE_INCREMENT_MEDIUM
;
}
}
;
