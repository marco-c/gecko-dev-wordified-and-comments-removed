"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ExtensionStorageEngine
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
constants
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
async
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
extensionStorageSync
"
"
resource
:
/
/
gre
/
modules
/
ExtensionStorageSync
.
jsm
"
)
;
this
.
ExtensionStorageEngine
=
function
ExtensionStorageEngine
(
service
)
{
SyncEngine
.
call
(
this
"
Extension
-
Storage
"
service
)
;
}
;
ExtensionStorageEngine
.
prototype
=
{
__proto__
:
SyncEngine
.
prototype
_trackerObj
:
ExtensionStorageTracker
_storeObj
:
undefined
_recordObj
:
undefined
syncPriority
:
10
allowSkippedRecord
:
false
_sync
(
)
{
return
Async
.
promiseSpinningly
(
extensionStorageSync
.
syncAll
(
)
)
;
}
get
enabled
(
)
{
const
forced
=
Svc
.
Prefs
.
get
(
"
engine
.
"
+
this
.
prefName
+
"
.
force
"
undefined
)
;
if
(
forced
!
=
=
undefined
)
{
return
forced
;
}
return
Svc
.
Prefs
.
get
(
"
engine
.
addons
"
false
)
;
}
}
;
function
ExtensionStorageTracker
(
name
engine
)
{
Tracker
.
call
(
this
name
engine
)
;
}
ExtensionStorageTracker
.
prototype
=
{
__proto__
:
Tracker
.
prototype
startTracking
(
)
{
Svc
.
Obs
.
add
(
"
ext
.
storage
.
sync
-
changed
"
this
)
;
}
stopTracking
(
)
{
Svc
.
Obs
.
remove
(
"
ext
.
storage
.
sync
-
changed
"
this
)
;
}
observe
(
subject
topic
data
)
{
Tracker
.
prototype
.
observe
.
call
(
this
subject
topic
data
)
;
if
(
this
.
ignoreAll
)
{
return
;
}
if
(
topic
!
=
=
"
ext
.
storage
.
sync
-
changed
"
)
{
return
;
}
this
.
score
+
=
SCORE_INCREMENT_MEDIUM
;
}
ignoreID
(
)
{
}
unignoreID
(
)
{
}
addChangedID
(
)
{
}
removeChangedID
(
)
{
}
clearChangedIDs
(
)
{
}
}
;
