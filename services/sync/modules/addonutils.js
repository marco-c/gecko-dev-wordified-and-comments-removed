"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
AddonUtils
"
]
;
var
{
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonRepository
"
"
resource
:
/
/
gre
/
modules
/
addons
/
AddonRepository
.
jsm
"
)
;
function
AddonUtilsInternal
(
)
{
this
.
_log
=
Log
.
repository
.
getLogger
(
"
Sync
.
AddonUtils
"
)
;
this
.
_log
.
Level
=
Log
.
Level
[
Svc
.
Prefs
.
get
(
"
log
.
logger
.
addonutils
"
)
]
;
}
AddonUtilsInternal
.
prototype
=
{
getInstallFromSearchResult
:
function
getInstallFromSearchResult
(
addon
cb
)
{
this
.
_log
.
debug
(
"
Obtaining
install
for
"
+
addon
.
id
)
;
AddonManager
.
getInstallForURL
(
addon
.
sourceURI
.
spec
function
handleInstall
(
install
)
{
cb
(
null
install
)
;
}
"
application
/
x
-
xpinstall
"
undefined
addon
.
name
addon
.
iconURL
addon
.
version
)
;
}
installAddonFromSearchResult
:
function
installAddonFromSearchResult
(
addon
options
cb
)
{
this
.
_log
.
info
(
"
Trying
to
install
add
-
on
from
search
result
:
"
+
addon
.
id
)
;
this
.
getInstallFromSearchResult
(
addon
(
error
install
)
=
>
{
if
(
error
)
{
cb
(
error
null
)
;
return
;
}
if
(
!
install
)
{
cb
(
new
Error
(
"
AddonInstall
not
available
:
"
+
addon
.
id
)
null
)
;
return
;
}
try
{
this
.
_log
.
info
(
"
Installing
"
+
addon
.
id
)
;
let
log
=
this
.
_log
;
let
listener
=
{
onInstallStarted
:
function
onInstallStarted
(
install
)
{
if
(
!
options
)
{
return
;
}
if
(
options
.
syncGUID
)
{
log
.
info
(
"
Setting
syncGUID
of
"
+
install
.
name
+
"
:
"
+
options
.
syncGUID
)
;
install
.
addon
.
syncGUID
=
options
.
syncGUID
;
}
if
(
"
enabled
"
in
options
&
&
!
options
.
enabled
)
{
log
.
info
(
"
Marking
add
-
on
as
disabled
for
install
:
"
+
install
.
name
)
;
install
.
addon
.
userDisabled
=
true
;
}
}
onInstallEnded
(
install
addon
)
{
install
.
removeListener
(
listener
)
;
cb
(
null
{
id
:
addon
.
id
install
addon
}
)
;
}
onInstallFailed
(
install
)
{
install
.
removeListener
(
listener
)
;
cb
(
new
Error
(
"
Install
failed
:
"
+
install
.
error
)
null
)
;
}
onDownloadFailed
(
install
)
{
install
.
removeListener
(
listener
)
;
cb
(
new
Error
(
"
Download
failed
:
"
+
install
.
error
)
null
)
;
}
}
;
install
.
addListener
(
listener
)
;
install
.
install
(
)
;
}
catch
(
ex
)
{
this
.
_log
.
error
(
"
Error
installing
add
-
on
"
ex
)
;
cb
(
ex
null
)
;
}
}
)
;
}
async
uninstallAddon
(
addon
)
{
return
new
Promise
(
res
=
>
{
let
listener
=
{
onUninstalling
(
uninstalling
needsRestart
)
{
if
(
addon
.
id
!
=
uninstalling
.
id
)
{
return
;
}
if
(
!
needsRestart
)
{
return
;
}
AddonManager
.
removeAddonListener
(
listener
)
;
res
(
addon
)
;
}
onUninstalled
(
uninstalled
)
{
if
(
addon
.
id
!
=
uninstalled
.
id
)
{
return
;
}
AddonManager
.
removeAddonListener
(
listener
)
;
res
(
addon
)
;
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
addon
.
uninstall
(
)
;
}
)
;
}
installAddons
:
function
installAddons
(
installs
cb
)
{
if
(
!
cb
)
{
throw
new
Error
(
"
Invalid
argument
:
cb
is
not
defined
.
"
)
;
}
let
ids
=
[
]
;
for
(
let
addon
of
installs
)
{
ids
.
push
(
addon
.
id
)
;
}
AddonRepository
.
getAddonsByIDs
(
ids
{
searchSucceeded
:
(
addons
addonsLength
total
)
=
>
{
this
.
_log
.
info
(
"
Found
"
+
addonsLength
+
"
/
"
+
ids
.
length
+
"
add
-
ons
during
repository
search
.
"
)
;
let
ourResult
=
{
installedIDs
:
[
]
installs
:
[
]
addons
:
[
]
skipped
:
[
]
errors
:
[
]
}
;
if
(
!
addonsLength
)
{
cb
(
null
ourResult
)
;
return
;
}
let
expectedInstallCount
=
0
;
let
finishedCount
=
0
;
let
installCallback
=
function
installCallback
(
error
result
)
{
finishedCount
+
+
;
if
(
error
)
{
ourResult
.
errors
.
push
(
error
)
;
}
else
{
ourResult
.
installedIDs
.
push
(
result
.
id
)
;
ourResult
.
installs
.
push
(
result
.
install
)
;
ourResult
.
addons
.
push
(
result
.
addon
)
;
}
if
(
finishedCount
>
=
expectedInstallCount
)
{
if
(
ourResult
.
errors
.
length
>
0
)
{
cb
(
new
Error
(
"
1
or
more
add
-
ons
failed
to
install
"
)
ourResult
)
;
}
else
{
cb
(
null
ourResult
)
;
}
}
}
;
let
toInstall
=
[
]
;
for
(
let
addon
of
addons
)
{
let
options
;
for
(
let
install
of
installs
)
{
if
(
install
.
id
=
=
addon
.
id
)
{
options
=
install
;
break
;
}
}
if
(
!
this
.
canInstallAddon
(
addon
options
)
)
{
ourResult
.
skipped
.
push
(
addon
.
id
)
;
continue
;
}
toInstall
.
push
(
addon
)
;
try
{
addon
.
sourceURI
.
QueryInterface
(
Ci
.
nsIURL
)
;
}
catch
(
ex
)
{
this
.
_log
.
warn
(
"
Unable
to
QI
sourceURI
to
nsIURL
:
"
+
addon
.
sourceURI
.
spec
)
;
continue
;
}
let
params
=
addon
.
sourceURI
.
query
.
split
(
"
&
"
)
.
map
(
function
rewrite
(
param
)
{
if
(
param
.
indexOf
(
"
src
=
"
)
=
=
0
)
{
return
"
src
=
sync
"
;
}
return
param
;
}
)
;
addon
.
sourceURI
.
query
=
params
.
join
(
"
&
"
)
;
}
expectedInstallCount
=
toInstall
.
length
;
if
(
!
expectedInstallCount
)
{
cb
(
null
ourResult
)
;
return
;
}
for
(
let
addon
of
toInstall
)
{
let
options
=
{
}
;
for
(
let
install
of
installs
)
{
if
(
install
.
id
=
=
addon
.
id
)
{
options
=
install
;
break
;
}
}
this
.
installAddonFromSearchResult
(
addon
options
installCallback
)
;
}
}
searchFailed
:
function
searchFailed
(
)
{
cb
(
new
Error
(
"
AddonRepository
search
failed
"
)
null
)
;
}
}
)
;
}
canInstallAddon
(
addon
options
)
{
if
(
!
addon
.
sourceURI
)
{
this
.
_log
.
info
(
"
Skipping
install
of
add
-
on
because
missing
"
+
"
sourceURI
:
"
+
addon
.
id
)
;
return
false
;
}
let
requireSecureURI
=
true
;
if
(
options
&
&
options
.
requireSecureURI
!
=
=
undefined
)
{
requireSecureURI
=
options
.
requireSecureURI
;
}
if
(
requireSecureURI
)
{
let
scheme
=
addon
.
sourceURI
.
scheme
;
if
(
scheme
!
=
"
https
"
)
{
this
.
_log
.
info
(
Skipping
install
of
add
-
on
"
{
addon
.
id
}
"
because
sourceURI
'
s
scheme
of
"
{
scheme
}
"
is
not
trusted
)
;
return
false
;
}
}
this
.
_log
.
info
(
Add
-
on
"
{
addon
.
id
}
"
is
able
to
be
installed
)
;
return
true
;
}
updateUserDisabled
(
addon
value
)
{
if
(
addon
.
userDisabled
=
=
value
)
{
return
;
}
this
.
_log
.
info
(
"
Updating
userDisabled
flag
:
"
+
addon
.
id
+
"
-
>
"
+
value
)
;
addon
.
userDisabled
=
!
!
value
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
this
"
AddonUtils
"
function
(
)
{
return
new
AddonUtilsInternal
(
)
;
}
)
;
