Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
/
bookmarks
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
service
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
Service
.
engineManager
.
register
(
BookmarksEngine
)
;
var
engine
=
Service
.
engineManager
.
get
(
"
bookmarks
"
)
;
var
store
=
engine
.
_store
;
var
tracker
=
engine
.
_tracker
;
add_task
(
async
function
test_ignore_invalid_uri
(
)
{
_
(
"
Ensure
that
we
don
'
t
die
with
invalid
bookmarks
.
"
)
;
let
bmid
=
PlacesUtils
.
bookmarks
.
insertBookmark
(
PlacesUtils
.
unfiledBookmarksFolderId
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
/
"
)
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
"
the
title
"
)
;
await
PlacesUtils
.
withConnectionWrapper
(
"
test_ignore_invalid_uri
"
async
function
(
db
)
{
await
db
.
execute
(
UPDATE
moz_places
SET
url
=
:
url
url_hash
=
hash
(
:
url
)
WHERE
id
=
(
SELECT
b
.
fk
FROM
moz_bookmarks
b
WHERE
b
.
id
=
:
id
LIMIT
1
)
{
id
:
bmid
url
:
"
<
invalid
url
>
"
}
)
;
}
)
;
engine
.
_buildGUIDMap
(
)
;
}
)
;
add_task
(
async
function
test_ignore_missing_uri
(
)
{
_
(
"
Ensure
that
we
don
'
t
die
with
a
bookmark
referencing
an
invalid
bookmark
id
.
"
)
;
let
bmid
=
PlacesUtils
.
bookmarks
.
insertBookmark
(
PlacesUtils
.
unfiledBookmarksFolderId
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
/
"
)
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
"
the
title
"
)
;
await
PlacesUtils
.
withConnectionWrapper
(
"
test_ignore_missing_uri
"
async
function
(
db
)
{
await
db
.
execute
(
UPDATE
moz_bookmarks
SET
fk
=
999999
WHERE
id
=
:
id
{
id
:
bmid
}
)
;
}
)
;
engine
.
_buildGUIDMap
(
)
;
}
)
;
function
run_test
(
)
{
initTestLogging
(
"
Trace
"
)
;
run_next_test
(
)
;
}
