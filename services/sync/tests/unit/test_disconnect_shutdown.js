"
use
strict
"
;
const
{
SyncDisconnect
SyncDisconnectInternal
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
SyncDisconnect
.
jsm
"
)
;
const
{
AsyncShutdown
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_shutdown_blocker
(
)
{
let
spySignout
=
sinon
.
stub
(
SyncDisconnectInternal
"
doSyncAndAccountDisconnect
"
)
;
SyncDisconnectInternal
.
lockRetryInterval
=
1000
;
SyncDisconnectInternal
.
lockRetryCount
=
10000
;
let
spyBrowser
=
sinon
.
stub
(
SyncDisconnectInternal
"
doSanitizeBrowserData
"
)
;
let
mockEngine1
=
{
enabled
:
true
name
:
"
Test
Engine
1
"
wipeClient
:
sinon
.
spy
(
)
}
;
let
mockEngine2
=
{
enabled
:
false
name
:
"
Test
Engine
2
"
wipeClient
:
sinon
.
spy
(
)
}
;
let
Weave
=
{
Service
:
{
enabled
:
true
lock
:
(
)
=
>
false
unlock
:
sinon
.
spy
(
)
engineManager
:
{
getAll
:
sinon
.
stub
(
)
.
returns
(
[
mockEngine1
mockEngine2
]
)
}
errorHandler
:
{
resetFileLog
:
sinon
.
spy
(
)
}
}
}
;
let
weaveStub
=
sinon
.
stub
(
SyncDisconnectInternal
"
getWeave
"
)
;
weaveStub
.
returns
(
Weave
)
;
let
promiseDisconnected
=
SyncDisconnect
.
disconnect
(
true
)
;
info
(
"
simulating
quitApplicationGranted
"
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
asyncshutdown
.
testing
"
true
)
;
AsyncShutdown
.
quitApplicationGranted
.
_trigger
(
)
;
Services
.
prefs
.
clearUserPref
(
"
toolkit
.
asyncshutdown
.
testing
"
)
;
info
(
"
waiting
for
disconnect
to
complete
"
)
;
await
promiseDisconnected
;
Assert
.
equal
(
Weave
.
Service
.
unlock
.
callCount
0
"
should
not
have
unlocked
at
the
end
"
)
;
Assert
.
ok
(
!
Weave
.
Service
.
enabled
"
Weave
should
be
and
remain
disabled
"
)
;
Assert
.
equal
(
Weave
.
Service
.
errorHandler
.
resetFileLog
.
callCount
1
"
should
have
reset
the
log
"
)
;
Assert
.
equal
(
mockEngine1
.
wipeClient
.
callCount
1
"
enabled
engine
should
have
been
wiped
"
)
;
Assert
.
equal
(
mockEngine2
.
wipeClient
.
callCount
0
"
disabled
engine
should
not
have
been
wiped
"
)
;
Assert
.
equal
(
spyBrowser
.
callCount
1
"
should
not
sanitize
the
browser
"
)
;
Assert
.
equal
(
spySignout
.
callCount
1
"
should
have
signed
out
of
FxA
"
)
;
}
)
;
