Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
constants
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
/
tabs
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
/
history
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
record
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
service
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
status
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
add_task
(
async
function
test_locally_changed_keys
(
)
{
enableValidationPrefs
(
)
;
let
hmacErrorCount
=
0
;
function
counting
(
f
)
{
return
async
function
(
)
{
hmacErrorCount
+
+
;
return
f
.
call
(
this
)
;
}
;
}
Service
.
handleHMACEvent
=
counting
(
Service
.
handleHMACEvent
)
;
let
server
=
new
SyncServer
(
)
;
let
johndoe
=
server
.
registerUser
(
"
johndoe
"
"
password
"
)
;
johndoe
.
createContents
(
{
meta
:
{
}
crypto
:
{
}
clients
:
{
}
}
)
;
server
.
start
(
)
;
try
{
Svc
.
Prefs
.
set
(
"
registerEngines
"
"
Tab
"
)
;
await
configureIdentity
(
{
username
:
"
johndoe
"
}
server
)
;
Service
.
clusterURL
=
Service
.
identity
.
_token
.
endpoint
;
await
Service
.
engineManager
.
register
(
HistoryEngine
)
;
Service
.
engineManager
.
unregister
(
"
addons
"
)
;
async
function
corrupt_local_keys
(
)
{
Service
.
collectionKeys
.
_default
.
keyPair
=
[
await
Weave
.
Crypto
.
generateRandomKey
(
)
await
Weave
.
Crypto
.
generateRandomKey
(
)
]
;
}
_
(
"
Setting
meta
.
"
)
;
let
m
=
new
WBORecord
(
"
meta
"
"
global
"
)
;
m
.
payload
=
{
"
syncID
"
:
"
foooooooooooooooooooooooooo
"
"
storageVersion
"
:
STORAGE_VERSION
}
;
await
m
.
upload
(
Service
.
resource
(
Service
.
metaURL
)
)
;
_
(
"
New
meta
/
global
:
"
+
JSON
.
stringify
(
johndoe
.
collection
(
"
meta
"
)
.
wbo
(
"
global
"
)
)
)
;
await
generateNewKeys
(
Service
.
collectionKeys
)
;
let
serverKeys
=
Service
.
collectionKeys
.
asWBO
(
"
crypto
"
"
keys
"
)
;
await
serverKeys
.
encrypt
(
Service
.
identity
.
syncKeyBundle
)
;
Assert
.
ok
(
(
await
serverKeys
.
upload
(
Service
.
resource
(
Service
.
cryptoKeysURL
)
)
)
.
success
)
;
Assert
.
ok
(
(
await
Service
.
login
(
)
)
)
;
Assert
.
ok
(
Service
.
isLoggedIn
)
;
await
sync_and_validate_telem
(
)
;
_
(
"
Tabs
modified
:
"
+
johndoe
.
modified
(
"
tabs
"
)
)
;
Assert
.
ok
(
johndoe
.
modified
(
"
tabs
"
)
>
0
)
;
let
liveKeys
=
Service
.
collectionKeys
.
keyForCollection
(
"
history
"
)
;
_
(
"
Keys
now
:
"
+
liveKeys
.
keyPair
)
;
let
visitType
=
Ci
.
nsINavHistoryService
.
TRANSITION_LINK
;
let
history
=
johndoe
.
createCollection
(
"
history
"
)
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
let
id
=
"
record
-
no
-
-
"
+
i
;
let
modified
=
Date
.
now
(
)
/
1000
-
60
*
(
i
+
10
)
;
let
w
=
new
CryptoWrapper
(
"
history
"
"
id
"
)
;
w
.
cleartext
=
{
id
histUri
:
"
http
:
/
/
foo
/
bar
?
"
+
id
title
:
id
sortindex
:
i
visits
:
[
{
date
:
(
modified
-
5
)
*
1000000
type
:
visitType
}
]
deleted
:
false
}
;
await
w
.
encrypt
(
liveKeys
)
;
let
payload
=
{
ciphertext
:
w
.
ciphertext
IV
:
w
.
IV
hmac
:
w
.
hmac
}
;
history
.
insert
(
id
payload
modified
)
;
}
history
.
timestamp
=
Date
.
now
(
)
/
1000
;
let
old_key_time
=
johndoe
.
modified
(
"
crypto
"
)
;
_
(
"
Old
key
time
:
"
+
old_key_time
)
;
let
rec
=
new
CryptoWrapper
(
"
history
"
"
record
-
no
-
-
0
"
)
;
await
rec
.
fetch
(
Service
.
resource
(
Service
.
storageURL
+
"
history
/
record
-
no
-
-
0
"
)
)
;
_
(
JSON
.
stringify
(
rec
)
)
;
Assert
.
ok
(
!
!
await
rec
.
decrypt
(
liveKeys
)
)
;
Assert
.
equal
(
hmacErrorCount
0
)
;
await
corrupt_local_keys
(
)
;
_
(
"
Keys
now
:
"
+
Service
.
collectionKeys
.
keyForCollection
(
"
history
"
)
.
keyPair
)
;
Assert
.
equal
(
hmacErrorCount
0
)
;
_
(
"
HMAC
error
count
:
"
+
hmacErrorCount
)
;
let
ping
=
await
wait_for_ping
(
(
)
=
>
Service
.
sync
(
)
true
)
;
equal
(
ping
.
engines
.
find
(
e
=
>
e
.
name
=
=
"
history
"
)
.
incoming
.
applied
5
)
;
Assert
.
equal
(
hmacErrorCount
1
)
;
_
(
"
Keys
now
:
"
+
Service
.
collectionKeys
.
keyForCollection
(
"
history
"
)
.
keyPair
)
;
Assert
.
ok
(
await
PlacesUtils
.
history
.
hasVisits
(
"
http
:
/
/
foo
/
bar
?
record
-
no
-
-
0
"
)
)
;
Assert
.
ok
(
await
PlacesUtils
.
history
.
hasVisits
(
"
http
:
/
/
foo
/
bar
?
record
-
no
-
-
1
"
)
)
;
Assert
.
ok
(
await
PlacesUtils
.
history
.
hasVisits
(
"
http
:
/
/
foo
/
bar
?
record
-
no
-
-
2
"
)
)
;
Assert
.
ok
(
await
PlacesUtils
.
history
.
hasVisits
(
"
http
:
/
/
foo
/
bar
?
record
-
no
-
-
3
"
)
)
;
Assert
.
ok
(
await
PlacesUtils
.
history
.
hasVisits
(
"
http
:
/
/
foo
/
bar
?
record
-
no
-
-
4
"
)
)
;
Assert
.
equal
(
hmacErrorCount
1
)
;
_
(
"
Busting
some
new
server
values
.
"
)
;
for
(
let
i
=
5
;
i
<
10
;
i
+
+
)
{
let
id
=
"
record
-
no
-
-
"
+
i
;
let
modified
=
1
+
(
Date
.
now
(
)
/
1000
)
;
let
w
=
new
CryptoWrapper
(
"
history
"
"
id
"
)
;
w
.
cleartext
=
{
id
histUri
:
"
http
:
/
/
foo
/
bar
?
"
+
id
title
:
id
sortindex
:
i
visits
:
[
{
date
:
(
modified
-
5
)
*
1000000
type
:
visitType
}
]
deleted
:
false
}
;
await
w
.
encrypt
(
Service
.
collectionKeys
.
keyForCollection
(
"
history
"
)
)
;
w
.
hmac
=
w
.
hmac
.
toUpperCase
(
)
;
let
payload
=
{
ciphertext
:
w
.
ciphertext
IV
:
w
.
IV
hmac
:
w
.
hmac
}
;
history
.
insert
(
id
payload
modified
)
;
}
history
.
timestamp
=
Date
.
now
(
)
/
1000
;
_
(
"
Server
key
time
hasn
'
t
changed
.
"
)
;
Assert
.
equal
(
johndoe
.
modified
(
"
crypto
"
)
old_key_time
)
;
_
(
"
Resetting
HMAC
error
timer
.
"
)
;
Service
.
lastHMACEvent
=
0
;
_
(
"
Syncing
.
.
.
"
)
;
ping
=
await
sync_and_validate_telem
(
true
)
;
Assert
.
equal
(
ping
.
engines
.
find
(
e
=
>
e
.
name
=
=
"
history
"
)
.
incoming
.
failed
5
)
;
_
(
"
Keys
now
:
"
+
Service
.
collectionKeys
.
keyForCollection
(
"
history
"
)
.
keyPair
)
;
_
(
"
Server
keys
have
been
updated
and
we
skipped
over
5
more
HMAC
errors
without
adjusting
history
.
"
)
;
Assert
.
ok
(
johndoe
.
modified
(
"
crypto
"
)
>
old_key_time
)
;
Assert
.
equal
(
hmacErrorCount
6
)
;
Assert
.
equal
(
false
await
PlacesUtils
.
history
.
hasVisits
(
"
http
:
/
/
foo
/
bar
?
record
-
no
-
-
5
"
)
)
;
Assert
.
equal
(
false
await
PlacesUtils
.
history
.
hasVisits
(
"
http
:
/
/
foo
/
bar
?
record
-
no
-
-
6
"
)
)
;
Assert
.
equal
(
false
await
PlacesUtils
.
history
.
hasVisits
(
"
http
:
/
/
foo
/
bar
?
record
-
no
-
-
7
"
)
)
;
Assert
.
equal
(
false
await
PlacesUtils
.
history
.
hasVisits
(
"
http
:
/
/
foo
/
bar
?
record
-
no
-
-
8
"
)
)
;
Assert
.
equal
(
false
await
PlacesUtils
.
history
.
hasVisits
(
"
http
:
/
/
foo
/
bar
?
record
-
no
-
-
9
"
)
)
;
}
finally
{
Svc
.
Prefs
.
resetBranch
(
"
"
)
;
await
promiseStopServer
(
server
)
;
}
}
)
;
function
run_test
(
)
{
Log
.
repository
.
rootLogger
.
addAppender
(
new
Log
.
DumpAppender
(
)
)
;
validate_all_future_pings
(
)
;
run_next_test
(
)
;
}
