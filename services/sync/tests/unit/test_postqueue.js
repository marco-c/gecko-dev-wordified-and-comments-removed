let
{
PostQueue
}
=
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
record
.
js
"
{
}
)
;
initTestLogging
(
"
Trace
"
)
;
function
makeRecord
(
nbytes
)
{
return
{
toJSON
:
(
)
=
>
"
x
"
.
repeat
(
nbytes
-
2
)
}
}
function
makePostQueue
(
config
lastModTime
responseGenerator
)
{
let
stats
=
{
posts
:
[
]
}
let
poster
=
(
data
headers
batch
commit
)
=
>
{
let
thisPost
=
{
nbytes
:
data
.
length
batch
commit
}
;
if
(
headers
.
length
)
{
thisPost
.
headers
=
headers
;
}
stats
.
posts
.
push
(
thisPost
)
;
return
Promise
.
resolve
(
responseGenerator
.
next
(
)
.
value
)
;
}
let
done
=
(
)
=
>
{
}
let
pq
=
new
PostQueue
(
poster
lastModTime
config
getTestLogger
(
)
done
)
;
return
{
pq
stats
}
;
}
add_task
(
async
function
test_simple
(
)
{
let
config
=
{
max_post_bytes
:
1000
max_post_records
:
100
max_batch_bytes
:
Infinity
max_batch_records
:
Infinity
max_record_payload_bytes
:
1000
}
const
time
=
11111111
;
function
*
responseGenerator
(
)
{
yield
{
success
:
true
status
:
200
headers
:
{
"
x
-
weave
-
timestamp
"
:
time
+
100
"
x
-
last
-
modified
"
:
time
+
100
}
}
;
}
let
{
pq
stats
}
=
makePostQueue
(
config
time
responseGenerator
(
)
)
;
await
pq
.
enqueue
(
makeRecord
(
10
)
)
;
await
pq
.
flush
(
true
)
;
deepEqual
(
stats
.
posts
[
{
nbytes
:
12
commit
:
true
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
batch
:
"
true
"
}
]
)
;
}
)
;
add_task
(
async
function
test_max_post_bytes_no_batch
(
)
{
let
config
=
{
max_post_bytes
:
50
max_post_records
:
Infinity
max_batch_bytes
:
Infinity
max_batch_records
:
Infinity
max_record_payload_bytes
:
50
}
const
time
=
11111111
;
function
*
responseGenerator
(
)
{
yield
{
success
:
true
status
:
200
headers
:
{
"
x
-
weave
-
timestamp
"
:
time
+
100
"
x
-
last
-
modified
"
:
time
+
100
}
}
;
yield
{
success
:
true
status
:
200
headers
:
{
"
x
-
weave
-
timestamp
"
:
time
+
200
"
x
-
last
-
modified
"
:
time
+
200
}
}
;
}
let
{
pq
stats
}
=
makePostQueue
(
config
time
responseGenerator
(
)
)
;
await
pq
.
enqueue
(
makeRecord
(
20
)
)
;
await
pq
.
enqueue
(
makeRecord
(
20
)
)
;
await
pq
.
enqueue
(
makeRecord
(
20
)
)
;
await
pq
.
flush
(
true
)
;
deepEqual
(
stats
.
posts
[
{
nbytes
:
43
commit
:
false
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
batch
:
"
true
"
}
{
nbytes
:
22
commit
:
false
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
+
100
]
]
batch
:
null
}
]
)
;
equal
(
pq
.
lastModified
time
+
200
)
;
}
)
;
add_task
(
async
function
test_max_record_payload_bytes_no_batch
(
)
{
let
config
=
{
max_post_bytes
:
100
max_post_records
:
Infinity
max_batch_bytes
:
Infinity
max_batch_records
:
Infinity
max_record_payload_bytes
:
50
}
const
time
=
11111111
;
function
*
responseGenerator
(
)
{
yield
{
success
:
true
status
:
200
headers
:
{
"
x
-
weave
-
timestamp
"
:
time
+
100
"
x
-
last
-
modified
"
:
time
+
100
}
}
;
}
let
{
pq
stats
}
=
makePostQueue
(
config
time
responseGenerator
(
)
)
;
await
pq
.
enqueue
(
makeRecord
(
50
)
)
;
await
pq
.
enqueue
(
makeRecord
(
46
)
)
;
await
pq
.
flush
(
true
)
;
deepEqual
(
stats
.
posts
[
{
nbytes
:
99
commit
:
true
batch
:
"
true
"
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
}
]
)
;
equal
(
pq
.
lastModified
time
+
100
)
;
}
)
;
add_task
(
async
function
test_single_batch
(
)
{
let
config
=
{
max_post_bytes
:
1000
max_post_records
:
100
max_batch_bytes
:
2000
max_batch_records
:
200
max_record_payload_bytes
:
1000
}
const
time
=
11111111
;
function
*
responseGenerator
(
)
{
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time
"
x
-
weave
-
timestamp
"
:
time
+
100
}
}
;
}
let
{
pq
stats
}
=
makePostQueue
(
config
time
responseGenerator
(
)
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
10
)
)
)
.
enqueued
)
;
await
pq
.
flush
(
true
)
;
deepEqual
(
stats
.
posts
[
{
nbytes
:
12
commit
:
true
batch
:
"
true
"
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
}
]
)
;
}
)
;
add_task
(
async
function
test_max_post_bytes_batch
(
)
{
let
config
=
{
max_post_bytes
:
50
max_post_records
:
4
max_batch_bytes
:
5000
max_batch_records
:
100
max_record_payload_bytes
:
50
}
const
time
=
11111111
;
function
*
responseGenerator
(
)
{
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time
"
x
-
weave
-
timestamp
"
:
time
+
100
}
}
;
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time
+
200
"
x
-
weave
-
timestamp
"
:
time
+
200
}
}
;
}
let
{
pq
stats
}
=
makePostQueue
(
config
time
responseGenerator
(
)
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
await
pq
.
flush
(
true
)
;
deepEqual
(
stats
.
posts
[
{
nbytes
:
43
commit
:
false
batch
:
"
true
"
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
}
{
nbytes
:
22
commit
:
true
batch
:
1234
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
}
]
)
;
equal
(
pq
.
lastModified
time
+
200
)
;
}
)
;
add_task
(
async
function
test_max_batch_bytes_batch
(
)
{
let
config
=
{
max_post_bytes
:
50
max_post_records
:
20
max_batch_bytes
:
70
max_batch_records
:
100
max_record_payload_bytes
:
50
}
const
time0
=
11111111
;
const
time1
=
22222222
;
function
*
responseGenerator
(
)
{
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time0
"
x
-
weave
-
timestamp
"
:
time0
+
100
}
}
;
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time1
"
x
-
weave
-
timestamp
"
:
time1
}
}
;
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
5678
}
headers
:
{
"
x
-
last
-
modified
"
:
time1
"
x
-
weave
-
timestamp
"
:
time1
+
100
}
}
;
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
5678
}
headers
:
{
"
x
-
last
-
modified
"
:
time1
+
200
"
x
-
weave
-
timestamp
"
:
time1
+
200
}
}
;
}
let
{
pq
stats
}
=
makePostQueue
(
config
time0
responseGenerator
(
)
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
await
pq
.
flush
(
true
)
;
deepEqual
(
stats
.
posts
[
{
nbytes
:
43
commit
:
false
batch
:
"
true
"
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time0
]
]
}
{
nbytes
:
22
commit
:
true
batch
:
1234
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time0
]
]
}
{
nbytes
:
43
commit
:
false
batch
:
"
true
"
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time1
]
]
}
{
nbytes
:
22
commit
:
true
batch
:
5678
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time1
]
]
}
]
)
;
equal
(
pq
.
lastModified
time1
+
200
)
;
}
)
;
add_task
(
async
function
test_max_post_bytes_batch
(
)
{
let
config
=
{
max_post_bytes
:
1000
max_post_records
:
2
max_batch_bytes
:
5000
max_batch_records
:
100
max_record_payload_bytes
:
1000
}
const
time
=
11111111
;
function
*
responseGenerator
(
)
{
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time
"
x
-
weave
-
timestamp
"
:
time
+
100
}
}
;
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time
+
200
"
x
-
weave
-
timestamp
"
:
time
+
200
}
}
;
}
let
{
pq
stats
}
=
makePostQueue
(
config
time
responseGenerator
(
)
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
await
pq
.
flush
(
true
)
;
deepEqual
(
stats
.
posts
[
{
nbytes
:
43
commit
:
false
batch
:
"
true
"
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
}
{
nbytes
:
22
commit
:
true
batch
:
1234
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
}
]
)
;
equal
(
pq
.
lastModified
time
+
200
)
;
}
)
;
add_task
(
async
function
test_huge_record
(
)
{
let
config
=
{
max_post_bytes
:
50
max_post_records
:
100
max_batch_bytes
:
5000
max_batch_records
:
100
max_record_payload_bytes
:
50
}
const
time
=
11111111
;
function
*
responseGenerator
(
)
{
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time
"
x
-
weave
-
timestamp
"
:
time
+
100
}
}
;
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time
+
200
"
x
-
weave
-
timestamp
"
:
time
+
200
}
}
;
}
let
{
pq
stats
}
=
makePostQueue
(
config
time
responseGenerator
(
)
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
let
{
enqueued
error
}
=
await
pq
.
enqueue
(
makeRecord
(
1000
)
)
;
ok
(
!
enqueued
)
;
notEqual
(
error
undefined
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
await
pq
.
flush
(
true
)
;
deepEqual
(
stats
.
posts
[
{
nbytes
:
43
commit
:
false
batch
:
"
true
"
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
}
{
nbytes
:
22
commit
:
true
batch
:
1234
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
}
]
)
;
equal
(
pq
.
lastModified
time
+
200
)
;
}
)
;
add_task
(
async
function
test_max_records_batch
(
)
{
let
config
=
{
max_post_bytes
:
1000
max_post_records
:
3
max_batch_bytes
:
10000
max_batch_records
:
5
max_record_payload_bytes
:
1000
}
const
time0
=
11111111
;
const
time1
=
22222222
;
function
*
responseGenerator
(
)
{
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time0
"
x
-
weave
-
timestamp
"
:
time0
+
100
}
}
;
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time1
"
x
-
weave
-
timestamp
"
:
time1
}
}
;
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
5678
}
headers
:
{
"
x
-
last
-
modified
"
:
time1
"
x
-
weave
-
timestamp
"
:
time1
+
100
}
}
;
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
5678
}
headers
:
{
"
x
-
last
-
modified
"
:
time1
+
200
"
x
-
weave
-
timestamp
"
:
time1
+
200
}
}
;
}
let
{
pq
stats
}
=
makePostQueue
(
config
time0
responseGenerator
(
)
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
20
)
)
)
.
enqueued
)
;
await
pq
.
flush
(
true
)
;
deepEqual
(
stats
.
posts
[
{
nbytes
:
64
commit
:
false
batch
:
"
true
"
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time0
]
]
}
{
nbytes
:
43
commit
:
true
batch
:
1234
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time0
]
]
}
{
nbytes
:
64
commit
:
false
batch
:
"
true
"
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time1
]
]
}
{
nbytes
:
22
commit
:
true
batch
:
5678
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time1
]
]
}
]
)
;
equal
(
pq
.
lastModified
time1
+
200
)
;
}
)
;
add_task
(
async
function
test_packed_batch
(
)
{
let
config
=
{
max_post_bytes
:
54
max_post_records
:
4
max_batch_bytes
:
107
max_batch_records
:
100
max_record_payload_bytes
:
25
}
const
time
=
11111111
;
function
*
responseGenerator
(
)
{
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time
"
x
-
weave
-
timestamp
"
:
time
+
100
}
}
;
yield
{
success
:
true
status
:
202
obj
:
{
batch
:
1234
}
headers
:
{
"
x
-
last
-
modified
"
:
time
+
200
"
x
-
weave
-
timestamp
"
:
time
+
200
}
}
;
}
let
{
pq
stats
}
=
makePostQueue
(
config
time
responseGenerator
(
)
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
25
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
25
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
25
)
)
)
.
enqueued
)
;
ok
(
(
await
pq
.
enqueue
(
makeRecord
(
25
)
)
)
.
enqueued
)
;
await
pq
.
flush
(
true
)
;
deepEqual
(
stats
.
posts
[
{
nbytes
:
53
commit
:
false
batch
:
"
true
"
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
}
{
nbytes
:
53
commit
:
true
batch
:
1234
headers
:
[
[
"
x
-
if
-
unmodified
-
since
"
time
]
]
}
]
)
;
equal
(
pq
.
lastModified
time
+
200
)
;
}
)
;
