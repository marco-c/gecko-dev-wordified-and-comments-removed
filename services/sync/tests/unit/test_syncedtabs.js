"
use
strict
"
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
SyncedTabs
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
faviconService
=
Cc
[
"
mozilla
.
org
/
browser
/
favicon
-
service
;
1
"
]
.
getService
(
Ci
.
nsIFaviconService
)
;
Log
.
repository
.
getLogger
(
"
Sync
.
RemoteTabs
"
)
.
addAppender
(
new
Log
.
DumpAppender
(
)
)
;
function
MockTabsEngine
(
)
{
this
.
clients
=
{
}
;
}
MockTabsEngine
.
prototype
=
{
name
:
"
tabs
"
enabled
:
true
getAllClients
(
)
{
return
this
.
clients
;
}
getOpenURLs
(
)
{
return
new
Set
(
)
;
}
}
let
MockClientsEngine
=
{
isMobile
(
guid
)
{
if
(
!
guid
.
endsWith
(
"
desktop
"
)
&
&
!
guid
.
endsWith
(
"
mobile
"
)
)
{
throw
new
Error
(
"
this
module
expected
guids
to
end
with
'
desktop
'
or
'
mobile
'
"
)
;
}
return
guid
.
endsWith
(
"
mobile
"
)
;
}
}
Services
.
prefs
.
setCharPref
(
"
services
.
sync
.
username
"
"
someone
somewhere
.
com
"
)
;
Weave
.
Service
.
engineManager
.
unregister
(
"
tabs
"
)
;
Weave
.
Service
.
engineManager
.
register
(
MockTabsEngine
)
;
Weave
.
Service
.
clientsEngine
=
MockClientsEngine
;
let
weaveXPCService
=
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
weaveXPCService
.
ready
=
true
;
function
configureClients
(
clients
)
{
let
engine
=
Weave
.
Service
.
engineManager
.
get
(
"
tabs
"
)
;
for
(
let
[
guid
client
]
in
Iterator
(
clients
)
)
{
client
.
id
=
guid
;
}
engine
.
clients
=
clients
;
Services
.
obs
.
notifyObservers
(
null
"
weave
:
engine
:
sync
:
finish
"
"
tabs
"
)
;
}
add_task
(
function
*
test_noClients
(
)
{
yield
configureClients
(
{
}
)
;
let
tabs
=
yield
SyncedTabs
.
getTabClients
(
)
;
equal
(
Object
.
keys
(
tabs
)
.
length
0
)
;
}
)
;
add_task
(
function
*
test_clientWithTabs
(
)
{
yield
configureClients
(
{
guid_desktop
:
{
clientName
:
"
My
Desktop
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
foo
.
com
/
"
]
icon
:
"
http
:
/
/
foo
.
com
/
favicon
"
}
]
}
guid_mobile
:
{
clientName
:
"
My
Phone
"
tabs
:
[
]
}
}
)
;
let
clients
=
yield
SyncedTabs
.
getTabClients
(
)
;
equal
(
clients
.
length
2
)
;
clients
.
sort
(
(
a
b
)
=
>
{
return
a
.
name
.
localeCompare
(
b
.
name
)
;
}
)
;
equal
(
clients
[
0
]
.
tabs
.
length
1
)
;
equal
(
clients
[
0
]
.
tabs
[
0
]
.
url
"
http
:
/
/
foo
.
com
/
"
)
;
equal
(
clients
[
0
]
.
tabs
[
0
]
.
icon
"
http
:
/
/
foo
.
com
/
favicon
"
)
;
equal
(
clients
[
1
]
.
tabs
.
length
0
)
;
}
)
;
add_task
(
function
*
test_clientWithTabsIconsDisabled
(
)
{
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
.
syncedTabs
.
showRemoteIcons
"
false
)
;
yield
configureClients
(
{
guid_desktop
:
{
clientName
:
"
My
Desktop
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
foo
.
com
/
"
]
icon
:
"
http
:
/
/
foo
.
com
/
favicon
"
}
]
}
}
)
;
let
clients
=
yield
SyncedTabs
.
getTabClients
(
)
;
equal
(
clients
.
length
1
)
;
clients
.
sort
(
(
a
b
)
=
>
{
return
a
.
name
.
localeCompare
(
b
.
name
)
;
}
)
;
equal
(
clients
[
0
]
.
tabs
.
length
1
)
;
equal
(
clients
[
0
]
.
tabs
[
0
]
.
url
"
http
:
/
/
foo
.
com
/
"
)
;
equal
(
clients
[
0
]
.
tabs
[
0
]
.
icon
faviconService
.
defaultFavicon
.
spec
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
syncedTabs
.
showRemoteIcons
"
)
;
}
)
;
add_task
(
function
*
test_filter
(
)
{
yield
configureClients
(
{
guid_desktop
:
{
clientName
:
"
My
Desktop
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
foo
.
com
/
"
]
title
:
"
A
test
page
.
"
}
{
urlHistory
:
[
"
http
:
/
/
bar
.
com
/
"
]
title
:
"
Another
page
.
"
}
]
}
}
)
;
let
clients
=
yield
SyncedTabs
.
getTabClients
(
"
foo
"
)
;
equal
(
clients
.
length
1
)
;
equal
(
clients
[
0
]
.
tabs
.
length
1
)
;
equal
(
clients
[
0
]
.
tabs
[
0
]
.
url
"
http
:
/
/
foo
.
com
/
"
)
;
clients
=
yield
SyncedTabs
.
getTabClients
(
"
test
"
)
;
equal
(
clients
.
length
1
)
;
equal
(
clients
[
0
]
.
tabs
.
length
1
)
;
equal
(
clients
[
0
]
.
tabs
[
0
]
.
url
"
http
:
/
/
foo
.
com
/
"
)
;
}
)
;
