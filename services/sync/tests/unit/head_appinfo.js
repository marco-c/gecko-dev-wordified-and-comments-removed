var
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
do_get_profile
(
)
;
var
fhs
=
Cc
[
"
mozilla
.
org
/
satchel
/
form
-
history
-
startup
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
;
fhs
.
observe
(
null
"
profile
-
after
-
change
"
null
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
sync
.
tokenserver
.
uri
"
"
http
:
/
/
token
-
server
"
)
;
function
getOS
(
)
{
switch
(
mozinfo
.
os
)
{
case
"
win
"
:
return
"
WINNT
"
;
case
"
mac
"
:
return
"
Darwin
"
;
default
:
return
"
Linux
"
;
}
}
const
{
updateAppInfo
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AppInfo
.
sys
.
mjs
"
)
;
updateAppInfo
(
{
name
:
"
XPCShell
"
ID
:
"
xpcshell
tests
.
mozilla
.
org
"
version
:
"
1
"
platformVersion
:
"
"
OS
:
getOS
(
)
}
)
;
function
addResourceAlias
(
)
{
const
resProt
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
for
(
let
s
of
[
"
common
"
"
sync
"
"
crypto
"
]
)
{
let
uri
=
Services
.
io
.
newURI
(
"
resource
:
/
/
gre
/
modules
/
services
-
"
+
s
+
"
/
"
)
;
resProt
.
setSubstitution
(
"
services
-
"
+
s
uri
)
;
}
}
addResourceAlias
(
)
;
