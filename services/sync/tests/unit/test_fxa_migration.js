Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
auth
.
uri
"
"
http
:
/
/
localhost
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
FxaMigrator
.
jsm
"
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
sync
.
username
"
"
foo
"
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
sync
.
log
.
appender
.
dump
"
"
Debug
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
service
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
record
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
username
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
services
/
sync
/
utils
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
services
/
common
/
logging
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
services
/
sync
/
rotaryengine
.
js
"
)
;
const
FXA_USERNAME
=
"
someone
somewhere
"
;
function
configureLegacySync
(
)
{
let
engine
=
new
RotaryEngine
(
Service
)
;
engine
.
enabled
=
true
;
Svc
.
Prefs
.
set
(
"
registerEngines
"
engine
.
name
)
;
Svc
.
Prefs
.
set
(
"
log
.
logger
.
engine
.
rotary
"
"
Trace
"
)
;
let
contents
=
{
meta
:
{
global
:
{
engines
:
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
}
}
crypto
:
{
}
rotary
:
{
}
}
;
const
USER
=
"
foo
"
;
const
PASSPHRASE
=
"
abcdeabcdeabcdeabcdeabcdea
"
;
setBasicCredentials
(
USER
"
password
"
PASSPHRASE
)
;
let
onRequest
=
function
(
request
response
)
{
response
.
setHeader
(
"
x
-
weave
-
alert
"
JSON
.
stringify
(
{
code
:
"
soft
-
eol
"
}
)
)
;
}
let
server
=
new
SyncServer
(
{
onRequest
}
)
;
server
.
registerUser
(
USER
"
password
"
)
;
server
.
createContents
(
USER
contents
)
;
server
.
start
(
)
;
Service
.
serverURL
=
server
.
baseURI
;
Service
.
clusterURL
=
server
.
baseURI
;
Service
.
identity
.
username
=
USER
;
Service
.
_updateCachedURLs
(
)
;
Service
.
engineManager
.
_engines
[
engine
.
name
]
=
engine
;
return
[
engine
server
]
;
}
add_task
(
async
function
testMigrationUnlinks
(
)
{
let
oldValue
=
Services
.
prefs
.
getBoolPref
(
"
services
.
sync
-
testing
.
startOverKeepIdentity
"
)
;
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
-
testing
.
startOverKeepIdentity
"
false
)
;
do_register_cleanup
(
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
-
testing
.
startOverKeepIdentity
"
oldValue
)
}
)
;
configureLegacySync
(
)
;
let
promiseMigration
=
promiseOneObserver
(
"
fxa
-
migration
:
state
-
changed
"
)
;
let
promiseStartOver
=
promiseOneObserver
(
"
weave
:
service
:
start
-
over
:
finish
"
)
;
_
(
"
Starting
sync
"
)
;
Service
.
sync
(
)
;
_
(
"
Finished
sync
"
)
;
await
promiseStartOver
;
await
promiseMigration
;
Assert
.
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
"
services
.
sync
.
username
"
)
)
;
}
)
;
function
run_test
(
)
{
initTestLogging
(
)
;
do_register_cleanup
(
(
)
=
>
{
fxaMigrator
.
finalize
(
)
;
Svc
.
Prefs
.
resetBranch
(
"
"
)
;
}
)
;
run_next_test
(
)
;
}
