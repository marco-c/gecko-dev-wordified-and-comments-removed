ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
service
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
/
history
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
async
function
rawAddVisit
(
id
uri
visitPRTime
transitionType
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
results
=
[
]
;
let
handler
=
{
handleResult
(
result
)
{
results
.
push
(
result
)
;
}
handleError
(
resultCode
placeInfo
)
{
do_throw
(
updatePlaces
gave
error
{
resultCode
}
!
)
;
}
handleCompletion
(
count
)
{
resolve
(
{
results
count
}
)
;
}
}
;
PlacesUtils
.
asyncHistory
.
updatePlaces
(
[
{
guid
:
id
uri
:
typeof
uri
=
=
"
string
"
?
CommonUtils
.
makeURI
(
uri
)
:
uri
visits
:
[
{
visitDate
:
visitPRTime
transitionType
}
]
}
]
handler
)
;
}
)
;
}
add_task
(
async
function
test_history_download_limit
(
)
{
let
engine
=
new
HistoryEngine
(
Service
)
;
await
engine
.
initialize
(
)
;
let
server
=
await
serverForFoo
(
engine
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
lastSync
=
Date
.
now
(
)
/
1000
;
let
collection
=
server
.
user
(
"
foo
"
)
.
collection
(
"
history
"
)
;
for
(
let
i
=
0
;
i
<
15
;
i
+
+
)
{
let
id
=
"
place
"
+
i
.
toString
(
10
)
.
padStart
(
7
"
0
"
)
;
let
wbo
=
new
ServerWBO
(
id
encryptPayload
(
{
id
histUri
:
"
http
:
/
/
example
.
com
/
"
+
i
title
:
"
Page
"
+
i
visits
:
[
{
date
:
Date
.
now
(
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
TYPED
}
{
date
:
Date
.
now
(
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
LINK
}
]
}
)
lastSync
+
1
+
i
)
;
wbo
.
sortindex
=
15
-
i
;
collection
.
insertWBO
(
wbo
)
;
}
engine
.
lastSync
=
lastSync
;
engine
.
downloadBatchSize
=
4
;
engine
.
downloadLimit
=
5
;
engine
.
guidFetchBatchSize
=
0
;
let
ping
=
await
sync_engine_and_validate_telem
(
engine
false
)
;
deepEqual
(
ping
.
engines
[
0
]
.
incoming
{
applied
:
5
}
)
;
let
backlogAfterFirstSync
=
Array
.
from
(
engine
.
toFetch
)
.
sort
(
)
;
deepEqual
(
backlogAfterFirstSync
[
"
place0000000
"
"
place0000001
"
"
place0000002
"
"
place0000003
"
"
place0000004
"
"
place0000005
"
"
place0000006
"
"
place0000007
"
"
place0000008
"
"
place0000009
"
]
)
;
equal
(
engine
.
lastSync
lastSync
+
15
)
;
engine
.
lastModified
=
collection
.
modified
;
ping
=
await
sync_engine_and_validate_telem
(
engine
false
)
;
ok
(
!
ping
.
engines
[
0
]
.
incoming
)
;
let
backlogAfterSecondSync
=
Array
.
from
(
engine
.
toFetch
)
.
sort
(
)
;
deepEqual
(
backlogAfterFirstSync
backlogAfterSecondSync
)
;
let
newWBO
=
new
ServerWBO
(
"
placeAAAAAAA
"
encryptPayload
(
{
id
:
"
placeAAAAAAA
"
histUri
:
"
http
:
/
/
example
.
com
/
a
"
title
:
"
New
Page
A
"
visits
:
[
{
date
:
Date
.
now
(
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
TYPED
}
]
}
)
lastSync
+
20
)
;
newWBO
.
sortindex
=
-
1
;
collection
.
insertWBO
(
newWBO
)
;
engine
.
lastModified
=
collection
.
modified
;
ping
=
await
sync_engine_and_validate_telem
(
engine
false
)
;
deepEqual
(
ping
.
engines
[
0
]
.
incoming
{
applied
:
1
}
)
;
let
backlogAfterThirdSync
=
Array
.
from
(
engine
.
toFetch
)
.
sort
(
)
;
deepEqual
(
backlogAfterSecondSync
backlogAfterThirdSync
)
;
equal
(
engine
.
lastSync
lastSync
+
20
)
;
engine
.
guidFetchBatchSize
=
2
;
engine
.
lastModified
=
collection
.
modified
;
ping
=
await
sync_engine_and_validate_telem
(
engine
false
)
;
deepEqual
(
ping
.
engines
[
0
]
.
incoming
{
applied
:
5
}
)
;
deepEqual
(
Array
.
from
(
engine
.
toFetch
)
.
sort
(
)
[
"
place0000005
"
"
place0000006
"
"
place0000007
"
"
place0000008
"
"
place0000009
"
]
)
;
engine
.
lastModified
=
collection
.
modified
;
ping
=
await
sync_engine_and_validate_telem
(
engine
false
)
;
deepEqual
(
ping
.
engines
[
0
]
.
incoming
{
applied
:
5
}
)
;
deepEqual
(
Array
.
from
(
engine
.
toFetch
)
[
]
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
add_task
(
async
function
test_history_visit_roundtrip
(
)
{
let
engine
=
new
HistoryEngine
(
Service
)
;
await
engine
.
initialize
(
)
;
let
server
=
await
serverForFoo
(
engine
)
;
await
SyncTestingInfrastructure
(
server
)
;
engine
.
_tracker
.
start
(
)
;
let
id
=
"
aaaaaaaaaaaa
"
;
let
oneHourMS
=
60
*
60
*
1000
;
let
time
=
(
Date
.
now
(
)
-
oneHourMS
)
*
1000
+
555
;
let
{
count
}
=
await
rawAddVisit
(
id
"
https
:
/
/
www
.
example
.
com
"
time
PlacesUtils
.
history
.
TRANSITIONS
.
TYPED
)
;
equal
(
count
1
)
;
let
visits
=
await
PlacesSyncUtils
.
history
.
fetchVisitsForURL
(
"
https
:
/
/
www
.
example
.
com
"
)
;
equal
(
visits
.
length
1
)
;
equal
(
visits
[
0
]
.
date
time
)
;
let
collection
=
server
.
user
(
"
foo
"
)
.
collection
(
"
history
"
)
;
await
sync_engine_and_validate_telem
(
engine
false
)
;
let
wbo
=
collection
.
wbo
(
id
)
;
let
data
=
JSON
.
parse
(
JSON
.
parse
(
wbo
.
payload
)
.
ciphertext
)
;
equal
(
data
.
visits
[
0
]
.
date
time
)
;
data
.
visits
.
push
(
{
date
:
(
Date
.
now
(
)
-
oneHourMS
/
2
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
LINK
}
)
;
collection
.
insertWBO
(
new
ServerWBO
(
id
encryptPayload
(
data
)
Date
.
now
(
)
/
1000
+
10
)
)
;
engine
.
lastSync
=
Date
.
now
(
)
/
1000
-
30
;
await
sync_engine_and_validate_telem
(
engine
false
)
;
visits
=
await
PlacesSyncUtils
.
history
.
fetchVisitsForURL
(
"
https
:
/
/
www
.
example
.
com
"
)
;
equal
(
visits
.
length
2
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
add_task
(
async
function
test_history_visit_dedupe_old
(
)
{
let
engine
=
new
HistoryEngine
(
Service
)
;
await
engine
.
initialize
(
)
;
let
server
=
await
serverForFoo
(
engine
)
;
await
SyncTestingInfrastructure
(
server
)
;
engine
.
_tracker
.
start
(
)
;
await
PlacesUtils
.
history
.
insert
(
{
url
:
"
https
:
/
/
www
.
example
.
com
"
visits
:
Array
.
from
(
{
length
:
25
}
(
_
index
)
=
>
(
{
transition
:
PlacesUtils
.
history
.
TRANSITION_LINK
date
:
new
Date
(
Date
.
UTC
(
2017
10
1
+
index
)
)
}
)
)
}
)
;
let
recentVisits
=
await
PlacesSyncUtils
.
history
.
fetchVisitsForURL
(
"
https
:
/
/
www
.
example
.
com
"
)
;
equal
(
recentVisits
.
length
20
)
;
let
{
visits
:
allVisits
guid
}
=
await
PlacesUtils
.
history
.
fetch
(
"
https
:
/
/
www
.
example
.
com
"
{
includeVisits
:
true
}
)
;
equal
(
allVisits
.
length
25
)
;
let
collection
=
server
.
user
(
"
foo
"
)
.
collection
(
"
history
"
)
;
await
sync_engine_and_validate_telem
(
engine
false
)
;
let
wbo
=
collection
.
wbo
(
guid
)
;
let
data
=
JSON
.
parse
(
JSON
.
parse
(
wbo
.
payload
)
.
ciphertext
)
;
data
.
visits
.
push
(
{
date
:
Date
.
UTC
(
2017
10
1
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
LINK
}
{
date
:
Date
.
UTC
(
2017
10
2
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
LINK
}
{
date
:
Date
.
UTC
(
2017
11
4
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
LINK
}
{
date
:
Date
.
UTC
(
2017
11
5
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
LINK
}
)
;
collection
.
insertWBO
(
new
ServerWBO
(
guid
encryptPayload
(
data
)
Date
.
now
(
)
/
1000
+
10
)
)
;
engine
.
lastSync
=
Date
.
now
(
)
/
1000
-
30
;
await
sync_engine_and_validate_telem
(
engine
false
)
;
allVisits
=
(
await
PlacesUtils
.
history
.
fetch
(
"
https
:
/
/
www
.
example
.
com
"
{
includeVisits
:
true
}
)
)
.
visits
;
equal
(
allVisits
.
length
27
)
;
ok
(
allVisits
.
find
(
x
=
>
x
.
date
.
getTime
(
)
=
=
=
Date
.
UTC
(
2017
11
4
)
)
"
Should
contain
the
Dec
.
4th
visit
"
)
;
ok
(
allVisits
.
find
(
x
=
>
x
.
date
.
getTime
(
)
=
=
=
Date
.
UTC
(
2017
11
5
)
)
"
Should
contain
the
Dec
.
5th
visit
"
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
