Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
service
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
/
history
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
services
/
sync
/
utils
.
js
"
)
;
add_task
(
async
function
setup
(
)
{
initTestLogging
(
"
Trace
"
)
;
}
)
;
add_task
(
async
function
test_history_download_limit
(
)
{
let
engine
=
new
HistoryEngine
(
Service
)
;
await
engine
.
initialize
(
)
;
let
server
=
await
serverForFoo
(
engine
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
lastSync
=
Date
.
now
(
)
/
1000
;
let
collection
=
server
.
user
(
"
foo
"
)
.
collection
(
"
history
"
)
;
for
(
let
i
=
0
;
i
<
15
;
i
+
+
)
{
let
id
=
"
place
"
+
(
"
0
"
.
repeat
(
7
)
+
i
)
.
slice
(
-
7
)
;
let
wbo
=
new
ServerWBO
(
id
encryptPayload
(
{
id
histUri
:
"
http
:
/
/
example
.
com
/
"
+
i
title
:
"
Page
"
+
i
visits
:
[
{
date
:
Date
.
now
(
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
TYPED
}
{
date
:
Date
.
now
(
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
LINK
}
]
}
)
lastSync
+
1
+
i
)
;
wbo
.
sortindex
=
15
-
i
;
collection
.
insertWBO
(
wbo
)
;
}
engine
.
lastSync
=
lastSync
;
engine
.
downloadBatchSize
=
4
;
engine
.
downloadLimit
=
5
;
engine
.
guidFetchBatchSize
=
0
;
let
ping
=
await
sync_engine_and_validate_telem
(
engine
false
)
;
deepEqual
(
ping
.
engines
[
0
]
.
incoming
{
applied
:
5
}
)
;
let
backlogAfterFirstSync
=
engine
.
toFetch
.
slice
(
0
)
;
deepEqual
(
backlogAfterFirstSync
[
"
place0000000
"
"
place0000001
"
"
place0000002
"
"
place0000003
"
"
place0000004
"
"
place0000005
"
"
place0000006
"
"
place0000007
"
"
place0000008
"
"
place0000009
"
]
)
;
equal
(
engine
.
lastSync
lastSync
+
15
)
;
engine
.
lastModified
=
collection
.
modified
;
ping
=
await
sync_engine_and_validate_telem
(
engine
false
)
;
ok
(
!
ping
.
engines
[
0
]
.
incoming
)
;
let
backlogAfterSecondSync
=
engine
.
toFetch
.
slice
(
0
)
;
deepEqual
(
backlogAfterFirstSync
backlogAfterSecondSync
)
;
let
newWBO
=
new
ServerWBO
(
"
placeAAAAAAA
"
encryptPayload
(
{
id
:
"
placeAAAAAAA
"
histUri
:
"
http
:
/
/
example
.
com
/
a
"
title
:
"
New
Page
A
"
visits
:
[
{
date
:
Date
.
now
(
)
*
1000
type
:
PlacesUtils
.
history
.
TRANSITIONS
.
TYPED
}
]
}
)
lastSync
+
20
)
;
newWBO
.
sortindex
=
-
1
;
collection
.
insertWBO
(
newWBO
)
;
engine
.
lastModified
=
collection
.
modified
;
ping
=
await
sync_engine_and_validate_telem
(
engine
false
)
;
deepEqual
(
ping
.
engines
[
0
]
.
incoming
{
applied
:
1
}
)
;
let
backlogAfterThirdSync
=
engine
.
toFetch
.
slice
(
0
)
;
deepEqual
(
backlogAfterSecondSync
backlogAfterThirdSync
)
;
equal
(
engine
.
lastSync
lastSync
+
20
)
;
engine
.
guidFetchBatchSize
=
2
;
engine
.
lastModified
=
collection
.
modified
;
ping
=
await
sync_engine_and_validate_telem
(
engine
false
)
;
deepEqual
(
ping
.
engines
[
0
]
.
incoming
{
applied
:
5
}
)
;
deepEqual
(
engine
.
toFetch
[
"
place0000005
"
"
place0000006
"
"
place0000007
"
"
place0000008
"
"
place0000009
"
]
)
;
engine
.
lastModified
=
collection
.
modified
;
ping
=
await
sync_engine_and_validate_telem
(
engine
false
)
;
deepEqual
(
ping
.
engines
[
0
]
.
incoming
{
applied
:
5
}
)
;
deepEqual
(
engine
.
toFetch
[
]
)
;
}
)
;
