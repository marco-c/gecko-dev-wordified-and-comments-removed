"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BridgedRecord
:
"
resource
:
/
/
services
-
sync
/
bridged_engine
.
js
"
extensionStorageSync
:
"
resource
:
/
/
gre
/
modules
/
ExtensionStorageSync
.
jsm
"
ExtensionStorageEngineBridge
:
"
resource
:
/
/
services
-
sync
/
engines
/
extension
-
storage
.
js
"
Service
:
"
resource
:
/
/
services
-
sync
/
service
.
js
"
}
)
;
Services
.
prefs
.
setBoolPref
(
"
webextensions
.
storage
.
sync
.
kinto
"
false
)
;
Services
.
prefs
.
setStringPref
(
"
webextensions
.
storage
.
sync
.
log
.
level
"
"
debug
"
)
;
add_task
(
async
function
test_engine
(
)
{
let
engine
=
new
ExtensionStorageEngineBridge
(
Service
)
;
Assert
.
equal
(
engine
.
version
1
)
;
Assert
.
deepEqual
(
await
engine
.
getSyncID
(
)
null
)
;
await
engine
.
resetLocalSyncID
(
)
;
Assert
.
notEqual
(
await
engine
.
getSyncID
(
)
null
)
;
Assert
.
equal
(
await
engine
.
getLastSync
(
)
0
)
;
await
engine
.
setLastSync
(
1234
.
567
)
;
Assert
.
equal
(
await
engine
.
getLastSync
(
)
1234
.
57
)
;
await
engine
.
setLastSync
(
0
)
;
await
extensionStorageSync
.
set
(
{
id
:
"
ext
-
2
"
}
{
ext_2_key
:
"
ext_2_value
"
}
)
;
let
server
=
await
serverForFoo
(
engine
)
;
try
{
await
SyncTestingInfrastructure
(
server
)
;
info
(
"
Add
server
records
"
)
;
let
foo
=
server
.
user
(
"
foo
"
)
;
let
collection
=
foo
.
collection
(
"
extension
-
storage
"
)
;
let
now
=
new_timestamp
(
)
;
collection
.
insert
(
"
fakeguid0000
"
encryptPayload
(
{
id
:
"
fakeguid0000
"
extId
:
"
ext
-
1
"
data
:
JSON
.
stringify
(
{
foo
:
"
bar
"
}
)
}
)
now
)
;
info
(
"
Sync
the
engine
"
)
;
await
sync_engine_and_validate_telem
(
engine
false
)
;
Assert
.
deepEqual
(
await
extensionStorageSync
.
get
(
{
id
:
"
ext
-
1
"
}
null
)
{
foo
:
"
bar
"
}
)
;
let
payloads
=
collection
.
payloads
(
)
;
Assert
.
equal
(
payloads
.
length
2
)
;
let
newPayload
=
payloads
[
0
]
.
id
=
=
"
fakeguid0000
"
?
payloads
[
1
]
:
payloads
[
0
]
;
Assert
.
equal
(
newPayload
.
data
{
"
ext_2_key
"
:
"
ext_2_value
"
}
)
;
greater
(
await
engine
.
getLastSync
(
)
0
"
Should
update
last
sync
time
"
)
;
}
finally
{
await
promiseStopServer
(
server
)
;
await
engine
.
finalize
(
)
;
}
}
)
;
