Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
constants
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
keys
.
js
"
)
;
const
EHTestsCommon
=
{
service_unavailable
(
request
response
)
{
let
body
=
"
Service
Unavailable
"
;
response
.
setStatusLine
(
request
.
httpVersion
503
"
Service
Unavailable
"
)
;
response
.
setHeader
(
"
Retry
-
After
"
"
42
"
)
;
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
async
sync_httpd_setup
(
)
{
let
global
=
new
ServerWBO
(
"
global
"
{
syncID
:
Service
.
syncID
storageVersion
:
STORAGE_VERSION
engines
:
{
clients
:
{
version
:
Service
.
clientsEngine
.
version
syncID
:
Service
.
clientsEngine
.
syncID
}
catapult
:
{
version
:
Service
.
engineManager
.
get
(
"
catapult
"
)
.
version
syncID
:
Service
.
engineManager
.
get
(
"
catapult
"
)
.
syncID
}
}
}
)
;
let
clientsColl
=
new
ServerCollection
(
{
}
true
)
;
let
collectionsHelper
=
track_collections_helper
(
)
;
let
upd
=
collectionsHelper
.
with_updated_collection
;
let
handler_401
=
httpd_handler
(
401
"
Unauthorized
"
)
;
return
httpd_setup
(
{
"
/
1
.
1
/
johndoe
/
storage
/
meta
/
global
"
:
upd
(
"
meta
"
global
.
handler
(
)
)
"
/
1
.
1
/
johndoe
/
info
/
collections
"
:
collectionsHelper
.
handler
"
/
1
.
1
/
johndoe
/
storage
/
crypto
/
keys
"
:
upd
(
"
crypto
"
(
new
ServerWBO
(
"
keys
"
)
)
.
handler
(
)
)
"
/
1
.
1
/
johndoe
/
storage
/
clients
"
:
upd
(
"
clients
"
clientsColl
.
handler
(
)
)
"
/
1
.
1
/
janedoe
/
storage
/
meta
/
global
"
:
handler_401
"
/
1
.
1
/
janedoe
/
info
/
collections
"
:
handler_401
"
/
1
.
1
/
broken
.
info
/
info
/
collections
"
:
EHTestsCommon
.
service_unavailable
"
/
1
.
1
/
broken
.
meta
/
storage
/
meta
/
global
"
:
EHTestsCommon
.
service_unavailable
"
/
1
.
1
/
broken
.
meta
/
info
/
collections
"
:
collectionsHelper
.
handler
"
/
1
.
1
/
broken
.
keys
/
storage
/
meta
/
global
"
:
upd
(
"
meta
"
global
.
handler
(
)
)
"
/
1
.
1
/
broken
.
keys
/
info
/
collections
"
:
collectionsHelper
.
handler
"
/
1
.
1
/
broken
.
keys
/
storage
/
crypto
/
keys
"
:
EHTestsCommon
.
service_unavailable
"
/
1
.
1
/
broken
.
wipe
/
info
/
collections
"
:
collectionsHelper
.
handler
"
/
1
.
1
/
broken
.
wipe
/
storage
/
meta
/
global
"
:
upd
(
"
meta
"
global
.
handler
(
)
)
"
/
1
.
1
/
broken
.
wipe
/
storage
/
crypto
/
keys
"
:
upd
(
"
crypto
"
(
new
ServerWBO
(
"
keys
"
)
)
.
handler
(
)
)
"
/
1
.
1
/
broken
.
wipe
/
storage
"
:
EHTestsCommon
.
service_unavailable
"
/
1
.
1
/
broken
.
wipe
/
storage
/
clients
"
:
upd
(
"
clients
"
clientsColl
.
handler
(
)
)
"
/
1
.
1
/
broken
.
wipe
/
storage
/
catapult
"
:
EHTestsCommon
.
service_unavailable
}
)
;
}
CatapultEngine
:
(
function
(
)
{
function
CatapultEngine
(
)
{
SyncEngine
.
call
(
this
"
Catapult
"
Service
)
;
}
CatapultEngine
.
prototype
=
{
__proto__
:
SyncEngine
.
prototype
exception
:
null
async
_sync
(
)
{
if
(
this
.
exception
)
{
throw
this
.
exception
;
}
}
}
;
return
CatapultEngine
;
}
(
)
)
async
generateCredentialsChangedFailure
(
)
{
let
newSyncKeyBundle
=
new
BulkKeyBundle
(
"
crypto
"
)
;
await
newSyncKeyBundle
.
generateRandom
(
)
;
let
keys
=
Service
.
collectionKeys
.
asWBO
(
)
;
await
keys
.
encrypt
(
newSyncKeyBundle
)
;
return
keys
.
upload
(
Service
.
resource
(
Service
.
cryptoKeysURL
)
)
;
}
async
setUp
(
server
)
{
syncTestLogging
(
)
;
await
configureIdentity
(
{
username
:
"
johndoe
"
}
server
)
;
return
EHTestsCommon
.
generateAndUploadKeys
(
)
;
}
async
generateAndUploadKeys
(
)
{
await
generateNewKeys
(
Service
.
collectionKeys
)
;
let
serverKeys
=
Service
.
collectionKeys
.
asWBO
(
"
crypto
"
"
keys
"
)
;
await
serverKeys
.
encrypt
(
Service
.
identity
.
syncKeyBundle
)
;
let
response
=
await
serverKeys
.
upload
(
Service
.
resource
(
Service
.
cryptoKeysURL
)
)
;
return
response
.
success
;
}
}
;
