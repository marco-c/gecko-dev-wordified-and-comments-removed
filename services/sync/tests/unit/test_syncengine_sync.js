Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
constants
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
engines
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
policies
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
record
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
resource
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
service
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
services
/
sync
/
rotaryengine
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
services
/
sync
/
utils
.
js
"
)
;
function
makeRotaryEngine
(
)
{
return
new
RotaryEngine
(
Service
)
;
}
async
function
clean
(
engine
)
{
Svc
.
Prefs
.
resetBranch
(
"
"
)
;
Svc
.
Prefs
.
set
(
"
log
.
logger
.
engine
.
rotary
"
"
Trace
"
)
;
Service
.
recordManager
.
clearCache
(
)
;
engine
.
_tracker
.
clearChangedIDs
(
)
;
await
engine
.
finalize
(
)
;
}
async
function
cleanAndGo
(
engine
server
)
{
await
clean
(
engine
)
;
await
promiseStopServer
(
server
)
;
}
async
function
promiseClean
(
engine
server
)
{
await
clean
(
engine
)
;
await
promiseStopServer
(
server
)
;
}
async
function
createServerAndConfigureClient
(
)
{
let
engine
=
new
RotaryEngine
(
Service
)
;
let
contents
=
{
meta
:
{
global
:
{
engines
:
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
}
}
crypto
:
{
}
rotary
:
{
}
}
;
const
USER
=
"
foo
"
;
let
server
=
new
SyncServer
(
)
;
server
.
registerUser
(
USER
"
password
"
)
;
server
.
createContents
(
USER
contents
)
;
server
.
start
(
)
;
await
SyncTestingInfrastructure
(
server
USER
)
;
Service
.
_updateCachedURLs
(
)
;
return
[
engine
server
USER
]
;
}
function
run_test
(
)
{
generateNewKeys
(
Service
.
collectionKeys
)
;
Svc
.
Prefs
.
set
(
"
log
.
logger
.
engine
.
rotary
"
"
Trace
"
)
;
run_next_test
(
)
;
}
add_task
(
async
function
test_syncStartup_emptyOrOutdatedGlobalsResetsSync
(
)
{
_
(
"
SyncEngine
.
_syncStartup
resets
sync
and
wipes
server
data
if
there
'
s
no
or
an
outdated
global
record
"
)
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
insert
(
"
flying
"
encryptPayload
(
{
id
:
"
flying
"
denomination
:
"
LNER
Class
A3
4472
"
}
)
)
;
collection
.
insert
(
"
scotsman
"
encryptPayload
(
{
id
:
"
scotsman
"
denomination
:
"
Flying
Scotsman
"
}
)
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
_store
.
items
=
{
rekolok
:
"
Rekonstruktionslokomotive
"
}
;
try
{
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
rekolok
undefined
)
;
let
metaGlobal
=
await
Service
.
recordManager
.
get
(
engine
.
metaURL
)
;
do_check_eq
(
metaGlobal
.
payload
.
engines
undefined
)
;
do_check_true
(
!
!
collection
.
payload
(
"
flying
"
)
)
;
do_check_true
(
!
!
collection
.
payload
(
"
scotsman
"
)
)
;
engine
.
lastSync
=
Date
.
now
(
)
/
1000
;
engine
.
lastSyncLocal
=
Date
.
now
(
)
;
await
engine
.
_syncStartup
(
)
;
let
engineData
=
metaGlobal
.
payload
.
engines
.
rotary
;
do_check_eq
(
engineData
.
version
engine
.
version
)
;
do_check_eq
(
engineData
.
syncID
engine
.
syncID
)
;
do_check_eq
(
engine
.
lastSync
0
)
;
do_check_eq
(
collection
.
payload
(
"
flying
"
)
undefined
)
;
do_check_eq
(
collection
.
payload
(
"
scotsman
"
)
undefined
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_syncStartup_serverHasNewerVersion
(
)
{
_
(
"
SyncEngine
.
_syncStartup
"
)
;
let
global
=
new
ServerWBO
(
"
global
"
{
engines
:
{
rotary
:
{
version
:
23456
}
}
}
)
;
let
server
=
httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
meta
/
global
"
:
global
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
try
{
let
error
;
try
{
await
engine
.
_syncStartup
(
)
;
}
catch
(
ex
)
{
error
=
ex
;
}
do_check_eq
(
error
.
failureCode
VERSION_OUT_OF_DATE
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_syncStartup_syncIDMismatchResetsClient
(
)
{
_
(
"
SyncEngine
.
_syncStartup
resets
sync
if
syncIDs
don
'
t
match
"
)
;
let
server
=
sync_httpd_setup
(
{
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
let
global
=
new
ServerWBO
(
"
global
"
{
engines
:
{
rotary
:
{
version
:
engine
.
version
syncID
:
"
foobar
"
}
}
}
)
;
server
.
registerPathHandler
(
"
/
1
.
1
/
foo
/
storage
/
meta
/
global
"
global
.
handler
(
)
)
;
try
{
do_check_eq
(
engine
.
syncID
"
fake
-
guid
-
00
"
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
rekolok
undefined
)
;
engine
.
lastSync
=
Date
.
now
(
)
/
1000
;
engine
.
lastSyncLocal
=
Date
.
now
(
)
;
await
engine
.
_syncStartup
(
)
;
do_check_eq
(
engine
.
syncID
"
foobar
"
)
;
do_check_eq
(
engine
.
lastSync
0
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_processIncoming_emptyServer
(
)
{
_
(
"
SyncEngine
.
_processIncoming
working
with
an
empty
server
backend
"
)
;
let
collection
=
new
ServerCollection
(
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
try
{
await
engine
.
_processIncoming
(
)
;
do_check_eq
(
engine
.
lastSync
0
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_processIncoming_createFromServer
(
)
{
_
(
"
SyncEngine
.
_processIncoming
creates
new
records
from
server
data
"
)
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
insert
(
"
flying
"
encryptPayload
(
{
id
:
"
flying
"
denomination
:
"
LNER
Class
A3
4472
"
}
)
)
;
collection
.
insert
(
"
scotsman
"
encryptPayload
(
{
id
:
"
scotsman
"
denomination
:
"
Flying
Scotsman
"
}
)
)
;
let
pathologicalPayload
=
encryptPayload
(
{
id
:
"
.
.
/
pathological
"
denomination
:
"
Pathological
Case
"
}
)
;
collection
.
insert
(
"
.
.
/
pathological
"
pathologicalPayload
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
"
/
1
.
1
/
foo
/
storage
/
rotary
/
flying
"
:
collection
.
wbo
(
"
flying
"
)
.
handler
(
)
"
/
1
.
1
/
foo
/
storage
/
rotary
/
scotsman
"
:
collection
.
wbo
(
"
scotsman
"
)
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
generateNewKeys
(
Service
.
collectionKeys
)
;
let
engine
=
makeRotaryEngine
(
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_eq
(
engine
.
lastSync
0
)
;
do_check_eq
(
engine
.
lastModified
null
)
;
do_check_eq
(
engine
.
_store
.
items
.
flying
undefined
)
;
do_check_eq
(
engine
.
_store
.
items
.
scotsman
undefined
)
;
do_check_eq
(
engine
.
_store
.
items
[
"
.
.
/
pathological
"
]
undefined
)
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_processIncoming
(
)
;
do_check_true
(
engine
.
lastSync
>
0
)
;
do_check_true
(
engine
.
lastModified
>
0
)
;
do_check_eq
(
engine
.
_store
.
items
.
flying
"
LNER
Class
A3
4472
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
scotsman
"
Flying
Scotsman
"
)
;
do_check_eq
(
engine
.
_store
.
items
[
"
.
.
/
pathological
"
]
"
Pathological
Case
"
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_processIncoming_reconcile
(
)
{
_
(
"
SyncEngine
.
_processIncoming
updates
local
records
"
)
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
insert
(
"
newrecord
"
encryptPayload
(
{
id
:
"
newrecord
"
denomination
:
"
New
stuff
.
.
.
"
}
)
)
;
collection
.
insert
(
"
newerserver
"
encryptPayload
(
{
id
:
"
newerserver
"
denomination
:
"
New
data
!
"
}
)
)
;
collection
.
insert
(
"
olderidentical
"
encryptPayload
(
{
id
:
"
olderidentical
"
denomination
:
"
Older
but
identical
"
}
)
)
;
collection
.
_wbos
.
olderidentical
.
modified
-
=
120
;
collection
.
insert
(
"
updateclient
"
encryptPayload
(
{
id
:
"
updateclient
"
denomination
:
"
Get
this
!
"
}
)
)
;
collection
.
insert
(
"
duplication
"
encryptPayload
(
{
id
:
"
duplication
"
denomination
:
"
Original
Entry
"
}
)
)
;
collection
.
insert
(
"
nukeme
"
encryptPayload
(
{
id
:
"
nukeme
"
denomination
:
"
Nuke
me
!
"
deleted
:
true
}
)
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
_store
.
items
=
{
newerserver
:
"
New
data
but
not
as
new
as
server
!
"
olderidentical
:
"
Older
but
identical
"
updateclient
:
"
Got
data
?
"
original
:
"
Original
Entry
"
long_original
:
"
Long
Original
Entry
"
nukeme
:
"
Nuke
me
!
"
}
;
engine
.
_tracker
.
addChangedID
(
"
newerserver
"
Date
.
now
(
)
/
1000
-
60
)
;
engine
.
_tracker
.
addChangedID
(
"
olderidentical
"
Date
.
now
(
)
/
1000
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_eq
(
engine
.
_store
.
items
.
newrecord
undefined
)
;
do_check_eq
(
engine
.
_store
.
items
.
newerserver
"
New
data
but
not
as
new
as
server
!
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
olderidentical
"
Older
but
identical
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
updateclient
"
Got
data
?
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
nukeme
"
Nuke
me
!
"
)
;
do_check_true
(
engine
.
_tracker
.
changedIDs
.
olderidentical
>
0
)
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_processIncoming
(
)
;
do_check_true
(
engine
.
lastSync
>
0
)
;
do_check_true
(
engine
.
lastModified
>
0
)
;
do_check_eq
(
engine
.
_store
.
items
.
newrecord
"
New
stuff
.
.
.
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
newerserver
"
New
data
!
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
olderidentical
"
Older
but
identical
"
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
olderidentical
undefined
)
;
do_check_eq
(
engine
.
_store
.
items
.
updateclient
"
Get
this
!
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
original
undefined
)
;
do_check_eq
(
engine
.
_store
.
items
.
duplication
"
Original
Entry
"
)
;
do_check_neq
(
engine
.
_delete
.
ids
.
indexOf
(
"
original
"
)
-
1
)
;
do_check_eq
(
engine
.
_store
.
items
.
nukeme
undefined
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_processIncoming_reconcile_local_deleted
(
)
{
_
(
"
Ensure
local
duplicate
ID
is
deleted
on
server
.
"
)
;
let
[
engine
server
user
]
=
await
createServerAndConfigureClient
(
)
;
let
now
=
Date
.
now
(
)
/
1000
-
10
;
engine
.
lastSync
=
now
;
engine
.
lastModified
=
now
+
1
;
let
record
=
encryptPayload
(
{
id
:
"
DUPE_INCOMING
"
denomination
:
"
incoming
"
}
)
;
let
wbo
=
new
ServerWBO
(
"
DUPE_INCOMING
"
record
now
+
2
)
;
server
.
insertWBO
(
user
"
rotary
"
wbo
)
;
record
=
encryptPayload
(
{
id
:
"
DUPE_LOCAL
"
denomination
:
"
local
"
}
)
;
wbo
=
new
ServerWBO
(
"
DUPE_LOCAL
"
record
now
-
1
)
;
server
.
insertWBO
(
user
"
rotary
"
wbo
)
;
await
engine
.
_store
.
create
(
{
id
:
"
DUPE_LOCAL
"
denomination
:
"
local
"
}
)
;
do_check_true
(
(
await
engine
.
_store
.
itemExists
(
"
DUPE_LOCAL
"
)
)
)
;
do_check_eq
(
"
DUPE_LOCAL
"
(
await
engine
.
_findDupe
(
{
id
:
"
DUPE_INCOMING
"
}
)
)
)
;
await
engine
.
_sync
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
1
)
;
do_check_true
(
"
DUPE_INCOMING
"
in
engine
.
_store
.
items
)
;
let
collection
=
server
.
getCollection
(
user
"
rotary
"
)
;
do_check_eq
(
1
collection
.
count
(
)
)
;
do_check_neq
(
undefined
collection
.
wbo
(
"
DUPE_INCOMING
"
)
)
;
await
cleanAndGo
(
engine
server
)
;
}
)
;
add_task
(
async
function
test_processIncoming_reconcile_equivalent
(
)
{
_
(
"
Ensure
proper
handling
of
incoming
records
that
match
local
.
"
)
;
let
[
engine
server
user
]
=
await
createServerAndConfigureClient
(
)
;
let
now
=
Date
.
now
(
)
/
1000
-
10
;
engine
.
lastSync
=
now
;
engine
.
lastModified
=
now
+
1
;
let
record
=
encryptPayload
(
{
id
:
"
entry
"
denomination
:
"
denomination
"
}
)
;
let
wbo
=
new
ServerWBO
(
"
entry
"
record
now
+
2
)
;
server
.
insertWBO
(
user
"
rotary
"
wbo
)
;
engine
.
_store
.
items
=
{
entry
:
"
denomination
"
}
;
do_check_true
(
(
await
engine
.
_store
.
itemExists
(
"
entry
"
)
)
)
;
await
engine
.
_sync
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
1
)
;
await
cleanAndGo
(
engine
server
)
;
}
)
;
add_task
(
async
function
test_processIncoming_reconcile_locally_deleted_dupe_new
(
)
{
_
(
"
Ensure
locally
deleted
duplicate
record
newer
than
incoming
is
handled
.
"
)
;
let
[
engine
server
user
]
=
await
createServerAndConfigureClient
(
)
;
let
now
=
Date
.
now
(
)
/
1000
-
10
;
engine
.
lastSync
=
now
;
engine
.
lastModified
=
now
+
1
;
let
record
=
encryptPayload
(
{
id
:
"
DUPE_INCOMING
"
denomination
:
"
incoming
"
}
)
;
let
wbo
=
new
ServerWBO
(
"
DUPE_INCOMING
"
record
now
+
2
)
;
server
.
insertWBO
(
user
"
rotary
"
wbo
)
;
engine
.
_store
.
items
=
{
}
;
engine
.
_tracker
.
addChangedID
(
"
DUPE_LOCAL
"
now
+
3
)
;
do_check_false
(
(
await
engine
.
_store
.
itemExists
(
"
DUPE_LOCAL
"
)
)
)
;
do_check_false
(
(
await
engine
.
_store
.
itemExists
(
"
DUPE_INCOMING
"
)
)
)
;
do_check_eq
(
"
DUPE_LOCAL
"
(
await
engine
.
_findDupe
(
{
id
:
"
DUPE_INCOMING
"
}
)
)
)
;
engine
.
lastModified
=
server
.
getCollection
(
user
engine
.
name
)
.
timestamp
;
await
engine
.
_sync
(
)
;
do_check_empty
(
engine
.
_store
.
items
)
;
let
collection
=
server
.
getCollection
(
user
"
rotary
"
)
;
do_check_eq
(
1
collection
.
count
(
)
)
;
wbo
=
collection
.
wbo
(
"
DUPE_INCOMING
"
)
;
do_check_neq
(
null
wbo
)
;
let
payload
=
JSON
.
parse
(
JSON
.
parse
(
wbo
.
payload
)
.
ciphertext
)
;
do_check_true
(
payload
.
deleted
)
;
await
cleanAndGo
(
engine
server
)
;
}
)
;
add_task
(
async
function
test_processIncoming_reconcile_locally_deleted_dupe_old
(
)
{
_
(
"
Ensure
locally
deleted
duplicate
record
older
than
incoming
is
restored
.
"
)
;
let
[
engine
server
user
]
=
await
createServerAndConfigureClient
(
)
;
let
now
=
Date
.
now
(
)
/
1000
-
10
;
engine
.
lastSync
=
now
;
engine
.
lastModified
=
now
+
1
;
let
record
=
encryptPayload
(
{
id
:
"
DUPE_INCOMING
"
denomination
:
"
incoming
"
}
)
;
let
wbo
=
new
ServerWBO
(
"
DUPE_INCOMING
"
record
now
+
2
)
;
server
.
insertWBO
(
user
"
rotary
"
wbo
)
;
engine
.
_store
.
items
=
{
}
;
engine
.
_tracker
.
addChangedID
(
"
DUPE_LOCAL
"
now
+
1
)
;
do_check_false
(
(
await
engine
.
_store
.
itemExists
(
"
DUPE_LOCAL
"
)
)
)
;
do_check_false
(
(
await
engine
.
_store
.
itemExists
(
"
DUPE_INCOMING
"
)
)
)
;
do_check_eq
(
"
DUPE_LOCAL
"
(
await
engine
.
_findDupe
(
{
id
:
"
DUPE_INCOMING
"
}
)
)
)
;
await
engine
.
_sync
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
1
)
;
do_check_true
(
"
DUPE_INCOMING
"
in
engine
.
_store
.
items
)
;
do_check_eq
(
"
incoming
"
engine
.
_store
.
items
.
DUPE_INCOMING
)
;
let
collection
=
server
.
getCollection
(
user
"
rotary
"
)
;
do_check_eq
(
1
collection
.
count
(
)
)
;
wbo
=
collection
.
wbo
(
"
DUPE_INCOMING
"
)
;
let
payload
=
JSON
.
parse
(
JSON
.
parse
(
wbo
.
payload
)
.
ciphertext
)
;
do_check_eq
(
"
incoming
"
payload
.
denomination
)
;
await
cleanAndGo
(
engine
server
)
;
}
)
;
add_task
(
async
function
test_processIncoming_reconcile_changed_dupe
(
)
{
_
(
"
Ensure
that
locally
changed
duplicate
record
is
handled
properly
.
"
)
;
let
[
engine
server
user
]
=
await
createServerAndConfigureClient
(
)
;
let
now
=
Date
.
now
(
)
/
1000
-
10
;
engine
.
lastSync
=
now
;
engine
.
lastModified
=
now
+
1
;
let
record
=
encryptPayload
(
{
id
:
"
DUPE_INCOMING
"
denomination
:
"
incoming
"
}
)
;
let
wbo
=
new
ServerWBO
(
"
DUPE_INCOMING
"
record
now
+
2
)
;
server
.
insertWBO
(
user
"
rotary
"
wbo
)
;
await
engine
.
_store
.
create
(
{
id
:
"
DUPE_LOCAL
"
denomination
:
"
local
"
}
)
;
engine
.
_tracker
.
addChangedID
(
"
DUPE_LOCAL
"
now
+
3
)
;
do_check_true
(
(
await
engine
.
_store
.
itemExists
(
"
DUPE_LOCAL
"
)
)
)
;
do_check_eq
(
"
DUPE_LOCAL
"
(
await
engine
.
_findDupe
(
{
id
:
"
DUPE_INCOMING
"
}
)
)
)
;
engine
.
lastModified
=
server
.
getCollection
(
user
engine
.
name
)
.
timestamp
;
await
engine
.
_sync
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
1
)
;
do_check_true
(
"
DUPE_INCOMING
"
in
engine
.
_store
.
items
)
;
let
collection
=
server
.
getCollection
(
user
"
rotary
"
)
;
do_check_eq
(
1
collection
.
count
(
)
)
;
wbo
=
collection
.
wbo
(
"
DUPE_INCOMING
"
)
;
do_check_neq
(
undefined
wbo
)
;
let
payload
=
JSON
.
parse
(
JSON
.
parse
(
wbo
.
payload
)
.
ciphertext
)
;
do_check_eq
(
"
local
"
payload
.
denomination
)
;
await
cleanAndGo
(
engine
server
)
;
}
)
;
add_task
(
async
function
test_processIncoming_reconcile_changed_dupe_new
(
)
{
_
(
"
Ensure
locally
changed
duplicate
record
older
than
incoming
is
ignored
.
"
)
;
let
[
engine
server
user
]
=
await
createServerAndConfigureClient
(
)
;
let
now
=
Date
.
now
(
)
/
1000
-
10
;
engine
.
lastSync
=
now
;
engine
.
lastModified
=
now
+
1
;
let
record
=
encryptPayload
(
{
id
:
"
DUPE_INCOMING
"
denomination
:
"
incoming
"
}
)
;
let
wbo
=
new
ServerWBO
(
"
DUPE_INCOMING
"
record
now
+
2
)
;
server
.
insertWBO
(
user
"
rotary
"
wbo
)
;
await
engine
.
_store
.
create
(
{
id
:
"
DUPE_LOCAL
"
denomination
:
"
local
"
}
)
;
engine
.
_tracker
.
addChangedID
(
"
DUPE_LOCAL
"
now
+
1
)
;
do_check_true
(
(
await
engine
.
_store
.
itemExists
(
"
DUPE_LOCAL
"
)
)
)
;
do_check_eq
(
"
DUPE_LOCAL
"
(
await
engine
.
_findDupe
(
{
id
:
"
DUPE_INCOMING
"
}
)
)
)
;
engine
.
lastModified
=
server
.
getCollection
(
user
engine
.
name
)
.
timestamp
;
await
engine
.
_sync
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
1
)
;
do_check_true
(
"
DUPE_INCOMING
"
in
engine
.
_store
.
items
)
;
let
collection
=
server
.
getCollection
(
user
"
rotary
"
)
;
do_check_eq
(
1
collection
.
count
(
)
)
;
wbo
=
collection
.
wbo
(
"
DUPE_INCOMING
"
)
;
do_check_neq
(
undefined
wbo
)
;
let
payload
=
JSON
.
parse
(
JSON
.
parse
(
wbo
.
payload
)
.
ciphertext
)
;
do_check_eq
(
"
incoming
"
payload
.
denomination
)
;
await
cleanAndGo
(
engine
server
)
;
}
)
;
add_task
(
async
function
test_processIncoming_resume_toFetch
(
)
{
_
(
"
toFetch
and
previousFailed
items
left
over
from
previous
syncs
are
fetched
on
the
next
sync
along
with
new
items
.
"
)
;
const
LASTSYNC
=
Date
.
now
(
)
/
1000
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
insert
(
"
flying
"
encryptPayload
(
{
id
:
"
flying
"
denomination
:
"
LNER
Class
A3
4472
"
}
)
)
;
collection
.
insert
(
"
scotsman
"
encryptPayload
(
{
id
:
"
scotsman
"
denomination
:
"
Flying
Scotsman
"
}
)
)
;
collection
.
insert
(
"
rekolok
"
encryptPayload
(
{
id
:
"
rekolok
"
denomination
:
"
Rekonstruktionslokomotive
"
}
)
)
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
id
=
"
failed
"
+
i
;
let
payload
=
encryptPayload
(
{
id
denomination
:
"
Record
No
.
"
+
i
}
)
;
let
wbo
=
new
ServerWBO
(
id
payload
)
;
wbo
.
modified
=
LASTSYNC
-
10
;
collection
.
insertWBO
(
wbo
)
;
}
collection
.
wbo
(
"
flying
"
)
.
modified
=
collection
.
wbo
(
"
scotsman
"
)
.
modified
=
LASTSYNC
-
10
;
collection
.
_wbos
.
rekolok
.
modified
=
LASTSYNC
+
10
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
lastSync
=
LASTSYNC
;
engine
.
toFetch
=
[
"
flying
"
"
scotsman
"
]
;
engine
.
previousFailed
=
[
"
failed0
"
"
failed1
"
"
failed2
"
]
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_eq
(
engine
.
_store
.
items
.
flying
undefined
)
;
do_check_eq
(
engine
.
_store
.
items
.
scotsman
undefined
)
;
do_check_eq
(
engine
.
_store
.
items
.
rekolok
undefined
)
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_processIncoming
(
)
;
do_check_eq
(
engine
.
_store
.
items
.
flying
"
LNER
Class
A3
4472
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
scotsman
"
Flying
Scotsman
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
rekolok
"
Rekonstruktionslokomotive
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
failed0
"
Record
No
.
0
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
failed1
"
Record
No
.
1
"
)
;
do_check_eq
(
engine
.
_store
.
items
.
failed2
"
Record
No
.
2
"
)
;
do_check_eq
(
engine
.
previousFailed
.
length
0
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_processIncoming_applyIncomingBatchSize_smaller
(
)
{
_
(
"
Ensure
that
a
number
of
incoming
items
less
than
applyIncomingBatchSize
is
still
applied
.
"
)
;
const
APPLY_BATCH_SIZE
=
10
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
applyIncomingBatchSize
=
APPLY_BATCH_SIZE
;
engine
.
_store
.
_applyIncomingBatch
=
engine
.
_store
.
applyIncomingBatch
;
engine
.
_store
.
applyIncomingBatch
=
async
function
(
records
)
{
let
failed1
=
records
.
shift
(
)
;
let
failed2
=
records
.
pop
(
)
;
await
this
.
_applyIncomingBatch
(
records
)
;
return
[
failed1
.
id
failed2
.
id
]
;
}
;
let
collection
=
new
ServerCollection
(
)
;
for
(
let
i
=
0
;
i
<
APPLY_BATCH_SIZE
-
1
;
i
+
+
)
{
let
id
=
"
record
-
no
-
"
+
i
;
let
payload
=
encryptPayload
(
{
id
denomination
:
"
Record
No
.
"
+
id
}
)
;
collection
.
insert
(
id
payload
)
;
}
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_empty
(
engine
.
_store
.
items
)
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_processIncoming
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
APPLY_BATCH_SIZE
-
1
-
2
)
;
do_check_eq
(
engine
.
toFetch
.
length
0
)
;
do_check_eq
(
engine
.
previousFailed
.
length
2
)
;
do_check_eq
(
engine
.
previousFailed
[
0
]
"
record
-
no
-
0
"
)
;
do_check_eq
(
engine
.
previousFailed
[
1
]
"
record
-
no
-
8
"
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_processIncoming_applyIncomingBatchSize_multiple
(
)
{
_
(
"
Ensure
that
incoming
items
are
applied
according
to
applyIncomingBatchSize
.
"
)
;
const
APPLY_BATCH_SIZE
=
10
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
applyIncomingBatchSize
=
APPLY_BATCH_SIZE
;
let
batchCalls
=
0
;
engine
.
_store
.
_applyIncomingBatch
=
engine
.
_store
.
applyIncomingBatch
;
engine
.
_store
.
applyIncomingBatch
=
async
function
(
records
)
{
batchCalls
+
=
1
;
do_check_eq
(
records
.
length
APPLY_BATCH_SIZE
)
;
await
this
.
_applyIncomingBatch
.
apply
(
this
arguments
)
;
}
;
let
collection
=
new
ServerCollection
(
)
;
for
(
let
i
=
0
;
i
<
APPLY_BATCH_SIZE
*
3
;
i
+
+
)
{
let
id
=
"
record
-
no
-
"
+
i
;
let
payload
=
encryptPayload
(
{
id
denomination
:
"
Record
No
.
"
+
id
}
)
;
collection
.
insert
(
id
payload
)
;
}
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_empty
(
engine
.
_store
.
items
)
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_processIncoming
(
)
;
do_check_eq
(
batchCalls
3
)
;
do_check_attribute_count
(
engine
.
_store
.
items
APPLY_BATCH_SIZE
*
3
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_processIncoming_notify_count
(
)
{
_
(
"
Ensure
that
failed
records
are
reported
only
once
.
"
)
;
const
APPLY_BATCH_SIZE
=
5
;
const
NUMBER_OF_RECORDS
=
15
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
applyIncomingBatchSize
=
APPLY_BATCH_SIZE
;
engine
.
_store
.
_applyIncomingBatch
=
engine
.
_store
.
applyIncomingBatch
;
engine
.
_store
.
applyIncomingBatch
=
async
function
(
records
)
{
await
engine
.
_store
.
_applyIncomingBatch
(
records
.
slice
(
1
)
)
;
return
[
records
[
0
]
.
id
]
;
}
;
let
collection
=
new
ServerCollection
(
)
;
for
(
var
i
=
0
;
i
<
NUMBER_OF_RECORDS
;
i
+
+
)
{
let
id
=
"
record
-
no
-
"
+
i
;
let
payload
=
encryptPayload
(
{
id
denomination
:
"
Record
No
.
"
+
id
}
)
;
collection
.
insert
(
id
payload
)
;
}
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_eq
(
engine
.
lastSync
0
)
;
do_check_eq
(
engine
.
toFetch
.
length
0
)
;
do_check_eq
(
engine
.
previousFailed
.
length
0
)
;
do_check_empty
(
engine
.
_store
.
items
)
;
let
called
=
0
;
let
counts
;
function
onApplied
(
count
)
{
_
(
"
Called
with
"
+
JSON
.
stringify
(
counts
)
)
;
counts
=
count
;
called
+
+
;
}
Svc
.
Obs
.
add
(
"
weave
:
engine
:
sync
:
applied
"
onApplied
)
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_processIncoming
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
12
)
;
do_check_eq
(
engine
.
previousFailed
.
length
3
)
;
do_check_eq
(
engine
.
previousFailed
[
0
]
"
record
-
no
-
0
"
)
;
do_check_eq
(
engine
.
previousFailed
[
1
]
"
record
-
no
-
5
"
)
;
do_check_eq
(
engine
.
previousFailed
[
2
]
"
record
-
no
-
10
"
)
;
do_check_eq
(
called
1
)
;
do_check_eq
(
counts
.
failed
3
)
;
do_check_eq
(
counts
.
applied
15
)
;
do_check_eq
(
counts
.
newFailed
3
)
;
do_check_eq
(
counts
.
succeeded
12
)
;
await
engine
.
_processIncoming
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
14
)
;
do_check_eq
(
engine
.
previousFailed
.
length
1
)
;
do_check_eq
(
engine
.
previousFailed
[
0
]
"
record
-
no
-
0
"
)
;
do_check_eq
(
called
2
)
;
do_check_eq
(
counts
.
failed
1
)
;
do_check_eq
(
counts
.
applied
3
)
;
do_check_eq
(
counts
.
newFailed
0
)
;
do_check_eq
(
counts
.
succeeded
2
)
;
Svc
.
Obs
.
remove
(
"
weave
:
engine
:
sync
:
applied
"
onApplied
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_processIncoming_previousFailed
(
)
{
_
(
"
Ensure
that
failed
records
are
retried
.
"
)
;
Svc
.
Prefs
.
set
(
"
client
.
type
"
"
mobile
"
)
;
const
APPLY_BATCH_SIZE
=
4
;
const
NUMBER_OF_RECORDS
=
14
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
mobileGUIDFetchBatchSize
=
engine
.
applyIncomingBatchSize
=
APPLY_BATCH_SIZE
;
engine
.
_store
.
_applyIncomingBatch
=
engine
.
_store
.
applyIncomingBatch
;
engine
.
_store
.
applyIncomingBatch
=
async
function
(
records
)
{
await
engine
.
_store
.
_applyIncomingBatch
(
records
.
slice
(
2
)
)
;
return
[
records
[
0
]
.
id
records
[
1
]
.
id
]
;
}
;
let
collection
=
new
ServerCollection
(
)
;
for
(
var
i
=
0
;
i
<
NUMBER_OF_RECORDS
;
i
+
+
)
{
let
id
=
"
record
-
no
-
"
+
i
;
let
payload
=
encryptPayload
(
{
id
denomination
:
"
Record
No
.
"
+
i
}
)
;
collection
.
insert
(
id
payload
)
;
}
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_eq
(
engine
.
lastSync
0
)
;
do_check_eq
(
engine
.
toFetch
.
length
0
)
;
do_check_eq
(
engine
.
previousFailed
.
length
0
)
;
do_check_empty
(
engine
.
_store
.
items
)
;
let
previousFailed
=
[
Utils
.
makeGUID
(
)
Utils
.
makeGUID
(
)
Utils
.
makeGUID
(
)
]
;
engine
.
previousFailed
=
previousFailed
;
do_check_eq
(
engine
.
previousFailed
previousFailed
)
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_processIncoming
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
6
)
;
do_check_eq
(
engine
.
previousFailed
.
length
8
)
;
do_check_eq
(
engine
.
previousFailed
[
0
]
"
record
-
no
-
0
"
)
;
do_check_eq
(
engine
.
previousFailed
[
1
]
"
record
-
no
-
1
"
)
;
do_check_eq
(
engine
.
previousFailed
[
2
]
"
record
-
no
-
4
"
)
;
do_check_eq
(
engine
.
previousFailed
[
3
]
"
record
-
no
-
5
"
)
;
do_check_eq
(
engine
.
previousFailed
[
4
]
"
record
-
no
-
8
"
)
;
do_check_eq
(
engine
.
previousFailed
[
5
]
"
record
-
no
-
9
"
)
;
do_check_eq
(
engine
.
previousFailed
[
6
]
"
record
-
no
-
12
"
)
;
do_check_eq
(
engine
.
previousFailed
[
7
]
"
record
-
no
-
13
"
)
;
await
engine
.
_processIncoming
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
10
)
;
do_check_eq
(
engine
.
previousFailed
.
length
4
)
;
do_check_eq
(
engine
.
previousFailed
[
0
]
"
record
-
no
-
0
"
)
;
do_check_eq
(
engine
.
previousFailed
[
1
]
"
record
-
no
-
1
"
)
;
do_check_eq
(
engine
.
previousFailed
[
2
]
"
record
-
no
-
8
"
)
;
do_check_eq
(
engine
.
previousFailed
[
3
]
"
record
-
no
-
9
"
)
;
do_check_eq
(
engine
.
_store
.
items
[
"
record
-
no
-
4
"
]
"
Record
No
.
4
"
)
;
do_check_eq
(
engine
.
_store
.
items
[
"
record
-
no
-
5
"
]
"
Record
No
.
5
"
)
;
do_check_eq
(
engine
.
_store
.
items
[
"
record
-
no
-
12
"
]
"
Record
No
.
12
"
)
;
do_check_eq
(
engine
.
_store
.
items
[
"
record
-
no
-
13
"
]
"
Record
No
.
13
"
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_processIncoming_failed_records
(
)
{
_
(
"
Ensure
that
failed
records
from
_reconcile
and
applyIncomingBatch
are
refetched
.
"
)
;
let
APPLY_BATCH_SIZE
=
50
;
let
collection
=
new
ServerCollection
(
)
;
const
NUMBER_OF_RECORDS
=
APPLY_BATCH_SIZE
*
3
+
5
;
for
(
let
i
=
0
;
i
<
NUMBER_OF_RECORDS
;
i
+
+
)
{
let
id
=
"
record
-
no
-
"
+
i
;
let
payload
=
encryptPayload
(
{
id
denomination
:
"
Record
No
.
"
+
id
}
)
;
let
wbo
=
new
ServerWBO
(
id
payload
)
;
wbo
.
modified
=
Date
.
now
(
)
/
1000
+
60
*
(
i
-
APPLY_BATCH_SIZE
*
3
)
;
collection
.
insertWBO
(
wbo
)
;
}
const
BOGUS_RECORDS
=
[
"
record
-
no
-
"
+
42
"
record
-
no
-
"
+
23
"
record
-
no
-
"
+
(
42
+
APPLY_BATCH_SIZE
)
"
record
-
no
-
"
+
(
23
+
APPLY_BATCH_SIZE
)
"
record
-
no
-
"
+
(
42
+
APPLY_BATCH_SIZE
*
2
)
"
record
-
no
-
"
+
(
23
+
APPLY_BATCH_SIZE
*
2
)
"
record
-
no
-
"
+
(
2
+
APPLY_BATCH_SIZE
*
3
)
"
record
-
no
-
"
+
(
1
+
APPLY_BATCH_SIZE
*
3
)
]
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
applyIncomingBatchSize
=
APPLY_BATCH_SIZE
;
engine
.
__reconcile
=
engine
.
_reconcile
;
engine
.
_reconcile
=
async
function
_reconcile
(
record
)
{
if
(
BOGUS_RECORDS
.
indexOf
(
record
.
id
)
%
2
=
=
0
)
{
throw
new
Error
(
"
I
don
'
t
like
this
record
!
Baaaaaah
!
"
)
;
}
return
this
.
__reconcile
.
apply
(
this
arguments
)
;
}
;
engine
.
_store
.
_applyIncoming
=
engine
.
_store
.
applyIncoming
;
engine
.
_store
.
applyIncoming
=
async
function
(
record
)
{
if
(
BOGUS_RECORDS
.
indexOf
(
record
.
id
)
%
2
=
=
1
)
{
throw
new
Error
(
"
I
don
'
t
like
this
record
!
Baaaaaah
!
"
)
;
}
return
this
.
_applyIncoming
.
apply
(
this
arguments
)
;
}
;
let
count
=
0
;
let
uris
=
[
]
;
function
recording_handler
(
recordedCollection
)
{
let
h
=
recordedCollection
.
handler
(
)
;
return
function
(
req
res
)
{
+
+
count
;
uris
.
push
(
req
.
path
+
"
?
"
+
req
.
queryString
)
;
return
h
(
req
res
)
;
}
;
}
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
recording_handler
(
collection
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_eq
(
engine
.
lastSync
0
)
;
do_check_eq
(
engine
.
toFetch
.
length
0
)
;
do_check_eq
(
engine
.
previousFailed
.
length
0
)
;
do_check_empty
(
engine
.
_store
.
items
)
;
let
observerSubject
;
let
observerData
;
Svc
.
Obs
.
add
(
"
weave
:
engine
:
sync
:
applied
"
function
onApplied
(
subject
data
)
{
Svc
.
Obs
.
remove
(
"
weave
:
engine
:
sync
:
applied
"
onApplied
)
;
observerSubject
=
subject
;
observerData
=
data
;
}
)
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_processIncoming
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
NUMBER_OF_RECORDS
-
BOGUS_RECORDS
.
length
)
;
do_check_eq
(
engine
.
previousFailed
.
length
BOGUS_RECORDS
.
length
)
;
engine
.
previousFailed
.
sort
(
)
;
BOGUS_RECORDS
.
sort
(
)
;
for
(
let
i
=
0
;
i
<
engine
.
previousFailed
.
length
;
i
+
+
)
{
do_check_eq
(
engine
.
previousFailed
[
i
]
BOGUS_RECORDS
[
i
]
)
;
}
do_check_eq
(
observerData
engine
.
name
)
;
do_check_eq
(
observerSubject
.
failed
BOGUS_RECORDS
.
length
)
;
do_check_eq
(
observerSubject
.
newFailed
BOGUS_RECORDS
.
length
)
;
async
function
batchDownload
(
batchSize
)
{
count
=
0
;
uris
=
[
]
;
engine
.
guidFetchBatchSize
=
batchSize
;
await
engine
.
_processIncoming
(
)
;
_
(
"
Tried
again
.
Requests
:
"
+
count
+
"
;
URIs
:
"
+
JSON
.
stringify
(
uris
)
)
;
return
count
;
}
_
(
"
Test
batching
with
ID
batch
size
3
normal
mobile
batch
size
.
"
)
;
do_check_eq
(
(
await
batchDownload
(
3
)
)
3
)
;
_
(
"
Test
batching
with
sufficient
ID
batch
size
.
"
)
;
do_check_eq
(
(
await
batchDownload
(
BOGUS_RECORDS
.
length
)
)
1
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_processIncoming_decrypt_failed
(
)
{
_
(
"
Ensure
that
records
failing
to
decrypt
are
either
replaced
or
refetched
.
"
)
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
_wbos
.
flying
=
new
ServerWBO
(
"
flying
"
encryptPayload
(
{
id
:
"
flying
"
denomination
:
"
LNER
Class
A3
4472
"
}
)
)
;
collection
.
_wbos
.
nojson
=
new
ServerWBO
(
"
nojson
"
"
This
is
invalid
JSON
"
)
;
collection
.
_wbos
.
nojson2
=
new
ServerWBO
(
"
nojson2
"
"
This
is
invalid
JSON
"
)
;
collection
.
_wbos
.
scotsman
=
new
ServerWBO
(
"
scotsman
"
encryptPayload
(
{
id
:
"
scotsman
"
denomination
:
"
Flying
Scotsman
"
}
)
)
;
collection
.
_wbos
.
nodecrypt
=
new
ServerWBO
(
"
nodecrypt
"
"
Decrypt
this
!
"
)
;
collection
.
_wbos
.
nodecrypt2
=
new
ServerWBO
(
"
nodecrypt2
"
"
Decrypt
this
!
"
)
;
Weave
.
Crypto
.
_decrypt
=
Weave
.
Crypto
.
decrypt
;
Weave
.
Crypto
.
decrypt
=
function
(
ciphertext
)
{
if
(
ciphertext
=
=
"
Decrypt
this
!
"
)
{
throw
new
Error
(
"
Derp
!
Cipher
finalized
failed
.
Im
ur
crypto
destroyin
ur
recordz
.
"
)
;
}
return
this
.
_decrypt
.
apply
(
this
arguments
)
;
}
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
enabled
=
true
;
engine
.
_store
.
items
=
{
nojson
:
"
Valid
JSON
"
nodecrypt
:
"
Valid
ciphertext
"
}
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_eq
(
engine
.
toFetch
.
length
0
)
;
do_check_eq
(
engine
.
previousFailed
.
length
0
)
;
let
observerSubject
;
let
observerData
;
Svc
.
Obs
.
add
(
"
weave
:
engine
:
sync
:
applied
"
function
onApplied
(
subject
data
)
{
Svc
.
Obs
.
remove
(
"
weave
:
engine
:
sync
:
applied
"
onApplied
)
;
observerSubject
=
subject
;
observerData
=
data
;
}
)
;
engine
.
lastSync
=
collection
.
wbo
(
"
nojson
"
)
.
modified
-
1
;
let
ping
=
await
sync_engine_and_validate_telem
(
engine
true
)
;
do_check_eq
(
ping
.
engines
[
0
]
.
incoming
.
applied
2
)
;
do_check_eq
(
ping
.
engines
[
0
]
.
incoming
.
failed
4
)
;
do_check_eq
(
ping
.
engines
[
0
]
.
incoming
.
newFailed
4
)
;
do_check_eq
(
engine
.
previousFailed
.
length
4
)
;
do_check_eq
(
engine
.
previousFailed
[
0
]
"
nojson
"
)
;
do_check_eq
(
engine
.
previousFailed
[
1
]
"
nojson2
"
)
;
do_check_eq
(
engine
.
previousFailed
[
2
]
"
nodecrypt
"
)
;
do_check_eq
(
engine
.
previousFailed
[
3
]
"
nodecrypt2
"
)
;
do_check_eq
(
observerData
engine
.
name
)
;
do_check_eq
(
observerSubject
.
applied
2
)
;
do_check_eq
(
observerSubject
.
failed
4
)
;
}
finally
{
await
promiseClean
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_uploadOutgoing_toEmptyServer
(
)
{
_
(
"
SyncEngine
.
_uploadOutgoing
uploads
new
records
to
server
"
)
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
_wbos
.
flying
=
new
ServerWBO
(
"
flying
"
)
;
collection
.
_wbos
.
scotsman
=
new
ServerWBO
(
"
scotsman
"
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
"
/
1
.
1
/
foo
/
storage
/
rotary
/
flying
"
:
collection
.
wbo
(
"
flying
"
)
.
handler
(
)
"
/
1
.
1
/
foo
/
storage
/
rotary
/
scotsman
"
:
collection
.
wbo
(
"
scotsman
"
)
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
generateNewKeys
(
Service
.
collectionKeys
)
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
lastSync
=
123
;
engine
.
_store
.
items
=
{
flying
:
"
LNER
Class
A3
4472
"
scotsman
:
"
Flying
Scotsman
"
}
;
engine
.
_tracker
.
addChangedID
(
"
scotsman
"
0
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_eq
(
engine
.
lastSyncLocal
0
)
;
do_check_eq
(
collection
.
payload
(
"
flying
"
)
undefined
)
;
do_check_eq
(
collection
.
payload
(
"
scotsman
"
)
undefined
)
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_uploadOutgoing
(
)
;
do_check_true
(
engine
.
lastSyncLocal
>
0
)
;
do_check_eq
(
collection
.
payload
(
"
flying
"
)
undefined
)
;
do_check_true
(
!
!
collection
.
payload
(
"
scotsman
"
)
)
;
do_check_eq
(
JSON
.
parse
(
collection
.
wbo
(
"
scotsman
"
)
.
data
.
ciphertext
)
.
id
"
scotsman
"
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
scotsman
undefined
)
;
do_check_eq
(
collection
.
payload
(
"
flying
"
)
undefined
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
async
function
test_uploadOutgoing_max_record_payload_bytes
(
allowSkippedRecord
)
{
_
(
"
SyncEngine
.
_uploadOutgoing
throws
when
payload
is
bigger
than
max_record_payload_bytes
"
)
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
_wbos
.
flying
=
new
ServerWBO
(
"
flying
"
)
;
collection
.
_wbos
.
scotsman
=
new
ServerWBO
(
"
scotsman
"
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
"
/
1
.
1
/
foo
/
storage
/
rotary
/
flying
"
:
collection
.
wbo
(
"
flying
"
)
.
handler
(
)
"
/
1
.
1
/
foo
/
storage
/
rotary
/
scotsman
"
:
collection
.
wbo
(
"
scotsman
"
)
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
generateNewKeys
(
Service
.
collectionKeys
)
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
allowSkippedRecord
=
allowSkippedRecord
;
engine
.
lastSync
=
1
;
engine
.
_store
.
items
=
{
flying
:
"
a
"
.
repeat
(
1024
*
1024
)
scotsman
:
"
abcd
"
}
;
engine
.
_tracker
.
addChangedID
(
"
flying
"
1000
)
;
engine
.
_tracker
.
addChangedID
(
"
scotsman
"
1000
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_eq
(
engine
.
lastSyncLocal
0
)
;
do_check_eq
(
collection
.
payload
(
"
flying
"
)
undefined
)
;
do_check_eq
(
collection
.
payload
(
"
scotsman
"
)
undefined
)
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_uploadOutgoing
(
)
;
if
(
!
allowSkippedRecord
)
{
do_throw
(
"
should
not
get
here
"
)
;
}
await
engine
.
trackRemainingChanges
(
)
;
do_check_true
(
collection
.
payload
(
"
scotsman
"
)
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
flying
undefined
)
;
}
catch
(
e
)
{
if
(
allowSkippedRecord
)
{
do_throw
(
"
should
not
get
here
"
)
;
}
await
engine
.
trackRemainingChanges
(
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
flying
1000
)
;
}
finally
{
do_check_eq
(
collection
.
payload
(
"
flying
"
)
undefined
)
;
await
cleanAndGo
(
engine
server
)
;
}
}
add_task
(
async
function
test_uploadOutgoing_max_record_payload_bytes_disallowSkippedRecords
(
)
{
return
test_uploadOutgoing_max_record_payload_bytes
(
false
)
;
}
)
;
add_task
(
async
function
test_uploadOutgoing_max_record_payload_bytes_allowSkippedRecords
(
)
{
return
test_uploadOutgoing_max_record_payload_bytes
(
true
)
;
}
)
;
add_task
(
async
function
test_uploadOutgoing_failed
(
)
{
_
(
"
SyncEngine
.
_uploadOutgoing
doesn
'
t
clear
the
tracker
of
objects
that
failed
to
upload
.
"
)
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
_wbos
.
flying
=
new
ServerWBO
(
"
flying
"
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
lastSync
=
123
;
engine
.
_store
.
items
=
{
flying
:
"
LNER
Class
A3
4472
"
scotsman
:
"
Flying
Scotsman
"
peppercorn
:
"
Peppercorn
Class
"
}
;
const
FLYING_CHANGED
=
12345
;
const
SCOTSMAN_CHANGED
=
23456
;
const
PEPPERCORN_CHANGED
=
34567
;
engine
.
_tracker
.
addChangedID
(
"
flying
"
FLYING_CHANGED
)
;
engine
.
_tracker
.
addChangedID
(
"
scotsman
"
SCOTSMAN_CHANGED
)
;
engine
.
_tracker
.
addChangedID
(
"
peppercorn
"
PEPPERCORN_CHANGED
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
do_check_eq
(
engine
.
lastSyncLocal
0
)
;
do_check_eq
(
collection
.
payload
(
"
flying
"
)
undefined
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
flying
FLYING_CHANGED
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
scotsman
SCOTSMAN_CHANGED
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
peppercorn
PEPPERCORN_CHANGED
)
;
engine
.
enabled
=
true
;
await
sync_engine_and_validate_telem
(
engine
true
)
;
do_check_true
(
engine
.
lastSyncLocal
>
0
)
;
do_check_true
(
!
!
collection
.
payload
(
"
flying
"
)
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
flying
undefined
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
scotsman
SCOTSMAN_CHANGED
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
peppercorn
PEPPERCORN_CHANGED
)
;
}
finally
{
await
promiseClean
(
engine
server
)
;
}
}
)
;
async
function
createRecordFailTelemetry
(
allowSkippedRecord
)
{
Service
.
identity
.
username
=
"
foo
"
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
_wbos
.
flying
=
new
ServerWBO
(
"
flying
"
)
;
collection
.
_wbos
.
scotsman
=
new
ServerWBO
(
"
scotsman
"
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
allowSkippedRecord
=
allowSkippedRecord
;
let
oldCreateRecord
=
engine
.
_store
.
createRecord
;
engine
.
_store
.
createRecord
=
async
(
id
col
)
=
>
{
if
(
id
!
=
"
flying
"
)
{
throw
new
Error
(
"
oops
"
)
;
}
return
oldCreateRecord
.
call
(
engine
.
_store
id
col
)
;
}
engine
.
lastSync
=
123
;
engine
.
_store
.
items
=
{
flying
:
"
LNER
Class
A3
4472
"
scotsman
:
"
Flying
Scotsman
"
}
;
const
FLYING_CHANGED
=
12345
;
const
SCOTSMAN_CHANGED
=
23456
;
engine
.
_tracker
.
addChangedID
(
"
flying
"
FLYING_CHANGED
)
;
engine
.
_tracker
.
addChangedID
(
"
scotsman
"
SCOTSMAN_CHANGED
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
let
ping
;
try
{
do_check_eq
(
engine
.
lastSyncLocal
0
)
;
do_check_eq
(
collection
.
payload
(
"
flying
"
)
undefined
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
flying
FLYING_CHANGED
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
scotsman
SCOTSMAN_CHANGED
)
;
engine
.
enabled
=
true
;
ping
=
await
sync_engine_and_validate_telem
(
engine
true
onErrorPing
=
>
{
ping
=
onErrorPing
;
}
)
;
if
(
!
allowSkippedRecord
)
{
do_throw
(
"
should
not
get
here
"
)
;
}
do_check_true
(
!
!
collection
.
payload
(
"
flying
"
)
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
flying
undefined
)
;
}
catch
(
err
)
{
if
(
allowSkippedRecord
)
{
do_throw
(
"
should
not
get
here
"
)
;
}
do_check_false
(
collection
.
payload
(
"
flying
"
)
)
;
do_check_true
(
engine
.
_tracker
.
changedIDs
.
flying
)
;
}
finally
{
do_check_true
(
engine
.
lastSyncLocal
>
0
)
;
do_check_eq
(
ping
.
engines
[
0
]
.
outgoing
[
0
]
.
failed
1
)
;
do_check_false
(
collection
.
payload
(
"
scotsman
"
)
)
;
do_check_eq
(
engine
.
_tracker
.
changedIDs
.
scotsman
SCOTSMAN_CHANGED
)
;
engine
.
_store
.
createRecord
=
oldCreateRecord
;
await
promiseClean
(
engine
server
)
;
}
}
add_task
(
async
function
test_uploadOutgoing_createRecord_throws_reported_telemetry
(
)
{
_
(
"
SyncEngine
.
_uploadOutgoing
reports
a
failed
record
to
telemetry
if
createRecord
throws
"
)
;
await
createRecordFailTelemetry
(
true
)
;
}
)
;
add_task
(
async
function
test_uploadOutgoing_createRecord_throws_dontAllowSkipRecord
(
)
{
_
(
"
SyncEngine
.
_uploadOutgoing
will
throw
if
createRecord
throws
and
allowSkipRecord
is
set
to
false
"
)
;
await
createRecordFailTelemetry
(
false
)
;
}
)
;
add_task
(
async
function
test_uploadOutgoing_largeRecords
(
)
{
_
(
"
SyncEngine
.
_uploadOutgoing
throws
on
records
larger
than
the
max
record
payload
size
"
)
;
let
collection
=
new
ServerCollection
(
)
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
allowSkippedRecord
=
false
;
engine
.
_store
.
items
[
"
large
-
item
"
]
=
"
Y
"
.
repeat
(
Service
.
getMaxRecordPayloadSize
(
)
*
2
)
;
engine
.
_tracker
.
addChangedID
(
"
large
-
item
"
0
)
;
collection
.
insert
(
"
large
-
item
"
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
try
{
await
engine
.
_syncStartup
(
)
;
let
error
=
null
;
try
{
await
engine
.
_uploadOutgoing
(
)
;
}
catch
(
e
)
{
error
=
e
;
}
ok
(
!
!
error
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_syncFinish_deleteByIds
(
)
{
_
(
"
SyncEngine
.
_syncFinish
deletes
server
records
slated
for
deletion
(
list
of
record
IDs
)
.
"
)
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
_wbos
.
flying
=
new
ServerWBO
(
"
flying
"
encryptPayload
(
{
id
:
"
flying
"
denomination
:
"
LNER
Class
A3
4472
"
}
)
)
;
collection
.
_wbos
.
scotsman
=
new
ServerWBO
(
"
scotsman
"
encryptPayload
(
{
id
:
"
scotsman
"
denomination
:
"
Flying
Scotsman
"
}
)
)
;
collection
.
_wbos
.
rekolok
=
new
ServerWBO
(
"
rekolok
"
encryptPayload
(
{
id
:
"
rekolok
"
denomination
:
"
Rekonstruktionslokomotive
"
}
)
)
;
let
server
=
httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
try
{
engine
.
_delete
=
{
ids
:
[
"
flying
"
"
rekolok
"
]
}
;
await
engine
.
_syncFinish
(
)
;
do_check_eq
(
collection
.
payload
(
"
flying
"
)
undefined
)
;
do_check_true
(
!
!
collection
.
payload
(
"
scotsman
"
)
)
;
do_check_eq
(
collection
.
payload
(
"
rekolok
"
)
undefined
)
;
do_check_eq
(
engine
.
_delete
.
ids
undefined
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_syncFinish_deleteLotsInBatches
(
)
{
_
(
"
SyncEngine
.
_syncFinish
deletes
server
records
in
batches
of
100
(
list
of
record
IDs
)
.
"
)
;
let
collection
=
new
ServerCollection
(
)
;
var
noOfUploads
=
0
;
collection
.
delete
=
(
function
(
orig
)
{
return
function
(
)
{
noOfUploads
+
+
;
return
orig
.
apply
(
this
arguments
)
;
}
;
}
(
collection
.
delete
)
)
;
let
now
=
Date
.
now
(
)
;
for
(
var
i
=
0
;
i
<
234
;
i
+
+
)
{
let
id
=
"
record
-
no
-
"
+
i
;
let
payload
=
encryptPayload
(
{
id
denomination
:
"
Record
No
.
"
+
i
}
)
;
let
wbo
=
new
ServerWBO
(
id
payload
)
;
wbo
.
modified
=
now
/
1000
-
60
*
(
i
+
110
)
;
collection
.
insertWBO
(
wbo
)
;
}
let
server
=
httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
try
{
do_check_eq
(
noOfUploads
0
)
;
engine
.
_delete
=
{
ids
:
[
]
newer
:
now
/
1000
-
60
*
200
.
5
}
;
for
(
i
=
100
;
i
<
234
;
i
+
+
)
{
engine
.
_delete
.
ids
.
push
(
"
record
-
no
-
"
+
i
)
;
}
await
engine
.
_syncFinish
(
)
;
for
(
i
=
0
;
i
<
234
;
i
+
+
)
{
let
id
=
"
record
-
no
-
"
+
i
;
if
(
i
<
=
90
|
|
i
>
=
100
)
{
do_check_eq
(
collection
.
payload
(
id
)
undefined
)
;
}
else
{
do_check_true
(
!
!
collection
.
payload
(
id
)
)
;
}
}
do_check_eq
(
noOfUploads
2
+
1
)
;
do_check_eq
(
engine
.
_delete
.
ids
undefined
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_sync_partialUpload
(
)
{
_
(
"
SyncEngine
.
sync
(
)
keeps
changedIDs
that
couldn
'
t
be
uploaded
.
"
)
;
let
collection
=
new
ServerCollection
(
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
let
oldServerConfiguration
=
Service
.
serverConfiguration
;
Service
.
serverConfiguration
=
{
max_post_records
:
100
}
;
await
SyncTestingInfrastructure
(
server
)
;
generateNewKeys
(
Service
.
collectionKeys
)
;
let
engine
=
makeRotaryEngine
(
)
;
engine
.
lastSync
=
123
;
engine
.
lastSyncLocal
=
456
;
var
noOfUploads
=
0
;
collection
.
post
=
(
function
(
orig
)
{
return
function
(
)
{
if
(
noOfUploads
=
=
2
)
throw
new
Error
(
"
FAIL
!
"
)
;
noOfUploads
+
+
;
return
orig
.
apply
(
this
arguments
)
;
}
;
}
(
collection
.
post
)
)
;
for
(
let
i
=
0
;
i
<
234
;
i
+
+
)
{
let
id
=
"
record
-
no
-
"
+
i
;
engine
.
_store
.
items
[
id
]
=
"
Record
No
.
"
+
i
;
engine
.
_tracker
.
addChangedID
(
id
i
)
;
if
(
(
i
!
=
23
)
&
&
(
i
!
=
42
)
)
{
collection
.
insert
(
id
)
;
}
}
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
try
{
engine
.
enabled
=
true
;
let
error
;
try
{
await
sync_engine_and_validate_telem
(
engine
true
)
;
}
catch
(
ex
)
{
error
=
ex
;
}
ok
(
!
!
error
)
;
do_check_true
(
engine
.
lastSyncLocal
>
456
)
;
for
(
let
i
=
0
;
i
<
234
;
i
+
+
)
{
let
id
=
"
record
-
no
-
"
+
i
;
if
(
(
i
=
=
23
)
|
|
(
i
=
=
42
)
|
|
(
i
>
=
200
)
)
do_check_eq
(
engine
.
_tracker
.
changedIDs
[
id
]
i
)
;
else
do_check_false
(
id
in
engine
.
_tracker
.
changedIDs
)
;
}
}
finally
{
Service
.
serverConfiguration
=
oldServerConfiguration
;
await
promiseClean
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_canDecrypt_noCryptoKeys
(
)
{
_
(
"
SyncEngine
.
canDecrypt
returns
false
if
the
engine
fails
to
decrypt
items
on
the
server
e
.
g
.
due
to
a
missing
crypto
key
collection
.
"
)
;
Service
.
collectionKeys
.
clear
(
)
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
_wbos
.
flying
=
new
ServerWBO
(
"
flying
"
encryptPayload
(
{
id
:
"
flying
"
denomination
:
"
LNER
Class
A3
4472
"
}
)
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
try
{
do_check_false
(
(
await
engine
.
canDecrypt
(
)
)
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_canDecrypt_true
(
)
{
_
(
"
SyncEngine
.
canDecrypt
returns
true
if
the
engine
can
decrypt
the
items
on
the
server
.
"
)
;
generateNewKeys
(
Service
.
collectionKeys
)
;
let
collection
=
new
ServerCollection
(
)
;
collection
.
_wbos
.
flying
=
new
ServerWBO
(
"
flying
"
encryptPayload
(
{
id
:
"
flying
"
denomination
:
"
LNER
Class
A3
4472
"
}
)
)
;
let
server
=
sync_httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
engine
=
makeRotaryEngine
(
)
;
try
{
do_check_true
(
(
await
engine
.
canDecrypt
(
)
)
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
}
}
)
;
add_task
(
async
function
test_syncapplied_observer
(
)
{
const
NUMBER_OF_RECORDS
=
10
;
let
engine
=
makeRotaryEngine
(
)
;
let
collection
=
new
ServerCollection
(
)
;
for
(
var
i
=
0
;
i
<
NUMBER_OF_RECORDS
;
i
+
+
)
{
let
id
=
"
record
-
no
-
"
+
i
;
let
payload
=
encryptPayload
(
{
id
denomination
:
"
Record
No
.
"
+
id
}
)
;
collection
.
insert
(
id
payload
)
;
}
let
server
=
httpd_setup
(
{
"
/
1
.
1
/
foo
/
storage
/
rotary
"
:
collection
.
handler
(
)
}
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
meta_global
=
Service
.
recordManager
.
set
(
engine
.
metaURL
new
WBORecord
(
engine
.
metaURL
)
)
;
meta_global
.
payload
.
engines
=
{
rotary
:
{
version
:
engine
.
version
syncID
:
engine
.
syncID
}
}
;
let
numApplyCalls
=
0
;
let
engine_name
;
let
count
;
function
onApplied
(
subject
data
)
{
numApplyCalls
+
+
;
engine_name
=
data
;
count
=
subject
;
}
Svc
.
Obs
.
add
(
"
weave
:
engine
:
sync
:
applied
"
onApplied
)
;
try
{
Service
.
scheduler
.
hasIncomingItems
=
false
;
await
engine
.
_syncStartup
(
)
;
await
engine
.
_processIncoming
(
)
;
do_check_attribute_count
(
engine
.
_store
.
items
10
)
;
do_check_eq
(
numApplyCalls
1
)
;
do_check_eq
(
engine_name
"
rotary
"
)
;
do_check_eq
(
count
.
applied
10
)
;
do_check_true
(
Service
.
scheduler
.
hasIncomingItems
)
;
}
finally
{
await
cleanAndGo
(
engine
server
)
;
Service
.
scheduler
.
hasIncomingItems
=
false
;
Svc
.
Obs
.
remove
(
"
weave
:
engine
:
sync
:
applied
"
onApplied
)
;
}
}
)
;
