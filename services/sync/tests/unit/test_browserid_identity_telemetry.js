Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
let
{
telemetryHelper
}
=
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
browserid_identity
.
js
"
{
}
)
;
const
prefs
=
new
Preferences
(
"
services
.
sync
.
"
)
;
function
cleanup
(
)
{
prefs
.
resetBranch
(
)
;
}
add_test
(
function
test_success
(
)
{
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
SUCCESS
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
SUCCESS
:
1
}
)
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
SUCCESS
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
}
)
;
Assert
.
equal
(
prefs
.
get
(
telemetryHelper
.
PREFS
.
REJECTED_AT
)
undefined
)
;
Assert
.
equal
(
prefs
.
get
(
telemetryHelper
.
PREFS
.
APPEARS_PERMANENTLY_REJECTED
)
undefined
)
;
Assert
.
equal
(
prefs
.
get
(
telemetryHelper
.
PREFS
.
LAST_RECORDED_STATE
)
telemetryHelper
.
STATES
.
SUCCESS
)
;
cleanup
(
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_success_to_error
(
)
{
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
SUCCESS
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
SUCCESS
:
1
}
)
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
NOTVERIFIED
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
NOTVERIFIED
:
1
}
)
;
cleanup
(
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_unverified
(
)
{
telemetryHelper
.
nowInMinutes
=
(
)
=
>
10000
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
NOTVERIFIED
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
NOTVERIFIED
:
1
}
)
;
Assert
.
equal
(
prefs
.
get
(
telemetryHelper
.
PREFS
.
REJECTED_AT
)
10000
)
;
telemetryHelper
.
nowInMinutes
=
(
)
=
>
10010
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
NOTVERIFIED
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
}
)
;
Assert
.
equal
(
sumHistogram
(
"
WEAVE_LOGIN_FAILED_FOR
"
)
0
)
;
Assert
.
equal
(
prefs
.
get
(
telemetryHelper
.
PREFS
.
REJECTED_AT
)
10000
)
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
NOTVERIFIED
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
}
)
;
Assert
.
equal
(
sumHistogram
(
"
WEAVE_LOGIN_FAILED_FOR
"
)
0
)
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
SUCCESS
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
SUCCESS
:
1
}
)
;
Assert
.
equal
(
sumHistogram
(
"
WEAVE_LOGIN_FAILED_FOR
"
)
10
)
;
cleanup
(
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_unverified_give_up
(
)
{
telemetryHelper
.
nowInMinutes
=
(
)
=
>
10000
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
NOTVERIFIED
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
NOTVERIFIED
:
1
}
)
;
Assert
.
equal
(
prefs
.
get
(
telemetryHelper
.
PREFS
.
REJECTED_AT
)
10000
)
;
telemetryHelper
.
nowInMinutes
=
(
)
=
>
50000
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
NOTVERIFIED
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
}
)
;
Assert
.
equal
(
sumHistogram
(
"
WEAVE_LOGIN_FAILED_FOR
"
)
40000
)
;
telemetryHelper
.
nowInMinutes
=
(
)
=
>
50001
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
NOTVERIFIED
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
}
)
;
Assert
.
equal
(
sumHistogram
(
"
WEAVE_LOGIN_FAILED_FOR
"
)
0
)
;
telemetryHelper
.
nowInMinutes
=
(
)
=
>
60000
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
SUCCESS
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
SUCCESS
:
1
}
)
;
Assert
.
equal
(
sumHistogram
(
"
WEAVE_LOGIN_FAILED_FOR
"
)
0
)
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
NOTVERIFIED
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
NOTVERIFIED
:
1
}
)
;
Assert
.
equal
(
sumHistogram
(
"
WEAVE_LOGIN_FAILED_FOR
"
)
0
)
;
telemetryHelper
.
nowInMinutes
=
(
)
=
>
60001
;
telemetryHelper
.
maybeRecordLoginState
(
telemetryHelper
.
STATES
.
SUCCESS
)
;
Assert
.
deepEqual
(
getLoginTelemetryScalar
(
)
{
SUCCESS
:
1
}
)
;
Assert
.
equal
(
sumHistogram
(
"
WEAVE_LOGIN_FAILED_FOR
"
)
1
)
;
cleanup
(
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_bad_state
(
)
{
Assert
.
throws
(
(
)
=
>
telemetryHelper
.
_maybeRecordLoginState
(
"
foo
"
)
/
invalid
state
/
)
;
cleanup
(
)
;
run_next_test
(
)
;
}
)
;
