Svc
.
Prefs
.
set
(
"
registerEngines
"
"
"
)
;
const
{
Service
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
sync
/
service
.
sys
.
mjs
"
)
;
let
scheduler
;
let
clientsEngine
;
async
function
sync_httpd_setup
(
)
{
let
clientsSyncID
=
await
clientsEngine
.
resetLocalSyncID
(
)
;
let
global
=
new
ServerWBO
(
"
global
"
{
syncID
:
Service
.
syncID
storageVersion
:
STORAGE_VERSION
engines
:
{
clients
:
{
version
:
clientsEngine
.
version
syncID
:
clientsSyncID
}
}
}
)
;
let
clientsColl
=
new
ServerCollection
(
{
}
true
)
;
let
collectionsHelper
=
track_collections_helper
(
)
;
let
upd
=
collectionsHelper
.
with_updated_collection
;
return
httpd_setup
(
{
"
/
1
.
1
/
johndoe
/
storage
/
meta
/
global
"
:
upd
(
"
meta
"
global
.
handler
(
)
)
"
/
1
.
1
/
johndoe
/
info
/
collections
"
:
collectionsHelper
.
handler
"
/
1
.
1
/
johndoe
/
storage
/
crypto
/
keys
"
:
upd
(
"
crypto
"
new
ServerWBO
(
"
keys
"
)
.
handler
(
)
)
"
/
1
.
1
/
johndoe
/
storage
/
clients
"
:
upd
(
"
clients
"
clientsColl
.
handler
(
)
)
}
)
;
}
async
function
setUp
(
server
)
{
syncTestLogging
(
)
;
await
configureIdentity
(
{
username
:
"
johndoe
"
}
server
)
;
await
generateNewKeys
(
Service
.
collectionKeys
)
;
let
serverKeys
=
Service
.
collectionKeys
.
asWBO
(
"
crypto
"
"
keys
"
)
;
await
serverKeys
.
encrypt
(
Service
.
identity
.
syncKeyBundle
)
;
await
serverKeys
.
upload
(
Service
.
resource
(
Service
.
cryptoKeysURL
)
)
;
}
add_task
(
async
function
setup
(
)
{
scheduler
=
Service
.
scheduler
;
clientsEngine
=
Service
.
clientsEngine
;
clientsEngine
.
_removeRemoteClient
=
async
id
=
>
{
}
;
}
)
;
add_task
(
async
function
test_successful_sync_adjustSyncInterval
(
)
{
enableValidationPrefs
(
)
;
_
(
"
Test
successful
sync
calling
adjustSyncInterval
"
)
;
let
syncSuccesses
=
0
;
function
onSyncFinish
(
)
{
_
(
"
Sync
success
.
"
)
;
syncSuccesses
+
+
;
}
Svc
.
Obs
.
add
(
"
weave
:
service
:
sync
:
finish
"
onSyncFinish
)
;
let
server
=
await
sync_httpd_setup
(
)
;
await
setUp
(
server
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
_
(
"
Test
as
long
as
numClients
<
=
1
our
sync
interval
is
SINGLE_USER
.
"
)
;
scheduler
.
idle
=
true
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncSuccesses
1
)
;
Assert
.
ok
(
scheduler
.
idle
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
scheduler
.
idle
=
false
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncSuccesses
2
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
scheduler
.
hasIncomingItems
=
true
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncSuccesses
3
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
scheduler
.
idle
=
true
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncSuccesses
4
)
;
Assert
.
ok
(
scheduler
.
idle
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
_
(
"
Test
as
long
as
idle
&
&
numClients
>
1
our
sync
interval
is
idleInterval
.
"
)
;
await
Service
.
clientsEngine
.
_store
.
create
(
{
id
:
"
foo
"
cleartext
:
{
name
:
"
bar
"
type
:
"
mobile
"
}
}
)
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncSuccesses
5
)
;
Assert
.
ok
(
scheduler
.
idle
)
;
Assert
.
ok
(
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
idleInterval
)
;
scheduler
.
hasIncomingItems
=
false
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncSuccesses
6
)
;
Assert
.
ok
(
scheduler
.
idle
)
;
Assert
.
ok
(
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
idleInterval
)
;
_
(
"
Test
non
-
idle
numClients
>
1
no
incoming
items
=
>
activeInterval
.
"
)
;
scheduler
.
idle
=
false
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncSuccesses
7
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Assert
.
ok
(
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
activeInterval
)
;
_
(
"
Test
non
-
idle
numClients
>
1
incoming
items
=
>
immediateInterval
.
"
)
;
scheduler
.
hasIncomingItems
=
true
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncSuccesses
8
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Assert
.
ok
(
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
immediateInterval
)
;
Svc
.
Obs
.
remove
(
"
weave
:
service
:
sync
:
finish
"
onSyncFinish
)
;
await
Service
.
startOver
(
)
;
await
promiseStopServer
(
server
)
;
}
)
;
add_task
(
async
function
test_unsuccessful_sync_adjustSyncInterval
(
)
{
enableValidationPrefs
(
)
;
_
(
"
Test
unsuccessful
sync
calling
adjustSyncInterval
"
)
;
let
syncFailures
=
0
;
function
onSyncError
(
)
{
_
(
"
Sync
error
.
"
)
;
syncFailures
+
+
;
}
Svc
.
Obs
.
add
(
"
weave
:
service
:
sync
:
error
"
onSyncError
)
;
_
(
"
Test
unsuccessful
sync
calls
adjustSyncInterval
"
)
;
Svc
.
Prefs
.
set
(
"
firstSync
"
"
notReady
"
)
;
let
server
=
await
sync_httpd_setup
(
)
;
await
setUp
(
server
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
_
(
"
Test
as
long
as
numClients
<
=
1
our
sync
interval
is
SINGLE_USER
.
"
)
;
scheduler
.
idle
=
true
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncFailures
1
)
;
Assert
.
ok
(
scheduler
.
idle
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
scheduler
.
idle
=
false
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncFailures
2
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
scheduler
.
hasIncomingItems
=
true
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncFailures
3
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
scheduler
.
idle
=
true
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncFailures
4
)
;
Assert
.
ok
(
scheduler
.
idle
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
_
(
"
Test
as
long
as
idle
&
&
numClients
>
1
our
sync
interval
is
idleInterval
.
"
)
;
Svc
.
Prefs
.
set
(
"
clients
.
devices
.
mobile
"
2
)
;
scheduler
.
updateClientMode
(
)
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncFailures
5
)
;
Assert
.
ok
(
scheduler
.
idle
)
;
Assert
.
ok
(
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
idleInterval
)
;
scheduler
.
hasIncomingItems
=
false
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncFailures
6
)
;
Assert
.
ok
(
scheduler
.
idle
)
;
Assert
.
ok
(
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
idleInterval
)
;
_
(
"
Test
non
-
idle
numClients
>
1
no
incoming
items
=
>
activeInterval
.
"
)
;
scheduler
.
idle
=
false
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncFailures
7
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Assert
.
ok
(
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
activeInterval
)
;
_
(
"
Test
non
-
idle
numClients
>
1
incoming
items
=
>
immediateInterval
.
"
)
;
scheduler
.
hasIncomingItems
=
true
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncFailures
8
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Assert
.
ok
(
scheduler
.
numClients
>
1
)
;
Assert
.
ok
(
!
scheduler
.
hasIncomingItems
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
immediateInterval
)
;
await
Service
.
startOver
(
)
;
Svc
.
Obs
.
remove
(
"
weave
:
service
:
sync
:
error
"
onSyncError
)
;
await
promiseStopServer
(
server
)
;
}
)
;
add_task
(
async
function
test_back_triggers_sync
(
)
{
enableValidationPrefs
(
)
;
let
server
=
await
sync_httpd_setup
(
)
;
await
setUp
(
server
)
;
scheduler
.
idle
=
true
;
scheduler
.
observe
(
null
"
active
"
Svc
.
Prefs
.
get
(
"
scheduler
.
idleTime
"
)
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
Svc
.
Prefs
.
set
(
"
clients
.
devices
.
mobile
"
2
)
;
scheduler
.
updateClientMode
(
)
;
let
promiseDone
=
promiseOneObserver
(
"
weave
:
service
:
sync
:
finish
"
)
;
scheduler
.
idle
=
true
;
scheduler
.
observe
(
null
"
active
"
Svc
.
Prefs
.
get
(
"
scheduler
.
idleTime
"
)
)
;
Assert
.
ok
(
!
scheduler
.
idle
)
;
await
promiseDone
;
Service
.
recordManager
.
clearCache
(
)
;
Svc
.
Prefs
.
resetBranch
(
"
"
)
;
scheduler
.
setDefaults
(
)
;
await
clientsEngine
.
resetClient
(
)
;
await
Service
.
startOver
(
)
;
await
promiseStopServer
(
server
)
;
}
)
;
add_task
(
async
function
test_adjust_interval_on_sync_error
(
)
{
enableValidationPrefs
(
)
;
let
server
=
await
sync_httpd_setup
(
)
;
await
setUp
(
server
)
;
let
syncFailures
=
0
;
function
onSyncError
(
)
{
_
(
"
Sync
error
.
"
)
;
syncFailures
+
+
;
}
Svc
.
Obs
.
add
(
"
weave
:
service
:
sync
:
error
"
onSyncError
)
;
_
(
"
Test
unsuccessful
sync
updates
client
mode
&
sync
intervals
"
)
;
Svc
.
Prefs
.
set
(
"
firstSync
"
"
notReady
"
)
;
Assert
.
equal
(
syncFailures
0
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
Svc
.
Prefs
.
set
(
"
clients
.
devices
.
mobile
"
2
)
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncFailures
1
)
;
Assert
.
ok
(
scheduler
.
numClients
>
1
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
activeInterval
)
;
Svc
.
Obs
.
remove
(
"
weave
:
service
:
sync
:
error
"
onSyncError
)
;
await
Service
.
startOver
(
)
;
await
promiseStopServer
(
server
)
;
}
)
;
add_task
(
async
function
test_bug671378_scenario
(
)
{
enableValidationPrefs
(
)
;
let
server
=
await
sync_httpd_setup
(
)
;
await
setUp
(
server
)
;
let
syncSuccesses
=
0
;
function
onSyncFinish
(
)
{
_
(
"
Sync
success
.
"
)
;
syncSuccesses
+
+
;
}
Svc
.
Obs
.
add
(
"
weave
:
service
:
sync
:
finish
"
onSyncFinish
)
;
await
Service
.
sync
(
)
;
Assert
.
equal
(
syncSuccesses
1
)
;
Assert
.
equal
(
false
scheduler
.
numClients
>
1
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
Assert
.
equal
(
scheduler
.
syncTimer
.
delay
scheduler
.
singleDeviceInterval
)
;
let
promiseDone
=
new
Promise
(
resolve
=
>
{
scheduler
.
_scheduleNextSync
=
scheduler
.
scheduleNextSync
;
scheduler
.
scheduleNextSync
=
function
(
)
{
scheduler
.
_scheduleNextSync
(
)
;
if
(
syncSuccesses
=
=
2
)
{
Assert
.
notEqual
(
scheduler
.
nextSync
0
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
activeInterval
)
;
Assert
.
ok
(
scheduler
.
syncTimer
.
delay
<
=
scheduler
.
activeInterval
)
;
scheduler
.
scheduleNextSync
=
scheduler
.
_scheduleNextSync
;
Svc
.
Obs
.
remove
(
"
weave
:
service
:
sync
:
finish
"
onSyncFinish
)
;
Service
.
startOver
(
)
.
then
(
(
)
=
>
{
server
.
stop
(
resolve
)
;
}
)
;
}
}
;
}
)
;
Svc
.
Obs
.
add
(
"
weave
:
service
:
sync
:
start
"
function
onSyncStart
(
)
{
CommonUtils
.
nextTick
(
function
(
)
{
Svc
.
Obs
.
remove
(
"
weave
:
service
:
sync
:
start
"
onSyncStart
)
;
scheduler
.
scheduleNextSync
(
)
;
Assert
.
notEqual
(
scheduler
.
nextSync
0
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
Assert
.
equal
(
scheduler
.
syncTimer
.
delay
scheduler
.
singleDeviceInterval
)
;
}
)
;
}
)
;
await
Service
.
clientsEngine
.
_store
.
create
(
{
id
:
"
foo
"
cleartext
:
{
name
:
"
bar
"
type
:
"
mobile
"
}
}
)
;
await
Service
.
sync
(
)
;
await
promiseDone
;
}
)
;
add_task
(
async
function
test_adjust_timer_larger_syncInterval
(
)
{
_
(
"
Test
syncInterval
>
current
timout
period
&
&
nextSync
!
=
0
syncInterval
is
NOT
used
.
"
)
;
Svc
.
Prefs
.
set
(
"
clients
.
devices
.
mobile
"
2
)
;
scheduler
.
updateClientMode
(
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
activeInterval
)
;
scheduler
.
scheduleNextSync
(
)
;
Assert
.
notEqual
(
scheduler
.
nextSync
0
)
;
Assert
.
equal
(
scheduler
.
syncTimer
.
delay
scheduler
.
activeInterval
)
;
await
clientsEngine
.
_wipeClient
(
)
;
Svc
.
Prefs
.
reset
(
"
clients
.
devices
.
mobile
"
)
;
scheduler
.
updateClientMode
(
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
singleDeviceInterval
)
;
scheduler
.
scheduleNextSync
(
)
;
Assert
.
notEqual
(
scheduler
.
nextSync
0
)
;
Assert
.
ok
(
scheduler
.
syncTimer
.
delay
<
=
scheduler
.
activeInterval
)
;
await
Service
.
startOver
(
)
;
}
)
;
add_task
(
async
function
test_adjust_timer_smaller_syncInterval
(
)
{
_
(
"
Test
current
timout
>
syncInterval
period
&
&
nextSync
!
=
0
syncInterval
is
used
.
"
)
;
scheduler
.
scheduleNextSync
(
)
;
Assert
.
notEqual
(
scheduler
.
nextSync
0
)
;
Assert
.
equal
(
scheduler
.
syncTimer
.
delay
scheduler
.
singleDeviceInterval
)
;
Svc
.
Prefs
.
set
(
"
clients
.
devices
.
mobile
"
2
)
;
scheduler
.
updateClientMode
(
)
;
Assert
.
equal
(
scheduler
.
syncInterval
scheduler
.
activeInterval
)
;
scheduler
.
scheduleNextSync
(
)
;
Assert
.
notEqual
(
scheduler
.
nextSync
0
)
;
Assert
.
ok
(
scheduler
.
syncTimer
.
delay
<
=
scheduler
.
activeInterval
)
;
await
Service
.
startOver
(
)
;
}
)
;
