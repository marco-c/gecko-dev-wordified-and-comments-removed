const
EXPORTED_SYMBOLS
=
[
"
BrowserTabs
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
Cc
[
"
mozilla
.
org
/
globalmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageListenerManager
)
.
loadFrameScript
(
"
data
:
application
/
javascript
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
addEventListener
(
"
load
"
function
(
event
)
{
let
subframe
=
event
.
target
!
=
content
.
document
;
sendAsyncMessage
(
"
tps
:
loadEvent
"
{
subframe
:
subframe
url
:
event
.
target
.
documentURI
}
)
;
}
true
)
)
true
)
;
var
BrowserTabs
=
{
Add
(
uri
fn
)
{
let
mainWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
let
browser
=
mainWindow
.
getBrowser
(
)
;
let
mm
=
browser
.
ownerGlobal
.
messageManager
;
mm
.
addMessageListener
(
"
tps
:
loadEvent
"
function
onLoad
(
msg
)
{
mm
.
removeMessageListener
(
"
tps
:
loadEvent
"
onLoad
)
;
fn
(
)
;
}
)
;
let
newtab
=
browser
.
addTab
(
uri
)
;
browser
.
selectedTab
=
newtab
;
}
Find
(
uri
title
profile
)
{
let
engine
=
Weave
.
Service
.
engineManager
.
get
(
"
tabs
"
)
;
for
(
let
[
client
]
of
Object
.
entries
(
engine
.
getAllClients
(
)
)
)
{
if
(
!
client
.
tabs
)
{
continue
;
}
for
(
let
key
in
client
.
tabs
)
{
let
tab
=
client
.
tabs
[
key
]
;
let
weaveTabUrl
=
tab
.
urlHistory
[
0
]
;
if
(
uri
=
=
weaveTabUrl
&
&
profile
=
=
client
.
clientName
)
if
(
title
=
=
undefined
|
|
title
=
=
tab
.
title
)
return
true
;
}
}
return
false
;
}
}
;
