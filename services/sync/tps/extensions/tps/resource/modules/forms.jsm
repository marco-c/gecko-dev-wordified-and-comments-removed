var
EXPORTED_SYMBOLS
=
[
"
FormData
"
]
;
const
{
Logger
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
tps
/
logger
.
jsm
"
)
;
const
{
FormHistory
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FormHistory
.
jsm
"
)
;
var
FormDB
=
{
async
_update
(
data
)
{
await
FormHistory
.
update
(
data
)
;
}
insertValue
(
fieldname
value
us
)
{
let
data
=
{
op
:
"
add
"
fieldname
value
timesUsed
:
1
firstUsed
:
us
lastUsed
:
us
}
;
return
this
.
_update
(
data
)
;
}
updateValue
(
id
newvalue
)
{
return
this
.
_update
(
{
op
:
"
update
"
guid
:
id
value
:
newvalue
}
)
;
}
async
getDataForValue
(
fieldname
value
)
{
let
results
=
await
FormHistory
.
search
(
[
"
guid
"
"
lastUsed
"
"
firstUsed
"
]
{
fieldname
value
}
)
;
if
(
results
.
length
>
1
)
{
throw
new
Error
(
"
more
than
1
result
for
this
query
"
)
;
}
return
results
;
}
remove
(
guid
)
{
return
this
.
_update
(
{
op
:
"
remove
"
guid
}
)
;
}
}
;
function
FormData
(
props
msSinceEpoch
)
{
this
.
fieldname
=
null
;
this
.
value
=
null
;
this
.
date
=
0
;
this
.
newvalue
=
null
;
this
.
usSinceEpoch
=
msSinceEpoch
*
1000
;
for
(
var
prop
in
props
)
{
if
(
prop
in
this
)
{
this
[
prop
]
=
props
[
prop
]
;
}
}
}
FormData
.
prototype
=
{
hours_to_us
(
hours
)
{
return
this
.
usSinceEpoch
+
hours
*
60
*
60
*
1000
*
1000
;
}
Create
(
)
{
Logger
.
AssertTrue
(
this
.
fieldname
!
=
null
&
&
this
.
value
!
=
null
"
Must
specify
both
fieldname
and
value
"
)
;
return
FormDB
.
getDataForValue
(
this
.
fieldname
this
.
value
)
.
then
(
formdata
=
>
{
if
(
!
formdata
)
{
return
FormDB
.
insertValue
(
this
.
fieldname
this
.
value
this
.
hours_to_us
(
this
.
date
)
)
;
}
return
null
;
}
)
;
}
Find
(
)
{
return
FormDB
.
getDataForValue
(
this
.
fieldname
this
.
value
)
.
then
(
formdata
=
>
{
let
status
=
formdata
!
=
null
;
if
(
status
)
{
this
.
id
=
formdata
.
guid
;
}
return
status
;
}
)
;
}
async
Remove
(
)
{
const
formdata
=
await
FormDB
.
getDataForValue
(
this
.
fieldname
this
.
value
)
;
if
(
!
formdata
)
{
return
;
}
await
FormDB
.
remove
(
formdata
.
guid
)
;
}
}
;
