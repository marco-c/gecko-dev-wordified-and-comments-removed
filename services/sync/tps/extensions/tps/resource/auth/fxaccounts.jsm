"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
Authentication
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsClient
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsConfig
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
async
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
tps
/
logger
.
jsm
"
)
;
var
Authentication
=
{
get
isLoggedIn
(
)
{
return
!
!
this
.
getSignedInUser
(
)
;
}
getSignedInUser
:
function
getSignedInUser
(
)
{
let
cb
=
Async
.
makeSpinningCallback
(
)
;
fxAccounts
.
getSignedInUser
(
)
.
then
(
user
=
>
{
cb
(
null
user
)
;
}
error
=
>
{
cb
(
error
)
;
}
)
try
{
return
cb
.
wait
(
)
;
}
catch
(
error
)
{
Logger
.
logError
(
"
getSignedInUser
(
)
failed
with
:
"
+
JSON
.
stringify
(
error
)
)
;
throw
error
;
}
}
signIn
:
function
signIn
(
account
)
{
let
cb
=
Async
.
makeSpinningCallback
(
)
;
Logger
.
AssertTrue
(
account
[
"
username
"
]
"
Username
has
been
found
"
)
;
Logger
.
AssertTrue
(
account
[
"
password
"
]
"
Password
has
been
found
"
)
;
Logger
.
logInfo
(
"
Login
user
:
"
+
account
[
"
username
"
]
)
;
Async
.
promiseSpinningly
(
FxAccountsConfig
.
ensureConfigured
(
)
)
;
let
client
=
new
FxAccountsClient
(
)
;
client
.
signIn
(
account
[
"
username
"
]
account
[
"
password
"
]
true
)
.
then
(
credentials
=
>
{
return
fxAccounts
.
setSignedInUser
(
credentials
)
;
}
)
.
then
(
(
)
=
>
{
cb
(
null
true
)
;
}
error
=
>
{
cb
(
error
false
)
;
}
)
;
try
{
cb
.
wait
(
)
;
if
(
Weave
.
Status
.
login
!
=
=
Weave
.
LOGIN_SUCCEEDED
)
{
Logger
.
logInfo
(
"
Logging
into
Weave
.
"
)
;
Weave
.
Service
.
login
(
)
;
Logger
.
AssertEqual
(
Weave
.
Status
.
login
Weave
.
LOGIN_SUCCEEDED
"
Weave
logged
in
"
)
;
}
return
true
;
}
catch
(
error
)
{
throw
new
Error
(
"
signIn
(
)
failed
with
:
"
+
error
.
message
)
;
}
}
signOut
(
)
{
if
(
Authentication
.
isLoggedIn
)
{
let
user
=
Authentication
.
getSignedInUser
(
)
;
if
(
!
user
)
{
throw
new
Error
(
"
Failed
to
get
signed
in
user
!
"
)
;
}
let
fxc
=
new
FxAccountsClient
(
)
;
let
{
sessionToken
deviceId
}
=
user
;
if
(
deviceId
)
{
Logger
.
logInfo
(
"
Destroying
device
"
+
deviceId
)
;
Async
.
promiseSpinningly
(
fxAccounts
.
deleteDeviceRegistration
(
sessionToken
deviceId
)
)
;
}
else
{
Logger
.
logError
(
"
No
device
found
.
"
)
;
Async
.
promiseSpinningly
(
fxc
.
signOut
(
sessionToken
{
service
:
"
sync
"
}
)
)
;
}
}
}
}
;
