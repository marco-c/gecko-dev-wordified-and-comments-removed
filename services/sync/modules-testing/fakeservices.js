"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FakeCryptoService
"
"
FakeFilesystemService
"
"
FakeGUIDService
"
"
fakeSHA256HMAC
"
]
;
var
{
utils
:
Cu
}
=
Components
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
record
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
this
.
FakeFilesystemService
=
function
FakeFilesystemService
(
contents
)
{
this
.
fakeContents
=
contents
;
let
self
=
this
;
for
(
let
name
of
[
"
jsonSave
"
"
jsonLoad
"
"
jsonMove
"
"
jsonRemove
"
]
)
{
let
origName
=
"
_real_
"
+
name
;
if
(
!
Utils
[
origName
]
)
{
Utils
[
origName
]
=
Utils
[
name
]
;
}
}
Utils
.
jsonSave
=
async
function
jsonSave
(
filePath
that
obj
)
{
let
json
=
typeof
obj
=
=
"
function
"
?
obj
.
call
(
that
)
:
obj
;
self
.
fakeContents
[
"
weave
/
"
+
filePath
+
"
.
json
"
]
=
JSON
.
stringify
(
json
)
;
}
;
Utils
.
jsonLoad
=
async
function
jsonLoad
(
filePath
that
)
{
let
obj
;
let
json
=
self
.
fakeContents
[
"
weave
/
"
+
filePath
+
"
.
json
"
]
;
if
(
json
)
{
obj
=
JSON
.
parse
(
json
)
;
}
return
obj
;
}
;
Utils
.
jsonMove
=
function
jsonMove
(
aFrom
aTo
that
)
{
const
fromPath
=
"
weave
/
"
+
aFrom
+
"
.
json
"
;
self
.
fakeContents
[
"
weave
/
"
+
aTo
+
"
.
json
"
]
=
self
.
fakeContents
[
fromPath
]
;
delete
self
.
fakeContents
[
fromPath
]
;
return
Promise
.
resolve
(
)
;
}
;
Utils
.
jsonRemove
=
function
jsonRemove
(
filePath
that
)
{
delete
self
.
fakeContents
[
"
weave
/
"
+
filePath
+
"
.
json
"
]
;
return
Promise
.
resolve
(
)
;
}
;
}
;
this
.
fakeSHA256HMAC
=
function
fakeSHA256HMAC
(
message
)
{
message
=
message
.
substr
(
0
64
)
;
while
(
message
.
length
<
64
)
{
message
+
=
"
"
;
}
return
message
;
}
;
this
.
FakeGUIDService
=
function
FakeGUIDService
(
)
{
let
latestGUID
=
0
;
Utils
.
makeGUID
=
function
makeGUID
(
)
{
let
nextGUID
=
"
fake
-
guid
-
"
+
String
(
latestGUID
+
+
)
.
padStart
(
2
"
0
"
)
;
return
nextGUID
.
slice
(
nextGUID
.
length
-
12
nextGUID
.
length
)
;
}
;
}
;
this
.
FakeCryptoService
=
function
FakeCryptoService
(
)
{
this
.
counter
=
0
;
delete
Weave
.
Crypto
;
Weave
.
Crypto
=
this
;
CryptoWrapper
.
prototype
.
ciphertextHMAC
=
function
ciphertextHMAC
(
keyBundle
)
{
return
fakeSHA256HMAC
(
this
.
ciphertext
)
;
}
;
}
;
FakeCryptoService
.
prototype
=
{
async
encrypt
(
clearText
symmetricKey
iv
)
{
return
clearText
;
}
async
decrypt
(
cipherText
symmetricKey
iv
)
{
return
cipherText
;
}
async
generateRandomKey
(
)
{
return
btoa
(
"
fake
-
symmetric
-
key
-
"
+
this
.
counter
+
+
)
;
}
generateRandomIV
:
function
generateRandomIV
(
)
{
return
btoa
(
"
fake
-
fake
-
fake
-
random
-
iv
"
)
;
}
expandData
:
function
expandData
(
data
len
)
{
return
data
;
}
generateRandomBytes
:
function
generateRandomBytes
(
byteCount
)
{
return
"
not
-
so
-
random
-
now
-
are
-
we
-
HA
-
HA
-
HA
!
>
:
)
"
.
slice
(
byteCount
)
;
}
}
;
