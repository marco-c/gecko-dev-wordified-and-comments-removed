"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
initializeIdentityWithTokenServerResponse
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
browserid_identity
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
tokenserverclient
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
services
/
common
/
logging
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
services
/
sync
/
utils
.
js
"
)
;
var
initializeIdentityWithTokenServerResponse
=
function
(
response
)
{
let
requestLog
=
Log
.
repository
.
getLogger
(
"
testing
.
mock
-
rest
"
)
;
if
(
!
requestLog
.
appenders
.
length
)
{
requestLog
.
addAppender
(
new
Log
.
DumpAppender
(
)
)
;
requestLog
.
level
=
Log
.
Level
.
Trace
;
}
function
MockRESTRequest
(
url
)
{
}
MockRESTRequest
.
prototype
=
{
_log
:
requestLog
setHeader
(
)
{
}
get
(
callback
)
{
this
.
response
=
response
;
callback
.
call
(
this
)
;
}
}
;
function
MockTSC
(
)
{
}
MockTSC
.
prototype
=
new
TokenServerClient
(
)
;
MockTSC
.
prototype
.
constructor
=
MockTSC
;
MockTSC
.
prototype
.
newRESTRequest
=
function
(
url
)
{
return
new
MockRESTRequest
(
url
)
;
}
;
MockTSC
.
prototype
.
observerPrefix
=
"
weave
:
service
"
;
Weave
.
Status
.
__authManager
=
Weave
.
Service
.
identity
=
new
BrowserIDManager
(
)
;
Weave
.
Service
.
_clusterManager
=
Weave
.
Service
.
identity
.
createClusterManager
(
Weave
.
Service
)
;
let
browseridManager
=
Weave
.
Service
.
identity
;
if
(
!
(
browseridManager
instanceof
BrowserIDManager
)
)
{
throw
new
Error
(
"
sync
isn
'
t
configured
for
browserid_identity
"
)
;
}
let
mockTSC
=
new
MockTSC
(
)
;
configureFxAccountIdentity
(
browseridManager
)
;
browseridManager
.
_tokenServerClient
=
mockTSC
;
}
;
