"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FxAccountsProfile
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FxAccountsProfileClient
"
"
resource
:
/
/
gre
/
modules
/
FxAccountsProfileClient
.
jsm
"
)
;
this
.
FxAccountsProfile
=
function
(
options
=
{
}
)
{
this
.
_currentFetchPromise
=
null
;
this
.
_cachedAt
=
0
;
this
.
_isNotifying
=
false
;
this
.
fxa
=
options
.
fxa
|
|
fxAccounts
;
this
.
client
=
options
.
profileClient
|
|
new
FxAccountsProfileClient
(
{
fxa
:
this
.
fxa
serverURL
:
options
.
profileServerUrl
}
)
;
Services
.
obs
.
addObserver
(
this
ON_PROFILE_CHANGE_NOTIFICATION
true
)
;
if
(
options
.
channel
)
{
this
.
channel
=
options
.
channel
;
}
}
;
this
.
FxAccountsProfile
.
prototype
=
{
PROFILE_FRESHNESS_THRESHOLD
:
120000
observe
(
subject
topic
data
)
{
if
(
topic
=
=
ON_PROFILE_CHANGE_NOTIFICATION
&
&
!
this
.
_isNotifying
)
{
log
.
debug
(
"
FxAccountsProfile
observed
profile
change
"
)
;
this
.
_cachedAt
=
0
;
}
}
tearDown
(
)
{
this
.
fxa
=
null
;
this
.
client
=
null
;
Services
.
obs
.
removeObserver
(
this
ON_PROFILE_CHANGE_NOTIFICATION
)
;
}
_notifyProfileChange
(
uid
)
{
this
.
_isNotifying
=
true
;
Services
.
obs
.
notifyObservers
(
null
ON_PROFILE_CHANGE_NOTIFICATION
uid
)
;
this
.
_isNotifying
=
false
;
}
async
_cacheProfile
(
response
)
{
const
profile
=
response
.
body
;
const
userData
=
await
this
.
fxa
.
getSignedInUser
(
)
;
if
(
profile
.
uid
!
=
userData
.
uid
)
{
throw
new
Error
(
"
The
fetched
profile
does
not
correspond
with
the
current
account
.
"
)
;
}
let
profileCache
=
{
profile
etag
:
response
.
etag
}
;
await
this
.
fxa
.
setProfileCache
(
profileCache
)
;
if
(
profile
.
email
!
=
userData
.
email
)
{
await
this
.
fxa
.
handleEmailUpdated
(
profile
.
email
)
;
}
log
.
debug
(
"
notifying
profile
changed
for
user
{
uid
}
"
userData
)
;
this
.
_notifyProfileChange
(
userData
.
uid
)
;
return
profile
;
}
async
_fetchAndCacheProfileInternal
(
)
{
try
{
const
profileCache
=
await
this
.
fxa
.
getProfileCache
(
)
;
const
etag
=
profileCache
?
profileCache
.
etag
:
null
;
const
response
=
await
this
.
client
.
fetchProfile
(
etag
)
;
if
(
!
response
)
{
return
null
;
}
return
await
this
.
_cacheProfile
(
response
)
;
}
finally
{
this
.
_cachedAt
=
Date
.
now
(
)
;
this
.
_currentFetchPromise
=
null
;
}
}
_fetchAndCacheProfile
(
)
{
if
(
!
this
.
_currentFetchPromise
)
{
this
.
_currentFetchPromise
=
this
.
_fetchAndCacheProfileInternal
(
)
;
}
return
this
.
_currentFetchPromise
;
}
async
getProfile
(
)
{
const
profileCache
=
await
this
.
fxa
.
getProfileCache
(
)
;
if
(
!
profileCache
)
{
this
.
_fetchAndCacheProfile
(
)
.
catch
(
err
=
>
{
log
.
error
(
"
Background
refresh
of
initial
profile
failed
"
err
)
;
}
)
;
return
null
;
}
if
(
Date
.
now
(
)
>
this
.
_cachedAt
+
this
.
PROFILE_FRESHNESS_THRESHOLD
)
{
this
.
_fetchAndCacheProfile
(
)
.
catch
(
err
=
>
{
log
.
error
(
"
Background
refresh
of
profile
failed
"
err
)
;
}
)
;
}
else
{
log
.
trace
(
"
not
checking
freshness
of
profile
as
it
remains
recent
"
)
;
}
return
profileCache
.
profile
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
}
;
