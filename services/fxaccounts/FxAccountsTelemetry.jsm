"
use
strict
"
;
const
{
Observers
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
observers
.
js
"
)
;
class
FxAccountsTelemetry
{
recordEvent
(
object
method
value
extra
=
undefined
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
telemetry
.
js
"
)
;
Observers
.
notify
(
"
fxa
:
telemetry
:
event
"
{
object
method
value
extra
}
)
;
}
generateFlowID
(
)
{
return
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
.
generateUUID
(
)
.
toString
(
)
.
slice
(
1
-
1
)
;
}
sanitizeDeviceId
(
deviceId
)
{
let
xps
=
this
.
_weaveXPCOM
|
|
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
if
(
!
xps
.
enabled
)
{
return
null
;
}
try
{
return
xps
.
Weave
.
Service
.
identity
.
hashedDeviceID
(
deviceId
)
;
}
catch
{
}
return
null
;
}
}
var
EXPORTED_SYMBOLS
=
[
"
FxAccountsTelemetry
"
]
;
