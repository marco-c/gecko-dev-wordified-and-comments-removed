"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
Observers
:
"
resource
:
/
/
services
-
common
/
observers
.
js
"
CryptoUtils
:
"
resource
:
/
/
services
-
crypto
/
utils
.
js
"
}
)
;
const
{
PREF_ACCOUNT_ROOT
log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
)
;
const
PREF_SANITIZED_UID
=
PREF_ACCOUNT_ROOT
+
"
telemetry
.
sanitized_uid
"
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
pref_sanitizedUid
"
PREF_SANITIZED_UID
"
"
)
;
class
FxAccountsTelemetry
{
constructor
(
fxai
)
{
this
.
_fxai
=
fxai
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
fxa
"
true
)
;
}
recordEvent
(
object
method
value
extra
=
undefined
)
{
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
sync
/
telemetry
.
sys
.
mjs
"
)
;
lazy
.
Observers
.
notify
(
"
fxa
:
telemetry
:
event
"
{
object
method
value
extra
}
)
;
}
generateUUID
(
)
{
return
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
.
slice
(
1
-
1
)
;
}
generateFlowID
(
)
{
return
this
.
generateUUID
(
)
;
}
_setHashedUID
(
hashedUID
)
{
if
(
!
hashedUID
)
{
Services
.
prefs
.
clearUserPref
(
PREF_SANITIZED_UID
)
;
}
else
{
Services
.
prefs
.
setStringPref
(
PREF_SANITIZED_UID
hashedUID
)
;
}
}
getSanitizedUID
(
)
{
return
lazy
.
pref_sanitizedUid
|
|
null
;
}
sanitizeDeviceId
(
deviceId
)
{
const
uid
=
this
.
getSanitizedUID
(
)
;
if
(
!
uid
)
{
return
null
;
}
return
lazy
.
CryptoUtils
.
sha256
(
deviceId
+
uid
)
;
}
async
recordConnection
(
services
how
=
null
)
{
try
{
let
extra
=
{
}
;
if
(
!
(
await
this
.
_fxai
.
getUserAccountData
(
)
)
)
{
extra
.
fxa
=
"
true
"
;
}
if
(
services
.
includes
(
"
sync
"
)
)
{
extra
.
sync
=
"
true
"
;
}
Services
.
telemetry
.
recordEvent
(
"
fxa
"
"
connect
"
"
account
"
how
extra
)
;
}
catch
(
ex
)
{
log
.
error
(
"
Failed
to
record
connection
telemetry
"
ex
)
;
console
.
error
(
"
Failed
to
record
connection
telemetry
"
ex
)
;
}
}
async
recordDisconnection
(
service
=
null
how
=
null
)
{
try
{
let
extra
=
{
}
;
if
(
!
service
)
{
extra
.
fxa
=
"
true
"
;
if
(
Services
.
prefs
.
prefHasUserValue
(
"
services
.
sync
.
username
"
)
)
{
extra
.
sync
=
"
true
"
;
}
}
else
if
(
service
=
=
"
sync
"
)
{
extra
[
service
]
=
"
true
"
;
}
else
{
log
.
warn
(
recordDisconnection
has
invalid
value
for
service
:
{
service
}
)
;
}
Services
.
telemetry
.
recordEvent
(
"
fxa
"
"
disconnect
"
"
account
"
how
extra
)
;
}
catch
(
ex
)
{
log
.
error
(
"
Failed
to
record
disconnection
telemetry
"
ex
)
;
console
.
error
(
"
Failed
to
record
disconnection
telemetry
"
ex
)
;
}
}
}
var
EXPORTED_SYMBOLS
=
[
"
FxAccountsTelemetry
"
]
;
