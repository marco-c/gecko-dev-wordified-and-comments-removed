"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FxAccountsConfig
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
rest
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
fxAccounts
"
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
EnsureFxAccountsWebChannel
"
"
resource
:
/
/
gre
/
modules
/
FxAccountsWebChannel
.
jsm
"
)
;
const
CONFIG_PREFS
=
[
"
identity
.
fxaccounts
.
auth
.
uri
"
"
identity
.
fxaccounts
.
remote
.
oauth
.
uri
"
"
identity
.
fxaccounts
.
remote
.
profile
.
uri
"
"
identity
.
sync
.
tokenserver
.
uri
"
"
identity
.
fxaccounts
.
remote
.
webchannel
.
uri
"
"
identity
.
fxaccounts
.
settings
.
uri
"
"
identity
.
fxaccounts
.
settings
.
devices
.
uri
"
"
identity
.
fxaccounts
.
remote
.
signup
.
uri
"
"
identity
.
fxaccounts
.
remote
.
signin
.
uri
"
"
identity
.
fxaccounts
.
remote
.
force_auth
.
uri
"
]
;
this
.
FxAccountsConfig
=
{
promiseAccountsSignUpURI
:
Task
.
async
(
function
*
(
)
{
yield
this
.
ensureConfigured
(
)
;
let
url
=
Services
.
urlFormatter
.
formatURLPref
(
"
identity
.
fxaccounts
.
remote
.
signup
.
uri
"
)
;
if
(
fxAccounts
.
requiresHttps
(
)
&
&
!
/
^
https
:
/
.
test
(
url
)
)
{
throw
new
Error
(
"
Firefox
Accounts
server
must
use
HTTPS
"
)
;
}
return
url
;
}
)
promiseAccountsSignInURI
:
Task
.
async
(
function
*
(
)
{
yield
this
.
ensureConfigured
(
)
;
let
url
=
Services
.
urlFormatter
.
formatURLPref
(
"
identity
.
fxaccounts
.
remote
.
signin
.
uri
"
)
;
if
(
fxAccounts
.
requiresHttps
(
)
&
&
!
/
^
https
:
/
.
test
(
url
)
)
{
throw
new
Error
(
"
Firefox
Accounts
server
must
use
HTTPS
"
)
;
}
return
url
;
}
)
resetConfigURLs
(
)
{
let
autoconfigURL
=
this
.
getAutoConfigURL
(
)
;
if
(
!
autoconfigURL
)
{
return
;
}
for
(
let
pref
of
CONFIG_PREFS
)
{
Services
.
prefs
.
clearUserPref
(
pref
)
;
}
EnsureFxAccountsWebChannel
(
)
;
if
(
!
Services
.
prefs
.
prefHasUserValue
(
"
webchannel
.
allowObject
.
urlWhitelist
"
)
)
{
return
;
}
let
whitelistValue
=
Services
.
prefs
.
getCharPref
(
"
webchannel
.
allowObject
.
urlWhitelist
"
)
;
if
(
whitelistValue
.
startsWith
(
autoconfigURL
+
"
"
)
)
{
whitelistValue
=
whitelistValue
.
slice
(
autoconfigURL
.
length
+
1
)
;
let
defaultWhitelist
=
Services
.
prefs
.
getDefaultBranch
(
"
webchannel
.
allowObject
.
"
)
.
getCharPref
(
"
urlWhitelist
"
"
"
)
;
if
(
defaultWhitelist
=
=
=
whitelistValue
)
{
Services
.
prefs
.
clearUserPref
(
"
webchannel
.
allowObject
.
urlWhitelist
"
)
;
}
else
{
Services
.
prefs
.
setCharPref
(
"
webchannel
.
allowObject
.
urlWhitelist
"
whitelistValue
)
;
}
}
}
getAutoConfigURL
(
)
{
let
pref
=
Services
.
prefs
.
getCharPref
(
"
identity
.
fxaccounts
.
autoconfig
.
uri
"
"
"
)
;
if
(
!
pref
)
{
return
"
"
;
}
let
rootURL
=
Services
.
urlFormatter
.
formatURL
(
pref
)
;
if
(
rootURL
.
endsWith
(
"
/
"
)
)
{
rootURL
.
slice
(
0
-
1
)
;
}
return
rootURL
;
}
ensureConfigured
:
Task
.
async
(
function
*
(
)
{
let
isSignedIn
=
!
!
(
yield
fxAccounts
.
getSignedInUser
(
)
)
;
if
(
!
isSignedIn
)
{
yield
this
.
fetchConfigURLs
(
)
;
}
}
)
fetchConfigURLs
:
Task
.
async
(
function
*
(
)
{
let
rootURL
=
this
.
getAutoConfigURL
(
)
;
if
(
!
rootURL
)
{
return
;
}
let
configURL
=
rootURL
+
"
/
.
well
-
known
/
fxa
-
client
-
configuration
"
;
let
jsonStr
=
yield
new
Promise
(
(
resolve
reject
)
=
>
{
let
request
=
new
RESTRequest
(
configURL
)
;
request
.
setHeader
(
"
Accept
"
"
application
/
json
"
)
;
request
.
get
(
error
=
>
{
if
(
error
)
{
log
.
error
(
Failed
to
get
configuration
object
from
"
{
configURL
}
"
error
)
;
reject
(
error
)
;
return
;
}
if
(
!
request
.
response
.
success
)
{
log
.
error
(
Received
HTTP
response
code
{
request
.
response
.
status
}
from
configuration
object
request
)
;
if
(
request
.
response
&
&
request
.
response
.
body
)
{
log
.
debug
(
"
Got
error
response
"
request
.
response
.
body
)
;
}
reject
(
request
.
response
.
status
)
;
return
;
}
resolve
(
request
.
response
.
body
)
;
}
)
;
}
)
;
log
.
debug
(
"
Got
successful
configuration
response
"
jsonStr
)
;
try
{
let
config
=
JSON
.
parse
(
jsonStr
)
let
authServerBase
=
config
.
auth_server_base_url
;
if
(
!
authServerBase
.
endsWith
(
"
/
v1
"
)
)
{
authServerBase
+
=
"
/
v1
"
;
}
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
auth
.
uri
"
authServerBase
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
remote
.
oauth
.
uri
"
config
.
oauth_server_base_url
+
"
/
v1
"
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
remote
.
profile
.
uri
"
config
.
profile_server_base_url
+
"
/
v1
"
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
sync
.
tokenserver
.
uri
"
config
.
sync_tokenserver_base_url
+
"
/
1
.
0
/
sync
/
1
.
5
"
)
;
let
contextParam
=
encodeURIComponent
(
Services
.
prefs
.
getCharPref
(
"
identity
.
fxaccounts
.
contextParam
"
)
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
remote
.
webchannel
.
uri
"
rootURL
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
settings
.
uri
"
rootURL
+
"
/
settings
?
service
=
sync
&
context
=
"
+
contextParam
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
settings
.
devices
.
uri
"
rootURL
+
"
/
settings
/
clients
?
service
=
sync
&
context
=
"
+
contextParam
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
remote
.
signup
.
uri
"
rootURL
+
"
/
signup
?
service
=
sync
&
context
=
"
+
contextParam
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
remote
.
signin
.
uri
"
rootURL
+
"
/
signin
?
service
=
sync
&
context
=
"
+
contextParam
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
remote
.
force_auth
.
uri
"
rootURL
+
"
/
force_auth
?
service
=
sync
&
context
=
"
+
contextParam
)
;
let
whitelistValue
=
Services
.
prefs
.
getCharPref
(
"
webchannel
.
allowObject
.
urlWhitelist
"
)
;
if
(
!
whitelistValue
.
includes
(
rootURL
)
)
{
whitelistValue
=
{
rootURL
}
{
whitelistValue
}
;
Services
.
prefs
.
setCharPref
(
"
webchannel
.
allowObject
.
urlWhitelist
"
whitelistValue
)
;
}
EnsureFxAccountsWebChannel
(
)
;
}
catch
(
e
)
{
log
.
error
(
"
Failed
to
initialize
configuration
preferences
from
autoconfig
object
"
e
)
;
throw
e
;
}
}
)
}
;
