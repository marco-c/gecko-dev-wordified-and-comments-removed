var
EXPORTED_SYMBOLS
=
[
"
FxAccountsOAuthGrantClient
"
"
FxAccountsOAuthGrantClientError
"
]
;
const
{
ERRNO_NETWORK
ERRNO_PARSE
ERRNO_UNKNOWN_ERROR
ERROR_CODE_METHOD_NOT_ALLOWED
ERROR_MSG_METHOD_NOT_ALLOWED
ERROR_NETWORK
ERROR_PARSE
ERROR_UNKNOWN
OAUTH_SERVER_ERRNO_OFFSET
log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
)
;
const
{
RESTRequest
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
rest
.
js
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
URL
"
]
)
;
const
AUTH_ENDPOINT
=
"
/
authorization
"
;
const
HOST_PREF
=
"
identity
.
fxaccounts
.
remote
.
oauth
.
uri
"
;
const
ALLOW_HTTP_PREF
=
"
identity
.
fxaccounts
.
allowHttp
"
;
var
FxAccountsOAuthGrantClient
=
function
(
options
=
{
}
)
{
this
.
parameters
=
{
.
.
.
options
}
;
if
(
!
this
.
parameters
.
serverURL
)
{
this
.
parameters
.
serverURL
=
Services
.
prefs
.
getCharPref
(
HOST_PREF
)
;
}
this
.
_validateOptions
(
this
.
parameters
)
;
try
{
this
.
serverURL
=
new
URL
(
this
.
parameters
.
serverURL
)
;
}
catch
(
e
)
{
throw
new
Error
(
"
Invalid
'
serverURL
'
"
)
;
}
let
forceHTTPS
=
!
Services
.
prefs
.
getBoolPref
(
ALLOW_HTTP_PREF
false
)
;
if
(
forceHTTPS
&
&
this
.
serverURL
.
protocol
!
=
"
https
:
"
)
{
throw
new
Error
(
"
'
serverURL
'
must
be
HTTPS
"
)
;
}
log
.
debug
(
"
FxAccountsOAuthGrantClient
Initialized
"
)
;
}
;
FxAccountsOAuthGrantClient
.
prototype
=
{
getTokenFromAssertion
(
assertion
scope
ttl
)
{
if
(
!
assertion
)
{
throw
new
Error
(
"
Missing
'
assertion
'
parameter
"
)
;
}
if
(
!
scope
)
{
throw
new
Error
(
"
Missing
'
scope
'
parameter
"
)
;
}
let
params
=
{
scope
client_id
:
this
.
parameters
.
client_id
assertion
response_type
:
"
token
"
ttl
}
;
return
this
.
_createRequest
(
AUTH_ENDPOINT
"
POST
"
params
)
;
}
_validateOptions
(
options
)
{
if
(
!
options
)
{
throw
new
Error
(
"
Missing
configuration
options
"
)
;
}
[
"
serverURL
"
"
client_id
"
]
.
forEach
(
option
=
>
{
if
(
!
options
[
option
]
)
{
throw
new
Error
(
"
Missing
'
"
+
option
+
"
'
parameter
"
)
;
}
}
)
;
}
_Request
:
RESTRequest
async
_createRequest
(
path
method
=
"
POST
"
params
)
{
let
requestUrl
=
this
.
serverURL
+
path
;
let
request
=
new
this
.
_Request
(
requestUrl
)
;
method
=
method
.
toUpperCase
(
)
;
request
.
setHeader
(
"
Accept
"
"
application
/
json
"
)
;
request
.
setHeader
(
"
Content
-
Type
"
"
application
/
json
"
)
;
if
(
method
!
=
"
POST
"
)
{
throw
new
FxAccountsOAuthGrantClientError
(
{
error
:
ERROR_NETWORK
errno
:
ERRNO_NETWORK
code
:
ERROR_CODE_METHOD_NOT_ALLOWED
message
:
ERROR_MSG_METHOD_NOT_ALLOWED
}
)
;
}
try
{
await
request
.
post
(
params
)
;
}
catch
(
error
)
{
throw
new
FxAccountsOAuthGrantClientError
(
{
error
:
ERROR_NETWORK
errno
:
ERRNO_NETWORK
message
:
error
.
toString
(
)
}
)
;
}
let
body
=
null
;
try
{
body
=
JSON
.
parse
(
request
.
response
.
body
)
;
}
catch
(
e
)
{
throw
new
FxAccountsOAuthGrantClientError
(
{
error
:
ERROR_PARSE
errno
:
ERRNO_PARSE
code
:
request
.
response
.
status
message
:
request
.
response
.
body
}
)
;
}
if
(
request
.
response
.
success
)
{
return
body
;
}
if
(
typeof
body
.
errno
=
=
=
"
number
"
)
{
body
.
errno
+
=
OAUTH_SERVER_ERRNO_OFFSET
;
}
else
if
(
body
.
errno
)
{
body
.
errno
=
ERRNO_UNKNOWN_ERROR
;
}
throw
new
FxAccountsOAuthGrantClientError
(
body
)
;
}
}
;
var
FxAccountsOAuthGrantClientError
=
function
(
details
)
{
details
=
details
|
|
{
}
;
this
.
name
=
"
FxAccountsOAuthGrantClientError
"
;
this
.
code
=
details
.
code
|
|
null
;
this
.
errno
=
details
.
errno
|
|
ERRNO_UNKNOWN_ERROR
;
this
.
error
=
details
.
error
|
|
ERROR_UNKNOWN
;
this
.
message
=
details
.
message
|
|
null
;
}
;
FxAccountsOAuthGrantClientError
.
prototype
.
_toStringFields
=
function
(
)
{
return
{
name
:
this
.
name
code
:
this
.
code
errno
:
this
.
errno
error
:
this
.
error
message
:
this
.
message
}
;
}
;
FxAccountsOAuthGrantClientError
.
prototype
.
toString
=
function
(
)
{
return
this
.
name
+
"
(
"
+
JSON
.
stringify
(
this
.
_toStringFields
(
)
)
+
"
)
"
;
}
;
