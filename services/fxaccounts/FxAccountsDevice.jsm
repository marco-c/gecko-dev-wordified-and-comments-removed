"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
)
;
const
{
DEVICE_TYPE_DESKTOP
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
constants
.
js
"
)
;
const
{
PREF_ACCOUNT_ROOT
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
)
;
const
PREF_LOCAL_DEVICE_NAME
=
PREF_ACCOUNT_ROOT
+
"
device
.
name
"
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
pref_localDeviceName
"
PREF_LOCAL_DEVICE_NAME
"
"
)
;
const
PREF_DEPRECATED_DEVICE_NAME
=
"
services
.
sync
.
client
.
name
"
;
class
FxAccountsDevice
{
constructor
(
fxa
)
{
this
.
_fxa
=
fxa
;
}
async
getLocalId
(
)
{
let
data
=
await
this
.
_fxa
.
currentAccountState
.
getUserAccountData
(
)
;
if
(
!
data
)
{
return
null
;
}
const
{
device
}
=
data
;
if
(
await
this
.
_fxa
.
checkDeviceUpdateNeeded
(
device
)
)
{
return
this
.
_fxa
.
_registerOrUpdateDevice
(
data
)
;
}
return
device
.
id
;
}
getDefaultLocalName
(
)
{
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
user
=
env
.
get
(
"
USER
"
)
|
|
env
.
get
(
"
USERNAME
"
)
;
if
(
user
=
=
"
%
USERNAME
%
"
&
&
env
.
get
(
"
USERNAME
"
)
)
{
user
=
env
.
get
(
"
USERNAME
"
)
;
}
let
brand
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
;
let
brandName
;
try
{
brandName
=
brand
.
GetStringFromName
(
"
brandShortName
"
)
;
}
catch
(
O_o
)
{
brandName
=
Services
.
appinfo
.
name
;
}
let
hostname
;
try
{
hostname
=
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
.
myHostName
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
let
system
=
Services
.
sysinfo
.
get
(
"
device
"
)
|
|
hostname
|
|
Cc
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
http
"
]
.
getService
(
Ci
.
nsIHttpProtocolHandler
)
.
oscpu
;
let
syncStrings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
weave
/
locale
/
sync
.
properties
"
)
;
return
syncStrings
.
formatStringFromName
(
"
client
.
name2
"
[
user
brandName
system
]
)
;
}
getLocalName
(
)
{
let
deprecated_value
=
Services
.
prefs
.
getStringPref
(
PREF_DEPRECATED_DEVICE_NAME
"
"
)
;
if
(
deprecated_value
)
{
Services
.
prefs
.
setStringPref
(
PREF_LOCAL_DEVICE_NAME
deprecated_value
)
;
Services
.
prefs
.
clearUserPref
(
PREF_DEPRECATED_DEVICE_NAME
)
;
}
let
name
=
pref_localDeviceName
;
if
(
!
name
)
{
name
=
this
.
getDefaultLocalName
(
)
;
Services
.
prefs
.
setStringPref
(
PREF_LOCAL_DEVICE_NAME
name
)
;
}
return
name
;
}
setLocalName
(
newName
)
{
Services
.
prefs
.
clearUserPref
(
PREF_DEPRECATED_DEVICE_NAME
)
;
Services
.
prefs
.
setStringPref
(
PREF_LOCAL_DEVICE_NAME
newName
)
;
this
.
_fxa
.
updateDeviceRegistration
(
)
.
catch
(
error
=
>
{
log
.
warn
(
"
failed
to
update
fxa
device
registration
"
error
)
;
}
)
;
}
getLocalType
(
)
{
return
DEVICE_TYPE_DESKTOP
;
}
}
var
EXPORTED_SYMBOLS
=
[
"
FxAccountsDevice
"
]
;
