const
{
Observers
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
common
/
observers
.
sys
.
mjs
"
)
;
const
NOTIFICATION_CLICKED_URL
=
"
about
:
firefoxview
#
recentlyclosed
"
;
add_task
(
async
function
test_closetab_notification
(
)
{
const
URL_TO_CLOSE
=
"
about
:
mozilla
"
;
let
payload
=
[
{
urls
:
[
URL_TO_CLOSE
]
sender
:
{
deviceName
:
"
device
-
1
"
}
}
]
;
info
(
"
Test
verify
receiving
a
close
tab
command
will
show
a
notification
"
)
;
setupMockAlertsServiceWithExp
(
{
title
:
"
1
Nightly
tab
closed
"
body
:
"
View
recently
closed
tabs
"
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
URL_TO_CLOSE
)
;
let
tabClosedPromise
=
BrowserTestUtils
.
waitForTabClosing
(
tab
)
;
let
waitForTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
)
;
Observers
.
notify
(
"
fxaccounts
:
commands
:
close
-
uri
"
payload
)
;
Assert
.
ok
(
"
Close
notification
sent
"
)
;
await
tabClosedPromise
;
Assert
.
ok
(
"
Tab
successfully
closed
"
)
;
let
notifTab
=
await
waitForTabPromise
;
Assert
.
equal
(
notifTab
.
linkedBrowser
.
currentURI
.
spec
NOTIFICATION_CLICKED_URL
)
;
BrowserTestUtils
.
removeTab
(
notifTab
)
;
}
)
;
add_task
(
async
function
test_closetab_multiple_urls_notification
(
)
{
const
URLS_TO_CLOSE
=
[
"
about
:
mozilla
"
"
about
:
about
"
]
;
let
payload
=
[
{
urls
:
URLS_TO_CLOSE
sender
:
{
deviceName
:
"
device
-
1
"
}
}
]
;
info
(
"
Test
verify
receiving
multiple
close
tabs
command
will
show
the
proper
notification
"
)
;
setupMockAlertsServiceWithExp
(
{
title
:
"
2
Nightly
tabs
closed
"
body
:
"
View
recently
closed
tabs
"
}
)
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
URLS_TO_CLOSE
[
0
]
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
URLS_TO_CLOSE
[
1
]
)
;
let
tabClosedPromise
=
Promise
.
all
(
[
BrowserTestUtils
.
waitForTabClosing
(
tab1
)
BrowserTestUtils
.
waitForTabClosing
(
tab2
)
]
)
;
let
waitForTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
)
;
Observers
.
notify
(
"
fxaccounts
:
commands
:
close
-
uri
"
payload
)
;
Assert
.
ok
(
"
Close
notification
sent
"
)
;
await
tabClosedPromise
;
Assert
.
ok
(
"
Multiple
tabs
successfully
closed
"
)
;
let
notifTab
=
await
waitForTabPromise
;
Assert
.
equal
(
notifTab
.
linkedBrowser
.
currentURI
.
spec
NOTIFICATION_CLICKED_URL
)
;
BrowserTestUtils
.
removeTab
(
notifTab
)
;
}
)
;
