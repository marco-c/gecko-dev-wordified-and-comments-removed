function
waitForDocLoadComplete
(
aBrowser
=
gBrowser
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
onStateChange
(
webProgress
req
flags
status
)
{
let
docStop
=
Ci
.
nsIWebProgressListener
.
STATE_IS_NETWORK
|
Ci
.
nsIWebProgressListener
.
STATE_STOP
;
info
(
"
Saw
state
"
+
flags
.
toString
(
16
)
+
"
and
status
"
+
status
.
toString
(
16
)
)
;
if
(
(
flags
&
docStop
)
=
=
docStop
&
&
status
!
=
Cr
.
NS_BINDING_ABORTED
)
{
aBrowser
.
removeProgressListener
(
this
)
;
waitForDocLoadComplete
.
listeners
.
delete
(
this
)
;
let
chan
=
req
.
QueryInterface
(
Ci
.
nsIChannel
)
;
info
(
"
Browser
loaded
"
+
chan
.
originalURI
.
spec
)
;
resolve
(
)
;
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIWebProgressListener
Ci
.
nsISupportsWeakReference
]
)
}
;
aBrowser
.
addProgressListener
(
listener
)
;
waitForDocLoadComplete
.
listeners
.
add
(
listener
)
;
info
(
"
Waiting
for
browser
load
"
)
;
}
)
;
}
function
setupMockAlertsService
(
)
{
const
alertsService
=
{
showAlertNotification
:
(
image
title
text
clickable
cookie
clickCallback
)
=
>
{
clickCallback
(
null
"
alertclickcallback
"
null
)
;
}
}
;
const
gBrowserGlue
=
Cc
[
"
mozilla
.
org
/
browser
/
browserglue
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
;
gBrowserGlue
.
observe
(
{
wrappedJSObject
:
alertsService
}
"
browser
-
glue
-
test
"
"
mock
-
alerts
-
service
"
)
;
}
waitForDocLoadComplete
.
listeners
=
new
Set
(
)
;
registerCleanupFunction
(
(
)
=
>
waitForDocLoadComplete
.
listeners
.
clear
(
)
)
;
