"
use
strict
"
;
const
{
FxAccounts
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
sys
.
mjs
"
)
;
const
{
FxAccountsClient
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsClient
.
sys
.
mjs
"
)
;
var
{
AccountState
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
sys
.
mjs
"
)
;
function
promiseNotification
(
topic
)
{
return
new
Promise
(
resolve
=
>
{
let
observe
=
(
)
=
>
{
Services
.
obs
.
removeObserver
(
observe
topic
)
;
resolve
(
)
;
}
;
Services
.
obs
.
addObserver
(
observe
topic
)
;
}
)
;
}
function
MockStorageManager
(
)
{
}
MockStorageManager
.
prototype
=
{
promiseInitialized
:
Promise
.
resolve
(
)
initialize
(
accountData
)
{
this
.
accountData
=
accountData
;
}
finalize
(
)
{
return
Promise
.
resolve
(
)
;
}
getAccountData
(
)
{
return
Promise
.
resolve
(
this
.
accountData
)
;
}
updateAccountData
(
updatedFields
)
{
for
(
let
[
name
value
]
of
Object
.
entries
(
updatedFields
)
)
{
if
(
value
=
=
null
)
{
delete
this
.
accountData
[
name
]
;
}
else
{
this
.
accountData
[
name
]
=
value
;
}
}
return
Promise
.
resolve
(
)
;
}
deleteAccountData
(
)
{
this
.
accountData
=
null
;
return
Promise
.
resolve
(
)
;
}
}
;
function
MockFxAccountsClient
(
)
{
this
.
_email
=
"
nobody
example
.
com
"
;
this
.
_verified
=
false
;
this
.
accountStatus
=
function
(
uid
)
{
return
Promise
.
resolve
(
!
!
uid
&
&
!
this
.
_deletedOnServer
)
;
}
;
this
.
signOut
=
function
(
)
{
return
Promise
.
resolve
(
)
;
}
;
this
.
registerDevice
=
function
(
)
{
return
Promise
.
resolve
(
)
;
}
;
this
.
updateDevice
=
function
(
)
{
return
Promise
.
resolve
(
)
;
}
;
this
.
signOutAndDestroyDevice
=
function
(
)
{
return
Promise
.
resolve
(
)
;
}
;
this
.
getDeviceList
=
function
(
)
{
return
Promise
.
resolve
(
)
;
}
;
FxAccountsClient
.
apply
(
this
)
;
}
MockFxAccountsClient
.
prototype
=
{
}
;
Object
.
setPrototypeOf
(
MockFxAccountsClient
.
prototype
FxAccountsClient
.
prototype
)
;
function
MockFxAccounts
(
)
{
return
new
FxAccounts
(
{
fxAccountsClient
:
new
MockFxAccountsClient
(
)
newAccountState
(
credentials
)
{
let
storage
=
new
MockStorageManager
(
)
;
storage
.
initialize
(
credentials
)
;
return
new
AccountState
(
storage
)
;
}
_getDeviceName
(
)
{
return
"
mock
device
name
"
;
}
fxaPushService
:
{
registerPushEndpoint
(
)
{
return
new
Promise
(
resolve
=
>
{
resolve
(
{
endpoint
:
"
http
:
/
/
mochi
.
test
:
8888
"
}
)
;
}
)
;
}
}
}
)
;
}
async
function
createMockFxA
(
)
{
let
fxa
=
new
MockFxAccounts
(
)
;
let
credentials
=
{
email
:
"
foo
example
.
com
"
uid
:
"
1234
lcip
.
org
"
sessionToken
:
"
dead
"
scopedKeys
:
{
[
SCOPE_OLD_SYNC
]
:
{
kid
:
"
key
id
for
sync
key
"
k
:
"
key
material
for
sync
key
"
kty
:
"
oct
"
}
}
verified
:
true
}
;
await
fxa
.
_internal
.
setSignedInUser
(
credentials
)
;
return
fxa
;
}
add_task
(
async
function
testCacheStorage
(
)
{
let
fxa
=
await
createMockFxA
(
)
;
let
cas
=
fxa
.
_internal
.
currentAccountState
;
let
origPersistCached
=
cas
.
_persistCachedTokens
.
bind
(
cas
)
;
cas
.
_persistCachedTokens
=
function
(
)
{
return
origPersistCached
(
)
.
then
(
(
)
=
>
{
Services
.
obs
.
notifyObservers
(
null
"
testhelper
-
fxa
-
cache
-
persist
-
done
"
)
;
}
)
;
}
;
let
promiseWritten
=
promiseNotification
(
"
testhelper
-
fxa
-
cache
-
persist
-
done
"
)
;
let
tokenData
=
{
token
:
"
token1
"
somethingelse
:
"
something
else
"
}
;
let
scopeArray
=
[
"
foo
"
"
bar
"
]
;
cas
.
setCachedToken
(
scopeArray
tokenData
)
;
deepEqual
(
cas
.
getCachedToken
(
scopeArray
)
tokenData
)
;
deepEqual
(
cas
.
oauthTokens
{
"
bar
|
foo
"
:
tokenData
}
)
;
await
promiseWritten
;
deepEqual
(
cas
.
storageManager
.
accountData
.
oauthTokens
{
"
bar
|
foo
"
:
tokenData
}
)
;
promiseWritten
=
promiseNotification
(
"
testhelper
-
fxa
-
cache
-
persist
-
done
"
)
;
await
cas
.
removeCachedToken
(
"
token1
"
)
;
deepEqual
(
cas
.
oauthTokens
{
}
)
;
await
promiseWritten
;
deepEqual
(
cas
.
storageManager
.
accountData
.
oauthTokens
{
}
)
;
let
storageManager
=
cas
.
storageManager
;
await
fxa
.
signOut
(
true
)
;
deepEqual
(
storageManager
.
accountData
null
)
;
}
)
;
