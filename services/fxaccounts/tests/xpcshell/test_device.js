"
use
strict
"
;
const
{
fxAccounts
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
const
{
PREF_ACCOUNT_ROOT
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
)
;
_
(
"
Misc
tests
for
FxAccounts
.
device
"
)
;
add_test
(
function
test_default_device_name
(
)
{
let
def
=
fxAccounts
.
device
.
_getDefaultLocalName
(
)
;
_
(
"
default
value
is
"
+
def
)
;
ok
(
def
.
length
>
0
)
;
let
hostname
=
Services
.
sysinfo
.
get
(
"
device
"
)
|
|
Cc
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
]
.
getService
(
Ci
.
nsIDNSService
)
.
myHostName
;
_
(
"
hostname
is
"
+
hostname
)
;
ok
(
hostname
.
length
>
0
)
;
ok
(
def
.
includes
(
hostname
)
)
;
let
fallback
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
http
"
]
.
getService
(
Ci
.
nsIHttpProtocolHandler
)
.
oscpu
;
_
(
"
UA
fallback
is
"
+
fallback
)
;
ok
(
fallback
.
length
>
0
)
;
ok
(
!
def
.
includes
(
fallback
)
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_migration
(
)
{
Services
.
prefs
.
clearUserPref
(
"
identity
.
fxaccounts
.
account
.
device
.
name
"
)
;
Services
.
prefs
.
setStringPref
(
"
services
.
sync
.
client
.
name
"
"
my
client
name
"
)
;
equal
(
fxAccounts
.
device
.
getLocalName
(
)
"
my
client
name
"
)
;
equal
(
Services
.
prefs
.
getStringPref
(
"
identity
.
fxaccounts
.
account
.
device
.
name
"
)
"
my
client
name
"
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
"
services
.
sync
.
client
.
name
"
)
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_migration_set_before_get
(
)
{
Services
.
prefs
.
setStringPref
(
"
services
.
sync
.
client
.
name
"
"
old
client
name
"
)
;
fxAccounts
.
device
.
setLocalName
(
"
new
client
name
"
)
;
equal
(
fxAccounts
.
device
.
getLocalName
(
)
"
new
client
name
"
)
;
run_next_test
(
)
;
}
)
;
add_task
(
async
function
test_reset
(
)
{
const
testPref
=
PREF_ACCOUNT_ROOT
+
"
test
-
pref
"
;
Services
.
prefs
.
setStringPref
(
testPref
"
whatever
"
)
;
let
credentials
=
{
email
:
"
foo
example
.
com
"
uid
:
"
1234
lcip
.
org
"
assertion
:
"
foobar
"
sessionToken
:
"
dead
"
kSync
:
"
beef
"
kXCS
:
"
cafe
"
kExtSync
:
"
bacon
"
kExtKbHash
:
"
cheese
"
verified
:
true
}
;
await
fxAccounts
.
setSignedInUser
(
credentials
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
testPref
)
)
;
const
namePref
=
PREF_ACCOUNT_ROOT
+
"
device
.
name
"
;
ok
(
Services
.
prefs
.
prefHasUserValue
(
namePref
)
)
;
await
fxAccounts
.
signOut
(
true
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
namePref
)
)
;
}
)
;
