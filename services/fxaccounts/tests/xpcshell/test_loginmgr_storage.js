"
use
strict
"
;
Services
.
prefs
.
setStringPref
(
"
identity
.
fxaccounts
.
loglevel
"
"
Trace
"
)
;
const
{
FxAccounts
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
sys
.
mjs
"
)
;
const
{
FXA_PWDMGR_HOST
FXA_PWDMGR_REALM
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
sys
.
mjs
"
)
;
var
{
LoginManagerStorage
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsStorage
.
sys
.
mjs
"
)
;
var
isLoggedIn
=
true
;
LoginManagerStorage
.
prototype
.
__defineGetter__
(
"
_isLoggedIn
"
(
)
=
>
isLoggedIn
)
;
function
setLoginMgrLoggedInState
(
loggedIn
)
{
isLoggedIn
=
loggedIn
;
}
initTestLogging
(
"
Trace
"
)
;
async
function
getLoginMgrData
(
)
{
let
logins
=
await
Services
.
logins
.
searchLoginsAsync
(
{
origin
:
FXA_PWDMGR_HOST
httpRealm
:
FXA_PWDMGR_REALM
}
)
;
if
(
!
logins
.
length
)
{
return
null
;
}
Assert
.
equal
(
logins
.
length
1
"
only
1
login
available
"
)
;
return
logins
[
0
]
;
}
function
createFxAccounts
(
)
{
return
new
FxAccounts
(
{
_fxAccountsClient
:
{
async
registerDevice
(
)
{
return
{
id
:
"
deviceAAAAAA
"
}
;
}
async
recoveryEmailStatus
(
)
{
return
{
verified
:
true
}
;
}
async
signOut
(
)
{
}
}
updateDeviceRegistration
(
)
{
}
_getDeviceName
(
)
{
return
"
mock
device
name
"
;
}
observerPreloads
:
[
]
fxaPushService
:
{
async
registerPushEndpoint
(
)
{
return
{
endpoint
:
"
http
:
/
/
mochi
.
test
:
8888
"
getKey
(
)
{
return
null
;
}
}
;
}
async
unsubscribe
(
)
{
return
true
;
}
}
}
)
;
}
add_task
(
async
function
test_simple
(
)
{
let
fxa
=
createFxAccounts
(
)
;
let
creds
=
{
uid
:
"
abcd
"
email
:
"
test
example
.
com
"
sessionToken
:
"
sessionToken
"
scopedKeys
:
{
.
.
.
MOCK_ACCOUNT_KEYS
.
scopedKeys
}
verified
:
true
}
;
await
fxa
.
_internal
.
setSignedInUser
(
creds
)
;
let
path
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
signedInUser
.
json
"
)
;
let
data
=
await
IOUtils
.
readJSON
(
path
)
;
Assert
.
strictEqual
(
data
.
accountData
.
email
creds
.
email
"
correct
email
in
the
clear
text
"
)
;
Assert
.
strictEqual
(
data
.
accountData
.
sessionToken
creds
.
sessionToken
"
correct
sessionToken
in
the
clear
text
"
)
;
Assert
.
strictEqual
(
data
.
accountData
.
verified
creds
.
verified
"
correct
verified
flag
"
)
;
Assert
.
ok
(
!
(
"
scopedKeys
"
in
data
.
accountData
)
"
scopedKeys
not
stored
in
clear
text
"
)
;
let
login
=
await
getLoginMgrData
(
)
;
Assert
.
strictEqual
(
login
.
username
creds
.
uid
"
uid
used
for
username
"
)
;
let
loginData
=
JSON
.
parse
(
login
.
password
)
;
Assert
.
strictEqual
(
loginData
.
version
data
.
version
"
same
version
flag
in
both
places
"
)
;
Assert
.
deepEqual
(
loginData
.
accountData
.
scopedKeys
creds
.
scopedKeys
"
correct
scoped
keys
in
the
login
mgr
"
)
;
Assert
.
ok
(
!
(
"
email
"
in
loginData
)
"
email
not
stored
in
the
login
mgr
json
"
)
;
Assert
.
ok
(
!
(
"
sessionToken
"
in
loginData
)
"
sessionToken
not
stored
in
the
login
mgr
json
"
)
;
Assert
.
ok
(
!
(
"
verified
"
in
loginData
)
"
verified
not
stored
in
the
login
mgr
json
"
)
;
await
fxa
.
signOut
(
true
)
;
Assert
.
strictEqual
(
await
getLoginMgrData
(
)
null
"
login
mgr
data
deleted
on
logout
"
)
;
}
)
;
add_task
(
async
function
test_MPLocked
(
)
{
let
fxa
=
createFxAccounts
(
)
;
let
creds
=
{
uid
:
"
abcd
"
email
:
"
test
example
.
com
"
sessionToken
:
"
sessionToken
"
scopedKeys
:
{
.
.
.
MOCK_ACCOUNT_KEYS
.
scopedKeys
}
verified
:
true
}
;
Assert
.
strictEqual
(
await
getLoginMgrData
(
)
null
"
no
login
mgr
at
the
start
"
)
;
setLoginMgrLoggedInState
(
false
)
;
await
fxa
.
_internal
.
setSignedInUser
(
creds
)
;
let
path
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
signedInUser
.
json
"
)
;
let
data
=
await
IOUtils
.
readJSON
(
path
)
;
Assert
.
strictEqual
(
data
.
accountData
.
email
creds
.
email
"
correct
email
in
the
clear
text
"
)
;
Assert
.
strictEqual
(
data
.
accountData
.
sessionToken
creds
.
sessionToken
"
correct
sessionToken
in
the
clear
text
"
)
;
Assert
.
strictEqual
(
data
.
accountData
.
verified
creds
.
verified
"
correct
verified
flag
"
)
;
Assert
.
ok
(
!
(
"
scopedKeys
"
in
data
.
accountData
)
"
scopedKeys
not
stored
in
clear
text
"
)
;
Assert
.
strictEqual
(
await
getLoginMgrData
(
)
null
"
login
mgr
data
doesn
'
t
exist
"
)
;
await
fxa
.
signOut
(
true
)
;
}
)
;
add_task
(
async
function
test_consistentWithMPEdgeCases
(
)
{
setLoginMgrLoggedInState
(
true
)
;
let
fxa
=
createFxAccounts
(
)
;
let
creds1
=
{
uid
:
"
uid1
"
email
:
"
test
example
.
com
"
sessionToken
:
"
sessionToken
"
scopedKeys
:
{
[
SCOPE_OLD_SYNC
]
:
{
kid
:
"
key
id
1
"
k
:
"
key
material
1
"
kty
:
"
oct
"
}
}
verified
:
true
}
;
let
creds2
=
{
uid
:
"
uid2
"
email
:
"
test2
example
.
com
"
sessionToken
:
"
sessionToken2
"
[
SCOPE_OLD_SYNC
]
:
{
kid
:
"
key
id
2
"
k
:
"
key
material
2
"
kty
:
"
oct
"
}
verified
:
false
}
;
await
fxa
.
_internal
.
setSignedInUser
(
creds1
)
;
setLoginMgrLoggedInState
(
false
)
;
await
fxa
.
_internal
.
setSignedInUser
(
creds2
)
;
let
login
=
await
getLoginMgrData
(
)
;
Assert
.
strictEqual
(
login
.
username
creds1
.
uid
)
;
Assert
.
deepEqual
(
JSON
.
parse
(
login
.
password
)
.
accountData
.
scopedKeys
creds1
.
scopedKeys
"
stale
data
still
in
login
mgr
"
)
;
setLoginMgrLoggedInState
(
true
)
;
fxa
=
createFxAccounts
(
)
;
let
accountData
=
await
fxa
.
getSignedInUser
(
)
;
Assert
.
strictEqual
(
accountData
.
email
creds2
.
email
)
;
Assert
.
strictEqual
(
accountData
.
scopedKeys
undefined
"
stale
scopedKey
wasn
'
t
used
"
)
;
await
fxa
.
signOut
(
true
)
;
}
)
;
add_task
(
async
function
test_uidMigration
(
)
{
setLoginMgrLoggedInState
(
true
)
;
Assert
.
strictEqual
(
await
getLoginMgrData
(
)
null
"
expect
no
logins
at
the
start
"
)
;
let
contents
=
{
scopedKeys
:
{
.
.
.
MOCK_ACCOUNT_KEYS
.
scopedKeys
}
}
;
let
loginInfo
=
new
Components
.
Constructor
(
"
mozilla
.
org
/
login
-
manager
/
loginInfo
;
1
"
Ci
.
nsILoginInfo
"
init
"
)
;
let
login
=
new
loginInfo
(
FXA_PWDMGR_HOST
null
FXA_PWDMGR_REALM
"
foo
bar
.
com
"
JSON
.
stringify
(
contents
)
"
"
"
"
)
;
await
Services
.
logins
.
addLoginAsync
(
login
)
;
let
storage
=
new
LoginManagerStorage
(
)
;
let
got
=
await
storage
.
get
(
"
uid
"
"
foo
bar
.
com
"
)
;
Assert
.
deepEqual
(
got
contents
)
;
}
)
;
