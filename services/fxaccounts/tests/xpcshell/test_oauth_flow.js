"
use
strict
"
;
const
{
FxAccountsOAuth
ERROR_INVALID_SCOPES
ERROR_INVALID_STATE
ERROR_SYNC_SCOPE_NOT_GRANTED
ERROR_NO_KEYS_JWE
ERROR_OAUTH_FLOW_ABANDONED
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsOAuth
.
sys
.
mjs
"
)
;
const
{
SCOPE_PROFILE
FX_OAUTH_CLIENT_ID
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
jwcrypto
:
"
resource
:
/
/
services
-
crypto
/
jwcrypto
.
sys
.
mjs
"
}
)
;
initTestLogging
(
"
Trace
"
)
;
add_task
(
function
test_begin_oauth_flow
(
)
{
const
oauth
=
new
FxAccountsOAuth
(
)
;
add_task
(
async
function
test_begin_oauth_flow_invalid_scopes
(
)
{
try
{
await
oauth
.
beginOAuthFlow
(
"
foo
fi
fum
"
"
foo
"
)
;
Assert
.
fail
(
"
Should
have
thrown
error
scopes
must
be
an
array
"
)
;
}
catch
(
e
)
{
Assert
.
equal
(
e
.
message
ERROR_INVALID_SCOPES
)
;
}
try
{
await
oauth
.
beginOAuthFlow
(
[
"
not
-
a
-
real
-
scope
"
SCOPE_PROFILE
]
)
;
Assert
.
fail
(
"
Should
have
thrown
an
error
must
use
a
valid
scope
"
)
;
}
catch
(
e
)
{
Assert
.
equal
(
e
.
message
ERROR_INVALID_SCOPES
)
;
}
}
)
;
add_task
(
async
function
test_begin_oauth_flow_ok
(
)
{
const
scopes
=
[
SCOPE_PROFILE
SCOPE_OLD_SYNC
]
;
const
queryParams
=
await
oauth
.
beginOAuthFlow
(
scopes
)
;
Assert
.
equal
(
queryParams
.
client_id
FX_OAUTH_CLIENT_ID
)
;
Assert
.
equal
(
queryParams
.
action
"
email
"
)
;
Assert
.
equal
(
queryParams
.
response_type
"
code
"
)
;
Assert
.
equal
(
queryParams
.
access_type
"
offline
"
)
;
Assert
.
equal
(
queryParams
.
scope
[
SCOPE_PROFILE
SCOPE_OLD_SYNC
]
.
join
(
"
"
)
)
;
const
state
=
queryParams
.
state
;
ChromeUtils
.
base64URLDecode
(
state
{
padding
:
"
reject
"
}
)
;
const
code_challenge
=
queryParams
.
code_challenge
;
Assert
.
equal
(
queryParams
.
code_challenge_method
"
S256
"
)
;
const
oauthFlow
=
oauth
.
getFlow
(
state
)
;
const
codeVerifierB64
=
oauthFlow
.
verifier
;
const
expectedChallenge
=
await
crypto
.
subtle
.
digest
(
"
SHA
-
256
"
new
TextEncoder
(
)
.
encode
(
codeVerifierB64
)
)
;
const
expectedChallengeB64
=
ChromeUtils
.
base64URLEncode
(
expectedChallenge
{
pad
:
false
}
)
;
Assert
.
equal
(
expectedChallengeB64
code_challenge
)
;
const
keysJwk
=
queryParams
.
keys_jwk
;
const
decodedKeysJwk
=
JSON
.
parse
(
new
TextDecoder
(
)
.
decode
(
ChromeUtils
.
base64URLDecode
(
keysJwk
{
padding
:
"
reject
"
}
)
)
)
;
const
plaintext
=
"
text
to
be
encrypted
and
decrypted
!
"
;
delete
decodedKeysJwk
.
key_ops
;
const
jwe
=
await
jwcrypto
.
generateJWE
(
decodedKeysJwk
new
TextEncoder
(
)
.
encode
(
plaintext
)
)
;
const
privateKey
=
oauthFlow
.
key
;
const
decrypted
=
await
jwcrypto
.
decryptJWE
(
jwe
privateKey
)
;
Assert
.
equal
(
new
TextDecoder
(
)
.
decode
(
decrypted
)
plaintext
)
;
Assert
.
deepEqual
(
oauthFlow
.
requestedScopes
scopes
.
join
(
"
"
)
)
;
}
)
;
}
)
;
add_task
(
function
test_complete_oauth_flow
(
)
{
add_task
(
async
function
test_invalid_state
(
)
{
const
oauth
=
new
FxAccountsOAuth
(
)
;
const
code
=
"
foo
"
;
const
state
=
"
bar
"
;
try
{
await
oauth
.
completeOAuthFlow
(
code
state
)
;
Assert
.
fail
(
"
Should
have
thrown
an
error
"
)
;
}
catch
(
err
)
{
Assert
.
equal
(
err
.
message
ERROR_INVALID_STATE
)
;
}
}
)
;
add_task
(
async
function
test_sync_scope_not_authorized
(
)
{
const
fxaClient
=
{
oauthToken
:
(
)
=
>
Promise
.
resolve
(
{
access_token
:
"
access_token
"
refresh_token
:
"
refresh_token
"
scope
:
SCOPE_PROFILE
}
)
}
;
const
oauth
=
new
FxAccountsOAuth
(
fxaClient
)
;
const
scopes
=
[
SCOPE_PROFILE
SCOPE_OLD_SYNC
]
;
const
queryParams
=
await
oauth
.
beginOAuthFlow
(
scopes
)
;
try
{
await
oauth
.
completeOAuthFlow
(
"
foo
"
queryParams
.
state
)
;
Assert
.
fail
(
"
Should
have
thrown
an
error
because
the
sync
scope
was
not
authorized
"
)
;
}
catch
(
err
)
{
Assert
.
equal
(
err
.
message
ERROR_SYNC_SCOPE_NOT_GRANTED
)
;
}
}
)
;
add_task
(
async
function
test_jwe_not_returned
(
)
{
const
scopes
=
[
SCOPE_PROFILE
SCOPE_OLD_SYNC
]
;
const
fxaClient
=
{
oauthToken
:
(
)
=
>
Promise
.
resolve
(
{
access_token
:
"
access_token
"
refresh_token
:
"
refresh_token
"
scope
:
scopes
.
join
(
"
"
)
}
)
}
;
const
oauth
=
new
FxAccountsOAuth
(
fxaClient
)
;
const
queryParams
=
await
oauth
.
beginOAuthFlow
(
scopes
)
;
try
{
await
oauth
.
completeOAuthFlow
(
"
foo
"
queryParams
.
state
)
;
Assert
.
fail
(
"
Should
have
thrown
an
error
because
we
didn
'
t
get
back
a
keys_nwe
"
)
;
}
catch
(
err
)
{
Assert
.
equal
(
err
.
message
ERROR_NO_KEYS_JWE
)
;
}
}
)
;
add_task
(
async
function
test_complete_oauth_ok
(
)
{
const
scopes
=
[
SCOPE_PROFILE
SCOPE_OLD_SYNC
]
;
const
oauthCode
=
"
fake
oauth
code
"
;
const
plainTextScopedKeys
=
{
kid
:
"
fake
key
id
"
k
:
"
fake
key
"
kty
:
"
oct
"
}
;
const
fakeAccessToken
=
"
fake
access
token
"
;
const
fakeRefreshToken
=
"
fake
refresh
token
"
;
const
fxaClient
=
{
}
;
const
oauth
=
new
FxAccountsOAuth
(
fxaClient
)
;
const
queryParams
=
await
oauth
.
beginOAuthFlow
(
scopes
)
;
const
keysJwk
=
queryParams
.
keys_jwk
;
const
decodedKeysJwk
=
JSON
.
parse
(
new
TextDecoder
(
)
.
decode
(
ChromeUtils
.
base64URLDecode
(
keysJwk
{
padding
:
"
reject
"
}
)
)
)
;
delete
decodedKeysJwk
.
key_ops
;
const
jwe
=
await
jwcrypto
.
generateJWE
(
decodedKeysJwk
new
TextEncoder
(
)
.
encode
(
JSON
.
stringify
(
plainTextScopedKeys
)
)
)
;
const
storedVerifier
=
oauth
.
getFlow
(
queryParams
.
state
)
.
verifier
;
let
callCount
=
0
;
let
slowResolve
;
const
resolveFn
=
(
payload
resolve
)
=
>
{
if
(
callCount
=
=
=
1
)
{
resolve
(
payload
)
;
}
else
{
callCount
+
=
1
;
slowResolve
=
(
)
=
>
resolve
(
payload
)
;
}
}
;
fxaClient
.
oauthToken
=
(
code
verifier
clientId
)
=
>
{
Assert
.
equal
(
code
oauthCode
)
;
Assert
.
equal
(
verifier
storedVerifier
)
;
Assert
.
equal
(
clientId
queryParams
.
client_id
)
;
const
response
=
{
access_token
:
fakeAccessToken
refresh_token
:
fakeRefreshToken
scope
:
scopes
.
join
(
"
"
)
keys_jwe
:
jwe
}
;
return
new
Promise
(
resolve
=
>
{
resolveFn
(
response
resolve
)
;
}
)
;
}
;
const
firstCompleteOAuthFlow
=
oauth
.
completeOAuthFlow
(
oauthCode
queryParams
.
state
)
.
then
(
res
=
>
{
slowResolve
(
)
;
return
res
;
}
)
;
const
secondCompleteOAuthFlow
=
oauth
.
completeOAuthFlow
(
oauthCode
queryParams
.
state
)
.
then
(
res
=
>
{
slowResolve
(
)
;
return
res
;
}
)
;
const
{
accessToken
refreshToken
scopedKeys
}
=
await
Promise
.
allSettled
(
[
firstCompleteOAuthFlow
secondCompleteOAuthFlow
]
)
.
then
(
results
=
>
{
let
fast
;
let
slow
;
for
(
const
result
of
results
)
{
if
(
result
.
status
=
=
=
"
fulfilled
"
)
{
fast
=
result
.
value
;
}
else
{
slow
=
result
.
reason
;
}
}
Assert
.
equal
(
slow
.
message
ERROR_OAUTH_FLOW_ABANDONED
)
;
return
fast
;
}
)
;
Assert
.
equal
(
accessToken
fakeAccessToken
)
;
Assert
.
equal
(
refreshToken
fakeRefreshToken
)
;
Assert
.
deepEqual
(
scopedKeys
plainTextScopedKeys
)
;
Assert
.
equal
(
oauth
.
numOfFlows
(
)
0
)
;
}
)
;
}
)
;
