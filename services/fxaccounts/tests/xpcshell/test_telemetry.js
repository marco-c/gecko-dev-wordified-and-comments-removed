"
use
strict
"
;
const
{
getFxAccountsSingleton
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
const
fxAccounts
=
getFxAccountsSingleton
(
)
;
_
(
"
Misc
tests
for
FxAccounts
.
telemetry
"
)
;
const
MOCK_HASHED_UID
=
"
00112233445566778899aabbccddeeff
"
;
const
MOCK_DEVICE_ID
=
"
ffeeddccbbaa99887766554433221100
"
;
add_task
(
function
test_sanitized_uid
(
)
{
Services
.
prefs
.
deleteBranch
(
"
identity
.
fxaccounts
.
account
.
telemetry
.
sanitized_uid
"
)
;
Assert
.
equal
(
fxAccounts
.
telemetry
.
getSanitizedUID
(
)
null
)
;
fxAccounts
.
telemetry
.
_setHashedUID
(
MOCK_HASHED_UID
)
;
Assert
.
equal
(
fxAccounts
.
telemetry
.
getSanitizedUID
(
)
MOCK_HASHED_UID
)
;
fxAccounts
.
telemetry
.
_setHashedUID
(
"
"
)
;
Assert
.
equal
(
fxAccounts
.
telemetry
.
getSanitizedUID
(
)
null
)
;
}
)
;
add_task
(
function
test_sanitize_device_id
(
)
{
Services
.
prefs
.
deleteBranch
(
"
identity
.
fxaccounts
.
account
.
telemetry
.
sanitized_uid
"
)
;
Assert
.
equal
(
fxAccounts
.
telemetry
.
sanitizeDeviceId
(
MOCK_DEVICE_ID
)
null
)
;
fxAccounts
.
telemetry
.
_setHashedUID
(
MOCK_HASHED_UID
)
;
Assert
.
equal
(
fxAccounts
.
telemetry
.
sanitizeDeviceId
(
MOCK_DEVICE_ID
)
"
dd7c845006df9baa1c6d756926519c8ce12f91230e11b6057bf8ec65f9b55c1a
"
)
;
fxAccounts
.
telemetry
.
_setHashedUID
(
"
"
)
;
Assert
.
equal
(
fxAccounts
.
telemetry
.
sanitizeDeviceId
(
MOCK_DEVICE_ID
)
null
)
;
}
)
;
