"
use
strict
"
;
const
{
FxAccountsStorageManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsStorage
.
jsm
"
)
;
const
{
DATA_FORMAT_VERSION
log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
)
;
initTestLogging
(
"
Trace
"
)
;
log
.
level
=
Log
.
Level
.
Trace
;
const
DEVICE_REGISTRATION_VERSION
=
42
;
function
MockedPlainStorage
(
accountData
)
{
let
data
=
null
;
if
(
accountData
)
{
data
=
{
version
:
DATA_FORMAT_VERSION
accountData
}
;
}
this
.
data
=
data
;
this
.
numReads
=
0
;
}
MockedPlainStorage
.
prototype
=
{
async
get
(
)
{
this
.
numReads
+
+
;
Assert
.
equal
(
this
.
numReads
1
"
should
only
ever
be
1
read
of
acct
data
"
)
;
return
this
.
data
;
}
async
set
(
data
)
{
this
.
data
=
data
;
}
}
;
function
MockedSecureStorage
(
accountData
)
{
let
data
=
null
;
if
(
accountData
)
{
data
=
{
version
:
DATA_FORMAT_VERSION
accountData
}
;
}
this
.
data
=
data
;
this
.
numReads
=
0
;
}
MockedSecureStorage
.
prototype
=
{
fetchCount
:
0
locked
:
false
STORAGE_LOCKED
:
function
(
)
{
}
async
get
(
uid
email
)
{
this
.
fetchCount
+
+
;
if
(
this
.
locked
)
{
throw
new
this
.
STORAGE_LOCKED
(
)
;
}
this
.
numReads
+
+
;
Assert
.
equal
(
this
.
numReads
1
"
should
only
ever
be
1
read
of
unlocked
data
"
)
;
return
this
.
data
;
}
async
set
(
uid
contents
)
{
this
.
data
=
contents
;
}
}
;
function
add_storage_task
(
testFunction
)
{
add_task
(
async
function
(
)
{
print
(
"
Starting
test
with
secure
storage
manager
"
)
;
await
testFunction
(
new
FxAccountsStorageManager
(
)
)
;
}
)
;
add_task
(
async
function
(
)
{
print
(
"
Starting
test
with
simple
storage
manager
"
)
;
await
testFunction
(
new
FxAccountsStorageManager
(
{
useSecure
:
false
}
)
)
;
}
)
;
}
add_storage_task
(
async
function
checkInitializedEmpty
(
sm
)
{
if
(
sm
.
secureStorage
)
{
sm
.
secureStorage
=
new
MockedSecureStorage
(
null
)
;
}
await
sm
.
initialize
(
)
;
Assert
.
strictEqual
(
await
sm
.
getAccountData
(
)
null
)
;
await
Assert
.
rejects
(
sm
.
updateAccountData
(
{
kXCS
:
"
kXCS
"
}
)
/
No
user
is
logged
in
/
)
;
}
)
;
add_storage_task
(
async
function
checkNewUser
(
sm
)
{
let
initialAccountData
=
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
kXCS
:
"
kXCS
"
device
:
{
id
:
"
device
id
"
}
}
;
sm
.
plainStorage
=
new
MockedPlainStorage
(
)
;
if
(
sm
.
secureStorage
)
{
sm
.
secureStorage
=
new
MockedSecureStorage
(
null
)
;
}
await
sm
.
initialize
(
initialAccountData
)
;
let
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
equal
(
accountData
.
uid
initialAccountData
.
uid
)
;
Assert
.
equal
(
accountData
.
email
initialAccountData
.
email
)
;
Assert
.
equal
(
accountData
.
kXCS
initialAccountData
.
kXCS
)
;
Assert
.
deepEqual
(
accountData
.
device
initialAccountData
.
device
)
;
Assert
.
equal
(
sm
.
plainStorage
.
data
.
accountData
.
uid
initialAccountData
.
uid
)
;
Assert
.
equal
(
sm
.
plainStorage
.
data
.
accountData
.
email
initialAccountData
.
email
)
;
Assert
.
deepEqual
(
sm
.
plainStorage
.
data
.
accountData
.
device
initialAccountData
.
device
)
;
if
(
sm
.
secureStorage
)
{
Assert
.
equal
(
sm
.
secureStorage
.
data
.
accountData
.
kXCS
initialAccountData
.
kXCS
)
;
}
else
{
Assert
.
equal
(
sm
.
plainStorage
.
data
.
accountData
.
kXCS
initialAccountData
.
kXCS
)
;
}
}
)
;
add_storage_task
(
async
function
checkEverythingRead
(
sm
)
{
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
device
:
{
id
:
"
wibble
"
registrationVersion
:
null
}
}
)
;
if
(
sm
.
secureStorage
)
{
sm
.
secureStorage
=
new
MockedSecureStorage
(
null
)
;
}
await
sm
.
initialize
(
)
;
let
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
ok
(
accountData
"
read
account
data
"
)
;
Assert
.
equal
(
accountData
.
uid
"
uid
"
)
;
Assert
.
equal
(
accountData
.
email
"
someone
somewhere
.
com
"
)
;
Assert
.
deepEqual
(
accountData
.
device
{
id
:
"
wibble
"
registrationVersion
:
null
}
)
;
await
sm
.
updateAccountData
(
{
verified
:
true
kSync
:
"
kSync
"
kXCS
:
"
kXCS
"
kExtSync
:
"
kExtSync
"
kExtKbHash
:
"
kExtKbHash
"
device
:
{
id
:
"
wibble
"
registrationVersion
:
DEVICE_REGISTRATION_VERSION
}
}
)
;
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
equal
(
accountData
.
kSync
"
kSync
"
)
;
Assert
.
equal
(
accountData
.
kXCS
"
kXCS
"
)
;
Assert
.
equal
(
accountData
.
kExtSync
"
kExtSync
"
)
;
Assert
.
equal
(
accountData
.
kExtKbHash
"
kExtKbHash
"
)
;
Assert
.
deepEqual
(
accountData
.
device
{
id
:
"
wibble
"
registrationVersion
:
DEVICE_REGISTRATION_VERSION
}
)
;
await
sm
.
_promiseStorageComplete
;
Assert
.
equal
(
sm
.
plainStorage
.
data
.
accountData
.
verified
true
)
;
Assert
.
deepEqual
(
sm
.
plainStorage
.
data
.
accountData
.
device
{
id
:
"
wibble
"
registrationVersion
:
DEVICE_REGISTRATION_VERSION
}
)
;
if
(
sm
.
secureStorage
)
{
Assert
.
equal
(
sm
.
secureStorage
.
data
.
accountData
.
kExtKbHash
"
kExtKbHash
"
)
;
Assert
.
equal
(
sm
.
secureStorage
.
data
.
accountData
.
kExtSync
"
kExtSync
"
)
;
Assert
.
equal
(
sm
.
secureStorage
.
data
.
accountData
.
kXCS
"
kXCS
"
)
;
Assert
.
equal
(
sm
.
secureStorage
.
data
.
accountData
.
kSync
"
kSync
"
)
;
}
else
{
Assert
.
equal
(
sm
.
plainStorage
.
data
.
accountData
.
kExtKbHash
"
kExtKbHash
"
)
;
Assert
.
equal
(
sm
.
plainStorage
.
data
.
accountData
.
kExtSync
"
kExtSync
"
)
;
Assert
.
equal
(
sm
.
plainStorage
.
data
.
accountData
.
kXCS
"
kXCS
"
)
;
Assert
.
equal
(
sm
.
plainStorage
.
data
.
accountData
.
kSync
"
kSync
"
)
;
}
}
)
;
add_storage_task
(
async
function
checkInvalidUpdates
(
sm
)
{
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
if
(
sm
.
secureStorage
)
{
sm
.
secureStorage
=
new
MockedSecureStorage
(
null
)
;
}
await
sm
.
initialize
(
)
;
await
Assert
.
rejects
(
sm
.
updateAccountData
(
{
uid
:
"
another
"
}
)
/
Can
'
t
change
uid
/
)
;
}
)
;
add_storage_task
(
async
function
checkNullUpdatesRemovedUnlocked
(
sm
)
{
if
(
sm
.
secureStorage
)
{
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
sm
.
secureStorage
=
new
MockedSecureStorage
(
{
kSync
:
"
kSync
"
kXCS
:
"
kXCS
"
kExtSync
:
"
kExtSync
"
kExtKbHash
:
"
kExtKbHash
"
}
)
;
}
else
{
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
kSync
:
"
kSync
"
kXCS
:
"
kXCS
"
kExtSync
:
"
kExtSync
"
kExtKbHash
:
"
kExtKbHash
"
}
)
;
}
await
sm
.
initialize
(
)
;
await
sm
.
updateAccountData
(
{
kXCS
:
null
}
)
;
let
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
ok
(
!
accountData
.
kXCS
)
;
Assert
.
equal
(
accountData
.
kSync
"
kSync
"
)
;
}
)
;
add_storage_task
(
async
function
checkNullRemovesUnlistedFields
(
sm
)
{
if
(
sm
.
secureStorage
)
{
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
sm
.
secureStorage
=
new
MockedSecureStorage
(
{
kA
:
"
kA
"
kb
:
"
kB
"
}
)
;
}
else
{
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
kA
:
"
kA
"
kb
:
"
kB
"
}
)
;
}
await
sm
.
initialize
(
)
;
await
sm
.
updateAccountData
(
{
kA
:
null
kB
:
null
}
)
;
let
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
ok
(
!
accountData
.
kA
)
;
Assert
.
ok
(
!
accountData
.
kB
)
;
}
)
;
add_storage_task
(
async
function
checkDelete
(
sm
)
{
if
(
sm
.
secureStorage
)
{
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
sm
.
secureStorage
=
new
MockedSecureStorage
(
{
kSync
:
"
kSync
"
kXCS
:
"
kXCS
"
kExtSync
:
"
kExtSync
"
kExtKbHash
:
"
kExtKbHash
"
}
)
;
}
else
{
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
kSync
:
"
kSync
"
kXCS
:
"
kXCS
"
kExtSync
:
"
kExtSync
"
kExtKbHash
:
"
kExtKbHash
"
}
)
;
}
await
sm
.
initialize
(
)
;
await
sm
.
deleteAccountData
(
)
;
Assert
.
equal
(
sm
.
plainStorage
.
data
null
)
;
if
(
sm
.
secureStorage
)
{
Assert
.
equal
(
sm
.
secureStorage
.
data
null
)
;
}
Assert
.
equal
(
await
sm
.
getAccountData
(
)
null
)
;
}
)
;
add_task
(
async
function
checkNullUpdatesRemovedLocked
(
)
{
let
sm
=
new
FxAccountsStorageManager
(
)
;
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
sm
.
secureStorage
=
new
MockedSecureStorage
(
{
kSync
:
"
kSync
"
kXCS
:
"
kXCS
"
kExtSync
:
"
kExtSync
"
kExtKbHash
:
"
kExtKbHash
"
}
)
;
sm
.
secureStorage
.
locked
=
true
;
await
sm
.
initialize
(
)
;
await
sm
.
updateAccountData
(
{
kSync
:
null
}
)
;
let
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
ok
(
!
accountData
.
kSync
)
;
Assert
.
ok
(
!
accountData
.
kXCS
)
;
sm
.
secureStorage
.
locked
=
false
;
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
ok
(
!
accountData
.
kSync
)
;
Assert
.
equal
(
accountData
.
kXCS
"
kXCS
"
)
;
Assert
.
strictEqual
(
sm
.
secureStorage
.
data
.
accountData
.
kSync
undefined
)
;
Assert
.
strictEqual
(
sm
.
secureStorage
.
data
.
accountData
.
kXCS
"
kXCS
"
)
;
}
)
;
add_task
(
async
function
checkEverythingReadSecure
(
)
{
let
sm
=
new
FxAccountsStorageManager
(
)
;
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
sm
.
secureStorage
=
new
MockedSecureStorage
(
{
kXCS
:
"
kXCS
"
}
)
;
await
sm
.
initialize
(
)
;
let
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
ok
(
accountData
"
read
account
data
"
)
;
Assert
.
equal
(
accountData
.
uid
"
uid
"
)
;
Assert
.
equal
(
accountData
.
email
"
someone
somewhere
.
com
"
)
;
Assert
.
equal
(
accountData
.
kXCS
"
kXCS
"
)
;
}
)
;
add_task
(
async
function
checkMemoryFieldsNotReturnedByDefault
(
)
{
let
sm
=
new
FxAccountsStorageManager
(
)
;
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
sm
.
secureStorage
=
new
MockedSecureStorage
(
{
kXCS
:
"
kXCS
"
}
)
;
await
sm
.
initialize
(
)
;
await
sm
.
updateAccountData
(
{
keyPair
:
"
the
keypair
value
"
}
)
;
let
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
strictEqual
(
accountData
.
keyPair
undefined
)
;
accountData
=
await
sm
.
getAccountData
(
"
keyPair
"
)
;
Assert
.
strictEqual
(
accountData
.
keyPair
"
the
keypair
value
"
)
;
}
)
;
add_task
(
async
function
checkExplicitGet
(
)
{
let
sm
=
new
FxAccountsStorageManager
(
)
;
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
sm
.
secureStorage
=
new
MockedSecureStorage
(
{
kXCS
:
"
kXCS
"
}
)
;
await
sm
.
initialize
(
)
;
let
accountData
=
await
sm
.
getAccountData
(
[
"
uid
"
"
kXCS
"
]
)
;
Assert
.
ok
(
accountData
"
read
account
data
"
)
;
Assert
.
equal
(
accountData
.
uid
"
uid
"
)
;
Assert
.
equal
(
accountData
.
kXCS
"
kXCS
"
)
;
Assert
.
strictEqual
(
accountData
.
email
undefined
)
;
}
)
;
add_task
(
async
function
checkExplicitGetNoSecureRead
(
)
{
let
sm
=
new
FxAccountsStorageManager
(
)
;
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
sm
.
secureStorage
=
new
MockedSecureStorage
(
{
kXCS
:
"
kXCS
"
}
)
;
await
sm
.
initialize
(
)
;
Assert
.
equal
(
sm
.
secureStorage
.
fetchCount
0
)
;
let
accountData
=
await
sm
.
getAccountData
(
[
"
email
"
"
uid
"
]
)
;
Assert
.
ok
(
accountData
"
read
account
data
"
)
;
Assert
.
equal
(
accountData
.
uid
"
uid
"
)
;
Assert
.
equal
(
accountData
.
email
"
someone
somewhere
.
com
"
)
;
Assert
.
strictEqual
(
accountData
.
kXCS
undefined
)
;
Assert
.
equal
(
sm
.
secureStorage
.
fetchCount
1
)
;
}
)
;
add_task
(
async
function
checkLockedUpdates
(
)
{
let
sm
=
new
FxAccountsStorageManager
(
)
;
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
sm
.
secureStorage
=
new
MockedSecureStorage
(
{
kSync
:
"
old
-
kSync
"
kXCS
:
"
kXCS
"
}
)
;
sm
.
secureStorage
.
locked
=
true
;
await
sm
.
initialize
(
)
;
let
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
ok
(
!
accountData
.
kSync
)
;
Assert
.
ok
(
!
accountData
.
kXCS
)
;
sm
.
updateAccountData
(
{
kSync
:
"
new
-
kSync
"
}
)
;
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
equal
(
accountData
.
kSync
"
new
-
kSync
"
)
;
sm
.
secureStorage
.
locked
=
false
;
accountData
=
await
sm
.
getAccountData
(
)
;
Assert
.
equal
(
accountData
.
kSync
"
new
-
kSync
"
)
;
Assert
.
equal
(
accountData
.
kXCS
"
kXCS
"
)
;
Assert
.
strictEqual
(
sm
.
secureStorage
.
data
.
accountData
.
kSync
"
new
-
kSync
"
)
;
Assert
.
strictEqual
(
sm
.
secureStorage
.
data
.
accountData
.
kXCS
"
kXCS
"
)
;
}
)
;
async
function
setupStorageManagerForQueueTest
(
)
{
let
sm
=
new
FxAccountsStorageManager
(
)
;
sm
.
plainStorage
=
new
MockedPlainStorage
(
{
uid
:
"
uid
"
email
:
"
someone
somewhere
.
com
"
}
)
;
sm
.
secureStorage
=
new
MockedSecureStorage
(
{
kXCS
:
"
kXCS
"
}
)
;
sm
.
secureStorage
.
locked
=
true
;
await
sm
.
initialize
(
)
;
let
resolveBlocked
rejectBlocked
;
let
blockedPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
resolveBlocked
=
resolve
;
rejectBlocked
=
reject
;
}
)
;
sm
.
_queueStorageOperation
(
(
)
=
>
blockedPromise
)
;
return
{
sm
blockedPromise
resolveBlocked
rejectBlocked
}
;
}
add_task
(
async
function
checkQueueSemantics
(
)
{
let
{
sm
resolveBlocked
}
=
await
setupStorageManagerForQueueTest
(
)
;
let
resolveSubsequent
;
let
subsequentPromise
=
new
Promise
(
resolve
=
>
{
resolveSubsequent
=
resolve
;
}
)
;
let
subsequentCalled
=
false
;
sm
.
_queueStorageOperation
(
(
)
=
>
{
subsequentCalled
=
true
;
resolveSubsequent
(
)
;
return
subsequentPromise
;
}
)
;
Assert
.
ok
(
!
subsequentCalled
)
;
resolveBlocked
(
)
;
await
subsequentPromise
;
Assert
.
ok
(
subsequentCalled
)
;
await
sm
.
finalize
(
)
;
}
)
;
add_task
(
async
function
checkQueueSemanticsOnError
(
)
{
let
{
sm
blockedPromise
rejectBlocked
}
=
await
setupStorageManagerForQueueTest
(
)
;
let
resolveSubsequent
;
let
subsequentPromise
=
new
Promise
(
resolve
=
>
{
resolveSubsequent
=
resolve
;
}
)
;
let
subsequentCalled
=
false
;
sm
.
_queueStorageOperation
(
(
)
=
>
{
subsequentCalled
=
true
;
resolveSubsequent
(
)
;
return
subsequentPromise
;
}
)
;
Assert
.
ok
(
!
subsequentCalled
)
;
rejectBlocked
(
"
oh
no
"
)
;
await
subsequentPromise
;
Assert
.
ok
(
subsequentCalled
)
;
try
{
await
blockedPromise
;
Assert
.
ok
(
false
"
expected
this
promise
to
reject
"
)
;
}
catch
(
ex
)
{
Assert
.
equal
(
ex
"
oh
no
"
)
;
}
await
sm
.
finalize
(
)
;
}
)
;
add_task
(
async
function
checkQueuedReadAndUpdate
(
)
{
let
{
sm
resolveBlocked
}
=
await
setupStorageManagerForQueueTest
(
)
;
let
_doReadCalled
=
false
;
sm
.
_doReadAndUpdateSecure
=
(
)
=
>
{
_doReadCalled
=
true
;
return
Promise
.
resolve
(
)
;
}
;
let
resultPromise
=
sm
.
_maybeReadAndUpdateSecure
(
)
;
Assert
.
ok
(
!
_doReadCalled
)
;
resolveBlocked
(
)
;
await
resultPromise
;
Assert
.
ok
(
_doReadCalled
)
;
await
sm
.
finalize
(
)
;
}
)
;
add_task
(
async
function
checkQueuedWrite
(
)
{
let
{
sm
resolveBlocked
}
=
await
setupStorageManagerForQueueTest
(
)
;
let
__writeCalled
=
false
;
sm
.
__write
=
(
)
=
>
{
__writeCalled
=
true
;
return
Promise
.
resolve
(
)
;
}
;
let
writePromise
=
sm
.
_write
(
)
;
Assert
.
ok
(
!
__writeCalled
)
;
resolveBlocked
(
)
;
await
writePromise
;
Assert
.
ok
(
__writeCalled
)
;
await
sm
.
finalize
(
)
;
}
)
;
add_task
(
async
function
checkQueuedDelete
(
)
{
let
{
sm
resolveBlocked
}
=
await
setupStorageManagerForQueueTest
(
)
;
let
_deleteCalled
=
false
;
sm
.
_deleteAccountData
=
(
)
=
>
{
_deleteCalled
=
true
;
return
Promise
.
resolve
(
)
;
}
;
let
resultPromise
=
sm
.
deleteAccountData
(
)
;
Assert
.
ok
(
!
_deleteCalled
)
;
resolveBlocked
(
)
;
await
resultPromise
;
Assert
.
ok
(
_deleteCalled
)
;
await
sm
.
finalize
(
)
;
}
)
;
