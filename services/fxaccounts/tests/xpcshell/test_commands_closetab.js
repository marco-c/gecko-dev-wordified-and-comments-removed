"
use
strict
"
;
const
{
CloseRemoteTab
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommands
.
sys
.
mjs
"
)
;
const
{
COMMAND_CLOSETAB
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
sys
.
mjs
"
)
;
const
{
getRemoteCommandStore
RemoteCommand
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
sync
/
TabsStore
.
sys
.
mjs
"
)
;
class
TelemetryMock
{
constructor
(
)
{
this
.
_events
=
[
]
;
this
.
_uuid_counter
=
0
;
}
recordEvent
(
object
method
value
extra
=
undefined
)
{
this
.
_events
.
push
(
{
object
method
value
extra
}
)
;
}
generateFlowID
(
)
{
this
.
_uuid_counter
+
=
1
;
return
this
.
_uuid_counter
.
toString
(
)
;
}
sanitizeDeviceId
(
id
)
{
return
id
+
"
-
san
"
;
}
}
function
FxaInternalMock
(
recentDeviceList
)
{
return
{
telemetry
:
new
TelemetryMock
(
)
device
:
{
recentDeviceList
}
}
;
}
add_task
(
async
function
test_closetab_isDeviceCompatible
(
)
{
const
closeTab
=
new
CloseRemoteTab
(
null
null
)
;
let
device
=
{
name
:
"
My
device
"
}
;
Assert
.
ok
(
!
closeTab
.
isDeviceCompatible
(
device
)
)
;
device
=
{
name
:
"
My
device
"
availableCommands
:
{
}
}
;
Assert
.
ok
(
!
closeTab
.
isDeviceCompatible
(
device
)
)
;
device
=
{
name
:
"
My
device
"
availableCommands
:
{
"
https
:
/
/
identity
.
mozilla
.
com
/
cmd
/
close
-
uri
/
v1
"
:
"
payload
"
}
}
;
Assert
.
ok
(
!
closeTab
.
isDeviceCompatible
(
device
)
)
;
Services
.
prefs
.
setBoolPref
(
"
identity
.
fxaccounts
.
commands
.
remoteTabManagement
.
enabled
"
true
)
;
Assert
.
ok
(
closeTab
.
isDeviceCompatible
(
device
)
)
;
Services
.
prefs
.
clearUserPref
(
"
identity
.
fxaccounts
.
commands
.
remoteTabManagement
.
enabled
"
)
;
closeTab
.
shutdown
(
)
;
}
)
;
add_task
(
async
function
test_closetab_send
(
)
{
const
targetDevice
=
{
id
:
"
dev1
"
name
:
"
Device
1
"
}
;
const
fxai
=
FxaInternalMock
(
[
targetDevice
]
)
;
const
closeTab
=
new
CloseRemoteTab
(
null
fxai
)
;
let
mock
=
sinon
.
mock
(
closeTab
)
;
let
now
=
Date
.
now
(
)
;
closeTab
.
now
=
(
)
=
>
now
;
closeTab
.
DELAY
=
10
;
mock
.
expects
(
"
_ensureTimer
"
)
.
once
(
)
.
withArgs
(
20
)
;
mock
.
expects
(
"
_sendCloseTabPush
"
)
.
once
(
)
.
withArgs
(
targetDevice
[
"
https
:
/
/
foo
.
bar
/
early
"
]
)
.
resolves
(
true
)
;
closeTab
.
invoke
=
sinon
.
spy
(
(
cmd
device
payload
)
=
>
{
Assert
.
equal
(
payload
.
encrypted
"
encryptedpayload
"
)
;
}
)
;
const
store
=
await
getRemoteCommandStore
(
)
;
const
command1
=
new
RemoteCommand
.
CloseTab
(
"
https
:
/
/
foo
.
bar
/
early
"
)
;
Assert
.
ok
(
await
store
.
addRemoteCommandAt
(
targetDevice
.
id
command1
now
-
15
)
"
adding
the
remote
command
should
work
"
)
;
const
command2
=
new
RemoteCommand
.
CloseTab
(
"
https
:
/
/
foo
.
bar
/
late
"
)
;
Assert
.
ok
(
await
store
.
addRemoteCommandAt
(
targetDevice
.
id
command2
now
)
"
adding
the
remote
command
should
work
"
)
;
const
pending
=
await
store
.
getUnsentCommands
(
)
;
Assert
.
equal
(
pending
.
length
2
)
;
Assert
.
equal
(
pending
[
0
]
.
deviceId
targetDevice
.
id
)
;
Assert
.
ok
(
pending
[
0
]
.
command
.
url
"
https
:
/
/
foo
.
bar
/
early
"
)
;
Assert
.
equal
(
pending
[
1
]
.
deviceId
targetDevice
.
id
)
;
Assert
.
ok
(
pending
[
1
]
.
command
.
url
"
https
:
/
/
foo
.
bar
/
late
"
)
;
await
closeTab
.
flushQueue
(
)
;
Assert
.
equal
(
(
await
store
.
getUnsentCommands
(
)
)
.
length
1
)
;
mock
.
verify
(
)
;
now
+
=
20
;
mock
=
sinon
.
mock
(
closeTab
)
;
mock
.
expects
(
"
_ensureTimer
"
)
.
never
(
)
;
mock
.
expects
(
"
_sendCloseTabPush
"
)
.
once
(
)
.
withArgs
(
targetDevice
[
"
https
:
/
/
foo
.
bar
/
late
"
]
)
.
resolves
(
true
)
;
await
closeTab
.
flushQueue
(
)
;
Assert
.
equal
(
(
await
store
.
getUnsentCommands
(
)
)
.
length
0
)
;
mock
.
verify
(
)
;
mock
.
restore
(
)
;
closeTab
.
shutdown
(
)
;
}
)
;
add_task
(
async
function
test_multiple_devices
(
)
{
const
device1
=
{
id
:
"
dev1
"
name
:
"
Device
1
"
}
;
const
device2
=
{
id
:
"
dev2
"
name
:
"
Device
2
"
}
;
const
fxai
=
FxaInternalMock
(
[
device1
device2
]
)
;
const
closeTab
=
new
CloseRemoteTab
(
null
fxai
)
;
const
store
=
await
getRemoteCommandStore
(
)
;
const
tab1
=
"
https
:
/
/
foo
.
bar
"
;
const
tab2
=
"
https
:
/
/
example
.
com
"
;
let
mock
=
sinon
.
mock
(
closeTab
)
;
let
now
=
Date
.
now
(
)
;
closeTab
.
now
=
(
)
=
>
now
;
closeTab
.
DELAY
=
10
;
mock
.
expects
(
"
_sendCloseTabPush
"
)
.
twice
(
)
.
resolves
(
true
)
;
closeTab
.
invoke
=
sinon
.
spy
(
(
cmd
device
payload
)
=
>
{
Assert
.
equal
(
payload
.
encrypted
"
encryptedpayload
"
)
;
}
)
;
let
command1
=
new
RemoteCommand
.
CloseTab
(
tab1
)
;
Assert
.
ok
(
await
store
.
addRemoteCommandAt
(
device1
.
id
command1
now
-
15
)
"
adding
the
remote
command
should
work
"
)
;
let
command2
=
new
RemoteCommand
.
CloseTab
(
tab2
)
;
Assert
.
ok
(
await
store
.
addRemoteCommandAt
(
device2
.
id
command2
now
)
"
adding
the
remote
command
should
work
"
)
;
let
unsentCommands
=
await
store
.
getUnsentCommands
(
)
;
Assert
.
equal
(
unsentCommands
.
length
2
)
;
Assert
.
equal
(
unsentCommands
[
0
]
.
deviceId
"
dev1
"
)
;
Assert
.
equal
(
unsentCommands
[
0
]
.
command
.
url
"
https
:
/
/
foo
.
bar
"
)
;
Assert
.
equal
(
unsentCommands
[
1
]
.
deviceId
"
dev2
"
)
;
Assert
.
equal
(
unsentCommands
[
1
]
.
command
.
url
"
https
:
/
/
example
.
com
"
)
;
now
+
=
20
;
await
closeTab
.
flushQueue
(
)
;
unsentCommands
=
await
store
.
getUnsentCommands
(
)
;
Assert
.
equal
(
unsentCommands
.
length
0
)
;
mock
.
verify
(
)
;
closeTab
.
shutdown
(
)
;
mock
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_timer_reset_on_new_tab
(
)
{
const
targetDevice
=
{
id
:
"
dev1
"
name
:
"
Device
1
"
availableCommands
:
{
[
COMMAND_CLOSETAB
]
:
"
payload
"
}
}
;
const
fxai
=
FxaInternalMock
(
[
targetDevice
]
)
;
const
closeTab
=
new
CloseRemoteTab
(
null
fxai
)
;
const
store
=
await
getRemoteCommandStore
(
)
;
const
tab1
=
"
https
:
/
/
foo
.
bar
/
"
;
const
tab2
=
"
https
:
/
/
example
.
com
/
"
;
let
mock
=
sinon
.
mock
(
closeTab
)
;
let
now
=
Date
.
now
(
)
;
closeTab
.
now
=
(
)
=
>
now
;
closeTab
.
DELAY
=
10
;
const
ensureTimerSpy
=
sinon
.
spy
(
closeTab
"
_ensureTimer
"
)
;
mock
.
expects
(
"
_sendCloseTabPush
"
)
.
never
(
)
;
let
command1
=
new
RemoteCommand
.
CloseTab
(
tab1
)
;
Assert
.
ok
(
await
store
.
addRemoteCommandAt
(
targetDevice
.
id
command1
now
-
5
)
"
adding
the
remote
command
should
work
"
)
;
await
closeTab
.
flushQueue
(
)
;
let
command2
=
new
RemoteCommand
.
CloseTab
(
tab2
)
;
Assert
.
ok
(
await
store
.
addRemoteCommandAt
(
targetDevice
.
id
command2
now
)
"
adding
the
remote
command
should
work
"
)
;
await
closeTab
.
flushQueue
(
)
;
Assert
.
equal
(
(
await
store
.
getUnsentCommands
(
)
)
.
length
2
)
;
Assert
.
equal
(
ensureTimerSpy
.
callCount
2
)
;
mock
.
verify
(
)
;
closeTab
.
shutdown
(
)
;
}
)
;
