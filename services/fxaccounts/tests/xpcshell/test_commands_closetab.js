"
use
strict
"
;
const
{
CloseRemoteTab
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommands
.
sys
.
mjs
"
)
;
const
{
COMMAND_CLOSETAB
COMMAND_CLOSETAB_TAIL
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
sys
.
mjs
"
)
;
class
TelemetryMock
{
constructor
(
)
{
this
.
_events
=
[
]
;
this
.
_uuid_counter
=
0
;
}
recordEvent
(
object
method
value
extra
=
undefined
)
{
this
.
_events
.
push
(
{
object
method
value
extra
}
)
;
}
generateFlowID
(
)
{
this
.
_uuid_counter
+
=
1
;
return
this
.
_uuid_counter
.
toString
(
)
;
}
sanitizeDeviceId
(
id
)
{
return
id
+
"
-
san
"
;
}
}
function
FxaInternalMock
(
)
{
return
{
telemetry
:
new
TelemetryMock
(
)
}
;
}
function
promiseObserver
(
topic
)
{
return
new
Promise
(
resolve
=
>
{
let
obs
=
(
aSubject
aTopic
)
=
>
{
Services
.
obs
.
removeObserver
(
obs
aTopic
)
;
resolve
(
aSubject
)
;
}
;
Services
.
obs
.
addObserver
(
obs
topic
)
;
}
)
;
}
add_task
(
async
function
test_closetab_isDeviceCompatible
(
)
{
const
closeTab
=
new
CloseRemoteTab
(
null
null
)
;
let
device
=
{
name
:
"
My
device
"
}
;
Assert
.
ok
(
!
closeTab
.
isDeviceCompatible
(
device
)
)
;
device
=
{
name
:
"
My
device
"
availableCommands
:
{
}
}
;
Assert
.
ok
(
!
closeTab
.
isDeviceCompatible
(
device
)
)
;
device
=
{
name
:
"
My
device
"
availableCommands
:
{
"
https
:
/
/
identity
.
mozilla
.
com
/
cmd
/
close
-
uri
"
:
"
payload
"
}
}
;
Assert
.
ok
(
!
closeTab
.
isDeviceCompatible
(
device
)
)
;
Services
.
prefs
.
setBoolPref
(
"
identity
.
fxaccounts
.
commands
.
remoteTabManagement
.
enabled
"
true
)
;
Assert
.
ok
(
closeTab
.
isDeviceCompatible
(
device
)
)
;
Services
.
prefs
.
clearUserPref
(
"
identity
.
fxaccounts
.
commands
.
remoteTabManagement
.
enabled
"
)
;
}
)
;
add_task
(
async
function
test_closetab_send
(
)
{
const
commands
=
{
invoke
:
sinon
.
spy
(
(
cmd
device
payload
)
=
>
{
Assert
.
equal
(
payload
.
encrypted
"
encryptedpayload
"
)
;
}
)
}
;
const
fxai
=
FxaInternalMock
(
)
;
const
closeTab
=
new
CloseRemoteTab
(
commands
fxai
)
;
closeTab
.
_encrypt
=
async
(
)
=
>
{
return
"
encryptedpayload
"
;
}
;
const
targetDevice
=
{
id
:
"
dev1
"
name
:
"
Device
1
"
}
;
const
tab
=
{
url
:
"
https
:
/
/
foo
.
bar
/
"
}
;
closeTab
.
enqueueTabToClose
(
targetDevice
tab
0
)
;
Assert
.
equal
(
closeTab
.
pendingClosedTabs
.
get
(
targetDevice
.
id
)
.
tabs
.
length
1
)
;
await
promiseObserver
(
"
test
:
fxaccounts
:
commands
:
close
-
uri
:
sent
"
)
;
Assert
.
equal
(
closeTab
.
pendingClosedTabs
.
has
(
targetDevice
.
id
)
false
"
The
device
should
be
removed
from
the
queue
after
sending
.
"
)
;
Assert
.
deepEqual
(
fxai
.
telemetry
.
_events
[
{
object
:
"
command
-
sent
"
method
:
COMMAND_CLOSETAB_TAIL
value
:
"
dev1
-
san
"
extra
:
{
flowID
:
"
1
"
streamID
:
"
2
"
}
}
]
)
;
}
)
;
add_task
(
async
function
test_multiple_tabs_one_device
(
)
{
const
commands
=
sinon
.
stub
(
{
invoke
:
async
(
)
=
>
{
}
}
)
;
const
fxai
=
FxaInternalMock
(
)
;
const
closeTab
=
new
CloseRemoteTab
(
commands
fxai
)
;
closeTab
.
_encrypt
=
async
(
)
=
>
"
encryptedpayload
"
;
const
targetDevice
=
{
id
:
"
dev1
"
name
:
"
Device
1
"
availableCommands
:
{
[
COMMAND_CLOSETAB
]
:
"
payload
"
}
}
;
const
tab1
=
{
url
:
"
https
:
/
/
foo
.
bar
/
"
}
;
const
tab2
=
{
url
:
"
https
:
/
/
example
.
com
/
"
}
;
closeTab
.
enqueueTabToClose
(
targetDevice
tab1
1000
)
;
closeTab
.
enqueueTabToClose
(
targetDevice
tab2
0
)
;
Assert
.
equal
(
closeTab
.
pendingClosedTabs
.
get
(
"
dev1
"
)
.
tabs
.
length
2
)
;
await
promiseObserver
(
"
test
:
fxaccounts
:
commands
:
close
-
uri
:
sent
"
)
;
Assert
.
equal
(
closeTab
.
pendingClosedTabs
.
has
(
targetDevice
.
id
)
false
"
The
device
should
be
removed
from
the
queue
after
sending
.
"
)
;
Assert
.
deepEqual
(
fxai
.
telemetry
.
_events
[
{
object
:
"
command
-
sent
"
method
:
COMMAND_CLOSETAB_TAIL
value
:
"
dev1
-
san
"
extra
:
{
flowID
:
"
1
"
streamID
:
"
2
"
}
}
]
)
;
}
)
;
add_task
(
async
function
test_timer_reset_on_new_tab
(
)
{
const
commands
=
sinon
.
stub
(
{
invoke
:
async
(
)
=
>
{
}
}
)
;
const
fxai
=
FxaInternalMock
(
)
;
const
closeTab
=
new
CloseRemoteTab
(
commands
fxai
)
;
closeTab
.
_encrypt
=
async
(
)
=
>
"
encryptedpayload
"
;
const
targetDevice
=
{
id
:
"
dev1
"
name
:
"
Device
1
"
availableCommands
:
{
[
COMMAND_CLOSETAB
]
:
"
payload
"
}
}
;
const
tab1
=
{
url
:
"
https
:
/
/
foo
.
bar
/
"
}
;
const
tab2
=
{
url
:
"
https
:
/
/
example
.
com
/
"
}
;
closeTab
.
enqueueTabToClose
(
targetDevice
tab1
)
;
Assert
.
equal
(
closeTab
.
pendingClosedTabs
.
get
(
targetDevice
.
id
)
.
tabs
.
length
1
)
;
closeTab
.
enqueueTabToClose
(
targetDevice
tab2
100
)
;
Assert
.
equal
(
closeTab
.
pendingClosedTabs
.
get
(
targetDevice
.
id
)
.
tabs
.
length
2
)
;
await
promiseObserver
(
"
test
:
fxaccounts
:
commands
:
close
-
uri
:
sent
"
)
;
sinon
.
assert
.
calledOnce
(
commands
.
invoke
)
;
Assert
.
equal
(
closeTab
.
pendingClosedTabs
.
has
(
targetDevice
.
id
)
false
)
;
Assert
.
deepEqual
(
fxai
.
telemetry
.
_events
[
{
object
:
"
command
-
sent
"
method
:
COMMAND_CLOSETAB_TAIL
value
:
"
dev1
-
san
"
extra
:
{
flowID
:
"
1
"
streamID
:
"
2
"
}
}
]
)
;
}
)
;
add_task
(
async
function
test_multiple_devices
(
)
{
const
commands
=
sinon
.
stub
(
{
invoke
:
async
(
)
=
>
{
}
}
)
;
const
fxai
=
FxaInternalMock
(
)
;
const
closeTab
=
new
CloseRemoteTab
(
commands
fxai
)
;
closeTab
.
_encrypt
=
async
(
)
=
>
"
encryptedpayload
"
;
const
device1
=
{
id
:
"
dev1
"
name
:
"
Device
1
"
availableCommands
:
{
[
COMMAND_CLOSETAB
]
:
"
payload
"
}
}
;
const
device2
=
{
id
:
"
dev2
"
name
:
"
Device
2
"
availableCommands
:
{
[
COMMAND_CLOSETAB
]
:
"
payload
"
}
}
;
const
tab1
=
{
url
:
"
https
:
/
/
foo
.
bar
/
"
}
;
const
tab2
=
{
url
:
"
https
:
/
/
example
.
com
/
"
}
;
closeTab
.
enqueueTabToClose
(
device1
tab1
100
)
;
closeTab
.
enqueueTabToClose
(
device2
tab2
200
)
;
Assert
.
equal
(
closeTab
.
pendingClosedTabs
.
get
(
device1
.
id
)
.
tabs
.
length
1
)
;
Assert
.
equal
(
closeTab
.
pendingClosedTabs
.
get
(
device2
.
id
)
.
tabs
.
length
1
)
;
await
promiseObserver
(
"
test
:
fxaccounts
:
commands
:
close
-
uri
:
sent
"
)
;
sinon
.
assert
.
calledOnce
(
commands
.
invoke
)
;
Assert
.
equal
(
closeTab
.
pendingClosedTabs
.
has
(
device1
.
id
)
false
)
;
await
promiseObserver
(
"
test
:
fxaccounts
:
commands
:
close
-
uri
:
sent
"
)
;
sinon
.
assert
.
calledTwice
(
commands
.
invoke
)
;
Assert
.
deepEqual
(
fxai
.
telemetry
.
_events
[
{
object
:
"
command
-
sent
"
method
:
COMMAND_CLOSETAB_TAIL
value
:
"
dev1
-
san
"
extra
:
{
flowID
:
"
1
"
streamID
:
"
2
"
}
}
{
object
:
"
command
-
sent
"
method
:
COMMAND_CLOSETAB_TAIL
value
:
"
dev2
-
san
"
extra
:
{
flowID
:
"
3
"
streamID
:
"
4
"
}
}
]
)
;
}
)
;
