#
undef
_FORTIFY_SOURCE
#
include
<
errno
.
h
>
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
JSONWriter
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
DMD
.
h
"
using
mozilla
:
:
MakeUnique
;
using
namespace
mozilla
:
:
dmd
;
DMDFuncs
:
:
Singleton
DMDFuncs
:
:
sSingleton
;
class
FpWriteFunc
:
public
mozilla
:
:
JSONWriteFunc
{
public
:
explicit
FpWriteFunc
(
const
char
*
aFilename
)
{
mFp
=
fopen
(
aFilename
"
w
"
)
;
if
(
!
mFp
)
{
fprintf
(
stderr
"
SmokeDMD
:
can
'
t
create
%
s
file
:
%
s
\
n
"
aFilename
strerror
(
errno
)
)
;
exit
(
1
)
;
}
}
~
FpWriteFunc
(
)
{
fclose
(
mFp
)
;
}
void
Write
(
const
mozilla
:
:
Span
<
const
char
>
&
aStr
)
override
{
for
(
const
char
c
:
aStr
)
{
fputc
(
c
mFp
)
;
}
}
private
:
FILE
*
mFp
;
}
;
static
void
UseItOrLoseIt
(
void
*
aPtr
int
aSeven
)
{
char
buf
[
64
]
;
int
n
=
sprintf
(
buf
"
%
p
\
n
"
aPtr
)
;
if
(
n
=
=
20
+
aSeven
)
{
fprintf
(
stderr
"
well
that
is
surprising
"
)
;
}
}
void
Foo
(
int
aSeven
)
{
char
*
a
[
6
]
;
for
(
int
i
=
0
;
i
<
aSeven
-
1
;
i
+
+
)
{
a
[
i
]
=
(
char
*
)
malloc
(
128
-
16
*
i
)
;
UseItOrLoseIt
(
a
[
i
]
aSeven
)
;
}
Report
(
a
[
2
]
)
;
UseItOrLoseIt
(
a
[
2
]
aSeven
)
;
for
(
int
i
=
0
;
i
<
aSeven
-
5
;
i
+
+
)
{
Report
(
a
[
i
]
)
;
UseItOrLoseIt
(
a
[
i
]
aSeven
)
;
}
UseItOrLoseIt
(
a
[
2
]
aSeven
)
;
Report
(
a
[
3
]
)
;
}
void
TestEmpty
(
const
char
*
aTestName
const
char
*
aMode
)
{
char
filename
[
128
]
;
sprintf
(
filename
"
complete
-
%
s
-
%
s
.
json
"
aTestName
aMode
)
;
auto
f
=
MakeUnique
<
FpWriteFunc
>
(
filename
)
;
char
options
[
128
]
;
sprintf
(
options
"
-
-
mode
=
%
s
-
-
stacks
=
full
"
aMode
)
;
ResetEverything
(
options
)
;
Analyze
(
std
:
:
move
(
f
)
)
;
}
void
TestFull
(
const
char
*
aTestName
int
aNum
const
char
*
aMode
int
aSeven
)
{
char
filename
[
128
]
;
sprintf
(
filename
"
complete
-
%
s
%
d
-
%
s
.
json
"
aTestName
aNum
aMode
)
;
auto
f
=
MakeUnique
<
FpWriteFunc
>
(
filename
)
;
char
options
[
128
]
;
sprintf
(
options
"
-
-
mode
=
%
s
-
-
stacks
=
full
-
-
show
-
dump
-
stats
=
yes
"
aMode
)
;
ResetEverything
(
options
)
;
int
i
;
char
*
a
=
nullptr
;
for
(
i
=
0
;
i
<
aSeven
+
3
;
i
+
+
)
{
a
=
(
char
*
)
malloc
(
100
)
;
UseItOrLoseIt
(
a
aSeven
)
;
}
free
(
a
)
;
free
(
nullptr
)
;
char
*
a2
=
(
char
*
)
malloc
(
16
)
;
Report
(
a2
)
;
char
*
b
=
(
char
*
)
malloc
(
10
)
;
ReportOnAlloc
(
b
)
;
char
*
b2
=
(
char
*
)
malloc
(
16
)
;
ReportOnAlloc
(
b2
)
;
free
(
b2
)
;
char
*
c
=
(
char
*
)
calloc
(
10
3
)
;
Report
(
c
)
;
for
(
int
i
=
0
;
i
<
aSeven
-
4
;
i
+
+
)
{
Report
(
c
)
;
}
Report
(
(
void
*
)
(
intptr_t
)
i
)
;
char
*
e
=
(
char
*
)
malloc
(
4096
)
;
e
=
(
char
*
)
realloc
(
e
7169
)
;
Report
(
e
)
;
char
*
e2
=
(
char
*
)
realloc
(
nullptr
1024
)
;
e2
=
(
char
*
)
realloc
(
e2
512
)
;
Report
(
e2
)
;
char
*
e3
=
(
char
*
)
realloc
(
nullptr
1023
)
;
MOZ_ASSERT
(
e3
)
;
Report
(
e3
)
;
char
*
f1
=
(
char
*
)
malloc
(
64
)
;
UseItOrLoseIt
(
f1
aSeven
)
;
free
(
f1
)
;
Report
(
(
void
*
)
(
intptr_t
)
0x0
)
;
Foo
(
aSeven
)
;
char
*
g1
=
(
char
*
)
malloc
(
77
)
;
ReportOnAlloc
(
g1
)
;
ReportOnAlloc
(
g1
)
;
Foo
(
aSeven
)
;
char
*
g2
=
(
char
*
)
malloc
(
78
)
;
Report
(
g2
)
;
ReportOnAlloc
(
g2
)
;
char
*
g3
=
(
char
*
)
malloc
(
79
)
;
ReportOnAlloc
(
g3
)
;
Report
(
g3
)
;
if
(
aNum
=
=
1
)
{
Analyze
(
std
:
:
move
(
f
)
)
;
}
ClearReports
(
)
;
Report
(
a2
)
;
Report
(
a2
)
;
free
(
c
)
;
free
(
e
)
;
Report
(
e2
)
;
free
(
e3
)
;
for
(
int
i
=
0
;
i
<
100
;
i
+
+
)
{
void
*
v
=
malloc
(
128
)
;
UseItOrLoseIt
(
v
aSeven
)
;
free
(
v
)
;
}
if
(
aNum
=
=
2
)
{
Analyze
(
std
:
:
move
(
f
)
)
;
}
}
void
TestPartial
(
const
char
*
aTestName
const
char
*
aMode
int
aSeven
)
{
char
filename
[
128
]
;
sprintf
(
filename
"
complete
-
%
s
-
%
s
.
json
"
aTestName
aMode
)
;
auto
f
=
MakeUnique
<
FpWriteFunc
>
(
filename
)
;
char
options
[
128
]
;
sprintf
(
options
"
-
-
mode
=
%
s
"
aMode
)
;
ResetEverything
(
options
)
;
int
kTenThousand
=
aSeven
+
9993
;
char
*
s
;
for
(
int
i
=
0
;
i
<
kTenThousand
;
i
+
+
)
{
s
=
(
char
*
)
malloc
(
16
)
;
UseItOrLoseIt
(
s
aSeven
)
;
}
for
(
int
i
=
0
;
i
<
kTenThousand
;
i
+
+
)
{
s
=
(
char
*
)
malloc
(
128
)
;
UseItOrLoseIt
(
s
aSeven
)
;
}
for
(
int
i
=
0
;
i
<
kTenThousand
;
i
+
+
)
{
s
=
(
char
*
)
malloc
(
1024
)
;
UseItOrLoseIt
(
s
aSeven
)
;
}
Analyze
(
std
:
:
move
(
f
)
)
;
}
void
TestScan
(
int
aSeven
)
{
auto
f
=
MakeUnique
<
FpWriteFunc
>
(
"
basic
-
scan
.
json
"
)
;
ResetEverything
(
"
-
-
mode
=
scan
"
)
;
uintptr_t
*
p
=
(
uintptr_t
*
)
malloc
(
6
*
sizeof
(
uintptr_t
)
)
;
UseItOrLoseIt
(
p
aSeven
)
;
p
[
0
]
=
0x123
;
p
[
1
]
=
0x0
;
p
[
2
]
=
(
uintptr_t
)
(
(
uint8_t
*
)
p
-
1
)
;
p
[
3
]
=
(
uintptr_t
)
p
;
p
[
4
]
=
(
uintptr_t
)
(
(
uint8_t
*
)
p
+
1
)
;
p
[
5
]
=
0x0
;
Analyze
(
std
:
:
move
(
f
)
)
;
}
void
RunTests
(
)
{
int
seven
=
7
;
int
*
x
=
(
int
*
)
malloc
(
100
)
;
UseItOrLoseIt
(
x
seven
)
;
MOZ_RELEASE_ASSERT
(
IsRunning
(
)
)
;
TestEmpty
(
"
empty
"
"
live
"
)
;
TestEmpty
(
"
empty
"
"
dark
-
matter
"
)
;
TestEmpty
(
"
empty
"
"
cumulative
"
)
;
TestFull
(
"
full
"
1
"
live
"
seven
)
;
TestFull
(
"
full
"
1
"
dark
-
matter
"
seven
)
;
TestFull
(
"
full
"
2
"
dark
-
matter
"
seven
)
;
TestFull
(
"
full
"
2
"
cumulative
"
seven
)
;
TestPartial
(
"
partial
"
"
live
"
seven
)
;
TestScan
(
seven
)
;
}
int
main
(
)
{
RunTests
(
)
;
return
0
;
}
