#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozmemory
.
h
"
#
include
"
replace_malloc_bridge
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
.
.
/
.
.
/
PHC
.
h
"
using
namespace
mozilla
;
bool
PHCInfoEq
(
phc
:
:
AddrInfo
&
aInfo
phc
:
:
AddrInfo
:
:
Kind
aKind
void
*
aBaseAddr
size_t
aUsableSize
bool
aHasAllocStack
bool
aHasFreeStack
)
{
return
aInfo
.
mKind
=
=
aKind
&
&
aInfo
.
mBaseAddr
=
=
aBaseAddr
&
&
aInfo
.
mUsableSize
=
=
aUsableSize
&
&
(
aHasAllocStack
?
(
aInfo
.
mAllocStack
-
>
mLength
>
2
)
:
(
aInfo
.
mAllocStack
.
isNothing
(
)
)
)
&
&
(
aHasFreeStack
?
(
aInfo
.
mFreeStack
-
>
mLength
>
2
)
:
(
aInfo
.
mFreeStack
.
isNothing
(
)
)
)
;
}
bool
JeInfoEq
(
jemalloc_ptr_info_t
&
aInfo
PtrInfoTag
aTag
void
*
aAddr
size_t
aSize
arena_id_t
arenaId
)
{
return
aInfo
.
tag
=
=
aTag
&
&
aInfo
.
addr
=
=
aAddr
&
&
aInfo
.
size
=
=
aSize
#
ifdef
MOZ_DEBUG
&
&
aInfo
.
arenaId
=
=
arenaId
#
endif
;
}
char
*
GetPHCAllocation
(
size_t
aSize
)
{
for
(
int
i
=
0
;
i
<
2000000
;
i
+
+
)
{
char
*
p
=
(
char
*
)
malloc
(
aSize
)
;
if
(
ReplaceMalloc
:
:
IsPHCAllocation
(
p
nullptr
)
)
{
return
p
;
}
free
(
p
)
;
}
return
nullptr
;
}
TEST
(
PHC
TestPHCBasics
)
{
int
stackVar
;
phc
:
:
AddrInfo
phcInfo
;
jemalloc_ptr_info_t
jeInfo
;
ASSERT_TRUE
(
PHCInfoEq
(
phcInfo
phc
:
:
AddrInfo
:
:
Kind
:
:
Unknown
nullptr
0ul
false
false
)
)
;
ASSERT_FALSE
(
ReplaceMalloc
:
:
IsPHCAllocation
(
nullptr
&
phcInfo
)
)
;
ASSERT_TRUE
(
PHCInfoEq
(
phcInfo
phc
:
:
AddrInfo
:
:
Kind
:
:
Unknown
nullptr
0
false
false
)
)
;
ASSERT_FALSE
(
ReplaceMalloc
:
:
IsPHCAllocation
(
&
stackVar
&
phcInfo
)
)
;
ASSERT_TRUE
(
PHCInfoEq
(
phcInfo
phc
:
:
AddrInfo
:
:
Kind
:
:
Unknown
nullptr
0
false
false
)
)
;
char
*
p
=
GetPHCAllocation
(
32
)
;
if
(
!
p
)
{
MOZ_CRASH
(
"
failed
to
get
a
PHC
allocation
"
)
;
}
ASSERT_TRUE
(
ReplaceMalloc
:
:
IsPHCAllocation
(
p
&
phcInfo
)
)
;
ASSERT_TRUE
(
PHCInfoEq
(
phcInfo
phc
:
:
AddrInfo
:
:
Kind
:
:
InUsePage
p
32ul
true
false
)
)
;
ASSERT_EQ
(
moz_malloc_usable_size
(
p
)
32ul
)
;
jemalloc_ptr_info
(
p
&
jeInfo
)
;
ASSERT_TRUE
(
JeInfoEq
(
jeInfo
TagLiveAlloc
p
32
0
)
)
;
ASSERT_TRUE
(
ReplaceMalloc
:
:
IsPHCAllocation
(
p
+
10
&
phcInfo
)
)
;
ASSERT_TRUE
(
PHCInfoEq
(
phcInfo
phc
:
:
AddrInfo
:
:
Kind
:
:
InUsePage
p
32ul
true
false
)
)
;
ASSERT_EQ
(
moz_malloc_usable_size
(
p
)
32ul
)
;
jemalloc_ptr_info
(
p
+
10
&
jeInfo
)
;
ASSERT_TRUE
(
JeInfoEq
(
jeInfo
TagLiveAlloc
p
32
0
)
)
;
ASSERT_TRUE
(
ReplaceMalloc
:
:
IsPHCAllocation
(
p
+
64
&
phcInfo
)
)
;
ASSERT_TRUE
(
PHCInfoEq
(
phcInfo
phc
:
:
AddrInfo
:
:
Kind
:
:
InUsePage
p
32ul
true
false
)
)
;
jemalloc_ptr_info
(
p
+
64
&
jeInfo
)
;
ASSERT_TRUE
(
JeInfoEq
(
jeInfo
TagUnknown
nullptr
0
0
)
)
;
free
(
p
)
;
ASSERT_TRUE
(
ReplaceMalloc
:
:
IsPHCAllocation
(
p
&
phcInfo
)
)
;
ASSERT_TRUE
(
PHCInfoEq
(
phcInfo
phc
:
:
AddrInfo
:
:
Kind
:
:
FreedPage
p
32ul
true
true
)
)
;
jemalloc_ptr_info
(
p
&
jeInfo
)
;
ASSERT_TRUE
(
JeInfoEq
(
jeInfo
TagFreedAlloc
p
32
0
)
)
;
ASSERT_TRUE
(
ReplaceMalloc
:
:
IsPHCAllocation
(
p
+
10
&
phcInfo
)
)
;
ASSERT_TRUE
(
PHCInfoEq
(
phcInfo
phc
:
:
AddrInfo
:
:
Kind
:
:
FreedPage
p
32ul
true
true
)
)
;
jemalloc_ptr_info
(
p
+
10
&
jeInfo
)
;
ASSERT_TRUE
(
JeInfoEq
(
jeInfo
TagFreedAlloc
p
32
0
)
)
;
ASSERT_TRUE
(
ReplaceMalloc
:
:
IsPHCAllocation
(
p
+
10
&
phcInfo
)
)
;
ASSERT_TRUE
(
PHCInfoEq
(
phcInfo
phc
:
:
AddrInfo
:
:
Kind
:
:
FreedPage
p
32ul
true
true
)
)
;
jemalloc_ptr_info
(
p
+
64
&
jeInfo
)
;
ASSERT_TRUE
(
JeInfoEq
(
jeInfo
TagUnknown
nullptr
0
0
)
)
;
}
TEST
(
PHC
TestPHCDisabling
)
{
char
*
p
=
GetPHCAllocation
(
32
)
;
char
*
q
=
GetPHCAllocation
(
32
)
;
if
(
!
p
|
|
!
q
)
{
MOZ_CRASH
(
"
failed
to
get
a
PHC
allocation
"
)
;
}
ASSERT_TRUE
(
ReplaceMalloc
:
:
IsPHCEnabledOnCurrentThread
(
)
)
;
ReplaceMalloc
:
:
DisablePHCOnCurrentThread
(
)
;
ASSERT_FALSE
(
ReplaceMalloc
:
:
IsPHCEnabledOnCurrentThread
(
)
)
;
char
*
p2
=
(
char
*
)
realloc
(
p
128
)
;
ASSERT_TRUE
(
p2
=
=
p
)
;
ASSERT_TRUE
(
ReplaceMalloc
:
:
IsPHCAllocation
(
p2
nullptr
)
)
;
char
*
p3
=
(
char
*
)
realloc
(
p2
8192
)
;
ASSERT_TRUE
(
p3
!
=
p2
)
;
ASSERT_FALSE
(
ReplaceMalloc
:
:
IsPHCAllocation
(
p3
nullptr
)
)
;
free
(
p3
)
;
free
(
q
)
;
char
*
r
=
GetPHCAllocation
(
32
)
;
ASSERT_FALSE
(
!
!
r
)
;
ReplaceMalloc
:
:
ReenablePHCOnCurrentThread
(
)
;
ASSERT_TRUE
(
ReplaceMalloc
:
:
IsPHCEnabledOnCurrentThread
(
)
)
;
}
