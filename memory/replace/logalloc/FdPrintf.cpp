#
include
<
cstdarg
>
#
ifdef
_WIN32
#
include
<
windows
.
h
>
#
else
#
include
<
unistd
.
h
>
#
endif
#
include
<
cmath
>
#
include
<
cstring
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
template
<
typename
T
>
class
CheckedIncrement
{
public
:
CheckedIncrement
(
T
aValue
size_t
aMaxIncrement
)
:
mValue
(
aValue
)
mMaxIncrement
(
aMaxIncrement
)
{
}
T
operator
+
+
(
int
)
{
if
(
!
mMaxIncrement
)
{
MOZ_CRASH
(
"
overflow
detected
"
)
;
}
mMaxIncrement
-
-
;
return
mValue
+
+
;
}
T
&
operator
+
+
(
)
{
(
*
this
)
+
+
;
return
mValue
;
}
void
advance
(
T
end
)
{
size_t
diff
=
end
-
mValue
;
if
(
diff
>
mMaxIncrement
)
{
MOZ_CRASH
(
"
overflow
detected
"
)
;
}
mMaxIncrement
-
=
diff
;
mValue
=
end
;
}
;
void
rewind
(
T
pos
)
{
size_t
diff
=
mValue
-
pos
;
mMaxIncrement
+
=
diff
;
mValue
=
pos
;
}
operator
T
(
)
{
return
mValue
;
}
T
value
(
)
{
return
mValue
;
}
private
:
T
mValue
;
size_t
mMaxIncrement
;
}
;
template
<
typename
T
>
static
unsigned
NumDigits
(
T
n
)
{
if
(
n
<
1
)
{
return
1
;
}
double
l
=
log10
(
n
)
;
double
cl
=
ceil
(
l
)
;
return
l
=
=
cl
?
unsigned
(
cl
)
+
1
:
unsigned
(
cl
)
;
}
static
void
LeftPad
(
CheckedIncrement
<
char
*
>
&
b
size_t
pad
)
{
while
(
pad
-
-
>
0
)
{
*
(
b
+
+
)
=
'
'
;
}
}
static
void
WriteDigits
(
CheckedIncrement
<
char
*
>
&
b
size_t
i
size_t
num_digits
)
{
size_t
x
=
pow
(
10
double
(
num_digits
-
1
)
)
;
do
{
*
(
b
+
+
)
=
"
0123456789
"
[
(
i
/
x
)
%
10
]
;
x
/
=
10
;
}
while
(
x
>
0
)
;
}
void
FdPrintf
(
intptr_t
aFd
const
char
*
aFormat
.
.
.
)
{
if
(
aFd
=
=
0
)
{
return
;
}
char
buf
[
256
]
;
CheckedIncrement
<
char
*
>
b
(
buf
sizeof
(
buf
)
)
;
CheckedIncrement
<
const
char
*
>
f
(
aFormat
strlen
(
aFormat
)
+
1
)
;
va_list
ap
;
va_start
(
ap
aFormat
)
;
while
(
true
)
{
switch
(
*
f
)
{
case
'
\
0
'
:
goto
out
;
case
'
%
'
:
{
const
char
*
start
=
f
;
f
+
+
;
char
*
end
=
nullptr
;
size_t
width
=
strtoul
(
f
&
end
10
)
;
f
.
advance
(
end
)
;
switch
(
*
f
)
{
case
'
z
'
:
{
if
(
*
(
+
+
f
)
=
=
'
u
'
)
{
size_t
i
=
va_arg
(
ap
size_t
)
;
size_t
num_digits
=
NumDigits
(
i
)
;
LeftPad
(
b
width
>
num_digits
?
width
-
num_digits
:
0
)
;
WriteDigits
(
b
i
num_digits
)
;
}
else
{
*
(
b
+
+
)
=
'
%
'
;
f
.
rewind
(
start
)
;
}
break
;
}
case
'
p
'
:
{
intptr_t
ptr
=
va_arg
(
ap
intptr_t
)
;
*
(
b
+
+
)
=
'
0
'
;
*
(
b
+
+
)
=
'
x
'
;
int
x
=
sizeof
(
intptr_t
)
*
8
;
bool
wrote_msb
=
false
;
do
{
x
-
=
4
;
size_t
hex_digit
=
ptr
>
>
x
&
0xf
;
if
(
hex_digit
|
|
wrote_msb
)
{
*
(
b
+
+
)
=
"
0123456789abcdef
"
[
hex_digit
]
;
wrote_msb
=
true
;
}
}
while
(
x
>
0
)
;
if
(
!
wrote_msb
)
{
*
(
b
+
+
)
=
'
0
'
;
}
break
;
}
case
'
s
'
:
{
const
char
*
str
=
va_arg
(
ap
const
char
*
)
;
size_t
len
=
strlen
(
str
)
;
LeftPad
(
b
width
>
len
?
width
-
len
:
0
)
;
while
(
*
str
)
{
*
(
b
+
+
)
=
*
(
str
+
+
)
;
}
break
;
}
case
'
%
'
:
*
(
b
+
+
)
=
'
%
'
;
break
;
default
:
*
(
b
+
+
)
=
'
%
'
;
f
.
rewind
(
start
)
;
break
;
}
break
;
}
default
:
*
(
b
+
+
)
=
*
f
;
break
;
}
f
+
+
;
}
out
:
#
ifdef
_WIN32
DWORD
written
;
WriteFile
(
reinterpret_cast
<
HANDLE
>
(
aFd
)
buf
b
-
buf
&
written
nullptr
)
;
#
else
MOZ_UNUSED
(
write
(
aFd
buf
b
-
buf
)
)
;
#
endif
va_end
(
ap
)
;
}
