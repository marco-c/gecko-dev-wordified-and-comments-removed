GLOBAL
(
size_t
gMaxSubPageClass
gPageSize
/
2
>
=
kMinSubPageClass
?
gPageSize
/
2
:
0
)
GLOBAL
(
uint8_t
gNumSubPageClasses
[
]
(
)
GLOBAL_CONSTEXPR
-
>
uint8_t
{
if
GLOBAL_CONSTEXPR
(
gMaxSubPageClass
!
=
0
)
{
return
mozilla
:
:
FloorLog2
(
gMaxSubPageClass
)
-
LOG2
(
kMinSubPageClass
)
+
1
;
}
return
0
;
}
(
)
)
GLOBAL
(
uint8_t
gPageSize2Pow
GLOBAL_LOG2
(
gPageSize
)
)
GLOBAL
(
size_t
gPageSizeMask
gPageSize
-
1
)
GLOBAL
(
size_t
gChunkNumPages
kChunkSize
>
>
gPageSize2Pow
)
GLOBAL
(
size_t
gChunkHeaderNumPages
1
+
(
(
(
sizeof
(
arena_chunk_t
)
+
sizeof
(
arena_chunk_map_t
)
*
gChunkNumPages
+
gPageSizeMask
)
&
~
gPageSizeMask
)
>
>
gPageSize2Pow
)
)
GLOBAL
(
size_t
gMaxLargeClass
kChunkSize
-
gPageSize
-
(
gChunkHeaderNumPages
<
<
gPageSize2Pow
)
)
GLOBAL_ASSERT
(
1ULL
<
<
gPageSize2Pow
=
=
gPageSize
"
Page
size
is
not
a
power
of
two
"
)
;
GLOBAL_ASSERT
(
kQuantum
>
=
sizeof
(
void
*
)
)
;
GLOBAL_ASSERT
(
kQuantum
<
=
kQuantumWide
)
;
GLOBAL_ASSERT
(
!
kNumQuantumWideClasses
|
|
kQuantumWide
<
=
(
kMinSubPageClass
-
kMaxQuantumClass
)
)
;
GLOBAL_ASSERT
(
kQuantumWide
<
=
kMaxQuantumClass
)
;
GLOBAL_ASSERT
(
gMaxSubPageClass
>
=
kMinSubPageClass
|
|
gMaxSubPageClass
=
=
0
)
;
GLOBAL_ASSERT
(
gMaxLargeClass
>
=
gMaxSubPageClass
)
;
GLOBAL_ASSERT
(
kChunkSize
>
=
gPageSize
)
;
GLOBAL_ASSERT
(
kQuantum
*
4
<
=
kChunkSize
)
;
