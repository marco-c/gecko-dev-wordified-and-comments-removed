#
include
"
mozjemalloc_types
.
h
"
#
include
"
mozilla
/
MacroArgs
.
h
"
#
define
MACRO_CALL
(
a
b
)
a
b
#
define
MACRO_CALL2
(
a
b
)
a
b
#
define
ARGS_HELPER
(
name
.
.
.
)
MACRO_CALL2
(
\
MOZ_PASTE_PREFIX_AND_ARG_COUNT
(
name
#
#
__VA_ARGS__
)
\
(
__VA_ARGS__
)
)
#
define
TYPED_ARGS0
(
)
#
define
TYPED_ARGS1
(
t1
)
t1
arg1
#
define
TYPED_ARGS2
(
t1
t2
)
TYPED_ARGS1
(
t1
)
t2
arg2
#
define
TYPED_ARGS3
(
t1
t2
t3
)
TYPED_ARGS2
(
t1
t2
)
t3
arg3
#
define
ARGS0
(
)
#
define
ARGS1
(
t1
)
arg1
#
define
ARGS2
(
t1
t2
)
ARGS1
(
t1
)
arg2
#
define
ARGS3
(
t1
t2
t3
)
ARGS2
(
t1
t2
)
arg3
template
<
typename
T
>
struct
Allocator
:
public
T
{
#
define
MALLOC_FUNCS
(
MALLOC_FUNCS_MALLOC
|
MALLOC_FUNCS_JEMALLOC
)
#
define
MALLOC_DECL
(
name
return_type
.
.
.
)
\
static
return_type
name
(
__VA_ARGS__
)
;
#
include
"
malloc_decls
.
h
"
}
;
struct
MozJemallocBase
{
}
;
typedef
Allocator
<
MozJemallocBase
>
MozJemalloc
;
#
ifdef
MOZ_REPLACE_MALLOC
struct
ReplaceMallocBase
{
}
;
typedef
Allocator
<
ReplaceMallocBase
>
ReplaceMalloc
;
typedef
ReplaceMalloc
DefaultMalloc
;
#
else
typedef
MozJemalloc
DefaultMalloc
;
#
endif
