#
ifndef
mozjemalloc_utils_h
#
define
mozjemalloc_utils_h
#
include
<
optional
>
#
include
<
type_traits
>
#
if
defined
(
MOZ_MEMORY
)
&
&
defined
(
XP_WIN
)
#
include
"
mozmemory_wrap
.
h
"
#
endif
namespace
mozilla
{
namespace
detail
{
template
<
typename
T
>
constexpr
bool
is_std_optional
=
false
;
template
<
typename
T
>
constexpr
bool
is_std_optional
<
std
:
:
optional
<
T
>
>
=
true
;
}
struct
StallSpecs
{
size_t
maxAttempts
;
size_t
delayMs
;
template
<
typename
DelayFunc
typename
OpFunc
>
auto
StallAndRetry
(
DelayFunc
&
&
aDelayFunc
OpFunc
&
&
aOperation
)
const
-
>
decltype
(
aOperation
(
)
)
{
{
using
detail
:
:
is_std_optional
;
static_assert
(
is_std_optional
<
decltype
(
aOperation
(
)
)
>
"
aOperation
(
)
must
return
std
:
:
optional
"
)
;
}
for
(
size_t
i
=
0
;
i
<
maxAttempts
;
+
+
i
)
{
aDelayFunc
(
delayMs
)
;
if
(
const
auto
opt
=
aOperation
(
)
)
{
return
opt
;
}
}
return
std
:
:
nullopt
;
}
}
;
#
if
defined
(
MOZ_MEMORY
)
&
&
defined
(
XP_WIN
)
MOZ_JEMALLOC_API
StallSpecs
GetAllocatorStallSpecs
(
)
;
#
endif
}
#
endif
