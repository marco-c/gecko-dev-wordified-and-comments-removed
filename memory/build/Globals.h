#
ifndef
GLOBALS_H
#
define
GLOBALS_H
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
HelperMacros
.
h
"
#
include
"
mozilla
/
Literals
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
Constants
.
h
"
#
include
"
Chunk
.
h
"
#
include
"
Utils
.
h
"
#
ifdef
MOZ_DEBUG
#
define
MALLOC_RUNTIME_CONFIG
#
endif
#
ifndef
MALLOC_RUNTIME_CONFIG
#
if
!
defined
(
__ia64__
)
&
&
!
defined
(
__sparc__
)
&
&
!
defined
(
__mips__
)
&
&
\
!
defined
(
__aarch64__
)
&
&
!
defined
(
__powerpc__
)
&
&
!
defined
(
XP_MACOSX
)
&
&
\
!
defined
(
__loongarch__
)
#
define
MALLOC_STATIC_PAGESIZE
1
#
endif
#
endif
namespace
mozilla
{
#
ifdef
MALLOC_STATIC_PAGESIZE
#
if
defined
(
__powerpc64__
)
static
const
size_t
gPageSize
=
64_KiB
;
#
elif
defined
(
__loongarch64
)
static
const
size_t
gPageSize
=
16_KiB
;
#
else
static
const
size_t
gPageSize
=
4_KiB
;
#
endif
static
const
size_t
gRealPageSize
=
gPageSize
;
#
else
extern
size_t
gRealPageSize
;
extern
size_t
gPageSize
;
#
endif
#
ifdef
MALLOC_STATIC_PAGESIZE
#
define
GLOBAL
(
type
name
value
)
static
const
type
name
=
value
;
#
define
GLOBAL_LOG2
LOG2
#
define
GLOBAL_ASSERT_HELPER1
(
x
)
static_assert
(
x
#
x
)
#
define
GLOBAL_ASSERT_HELPER2
(
x
y
)
static_assert
(
x
y
)
#
define
GLOBAL_ASSERT
(
.
.
.
)
\
\
MOZ_PASTE_PREFIX_AND_ARG_COUNT
(
GLOBAL_ASSERT_HELPER
__VA_ARGS__
)
\
(
__VA_ARGS__
)
#
define
GLOBAL_CONSTEXPR
constexpr
#
include
"
Globals_inc
.
h
"
#
undef
GLOBAL_CONSTEXPR
#
undef
GLOBAL_ASSERT
#
undef
GLOBAL_ASSERT_HELPER1
#
undef
GLOBAL_ASSERT_HELPER2
#
undef
GLOBAL_LOG2
#
undef
GLOBAL
#
else
#
define
GLOBAL
(
type
name
value
)
extern
type
name
;
#
define
GLOBAL_ASSERT
(
.
.
.
)
#
include
"
Globals_inc
.
h
"
#
undef
GLOBAL_ASSERT
#
undef
GLOBAL
void
DefineGlobals
(
)
;
#
endif
}
#
define
gMaxBinClass
\
(
gMaxSubPageClass
?
gMaxSubPageClass
:
kMaxQuantumWideClass
)
#
define
CHUNK_CEILING
(
s
)
(
(
(
s
)
+
kChunkSizeMask
)
&
~
kChunkSizeMask
)
#
define
CACHELINE_CEILING
(
s
)
\
(
(
(
s
)
+
(
kCacheLineSize
-
1
)
)
&
~
(
kCacheLineSize
-
1
)
)
#
define
QUANTUM_CEILING
(
a
)
(
(
(
a
)
+
(
kQuantumMask
)
)
&
~
(
kQuantumMask
)
)
#
define
QUANTUM_WIDE_CEILING
(
a
)
\
(
(
(
a
)
+
(
kQuantumWideMask
)
)
&
~
(
kQuantumWideMask
)
)
#
define
SUBPAGE_CEILING
(
a
)
(
RoundUpPow2
(
a
)
)
#
define
PAGE_CEILING
(
s
)
(
(
(
s
)
+
gPageSizeMask
)
&
~
gPageSizeMask
)
#
define
NUM_SMALL_CLASSES
\
(
kNumTinyClasses
+
kNumQuantumClasses
+
kNumQuantumWideClasses
+
\
gNumSubPageClasses
)
static
inline
arena_chunk_t
*
GetChunkForPtr
(
const
void
*
aPtr
)
{
return
(
arena_chunk_t
*
)
(
uintptr_t
(
aPtr
)
&
~
kChunkSizeMask
)
;
}
static
inline
size_t
GetChunkOffsetForPtr
(
const
void
*
aPtr
)
{
return
(
size_t
)
(
uintptr_t
(
aPtr
)
&
kChunkSizeMask
)
;
}
#
endif
