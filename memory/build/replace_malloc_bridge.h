#
ifndef
replace_malloc_bridge_h
#
define
replace_malloc_bridge_h
struct
ReplaceMallocBridge
;
#
include
"
mozilla
/
Types
.
h
"
MOZ_BEGIN_EXTERN_C
#
ifndef
REPLACE_MALLOC_IMPL
MFBT_API
ReplaceMallocBridge
*
get_bridge
(
)
;
#
endif
#
define
MALLOC_DECL
(
name
return_type
.
.
.
)
\
typedef
return_type
(
name
#
#
_impl_t
)
(
__VA_ARGS__
)
;
#
include
"
malloc_decls
.
h
"
#
define
MALLOC_DECL
(
name
return_type
.
.
.
)
name
#
#
_impl_t
*
name
;
typedef
struct
{
#
include
"
malloc_decls
.
h
"
}
malloc_table_t
;
MOZ_END_EXTERN_C
#
ifdef
__cplusplus
namespace
mozilla
{
namespace
detail
{
template
<
typename
R
typename
.
.
.
Args
>
struct
AllocHookType
{
using
Type
=
R
(
*
)
(
R
Args
.
.
.
)
;
}
;
template
<
typename
.
.
.
Args
>
struct
AllocHookType
<
void
Args
.
.
.
>
{
using
Type
=
void
(
*
)
(
Args
.
.
.
)
;
}
;
}
}
#
define
MALLOC_DECL
(
name
return_type
.
.
.
)
\
typename
mozilla
:
:
detail
:
:
AllocHookType
<
return_type
#
#
__VA_ARGS__
>
:
:
Type
\
name
#
#
_hook
;
typedef
struct
{
#
include
"
malloc_decls
.
h
"
void
(
*
realloc_hook_before
)
(
void
*
aPtr
)
;
}
malloc_hook_table_t
;
namespace
mozilla
{
namespace
dmd
{
struct
DMDFuncs
;
}
namespace
phc
{
enum
PHCState
{
OnlyFree
Enabled
}
;
class
AddrInfo
;
struct
MemoryUsage
{
size_t
mMetadataBytes
=
0
;
size_t
mFragmentationBytes
=
0
;
}
;
}
struct
DebugFdRegistry
{
virtual
void
RegisterHandle
(
intptr_t
aFd
)
;
virtual
void
UnRegisterHandle
(
intptr_t
aFd
)
;
}
;
}
struct
ReplaceMallocBridge
{
ReplaceMallocBridge
(
)
:
mVersion
(
6
)
{
}
virtual
mozilla
:
:
dmd
:
:
DMDFuncs
*
GetDMDFuncs
(
)
{
return
nullptr
;
}
virtual
void
InitDebugFd
(
mozilla
:
:
DebugFdRegistry
&
)
{
}
virtual
const
malloc_table_t
*
RegisterHook
(
const
char
*
aName
const
malloc_table_t
*
aTable
const
malloc_hook_table_t
*
aHookTable
)
{
return
nullptr
;
}
virtual
bool
IsPHCAllocation
(
const
void
*
mozilla
:
:
phc
:
:
AddrInfo
*
)
{
return
false
;
}
virtual
void
DisablePHCOnCurrentThread
(
)
{
}
virtual
void
ReenablePHCOnCurrentThread
(
)
{
}
virtual
bool
IsPHCEnabledOnCurrentThread
(
)
{
return
false
;
}
virtual
void
PHCMemoryUsage
(
mozilla
:
:
phc
:
:
MemoryUsage
&
aMemoryUsage
)
{
}
virtual
void
SetPHCState
(
mozilla
:
:
phc
:
:
PHCState
aState
)
{
}
#
ifndef
REPLACE_MALLOC_IMPL
static
ReplaceMallocBridge
*
Get
(
int
aMinimumVersion
)
{
static
ReplaceMallocBridge
*
sSingleton
=
get_bridge
(
)
;
return
(
sSingleton
&
&
sSingleton
-
>
mVersion
>
=
aMinimumVersion
)
?
sSingleton
:
nullptr
;
}
#
endif
protected
:
const
int
mVersion
;
}
;
#
ifndef
REPLACE_MALLOC_IMPL
struct
ReplaceMalloc
{
static
mozilla
:
:
dmd
:
:
DMDFuncs
*
GetDMDFuncs
(
)
{
auto
singleton
=
ReplaceMallocBridge
:
:
Get
(
1
)
;
return
singleton
?
singleton
-
>
GetDMDFuncs
(
)
:
nullptr
;
}
static
void
InitDebugFd
(
mozilla
:
:
DebugFdRegistry
&
aRegistry
)
{
auto
singleton
=
ReplaceMallocBridge
:
:
Get
(
2
)
;
if
(
singleton
)
{
singleton
-
>
InitDebugFd
(
aRegistry
)
;
}
}
static
const
malloc_table_t
*
RegisterHook
(
const
char
*
aName
const
malloc_table_t
*
aTable
const
malloc_hook_table_t
*
aHookTable
)
{
auto
singleton
=
ReplaceMallocBridge
:
:
Get
(
3
)
;
return
singleton
?
singleton
-
>
RegisterHook
(
aName
aTable
aHookTable
)
:
nullptr
;
}
static
bool
IsPHCAllocation
(
const
void
*
aPtr
mozilla
:
:
phc
:
:
AddrInfo
*
aOut
)
{
auto
singleton
=
ReplaceMallocBridge
:
:
Get
(
4
)
;
return
singleton
?
singleton
-
>
IsPHCAllocation
(
aPtr
aOut
)
:
false
;
}
static
void
DisablePHCOnCurrentThread
(
)
{
auto
singleton
=
ReplaceMallocBridge
:
:
Get
(
4
)
;
if
(
singleton
)
{
singleton
-
>
DisablePHCOnCurrentThread
(
)
;
}
}
static
void
ReenablePHCOnCurrentThread
(
)
{
auto
singleton
=
ReplaceMallocBridge
:
:
Get
(
4
)
;
if
(
singleton
)
{
singleton
-
>
ReenablePHCOnCurrentThread
(
)
;
}
}
static
bool
IsPHCEnabledOnCurrentThread
(
)
{
auto
singleton
=
ReplaceMallocBridge
:
:
Get
(
4
)
;
return
singleton
?
singleton
-
>
IsPHCEnabledOnCurrentThread
(
)
:
false
;
}
static
void
PHCMemoryUsage
(
mozilla
:
:
phc
:
:
MemoryUsage
&
aMemoryUsage
)
{
auto
singleton
=
ReplaceMallocBridge
:
:
Get
(
5
)
;
if
(
singleton
)
{
singleton
-
>
PHCMemoryUsage
(
aMemoryUsage
)
;
}
}
static
void
SetPHCState
(
mozilla
:
:
phc
:
:
PHCState
aPHCState
)
{
auto
singleton
=
ReplaceMallocBridge
:
:
Get
(
6
)
;
if
(
singleton
)
{
singleton
-
>
SetPHCState
(
aPHCState
)
;
}
}
}
;
#
endif
#
endif
#
endif
