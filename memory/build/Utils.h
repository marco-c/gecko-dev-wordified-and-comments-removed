#
ifndef
Utils_h
#
define
Utils_h
#
include
"
mozilla
/
TemplateLib
.
h
"
template
<
size_t
N
>
struct
Log2
:
mozilla
:
:
tl
:
:
CeilingLog2
<
N
>
{
using
mozilla
:
:
tl
:
:
CeilingLog2
<
N
>
:
:
value
;
static_assert
(
1ULL
<
<
value
=
=
N
"
Number
is
not
a
power
of
2
"
)
;
}
;
#
define
LOG2
(
N
)
Log2
<
N
>
:
:
value
template
<
typename
T
>
int
CompareAddr
(
T
*
aAddr1
T
*
aAddr2
)
{
uintptr_t
addr1
=
reinterpret_cast
<
uintptr_t
>
(
aAddr1
)
;
uintptr_t
addr2
=
reinterpret_cast
<
uintptr_t
>
(
aAddr2
)
;
return
(
addr1
>
addr2
)
-
(
addr1
<
addr2
)
;
}
constexpr
unsigned
long
long
int
operator
"
"
_KiB
(
unsigned
long
long
int
aNum
)
{
return
aNum
*
1024
;
}
constexpr
unsigned
long
long
int
operator
"
"
_MiB
(
unsigned
long
long
int
aNum
)
{
return
aNum
*
1024_KiB
;
}
#
endif
