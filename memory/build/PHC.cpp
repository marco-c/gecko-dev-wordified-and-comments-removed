#
include
"
PHC
.
h
"
#
include
<
stdlib
.
h
>
#
include
<
time
.
h
>
#
include
<
algorithm
>
#
ifdef
XP_WIN
#
include
<
process
.
h
>
#
else
#
include
<
sys
/
mman
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
pthread
.
h
>
#
include
<
unistd
.
h
>
#
endif
#
include
"
mozjemalloc
.
h
"
#
include
"
replace_malloc
.
h
"
#
include
"
mozjemalloc
.
h
"
#
include
"
FdPrintf
.
h
"
#
include
"
Mutex
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
StackWalk
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
XorShift128PlusRNG
.
h
"
using
namespace
mozilla
;
#
ifdef
ANDROID
extern
"
C
"
MOZ_EXPORT
int
pthread_atfork
(
void
(
*
)
(
void
)
void
(
*
)
(
void
)
void
(
*
)
(
void
)
)
;
#
endif
#
ifndef
DISALLOW_COPY_AND_ASSIGN
#
define
DISALLOW_COPY_AND_ASSIGN
(
T
)
\
T
(
const
T
&
)
;
\
void
operator
=
(
const
T
&
)
#
endif
class
InfallibleAllocPolicy
{
public
:
static
void
AbortOnFailure
(
const
void
*
aP
)
{
if
(
!
aP
)
{
MOZ_CRASH
(
"
PHC
failed
to
allocate
"
)
;
}
}
template
<
class
T
>
static
T
*
new_
(
)
{
void
*
p
=
MozJemalloc
:
:
malloc
(
sizeof
(
T
)
)
;
AbortOnFailure
(
p
)
;
return
new
(
p
)
T
;
}
}
;
class
StackTrace
:
public
phc
:
:
StackTrace
{
public
:
StackTrace
(
)
=
default
;
void
Clear
(
)
{
mLength
=
0
;
}
void
Fill
(
)
;
private
:
static
void
StackWalkCallback
(
uint32_t
aFrameNumber
void
*
aPc
void
*
aSp
void
*
aClosure
)
{
StackTrace
*
st
=
(
StackTrace
*
)
aClosure
;
MOZ_ASSERT
(
st
-
>
mLength
<
kMaxFrames
)
;
st
-
>
mPcs
[
st
-
>
mLength
]
=
aPc
;
st
-
>
mLength
+
+
;
MOZ_ASSERT
(
st
-
>
mLength
=
=
aFrameNumber
)
;
}
}
;
void
StackTrace
:
:
Fill
(
)
{
mLength
=
0
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
_M_IX86
)
CONTEXT
context
;
RtlCaptureContext
(
&
context
)
;
void
*
*
fp
=
reinterpret_cast
<
void
*
*
>
(
context
.
Ebp
)
;
PNT_TIB
pTib
=
reinterpret_cast
<
PNT_TIB
>
(
NtCurrentTeb
(
)
)
;
void
*
stackEnd
=
static_cast
<
void
*
>
(
pTib
-
>
StackBase
)
;
FramePointerStackWalk
(
StackWalkCallback
kMaxFrames
this
fp
stackEnd
)
;
#
elif
defined
(
XP_MACOSX
)
#
pragma
GCC
diagnostic
push
#
pragma
GCC
diagnostic
ignored
"
-
Wframe
-
address
"
void
*
*
fp
=
reinterpret_cast
<
void
*
*
>
(
__builtin_frame_address
(
1
)
)
;
#
pragma
GCC
diagnostic
pop
void
*
stackEnd
=
pthread_get_stackaddr_np
(
pthread_self
(
)
)
;
FramePointerStackWalk
(
StackWalkCallback
kMaxFrames
this
fp
stackEnd
)
;
#
else
MozStackWalk
(
StackWalkCallback
nullptr
kMaxFrames
this
)
;
#
endif
}
#
define
PHC_LOGGING
0
#
if
PHC_LOGGING
static
size_t
GetPid
(
)
{
return
size_t
(
getpid
(
)
)
;
}
static
size_t
GetTid
(
)
{
#
if
defined
(
XP_WIN
)
return
size_t
(
GetCurrentThreadId
(
)
)
;
#
else
return
size_t
(
pthread_self
(
)
)
;
#
endif
}
#
if
defined
(
XP_WIN
)
#
define
LOG_STDERR
\
reinterpret_cast
<
intptr_t
>
(
GetStdHandle
(
STD_ERROR_HANDLE
)
)
#
else
#
define
LOG_STDERR
2
#
endif
#
define
LOG
(
fmt
.
.
.
)
\
FdPrintf
(
LOG_STDERR
"
PHC
[
%
zu
%
zu
~
%
zu
]
"
fmt
GetPid
(
)
GetTid
(
)
\
size_t
(
GAtomic
:
:
Now
(
)
)
__VA_ARGS__
)
#
else
#
define
LOG
(
fmt
.
.
.
)
#
endif
using
Time
=
uint64_t
;
using
Delay
=
uint32_t
;
static
const
size_t
kPageSize
=
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
__aarch64__
)
16384
#
else
4096
#
endif
;
static
const
size_t
kPhcAlign
=
1024
*
1024
;
static_assert
(
IsPowerOfTwo
(
kPhcAlign
)
)
;
static_assert
(
(
kPhcAlign
%
kPageSize
)
=
=
0
)
;
static
const
size_t
kNumAllocPages
=
kPageSize
=
=
4096
?
4096
:
1024
;
static
const
size_t
kNumAllPages
=
kNumAllocPages
*
2
+
1
;
static
const
size_t
kAllPagesSize
=
kNumAllPages
*
kPageSize
;
static
const
size_t
kAllPagesJemallocSize
=
kAllPagesSize
-
kPageSize
;
#
define
DEFAULT_STATE
mozilla
:
:
phc
:
:
OnlyFree
static
const
Time
kMaxTime
=
~
(
Time
(
0
)
)
;
static
const
Delay
kAvgFirstAllocDelay
=
64
*
1024
;
static
const
Delay
kAvgAllocDelay
=
16
*
1024
;
static
const
Delay
kAvgPageReuseDelay
=
256
*
1024
;
template
<
Delay
AvgDelay
>
constexpr
Delay
Rnd64ToDelay
(
uint64_t
aRnd
)
{
static_assert
(
IsPowerOfTwo
(
AvgDelay
)
"
must
be
a
power
of
two
"
)
;
return
aRnd
%
(
AvgDelay
*
2
)
+
1
;
}
class
PtrKind
{
private
:
enum
class
Tag
:
uint8_t
{
Nothing
GuardPage
AllocPage
}
;
Tag
mTag
;
uintptr_t
mIndex
;
public
:
PtrKind
(
const
void
*
aPtr
const
uint8_t
*
aPagesStart
const
uint8_t
*
aPagesLimit
)
{
if
(
!
(
aPagesStart
<
=
aPtr
&
&
aPtr
<
aPagesLimit
)
)
{
mTag
=
Tag
:
:
Nothing
;
}
else
{
uintptr_t
offset
=
static_cast
<
const
uint8_t
*
>
(
aPtr
)
-
aPagesStart
;
uintptr_t
allPageIndex
=
offset
/
kPageSize
;
MOZ_ASSERT
(
allPageIndex
<
kNumAllPages
)
;
if
(
allPageIndex
&
1
)
{
uintptr_t
allocPageIndex
=
allPageIndex
/
2
;
MOZ_ASSERT
(
allocPageIndex
<
kNumAllocPages
)
;
mTag
=
Tag
:
:
AllocPage
;
mIndex
=
allocPageIndex
;
}
else
{
mTag
=
Tag
:
:
GuardPage
;
}
}
}
bool
IsNothing
(
)
const
{
return
mTag
=
=
Tag
:
:
Nothing
;
}
bool
IsGuardPage
(
)
const
{
return
mTag
=
=
Tag
:
:
GuardPage
;
}
uintptr_t
AllocPageIndex
(
)
const
{
MOZ_RELEASE_ASSERT
(
mTag
=
=
Tag
:
:
AllocPage
)
;
return
mIndex
;
}
}
;
class
GAtomic
{
public
:
static
void
Init
(
Delay
aFirstDelay
)
{
sAllocDelay
=
aFirstDelay
;
LOG
(
"
Initial
sAllocDelay
<
-
%
zu
\
n
"
size_t
(
aFirstDelay
)
)
;
}
static
Time
Now
(
)
{
return
sNow
;
}
static
void
IncrementNow
(
)
{
sNow
+
+
;
}
static
int32_t
DecrementDelay
(
)
{
return
-
-
sAllocDelay
;
}
static
void
SetAllocDelay
(
Delay
aAllocDelay
)
{
sAllocDelay
=
aAllocDelay
;
}
static
bool
AllocDelayHasWrapped
(
)
{
return
sAllocDelay
>
2
*
std
:
:
max
(
kAvgAllocDelay
kAvgFirstAllocDelay
)
;
}
private
:
static
Atomic
<
Time
Relaxed
>
sNow
;
static
Atomic
<
Delay
ReleaseAcquire
>
sAllocDelay
;
}
;
Atomic
<
Time
Relaxed
>
GAtomic
:
:
sNow
;
Atomic
<
Delay
ReleaseAcquire
>
GAtomic
:
:
sAllocDelay
;
class
GConst
{
private
:
uint8_t
*
const
mPagesStart
;
uint8_t
*
const
mPagesLimit
;
uint8_t
*
AllocAllPages
(
)
{
void
*
pages
=
MozJemalloc
:
:
memalign
(
kPhcAlign
kAllPagesJemallocSize
)
;
if
(
!
pages
)
{
MOZ_CRASH
(
)
;
}
#
ifdef
XP_WIN
if
(
!
VirtualFree
(
pages
kAllPagesJemallocSize
MEM_DECOMMIT
)
)
{
MOZ_CRASH
(
"
VirtualFree
failed
"
)
;
}
#
else
if
(
mmap
(
pages
kAllPagesJemallocSize
PROT_NONE
MAP_FIXED
|
MAP_PRIVATE
|
MAP_ANON
-
1
0
)
=
=
MAP_FAILED
)
{
MOZ_CRASH
(
"
mmap
failed
"
)
;
}
#
endif
return
static_cast
<
uint8_t
*
>
(
pages
)
;
}
public
:
GConst
(
)
:
mPagesStart
(
AllocAllPages
(
)
)
mPagesLimit
(
mPagesStart
+
kAllPagesSize
)
{
LOG
(
"
AllocAllPages
at
%
p
.
.
%
p
\
n
"
mPagesStart
mPagesLimit
)
;
}
class
PtrKind
PtrKind
(
const
void
*
aPtr
)
{
class
PtrKind
pk
(
aPtr
mPagesStart
mPagesLimit
)
;
return
pk
;
}
bool
IsInFirstGuardPage
(
const
void
*
aPtr
)
{
return
mPagesStart
<
=
aPtr
&
&
aPtr
<
mPagesStart
+
kPageSize
;
}
uint8_t
*
AllocPagePtr
(
uintptr_t
aIndex
)
{
MOZ_ASSERT
(
aIndex
<
kNumAllocPages
)
;
return
mPagesStart
+
(
2
*
aIndex
+
1
)
*
kPageSize
;
}
}
;
static
GConst
*
gConst
;
using
GMutLock
=
const
MutexAutoLock
&
;
class
GMut
{
enum
class
AllocPageState
{
NeverAllocated
=
0
InUse
=
1
Freed
=
2
}
;
class
AllocPageInfo
{
public
:
AllocPageInfo
(
)
:
mState
(
AllocPageState
:
:
NeverAllocated
)
mBaseAddr
(
nullptr
)
mReuseTime
(
0
)
{
}
AllocPageState
mState
;
Maybe
<
arena_id_t
>
mArenaId
;
uint8_t
*
mBaseAddr
;
size_t
UsableSize
(
)
const
{
return
mState
=
=
AllocPageState
:
:
NeverAllocated
?
0
:
kPageSize
-
(
reinterpret_cast
<
uintptr_t
>
(
mBaseAddr
)
&
(
kPageSize
-
1
)
)
;
}
size_t
FragmentationBytes
(
)
const
{
MOZ_ASSERT
(
kPageSize
>
=
UsableSize
(
)
)
;
return
mState
=
=
AllocPageState
:
:
InUse
?
kPageSize
-
UsableSize
(
)
:
0
;
}
Maybe
<
StackTrace
>
mAllocStack
;
Maybe
<
StackTrace
>
mFreeStack
;
Time
mReuseTime
;
}
;
public
:
static
Mutex
sMutex
MOZ_UNANNOTATED
;
GMut
(
)
:
mRNG
(
RandomSeed
<
0
>
(
)
RandomSeed
<
1
>
(
)
)
{
sMutex
.
Init
(
)
;
}
uint64_t
Random64
(
GMutLock
)
{
return
mRNG
.
next
(
)
;
}
bool
IsPageInUse
(
GMutLock
uintptr_t
aIndex
)
{
return
mAllocPages
[
aIndex
]
.
mState
=
=
AllocPageState
:
:
InUse
;
}
bool
IsPageAllocatable
(
GMutLock
uintptr_t
aIndex
Time
aNow
)
{
const
AllocPageInfo
&
page
=
mAllocPages
[
aIndex
]
;
return
page
.
mState
!
=
AllocPageState
:
:
InUse
&
&
aNow
>
=
page
.
mReuseTime
;
}
uint8_t
*
AllocPageBaseAddr
(
GMutLock
uintptr_t
aIndex
)
{
return
mAllocPages
[
aIndex
]
.
mBaseAddr
;
}
Maybe
<
arena_id_t
>
PageArena
(
GMutLock
aLock
uintptr_t
aIndex
)
{
const
AllocPageInfo
&
page
=
mAllocPages
[
aIndex
]
;
AssertAllocPageInUse
(
aLock
page
)
;
return
page
.
mArenaId
;
}
size_t
PageUsableSize
(
GMutLock
aLock
uintptr_t
aIndex
)
{
const
AllocPageInfo
&
page
=
mAllocPages
[
aIndex
]
;
AssertAllocPageInUse
(
aLock
page
)
;
return
page
.
UsableSize
(
)
;
}
size_t
FragmentationBytes
(
)
const
{
size_t
sum
=
0
;
for
(
const
auto
&
page
:
mAllocPages
)
{
sum
+
=
page
.
FragmentationBytes
(
)
;
}
return
sum
;
}
void
SetPageInUse
(
GMutLock
aLock
uintptr_t
aIndex
const
Maybe
<
arena_id_t
>
&
aArenaId
uint8_t
*
aBaseAddr
const
StackTrace
&
aAllocStack
)
{
AllocPageInfo
&
page
=
mAllocPages
[
aIndex
]
;
AssertAllocPageNotInUse
(
aLock
page
)
;
page
.
mState
=
AllocPageState
:
:
InUse
;
page
.
mArenaId
=
aArenaId
;
page
.
mBaseAddr
=
aBaseAddr
;
page
.
mAllocStack
=
Some
(
aAllocStack
)
;
page
.
mFreeStack
=
Nothing
(
)
;
page
.
mReuseTime
=
kMaxTime
;
}
#
if
PHC_LOGGING
Time
GetFreeTime
(
uintptr_t
aIndex
)
const
{
return
mFreeTime
[
aIndex
]
;
}
#
endif
void
ResizePageInUse
(
GMutLock
aLock
uintptr_t
aIndex
const
Maybe
<
arena_id_t
>
&
aArenaId
uint8_t
*
aNewBaseAddr
const
StackTrace
&
aAllocStack
)
{
AllocPageInfo
&
page
=
mAllocPages
[
aIndex
]
;
AssertAllocPageInUse
(
aLock
page
)
;
if
(
aArenaId
.
isSome
(
)
)
{
MOZ_RELEASE_ASSERT
(
page
.
mArenaId
=
=
aArenaId
)
;
}
page
.
mBaseAddr
=
aNewBaseAddr
;
page
.
mAllocStack
=
Some
(
aAllocStack
)
;
}
;
void
SetPageFreed
(
GMutLock
aLock
uintptr_t
aIndex
const
Maybe
<
arena_id_t
>
&
aArenaId
const
StackTrace
&
aFreeStack
Delay
aReuseDelay
)
{
AllocPageInfo
&
page
=
mAllocPages
[
aIndex
]
;
AssertAllocPageInUse
(
aLock
page
)
;
page
.
mState
=
AllocPageState
:
:
Freed
;
if
(
aArenaId
.
isSome
(
)
)
{
MOZ_RELEASE_ASSERT
(
page
.
mArenaId
=
=
aArenaId
)
;
}
page
.
mFreeStack
=
Some
(
aFreeStack
)
;
Time
now
=
GAtomic
:
:
Now
(
)
;
#
if
PHC_LOGGING
mFreeTime
[
aIndex
]
=
now
;
#
endif
page
.
mReuseTime
=
now
+
aReuseDelay
;
}
static
void
CrashOnGuardPage
(
void
*
aPtr
)
{
LOG
(
"
CrashOnGuardPage
(
%
p
)
bounds
violation
\
n
"
aPtr
)
;
*
static_cast
<
uint8_t
*
>
(
aPtr
)
=
0
;
MOZ_CRASH
(
"
unreachable
"
)
;
}
void
EnsureValidAndInUse
(
GMutLock
void
*
aPtr
uintptr_t
aIndex
)
MOZ_REQUIRES
(
sMutex
)
{
const
AllocPageInfo
&
page
=
mAllocPages
[
aIndex
]
;
MOZ_RELEASE_ASSERT
(
page
.
mBaseAddr
=
=
aPtr
)
;
if
(
page
.
mState
=
=
AllocPageState
:
:
Freed
)
{
LOG
(
"
EnsureValidAndInUse
(
%
p
)
use
-
after
-
free
\
n
"
aPtr
)
;
sMutex
.
Unlock
(
)
;
*
static_cast
<
uint8_t
*
>
(
aPtr
)
=
0
;
MOZ_CRASH
(
"
unreachable
"
)
;
}
}
void
FillAddrInfo
(
uintptr_t
aIndex
const
void
*
aBaseAddr
bool
isGuardPage
phc
:
:
AddrInfo
&
aOut
)
{
const
AllocPageInfo
&
page
=
mAllocPages
[
aIndex
]
;
if
(
isGuardPage
)
{
aOut
.
mKind
=
phc
:
:
AddrInfo
:
:
Kind
:
:
GuardPage
;
}
else
{
switch
(
page
.
mState
)
{
case
AllocPageState
:
:
NeverAllocated
:
aOut
.
mKind
=
phc
:
:
AddrInfo
:
:
Kind
:
:
NeverAllocatedPage
;
break
;
case
AllocPageState
:
:
InUse
:
aOut
.
mKind
=
phc
:
:
AddrInfo
:
:
Kind
:
:
InUsePage
;
break
;
case
AllocPageState
:
:
Freed
:
aOut
.
mKind
=
phc
:
:
AddrInfo
:
:
Kind
:
:
FreedPage
;
break
;
default
:
MOZ_CRASH
(
)
;
}
}
aOut
.
mBaseAddr
=
page
.
mBaseAddr
;
aOut
.
mUsableSize
=
page
.
UsableSize
(
)
;
aOut
.
mAllocStack
=
page
.
mAllocStack
;
aOut
.
mFreeStack
=
page
.
mFreeStack
;
}
void
FillJemallocPtrInfo
(
GMutLock
const
void
*
aPtr
uintptr_t
aIndex
jemalloc_ptr_info_t
*
aInfo
)
{
const
AllocPageInfo
&
page
=
mAllocPages
[
aIndex
]
;
switch
(
page
.
mState
)
{
case
AllocPageState
:
:
NeverAllocated
:
break
;
case
AllocPageState
:
:
InUse
:
{
uint8_t
*
base
=
page
.
mBaseAddr
;
uint8_t
*
limit
=
base
+
page
.
UsableSize
(
)
;
if
(
base
<
=
aPtr
&
&
aPtr
<
limit
)
{
*
aInfo
=
{
TagLiveAlloc
page
.
mBaseAddr
page
.
UsableSize
(
)
page
.
mArenaId
.
valueOr
(
0
)
}
;
return
;
}
break
;
}
case
AllocPageState
:
:
Freed
:
{
uint8_t
*
base
=
page
.
mBaseAddr
;
uint8_t
*
limit
=
base
+
page
.
UsableSize
(
)
;
if
(
base
<
=
aPtr
&
&
aPtr
<
limit
)
{
*
aInfo
=
{
TagFreedAlloc
page
.
mBaseAddr
page
.
UsableSize
(
)
page
.
mArenaId
.
valueOr
(
0
)
}
;
return
;
}
break
;
}
default
:
MOZ_CRASH
(
)
;
}
*
aInfo
=
{
TagUnknown
nullptr
0
0
}
;
}
#
ifndef
XP_WIN
static
void
prefork
(
)
MOZ_NO_THREAD_SAFETY_ANALYSIS
{
sMutex
.
Lock
(
)
;
}
static
void
postfork_parent
(
)
MOZ_NO_THREAD_SAFETY_ANALYSIS
{
sMutex
.
Unlock
(
)
;
}
static
void
postfork_child
(
)
{
sMutex
.
Init
(
)
;
}
#
endif
#
if
PHC_LOGGING
void
IncPageAllocHits
(
GMutLock
)
{
mPageAllocHits
+
+
;
}
void
IncPageAllocMisses
(
GMutLock
)
{
mPageAllocMisses
+
+
;
}
#
else
void
IncPageAllocHits
(
GMutLock
)
{
}
void
IncPageAllocMisses
(
GMutLock
)
{
}
#
endif
#
if
PHC_LOGGING
struct
PageStats
{
size_t
mNumAlloced
=
0
;
size_t
mNumFreed
=
0
;
}
;
PageStats
GetPageStats
(
GMutLock
)
{
PageStats
stats
;
for
(
const
auto
&
page
:
mAllocPages
)
{
stats
.
mNumAlloced
+
=
page
.
mState
=
=
AllocPageState
:
:
InUse
?
1
:
0
;
stats
.
mNumFreed
+
=
page
.
mState
=
=
AllocPageState
:
:
Freed
?
1
:
0
;
}
return
stats
;
}
size_t
PageAllocHits
(
GMutLock
)
{
return
mPageAllocHits
;
}
size_t
PageAllocAttempts
(
GMutLock
)
{
return
mPageAllocHits
+
mPageAllocMisses
;
}
size_t
PageAllocHitRate
(
GMutLock
)
{
return
mPageAllocHits
*
100
/
(
mPageAllocHits
+
mPageAllocMisses
)
;
}
#
endif
bool
ShouldMakeNewAllocations
(
)
const
{
return
mPhcState
=
=
mozilla
:
:
phc
:
:
Enabled
;
}
using
PHCState
=
mozilla
:
:
phc
:
:
PHCState
;
void
SetState
(
PHCState
aState
)
{
mPhcState
=
aState
;
}
private
:
template
<
int
N
>
uint64_t
RandomSeed
(
)
{
static_assert
(
N
=
=
0
|
|
N
=
=
1
"
must
be
0
or
1
"
)
;
uint64_t
seed
;
if
(
N
=
=
0
)
{
time_t
t
=
time
(
nullptr
)
;
seed
=
t
^
(
t
<
<
32
)
;
}
else
{
seed
=
uintptr_t
(
&
seed
)
^
(
uintptr_t
(
&
seed
)
<
<
32
)
;
}
return
seed
;
}
void
AssertAllocPageInUse
(
GMutLock
const
AllocPageInfo
&
aPage
)
{
MOZ_ASSERT
(
aPage
.
mState
=
=
AllocPageState
:
:
InUse
)
;
MOZ_ASSERT
(
aPage
.
mBaseAddr
)
;
MOZ_ASSERT
(
aPage
.
UsableSize
(
)
>
0
)
;
MOZ_ASSERT
(
aPage
.
mAllocStack
.
isSome
(
)
)
;
MOZ_ASSERT
(
aPage
.
mFreeStack
.
isNothing
(
)
)
;
MOZ_ASSERT
(
aPage
.
mReuseTime
=
=
kMaxTime
)
;
}
void
AssertAllocPageNotInUse
(
GMutLock
const
AllocPageInfo
&
aPage
)
{
#
ifdef
DEBUG
bool
isFresh
=
aPage
.
mState
=
=
AllocPageState
:
:
NeverAllocated
;
MOZ_ASSERT
(
isFresh
|
|
aPage
.
mState
=
=
AllocPageState
:
:
Freed
)
;
MOZ_ASSERT_IF
(
isFresh
aPage
.
mArenaId
=
=
Nothing
(
)
)
;
MOZ_ASSERT
(
isFresh
=
=
(
aPage
.
mBaseAddr
=
=
nullptr
)
)
;
MOZ_ASSERT
(
isFresh
=
=
(
aPage
.
mAllocStack
.
isNothing
(
)
)
)
;
MOZ_ASSERT
(
isFresh
=
=
(
aPage
.
mFreeStack
.
isNothing
(
)
)
)
;
MOZ_ASSERT
(
aPage
.
mReuseTime
!
=
kMaxTime
)
;
#
endif
}
non_crypto
:
:
XorShift128PlusRNG
mRNG
;
AllocPageInfo
mAllocPages
[
kNumAllocPages
]
;
#
if
PHC_LOGGING
Time
mFreeTime
[
kNumAllocPages
]
;
size_t
mPageAllocHits
=
0
;
size_t
mPageAllocMisses
=
0
;
#
endif
Atomic
<
PHCState
Relaxed
>
mPhcState
=
Atomic
<
PHCState
Relaxed
>
(
DEFAULT_STATE
)
;
}
;
Mutex
GMut
:
:
sMutex
;
static
GMut
*
gMut
;
static
void
PHCCrash
(
GMutLock
const
char
*
aMessage
)
MOZ_REQUIRES
(
GMut
:
:
sMutex
)
{
GMut
:
:
sMutex
.
Unlock
(
)
;
MOZ_CRASH_UNSAFE
(
aMessage
)
;
}
#
if
!
defined
(
XP_DARWIN
)
#
define
PHC_THREAD_LOCAL
(
T
)
MOZ_THREAD_LOCAL
(
T
)
#
else
#
define
PHC_THREAD_LOCAL
(
T
)
\
detail
:
:
ThreadLocal
<
T
detail
:
:
ThreadLocalKeyStorage
>
#
endif
class
GTls
{
public
:
GTls
(
const
GTls
&
)
=
delete
;
const
GTls
&
operator
=
(
const
GTls
&
)
=
delete
;
static
void
Init
(
)
{
if
(
!
tlsIsDisabled
.
init
(
)
)
{
MOZ_CRASH
(
)
;
}
}
static
void
DisableOnCurrentThread
(
)
{
MOZ_ASSERT
(
!
GTls
:
:
tlsIsDisabled
.
get
(
)
)
;
tlsIsDisabled
.
set
(
true
)
;
}
static
void
EnableOnCurrentThread
(
)
{
MOZ_ASSERT
(
GTls
:
:
tlsIsDisabled
.
get
(
)
)
;
uint64_t
rand
;
if
(
GAtomic
:
:
AllocDelayHasWrapped
(
)
)
{
{
MutexAutoLock
lock
(
GMut
:
:
sMutex
)
;
rand
=
gMut
-
>
Random64
(
lock
)
;
}
GAtomic
:
:
SetAllocDelay
(
Rnd64ToDelay
<
kAvgAllocDelay
>
(
rand
)
)
;
}
tlsIsDisabled
.
set
(
false
)
;
}
static
bool
IsDisabledOnCurrentThread
(
)
{
return
tlsIsDisabled
.
get
(
)
;
}
private
:
static
PHC_THREAD_LOCAL
(
bool
)
tlsIsDisabled
;
}
;
PHC_THREAD_LOCAL
(
bool
)
GTls
:
:
tlsIsDisabled
;
class
AutoDisableOnCurrentThread
{
public
:
AutoDisableOnCurrentThread
(
const
AutoDisableOnCurrentThread
&
)
=
delete
;
const
AutoDisableOnCurrentThread
&
operator
=
(
const
AutoDisableOnCurrentThread
&
)
=
delete
;
explicit
AutoDisableOnCurrentThread
(
)
{
GTls
:
:
DisableOnCurrentThread
(
)
;
}
~
AutoDisableOnCurrentThread
(
)
{
GTls
:
:
EnableOnCurrentThread
(
)
;
}
}
;
static
bool
phc_init
(
)
{
if
(
GetKernelPageSize
(
)
!
=
kPageSize
)
{
return
false
;
}
gConst
=
InfallibleAllocPolicy
:
:
new_
<
GConst
>
(
)
;
GTls
:
:
Init
(
)
;
gMut
=
InfallibleAllocPolicy
:
:
new_
<
GMut
>
(
)
;
{
MutexAutoLock
lock
(
GMut
:
:
sMutex
)
;
Delay
firstAllocDelay
=
Rnd64ToDelay
<
kAvgFirstAllocDelay
>
(
gMut
-
>
Random64
(
lock
)
)
;
GAtomic
:
:
Init
(
firstAllocDelay
)
;
}
#
ifndef
XP_WIN
pthread_atfork
(
GMut
:
:
prefork
GMut
:
:
postfork_parent
GMut
:
:
postfork_child
)
;
#
endif
return
true
;
}
static
inline
bool
maybe_init
(
)
{
static
bool
sInitSuccess
=
[
]
(
)
{
return
phc_init
(
)
;
}
(
)
;
return
sInitSuccess
;
}
static
void
*
MaybePageAlloc
(
const
Maybe
<
arena_id_t
>
&
aArenaId
size_t
aReqSize
size_t
aAlignment
bool
aZero
)
{
MOZ_ASSERT
(
IsPowerOfTwo
(
aAlignment
)
)
;
if
(
!
maybe_init
(
)
)
{
return
nullptr
;
}
if
(
aReqSize
>
kPageSize
)
{
return
nullptr
;
}
MOZ_ASSERT
(
gMut
)
;
if
(
!
gMut
-
>
ShouldMakeNewAllocations
(
)
)
{
return
nullptr
;
}
GAtomic
:
:
IncrementNow
(
)
;
int32_t
newDelay
=
GAtomic
:
:
DecrementDelay
(
)
;
if
(
newDelay
!
=
0
)
{
return
nullptr
;
}
if
(
GTls
:
:
IsDisabledOnCurrentThread
(
)
)
{
return
nullptr
;
}
AutoDisableOnCurrentThread
disable
;
StackTrace
allocStack
;
allocStack
.
Fill
(
)
;
MutexAutoLock
lock
(
GMut
:
:
sMutex
)
;
Time
now
=
GAtomic
:
:
Now
(
)
;
Delay
newAllocDelay
=
Rnd64ToDelay
<
kAvgAllocDelay
>
(
gMut
-
>
Random64
(
lock
)
)
;
uint8_t
*
ptr
=
nullptr
;
uint8_t
*
pagePtr
=
nullptr
;
for
(
uintptr_t
n
=
0
i
=
size_t
(
gMut
-
>
Random64
(
lock
)
)
%
kNumAllocPages
;
n
<
kNumAllocPages
;
n
+
+
i
=
(
i
+
1
)
%
kNumAllocPages
)
{
if
(
!
gMut
-
>
IsPageAllocatable
(
lock
i
now
)
)
{
continue
;
}
#
if
PHC_LOGGING
Time
lifetime
=
0
;
#
endif
pagePtr
=
gConst
-
>
AllocPagePtr
(
i
)
;
MOZ_ASSERT
(
pagePtr
)
;
bool
ok
=
#
ifdef
XP_WIN
!
!
VirtualAlloc
(
pagePtr
kPageSize
MEM_COMMIT
PAGE_READWRITE
)
;
#
else
mprotect
(
pagePtr
kPageSize
PROT_READ
|
PROT_WRITE
)
=
=
0
;
#
endif
if
(
!
ok
)
{
pagePtr
=
nullptr
;
continue
;
}
size_t
usableSize
=
MozJemalloc
:
:
malloc_good_size
(
aReqSize
)
;
MOZ_ASSERT
(
usableSize
>
0
)
;
ptr
=
pagePtr
+
kPageSize
-
usableSize
;
if
(
aAlignment
!
=
1
)
{
ptr
=
reinterpret_cast
<
uint8_t
*
>
(
(
reinterpret_cast
<
uintptr_t
>
(
ptr
)
&
~
(
aAlignment
-
1
)
)
)
;
}
#
if
PHC_LOGGING
Time
then
=
gMut
-
>
GetFreeTime
(
i
)
;
lifetime
=
then
!
=
0
?
now
-
then
:
0
;
#
endif
gMut
-
>
SetPageInUse
(
lock
i
aArenaId
ptr
allocStack
)
;
if
(
aZero
)
{
memset
(
ptr
0
usableSize
)
;
}
else
{
#
ifdef
DEBUG
memset
(
ptr
kAllocJunk
usableSize
)
;
#
endif
}
gMut
-
>
IncPageAllocHits
(
lock
)
;
#
if
PHC_LOGGING
GMut
:
:
PageStats
stats
=
gMut
-
>
GetPageStats
(
lock
)
;
#
endif
LOG
(
"
PageAlloc
(
%
zu
%
zu
)
-
>
%
p
[
%
zu
]
/
%
p
(
%
zu
)
(
z
%
zu
)
sAllocDelay
<
-
%
zu
"
"
fullness
%
zu
/
%
zu
/
%
zu
hits
%
zu
/
%
zu
(
%
zu
%
%
)
lifetime
%
zu
\
n
"
aReqSize
aAlignment
pagePtr
i
ptr
usableSize
size_t
(
aZero
)
size_t
(
newAllocDelay
)
stats
.
mNumAlloced
stats
.
mNumFreed
kNumAllocPages
gMut
-
>
PageAllocHits
(
lock
)
gMut
-
>
PageAllocAttempts
(
lock
)
gMut
-
>
PageAllocHitRate
(
lock
)
lifetime
)
;
break
;
}
if
(
!
pagePtr
)
{
gMut
-
>
IncPageAllocMisses
(
lock
)
;
#
if
PHC_LOGGING
GMut
:
:
PageStats
stats
=
gMut
-
>
GetPageStats
(
lock
)
;
#
endif
LOG
(
"
No
PageAlloc
(
%
zu
%
zu
)
sAllocDelay
<
-
%
zu
fullness
%
zu
/
%
zu
/
%
zu
"
"
hits
%
zu
/
%
zu
(
%
zu
%
%
)
\
n
"
aReqSize
aAlignment
size_t
(
newAllocDelay
)
stats
.
mNumAlloced
stats
.
mNumFreed
kNumAllocPages
gMut
-
>
PageAllocHits
(
lock
)
gMut
-
>
PageAllocAttempts
(
lock
)
gMut
-
>
PageAllocHitRate
(
lock
)
)
;
}
GAtomic
:
:
SetAllocDelay
(
newAllocDelay
)
;
return
ptr
;
}
static
void
FreePage
(
GMutLock
aLock
uintptr_t
aIndex
const
Maybe
<
arena_id_t
>
&
aArenaId
const
StackTrace
&
aFreeStack
Delay
aReuseDelay
)
MOZ_REQUIRES
(
GMut
:
:
sMutex
)
{
void
*
pagePtr
=
gConst
-
>
AllocPagePtr
(
aIndex
)
;
#
ifdef
XP_WIN
if
(
!
VirtualFree
(
pagePtr
kPageSize
MEM_DECOMMIT
)
)
{
PHCCrash
(
aLock
"
VirtualFree
failed
"
)
;
}
#
else
if
(
mmap
(
pagePtr
kPageSize
PROT_NONE
MAP_FIXED
|
MAP_PRIVATE
|
MAP_ANON
-
1
0
)
=
=
MAP_FAILED
)
{
PHCCrash
(
aLock
"
mmap
failed
"
)
;
}
#
endif
gMut
-
>
SetPageFreed
(
aLock
aIndex
aArenaId
aFreeStack
aReuseDelay
)
;
}
MOZ_ALWAYS_INLINE
static
void
*
PageMalloc
(
const
Maybe
<
arena_id_t
>
&
aArenaId
size_t
aReqSize
)
{
void
*
ptr
=
MaybePageAlloc
(
aArenaId
aReqSize
1
false
)
;
return
ptr
?
ptr
:
(
aArenaId
.
isSome
(
)
?
MozJemalloc
:
:
moz_arena_malloc
(
*
aArenaId
aReqSize
)
:
MozJemalloc
:
:
malloc
(
aReqSize
)
)
;
}
void
*
MozJemallocPHC
:
:
malloc
(
size_t
aReqSize
)
{
return
PageMalloc
(
Nothing
(
)
aReqSize
)
;
}
static
Delay
ReuseDelay
(
GMutLock
aLock
)
{
return
(
kAvgPageReuseDelay
/
2
)
+
Rnd64ToDelay
<
kAvgPageReuseDelay
/
2
>
(
gMut
-
>
Random64
(
aLock
)
)
;
}
MOZ_ALWAYS_INLINE
static
void
*
PageCalloc
(
const
Maybe
<
arena_id_t
>
&
aArenaId
size_t
aNum
size_t
aReqSize
)
{
CheckedInt
<
size_t
>
checkedSize
=
CheckedInt
<
size_t
>
(
aNum
)
*
aReqSize
;
if
(
!
checkedSize
.
isValid
(
)
)
{
return
nullptr
;
}
void
*
ptr
=
MaybePageAlloc
(
aArenaId
checkedSize
.
value
(
)
1
true
)
;
return
ptr
?
ptr
:
(
aArenaId
.
isSome
(
)
?
MozJemalloc
:
:
moz_arena_calloc
(
*
aArenaId
aNum
aReqSize
)
:
MozJemalloc
:
:
calloc
(
aNum
aReqSize
)
)
;
}
void
*
MozJemallocPHC
:
:
calloc
(
size_t
aNum
size_t
aReqSize
)
{
return
PageCalloc
(
Nothing
(
)
aNum
aReqSize
)
;
}
MOZ_ALWAYS_INLINE
static
void
*
MaybePageRealloc
(
const
Maybe
<
arena_id_t
>
&
aArenaId
void
*
aOldPtr
size_t
aNewSize
)
{
if
(
!
aOldPtr
)
{
return
PageMalloc
(
aArenaId
aNewSize
)
;
}
if
(
!
maybe_init
(
)
)
{
return
nullptr
;
}
PtrKind
pk
=
gConst
-
>
PtrKind
(
aOldPtr
)
;
if
(
pk
.
IsNothing
(
)
)
{
return
nullptr
;
}
if
(
pk
.
IsGuardPage
(
)
)
{
GMut
:
:
CrashOnGuardPage
(
aOldPtr
)
;
}
uintptr_t
index
=
pk
.
AllocPageIndex
(
)
;
Maybe
<
AutoDisableOnCurrentThread
>
disable
;
StackTrace
stack
;
if
(
GTls
:
:
IsDisabledOnCurrentThread
(
)
)
{
}
else
{
disable
.
emplace
(
)
;
stack
.
Fill
(
)
;
}
MutexAutoLock
lock
(
GMut
:
:
sMutex
)
;
gMut
-
>
EnsureValidAndInUse
(
lock
aOldPtr
index
)
;
if
(
aNewSize
<
=
kPageSize
&
&
gMut
-
>
ShouldMakeNewAllocations
(
)
)
{
size_t
oldUsableSize
=
gMut
-
>
PageUsableSize
(
lock
index
)
;
size_t
newUsableSize
=
MozJemalloc
:
:
malloc_good_size
(
aNewSize
)
;
uint8_t
*
pagePtr
=
gConst
-
>
AllocPagePtr
(
index
)
;
uint8_t
*
newPtr
=
pagePtr
+
kPageSize
-
newUsableSize
;
memmove
(
newPtr
aOldPtr
std
:
:
min
(
oldUsableSize
aNewSize
)
)
;
gMut
-
>
ResizePageInUse
(
lock
index
aArenaId
newPtr
stack
)
;
LOG
(
"
PageRealloc
-
Reuse
(
%
p
%
zu
)
-
>
%
p
\
n
"
aOldPtr
aNewSize
newPtr
)
;
return
newPtr
;
}
void
*
newPtr
;
if
(
aArenaId
.
isSome
(
)
)
{
newPtr
=
MozJemalloc
:
:
moz_arena_malloc
(
*
aArenaId
aNewSize
)
;
}
else
{
Maybe
<
arena_id_t
>
oldArenaId
=
gMut
-
>
PageArena
(
lock
index
)
;
newPtr
=
(
oldArenaId
.
isSome
(
)
?
MozJemalloc
:
:
moz_arena_malloc
(
*
oldArenaId
aNewSize
)
:
MozJemalloc
:
:
malloc
(
aNewSize
)
)
;
}
if
(
!
newPtr
)
{
return
nullptr
;
}
Delay
reuseDelay
=
ReuseDelay
(
lock
)
;
size_t
oldUsableSize
=
gMut
-
>
PageUsableSize
(
lock
index
)
;
memcpy
(
newPtr
aOldPtr
std
:
:
min
(
oldUsableSize
aNewSize
)
)
;
FreePage
(
lock
index
aArenaId
stack
reuseDelay
)
;
LOG
(
"
PageRealloc
-
Free
(
%
p
[
%
zu
]
%
zu
)
-
>
%
p
%
zu
delay
reuse
at
~
%
zu
\
n
"
aOldPtr
index
aNewSize
newPtr
size_t
(
reuseDelay
)
size_t
(
GAtomic
:
:
Now
(
)
)
+
reuseDelay
)
;
return
newPtr
;
}
MOZ_ALWAYS_INLINE
static
void
*
PageRealloc
(
const
Maybe
<
arena_id_t
>
&
aArenaId
void
*
aOldPtr
size_t
aNewSize
)
{
void
*
ptr
=
MaybePageRealloc
(
aArenaId
aOldPtr
aNewSize
)
;
return
ptr
?
ptr
:
(
aArenaId
.
isSome
(
)
?
MozJemalloc
:
:
moz_arena_realloc
(
*
aArenaId
aOldPtr
aNewSize
)
:
MozJemalloc
:
:
realloc
(
aOldPtr
aNewSize
)
)
;
}
void
*
MozJemallocPHC
:
:
realloc
(
void
*
aOldPtr
size_t
aNewSize
)
{
return
PageRealloc
(
Nothing
(
)
aOldPtr
aNewSize
)
;
}
MOZ_ALWAYS_INLINE
static
bool
MaybePageFree
(
const
Maybe
<
arena_id_t
>
&
aArenaId
void
*
aPtr
)
{
if
(
!
maybe_init
(
)
)
{
return
false
;
}
PtrKind
pk
=
gConst
-
>
PtrKind
(
aPtr
)
;
if
(
pk
.
IsNothing
(
)
)
{
return
false
;
}
if
(
pk
.
IsGuardPage
(
)
)
{
GMut
:
:
CrashOnGuardPage
(
aPtr
)
;
}
uintptr_t
index
=
pk
.
AllocPageIndex
(
)
;
Maybe
<
AutoDisableOnCurrentThread
>
disable
;
StackTrace
freeStack
;
if
(
GTls
:
:
IsDisabledOnCurrentThread
(
)
)
{
}
else
{
disable
.
emplace
(
)
;
freeStack
.
Fill
(
)
;
}
MutexAutoLock
lock
(
GMut
:
:
sMutex
)
;
gMut
-
>
EnsureValidAndInUse
(
lock
aPtr
index
)
;
Delay
reuseDelay
=
ReuseDelay
(
lock
)
;
FreePage
(
lock
index
aArenaId
freeStack
reuseDelay
)
;
#
if
PHC_LOGGING
GMut
:
:
PageStats
stats
=
gMut
-
>
GetPageStats
(
lock
)
;
#
endif
LOG
(
"
PageFree
(
%
p
[
%
zu
]
)
%
zu
delay
reuse
at
~
%
zu
fullness
%
zu
/
%
zu
/
%
zu
\
n
"
aPtr
index
size_t
(
reuseDelay
)
size_t
(
GAtomic
:
:
Now
(
)
)
+
reuseDelay
stats
.
mNumAlloced
stats
.
mNumFreed
kNumAllocPages
)
;
return
true
;
}
MOZ_ALWAYS_INLINE
static
void
PageFree
(
const
Maybe
<
arena_id_t
>
&
aArenaId
void
*
aPtr
)
{
bool
res
=
MaybePageFree
(
aArenaId
aPtr
)
;
if
(
!
res
)
{
aArenaId
.
isSome
(
)
?
MozJemalloc
:
:
moz_arena_free
(
*
aArenaId
aPtr
)
:
MozJemalloc
:
:
free
(
aPtr
)
;
}
}
void
MozJemallocPHC
:
:
free
(
void
*
aPtr
)
{
PageFree
(
Nothing
(
)
aPtr
)
;
}
MOZ_ALWAYS_INLINE
static
void
*
PageMemalign
(
const
Maybe
<
arena_id_t
>
&
aArenaId
size_t
aAlignment
size_t
aReqSize
)
{
MOZ_RELEASE_ASSERT
(
IsPowerOfTwo
(
aAlignment
)
)
;
void
*
ptr
=
nullptr
;
if
(
aAlignment
<
=
kPageSize
)
{
ptr
=
MaybePageAlloc
(
aArenaId
aReqSize
aAlignment
false
)
;
}
return
ptr
?
ptr
:
(
aArenaId
.
isSome
(
)
?
MozJemalloc
:
:
moz_arena_memalign
(
*
aArenaId
aAlignment
aReqSize
)
:
MozJemalloc
:
:
memalign
(
aAlignment
aReqSize
)
)
;
}
void
*
MozJemallocPHC
:
:
memalign
(
size_t
aAlignment
size_t
aReqSize
)
{
return
PageMemalign
(
Nothing
(
)
aAlignment
aReqSize
)
;
}
size_t
MozJemallocPHC
:
:
malloc_usable_size
(
usable_ptr_t
aPtr
)
{
if
(
!
maybe_init
(
)
)
{
return
MozJemalloc
:
:
malloc_usable_size
(
aPtr
)
;
}
PtrKind
pk
=
gConst
-
>
PtrKind
(
aPtr
)
;
if
(
pk
.
IsNothing
(
)
)
{
return
MozJemalloc
:
:
malloc_usable_size
(
aPtr
)
;
}
if
(
pk
.
IsGuardPage
(
)
)
{
GMut
:
:
CrashOnGuardPage
(
const_cast
<
void
*
>
(
aPtr
)
)
;
}
uintptr_t
index
=
pk
.
AllocPageIndex
(
)
;
MutexAutoLock
lock
(
GMut
:
:
sMutex
)
;
void
*
pageBaseAddr
=
gMut
-
>
AllocPageBaseAddr
(
lock
index
)
;
if
(
MOZ_UNLIKELY
(
aPtr
<
pageBaseAddr
)
)
{
return
0
;
}
return
gMut
-
>
PageUsableSize
(
lock
index
)
;
}
static
size_t
metadata_size
(
)
{
return
MozJemalloc
:
:
malloc_usable_size
(
gConst
)
+
MozJemalloc
:
:
malloc_usable_size
(
gMut
)
;
}
void
MozJemallocPHC
:
:
jemalloc_stats_internal
(
jemalloc_stats_t
*
aStats
jemalloc_bin_stats_t
*
aBinStats
)
{
MozJemalloc
:
:
jemalloc_stats_internal
(
aStats
aBinStats
)
;
if
(
!
maybe_init
(
)
)
{
return
;
}
aStats
-
>
allocated
-
=
kAllPagesJemallocSize
;
size_t
allocated
=
0
;
{
MutexAutoLock
lock
(
GMut
:
:
sMutex
)
;
for
(
size_t
i
=
0
;
i
<
kNumAllocPages
;
i
+
+
)
{
if
(
gMut
-
>
IsPageInUse
(
lock
i
)
)
{
allocated
+
=
gMut
-
>
PageUsableSize
(
lock
i
)
;
}
}
}
aStats
-
>
allocated
+
=
allocated
;
size_t
bookkeeping
=
metadata_size
(
)
;
aStats
-
>
allocated
-
=
bookkeeping
;
aStats
-
>
bookkeeping
+
=
bookkeeping
;
}
void
MozJemallocPHC
:
:
jemalloc_ptr_info
(
const
void
*
aPtr
jemalloc_ptr_info_t
*
aInfo
)
{
if
(
!
maybe_init
(
)
)
{
return
MozJemalloc
:
:
jemalloc_ptr_info
(
aPtr
aInfo
)
;
}
PtrKind
pk
=
gConst
-
>
PtrKind
(
aPtr
)
;
if
(
pk
.
IsNothing
(
)
)
{
return
MozJemalloc
:
:
jemalloc_ptr_info
(
aPtr
aInfo
)
;
}
if
(
pk
.
IsGuardPage
(
)
)
{
*
aInfo
=
{
TagUnknown
nullptr
0
0
}
;
return
;
}
uintptr_t
index
=
pk
.
AllocPageIndex
(
)
;
MutexAutoLock
lock
(
GMut
:
:
sMutex
)
;
gMut
-
>
FillJemallocPtrInfo
(
lock
aPtr
index
aInfo
)
;
#
if
DEBUG
LOG
(
"
JemallocPtrInfo
(
%
p
[
%
zu
]
)
-
>
{
%
zu
%
p
%
zu
%
zu
}
\
n
"
aPtr
index
size_t
(
aInfo
-
>
tag
)
aInfo
-
>
addr
aInfo
-
>
size
aInfo
-
>
arenaId
)
;
#
else
LOG
(
"
JemallocPtrInfo
(
%
p
[
%
zu
]
)
-
>
{
%
zu
%
p
%
zu
}
\
n
"
aPtr
index
size_t
(
aInfo
-
>
tag
)
aInfo
-
>
addr
aInfo
-
>
size
)
;
#
endif
}
void
*
MozJemallocPHC
:
:
moz_arena_malloc
(
arena_id_t
aArenaId
size_t
aReqSize
)
{
return
PageMalloc
(
Some
(
aArenaId
)
aReqSize
)
;
}
void
*
MozJemallocPHC
:
:
moz_arena_calloc
(
arena_id_t
aArenaId
size_t
aNum
size_t
aReqSize
)
{
return
PageCalloc
(
Some
(
aArenaId
)
aNum
aReqSize
)
;
}
void
*
MozJemallocPHC
:
:
moz_arena_realloc
(
arena_id_t
aArenaId
void
*
aOldPtr
size_t
aNewSize
)
{
return
PageRealloc
(
Some
(
aArenaId
)
aOldPtr
aNewSize
)
;
}
void
MozJemallocPHC
:
:
moz_arena_free
(
arena_id_t
aArenaId
void
*
aPtr
)
{
return
PageFree
(
Some
(
aArenaId
)
aPtr
)
;
}
void
*
MozJemallocPHC
:
:
moz_arena_memalign
(
arena_id_t
aArenaId
size_t
aAlignment
size_t
aReqSize
)
{
return
PageMemalign
(
Some
(
aArenaId
)
aAlignment
aReqSize
)
;
}
class
PHCBridge
:
public
ReplaceMallocBridge
{
virtual
bool
IsPHCAllocation
(
const
void
*
aPtr
phc
:
:
AddrInfo
*
aOut
)
override
{
PtrKind
pk
=
gConst
-
>
PtrKind
(
aPtr
)
;
if
(
pk
.
IsNothing
(
)
)
{
return
false
;
}
bool
isGuardPage
=
false
;
if
(
pk
.
IsGuardPage
(
)
)
{
if
(
(
uintptr_t
(
aPtr
)
%
kPageSize
)
<
(
kPageSize
/
2
)
)
{
if
(
gConst
-
>
IsInFirstGuardPage
(
aPtr
)
)
{
return
false
;
}
pk
=
gConst
-
>
PtrKind
(
static_cast
<
const
uint8_t
*
>
(
aPtr
)
-
kPageSize
)
;
}
else
{
pk
=
gConst
-
>
PtrKind
(
static_cast
<
const
uint8_t
*
>
(
aPtr
)
+
kPageSize
)
;
}
isGuardPage
=
true
;
}
uintptr_t
index
=
pk
.
AllocPageIndex
(
)
;
if
(
aOut
)
{
if
(
GMut
:
:
sMutex
.
TryLock
(
)
)
{
gMut
-
>
FillAddrInfo
(
index
aPtr
isGuardPage
*
aOut
)
;
LOG
(
"
IsPHCAllocation
:
%
zu
%
p
%
zu
%
zu
%
zu
\
n
"
size_t
(
aOut
-
>
mKind
)
aOut
-
>
mBaseAddr
aOut
-
>
mUsableSize
aOut
-
>
mAllocStack
.
isSome
(
)
?
aOut
-
>
mAllocStack
-
>
mLength
:
0
aOut
-
>
mFreeStack
.
isSome
(
)
?
aOut
-
>
mFreeStack
-
>
mLength
:
0
)
;
GMut
:
:
sMutex
.
Unlock
(
)
;
}
else
{
LOG
(
"
IsPHCAllocation
:
PHC
is
locked
\
n
"
)
;
aOut
-
>
mPhcWasLocked
=
true
;
}
}
return
true
;
}
virtual
void
DisablePHCOnCurrentThread
(
)
override
{
GTls
:
:
DisableOnCurrentThread
(
)
;
LOG
(
"
DisablePHCOnCurrentThread
:
%
zu
\
n
"
0ul
)
;
}
virtual
void
ReenablePHCOnCurrentThread
(
)
override
{
GTls
:
:
EnableOnCurrentThread
(
)
;
LOG
(
"
ReenablePHCOnCurrentThread
:
%
zu
\
n
"
0ul
)
;
}
virtual
bool
IsPHCEnabledOnCurrentThread
(
)
override
{
bool
enabled
=
!
GTls
:
:
IsDisabledOnCurrentThread
(
)
;
LOG
(
"
IsPHCEnabledOnCurrentThread
:
%
zu
\
n
"
size_t
(
enabled
)
)
;
return
enabled
;
}
virtual
void
PHCMemoryUsage
(
mozilla
:
:
phc
:
:
MemoryUsage
&
aMemoryUsage
)
override
{
aMemoryUsage
.
mMetadataBytes
=
metadata_size
(
)
;
if
(
gMut
)
{
MutexAutoLock
lock
(
GMut
:
:
sMutex
)
;
aMemoryUsage
.
mFragmentationBytes
=
gMut
-
>
FragmentationBytes
(
)
;
}
else
{
aMemoryUsage
.
mFragmentationBytes
=
0
;
}
}
virtual
void
SetPHCState
(
mozilla
:
:
phc
:
:
PHCState
aState
)
override
{
gMut
-
>
SetState
(
aState
)
;
}
}
;
ReplaceMallocBridge
*
GetPHCBridge
(
)
{
static
PHCBridge
bridge
;
return
&
bridge
;
}
