#
ifndef
malloc_decls_h
#
define
malloc_decls_h
#
include
"
mozjemalloc_types
.
h
"
#
define
MALLOC_FUNCS_MALLOC_BASE
1
#
define
MALLOC_FUNCS_MALLOC_EXTRA
2
#
define
MALLOC_FUNCS_MALLOC
\
(
MALLOC_FUNCS_MALLOC_BASE
|
MALLOC_FUNCS_MALLOC_EXTRA
)
#
define
MALLOC_FUNCS_JEMALLOC
4
#
define
MALLOC_FUNCS_ARENA_BASE
8
#
define
MALLOC_FUNCS_ARENA_ALLOC
16
#
define
MALLOC_FUNCS_ARENA
\
(
MALLOC_FUNCS_ARENA_BASE
|
MALLOC_FUNCS_ARENA_ALLOC
)
#
define
MALLOC_FUNCS_ALL
\
(
MALLOC_FUNCS_MALLOC
|
MALLOC_FUNCS_JEMALLOC
|
MALLOC_FUNCS_ARENA
)
#
if
!
defined
(
MALLOC_DECL
)
&
&
defined
(
__cplusplus
)
#
include
<
functional
>
#
include
"
mozilla
/
Maybe
.
h
"
#
endif
#
endif
#
ifndef
MALLOC_FUNCS
#
define
MALLOC_FUNCS
MALLOC_FUNCS_ALL
#
endif
#
ifdef
MALLOC_DECL
#
if
defined
(
ANDROID
)
|
|
defined
(
XP_DARWIN
)
#
undef
NOTHROW_MALLOC_DECL
#
define
NOTHROW_MALLOC_DECL
MALLOC_DECL
#
elif
!
defined
(
NOTHROW_MALLOC_DECL
)
#
define
NOTHROW_MALLOC_DECL
MALLOC_DECL
#
endif
#
if
MALLOC_FUNCS
&
MALLOC_FUNCS_MALLOC_BASE
MALLOC_DECL
(
malloc
void
*
size_t
)
MALLOC_DECL
(
calloc
void
*
size_t
size_t
)
MALLOC_DECL
(
realloc
void
*
void
*
size_t
)
NOTHROW_MALLOC_DECL
(
free
void
void
*
)
NOTHROW_MALLOC_DECL
(
memalign
void
*
size_t
size_t
)
#
endif
#
if
MALLOC_FUNCS
&
MALLOC_FUNCS_MALLOC_EXTRA
NOTHROW_MALLOC_DECL
(
posix_memalign
int
void
*
*
size_t
size_t
)
NOTHROW_MALLOC_DECL
(
aligned_alloc
void
*
size_t
size_t
)
NOTHROW_MALLOC_DECL
(
valloc
void
*
size_t
)
NOTHROW_MALLOC_DECL
(
malloc_usable_size
size_t
usable_ptr_t
)
MALLOC_DECL
(
malloc_good_size
size_t
size_t
)
#
endif
#
if
MALLOC_FUNCS
&
MALLOC_FUNCS_JEMALLOC
MALLOC_DECL
(
jemalloc_stats_internal
void
jemalloc_stats_t
*
jemalloc_bin_stats_t
*
)
MALLOC_DECL
(
jemalloc_stats_num_bins
size_t
)
MALLOC_DECL
(
jemalloc_stats_lite
void
jemalloc_stats_lite_t
*
)
MALLOC_DECL
(
jemalloc_set_main_thread
void
)
MALLOC_DECL
(
jemalloc_purge_freed_pages
void
)
MALLOC_DECL
(
jemalloc_free_dirty_pages
void
)
MALLOC_DECL
(
moz_set_max_dirty_page_modifier
void
int32_t
)
MALLOC_DECL
(
moz_enable_deferred_purge
bool
bool
)
#
ifdef
__cplusplus
MALLOC_DECL
(
moz_may_purge_now
purge_result_t
bool
uint32_t
const
mozilla
:
:
Maybe
<
std
:
:
function
<
bool
(
)
>
>
&
)
#
endif
MALLOC_DECL
(
jemalloc_free_excess_dirty_pages
void
)
MALLOC_DECL
(
jemalloc_reset_small_alloc_randomization
void
bool
)
MALLOC_DECL
(
jemalloc_thread_local_arena
void
bool
)
MALLOC_DECL
(
jemalloc_ptr_info
void
const
void
*
jemalloc_ptr_info_t
*
)
#
endif
#
if
MALLOC_FUNCS
&
MALLOC_FUNCS_ARENA_BASE
MALLOC_DECL
(
moz_create_arena_with_params
arena_id_t
arena_params_t
*
)
MALLOC_DECL
(
moz_dispose_arena
void
arena_id_t
)
#
endif
#
if
MALLOC_FUNCS
&
MALLOC_FUNCS_ARENA_ALLOC
MALLOC_DECL
(
moz_arena_malloc
void
*
arena_id_t
size_t
)
MALLOC_DECL
(
moz_arena_calloc
void
*
arena_id_t
size_t
size_t
)
MALLOC_DECL
(
moz_arena_realloc
void
*
arena_id_t
void
*
size_t
)
MALLOC_DECL
(
moz_arena_free
void
arena_id_t
void
*
)
MALLOC_DECL
(
moz_arena_memalign
void
*
arena_id_t
size_t
size_t
)
#
endif
#
endif
#
undef
NOTHROW_MALLOC_DECL
#
undef
MALLOC_DECL
#
undef
MALLOC_FUNCS
