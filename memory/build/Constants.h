#
ifndef
CONSTANTS_H
#
define
CONSTANTS_H
#
include
"
mozilla
/
Literals
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
Utils
.
h
"
#
ifdef
XP_DARWIN
#
define
MALLOC_DOUBLE_PURGE
#
endif
#
ifdef
XP_WIN
#
define
MALLOC_DECOMMIT
#
endif
#
ifndef
XP_WIN
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MADV_FREE
)
#
undef
MADV_FREE
#
endif
#
ifndef
MADV_FREE
#
define
MADV_FREE
MADV_DONTNEED
#
endif
#
endif
#
ifdef
XP_WIN
static
constexpr
size_t
kMinTinyClass
=
sizeof
(
void
*
)
*
2
;
#
else
static
constexpr
size_t
kMinTinyClass
=
sizeof
(
void
*
)
;
#
endif
static
constexpr
size_t
kMaxTinyClass
=
8
;
static
constexpr
size_t
kMinQuantumClass
=
kMaxTinyClass
*
2
;
static
constexpr
size_t
kMinQuantumWideClass
=
512
;
static
constexpr
size_t
kMinSubPageClass
=
4_KiB
;
static
constexpr
size_t
kQuantum
=
16
;
static
constexpr
size_t
kQuantumMask
=
kQuantum
-
1
;
static
constexpr
size_t
kQuantumWide
=
256
;
static
constexpr
size_t
kQuantumWideMask
=
kQuantumWide
-
1
;
static
constexpr
size_t
kMaxQuantumClass
=
kMinQuantumWideClass
-
kQuantum
;
static
constexpr
size_t
kMaxQuantumWideClass
=
kMinSubPageClass
-
kQuantumWide
;
static_assert
(
mozilla
:
:
IsPowerOfTwo
(
kQuantum
)
"
kQuantum
is
not
a
power
of
two
"
)
;
static_assert
(
mozilla
:
:
IsPowerOfTwo
(
kQuantumWide
)
"
kQuantumWide
is
not
a
power
of
two
"
)
;
static_assert
(
kMaxQuantumClass
%
kQuantum
=
=
0
"
kMaxQuantumClass
is
not
a
multiple
of
kQuantum
"
)
;
static_assert
(
kMaxQuantumWideClass
%
kQuantumWide
=
=
0
"
kMaxQuantumWideClass
is
not
a
multiple
of
kQuantumWide
"
)
;
static_assert
(
kQuantum
<
kQuantumWide
"
kQuantum
must
be
smaller
than
kQuantumWide
"
)
;
static_assert
(
mozilla
:
:
IsPowerOfTwo
(
kMinSubPageClass
)
"
kMinSubPageClass
is
not
a
power
of
two
"
)
;
static
constexpr
size_t
kNumTinyClasses
=
LOG2
(
kMaxTinyClass
)
-
LOG2
(
kMinTinyClass
)
+
1
;
static
constexpr
size_t
kNumQuantumClasses
=
(
kMaxQuantumClass
+
kQuantum
-
kMinQuantumClass
)
/
kQuantum
;
static
constexpr
size_t
kNumQuantumWideClasses
=
(
kMaxQuantumWideClass
+
kQuantumWide
-
kMinQuantumWideClass
)
/
kQuantumWide
;
static
constexpr
size_t
kChunkSize
=
1_MiB
;
static
constexpr
size_t
kChunkSizeMask
=
kChunkSize
-
1
;
constexpr
size_t
kCacheLineSize
=
#
if
defined
(
XP_DARWIN
)
&
&
defined
(
__aarch64__
)
128
#
else
64
#
endif
;
static
constexpr
size_t
gRecycleLimit
=
128_MiB
;
#
endif
