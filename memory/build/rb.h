#
ifndef
RB_H_
#
define
RB_H_
enum
NodeColor
{
Black
=
0
Red
=
1
}
;
template
<
typename
T
>
class
RedBlackTreeNode
{
T
*
mLeft
;
T
*
mRightAndColor
;
public
:
T
*
Left
(
)
{
return
mLeft
;
}
void
SetLeft
(
T
*
aValue
)
{
mLeft
=
aValue
;
}
T
*
Right
(
)
{
return
reinterpret_cast
<
T
*
>
(
reinterpret_cast
<
uintptr_t
>
(
mRightAndColor
)
&
uintptr_t
(
~
1
)
)
;
}
void
SetRight
(
T
*
aValue
)
{
mRightAndColor
=
reinterpret_cast
<
T
*
>
(
(
reinterpret_cast
<
uintptr_t
>
(
aValue
)
&
uintptr_t
(
~
1
)
)
|
Color
(
)
)
;
}
NodeColor
Color
(
)
{
return
static_cast
<
NodeColor
>
(
reinterpret_cast
<
uintptr_t
>
(
mRightAndColor
)
&
1
)
;
}
bool
IsBlack
(
)
{
return
Color
(
)
=
=
NodeColor
:
:
Black
;
}
bool
IsRed
(
)
{
return
Color
(
)
=
=
NodeColor
:
:
Red
;
}
void
SetColor
(
NodeColor
aColor
)
{
mRightAndColor
=
reinterpret_cast
<
T
*
>
(
(
reinterpret_cast
<
uintptr_t
>
(
mRightAndColor
)
&
uintptr_t
(
~
1
)
)
|
aColor
)
;
}
}
;
template
<
typename
T
typename
Trait
>
class
RedBlackTree
{
public
:
void
Init
(
)
{
rbt_root
=
&
rbt_nil
;
rbt_nil
.
SetLeft
(
&
rbt_nil
)
;
rbt_nil
.
SetRight
(
&
rbt_nil
)
;
rbt_nil
.
SetColor
(
NodeColor
:
:
Black
)
;
}
T
*
First
(
T
*
aStart
=
nullptr
)
{
return
First
(
reinterpret_cast
<
TreeNode
*
>
(
aStart
)
)
;
}
T
*
Last
(
T
*
aStart
=
nullptr
)
{
return
Last
(
reinterpret_cast
<
TreeNode
*
>
(
aStart
)
)
;
}
T
*
Next
(
T
*
aNode
)
{
return
Next
(
reinterpret_cast
<
TreeNode
*
>
(
aNode
)
)
;
}
T
*
Prev
(
T
*
aNode
)
{
return
Prev
(
reinterpret_cast
<
TreeNode
*
>
(
aNode
)
)
;
}
T
*
Search
(
T
*
aKey
)
{
return
Search
(
reinterpret_cast
<
TreeNode
*
>
(
aKey
)
)
;
}
T
*
SearchOrNext
(
T
*
aKey
)
{
return
SearchOrNext
(
reinterpret_cast
<
TreeNode
*
>
(
aKey
)
)
;
}
void
Insert
(
T
*
aNode
)
{
Insert
(
reinterpret_cast
<
TreeNode
*
>
(
aNode
)
)
;
}
void
Remove
(
T
*
aNode
)
{
return
Remove
(
reinterpret_cast
<
TreeNode
*
>
(
aNode
)
)
;
}
private
:
struct
TreeNode
:
public
T
{
TreeNode
*
Left
(
)
{
return
(
TreeNode
*
)
Trait
:
:
GetTreeNode
(
this
)
.
Left
(
)
;
}
void
SetLeft
(
T
*
aValue
)
{
Trait
:
:
GetTreeNode
(
this
)
.
SetLeft
(
aValue
)
;
}
TreeNode
*
Right
(
)
{
return
(
TreeNode
*
)
Trait
:
:
GetTreeNode
(
this
)
.
Right
(
)
;
}
void
SetRight
(
T
*
aValue
)
{
Trait
:
:
GetTreeNode
(
this
)
.
SetRight
(
aValue
)
;
}
NodeColor
Color
(
)
{
return
Trait
:
:
GetTreeNode
(
this
)
.
Color
(
)
;
}
bool
IsRed
(
)
{
return
Trait
:
:
GetTreeNode
(
this
)
.
IsRed
(
)
;
}
bool
IsBlack
(
)
{
return
Trait
:
:
GetTreeNode
(
this
)
.
IsBlack
(
)
;
}
void
SetColor
(
NodeColor
aColor
)
{
Trait
:
:
GetTreeNode
(
this
)
.
SetColor
(
aColor
)
;
}
}
;
TreeNode
*
rbt_root
;
TreeNode
rbt_nil
;
TreeNode
*
First
(
TreeNode
*
aStart
)
{
TreeNode
*
ret
;
for
(
ret
=
aStart
?
aStart
:
rbt_root
;
ret
-
>
Left
(
)
!
=
&
rbt_nil
;
ret
=
ret
-
>
Left
(
)
)
{
}
return
(
ret
=
=
&
rbt_nil
)
?
nullptr
:
ret
;
}
TreeNode
*
Last
(
TreeNode
*
aStart
)
{
TreeNode
*
ret
;
for
(
ret
=
aStart
?
aStart
:
rbt_root
;
ret
-
>
Right
(
)
!
=
&
rbt_nil
;
ret
=
ret
-
>
Right
(
)
)
{
}
return
(
ret
=
=
&
rbt_nil
)
?
nullptr
:
ret
;
}
TreeNode
*
Next
(
TreeNode
*
aNode
)
{
TreeNode
*
ret
;
if
(
aNode
-
>
Right
(
)
!
=
&
rbt_nil
)
{
ret
=
First
(
aNode
-
>
Right
(
)
)
;
}
else
{
TreeNode
*
rbp_n_t
=
rbt_root
;
MOZ_ASSERT
(
rbp_n_t
!
=
&
rbt_nil
)
;
ret
=
&
rbt_nil
;
while
(
true
)
{
int
rbp_n_cmp
=
Trait
:
:
Compare
(
aNode
rbp_n_t
)
;
if
(
rbp_n_cmp
<
0
)
{
ret
=
rbp_n_t
;
rbp_n_t
=
rbp_n_t
-
>
Left
(
)
;
}
else
if
(
rbp_n_cmp
>
0
)
{
rbp_n_t
=
rbp_n_t
-
>
Right
(
)
;
}
else
{
break
;
}
MOZ_ASSERT
(
rbp_n_t
!
=
&
rbt_nil
)
;
}
}
return
(
ret
=
=
&
rbt_nil
)
?
nullptr
:
ret
;
}
TreeNode
*
Prev
(
TreeNode
*
aNode
)
{
TreeNode
*
ret
;
if
(
aNode
-
>
Left
(
)
!
=
&
rbt_nil
)
{
ret
=
Last
(
aNode
-
>
Left
(
)
)
;
}
else
{
TreeNode
*
rbp_p_t
=
rbt_root
;
MOZ_ASSERT
(
rbp_p_t
!
=
&
rbt_nil
)
;
ret
=
&
rbt_nil
;
while
(
true
)
{
int
rbp_p_cmp
=
Trait
:
:
Compare
(
aNode
rbp_p_t
)
;
if
(
rbp_p_cmp
<
0
)
{
rbp_p_t
=
rbp_p_t
-
>
Left
(
)
;
}
else
if
(
rbp_p_cmp
>
0
)
{
ret
=
rbp_p_t
;
rbp_p_t
=
rbp_p_t
-
>
Right
(
)
;
}
else
{
break
;
}
MOZ_ASSERT
(
rbp_p_t
!
=
&
rbt_nil
)
;
}
}
return
(
ret
=
=
&
rbt_nil
)
?
nullptr
:
ret
;
}
TreeNode
*
Search
(
TreeNode
*
aKey
)
{
TreeNode
*
ret
=
rbt_root
;
int
rbp_se_cmp
;
while
(
ret
!
=
&
rbt_nil
&
&
(
rbp_se_cmp
=
Trait
:
:
Compare
(
aKey
ret
)
)
!
=
0
)
{
if
(
rbp_se_cmp
<
0
)
{
ret
=
ret
-
>
Left
(
)
;
}
else
{
ret
=
ret
-
>
Right
(
)
;
}
}
return
(
ret
=
=
&
rbt_nil
)
?
nullptr
:
ret
;
}
TreeNode
*
SearchOrNext
(
TreeNode
*
aKey
)
{
TreeNode
*
ret
=
nullptr
;
TreeNode
*
rbp_ns_t
=
rbt_root
;
while
(
rbp_ns_t
!
=
&
rbt_nil
)
{
int
rbp_ns_cmp
=
Trait
:
:
Compare
(
aKey
rbp_ns_t
)
;
if
(
rbp_ns_cmp
<
0
)
{
ret
=
rbp_ns_t
;
rbp_ns_t
=
rbp_ns_t
-
>
Left
(
)
;
}
else
if
(
rbp_ns_cmp
>
0
)
{
rbp_ns_t
=
rbp_ns_t
-
>
Right
(
)
;
}
else
{
ret
=
rbp_ns_t
;
break
;
}
}
return
ret
;
}
void
Insert
(
TreeNode
*
aNode
)
{
TreeNode
rbp_i_s
;
TreeNode
*
rbp_i_g
*
rbp_i_p
*
rbp_i_c
*
rbp_i_t
*
rbp_i_u
;
int
rbp_i_cmp
=
0
;
rbp_i_g
=
&
rbt_nil
;
rbp_i_s
.
SetLeft
(
rbt_root
)
;
rbp_i_s
.
SetRight
(
&
rbt_nil
)
;
rbp_i_s
.
SetColor
(
NodeColor
:
:
Black
)
;
rbp_i_p
=
&
rbp_i_s
;
rbp_i_c
=
rbt_root
;
while
(
rbp_i_c
!
=
&
rbt_nil
)
{
rbp_i_t
=
rbp_i_c
-
>
Left
(
)
;
rbp_i_u
=
rbp_i_t
-
>
Left
(
)
;
if
(
rbp_i_t
-
>
IsRed
(
)
&
&
rbp_i_u
-
>
IsRed
(
)
)
{
rbp_i_t
=
RotateRight
(
rbp_i_c
)
;
rbp_i_u
=
rbp_i_t
-
>
Left
(
)
;
rbp_i_u
-
>
SetColor
(
NodeColor
:
:
Black
)
;
if
(
rbp_i_p
-
>
Left
(
)
=
=
rbp_i_c
)
{
rbp_i_p
-
>
SetLeft
(
rbp_i_t
)
;
rbp_i_c
=
rbp_i_t
;
}
else
{
MOZ_ASSERT
(
rbp_i_p
-
>
Right
(
)
=
=
rbp_i_c
)
;
rbp_i_p
-
>
SetRight
(
rbp_i_t
)
;
rbp_i_u
=
LeanLeft
(
rbp_i_p
)
;
if
(
rbp_i_g
-
>
Left
(
)
=
=
rbp_i_p
)
{
rbp_i_g
-
>
SetLeft
(
rbp_i_u
)
;
}
else
{
MOZ_ASSERT
(
rbp_i_g
-
>
Right
(
)
=
=
rbp_i_p
)
;
rbp_i_g
-
>
SetRight
(
rbp_i_u
)
;
}
rbp_i_p
=
rbp_i_u
;
rbp_i_cmp
=
Trait
:
:
Compare
(
aNode
rbp_i_p
)
;
if
(
rbp_i_cmp
<
0
)
{
rbp_i_c
=
rbp_i_p
-
>
Left
(
)
;
}
else
{
MOZ_ASSERT
(
rbp_i_cmp
>
0
)
;
rbp_i_c
=
rbp_i_p
-
>
Right
(
)
;
}
continue
;
}
}
rbp_i_g
=
rbp_i_p
;
rbp_i_p
=
rbp_i_c
;
rbp_i_cmp
=
Trait
:
:
Compare
(
aNode
rbp_i_c
)
;
if
(
rbp_i_cmp
<
0
)
{
rbp_i_c
=
rbp_i_c
-
>
Left
(
)
;
}
else
{
MOZ_ASSERT
(
rbp_i_cmp
>
0
)
;
rbp_i_c
=
rbp_i_c
-
>
Right
(
)
;
}
}
aNode
-
>
SetLeft
(
&
rbt_nil
)
;
aNode
-
>
SetRight
(
&
rbt_nil
)
;
aNode
-
>
SetColor
(
NodeColor
:
:
Red
)
;
if
(
rbp_i_cmp
>
0
)
{
rbp_i_p
-
>
SetRight
(
aNode
)
;
rbp_i_t
=
LeanLeft
(
rbp_i_p
)
;
if
(
rbp_i_g
-
>
Left
(
)
=
=
rbp_i_p
)
{
rbp_i_g
-
>
SetLeft
(
rbp_i_t
)
;
}
else
if
(
rbp_i_g
-
>
Right
(
)
=
=
rbp_i_p
)
{
rbp_i_g
-
>
SetRight
(
rbp_i_t
)
;
}
}
else
{
rbp_i_p
-
>
SetLeft
(
aNode
)
;
}
rbt_root
=
rbp_i_s
.
Left
(
)
;
rbt_root
-
>
SetColor
(
NodeColor
:
:
Black
)
;
}
void
Remove
(
TreeNode
*
aNode
)
{
TreeNode
rbp_r_s
;
TreeNode
*
rbp_r_p
*
rbp_r_c
*
rbp_r_xp
*
rbp_r_t
*
rbp_r_u
;
int
rbp_r_cmp
;
rbp_r_s
.
SetLeft
(
rbt_root
)
;
rbp_r_s
.
SetRight
(
&
rbt_nil
)
;
rbp_r_s
.
SetColor
(
NodeColor
:
:
Black
)
;
rbp_r_p
=
&
rbp_r_s
;
rbp_r_c
=
rbt_root
;
rbp_r_xp
=
&
rbt_nil
;
rbp_r_cmp
=
Trait
:
:
Compare
(
aNode
rbp_r_c
)
;
if
(
rbp_r_cmp
<
0
)
{
rbp_r_t
=
rbp_r_c
-
>
Left
(
)
;
rbp_r_u
=
rbp_r_t
-
>
Left
(
)
;
if
(
rbp_r_t
-
>
IsBlack
(
)
&
&
rbp_r_u
-
>
IsBlack
(
)
)
{
rbp_r_t
=
MoveRedLeft
(
rbp_r_c
)
;
rbp_r_t
-
>
SetColor
(
NodeColor
:
:
Black
)
;
rbp_r_p
-
>
SetLeft
(
rbp_r_t
)
;
rbp_r_c
=
rbp_r_t
;
}
else
{
rbp_r_p
=
rbp_r_c
;
rbp_r_c
=
rbp_r_c
-
>
Left
(
)
;
}
}
else
{
if
(
rbp_r_cmp
=
=
0
)
{
MOZ_ASSERT
(
aNode
=
=
rbp_r_c
)
;
if
(
rbp_r_c
-
>
Right
(
)
=
=
&
rbt_nil
)
{
if
(
rbp_r_c
-
>
Left
(
)
!
=
&
rbt_nil
)
{
rbp_r_t
=
LeanRight
(
rbp_r_c
)
;
rbp_r_t
-
>
SetRight
(
&
rbt_nil
)
;
}
else
{
rbp_r_t
=
&
rbt_nil
;
}
rbp_r_p
-
>
SetLeft
(
rbp_r_t
)
;
}
else
{
rbp_r_xp
=
rbp_r_p
;
rbp_r_cmp
=
1
;
}
}
if
(
rbp_r_cmp
=
=
1
)
{
if
(
rbp_r_c
-
>
Right
(
)
-
>
Left
(
)
-
>
IsBlack
(
)
)
{
rbp_r_t
=
rbp_r_c
-
>
Left
(
)
;
if
(
rbp_r_t
-
>
IsRed
(
)
)
{
rbp_r_t
=
MoveRedRight
(
rbp_r_c
)
;
}
else
{
rbp_r_c
-
>
SetColor
(
NodeColor
:
:
Red
)
;
rbp_r_u
=
rbp_r_t
-
>
Left
(
)
;
if
(
rbp_r_u
-
>
IsRed
(
)
)
{
rbp_r_u
-
>
SetColor
(
NodeColor
:
:
Black
)
;
rbp_r_t
=
RotateRight
(
rbp_r_c
)
;
rbp_r_u
=
RotateLeft
(
rbp_r_c
)
;
rbp_r_t
-
>
SetRight
(
rbp_r_u
)
;
}
else
{
rbp_r_t
-
>
SetColor
(
NodeColor
:
:
Red
)
;
rbp_r_t
=
RotateLeft
(
rbp_r_c
)
;
}
}
rbp_r_p
-
>
SetLeft
(
rbp_r_t
)
;
rbp_r_c
=
rbp_r_t
;
}
else
{
rbp_r_p
=
rbp_r_c
;
rbp_r_c
=
rbp_r_c
-
>
Right
(
)
;
}
}
}
if
(
rbp_r_cmp
!
=
0
)
{
while
(
true
)
{
MOZ_ASSERT
(
rbp_r_p
!
=
&
rbt_nil
)
;
rbp_r_cmp
=
Trait
:
:
Compare
(
aNode
rbp_r_c
)
;
if
(
rbp_r_cmp
<
0
)
{
rbp_r_t
=
rbp_r_c
-
>
Left
(
)
;
if
(
rbp_r_t
=
=
&
rbt_nil
)
{
if
(
rbp_r_xp
-
>
Left
(
)
=
=
(
aNode
)
)
{
rbp_r_xp
-
>
SetLeft
(
rbp_r_c
)
;
}
else
{
MOZ_ASSERT
(
rbp_r_xp
-
>
Right
(
)
=
=
(
aNode
)
)
;
rbp_r_xp
-
>
SetRight
(
rbp_r_c
)
;
}
rbp_r_c
-
>
SetLeft
(
aNode
-
>
Left
(
)
)
;
rbp_r_c
-
>
SetRight
(
aNode
-
>
Right
(
)
)
;
rbp_r_c
-
>
SetColor
(
aNode
-
>
Color
(
)
)
;
if
(
rbp_r_p
-
>
Left
(
)
=
=
rbp_r_c
)
{
rbp_r_p
-
>
SetLeft
(
&
rbt_nil
)
;
}
else
{
MOZ_ASSERT
(
rbp_r_p
-
>
Right
(
)
=
=
rbp_r_c
)
;
rbp_r_p
-
>
SetRight
(
&
rbt_nil
)
;
}
break
;
}
rbp_r_u
=
rbp_r_t
-
>
Left
(
)
;
if
(
rbp_r_t
-
>
IsBlack
(
)
&
&
rbp_r_u
-
>
IsBlack
(
)
)
{
rbp_r_t
=
MoveRedLeft
(
rbp_r_c
)
;
if
(
rbp_r_p
-
>
Left
(
)
=
=
rbp_r_c
)
{
rbp_r_p
-
>
SetLeft
(
rbp_r_t
)
;
}
else
{
rbp_r_p
-
>
SetRight
(
rbp_r_t
)
;
}
rbp_r_c
=
rbp_r_t
;
}
else
{
rbp_r_p
=
rbp_r_c
;
rbp_r_c
=
rbp_r_c
-
>
Left
(
)
;
}
}
else
{
if
(
rbp_r_cmp
=
=
0
)
{
MOZ_ASSERT
(
aNode
=
=
rbp_r_c
)
;
if
(
rbp_r_c
-
>
Right
(
)
=
=
&
rbt_nil
)
{
if
(
rbp_r_c
-
>
Left
(
)
!
=
&
rbt_nil
)
{
rbp_r_t
=
LeanRight
(
rbp_r_c
)
;
rbp_r_t
-
>
SetRight
(
&
rbt_nil
)
;
}
else
{
rbp_r_t
=
&
rbt_nil
;
}
if
(
rbp_r_p
-
>
Left
(
)
=
=
rbp_r_c
)
{
rbp_r_p
-
>
SetLeft
(
rbp_r_t
)
;
}
else
{
rbp_r_p
-
>
SetRight
(
rbp_r_t
)
;
}
break
;
}
else
{
rbp_r_xp
=
rbp_r_p
;
}
}
rbp_r_t
=
rbp_r_c
-
>
Right
(
)
;
rbp_r_u
=
rbp_r_t
-
>
Left
(
)
;
if
(
rbp_r_u
-
>
IsBlack
(
)
)
{
rbp_r_t
=
MoveRedRight
(
rbp_r_c
)
;
if
(
rbp_r_p
-
>
Left
(
)
=
=
rbp_r_c
)
{
rbp_r_p
-
>
SetLeft
(
rbp_r_t
)
;
}
else
{
rbp_r_p
-
>
SetRight
(
rbp_r_t
)
;
}
rbp_r_c
=
rbp_r_t
;
}
else
{
rbp_r_p
=
rbp_r_c
;
rbp_r_c
=
rbp_r_c
-
>
Right
(
)
;
}
}
}
}
rbt_root
=
rbp_r_s
.
Left
(
)
;
}
TreeNode
*
RotateLeft
(
TreeNode
*
aNode
)
{
TreeNode
*
node
=
aNode
-
>
Right
(
)
;
aNode
-
>
SetRight
(
node
-
>
Left
(
)
)
;
node
-
>
SetLeft
(
aNode
)
;
return
node
;
}
TreeNode
*
RotateRight
(
TreeNode
*
aNode
)
{
TreeNode
*
node
=
aNode
-
>
Left
(
)
;
aNode
-
>
SetLeft
(
node
-
>
Right
(
)
)
;
node
-
>
SetRight
(
aNode
)
;
return
node
;
}
TreeNode
*
LeanLeft
(
TreeNode
*
aNode
)
{
TreeNode
*
node
=
RotateLeft
(
aNode
)
;
NodeColor
color
=
aNode
-
>
Color
(
)
;
node
-
>
SetColor
(
color
)
;
aNode
-
>
SetColor
(
NodeColor
:
:
Red
)
;
return
node
;
}
TreeNode
*
LeanRight
(
TreeNode
*
aNode
)
{
TreeNode
*
node
=
RotateRight
(
aNode
)
;
NodeColor
color
=
aNode
-
>
Color
(
)
;
node
-
>
SetColor
(
color
)
;
aNode
-
>
SetColor
(
NodeColor
:
:
Red
)
;
return
node
;
}
TreeNode
*
MoveRedLeft
(
TreeNode
*
aNode
)
{
TreeNode
*
node
;
TreeNode
*
rbp_mrl_t
*
rbp_mrl_u
;
rbp_mrl_t
=
aNode
-
>
Left
(
)
;
rbp_mrl_t
-
>
SetColor
(
NodeColor
:
:
Red
)
;
rbp_mrl_t
=
aNode
-
>
Right
(
)
;
rbp_mrl_u
=
rbp_mrl_t
-
>
Left
(
)
;
if
(
rbp_mrl_u
-
>
IsRed
(
)
)
{
rbp_mrl_u
=
RotateRight
(
rbp_mrl_t
)
;
aNode
-
>
SetRight
(
rbp_mrl_u
)
;
node
=
RotateLeft
(
aNode
)
;
rbp_mrl_t
=
aNode
-
>
Right
(
)
;
if
(
rbp_mrl_t
-
>
IsRed
(
)
)
{
rbp_mrl_t
-
>
SetColor
(
NodeColor
:
:
Black
)
;
aNode
-
>
SetColor
(
NodeColor
:
:
Red
)
;
rbp_mrl_t
=
RotateLeft
(
aNode
)
;
node
-
>
SetLeft
(
rbp_mrl_t
)
;
}
else
{
aNode
-
>
SetColor
(
NodeColor
:
:
Black
)
;
}
}
else
{
aNode
-
>
SetColor
(
NodeColor
:
:
Red
)
;
node
=
RotateLeft
(
aNode
)
;
}
return
node
;
}
TreeNode
*
MoveRedRight
(
TreeNode
*
aNode
)
{
TreeNode
*
node
;
TreeNode
*
rbp_mrr_t
;
rbp_mrr_t
=
aNode
-
>
Left
(
)
;
if
(
rbp_mrr_t
-
>
IsRed
(
)
)
{
TreeNode
*
rbp_mrr_u
*
rbp_mrr_v
;
rbp_mrr_u
=
rbp_mrr_t
-
>
Right
(
)
;
rbp_mrr_v
=
rbp_mrr_u
-
>
Left
(
)
;
if
(
rbp_mrr_v
-
>
IsRed
(
)
)
{
rbp_mrr_u
-
>
SetColor
(
aNode
-
>
Color
(
)
)
;
rbp_mrr_v
-
>
SetColor
(
NodeColor
:
:
Black
)
;
rbp_mrr_u
=
RotateLeft
(
rbp_mrr_t
)
;
aNode
-
>
SetLeft
(
rbp_mrr_u
)
;
node
=
RotateRight
(
aNode
)
;
rbp_mrr_t
=
RotateLeft
(
aNode
)
;
node
-
>
SetRight
(
rbp_mrr_t
)
;
}
else
{
rbp_mrr_t
-
>
SetColor
(
aNode
-
>
Color
(
)
)
;
rbp_mrr_u
-
>
SetColor
(
NodeColor
:
:
Red
)
;
node
=
RotateRight
(
aNode
)
;
rbp_mrr_t
=
RotateLeft
(
aNode
)
;
node
-
>
SetRight
(
rbp_mrr_t
)
;
}
aNode
-
>
SetColor
(
NodeColor
:
:
Red
)
;
}
else
{
rbp_mrr_t
-
>
SetColor
(
NodeColor
:
:
Red
)
;
rbp_mrr_t
=
rbp_mrr_t
-
>
Left
(
)
;
if
(
rbp_mrr_t
-
>
IsRed
(
)
)
{
rbp_mrr_t
-
>
SetColor
(
NodeColor
:
:
Black
)
;
node
=
RotateRight
(
aNode
)
;
rbp_mrr_t
=
RotateLeft
(
aNode
)
;
node
-
>
SetRight
(
rbp_mrr_t
)
;
}
else
{
node
=
RotateLeft
(
aNode
)
;
}
}
return
node
;
}
public
:
class
Iterator
{
TreeNode
*
mSentinel
;
TreeNode
*
mPath
[
3
*
(
(
SIZEOF_PTR
<
<
3
)
-
(
SIZEOF_PTR_2POW
+
1
)
)
]
;
unsigned
mDepth
;
public
:
explicit
Iterator
(
RedBlackTree
<
T
Trait
>
*
aTree
)
:
mSentinel
(
&
aTree
-
>
rbt_nil
)
mDepth
(
0
)
{
if
(
aTree
-
>
rbt_root
!
=
mSentinel
)
{
TreeNode
*
node
;
mPath
[
mDepth
+
+
]
=
aTree
-
>
rbt_root
;
while
(
(
node
=
mPath
[
mDepth
-
1
]
-
>
Left
(
)
)
!
=
mSentinel
)
{
mPath
[
mDepth
+
+
]
=
node
;
}
}
}
class
Item
{
Iterator
*
mIterator
;
T
*
mItem
;
public
:
Item
(
Iterator
*
aIterator
T
*
aItem
)
:
mIterator
(
aIterator
)
mItem
(
aItem
)
{
}
bool
operator
!
=
(
const
Item
&
aOther
)
const
{
return
(
mIterator
!
=
aOther
.
mIterator
)
|
|
(
mItem
!
=
aOther
.
mItem
)
;
}
T
*
operator
*
(
)
const
{
return
mItem
;
}
const
Item
&
operator
+
+
(
)
{
mItem
=
mIterator
-
>
Next
(
)
;
return
*
this
;
}
}
;
Item
begin
(
)
{
return
Item
(
this
mDepth
>
0
?
mPath
[
mDepth
-
1
]
:
nullptr
)
;
}
Item
end
(
)
{
return
Item
(
this
nullptr
)
;
}
TreeNode
*
Next
(
)
{
TreeNode
*
node
;
if
(
(
node
=
mPath
[
mDepth
-
1
]
-
>
Right
(
)
)
!
=
mSentinel
)
{
mPath
[
mDepth
+
+
]
=
node
;
while
(
(
node
=
mPath
[
mDepth
-
1
]
-
>
Left
(
)
)
!
=
mSentinel
)
{
mPath
[
mDepth
+
+
]
=
node
;
}
}
else
{
for
(
mDepth
-
-
;
mDepth
>
0
;
mDepth
-
-
)
{
if
(
mPath
[
mDepth
-
1
]
-
>
Left
(
)
=
=
mPath
[
mDepth
]
)
{
break
;
}
}
}
return
mDepth
>
0
?
mPath
[
mDepth
-
1
]
:
nullptr
;
}
}
;
Iterator
iter
(
)
{
return
Iterator
(
this
)
;
}
}
;
#
endif
