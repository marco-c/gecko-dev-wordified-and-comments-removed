#
ifndef
mozilla_ipc_DaemonSocketPDUHelpers_h
#
define
mozilla_ipc_DaemonSocketPDUHelpers_h
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
ipc
/
DaemonSocketPDU
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
ipc
{
struct
DaemonSocketPDUHeader
{
DaemonSocketPDUHeader
(
)
:
mService
(
0x00
)
mOpcode
(
0x00
)
mLength
(
0x00
)
{
}
DaemonSocketPDUHeader
(
uint8_t
aService
uint8_t
aOpcode
uint16_t
aLength
)
:
mService
(
aService
)
mOpcode
(
aOpcode
)
mLength
(
aLength
)
{
}
uint8_t
mService
;
uint8_t
mOpcode
;
uint16_t
mLength
;
}
;
namespace
DaemonSocketPDUHelpers
{
nsresult
Convert
(
bool
aIn
uint8_t
&
aOut
)
;
nsresult
Convert
(
bool
aIn
int32_t
&
aOut
)
;
nsresult
Convert
(
int
aIn
uint8_t
&
aOut
)
;
nsresult
Convert
(
int
aIn
int16_t
&
aOut
)
;
nsresult
Convert
(
int
aIn
int32_t
&
aOut
)
;
nsresult
Convert
(
uint8_t
aIn
bool
&
aOut
)
;
nsresult
Convert
(
uint8_t
aIn
char
&
aOut
)
;
nsresult
Convert
(
uint8_t
aIn
int
&
aOut
)
;
nsresult
Convert
(
uint8_t
aIn
unsigned
long
&
aOut
)
;
nsresult
Convert
(
uint32_t
aIn
int
&
aOut
)
;
nsresult
Convert
(
uint32_t
aIn
uint8_t
&
aOut
)
;
nsresult
Convert
(
size_t
aIn
uint16_t
&
aOut
)
;
template
<
typename
T
>
nsresult
PackPDU
(
T
aIn
DaemonSocketPDU
&
aPDU
)
;
inline
nsresult
PackPDU
(
uint8_t
aIn
DaemonSocketPDU
&
aPDU
)
{
return
aPDU
.
Write
(
aIn
)
;
}
inline
nsresult
PackPDU
(
uint16_t
aIn
DaemonSocketPDU
&
aPDU
)
{
return
aPDU
.
Write
(
aIn
)
;
}
inline
nsresult
PackPDU
(
int32_t
aIn
DaemonSocketPDU
&
aPDU
)
{
return
aPDU
.
Write
(
aIn
)
;
}
inline
nsresult
PackPDU
(
uint32_t
aIn
DaemonSocketPDU
&
aPDU
)
{
return
aPDU
.
Write
(
aIn
)
;
}
nsresult
PackPDU
(
const
DaemonSocketPDUHeader
&
aIn
DaemonSocketPDU
&
aPDU
)
;
template
<
typename
T
>
nsresult
UnpackPDU
(
DaemonSocketPDU
&
aPDU
T
&
aOut
)
;
inline
nsresult
UnpackPDU
(
DaemonSocketPDU
&
aPDU
int8_t
&
aOut
)
{
return
aPDU
.
Read
(
aOut
)
;
}
inline
nsresult
UnpackPDU
(
DaemonSocketPDU
&
aPDU
uint8_t
&
aOut
)
{
return
aPDU
.
Read
(
aOut
)
;
}
inline
nsresult
UnpackPDU
(
DaemonSocketPDU
&
aPDU
uint16_t
&
aOut
)
{
return
aPDU
.
Read
(
aOut
)
;
}
inline
nsresult
UnpackPDU
(
DaemonSocketPDU
&
aPDU
int32_t
&
aOut
)
{
return
aPDU
.
Read
(
aOut
)
;
}
inline
nsresult
UnpackPDU
(
DaemonSocketPDU
&
aPDU
uint32_t
&
aOut
)
{
return
aPDU
.
Read
(
aOut
)
;
}
inline
nsresult
UnpackPDU
(
DaemonSocketPDU
&
aPDU
DaemonSocketPDUHeader
&
aOut
)
{
nsresult
rv
=
UnpackPDU
(
aPDU
aOut
.
mService
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
UnpackPDU
(
aPDU
aOut
.
mOpcode
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
UnpackPDU
(
aPDU
aOut
.
mLength
)
;
}
nsresult
UnpackPDU
(
DaemonSocketPDU
&
aPDU
nsDependentCString
&
aOut
)
;
struct
UnpackCString0
{
UnpackCString0
(
nsCString
&
aString
)
:
mString
(
&
aString
)
{
}
nsCString
*
mString
;
}
;
nsresult
UnpackPDU
(
DaemonSocketPDU
&
aPDU
const
UnpackCString0
&
aOut
)
;
struct
UnpackString0
{
UnpackString0
(
nsString
&
aString
)
:
mString
(
&
aString
)
{
}
nsString
*
mString
;
}
;
nsresult
UnpackPDU
(
DaemonSocketPDU
&
aPDU
const
UnpackString0
&
aOut
)
;
template
<
typename
T1
>
class
ConstantInitOp1
final
{
public
:
ConstantInitOp1
(
const
T1
&
aArg1
)
:
mArg1
(
aArg1
)
{
}
nsresult
operator
(
)
(
T1
&
aArg1
)
const
{
aArg1
=
mArg1
;
return
NS_OK
;
}
private
:
const
T1
&
mArg1
;
}
;
template
<
typename
T1
typename
T2
>
class
ConstantInitOp2
final
{
public
:
ConstantInitOp2
(
const
T1
&
aArg1
const
T2
&
aArg2
)
:
mArg1
(
aArg1
)
mArg2
(
aArg2
)
{
}
nsresult
operator
(
)
(
T1
&
aArg1
T2
&
aArg2
)
const
{
aArg1
=
mArg1
;
aArg2
=
mArg2
;
return
NS_OK
;
}
private
:
const
T1
&
mArg1
;
const
T2
&
mArg2
;
}
;
template
<
typename
T1
typename
T2
typename
T3
>
class
ConstantInitOp3
final
{
public
:
ConstantInitOp3
(
const
T1
&
aArg1
const
T2
&
aArg2
const
T3
&
aArg3
)
:
mArg1
(
aArg1
)
mArg2
(
aArg2
)
mArg3
(
aArg3
)
{
}
nsresult
operator
(
)
(
T1
&
aArg1
T2
&
aArg2
T3
&
aArg3
)
const
{
aArg1
=
mArg1
;
aArg2
=
mArg2
;
aArg3
=
mArg3
;
return
NS_OK
;
}
private
:
const
T1
&
mArg1
;
const
T2
&
mArg2
;
const
T3
&
mArg3
;
}
;
class
PDUInitOp
{
protected
:
PDUInitOp
(
DaemonSocketPDU
&
aPDU
)
:
mPDU
(
&
aPDU
)
{
}
DaemonSocketPDU
&
GetPDU
(
)
const
{
return
*
mPDU
;
}
void
WarnAboutTrailingData
(
)
const
;
private
:
DaemonSocketPDU
*
mPDU
;
}
;
}
}
}
#
endif
