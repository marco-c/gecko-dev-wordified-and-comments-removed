#
include
"
TestShellChild
.
h
"
using
mozilla
:
:
ipc
:
:
PTestShellCommandChild
;
using
mozilla
:
:
ipc
:
:
TestShellChild
;
using
mozilla
:
:
ipc
:
:
XPCShellEnvironment
;
TestShellChild
:
:
TestShellChild
(
)
:
mXPCShell
(
XPCShellEnvironment
:
:
CreateEnvironment
(
)
)
{
}
mozilla
:
:
ipc
:
:
IPCResult
TestShellChild
:
:
RecvExecuteCommand
(
const
nsString
&
aCommand
)
{
if
(
mXPCShell
-
>
IsQuitting
(
)
)
{
NS_WARNING
(
"
Commands
sent
after
quit
command
issued
!
"
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
}
if
(
!
mXPCShell
-
>
EvaluateString
(
aCommand
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
PTestShellCommandChild
*
TestShellChild
:
:
AllocPTestShellCommandChild
(
const
nsString
&
aCommand
)
{
return
new
PTestShellCommandChild
(
)
;
}
bool
TestShellChild
:
:
DeallocPTestShellCommandChild
(
PTestShellCommandChild
*
aCommand
)
{
delete
aCommand
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
TestShellChild
:
:
RecvPTestShellCommandConstructor
(
PTestShellCommandChild
*
aActor
const
nsString
&
aCommand
)
{
if
(
mXPCShell
-
>
IsQuitting
(
)
)
{
NS_WARNING
(
"
Commands
sent
after
quit
command
issued
!
"
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
}
nsString
response
;
if
(
!
mXPCShell
-
>
EvaluateString
(
aCommand
&
response
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
if
(
!
PTestShellCommandChild
:
:
Send__delete__
(
aActor
response
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
