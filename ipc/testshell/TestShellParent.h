#
ifndef
ipc_testshell_TestShellParent_h
#
define
ipc_testshell_TestShellParent_h
1
#
include
"
mozilla
/
ipc
/
PTestShellParent
.
h
"
#
include
"
mozilla
/
ipc
/
PTestShellCommandParent
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
TestShellCommandParent
;
class
TestShellParent
:
public
PTestShellParent
{
friend
class
PTestShellParent
;
public
:
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
PTestShellCommandParent
*
AllocPTestShellCommandParent
(
const
nsString
&
aCommand
)
;
bool
DeallocPTestShellCommandParent
(
PTestShellCommandParent
*
aActor
)
;
bool
CommandDone
(
TestShellCommandParent
*
aActor
const
nsString
&
aResponse
)
;
}
;
class
TestShellCommandParent
:
public
PTestShellCommandParent
{
friend
class
PTestShellCommandParent
;
public
:
TestShellCommandParent
(
)
=
default
;
bool
SetCallback
(
JSContext
*
aCx
const
JS
:
:
Value
&
aCallback
)
;
bool
RunCallback
(
const
nsString
&
aResponse
)
;
void
ReleaseCallback
(
)
;
protected
:
bool
ExecuteCallback
(
const
nsString
&
aResponse
)
;
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
const
nsString
&
aResponse
)
{
if
(
!
ExecuteCallback
(
aResponse
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
private
:
JS
:
:
PersistentRooted
<
JS
:
:
Value
>
mCallback
;
}
;
}
}
#
endif
