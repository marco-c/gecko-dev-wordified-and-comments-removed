if
CONFIG
[
'
MOZ_WIDGET_TOOLKIT
'
]
=
=
'
android
'
:
Program
(
CONFIG
[
'
MOZ_CHILD_PROCESS_NAME
'
]
)
SOURCES
+
=
[
'
MozillaRuntimeMainAndroid
.
cpp
'
]
else
:
GeckoProgram
(
CONFIG
[
'
MOZ_CHILD_PROCESS_NAME
'
]
linkage
=
'
dependent
'
)
SOURCES
+
=
[
'
MozillaRuntimeMain
.
cpp
'
]
include
(
'
/
ipc
/
chromium
/
chromium
-
config
.
mozbuild
'
)
LOCAL_INCLUDES
+
=
[
'
/
toolkit
/
xre
'
'
/
xpcom
/
base
'
]
if
CONFIG
[
'
OS_ARCH
'
]
=
=
'
WINNT
'
:
DELAYLOAD_DLLS
+
=
[
'
nss3
.
dll
'
]
if
CONFIG
[
'
MOZ_SANDBOX
'
]
:
LOCAL_INCLUDES
+
=
[
'
/
security
/
sandbox
/
chromium
'
'
/
security
/
sandbox
/
chromium
-
shim
'
]
OS_LIBS
+
=
[
'
version
'
]
USE_LIBS
+
=
[
'
sandbox_s
'
]
DELAYLOAD_DLLS
+
=
[
'
winmm
.
dll
'
'
user32
.
dll
'
]
OS_LIBS
+
=
[
'
ntdll
'
]
DELAYLOAD_DLLS
+
=
[
'
xul
.
dll
'
]
if
CONFIG
[
'
MOZ_SANDBOX
'
]
and
CONFIG
[
'
OS_TARGET
'
]
=
=
'
Darwin
'
:
LOCAL_INCLUDES
+
=
[
'
/
security
/
sandbox
/
chromium
'
'
/
security
/
sandbox
/
chromium
-
shim
'
]
USE_LIBS
+
=
[
'
mozsandbox
'
]
if
CONFIG
[
'
CC_TYPE
'
]
=
=
'
clang
-
cl
'
:
WIN32_EXE_LDFLAGS
+
=
[
'
-
ENTRY
:
wmainCRTStartup
'
]
if
CONFIG
[
'
OS_ARCH
'
]
=
=
'
WINNT
'
and
CONFIG
[
'
CC_TYPE
'
]
not
in
(
'
clang
'
'
gcc
'
)
:
LDFLAGS
+
=
[
'
/
HEAP
:
0x40000
'
]
if
CONFIG
[
'
CC_TYPE
'
]
in
(
'
clang
'
'
gcc
'
)
:
CXXFLAGS
+
=
[
'
-
Wshadow
'
]
with
Files
(
"
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
DOM
:
Content
Processes
"
)
