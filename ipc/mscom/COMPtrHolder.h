#
ifndef
mozilla_mscom_COMPtrHolder_h
#
define
mozilla_mscom_COMPtrHolder_h
#
include
<
utility
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
mscom
/
ProxyStream
.
h
"
#
include
"
mozilla
/
mscom
/
Ptr
.
h
"
#
if
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
endif
#
include
"
nsExceptionHandler
.
h
"
namespace
mozilla
{
namespace
mscom
{
template
<
typename
Interface
const
IID
&
_IID
>
class
COMPtrHolder
{
public
:
typedef
ProxyUniquePtr
<
Interface
>
COMPtrType
;
typedef
COMPtrHolder
<
Interface
_IID
>
ThisType
;
typedef
typename
detail
:
:
EnvironmentSelector
<
Interface
>
:
:
Type
EnvType
;
COMPtrHolder
(
)
{
}
MOZ_IMPLICIT
COMPtrHolder
(
decltype
(
nullptr
)
)
{
}
explicit
COMPtrHolder
(
COMPtrType
&
&
aPtr
)
:
mPtr
(
std
:
:
forward
<
COMPtrType
>
(
aPtr
)
)
{
}
COMPtrHolder
(
COMPtrType
&
&
aPtr
const
ActivationContext
&
aActCtx
)
:
mPtr
(
std
:
:
forward
<
COMPtrType
>
(
aPtr
)
)
mActCtx
(
aActCtx
)
{
}
Interface
*
Get
(
)
const
{
return
mPtr
.
get
(
)
;
}
[
[
nodiscard
]
]
Interface
*
Release
(
)
{
return
mPtr
.
release
(
)
;
}
void
Set
(
COMPtrType
&
&
aPtr
)
{
mPtr
=
std
:
:
forward
<
COMPtrType
>
(
aPtr
)
;
}
void
SetActCtx
(
const
ActivationContext
&
aActCtx
)
{
mActCtx
=
aActCtx
;
}
#
if
defined
(
MOZ_SANDBOX
)
void
PreserveStream
(
PreservedStreamPtr
aPtr
)
const
{
MOZ_ASSERT
(
!
mMarshaledStream
)
;
mMarshaledStream
=
std
:
:
move
(
aPtr
)
;
}
PreservedStreamPtr
GetPreservedStream
(
)
{
return
std
:
:
move
(
mMarshaledStream
)
;
}
#
endif
COMPtrHolder
(
const
COMPtrHolder
&
aOther
)
=
delete
;
COMPtrHolder
(
COMPtrHolder
&
&
aOther
)
:
mPtr
(
std
:
:
move
(
aOther
.
mPtr
)
)
#
if
defined
(
MOZ_SANDBOX
)
mMarshaledStream
(
std
:
:
move
(
aOther
.
mMarshaledStream
)
)
#
endif
{
}
ThisType
&
operator
=
(
const
ThisType
&
aOther
)
{
Set
(
std
:
:
move
(
aOther
.
mPtr
)
)
;
#
if
defined
(
MOZ_SANDBOX
)
mMarshaledStream
=
std
:
:
move
(
aOther
.
mMarshaledStream
)
;
#
endif
return
*
this
;
}
ThisType
&
operator
=
(
ThisType
&
&
aOther
)
{
Set
(
std
:
:
move
(
aOther
.
mPtr
)
)
;
#
if
defined
(
MOZ_SANDBOX
)
mMarshaledStream
=
std
:
:
move
(
aOther
.
mMarshaledStream
)
;
#
endif
return
*
this
;
}
bool
operator
=
=
(
const
ThisType
&
aOther
)
const
{
return
mPtr
=
=
aOther
.
mPtr
;
}
bool
IsNull
(
)
const
{
return
!
mPtr
;
}
private
:
mutable
COMPtrType
mPtr
;
ActivationContext
mActCtx
;
#
if
defined
(
MOZ_SANDBOX
)
mutable
PreservedStreamPtr
mMarshaledStream
;
#
endif
}
;
}
}
namespace
IPC
{
template
<
typename
Interface
const
IID
&
_IID
>
struct
ParamTraits
<
mozilla
:
:
mscom
:
:
COMPtrHolder
<
Interface
_IID
>
>
{
typedef
mozilla
:
:
mscom
:
:
COMPtrHolder
<
Interface
_IID
>
paramType
;
static
void
Write
(
MessageWriter
*
aWriter
const
paramType
&
aParam
)
{
#
if
defined
(
MOZ_SANDBOX
)
static
const
bool
sIsStreamPreservationNeeded
=
XRE_IsParentProcess
(
)
&
&
mozilla
:
:
GetEffectiveContentSandboxLevel
(
)
>
=
3
;
#
else
const
bool
sIsStreamPreservationNeeded
=
false
;
#
endif
typename
paramType
:
:
EnvType
env
;
mozilla
:
:
mscom
:
:
ProxyStreamFlags
flags
=
sIsStreamPreservationNeeded
?
mozilla
:
:
mscom
:
:
ProxyStreamFlags
:
:
ePreservable
:
mozilla
:
:
mscom
:
:
ProxyStreamFlags
:
:
eDefault
;
mozilla
:
:
mscom
:
:
ProxyStream
proxyStream
(
_IID
aParam
.
Get
(
)
&
env
flags
)
;
int
bufLen
;
const
BYTE
*
buf
=
proxyStream
.
GetBuffer
(
bufLen
)
;
MOZ_ASSERT
(
buf
|
|
!
bufLen
)
;
aWriter
-
>
WriteInt
(
bufLen
)
;
if
(
bufLen
)
{
aWriter
-
>
WriteBytes
(
reinterpret_cast
<
const
char
*
>
(
buf
)
bufLen
)
;
}
#
if
defined
(
MOZ_SANDBOX
)
if
(
sIsStreamPreservationNeeded
)
{
aParam
.
PreserveStream
(
proxyStream
.
GetPreservedStream
(
)
)
;
}
#
endif
}
static
bool
Read
(
MessageReader
*
aReader
paramType
*
aResult
)
{
int
length
;
if
(
!
aReader
-
>
ReadLength
(
&
length
)
)
{
return
false
;
}
mozilla
:
:
UniquePtr
<
BYTE
[
]
>
buf
;
if
(
length
)
{
buf
=
mozilla
:
:
MakeUnique
<
BYTE
[
]
>
(
length
)
;
if
(
!
aReader
-
>
ReadBytesInto
(
buf
.
get
(
)
length
)
)
{
return
false
;
}
}
typename
paramType
:
:
EnvType
env
;
mozilla
:
:
mscom
:
:
ProxyStream
proxyStream
(
_IID
buf
.
get
(
)
length
&
env
)
;
if
(
!
proxyStream
.
IsValid
(
)
)
{
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
ProxyStreamValid
"
false
"
_ns
)
;
return
false
;
}
typename
paramType
:
:
COMPtrType
ptr
;
if
(
!
proxyStream
.
GetInterface
(
mozilla
:
:
mscom
:
:
getter_AddRefs
(
ptr
)
)
)
{
return
false
;
}
aResult
-
>
Set
(
std
:
:
move
(
ptr
)
)
;
return
true
;
}
}
;
}
#
endif
