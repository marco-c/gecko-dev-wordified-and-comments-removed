#
ifndef
mozilla_mscom_AgileReference_h
#
define
mozilla_mscom_AgileReference_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
<
objidl
.
h
>
namespace
mozilla
:
:
mscom
{
class
AgileReference
final
{
public
:
AgileReference
(
)
;
template
<
typename
InterfaceT
>
explicit
AgileReference
(
RefPtr
<
InterfaceT
>
&
aObject
)
:
AgileReference
(
__uuidof
(
InterfaceT
)
aObject
)
{
}
AgileReference
(
REFIID
aIid
IUnknown
*
aObject
)
;
AgileReference
(
const
AgileReference
&
aOther
)
=
default
;
AgileReference
(
AgileReference
&
&
aOther
)
noexcept
;
~
AgileReference
(
)
;
explicit
operator
bool
(
)
const
{
return
!
!
mAgileRef
;
}
HRESULT
GetHResult
(
)
const
{
return
mHResult
;
}
template
<
typename
T
>
void
Assign
(
const
RefPtr
<
T
>
&
aOther
)
{
Assign
(
__uuidof
(
T
)
aOther
)
;
}
HRESULT
ResolveRaw
(
REFIID
aIid
void
*
*
aOutInterface
)
const
;
template
<
typename
Interface
>
HRESULT
Resolve
(
RefPtr
<
Interface
>
&
aOutInterface
)
const
{
return
this
-
>
ResolveRaw
(
__uuidof
(
Interface
)
getter_AddRefs
(
aOutInterface
)
)
;
}
template
<
typename
T
>
RefPtr
<
T
>
Resolve
(
)
{
RefPtr
<
T
>
p
;
Resolve
<
T
>
(
p
)
;
return
p
;
}
AgileReference
&
operator
=
(
const
AgileReference
&
aOther
)
;
AgileReference
&
operator
=
(
AgileReference
&
&
aOther
)
noexcept
;
AgileReference
&
operator
=
(
decltype
(
nullptr
)
)
{
Clear
(
)
;
return
*
this
;
}
void
Clear
(
)
;
private
:
void
Assign
(
REFIID
aIid
IUnknown
*
aObject
)
;
void
AssignInternal
(
IUnknown
*
aObject
)
;
private
:
IID
mIid
;
RefPtr
<
IAgileReference
>
mAgileRef
;
HRESULT
mHResult
;
}
;
}
#
endif
