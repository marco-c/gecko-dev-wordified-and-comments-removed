#
ifndef
mozilla_mscom_AgileReference_h
#
define
mozilla_mscom_AgileReference_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
<
objidl
.
h
>
namespace
mozilla
{
namespace
mscom
{
class
AgileReference
final
{
public
:
AgileReference
(
)
;
template
<
typename
InterfaceT
>
explicit
AgileReference
(
RefPtr
<
InterfaceT
>
&
aObject
)
:
AgileReference
(
__uuidof
(
InterfaceT
)
aObject
)
{
}
AgileReference
(
REFIID
aIid
IUnknown
*
aObject
)
;
AgileReference
(
AgileReference
&
&
aOther
)
;
~
AgileReference
(
)
;
explicit
operator
bool
(
)
const
{
return
mAgileRef
|
|
mGitCookie
;
}
template
<
typename
T
>
void
Assign
(
const
RefPtr
<
T
>
&
aOther
)
{
Assign
(
__uuidof
(
T
)
aOther
)
;
}
template
<
typename
T
>
AgileReference
&
operator
=
(
const
RefPtr
<
T
>
&
aOther
)
{
Assign
(
aOther
)
;
return
*
this
;
}
HRESULT
Resolve
(
REFIID
aIid
void
*
*
aOutInterface
)
const
;
AgileReference
(
const
AgileReference
&
aOther
)
=
delete
;
AgileReference
&
operator
=
(
const
AgileReference
&
aOther
)
=
delete
;
AgileReference
&
operator
=
(
AgileReference
&
&
aOther
)
;
private
:
void
Assign
(
REFIID
aIid
IUnknown
*
aObject
)
;
void
AssignInternal
(
IUnknown
*
aObject
)
;
void
Clear
(
)
;
static
IGlobalInterfaceTable
*
ObtainGit
(
)
;
private
:
IID
mIid
;
RefPtr
<
IAgileReference
>
mAgileRef
;
DWORD
mGitCookie
;
}
;
}
}
template
<
typename
T
>
RefPtr
<
T
>
:
:
RefPtr
(
const
mozilla
:
:
mscom
:
:
AgileReference
&
aAgileRef
)
{
void
*
newRawPtr
;
if
(
FAILED
(
aAgileRef
.
Resolve
(
__uuidof
(
T
)
&
newRawPtr
)
)
)
{
newRawPtr
=
nullptr
;
}
mRawPtr
=
static_cast
<
T
*
>
(
newRawPtr
)
;
}
template
<
typename
T
>
RefPtr
<
T
>
&
RefPtr
<
T
>
:
:
operator
=
(
const
mozilla
:
:
mscom
:
:
AgileReference
&
aAgileRef
)
{
void
*
newRawPtr
;
if
(
FAILED
(
aAgileRef
.
Resolve
(
__uuidof
(
T
)
&
newRawPtr
)
)
)
{
newRawPtr
=
nullptr
;
}
assign_assuming_AddRef
(
static_cast
<
T
*
>
(
newRawPtr
)
)
;
return
*
this
;
}
#
endif
