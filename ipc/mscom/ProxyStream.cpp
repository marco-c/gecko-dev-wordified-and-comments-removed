#
include
"
DynamicallyLinkedFunctionPtr
.
h
"
#
include
"
mozilla
/
mscom
/
EnsureMTA
.
h
"
#
include
"
mozilla
/
mscom
/
ProxyStream
.
h
"
#
include
"
mozilla
/
mscom
/
Utils
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
<
windows
.
h
>
#
include
<
objbase
.
h
>
#
include
<
shlwapi
.
h
>
namespace
mozilla
{
namespace
mscom
{
ProxyStream
:
:
ProxyStream
(
)
:
mGlobalLockedBuf
(
nullptr
)
mHGlobal
(
nullptr
)
mBufSize
(
0
)
{
}
ProxyStream
:
:
ProxyStream
(
const
BYTE
*
aInitBuf
const
int
aInitBufSize
)
:
mStream
(
InitStream
(
aInitBuf
static_cast
<
const
UINT
>
(
aInitBufSize
)
)
)
mGlobalLockedBuf
(
nullptr
)
mHGlobal
(
nullptr
)
mBufSize
(
aInitBufSize
)
{
if
(
!
aInitBufSize
)
{
return
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mStream
)
;
if
(
!
mStream
)
{
return
;
}
auto
marshalFn
=
[
&
]
(
)
-
>
void
{
IUnknown
*
rawUnmarshaledProxy
=
nullptr
;
HRESULT
hr
=
:
:
CoGetInterfaceAndReleaseStream
(
mStream
.
forget
(
)
.
take
(
)
IID_IUnknown
(
void
*
*
)
&
rawUnmarshaledProxy
)
;
MOZ_DIAGNOSTIC_ASSERT
(
SUCCEEDED
(
hr
)
)
;
mUnmarshaledProxy
.
reset
(
rawUnmarshaledProxy
)
;
}
;
if
(
XRE_IsParentProcess
(
)
)
{
marshalFn
(
)
;
}
else
{
EnsureMTA
mta
(
marshalFn
)
;
}
}
already_AddRefed
<
IStream
>
ProxyStream
:
:
InitStream
(
const
BYTE
*
aInitBuf
const
UINT
aInitBufSize
)
{
static
DynamicallyLinkedFunctionPtr
<
decltype
(
&
:
:
SHCreateMemStream
)
>
pSHCreateMemStream
(
L
"
shlwapi
.
dll
"
reinterpret_cast
<
const
char
*
>
(
12
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
pSHCreateMemStream
)
;
if
(
!
pSHCreateMemStream
)
{
return
nullptr
;
}
return
already_AddRefed
<
IStream
>
(
pSHCreateMemStream
(
aInitBuf
aInitBufSize
)
)
;
}
ProxyStream
:
:
ProxyStream
(
ProxyStream
&
&
aOther
)
{
*
this
=
mozilla
:
:
Move
(
aOther
)
;
}
ProxyStream
&
ProxyStream
:
:
operator
=
(
ProxyStream
&
&
aOther
)
{
mStream
=
mozilla
:
:
Move
(
aOther
.
mStream
)
;
mGlobalLockedBuf
=
aOther
.
mGlobalLockedBuf
;
aOther
.
mGlobalLockedBuf
=
nullptr
;
mHGlobal
=
aOther
.
mHGlobal
;
aOther
.
mHGlobal
=
nullptr
;
mBufSize
=
aOther
.
mBufSize
;
aOther
.
mBufSize
=
0
;
return
*
this
;
}
ProxyStream
:
:
~
ProxyStream
(
)
{
if
(
mHGlobal
&
&
mGlobalLockedBuf
)
{
DebugOnly
<
BOOL
>
result
=
:
:
GlobalUnlock
(
mHGlobal
)
;
MOZ_ASSERT
(
!
result
&
&
:
:
GetLastError
(
)
=
=
NO_ERROR
)
;
}
}
const
BYTE
*
ProxyStream
:
:
GetBuffer
(
int
&
aReturnedBufSize
)
const
{
aReturnedBufSize
=
0
;
if
(
!
mStream
)
{
return
nullptr
;
}
if
(
!
mGlobalLockedBuf
)
{
return
nullptr
;
}
aReturnedBufSize
=
mBufSize
;
return
mGlobalLockedBuf
;
}
bool
ProxyStream
:
:
GetInterface
(
REFIID
aIID
void
*
*
aOutInterface
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mGlobalLockedBuf
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aOutInterface
)
;
if
(
!
aOutInterface
)
{
return
false
;
}
if
(
!
mUnmarshaledProxy
)
{
*
aOutInterface
=
nullptr
;
return
true
;
}
HRESULT
hr
=
E_UNEXPECTED
;
auto
qiFn
=
[
&
]
(
)
-
>
void
{
hr
=
mUnmarshaledProxy
-
>
QueryInterface
(
aIID
aOutInterface
)
;
}
;
if
(
XRE_IsParentProcess
(
)
)
{
qiFn
(
)
;
}
else
{
EnsureMTA
mta
(
qiFn
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
SUCCEEDED
(
hr
)
)
;
return
SUCCEEDED
(
hr
)
;
}
ProxyStream
:
:
ProxyStream
(
REFIID
aIID
IUnknown
*
aObject
)
:
mGlobalLockedBuf
(
nullptr
)
mHGlobal
(
nullptr
)
mBufSize
(
0
)
{
RefPtr
<
IStream
>
stream
;
HGLOBAL
hglobal
=
NULL
;
auto
marshalFn
=
[
&
]
(
)
-
>
void
{
HRESULT
hr
=
:
:
CreateStreamOnHGlobal
(
nullptr
TRUE
getter_AddRefs
(
stream
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
SUCCEEDED
(
hr
)
)
;
if
(
FAILED
(
hr
)
)
{
return
;
}
hr
=
:
:
CoMarshalInterface
(
stream
aIID
aObject
MSHCTX_LOCAL
nullptr
MSHLFLAGS_NORMAL
)
;
MOZ_DIAGNOSTIC_ASSERT
(
SUCCEEDED
(
hr
)
)
;
if
(
FAILED
(
hr
)
)
{
return
;
}
hr
=
:
:
GetHGlobalFromStream
(
stream
&
hglobal
)
;
MOZ_DIAGNOSTIC_ASSERT
(
SUCCEEDED
(
hr
)
)
;
}
;
if
(
XRE_IsParentProcess
(
)
)
{
marshalFn
(
)
;
}
else
{
EnsureMTA
mta
(
marshalFn
)
;
}
mStream
=
mozilla
:
:
Move
(
stream
)
;
if
(
hglobal
)
{
mGlobalLockedBuf
=
reinterpret_cast
<
BYTE
*
>
(
:
:
GlobalLock
(
hglobal
)
)
;
mHGlobal
=
hglobal
;
mBufSize
=
static_cast
<
int
>
(
:
:
GlobalSize
(
hglobal
)
)
;
}
}
}
}
