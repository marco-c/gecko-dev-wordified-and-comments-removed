#
include
"
mozilla
/
Move
.
h
"
#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
MOZ_CRASHREPORTER
)
#
include
"
HandlerData
.
h
"
#
include
"
mozilla
/
a11y
/
Platform
.
h
"
#
include
"
mozilla
/
mscom
/
ActivationContext
.
h
"
#
endif
#
include
"
mozilla
/
mscom
/
EnsureMTA
.
h
"
#
include
"
mozilla
/
mscom
/
ProxyStream
.
h
"
#
include
"
mozilla
/
mscom
/
Utils
.
h
"
#
if
defined
(
MOZ_CRASHREPORTER
)
#
include
"
mozilla
/
mscom
/
Objref
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
RegistrationAnnotator
.
h
"
#
endif
#
include
<
windows
.
h
>
#
include
<
objbase
.
h
>
#
include
<
shlwapi
.
h
>
namespace
mozilla
{
namespace
mscom
{
ProxyStream
:
:
ProxyStream
(
)
:
mGlobalLockedBuf
(
nullptr
)
mHGlobal
(
nullptr
)
mBufSize
(
0
)
mPreserveStream
(
false
)
{
}
ProxyStream
:
:
ProxyStream
(
REFIID
aIID
const
BYTE
*
aInitBuf
const
int
aInitBufSize
)
:
mGlobalLockedBuf
(
nullptr
)
mHGlobal
(
nullptr
)
mBufSize
(
aInitBufSize
)
mPreserveStream
(
false
)
{
#
if
defined
(
MOZ_CRASHREPORTER
)
NS_NAMED_LITERAL_CSTRING
(
kCrashReportKey
"
ProxyStreamUnmarshalStatus
"
)
;
#
endif
HRESULT
createStreamResult
=
CreateStream
(
aInitBuf
aInitBufSize
getter_AddRefs
(
mStream
)
)
;
if
(
FAILED
(
createStreamResult
)
)
{
#
if
defined
(
MOZ_CRASHREPORTER
)
nsPrintfCString
hrAsStr
(
"
0x
%
08X
"
createStreamResult
)
;
CrashReporter
:
:
AnnotateCrashReport
(
kCrashReportKey
hrAsStr
)
;
#
endif
return
;
}
if
(
!
aInitBufSize
)
{
#
if
defined
(
MOZ_CRASHREPORTER
)
CrashReporter
:
:
AnnotateCrashReport
(
kCrashReportKey
NS_LITERAL_CSTRING
(
"
!
aInitBufSize
"
)
)
;
#
endif
return
;
}
MOZ_ASSERT
(
mStream
)
;
if
(
!
mStream
)
{
#
if
defined
(
MOZ_CRASHREPORTER
)
CrashReporter
:
:
AnnotateCrashReport
(
kCrashReportKey
NS_LITERAL_CSTRING
(
"
!
mStream
"
)
)
;
#
endif
return
;
}
#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
MOZ_CRASHREPORTER
)
const
uint32_t
expectedStreamLen
=
GetOBJREFSize
(
WrapNotNull
(
mStream
)
)
;
nsAutoCString
strActCtx
;
#
endif
HRESULT
unmarshalResult
=
S_OK
;
#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
MOZ_CRASHREPORTER
)
auto
marshalFn
=
[
this
&
strActCtx
&
unmarshalResult
&
aIID
]
(
)
-
>
void
#
else
auto
marshalFn
=
[
this
&
unmarshalResult
&
aIID
]
(
)
-
>
void
#
endif
{
#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
MOZ_CRASHREPORTER
)
auto
curActCtx
=
ActivationContext
:
:
GetCurrent
(
)
;
if
(
curActCtx
.
isOk
(
)
)
{
strActCtx
.
AppendPrintf
(
"
0x
%
p
"
curActCtx
.
unwrap
(
)
)
;
}
else
{
strActCtx
.
AppendPrintf
(
"
HRESULT
0x
%
08X
"
curActCtx
.
unwrapErr
(
)
)
;
}
#
endif
unmarshalResult
=
:
:
CoUnmarshalInterface
(
mStream
aIID
getter_AddRefs
(
mUnmarshaledProxy
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
unmarshalResult
)
)
;
}
;
if
(
XRE_IsParentProcess
(
)
)
{
marshalFn
(
)
;
}
else
{
EnsureMTA
mta
(
marshalFn
)
;
}
mStream
=
nullptr
;
#
if
defined
(
MOZ_CRASHREPORTER
)
if
(
FAILED
(
unmarshalResult
)
|
|
!
mUnmarshaledProxy
)
{
nsPrintfCString
hrAsStr
(
"
0x
%
08X
"
unmarshalResult
)
;
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
CoUnmarshalInterfaceResult
"
)
hrAsStr
)
;
AnnotateInterfaceRegistration
(
aIID
)
;
if
(
!
mUnmarshaledProxy
)
{
CrashReporter
:
:
AnnotateCrashReport
(
kCrashReportKey
NS_LITERAL_CSTRING
(
"
!
mUnmarshaledProxy
"
)
)
;
}
#
if
defined
(
ACCESSIBILITY
)
AnnotateClassRegistration
(
CLSID_AccessibleHandler
)
;
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
UnmarshalActCtx
"
)
strActCtx
)
;
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
A11yHandlerRegistered
"
)
a11y
:
:
IsHandlerRegistered
(
)
?
NS_LITERAL_CSTRING
(
"
true
"
)
:
NS_LITERAL_CSTRING
(
"
false
"
)
)
;
nsAutoCString
strExpectedStreamLen
;
strExpectedStreamLen
.
AppendInt
(
expectedStreamLen
)
;
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
ExpectedStreamLen
"
)
strExpectedStreamLen
)
;
nsAutoCString
actualStreamLen
;
actualStreamLen
.
AppendInt
(
aInitBufSize
)
;
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
ActualStreamLen
"
)
actualStreamLen
)
;
#
endif
}
#
endif
}
ProxyStream
:
:
ProxyStream
(
ProxyStream
&
&
aOther
)
:
mGlobalLockedBuf
(
nullptr
)
mHGlobal
(
nullptr
)
mBufSize
(
0
)
mPreserveStream
(
false
)
{
*
this
=
mozilla
:
:
Move
(
aOther
)
;
}
ProxyStream
&
ProxyStream
:
:
operator
=
(
ProxyStream
&
&
aOther
)
{
if
(
mHGlobal
&
&
mGlobalLockedBuf
)
{
DebugOnly
<
BOOL
>
result
=
:
:
GlobalUnlock
(
mHGlobal
)
;
MOZ_ASSERT
(
!
result
&
&
:
:
GetLastError
(
)
=
=
NO_ERROR
)
;
}
mStream
=
Move
(
aOther
.
mStream
)
;
mGlobalLockedBuf
=
aOther
.
mGlobalLockedBuf
;
aOther
.
mGlobalLockedBuf
=
nullptr
;
mHGlobal
=
aOther
.
mHGlobal
;
aOther
.
mHGlobal
=
nullptr
;
mBufSize
=
aOther
.
mBufSize
;
aOther
.
mBufSize
=
0
;
mUnmarshaledProxy
=
Move
(
aOther
.
mUnmarshaledProxy
)
;
mPreserveStream
=
aOther
.
mPreserveStream
;
return
*
this
;
}
ProxyStream
:
:
~
ProxyStream
(
)
{
if
(
mHGlobal
&
&
mGlobalLockedBuf
)
{
DebugOnly
<
BOOL
>
result
=
:
:
GlobalUnlock
(
mHGlobal
)
;
MOZ_ASSERT
(
!
result
&
&
:
:
GetLastError
(
)
=
=
NO_ERROR
)
;
}
MOZ_ASSERT
(
!
mPreserveStream
)
;
}
const
BYTE
*
ProxyStream
:
:
GetBuffer
(
int
&
aReturnedBufSize
)
const
{
aReturnedBufSize
=
0
;
if
(
!
mStream
)
{
return
nullptr
;
}
if
(
!
mGlobalLockedBuf
)
{
return
nullptr
;
}
aReturnedBufSize
=
mBufSize
;
return
mGlobalLockedBuf
;
}
PreservedStreamPtr
ProxyStream
:
:
GetPreservedStream
(
)
{
MOZ_ASSERT
(
mStream
)
;
MOZ_ASSERT
(
mHGlobal
)
;
if
(
!
mStream
|
|
!
mPreserveStream
)
{
return
nullptr
;
}
RefPtr
<
IStream
>
cloned
;
HRESULT
hr
=
mStream
-
>
Clone
(
getter_AddRefs
(
cloned
)
)
;
if
(
FAILED
(
hr
)
)
{
return
nullptr
;
}
LARGE_INTEGER
pos
;
pos
.
QuadPart
=
0LL
;
hr
=
cloned
-
>
Seek
(
pos
STREAM_SEEK_SET
nullptr
)
;
if
(
FAILED
(
hr
)
)
{
return
nullptr
;
}
mPreserveStream
=
false
;
return
ToPreservedStreamPtr
(
Move
(
cloned
)
)
;
}
bool
ProxyStream
:
:
GetInterface
(
void
*
*
aOutInterface
)
{
MOZ_ASSERT
(
!
mGlobalLockedBuf
)
;
MOZ_ASSERT
(
aOutInterface
)
;
if
(
!
aOutInterface
)
{
return
false
;
}
*
aOutInterface
=
mUnmarshaledProxy
.
release
(
)
;
return
true
;
}
ProxyStream
:
:
ProxyStream
(
REFIID
aIID
IUnknown
*
aObject
ProxyStreamFlags
aFlags
)
:
mGlobalLockedBuf
(
nullptr
)
mHGlobal
(
nullptr
)
mBufSize
(
0
)
mPreserveStream
(
aFlags
&
ProxyStreamFlags
:
:
ePreservable
)
{
if
(
!
aObject
)
{
return
;
}
RefPtr
<
IStream
>
stream
;
HGLOBAL
hglobal
=
NULL
;
int
streamSize
=
0
;
DWORD
mshlFlags
=
mPreserveStream
?
MSHLFLAGS_TABLESTRONG
:
MSHLFLAGS_NORMAL
;
HRESULT
createStreamResult
=
S_OK
;
HRESULT
marshalResult
=
S_OK
;
HRESULT
statResult
=
S_OK
;
HRESULT
getHGlobalResult
=
S_OK
;
auto
marshalFn
=
[
&
]
(
)
-
>
void
{
createStreamResult
=
:
:
CreateStreamOnHGlobal
(
nullptr
TRUE
getter_AddRefs
(
stream
)
)
;
if
(
FAILED
(
createStreamResult
)
)
{
return
;
}
marshalResult
=
:
:
CoMarshalInterface
(
stream
aIID
aObject
MSHCTX_LOCAL
nullptr
mshlFlags
)
;
if
(
FAILED
(
marshalResult
)
)
{
return
;
}
STATSTG
statstg
;
statResult
=
stream
-
>
Stat
(
&
statstg
STATFLAG_NONAME
)
;
if
(
SUCCEEDED
(
statResult
)
)
{
streamSize
=
static_cast
<
int
>
(
statstg
.
cbSize
.
LowPart
)
;
}
else
{
return
;
}
getHGlobalResult
=
:
:
GetHGlobalFromStream
(
stream
&
hglobal
)
;
MOZ_ASSERT
(
SUCCEEDED
(
getHGlobalResult
)
)
;
}
;
if
(
XRE_IsParentProcess
(
)
)
{
marshalFn
(
)
;
}
else
{
EnsureMTA
mta
(
marshalFn
)
;
}
#
if
defined
(
MOZ_CRASHREPORTER
)
if
(
FAILED
(
createStreamResult
)
)
{
nsPrintfCString
hrAsStr
(
"
0x
%
08X
"
createStreamResult
)
;
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
CreateStreamOnHGlobalFailure
"
)
hrAsStr
)
;
}
if
(
FAILED
(
marshalResult
)
)
{
AnnotateInterfaceRegistration
(
aIID
)
;
nsPrintfCString
hrAsStr
(
"
0x
%
08X
"
marshalResult
)
;
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
CoMarshalInterfaceFailure
"
)
hrAsStr
)
;
}
if
(
FAILED
(
statResult
)
)
{
nsPrintfCString
hrAsStr
(
"
0x
%
08X
"
statResult
)
;
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
StatFailure
"
)
hrAsStr
)
;
}
if
(
FAILED
(
getHGlobalResult
)
)
{
nsPrintfCString
hrAsStr
(
"
0x
%
08X
"
getHGlobalResult
)
;
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
GetHGlobalFromStreamFailure
"
)
hrAsStr
)
;
}
#
endif
mStream
=
mozilla
:
:
Move
(
stream
)
;
if
(
streamSize
)
{
#
if
defined
(
MOZ_CRASHREPORTER
)
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
ProxyStreamSizeFrom
"
)
NS_LITERAL_CSTRING
(
"
IStream
:
:
Stat
"
)
)
;
#
endif
mBufSize
=
streamSize
;
}
if
(
!
hglobal
)
{
return
;
}
mGlobalLockedBuf
=
reinterpret_cast
<
BYTE
*
>
(
:
:
GlobalLock
(
hglobal
)
)
;
mHGlobal
=
hglobal
;
if
(
!
streamSize
)
{
#
if
defined
(
MOZ_CRASHREPORTER
)
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
ProxyStreamSizeFrom
"
)
NS_LITERAL_CSTRING
(
"
GlobalSize
"
)
)
;
#
endif
mBufSize
=
static_cast
<
int
>
(
:
:
GlobalSize
(
hglobal
)
)
;
}
#
if
defined
(
MOZ_CRASHREPORTER
)
nsAutoCString
strBufSize
;
strBufSize
.
AppendInt
(
mBufSize
)
;
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
ProxyStreamSize
"
)
strBufSize
)
;
#
endif
}
}
}
