#
ifndef
mozilla_mscom_MainThreadHandoff_h
#
define
mozilla_mscom_MainThreadHandoff_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
mscom
/
Interceptor
.
h
"
#
include
"
mozilla
/
mscom
/
MainThreadInvoker
.
h
"
#
include
"
mozilla
/
mscom
/
Utils
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
mscom
{
struct
ArrayData
;
class
MainThreadHandoff
:
public
IInterceptorSink
public
ICallFrameWalker
{
public
:
static
HRESULT
Create
(
IInterceptorSink
*
*
aOutput
)
;
template
<
typename
Interface
>
static
HRESULT
WrapInterface
(
STAUniquePtr
<
Interface
>
&
aTargetInterface
Interface
*
*
aOutInterface
)
{
MOZ_ASSERT
(
!
IsProxy
(
aTargetInterface
.
get
(
)
)
)
;
RefPtr
<
IInterceptorSink
>
handoff
;
HRESULT
hr
=
MainThreadHandoff
:
:
Create
(
getter_AddRefs
(
handoff
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
return
CreateInterceptor
(
aTargetInterface
handoff
aOutInterface
)
;
}
STDMETHODIMP
QueryInterface
(
REFIID
riid
void
*
*
ppv
)
override
;
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
;
STDMETHODIMP_
(
ULONG
)
Release
(
)
override
;
STDMETHODIMP
OnCall
(
ICallFrame
*
aFrame
)
override
;
STDMETHODIMP
SetInterceptor
(
IWeakReference
*
aInterceptor
)
override
;
STDMETHODIMP
OnWalkInterface
(
REFIID
aIid
PVOID
*
aInterface
BOOL
aIsInParam
BOOL
aIsOutParam
)
override
;
private
:
MainThreadHandoff
(
)
;
~
MainThreadHandoff
(
)
;
HRESULT
FixArrayElements
(
ICallFrame
*
aFrame
const
ArrayData
&
aArrayData
)
;
private
:
ULONG
mRefCnt
;
RefPtr
<
IWeakReference
>
mInterceptor
;
}
;
}
}
#
endif
