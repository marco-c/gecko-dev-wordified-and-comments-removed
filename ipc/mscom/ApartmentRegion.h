#
ifndef
mozilla_mscom_ApartmentRegion_h
#
define
mozilla_mscom_ApartmentRegion_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
objbase
.
h
>
namespace
mozilla
{
namespace
mscom
{
class
MOZ_NON_TEMPORARY_CLASS
ApartmentRegion
final
{
public
:
constexpr
ApartmentRegion
(
)
:
mInitResult
(
CO_E_NOTINITIALIZED
)
{
}
explicit
ApartmentRegion
(
COINIT
aAptType
)
:
mInitResult
(
:
:
CoInitializeEx
(
nullptr
aAptType
)
)
{
MOZ_ASSERT
(
IsValid
(
)
)
;
}
~
ApartmentRegion
(
)
{
if
(
IsValid
(
)
)
{
:
:
CoUninitialize
(
)
;
}
}
explicit
operator
bool
(
)
const
{
return
IsValid
(
)
;
}
bool
IsValidOutermost
(
)
const
{
return
mInitResult
=
=
S_OK
;
}
bool
IsValid
(
)
const
{
return
SUCCEEDED
(
mInitResult
)
;
}
bool
Init
(
COINIT
aAptType
)
{
MOZ_ASSERT
(
mInitResult
=
=
CO_E_NOTINITIALIZED
)
;
mInitResult
=
:
:
CoInitializeEx
(
nullptr
aAptType
)
;
MOZ_ASSERT
(
IsValid
(
)
)
;
return
IsValid
(
)
;
}
HRESULT
GetHResult
(
)
const
{
return
mInitResult
;
}
private
:
ApartmentRegion
(
const
ApartmentRegion
&
)
=
delete
;
ApartmentRegion
&
operator
=
(
const
ApartmentRegion
&
)
=
delete
;
ApartmentRegion
(
ApartmentRegion
&
&
)
=
delete
;
ApartmentRegion
&
operator
=
(
ApartmentRegion
&
&
)
=
delete
;
HRESULT
mInitResult
;
}
;
template
<
COINIT
T
>
class
MOZ_NON_TEMPORARY_CLASS
ApartmentRegionT
final
{
public
:
ApartmentRegionT
(
)
:
mAptRgn
(
T
)
{
}
~
ApartmentRegionT
(
)
=
default
;
explicit
operator
bool
(
)
const
{
return
mAptRgn
.
IsValid
(
)
;
}
bool
IsValidOutermost
(
)
const
{
return
mAptRgn
.
IsValidOutermost
(
)
;
}
bool
IsValid
(
)
const
{
return
mAptRgn
.
IsValid
(
)
;
}
HRESULT
GetHResult
(
)
const
{
return
mAptRgn
.
GetHResult
(
)
;
}
private
:
ApartmentRegionT
(
const
ApartmentRegionT
&
)
=
delete
;
ApartmentRegionT
&
operator
=
(
const
ApartmentRegionT
&
)
=
delete
;
ApartmentRegionT
(
ApartmentRegionT
&
&
)
=
delete
;
ApartmentRegionT
&
operator
=
(
ApartmentRegionT
&
&
)
=
delete
;
ApartmentRegion
mAptRgn
;
}
;
typedef
ApartmentRegionT
<
COINIT_APARTMENTTHREADED
>
STARegion
;
typedef
ApartmentRegionT
<
COINIT_MULTITHREADED
>
MTARegion
;
}
}
#
endif
