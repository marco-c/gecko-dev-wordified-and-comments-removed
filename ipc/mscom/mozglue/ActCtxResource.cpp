#
include
"
ActCtxResource
.
h
"
#
include
<
string
>
#
include
"
mozilla
/
GetKnownFolderPath
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
namespace
mozilla
{
namespace
mscom
{
#
if
!
defined
(
HAVE_64BIT_BUILD
)
static
bool
ReadCOMRegDefaultString
(
const
std
:
:
wstring
&
aRegPath
std
:
:
wstring
&
aOutBuf
)
{
aOutBuf
.
clear
(
)
;
std
:
:
wstring
fullyQualifiedRegPath
;
fullyQualifiedRegPath
.
append
(
L
"
SOFTWARE
\
\
Classes
\
\
"
)
;
fullyQualifiedRegPath
.
append
(
aRegPath
)
;
DWORD
type
;
DWORD
bufLen
=
0
;
LONG
result
=
:
:
RegGetValueW
(
HKEY_LOCAL_MACHINE
fullyQualifiedRegPath
.
c_str
(
)
nullptr
RRF_RT_ANY
&
type
nullptr
&
bufLen
)
;
if
(
result
!
=
ERROR_SUCCESS
|
|
(
type
!
=
REG_SZ
&
&
type
!
=
REG_EXPAND_SZ
)
)
{
return
false
;
}
DWORD
flags
=
type
=
=
REG_SZ
?
RRF_RT_REG_SZ
:
RRF_RT_REG_EXPAND_SZ
;
aOutBuf
.
resize
(
(
bufLen
+
1
)
/
sizeof
(
char16_t
)
)
;
result
=
:
:
RegGetValueW
(
HKEY_LOCAL_MACHINE
fullyQualifiedRegPath
.
c_str
(
)
nullptr
flags
nullptr
&
aOutBuf
[
0
]
&
bufLen
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
aOutBuf
.
clear
(
)
;
return
false
;
}
aOutBuf
.
resize
(
(
bufLen
+
1
)
/
sizeof
(
char16_t
)
-
1
)
;
return
true
;
}
static
bool
IsSystemOleAcc
(
HANDLE
aFile
)
{
if
(
aFile
=
=
INVALID_HANDLE_VALUE
)
{
return
false
;
}
BY_HANDLE_FILE_INFORMATION
info
=
{
}
;
if
(
!
:
:
GetFileInformationByHandle
(
aFile
&
info
)
)
{
return
false
;
}
auto
systemPath
=
GetKnownFolderPath
(
FOLDERID_SystemX86
)
;
if
(
!
systemPath
)
{
return
false
;
}
std
:
:
wstring
oleAccPath
(
systemPath
.
get
(
)
)
;
oleAccPath
.
append
(
L
"
\
\
oleacc
.
dll
"
)
;
nsAutoHandle
oleAcc
(
:
:
CreateFileW
(
oleAccPath
.
c_str
(
)
GENERIC_READ
FILE_SHARE_READ
|
FILE_SHARE_WRITE
|
FILE_SHARE_DELETE
nullptr
OPEN_EXISTING
FILE_ATTRIBUTE_NORMAL
nullptr
)
)
;
if
(
oleAcc
.
get
(
)
=
=
INVALID_HANDLE_VALUE
)
{
return
false
;
}
BY_HANDLE_FILE_INFORMATION
oleAccInfo
=
{
}
;
if
(
!
:
:
GetFileInformationByHandle
(
oleAcc
&
oleAccInfo
)
)
{
return
false
;
}
return
info
.
dwVolumeSerialNumber
=
=
oleAccInfo
.
dwVolumeSerialNumber
&
&
info
.
nFileIndexLow
=
=
oleAccInfo
.
nFileIndexLow
&
&
info
.
nFileIndexHigh
=
=
oleAccInfo
.
nFileIndexHigh
;
}
static
bool
IsTypelibPreferred
(
)
{
const
wchar_t
kUniversalMarshalerClsid
[
]
=
L
"
{
00020424
-
0000
-
0000
-
C000
-
000000000046
}
"
;
const
wchar_t
kIAccessiblePSClsidPath
[
]
=
L
"
Interface
\
\
{
618736E0
-
3C3D
-
11CF
-
810C
-
00AA00389B71
}
"
L
"
\
\
ProxyStubClsid32
"
;
std
:
:
wstring
psClsid
;
if
(
!
ReadCOMRegDefaultString
(
kIAccessiblePSClsidPath
psClsid
)
)
{
return
false
;
}
if
(
psClsid
.
size
(
)
!
=
sizeof
(
kUniversalMarshalerClsid
)
/
sizeof
(
kUniversalMarshalerClsid
)
[
0
]
-
1
)
{
return
false
;
}
int
index
=
0
;
while
(
kUniversalMarshalerClsid
[
index
]
)
{
if
(
toupper
(
psClsid
[
index
]
)
!
=
kUniversalMarshalerClsid
[
index
]
)
{
return
false
;
}
index
+
+
;
}
return
true
;
}
static
bool
IsIAccessibleTypelibRegistered
(
)
{
const
wchar_t
kIAccessibleTypelibRegPath
[
]
=
L
"
TypeLib
\
\
{
1EA4DBF0
-
3C3B
-
11CF
-
810C
-
00AA00389B71
}
\
\
1
.
1
\
\
0
\
\
win32
"
;
std
:
:
wstring
typelibPath
;
if
(
!
ReadCOMRegDefaultString
(
kIAccessibleTypelibRegPath
typelibPath
)
)
{
return
false
;
}
nsAutoHandle
libTestFile
(
:
:
CreateFileW
(
typelibPath
.
c_str
(
)
GENERIC_READ
FILE_SHARE_READ
|
FILE_SHARE_WRITE
|
FILE_SHARE_DELETE
nullptr
OPEN_EXISTING
FILE_ATTRIBUTE_NORMAL
nullptr
)
)
;
return
IsSystemOleAcc
(
libTestFile
)
;
}
static
bool
IsIAccessiblePSRegistered
(
)
{
const
wchar_t
kIAccessiblePSRegPath
[
]
=
L
"
CLSID
\
\
{
03022430
-
ABC4
-
11D0
-
BDE2
-
00AA001A1953
}
\
\
InProcServer32
"
;
std
:
:
wstring
proxyStubPath
;
if
(
!
ReadCOMRegDefaultString
(
kIAccessiblePSRegPath
proxyStubPath
)
)
{
return
false
;
}
nsAutoHandle
libTestFile
(
:
:
CreateFileW
(
proxyStubPath
.
c_str
(
)
GENERIC_READ
FILE_SHARE_READ
|
FILE_SHARE_WRITE
|
FILE_SHARE_DELETE
nullptr
OPEN_EXISTING
FILE_ATTRIBUTE_NORMAL
nullptr
)
)
;
return
IsSystemOleAcc
(
libTestFile
)
;
}
static
bool
UseIAccessibleProxyStub
(
)
{
if
(
IsTypelibPreferred
(
)
&
&
IsIAccessibleTypelibRegistered
(
)
)
{
return
false
;
}
if
(
IsIAccessiblePSRegistered
(
)
)
{
return
true
;
}
return
false
;
}
#
endif
#
if
defined
(
_MSC_VER
)
extern
"
C
"
IMAGE_DOS_HEADER
__ImageBase
;
#
endif
static
HMODULE
GetContainingModuleHandle
(
)
{
HMODULE
thisModule
=
nullptr
;
#
if
defined
(
_MSC_VER
)
thisModule
=
reinterpret_cast
<
HMODULE
>
(
&
__ImageBase
)
;
#
else
if
(
!
GetModuleHandleExW
(
GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS
|
GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
reinterpret_cast
<
LPCWSTR
>
(
&
GetContainingModuleHandle
)
&
thisModule
)
)
{
return
0
;
}
#
endif
return
thisModule
;
}
static
uint16_t
sActCtxResourceId
=
0
;
void
ActCtxResource
:
:
SetAccessibilityResourceId
(
uint16_t
aResourceId
)
{
sActCtxResourceId
=
aResourceId
;
}
uint16_t
ActCtxResource
:
:
GetAccessibilityResourceId
(
)
{
return
sActCtxResourceId
;
}
static
void
EnsureAccessibilityResourceId
(
)
{
if
(
!
sActCtxResourceId
)
{
#
if
defined
(
HAVE_64BIT_BUILD
)
sActCtxResourceId
=
64
;
#
else
if
(
mozilla
:
:
IsWin10CreatorsUpdateOrLater
(
)
|
|
UseIAccessibleProxyStub
(
)
)
{
sActCtxResourceId
=
64
;
}
else
{
sActCtxResourceId
=
32
;
}
#
endif
}
}
ActCtxResource
ActCtxResource
:
:
GetAccessibilityResource
(
)
{
ActCtxResource
result
=
{
}
;
result
.
mModule
=
GetContainingModuleHandle
(
)
;
EnsureAccessibilityResourceId
(
)
;
result
.
mId
=
GetAccessibilityResourceId
(
)
;
return
result
;
}
}
}
