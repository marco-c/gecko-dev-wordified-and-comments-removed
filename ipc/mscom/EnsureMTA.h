#
ifndef
mozilla_mscom_EnsureMTA_h
#
define
mozilla_mscom_EnsureMTA_h
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Function
.
h
"
#
include
"
mozilla
/
mscom
/
COMApartmentRegion
.
h
"
#
include
"
mozilla
/
mscom
/
Utils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
<
windows
.
h
>
namespace
mozilla
{
namespace
mscom
{
class
MOZ_STACK_CLASS
EnsureMTA
{
public
:
template
<
typename
FuncT
>
EnsureMTA
(
const
FuncT
&
aClosure
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsCurrentThreadMTA
(
)
)
{
aClosure
(
)
;
return
;
}
nsCOMPtr
<
nsIThread
>
thread
=
GetMTAThread
(
)
;
MOZ_ASSERT
(
thread
)
;
HANDLE
event
=
:
:
CreateEventW
(
nullptr
FALSE
FALSE
nullptr
)
;
if
(
!
event
)
{
return
;
}
auto
eventSetter
=
[
&
]
(
)
-
>
void
{
aClosure
(
)
;
:
:
SetEvent
(
event
)
;
}
;
nsresult
rv
=
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
eventSetter
)
NS_DISPATCH_NORMAL
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
:
:
CloseHandle
(
event
)
;
return
;
}
DWORD
waitResult
;
while
(
(
waitResult
=
:
:
WaitForSingleObjectEx
(
event
INFINITE
TRUE
)
)
=
=
WAIT_IO_COMPLETION
)
{
}
MOZ_ASSERT
(
waitResult
=
=
WAIT_OBJECT_0
)
;
:
:
CloseHandle
(
event
)
;
}
private
:
static
nsCOMPtr
<
nsIThread
>
GetMTAThread
(
)
;
}
;
}
}
#
endif
