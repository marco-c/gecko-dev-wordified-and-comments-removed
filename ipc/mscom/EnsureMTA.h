#
ifndef
mozilla_mscom_EnsureMTA_h
#
define
mozilla_mscom_EnsureMTA_h
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
mscom
/
Utils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
<
windows
.
h
>
namespace
mozilla
{
namespace
mscom
{
namespace
detail
{
template
<
typename
T
>
struct
MTADelete
;
template
<
typename
T
>
struct
MTARelease
;
template
<
typename
T
>
struct
MTAReleaseInChildProcess
;
struct
PreservedStreamDeleter
;
}
class
MOZ_STACK_CLASS
EnsureMTA
final
{
public
:
EnsureMTA
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIThread
>
thread
=
GetMTAThread
(
)
;
MOZ_ASSERT
(
thread
)
;
Unused
<
<
thread
;
}
enum
class
Option
{
Default
ForceDispatch
}
;
template
<
typename
FuncT
>
explicit
EnsureMTA
(
const
FuncT
&
aClosure
Option
aOpt
=
Option
:
:
Default
)
{
if
(
aOpt
!
=
Option
:
:
ForceDispatch
&
&
IsCurrentThreadMTA
(
)
)
{
aClosure
(
)
;
return
;
}
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIThread
>
thread
=
GetMTAThread
(
)
;
MOZ_ASSERT
(
thread
)
;
if
(
!
thread
)
{
return
;
}
nsAutoHandle
event
(
:
:
CreateEventW
(
nullptr
FALSE
FALSE
nullptr
)
)
;
if
(
!
event
)
{
return
;
}
HANDLE
eventHandle
=
event
.
get
(
)
;
auto
eventSetter
=
[
&
aClosure
eventHandle
]
(
)
-
>
void
{
aClosure
(
)
;
:
:
SetEvent
(
eventHandle
)
;
}
;
nsresult
rv
=
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
EnsureMTA
"
eventSetter
)
NS_DISPATCH_NORMAL
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
DWORD
waitResult
;
while
(
(
waitResult
=
:
:
WaitForSingleObjectEx
(
event
INFINITE
TRUE
)
)
=
=
WAIT_IO_COMPLETION
)
{
}
MOZ_ASSERT
(
waitResult
=
=
WAIT_OBJECT_0
)
;
}
private
:
static
nsCOMPtr
<
nsIThread
>
GetMTAThread
(
)
;
template
<
typename
FuncT
>
static
void
AsyncOperation
(
const
FuncT
&
aClosure
)
{
if
(
IsCurrentThreadMTA
(
)
)
{
aClosure
(
)
;
return
;
}
nsCOMPtr
<
nsIThread
>
thread
(
GetMTAThread
(
)
)
;
MOZ_ASSERT
(
thread
)
;
if
(
!
thread
)
{
return
;
}
DebugOnly
<
nsresult
>
rv
=
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
mscom
:
:
EnsureMTA
:
:
AsyncOperation
"
aClosure
)
NS_DISPATCH_NORMAL
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
template
<
typename
T
>
friend
struct
mozilla
:
:
mscom
:
:
detail
:
:
MTADelete
;
template
<
typename
T
>
friend
struct
mozilla
:
:
mscom
:
:
detail
:
:
MTARelease
;
template
<
typename
T
>
friend
struct
mozilla
:
:
mscom
:
:
detail
:
:
MTAReleaseInChildProcess
;
friend
struct
mozilla
:
:
mscom
:
:
detail
:
:
PreservedStreamDeleter
;
}
;
}
}
#
endif
