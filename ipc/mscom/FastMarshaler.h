#
ifndef
mozilla_mscom_FastMarshaler_h
#
define
mozilla_mscom_FastMarshaler_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
mscom
/
Aggregation
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
<
objidl
.
h
>
namespace
mozilla
{
namespace
mscom
{
class
FastMarshaler
final
:
public
IMarshal
{
public
:
static
HRESULT
Create
(
IUnknown
*
aOuter
IUnknown
*
*
aOutMarshalerUnk
)
;
STDMETHODIMP
GetUnmarshalClass
(
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
CLSID
*
pCid
)
override
;
STDMETHODIMP
GetMarshalSizeMax
(
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
DWORD
*
pSize
)
override
;
STDMETHODIMP
MarshalInterface
(
IStream
*
pStm
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
)
override
;
STDMETHODIMP
UnmarshalInterface
(
IStream
*
pStm
REFIID
riid
void
*
*
ppv
)
override
;
STDMETHODIMP
ReleaseMarshalData
(
IStream
*
pStm
)
override
;
STDMETHODIMP
DisconnectObject
(
DWORD
dwReserved
)
override
;
private
:
FastMarshaler
(
IUnknown
*
aOuter
HRESULT
*
aResult
)
;
~
FastMarshaler
(
)
=
default
;
static
DWORD
GetMarshalFlags
(
DWORD
aDestContext
DWORD
aMshlFlags
)
;
Atomic
<
ULONG
>
mRefCnt
;
IUnknown
*
mOuter
;
RefPtr
<
IUnknown
>
mStdMarshalUnk
;
IMarshal
*
mStdMarshalWeak
;
DECLARE_AGGREGATABLE
(
FastMarshaler
)
;
}
;
}
}
#
endif
