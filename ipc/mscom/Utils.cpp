#
ifdef
NTDDI_VERSION
#
undef
NTDDI_VERSION
#
endif
#
define
NTDDI_VERSION
0x06010000
#
ifdef
_WIN32_WINNT
#
undef
_WIN32_WINNT
#
endif
#
define
_WIN32_WINNT
0x0601
#
include
"
DynamicallyLinkedFunctionPtr
.
h
"
#
include
"
mozilla
/
mscom
/
Utils
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
<
objidl
.
h
>
static
bool
IsCurrentThreadMTALegacy
(
)
{
IUnknown
*
token
=
nullptr
;
HRESULT
hr
=
CoGetContextToken
(
reinterpret_cast
<
ULONG_PTR
*
>
(
&
token
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
RefPtr
<
IComThreadingInfo
>
threadingInfo
;
hr
=
token
-
>
QueryInterface
(
IID_IComThreadingInfo
getter_AddRefs
(
threadingInfo
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
APTTYPE
aptType
;
hr
=
threadingInfo
-
>
GetCurrentApartmentType
(
&
aptType
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
return
aptType
=
=
APTTYPE_MTA
;
}
namespace
mozilla
{
namespace
mscom
{
bool
IsCurrentThreadMTA
(
)
{
static
DynamicallyLinkedFunctionPtr
<
decltype
(
&
:
:
CoGetApartmentType
)
>
pCoGetApartmentType
(
L
"
ole32
.
dll
"
"
CoGetApartmentType
"
)
;
if
(
!
pCoGetApartmentType
)
{
return
IsCurrentThreadMTALegacy
(
)
;
}
APTTYPE
aptType
;
APTTYPEQUALIFIER
aptTypeQualifier
;
HRESULT
hr
=
pCoGetApartmentType
(
&
aptType
&
aptTypeQualifier
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
return
aptType
=
=
APTTYPE_MTA
;
}
bool
IsProxy
(
IUnknown
*
aUnknown
)
{
if
(
!
aUnknown
)
{
return
false
;
}
RefPtr
<
IClientSecurity
>
clientSecurity
;
HRESULT
hr
=
aUnknown
-
>
QueryInterface
(
IID_IClientSecurity
(
void
*
*
)
getter_AddRefs
(
clientSecurity
)
)
;
if
(
SUCCEEDED
(
hr
)
|
|
hr
=
=
RPC_E_WRONG_THREAD
)
{
return
true
;
}
return
false
;
}
}
}
