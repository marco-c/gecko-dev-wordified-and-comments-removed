#
include
"
mozilla
/
mscom
/
MainThreadInvoker
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
HangMonitor
.
h
"
#
include
"
mozilla
/
mscom
/
SpinEvent
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
private
/
prpriv
.
h
"
#
include
"
WinUtils
.
h
"
namespace
{
class
MOZ_RAII
SyncRunnable
{
public
:
explicit
SyncRunnable
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
:
mRunnable
(
aRunnable
)
{
MOZ_ASSERT
(
mRunnable
)
;
}
~
SyncRunnable
(
)
=
default
;
void
Run
(
)
{
mRunnable
-
>
Run
(
)
;
mEvent
.
Signal
(
)
;
}
bool
WaitUntilComplete
(
)
{
return
mEvent
.
Wait
(
mozilla
:
:
mscom
:
:
MainThreadInvoker
:
:
GetTargetThread
(
)
)
;
}
private
:
nsCOMPtr
<
nsIRunnable
>
mRunnable
;
mozilla
:
:
mscom
:
:
SpinEvent
mEvent
;
}
;
}
namespace
mozilla
{
namespace
mscom
{
HANDLE
MainThreadInvoker
:
:
sMainThread
=
nullptr
;
bool
MainThreadInvoker
:
:
InitStatics
(
)
{
nsCOMPtr
<
nsIThread
>
mainThread
;
nsresult
rv
=
:
:
NS_GetMainThread
(
getter_AddRefs
(
mainThread
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
PRThread
*
mainPrThread
=
nullptr
;
rv
=
mainThread
-
>
GetPRThread
(
&
mainPrThread
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
PRUint32
tid
=
:
:
PR_GetThreadID
(
mainPrThread
)
;
sMainThread
=
:
:
OpenThread
(
SYNCHRONIZE
|
THREAD_SET_CONTEXT
FALSE
tid
)
;
return
!
!
sMainThread
;
}
MainThreadInvoker
:
:
MainThreadInvoker
(
)
{
static
const
bool
gotStatics
=
InitStatics
(
)
;
MOZ_ASSERT
(
gotStatics
)
;
}
bool
MainThreadInvoker
:
:
Invoke
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
(
Move
(
aRunnable
)
)
;
if
(
!
runnable
)
{
return
false
;
}
if
(
NS_IsMainThread
(
)
)
{
runnable
-
>
Run
(
)
;
return
true
;
}
SyncRunnable
syncRunnable
(
runnable
.
forget
(
)
)
;
if
(
!
:
:
QueueUserAPC
(
&
MainThreadAPC
sMainThread
reinterpret_cast
<
UINT_PTR
>
(
&
syncRunnable
)
)
)
{
return
false
;
}
widget
:
:
WinUtils
:
:
SetAPCPending
(
)
;
return
syncRunnable
.
WaitUntilComplete
(
)
;
}
VOID
CALLBACK
MainThreadInvoker
:
:
MainThreadAPC
(
ULONG_PTR
aParam
)
{
AutoProfilerThreadWake
wake
;
mozilla
:
:
HangMonitor
:
:
NotifyActivity
(
mozilla
:
:
HangMonitor
:
:
kGeneralActivity
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
runnable
=
reinterpret_cast
<
SyncRunnable
*
>
(
aParam
)
;
runnable
-
>
Run
(
)
;
}
}
}
