#
include
"
mozilla
/
mscom
/
SpinEvent
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsSystemInfo
.
h
"
namespace
mozilla
{
namespace
mscom
{
static
const
TimeDuration
kMaxSpinTime
=
TimeDuration
:
:
FromMilliseconds
(
30
)
;
bool
SpinEvent
:
:
sIsMulticore
=
false
;
bool
SpinEvent
:
:
InitStatics
(
)
{
SYSTEM_INFO
sysInfo
;
:
:
GetSystemInfo
(
&
sysInfo
)
;
sIsMulticore
=
sysInfo
.
dwNumberOfProcessors
>
1
;
return
true
;
}
SpinEvent
:
:
SpinEvent
(
)
:
mDone
(
false
)
{
static
const
bool
gotStatics
=
InitStatics
(
)
;
MOZ_ALWAYS_TRUE
(
gotStatics
)
;
mDoneEvent
.
own
(
:
:
CreateEventW
(
nullptr
FALSE
FALSE
nullptr
)
)
;
MOZ_ASSERT
(
mDoneEvent
)
;
}
bool
SpinEvent
:
:
Wait
(
HANDLE
aTargetThread
)
{
MOZ_ASSERT
(
aTargetThread
)
;
if
(
!
aTargetThread
)
{
return
false
;
}
if
(
sIsMulticore
)
{
TimeStamp
start
(
TimeStamp
:
:
Now
(
)
)
;
while
(
!
mDone
)
{
TimeDuration
elapsed
(
TimeStamp
:
:
Now
(
)
-
start
)
;
if
(
elapsed
>
=
kMaxSpinTime
)
{
break
;
}
YieldProcessor
(
)
;
}
if
(
mDone
)
{
return
true
;
}
}
MOZ_ASSERT
(
mDoneEvent
)
;
HANDLE
handles
[
]
=
{
mDoneEvent
aTargetThread
}
;
DWORD
waitResult
=
:
:
WaitForMultipleObjects
(
mozilla
:
:
ArrayLength
(
handles
)
handles
FALSE
INFINITE
)
;
return
waitResult
=
=
WAIT_OBJECT_0
;
}
void
SpinEvent
:
:
Signal
(
)
{
:
:
SetEvent
(
mDoneEvent
)
;
mDone
=
true
;
}
}
}
