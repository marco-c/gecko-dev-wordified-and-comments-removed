#
ifndef
mozilla_mscom_WeakRef_h
#
define
mozilla_mscom_WeakRef_h
#
include
<
guiddef
.
h
>
#
include
<
Unknwn
.
h
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
mscom
{
DEFINE_GUID
(
IID_IWeakReference
0xf841aefa
0x64c
0x49a4
0xb7
0x3d
0xeb
0xd1
0x4a
0x90
0xf0
0x12
)
;
struct
IWeakReference
:
public
IUnknown
{
virtual
STDMETHODIMP
Resolve
(
REFIID
aIid
void
*
*
aOutStringReference
)
=
0
;
}
;
DEFINE_GUID
(
IID_IWeakReferenceSource
0x87611f0c
0x9bbb
0x4f78
0x9d
0x43
0xca
0xc5
0xad
0x43
0x2c
0xa1
)
;
struct
IWeakReferenceSource
:
public
IUnknown
{
virtual
STDMETHODIMP
GetWeakReference
(
IWeakReference
*
*
aOutWeakRef
)
=
0
;
}
;
class
WeakRef
;
class
WeakReferenceSupport
:
public
IWeakReferenceSource
{
public
:
enum
class
Flags
{
eNone
=
0
eDestroyOnMainThread
=
1
}
;
STDMETHODIMP
QueryInterface
(
REFIID
riid
void
*
*
ppv
)
override
;
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
;
STDMETHODIMP_
(
ULONG
)
Release
(
)
override
;
STDMETHODIMP
GetWeakReference
(
IWeakReference
*
*
aOutWeakRef
)
override
;
protected
:
explicit
WeakReferenceSupport
(
Flags
aFlags
)
;
virtual
~
WeakReferenceSupport
(
)
;
virtual
HRESULT
ThreadSafeQueryInterface
(
REFIID
aIid
IUnknown
*
*
aOutInterface
)
=
0
;
private
:
void
ClearWeakRefs
(
)
;
private
:
CRITICAL_SECTION
mCS
;
ULONG
mRefCnt
;
nsTArray
<
WeakRef
*
>
mWeakRefs
;
Flags
mFlags
;
}
;
class
WeakRef
:
public
IWeakReference
{
public
:
STDMETHODIMP
QueryInterface
(
REFIID
riid
void
*
*
ppv
)
override
;
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
;
STDMETHODIMP_
(
ULONG
)
Release
(
)
override
;
STDMETHODIMP
Resolve
(
REFIID
aIid
void
*
*
aOutStrongReference
)
override
;
explicit
WeakRef
(
WeakReferenceSupport
*
aSupport
)
;
void
Clear
(
)
;
private
:
ULONG
mRefCnt
;
mozilla
:
:
Mutex
mMutex
;
WeakReferenceSupport
*
mSupport
;
}
;
}
}
#
endif
