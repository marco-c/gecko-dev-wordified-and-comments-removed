#
include
"
mozilla
/
mscom
/
ProcessRuntime
.
h
"
#
if
defined
(
ACCESSIBILITY
)
&
&
\
(
defined
(
MOZILLA_INTERNAL_API
)
|
|
defined
(
MOZ_HAS_MOZGLUE
)
)
#
include
"
mozilla
/
mscom
/
ActCtxResource
.
h
"
#
endif
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
DynamicallyLinkedFunctionPtr
.
h
"
#
include
"
mozilla
/
mscom
/
ProcessRuntimeShared
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
WindowsProcessMitigations
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
if
defined
(
MOZILLA_INTERNAL_API
)
#
include
"
mozilla
/
mscom
/
EnsureMTA
.
h
"
#
if
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
sandboxTarget
.
h
"
#
endif
#
endif
#
include
<
accctrl
.
h
>
#
include
<
aclapi
.
h
>
#
include
<
objbase
.
h
>
#
include
<
objidl
.
h
>
extern
"
C
"
void
__cdecl
SetOaNoCache
(
void
)
;
namespace
mozilla
{
namespace
mscom
{
#
if
defined
(
MOZILLA_INTERNAL_API
)
ProcessRuntime
*
ProcessRuntime
:
:
sInstance
=
nullptr
;
ProcessRuntime
:
:
ProcessRuntime
(
)
:
ProcessRuntime
(
XRE_GetProcessType
(
)
)
{
}
ProcessRuntime
:
:
ProcessRuntime
(
const
GeckoProcessType
aProcessType
)
:
ProcessRuntime
(
aProcessType
=
=
GeckoProcessType_Default
?
ProcessCategory
:
:
GeckoBrowserParent
:
ProcessCategory
:
:
GeckoChild
)
{
}
#
endif
ProcessRuntime
:
:
ProcessRuntime
(
const
ProcessCategory
aProcessCategory
)
:
mInitResult
(
CO_E_NOTINITIALIZED
)
mProcessCategory
(
aProcessCategory
)
{
#
if
defined
(
ACCESSIBILITY
)
#
if
defined
(
MOZILLA_INTERNAL_API
)
if
(
aProcessCategory
!
=
ProcessCategory
:
:
GeckoBrowserParent
)
{
mActCtxRgn
.
emplace
(
ActCtxResource
:
:
GetAccessibilityResource
(
)
)
;
}
#
elif
defined
(
MOZ_HAS_MOZGLUE
)
MOZ_ASSERT
(
aProcessCategory
=
=
ProcessCategory
:
:
GeckoBrowserParent
)
;
mActCtxRgn
.
emplace
(
ActCtxResource
:
:
GetAccessibilityResource
(
)
)
;
#
endif
#
endif
#
if
defined
(
MOZILLA_INTERNAL_API
)
MOZ_DIAGNOSTIC_ASSERT
(
!
sInstance
)
;
sInstance
=
this
;
EnsureMTA
(
)
;
const
bool
isCurThreadImplicitMTA
=
IsCurrentThreadImplicitMTA
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aProcessCategory
=
=
ProcessCategory
:
:
GeckoBrowserParent
|
|
isCurThreadImplicitMTA
)
;
#
if
defined
(
MOZ_SANDBOX
)
const
bool
isLockedDownChildProcess
=
mProcessCategory
=
=
ProcessCategory
:
:
GeckoChild
&
&
IsWin32kLockedDown
(
)
;
if
(
isLockedDownChildProcess
)
{
HANDLE
rawCurThreadImpToken
;
if
(
!
:
:
OpenThreadToken
(
:
:
GetCurrentThread
(
)
TOKEN_DUPLICATE
|
TOKEN_QUERY
FALSE
&
rawCurThreadImpToken
)
)
{
mInitResult
=
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
return
;
}
nsAutoHandle
curThreadImpToken
(
rawCurThreadImpToken
)
;
DWORD
len
;
TOKEN_TYPE
tokenType
;
MOZ_RELEASE_ASSERT
(
:
:
GetTokenInformation
(
rawCurThreadImpToken
TokenType
&
tokenType
sizeof
(
tokenType
)
&
len
)
&
&
len
=
=
sizeof
(
tokenType
)
&
&
tokenType
=
=
TokenImpersonation
)
;
if
(
!
isCurThreadImplicitMTA
)
{
InitUsingPersistentMTAThread
(
curThreadImpToken
)
;
return
;
}
}
#
endif
#
endif
mAptRegion
.
Init
(
GetDesiredApartmentType
(
mProcessCategory
)
)
;
if
(
!
mAptRegion
.
IsValidOutermost
(
)
)
{
mInitResult
=
mAptRegion
.
GetHResult
(
)
;
#
if
defined
(
MOZILLA_INTERNAL_API
)
MOZ_ASSERT
(
mProcessCategory
=
=
ProcessCategory
:
:
GeckoBrowserParent
)
;
if
(
mProcessCategory
!
=
ProcessCategory
:
:
GeckoBrowserParent
)
{
return
;
}
ProcessInitLock
lock
;
const
bool
prevInit
=
lock
.
IsInitialized
(
)
;
MOZ_ASSERT
(
prevInit
)
;
if
(
prevInit
)
{
PostInit
(
)
;
}
#
endif
return
;
}
InitInsideApartment
(
)
;
if
(
FAILED
(
mInitResult
)
)
{
return
;
}
#
if
defined
(
MOZILLA_INTERNAL_API
)
#
if
defined
(
MOZ_SANDBOX
)
if
(
isLockedDownChildProcess
)
{
SandboxTarget
:
:
Instance
(
)
-
>
RegisterSandboxStartCallback
(
[
self
=
this
]
(
)
{
if
(
self
=
=
sInstance
&
&
SUCCEEDED
(
self
-
>
mInitResult
)
)
{
PostInit
(
)
;
}
}
)
;
return
;
}
#
endif
PostInit
(
)
;
#
endif
}
#
if
defined
(
MOZILLA_INTERNAL_API
)
ProcessRuntime
:
:
~
ProcessRuntime
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
sInstance
=
=
this
)
;
sInstance
=
nullptr
;
}
#
if
defined
(
MOZ_SANDBOX
)
void
ProcessRuntime
:
:
InitUsingPersistentMTAThread
(
const
nsAutoHandle
&
aCurThreadToken
)
{
HANDLE
rawMtaThreadImpToken
=
nullptr
;
if
(
!
:
:
DuplicateToken
(
aCurThreadToken
SecurityImpersonation
&
rawMtaThreadImpToken
)
)
{
mInitResult
=
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
return
;
}
nsAutoHandle
mtaThreadImpToken
(
rawMtaThreadImpToken
)
;
bool
tokenSet
=
false
;
EnsureMTA
(
[
this
rawMtaThreadImpToken
&
tokenSet
]
(
)
-
>
void
{
if
(
!
:
:
SetThreadToken
(
nullptr
rawMtaThreadImpToken
)
)
{
mInitResult
=
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
return
;
}
tokenSet
=
true
;
InitInsideApartment
(
)
;
}
EnsureMTA
:
:
Option
:
:
ForceDispatchToPersistentThread
)
;
if
(
!
tokenSet
)
{
return
;
}
SandboxTarget
:
:
Instance
(
)
-
>
RegisterSandboxStartCallback
(
[
self
=
this
]
(
)
-
>
void
{
EnsureMTA
(
[
]
(
)
-
>
void
{
MOZ_RELEASE_ASSERT
(
:
:
RevertToSelf
(
)
"
mscom
:
:
ProcessRuntime
RevertToSelf
failed
"
)
;
}
EnsureMTA
:
:
Option
:
:
ForceDispatchToPersistentThread
)
;
if
(
self
=
=
sInstance
&
&
SUCCEEDED
(
self
-
>
mInitResult
)
)
{
PostInit
(
)
;
}
}
)
;
}
#
endif
#
endif
COINIT
ProcessRuntime
:
:
GetDesiredApartmentType
(
const
ProcessRuntime
:
:
ProcessCategory
aProcessCategory
)
{
switch
(
aProcessCategory
)
{
case
ProcessCategory
:
:
GeckoBrowserParent
:
return
COINIT_APARTMENTTHREADED
;
case
ProcessCategory
:
:
GeckoChild
:
if
(
!
IsWin32kLockedDown
(
)
)
{
return
static_cast
<
COINIT
>
(
COINIT_APARTMENTTHREADED
|
COINIT_DISABLE_OLE1DDE
)
;
}
[
[
fallthrough
]
]
;
default
:
return
COINIT_MULTITHREADED
;
}
}
void
ProcessRuntime
:
:
InitInsideApartment
(
)
{
ProcessInitLock
lock
;
if
(
lock
.
IsInitialized
(
)
)
{
mInitResult
=
S_OK
;
return
;
}
mInitResult
=
InitializeSecurity
(
mProcessCategory
)
;
MOZ_DIAGNOSTIC_ASSERT
(
SUCCEEDED
(
mInitResult
)
)
;
if
(
FAILED
(
mInitResult
)
&
&
mInitResult
!
=
RPC_E_TOO_LATE
)
{
return
;
}
RefPtr
<
IGlobalOptions
>
globalOpts
;
mInitResult
=
:
:
CoCreateInstance
(
CLSID_GlobalOptions
nullptr
CLSCTX_INPROC_SERVER
IID_IGlobalOptions
getter_AddRefs
(
globalOpts
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
mInitResult
)
)
;
if
(
FAILED
(
mInitResult
)
)
{
return
;
}
mInitResult
=
globalOpts
-
>
Set
(
COMGLB_EXCEPTION_HANDLING
COMGLB_EXCEPTION_DONOT_HANDLE_ANY
)
;
MOZ_ASSERT
(
SUCCEEDED
(
mInitResult
)
)
;
:
:
SetOaNoCache
(
)
;
if
(
FAILED
(
mInitResult
)
)
{
return
;
}
lock
.
SetInitialized
(
)
;
}
#
if
defined
(
MOZILLA_INTERNAL_API
)
void
ProcessRuntime
:
:
PostInit
(
)
{
}
#
endif
DWORD
ProcessRuntime
:
:
GetClientThreadId
(
)
{
DWORD
callerTid
;
HRESULT
hr
=
:
:
CoGetCallerTID
(
&
callerTid
)
;
if
(
hr
!
=
S_FALSE
)
{
return
0
;
}
return
callerTid
;
}
HRESULT
ProcessRuntime
:
:
InitializeSecurity
(
const
ProcessCategory
aProcessCategory
)
{
HANDLE
rawToken
=
nullptr
;
BOOL
ok
=
:
:
OpenProcessToken
(
:
:
GetCurrentProcess
(
)
TOKEN_QUERY
&
rawToken
)
;
if
(
!
ok
)
{
return
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
}
nsAutoHandle
token
(
rawToken
)
;
DWORD
len
=
0
;
ok
=
:
:
GetTokenInformation
(
token
TokenUser
nullptr
len
&
len
)
;
DWORD
win32Error
=
:
:
GetLastError
(
)
;
if
(
!
ok
&
&
win32Error
!
=
ERROR_INSUFFICIENT_BUFFER
)
{
return
HRESULT_FROM_WIN32
(
win32Error
)
;
}
auto
tokenUserBuf
=
MakeUnique
<
BYTE
[
]
>
(
len
)
;
TOKEN_USER
&
tokenUser
=
*
reinterpret_cast
<
TOKEN_USER
*
>
(
tokenUserBuf
.
get
(
)
)
;
ok
=
:
:
GetTokenInformation
(
token
TokenUser
tokenUserBuf
.
get
(
)
len
&
len
)
;
if
(
!
ok
)
{
return
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
}
len
=
0
;
ok
=
:
:
GetTokenInformation
(
token
TokenPrimaryGroup
nullptr
len
&
len
)
;
win32Error
=
:
:
GetLastError
(
)
;
if
(
!
ok
&
&
win32Error
!
=
ERROR_INSUFFICIENT_BUFFER
)
{
return
HRESULT_FROM_WIN32
(
win32Error
)
;
}
auto
tokenPrimaryGroupBuf
=
MakeUnique
<
BYTE
[
]
>
(
len
)
;
TOKEN_PRIMARY_GROUP
&
tokenPrimaryGroup
=
*
reinterpret_cast
<
TOKEN_PRIMARY_GROUP
*
>
(
tokenPrimaryGroupBuf
.
get
(
)
)
;
ok
=
:
:
GetTokenInformation
(
token
TokenPrimaryGroup
tokenPrimaryGroupBuf
.
get
(
)
len
&
len
)
;
if
(
!
ok
)
{
return
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
}
SECURITY_DESCRIPTOR
sd
;
if
(
!
:
:
InitializeSecurityDescriptor
(
&
sd
SECURITY_DESCRIPTOR_REVISION
)
)
{
return
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
}
BYTE
systemSid
[
SECURITY_MAX_SID_SIZE
]
;
DWORD
systemSidSize
=
sizeof
(
systemSid
)
;
if
(
!
:
:
CreateWellKnownSid
(
WinLocalSystemSid
nullptr
systemSid
&
systemSidSize
)
)
{
return
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
}
BYTE
adminSid
[
SECURITY_MAX_SID_SIZE
]
;
DWORD
adminSidSize
=
sizeof
(
adminSid
)
;
if
(
!
:
:
CreateWellKnownSid
(
WinBuiltinAdministratorsSid
nullptr
adminSid
&
adminSidSize
)
)
{
return
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
}
const
bool
allowAppContainers
=
aProcessCategory
=
=
ProcessCategory
:
:
GeckoBrowserParent
&
&
IsWin8OrLater
(
)
;
BYTE
appContainersSid
[
SECURITY_MAX_SID_SIZE
]
;
DWORD
appContainersSidSize
=
sizeof
(
appContainersSid
)
;
if
(
allowAppContainers
)
{
if
(
!
:
:
CreateWellKnownSid
(
WinBuiltinAnyPackageSid
nullptr
appContainersSid
&
appContainersSidSize
)
)
{
return
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
}
}
const
size_t
kMaxInlineEntries
=
4
;
mozilla
:
:
Vector
<
EXPLICIT_ACCESS_W
kMaxInlineEntries
>
entries
;
Unused
<
<
entries
.
append
(
EXPLICIT_ACCESS_W
{
COM_RIGHTS_EXECUTE
GRANT_ACCESS
NO_INHERITANCE
{
nullptr
NO_MULTIPLE_TRUSTEE
TRUSTEE_IS_SID
TRUSTEE_IS_USER
reinterpret_cast
<
LPWSTR
>
(
systemSid
)
}
}
)
;
Unused
<
<
entries
.
append
(
EXPLICIT_ACCESS_W
{
COM_RIGHTS_EXECUTE
GRANT_ACCESS
NO_INHERITANCE
{
nullptr
NO_MULTIPLE_TRUSTEE
TRUSTEE_IS_SID
TRUSTEE_IS_WELL_KNOWN_GROUP
reinterpret_cast
<
LPWSTR
>
(
adminSid
)
}
}
)
;
Unused
<
<
entries
.
append
(
EXPLICIT_ACCESS_W
{
COM_RIGHTS_EXECUTE
GRANT_ACCESS
NO_INHERITANCE
{
nullptr
NO_MULTIPLE_TRUSTEE
TRUSTEE_IS_SID
TRUSTEE_IS_USER
reinterpret_cast
<
LPWSTR
>
(
tokenUser
.
User
.
Sid
)
}
}
)
;
if
(
allowAppContainers
)
{
Unused
<
<
entries
.
append
(
EXPLICIT_ACCESS_W
{
COM_RIGHTS_EXECUTE
GRANT_ACCESS
NO_INHERITANCE
{
nullptr
NO_MULTIPLE_TRUSTEE
TRUSTEE_IS_SID
TRUSTEE_IS_WELL_KNOWN_GROUP
reinterpret_cast
<
LPWSTR
>
(
appContainersSid
)
}
}
)
;
}
PACL
rawDacl
=
nullptr
;
win32Error
=
:
:
SetEntriesInAclW
(
entries
.
length
(
)
entries
.
begin
(
)
nullptr
&
rawDacl
)
;
if
(
win32Error
!
=
ERROR_SUCCESS
)
{
return
HRESULT_FROM_WIN32
(
win32Error
)
;
}
UniquePtr
<
ACL
LocalFreeDeleter
>
dacl
(
rawDacl
)
;
if
(
!
:
:
SetSecurityDescriptorDacl
(
&
sd
TRUE
dacl
.
get
(
)
FALSE
)
)
{
return
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
}
if
(
!
:
:
SetSecurityDescriptorOwner
(
&
sd
tokenUser
.
User
.
Sid
FALSE
)
)
{
return
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
}
if
(
!
:
:
SetSecurityDescriptorGroup
(
&
sd
tokenPrimaryGroup
.
PrimaryGroup
FALSE
)
)
{
return
HRESULT_FROM_WIN32
(
:
:
GetLastError
(
)
)
;
}
return
:
:
CoInitializeSecurity
(
&
sd
-
1
nullptr
nullptr
RPC_C_AUTHN_LEVEL_DEFAULT
RPC_C_IMP_LEVEL_IDENTIFY
nullptr
EOAC_NONE
nullptr
)
;
}
}
}
