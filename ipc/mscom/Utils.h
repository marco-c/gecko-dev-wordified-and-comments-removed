#
ifndef
mozilla_mscom_Utils_h
#
define
mozilla_mscom_Utils_h
#
if
defined
(
MOZILLA_INTERNAL_API
)
#
include
"
nsString
.
h
"
#
endif
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
guiddef
.
h
>
#
include
<
stdint
.
h
>
struct
IStream
;
struct
IUnknown
;
namespace
mozilla
{
namespace
mscom
{
namespace
detail
{
enum
class
GuidType
{
CLSID
AppID
}
;
long
BuildRegGuidPath
(
REFGUID
aGuid
const
GuidType
aGuidType
wchar_t
*
aBuf
const
size_t
aBufLen
)
;
}
bool
IsCOMInitializedOnCurrentThread
(
)
;
bool
IsCurrentThreadMTA
(
)
;
bool
IsCurrentThreadExplicitMTA
(
)
;
bool
IsCurrentThreadImplicitMTA
(
)
;
#
if
defined
(
MOZILLA_INTERNAL_API
)
bool
IsCurrentThreadNonMainMTA
(
)
;
#
endif
bool
IsProxy
(
IUnknown
*
aUnknown
)
;
bool
IsValidGUID
(
REFGUID
aCheckGuid
)
;
uintptr_t
GetContainingModuleHandle
(
)
;
template
<
size_t
N
>
inline
long
BuildAppidPath
(
REFGUID
aAppId
wchar_t
(
&
aPath
)
[
N
]
)
{
return
detail
:
:
BuildRegGuidPath
(
aAppId
detail
:
:
GuidType
:
:
AppID
aPath
N
)
;
}
template
<
size_t
N
>
inline
long
BuildClsidPath
(
REFCLSID
aClsid
wchar_t
(
&
aPath
)
[
N
]
)
{
return
detail
:
:
BuildRegGuidPath
(
aClsid
detail
:
:
GuidType
:
:
CLSID
aPath
N
)
;
}
long
CreateStream
(
const
uint8_t
*
aBuf
const
uint32_t
aBufLen
IStream
*
*
aOutStream
)
;
constexpr
size_t
kGuidRegFormatCharLenInclNul
=
39
;
#
if
defined
(
MOZILLA_INTERNAL_API
)
void
GUIDToString
(
REFGUID
aGuid
nsAString
&
aOutString
)
;
void
DiagnosticNameForIID
(
REFIID
aIid
nsACString
&
aOutString
)
;
#
else
void
GUIDToString
(
REFGUID
aGuid
wchar_t
(
&
aOutBuf
)
[
kGuidRegFormatCharLenInclNul
]
)
;
#
endif
template
<
typename
CondFnT
typename
ExeFnT
>
class
MOZ_RAII
ExecuteWhen
final
{
public
:
ExecuteWhen
(
CondFnT
&
aCondFn
ExeFnT
&
aExeFn
)
:
mCondFn
(
aCondFn
)
mExeFn
(
aExeFn
)
{
}
~
ExecuteWhen
(
)
{
if
(
mCondFn
(
)
)
{
mExeFn
(
)
;
}
}
ExecuteWhen
(
const
ExecuteWhen
&
)
=
delete
;
ExecuteWhen
(
ExecuteWhen
&
&
)
=
delete
;
ExecuteWhen
&
operator
=
(
const
ExecuteWhen
&
)
=
delete
;
ExecuteWhen
&
operator
=
(
ExecuteWhen
&
&
)
=
delete
;
private
:
CondFnT
&
mCondFn
;
ExeFnT
&
mExeFn
;
}
;
}
}
#
endif
