#
include
"
mozilla
/
mscom
/
PassthruProxy
.
h
"
#
include
"
mozilla
/
mscom
/
ProxyStream
.
h
"
#
include
"
VTableBuilder
.
h
"
static
const
GUID
CLSID_PassthruProxy
=
{
0x96ef5801
0xce6d
0x416e
{
0xa5
0xa
0xc
0x29
0x59
0xae
0xae
0x1c
}
}
;
namespace
mozilla
{
namespace
mscom
{
PassthruProxy
:
:
PassthruProxy
(
)
:
mRefCnt
(
0
)
mWrappedIid
(
)
mVTableSize
(
0
)
mVTable
(
nullptr
)
mForgetPreservedStream
(
false
)
{
}
PassthruProxy
:
:
PassthruProxy
(
REFIID
aIidToWrap
uint32_t
aVTableSize
NotNull
<
IUnknown
*
>
aObjToWrap
)
:
mRefCnt
(
0
)
mWrappedIid
(
aIidToWrap
)
mVTableSize
(
aVTableSize
)
mVTable
(
nullptr
)
mForgetPreservedStream
(
false
)
{
ProxyStream
proxyStream
(
aIidToWrap
aObjToWrap
ProxyStreamFlags
:
:
ePreservable
)
;
mPreservedStream
=
Move
(
proxyStream
.
GetPreservedStream
(
)
)
;
MOZ_ASSERT
(
mPreservedStream
)
;
}
PassthruProxy
:
:
~
PassthruProxy
(
)
{
if
(
mForgetPreservedStream
)
{
IStream
*
stream
=
mPreservedStream
.
release
(
)
;
stream
-
>
Release
(
)
;
}
if
(
mVTable
)
{
DeleteNullVTable
(
mVTable
)
;
}
}
HRESULT
PassthruProxy
:
:
QueryProxyInterface
(
void
*
*
aOutInterface
)
{
if
(
!
mVTable
)
{
MOZ_ASSERT
(
mVTableSize
)
;
mVTable
=
BuildNullVTable
(
static_cast
<
IMarshal
*
>
(
this
)
mVTableSize
)
;
MOZ_ASSERT
(
mVTable
)
;
}
*
aOutInterface
=
mVTable
;
mVTable
-
>
AddRef
(
)
;
return
S_OK
;
}
HRESULT
PassthruProxy
:
:
QueryInterface
(
REFIID
aIid
void
*
*
aOutInterface
)
{
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
*
aOutInterface
=
nullptr
;
if
(
aIid
=
=
IID_IUnknown
|
|
aIid
=
=
IID_IMarshal
)
{
RefPtr
<
IMarshal
>
ptr
(
this
)
;
ptr
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
if
(
!
IsInitialMarshal
(
)
)
{
if
(
aIid
=
=
IID_IClientSecurity
)
{
RefPtr
<
IClientSecurity
>
ptr
(
this
)
;
ptr
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
if
(
aIid
=
=
mWrappedIid
)
{
return
QueryProxyInterface
(
aOutInterface
)
;
}
}
return
E_NOINTERFACE
;
}
ULONG
PassthruProxy
:
:
AddRef
(
)
{
return
+
+
mRefCnt
;
}
ULONG
PassthruProxy
:
:
Release
(
)
{
ULONG
result
=
-
-
mRefCnt
;
if
(
!
result
)
{
delete
this
;
}
return
result
;
}
HRESULT
PassthruProxy
:
:
GetUnmarshalClass
(
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
CLSID
*
pCid
)
{
if
(
!
pCid
)
{
return
E_INVALIDARG
;
}
if
(
IsInitialMarshal
(
)
)
{
MOZ_ASSERT
(
mshlflags
&
MSHLFLAGS_TABLESTRONG
)
;
*
pCid
=
CLSID_PassthruProxy
;
}
else
{
*
pCid
=
CLSID_StdMarshal
;
}
return
S_OK
;
}
HRESULT
PassthruProxy
:
:
GetMarshalSizeMax
(
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
DWORD
*
pSize
)
{
STATSTG
statstg
;
HRESULT
hr
;
if
(
!
IsInitialMarshal
(
)
)
{
hr
=
mStream
-
>
Stat
(
&
statstg
STATFLAG_NONAME
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
*
pSize
=
statstg
.
cbSize
.
LowPart
;
return
hr
;
}
MOZ_ASSERT
(
mshlflags
&
MSHLFLAGS_TABLESTRONG
)
;
if
(
!
mPreservedStream
)
{
return
E_POINTER
;
}
hr
=
mPreservedStream
-
>
Stat
(
&
statstg
STATFLAG_NONAME
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
*
pSize
=
statstg
.
cbSize
.
LowPart
+
sizeof
(
mVTableSize
)
+
sizeof
(
mWrappedIid
)
;
return
hr
;
}
HRESULT
PassthruProxy
:
:
MarshalInterface
(
IStream
*
pStm
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
)
{
MOZ_ASSERT
(
riid
=
=
mWrappedIid
)
;
if
(
riid
!
=
mWrappedIid
)
{
return
E_NOINTERFACE
;
}
MOZ_ASSERT
(
pv
=
=
mVTable
)
;
if
(
pv
!
=
mVTable
)
{
return
E_INVALIDARG
;
}
HRESULT
hr
;
RefPtr
<
IStream
>
cloned
;
if
(
IsInitialMarshal
(
)
)
{
MOZ_ASSERT
(
mshlflags
&
MSHLFLAGS_TABLESTRONG
)
;
if
(
!
mPreservedStream
)
{
return
E_POINTER
;
}
ULONG
bytesWritten
;
hr
=
pStm
-
>
Write
(
&
mVTableSize
sizeof
(
mVTableSize
)
&
bytesWritten
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
bytesWritten
!
=
sizeof
(
mVTableSize
)
)
{
return
E_UNEXPECTED
;
}
hr
=
pStm
-
>
Write
(
&
mWrappedIid
sizeof
(
mWrappedIid
)
&
bytesWritten
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
bytesWritten
!
=
sizeof
(
mWrappedIid
)
)
{
return
E_UNEXPECTED
;
}
hr
=
mPreservedStream
-
>
Clone
(
getter_AddRefs
(
cloned
)
)
;
}
else
{
hr
=
mStream
-
>
Clone
(
getter_AddRefs
(
cloned
)
)
;
}
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
STATSTG
statstg
;
hr
=
cloned
-
>
Stat
(
&
statstg
STATFLAG_NONAME
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
hr
=
cloned
-
>
CopyTo
(
pStm
statstg
.
cbSize
nullptr
nullptr
)
;
if
(
SUCCEEDED
(
hr
)
&
&
IsInitialMarshal
(
)
&
&
mPreservedStream
&
&
(
mshlflags
&
MSHLFLAGS_TABLESTRONG
)
)
{
mForgetPreservedStream
=
true
;
}
return
hr
;
}
HRESULT
PassthruProxy
:
:
UnmarshalInterface
(
IStream
*
pStm
REFIID
riid
void
*
*
ppv
)
{
ULONG
bytesRead
;
HRESULT
hr
=
pStm
-
>
Read
(
&
mVTableSize
sizeof
(
mVTableSize
)
&
bytesRead
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
bytesRead
!
=
sizeof
(
mVTableSize
)
)
{
return
E_UNEXPECTED
;
}
hr
=
pStm
-
>
Read
(
&
mWrappedIid
sizeof
(
mWrappedIid
)
&
bytesRead
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
bytesRead
!
=
sizeof
(
mWrappedIid
)
)
{
return
E_UNEXPECTED
;
}
hr
=
CopySerializedProxy
(
pStm
getter_AddRefs
(
mStream
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
return
QueryInterface
(
riid
ppv
)
;
}
HRESULT
PassthruProxy
:
:
ReleaseMarshalData
(
IStream
*
pStm
)
{
if
(
!
IsInitialMarshal
(
)
)
{
return
S_OK
;
}
if
(
!
pStm
)
{
return
E_INVALIDARG
;
}
if
(
mPreservedStream
)
{
mPreservedStream
=
nullptr
;
return
S_OK
;
}
LARGE_INTEGER
seekTo
;
seekTo
.
QuadPart
=
sizeof
(
mVTableSize
)
+
sizeof
(
mWrappedIid
)
;
HRESULT
hr
=
pStm
-
>
Seek
(
seekTo
STREAM_SEEK_CUR
nullptr
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
return
:
:
CoReleaseMarshalData
(
pStm
)
;
}
HRESULT
PassthruProxy
:
:
DisconnectObject
(
DWORD
dwReserved
)
{
return
S_OK
;
}
class
PassthruProxyClassObject
final
:
public
IClassFactory
{
public
:
PassthruProxyClassObject
(
)
;
STDMETHODIMP
QueryInterface
(
REFIID
aIid
void
*
*
aOutInterface
)
override
;
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
;
STDMETHODIMP_
(
ULONG
)
Release
(
)
override
;
STDMETHODIMP
CreateInstance
(
IUnknown
*
aOuter
REFIID
aIid
void
*
*
aOutObject
)
override
;
STDMETHODIMP
LockServer
(
BOOL
aLock
)
override
;
private
:
~
PassthruProxyClassObject
(
)
=
default
;
Atomic
<
ULONG
>
mRefCnt
;
}
;
PassthruProxyClassObject
:
:
PassthruProxyClassObject
(
)
:
mRefCnt
(
0
)
{
}
HRESULT
PassthruProxyClassObject
:
:
QueryInterface
(
REFIID
aIid
void
*
*
aOutInterface
)
{
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
*
aOutInterface
=
nullptr
;
if
(
aIid
=
=
IID_IUnknown
|
|
aIid
=
=
IID_IClassFactory
)
{
RefPtr
<
IClassFactory
>
ptr
(
this
)
;
ptr
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
return
E_NOINTERFACE
;
}
ULONG
PassthruProxyClassObject
:
:
AddRef
(
)
{
return
+
+
mRefCnt
;
}
ULONG
PassthruProxyClassObject
:
:
Release
(
)
{
ULONG
result
=
-
-
mRefCnt
;
if
(
!
result
)
{
delete
this
;
}
return
result
;
}
HRESULT
PassthruProxyClassObject
:
:
CreateInstance
(
IUnknown
*
aOuter
REFIID
aIid
void
*
*
aOutObject
)
{
MOZ_ASSERT
(
!
aOuter
)
;
if
(
aOuter
)
{
return
E_INVALIDARG
;
}
RefPtr
<
PassthruProxy
>
ptr
(
new
PassthruProxy
(
)
)
;
return
ptr
-
>
QueryInterface
(
aIid
aOutObject
)
;
}
HRESULT
PassthruProxyClassObject
:
:
LockServer
(
BOOL
aLock
)
{
return
S_OK
;
}
HRESULT
PassthruProxy
:
:
Register
(
)
{
DWORD
cookie
;
RefPtr
<
IClassFactory
>
classObj
(
new
PassthruProxyClassObject
(
)
)
;
return
:
:
CoRegisterClassObject
(
CLSID_PassthruProxy
classObj
CLSCTX_INPROC_SERVER
REGCLS_MULTIPLEUSE
&
cookie
)
;
}
}
}
HRESULT
RegisterPassthruProxy
(
)
{
return
mozilla
:
:
mscom
:
:
PassthruProxy
:
:
Register
(
)
;
}
