#
ifndef
mozilla_mscom_ProcessRuntime_h
#
define
mozilla_mscom_ProcessRuntime_h
#
include
"
mozilla
/
Attributes
.
h
"
#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
MOZILLA_INTERNAL_API
)
#
include
"
mozilla
/
mscom
/
ActivationContext
.
h
"
#
endif
#
include
"
mozilla
/
mscom
/
ApartmentRegion
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
if
defined
(
MOZILLA_INTERNAL_API
)
#
include
"
nsXULAppAPI
.
h
"
#
endif
namespace
mozilla
{
namespace
mscom
{
class
MOZ_NON_TEMPORARY_CLASS
ProcessRuntime
final
{
#
if
!
defined
(
MOZILLA_INTERNAL_API
)
public
:
#
endif
enum
class
ProcessCategory
{
GeckoBrowserParent
Launcher
=
GeckoBrowserParent
GeckoChild
Service
}
;
explicit
ProcessRuntime
(
const
ProcessCategory
aProcessCategory
)
;
public
:
#
if
defined
(
MOZILLA_INTERNAL_API
)
ProcessRuntime
(
)
;
~
ProcessRuntime
(
)
;
#
else
~
ProcessRuntime
(
)
=
default
;
#
endif
explicit
operator
bool
(
)
const
{
return
SUCCEEDED
(
mInitResult
)
;
}
HRESULT
GetHResult
(
)
const
{
return
mInitResult
;
}
ProcessRuntime
(
const
ProcessRuntime
&
)
=
delete
;
ProcessRuntime
(
ProcessRuntime
&
&
)
=
delete
;
ProcessRuntime
&
operator
=
(
const
ProcessRuntime
&
)
=
delete
;
ProcessRuntime
&
operator
=
(
ProcessRuntime
&
&
)
=
delete
;
static
DWORD
GetClientThreadId
(
)
;
private
:
#
if
defined
(
MOZILLA_INTERNAL_API
)
explicit
ProcessRuntime
(
const
GeckoProcessType
aProcessType
)
;
#
if
defined
(
MOZ_SANDBOX
)
void
InitUsingPersistentMTAThread
(
const
nsAutoHandle
&
aCurThreadToken
)
;
#
endif
#
endif
void
InitInsideApartment
(
)
;
#
if
defined
(
MOZILLA_INTERNAL_API
)
static
void
PostInit
(
)
;
#
endif
static
HRESULT
InitializeSecurity
(
const
ProcessCategory
aProcessCategory
)
;
static
COINIT
GetDesiredApartmentType
(
const
ProcessCategory
aProcessCategory
)
;
private
:
HRESULT
mInitResult
;
const
ProcessCategory
mProcessCategory
;
#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
MOZILLA_INTERNAL_API
)
ActivationContextRegion
mActCtxRgn
;
#
endif
ApartmentRegion
mAptRegion
;
private
:
#
if
defined
(
MOZILLA_INTERNAL_API
)
static
ProcessRuntime
*
sInstance
;
#
endif
}
;
}
}
#
endif
