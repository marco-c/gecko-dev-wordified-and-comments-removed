#
ifndef
mozilla_mscom_MainThreadInvoker_h
#
define
mozilla_mscom_MainThreadInvoker_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
<
windows
.
h
>
class
nsIRunnable
;
namespace
mozilla
{
namespace
mscom
{
class
MainThreadInvoker
{
public
:
MainThreadInvoker
(
)
;
bool
Invoke
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
static
HANDLE
GetTargetThread
(
)
{
return
sMainThread
;
}
private
:
static
bool
InitStatics
(
)
;
static
VOID
CALLBACK
MainThreadAPC
(
ULONG_PTR
aParam
)
;
static
HANDLE
sMainThread
;
}
;
template
<
typename
Class
typename
.
.
.
Args
>
inline
bool
InvokeOnMainThread
(
const
char
*
aName
Class
*
aObject
void
(
Class
:
:
*
aMethod
)
(
Args
.
.
.
)
Args
.
.
.
aArgs
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
(
NewNonOwningRunnableMethod
<
Args
.
.
.
>
(
aName
aObject
aMethod
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
MainThreadInvoker
invoker
;
return
invoker
.
Invoke
(
runnable
.
forget
(
)
)
;
}
}
}
#
endif
