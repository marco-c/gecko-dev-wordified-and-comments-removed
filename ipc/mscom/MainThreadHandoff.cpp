#
include
"
mozilla
/
mscom
/
MainThreadHandoff
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
mscom
/
AgileReference
.
h
"
#
include
"
mozilla
/
mscom
/
InterceptorLog
.
h
"
#
include
"
mozilla
/
mscom
/
Registration
.
h
"
#
include
"
mozilla
/
mscom
/
Utils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsProxyRelease
.
h
"
using
mozilla
:
:
DebugOnly
;
using
mozilla
:
:
mscom
:
:
AgileReference
;
namespace
{
class
MOZ_NON_TEMPORARY_CLASS
InParamWalker
:
private
ICallFrameWalker
{
public
:
InParamWalker
(
)
:
mPreHandoff
(
true
)
{
}
void
SetHandoffDone
(
)
{
mPreHandoff
=
false
;
mAgileRefsItr
=
mAgileRefs
.
begin
(
)
;
}
HRESULT
Walk
(
ICallFrame
*
aFrame
)
{
MOZ_ASSERT
(
aFrame
)
;
if
(
!
aFrame
)
{
return
E_INVALIDARG
;
}
return
aFrame
-
>
WalkFrame
(
CALLFRAME_WALK_IN
this
)
;
}
private
:
STDMETHODIMP
QueryInterface
(
REFIID
aIid
void
*
*
aOutInterface
)
override
{
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
*
aOutInterface
=
nullptr
;
if
(
aIid
=
=
IID_IUnknown
|
|
aIid
=
=
IID_ICallFrameWalker
)
{
*
aOutInterface
=
static_cast
<
ICallFrameWalker
*
>
(
this
)
;
return
S_OK
;
}
return
E_NOINTERFACE
;
}
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
{
return
2
;
}
STDMETHODIMP_
(
ULONG
)
Release
(
)
override
{
return
1
;
}
STDMETHODIMP
OnWalkInterface
(
REFIID
aIid
PVOID
*
aInterface
BOOL
aIn
BOOL
aOut
)
override
{
MOZ_ASSERT
(
aIn
)
;
if
(
!
aIn
)
{
return
E_UNEXPECTED
;
}
IUnknown
*
origInterface
=
static_cast
<
IUnknown
*
>
(
*
aInterface
)
;
if
(
!
origInterface
)
{
return
S_OK
;
}
if
(
mPreHandoff
)
{
mAgileRefs
.
AppendElement
(
AgileReference
(
aIid
origInterface
)
)
;
return
S_OK
;
}
MOZ_ASSERT
(
mAgileRefsItr
!
=
mAgileRefs
.
end
(
)
)
;
if
(
mAgileRefsItr
=
=
mAgileRefs
.
end
(
)
)
{
return
E_UNEXPECTED
;
}
HRESULT
hr
=
mAgileRefsItr
-
>
Resolve
(
aIid
aInterface
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
if
(
SUCCEEDED
(
hr
)
)
{
+
+
mAgileRefsItr
;
}
return
hr
;
}
InParamWalker
(
const
InParamWalker
&
)
=
delete
;
InParamWalker
(
InParamWalker
&
&
)
=
delete
;
InParamWalker
&
operator
=
(
const
InParamWalker
&
)
=
delete
;
InParamWalker
&
operator
=
(
InParamWalker
&
&
)
=
delete
;
private
:
bool
mPreHandoff
;
AutoTArray
<
AgileReference
1
>
mAgileRefs
;
nsTArray
<
AgileReference
>
:
:
iterator
mAgileRefsItr
;
}
;
class
HandoffRunnable
:
public
mozilla
:
:
Runnable
{
public
:
explicit
HandoffRunnable
(
ICallFrame
*
aCallFrame
IUnknown
*
aTargetInterface
)
:
mCallFrame
(
aCallFrame
)
mTargetInterface
(
aTargetInterface
)
mResult
(
E_UNEXPECTED
)
{
DebugOnly
<
HRESULT
>
hr
=
mInParamWalker
.
Walk
(
aCallFrame
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
}
NS_IMETHOD
Run
(
)
override
{
mInParamWalker
.
SetHandoffDone
(
)
;
DebugOnly
<
HRESULT
>
hr
=
mInParamWalker
.
Walk
(
mCallFrame
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
mResult
=
mCallFrame
-
>
Invoke
(
mTargetInterface
)
;
return
NS_OK
;
}
HRESULT
GetResult
(
)
const
{
return
mResult
;
}
private
:
ICallFrame
*
mCallFrame
;
InParamWalker
mInParamWalker
;
IUnknown
*
mTargetInterface
;
HRESULT
mResult
;
}
;
}
namespace
mozilla
{
namespace
mscom
{
HRESULT
MainThreadHandoff
:
:
Create
(
IHandlerPayload
*
aHandlerPayload
IInterceptorSink
*
*
aOutput
)
{
RefPtr
<
MainThreadHandoff
>
handoff
(
new
MainThreadHandoff
(
aHandlerPayload
)
)
;
return
handoff
-
>
QueryInterface
(
IID_IInterceptorSink
(
void
*
*
)
aOutput
)
;
}
MainThreadHandoff
:
:
MainThreadHandoff
(
IHandlerPayload
*
aHandlerPayload
)
:
mRefCnt
(
0
)
mHandlerPayload
(
aHandlerPayload
)
{
}
MainThreadHandoff
:
:
~
MainThreadHandoff
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
HRESULT
MainThreadHandoff
:
:
QueryInterface
(
REFIID
riid
void
*
*
ppv
)
{
IUnknown
*
punk
=
nullptr
;
if
(
!
ppv
)
{
return
E_INVALIDARG
;
}
if
(
riid
=
=
IID_IUnknown
|
|
riid
=
=
IID_ICallFrameEvents
|
|
riid
=
=
IID_IInterceptorSink
)
{
punk
=
static_cast
<
IInterceptorSink
*
>
(
this
)
;
}
else
if
(
riid
=
=
IID_ICallFrameWalker
)
{
punk
=
static_cast
<
ICallFrameWalker
*
>
(
this
)
;
}
*
ppv
=
punk
;
if
(
!
punk
)
{
return
E_NOINTERFACE
;
}
punk
-
>
AddRef
(
)
;
return
S_OK
;
}
ULONG
MainThreadHandoff
:
:
AddRef
(
)
{
return
(
ULONG
)
InterlockedIncrement
(
(
LONG
*
)
&
mRefCnt
)
;
}
ULONG
MainThreadHandoff
:
:
Release
(
)
{
ULONG
newRefCnt
=
(
ULONG
)
InterlockedDecrement
(
(
LONG
*
)
&
mRefCnt
)
;
if
(
newRefCnt
=
=
0
)
{
if
(
NS_IsMainThread
(
)
)
{
delete
this
;
}
else
{
RefPtr
<
MainThreadHandoff
>
self
=
this
;
NS_ReleaseOnMainThread
(
self
.
forget
(
)
)
;
}
}
return
newRefCnt
;
}
HRESULT
MainThreadHandoff
:
:
OnCall
(
ICallFrame
*
aFrame
)
{
HRESULT
hr
;
IID
iid
;
ULONG
method
;
hr
=
aFrame
-
>
GetIIDAndMethod
(
&
iid
&
method
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
RefPtr
<
IInterceptor
>
interceptor
;
hr
=
mInterceptor
-
>
Resolve
(
IID_IInterceptor
(
void
*
*
)
getter_AddRefs
(
interceptor
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
InterceptorTargetPtr
<
IUnknown
>
targetInterface
;
hr
=
interceptor
-
>
GetTargetForIID
(
iid
targetInterface
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
RefPtr
<
HandoffRunnable
>
handoffInfo
(
new
HandoffRunnable
(
aFrame
targetInterface
.
get
(
)
)
)
;
MainThreadInvoker
invoker
;
if
(
!
invoker
.
Invoke
(
do_AddRef
(
handoffInfo
)
)
)
{
MOZ_ASSERT
(
false
)
;
return
E_UNEXPECTED
;
}
hr
=
handoffInfo
-
>
GetResult
(
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
InterceptorLog
:
:
Event
(
aFrame
targetInterface
.
get
(
)
)
;
hr
=
aFrame
-
>
GetReturnValue
(
)
;
if
(
FAILED
(
hr
)
)
{
return
S_OK
;
}
const
ArrayData
*
arrayData
=
FindArrayData
(
iid
method
)
;
if
(
arrayData
)
{
hr
=
FixArrayElements
(
aFrame
*
arrayData
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
}
else
{
hr
=
aFrame
-
>
WalkFrame
(
CALLFRAME_WALK_OUT
this
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
}
return
S_OK
;
}
static
PVOID
ResolveArrayPtr
(
VARIANT
&
aVariant
)
{
if
(
!
(
aVariant
.
vt
&
VT_BYREF
)
)
{
return
nullptr
;
}
return
aVariant
.
byref
;
}
static
PVOID
*
ResolveInterfacePtr
(
PVOID
aArrayPtr
VARTYPE
aVartype
LONG
aIndex
)
{
if
(
aVartype
!
=
(
VT_VARIANT
|
VT_BYREF
)
)
{
IUnknown
*
*
ifaceArray
=
reinterpret_cast
<
IUnknown
*
*
>
(
aArrayPtr
)
;
return
reinterpret_cast
<
PVOID
*
>
(
&
ifaceArray
[
aIndex
]
)
;
}
VARIANT
*
variantArray
=
reinterpret_cast
<
VARIANT
*
>
(
aArrayPtr
)
;
VARIANT
&
element
=
variantArray
[
aIndex
]
;
return
&
element
.
byref
;
}
HRESULT
MainThreadHandoff
:
:
FixArrayElements
(
ICallFrame
*
aFrame
const
ArrayData
&
aArrayData
)
{
VARIANT
paramVal
;
VariantInit
(
&
paramVal
)
;
HRESULT
hr
=
aFrame
-
>
GetParam
(
aArrayData
.
mLengthParamIndex
&
paramVal
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
&
&
(
paramVal
.
vt
=
=
(
VT_I4
|
VT_BYREF
)
|
|
paramVal
.
vt
=
=
(
VT_UI4
|
VT_BYREF
)
)
)
;
if
(
FAILED
(
hr
)
|
|
(
paramVal
.
vt
!
=
(
VT_I4
|
VT_BYREF
)
&
&
paramVal
.
vt
!
=
(
VT_UI4
|
VT_BYREF
)
)
)
{
return
hr
;
}
const
LONG
arrayLength
=
*
(
paramVal
.
plVal
)
;
if
(
!
arrayLength
)
{
return
S_OK
;
}
VariantInit
(
&
paramVal
)
;
PVOID
arrayPtr
=
nullptr
;
hr
=
aFrame
-
>
GetParam
(
aArrayData
.
mArrayParamIndex
&
paramVal
)
;
if
(
hr
=
=
DISP_E_BADVARTYPE
)
{
CALLFRAMEPARAMINFO
paramInfo
;
hr
=
aFrame
-
>
GetParamInfo
(
aArrayData
.
mArrayParamIndex
&
paramInfo
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
PVOID
stackBase
=
aFrame
-
>
GetStackLocation
(
)
;
if
(
aArrayData
.
mFlag
=
=
ArrayData
:
:
Flag
:
:
eAllocatedByServer
)
{
arrayPtr
=
*
*
reinterpret_cast
<
PVOID
*
*
>
(
reinterpret_cast
<
PBYTE
>
(
stackBase
)
+
paramInfo
.
stackOffset
)
;
}
else
{
arrayPtr
=
*
reinterpret_cast
<
PVOID
*
>
(
reinterpret_cast
<
PBYTE
>
(
stackBase
)
+
paramInfo
.
stackOffset
)
;
}
}
else
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
else
{
arrayPtr
=
ResolveArrayPtr
(
paramVal
)
;
}
MOZ_ASSERT
(
arrayPtr
)
;
if
(
!
arrayPtr
)
{
return
DISP_E_BADVARTYPE
;
}
for
(
LONG
index
=
0
;
index
<
arrayLength
;
+
+
index
)
{
hr
=
OnWalkInterface
(
aArrayData
.
mArrayParamIid
ResolveInterfacePtr
(
arrayPtr
paramVal
.
vt
index
)
FALSE
TRUE
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
}
return
S_OK
;
}
HRESULT
MainThreadHandoff
:
:
SetInterceptor
(
IWeakReference
*
aInterceptor
)
{
mInterceptor
=
aInterceptor
;
return
S_OK
;
}
HRESULT
MainThreadHandoff
:
:
GetHandler
(
CLSID
*
aHandlerClsid
)
{
if
(
!
mHandlerPayload
)
{
return
E_NOTIMPL
;
}
return
mHandlerPayload
-
>
GetHandler
(
aHandlerClsid
)
;
}
HRESULT
MainThreadHandoff
:
:
GetHandlerPayloadSize
(
REFIID
aIid
InterceptorTargetPtr
<
IUnknown
>
aTarget
DWORD
*
aOutPayloadSize
)
{
if
(
!
mHandlerPayload
)
{
return
E_NOTIMPL
;
}
return
mHandlerPayload
-
>
GetHandlerPayloadSize
(
aIid
Move
(
aTarget
)
aOutPayloadSize
)
;
}
HRESULT
MainThreadHandoff
:
:
WriteHandlerPayload
(
IStream
*
aStream
REFIID
aIid
InterceptorTargetPtr
<
IUnknown
>
aTarget
)
{
if
(
!
mHandlerPayload
)
{
return
E_NOTIMPL
;
}
return
mHandlerPayload
-
>
WriteHandlerPayload
(
aStream
aIid
Move
(
aTarget
)
)
;
}
REFIID
MainThreadHandoff
:
:
MarshalAs
(
REFIID
aIid
)
{
if
(
!
mHandlerPayload
)
{
return
aIid
;
}
return
mHandlerPayload
-
>
MarshalAs
(
aIid
)
;
}
HRESULT
MainThreadHandoff
:
:
OnWalkInterface
(
REFIID
aIid
PVOID
*
aInterface
BOOL
aIsInParam
BOOL
aIsOutParam
)
{
MOZ_ASSERT
(
aInterface
&
&
aIsOutParam
)
;
if
(
!
aInterface
|
|
!
aIsOutParam
)
{
return
E_UNEXPECTED
;
}
STAUniquePtr
<
IUnknown
>
origInterface
(
static_cast
<
IUnknown
*
>
(
*
aInterface
)
)
;
*
aInterface
=
nullptr
;
if
(
!
origInterface
)
{
return
S_OK
;
}
if
(
IsProxy
(
origInterface
.
get
(
)
)
)
{
*
aInterface
=
origInterface
.
release
(
)
;
return
S_OK
;
}
RefPtr
<
IInterceptor
>
interceptor
;
HRESULT
hr
=
mInterceptor
-
>
Resolve
(
IID_IInterceptor
(
void
*
*
)
getter_AddRefs
(
interceptor
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
InterceptorTargetPtr
<
IUnknown
>
existingTarget
;
hr
=
interceptor
-
>
GetTargetForIID
(
aIid
existingTarget
)
;
if
(
SUCCEEDED
(
hr
)
)
{
bool
areIUnknownsEqual
=
false
;
auto
checkFn
=
[
&
existingTarget
&
origInterface
&
areIUnknownsEqual
]
(
)
-
>
void
{
RefPtr
<
IUnknown
>
unkExisting
;
HRESULT
hrExisting
=
existingTarget
-
>
QueryInterface
(
IID_IUnknown
(
void
*
*
)
getter_AddRefs
(
unkExisting
)
)
;
RefPtr
<
IUnknown
>
unkNew
;
HRESULT
hrNew
=
origInterface
-
>
QueryInterface
(
IID_IUnknown
(
void
*
*
)
getter_AddRefs
(
unkNew
)
)
;
areIUnknownsEqual
=
SUCCEEDED
(
hrExisting
)
&
&
SUCCEEDED
(
hrNew
)
&
&
unkExisting
=
=
unkNew
;
}
;
MainThreadInvoker
invoker
;
if
(
invoker
.
Invoke
(
NS_NewRunnableFunction
(
checkFn
)
)
&
&
areIUnknownsEqual
)
{
void
*
intercepted
=
nullptr
;
hr
=
interceptor
-
>
GetInterceptorForIID
(
aIid
&
intercepted
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
*
aInterface
=
intercepted
;
return
S_OK
;
}
}
RefPtr
<
IHandlerPayload
>
payload
;
if
(
mHandlerPayload
)
{
hr
=
mHandlerPayload
-
>
Clone
(
getter_AddRefs
(
payload
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
}
RefPtr
<
IInterceptorSink
>
handoff
;
hr
=
MainThreadHandoff
:
:
Create
(
payload
getter_AddRefs
(
handoff
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
REFIID
interceptorIid
=
payload
?
payload
-
>
MarshalAs
(
aIid
)
:
aIid
;
RefPtr
<
IUnknown
>
wrapped
;
hr
=
Interceptor
:
:
Create
(
Move
(
origInterface
)
handoff
interceptorIid
getter_AddRefs
(
wrapped
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
wrapped
.
forget
(
reinterpret_cast
<
IUnknown
*
*
>
(
aInterface
)
)
;
return
S_OK
;
}
}
}
