#
ifndef
mozilla_mscom_DispatchForwarder_h
#
define
mozilla_mscom_DispatchForwarder_h
#
include
<
oaidl
.
h
>
#
include
"
mozilla
/
mscom
/
Interceptor
.
h
"
#
include
"
mozilla
/
mscom
/
Ptr
.
h
"
namespace
mozilla
{
namespace
mscom
{
class
DispatchForwarder
final
:
public
IDispatch
{
public
:
static
HRESULT
Create
(
IInterceptor
*
aInterceptor
STAUniquePtr
<
IDispatch
>
&
aTarget
IUnknown
*
*
aOutput
)
;
STDMETHODIMP
QueryInterface
(
REFIID
riid
void
*
*
ppv
)
override
;
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
;
STDMETHODIMP_
(
ULONG
)
Release
(
)
override
;
STDMETHODIMP
GetTypeInfoCount
(
__RPC__out
UINT
*
pctinfo
)
override
;
STDMETHODIMP
GetTypeInfo
(
UINT
iTInfo
LCID
lcid
__RPC__deref_out_opt
ITypeInfo
*
*
ppTInfo
)
override
;
STDMETHODIMP
GetIDsOfNames
(
__RPC__in
REFIID
riid
__RPC__in_ecount_full
(
cNames
)
LPOLESTR
*
rgszNames
__RPC__in_range
(
0
16384
)
UINT
cNames
LCID
lcid
__RPC__out_ecount_full
(
cNames
)
DISPID
*
rgDispId
)
override
;
STDMETHODIMP
Invoke
(
_In_
DISPID
dispIdMember
_In_
REFIID
riid
_In_
LCID
lcid
_In_
WORD
wFlags
_In_
DISPPARAMS
*
pDispParams
_Out_opt_
VARIANT
*
pVarResult
_Out_opt_
EXCEPINFO
*
pExcepInfo
_Out_opt_
UINT
*
puArgErr
)
override
;
private
:
DispatchForwarder
(
IInterceptor
*
aInterceptor
STAUniquePtr
<
IDispatch
>
&
aTarget
)
;
~
DispatchForwarder
(
)
;
private
:
ULONG
mRefCnt
;
RefPtr
<
IInterceptor
>
mInterceptor
;
STAUniquePtr
<
IDispatch
>
mTarget
;
RefPtr
<
ITypeInfo
>
mTypeInfo
;
RefPtr
<
IUnknown
>
mInterface
;
}
;
}
}
#
endif
