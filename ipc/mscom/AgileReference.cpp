#
include
"
mozilla
/
mscom
/
AgileReference
.
h
"
#
include
<
utility
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
DynamicallyLinkedFunctionPtr
.
h
"
#
include
"
mozilla
/
mscom
/
Utils
.
h
"
#
if
defined
(
MOZILLA_INTERNAL_API
)
#
include
"
nsDebug
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
endif
#
if
defined
(
__MINGW32__
)
enum
AgileReferenceOptions
{
AGILEREFERENCE_DEFAULT
=
0
AGILEREFERENCE_DELAYEDMARSHAL
=
1
}
;
HRESULT
WINAPI
RoGetAgileReference
(
AgileReferenceOptions
options
REFIID
riid
IUnknown
*
pUnk
IAgileReference
*
*
ppAgileReference
)
;
#
endif
namespace
mozilla
{
namespace
mscom
{
namespace
detail
{
GlobalInterfaceTableCookie
:
:
GlobalInterfaceTableCookie
(
IUnknown
*
aObject
REFIID
aIid
HRESULT
&
aOutHResult
)
:
mCookie
(
0
)
{
IGlobalInterfaceTable
*
git
=
ObtainGit
(
)
;
MOZ_ASSERT
(
git
)
;
if
(
!
git
)
{
aOutHResult
=
E_POINTER
;
return
;
}
aOutHResult
=
git
-
>
RegisterInterfaceInGlobal
(
aObject
aIid
&
mCookie
)
;
MOZ_ASSERT
(
SUCCEEDED
(
aOutHResult
)
)
;
}
GlobalInterfaceTableCookie
:
:
~
GlobalInterfaceTableCookie
(
)
{
IGlobalInterfaceTable
*
git
=
ObtainGit
(
)
;
MOZ_ASSERT
(
git
)
;
if
(
!
git
)
{
return
;
}
DebugOnly
<
HRESULT
>
hr
=
git
-
>
RevokeInterfaceFromGlobal
(
mCookie
)
;
#
if
defined
(
MOZILLA_INTERNAL_API
)
NS_WARNING_ASSERTION
(
SUCCEEDED
(
hr
)
nsPrintfCString
(
"
IGlobalInterfaceTable
:
:
RevokeInterfaceFromGlobal
failed
"
"
with
HRESULT
0x
%
08lX
"
(
(
HRESULT
)
hr
)
)
.
get
(
)
)
;
#
else
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
#
endif
mCookie
=
0
;
}
HRESULT
GlobalInterfaceTableCookie
:
:
GetInterface
(
REFIID
aIid
void
*
*
aOutInterface
)
const
{
IGlobalInterfaceTable
*
git
=
ObtainGit
(
)
;
MOZ_ASSERT
(
git
)
;
if
(
!
git
)
{
return
E_UNEXPECTED
;
}
MOZ_ASSERT
(
IsValid
(
)
)
;
return
git
-
>
GetInterfaceFromGlobal
(
mCookie
aIid
aOutInterface
)
;
}
IGlobalInterfaceTable
*
GlobalInterfaceTableCookie
:
:
ObtainGit
(
)
{
static
IGlobalInterfaceTable
*
sGit
=
[
]
(
)
-
>
IGlobalInterfaceTable
*
{
IGlobalInterfaceTable
*
result
=
nullptr
;
DebugOnly
<
HRESULT
>
hr
=
:
:
CoCreateInstance
(
CLSID_StdGlobalInterfaceTable
nullptr
CLSCTX_INPROC_SERVER
IID_IGlobalInterfaceTable
reinterpret_cast
<
void
*
*
>
(
&
result
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
return
result
;
}
(
)
;
return
sGit
;
}
}
AgileReference
:
:
AgileReference
(
)
:
mIid
(
)
mHResult
(
E_NOINTERFACE
)
{
}
AgileReference
:
:
AgileReference
(
REFIID
aIid
IUnknown
*
aObject
)
:
mIid
(
aIid
)
mHResult
(
E_UNEXPECTED
)
{
AssignInternal
(
aObject
)
;
}
AgileReference
:
:
AgileReference
(
AgileReference
&
&
aOther
)
:
mIid
(
aOther
.
mIid
)
mAgileRef
(
std
:
:
move
(
aOther
.
mAgileRef
)
)
mGitCookie
(
std
:
:
move
(
aOther
.
mGitCookie
)
)
mHResult
(
aOther
.
mHResult
)
{
aOther
.
mHResult
=
CO_E_RELEASED
;
}
void
AgileReference
:
:
Assign
(
REFIID
aIid
IUnknown
*
aObject
)
{
Clear
(
)
;
mIid
=
aIid
;
AssignInternal
(
aObject
)
;
}
void
AgileReference
:
:
AssignInternal
(
IUnknown
*
aObject
)
{
DebugOnly
<
IID
>
zeroIid
=
{
}
;
MOZ_ASSERT
(
mIid
!
=
zeroIid
)
;
static
const
StaticDynamicallyLinkedFunctionPtr
<
decltype
(
&
:
:
RoGetAgileReference
)
>
pRoGetAgileReference
(
L
"
ole32
.
dll
"
"
RoGetAgileReference
"
)
;
MOZ_ASSERT
(
aObject
)
;
if
(
pRoGetAgileReference
&
&
SUCCEEDED
(
mHResult
=
pRoGetAgileReference
(
AGILEREFERENCE_DEFAULT
mIid
aObject
getter_AddRefs
(
mAgileRef
)
)
)
)
{
return
;
}
mGitCookie
=
new
detail
:
:
GlobalInterfaceTableCookie
(
aObject
mIid
mHResult
)
;
MOZ_ASSERT
(
mGitCookie
-
>
IsValid
(
)
)
;
}
AgileReference
:
:
~
AgileReference
(
)
{
Clear
(
)
;
}
void
AgileReference
:
:
Clear
(
)
{
mIid
=
{
}
;
mAgileRef
=
nullptr
;
mGitCookie
=
nullptr
;
mHResult
=
E_NOINTERFACE
;
}
AgileReference
&
AgileReference
:
:
operator
=
(
const
AgileReference
&
aOther
)
{
Clear
(
)
;
mIid
=
aOther
.
mIid
;
mAgileRef
=
aOther
.
mAgileRef
;
mGitCookie
=
aOther
.
mGitCookie
;
mHResult
=
aOther
.
mHResult
;
return
*
this
;
}
AgileReference
&
AgileReference
:
:
operator
=
(
AgileReference
&
&
aOther
)
{
Clear
(
)
;
mIid
=
aOther
.
mIid
;
mAgileRef
=
std
:
:
move
(
aOther
.
mAgileRef
)
;
mGitCookie
=
std
:
:
move
(
aOther
.
mGitCookie
)
;
mHResult
=
aOther
.
mHResult
;
aOther
.
mHResult
=
CO_E_RELEASED
;
return
*
this
;
}
HRESULT
AgileReference
:
:
Resolve
(
REFIID
aIid
void
*
*
aOutInterface
)
const
{
MOZ_ASSERT
(
aOutInterface
)
;
MOZ_ASSERT
(
(
mAgileRef
|
|
mGitCookie
)
&
&
!
(
mAgileRef
&
&
mGitCookie
)
)
;
MOZ_ASSERT
(
IsCOMInitializedOnCurrentThread
(
)
)
;
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
*
aOutInterface
=
nullptr
;
if
(
mAgileRef
)
{
return
mAgileRef
-
>
Resolve
(
aIid
aOutInterface
)
;
}
if
(
!
mGitCookie
)
{
return
E_UNEXPECTED
;
}
RefPtr
<
IUnknown
>
originalInterface
;
HRESULT
hr
=
mGitCookie
-
>
GetInterface
(
mIid
getter_AddRefs
(
originalInterface
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
aIid
=
=
mIid
)
{
originalInterface
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
return
originalInterface
-
>
QueryInterface
(
aIid
aOutInterface
)
;
}
}
}
