#
include
"
mozilla
/
mscom
/
AgileReference
.
h
"
#
include
<
utility
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
mscom
/
Utils
.
h
"
#
if
defined
(
__MINGW32__
)
enum
AgileReferenceOptions
{
AGILEREFERENCE_DEFAULT
=
0
AGILEREFERENCE_DELAYEDMARSHAL
=
1
}
;
HRESULT
WINAPI
RoGetAgileReference
(
AgileReferenceOptions
options
REFIID
riid
IUnknown
*
pUnk
IAgileReference
*
*
ppAgileReference
)
;
#
include
"
mozilla
/
DynamicallyLinkedFunctionPtr
.
h
"
static
const
mozilla
:
:
StaticDynamicallyLinkedFunctionPtr
<
decltype
(
&
:
:
RoGetAgileReference
)
>
pRoGetAgileReference
(
L
"
ole32
.
dll
"
"
RoGetAgileReference
"
)
;
#
define
RoGetAgileReference
pRoGetAgileReference
#
endif
namespace
mozilla
:
:
mscom
:
:
detail
{
HRESULT
AgileReference_CreateImpl
(
RefPtr
<
IAgileReference
>
&
aRefPtr
REFIID
riid
IUnknown
*
aObject
)
{
MOZ_ASSERT
(
aObject
)
;
MOZ_ASSERT
(
IsCOMInitializedOnCurrentThread
(
)
)
;
return
:
:
RoGetAgileReference
(
AGILEREFERENCE_DEFAULT
riid
aObject
getter_AddRefs
(
aRefPtr
)
)
;
}
HRESULT
AgileReference_ResolveImpl
(
RefPtr
<
IAgileReference
>
const
&
aRefPtr
REFIID
riid
void
*
*
aOutInterface
)
{
MOZ_ASSERT
(
aRefPtr
)
;
MOZ_ASSERT
(
aOutInterface
)
;
MOZ_ASSERT
(
IsCOMInitializedOnCurrentThread
(
)
)
;
if
(
!
aRefPtr
|
|
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
*
aOutInterface
=
nullptr
;
return
aRefPtr
-
>
Resolve
(
riid
aOutInterface
)
;
}
}
