#
include
"
mozilla
/
mscom
/
AgileReference
.
h
"
#
include
"
DynamicallyLinkedFunctionPtr
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
if
NTDDI_VERSION
<
NTDDI_WINBLUE
enum
AgileReferenceOptions
{
AGILEREFERENCE_DEFAULT
=
0
AGILEREFERENCE_DELAYEDMARSHAL
=
1
}
;
HRESULT
WINAPI
RoGetAgileReference
(
AgileReferenceOptions
options
REFIID
riid
IUnknown
*
pUnk
IAgileReference
*
*
ppAgileReference
)
;
#
endif
namespace
mozilla
{
namespace
mscom
{
AgileReference
:
:
AgileReference
(
REFIID
aIid
IUnknown
*
aObject
)
:
mIid
(
aIid
)
mGitCookie
(
0
)
{
static
const
DynamicallyLinkedFunctionPtr
<
decltype
(
&
:
:
RoGetAgileReference
)
>
pRoGetAgileReference
(
L
"
ole32
.
dll
"
"
RoGetAgileReference
"
)
;
MOZ_ASSERT
(
aObject
)
;
if
(
pRoGetAgileReference
&
&
SUCCEEDED
(
pRoGetAgileReference
(
AGILEREFERENCE_DEFAULT
aIid
aObject
getter_AddRefs
(
mAgileRef
)
)
)
)
{
return
;
}
IGlobalInterfaceTable
*
git
=
ObtainGit
(
)
;
MOZ_ASSERT
(
git
)
;
if
(
!
git
)
{
return
;
}
DebugOnly
<
HRESULT
>
hr
=
git
-
>
RegisterInterfaceInGlobal
(
aObject
aIid
&
mGitCookie
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
}
AgileReference
:
:
AgileReference
(
AgileReference
&
&
aOther
)
:
mIid
(
aOther
.
mIid
)
mAgileRef
(
Move
(
aOther
.
mAgileRef
)
)
mGitCookie
(
aOther
.
mGitCookie
)
{
aOther
.
mGitCookie
=
0
;
}
AgileReference
:
:
~
AgileReference
(
)
{
if
(
!
mGitCookie
)
{
return
;
}
IGlobalInterfaceTable
*
git
=
ObtainGit
(
)
;
MOZ_ASSERT
(
git
)
;
if
(
!
git
)
{
return
;
}
DebugOnly
<
HRESULT
>
hr
=
git
-
>
RevokeInterfaceFromGlobal
(
mGitCookie
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
}
HRESULT
AgileReference
:
:
Resolve
(
REFIID
aIid
void
*
*
aOutInterface
)
{
MOZ_ASSERT
(
aOutInterface
)
;
MOZ_ASSERT
(
mAgileRef
|
|
mGitCookie
)
;
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
*
aOutInterface
=
nullptr
;
if
(
mAgileRef
)
{
return
mAgileRef
-
>
Resolve
(
aIid
aOutInterface
)
;
}
if
(
!
mGitCookie
)
{
return
E_UNEXPECTED
;
}
IGlobalInterfaceTable
*
git
=
ObtainGit
(
)
;
MOZ_ASSERT
(
git
)
;
if
(
!
git
)
{
return
E_UNEXPECTED
;
}
RefPtr
<
IUnknown
>
originalInterface
;
HRESULT
hr
=
git
-
>
GetInterfaceFromGlobal
(
mGitCookie
mIid
getter_AddRefs
(
originalInterface
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
aIid
=
=
mIid
)
{
originalInterface
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
return
originalInterface
-
>
QueryInterface
(
aIid
aOutInterface
)
;
}
IGlobalInterfaceTable
*
AgileReference
:
:
ObtainGit
(
)
{
static
IGlobalInterfaceTable
*
const
sGit
=
[
]
(
)
-
>
IGlobalInterfaceTable
*
const
{
IGlobalInterfaceTable
*
result
=
nullptr
;
DebugOnly
<
HRESULT
>
hr
=
:
:
CoCreateInstance
(
CLSID_StdGlobalInterfaceTable
nullptr
CLSCTX_INPROC_SERVER
IID_IGlobalInterfaceTable
reinterpret_cast
<
void
*
*
>
(
&
result
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
return
result
;
}
(
)
;
return
sGit
;
}
}
}
