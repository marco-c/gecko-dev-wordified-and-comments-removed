#
include
"
mozilla
/
mscom
/
AgileReference
.
h
"
#
include
<
utility
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
DynamicallyLinkedFunctionPtr
.
h
"
#
include
"
mozilla
/
mscom
/
Utils
.
h
"
#
if
defined
(
__MINGW32__
)
enum
AgileReferenceOptions
{
AGILEREFERENCE_DEFAULT
=
0
AGILEREFERENCE_DELAYEDMARSHAL
=
1
}
;
HRESULT
WINAPI
RoGetAgileReference
(
AgileReferenceOptions
options
REFIID
riid
IUnknown
*
pUnk
IAgileReference
*
*
ppAgileReference
)
;
#
include
"
mozilla
/
DynamicallyLinkedFunctionPtr
.
h
"
static
const
mozilla
:
:
StaticDynamicallyLinkedFunctionPtr
<
decltype
(
&
:
:
RoGetAgileReference
)
>
pRoGetAgileReference
(
L
"
ole32
.
dll
"
"
RoGetAgileReference
"
)
;
#
define
RoGetAgileReference
pRoGetAgileReference
#
endif
namespace
mozilla
:
:
mscom
{
AgileReference
:
:
AgileReference
(
)
:
mIid
(
)
mHResult
(
E_NOINTERFACE
)
{
}
AgileReference
:
:
AgileReference
(
REFIID
aIid
IUnknown
*
aObject
)
:
mIid
(
aIid
)
mHResult
(
E_UNEXPECTED
)
{
AssignInternal
(
aObject
)
;
}
AgileReference
:
:
AgileReference
(
AgileReference
&
&
aOther
)
noexcept
:
mIid
(
aOther
.
mIid
)
mAgileRef
(
std
:
:
move
(
aOther
.
mAgileRef
)
)
mHResult
(
aOther
.
mHResult
)
{
aOther
.
mHResult
=
CO_E_RELEASED
;
}
void
AgileReference
:
:
Assign
(
REFIID
aIid
IUnknown
*
aObject
)
{
Clear
(
)
;
mIid
=
aIid
;
AssignInternal
(
aObject
)
;
}
void
AgileReference
:
:
AssignInternal
(
IUnknown
*
aObject
)
{
DebugOnly
<
IID
>
zeroIid
=
{
}
;
MOZ_ASSERT
(
mIid
!
=
zeroIid
)
;
MOZ_ASSERT
(
aObject
)
;
mHResult
=
RoGetAgileReference
(
AGILEREFERENCE_DEFAULT
mIid
aObject
getter_AddRefs
(
mAgileRef
)
)
;
}
AgileReference
:
:
~
AgileReference
(
)
{
Clear
(
)
;
}
void
AgileReference
:
:
Clear
(
)
{
mIid
=
{
}
;
mAgileRef
=
nullptr
;
mHResult
=
E_NOINTERFACE
;
}
AgileReference
&
AgileReference
:
:
operator
=
(
const
AgileReference
&
aOther
)
{
Clear
(
)
;
mIid
=
aOther
.
mIid
;
mAgileRef
=
aOther
.
mAgileRef
;
mHResult
=
aOther
.
mHResult
;
return
*
this
;
}
AgileReference
&
AgileReference
:
:
operator
=
(
AgileReference
&
&
aOther
)
noexcept
{
Clear
(
)
;
mIid
=
aOther
.
mIid
;
mAgileRef
=
std
:
:
move
(
aOther
.
mAgileRef
)
;
mHResult
=
aOther
.
mHResult
;
aOther
.
mHResult
=
CO_E_RELEASED
;
return
*
this
;
}
HRESULT
AgileReference
:
:
Resolve
(
REFIID
aIid
void
*
*
aOutInterface
)
const
{
MOZ_ASSERT
(
aOutInterface
)
;
MOZ_ASSERT
(
mAgileRef
)
;
MOZ_ASSERT
(
IsCOMInitializedOnCurrentThread
(
)
)
;
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
*
aOutInterface
=
nullptr
;
if
(
mAgileRef
)
{
return
mAgileRef
-
>
Resolve
(
aIid
aOutInterface
)
;
}
return
E_NOINTERFACE
;
}
}
