#
include
"
Handler
.
h
"
#
include
"
Module
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
mscom
/
Objref
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
<
objbase
.
h
>
#
include
<
shlwapi
.
h
>
#
include
<
string
.
h
>
namespace
mozilla
{
namespace
mscom
{
Handler
:
:
Handler
(
IUnknown
*
aOuter
HRESULT
*
aResult
)
:
mRefCnt
(
0
)
mOuter
(
aOuter
)
mUnmarshal
(
nullptr
)
mHasPayload
(
false
)
{
MOZ_ASSERT
(
aResult
)
;
if
(
!
aOuter
)
{
*
aResult
=
E_INVALIDARG
;
return
;
}
StabilizedRefCount
<
ULONG
>
stabilizer
(
mRefCnt
)
;
*
aResult
=
:
:
CoGetStdMarshalEx
(
aOuter
SMEXF_HANDLER
getter_AddRefs
(
mInnerUnk
)
)
;
if
(
FAILED
(
*
aResult
)
)
{
return
;
}
*
aResult
=
mInnerUnk
-
>
QueryInterface
(
IID_IMarshal
(
void
*
*
)
&
mUnmarshal
)
;
if
(
FAILED
(
*
aResult
)
)
{
return
;
}
mUnmarshal
-
>
Release
(
)
;
}
HRESULT
Handler
:
:
InternalQueryInterface
(
REFIID
riid
void
*
*
ppv
)
{
if
(
!
ppv
)
{
return
E_INVALIDARG
;
}
if
(
riid
=
=
IID_IUnknown
)
{
RefPtr
<
IUnknown
>
punk
(
static_cast
<
IUnknown
*
>
(
&
mInternalUnknown
)
)
;
punk
.
forget
(
ppv
)
;
return
S_OK
;
}
if
(
riid
=
=
IID_IMarshal
)
{
RefPtr
<
IMarshal
>
ptr
(
this
)
;
ptr
.
forget
(
ppv
)
;
return
S_OK
;
}
HRESULT
hr
=
QueryHandlerInterface
(
mInnerUnk
riid
ppv
)
;
if
(
hr
=
=
S_FALSE
)
{
return
E_NOINTERFACE
;
}
if
(
hr
!
=
E_NOINTERFACE
)
{
return
hr
;
}
return
mInnerUnk
-
>
QueryInterface
(
riid
ppv
)
;
}
ULONG
Handler
:
:
InternalAddRef
(
)
{
if
(
!
mRefCnt
)
{
Module
:
:
Lock
(
)
;
}
return
+
+
mRefCnt
;
}
ULONG
Handler
:
:
InternalRelease
(
)
{
ULONG
newRefCnt
=
-
-
mRefCnt
;
if
(
newRefCnt
=
=
0
)
{
delete
this
;
Module
:
:
Unlock
(
)
;
}
return
newRefCnt
;
}
HRESULT
Handler
:
:
GetUnmarshalClass
(
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
CLSID
*
pCid
)
{
return
mUnmarshal
-
>
GetUnmarshalClass
(
MarshalAs
(
riid
)
pv
dwDestContext
pvDestContext
mshlflags
pCid
)
;
}
HRESULT
Handler
:
:
GetMarshalSizeMax
(
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
DWORD
*
pSize
)
{
if
(
!
pSize
)
{
return
E_INVALIDARG
;
}
*
pSize
=
0
;
RefPtr
<
IUnknown
>
unkToMarshal
;
HRESULT
hr
;
REFIID
marshalAs
=
MarshalAs
(
riid
)
;
if
(
marshalAs
=
=
riid
)
{
unkToMarshal
=
static_cast
<
IUnknown
*
>
(
pv
)
;
}
else
{
hr
=
mInnerUnk
-
>
QueryInterface
(
marshalAs
getter_AddRefs
(
unkToMarshal
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
}
hr
=
mUnmarshal
-
>
GetMarshalSizeMax
(
marshalAs
unkToMarshal
.
get
(
)
dwDestContext
pvDestContext
mshlflags
pSize
)
;
#
if
defined
(
MOZ_MSCOM_REMARSHAL_NO_HANDLER
)
return
hr
;
#
else
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
!
HasPayload
(
)
)
{
return
S_OK
;
}
DWORD
payloadSize
=
0
;
hr
=
GetHandlerPayloadSize
(
marshalAs
&
payloadSize
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
*
pSize
+
=
payloadSize
;
return
S_OK
;
#
endif
}
HRESULT
Handler
:
:
GetMarshalInterface
(
REFIID
aMarshalAsIid
NotNull
<
IUnknown
*
>
aProxy
NotNull
<
IID
*
>
aOutIid
NotNull
<
IUnknown
*
*
>
aOutUnk
)
{
*
aOutIid
=
aMarshalAsIid
;
return
aProxy
-
>
QueryInterface
(
aMarshalAsIid
reinterpret_cast
<
void
*
*
>
(
static_cast
<
IUnknown
*
*
>
(
aOutUnk
)
)
)
;
}
HRESULT
Handler
:
:
MarshalInterface
(
IStream
*
pStm
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
)
{
RefPtr
<
IUnknown
>
unkToMarshal
;
HRESULT
hr
;
#
if
defined
(
MOZ_MSCOM_REMARSHAL_NO_HANDLER
)
LARGE_INTEGER
seekTo
;
seekTo
.
QuadPart
=
0
;
ULARGE_INTEGER
objrefPos
;
hr
=
pStm
-
>
Seek
(
seekTo
STREAM_SEEK_CUR
&
objrefPos
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
#
endif
REFIID
marshalAs
=
MarshalAs
(
riid
)
;
IID
marshalOutAs
;
hr
=
GetMarshalInterface
(
marshalAs
WrapNotNull
<
IUnknown
*
>
(
mInnerUnk
)
WrapNotNull
(
&
marshalOutAs
)
WrapNotNull
<
IUnknown
*
*
>
(
getter_AddRefs
(
unkToMarshal
)
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
hr
=
mUnmarshal
-
>
MarshalInterface
(
pStm
marshalAs
unkToMarshal
.
get
(
)
dwDestContext
pvDestContext
mshlflags
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
#
if
defined
(
MOZ_MSCOM_REMARSHAL_NO_HANDLER
)
ULARGE_INTEGER
endPos
;
hr
=
pStm
-
>
Seek
(
seekTo
STREAM_SEEK_CUR
&
endPos
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
!
StripHandlerFromOBJREF
(
WrapNotNull
(
pStm
)
objrefPos
.
QuadPart
endPos
.
QuadPart
)
)
{
return
E_FAIL
;
}
if
(
!
SetIID
(
WrapNotNull
(
pStm
)
objrefPos
.
QuadPart
marshalOutAs
)
)
{
return
E_FAIL
;
}
return
S_OK
;
#
else
if
(
!
HasPayload
(
)
)
{
return
S_OK
;
}
return
WriteHandlerPayload
(
pStm
marshalAs
)
;
#
endif
}
HRESULT
Handler
:
:
UnmarshalInterface
(
IStream
*
pStm
REFIID
riid
void
*
*
ppv
)
{
REFIID
unmarshalAs
=
MarshalAs
(
riid
)
;
HRESULT
hr
=
mUnmarshal
-
>
UnmarshalInterface
(
pStm
unmarshalAs
ppv
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
mHasPayload
|
=
(
ReadHandlerPayload
(
pStm
unmarshalAs
)
=
=
S_OK
)
;
return
hr
;
}
HRESULT
Handler
:
:
ReleaseMarshalData
(
IStream
*
pStm
)
{
return
mUnmarshal
-
>
ReleaseMarshalData
(
pStm
)
;
}
HRESULT
Handler
:
:
DisconnectObject
(
DWORD
dwReserved
)
{
return
mUnmarshal
-
>
DisconnectObject
(
dwReserved
)
;
}
HRESULT
Handler
:
:
Unregister
(
REFCLSID
aClsid
)
{
return
Module
:
:
Deregister
(
aClsid
)
;
}
HRESULT
Handler
:
:
Register
(
REFCLSID
aClsid
const
bool
aMsixContainer
)
{
return
Module
:
:
Register
(
aClsid
Module
:
:
ThreadingModel
:
:
DedicatedUiThreadOnly
Module
:
:
ClassType
:
:
InprocHandler
nullptr
aMsixContainer
)
;
}
}
}
