#
include
"
Handler
.
h
"
#
include
"
Module
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
<
objbase
.
h
>
#
include
<
shlwapi
.
h
>
#
include
<
string
.
h
>
namespace
mozilla
{
namespace
mscom
{
Handler
:
:
Handler
(
IUnknown
*
aOuter
HRESULT
*
aResult
)
:
mRefCnt
(
0
)
mOuter
(
aOuter
)
mUnmarshal
(
nullptr
)
mHasPayload
(
false
)
{
MOZ_ASSERT
(
aResult
)
;
if
(
!
aOuter
)
{
*
aResult
=
E_INVALIDARG
;
return
;
}
StabilizedRefCount
<
ULONG
>
stabilizer
(
mRefCnt
)
;
*
aResult
=
:
:
CoGetStdMarshalEx
(
aOuter
SMEXF_HANDLER
getter_AddRefs
(
mInnerUnk
)
)
;
if
(
FAILED
(
*
aResult
)
)
{
return
;
}
*
aResult
=
mInnerUnk
-
>
QueryInterface
(
IID_IMarshal
(
void
*
*
)
&
mUnmarshal
)
;
if
(
FAILED
(
*
aResult
)
)
{
return
;
}
mUnmarshal
-
>
Release
(
)
;
}
HRESULT
Handler
:
:
InternalQueryInterface
(
REFIID
riid
void
*
*
ppv
)
{
if
(
!
ppv
)
{
return
E_INVALIDARG
;
}
if
(
riid
=
=
IID_IUnknown
)
{
RefPtr
<
IUnknown
>
punk
(
static_cast
<
IUnknown
*
>
(
&
mInternalUnknown
)
)
;
punk
.
forget
(
ppv
)
;
return
S_OK
;
}
if
(
riid
=
=
IID_IMarshal
)
{
RefPtr
<
IMarshal
>
ptr
(
this
)
;
ptr
.
forget
(
ppv
)
;
return
S_OK
;
}
HRESULT
hr
=
QueryHandlerInterface
(
mInnerUnk
riid
ppv
)
;
if
(
hr
!
=
E_NOINTERFACE
)
{
return
hr
;
}
return
mInnerUnk
-
>
QueryInterface
(
riid
ppv
)
;
}
ULONG
Handler
:
:
InternalAddRef
(
)
{
if
(
!
mRefCnt
)
{
Module
:
:
Lock
(
)
;
}
return
+
+
mRefCnt
;
}
ULONG
Handler
:
:
InternalRelease
(
)
{
ULONG
newRefCnt
=
-
-
mRefCnt
;
if
(
newRefCnt
=
=
0
)
{
delete
this
;
Module
:
:
Unlock
(
)
;
}
return
newRefCnt
;
}
HRESULT
Handler
:
:
GetUnmarshalClass
(
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
CLSID
*
pCid
)
{
return
mUnmarshal
-
>
GetUnmarshalClass
(
riid
pv
dwDestContext
pvDestContext
mshlflags
pCid
)
;
}
HRESULT
Handler
:
:
GetMarshalSizeMax
(
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
DWORD
*
pSize
)
{
if
(
!
pSize
)
{
return
E_INVALIDARG
;
}
*
pSize
=
0
;
RefPtr
<
IUnknown
>
unkToMarshal
;
HRESULT
hr
;
REFIID
marshalAs
=
MarshalAs
(
riid
)
;
if
(
marshalAs
=
=
riid
)
{
unkToMarshal
=
static_cast
<
IUnknown
*
>
(
pv
)
;
}
else
{
hr
=
mInnerUnk
-
>
QueryInterface
(
marshalAs
getter_AddRefs
(
unkToMarshal
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
}
hr
=
mUnmarshal
-
>
GetMarshalSizeMax
(
marshalAs
unkToMarshal
.
get
(
)
dwDestContext
pvDestContext
mshlflags
pSize
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
!
HasPayload
(
)
)
{
return
S_OK
;
}
DWORD
payloadSize
=
0
;
hr
=
GetHandlerPayloadSize
(
marshalAs
&
payloadSize
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
*
pSize
+
=
payloadSize
;
return
S_OK
;
}
HRESULT
Handler
:
:
MarshalInterface
(
IStream
*
pStm
REFIID
riid
void
*
pv
DWORD
dwDestContext
void
*
pvDestContext
DWORD
mshlflags
)
{
RefPtr
<
IUnknown
>
unkToMarshal
;
HRESULT
hr
;
REFIID
marshalAs
=
MarshalAs
(
riid
)
;
if
(
marshalAs
=
=
riid
)
{
unkToMarshal
=
static_cast
<
IUnknown
*
>
(
pv
)
;
}
else
{
hr
=
mInnerUnk
-
>
QueryInterface
(
marshalAs
getter_AddRefs
(
unkToMarshal
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
}
hr
=
mUnmarshal
-
>
MarshalInterface
(
pStm
marshalAs
unkToMarshal
.
get
(
)
dwDestContext
pvDestContext
mshlflags
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
!
HasPayload
(
)
)
{
return
S_OK
;
}
return
WriteHandlerPayload
(
pStm
marshalAs
)
;
}
HRESULT
Handler
:
:
UnmarshalInterface
(
IStream
*
pStm
REFIID
riid
void
*
*
ppv
)
{
REFIID
unmarshalAs
=
MarshalAs
(
riid
)
;
HRESULT
hr
=
mUnmarshal
-
>
UnmarshalInterface
(
pStm
unmarshalAs
ppv
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
hr
=
ReadHandlerPayload
(
pStm
unmarshalAs
)
;
mHasPayload
|
=
(
hr
=
=
S_OK
)
;
return
SUCCEEDED
(
hr
)
?
S_OK
:
hr
;
}
HRESULT
Handler
:
:
ReleaseMarshalData
(
IStream
*
pStm
)
{
return
mUnmarshal
-
>
ReleaseMarshalData
(
pStm
)
;
}
HRESULT
Handler
:
:
DisconnectObject
(
DWORD
dwReserved
)
{
return
mUnmarshal
-
>
DisconnectObject
(
dwReserved
)
;
}
template
<
size_t
N
>
static
HRESULT
BuildClsidPath
(
wchar_t
(
&
aPath
)
[
N
]
REFCLSID
aClsid
)
{
const
wchar_t
kClsid
[
]
=
{
L
'
C
'
L
'
L
'
L
'
S
'
L
'
I
'
L
'
D
'
L
'
\
\
'
}
;
const
size_t
kReqdGuidLen
=
39
;
static_assert
(
N
>
=
kReqdGuidLen
+
mozilla
:
:
ArrayLength
(
kClsid
)
"
aPath
array
is
too
short
"
)
;
if
(
wcsncpy_s
(
aPath
kClsid
mozilla
:
:
ArrayLength
(
kClsid
)
)
)
{
return
E_INVALIDARG
;
}
int
guidConversionResult
=
StringFromGUID2
(
aClsid
&
aPath
[
mozilla
:
:
ArrayLength
(
kClsid
)
]
N
-
mozilla
:
:
ArrayLength
(
kClsid
)
)
;
if
(
!
guidConversionResult
)
{
return
E_INVALIDARG
;
}
return
S_OK
;
}
HRESULT
Handler
:
:
Unregister
(
REFCLSID
aClsid
)
{
wchar_t
path
[
256
]
=
{
}
;
HRESULT
hr
=
BuildClsidPath
(
path
aClsid
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
hr
=
HRESULT_FROM_WIN32
(
SHDeleteKey
(
HKEY_CLASSES_ROOT
path
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
return
S_OK
;
}
HRESULT
Handler
:
:
Register
(
REFCLSID
aClsid
)
{
wchar_t
path
[
256
]
=
{
}
;
HRESULT
hr
=
BuildClsidPath
(
path
aClsid
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
HKEY
rawClsidKey
;
DWORD
disposition
;
LONG
result
=
RegCreateKeyEx
(
HKEY_CLASSES_ROOT
path
0
nullptr
REG_OPTION_NON_VOLATILE
KEY_ALL_ACCESS
nullptr
&
rawClsidKey
&
disposition
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
return
HRESULT_FROM_WIN32
(
result
)
;
}
nsAutoRegKey
clsidKey
(
rawClsidKey
)
;
if
(
wcscat_s
(
path
L
"
\
\
InprocHandler32
"
)
)
{
return
E_UNEXPECTED
;
}
HKEY
rawInprocHandlerKey
;
result
=
RegCreateKeyEx
(
HKEY_CLASSES_ROOT
path
0
nullptr
REG_OPTION_NON_VOLATILE
KEY_ALL_ACCESS
nullptr
&
rawInprocHandlerKey
&
disposition
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
Unregister
(
aClsid
)
;
return
HRESULT_FROM_WIN32
(
result
)
;
}
nsAutoRegKey
inprocHandlerKey
(
rawInprocHandlerKey
)
;
wchar_t
absLibPath
[
MAX_PATH
+
1
]
=
{
}
;
HMODULE
thisModule
;
if
(
!
GetModuleHandleEx
(
GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS
|
GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
reinterpret_cast
<
LPCTSTR
>
(
&
Handler
:
:
Register
)
&
thisModule
)
)
{
return
HRESULT_FROM_WIN32
(
GetLastError
(
)
)
;
}
DWORD
size
=
GetModuleFileName
(
thisModule
absLibPath
mozilla
:
:
ArrayLength
(
absLibPath
)
)
;
if
(
!
size
|
|
(
size
=
=
mozilla
:
:
ArrayLength
(
absLibPath
)
&
&
GetLastError
(
)
=
=
ERROR_INSUFFICIENT_BUFFER
)
)
{
DWORD
lastError
=
GetLastError
(
)
;
Unregister
(
aClsid
)
;
return
HRESULT_FROM_WIN32
(
lastError
)
;
}
result
=
RegSetValueEx
(
inprocHandlerKey
L
"
"
0
REG_EXPAND_SZ
reinterpret_cast
<
const
BYTE
*
>
(
absLibPath
)
sizeof
(
absLibPath
)
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
Unregister
(
aClsid
)
;
return
HRESULT_FROM_WIN32
(
result
)
;
}
const
wchar_t
kApartment
[
]
=
L
"
Apartment
"
;
result
=
RegSetValueEx
(
inprocHandlerKey
L
"
ThreadingModel
"
0
REG_SZ
reinterpret_cast
<
const
BYTE
*
>
(
kApartment
)
sizeof
(
kApartment
)
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
Unregister
(
aClsid
)
;
return
HRESULT_FROM_WIN32
(
result
)
;
}
return
S_OK
;
}
}
}
