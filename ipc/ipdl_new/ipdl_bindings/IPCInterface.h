#
ifndef
dom_base_ipdl_bindings_ipcinterface_h
#
define
dom_base_ipdl_bindings_ipcinterface_h
#
include
<
functional
>
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
class
IPDL
;
}
namespace
ipdl
{
class
IPDLProtocolInstance
;
enum
class
IPDLSide
:
bool
;
namespace
ipc
{
class
IPCInterface
{
public
:
typedef
JS
:
:
MutableHandleValue
OutObject
;
typedef
JS
:
:
HandleValueArray
InArgs
;
typedef
MozPromise
<
JS
:
:
Value
nsCString
true
>
AsyncMessagePromise
;
explicit
IPCInterface
(
dom
:
:
IPDL
*
aIPDL
)
:
mIPDL
(
aIPDL
)
{
}
virtual
~
IPCInterface
(
)
=
default
;
virtual
RefPtr
<
AsyncMessagePromise
>
SendAsyncMessage
(
JSContext
*
aCx
const
nsCString
&
aProtocolName
const
uint32_t
&
aChannelId
const
nsCString
&
aMessageName
const
InArgs
&
aArgs
)
=
0
;
virtual
bool
SendSyncMessage
(
JSContext
*
aCx
const
nsCString
&
aProtocolName
const
uint32_t
&
aChannelId
const
nsCString
&
aMessageName
const
InArgs
&
aArgs
OutObject
aRet
)
=
0
;
virtual
bool
SendIntrMessage
(
JSContext
*
aCx
const
nsCString
&
aProtocolName
const
uint32_t
&
aChannelId
const
nsCString
&
aMessageName
const
InArgs
&
aArgs
OutObject
aRet
)
=
0
;
virtual
void
SetIPDLInstance
(
const
uint32_t
&
aChannelId
const
nsCString
&
aProtocolName
IPDLProtocolInstance
*
aInstance
)
{
mProtocolInstances
.
GetOrInsert
(
aProtocolName
)
.
GetOrInsert
(
aChannelId
)
=
aInstance
;
}
virtual
void
RemoveIPDLInstance
(
const
uint32_t
&
aChannelId
const
nsCString
&
aProtocolName
)
{
mProtocolInstances
.
GetOrInsert
(
aProtocolName
)
.
Remove
(
aChannelId
)
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvMessage
(
const
nsCString
&
aProtocolName
const
uint32_t
&
aChannelId
const
nsCString
&
aMessage
const
dom
:
:
ClonedMessageData
&
aData
nsTArray
<
dom
:
:
ipc
:
:
StructuredCloneData
>
*
aReturnData
)
=
0
;
protected
:
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvMessageCommon
(
mozilla
:
:
ipc
:
:
IProtocol
*
aActor
IPDLSide
aSide
const
nsCString
&
aProtocolName
const
uint32_t
&
aChannelId
const
nsCString
&
aMessage
const
dom
:
:
ClonedMessageData
&
aData
nsTArray
<
dom
:
:
ipc
:
:
StructuredCloneData
>
*
aReturnData
)
;
virtual
JSObject
*
GetDestinationObject
(
const
nsCString
&
aProtocolName
const
uint32_t
&
aChannelId
)
;
dom
:
:
IPDL
*
MOZ_NON_OWNING_REF
mIPDL
;
nsDataHashtable
<
nsCStringHashKey
nsDataHashtable
<
nsUint32HashKey
IPDLProtocolInstance
*
>
>
mProtocolInstances
;
}
;
}
}
}
#
endif
