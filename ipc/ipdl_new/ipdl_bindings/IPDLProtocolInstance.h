#
ifndef
dom_base_ipdl_bindings_IPDLProtocolInstance_h
#
define
dom_base_ipdl_bindings_IPDLProtocolInstance_h
#
include
"
jsapi
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
namespace
mozilla
{
namespace
dom
{
class
IPDL
;
}
namespace
ipdl
{
class
IPDLProtocol
;
namespace
ipc
{
class
IPCInterface
;
}
namespace
ffi
{
struct
AST
;
struct
Union
;
struct
Struct
;
struct
NamedProtocol
;
struct
MessageDecl
;
struct
TranslationUnit
;
struct
Param
;
struct
TypeSpec
;
struct
QualifiedId
;
struct
Namespace
;
}
class
IPDLProtocolInstance
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
IPDLProtocolInstance
)
IPDLProtocolInstance
(
ipc
:
:
IPCInterface
*
aIPCInterface
uint32_t
aChannelId
IPDLProtocol
*
aIPDLProtocol
JS
:
:
HandleObject
aInstanceObject
)
;
JSObject
*
GetInstanceObject
(
)
;
uint32_t
ChannelId
(
)
{
return
mChannelId
;
}
;
bool
SendConstructor
(
JSContext
*
aCx
JS
:
:
HandleObject
aThisObj
const
nsCString
&
aFuncName
JS
:
:
CallArgs
aArgs
)
;
bool
SendDelete
(
JSContext
*
aCx
const
nsCString
&
aFuncName
JS
:
:
CallArgs
aArgs
)
;
bool
SendMessage
(
JSContext
*
aCx
const
nsCString
&
aFuncName
JS
:
:
CallArgs
aArgs
JS
:
:
HandleObject
aReturnOverride
=
nullptr
)
;
JS
:
:
Value
SendAsyncMessage
(
JSContext
*
aCx
const
nsCString
&
aFuncName
const
JS
:
:
HandleValueArray
&
aArgArray
JS
:
:
HandleObject
aReturnOverride
=
nullptr
)
;
bool
SendSyncMessage
(
JSContext
*
aCx
const
nsCString
&
aFuncName
const
JS
:
:
HandleValueArray
&
aArgArray
JS
:
:
MutableHandleValue
aRet
)
;
bool
SendIntrMessage
(
JSContext
*
aCx
const
nsCString
&
aFuncName
const
JS
:
:
HandleValueArray
&
aArgArray
JS
:
:
MutableHandleValue
aRet
)
;
bool
RecvMessage
(
JSContext
*
aCx
const
nsCString
&
aMessageName
const
JS
:
:
HandleValueArray
&
aArgArray
JS
:
:
MutableHandleValue
aRet
)
;
void
SetIPCInterface
(
ipc
:
:
IPCInterface
*
aIPCInterface
)
;
protected
:
virtual
~
IPDLProtocolInstance
(
)
;
bool
IsConstructing
(
)
{
return
mConstructing
;
}
bool
CheckIsAvailable
(
JSContext
*
aCx
)
{
if
(
IsConstructing
(
)
)
{
JS_ReportErrorUTF8
(
aCx
"
Protocol
is
constructing
cannot
be
used
yet
.
"
)
;
return
false
;
}
return
true
;
}
ipc
:
:
IPCInterface
*
MOZ_NON_OWNING_REF
mIPCInterface
;
uint32_t
mChannelId
;
IPDLProtocol
*
MOZ_NON_OWNING_REF
mIPDLProtocol
;
JS
:
:
Heap
<
JSObject
*
>
mInstanceObject
;
JS
:
:
Heap
<
JSObject
*
>
mAsyncReturnOverride
;
bool
mConstructing
;
}
;
}
}
#
endif
