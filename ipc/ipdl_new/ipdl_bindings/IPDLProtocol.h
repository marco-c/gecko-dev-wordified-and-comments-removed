#
ifndef
dom_base_ipdl_bindings_IPDLProtocol_h
#
define
dom_base_ipdl_bindings_IPDLProtocol_h
#
include
"
jsapi
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
namespace
dom
{
class
IPDL
;
}
namespace
ipdl
{
class
IPDLProtocolInstance
;
namespace
ipc
{
class
IPCInterface
;
}
namespace
ffi
{
struct
AST
;
struct
Union
;
struct
Struct
;
struct
NamedProtocol
;
struct
MessageDecl
;
struct
TranslationUnit
;
struct
Param
;
struct
TypeSpec
;
struct
QualifiedId
;
struct
Namespace
;
}
enum
class
IPDLSide
:
bool
{
Parent
Child
}
;
class
IPDLProtocol
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
IPDLProtocol
)
struct
ASTDeletePolicy
{
void
operator
(
)
(
const
mozilla
:
:
ipdl
:
:
ffi
:
:
AST
*
aASTPtr
)
;
}
;
IPDLProtocol
(
dom
:
:
IPDL
*
aIPDL
IPDLSide
aSide
const
nsACString
&
aIPDLFile
nsIGlobalObject
*
aGlobal
JS
:
:
HandleObject
aParent
JSContext
*
aCx
)
;
JSObject
*
GetProtocolClassConstructor
(
)
;
uint32_t
RegisterExternalInstance
(
)
;
nsCString
GetProtocolName
(
)
;
IPDLSide
GetSide
(
)
{
return
mSide
;
}
const
ffi
:
:
MessageDecl
*
GetMessageDecl
(
const
nsACString
&
aName
)
{
return
mMessageTable
.
Get
(
aName
)
;
}
bool
CheckParamTypeSpec
(
JSContext
*
aCx
JS
:
:
HandleValue
aJSVal
ffi
:
:
Param
aParam
)
;
nsIGlobalObject
*
GetGlobal
(
)
{
return
mGlobal
;
}
void
RemoveInstance
(
IPDLProtocolInstance
*
instance
)
;
static
nsCString
GetSidedProtocolName
(
const
nsCString
&
aProtocolName
IPDLSide
aSide
)
{
return
aProtocolName
+
(
aSide
=
=
IPDLSide
:
:
Parent
?
NS_LITERAL_CSTRING
(
"
Parent
"
)
:
NS_LITERAL_CSTRING
(
"
Child
"
)
)
;
}
static
nsCString
JoinQualifiedId
(
const
ffi
:
:
QualifiedId
qid
)
;
static
nsCString
JoinNamespace
(
const
ffi
:
:
Namespace
ns
)
;
protected
:
IPDLSide
mSide
;
UniquePtr
<
const
ffi
:
:
AST
ASTDeletePolicy
>
mAST
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
JS
:
:
Heap
<
JSObject
*
>
mConstructorObj
;
JS
:
:
Heap
<
JSObject
*
>
mProtoObj
;
JSClass
mProtocolClass
;
nsCString
mProtocolName
;
nsCString
mSidedProtocolName
;
dom
:
:
IPDL
*
MOZ_NON_OWNING_REF
mIPDL
;
typedef
nsDataHashtable
<
nsCStringHashKey
const
ffi
:
:
MessageDecl
*
>
MessageTable
;
typedef
nsDataHashtable
<
nsCStringHashKey
const
ffi
:
:
Struct
*
>
StructTable
;
typedef
nsDataHashtable
<
nsCStringHashKey
const
ffi
:
:
Union
*
>
UnionTable
;
typedef
nsDataHashtable
<
nsCStringHashKey
const
ffi
:
:
NamedProtocol
*
>
ProtocolTable
;
typedef
nsTHashtable
<
nsRefPtrHashKey
<
IPDLProtocolInstance
>
>
InstanceList
;
InstanceList
mInstances
;
uint32_t
mNextProtocolInstanceChannelId
;
MessageTable
mMessageTable
;
StructTable
mStructTable
;
UnionTable
mUnionTable
;
ProtocolTable
mProtocolTable
;
virtual
~
IPDLProtocol
(
)
;
void
BuildNameLookupTables
(
)
;
JSClass
&
GetProtocolClass
(
)
;
const
ffi
:
:
TranslationUnit
*
GetMainTU
(
)
;
bool
CheckTypeSpec
(
JSContext
*
cx
JS
:
:
HandleValue
jsVal
ffi
:
:
TypeSpec
typeSpec
)
;
bool
CheckType
(
JSContext
*
cx
JS
:
:
HandleValue
jsVal
ffi
:
:
QualifiedId
type
)
;
bool
CheckProtocolType
(
JSContext
*
cx
JS
:
:
HandleValue
jsVal
ffi
:
:
QualifiedId
type
)
;
bool
CheckStructType
(
JSContext
*
cx
JS
:
:
HandleValue
jsVal
ffi
:
:
QualifiedId
type
)
;
bool
CheckUnionType
(
JSContext
*
cx
JS
:
:
HandleValue
jsVal
ffi
:
:
QualifiedId
type
)
;
static
bool
CheckBuiltinType
(
JSContext
*
cx
JS
:
:
HandleValue
jsVal
ffi
:
:
QualifiedId
type
)
;
static
bool
SendMessageDispatch
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
bool
SendConstructorDispatch
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
bool
SendDeleteDispatch
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
bool
Constructor
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
bool
RecvDelete
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
bool
RecvConstructor
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
bool
AbstractRecvMessage
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
bool
AbstractAlloc
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
constexpr
JSClassOps
sIPDLJSClassOps
=
{
}
;
}
;
}
}
#
endif
