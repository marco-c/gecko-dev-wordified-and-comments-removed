#
ifndef
ipdl_ffi_generated_h
#
define
ipdl_ffi_generated_h
#
include
<
nsTArray
.
h
>
#
include
<
nsString
.
h
>
#
include
<
cstdint
>
#
include
<
cstdlib
>
namespace
mozilla
{
namespace
ipdl
{
namespace
ffi
{
enum
class
Compress
{
None
Enabled
All
}
;
enum
class
CxxTypeKind
{
Struct
Class
}
;
enum
class
Direction
{
ToParent
ToChild
ToParentOrChild
}
;
enum
class
FileType
{
Protocol
Header
}
;
enum
class
Nesting
{
None
InsideSync
InsideCpow
}
;
enum
class
Priority
{
Normal
High
Input
}
;
enum
class
SendSemantics
{
Async
Sync
Intr
}
;
struct
AST
;
struct
Location
{
nsCString
file_name
;
uintptr_t
lineno
;
uintptr_t
colno
;
}
;
struct
Identifier
{
nsCString
id
;
Location
loc
;
}
;
struct
Namespace
{
Identifier
name
;
nsTArray
<
nsCString
>
namespaces
;
}
;
using
TUId
=
int32_t
;
struct
QualifiedId
{
Identifier
base_id
;
nsTArray
<
nsCString
>
quals
;
}
;
struct
TypeSpec
{
QualifiedId
spec
;
bool
array
;
bool
nullable
;
}
;
struct
UsingStmt
{
TypeSpec
cxx_type
;
nsCString
header
;
Maybe
<
CxxTypeKind
>
kind
;
bool
refcounted
;
}
;
struct
StructField
{
TypeSpec
type_spec
;
Identifier
name
;
}
;
struct
Struct
{
Namespace
ns
;
nsTArray
<
StructField
>
fields
;
}
;
struct
Union
{
Namespace
ns
;
nsTArray
<
TypeSpec
>
types
;
}
;
struct
Param
{
Identifier
name
;
TypeSpec
type_spec
;
}
;
struct
MessageDecl
{
Identifier
name
;
SendSemantics
send_semantics
;
Nesting
nested
;
Priority
prio
;
Direction
direction
;
nsTArray
<
Param
>
in_params
;
nsTArray
<
Param
>
out_params
;
Compress
compress
;
bool
verify
;
}
;
struct
Protocol
{
SendSemantics
send_semantics
;
Nesting
nested
;
nsTArray
<
Identifier
>
managers
;
nsTArray
<
Identifier
>
manages
;
nsTArray
<
MessageDecl
>
messages
;
}
;
struct
NamedProtocol
{
Namespace
ns
;
Protocol
protocol
;
}
;
struct
TranslationUnit
{
Namespace
ns
;
FileType
file_type
;
nsCString
file_name
;
nsTArray
<
nsCString
>
cxx_includes
;
nsTArray
<
TUId
>
includes
;
nsTArray
<
UsingStmt
>
using_stmt
;
nsTArray
<
Struct
>
structs
;
nsTArray
<
Union
>
unions
;
Maybe
<
NamedProtocol
>
protocol
;
}
;
extern
"
C
"
{
const
TranslationUnit
*
ipdl_ast_get_tu
(
const
AST
*
ast
TUId
tuid
)
;
TUId
ipdl_ast_main_tuid
(
const
AST
*
ast
)
;
void
ipdl_free_ast
(
const
AST
*
ast
)
;
const
AST
*
ipdl_parse_file
(
const
nsACString
*
ipdl_file
nsACString
*
error_string
uint8_t
(
*
source_string_loader
)
(
const
nsACString
*
nsACString
*
)
uint8_t
(
*
resolve_relative_path
)
(
const
nsACString
*
const
nsACString
*
nsACString
*
)
uint8_t
(
*
equals
)
(
const
nsACString
*
const
nsACString
*
)
)
;
}
}
}
}
#
endif
