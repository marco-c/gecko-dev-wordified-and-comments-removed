#
ifndef
dom_base_ipdl_bindings_pcontentparentipcinterface_h
#
define
dom_base_ipdl_bindings_pcontentparentipcinterface_h
#
include
"
IPCInterface
.
h
"
namespace
mozilla
{
namespace
dom
{
class
IPDL
;
class
ContentParent
;
namespace
ipc
{
class
StructuredCloneData
;
}
}
namespace
ipdl
{
namespace
ipc
{
class
PContentParentIPCInterface
:
public
IPCInterface
{
public
:
explicit
PContentParentIPCInterface
(
dom
:
:
IPDL
*
aIPDL
dom
:
:
ContentParent
*
aCp
)
;
virtual
~
PContentParentIPCInterface
(
)
=
default
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvMessage
(
const
nsCString
&
aProtocolName
const
uint32_t
&
aChannelId
const
nsCString
&
aMessage
const
dom
:
:
ClonedMessageData
&
aData
nsTArray
<
dom
:
:
ipc
:
:
StructuredCloneData
>
*
aReturnData
)
override
;
virtual
RefPtr
<
AsyncMessagePromise
>
SendAsyncMessage
(
JSContext
*
aCx
const
nsCString
&
aProtocolName
const
uint32_t
&
aChannelId
const
nsCString
&
aMessageName
const
InArgs
&
aArgs
)
override
;
virtual
bool
SendSyncMessage
(
JSContext
*
aCx
const
nsCString
&
aProtocolName
const
uint32_t
&
aChannelId
const
nsCString
&
aMessageName
const
InArgs
&
aArgs
OutObject
aRet
)
override
{
MOZ_CRASH
(
"
Unimplemented
"
)
;
aRet
.
setUndefined
(
)
;
return
false
;
}
virtual
bool
SendIntrMessage
(
JSContext
*
aCx
const
nsCString
&
aProtocolName
const
uint32_t
&
aChannelId
const
nsCString
&
aMessageName
const
InArgs
&
aArgs
OutObject
aRet
)
override
{
MOZ_CRASH
(
"
Unimplemented
"
)
;
aRet
.
setUndefined
(
)
;
return
false
;
}
protected
:
dom
:
:
ContentParent
*
mCp
;
}
;
}
}
}
#
endif
