#
include
"
gtest
/
gtest
.
h
"
#
include
"
base
/
shared_memory
.
h
"
#
include
"
base
/
process_util
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
endif
namespace
mozilla
{
TEST
(
IPCSharedMemory
FreezeAndMapRW
)
{
base
:
:
SharedMemory
shm
;
ASSERT_TRUE
(
shm
.
CreateFreezeable
(
1
)
)
;
ASSERT_TRUE
(
shm
.
Map
(
1
)
)
;
auto
mem
=
reinterpret_cast
<
char
*
>
(
shm
.
memory
(
)
)
;
ASSERT_TRUE
(
mem
)
;
*
mem
=
'
A
'
;
ASSERT_TRUE
(
shm
.
Freeze
(
)
)
;
ASSERT_FALSE
(
shm
.
memory
(
)
)
;
auto
handle
=
base
:
:
SharedMemory
:
:
NULLHandle
(
)
;
ASSERT_TRUE
(
shm
.
GiveToProcess
(
base
:
:
GetCurrentProcId
(
)
&
handle
)
)
;
ASSERT_TRUE
(
shm
.
IsHandleValid
(
handle
)
)
;
ASSERT_FALSE
(
shm
.
IsValid
(
)
)
;
ASSERT_TRUE
(
shm
.
SetHandle
(
handle
false
)
)
;
ASSERT_TRUE
(
shm
.
IsValid
(
)
)
;
EXPECT_FALSE
(
shm
.
Map
(
1
)
)
;
}
TEST
(
IPCSharedMemory
FreezeAndReprotect
)
{
base
:
:
SharedMemory
shm
;
ASSERT_TRUE
(
shm
.
CreateFreezeable
(
1
)
)
;
ASSERT_TRUE
(
shm
.
Map
(
1
)
)
;
auto
mem
=
reinterpret_cast
<
char
*
>
(
shm
.
memory
(
)
)
;
ASSERT_TRUE
(
mem
)
;
*
mem
=
'
A
'
;
ASSERT_TRUE
(
shm
.
Freeze
(
)
)
;
ASSERT_FALSE
(
shm
.
memory
(
)
)
;
ASSERT_TRUE
(
shm
.
Map
(
1
)
)
;
mem
=
reinterpret_cast
<
char
*
>
(
shm
.
memory
(
)
)
;
ASSERT_EQ
(
*
mem
'
A
'
)
;
EXPECT_FALSE
(
ipc
:
:
SharedMemory
:
:
SystemProtectFallible
(
mem
1
ipc
:
:
SharedMemory
:
:
RightsReadWrite
)
)
;
}
#
ifndef
XP_WIN
TEST
(
IPCSharedMemory
Reprotect
)
{
base
:
:
SharedMemory
shm
;
ASSERT_TRUE
(
shm
.
CreateFreezeable
(
1
)
)
;
ASSERT_TRUE
(
shm
.
Map
(
1
)
)
;
auto
mem
=
reinterpret_cast
<
char
*
>
(
shm
.
memory
(
)
)
;
ASSERT_TRUE
(
mem
)
;
*
mem
=
'
A
'
;
auto
handle
=
base
:
:
SharedMemory
:
:
NULLHandle
(
)
;
ASSERT_TRUE
(
shm
.
GiveToProcess
(
base
:
:
GetCurrentProcId
(
)
&
handle
)
)
;
ASSERT_TRUE
(
shm
.
IsHandleValid
(
handle
)
)
;
ASSERT_FALSE
(
shm
.
IsValid
(
)
)
;
ASSERT_TRUE
(
shm
.
SetHandle
(
handle
true
)
)
;
ASSERT_TRUE
(
shm
.
IsValid
(
)
)
;
ASSERT_TRUE
(
shm
.
Map
(
1
)
)
;
mem
=
reinterpret_cast
<
char
*
>
(
shm
.
memory
(
)
)
;
ASSERT_EQ
(
*
mem
'
A
'
)
;
EXPECT_TRUE
(
ipc
:
:
SharedMemory
:
:
SystemProtectFallible
(
mem
1
ipc
:
:
SharedMemory
:
:
RightsReadWrite
)
)
;
}
#
endif
#
ifdef
XP_WIN
TEST
(
IPCSharedMemory
WinUnfreeze
)
{
base
:
:
SharedMemory
shm
;
ASSERT_TRUE
(
shm
.
CreateFreezeable
(
1
)
)
;
ASSERT_TRUE
(
shm
.
Map
(
1
)
)
;
auto
mem
=
reinterpret_cast
<
char
*
>
(
shm
.
memory
(
)
)
;
ASSERT_TRUE
(
mem
)
;
*
mem
=
'
A
'
;
ASSERT_TRUE
(
shm
.
Freeze
(
)
)
;
ASSERT_FALSE
(
shm
.
memory
(
)
)
;
auto
handle
=
base
:
:
SharedMemory
:
:
NULLHandle
(
)
;
ASSERT_TRUE
(
shm
.
GiveToProcess
(
base
:
:
GetCurrentProcId
(
)
&
handle
)
)
;
ASSERT_TRUE
(
shm
.
IsHandleValid
(
handle
)
)
;
ASSERT_FALSE
(
shm
.
IsValid
(
)
)
;
bool
unfroze
=
:
:
DuplicateHandle
(
GetCurrentProcess
(
)
handle
GetCurrentProcess
(
)
&
handle
FILE_MAP_ALL_ACCESS
false
DUPLICATE_CLOSE_SOURCE
)
;
ASSERT_FALSE
(
unfroze
)
;
}
#
endif
}
