#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
namespace
mozilla
:
:
ipc
{
#
if
defined
(
DEBUG
)
|
|
defined
(
FUZZING
)
TEST
(
IPCLogging
EmptyFilter
)
{
const
char
*
emptyFilter
=
"
"
;
EXPECT_FALSE
(
LoggingEnabledFor
(
"
PContentParent
"
emptyFilter
)
)
;
EXPECT_FALSE
(
LoggingEnabledFor
(
"
PContentChild
"
emptyFilter
)
)
;
}
TEST
(
IPCLogging
SingleProtocolFilter
)
{
const
char
*
contentParentFilter
=
"
PContentParent
"
;
EXPECT_TRUE
(
LoggingEnabledFor
(
"
PContentParent
"
contentParentFilter
)
)
;
EXPECT_FALSE
(
LoggingEnabledFor
(
"
PContentChild
"
contentParentFilter
)
)
;
}
TEST
(
IPCLogging
CommaDelimitedProtocolsFilter
)
{
const
char
*
gmpContentFilter
=
"
PGMPContentChild
PGMPContentParent
"
;
EXPECT_TRUE
(
LoggingEnabledFor
(
"
PGMPContentChild
"
gmpContentFilter
)
)
;
EXPECT_TRUE
(
LoggingEnabledFor
(
"
PGMPContentParent
"
gmpContentFilter
)
)
;
EXPECT_FALSE
(
LoggingEnabledFor
(
"
PContentParent
"
gmpContentFilter
)
)
;
EXPECT_FALSE
(
LoggingEnabledFor
(
"
PContentChild
"
gmpContentFilter
)
)
;
}
TEST
(
IPCLogging
SpaceDelimitedProtocolsFilter
)
{
const
char
*
gmpContentFilter
=
"
PGMPContentChild
PGMPContentParent
"
;
EXPECT_TRUE
(
LoggingEnabledFor
(
"
PGMPContentChild
"
gmpContentFilter
)
)
;
EXPECT_TRUE
(
LoggingEnabledFor
(
"
PGMPContentParent
"
gmpContentFilter
)
)
;
EXPECT_FALSE
(
LoggingEnabledFor
(
"
PContentParent
"
gmpContentFilter
)
)
;
EXPECT_FALSE
(
LoggingEnabledFor
(
"
PContentChild
"
gmpContentFilter
)
)
;
}
TEST
(
IPCLogging
CatchAllFilter
)
{
const
char
*
catchAllFilter
=
"
1
"
;
EXPECT_TRUE
(
LoggingEnabledFor
(
"
PGMPContentChild
"
catchAllFilter
)
)
;
EXPECT_TRUE
(
LoggingEnabledFor
(
"
PGMPContentParent
"
catchAllFilter
)
)
;
EXPECT_TRUE
(
LoggingEnabledFor
(
"
PContentParent
"
catchAllFilter
)
)
;
EXPECT_TRUE
(
LoggingEnabledFor
(
"
PContentChild
"
catchAllFilter
)
)
;
}
#
endif
}
