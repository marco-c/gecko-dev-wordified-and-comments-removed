#
include
"
LibrarySandboxPreload
.
h
"
#
include
"
BinaryPath
.
h
"
#
include
"
prlink
.
h
"
namespace
mozilla
{
namespace
ipc
{
static
nsAutoCString
GetSandboxedPath
(
const
nsACString
&
libName
)
{
nsCOMPtr
<
nsIFile
>
binaryPath
;
nsresult
rv
=
mozilla
:
:
BinaryPath
:
:
GetFile
(
getter_AddRefs
(
binaryPath
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
Library
preload
failure
:
Failed
to
get
binary
file
\
n
"
)
;
}
nsCOMPtr
<
nsIFile
>
libFile
;
rv
=
binaryPath
-
>
GetParent
(
getter_AddRefs
(
libFile
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
Library
preload
failure
:
Failed
to
get
binary
folder
\
n
"
)
;
}
rv
=
libFile
-
>
AppendNative
(
libName
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
Library
preload
failure
:
Failed
to
get
library
file
\
n
"
)
;
}
nsAutoString
fullPath
;
rv
=
libFile
-
>
GetPath
(
fullPath
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
Library
preload
failure
:
Failed
to
get
library
path
\
n
"
)
;
}
nsAutoCString
converted_path
=
NS_ConvertUTF16toUTF8
(
fullPath
)
;
return
converted_path
;
}
nsAutoCString
GetSandboxedRLBoxPath
(
)
{
return
GetSandboxedPath
(
nsLiteralCString
(
MOZ_DLL_PREFIX
"
rlbox
"
MOZ_DLL_SUFFIX
)
)
;
}
PRLibrary
*
PreloadLibrary
(
const
nsAutoCString
&
path
)
{
PRLibSpec
libSpec
;
libSpec
.
type
=
PR_LibSpec_Pathname
;
libSpec
.
value
.
pathname
=
path
.
get
(
)
;
PRLibrary
*
ret
=
PR_LoadLibraryWithFlags
(
libSpec
PR_LD_LAZY
)
;
return
ret
;
}
void
PreloadSandboxedDynamicLibrary
(
)
{
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_USING_WASM_SANDBOXING
)
if
(
!
PreloadLibrary
(
GetSandboxedRLBoxPath
(
)
)
)
{
MOZ_CRASH
(
"
Library
preload
failure
:
Failed
to
load
librlbox
\
n
"
)
;
}
#
endif
}
}
}
