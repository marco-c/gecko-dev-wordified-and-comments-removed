#
include
<
windows
.
h
>
#
include
"
base
/
process_util
.
h
"
#
include
"
CrossProcessMutex
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ProtocolUtils
.
h
"
using
base
:
:
GetCurrentProcessHandle
;
using
base
:
:
ProcessHandle
;
namespace
mozilla
{
CrossProcessMutex
:
:
CrossProcessMutex
(
const
char
*
)
{
mMutex
=
:
:
CreateMutexA
(
nullptr
FALSE
nullptr
)
;
if
(
!
mMutex
)
{
MOZ_CRASH
(
"
This
shouldn
'
t
happen
-
failed
to
create
mutex
!
"
)
;
}
MOZ_COUNT_CTOR
(
CrossProcessMutex
)
;
}
CrossProcessMutex
:
:
CrossProcessMutex
(
CrossProcessMutexHandle
aHandle
)
{
DWORD
flags
;
if
(
!
:
:
GetHandleInformation
(
aHandle
.
get
(
)
&
flags
)
)
{
MOZ_CRASH
(
"
Attempt
to
construct
a
mutex
from
an
invalid
handle
!
"
)
;
}
mMutex
=
aHandle
.
release
(
)
;
MOZ_COUNT_CTOR
(
CrossProcessMutex
)
;
}
CrossProcessMutex
:
:
~
CrossProcessMutex
(
)
{
NS_ASSERTION
(
mMutex
"
Improper
construction
of
mutex
or
double
free
.
"
)
;
:
:
CloseHandle
(
mMutex
)
;
MOZ_COUNT_DTOR
(
CrossProcessMutex
)
;
}
void
CrossProcessMutex
:
:
Lock
(
)
{
NS_ASSERTION
(
mMutex
"
Improper
construction
of
mutex
.
"
)
;
:
:
WaitForSingleObject
(
mMutex
INFINITE
)
;
}
void
CrossProcessMutex
:
:
Unlock
(
)
{
NS_ASSERTION
(
mMutex
"
Improper
construction
of
mutex
.
"
)
;
:
:
ReleaseMutex
(
mMutex
)
;
}
CrossProcessMutexHandle
CrossProcessMutex
:
:
ShareToProcess
(
base
:
:
ProcessId
aTargetPid
)
{
HANDLE
newHandle
;
if
(
!
:
:
DuplicateHandle
(
GetCurrentProcess
(
)
mMutex
GetCurrentProcess
(
)
&
newHandle
0
false
DUPLICATE_SAME_ACCESS
)
)
{
return
nullptr
;
}
return
mozilla
:
:
UniqueFileHandle
(
newHandle
)
;
}
}
