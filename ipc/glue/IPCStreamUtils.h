#
ifndef
mozilla_ipc_IPCStreamUtils_h
#
define
mozilla_ipc_IPCStreamUtils_h
#
include
"
mozilla
/
ipc
/
IPCStream
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIInputStream
.
h
"
namespace
mozilla
{
namespace
dom
{
class
nsIContentChild
;
class
nsIContentParent
;
}
namespace
ipc
{
class
PBackgroundChild
;
class
PBackgroundParent
;
already_AddRefed
<
nsIInputStream
>
DeserializeIPCStream
(
const
IPCStream
&
aValue
)
;
already_AddRefed
<
nsIInputStream
>
DeserializeIPCStream
(
const
OptionalIPCStream
&
aValue
)
;
class
AutoIPCStream
final
{
OptionalIPCStream
mInlineValue
;
IPCStream
*
mValue
;
OptionalIPCStream
*
mOptionalValue
;
bool
mTaken
;
bool
mDelayedStart
;
bool
IsSet
(
)
const
;
public
:
explicit
AutoIPCStream
(
bool
aDelayedStart
=
false
)
;
explicit
AutoIPCStream
(
IPCStream
&
aTarget
bool
aDelayedStart
=
false
)
;
explicit
AutoIPCStream
(
OptionalIPCStream
&
aTarget
bool
aDelayedStart
=
false
)
;
~
AutoIPCStream
(
)
;
bool
Serialize
(
nsIInputStream
*
aStream
dom
:
:
nsIContentChild
*
aManager
)
;
bool
Serialize
(
nsIInputStream
*
aStream
PBackgroundChild
*
aManager
)
;
MOZ_MUST_USE
bool
Serialize
(
nsIInputStream
*
aStream
dom
:
:
nsIContentParent
*
aManager
)
;
MOZ_MUST_USE
bool
Serialize
(
nsIInputStream
*
aStream
PBackgroundParent
*
aManager
)
;
IPCStream
&
TakeValue
(
)
;
OptionalIPCStream
&
TakeOptionalValue
(
)
;
private
:
AutoIPCStream
(
const
AutoIPCStream
&
aOther
)
=
delete
;
AutoIPCStream
&
operator
=
(
const
AutoIPCStream
&
aOther
)
=
delete
;
AutoIPCStream
&
operator
=
(
const
AutoIPCStream
&
&
aOther
)
=
delete
;
}
;
template
<
>
struct
IPDLParamTraits
<
nsIInputStream
>
{
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
nsIInputStream
*
aParam
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
RefPtr
<
nsIInputStream
>
*
aResult
)
;
}
;
}
}
#
endif
