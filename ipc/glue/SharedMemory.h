#
ifndef
mozilla_ipc_SharedMemory_h
#
define
mozilla_ipc_SharedMemory_h
#
include
<
cstddef
>
#
include
"
chrome
/
common
/
ipc_message_utils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
ifdef
XP_DARWIN
#
include
"
mozilla
/
ipc
/
SharedMemoryImpl_mach
.
h
"
#
else
#
include
"
mozilla
/
ipc
/
SharedMemoryImpl_chromium
.
h
"
#
endif
namespace
mozilla
:
:
ipc
{
class
SharedMemory
:
public
SharedMemoryImpl
{
~
SharedMemory
(
)
;
public
:
SharedMemory
(
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SharedMemory
)
size_t
Size
(
)
const
{
return
mMappedSize
;
}
void
CloseHandle
(
)
{
TakeHandle
(
)
;
}
bool
WriteHandle
(
IPC
:
:
MessageWriter
*
aWriter
)
;
bool
ReadHandle
(
IPC
:
:
MessageReader
*
aReader
)
;
void
Protect
(
char
*
aAddr
size_t
aSize
int
aRights
)
;
static
void
SystemProtect
(
char
*
aAddr
size_t
aSize
int
aRights
)
;
[
[
nodiscard
]
]
static
bool
SystemProtectFallible
(
char
*
aAddr
size_t
aSize
int
aRights
)
;
static
size_t
SystemPageSize
(
)
;
static
size_t
PageAlignedSize
(
size_t
aSize
)
;
bool
Create
(
size_t
nBytes
)
;
bool
Map
(
size_t
nBytes
void
*
fixedAddress
=
nullptr
)
;
void
Unmap
(
)
;
void
*
Memory
(
)
const
;
private
:
size_t
mAllocSize
;
size_t
mMappedSize
;
}
;
}
#
endif
