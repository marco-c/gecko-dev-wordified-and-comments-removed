#
include
"
mozilla
/
ipc
/
IOThread
.
h
"
#
include
"
mozilla
/
ipc
/
NodeController
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
if
defined
(
XP_WIN
)
#
include
<
objbase
.
h
>
#
endif
#
if
defined
(
XP_WIN
)
#
include
"
chrome
/
common
/
ipc_channel_win
.
h
"
#
else
#
if
defined
(
XP_DARWIN
)
#
include
"
chrome
/
common
/
ipc_channel_mach
.
h
"
#
endif
#
include
"
chrome
/
common
/
ipc_channel_posix
.
h
"
#
endif
namespace
mozilla
{
namespace
ipc
{
IOThread
*
IOThread
:
:
sSingleton
=
nullptr
;
IOThread
:
:
IOThread
(
const
char
*
aName
)
:
base
:
:
Thread
(
aName
)
{
sSingleton
=
this
;
}
IOThread
:
:
~
IOThread
(
)
{
MOZ_ASSERT
(
!
IsRunning
(
)
)
;
sSingleton
=
nullptr
;
}
void
IOThread
:
:
Startup
(
)
{
if
(
XRE_IsParentProcess
(
)
)
{
auto
*
thread
=
new
IOThreadParent
(
)
;
MOZ_RELEASE_ASSERT
(
thread
=
=
sSingleton
)
;
}
MOZ_ASSERT
(
sSingleton
)
;
}
void
IOThread
:
:
Shutdown
(
)
{
if
(
XRE_IsParentProcess
(
)
)
{
delete
static_cast
<
IOThreadParent
*
>
(
sSingleton
)
;
MOZ_ASSERT
(
!
sSingleton
)
;
}
}
void
IOThread
:
:
StartThread
(
)
{
if
(
!
StartWithOptions
(
base
:
:
Thread
:
:
Options
{
MessageLoop
:
:
TYPE_IO
0
}
)
)
{
MOZ_CRASH
(
"
Failed
to
create
IPC
I
/
O
Thread
"
)
;
}
}
void
IOThread
:
:
StopThread
(
)
{
Stop
(
)
;
}
IOThreadParent
:
:
IOThreadParent
(
)
:
IOThread
(
"
IPC
I
/
O
Parent
"
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
mChannelKind
=
[
]
{
#
if
defined
(
XP_WIN
)
return
&
IPC
:
:
ChannelWin
:
:
sKind
;
#
else
#
if
defined
(
XP_DARWIN
)
if
(
Preferences
:
:
GetBool
(
"
dom
.
ipc
.
backend
.
mach
"
)
)
{
return
&
IPC
:
:
ChannelMach
:
:
sKind
;
}
#
endif
return
&
IPC
:
:
ChannelPosix
:
:
sKind
;
#
endif
}
(
)
;
StartThread
(
)
;
}
IOThreadParent
:
:
~
IOThreadParent
(
)
{
StopThread
(
)
;
}
void
IOThreadParent
:
:
Init
(
)
{
#
if
defined
(
XP_WIN
)
CoInitialize
(
nullptr
)
;
#
endif
NodeController
:
:
InitBrokerProcess
(
mChannelKind
)
;
}
void
IOThreadParent
:
:
CleanUp
(
)
{
NodeController
:
:
CleanUp
(
)
;
#
if
defined
(
XP_WIN
)
CoUninitialize
(
)
;
#
endif
}
IOThreadChild
:
:
IOThreadChild
(
IPC
:
:
Channel
:
:
ChannelHandle
aClientHandle
base
:
:
ProcessId
aParentPid
)
:
IOThread
(
"
IPC
I
/
O
Child
"
)
mClientHandle
(
std
:
:
move
(
aClientHandle
)
)
mParentPid
(
std
:
:
move
(
aParentPid
)
)
{
StartThread
(
)
;
}
IOThreadChild
:
:
~
IOThreadChild
(
)
{
StopThread
(
)
;
}
void
IOThreadChild
:
:
Init
(
)
{
mInitialPort
=
NodeController
:
:
InitChildProcess
(
std
:
:
move
(
mClientHandle
)
mParentPid
)
;
}
void
IOThreadChild
:
:
CleanUp
(
)
{
NodeController
:
:
CleanUp
(
)
;
}
}
}
