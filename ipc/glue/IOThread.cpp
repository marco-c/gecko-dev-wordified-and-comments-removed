#
include
"
mozilla
/
ipc
/
IOThread
.
h
"
#
include
"
mozilla
/
ipc
/
NodeController
.
h
"
#
if
defined
(
XP_WIN
)
#
include
<
objbase
.
h
>
#
endif
namespace
mozilla
{
namespace
ipc
{
IOThread
*
IOThread
:
:
sSingleton
=
nullptr
;
IOThread
:
:
IOThread
(
const
char
*
aName
)
:
base
:
:
Thread
(
aName
)
{
sSingleton
=
this
;
}
IOThread
:
:
~
IOThread
(
)
{
MOZ_ASSERT
(
!
IsRunning
(
)
)
;
sSingleton
=
nullptr
;
}
void
IOThread
:
:
StartThread
(
)
{
if
(
!
StartWithOptions
(
base
:
:
Thread
:
:
Options
{
MessageLoop
:
:
TYPE_IO
0
}
)
)
{
MOZ_CRASH
(
"
Failed
to
create
IPC
I
/
O
Thread
"
)
;
}
}
void
IOThread
:
:
StopThread
(
)
{
Stop
(
)
;
}
IOThreadParent
:
:
IOThreadParent
(
)
:
IOThread
(
"
IPC
I
/
O
Parent
"
)
{
StartThread
(
)
;
}
IOThreadParent
:
:
~
IOThreadParent
(
)
{
StopThread
(
)
;
}
void
IOThreadParent
:
:
Init
(
)
{
#
if
defined
(
XP_WIN
)
CoInitialize
(
nullptr
)
;
#
endif
NodeController
:
:
InitBrokerProcess
(
)
;
}
void
IOThreadParent
:
:
CleanUp
(
)
{
NodeController
:
:
CleanUp
(
)
;
#
if
defined
(
XP_WIN
)
CoUninitialize
(
)
;
#
endif
}
IOThreadChild
:
:
IOThreadChild
(
IPC
:
:
Channel
:
:
ChannelHandle
aClientHandle
base
:
:
ProcessId
aParentPid
)
:
IOThread
(
"
IPC
I
/
O
Child
"
)
mClientHandle
(
std
:
:
move
(
aClientHandle
)
)
mParentPid
(
std
:
:
move
(
aParentPid
)
)
{
StartThread
(
)
;
}
IOThreadChild
:
:
~
IOThreadChild
(
)
{
StopThread
(
)
;
}
void
IOThreadChild
:
:
Init
(
)
{
RefPtr
<
IPC
:
:
Channel
>
channel
=
IPC
:
:
Channel
:
:
Create
(
std
:
:
move
(
mClientHandle
)
IPC
:
:
Channel
:
:
MODE_CLIENT
mParentPid
)
;
#
if
defined
(
XP_WIN
)
channel
-
>
StartAcceptingHandles
(
IPC
:
:
Channel
:
:
MODE_CLIENT
)
;
#
elif
defined
(
XP_DARWIN
)
channel
-
>
StartAcceptingMachPorts
(
IPC
:
:
Channel
:
:
MODE_CLIENT
)
;
#
endif
mInitialPort
=
NodeController
:
:
InitChildProcess
(
channel
mParentPid
)
;
}
void
IOThreadChild
:
:
CleanUp
(
)
{
NodeController
:
:
CleanUp
(
)
;
}
}
}
