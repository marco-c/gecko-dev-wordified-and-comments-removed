"
use
strict
"
;
async
function
runTest
(
src
process
decoder
)
{
info
(
Add
media
tabs
:
{
src
}
)
;
let
tab
=
await
addMediaTab
(
src
)
;
info
(
"
Play
tab
"
)
;
await
play
(
tab
process
decoder
)
;
info
(
"
Stop
tab
"
)
;
await
stop
(
tab
)
;
info
(
"
Remove
tab
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
findGenericAudioDecoder
(
)
{
const
audioDecoders
=
(
await
ChromeUtils
.
requestProcInfo
(
)
)
.
children
.
filter
(
p
=
>
{
return
(
p
.
type
=
=
=
"
utility
"
&
&
p
.
utilityActors
.
find
(
a
=
>
a
.
actorName
=
=
=
"
audioDecoder_Generic
"
)
)
;
}
)
;
ok
(
audioDecoders
.
length
=
=
=
1
"
Only
one
audio
decoder
present
"
)
;
return
audioDecoders
[
0
]
.
pid
;
}
add_setup
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
utility
-
process
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testKill
(
)
{
await
runTest
(
"
small
-
shot
.
ogg
"
"
Utility
Generic
"
"
vorbis
audio
decoder
"
)
;
const
audioDecoderPid
=
await
findGenericAudioDecoder
(
)
;
ok
(
audioDecoderPid
>
0
Valid
PID
found
:
{
audioDecoderPid
}
)
;
await
cleanUtilityProcessShutdown
(
audioDecoderPid
true
)
;
info
(
"
Waiting
15s
to
trigger
mShutdownBlockers
assertions
"
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
setTimeout
(
resolve
15
*
1000
)
;
}
)
;
ok
(
true
"
Waited
15s
to
trigger
mShutdownBlockers
assertions
:
over
"
)
;
}
)
;
add_task
(
async
function
testShutdown
(
)
{
await
runTest
(
"
small
-
shot
.
ogg
"
"
Utility
Generic
"
"
vorbis
audio
decoder
"
)
;
const
audioDecoderPid
=
await
findGenericAudioDecoder
(
)
;
ok
(
audioDecoderPid
>
0
Valid
PID
found
:
{
audioDecoderPid
}
)
;
await
cleanUtilityProcessShutdown
(
audioDecoderPid
)
;
info
(
"
Waiting
15s
to
trigger
mShutdownBlockers
assertions
"
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
setTimeout
(
resolve
15
*
1000
)
;
}
)
;
ok
(
true
"
Waited
15s
to
trigger
mShutdownBlockers
assertions
:
over
"
)
;
}
)
;
