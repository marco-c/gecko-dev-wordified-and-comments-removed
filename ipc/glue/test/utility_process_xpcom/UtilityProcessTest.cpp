#
if
defined
(
ENABLE_TESTS
)
#
include
"
mozilla
/
ipc
/
UtilityProcessTest
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessManager
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
namespace
mozilla
:
:
ipc
{
NS_IMETHODIMP
UtilityProcessTest
:
:
StartProcess
(
JSContext
*
aCx
mozilla
:
:
dom
:
:
Promise
*
*
aOutPromise
)
{
NS_ENSURE_ARG
(
aOutPromise
)
;
*
aOutPromise
=
nullptr
;
nsIGlobalObject
*
global
=
xpc
:
:
CurrentNativeGlobal
(
aCx
)
;
if
(
NS_WARN_IF
(
!
global
)
)
{
return
NS_ERROR_FAILURE
;
}
ErrorResult
erv
;
RefPtr
<
dom
:
:
Promise
>
promise
=
dom
:
:
Promise
:
:
Create
(
global
erv
)
;
if
(
NS_WARN_IF
(
erv
.
Failed
(
)
)
)
{
return
erv
.
StealNSResult
(
)
;
}
RefPtr
<
UtilityProcessManager
>
utilityProc
=
UtilityProcessManager
:
:
GetSingleton
(
)
;
MOZ_ASSERT
(
utilityProc
"
No
UtilityprocessManager
?
"
)
;
utilityProc
-
>
LaunchProcess
(
SandboxingKind
:
:
GENERIC_UTILITY
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
promise
utilityProc
]
(
)
{
Maybe
<
int32_t
>
utilityPid
=
utilityProc
-
>
ProcessPid
(
)
;
promise
-
>
MaybeResolve
(
*
utilityPid
)
;
}
[
promise
]
(
nsresult
aError
)
{
MOZ_ASSERT_UNREACHABLE
(
"
UtilityProcessTest
;
failure
to
get
Utility
process
"
)
;
promise
-
>
MaybeRejectWithUndefined
(
)
;
}
)
;
promise
.
forget
(
aOutPromise
)
;
return
NS_OK
;
}
NS_IMETHODIMP
UtilityProcessTest
:
:
StopProcess
(
)
{
RefPtr
<
UtilityProcessManager
>
utilityProc
=
UtilityProcessManager
:
:
GetSingleton
(
)
;
MOZ_ASSERT
(
utilityProc
"
No
UtilityprocessManager
?
"
)
;
utilityProc
-
>
CleanShutdown
(
)
;
Maybe
<
int32_t
>
utilityPid
=
utilityProc
-
>
ProcessPid
(
)
;
MOZ_RELEASE_ASSERT
(
utilityPid
.
isNothing
(
)
"
Should
not
have
a
utility
process
PID
anymore
"
)
;
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
UtilityProcessTest
nsIUtilityProcessTest
)
}
#
endif
