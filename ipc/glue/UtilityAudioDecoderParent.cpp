#
include
"
UtilityAudioDecoderParent
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
nsDebugImpl
.
h
"
#
include
"
mozilla
/
RemoteDecoderManagerParent
.
h
"
#
include
"
PDMFactory
.
h
"
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
WMF
.
h
"
#
include
"
WMFDecoderModule
.
h
"
#
include
"
WMFUtils
.
h
"
#
include
"
mozilla
/
sandboxTarget
.
h
"
#
endif
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
AndroidDecoderModule
.
h
"
#
endif
#
include
"
mozilla
/
ipc
/
UtilityProcessChild
.
h
"
#
include
"
mozilla
/
RemoteDecodeUtils
.
h
"
namespace
mozilla
:
:
ipc
{
UtilityAudioDecoderParent
:
:
UtilityAudioDecoderParent
(
)
{
nsDebugImpl
:
:
SetMultiprocessMode
(
"
Utility
AudioDecoder
"
)
;
profiler_set_process_name
(
nsCString
(
"
Utility
AudioDecoder
"
)
)
;
}
void
UtilityAudioDecoderParent
:
:
GenericPreloadForSandbox
(
)
{
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
OS_WIN
)
:
:
LoadLibraryW
(
L
"
mozavcodec
.
dll
"
)
;
:
:
LoadLibraryW
(
L
"
mozavutil
.
dll
"
)
;
#
endif
}
void
UtilityAudioDecoderParent
:
:
WMFPreloadForSandbox
(
)
{
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
OS_WIN
)
:
:
LoadLibraryW
(
L
"
mfplat
.
dll
"
)
;
:
:
LoadLibraryW
(
L
"
mf
.
dll
"
)
;
#
if
defined
(
DEBUG
)
:
:
LoadLibraryW
(
L
"
ole32
.
dll
"
)
;
#
endif
auto
rv
=
wmf
:
:
MediaFoundationInitializer
:
:
HasInitialized
(
)
;
if
(
!
rv
)
{
NS_WARNING
(
"
Failed
to
init
Media
Foundation
in
the
Utility
process
"
)
;
}
#
endif
}
SandboxingKind
UtilityAudioDecoderParent
:
:
GetSandboxingKind
(
)
{
RefPtr
<
UtilityProcessChild
>
me
=
UtilityProcessChild
:
:
GetSingleton
(
)
;
if
(
!
me
)
{
MOZ_CRASH
(
"
I
cant
find
myself
"
)
;
}
return
me
-
>
mSandbox
;
}
void
UtilityAudioDecoderParent
:
:
Start
(
Endpoint
<
PUtilityAudioDecoderParent
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
DebugOnly
<
bool
>
ok
=
std
:
:
move
(
aEndpoint
)
.
Bind
(
this
)
;
MOZ_ASSERT
(
ok
)
;
#
ifdef
MOZ_WIDGET_ANDROID
if
(
StaticPrefs
:
:
media_utility_android_media_codec_enabled
(
)
)
{
AndroidDecoderModule
:
:
SetSupportedMimeTypes
(
AndroidDecoderModule
:
:
GetSupportedMimeTypes
(
)
)
;
}
#
endif
auto
supported
=
PDMFactory
:
:
Supported
(
)
;
Unused
<
<
SendUpdateMediaCodecsSupported
(
GetRemoteDecodeInFromKind
(
GetSandboxingKind
(
)
)
supported
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
UtilityAudioDecoderParent
:
:
RecvNewContentRemoteDecoderManager
(
Endpoint
<
PRemoteDecoderManagerParent
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
RemoteDecoderManagerParent
:
:
CreateForContent
(
std
:
:
move
(
aEndpoint
)
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
}
