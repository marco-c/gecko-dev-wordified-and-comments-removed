#
ifndef
mozilla_CrossProcessMutex_h
#
define
mozilla_CrossProcessMutex_h
#
include
"
base
/
process
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
endif
#
if
!
defined
(
XP_WIN
)
&
&
!
defined
(
XP_NETBSD
)
&
&
!
defined
(
XP_OPENBSD
)
#
include
<
pthread
.
h
>
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
endif
namespace
IPC
{
template
<
typename
T
>
struct
ParamTraits
;
}
namespace
mozilla
{
#
if
defined
(
XP_WIN
)
typedef
mozilla
:
:
UniqueFileHandle
CrossProcessMutexHandle
;
#
elif
!
defined
(
XP_NETBSD
)
&
&
!
defined
(
XP_OPENBSD
)
typedef
mozilla
:
:
ipc
:
:
SharedMemory
:
:
Handle
CrossProcessMutexHandle
;
#
else
typedef
uintptr_t
CrossProcessMutexHandle
;
#
endif
class
CrossProcessMutex
{
public
:
explicit
CrossProcessMutex
(
const
char
*
aName
)
;
explicit
CrossProcessMutex
(
CrossProcessMutexHandle
aHandle
)
;
~
CrossProcessMutex
(
)
;
void
Lock
(
)
;
void
Unlock
(
)
;
CrossProcessMutexHandle
CloneHandle
(
)
;
private
:
friend
struct
IPC
:
:
ParamTraits
<
CrossProcessMutex
>
;
CrossProcessMutex
(
)
;
CrossProcessMutex
(
const
CrossProcessMutex
&
)
;
CrossProcessMutex
&
operator
=
(
const
CrossProcessMutex
&
)
;
#
if
defined
(
XP_WIN
)
HANDLE
mMutex
;
#
elif
!
defined
(
XP_NETBSD
)
&
&
!
defined
(
XP_OPENBSD
)
RefPtr
<
mozilla
:
:
ipc
:
:
SharedMemory
>
mSharedBuffer
;
pthread_mutex_t
*
mMutex
;
mozilla
:
:
Atomic
<
int32_t
>
*
mCount
;
#
endif
}
;
typedef
detail
:
:
BaseAutoLock
<
CrossProcessMutex
&
>
CrossProcessMutexAutoLock
;
typedef
detail
:
:
BaseAutoUnlock
<
CrossProcessMutex
&
>
CrossProcessMutexAutoUnlock
;
}
#
endif
