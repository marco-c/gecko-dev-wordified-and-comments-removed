#
include
"
mozilla
/
ipc
/
UtilityProcessParent
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessManager
.
h
"
#
if
defined
(
XP_WIN
)
#
include
<
dwrite
.
h
>
#
include
<
process
.
h
>
#
include
"
mozilla
/
WinDllServices
.
h
"
#
endif
#
include
"
mozilla
/
ipc
/
ProcessChild
.
h
"
#
include
"
mozilla
/
FOGIPC
.
h
"
#
include
"
nsHashPropertyBag
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsIObserverService
.
h
"
namespace
mozilla
:
:
ipc
{
UtilityProcessParent
:
:
UtilityProcessParent
(
UtilityProcessHost
*
aHost
)
:
mHost
(
aHost
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mHost
)
;
}
UtilityProcessParent
:
:
~
UtilityProcessParent
(
)
=
default
;
bool
UtilityProcessParent
:
:
SendRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
Maybe
<
FileDescriptor
>
&
aDMDFile
)
{
mMemoryReportRequest
=
MakeUnique
<
MemoryReportRequestHost
>
(
aGeneration
)
;
PUtilityProcessParent
:
:
SendRequestMemoryReport
(
aGeneration
aAnonymize
aMinimizeMemoryUsage
aDMDFile
[
&
]
(
const
uint32_t
&
aGeneration2
)
{
if
(
RefPtr
<
UtilityProcessManager
>
utilitypm
=
UtilityProcessManager
:
:
GetSingleton
(
)
)
{
for
(
RefPtr
<
UtilityProcessParent
>
&
parent
:
utilitypm
-
>
GetAllProcessesProcessParent
(
)
)
{
if
(
parent
-
>
mMemoryReportRequest
)
{
parent
-
>
mMemoryReportRequest
-
>
Finish
(
aGeneration2
)
;
parent
-
>
mMemoryReportRequest
=
nullptr
;
}
}
}
}
[
&
]
(
mozilla
:
:
ipc
:
:
ResponseRejectReason
)
{
if
(
RefPtr
<
UtilityProcessManager
>
utilitypm
=
UtilityProcessManager
:
:
GetSingleton
(
)
)
{
for
(
RefPtr
<
UtilityProcessParent
>
&
parent
:
utilitypm
-
>
GetAllProcessesProcessParent
(
)
)
{
parent
-
>
mMemoryReportRequest
=
nullptr
;
}
}
}
)
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessParent
:
:
RecvAddMemoryReport
(
const
MemoryReport
&
aReport
)
{
if
(
mMemoryReportRequest
)
{
mMemoryReportRequest
-
>
RecvReport
(
aReport
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessParent
:
:
RecvFOGData
(
ByteBuf
&
&
aBuf
)
{
glean
:
:
FOGData
(
std
:
:
move
(
aBuf
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessParent
:
:
RecvInitCompleted
(
)
{
MOZ_ASSERT
(
mHost
)
;
mHost
-
>
ResolvePromise
(
)
;
return
IPC_OK
(
)
;
}
void
UtilityProcessParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
RefPtr
<
nsHashPropertyBag
>
props
=
new
nsHashPropertyBag
(
)
;
if
(
aWhy
=
=
AbnormalShutdown
)
{
nsAutoString
dumpID
;
GenerateCrashReport
(
OtherPid
(
)
&
dumpID
)
;
if
(
!
dumpID
.
IsEmpty
(
)
)
{
props
-
>
SetPropertyAsAString
(
u
"
dumpID
"
_ns
dumpID
)
;
}
}
nsAutoString
pid
;
pid
.
AppendInt
(
static_cast
<
uint64_t
>
(
OtherPid
(
)
)
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
NotifyObservers
(
(
nsIPropertyBag2
*
)
props
"
ipc
:
utility
-
shutdown
"
pid
.
get
(
)
)
;
}
else
{
NS_WARNING
(
"
Could
not
get
a
nsIObserverService
ipc
:
utility
-
shutdown
skip
"
)
;
}
mHost
-
>
OnChannelClosed
(
)
;
}
class
DeferredDeleteUtilityProcessParent
:
public
Runnable
{
public
:
explicit
DeferredDeleteUtilityProcessParent
(
RefPtr
<
UtilityProcessParent
>
aParent
)
:
Runnable
(
"
ipc
:
:
glue
:
:
DeferredDeleteUtilityProcessParent
"
)
mParent
(
std
:
:
move
(
aParent
)
)
{
}
NS_IMETHODIMP
Run
(
)
override
{
return
NS_OK
;
}
private
:
RefPtr
<
UtilityProcessParent
>
mParent
;
}
;
void
UtilityProcessParent
:
:
Destroy
(
RefPtr
<
UtilityProcessParent
>
aParent
)
{
NS_DispatchToMainThread
(
new
DeferredDeleteUtilityProcessParent
(
std
:
:
move
(
aParent
)
)
)
;
}
}
