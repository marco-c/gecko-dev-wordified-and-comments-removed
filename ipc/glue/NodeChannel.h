#
ifndef
mozilla_ipc_NodeChannel_h
#
define
mozilla_ipc_NodeChannel_h
#
include
"
mojo
/
core
/
ports
/
node
.
h
"
#
include
"
mojo
/
core
/
ports
/
node_delegate
.
h
"
#
include
"
chrome
/
common
/
ipc_message
.
h
"
#
include
"
chrome
/
common
/
ipc_channel
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
ipc
/
AutoTransportDescriptor
.
h
"
#
include
"
mozilla
/
ipc
/
Transport
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
mozilla
/
Queue
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
:
:
ipc
{
class
NodeController
;
class
NodeChannel
final
:
public
IPC
:
:
Channel
:
:
Listener
{
using
NodeName
=
mojo
:
:
core
:
:
ports
:
:
NodeName
;
using
PortName
=
mojo
:
:
core
:
:
ports
:
:
PortName
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_DESTROY
(
NodeChannel
Destroy
(
)
)
struct
Introduction
{
NodeName
mName
;
AutoTransportDescriptor
mTransport
;
Transport
:
:
Mode
mMode
;
int32_t
mMyPid
=
-
1
;
int32_t
mOtherPid
=
-
1
;
}
;
class
Listener
{
public
:
virtual
~
Listener
(
)
=
default
;
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
void
OnEventMessage
(
const
NodeName
&
aFromNode
UniquePtr
<
IPC
:
:
Message
>
aMessage
)
=
0
;
virtual
void
OnBroadcast
(
const
NodeName
&
aFromNode
UniquePtr
<
IPC
:
:
Message
>
aMessage
)
=
0
;
virtual
void
OnIntroduce
(
const
NodeName
&
aFromNode
Introduction
aIntroduction
)
=
0
;
virtual
void
OnRequestIntroduction
(
const
NodeName
&
aFromNode
const
NodeName
&
aName
)
=
0
;
virtual
void
OnAcceptInvite
(
const
NodeName
&
aFromNode
const
NodeName
&
aRealName
const
PortName
&
aInitialPort
)
=
0
;
virtual
void
OnChannelError
(
const
NodeName
&
aFromNode
)
=
0
;
}
;
NodeChannel
(
const
NodeName
&
aName
UniquePtr
<
IPC
:
:
Channel
>
aChannel
Listener
*
aListener
int32_t
aPid
=
-
1
)
;
void
SendEventMessage
(
UniquePtr
<
IPC
:
:
Message
>
aMessage
)
;
void
Broadcast
(
UniquePtr
<
IPC
:
:
Message
>
aMessage
)
;
void
RequestIntroduction
(
const
NodeName
&
aPeerName
)
;
void
Introduce
(
Introduction
aIntroduction
)
;
void
AcceptInvite
(
const
NodeName
&
aRealName
const
PortName
&
aInitialPort
)
;
int32_t
OtherPid
(
)
const
{
return
mOtherPid
;
}
void
Start
(
bool
aCallConnect
=
true
)
;
void
Close
(
)
;
void
SetName
(
const
NodeName
&
aNewName
)
{
mName
=
aNewName
;
}
private
:
~
NodeChannel
(
)
;
void
Destroy
(
)
;
void
FinalDestroy
(
)
;
void
SetOtherPid
(
int32_t
aNewPid
)
;
void
SendMessage
(
UniquePtr
<
IPC
:
:
Message
>
aMessage
)
;
void
DoSendMessage
(
UniquePtr
<
IPC
:
:
Message
>
aMessage
)
;
void
OnMessageReceived
(
IPC
:
:
Message
&
&
aMessage
)
override
;
void
OnChannelConnected
(
int32_t
aPeerPid
)
override
;
void
OnChannelError
(
)
override
;
const
RefPtr
<
Listener
>
mListener
;
NodeName
mName
;
std
:
:
atomic
<
int32_t
>
mOtherPid
;
mozilla
:
:
UniquePtr
<
IPC
:
:
Channel
>
mChannel
;
bool
mClosed
=
false
;
IPC
:
:
Channel
:
:
Listener
*
mExistingListener
=
nullptr
;
}
;
}
#
endif
