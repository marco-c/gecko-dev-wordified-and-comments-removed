#
ifndef
mozilla_ipc_CrashReporterHelper_h
#
define
mozilla_ipc_CrashReporterHelper_h
#
include
"
CrashReporterHost
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsIAppStartup
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsICrashService
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
namespace
mozilla
:
:
ipc
{
template
<
class
Derived
>
class
CrashReporterHelper
{
public
:
CrashReporterHelper
(
)
:
mCrashReporter
(
nullptr
)
{
}
IPCResult
RecvInitCrashReporter
(
const
CrashReporter
:
:
CrashReporterInitArgs
&
aInitArgs
)
{
base
:
:
ProcessId
pid
=
static_cast
<
Derived
*
>
(
this
)
-
>
OtherPid
(
)
;
mCrashReporter
=
MakeUnique
<
ipc
:
:
CrashReporterHost
>
(
Derived
:
:
PROCESS_TYPE
pid
aInitArgs
)
;
return
IPC_OK
(
)
;
}
protected
:
void
GenerateCrashReport
(
nsString
*
aMinidumpId
=
nullptr
)
{
nsAutoString
minidumpId
;
if
(
!
mCrashReporter
)
{
HandleOrphanedMinidump
(
minidumpId
)
;
}
else
if
(
mCrashReporter
-
>
GenerateCrashReport
(
)
)
{
minidumpId
=
mCrashReporter
-
>
MinidumpID
(
)
;
}
if
(
aMinidumpId
)
{
*
aMinidumpId
=
minidumpId
;
}
mCrashReporter
=
nullptr
;
}
void
MaybeTerminateProcess
(
)
{
if
(
PR_GetEnv
(
"
MOZ_CRASHREPORTER_SHUTDOWN
"
)
)
{
NS_WARNING
(
nsPrintfCString
(
"
Shutting
down
due
to
%
s
process
crash
.
"
XRE_GetProcessTypeString
(
)
)
.
get
(
)
)
;
nsCOMPtr
<
nsIAppStartup
>
appService
=
do_GetService
(
"
mozilla
.
org
/
toolkit
/
app
-
startup
;
1
"
)
;
if
(
appService
)
{
bool
userAllowedQuit
=
true
;
appService
-
>
Quit
(
nsIAppStartup
:
:
eForceQuit
1
&
userAllowedQuit
)
;
}
}
}
private
:
void
HandleOrphanedMinidump
(
nsString
&
aMinidumpId
)
{
base
:
:
ProcessId
pid
=
static_cast
<
Derived
*
>
(
this
)
-
>
OtherPid
(
)
;
if
(
CrashReporter
:
:
FinalizeOrphanedMinidump
(
pid
Derived
:
:
PROCESS_TYPE
&
aMinidumpId
)
)
{
CrashReporterHost
:
:
RecordCrash
(
Derived
:
:
PROCESS_TYPE
nsICrashService
:
:
CRASH_TYPE_CRASH
aMinidumpId
)
;
}
else
{
NS_WARNING
(
nsPrintfCString
(
"
child
process
pid
=
%
"
PRIPID
"
crashed
without
leaving
a
minidump
behind
"
pid
)
.
get
(
)
)
;
}
}
protected
:
UniquePtr
<
ipc
:
:
CrashReporterHost
>
mCrashReporter
;
}
;
}
#
endif
