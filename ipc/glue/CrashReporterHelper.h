#
ifndef
mozilla_ipc_CrashReporterHelper_h
#
define
mozilla_ipc_CrashReporterHelper_h
#
include
"
CrashReporterHost
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsICrashService
.
h
"
namespace
mozilla
{
namespace
ipc
{
template
<
GeckoProcessType
PT
>
class
CrashReporterHelper
{
public
:
CrashReporterHelper
(
)
:
mCrashReporter
(
nullptr
)
{
}
IPCResult
RecvInitCrashReporter
(
Shmem
&
&
aShmem
const
CrashReporter
:
:
ThreadId
&
aThreadId
)
{
mCrashReporter
=
MakeUnique
<
ipc
:
:
CrashReporterHost
>
(
PT
aShmem
aThreadId
)
;
return
IPC_OK
(
)
;
}
protected
:
void
GenerateCrashReport
(
base
:
:
ProcessId
aPid
nsString
*
aMinidumpId
=
nullptr
)
{
nsAutoString
minidumpId
;
if
(
!
mCrashReporter
)
{
HandleOrphanedMinidump
(
aPid
minidumpId
)
;
}
else
if
(
mCrashReporter
-
>
GenerateCrashReport
(
aPid
)
)
{
minidumpId
=
mCrashReporter
-
>
MinidumpID
(
)
;
}
if
(
aMinidumpId
)
{
*
aMinidumpId
=
minidumpId
;
}
mCrashReporter
=
nullptr
;
}
private
:
void
HandleOrphanedMinidump
(
base
:
:
ProcessId
aPid
nsString
&
aMinidumpId
)
{
if
(
CrashReporter
:
:
FinalizeOrphanedMinidump
(
aPid
PT
&
aMinidumpId
)
)
{
CrashReporterHost
:
:
RecordCrash
(
PT
nsICrashService
:
:
CRASH_TYPE_CRASH
aMinidumpId
)
;
}
else
{
NS_WARNING
(
nsPrintfCString
(
"
child
process
pid
=
%
d
crashed
without
"
"
leaving
a
minidump
behind
"
aPid
)
.
get
(
)
)
;
}
}
protected
:
UniquePtr
<
ipc
:
:
CrashReporterHost
>
mCrashReporter
;
}
;
}
}
#
endif
