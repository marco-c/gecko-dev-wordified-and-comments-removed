#
include
"
UtilityProcessImpl
.
h
"
#
include
"
mozilla
/
ipc
/
IOThreadChild
.
h
"
#
include
"
mozilla
/
GeckoArgs
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
nsExceptionHandler
.
h
"
#
include
"
mozilla
/
WindowsDiagnostics
.
h
"
#
endif
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
sandboxTarget
.
h
"
#
include
"
WMF
.
h
"
#
include
"
WMFDecoderModule
.
h
"
#
endif
#
if
defined
(
XP_OPENBSD
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
endif
#
if
defined
(
MOZ_WMF_CDM
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
MFCDMParent
.
h
"
#
endif
namespace
mozilla
:
:
ipc
{
UtilityProcessImpl
:
:
~
UtilityProcessImpl
(
)
=
default
;
#
if
defined
(
XP_WIN
)
void
UtilityProcessImpl
:
:
LoadLibraryOrCrash
(
LPCWSTR
aLib
)
{
const
int
kMaxRetries
=
10
;
DWORD
err
;
for
(
int
i
=
0
;
i
<
kMaxRetries
;
i
+
+
)
{
HMODULE
module
=
:
:
LoadLibraryW
(
aLib
)
;
if
(
module
)
{
return
;
}
err
=
:
:
GetLastError
(
)
;
if
(
err
!
=
ERROR_NOACCESS
&
&
err
!
=
ERROR_DLL_INIT_FAILED
)
{
break
;
}
PR_Sleep
(
0
)
;
}
switch
(
err
)
{
case
ERROR_MOD_NOT_FOUND
:
case
ERROR_COMMITMENT_LIMIT
:
CrashReporter
:
:
AnnotateOOMAllocationSize
(
1
)
;
break
;
default
:
break
;
}
#
if
defined
(
MOZ_DIAGNOSTIC_ASSERT_ENABLED
)
&
&
defined
(
_M_X64
)
static
constexpr
int
kMaxStepsNtdll
=
0x1800
;
static
constexpr
int
kMaxErrorStatesNtdll
=
0x200
;
using
NtdllSingleStepData
=
ModuleSingleStepData
<
kMaxStepsNtdll
kMaxErrorStatesNtdll
>
;
HMODULE
module
{
}
;
nsresult
rv
=
CollectModuleSingleStepData
<
kMaxStepsNtdll
kMaxErrorStatesNtdll
InstructionFilter
:
:
CALL_RET
>
(
L
"
ntdll
.
dll
"
[
&
module
aLib
]
(
)
{
module
=
:
:
LoadLibraryW
(
aLib
)
;
}
[
&
module
]
(
const
NtdllSingleStepData
&
aData
)
{
MOZ_DIAGNOSTIC_ASSERT
(
module
"
Unable
to
preload
module
:
collected
single
-
step
data
"
)
;
}
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
collect
single
step
data
for
LoadLibraryW
"
)
;
#
else
MOZ_CRASH_UNSAFE_PRINTF
(
"
Unable
to
preload
module
:
0x
%
lx
"
err
)
;
#
endif
}
#
endif
bool
UtilityProcessImpl
:
:
Init
(
int
aArgc
char
*
aArgv
[
]
)
{
Maybe
<
uint64_t
>
sandboxingKind
=
geckoargs
:
:
sSandboxingKind
.
Get
(
aArgc
aArgv
)
;
if
(
sandboxingKind
.
isNothing
(
)
)
{
return
false
;
}
if
(
*
sandboxingKind
>
=
SandboxingKind
:
:
COUNT
)
{
return
false
;
}
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
XP_WIN
)
LoadLibraryOrCrash
(
L
"
winmm
.
dll
"
)
;
if
(
*
sandboxingKind
=
=
SandboxingKind
:
:
GENERIC_UTILITY
)
{
UtilityAudioDecoderParent
:
:
GenericPreloadForSandbox
(
)
;
}
if
(
*
sandboxingKind
=
=
SandboxingKind
:
:
UTILITY_AUDIO_DECODING_WMF
#
ifdef
MOZ_WMF_MEDIA_ENGINE
|
|
*
sandboxingKind
=
=
SandboxingKind
:
:
MF_MEDIA_ENGINE_CDM
#
endif
)
{
UtilityAudioDecoderParent
:
:
WMFPreloadForSandbox
(
)
;
}
mozilla
:
:
SandboxTarget
:
:
Instance
(
)
-
>
StartSandbox
(
)
;
#
elif
defined
(
__OpenBSD__
)
&
&
defined
(
MOZ_SANDBOX
)
if
(
*
sandboxingKind
!
=
SandboxingKind
:
:
GENERIC_UTILITY
)
{
StartOpenBSDSandbox
(
GeckoProcessType_Utility
(
SandboxingKind
)
*
sandboxingKind
)
;
}
#
endif
#
if
defined
(
MOZ_WMF_CDM
)
&
&
defined
(
MOZ_SANDBOX
)
if
(
*
sandboxingKind
=
=
MF_MEDIA_ENGINE_CDM
)
{
Maybe
<
const
char
*
>
pluginPath
=
geckoargs
:
:
sPluginPath
.
Get
(
aArgc
aArgv
)
;
if
(
pluginPath
)
{
MFCDMParent
:
:
SetWidevineL1Path
(
*
pluginPath
)
;
}
else
{
NS_WARNING
(
"
No
Widevine
L1
plugin
for
the
utility
process
!
"
)
;
}
}
#
endif
Maybe
<
const
char
*
>
parentBuildID
=
geckoargs
:
:
sParentBuildID
.
Get
(
aArgc
aArgv
)
;
if
(
parentBuildID
.
isNothing
(
)
)
{
return
false
;
}
if
(
!
ProcessChild
:
:
InitPrefs
(
aArgc
aArgv
)
)
{
return
false
;
}
return
mUtility
-
>
Init
(
TakeInitialEndpoint
(
)
nsCString
(
*
parentBuildID
)
*
sandboxingKind
)
;
}
void
UtilityProcessImpl
:
:
CleanUp
(
)
{
NS_ShutdownXPCOM
(
nullptr
)
;
}
}
