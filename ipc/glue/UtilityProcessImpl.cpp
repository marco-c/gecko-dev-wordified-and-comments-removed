#
include
"
UtilityProcessImpl
.
h
"
#
include
"
mozilla
/
ipc
/
IOThreadChild
.
h
"
#
include
"
mozilla
/
GeckoArgs
.
h
"
#
if
defined
(
OS_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
sandboxTarget
.
h
"
#
include
"
WMF
.
h
"
#
include
"
WMFDecoderModule
.
h
"
#
endif
#
if
defined
(
XP_OPENBSD
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
endif
namespace
mozilla
:
:
ipc
{
UtilityProcessImpl
:
:
~
UtilityProcessImpl
(
)
=
default
;
bool
UtilityProcessImpl
:
:
Init
(
int
aArgc
char
*
aArgv
[
]
)
{
Maybe
<
uint64_t
>
sandboxingKind
=
geckoargs
:
:
sSandboxingKind
.
Get
(
aArgc
aArgv
)
;
if
(
sandboxingKind
.
isNothing
(
)
)
{
return
false
;
}
if
(
*
sandboxingKind
>
=
SandboxingKind
:
:
COUNT
)
{
return
false
;
}
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
OS_WIN
)
:
:
LoadLibraryW
(
L
"
winmm
.
dll
"
)
;
if
(
*
sandboxingKind
=
=
SandboxingKind
:
:
GENERIC_UTILITY
)
{
UtilityAudioDecoderParent
:
:
GenericPreloadForSandbox
(
)
;
}
if
(
*
sandboxingKind
=
=
SandboxingKind
:
:
UTILITY_AUDIO_DECODING_WMF
#
ifdef
MOZ_WMF_MEDIA_ENGINE
|
|
*
sandboxingKind
=
=
SandboxingKind
:
:
MF_MEDIA_ENGINE_CDM
#
endif
)
{
UtilityAudioDecoderParent
:
:
WMFPreloadForSandbox
(
)
;
}
mozilla
:
:
SandboxTarget
:
:
Instance
(
)
-
>
StartSandbox
(
)
;
#
elif
defined
(
__OpenBSD__
)
&
&
defined
(
MOZ_SANDBOX
)
StartOpenBSDSandbox
(
GeckoProcessType_Utility
(
SandboxingKind
)
*
sandboxingKind
)
;
#
endif
Maybe
<
const
char
*
>
parentBuildID
=
geckoargs
:
:
sParentBuildID
.
Get
(
aArgc
aArgv
)
;
if
(
parentBuildID
.
isNothing
(
)
)
{
return
false
;
}
if
(
!
ProcessChild
:
:
InitPrefs
(
aArgc
aArgv
)
)
{
return
false
;
}
return
mUtility
-
>
Init
(
TakeInitialEndpoint
(
)
nsCString
(
*
parentBuildID
)
*
sandboxingKind
)
;
}
void
UtilityProcessImpl
:
:
CleanUp
(
)
{
NS_ShutdownXPCOM
(
nullptr
)
;
}
}
