#
ifndef
mozilla_ipc_SharedMemoryBasic_mach_h
#
define
mozilla_ipc_SharedMemoryBasic_mach_h
#
include
"
base
/
process
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
<
mach
/
port
.
h
>
#
ifdef
FUZZING
#
include
"
mozilla
/
ipc
/
SharedMemoryFuzzer
.
h
"
#
endif
class
MachPortSender
;
class
ReceivePort
;
namespace
mozilla
{
namespace
ipc
{
class
SharedMemoryBasic
final
:
public
SharedMemoryCommon
<
mozilla
:
:
UniqueMachSendRight
>
{
public
:
SharedMemoryBasic
(
)
;
virtual
bool
SetHandle
(
Handle
aHandle
OpenRights
aRights
)
override
;
virtual
bool
Create
(
size_t
aNbytes
)
override
;
virtual
bool
Map
(
size_t
nBytes
void
*
fixed_address
=
nullptr
)
override
;
virtual
void
Unmap
(
)
override
;
virtual
void
CloseHandle
(
)
override
;
virtual
void
*
memory
(
)
const
override
{
#
ifdef
FUZZING
return
SharedMemoryFuzzer
:
:
MutateSharedMemory
(
mMemory
mAllocSize
)
;
#
else
return
mMemory
;
#
endif
}
virtual
SharedMemoryType
Type
(
)
const
override
{
return
TYPE_BASIC
;
}
static
Handle
NULLHandle
(
)
{
return
Handle
(
)
;
}
static
void
*
FindFreeAddressSpace
(
size_t
aSize
)
;
virtual
bool
IsHandleValid
(
const
Handle
&
aHandle
)
const
override
;
virtual
Handle
CloneHandle
(
)
override
;
private
:
~
SharedMemoryBasic
(
)
;
mozilla
:
:
UniqueMachSendRight
mPort
;
void
*
mMemory
;
OpenRights
mOpenRights
;
}
;
}
}
#
endif
