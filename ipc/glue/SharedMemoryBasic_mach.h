#
ifndef
mozilla_ipc_SharedMemoryBasic_mach_h
#
define
mozilla_ipc_SharedMemoryBasic_mach_h
#
include
"
base
/
file_descriptor_posix
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
SharedMemory
.
h
"
#
include
<
mach
/
port
.
h
>
#
include
"
chrome
/
common
/
mach_ipc_mac
.
h
"
#
ifdef
FUZZING
#
include
"
SharedMemoryFuzzer
.
h
"
#
endif
class
MachPortSender
;
class
ReceivePort
;
namespace
mozilla
{
namespace
ipc
{
enum
{
kGetPortsMsg
=
1
kSharePortsMsg
kWaitForTexturesMsg
kUpdateTextureLocksMsg
kReturnIdMsg
kReturnWaitForTexturesMsg
kReturnPortsMsg
kShutdownMsg
kCleanupMsg
}
;
struct
MemoryPorts
{
MachPortSender
*
mSender
;
ReceivePort
*
mReceiver
;
MemoryPorts
(
)
=
default
;
MemoryPorts
(
MachPortSender
*
sender
ReceivePort
*
receiver
)
:
mSender
(
sender
)
mReceiver
(
receiver
)
{
}
}
;
class
SharedMemoryBasic
final
:
public
SharedMemoryCommon
<
mach_port_t
>
{
public
:
static
void
SetupMachMemory
(
pid_t
pid
ReceivePort
*
listen_port
MachPortSender
*
listen_port_ack
MachPortSender
*
send_port
ReceivePort
*
send_port_ack
bool
pidIsParent
)
;
static
void
CleanupForPid
(
pid_t
pid
)
;
static
void
Shutdown
(
)
;
static
bool
SendMachMessage
(
pid_t
pid
MachSendMessage
&
message
MachReceiveMessage
*
response
)
;
SharedMemoryBasic
(
)
;
virtual
bool
SetHandle
(
const
Handle
&
aHandle
OpenRights
aRights
)
override
;
virtual
bool
Create
(
size_t
aNbytes
)
override
;
virtual
bool
Map
(
size_t
nBytes
)
override
;
virtual
void
CloseHandle
(
)
override
;
virtual
void
*
memory
(
)
const
override
{
#
ifdef
FUZZING
return
SharedMemoryFuzzer
:
:
MutateSharedMemory
(
mMemory
mAllocSize
)
;
#
else
return
mMemory
;
#
endif
}
virtual
SharedMemoryType
Type
(
)
const
override
{
return
TYPE_BASIC
;
}
static
Handle
NULLHandle
(
)
{
return
Handle
(
)
;
}
virtual
bool
IsHandleValid
(
const
Handle
&
aHandle
)
const
override
;
virtual
bool
ShareToProcess
(
base
:
:
ProcessId
aProcessId
Handle
*
aNewHandle
)
override
;
private
:
~
SharedMemoryBasic
(
)
;
void
Unmap
(
)
;
mach_port_t
mPort
;
void
*
mMemory
;
OpenRights
mOpenRights
;
}
;
}
}
#
endif
