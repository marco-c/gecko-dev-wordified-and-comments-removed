#
ifndef
IPC_GLUE_ENDPOINT_H_
#
define
IPC_GLUE_ENDPOINT_H_
#
include
<
utility
>
#
include
"
CrashAnnotations
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
base
/
process_util
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
ipc
/
MessageLink
.
h
"
#
include
"
mozilla
/
ipc
/
Transport
.
h
"
#
include
"
mozilla
/
ipc
/
NodeController
.
h
"
#
include
"
mozilla
/
ipc
/
ScopedPort
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nscore
.
h
"
namespace
IPC
{
template
<
class
P
>
struct
ParamTraits
;
}
namespace
mozilla
{
namespace
ipc
{
struct
PrivateIPDLInterface
{
}
;
template
<
class
PFooSide
>
class
Endpoint
{
public
:
using
ProcessId
=
base
:
:
ProcessId
;
Endpoint
(
)
=
default
;
Endpoint
(
const
PrivateIPDLInterface
&
ScopedPort
aPort
ProcessId
aMyPid
ProcessId
aOtherPid
)
:
mPort
(
std
:
:
move
(
aPort
)
)
mMyPid
(
aMyPid
)
mOtherPid
(
aOtherPid
)
{
}
Endpoint
(
const
Endpoint
&
)
=
delete
;
Endpoint
(
Endpoint
&
&
aOther
)
=
default
;
Endpoint
&
operator
=
(
const
Endpoint
&
)
=
delete
;
Endpoint
&
operator
=
(
Endpoint
&
&
aOther
)
=
default
;
ProcessId
OtherPid
(
)
const
{
return
mOtherPid
;
}
bool
Bind
(
PFooSide
*
aActor
)
{
MOZ_RELEASE_ASSERT
(
IsValid
(
)
)
;
MOZ_RELEASE_ASSERT
(
mMyPid
=
=
base
:
:
GetCurrentProcId
(
)
)
;
return
aActor
-
>
Open
(
std
:
:
move
(
mPort
)
mOtherPid
)
;
}
bool
IsValid
(
)
const
{
return
mPort
.
IsValid
(
)
;
}
private
:
friend
struct
IPC
:
:
ParamTraits
<
Endpoint
<
PFooSide
>
>
;
ScopedPort
mPort
;
ProcessId
mMyPid
=
0
;
ProcessId
mOtherPid
=
0
;
}
;
#
if
defined
(
XP_MACOSX
)
void
AnnotateCrashReportWithErrno
(
CrashReporter
:
:
Annotation
tag
int
error
)
;
#
else
inline
void
AnnotateCrashReportWithErrno
(
CrashReporter
:
:
Annotation
tag
int
error
)
{
}
#
endif
template
<
class
PFooParent
class
PFooChild
>
nsresult
CreateEndpoints
(
const
PrivateIPDLInterface
&
aPrivate
base
:
:
ProcessId
aParentDestPid
base
:
:
ProcessId
aChildDestPid
Endpoint
<
PFooParent
>
*
aParentEndpoint
Endpoint
<
PFooChild
>
*
aChildEndpoint
)
{
MOZ_RELEASE_ASSERT
(
aParentDestPid
)
;
MOZ_RELEASE_ASSERT
(
aChildDestPid
)
;
auto
[
parentPort
childPort
]
=
NodeController
:
:
GetSingleton
(
)
-
>
CreatePortPair
(
)
;
*
aParentEndpoint
=
Endpoint
<
PFooParent
>
(
aPrivate
std
:
:
move
(
parentPort
)
aParentDestPid
aChildDestPid
)
;
*
aChildEndpoint
=
Endpoint
<
PFooChild
>
(
aPrivate
std
:
:
move
(
childPort
)
aChildDestPid
aParentDestPid
)
;
return
NS_OK
;
}
template
<
class
PFooSide
>
class
ManagedEndpoint
{
public
:
ManagedEndpoint
(
)
:
mId
(
0
)
{
}
ManagedEndpoint
(
const
PrivateIPDLInterface
&
int32_t
aId
)
:
mId
(
aId
)
{
}
ManagedEndpoint
(
ManagedEndpoint
&
&
aOther
)
:
mId
(
aOther
.
mId
)
{
aOther
.
mId
=
0
;
}
ManagedEndpoint
&
operator
=
(
ManagedEndpoint
&
&
aOther
)
{
mId
=
aOther
.
mId
;
aOther
.
mId
=
0
;
return
*
this
;
}
bool
IsValid
(
)
const
{
return
mId
!
=
0
;
}
Maybe
<
int32_t
>
ActorId
(
)
const
{
return
IsValid
(
)
?
Some
(
mId
)
:
Nothing
(
)
;
}
bool
operator
=
=
(
const
ManagedEndpoint
&
_o
)
const
{
return
mId
=
=
_o
.
mId
;
}
private
:
friend
struct
IPC
:
:
ParamTraits
<
ManagedEndpoint
<
PFooSide
>
>
;
ManagedEndpoint
(
const
ManagedEndpoint
&
)
=
delete
;
ManagedEndpoint
&
operator
=
(
const
ManagedEndpoint
&
)
=
delete
;
int32_t
mId
;
}
;
}
}
#
endif
