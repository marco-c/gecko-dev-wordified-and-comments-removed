#
ifndef
mozilla_ipc_InputStreamUtils_h
#
define
mozilla_ipc_InputStreamUtils_h
#
include
"
mozilla
/
ipc
/
InputStreamParams
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
FileDescriptor
;
class
PFileDescriptorSetChild
;
class
PFileDescriptorSetParent
;
class
PChildToParentStreamChild
;
class
PParentToChildStreamParent
;
class
ParentToChildStreamActorManager
{
public
:
virtual
PParentToChildStreamParent
*
SendPParentToChildStreamConstructor
(
PParentToChildStreamParent
*
aActor
)
=
0
;
virtual
PFileDescriptorSetParent
*
SendPFileDescriptorSetConstructor
(
const
FileDescriptor
&
aFD
)
=
0
;
}
;
class
ChildToParentStreamActorManager
{
public
:
virtual
PChildToParentStreamChild
*
SendPChildToParentStreamConstructor
(
PChildToParentStreamChild
*
aActor
)
=
0
;
virtual
PFileDescriptorSetChild
*
SendPFileDescriptorSetConstructor
(
const
FileDescriptor
&
aFD
)
=
0
;
}
;
class
InputStreamHelper
{
public
:
static
void
SerializeInputStream
(
nsIInputStream
*
aInputStream
InputStreamParams
&
aParams
nsTArray
<
FileDescriptor
>
&
aFileDescriptors
bool
aDelayedStart
uint32_t
aMaxSize
uint32_t
*
aSizeUsed
ParentToChildStreamActorManager
*
aManager
)
;
static
void
SerializeInputStream
(
nsIInputStream
*
aInputStream
InputStreamParams
&
aParams
nsTArray
<
FileDescriptor
>
&
aFileDescriptors
bool
aDelayedStart
uint32_t
aMaxSize
uint32_t
*
aSizeUsed
ChildToParentStreamActorManager
*
aManager
)
;
static
void
SerializeInputStreamAsPipe
(
nsIInputStream
*
aInputStream
InputStreamParams
&
aParams
bool
aDelayedStart
ParentToChildStreamActorManager
*
aManager
)
;
static
void
SerializeInputStreamAsPipe
(
nsIInputStream
*
aInputStream
InputStreamParams
&
aParams
bool
aDelayedStart
ChildToParentStreamActorManager
*
aManager
)
;
static
void
PostSerializationActivation
(
InputStreamParams
&
aParams
bool
aConsumedByIPC
bool
aDelayedStart
)
;
static
void
PostSerializationActivation
(
Maybe
<
InputStreamParams
>
&
aParams
bool
aConsumedByIPC
bool
aDelayedStart
)
;
static
already_AddRefed
<
nsIInputStream
>
DeserializeInputStream
(
const
InputStreamParams
&
aParams
const
nsTArray
<
FileDescriptor
>
&
aFileDescriptors
)
;
}
;
}
}
#
endif
