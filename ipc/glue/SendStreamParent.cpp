#
include
"
mozilla
/
ipc
/
SendStream
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsIAsyncOutputStream
.
h
"
#
include
"
nsIPipe
.
h
"
namespace
mozilla
{
namespace
ipc
{
namespace
{
class
SendStreamParentImpl
final
:
public
SendStreamParent
{
public
:
SendStreamParentImpl
(
nsIAsyncInputStream
*
aReader
nsIAsyncOutputStream
*
aWriter
)
;
~
SendStreamParentImpl
(
)
;
private
:
virtual
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
already_AddRefed
<
nsIInputStream
>
TakeReader
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvBuffer
(
const
nsCString
&
aBuffer
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvClose
(
const
nsresult
&
aRv
)
override
;
nsCOMPtr
<
nsIAsyncInputStream
>
mReader
;
nsCOMPtr
<
nsIAsyncOutputStream
>
mWriter
;
NS_DECL_OWNINGTHREAD
}
;
SendStreamParentImpl
:
:
~
SendStreamParentImpl
(
)
{
}
already_AddRefed
<
nsIInputStream
>
SendStreamParentImpl
:
:
TakeReader
(
)
{
MOZ_ASSERT
(
mReader
)
;
return
mReader
.
forget
(
)
;
}
void
SendStreamParentImpl
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
mWriter
-
>
CloseWithStatus
(
NS_ERROR_ABORT
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
SendStreamParentImpl
:
:
RecvBuffer
(
const
nsCString
&
aBuffer
)
{
uint32_t
numWritten
=
0
;
nsresult
rv
=
mWriter
-
>
Write
(
aBuffer
.
get
(
)
aBuffer
.
Length
(
)
&
numWritten
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Unused
<
<
SendRequestClose
(
rv
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
SendStreamParentImpl
:
:
RecvClose
(
const
nsresult
&
aRv
)
{
mWriter
-
>
CloseWithStatus
(
aRv
)
;
Unused
<
<
Send__delete__
(
this
)
;
return
IPC_OK
(
)
;
}
SendStreamParentImpl
:
:
SendStreamParentImpl
(
nsIAsyncInputStream
*
aReader
nsIAsyncOutputStream
*
aWriter
)
:
mReader
(
aReader
)
mWriter
(
aWriter
)
{
MOZ_ASSERT
(
mReader
)
;
MOZ_ASSERT
(
mWriter
)
;
}
}
SendStreamParent
:
:
~
SendStreamParent
(
)
{
}
PSendStreamParent
*
AllocPSendStreamParent
(
)
{
nsCOMPtr
<
nsIAsyncInputStream
>
reader
;
nsCOMPtr
<
nsIAsyncOutputStream
>
writer
;
nsresult
rv
=
NS_NewPipe2
(
getter_AddRefs
(
reader
)
getter_AddRefs
(
writer
)
true
true
0
UINT32_MAX
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
return
new
SendStreamParentImpl
(
reader
writer
)
;
}
void
DeallocPSendStreamParent
(
PSendStreamParent
*
aActor
)
{
delete
aActor
;
}
}
}
