#
ifndef
mozilla_ipc_ExtensionKitUtils_h
#
define
mozilla_ipc_ExtensionKitUtils_h
#
include
<
functional
>
#
include
<
xpc
/
xpc
.
h
>
#
include
"
mozilla
/
DarwinObjectPtr
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
ipc
/
LaunchError
.
h
"
namespace
mozilla
:
:
ipc
{
class
BEProcessCapabilityGrantDeleter
{
public
:
void
operator
(
)
(
void
*
aGrant
)
const
;
}
;
using
UniqueBEProcessCapabilityGrant
=
mozilla
:
:
UniquePtr
<
void
BEProcessCapabilityGrantDeleter
>
;
class
ExtensionKitProcess
{
public
:
enum
class
Kind
{
WebContent
Networking
Rendering
}
;
static
void
StartProcess
(
Kind
aKind
const
std
:
:
function
<
void
(
Result
<
ExtensionKitProcess
LaunchError
>
&
&
)
>
&
aCompletion
)
;
Kind
GetKind
(
)
const
{
return
mKind
;
}
DarwinObjectPtr
<
xpc_connection_t
>
MakeLibXPCConnection
(
)
;
UniqueBEProcessCapabilityGrant
GrantForegroundCapability
(
)
;
void
Invalidate
(
)
;
ExtensionKitProcess
(
const
ExtensionKitProcess
&
)
;
ExtensionKitProcess
&
operator
=
(
const
ExtensionKitProcess
&
)
;
~
ExtensionKitProcess
(
)
;
private
:
ExtensionKitProcess
(
Kind
aKind
void
*
aProcessObject
)
:
mKind
(
aKind
)
mProcessObject
(
aProcessObject
)
{
}
Kind
mKind
;
void
*
mProcessObject
;
}
;
}
#
endif
