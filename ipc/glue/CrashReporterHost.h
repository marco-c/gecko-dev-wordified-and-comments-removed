#
ifndef
mozilla_ipc_CrashReporterHost_h
#
define
mozilla_ipc_CrashReporterHost_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
nsExceptionHandler
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
CrashReporterHost
{
typedef
mozilla
:
:
ipc
:
:
Shmem
Shmem
;
typedef
CrashReporter
:
:
AnnotationTable
AnnotationTable
;
public
:
CrashReporterHost
(
GeckoProcessType
aProcessType
const
Shmem
&
aShmem
CrashReporter
:
:
ThreadId
aThreadId
)
;
#
ifdef
MOZ_CRASHREPORTER
bool
GenerateCrashReport
(
base
:
:
ProcessId
aPid
)
;
RefPtr
<
nsIFile
>
TakeCrashedChildMinidump
(
base
:
:
ProcessId
aPid
uint32_t
*
aOutSequence
)
;
bool
AdoptMinidump
(
nsIFile
*
aFile
)
;
bool
FinalizeCrashReport
(
)
;
template
<
typename
Toplevel
>
bool
GenerateMinidumpAndPair
(
Toplevel
*
aToplevelProtocol
nsIFile
*
aMinidumpToPair
const
nsACString
&
aPairName
)
{
ScopedProcessHandle
childHandle
;
#
ifdef
XP_MACOSX
childHandle
=
aToplevelProtocol
-
>
Process
(
)
-
>
GetChildTask
(
)
;
#
else
if
(
!
base
:
:
OpenPrivilegedProcessHandle
(
aToplevelProtocol
-
>
OtherPid
(
)
&
childHandle
.
rwget
(
)
)
)
{
NS_WARNING
(
"
Failed
to
open
child
process
handle
.
"
)
;
return
false
;
}
#
endif
nsCOMPtr
<
nsIFile
>
targetDump
;
if
(
!
CrashReporter
:
:
CreateMinidumpsAndPair
(
childHandle
mThreadId
aPairName
aMinidumpToPair
getter_AddRefs
(
targetDump
)
)
)
{
return
false
;
}
return
CrashReporter
:
:
GetIDFromMinidump
(
targetDump
mDumpID
)
;
}
static
void
NotifyCrashService
(
GeckoProcessType
aProcessType
const
nsString
&
aChildDumpID
const
AnnotationTable
*
aNotes
)
;
void
AddNote
(
const
nsCString
&
aKey
const
nsCString
&
aValue
)
;
bool
HasMinidump
(
)
const
{
return
!
mDumpID
.
IsEmpty
(
)
;
}
const
nsString
&
MinidumpID
(
)
const
{
MOZ_ASSERT
(
HasMinidump
(
)
)
;
return
mDumpID
;
}
#
endif
private
:
static
void
AsyncAddCrash
(
int32_t
aProcessType
int32_t
aCrashType
const
nsString
&
aChildDumpID
)
;
private
:
GeckoProcessType
mProcessType
;
Shmem
mShmem
;
CrashReporter
:
:
ThreadId
mThreadId
;
time_t
mStartTime
;
AnnotationTable
mExtraNotes
;
nsString
mDumpID
;
bool
mFinalized
;
}
;
}
}
#
endif
