#
ifndef
mozilla_ipc_CrashReporterHost_h
#
define
mozilla_ipc_CrashReporterHost_h
#
include
<
functional
>
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
GeckoChildProcessHost
;
class
CrashReporterHost
{
typedef
mozilla
:
:
ipc
:
:
Shmem
Shmem
;
typedef
CrashReporter
:
:
AnnotationTable
AnnotationTable
;
typedef
CrashReporter
:
:
ThreadId
ThreadId
;
public
:
template
<
typename
T
>
class
CallbackWrapper
{
public
:
void
Init
(
std
:
:
function
<
void
(
T
)
>
&
&
aCallback
bool
aAsync
)
{
mCallback
=
std
:
:
move
(
aCallback
)
;
mAsync
=
aAsync
;
if
(
IsAsync
(
)
)
{
mTargetThread
=
do_GetCurrentThread
(
)
;
}
}
bool
IsEmpty
(
)
{
return
!
mCallback
;
}
bool
IsAsync
(
)
{
return
mAsync
;
}
void
Invoke
(
T
aResult
)
{
if
(
IsAsync
(
)
)
{
decltype
(
mCallback
)
callback
=
std
:
:
move
(
mCallback
)
;
mTargetThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
ipc
:
:
CrashReporterHost
:
:
CallbackWrapper
:
:
Invoke
"
[
callback
aResult
]
(
)
{
callback
(
aResult
)
;
}
)
NS_DISPATCH_NORMAL
)
;
}
else
{
MOZ_ASSERT
(
!
mTargetThread
)
;
mCallback
(
aResult
)
;
}
Clear
(
)
;
}
private
:
void
Clear
(
)
{
mCallback
=
nullptr
;
mTargetThread
=
nullptr
;
mAsync
=
false
;
}
bool
mAsync
;
std
:
:
function
<
void
(
T
)
>
mCallback
;
nsCOMPtr
<
nsIThread
>
mTargetThread
;
}
;
CrashReporterHost
(
GeckoProcessType
aProcessType
const
Shmem
&
aShmem
ThreadId
aThreadId
)
;
bool
GenerateCrashReport
(
base
:
:
ProcessId
aPid
)
;
RefPtr
<
nsIFile
>
TakeCrashedChildMinidump
(
base
:
:
ProcessId
aPid
uint32_t
*
aOutSequence
)
;
bool
AdoptMinidump
(
nsIFile
*
aFile
)
;
bool
FinalizeCrashReport
(
)
;
void
GenerateMinidumpAndPair
(
GeckoChildProcessHost
*
aChildProcess
nsIFile
*
aMinidumpToPair
const
nsACString
&
aPairName
std
:
:
function
<
void
(
bool
)
>
&
&
aCallback
bool
aAsync
)
;
void
AddAnnotation
(
CrashReporter
:
:
Annotation
aKey
bool
aValue
)
;
void
AddAnnotation
(
CrashReporter
:
:
Annotation
aKey
int
aValue
)
;
void
AddAnnotation
(
CrashReporter
:
:
Annotation
aKey
unsigned
int
aValue
)
;
void
AddAnnotation
(
CrashReporter
:
:
Annotation
aKey
const
nsCString
&
aValue
)
;
bool
HasMinidump
(
)
const
{
return
!
mDumpID
.
IsEmpty
(
)
;
}
const
nsString
&
MinidumpID
(
)
const
{
MOZ_ASSERT
(
HasMinidump
(
)
)
;
return
mDumpID
;
}
private
:
static
void
AsyncAddCrash
(
int32_t
aProcessType
int32_t
aCrashType
const
nsString
&
aChildDumpID
)
;
int32_t
GetCrashType
(
const
CrashReporter
:
:
AnnotationTable
&
aAnnotations
)
;
static
void
NotifyCrashService
(
GeckoProcessType
aProcessType
int32_t
aCrashType
const
nsString
&
aChildDumpID
)
;
private
:
CallbackWrapper
<
bool
>
mCreateMinidumpCallback
;
GeckoProcessType
mProcessType
;
Shmem
mShmem
;
ThreadId
mThreadId
;
time_t
mStartTime
;
AnnotationTable
mExtraAnnotations
;
nsString
mDumpID
;
bool
mFinalized
;
nsCOMPtr
<
nsIFile
>
mTargetDump
;
}
;
}
}
#
endif
