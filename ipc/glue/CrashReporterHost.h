#
ifndef
mozilla_ipc_CrashReporterHost_h
#
define
mozilla_ipc_CrashReporterHost_h
#
include
<
functional
>
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
CrashReporterHost
{
typedef
CrashReporter
:
:
AnnotationTable
AnnotationTable
;
public
:
CrashReporterHost
(
GeckoProcessType
aProcessType
CrashReporter
:
:
ThreadId
aThreadId
)
;
bool
GenerateCrashReport
(
base
:
:
ProcessId
aPid
)
;
RefPtr
<
nsIFile
>
TakeCrashedChildMinidump
(
base
:
:
ProcessId
aPid
uint32_t
*
aOutSequence
)
;
bool
AdoptMinidump
(
nsIFile
*
aFile
const
AnnotationTable
&
aAnnotations
)
;
void
FinalizeCrashReport
(
)
;
void
DeleteCrashReport
(
)
;
template
<
typename
Toplevel
>
bool
GenerateMinidumpAndPair
(
Toplevel
*
aToplevelProtocol
const
nsACString
&
aPairName
)
{
auto
childHandle
=
base
:
:
kInvalidProcessHandle
;
const
auto
cleanup
=
MakeScopeExit
(
[
&
]
(
)
{
if
(
childHandle
&
&
childHandle
!
=
base
:
:
kInvalidProcessHandle
)
{
base
:
:
CloseProcessHandle
(
childHandle
)
;
}
}
)
;
#
ifdef
XP_MACOSX
childHandle
=
aToplevelProtocol
-
>
Process
(
)
-
>
GetChildTask
(
)
;
#
else
if
(
!
base
:
:
OpenPrivilegedProcessHandle
(
aToplevelProtocol
-
>
OtherPid
(
)
&
childHandle
)
)
{
NS_WARNING
(
"
Failed
to
open
child
process
handle
.
"
)
;
return
false
;
}
#
endif
nsCOMPtr
<
nsIFile
>
targetDump
;
if
(
!
CrashReporter
:
:
CreateMinidumpsAndPair
(
childHandle
mThreadId
aPairName
mExtraAnnotations
getter_AddRefs
(
targetDump
)
)
)
{
return
false
;
}
return
CrashReporter
:
:
GetIDFromMinidump
(
targetDump
mDumpID
)
;
}
void
AddAnnotation
(
CrashReporter
:
:
Annotation
aKey
bool
aValue
)
;
void
AddAnnotation
(
CrashReporter
:
:
Annotation
aKey
int
aValue
)
;
void
AddAnnotation
(
CrashReporter
:
:
Annotation
aKey
unsigned
int
aValue
)
;
void
AddAnnotation
(
CrashReporter
:
:
Annotation
aKey
const
nsACString
&
aValue
)
;
bool
HasMinidump
(
)
const
{
return
!
mDumpID
.
IsEmpty
(
)
;
}
const
nsString
&
MinidumpID
(
)
const
{
MOZ_ASSERT
(
HasMinidump
(
)
)
;
return
mDumpID
;
}
const
nsCString
&
AdditionalMinidumps
(
)
const
{
return
mExtraAnnotations
[
CrashReporter
:
:
Annotation
:
:
additional_minidumps
]
;
}
static
void
RecordCrash
(
GeckoProcessType
aProcessType
int32_t
aCrashType
const
nsString
&
aChildDumpID
)
;
private
:
int32_t
GetCrashType
(
)
;
static
void
RecordCrashWithTelemetry
(
GeckoProcessType
aProcessType
int32_t
aCrashType
)
;
static
void
NotifyCrashService
(
GeckoProcessType
aProcessType
int32_t
aCrashType
const
nsString
&
aChildDumpID
)
;
private
:
GeckoProcessType
mProcessType
;
CrashReporter
:
:
ThreadId
mThreadId
;
time_t
mStartTime
;
AnnotationTable
mExtraAnnotations
;
nsString
mDumpID
;
bool
mFinalized
;
}
;
}
}
#
endif
