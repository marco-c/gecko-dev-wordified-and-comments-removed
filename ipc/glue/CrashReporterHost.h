#
ifndef
mozilla_ipc_CrashReporterHost_h
#
define
mozilla_ipc_CrashReporterHost_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
base
/
process
.
h
"
#
ifdef
MOZ_CRASHREPORTER
#
include
"
nsExceptionHandler
.
h
"
#
endif
namespace
mozilla
{
namespace
ipc
{
class
GeckoChildProcessHost
;
class
CrashReporterHost
{
typedef
mozilla
:
:
ipc
:
:
Shmem
Shmem
;
#
ifdef
MOZ_CRASHREPORTER
typedef
CrashReporter
:
:
AnnotationTable
AnnotationTable
;
typedef
CrashReporter
:
:
ThreadId
ThreadId
;
#
else
typedef
int32_t
ThreadId
;
#
endif
public
:
CrashReporterHost
(
GeckoProcessType
aProcessType
const
Shmem
&
aShmem
ThreadId
aThreadId
)
;
#
ifdef
MOZ_CRASHREPORTER
bool
GenerateCrashReport
(
base
:
:
ProcessId
aPid
)
;
RefPtr
<
nsIFile
>
TakeCrashedChildMinidump
(
base
:
:
ProcessId
aPid
uint32_t
*
aOutSequence
)
;
bool
AdoptMinidump
(
nsIFile
*
aFile
)
;
bool
FinalizeCrashReport
(
)
;
bool
GenerateMinidumpAndPair
(
GeckoChildProcessHost
*
aChildProcess
nsIFile
*
aMinidumpToPair
const
nsACString
&
aPairName
)
;
static
void
NotifyCrashService
(
GeckoProcessType
aProcessType
const
nsString
&
aChildDumpID
const
AnnotationTable
*
aNotes
)
;
void
AddNote
(
const
nsCString
&
aKey
const
nsCString
&
aValue
)
;
bool
HasMinidump
(
)
const
{
return
!
mDumpID
.
IsEmpty
(
)
;
}
const
nsString
&
MinidumpID
(
)
const
{
MOZ_ASSERT
(
HasMinidump
(
)
)
;
return
mDumpID
;
}
#
endif
private
:
static
void
AsyncAddCrash
(
int32_t
aProcessType
int32_t
aCrashType
const
nsString
&
aChildDumpID
)
;
private
:
GeckoProcessType
mProcessType
;
Shmem
mShmem
;
ThreadId
mThreadId
;
time_t
mStartTime
;
#
ifdef
MOZ_CRASHREPORTER
AnnotationTable
mExtraNotes
;
#
endif
nsString
mDumpID
;
bool
mFinalized
;
}
;
}
}
#
endif
