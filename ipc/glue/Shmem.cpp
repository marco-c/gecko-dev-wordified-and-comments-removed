#
include
"
Shmem
.
h
"
#
include
"
ProtocolUtils
.
h
"
#
include
"
SharedMemoryBasic
.
h
"
#
include
"
ShmemMessageUtils
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
:
:
ipc
{
static
size_t
MappingSize
(
size_t
aNBytes
)
{
size_t
pageSize
=
SharedMemory
:
:
SystemPageSize
(
)
;
MOZ_ASSERT
(
IsPowerOfTwo
(
pageSize
)
)
;
size_t
diff
=
aNBytes
&
(
pageSize
-
1
)
;
diff
=
(
pageSize
-
diff
)
&
(
pageSize
-
1
)
;
CheckedInt
<
size_t
>
totalSize
=
aNBytes
;
totalSize
+
=
diff
;
#
ifdef
DEBUG
totalSize
+
=
2
*
pageSize
;
#
endif
MOZ_RELEASE_ASSERT
(
totalSize
.
isValid
(
)
)
;
return
totalSize
.
value
(
)
;
}
static
Span
<
char
>
ConfigureAndGetData
(
SharedMemory
*
aSegment
)
{
Span
<
char
>
memory
{
reinterpret_cast
<
char
*
>
(
aSegment
-
>
memory
(
)
)
aSegment
-
>
Size
(
)
}
;
#
ifdef
DEBUG
size_t
pageSize
=
SharedMemory
:
:
SystemPageSize
(
)
;
auto
[
frontSentinel
suffix
]
=
memory
.
SplitAt
(
pageSize
)
;
auto
[
data
backSentinel
]
=
memory
.
SplitAt
(
suffix
.
Length
(
)
-
pageSize
)
;
aSegment
-
>
Protect
(
frontSentinel
.
data
(
)
frontSentinel
.
size
(
)
RightsNone
)
;
aSegment
-
>
Protect
(
data
.
data
(
)
data
.
size
(
)
RightsRead
|
RightsWrite
)
;
aSegment
-
>
Protect
(
backSentinel
.
data
(
)
backSentinel
.
size
(
)
RightsNone
)
;
return
data
;
#
else
return
memory
;
#
endif
}
static
RefPtr
<
SharedMemory
>
AllocSegment
(
size_t
aNBytes
SharedMemory
:
:
SharedMemoryType
aType
)
{
size_t
mappingSize
=
MappingSize
(
aNBytes
)
;
MOZ_RELEASE_ASSERT
(
aType
=
=
SharedMemory
:
:
TYPE_BASIC
"
Unknown
SharedMemoryType
!
"
)
;
RefPtr
<
SharedMemory
>
segment
=
new
SharedMemoryBasic
;
if
(
!
segment
-
>
Create
(
mappingSize
)
|
|
!
segment
-
>
Map
(
mappingSize
)
)
{
NS_WARNING
(
"
Failed
to
create
or
map
segment
"
)
;
return
nullptr
;
}
return
segment
;
}
Shmem
:
:
Shmem
(
size_t
aNBytes
SharedMemoryType
aType
bool
aUnsafe
)
:
Shmem
(
AllocSegment
(
aNBytes
aType
)
aNBytes
aUnsafe
)
{
}
Shmem
:
:
Shmem
(
RefPtr
<
SharedMemory
>
aSegment
size_t
aNBytes
bool
aUnsafe
)
{
if
(
!
aSegment
)
{
return
;
}
size_t
mappingSize
=
MappingSize
(
aNBytes
)
;
if
(
mappingSize
!
=
aSegment
-
>
Size
(
)
)
{
NS_WARNING
(
"
Segment
has
an
incorrect
size
"
)
;
return
;
}
auto
data
=
ConfigureAndGetData
(
aSegment
)
;
MOZ_RELEASE_ASSERT
(
data
.
size
(
)
>
=
aNBytes
)
;
mSegment
=
aSegment
;
mData
=
data
.
data
(
)
;
mSize
=
aNBytes
;
#
ifdef
DEBUG
mUnsafe
=
aUnsafe
;
#
endif
}
#
ifdef
DEBUG
void
Shmem
:
:
AssertInvariants
(
)
const
{
MOZ_ASSERT
(
mSegment
"
null
segment
"
)
;
MOZ_ASSERT
(
mData
"
null
data
pointer
"
)
;
MOZ_ASSERT
(
mSize
>
0
"
invalid
size
"
)
;
MOZ_ASSERT
(
MappingSize
(
mSize
)
=
=
mSegment
-
>
Size
(
)
"
size
doesn
'
t
match
segment
"
)
;
*
reinterpret_cast
<
volatile
char
*
>
(
mData
)
;
*
(
reinterpret_cast
<
volatile
char
*
>
(
mData
)
+
mSize
-
1
)
;
}
void
Shmem
:
:
RevokeRights
(
)
{
AssertInvariants
(
)
;
if
(
!
mUnsafe
)
{
mSegment
-
>
Protect
(
reinterpret_cast
<
char
*
>
(
mSegment
-
>
memory
(
)
)
mSegment
-
>
Size
(
)
RightsNone
)
;
}
*
this
=
Shmem
(
)
;
}
#
endif
}
namespace
IPC
{
void
ParamTraits
<
mozilla
:
:
ipc
:
:
Shmem
>
:
:
Write
(
MessageWriter
*
aWriter
paramType
&
&
aParam
)
{
aParam
.
AssertInvariants
(
)
;
MOZ_ASSERT
(
aParam
.
mSegment
-
>
Type
(
)
=
=
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
:
:
TYPE_BASIC
"
Only
supported
type
is
TYPE_BASIC
"
)
;
WriteParam
(
aWriter
uint64_t
(
aParam
.
mSize
)
)
;
aParam
.
mSegment
-
>
WriteHandle
(
aWriter
)
;
#
ifdef
DEBUG
WriteParam
(
aWriter
aParam
.
mUnsafe
)
;
#
endif
aParam
.
RevokeRights
(
)
;
}
bool
ParamTraits
<
mozilla
:
:
ipc
:
:
Shmem
>
:
:
Read
(
MessageReader
*
aReader
paramType
*
aResult
)
{
*
aResult
=
mozilla
:
:
ipc
:
:
Shmem
(
)
;
uint64_t
rawSize
=
0
;
if
(
!
ReadParam
(
aReader
&
rawSize
)
)
{
return
false
;
}
mozilla
:
:
CheckedInt
<
size_t
>
size
{
rawSize
}
;
if
(
!
size
.
isValid
(
)
|
|
size
=
=
0
)
{
return
false
;
}
RefPtr
<
mozilla
:
:
ipc
:
:
SharedMemory
>
segment
=
new
mozilla
:
:
ipc
:
:
SharedMemoryBasic
;
if
(
!
segment
-
>
ReadHandle
(
aReader
)
|
|
!
segment
-
>
Map
(
mozilla
:
:
ipc
:
:
MappingSize
(
size
.
value
(
)
)
)
)
{
return
false
;
}
bool
unsafe
=
false
;
#
ifdef
DEBUG
if
(
!
ReadParam
(
aReader
&
unsafe
)
)
{
return
false
;
}
#
endif
*
aResult
=
mozilla
:
:
ipc
:
:
Shmem
(
segment
size
.
value
(
)
unsafe
)
;
return
aResult
-
>
IsValid
(
)
;
}
}
