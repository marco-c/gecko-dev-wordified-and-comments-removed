#
ifndef
mozilla_ipc_backgroundutils_h__
#
define
mozilla_ipc_backgroundutils_h__
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nscore
.
h
"
class
nsILoadInfo
;
class
nsIPrincipal
;
class
nsIRedirectHistoryEntry
;
namespace
IPC
{
namespace
detail
{
template
<
class
ParamType
>
struct
OriginAttributesParamTraits
{
typedef
ParamType
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
nsAutoCString
suffix
;
aParam
.
CreateSuffix
(
suffix
)
;
WriteParam
(
aMsg
suffix
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
nsAutoCString
suffix
;
return
ReadParam
(
aMsg
aIter
&
suffix
)
&
&
aResult
-
>
PopulateFromSuffix
(
suffix
)
;
}
}
;
}
template
<
>
struct
ParamTraits
<
mozilla
:
:
OriginAttributes
>
:
public
detail
:
:
OriginAttributesParamTraits
<
mozilla
:
:
OriginAttributes
>
{
}
;
}
namespace
mozilla
{
namespace
net
{
class
OptionalLoadInfoArgs
;
class
ParentLoadInfoForwarderArgs
;
class
RedirectHistoryEntryInfo
;
}
using
namespace
mozilla
:
:
net
;
namespace
ipc
{
class
PrincipalInfo
;
already_AddRefed
<
nsIPrincipal
>
PrincipalInfoToPrincipal
(
const
PrincipalInfo
&
aPrincipalInfo
nsresult
*
aOptionalResult
=
nullptr
)
;
nsresult
PrincipalToPrincipalInfo
(
nsIPrincipal
*
aPrincipal
PrincipalInfo
*
aPrincipalInfo
)
;
bool
IsPincipalInfoPrivate
(
const
PrincipalInfo
&
aPrincipalInfo
)
;
already_AddRefed
<
nsIRedirectHistoryEntry
>
RHEntryInfoToRHEntry
(
const
RedirectHistoryEntryInfo
&
aRHEntryInfo
)
;
nsresult
RHEntryToRHEntryInfo
(
nsIRedirectHistoryEntry
*
aRHEntry
RedirectHistoryEntryInfo
*
aRHEntryInfo
)
;
nsresult
LoadInfoToLoadInfoArgs
(
nsILoadInfo
*
aLoadInfo
OptionalLoadInfoArgs
*
outOptionalLoadInfoArgs
)
;
nsresult
LoadInfoArgsToLoadInfo
(
const
OptionalLoadInfoArgs
&
aOptionalLoadInfoArgs
nsILoadInfo
*
*
outLoadInfo
)
;
void
LoadInfoToParentLoadInfoForwarder
(
nsILoadInfo
*
aLoadInfo
ParentLoadInfoForwarderArgs
*
outLoadInfoChildForwardArgs
)
;
nsresult
MergeParentLoadInfoForwarder
(
ParentLoadInfoForwarderArgs
const
&
outLoadInfoChildForwardArgs
nsILoadInfo
*
aLoadInfo
)
;
}
}
#
endif
