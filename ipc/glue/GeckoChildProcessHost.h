#
ifndef
__IPC_GLUE_GECKOCHILDPROCESSHOST_H__
#
define
__IPC_GLUE_GECKOCHILDPROCESSHOST_H__
#
include
"
base
/
file_path
.
h
"
#
include
"
base
/
process_util
.
h
"
#
include
"
base
/
waitable_event
.
h
"
#
include
"
chrome
/
common
/
child_process_host
.
h
"
#
include
"
mozilla
/
ipc
/
FileDescriptor
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nsString
.
h
"
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
sandboxBroker
.
h
"
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
Sandbox
.
h
"
#
endif
struct
_MacSandboxInfo
;
typedef
_MacSandboxInfo
MacSandboxInfo
;
namespace
mozilla
{
namespace
ipc
{
class
GeckoChildProcessHost
:
public
ChildProcessHost
public
LinkedListElement
<
GeckoChildProcessHost
>
{
protected
:
typedef
mozilla
:
:
Monitor
Monitor
;
typedef
std
:
:
vector
<
std
:
:
string
>
StringVector
;
public
:
typedef
base
:
:
ProcessHandle
ProcessHandle
;
explicit
GeckoChildProcessHost
(
GeckoProcessType
aProcessType
bool
aIsFileContent
=
false
)
;
void
Destroy
(
)
;
static
uint32_t
GetUniqueID
(
)
;
bool
AsyncLaunch
(
StringVector
aExtraOpts
=
StringVector
(
)
)
;
virtual
bool
WaitUntilConnected
(
int32_t
aTimeoutMs
=
0
)
;
bool
LaunchAndWaitForProcessHandle
(
StringVector
aExtraOpts
=
StringVector
(
)
)
;
bool
SyncLaunch
(
StringVector
aExtraOpts
=
StringVector
(
)
int32_t
timeoutMs
=
0
)
;
virtual
void
OnChannelConnected
(
int32_t
peer_pid
)
override
;
virtual
void
OnMessageReceived
(
IPC
:
:
Message
&
&
aMsg
)
override
;
virtual
void
OnChannelError
(
)
override
;
virtual
void
GetQueuedMessages
(
std
:
:
queue
<
IPC
:
:
Message
>
&
queue
)
override
;
struct
LaunchError
{
}
;
template
<
typename
T
>
using
LaunchPromise
=
mozilla
:
:
MozPromise
<
T
LaunchError
false
>
;
using
HandlePromise
=
LaunchPromise
<
base
:
:
ProcessHandle
>
;
RefPtr
<
HandlePromise
>
WhenProcessHandleReady
(
)
;
virtual
void
InitializeChannel
(
)
;
virtual
bool
CanShutdown
(
)
override
{
return
true
;
}
IPC
:
:
Channel
*
GetChannel
(
)
{
return
channelp
(
)
;
}
ProcessHandle
GetChildProcessHandle
(
)
{
return
mChildProcessHandle
;
}
GeckoProcessType
GetProcessType
(
)
{
return
mProcessType
;
}
#
ifdef
XP_MACOSX
task_t
GetChildTask
(
)
{
return
mChildTask
;
}
#
endif
#
ifdef
XP_WIN
void
AddHandleToShare
(
HANDLE
aHandle
)
{
mLaunchOptions
-
>
handles_to_inherit
.
push_back
(
aHandle
)
;
}
#
else
void
AddFdToRemap
(
int
aSrcFd
int
aDstFd
)
{
mLaunchOptions
-
>
fds_to_remap
.
push_back
(
std
:
:
make_pair
(
aSrcFd
aDstFd
)
)
;
}
#
endif
void
Join
(
)
;
void
SetAlreadyDead
(
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
static
bool
StaticFillMacSandboxInfo
(
MacSandboxInfo
&
aInfo
)
;
static
bool
StartMacSandbox
(
int
aArgc
char
*
*
aArgv
std
:
:
string
&
aErrorMessage
)
;
static
MacSandboxType
GetDefaultMacSandboxType
(
)
{
return
MacSandboxType_Utility
;
}
;
#
endif
typedef
std
:
:
function
<
void
(
GeckoChildProcessHost
*
)
>
GeckoProcessCallback
;
static
void
GetAll
(
const
GeckoProcessCallback
&
aCallback
)
;
protected
:
~
GeckoChildProcessHost
(
)
;
GeckoProcessType
mProcessType
;
bool
mIsFileContent
;
Monitor
mMonitor
;
FilePath
mProcessPath
;
UniquePtr
<
base
:
:
LaunchOptions
>
mLaunchOptions
;
enum
{
CREATING_CHANNEL
=
0
CHANNEL_INITIALIZED
PROCESS_CREATED
PROCESS_CONNECTED
PROCESS_ERROR
}
mProcessState
;
static
int32_t
mChildCounter
;
void
PrepareLaunch
(
)
;
#
ifdef
XP_WIN
void
InitWindowsGroupID
(
)
;
nsString
mGroupId
;
#
ifdef
MOZ_SANDBOX
RefPtr
<
AbstractSandboxBroker
>
mSandboxBroker
;
std
:
:
vector
<
std
:
:
wstring
>
mAllowedFilesRead
;
bool
mEnableSandboxLogging
;
int32_t
mSandboxLevel
;
#
endif
#
endif
ProcessHandle
mChildProcessHandle
;
#
if
defined
(
OS_MACOSX
)
task_t
mChildTask
;
#
endif
RefPtr
<
HandlePromise
:
:
Private
>
mHandlePromise
;
bool
OpenPrivilegedHandle
(
base
:
:
ProcessId
aPid
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
virtual
bool
IsMacSandboxLaunchEnabled
(
)
{
return
false
;
}
virtual
bool
FillMacSandboxInfo
(
MacSandboxInfo
&
aInfo
)
;
virtual
bool
AppendMacSandboxParams
(
StringVector
&
aArgs
)
;
#
endif
private
:
DISALLOW_EVIL_CONSTRUCTORS
(
GeckoChildProcessHost
)
;
bool
PerformAsyncLaunch
(
StringVector
aExtraOpts
)
;
void
RunPerformAsyncLaunch
(
StringVector
aExtraOpts
)
;
static
BinPathType
GetPathToBinary
(
FilePath
&
exePath
GeckoProcessType
processType
)
;
void
GetChildLogName
(
const
char
*
origLogName
nsACString
&
buffer
)
;
void
RemoveFromProcessList
(
)
;
std
:
:
queue
<
IPC
:
:
Message
>
mQueue
;
#
if
defined
(
OS_LINUX
)
nsCString
mTmpDirName
;
#
endif
mozilla
:
:
Atomic
<
bool
>
mDestroying
;
static
uint32_t
sNextUniqueID
;
static
StaticAutoPtr
<
LinkedList
<
GeckoChildProcessHost
>
>
sGeckoChildProcessHosts
;
static
StaticMutex
sMutex
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
void
LaunchAndroidService
(
const
char
*
type
const
std
:
:
vector
<
std
:
:
string
>
&
argv
const
base
:
:
file_handle_mapping_vector
&
fds_to_remap
ProcessHandle
*
process_handle
)
;
#
endif
}
;
}
}
#
endif
