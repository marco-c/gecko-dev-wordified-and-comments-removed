#
ifndef
mozilla_ipc_Transport_win_h
#
define
mozilla_ipc_Transport_win_h
1
#
include
<
string
>
#
include
"
base
/
process
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
namespace
mozilla
{
namespace
ipc
{
struct
TransportDescriptor
{
std
:
:
wstring
mPipeName
;
HANDLE
mServerPipeHandle
;
base
:
:
ProcessId
mDestinationProcessId
;
}
;
HANDLE
TransferHandleToProcess
(
HANDLE
source
base
:
:
ProcessId
pid
)
;
}
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
ipc
:
:
TransportDescriptor
>
{
typedef
mozilla
:
:
ipc
:
:
TransportDescriptor
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
HANDLE
pipe
=
mozilla
:
:
ipc
:
:
TransferHandleToProcess
(
aParam
.
mServerPipeHandle
aParam
.
mDestinationProcessId
)
;
WriteParam
(
aMsg
aParam
.
mPipeName
)
;
WriteParam
(
aMsg
pipe
)
;
WriteParam
(
aMsg
aParam
.
mDestinationProcessId
)
;
}
static
bool
Read
(
const
Message
*
aMsg
void
*
*
aIter
paramType
*
aResult
)
{
bool
r
=
(
ReadParam
(
aMsg
aIter
&
aResult
-
>
mPipeName
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mServerPipeHandle
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mDestinationProcessId
)
)
;
if
(
!
r
)
{
return
r
;
}
if
(
aResult
-
>
mServerPipeHandle
!
=
INVALID_HANDLE_VALUE
)
{
MOZ_RELEASE_ASSERT
(
aResult
-
>
mDestinationProcessId
=
=
base
:
:
GetCurrentProcId
(
)
)
;
}
return
r
;
}
}
;
}
#
endif
