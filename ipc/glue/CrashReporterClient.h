#
ifndef
mozilla_ipc_CrashReporterClient_h
#
define
mozilla_ipc_CrashReporterClient_h
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
CrashReporterMetadataShmem
;
class
CrashReporterClient
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CrashReporterClient
)
;
template
<
typename
T
>
static
bool
InitSingleton
(
T
*
aToplevelProtocol
)
{
if
(
recordreplay
:
:
IsRecordingOrReplaying
(
)
)
{
return
true
;
}
Shmem
shmem
;
if
(
!
AllocShmem
(
aToplevelProtocol
&
shmem
)
)
{
return
false
;
}
InitSingletonWithShmem
(
shmem
)
;
Unused
<
<
aToplevelProtocol
-
>
SendInitCrashReporter
(
shmem
CrashReporter
:
:
CurrentThreadId
(
)
)
;
return
true
;
}
template
<
typename
T
>
static
bool
AllocShmem
(
T
*
aToplevelProtocol
Shmem
*
aOutShmem
)
{
static
const
size_t
kShmemSize
=
16
*
1024
;
return
aToplevelProtocol
-
>
AllocUnsafeShmem
(
kShmemSize
SharedMemory
:
:
TYPE_BASIC
aOutShmem
)
;
}
static
void
InitSingletonWithShmem
(
const
Shmem
&
aShmem
)
;
static
void
DestroySingleton
(
)
;
static
RefPtr
<
CrashReporterClient
>
GetSingleton
(
)
;
void
AnnotateCrashReport
(
const
nsCString
&
aKey
const
nsCString
&
aData
)
;
void
AppendAppNotes
(
const
nsCString
&
aData
)
;
private
:
explicit
CrashReporterClient
(
const
Shmem
&
aShmem
)
;
~
CrashReporterClient
(
)
;
private
:
static
StaticMutex
sLock
;
static
StaticRefPtr
<
CrashReporterClient
>
sClientSingleton
;
private
:
UniquePtr
<
CrashReporterMetadataShmem
>
mMetadata
;
}
;
}
}
#
endif
