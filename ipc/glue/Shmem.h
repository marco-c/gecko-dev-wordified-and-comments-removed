#
ifndef
mozilla_ipc_Shmem_h
#
define
mozilla_ipc_Shmem_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
mozilla
/
ipc
/
IPDLParamTraits
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ShadowLayerForwarder
;
}
namespace
ipc
{
class
Shmem
final
{
friend
struct
IPDLParamTraits
<
mozilla
:
:
ipc
:
:
Shmem
>
;
#
ifdef
DEBUG
friend
class
mozilla
:
:
layers
:
:
ShadowLayerForwarder
;
#
endif
public
:
typedef
int32_t
id_t
;
typedef
mozilla
:
:
ipc
:
:
SharedMemory
SharedMemory
;
typedef
SharedMemory
:
:
SharedMemoryType
SharedMemoryType
;
struct
PrivateIPDLCaller
{
}
;
Shmem
(
)
:
mSegment
(
nullptr
)
mData
(
nullptr
)
mSize
(
0
)
mId
(
0
)
{
}
Shmem
(
const
Shmem
&
aOther
)
=
default
;
#
if
!
defined
(
DEBUG
)
Shmem
(
PrivateIPDLCaller
SharedMemory
*
aSegment
id_t
aId
)
:
mSegment
(
aSegment
)
mData
(
aSegment
-
>
memory
(
)
)
mSize
(
0
)
mId
(
aId
)
{
mSize
=
static_cast
<
size_t
>
(
*
PtrToSize
(
mSegment
)
)
;
}
#
else
Shmem
(
PrivateIPDLCaller
SharedMemory
*
aSegment
id_t
aId
)
;
#
endif
~
Shmem
(
)
{
forget
(
PrivateIPDLCaller
(
)
)
;
}
Shmem
&
operator
=
(
const
Shmem
&
aRhs
)
=
default
;
bool
operator
=
=
(
const
Shmem
&
aRhs
)
const
{
return
mSegment
=
=
aRhs
.
mSegment
;
}
bool
IsWritable
(
)
const
{
return
mSegment
!
=
nullptr
;
}
bool
IsReadable
(
)
const
{
return
mSegment
!
=
nullptr
;
}
template
<
typename
T
>
T
*
get
(
)
const
{
AssertInvariants
(
)
;
AssertAligned
<
T
>
(
)
;
return
reinterpret_cast
<
T
*
>
(
mData
)
;
}
template
<
typename
T
>
size_t
Size
(
)
const
{
AssertInvariants
(
)
;
AssertAligned
<
T
>
(
)
;
return
mSize
/
sizeof
(
T
)
;
}
id_t
Id
(
PrivateIPDLCaller
)
const
{
return
mId
;
}
SharedMemory
*
Segment
(
PrivateIPDLCaller
)
const
{
return
mSegment
;
}
#
ifndef
DEBUG
void
RevokeRights
(
PrivateIPDLCaller
)
{
}
#
else
void
RevokeRights
(
PrivateIPDLCaller
)
;
#
endif
void
forget
(
PrivateIPDLCaller
)
{
mSegment
=
nullptr
;
mData
=
nullptr
;
mSize
=
0
;
mId
=
0
;
}
static
already_AddRefed
<
Shmem
:
:
SharedMemory
>
Alloc
(
PrivateIPDLCaller
size_t
aNBytes
SharedMemoryType
aType
bool
aUnsafe
bool
aProtect
=
false
)
;
UniquePtr
<
IPC
:
:
Message
>
ShareTo
(
PrivateIPDLCaller
base
:
:
ProcessId
aTargetPid
int32_t
routingId
)
;
UniquePtr
<
IPC
:
:
Message
>
UnshareFrom
(
PrivateIPDLCaller
int32_t
routingId
)
;
static
already_AddRefed
<
SharedMemory
>
OpenExisting
(
PrivateIPDLCaller
const
IPC
:
:
Message
&
aDescriptor
id_t
*
aId
bool
aProtect
=
false
)
;
static
void
Dealloc
(
PrivateIPDLCaller
SharedMemory
*
aSegment
)
;
private
:
template
<
typename
T
>
void
AssertAligned
(
)
const
{
if
(
0
!
=
(
mSize
%
sizeof
(
T
)
)
)
MOZ_CRASH
(
"
shmem
is
not
T
-
aligned
"
)
;
}
#
if
!
defined
(
DEBUG
)
void
AssertInvariants
(
)
const
{
}
static
uint32_t
*
PtrToSize
(
SharedMemory
*
aSegment
)
{
char
*
endOfSegment
=
reinterpret_cast
<
char
*
>
(
aSegment
-
>
memory
(
)
)
+
aSegment
-
>
Size
(
)
;
return
reinterpret_cast
<
uint32_t
*
>
(
endOfSegment
-
sizeof
(
uint32_t
)
)
;
}
#
else
void
AssertInvariants
(
)
const
;
#
endif
RefPtr
<
SharedMemory
>
mSegment
;
void
*
mData
;
size_t
mSize
;
id_t
mId
;
}
;
template
<
>
struct
IPDLParamTraits
<
Shmem
>
{
typedef
Shmem
paramType
;
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
paramType
&
&
aParam
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
paramType
*
aResult
)
;
static
void
Log
(
const
paramType
&
aParam
std
:
:
wstring
*
aLog
)
{
aLog
-
>
append
(
L
"
(
shmem
segment
)
"
)
;
}
}
;
}
}
#
endif
