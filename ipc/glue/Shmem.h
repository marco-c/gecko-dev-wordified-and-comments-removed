#
ifndef
mozilla_ipc_Shmem_h
#
define
mozilla_ipc_Shmem_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
IPC
{
template
<
typename
T
>
struct
ParamTraits
;
}
namespace
mozilla
:
:
ipc
{
class
Shmem
final
{
friend
struct
IPC
:
:
ParamTraits
<
mozilla
:
:
ipc
:
:
Shmem
>
;
public
:
typedef
mozilla
:
:
ipc
:
:
SharedMemory
SharedMemory
;
typedef
SharedMemory
:
:
SharedMemoryType
SharedMemoryType
;
Shmem
(
)
=
default
;
Shmem
(
size_t
aNBytes
SharedMemoryType
aType
bool
aUnsafe
)
;
Shmem
(
RefPtr
<
SharedMemory
>
aSegment
size_t
aNBytes
bool
aUnsafe
)
;
Shmem
(
const
Shmem
&
aOther
)
=
default
;
Shmem
&
operator
=
(
const
Shmem
&
aRhs
)
=
default
;
bool
operator
=
=
(
const
Shmem
&
aRhs
)
const
{
return
mSegment
=
=
aRhs
.
mSegment
;
}
bool
operator
!
=
(
const
Shmem
&
aRhs
)
const
{
return
mSegment
!
=
aRhs
.
mSegment
;
}
bool
IsValid
(
)
const
{
return
mSegment
!
=
nullptr
;
}
bool
IsWritable
(
)
const
{
return
IsValid
(
)
;
}
bool
IsReadable
(
)
const
{
return
IsValid
(
)
;
}
template
<
typename
T
>
T
*
get
(
)
const
{
AssertInvariants
(
)
;
AssertAligned
<
T
>
(
)
;
return
reinterpret_cast
<
T
*
>
(
mData
)
;
}
template
<
typename
T
>
size_t
Size
(
)
const
{
AssertInvariants
(
)
;
AssertAligned
<
T
>
(
)
;
return
mSize
/
sizeof
(
T
)
;
}
template
<
typename
T
>
Range
<
T
>
Range
(
)
const
{
return
{
get
<
T
>
(
)
Size
<
T
>
(
)
}
;
}
#
ifndef
DEBUG
void
RevokeRights
(
)
{
*
this
=
Shmem
(
)
;
}
#
else
void
RevokeRights
(
)
;
#
endif
private
:
template
<
typename
T
>
void
AssertAligned
(
)
const
{
MOZ_RELEASE_ASSERT
(
0
=
=
(
mSize
%
sizeof
(
T
)
)
"
shmem
size
is
not
a
multiple
of
sizeof
(
T
)
"
)
;
}
#
ifndef
DEBUG
void
AssertInvariants
(
)
const
{
}
#
else
void
AssertInvariants
(
)
const
;
#
endif
RefPtr
<
SharedMemory
>
mSegment
;
void
*
mData
=
nullptr
;
size_t
mSize
=
0
;
#
ifdef
DEBUG
bool
mUnsafe
=
false
;
#
endif
}
;
}
#
endif
