#
include
"
ProcessUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
GeckoArgs
.
h
"
#
include
"
mozilla
/
ipc
/
GeckoChildProcessHost
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
XPCSelfHostedShmem
.
h
"
namespace
mozilla
{
namespace
ipc
{
SharedPreferenceSerializer
:
:
SharedPreferenceSerializer
(
std
:
:
function
<
bool
(
const
char
*
bool
)
>
&
&
aShouldSanitizeFn
)
:
mPrefMapSize
(
0
)
mPrefsLength
(
0
)
mShouldSanitizeFn
(
aShouldSanitizeFn
)
{
MOZ_COUNT_CTOR
(
SharedPreferenceSerializer
)
;
}
SharedPreferenceSerializer
:
:
~
SharedPreferenceSerializer
(
)
{
MOZ_COUNT_DTOR
(
SharedPreferenceSerializer
)
;
}
SharedPreferenceSerializer
:
:
SharedPreferenceSerializer
(
SharedPreferenceSerializer
&
&
aOther
)
:
mPrefMapSize
(
aOther
.
mPrefMapSize
)
mPrefsLength
(
aOther
.
mPrefsLength
)
mPrefMapHandle
(
std
:
:
move
(
aOther
.
mPrefMapHandle
)
)
mPrefsHandle
(
std
:
:
move
(
aOther
.
mPrefsHandle
)
)
{
MOZ_COUNT_CTOR
(
SharedPreferenceSerializer
)
;
}
bool
SharedPreferenceSerializer
:
:
SerializeToSharedMemory
(
)
{
mPrefMapHandle
=
Preferences
:
:
EnsureSnapshot
(
&
mPrefMapSize
)
.
TakePlatformHandle
(
)
;
nsAutoCStringN
<
1024
>
prefs
;
Preferences
:
:
SerializePreferences
(
prefs
mShouldSanitizeFn
)
;
mPrefsLength
=
prefs
.
Length
(
)
;
base
:
:
SharedMemory
shm
;
if
(
!
shm
.
Create
(
prefs
.
Length
(
)
)
)
{
NS_ERROR
(
"
failed
to
create
shared
memory
in
the
parent
"
)
;
return
false
;
}
if
(
!
shm
.
Map
(
prefs
.
Length
(
)
)
)
{
NS_ERROR
(
"
failed
to
map
shared
memory
in
the
parent
"
)
;
return
false
;
}
memcpy
(
static_cast
<
char
*
>
(
shm
.
memory
(
)
)
prefs
.
get
(
)
mPrefsLength
)
;
mPrefsHandle
=
shm
.
TakeHandle
(
)
;
return
true
;
}
void
SharedPreferenceSerializer
:
:
AddSharedPrefCmdLineArgs
(
mozilla
:
:
ipc
:
:
GeckoChildProcessHost
&
procHost
std
:
:
vector
<
std
:
:
string
>
&
aExtraOpts
)
const
{
#
if
defined
(
XP_WIN
)
procHost
.
AddHandleToShare
(
GetPrefsHandle
(
)
.
get
(
)
)
;
procHost
.
AddHandleToShare
(
GetPrefMapHandle
(
)
.
get
(
)
)
;
geckoargs
:
:
sPrefsHandle
.
Put
(
(
uintptr_t
)
(
GetPrefsHandle
(
)
.
get
(
)
)
aExtraOpts
)
;
geckoargs
:
:
sPrefMapHandle
.
Put
(
(
uintptr_t
)
(
GetPrefMapHandle
(
)
.
get
(
)
)
aExtraOpts
)
;
#
else
procHost
.
AddFdToRemap
(
GetPrefsHandle
(
)
.
get
(
)
kPrefsFileDescriptor
)
;
procHost
.
AddFdToRemap
(
GetPrefMapHandle
(
)
.
get
(
)
kPrefMapFileDescriptor
)
;
#
endif
geckoargs
:
:
sPrefsLen
.
Put
(
(
uintptr_t
)
(
GetPrefsLength
(
)
)
aExtraOpts
)
;
geckoargs
:
:
sPrefMapSize
.
Put
(
(
uintptr_t
)
(
GetPrefMapSize
(
)
)
aExtraOpts
)
;
}
#
ifdef
ANDROID
static
int
gPrefsFd
=
-
1
;
static
int
gPrefMapFd
=
-
1
;
void
SetPrefsFd
(
int
aFd
)
{
gPrefsFd
=
aFd
;
}
void
SetPrefMapFd
(
int
aFd
)
{
gPrefMapFd
=
aFd
;
}
#
endif
SharedPreferenceDeserializer
:
:
SharedPreferenceDeserializer
(
)
{
MOZ_COUNT_CTOR
(
SharedPreferenceDeserializer
)
;
}
SharedPreferenceDeserializer
:
:
~
SharedPreferenceDeserializer
(
)
{
MOZ_COUNT_DTOR
(
SharedPreferenceDeserializer
)
;
}
bool
SharedPreferenceDeserializer
:
:
DeserializeFromSharedMemory
(
uint64_t
aPrefsHandle
uint64_t
aPrefMapHandle
uint64_t
aPrefsLen
uint64_t
aPrefMapSize
)
{
Maybe
<
base
:
:
SharedMemoryHandle
>
prefsHandle
;
#
ifdef
XP_WIN
prefsHandle
=
Some
(
UniqueFileHandle
(
HANDLE
(
(
uintptr_t
)
(
aPrefsHandle
)
)
)
)
;
if
(
!
aPrefsHandle
)
{
return
false
;
}
FileDescriptor
:
:
UniquePlatformHandle
handle
(
HANDLE
(
(
uintptr_t
)
(
aPrefMapHandle
)
)
)
;
if
(
!
aPrefMapHandle
)
{
return
false
;
}
mPrefMapHandle
.
emplace
(
std
:
:
move
(
handle
)
)
;
#
endif
mPrefsLen
=
Some
(
(
uintptr_t
)
(
aPrefsLen
)
)
;
if
(
!
aPrefsLen
)
{
return
false
;
}
mPrefMapSize
=
Some
(
(
uintptr_t
)
(
aPrefMapSize
)
)
;
if
(
!
aPrefMapSize
)
{
return
false
;
}
#
ifdef
ANDROID
MOZ_RELEASE_ASSERT
(
gPrefsFd
!
=
-
1
)
;
prefsHandle
=
Some
(
UniqueFileHandle
(
gPrefsFd
)
)
;
mPrefMapHandle
.
emplace
(
UniqueFileHandle
(
gPrefMapFd
)
)
;
#
elif
XP_UNIX
prefsHandle
=
Some
(
UniqueFileHandle
(
kPrefsFileDescriptor
)
)
;
mPrefMapHandle
.
emplace
(
UniqueFileHandle
(
kPrefMapFileDescriptor
)
)
;
#
endif
if
(
prefsHandle
.
isNothing
(
)
|
|
mPrefsLen
.
isNothing
(
)
|
|
mPrefMapHandle
.
isNothing
(
)
|
|
mPrefMapSize
.
isNothing
(
)
)
{
return
false
;
}
Preferences
:
:
InitSnapshot
(
mPrefMapHandle
.
ref
(
)
*
mPrefMapSize
)
;
if
(
!
mShmem
.
SetHandle
(
std
:
:
move
(
*
prefsHandle
)
true
)
)
{
NS_ERROR
(
"
failed
to
open
shared
memory
in
the
child
"
)
;
return
false
;
}
if
(
!
mShmem
.
Map
(
*
mPrefsLen
)
)
{
NS_ERROR
(
"
failed
to
map
shared
memory
in
the
child
"
)
;
return
false
;
}
Preferences
:
:
DeserializePreferences
(
static_cast
<
char
*
>
(
mShmem
.
memory
(
)
)
*
mPrefsLen
)
;
return
true
;
}
const
FileDescriptor
&
SharedPreferenceDeserializer
:
:
GetPrefMapHandle
(
)
const
{
MOZ_ASSERT
(
mPrefMapHandle
.
isSome
(
)
)
;
return
mPrefMapHandle
.
ref
(
)
;
}
#
ifdef
XP_UNIX
static
const
int
kJSInitFileDescriptor
=
11
;
#
endif
void
ExportSharedJSInit
(
mozilla
:
:
ipc
:
:
GeckoChildProcessHost
&
procHost
std
:
:
vector
<
std
:
:
string
>
&
aExtraOpts
)
{
#
ifdef
ANDROID
return
;
#
else
auto
&
shmem
=
xpc
:
:
SelfHostedShmem
:
:
GetSingleton
(
)
;
const
mozilla
:
:
UniqueFileHandle
&
uniqHandle
=
shmem
.
Handle
(
)
;
size_t
len
=
shmem
.
Content
(
)
.
Length
(
)
;
if
(
!
uniqHandle
|
|
!
len
)
{
return
;
}
mozilla
:
:
detail
:
:
FileHandleType
handle
=
uniqHandle
.
get
(
)
;
#
if
defined
(
XP_WIN
)
procHost
.
AddHandleToShare
(
HANDLE
(
handle
)
)
;
geckoargs
:
:
sJsInitHandle
.
Put
(
(
uintptr_t
)
(
HANDLE
(
handle
)
)
aExtraOpts
)
;
#
else
procHost
.
AddFdToRemap
(
handle
kJSInitFileDescriptor
)
;
#
endif
geckoargs
:
:
sJsInitLen
.
Put
(
(
uintptr_t
)
(
len
)
aExtraOpts
)
;
#
endif
}
bool
ImportSharedJSInit
(
uint64_t
aJsInitHandle
uint64_t
aJsInitLen
)
{
if
(
!
aJsInitLen
)
{
return
true
;
}
#
ifdef
XP_WIN
if
(
!
aJsInitHandle
)
{
return
true
;
}
#
endif
#
ifdef
XP_WIN
base
:
:
SharedMemoryHandle
handle
(
HANDLE
(
(
uintptr_t
)
(
aJsInitHandle
)
)
)
;
if
(
!
aJsInitHandle
)
{
return
false
;
}
#
endif
size_t
len
=
(
uintptr_t
)
(
aJsInitLen
)
;
if
(
!
aJsInitLen
)
{
return
false
;
}
#
ifdef
XP_UNIX
auto
handle
=
UniqueFileHandle
(
kJSInitFileDescriptor
)
;
#
endif
auto
&
shmem
=
xpc
:
:
SelfHostedShmem
:
:
GetSingleton
(
)
;
if
(
!
shmem
.
InitFromChild
(
std
:
:
move
(
handle
)
len
)
)
{
NS_ERROR
(
"
failed
to
open
shared
memory
in
the
child
"
)
;
return
false
;
}
return
true
;
}
}
}
