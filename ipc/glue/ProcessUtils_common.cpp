#
include
"
ProcessUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
namespace
mozilla
{
namespace
ipc
{
SharedPreferenceSerializer
:
:
SharedPreferenceSerializer
(
)
:
mPrefMapSize
(
0
)
{
MOZ_COUNT_CTOR
(
SharedPreferenceSerializer
)
;
}
SharedPreferenceSerializer
:
:
~
SharedPreferenceSerializer
(
)
{
MOZ_COUNT_DTOR
(
SharedPreferenceSerializer
)
;
}
SharedPreferenceSerializer
:
:
SharedPreferenceSerializer
(
SharedPreferenceSerializer
&
&
aOther
)
:
mPrefMapSize
(
aOther
.
mPrefMapSize
)
mPrefMapHandle
(
std
:
:
move
(
aOther
.
mPrefMapHandle
)
)
mShm
(
std
:
:
move
(
aOther
.
mShm
)
)
mPrefs
(
std
:
:
move
(
aOther
.
mPrefs
)
)
{
MOZ_COUNT_CTOR
(
SharedPreferenceSerializer
)
;
}
bool
SharedPreferenceSerializer
:
:
SerializeToSharedMemory
(
)
{
mPrefMapHandle
=
Preferences
:
:
EnsureSnapshot
(
&
mPrefMapSize
)
.
ClonePlatformHandle
(
)
;
Preferences
:
:
SerializePreferences
(
mPrefs
)
;
if
(
!
mShm
.
Create
(
mPrefs
.
Length
(
)
)
)
{
NS_ERROR
(
"
failed
to
create
shared
memory
in
the
parent
"
)
;
return
false
;
}
if
(
!
mShm
.
Map
(
mPrefs
.
Length
(
)
)
)
{
NS_ERROR
(
"
failed
to
map
shared
memory
in
the
parent
"
)
;
return
false
;
}
memcpy
(
static_cast
<
char
*
>
(
mShm
.
memory
(
)
)
mPrefs
.
get
(
)
mPrefs
.
Length
(
)
)
;
return
true
;
}
#
ifdef
ANDROID
static
int
gPrefsFd
=
-
1
;
static
int
gPrefMapFd
=
-
1
;
void
SetPrefsFd
(
int
aFd
)
{
gPrefsFd
=
aFd
;
}
void
SetPrefMapFd
(
int
aFd
)
{
gPrefMapFd
=
aFd
;
}
#
endif
SharedPreferenceDeserializer
:
:
SharedPreferenceDeserializer
(
)
{
MOZ_COUNT_CTOR
(
SharedPreferenceDeserializer
)
;
}
SharedPreferenceDeserializer
:
:
~
SharedPreferenceDeserializer
(
)
{
MOZ_COUNT_DTOR
(
SharedPreferenceDeserializer
)
;
}
bool
SharedPreferenceDeserializer
:
:
DeserializeFromSharedMemory
(
char
*
aPrefsHandleStr
char
*
aPrefMapHandleStr
char
*
aPrefsLenStr
char
*
aPrefMapSizeStr
)
{
auto
parseUIntPtrArg
=
[
]
(
char
*
&
aArg
)
{
return
uintptr_t
(
strtoull
(
aArg
&
aArg
10
)
)
;
}
;
#
ifdef
XP_WIN
auto
parseHandleArg
=
[
&
]
(
char
*
&
aArg
)
{
return
HANDLE
(
parseUIntPtrArg
(
aArg
)
)
;
}
;
mPrefsHandle
=
Some
(
parseHandleArg
(
aPrefsHandleStr
)
)
;
if
(
aPrefsHandleStr
[
0
]
!
=
'
\
0
'
)
{
return
false
;
}
FileDescriptor
:
:
UniquePlatformHandle
handle
(
parseHandleArg
(
aPrefMapHandleStr
)
)
;
if
(
aPrefMapHandleStr
[
0
]
!
=
'
\
0
'
)
{
return
false
;
}
mPrefMapHandle
.
emplace
(
handle
.
get
(
)
)
;
#
endif
mPrefsLen
=
Some
(
parseUIntPtrArg
(
aPrefsLenStr
)
)
;
if
(
aPrefsLenStr
[
0
]
!
=
'
\
0
'
)
{
return
false
;
}
mPrefMapSize
=
Some
(
parseUIntPtrArg
(
aPrefMapSizeStr
)
)
;
if
(
aPrefMapSizeStr
[
0
]
!
=
'
\
0
'
)
{
return
false
;
}
#
ifdef
ANDROID
MOZ_RELEASE_ASSERT
(
gPrefsFd
!
=
-
1
)
;
mPrefsHandle
=
Some
(
base
:
:
FileDescriptor
(
gPrefsFd
true
)
)
;
FileDescriptor
:
:
UniquePlatformHandle
handle
(
gPrefMapFd
)
;
mPrefMapHandle
.
emplace
(
handle
.
get
(
)
)
;
#
elif
XP_UNIX
mPrefsHandle
=
Some
(
base
:
:
FileDescriptor
(
kPrefsFileDescriptor
true
)
)
;
FileDescriptor
:
:
UniquePlatformHandle
handle
(
kPrefMapFileDescriptor
)
;
mPrefMapHandle
.
emplace
(
handle
.
get
(
)
)
;
#
endif
if
(
mPrefsHandle
.
isNothing
(
)
|
|
mPrefsLen
.
isNothing
(
)
|
|
mPrefMapHandle
.
isNothing
(
)
|
|
mPrefMapSize
.
isNothing
(
)
)
{
return
false
;
}
Preferences
:
:
InitSnapshot
(
mPrefMapHandle
.
ref
(
)
*
mPrefMapSize
)
;
base
:
:
SharedMemory
shm
;
if
(
!
shm
.
SetHandle
(
*
mPrefsHandle
true
)
)
{
NS_ERROR
(
"
failed
to
open
shared
memory
in
the
child
"
)
;
return
false
;
}
if
(
!
shm
.
Map
(
*
mPrefsLen
)
)
{
NS_ERROR
(
"
failed
to
map
shared
memory
in
the
child
"
)
;
return
false
;
}
Preferences
:
:
DeserializePreferences
(
static_cast
<
char
*
>
(
shm
.
memory
(
)
)
*
mPrefsLen
)
;
return
true
;
}
const
base
:
:
SharedMemoryHandle
&
SharedPreferenceDeserializer
:
:
GetPrefsHandle
(
)
const
{
MOZ_ASSERT
(
mPrefsHandle
.
isSome
(
)
)
;
return
mPrefsHandle
.
ref
(
)
;
}
const
FileDescriptor
&
SharedPreferenceDeserializer
:
:
GetPrefMapHandle
(
)
const
{
MOZ_ASSERT
(
mPrefMapHandle
.
isSome
(
)
)
;
return
mPrefMapHandle
.
ref
(
)
;
}
}
}
