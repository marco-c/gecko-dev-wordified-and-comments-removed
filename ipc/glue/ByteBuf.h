#
ifndef
mozilla_ipc_ByteBuf_h
#
define
mozilla_ipc_ByteBuf_h
#
include
"
ipc
/
IPCMessageUtils
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
ByteBuf
final
{
friend
struct
IPC
:
:
ParamTraits
<
mozilla
:
:
ipc
:
:
ByteBuf
>
;
public
:
bool
Allocate
(
size_t
aLength
)
{
MOZ_ASSERT
(
mData
=
=
nullptr
)
;
mData
=
(
uint8_t
*
)
malloc
(
aLength
)
;
if
(
!
mData
)
{
return
false
;
}
mLen
=
aLength
;
mCapacity
=
aLength
;
return
true
;
}
ByteBuf
(
)
:
mData
(
nullptr
)
mLen
(
0
)
mCapacity
(
0
)
{
}
ByteBuf
(
uint8_t
*
aData
size_t
aLen
size_t
aCapacity
)
:
mData
(
aData
)
mLen
(
aLen
)
mCapacity
(
aCapacity
)
{
}
ByteBuf
(
const
ByteBuf
&
aFrom
)
=
delete
;
ByteBuf
(
ByteBuf
&
&
aFrom
)
:
mData
(
aFrom
.
mData
)
mLen
(
aFrom
.
mLen
)
mCapacity
(
aFrom
.
mCapacity
)
{
aFrom
.
mData
=
nullptr
;
aFrom
.
mLen
=
0
;
aFrom
.
mCapacity
=
0
;
}
~
ByteBuf
(
)
{
free
(
mData
)
;
}
uint8_t
*
mData
;
size_t
mLen
;
size_t
mCapacity
;
}
;
}
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
ipc
:
:
ByteBuf
>
{
typedef
mozilla
:
:
ipc
:
:
ByteBuf
paramType
;
static
void
Write
(
Message
*
aMsg
paramType
&
aParam
)
{
WriteParam
(
aMsg
aParam
.
mLen
)
;
aMsg
-
>
WriteBytesZeroCopy
(
aParam
.
mData
aParam
.
mLen
aParam
.
mCapacity
)
;
aParam
.
mData
=
nullptr
;
aParam
.
mCapacity
=
0
;
aParam
.
mLen
=
0
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
size_t
length
;
return
ReadParam
(
aMsg
aIter
&
length
)
&
&
aResult
-
>
Allocate
(
length
)
&
&
aMsg
-
>
ReadBytesInto
(
aIter
aResult
-
>
mData
length
)
;
}
static
void
Log
(
const
paramType
&
aParam
std
:
:
wstring
*
aLog
)
{
aLog
-
>
append
(
L
"
(
byte
buf
)
"
)
;
}
}
;
}
#
endif
