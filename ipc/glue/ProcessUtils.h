#
ifndef
mozilla_ipc_ProcessUtils_h
#
define
mozilla_ipc_ProcessUtils_h
#
include
<
functional
>
#
include
<
vector
>
#
include
"
mozilla
/
ipc
/
FileDescriptor
.
h
"
#
include
"
base
/
shared_memory
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsXULAppAPI
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
GeckoChildProcessHost
;
void
SetThisProcessName
(
const
char
*
aName
)
;
class
SharedPreferenceSerializer
final
{
public
:
explicit
SharedPreferenceSerializer
(
)
;
SharedPreferenceSerializer
(
SharedPreferenceSerializer
&
&
aOther
)
;
~
SharedPreferenceSerializer
(
)
;
bool
SerializeToSharedMemory
(
const
GeckoProcessType
aDestinationProcessType
const
nsACString
&
aDestinationRemoteType
)
;
size_t
GetPrefMapSize
(
)
const
{
return
mPrefMapSize
;
}
size_t
GetPrefsLength
(
)
const
{
return
mPrefsLength
;
}
const
UniqueFileHandle
&
GetPrefsHandle
(
)
const
{
return
mPrefsHandle
;
}
const
UniqueFileHandle
&
GetPrefMapHandle
(
)
const
{
return
mPrefMapHandle
;
}
void
AddSharedPrefCmdLineArgs
(
GeckoChildProcessHost
&
procHost
std
:
:
vector
<
std
:
:
string
>
&
aExtraOpts
)
const
;
private
:
DISALLOW_COPY_AND_ASSIGN
(
SharedPreferenceSerializer
)
;
size_t
mPrefMapSize
;
size_t
mPrefsLength
;
UniqueFileHandle
mPrefMapHandle
;
UniqueFileHandle
mPrefsHandle
;
}
;
class
SharedPreferenceDeserializer
final
{
public
:
SharedPreferenceDeserializer
(
)
;
~
SharedPreferenceDeserializer
(
)
;
bool
DeserializeFromSharedMemory
(
uint64_t
aPrefsHandle
uint64_t
aPrefMapHandle
uint64_t
aPrefsLen
uint64_t
aPrefMapSize
)
;
const
FileDescriptor
&
GetPrefMapHandle
(
)
const
;
private
:
DISALLOW_COPY_AND_ASSIGN
(
SharedPreferenceDeserializer
)
;
Maybe
<
FileDescriptor
>
mPrefMapHandle
;
Maybe
<
size_t
>
mPrefsLen
;
Maybe
<
size_t
>
mPrefMapSize
;
base
:
:
SharedMemory
mShmem
;
}
;
#
if
defined
(
ANDROID
)
|
|
defined
(
XP_IOS
)
void
SetPrefsFd
(
int
aFd
)
;
void
SetPrefMapFd
(
int
aFd
)
;
#
endif
void
ExportSharedJSInit
(
GeckoChildProcessHost
&
procHost
std
:
:
vector
<
std
:
:
string
>
&
aExtraOpts
)
;
bool
ImportSharedJSInit
(
uint64_t
aJsInitHandle
uint64_t
aJsInitLen
)
;
}
}
#
endif
