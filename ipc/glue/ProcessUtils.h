#
ifndef
mozilla_ipc_ProcessUtils_h
#
define
mozilla_ipc_ProcessUtils_h
#
include
"
FileDescriptor
.
h
"
#
include
"
base
/
shared_memory
.
h
"
namespace
mozilla
{
namespace
ipc
{
void
SetThisProcessName
(
const
char
*
aName
)
;
class
SharedPreferenceSerializer
final
{
public
:
SharedPreferenceSerializer
(
)
;
SharedPreferenceSerializer
(
SharedPreferenceSerializer
&
&
aOther
)
;
~
SharedPreferenceSerializer
(
)
;
bool
SerializeToSharedMemory
(
)
;
base
:
:
SharedMemoryHandle
GetSharedMemoryHandle
(
)
const
{
return
mShm
.
handle
(
)
;
}
const
FileDescriptor
:
:
UniquePlatformHandle
&
GetPrefMapHandle
(
)
const
{
return
mPrefMapHandle
;
}
nsACString
:
:
size_type
GetPrefLength
(
)
const
{
return
mPrefs
.
Length
(
)
;
}
size_t
GetPrefMapSize
(
)
const
{
return
mPrefMapSize
;
}
private
:
DISALLOW_COPY_AND_ASSIGN
(
SharedPreferenceSerializer
)
;
size_t
mPrefMapSize
;
FileDescriptor
:
:
UniquePlatformHandle
mPrefMapHandle
;
base
:
:
SharedMemory
mShm
;
nsAutoCStringN
<
1024
>
mPrefs
;
}
;
class
SharedPreferenceDeserializer
final
{
public
:
SharedPreferenceDeserializer
(
)
;
~
SharedPreferenceDeserializer
(
)
;
bool
DeserializeFromSharedMemory
(
char
*
aPrefsHandleStr
char
*
aPrefMapHandleStr
char
*
aPrefsLenStr
char
*
aPrefMapSizeStr
)
;
const
base
:
:
SharedMemoryHandle
&
GetPrefsHandle
(
)
const
;
const
FileDescriptor
&
GetPrefMapHandle
(
)
const
;
private
:
DISALLOW_COPY_AND_ASSIGN
(
SharedPreferenceDeserializer
)
;
Maybe
<
base
:
:
SharedMemoryHandle
>
mPrefsHandle
;
Maybe
<
FileDescriptor
>
mPrefMapHandle
;
Maybe
<
size_t
>
mPrefsLen
;
Maybe
<
size_t
>
mPrefMapSize
;
}
;
#
ifdef
ANDROID
void
SetPrefsFd
(
int
aFd
)
;
void
SetPrefMapFd
(
int
aFd
)
;
#
endif
}
}
#
endif
