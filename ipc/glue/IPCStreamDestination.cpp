#
include
"
IPCStreamDestination
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsIAsyncOutputStream
.
h
"
#
include
"
nsIPipe
.
h
"
namespace
mozilla
{
namespace
ipc
{
IPCStreamDestination
:
:
IPCStreamDestination
(
)
{
}
IPCStreamDestination
:
:
~
IPCStreamDestination
(
)
{
}
nsresult
IPCStreamDestination
:
:
Initialize
(
)
{
MOZ_ASSERT
(
!
mReader
)
;
MOZ_ASSERT
(
!
mWriter
)
;
nsresult
rv
=
NS_NewPipe2
(
getter_AddRefs
(
mReader
)
getter_AddRefs
(
mWriter
)
true
true
0
UINT32_MAX
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
already_AddRefed
<
nsIInputStream
>
IPCStreamDestination
:
:
TakeReader
(
)
{
MOZ_ASSERT
(
mReader
)
;
return
mReader
.
forget
(
)
;
}
void
IPCStreamDestination
:
:
ActorDestroyed
(
)
{
MOZ_ASSERT
(
mWriter
)
;
mWriter
-
>
CloseWithStatus
(
NS_ERROR_ABORT
)
;
}
void
IPCStreamDestination
:
:
BufferReceived
(
const
nsCString
&
aBuffer
)
{
MOZ_ASSERT
(
mWriter
)
;
uint32_t
numWritten
=
0
;
nsresult
rv
=
mWriter
-
>
Write
(
aBuffer
.
get
(
)
aBuffer
.
Length
(
)
&
numWritten
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
RequestClose
(
rv
)
;
}
}
void
IPCStreamDestination
:
:
CloseReceived
(
nsresult
aRv
)
{
MOZ_ASSERT
(
mWriter
)
;
mWriter
-
>
CloseWithStatus
(
aRv
)
;
TerminateDestination
(
)
;
}
}
}
