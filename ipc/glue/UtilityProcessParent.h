#
ifndef
_include_ipc_glue_UtilityProcessParent_h__
#
define
_include_ipc_glue_UtilityProcessParent_h__
#
include
"
mozilla
/
ipc
/
PUtilityProcessParent
.
h
"
#
include
"
mozilla
/
ipc
/
CrashReporterHelper
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessHost
.
h
"
#
include
"
mozilla
/
dom
/
MemoryReportRequest
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
UtilityProcessHost
;
class
UtilityProcessParent
final
:
public
PUtilityProcessParent
public
ipc
:
:
CrashReporterHelper
<
GeckoProcessType_Utility
>
{
typedef
mozilla
:
:
dom
:
:
MemoryReportRequestHost
MemoryReportRequestHost
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
UtilityProcessParent
override
)
;
friend
class
UtilityProcessHost
;
explicit
UtilityProcessParent
(
UtilityProcessHost
*
aHost
)
;
static
UtilityProcessParent
*
GetSingleton
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAddMemoryReport
(
const
MemoryReport
&
aReport
)
;
bool
SendRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
Maybe
<
ipc
:
:
FileDescriptor
>
&
aDMDFile
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
UtilityProcessHost
*
mHost
;
UniquePtr
<
MemoryReportRequestHost
>
mMemoryReportRequest
{
}
;
~
UtilityProcessParent
(
)
;
static
void
Destroy
(
RefPtr
<
UtilityProcessParent
>
aParent
)
;
}
;
}
}
#
endif
