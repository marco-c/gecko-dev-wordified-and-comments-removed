#
ifndef
mozilla_CrossProcessSemaphore_h
#
define
mozilla_CrossProcessSemaphore_h
#
include
"
base
/
process
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
endif
#
if
!
defined
(
XP_WIN
)
&
&
!
defined
(
XP_DARWIN
)
#
include
<
pthread
.
h
>
#
include
<
semaphore
.
h
>
#
include
"
mozilla
/
ipc
/
SharedMemoryBasic
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
endif
namespace
IPC
{
template
<
typename
T
>
struct
ParamTraits
;
}
namespace
mozilla
{
template
<
typename
T
>
inline
bool
IsHandleValid
(
const
T
&
handle
)
{
return
bool
(
handle
)
;
}
#
if
defined
(
XP_WIN
)
typedef
mozilla
:
:
UniqueFileHandle
CrossProcessSemaphoreHandle
;
#
elif
!
defined
(
XP_DARWIN
)
typedef
mozilla
:
:
ipc
:
:
SharedMemoryBasic
:
:
Handle
CrossProcessSemaphoreHandle
;
template
<
>
inline
bool
IsHandleValid
<
CrossProcessSemaphoreHandle
>
(
const
CrossProcessSemaphoreHandle
&
handle
)
{
return
!
(
handle
=
=
mozilla
:
:
ipc
:
:
SharedMemoryBasic
:
:
NULLHandle
(
)
)
;
}
#
else
typedef
uintptr_t
CrossProcessSemaphoreHandle
;
#
endif
class
CrossProcessSemaphore
{
public
:
static
CrossProcessSemaphore
*
Create
(
const
char
*
aName
uint32_t
aInitialValue
)
;
static
CrossProcessSemaphore
*
Create
(
CrossProcessSemaphoreHandle
aHandle
)
;
~
CrossProcessSemaphore
(
)
;
bool
Wait
(
const
Maybe
<
TimeDuration
>
&
aWaitTime
=
Nothing
(
)
)
;
void
Signal
(
)
;
CrossProcessSemaphoreHandle
CloneHandle
(
)
;
void
CloseHandle
(
)
;
private
:
friend
struct
IPC
:
:
ParamTraits
<
CrossProcessSemaphore
>
;
CrossProcessSemaphore
(
)
;
CrossProcessSemaphore
(
const
CrossProcessSemaphore
&
)
;
CrossProcessSemaphore
&
operator
=
(
const
CrossProcessSemaphore
&
)
;
#
if
defined
(
XP_WIN
)
explicit
CrossProcessSemaphore
(
HANDLE
aSemaphore
)
;
HANDLE
mSemaphore
;
#
elif
!
defined
(
XP_DARWIN
)
RefPtr
<
mozilla
:
:
ipc
:
:
SharedMemoryBasic
>
mSharedBuffer
;
sem_t
*
mSemaphore
;
mozilla
:
:
Atomic
<
int32_t
>
*
mRefCount
;
#
endif
}
;
}
#
endif
