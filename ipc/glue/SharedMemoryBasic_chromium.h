#
ifndef
mozilla_ipc_SharedMemoryBasic_chromium_h
#
define
mozilla_ipc_SharedMemoryBasic_chromium_h
#
include
"
base
/
shared_memory
.
h
"
#
include
"
SharedMemory
.
h
"
#
include
"
nsDebug
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
SharedMemoryBasic
final
:
public
SharedMemoryCommon
<
base
:
:
SharedMemoryHandle
>
{
public
:
SharedMemoryBasic
(
)
{
}
virtual
bool
SetHandle
(
const
Handle
&
aHandle
OpenRights
aRights
)
override
{
return
mSharedMemory
.
SetHandle
(
aHandle
aRights
=
=
RightsReadOnly
)
;
}
virtual
bool
Create
(
size_t
aNbytes
)
override
{
bool
ok
=
mSharedMemory
.
Create
(
"
"
false
false
aNbytes
)
;
if
(
ok
)
{
Created
(
aNbytes
)
;
}
return
ok
;
}
virtual
bool
Map
(
size_t
nBytes
)
override
{
bool
ok
=
mSharedMemory
.
Map
(
nBytes
)
;
if
(
ok
)
{
Mapped
(
nBytes
)
;
}
return
ok
;
}
virtual
void
CloseHandle
(
)
override
{
mSharedMemory
.
Close
(
false
)
;
}
virtual
void
*
memory
(
)
const
override
{
return
mSharedMemory
.
memory
(
)
;
}
virtual
SharedMemoryType
Type
(
)
const
override
{
return
TYPE_BASIC
;
}
static
Handle
NULLHandle
(
)
{
return
base
:
:
SharedMemory
:
:
NULLHandle
(
)
;
}
virtual
bool
IsHandleValid
(
const
Handle
&
aHandle
)
const
override
{
return
base
:
:
SharedMemory
:
:
IsHandleValid
(
aHandle
)
;
}
virtual
bool
ShareToProcess
(
base
:
:
ProcessId
aProcessId
Handle
*
new_handle
)
override
{
base
:
:
SharedMemoryHandle
handle
;
bool
ret
=
mSharedMemory
.
ShareToProcess
(
aProcessId
&
handle
)
;
if
(
ret
)
*
new_handle
=
handle
;
return
ret
;
}
private
:
~
SharedMemoryBasic
(
)
{
}
base
:
:
SharedMemory
mSharedMemory
;
}
;
}
}
#
endif
