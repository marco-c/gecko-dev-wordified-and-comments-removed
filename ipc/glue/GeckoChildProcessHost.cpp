#
include
"
GeckoChildProcessHost
.
h
"
#
include
"
base
/
command_line
.
h
"
#
include
"
base
/
string_util
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
chrome
/
common
/
chrome_switches
.
h
"
#
include
"
chrome
/
common
/
process_watcher
.
h
"
#
ifdef
MOZ_WIDGET_COCOA
#
include
"
chrome
/
common
/
mach_ipc_mac
.
h
"
#
include
"
base
/
rand_util
.
h
"
#
include
"
nsILocalFileMac
.
h
"
#
include
"
SharedMemoryBasic
.
h
"
#
endif
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
prenv
.
h
"
#
include
"
nsXPCOMPrivate
.
h
"
#
if
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
endif
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsDirectoryService
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
mozilla
/
ipc
/
BrowserProcessSubThread
.
h
"
#
include
"
mozilla
/
ipc
/
EnvironmentMap
.
h
"
#
include
"
mozilla
/
net
/
SocketProcessHost
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Omnijar
.
h
"
#
include
"
mozilla
/
RDDProcessHost
.
h
"
#
include
"
mozilla
/
Scoped
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
ProtocolUtils
.
h
"
#
include
<
sys
/
stat
.
h
>
#
ifdef
XP_WIN
#
include
"
nsIWinTaskbar
.
h
"
#
include
<
stdlib
.
h
>
#
define
NS_TASKBAR_CONTRACTID
"
mozilla
.
org
/
windows
-
taskbar
;
1
"
#
if
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
sandboxing
/
sandboxLogging
.
h
"
#
include
"
WinUtils
.
h
"
#
if
defined
(
_ARM64_
)
#
include
"
mozilla
/
remoteSandboxBroker
.
h
"
#
endif
#
endif
#
include
"
mozilla
/
NativeNt
.
h
"
#
endif
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
SandboxLaunch
.
h
"
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
GMPProcessParent
.
h
"
#
include
"
nsMacUtilsImpl
.
h
"
#
endif
#
include
"
nsTArray
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsNativeCharsetUtils
.
h
"
#
include
"
nscore
.
h
"
#
include
"
private
/
pprio
.
h
"
using
mozilla
:
:
MonitorAutoLock
;
using
mozilla
:
:
Preferences
;
using
mozilla
:
:
StaticMutexAutoLock
;
namespace
mozilla
{
MOZ_TYPE_SPECIFIC_SCOPED_POINTER_TEMPLATE
(
ScopedPRFileDesc
PRFileDesc
PR_Close
)
}
using
mozilla
:
:
ScopedPRFileDesc
;
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
AndroidBridge
.
h
"
#
include
"
mozilla
/
java
/
GeckoProcessManagerWrappers
.
h
"
#
include
"
mozilla
/
java
/
GeckoProcessTypeWrappers
.
h
"
#
include
"
mozilla
/
java
/
GeckoResultWrappers
.
h
"
#
include
"
mozilla
/
jni
/
Refs
.
h
"
#
include
"
mozilla
/
jni
/
Utils
.
h
"
#
endif
#
ifdef
MOZ_ENABLE_FORKSERVER
#
include
"
mozilla
/
ipc
/
ForkServiceChild
.
h
"
#
endif
static
bool
ShouldHaveDirectoryService
(
)
{
return
GeckoProcessType_Default
=
=
XRE_GetProcessType
(
)
;
}
namespace
mozilla
{
namespace
ipc
{
static
Atomic
<
int32_t
>
gChildCounter
;
static
inline
nsISerialEventTarget
*
IOThread
(
)
{
return
XRE_GetIOMessageLoop
(
)
-
>
SerialEventTarget
(
)
;
}
class
BaseProcessLauncher
{
public
:
BaseProcessLauncher
(
GeckoChildProcessHost
*
aHost
std
:
:
vector
<
std
:
:
string
>
&
&
aExtraOpts
)
:
mProcessType
(
aHost
-
>
mProcessType
)
mLaunchOptions
(
std
:
:
move
(
aHost
-
>
mLaunchOptions
)
)
mExtraOpts
(
std
:
:
move
(
aExtraOpts
)
)
#
ifdef
XP_WIN
mGroupId
(
aHost
-
>
mGroupId
)
#
endif
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
mAllowedFilesRead
(
aHost
-
>
mAllowedFilesRead
)
mSandboxLevel
(
aHost
-
>
mSandboxLevel
)
mIsFileContent
(
aHost
-
>
mIsFileContent
)
mEnableSandboxLogging
(
aHost
-
>
mEnableSandboxLogging
)
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
mDisableOSActivityMode
(
aHost
-
>
mDisableOSActivityMode
)
#
endif
mTmpDirName
(
aHost
-
>
mTmpDirName
)
mChildId
(
+
+
gChildCounter
)
{
SprintfLiteral
(
mPidString
"
%
d
"
base
:
:
GetCurrentProcId
(
)
)
;
nsCOMPtr
<
nsIEventTarget
>
threadOrPool
=
GetIPCLauncher
(
)
;
mLaunchThread
=
new
TaskQueue
(
threadOrPool
.
forget
(
)
)
;
if
(
ShouldHaveDirectoryService
(
)
)
{
mozilla
:
:
Unused
<
<
nsDirectoryService
:
:
gService
-
>
GetCurrentProcessDirectory
(
getter_AddRefs
(
mAppDir
)
)
;
}
}
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
BaseProcessLauncher
)
;
RefPtr
<
ProcessLaunchPromise
>
Launch
(
GeckoChildProcessHost
*
)
;
protected
:
virtual
~
BaseProcessLauncher
(
)
=
default
;
RefPtr
<
ProcessLaunchPromise
>
PerformAsyncLaunch
(
)
;
RefPtr
<
ProcessLaunchPromise
>
FinishLaunch
(
)
;
virtual
bool
DoSetup
(
)
;
virtual
RefPtr
<
ProcessHandlePromise
>
DoLaunch
(
)
=
0
;
virtual
bool
DoFinishLaunch
(
)
{
return
true
;
}
;
void
MapChildLogging
(
)
;
static
BinPathType
GetPathToBinary
(
FilePath
&
GeckoProcessType
)
;
void
GetChildLogName
(
const
char
*
origLogName
nsACString
&
buffer
)
;
const
char
*
ChildProcessType
(
)
{
return
XRE_GeckoProcessTypeToString
(
mProcessType
)
;
}
nsCOMPtr
<
nsISerialEventTarget
>
mLaunchThread
;
GeckoProcessType
mProcessType
;
UniquePtr
<
base
:
:
LaunchOptions
>
mLaunchOptions
;
std
:
:
vector
<
std
:
:
string
>
mExtraOpts
;
#
ifdef
XP_WIN
nsString
mGroupId
;
#
endif
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
std
:
:
vector
<
std
:
:
wstring
>
mAllowedFilesRead
;
int32_t
mSandboxLevel
;
bool
mIsFileContent
;
bool
mEnableSandboxLogging
;
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
bool
mDisableOSActivityMode
;
#
endif
nsCString
mTmpDirName
;
LaunchResults
mResults
=
LaunchResults
(
)
;
int32_t
mChildId
;
TimeStamp
mStartTimeStamp
=
TimeStamp
:
:
Now
(
)
;
char
mPidString
[
32
]
;
IPC
:
:
Channel
*
mChannel
=
nullptr
;
std
:
:
wstring
mChannelId
;
ScopedPRFileDesc
mCrashAnnotationReadPipe
;
ScopedPRFileDesc
mCrashAnnotationWritePipe
;
nsCOMPtr
<
nsIFile
>
mAppDir
;
}
;
#
ifdef
XP_WIN
class
WindowsProcessLauncher
:
public
BaseProcessLauncher
{
public
:
WindowsProcessLauncher
(
GeckoChildProcessHost
*
aHost
std
:
:
vector
<
std
:
:
string
>
&
&
aExtraOpts
)
:
BaseProcessLauncher
(
aHost
std
:
:
move
(
aExtraOpts
)
)
mProfileDir
(
aHost
-
>
mProfileDir
)
mCachedNtdllThunk
(
aHost
-
>
sCachedNtDllThunk
)
{
}
protected
:
virtual
bool
DoSetup
(
)
override
;
virtual
RefPtr
<
ProcessHandlePromise
>
DoLaunch
(
)
override
;
virtual
bool
DoFinishLaunch
(
)
override
;
mozilla
:
:
Maybe
<
CommandLine
>
mCmdLine
;
bool
mUseSandbox
=
false
;
nsCOMPtr
<
nsIFile
>
mProfileDir
;
const
StaticAutoPtr
<
Buffer
<
IMAGE_THUNK_DATA
>
>
&
mCachedNtdllThunk
;
}
;
typedef
WindowsProcessLauncher
ProcessLauncher
;
#
endif
#
ifdef
OS_POSIX
class
PosixProcessLauncher
:
public
BaseProcessLauncher
{
public
:
PosixProcessLauncher
(
GeckoChildProcessHost
*
aHost
std
:
:
vector
<
std
:
:
string
>
&
&
aExtraOpts
)
:
BaseProcessLauncher
(
aHost
std
:
:
move
(
aExtraOpts
)
)
mProfileDir
(
aHost
-
>
mProfileDir
)
{
}
protected
:
virtual
bool
DoSetup
(
)
override
;
virtual
RefPtr
<
ProcessHandlePromise
>
DoLaunch
(
)
override
;
virtual
bool
DoFinishLaunch
(
)
override
;
nsCOMPtr
<
nsIFile
>
mProfileDir
;
std
:
:
vector
<
std
:
:
string
>
mChildArgv
;
}
;
#
if
defined
(
XP_MACOSX
)
class
MacProcessLauncher
:
public
PosixProcessLauncher
{
public
:
MacProcessLauncher
(
GeckoChildProcessHost
*
aHost
std
:
:
vector
<
std
:
:
string
>
&
&
aExtraOpts
)
:
PosixProcessLauncher
(
aHost
std
:
:
move
(
aExtraOpts
)
)
mMachConnectionName
(
StringPrintf
(
"
org
.
mozilla
.
machname
.
%
d
"
base
:
:
RandInt
(
0
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
)
mParentRecvPort
(
mMachConnectionName
.
c_str
(
)
)
{
}
protected
:
virtual
bool
DoFinishLaunch
(
)
override
;
std
:
:
string
mMachConnectionName
;
ReceivePort
mParentRecvPort
;
friend
class
PosixProcessLauncher
;
}
;
typedef
MacProcessLauncher
ProcessLauncher
;
#
elif
defined
(
MOZ_WIDGET_ANDROID
)
class
AndroidProcessLauncher
:
public
PosixProcessLauncher
{
public
:
AndroidProcessLauncher
(
GeckoChildProcessHost
*
aHost
std
:
:
vector
<
std
:
:
string
>
&
&
aExtraOpts
)
:
PosixProcessLauncher
(
aHost
std
:
:
move
(
aExtraOpts
)
)
{
}
protected
:
virtual
RefPtr
<
ProcessHandlePromise
>
DoLaunch
(
)
override
;
RefPtr
<
ProcessHandlePromise
>
LaunchAndroidService
(
const
GeckoProcessType
aType
const
std
:
:
vector
<
std
:
:
string
>
&
argv
const
base
:
:
file_handle_mapping_vector
&
fds_to_remap
)
;
}
;
typedef
AndroidProcessLauncher
ProcessLauncher
;
#
elif
defined
(
MOZ_WIDGET_GTK
)
class
LinuxProcessLauncher
:
public
PosixProcessLauncher
{
public
:
LinuxProcessLauncher
(
GeckoChildProcessHost
*
aHost
std
:
:
vector
<
std
:
:
string
>
&
&
aExtraOpts
)
:
PosixProcessLauncher
(
aHost
std
:
:
move
(
aExtraOpts
)
)
{
}
protected
:
virtual
bool
DoSetup
(
)
override
;
}
;
typedef
LinuxProcessLauncher
ProcessLauncher
;
#
elif
#
error
"
Unknown
platform
"
#
endif
#
endif
using
base
:
:
ProcessHandle
;
using
mozilla
:
:
ipc
:
:
BaseProcessLauncher
;
using
mozilla
:
:
ipc
:
:
ProcessLauncher
;
mozilla
:
:
StaticAutoPtr
<
mozilla
:
:
LinkedList
<
GeckoChildProcessHost
>
>
GeckoChildProcessHost
:
:
sGeckoChildProcessHosts
;
mozilla
:
:
StaticMutex
GeckoChildProcessHost
:
:
sMutex
;
#
ifdef
XP_WIN
mozilla
:
:
StaticAutoPtr
<
Buffer
<
IMAGE_THUNK_DATA
>
>
GeckoChildProcessHost
:
:
sCachedNtDllThunk
;
void
GeckoChildProcessHost
:
:
CacheNtDllThunk
(
)
{
if
(
sCachedNtDllThunk
)
{
return
;
}
do
{
nt
:
:
PEHeaders
ourExeImage
(
:
:
GetModuleHandleW
(
nullptr
)
)
;
if
(
!
ourExeImage
)
{
break
;
}
nt
:
:
PEHeaders
ntdllImage
(
:
:
GetModuleHandleW
(
L
"
ntdll
.
dll
"
)
)
;
if
(
!
ntdllImage
)
{
break
;
}
Maybe
<
Range
<
const
uint8_t
>
>
ntdllBoundaries
=
ntdllImage
.
GetBounds
(
)
;
if
(
!
ntdllBoundaries
)
{
break
;
}
Maybe
<
Span
<
IMAGE_THUNK_DATA
>
>
maybeNtDllThunks
=
ourExeImage
.
GetIATThunksForModule
(
"
ntdll
.
dll
"
ntdllBoundaries
.
ptr
(
)
)
;
if
(
maybeNtDllThunks
.
isNothing
(
)
)
{
break
;
}
sCachedNtDllThunk
=
new
Buffer
<
IMAGE_THUNK_DATA
>
(
maybeNtDllThunks
.
value
(
)
)
;
return
;
}
while
(
false
)
;
sCachedNtDllThunk
=
new
Buffer
<
IMAGE_THUNK_DATA
>
(
)
;
}
#
endif
GeckoChildProcessHost
:
:
GeckoChildProcessHost
(
GeckoProcessType
aProcessType
bool
aIsFileContent
)
:
mProcessType
(
aProcessType
)
mIsFileContent
(
aIsFileContent
)
mMonitor
(
"
mozilla
.
ipc
.
GeckChildProcessHost
.
mMonitor
"
)
mLaunchOptions
(
MakeUnique
<
base
:
:
LaunchOptions
>
(
)
)
mProcessState
(
CREATING_CHANNEL
)
#
ifdef
XP_WIN
mGroupId
(
u
"
-
"
)
#
endif
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
XP_WIN
)
mEnableSandboxLogging
(
false
)
mSandboxLevel
(
0
)
#
endif
mChildProcessHandle
(
0
)
#
if
defined
(
MOZ_WIDGET_COCOA
)
mChildTask
(
MACH_PORT_NULL
)
#
endif
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
XP_MACOSX
)
mDisableOSActivityMode
(
false
)
#
endif
mDestroying
(
false
)
{
MOZ_COUNT_CTOR
(
GeckoChildProcessHost
)
;
StaticMutexAutoLock
lock
(
sMutex
)
;
if
(
!
sGeckoChildProcessHosts
)
{
sGeckoChildProcessHosts
=
new
mozilla
:
:
LinkedList
<
GeckoChildProcessHost
>
(
)
;
}
sGeckoChildProcessHosts
-
>
insertBack
(
this
)
;
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
XP_LINUX
)
if
(
aProcessType
=
=
GeckoProcessType_Content
)
{
nsCOMPtr
<
nsIFile
>
contentTempDir
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_APP_CONTENT_PROCESS_TEMP_DIR
getter_AddRefs
(
contentTempDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
contentTempDir
-
>
GetNativePath
(
mTmpDirName
)
;
}
}
#
endif
#
if
defined
(
MOZ_ENABLE_FORKSERVER
)
if
(
aProcessType
=
=
GeckoProcessType_Content
&
&
ForkServiceChild
:
:
Get
(
)
)
{
mLaunchOptions
-
>
use_forkserver
=
true
;
}
#
endif
}
GeckoChildProcessHost
:
:
~
GeckoChildProcessHost
(
)
{
AssertIOThread
(
)
;
MOZ_RELEASE_ASSERT
(
mDestroying
)
;
MOZ_COUNT_DTOR
(
GeckoChildProcessHost
)
;
if
(
mChildProcessHandle
!
=
0
)
{
#
if
defined
(
MOZ_WIDGET_COCOA
)
SharedMemoryBasic
:
:
CleanupForPidWithLock
(
mChildProcessHandle
)
;
#
endif
ProcessWatcher
:
:
EnsureProcessTerminated
(
mChildProcessHandle
#
ifdef
NS_FREE_PERMANENT_DATA
false
#
endif
)
;
}
#
if
defined
(
MOZ_WIDGET_COCOA
)
if
(
mChildTask
!
=
MACH_PORT_NULL
)
mach_port_deallocate
(
mach_task_self
(
)
mChildTask
)
;
#
endif
if
(
mChildProcessHandle
!
=
0
)
{
#
if
defined
(
XP_WIN
)
CrashReporter
:
:
DeregisterChildCrashAnnotationFileDescriptor
(
base
:
:
GetProcId
(
mChildProcessHandle
)
)
;
#
else
CrashReporter
:
:
DeregisterChildCrashAnnotationFileDescriptor
(
mChildProcessHandle
)
;
#
endif
}
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
XP_WIN
)
if
(
mSandboxBroker
)
{
mSandboxBroker
-
>
Shutdown
(
)
;
mSandboxBroker
=
nullptr
;
}
#
endif
}
void
GeckoChildProcessHost
:
:
RemoveFromProcessList
(
)
{
StaticMutexAutoLock
lock
(
sMutex
)
;
if
(
!
sGeckoChildProcessHosts
)
{
return
;
}
LinkedListElement
<
GeckoChildProcessHost
>
:
:
removeFrom
(
*
sGeckoChildProcessHosts
)
;
}
void
GeckoChildProcessHost
:
:
Destroy
(
)
{
MOZ_RELEASE_ASSERT
(
!
mDestroying
)
;
RemoveFromProcessList
(
)
;
RefPtr
<
ProcessHandlePromise
>
whenReady
=
mHandlePromise
;
if
(
!
whenReady
)
{
whenReady
=
ProcessHandlePromise
:
:
CreateAndReject
(
LaunchError
{
}
__func__
)
;
}
using
Value
=
ProcessHandlePromise
:
:
ResolveOrRejectValue
;
mDestroying
=
true
;
whenReady
-
>
Then
(
XRE_GetIOMessageLoop
(
)
-
>
SerialEventTarget
(
)
__func__
[
this
]
(
const
Value
&
)
{
delete
this
;
}
)
;
}
mozilla
:
:
BinPathType
BaseProcessLauncher
:
:
GetPathToBinary
(
FilePath
&
exePath
GeckoProcessType
processType
)
{
BinPathType
pathType
=
XRE_GetChildProcBinPathType
(
processType
)
;
if
(
pathType
=
=
BinPathType
:
:
Self
)
{
#
if
defined
(
OS_WIN
)
wchar_t
exePathBuf
[
MAXPATHLEN
]
;
if
(
!
:
:
GetModuleFileNameW
(
nullptr
exePathBuf
MAXPATHLEN
)
)
{
MOZ_CRASH
(
"
GetModuleFileNameW
failed
(
FIXME
)
"
)
;
}
#
if
defined
(
MOZ_SANDBOX
)
std
:
:
wstring
exePathStr
=
exePathBuf
;
if
(
widget
:
:
WinUtils
:
:
ResolveJunctionPointsAndSymLinks
(
exePathStr
)
)
{
exePath
=
FilePath
:
:
FromWStringHack
(
exePathStr
)
;
}
else
#
endif
{
exePath
=
FilePath
:
:
FromWStringHack
(
exePathBuf
)
;
}
#
elif
defined
(
OS_POSIX
)
exePath
=
FilePath
(
CommandLine
:
:
ForCurrentProcess
(
)
-
>
argv
(
)
[
0
]
)
;
#
else
#
error
Sorry
;
target
OS
not
supported
yet
.
#
endif
return
pathType
;
}
if
(
ShouldHaveDirectoryService
(
)
)
{
MOZ_ASSERT
(
gGREBinPath
)
;
#
ifdef
OS_WIN
exePath
=
FilePath
(
char16ptr_t
(
gGREBinPath
)
)
;
#
elif
MOZ_WIDGET_COCOA
nsCOMPtr
<
nsIFile
>
childProcPath
;
NS_NewLocalFile
(
nsDependentString
(
gGREBinPath
)
false
getter_AddRefs
(
childProcPath
)
)
;
childProcPath
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
plugin
-
container
.
app
"
)
)
;
childProcPath
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
Contents
"
)
)
;
childProcPath
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
MacOS
"
)
)
;
nsCString
tempCPath
;
childProcPath
-
>
GetNativePath
(
tempCPath
)
;
exePath
=
FilePath
(
tempCPath
.
get
(
)
)
;
#
else
nsCString
path
;
NS_CopyUnicodeToNative
(
nsDependentString
(
gGREBinPath
)
path
)
;
exePath
=
FilePath
(
path
.
get
(
)
)
;
#
endif
}
if
(
exePath
.
empty
(
)
)
{
#
ifdef
OS_WIN
exePath
=
FilePath
:
:
FromWStringHack
(
CommandLine
:
:
ForCurrentProcess
(
)
-
>
program
(
)
)
;
#
else
exePath
=
FilePath
(
CommandLine
:
:
ForCurrentProcess
(
)
-
>
argv
(
)
[
0
]
)
;
#
endif
exePath
=
exePath
.
DirName
(
)
;
}
exePath
=
exePath
.
AppendASCII
(
MOZ_CHILD_PROCESS_NAME
)
;
return
pathType
;
}
#
ifdef
MOZ_WIDGET_COCOA
class
AutoCFTypeObject
{
public
:
explicit
AutoCFTypeObject
(
CFTypeRef
object
)
{
mObject
=
object
;
}
~
AutoCFTypeObject
(
)
{
:
:
CFRelease
(
mObject
)
;
}
private
:
CFTypeRef
mObject
;
}
;
#
endif
uint32_t
GeckoChildProcessHost
:
:
sNextUniqueID
=
1
;
uint32_t
GeckoChildProcessHost
:
:
GetUniqueID
(
)
{
return
sNextUniqueID
+
+
;
}
void
GeckoChildProcessHost
:
:
PrepareLaunch
(
)
{
if
(
CrashReporter
:
:
GetEnabled
(
)
)
{
CrashReporter
:
:
OOPInit
(
)
;
}
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
SandboxLaunchPrepare
(
mProcessType
mLaunchOptions
.
get
(
)
)
;
#
endif
#
ifdef
XP_WIN
if
(
mProcessType
=
=
GeckoProcessType_Plugin
)
{
InitWindowsGroupID
(
)
;
}
#
if
defined
(
MOZ_SANDBOX
)
if
(
mProcessType
=
=
GeckoProcessType_Content
)
{
mSandboxLevel
=
GetEffectiveContentSandboxLevel
(
)
;
mEnableSandboxLogging
=
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
logging
.
enabled
"
)
;
nsAutoString
readPaths
;
nsresult
rv
=
Preferences
:
:
GetString
(
"
security
.
sandbox
.
content
.
read_path_whitelist
"
readPaths
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
for
(
const
nsAString
&
readPath
:
readPaths
.
Split
(
'
'
)
)
{
nsString
trimmedPath
(
readPath
)
;
trimmedPath
.
Trim
(
"
"
true
true
)
;
std
:
:
wstring
resolvedPath
(
trimmedPath
.
Data
(
)
)
;
bool
addWildcard
=
(
resolvedPath
.
back
(
)
=
=
L
'
\
\
'
)
;
if
(
!
widget
:
:
WinUtils
:
:
ResolveJunctionPointsAndSymLinks
(
resolvedPath
)
)
{
NS_ERROR
(
"
Failed
to
resolve
test
read
policy
rule
.
"
)
;
continue
;
}
if
(
addWildcard
)
{
resolvedPath
.
append
(
L
"
\
\
*
"
)
;
}
mAllowedFilesRead
.
push_back
(
resolvedPath
)
;
}
}
}
#
endif
#
if
defined
(
MOZ_SANDBOX
)
mEnableSandboxLogging
=
mEnableSandboxLogging
|
|
!
!
PR_GetEnv
(
"
MOZ_SANDBOX_LOGGING
"
)
;
if
(
ShouldHaveDirectoryService
(
)
&
&
mProcessType
=
=
GeckoProcessType_GPU
)
{
mozilla
:
:
Unused
<
<
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_50_DIR
getter_AddRefs
(
mProfileDir
)
)
;
}
#
endif
#
elif
defined
(
XP_MACOSX
)
#
if
defined
(
MOZ_SANDBOX
)
if
(
ShouldHaveDirectoryService
(
)
&
&
mProcessType
!
=
GeckoProcessType_GMPlugin
)
{
mozilla
:
:
Unused
<
<
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_50_DIR
getter_AddRefs
(
mProfileDir
)
)
;
}
#
endif
#
endif
}
#
ifdef
XP_WIN
void
GeckoChildProcessHost
:
:
InitWindowsGroupID
(
)
{
nsCOMPtr
<
nsIWinTaskbar
>
taskbarInfo
=
do_GetService
(
NS_TASKBAR_CONTRACTID
)
;
if
(
taskbarInfo
)
{
bool
isSupported
=
false
;
taskbarInfo
-
>
GetAvailable
(
&
isSupported
)
;
nsAutoString
appId
;
if
(
isSupported
&
&
NS_SUCCEEDED
(
taskbarInfo
-
>
GetDefaultGroupId
(
appId
)
)
)
{
MOZ_ASSERT
(
mGroupId
.
EqualsLiteral
(
"
-
"
)
)
;
mGroupId
.
Assign
(
appId
)
;
}
}
}
#
endif
bool
GeckoChildProcessHost
:
:
SyncLaunch
(
std
:
:
vector
<
std
:
:
string
>
aExtraOpts
int
aTimeoutMs
)
{
if
(
!
AsyncLaunch
(
std
:
:
move
(
aExtraOpts
)
)
)
{
return
false
;
}
return
WaitUntilConnected
(
aTimeoutMs
)
;
}
bool
GeckoChildProcessHost
:
:
AsyncLaunch
(
std
:
:
vector
<
std
:
:
string
>
aExtraOpts
)
{
PrepareLaunch
(
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
if
(
IsMacSandboxLaunchEnabled
(
)
&
&
!
AppendMacSandboxParams
(
aExtraOpts
)
)
{
return
false
;
}
#
endif
RefPtr
<
BaseProcessLauncher
>
launcher
=
new
ProcessLauncher
(
this
std
:
:
move
(
aExtraOpts
)
)
;
MOZ_ASSERT
(
mHandlePromise
=
=
nullptr
)
;
RefPtr
<
ProcessHandlePromise
:
:
Private
>
p
=
new
ProcessHandlePromise
:
:
Private
(
__func__
)
;
mHandlePromise
=
p
;
mozilla
:
:
InvokeAsync
<
GeckoChildProcessHost
*
>
(
IOThread
(
)
launcher
.
get
(
)
__func__
&
BaseProcessLauncher
:
:
Launch
this
)
-
>
Then
(
IOThread
(
)
__func__
[
this
p
]
(
const
LaunchResults
aResults
)
{
{
if
(
!
OpenPrivilegedHandle
(
base
:
:
GetProcId
(
aResults
.
mHandle
)
)
#
ifdef
XP_WIN
&
&
!
:
:
DuplicateHandle
(
:
:
GetCurrentProcess
(
)
aResults
.
mHandle
:
:
GetCurrentProcess
(
)
&
mChildProcessHandle
PROCESS_DUP_HANDLE
|
PROCESS_TERMINATE
|
PROCESS_QUERY_INFORMATION
|
PROCESS_VM_READ
|
SYNCHRONIZE
FALSE
0
)
#
endif
)
{
MOZ_CRASH
(
"
cannot
open
handle
to
child
process
"
)
;
}
#
ifdef
XP_MACOSX
this
-
>
mChildTask
=
aResults
.
mChildTask
;
#
endif
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
this
-
>
mSandboxBroker
=
aResults
.
mSandboxBroker
;
#
endif
MonitorAutoLock
lock
(
mMonitor
)
;
if
(
mProcessState
<
PROCESS_CREATED
)
{
mProcessState
=
PROCESS_CREATED
;
}
lock
.
Notify
(
)
;
}
p
-
>
Resolve
(
aResults
.
mHandle
__func__
)
;
}
[
this
p
]
(
const
LaunchError
aError
)
{
CHROMIUM_LOG
(
ERROR
)
<
<
"
Failed
to
launch
"
<
<
XRE_GeckoProcessTypeToString
(
mProcessType
)
<
<
"
subprocess
"
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
SUBPROCESS_LAUNCH_FAILURE
nsDependentCString
(
XRE_GeckoProcessTypeToString
(
mProcessType
)
)
)
;
{
MonitorAutoLock
lock
(
mMonitor
)
;
mProcessState
=
PROCESS_ERROR
;
lock
.
Notify
(
)
;
}
p
-
>
Reject
(
aError
__func__
)
;
}
)
;
return
true
;
}
bool
GeckoChildProcessHost
:
:
WaitUntilConnected
(
int32_t
aTimeoutMs
)
{
AUTO_PROFILER_LABEL
(
"
GeckoChildProcessHost
:
:
WaitUntilConnected
"
OTHER
)
;
TimeDuration
timeout
=
(
aTimeoutMs
>
0
)
?
TimeDuration
:
:
FromMilliseconds
(
aTimeoutMs
)
:
TimeDuration
:
:
Forever
(
)
;
MonitorAutoLock
lock
(
mMonitor
)
;
TimeStamp
waitStart
=
TimeStamp
:
:
Now
(
)
;
TimeStamp
current
;
while
(
mProcessState
!
=
PROCESS_CONNECTED
)
{
if
(
mProcessState
=
=
PROCESS_ERROR
)
{
break
;
}
CVStatus
status
=
lock
.
Wait
(
timeout
)
;
if
(
status
=
=
CVStatus
:
:
Timeout
)
{
break
;
}
if
(
timeout
!
=
TimeDuration
:
:
Forever
(
)
)
{
current
=
TimeStamp
:
:
Now
(
)
;
timeout
-
=
current
-
waitStart
;
waitStart
=
current
;
}
}
return
mProcessState
=
=
PROCESS_CONNECTED
;
}
bool
GeckoChildProcessHost
:
:
WaitForProcessHandle
(
)
{
MonitorAutoLock
lock
(
mMonitor
)
;
while
(
mProcessState
<
PROCESS_CREATED
)
{
lock
.
Wait
(
)
;
}
MOZ_ASSERT
(
mProcessState
=
=
PROCESS_ERROR
|
|
mChildProcessHandle
)
;
return
mProcessState
<
PROCESS_ERROR
;
}
bool
GeckoChildProcessHost
:
:
LaunchAndWaitForProcessHandle
(
StringVector
aExtraOpts
)
{
if
(
!
AsyncLaunch
(
std
:
:
move
(
aExtraOpts
)
)
)
{
return
false
;
}
return
WaitForProcessHandle
(
)
;
}
void
GeckoChildProcessHost
:
:
InitializeChannel
(
)
{
CreateChannel
(
)
;
MonitorAutoLock
lock
(
mMonitor
)
;
mProcessState
=
CHANNEL_INITIALIZED
;
lock
.
Notify
(
)
;
}
void
GeckoChildProcessHost
:
:
Join
(
)
{
AssertIOThread
(
)
;
if
(
!
mChildProcessHandle
)
{
return
;
}
base
:
:
KillProcess
(
mChildProcessHandle
0
true
)
;
SetAlreadyDead
(
)
;
}
void
GeckoChildProcessHost
:
:
SetAlreadyDead
(
)
{
if
(
mChildProcessHandle
&
&
mChildProcessHandle
!
=
kInvalidProcessHandle
)
{
base
:
:
CloseProcessHandle
(
mChildProcessHandle
)
;
}
mChildProcessHandle
=
0
;
}
void
BaseProcessLauncher
:
:
GetChildLogName
(
const
char
*
origLogName
nsACString
&
buffer
)
{
#
ifdef
XP_WIN
char
absPath
[
MAX_PATH
+
2
]
;
if
(
_fullpath
(
absPath
origLogName
sizeof
(
absPath
)
)
)
{
#
ifdef
MOZ_SANDBOX
std
:
:
wstring
resolvedPath
(
NS_ConvertUTF8toUTF16
(
absPath
)
.
get
(
)
)
;
if
(
widget
:
:
WinUtils
:
:
ResolveJunctionPointsAndSymLinks
(
resolvedPath
)
)
{
AppendUTF16toUTF8
(
MakeSpan
(
reinterpret_cast
<
const
char16_t
*
>
(
resolvedPath
.
data
(
)
)
resolvedPath
.
size
(
)
)
buffer
)
;
}
else
#
endif
{
buffer
.
Append
(
absPath
)
;
}
}
else
#
endif
{
buffer
.
Append
(
origLogName
)
;
}
static
NS_NAMED_LITERAL_CSTRING
(
kMozLogExt
MOZ_LOG_FILE_EXTENSION
)
;
if
(
StringEndsWith
(
buffer
kMozLogExt
)
)
{
buffer
.
Truncate
(
buffer
.
Length
(
)
-
kMozLogExt
.
Length
(
)
)
;
}
buffer
.
AppendLiteral
(
"
.
child
-
"
)
;
buffer
.
AppendInt
(
gChildCounter
)
;
}
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_ANDROID
)
|
|
\
defined
(
MOZ_ENABLE_FORKSERVER
)
static
mozilla
:
:
StaticMutex
gIPCLaunchThreadMutex
;
static
mozilla
:
:
StaticRefPtr
<
nsIThread
>
gIPCLaunchThread
;
class
IPCLaunchThreadObserver
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
protected
:
virtual
~
IPCLaunchThreadObserver
(
)
=
default
;
}
;
NS_IMPL_ISUPPORTS
(
IPCLaunchThreadObserver
nsIObserver
nsISupports
)
NS_IMETHODIMP
IPCLaunchThreadObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_RELEASE_ASSERT
(
strcmp
(
aTopic
"
xpcom
-
shutdown
-
threads
"
)
=
=
0
)
;
StaticMutexAutoLock
lock
(
gIPCLaunchThreadMutex
)
;
nsresult
rv
=
NS_OK
;
if
(
gIPCLaunchThread
)
{
rv
=
gIPCLaunchThread
-
>
Shutdown
(
)
;
gIPCLaunchThread
=
nullptr
;
}
mozilla
:
:
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
return
rv
;
}
nsCOMPtr
<
nsIEventTarget
>
GetIPCLauncher
(
)
{
StaticMutexAutoLock
lock
(
gIPCLaunchThreadMutex
)
;
if
(
!
gIPCLaunchThread
)
{
nsCOMPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewNamedThread
(
NS_LITERAL_CSTRING
(
"
IPC
Launch
"
)
getter_AddRefs
(
thread
)
)
;
if
(
!
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
GeckoChildProcessHost
:
:
GetIPCLauncher
"
[
]
{
nsCOMPtr
<
nsIObserverService
>
obsService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
nsCOMPtr
<
nsIObserver
>
obs
=
new
IPCLaunchThreadObserver
(
)
;
obsService
-
>
AddObserver
(
obs
"
xpcom
-
shutdown
-
threads
"
false
)
;
}
)
)
;
gIPCLaunchThread
=
thread
.
forget
(
)
;
}
}
nsCOMPtr
<
nsIEventTarget
>
thread
=
gIPCLaunchThread
.
get
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
thread
)
;
return
thread
;
}
#
else
nsCOMPtr
<
nsIEventTarget
>
GetIPCLauncher
(
)
{
nsCOMPtr
<
nsIEventTarget
>
pool
=
mozilla
:
:
SharedThreadPool
:
:
Get
(
NS_LITERAL_CSTRING
(
"
IPC
Launch
"
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
pool
)
;
return
pool
;
}
#
endif
void
#
if
defined
(
XP_WIN
)
AddAppDirToCommandLine
(
CommandLine
&
aCmdLine
nsIFile
*
aAppDir
)
#
else
AddAppDirToCommandLine
(
std
:
:
vector
<
std
:
:
string
>
&
aCmdLine
nsIFile
*
aAppDir
nsIFile
*
aProfileDir
)
#
endif
{
if
(
aAppDir
)
{
#
if
defined
(
XP_WIN
)
nsString
path
;
MOZ_ALWAYS_SUCCEEDS
(
aAppDir
-
>
GetPath
(
path
)
)
;
aCmdLine
.
AppendLooseValue
(
UTF8ToWide
(
"
-
appdir
"
)
)
;
std
:
:
wstring
wpath
(
path
.
get
(
)
)
;
aCmdLine
.
AppendLooseValue
(
wpath
)
;
#
else
nsAutoCString
path
;
MOZ_ALWAYS_SUCCEEDS
(
aAppDir
-
>
GetNativePath
(
path
)
)
;
aCmdLine
.
push_back
(
"
-
appdir
"
)
;
aCmdLine
.
push_back
(
path
.
get
(
)
)
;
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
if
(
aProfileDir
)
{
mozilla
:
:
Unused
<
<
aProfileDir
-
>
Normalize
(
)
;
nsAutoCString
path
;
MOZ_ALWAYS_SUCCEEDS
(
aProfileDir
-
>
GetNativePath
(
path
)
)
;
aCmdLine
.
push_back
(
"
-
profile
"
)
;
aCmdLine
.
push_back
(
path
.
get
(
)
)
;
}
#
endif
}
}
#
if
defined
(
XP_WIN
)
&
&
(
defined
(
MOZ_SANDBOX
)
|
|
defined
(
_ARM64_
)
)
static
bool
Contains
(
const
std
:
:
vector
<
std
:
:
string
>
&
aExtraOpts
const
char
*
aValue
)
{
return
std
:
:
any_of
(
aExtraOpts
.
begin
(
)
aExtraOpts
.
end
(
)
[
&
]
(
const
std
:
:
string
arg
)
{
return
arg
.
find
(
aValue
)
!
=
std
:
:
string
:
:
npos
;
}
)
;
}
#
endif
RefPtr
<
ProcessLaunchPromise
>
BaseProcessLauncher
:
:
PerformAsyncLaunch
(
)
{
if
(
!
DoSetup
(
)
)
{
return
ProcessLaunchPromise
:
:
CreateAndReject
(
LaunchError
{
}
__func__
)
;
}
RefPtr
<
BaseProcessLauncher
>
self
=
this
;
return
DoLaunch
(
)
-
>
Then
(
mLaunchThread
__func__
[
self
]
(
base
:
:
ProcessHandle
aHandle
)
{
self
-
>
mResults
.
mHandle
=
aHandle
;
return
self
-
>
FinishLaunch
(
)
;
}
[
]
(
LaunchError
aError
)
{
return
ProcessLaunchPromise
:
:
CreateAndReject
(
aError
__func__
)
;
}
)
;
}
bool
BaseProcessLauncher
:
:
DoSetup
(
)
{
#
if
defined
(
MOZ_GECKO_PROFILER
)
|
|
defined
(
MOZ_MEMORY
)
RefPtr
<
BaseProcessLauncher
>
self
=
this
;
#
ifdef
MOZ_GECKO_PROFILER
GetProfilerEnvVarsForChildProcess
(
[
self
]
(
const
char
*
key
const
char
*
value
)
{
self
-
>
mLaunchOptions
-
>
env_map
[
ENVIRONMENT_STRING
(
key
)
]
=
ENVIRONMENT_STRING
(
value
)
;
}
)
;
#
endif
#
ifdef
MOZ_MEMORY
if
(
mProcessType
=
=
GeckoProcessType_Content
)
{
nsAutoCString
mallocOpts
(
PR_GetEnv
(
"
MALLOC_OPTIONS
"
)
)
;
mallocOpts
.
Append
(
"
r
"
)
;
self
-
>
mLaunchOptions
-
>
env_map
[
ENVIRONMENT_LITERAL
(
"
MALLOC_OPTIONS
"
)
]
=
ENVIRONMENT_STRING
(
mallocOpts
.
get
(
)
)
;
}
#
endif
#
endif
MapChildLogging
(
)
;
return
PR_CreatePipe
(
&
mCrashAnnotationReadPipe
.
rwget
(
)
&
mCrashAnnotationWritePipe
.
rwget
(
)
)
=
=
PR_SUCCESS
;
}
void
BaseProcessLauncher
:
:
MapChildLogging
(
)
{
const
char
*
origNSPRLogName
=
PR_GetEnv
(
"
NSPR_LOG_FILE
"
)
;
const
char
*
origMozLogName
=
PR_GetEnv
(
"
MOZ_LOG_FILE
"
)
;
if
(
origNSPRLogName
)
{
nsAutoCString
nsprLogName
;
GetChildLogName
(
origNSPRLogName
nsprLogName
)
;
mLaunchOptions
-
>
env_map
[
ENVIRONMENT_LITERAL
(
"
NSPR_LOG_FILE
"
)
]
=
ENVIRONMENT_STRING
(
nsprLogName
.
get
(
)
)
;
}
if
(
origMozLogName
)
{
nsAutoCString
mozLogName
;
GetChildLogName
(
origMozLogName
mozLogName
)
;
mLaunchOptions
-
>
env_map
[
ENVIRONMENT_LITERAL
(
"
MOZ_LOG_FILE
"
)
]
=
ENVIRONMENT_STRING
(
mozLogName
.
get
(
)
)
;
}
nsAutoCString
childRustLog
(
PR_GetEnv
(
"
RUST_LOG_CHILD
"
)
)
;
if
(
!
childRustLog
.
IsEmpty
(
)
)
{
mLaunchOptions
-
>
env_map
[
ENVIRONMENT_LITERAL
(
"
RUST_LOG
"
)
]
=
ENVIRONMENT_STRING
(
childRustLog
.
get
(
)
)
;
}
}
#
if
defined
(
MOZ_WIDGET_GTK
)
bool
LinuxProcessLauncher
:
:
DoSetup
(
)
{
if
(
!
PosixProcessLauncher
:
:
DoSetup
(
)
)
{
return
false
;
}
if
(
mProcessType
=
=
GeckoProcessType_Content
)
{
mLaunchOptions
-
>
env_map
[
"
GTK_IM_MODULE
"
]
=
"
gtk
-
im
-
context
-
simple
"
;
mLaunchOptions
-
>
env_map
[
"
NO_AT_BRIDGE
"
]
=
"
1
"
;
}
#
ifdef
MOZ_SANDBOX
if
(
!
mTmpDirName
.
IsEmpty
(
)
)
{
mLaunchOptions
-
>
env_map
[
ENVIRONMENT_LITERAL
(
"
TMPDIR
"
)
]
=
ENVIRONMENT_STRING
(
mTmpDirName
.
get
(
)
)
;
mLaunchOptions
-
>
env_map
[
ENVIRONMENT_LITERAL
(
"
MESA_GLSL_CACHE_DIR
"
)
]
=
ENVIRONMENT_STRING
(
mTmpDirName
.
get
(
)
)
;
}
#
endif
return
true
;
}
#
endif
#
ifdef
OS_POSIX
bool
PosixProcessLauncher
:
:
DoSetup
(
)
{
if
(
!
BaseProcessLauncher
:
:
DoSetup
(
)
)
{
return
false
;
}
if
(
ShouldHaveDirectoryService
(
)
)
{
MOZ_ASSERT
(
gGREBinPath
)
;
nsCString
path
;
NS_CopyUnicodeToNative
(
nsDependentString
(
gGREBinPath
)
path
)
;
#
if
defined
(
OS_LINUX
)
|
|
defined
(
OS_BSD
)
const
char
*
ld_library_path
=
PR_GetEnv
(
"
LD_LIBRARY_PATH
"
)
;
nsCString
new_ld_lib_path
(
path
.
get
(
)
)
;
#
ifdef
MOZ_WIDGET_GTK
if
(
mProcessType
=
=
GeckoProcessType_Plugin
)
{
new_ld_lib_path
.
AppendLiteral
(
"
/
gtk2
:
"
)
;
new_ld_lib_path
.
Append
(
path
.
get
(
)
)
;
}
#
endif
if
(
ld_library_path
&
&
*
ld_library_path
)
{
new_ld_lib_path
.
Append
(
'
:
'
)
;
new_ld_lib_path
.
Append
(
ld_library_path
)
;
}
mLaunchOptions
-
>
env_map
[
"
LD_LIBRARY_PATH
"
]
=
new_ld_lib_path
.
get
(
)
;
#
elif
OS_MACOSX
mLaunchOptions
-
>
env_map
[
"
DYLD_LIBRARY_PATH
"
]
=
path
.
get
(
)
;
const
char
*
prevInterpose
=
PR_GetEnv
(
"
DYLD_INSERT_LIBRARIES
"
)
;
nsCString
interpose
;
if
(
prevInterpose
&
&
strlen
(
prevInterpose
)
>
0
)
{
interpose
.
Assign
(
prevInterpose
)
;
interpose
.
Append
(
'
:
'
)
;
}
interpose
.
Append
(
path
.
get
(
)
)
;
interpose
.
AppendLiteral
(
"
/
libplugin_child_interpose
.
dylib
"
)
;
mLaunchOptions
-
>
env_map
[
"
DYLD_INSERT_LIBRARIES
"
]
=
interpose
.
get
(
)
;
#
ifdef
MOZ_SANDBOX
if
(
mDisableOSActivityMode
)
{
mLaunchOptions
-
>
env_map
[
"
OS_ACTIVITY_MODE
"
]
=
"
disable
"
;
}
#
endif
#
endif
}
FilePath
exePath
;
BinPathType
pathType
=
GetPathToBinary
(
exePath
mProcessType
)
;
int
srcChannelFd
dstChannelFd
;
mChannel
-
>
GetClientFileDescriptorMapping
(
&
srcChannelFd
&
dstChannelFd
)
;
mLaunchOptions
-
>
fds_to_remap
.
push_back
(
std
:
:
pair
<
int
int
>
(
srcChannelFd
dstChannelFd
)
)
;
mChildArgv
.
push_back
(
exePath
.
value
(
)
)
;
if
(
pathType
=
=
BinPathType
:
:
Self
)
{
mChildArgv
.
push_back
(
"
-
contentproc
"
)
;
}
mChildArgv
.
insert
(
mChildArgv
.
end
(
)
mExtraOpts
.
begin
(
)
mExtraOpts
.
end
(
)
)
;
if
(
mProcessType
!
=
GeckoProcessType_GMPlugin
)
{
#
if
defined
(
MOZ_WIDGET_ANDROID
)
if
(
Omnijar
:
:
IsInitialized
(
)
)
{
nsAutoCString
path
;
nsCOMPtr
<
nsIFile
>
file
=
Omnijar
:
:
GetPath
(
Omnijar
:
:
GRE
)
;
if
(
file
&
&
NS_SUCCEEDED
(
file
-
>
GetNativePath
(
path
)
)
)
{
mChildArgv
.
push_back
(
"
-
greomni
"
)
;
mChildArgv
.
push_back
(
path
.
get
(
)
)
;
}
file
=
Omnijar
:
:
GetPath
(
Omnijar
:
:
APP
)
;
if
(
file
&
&
NS_SUCCEEDED
(
file
-
>
GetNativePath
(
path
)
)
)
{
mChildArgv
.
push_back
(
"
-
appomni
"
)
;
mChildArgv
.
push_back
(
path
.
get
(
)
)
;
}
}
#
endif
#
ifdef
XP_MACOSX
AddAppDirToCommandLine
(
mChildArgv
mAppDir
mProfileDir
)
;
#
else
AddAppDirToCommandLine
(
mChildArgv
mAppDir
nullptr
)
;
#
endif
}
mChildArgv
.
push_back
(
mPidString
)
;
if
(
!
CrashReporter
:
:
IsDummy
(
)
)
{
#
if
defined
(
OS_LINUX
)
|
|
defined
(
OS_BSD
)
|
|
defined
(
OS_SOLARIS
)
int
childCrashFd
childCrashRemapFd
;
if
(
!
CrashReporter
:
:
CreateNotificationPipeForChild
(
&
childCrashFd
&
childCrashRemapFd
)
)
{
return
false
;
}
if
(
0
<
=
childCrashFd
)
{
mLaunchOptions
-
>
fds_to_remap
.
push_back
(
std
:
:
pair
<
int
int
>
(
childCrashFd
childCrashRemapFd
)
)
;
mChildArgv
.
push_back
(
"
true
"
)
;
}
else
{
mChildArgv
.
push_back
(
"
false
"
)
;
}
#
elif
defined
(
MOZ_WIDGET_COCOA
)
mChildArgv
.
push_back
(
CrashReporter
:
:
GetChildNotificationPipe
(
)
)
;
#
endif
}
int
fd
=
PR_FileDesc2NativeHandle
(
mCrashAnnotationWritePipe
)
;
mLaunchOptions
-
>
fds_to_remap
.
push_back
(
std
:
:
make_pair
(
fd
CrashReporter
:
:
GetAnnotationTimeCrashFd
(
)
)
)
;
#
ifdef
MOZ_WIDGET_COCOA
mChildArgv
.
push_back
(
static_cast
<
MacProcessLauncher
*
>
(
this
)
-
>
mMachConnectionName
.
c_str
(
)
)
;
#
endif
mChildArgv
.
push_back
(
ChildProcessType
(
)
)
;
return
true
;
}
#
endif
#
if
defined
(
MOZ_WIDGET_ANDROID
)
RefPtr
<
ProcessHandlePromise
>
AndroidProcessLauncher
:
:
DoLaunch
(
)
{
return
LaunchAndroidService
(
mProcessType
mChildArgv
mLaunchOptions
-
>
fds_to_remap
)
;
}
#
endif
#
ifdef
OS_POSIX
RefPtr
<
ProcessHandlePromise
>
PosixProcessLauncher
:
:
DoLaunch
(
)
{
ProcessHandle
handle
=
0
;
if
(
!
base
:
:
LaunchApp
(
mChildArgv
*
mLaunchOptions
&
handle
)
)
{
return
ProcessHandlePromise
:
:
CreateAndReject
(
LaunchError
{
}
__func__
)
;
}
return
ProcessHandlePromise
:
:
CreateAndResolve
(
handle
__func__
)
;
}
bool
PosixProcessLauncher
:
:
DoFinishLaunch
(
)
{
if
(
!
BaseProcessLauncher
:
:
DoFinishLaunch
(
)
)
{
return
false
;
}
mChannel
-
>
CloseClientFileDescriptor
(
)
;
return
true
;
}
#
endif
#
ifdef
XP_MACOSX
bool
MacProcessLauncher
:
:
DoFinishLaunch
(
)
{
if
(
!
PosixProcessLauncher
:
:
DoFinishLaunch
(
)
)
{
return
false
;
}
const
int
kTimeoutMs
=
10000
;
MachReceiveMessage
child_message
;
kern_return_t
err
=
mParentRecvPort
.
WaitForMessage
(
&
child_message
kTimeoutMs
)
;
if
(
err
!
=
KERN_SUCCESS
)
{
std
:
:
string
errString
=
StringPrintf
(
"
0x
%
x
%
s
"
err
mach_error_string
(
err
)
)
;
CHROMIUM_LOG
(
ERROR
)
<
<
"
parent
WaitForMessage
(
)
failed
:
"
<
<
errString
;
return
false
;
}
task_t
child_task
=
child_message
.
GetTranslatedPort
(
0
)
;
if
(
child_task
=
=
MACH_PORT_NULL
)
{
CHROMIUM_LOG
(
ERROR
)
<
<
"
parent
GetTranslatedPort
(
0
)
failed
.
"
;
return
false
;
}
if
(
child_message
.
GetTranslatedPort
(
1
)
=
=
MACH_PORT_NULL
)
{
CHROMIUM_LOG
(
ERROR
)
<
<
"
parent
GetTranslatedPort
(
1
)
failed
.
"
;
return
false
;
}
MachPortSender
parent_sender
(
child_message
.
GetTranslatedPort
(
1
)
)
;
if
(
child_message
.
GetTranslatedPort
(
2
)
=
=
MACH_PORT_NULL
)
{
CHROMIUM_LOG
(
ERROR
)
<
<
"
parent
GetTranslatedPort
(
2
)
failed
.
"
;
}
auto
*
parent_recv_port_memory_ack
=
new
MachPortSender
(
child_message
.
GetTranslatedPort
(
2
)
)
;
if
(
child_message
.
GetTranslatedPort
(
3
)
=
=
MACH_PORT_NULL
)
{
CHROMIUM_LOG
(
ERROR
)
<
<
"
parent
GetTranslatedPort
(
3
)
failed
.
"
;
}
auto
*
parent_send_port_memory
=
new
MachPortSender
(
child_message
.
GetTranslatedPort
(
3
)
)
;
MachSendMessage
parent_message
(
0
)
;
if
(
!
parent_message
.
AddDescriptor
(
MachMsgPortDescriptor
(
bootstrap_port
)
)
)
{
CHROMIUM_LOG
(
ERROR
)
<
<
"
parent
AddDescriptor
(
"
<
<
bootstrap_port
<
<
"
)
failed
.
"
;
return
false
;
}
auto
*
parent_recv_port_memory
=
new
ReceivePort
(
)
;
if
(
!
parent_message
.
AddDescriptor
(
MachMsgPortDescriptor
(
parent_recv_port_memory
-
>
GetPort
(
)
)
)
)
{
CHROMIUM_LOG
(
ERROR
)
<
<
"
parent
AddDescriptor
(
"
<
<
parent_recv_port_memory
-
>
GetPort
(
)
<
<
"
)
failed
.
"
;
return
false
;
}
auto
*
parent_send_port_memory_ack
=
new
ReceivePort
(
)
;
if
(
!
parent_message
.
AddDescriptor
(
MachMsgPortDescriptor
(
parent_send_port_memory_ack
-
>
GetPort
(
)
)
)
)
{
CHROMIUM_LOG
(
ERROR
)
<
<
"
parent
AddDescriptor
(
"
<
<
parent_send_port_memory_ack
-
>
GetPort
(
)
<
<
"
)
failed
.
"
;
return
false
;
}
err
=
parent_sender
.
SendMessage
(
parent_message
kTimeoutMs
)
;
if
(
err
!
=
KERN_SUCCESS
)
{
std
:
:
string
errString
=
StringPrintf
(
"
0x
%
x
%
s
"
err
mach_error_string
(
err
)
)
;
CHROMIUM_LOG
(
ERROR
)
<
<
"
parent
SendMessage
(
)
failed
:
"
<
<
errString
;
return
false
;
}
SharedMemoryBasic
:
:
SetupMachMemory
(
mResults
.
mHandle
parent_recv_port_memory
parent_recv_port_memory_ack
parent_send_port_memory
parent_send_port_memory_ack
false
)
;
mResults
.
mChildTask
=
child_task
;
return
true
;
}
#
endif
#
ifdef
XP_WIN
bool
WindowsProcessLauncher
:
:
DoSetup
(
)
{
if
(
!
BaseProcessLauncher
:
:
DoSetup
(
)
)
{
return
false
;
}
FilePath
exePath
;
BinPathType
pathType
=
GetPathToBinary
(
exePath
mProcessType
)
;
#
if
defined
(
MOZ_SANDBOX
)
|
|
defined
(
_ARM64_
)
const
bool
isGMP
=
mProcessType
=
=
GeckoProcessType_GMPlugin
;
const
bool
isWidevine
=
isGMP
&
&
Contains
(
mExtraOpts
"
gmp
-
widevinecdm
"
)
;
#
if
defined
(
_ARM64_
)
const
bool
isClearKey
=
isGMP
&
&
Contains
(
mExtraOpts
"
gmp
-
clearkey
"
)
;
const
bool
isSandboxBroker
=
mProcessType
=
=
GeckoProcessType_RemoteSandboxBroker
;
if
(
isClearKey
|
|
isWidevine
|
|
isSandboxBroker
)
{
exePath
=
exePath
.
DirName
(
)
.
AppendASCII
(
"
i686
"
)
.
Append
(
exePath
.
BaseName
(
)
)
;
}
#
endif
#
endif
mCmdLine
.
emplace
(
exePath
.
ToWStringHack
(
)
)
;
if
(
pathType
=
=
BinPathType
:
:
Self
)
{
mCmdLine
-
>
AppendLooseValue
(
UTF8ToWide
(
"
-
contentproc
"
)
)
;
}
mCmdLine
-
>
AppendSwitchWithValue
(
switches
:
:
kProcessChannelID
mChannelId
)
;
for
(
std
:
:
vector
<
std
:
:
string
>
:
:
iterator
it
=
mExtraOpts
.
begin
(
)
;
it
!
=
mExtraOpts
.
end
(
)
;
+
+
it
)
{
mCmdLine
-
>
AppendLooseValue
(
UTF8ToWide
(
*
it
)
)
;
}
#
if
defined
(
MOZ_SANDBOX
)
#
if
defined
(
_ARM64_
)
if
(
isClearKey
|
|
isWidevine
)
mResults
.
mSandboxBroker
=
new
RemoteSandboxBroker
(
)
;
else
#
endif
mResults
.
mSandboxBroker
=
new
SandboxBroker
(
)
;
switch
(
mProcessType
)
{
case
GeckoProcessType_Content
:
if
(
mSandboxLevel
>
0
)
{
mResults
.
mSandboxBroker
-
>
SetSecurityLevelForContentProcess
(
mSandboxLevel
mIsFileContent
)
;
mUseSandbox
=
true
;
}
break
;
case
GeckoProcessType_Plugin
:
if
(
mSandboxLevel
>
0
&
&
!
PR_GetEnv
(
"
MOZ_DISABLE_NPAPI_SANDBOX
"
)
)
{
if
(
!
mResults
.
mSandboxBroker
-
>
SetSecurityLevelForPluginProcess
(
mSandboxLevel
)
)
{
return
false
;
}
mUseSandbox
=
true
;
}
break
;
case
GeckoProcessType_IPDLUnitTest
:
break
;
case
GeckoProcessType_GMPlugin
:
if
(
!
PR_GetEnv
(
"
MOZ_DISABLE_GMP_SANDBOX
"
)
)
{
auto
level
=
isWidevine
?
SandboxBroker
:
:
Restricted
:
SandboxBroker
:
:
LockDown
;
if
(
!
mResults
.
mSandboxBroker
-
>
SetSecurityLevelForGMPlugin
(
level
)
)
{
return
false
;
}
mUseSandbox
=
true
;
}
break
;
case
GeckoProcessType_GPU
:
if
(
mSandboxLevel
>
0
&
&
!
PR_GetEnv
(
"
MOZ_DISABLE_GPU_SANDBOX
"
)
)
{
mResults
.
mSandboxBroker
-
>
SetSecurityLevelForGPUProcess
(
mSandboxLevel
mProfileDir
)
;
mUseSandbox
=
true
;
}
break
;
case
GeckoProcessType_VR
:
if
(
mSandboxLevel
>
0
&
&
!
PR_GetEnv
(
"
MOZ_DISABLE_VR_SANDBOX
"
)
)
{
}
break
;
case
GeckoProcessType_RDD
:
if
(
!
PR_GetEnv
(
"
MOZ_DISABLE_RDD_SANDBOX
"
)
)
{
if
(
!
mResults
.
mSandboxBroker
-
>
SetSecurityLevelForRDDProcess
(
)
)
{
return
false
;
}
mUseSandbox
=
true
;
}
break
;
case
GeckoProcessType_Socket
:
if
(
!
PR_GetEnv
(
"
MOZ_DISABLE_SOCKET_PROCESS_SANDBOX
"
)
)
{
if
(
!
mResults
.
mSandboxBroker
-
>
SetSecurityLevelForSocketProcess
(
)
)
{
return
false
;
}
mUseSandbox
=
true
;
}
break
;
case
GeckoProcessType_RemoteSandboxBroker
:
break
;
case
GeckoProcessType_Default
:
default
:
MOZ_CRASH
(
"
Bad
process
type
in
GeckoChildProcessHost
"
)
;
break
;
}
;
if
(
mUseSandbox
)
{
for
(
auto
it
=
mAllowedFilesRead
.
begin
(
)
;
it
!
=
mAllowedFilesRead
.
end
(
)
;
+
+
it
)
{
mResults
.
mSandboxBroker
-
>
AllowReadFile
(
it
-
>
c_str
(
)
)
;
}
}
#
endif
AddAppDirToCommandLine
(
mCmdLine
.
ref
(
)
mAppDir
)
;
mCmdLine
-
>
AppendLooseValue
(
mGroupId
.
get
(
)
)
;
mCmdLine
-
>
AppendLooseValue
(
UTF8ToWide
(
mPidString
)
)
;
mCmdLine
-
>
AppendLooseValue
(
UTF8ToWide
(
CrashReporter
:
:
GetChildNotificationPipe
(
)
)
)
;
if
(
!
CrashReporter
:
:
IsDummy
(
)
)
{
PROsfd
h
=
PR_FileDesc2NativeHandle
(
mCrashAnnotationWritePipe
)
;
mLaunchOptions
-
>
handles_to_inherit
.
push_back
(
reinterpret_cast
<
HANDLE
>
(
h
)
)
;
std
:
:
string
hStr
=
std
:
:
to_string
(
h
)
;
mCmdLine
-
>
AppendLooseValue
(
UTF8ToWide
(
hStr
)
)
;
}
mCmdLine
-
>
AppendLooseValue
(
UTF8ToWide
(
ChildProcessType
(
)
)
)
;
#
ifdef
MOZ_SANDBOX
if
(
mUseSandbox
)
{
for
(
HANDLE
h
:
mLaunchOptions
-
>
handles_to_inherit
)
{
mResults
.
mSandboxBroker
-
>
AddHandleToShare
(
h
)
;
}
}
#
endif
return
true
;
}
RefPtr
<
ProcessHandlePromise
>
WindowsProcessLauncher
:
:
DoLaunch
(
)
{
ProcessHandle
handle
=
0
;
#
ifdef
MOZ_SANDBOX
if
(
mUseSandbox
)
{
const
IMAGE_THUNK_DATA
*
cachedNtdllThunk
=
mCachedNtdllThunk
?
mCachedNtdllThunk
-
>
begin
(
)
:
nullptr
;
if
(
mResults
.
mSandboxBroker
-
>
LaunchApp
(
mCmdLine
-
>
program
(
)
.
c_str
(
)
mCmdLine
-
>
command_line_string
(
)
.
c_str
(
)
mLaunchOptions
-
>
env_map
mProcessType
mEnableSandboxLogging
cachedNtdllThunk
&
handle
)
)
{
EnvironmentLog
(
"
MOZ_PROCESS_LOG
"
)
.
print
(
"
=
=
>
process
%
d
launched
child
process
%
d
(
%
S
)
\
n
"
base
:
:
GetCurrentProcId
(
)
base
:
:
GetProcId
(
handle
)
mCmdLine
-
>
command_line_string
(
)
.
c_str
(
)
)
;
return
ProcessHandlePromise
:
:
CreateAndResolve
(
handle
__func__
)
;
}
return
ProcessHandlePromise
:
:
CreateAndReject
(
LaunchError
{
}
__func__
)
;
}
#
endif
if
(
!
base
:
:
LaunchApp
(
mCmdLine
.
ref
(
)
*
mLaunchOptions
&
handle
)
)
{
return
ProcessHandlePromise
:
:
CreateAndReject
(
LaunchError
{
}
__func__
)
;
}
return
ProcessHandlePromise
:
:
CreateAndResolve
(
handle
__func__
)
;
}
bool
WindowsProcessLauncher
:
:
DoFinishLaunch
(
)
{
if
(
!
BaseProcessLauncher
:
:
DoFinishLaunch
(
)
)
{
return
false
;
}
#
ifdef
MOZ_SANDBOX
if
(
!
mUseSandbox
)
{
switch
(
mProcessType
)
{
case
GeckoProcessType_Default
:
MOZ_CRASH
(
"
shouldn
'
t
be
launching
a
parent
process
"
)
;
case
GeckoProcessType_Plugin
:
case
GeckoProcessType_IPDLUnitTest
:
break
;
default
:
if
(
!
SandboxBroker
:
:
AddTargetPeer
(
mResults
.
mHandle
)
)
{
NS_WARNING
(
"
Failed
to
add
child
process
as
target
peer
.
"
)
;
}
break
;
}
}
#
endif
return
true
;
}
#
endif
RefPtr
<
ProcessLaunchPromise
>
BaseProcessLauncher
:
:
FinishLaunch
(
)
{
if
(
!
DoFinishLaunch
(
)
)
{
return
ProcessLaunchPromise
:
:
CreateAndReject
(
LaunchError
{
}
__func__
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mResults
.
mHandle
)
;
CrashReporter
:
:
RegisterChildCrashAnnotationFileDescriptor
(
base
:
:
GetProcId
(
mResults
.
mHandle
)
mCrashAnnotationReadPipe
.
forget
(
)
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
CHILD_PROCESS_LAUNCH_MS
mStartTimeStamp
)
;
return
ProcessLaunchPromise
:
:
CreateAndResolve
(
mResults
__func__
)
;
}
bool
GeckoChildProcessHost
:
:
OpenPrivilegedHandle
(
base
:
:
ProcessId
aPid
)
{
if
(
mChildProcessHandle
)
{
MOZ_ASSERT
(
aPid
=
=
base
:
:
GetProcId
(
mChildProcessHandle
)
)
;
return
true
;
}
return
base
:
:
OpenPrivilegedProcessHandle
(
aPid
&
mChildProcessHandle
)
;
}
void
GeckoChildProcessHost
:
:
OnChannelConnected
(
int32_t
peer_pid
)
{
if
(
!
OpenPrivilegedHandle
(
peer_pid
)
)
{
MOZ_CRASH
(
"
can
'
t
open
handle
to
child
process
"
)
;
}
MonitorAutoLock
lock
(
mMonitor
)
;
mProcessState
=
PROCESS_CONNECTED
;
lock
.
Notify
(
)
;
}
void
GeckoChildProcessHost
:
:
OnMessageReceived
(
IPC
:
:
Message
&
&
aMsg
)
{
mQueue
.
push
(
std
:
:
move
(
aMsg
)
)
;
}
void
GeckoChildProcessHost
:
:
OnChannelError
(
)
{
MonitorAutoLock
lock
(
mMonitor
)
;
if
(
mProcessState
<
PROCESS_CONNECTED
)
{
mProcessState
=
PROCESS_ERROR
;
lock
.
Notify
(
)
;
}
}
RefPtr
<
ProcessHandlePromise
>
GeckoChildProcessHost
:
:
WhenProcessHandleReady
(
)
{
MOZ_ASSERT
(
mHandlePromise
!
=
nullptr
)
;
return
mHandlePromise
;
}
void
GeckoChildProcessHost
:
:
GetQueuedMessages
(
std
:
:
queue
<
IPC
:
:
Message
>
&
queue
)
{
DCHECK
(
MessageLoopForIO
:
:
current
(
)
)
;
swap
(
queue
mQueue
)
;
}
#
ifdef
MOZ_WIDGET_ANDROID
RefPtr
<
ProcessHandlePromise
>
AndroidProcessLauncher
:
:
LaunchAndroidService
(
const
GeckoProcessType
aType
const
std
:
:
vector
<
std
:
:
string
>
&
argv
const
base
:
:
file_handle_mapping_vector
&
fds_to_remap
)
{
MOZ_RELEASE_ASSERT
(
(
2
<
=
fds_to_remap
.
size
(
)
)
&
&
(
fds_to_remap
.
size
(
)
<
=
5
)
)
;
JNIEnv
*
const
env
=
mozilla
:
:
jni
:
:
GetEnvForThread
(
)
;
MOZ_ASSERT
(
env
)
;
const
int
argvSize
=
argv
.
size
(
)
;
jni
:
:
ObjectArray
:
:
LocalRef
jargs
=
jni
:
:
ObjectArray
:
:
New
<
jni
:
:
String
>
(
argvSize
)
;
for
(
int
ix
=
0
;
ix
<
argvSize
;
ix
+
+
)
{
jargs
-
>
SetElement
(
ix
jni
:
:
StringParam
(
argv
[
ix
]
.
c_str
(
)
env
)
)
;
}
int32_t
prefsFd
=
fds_to_remap
[
0
]
.
first
;
int32_t
prefMapFd
=
fds_to_remap
[
1
]
.
first
;
int32_t
ipcFd
=
fds_to_remap
[
2
]
.
first
;
int32_t
crashFd
=
-
1
;
int32_t
crashAnnotationFd
=
-
1
;
if
(
fds_to_remap
.
size
(
)
=
=
4
)
{
crashAnnotationFd
=
fds_to_remap
[
3
]
.
first
;
}
if
(
fds_to_remap
.
size
(
)
=
=
5
)
{
crashFd
=
fds_to_remap
[
3
]
.
first
;
crashAnnotationFd
=
fds_to_remap
[
4
]
.
first
;
}
auto
type
=
java
:
:
GeckoProcessType
:
:
FromInt
(
aType
)
;
auto
genericResult
=
java
:
:
GeckoProcessManager
:
:
Start
(
type
jargs
prefsFd
prefMapFd
ipcFd
crashFd
crashAnnotationFd
)
;
auto
typedResult
=
java
:
:
GeckoResult
:
:
LocalRef
(
std
:
:
move
(
genericResult
)
)
;
return
ProcessHandlePromise
:
:
FromGeckoResult
(
typedResult
)
;
}
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
bool
GeckoChildProcessHost
:
:
AppendMacSandboxParams
(
StringVector
&
aArgs
)
{
MacSandboxInfo
info
;
if
(
!
FillMacSandboxInfo
(
info
)
)
{
return
false
;
}
info
.
AppendAsParams
(
aArgs
)
;
return
true
;
}
bool
GeckoChildProcessHost
:
:
FillMacSandboxInfo
(
MacSandboxInfo
&
aInfo
)
{
aInfo
.
type
=
GetDefaultMacSandboxType
(
)
;
aInfo
.
shouldLog
=
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
logging
.
enabled
"
)
|
|
PR_GetEnv
(
"
MOZ_SANDBOX_LOGGING
"
)
;
nsAutoCString
appPath
;
if
(
!
nsMacUtilsImpl
:
:
GetAppPath
(
appPath
)
)
{
MOZ_CRASH
(
"
Failed
to
get
app
path
"
)
;
}
aInfo
.
appPath
.
assign
(
appPath
.
get
(
)
)
;
return
true
;
}
void
GeckoChildProcessHost
:
:
DisableOSActivityMode
(
)
{
mDisableOSActivityMode
=
true
;
}
bool
GeckoChildProcessHost
:
:
StartMacSandbox
(
int
aArgc
char
*
*
aArgv
std
:
:
string
&
aErrorMessage
)
{
MacSandboxType
sandboxType
=
MacSandboxType_Invalid
;
switch
(
XRE_GetProcessType
(
)
)
{
case
GeckoProcessType_Content
:
sandboxType
=
MacSandboxType_Content
;
break
;
case
GeckoProcessType_RDD
:
sandboxType
=
RDDProcessHost
:
:
GetMacSandboxType
(
)
;
break
;
case
GeckoProcessType_Socket
:
sandboxType
=
net
:
:
SocketProcessHost
:
:
GetMacSandboxType
(
)
;
break
;
case
GeckoProcessType_GMPlugin
:
sandboxType
=
gmp
:
:
GMPProcessParent
:
:
GetMacSandboxType
(
)
;
break
;
default
:
return
true
;
}
return
mozilla
:
:
StartMacSandboxIfEnabled
(
sandboxType
aArgc
aArgv
aErrorMessage
)
;
}
#
endif
void
GeckoChildProcessHost
:
:
GetAll
(
const
GeckoProcessCallback
&
aCallback
)
{
StaticMutexAutoLock
lock
(
sMutex
)
;
for
(
GeckoChildProcessHost
*
gp
=
sGeckoChildProcessHosts
-
>
getFirst
(
)
;
gp
;
gp
=
static_cast
<
mozilla
:
:
LinkedListElement
<
GeckoChildProcessHost
>
*
>
(
gp
)
-
>
getNext
(
)
)
{
aCallback
(
gp
)
;
}
}
RefPtr
<
ProcessLaunchPromise
>
BaseProcessLauncher
:
:
Launch
(
GeckoChildProcessHost
*
aHost
)
{
AssertIOThread
(
)
;
aHost
-
>
InitializeChannel
(
)
;
mChannel
=
aHost
-
>
GetChannel
(
)
;
if
(
!
mChannel
)
{
return
ProcessLaunchPromise
:
:
CreateAndReject
(
LaunchError
{
}
__func__
)
;
}
mChannelId
=
aHost
-
>
GetChannelId
(
)
;
return
InvokeAsync
(
mLaunchThread
this
__func__
&
BaseProcessLauncher
:
:
PerformAsyncLaunch
)
;
}
}
}
