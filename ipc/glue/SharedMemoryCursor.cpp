#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
SharedMemoryCursor
.
h
"
namespace
mozilla
:
:
ipc
:
:
shared_memory
{
bool
Cursor
:
:
Read
(
void
*
aBuffer
size_t
aCount
)
{
return
Consume
(
aBuffer
aCount
false
)
;
}
bool
Cursor
:
:
Write
(
const
void
*
aBuffer
size_t
aCount
)
{
return
Consume
(
const_cast
<
void
*
>
(
aBuffer
)
aCount
true
)
;
}
void
Cursor
:
:
Seek
(
uint64_t
aOffset
)
{
MOZ_ASSERT
(
aOffset
<
=
Size
(
)
)
;
uint64_t
oldChunkStart
=
ChunkStart
(
)
;
mOffset
=
aOffset
;
if
(
mMapping
&
&
oldChunkStart
!
=
ChunkStart
(
)
)
{
mMapping
=
nullptr
;
}
}
MutableHandle
Cursor
:
:
TakeHandle
(
)
{
mMapping
=
nullptr
;
return
std
:
:
move
(
mHandle
)
;
}
void
Cursor
:
:
SetChunkSize
(
size_t
aChunkSize
)
{
MOZ_ASSERT
(
IsPowerOfTwo
(
aChunkSize
)
"
Cannot
specify
non
power
-
of
-
two
maximum
chunk
size
"
)
;
MOZ_ASSERT
(
aChunkSize
>
=
SystemAllocationGranularity
(
)
"
Cannot
specify
a
chunk
size
which
is
smaller
than
the
system
"
"
allocation
granularity
"
)
;
mChunkSize
=
aChunkSize
;
mMapping
=
nullptr
;
}
bool
Cursor
:
:
Consume
(
void
*
aBuffer
size_t
aCount
bool
aWriteToShmem
)
{
if
(
aCount
>
Remaining
(
)
)
{
NS_WARNING
(
"
count
too
large
"
)
;
return
false
;
}
size_t
consumed
=
0
;
while
(
consumed
<
aCount
)
{
if
(
!
EnsureMapping
(
)
)
{
return
false
;
}
size_t
mappingOffset
=
ChunkOffset
(
)
;
size_t
mappingRemaining
=
mMapping
.
Size
(
)
-
mappingOffset
;
size_t
toCopy
=
std
:
:
min
<
size_t
>
(
mappingRemaining
aCount
-
consumed
)
;
void
*
shmemPtr
=
mMapping
.
DataAs
<
char
>
(
)
+
mappingOffset
;
void
*
bufferPtr
=
static_cast
<
char
*
>
(
aBuffer
)
+
consumed
;
if
(
aWriteToShmem
)
{
memcpy
(
shmemPtr
bufferPtr
toCopy
)
;
}
else
{
memcpy
(
bufferPtr
shmemPtr
toCopy
)
;
}
Seek
(
mOffset
+
toCopy
)
;
consumed
+
=
toCopy
;
}
return
true
;
}
bool
Cursor
:
:
EnsureMapping
(
)
{
MOZ_ASSERT
(
mHandle
.
IsValid
(
)
)
;
while
(
!
mMapping
)
{
uint64_t
chunkStart
=
ChunkStart
(
)
;
size_t
chunkSize
=
std
:
:
min
<
uint64_t
>
(
ChunkSize
(
)
Size
(
)
-
chunkStart
)
;
mMapping
=
mHandle
.
MapSubregion
(
chunkStart
chunkSize
)
;
if
(
MOZ_UNLIKELY
(
!
mMapping
)
)
{
if
(
chunkSize
<
=
SystemAllocationGranularity
(
)
)
{
NS_WARNING
(
"
Failed
to
map
the
smallest
allocation
granularity
of
shared
"
"
memory
region
!
"
)
;
return
false
;
}
mChunkSize
=
RoundUpPow2
(
chunkSize
)
>
>
1
;
}
}
return
true
;
}
}
