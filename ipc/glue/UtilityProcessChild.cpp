#
include
"
UtilityProcessChild
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessManager
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessSandboxing
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
MemoryReportRequest
.
h
"
#
include
"
mozilla
/
ipc
/
CrashReporterClient
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
Sandbox
.
h
"
#
endif
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
MOZ_DEBUG
)
&
&
defined
(
ENABLE_TESTS
)
#
include
"
mozilla
/
SandboxTestingChild
.
h
"
#
endif
#
include
"
mozilla
/
Telemetry
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
mozilla
/
WinDllServices
.
h
"
#
endif
#
include
"
nsDebugImpl
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
nsThreadManager
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
mozilla
/
ipc
/
ProcessChild
.
h
"
#
include
"
mozilla
/
FOGIPC
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
namespace
mozilla
:
:
ipc
{
using
namespace
layers
;
static
StaticMutex
sUtilityProcessChildMutex
;
static
StaticRefPtr
<
UtilityProcessChild
>
sUtilityProcessChild
;
UtilityProcessChild
:
:
UtilityProcessChild
(
)
{
nsDebugImpl
:
:
SetMultiprocessMode
(
"
Utility
"
)
;
}
UtilityProcessChild
:
:
~
UtilityProcessChild
(
)
=
default
;
RefPtr
<
UtilityProcessChild
>
UtilityProcessChild
:
:
GetSingleton
(
)
{
MOZ_ASSERT
(
XRE_IsUtilityProcess
(
)
)
;
StaticMutexAutoLock
lock
(
sUtilityProcessChildMutex
)
;
if
(
!
sUtilityProcessChild
)
{
sUtilityProcessChild
=
new
UtilityProcessChild
(
)
;
}
return
sUtilityProcessChild
;
}
RefPtr
<
UtilityProcessChild
>
UtilityProcessChild
:
:
Get
(
)
{
StaticMutexAutoLock
lock
(
sUtilityProcessChildMutex
)
;
return
sUtilityProcessChild
;
}
bool
UtilityProcessChild
:
:
Init
(
mozilla
:
:
ipc
:
:
UntypedEndpoint
&
&
aEndpoint
const
nsCString
&
aParentBuildID
uint64_t
aSandboxingKind
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
nsThreadManager
:
:
get
(
)
.
Init
(
)
)
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
!
aEndpoint
.
Bind
(
this
)
)
)
{
return
false
;
}
MessageChannel
*
channel
=
GetIPCChannel
(
)
;
if
(
channel
&
&
!
channel
-
>
SendBuildIDsMatchMessage
(
aParentBuildID
.
get
(
)
)
)
{
ipc
:
:
ProcessChild
:
:
QuickExit
(
)
;
}
ipc
:
:
CrashReporterClient
:
:
InitSingleton
(
this
)
;
if
(
NS_FAILED
(
NS_InitMinimalXPCOM
(
)
)
)
{
return
false
;
}
mSandbox
=
(
SandboxingKind
)
aSandboxingKind
;
profiler_set_process_name
(
nsCString
(
"
Utility
Process
"
)
)
;
SendInitCompleted
(
)
;
return
true
;
}
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
extern
"
C
"
{
void
CGSShutdownServerConnections
(
)
;
}
;
#
endif
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessChild
:
:
RecvInit
(
const
Maybe
<
FileDescriptor
>
&
aBrokerFd
const
bool
&
aCanRecordReleaseTelemetry
)
{
mozilla
:
:
ipc
:
:
SetThisProcessName
(
"
Utility
Process
"
)
;
#
if
defined
(
MOZ_SANDBOX
)
#
if
defined
(
XP_MACOSX
)
CGSShutdownServerConnections
(
)
;
#
elif
defined
(
XP_LINUX
)
int
fd
=
-
1
;
if
(
aBrokerFd
.
isSome
(
)
)
{
fd
=
aBrokerFd
.
value
(
)
.
ClonePlatformHandle
(
)
.
release
(
)
;
}
SetUtilitySandbox
(
fd
mSandbox
)
;
#
endif
#
endif
#
if
defined
(
XP_WIN
)
if
(
aCanRecordReleaseTelemetry
)
{
RefPtr
<
DllServices
>
dllSvc
(
DllServices
:
:
Get
(
)
)
;
dllSvc
-
>
StartUntrustedModulesProcessor
(
false
)
;
}
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessChild
:
:
RecvPreferenceUpdate
(
const
Pref
&
aPref
)
{
Preferences
:
:
SetPreference
(
aPref
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessChild
:
:
RecvInitProfiler
(
Endpoint
<
PProfilerChild
>
&
&
aEndpoint
)
{
mProfilerController
=
ChildProfilerController
:
:
Create
(
std
:
:
move
(
aEndpoint
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessChild
:
:
RecvRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
Maybe
<
FileDescriptor
>
&
aDMDFile
const
RequestMemoryReportResolver
&
aResolver
)
{
nsPrintfCString
processName
(
"
Utility
(
pid
:
%
"
PRIPID
"
sandboxingKind
:
%
"
PRIu64
"
)
"
base
:
:
GetCurrentProcId
(
)
mSandbox
)
;
mozilla
:
:
dom
:
:
MemoryReportRequestClient
:
:
Start
(
aGeneration
aAnonymize
aMinimizeMemoryUsage
aDMDFile
processName
[
&
]
(
const
MemoryReport
&
aReport
)
{
Unused
<
<
GetSingleton
(
)
-
>
SendAddMemoryReport
(
aReport
)
;
}
aResolver
)
;
return
IPC_OK
(
)
;
}
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
MOZ_DEBUG
)
&
&
defined
(
ENABLE_TESTS
)
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessChild
:
:
RecvInitSandboxTesting
(
Endpoint
<
PSandboxTestingChild
>
&
&
aEndpoint
)
{
if
(
!
SandboxTestingChild
:
:
Initialize
(
std
:
:
move
(
aEndpoint
)
)
)
{
return
IPC_FAIL
(
this
"
InitSandboxTesting
failed
to
initialise
the
child
process
.
"
)
;
}
return
IPC_OK
(
)
;
}
#
endif
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessChild
:
:
RecvFlushFOGData
(
FlushFOGDataResolver
&
&
aResolver
)
{
glean
:
:
FlushFOGData
(
std
:
:
move
(
aResolver
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessChild
:
:
RecvTestTriggerMetrics
(
TestTriggerMetricsResolver
&
&
aResolve
)
{
mozilla
:
:
glean
:
:
test_only_ipc
:
:
a_counter
.
Add
(
nsIXULRuntime
:
:
PROCESS_TYPE_UTILITY
)
;
aResolve
(
true
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
UtilityProcessChild
:
:
RecvStartUtilityAudioDecoderService
(
Endpoint
<
PUtilityAudioDecoderParent
>
&
&
aEndpoint
)
{
mUtilityAudioDecoderInstance
=
new
UtilityAudioDecoderParent
(
)
;
if
(
!
mUtilityAudioDecoderInstance
)
{
return
IPC_FAIL
(
this
"
Failing
to
create
UtilityAudioDecoderParent
"
)
;
}
mUtilityAudioDecoderInstance
-
>
Start
(
std
:
:
move
(
aEndpoint
)
)
;
return
IPC_OK
(
)
;
}
void
UtilityProcessChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
AbnormalShutdown
=
=
aWhy
)
{
NS_WARNING
(
"
Shutting
down
Utility
process
early
due
to
a
crash
!
"
)
;
ipc
:
:
ProcessChild
:
:
QuickExit
(
)
;
}
glean
:
:
FlushFOGData
(
[
]
(
ByteBuf
&
&
aBuf
)
{
glean
:
:
SendFOGData
(
std
:
:
move
(
aBuf
)
)
;
}
)
;
#
ifndef
NS_FREE_PERMANENT_DATA
ProcessChild
:
:
QuickExit
(
)
;
#
else
if
(
mProfilerController
)
{
mProfilerController
-
>
Shutdown
(
)
;
mProfilerController
=
nullptr
;
}
mShutdownBlockers
.
WaitUntilClear
(
10
*
1000
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
&
]
(
)
{
#
ifdef
XP_WIN
{
RefPtr
<
DllServices
>
dllSvc
(
DllServices
:
:
Get
(
)
)
;
dllSvc
-
>
DisableFull
(
)
;
}
#
endif
{
StaticMutexAutoLock
lock
(
sUtilityProcessChildMutex
)
;
if
(
sUtilityProcessChild
)
{
sUtilityProcessChild
=
nullptr
;
}
}
ipc
:
:
CrashReporterClient
:
:
DestroySingleton
(
)
;
XRE_ShutdownChildProcess
(
)
;
}
)
;
#
endif
}
}
