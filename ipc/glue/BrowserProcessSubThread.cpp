#
include
"
mozilla
/
ipc
/
BrowserProcessSubThread
.
h
"
#
if
defined
(
OS_WIN
)
#
include
<
objbase
.
h
>
#
endif
namespace
mozilla
{
namespace
ipc
{
static
const
char
*
kBrowserThreadNames
[
BrowserProcessSubThread
:
:
ID_COUNT
]
=
{
"
IPC
I
/
O
Parent
"
}
;
StaticMutex
BrowserProcessSubThread
:
:
sLock
;
BrowserProcessSubThread
*
BrowserProcessSubThread
:
:
sBrowserThreads
[
ID_COUNT
]
=
{
nullptr
}
;
BrowserProcessSubThread
:
:
BrowserProcessSubThread
(
ID
aId
)
:
base
:
:
Thread
(
kBrowserThreadNames
[
aId
]
)
mIdentifier
(
aId
)
{
StaticMutexAutoLock
lock
(
sLock
)
;
DCHECK
(
aId
>
=
0
&
&
aId
<
ID_COUNT
)
;
DCHECK
(
sBrowserThreads
[
aId
]
=
=
nullptr
)
;
sBrowserThreads
[
aId
]
=
this
;
}
BrowserProcessSubThread
:
:
~
BrowserProcessSubThread
(
)
{
Stop
(
)
;
{
StaticMutexAutoLock
lock
(
sLock
)
;
sBrowserThreads
[
mIdentifier
]
=
nullptr
;
}
}
void
BrowserProcessSubThread
:
:
Init
(
)
{
#
if
defined
(
OS_WIN
)
CoInitialize
(
nullptr
)
;
#
endif
}
void
BrowserProcessSubThread
:
:
CleanUp
(
)
{
#
if
defined
(
OS_WIN
)
CoUninitialize
(
)
;
#
endif
}
MessageLoop
*
BrowserProcessSubThread
:
:
GetMessageLoop
(
ID
aId
)
{
StaticMutexAutoLock
lock
(
sLock
)
;
DCHECK
(
aId
>
=
0
&
&
aId
<
ID_COUNT
)
;
if
(
sBrowserThreads
[
aId
]
)
return
sBrowserThreads
[
aId
]
-
>
message_loop
(
)
;
return
nullptr
;
}
}
}
