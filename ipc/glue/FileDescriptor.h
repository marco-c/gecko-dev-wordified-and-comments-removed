#
ifndef
mozilla_ipc_FileDescriptor_h
#
define
mozilla_ipc_FileDescriptor_h
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
nscore
.
h
"
#
ifdef
XP_WIN
#
include
<
winnt
.
h
>
#
else
#
include
"
base
/
file_descriptor_posix
.
h
"
#
endif
namespace
mozilla
{
namespace
ipc
{
class
FileDescriptor
{
public
:
typedef
base
:
:
ProcessId
ProcessId
;
#
ifdef
XP_WIN
typedef
HANDLE
PlatformHandleType
;
typedef
HANDLE
PickleType
;
#
else
typedef
int
PlatformHandleType
;
typedef
base
:
:
FileDescriptor
PickleType
;
#
endif
struct
IPDLPrivate
{
}
;
FileDescriptor
(
)
;
FileDescriptor
(
const
FileDescriptor
&
aOther
)
:
mHandleCreatedByOtherProcess
(
false
)
#
ifdef
DEBUG
mHandleCreatedByOtherProcessWasUsed
(
false
)
#
endif
{
Assign
(
aOther
)
;
}
explicit
FileDescriptor
(
PlatformHandleType
aHandle
)
;
FileDescriptor
(
const
IPDLPrivate
&
const
PickleType
&
aPickle
)
#
ifdef
XP_WIN
:
mHandle
(
aPickle
)
#
else
:
mHandle
(
aPickle
.
fd
)
#
endif
mHandleCreatedByOtherProcess
(
true
)
#
ifdef
DEBUG
mHandleCreatedByOtherProcessWasUsed
(
false
)
#
endif
{
}
~
FileDescriptor
(
)
{
CloseCurrentProcessHandle
(
)
;
}
FileDescriptor
&
operator
=
(
const
FileDescriptor
&
aOther
)
{
CloseCurrentProcessHandle
(
)
;
Assign
(
aOther
)
;
return
*
this
;
}
PickleType
ShareTo
(
const
IPDLPrivate
&
ProcessId
aTargetPid
)
const
;
bool
IsValid
(
)
const
{
return
IsValid
(
mHandle
)
;
}
PlatformHandleType
PlatformHandle
(
)
const
{
#
ifdef
DEBUG
if
(
mHandleCreatedByOtherProcess
)
{
mHandleCreatedByOtherProcessWasUsed
=
true
;
}
#
endif
return
mHandle
;
}
bool
operator
=
=
(
const
FileDescriptor
&
aOther
)
const
{
return
mHandle
=
=
aOther
.
mHandle
;
}
private
:
void
Assign
(
const
FileDescriptor
&
aOther
)
{
if
(
aOther
.
mHandleCreatedByOtherProcess
)
{
mHandleCreatedByOtherProcess
=
true
;
#
ifdef
DEBUG
mHandleCreatedByOtherProcessWasUsed
=
aOther
.
mHandleCreatedByOtherProcessWasUsed
;
#
endif
mHandle
=
aOther
.
PlatformHandle
(
)
;
}
else
{
DuplicateInCurrentProcess
(
aOther
.
PlatformHandle
(
)
)
;
mHandleCreatedByOtherProcess
=
false
;
#
ifdef
DEBUG
mHandleCreatedByOtherProcessWasUsed
=
false
;
#
endif
}
}
static
bool
IsValid
(
PlatformHandleType
aHandle
)
;
void
DuplicateInCurrentProcess
(
PlatformHandleType
aHandle
)
;
void
CloseCurrentProcessHandle
(
)
;
PlatformHandleType
mHandle
;
bool
mHandleCreatedByOtherProcess
;
#
ifdef
DEBUG
mutable
bool
mHandleCreatedByOtherProcessWasUsed
;
#
endif
}
;
}
}
#
endif
