#
ifndef
mozilla_ipc_FileDescriptor_h
#
define
mozilla_ipc_FileDescriptor_h
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
ifdef
XP_WIN
#
include
<
winnt
.
h
>
#
include
<
cstdint
>
#
else
#
include
"
base
/
file_descriptor_posix
.
h
"
#
endif
namespace
mozilla
{
namespace
ipc
{
class
FileDescriptor
{
public
:
typedef
base
:
:
ProcessId
ProcessId
;
#
ifdef
XP_WIN
typedef
HANDLE
PlatformHandleType
;
typedef
HANDLE
PickleType
;
#
else
typedef
int
PlatformHandleType
;
typedef
base
:
:
FileDescriptor
PickleType
;
#
endif
struct
PlatformHandleHelper
{
MOZ_IMPLICIT
PlatformHandleHelper
(
PlatformHandleType
aHandle
)
;
MOZ_IMPLICIT
PlatformHandleHelper
(
std
:
:
nullptr_t
)
;
bool
operator
!
=
(
std
:
:
nullptr_t
)
const
;
operator
PlatformHandleType
(
)
const
;
#
ifdef
XP_WIN
operator
std
:
:
intptr_t
(
)
const
;
#
endif
private
:
PlatformHandleType
mHandle
;
}
;
struct
PlatformHandleDeleter
{
typedef
PlatformHandleHelper
pointer
;
void
operator
(
)
(
PlatformHandleHelper
aHelper
)
;
}
;
typedef
UniquePtr
<
PlatformHandleType
PlatformHandleDeleter
>
UniquePlatformHandle
;
struct
IPDLPrivate
{
}
;
FileDescriptor
(
)
;
FileDescriptor
(
const
FileDescriptor
&
aOther
)
;
FileDescriptor
(
FileDescriptor
&
&
aOther
)
;
explicit
FileDescriptor
(
PlatformHandleType
aHandle
)
;
FileDescriptor
(
const
IPDLPrivate
&
const
PickleType
&
aPickle
)
;
~
FileDescriptor
(
)
;
FileDescriptor
&
operator
=
(
const
FileDescriptor
&
aOther
)
;
FileDescriptor
&
operator
=
(
FileDescriptor
&
&
aOther
)
;
PickleType
ShareTo
(
const
IPDLPrivate
&
ProcessId
aTargetPid
)
const
;
bool
IsValid
(
)
const
;
UniquePlatformHandle
ClonePlatformHandle
(
)
const
;
bool
operator
=
=
(
const
FileDescriptor
&
aOther
)
const
;
private
:
friend
struct
PlatformHandleTrait
;
void
Assign
(
const
FileDescriptor
&
aOther
)
;
void
Close
(
)
;
static
bool
IsValid
(
PlatformHandleType
aHandle
)
;
static
PlatformHandleType
Clone
(
PlatformHandleType
aHandle
)
;
static
void
Close
(
PlatformHandleType
aHandle
)
;
PlatformHandleType
mHandle
;
}
;
}
}
#
endif
