#
include
"
mozilla
/
ipc
/
ScopedPort
.
h
"
#
include
"
mozilla
/
ipc
/
NodeController
.
h
"
namespace
mozilla
:
:
ipc
{
void
ScopedPort
:
:
Reset
(
)
{
if
(
mValid
)
{
mController
-
>
ClosePort
(
mPort
)
;
}
mValid
=
false
;
mPort
=
{
}
;
mController
=
nullptr
;
}
auto
ScopedPort
:
:
Release
(
)
-
>
PortRef
{
if
(
!
mValid
)
{
return
{
}
;
}
mValid
=
false
;
mController
=
nullptr
;
return
std
:
:
exchange
(
mPort
PortRef
{
}
)
;
}
ScopedPort
:
:
ScopedPort
(
)
=
default
;
ScopedPort
:
:
~
ScopedPort
(
)
{
Reset
(
)
;
}
ScopedPort
:
:
ScopedPort
(
PortRef
aPort
NodeController
*
aController
)
:
mValid
(
true
)
mPort
(
std
:
:
move
(
aPort
)
)
mController
(
aController
)
{
MOZ_ASSERT
(
mPort
.
is_valid
(
)
&
&
mController
)
;
}
ScopedPort
:
:
ScopedPort
(
ScopedPort
&
&
aOther
)
:
mValid
(
std
:
:
exchange
(
aOther
.
mValid
false
)
)
mPort
(
std
:
:
move
(
aOther
.
mPort
)
)
mController
(
std
:
:
move
(
aOther
.
mController
)
)
{
}
ScopedPort
&
ScopedPort
:
:
operator
=
(
ScopedPort
&
&
aOther
)
{
if
(
this
!
=
&
aOther
)
{
Reset
(
)
;
mValid
=
std
:
:
exchange
(
aOther
.
mValid
false
)
;
mPort
=
std
:
:
move
(
aOther
.
mPort
)
;
mController
=
std
:
:
move
(
aOther
.
mController
)
;
}
return
*
this
;
}
}
