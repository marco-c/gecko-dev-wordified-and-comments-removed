#
ifndef
_include_ipc_glue_UtilityAudioDecoderChild_h__
#
define
_include_ipc_glue_UtilityAudioDecoderChild_h__
#
include
"
mozilla
/
ProcInfo
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessParent
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessSandboxing
.
h
"
#
include
"
mozilla
/
ipc
/
PUtilityAudioDecoderChild
.
h
"
#
ifdef
MOZ_WMF_MEDIA_ENGINE
#
include
"
mozilla
/
gfx
/
GPUProcessListener
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVarReceiver
.
h
"
#
endif
#
include
"
PDMFactory
.
h
"
namespace
mozilla
:
:
ipc
{
class
UtilityAudioDecoderChild
final
:
public
PUtilityAudioDecoderChild
#
ifdef
MOZ_WMF_MEDIA_ENGINE
public
gfx
:
:
gfxVarReceiver
public
gfx
:
:
GPUProcessListener
#
endif
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
UtilityAudioDecoderChild
override
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateMediaCodecsSupported
(
const
RemoteDecodeIn
&
aLocation
const
media
:
:
MediaCodecsSupported
&
aSupported
)
;
UtilityActorName
GetActorName
(
)
{
switch
(
mSandbox
)
{
case
GENERIC_UTILITY
:
return
UtilityActorName
:
:
AudioDecoder_Generic
;
#
ifdef
MOZ_APPLEMEDIA
case
UTILITY_AUDIO_DECODING_APPLE_MEDIA
:
return
UtilityActorName
:
:
AudioDecoder_AppleMedia
;
#
endif
#
ifdef
XP_WIN
case
UTILITY_AUDIO_DECODING_WMF
:
return
UtilityActorName
:
:
AudioDecoder_WMF
;
#
endif
#
ifdef
MOZ_WMF_MEDIA_ENGINE
case
MF_MEDIA_ENGINE_CDM
:
return
UtilityActorName
:
:
MfMediaEngineCDM
;
#
endif
default
:
MOZ_CRASH
(
"
Unexpected
mSandbox
for
GetActorName
(
)
"
)
;
}
}
nsresult
BindToUtilityProcess
(
RefPtr
<
UtilityProcessParent
>
aUtilityParent
)
{
Endpoint
<
PUtilityAudioDecoderChild
>
utilityAudioDecoderChildEnd
;
Endpoint
<
PUtilityAudioDecoderParent
>
utilityAudioDecoderParentEnd
;
nsresult
rv
=
PUtilityAudioDecoder
:
:
CreateEndpoints
(
aUtilityParent
-
>
OtherPid
(
)
base
:
:
GetCurrentProcId
(
)
&
utilityAudioDecoderParentEnd
&
utilityAudioDecoderChildEnd
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_ASSERT
(
false
"
Protocol
endpoints
failure
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
!
aUtilityParent
-
>
SendStartUtilityAudioDecoderService
(
std
:
:
move
(
utilityAudioDecoderParentEnd
)
)
)
{
MOZ_ASSERT
(
false
"
StartUtilityAudioDecoder
service
failure
"
)
;
return
NS_ERROR_FAILURE
;
}
Bind
(
std
:
:
move
(
utilityAudioDecoderChildEnd
)
)
;
return
NS_OK
;
}
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
void
Bind
(
Endpoint
<
PUtilityAudioDecoderChild
>
&
&
aEndpoint
)
;
static
RefPtr
<
UtilityAudioDecoderChild
>
GetSingleton
(
SandboxingKind
aKind
)
;
#
ifdef
MOZ_WMF_MEDIA_ENGINE
mozilla
:
:
ipc
:
:
IPCResult
RecvCompleteCreatedVideoBridge
(
)
;
bool
HasCreatedVideoBridge
(
)
const
;
void
OnVarChanged
(
const
gfx
:
:
GfxVarUpdate
&
aVar
)
override
;
void
OnCompositorUnexpectedShutdown
(
)
override
;
bool
CreateVideoBridge
(
)
;
#
endif
private
:
explicit
UtilityAudioDecoderChild
(
SandboxingKind
aKind
)
;
~
UtilityAudioDecoderChild
(
)
=
default
;
const
SandboxingKind
mSandbox
;
#
ifdef
MOZ_WMF_MEDIA_ENGINE
bool
mHasCreatedVideoBridge
=
false
;
#
endif
}
;
}
#
endif
