#
ifndef
mozilla_ipc_IOThreadParent_h
#
define
mozilla_ipc_IOThreadParent_h
#
include
"
base
/
thread
.
h
"
#
include
"
chrome
/
common
/
ipc_channel
.
h
"
#
include
"
mozilla
/
ipc
/
ScopedPort
.
h
"
namespace
mozilla
:
:
ipc
{
class
IOThread
:
private
base
:
:
Thread
{
public
:
static
IOThread
*
Get
(
)
{
return
sSingleton
;
}
nsISerialEventTarget
*
GetEventTarget
(
)
{
return
base
:
:
Thread
:
:
message_loop
(
)
-
>
SerialEventTarget
(
)
;
}
protected
:
IOThread
(
const
char
*
aName
)
;
~
IOThread
(
)
;
void
StartThread
(
)
;
void
StopThread
(
)
;
void
Init
(
)
override
=
0
;
void
CleanUp
(
)
override
=
0
;
private
:
static
IOThread
*
sSingleton
;
}
;
class
IOThreadParent
:
public
IOThread
{
public
:
IOThreadParent
(
)
;
~
IOThreadParent
(
)
;
protected
:
void
Init
(
)
override
;
void
CleanUp
(
)
override
;
}
;
class
IOThreadChild
:
public
IOThread
{
public
:
IOThreadChild
(
IPC
:
:
Channel
:
:
ChannelHandle
aClientHandle
base
:
:
ProcessId
aParentPid
)
;
~
IOThreadChild
(
)
;
mozilla
:
:
ipc
:
:
ScopedPort
TakeInitialPort
(
)
{
return
std
:
:
move
(
mInitialPort
)
;
}
protected
:
void
Init
(
)
override
;
void
CleanUp
(
)
override
;
private
:
mozilla
:
:
ipc
:
:
ScopedPort
mInitialPort
;
IPC
:
:
Channel
:
:
ChannelHandle
mClientHandle
;
base
:
:
ProcessId
mParentPid
;
}
;
inline
void
AssertIOThread
(
)
{
MOZ_ASSERT
(
IOThread
:
:
Get
(
)
-
>
GetEventTarget
(
)
-
>
IsOnCurrentThread
(
)
"
should
be
on
the
async
IO
event
target
"
)
;
}
}
#
endif
