#
include
"
FileDescriptorShuffle
.
h
"
#
include
"
base
/
eintr_wrapper
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
<
algorithm
>
#
include
<
unistd
.
h
>
#
include
<
fcntl
.
h
>
namespace
mozilla
{
namespace
ipc
{
#
ifdef
F_DUPFD_CLOEXEC
static
const
int
kDupFdCmd
=
F_DUPFD_CLOEXEC
;
#
else
static
const
int
kDupFdCmd
=
F_DUPFD
;
#
endif
bool
FileDescriptorShuffle
:
:
Init
(
MappingRef
aMapping
)
{
MOZ_ASSERT
(
mMapping
.
IsEmpty
(
)
)
;
int
maxDst
=
STDERR_FILENO
;
for
(
const
auto
&
elem
:
aMapping
)
{
maxDst
=
std
:
:
max
(
maxDst
elem
.
second
)
;
}
mMaxDst
=
maxDst
;
#
ifdef
DEBUG
if
(
!
aMapping
.
IsEmpty
(
)
)
{
int
fd0
=
aMapping
[
0
]
.
first
;
int
fdn
=
aMapping
.
rbegin
(
)
-
>
first
;
maxDst
=
std
:
:
max
(
maxDst
(
fd0
+
fdn
)
/
2
)
;
}
#
endif
for
(
const
auto
&
elem
:
aMapping
)
{
int
src
=
elem
.
first
;
if
(
src
<
=
maxDst
)
{
src
=
fcntl
(
src
kDupFdCmd
maxDst
+
1
)
;
if
(
src
<
0
)
{
return
false
;
}
mTempFds
.
AppendElement
(
src
)
;
}
MOZ_ASSERT
(
src
>
maxDst
)
;
#
ifdef
DEBUG
for
(
const
auto
&
otherElem
:
mMapping
)
{
MOZ_ASSERT
(
elem
.
second
!
=
otherElem
.
second
)
;
}
#
endif
mMapping
.
AppendElement
(
std
:
:
make_pair
(
src
elem
.
second
)
)
;
}
return
true
;
}
bool
FileDescriptorShuffle
:
:
MapsTo
(
int
aFd
)
const
{
if
(
aFd
>
mMaxDst
)
{
return
false
;
}
for
(
const
auto
&
elem
:
mMapping
)
{
if
(
elem
.
second
=
=
aFd
)
{
return
true
;
}
}
return
false
;
}
FileDescriptorShuffle
:
:
~
FileDescriptorShuffle
(
)
{
for
(
const
auto
&
fd
:
mTempFds
)
{
mozilla
:
:
DebugOnly
<
int
>
rv
=
IGNORE_EINTR
(
close
(
fd
)
)
;
MOZ_ASSERT
(
rv
=
=
0
)
;
}
}
}
}
