#
ifndef
_include_ipc_glue_UtilityProcessManager_h_
#
define
_include_ipc_glue_UtilityProcessManager_h_
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessHost
.
h
"
#
include
"
nsIObserver
.
h
"
namespace
mozilla
{
class
MemoryReportingProcess
;
namespace
ipc
{
class
UtilityProcessParent
;
class
UtilityProcessManager
final
:
public
UtilityProcessHost
:
:
Listener
{
friend
class
UtilityProcessParent
;
public
:
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
static
RefPtr
<
UtilityProcessManager
>
GetSingleton
(
)
;
static
RefPtr
<
UtilityProcessManager
>
GetIfExists
(
)
;
RefPtr
<
GenericNonExclusivePromise
>
LaunchProcess
(
SandboxingKind
aSandbox
)
;
void
OnProcessUnexpectedShutdown
(
UtilityProcessHost
*
aHost
)
;
Maybe
<
base
:
:
ProcessId
>
ProcessPid
(
)
;
RefPtr
<
MemoryReportingProcess
>
GetProcessMemoryReporter
(
)
;
UtilityProcessParent
*
GetProcessParent
(
)
{
return
mProcessParent
;
}
UtilityProcessHost
*
Process
(
)
{
return
mProcess
;
}
void
CleanShutdown
(
)
;
private
:
~
UtilityProcessManager
(
)
;
bool
IsProcessLaunching
(
)
;
bool
IsProcessDestroyed
(
)
const
;
void
OnXPCOMShutdown
(
)
;
void
OnPreferenceChange
(
const
char16_t
*
aData
)
;
UtilityProcessManager
(
)
;
void
DestroyProcess
(
)
;
bool
IsShutdown
(
)
const
;
class
Observer
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
explicit
Observer
(
RefPtr
<
UtilityProcessManager
>
aManager
)
;
protected
:
~
Observer
(
)
=
default
;
RefPtr
<
UtilityProcessManager
>
mManager
;
}
;
friend
class
Observer
;
RefPtr
<
Observer
>
mObserver
;
uint32_t
mNumProcessAttempts
=
0
;
uint32_t
mNumUnexpectedCrashes
=
0
;
UtilityProcessHost
*
mProcess
=
nullptr
;
UtilityProcessParent
*
mProcessParent
=
nullptr
;
nsTArray
<
dom
:
:
Pref
>
mQueuedPrefs
;
RefPtr
<
GenericNonExclusivePromise
>
mLaunchPromise
;
}
;
}
}
#
endif
