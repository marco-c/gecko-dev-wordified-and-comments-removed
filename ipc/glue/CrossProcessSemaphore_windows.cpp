#
include
<
windows
.
h
>
#
include
"
base
/
process_util
.
h
"
#
include
"
CrossProcessSemaphore
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ProtocolUtils
.
h
"
using
base
:
:
GetCurrentProcessHandle
;
using
base
:
:
ProcessHandle
;
namespace
mozilla
{
CrossProcessSemaphore
*
CrossProcessSemaphore
:
:
Create
(
const
char
*
uint32_t
aInitialValue
)
{
HANDLE
semaphore
=
:
:
CreateSemaphoreA
(
nullptr
aInitialValue
0x7fffffff
nullptr
)
;
if
(
!
semaphore
)
{
return
nullptr
;
}
return
new
CrossProcessSemaphore
(
semaphore
)
;
}
CrossProcessSemaphore
*
CrossProcessSemaphore
:
:
Create
(
CrossProcessSemaphoreHandle
aHandle
)
{
DWORD
flags
;
if
(
!
:
:
GetHandleInformation
(
aHandle
.
get
(
)
&
flags
)
)
{
return
nullptr
;
}
return
new
CrossProcessSemaphore
(
aHandle
.
release
(
)
)
;
}
CrossProcessSemaphore
:
:
CrossProcessSemaphore
(
HANDLE
aSemaphore
)
:
mSemaphore
(
aSemaphore
)
{
MOZ_COUNT_CTOR
(
CrossProcessSemaphore
)
;
}
CrossProcessSemaphore
:
:
~
CrossProcessSemaphore
(
)
{
MOZ_ASSERT
(
mSemaphore
"
Improper
construction
of
semaphore
or
double
free
.
"
)
;
:
:
CloseHandle
(
mSemaphore
)
;
MOZ_COUNT_DTOR
(
CrossProcessSemaphore
)
;
}
bool
CrossProcessSemaphore
:
:
Wait
(
const
Maybe
<
TimeDuration
>
&
aWaitTime
)
{
MOZ_ASSERT
(
mSemaphore
"
Improper
construction
of
semaphore
.
"
)
;
HRESULT
hr
=
:
:
WaitForSingleObject
(
mSemaphore
aWaitTime
.
isSome
(
)
?
aWaitTime
-
>
ToMilliseconds
(
)
:
INFINITE
)
;
return
hr
=
=
WAIT_OBJECT_0
;
}
void
CrossProcessSemaphore
:
:
Signal
(
)
{
MOZ_ASSERT
(
mSemaphore
"
Improper
construction
of
semaphore
.
"
)
;
:
:
ReleaseSemaphore
(
mSemaphore
1
nullptr
)
;
}
CrossProcessSemaphoreHandle
CrossProcessSemaphore
:
:
ShareToProcess
(
base
:
:
ProcessId
aTargetPid
)
{
HANDLE
newHandle
;
bool
succeeded
=
:
:
DuplicateHandle
(
GetCurrentProcess
(
)
mSemaphore
GetCurrentProcess
(
)
&
newHandle
0
false
DUPLICATE_SAME_ACCESS
)
;
if
(
!
succeeded
)
{
return
nullptr
;
}
return
UniqueFileHandle
(
newHandle
)
;
}
void
CrossProcessSemaphore
:
:
CloseHandle
(
)
{
}
}
