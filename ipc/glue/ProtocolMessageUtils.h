#
ifndef
IPC_GLUE_PROTOCOLMESSAGEUTILS_H
#
define
IPC_GLUE_PROTOCOLMESSAGEUTILS_H
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
base
/
string_util
.
h
"
#
include
"
chrome
/
common
/
ipc_channel
.
h
"
#
include
"
chrome
/
common
/
ipc_message_utils
.
h
"
#
include
"
ipc
/
EnumSerializer
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
ipc
/
Transport
.
h
"
class
PickleIterator
;
namespace
mozilla
:
:
ipc
{
class
FileDescriptor
;
template
<
class
PFooSide
>
class
Endpoint
;
template
<
class
PFooSide
>
class
ManagedEndpoint
;
template
<
typename
P
>
struct
IPDLParamTraits
;
}
namespace
IPC
{
class
Message
;
template
<
>
struct
ParamTraits
<
Channel
:
:
Mode
>
:
ContiguousEnumSerializerInclusive
<
Channel
:
:
Mode
Channel
:
:
MODE_SERVER
Channel
:
:
MODE_CLIENT
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
ipc
:
:
ActorHandle
>
{
typedef
mozilla
:
:
ipc
:
:
ActorHandle
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
IPC
:
:
WriteParam
(
aMsg
aParam
.
mId
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
int
id
;
if
(
IPC
:
:
ReadParam
(
aMsg
aIter
&
id
)
)
{
aResult
-
>
mId
=
id
;
return
true
;
}
return
false
;
}
static
void
Log
(
const
paramType
&
aParam
std
:
:
wstring
*
aLog
)
{
aLog
-
>
append
(
StringPrintf
(
L
"
(
%
d
)
"
aParam
.
mId
)
)
;
}
}
;
template
<
class
PFooSide
>
struct
ParamTraits
<
mozilla
:
:
ipc
:
:
Endpoint
<
PFooSide
>
>
{
typedef
mozilla
:
:
ipc
:
:
Endpoint
<
PFooSide
>
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
IPC
:
:
WriteParam
(
aMsg
aParam
.
mValid
)
;
if
(
!
aParam
.
mValid
)
{
return
;
}
IPC
:
:
WriteParam
(
aMsg
aParam
.
mMode
)
;
mozilla
:
:
ipc
:
:
TransportDescriptor
desc
=
mozilla
:
:
ipc
:
:
DuplicateDescriptor
(
aParam
.
mTransport
)
;
IPC
:
:
WriteParam
(
aMsg
desc
)
;
IPC
:
:
WriteParam
(
aMsg
aParam
.
mMyPid
)
;
IPC
:
:
WriteParam
(
aMsg
aParam
.
mOtherPid
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
MOZ_RELEASE_ASSERT
(
!
aResult
-
>
mValid
)
;
if
(
!
IPC
:
:
ReadParam
(
aMsg
aIter
&
aResult
-
>
mValid
)
)
{
return
false
;
}
if
(
!
aResult
-
>
mValid
)
{
return
true
;
}
if
(
!
IPC
:
:
ReadParam
(
aMsg
aIter
&
aResult
-
>
mMode
)
|
|
!
IPC
:
:
ReadParam
(
aMsg
aIter
&
aResult
-
>
mTransport
)
|
|
!
IPC
:
:
ReadParam
(
aMsg
aIter
&
aResult
-
>
mMyPid
)
|
|
!
IPC
:
:
ReadParam
(
aMsg
aIter
&
aResult
-
>
mOtherPid
)
)
{
return
false
;
}
return
true
;
}
static
void
Log
(
const
paramType
&
aParam
std
:
:
wstring
*
aLog
)
{
aLog
-
>
append
(
StringPrintf
(
L
"
Endpoint
"
)
)
;
}
}
;
template
<
class
PFooSide
>
struct
ParamTraits
<
mozilla
:
:
ipc
:
:
ManagedEndpoint
<
PFooSide
>
>
{
typedef
mozilla
:
:
ipc
:
:
ManagedEndpoint
<
PFooSide
>
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
IPC
:
:
WriteParam
(
aMsg
aParam
.
mId
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
MOZ_RELEASE_ASSERT
(
aResult
-
>
mId
=
=
0
)
;
if
(
!
IPC
:
:
ReadParam
(
aMsg
aIter
&
aResult
-
>
mId
)
)
{
return
false
;
}
return
true
;
}
static
void
Log
(
const
paramType
&
aParam
std
:
:
wstring
*
aLog
)
{
aLog
-
>
append
(
StringPrintf
(
L
"
ManagedEndpoint
"
)
)
;
}
}
;
}
namespace
mozilla
:
:
ipc
{
template
<
>
struct
IPDLParamTraits
<
FileDescriptor
>
{
typedef
FileDescriptor
paramType
;
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
const
paramType
&
aParam
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
paramType
*
aResult
)
;
}
;
}
#
endif
