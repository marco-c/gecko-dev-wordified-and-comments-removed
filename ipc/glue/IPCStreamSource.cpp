#
include
"
IPCStreamSource
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsICancelableRunnable
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsISerialEventTarget
.
h
"
#
include
"
nsStreamUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
mozilla
:
:
dom
:
:
WorkerPrivate
;
using
mozilla
:
:
dom
:
:
WorkerStatus
;
using
mozilla
:
:
wr
:
:
ByteBuffer
;
namespace
mozilla
{
namespace
ipc
{
class
IPCStreamSource
:
:
Callback
final
:
public
nsIInputStreamCallback
public
nsIRunnable
public
nsICancelableRunnable
{
public
:
explicit
Callback
(
IPCStreamSource
*
aSource
)
:
mSource
(
aSource
)
mOwningEventTarget
(
GetCurrentThreadSerialEventTarget
(
)
)
{
MOZ_ASSERT
(
mSource
)
;
}
NS_IMETHOD
OnInputStreamReady
(
nsIAsyncInputStream
*
aStream
)
override
{
if
(
mOwningEventTarget
-
>
IsOnCurrentThread
(
)
)
{
return
Run
(
)
;
}
nsresult
rv
=
mOwningEventTarget
-
>
Dispatch
(
this
nsIThread
:
:
DISPATCH_NORMAL
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Failed
to
dispatch
stream
readable
event
to
owning
thread
"
)
;
}
return
NS_OK
;
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
mOwningEventTarget
-
>
IsOnCurrentThread
(
)
)
;
if
(
mSource
)
{
mSource
-
>
OnStreamReady
(
this
)
;
}
return
NS_OK
;
}
nsresult
Cancel
(
)
override
{
return
NS_OK
;
}
void
ClearSource
(
)
{
MOZ_ASSERT
(
mOwningEventTarget
-
>
IsOnCurrentThread
(
)
)
;
MOZ_ASSERT
(
mSource
)
;
mSource
=
nullptr
;
}
private
:
~
Callback
(
)
{
MOZ_ASSERT
(
!
mSource
)
;
}
IPCStreamSource
*
mSource
;
nsCOMPtr
<
nsISerialEventTarget
>
mOwningEventTarget
;
NS_DECL_THREADSAFE_ISUPPORTS
}
;
NS_IMPL_ISUPPORTS
(
IPCStreamSource
:
:
Callback
nsIInputStreamCallback
nsIRunnable
nsICancelableRunnable
)
;
IPCStreamSource
:
:
IPCStreamSource
(
nsIAsyncInputStream
*
aInputStream
)
:
WorkerHolder
(
"
IPCStreamSource
"
)
mStream
(
aInputStream
)
mWorkerPrivate
(
nullptr
)
mState
(
ePending
)
{
MOZ_ASSERT
(
aInputStream
)
;
}
IPCStreamSource
:
:
~
IPCStreamSource
(
)
{
NS_ASSERT_OWNINGTHREAD
(
IPCStreamSource
)
;
MOZ_ASSERT
(
mState
=
=
eClosed
)
;
MOZ_ASSERT
(
!
mCallback
)
;
MOZ_ASSERT
(
!
mWorkerPrivate
)
;
}
bool
IPCStreamSource
:
:
Initialize
(
)
{
bool
nonBlocking
=
false
;
MOZ_ALWAYS_TRUE
(
NS_SUCCEEDED
(
mStream
-
>
IsNonBlocking
(
&
nonBlocking
)
)
)
;
if
(
!
nonBlocking
)
{
return
false
;
}
WorkerPrivate
*
workerPrivate
=
nullptr
;
if
(
!
NS_IsMainThread
(
)
)
{
workerPrivate
=
mozilla
:
:
dom
:
:
GetCurrentThreadWorkerPrivate
(
)
;
if
(
workerPrivate
)
{
bool
result
=
HoldWorker
(
workerPrivate
WorkerStatus
:
:
Canceling
)
;
if
(
!
result
)
{
return
false
;
}
mWorkerPrivate
=
workerPrivate
;
}
else
{
AssertIsOnBackgroundThread
(
)
;
}
}
return
true
;
}
void
IPCStreamSource
:
:
ActorConstructed
(
)
{
MOZ_ASSERT
(
mState
=
=
ePending
)
;
mState
=
eActorConstructed
;
}
bool
IPCStreamSource
:
:
Notify
(
WorkerStatus
aStatus
)
{
NS_ASSERT_OWNINGTHREAD
(
IPCStreamSource
)
;
return
true
;
}
void
IPCStreamSource
:
:
ActorDestroyed
(
)
{
NS_ASSERT_OWNINGTHREAD
(
IPCStreamSource
)
;
mState
=
eClosed
;
if
(
mCallback
)
{
mCallback
-
>
ClearSource
(
)
;
mCallback
=
nullptr
;
}
if
(
mWorkerPrivate
)
{
ReleaseWorker
(
)
;
mWorkerPrivate
=
nullptr
;
}
}
void
IPCStreamSource
:
:
Start
(
)
{
NS_ASSERT_OWNINGTHREAD
(
IPCStreamSource
)
;
DoRead
(
)
;
}
void
IPCStreamSource
:
:
StartDestroy
(
)
{
NS_ASSERT_OWNINGTHREAD
(
IPCStreamSource
)
;
OnEnd
(
NS_ERROR_ABORT
)
;
}
void
IPCStreamSource
:
:
DoRead
(
)
{
NS_ASSERT_OWNINGTHREAD
(
IPCStreamSource
)
;
MOZ_ASSERT
(
mState
=
=
eActorConstructed
)
;
MOZ_ASSERT
(
!
mCallback
)
;
static
const
uint64_t
kMaxBytesPerMessage
=
32
*
1024
;
static_assert
(
kMaxBytesPerMessage
<
=
static_cast
<
uint64_t
>
(
UINT32_MAX
)
"
kMaxBytesPerMessage
must
cleanly
cast
to
uint32_t
"
)
;
char
buffer
[
kMaxBytesPerMessage
]
;
while
(
true
)
{
MOZ_ASSERT
(
mState
=
=
eActorConstructed
)
;
uint64_t
dummy
;
nsresult
rv
=
mStream
-
>
Available
(
&
dummy
)
;
if
(
NS_FAILED
(
rv
)
)
{
OnEnd
(
rv
)
;
return
;
}
uint32_t
bytesRead
=
0
;
rv
=
mStream
-
>
Read
(
buffer
kMaxBytesPerMessage
&
bytesRead
)
;
if
(
rv
=
=
NS_BASE_STREAM_WOULD_BLOCK
)
{
MOZ_ASSERT
(
bytesRead
=
=
0
)
;
Wait
(
)
;
return
;
}
if
(
NS_FAILED
(
rv
)
)
{
MOZ_ASSERT
(
bytesRead
=
=
0
)
;
OnEnd
(
rv
)
;
return
;
}
if
(
bytesRead
=
=
0
)
{
OnEnd
(
NS_BASE_STREAM_CLOSED
)
;
return
;
}
SendData
(
ByteBuffer
(
bytesRead
reinterpret_cast
<
uint8_t
*
>
(
buffer
)
)
)
;
}
}
void
IPCStreamSource
:
:
Wait
(
)
{
NS_ASSERT_OWNINGTHREAD
(
IPCStreamSource
)
;
MOZ_ASSERT
(
mState
=
=
eActorConstructed
)
;
MOZ_ASSERT
(
!
mCallback
)
;
mCallback
=
new
Callback
(
this
)
;
nsresult
rv
=
mStream
-
>
AsyncWait
(
mCallback
0
0
nullptr
)
;
if
(
NS_FAILED
(
rv
)
)
{
OnEnd
(
rv
)
;
return
;
}
}
void
IPCStreamSource
:
:
OnStreamReady
(
Callback
*
aCallback
)
{
NS_ASSERT_OWNINGTHREAD
(
IPCStreamSource
)
;
MOZ_ASSERT
(
mCallback
)
;
MOZ_ASSERT
(
aCallback
=
=
mCallback
)
;
mCallback
-
>
ClearSource
(
)
;
mCallback
=
nullptr
;
DoRead
(
)
;
}
void
IPCStreamSource
:
:
OnEnd
(
nsresult
aRv
)
{
NS_ASSERT_OWNINGTHREAD
(
IPCStreamSource
)
;
MOZ_ASSERT
(
aRv
!
=
NS_BASE_STREAM_WOULD_BLOCK
)
;
if
(
mState
=
=
eClosed
)
{
return
;
}
mState
=
eClosed
;
mStream
-
>
CloseWithStatus
(
aRv
)
;
if
(
aRv
=
=
NS_BASE_STREAM_CLOSED
)
{
aRv
=
NS_OK
;
}
Close
(
aRv
)
;
}
}
}
