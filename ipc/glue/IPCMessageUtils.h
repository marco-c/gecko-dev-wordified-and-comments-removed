#
ifndef
__IPC_GLUE_IPCMESSAGEUTILS_H__
#
define
__IPC_GLUE_IPCMESSAGEUTILS_H__
#
include
<
cstdint
>
#
include
<
string
>
#
include
<
type_traits
>
#
include
"
build
/
build_config
.
h
"
#
include
"
chrome
/
common
/
ipc_message
.
h
"
#
include
"
chrome
/
common
/
ipc_message_utils
.
h
"
#
include
"
mozilla
/
MacroForEach
.
h
"
#
include
"
mozilla
/
ipc
/
IPCCore
.
h
"
class
PickleIterator
;
#
include
"
base
/
string_util
.
h
"
#
ifdef
_MSC_VER
#
pragma
warning
(
disable
:
4800
)
#
endif
#
if
!
defined
(
OS_POSIX
)
namespace
base
{
struct
FileDescriptor
{
}
;
}
#
endif
namespace
mozilla
{
template
<
typename
.
.
.
>
class
Variant
;
namespace
detail
{
template
<
typename
.
.
.
>
struct
VariantTag
;
}
}
namespace
IPC
{
template
<
typename
T
>
struct
PlainOldDataSerializer
{
static_assert
(
std
:
:
is_trivially_copyable
<
T
>
:
:
value
"
PlainOldDataSerializer
can
only
be
used
with
trivially
copyable
types
!
"
)
;
typedef
T
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
aMsg
-
>
WriteBytes
(
&
aParam
sizeof
(
aParam
)
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
aMsg
-
>
ReadBytesInto
(
aIter
aResult
sizeof
(
paramType
)
)
;
}
}
;
template
<
typename
T
>
struct
EmptyStructSerializer
{
typedef
T
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
*
aResult
=
{
}
;
return
true
;
}
}
;
template
<
>
struct
ParamTraits
<
int8_t
>
{
typedef
int8_t
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
aMsg
-
>
WriteBytes
(
&
aParam
sizeof
(
aParam
)
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
aMsg
-
>
ReadBytesInto
(
aIter
aResult
sizeof
(
*
aResult
)
)
;
}
static
void
Log
(
const
paramType
&
aParam
std
:
:
wstring
*
aLog
)
{
aLog
-
>
append
(
StringPrintf
(
L
"
0x
%
02x
"
aParam
&
0xff
)
)
;
}
}
;
template
<
>
struct
ParamTraits
<
uint8_t
>
{
typedef
uint8_t
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
aMsg
-
>
WriteBytes
(
&
aParam
sizeof
(
aParam
)
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
aMsg
-
>
ReadBytesInto
(
aIter
aResult
sizeof
(
*
aResult
)
)
;
}
static
void
Log
(
const
paramType
&
aParam
std
:
:
wstring
*
aLog
)
{
aLog
-
>
append
(
StringPrintf
(
L
"
0x
%
02x
"
aParam
)
)
;
}
}
;
#
if
!
defined
(
OS_POSIX
)
template
<
>
struct
ParamTraits
<
base
:
:
FileDescriptor
>
{
typedef
base
:
:
FileDescriptor
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
MOZ_CRASH
(
"
FileDescriptor
isn
'
t
meaningful
on
this
platform
"
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
MOZ_CRASH
(
"
FileDescriptor
isn
'
t
meaningful
on
this
platform
"
)
;
return
false
;
}
}
;
#
endif
template
<
>
struct
ParamTraits
<
mozilla
:
:
void_t
>
{
typedef
mozilla
:
:
void_t
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
*
aResult
=
paramType
(
)
;
return
true
;
}
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
null_t
>
{
typedef
mozilla
:
:
null_t
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
*
aResult
=
paramType
(
)
;
return
true
;
}
}
;
template
<
typename
ParamType
>
struct
BitfieldHelper
{
static
bool
ReadBoolForBitfield
(
const
Message
*
aMsg
PickleIterator
*
aIter
ParamType
*
aResult
void
(
ParamType
:
:
*
aSetter
)
(
bool
)
)
{
bool
value
;
if
(
ReadParam
(
aMsg
aIter
&
value
)
)
{
(
aResult
-
>
*
aSetter
)
(
value
)
;
return
true
;
}
return
false
;
}
}
;
template
<
typename
.
.
.
Ts
>
static
void
WriteParams
(
Message
*
aMsg
const
Ts
&
.
.
.
aArgs
)
{
(
WriteParam
(
aMsg
aArgs
)
.
.
.
)
;
}
template
<
typename
.
.
.
Ts
>
static
bool
ReadParams
(
const
Message
*
aMsg
PickleIterator
*
aIter
Ts
&
.
.
.
aArgs
)
{
return
(
ReadParam
(
aMsg
aIter
&
aArgs
)
&
&
.
.
.
)
;
}
#
define
ACCESS_PARAM_FIELD
(
Field
)
aParam
.
Field
#
define
DEFINE_IPC_SERIALIZER_WITH_FIELDS
(
Type
.
.
.
)
\
template
<
>
\
struct
ParamTraits
<
Type
>
{
\
typedef
Type
paramType
;
\
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
\
WriteParams
(
aMsg
MOZ_FOR_EACH_SEPARATED
(
ACCESS_PARAM_FIELD
(
)
(
)
\
(
__VA_ARGS__
)
)
)
;
\
}
\
\
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
\
paramType
*
aResult
)
{
\
paramType
&
aParam
=
*
aResult
;
\
return
ReadParams
(
aMsg
aIter
\
MOZ_FOR_EACH_SEPARATED
(
ACCESS_PARAM_FIELD
(
)
(
)
\
(
__VA_ARGS__
)
)
)
;
\
}
\
}
;
#
define
DEFINE_IPC_SERIALIZER_WITHOUT_FIELDS
(
Type
)
\
template
<
>
\
struct
ParamTraits
<
Type
>
:
public
EmptyStructSerializer
<
Type
>
{
}
;
}
#
define
DEFINE_IPC_SERIALIZER_WITH_SUPER_CLASS_AND_FIELDS
(
Type
Super
.
.
.
)
\
template
<
>
\
struct
ParamTraits
<
Type
>
{
\
typedef
Type
paramType
;
\
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
\
WriteParam
(
aMsg
static_cast
<
const
Super
&
>
(
aParam
)
)
;
\
WriteParams
(
aMsg
MOZ_FOR_EACH_SEPARATED
(
ACCESS_PARAM_FIELD
(
)
(
)
\
(
__VA_ARGS__
)
)
)
;
\
}
\
\
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
\
paramType
*
aResult
)
{
\
paramType
&
aParam
=
*
aResult
;
\
return
ReadParam
(
aMsg
aIter
static_cast
<
Super
*
>
(
aResult
)
)
&
&
\
ReadParams
(
aMsg
aIter
\
MOZ_FOR_EACH_SEPARATED
(
ACCESS_PARAM_FIELD
(
)
(
)
\
(
__VA_ARGS__
)
)
)
;
\
}
\
}
;
#
endif
