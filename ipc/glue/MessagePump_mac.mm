#
include
"
MessagePump
.
h
"
#
include
<
Foundation
/
Foundation
.
h
>
#
include
"
base
/
scoped_nsautorelease_pool
.
h
"
#
include
"
mozilla
/
ProfilerMarkers
.
h
"
#
include
"
nsISupportsImpl
.
h
"
using
namespace
mozilla
:
:
ipc
;
static
void
NoOp
(
void
*
info
)
{
}
NS_IMPL_ADDREF_INHERITED
(
MessagePumpForNonMainUIThreads
MessagePump
)
NS_IMPL_RELEASE_INHERITED
(
MessagePumpForNonMainUIThreads
MessagePump
)
NS_IMPL_QUERY_INTERFACE
(
MessagePumpForNonMainUIThreads
nsIThreadObserver
)
MessagePumpForNonMainUIThreads
:
:
MessagePumpForNonMainUIThreads
(
nsISerialEventTarget
*
aEventTarget
)
:
mEventTarget
(
aEventTarget
)
keep_running_
(
true
)
{
MOZ_ASSERT
(
mEventTarget
)
;
CFRunLoopSourceContext
source_context
=
CFRunLoopSourceContext
(
)
;
source_context
.
perform
=
NoOp
;
quit_source_
=
CFRunLoopSourceCreate
(
nullptr
0
&
source_context
)
;
CFRunLoopAddSource
(
run_loop
(
)
quit_source_
kCFRunLoopCommonModes
)
;
}
MessagePumpForNonMainUIThreads
:
:
~
MessagePumpForNonMainUIThreads
(
)
{
CFRunLoopRemoveSource
(
run_loop
(
)
quit_source_
kCFRunLoopCommonModes
)
;
CFRelease
(
quit_source_
)
;
}
void
MessagePumpForNonMainUIThreads
:
:
DoRun
(
base
:
:
MessagePump
:
:
Delegate
*
aDelegate
)
{
nsIThread
*
thread
=
NS_GetCurrentThread
(
)
;
MOZ_ASSERT
(
thread
)
;
nsCOMPtr
<
nsIThreadInternal
>
ti
(
do_QueryInterface
(
thread
)
)
;
MOZ_ASSERT
(
ti
)
;
ti
-
>
SetObserver
(
this
)
;
base
:
:
ScopedNSAutoreleasePool
autoReleasePool
;
while
(
keep_running_
)
{
if
(
NS_ProcessNextEvent
(
nullptr
false
)
)
{
continue
;
}
autoReleasePool
.
Recycle
(
)
;
if
(
!
keep_running_
)
{
break
;
}
[
[
NSRunLoop
currentRunLoop
]
runMode
:
NSDefaultRunLoopMode
beforeDate
:
[
NSDate
distantFuture
]
]
;
}
ti
-
>
SetObserver
(
nullptr
)
;
keep_running_
=
true
;
}
void
MessagePumpForNonMainUIThreads
:
:
Quit
(
)
{
keep_running_
=
false
;
CFRunLoopSourceSignal
(
quit_source_
)
;
CFRunLoopWakeUp
(
run_loop
(
)
)
;
}
NS_IMETHODIMP
MessagePumpForNonMainUIThreads
:
:
OnDispatchedEvent
(
)
{
ScheduleWork
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
MessagePumpForNonMainUIThreads
:
:
OnProcessNextEvent
(
nsIThreadInternal
*
thread
bool
mayWait
)
{
return
NS_OK
;
}
NS_IMETHODIMP
MessagePumpForNonMainUIThreads
:
:
AfterProcessNextEvent
(
nsIThreadInternal
*
thread
bool
eventWasProcessed
)
{
return
NS_OK
;
}
