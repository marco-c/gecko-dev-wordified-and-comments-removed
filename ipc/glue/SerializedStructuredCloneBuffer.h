#
ifndef
__IPC_GLUE_SERIALIZEDSTRUCTUREDCLONEBUFFER_H__
#
define
__IPC_GLUE_SERIALIZEDSTRUCTUREDCLONEBUFFER_H__
#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
<
cstdlib
>
#
include
<
string
>
#
include
<
utility
>
#
include
"
chrome
/
common
/
ipc_message
.
h
"
#
include
"
chrome
/
common
/
ipc_message_utils
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
StructuredClone
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
BufferList
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
class
PickleIterator
;
namespace
mozilla
{
template
<
typename
.
.
.
>
class
Variant
;
namespace
detail
{
template
<
typename
.
.
.
>
struct
VariantTag
;
}
}
namespace
mozilla
{
struct
SerializedStructuredCloneBuffer
final
{
SerializedStructuredCloneBuffer
(
)
=
default
;
SerializedStructuredCloneBuffer
(
SerializedStructuredCloneBuffer
&
&
)
=
default
;
SerializedStructuredCloneBuffer
&
operator
=
(
SerializedStructuredCloneBuffer
&
&
)
=
default
;
SerializedStructuredCloneBuffer
(
const
SerializedStructuredCloneBuffer
&
)
=
delete
;
SerializedStructuredCloneBuffer
&
operator
=
(
const
SerializedStructuredCloneBuffer
&
aOther
)
=
delete
;
bool
operator
=
=
(
const
SerializedStructuredCloneBuffer
&
aOther
)
const
{
return
false
;
}
JSStructuredCloneData
data
{
JS
:
:
StructuredCloneScope
:
:
Unassigned
}
;
}
;
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
JSStructuredCloneData
>
{
typedef
JSStructuredCloneData
paramType
;
static
void
Write
(
MessageWriter
*
aWriter
const
paramType
&
aParam
)
;
static
bool
Read
(
MessageReader
*
aReader
paramType
*
aResult
)
;
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
SerializedStructuredCloneBuffer
>
{
typedef
mozilla
:
:
SerializedStructuredCloneBuffer
paramType
;
static
void
Write
(
MessageWriter
*
aWriter
const
paramType
&
aParam
)
{
WriteParam
(
aWriter
aParam
.
data
)
;
}
static
bool
Read
(
MessageReader
*
aReader
paramType
*
aResult
)
{
return
ReadParam
(
aReader
&
aResult
-
>
data
)
;
}
}
;
}
#
endif
