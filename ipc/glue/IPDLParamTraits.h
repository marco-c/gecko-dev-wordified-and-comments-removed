#
ifndef
mozilla_ipc_IPDLParamTraits_h
#
define
mozilla_ipc_IPDLParamTraits_h
#
include
"
chrome
/
common
/
ipc_message_utils
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
type_traits
>
namespace
mozilla
{
namespace
ipc
{
class
IProtocol
;
template
<
typename
P
>
struct
IPDLParamTraits
{
template
<
typename
R
>
static
inline
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
R
&
&
aParam
)
{
IPC
:
:
ParamTraits
<
P
>
:
:
Write
(
aWriter
std
:
:
forward
<
R
>
(
aParam
)
)
;
}
template
<
typename
R
>
static
inline
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
R
*
aResult
)
{
return
IPC
:
:
ParamTraits
<
P
>
:
:
Read
(
aReader
aResult
)
;
}
}
;
template
<
typename
P
>
static
MOZ_NEVER_INLINE
void
WriteIPDLParam
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
P
&
&
aParam
)
{
IPDLParamTraits
<
std
:
:
decay_t
<
P
>
>
:
:
Write
(
aWriter
aActor
std
:
:
forward
<
P
>
(
aParam
)
)
;
}
template
<
typename
P
>
static
MOZ_NEVER_INLINE
bool
ReadIPDLParam
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
P
*
aResult
)
{
return
IPDLParamTraits
<
P
>
:
:
Read
(
aReader
aActor
aResult
)
;
}
template
<
typename
P
>
static
MOZ_NEVER_INLINE
bool
ReadIPDLParamInfallible
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
P
*
aResult
const
char
*
aCrashMessage
)
{
bool
ok
=
ReadIPDLParam
(
aReader
aActor
aResult
)
;
if
(
!
ok
)
{
MOZ_CRASH_UNSAFE
(
aCrashMessage
)
;
}
return
ok
;
}
constexpr
void
WriteIPDLParamList
(
IPC
:
:
MessageWriter
*
IProtocol
*
)
{
}
template
<
typename
P
typename
.
.
.
Ps
>
static
void
WriteIPDLParamList
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
P
&
&
aParam
Ps
&
&
.
.
.
aParams
)
{
WriteIPDLParam
(
aWriter
aActor
std
:
:
forward
<
P
>
(
aParam
)
)
;
WriteIPDLParamList
(
aWriter
aActor
std
:
:
forward
<
Ps
>
(
aParams
)
.
.
.
)
;
}
constexpr
bool
ReadIPDLParamList
(
IPC
:
:
MessageReader
*
IProtocol
*
)
{
return
true
;
}
template
<
typename
P
typename
.
.
.
Ps
>
static
bool
ReadIPDLParamList
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
P
*
aResult
Ps
*
.
.
.
aResults
)
{
return
ReadIPDLParam
(
aReader
aActor
aResult
)
&
&
ReadIPDLParamList
(
aReader
aActor
aResults
.
.
.
)
;
}
template
<
typename
T
>
struct
IPDLParamTraits
<
RefPtr
<
T
>
>
{
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
RefPtr
<
T
>
&
aParam
)
{
IPDLParamTraits
<
T
*
>
:
:
Write
(
aWriter
aActor
aParam
.
get
(
)
)
;
}
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
RefPtr
<
T
>
*
aResult
)
{
return
IPDLParamTraits
<
T
*
>
:
:
Read
(
aReader
aActor
aResult
)
;
}
}
;
template
<
typename
T
>
struct
IPDLParamTraits
<
nsCOMPtr
<
T
>
>
{
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
nsCOMPtr
<
T
>
&
aParam
)
{
IPDLParamTraits
<
T
*
>
:
:
Write
(
aWriter
aActor
aParam
.
get
(
)
)
;
}
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
nsCOMPtr
<
T
>
*
aResult
)
{
RefPtr
<
T
>
refptr
;
if
(
!
IPDLParamTraits
<
T
*
>
:
:
Read
(
aReader
aActor
&
refptr
)
)
{
return
false
;
}
*
aResult
=
refptr
.
forget
(
)
;
return
true
;
}
}
;
template
<
typename
T
>
struct
IPDLParamTraits
<
nsTArray
<
T
>
>
{
template
<
typename
U
>
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
U
&
&
aParam
)
{
uint32_t
length
=
aParam
.
Length
(
)
;
WriteIPDLParam
(
aWriter
aActor
length
)
;
if
(
sUseWriteBytes
)
{
auto
pickledLength
=
CheckedInt
<
int
>
(
length
)
*
sizeof
(
T
)
;
MOZ_RELEASE_ASSERT
(
pickledLength
.
isValid
(
)
)
;
aWriter
-
>
WriteBytes
(
aParam
.
Elements
(
)
pickledLength
.
value
(
)
)
;
}
else
{
WriteValues
(
aWriter
aActor
std
:
:
forward
<
U
>
(
aParam
)
)
;
}
}
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
nsTArray
<
T
>
*
aResult
)
{
uint32_t
length
;
if
(
!
ReadIPDLParam
(
aReader
aActor
&
length
)
)
{
return
false
;
}
if
(
sUseWriteBytes
)
{
auto
pickledLength
=
CheckedInt
<
int
>
(
length
)
*
sizeof
(
T
)
;
if
(
!
pickledLength
.
isValid
(
)
|
|
!
aReader
-
>
HasBytesAvailable
(
pickledLength
.
value
(
)
)
)
{
return
false
;
}
T
*
elements
=
aResult
-
>
AppendElements
(
length
)
;
return
aReader
-
>
ReadBytesInto
(
elements
pickledLength
.
value
(
)
)
;
}
if
(
!
aReader
-
>
HasBytesAvailable
(
length
)
)
{
return
false
;
}
aResult
-
>
SetCapacity
(
length
)
;
for
(
uint32_t
index
=
0
;
index
<
length
;
index
+
+
)
{
T
*
element
=
aResult
-
>
AppendElement
(
)
;
if
(
!
ReadIPDLParam
(
aReader
aActor
element
)
)
{
return
false
;
}
}
return
true
;
}
private
:
static
void
WriteValues
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
nsTArray
<
T
>
&
aParam
)
{
for
(
auto
&
elt
:
aParam
)
{
WriteIPDLParam
(
aWriter
aActor
elt
)
;
}
}
static
void
WriteValues
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
nsTArray
<
T
>
&
&
aParam
)
{
for
(
auto
&
elt
:
aParam
)
{
WriteIPDLParam
(
aWriter
aActor
std
:
:
move
(
elt
)
)
;
}
aParam
.
Clear
(
)
;
}
static
const
bool
sUseWriteBytes
=
(
std
:
:
is_integral_v
<
T
>
|
|
std
:
:
is_floating_point_v
<
T
>
)
;
}
;
template
<
typename
T
>
struct
IPDLParamTraits
<
CopyableTArray
<
T
>
>
:
IPDLParamTraits
<
nsTArray
<
T
>
>
{
}
;
template
<
typename
T
>
struct
IPDLParamTraits
<
Maybe
<
T
>
>
{
typedef
Maybe
<
T
>
paramType
;
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
Maybe
<
T
>
&
aParam
)
{
bool
isSome
=
aParam
.
isSome
(
)
;
WriteIPDLParam
(
aWriter
aActor
isSome
)
;
if
(
isSome
)
{
WriteIPDLParam
(
aWriter
aActor
aParam
.
ref
(
)
)
;
}
}
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
Maybe
<
T
>
&
&
aParam
)
{
bool
isSome
=
aParam
.
isSome
(
)
;
WriteIPDLParam
(
aWriter
aActor
isSome
)
;
if
(
isSome
)
{
WriteIPDLParam
(
aWriter
aActor
std
:
:
move
(
aParam
.
ref
(
)
)
)
;
}
}
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
Maybe
<
T
>
*
aResult
)
{
bool
isSome
;
if
(
!
ReadIPDLParam
(
aReader
aActor
&
isSome
)
)
{
return
false
;
}
if
(
isSome
)
{
aResult
-
>
emplace
(
)
;
if
(
!
ReadIPDLParam
(
aReader
aActor
aResult
-
>
ptr
(
)
)
)
{
return
false
;
}
}
else
{
aResult
-
>
reset
(
)
;
}
return
true
;
}
}
;
template
<
typename
T
>
struct
IPDLParamTraits
<
UniquePtr
<
T
>
>
{
typedef
UniquePtr
<
T
>
paramType
;
template
<
typename
U
>
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
U
&
&
aParam
)
{
bool
isNull
=
aParam
=
=
nullptr
;
WriteIPDLParam
(
aWriter
aActor
isNull
)
;
if
(
!
isNull
)
{
WriteValue
(
aWriter
aActor
std
:
:
forward
<
U
>
(
aParam
)
)
;
}
}
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
UniquePtr
<
T
>
*
aResult
)
{
bool
isNull
=
true
;
if
(
!
ReadParam
(
aReader
&
isNull
)
)
{
return
false
;
}
if
(
isNull
)
{
aResult
-
>
reset
(
)
;
}
else
{
*
aResult
=
MakeUnique
<
T
>
(
)
;
if
(
!
ReadIPDLParam
(
aReader
aActor
aResult
-
>
get
(
)
)
)
{
return
false
;
}
}
return
true
;
}
private
:
static
void
WriteValue
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
UniquePtr
<
T
>
&
&
aParam
)
{
WriteIPDLParam
(
aWriter
aActor
std
:
:
move
(
*
aParam
.
get
(
)
)
)
;
aParam
=
nullptr
;
}
static
void
WriteValue
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
UniquePtr
<
T
>
&
aParam
)
{
WriteIPDLParam
(
aWriter
aActor
*
aParam
.
get
(
)
)
;
}
}
;
template
<
typename
.
.
.
Ts
>
struct
IPDLParamTraits
<
Tuple
<
Ts
.
.
.
>
>
{
typedef
Tuple
<
Ts
.
.
.
>
paramType
;
template
<
typename
U
>
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
U
&
&
aParam
)
{
WriteInternal
(
aWriter
aActor
std
:
:
forward
<
U
>
(
aParam
)
std
:
:
index_sequence_for
<
Ts
.
.
.
>
{
}
)
;
}
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
Tuple
<
Ts
.
.
.
>
*
aResult
)
{
return
ReadInternal
(
aReader
aActor
*
aResult
std
:
:
index_sequence_for
<
Ts
.
.
.
>
{
}
)
;
}
private
:
template
<
size_t
.
.
.
Is
>
static
void
WriteInternal
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
Tuple
<
Ts
.
.
.
>
&
aParam
std
:
:
index_sequence
<
Is
.
.
.
>
)
{
WriteIPDLParamList
(
aWriter
aActor
Get
<
Is
>
(
aParam
)
.
.
.
)
;
}
template
<
size_t
.
.
.
Is
>
static
void
WriteInternal
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
Tuple
<
Ts
.
.
.
>
&
&
aParam
std
:
:
index_sequence
<
Is
.
.
.
>
)
{
WriteIPDLParamList
(
aWriter
aActor
std
:
:
move
(
Get
<
Is
>
(
aParam
)
)
.
.
.
)
;
}
template
<
size_t
.
.
.
Is
>
static
bool
ReadInternal
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
Tuple
<
Ts
.
.
.
>
&
aResult
std
:
:
index_sequence
<
Is
.
.
.
>
)
{
return
ReadIPDLParamList
(
aReader
aActor
&
Get
<
Is
>
(
aResult
)
.
.
.
)
;
}
}
;
template
<
class
.
.
.
Ts
>
struct
IPDLParamTraits
<
mozilla
:
:
Variant
<
Ts
.
.
.
>
>
{
typedef
mozilla
:
:
Variant
<
Ts
.
.
.
>
paramType
;
using
Tag
=
typename
mozilla
:
:
detail
:
:
VariantTag
<
Ts
.
.
.
>
:
:
Type
;
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
paramType
&
aParam
)
{
WriteIPDLParam
(
aWriter
aActor
aParam
.
tag
)
;
aParam
.
match
(
[
aWriter
aActor
]
(
const
auto
&
t
)
{
WriteIPDLParam
(
aWriter
aActor
t
)
;
}
)
;
}
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
paramType
&
&
aParam
)
{
WriteIPDLParam
(
aWriter
aActor
aParam
.
tag
)
;
aParam
.
match
(
[
aWriter
aActor
]
(
auto
&
t
)
{
WriteIPDLParam
(
aWriter
aActor
std
:
:
move
(
t
)
)
;
}
)
;
}
template
<
size_t
N
typename
dummy
=
void
>
struct
VariantReader
{
using
Next
=
VariantReader
<
N
-
1
>
;
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
Tag
aTag
paramType
*
aResult
)
{
if
(
aTag
=
=
N
-
1
)
{
return
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
template
emplace
<
N
-
1
>
(
)
)
;
}
return
Next
:
:
Read
(
aReader
aActor
aTag
aResult
)
;
}
}
;
template
<
typename
dummy
>
struct
VariantReader
<
0
dummy
>
{
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
Tag
aTag
paramType
*
aResult
)
{
return
false
;
}
}
;
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
paramType
*
aResult
)
{
Tag
tag
;
if
(
!
ReadIPDLParam
(
aReader
aActor
&
tag
)
)
{
return
false
;
}
return
VariantReader
<
sizeof
.
.
.
(
Ts
)
>
:
:
Read
(
aReader
aActor
tag
aResult
)
;
}
}
;
}
}
#
endif
