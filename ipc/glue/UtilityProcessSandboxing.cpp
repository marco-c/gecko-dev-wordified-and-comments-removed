#
include
"
UtilityProcessSandboxing
.
h
"
#
include
<
vector
>
#
include
<
string
>
#
include
"
prenv
.
h
"
namespace
mozilla
:
:
ipc
{
std
:
:
vector
<
std
:
:
string
>
split
(
const
std
:
:
string
&
str
char
s
)
{
std
:
:
vector
<
std
:
:
string
>
rv
;
size_t
last
=
0
;
size_t
i
;
size_t
c
=
str
.
size
(
)
;
for
(
i
=
0
;
i
<
=
c
;
+
+
i
)
{
if
(
i
=
=
c
|
|
str
[
i
]
=
=
s
)
{
rv
.
push_back
(
str
.
substr
(
last
i
-
last
)
)
;
last
=
i
+
1
;
}
}
return
rv
;
}
bool
IsUtilitySandboxEnabled
(
const
char
*
envVar
SandboxingKind
aKind
)
{
#
ifdef
XP_WIN
if
(
aKind
=
=
SandboxingKind
:
:
WINDOWS_FILE_DIALOG
)
{
return
false
;
}
#
endif
if
(
envVar
=
=
nullptr
)
{
return
true
;
}
const
std
:
:
string
disableUtility
(
envVar
)
;
if
(
disableUtility
=
=
"
1
"
)
{
return
false
;
}
std
:
:
vector
<
std
:
:
string
>
components
=
split
(
disableUtility
'
'
)
;
const
std
:
:
string
thisKind
=
"
utility
:
"
+
std
:
:
to_string
(
aKind
)
;
for
(
const
std
:
:
string
&
thisOne
:
components
)
{
if
(
thisOne
=
=
thisKind
)
{
return
false
;
}
}
return
true
;
}
bool
IsUtilitySandboxEnabled
(
SandboxingKind
aKind
)
{
return
IsUtilitySandboxEnabled
(
PR_GetEnv
(
"
MOZ_DISABLE_UTILITY_SANDBOX
"
)
aKind
)
;
}
}
