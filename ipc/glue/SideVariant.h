#
ifndef
mozilla_ipc_SidedVariant_h
#
define
mozilla_ipc_SidedVariant_h
#
include
<
variant
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
namespace
mozilla
{
namespace
ipc
{
template
<
typename
ParentSide
typename
ChildSide
>
struct
SideVariant
{
public
:
SideVariant
(
)
=
default
;
template
<
typename
U
std
:
:
enable_if_t
<
std
:
:
is_convertible_v
<
U
&
&
ParentSide
>
int
>
=
0
>
MOZ_IMPLICIT
SideVariant
(
U
&
&
aParent
)
:
mParent
(
std
:
:
forward
<
U
>
(
aParent
)
)
{
}
template
<
typename
U
std
:
:
enable_if_t
<
std
:
:
is_convertible_v
<
U
&
&
ChildSide
>
int
>
=
0
>
MOZ_IMPLICIT
SideVariant
(
U
&
&
aChild
)
:
mChild
(
std
:
:
forward
<
U
>
(
aChild
)
)
{
}
MOZ_IMPLICIT
SideVariant
(
std
:
:
nullptr_t
)
{
}
MOZ_IMPLICIT
SideVariant
&
operator
=
(
ParentSide
aParent
)
{
mParent
=
aParent
;
mChild
=
nullptr
;
return
*
this
;
}
MOZ_IMPLICIT
SideVariant
&
operator
=
(
ChildSide
aChild
)
{
mChild
=
aChild
;
mParent
=
nullptr
;
return
*
this
;
}
MOZ_IMPLICIT
SideVariant
&
operator
=
(
std
:
:
nullptr_t
)
{
mChild
=
nullptr
;
mParent
=
nullptr
;
return
*
this
;
}
MOZ_IMPLICIT
operator
bool
(
)
const
{
return
mParent
|
|
mChild
;
}
bool
IsNull
(
)
const
{
return
!
operator
bool
(
)
;
}
bool
IsParent
(
)
const
{
return
mParent
;
}
bool
IsChild
(
)
const
{
return
mChild
;
}
ParentSide
AsParent
(
)
const
{
MOZ_ASSERT
(
IsNull
(
)
|
|
IsParent
(
)
)
;
return
mParent
;
}
ChildSide
AsChild
(
)
const
{
MOZ_ASSERT
(
IsNull
(
)
|
|
IsChild
(
)
)
;
return
mChild
;
}
private
:
ParentSide
mParent
=
nullptr
;
ChildSide
mChild
=
nullptr
;
}
;
}
template
<
typename
ParentSide
typename
ChildSide
>
class
NotNull
<
mozilla
:
:
ipc
:
:
SideVariant
<
ParentSide
ChildSide
>
>
{
template
<
typename
U
>
friend
constexpr
NotNull
<
U
>
WrapNotNull
(
U
aBasePtr
)
;
template
<
typename
U
>
friend
constexpr
NotNull
<
U
>
WrapNotNullUnchecked
(
U
aBasePtr
)
;
template
<
typename
U
>
friend
class
NotNull
;
using
BasePtr
=
mozilla
:
:
ipc
:
:
SideVariant
<
ParentSide
ChildSide
>
;
BasePtr
mBasePtr
;
template
<
typename
U
>
constexpr
explicit
NotNull
(
U
aBasePtr
)
:
mBasePtr
(
aBasePtr
)
{
}
public
:
NotNull
(
)
=
delete
;
template
<
typename
U
typename
=
std
:
:
enable_if_t
<
std
:
:
is_convertible_v
<
const
U
&
BasePtr
>
>
>
constexpr
MOZ_IMPLICIT
NotNull
(
const
NotNull
<
U
>
&
aOther
)
:
mBasePtr
(
aOther
.
get
(
)
)
{
static_assert
(
sizeof
(
BasePtr
)
=
=
sizeof
(
NotNull
<
BasePtr
>
)
"
NotNull
must
have
zero
space
overhead
.
"
)
;
static_assert
(
offsetof
(
NotNull
<
BasePtr
>
mBasePtr
)
=
=
0
"
mBasePtr
must
have
zero
offset
.
"
)
;
}
template
<
typename
U
typename
=
std
:
:
enable_if_t
<
std
:
:
is_convertible_v
<
U
&
&
BasePtr
>
>
>
constexpr
MOZ_IMPLICIT
NotNull
(
MovingNotNull
<
U
>
&
&
aOther
)
:
mBasePtr
(
NotNull
{
std
:
:
move
(
aOther
)
}
)
{
}
explicit
operator
bool
(
)
const
=
delete
;
constexpr
const
BasePtr
&
get
(
)
const
{
return
mBasePtr
;
}
constexpr
operator
const
BasePtr
&
(
)
const
{
return
get
(
)
;
}
bool
IsParent
(
)
const
{
return
get
(
)
.
IsParent
(
)
;
}
bool
IsChild
(
)
const
{
return
get
(
)
.
IsChild
(
)
;
}
NotNull
<
ParentSide
>
AsParent
(
)
const
{
return
WrapNotNull
(
get
(
)
.
AsParent
(
)
)
;
}
NotNull
<
ChildSide
>
AsChild
(
)
const
{
return
WrapNotNull
(
get
(
)
.
AsChild
(
)
)
;
}
}
;
}
namespace
IPC
{
template
<
typename
ParentSide
typename
ChildSide
>
struct
ParamTraits
<
mozilla
:
:
ipc
:
:
SideVariant
<
ParentSide
ChildSide
>
>
{
typedef
mozilla
:
:
ipc
:
:
SideVariant
<
ParentSide
ChildSide
>
paramType
;
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
const
paramType
&
aParam
)
{
if
(
!
aWriter
-
>
GetActor
(
)
)
{
aWriter
-
>
FatalError
(
"
actor
required
to
serialize
this
type
"
)
;
return
;
}
if
(
aWriter
-
>
GetActor
(
)
-
>
GetSide
(
)
=
=
mozilla
:
:
ipc
:
:
ParentSide
)
{
if
(
aParam
&
&
!
aParam
.
IsParent
(
)
)
{
aWriter
-
>
FatalError
(
"
invalid
side
"
)
;
return
;
}
WriteParam
(
aWriter
aParam
.
AsParent
(
)
)
;
}
else
{
if
(
aParam
&
&
!
aParam
.
IsChild
(
)
)
{
aWriter
-
>
FatalError
(
"
invalid
side
"
)
;
return
;
}
WriteParam
(
aWriter
aParam
.
AsChild
(
)
)
;
}
}
static
ReadResult
<
paramType
>
Read
(
IPC
:
:
MessageReader
*
aReader
)
{
if
(
!
aReader
-
>
GetActor
(
)
)
{
aReader
-
>
FatalError
(
"
actor
required
to
deserialize
this
type
"
)
;
return
{
}
;
}
if
(
aReader
-
>
GetActor
(
)
-
>
GetSide
(
)
=
=
mozilla
:
:
ipc
:
:
ParentSide
)
{
auto
parentSide
=
ReadParam
<
ParentSide
>
(
aReader
)
;
if
(
!
parentSide
)
{
return
{
}
;
}
return
std
:
:
move
(
*
parentSide
)
;
}
auto
childSide
=
ReadParam
<
ChildSide
>
(
aReader
)
;
if
(
!
childSide
)
{
return
{
}
;
}
return
std
:
:
move
(
*
childSide
)
;
}
}
;
}
#
endif
