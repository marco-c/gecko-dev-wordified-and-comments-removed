#
include
"
nsXPCOM
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
Bootstrap
.
h
"
#
include
"
XREChildData
.
h
"
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
include
"
nsWindowsWMain
.
cpp
"
#
else
#
include
<
unistd
.
h
>
#
endif
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
sandboxing
/
SandboxInitialization
.
h
"
#
include
"
mozilla
/
sandboxing
/
sandboxLogging
.
h
"
#
endif
int
content_process_main
(
mozilla
:
:
Bootstrap
*
bootstrap
int
argc
char
*
argv
[
]
)
{
if
(
argc
<
1
)
{
return
3
;
}
XREChildData
childData
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
if
(
IsSandboxedProcess
(
)
)
{
childData
.
sandboxTargetServices
=
mozilla
:
:
sandboxing
:
:
GetInitializedTargetServices
(
)
;
if
(
!
childData
.
sandboxTargetServices
)
{
return
1
;
}
childData
.
ProvideLogFunction
=
mozilla
:
:
sandboxing
:
:
ProvideLogFunction
;
}
#
endif
bootstrap
-
>
XRE_SetProcessType
(
argv
[
-
-
argc
]
)
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
if
(
bootstrap
-
>
XRE_GetProcessType
(
)
=
=
GeckoProcessType_RemoteSandboxBroker
)
{
childData
.
sandboxBrokerServices
=
mozilla
:
:
sandboxing
:
:
GetInitializedBrokerServices
(
)
;
}
#
endif
nsresult
rv
=
bootstrap
-
>
XRE_InitChildProcess
(
argc
argv
&
childData
)
;
return
NS_FAILED
(
rv
)
;
}
