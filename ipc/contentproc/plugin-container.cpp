#
include
"
nsXPCOM
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
define
XRE_DONT_PROTECT_DLL_LOAD
#
include
"
nsWindowsWMain
.
cpp
"
#
include
"
nsSetDllDirectory
.
h
"
#
else
#
include
<
unistd
.
h
>
#
endif
#
include
"
GMPLoader
.
h
"
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
sandboxing
/
SandboxInitialization
.
h
"
#
include
"
mozilla
/
sandboxing
/
sandboxLogging
.
h
"
#
endif
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
class
WinSandboxStarter
:
public
mozilla
:
:
gmp
:
:
SandboxStarter
{
public
:
virtual
bool
Start
(
const
char
*
aLibPath
)
override
{
if
(
IsSandboxedProcess
(
)
)
{
mozilla
:
:
sandboxing
:
:
LowerSandbox
(
)
;
}
return
true
;
}
}
;
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_GMP_SANDBOX
)
class
MacSandboxStarter
:
public
mozilla
:
:
gmp
:
:
SandboxStarter
{
public
:
virtual
bool
Start
(
const
char
*
aLibPath
)
override
{
std
:
:
string
err
;
bool
rv
=
mozilla
:
:
StartMacSandbox
(
mInfo
err
)
;
if
(
!
rv
)
{
fprintf
(
stderr
"
sandbox_init
(
)
failed
!
Error
\
"
%
s
\
"
\
n
"
err
.
c_str
(
)
)
;
}
return
rv
;
}
virtual
void
SetSandboxInfo
(
MacSandboxInfo
*
aSandboxInfo
)
override
{
mInfo
=
*
aSandboxInfo
;
}
private
:
MacSandboxInfo
mInfo
;
}
;
#
endif
mozilla
:
:
gmp
:
:
SandboxStarter
*
MakeSandboxStarter
(
)
{
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
return
new
WinSandboxStarter
(
)
;
#
elif
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_GMP_SANDBOX
)
return
new
MacSandboxStarter
(
)
;
#
else
return
nullptr
;
#
endif
}
int
content_process_main
(
int
argc
char
*
argv
[
]
)
{
if
(
argc
<
1
)
{
return
3
;
}
XREChildData
childData
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
if
(
IsSandboxedProcess
(
)
)
{
childData
.
sandboxTargetServices
=
mozilla
:
:
sandboxing
:
:
GetInitializedTargetServices
(
)
;
if
(
!
childData
.
sandboxTargetServices
)
{
return
1
;
}
childData
.
ProvideLogFunction
=
mozilla
:
:
sandboxing
:
:
ProvideLogFunction
;
}
#
endif
XRE_SetProcessType
(
argv
[
-
-
argc
]
)
;
#
ifdef
XP_WIN
if
(
XRE_GetProcessType
(
)
!
=
GeckoProcessType_Plugin
)
{
mozilla
:
:
SanitizeEnvironmentVariables
(
)
;
SetDllDirectoryW
(
L
"
"
)
;
}
#
endif
#
if
!
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_PLUGIN_CONTAINER
)
nsAutoPtr
<
mozilla
:
:
gmp
:
:
SandboxStarter
>
starter
(
MakeSandboxStarter
(
)
)
;
if
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_GMPlugin
)
{
childData
.
gmpLoader
=
mozilla
:
:
gmp
:
:
CreateGMPLoader
(
starter
)
;
}
#
endif
nsresult
rv
=
XRE_InitChildProcess
(
argc
argv
&
childData
)
;
NS_ENSURE_SUCCESS
(
rv
1
)
;
return
0
;
}
