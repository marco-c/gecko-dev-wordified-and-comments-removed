#
include
"
base
/
task
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
TestEndpointOpens
.
h
"
#
include
"
IPDLUnitTests
.
h
"
using
namespace
mozilla
:
:
ipc
;
using
base
:
:
ProcessHandle
;
using
base
:
:
Thread
;
namespace
mozilla
{
using
namespace
_ipdltest
;
using
namespace
_ipdltest2
;
static
MessageLoop
*
gMainThread
;
static
void
AssertNotMainThread
(
)
{
if
(
!
gMainThread
)
{
fail
(
"
gMainThread
is
not
initialized
"
)
;
}
if
(
MessageLoop
:
:
current
(
)
=
=
gMainThread
)
{
fail
(
"
unexpectedly
called
on
the
main
thread
"
)
;
}
}
static
Thread
*
gParentThread
;
void
TestEndpointOpensParent
:
:
Main
(
)
{
if
(
!
SendStart
(
)
)
{
fail
(
"
sending
Start
"
)
;
}
}
static
void
OpenParent
(
TestEndpointOpensOpenedParent
*
aParent
Endpoint
<
PTestEndpointOpensOpenedParent
>
&
&
aEndpoint
)
{
AssertNotMainThread
(
)
;
if
(
!
aEndpoint
.
Bind
(
aParent
)
)
{
fail
(
"
binding
Parent
"
)
;
}
}
bool
TestEndpointOpensParent
:
:
RecvStartSubprotocol
(
mozilla
:
:
ipc
:
:
Endpoint
<
PTestEndpointOpensOpenedParent
>
&
&
endpoint
)
{
gMainThread
=
MessageLoop
:
:
current
(
)
;
gParentThread
=
new
Thread
(
"
ParentThread
"
)
;
if
(
!
gParentThread
-
>
Start
(
)
)
{
fail
(
"
starting
parent
thread
"
)
;
}
TestEndpointOpensOpenedParent
*
a
=
new
TestEndpointOpensOpenedParent
(
)
;
gParentThread
-
>
message_loop
(
)
-
>
PostTask
(
NewRunnableFunction
(
OpenParent
a
mozilla
:
:
Move
(
endpoint
)
)
)
;
return
true
;
}
void
TestEndpointOpensParent
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
delete
gParentThread
;
if
(
NormalShutdown
!
=
why
)
{
fail
(
"
unexpected
destruction
A
!
"
)
;
}
passed
(
"
ok
"
)
;
QuitParent
(
)
;
}
bool
TestEndpointOpensOpenedParent
:
:
RecvHello
(
)
{
AssertNotMainThread
(
)
;
return
SendHi
(
)
;
}
bool
TestEndpointOpensOpenedParent
:
:
RecvHelloSync
(
)
{
AssertNotMainThread
(
)
;
return
true
;
}
bool
TestEndpointOpensOpenedParent
:
:
AnswerHelloRpc
(
)
{
AssertNotMainThread
(
)
;
return
CallHiRpc
(
)
;
}
static
void
ShutdownTestEndpointOpensOpenedParent
(
TestEndpointOpensOpenedParent
*
parent
Transport
*
transport
)
{
delete
parent
;
}
void
TestEndpointOpensOpenedParent
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
AssertNotMainThread
(
)
;
if
(
NormalShutdown
!
=
why
)
{
fail
(
"
unexpected
destruction
B
!
"
)
;
}
gParentThread
-
>
message_loop
(
)
-
>
PostTask
(
NewRunnableFunction
(
ShutdownTestEndpointOpensOpenedParent
this
GetTransport
(
)
)
)
;
}
static
TestEndpointOpensChild
*
gOpensChild
;
static
Thread
*
gChildThread
;
TestEndpointOpensChild
:
:
TestEndpointOpensChild
(
)
{
gOpensChild
=
this
;
}
static
void
OpenChild
(
TestEndpointOpensOpenedChild
*
aChild
Endpoint
<
PTestEndpointOpensOpenedChild
>
&
&
endpoint
)
{
AssertNotMainThread
(
)
;
if
(
!
endpoint
.
Bind
(
aChild
)
)
{
fail
(
"
binding
child
endpoint
"
)
;
}
if
(
!
aChild
-
>
SendHello
(
)
)
{
fail
(
"
sending
Hello
"
)
;
}
}
bool
TestEndpointOpensChild
:
:
RecvStart
(
)
{
Endpoint
<
PTestEndpointOpensOpenedParent
>
parent
;
Endpoint
<
PTestEndpointOpensOpenedChild
>
child
;
nsresult
rv
;
rv
=
PTestEndpointOpensOpened
:
:
CreateEndpoints
(
OtherPid
(
)
base
:
:
GetCurrentProcId
(
)
&
parent
&
child
)
;
if
(
NS_FAILED
(
rv
)
)
{
fail
(
"
opening
PTestEndpointOpensOpened
"
)
;
}
gMainThread
=
MessageLoop
:
:
current
(
)
;
gChildThread
=
new
Thread
(
"
ChildThread
"
)
;
if
(
!
gChildThread
-
>
Start
(
)
)
{
fail
(
"
starting
child
thread
"
)
;
}
TestEndpointOpensOpenedChild
*
a
=
new
TestEndpointOpensOpenedChild
(
)
;
gChildThread
-
>
message_loop
(
)
-
>
PostTask
(
NewRunnableFunction
(
OpenChild
a
mozilla
:
:
Move
(
child
)
)
)
;
if
(
!
SendStartSubprotocol
(
parent
)
)
{
fail
(
"
send
StartSubprotocol
"
)
;
}
return
true
;
}
void
TestEndpointOpensChild
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
delete
gChildThread
;
if
(
NormalShutdown
!
=
why
)
{
fail
(
"
unexpected
destruction
C
!
"
)
;
}
QuitChild
(
)
;
}
bool
TestEndpointOpensOpenedChild
:
:
RecvHi
(
)
{
AssertNotMainThread
(
)
;
if
(
!
SendHelloSync
(
)
)
{
fail
(
"
sending
HelloSync
"
)
;
}
if
(
!
CallHelloRpc
(
)
)
{
fail
(
"
calling
HelloRpc
"
)
;
}
if
(
!
mGotHi
)
{
fail
(
"
didn
'
t
answer
HiRpc
"
)
;
}
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewNonOwningRunnableMethod
(
this
&
TestEndpointOpensOpenedChild
:
:
Close
)
)
;
return
true
;
}
bool
TestEndpointOpensOpenedChild
:
:
AnswerHiRpc
(
)
{
AssertNotMainThread
(
)
;
mGotHi
=
true
;
return
true
;
}
static
void
ShutdownTestEndpointOpensOpenedChild
(
TestEndpointOpensOpenedChild
*
child
Transport
*
transport
)
{
delete
child
;
gMainThread
-
>
PostTask
(
NewNonOwningRunnableMethod
(
gOpensChild
&
TestEndpointOpensChild
:
:
Close
)
)
;
}
void
TestEndpointOpensOpenedChild
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
AssertNotMainThread
(
)
;
if
(
NormalShutdown
!
=
why
)
{
fail
(
"
unexpected
destruction
D
!
"
)
;
}
gChildThread
-
>
message_loop
(
)
-
>
PostTask
(
NewRunnableFunction
(
ShutdownTestEndpointOpensOpenedChild
this
GetTransport
(
)
)
)
;
}
}
