#
include
"
TestUniquePtrIPC
.
h
"
namespace
mozilla
{
namespace
_ipdltest
{
void
TestUniquePtrIPCParent
:
:
Main
(
)
{
UniquePtr
<
int
>
a1
=
MakeUnique
<
int
>
(
1
)
;
UniquePtr
<
DummyStruct
>
a2
=
MakeUnique
<
DummyStruct
>
(
2
)
;
DummyStruct
a3
(
3
)
;
UniquePtr
<
int
>
a4
;
if
(
!
SendTestMessage
(
std
:
:
move
(
a1
)
std
:
:
move
(
a2
)
a3
std
:
:
move
(
a4
)
)
)
{
fail
(
"
failed
sending
UniquePtr
items
"
)
;
}
if
(
a1
|
|
a2
)
{
fail
(
"
did
not
move
TestMessage
items
in
parent
"
)
;
}
if
(
a4
)
{
fail
(
"
somehow
turned
null
ptr
into
non
-
null
by
sending
it
"
)
;
}
UniquePtr
<
DummyStruct
>
b
=
MakeUnique
<
DummyStruct
>
(
1
)
;
if
(
!
SendTestSendReference
(
b
)
)
{
fail
(
"
failed
sending
UniquePtr
by
reference
"
)
;
}
if
(
b
)
{
fail
(
"
did
not
move
UniquePtr
sent
by
reference
"
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
TestUniquePtrIPCChild
:
:
RecvTestMessage
(
UniquePtr
<
int
>
&
&
aA1
UniquePtr
<
DummyStruct
>
&
&
aA2
const
DummyStruct
&
aA3
UniquePtr
<
int
>
&
&
aA4
)
{
if
(
(
!
aA1
)
|
|
(
!
aA2
)
)
{
fail
(
"
TestMessage
received
NULL
items
in
child
"
)
;
}
if
(
aA4
)
{
fail
(
"
TestMessage
received
non
-
NULL
when
expecting
NULL
"
)
;
}
if
(
(
*
aA1
!
=
1
)
|
|
(
aA2
-
>
x
(
)
!
=
2
)
|
|
(
aA3
.
x
(
)
!
=
3
)
)
{
fail
(
"
TestMessage
received
incorrect
items
in
child
"
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
TestUniquePtrIPCChild
:
:
RecvTestSendReference
(
UniquePtr
<
DummyStruct
>
&
&
aA
)
{
if
(
!
aA
)
{
fail
(
"
TestSendReference
received
NULL
item
in
child
"
)
;
}
if
(
*
aA
!
=
1
)
{
fail
(
"
TestSendReference
received
incorrect
item
in
child
"
)
;
}
Close
(
)
;
return
IPC_OK
(
)
;
}
}
}
