#
include
"
base
/
process_util
.
h
"
#
include
"
TestHangs
.
h
"
#
include
"
IPDLUnitTests
.
h
"
using
base
:
:
KillProcess
;
namespace
mozilla
{
namespace
_ipdltest
{
TestHangsParent
:
:
TestHangsParent
(
)
:
mDetectedHang
(
false
)
mNumAnswerStackFrame
(
0
)
{
MOZ_COUNT_CTOR
(
TestHangsParent
)
;
}
TestHangsParent
:
:
~
TestHangsParent
(
)
{
MOZ_COUNT_DTOR
(
TestHangsParent
)
;
}
void
TestHangsParent
:
:
Main
(
)
{
if
(
!
SendStart
(
)
)
fail
(
"
sending
Start
"
)
;
PR_Sleep
(
5000
)
;
if
(
CallStackFrame
(
)
&
&
mDetectedHang
)
fail
(
"
should
have
timed
out
!
"
)
;
}
bool
TestHangsParent
:
:
ShouldContinueFromReplyTimeout
(
)
{
mDetectedHang
=
true
;
PR_Sleep
(
5000
)
;
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewNonOwningRunnableMethod
(
this
&
TestHangsParent
:
:
CleanUp
)
)
;
GetIPCChannel
(
)
-
>
CloseWithTimeout
(
)
;
return
false
;
}
mozilla
:
:
ipc
:
:
IPCResult
TestHangsParent
:
:
AnswerStackFrame
(
)
{
+
+
mNumAnswerStackFrame
;
if
(
mNumAnswerStackFrame
=
=
1
)
{
if
(
CallStackFrame
(
)
)
{
fail
(
"
should
have
timed
out
!
"
)
;
}
}
else
if
(
mNumAnswerStackFrame
=
=
2
)
{
SetReplyTimeoutMs
(
2
)
;
if
(
CallHang
(
)
)
fail
(
"
should
have
timed
out
!
"
)
;
}
else
{
fail
(
"
unexpected
state
"
)
;
}
return
IPC_OK
(
)
;
}
void
TestHangsParent
:
:
CleanUp
(
)
{
ipc
:
:
ScopedProcessHandle
otherProcessHandle
;
if
(
!
base
:
:
OpenProcessHandle
(
OtherPid
(
)
&
otherProcessHandle
.
rwget
(
)
)
)
{
fail
(
"
couldn
'
t
open
child
process
"
)
;
}
else
{
if
(
!
KillProcess
(
otherProcessHandle
0
false
)
)
{
fail
(
"
terminating
child
process
"
)
;
}
}
Close
(
)
;
}
TestHangsChild
:
:
TestHangsChild
(
)
{
MOZ_COUNT_CTOR
(
TestHangsChild
)
;
}
TestHangsChild
:
:
~
TestHangsChild
(
)
{
MOZ_COUNT_DTOR
(
TestHangsChild
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
TestHangsChild
:
:
AnswerHang
(
)
{
puts
(
"
(
child
process
is
'
hanging
'
now
)
"
)
;
PR_Sleep
(
1000
)
;
return
IPC_OK
(
)
;
}
}
}
