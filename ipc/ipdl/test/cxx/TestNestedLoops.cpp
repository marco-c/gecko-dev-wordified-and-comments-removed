#
include
"
base
/
basictypes
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
TestNestedLoops
.
h
"
#
include
"
IPDLUnitTests
.
h
"
namespace
mozilla
{
namespace
_ipdltest
{
TestNestedLoopsParent
:
:
TestNestedLoopsParent
(
)
:
mBreakNestedLoop
(
false
)
{
MOZ_COUNT_CTOR
(
TestNestedLoopsParent
)
;
}
TestNestedLoopsParent
:
:
~
TestNestedLoopsParent
(
)
{
MOZ_COUNT_DTOR
(
TestNestedLoopsParent
)
;
}
void
TestNestedLoopsParent
:
:
Main
(
)
{
if
(
!
SendStart
(
)
)
fail
(
"
sending
Start
"
)
;
puts
(
"
(
sleeping
to
wait
for
nonce
.
.
.
sorry
)
"
)
;
PR_Sleep
(
5000
)
;
if
(
!
CallR
(
)
)
fail
(
"
calling
R
"
)
;
Close
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
TestNestedLoopsParent
:
:
RecvNonce
(
)
{
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewNonOwningRunnableMethod
(
this
&
TestNestedLoopsParent
:
:
BreakNestedLoop
)
)
;
puts
(
"
(
sleeping
to
wait
for
reply
to
R
.
.
.
sorry
)
"
)
;
PR_Sleep
(
5000
)
;
do
{
if
(
!
NS_ProcessNextEvent
(
nullptr
false
)
)
fail
(
"
expected
at
least
one
pending
event
"
)
;
}
while
(
!
mBreakNestedLoop
)
;
return
IPC_OK
(
)
;
}
void
TestNestedLoopsParent
:
:
BreakNestedLoop
(
)
{
mBreakNestedLoop
=
true
;
}
TestNestedLoopsChild
:
:
TestNestedLoopsChild
(
)
{
MOZ_COUNT_CTOR
(
TestNestedLoopsChild
)
;
}
TestNestedLoopsChild
:
:
~
TestNestedLoopsChild
(
)
{
MOZ_COUNT_DTOR
(
TestNestedLoopsChild
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
TestNestedLoopsChild
:
:
RecvStart
(
)
{
if
(
!
SendNonce
(
)
)
fail
(
"
sending
Nonce
"
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
TestNestedLoopsChild
:
:
AnswerR
(
)
{
return
IPC_OK
(
)
;
}
}
}
