#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
_ipdltest
/
IPDLUnitTest
.
h
"
#
include
"
mozilla
/
_ipdltest
/
PTestShmemChild
.
h
"
#
include
"
mozilla
/
_ipdltest
/
PTestShmemParent
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
:
:
_ipdltest
{
class
TestShmemParent
:
public
PTestShmemParent
{
NS_INLINE_DECL_REFCOUNTING
(
TestShmemParent
override
)
private
:
IPCResult
RecvTake
(
Shmem
&
&
mem
Shmem
&
&
unsafe
const
uint32_t
&
expectedSize
)
final
override
{
EXPECT_EQ
(
mem
.
Size
<
char
>
(
)
expectedSize
)
<
<
"
expected
shmem
size
"
<
<
expectedSize
<
<
"
but
it
has
size
"
<
<
mem
.
Size
<
char
>
(
)
;
EXPECT_EQ
(
unsafe
.
Size
<
char
>
(
)
expectedSize
)
<
<
"
expected
shmem
size
"
<
<
expectedSize
<
<
"
but
it
has
size
"
<
<
unsafe
.
Size
<
char
>
(
)
;
EXPECT_FALSE
(
strcmp
(
mem
.
get
<
char
>
(
)
"
And
yourself
!
"
)
)
<
<
"
expected
message
was
not
written
"
;
EXPECT_FALSE
(
strcmp
(
unsafe
.
get
<
char
>
(
)
"
And
yourself
!
"
)
)
<
<
"
expected
message
was
not
written
"
;
EXPECT_TRUE
(
DeallocShmem
(
mem
)
)
;
EXPECT_TRUE
(
DeallocShmem
(
unsafe
)
)
;
Close
(
)
;
return
IPC_OK
(
)
;
}
~
TestShmemParent
(
)
=
default
;
}
;
class
TestShmemChild
:
public
PTestShmemChild
{
NS_INLINE_DECL_REFCOUNTING
(
TestShmemChild
override
)
private
:
IPCResult
RecvGive
(
Shmem
&
&
mem
Shmem
&
&
unsafe
const
uint32_t
&
expectedSize
)
final
override
{
EXPECT_EQ
(
mem
.
Size
<
char
>
(
)
expectedSize
)
<
<
"
expected
shmem
size
"
<
<
expectedSize
<
<
"
but
it
has
size
"
<
<
mem
.
Size
<
char
>
(
)
;
EXPECT_EQ
(
unsafe
.
Size
<
char
>
(
)
expectedSize
)
<
<
"
expected
shmem
size
"
<
<
expectedSize
<
<
"
but
it
has
size
"
<
<
unsafe
.
Size
<
char
>
(
)
;
EXPECT_FALSE
(
strcmp
(
mem
.
get
<
char
>
(
)
"
Hello
!
"
)
)
<
<
"
expected
message
was
not
written
"
;
EXPECT_FALSE
(
strcmp
(
unsafe
.
get
<
char
>
(
)
"
Hello
!
"
)
)
<
<
"
expected
message
was
not
written
"
;
char
*
unsafeptr
=
unsafe
.
get
<
char
>
(
)
;
memcpy
(
mem
.
get
<
char
>
(
)
"
And
yourself
!
"
sizeof
(
"
And
yourself
!
"
)
)
;
memcpy
(
unsafeptr
"
And
yourself
!
"
sizeof
(
"
And
yourself
!
"
)
)
;
Shmem
unsafecopy
=
unsafe
;
EXPECT_TRUE
(
SendTake
(
std
:
:
move
(
mem
)
std
:
:
move
(
unsafe
)
expectedSize
)
)
;
char
uc1
=
*
unsafeptr
;
(
void
)
uc1
;
char
uc2
=
*
unsafecopy
.
get
<
char
>
(
)
;
(
void
)
uc2
;
return
IPC_OK
(
)
;
}
~
TestShmemChild
(
)
=
default
;
}
;
IPDL_TEST
(
TestShmem
)
{
Shmem
mem
;
Shmem
unsafe
;
uint32_t
size
=
12345
;
EXPECT_TRUE
(
mActor
-
>
AllocShmem
(
size
&
mem
)
)
<
<
"
can
'
t
alloc
shmem
"
;
EXPECT_TRUE
(
mActor
-
>
AllocUnsafeShmem
(
size
&
unsafe
)
)
<
<
"
can
'
t
alloc
shmem
"
;
EXPECT_EQ
(
mem
.
Size
<
char
>
(
)
size
)
<
<
"
shmem
is
wrong
size
:
expected
"
<
<
size
<
<
"
got
"
<
<
mem
.
Size
<
char
>
(
)
;
EXPECT_EQ
(
unsafe
.
Size
<
char
>
(
)
size
)
<
<
"
shmem
is
wrong
size
:
expected
"
<
<
size
<
<
"
got
"
<
<
unsafe
.
Size
<
char
>
(
)
;
char
*
ptr
=
mem
.
get
<
char
>
(
)
;
memcpy
(
ptr
"
Hello
!
"
sizeof
(
"
Hello
!
"
)
)
;
char
*
unsafeptr
=
unsafe
.
get
<
char
>
(
)
;
memcpy
(
unsafeptr
"
Hello
!
"
sizeof
(
"
Hello
!
"
)
)
;
Shmem
unsafecopy
=
unsafe
;
EXPECT_TRUE
(
mActor
-
>
SendGive
(
std
:
:
move
(
mem
)
std
:
:
move
(
unsafe
)
size
)
)
;
char
uc1
=
*
unsafeptr
;
(
void
)
uc1
;
char
uc2
=
*
unsafecopy
.
get
<
char
>
(
)
;
(
void
)
uc2
;
}
}
