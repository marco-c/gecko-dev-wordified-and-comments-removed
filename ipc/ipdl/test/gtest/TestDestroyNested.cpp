#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
_ipdltest
/
IPDLUnitTest
.
h
"
#
include
"
mozilla
/
_ipdltest
/
PTestDestroyNestedChild
.
h
"
#
include
"
mozilla
/
_ipdltest
/
PTestDestroyNestedParent
.
h
"
#
include
"
mozilla
/
_ipdltest
/
PTestDestroyNestedSubChild
.
h
"
#
include
"
mozilla
/
_ipdltest
/
PTestDestroyNestedSubParent
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
:
:
_ipdltest
{
class
TestDestroyNestedSubParent
:
public
PTestDestroyNestedSubParent
{
NS_INLINE_DECL_REFCOUNTING
(
TestDestroyNestedSubParent
override
)
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
bool
mActorDestroyCalled
=
false
;
nsrefcnt
GetRefCnt
(
)
const
{
return
mRefCnt
;
}
private
:
~
TestDestroyNestedSubParent
(
)
=
default
;
}
;
class
TestDestroyNestedSubChild
:
public
PTestDestroyNestedSubChild
{
NS_INLINE_DECL_REFCOUNTING
(
TestDestroyNestedSubChild
override
)
private
:
~
TestDestroyNestedSubChild
(
)
=
default
;
}
;
class
TestDestroyNestedParent
:
public
PTestDestroyNestedParent
{
NS_INLINE_DECL_REFCOUNTING
(
TestDestroyNestedParent
override
)
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
bool
mActorDestroyCalled
=
false
;
private
:
~
TestDestroyNestedParent
(
)
=
default
;
}
;
class
TestDestroyNestedChild
:
public
PTestDestroyNestedChild
{
NS_INLINE_DECL_REFCOUNTING
(
TestDestroyNestedChild
override
)
already_AddRefed
<
PTestDestroyNestedSubChild
>
AllocPTestDestroyNestedSubChild
(
)
override
{
return
MakeAndAddRef
<
TestDestroyNestedSubChild
>
(
)
;
}
private
:
~
TestDestroyNestedChild
(
)
=
default
;
}
;
void
TestDestroyNestedSubParent
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
EXPECT_FALSE
(
mActorDestroyCalled
)
<
<
"
re
-
entered
ActorDestroy
(
)
"
;
mActorDestroyCalled
=
true
;
EXPECT_FALSE
(
static_cast
<
TestDestroyNestedParent
*
>
(
Manager
(
)
)
-
>
mActorDestroyCalled
)
<
<
"
manager
already
destroyed
"
;
Manager
(
)
-
>
Close
(
)
;
EXPECT_TRUE
(
static_cast
<
TestDestroyNestedParent
*
>
(
Manager
(
)
)
-
>
mActorDestroyCalled
)
<
<
"
manager
successfully
destroyed
"
;
NS_ProcessPendingEvents
(
nullptr
)
;
}
void
TestDestroyNestedParent
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
EXPECT_FALSE
(
mActorDestroyCalled
)
<
<
"
re
-
entered
ActorDestroy
(
)
"
;
mActorDestroyCalled
=
true
;
}
IPDL_TEST
(
TestDestroyNested
)
{
auto
p
=
MakeRefPtr
<
TestDestroyNestedSubParent
>
(
)
;
auto
*
rv1
=
mActor
-
>
SendPTestDestroyNestedSubConstructor
(
p
)
;
ASSERT_EQ
(
p
rv1
)
<
<
"
can
'
t
allocate
Sub
"
;
bool
rv2
=
PTestDestroyNestedSubParent
:
:
Send__delete__
(
p
)
;
ASSERT_TRUE
(
rv2
)
<
<
"
Send__delete__
failed
"
;
ASSERT_TRUE
(
mActor
-
>
mActorDestroyCalled
)
<
<
"
Parent
not
destroyed
"
;
ASSERT_TRUE
(
p
-
>
mActorDestroyCalled
)
<
<
"
Sub
not
destroyed
"
;
ASSERT_EQ
(
p
-
>
GetRefCnt
(
)
1u
)
<
<
"
Outstanding
references
to
Sub
remain
"
;
}
}
