#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
_ipdltest
/
IPDLUnitTest
.
h
"
#
include
"
mozilla
/
_ipdltest
/
PTestCrossProcessSemaphoreChild
.
h
"
#
include
"
mozilla
/
_ipdltest
/
PTestCrossProcessSemaphoreParent
.
h
"
#
include
"
mozilla
/
ipc
/
CrossProcessSemaphore
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
:
:
_ipdltest
{
class
TestCrossProcessSemaphoreChild
:
public
PTestCrossProcessSemaphoreChild
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TestCrossProcessSemaphoreChild
override
)
public
:
IPCResult
RecvCrossProcessSemaphore
(
CrossProcessSemaphoreHandle
&
&
aSem
)
override
{
UniquePtr
<
CrossProcessSemaphore
>
cps
(
CrossProcessSemaphore
:
:
Create
(
std
:
:
move
(
aSem
)
)
)
;
EXPECT_TRUE
(
bool
(
cps
)
)
;
cps
-
>
Signal
(
)
;
Close
(
)
;
return
IPC_OK
(
)
;
}
private
:
~
TestCrossProcessSemaphoreChild
(
)
=
default
;
}
;
class
TestCrossProcessSemaphoreParent
:
public
PTestCrossProcessSemaphoreParent
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TestCrossProcessSemaphoreParent
override
)
private
:
~
TestCrossProcessSemaphoreParent
(
)
=
default
;
}
;
IPDL_TEST
(
TestCrossProcessSemaphore
)
{
UniquePtr
<
CrossProcessSemaphore
>
cps
(
CrossProcessSemaphore
:
:
Create
(
"
TestCrossProcessSemaphore
"
1
)
)
;
ASSERT_TRUE
(
bool
(
cps
)
)
;
CrossProcessSemaphoreHandle
handle
=
cps
-
>
CloneHandle
(
)
;
ASSERT_TRUE
(
bool
(
handle
)
)
;
bool
ok
=
mActor
-
>
SendCrossProcessSemaphore
(
std
:
:
move
(
handle
)
)
;
ASSERT_TRUE
(
ok
)
;
EXPECT_TRUE
(
cps
-
>
Wait
(
)
)
;
EXPECT_TRUE
(
cps
-
>
Wait
(
Some
(
TimeDuration
:
:
FromSeconds
(
10
)
)
)
)
;
}
}
