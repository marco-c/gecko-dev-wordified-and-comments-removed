#
ifndef
MOJO_CORE_PORTS_PORT_LOCKER_H_
#
define
MOJO_CORE_PORTS_PORT_LOCKER_H_
#
include
<
stdint
.
h
>
#
include
"
base
/
logging
.
h
"
#
include
"
mojo
/
core
/
ports
/
port_ref
.
h
"
namespace
mojo
{
namespace
core
{
namespace
ports
{
class
Port
;
class
PortRef
;
class
PortLocker
{
public
:
PortLocker
(
const
PortRef
*
*
port_refs
size_t
num_ports
)
;
~
PortLocker
(
)
;
PortLocker
(
const
PortLocker
&
)
=
delete
;
void
operator
=
(
const
PortLocker
&
)
=
delete
;
Port
*
GetPort
(
const
PortRef
&
port_ref
)
const
{
#
ifdef
DEBUG
bool
is_port_locked
=
false
;
for
(
size_t
i
=
0
;
i
<
num_ports_
&
&
!
is_port_locked
;
+
+
i
)
if
(
port_refs_
[
i
]
-
>
port
(
)
=
=
port_ref
.
port
(
)
)
is_port_locked
=
true
;
DCHECK
(
is_port_locked
)
;
#
endif
return
port_ref
.
port
(
)
;
}
#
ifdef
DEBUG
static
void
AssertNoPortsLockedOnCurrentThread
(
)
;
#
else
static
void
AssertNoPortsLockedOnCurrentThread
(
)
{
}
#
endif
private
:
const
PortRef
*
*
const
port_refs_
;
const
size_t
num_ports_
;
}
;
class
SinglePortLocker
{
public
:
explicit
SinglePortLocker
(
const
PortRef
*
port_ref
)
;
~
SinglePortLocker
(
)
;
SinglePortLocker
(
const
SinglePortLocker
&
)
=
delete
;
void
operator
=
(
const
SinglePortLocker
&
)
=
delete
;
Port
*
port
(
)
const
{
return
locker_
.
GetPort
(
*
port_ref_
)
;
}
private
:
const
PortRef
*
port_ref_
;
PortLocker
locker_
;
}
;
}
}
}
#
endif
