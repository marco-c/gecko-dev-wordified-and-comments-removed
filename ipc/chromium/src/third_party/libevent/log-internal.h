#
ifndef
LOG_INTERNAL_H_INCLUDED_
#
define
LOG_INTERNAL_H_INCLUDED_
#
include
"
event2
/
util
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
ifdef
__GNUC__
#
define
EV_CHECK_FMT
(
a
b
)
__attribute__
(
(
format
(
printf
a
b
)
)
)
#
define
EV_NORETURN
__attribute__
(
(
noreturn
)
)
#
else
#
define
EV_CHECK_FMT
(
a
b
)
#
define
EV_NORETURN
#
endif
#
define
EVENT_ERR_ABORT_
(
(
int
)
0xdeaddead
)
#
if
!
defined
(
EVENT__DISABLE_DEBUG_MODE
)
|
|
defined
(
USE_DEBUG
)
#
define
EVENT_DEBUG_LOGGING_ENABLED
#
endif
#
ifdef
EVENT_DEBUG_LOGGING_ENABLED
EVENT2_CORE_EXPORT_SYMBOL
extern
ev_uint32_t
event_debug_logging_mask_
;
#
define
event_debug_get_logging_mask_
(
)
(
event_debug_logging_mask_
)
#
else
#
define
event_debug_get_logging_mask_
(
)
(
0
)
#
endif
EVENT2_EXPORT_SYMBOL
void
event_err
(
int
eval
const
char
*
fmt
.
.
.
)
EV_CHECK_FMT
(
2
3
)
EV_NORETURN
;
EVENT2_EXPORT_SYMBOL
void
event_warn
(
const
char
*
fmt
.
.
.
)
EV_CHECK_FMT
(
1
2
)
;
EVENT2_EXPORT_SYMBOL
void
event_sock_err
(
int
eval
evutil_socket_t
sock
const
char
*
fmt
.
.
.
)
EV_CHECK_FMT
(
3
4
)
EV_NORETURN
;
EVENT2_EXPORT_SYMBOL
void
event_sock_warn
(
evutil_socket_t
sock
const
char
*
fmt
.
.
.
)
EV_CHECK_FMT
(
2
3
)
;
EVENT2_EXPORT_SYMBOL
void
event_errx
(
int
eval
const
char
*
fmt
.
.
.
)
EV_CHECK_FMT
(
2
3
)
EV_NORETURN
;
EVENT2_EXPORT_SYMBOL
void
event_warnx
(
const
char
*
fmt
.
.
.
)
EV_CHECK_FMT
(
1
2
)
;
EVENT2_EXPORT_SYMBOL
void
event_msgx
(
const
char
*
fmt
.
.
.
)
EV_CHECK_FMT
(
1
2
)
;
EVENT2_EXPORT_SYMBOL
void
event_debugx_
(
const
char
*
fmt
.
.
.
)
EV_CHECK_FMT
(
1
2
)
;
EVENT2_EXPORT_SYMBOL
void
event_logv_
(
int
severity
const
char
*
errstr
const
char
*
fmt
va_list
ap
)
EV_CHECK_FMT
(
3
0
)
;
#
ifdef
EVENT_DEBUG_LOGGING_ENABLED
#
define
event_debug
(
x
)
do
{
\
if
(
event_debug_get_logging_mask_
(
)
)
{
\
event_debugx_
x
;
\
}
\
}
while
(
0
)
#
else
#
define
event_debug
(
x
)
(
(
void
)
0
)
#
endif
#
undef
EV_CHECK_FMT
#
ifdef
__cplusplus
}
#
endif
#
endif
