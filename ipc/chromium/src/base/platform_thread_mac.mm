#
include
"
base
/
platform_thread
.
h
"
#
import
<
Foundation
/
Foundation
.
h
>
#
include
<
dlfcn
.
h
>
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
scoped_nsautorelease_pool
.
h
"
interface
NoOp
:
NSObject
+
(
void
)
noOp
;
end
implementation
NoOp
+
(
void
)
noOp
{
}
end
namespace
base
{
void
InitThreading
(
)
{
ScopedNSAutoreleasePool
pool
;
static
BOOL
multithreaded
=
[
NSThread
isMultiThreaded
]
;
if
(
!
multithreaded
)
{
[
NSThread
detachNewThreadSelector
:
selector
(
noOp
)
toTarget
:
[
NoOp
class
]
withObject
:
nil
]
;
multithreaded
=
YES
;
DCHECK
(
[
NSThread
isMultiThreaded
]
)
;
}
}
}
void
PlatformThread
:
:
SetName
(
const
char
*
name
)
{
int
(
*
dynamic_pthread_setname_np
)
(
const
char
*
)
;
*
reinterpret_cast
<
void
*
*
>
(
&
dynamic_pthread_setname_np
)
=
dlsym
(
RTLD_DEFAULT
"
pthread_setname_np
"
)
;
if
(
!
dynamic_pthread_setname_np
)
return
;
const
int
kMaxNameLength
=
63
;
std
:
:
string
shortened_name
=
std
:
:
string
(
name
)
.
substr
(
0
kMaxNameLength
)
;
dynamic_pthread_setname_np
(
shortened_name
.
c_str
(
)
)
;
}
