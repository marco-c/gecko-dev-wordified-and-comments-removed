#
include
"
buffer
.
h
"
#
include
"
nsDebug
.
h
"
Buffer
:
:
Buffer
(
)
:
mBuffer
(
nullptr
)
mSize
(
0
)
mReserved
(
0
)
{
}
Buffer
:
:
~
Buffer
(
)
{
if
(
mBuffer
)
{
free
(
mBuffer
)
;
}
}
bool
Buffer
:
:
empty
(
)
const
{
return
mSize
=
=
0
;
}
size_t
Buffer
:
:
size
(
)
const
{
return
mSize
;
}
const
char
*
Buffer
:
:
data
(
)
const
{
return
mBuffer
;
}
void
Buffer
:
:
clear
(
)
{
free
(
mBuffer
)
;
mBuffer
=
nullptr
;
mSize
=
0
;
mReserved
=
0
;
}
void
Buffer
:
:
try_realloc
(
size_t
newlength
)
{
char
*
buffer
=
(
char
*
)
realloc
(
mBuffer
newlength
)
;
if
(
buffer
|
|
!
newlength
)
{
mBuffer
=
buffer
;
mReserved
=
newlength
;
return
;
}
if
(
newlength
>
mReserved
)
{
NS_ABORT_OOM
(
newlength
)
;
}
}
void
Buffer
:
:
append
(
const
char
*
bytes
size_t
length
)
{
if
(
mSize
+
length
>
mReserved
)
{
try_realloc
(
mSize
+
length
)
;
}
memcpy
(
mBuffer
+
mSize
bytes
length
)
;
mSize
+
=
length
;
}
void
Buffer
:
:
assign
(
const
char
*
bytes
size_t
length
)
{
if
(
bytes
>
=
mBuffer
&
&
bytes
<
mBuffer
+
mReserved
)
{
MOZ_RELEASE_ASSERT
(
bytes
+
length
<
=
mBuffer
+
mSize
)
;
memmove
(
mBuffer
bytes
length
)
;
mSize
=
length
;
try_realloc
(
length
)
;
}
else
{
try_realloc
(
length
)
;
mSize
=
length
;
memcpy
(
mBuffer
bytes
length
)
;
}
}
void
Buffer
:
:
erase
(
size_t
start
size_t
count
)
{
mSize
-
=
count
;
memmove
(
mBuffer
+
start
mBuffer
+
start
+
count
mSize
-
start
)
;
try_realloc
(
mSize
)
;
}
void
Buffer
:
:
reserve
(
size_t
size
)
{
if
(
mReserved
<
size
)
{
try_realloc
(
size
)
;
}
}
char
*
Buffer
:
:
trade_bytes
(
size_t
count
)
{
MOZ_RELEASE_ASSERT
(
count
)
;
char
*
result
=
mBuffer
;
mSize
=
mReserved
=
mSize
-
count
;
mBuffer
=
mReserved
?
(
char
*
)
malloc
(
mReserved
)
:
nullptr
;
MOZ_RELEASE_ASSERT
(
!
mReserved
|
|
mBuffer
)
;
if
(
mSize
)
{
memcpy
(
mBuffer
result
+
count
mSize
)
;
}
char
*
resized
=
(
char
*
)
realloc
(
result
count
)
;
if
(
resized
)
{
return
resized
;
}
return
result
;
}
