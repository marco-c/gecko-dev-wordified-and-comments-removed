#
ifndef
BASE_ID_MAP_H__
#
define
BASE_ID_MAP_H__
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
hash_tables
.
h
"
#
include
"
base
/
logging
.
h
"
template
<
class
T
>
class
IDMap
{
private
:
typedef
base
:
:
hash_map
<
int32_t
T
>
HashTable
;
typedef
typename
HashTable
:
:
iterator
iterator
;
public
:
typedef
typename
HashTable
:
:
const_iterator
const_iterator
;
IDMap
(
)
{
}
IDMap
(
const
IDMap
&
other
)
:
data_
(
other
.
data_
)
{
}
const_iterator
begin
(
)
const
{
return
data_
.
begin
(
)
;
}
const_iterator
end
(
)
const
{
return
data_
.
end
(
)
;
}
void
AddWithID
(
const
T
&
data
int32_t
id
)
{
DCHECK
(
data_
.
find
(
id
)
=
=
data_
.
end
(
)
)
<
<
"
Inserting
duplicate
item
"
;
data_
[
id
]
=
data
;
}
void
Remove
(
int32_t
id
)
{
iterator
i
=
data_
.
find
(
id
)
;
if
(
i
=
=
data_
.
end
(
)
)
{
NOTREACHED
(
)
<
<
"
Attempting
to
remove
an
item
not
in
the
list
"
;
return
;
}
data_
.
erase
(
i
)
;
}
void
RemoveIfPresent
(
int32_t
id
)
{
iterator
i
=
data_
.
find
(
id
)
;
if
(
i
!
=
data_
.
end
(
)
)
{
data_
.
erase
(
i
)
;
}
}
void
ReplaceWithID
(
const
T
&
data
int32_t
id
)
{
DCHECK
(
data_
.
find
(
id
)
!
=
data_
.
end
(
)
)
<
<
"
item
doesn
'
t
exist
"
;
data_
[
id
]
=
data
;
}
void
Clear
(
)
{
data_
.
clear
(
)
;
}
T
Lookup
(
int32_t
id
)
const
{
const_iterator
i
=
data_
.
find
(
id
)
;
if
(
i
=
=
data_
.
end
(
)
)
return
T
(
)
;
return
i
-
>
second
;
}
protected
:
HashTable
data_
;
}
;
#
endif
