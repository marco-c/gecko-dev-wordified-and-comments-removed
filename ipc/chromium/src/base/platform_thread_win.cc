#
include
"
base
/
platform_thread
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
win_util
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
{
const
DWORD
kVCThreadNameException
=
0x406D1388
;
typedef
struct
tagTHREADNAME_INFO
{
DWORD
dwType
;
LPCSTR
szName
;
DWORD
dwThreadID
;
DWORD
dwFlags
;
}
THREADNAME_INFO
;
DWORD
__stdcall
ThreadFunc
(
void
*
closure
)
{
(
void
)
NS_GetCurrentThread
(
)
;
PlatformThread
:
:
Delegate
*
delegate
=
static_cast
<
PlatformThread
:
:
Delegate
*
>
(
closure
)
;
delegate
-
>
ThreadMain
(
)
;
return
0
;
}
}
PlatformThreadId
PlatformThread
:
:
CurrentId
(
)
{
return
GetCurrentThreadId
(
)
;
}
void
PlatformThread
:
:
YieldCurrentThread
(
)
{
:
:
Sleep
(
0
)
;
}
void
PlatformThread
:
:
Sleep
(
int
duration_ms
)
{
:
:
Sleep
(
duration_ms
)
;
}
void
PlatformThread
:
:
SetName
(
const
char
*
name
)
{
NS_SetCurrentThreadName
(
name
)
;
}
bool
PlatformThread
:
:
Create
(
size_t
stack_size
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
)
{
unsigned
int
flags
=
0
;
if
(
stack_size
>
0
)
{
flags
=
STACK_SIZE_PARAM_IS_A_RESERVATION
;
}
else
{
stack_size
=
0
;
}
*
thread_handle
=
CreateThread
(
NULL
stack_size
ThreadFunc
delegate
flags
NULL
)
;
return
*
thread_handle
!
=
NULL
;
}
bool
PlatformThread
:
:
CreateNonJoinable
(
size_t
stack_size
Delegate
*
delegate
)
{
PlatformThreadHandle
thread_handle
;
bool
result
=
Create
(
stack_size
delegate
&
thread_handle
)
;
CloseHandle
(
thread_handle
)
;
return
result
;
}
void
PlatformThread
:
:
Join
(
PlatformThreadHandle
thread_handle
)
{
DCHECK
(
thread_handle
)
;
DWORD
result
=
WaitForSingleObject
(
thread_handle
INFINITE
)
;
DCHECK_EQ
(
WAIT_OBJECT_0
result
)
;
CloseHandle
(
thread_handle
)
;
}
