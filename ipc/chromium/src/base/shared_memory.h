#
ifndef
BASE_SHARED_MEMORY_H_
#
define
BASE_SHARED_MEMORY_H_
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_POSIX
)
#
include
<
sys
/
types
.
h
>
#
include
<
semaphore
.
h
>
#
endif
#
include
<
string
>
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
namespace
base
{
typedef
mozilla
:
:
UniqueFileHandle
SharedMemoryHandle
;
class
SharedMemory
{
public
:
SharedMemory
(
)
=
default
;
SharedMemory
(
SharedMemoryHandle
init_handle
bool
read_only
)
:
SharedMemory
(
)
{
SetHandle
(
std
:
:
move
(
init_handle
)
read_only
)
;
}
SharedMemory
(
SharedMemory
&
&
other
)
=
default
;
~
SharedMemory
(
)
;
bool
SetHandle
(
SharedMemoryHandle
handle
bool
read_only
)
;
static
bool
IsHandleValid
(
const
SharedMemoryHandle
&
handle
)
;
bool
IsValid
(
)
const
{
return
static_cast
<
bool
>
(
mapped_file_
)
;
}
static
SharedMemoryHandle
NULLHandle
(
)
;
bool
Create
(
size_t
size
)
{
return
CreateInternal
(
size
false
)
;
}
bool
CreateFreezeable
(
size_t
size
)
{
return
CreateInternal
(
size
true
)
;
}
bool
Map
(
size_t
bytes
void
*
fixed_address
=
nullptr
)
;
void
Unmap
(
)
{
memory_
=
nullptr
;
}
size_t
max_size
(
)
const
{
return
max_size_
;
}
void
*
memory
(
)
const
{
return
memory_
.
get
(
)
;
}
mozilla
:
:
UniqueFileHandle
TakeHandle
(
)
{
mozilla
:
:
UniqueFileHandle
handle
=
std
:
:
move
(
mapped_file_
)
;
Close
(
)
;
return
handle
;
}
mozilla
:
:
UniqueFileHandle
CloneHandle
(
)
;
[
[
nodiscard
]
]
bool
Freeze
(
)
{
Unmap
(
)
;
return
ReadOnlyCopy
(
this
)
;
}
[
[
nodiscard
]
]
bool
ReadOnlyCopy
(
SharedMemory
*
ro_out
)
;
void
Close
(
bool
unmap_view
=
true
)
;
static
void
*
FindFreeAddressSpace
(
size_t
size
)
;
#
ifdef
OS_POSIX
static
bool
AppendPosixShmPrefix
(
std
:
:
string
*
str
pid_t
pid
)
;
static
bool
UsingPosixShm
(
)
;
#
endif
private
:
bool
CreateInternal
(
size_t
size
bool
freezeable
)
;
struct
MappingDeleter
{
#
ifdef
OS_POSIX
size_t
mapped_size_
=
0
;
explicit
MappingDeleter
(
size_t
size
)
:
mapped_size_
(
size
)
{
}
#
endif
MappingDeleter
(
)
=
default
;
void
operator
(
)
(
void
*
ptr
)
;
}
;
using
UniqueMapping
=
mozilla
:
:
UniquePtr
<
void
MappingDeleter
>
;
UniqueMapping
memory_
;
size_t
max_size_
=
0
;
mozilla
:
:
UniqueFileHandle
mapped_file_
;
#
if
defined
(
OS_WIN
)
bool
external_section_
=
false
;
#
elif
defined
(
OS_POSIX
)
&
&
!
defined
(
ANDROID
)
mozilla
:
:
UniqueFileHandle
frozen_file_
;
bool
is_memfd_
=
false
;
#
endif
bool
read_only_
=
false
;
bool
freezeable_
=
false
;
DISALLOW_EVIL_CONSTRUCTORS
(
SharedMemory
)
;
}
;
}
#
endif
