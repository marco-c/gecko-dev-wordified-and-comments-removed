#
ifndef
BASE_SHARED_MEMORY_H_
#
define
BASE_SHARED_MEMORY_H_
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_POSIX
)
#
include
<
sys
/
types
.
h
>
#
include
<
semaphore
.
h
>
#
include
"
base
/
file_descriptor_posix
.
h
"
#
endif
#
include
<
string
>
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
process
.
h
"
namespace
base
{
#
if
defined
(
OS_WIN
)
typedef
HANDLE
SharedMemoryHandle
;
#
elif
defined
(
OS_POSIX
)
typedef
FileDescriptor
SharedMemoryHandle
;
#
endif
class
SharedMemory
{
public
:
SharedMemory
(
)
;
SharedMemory
(
SharedMemoryHandle
init_handle
bool
read_only
)
:
SharedMemory
(
)
{
SetHandle
(
init_handle
read_only
)
;
}
~
SharedMemory
(
)
;
bool
SetHandle
(
SharedMemoryHandle
handle
bool
read_only
)
;
static
bool
IsHandleValid
(
const
SharedMemoryHandle
&
handle
)
;
static
SharedMemoryHandle
NULLHandle
(
)
;
bool
Create
(
size_t
size
)
;
bool
Map
(
size_t
bytes
)
;
bool
Unmap
(
)
;
size_t
max_size
(
)
const
{
return
max_size_
;
}
void
*
memory
(
)
const
{
return
memory_
;
}
SharedMemoryHandle
handle
(
)
const
;
void
Close
(
bool
unmap_view
=
true
)
;
bool
ShareToProcess
(
base
:
:
ProcessId
target_pid
SharedMemoryHandle
*
new_handle
)
{
return
ShareToProcessCommon
(
target_pid
new_handle
false
)
;
}
bool
GiveToProcess
(
ProcessId
target_pid
SharedMemoryHandle
*
new_handle
)
{
return
ShareToProcessCommon
(
target_pid
new_handle
true
)
;
}
#
ifdef
OS_POSIX
static
bool
AppendPosixShmPrefix
(
std
:
:
string
*
str
pid_t
pid
)
;
#
endif
private
:
bool
ShareToProcessCommon
(
ProcessId
target_pid
SharedMemoryHandle
*
new_handle
bool
close_self
)
;
#
if
defined
(
OS_WIN
)
bool
external_section_
;
HANDLE
mapped_file_
;
#
elif
defined
(
OS_POSIX
)
int
mapped_file_
;
#
endif
void
*
memory_
;
bool
read_only_
;
size_t
max_size_
;
DISALLOW_EVIL_CONSTRUCTORS
(
SharedMemory
)
;
}
;
}
#
endif
