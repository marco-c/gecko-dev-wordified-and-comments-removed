#
ifndef
BASE_PICKLE_H__
#
define
BASE_PICKLE_H__
#
include
<
string
>
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
string16
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
Pickle
;
class
PickleIterator
{
public
:
explicit
PickleIterator
(
const
Pickle
&
pickle
)
;
private
:
friend
class
Pickle
;
template
<
typename
T
>
void
CopyFrom
(
T
*
dest
)
;
void
*
iter_
;
}
;
class
Pickle
{
public
:
enum
Ownership
{
BORROWS
OWNS
}
;
~
Pickle
(
)
;
Pickle
(
)
;
explicit
Pickle
(
int
header_size
)
;
Pickle
(
const
char
*
data
int
data_len
Ownership
ownership
=
BORROWS
)
;
Pickle
(
const
Pickle
&
other
)
=
delete
;
Pickle
(
Pickle
&
&
other
)
;
Pickle
&
operator
=
(
const
Pickle
&
other
)
=
delete
;
Pickle
&
operator
=
(
Pickle
&
&
other
)
;
int
size
(
)
const
{
return
static_cast
<
int
>
(
header_size_
+
header_
-
>
payload_size
)
;
}
uint32_t
capacity
(
)
const
{
return
capacity_
;
}
const
void
*
data
(
)
const
{
return
header_
;
}
MOZ_MUST_USE
bool
ReadBool
(
PickleIterator
*
iter
bool
*
result
)
const
;
MOZ_MUST_USE
bool
ReadInt16
(
PickleIterator
*
iter
int16_t
*
result
)
const
;
MOZ_MUST_USE
bool
ReadUInt16
(
PickleIterator
*
iter
uint16_t
*
result
)
const
;
MOZ_MUST_USE
bool
ReadShort
(
PickleIterator
*
iter
short
*
result
)
const
;
MOZ_MUST_USE
bool
ReadInt
(
PickleIterator
*
iter
int
*
result
)
const
;
MOZ_MUST_USE
bool
ReadLong
(
PickleIterator
*
iter
long
*
result
)
const
;
MOZ_MUST_USE
bool
ReadULong
(
PickleIterator
*
iter
unsigned
long
*
result
)
const
;
MOZ_MUST_USE
bool
ReadSize
(
PickleIterator
*
iter
size_t
*
result
)
const
;
MOZ_MUST_USE
bool
ReadInt32
(
PickleIterator
*
iter
int32_t
*
result
)
const
;
MOZ_MUST_USE
bool
ReadUInt32
(
PickleIterator
*
iter
uint32_t
*
result
)
const
;
MOZ_MUST_USE
bool
ReadInt64
(
PickleIterator
*
iter
int64_t
*
result
)
const
;
MOZ_MUST_USE
bool
ReadUInt64
(
PickleIterator
*
iter
uint64_t
*
result
)
const
;
MOZ_MUST_USE
bool
ReadDouble
(
PickleIterator
*
iter
double
*
result
)
const
;
MOZ_MUST_USE
bool
ReadIntPtr
(
PickleIterator
*
iter
intptr_t
*
result
)
const
;
MOZ_MUST_USE
bool
ReadUnsignedChar
(
PickleIterator
*
iter
unsigned
char
*
result
)
const
;
MOZ_MUST_USE
bool
ReadString
(
PickleIterator
*
iter
std
:
:
string
*
result
)
const
;
MOZ_MUST_USE
bool
ReadWString
(
PickleIterator
*
iter
std
:
:
wstring
*
result
)
const
;
MOZ_MUST_USE
bool
ReadData
(
PickleIterator
*
iter
const
char
*
*
data
int
*
length
)
const
;
MOZ_MUST_USE
bool
ReadBytes
(
PickleIterator
*
iter
const
char
*
*
data
int
length
uint32_t
alignment
=
sizeof
(
memberAlignmentType
)
)
const
;
MOZ_MUST_USE
bool
ReadLength
(
PickleIterator
*
iter
int
*
result
)
const
;
MOZ_WARN_UNUSED_RESULT
bool
ReadSentinel
(
PickleIterator
*
iter
uint32_t
sentinel
)
const
;
void
EndRead
(
PickleIterator
&
iter
)
const
{
DCHECK
(
iter
.
iter_
=
=
end_of_payload
(
)
)
;
}
bool
WriteBool
(
bool
value
)
{
return
WriteInt
(
value
?
1
:
0
)
;
}
bool
WriteInt16
(
int16_t
value
)
{
return
WriteBytes
(
&
value
sizeof
(
value
)
)
;
}
bool
WriteUInt16
(
uint16_t
value
)
{
return
WriteBytes
(
&
value
sizeof
(
value
)
)
;
}
bool
WriteInt
(
int
value
)
{
return
WriteBytes
(
&
value
sizeof
(
value
)
)
;
}
bool
WriteLong
(
long
value
)
{
return
WriteInt64
(
int64_t
(
value
)
)
;
}
bool
WriteULong
(
unsigned
long
value
)
{
return
WriteUInt64
(
uint64_t
(
value
)
)
;
}
bool
WriteSize
(
size_t
value
)
{
return
WriteUInt64
(
uint64_t
(
value
)
)
;
}
bool
WriteInt32
(
int32_t
value
)
{
return
WriteBytes
(
&
value
sizeof
(
value
)
)
;
}
bool
WriteUInt32
(
uint32_t
value
)
{
return
WriteBytes
(
&
value
sizeof
(
value
)
)
;
}
bool
WriteInt64
(
int64_t
value
)
{
return
WriteBytes
(
&
value
sizeof
(
value
)
)
;
}
bool
WriteUInt64
(
uint64_t
value
)
{
return
WriteBytes
(
&
value
sizeof
(
value
)
)
;
}
bool
WriteDouble
(
double
value
)
{
return
WriteBytes
(
&
value
sizeof
(
value
)
)
;
}
bool
WriteIntPtr
(
intptr_t
value
)
{
return
WriteInt64
(
int64_t
(
value
)
)
;
}
bool
WriteUnsignedChar
(
unsigned
char
value
)
{
return
WriteBytes
(
&
value
sizeof
(
value
)
)
;
}
bool
WriteString
(
const
std
:
:
string
&
value
)
;
bool
WriteWString
(
const
std
:
:
wstring
&
value
)
;
bool
WriteData
(
const
char
*
data
int
length
)
;
bool
WriteBytes
(
const
void
*
data
int
data_len
uint32_t
alignment
=
sizeof
(
memberAlignmentType
)
)
;
bool
WriteSentinel
(
uint32_t
sentinel
)
;
char
*
BeginWriteData
(
int
length
)
;
struct
Header
{
uint32_t
payload_size
;
}
;
template
<
class
T
>
T
*
headerT
(
)
{
DCHECK
(
sizeof
(
T
)
=
=
header_size_
)
;
return
static_cast
<
T
*
>
(
header_
)
;
}
template
<
class
T
>
const
T
*
headerT
(
)
const
{
DCHECK
(
sizeof
(
T
)
=
=
header_size_
)
;
return
static_cast
<
const
T
*
>
(
header_
)
;
}
bool
IteratorHasRoomFor
(
const
PickleIterator
&
iter
int
len
)
const
{
if
(
(
len
<
0
)
|
|
(
iter
.
iter_
<
header_
)
|
|
iter
.
iter_
>
end_of_payload
(
)
)
return
false
;
const
char
*
end_of_region
=
reinterpret_cast
<
const
char
*
>
(
iter
.
iter_
)
+
len
;
return
(
iter
.
iter_
<
=
end_of_region
)
&
&
(
end_of_region
<
=
end_of_payload
(
)
)
;
}
typedef
uint32_t
memberAlignmentType
;
protected
:
uint32_t
payload_size
(
)
const
{
return
header_
-
>
payload_size
;
}
char
*
payload
(
)
{
return
reinterpret_cast
<
char
*
>
(
header_
)
+
header_size_
;
}
const
char
*
payload
(
)
const
{
return
reinterpret_cast
<
const
char
*
>
(
header_
)
+
header_size_
;
}
char
*
end_of_payload
(
)
{
return
payload
(
)
+
payload_size
(
)
;
}
const
char
*
end_of_payload
(
)
const
{
return
header_
?
payload
(
)
+
payload_size
(
)
:
nullptr
;
}
char
*
BeginWrite
(
uint32_t
length
uint32_t
alignment
)
;
void
EndWrite
(
char
*
dest
int
length
)
;
void
Resize
(
uint32_t
new_capacity
)
;
template
<
uint32_t
alignment
>
struct
ConstantAligner
{
static
uint32_t
align
(
int
bytes
)
{
static_assert
(
(
alignment
&
(
alignment
-
1
)
)
=
=
0
"
alignment
must
be
a
power
of
two
"
)
;
return
(
bytes
+
(
alignment
-
1
)
)
&
~
static_cast
<
uint32_t
>
(
alignment
-
1
)
;
}
}
;
static
uint32_t
AlignInt
(
int
bytes
)
{
return
ConstantAligner
<
sizeof
(
memberAlignmentType
)
>
:
:
align
(
bytes
)
;
}
static
void
UpdateIter
(
PickleIterator
*
iter
int
bytes
)
{
iter
-
>
iter_
=
static_cast
<
char
*
>
(
iter
-
>
iter_
)
+
AlignInt
(
bytes
)
;
}
static
const
char
*
FindNext
(
uint32_t
header_size
const
char
*
range_start
const
char
*
range_end
)
;
static
uint32_t
GetLength
(
uint32_t
header_size
const
char
*
range_start
const
char
*
range_end
)
;
static
const
int
kPayloadUnit
;
private
:
friend
class
PickleIterator
;
Header
*
header_
;
uint32_t
header_size_
;
uint32_t
capacity_
;
uint32_t
variable_buffer_offset_
;
}
;
#
endif
