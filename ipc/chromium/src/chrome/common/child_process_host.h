#
ifndef
CHROME_COMMON_CHILD_PROCESS_HOST_H_
#
define
CHROME_COMMON_CHILD_PROCESS_HOST_H_
#
include
"
build
/
build_config
.
h
"
#
include
<
list
>
#
include
"
base
/
basictypes
.
h
"
#
include
"
chrome
/
common
/
ipc_channel
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
FileDescriptor
;
}
}
class
ChildProcessHost
:
public
IPC
:
:
Channel
:
:
Listener
{
public
:
virtual
~
ChildProcessHost
(
)
;
protected
:
explicit
ChildProcessHost
(
)
;
virtual
bool
CanShutdown
(
)
=
0
;
bool
CreateChannel
(
)
;
bool
CreateChannel
(
mozilla
:
:
ipc
:
:
FileDescriptor
&
aFileDescriptor
)
;
virtual
void
OnMessageReceived
(
IPC
:
:
Message
&
&
msg
)
{
}
virtual
void
OnChannelConnected
(
int32_t
peer_pid
)
{
}
virtual
void
OnChannelError
(
)
{
}
bool
opening_channel
(
)
{
return
opening_channel_
;
}
const
std
:
:
wstring
&
channel_id
(
)
{
return
channel_id_
;
}
const
IPC
:
:
Channel
&
channel
(
)
const
{
return
*
channel_
;
}
IPC
:
:
Channel
*
channelp
(
)
const
{
return
channel_
.
get
(
)
;
}
private
:
class
ListenerHook
:
public
IPC
:
:
Channel
:
:
Listener
{
public
:
explicit
ListenerHook
(
ChildProcessHost
*
host
)
;
virtual
void
OnMessageReceived
(
IPC
:
:
Message
&
&
msg
)
;
virtual
void
OnChannelConnected
(
int32_t
peer_pid
)
;
virtual
void
OnChannelError
(
)
;
virtual
void
GetQueuedMessages
(
std
:
:
queue
<
IPC
:
:
Message
>
&
queue
)
;
private
:
ChildProcessHost
*
host_
;
}
;
ListenerHook
listener_
;
bool
opening_channel_
;
mozilla
:
:
UniquePtr
<
IPC
:
:
Channel
>
channel_
;
std
:
:
wstring
channel_id_
;
}
;
#
endif
