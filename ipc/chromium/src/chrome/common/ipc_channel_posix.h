#
ifndef
CHROME_COMMON_IPC_CHANNEL_POSIX_H_
#
define
CHROME_COMMON_IPC_CHANNEL_POSIX_H_
#
include
"
chrome
/
common
/
ipc_channel
.
h
"
#
include
<
sys
/
socket
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
<
list
>
#
include
"
base
/
message_loop
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
chrome
/
common
/
file_descriptor_set_posix
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Queue
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
IPC
{
class
Channel
:
:
ChannelImpl
:
public
MessageLoopForIO
:
:
Watcher
{
public
:
using
ChannelId
=
Channel
:
:
ChannelId
;
ChannelImpl
(
const
ChannelId
&
channel_id
Mode
mode
Listener
*
listener
)
;
ChannelImpl
(
int
fd
Mode
mode
Listener
*
listener
)
;
~
ChannelImpl
(
)
{
Close
(
)
;
}
bool
Connect
(
)
;
void
Close
(
)
;
Listener
*
set_listener
(
Listener
*
listener
)
{
Listener
*
old
=
listener_
;
listener_
=
listener
;
return
old
;
}
bool
Send
(
mozilla
:
:
UniquePtr
<
Message
>
message
)
;
void
GetClientFileDescriptorMapping
(
int
*
src_fd
int
*
dest_fd
)
const
;
void
ResetFileDescriptor
(
int
fd
)
;
int
GetFileDescriptor
(
)
const
{
return
pipe_
;
}
void
CloseClientFileDescriptor
(
)
;
bool
Unsound_IsClosed
(
)
const
;
uint32_t
Unsound_NumQueuedMessages
(
)
const
;
private
:
void
Init
(
Mode
mode
Listener
*
listener
)
;
bool
CreatePipe
(
Mode
mode
)
;
void
SetPipe
(
int
fd
)
;
bool
PipeBufHasSpaceAfter
(
size_t
already_written
)
;
bool
EnqueueHelloMessage
(
)
;
bool
ProcessIncomingMessages
(
)
;
bool
ProcessOutgoingMessages
(
)
;
virtual
void
OnFileCanReadWithoutBlocking
(
int
fd
)
override
;
virtual
void
OnFileCanWriteWithoutBlocking
(
int
fd
)
override
;
#
if
defined
(
OS_MACOSX
)
void
CloseDescriptors
(
uint32_t
pending_fd_id
)
;
#
endif
void
OutputQueuePush
(
mozilla
:
:
UniquePtr
<
Message
>
msg
)
;
void
OutputQueuePop
(
)
;
Mode
mode_
;
MessageLoopForIO
:
:
FileDescriptorWatcher
server_listen_connection_watcher_
;
MessageLoopForIO
:
:
FileDescriptorWatcher
read_watcher_
;
MessageLoopForIO
:
:
FileDescriptorWatcher
write_watcher_
;
bool
is_blocked_on_write_
;
mozilla
:
:
Maybe
<
Pickle
:
:
BufferList
:
:
IterImpl
>
partial_write_iter_
;
int
server_listen_pipe_
;
int
pipe_
;
int
client_pipe_
;
unsigned
pipe_buf_len_
;
Listener
*
listener_
;
mozilla
:
:
Queue
<
mozilla
:
:
UniquePtr
<
Message
>
64
>
output_queue_
;
size_t
input_buf_offset_
;
mozilla
:
:
UniquePtr
<
char
[
]
>
input_buf_
;
mozilla
:
:
UniquePtr
<
char
[
]
>
input_cmsg_buf_
;
static
constexpr
size_t
kControlBufferHeaderSize
=
32
;
static
constexpr
size_t
kControlBufferSize
=
FileDescriptorSet
:
:
MAX_DESCRIPTORS_PER_MESSAGE
*
sizeof
(
int
)
+
kControlBufferHeaderSize
;
mozilla
:
:
Maybe
<
Message
>
incoming_message_
;
std
:
:
vector
<
int
>
input_overflow_fds_
;
bool
waiting_connect_
;
bool
processing_incoming_
;
bool
closed_
;
int32_t
other_pid_
=
-
1
;
#
if
defined
(
OS_MACOSX
)
struct
PendingDescriptors
{
uint32_t
id
;
RefPtr
<
FileDescriptorSet
>
fds
;
PendingDescriptors
(
)
:
id
(
0
)
{
}
PendingDescriptors
(
uint32_t
id
FileDescriptorSet
*
fds
)
:
id
(
id
)
fds
(
fds
)
{
}
}
;
std
:
:
list
<
PendingDescriptors
>
pending_fds_
;
uint32_t
last_pending_fd_id_
;
#
endif
size_t
output_queue_length_
;
ScopedRunnableMethodFactory
<
ChannelImpl
>
factory_
;
DISALLOW_COPY_AND_ASSIGN
(
ChannelImpl
)
;
}
;
}
#
endif
