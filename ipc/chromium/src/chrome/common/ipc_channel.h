#
ifndef
CHROME_COMMON_IPC_CHANNEL_H_
#
define
CHROME_COMMON_IPC_CHANNEL_H_
#
include
<
cstdint
>
#
include
<
queue
>
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
mozilla
/
EventTargetAndLockCapability
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
chrome
/
common
/
ipc_message
.
h
"
#
ifdef
XP_WIN
#
include
<
string
>
#
endif
namespace
IPC
{
class
Message
;
class
MessageReader
;
class
MessageWriter
;
class
Channel
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_DELETE_ON_EVENT_TARGET
(
Channel
IOThread
(
)
.
GetEventTarget
(
)
)
;
using
ChannelHandle
=
mozilla
:
:
UniqueFileHandle
;
class
Listener
{
public
:
virtual
~
Listener
(
)
=
default
;
virtual
void
OnMessageReceived
(
mozilla
:
:
UniquePtr
<
Message
>
message
)
=
0
;
virtual
void
OnChannelConnected
(
base
:
:
ProcessId
peer_pid
)
{
}
virtual
void
OnChannelError
(
)
{
}
}
;
enum
Mode
{
MODE_SERVER
MODE_CLIENT
}
;
enum
{
#
ifndef
FUZZING
kMaximumMessageSize
=
256
*
1024
*
1024
#
else
kMaximumMessageSize
=
1792
*
1024
*
1024
#
endif
kReadBufferSize
=
4
*
1024
}
;
static
already_AddRefed
<
Channel
>
Create
(
ChannelHandle
pipe
Mode
mode
base
:
:
ProcessId
other_pid
)
;
Channel
(
const
Channel
&
)
=
delete
;
Channel
&
operator
=
(
const
Channel
&
)
=
delete
;
virtual
bool
Connect
(
Listener
*
listener
)
MOZ_EXCLUDES
(
SendMutex
(
)
)
=
0
;
virtual
void
Close
(
)
MOZ_EXCLUDES
(
SendMutex
(
)
)
=
0
;
virtual
bool
Send
(
mozilla
:
:
UniquePtr
<
Message
>
message
)
MOZ_EXCLUDES
(
SendMutex
(
)
)
=
0
;
virtual
void
SetOtherPid
(
base
:
:
ProcessId
other_pid
)
MOZ_EXCLUDES
(
SendMutex
(
)
)
=
0
;
#
if
defined
(
XP_DARWIN
)
virtual
void
SetOtherMachTask
(
task_t
task
)
MOZ_EXCLUDES
(
SendMutex
(
)
)
=
0
;
virtual
void
StartAcceptingMachPorts
(
Mode
mode
)
MOZ_EXCLUDES
(
SendMutex
(
)
)
=
0
;
#
elif
defined
(
XP_WIN
)
virtual
void
StartAcceptingHandles
(
Mode
mode
)
MOZ_EXCLUDES
(
SendMutex
(
)
)
=
0
;
#
endif
static
bool
CreateRawPipe
(
ChannelHandle
*
server
ChannelHandle
*
client
)
;
protected
:
Channel
(
)
;
virtual
~
Channel
(
)
;
const
mozilla
:
:
EventTargetCapability
<
nsISerialEventTarget
>
&
IOThread
(
)
const
MOZ_RETURN_CAPABILITY
(
chan_cap_
.
Target
(
)
)
{
return
chan_cap_
.
Target
(
)
;
}
mozilla
:
:
Mutex
&
SendMutex
(
)
MOZ_RETURN_CAPABILITY
(
chan_cap_
.
Lock
(
)
)
{
return
chan_cap_
.
Lock
(
)
;
}
mozilla
:
:
EventTargetAndLockCapability
<
nsISerialEventTarget
mozilla
:
:
Mutex
>
chan_cap_
;
enum
{
#
if
defined
(
XP_DARWIN
)
RECEIVED_FDS_MESSAGE_TYPE
=
kuint16max
-
1
#
endif
HELLO_MESSAGE_TYPE
=
kuint16max
}
;
}
;
}
#
endif
