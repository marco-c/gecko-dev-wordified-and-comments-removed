#
ifndef
CHROME_COMMON_IPC_CHANNEL_H_
#
define
CHROME_COMMON_IPC_CHANNEL_H_
#
include
<
cstdint
>
#
include
<
queue
>
#
include
"
base
/
basictypes
.
h
"
#
include
"
build
/
build_config
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
chrome
/
common
/
ipc_message
.
h
"
#
ifdef
OS_WIN
#
include
<
string
>
#
endif
namespace
IPC
{
class
Message
;
class
Channel
{
friend
class
ChannelTest
;
public
:
#
ifdef
OS_WIN
typedef
std
:
:
wstring
ChannelId
;
#
else
struct
ChannelId
{
}
;
#
endif
class
Listener
:
public
mozilla
:
:
SupportsWeakPtr
{
public
:
virtual
~
Listener
(
)
=
default
;
virtual
void
OnMessageReceived
(
Message
&
&
message
)
=
0
;
virtual
void
OnChannelConnected
(
int32_t
peer_pid
)
{
}
virtual
void
OnChannelError
(
)
{
}
virtual
void
GetQueuedMessages
(
std
:
:
queue
<
Message
>
&
queue
)
{
}
}
;
enum
Mode
{
MODE_SERVER
MODE_CLIENT
}
;
enum
{
#
ifndef
FUZZING
kMaximumMessageSize
=
256
*
1024
*
1024
#
else
kMaximumMessageSize
=
4
*
1024
*
1024
*
1024
#
endif
kReadBufferSize
=
4
*
1024
kMaxCopySize
=
32
*
1024
}
;
Channel
(
const
ChannelId
&
channel_id
Mode
mode
Listener
*
listener
)
;
#
if
defined
(
OS_POSIX
)
Channel
(
int
fd
Mode
mode
Listener
*
listener
)
;
#
elif
defined
(
OS_WIN
)
Channel
(
const
ChannelId
&
channel_id
void
*
server_pipe
Mode
mode
Listener
*
listener
)
;
#
endif
~
Channel
(
)
;
bool
Connect
(
)
;
void
Close
(
)
;
Listener
*
set_listener
(
Listener
*
listener
)
;
bool
Send
(
mozilla
:
:
UniquePtr
<
Message
>
message
)
;
int32_t
OtherPid
(
)
const
;
bool
Unsound_IsClosed
(
)
const
;
uint32_t
Unsound_NumQueuedMessages
(
)
const
;
#
if
defined
(
OS_POSIX
)
void
GetClientFileDescriptorMapping
(
int
*
src_fd
int
*
dest_fd
)
const
;
int
GetFileDescriptor
(
)
const
;
void
ResetFileDescriptor
(
int
fd
)
;
void
CloseClientFileDescriptor
(
)
;
#
elif
defined
(
OS_WIN
)
void
*
GetServerPipeHandle
(
)
const
;
void
StartAcceptingHandles
(
Mode
mode
)
;
#
endif
static
ChannelId
GenerateVerifiedChannelID
(
)
;
static
ChannelId
ChannelIDForCurrentProcess
(
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
static
void
SetClientChannelFd
(
int
fd
)
;
#
endif
private
:
class
ChannelImpl
;
ChannelImpl
*
channel_impl_
;
enum
{
#
if
defined
(
OS_MACOSX
)
RECEIVED_FDS_MESSAGE_TYPE
=
kuint16max
-
1
#
endif
HELLO_MESSAGE_TYPE
=
kuint16max
}
;
}
;
}
#
endif
