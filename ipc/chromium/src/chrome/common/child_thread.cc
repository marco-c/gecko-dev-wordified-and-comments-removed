#
include
"
chrome
/
common
/
child_thread
.
h
"
#
include
"
chrome
/
common
/
child_process
.
h
"
#
include
"
mozilla
/
ipc
/
NodeController
.
h
"
ChildThread
:
:
ChildThread
(
Thread
:
:
Options
options
IPC
:
:
Channel
:
:
ChannelHandle
client_handle
base
:
:
ProcessId
parent_pid
)
:
Thread
(
"
IPC
I
/
O
Child
"
)
owner_loop_
(
MessageLoop
:
:
current
(
)
)
options_
(
options
)
client_handle_
(
std
:
:
move
(
client_handle
)
)
parent_pid_
(
parent_pid
)
{
DCHECK
(
owner_loop_
)
;
}
ChildThread
:
:
~
ChildThread
(
)
=
default
;
bool
ChildThread
:
:
Run
(
)
{
bool
r
=
StartWithOptions
(
options_
)
;
return
r
;
}
ChildThread
*
ChildThread
:
:
current
(
)
{
return
ChildProcess
:
:
current
(
)
-
>
child_thread
(
)
;
}
void
ChildThread
:
:
Init
(
)
{
auto
channel
=
mozilla
:
:
MakeUnique
<
IPC
:
:
Channel
>
(
std
:
:
move
(
client_handle_
)
IPC
:
:
Channel
:
:
MODE_CLIENT
parent_pid_
)
;
#
if
defined
(
XP_WIN
)
channel
-
>
StartAcceptingHandles
(
IPC
:
:
Channel
:
:
MODE_CLIENT
)
;
#
elif
defined
(
XP_DARWIN
)
channel
-
>
StartAcceptingMachPorts
(
IPC
:
:
Channel
:
:
MODE_CLIENT
)
;
#
endif
initial_port_
=
mozilla
:
:
ipc
:
:
NodeController
:
:
InitChildProcess
(
std
:
:
move
(
channel
)
parent_pid_
)
;
}
void
ChildThread
:
:
CleanUp
(
)
{
mozilla
:
:
ipc
:
:
NodeController
:
:
CleanUp
(
)
;
}
