#
ifndef
CHROME_COMMON_IPC_MESSAGE_UTILS_H_
#
define
CHROME_COMMON_IPC_MESSAGE_UTILS_H_
#
include
<
string
>
#
include
<
vector
>
#
include
<
map
>
#
include
"
base
/
file_path
.
h
"
#
include
"
base
/
string_util
.
h
"
#
include
"
base
/
string16
.
h
"
#
include
"
base
/
time
.
h
"
#
if
defined
(
OS_POSIX
)
#
include
"
chrome
/
common
/
file_descriptor_set_posix
.
h
"
#
endif
#
include
"
chrome
/
common
/
ipc_message
.
h
"
template
<
typename
T
>
class
RefPtr
;
template
<
typename
T
>
class
nsCOMPtr
;
namespace
IPC
{
class
MessageIterator
{
public
:
explicit
MessageIterator
(
const
Message
&
m
)
:
msg_
(
m
)
iter_
(
m
)
{
}
int
NextInt
(
)
const
{
int
val
;
if
(
!
msg_
.
ReadInt
(
&
iter_
&
val
)
)
NOTREACHED
(
)
;
return
val
;
}
intptr_t
NextIntPtr
(
)
const
{
intptr_t
val
;
if
(
!
msg_
.
ReadIntPtr
(
&
iter_
&
val
)
)
NOTREACHED
(
)
;
return
val
;
}
const
std
:
:
string
NextString
(
)
const
{
std
:
:
string
val
;
if
(
!
msg_
.
ReadString
(
&
iter_
&
val
)
)
NOTREACHED
(
)
;
return
val
;
}
const
std
:
:
wstring
NextWString
(
)
const
{
std
:
:
wstring
val
;
if
(
!
msg_
.
ReadWString
(
&
iter_
&
val
)
)
NOTREACHED
(
)
;
return
val
;
}
private
:
const
Message
&
msg_
;
mutable
PickleIterator
iter_
;
}
;
template
<
class
P
>
struct
ParamTraits
;
namespace
detail
{
template
<
typename
T
>
struct
StripPointers
{
typedef
T
Type
;
}
;
template
<
typename
T
>
struct
StripPointers
<
T
*
>
{
typedef
T
Type
;
}
;
template
<
typename
T
>
struct
StripPointers
<
RefPtr
<
T
>
>
{
typedef
T
Type
;
}
;
template
<
typename
T
>
struct
StripPointers
<
nsCOMPtr
<
T
>
>
{
typedef
T
Type
;
}
;
}
template
<
typename
T
>
struct
ParamTraitsSelector
:
public
detail
:
:
StripPointers
<
typename
mozilla
:
:
Decay
<
T
>
:
:
Type
>
{
}
;
template
<
typename
P
>
static
inline
void
WriteParam
(
Message
*
m
P
&
&
p
)
{
ParamTraits
<
typename
ParamTraitsSelector
<
P
>
:
:
Type
>
:
:
Write
(
m
std
:
:
forward
<
P
>
(
p
)
)
;
}
template
<
typename
P
>
static
inline
bool
WARN_UNUSED_RESULT
ReadParam
(
const
Message
*
m
PickleIterator
*
iter
P
*
p
)
{
return
ParamTraits
<
typename
ParamTraitsSelector
<
P
>
:
:
Type
>
:
:
Read
(
m
iter
p
)
;
}
template
<
typename
P
>
static
inline
void
LogParam
(
const
P
&
p
std
:
:
wstring
*
l
)
{
ParamTraits
<
typename
ParamTraitsSelector
<
P
>
:
:
Type
>
:
:
Log
(
p
l
)
;
}
template
<
class
P
>
struct
ParamTraitsFundamental
{
}
;
template
<
>
struct
ParamTraitsFundamental
<
bool
>
{
typedef
bool
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteBool
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadBool
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
p
?
L
"
true
"
:
L
"
false
"
)
;
}
}
;
template
<
>
struct
ParamTraitsFundamental
<
int
>
{
typedef
int
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteInt
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadInt
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
d
"
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsFundamental
<
long
>
{
typedef
long
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteLong
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadLong
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
l
"
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsFundamental
<
unsigned
long
>
{
typedef
unsigned
long
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteULong
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadULong
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
ul
"
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsFundamental
<
long
long
>
{
typedef
long
long
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteBytes
(
&
p
sizeof
(
param_type
)
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadBytesInto
(
iter
r
sizeof
(
*
r
)
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
ll
"
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsFundamental
<
unsigned
long
long
>
{
typedef
unsigned
long
long
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteBytes
(
&
p
sizeof
(
param_type
)
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadBytesInto
(
iter
r
sizeof
(
*
r
)
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
ull
"
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsFundamental
<
double
>
{
typedef
double
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteDouble
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadDouble
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
e
"
p
)
)
;
}
}
;
template
<
class
P
>
struct
ParamTraitsFixed
:
ParamTraitsFundamental
<
P
>
{
}
;
template
<
>
struct
ParamTraitsFixed
<
int16_t
>
{
typedef
int16_t
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteInt16
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadInt16
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
hd
"
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsFixed
<
uint16_t
>
{
typedef
uint16_t
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteUInt16
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadUInt16
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
hu
"
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsFixed
<
uint32_t
>
{
typedef
uint32_t
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteUInt32
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadUInt32
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
u
"
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsFixed
<
int64_t
>
{
typedef
int64_t
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteInt64
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadInt64
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
"
PRId64L
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsFixed
<
uint64_t
>
{
typedef
uint64_t
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteInt64
(
static_cast
<
int64_t
>
(
p
)
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadInt64
(
iter
reinterpret_cast
<
int64_t
*
>
(
r
)
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
"
PRIu64L
p
)
)
;
}
}
;
template
<
class
P
>
struct
ParamTraitsStd
:
ParamTraitsFixed
<
P
>
{
}
;
template
<
>
struct
ParamTraitsStd
<
std
:
:
string
>
{
typedef
std
:
:
string
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteString
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadString
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
UTF8ToWide
(
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsStd
<
std
:
:
wstring
>
{
typedef
std
:
:
wstring
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteWString
(
p
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadWString
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
p
)
;
}
}
;
template
<
class
K
class
V
>
struct
ParamTraitsStd
<
std
:
:
map
<
K
V
>
>
{
typedef
std
:
:
map
<
K
V
>
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
WriteParam
(
m
static_cast
<
int
>
(
p
.
size
(
)
)
)
;
typename
param_type
:
:
const_iterator
iter
;
for
(
iter
=
p
.
begin
(
)
;
iter
!
=
p
.
end
(
)
;
+
+
iter
)
{
WriteParam
(
m
iter
-
>
first
)
;
WriteParam
(
m
iter
-
>
second
)
;
}
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
int
size
;
if
(
!
ReadParam
(
m
iter
&
size
)
|
|
size
<
0
)
return
false
;
for
(
int
i
=
0
;
i
<
size
;
+
+
i
)
{
K
k
;
if
(
!
ReadParam
(
m
iter
&
k
)
)
return
false
;
V
&
value
=
(
*
r
)
[
k
]
;
if
(
!
ReadParam
(
m
iter
&
value
)
)
return
false
;
}
return
true
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
L
"
<
std
:
:
map
>
"
)
;
}
}
;
template
<
class
P
>
struct
ParamTraitsWindows
:
ParamTraitsStd
<
P
>
{
}
;
#
if
defined
(
OS_WIN
)
template
<
>
struct
ParamTraitsWindows
<
detail
:
:
StripPointers
<
HANDLE
>
:
:
Type
>
{
static_assert
(
sizeof
(
HANDLE
)
=
=
sizeof
(
intptr_t
)
"
Wrong
size
for
HANDLE
?
"
)
;
static
void
Write
(
Message
*
m
HANDLE
p
)
{
m
-
>
WriteIntPtr
(
reinterpret_cast
<
intptr_t
>
(
p
)
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
HANDLE
*
r
)
{
return
m
-
>
ReadIntPtr
(
iter
reinterpret_cast
<
intptr_t
*
>
(
r
)
)
;
}
static
void
Log
(
const
HANDLE
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
0x
%
X
"
p
)
)
;
}
}
;
template
<
>
struct
ParamTraitsWindows
<
detail
:
:
StripPointers
<
HWND
>
:
:
Type
>
{
static_assert
(
sizeof
(
HWND
)
=
=
sizeof
(
intptr_t
)
"
Wrong
size
for
HWND
?
"
)
;
static
void
Write
(
Message
*
m
HWND
p
)
{
m
-
>
WriteIntPtr
(
reinterpret_cast
<
intptr_t
>
(
p
)
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
HWND
*
r
)
{
return
m
-
>
ReadIntPtr
(
iter
reinterpret_cast
<
intptr_t
*
>
(
r
)
)
;
}
static
void
Log
(
const
HWND
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
0x
%
X
"
p
)
)
;
}
}
;
#
endif
template
<
class
P
>
struct
ParamTraitsIPC
:
ParamTraitsWindows
<
P
>
{
}
;
#
if
defined
(
OS_POSIX
)
template
<
>
struct
ParamTraitsIPC
<
base
:
:
FileDescriptor
>
{
typedef
base
:
:
FileDescriptor
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
const
bool
valid
=
p
.
fd
>
=
0
;
WriteParam
(
m
valid
)
;
if
(
valid
)
{
if
(
!
m
-
>
WriteFileDescriptor
(
p
)
)
{
NOTREACHED
(
)
<
<
"
Too
many
file
descriptors
for
one
message
!
"
;
}
}
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
bool
valid
;
if
(
!
ReadParam
(
m
iter
&
valid
)
)
return
false
;
if
(
!
valid
)
{
r
-
>
fd
=
-
1
;
r
-
>
auto_close
=
false
;
return
true
;
}
return
m
-
>
ReadFileDescriptor
(
iter
r
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
if
(
p
.
auto_close
)
{
l
-
>
append
(
StringPrintf
(
L
"
FD
(
%
d
auto
-
close
)
"
p
.
fd
)
)
;
}
else
{
l
-
>
append
(
StringPrintf
(
L
"
FD
(
%
d
)
"
p
.
fd
)
)
;
}
}
}
;
#
endif
template
<
class
P
>
struct
ParamTraitsMozilla
:
ParamTraitsIPC
<
P
>
{
}
;
template
<
>
struct
ParamTraitsMozilla
<
nsresult
>
{
typedef
nsresult
param_type
;
static
void
Write
(
Message
*
m
const
param_type
&
p
)
{
m
-
>
WriteUInt32
(
static_cast
<
uint32_t
>
(
p
)
)
;
}
static
bool
Read
(
const
Message
*
m
PickleIterator
*
iter
param_type
*
r
)
{
return
m
-
>
ReadUInt32
(
iter
reinterpret_cast
<
uint32_t
*
>
(
r
)
)
;
}
static
void
Log
(
const
param_type
&
p
std
:
:
wstring
*
l
)
{
l
-
>
append
(
StringPrintf
(
L
"
%
u
"
static_cast
<
uint32_t
>
(
p
)
)
)
;
}
}
;
template
<
class
P
>
struct
ParamTraits
:
ParamTraitsMozilla
<
P
>
{
}
;
}
#
endif
