#
ifndef
CHROME_COMMON_IPC_CHANNEL_CAPABILITY_H_
#
define
CHROME_COMMON_IPC_CHANNEL_CAPABILITY_H_
#
include
"
mozilla
/
ThreadSafety
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
EventTargetCapability
.
h
"
#
include
"
nsISerialEventTarget
.
h
"
namespace
IPC
{
class
MOZ_CAPABILITY
(
"
channel
cap
"
)
ChannelCapability
{
public
:
using
Mutex
=
mozilla
:
:
Mutex
;
using
Thread
=
mozilla
:
:
EventTargetCapability
<
nsISerialEventTarget
>
;
ChannelCapability
(
const
char
*
mutex_name
nsISerialEventTarget
*
io_thread
)
:
send_mutex_
(
mutex_name
)
io_thread_
(
io_thread
)
{
}
const
Thread
&
IOThread
(
)
const
MOZ_RETURN_CAPABILITY
(
io_thread_
)
{
return
io_thread_
;
}
Mutex
&
SendMutex
(
)
MOZ_RETURN_CAPABILITY
(
send_mutex_
)
{
return
send_mutex_
;
}
void
NoteOnIOThread
(
)
const
MOZ_REQUIRES
(
io_thread_
)
MOZ_ASSERT_SHARED_CAPABILITY
(
this
)
{
}
void
NoteSendMutex
(
)
const
MOZ_REQUIRES
(
send_mutex_
)
MOZ_ASSERT_SHARED_CAPABILITY
(
this
)
{
}
void
NoteExclusiveAccess
(
)
const
MOZ_REQUIRES
(
io_thread_
send_mutex_
)
MOZ_ASSERT_CAPABILITY
(
this
)
{
}
private
:
mozilla
:
:
Mutex
send_mutex_
;
mozilla
:
:
EventTargetCapability
<
nsISerialEventTarget
>
io_thread_
;
}
;
}
#
endif
