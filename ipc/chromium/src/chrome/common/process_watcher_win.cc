#
include
"
chrome
/
common
/
process_watcher
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
base
/
object_watcher
.
h
"
#
include
"
base
/
sys_info
.
h
"
#
include
"
chrome
/
common
/
result_codes
.
h
"
static
const
int
kWaitInterval
=
2000
;
namespace
{
class
TimerExpiredTask
:
public
mozilla
:
:
Runnable
public
base
:
:
ObjectWatcher
:
:
Delegate
{
public
:
explicit
TimerExpiredTask
(
base
:
:
ProcessHandle
process
)
:
process_
(
process
)
{
watcher_
.
StartWatching
(
process_
this
)
;
}
virtual
~
TimerExpiredTask
(
)
{
if
(
process_
)
{
KillProcess
(
)
;
DCHECK
(
!
process_
)
<
<
"
Make
sure
to
close
the
handle
.
"
;
}
}
NS_IMETHOD
Run
(
)
override
{
if
(
process_
)
KillProcess
(
)
;
return
NS_OK
;
}
virtual
void
OnObjectSignaled
(
HANDLE
object
)
{
watcher_
.
StopWatching
(
)
;
base
:
:
CloseProcessHandle
(
process_
)
;
process_
=
NULL
;
}
private
:
void
KillProcess
(
)
{
TerminateProcess
(
process_
ResultCodes
:
:
HUNG
)
;
OnObjectSignaled
(
process_
)
;
}
base
:
:
ProcessHandle
process_
;
base
:
:
ObjectWatcher
watcher_
;
DISALLOW_EVIL_CONSTRUCTORS
(
TimerExpiredTask
)
;
}
;
}
void
ProcessWatcher
:
:
EnsureProcessTerminated
(
base
:
:
ProcessHandle
process
bool
force
)
{
DCHECK
(
process
!
=
GetCurrentProcess
(
)
)
;
if
(
!
force
)
{
WaitForSingleObject
(
process
INFINITE
)
;
base
:
:
CloseProcessHandle
(
process
)
;
return
;
}
if
(
WaitForSingleObject
(
process
0
)
=
=
WAIT_OBJECT_0
)
{
base
:
:
CloseProcessHandle
(
process
)
;
return
;
}
RefPtr
<
mozilla
:
:
Runnable
>
task
=
new
TimerExpiredTask
(
process
)
;
MessageLoop
:
:
current
(
)
-
>
PostDelayedTask
(
task
.
forget
(
)
kWaitInterval
)
;
}
