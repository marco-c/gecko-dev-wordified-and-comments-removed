#
include
<
inttypes
.
h
>
#
include
<
stdio
.
h
>
#
include
<
map
>
#
include
<
utility
>
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
waitable_event
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
base
/
string_util
.
h
"
#
include
"
mojo
/
core
/
ports
/
event
.
h
"
#
include
"
mojo
/
core
/
ports
/
node
.
h
"
#
include
"
mojo
/
core
/
ports
/
node_delegate
.
h
"
#
include
"
mojo
/
core
/
ports
/
port_locker
.
h
"
#
include
"
mojo
/
core
/
ports
/
user_message
.
h
"
#
include
"
testing
/
gtest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
namespace
mojo
{
namespace
core
{
namespace
ports
{
namespace
test
{
namespace
{
using
ScopedMessage
=
mozilla
:
:
UniquePtr
<
UserMessageEvent
>
;
class
TestMessage
:
public
UserMessage
{
public
:
static
const
TypeInfo
kUserMessageTypeInfo
;
explicit
TestMessage
(
const
std
:
:
string
&
payload
)
:
UserMessage
(
&
kUserMessageTypeInfo
)
payload_
(
payload
)
{
}
~
TestMessage
(
)
override
=
default
;
const
std
:
:
string
&
payload
(
)
const
{
return
payload_
;
}
private
:
std
:
:
string
payload_
;
}
;
const
UserMessage
:
:
TypeInfo
TestMessage
:
:
kUserMessageTypeInfo
=
{
}
;
ScopedMessage
NewUserMessageEvent
(
const
std
:
:
string
&
payload
size_t
num_ports
)
{
auto
event
=
mozilla
:
:
MakeUnique
<
UserMessageEvent
>
(
num_ports
)
;
event
-
>
AttachMessage
(
mozilla
:
:
MakeUnique
<
TestMessage
>
(
payload
)
)
;
return
event
;
}
bool
MessageEquals
(
const
ScopedMessage
&
message
const
std
:
:
string
&
s
)
{
return
message
-
>
GetMessage
<
TestMessage
>
(
)
-
>
payload
(
)
=
=
s
;
}
class
TestNode
;
class
MessageRouter
{
public
:
virtual
~
MessageRouter
(
)
=
default
;
virtual
void
ForwardEvent
(
TestNode
*
from_node
const
NodeName
&
node_name
ScopedEvent
event
)
=
0
;
virtual
void
BroadcastEvent
(
TestNode
*
from_node
ScopedEvent
event
)
=
0
;
}
;
class
TestNode
:
public
NodeDelegate
{
public
:
explicit
TestNode
(
uint64_t
id
)
:
node_name_
(
id
1
)
node_
(
node_name_
this
)
node_thread_
(
StringPrintf
(
"
Node
%
"
PRIu64
"
thread
"
id
)
.
c_str
(
)
)
events_available_event_
(
false
false
)
idle_event_
(
true
true
)
{
}
~
TestNode
(
)
override
{
StopWhenIdle
(
)
;
node_thread_
.
Stop
(
)
;
}
const
NodeName
&
name
(
)
const
{
return
node_name_
;
}
Node
&
node
(
)
{
return
node_
;
}
base
:
:
WaitableEvent
&
idle_event
(
)
{
return
idle_event_
;
}
bool
IsIdle
(
)
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
return
started_
&
&
!
dispatching_
&
&
(
incoming_events_
.
empty
(
)
|
|
(
block_on_event_
&
&
blocked_
)
)
;
}
void
BlockOnEvent
(
Event
:
:
Type
type
)
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
blocked_event_type_
=
type
;
block_on_event_
=
true
;
}
void
Unblock
(
)
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
block_on_event_
=
false
;
events_available_event_
.
Signal
(
)
;
}
void
Start
(
MessageRouter
*
router
)
{
router_
=
router
;
node_thread_
.
Start
(
)
;
node_thread_
.
message_loop
(
)
-
>
PostTask
(
mozilla
:
:
NewNonOwningRunnableMethod
(
"
TestNode
:
:
ProcessEvents
"
this
&
TestNode
:
:
ProcessEvents
)
)
;
}
void
StopWhenIdle
(
)
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
should_quit_
=
true
;
events_available_event_
.
Signal
(
)
;
}
void
WakeUp
(
)
{
events_available_event_
.
Signal
(
)
;
}
int
SendStringMessage
(
const
PortRef
&
port
const
std
:
:
string
&
s
)
{
return
node_
.
SendUserMessage
(
port
NewUserMessageEvent
(
s
0
)
)
;
}
int
SendMultipleMessages
(
const
PortRef
&
port
size_t
num_messages
)
{
for
(
size_t
i
=
0
;
i
<
num_messages
;
+
+
i
)
{
int
result
=
SendStringMessage
(
port
"
"
)
;
if
(
result
!
=
OK
)
{
return
result
;
}
}
return
OK
;
}
int
SendStringMessageWithPort
(
const
PortRef
&
port
const
std
:
:
string
&
s
const
PortName
&
sent_port_name
)
{
auto
event
=
NewUserMessageEvent
(
s
1
)
;
event
-
>
ports
(
)
[
0
]
=
sent_port_name
;
return
node_
.
SendUserMessage
(
port
std
:
:
move
(
event
)
)
;
}
int
SendStringMessageWithPort
(
const
PortRef
&
port
const
std
:
:
string
&
s
const
PortRef
&
sent_port
)
{
return
SendStringMessageWithPort
(
port
s
sent_port
.
name
(
)
)
;
}
void
set_drop_messages
(
bool
value
)
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
drop_messages_
=
value
;
}
void
set_save_messages
(
bool
value
)
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
save_messages_
=
value
;
}
bool
ReadMessage
(
const
PortRef
&
port
ScopedMessage
*
message
)
{
return
node_
.
GetMessage
(
port
message
nullptr
)
=
=
OK
&
&
*
message
;
}
bool
ReadMultipleMessages
(
const
PortRef
&
port
size_t
num_messages
)
{
for
(
size_t
i
=
0
;
i
<
num_messages
;
+
+
i
)
{
ScopedMessage
message
;
if
(
!
ReadMessage
(
port
&
message
)
)
{
return
false
;
}
}
return
true
;
}
bool
GetSavedMessage
(
ScopedMessage
*
message
)
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
if
(
saved_messages_
.
empty
(
)
)
{
message
-
>
reset
(
)
;
return
false
;
}
std
:
:
swap
(
*
message
saved_messages_
.
front
(
)
)
;
saved_messages_
.
pop
(
)
;
return
true
;
}
void
EnqueueEvent
(
const
NodeName
&
from_node
ScopedEvent
event
)
{
idle_event_
.
Reset
(
)
;
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
incoming_events_
.
push
(
{
from_node
std
:
:
move
(
event
)
}
)
;
events_available_event_
.
Signal
(
)
;
}
void
ForwardEvent
(
const
NodeName
&
node_name
ScopedEvent
event
)
override
{
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
if
(
drop_messages_
)
{
DVLOG
(
1
)
<
<
"
Dropping
ForwardMessage
from
node
"
<
<
node_name_
<
<
"
to
"
<
<
node_name
;
mozilla
:
:
MutexAutoUnlock
unlock
(
lock_
)
;
ClosePortsInEvent
(
event
.
get
(
)
)
;
return
;
}
}
DCHECK
(
router_
)
;
DVLOG
(
1
)
<
<
"
ForwardEvent
from
node
"
<
<
node_name_
<
<
"
to
"
<
<
node_name
;
router_
-
>
ForwardEvent
(
this
node_name
std
:
:
move
(
event
)
)
;
}
void
BroadcastEvent
(
ScopedEvent
event
)
override
{
router_
-
>
BroadcastEvent
(
this
std
:
:
move
(
event
)
)
;
}
void
PortStatusChanged
(
const
PortRef
&
port
)
override
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
if
(
!
save_messages_
)
{
return
;
}
for
(
;
;
)
{
ScopedMessage
message
;
{
mozilla
:
:
MutexAutoUnlock
unlock
(
lock_
)
;
if
(
!
ReadMessage
(
port
&
message
)
)
{
break
;
}
}
saved_messages_
.
emplace
(
std
:
:
move
(
message
)
)
;
}
}
void
ClosePortsInEvent
(
Event
*
event
)
{
if
(
event
-
>
type
(
)
!
=
Event
:
:
Type
:
:
kUserMessage
)
{
return
;
}
UserMessageEvent
*
message_event
=
static_cast
<
UserMessageEvent
*
>
(
event
)
;
for
(
size_t
i
=
0
;
i
<
message_event
-
>
num_ports
(
)
;
+
+
i
)
{
PortRef
port
;
ASSERT_EQ
(
OK
node_
.
GetPort
(
message_event
-
>
ports
(
)
[
i
]
&
port
)
)
;
EXPECT_EQ
(
OK
node_
.
ClosePort
(
port
)
)
;
}
}
uint64_t
GetUnacknowledgedMessageCount
(
const
PortRef
&
port_ref
)
{
PortStatus
status
{
}
;
if
(
node_
.
GetStatus
(
port_ref
&
status
)
!
=
OK
)
{
return
0
;
}
return
status
.
unacknowledged_message_count
;
}
void
AllowPortMerge
(
const
PortRef
&
port_ref
)
{
SinglePortLocker
locker
(
&
port_ref
)
;
locker
.
port
(
)
-
>
pending_merge_peer
=
true
;
}
private
:
void
ProcessEvents
(
)
{
for
(
;
;
)
{
events_available_event_
.
Wait
(
)
;
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
if
(
should_quit_
)
{
return
;
}
dispatching_
=
true
;
while
(
!
incoming_events_
.
empty
(
)
)
{
if
(
block_on_event_
&
&
incoming_events_
.
front
(
)
.
second
-
>
type
(
)
=
=
blocked_event_type_
)
{
blocked_
=
true
;
break
;
}
blocked_
=
false
;
auto
node_event_pair
=
std
:
:
move
(
incoming_events_
.
front
(
)
)
;
incoming_events_
.
pop
(
)
;
mozilla
:
:
MutexAutoUnlock
unlock
(
lock_
)
;
node_
.
AcceptEvent
(
node_event_pair
.
first
std
:
:
move
(
node_event_pair
.
second
)
)
;
}
dispatching_
=
false
;
started_
=
true
;
idle_event_
.
Signal
(
)
;
}
;
}
const
NodeName
node_name_
;
Node
node_
;
MessageRouter
*
router_
=
nullptr
;
base
:
:
Thread
node_thread_
;
base
:
:
WaitableEvent
events_available_event_
;
base
:
:
WaitableEvent
idle_event_
;
mozilla
:
:
Mutex
lock_
MOZ_UNANNOTATED
{
"
TestNode
"
}
;
bool
started_
=
false
;
bool
dispatching_
=
false
;
bool
should_quit_
=
false
;
bool
drop_messages_
=
false
;
bool
save_messages_
=
false
;
bool
blocked_
=
false
;
bool
block_on_event_
=
false
;
Event
:
:
Type
blocked_event_type_
{
}
;
std
:
:
queue
<
std
:
:
pair
<
NodeName
ScopedEvent
>
>
incoming_events_
;
std
:
:
queue
<
ScopedMessage
>
saved_messages_
;
}
;
class
PortsTest
:
public
testing
:
:
Test
public
MessageRouter
{
public
:
void
AddNode
(
TestNode
*
node
)
{
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
nodes_
[
node
-
>
name
(
)
]
=
node
;
}
node
-
>
Start
(
this
)
;
}
void
RemoveNode
(
TestNode
*
node
)
{
{
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
nodes_
.
erase
(
node
-
>
name
(
)
)
;
}
for
(
const
auto
&
entry
:
nodes_
)
{
entry
.
second
-
>
node
(
)
.
LostConnectionToNode
(
node
-
>
name
(
)
)
;
}
}
void
WaitForIdle
(
)
{
for
(
;
;
)
{
mozilla
:
:
MutexAutoLock
global_lock
(
global_lock_
)
;
bool
all_nodes_idle
=
true
;
for
(
const
auto
&
entry
:
nodes_
)
{
if
(
!
entry
.
second
-
>
IsIdle
(
)
)
{
all_nodes_idle
=
false
;
}
entry
.
second
-
>
WakeUp
(
)
;
}
if
(
all_nodes_idle
)
{
return
;
}
mozilla
:
:
MutexAutoUnlock
global_unlock
(
global_lock_
)
;
std
:
:
vector
<
base
:
:
WaitableEvent
*
>
events
;
for
(
const
auto
&
entry
:
nodes_
)
{
events
.
push_back
(
&
entry
.
second
-
>
idle_event
(
)
)
;
}
base
:
:
WaitableEvent
:
:
WaitMany
(
events
.
data
(
)
events
.
size
(
)
)
;
}
}
void
CreatePortPair
(
TestNode
*
node0
PortRef
*
port0
TestNode
*
node1
PortRef
*
port1
)
{
if
(
node0
=
=
node1
)
{
EXPECT_EQ
(
OK
node0
-
>
node
(
)
.
CreatePortPair
(
port0
port1
)
)
;
}
else
{
EXPECT_EQ
(
OK
node0
-
>
node
(
)
.
CreateUninitializedPort
(
port0
)
)
;
EXPECT_EQ
(
OK
node1
-
>
node
(
)
.
CreateUninitializedPort
(
port1
)
)
;
EXPECT_EQ
(
OK
node0
-
>
node
(
)
.
InitializePort
(
*
port0
node1
-
>
name
(
)
port1
-
>
name
(
)
node1
-
>
name
(
)
port1
-
>
name
(
)
)
)
;
EXPECT_EQ
(
OK
node1
-
>
node
(
)
.
InitializePort
(
*
port1
node0
-
>
name
(
)
port0
-
>
name
(
)
node0
-
>
name
(
)
port0
-
>
name
(
)
)
)
;
}
}
private
:
void
ForwardEvent
(
TestNode
*
from_node
const
NodeName
&
node_name
ScopedEvent
event
)
override
{
mozilla
:
:
MutexAutoLock
global_lock
(
global_lock_
)
;
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
if
(
nodes_
.
find
(
from_node
-
>
name
(
)
)
=
=
nodes_
.
end
(
)
)
{
from_node
-
>
ClosePortsInEvent
(
event
.
get
(
)
)
;
return
;
}
auto
it
=
nodes_
.
find
(
node_name
)
;
if
(
it
=
=
nodes_
.
end
(
)
)
{
DVLOG
(
1
)
<
<
"
Node
not
found
:
"
<
<
node_name
;
return
;
}
size_t
buf_size
=
event
-
>
GetSerializedSize
(
)
;
mozilla
:
:
UniquePtr
<
char
[
]
>
buf
(
new
char
[
buf_size
]
)
;
event
-
>
Serialize
(
buf
.
get
(
)
)
;
ScopedEvent
copy
=
Event
:
:
Deserialize
(
buf
.
get
(
)
buf_size
)
;
ASSERT_TRUE
(
copy
)
;
if
(
event
-
>
type
(
)
=
=
Event
:
:
Type
:
:
kUserMessage
)
{
UserMessageEvent
*
message_event
=
static_cast
<
UserMessageEvent
*
>
(
event
.
get
(
)
)
;
UserMessageEvent
*
message_copy
=
static_cast
<
UserMessageEvent
*
>
(
copy
.
get
(
)
)
;
message_copy
-
>
AttachMessage
(
mozilla
:
:
MakeUnique
<
TestMessage
>
(
message_event
-
>
GetMessage
<
TestMessage
>
(
)
-
>
payload
(
)
)
)
;
}
it
-
>
second
-
>
EnqueueEvent
(
from_node
-
>
name
(
)
std
:
:
move
(
event
)
)
;
}
void
BroadcastEvent
(
TestNode
*
from_node
ScopedEvent
event
)
override
{
mozilla
:
:
MutexAutoLock
global_lock
(
global_lock_
)
;
mozilla
:
:
MutexAutoLock
lock
(
lock_
)
;
if
(
nodes_
.
find
(
from_node
-
>
name
(
)
)
=
=
nodes_
.
end
(
)
)
{
return
;
}
for
(
const
auto
&
entry
:
nodes_
)
{
TestNode
*
node
=
entry
.
second
;
if
(
node
=
=
from_node
)
{
continue
;
}
node
-
>
EnqueueEvent
(
from_node
-
>
name
(
)
event
-
>
CloneForBroadcast
(
)
)
;
}
}
mozilla
:
:
Mutex
global_lock_
MOZ_UNANNOTATED
{
"
PortsTest
Global
Lock
"
}
;
mozilla
:
:
Mutex
lock_
MOZ_UNANNOTATED
{
"
PortsTest
Lock
"
}
;
std
:
:
map
<
NodeName
TestNode
*
>
nodes_
;
}
;
}
TEST_F
(
PortsTest
Basic1
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
x0
x1
;
CreatePortPair
(
&
node0
&
x0
&
node1
&
x1
)
;
PortRef
a0
a1
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
a0
&
a1
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x0
"
hello
"
a1
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
a0
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
x0
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
x1
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
Basic2
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
x0
x1
;
CreatePortPair
(
&
node0
&
x0
&
node1
&
x1
)
;
PortRef
b0
b1
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
b0
&
b1
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x0
"
hello
"
b1
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessage
(
b0
"
hello
again
"
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
b0
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
x0
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
x1
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
Basic3
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
x0
x1
;
CreatePortPair
(
&
node0
&
x0
&
node1
&
x1
)
;
PortRef
a0
a1
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
a0
&
a1
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x0
"
hello
"
a1
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessage
(
a0
"
hello
again
"
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x0
"
foo
"
a0
)
)
;
PortRef
b0
b1
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
b0
&
b1
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x0
"
bar
"
b1
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessage
(
b0
"
baz
"
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
b0
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
x0
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
x1
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
LostConnectionToNode1
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
node1
.
set_drop_messages
(
true
)
;
PortRef
x0
x1
;
CreatePortPair
(
&
node0
&
x0
&
node1
&
x1
)
;
PortRef
a0
a1
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
a0
&
a1
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x0
"
foo
"
a1
)
)
;
WaitForIdle
(
)
;
RemoveNode
(
&
node1
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
a0
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
x0
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
x1
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
LostConnectionToNode2
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
x0
x1
;
CreatePortPair
(
&
node0
&
x0
&
node1
&
x1
)
;
PortRef
a0
a1
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
a0
&
a1
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x0
"
take
a1
"
a1
)
)
;
WaitForIdle
(
)
;
node1
.
set_drop_messages
(
true
)
;
RemoveNode
(
&
node1
)
;
WaitForIdle
(
)
;
ScopedMessage
message
;
EXPECT_EQ
(
ERROR_PORT_PEER_CLOSED
node0
.
node
(
)
.
GetMessage
(
a0
&
message
nullptr
)
)
;
EXPECT_FALSE
(
message
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
a0
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
x0
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
GetMessage
(
x1
&
message
nullptr
)
)
;
EXPECT_TRUE
(
message
)
;
node1
.
ClosePortsInEvent
(
message
.
get
(
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
x1
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
LostConnectionToNodeWithSecondaryProxy
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
TestNode
node2
(
2
)
;
AddNode
(
&
node2
)
;
PortRef
A
B
C
D
;
CreatePortPair
(
&
node0
&
A
&
node1
&
B
)
;
CreatePortPair
(
&
node1
&
C
&
node2
&
D
)
;
PortRef
E
F
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
E
&
F
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
A
"
.
"
F
)
)
;
WaitForIdle
(
)
;
ScopedMessage
message
;
ASSERT_TRUE
(
node1
.
ReadMessage
(
B
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
F
)
)
;
node2
.
BlockOnEvent
(
Event
:
:
Type
:
:
kObserveProxy
)
;
EXPECT_EQ
(
OK
node1
.
SendStringMessageWithPort
(
C
"
.
"
F
)
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
LostConnectionToNode
(
node2
.
name
(
)
)
)
;
node2
.
Unblock
(
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
ERROR_PORT_UNKNOWN
node1
.
node
(
)
.
GetPort
(
F
.
name
(
)
&
F
)
)
;
PortStatus
status
{
}
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
E
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_closed
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
A
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
B
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
C
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
E
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
LostConnectionToNodeWithLocalProxy
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
A
B
;
CreatePortPair
(
&
node0
&
A
&
node1
&
B
)
;
PortRef
C
D
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
C
&
D
)
)
;
node0
.
BlockOnEvent
(
Event
:
:
Type
:
:
kObserveProxy
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
A
"
.
"
D
)
)
;
WaitForIdle
(
)
;
ScopedMessage
message
;
ASSERT_TRUE
(
node1
.
ReadMessage
(
B
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
PortRef
E
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
E
)
)
;
RemoveNode
(
&
node1
)
;
node0
.
Unblock
(
)
;
WaitForIdle
(
)
;
PortStatus
status
{
}
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
C
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_closed
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
A
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
B
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
C
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
E
)
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
GetMessage1
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
PortRef
a0
a1
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
a0
&
a1
)
)
;
ScopedMessage
message
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
GetMessage
(
a0
&
message
nullptr
)
)
;
EXPECT_FALSE
(
message
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
a1
)
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
ERROR_PORT_PEER_CLOSED
node
.
node
(
)
.
GetMessage
(
a0
&
message
nullptr
)
)
;
EXPECT_FALSE
(
message
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
a0
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
GetMessage2
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
PortRef
a0
a1
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
a0
&
a1
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessage
(
a1
"
1
"
)
)
;
ScopedMessage
message
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
GetMessage
(
a0
&
message
nullptr
)
)
;
ASSERT_TRUE
(
message
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
1
"
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
a0
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
a1
)
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
GetMessage3
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
PortRef
a0
a1
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
a0
&
a1
)
)
;
const
char
*
kStrings
[
]
=
{
"
1
"
"
2
"
"
3
"
}
;
for
(
auto
&
kString
:
kStrings
)
{
EXPECT_EQ
(
OK
node
.
SendStringMessage
(
a1
kString
)
)
;
}
ScopedMessage
message
;
for
(
auto
&
kString
:
kStrings
)
{
EXPECT_EQ
(
OK
node
.
node
(
)
.
GetMessage
(
a0
&
message
nullptr
)
)
;
ASSERT_TRUE
(
message
)
;
EXPECT_TRUE
(
MessageEquals
(
message
kString
)
)
;
}
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
a0
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
a1
)
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
Delegation1
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
x0
x1
;
CreatePortPair
(
&
node0
&
x0
&
node1
&
x1
)
;
PortRef
a0
a1
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
a0
&
a1
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x0
"
a1
"
a1
)
)
;
WaitForIdle
(
)
;
ScopedMessage
message
;
ASSERT_TRUE
(
node1
.
ReadMessage
(
x1
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
a1
"
)
)
;
PortName
a2_name
=
message
-
>
ports
(
)
[
0
]
;
EXPECT_EQ
(
OK
node1
.
SendStringMessageWithPort
(
x1
"
a2
"
a2_name
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessage
(
a0
"
hello
"
)
)
;
WaitForIdle
(
)
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
x0
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
a2
"
)
)
;
PortName
a3_name
=
message
-
>
ports
(
)
[
0
]
;
PortRef
a3
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
GetPort
(
a3_name
&
a3
)
)
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
a3
&
message
)
)
;
EXPECT_EQ
(
0u
message
-
>
num_ports
(
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
hello
"
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
a0
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
a3
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
x0
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
x1
)
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
Delegation2
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
PortRef
A
B
;
CreatePortPair
(
&
node0
&
A
&
node1
&
B
)
;
PortRef
C
D
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
C
&
D
)
)
;
PortRef
E
F
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
E
&
F
)
)
;
node1
.
set_save_messages
(
true
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
A
"
1
"
D
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
C
"
1
"
F
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessage
(
E
"
hello
"
)
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
C
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
E
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
A
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
B
)
)
;
bool
got_hello
=
false
;
ScopedMessage
message
;
while
(
node1
.
GetSavedMessage
(
&
message
)
)
{
node1
.
ClosePortsInEvent
(
message
.
get
(
)
)
;
if
(
MessageEquals
(
message
"
hello
"
)
)
{
got_hello
=
true
;
break
;
}
}
EXPECT_TRUE
(
got_hello
)
;
WaitForIdle
(
)
;
}
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
SendUninitialized
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
PortRef
x0
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreateUninitializedPort
(
&
x0
)
)
;
EXPECT_EQ
(
ERROR_PORT_STATE_UNEXPECTED
node
.
SendStringMessage
(
x0
"
oops
"
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
x0
)
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
SendFailure
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
node
.
set_save_messages
(
true
)
;
PortRef
A
B
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
EXPECT_EQ
(
ERROR_PORT_CANNOT_SEND_SELF
node
.
SendStringMessageWithPort
(
A
"
oops
"
A
)
)
;
EXPECT_EQ
(
ERROR_PORT_CANNOT_SEND_PEER
node
.
SendStringMessageWithPort
(
A
"
nope
"
B
)
)
;
EXPECT_EQ
(
ERROR_PORT_UNKNOWN
node
.
node
(
)
.
GetPort
(
B
.
name
(
)
&
B
)
)
;
WaitForIdle
(
)
;
ScopedMessage
message
;
EXPECT_FALSE
(
node
.
GetSavedMessage
(
&
message
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
A
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
DontLeakUnreceivedPorts
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
PortRef
A
B
C
D
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
C
&
D
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
A
"
foo
"
D
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
C
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
A
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
B
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
AllowShutdownWithLocalPortsOpen
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
PortRef
A
B
C
D
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
C
&
D
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
A
"
foo
"
D
)
)
;
ScopedMessage
message
;
EXPECT_TRUE
(
node
.
ReadMessage
(
B
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
foo
"
)
)
;
PortRef
E
;
ASSERT_EQ
(
OK
node
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
E
)
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
Node
:
:
ShutdownPolicy
:
:
ALLOW_LOCAL_PORTS
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
Node
:
:
ShutdownPolicy
:
:
ALLOW_LOCAL_PORTS
)
)
;
EXPECT_FALSE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
A
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
B
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
C
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
E
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
ProxyCollapse1
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
PortRef
A
B
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
PortRef
X
Y
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
X
&
Y
)
)
;
ScopedMessage
message
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
X
"
foo
"
B
)
)
;
ASSERT_TRUE
(
node
.
ReadMessage
(
Y
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
PortRef
C
;
ASSERT_EQ
(
OK
node
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
C
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
X
"
foo
"
C
)
)
;
ASSERT_TRUE
(
node
.
ReadMessage
(
Y
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
PortRef
D
;
ASSERT_EQ
(
OK
node
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
D
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
X
"
foo
"
D
)
)
;
ASSERT_TRUE
(
node
.
ReadMessage
(
Y
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
PortRef
E
;
ASSERT_EQ
(
OK
node
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
E
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
X
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
Y
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
A
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
E
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
ProxyCollapse2
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
PortRef
A
B
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
PortRef
X
Y
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
X
&
Y
)
)
;
ScopedMessage
message
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
X
"
foo
"
B
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
X
"
foo
"
A
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
X
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
Y
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
SendWithClosedPeer
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
PortRef
A
B
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessage
(
A
"
hey
"
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
A
)
)
;
PortRef
X
Y
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
X
&
Y
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
X
"
foo
"
B
)
)
;
ScopedMessage
message
;
ASSERT_TRUE
(
node
.
ReadMessage
(
Y
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
PortRef
C
;
ASSERT_EQ
(
OK
node
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
C
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
X
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
Y
)
)
;
WaitForIdle
(
)
;
ASSERT_TRUE
(
node
.
ReadMessage
(
C
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
hey
"
)
)
;
PortStatus
status
{
}
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
GetStatus
(
C
&
status
)
)
;
EXPECT_FALSE
(
status
.
receiving_messages
)
;
EXPECT_FALSE
(
status
.
has_messages
)
;
EXPECT_TRUE
(
status
.
peer_closed
)
;
node
.
node
(
)
.
ClosePort
(
C
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
SendWithClosedPeerSent
)
{
TestNode
node
(
0
)
;
AddNode
(
&
node
)
;
PortRef
X
Y
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
X
&
Y
)
)
;
PortRef
A
B
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
ScopedMessage
message
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
X
"
foo
"
A
)
)
;
ASSERT_TRUE
(
node
.
ReadMessage
(
Y
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
PortRef
C
;
ASSERT_EQ
(
OK
node
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
C
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
X
"
foo
"
C
)
)
;
ASSERT_TRUE
(
node
.
ReadMessage
(
Y
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
PortRef
D
;
ASSERT_EQ
(
OK
node
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
D
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessage
(
D
"
hey
"
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
D
)
)
;
EXPECT_EQ
(
OK
node
.
SendStringMessageWithPort
(
X
"
foo
"
B
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
X
)
)
;
ASSERT_TRUE
(
node
.
ReadMessage
(
Y
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
PortRef
E
;
ASSERT_EQ
(
OK
node
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
E
)
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
Y
)
)
;
WaitForIdle
(
)
;
ASSERT_TRUE
(
node
.
ReadMessage
(
E
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
hey
"
)
)
;
PortStatus
status
{
}
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
GetStatus
(
E
&
status
)
)
;
EXPECT_FALSE
(
status
.
receiving_messages
)
;
EXPECT_FALSE
(
status
.
has_messages
)
;
EXPECT_TRUE
(
status
.
peer_closed
)
;
EXPECT_EQ
(
OK
node
.
node
(
)
.
ClosePort
(
E
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
MergePorts
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
A
B
C
D
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
CreatePortPair
(
&
C
&
D
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessage
(
A
"
hey
"
)
)
;
node1
.
AllowPortMerge
(
C
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
MergePorts
(
B
node1
.
name
(
)
C
.
name
(
)
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
Node
:
:
ShutdownPolicy
:
:
ALLOW_LOCAL_PORTS
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
Node
:
:
ShutdownPolicy
:
:
ALLOW_LOCAL_PORTS
)
)
;
ScopedMessage
message
;
ASSERT_TRUE
(
node1
.
ReadMessage
(
D
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
hey
"
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
A
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
D
)
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
MergePortWithClosedPeer1
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
A
B
C
D
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
CreatePortPair
(
&
C
&
D
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessage
(
A
"
hey
"
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
A
)
)
;
node1
.
AllowPortMerge
(
C
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
MergePorts
(
B
node1
.
name
(
)
C
.
name
(
)
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
Node
:
:
ShutdownPolicy
:
:
ALLOW_LOCAL_PORTS
)
)
;
ScopedMessage
message
;
ASSERT_TRUE
(
node1
.
ReadMessage
(
D
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
hey
"
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
D
)
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
MergePortWithClosedPeer2
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
A
B
C
D
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
CreatePortPair
(
&
C
&
D
)
)
;
EXPECT_EQ
(
OK
node1
.
SendStringMessage
(
D
"
hey
"
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
D
)
)
;
node1
.
AllowPortMerge
(
C
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
MergePorts
(
B
node1
.
name
(
)
C
.
name
(
)
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
Node
:
:
ShutdownPolicy
:
:
ALLOW_LOCAL_PORTS
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
ScopedMessage
message
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
A
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
hey
"
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
A
)
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
MergePortsWithClosedPeers
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
A
B
C
D
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
CreatePortPair
(
&
C
&
D
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
A
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
D
)
)
;
WaitForIdle
(
)
;
node1
.
AllowPortMerge
(
C
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
MergePorts
(
B
node1
.
name
(
)
C
.
name
(
)
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
MergePortsWithMovedPeers
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
A
B
C
D
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
CreatePortPair
(
&
C
&
D
)
)
;
PortRef
X
Y
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
X
&
Y
)
)
;
ScopedMessage
message
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
X
"
foo
"
A
)
)
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
Y
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
PortRef
E
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
E
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
X
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
Y
)
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessage
(
E
"
hey
"
)
)
;
EXPECT_EQ
(
OK
node1
.
SendStringMessage
(
D
"
hi
"
)
)
;
node1
.
AllowPortMerge
(
C
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
MergePorts
(
B
node1
.
name
(
)
C
.
name
(
)
)
)
;
WaitForIdle
(
)
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
E
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
hi
"
)
)
;
ASSERT_TRUE
(
node1
.
ReadMessage
(
D
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
"
hey
"
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
E
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
D
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
MergePortsFailsGracefully
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
A
B
C
D
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
A
&
B
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
CreatePortPair
(
&
C
&
D
)
)
;
ScopedMessage
message
;
PortRef
X
Y
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreateUninitializedPort
(
&
X
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
CreateUninitializedPort
(
&
Y
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
InitializePort
(
X
node1
.
name
(
)
Y
.
name
(
)
node1
.
name
(
)
Y
.
name
(
)
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
InitializePort
(
Y
node0
.
name
(
)
X
.
name
(
)
node0
.
name
(
)
X
.
name
(
)
)
)
;
node1
.
BlockOnEvent
(
Event
:
:
Type
:
:
kMergePort
)
;
node1
.
AllowPortMerge
(
C
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
MergePorts
(
B
node1
.
name
(
)
C
.
name
(
)
)
)
;
EXPECT_EQ
(
OK
node1
.
SendStringMessageWithPort
(
Y
"
foo
"
C
)
)
;
node1
.
Unblock
(
)
;
WaitForIdle
(
)
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
X
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
PortRef
E
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
E
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
X
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
Y
)
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
ERROR_PORT_UNKNOWN
node1
.
node
(
)
.
GetPort
(
C
.
name
(
)
&
C
)
)
;
EXPECT_EQ
(
ERROR_PORT_UNKNOWN
node0
.
node
(
)
.
GetPort
(
B
.
name
(
)
&
B
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
A
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
D
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
E
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
RemotePeerStatus
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
a
b
;
PortStatus
status
{
}
;
node0
.
node
(
)
.
CreatePortPair
(
&
a
&
b
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
a
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
b
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
PortRef
x0
x1
;
CreatePortPair
(
&
node0
&
x0
&
node1
&
x1
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
x0
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetStatus
(
x1
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
PortRef
x2
x3
;
CreatePortPair
(
&
node0
&
x2
&
node1
&
x3
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x2
"
foo
"
b
)
)
;
EXPECT_EQ
(
OK
node1
.
SendStringMessageWithPort
(
x3
"
bar
"
x1
)
)
;
WaitForIdle
(
)
;
ScopedMessage
message
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
x2
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
x1
)
)
;
ASSERT_TRUE
(
node1
.
ReadMessage
(
x3
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
b
)
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
x0
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
x1
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
a
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetStatus
(
b
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x2
"
foo
"
x1
)
)
;
EXPECT_EQ
(
OK
node1
.
SendStringMessageWithPort
(
x3
"
bar
"
b
)
)
;
WaitForIdle
(
)
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
x2
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
b
)
)
;
ASSERT_TRUE
(
node1
.
ReadMessage
(
x3
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
x1
)
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
x0
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetStatus
(
x1
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
a
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
b
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
x0
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
x1
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
x2
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
x3
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
a
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
b
)
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
RemotePeerStatusAfterLocalPortMerge
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
a
b
c
d
;
node0
.
node
(
)
.
CreatePortPair
(
&
a
&
b
)
;
CreatePortPair
(
&
node0
&
c
&
node1
&
d
)
;
PortStatus
status
{
}
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
a
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
b
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
c
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetStatus
(
d
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
MergeLocalPorts
(
b
c
)
)
;
WaitForIdle
(
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
a
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetStatus
(
d
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
a
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
d
)
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
RemotePeerStatusAfterRemotePortMerge
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
a
b
c
d
;
node0
.
node
(
)
.
CreatePortPair
(
&
a
&
b
)
;
node1
.
node
(
)
.
CreatePortPair
(
&
c
&
d
)
;
PortStatus
status
{
}
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
a
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
b
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetStatus
(
c
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetStatus
(
d
&
status
)
)
;
EXPECT_FALSE
(
status
.
peer_remote
)
;
node1
.
AllowPortMerge
(
c
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
MergePorts
(
b
node1
.
name
(
)
c
.
name
(
)
)
)
;
WaitForIdle
(
)
;
ASSERT_EQ
(
OK
node0
.
node
(
)
.
GetStatus
(
a
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetStatus
(
d
&
status
)
)
;
EXPECT_TRUE
(
status
.
peer_remote
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
a
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
d
)
)
;
EXPECT_TRUE
(
node0
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
EXPECT_TRUE
(
node1
.
node
(
)
.
CanShutdownCleanly
(
)
)
;
}
TEST_F
(
PortsTest
RetransmitUserMessageEvents
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
PortRef
a
b
;
node0
.
node
(
)
.
CreatePortPair
(
&
a
&
b
)
;
const
char
*
kMessage
=
"
hey
"
;
ScopedMessage
message
;
EXPECT_EQ
(
OK
node0
.
SendStringMessage
(
a
kMessage
)
)
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
b
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
kMessage
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
SendUserMessage
(
b
std
:
:
move
(
message
)
)
)
;
EXPECT_FALSE
(
message
)
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
a
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
kMessage
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
SendUserMessage
(
a
std
:
:
move
(
message
)
)
)
;
EXPECT_FALSE
(
message
)
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
b
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
kMessage
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
SendUserMessage
(
b
std
:
:
move
(
message
)
)
)
;
EXPECT_FALSE
(
message
)
;
ASSERT_TRUE
(
node0
.
ReadMessage
(
a
&
message
)
)
;
EXPECT_TRUE
(
MessageEquals
(
message
kMessage
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
a
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
b
)
)
;
}
TEST_F
(
PortsTest
SetAcknowledgeRequestInterval
)
{
TestNode
node0
(
0
)
;
AddNode
(
&
node0
)
;
PortRef
a0
a1
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
CreatePortPair
(
&
a0
&
a1
)
)
;
EXPECT_EQ
(
0u
node0
.
GetUnacknowledgedMessageCount
(
a0
)
)
;
EXPECT_EQ
(
OK
node0
.
SendMultipleMessages
(
a0
15
)
)
;
EXPECT_EQ
(
15u
node0
.
GetUnacknowledgedMessageCount
(
a0
)
)
;
EXPECT_TRUE
(
node0
.
ReadMultipleMessages
(
a1
5
)
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
15u
node0
.
GetUnacknowledgedMessageCount
(
a0
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
SetAcknowledgeRequestInterval
(
a0
1
)
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
10u
node0
.
GetUnacknowledgedMessageCount
(
a0
)
)
;
EXPECT_TRUE
(
node0
.
ReadMultipleMessages
(
a1
5
)
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
5u
node0
.
GetUnacknowledgedMessageCount
(
a0
)
)
;
TestNode
node1
(
1
)
;
AddNode
(
&
node1
)
;
PortRef
x0
x1
;
CreatePortPair
(
&
node0
&
x0
&
node1
&
x1
)
;
EXPECT_EQ
(
OK
node0
.
SendStringMessageWithPort
(
x0
"
foo
"
a1
)
)
;
WaitForIdle
(
)
;
ScopedMessage
message
;
ASSERT_TRUE
(
node1
.
ReadMessage
(
x1
&
message
)
)
;
ASSERT_EQ
(
1u
message
-
>
num_ports
(
)
)
;
ASSERT_EQ
(
OK
node1
.
node
(
)
.
GetPort
(
message
-
>
ports
(
)
[
0
]
&
a1
)
)
;
EXPECT_TRUE
(
node1
.
ReadMultipleMessages
(
a1
5
)
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
0u
node0
.
GetUnacknowledgedMessageCount
(
a0
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
SetAcknowledgeRequestInterval
(
a0
0
)
)
;
EXPECT_EQ
(
OK
node0
.
SendMultipleMessages
(
a0
10
)
)
;
WaitForIdle
(
)
;
EXPECT_TRUE
(
node1
.
ReadMultipleMessages
(
a1
10
)
)
;
WaitForIdle
(
)
;
EXPECT_NE
(
0u
node0
.
GetUnacknowledgedMessageCount
(
a0
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
a1
)
)
;
WaitForIdle
(
)
;
EXPECT_EQ
(
0u
node0
.
GetUnacknowledgedMessageCount
(
a0
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
a0
)
)
;
EXPECT_EQ
(
OK
node0
.
node
(
)
.
ClosePort
(
x0
)
)
;
EXPECT_EQ
(
OK
node1
.
node
(
)
.
ClosePort
(
x1
)
)
;
}
}
}
}
}
