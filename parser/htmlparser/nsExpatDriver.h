#
ifndef
NS_EXPAT_DRIVER__
#
define
NS_EXPAT_DRIVER__
#
include
"
expat_config
.
h
"
#
include
"
expat
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIDTD
.
h
"
#
include
"
nsITokenizer
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIParser
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
rlbox_expat
.
h
"
#
include
"
nsRLBoxExpatDriver
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
class
nsIExpatSink
;
struct
nsCatalogData
;
class
RLBoxExpatSandboxData
;
class
nsExpatDriver
:
public
nsIDTD
public
nsITokenizer
{
virtual
~
nsExpatDriver
(
)
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_NSIDTD
NS_DECL_NSITOKENIZER
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
nsExpatDriver
nsIDTD
)
nsExpatDriver
(
)
;
int
HandleExternalEntityRef
(
const
char16_t
*
aOpenEntityNames
const
char16_t
*
aBase
const
char16_t
*
aSystemId
const
char16_t
*
aPublicId
)
;
static
void
HandleStartElement
(
rlbox_sandbox_expat
&
aSandbox
tainted_expat
<
void
*
>
aUserData
tainted_expat
<
const
char16_t
*
>
aName
tainted_expat
<
const
char16_t
*
*
>
aAtts
)
;
static
void
HandleStartElementForSystemPrincipal
(
rlbox_sandbox_expat
&
aSandbox
tainted_expat
<
void
*
>
aUserData
tainted_expat
<
const
char16_t
*
>
aName
tainted_expat
<
const
char16_t
*
*
>
aAtts
)
;
static
void
HandleEndElement
(
rlbox_sandbox_expat
&
aSandbox
tainted_expat
<
void
*
>
aUserData
tainted_expat
<
const
char16_t
*
>
aName
)
;
static
void
HandleEndElementForSystemPrincipal
(
rlbox_sandbox_expat
&
aSandbox
tainted_expat
<
void
*
>
aUserData
tainted_expat
<
const
char16_t
*
>
aName
)
;
nsresult
HandleCharacterData
(
const
char16_t
*
aCData
const
uint32_t
aLength
)
;
nsresult
HandleComment
(
const
char16_t
*
aName
)
;
nsresult
HandleProcessingInstruction
(
const
char16_t
*
aTarget
const
char16_t
*
aData
)
;
nsresult
HandleXMLDeclaration
(
const
char16_t
*
aVersion
const
char16_t
*
aEncoding
int32_t
aStandalone
)
;
nsresult
HandleDefault
(
const
char16_t
*
aData
const
uint32_t
aLength
)
;
nsresult
HandleStartCdataSection
(
)
;
nsresult
HandleEndCdataSection
(
)
;
nsresult
HandleStartDoctypeDecl
(
const
char16_t
*
aDoctypeName
const
char16_t
*
aSysid
const
char16_t
*
aPubid
bool
aHasInternalSubset
)
;
nsresult
HandleEndDoctypeDecl
(
)
;
private
:
nsresult
OpenInputStreamFromExternalDTD
(
const
char16_t
*
aFPIStr
const
char16_t
*
aURLStr
const
char16_t
*
aBaseURL
nsIInputStream
*
*
aStream
nsAString
&
aAbsURL
)
;
void
ParseBuffer
(
const
char16_t
*
aBuffer
uint32_t
aLength
bool
aIsFinal
uint32_t
*
aConsumed
)
;
nsresult
HandleError
(
)
;
void
MaybeStopParser
(
nsresult
aState
)
;
bool
BlockedOrInterrupted
(
)
{
return
mInternalState
=
=
NS_ERROR_HTMLPARSER_BLOCK
|
|
mInternalState
=
=
NS_ERROR_HTMLPARSER_INTERRUPTED
;
}
RLBoxExpatSandboxData
*
SandboxData
(
)
const
;
rlbox_sandbox_expat
*
Sandbox
(
)
const
;
void
Destroy
(
)
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
RLBoxSandboxPoolData
>
mSandboxPoolData
;
tainted_expat
<
XML_Parser
>
mExpatParser
;
nsString
mLastLine
;
nsString
mCDataText
;
nsString
mDoctypeName
;
nsString
mSystemID
;
nsString
mPublicID
;
nsString
mInternalSubset
;
bool
mInCData
;
bool
mInInternalSubset
;
bool
mInExternalDTD
;
bool
mMadeFinalCallToExpat
;
bool
mIsFinalChunk
;
nsresult
mInternalState
;
uint32_t
mExpatBuffered
;
uint16_t
mTagDepth
;
nsCOMPtr
<
nsIContentSink
>
mOriginalSink
;
nsCOMPtr
<
nsIExpatSink
>
mSink
;
const
nsCatalogData
*
mCatalogData
;
nsString
mURISpec
;
uint64_t
mInnerWindowID
;
}
;
class
RLBoxExpatSandboxData
:
public
mozilla
:
:
RLBoxSandboxDataBase
{
friend
class
RLBoxExpatSandboxPool
;
friend
class
nsExpatDriver
;
public
:
MOZ_COUNTED_DEFAULT_CTOR
(
RLBoxExpatSandboxData
)
;
~
RLBoxExpatSandboxData
(
)
;
rlbox_sandbox_expat
*
Sandbox
(
)
const
{
return
mSandbox
.
get
(
)
;
}
void
AttachDriver
(
bool
IsSystemPrincipal
void
*
aDriver
)
;
void
DetachDriver
(
)
;
private
:
mozilla
:
:
UniquePtr
<
rlbox_sandbox_expat
>
mSandbox
;
sandbox_callback_expat
<
XML_XmlDeclHandler
>
mHandleXMLDeclaration
;
sandbox_callback_expat
<
XML_CharacterDataHandler
>
mHandleCharacterData
;
sandbox_callback_expat
<
XML_ProcessingInstructionHandler
>
mHandleProcessingInstruction
;
sandbox_callback_expat
<
XML_DefaultHandler
>
mHandleDefault
;
sandbox_callback_expat
<
XML_ExternalEntityRefHandler
>
mHandleExternalEntityRef
;
sandbox_callback_expat
<
XML_CommentHandler
>
mHandleComment
;
sandbox_callback_expat
<
XML_StartCdataSectionHandler
>
mHandleStartCdataSection
;
sandbox_callback_expat
<
XML_EndCdataSectionHandler
>
mHandleEndCdataSection
;
sandbox_callback_expat
<
XML_StartDoctypeDeclHandler
>
mHandleStartDoctypeDecl
;
sandbox_callback_expat
<
XML_EndDoctypeDeclHandler
>
mHandleEndDoctypeDecl
;
sandbox_callback_expat
<
XML_StartElementHandler
>
mHandleStartElement
;
sandbox_callback_expat
<
XML_EndElementHandler
>
mHandleEndElement
;
}
;
#
endif
