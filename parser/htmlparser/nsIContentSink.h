#
ifndef
nsIContentSink_h___
#
define
nsIContentSink_h___
#
include
"
nsISupports
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
FlushType
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
nsIDTD
.
h
"
class
nsParserBase
;
namespace
mozilla
{
class
Encoding
;
}
#
define
NS_ICONTENT_SINK_IID
\
{
\
0xcf9a7cbb
0xfcbc
0x4e13
{
\
0x8e
0xf5
0x18
0xef
0x2d
0x3d
0x58
0x29
\
}
\
}
class
nsIContentSink
:
public
nsISupports
{
protected
:
using
Encoding
=
mozilla
:
:
Encoding
;
template
<
typename
T
>
using
NotNull
=
mozilla
:
:
NotNull
<
T
>
;
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_ICONTENT_SINK_IID
)
NS_IMETHOD
WillParse
(
void
)
=
0
;
NS_IMETHOD
WillBuildModel
(
nsDTDMode
aDTDMode
)
{
return
NS_OK
;
}
NS_IMETHOD
DidBuildModel
(
bool
aTerminated
)
{
return
NS_OK
;
}
NS_IMETHOD
WillInterrupt
(
void
)
=
0
;
virtual
void
WillResume
(
)
=
0
;
virtual
nsIContentSink
*
AsExecutor
(
)
{
return
nullptr
;
}
NS_IMETHOD
SetParser
(
nsParserBase
*
aParser
)
=
0
;
virtual
void
FlushPendingNotifications
(
mozilla
:
:
FlushType
aType
)
=
0
;
virtual
void
SetDocumentCharset
(
NotNull
<
const
Encoding
*
>
aEncoding
)
=
0
;
virtual
nsISupports
*
GetTarget
(
)
=
0
;
virtual
bool
IsScriptExecuting
(
)
{
return
false
;
}
virtual
void
ContinueInterruptedParsingAsync
(
)
{
}
virtual
void
InitialTranslationCompleted
(
)
{
}
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIContentSink
NS_ICONTENT_SINK_IID
)
#
endif
