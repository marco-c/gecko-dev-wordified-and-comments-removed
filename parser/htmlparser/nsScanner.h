#
ifndef
SCANNER
#
define
SCANNER
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIParser
.
h
"
#
include
"
nsIUnicodeDecoder
.
h
"
#
include
"
nsScannerString
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
class
nsReadEndCondition
{
public
:
const
char16_t
*
mChars
;
char16_t
mFilter
;
explicit
nsReadEndCondition
(
const
char16_t
*
aTerminateChars
)
;
private
:
nsReadEndCondition
(
const
nsReadEndCondition
&
aOther
)
;
void
operator
=
(
const
nsReadEndCondition
&
aOther
)
;
}
;
class
nsScanner
{
public
:
explicit
nsScanner
(
const
nsAString
&
anHTMLString
)
;
nsScanner
(
nsString
&
aFilename
bool
aCreateStream
)
;
~
nsScanner
(
)
;
nsresult
GetChar
(
char16_t
&
ch
)
;
int32_t
Mark
(
void
)
;
void
RewindToMark
(
void
)
;
bool
UngetReadable
(
const
nsAString
&
aBuffer
)
;
nsresult
Append
(
const
nsAString
&
aBuffer
)
;
nsresult
Append
(
const
char
*
aBuffer
uint32_t
aLen
)
;
bool
CopyUnusedData
(
nsString
&
aCopyBuffer
)
;
nsString
&
GetFilename
(
void
)
;
static
void
SelfTest
(
)
;
nsresult
SetDocumentCharset
(
const
nsACString
&
aCharset
int32_t
aSource
)
;
void
BindSubstring
(
nsScannerSubstring
&
aSubstring
const
nsScannerIterator
&
aStart
const
nsScannerIterator
&
aEnd
)
;
void
CurrentPosition
(
nsScannerIterator
&
aPosition
)
;
void
EndReading
(
nsScannerIterator
&
aPosition
)
;
void
SetPosition
(
nsScannerIterator
&
aPosition
bool
aTruncate
=
false
)
;
bool
IsIncremental
(
void
)
{
return
mIncremental
;
}
void
SetIncremental
(
bool
anIncrValue
)
{
mIncremental
=
anIncrValue
;
}
protected
:
bool
AppendToBuffer
(
nsScannerString
:
:
Buffer
*
aBuffer
)
;
bool
AppendToBuffer
(
const
nsAString
&
aStr
)
{
nsScannerString
:
:
Buffer
*
buf
=
nsScannerString
:
:
AllocBufferFromString
(
aStr
)
;
if
(
!
buf
)
return
false
;
AppendToBuffer
(
buf
)
;
return
true
;
}
nsScannerString
*
mSlidingBuffer
;
nsScannerIterator
mCurrentPosition
;
nsScannerIterator
mMarkPosition
;
nsScannerIterator
mEndPosition
;
nsString
mFilename
;
bool
mIncremental
;
int32_t
mCharsetSource
;
nsCString
mCharset
;
nsCOMPtr
<
nsIUnicodeDecoder
>
mUnicodeDecoder
;
private
:
nsScanner
&
operator
=
(
const
nsScanner
&
)
;
}
;
#
endif
