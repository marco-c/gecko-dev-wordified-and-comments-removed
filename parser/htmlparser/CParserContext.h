#
ifndef
__CParserContext
#
define
__CParserContext
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsIParser
.
h
"
#
include
"
nsIDTD
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsScanner
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
class
nsITokenizer
;
class
CParserContext
{
public
:
enum
eContextType
{
eCTURL
eCTString
}
;
CParserContext
(
nsIURI
*
aURI
eParserCommands
aCommand
)
;
CParserContext
(
const
nsAString
&
aBuffer
eParserCommands
aCommand
bool
aLastBuffer
)
;
~
CParserContext
(
)
;
nsresult
GetTokenizer
(
nsIDTD
*
aDTD
nsIContentSink
*
aSink
nsITokenizer
*
&
aTokenizer
)
;
void
SetMimeType
(
const
nsACString
&
aMimeType
)
;
nsCOMPtr
<
nsIRequest
>
mRequest
;
nsCOMPtr
<
nsITokenizer
>
mTokenizer
;
nsScanner
mScanner
;
nsCString
mMimeType
;
nsDTDMode
mDTDMode
;
eParserDocType
mDocType
;
eStreamState
mStreamListenerState
;
eContextType
mContextType
;
eAutoDetectResult
mAutoDetectStatus
=
eUnknownDetect
;
eParserCommands
mParserCommand
;
bool
mMultipart
;
bool
mCopyUnused
;
}
;
#
endif
