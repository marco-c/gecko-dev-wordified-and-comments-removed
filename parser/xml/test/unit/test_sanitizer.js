const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
do_get_profile
(
)
;
}
function
run_test
(
)
{
load
(
"
results
.
js
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
let
{
PlacesUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
sys
.
mjs
"
)
;
Assert
.
ok
(
PlacesUtils
.
history
.
databaseStatus
<
=
1
"
ensure
places
database
is
successfully
initialized
.
"
)
;
}
var
ParserUtils
=
Cc
[
"
mozilla
.
org
/
parserutils
;
1
"
]
.
getService
(
Ci
.
nsIParserUtils
)
;
var
sanitizeFlags
=
ParserUtils
.
SanitizerCidEmbedsOnly
|
ParserUtils
.
SanitizerDropForms
|
ParserUtils
.
SanitizerDropNonCSSPresentation
;
for
(
var
item
in
vectors
)
{
var
evil
=
vectors
[
item
]
.
data
;
var
sanitized
=
vectors
[
item
]
.
sanitized
;
var
out
=
ParserUtils
.
sanitize
(
evil
sanitizeFlags
)
;
Assert
.
equal
(
sanitized
out
)
;
}
}
