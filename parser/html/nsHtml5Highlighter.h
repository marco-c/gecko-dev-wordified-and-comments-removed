#
ifndef
nsHtml5Highlighter_h
#
define
nsHtml5Highlighter_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsHtml5TreeOperation
.
h
"
#
include
"
nsHtml5UTF16Buffer
.
h
"
#
include
"
nsHtml5TreeOperation
.
h
"
#
include
"
nsAHtml5TreeOpSink
.
h
"
#
define
NS_HTML5_HIGHLIGHTER_HANDLE_ARRAY_LENGTH
512
class
nsHtml5Highlighter
{
public
:
explicit
nsHtml5Highlighter
(
nsAHtml5TreeOpSink
*
aOpSink
)
;
~
nsHtml5Highlighter
(
)
;
void
SetOpSink
(
nsAHtml5TreeOpSink
*
aOpSink
)
;
void
Rewind
(
)
;
void
Start
(
const
nsAutoString
&
aTitle
)
;
void
UpdateCharsetSource
(
nsCharsetSource
aCharsetSource
)
;
int32_t
Transition
(
int32_t
aState
bool
aReconsume
int32_t
aPos
)
;
[
[
nodiscard
]
]
bool
End
(
)
;
void
SetBuffer
(
nsHtml5UTF16Buffer
*
aBuffer
)
;
void
DropBuffer
(
int32_t
aPos
)
;
bool
ShouldFlushOps
(
)
;
mozilla
:
:
Result
<
bool
nsresult
>
FlushOps
(
)
;
void
MaybeLinkifyAttributeValue
(
nsHtml5AttributeName
*
aName
nsHtml5String
aValue
)
;
void
CompletedNamedCharacterReference
(
)
;
void
AddErrorToCurrentNode
(
const
char
*
aMsgId
)
;
void
AddErrorToCurrentRun
(
const
char
*
aMsgId
)
;
void
AddErrorToCurrentRun
(
const
char
*
aMsgId
nsAtom
*
aName
)
;
void
AddErrorToCurrentRun
(
const
char
*
aMsgId
nsAtom
*
aName
nsAtom
*
aOther
)
;
void
AddErrorToCurrentAmpersand
(
const
char
*
aMsgId
)
;
void
AddErrorToCurrentSlash
(
const
char
*
aMsgId
)
;
void
AddBase
(
nsHtml5String
aValue
)
;
void
StartCharacters
(
)
;
private
:
void
StartSpan
(
)
;
void
StartSpan
(
const
char16_t
*
aClass
)
;
void
EndSpanOrA
(
)
;
void
EndCharactersAndStartMarkupRun
(
)
;
void
StartA
(
)
;
void
FlushChars
(
)
;
void
FlushCurrent
(
)
;
void
FinishTag
(
)
;
void
AddClass
(
const
char16_t
*
aClass
)
;
nsIContent
*
*
AllocateContentHandle
(
)
;
nsIContent
*
*
CreateElement
(
nsAtom
*
aName
nsHtml5HtmlAttributes
*
aAttributes
nsIContent
*
*
aIntendedParent
mozilla
:
:
dom
:
:
HTMLContentCreatorFunction
aCreator
)
;
nsIContent
*
*
CurrentNode
(
)
;
void
Push
(
nsAtom
*
aName
nsHtml5HtmlAttributes
*
aAttributes
mozilla
:
:
dom
:
:
HTMLContentCreatorFunction
aCreator
)
;
void
NewLine
(
)
;
void
Pop
(
)
;
void
AppendCharacters
(
const
char16_t
*
aBuffer
int32_t
aStart
int32_t
aLength
)
;
void
AddViewSourceHref
(
nsHtml5String
aValue
)
;
int32_t
mState
;
int32_t
mCStart
;
int32_t
mPos
;
int32_t
mLineNumber
;
int32_t
mInlinesOpen
;
bool
mInCharacters
;
nsHtml5UTF16Buffer
*
mBuffer
;
nsTArray
<
nsHtml5TreeOperation
>
mOpQueue
;
nsAHtml5TreeOpSink
*
mOpSink
;
nsIContent
*
*
mCurrentRun
;
nsIContent
*
*
mAmpersand
;
nsIContent
*
*
mSlash
;
mozilla
:
:
UniquePtr
<
nsIContent
*
[
]
>
mHandles
;
int32_t
mHandlesUsed
;
nsTArray
<
mozilla
:
:
UniquePtr
<
nsIContent
*
[
]
>
>
mOldHandles
;
nsTArray
<
nsIContent
*
*
>
mStack
;
bool
mSeenBase
;
}
;
#
endif
