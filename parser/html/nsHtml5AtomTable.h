#
ifndef
nsHtml5AtomTable_h
#
define
nsHtml5AtomTable_h
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsIAtom
.
h
"
#
include
"
nsISerialEventTarget
.
h
"
#
define
RECENTLY_USED_PARSER_ATOMS_SIZE
31
class
nsHtml5Atom
;
class
nsHtml5AtomEntry
:
public
nsStringHashKey
{
public
:
explicit
nsHtml5AtomEntry
(
KeyTypePointer
aStr
)
;
nsHtml5AtomEntry
(
const
nsHtml5AtomEntry
&
aOther
)
;
~
nsHtml5AtomEntry
(
)
;
inline
nsHtml5Atom
*
GetAtom
(
)
{
return
mAtom
;
}
private
:
nsAutoPtr
<
nsHtml5Atom
>
mAtom
;
}
;
class
nsHtml5AtomTable
{
public
:
nsHtml5AtomTable
(
)
;
~
nsHtml5AtomTable
(
)
;
nsIAtom
*
GetAtom
(
const
nsAString
&
aKey
)
;
void
Clear
(
)
{
for
(
uint32_t
i
=
0
;
i
<
RECENTLY_USED_PARSER_ATOMS_SIZE
;
+
+
i
)
{
mRecentlyUsedParserAtoms
[
i
]
=
nullptr
;
}
mTable
.
Clear
(
)
;
}
#
ifdef
DEBUG
void
SetPermittedLookupEventTarget
(
nsISerialEventTarget
*
aEventTarget
)
{
mPermittedLookupEventTarget
=
aEventTarget
;
}
#
endif
private
:
nsTHashtable
<
nsHtml5AtomEntry
>
mTable
;
nsIAtom
*
mRecentlyUsedParserAtoms
[
RECENTLY_USED_PARSER_ATOMS_SIZE
]
;
#
ifdef
DEBUG
nsCOMPtr
<
nsISerialEventTarget
>
mPermittedLookupEventTarget
;
#
endif
}
;
#
endif
