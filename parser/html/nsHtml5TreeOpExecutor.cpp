#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
dom
/
nsCSPService
.
h
"
#
include
"
mozilla
/
dom
/
ScriptLoader
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsHtml5TreeOpExecutor
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIDocShellTreeItem
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIScriptGlobalObject
.
h
"
#
include
"
nsIWebShellServices
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsHtml5Parser
.
h
"
#
include
"
nsHtml5Tokenizer
.
h
"
#
include
"
nsHtml5TreeBuilder
.
h
"
#
include
"
nsHtml5StreamParser
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsIHTMLDocument
.
h
"
#
include
"
nsIViewSourceChannel
.
h
"
#
include
"
xpcpublic
.
h
"
#
include
"
mozilla
/
IdleTaskRunner
.
h
"
using
namespace
mozilla
;
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED
(
nsHtml5TreeOpExecutor
nsHtml5DocumentBuilder
nsIContentSink
)
class
nsHtml5ExecutorReflusher
:
public
Runnable
{
private
:
RefPtr
<
nsHtml5TreeOpExecutor
>
mExecutor
;
public
:
explicit
nsHtml5ExecutorReflusher
(
nsHtml5TreeOpExecutor
*
aExecutor
)
:
mozilla
:
:
Runnable
(
"
nsHtml5ExecutorReflusher
"
)
mExecutor
(
aExecutor
)
{
}
NS_IMETHOD
Run
(
)
override
{
mExecutor
-
>
RunFlushLoop
(
)
;
return
NS_OK
;
}
}
;
static
mozilla
:
:
LinkedList
<
nsHtml5TreeOpExecutor
>
*
gBackgroundFlushList
=
nullptr
;
StaticRefPtr
<
IdleTaskRunner
>
gBackgroundFlushRunner
;
nsHtml5TreeOpExecutor
:
:
nsHtml5TreeOpExecutor
(
)
:
nsHtml5DocumentBuilder
(
false
)
mSuppressEOF
(
false
)
mReadingFromStage
(
false
)
mStreamParser
(
nullptr
)
mPreloadedURLs
(
23
)
mSpeculationReferrerPolicy
(
mozilla
:
:
net
:
:
RP_Unset
)
mStarted
(
false
)
mRunFlushLoopOnStack
(
false
)
mCallContinueInterruptedParsingIfEnabled
(
false
)
mAlreadyComplainedAboutCharset
(
false
)
{
}
nsHtml5TreeOpExecutor
:
:
~
nsHtml5TreeOpExecutor
(
)
{
if
(
gBackgroundFlushList
&
&
isInList
(
)
)
{
mOpQueue
.
Clear
(
)
;
removeFrom
(
*
gBackgroundFlushList
)
;
if
(
gBackgroundFlushList
-
>
isEmpty
(
)
)
{
delete
gBackgroundFlushList
;
gBackgroundFlushList
=
nullptr
;
if
(
gBackgroundFlushRunner
)
{
gBackgroundFlushRunner
-
>
Cancel
(
)
;
gBackgroundFlushRunner
=
nullptr
;
}
}
}
NS_ASSERTION
(
mOpQueue
.
IsEmpty
(
)
"
Somehow
there
'
s
stuff
in
the
op
queue
.
"
)
;
}
NS_IMETHODIMP
nsHtml5TreeOpExecutor
:
:
WillParse
(
)
{
NS_NOTREACHED
(
"
No
one
should
call
this
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsHtml5TreeOpExecutor
:
:
WillBuildModel
(
nsDTDMode
aDTDMode
)
{
mDocument
-
>
AddObserver
(
this
)
;
WillBuildModelImpl
(
)
;
GetDocument
(
)
-
>
BeginLoad
(
)
;
if
(
mDocShell
&
&
!
GetDocument
(
)
-
>
GetWindow
(
)
&
&
!
IsExternalViewSource
(
)
)
{
return
MarkAsBroken
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsHtml5TreeOpExecutor
:
:
DidBuildModel
(
bool
aTerminated
)
{
if
(
!
aTerminated
)
{
EndDocUpdate
(
)
;
if
(
!
mParser
)
{
return
NS_OK
;
}
}
if
(
mRunsToCompletion
)
{
return
NS_OK
;
}
GetParser
(
)
-
>
DropStreamParser
(
)
;
DidBuildModelImpl
(
aTerminated
|
|
NS_FAILED
(
IsBroken
(
)
)
)
;
if
(
!
mLayoutStarted
)
{
bool
destroying
=
true
;
if
(
mDocShell
)
{
mDocShell
-
>
IsBeingDestroyed
(
&
destroying
)
;
}
if
(
!
destroying
)
{
nsContentSink
:
:
StartLayout
(
false
)
;
}
}
ScrollToRef
(
)
;
mDocument
-
>
RemoveObserver
(
this
)
;
if
(
!
mParser
)
{
return
NS_OK
;
}
if
(
mStarted
)
{
mDocument
-
>
EndLoad
(
)
;
}
DropParserAndPerfHint
(
)
;
#
ifdef
GATHER_DOCWRITE_STATISTICS
printf
(
"
UNSAFE
SCRIPTS
:
%
d
\
n
"
sUnsafeDocWrites
)
;
printf
(
"
TOKENIZER
-
SAFE
SCRIPTS
:
%
d
\
n
"
sTokenSafeDocWrites
)
;
printf
(
"
TREEBUILDER
-
SAFE
SCRIPTS
:
%
d
\
n
"
sTreeSafeDocWrites
)
;
#
endif
#
ifdef
DEBUG_NS_HTML5_TREE_OP_EXECUTOR_FLUSH
printf
(
"
MAX
NOTIFICATION
BATCH
LEN
:
%
d
\
n
"
sAppendBatchMaxSize
)
;
if
(
sAppendBatchExaminations
!
=
0
)
{
printf
(
"
AVERAGE
SLOTS
EXAMINED
:
%
d
\
n
"
sAppendBatchSlotsExamined
/
sAppendBatchExaminations
)
;
}
#
endif
return
NS_OK
;
}
NS_IMETHODIMP
nsHtml5TreeOpExecutor
:
:
WillInterrupt
(
)
{
NS_NOTREACHED
(
"
Don
'
t
call
.
For
interface
compat
only
.
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsHtml5TreeOpExecutor
:
:
WillResume
(
)
{
NS_NOTREACHED
(
"
Don
'
t
call
.
For
interface
compat
only
.
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsHtml5TreeOpExecutor
:
:
SetParser
(
nsParserBase
*
aParser
)
{
mParser
=
aParser
;
return
NS_OK
;
}
void
nsHtml5TreeOpExecutor
:
:
FlushPendingNotifications
(
FlushType
aType
)
{
if
(
aType
>
=
FlushType
:
:
EnsurePresShellInitAndFrames
)
{
nsContentSink
:
:
StartLayout
(
true
)
;
}
}
nsISupports
*
nsHtml5TreeOpExecutor
:
:
GetTarget
(
)
{
return
mDocument
;
}
nsresult
nsHtml5TreeOpExecutor
:
:
MarkAsBroken
(
nsresult
aReason
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Wrong
thread
!
"
)
;
mBroken
=
aReason
;
if
(
mStreamParser
)
{
mStreamParser
-
>
Terminate
(
)
;
}
if
(
mParser
&
&
mDocument
)
{
nsCOMPtr
<
nsIRunnable
>
terminator
=
NewRunnableMethod
(
"
nsHtml5Parser
:
:
Terminate
"
GetParser
(
)
&
nsHtml5Parser
:
:
Terminate
)
;
if
(
NS_FAILED
(
mDocument
-
>
Dispatch
(
TaskCategory
:
:
Network
terminator
.
forget
(
)
)
)
)
{
NS_WARNING
(
"
failed
to
dispatch
executor
flush
event
"
)
;
}
}
return
aReason
;
}
static
bool
BackgroundFlushCallback
(
TimeStamp
)
{
RefPtr
<
nsHtml5TreeOpExecutor
>
ex
=
gBackgroundFlushList
-
>
popFirst
(
)
;
if
(
ex
)
{
ex
-
>
RunFlushLoop
(
)
;
}
if
(
gBackgroundFlushList
&
&
gBackgroundFlushList
-
>
isEmpty
(
)
)
{
delete
gBackgroundFlushList
;
gBackgroundFlushList
=
nullptr
;
gBackgroundFlushRunner
-
>
Cancel
(
)
;
gBackgroundFlushRunner
=
nullptr
;
return
true
;
}
return
true
;
}
void
nsHtml5TreeOpExecutor
:
:
ContinueInterruptedParsingAsync
(
)
{
if
(
!
mDocument
|
|
!
mDocument
-
>
IsInBackgroundWindow
(
)
)
{
nsCOMPtr
<
nsIRunnable
>
flusher
=
new
nsHtml5ExecutorReflusher
(
this
)
;
if
(
NS_FAILED
(
mDocument
-
>
Dispatch
(
TaskCategory
:
:
Network
flusher
.
forget
(
)
)
)
)
{
NS_WARNING
(
"
failed
to
dispatch
executor
flush
event
"
)
;
}
}
else
{
if
(
!
gBackgroundFlushList
)
{
gBackgroundFlushList
=
new
mozilla
:
:
LinkedList
<
nsHtml5TreeOpExecutor
>
(
)
;
}
if
(
!
isInList
(
)
)
{
gBackgroundFlushList
-
>
insertBack
(
this
)
;
}
if
(
gBackgroundFlushRunner
)
{
NS_WARNING
(
"
We
'
ve
already
scheduled
a
task
for
background
list
flush
.
"
)
;
return
;
}
gBackgroundFlushRunner
=
IdleTaskRunner
:
:
Create
(
&
BackgroundFlushCallback
"
nsHtml5TreeOpExecutor
:
:
BackgroundFlushCallback
"
250
nsContentSink
:
:
sInteractiveParseTime
/
1000
true
[
]
{
return
false
;
}
)
;
}
}
void
nsHtml5TreeOpExecutor
:
:
FlushSpeculativeLoads
(
)
{
nsTArray
<
nsHtml5SpeculativeLoad
>
speculativeLoadQueue
;
mStage
.
MoveSpeculativeLoadsTo
(
speculativeLoadQueue
)
;
const
nsHtml5SpeculativeLoad
*
start
=
speculativeLoadQueue
.
Elements
(
)
;
const
nsHtml5SpeculativeLoad
*
end
=
start
+
speculativeLoadQueue
.
Length
(
)
;
for
(
nsHtml5SpeculativeLoad
*
iter
=
const_cast
<
nsHtml5SpeculativeLoad
*
>
(
start
)
;
iter
<
end
;
+
+
iter
)
{
if
(
MOZ_UNLIKELY
(
!
mParser
)
)
{
return
;
}
iter
-
>
Perform
(
this
)
;
}
}
class
nsHtml5FlushLoopGuard
{
private
:
RefPtr
<
nsHtml5TreeOpExecutor
>
mExecutor
;
#
ifdef
DEBUG_NS_HTML5_TREE_OP_EXECUTOR_FLUSH
uint32_t
mStartTime
;
#
endif
public
:
explicit
nsHtml5FlushLoopGuard
(
nsHtml5TreeOpExecutor
*
aExecutor
)
:
mExecutor
(
aExecutor
)
#
ifdef
DEBUG_NS_HTML5_TREE_OP_EXECUTOR_FLUSH
mStartTime
(
PR_IntervalToMilliseconds
(
PR_IntervalNow
(
)
)
)
#
endif
{
mExecutor
-
>
mRunFlushLoopOnStack
=
true
;
}
~
nsHtml5FlushLoopGuard
(
)
{
#
ifdef
DEBUG_NS_HTML5_TREE_OP_EXECUTOR_FLUSH
uint32_t
timeOffTheEventLoop
=
PR_IntervalToMilliseconds
(
PR_IntervalNow
(
)
)
-
mStartTime
;
if
(
timeOffTheEventLoop
>
nsHtml5TreeOpExecutor
:
:
sLongestTimeOffTheEventLoop
)
{
nsHtml5TreeOpExecutor
:
:
sLongestTimeOffTheEventLoop
=
timeOffTheEventLoop
;
}
printf
(
"
Longest
time
off
the
event
loop
:
%
d
\
n
"
nsHtml5TreeOpExecutor
:
:
sLongestTimeOffTheEventLoop
)
;
#
endif
mExecutor
-
>
mRunFlushLoopOnStack
=
false
;
}
}
;
void
nsHtml5TreeOpExecutor
:
:
RunFlushLoop
(
)
{
AUTO_PROFILER_LABEL
(
"
nsHtml5TreeOpExecutor
:
:
RunFlushLoop
"
OTHER
)
;
if
(
mRunFlushLoopOnStack
)
{
return
;
}
nsHtml5FlushLoopGuard
guard
(
this
)
;
RefPtr
<
nsParserBase
>
parserKungFuDeathGrip
(
mParser
)
;
(
void
)
nsContentSink
:
:
WillParseImpl
(
)
;
for
(
;
;
)
{
if
(
!
mParser
)
{
mOpQueue
.
Clear
(
)
;
return
;
}
if
(
NS_FAILED
(
IsBroken
(
)
)
)
{
return
;
}
if
(
!
parserKungFuDeathGrip
-
>
IsParserEnabled
(
)
)
{
return
;
}
if
(
mFlushState
!
=
eNotFlushing
)
{
return
;
}
if
(
IsScriptExecuting
(
)
)
{
return
;
}
if
(
mReadingFromStage
)
{
nsTArray
<
nsHtml5SpeculativeLoad
>
speculativeLoadQueue
;
mStage
.
MoveOpsAndSpeculativeLoadsTo
(
mOpQueue
speculativeLoadQueue
)
;
const
nsHtml5SpeculativeLoad
*
start
=
speculativeLoadQueue
.
Elements
(
)
;
const
nsHtml5SpeculativeLoad
*
end
=
start
+
speculativeLoadQueue
.
Length
(
)
;
for
(
nsHtml5SpeculativeLoad
*
iter
=
(
nsHtml5SpeculativeLoad
*
)
start
;
iter
<
end
;
+
+
iter
)
{
iter
-
>
Perform
(
this
)
;
if
(
MOZ_UNLIKELY
(
!
mParser
)
)
{
mOpQueue
.
Clear
(
)
;
return
;
}
}
}
else
{
FlushSpeculativeLoads
(
)
;
if
(
MOZ_UNLIKELY
(
!
mParser
)
)
{
mOpQueue
.
Clear
(
)
;
return
;
}
RefPtr
<
nsHtml5StreamParser
>
streamKungFuDeathGrip
=
GetParser
(
)
-
>
GetStreamParser
(
)
;
mozilla
:
:
Unused
<
<
streamKungFuDeathGrip
;
nsresult
rv
=
GetParser
(
)
-
>
ParseUntilBlocked
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
MarkAsBroken
(
rv
)
;
return
;
}
}
if
(
mOpQueue
.
IsEmpty
(
)
)
{
return
;
}
mFlushState
=
eInFlush
;
nsIContent
*
scriptElement
=
nullptr
;
bool
interrupted
=
false
;
BeginDocUpdate
(
)
;
uint32_t
numberOfOpsToFlush
=
mOpQueue
.
Length
(
)
;
const
nsHtml5TreeOperation
*
first
=
mOpQueue
.
Elements
(
)
;
const
nsHtml5TreeOperation
*
last
=
first
+
numberOfOpsToFlush
-
1
;
for
(
nsHtml5TreeOperation
*
iter
=
const_cast
<
nsHtml5TreeOperation
*
>
(
first
)
;
;
)
{
if
(
MOZ_UNLIKELY
(
!
mParser
)
)
{
break
;
}
NS_ASSERTION
(
mFlushState
=
=
eInDocUpdate
"
Tried
to
perform
tree
op
outside
update
batch
.
"
)
;
nsresult
rv
=
iter
-
>
Perform
(
this
&
scriptElement
&
interrupted
)
;
if
(
NS_FAILED
(
rv
)
)
{
MarkAsBroken
(
rv
)
;
break
;
}
if
(
MOZ_UNLIKELY
(
iter
=
=
last
)
)
{
break
;
}
else
if
(
MOZ_UNLIKELY
(
interrupted
)
|
|
MOZ_UNLIKELY
(
nsContentSink
:
:
DidProcessATokenImpl
(
)
=
=
NS_ERROR_HTMLPARSER_INTERRUPTED
)
)
{
mOpQueue
.
RemoveElementsAt
(
0
(
iter
-
first
)
+
1
)
;
EndDocUpdate
(
)
;
mFlushState
=
eNotFlushing
;
#
ifdef
DEBUG_NS_HTML5_TREE_OP_EXECUTOR_FLUSH
printf
(
"
REFLUSH
SCHEDULED
(
executing
ops
)
:
%
d
\
n
"
+
+
sTimesFlushLoopInterrupted
)
;
#
endif
nsHtml5TreeOpExecutor
:
:
ContinueInterruptedParsingAsync
(
)
;
return
;
}
+
+
iter
;
}
mOpQueue
.
Clear
(
)
;
EndDocUpdate
(
)
;
mFlushState
=
eNotFlushing
;
if
(
MOZ_UNLIKELY
(
!
mParser
)
)
{
return
;
}
if
(
scriptElement
)
{
RunScript
(
scriptElement
)
;
StopDeflecting
(
)
;
if
(
nsContentSink
:
:
DidProcessATokenImpl
(
)
=
=
NS_ERROR_HTMLPARSER_INTERRUPTED
)
{
#
ifdef
DEBUG_NS_HTML5_TREE_OP_EXECUTOR_FLUSH
printf
(
"
REFLUSH
SCHEDULED
(
after
script
)
:
%
d
\
n
"
+
+
sTimesFlushLoopInterrupted
)
;
#
endif
nsHtml5TreeOpExecutor
:
:
ContinueInterruptedParsingAsync
(
)
;
return
;
}
}
}
}
nsresult
nsHtml5TreeOpExecutor
:
:
FlushDocumentWrite
(
)
{
nsresult
rv
=
IsBroken
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
FlushSpeculativeLoads
(
)
;
if
(
MOZ_UNLIKELY
(
!
mParser
)
)
{
mOpQueue
.
Clear
(
)
;
return
rv
;
}
if
(
mFlushState
!
=
eNotFlushing
)
{
return
rv
;
}
mFlushState
=
eInFlush
;
RefPtr
<
nsHtml5TreeOpExecutor
>
kungFuDeathGrip
(
this
)
;
RefPtr
<
nsParserBase
>
parserKungFuDeathGrip
(
mParser
)
;
mozilla
:
:
Unused
<
<
parserKungFuDeathGrip
;
NS_ASSERTION
(
!
mReadingFromStage
"
Got
doc
write
flush
when
reading
from
stage
"
)
;
#
ifdef
DEBUG
mStage
.
AssertEmpty
(
)
;
#
endif
nsIContent
*
scriptElement
=
nullptr
;
bool
interrupted
=
false
;
BeginDocUpdate
(
)
;
uint32_t
numberOfOpsToFlush
=
mOpQueue
.
Length
(
)
;
const
nsHtml5TreeOperation
*
start
=
mOpQueue
.
Elements
(
)
;
const
nsHtml5TreeOperation
*
end
=
start
+
numberOfOpsToFlush
;
for
(
nsHtml5TreeOperation
*
iter
=
const_cast
<
nsHtml5TreeOperation
*
>
(
start
)
;
iter
<
end
;
+
+
iter
)
{
if
(
MOZ_UNLIKELY
(
!
mParser
)
)
{
break
;
}
NS_ASSERTION
(
mFlushState
=
=
eInDocUpdate
"
Tried
to
perform
tree
op
outside
update
batch
.
"
)
;
rv
=
iter
-
>
Perform
(
this
&
scriptElement
&
interrupted
)
;
if
(
NS_FAILED
(
rv
)
)
{
MarkAsBroken
(
rv
)
;
break
;
}
}
mOpQueue
.
Clear
(
)
;
EndDocUpdate
(
)
;
mFlushState
=
eNotFlushing
;
if
(
MOZ_UNLIKELY
(
!
mParser
)
)
{
return
rv
;
}
if
(
scriptElement
)
{
RunScript
(
scriptElement
)
;
}
return
rv
;
}
bool
nsHtml5TreeOpExecutor
:
:
IsScriptEnabled
(
)
{
if
(
!
mDocument
|
|
!
mDocShell
)
return
true
;
nsCOMPtr
<
nsIScriptGlobalObject
>
globalObject
=
do_QueryInterface
(
mDocument
-
>
GetInnerWindow
(
)
)
;
if
(
!
globalObject
)
{
globalObject
=
mDocShell
-
>
GetScriptGlobalObject
(
)
;
}
NS_ENSURE_TRUE
(
globalObject
&
&
globalObject
-
>
GetGlobalJSObject
(
)
true
)
;
return
xpc
:
:
Scriptability
:
:
Get
(
globalObject
-
>
GetGlobalJSObject
(
)
)
.
Allowed
(
)
;
}
void
nsHtml5TreeOpExecutor
:
:
StartLayout
(
bool
*
aInterrupted
)
{
if
(
mLayoutStarted
|
|
!
mDocument
)
{
return
;
}
EndDocUpdate
(
)
;
if
(
MOZ_UNLIKELY
(
!
mParser
)
)
{
return
;
}
nsContentSink
:
:
StartLayout
(
false
)
;
if
(
mParser
)
{
*
aInterrupted
=
!
GetParser
(
)
-
>
IsParserEnabled
(
)
;
BeginDocUpdate
(
)
;
}
}
void
nsHtml5TreeOpExecutor
:
:
PauseDocUpdate
(
bool
*
aInterrupted
)
{
EndDocUpdate
(
)
;
if
(
MOZ_LIKELY
(
mParser
)
)
{
*
aInterrupted
=
!
GetParser
(
)
-
>
IsParserEnabled
(
)
;
BeginDocUpdate
(
)
;
}
}
void
nsHtml5TreeOpExecutor
:
:
RunScript
(
nsIContent
*
aScriptElement
)
{
if
(
mRunsToCompletion
)
{
return
;
}
NS_ASSERTION
(
aScriptElement
"
No
script
to
run
"
)
;
nsCOMPtr
<
nsIScriptElement
>
sele
=
do_QueryInterface
(
aScriptElement
)
;
if
(
!
sele
)
{
MOZ_ASSERT
(
nsNameSpaceManager
:
:
GetInstance
(
)
-
>
mSVGDisabled
"
Node
didn
'
t
QI
to
script
but
SVG
wasn
'
t
disabled
.
"
)
;
return
;
}
if
(
!
mParser
)
{
NS_ASSERTION
(
sele
-
>
IsMalformed
(
)
"
Script
wasn
'
t
marked
as
malformed
.
"
)
;
return
;
}
if
(
sele
-
>
GetScriptDeferred
(
)
|
|
sele
-
>
GetScriptAsync
(
)
)
{
DebugOnly
<
bool
>
block
=
sele
-
>
AttemptToExecute
(
)
;
NS_ASSERTION
(
!
block
"
Defer
or
async
script
tried
to
block
.
"
)
;
return
;
}
NS_ASSERTION
(
mFlushState
=
=
eNotFlushing
"
Tried
to
run
script
when
flushing
.
"
)
;
mReadingFromStage
=
false
;
sele
-
>
SetCreatorParser
(
GetParser
(
)
)
;
bool
block
=
sele
-
>
AttemptToExecute
(
)
;
if
(
block
)
{
if
(
mParser
)
{
GetParser
(
)
-
>
BlockParser
(
)
;
}
}
else
{
nsHtml5TreeOpExecutor
:
:
ContinueInterruptedParsingAsync
(
)
;
}
}
void
nsHtml5TreeOpExecutor
:
:
Start
(
)
{
NS_PRECONDITION
(
!
mStarted
"
Tried
to
start
when
already
started
.
"
)
;
mStarted
=
true
;
}
void
nsHtml5TreeOpExecutor
:
:
NeedsCharsetSwitchTo
(
NotNull
<
const
Encoding
*
>
aEncoding
int32_t
aSource
uint32_t
aLineNumber
)
{
EndDocUpdate
(
)
;
if
(
MOZ_UNLIKELY
(
!
mParser
)
)
{
return
;
}
nsCOMPtr
<
nsIWebShellServices
>
wss
=
do_QueryInterface
(
mDocShell
)
;
if
(
!
wss
)
{
return
;
}
if
(
NS_SUCCEEDED
(
wss
-
>
StopDocumentLoad
(
)
)
)
{
nsAutoCString
charset
;
aEncoding
-
>
Name
(
charset
)
;
wss
-
>
ReloadDocument
(
charset
.
get
(
)
aSource
)
;
}
if
(
!
mParser
)
{
if
(
aSource
=
=
kCharsetFromMetaTag
)
{
MaybeComplainAboutCharset
(
"
EncLateMetaReload
"
false
aLineNumber
)
;
}
return
;
}
if
(
aSource
=
=
kCharsetFromMetaTag
)
{
MaybeComplainAboutCharset
(
"
EncLateMetaTooLate
"
true
aLineNumber
)
;
}
GetParser
(
)
-
>
ContinueAfterFailedCharsetSwitch
(
)
;
BeginDocUpdate
(
)
;
}
void
nsHtml5TreeOpExecutor
:
:
MaybeComplainAboutCharset
(
const
char
*
aMsgId
bool
aError
uint32_t
aLineNumber
)
{
if
(
mAlreadyComplainedAboutCharset
)
{
return
;
}
if
(
!
strcmp
(
aMsgId
"
EncNoDeclaration
"
)
&
&
mDocShell
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
parent
;
mDocShell
-
>
GetSameTypeParent
(
getter_AddRefs
(
parent
)
)
;
if
(
parent
)
{
return
;
}
}
mAlreadyComplainedAboutCharset
=
true
;
nsContentUtils
:
:
ReportToConsole
(
aError
?
nsIScriptError
:
:
errorFlag
:
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
HTML
parser
"
)
mDocument
nsContentUtils
:
:
eHTMLPARSER_PROPERTIES
aMsgId
nullptr
0
nullptr
EmptyString
(
)
aLineNumber
)
;
}
void
nsHtml5TreeOpExecutor
:
:
ComplainAboutBogusProtocolCharset
(
nsIDocument
*
aDoc
)
{
NS_ASSERTION
(
!
mAlreadyComplainedAboutCharset
"
How
come
we
already
managed
to
complain
?
"
)
;
mAlreadyComplainedAboutCharset
=
true
;
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_CSTRING
(
"
HTML
parser
"
)
aDoc
nsContentUtils
:
:
eHTMLPARSER_PROPERTIES
"
EncProtocolUnsupported
"
)
;
}
nsHtml5Parser
*
nsHtml5TreeOpExecutor
:
:
GetParser
(
)
{
MOZ_ASSERT
(
!
mRunsToCompletion
)
;
return
static_cast
<
nsHtml5Parser
*
>
(
mParser
.
get
(
)
)
;
}
void
nsHtml5TreeOpExecutor
:
:
MoveOpsFrom
(
nsTArray
<
nsHtml5TreeOperation
>
&
aOpQueue
)
{
NS_PRECONDITION
(
mFlushState
=
=
eNotFlushing
"
mOpQueue
modified
during
tree
op
execution
.
"
)
;
mOpQueue
.
AppendElements
(
Move
(
aOpQueue
)
)
;
}
void
nsHtml5TreeOpExecutor
:
:
InitializeDocWriteParserState
(
nsAHtml5TreeBuilderState
*
aState
int32_t
aLine
)
{
GetParser
(
)
-
>
InitializeDocWriteParserState
(
aState
aLine
)
;
}
nsIURI
*
nsHtml5TreeOpExecutor
:
:
GetViewSourceBaseURI
(
)
{
if
(
!
mViewSourceBaseURI
)
{
nsCOMPtr
<
nsIViewSourceChannel
>
vsc
=
do_QueryInterface
(
mDocument
-
>
GetChannel
(
)
)
;
if
(
vsc
)
{
nsresult
rv
=
vsc
-
>
GetBaseURI
(
getter_AddRefs
(
mViewSourceBaseURI
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
mViewSourceBaseURI
)
{
return
mViewSourceBaseURI
;
}
}
nsCOMPtr
<
nsIURI
>
orig
=
mDocument
-
>
GetOriginalURI
(
)
;
bool
isViewSource
;
orig
-
>
SchemeIs
(
"
view
-
source
"
&
isViewSource
)
;
if
(
isViewSource
)
{
nsCOMPtr
<
nsINestedURI
>
nested
=
do_QueryInterface
(
orig
)
;
NS_ASSERTION
(
nested
"
URI
with
scheme
view
-
source
didn
'
t
QI
to
nested
!
"
)
;
nested
-
>
GetInnerURI
(
getter_AddRefs
(
mViewSourceBaseURI
)
)
;
}
else
{
mViewSourceBaseURI
=
orig
;
}
}
return
mViewSourceBaseURI
;
}
void
nsHtml5TreeOpExecutor
:
:
InitializeStatics
(
)
{
mozilla
:
:
Preferences
:
:
AddBoolVarCache
(
&
sExternalViewSource
"
view_source
.
editor
.
external
"
)
;
}
bool
nsHtml5TreeOpExecutor
:
:
IsExternalViewSource
(
)
{
if
(
!
sExternalViewSource
)
{
return
false
;
}
bool
isViewSource
=
false
;
if
(
mDocumentURI
)
{
mDocumentURI
-
>
SchemeIs
(
"
view
-
source
"
&
isViewSource
)
;
}
return
isViewSource
;
}
nsIURI
*
nsHtml5TreeOpExecutor
:
:
BaseURIForPreload
(
)
{
nsIURI
*
documentURI
=
mDocument
-
>
GetDocumentURI
(
)
;
nsIURI
*
documentBaseURI
=
mDocument
-
>
GetDocBaseURI
(
)
;
return
(
documentURI
=
=
documentBaseURI
)
?
(
mSpeculationBaseURI
?
mSpeculationBaseURI
.
get
(
)
:
documentURI
)
:
documentBaseURI
;
}
already_AddRefed
<
nsIURI
>
nsHtml5TreeOpExecutor
:
:
ConvertIfNotPreloadedYet
(
const
nsAString
&
aURL
)
{
if
(
aURL
.
IsEmpty
(
)
)
{
return
nullptr
;
}
nsIURI
*
base
=
BaseURIForPreload
(
)
;
auto
encoding
=
mDocument
-
>
GetDocumentCharacterSet
(
)
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
aURL
encoding
base
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Failed
to
create
a
URI
"
)
;
return
nullptr
;
}
if
(
ShouldPreloadURI
(
uri
)
)
{
return
uri
.
forget
(
)
;
}
return
nullptr
;
}
bool
nsHtml5TreeOpExecutor
:
:
ShouldPreloadURI
(
nsIURI
*
aURI
)
{
nsAutoCString
spec
;
nsresult
rv
=
aURI
-
>
GetSpec
(
spec
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
return
mPreloadedURLs
.
EnsureInserted
(
spec
)
;
}
void
nsHtml5TreeOpExecutor
:
:
PreloadScript
(
const
nsAString
&
aURL
const
nsAString
&
aCharset
const
nsAString
&
aType
const
nsAString
&
aCrossOrigin
const
nsAString
&
aIntegrity
bool
aScriptFromHead
bool
aAsync
bool
aDefer
)
{
nsCOMPtr
<
nsIURI
>
uri
=
ConvertIfNotPreloadedYet
(
aURL
)
;
if
(
!
uri
)
{
return
;
}
mDocument
-
>
ScriptLoader
(
)
-
>
PreloadURI
(
uri
aCharset
aType
aCrossOrigin
aIntegrity
aScriptFromHead
aAsync
aDefer
mSpeculationReferrerPolicy
)
;
}
void
nsHtml5TreeOpExecutor
:
:
PreloadStyle
(
const
nsAString
&
aURL
const
nsAString
&
aCharset
const
nsAString
&
aCrossOrigin
const
nsAString
&
aReferrerPolicy
const
nsAString
&
aIntegrity
)
{
nsCOMPtr
<
nsIURI
>
uri
=
ConvertIfNotPreloadedYet
(
aURL
)
;
if
(
!
uri
)
{
return
;
}
mozilla
:
:
net
:
:
ReferrerPolicy
referrerPolicy
=
mSpeculationReferrerPolicy
;
mozilla
:
:
net
:
:
ReferrerPolicy
styleReferrerPolicy
=
mozilla
:
:
net
:
:
AttributeReferrerPolicyFromString
(
aReferrerPolicy
)
;
if
(
styleReferrerPolicy
!
=
mozilla
:
:
net
:
:
RP_Unset
)
{
referrerPolicy
=
styleReferrerPolicy
;
}
mDocument
-
>
PreloadStyle
(
uri
Encoding
:
:
ForLabel
(
aCharset
)
aCrossOrigin
referrerPolicy
aIntegrity
)
;
}
void
nsHtml5TreeOpExecutor
:
:
PreloadImage
(
const
nsAString
&
aURL
const
nsAString
&
aCrossOrigin
const
nsAString
&
aSrcset
const
nsAString
&
aSizes
const
nsAString
&
aImageReferrerPolicy
)
{
nsCOMPtr
<
nsIURI
>
baseURI
=
BaseURIForPreload
(
)
;
bool
isImgSet
=
false
;
nsCOMPtr
<
nsIURI
>
uri
=
mDocument
-
>
ResolvePreloadImage
(
baseURI
aURL
aSrcset
aSizes
&
isImgSet
)
;
if
(
uri
&
&
ShouldPreloadURI
(
uri
)
)
{
mozilla
:
:
net
:
:
ReferrerPolicy
referrerPolicy
=
mSpeculationReferrerPolicy
;
mozilla
:
:
net
:
:
ReferrerPolicy
imageReferrerPolicy
=
mozilla
:
:
net
:
:
AttributeReferrerPolicyFromString
(
aImageReferrerPolicy
)
;
if
(
imageReferrerPolicy
!
=
mozilla
:
:
net
:
:
RP_Unset
)
{
referrerPolicy
=
imageReferrerPolicy
;
}
mDocument
-
>
MaybePreLoadImage
(
uri
aCrossOrigin
referrerPolicy
isImgSet
)
;
}
}
void
nsHtml5TreeOpExecutor
:
:
PreloadPictureSource
(
const
nsAString
&
aSrcset
const
nsAString
&
aSizes
const
nsAString
&
aType
const
nsAString
&
aMedia
)
{
mDocument
-
>
PreloadPictureImageSource
(
aSrcset
aSizes
aType
aMedia
)
;
}
void
nsHtml5TreeOpExecutor
:
:
PreloadOpenPicture
(
)
{
mDocument
-
>
PreloadPictureOpened
(
)
;
}
void
nsHtml5TreeOpExecutor
:
:
PreloadEndPicture
(
)
{
mDocument
-
>
PreloadPictureClosed
(
)
;
}
void
nsHtml5TreeOpExecutor
:
:
AddBase
(
const
nsAString
&
aURL
)
{
auto
encoding
=
mDocument
-
>
GetDocumentCharacterSet
(
)
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
mViewSourceBaseURI
)
aURL
encoding
GetViewSourceBaseURI
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
mViewSourceBaseURI
=
nullptr
;
}
}
void
nsHtml5TreeOpExecutor
:
:
SetSpeculationBase
(
const
nsAString
&
aURL
)
{
if
(
mSpeculationBaseURI
)
{
return
;
}
auto
encoding
=
mDocument
-
>
GetDocumentCharacterSet
(
)
;
DebugOnly
<
nsresult
>
rv
=
NS_NewURI
(
getter_AddRefs
(
mSpeculationBaseURI
)
aURL
encoding
mDocument
-
>
GetDocumentURI
(
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
create
a
URI
"
)
;
}
void
nsHtml5TreeOpExecutor
:
:
SetSpeculationReferrerPolicy
(
const
nsAString
&
aReferrerPolicy
)
{
if
(
aReferrerPolicy
.
IsEmpty
(
)
)
{
return
;
}
ReferrerPolicy
policy
=
mozilla
:
:
net
:
:
ReferrerPolicyFromString
(
aReferrerPolicy
)
;
if
(
policy
!
=
mozilla
:
:
net
:
:
RP_Unset
)
{
SetSpeculationReferrerPolicy
(
policy
)
;
}
}
void
nsHtml5TreeOpExecutor
:
:
AddSpeculationCSP
(
const
nsAString
&
aCSP
)
{
if
(
!
CSPService
:
:
sCSPEnabled
)
{
return
;
}
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Wrong
thread
!
"
)
;
nsIPrincipal
*
principal
=
mDocument
-
>
NodePrincipal
(
)
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
preloadCsp
;
nsCOMPtr
<
nsIDOMDocument
>
domDoc
=
do_QueryInterface
(
mDocument
)
;
nsresult
rv
=
principal
-
>
EnsurePreloadCSP
(
domDoc
getter_AddRefs
(
preloadCsp
)
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
rv
=
preloadCsp
-
>
AppendPolicy
(
aCSP
false
true
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
bool
hasReferrerPolicy
=
false
;
uint32_t
referrerPolicy
=
mozilla
:
:
net
:
:
RP_Unset
;
rv
=
preloadCsp
-
>
GetReferrerPolicy
(
&
referrerPolicy
&
hasReferrerPolicy
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
if
(
hasReferrerPolicy
)
{
SetSpeculationReferrerPolicy
(
static_cast
<
ReferrerPolicy
>
(
referrerPolicy
)
)
;
}
mDocument
-
>
ApplySettingsFromCSP
(
true
)
;
}
void
nsHtml5TreeOpExecutor
:
:
SetSpeculationReferrerPolicy
(
ReferrerPolicy
aReferrerPolicy
)
{
mSpeculationReferrerPolicy
=
aReferrerPolicy
;
}
#
ifdef
DEBUG_NS_HTML5_TREE_OP_EXECUTOR_FLUSH
uint32_t
nsHtml5TreeOpExecutor
:
:
sAppendBatchMaxSize
=
0
;
uint32_t
nsHtml5TreeOpExecutor
:
:
sAppendBatchSlotsExamined
=
0
;
uint32_t
nsHtml5TreeOpExecutor
:
:
sAppendBatchExaminations
=
0
;
uint32_t
nsHtml5TreeOpExecutor
:
:
sLongestTimeOffTheEventLoop
=
0
;
uint32_t
nsHtml5TreeOpExecutor
:
:
sTimesFlushLoopInterrupted
=
0
;
#
endif
bool
nsHtml5TreeOpExecutor
:
:
sExternalViewSource
=
false
;
