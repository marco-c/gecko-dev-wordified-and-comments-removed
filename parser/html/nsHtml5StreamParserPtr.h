#
ifndef
nsHtml5StreamParserPtr_h
#
define
nsHtml5StreamParserPtr_h
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
class
nsHtml5StreamParserReleaser
:
public
mozilla
:
:
Runnable
{
private
:
nsHtml5StreamParser
*
mPtr
;
public
:
explicit
nsHtml5StreamParserReleaser
(
nsHtml5StreamParser
*
aPtr
)
:
mozilla
:
:
Runnable
(
"
nsHtml5StreamParserReleaser
"
)
mPtr
(
aPtr
)
{
}
NS_IMETHOD
Run
(
)
override
{
mPtr
-
>
Release
(
)
;
return
NS_OK
;
}
}
;
class
nsHtml5StreamParserPtr
{
private
:
void
assign_with_AddRef
(
nsHtml5StreamParser
*
rawPtr
)
{
if
(
rawPtr
)
rawPtr
-
>
AddRef
(
)
;
assign_assuming_AddRef
(
rawPtr
)
;
}
void
*
*
begin_assignment
(
)
{
assign_assuming_AddRef
(
0
)
;
return
reinterpret_cast
<
void
*
*
>
(
&
mRawPtr
)
;
}
void
assign_assuming_AddRef
(
nsHtml5StreamParser
*
newPtr
)
{
nsHtml5StreamParser
*
oldPtr
=
mRawPtr
;
mRawPtr
=
newPtr
;
if
(
oldPtr
)
release
(
oldPtr
)
;
}
void
release
(
nsHtml5StreamParser
*
aPtr
)
{
nsCOMPtr
<
nsIRunnable
>
releaser
=
new
nsHtml5StreamParserReleaser
(
aPtr
)
;
if
(
NS_FAILED
(
aPtr
-
>
DispatchToMain
(
"
nsHtml5StreamParserReleaser
"
releaser
.
forget
(
)
)
)
)
{
NS_WARNING
(
"
Failed
to
dispatch
releaser
event
.
"
)
;
}
}
private
:
nsHtml5StreamParser
*
mRawPtr
;
public
:
~
nsHtml5StreamParserPtr
(
)
{
if
(
mRawPtr
)
release
(
mRawPtr
)
;
}
nsHtml5StreamParserPtr
(
)
:
mRawPtr
(
0
)
{
}
nsHtml5StreamParserPtr
(
const
nsHtml5StreamParserPtr
&
aSmartPtr
)
:
mRawPtr
(
aSmartPtr
.
mRawPtr
)
{
if
(
mRawPtr
)
mRawPtr
-
>
AddRef
(
)
;
}
explicit
nsHtml5StreamParserPtr
(
nsHtml5StreamParser
*
aRawPtr
)
:
mRawPtr
(
aRawPtr
)
{
if
(
mRawPtr
)
mRawPtr
-
>
AddRef
(
)
;
}
nsHtml5StreamParserPtr
&
operator
=
(
const
nsHtml5StreamParserPtr
&
rhs
)
{
assign_with_AddRef
(
rhs
.
mRawPtr
)
;
return
*
this
;
}
nsHtml5StreamParserPtr
&
operator
=
(
nsHtml5StreamParser
*
rhs
)
{
assign_with_AddRef
(
rhs
)
;
return
*
this
;
}
void
swap
(
nsHtml5StreamParserPtr
&
rhs
)
{
nsHtml5StreamParser
*
temp
=
rhs
.
mRawPtr
;
rhs
.
mRawPtr
=
mRawPtr
;
mRawPtr
=
temp
;
}
void
swap
(
nsHtml5StreamParser
*
&
rhs
)
{
nsHtml5StreamParser
*
temp
=
rhs
;
rhs
=
mRawPtr
;
mRawPtr
=
temp
;
}
template
<
typename
I
>
void
forget
(
I
*
*
rhs
)
{
NS_ASSERTION
(
rhs
"
Null
pointer
passed
to
forget
!
"
)
;
*
rhs
=
mRawPtr
;
mRawPtr
=
0
;
}
nsHtml5StreamParser
*
get
(
)
const
{
return
const_cast
<
nsHtml5StreamParser
*
>
(
mRawPtr
)
;
}
operator
nsHtml5StreamParser
*
(
)
const
{
return
get
(
)
;
}
nsHtml5StreamParser
*
operator
-
>
(
)
const
MOZ_NO_ADDREF_RELEASE_ON_RETURN
{
NS_PRECONDITION
(
mRawPtr
!
=
0
"
You
can
'
t
dereference
a
NULL
nsHtml5StreamParserPtr
with
operator
-
>
(
)
.
"
)
;
return
get
(
)
;
}
nsHtml5StreamParserPtr
*
get_address
(
)
{
return
this
;
}
const
nsHtml5StreamParserPtr
*
get_address
(
)
const
{
return
this
;
}
public
:
nsHtml5StreamParser
&
operator
*
(
)
const
{
NS_PRECONDITION
(
mRawPtr
!
=
0
"
You
can
'
t
dereference
a
NULL
nsHtml5StreamParserPtr
with
operator
*
(
)
.
"
)
;
return
*
get
(
)
;
}
nsHtml5StreamParser
*
*
StartAssignment
(
)
{
#
ifndef
NSCAP_FEATURE_INLINE_STARTASSIGNMENT
return
reinterpret_cast
<
nsHtml5StreamParser
*
*
>
(
begin_assignment
(
)
)
;
#
else
assign_assuming_AddRef
(
0
)
;
return
reinterpret_cast
<
nsHtml5StreamParser
*
*
>
(
&
mRawPtr
)
;
#
endif
}
}
;
inline
nsHtml5StreamParserPtr
*
address_of
(
nsHtml5StreamParserPtr
&
aPtr
)
{
return
aPtr
.
get_address
(
)
;
}
inline
const
nsHtml5StreamParserPtr
*
address_of
(
const
nsHtml5StreamParserPtr
&
aPtr
)
{
return
aPtr
.
get_address
(
)
;
}
class
nsHtml5StreamParserPtrGetterAddRefs
{
public
:
explicit
nsHtml5StreamParserPtrGetterAddRefs
(
nsHtml5StreamParserPtr
&
aSmartPtr
)
:
mTargetSmartPtr
(
aSmartPtr
)
{
}
operator
void
*
*
(
)
{
return
reinterpret_cast
<
void
*
*
>
(
mTargetSmartPtr
.
StartAssignment
(
)
)
;
}
operator
nsHtml5StreamParser
*
*
(
)
{
return
mTargetSmartPtr
.
StartAssignment
(
)
;
}
nsHtml5StreamParser
*
&
operator
*
(
)
{
return
*
(
mTargetSmartPtr
.
StartAssignment
(
)
)
;
}
private
:
nsHtml5StreamParserPtr
&
mTargetSmartPtr
;
}
;
inline
nsHtml5StreamParserPtrGetterAddRefs
getter_AddRefs
(
nsHtml5StreamParserPtr
&
aSmartPtr
)
{
return
nsHtml5StreamParserPtrGetterAddRefs
(
aSmartPtr
)
;
}
inline
bool
operator
=
=
(
const
nsHtml5StreamParserPtr
&
lhs
decltype
(
nullptr
)
)
{
return
lhs
.
get
(
)
=
=
nullptr
;
}
inline
bool
operator
=
=
(
decltype
(
nullptr
)
const
nsHtml5StreamParserPtr
&
rhs
)
{
return
nullptr
=
=
rhs
.
get
(
)
;
}
inline
bool
operator
!
=
(
const
nsHtml5StreamParserPtr
&
lhs
decltype
(
nullptr
)
)
{
return
lhs
.
get
(
)
!
=
nullptr
;
}
inline
bool
operator
!
=
(
decltype
(
nullptr
)
const
nsHtml5StreamParserPtr
&
rhs
)
{
return
nullptr
!
=
rhs
.
get
(
)
;
}
#
endif
