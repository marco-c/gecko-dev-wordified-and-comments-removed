#
ifndef
nsHtml5String_h
#
define
nsHtml5String_h
#
include
"
nsString
.
h
"
class
nsHtml5TreeBuilder
;
class
nsHtml5String
final
{
public
:
inline
nsHtml5String
(
)
:
nsHtml5String
(
nullptr
)
{
}
inline
MOZ_IMPLICIT
nsHtml5String
(
decltype
(
nullptr
)
)
:
mBuffer
(
nullptr
)
mLength
(
UINT32_MAX
)
{
}
inline
uint32_t
Length
(
)
const
{
return
mBuffer
?
mLength
:
0
;
}
inline
MOZ_IMPLICIT
operator
bool
(
)
const
{
return
!
(
!
mBuffer
&
&
mLength
)
;
}
void
ToString
(
nsAString
&
aString
)
;
void
CopyToBuffer
(
char16_t
*
aBuffer
)
;
bool
LowerCaseEqualsASCII
(
const
char
*
aLowerCaseLiteral
)
;
bool
EqualsASCII
(
const
char
*
aLiteral
)
;
bool
LowerCaseStartsWithASCII
(
const
char
*
aLowerCaseLiteral
)
;
bool
Equals
(
nsHtml5String
aOther
)
;
nsHtml5String
Clone
(
)
;
void
Release
(
)
;
static
nsHtml5String
FromBuffer
(
char16_t
*
aBuffer
int32_t
aLength
nsHtml5TreeBuilder
*
aTreeBuilder
)
;
static
nsHtml5String
FromLiteral
(
const
char
*
aLiteral
)
;
static
nsHtml5String
FromString
(
const
nsAString
&
aString
)
;
static
nsHtml5String
EmptyString
(
)
;
private
:
nsHtml5String
(
already_AddRefed
<
nsStringBuffer
>
aBuffer
uint32_t
aLength
)
;
nsStringBuffer
*
mBuffer
;
uint32_t
mLength
;
}
;
#
endif
