#
ifndef
nsHtml5SpeculativeLoad_h
#
define
nsHtml5SpeculativeLoad_h
#
include
"
nsString
.
h
"
#
include
"
nsContentUtils
.
h
"
class
nsHtml5TreeOpExecutor
;
enum
eHtml5SpeculativeLoad
{
#
ifdef
DEBUG
eSpeculativeLoadUninitialized
#
endif
eSpeculativeLoadBase
eSpeculativeLoadCSP
eSpeculativeLoadMetaReferrer
eSpeculativeLoadImage
eSpeculativeLoadOpenPicture
eSpeculativeLoadEndPicture
eSpeculativeLoadPictureSource
eSpeculativeLoadScript
eSpeculativeLoadScriptFromHead
eSpeculativeLoadStyle
eSpeculativeLoadManifest
eSpeculativeLoadSetDocumentCharset
eSpeculativeLoadSetDocumentMode
eSpeculativeLoadPreconnect
}
;
class
nsHtml5SpeculativeLoad
{
public
:
nsHtml5SpeculativeLoad
(
)
;
~
nsHtml5SpeculativeLoad
(
)
;
inline
void
InitBase
(
nsHtml5String
aUrl
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadBase
;
aUrl
.
ToString
(
mUrlOrSizes
)
;
}
inline
void
InitMetaCSP
(
nsHtml5String
aCSP
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadCSP
;
nsString
csp
;
aCSP
.
ToString
(
csp
)
;
mTypeOrCharsetSourceOrDocumentModeOrMetaCSPOrSizesOrIntegrity
.
Assign
(
nsContentUtils
:
:
TrimWhitespace
<
nsContentUtils
:
:
IsHTMLWhitespace
>
(
csp
)
)
;
}
inline
void
InitMetaReferrerPolicy
(
nsHtml5String
aReferrerPolicy
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadMetaReferrer
;
nsString
referrerPolicy
;
aReferrerPolicy
.
ToString
(
referrerPolicy
)
;
mReferrerPolicyOrIntegrity
.
Assign
(
nsContentUtils
:
:
TrimWhitespace
<
nsContentUtils
:
:
IsHTMLWhitespace
>
(
referrerPolicy
)
)
;
}
inline
void
InitImage
(
nsHtml5String
aUrl
nsHtml5String
aCrossOrigin
nsHtml5String
aReferrerPolicy
nsHtml5String
aSrcset
nsHtml5String
aSizes
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadImage
;
aUrl
.
ToString
(
mUrlOrSizes
)
;
aCrossOrigin
.
ToString
(
mCrossOriginOrMedia
)
;
nsString
referrerPolicy
;
aReferrerPolicy
.
ToString
(
referrerPolicy
)
;
mReferrerPolicyOrIntegrity
.
Assign
(
nsContentUtils
:
:
TrimWhitespace
<
nsContentUtils
:
:
IsHTMLWhitespace
>
(
referrerPolicy
)
)
;
aSrcset
.
ToString
(
mCharsetOrSrcset
)
;
aSizes
.
ToString
(
mTypeOrCharsetSourceOrDocumentModeOrMetaCSPOrSizesOrIntegrity
)
;
}
inline
void
InitOpenPicture
(
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadOpenPicture
;
}
inline
void
InitEndPicture
(
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadEndPicture
;
}
inline
void
InitPictureSource
(
nsHtml5String
aSrcset
nsHtml5String
aSizes
nsHtml5String
aType
nsHtml5String
aMedia
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadPictureSource
;
aSrcset
.
ToString
(
mCharsetOrSrcset
)
;
aSizes
.
ToString
(
mUrlOrSizes
)
;
aType
.
ToString
(
mTypeOrCharsetSourceOrDocumentModeOrMetaCSPOrSizesOrIntegrity
)
;
aMedia
.
ToString
(
mCrossOriginOrMedia
)
;
}
inline
void
InitScript
(
nsHtml5String
aUrl
nsHtml5String
aCharset
nsHtml5String
aType
nsHtml5String
aCrossOrigin
nsHtml5String
aIntegrity
bool
aParserInHead
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
aParserInHead
?
eSpeculativeLoadScriptFromHead
:
eSpeculativeLoadScript
;
aUrl
.
ToString
(
mUrlOrSizes
)
;
aCharset
.
ToString
(
mCharsetOrSrcset
)
;
aType
.
ToString
(
mTypeOrCharsetSourceOrDocumentModeOrMetaCSPOrSizesOrIntegrity
)
;
aCrossOrigin
.
ToString
(
mCrossOriginOrMedia
)
;
aIntegrity
.
ToString
(
mReferrerPolicyOrIntegrity
)
;
}
inline
void
InitStyle
(
nsHtml5String
aUrl
nsHtml5String
aCharset
nsHtml5String
aCrossOrigin
nsHtml5String
aReferrerPolicy
nsHtml5String
aIntegrity
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadStyle
;
aUrl
.
ToString
(
mUrlOrSizes
)
;
aCharset
.
ToString
(
mCharsetOrSrcset
)
;
aCrossOrigin
.
ToString
(
mCrossOriginOrMedia
)
;
aReferrerPolicy
.
ToString
(
mReferrerPolicyOrIntegrity
)
;
aIntegrity
.
ToString
(
mTypeOrCharsetSourceOrDocumentModeOrMetaCSPOrSizesOrIntegrity
)
;
}
inline
void
InitManifest
(
nsHtml5String
aUrl
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadManifest
;
aUrl
.
ToString
(
mUrlOrSizes
)
;
}
inline
void
InitSetDocumentCharset
(
nsACString
&
aCharset
int32_t
aCharsetSource
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadSetDocumentCharset
;
CopyUTF8toUTF16
(
aCharset
mCharsetOrSrcset
)
;
mTypeOrCharsetSourceOrDocumentModeOrMetaCSPOrSizesOrIntegrity
.
Assign
(
(
char16_t
)
aCharsetSource
)
;
}
inline
void
InitSetDocumentMode
(
nsHtml5DocumentMode
aMode
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadSetDocumentMode
;
mTypeOrCharsetSourceOrDocumentModeOrMetaCSPOrSizesOrIntegrity
.
Assign
(
(
char16_t
)
aMode
)
;
}
inline
void
InitPreconnect
(
nsHtml5String
aUrl
nsHtml5String
aCrossOrigin
)
{
NS_PRECONDITION
(
mOpCode
=
=
eSpeculativeLoadUninitialized
"
Trying
to
reinitialize
a
speculative
load
!
"
)
;
mOpCode
=
eSpeculativeLoadPreconnect
;
aUrl
.
ToString
(
mUrlOrSizes
)
;
aCrossOrigin
.
ToString
(
mCrossOriginOrMedia
)
;
}
void
Perform
(
nsHtml5TreeOpExecutor
*
aExecutor
)
;
private
:
eHtml5SpeculativeLoad
mOpCode
;
nsString
mUrlOrSizes
;
nsString
mReferrerPolicyOrIntegrity
;
nsString
mCharsetOrSrcset
;
nsString
mTypeOrCharsetSourceOrDocumentModeOrMetaCSPOrSizesOrIntegrity
;
nsString
mCrossOriginOrMedia
;
}
;
#
endif
