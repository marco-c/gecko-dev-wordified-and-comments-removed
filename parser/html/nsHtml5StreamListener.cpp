#
include
"
nsHtml5StreamListener
.
h
"
#
include
"
nsHtml5StreamParserReleaser
.
h
"
NS_IMPL_ADDREF
(
nsHtml5StreamListener
)
NS_IMPL_RELEASE
(
nsHtml5StreamListener
)
NS_INTERFACE_MAP_BEGIN
(
nsHtml5StreamListener
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIRequestObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIRequestObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIStreamListener
)
NS_INTERFACE_MAP_ENTRY
(
nsIThreadRetargetableStreamListener
)
NS_INTERFACE_MAP_END
nsHtml5StreamListener
:
:
nsHtml5StreamListener
(
nsHtml5StreamParser
*
aDelegate
)
:
mDelegateMonitor
(
"
nsHtml5StreamListener
mDelegateMonitor
"
)
mDelegate
(
aDelegate
)
{
MOZ_ASSERT
(
aDelegate
"
Must
have
delegate
"
)
;
aDelegate
-
>
AddRef
(
)
;
}
nsHtml5StreamListener
:
:
~
nsHtml5StreamListener
(
)
{
DropDelegateImpl
(
)
;
}
void
nsHtml5StreamListener
:
:
DropDelegate
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Must
not
call
DropDelegate
from
non
-
main
threads
.
"
)
;
DropDelegateImpl
(
)
;
}
void
nsHtml5StreamListener
:
:
DropDelegateImpl
(
)
{
mozilla
:
:
ReentrantMonitorAutoEnter
autoEnter
(
mDelegateMonitor
)
;
if
(
mDelegate
)
{
nsCOMPtr
<
nsIRunnable
>
releaser
=
new
nsHtml5StreamParserReleaser
(
mDelegate
)
;
if
(
NS_FAILED
(
(
(
nsHtml5StreamParser
*
)
mDelegate
)
-
>
DispatchToMain
(
releaser
.
forget
(
)
)
)
)
{
NS_WARNING
(
"
Failed
to
dispatch
releaser
event
.
"
)
;
}
mDelegate
=
nullptr
;
}
}
nsHtml5StreamParser
*
nsHtml5StreamListener
:
:
GetDelegate
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Wrong
thread
!
"
)
;
return
mDelegate
;
}
NS_IMETHODIMP
nsHtml5StreamListener
:
:
CheckListenerChain
(
)
{
if
(
MOZ_UNLIKELY
(
!
mDelegate
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsHtml5StreamListener
:
:
OnStartRequest
(
nsIRequest
*
aRequest
)
{
mozilla
:
:
ReentrantMonitorAutoEnter
autoEnter
(
mDelegateMonitor
)
;
if
(
MOZ_UNLIKELY
(
!
mDelegate
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
(
(
nsHtml5StreamParser
*
)
mDelegate
)
-
>
OnStartRequest
(
aRequest
)
;
}
NS_IMETHODIMP
nsHtml5StreamListener
:
:
OnStopRequest
(
nsIRequest
*
aRequest
nsresult
aStatus
)
{
mozilla
:
:
ReentrantMonitorAutoEnter
autoEnter
(
mDelegateMonitor
)
;
if
(
MOZ_UNLIKELY
(
!
mDelegate
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
(
(
nsHtml5StreamParser
*
)
mDelegate
)
-
>
OnStopRequest
(
aRequest
aStatus
)
;
}
NS_IMETHODIMP
nsHtml5StreamListener
:
:
OnDataAvailable
(
nsIRequest
*
aRequest
nsIInputStream
*
aInStream
uint64_t
aSourceOffset
uint32_t
aLength
)
{
mozilla
:
:
ReentrantMonitorAutoEnter
autoEnter
(
mDelegateMonitor
)
;
if
(
MOZ_UNLIKELY
(
!
mDelegate
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
(
(
nsHtml5StreamParser
*
)
mDelegate
)
-
>
OnDataAvailable
(
aRequest
aInStream
aSourceOffset
aLength
)
;
}
