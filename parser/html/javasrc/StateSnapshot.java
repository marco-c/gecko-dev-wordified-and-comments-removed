package
nu
.
validator
.
htmlparser
.
impl
;
import
nu
.
validator
.
htmlparser
.
annotation
.
Auto
;
public
class
StateSnapshot
<
T
>
implements
TreeBuilderState
<
T
>
{
private
final
Auto
StackNode
<
T
>
[
]
stack
;
private
final
Auto
StackNode
<
T
>
[
]
listOfActiveFormattingElements
;
private
final
Auto
int
[
]
templateModeStack
;
private
final
T
formPointer
;
private
final
T
headPointer
;
private
final
int
mode
;
private
final
int
originalMode
;
private
final
boolean
framesetOk
;
private
final
boolean
needToDropLF
;
private
final
boolean
quirks
;
StateSnapshot
(
StackNode
<
T
>
[
]
stack
StackNode
<
T
>
[
]
listOfActiveFormattingElements
int
[
]
templateModeStack
T
formPointer
T
headPointer
int
mode
int
originalMode
boolean
framesetOk
boolean
needToDropLF
boolean
quirks
)
{
this
.
stack
=
stack
;
this
.
listOfActiveFormattingElements
=
listOfActiveFormattingElements
;
this
.
templateModeStack
=
templateModeStack
;
this
.
formPointer
=
formPointer
;
this
.
headPointer
=
headPointer
;
this
.
mode
=
mode
;
this
.
originalMode
=
originalMode
;
this
.
framesetOk
=
framesetOk
;
this
.
needToDropLF
=
needToDropLF
;
this
.
quirks
=
quirks
;
}
Override
public
StackNode
<
T
>
[
]
getStack
(
)
{
return
stack
;
}
Override
public
int
[
]
getTemplateModeStack
(
)
{
return
templateModeStack
;
}
Override
public
StackNode
<
T
>
[
]
getListOfActiveFormattingElements
(
)
{
return
listOfActiveFormattingElements
;
}
Override
public
T
getFormPointer
(
)
{
return
formPointer
;
}
Override
public
T
getHeadPointer
(
)
{
return
headPointer
;
}
Override
public
int
getMode
(
)
{
return
mode
;
}
Override
public
int
getOriginalMode
(
)
{
return
originalMode
;
}
Override
public
boolean
isFramesetOk
(
)
{
return
framesetOk
;
}
Override
public
boolean
isNeedToDropLF
(
)
{
return
needToDropLF
;
}
Override
public
boolean
isQuirks
(
)
{
return
quirks
;
}
Override
public
int
getListOfActiveFormattingElementsLength
(
)
{
return
listOfActiveFormattingElements
.
length
;
}
Override
public
int
getStackLength
(
)
{
return
stack
.
length
;
}
Override
public
int
getTemplateModeStackLength
(
)
{
return
templateModeStack
.
length
;
}
SuppressWarnings
(
"
unused
"
)
private
void
destructor
(
)
{
for
(
int
i
=
0
;
i
<
stack
.
length
;
i
+
+
)
{
stack
[
i
]
.
release
(
null
)
;
}
for
(
int
i
=
0
;
i
<
listOfActiveFormattingElements
.
length
;
i
+
+
)
{
if
(
listOfActiveFormattingElements
[
i
]
!
=
null
)
{
listOfActiveFormattingElements
[
i
]
.
release
(
null
)
;
}
}
}
}
