#
ifndef
nsHtml5Portability_h
#
define
nsHtml5Portability_h
#
include
"
nsIAtom
.
h
"
#
include
"
nsHtml5AtomTable
.
h
"
#
include
"
nsHtml5String
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsTraceRefcnt
.
h
"
#
include
"
jArray
.
h
"
#
include
"
nsHtml5ArrayCopy
.
h
"
#
include
"
nsAHtml5TreeBuilderState
.
h
"
#
include
"
nsHtml5Atoms
.
h
"
#
include
"
nsHtml5ByteReadable
.
h
"
#
include
"
nsIUnicodeDecoder
.
h
"
#
include
"
nsHtml5Macros
.
h
"
#
include
"
nsIContentHandle
.
h
"
class
nsHtml5StreamParser
;
class
nsHtml5AttributeName
;
class
nsHtml5ElementName
;
class
nsHtml5Tokenizer
;
class
nsHtml5TreeBuilder
;
class
nsHtml5MetaScanner
;
class
nsHtml5UTF16Buffer
;
class
nsHtml5StateSnapshot
;
class
nsHtml5Portability
{
public
:
static
nsIAtom
*
newLocalNameFromBuffer
(
char16_t
*
buf
int32_t
offset
int32_t
length
nsHtml5AtomTable
*
interner
)
;
static
nsHtml5String
newStringFromBuffer
(
char16_t
*
buf
int32_t
offset
int32_t
length
nsHtml5TreeBuilder
*
treeBuilder
)
;
static
nsHtml5String
newEmptyString
(
)
;
static
nsHtml5String
newStringFromLiteral
(
const
char
*
literal
)
;
static
nsHtml5String
newStringFromString
(
nsHtml5String
string
)
;
static
jArray
<
char16_t
int32_t
>
newCharArrayFromLocal
(
nsIAtom
*
local
)
;
static
jArray
<
char16_t
int32_t
>
newCharArrayFromString
(
nsHtml5String
string
)
;
static
nsIAtom
*
newLocalFromLocal
(
nsIAtom
*
local
nsHtml5AtomTable
*
interner
)
;
static
bool
localEqualsBuffer
(
nsIAtom
*
local
char16_t
*
buf
int32_t
offset
int32_t
length
)
;
static
bool
lowerCaseLiteralIsPrefixOfIgnoreAsciiCaseString
(
const
char
*
lowerCaseLiteral
nsHtml5String
string
)
;
static
bool
lowerCaseLiteralEqualsIgnoreAsciiCaseString
(
const
char
*
lowerCaseLiteral
nsHtml5String
string
)
;
static
bool
literalEqualsString
(
const
char
*
literal
nsHtml5String
string
)
;
static
bool
stringEqualsString
(
nsHtml5String
one
nsHtml5String
other
)
;
static
void
initializeStatics
(
)
;
static
void
releaseStatics
(
)
;
}
;
#
endif
