#
ifndef
nsHtml5Speculation_h
#
define
nsHtml5Speculation_h
#
include
"
nsHtml5OwningUTF16Buffer
.
h
"
#
include
"
nsAHtml5TreeBuilderState
.
h
"
#
include
"
nsHtml5TreeOperation
.
h
"
#
include
"
nsAHtml5TreeOpSink
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
class
nsHtml5Speculation
final
:
public
nsAHtml5TreeOpSink
{
public
:
nsHtml5Speculation
(
nsHtml5OwningUTF16Buffer
*
aBuffer
int32_t
aStart
int32_t
aStartLineNumber
int32_t
aStartColumnNumber
nsAHtml5TreeBuilderState
*
aSnapshot
)
;
~
nsHtml5Speculation
(
)
;
nsHtml5OwningUTF16Buffer
*
GetBuffer
(
)
{
return
mBuffer
;
}
int32_t
GetStart
(
)
{
return
mStart
;
}
int32_t
GetStartLineNumber
(
)
{
return
mStartLineNumber
;
}
int32_t
GetStartColumnNumber
(
)
{
return
mStartColumnNumber
;
}
nsAHtml5TreeBuilderState
*
GetSnapshot
(
)
{
return
mSnapshot
.
get
(
)
;
}
[
[
nodiscard
]
]
virtual
bool
MoveOpsFrom
(
nsTArray
<
nsHtml5TreeOperation
>
&
aOpQueue
)
override
;
[
[
nodiscard
]
]
bool
FlushToSink
(
nsAHtml5TreeOpSink
*
aSink
)
;
private
:
RefPtr
<
nsHtml5OwningUTF16Buffer
>
mBuffer
;
int32_t
mStart
;
int32_t
mStartLineNumber
;
int32_t
mStartColumnNumber
;
mozilla
:
:
UniquePtr
<
nsAHtml5TreeBuilderState
>
mSnapshot
;
nsTArray
<
nsHtml5TreeOperation
>
mOpQueue
;
}
;
#
endif
