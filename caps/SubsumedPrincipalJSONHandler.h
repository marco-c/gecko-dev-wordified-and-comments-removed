#
ifndef
mozilla_SubsumedPrincipalJSONHandler_h
#
define
mozilla_SubsumedPrincipalJSONHandler_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
BasePrincipal
.
h
"
#
include
"
ContentPrincipalJSONHandler
.
h
"
#
include
"
NullPrincipalJSONHandler
.
h
"
#
include
"
SharedJSONHandler
.
h
"
namespace
mozilla
{
class
SubsumedPrincipalJSONHandlerTypes
{
public
:
enum
class
State
{
Init
StartObject
SystemPrincipal_Key
SystemPrincipal_StartObject
SystemPrincipal_EndObject
NullPrincipal_Inner
ContentPrincipal_Inner
EndObject
Error
}
;
using
InnerHandlerT
=
Maybe
<
Variant
<
NullPrincipalJSONHandler
ContentPrincipalJSONHandler
>
>
;
static
constexpr
bool
CanContainExpandedPrincipal
=
false
;
}
;
class
SubsumedPrincipalJSONHandler
:
public
ContainerPrincipalJSONHandler
<
SubsumedPrincipalJSONHandlerTypes
>
{
using
State
=
SubsumedPrincipalJSONHandlerTypes
:
:
State
;
using
InnerHandlerT
=
SubsumedPrincipalJSONHandlerTypes
:
:
InnerHandlerT
;
public
:
SubsumedPrincipalJSONHandler
(
)
=
default
;
virtual
~
SubsumedPrincipalJSONHandler
(
)
=
default
;
bool
HasAccepted
(
)
const
{
return
mState
=
=
State
:
:
EndObject
;
}
protected
:
virtual
void
SetErrorState
(
)
override
{
mState
=
State
:
:
Error
;
}
}
;
}
#
endif
