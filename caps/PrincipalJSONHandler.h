#
ifndef
mozilla_PrincipalJSONHandler_h
#
define
mozilla_PrincipalJSONHandler_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
js
/
JSON
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
BasePrincipal
.
h
"
#
include
"
ContentPrincipalJSONHandler
.
h
"
#
include
"
ExpandedPrincipalJSONHandler
.
h
"
#
include
"
NullPrincipalJSONHandler
.
h
"
#
include
"
SharedJSONHandler
.
h
"
namespace
mozilla
{
class
PrincipalJSONHandlerTypes
{
public
:
enum
class
State
{
Init
StartObject
SystemPrincipal_Key
SystemPrincipal_StartObject
SystemPrincipal_EndObject
NullPrincipal_Inner
ContentPrincipal_Inner
ExpandedPrincipal_Inner
EndObject
Error
}
;
using
InnerHandlerT
=
Maybe
<
Variant
<
NullPrincipalJSONHandler
ContentPrincipalJSONHandler
ExpandedPrincipalJSONHandler
>
>
;
static
constexpr
bool
CanContainExpandedPrincipal
=
true
;
}
;
class
PrincipalJSONHandler
:
public
ContainerPrincipalJSONHandler
<
PrincipalJSONHandlerTypes
>
{
using
State
=
PrincipalJSONHandlerTypes
:
:
State
;
using
InnerHandlerT
=
PrincipalJSONHandlerTypes
:
:
InnerHandlerT
;
public
:
PrincipalJSONHandler
(
)
=
default
;
virtual
~
PrincipalJSONHandler
(
)
=
default
;
virtual
void
error
(
const
char
*
msg
uint32_t
line
uint32_t
column
)
override
{
NS_WARNING
(
nsPrintfCString
(
"
JSON
Error
:
%
s
at
line
%
u
column
%
u
of
the
JSON
data
"
msg
line
column
)
.
get
(
)
)
;
}
already_AddRefed
<
BasePrincipal
>
Get
(
)
{
return
mPrincipal
.
forget
(
)
;
}
protected
:
virtual
void
SetErrorState
(
)
override
{
mState
=
State
:
:
Error
;
}
}
;
}
#
endif
