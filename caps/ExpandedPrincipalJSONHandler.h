#
ifndef
mozilla_ExpandedPrincipalJSONHandler_h
#
define
mozilla_ExpandedPrincipalJSONHandler_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
OriginAttributes
.
h
"
#
include
"
ExpandedPrincipal
.
h
"
#
include
"
SubsumedPrincipalJSONHandler
.
h
"
#
include
"
SharedJSONHandler
.
h
"
namespace
mozilla
{
class
ExpandedPrincipalJSONHandler
:
public
PrincipalJSONHandlerShared
{
enum
class
State
{
Init
StartObject
SpecsKey
SuffixKey
StartArray
SubsumedPrincipal
AfterPropertyValue
EndObject
Error
}
;
public
:
ExpandedPrincipalJSONHandler
(
)
=
default
;
virtual
~
ExpandedPrincipalJSONHandler
(
)
=
default
;
virtual
bool
startObject
(
)
override
;
using
PrincipalJSONHandlerShared
:
:
propertyName
;
virtual
bool
propertyName
(
const
JS
:
:
Latin1Char
*
name
size_t
length
)
override
;
virtual
bool
endObject
(
)
override
;
virtual
bool
startArray
(
)
override
;
virtual
bool
endArray
(
)
override
;
using
PrincipalJSONHandlerShared
:
:
stringValue
;
virtual
bool
stringValue
(
const
JS
:
:
Latin1Char
*
str
size_t
length
)
override
;
bool
HasAccepted
(
)
const
{
return
mState
=
=
State
:
:
EndObject
;
}
protected
:
virtual
void
SetErrorState
(
)
override
{
mState
=
State
:
:
Error
;
}
private
:
bool
ProcessSubsumedResult
(
bool
aResult
)
;
private
:
State
mState
=
State
:
:
Init
;
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
mAllowList
;
OriginAttributes
mAttrs
;
Maybe
<
SubsumedPrincipalJSONHandler
>
mSubsumedHandler
;
}
;
}
#
endif
