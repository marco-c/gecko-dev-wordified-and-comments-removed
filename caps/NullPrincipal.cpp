#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
NullPrincipal
.
h
"
#
include
"
NullPrincipalURI
.
h
"
#
include
"
nsMemory
.
h
"
#
include
"
nsIURIWithPrincipal
.
h
"
#
include
"
nsIClassInfoImpl
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
ContentPrincipal
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
#
include
"
pratom
.
h
"
using
namespace
mozilla
;
NS_IMPL_CLASSINFO
(
NullPrincipal
nullptr
nsIClassInfo
:
:
MAIN_THREAD_ONLY
NS_NULLPRINCIPAL_CID
)
NS_IMPL_QUERY_INTERFACE_CI
(
NullPrincipal
nsIPrincipal
nsISerializable
)
NS_IMPL_CI_INTERFACE_GETTER
(
NullPrincipal
nsIPrincipal
nsISerializable
)
already_AddRefed
<
NullPrincipal
>
NullPrincipal
:
:
CreateWithInheritedAttributes
(
nsIPrincipal
*
aInheritFrom
)
{
RefPtr
<
NullPrincipal
>
nullPrin
=
new
NullPrincipal
(
)
;
nsresult
rv
=
nullPrin
-
>
Init
(
Cast
(
aInheritFrom
)
-
>
OriginAttributesRef
(
)
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
nullPrin
.
forget
(
)
;
}
already_AddRefed
<
NullPrincipal
>
NullPrincipal
:
:
CreateWithInheritedAttributes
(
nsIDocShell
*
aDocShell
bool
aIsFirstParty
)
{
OriginAttributes
attrs
=
nsDocShell
:
:
Cast
(
aDocShell
)
-
>
GetOriginAttributes
(
)
;
attrs
.
SetFirstPartyDomain
(
aIsFirstParty
NS_LITERAL_CSTRING
(
NULL_PRINCIPAL_FIRST_PARTY_DOMAIN
)
)
;
RefPtr
<
NullPrincipal
>
nullPrin
=
new
NullPrincipal
(
)
;
nsresult
rv
=
nullPrin
-
>
Init
(
attrs
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
nullPrin
.
forget
(
)
;
}
already_AddRefed
<
NullPrincipal
>
NullPrincipal
:
:
Create
(
const
OriginAttributes
&
aOriginAttributes
nsIURI
*
aURI
)
{
RefPtr
<
NullPrincipal
>
nullPrin
=
new
NullPrincipal
(
)
;
nsresult
rv
=
nullPrin
-
>
Init
(
aOriginAttributes
aURI
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
nullPrin
.
forget
(
)
;
}
nsresult
NullPrincipal
:
:
Init
(
const
OriginAttributes
&
aOriginAttributes
nsIURI
*
aURI
)
{
mOriginAttributes
=
aOriginAttributes
;
if
(
aURI
)
{
nsAutoCString
scheme
;
nsresult
rv
=
aURI
-
>
GetScheme
(
scheme
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
scheme
.
EqualsLiteral
(
NS_NULLPRINCIPAL_SCHEME
)
NS_ERROR_NOT_AVAILABLE
)
;
mURI
=
aURI
;
}
else
{
mURI
=
NullPrincipalURI
:
:
Create
(
)
;
NS_ENSURE_TRUE
(
mURI
NS_ERROR_NOT_AVAILABLE
)
;
}
FinishInit
(
)
;
return
NS_OK
;
}
nsresult
NullPrincipal
:
:
GetScriptLocation
(
nsACString
&
aStr
)
{
return
mURI
-
>
GetSpec
(
aStr
)
;
}
NS_IMETHODIMP
NullPrincipal
:
:
GetHashValue
(
uint32_t
*
aResult
)
{
*
aResult
=
(
NS_PTR_TO_INT32
(
this
)
>
>
2
)
;
return
NS_OK
;
}
NS_IMETHODIMP
NullPrincipal
:
:
SetCsp
(
nsIContentSecurityPolicy
*
aCsp
)
{
MOZ_ASSERT
(
!
mCSP
"
do
not
destroy
an
existing
CSP
"
)
;
if
(
mCSP
)
{
return
NS_ERROR_ALREADY_INITIALIZED
;
}
mCSP
=
aCsp
;
return
NS_OK
;
}
NS_IMETHODIMP
NullPrincipal
:
:
GetURI
(
nsIURI
*
*
aURI
)
{
return
NS_EnsureSafeToReturn
(
mURI
aURI
)
;
}
NS_IMETHODIMP
NullPrincipal
:
:
GetDomain
(
nsIURI
*
*
aDomain
)
{
return
NS_EnsureSafeToReturn
(
mURI
aDomain
)
;
}
NS_IMETHODIMP
NullPrincipal
:
:
SetDomain
(
nsIURI
*
aDomain
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
NullPrincipal
:
:
GetOriginNoSuffixInternal
(
nsACString
&
aOrigin
)
{
return
mURI
-
>
GetSpec
(
aOrigin
)
;
}
bool
NullPrincipal
:
:
MayLoadInternal
(
nsIURI
*
aURI
)
{
nsCOMPtr
<
nsIURIWithPrincipal
>
uriPrinc
=
do_QueryInterface
(
aURI
)
;
if
(
uriPrinc
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
;
uriPrinc
-
>
GetPrincipal
(
getter_AddRefs
(
principal
)
)
;
if
(
principal
=
=
this
)
{
return
true
;
}
}
return
false
;
}
NS_IMETHODIMP
NullPrincipal
:
:
GetBaseDomain
(
nsACString
&
aBaseDomain
)
{
return
mURI
-
>
GetPath
(
aBaseDomain
)
;
}
NS_IMETHODIMP
NullPrincipal
:
:
GetAddonId
(
nsAString
&
aAddonId
)
{
aAddonId
.
Truncate
(
)
;
return
NS_OK
;
}
;
NS_IMETHODIMP
NullPrincipal
:
:
Read
(
nsIObjectInputStream
*
aStream
)
{
nsAutoCString
spec
;
nsresult
rv
=
aStream
-
>
ReadCString
(
spec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIURI
>
uri
;
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
spec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
suffix
;
rv
=
aStream
-
>
ReadCString
(
suffix
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
OriginAttributes
attrs
;
bool
ok
=
attrs
.
PopulateFromSuffix
(
suffix
)
;
NS_ENSURE_TRUE
(
ok
NS_ERROR_FAILURE
)
;
return
Init
(
attrs
uri
)
;
}
NS_IMETHODIMP
NullPrincipal
:
:
Write
(
nsIObjectOutputStream
*
aStream
)
{
NS_ENSURE_STATE
(
mURI
)
;
nsAutoCString
spec
;
nsresult
rv
=
mURI
-
>
GetSpec
(
spec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aStream
-
>
WriteStringZ
(
spec
.
get
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
suffix
;
OriginAttributesRef
(
)
.
CreateSuffix
(
suffix
)
;
rv
=
aStream
-
>
WriteStringZ
(
suffix
.
get
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
