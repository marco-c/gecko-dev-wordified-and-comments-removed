#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
NullPrincipal
.
h
"
#
include
"
NullPrincipalURI
.
h
"
#
include
"
nsMemory
.
h
"
#
include
"
nsIClassInfoImpl
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
ContentPrincipal
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
#
include
"
pratom
.
h
"
#
include
"
json
/
json
.
h
"
using
namespace
mozilla
;
NS_IMPL_CLASSINFO
(
NullPrincipal
nullptr
nsIClassInfo
:
:
MAIN_THREAD_ONLY
NS_NULLPRINCIPAL_CID
)
NS_IMPL_QUERY_INTERFACE_CI
(
NullPrincipal
nsIPrincipal
nsISerializable
)
NS_IMPL_CI_INTERFACE_GETTER
(
NullPrincipal
nsIPrincipal
nsISerializable
)
already_AddRefed
<
NullPrincipal
>
NullPrincipal
:
:
CreateWithInheritedAttributes
(
nsIPrincipal
*
aInheritFrom
)
{
MOZ_ASSERT
(
aInheritFrom
)
;
return
CreateWithInheritedAttributes
(
Cast
(
aInheritFrom
)
-
>
OriginAttributesRef
(
)
false
)
;
}
already_AddRefed
<
NullPrincipal
>
NullPrincipal
:
:
CreateWithInheritedAttributes
(
nsIDocShell
*
aDocShell
bool
aIsFirstParty
)
{
MOZ_ASSERT
(
aDocShell
)
;
OriginAttributes
attrs
=
nsDocShell
:
:
Cast
(
aDocShell
)
-
>
GetOriginAttributes
(
)
;
return
CreateWithInheritedAttributes
(
attrs
aIsFirstParty
)
;
}
already_AddRefed
<
NullPrincipal
>
NullPrincipal
:
:
CreateWithInheritedAttributes
(
const
OriginAttributes
&
aOriginAttributes
bool
aIsFirstParty
)
{
RefPtr
<
NullPrincipal
>
nullPrin
=
new
NullPrincipal
(
)
;
nullPrin
-
>
Init
(
aOriginAttributes
aIsFirstParty
)
;
return
nullPrin
.
forget
(
)
;
}
already_AddRefed
<
NullPrincipal
>
NullPrincipal
:
:
Create
(
const
OriginAttributes
&
aOriginAttributes
nsIURI
*
aURI
)
{
RefPtr
<
NullPrincipal
>
nullPrin
=
new
NullPrincipal
(
)
;
nsresult
rv
=
nullPrin
-
>
Init
(
aOriginAttributes
aURI
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
nullPrin
.
forget
(
)
;
}
already_AddRefed
<
NullPrincipal
>
NullPrincipal
:
:
CreateWithoutOriginAttributes
(
)
{
return
NullPrincipal
:
:
Create
(
OriginAttributes
(
)
nullptr
)
;
}
nsresult
NullPrincipal
:
:
Init
(
const
OriginAttributes
&
aOriginAttributes
nsIURI
*
aURI
)
{
if
(
aURI
)
{
nsAutoCString
scheme
;
nsresult
rv
=
aURI
-
>
GetScheme
(
scheme
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
scheme
.
EqualsLiteral
(
NS_NULLPRINCIPAL_SCHEME
)
NS_ERROR_NOT_AVAILABLE
)
;
mURI
=
aURI
;
}
else
{
mURI
=
new
NullPrincipalURI
(
)
;
}
nsAutoCString
originNoSuffix
;
DebugOnly
<
nsresult
>
rv
=
mURI
-
>
GetSpec
(
originNoSuffix
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
FinishInit
(
originNoSuffix
aOriginAttributes
)
;
return
NS_OK
;
}
void
NullPrincipal
:
:
Init
(
const
OriginAttributes
&
aOriginAttributes
bool
aIsFirstParty
)
{
mURI
=
new
NullPrincipalURI
(
)
;
nsAutoCString
originNoSuffix
;
DebugOnly
<
nsresult
>
rv
=
mURI
-
>
GetSpec
(
originNoSuffix
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
nsAutoCString
path
;
rv
=
mURI
-
>
GetPathQueryRef
(
path
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
OriginAttributes
attrs
(
aOriginAttributes
)
;
if
(
aIsFirstParty
)
{
path
.
Mid
(
path
1
path
.
Length
(
)
-
2
)
;
path
.
AppendLiteral
(
"
.
mozilla
"
)
;
attrs
.
SetFirstPartyDomain
(
true
path
)
;
}
FinishInit
(
originNoSuffix
attrs
)
;
}
nsresult
NullPrincipal
:
:
GetScriptLocation
(
nsACString
&
aStr
)
{
return
mURI
-
>
GetSpec
(
aStr
)
;
}
uint32_t
NullPrincipal
:
:
GetHashValue
(
)
{
return
(
NS_PTR_TO_INT32
(
this
)
>
>
2
)
;
}
NS_IMETHODIMP
NullPrincipal
:
:
GetURI
(
nsIURI
*
*
aURI
)
{
nsCOMPtr
<
nsIURI
>
uri
=
mURI
;
uri
.
forget
(
aURI
)
;
return
NS_OK
;
}
NS_IMETHODIMP
NullPrincipal
:
:
GetIsOriginPotentiallyTrustworthy
(
bool
*
aResult
)
{
*
aResult
=
false
;
return
NS_OK
;
}
NS_IMETHODIMP
NullPrincipal
:
:
GetDomain
(
nsIURI
*
*
aDomain
)
{
nsCOMPtr
<
nsIURI
>
uri
=
mURI
;
uri
.
forget
(
aDomain
)
;
return
NS_OK
;
}
NS_IMETHODIMP
NullPrincipal
:
:
SetDomain
(
nsIURI
*
aDomain
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
bool
NullPrincipal
:
:
MayLoadInternal
(
nsIURI
*
aURI
)
{
nsCOMPtr
<
nsIPrincipal
>
blobPrincipal
;
if
(
dom
:
:
BlobURLProtocolHandler
:
:
GetBlobURLPrincipal
(
aURI
getter_AddRefs
(
blobPrincipal
)
)
)
{
MOZ_ASSERT
(
blobPrincipal
)
;
return
SubsumesInternal
(
blobPrincipal
BasePrincipal
:
:
ConsiderDocumentDomain
)
;
}
return
false
;
}
NS_IMETHODIMP
NullPrincipal
:
:
GetBaseDomain
(
nsACString
&
aBaseDomain
)
{
return
mURI
-
>
GetPathQueryRef
(
aBaseDomain
)
;
}
NS_IMETHODIMP
NullPrincipal
:
:
GetAddonId
(
nsAString
&
aAddonId
)
{
aAddonId
.
Truncate
(
)
;
return
NS_OK
;
}
;
NS_IMETHODIMP
NullPrincipal
:
:
Read
(
nsIObjectInputStream
*
aStream
)
{
nsAutoCString
spec
;
nsresult
rv
=
aStream
-
>
ReadCString
(
spec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIURI
>
uri
;
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
spec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
suffix
;
rv
=
aStream
-
>
ReadCString
(
suffix
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
OriginAttributes
attrs
;
bool
ok
=
attrs
.
PopulateFromSuffix
(
suffix
)
;
NS_ENSURE_TRUE
(
ok
NS_ERROR_FAILURE
)
;
return
Init
(
attrs
uri
)
;
}
NS_IMETHODIMP
NullPrincipal
:
:
Write
(
nsIObjectOutputStream
*
aStream
)
{
MOZ_RELEASE_ASSERT
(
false
"
Old
style
serialization
is
removed
"
)
;
return
NS_OK
;
}
nsresult
NullPrincipal
:
:
PopulateJSONObject
(
Json
:
:
Value
&
aObject
)
{
nsAutoCString
principalURI
;
nsresult
rv
=
mURI
-
>
GetSpec
(
principalURI
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
MOZ_ASSERT
(
principalURI
.
Length
(
)
=
=
NS_LITERAL_CSTRING
(
NS_NULLPRINCIPAL_SCHEME
"
:
"
)
.
Length
(
)
+
NSID_LENGTH
-
1
"
Length
of
the
URI
should
be
:
(
scheme
uuid
-
nullptr
)
"
)
;
aObject
[
std
:
:
to_string
(
eSpec
)
]
=
principalURI
.
get
(
)
;
nsAutoCString
suffix
;
OriginAttributesRef
(
)
.
CreateSuffix
(
suffix
)
;
if
(
suffix
.
Length
(
)
>
0
)
{
aObject
[
std
:
:
to_string
(
eSuffix
)
]
=
suffix
.
get
(
)
;
}
return
NS_OK
;
}
already_AddRefed
<
BasePrincipal
>
NullPrincipal
:
:
FromProperties
(
nsTArray
<
NullPrincipal
:
:
KeyVal
>
&
aFields
)
{
MOZ_ASSERT
(
aFields
.
Length
(
)
=
=
eMax
+
1
"
Must
have
all
the
keys
"
)
;
nsresult
rv
;
nsCOMPtr
<
nsIURI
>
uri
;
OriginAttributes
attrs
;
for
(
const
auto
&
field
:
aFields
)
{
switch
(
field
.
key
)
{
case
NullPrincipal
:
:
eSpec
:
if
(
!
field
.
valueWasSerialized
)
{
MOZ_ASSERT
(
false
"
Null
principals
require
a
spec
URI
in
serialized
JSON
"
)
;
return
nullptr
;
}
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
field
.
value
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
break
;
case
NullPrincipal
:
:
eSuffix
:
bool
ok
=
attrs
.
PopulateFromSuffix
(
field
.
value
)
;
if
(
!
ok
)
{
return
nullptr
;
}
break
;
}
}
if
(
!
uri
)
{
MOZ_ASSERT
(
false
"
No
URI
deserialized
"
)
;
return
nullptr
;
}
RefPtr
<
NullPrincipal
>
nullPrincipal
=
new
NullPrincipal
(
)
;
rv
=
nullPrincipal
-
>
Init
(
attrs
uri
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
return
nullPrincipal
.
forget
(
)
;
}
