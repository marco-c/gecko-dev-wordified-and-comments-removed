#
include
"
nsIContentSecurityPolicy
.
idl
"
#
include
"
nsISerializable
.
idl
"
#
include
"
nsIAboutModule
.
idl
"
#
include
"
nsIReferrerInfo
.
idl
"
%
{
C
+
+
struct
JSPrincipals
;
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
namespace
mozilla
{
class
OriginAttributes
;
}
#
define
DECL_FAST_INLINE_HELPER
(
method_
)
\
inline
bool
method_
(
nsIPrincipal
*
aOther
)
\
{
\
mozilla
:
:
DebugOnly
<
bool
>
val
=
false
;
\
MOZ_ASSERT_IF
(
this
=
=
aOther
\
NS_SUCCEEDED
(
method_
(
aOther
&
val
)
)
&
&
val
)
;
\
\
bool
retVal
=
false
;
\
return
\
this
=
=
aOther
|
|
\
(
NS_SUCCEEDED
(
method_
(
aOther
&
retVal
)
)
&
&
retVal
)
;
\
}
%
}
interface
nsIURI
;
[
ptr
]
native
JSContext
(
JSContext
)
;
[
ptr
]
native
JSPrincipals
(
JSPrincipals
)
;
[
ref
]
native
PrincipalArray
(
const
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
)
;
[
ref
]
native
const_OriginAttributes
(
const
mozilla
:
:
OriginAttributes
)
;
native
ReferrerPolicy
(
mozilla
:
:
dom
:
:
ReferrerPolicy
)
;
[
scriptable
builtinclass
uuid
(
f75f502d
-
79fd
-
48be
-
a079
-
e5a7b8f80c8b
)
]
interface
nsIPrincipal
:
nsISerializable
{
boolean
equals
(
in
nsIPrincipal
other
)
;
boolean
equalsConsideringDomain
(
in
nsIPrincipal
other
)
;
%
{
C
+
+
DECL_FAST_INLINE_HELPER
(
Equals
)
DECL_FAST_INLINE_HELPER
(
EqualsConsideringDomain
)
%
}
boolean
equalsURI
(
in
nsIURI
aOtherURI
)
;
[
notxpcom
nostdcall
]
readonly
attribute
unsigned
long
hashValue
;
[
infallible
]
readonly
attribute
nsIURI
URI
;
[
noscript
]
attribute
nsIURI
domain
;
boolean
subsumes
(
in
nsIPrincipal
other
)
;
boolean
subsumesConsideringDomain
(
in
nsIPrincipal
other
)
;
boolean
subsumesConsideringDomainIgnoringFPD
(
in
nsIPrincipal
other
)
;
%
{
C
+
+
DECL_FAST_INLINE_HELPER
(
Subsumes
)
DECL_FAST_INLINE_HELPER
(
SubsumesConsideringDomain
)
DECL_FAST_INLINE_HELPER
(
SubsumesConsideringDomainIgnoringFPD
)
#
undef
DECL_FAST_INLINE_HELPER
%
}
void
checkMayLoad
(
in
nsIURI
uri
in
boolean
allowIfInheritsPrincipal
)
;
void
checkMayLoadWithReporting
(
in
nsIURI
uri
in
boolean
allowIfInheritsPrincipal
in
unsigned
long
long
innerWindowID
)
;
boolean
isThirdPartyURI
(
in
nsIURI
uri
)
;
boolean
isThirdPartyPrincipal
(
in
nsIPrincipal
principal
)
;
[
implicit_jscontext
]
readonly
attribute
jsval
originAttributes
;
[
noscript
notxpcom
nostdcall
binaryname
(
OriginAttributesRef
)
]
const_OriginAttributes
OriginAttributesRef
(
)
;
readonly
attribute
ACString
origin
;
[
noscript
]
readonly
attribute
ACString
asciiOrigin
;
[
noscript
]
readonly
attribute
ACString
hostPort
;
[
noscript
]
readonly
attribute
ACString
asciiHost
;
[
noscript
]
readonly
attribute
ACString
host
;
[
noscript
]
readonly
attribute
ACString
prepath
;
[
noscript
]
readonly
attribute
ACString
asciiSpec
;
readonly
attribute
ACString
exposablePrePath
;
readonly
attribute
ACString
exposableSpec
;
boolean
schemeIs
(
in
string
scheme
)
;
%
{
C
+
+
inline
bool
SchemeIs
(
const
char
*
aScheme
)
{
bool
ret
;
SchemeIs
(
aScheme
&
ret
)
;
return
ret
;
}
%
}
bool
isURIInPrefList
(
in
string
pref
)
;
bool
isSameOrigin
(
in
nsIURI
otherURI
in
bool
aIsPrivateWin
)
;
bool
allowsRelaxStrictFileOriginPolicy
(
in
nsIURI
aURI
)
;
ACString
getPrefLightCacheKey
(
in
nsIURI
aURI
in
bool
aWithCredentials
)
;
readonly
attribute
ACString
localStorageQuotaKey
;
readonly
attribute
bool
isOriginPotentiallyTrustworthy
;
uint32_t
getAboutModuleFlags
(
)
;
nsIReferrerInfo
createReferrerInfo
(
in
ReferrerPolicy
aReferrerPolicy
)
;
readonly
attribute
ACString
originNoSuffix
;
readonly
attribute
AUTF8String
originSuffix
;
readonly
attribute
ACString
siteOrigin
;
readonly
attribute
ACString
baseDomain
;
readonly
attribute
AString
addonId
;
readonly
attribute
nsISupports
addonPolicy
;
[
infallible
]
readonly
attribute
unsigned
long
userContextId
;
[
infallible
]
readonly
attribute
unsigned
long
privateBrowsingId
;
[
infallible
]
readonly
attribute
boolean
isInIsolatedMozBrowserElement
;
[
infallible
]
readonly
attribute
boolean
isNullPrincipal
;
[
infallible
]
readonly
attribute
boolean
isContentPrincipal
;
[
infallible
]
readonly
attribute
boolean
isExpandedPrincipal
;
readonly
attribute
boolean
isSystemPrincipal
;
%
{
C
+
+
inline
bool
IsSystemPrincipal
(
)
const
;
%
}
[
infallible
]
readonly
attribute
boolean
isAddonOrExpandedAddonPrincipal
;
%
{
C
+
+
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aOut
const
nsIPrincipal
&
aPrincipal
)
{
nsIPrincipal
*
principal
=
const_cast
<
nsIPrincipal
*
>
(
&
aPrincipal
)
;
nsAutoCString
origin
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
principal
-
>
GetOrigin
(
origin
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
aOut
<
<
"
nsIPrincipal
{
"
<
<
origin
<
<
"
}
"
;
}
%
}
[
infallible
]
readonly
attribute
boolean
isOnion
;
readonly
attribute
boolean
isScriptAllowedByPolicy
;
boolean
isL10nAllowed
(
in
nsIURI
aDocumentURI
)
;
[
infallible
]
readonly
attribute
boolean
isIpAddress
;
}
;
[
uuid
(
f3e177Df
-
6a5e
-
489f
-
80a7
-
2dd1481471d8
)
]
interface
nsIExpandedPrincipal
:
nsISupports
{
[
noscript
notxpcom
nostdcall
]
PrincipalArray
AllowList
(
)
;
readonly
attribute
nsIContentSecurityPolicy
csp
;
%
{
C
+
+
inline
already_AddRefed
<
nsIContentSecurityPolicy
>
GetCsp
(
)
{
nsCOMPtr
<
nsIContentSecurityPolicy
>
result
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetCsp
(
getter_AddRefs
(
result
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
result
.
forget
(
)
;
}
%
}
}
;
