#
ifndef
mozilla_OriginAttributes_h
#
define
mozilla_OriginAttributes_h
#
include
"
mozilla
/
dom
/
ChromeUtils
.
h
"
#
include
"
mozilla
/
dom
/
ChromeUtilsBinding
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
namespace
mozilla
{
class
OriginAttributes
:
public
dom
:
:
OriginAttributesDictionary
{
public
:
OriginAttributes
(
)
{
}
OriginAttributes
(
uint32_t
aAppId
bool
aInIsolatedMozBrowser
)
{
mAppId
=
aAppId
;
mInIsolatedMozBrowser
=
aInIsolatedMozBrowser
;
}
explicit
OriginAttributes
(
const
OriginAttributesDictionary
&
aOther
)
:
OriginAttributesDictionary
(
aOther
)
{
}
void
SetFirstPartyDomain
(
const
bool
aIsTopLevelDocument
nsIURI
*
aURI
bool
aForced
=
false
)
;
void
SetFirstPartyDomain
(
const
bool
aIsTopLevelDocument
const
nsACString
&
aDomain
)
;
enum
{
STRIP_FIRST_PARTY_DOMAIN
=
0x01
STRIP_USER_CONTEXT_ID
=
0x02
}
;
inline
void
StripAttributes
(
uint32_t
aFlags
)
{
if
(
aFlags
&
STRIP_FIRST_PARTY_DOMAIN
)
{
mFirstPartyDomain
.
Truncate
(
)
;
}
if
(
aFlags
&
STRIP_USER_CONTEXT_ID
)
{
mUserContextId
=
nsIScriptSecurityManager
:
:
DEFAULT_USER_CONTEXT_ID
;
}
}
bool
operator
=
=
(
const
OriginAttributes
&
aOther
)
const
{
return
mAppId
=
=
aOther
.
mAppId
&
&
mInIsolatedMozBrowser
=
=
aOther
.
mInIsolatedMozBrowser
&
&
mUserContextId
=
=
aOther
.
mUserContextId
&
&
mPrivateBrowsingId
=
=
aOther
.
mPrivateBrowsingId
&
&
mFirstPartyDomain
=
=
aOther
.
mFirstPartyDomain
;
}
bool
operator
!
=
(
const
OriginAttributes
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
MOZ_MUST_USE
bool
EqualsIgnoringFPD
(
const
OriginAttributes
&
aOther
)
const
{
return
mAppId
=
=
aOther
.
mAppId
&
&
mInIsolatedMozBrowser
=
=
aOther
.
mInIsolatedMozBrowser
&
&
mUserContextId
=
=
aOther
.
mUserContextId
&
&
mPrivateBrowsingId
=
=
aOther
.
mPrivateBrowsingId
;
}
void
CreateSuffix
(
nsACString
&
aStr
)
const
;
void
CreateAnonymizedSuffix
(
nsACString
&
aStr
)
const
;
MOZ_MUST_USE
bool
PopulateFromSuffix
(
const
nsACString
&
aStr
)
;
MOZ_MUST_USE
bool
PopulateFromOrigin
(
const
nsACString
&
aOrigin
nsACString
&
aOriginNoSuffix
)
;
void
SyncAttributesWithPrivateBrowsing
(
bool
aInPrivateBrowsing
)
;
static
inline
bool
IsFirstPartyEnabled
(
)
{
return
sFirstPartyIsolation
;
}
static
inline
bool
IsRestrictOpenerAccessForFPI
(
)
{
return
!
sFirstPartyIsolation
|
|
sRestrictedOpenerAccess
;
}
static
inline
MOZ_MUST_USE
bool
IsBlockPostMessageForFPI
(
)
{
return
sFirstPartyIsolation
&
&
sBlockPostMessageForFPI
;
}
static
bool
IsPrivateBrowsing
(
const
nsACString
&
aOrigin
)
;
static
void
InitPrefs
(
)
;
private
:
static
bool
sFirstPartyIsolation
;
static
bool
sRestrictedOpenerAccess
;
static
bool
sBlockPostMessageForFPI
;
}
;
class
OriginAttributesPattern
:
public
dom
:
:
OriginAttributesPatternDictionary
{
public
:
OriginAttributesPattern
(
)
{
}
explicit
OriginAttributesPattern
(
const
OriginAttributesPatternDictionary
&
aOther
)
:
OriginAttributesPatternDictionary
(
aOther
)
{
}
bool
Matches
(
const
OriginAttributes
&
aAttrs
)
const
{
if
(
mAppId
.
WasPassed
(
)
&
&
mAppId
.
Value
(
)
!
=
aAttrs
.
mAppId
)
{
return
false
;
}
if
(
mInIsolatedMozBrowser
.
WasPassed
(
)
&
&
mInIsolatedMozBrowser
.
Value
(
)
!
=
aAttrs
.
mInIsolatedMozBrowser
)
{
return
false
;
}
if
(
mUserContextId
.
WasPassed
(
)
&
&
mUserContextId
.
Value
(
)
!
=
aAttrs
.
mUserContextId
)
{
return
false
;
}
if
(
mPrivateBrowsingId
.
WasPassed
(
)
&
&
mPrivateBrowsingId
.
Value
(
)
!
=
aAttrs
.
mPrivateBrowsingId
)
{
return
false
;
}
if
(
mFirstPartyDomain
.
WasPassed
(
)
&
&
mFirstPartyDomain
.
Value
(
)
!
=
aAttrs
.
mFirstPartyDomain
)
{
return
false
;
}
return
true
;
}
bool
Overlaps
(
const
OriginAttributesPattern
&
aOther
)
const
{
if
(
mAppId
.
WasPassed
(
)
&
&
aOther
.
mAppId
.
WasPassed
(
)
&
&
mAppId
.
Value
(
)
!
=
aOther
.
mAppId
.
Value
(
)
)
{
return
false
;
}
if
(
mInIsolatedMozBrowser
.
WasPassed
(
)
&
&
aOther
.
mInIsolatedMozBrowser
.
WasPassed
(
)
&
&
mInIsolatedMozBrowser
.
Value
(
)
!
=
aOther
.
mInIsolatedMozBrowser
.
Value
(
)
)
{
return
false
;
}
if
(
mUserContextId
.
WasPassed
(
)
&
&
aOther
.
mUserContextId
.
WasPassed
(
)
&
&
mUserContextId
.
Value
(
)
!
=
aOther
.
mUserContextId
.
Value
(
)
)
{
return
false
;
}
if
(
mPrivateBrowsingId
.
WasPassed
(
)
&
&
aOther
.
mPrivateBrowsingId
.
WasPassed
(
)
&
&
mPrivateBrowsingId
.
Value
(
)
!
=
aOther
.
mPrivateBrowsingId
.
Value
(
)
)
{
return
false
;
}
if
(
mFirstPartyDomain
.
WasPassed
(
)
&
&
aOther
.
mFirstPartyDomain
.
WasPassed
(
)
&
&
mFirstPartyDomain
.
Value
(
)
!
=
aOther
.
mFirstPartyDomain
.
Value
(
)
)
{
return
false
;
}
return
true
;
}
}
;
}
#
endif
