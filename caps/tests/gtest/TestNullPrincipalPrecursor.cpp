#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
TEST
(
NullPrincipalPrecursor
EscapingRoundTrips
)
{
nsTArray
<
nsCString
>
inputs
;
inputs
.
AppendElements
(
mozilla
:
:
Span
(
std
:
:
array
{
"
mailbox
:
/
/
/
dev
/
shm
/
tmp5wkt9ff_
.
mozrunner
/
Mail
/
Local
%
20Folders
/
secure
-
mail
?
number
=
5
"
_ns
}
)
)
;
for
(
uint8_t
c
=
0
;
c
<
128
;
+
+
c
)
{
inputs
.
AppendElement
(
nsPrintfCString
(
"
%
02X
:
%
c
"
c
(
char
)
c
)
)
;
inputs
.
AppendElement
(
nsPrintfCString
(
"
%
02X
:
%
%
%
02X
"
c
c
)
)
;
}
nsID
dummyID
{
0xddf15eaf
0x3837
0x4678
{
0x80
0x3b
0x86
0x86
0xe8
0x17
0x66
0x71
}
}
;
nsCOMPtr
<
nsIURI
>
baseURI
=
NullPrincipal
:
:
CreateURI
(
nullptr
&
dummyID
)
;
ASSERT_TRUE
(
baseURI
)
;
for
(
auto
&
input
:
inputs
)
{
nsCString
escaped
(
input
)
;
NullPrincipal
:
:
EscapePrecursorQuery
(
escaped
)
;
nsCOMPtr
<
nsIURI
>
clone
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
NS_MutateURI
(
baseURI
)
.
SetQuery
(
escaped
)
.
Finalize
(
clone
)
)
)
;
nsCString
query
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
clone
-
>
GetQuery
(
query
)
)
)
;
EXPECT_EQ
(
escaped
query
)
;
nsCString
unescaped
(
escaped
)
;
NullPrincipal
:
:
UnescapePrecursorQuery
(
unescaped
)
;
EXPECT_EQ
(
input
unescaped
)
;
}
}
}
