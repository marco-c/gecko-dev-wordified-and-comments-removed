#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
ContentPrincipal
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
SystemPrincipal
.
h
"
#
include
"
mozilla
/
ExpandedPrincipal
.
h
"
using
mozilla
:
:
BasePrincipal
;
using
mozilla
:
:
ContentPrincipal
;
using
mozilla
:
:
NullPrincipal
;
using
mozilla
:
:
SystemPrincipal
;
#
ifndef
MOZ_DEBUG
TEST
(
PrincipalSerialization
ReusedJSONArgument
)
{
nsCOMPtr
<
nsIScriptSecurityManager
>
ssm
=
nsScriptSecurityManager
:
:
GetScriptSecurityManager
(
)
;
nsAutoCString
spec
(
"
https
:
/
/
mozilla
.
com
"
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
;
nsresult
rv
=
ssm
-
>
CreateCodebasePrincipalFromOrigin
(
spec
getter_AddRefs
(
principal
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
nsAutoCString
JSON
;
rv
=
BasePrincipal
:
:
Cast
(
principal
)
-
>
ToJSON
(
JSON
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
ASSERT_TRUE
(
JSON
.
EqualsLiteral
(
"
{
\
"
1
\
"
:
{
\
"
0
\
"
:
\
"
https
:
/
/
mozilla
.
com
/
\
"
}
}
"
)
)
;
nsAutoCString
spec2
(
"
https
:
/
/
example
.
com
"
)
;
nsCOMPtr
<
nsIPrincipal
>
principal2
;
rv
=
ssm
-
>
CreateCodebasePrincipalFromOrigin
(
spec2
getter_AddRefs
(
principal2
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
BasePrincipal
:
:
Cast
(
principal2
)
-
>
ToJSON
(
JSON
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
ASSERT_TRUE
(
JSON
.
EqualsLiteral
(
"
{
\
"
1
\
"
:
{
\
"
0
\
"
:
\
"
https
:
/
/
example
.
com
/
\
"
}
}
"
)
)
;
}
TEST
(
PrincipalSerialization
FromPropertiesEmpty
)
{
nsTArray
<
ContentPrincipal
:
:
KeyVal
>
resContent
;
nsCOMPtr
<
nsIPrincipal
>
contentPrincipal
=
ContentPrincipal
:
:
FromProperties
(
resContent
)
;
ASSERT_EQ
(
nullptr
contentPrincipal
)
;
nsTArray
<
ExpandedPrincipal
:
:
KeyVal
>
resExpanded
;
nsCOMPtr
<
nsIPrincipal
>
expandedPrincipal
=
ExpandedPrincipal
:
:
FromProperties
(
resExpanded
)
;
ASSERT_EQ
(
nullptr
expandedPrincipal
)
;
nsTArray
<
NullPrincipal
:
:
KeyVal
>
resNull
;
nsCOMPtr
<
nsIPrincipal
>
nullprincipal
=
NullPrincipal
:
:
FromProperties
(
resNull
)
;
ASSERT_EQ
(
nullptr
nullprincipal
)
;
}
TEST
(
PrincipalSerialization
TwoKeys
)
{
nsCOMPtr
<
nsIPrincipal
>
systemPrincipal
=
BasePrincipal
:
:
FromJSON
(
NS_LITERAL_CSTRING
(
"
{
\
"
3
\
"
:
{
}
}
"
)
)
;
ASSERT_EQ
(
BasePrincipal
:
:
Cast
(
systemPrincipal
)
-
>
Kind
(
)
BasePrincipal
:
:
eSystemPrincipal
)
;
nsCOMPtr
<
nsIPrincipal
>
contentPrincipal
=
BasePrincipal
:
:
FromJSON
(
NS_LITERAL_CSTRING
(
"
{
\
"
1
\
"
:
{
\
"
0
\
"
:
\
"
https
:
/
/
mozilla
.
com
\
"
}
}
"
)
)
;
ASSERT_EQ
(
BasePrincipal
:
:
Cast
(
contentPrincipal
)
-
>
Kind
(
)
BasePrincipal
:
:
eCodebasePrincipal
)
;
nsCOMPtr
<
nsIPrincipal
>
combinedPrincipal
=
BasePrincipal
:
:
FromJSON
(
NS_LITERAL_CSTRING
(
"
{
\
"
1
\
"
:
{
\
"
0
\
"
:
\
"
https
:
/
/
mozilla
.
com
\
"
}
\
"
3
\
"
:
{
}
}
"
)
)
;
ASSERT_EQ
(
nullptr
combinedPrincipal
)
;
}
#
endif
