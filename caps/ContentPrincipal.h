#
ifndef
mozilla_ContentPrincipal_h
#
define
mozilla_ContentPrincipal_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsJSPrincipals
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIProtocolHandler
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
extensions
/
WebExtensionPolicy
.
h
"
namespace
Json
{
class
Value
;
}
namespace
mozilla
{
class
ContentPrincipal
final
:
public
BasePrincipal
{
public
:
NS_DECL_NSISERIALIZABLE
NS_IMETHOD
QueryInterface
(
REFNSIID
aIID
void
*
*
aInstancePtr
)
override
;
uint32_t
GetHashValue
(
)
override
;
NS_IMETHOD
GetURI
(
nsIURI
*
*
aURI
)
override
;
NS_IMETHOD
GetDomain
(
nsIURI
*
*
aDomain
)
override
;
NS_IMETHOD
SetDomain
(
nsIURI
*
aDomain
)
override
;
NS_IMETHOD
GetBaseDomain
(
nsACString
&
aBaseDomain
)
override
;
NS_IMETHOD
GetAddonId
(
nsAString
&
aAddonId
)
override
;
NS_IMETHOD
GetSiteOrigin
(
nsACString
&
aSiteOrigin
)
override
;
bool
IsContentPrincipal
(
)
const
override
{
return
true
;
}
ContentPrincipal
(
)
;
static
PrincipalKind
Kind
(
)
{
return
eContentPrincipal
;
}
nsresult
Init
(
nsIURI
*
aURI
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aOriginNoSuffix
)
;
nsresult
Init
(
ContentPrincipal
*
aOther
const
OriginAttributes
&
aOriginAttributes
)
;
virtual
nsresult
GetScriptLocation
(
nsACString
&
aStr
)
override
;
nsresult
GetSiteIdentifier
(
SiteIdentifier
&
aSite
)
override
;
static
nsresult
GenerateOriginNoSuffixFromURI
(
nsIURI
*
aURI
nsACString
&
aOrigin
)
;
extensions
:
:
WebExtensionPolicy
*
AddonPolicy
(
)
;
nsCOMPtr
<
nsIURI
>
mDomain
;
nsCOMPtr
<
nsIURI
>
mURI
;
virtual
nsresult
PopulateJSONObject
(
Json
:
:
Value
&
aObject
)
override
;
enum
SerializableKeys
{
eURI
=
0
eDomain
eSuffix
eMax
=
eSuffix
}
;
typedef
mozilla
:
:
BasePrincipal
:
:
KeyValT
<
SerializableKeys
>
KeyVal
;
static
already_AddRefed
<
BasePrincipal
>
FromProperties
(
nsTArray
<
ContentPrincipal
:
:
KeyVal
>
&
aFields
)
;
protected
:
virtual
~
ContentPrincipal
(
)
;
bool
SubsumesInternal
(
nsIPrincipal
*
aOther
DocumentDomainConsideration
aConsideration
)
override
;
bool
MayLoadInternal
(
nsIURI
*
aURI
)
override
;
private
:
Maybe
<
WeakPtr
<
extensions
:
:
WebExtensionPolicy
>
>
mAddon
;
}
;
}
#
define
NS_PRINCIPAL_CONTRACTID
"
mozilla
.
org
/
principal
;
1
"
#
define
NS_PRINCIPAL_CID
\
{
\
0x653e0e4d
0x3ee4
0x45fa
{
\
0xb2
0x72
0x97
0xc2
0x0b
0xc0
0x1e
0xb8
\
}
\
}
#
endif
