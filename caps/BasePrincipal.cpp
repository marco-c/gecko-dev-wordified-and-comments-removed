#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
ExpandedPrincipal
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIURIWithSpecialOrigin
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsAboutProtocolUtils
.
h
"
#
include
"
ThirdPartyUtil
.
h
"
#
include
"
mozilla
/
ContentPrincipal
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
dom
/
BlobURLProtocolHandler
.
h
"
#
include
"
mozilla
/
dom
/
ChromeUtils
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
mozilla
/
dom
/
nsMixedContentBlocker
.
h
"
#
include
"
json
/
json
.
h
"
#
include
"
nsSerializationHelper
.
h
"
namespace
mozilla
{
BasePrincipal
:
:
BasePrincipal
(
PrincipalKind
aKind
)
:
mKind
(
aKind
)
mHasExplicitDomain
(
false
)
mInitialized
(
false
)
{
}
BasePrincipal
:
:
~
BasePrincipal
(
)
{
}
NS_IMETHODIMP
BasePrincipal
:
:
GetOrigin
(
nsACString
&
aOrigin
)
{
MOZ_ASSERT
(
mInitialized
)
;
nsresult
rv
=
GetOriginNoSuffix
(
aOrigin
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
suffix
;
rv
=
GetOriginSuffix
(
suffix
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aOrigin
.
Append
(
suffix
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetAsciiOrigin
(
nsACString
&
aOrigin
)
{
aOrigin
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
prinURI
;
nsresult
rv
=
GetURI
(
getter_AddRefs
(
prinURI
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
prinURI
)
{
return
NS_OK
;
}
return
nsContentUtils
:
:
GetASCIIOrigin
(
prinURI
aOrigin
)
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetOriginNoSuffix
(
nsACString
&
aOrigin
)
{
MOZ_ASSERT
(
mInitialized
)
;
mOriginNoSuffix
-
>
ToUTF8String
(
aOrigin
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetSiteOrigin
(
nsACString
&
aSiteOrigin
)
{
MOZ_ASSERT
(
mInitialized
)
;
return
GetOrigin
(
aSiteOrigin
)
;
}
static
const
Json
:
:
Value
*
GetPrincipalObject
(
const
Json
:
:
Value
&
aRoot
int
&
aOutPrincipalKind
)
{
const
Json
:
:
Value
:
:
Members
members
=
aRoot
.
getMemberNames
(
)
;
if
(
members
.
size
(
)
!
=
1
)
{
return
nullptr
;
}
const
std
:
:
string
stringPrincipalKind
=
members
[
0
]
;
int
principalKind
=
std
:
:
stoi
(
stringPrincipalKind
)
;
MOZ_ASSERT
(
BasePrincipal
:
:
eNullPrincipal
=
=
0
"
We
need
to
rely
on
0
being
a
bounds
check
for
the
first
"
"
principal
kind
.
"
)
;
if
(
principalKind
<
0
|
|
principalKind
>
BasePrincipal
:
:
eKindMax
)
{
return
nullptr
;
}
MOZ_ASSERT
(
principalKind
=
=
BasePrincipal
:
:
eNullPrincipal
|
|
principalKind
=
=
BasePrincipal
:
:
eContentPrincipal
|
|
principalKind
=
=
BasePrincipal
:
:
eExpandedPrincipal
|
|
principalKind
=
=
BasePrincipal
:
:
eSystemPrincipal
)
;
aOutPrincipalKind
=
principalKind
;
if
(
!
aRoot
[
stringPrincipalKind
]
.
isObject
(
)
)
{
return
nullptr
;
}
return
&
aRoot
[
stringPrincipalKind
]
;
}
template
<
typename
T
>
static
nsTArray
<
typename
T
:
:
KeyVal
>
GetJSONKeys
(
const
Json
:
:
Value
*
aInput
)
{
int
size
=
T
:
:
eMax
+
1
;
nsTArray
<
typename
T
:
:
KeyVal
>
fields
;
for
(
int
i
=
0
;
i
!
=
size
;
i
+
+
)
{
typename
T
:
:
KeyVal
*
field
=
fields
.
AppendElement
(
)
;
field
-
>
valueWasSerialized
=
false
;
field
-
>
key
=
static_cast
<
typename
T
:
:
SerializableKeys
>
(
i
)
;
const
std
:
:
string
key
=
std
:
:
to_string
(
field
-
>
key
)
;
if
(
aInput
-
>
isMember
(
key
)
)
{
const
Json
:
:
Value
&
val
=
(
*
aInput
)
[
key
]
;
if
(
val
.
isString
(
)
)
{
field
-
>
value
.
Append
(
nsDependentCString
(
val
.
asCString
(
)
)
)
;
field
-
>
valueWasSerialized
=
true
;
}
}
}
return
fields
;
}
already_AddRefed
<
BasePrincipal
>
BasePrincipal
:
:
FromJSON
(
const
nsACString
&
aJSON
)
{
Json
:
:
Value
root
;
Json
:
:
CharReaderBuilder
builder
;
std
:
:
unique_ptr
<
Json
:
:
CharReader
>
const
reader
(
builder
.
newCharReader
(
)
)
;
bool
parseSuccess
=
reader
-
>
parse
(
aJSON
.
BeginReading
(
)
aJSON
.
EndReading
(
)
&
root
nullptr
)
;
if
(
!
parseSuccess
)
{
MOZ_ASSERT
(
false
"
Unable
to
parse
string
as
JSON
to
deserialize
as
a
principal
"
)
;
return
nullptr
;
}
int
principalKind
=
-
1
;
const
Json
:
:
Value
*
value
=
GetPrincipalObject
(
root
principalKind
)
;
if
(
!
value
)
{
#
ifdef
DEBUG
fprintf
(
stderr
"
Unexpected
JSON
principal
%
s
\
n
"
root
.
toStyledString
(
)
.
c_str
(
)
)
;
#
endif
MOZ_ASSERT
(
false
"
Unexpected
JSON
to
deserialize
as
a
principal
"
)
;
return
nullptr
;
}
MOZ_ASSERT
(
principalKind
!
=
-
1
"
PrincipalKind
should
always
be
>
=
0
by
this
point
"
)
;
if
(
principalKind
=
=
eSystemPrincipal
)
{
RefPtr
<
BasePrincipal
>
principal
=
BasePrincipal
:
:
Cast
(
nsContentUtils
:
:
GetSystemPrincipal
(
)
)
;
return
principal
.
forget
(
)
;
}
if
(
principalKind
=
=
eNullPrincipal
)
{
nsTArray
<
NullPrincipal
:
:
KeyVal
>
res
=
GetJSONKeys
<
NullPrincipal
>
(
value
)
;
return
NullPrincipal
:
:
FromProperties
(
res
)
;
}
if
(
principalKind
=
=
eContentPrincipal
)
{
nsTArray
<
ContentPrincipal
:
:
KeyVal
>
res
=
GetJSONKeys
<
ContentPrincipal
>
(
value
)
;
return
ContentPrincipal
:
:
FromProperties
(
res
)
;
}
if
(
principalKind
=
=
eExpandedPrincipal
)
{
nsTArray
<
ExpandedPrincipal
:
:
KeyVal
>
res
=
GetJSONKeys
<
ExpandedPrincipal
>
(
value
)
;
return
ExpandedPrincipal
:
:
FromProperties
(
res
)
;
}
MOZ_RELEASE_ASSERT
(
false
"
Unexpected
enum
to
deserialize
as
a
principal
"
)
;
}
nsresult
BasePrincipal
:
:
PopulateJSONObject
(
Json
:
:
Value
&
aObject
)
{
return
NS_OK
;
}
nsresult
BasePrincipal
:
:
ToJSON
(
nsACString
&
aResult
)
{
MOZ_ASSERT
(
aResult
.
IsEmpty
(
)
"
ToJSON
only
supports
an
empty
result
input
"
)
;
aResult
.
Truncate
(
)
;
Json
:
:
StreamWriterBuilder
builder
;
builder
[
"
indentation
"
]
=
"
"
;
Json
:
:
Value
innerJSONObject
=
Json
:
:
objectValue
;
nsresult
rv
=
PopulateJSONObject
(
innerJSONObject
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
Json
:
:
Value
root
=
Json
:
:
objectValue
;
std
:
:
string
key
=
std
:
:
to_string
(
Kind
(
)
)
;
root
[
key
]
=
innerJSONObject
;
std
:
:
string
result
=
Json
:
:
writeString
(
builder
root
)
;
aResult
.
Append
(
result
)
;
if
(
aResult
.
Length
(
)
=
=
0
)
{
MOZ_ASSERT
(
false
"
JSON
writer
failed
to
output
a
principal
serialization
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
return
NS_OK
;
}
bool
BasePrincipal
:
:
Subsumes
(
nsIPrincipal
*
aOther
DocumentDomainConsideration
aConsideration
)
{
MOZ_ASSERT
(
aOther
)
;
MOZ_ASSERT_IF
(
Kind
(
)
=
=
eContentPrincipal
mOriginSuffix
)
;
if
(
Kind
(
)
=
=
eContentPrincipal
&
&
mOriginSuffix
!
=
Cast
(
aOther
)
-
>
mOriginSuffix
)
{
return
false
;
}
return
SubsumesInternal
(
aOther
aConsideration
)
;
}
NS_IMETHODIMP
BasePrincipal
:
:
Equals
(
nsIPrincipal
*
aOther
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aOther
)
;
*
aResult
=
FastEquals
(
aOther
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
EqualsConsideringDomain
(
nsIPrincipal
*
aOther
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aOther
)
;
*
aResult
=
FastEqualsConsideringDomain
(
aOther
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
Subsumes
(
nsIPrincipal
*
aOther
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aOther
)
;
*
aResult
=
FastSubsumes
(
aOther
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
SubsumesConsideringDomain
(
nsIPrincipal
*
aOther
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aOther
)
;
*
aResult
=
FastSubsumesConsideringDomain
(
aOther
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
SubsumesConsideringDomainIgnoringFPD
(
nsIPrincipal
*
aOther
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aOther
)
;
*
aResult
=
FastSubsumesConsideringDomainIgnoringFPD
(
aOther
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
CheckMayLoad
(
nsIURI
*
aURI
bool
aReport
bool
aAllowIfInheritsPrincipal
)
{
NS_ENSURE_ARG_POINTER
(
aURI
)
;
if
(
MayLoadInternal
(
aURI
)
)
{
return
NS_OK
;
}
nsresult
rv
;
if
(
aAllowIfInheritsPrincipal
)
{
bool
doesInheritSecurityContext
;
rv
=
NS_URIChainHasFlags
(
aURI
nsIProtocolHandler
:
:
URI_INHERITS_SECURITY_CONTEXT
&
doesInheritSecurityContext
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
doesInheritSecurityContext
)
{
return
NS_OK
;
}
}
bool
fetchableByAnyone
;
rv
=
NS_URIChainHasFlags
(
aURI
nsIProtocolHandler
:
:
URI_FETCHABLE_BY_ANYONE
&
fetchableByAnyone
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
fetchableByAnyone
)
{
return
NS_OK
;
}
if
(
aReport
)
{
nsCOMPtr
<
nsIURI
>
prinURI
;
rv
=
GetURI
(
getter_AddRefs
(
prinURI
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
prinURI
)
{
nsScriptSecurityManager
:
:
ReportError
(
"
CheckSameOriginError
"
prinURI
aURI
mOriginAttributes
.
mPrivateBrowsingId
>
0
)
;
}
}
return
NS_ERROR_DOM_BAD_URI
;
}
NS_IMETHODIMP
BasePrincipal
:
:
IsThirdPartyURI
(
nsIURI
*
aURI
bool
*
aRes
)
{
*
aRes
=
true
;
nsCOMPtr
<
nsIURI
>
prinURI
;
nsresult
rv
=
GetURI
(
getter_AddRefs
(
prinURI
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
prinURI
)
{
return
NS_OK
;
}
ThirdPartyUtil
*
thirdPartyUtil
=
ThirdPartyUtil
:
:
GetInstance
(
)
;
return
thirdPartyUtil
-
>
IsThirdPartyURI
(
prinURI
aURI
aRes
)
;
}
NS_IMETHODIMP
BasePrincipal
:
:
IsThirdPartyPrincipal
(
nsIPrincipal
*
aPrin
bool
*
aRes
)
{
*
aRes
=
true
;
nsCOMPtr
<
nsIURI
>
prinURI
;
nsresult
rv
=
GetURI
(
getter_AddRefs
(
prinURI
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
prinURI
)
{
return
NS_OK
;
}
return
aPrin
-
>
IsThirdPartyURI
(
prinURI
aRes
)
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetIsNullPrincipal
(
bool
*
aResult
)
{
*
aResult
=
Kind
(
)
=
=
eNullPrincipal
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetIsContentPrincipal
(
bool
*
aResult
)
{
*
aResult
=
Kind
(
)
=
=
eContentPrincipal
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetIsExpandedPrincipal
(
bool
*
aResult
)
{
*
aResult
=
Kind
(
)
=
=
eExpandedPrincipal
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetAsciiSpec
(
nsACString
&
aSpec
)
{
aSpec
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
prinURI
;
nsresult
rv
=
GetURI
(
getter_AddRefs
(
prinURI
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
prinURI
)
{
return
NS_OK
;
}
return
prinURI
-
>
GetAsciiSpec
(
aSpec
)
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetIsSystemPrincipal
(
bool
*
aResult
)
{
*
aResult
=
IsSystemPrincipal
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetIsAddonOrExpandedAddonPrincipal
(
bool
*
aResult
)
{
*
aResult
=
AddonPolicy
(
)
|
|
ContentScriptAddonPolicy
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetIsOnion
(
bool
*
aIsOnion
)
{
*
aIsOnion
=
false
;
nsCOMPtr
<
nsIURI
>
prinURI
;
nsresult
rv
=
GetURI
(
getter_AddRefs
(
prinURI
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
prinURI
)
{
return
NS_OK
;
}
nsAutoCString
host
;
rv
=
prinURI
-
>
GetHost
(
host
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
NS_OK
;
}
*
aIsOnion
=
StringEndsWith
(
host
NS_LITERAL_CSTRING
(
"
.
onion
"
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
SchemeIs
(
const
char
*
aScheme
bool
*
aResult
)
{
*
aResult
=
false
;
nsCOMPtr
<
nsIURI
>
prinURI
;
nsresult
rv
=
GetURI
(
getter_AddRefs
(
prinURI
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
prinURI
)
{
return
NS_OK
;
}
*
aResult
=
prinURI
-
>
SchemeIs
(
aScheme
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
IsURIInPrefList
(
const
char
*
aPref
bool
*
aResult
)
{
*
aResult
=
false
;
nsCOMPtr
<
nsIURI
>
prinURI
;
nsresult
rv
=
GetURI
(
getter_AddRefs
(
prinURI
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
prinURI
)
{
return
NS_OK
;
}
*
aResult
=
nsContentUtils
:
:
IsURIInPrefList
(
prinURI
aPref
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetIsOriginPotentiallyTrustworthy
(
bool
*
aResult
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
*
aResult
=
false
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
uri
)
{
return
NS_OK
;
}
*
aResult
=
nsMixedContentBlocker
:
:
IsPotentiallyTrustworthyOrigin
(
uri
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetAboutModuleFlags
(
uint32_t
*
flags
)
{
*
flags
=
0
;
nsCOMPtr
<
nsIURI
>
prinURI
;
nsresult
rv
=
GetURI
(
getter_AddRefs
(
prinURI
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
prinURI
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
!
prinURI
-
>
SchemeIs
(
"
about
"
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIAboutModule
>
aboutModule
;
rv
=
NS_GetAboutModule
(
prinURI
getter_AddRefs
(
aboutModule
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
aboutModule
)
{
return
rv
;
}
return
aboutModule
-
>
GetURIFlags
(
prinURI
flags
)
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetOriginAttributes
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aVal
)
{
if
(
NS_WARN_IF
(
!
ToJSValue
(
aCx
mOriginAttributes
aVal
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetOriginSuffix
(
nsACString
&
aOriginAttributes
)
{
MOZ_ASSERT
(
mOriginSuffix
)
;
mOriginSuffix
-
>
ToUTF8String
(
aOriginAttributes
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetUserContextId
(
uint32_t
*
aUserContextId
)
{
*
aUserContextId
=
UserContextId
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetPrivateBrowsingId
(
uint32_t
*
aPrivateBrowsingId
)
{
*
aPrivateBrowsingId
=
PrivateBrowsingId
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BasePrincipal
:
:
GetIsInIsolatedMozBrowserElement
(
bool
*
aIsInIsolatedMozBrowserElement
)
{
*
aIsInIsolatedMozBrowserElement
=
IsInIsolatedMozBrowserElement
(
)
;
return
NS_OK
;
}
nsresult
BasePrincipal
:
:
GetAddonPolicy
(
nsISupports
*
*
aResult
)
{
RefPtr
<
extensions
:
:
WebExtensionPolicy
>
policy
(
AddonPolicy
(
)
)
;
policy
.
forget
(
aResult
)
;
return
NS_OK
;
}
extensions
:
:
WebExtensionPolicy
*
BasePrincipal
:
:
AddonPolicy
(
)
{
if
(
Is
<
ContentPrincipal
>
(
)
)
{
return
As
<
ContentPrincipal
>
(
)
-
>
AddonPolicy
(
)
;
}
return
nullptr
;
}
bool
BasePrincipal
:
:
AddonHasPermission
(
const
nsAtom
*
aPerm
)
{
if
(
auto
policy
=
AddonPolicy
(
)
)
{
return
policy
-
>
HasPermission
(
aPerm
)
;
}
return
false
;
}
nsIPrincipal
*
BasePrincipal
:
:
PrincipalToInherit
(
nsIURI
*
aRequestedURI
)
{
if
(
Is
<
ExpandedPrincipal
>
(
)
)
{
return
As
<
ExpandedPrincipal
>
(
)
-
>
PrincipalToInherit
(
aRequestedURI
)
;
}
return
this
;
}
already_AddRefed
<
BasePrincipal
>
BasePrincipal
:
:
CreateContentPrincipal
(
nsIURI
*
aURI
const
OriginAttributes
&
aAttrs
)
{
MOZ_ASSERT
(
aURI
)
;
nsAutoCString
originNoSuffix
;
nsresult
rv
=
ContentPrincipal
:
:
GenerateOriginNoSuffixFromURI
(
aURI
originNoSuffix
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
NullPrincipal
:
:
Create
(
aAttrs
)
;
}
return
CreateContentPrincipal
(
aURI
aAttrs
originNoSuffix
)
;
}
already_AddRefed
<
BasePrincipal
>
BasePrincipal
:
:
CreateContentPrincipal
(
nsIURI
*
aURI
const
OriginAttributes
&
aAttrs
const
nsACString
&
aOriginNoSuffix
)
{
MOZ_ASSERT
(
aURI
)
;
MOZ_ASSERT
(
!
aOriginNoSuffix
.
IsEmpty
(
)
)
;
bool
inheritsPrincipal
;
nsresult
rv
=
NS_URIChainHasFlags
(
aURI
nsIProtocolHandler
:
:
URI_INHERITS_SECURITY_CONTEXT
&
inheritsPrincipal
)
;
if
(
NS_FAILED
(
rv
)
|
|
inheritsPrincipal
)
{
return
NullPrincipal
:
:
Create
(
aAttrs
)
;
}
#
if
defined
(
MOZ_THUNDERBIRD
)
|
|
defined
(
MOZ_SUITE
)
nsCOMPtr
<
nsIURIWithSpecialOrigin
>
uriWithSpecialOrigin
=
do_QueryInterface
(
aURI
)
;
if
(
uriWithSpecialOrigin
)
{
nsCOMPtr
<
nsIURI
>
origin
;
rv
=
uriWithSpecialOrigin
-
>
GetOrigin
(
getter_AddRefs
(
origin
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
origin
)
;
OriginAttributes
attrs
;
RefPtr
<
BasePrincipal
>
principal
=
CreateContentPrincipal
(
origin
attrs
)
;
return
principal
.
forget
(
)
;
}
#
endif
nsCOMPtr
<
nsIPrincipal
>
blobPrincipal
;
if
(
dom
:
:
BlobURLProtocolHandler
:
:
GetBlobURLPrincipal
(
aURI
getter_AddRefs
(
blobPrincipal
)
)
)
{
MOZ_ASSERT
(
blobPrincipal
)
;
RefPtr
<
BasePrincipal
>
principal
=
Cast
(
blobPrincipal
)
;
return
principal
.
forget
(
)
;
}
RefPtr
<
ContentPrincipal
>
principal
=
new
ContentPrincipal
(
)
;
rv
=
principal
-
>
Init
(
aURI
aAttrs
aOriginNoSuffix
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
principal
.
forget
(
)
;
}
already_AddRefed
<
BasePrincipal
>
BasePrincipal
:
:
CreateContentPrincipal
(
const
nsACString
&
aOrigin
)
{
MOZ_ASSERT
(
!
StringBeginsWith
(
aOrigin
NS_LITERAL_CSTRING
(
"
[
"
)
)
"
CreateContentPrincipal
does
not
support
System
and
Expanded
"
"
principals
"
)
;
MOZ_ASSERT
(
!
StringBeginsWith
(
aOrigin
NS_LITERAL_CSTRING
(
NS_NULLPRINCIPAL_SCHEME
"
:
"
)
)
"
CreateContentPrincipal
does
not
support
NullPrincipal
"
)
;
nsAutoCString
originNoSuffix
;
OriginAttributes
attrs
;
if
(
!
attrs
.
PopulateFromOrigin
(
aOrigin
originNoSuffix
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
originNoSuffix
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
BasePrincipal
:
:
CreateContentPrincipal
(
uri
attrs
)
;
}
already_AddRefed
<
BasePrincipal
>
BasePrincipal
:
:
CloneForcingOriginAttributes
(
const
OriginAttributes
&
aOriginAttributes
)
{
if
(
NS_WARN_IF
(
!
IsContentPrincipal
(
)
)
)
{
return
nullptr
;
}
nsAutoCString
originNoSuffix
;
nsresult
rv
=
GetOriginNoSuffix
(
originNoSuffix
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
nsIURI
*
uri
=
static_cast
<
ContentPrincipal
*
>
(
this
)
-
>
mURI
;
RefPtr
<
ContentPrincipal
>
copy
=
new
ContentPrincipal
(
)
;
rv
=
copy
-
>
Init
(
uri
aOriginAttributes
originNoSuffix
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
copy
.
forget
(
)
;
}
extensions
:
:
WebExtensionPolicy
*
BasePrincipal
:
:
ContentScriptAddonPolicy
(
)
{
if
(
!
Is
<
ExpandedPrincipal
>
(
)
)
{
return
nullptr
;
}
auto
expanded
=
As
<
ExpandedPrincipal
>
(
)
;
for
(
auto
&
prin
:
expanded
-
>
AllowList
(
)
)
{
if
(
auto
policy
=
BasePrincipal
:
:
Cast
(
prin
)
-
>
AddonPolicy
(
)
)
{
return
policy
;
}
}
return
nullptr
;
}
bool
BasePrincipal
:
:
AddonAllowsLoad
(
nsIURI
*
aURI
bool
aExplicit
)
{
if
(
Is
<
ExpandedPrincipal
>
(
)
)
{
return
As
<
ExpandedPrincipal
>
(
)
-
>
AddonAllowsLoad
(
aURI
aExplicit
)
;
}
if
(
auto
policy
=
AddonPolicy
(
)
)
{
return
policy
-
>
CanAccessURI
(
aURI
aExplicit
)
;
}
return
false
;
}
void
BasePrincipal
:
:
FinishInit
(
const
nsACString
&
aOriginNoSuffix
const
OriginAttributes
&
aOriginAttributes
)
{
mInitialized
=
true
;
mOriginAttributes
=
aOriginAttributes
;
nsAutoCString
originSuffix
;
mOriginAttributes
.
CreateSuffix
(
originSuffix
)
;
mOriginSuffix
=
NS_Atomize
(
originSuffix
)
;
MOZ_ASSERT
(
!
aOriginNoSuffix
.
IsEmpty
(
)
)
;
mOriginNoSuffix
=
NS_Atomize
(
aOriginNoSuffix
)
;
}
void
BasePrincipal
:
:
FinishInit
(
BasePrincipal
*
aOther
const
OriginAttributes
&
aOriginAttributes
)
{
mInitialized
=
true
;
mOriginAttributes
=
aOriginAttributes
;
nsAutoCString
originSuffix
;
mOriginAttributes
.
CreateSuffix
(
originSuffix
)
;
mOriginSuffix
=
NS_Atomize
(
originSuffix
)
;
mOriginNoSuffix
=
aOther
-
>
mOriginNoSuffix
;
mHasExplicitDomain
=
aOther
-
>
mHasExplicitDomain
;
}
bool
SiteIdentifier
:
:
Equals
(
const
SiteIdentifier
&
aOther
)
const
{
MOZ_ASSERT
(
IsInitialized
(
)
)
;
MOZ_ASSERT
(
aOther
.
IsInitialized
(
)
)
;
return
mPrincipal
-
>
FastEquals
(
aOther
.
mPrincipal
)
;
}
}
