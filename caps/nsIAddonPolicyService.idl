#
include
"
nsISupports
.
idl
"
#
include
"
nsIURI
.
idl
"
[
scriptable
uuid
(
8a034ef9
-
9d14
-
4c5d
-
8319
-
06c1ab574baa
)
]
interface
nsIAddonPolicyService
:
nsISupports
{
readonly
attribute
AString
defaultCSP
;
readonly
attribute
AString
defaultCSPV3
;
AString
getBaseCSP
(
in
AString
aAddonId
)
;
AString
getExtensionPageCSP
(
in
AString
aAddonId
)
;
ACString
getGeneratedBackgroundPageUrl
(
in
ACString
aAddonId
)
;
boolean
addonHasPermission
(
in
AString
aAddonId
in
AString
aPerm
)
;
boolean
addonMayLoadURI
(
in
AString
aAddonId
in
nsIURI
aURI
[
optional
]
in
boolean
aExplicit
)
;
AString
getExtensionName
(
in
AString
aAddonId
)
;
boolean
sourceMayLoadExtensionURI
(
in
nsIURI
aSourceURI
in
nsIURI
aExtensionURI
[
optional
]
in
boolean
aFromPrivateWindow
)
;
AString
extensionURIToAddonId
(
in
nsIURI
aURI
)
;
}
;
[
scriptable
uuid
(
7a4fe60b
-
9131
-
45f5
-
83f3
-
dc63b5d71a5d
)
]
interface
nsIAddonContentPolicy
:
nsISupports
{
const
unsigned
long
CSP_ALLOW_ANY
=
0xFFFF
;
const
unsigned
long
CSP_ALLOW_LOCALHOST
=
(
1
<
<
0
)
;
const
unsigned
long
CSP_ALLOW_EVAL
=
(
1
<
<
1
)
;
const
unsigned
long
CSP_ALLOW_REMOTE
=
(
1
<
<
2
)
;
const
unsigned
long
CSP_ALLOW_WASM
=
(
1
<
<
3
)
;
AString
validateAddonCSP
(
in
AString
aPolicyString
in
unsigned
long
aPermittedPolicy
)
;
}
;
