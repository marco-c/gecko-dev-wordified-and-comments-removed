#
ifndef
mozilla_SharedJSONHandler_h
#
define
mozilla_SharedJSONHandler_h
#
include
"
js
/
JSON
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
BasePrincipal
.
h
"
namespace
mozilla
{
class
PrincipalJSONHandlerShared
:
public
JS
:
:
JSONParseHandler
{
public
:
virtual
bool
propertyName
(
const
char16_t
*
name
size_t
length
)
override
{
NS_WARNING
(
"
Principal
JSON
shouldn
'
t
use
non
-
ASCII
"
)
;
SetErrorState
(
)
;
return
false
;
}
;
virtual
bool
stringValue
(
const
char16_t
*
str
size_t
length
)
override
{
NS_WARNING
(
"
Principal
JSON
shouldn
'
t
use
non
-
ASCII
"
)
;
SetErrorState
(
)
;
return
true
;
}
virtual
bool
numberValue
(
double
d
)
override
{
NS_WARNING
(
"
Unexpected
number
value
"
)
;
SetErrorState
(
)
;
return
false
;
}
virtual
bool
booleanValue
(
bool
v
)
override
{
NS_WARNING
(
"
Unexpected
boolean
value
"
)
;
SetErrorState
(
)
;
return
false
;
}
virtual
bool
nullValue
(
)
override
{
NS_WARNING
(
"
Unexpected
null
value
"
)
;
SetErrorState
(
)
;
return
false
;
}
virtual
void
error
(
const
char
*
msg
uint32_t
line
uint32_t
column
)
override
{
}
protected
:
virtual
void
SetErrorState
(
)
=
0
;
public
:
RefPtr
<
BasePrincipal
>
mPrincipal
;
}
;
template
<
typename
HandlerTypesT
>
class
ContainerPrincipalJSONHandler
:
public
PrincipalJSONHandlerShared
{
using
State
=
typename
HandlerTypesT
:
:
State
;
using
InnerHandlerT
=
typename
HandlerTypesT
:
:
InnerHandlerT
;
static
constexpr
bool
CanContainExpandedPrincipal
=
HandlerTypesT
:
:
CanContainExpandedPrincipal
;
public
:
virtual
bool
startObject
(
)
override
;
using
PrincipalJSONHandlerShared
:
:
propertyName
;
virtual
bool
propertyName
(
const
JS
:
:
Latin1Char
*
name
size_t
length
)
override
;
virtual
bool
endObject
(
)
override
;
virtual
bool
startArray
(
)
override
;
virtual
bool
endArray
(
)
override
;
using
PrincipalJSONHandlerShared
:
:
stringValue
;
virtual
bool
stringValue
(
const
JS
:
:
Latin1Char
*
str
size_t
length
)
override
;
private
:
bool
ProcessInnerResult
(
bool
aResult
)
;
template
<
class
Func
>
bool
CallOnInner
(
Func
&
&
aFunc
)
{
return
mInnerHandler
-
>
match
(
[
&
]
(
auto
&
aInner
)
{
bool
result
=
aFunc
(
aInner
)
;
return
ProcessInnerResult
(
result
)
;
}
)
;
}
protected
:
State
mState
=
State
:
:
Init
;
InnerHandlerT
mInnerHandler
;
}
;
}
#
endif
