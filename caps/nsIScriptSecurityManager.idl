#
include
"
nsISupports
.
idl
"
#
include
"
nsIPrincipal
.
idl
"
interface
nsIURI
;
interface
nsIChannel
;
interface
nsIClassInfo
;
interface
nsIDocShell
;
interface
nsIDomainPolicy
;
interface
nsILoadContext
;
%
{
C
+
+
#
include
"
jspubtd
.
h
"
namespace
mozilla
{
namespace
dom
{
class
DomainPolicyClone
;
}
}
%
}
[
ptr
]
native
JSContextPtr
(
JSContext
)
;
[
ptr
]
native
JSObjectPtr
(
JSObject
)
;
[
ptr
]
native
DomainPolicyClonePtr
(
mozilla
:
:
dom
:
:
DomainPolicyClone
)
;
[
scriptable
builtinclass
uuid
(
51daad87
-
3a0c
-
44cc
-
b620
-
7356801c9022
)
]
interface
nsIScriptSecurityManager
:
nsISupports
{
[
noscript
]
void
canCreateWrapper
(
in
JSContextPtr
aJSContext
in
nsIIDRef
aIID
in
nsISupports
aObj
in
nsIClassInfo
aClassInfo
)
;
[
noscript
]
void
canCreateInstance
(
in
JSContextPtr
aJSContext
in
nsCIDRef
aCID
)
;
[
noscript
]
void
canGetService
(
in
JSContextPtr
aJSContext
in
nsCIDRef
aCID
)
;
[
noscript
]
void
checkLoadURIFromScript
(
in
JSContextPtr
cx
in
nsIURI
uri
)
;
const
unsigned
long
STANDARD
=
0
;
const
unsigned
long
LOAD_IS_AUTOMATIC_DOCUMENT_REPLACEMENT
=
1
<
<
0
;
const
unsigned
long
ALLOW_CHROME
=
1
<
<
1
;
const
unsigned
long
DISALLOW_INHERIT_PRINCIPAL
=
1
<
<
2
;
const
unsigned
long
DISALLOW_SCRIPT_OR_DATA
=
DISALLOW_INHERIT_PRINCIPAL
;
const
unsigned
long
DISALLOW_SCRIPT
=
1
<
<
3
;
const
unsigned
long
DONT_REPORT_ERRORS
=
1
<
<
4
;
void
checkLoadURIWithPrincipal
(
in
nsIPrincipal
aPrincipal
in
nsIURI
uri
in
unsigned
long
flags
[
optional
]
in
unsigned
long
long
innerWindowID
)
;
void
checkLoadURIStrWithPrincipal
(
in
nsIPrincipal
aPrincipal
in
AUTF8String
uri
in
unsigned
long
flags
)
;
bool
inFileURIAllowlist
(
in
nsIURI
aUri
)
;
nsIPrincipal
getSystemPrincipal
(
)
;
nsIPrincipal
getLoadContextContentPrincipal
(
in
nsIURI
uri
in
nsILoadContext
loadContext
)
;
nsIPrincipal
getDocShellContentPrincipal
(
in
nsIURI
uri
in
nsIDocShell
docShell
)
;
[
implicit_jscontext
]
nsIPrincipal
principalWithOA
(
in
nsIPrincipal
principal
in
jsval
originAttributes
)
;
[
implicit_jscontext
]
nsIPrincipal
createContentPrincipal
(
in
nsIURI
uri
in
jsval
originAttributes
)
;
nsIPrincipal
createContentPrincipalFromOrigin
(
in
ACString
origin
)
;
ACString
principalToJSON
(
in
nsIPrincipal
principal
)
;
nsIPrincipal
JSONToPrincipal
(
in
ACString
json
)
;
[
implicit_jscontext
]
nsIPrincipal
createNullPrincipal
(
in
jsval
originAttributes
)
;
void
checkSameOriginURI
(
in
nsIURI
aSourceURI
in
nsIURI
aTargetURI
in
boolean
reportError
in
boolean
fromPrivateWindow
)
;
nsIPrincipal
getChannelResultPrincipal
(
in
nsIChannel
aChannel
)
;
nsIPrincipal
getChannelResultStoragePrincipal
(
in
nsIChannel
aChannel
)
;
void
getChannelResultPrincipals
(
in
nsIChannel
aChannel
out
nsIPrincipal
aPrincipal
out
nsIPrincipal
aStoragePrincipal
)
;
[
noscript
nostdcall
]
nsIPrincipal
getChannelResultPrincipalIfNotSandboxed
(
in
nsIChannel
aChannel
)
;
nsIPrincipal
getChannelURIPrincipal
(
in
nsIChannel
aChannel
)
;
const
unsigned
long
DEFAULT_USER_CONTEXT_ID
=
0
;
const
unsigned
long
DEFAULT_PRIVATE_BROWSING_ID
=
0
;
nsIDomainPolicy
activateDomainPolicy
(
)
;
readonly
attribute
boolean
domainPolicyActive
;
[
noscript
]
nsIDomainPolicy
activateDomainPolicyInternal
(
)
;
[
noscript
notxpcom
]
void
cloneDomainPolicy
(
in
DomainPolicyClonePtr
aClone
)
;
bool
policyAllowsScript
(
in
nsIURI
aDomain
)
;
}
;
%
{
C
+
+
#
define
NS_SCRIPTSECURITYMANAGER_CONTRACTID
"
mozilla
.
org
/
scriptsecuritymanager
;
1
"
%
}
