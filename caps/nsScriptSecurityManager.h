#
ifndef
nsScriptSecurityManager_h__
#
define
nsScriptSecurityManager_h__
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsIAddonPolicyService
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIAddonPolicyService
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
plstr
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
<
stdint
.
h
>
class
nsCString
;
class
nsIIOService
;
class
nsIStringBundle
;
class
SystemPrincipal
;
namespace
mozilla
{
class
OriginAttributes
;
}
#
define
NS_SCRIPTSECURITYMANAGER_CID
\
{
0x7ee2a4c0
0x4b93
0x17d3
\
{
0xba
0x18
0x00
0x60
0xb0
0xf1
0x99
0xa2
}
}
class
nsScriptSecurityManager
final
:
public
nsIScriptSecurityManager
public
nsIObserver
{
public
:
static
void
Shutdown
(
)
;
NS_DEFINE_STATIC_CID_ACCESSOR
(
NS_SCRIPTSECURITYMANAGER_CID
)
NS_DECL_ISUPPORTS
NS_DECL_NSISCRIPTSECURITYMANAGER
NS_DECL_NSIOBSERVER
static
nsScriptSecurityManager
*
GetScriptSecurityManager
(
)
;
static
void
InitStatics
(
)
;
static
SystemPrincipal
*
SystemPrincipalSingletonConstructor
(
)
;
static
bool
SecurityCompareURIs
(
nsIURI
*
aSourceURI
nsIURI
*
aTargetURI
)
;
static
uint32_t
SecurityHashURI
(
nsIURI
*
aURI
)
;
static
nsresult
ReportError
(
JSContext
*
cx
const
nsAString
&
messageTag
nsIURI
*
aSource
nsIURI
*
aTarget
)
;
static
uint32_t
HashPrincipalByOrigin
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
GetStrictFileOriginPolicy
(
)
{
return
sStrictFileOriginPolicy
;
}
void
DeactivateDomainPolicy
(
)
;
private
:
nsScriptSecurityManager
(
)
;
virtual
~
nsScriptSecurityManager
(
)
;
static
bool
ContentSecurityPolicyPermitsJSAction
(
JSContext
*
cx
)
;
static
bool
JSPrincipalsSubsume
(
JSPrincipals
*
first
JSPrincipals
*
second
)
;
static
nsIPrincipal
*
doGetObjectPrincipal
(
JSObject
*
obj
)
;
nsresult
Init
(
)
;
nsresult
InitPrefs
(
)
;
inline
void
ScriptSecurityPrefChanged
(
)
;
inline
void
AddSitesToFileURIWhitelist
(
const
nsCString
&
aSiteList
)
;
nsresult
GetChannelResultPrincipal
(
nsIChannel
*
aChannel
nsIPrincipal
*
*
aPrincipal
bool
aIgnoreSandboxing
)
;
nsresult
CheckLoadURIFlags
(
nsIURI
*
aSourceURI
nsIURI
*
aTargetURI
nsIURI
*
aSourceBaseURI
nsIURI
*
aTargetBaseURI
uint32_t
aFlags
)
;
const
nsTArray
<
nsCOMPtr
<
nsIURI
>
>
&
EnsureFileURIWhitelist
(
)
;
nsCOMPtr
<
nsIPrincipal
>
mSystemPrincipal
;
bool
mPrefInitialized
;
bool
mIsJavaScriptEnabled
;
mozilla
:
:
Maybe
<
nsTArray
<
nsCOMPtr
<
nsIURI
>
>
>
mFileURIWhitelist
;
nsCOMPtr
<
nsIDomainPolicy
>
mDomainPolicy
;
mozilla
:
:
Maybe
<
nsCOMPtr
<
nsIAddonPolicyService
>
>
mAddonPolicyService
;
nsIAddonPolicyService
*
GetAddonPolicyService
(
)
{
if
(
mAddonPolicyService
.
isNothing
(
)
)
{
mAddonPolicyService
.
emplace
(
do_GetService
(
"
mozilla
.
org
/
addons
/
policy
-
service
;
1
"
)
)
;
}
return
mAddonPolicyService
.
ref
(
)
;
}
static
bool
sStrictFileOriginPolicy
;
static
nsIIOService
*
sIOService
;
static
nsIStringBundle
*
sStrBundle
;
static
JSContext
*
sContext
;
}
;
#
endif
