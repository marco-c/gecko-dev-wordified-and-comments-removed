#
ifndef
nsScriptSecurityManager_h__
#
define
nsScriptSecurityManager_h__
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
<
stdint
.
h
>
class
nsIIOService
;
class
nsIStringBundle
;
namespace
mozilla
{
class
OriginAttributes
;
class
SystemPrincipal
;
}
namespace
JS
{
enum
class
RuntimeCode
;
}
#
define
NS_SCRIPTSECURITYMANAGER_CID
\
{
\
0x7ee2a4c0
0x4b93
0x17d3
{
\
0xba
0x18
0x00
0x60
0xb0
0xf1
0x99
0xa2
\
}
\
}
class
nsScriptSecurityManager
final
:
public
nsIScriptSecurityManager
{
public
:
static
void
Shutdown
(
)
;
NS_DEFINE_STATIC_CID_ACCESSOR
(
NS_SCRIPTSECURITYMANAGER_CID
)
NS_DECL_ISUPPORTS
NS_DECL_NSISCRIPTSECURITYMANAGER
static
nsScriptSecurityManager
*
GetScriptSecurityManager
(
)
;
static
void
InitStatics
(
)
;
void
InitJSCallbacks
(
JSContext
*
aCx
)
;
static
void
ClearJSCallbacks
(
JSContext
*
aCx
)
;
static
already_AddRefed
<
mozilla
:
:
SystemPrincipal
>
SystemPrincipalSingletonConstructor
(
)
;
static
bool
SecurityCompareURIs
(
nsIURI
*
aSourceURI
nsIURI
*
aTargetURI
)
;
static
uint32_t
SecurityHashURI
(
nsIURI
*
aURI
)
;
static
bool
IsHttpOrHttpsAndCrossOrigin
(
nsIURI
*
aUriA
nsIURI
*
aUriB
)
;
static
nsresult
ReportError
(
const
char
*
aMessageTag
nsIURI
*
aSource
nsIURI
*
aTarget
bool
aFromPrivateWindow
uint64_t
aInnerWindowID
=
0
)
;
static
nsresult
ReportError
(
const
char
*
aMessageTag
const
nsACString
&
sourceSpec
const
nsACString
&
targetSpec
bool
aFromPrivateWindow
uint64_t
aInnerWindowID
=
0
)
;
static
uint32_t
HashPrincipalByOrigin
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
GetStrictFileOriginPolicy
(
)
{
return
sStrictFileOriginPolicy
;
}
void
DeactivateDomainPolicy
(
)
;
private
:
nsScriptSecurityManager
(
)
;
virtual
~
nsScriptSecurityManager
(
)
;
static
bool
ContentSecurityPolicyPermitsJSAction
(
JSContext
*
cx
JS
:
:
RuntimeCode
kind
JS
:
:
Handle
<
JSString
*
>
aCode
)
;
static
bool
JSPrincipalsSubsume
(
JSPrincipals
*
first
JSPrincipals
*
second
)
;
nsresult
Init
(
)
;
nsresult
InitPrefs
(
)
;
static
void
ScriptSecurityPrefChanged
(
const
char
*
aPref
void
*
aSelf
)
;
void
ScriptSecurityPrefChanged
(
const
char
*
aPref
=
nullptr
)
;
inline
void
AddSitesToFileURIAllowlist
(
const
nsCString
&
aSiteList
)
;
nsresult
GetChannelResultPrincipal
(
nsIChannel
*
aChannel
nsIPrincipal
*
*
aPrincipal
bool
aIgnoreSandboxing
)
;
nsresult
CheckLoadURIFlags
(
nsIURI
*
aSourceURI
nsIURI
*
aTargetURI
nsIURI
*
aSourceBaseURI
nsIURI
*
aTargetBaseURI
uint32_t
aFlags
bool
aFromPrivateWindow
uint64_t
aInnerWindowID
)
;
const
nsTArray
<
nsCOMPtr
<
nsIURI
>
>
&
EnsureFileURIAllowlist
(
)
;
nsCOMPtr
<
nsIPrincipal
>
mSystemPrincipal
;
bool
mPrefInitialized
;
bool
mIsJavaScriptEnabled
;
mozilla
:
:
Maybe
<
nsTArray
<
nsCOMPtr
<
nsIURI
>
>
>
mFileURIAllowlist
;
nsCOMPtr
<
nsIDomainPolicy
>
mDomainPolicy
;
static
std
:
:
atomic
<
bool
>
sStrictFileOriginPolicy
;
static
mozilla
:
:
StaticRefPtr
<
nsIIOService
>
sIOService
;
static
nsIStringBundle
*
sStrBundle
;
}
;
#
endif
