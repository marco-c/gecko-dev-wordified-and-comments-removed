#
ifndef
mozilla_PrincipalHashKey_h
#
define
mozilla_PrincipalHashKey_h
#
include
"
BasePrincipal
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsHashKeys
.
h
"
namespace
mozilla
{
class
PrincipalHashKey
:
public
PLDHashEntryHdr
{
public
:
using
KeyType
=
nsIPrincipal
*
;
using
KeyTypePointer
=
const
nsIPrincipal
*
;
explicit
PrincipalHashKey
(
const
nsIPrincipal
*
aKey
)
:
mPrincipal
(
const_cast
<
nsIPrincipal
*
>
(
aKey
)
)
{
MOZ_ASSERT
(
aKey
)
;
MOZ_COUNT_CTOR
(
PrincipalHashKey
)
;
}
PrincipalHashKey
(
PrincipalHashKey
&
&
aKey
)
:
mPrincipal
(
std
:
:
move
(
aKey
.
mPrincipal
)
)
{
MOZ_COUNT_CTOR
(
PrincipalHashKey
)
;
}
MOZ_COUNTED_DTOR
(
PrincipalHashKey
)
nsIPrincipal
*
GetKey
(
)
const
{
return
mPrincipal
;
}
bool
KeyEquals
(
const
nsIPrincipal
*
aKey
)
const
{
return
BasePrincipal
:
:
Cast
(
mPrincipal
)
-
>
FastEquals
(
const_cast
<
nsIPrincipal
*
>
(
aKey
)
)
;
}
static
const
nsIPrincipal
*
KeyToPointer
(
const
nsIPrincipal
*
aKey
)
{
return
aKey
;
}
static
PLDHashNumber
HashKey
(
const
nsIPrincipal
*
aKey
)
{
auto
*
bp
=
BasePrincipal
:
:
Cast
(
aKey
)
;
return
HashGeneric
(
bp
-
>
GetOriginNoSuffixHash
(
)
bp
-
>
GetOriginSuffixHash
(
)
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
protected
:
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
}
;
}
#
endif
