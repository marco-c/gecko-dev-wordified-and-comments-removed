#
include
"
RecordReplay
.
h
"
#
include
"
js
/
GCAnnotations
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
stdlib
.
h
>
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
NIGHTLY_BUILD
)
#
define
ENABLE_RECORD_REPLAY
#
endif
#
ifdef
ENABLE_RECORD_REPLAY
#
include
<
dlfcn
.
h
>
#
endif
namespace
mozilla
:
:
recordreplay
{
#
define
FOR_EACH_INTERFACE
(
Macro
)
\
Macro
(
InternalAreThreadEventsPassedThrough
bool
(
)
(
)
)
\
Macro
(
InternalAreThreadEventsDisallowed
bool
(
)
(
)
)
\
Macro
(
InternalRecordReplayValue
size_t
(
size_t
aValue
)
(
aValue
)
)
\
Macro
(
InternalHasDivergedFromRecording
bool
(
)
(
)
)
\
Macro
(
InternalGeneratePLDHashTableCallbacks
const
PLDHashTableOps
*
\
(
const
PLDHashTableOps
*
aOps
)
(
aOps
)
)
\
Macro
(
InternalUnwrapPLDHashTableCallbacks
const
PLDHashTableOps
*
\
(
const
PLDHashTableOps
*
aOps
)
(
aOps
)
)
\
Macro
(
InternalThingIndex
size_t
(
void
*
aThing
)
(
aThing
)
)
\
Macro
(
InternalVirtualThingName
const
char
*
(
void
*
aThing
)
(
aThing
)
)
\
Macro
(
ExecutionProgressCounter
ProgressCounter
*
(
)
(
)
)
\
Macro
(
NewTimeWarpTarget
ProgressCounter
(
)
(
)
)
\
Macro
(
ShouldUpdateProgressCounter
bool
(
const
char
*
aURL
)
(
aURL
)
)
\
Macro
(
DefineRecordReplayControlObject
bool
(
void
*
aCx
void
*
aObj
)
\
(
aCx
aObj
)
)
#
define
FOR_EACH_INTERFACE_VOID
(
Macro
)
\
Macro
(
InternalBeginOrderedAtomicAccess
(
const
void
*
aValue
)
(
aValue
)
)
\
Macro
(
InternalEndOrderedAtomicAccess
(
)
(
)
)
\
Macro
(
InternalBeginPassThroughThreadEvents
(
)
(
)
)
\
Macro
(
InternalEndPassThroughThreadEvents
(
)
(
)
)
\
Macro
(
InternalBeginPassThroughThreadEventsWithLocalReplay
(
)
(
)
)
\
Macro
(
InternalEndPassThroughThreadEventsWithLocalReplay
(
)
(
)
)
\
Macro
(
InternalBeginDisallowThreadEvents
(
)
(
)
)
\
Macro
(
InternalEndDisallowThreadEvents
(
)
(
)
)
\
Macro
(
InternalRecordReplayBytes
(
void
*
aData
size_t
aSize
)
\
(
aData
aSize
)
)
\
Macro
(
InternalInvalidateRecording
(
const
char
*
aWhy
)
(
aWhy
)
)
\
Macro
(
InternalDestroyPLDHashTableCallbacks
(
const
PLDHashTableOps
*
aOps
)
\
(
aOps
)
)
\
Macro
(
InternalMovePLDHashTableContents
\
(
const
PLDHashTableOps
*
aFirstOps
const
PLDHashTableOps
*
aSecondOps
)
\
(
aFirstOps
aSecondOps
)
)
\
Macro
(
InternalHoldJSObject
(
void
*
aJSObj
)
(
aJSObj
)
)
\
Macro
(
InternalRecordReplayAssert
(
const
char
*
aFormat
va_list
aArgs
)
\
(
aFormat
aArgs
)
)
\
Macro
(
InternalRecordReplayAssertBytes
(
const
void
*
aData
size_t
aSize
)
\
(
aData
aSize
)
)
\
Macro
(
InternalRegisterThing
(
void
*
aThing
)
(
aThing
)
)
\
Macro
(
InternalUnregisterThing
(
void
*
aThing
)
(
aThing
)
)
\
Macro
(
BeginContentParse
\
(
const
void
*
aToken
const
char
*
aURL
const
char
*
aContentType
)
\
(
aToken
aURL
aContentType
)
)
\
Macro
(
AddContentParseData8
\
(
const
void
*
aToken
const
mozilla
:
:
Utf8Unit
*
aUtf8Buffer
\
size_t
aLength
)
\
(
aToken
aUtf8Buffer
aLength
)
)
\
Macro
(
AddContentParseData16
\
(
const
void
*
aToken
const
char16_t
*
aBuffer
size_t
aLength
)
\
(
aToken
aBuffer
aLength
)
)
\
Macro
(
EndContentParse
(
const
void
*
aToken
)
(
aToken
)
)
#
define
DECLARE_SYMBOL
(
aName
aReturnType
aFormals
_
)
\
static
aReturnType
(
*
gPtr
#
#
aName
)
aFormals
;
#
define
DECLARE_SYMBOL_VOID
(
aName
aFormals
_
)
\
DECLARE_SYMBOL
(
aName
void
aFormals
_
)
FOR_EACH_INTERFACE
(
DECLARE_SYMBOL
)
FOR_EACH_INTERFACE_VOID
(
DECLARE_SYMBOL_VOID
)
#
undef
DECLARE_SYMBOL
#
undef
DECLARE_SYMBOL_VOID
static
void
*
LoadSymbol
(
const
char
*
aName
)
{
#
ifdef
ENABLE_RECORD_REPLAY
void
*
rv
=
dlsym
(
RTLD_DEFAULT
aName
)
;
if
(
!
rv
)
{
fprintf
(
stderr
"
Record
/
Replay
LoadSymbol
failed
:
%
s
\
n
"
aName
)
;
MOZ_CRASH
(
"
LoadSymbol
"
)
;
}
return
rv
;
#
else
return
nullptr
;
#
endif
}
void
Initialize
(
int
aArgc
char
*
aArgv
[
]
)
{
bool
found
=
false
;
for
(
int
i
=
0
;
i
<
aArgc
;
i
+
+
)
{
if
(
!
strcmp
(
aArgv
[
i
]
gProcessKindOption
)
)
{
found
=
true
;
break
;
}
}
if
(
!
found
)
{
return
;
}
void
(
*
initialize
)
(
int
char
*
*
)
;
BitwiseCast
(
LoadSymbol
(
"
RecordReplayInterface_Initialize
"
)
&
initialize
)
;
if
(
!
initialize
)
{
return
;
}
#
define
INIT_SYMBOL
(
aName
_1
_2
_3
)
\
BitwiseCast
(
LoadSymbol
(
"
RecordReplayInterface_
"
#
aName
)
&
gPtr
#
#
aName
)
;
#
define
INIT_SYMBOL_VOID
(
aName
_2
_3
)
INIT_SYMBOL
(
aName
void
_2
_3
)
FOR_EACH_INTERFACE
(
INIT_SYMBOL
)
FOR_EACH_INTERFACE_VOID
(
INIT_SYMBOL_VOID
)
#
undef
INIT_SYMBOL
#
undef
INIT_SYMBOL_VOID
initialize
(
aArgc
aArgv
)
;
}
struct
AutoSuppressGCAnalysis
{
AutoSuppressGCAnalysis
(
)
{
}
#
ifdef
XGILL_PLUGIN
~
AutoSuppressGCAnalysis
(
)
{
static
Atomic
<
int
SequentiallyConsistent
Behavior
:
:
DontPreserve
>
dummy
;
dummy
+
+
;
}
#
endif
}
JS_HAZ_GC_SUPPRESSED
;
#
define
DEFINE_WRAPPER
(
aName
aReturnType
aFormals
aActuals
)
\
aReturnType
aName
aFormals
{
\
AutoSuppressGCAnalysis
suppress
;
\
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
|
|
IsMiddleman
(
)
)
;
\
return
gPtr
#
#
aName
aActuals
;
\
}
#
define
DEFINE_WRAPPER_VOID
(
aName
aFormals
aActuals
)
\
void
aName
aFormals
{
\
AutoSuppressGCAnalysis
suppress
;
\
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
|
|
IsMiddleman
(
)
)
;
\
gPtr
#
#
aName
aActuals
;
\
}
FOR_EACH_INTERFACE
(
DEFINE_WRAPPER
)
FOR_EACH_INTERFACE_VOID
(
DEFINE_WRAPPER_VOID
)
#
undef
DEFINE_WRAPPER
#
undef
DEFINE_WRAPPER_VOID
#
ifdef
ENABLE_RECORD_REPLAY
bool
gIsRecordingOrReplaying
;
bool
gIsRecording
;
bool
gIsReplaying
;
bool
gIsMiddleman
;
#
endif
#
undef
ENABLE_RECORD_REPLAY
}
