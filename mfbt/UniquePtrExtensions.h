#
ifndef
mozilla_UniquePtrExtensions_h
#
define
mozilla_UniquePtrExtensions_h
#
include
"
mozilla
/
fallible
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
template
<
typename
T
typename
.
.
.
Args
>
typename
detail
:
:
UniqueSelector
<
T
>
:
:
SingleObject
MakeUniqueFallible
(
Args
&
&
.
.
.
aArgs
)
{
return
UniquePtr
<
T
>
(
new
(
fallible
)
T
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
template
<
typename
T
>
typename
detail
:
:
UniqueSelector
<
T
>
:
:
UnknownBound
MakeUniqueFallible
(
decltype
(
sizeof
(
int
)
)
aN
)
{
typedef
typename
RemoveExtent
<
T
>
:
:
Type
ArrayType
;
return
UniquePtr
<
T
>
(
new
(
fallible
)
ArrayType
[
aN
]
(
)
)
;
}
template
<
typename
T
typename
.
.
.
Args
>
typename
detail
:
:
UniqueSelector
<
T
>
:
:
KnownBound
MakeUniqueFallible
(
Args
&
&
.
.
.
aArgs
)
=
delete
;
namespace
detail
{
template
<
typename
T
>
struct
FreePolicy
{
void
operator
(
)
(
const
void
*
ptr
)
{
free
(
const_cast
<
void
*
>
(
ptr
)
)
;
}
}
;
}
template
<
typename
T
>
using
UniqueFreePtr
=
UniquePtr
<
T
detail
:
:
FreePolicy
<
T
>
>
;
}
#
endif
