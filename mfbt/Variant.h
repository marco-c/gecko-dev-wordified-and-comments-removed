#
include
<
new
>
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
TemplateLib
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
ifndef
mozilla_Variant_h
#
define
mozilla_Variant_h
namespace
mozilla
{
template
<
typename
.
.
.
Ts
>
class
Variant
;
namespace
detail
{
template
<
typename
.
.
.
>
struct
FirstTypeIsInRest
;
template
<
typename
First
>
struct
FirstTypeIsInRest
<
First
>
:
FalseType
{
}
;
template
<
typename
First
typename
Second
typename
.
.
.
Rest
>
struct
FirstTypeIsInRest
<
First
Second
Rest
.
.
.
>
{
static
constexpr
bool
value
=
IsSame
<
First
Second
>
:
:
value
|
|
FirstTypeIsInRest
<
First
Rest
.
.
.
>
:
:
value
;
}
;
template
<
typename
.
.
.
>
struct
TypesAreDistinct
;
template
<
>
struct
TypesAreDistinct
<
>
:
TrueType
{
}
;
template
<
typename
First
typename
.
.
.
Rest
>
struct
TypesAreDistinct
<
First
Rest
.
.
.
>
{
static
constexpr
bool
value
=
!
FirstTypeIsInRest
<
First
Rest
.
.
.
>
:
:
value
&
&
TypesAreDistinct
<
Rest
.
.
.
>
:
:
value
;
}
;
template
<
typename
Needle
typename
.
.
.
Haystack
>
struct
IsVariant
;
template
<
typename
Needle
>
struct
IsVariant
<
Needle
>
:
FalseType
{
}
;
template
<
typename
Needle
typename
.
.
.
Haystack
>
struct
IsVariant
<
Needle
Needle
Haystack
.
.
.
>
:
TrueType
{
}
;
template
<
typename
Needle
typename
T
typename
.
.
.
Haystack
>
struct
IsVariant
<
Needle
T
Haystack
.
.
.
>
:
public
IsVariant
<
Needle
Haystack
.
.
.
>
{
}
;
template
<
typename
T
typename
.
.
.
Variants
>
struct
SelectVariantTypeHelper
;
template
<
typename
T
>
struct
SelectVariantTypeHelper
<
T
>
{
}
;
template
<
typename
T
typename
.
.
.
Variants
>
struct
SelectVariantTypeHelper
<
T
T
Variants
.
.
.
>
{
typedef
T
Type
;
}
;
template
<
typename
T
typename
.
.
.
Variants
>
struct
SelectVariantTypeHelper
<
T
const
T
Variants
.
.
.
>
{
typedef
const
T
Type
;
}
;
template
<
typename
T
typename
.
.
.
Variants
>
struct
SelectVariantTypeHelper
<
T
const
T
&
Variants
.
.
.
>
{
typedef
const
T
&
Type
;
}
;
template
<
typename
T
typename
.
.
.
Variants
>
struct
SelectVariantTypeHelper
<
T
T
&
&
Variants
.
.
.
>
{
typedef
T
&
&
Type
;
}
;
template
<
typename
T
typename
Head
typename
.
.
.
Variants
>
struct
SelectVariantTypeHelper
<
T
Head
Variants
.
.
.
>
:
public
SelectVariantTypeHelper
<
T
Variants
.
.
.
>
{
}
;
template
<
typename
T
typename
.
.
.
Variants
>
struct
SelectVariantType
:
public
SelectVariantTypeHelper
<
typename
RemoveConst
<
typename
RemoveReference
<
T
>
:
:
Type
>
:
:
Type
Variants
.
.
.
>
{
}
;
template
<
typename
.
.
.
Ts
>
struct
VariantTag
{
private
:
static
const
size_t
TypeCount
=
sizeof
.
.
.
(
Ts
)
;
public
:
using
Type
=
typename
Conditional
<
TypeCount
<
3
bool
typename
Conditional
<
TypeCount
<
(
1
<
<
8
)
uint_fast8_t
size_t
>
:
:
Type
>
:
:
Type
;
}
;
template
<
typename
Tag
size_t
N
typename
T
typename
U
typename
Next
bool
isMatch
>
struct
TagHelper
;
template
<
typename
Tag
size_t
N
typename
T
typename
U
typename
Next
>
struct
TagHelper
<
Tag
N
T
U
Next
false
>
{
static
Tag
tag
(
)
{
return
Next
:
:
template
tag
<
U
>
(
)
;
}
}
;
template
<
typename
Tag
size_t
N
typename
T
typename
U
typename
Next
>
struct
TagHelper
<
Tag
N
T
U
Next
true
>
{
static
Tag
tag
(
)
{
return
Tag
(
N
)
;
}
}
;
template
<
typename
Tag
size_t
N
typename
.
.
.
Ts
>
struct
VariantImplementation
;
template
<
typename
Tag
size_t
N
typename
T
>
struct
VariantImplementation
<
Tag
N
T
>
{
template
<
typename
U
>
static
Tag
tag
(
)
{
static_assert
(
mozilla
:
:
IsSame
<
T
U
>
:
:
value
"
mozilla
:
:
Variant
:
tag
:
bad
type
!
"
)
;
return
Tag
(
N
)
;
}
template
<
typename
Variant
>
static
void
copyConstruct
(
void
*
aLhs
const
Variant
&
aRhs
)
{
new
(
aLhs
)
T
(
aRhs
.
template
as
<
T
>
(
)
)
;
}
template
<
typename
Variant
>
static
void
moveConstruct
(
void
*
aLhs
Variant
&
&
aRhs
)
{
new
(
aLhs
)
T
(
aRhs
.
template
extract
<
T
>
(
)
)
;
}
template
<
typename
Variant
>
static
void
destroy
(
Variant
&
aV
)
{
aV
.
template
as
<
T
>
(
)
.
~
T
(
)
;
}
template
<
typename
Variant
>
static
bool
equal
(
const
Variant
&
aLhs
const
Variant
&
aRhs
)
{
return
aLhs
.
template
as
<
T
>
(
)
=
=
aRhs
.
template
as
<
T
>
(
)
;
}
template
<
typename
Matcher
typename
ConcreteVariant
>
static
auto
match
(
Matcher
&
&
aMatcher
ConcreteVariant
&
aV
)
-
>
decltype
(
aMatcher
.
match
(
aV
.
template
as
<
T
>
(
)
)
)
{
return
aMatcher
.
match
(
aV
.
template
as
<
T
>
(
)
)
;
}
}
;
template
<
typename
Tag
size_t
N
typename
T
typename
.
.
.
Ts
>
struct
VariantImplementation
<
Tag
N
T
Ts
.
.
.
>
{
using
Next
=
VariantImplementation
<
Tag
N
+
1
Ts
.
.
.
>
;
template
<
typename
U
>
static
Tag
tag
(
)
{
return
TagHelper
<
Tag
N
T
U
Next
IsSame
<
T
U
>
:
:
value
>
:
:
tag
(
)
;
}
template
<
typename
Variant
>
static
void
copyConstruct
(
void
*
aLhs
const
Variant
&
aRhs
)
{
if
(
aRhs
.
template
is
<
T
>
(
)
)
{
new
(
aLhs
)
T
(
aRhs
.
template
as
<
T
>
(
)
)
;
}
else
{
Next
:
:
copyConstruct
(
aLhs
aRhs
)
;
}
}
template
<
typename
Variant
>
static
void
moveConstruct
(
void
*
aLhs
Variant
&
&
aRhs
)
{
if
(
aRhs
.
template
is
<
T
>
(
)
)
{
new
(
aLhs
)
T
(
aRhs
.
template
extract
<
T
>
(
)
)
;
}
else
{
Next
:
:
moveConstruct
(
aLhs
aRhs
)
;
}
}
template
<
typename
Variant
>
static
void
destroy
(
Variant
&
aV
)
{
if
(
aV
.
template
is
<
T
>
(
)
)
{
aV
.
template
as
<
T
>
(
)
.
~
T
(
)
;
}
else
{
Next
:
:
destroy
(
aV
)
;
}
}
template
<
typename
Variant
>
static
bool
equal
(
const
Variant
&
aLhs
const
Variant
&
aRhs
)
{
if
(
aLhs
.
template
is
<
T
>
(
)
)
{
MOZ_ASSERT
(
aRhs
.
template
is
<
T
>
(
)
)
;
return
aLhs
.
template
as
<
T
>
(
)
=
=
aRhs
.
template
as
<
T
>
(
)
;
}
else
{
return
Next
:
:
equal
(
aLhs
aRhs
)
;
}
}
template
<
typename
Matcher
typename
ConcreteVariant
>
static
auto
match
(
Matcher
&
&
aMatcher
ConcreteVariant
&
aV
)
-
>
decltype
(
aMatcher
.
match
(
aV
.
template
as
<
T
>
(
)
)
)
{
if
(
aV
.
template
is
<
T
>
(
)
)
{
return
aMatcher
.
match
(
aV
.
template
as
<
T
>
(
)
)
;
}
else
{
return
Next
:
:
match
(
aMatcher
aV
)
;
}
}
}
;
template
<
typename
T
>
struct
AsVariantTemporary
{
explicit
AsVariantTemporary
(
const
T
&
aValue
)
:
mValue
(
aValue
)
{
}
template
<
typename
U
>
explicit
AsVariantTemporary
(
U
&
&
aValue
)
:
mValue
(
Forward
<
U
>
(
aValue
)
)
{
}
AsVariantTemporary
(
const
AsVariantTemporary
&
aOther
)
:
mValue
(
aOther
.
mValue
)
{
}
AsVariantTemporary
(
AsVariantTemporary
&
&
aOther
)
:
mValue
(
Move
(
aOther
.
mValue
)
)
{
}
AsVariantTemporary
(
)
=
delete
;
void
operator
=
(
const
AsVariantTemporary
&
)
=
delete
;
void
operator
=
(
AsVariantTemporary
&
&
)
=
delete
;
typename
RemoveConst
<
typename
RemoveReference
<
T
>
:
:
Type
>
:
:
Type
mValue
;
}
;
}
template
<
typename
.
.
.
Ts
>
class
MOZ_INHERIT_TYPE_ANNOTATIONS_FROM_TEMPLATE_ARGS
MOZ_NON_PARAM
Variant
{
static_assert
(
detail
:
:
TypesAreDistinct
<
Ts
.
.
.
>
:
:
value
"
Variant
with
duplicate
types
is
not
supported
"
)
;
using
Tag
=
typename
detail
:
:
VariantTag
<
Ts
.
.
.
>
:
:
Type
;
using
Impl
=
detail
:
:
VariantImplementation
<
Tag
0
Ts
.
.
.
>
;
static
constexpr
size_t
RawDataAlignment
=
tl
:
:
Max
<
alignof
(
Ts
)
.
.
.
>
:
:
value
;
static
constexpr
size_t
RawDataSize
=
tl
:
:
Max
<
sizeof
(
Ts
)
.
.
.
>
:
:
value
;
alignas
(
RawDataAlignment
)
unsigned
char
rawData
[
RawDataSize
]
;
Tag
tag
;
void
*
ptr
(
)
{
return
rawData
;
}
const
void
*
ptr
(
)
const
{
return
rawData
;
}
public
:
template
<
typename
RefT
typename
T
=
typename
detail
:
:
SelectVariantType
<
RefT
Ts
.
.
.
>
:
:
Type
>
explicit
Variant
(
RefT
&
&
aT
)
:
tag
(
Impl
:
:
template
tag
<
T
>
(
)
)
{
new
(
ptr
(
)
)
T
(
Forward
<
RefT
>
(
aT
)
)
;
}
template
<
typename
RefT
typename
T
=
typename
detail
:
:
SelectVariantType
<
RefT
Ts
.
.
.
>
:
:
Type
>
MOZ_IMPLICIT
Variant
(
detail
:
:
AsVariantTemporary
<
RefT
>
&
&
aValue
)
:
tag
(
Impl
:
:
template
tag
<
T
>
(
)
)
{
new
(
ptr
(
)
)
T
(
Move
(
aValue
.
mValue
)
)
;
}
Variant
(
const
Variant
&
aRhs
)
:
tag
(
aRhs
.
tag
)
{
Impl
:
:
copyConstruct
(
ptr
(
)
aRhs
)
;
}
Variant
(
Variant
&
&
aRhs
)
:
tag
(
aRhs
.
tag
)
{
Impl
:
:
moveConstruct
(
ptr
(
)
Move
(
aRhs
)
)
;
}
Variant
&
operator
=
(
const
Variant
&
aRhs
)
{
MOZ_ASSERT
(
&
aRhs
!
=
this
"
self
-
assign
disallowed
"
)
;
this
-
>
~
Variant
(
)
;
new
(
this
)
Variant
(
aRhs
)
;
return
*
this
;
}
Variant
&
operator
=
(
Variant
&
&
aRhs
)
{
MOZ_ASSERT
(
&
aRhs
!
=
this
"
self
-
assign
disallowed
"
)
;
this
-
>
~
Variant
(
)
;
new
(
this
)
Variant
(
Move
(
aRhs
)
)
;
return
*
this
;
}
template
<
typename
T
>
Variant
&
operator
=
(
detail
:
:
AsVariantTemporary
<
T
>
&
&
aValue
)
{
this
-
>
~
Variant
(
)
;
new
(
this
)
Variant
(
Move
(
aValue
)
)
;
return
*
this
;
}
~
Variant
(
)
{
Impl
:
:
destroy
(
*
this
)
;
}
template
<
typename
T
>
bool
is
(
)
const
{
static_assert
(
detail
:
:
IsVariant
<
T
Ts
.
.
.
>
:
:
value
"
provided
a
type
not
found
in
this
Variant
'
s
type
list
"
)
;
return
Impl
:
:
template
tag
<
T
>
(
)
=
=
tag
;
}
bool
operator
=
=
(
const
Variant
&
aRhs
)
const
{
return
tag
=
=
aRhs
.
tag
&
&
Impl
:
:
equal
(
*
this
aRhs
)
;
}
bool
operator
!
=
(
const
Variant
&
aRhs
)
const
{
return
!
(
*
this
=
=
aRhs
)
;
}
template
<
typename
T
>
T
&
as
(
)
{
static_assert
(
detail
:
:
IsVariant
<
T
Ts
.
.
.
>
:
:
value
"
provided
a
type
not
found
in
this
Variant
'
s
type
list
"
)
;
MOZ_RELEASE_ASSERT
(
is
<
T
>
(
)
)
;
return
*
static_cast
<
T
*
>
(
ptr
(
)
)
;
}
template
<
typename
T
>
const
T
&
as
(
)
const
{
static_assert
(
detail
:
:
IsVariant
<
T
Ts
.
.
.
>
:
:
value
"
provided
a
type
not
found
in
this
Variant
'
s
type
list
"
)
;
MOZ_RELEASE_ASSERT
(
is
<
T
>
(
)
)
;
return
*
static_cast
<
const
T
*
>
(
ptr
(
)
)
;
}
template
<
typename
T
>
T
extract
(
)
{
static_assert
(
detail
:
:
IsVariant
<
T
Ts
.
.
.
>
:
:
value
"
provided
a
type
not
found
in
this
Variant
'
s
type
list
"
)
;
MOZ_ASSERT
(
is
<
T
>
(
)
)
;
return
T
(
Move
(
as
<
T
>
(
)
)
)
;
}
template
<
typename
Matcher
>
auto
match
(
Matcher
&
&
aMatcher
)
const
-
>
decltype
(
Impl
:
:
match
(
aMatcher
*
this
)
)
{
return
Impl
:
:
match
(
aMatcher
*
this
)
;
}
template
<
typename
Matcher
>
auto
match
(
Matcher
&
&
aMatcher
)
-
>
decltype
(
Impl
:
:
match
(
aMatcher
*
this
)
)
{
return
Impl
:
:
match
(
aMatcher
*
this
)
;
}
}
;
template
<
typename
T
>
detail
:
:
AsVariantTemporary
<
T
>
AsVariant
(
T
&
&
aValue
)
{
return
detail
:
:
AsVariantTemporary
<
T
>
(
Forward
<
T
>
(
aValue
)
)
;
}
}
#
endif
