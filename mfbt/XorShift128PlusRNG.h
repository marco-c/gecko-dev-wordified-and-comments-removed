#
ifndef
mozilla_XorShift128Plus_h
#
define
mozilla_XorShift128Plus_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
<
math
.
h
>
#
include
<
memory
.
h
>
#
include
<
stdint
.
h
>
namespace
mozilla
{
class
XorShift128PlusRNG
{
uint64_t
mState
[
2
]
;
public
:
XorShift128PlusRNG
(
uint64_t
aInitial0
uint64_t
aInitial1
)
{
setState
(
aInitial0
aInitial1
)
;
}
uint64_t
next
(
)
{
uint64_t
s1
=
mState
[
0
]
;
const
uint64_t
s0
=
mState
[
1
]
;
mState
[
0
]
=
s0
;
s1
^
=
s1
<
<
23
;
mState
[
1
]
=
s1
^
s0
^
(
s1
>
>
17
)
^
(
s0
>
>
26
)
;
return
mState
[
1
]
+
s0
;
}
double
nextDouble
(
)
{
static
const
int
kMantissaBits
=
mozilla
:
:
FloatingPoint
<
double
>
:
:
kExponentShift
+
1
;
uint64_t
mantissa
=
next
(
)
&
(
(
1ULL
<
<
kMantissaBits
)
-
1
)
;
return
ldexp
(
mantissa
-
kMantissaBits
)
;
}
void
setState
(
uint64_t
aState0
uint64_t
aState1
)
{
MOZ_ASSERT
(
aState0
|
|
aState1
)
;
mState
[
0
]
=
aState0
;
mState
[
1
]
=
aState1
;
}
}
;
}
#
endif
