#
ifndef
mozilla_IntegerTypeTraits_h
#
define
mozilla_IntegerTypeTraits_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
namespace
mozilla
{
namespace
detail
{
template
<
size_t
Size
bool
Signedness
>
struct
StdintTypeForSizeAndSignedness
;
template
<
>
struct
StdintTypeForSizeAndSignedness
<
1
true
>
{
typedef
int8_t
Type
;
}
;
template
<
>
struct
StdintTypeForSizeAndSignedness
<
1
false
>
{
typedef
uint8_t
Type
;
}
;
template
<
>
struct
StdintTypeForSizeAndSignedness
<
2
true
>
{
typedef
int16_t
Type
;
}
;
template
<
>
struct
StdintTypeForSizeAndSignedness
<
2
false
>
{
typedef
uint16_t
Type
;
}
;
template
<
>
struct
StdintTypeForSizeAndSignedness
<
4
true
>
{
typedef
int32_t
Type
;
}
;
template
<
>
struct
StdintTypeForSizeAndSignedness
<
4
false
>
{
typedef
uint32_t
Type
;
}
;
template
<
>
struct
StdintTypeForSizeAndSignedness
<
8
true
>
{
typedef
int64_t
Type
;
}
;
template
<
>
struct
StdintTypeForSizeAndSignedness
<
8
false
>
{
typedef
uint64_t
Type
;
}
;
}
template
<
size_t
Size
>
struct
UnsignedStdintTypeForSize
:
detail
:
:
StdintTypeForSizeAndSignedness
<
Size
false
>
{
}
;
template
<
size_t
Size
>
struct
SignedStdintTypeForSize
:
detail
:
:
StdintTypeForSizeAndSignedness
<
Size
true
>
{
}
;
template
<
typename
IntegerType
>
struct
PositionOfSignBit
{
static_assert
(
std
:
:
is_integral_v
<
IntegerType
>
"
PositionOfSignBit
is
only
for
integral
types
"
)
;
static
const
size_t
value
=
8
*
sizeof
(
IntegerType
)
-
1
;
}
;
}
#
endif
