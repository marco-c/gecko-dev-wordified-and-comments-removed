#
ifndef
mozilla_Latin1_h
#
define
mozilla_Latin1_h
#
include
"
mozilla
/
JsRust
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
if
MOZ_HAS_JSRUST
(
)
#
include
"
encoding_rs_mem
.
h
"
#
endif
namespace
mozilla
{
namespace
detail
{
template
<
typename
Char
>
class
MakeUnsignedChar
:
public
MakeUnsigned
<
Char
>
{
}
;
template
<
>
class
MakeUnsignedChar
<
char16_t
>
{
public
:
using
Type
=
char16_t
;
}
;
template
<
>
class
MakeUnsignedChar
<
char32_t
>
{
public
:
using
Type
=
char32_t
;
}
;
}
template
<
typename
Char
>
constexpr
bool
IsNonAsciiLatin1
(
Char
aChar
)
{
using
UnsignedChar
=
typename
detail
:
:
MakeUnsignedChar
<
Char
>
:
:
Type
;
auto
uc
=
static_cast
<
UnsignedChar
>
(
aChar
)
;
return
uc
>
=
0x80
&
&
uc
<
=
0xFF
;
}
#
if
MOZ_HAS_JSRUST
(
)
inline
bool
IsUtf16Latin1
(
mozilla
:
:
Span
<
const
char16_t
>
aString
)
{
return
encoding_mem_is_utf16_latin1
(
aString
.
Elements
(
)
aString
.
Length
(
)
)
;
}
inline
bool
IsUtf8Latin1
(
mozilla
:
:
Span
<
const
char
>
aString
)
{
return
encoding_mem_is_utf8_latin1
(
aString
.
Elements
(
)
aString
.
Length
(
)
)
;
}
inline
bool
UnsafeIsValidUtf8Latin1
(
mozilla
:
:
Span
<
const
char
>
aString
)
{
return
encoding_mem_is_str_latin1
(
aString
.
Elements
(
)
aString
.
Length
(
)
)
;
}
inline
size_t
Utf8Latin1UpTo
(
mozilla
:
:
Span
<
const
char
>
aString
)
{
return
encoding_mem_utf8_latin1_up_to
(
aString
.
Elements
(
)
aString
.
Length
(
)
)
;
}
inline
size_t
UnsafeValidUtf8Lati1UpTo
(
mozilla
:
:
Span
<
const
char
>
aString
)
{
return
encoding_mem_str_latin1_up_to
(
aString
.
Elements
(
)
aString
.
Length
(
)
)
;
}
inline
void
LossyConvertUtf16toLatin1
(
mozilla
:
:
Span
<
const
char16_t
>
aSource
mozilla
:
:
Span
<
char
>
aDest
)
{
encoding_mem_convert_utf16_to_latin1_lossy
(
aSource
.
Elements
(
)
aSource
.
Length
(
)
aDest
.
Elements
(
)
aDest
.
Length
(
)
)
;
}
inline
size_t
LossyConvertUtf8toLatin1
(
mozilla
:
:
Span
<
const
char
>
aSource
mozilla
:
:
Span
<
char
>
aDest
)
{
return
encoding_mem_convert_utf8_to_latin1_lossy
(
aSource
.
Elements
(
)
aSource
.
Length
(
)
aDest
.
Elements
(
)
aDest
.
Length
(
)
)
;
}
inline
size_t
ConvertLatin1toUtf8
(
mozilla
:
:
Span
<
const
char
>
aSource
mozilla
:
:
Span
<
char
>
aDest
)
{
return
encoding_mem_convert_latin1_to_utf8
(
aSource
.
Elements
(
)
aSource
.
Length
(
)
aDest
.
Elements
(
)
aDest
.
Length
(
)
)
;
}
inline
mozilla
:
:
Tuple
<
size_t
size_t
>
ConvertLatin1toUtf8Partial
(
mozilla
:
:
Span
<
const
char
>
aSource
mozilla
:
:
Span
<
char
>
aDest
)
{
size_t
srcLen
=
aSource
.
Length
(
)
;
size_t
dstLen
=
aDest
.
Length
(
)
;
encoding_mem_convert_latin1_to_utf8_partial
(
aSource
.
Elements
(
)
&
srcLen
aDest
.
Elements
(
)
&
dstLen
)
;
return
mozilla
:
:
MakeTuple
(
srcLen
dstLen
)
;
}
inline
void
ConvertLatin1toUtf16
(
mozilla
:
:
Span
<
const
char
>
aSource
mozilla
:
:
Span
<
char16_t
>
aDest
)
{
encoding_mem_convert_latin1_to_utf16
(
aSource
.
Elements
(
)
aSource
.
Length
(
)
aDest
.
Elements
(
)
aDest
.
Length
(
)
)
;
}
#
endif
}
;
#
endif
