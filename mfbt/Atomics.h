#
ifndef
mozilla_Atomics_h
#
define
mozilla_Atomics_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Compiler
.
h
"
#
include
"
mozilla
/
RecordReplay
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
<
atomic
>
#
include
<
stdint
.
h
>
namespace
mozilla
{
enum
MemoryOrdering
{
Relaxed
ReleaseAcquire
SequentiallyConsistent
}
;
namespace
detail
{
template
<
recordreplay
:
:
Behavior
Recording
>
struct
AutoRecordAtomicAccess
;
template
<
>
struct
AutoRecordAtomicAccess
<
recordreplay
:
:
Behavior
:
:
DontPreserve
>
{
AutoRecordAtomicAccess
(
)
{
}
~
AutoRecordAtomicAccess
(
)
{
}
}
;
template
<
>
struct
AutoRecordAtomicAccess
<
recordreplay
:
:
Behavior
:
:
Preserve
>
{
AutoRecordAtomicAccess
(
)
{
recordreplay
:
:
BeginOrderedAtomicAccess
(
)
;
}
~
AutoRecordAtomicAccess
(
)
{
recordreplay
:
:
EndOrderedAtomicAccess
(
)
;
}
}
;
template
<
MemoryOrdering
Order
>
struct
AtomicOrderConstraints
;
template
<
>
struct
AtomicOrderConstraints
<
Relaxed
>
{
static
const
std
:
:
memory_order
AtomicRMWOrder
=
std
:
:
memory_order_relaxed
;
static
const
std
:
:
memory_order
LoadOrder
=
std
:
:
memory_order_relaxed
;
static
const
std
:
:
memory_order
StoreOrder
=
std
:
:
memory_order_relaxed
;
static
const
std
:
:
memory_order
CompareExchangeFailureOrder
=
std
:
:
memory_order_relaxed
;
}
;
template
<
>
struct
AtomicOrderConstraints
<
ReleaseAcquire
>
{
static
const
std
:
:
memory_order
AtomicRMWOrder
=
std
:
:
memory_order_acq_rel
;
static
const
std
:
:
memory_order
LoadOrder
=
std
:
:
memory_order_acquire
;
static
const
std
:
:
memory_order
StoreOrder
=
std
:
:
memory_order_release
;
static
const
std
:
:
memory_order
CompareExchangeFailureOrder
=
std
:
:
memory_order_acquire
;
}
;
template
<
>
struct
AtomicOrderConstraints
<
SequentiallyConsistent
>
{
static
const
std
:
:
memory_order
AtomicRMWOrder
=
std
:
:
memory_order_seq_cst
;
static
const
std
:
:
memory_order
LoadOrder
=
std
:
:
memory_order_seq_cst
;
static
const
std
:
:
memory_order
StoreOrder
=
std
:
:
memory_order_seq_cst
;
static
const
std
:
:
memory_order
CompareExchangeFailureOrder
=
std
:
:
memory_order_seq_cst
;
}
;
template
<
typename
T
MemoryOrdering
Order
>
struct
IntrinsicBase
{
typedef
std
:
:
atomic
<
T
>
ValueType
;
typedef
AtomicOrderConstraints
<
Order
>
OrderedOp
;
}
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
struct
IntrinsicMemoryOps
:
public
IntrinsicBase
<
T
Order
>
{
typedef
IntrinsicBase
<
T
Order
>
Base
;
static
T
load
(
const
typename
Base
:
:
ValueType
&
aPtr
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
return
aPtr
.
load
(
Base
:
:
OrderedOp
:
:
LoadOrder
)
;
}
static
void
store
(
typename
Base
:
:
ValueType
&
aPtr
T
aVal
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
aPtr
.
store
(
aVal
Base
:
:
OrderedOp
:
:
StoreOrder
)
;
}
static
T
exchange
(
typename
Base
:
:
ValueType
&
aPtr
T
aVal
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
return
aPtr
.
exchange
(
aVal
Base
:
:
OrderedOp
:
:
AtomicRMWOrder
)
;
}
static
bool
compareExchange
(
typename
Base
:
:
ValueType
&
aPtr
T
aOldVal
T
aNewVal
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
return
aPtr
.
compare_exchange_strong
(
aOldVal
aNewVal
Base
:
:
OrderedOp
:
:
AtomicRMWOrder
Base
:
:
OrderedOp
:
:
CompareExchangeFailureOrder
)
;
}
}
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
struct
IntrinsicAddSub
:
public
IntrinsicBase
<
T
Order
>
{
typedef
IntrinsicBase
<
T
Order
>
Base
;
static
T
add
(
typename
Base
:
:
ValueType
&
aPtr
T
aVal
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
return
aPtr
.
fetch_add
(
aVal
Base
:
:
OrderedOp
:
:
AtomicRMWOrder
)
;
}
static
T
sub
(
typename
Base
:
:
ValueType
&
aPtr
T
aVal
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
return
aPtr
.
fetch_sub
(
aVal
Base
:
:
OrderedOp
:
:
AtomicRMWOrder
)
;
}
}
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
struct
IntrinsicAddSub
<
T
*
Order
Recording
>
:
public
IntrinsicBase
<
T
*
Order
>
{
typedef
IntrinsicBase
<
T
*
Order
>
Base
;
static
T
*
add
(
typename
Base
:
:
ValueType
&
aPtr
ptrdiff_t
aVal
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
return
aPtr
.
fetch_add
(
aVal
Base
:
:
OrderedOp
:
:
AtomicRMWOrder
)
;
}
static
T
*
sub
(
typename
Base
:
:
ValueType
&
aPtr
ptrdiff_t
aVal
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
return
aPtr
.
fetch_sub
(
aVal
Base
:
:
OrderedOp
:
:
AtomicRMWOrder
)
;
}
}
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
struct
IntrinsicIncDec
:
public
IntrinsicAddSub
<
T
Order
Recording
>
{
typedef
IntrinsicBase
<
T
Order
>
Base
;
static
T
inc
(
typename
Base
:
:
ValueType
&
aPtr
)
{
return
IntrinsicAddSub
<
T
Order
Recording
>
:
:
add
(
aPtr
1
)
;
}
static
T
dec
(
typename
Base
:
:
ValueType
&
aPtr
)
{
return
IntrinsicAddSub
<
T
Order
Recording
>
:
:
sub
(
aPtr
1
)
;
}
}
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
struct
AtomicIntrinsics
:
public
IntrinsicMemoryOps
<
T
Order
Recording
>
public
IntrinsicIncDec
<
T
Order
Recording
>
{
typedef
IntrinsicBase
<
T
Order
>
Base
;
static
T
or_
(
typename
Base
:
:
ValueType
&
aPtr
T
aVal
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
return
aPtr
.
fetch_or
(
aVal
Base
:
:
OrderedOp
:
:
AtomicRMWOrder
)
;
}
static
T
xor_
(
typename
Base
:
:
ValueType
&
aPtr
T
aVal
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
return
aPtr
.
fetch_xor
(
aVal
Base
:
:
OrderedOp
:
:
AtomicRMWOrder
)
;
}
static
T
and_
(
typename
Base
:
:
ValueType
&
aPtr
T
aVal
)
{
AutoRecordAtomicAccess
<
Recording
>
record
;
return
aPtr
.
fetch_and
(
aVal
Base
:
:
OrderedOp
:
:
AtomicRMWOrder
)
;
}
}
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
struct
AtomicIntrinsics
<
T
*
Order
Recording
>
:
public
IntrinsicMemoryOps
<
T
*
Order
Recording
>
public
IntrinsicIncDec
<
T
*
Order
Recording
>
{
}
;
template
<
typename
T
>
struct
ToStorageTypeArgument
{
static
constexpr
T
convert
(
T
aT
)
{
return
aT
;
}
}
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
class
AtomicBase
{
static_assert
(
sizeof
(
T
)
=
=
4
|
|
sizeof
(
T
)
=
=
8
"
mozilla
/
Atomics
.
h
only
supports
32
-
bit
and
64
-
bit
types
"
)
;
protected
:
typedef
typename
detail
:
:
AtomicIntrinsics
<
T
Order
Recording
>
Intrinsics
;
typedef
typename
Intrinsics
:
:
ValueType
ValueType
;
ValueType
mValue
;
public
:
constexpr
AtomicBase
(
)
:
mValue
(
)
{
}
explicit
constexpr
AtomicBase
(
T
aInit
)
:
mValue
(
ToStorageTypeArgument
<
T
>
:
:
convert
(
aInit
)
)
{
}
T
operator
=
(
T
aVal
)
{
Intrinsics
:
:
store
(
mValue
aVal
)
;
return
aVal
;
}
T
exchange
(
T
aVal
)
{
return
Intrinsics
:
:
exchange
(
mValue
aVal
)
;
}
bool
compareExchange
(
T
aOldValue
T
aNewValue
)
{
return
Intrinsics
:
:
compareExchange
(
mValue
aOldValue
aNewValue
)
;
}
private
:
AtomicBase
(
const
AtomicBase
&
aCopy
)
=
delete
;
}
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
class
AtomicBaseIncDec
:
public
AtomicBase
<
T
Order
Recording
>
{
typedef
typename
detail
:
:
AtomicBase
<
T
Order
Recording
>
Base
;
public
:
constexpr
AtomicBaseIncDec
(
)
:
Base
(
)
{
}
explicit
constexpr
AtomicBaseIncDec
(
T
aInit
)
:
Base
(
aInit
)
{
}
using
Base
:
:
operator
=
;
operator
T
(
)
const
{
return
Base
:
:
Intrinsics
:
:
load
(
Base
:
:
mValue
)
;
}
T
operator
+
+
(
int
)
{
return
Base
:
:
Intrinsics
:
:
inc
(
Base
:
:
mValue
)
;
}
T
operator
-
-
(
int
)
{
return
Base
:
:
Intrinsics
:
:
dec
(
Base
:
:
mValue
)
;
}
T
operator
+
+
(
)
{
return
Base
:
:
Intrinsics
:
:
inc
(
Base
:
:
mValue
)
+
1
;
}
T
operator
-
-
(
)
{
return
Base
:
:
Intrinsics
:
:
dec
(
Base
:
:
mValue
)
-
1
;
}
private
:
AtomicBaseIncDec
(
const
AtomicBaseIncDec
&
aCopy
)
=
delete
;
}
;
}
template
<
typename
T
MemoryOrdering
Order
=
SequentiallyConsistent
recordreplay
:
:
Behavior
Recording
=
recordreplay
:
:
Behavior
:
:
Preserve
typename
Enable
=
void
>
class
Atomic
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
class
Atomic
<
T
Order
Recording
typename
EnableIf
<
IsIntegral
<
T
>
:
:
value
&
&
!
IsSame
<
T
bool
>
:
:
value
>
:
:
Type
>
:
public
detail
:
:
AtomicBaseIncDec
<
T
Order
Recording
>
{
typedef
typename
detail
:
:
AtomicBaseIncDec
<
T
Order
Recording
>
Base
;
public
:
constexpr
Atomic
(
)
:
Base
(
)
{
}
explicit
constexpr
Atomic
(
T
aInit
)
:
Base
(
aInit
)
{
}
using
Base
:
:
operator
=
;
T
operator
+
=
(
T
aDelta
)
{
return
Base
:
:
Intrinsics
:
:
add
(
Base
:
:
mValue
aDelta
)
+
aDelta
;
}
T
operator
-
=
(
T
aDelta
)
{
return
Base
:
:
Intrinsics
:
:
sub
(
Base
:
:
mValue
aDelta
)
-
aDelta
;
}
T
operator
|
=
(
T
aVal
)
{
return
Base
:
:
Intrinsics
:
:
or_
(
Base
:
:
mValue
aVal
)
|
aVal
;
}
T
operator
^
=
(
T
aVal
)
{
return
Base
:
:
Intrinsics
:
:
xor_
(
Base
:
:
mValue
aVal
)
^
aVal
;
}
T
operator
&
=
(
T
aVal
)
{
return
Base
:
:
Intrinsics
:
:
and_
(
Base
:
:
mValue
aVal
)
&
aVal
;
}
private
:
Atomic
(
Atomic
&
aOther
)
=
delete
;
}
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
class
Atomic
<
T
*
Order
Recording
>
:
public
detail
:
:
AtomicBaseIncDec
<
T
*
Order
Recording
>
{
typedef
typename
detail
:
:
AtomicBaseIncDec
<
T
*
Order
Recording
>
Base
;
public
:
constexpr
Atomic
(
)
:
Base
(
)
{
}
explicit
constexpr
Atomic
(
T
*
aInit
)
:
Base
(
aInit
)
{
}
using
Base
:
:
operator
=
;
T
*
operator
+
=
(
ptrdiff_t
aDelta
)
{
return
Base
:
:
Intrinsics
:
:
add
(
Base
:
:
mValue
aDelta
)
+
aDelta
;
}
T
*
operator
-
=
(
ptrdiff_t
aDelta
)
{
return
Base
:
:
Intrinsics
:
:
sub
(
Base
:
:
mValue
aDelta
)
-
aDelta
;
}
private
:
Atomic
(
Atomic
&
aOther
)
=
delete
;
}
;
template
<
typename
T
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
class
Atomic
<
T
Order
Recording
typename
EnableIf
<
IsEnum
<
T
>
:
:
value
>
:
:
Type
>
:
public
detail
:
:
AtomicBase
<
T
Order
Recording
>
{
typedef
typename
detail
:
:
AtomicBase
<
T
Order
Recording
>
Base
;
public
:
constexpr
Atomic
(
)
:
Base
(
)
{
}
explicit
constexpr
Atomic
(
T
aInit
)
:
Base
(
aInit
)
{
}
operator
T
(
)
const
{
return
T
(
Base
:
:
Intrinsics
:
:
load
(
Base
:
:
mValue
)
)
;
}
using
Base
:
:
operator
=
;
private
:
Atomic
(
Atomic
&
aOther
)
=
delete
;
}
;
template
<
MemoryOrdering
Order
recordreplay
:
:
Behavior
Recording
>
class
Atomic
<
bool
Order
Recording
>
:
protected
detail
:
:
AtomicBase
<
uint32_t
Order
Recording
>
{
typedef
typename
detail
:
:
AtomicBase
<
uint32_t
Order
Recording
>
Base
;
public
:
constexpr
Atomic
(
)
:
Base
(
)
{
}
explicit
constexpr
Atomic
(
bool
aInit
)
:
Base
(
aInit
)
{
}
MOZ_IMPLICIT
operator
bool
(
)
const
{
return
Base
:
:
Intrinsics
:
:
load
(
Base
:
:
mValue
)
;
}
bool
operator
=
(
bool
aVal
)
{
return
Base
:
:
operator
=
(
aVal
)
;
}
bool
exchange
(
bool
aVal
)
{
return
Base
:
:
exchange
(
aVal
)
;
}
bool
compareExchange
(
bool
aOldValue
bool
aNewValue
)
{
return
Base
:
:
compareExchange
(
aOldValue
aNewValue
)
;
}
private
:
Atomic
(
Atomic
&
aOther
)
=
delete
;
}
;
template
<
typename
T
MemoryOrdering
Order
>
void
Swap
(
Atomic
<
T
Order
>
&
Atomic
<
T
Order
>
&
)
=
delete
;
}
#
endif
