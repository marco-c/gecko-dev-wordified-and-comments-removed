#
ifndef
mozilla_AtomicBitfields_h
#
define
mozilla_AtomicBitfields_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
MacroArgs
.
h
"
#
include
"
mozilla
/
MacroForEach
.
h
"
#
include
<
atomic
>
#
include
<
limits
>
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
namespace
mozilla
{
#
define
MOZ_ATOMIC_BITFIELDS
(
aBitfields
aBitfieldsSize
aFields
)
\
std
:
:
atomic_uint
#
#
aBitfieldsSize
#
#
_t
aBitfields
{
0
}
;
\
\
static
const
size_t
MOZ_CONCAT
(
aBitfields
_USED_BITS
)
=
\
MOZ_FOR_EACH_SEPARATED
(
MOZ_ATOMIC_BITFIELDS_FIELD_SIZE
(
+
)
(
)
\
aFields
)
;
\
\
MOZ_ROLL_EACH
(
MOZ_ATOMIC_BITFIELDS_OFFSET_HELPER1
(
aBitfields
)
aFields
)
\
\
static_assert
(
MOZ_CONCAT
(
aBitfields
_USED_BITS
)
<
=
aBitfieldsSize
\
#
aBitfields
"
:
Maximum
bits
(
"
#
aBitfieldsSize
\
"
)
exceeded
for
MOZ_ATOMIC_BITFIELDS
instance
"
)
;
\
\
MOZ_FOR_EACH
(
MOZ_ATOMIC_BITFIELDS_FIELD_HELPER
\
(
aBitfields
aBitfieldsSize
)
aFields
)
#
define
MOZ_ATOMIC_BITFIELDS_OFFSET_HELPER1
(
aBitfields
aFields
)
\
MOZ_ATOMIC_BITFIELDS_OFFSET_HELPER2
(
aBitfields
MOZ_ARG_1
aFields
aFields
)
;
#
define
MOZ_ATOMIC_BITFIELDS_OFFSET_HELPER2
(
aBitfields
aField
aFields
)
\
MOZ_ATOMIC_BITFIELDS_OFFSET
(
aBitfields
MOZ_ARG_2
aField
aFields
)
#
define
MOZ_ATOMIC_BITFIELDS_OFFSET
(
aBitfields
aFieldName
aFields
)
\
static
const
size_t
MOZ_CONCAT
(
aBitfields
aFieldName
)
=
\
MOZ_CONCAT
(
aBitfields
_USED_BITS
)
-
\
(
MOZ_FOR_EACH_SEPARATED
(
MOZ_ATOMIC_BITFIELDS_FIELD_SIZE
(
+
)
(
)
\
aFields
)
)
;
#
define
MOZ_ATOMIC_BITFIELDS_FIELD_SIZE
(
aArgs
)
MOZ_ARG_3
aArgs
#
define
MOZ_ATOMIC_BITFIELDS_FIELD_HELPER
(
aBitfields
aBitfieldsSize
aArgs
)
\
MOZ_ATOMIC_BITFIELDS_FIELD
(
aBitfields
aBitfieldsSize
MOZ_ARG_1
aArgs
\
MOZ_ARG_2
aArgs
MOZ_ARG_3
aArgs
)
#
ifdef
__COVERITY__
#
define
MOZ_ATOMIC_BITFIELDS_SET_GUARD
(
aValue
aFieldSize
)
#
else
#
define
MOZ_ATOMIC_BITFIELDS_SET_GUARD
(
aValue
aFieldSize
)
\
MOZ_ASSERT
(
(
(
uint64_t
)
aValue
)
<
(
1ull
<
<
aFieldSize
)
\
"
Stored
value
exceeded
capacity
of
bitfield
!
"
)
#
endif
#
define
MOZ_ATOMIC_BITFIELDS_FIELD
(
aBitfields
aBitfieldsSize
aFieldType
\
aFieldName
aFieldSize
)
\
static_assert
(
aBitfieldsSize
>
aFieldSize
\
#
aBitfields
"
:
MOZ_ATOMIC_BITFIELDS
field
too
big
"
)
;
\
static_assert
(
std
:
:
is_unsigned
<
aFieldType
>
(
)
#
aBitfields
\
"
:
MOZ_ATOMIC_BITFIELDS
doesn
'
t
support
signed
payloads
"
)
;
\
\
aFieldType
MOZ_CONCAT
(
Get
aFieldName
)
(
)
const
{
\
uint
#
#
aBitfieldsSize
#
#
_t
fieldSize
mask
masked
value
;
\
size_t
offset
=
MOZ_CONCAT
(
aBitfields
aFieldName
)
;
\
fieldSize
=
aFieldSize
;
\
mask
=
(
(
1ull
<
<
fieldSize
)
-
1ull
)
<
<
offset
;
\
masked
=
aBitfields
.
load
(
)
&
mask
;
\
value
=
(
masked
>
>
offset
)
;
\
return
value
;
\
}
\
\
void
MOZ_CONCAT
(
Set
aFieldName
)
(
aFieldType
aValue
)
{
\
MOZ_ATOMIC_BITFIELDS_SET_GUARD
(
aValue
aFieldSize
)
;
\
uint
#
#
aBitfieldsSize
#
#
_t
fieldSize
mask
resizedValue
packedValue
\
oldValue
clearedValue
newValue
;
\
size_t
offset
=
MOZ_CONCAT
(
aBitfields
aFieldName
)
;
\
fieldSize
=
aFieldSize
;
\
mask
=
(
(
1ull
<
<
fieldSize
)
-
1ull
)
<
<
offset
;
\
resizedValue
=
aValue
;
\
packedValue
=
(
resizedValue
<
<
offset
)
&
mask
;
\
oldValue
=
aBitfields
.
load
(
)
;
\
do
{
\
clearedValue
=
oldValue
&
~
mask
;
\
newValue
=
clearedValue
|
packedValue
;
\
}
while
(
!
aBitfields
.
compare_exchange_weak
(
oldValue
newValue
)
)
;
\
}
#
define
MOZ_ROLL_EACH_EXPAND_HELPER
(
.
.
.
)
__VA_ARGS__
#
define
MOZ_ROLL_EACH_GLUE
(
a
b
)
a
b
#
define
MOZ_ROLL_EACH_SEPARATED
(
aMacro
aSeparator
aFixedArgs
aArgs
)
\
MOZ_ROLL_EACH_GLUE
(
MOZ_PASTE_PREFIX_AND_ARG_COUNT
(
\
MOZ_ROLL_EACH_
MOZ_ROLL_EACH_EXPAND_HELPER
aArgs
)
\
(
aMacro
aSeparator
aFixedArgs
aArgs
)
)
#
define
MOZ_ROLL_EACH
(
aMacro
aFixedArgs
aArgs
)
\
MOZ_ROLL_EACH_SEPARATED
(
aMacro
(
)
aFixedArgs
aArgs
)
#
define
MOZ_ROLL_EACH_HELPER_GLUE
(
a
b
)
a
b
#
define
MOZ_ROLL_EACH_HELPER
(
aMacro
aFixedArgs
aArgs
)
\
MOZ_ROLL_EACH_HELPER_GLUE
(
aMacro
\
(
MOZ_ROLL_EACH_EXPAND_HELPER
aFixedArgs
aArgs
)
)
#
define
MOZ_ROLL_EACH_0
(
m
s
fa
a
)
#
define
MOZ_ROLL_EACH_1
(
m
s
fa
a
)
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
#
define
MOZ_ROLL_EACH_2
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_1
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_3
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_2
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_4
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_3
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_5
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_4
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_6
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_5
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_7
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_6
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_8
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_7
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_9
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_8
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_10
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_9
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_11
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_10
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_12
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_11
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_13
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_12
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_14
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_13
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_15
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_14
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_16
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_15
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_17
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_16
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_18
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_17
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_19
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_18
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_20
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_19
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_21
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_20
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_22
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_21
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_23
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_22
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_24
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_23
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_25
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_24
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_26
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_25
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_27
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_26
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_28
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_27
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_29
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_28
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_30
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_29
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_31
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_30
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
#
define
MOZ_ROLL_EACH_32
(
m
s
fa
a
)
\
MOZ_ROLL_EACH_HELPER
(
m
fa
a
)
\
MOZ_ROLL_EACH_EXPAND_HELPER
s
MOZ_ROLL_EACH_31
(
m
s
fa
(
MOZ_ARGS_AFTER_1
a
)
)
}
#
endif
