#
ifndef
mozilla_Alignment_h
#
define
mozilla_Alignment_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
namespace
mozilla
{
template
<
size_t
Align
>
struct
alignas
(
Align
)
AlignedElem
{
}
;
template
<
typename
T
>
struct
MOZ_INHERIT_TYPE_ANNOTATIONS_FROM_TEMPLATE_ARGS
AlignedStorage2
{
union
{
unsigned
char
mBytes
[
sizeof
(
T
)
]
;
uint64_t
mDummy
;
}
;
const
T
*
addr
(
)
const
{
return
reinterpret_cast
<
const
T
*
>
(
mBytes
)
;
}
T
*
addr
(
)
{
return
static_cast
<
T
*
>
(
static_cast
<
void
*
>
(
mBytes
)
)
;
}
const
void
*
bytes
(
)
const
{
return
static_cast
<
const
void
*
>
(
mBytes
)
;
}
void
*
bytes
(
)
{
return
static_cast
<
void
*
>
(
mBytes
)
;
}
AlignedStorage2
(
)
=
default
;
AlignedStorage2
(
const
AlignedStorage2
&
)
=
delete
;
void
operator
=
(
const
AlignedStorage2
&
)
=
delete
;
}
;
}
#
endif
