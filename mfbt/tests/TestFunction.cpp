#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Function
.
h
"
using
mozilla
:
:
Function
;
#
define
CHECK
(
c
)
\
do
{
\
bool
cond
=
!
!
(
c
)
;
\
MOZ_RELEASE_ASSERT
(
cond
"
Failed
assertion
:
"
#
c
)
;
\
}
while
(
false
)
struct
ConvertibleToInt
{
operator
int
(
)
const
{
return
42
;
}
}
;
int
increment
(
int
arg
)
{
return
arg
+
1
;
}
struct
S
{
S
(
)
{
}
static
int
increment
(
int
arg
)
{
return
arg
+
1
;
}
int
decrement
(
int
arg
)
{
return
arg
-
1
;
}
int
sum
(
int
arg1
int
arg2
)
const
{
return
arg1
+
arg2
;
}
}
;
struct
Incrementor
{
int
operator
(
)
(
int
arg
)
{
return
arg
+
1
;
}
}
;
static
void
TestNonmemberFunction
(
)
{
Function
<
int
(
int
)
>
f
=
&
increment
;
CHECK
(
f
(
42
)
=
=
43
)
;
}
static
void
TestStaticMemberFunction
(
)
{
Function
<
int
(
int
)
>
f
=
&
S
:
:
increment
;
CHECK
(
f
(
42
)
=
=
43
)
;
}
static
void
TestFunctionObject
(
)
{
Function
<
int
(
int
)
>
f
=
Incrementor
(
)
;
CHECK
(
f
(
42
)
=
=
43
)
;
}
static
void
TestLambda
(
)
{
Function
<
int
(
int
)
>
f
=
[
]
(
int
arg
)
{
return
arg
+
1
;
}
;
CHECK
(
f
(
42
)
=
=
43
)
;
int
one
=
1
;
Function
<
int
(
int
)
>
g
=
[
one
]
(
int
arg
)
{
return
arg
+
one
;
}
;
CHECK
(
g
(
42
)
=
=
43
)
;
}
static
void
TestDefaultConstructionAndAssignmentLater
(
)
{
Function
<
int
(
int
)
>
f
;
f
=
&
increment
;
CHECK
(
f
(
42
)
=
=
43
)
;
}
static
void
TestReassignment
(
)
{
Function
<
int
(
int
)
>
f
=
&
increment
;
CHECK
(
f
(
42
)
=
=
43
)
;
f
=
[
]
(
int
arg
)
{
return
arg
+
2
;
}
;
CHECK
(
f
(
42
)
=
=
44
)
;
}
static
void
TestMemberFunction
(
)
{
Function
<
int
(
S
&
int
)
>
f
=
&
S
:
:
decrement
;
S
s
;
CHECK
(
(
f
(
s
1
)
=
=
0
)
)
;
}
static
void
TestConstMemberFunction
(
)
{
Function
<
int
(
const
S
*
int
int
)
>
f
=
&
S
:
:
sum
;
const
S
s
;
CHECK
(
(
f
(
&
s
1
1
)
=
=
2
)
)
;
}
int
main
(
)
{
TestNonmemberFunction
(
)
;
TestStaticMemberFunction
(
)
;
TestFunctionObject
(
)
;
TestLambda
(
)
;
TestDefaultConstructionAndAssignmentLater
(
)
;
TestReassignment
(
)
;
TestMemberFunction
(
)
;
TestConstMemberFunction
(
)
;
return
0
;
}
