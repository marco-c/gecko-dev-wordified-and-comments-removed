#
include
<
math
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Tainting
.
h
"
using
mozilla
:
:
Tainted
;
#
define
EXPECTED_VALUE
10
static
bool
externalFunction
(
int
arg
)
{
return
arg
>
2
;
}
static
void
TestTainting
(
)
{
int
bar
;
Tainted
<
int
>
foo
=
Tainted
<
int
>
(
EXPECTED_VALUE
)
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
foo
<
20
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
int
comparisonVariable
=
20
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
foo
<
comparisonVariable
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
foo
<
20
"
foo
must
be
less
than
20
because
higher
values
represent
decibel
"
"
levels
greater
than
a
a
jet
engine
inside
your
ear
.
"
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
foo
<
comparisonVariable
"
Test
comment
"
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
externalFunction
(
foo
)
"
Test
comment
"
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
(
[
&
foo
]
(
)
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
)
{
return
true
;
}
return
false
;
}
(
)
)
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
(
[
&
foo
]
(
)
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
)
{
return
true
;
}
return
false
;
}
(
)
)
"
This
tests
a
comment
"
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
(
[
&
foo
&
comparisonVariable
]
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
|
|
comparisonVariable
<
4
)
{
return
true
;
}
return
false
;
}
(
)
)
"
This
tests
a
comment
"
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
(
[
&
]
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
|
|
comparisonVariable
<
4
)
{
return
true
;
}
return
false
;
}
(
)
)
"
This
tests
a
comment
"
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
auto
lambda1
=
[
]
(
int
foo
)
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
)
{
return
true
;
}
return
false
;
}
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
lambda1
(
foo
)
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
lambda1
(
foo
)
"
Test
comment
.
"
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
auto
lambda2
=
[
&
]
(
int
foo
)
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
|
|
comparisonVariable
<
4
)
{
return
true
;
}
return
false
;
}
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
lambda2
(
foo
)
"
Test
comment
.
"
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
auto
lambda3
=
[
&
comparisonVariable
]
(
int
foo
)
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
|
|
comparisonVariable
<
4
)
{
return
true
;
}
return
false
;
}
;
bar
=
MOZ_VALIDATE_AND_GET
(
foo
lambda3
(
foo
)
"
Test
comment
.
"
)
;
MOZ_RELEASE_ASSERT
(
bar
=
=
EXPECTED_VALUE
)
;
if
(
MOZ_IS_VALID
(
foo
foo
<
20
)
)
{
MOZ_RELEASE_ASSERT
(
true
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
false
)
;
}
if
(
MOZ_IS_VALID
(
foo
foo
>
20
)
)
{
MOZ_RELEASE_ASSERT
(
false
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
true
)
;
}
if
(
MOZ_IS_VALID
(
foo
foo
<
comparisonVariable
)
)
{
MOZ_RELEASE_ASSERT
(
true
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
false
)
;
}
if
(
MOZ_IS_VALID
(
foo
(
[
&
foo
]
(
)
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
)
{
return
true
;
}
return
false
;
}
(
)
)
)
)
{
MOZ_RELEASE_ASSERT
(
true
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
false
)
;
}
if
(
MOZ_IS_VALID
(
foo
(
[
&
foo
&
comparisonVariable
]
(
)
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
|
|
comparisonVariable
<
4
)
{
return
true
;
}
return
false
;
}
(
)
)
)
)
{
MOZ_RELEASE_ASSERT
(
true
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
false
)
;
}
if
(
MOZ_IS_VALID
(
foo
lambda1
(
foo
)
)
)
{
MOZ_RELEASE_ASSERT
(
true
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
false
)
;
}
if
(
MOZ_IS_VALID
(
foo
lambda2
(
foo
)
)
)
{
MOZ_RELEASE_ASSERT
(
true
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
false
)
;
}
if
(
MOZ_IS_VALID
(
foo
lambda3
(
foo
)
)
)
{
MOZ_RELEASE_ASSERT
(
true
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
false
)
;
}
int
result
;
result
=
MOZ_VALIDATE_OR
(
foo
foo
<
20
100
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
EXPECTED_VALUE
)
;
result
=
MOZ_VALIDATE_OR
(
foo
foo
>
20
100
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
100
)
;
result
=
MOZ_VALIDATE_OR
(
foo
foo
<
comparisonVariable
100
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
EXPECTED_VALUE
)
;
result
=
MOZ_VALIDATE_OR
(
foo
lambda1
(
foo
)
100
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
EXPECTED_VALUE
)
;
result
=
MOZ_VALIDATE_OR
(
foo
lambda2
(
foo
)
100
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
EXPECTED_VALUE
)
;
result
=
MOZ_VALIDATE_OR
(
foo
lambda3
(
foo
)
100
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
EXPECTED_VALUE
)
;
result
=
MOZ_VALIDATE_OR
(
foo
(
[
&
foo
]
(
)
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
)
{
return
true
;
}
return
false
;
}
(
)
)
100
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
EXPECTED_VALUE
)
;
result
=
MOZ_VALIDATE_OR
(
foo
(
[
&
foo
]
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
)
{
return
true
;
}
return
false
;
}
(
)
)
100
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
EXPECTED_VALUE
)
;
result
=
MOZ_VALIDATE_OR
(
foo
(
[
&
foo
&
comparisonVariable
]
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
|
|
comparisonVariable
<
4
)
{
return
true
;
}
return
false
;
}
(
)
)
100
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
EXPECTED_VALUE
)
;
result
=
MOZ_VALIDATE_OR
(
foo
(
[
&
]
{
bool
intermediateResult
=
externalFunction
(
foo
)
;
if
(
intermediateResult
|
|
comparisonVariable
<
4
)
{
return
true
;
}
return
false
;
}
(
)
)
100
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
EXPECTED_VALUE
)
;
result
=
MOZ_NO_VALIDATE
(
foo
"
Value
is
used
to
match
against
a
dictionary
key
in
the
parent
.
"
"
If
there
'
s
no
key
present
there
won
'
t
be
a
match
.
"
"
There
is
no
risk
of
grabbing
a
cross
-
origin
value
from
the
dictionary
"
"
because
the
IPC
actor
is
instatiated
per
-
content
-
process
and
the
"
"
dictionary
is
not
shared
between
actors
.
"
)
;
MOZ_RELEASE_ASSERT
(
result
=
=
EXPECTED_VALUE
)
;
}
int
main
(
)
{
TestTainting
(
)
;
return
0
;
}
