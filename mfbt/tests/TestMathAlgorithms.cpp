#
include
"
mozilla
/
MathAlgorithms
.
h
"
using
mozilla
:
:
Clamp
;
using
mozilla
:
:
IsPowerOfTwo
;
static
void
TestClamp
(
)
{
MOZ_RELEASE_ASSERT
(
Clamp
(
0
0
0
)
=
=
0
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
1
0
0
)
=
=
0
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
-
1
0
0
)
=
=
0
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
0
1
1
)
=
=
1
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
0
1
2
)
=
=
1
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
0
-
1
-
1
)
=
=
-
1
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
0
-
2
-
1
)
=
=
-
1
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
0
1
3
)
=
=
1
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
1
1
3
)
=
=
1
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
2
1
3
)
=
=
2
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
3
1
3
)
=
=
3
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
4
1
3
)
=
=
3
)
;
MOZ_RELEASE_ASSERT
(
Clamp
(
5
1
3
)
=
=
3
)
;
MOZ_RELEASE_ASSERT
(
Clamp
<
uint8_t
>
(
UINT8_MAX
0
UINT8_MAX
)
=
=
UINT8_MAX
)
;
MOZ_RELEASE_ASSERT
(
Clamp
<
uint8_t
>
(
0
0
UINT8_MAX
)
=
=
0
)
;
MOZ_RELEASE_ASSERT
(
Clamp
<
int8_t
>
(
INT8_MIN
INT8_MIN
INT8_MAX
)
=
=
INT8_MIN
)
;
MOZ_RELEASE_ASSERT
(
Clamp
<
int8_t
>
(
INT8_MIN
0
INT8_MAX
)
=
=
0
)
;
MOZ_RELEASE_ASSERT
(
Clamp
<
int8_t
>
(
INT8_MAX
INT8_MIN
INT8_MAX
)
=
=
INT8_MAX
)
;
MOZ_RELEASE_ASSERT
(
Clamp
<
int8_t
>
(
INT8_MAX
INT8_MIN
0
)
=
=
0
)
;
}
static
void
TestIsPowerOfTwo
(
)
{
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
0u
)
)
;
MOZ_RELEASE_ASSERT
(
IsPowerOfTwo
(
1u
)
)
;
MOZ_RELEASE_ASSERT
(
IsPowerOfTwo
(
2u
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
3u
)
)
;
MOZ_RELEASE_ASSERT
(
IsPowerOfTwo
(
4u
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
5u
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
6u
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
7u
)
)
;
MOZ_RELEASE_ASSERT
(
IsPowerOfTwo
(
8u
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
9u
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint8_t
(
UINT8_MAX
/
2
)
)
)
;
MOZ_RELEASE_ASSERT
(
IsPowerOfTwo
(
uint8_t
(
UINT8_MAX
/
2
+
1
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint8_t
(
UINT8_MAX
/
2
+
2
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint8_t
(
UINT8_MAX
-
1
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint8_t
(
UINT8_MAX
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint16_t
(
UINT16_MAX
/
2
)
)
)
;
MOZ_RELEASE_ASSERT
(
IsPowerOfTwo
(
uint16_t
(
UINT16_MAX
/
2
+
1
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint16_t
(
UINT16_MAX
/
2
+
2
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint16_t
(
UINT16_MAX
-
1
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint16_t
(
UINT16_MAX
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint32_t
(
UINT32_MAX
/
2
)
)
)
;
MOZ_RELEASE_ASSERT
(
IsPowerOfTwo
(
uint32_t
(
UINT32_MAX
/
2
+
1
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint32_t
(
UINT32_MAX
/
2
+
2
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint32_t
(
UINT32_MAX
-
1
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint32_t
(
UINT32_MAX
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint64_t
(
UINT64_MAX
/
2
)
)
)
;
MOZ_RELEASE_ASSERT
(
IsPowerOfTwo
(
uint64_t
(
UINT64_MAX
/
2
+
1
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint64_t
(
UINT64_MAX
/
2
+
2
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint64_t
(
UINT64_MAX
-
1
)
)
)
;
MOZ_RELEASE_ASSERT
(
!
IsPowerOfTwo
(
uint64_t
(
UINT64_MAX
)
)
)
;
}
int
main
(
)
{
TestIsPowerOfTwo
(
)
;
TestClamp
(
)
;
return
0
;
}
