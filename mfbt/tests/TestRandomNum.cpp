#
include
"
mozilla
/
RandomNum
.
h
"
#
include
<
vector
>
#
define
NUM_RANDOMS_TO_GENERATE
5
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
RandomUint64
;
static
uint64_t
getRandomUint64OrDie
(
)
{
Maybe
<
uint64_t
>
maybeRandomNum
=
RandomUint64
(
)
;
MOZ_RELEASE_ASSERT
(
maybeRandomNum
.
isSome
(
)
)
;
return
maybeRandomNum
.
value
(
)
;
}
static
void
TestRandomUint64
(
)
{
std
:
:
vector
<
uint64_t
>
randomsList
;
randomsList
.
reserve
(
NUM_RANDOMS_TO_GENERATE
)
;
for
(
uint8_t
i
=
0
;
i
<
NUM_RANDOMS_TO_GENERATE
;
+
+
i
)
{
uint64_t
randomNum
=
getRandomUint64OrDie
(
)
;
for
(
uint64_t
num
:
randomsList
)
{
MOZ_RELEASE_ASSERT
(
randomNum
!
=
num
)
;
}
randomsList
.
push_back
(
randomNum
)
;
}
}
int
main
(
)
{
TestRandomUint64
(
)
;
return
0
;
}
