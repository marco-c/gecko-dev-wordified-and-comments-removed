#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ThreadSafeWeakPtr
.
h
"
using
mozilla
:
:
SupportsThreadSafeWeakPtr
;
using
mozilla
:
:
ThreadSafeWeakPtr
;
class
C
:
public
SupportsThreadSafeWeakPtr
<
C
>
{
public
:
MOZ_DECLARE_THREADSAFEWEAKREFERENCE_TYPENAME
(
C
)
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
C
)
int
mNum
;
C
(
)
:
mNum
(
0
)
{
}
~
C
(
)
{
mNum
=
0xDEAD
;
}
void
act
(
)
{
}
}
;
int
main
(
)
{
RefPtr
<
C
>
c1
=
new
C
;
MOZ_RELEASE_ASSERT
(
c1
-
>
mNum
=
=
0
)
;
ThreadSafeWeakPtr
<
C
>
w1
(
c1
)
;
{
RefPtr
<
C
>
s1
(
w1
)
;
MOZ_RELEASE_ASSERT
(
s1
)
;
MOZ_RELEASE_ASSERT
(
s1
=
=
c1
)
;
s1
-
>
mNum
=
1
;
s1
-
>
act
(
)
;
}
ThreadSafeWeakPtr
<
C
>
w2
(
c1
)
;
{
RefPtr
<
C
>
s2
(
w2
)
;
MOZ_RELEASE_ASSERT
(
s2
)
;
MOZ_RELEASE_ASSERT
(
s2
=
=
c1
)
;
MOZ_RELEASE_ASSERT
(
w1
=
=
s2
)
;
MOZ_RELEASE_ASSERT
(
s2
-
>
mNum
=
=
1
)
;
}
{
ThreadSafeWeakPtr
<
C
>
w4local
(
c1
)
;
MOZ_RELEASE_ASSERT
(
w4local
=
=
c1
)
;
}
MOZ_RELEASE_ASSERT
(
c1
-
>
mNum
=
=
1
)
;
MOZ_RELEASE_ASSERT
(
w1
=
=
c1
)
;
MOZ_RELEASE_ASSERT
(
w2
=
=
c1
)
;
RefPtr
<
C
>
c2
=
new
C
;
c2
-
>
mNum
=
2
;
{
RefPtr
<
C
>
s2
(
w2
)
;
MOZ_RELEASE_ASSERT
(
s2
-
>
mNum
=
=
1
)
;
}
w2
=
c2
;
{
RefPtr
<
C
>
s2
(
w2
)
;
MOZ_RELEASE_ASSERT
(
s2
)
;
MOZ_RELEASE_ASSERT
(
s2
=
=
c2
)
;
MOZ_RELEASE_ASSERT
(
s2
!
=
c1
)
;
MOZ_RELEASE_ASSERT
(
w1
!
=
s2
)
;
MOZ_RELEASE_ASSERT
(
s2
-
>
mNum
=
=
2
)
;
}
c1
=
nullptr
;
MOZ_RELEASE_ASSERT
(
!
bool
(
w1
)
"
Deleting
an
object
should
clear
ThreadSafeWeakPtr
'
s
to
it
.
"
)
;
MOZ_RELEASE_ASSERT
(
bool
(
w2
)
"
Deleting
an
object
should
not
clear
ThreadSafeWeakPtr
"
"
that
are
not
pointing
to
it
.
"
)
;
c2
=
nullptr
;
MOZ_RELEASE_ASSERT
(
!
bool
(
w2
)
"
Deleting
an
object
should
clear
ThreadSafeWeakPtr
'
s
to
it
.
"
)
;
}
