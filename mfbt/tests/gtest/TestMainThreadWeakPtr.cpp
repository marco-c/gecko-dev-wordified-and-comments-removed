#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
thread
>
using
namespace
mozilla
;
struct
C
:
public
SupportsWeakPtr
{
int
mNum
{
0
}
;
}
;
struct
HasWeakPtrToC
{
explicit
HasWeakPtrToC
(
C
*
c
)
:
mPtr
(
c
)
{
}
MainThreadWeakPtr
<
C
>
mPtr
;
~
HasWeakPtrToC
(
)
{
MOZ_RELEASE_ASSERT
(
!
NS_IsMainThread
(
)
"
Should
be
released
OMT
"
)
;
}
}
;
TEST
(
MFBT_MainThreadWeakPtr
Basic
)
{
auto
c
=
MakeUnique
<
C
>
(
)
;
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
weakRef
=
MakeUnique
<
HasWeakPtrToC
>
(
c
.
get
(
)
)
;
std
:
:
thread
t
(
[
weakRef
=
std
:
:
move
(
weakRef
)
]
{
}
)
;
MOZ_RELEASE_ASSERT
(
!
weakRef
)
;
c
=
nullptr
;
t
.
join
(
)
;
}
