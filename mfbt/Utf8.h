#
ifndef
mozilla_Utf8_h
#
define
mozilla_Utf8_h
#
include
"
mozilla
/
Types
.
h
"
#
include
<
limits
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
namespace
mozilla
{
union
Utf8Unit
;
static_assert
(
CHAR_BIT
=
=
8
"
Utf8Unit
won
'
t
work
so
well
with
non
-
octet
chars
"
)
;
union
Utf8Unit
{
private
:
char
mValue
;
public
:
explicit
constexpr
Utf8Unit
(
char
aUnit
)
:
mValue
(
aUnit
)
{
}
explicit
constexpr
Utf8Unit
(
unsigned
char
aUnit
)
:
mValue
(
static_cast
<
char
>
(
aUnit
)
)
{
}
constexpr
bool
operator
=
=
(
const
Utf8Unit
&
aOther
)
const
{
return
mValue
=
=
aOther
.
mValue
;
}
constexpr
bool
operator
!
=
(
const
Utf8Unit
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
constexpr
char
toChar
(
)
const
{
return
mValue
;
}
constexpr
unsigned
char
toUnsignedChar
(
)
const
{
return
static_cast
<
unsigned
char
>
(
mValue
)
;
}
constexpr
uint8_t
toUint8
(
)
const
{
return
static_cast
<
uint8_t
>
(
mValue
)
;
}
}
;
extern
MFBT_API
bool
IsValidUtf8
(
const
void
*
aCodeUnits
size_t
aCount
)
;
}
#
endif
