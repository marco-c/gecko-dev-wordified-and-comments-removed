#
ifndef
mozilla_BitSet_h
#
define
mozilla_BitSet_h
#
include
"
mozilla
/
Array
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
Span
.
h
"
namespace
mozilla
{
enum
MemoryOrdering
:
uint8_t
;
template
<
typename
T
MemoryOrdering
Order
typename
Enable
>
class
Atomic
;
namespace
detail
{
template
<
typename
T
>
struct
UnwrapMaybeAtomic
{
using
Type
=
T
;
}
;
template
<
typename
T
MemoryOrdering
Order
typename
Enable
>
struct
UnwrapMaybeAtomic
<
mozilla
:
:
Atomic
<
T
Order
Enable
>
>
{
using
Type
=
T
;
}
;
}
template
<
size_t
N
typename
StorageType
=
size_t
>
class
BitSet
{
public
:
using
Word
=
typename
detail
:
:
UnwrapMaybeAtomic
<
StorageType
>
:
:
Type
;
static_assert
(
sizeof
(
Word
)
=
=
sizeof
(
StorageType
)
)
;
static_assert
(
std
:
:
is_unsigned_v
<
Word
>
"
StorageType
must
be
an
unsigned
integral
type
or
equivalent
Atomic
"
)
;
static_assert
(
N
!
=
0
)
;
private
:
static
constexpr
size_t
kBitsPerWord
=
8
*
sizeof
(
Word
)
;
static
constexpr
size_t
kNumWords
=
(
N
+
kBitsPerWord
-
1
)
/
kBitsPerWord
;
static
constexpr
size_t
kPaddingBits
=
(
kNumWords
*
kBitsPerWord
)
-
N
;
static
constexpr
Word
kPaddingMask
=
Word
(
-
1
)
>
>
kPaddingBits
;
Array
<
StorageType
kNumWords
>
mStorage
;
constexpr
void
ResetPaddingBits
(
)
{
if
constexpr
(
kPaddingBits
!
=
0
)
{
mStorage
[
kNumWords
-
1
]
&
=
kPaddingMask
;
}
}
public
:
class
Reference
{
public
:
Reference
(
BitSet
<
N
StorageType
>
&
aBitSet
size_t
aPos
)
:
mBitSet
(
aBitSet
)
mPos
(
aPos
)
{
}
Reference
&
operator
=
(
bool
aValue
)
{
auto
bit
=
Word
(
1
)
<
<
(
mPos
%
kBitsPerWord
)
;
auto
&
word
=
mBitSet
.
mStorage
[
mPos
/
kBitsPerWord
]
;
if
(
aValue
)
{
word
|
=
bit
;
}
else
{
word
&
=
~
bit
;
}
return
*
this
;
}
MOZ_IMPLICIT
operator
bool
(
)
const
{
return
mBitSet
.
test
(
mPos
)
;
}
private
:
BitSet
<
N
StorageType
>
&
mBitSet
;
size_t
mPos
;
}
;
constexpr
BitSet
(
)
:
mStorage
(
)
{
}
BitSet
(
const
BitSet
&
aOther
)
{
*
this
=
aOther
;
}
BitSet
&
operator
=
(
const
BitSet
&
aOther
)
{
for
(
size_t
i
=
0
;
i
<
std
:
:
size
(
mStorage
)
;
i
+
+
)
{
mStorage
[
i
]
=
Word
(
aOther
.
mStorage
[
i
]
)
;
}
return
*
this
;
}
explicit
BitSet
(
Span
<
StorageType
kNumWords
>
aStorage
)
{
for
(
size_t
i
=
0
;
i
<
std
:
:
size
(
mStorage
)
;
i
+
+
)
{
mStorage
[
i
]
=
Word
(
aStorage
[
i
]
)
;
}
}
static
constexpr
size_t
size
(
)
{
return
N
;
}
constexpr
bool
test
(
size_t
aPos
)
const
{
MOZ_ASSERT
(
aPos
<
N
)
;
return
mStorage
[
aPos
/
kBitsPerWord
]
&
(
Word
(
1
)
<
<
(
aPos
%
kBitsPerWord
)
)
;
}
constexpr
bool
IsEmpty
(
)
const
{
for
(
const
StorageType
&
word
:
mStorage
)
{
if
(
word
)
{
return
false
;
}
}
return
true
;
}
explicit
constexpr
operator
bool
(
)
{
return
!
IsEmpty
(
)
;
}
constexpr
bool
operator
[
]
(
size_t
aPos
)
const
{
return
test
(
aPos
)
;
}
Reference
operator
[
]
(
size_t
aPos
)
{
MOZ_ASSERT
(
aPos
<
N
)
;
return
{
*
this
aPos
}
;
}
BitSet
operator
|
(
const
BitSet
<
N
StorageType
>
&
aOther
)
{
BitSet
result
=
*
this
;
result
|
=
aOther
;
return
result
;
}
BitSet
&
operator
|
=
(
const
BitSet
<
N
StorageType
>
&
aOther
)
{
for
(
size_t
i
=
0
;
i
<
std
:
:
size
(
mStorage
)
;
i
+
+
)
{
mStorage
[
i
]
|
=
aOther
.
mStorage
[
i
]
;
}
return
*
this
;
}
BitSet
operator
~
(
)
const
{
BitSet
result
=
*
this
;
result
.
Flip
(
)
;
return
result
;
}
BitSet
&
operator
&
=
(
const
BitSet
<
N
StorageType
>
&
aOther
)
{
for
(
size_t
i
=
0
;
i
<
std
:
:
size
(
mStorage
)
;
i
+
+
)
{
mStorage
[
i
]
&
=
aOther
.
mStorage
[
i
]
;
}
return
*
this
;
}
BitSet
operator
&
(
const
BitSet
<
N
StorageType
>
&
aOther
)
const
{
BitSet
result
=
*
this
;
result
&
=
aOther
;
return
result
;
}
bool
operator
=
=
(
const
BitSet
<
N
StorageType
>
&
aOther
)
const
{
return
mStorage
=
=
aOther
.
mStorage
;
}
bool
operator
!
=
(
const
BitSet
<
N
StorageType
>
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
size_t
Count
(
)
const
{
size_t
count
=
0
;
for
(
const
Word
word
:
mStorage
)
{
if
constexpr
(
kBitsPerWord
>
32
)
{
count
+
=
CountPopulation64
(
word
)
;
}
else
{
count
+
=
CountPopulation32
(
word
)
;
}
}
return
count
;
}
void
ResetAll
(
)
{
for
(
StorageType
&
word
:
mStorage
)
{
word
=
Word
(
0
)
;
}
}
void
SetAll
(
)
{
for
(
StorageType
&
word
:
mStorage
)
{
word
=
~
Word
(
0
)
;
}
ResetPaddingBits
(
)
;
}
void
Flip
(
)
{
for
(
StorageType
&
word
:
mStorage
)
{
word
=
~
word
;
}
ResetPaddingBits
(
)
;
}
size_t
FindFirst
(
)
const
{
return
FindNext
(
0
)
;
}
size_t
FindNext
(
size_t
aFromPos
)
const
{
MOZ_ASSERT
(
aFromPos
<
N
)
;
size_t
wordIndex
=
aFromPos
/
kBitsPerWord
;
size_t
bitIndex
=
aFromPos
%
kBitsPerWord
;
Word
word
=
mStorage
[
wordIndex
]
;
word
&
=
(
Word
(
-
1
)
<
<
bitIndex
)
;
while
(
word
=
=
0
)
{
wordIndex
+
+
;
if
(
wordIndex
=
=
kNumWords
)
{
return
SIZE_MAX
;
}
word
=
mStorage
[
wordIndex
]
;
}
uint_fast8_t
pos
=
CountTrailingZeroes
(
word
)
;
return
wordIndex
*
kBitsPerWord
+
pos
;
}
size_t
FindLast
(
)
const
{
return
FindPrev
(
size
(
)
-
1
)
;
}
size_t
FindPrev
(
size_t
aFromPos
)
const
{
MOZ_ASSERT
(
aFromPos
<
N
)
;
size_t
wordIndex
=
aFromPos
/
kBitsPerWord
;
size_t
bitIndex
=
aFromPos
%
kBitsPerWord
;
Word
word
=
mStorage
[
wordIndex
]
;
word
&
=
Word
(
-
1
)
>
>
(
kBitsPerWord
-
1
-
bitIndex
)
;
while
(
word
=
=
0
)
{
if
(
wordIndex
=
=
0
)
{
return
SIZE_MAX
;
}
wordIndex
-
-
;
word
=
mStorage
[
wordIndex
]
;
}
uint_fast8_t
pos
=
FindMostSignificantBit
(
word
)
;
return
wordIndex
*
kBitsPerWord
+
pos
;
}
Span
<
StorageType
>
Storage
(
)
{
return
mStorage
;
}
Span
<
const
StorageType
>
Storage
(
)
const
{
return
mStorage
;
}
}
;
}
#
endif
