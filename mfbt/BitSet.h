#
ifndef
mozilla_BitSet_h
#
define
mozilla_BitSet_h
#
include
"
mozilla
/
Array
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
Span
.
h
"
namespace
mozilla
{
template
<
size_t
N
typename
Word
=
size_t
>
class
BitSet
{
static_assert
(
std
:
:
is_unsigned_v
<
Word
>
"
The
Word
type
must
be
an
unsigned
integral
type
"
)
;
private
:
static
constexpr
size_t
kBitsPerWord
=
8
*
sizeof
(
Word
)
;
static
constexpr
size_t
kNumWords
=
(
N
+
kBitsPerWord
-
1
)
/
kBitsPerWord
;
Array
<
Word
kNumWords
>
mStorage
;
public
:
class
Reference
{
public
:
Reference
(
BitSet
<
N
Word
>
&
aBitSet
size_t
aPos
)
:
mBitSet
(
aBitSet
)
mPos
(
aPos
)
{
}
Reference
&
operator
=
(
bool
aValue
)
{
auto
bit
=
Word
(
1
)
<
<
(
mPos
%
kBitsPerWord
)
;
auto
&
word
=
mBitSet
.
mStorage
[
mPos
/
kBitsPerWord
]
;
word
=
(
word
&
~
bit
)
|
(
aValue
?
bit
:
0
)
;
return
*
this
;
}
MOZ_IMPLICIT
operator
bool
(
)
const
{
return
mBitSet
.
Test
(
mPos
)
;
}
private
:
BitSet
<
N
Word
>
&
mBitSet
;
size_t
mPos
;
}
;
BitSet
(
)
{
ResetAll
(
)
;
}
BitSet
(
const
BitSet
&
aOther
)
{
*
this
=
aOther
;
}
BitSet
&
operator
=
(
const
BitSet
&
aOther
)
{
PodCopy
(
mStorage
.
begin
(
)
aOther
.
mStorage
.
begin
(
)
kNumWords
)
;
return
*
this
;
}
explicit
BitSet
(
Span
<
Word
kNumWords
>
aStorage
)
{
PodCopy
(
mStorage
.
begin
(
)
aStorage
.
Elements
(
)
kNumWords
)
;
}
constexpr
size_t
Size
(
)
const
{
return
N
;
}
constexpr
bool
Test
(
size_t
aPos
)
const
{
MOZ_ASSERT
(
aPos
<
N
)
;
return
mStorage
[
aPos
/
kBitsPerWord
]
&
(
Word
(
1
)
<
<
(
aPos
%
kBitsPerWord
)
)
;
}
constexpr
bool
operator
[
]
(
size_t
aPos
)
const
{
return
Test
(
aPos
)
;
}
Reference
operator
[
]
(
size_t
aPos
)
{
MOZ_ASSERT
(
aPos
<
N
)
;
return
{
*
this
aPos
}
;
}
BitSet
operator
|
(
const
BitSet
<
N
Word
>
&
aOther
)
{
BitSet
result
=
*
this
;
result
|
=
aOther
;
return
result
;
}
BitSet
&
operator
|
=
(
const
BitSet
<
N
Word
>
&
aOther
)
{
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
mStorage
)
;
i
+
+
)
{
mStorage
[
i
]
|
=
aOther
.
mStorage
[
i
]
;
}
return
*
this
;
}
void
ResetAll
(
)
{
PodArrayZero
(
mStorage
)
;
}
void
SetAll
(
)
{
memset
(
mStorage
.
begin
(
)
0xff
kNumWords
*
sizeof
(
Word
)
)
;
constexpr
size_t
paddingBits
=
(
kNumWords
*
kBitsPerWord
)
-
N
;
constexpr
Word
paddingMask
=
Word
(
-
1
)
>
>
paddingBits
;
if
constexpr
(
paddingBits
!
=
0
)
{
mStorage
[
kNumWords
-
1
]
&
=
paddingMask
;
}
}
Span
<
Word
>
Storage
(
)
{
return
mStorage
;
}
Span
<
const
Word
>
Storage
(
)
const
{
return
mStorage
;
}
}
;
}
#
endif
