#
ifndef
mozilla_Compression_h_
#
define
mozilla_Compression_h_
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
struct
LZ4F_cctx_s
;
struct
LZ4F_dctx_s
;
namespace
mozilla
{
namespace
Compression
{
class
LZ4
{
public
:
static
MFBT_API
size_t
compress
(
const
char
*
aSource
size_t
aInputSize
char
*
aDest
)
;
static
MFBT_API
size_t
compressLimitedOutput
(
const
char
*
aSource
size_t
aInputSize
char
*
aDest
size_t
aMaxOutputSize
)
;
static
MFBT_API
MOZ_MUST_USE
bool
decompress
(
const
char
*
aSource
size_t
aInputSize
char
*
aDest
size_t
aMaxOutputSize
size_t
*
aOutputSize
)
;
static
MFBT_API
MOZ_MUST_USE
bool
decompressPartial
(
const
char
*
aSource
size_t
aInputSize
char
*
aDest
size_t
aMaxOutputSize
size_t
*
aOutputSize
)
;
static
inline
size_t
maxCompressedSize
(
size_t
aInputSize
)
{
size_t
max
=
(
aInputSize
+
(
aInputSize
/
255
)
+
16
)
;
MOZ_ASSERT
(
max
>
aInputSize
)
;
return
max
;
}
}
;
class
LZ4FrameCompressionContext
final
{
public
:
MFBT_API
LZ4FrameCompressionContext
(
int
aCompressionLevel
size_t
aMaxSrcSize
bool
aChecksum
bool
aStableSrc
=
false
)
;
MFBT_API
~
LZ4FrameCompressionContext
(
)
;
size_t
GetRequiredWriteBufferLength
(
)
{
return
mWriteBufLen
;
}
MFBT_API
Result
<
Span
<
const
char
>
size_t
>
BeginCompressing
(
Span
<
char
>
aWriteBuffer
)
;
MFBT_API
Result
<
Span
<
const
char
>
size_t
>
ContinueCompressing
(
Span
<
const
char
>
aInput
)
;
MFBT_API
Result
<
Span
<
const
char
>
size_t
>
EndCompressing
(
)
;
private
:
LZ4F_cctx_s
*
mContext
;
int
mCompressionLevel
;
bool
mGenerateChecksum
;
bool
mStableSrc
;
size_t
mMaxSrcSize
;
size_t
mWriteBufLen
;
Span
<
char
>
mWriteBuffer
;
}
;
struct
LZ4FrameDecompressionResult
{
size_t
mSizeRead
;
size_t
mSizeWritten
;
bool
mFinished
;
}
;
class
LZ4FrameDecompressionContext
final
{
public
:
explicit
MFBT_API
LZ4FrameDecompressionContext
(
bool
aStableDest
=
false
)
;
MFBT_API
~
LZ4FrameDecompressionContext
(
)
;
MFBT_API
Result
<
LZ4FrameDecompressionResult
size_t
>
Decompress
(
Span
<
char
>
aOutput
Span
<
const
char
>
aInput
)
;
private
:
LZ4F_dctx_s
*
mContext
;
bool
mStableDest
;
}
;
}
}
#
endif
