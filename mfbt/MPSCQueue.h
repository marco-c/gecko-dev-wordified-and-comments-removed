#
ifndef
mozilla_MPSCQueue_h
#
define
mozilla_MPSCQueue_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
<
algorithm
>
#
include
<
atomic
>
#
include
<
cstddef
>
#
include
<
limits
>
#
include
<
memory
>
#
include
<
thread
>
#
include
<
type_traits
>
#
include
<
optional
>
#
include
<
inttypes
.
h
>
namespace
mozilla
{
namespace
detail
{
template
<
typename
T
bool
IsPod
=
std
:
:
is_trivial
<
T
>
:
:
value
>
struct
MemoryOperations
{
static
void
MoveOrCopy
(
T
*
aDestination
T
*
aSource
size_t
aCount
)
;
}
;
template
<
typename
T
>
struct
MemoryOperations
<
T
true
>
{
static
void
MoveOrCopy
(
T
*
aDestination
T
*
aSource
size_t
aCount
)
{
PodCopy
(
aDestination
aSource
aCount
)
;
}
}
;
template
<
typename
T
>
struct
MemoryOperations
<
T
false
>
{
static
void
MoveOrCopy
(
T
*
aDestination
T
*
aSource
size_t
aCount
)
{
std
:
:
move
(
aSource
aSource
+
aCount
aDestination
)
;
}
}
;
}
static
const
bool
MPSC_DEBUG
=
false
;
static
const
size_t
kMaxCapacity
=
16
;
template
<
typename
T
>
class
MPSCRingBufferBase
{
public
:
explicit
MPSCRingBufferBase
(
size_t
aCapacity
)
:
mFree
(
0
)
mOccupied
(
0
)
mCapacity
(
aCapacity
+
1
)
{
MOZ_RELEASE_ASSERT
(
aCapacity
<
kMaxCapacity
)
;
if
constexpr
(
MPSC_DEBUG
)
{
fprintf
(
stderr
"
[
%
s
]
this
=
%
p
{
mCapacity
=
%
zu
mBits
=
%
"
PRIu64
"
mMask
=
0x
%
"
PRIx64
"
}
\
n
"
__PRETTY_FUNCTION__
this
mCapacity
mBits
mMask
)
;
}
for
(
uint64_t
i
=
1
;
i
<
StorageCapacity
(
)
;
+
+
i
)
{
MarkSlot
(
mFree
i
)
;
}
mData
=
std
:
:
make_unique
<
T
[
]
>
(
Capacity
(
)
)
;
std
:
:
atomic_thread_fence
(
std
:
:
memory_order_seq_cst
)
;
}
[
[
nodiscard
]
]
int
Send
(
T
&
aElement
)
{
std
:
:
optional
<
uint64_t
>
empty_idx
=
UnmarkSlot
(
mFree
)
;
if
(
empty_idx
.
has_value
(
)
)
{
detail
:
:
MemoryOperations
<
T
>
:
:
MoveOrCopy
(
&
mData
[
*
empty_idx
-
1
]
&
aElement
1
)
;
MarkSlot
(
mOccupied
*
empty_idx
)
;
return
*
empty_idx
;
}
return
0
;
}
[
[
nodiscard
]
]
int
Recv
(
T
*
aElement
)
{
std
:
:
optional
<
uint64_t
>
idx
=
UnmarkSlot
(
mOccupied
)
;
if
(
idx
.
has_value
(
)
)
{
if
(
aElement
)
{
detail
:
:
MemoryOperations
<
T
>
:
:
MoveOrCopy
(
aElement
&
mData
[
*
idx
-
1
]
1
)
;
}
MarkSlot
(
mFree
*
idx
)
;
return
*
idx
;
}
return
0
;
}
size_t
Capacity
(
)
const
{
return
StorageCapacity
(
)
-
1
;
}
private
:
[
[
nodiscard
]
]
uint64_t
Get
(
uint64_t
aNumber
uint64_t
aIndex
)
{
return
(
aNumber
>
>
(
mBits
*
aIndex
)
)
&
mMask
;
}
[
[
nodiscard
]
]
uint64_t
Set
(
uint64_t
aNumber
uint64_t
aIndex
uint64_t
aValue
)
{
return
(
aNumber
&
~
(
mMask
<
<
(
mBits
*
aIndex
)
)
)
|
(
aValue
<
<
(
mBits
*
aIndex
)
)
;
}
void
MarkSlot
(
std
:
:
atomic
<
uint64_t
>
&
aSlotStatus
uint64_t
aIndex
)
{
uint64_t
current
=
aSlotStatus
.
load
(
std
:
:
memory_order
:
:
memory_order_relaxed
)
;
do
{
auto
empty
=
[
&
]
(
)
-
>
std
:
:
optional
<
uint64_t
>
{
for
(
uint64_t
i
=
0
;
i
<
Capacity
(
)
;
+
+
i
)
{
if
(
Get
(
current
i
)
=
=
0
)
{
return
i
;
}
}
return
{
}
;
}
(
)
;
if
(
!
empty
.
has_value
(
)
)
{
MOZ_CRASH
(
"
No
empty
slot
available
"
)
;
}
uint64_t
modified
=
Set
(
current
*
empty
aIndex
)
;
if
(
aSlotStatus
.
compare_exchange_weak
(
current
modified
std
:
:
memory_order
:
:
memory_order_release
std
:
:
memory_order
:
:
memory_order_relaxed
)
)
{
if
constexpr
(
MPSC_DEBUG
)
{
fprintf
(
stderr
"
[
enqueue
]
modified
=
0x
%
"
PRIx64
"
=
>
index
=
%
"
PRIu64
"
\
n
"
modified
aIndex
)
;
}
return
;
}
}
while
(
true
)
;
}
[
[
nodiscard
]
]
std
:
:
optional
<
uint64_t
>
UnmarkSlot
(
std
:
:
atomic
<
uint64_t
>
&
aSlotStatus
)
{
uint64_t
current
=
aSlotStatus
.
load
(
std
:
:
memory_order
:
:
memory_order_relaxed
)
;
do
{
uint64_t
index
=
current
&
mMask
;
if
(
index
=
=
0
)
{
return
{
}
;
}
uint64_t
modified
=
current
>
>
mBits
;
if
(
aSlotStatus
.
compare_exchange_weak
(
current
modified
std
:
:
memory_order
:
:
memory_order_acquire
std
:
:
memory_order
:
:
memory_order_relaxed
)
)
{
if
constexpr
(
MPSC_DEBUG
)
{
fprintf
(
stderr
"
[
dequeue
]
current
=
0x
%
"
PRIx64
"
=
>
index
=
%
"
PRIu64
"
\
n
"
current
index
)
;
}
return
index
;
}
}
while
(
true
)
;
return
{
}
;
}
[
[
nodiscard
]
]
size_t
StorageCapacity
(
)
const
{
return
mCapacity
;
}
std
:
:
atomic
<
uint64_t
>
mFree
;
std
:
:
atomic
<
uint64_t
>
mOccupied
;
const
size_t
mCapacity
;
std
:
:
unique_ptr
<
T
[
]
>
mData
;
static
const
uint64_t
mBits
=
4
;
static
const
uint64_t
mMask
=
0b1111
;
}
;
template
<
typename
T
>
using
MPSCQueue
=
MPSCRingBufferBase
<
T
>
;
}
#
endif
