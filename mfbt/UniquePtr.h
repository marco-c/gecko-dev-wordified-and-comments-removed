#
ifndef
mozilla_UniquePtr_h
#
define
mozilla_UniquePtr_h
#
include
<
memory
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Compiler
.
h
"
namespace
mozilla
{
template
<
typename
T
>
using
DefaultDelete
=
std
:
:
default_delete
<
T
>
;
template
<
typename
T
class
D
=
DefaultDelete
<
T
>
>
using
UniquePtr
=
std
:
:
unique_ptr
<
T
D
>
;
}
namespace
mozilla
{
namespace
detail
{
template
<
typename
T
>
struct
UniqueSelector
{
typedef
UniquePtr
<
T
>
SingleObject
;
}
;
template
<
typename
T
>
struct
UniqueSelector
<
T
[
]
>
{
typedef
UniquePtr
<
T
[
]
>
UnknownBound
;
}
;
template
<
typename
T
decltype
(
sizeof
(
int
)
)
N
>
struct
UniqueSelector
<
T
[
N
]
>
{
typedef
UniquePtr
<
T
[
N
]
>
KnownBound
;
}
;
}
template
<
typename
T
typename
.
.
.
Args
>
auto
MakeUnique
(
Args
&
&
.
.
.
aArgs
)
{
return
std
:
:
make_unique
<
T
>
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
}
template
<
typename
T
>
typename
detail
:
:
UniqueSelector
<
T
>
:
:
SingleObject
WrapUnique
(
T
*
aPtr
)
{
return
UniquePtr
<
T
>
(
aPtr
)
;
}
}
namespace
mozilla
{
namespace
detail
{
template
<
class
T
class
UniquePtrT
>
class
MOZ_TEMPORARY_CLASS
TempPtrToSetterT
final
{
private
:
UniquePtrT
*
const
mDest
;
T
*
mNewVal
;
public
:
explicit
TempPtrToSetterT
(
UniquePtrT
*
dest
)
:
mDest
(
dest
)
mNewVal
(
mDest
-
>
get
(
)
)
{
}
operator
T
*
*
(
)
{
return
&
mNewVal
;
}
~
TempPtrToSetterT
(
)
{
if
(
mDest
-
>
get
(
)
!
=
mNewVal
)
{
mDest
-
>
reset
(
mNewVal
)
;
}
}
}
;
}
template
<
class
T
class
Deleter
>
auto
TempPtrToSetter
(
UniquePtr
<
T
Deleter
>
*
const
p
)
{
return
detail
:
:
TempPtrToSetterT
<
T
UniquePtr
<
T
Deleter
>
>
{
p
}
;
}
}
namespace
std
{
template
<
typename
T
class
D
>
bool
operator
=
=
(
const
mozilla
:
:
UniquePtr
<
T
D
>
&
aX
const
T
*
aY
)
{
return
aX
.
get
(
)
=
=
aY
;
}
template
<
typename
T
class
D
>
bool
operator
=
=
(
const
T
*
aY
const
mozilla
:
:
UniquePtr
<
T
D
>
&
aX
)
{
return
aY
=
=
aX
.
get
(
)
;
}
template
<
typename
T
class
D
>
bool
operator
!
=
(
const
mozilla
:
:
UniquePtr
<
T
D
>
&
aX
const
T
*
aY
)
{
return
aX
.
get
(
)
!
=
aY
;
}
template
<
typename
T
class
D
>
bool
operator
!
=
(
const
T
*
aY
const
mozilla
:
:
UniquePtr
<
T
D
>
&
aX
)
{
return
aY
!
=
aX
.
get
(
)
;
}
}
#
endif
