#
ifndef
mozilla_ChaosMode_h
#
define
mozilla_ChaosMode_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
<
cstdint
>
namespace
mozilla
{
enum
class
ChaosFeature
:
uint32_t
{
None
=
0x0
ThreadScheduling
=
0x1
NetworkScheduling
=
0x2
TimerScheduling
=
0x4
IOAmounts
=
0x8
HashTableIteration
=
0x10
ImageCache
=
0x20
TaskDispatching
=
0x40
TaskRunning
=
0x80
Any
=
0xffffffff
}
;
class
ChaosMode
{
static
MFBT_DATA
Atomic
<
uint32_t
Relaxed
>
ChaosModeCounter
;
static
MFBT_DATA
ChaosFeature
ChaosFeatures
;
public
:
static
void
SetChaosFeature
(
ChaosFeature
aChaosFeature
)
{
ChaosFeatures
=
aChaosFeature
;
}
static
bool
isActive
(
ChaosFeature
aFeature
)
{
return
ChaosModeCounter
>
0
&
&
(
uint32_t
(
ChaosFeatures
)
&
uint32_t
(
aFeature
)
)
;
}
static
void
enterChaosMode
(
)
{
ChaosModeCounter
+
+
;
}
static
void
leaveChaosMode
(
)
{
MOZ_ASSERT
(
ChaosModeCounter
>
0
)
;
ChaosModeCounter
-
-
;
}
static
uint32_t
randomUint32LessThan
(
uint32_t
aBound
)
{
MOZ_ASSERT
(
aBound
!
=
0
)
;
return
uint32_t
(
rand
(
)
)
%
aBound
;
}
static
int32_t
randomInt32InRange
(
int32_t
aLow
int32_t
aHigh
)
{
MOZ_ASSERT
(
aHigh
>
=
aLow
)
;
return
(
int32_t
(
rand
(
)
)
%
(
aHigh
-
aLow
+
1
)
)
+
aLow
;
}
}
;
}
#
endif
