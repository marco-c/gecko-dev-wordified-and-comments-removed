#
ifndef
mozilla_TextUtils_h
#
define
mozilla_TextUtils_h
#
include
"
mozilla
/
TypeTraits
.
h
"
namespace
mozilla
{
namespace
detail
{
template
<
typename
Char
>
class
MakeUnsignedChar
:
public
MakeUnsigned
<
Char
>
{
}
;
template
<
>
class
MakeUnsignedChar
<
char16_t
>
{
public
:
using
Type
=
char16_t
;
}
;
template
<
>
class
MakeUnsignedChar
<
char32_t
>
{
public
:
using
Type
=
char32_t
;
}
;
}
template
<
typename
Char
>
constexpr
bool
IsAsciiLowercaseAlpha
(
Char
aChar
)
{
using
UnsignedChar
=
typename
detail
:
:
MakeUnsignedChar
<
Char
>
:
:
Type
;
auto
uc
=
static_cast
<
UnsignedChar
>
(
aChar
)
;
return
'
a
'
<
=
uc
&
&
uc
<
=
'
z
'
;
}
template
<
typename
Char
>
constexpr
bool
IsAsciiUppercaseAlpha
(
Char
aChar
)
{
using
UnsignedChar
=
typename
detail
:
:
MakeUnsignedChar
<
Char
>
:
:
Type
;
auto
uc
=
static_cast
<
UnsignedChar
>
(
aChar
)
;
return
'
A
'
<
=
uc
&
&
uc
<
=
'
Z
'
;
}
template
<
typename
Char
>
constexpr
bool
IsAsciiAlpha
(
Char
aChar
)
{
return
IsAsciiLowercaseAlpha
(
aChar
)
|
|
IsAsciiUppercaseAlpha
(
aChar
)
;
}
template
<
typename
Char
>
constexpr
bool
IsAsciiDigit
(
Char
aChar
)
{
using
UnsignedChar
=
typename
detail
:
:
MakeUnsignedChar
<
Char
>
:
:
Type
;
auto
uc
=
static_cast
<
UnsignedChar
>
(
aChar
)
;
return
'
0
'
<
=
uc
&
&
uc
<
=
'
9
'
;
}
template
<
typename
Char
>
constexpr
bool
IsAsciiAlphanumeric
(
Char
aChar
)
{
return
IsAsciiDigit
(
aChar
)
|
|
IsAsciiAlpha
(
aChar
)
;
}
template
<
typename
Char
>
constexpr
uint8_t
AsciiAlphanumericToNumber
(
Char
aChar
)
{
using
UnsignedChar
=
typename
detail
:
:
MakeUnsignedChar
<
Char
>
:
:
Type
;
auto
uc
=
static_cast
<
UnsignedChar
>
(
aChar
)
;
if
(
'
0
'
<
=
uc
&
&
uc
<
=
'
9
'
)
{
return
aChar
-
'
0
'
;
}
if
(
'
A
'
<
=
uc
&
&
uc
<
=
'
Z
'
)
{
return
aChar
-
'
A
'
+
10
;
}
return
(
aChar
-
'
a
'
+
10
)
/
(
'
a
'
<
=
uc
&
&
uc
<
=
'
z
'
)
;
}
}
#
endif
