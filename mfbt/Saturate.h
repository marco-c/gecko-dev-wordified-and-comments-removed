#
ifndef
mozilla_Saturate_h
#
define
mozilla_Saturate_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
<
limits
>
namespace
mozilla
{
namespace
detail
{
template
<
typename
T
>
class
SaturateOp
{
public
:
explicit
SaturateOp
(
T
&
aValue
)
:
mValue
(
aValue
)
{
static_assert
(
IsIntegral
<
T
>
:
:
value
"
Integral
type
required
in
instantiation
"
)
;
}
T
operator
+
(
const
T
&
aRhs
)
const
{
return
T
(
mValue
)
+
=
aRhs
;
}
T
operator
-
(
const
T
&
aRhs
)
const
{
return
T
(
mValue
)
-
=
aRhs
;
}
const
T
&
operator
+
=
(
const
T
&
aRhs
)
const
{
const
T
min
=
std
:
:
numeric_limits
<
T
>
:
:
min
(
)
;
const
T
max
=
std
:
:
numeric_limits
<
T
>
:
:
max
(
)
;
if
(
aRhs
>
static_cast
<
T
>
(
0
)
)
{
mValue
=
(
max
-
aRhs
)
<
mValue
?
max
:
mValue
+
aRhs
;
}
else
{
mValue
=
(
min
-
aRhs
)
>
mValue
?
min
:
mValue
+
aRhs
;
}
return
mValue
;
}
const
T
&
operator
-
=
(
const
T
&
aRhs
)
const
{
const
T
min
=
std
:
:
numeric_limits
<
T
>
:
:
min
(
)
;
const
T
max
=
std
:
:
numeric_limits
<
T
>
:
:
max
(
)
;
if
(
aRhs
>
static_cast
<
T
>
(
0
)
)
{
mValue
=
(
min
+
aRhs
)
>
mValue
?
min
:
mValue
-
aRhs
;
}
else
{
mValue
=
(
max
+
aRhs
)
<
mValue
?
max
:
mValue
-
aRhs
;
}
return
mValue
;
}
const
T
&
operator
+
+
(
)
const
{
return
operator
+
=
(
static_cast
<
T
>
(
1
)
)
;
}
T
operator
+
+
(
int
)
const
{
const
T
value
(
mValue
)
;
operator
+
+
(
)
;
return
value
;
}
const
T
&
operator
-
-
(
)
const
{
return
operator
-
=
(
static_cast
<
T
>
(
1
)
)
;
}
T
operator
-
-
(
int
)
const
{
const
T
value
(
mValue
)
;
operator
-
-
(
)
;
return
value
;
}
private
:
SaturateOp
(
const
SaturateOp
<
T
>
&
)
=
delete
;
SaturateOp
(
SaturateOp
<
T
>
&
&
)
=
delete
;
SaturateOp
&
operator
=
(
const
SaturateOp
<
T
>
&
)
=
delete
;
SaturateOp
&
operator
=
(
SaturateOp
<
T
>
&
&
)
=
delete
;
T
&
mValue
;
}
;
template
<
typename
T
>
class
Saturate
{
public
:
Saturate
(
)
=
default
;
MOZ_IMPLICIT
Saturate
(
const
Saturate
<
T
>
&
)
=
default
;
MOZ_IMPLICIT
Saturate
(
Saturate
<
T
>
&
&
aValue
)
{
mValue
=
Move
(
aValue
.
mValue
)
;
}
explicit
Saturate
(
const
T
&
aValue
)
:
mValue
(
aValue
)
{
}
const
T
&
value
(
)
const
{
return
mValue
;
}
bool
operator
=
=
(
const
Saturate
<
T
>
&
aRhs
)
const
{
return
mValue
=
=
aRhs
.
mValue
;
}
bool
operator
!
=
(
const
Saturate
<
T
>
&
aRhs
)
const
{
return
!
operator
=
=
(
aRhs
)
;
}
bool
operator
=
=
(
const
T
&
aRhs
)
const
{
return
mValue
=
=
aRhs
;
}
bool
operator
!
=
(
const
T
&
aRhs
)
const
{
return
!
operator
=
=
(
aRhs
)
;
}
Saturate
<
T
>
&
operator
=
(
const
Saturate
<
T
>
&
)
=
default
;
Saturate
<
T
>
&
operator
=
(
Saturate
<
T
>
&
&
aRhs
)
{
mValue
=
Move
(
aRhs
.
mValue
)
;
return
*
this
;
}
Saturate
<
T
>
operator
+
(
const
Saturate
<
T
>
&
aRhs
)
const
{
Saturate
<
T
>
lhs
(
mValue
)
;
return
lhs
+
=
aRhs
.
mValue
;
}
Saturate
<
T
>
operator
+
(
const
T
&
aRhs
)
const
{
Saturate
<
T
>
lhs
(
mValue
)
;
return
lhs
+
=
aRhs
;
}
Saturate
<
T
>
operator
-
(
const
Saturate
<
T
>
&
aRhs
)
const
{
Saturate
<
T
>
lhs
(
mValue
)
;
return
lhs
-
=
aRhs
.
mValue
;
}
Saturate
<
T
>
operator
-
(
const
T
&
aRhs
)
const
{
Saturate
<
T
>
lhs
(
mValue
)
;
return
lhs
-
=
aRhs
;
}
Saturate
<
T
>
&
operator
+
=
(
const
Saturate
<
T
>
&
aRhs
)
{
SaturateOp
<
T
>
(
mValue
)
+
=
aRhs
.
mValue
;
return
*
this
;
}
Saturate
<
T
>
&
operator
+
=
(
const
T
&
aRhs
)
{
SaturateOp
<
T
>
(
mValue
)
+
=
aRhs
;
return
*
this
;
}
Saturate
<
T
>
&
operator
-
=
(
const
Saturate
<
T
>
&
aRhs
)
{
SaturateOp
<
T
>
(
mValue
)
-
=
aRhs
.
mValue
;
return
*
this
;
}
Saturate
<
T
>
&
operator
-
=
(
const
T
&
aRhs
)
{
SaturateOp
<
T
>
(
mValue
)
-
=
aRhs
;
return
*
this
;
}
Saturate
<
T
>
&
operator
+
+
(
)
{
+
+
SaturateOp
<
T
>
(
mValue
)
;
return
*
this
;
}
Saturate
<
T
>
operator
+
+
(
int
)
{
return
Saturate
<
T
>
(
SaturateOp
<
T
>
(
mValue
)
+
+
)
;
}
Saturate
<
T
>
&
operator
-
-
(
)
{
-
-
SaturateOp
<
T
>
(
mValue
)
;
return
*
this
;
}
Saturate
<
T
>
operator
-
-
(
int
)
{
return
Saturate
<
T
>
(
SaturateOp
<
T
>
(
mValue
)
-
-
)
;
}
private
:
T
mValue
;
}
;
}
typedef
detail
:
:
Saturate
<
int8_t
>
SaturateInt8
;
typedef
detail
:
:
Saturate
<
int16_t
>
SaturateInt16
;
typedef
detail
:
:
Saturate
<
int32_t
>
SaturateInt32
;
typedef
detail
:
:
Saturate
<
uint8_t
>
SaturateUint8
;
typedef
detail
:
:
Saturate
<
uint16_t
>
SaturateUint16
;
typedef
detail
:
:
Saturate
<
uint32_t
>
SaturateUint32
;
}
template
<
typename
LhsT
typename
RhsT
>
bool
operator
=
=
(
LhsT
aLhs
const
mozilla
:
:
detail
:
:
Saturate
<
RhsT
>
&
aRhs
)
{
return
aRhs
.
operator
=
=
(
static_cast
<
RhsT
>
(
aLhs
)
)
;
}
template
<
typename
LhsT
typename
RhsT
>
bool
operator
!
=
(
LhsT
aLhs
const
mozilla
:
:
detail
:
:
Saturate
<
RhsT
>
&
aRhs
)
{
return
!
(
aLhs
=
=
aRhs
)
;
}
#
endif
