#
ifndef
mozilla_InitializerList_h
#
define
mozilla_InitializerList_h
#
include
<
mozilla
/
Compiler
.
h
>
#
include
<
mozilla
/
Attributes
.
h
>
#
if
MOZ_USING_LIBCXX
#
define
MOZ_HAVE_INITIALIZER_LIST
#
elif
MOZ_USING_LIBSTDCXX
&
&
__GLIBCXX__
>
=
20090421
#
define
MOZ_HAVE_INITIALIZER_LIST
#
elif
_MSC_VER
#
define
MOZ_HAVE_INITIALIZER_LIST
#
elif
defined
(
MOZ_USING_STLPORT
)
#
else
#
error
"
Unknown
standard
library
situation
"
#
endif
#
ifdef
MOZ_HAVE_INITIALIZER_LIST
#
include
<
initializer_list
>
#
else
namespace
std
{
template
<
class
T
>
class
initializer_list
{
const
T
*
mBegin
;
size_t
mSize
;
initializer_list
(
const
T
*
begin
size_t
size
)
:
mBegin
(
begin
)
mSize
(
size
)
{
}
public
:
MOZ_CONSTEXPR
initializer_list
(
)
:
mBegin
(
nullptr
)
mSize
(
0
)
{
}
typedef
T
value_type
;
typedef
const
T
&
reference
;
typedef
const
T
&
const_reference
;
typedef
size_t
size_type
;
typedef
const
T
*
iterator
;
typedef
const
T
*
const_iterator
;
size_t
size
(
)
const
{
return
mSize
;
}
const
T
*
begin
(
)
const
{
return
mBegin
;
}
const
T
*
end
(
)
const
{
return
mBegin
+
mSize
;
}
}
;
}
#
endif
#
endif
