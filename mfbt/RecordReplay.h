#
ifndef
mozilla_RecordReplay_h
#
define
mozilla_RecordReplay_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
"
mozilla
/
TemplateLib
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
functional
>
#
include
<
stdarg
.
h
>
struct
PLDHashTableOps
;
struct
JSContext
;
class
JSObject
;
namespace
mozilla
{
namespace
recordreplay
{
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
NIGHTLY_BUILD
)
extern
MFBT_DATA
bool
gIsRecordingOrReplaying
;
extern
MFBT_DATA
bool
gIsRecording
;
extern
MFBT_DATA
bool
gIsReplaying
;
extern
MFBT_DATA
bool
gIsMiddleman
;
static
inline
bool
IsRecordingOrReplaying
(
)
{
return
gIsRecordingOrReplaying
;
}
static
inline
bool
IsRecording
(
)
{
return
gIsRecording
;
}
static
inline
bool
IsReplaying
(
)
{
return
gIsReplaying
;
}
static
inline
bool
IsMiddleman
(
)
{
return
gIsMiddleman
;
}
#
else
static
inline
bool
IsRecordingOrReplaying
(
)
{
return
false
;
}
static
inline
bool
IsRecording
(
)
{
return
false
;
}
static
inline
bool
IsReplaying
(
)
{
return
false
;
}
static
inline
bool
IsMiddleman
(
)
{
return
false
;
}
#
endif
static
inline
void
BeginOrderedAtomicAccess
(
const
void
*
aValue
)
;
static
inline
void
EndOrderedAtomicAccess
(
)
;
struct
MOZ_RAII
AutoOrderedAtomicAccess
{
explicit
AutoOrderedAtomicAccess
(
const
void
*
aValue
)
{
BeginOrderedAtomicAccess
(
aValue
)
;
}
~
AutoOrderedAtomicAccess
(
)
{
EndOrderedAtomicAccess
(
)
;
}
}
;
static
inline
void
BeginPassThroughThreadEvents
(
)
;
static
inline
void
EndPassThroughThreadEvents
(
)
;
static
inline
bool
AreThreadEventsPassedThrough
(
)
;
struct
MOZ_RAII
AutoPassThroughThreadEvents
{
AutoPassThroughThreadEvents
(
)
{
BeginPassThroughThreadEvents
(
)
;
}
~
AutoPassThroughThreadEvents
(
)
{
EndPassThroughThreadEvents
(
)
;
}
}
;
struct
MOZ_RAII
AutoEnsurePassThroughThreadEvents
{
AutoEnsurePassThroughThreadEvents
(
)
:
mPassedThrough
(
AreThreadEventsPassedThrough
(
)
)
{
if
(
!
mPassedThrough
)
BeginPassThroughThreadEvents
(
)
;
}
~
AutoEnsurePassThroughThreadEvents
(
)
{
if
(
!
mPassedThrough
)
EndPassThroughThreadEvents
(
)
;
}
private
:
bool
mPassedThrough
;
}
;
static
inline
void
BeginDisallowThreadEvents
(
)
;
static
inline
void
EndDisallowThreadEvents
(
)
;
static
inline
bool
AreThreadEventsDisallowed
(
)
;
struct
MOZ_RAII
AutoDisallowThreadEvents
{
AutoDisallowThreadEvents
(
)
{
BeginDisallowThreadEvents
(
)
;
}
~
AutoDisallowThreadEvents
(
)
{
EndDisallowThreadEvents
(
)
;
}
}
;
static
inline
size_t
RecordReplayValue
(
size_t
aValue
)
;
static
inline
void
RecordReplayBytes
(
void
*
aData
size_t
aSize
)
;
static
inline
void
InvalidateRecording
(
const
char
*
aWhy
)
;
static
inline
const
PLDHashTableOps
*
GeneratePLDHashTableCallbacks
(
const
PLDHashTableOps
*
aOps
)
;
static
inline
const
PLDHashTableOps
*
UnwrapPLDHashTableCallbacks
(
const
PLDHashTableOps
*
aOps
)
;
static
inline
void
DestroyPLDHashTableCallbacks
(
const
PLDHashTableOps
*
aOps
)
;
static
inline
void
MovePLDHashTableContents
(
const
PLDHashTableOps
*
aFirstOps
const
PLDHashTableOps
*
aSecondOps
)
;
static
inline
void
HoldJSObject
(
JSObject
*
aJSObj
)
;
static
inline
bool
HasDivergedFromRecording
(
)
;
static
inline
void
RecordReplayAssert
(
const
char
*
aFormat
.
.
.
)
;
static
inline
void
RecordReplayAssertBytes
(
const
void
*
aData
size_t
aSize
)
;
static
inline
void
RegisterThing
(
void
*
aThing
)
;
static
inline
void
UnregisterThing
(
void
*
aThing
)
;
static
inline
size_t
ThingIndex
(
void
*
aThing
)
;
static
inline
const
char
*
VirtualThingName
(
void
*
aThing
)
;
enum
class
Behavior
{
DontPreserve
Preserve
}
;
MFBT_API
void
Initialize
(
int
aArgc
char
*
aArgv
[
]
)
;
enum
class
ProcessKind
{
Recording
Replaying
MiddlemanRecording
MiddlemanReplaying
}
;
static
const
char
gProcessKindOption
[
]
=
"
-
recordReplayKind
"
;
static
const
char
gRecordingFileOption
[
]
=
"
-
recordReplayFile
"
;
typedef
uint64_t
ProgressCounter
;
MFBT_API
ProgressCounter
*
ExecutionProgressCounter
(
)
;
static
inline
void
AdvanceExecutionProgressCounter
(
)
{
+
+
*
ExecutionProgressCounter
(
)
;
}
MFBT_API
ProgressCounter
NewTimeWarpTarget
(
)
;
MFBT_API
bool
ShouldUpdateProgressCounter
(
const
char
*
aURL
)
;
MFBT_API
bool
DefineRecordReplayControlObject
(
JSContext
*
aCx
JSObject
*
aObj
)
;
MFBT_API
void
BeginContentParse
(
const
void
*
aToken
const
char
*
aURL
const
char
*
aContentType
)
;
MFBT_API
void
AddContentParseData8
(
const
void
*
aToken
const
Utf8Unit
*
aUtf8Buffer
size_t
aLength
)
;
MFBT_API
void
AddContentParseData16
(
const
void
*
aToken
const
char16_t
*
aBuffer
size_t
aLength
)
;
MFBT_API
void
EndContentParse
(
const
void
*
aToken
)
;
static
inline
void
NoteContentParse
(
const
void
*
aToken
const
char
*
aURL
const
char
*
aContentType
const
Utf8Unit
*
aUtf8Buffer
size_t
aLength
)
{
BeginContentParse
(
aToken
aURL
aContentType
)
;
AddContentParseData8
(
aToken
aUtf8Buffer
aLength
)
;
EndContentParse
(
aToken
)
;
}
static
inline
void
NoteContentParse
(
const
void
*
aToken
const
char
*
aURL
const
char
*
aContentType
const
char16_t
*
aBuffer
size_t
aLength
)
{
BeginContentParse
(
aToken
aURL
aContentType
)
;
AddContentParseData16
(
aToken
aBuffer
aLength
)
;
EndContentParse
(
aToken
)
;
}
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
NIGHTLY_BUILD
)
#
define
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
aName
aFormals
aActuals
)
\
MFBT_API
void
Internal
#
#
aName
aFormals
;
\
static
inline
void
aName
aFormals
{
\
if
(
IsRecordingOrReplaying
(
)
)
{
\
Internal
#
#
aName
aActuals
;
\
}
\
}
#
define
MOZ_MAKE_RECORD_REPLAY_WRAPPER
(
aName
aReturnType
aDefaultValue
\
aFormals
aActuals
)
\
MFBT_API
aReturnType
Internal
#
#
aName
aFormals
;
\
static
inline
aReturnType
aName
aFormals
{
\
if
(
IsRecordingOrReplaying
(
)
)
{
\
return
Internal
#
#
aName
aActuals
;
\
}
\
return
aDefaultValue
;
\
}
#
else
#
define
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
aName
aFormals
aActuals
)
\
static
inline
void
aName
aFormals
{
}
#
define
MOZ_MAKE_RECORD_REPLAY_WRAPPER
(
aName
aReturnType
aDefaultValue
\
aFormals
aActuals
)
\
static
inline
aReturnType
aName
aFormals
{
return
aDefaultValue
;
}
#
endif
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
BeginOrderedAtomicAccess
(
const
void
*
aValue
)
(
aValue
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
EndOrderedAtomicAccess
(
)
(
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
BeginPassThroughThreadEvents
(
)
(
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
EndPassThroughThreadEvents
(
)
(
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER
(
AreThreadEventsPassedThrough
bool
false
(
)
(
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
BeginDisallowThreadEvents
(
)
(
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
EndDisallowThreadEvents
(
)
(
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER
(
AreThreadEventsDisallowed
bool
false
(
)
(
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER
(
RecordReplayValue
size_t
aValue
(
size_t
aValue
)
(
aValue
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
RecordReplayBytes
(
void
*
aData
size_t
aSize
)
(
aData
aSize
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER
(
HasDivergedFromRecording
bool
false
(
)
(
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER
(
GeneratePLDHashTableCallbacks
const
PLDHashTableOps
*
aOps
(
const
PLDHashTableOps
*
aOps
)
(
aOps
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER
(
UnwrapPLDHashTableCallbacks
const
PLDHashTableOps
*
aOps
(
const
PLDHashTableOps
*
aOps
)
(
aOps
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
DestroyPLDHashTableCallbacks
(
const
PLDHashTableOps
*
aOps
)
(
aOps
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
MovePLDHashTableContents
(
const
PLDHashTableOps
*
aFirstOps
const
PLDHashTableOps
*
aSecondOps
)
(
aFirstOps
aSecondOps
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
InvalidateRecording
(
const
char
*
aWhy
)
(
aWhy
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
HoldJSObject
(
JSObject
*
aObject
)
(
aObject
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
RecordReplayAssertBytes
(
const
void
*
aData
size_t
aSize
)
(
aData
aSize
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
RegisterThing
(
void
*
aThing
)
(
aThing
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
(
UnregisterThing
(
void
*
aThing
)
(
aThing
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER
(
ThingIndex
size_t
0
(
void
*
aThing
)
(
aThing
)
)
MOZ_MAKE_RECORD_REPLAY_WRAPPER
(
VirtualThingName
const
char
*
nullptr
(
void
*
aThing
)
(
aThing
)
)
#
undef
MOZ_MAKE_RECORD_REPLAY_WRAPPER_VOID
#
undef
MOZ_MAKERECORDREPLAYWRAPPER
MFBT_API
void
InternalRecordReplayAssert
(
const
char
*
aFormat
va_list
aArgs
)
;
static
inline
void
RecordReplayAssert
(
const
char
*
aFormat
.
.
.
)
{
if
(
IsRecordingOrReplaying
(
)
)
{
va_list
ap
;
va_start
(
ap
aFormat
)
;
InternalRecordReplayAssert
(
aFormat
ap
)
;
va_end
(
ap
)
;
}
}
}
}
#
endif
