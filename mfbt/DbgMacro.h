#
ifndef
mozilla_DbgMacro_h
#
define
mozilla_DbgMacro_h
#
include
"
mozilla
/
MacroForEach
.
h
"
#
include
<
stdio
.
h
>
#
include
<
sstream
>
namespace
mozilla
{
namespace
detail
{
template
<
typename
T
typename
=
decltype
(
std
:
:
declval
<
std
:
:
ostream
&
>
(
)
<
<
*
std
:
:
declval
<
T
>
(
)
)
>
std
:
:
true_type
supports_os_deref_test
(
const
T
&
)
;
std
:
:
false_type
supports_os_deref_test
(
.
.
.
)
;
template
<
typename
T
>
using
supports_os_deref
=
decltype
(
supports_os_deref_test
(
std
:
:
declval
<
T
>
(
)
)
)
;
}
template
<
typename
T
>
auto
DebugValue
(
std
:
:
ostream
&
aOut
T
&
&
aValue
)
-
>
std
:
:
enable_if_t
<
std
:
:
is_pointer
<
typename
std
:
:
remove_reference
<
T
>
:
:
type
>
:
:
value
&
&
mozilla
:
:
detail
:
:
supports_os_deref
<
T
>
:
:
value
std
:
:
ostream
&
>
{
if
(
aValue
)
{
aOut
<
<
*
aValue
<
<
"
"
<
<
aValue
;
}
else
{
aOut
<
<
"
null
"
;
}
return
aOut
;
}
template
<
typename
T
>
auto
DebugValue
(
std
:
:
ostream
&
aOut
T
&
&
aValue
)
-
>
std
:
:
enable_if_t
<
!
(
std
:
:
is_pointer
<
typename
std
:
:
remove_reference
<
T
>
:
:
type
>
:
:
value
&
&
mozilla
:
:
detail
:
:
supports_os_deref
<
T
>
:
:
value
)
std
:
:
ostream
&
>
{
return
aOut
<
<
aValue
;
}
namespace
detail
{
template
<
typename
T
>
auto
&
&
MozDbg
(
const
char
*
aFile
int
aLine
const
char
*
aExpression
T
&
&
aValue
)
{
std
:
:
ostringstream
s
;
s
<
<
'
[
'
<
<
aFile
<
<
'
:
'
<
<
aLine
<
<
"
]
"
<
<
aExpression
<
<
"
=
"
;
mozilla
:
:
DebugValue
(
s
std
:
:
forward
<
T
>
(
aValue
)
)
;
s
<
<
'
\
n
'
;
fputs
(
s
.
str
(
)
.
c_str
(
)
stderr
)
;
return
std
:
:
forward
<
T
>
(
aValue
)
;
}
}
}
#
ifndef
MOZILLA_OFFICIAL
#
define
MOZ_DBG
(
expression_
.
.
.
)
\
mozilla
:
:
detail
:
:
MozDbg
(
__FILE__
__LINE__
#
expression_
expression_
)
#
endif
#
define
MOZ_DBG_FIELD
(
name_
)
<
<
#
name_
<
<
"
=
"
<
<
aValue
.
name_
#
define
MOZ_DEFINE_DBG
(
type_
members_
.
.
.
)
\
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aOut
const
type_
&
aValue
)
{
\
return
aOut
<
<
#
type_
\
<
<
(
MOZ_ARG_COUNT
(
members_
)
=
=
0
?
"
{
"
:
"
"
)
\
MOZ_FOR_EACH_SEPARATED
(
MOZ_DBG_FIELD
(
<
<
"
"
)
(
)
\
(
members_
)
)
\
<
<
(
MOZ_ARG_COUNT
(
members_
)
=
=
0
?
"
}
"
:
"
"
)
;
\
}
#
endif
