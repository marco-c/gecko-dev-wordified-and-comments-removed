#
ifndef
mozilla_Poison_h
#
define
mozilla_Poison_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
<
stdint
.
h
>
MOZ_BEGIN_EXTERN_C
extern
MFBT_DATA
uintptr_t
gMozillaPoisonValue
;
inline
uintptr_t
mozPoisonValue
(
)
{
return
gMozillaPoisonValue
;
}
inline
void
mozWritePoison
(
void
*
aPtr
size_t
aSize
)
{
const
uintptr_t
POISON
=
mozPoisonValue
(
)
;
char
*
p
=
(
char
*
)
aPtr
;
char
*
limit
=
p
+
aSize
;
MOZ_ASSERT
(
(
uintptr_t
)
aPtr
%
sizeof
(
uintptr_t
)
=
=
0
"
bad
alignment
"
)
;
MOZ_ASSERT
(
aSize
>
=
sizeof
(
uintptr_t
)
"
poisoning
this
object
has
no
effect
"
)
;
for
(
;
p
<
limit
;
p
+
=
sizeof
(
uintptr_t
)
)
{
*
(
(
uintptr_t
*
)
p
)
=
POISON
;
}
}
extern
MFBT_API
void
mozPoisonValueInit
(
)
;
extern
MFBT_DATA
uintptr_t
gMozillaPoisonBase
;
extern
MFBT_DATA
uintptr_t
gMozillaPoisonSize
;
MOZ_END_EXTERN_C
#
if
defined
(
__cplusplus
)
namespace
mozilla
{
class
CorruptionCanary
{
public
:
CorruptionCanary
(
)
{
mValue
=
kCanarySet
;
}
~
CorruptionCanary
(
)
{
Check
(
)
;
mValue
=
mozPoisonValue
(
)
;
}
void
Check
(
)
const
{
if
(
mValue
!
=
kCanarySet
)
{
MOZ_CRASH
(
"
Canary
check
failed
check
lifetime
"
)
;
}
}
private
:
static
const
uintptr_t
kCanarySet
=
0x0f0b0f0b
;
uintptr_t
mValue
;
}
;
}
#
endif
#
endif
