#
ifndef
mozilla_RangedArray_h
#
define
mozilla_RangedArray_h
#
include
"
mozilla
/
Array
.
h
"
namespace
mozilla
{
template
<
typename
T
size_t
MinIndex
size_t
Length
>
class
RangedArray
{
private
:
typedef
Array
<
T
Length
>
ArrayType
;
ArrayType
mArr
;
public
:
T
&
operator
[
]
(
size_t
aIndex
)
{
MOZ_ASSERT
(
aIndex
=
=
MinIndex
|
|
aIndex
>
MinIndex
)
;
return
mArr
[
aIndex
-
MinIndex
]
;
}
const
T
&
operator
[
]
(
size_t
aIndex
)
const
{
MOZ_ASSERT
(
aIndex
=
=
MinIndex
|
|
aIndex
>
MinIndex
)
;
return
mArr
[
aIndex
-
MinIndex
]
;
}
typedef
typename
ArrayType
:
:
iterator
iterator
;
typedef
typename
ArrayType
:
:
const_iterator
const_iterator
;
typedef
typename
ArrayType
:
:
reverse_iterator
reverse_iterator
;
typedef
typename
ArrayType
:
:
const_reverse_iterator
const_reverse_iterator
;
iterator
begin
(
)
{
return
mArr
.
begin
(
)
;
}
const_iterator
begin
(
)
const
{
return
mArr
.
begin
(
)
;
}
const_iterator
cbegin
(
)
const
{
return
mArr
.
cbegin
(
)
;
}
iterator
end
(
)
{
return
mArr
.
end
(
)
;
}
const_iterator
end
(
)
const
{
return
mArr
.
end
(
)
;
}
const_iterator
cend
(
)
const
{
return
mArr
.
cend
(
)
;
}
reverse_iterator
rbegin
(
)
{
return
mArr
.
rbegin
(
)
;
}
const_reverse_iterator
rbegin
(
)
const
{
return
mArr
.
rbegin
(
)
;
}
const_reverse_iterator
crbegin
(
)
const
{
return
mArr
.
crbegin
(
)
;
}
reverse_iterator
rend
(
)
{
return
mArr
.
rend
(
)
;
}
const_reverse_iterator
rend
(
)
const
{
return
mArr
.
rend
(
)
;
}
const_reverse_iterator
crend
(
)
const
{
return
mArr
.
crend
(
)
;
}
}
;
}
#
endif
