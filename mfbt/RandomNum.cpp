#
include
"
mozilla
/
RandomNum
.
h
"
#
include
<
fcntl
.
h
>
#
ifdef
XP_UNIX
#
include
<
unistd
.
h
>
#
endif
#
if
defined
(
XP_WIN
)
#
include
"
minwindef
.
h
"
#
define
RtlGenRandom
SystemFunction036
extern
"
C
"
BOOLEAN
NTAPI
RtlGenRandom
(
PVOID
RandomBuffer
ULONG
RandomBufferLength
)
;
#
endif
#
if
defined
(
ANDROID
)
|
|
defined
(
XP_DARWIN
)
|
|
defined
(
__DragonFly__
)
|
|
\
defined
(
__FreeBSD__
)
|
|
defined
(
__NetBSD__
)
|
|
defined
(
__OpenBSD__
)
#
include
<
stdlib
.
h
>
#
define
USE_ARC4RANDOM
#
endif
#
if
defined
(
__linux__
)
#
include
<
linux
/
random
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
if
defined
(
__x86_64__
)
#
define
GETRANDOM_NR
318
#
elif
defined
(
__i386__
)
#
define
GETRANDOM_NR
355
#
elif
defined
(
__aarch64__
)
#
define
GETRANDOM_NR
278
#
elif
defined
(
__arm__
)
#
define
GETRANDOM_NR
384
#
elif
defined
(
__powerpc__
)
#
define
GETRANDOM_NR
359
#
elif
defined
(
__s390__
)
#
define
GETRANDOM_NR
349
#
elif
defined
(
__mips__
)
#
include
<
sgidefs
.
h
>
#
if
_MIPS_SIM
=
=
_MIPS_SIM_ABI32
#
define
GETRANDOM_NR
4353
#
elif
_MIPS_SIM
=
=
_MIPS_SIM_ABI64
#
define
GETRANDOM_NR
5313
#
elif
_MIPS_SIM
=
=
_MIPS_SIM_NABI32
#
define
GETRANDOM_NR
6317
#
endif
#
endif
#
if
defined
(
SYS_getrandom
)
#
if
defined
(
GETRANDOM_NR
)
static_assert
(
GETRANDOM_NR
=
=
SYS_getrandom
"
GETRANDOM_NR
should
match
the
actual
SYS_getrandom
value
"
)
;
#
endif
#
else
#
define
SYS_getrandom
GETRANDOM_NR
#
endif
#
if
defined
(
GRND_NONBLOCK
)
static_assert
(
GRND_NONBLOCK
=
=
1
"
If
GRND_NONBLOCK
is
not
1
the
#
define
below
is
wrong
"
)
;
#
else
#
define
GRND_NONBLOCK
1
#
endif
#
endif
namespace
mozilla
{
MFBT_API
Maybe
<
uint64_t
>
RandomUint64
(
)
{
#
if
defined
(
XP_WIN
)
uint64_t
result
=
0
;
if
(
!
RtlGenRandom
(
&
result
sizeof
(
result
)
)
)
{
return
Nothing
(
)
;
}
return
Some
(
result
)
;
#
elif
defined
(
USE_ARC4RANDOM
)
return
Some
(
(
static_cast
<
uint64_t
>
(
arc4random
(
)
)
<
<
32
)
|
arc4random
(
)
)
;
#
elif
defined
(
XP_UNIX
)
uint64_t
result
=
0
;
#
if
defined
(
__linux__
)
long
bytesGenerated
=
syscall
(
SYS_getrandom
&
result
sizeof
(
result
)
GRND_NONBLOCK
)
;
if
(
(
bytesGenerated
>
0
)
&
&
(
static_cast
<
unsigned
long
>
(
bytesGenerated
)
=
=
sizeof
(
result
)
)
)
{
return
Some
(
result
)
;
}
#
endif
int
fd
=
open
(
"
/
dev
/
urandom
"
O_RDONLY
)
;
if
(
fd
<
0
)
{
return
Nothing
(
)
;
}
ssize_t
bytesRead
=
read
(
fd
&
result
sizeof
(
result
)
)
;
close
(
fd
)
;
if
(
bytesRead
<
0
)
{
return
Nothing
(
)
;
}
if
(
static_cast
<
size_t
>
(
bytesRead
)
!
=
sizeof
(
result
)
)
{
return
Nothing
(
)
;
}
return
Some
(
result
)
;
#
else
#
error
"
Platform
needs
to
implement
RandomUint64
(
)
"
#
endif
}
MFBT_API
uint64_t
RandomUint64OrDie
(
)
{
Maybe
<
uint64_t
>
maybeRandomNum
=
RandomUint64
(
)
;
MOZ_RELEASE_ASSERT
(
maybeRandomNum
.
isSome
(
)
)
;
return
maybeRandomNum
.
value
(
)
;
}
}
