#
ifndef
mozilla_WrappingOperations_h
#
define
mozilla_WrappingOperations_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
<
limits
.
h
>
namespace
mozilla
{
namespace
detail
{
template
<
typename
UnsignedType
>
struct
WrapToSignedHelper
{
static_assert
(
mozilla
:
:
IsUnsigned
<
UnsignedType
>
:
:
value
"
WrapToSigned
must
be
passed
an
unsigned
type
"
)
;
using
SignedType
=
typename
mozilla
:
:
MakeSigned
<
UnsignedType
>
:
:
Type
;
static
constexpr
SignedType
MaxValue
=
(
UnsignedType
(
1
)
<
<
(
CHAR_BIT
*
sizeof
(
SignedType
)
-
1
)
)
-
1
;
static
constexpr
SignedType
MinValue
=
-
MaxValue
-
1
;
static
constexpr
UnsignedType
MinValueUnsigned
=
static_cast
<
UnsignedType
>
(
MinValue
)
;
static
constexpr
UnsignedType
MaxValueUnsigned
=
static_cast
<
UnsignedType
>
(
MaxValue
)
;
MOZ_NO_SANITIZE_UNSIGNED_OVERFLOW
MOZ_NO_SANITIZE_SIGNED_OVERFLOW
static
constexpr
SignedType
compute
(
UnsignedType
aValue
)
{
return
(
aValue
<
=
MaxValueUnsigned
)
?
static_cast
<
SignedType
>
(
aValue
)
:
static_cast
<
SignedType
>
(
aValue
-
MinValueUnsigned
)
+
MinValue
;
}
}
;
}
template
<
typename
UnsignedType
>
inline
constexpr
typename
detail
:
:
WrapToSignedHelper
<
UnsignedType
>
:
:
SignedType
WrapToSigned
(
UnsignedType
aValue
)
{
return
detail
:
:
WrapToSignedHelper
<
UnsignedType
>
:
:
compute
(
aValue
)
;
}
}
#
endif
