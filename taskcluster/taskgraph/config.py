from
__future__
import
absolute_import
print_function
unicode_literals
import
os
import
logging
import
attr
from
mozpack
import
path
from
.
util
.
schema
import
validate_schema
Schema
optionally_keyed_by
from
voluptuous
import
Required
Optional
Any
from
.
util
.
yaml
import
load_yaml
logger
=
logging
.
getLogger
(
__name__
)
graph_config_schema
=
Schema
(
{
    
Required
(
'
trust
-
domain
'
)
:
basestring
    
Required
(
'
project
-
repo
-
param
-
prefix
'
)
:
basestring
    
Required
(
'
product
-
dir
'
)
:
basestring
    
Required
(
'
treeherder
'
)
:
{
        
Required
(
'
group
-
names
'
)
:
{
basestring
:
basestring
}
    
}
    
Required
(
'
index
'
)
:
{
        
Required
(
'
products
'
)
:
[
basestring
]
    
}
    
Required
(
'
try
'
)
:
{
        
Required
(
'
ridealong
-
builds
'
)
:
{
basestring
:
[
basestring
]
}
    
}
    
Required
(
'
release
-
promotion
'
)
:
{
        
Required
(
'
products
'
)
:
[
basestring
]
        
Required
(
'
flavors
'
)
:
{
basestring
:
{
            
Required
(
'
product
'
)
:
basestring
            
Required
(
'
target
-
tasks
-
method
'
)
:
basestring
            
Optional
(
'
is
-
rc
'
)
:
bool
            
Optional
(
'
rebuild
-
kinds
'
)
:
[
basestring
]
            
Optional
(
'
version
-
bump
'
)
:
bool
            
Optional
(
'
partial
-
updates
'
)
:
bool
        
}
}
    
}
    
Required
(
'
scriptworker
'
)
:
{
        
Required
(
'
scope
-
prefix
'
)
:
basestring
        
Required
(
'
worker
-
types
'
)
:
{
basestring
:
[
basestring
]
}
    
}
    
Required
(
'
partner
-
urls
'
)
:
{
        
Required
(
'
release
-
partner
-
repack
'
)
:
            
optionally_keyed_by
(
'
release
-
product
'
'
release
-
level
'
'
release
-
type
'
                                
Any
(
basestring
None
)
)
        
Required
(
'
release
-
eme
-
free
-
repack
'
)
:
            
optionally_keyed_by
(
'
release
-
product
'
'
release
-
level
'
'
release
-
type
'
                                
Any
(
basestring
None
)
)
    
}
}
)
attr
.
s
(
frozen
=
True
)
class
GraphConfig
(
object
)
:
    
_config
=
attr
.
ib
(
)
    
root_dir
=
attr
.
ib
(
)
    
def
__getitem__
(
self
name
)
:
        
return
self
.
_config
[
name
]
    
property
    
def
taskcluster_yml
(
self
)
:
        
if
path
.
split
(
self
.
root_dir
)
[
-
2
:
]
!
=
[
'
taskcluster
'
'
ci
'
]
:
            
raise
Exception
(
                
"
Not
guessing
path
to
.
taskcluster
.
yml
.
"
                
"
Graph
config
in
non
-
standard
location
.
"
            
)
        
return
os
.
path
.
join
(
            
os
.
path
.
dirname
(
os
.
path
.
dirname
(
self
.
root_dir
)
)
            
"
.
taskcluster
.
yml
"
        
)
def
validate_graph_config
(
config
)
:
    
validate_schema
(
graph_config_schema
config
"
Invalid
graph
configuration
:
"
)
def
load_graph_config
(
root_dir
)
:
    
config_yml
=
os
.
path
.
join
(
root_dir
"
config
.
yml
"
)
    
if
not
os
.
path
.
exists
(
config_yml
)
:
        
raise
Exception
(
"
Couldn
'
t
find
taskgraph
configuration
:
{
}
"
.
format
(
config_yml
)
)
    
logger
.
debug
(
"
loading
config
from
{
}
"
.
format
(
config_yml
)
)
    
config
=
load_yaml
(
config_yml
)
    
validate_graph_config
(
config
)
    
return
GraphConfig
(
config
=
config
root_dir
=
root_dir
)
