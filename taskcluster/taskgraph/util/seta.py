import
json
import
logging
import
requests
from
redo
import
retry
from
requests
import
exceptions
logger
=
logging
.
getLogger
(
__name__
)
headers
=
{
    
'
User
-
Agent
'
:
'
TaskCluster
'
}
SETA_PROJECTS
=
[
'
mozilla
-
inbound
'
'
autoland
'
]
PROJECT_SCHEDULE_ALL_EVERY
=
{
'
mozilla
-
inbound
'
:
5
'
autoland
'
:
5
}
SETA_ENDPOINT
=
"
https
:
/
/
seta
.
herokuapp
.
com
/
data
/
setadetails
/
?
branch
=
%
s
"
class
SETA
(
object
)
:
    
"
"
"
    
Interface
to
the
SETA
service
which
defines
low
-
value
tasks
that
can
be
optimized
out
    
of
the
taskgraph
.
    
"
"
"
    
def
__init__
(
self
)
:
        
self
.
low_value_tasks
=
{
}
    
def
query_low_value_tasks
(
self
project
)
:
        
if
project
not
in
SETA_PROJECTS
:
            
logger
.
debug
(
"
SETA
is
not
enabled
for
project
{
}
"
.
format
(
project
)
)
            
return
[
]
        
logger
.
debug
(
"
Querying
SETA
service
for
low
-
value
tasks
on
{
}
"
.
format
(
project
)
)
        
low_value_tasks
=
[
]
        
url
=
SETA_ENDPOINT
%
project
        
try
:
            
logger
.
debug
(
"
Retrieving
low
-
value
jobs
list
from
SETA
"
)
            
response
=
retry
(
requests
.
get
attempts
=
2
sleeptime
=
10
                             
args
=
(
url
)
                             
kwargs
=
{
'
timeout
'
:
5
'
headers
'
:
headers
}
)
            
task_list
=
json
.
loads
(
response
.
content
)
.
get
(
'
jobtypes
'
'
'
)
            
if
len
(
task_list
)
>
0
:
                
low_value_tasks
=
task_list
.
values
(
)
[
0
]
            
low_value_tasks
=
[
x
for
x
in
low_value_tasks
if
x
.
find
(
'
debug
'
)
=
=
-
1
]
            
low_value_tasks
=
[
x
for
x
in
low_value_tasks
if
x
.
find
(
'
asan
'
)
=
=
-
1
]
        
except
exceptions
.
Timeout
:
            
logger
.
warning
(
"
SETA
server
is
timeout
we
will
treat
all
test
tasks
as
high
value
.
"
)
        
except
exceptions
.
ConnectionError
:
            
logger
.
warning
(
"
SETA
server
is
timeout
we
will
treat
all
test
tasks
as
high
value
.
"
)
        
except
exceptions
.
HTTPError
:
            
logger
.
warning
(
"
We
got
bad
Http
response
from
ouija
"
                           
"
we
will
treat
all
test
tasks
as
high
value
.
"
)
        
except
exceptions
.
RequestException
as
error
:
            
logger
.
warning
(
error
)
        
except
ValueError
as
error
:
            
logger
.
warning
(
"
Invalid
JSON
possible
server
error
:
{
}
"
.
format
(
error
)
)
        
return
low_value_tasks
    
def
is_low_value_task
(
self
label
project
pushlog_id
)
:
        
schedule_all_every
=
PROJECT_SCHEDULE_ALL_EVERY
.
get
(
project
5
)
        
if
int
(
pushlog_id
)
%
schedule_all_every
=
=
0
:
            
return
False
        
if
project
not
in
self
.
low_value_tasks
:
            
self
.
low_value_tasks
[
project
]
=
self
.
query_low_value_tasks
(
project
)
        
return
label
in
self
.
low_value_tasks
[
project
]
is_low_value_task
=
SETA
(
)
.
is_low_value_task
