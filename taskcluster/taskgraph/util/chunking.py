from
__future__
import
absolute_import
print_function
unicode_literals
"
"
"
Utility
functions
to
handle
test
chunking
.
"
"
"
import
os
import
json
from
abc
import
ABCMeta
abstractmethod
from
collections
import
defaultdict
OrderedDict
import
six
from
manifestparser
import
TestManifest
from
manifestparser
.
filters
import
chunk_by_runtime
from
mozbuild
.
util
import
memoize
from
moztest
.
resolve
import
(
    
TEST_SUITES
    
TestResolver
    
TestManifestLoader
)
from
taskgraph
import
GECKO
here
=
os
.
path
.
abspath
(
os
.
path
.
dirname
(
__file__
)
)
resolver
=
TestResolver
.
from_environment
(
cwd
=
here
loader_cls
=
TestManifestLoader
)
def
guess_mozinfo_from_task
(
task
)
:
    
"
"
"
Attempt
to
build
a
mozinfo
dict
from
a
task
definition
.
    
This
won
'
t
be
perfect
and
many
values
used
in
the
manifests
will
be
missing
.
But
    
it
should
cover
most
of
the
major
ones
and
be
"
good
enough
"
for
chunking
in
the
    
taskgraph
.
    
Args
:
        
task
(
dict
)
:
A
task
definition
.
    
Returns
:
        
A
dict
that
can
be
used
as
a
mozinfo
replacement
.
    
"
"
"
    
info
=
{
        
'
asan
'
:
'
asan
'
in
task
[
'
build
-
attributes
'
]
[
'
build_platform
'
]
        
'
ccov
'
:
'
ccov
'
in
task
[
'
build
-
attributes
'
]
[
'
build_platform
'
]
        
'
debug
'
:
task
[
'
build
-
attributes
'
]
[
'
build_type
'
]
=
=
'
debug
'
        
'
e10s
'
:
task
[
'
attributes
'
]
[
'
e10s
'
]
        
'
tsan
'
:
'
tsan
'
in
task
[
'
build
-
attributes
'
]
[
'
build_platform
'
]
        
'
webrender
'
:
task
.
get
(
'
webrender
'
False
)
    
}
    
for
platform
in
(
'
android
'
'
linux
'
'
mac
'
'
win
'
)
:
        
if
platform
in
task
[
'
build
-
attributes
'
]
[
'
build_platform
'
]
:
            
info
[
'
os
'
]
=
platform
            
break
    
else
:
        
raise
ValueError
(
"
{
}
is
not
a
known
platform
!
"
.
format
(
                         
task
[
'
build
-
attributes
'
]
[
'
build_platform
'
]
)
)
    
return
info
memoize
def
get_runtimes
(
platform
suite_name
)
:
    
if
not
suite_name
:
        
raise
TypeError
(
'
suite_name
should
be
a
value
.
'
)
    
base
=
os
.
path
.
join
(
GECKO
'
testing
'
'
runtimes
'
'
manifest
-
runtimes
-
{
}
.
json
'
)
    
for
key
in
(
'
android
'
'
windows
'
)
:
        
if
key
in
platform
:
            
path
=
base
.
format
(
key
)
            
break
    
else
:
        
path
=
base
.
format
(
'
unix
'
)
    
with
open
(
path
'
r
'
)
as
fh
:
        
return
json
.
load
(
fh
)
.
get
(
suite_name
)
wpt_group_translation
=
defaultdict
(
set
)
def
chunk_manifests
(
suite
platform
chunks
manifests
)
:
    
"
"
"
Run
the
chunking
algorithm
.
    
Args
:
        
platform
(
str
)
:
Platform
used
to
find
runtime
info
.
        
chunks
(
int
)
:
Number
of
chunks
to
split
manifests
into
.
        
manifests
(
list
)
:
Manifests
to
chunk
.
    
Returns
:
        
A
list
of
length
chunks
where
each
item
contains
a
list
of
manifests
        
that
run
in
that
chunk
.
    
"
"
"
    
runtimes
=
get_runtimes
(
platform
suite
)
    
if
"
web
-
platform
-
tests
"
not
in
suite
:
        
return
[
            
c
[
1
]
for
c
in
chunk_by_runtime
(
                
None
                
chunks
                
runtimes
            
)
.
get_chunked_manifests
(
manifests
)
        
]
    
paths
=
{
k
:
v
for
k
v
in
wpt_group_translation
.
items
(
)
if
k
in
manifests
}
    
runtimes
=
OrderedDict
(
sorted
(
runtimes
.
items
(
)
key
=
lambda
x
:
x
[
1
]
reverse
=
True
)
)
    
chunked_manifests
=
[
[
[
]
0
]
for
_
in
range
(
chunks
)
]
    
for
key
rt
in
runtimes
.
items
(
)
:
        
chunked_manifests
.
sort
(
key
=
lambda
x
:
(
x
[
1
]
len
(
x
[
0
]
)
)
)
        
test_paths
=
paths
[
key
]
        
if
test_paths
:
            
chunked_manifests
[
0
]
[
0
]
.
extend
(
test_paths
)
            
chunked_manifests
[
0
]
[
1
]
+
=
rt
            
paths
.
pop
(
key
)
            
runtimes
.
pop
(
key
)
    
chunked_manifests
.
sort
(
key
=
lambda
x
:
(
x
[
1
]
len
(
x
[
0
]
)
)
)
    
for
index
key
in
enumerate
(
paths
.
keys
(
)
)
:
        
chunked_manifests
[
index
%
chunks
]
[
0
]
.
append
(
key
)
    
chunked_manifests
.
sort
(
key
=
lambda
x
:
(
x
[
1
]
len
(
x
[
0
]
)
)
)
    
return
[
c
[
0
]
for
c
in
chunked_manifests
]
six
.
add_metaclass
(
ABCMeta
)
class
BaseManifestLoader
(
object
)
:
    
abstractmethod
    
def
get_manifests
(
self
flavor
subsuite
mozinfo
)
:
        
"
"
"
Compute
which
manifests
should
run
for
the
given
flavor
subsuite
and
mozinfo
.
        
This
function
returns
skipped
manifests
separately
so
that
more
balanced
        
chunks
can
be
achieved
by
only
considering
"
active
"
manifests
in
the
        
chunking
algorithm
.
        
Args
:
            
flavor
(
str
)
:
The
suite
to
run
.
Values
are
defined
by
the
'
build_flavor
'
key
                
in
moztest
.
resolve
.
TEST_SUITES
.
            
subsuite
(
str
)
:
The
subsuite
to
run
or
'
undefined
'
to
denote
no
subsuite
.
            
mozinfo
(
frozenset
)
:
Set
of
data
in
the
form
of
(
<
key
>
<
value
>
)
used
                                 
for
filtering
.
        
Returns
:
            
A
tuple
of
two
manifest
lists
.
The
first
is
the
set
of
active
manifests
(
will
            
run
at
least
one
test
.
The
second
is
a
list
of
skipped
manifests
(
all
tests
are
            
skipped
)
.
        
"
"
"
        
pass
class
DefaultLoader
(
BaseManifestLoader
)
:
    
"
"
"
Load
manifests
using
metadata
from
the
TestResolver
.
"
"
"
    
classmethod
    
def
get_wpt_group
(
cls
test
)
:
        
"
"
"
Get
the
group
for
a
web
-
platform
-
test
that
matches
those
created
by
the
        
WPT
harness
.
        
Args
:
            
test
(
dict
)
:
The
test
object
to
compute
the
group
for
.
        
Returns
:
            
str
:
Label
representing
the
group
name
.
        
"
"
"
        
depth
=
3
        
path
=
os
.
path
.
dirname
(
test
[
'
name
'
]
)
        
while
path
.
count
(
'
/
'
)
>
=
depth
+
1
:
            
path
=
os
.
path
.
dirname
(
path
)
        
return
path
    
memoize
    
def
get_tests
(
self
suite
)
:
        
suite_definition
=
TEST_SUITES
[
suite
]
        
return
list
(
resolver
.
resolve_tests
(
            
flavor
=
suite_definition
[
'
build_flavor
'
]
            
subsuite
=
suite_definition
.
get
(
'
kwargs
'
{
}
)
.
get
(
'
subsuite
'
'
undefined
'
)
        
)
)
    
memoize
    
def
get_manifests
(
self
suite
mozinfo
)
:
        
mozinfo
=
dict
(
mozinfo
)
        
tests
=
self
.
get_tests
(
suite
)
        
if
"
web
-
platform
-
tests
"
in
suite
:
            
manifests
=
set
(
)
            
for
t
in
tests
:
                
group
=
self
.
get_wpt_group
(
t
)
                
wpt_group_translation
[
t
[
'
manifest
'
]
]
.
add
(
group
)
                
manifests
.
add
(
t
[
'
manifest
'
]
)
            
return
{
"
active
"
:
list
(
manifests
)
"
skipped
"
:
[
]
}
        
manifests
=
set
(
chunk_by_runtime
.
get_manifest
(
t
)
for
t
in
tests
)
        
m
=
TestManifest
(
)
        
m
.
tests
=
tests
        
tests
=
m
.
active_tests
(
disabled
=
False
exists
=
False
*
*
mozinfo
)
        
active
=
set
(
chunk_by_runtime
.
get_manifest
(
t
)
for
t
in
tests
)
        
skipped
=
manifests
-
active
        
return
{
"
active
"
:
list
(
active
)
"
skipped
"
:
list
(
skipped
)
}
manifest_loaders
=
{
    
'
default
'
:
DefaultLoader
(
)
}
