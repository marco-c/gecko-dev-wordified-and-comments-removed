"
"
"
These
transformations
take
a
task
description
and
turn
it
into
a
TaskCluster
task
definition
(
along
with
attributes
label
etc
.
)
.
The
input
to
these
transformations
is
generic
to
any
kind
of
task
but
abstracts
away
some
of
the
complexities
of
worker
implementations
scopes
and
treeherder
annotations
.
"
"
"
from
__future__
import
absolute_import
print_function
unicode_literals
from
taskgraph
.
util
.
treeherder
import
split_symbol
from
taskgraph
.
transforms
.
base
import
(
    
validate_schema
    
TransformSequence
)
from
voluptuous
import
Schema
Any
Required
Optional
Extra
taskref_or_string
=
Any
(
    
basestring
    
{
Required
(
'
task
-
reference
'
)
:
basestring
}
)
task_description_schema
=
Schema
(
{
    
Required
(
'
label
'
)
:
basestring
    
Required
(
'
description
'
)
:
basestring
    
Optional
(
'
attributes
'
)
:
{
basestring
:
object
}
    
Optional
(
'
dependencies
'
)
:
{
basestring
:
object
}
    
Optional
(
'
expires
-
after
'
)
:
basestring
    
Optional
(
'
deadline
-
after
'
)
:
basestring
    
Optional
(
'
routes
'
)
:
[
basestring
]
    
Optional
(
'
scopes
'
)
:
[
basestring
]
    
Optional
(
'
extra
'
)
:
{
basestring
:
object
}
    
Optional
(
'
treeherder
'
)
:
{
        
'
symbol
'
:
basestring
        
'
kind
'
:
Any
(
'
build
'
'
test
'
'
other
'
)
        
'
tier
'
:
int
        
'
platform
'
:
basestring
        
Required
(
'
environments
'
default
=
[
'
production
'
'
staging
'
]
)
:
[
'
production
'
'
staging
'
]
    
}
    
'
worker
-
type
'
:
basestring
    
'
worker
'
:
Any
(
{
        
Required
(
'
implementation
'
)
:
Any
(
'
docker
-
worker
'
'
docker
-
engine
'
)
        
Optional
(
'
docker
-
image
'
)
:
basestring
        
Required
(
'
relengapi
-
proxy
'
default
=
False
)
:
bool
        
Required
(
'
taskcluster
-
proxy
'
default
=
False
)
:
bool
        
Required
(
'
allow
-
ptrace
'
default
=
False
)
:
bool
        
Required
(
'
loopback
-
video
'
default
=
False
)
:
bool
        
Required
(
'
loopback
-
audio
'
default
=
False
)
:
bool
        
Optional
(
'
superseder
-
url
'
)
:
basestring
        
Optional
(
'
caches
'
)
:
[
{
            
'
type
'
:
'
persistent
'
            
'
name
'
:
basestring
            
'
mount
-
point
'
:
basestring
        
}
]
        
Optional
(
'
artifacts
'
)
:
[
{
            
'
type
'
:
Any
(
'
file
'
'
directory
'
)
            
'
path
'
:
basestring
            
'
name
'
:
basestring
        
}
]
        
Required
(
'
env
'
default
=
{
}
)
:
{
basestring
:
taskref_or_string
}
        
'
command
'
:
[
taskref_or_string
]
        
'
max
-
run
-
time
'
:
int
    
}
{
        
Required
(
'
implementation
'
)
:
'
generic
-
worker
'
        
'
command
'
:
[
basestring
]
        
Optional
(
'
artifacts
'
)
:
[
{
            
'
type
'
:
Any
(
'
file
'
'
directory
'
)
            
'
path
'
:
basestring
        
}
]
        
Required
(
'
env
'
default
=
{
}
)
:
{
basestring
:
taskref_or_string
}
        
'
max
-
run
-
time
'
:
int
    
}
{
        
Required
(
'
implementation
'
)
:
'
buildbot
-
bridge
'
        
'
buildername
'
:
basestring
        
'
sourcestamp
'
:
{
            
'
branch
'
:
basestring
            
Optional
(
'
revision
'
)
:
basestring
            
Optional
(
'
repository
'
)
:
basestring
            
Optional
(
'
project
'
)
:
basestring
        
}
        
'
properties
'
:
{
            
'
product
'
:
basestring
            
Extra
:
basestring
        
}
    
}
)
}
)
GROUP_NAMES
=
{
    
'
tc
'
:
'
Executed
by
TaskCluster
'
    
'
tc
-
e10s
'
:
'
Executed
by
TaskCluster
with
e10s
'
    
'
tc
-
Fxfn
-
l
'
:
'
Firefox
functional
tests
(
local
)
executed
by
TaskCluster
'
    
'
tc
-
Fxfn
-
l
-
e10s
'
:
'
Firefox
functional
tests
(
local
)
executed
by
TaskCluster
with
e10s
'
    
'
tc
-
Fxfn
-
r
'
:
'
Firefox
functional
tests
(
remote
)
executed
by
TaskCluster
'
    
'
tc
-
Fxfn
-
r
-
e10s
'
:
'
Firefox
functional
tests
(
remote
)
executed
by
TaskCluster
with
e10s
'
    
'
tc
-
M
'
:
'
Mochitests
executed
by
TaskCluster
'
    
'
tc
-
M
-
e10s
'
:
'
Mochitests
executed
by
TaskCluster
with
e10s
'
    
'
tc
-
R
'
:
'
Reftests
executed
by
TaskCluster
'
    
'
tc
-
R
-
e10s
'
:
'
Reftests
executed
by
TaskCluster
with
e10s
'
    
'
tc
-
VP
'
:
'
VideoPuppeteer
tests
executed
by
TaskCluster
'
    
'
tc
-
W
'
:
'
Web
platform
tests
executed
by
TaskCluster
'
    
'
tc
-
W
-
e10s
'
:
'
Web
platform
tests
executed
by
TaskCluster
with
e10s
'
    
'
tc
-
X
'
:
'
Xpcshell
tests
executed
by
TaskCluster
'
    
'
tc
-
X
-
e10s
'
:
'
Xpcshell
tests
executed
by
TaskCluster
with
e10s
'
}
UNKNOWN_GROUP_NAME
=
"
Treeherder
group
{
}
has
no
name
;
add
it
to
"
+
__file__
payload_builders
=
{
}
def
payload_builder
(
name
)
:
    
def
wrap
(
func
)
:
        
payload_builders
[
name
]
=
func
        
return
func
    
return
wrap
payload_builder
(
'
docker
-
worker
'
)
def
build_docker_worker_payload
(
config
task
task_def
)
:
    
worker
=
task
[
'
worker
'
]
    
if
'
docker
-
image
'
in
worker
:
        
image
=
{
            
'
type
'
:
'
docker
-
image
'
            
'
name
'
:
worker
[
'
docker
-
image
'
]
        
}
    
else
:
        
assert
'
docker
-
image
'
in
task
[
'
dependencies
'
]
'
no
docker
-
worker
dependency
'
        
image
=
{
            
"
path
"
:
"
public
/
image
.
tar
"
            
"
taskId
"
:
{
"
task
-
reference
"
:
"
<
docker
-
image
>
"
}
            
"
type
"
:
"
task
-
image
"
        
}
    
features
=
{
}
    
if
worker
.
get
(
'
relengapi
-
proxy
'
)
:
        
features
[
'
relengAPIProxy
'
]
=
True
    
if
worker
.
get
(
'
allow
-
ptrace
'
)
:
        
features
[
'
allowPtrace
'
]
=
True
        
task_def
[
'
scopes
'
]
.
append
(
'
docker
-
worker
:
feature
:
allowPtrace
'
)
    
capabilities
=
{
}
    
for
lo
in
'
audio
'
'
video
'
:
        
if
worker
.
get
(
'
loopback
-
'
+
lo
)
:
            
capitalized
=
'
loopback
'
+
lo
.
capitalize
(
)
            
devices
=
capabilities
.
setdefault
(
'
devices
'
{
}
)
            
devices
[
capitalized
]
=
True
            
task_def
[
'
scopes
'
]
.
append
(
'
docker
-
worker
:
capability
:
device
:
'
+
capitalized
)
    
caches
=
{
}
    
for
cache
in
worker
[
'
caches
'
]
:
        
caches
[
cache
[
'
name
'
]
]
=
cache
[
'
mount
-
point
'
]
        
task_def
[
'
scopes
'
]
.
append
(
'
docker
-
worker
:
cache
:
'
+
cache
[
'
name
'
]
)
    
artifacts
=
{
}
    
for
artifact
in
worker
[
'
artifacts
'
]
:
        
artifacts
[
artifact
[
'
name
'
]
]
=
{
            
'
path
'
:
artifact
[
'
path
'
]
            
'
type
'
:
artifact
[
'
type
'
]
            
'
expires
'
:
task_def
[
'
expires
'
]
        
}
    
task_def
[
'
payload
'
]
=
payload
=
{
        
'
command
'
:
worker
[
'
command
'
]
        
'
cache
'
:
caches
        
'
artifacts
'
:
artifacts
        
'
image
'
:
image
        
'
env
'
:
worker
[
'
env
'
]
        
'
maxRunTime
'
:
worker
[
'
max
-
run
-
time
'
]
    
}
    
if
features
:
        
payload
[
'
features
'
]
=
features
    
if
capabilities
:
        
payload
[
'
capabilities
'
]
=
capabilities
payload_builder
(
'
generic
-
worker
'
)
def
build_generic_worker_payload
(
config
task
task_def
)
:
    
worker
=
task
[
'
worker
'
]
    
artifacts
=
[
]
    
for
artifact
in
worker
[
'
artifacts
'
]
:
        
artifacts
.
append
(
{
            
'
path
'
:
artifact
[
'
path
'
]
            
'
type
'
:
artifact
[
'
type
'
]
            
'
expires
'
:
task_def
[
'
expires
'
]
        
}
)
    
task_def
[
'
payload
'
]
=
{
        
'
command
'
:
worker
[
'
command
'
]
        
'
artifacts
'
:
artifacts
        
'
env
'
:
worker
[
'
env
'
]
        
'
maxRunTime
'
:
worker
[
'
max
-
run
-
time
'
]
    
}
transforms
=
TransformSequence
(
)
transforms
.
add
def
validate
(
config
tasks
)
:
    
for
task
in
tasks
:
        
yield
validate_schema
(
            
task_description_schema
task
            
"
In
task
{
!
r
}
:
"
.
format
(
task
.
get
(
'
label
'
'
?
no
-
label
?
'
)
)
)
transforms
.
add
def
build_task
(
config
tasks
)
:
    
for
task
in
tasks
:
        
provisioner_id
worker_type
=
task
[
'
worker
-
type
'
]
.
split
(
'
/
'
1
)
        
routes
=
task
.
get
(
'
routes
'
[
]
)
        
scopes
=
task
.
get
(
'
scopes
'
[
]
)
        
extra
=
task
.
get
(
'
extra
'
{
}
)
        
task_th
=
task
.
get
(
'
treeherder
'
)
        
if
task_th
:
            
extra
[
'
treeherderEnv
'
]
=
task_th
[
'
environments
'
]
            
treeherder
=
extra
.
setdefault
(
'
treeherder
'
{
}
)
            
machine_platform
collection
=
task_th
[
'
platform
'
]
.
split
(
'
/
'
1
)
            
treeherder
[
'
machine
'
]
=
{
'
platform
'
:
machine_platform
}
            
treeherder
[
'
collection
'
]
=
{
collection
:
True
}
            
groupSymbol
symbol
=
split_symbol
(
task_th
[
'
symbol
'
]
)
            
treeherder
[
'
groupSymbol
'
]
=
groupSymbol
            
if
groupSymbol
not
in
GROUP_NAMES
:
                
raise
Exception
(
UNKNOWN_GROUP_NAME
.
format
(
groupSymbol
)
)
            
treeherder
[
'
groupName
'
]
=
GROUP_NAMES
[
groupSymbol
]
            
treeherder
[
'
symbol
'
]
=
symbol
            
treeherder
[
'
jobKind
'
]
=
task_th
[
'
kind
'
]
            
treeherder
[
'
tier
'
]
=
task_th
[
'
tier
'
]
            
routes
.
extend
(
[
                
'
{
}
.
v2
.
{
}
.
{
}
.
{
}
'
.
format
(
root
                                        
config
.
params
[
'
project
'
]
                                        
config
.
params
[
'
head_rev
'
]
                                        
config
.
params
[
'
pushlog_id
'
]
)
                
for
root
in
'
tc
-
treeherder
'
'
tc
-
treeherder
-
stage
'
            
]
)
        
task_def
=
{
            
'
provisionerId
'
:
provisioner_id
            
'
workerType
'
:
worker_type
            
'
routes
'
:
routes
            
'
created
'
:
{
'
relative
-
datestamp
'
:
'
0
seconds
'
}
            
'
deadline
'
:
{
'
relative
-
datestamp
'
:
task
[
'
deadline
-
after
'
]
}
            
'
expires
'
:
{
'
relative
-
datestamp
'
:
task
[
'
expires
-
after
'
]
}
            
'
scopes
'
:
scopes
            
'
metadata
'
:
{
                
'
description
'
:
task
[
'
description
'
]
                
'
name
'
:
task
[
'
label
'
]
                
'
owner
'
:
config
.
params
[
'
owner
'
]
                
'
source
'
:
'
{
}
/
file
/
{
}
/
{
}
'
.
format
(
                    
config
.
params
[
'
head_repository
'
]
                    
config
.
params
[
'
head_rev
'
]
                    
config
.
path
)
            
}
            
'
extra
'
:
extra
            
'
tags
'
:
{
'
createdForUser
'
:
config
.
params
[
'
owner
'
]
}
        
}
        
payload_builders
[
task
[
'
worker
'
]
[
'
implementation
'
]
]
(
config
task
task_def
)
        
yield
{
            
'
label
'
:
task
[
'
label
'
]
            
'
task
'
:
task_def
            
'
dependencies
'
:
task
[
'
dependencies
'
]
            
'
attributes
'
:
task
[
'
attributes
'
]
        
}
