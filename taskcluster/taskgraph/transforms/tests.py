"
"
"
These
transforms
construct
a
task
description
to
run
the
given
test
based
on
a
test
description
.
The
implementation
here
is
shared
among
all
test
kinds
but
contains
specific
support
for
how
we
run
tests
in
Gecko
(
via
mozharness
invoked
in
particular
ways
)
.
This
is
a
good
place
to
translate
a
test
-
description
option
such
as
single
-
core
:
true
to
the
implementation
of
that
option
in
a
task
description
(
worker
options
mozharness
commandline
environment
variables
etc
.
)
The
test
description
should
be
fully
formed
by
the
time
it
reaches
these
transforms
and
these
transforms
should
not
embody
any
specific
knowledge
about
what
should
run
where
.
this
is
the
wrong
place
for
special
-
casing
platforms
for
example
-
use
all_tests
.
py
instead
.
"
"
"
from
__future__
import
absolute_import
print_function
unicode_literals
from
taskgraph
.
transforms
.
base
import
TransformSequence
from
taskgraph
.
util
.
attributes
import
match_run_on_projects
from
taskgraph
.
util
.
keyed_by
import
evaluate_keyed_by
from
taskgraph
.
util
.
schema
import
resolve_keyed_by
OptimizationSchema
from
taskgraph
.
util
.
templates
import
merge
from
taskgraph
.
util
.
treeherder
import
split_symbol
join_symbol
add_suffix
from
taskgraph
.
util
.
platforms
import
platform_family
from
taskgraph
.
util
.
schema
import
(
    
optionally_keyed_by
    
Schema
)
from
taskgraph
.
util
.
taskcluster
import
(
    
get_artifact_path
    
get_index_url
)
from
mozbuild
.
schedules
import
INCLUSIVE_COMPONENTS
from
taskgraph
.
util
.
perfile
import
perfile_number_of_chunks
from
voluptuous
import
(
    
Any
    
Optional
    
Required
    
Exclusive
)
import
copy
import
logging
LINUX_WORKER_TYPES
=
{
    
'
large
'
:
'
t
-
linux
-
large
'
    
'
xlarge
'
:
'
t
-
linux
-
xlarge
'
    
'
default
'
:
'
t
-
linux
-
large
'
}
WINDOWS_WORKER_TYPES
=
{
    
'
windows7
-
32
'
:
{
      
'
virtual
'
:
'
t
-
win7
-
32
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win7
-
32
-
gpu
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows7
-
32
-
shippable
'
:
{
      
'
virtual
'
:
'
t
-
win7
-
32
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win7
-
32
-
gpu
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows7
-
32
-
devedition
'
:
{
      
'
virtual
'
:
'
t
-
win7
-
32
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win7
-
32
-
gpu
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows7
-
32
-
mingwclang
'
:
{
      
'
virtual
'
:
'
t
-
win7
-
32
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win7
-
32
-
gpu
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
'
:
{
      
'
virtual
'
:
'
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win10
-
64
-
gpu
-
s
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
aarch64
'
:
{
      
'
virtual
'
:
'
t
-
win64
-
aarch64
-
laptop
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win64
-
aarch64
-
laptop
'
      
'
hardware
'
:
'
t
-
win64
-
aarch64
-
laptop
'
    
}
    
'
windows10
-
64
-
ccov
'
:
{
      
'
virtual
'
:
'
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win10
-
64
-
gpu
-
s
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
devedition
'
:
{
      
'
virtual
'
:
'
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win10
-
64
-
gpu
-
s
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
shippable
'
:
{
      
'
virtual
'
:
'
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win10
-
64
-
gpu
-
s
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
asan
'
:
{
      
'
virtual
'
:
'
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win10
-
64
-
gpu
-
s
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
qr
'
:
{
      
'
virtual
'
:
'
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win10
-
64
-
gpu
-
s
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
shippable
-
qr
'
:
{
      
'
virtual
'
:
'
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win10
-
64
-
gpu
-
s
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
mingwclang
'
:
{
      
'
virtual
'
:
'
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win10
-
64
-
gpu
-
s
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
ref
-
hw
-
2017
'
:
{
      
'
virtual
'
:
'
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
t
-
win10
-
64
-
gpu
-
s
'
      
'
hardware
'
:
'
t
-
win10
-
64
-
ref
-
hw
'
    
}
}
MACOSX_WORKER_TYPES
=
{
    
'
macosx1014
-
64
'
:
'
releng
-
hardware
/
gecko
-
t
-
osx
-
1014
'
}
def
runs_on_central
(
test
)
:
    
return
match_run_on_projects
(
'
mozilla
-
central
'
test
[
'
run
-
on
-
projects
'
]
)
def
fission_filter
(
test
)
:
    
return
(
        
runs_on_central
(
test
)
and
        
test
.
get
(
'
e10s
'
)
in
(
True
'
both
'
)
and
        
get_mobile_project
(
test
)
!
=
'
fennec
'
    
)
TEST_VARIANTS
=
{
    
'
fission
'
:
{
        
'
description
'
:
"
{
description
}
with
fission
enabled
"
        
'
filterfn
'
:
fission_filter
        
'
suffix
'
:
'
fis
'
        
'
replace
'
:
{
            
'
e10s
'
:
True
            
'
run
-
on
-
projects
'
:
[
'
ash
'
'
try
'
]
        
}
        
'
merge
'
:
{
            
'
tier
'
:
2
            
'
mozharness
'
:
{
                
'
extra
-
options
'
:
[
'
-
-
setpref
=
"
fission
.
autostart
=
true
"
'
                                  
'
-
-
setpref
=
"
dom
.
serviceWorkers
.
parent_intercept
=
true
"
'
                                  
'
-
-
setpref
=
"
browser
.
tabs
.
documentchannel
=
true
"
'
]
            
}
        
}
    
}
    
'
serviceworker
'
:
{
        
'
description
'
:
"
{
description
}
with
serviceworker
-
e10s
redesign
enabled
"
        
'
filterfn
'
:
runs_on_central
        
'
suffix
'
:
'
sw
'
        
'
replace
'
:
{
            
'
run
-
on
-
projects
'
:
[
'
mozilla
-
central
'
]
        
}
        
'
merge
'
:
{
            
'
tier
'
:
2
            
'
mozharness
'
:
{
                
'
extra
-
options
'
:
[
'
-
-
setpref
=
"
dom
.
serviceWorkers
.
parent_intercept
=
true
"
'
]
            
}
        
}
    
}
    
'
socketprocess
'
:
{
        
'
description
'
:
"
{
description
}
with
socket
process
enabled
"
        
'
suffix
'
:
'
spi
'
        
'
merge
'
:
{
            
'
mozharness
'
:
{
                
'
extra
-
options
'
:
[
                    
'
-
-
setpref
=
media
.
peerconnection
.
mtransport_process
=
true
'
                    
'
-
-
setpref
=
network
.
process
.
enabled
=
true
'
                
]
            
}
        
}
    
}
}
logger
=
logging
.
getLogger
(
__name__
)
transforms
=
TransformSequence
(
)
test_description_schema
=
Schema
(
{
    
'
description
'
:
basestring
    
Optional
(
'
suite
'
)
:
Any
(
        
basestring
        
{
Optional
(
'
category
'
)
:
basestring
Optional
(
'
name
'
)
:
basestring
}
    
)
    
Optional
(
'
workdir
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
basestring
'
default
'
)
)
    
Optional
(
'
try
-
name
'
)
:
basestring
    
Optional
(
'
tags
'
)
:
{
basestring
:
object
}
    
'
treeherder
-
symbol
'
:
basestring
    
Optional
(
'
treeherder
-
machine
-
platform
'
)
:
basestring
    
Optional
(
'
attributes
'
)
:
{
basestring
:
object
}
    
Optional
(
'
job
-
from
'
)
:
basestring
    
Optional
(
'
run
-
on
-
projects
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
[
basestring
]
'
built
-
projects
'
)
)
    
Optional
(
'
tier
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
int
'
default
'
)
)
    
Required
(
'
chunks
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
int
)
    
Optional
(
'
expires
-
after
'
)
:
basestring
    
Optional
(
'
variants
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
'
project
'
        
Any
(
TEST_VARIANTS
.
keys
(
)
)
)
    
Required
(
'
e10s
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
'
project
'
        
Any
(
bool
'
both
'
)
)
    
Optional
(
'
webrender
'
)
:
bool
    
Required
(
'
instance
-
size
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
'
default
'
'
large
'
'
xlarge
'
)
)
    
Required
(
'
virtualization
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
'
virtual
'
'
virtual
-
with
-
gpu
'
'
hardware
'
)
)
    
Required
(
'
loopback
-
audio
'
)
:
bool
    
Required
(
'
loopback
-
video
'
)
:
bool
    
Optional
(
'
allow
-
software
-
gl
-
layers
'
)
:
bool
    
Required
(
'
docker
-
image
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
            
basestring
            
{
'
in
-
tree
'
:
basestring
}
            
{
'
indexed
'
:
basestring
}
        
)
    
)
    
Required
(
'
max
-
run
-
time
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
int
)
    
Optional
(
'
retry
-
exit
-
status
'
)
:
[
int
]
    
Required
(
'
checkout
'
)
:
bool
    
Optional
(
'
reboot
'
)
:
        
Any
(
False
'
always
'
'
on
-
exception
'
'
on
-
failure
'
)
    
Required
(
'
mozharness
'
)
:
{
        
Required
(
'
script
'
)
:
optionally_keyed_by
(
            
'
test
-
platform
'
            
basestring
)
        
Required
(
'
config
'
)
:
optionally_keyed_by
(
            
'
test
-
platform
'
            
[
basestring
]
)
        
Optional
(
'
mochitest
-
flavor
'
)
:
basestring
        
Optional
(
'
actions
'
)
:
[
basestring
]
        
Required
(
'
extra
-
options
'
)
:
optionally_keyed_by
(
            
'
test
-
platform
'
            
[
basestring
]
)
        
Optional
(
'
build
-
artifact
-
name
'
)
:
basestring
        
Optional
(
'
installer
-
url
'
)
:
basestring
        
Required
(
'
tooltool
-
downloads
'
)
:
Any
(
            
False
            
'
public
'
            
'
internal
'
        
)
        
Optional
(
'
include
-
blob
-
upload
-
branch
'
)
:
bool
        
Optional
(
'
download
-
symbols
'
)
:
Any
(
True
'
ondemand
'
)
        
Required
(
'
set
-
moz
-
node
-
path
'
)
:
bool
        
Required
(
'
chunked
'
)
:
optionally_keyed_by
(
            
'
test
-
platform
'
            
bool
)
        
Required
(
'
chunking
-
args
'
)
:
Any
(
            
'
this
-
chunk
'
            
'
test
-
suite
-
suffix
'
        
)
        
Optional
(
'
chunk
-
suffix
'
)
:
basestring
        
Required
(
'
requires
-
signed
-
builds
'
)
:
optionally_keyed_by
(
            
'
test
-
platform
'
            
bool
)
    
}
    
Optional
(
'
this
-
chunk
'
)
:
int
    
Optional
(
'
os
-
groups
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
[
basestring
]
)
    
Optional
(
'
run
-
as
-
administrator
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
bool
)
    
'
build
-
platform
'
:
basestring
    
'
build
-
label
'
:
basestring
    
Optional
(
'
build
-
signing
-
label
'
)
:
basestring
    
'
build
-
attributes
'
:
{
basestring
:
object
}
    
'
test
-
platform
'
:
basestring
    
'
test
-
name
'
:
basestring
    
Optional
(
'
product
'
)
:
basestring
    
Exclusive
(
Optional
(
'
when
'
)
'
optimization
'
)
:
{
        
Optional
(
'
files
-
changed
'
)
:
[
basestring
]
    
}
    
Exclusive
(
Optional
(
'
optimization
'
)
'
optimization
'
)
:
OptimizationSchema
    
Exclusive
(
Optional
(
'
schedules
-
component
'
)
'
optimization
'
)
:
basestring
    
Optional
(
'
worker
-
type
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
basestring
None
)
    
)
    
Optional
(
        
'
require
-
signed
-
extensions
'
        
description
=
"
Whether
the
build
being
tested
requires
extensions
be
signed
.
"
    
)
:
optionally_keyed_by
(
'
release
-
type
'
'
test
-
platform
'
bool
)
    
Optional
(
'
target
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
basestring
None
{
'
index
'
:
basestring
'
name
'
:
basestring
}
)
    
)
    
Optional
(
'
fetches
'
)
:
{
        
basestring
:
optionally_keyed_by
(
'
test
-
platform
'
[
basestring
]
)
    
}
}
required
=
True
)
transforms
.
add
def
handle_keyed_by_mozharness
(
config
tests
)
:
    
"
"
"
Resolve
a
mozharness
field
if
it
is
keyed
by
something
"
"
"
    
fields
=
[
        
'
mozharness
'
        
'
mozharness
.
chunked
'
        
'
mozharness
.
config
'
        
'
mozharness
.
extra
-
options
'
        
'
mozharness
.
requires
-
signed
-
builds
'
        
'
mozharness
.
script
'
    
]
    
for
test
in
tests
:
        
for
field
in
fields
:
            
resolve_keyed_by
(
test
field
item_name
=
test
[
'
test
-
name
'
]
)
        
yield
test
transforms
.
add
def
set_defaults
(
config
tests
)
:
    
for
test
in
tests
:
        
build_platform
=
test
[
'
build
-
platform
'
]
        
if
build_platform
.
startswith
(
'
android
'
)
:
            
test
[
'
mozharness
'
]
[
'
tooltool
-
downloads
'
]
=
'
internal
'
            
test
[
'
mozharness
'
]
[
'
actions
'
]
=
[
'
get
-
secrets
'
]
            
test
[
'
loopback
-
video
'
]
=
True
        
else
:
            
test
[
'
mozharness
'
]
[
'
set
-
moz
-
node
-
path
'
]
=
True
        
if
test
[
'
test
-
platform
'
]
.
startswith
(
'
linux
'
)
and
test
[
'
suite
'
]
not
in
[
'
talos
'
'
raptor
'
]
:
            
test
.
setdefault
(
'
allow
-
software
-
gl
-
layers
'
True
)
        
else
:
            
test
[
'
allow
-
software
-
gl
-
layers
'
]
=
False
        
if
"
-
qr
/
"
in
test
[
'
test
-
platform
'
]
:
            
test
[
'
webrender
'
]
=
True
        
else
:
            
test
.
setdefault
(
'
webrender
'
False
)
        
test
.
setdefault
(
'
e10s
'
True
)
        
test
.
setdefault
(
'
try
-
name
'
test
[
'
test
-
name
'
]
)
        
test
.
setdefault
(
'
os
-
groups
'
[
]
)
        
test
.
setdefault
(
'
run
-
as
-
administrator
'
False
)
        
test
.
setdefault
(
'
chunks
'
1
)
        
test
.
setdefault
(
'
run
-
on
-
projects
'
'
built
-
projects
'
)
        
test
.
setdefault
(
'
instance
-
size
'
'
default
'
)
        
test
.
setdefault
(
'
max
-
run
-
time
'
3600
)
        
test
.
setdefault
(
'
reboot
'
False
)
        
test
.
setdefault
(
'
virtualization
'
'
virtual
'
)
        
test
.
setdefault
(
'
loopback
-
audio
'
False
)
        
test
.
setdefault
(
'
loopback
-
video
'
False
)
        
if
config
.
params
[
'
try_task_config
'
]
.
get
(
'
debian
-
tests
'
)
:
            
test
.
setdefault
(
'
docker
-
image
'
{
'
in
-
tree
'
:
'
debian10
-
test
'
}
)
        
else
:
            
test
.
setdefault
(
'
docker
-
image
'
{
'
in
-
tree
'
:
'
desktop1604
-
test
'
}
)
        
test
.
setdefault
(
'
checkout
'
False
)
        
test
.
setdefault
(
'
require
-
signed
-
extensions
'
False
)
        
test
.
setdefault
(
'
variants
'
[
]
)
        
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
        
test
[
'
mozharness
'
]
.
setdefault
(
'
requires
-
signed
-
builds
'
False
)
        
test
[
'
mozharness
'
]
.
setdefault
(
'
tooltool
-
downloads
'
'
public
'
)
        
test
[
'
mozharness
'
]
.
setdefault
(
'
set
-
moz
-
node
-
path
'
False
)
        
test
[
'
mozharness
'
]
.
setdefault
(
'
chunked
'
False
)
        
test
[
'
mozharness
'
]
.
setdefault
(
'
chunking
-
args
'
'
this
-
chunk
'
)
        
yield
test
transforms
.
add_validate
(
test_description_schema
)
transforms
.
add
def
resolve_keys
(
config
tests
)
:
    
for
test
in
tests
:
        
resolve_keyed_by
(
            
test
'
require
-
signed
-
extensions
'
            
item_name
=
test
[
'
test
-
name
'
]
            
*
*
{
                
'
release
-
type
'
:
config
.
params
[
'
release_type
'
]
            
}
        
)
        
yield
test
transforms
.
add
def
handle_suite_category
(
config
tests
)
:
    
for
test
in
tests
:
        
test
.
setdefault
(
'
suite
'
{
}
)
        
if
isinstance
(
test
[
'
suite
'
]
basestring
)
:
            
test
[
'
suite
'
]
=
{
'
name
'
:
test
[
'
suite
'
]
}
        
suite
=
test
[
'
suite
'
]
.
setdefault
(
'
name
'
test
[
'
test
-
name
'
]
)
        
category
=
test
[
'
suite
'
]
.
setdefault
(
'
category
'
suite
)
        
test
.
setdefault
(
'
attributes
'
{
}
)
        
test
[
'
attributes
'
]
[
'
unittest_suite
'
]
=
suite
        
test
[
'
attributes
'
]
[
'
unittest_category
'
]
=
category
        
script
=
test
[
'
mozharness
'
]
[
'
script
'
]
        
category_arg
=
None
        
if
suite
.
startswith
(
'
test
-
verify
'
)
or
suite
.
startswith
(
'
test
-
coverage
'
)
:
            
pass
        
elif
script
in
(
'
android_emulator_unittest
.
py
'
'
android_hardware_unittest
.
py
'
)
:
            
category_arg
=
'
-
-
test
-
suite
'
        
elif
script
=
=
'
desktop_unittest
.
py
'
:
            
category_arg
=
'
-
-
{
}
-
suite
'
.
format
(
category
)
        
if
category_arg
:
            
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
            
extra
=
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
            
if
not
any
(
arg
.
startswith
(
category_arg
)
for
arg
in
extra
)
:
                
extra
.
append
(
'
{
}
=
{
}
'
.
format
(
category_arg
suite
)
)
        
test
[
'
suite
'
]
=
suite
        
yield
test
transforms
.
add
def
setup_talos
(
config
tests
)
:
    
"
"
"
Add
options
that
are
specific
to
talos
jobs
(
identified
by
suite
=
talos
)
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
suite
'
]
not
in
[
'
talos
'
'
raptor
'
]
:
            
yield
test
            
continue
        
if
test
[
'
suite
'
]
=
=
'
talos
'
:
            
extra_options
=
test
.
setdefault
(
'
mozharness
'
{
}
)
.
setdefault
(
'
extra
-
options
'
[
]
)
            
extra_options
.
append
(
'
-
-
use
-
talos
-
json
'
)
        
if
test
[
'
build
-
platform
'
]
.
startswith
(
'
win32
'
)
:
            
extra_options
.
append
(
'
-
-
add
-
option
'
)
            
extra_options
.
append
(
'
-
-
setpref
gfx
.
direct2d
.
disabled
=
true
'
)
        
yield
test
transforms
.
add
def
setup_raptor
(
config
tests
)
:
    
"
"
"
Add
options
that
are
specific
to
raptor
jobs
(
identified
by
suite
=
raptor
)
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
suite
'
]
!
=
'
raptor
'
:
            
yield
test
            
continue
        
extra_options
=
test
.
setdefault
(
'
mozharness
'
{
}
)
.
setdefault
(
'
extra
-
options
'
[
]
)
        
if
test
[
'
require
-
signed
-
extensions
'
]
:
            
extra_options
.
append
(
'
-
-
is
-
release
-
build
'
)
        
testurlparams_by_platform_and_project
=
{
            
"
android
-
hw
-
g5
"
:
[
                
{
                    
"
branches
"
:
[
]
                    
"
testnames
"
:
[
"
youtube
-
playback
"
]
                    
"
urlparams
"
:
[
                        
"
exclude
=
1
2
9
10
17
18
21
22
26
28
30
32
39
40
47
"
                        
"
48
55
56
63
64
71
72
79
80
83
84
89
90
95
96
"
                    
]
                
}
            
]
        
}
        
for
platform
testurlparams_by_project_definitions
\
                
in
testurlparams_by_platform_and_project
.
items
(
)
:
            
if
test
[
'
test
-
platform
'
]
.
startswith
(
platform
)
:
                
for
testurlparams_by_project
in
testurlparams_by_project_definitions
:
                    
if
any
(
                        
testname
in
test
[
'
test
-
name
'
]
                        
for
testname
in
testurlparams_by_project
[
'
testnames
'
]
                    
)
:
                        
branches
=
testurlparams_by_project
[
'
branches
'
]
                        
if
(
                            
branches
=
=
[
]
or
                            
config
.
params
.
get
(
'
project
'
)
in
branches
or
                            
config
.
params
.
is_try
(
)
and
'
try
'
in
branches
                        
)
:
                            
params_query
=
'
&
'
.
join
(
testurlparams_by_project
[
'
urlparams
'
]
)
                            
add_extra_params_option
=
"
-
-
test
-
url
-
params
=
{
}
"
.
format
(
params_query
)
                            
extra_options
.
append
(
add_extra_params_option
)
        
yield
test
transforms
.
add
def
setup_browsertime_flag
(
config
tests
)
:
    
"
"
"
Optionally
add
-
-
browsertime
flag
to
Raptor
pageload
tests
.
"
"
"
    
browsertime_flag
=
config
.
params
[
'
try_task_config
'
]
.
get
(
'
browsertime
'
False
)
    
for
test
in
tests
:
        
if
not
browsertime_flag
or
test
[
'
suite
'
]
!
=
'
raptor
'
:
            
yield
test
            
continue
        
if
test
[
'
treeherder
-
symbol
'
]
.
startswith
(
'
Rap
'
)
:
            
test
[
'
treeherder
-
symbol
'
]
=
test
[
'
treeherder
-
symbol
'
]
.
replace
(
'
Rap
'
'
Btime
'
1
)
        
extra_options
=
test
.
setdefault
(
'
mozharness
'
{
}
)
.
setdefault
(
'
extra
-
options
'
[
]
)
        
extra_options
.
append
(
'
-
-
browsertime
'
)
        
yield
test
transforms
.
add
def
handle_artifact_prefix
(
config
tests
)
:
    
"
"
"
Handle
translating
artifact_prefix
appropriately
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
build
-
attributes
'
]
.
get
(
'
artifact_prefix
'
)
:
            
test
.
setdefault
(
"
attributes
"
{
}
)
.
setdefault
(
                
'
artifact_prefix
'
test
[
'
build
-
attributes
'
]
[
'
artifact_prefix
'
]
            
)
        
yield
test
transforms
.
add
def
set_target
(
config
tests
)
:
    
for
test
in
tests
:
        
build_platform
=
test
[
'
build
-
platform
'
]
        
target
=
None
        
if
'
target
'
in
test
:
            
resolve_keyed_by
(
test
'
target
'
item_name
=
test
[
'
test
-
name
'
]
)
            
target
=
test
[
'
target
'
]
        
if
not
target
:
            
if
build_platform
.
startswith
(
'
macosx
'
)
:
                
target
=
'
target
.
dmg
'
            
elif
build_platform
.
startswith
(
'
android
'
)
:
                
target
=
'
target
.
apk
'
            
elif
build_platform
.
startswith
(
'
win
'
)
:
                
target
=
'
target
.
zip
'
            
else
:
                
target
=
'
target
.
tar
.
bz2
'
        
if
isinstance
(
target
dict
)
:
            
index_url
=
get_index_url
(
target
[
'
index
'
]
)
            
installer_url
=
'
{
}
/
artifacts
/
public
/
{
}
'
.
format
(
index_url
target
[
'
name
'
]
)
            
test
[
'
mozharness
'
]
[
'
installer
-
url
'
]
=
installer_url
        
else
:
            
test
[
'
mozharness
'
]
[
'
build
-
artifact
-
name
'
]
=
get_artifact_path
(
test
target
)
        
yield
test
transforms
.
add
def
set_treeherder_machine_platform
(
config
tests
)
:
    
"
"
"
Set
the
appropriate
task
.
extra
.
treeherder
.
machine
.
platform
"
"
"
    
translation
=
{
        
'
linux64
-
asan
/
opt
'
:
'
linux64
/
asan
'
        
'
linux64
-
pgo
/
opt
'
:
'
linux64
/
pgo
'
        
'
macosx1014
-
64
/
debug
'
:
'
osx
-
10
-
14
/
debug
'
        
'
macosx1014
-
64
/
opt
'
:
'
osx
-
10
-
14
/
opt
'
        
'
macosx1014
-
64
-
shippable
/
opt
'
:
'
osx
-
10
-
14
-
shippable
/
opt
'
        
'
win64
-
asan
/
opt
'
:
'
windows10
-
64
/
asan
'
        
'
win64
-
aarch64
/
opt
'
:
'
windows10
-
aarch64
/
opt
'
        
'
win32
-
pgo
/
opt
'
:
'
windows7
-
32
/
pgo
'
        
'
win64
-
pgo
/
opt
'
:
'
windows10
-
64
/
pgo
'
    
}
    
for
test
in
tests
:
        
if
'
android
'
in
test
[
'
test
-
platform
'
]
and
'
pgo
/
opt
'
in
test
[
'
test
-
platform
'
]
:
            
platform_new
=
test
[
'
test
-
platform
'
]
.
replace
(
'
-
pgo
/
opt
'
'
/
pgo
'
)
            
test
[
'
treeherder
-
machine
-
platform
'
]
=
platform_new
        
elif
'
-
qr
'
in
test
[
'
test
-
platform
'
]
:
            
test
[
'
treeherder
-
machine
-
platform
'
]
=
test
[
'
test
-
platform
'
]
        
elif
'
android
-
hw
'
in
test
[
'
test
-
platform
'
]
:
            
test
[
'
treeherder
-
machine
-
platform
'
]
=
test
[
'
test
-
platform
'
]
        
elif
'
android
-
em
-
7
.
0
-
x86_64
'
in
test
[
'
test
-
platform
'
]
:
            
opt
=
test
[
'
test
-
platform
'
]
.
split
(
'
/
'
)
[
1
]
            
test
[
'
treeherder
-
machine
-
platform
'
]
=
'
android
-
em
-
7
-
0
-
x86_64
/
'
+
opt
        
elif
'
android
-
em
-
7
.
0
-
x86
'
in
test
[
'
test
-
platform
'
]
:
            
opt
=
test
[
'
test
-
platform
'
]
.
split
(
'
/
'
)
[
1
]
            
test
[
'
treeherder
-
machine
-
platform
'
]
=
'
android
-
em
-
7
-
0
-
x86
/
'
+
opt
        
else
:
            
test
[
'
treeherder
-
machine
-
platform
'
]
=
translation
.
get
(
                
test
[
'
build
-
platform
'
]
test
[
'
test
-
platform
'
]
)
        
yield
test
transforms
.
add
def
set_tier
(
config
tests
)
:
    
"
"
"
Set
the
tier
based
on
policy
for
all
test
descriptions
that
do
not
    
specify
a
tier
otherwise
.
"
"
"
    
for
test
in
tests
:
        
if
'
tier
'
in
test
:
            
resolve_keyed_by
(
test
'
tier
'
item_name
=
test
[
'
test
-
name
'
]
)
        
if
'
tier
'
not
in
test
or
test
[
'
tier
'
]
=
=
'
default
'
:
            
if
test
[
'
test
-
platform
'
]
in
[
'
linux32
/
opt
'
                                         
'
linux32
/
debug
'
                                         
'
linux32
-
nightly
/
opt
'
                                         
'
linux32
-
devedition
/
opt
'
                                         
'
linux32
-
shippable
/
opt
'
                                         
'
linux64
/
opt
'
                                         
'
linux64
-
nightly
/
opt
'
                                         
'
linux64
/
debug
'
                                         
'
linux64
-
pgo
/
opt
'
                                         
'
linux64
-
shippable
/
opt
'
                                         
'
linux64
-
devedition
/
opt
'
                                         
'
linux64
-
asan
/
opt
'
                                         
'
linux64
-
qr
/
opt
'
                                         
'
linux64
-
qr
/
debug
'
                                         
'
linux64
-
pgo
-
qr
/
opt
'
                                         
'
linux64
-
shippable
-
qr
/
opt
'
                                         
'
windows7
-
32
/
debug
'
                                         
'
windows7
-
32
/
opt
'
                                         
'
windows7
-
32
-
pgo
/
opt
'
                                         
'
windows7
-
32
-
devedition
/
opt
'
                                         
'
windows7
-
32
-
nightly
/
opt
'
                                         
'
windows7
-
32
-
shippable
/
opt
'
                                         
'
windows10
-
aarch64
/
opt
'
                                         
'
windows10
-
64
/
debug
'
                                         
'
windows10
-
64
/
opt
'
                                         
'
windows10
-
64
-
pgo
/
opt
'
                                         
'
windows10
-
64
-
shippable
/
opt
'
                                         
'
windows10
-
64
-
devedition
/
opt
'
                                         
'
windows10
-
64
-
nightly
/
opt
'
                                         
'
windows10
-
64
-
asan
/
opt
'
                                         
'
windows10
-
64
-
qr
/
opt
'
                                         
'
windows10
-
64
-
qr
/
debug
'
                                         
'
windows10
-
64
-
pgo
-
qr
/
opt
'
                                         
'
windows10
-
64
-
shippable
-
qr
/
opt
'
                                         
'
macosx1014
-
64
/
opt
'
                                         
'
macosx1014
-
64
/
debug
'
                                         
'
macosx1014
-
64
-
nightly
/
opt
'
                                         
'
macosx1014
-
64
-
shippable
/
opt
'
                                         
'
macosx1014
-
64
-
devedition
/
opt
'
                                         
'
macosx1014
-
64
-
qr
/
opt
'
                                         
'
macosx1014
-
64
-
shippable
-
qr
/
opt
'
                                         
'
macosx1014
-
64
-
qr
/
debug
'
                                         
'
android
-
em
-
7
.
0
-
x86_64
/
opt
'
                                         
'
android
-
em
-
7
.
0
-
x86_64
/
debug
'
                                         
'
android
-
em
-
7
.
0
-
x86
/
opt
'
]
:
                
test
[
'
tier
'
]
=
1
            
else
:
                
test
[
'
tier
'
]
=
2
        
yield
test
transforms
.
add
def
set_expires_after
(
config
tests
)
:
    
"
"
"
Try
jobs
expire
after
2
weeks
;
everything
else
lasts
1
year
.
This
helps
    
keep
storage
costs
low
.
"
"
"
    
for
test
in
tests
:
        
if
'
expires
-
after
'
not
in
test
:
            
if
config
.
params
.
is_try
(
)
:
                
test
[
'
expires
-
after
'
]
=
"
14
days
"
            
else
:
                
test
[
'
expires
-
after
'
]
=
"
1
year
"
        
yield
test
transforms
.
add
def
set_download_symbols
(
config
tests
)
:
    
"
"
"
In
general
we
download
symbols
immediately
for
debug
builds
but
only
    
on
demand
for
everything
else
.
ASAN
builds
shouldn
'
t
download
    
symbols
since
they
don
'
t
product
symbol
zips
see
bug
1283879
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
test
-
platform
'
]
.
split
(
'
/
'
)
[
-
1
]
=
=
'
debug
'
:
            
test
[
'
mozharness
'
]
[
'
download
-
symbols
'
]
=
True
        
elif
test
[
'
build
-
platform
'
]
=
=
'
linux64
-
asan
/
opt
'
or
\
                
test
[
'
build
-
platform
'
]
=
=
'
windows10
-
64
-
asan
/
opt
'
:
            
if
'
download
-
symbols
'
in
test
[
'
mozharness
'
]
:
                
del
test
[
'
mozharness
'
]
[
'
download
-
symbols
'
]
        
else
:
            
test
[
'
mozharness
'
]
[
'
download
-
symbols
'
]
=
'
ondemand
'
        
yield
test
transforms
.
add
def
handle_keyed_by
(
config
tests
)
:
    
"
"
"
Resolve
fields
that
can
be
keyed
by
platform
etc
.
"
"
"
    
fields
=
[
        
'
instance
-
size
'
        
'
docker
-
image
'
        
'
max
-
run
-
time
'
        
'
chunks
'
        
'
variants
'
        
'
e10s
'
        
'
suite
'
        
'
run
-
on
-
projects
'
        
'
os
-
groups
'
        
'
run
-
as
-
administrator
'
        
'
workdir
'
        
'
worker
-
type
'
        
'
virtualization
'
        
'
fetches
.
fetch
'
        
'
fetches
.
toolchain
'
        
'
target
'
    
]
    
for
test
in
tests
:
        
for
field
in
fields
:
            
resolve_keyed_by
(
test
field
item_name
=
test
[
'
test
-
name
'
]
                             
project
=
config
.
params
[
'
project
'
]
)
        
yield
test
transforms
.
add
def
setup_browsertime
(
config
tests
)
:
    
"
"
"
Configure
browsertime
dependencies
for
Raptor
pageload
tests
that
have
-
-
browsertime
extra
option
.
"
"
"
    
for
test
in
tests
:
        
extra_options
=
test
.
get
(
'
mozharness
'
{
}
)
.
get
(
'
extra
-
options
'
[
]
)
        
if
test
[
'
suite
'
]
!
=
'
raptor
'
or
'
-
-
browsertime
'
not
in
extra_options
:
            
yield
test
            
continue
        
test
[
'
tier
'
]
=
2
        
ts
=
{
            
'
by
-
test
-
platform
'
:
{
                
'
android
.
*
'
:
[
'
browsertime
'
'
linux64
-
geckodriver
'
'
linux64
-
node
'
]
                
'
linux
.
*
'
:
[
'
browsertime
'
'
linux64
-
geckodriver
'
'
linux64
-
node
'
]
                
'
macosx
.
*
'
:
[
'
browsertime
'
'
macosx64
-
geckodriver
'
'
macosx64
-
node
'
]
                
'
windows
.
*
32
.
*
'
:
[
'
browsertime
'
'
win32
-
geckodriver
'
'
win32
-
node
'
]
                
'
windows
.
*
64
.
*
'
:
[
'
browsertime
'
'
win64
-
geckodriver
'
'
win64
-
node
'
]
            
}
        
}
        
test
.
setdefault
(
'
fetches
'
{
}
)
.
setdefault
(
'
toolchain
'
[
]
)
.
extend
(
            
evaluate_keyed_by
(
ts
'
fetches
.
toolchain
'
test
)
)
        
fs
=
{
            
'
by
-
test
-
platform
'
:
{
                
'
android
.
*
'
:
[
'
linux64
-
chromedriver
'
'
linux64
-
ffmpeg
-
4
.
1
.
4
'
]
                
'
linux
.
*
'
:
[
'
linux64
-
chromedriver
'
'
linux64
-
ffmpeg
-
4
.
1
.
4
'
]
                
'
macosx
.
*
'
:
[
'
mac64
-
chromedriver
'
'
mac64
-
ffmpeg
-
4
.
1
.
1
'
]
                
'
windows
.
*
32
.
*
'
:
[
'
win32
-
chromedriver
'
'
win64
-
ffmpeg
-
4
.
1
.
1
'
]
                
'
windows
.
*
64
.
*
'
:
[
'
win32
-
chromedriver
'
'
win64
-
ffmpeg
-
4
.
1
.
1
'
]
            
}
        
}
        
test
.
setdefault
(
'
fetches
'
{
}
)
.
setdefault
(
'
fetch
'
[
]
)
.
extend
(
            
evaluate_keyed_by
(
fs
'
fetches
.
fetch
'
test
)
)
        
extra_options
.
extend
(
(
'
-
-
browsertime
-
browsertimejs
'
                              
'
MOZ_FETCHES_DIR
/
browsertime
/
node_modules
/
browsertime
/
bin
/
browsertime
.
js
'
)
)
        
eos
=
{
            
'
by
-
test
-
platform
'
:
{
                
'
windows
.
*
'
:
                
[
'
-
-
browsertime
-
node
'
                 
'
MOZ_FETCHES_DIR
/
node
/
node
.
exe
'
                 
'
-
-
browsertime
-
geckodriver
'
                 
'
MOZ_FETCHES_DIR
/
geckodriver
.
exe
'
                 
'
-
-
browsertime
-
chromedriver
'
                 
'
MOZ_FETCHES_DIR
/
chromedriver
.
exe
'
                 
'
-
-
browsertime
-
ffmpeg
'
                 
'
MOZ_FETCHES_DIR
/
ffmpeg
-
4
.
1
.
1
-
win64
-
static
/
bin
/
ffmpeg
.
exe
'
                 
]
                
'
macosx
.
*
'
:
                
[
'
-
-
browsertime
-
node
'
                 
'
MOZ_FETCHES_DIR
/
node
/
bin
/
node
'
                 
'
-
-
browsertime
-
geckodriver
'
                 
'
MOZ_FETCHES_DIR
/
geckodriver
'
                 
'
-
-
browsertime
-
chromedriver
'
                 
'
MOZ_FETCHES_DIR
/
chromedriver
'
                 
'
-
-
browsertime
-
ffmpeg
'
                 
'
MOZ_FETCHES_DIR
/
ffmpeg
-
4
.
1
.
1
-
macos64
-
static
/
bin
/
ffmpeg
'
                 
]
                
'
default
'
:
                
[
'
-
-
browsertime
-
node
'
                 
'
MOZ_FETCHES_DIR
/
node
/
bin
/
node
'
                 
'
-
-
browsertime
-
geckodriver
'
                 
'
MOZ_FETCHES_DIR
/
geckodriver
'
                 
'
-
-
browsertime
-
chromedriver
'
                 
'
MOZ_FETCHES_DIR
/
chromedriver
'
                 
'
-
-
browsertime
-
ffmpeg
'
                 
'
MOZ_FETCHES_DIR
/
ffmpeg
-
4
.
1
.
4
-
i686
-
static
/
ffmpeg
'
                 
]
            
}
        
}
        
extra_options
.
extend
(
evaluate_keyed_by
(
eos
'
mozharness
.
extra
-
options
'
test
)
)
        
yield
test
def
get_mobile_project
(
test
)
:
    
"
"
"
Returns
the
mobile
project
of
the
specified
task
or
None
.
"
"
"
    
if
not
test
[
'
build
-
platform
'
]
.
startswith
(
'
android
'
)
:
        
return
    
mobile_projects
=
(
        
'
fenix
'
        
'
fennec
'
        
'
geckoview
'
        
'
refbrow
'
    
)
    
for
name
in
mobile_projects
:
        
if
name
in
test
[
'
test
-
name
'
]
:
            
return
name
    
target
=
test
.
get
(
'
target
'
)
    
if
target
:
        
if
isinstance
(
target
dict
)
:
            
target
=
target
[
'
name
'
]
        
for
name
in
mobile_projects
:
            
if
name
in
target
:
                
return
name
    
return
'
fennec
'
transforms
.
add
def
disable_fennec_e10s
(
config
tests
)
:
    
for
test
in
tests
:
        
if
get_mobile_project
(
test
)
=
=
'
fennec
'
:
            
test
[
'
e10s
'
]
=
False
        
yield
test
transforms
.
add
def
enable_code_coverage
(
config
tests
)
:
    
"
"
"
Enable
code
coverage
for
the
ccov
build
-
platforms
"
"
"
    
for
test
in
tests
:
        
if
'
ccov
'
in
test
[
'
build
-
platform
'
]
:
            
if
'
opt
'
in
test
[
'
build
-
platform
'
]
or
'
fuzzing
'
in
test
[
'
build
-
platform
'
]
:
                
test
[
'
run
-
on
-
projects
'
]
=
[
]
                
continue
            
if
'
android
'
in
test
[
'
build
-
platform
'
]
:
                
test
.
setdefault
(
'
fetches
'
{
}
)
.
setdefault
(
'
toolchain
'
[
]
)
.
append
(
'
linux64
-
grcov
'
)
                
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
.
append
(
'
-
-
java
-
code
-
coverage
'
)
                
yield
test
                
continue
            
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
.
append
(
'
-
-
code
-
coverage
'
)
            
test
[
'
instance
-
size
'
]
=
'
xlarge
'
            
if
'
mac
'
in
test
[
'
build
-
platform
'
]
:
                
test
[
'
run
-
on
-
projects
'
]
=
[
'
try
'
]
            
if
test
[
'
run
-
on
-
projects
'
]
not
in
[
[
]
[
'
try
'
]
]
:
                
test
[
'
run
-
on
-
projects
'
]
=
'
built
-
projects
'
            
test
.
pop
(
'
schedules
-
component
'
None
)
            
test
.
pop
(
'
when
'
None
)
            
test
[
'
optimization
'
]
=
None
            
if
any
(
p
in
test
[
'
build
-
platform
'
]
for
p
in
(
'
linux
'
'
osx
'
'
win
'
)
)
:
                
test
.
setdefault
(
'
fetches
'
{
}
)
                
test
[
'
fetches
'
]
.
setdefault
(
'
fetch
'
[
]
)
                
test
[
'
fetches
'
]
.
setdefault
(
'
toolchain
'
[
]
)
            
if
'
linux
'
in
test
[
'
build
-
platform
'
]
:
                
test
[
'
fetches
'
]
[
'
toolchain
'
]
.
append
(
'
linux64
-
grcov
'
)
            
elif
'
osx
'
in
test
[
'
build
-
platform
'
]
:
                
test
[
'
fetches
'
]
[
'
fetch
'
]
.
append
(
'
grcov
-
osx
-
x86_64
'
)
            
elif
'
win
'
in
test
[
'
build
-
platform
'
]
:
                
test
[
'
fetches
'
]
[
'
toolchain
'
]
.
append
(
'
win64
-
grcov
'
)
            
if
'
talos
'
in
test
[
'
test
-
name
'
]
:
                
test
[
'
max
-
run
-
time
'
]
=
7200
                
if
'
linux
'
in
test
[
'
build
-
platform
'
]
:
                    
test
[
'
docker
-
image
'
]
=
{
"
in
-
tree
"
:
"
desktop1604
-
test
"
}
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
add
-
option
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
cycles
1
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
add
-
option
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
tppagecycles
1
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
add
-
option
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
no
-
upload
-
results
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
add
-
option
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
tptimeout
15000
'
)
            
if
'
raptor
'
in
test
[
'
test
-
name
'
]
:
                
test
[
'
max
-
run
-
time
'
]
=
1800
                
if
'
linux
'
in
test
[
'
build
-
platform
'
]
:
                    
test
[
'
docker
-
image
'
]
=
{
"
in
-
tree
"
:
"
desktop1604
-
test
"
}
        
yield
test
transforms
.
add
def
handle_run_on_projects
(
config
tests
)
:
    
"
"
"
Handle
translating
built
-
projects
appropriately
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
run
-
on
-
projects
'
]
=
=
'
built
-
projects
'
:
            
test
[
'
run
-
on
-
projects
'
]
=
test
[
'
build
-
attributes
'
]
.
get
(
'
run_on_projects
'
[
'
all
'
]
)
        
yield
test
transforms
.
add
def
split_variants
(
config
tests
)
:
    
for
test
in
tests
:
        
variants
=
test
.
pop
(
'
variants
'
)
or
[
]
        
yield
copy
.
deepcopy
(
test
)
        
for
name
in
variants
:
            
testv
=
copy
.
deepcopy
(
test
)
            
variant
=
TEST_VARIANTS
[
name
]
            
if
'
filterfn
'
in
variant
and
not
variant
[
'
filterfn
'
]
(
testv
)
:
                
continue
            
testv
[
'
attributes
'
]
[
'
unittest_variant
'
]
=
name
            
testv
[
'
description
'
]
=
variant
[
'
description
'
]
.
format
(
*
*
testv
)
            
suffix
=
'
-
'
+
variant
[
'
suffix
'
]
            
testv
[
'
test
-
name
'
]
+
=
suffix
            
testv
[
'
try
-
name
'
]
+
=
suffix
            
group
symbol
=
split_symbol
(
testv
[
'
treeherder
-
symbol
'
]
)
            
if
group
!
=
'
?
'
:
                
group
+
=
suffix
            
else
:
                
symbol
+
=
suffix
            
testv
[
'
treeherder
-
symbol
'
]
=
join_symbol
(
group
symbol
)
            
testv
.
update
(
variant
.
get
(
'
replace
'
{
}
)
)
            
yield
merge
(
testv
variant
.
get
(
'
merge
'
{
}
)
)
transforms
.
add
def
enable_fission_on_central
(
config
tests
)
:
    
"
"
"
Enable
select
fission
tasks
on
mozilla
-
central
.
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
attributes
'
]
.
get
(
'
unittest_variant
'
)
!
=
'
fission
'
:
            
yield
test
            
continue
        
exceptions
=
(
'
gpu
'
'
remote
'
'
screenshots
'
)
        
if
(
test
[
'
attributes
'
]
[
'
unittest_category
'
]
!
=
'
mochitest
'
or
                
any
(
s
in
test
[
'
attributes
'
]
[
'
unittest_suite
'
]
for
s
in
exceptions
)
)
:
            
yield
test
            
continue
        
platform
=
test
[
'
build
-
attributes
'
]
[
'
build_platform
'
]
        
btype
=
test
[
'
build
-
attributes
'
]
[
'
build_type
'
]
        
if
not
(
platform
=
=
'
linux64
'
or
(
platform
=
=
'
win64
'
and
btype
!
=
'
debug
'
)
)
:
            
yield
test
            
continue
        
if
not
runs_on_central
(
test
)
:
            
test
[
'
run
-
on
-
projects
'
]
.
append
(
'
mozilla
-
central
'
)
        
yield
test
transforms
.
add
def
ensure_spi_disabled_on_all_but_spi
(
config
tests
)
:
    
for
test
in
tests
:
        
variant
=
test
[
'
attributes
'
]
.
get
(
'
unittest_variant
'
'
'
)
        
has_setpref
=
(
'
gtest
'
not
in
test
[
'
suite
'
]
and
                       
'
cppunit
'
not
in
test
[
'
suite
'
]
and
                       
'
jittest
'
not
in
test
[
'
suite
'
]
and
                       
'
junit
'
not
in
test
[
'
suite
'
]
and
                       
'
raptor
'
not
in
test
[
'
suite
'
]
)
        
if
has_setpref
and
variant
!
=
'
socketprocess
'
:
            
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
                    
'
-
-
setpref
=
media
.
peerconnection
.
mtransport_process
=
false
'
)
            
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
                    
'
-
-
setpref
=
network
.
process
.
enabled
=
false
'
)
        
yield
test
transforms
.
add
def
split_e10s
(
config
tests
)
:
    
for
test
in
tests
:
        
e10s
=
test
[
'
e10s
'
]
        
if
e10s
:
            
test_copy
=
copy
.
deepcopy
(
test
)
            
test_copy
[
'
test
-
name
'
]
+
=
'
-
e10s
'
            
test_copy
[
'
e10s
'
]
=
True
            
test_copy
[
'
attributes
'
]
[
'
e10s
'
]
=
True
            
yield
test_copy
        
if
not
e10s
or
e10s
=
=
'
both
'
:
            
test
[
'
test
-
name
'
]
+
=
'
-
1proc
'
            
test
[
'
try
-
name
'
]
+
=
'
-
1proc
'
            
test
[
'
e10s
'
]
=
False
            
test
[
'
attributes
'
]
[
'
e10s
'
]
=
False
            
group
symbol
=
split_symbol
(
test
[
'
treeherder
-
symbol
'
]
)
            
if
group
!
=
'
?
'
:
                
group
+
=
'
-
1proc
'
            
test
[
'
treeherder
-
symbol
'
]
=
join_symbol
(
group
symbol
)
            
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
disable
-
e10s
'
)
            
yield
test
transforms
.
add
def
split_chunks
(
config
tests
)
:
    
"
"
"
Based
on
the
'
chunks
'
key
split
tests
up
into
chunks
by
duplicating
    
them
and
assigning
'
this
-
chunk
'
appropriately
and
updating
the
treeherder
    
symbol
.
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
suite
'
]
.
startswith
(
'
test
-
verify
'
)
or
\
           
test
[
'
suite
'
]
.
startswith
(
'
test
-
coverage
'
)
:
            
env
=
config
.
params
.
get
(
'
try_task_config
'
{
}
)
or
{
}
            
env
=
env
.
get
(
'
templates
'
{
}
)
.
get
(
'
env
'
{
}
)
            
test
[
'
chunks
'
]
=
perfile_number_of_chunks
(
config
.
params
.
is_try
(
)
                                                      
env
.
get
(
'
MOZHARNESS_TEST_PATHS
'
'
'
)
                                                      
config
.
params
.
get
(
'
head_repository
'
'
'
)
                                                      
config
.
params
.
get
(
'
head_rev
'
'
'
)
                                                      
test
[
'
test
-
name
'
]
)
            
maximum_number_verify_chunks
=
3
            
if
test
[
'
chunks
'
]
>
maximum_number_verify_chunks
:
                
test
[
'
chunks
'
]
=
maximum_number_verify_chunks
        
if
test
[
'
chunks
'
]
<
=
1
:
            
test
[
'
this
-
chunk
'
]
=
1
            
yield
test
            
continue
        
for
this_chunk
in
range
(
1
test
[
'
chunks
'
]
+
1
)
:
            
chunked
=
copy
.
deepcopy
(
test
)
            
chunked
[
'
this
-
chunk
'
]
=
this_chunk
            
chunked
[
'
treeherder
-
symbol
'
]
=
add_suffix
(
                
chunked
[
'
treeherder
-
symbol
'
]
this_chunk
)
            
yield
chunked
transforms
.
add
def
allow_software_gl_layers
(
config
tests
)
:
    
"
"
"
    
Handle
the
"
allow
-
software
-
gl
-
layers
"
property
for
platforms
where
it
    
applies
.
    
"
"
"
    
for
test
in
tests
:
        
if
test
.
get
(
'
allow
-
software
-
gl
-
layers
'
)
:
            
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
\
                              
.
append
(
"
-
-
allow
-
software
-
gl
-
layers
"
)
        
yield
test
transforms
.
add
def
enable_webrender
(
config
tests
)
:
    
"
"
"
    
Handle
the
"
webrender
"
property
by
passing
a
flag
to
mozharness
if
it
is
    
enabled
.
    
"
"
"
    
for
test
in
tests
:
        
if
test
.
get
(
'
webrender
'
)
:
            
extra_options
=
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
            
extra_options
.
append
(
"
-
-
enable
-
webrender
"
)
            
if
not
test
[
'
attributes
'
]
[
'
unittest_category
'
]
in
[
'
cppunittest
'
'
gtest
'
'
raptor
'
]
:
                
extra_options
.
append
(
"
-
-
setpref
=
layers
.
d3d11
.
enable
-
blacklist
=
false
"
)
        
yield
test
transforms
.
add
def
set_schedules_for_webrender_android
(
config
tests
)
:
    
"
"
"
android
-
hw
has
limited
resources
we
need
webrender
on
phones
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
suite
'
]
in
[
'
crashtest
'
'
reftest
'
]
and
\
           
test
[
'
test
-
platform
'
]
.
startswith
(
'
android
-
hw
'
)
:
            
test
[
'
schedules
-
component
'
]
=
'
android
-
hw
-
gfx
'
        
yield
test
transforms
.
add
def
set_retry_exit_status
(
config
tests
)
:
    
"
"
"
Set
the
retry
exit
status
to
TBPL_RETRY
the
value
returned
by
mozharness
       
scripts
to
indicate
a
transient
failure
that
should
be
retried
.
"
"
"
    
for
test
in
tests
:
        
test
[
'
retry
-
exit
-
status
'
]
=
[
4
]
        
yield
test
transforms
.
add
def
set_profile
(
config
tests
)
:
    
"
"
"
Set
profiling
mode
for
tests
.
"
"
"
    
profile
=
None
    
if
config
.
params
[
'
try_mode
'
]
=
=
'
try_option_syntax
'
:
        
profile
=
config
.
params
[
'
try_options
'
]
[
'
profile
'
]
    
else
:
        
profile
=
config
.
params
[
'
try_task_config
'
]
.
get
(
'
gecko
-
profile
'
False
)
    
for
test
in
tests
:
        
if
profile
and
test
[
'
suite
'
]
in
[
'
talos
'
'
raptor
'
]
:
            
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
geckoProfile
'
)
        
yield
test
transforms
.
add
def
set_tag
(
config
tests
)
:
    
"
"
"
Set
test
for
a
specific
tag
.
"
"
"
    
tag
=
None
    
if
config
.
params
[
'
try_mode
'
]
=
=
'
try_option_syntax
'
:
        
tag
=
config
.
params
[
'
try_options
'
]
[
'
tag
'
]
    
for
test
in
tests
:
        
if
tag
:
            
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
extend
(
[
'
-
-
tag
'
tag
]
)
        
yield
test
transforms
.
add
def
set_test_type
(
config
tests
)
:
    
for
test
in
tests
:
        
for
test_type
in
[
'
mochitest
'
'
reftest
'
'
talos
'
'
raptor
'
]
:
            
if
test_type
in
test
[
'
suite
'
]
and
'
web
-
platform
'
not
in
test
[
'
suite
'
]
:
                
test
.
setdefault
(
'
tags
'
{
}
)
[
'
test
-
type
'
]
=
test_type
        
yield
test
transforms
.
add
def
single_stylo_traversal_tests
(
config
tests
)
:
    
"
"
"
Enable
single
traversal
for
all
tests
on
the
sequential
Stylo
platform
.
"
"
"
    
for
test
in
tests
:
        
if
not
test
[
'
test
-
platform
'
]
.
startswith
(
'
linux64
-
stylo
-
sequential
/
'
)
:
            
yield
test
            
continue
        
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
\
                          
.
append
(
'
-
-
single
-
stylo
-
traversal
'
)
        
yield
test
transforms
.
add
def
set_worker_type
(
config
tests
)
:
    
"
"
"
Set
the
worker
type
based
on
the
test
platform
.
"
"
"
    
for
test
in
tests
:
        
test_platform
=
test
[
'
test
-
platform
'
]
        
if
test
.
get
(
'
worker
-
type
'
)
:
            
pass
        
elif
test_platform
.
startswith
(
'
macosx1014
-
64
'
)
:
            
test
[
'
worker
-
type
'
]
=
MACOSX_WORKER_TYPES
[
'
macosx1014
-
64
'
]
        
elif
test_platform
.
startswith
(
'
win
'
)
:
            
if
test
[
'
virtualization
'
]
=
=
'
hardware
'
:
                
if
test_platform
.
startswith
(
'
windows10
-
64
-
ref
-
hw
-
2017
'
)
:
                    
win_worker_type_platform
=
WINDOWS_WORKER_TYPES
[
'
windows10
-
64
-
ref
-
hw
-
2017
'
]
                
elif
test_platform
.
startswith
(
'
windows10
-
aarch64
'
)
:
                    
win_worker_type_platform
=
WINDOWS_WORKER_TYPES
[
'
windows10
-
aarch64
'
]
                
else
:
                    
win_worker_type_platform
=
WINDOWS_WORKER_TYPES
[
'
windows10
-
64
'
]
            
else
:
                
win_worker_type_platform
=
WINDOWS_WORKER_TYPES
[
                    
test_platform
.
split
(
'
/
'
)
[
0
]
                
]
            
test
[
'
worker
-
type
'
]
=
win_worker_type_platform
[
test
[
'
virtualization
'
]
]
        
elif
test_platform
.
startswith
(
'
android
-
hw
-
g5
'
)
:
            
if
test
[
'
suite
'
]
!
=
'
raptor
'
:
                
test
[
'
worker
-
type
'
]
=
'
t
-
bitbar
-
gw
-
unit
-
g5
'
            
elif
'
-
-
power
-
test
'
in
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
:
                
test
[
'
worker
-
type
'
]
=
'
t
-
bitbar
-
gw
-
batt
-
g5
'
            
else
:
                
test
[
'
worker
-
type
'
]
=
'
t
-
bitbar
-
gw
-
perf
-
g5
'
        
elif
test_platform
.
startswith
(
'
android
-
hw
-
p2
'
)
:
            
if
test
[
'
suite
'
]
!
=
'
raptor
'
:
                
test
[
'
worker
-
type
'
]
=
'
t
-
bitbar
-
gw
-
unit
-
p2
'
            
elif
'
-
-
power
-
test
'
in
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
:
                
test
[
'
worker
-
type
'
]
=
'
t
-
bitbar
-
gw
-
batt
-
p2
'
            
else
:
                
test
[
'
worker
-
type
'
]
=
'
t
-
bitbar
-
gw
-
perf
-
p2
'
        
elif
test_platform
.
startswith
(
'
android
-
em
-
7
.
0
-
x86
'
)
:
            
test
[
'
worker
-
type
'
]
=
'
terraform
-
packet
/
gecko
-
t
-
linux
'
        
elif
test_platform
.
startswith
(
'
linux
'
)
or
test_platform
.
startswith
(
'
android
'
)
:
            
if
test
.
get
(
'
suite
'
'
'
)
in
[
'
talos
'
'
raptor
'
]
and
\
                 
not
test
[
'
build
-
platform
'
]
.
startswith
(
'
linux64
-
ccov
'
)
:
                
test
[
'
worker
-
type
'
]
=
'
t
-
linux
-
talos
'
            
else
:
                
test
[
'
worker
-
type
'
]
=
LINUX_WORKER_TYPES
[
test
[
'
instance
-
size
'
]
]
        
else
:
            
raise
Exception
(
"
unknown
test_platform
{
}
"
.
format
(
test_platform
)
)
        
yield
test
transforms
.
add
def
make_job_description
(
config
tests
)
:
    
"
"
"
Convert
*
test
*
descriptions
to
*
job
*
descriptions
(
input
to
    
taskgraph
.
transforms
.
job
)
"
"
"
    
for
test
in
tests
:
        
mobile
=
get_mobile_project
(
test
)
        
if
mobile
and
(
mobile
not
in
test
[
'
test
-
name
'
]
)
:
            
label
=
'
{
}
-
{
}
-
{
}
-
{
}
'
.
format
(
config
.
kind
test
[
'
test
-
platform
'
]
mobile
                                         
test
[
'
test
-
name
'
]
)
        
else
:
            
label
=
'
{
}
-
{
}
-
{
}
'
.
format
(
config
.
kind
test
[
'
test
-
platform
'
]
test
[
'
test
-
name
'
]
)
        
if
test
[
'
chunks
'
]
>
1
:
            
label
+
=
'
-
{
}
'
.
format
(
test
[
'
this
-
chunk
'
]
)
        
build_label
=
test
[
'
build
-
label
'
]
        
try_name
=
test
[
'
try
-
name
'
]
        
if
test
[
'
suite
'
]
=
=
'
talos
'
:
            
attr_try_name
=
'
talos_try_name
'
        
elif
test
[
'
suite
'
]
=
=
'
raptor
'
:
            
attr_try_name
=
'
raptor_try_name
'
        
else
:
            
attr_try_name
=
'
unittest_try_name
'
        
attr_build_platform
attr_build_type
=
test
[
'
build
-
platform
'
]
.
split
(
'
/
'
1
)
        
attributes
=
test
.
get
(
'
attributes
'
{
}
)
        
attributes
.
update
(
{
            
'
build_platform
'
:
attr_build_platform
            
'
build_type
'
:
attr_build_type
            
'
test_platform
'
:
test
[
'
test
-
platform
'
]
            
'
test_chunk
'
:
str
(
test
[
'
this
-
chunk
'
]
)
            
attr_try_name
:
try_name
        
}
)
        
jobdesc
=
{
}
        
name
=
'
{
}
-
{
}
'
.
format
(
test
[
'
test
-
platform
'
]
test
[
'
test
-
name
'
]
)
        
jobdesc
[
'
name
'
]
=
name
        
jobdesc
[
'
label
'
]
=
label
        
jobdesc
[
'
description
'
]
=
test
[
'
description
'
]
        
jobdesc
[
'
attributes
'
]
=
attributes
        
jobdesc
[
'
dependencies
'
]
=
{
'
build
'
:
build_label
}
        
jobdesc
[
'
job
-
from
'
]
=
test
[
'
job
-
from
'
]
        
if
test
.
get
(
'
fetches
'
)
:
            
jobdesc
[
'
fetches
'
]
=
test
[
'
fetches
'
]
        
if
test
[
'
mozharness
'
]
[
'
requires
-
signed
-
builds
'
]
is
True
:
            
jobdesc
[
'
dependencies
'
]
[
'
build
-
signing
'
]
=
test
[
'
build
-
signing
-
label
'
]
        
jobdesc
[
'
expires
-
after
'
]
=
test
[
'
expires
-
after
'
]
        
jobdesc
[
'
routes
'
]
=
[
]
        
jobdesc
[
'
run
-
on
-
projects
'
]
=
test
[
'
run
-
on
-
projects
'
]
        
jobdesc
[
'
scopes
'
]
=
[
]
        
jobdesc
[
'
tags
'
]
=
test
.
get
(
'
tags
'
{
}
)
        
jobdesc
[
'
extra
'
]
=
{
            
'
chunks
'
:
{
                
'
current
'
:
test
[
'
this
-
chunk
'
]
                
'
total
'
:
test
[
'
chunks
'
]
            
}
            
'
suite
'
:
attributes
[
'
unittest_suite
'
]
        
}
        
jobdesc
[
'
treeherder
'
]
=
{
            
'
symbol
'
:
test
[
'
treeherder
-
symbol
'
]
            
'
kind
'
:
'
test
'
            
'
tier
'
:
test
[
'
tier
'
]
            
'
platform
'
:
test
.
get
(
'
treeherder
-
machine
-
platform
'
test
[
'
build
-
platform
'
]
)
        
}
        
category
=
test
.
get
(
'
schedules
-
component
'
attributes
[
'
unittest_category
'
]
)
        
if
category
in
INCLUSIVE_COMPONENTS
:
            
schedules
=
[
category
]
        
else
:
            
schedules
=
[
category
platform_family
(
test
[
'
build
-
platform
'
]
)
]
        
if
test
.
get
(
'
when
'
)
:
            
jobdesc
[
'
when
'
]
=
test
[
'
when
'
]
        
elif
'
optimization
'
in
test
:
            
jobdesc
[
'
optimization
'
]
=
test
[
'
optimization
'
]
        
elif
config
.
params
.
is_try
(
)
:
            
jobdesc
[
'
optimization
'
]
=
{
'
test
-
try
'
:
schedules
}
        
elif
category
in
INCLUSIVE_COMPONENTS
:
            
jobdesc
[
'
optimization
'
]
=
{
'
test
-
inclusive
'
:
schedules
}
        
else
:
            
jobdesc
[
'
optimization
'
]
=
{
'
test
'
:
schedules
}
        
run
=
jobdesc
[
'
run
'
]
=
{
}
        
run
[
'
using
'
]
=
'
mozharness
-
test
'
        
run
[
'
test
'
]
=
test
        
if
'
workdir
'
in
test
:
            
run
[
'
workdir
'
]
=
test
.
pop
(
'
workdir
'
)
        
jobdesc
[
'
worker
-
type
'
]
=
test
.
pop
(
'
worker
-
type
'
)
        
if
test
.
get
(
'
fetches
'
)
:
            
jobdesc
[
'
fetches
'
]
=
test
.
pop
(
'
fetches
'
)
        
yield
jobdesc
def
normpath
(
path
)
:
    
return
path
.
replace
(
'
/
'
'
\
\
'
)
def
get_firefox_version
(
)
:
    
with
open
(
'
browser
/
config
/
version
.
txt
'
'
r
'
)
as
f
:
        
return
f
.
readline
(
)
.
strip
(
)
