"
"
"
These
transforms
construct
a
task
description
to
run
the
given
test
based
on
a
test
description
.
The
implementation
here
is
shared
among
all
test
kinds
but
contains
specific
support
for
how
we
run
tests
in
Gecko
(
via
mozharness
invoked
in
particular
ways
)
.
This
is
a
good
place
to
translate
a
test
-
description
option
such
as
single
-
core
:
true
to
the
implementation
of
that
option
in
a
task
description
(
worker
options
mozharness
commandline
environment
variables
etc
.
)
The
test
description
should
be
fully
formed
by
the
time
it
reaches
these
transforms
and
these
transforms
should
not
embody
any
specific
knowledge
about
what
should
run
where
.
this
is
the
wrong
place
for
special
-
casing
platforms
for
example
-
use
all_tests
.
py
instead
.
"
"
"
from
__future__
import
absolute_import
print_function
unicode_literals
from
taskgraph
.
transforms
.
base
import
TransformSequence
from
taskgraph
.
util
.
schema
import
resolve_keyed_by
from
taskgraph
.
util
.
treeherder
import
split_symbol
join_symbol
from
taskgraph
.
util
.
schema
import
(
    
validate_schema
    
optionally_keyed_by
    
Schema
)
from
voluptuous
import
(
    
Any
    
Optional
    
Required
)
import
copy
import
logging
LINUX_WORKER_TYPES
=
{
    
'
large
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
linux
-
large
'
    
'
xlarge
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
linux
-
xlarge
'
    
'
legacy
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
linux
-
medium
'
    
'
default
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
linux
-
large
'
}
WINDOWS_WORKER_TYPES
=
{
    
'
windows7
-
32
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win7
-
32
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win7
-
32
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win7
-
32
-
hw
'
    
}
    
'
windows7
-
32
-
pgo
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win7
-
32
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win7
-
32
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win7
-
32
-
hw
'
    
}
    
'
windows7
-
32
-
nightly
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win7
-
32
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win7
-
32
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win7
-
32
-
hw
'
    
}
    
'
windows7
-
32
-
devedition
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win7
-
32
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win7
-
32
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win7
-
32
-
hw
'
    
}
    
'
windows7
-
32
-
stylo
-
disabled
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win7
-
32
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win7
-
32
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win7
-
32
-
hw
'
    
}
    
'
windows10
-
64
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
pgo
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
devedition
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
nightly
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
stylo
-
disabled
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win10
-
64
-
hw
'
    
}
    
'
windows10
-
64
-
asan
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win10
-
64
-
hw
'
    
}
    
'
windows8
-
64
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win10
-
64
-
hw
'
    
}
    
'
windows8
-
64
-
pgo
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win10
-
64
-
hw
'
    
}
    
'
windows8
-
64
-
nightly
'
:
{
      
'
virtual
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
'
      
'
virtual
-
with
-
gpu
'
:
'
aws
-
provisioner
-
v1
/
gecko
-
t
-
win10
-
64
-
gpu
'
      
'
hardware
'
:
'
releng
-
hardware
/
gecko
-
t
-
win10
-
64
-
hw
'
    
}
}
MACOSX_WORKER_TYPES
=
{
    
'
macosx64
'
:
'
releng
-
hardware
/
gecko
-
t
-
osx
-
1010
'
}
logger
=
logging
.
getLogger
(
__name__
)
transforms
=
TransformSequence
(
)
test_description_schema
=
Schema
(
{
    
'
description
'
:
basestring
    
Required
(
'
suite
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
basestring
)
    
Optional
(
'
try
-
name
'
)
:
basestring
    
Optional
(
'
tags
'
)
:
{
basestring
:
object
}
    
'
treeherder
-
symbol
'
:
basestring
    
Optional
(
'
treeherder
-
machine
-
platform
'
)
:
basestring
    
Optional
(
'
attributes
'
)
:
{
basestring
:
object
}
    
Optional
(
'
run
-
on
-
projects
'
default
=
'
built
-
projects
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
[
basestring
]
'
built
-
projects
'
)
)
    
Optional
(
'
tier
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
int
'
default
'
)
)
    
Required
(
'
chunks
'
default
=
1
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
int
)
    
Optional
(
'
expires
-
after
'
)
:
basestring
    
Required
(
'
e10s
'
default
=
'
true
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
'
project
'
        
Any
(
bool
'
both
'
)
)
    
Optional
(
'
webrender
'
default
=
False
)
:
bool
    
Required
(
'
instance
-
size
'
default
=
'
default
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
'
default
'
'
large
'
'
xlarge
'
'
legacy
'
)
)
    
Required
(
'
virtualization
'
default
=
'
virtual
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
'
virtual
'
'
virtual
-
with
-
gpu
'
'
hardware
'
)
)
    
Required
(
'
loopback
-
audio
'
default
=
False
)
:
bool
    
Required
(
'
loopback
-
video
'
default
=
False
)
:
bool
    
Optional
(
'
allow
-
software
-
gl
-
layers
'
)
:
bool
    
Required
(
'
docker
-
image
'
default
=
{
'
in
-
tree
'
:
'
desktop1604
-
test
'
}
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
            
basestring
            
{
'
in
-
tree
'
:
basestring
}
            
{
'
indexed
'
:
basestring
}
        
)
    
)
    
Required
(
'
max
-
run
-
time
'
default
=
3600
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
int
)
    
Optional
(
'
retry
-
exit
-
status
'
)
:
int
    
Required
(
'
checkout
'
default
=
False
)
:
bool
    
Optional
(
'
reboot
'
default
=
False
)
:
        
Any
(
False
'
always
'
'
on
-
exception
'
'
on
-
failure
'
)
    
Required
(
'
mozharness
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
{
            
Required
(
'
script
'
)
:
basestring
            
Required
(
'
config
'
)
:
optionally_keyed_by
(
                
'
test
-
platform
'
                
[
basestring
]
)
            
Optional
(
'
mochitest
-
flavor
'
)
:
basestring
            
Optional
(
'
actions
'
)
:
[
basestring
]
            
Required
(
'
extra
-
options
'
default
=
[
]
)
:
optionally_keyed_by
(
                
'
test
-
platform
'
                
[
basestring
]
)
            
Optional
(
'
build
-
artifact
-
name
'
)
:
basestring
            
Required
(
'
tooltool
-
downloads
'
default
=
False
)
:
bool
            
Required
(
'
no
-
read
-
buildbot
-
config
'
default
=
False
)
:
bool
            
Optional
(
'
include
-
blob
-
upload
-
branch
'
)
:
bool
            
Optional
(
'
download
-
symbols
'
)
:
Any
(
True
'
ondemand
'
)
            
Required
(
'
set
-
moz
-
node
-
path
'
default
=
False
)
:
bool
            
Required
(
'
chunked
'
default
=
False
)
:
optionally_keyed_by
(
                
'
test
-
platform
'
                
bool
)
            
Required
(
'
chunking
-
args
'
default
=
'
this
-
chunk
'
)
:
Any
(
                
'
this
-
chunk
'
                
'
test
-
suite
-
suffix
'
            
)
            
Optional
(
'
chunk
-
suffix
'
)
:
basestring
            
Required
(
'
requires
-
signed
-
builds
'
default
=
False
)
:
optionally_keyed_by
(
                
'
test
-
platform
'
                
bool
)
        
}
    
)
    
Optional
(
'
this
-
chunk
'
)
:
int
    
Optional
(
'
os
-
groups
'
default
=
[
]
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
[
basestring
]
)
    
'
build
-
platform
'
:
basestring
    
'
build
-
label
'
:
basestring
    
Optional
(
'
build
-
signing
-
label
'
)
:
basestring
    
'
build
-
attributes
'
:
{
basestring
:
object
}
    
'
test
-
platform
'
:
basestring
    
'
test
-
name
'
:
basestring
    
Optional
(
'
product
'
)
:
basestring
    
Optional
(
'
when
'
)
:
Any
(
{
        
Optional
(
'
files
-
changed
'
)
:
[
basestring
]
    
}
)
    
Optional
(
'
worker
-
type
'
)
:
optionally_keyed_by
(
        
'
test
-
platform
'
        
Any
(
basestring
None
)
    
)
}
required
=
True
)
transforms
.
add
def
validate
(
config
tests
)
:
    
for
test
in
tests
:
        
yield
validate_schema
(
test_description_schema
test
                              
"
In
test
{
!
r
}
:
"
.
format
(
test
[
'
test
-
name
'
]
)
)
transforms
.
add
def
handle_keyed_by_mozharness
(
config
tests
)
:
    
"
"
"
Resolve
a
mozharness
field
if
it
is
keyed
by
something
"
"
"
    
for
test
in
tests
:
        
resolve_keyed_by
(
test
'
mozharness
'
item_name
=
test
[
'
test
-
name
'
]
)
        
yield
test
transforms
.
add
def
set_defaults
(
config
tests
)
:
    
for
test
in
tests
:
        
build_platform
=
test
[
'
build
-
platform
'
]
        
if
build_platform
.
startswith
(
'
android
'
)
:
            
test
[
'
mozharness
'
]
[
'
tooltool
-
downloads
'
]
=
True
            
test
[
'
mozharness
'
]
[
'
actions
'
]
=
[
'
get
-
secrets
'
]
            
test
[
'
e10s
'
]
=
False
            
test
[
'
loopback
-
video
'
]
=
True
        
else
:
            
test
[
'
mozharness
'
]
[
'
set
-
moz
-
node
-
path
'
]
=
True
            
test
.
setdefault
(
'
e10s
'
'
true
'
)
        
if
test
[
'
test
-
platform
'
]
.
startswith
(
'
linux
'
)
and
test
[
'
suite
'
]
!
=
'
talos
'
:
            
test
.
setdefault
(
'
allow
-
software
-
gl
-
layers
'
True
)
        
else
:
            
test
[
'
allow
-
software
-
gl
-
layers
'
]
=
False
        
if
test
[
'
test
-
platform
'
]
.
startswith
(
'
linux64
-
qr
'
)
:
            
test
[
'
webrender
'
]
=
True
        
else
:
            
test
.
setdefault
(
'
webrender
'
False
)
        
test
.
setdefault
(
'
try
-
name
'
test
[
'
test
-
name
'
]
)
        
test
.
setdefault
(
'
os
-
groups
'
[
]
)
        
test
.
setdefault
(
'
chunks
'
1
)
        
test
.
setdefault
(
'
run
-
on
-
projects
'
'
built
-
projects
'
)
        
test
.
setdefault
(
'
instance
-
size
'
'
default
'
)
        
test
.
setdefault
(
'
max
-
run
-
time
'
3600
)
        
test
.
setdefault
(
'
reboot
'
True
)
        
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
        
yield
test
transforms
.
add
def
setup_talos
(
config
tests
)
:
    
"
"
"
Add
options
that
are
specific
to
talos
jobs
(
identified
by
suite
=
talos
)
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
suite
'
]
!
=
'
talos
'
:
            
yield
test
            
continue
        
extra_options
=
test
.
setdefault
(
'
mozharness
'
{
}
)
.
setdefault
(
'
extra
-
options
'
[
]
)
        
extra_options
.
append
(
'
-
-
add
-
option
'
)
        
extra_options
.
append
(
'
-
-
webServer
localhost
'
)
        
extra_options
.
append
(
'
-
-
use
-
talos
-
json
'
)
        
if
config
.
params
[
'
project
'
]
=
=
'
try
'
:
            
extra_options
.
append
(
'
-
-
branch
-
name
'
)
            
extra_options
.
append
(
'
Try
'
)
        
yield
test
transforms
.
add
def
set_target
(
config
tests
)
:
    
for
test
in
tests
:
        
build_platform
=
test
[
'
build
-
platform
'
]
        
if
build_platform
.
startswith
(
'
macosx
'
)
:
            
target
=
'
target
.
dmg
'
        
elif
build_platform
.
startswith
(
'
android
'
)
:
            
if
'
geckoview
'
in
test
[
'
test
-
name
'
]
:
                
target
=
'
geckoview_example
.
apk
'
            
else
:
                
target
=
'
target
.
apk
'
        
elif
build_platform
.
startswith
(
'
win
'
)
:
            
target
=
'
target
.
zip
'
        
else
:
            
target
=
'
target
.
tar
.
bz2
'
        
test
[
'
mozharness
'
]
[
'
build
-
artifact
-
name
'
]
=
'
public
/
build
/
'
+
target
        
yield
test
transforms
.
add
def
set_treeherder_machine_platform
(
config
tests
)
:
    
"
"
"
Set
the
appropriate
task
.
extra
.
treeherder
.
machine
.
platform
"
"
"
    
translation
=
{
        
'
linux64
-
asan
/
opt
'
:
'
linux64
/
asan
'
        
'
linux64
-
pgo
/
opt
'
:
'
linux64
/
pgo
'
        
'
macosx64
/
debug
'
:
'
osx
-
10
-
10
/
debug
'
        
'
macosx64
/
opt
'
:
'
osx
-
10
-
10
/
opt
'
        
'
win64
-
asan
/
opt
'
:
'
windows10
-
64
/
asan
'
        
'
win32
-
pgo
/
opt
'
:
'
windows7
-
32
/
pgo
'
        
'
win64
-
pgo
/
opt
'
:
'
windows10
-
64
/
pgo
'
        
'
android
-
api
-
16
/
debug
'
:
'
android
-
4
-
3
-
armv7
-
api16
/
debug
'
        
'
android
-
api
-
16
/
opt
'
:
'
android
-
4
-
3
-
armv7
-
api16
/
opt
'
        
'
android
-
x86
/
opt
'
:
'
android
-
4
-
2
-
x86
/
opt
'
        
'
android
-
api
-
16
-
gradle
/
opt
'
:
'
android
-
api
-
16
-
gradle
/
opt
'
    
}
    
for
test
in
tests
:
        
if
'
-
stylo
-
disabled
'
in
test
[
'
test
-
platform
'
]
:
            
test
[
'
treeherder
-
machine
-
platform
'
]
=
test
[
'
test
-
platform
'
]
        
else
:
            
test
[
'
treeherder
-
machine
-
platform
'
]
=
translation
.
get
(
                
test
[
'
build
-
platform
'
]
test
[
'
test
-
platform
'
]
)
        
yield
test
transforms
.
add
def
set_tier
(
config
tests
)
:
    
"
"
"
Set
the
tier
based
on
policy
for
all
test
descriptions
that
do
not
    
specify
a
tier
otherwise
.
"
"
"
    
for
test
in
tests
:
        
if
'
tier
'
in
test
:
            
resolve_keyed_by
(
test
'
tier
'
item_name
=
test
[
'
test
-
name
'
]
)
        
if
'
tier
'
not
in
test
or
test
[
'
tier
'
]
=
=
'
default
'
:
            
if
test
[
'
test
-
platform
'
]
in
[
'
linux32
/
opt
'
                                         
'
linux32
/
debug
'
                                         
'
linux32
-
nightly
/
opt
'
                                         
'
linux32
-
devedition
/
opt
'
                                         
'
linux32
-
stylo
-
disabled
/
debug
'
                                         
'
linux32
-
stylo
-
disabled
/
opt
'
                                         
'
linux64
/
opt
'
                                         
'
linux64
-
nightly
/
opt
'
                                         
'
linux64
/
debug
'
                                         
'
linux64
-
pgo
/
opt
'
                                         
'
linux64
-
devedition
/
opt
'
                                         
'
linux64
-
asan
/
opt
'
                                         
'
linux64
-
stylo
-
disabled
/
debug
'
                                         
'
linux64
-
stylo
-
disabled
/
opt
'
                                         
'
windows7
-
32
/
debug
'
                                         
'
windows7
-
32
/
opt
'
                                         
'
windows7
-
32
-
pgo
/
opt
'
                                         
'
windows7
-
32
-
devedition
/
opt
'
                                         
'
windows7
-
32
-
nightly
/
opt
'
                                         
'
windows7
-
32
-
stylo
-
disabled
/
debug
'
                                         
'
windows7
-
32
-
stylo
-
disabled
/
opt
'
                                         
'
windows10
-
64
/
debug
'
                                         
'
windows10
-
64
/
opt
'
                                         
'
windows10
-
64
-
pgo
/
opt
'
                                         
'
windows10
-
64
-
devedition
/
opt
'
                                         
'
windows10
-
64
-
nightly
/
opt
'
                                         
'
windows10
-
64
-
stylo
-
disabled
/
debug
'
                                         
'
windows10
-
64
-
stylo
-
disabled
/
opt
'
                                         
'
macosx64
/
opt
'
                                         
'
macosx64
/
debug
'
                                         
'
macosx64
-
stylo
-
disabled
/
debug
'
                                         
'
macosx64
-
stylo
-
disabled
/
opt
'
                                         
'
android
-
4
.
3
-
arm7
-
api
-
16
/
opt
'
                                         
'
android
-
4
.
3
-
arm7
-
api
-
16
/
debug
'
                                         
'
android
-
4
.
2
-
x86
/
opt
'
]
:
                
test
[
'
tier
'
]
=
1
            
else
:
                
test
[
'
tier
'
]
=
2
        
yield
test
transforms
.
add
def
set_expires_after
(
config
tests
)
:
    
"
"
"
Try
jobs
expire
after
2
weeks
;
everything
else
lasts
1
year
.
This
helps
    
keep
storage
costs
low
.
"
"
"
    
for
test
in
tests
:
        
if
'
expires
-
after
'
not
in
test
:
            
if
config
.
params
[
'
project
'
]
=
=
'
try
'
:
                
test
[
'
expires
-
after
'
]
=
"
14
days
"
            
else
:
                
test
[
'
expires
-
after
'
]
=
"
1
year
"
        
yield
test
transforms
.
add
def
set_download_symbols
(
config
tests
)
:
    
"
"
"
In
general
we
download
symbols
immediately
for
debug
builds
but
only
    
on
demand
for
everything
else
.
ASAN
builds
shouldn
'
t
download
    
symbols
since
they
don
'
t
product
symbol
zips
see
bug
1283879
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
test
-
platform
'
]
.
split
(
'
/
'
)
[
-
1
]
=
=
'
debug
'
:
            
test
[
'
mozharness
'
]
[
'
download
-
symbols
'
]
=
True
        
elif
test
[
'
build
-
platform
'
]
=
=
'
linux64
-
asan
/
opt
'
or
\
                
test
[
'
build
-
platform
'
]
=
=
'
windows10
-
64
-
asan
/
opt
'
:
            
if
'
download
-
symbols
'
in
test
[
'
mozharness
'
]
:
                
del
test
[
'
mozharness
'
]
[
'
download
-
symbols
'
]
        
else
:
            
test
[
'
mozharness
'
]
[
'
download
-
symbols
'
]
=
'
ondemand
'
        
yield
test
transforms
.
add
def
handle_keyed_by
(
config
tests
)
:
    
"
"
"
Resolve
fields
that
can
be
keyed
by
platform
etc
.
"
"
"
    
fields
=
[
        
'
instance
-
size
'
        
'
docker
-
image
'
        
'
max
-
run
-
time
'
        
'
chunks
'
        
'
e10s
'
        
'
suite
'
        
'
run
-
on
-
projects
'
        
'
os
-
groups
'
        
'
mozharness
.
chunked
'
        
'
mozharness
.
config
'
        
'
mozharness
.
extra
-
options
'
        
'
mozharness
.
requires
-
signed
-
builds
'
        
'
worker
-
type
'
    
]
    
for
test
in
tests
:
        
for
field
in
fields
:
            
resolve_keyed_by
(
test
field
item_name
=
test
[
'
test
-
name
'
]
                             
project
=
config
.
params
[
'
project
'
]
)
        
yield
test
transforms
.
add
def
enable_code_coverage
(
config
tests
)
:
    
"
"
"
Enable
code
coverage
for
the
linux64
-
ccov
/
opt
&
linux64
-
jsdcov
/
opt
build
-
platforms
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
build
-
platform
'
]
=
=
'
linux64
-
ccov
/
opt
'
and
\
                
not
test
[
'
test
-
name
'
]
.
startswith
(
'
test
-
verify
'
)
:
            
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
.
append
(
'
-
-
code
-
coverage
'
)
            
test
[
'
when
'
]
=
{
}
            
test
[
'
instance
-
size
'
]
=
'
xlarge
'
            
test
[
'
run
-
on
-
projects
'
]
=
[
'
mozilla
-
central
'
]
            
if
test
[
'
test
-
name
'
]
.
startswith
(
'
talos
'
)
:
                
test
[
'
max
-
run
-
time
'
]
=
7200
                
test
[
'
docker
-
image
'
]
=
{
"
in
-
tree
"
:
"
desktop1604
-
test
"
}
                
test
[
'
mozharness
'
]
[
'
config
'
]
=
[
'
talos
/
linux64_config_taskcluster
.
py
'
]
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
add
-
option
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
cycles
1
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
add
-
option
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
tppagecycles
1
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
add
-
option
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
no
-
upload
-
results
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
add
-
option
'
)
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
tptimeout
15000
'
)
        
elif
test
[
'
build
-
platform
'
]
=
=
'
linux64
-
jsdcov
/
opt
'
:
            
test
[
'
run
-
on
-
projects
'
]
=
[
'
mozilla
-
central
'
]
        
yield
test
transforms
.
add
def
handle_run_on_projects
(
config
tests
)
:
    
"
"
"
Handle
translating
built
-
projects
appropriately
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
run
-
on
-
projects
'
]
=
=
'
built
-
projects
'
:
            
test
[
'
run
-
on
-
projects
'
]
=
test
[
'
build
-
attributes
'
]
.
get
(
'
run_on_projects
'
[
'
all
'
]
)
        
yield
test
transforms
.
add
def
split_e10s
(
config
tests
)
:
    
for
test
in
tests
:
        
e10s
=
test
[
'
e10s
'
]
        
test
.
setdefault
(
'
attributes
'
{
}
)
        
test
[
'
e10s
'
]
=
False
        
test
[
'
attributes
'
]
[
'
e10s
'
]
=
False
        
if
e10s
=
=
'
both
'
:
            
yield
copy
.
deepcopy
(
test
)
            
e10s
=
True
        
if
e10s
:
            
test
[
'
test
-
name
'
]
+
=
'
-
e10s
'
            
test
[
'
try
-
name
'
]
+
=
'
-
e10s
'
            
test
[
'
e10s
'
]
=
True
            
test
[
'
attributes
'
]
[
'
e10s
'
]
=
True
            
group
symbol
=
split_symbol
(
test
[
'
treeherder
-
symbol
'
]
)
            
if
group
!
=
'
?
'
:
                
group
+
=
'
-
e10s
'
            
test
[
'
treeherder
-
symbol
'
]
=
join_symbol
(
group
symbol
)
            
if
test
[
'
suite
'
]
=
=
'
talos
'
:
                
for
i
option
in
enumerate
(
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
)
:
                    
if
option
.
startswith
(
'
-
-
suite
=
'
)
:
                        
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
[
i
]
+
=
'
-
e10s
'
            
else
:
                
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
e10s
'
)
        
yield
test
transforms
.
add
def
split_chunks
(
config
tests
)
:
    
"
"
"
Based
on
the
'
chunks
'
key
split
tests
up
into
chunks
by
duplicating
    
them
and
assigning
'
this
-
chunk
'
appropriately
and
updating
the
treeherder
    
symbol
.
"
"
"
    
for
test
in
tests
:
        
if
test
[
'
chunks
'
]
=
=
1
:
            
test
[
'
this
-
chunk
'
]
=
1
            
yield
test
            
continue
        
if
test
[
'
test
-
platform
'
]
=
=
'
windows7
-
32
/
debug
'
and
test
[
'
test
-
name
'
]
=
=
'
reftest
'
:
            
test
[
'
chunks
'
]
=
32
        
for
this_chunk
in
range
(
1
test
[
'
chunks
'
]
+
1
)
:
            
chunked
=
copy
.
deepcopy
(
test
)
            
chunked
[
'
this
-
chunk
'
]
=
this_chunk
            
group
symbol
=
split_symbol
(
chunked
[
'
treeherder
-
symbol
'
]
)
            
symbol
+
=
str
(
this_chunk
)
            
chunked
[
'
treeherder
-
symbol
'
]
=
join_symbol
(
group
symbol
)
            
yield
chunked
transforms
.
add
def
allow_software_gl_layers
(
config
tests
)
:
    
"
"
"
    
Handle
the
"
allow
-
software
-
gl
-
layers
"
property
for
platforms
where
it
    
applies
.
    
"
"
"
    
for
test
in
tests
:
        
if
test
.
get
(
'
allow
-
software
-
gl
-
layers
'
)
:
            
assert
test
[
'
instance
-
size
'
]
!
=
'
legacy
'
\
                
'
Software
GL
layers
on
a
legacy
instance
is
disallowed
(
bug
1296086
)
.
'
            
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
\
                              
.
append
(
"
-
-
allow
-
software
-
gl
-
layers
"
)
        
yield
test
transforms
.
add
def
enable_webrender
(
config
tests
)
:
    
"
"
"
    
Handle
the
"
webrender
"
property
by
passing
a
flag
to
mozharness
if
it
is
    
enabled
.
    
"
"
"
    
for
test
in
tests
:
        
if
test
.
get
(
'
webrender
'
)
:
            
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
\
                              
.
append
(
"
-
-
enable
-
webrender
"
)
        
yield
test
transforms
.
add
def
set_retry_exit_status
(
config
tests
)
:
    
"
"
"
Set
the
retry
exit
status
to
TBPL_RETRY
the
value
returned
by
mozharness
       
scripts
to
indicate
a
transient
failure
that
should
be
retried
.
"
"
"
    
for
test
in
tests
:
        
test
[
'
retry
-
exit
-
status
'
]
=
4
        
yield
test
transforms
.
add
def
set_profile
(
config
tests
)
:
    
"
"
"
Set
profiling
mode
for
tests
.
"
"
"
    
profile
=
None
    
if
config
.
params
[
'
try_mode
'
]
=
=
'
try_option_syntax
'
:
        
profile
=
config
.
params
[
'
try_options
'
]
[
'
profile
'
]
    
for
test
in
tests
:
        
if
profile
and
test
[
'
suite
'
]
=
=
'
talos
'
:
            
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
append
(
'
-
-
geckoProfile
'
)
        
yield
test
transforms
.
add
def
set_tag
(
config
tests
)
:
    
"
"
"
Set
test
for
a
specific
tag
.
"
"
"
    
tag
=
None
    
if
config
.
params
[
'
try_mode
'
]
=
=
'
try_option_syntax
'
:
        
tag
=
config
.
params
[
'
try_options
'
]
[
'
tag
'
]
    
for
test
in
tests
:
        
if
tag
:
            
test
[
'
mozharness
'
]
[
'
extra
-
options
'
]
.
extend
(
[
'
-
-
tag
'
tag
]
)
        
yield
test
transforms
.
add
def
set_test_type
(
config
tests
)
:
    
for
test
in
tests
:
        
for
test_type
in
[
'
mochitest
'
'
reftest
'
]
:
            
if
test_type
in
test
[
'
suite
'
]
and
'
web
-
platform
'
not
in
test
[
'
suite
'
]
:
                
test
.
setdefault
(
'
tags
'
{
}
)
[
'
test
-
type
'
]
=
test_type
        
yield
test
transforms
.
add
def
disable_stylo
(
config
tests
)
:
    
"
"
"
    
Disable
Stylo
for
all
jobs
on
-
stylo
-
disabled
platforms
.
    
"
"
"
    
for
test
in
tests
:
        
if
'
-
stylo
-
disabled
'
not
in
test
[
'
test
-
platform
'
]
:
            
yield
test
            
continue
        
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
.
append
(
'
-
-
disable
-
stylo
'
)
        
yield
test
transforms
.
add
def
single_stylo_traversal_tests
(
config
tests
)
:
    
"
"
"
Enable
single
traversal
for
all
tests
on
the
sequential
Stylo
platform
.
"
"
"
    
for
test
in
tests
:
        
if
not
test
[
'
test
-
platform
'
]
.
startswith
(
'
linux64
-
stylo
-
sequential
/
'
)
:
            
yield
test
            
continue
        
test
[
'
mozharness
'
]
.
setdefault
(
'
extra
-
options
'
[
]
)
\
                          
.
append
(
'
-
-
single
-
stylo
-
traversal
'
)
        
yield
test
transforms
.
add
def
set_worker_type
(
config
tests
)
:
    
"
"
"
Set
the
worker
type
based
on
the
test
platform
.
"
"
"
    
for
test
in
tests
:
        
test_platform
=
test
[
'
test
-
platform
'
]
        
try_options
=
config
.
params
[
'
try_options
'
]
if
config
.
params
[
'
try_options
'
]
else
{
}
        
if
test
.
get
(
'
worker
-
type
'
)
:
            
pass
        
elif
test_platform
.
startswith
(
'
macosx
'
)
:
            
test
[
'
worker
-
type
'
]
=
MACOSX_WORKER_TYPES
[
'
macosx64
'
]
        
elif
test_platform
.
startswith
(
'
win
'
)
:
            
if
test
.
get
(
'
suite
'
'
'
)
=
=
'
talos
'
and
\
                    
not
any
(
'
taskcluster
'
in
cfg
for
cfg
in
test
[
'
mozharness
'
]
[
'
config
'
]
)
:
                
test
[
'
worker
-
type
'
]
=
'
buildbot
-
bridge
/
buildbot
-
bridge
'
            
else
:
                
test
[
'
worker
-
type
'
]
=
\
                    
WINDOWS_WORKER_TYPES
[
test_platform
.
split
(
'
/
'
)
[
0
]
]
[
test
[
'
virtualization
'
]
]
        
elif
test_platform
.
startswith
(
'
linux
'
)
or
test_platform
.
startswith
(
'
android
'
)
:
            
if
test
.
get
(
'
suite
'
'
'
)
=
=
'
talos
'
and
test
[
'
build
-
platform
'
]
!
=
'
linux64
-
ccov
/
opt
'
:
                
if
try_options
.
get
(
'
taskcluster_worker
'
)
:
                    
test
[
'
worker
-
type
'
]
=
'
releng
-
hardware
/
gecko
-
t
-
linux
-
talos
'
                
else
:
                    
test
[
'
worker
-
type
'
]
=
'
buildbot
-
bridge
/
buildbot
-
bridge
'
            
else
:
                
test
[
'
worker
-
type
'
]
=
LINUX_WORKER_TYPES
[
test
[
'
instance
-
size
'
]
]
        
else
:
            
raise
Exception
(
"
unknown
test_platform
{
}
"
.
format
(
test_platform
)
)
        
yield
test
transforms
.
add
def
skip_win10_hardware
(
config
tests
)
:
    
"
"
"
Windows
10
hardware
isn
'
t
ready
yet
don
'
t
even
bother
scheduling
    
unless
we
'
re
on
try
"
"
"
    
for
test
in
tests
:
        
if
'
releng
-
hardware
/
gecko
-
t
-
win10
-
64
-
hw
'
not
in
test
[
'
worker
-
type
'
]
:
            
yield
test
        
if
config
.
params
=
=
'
try
'
:
            
yield
test
transforms
.
add
def
make_job_description
(
config
tests
)
:
    
"
"
"
Convert
*
test
*
descriptions
to
*
job
*
descriptions
(
input
to
    
taskgraph
.
transforms
.
job
)
"
"
"
    
for
test
in
tests
:
        
label
=
'
{
}
-
{
}
-
{
}
'
.
format
(
config
.
kind
test
[
'
test
-
platform
'
]
test
[
'
test
-
name
'
]
)
        
if
test
[
'
chunks
'
]
>
1
:
            
label
+
=
'
-
{
}
'
.
format
(
test
[
'
this
-
chunk
'
]
)
        
build_label
=
test
[
'
build
-
label
'
]
        
try_name
=
test
[
'
try
-
name
'
]
        
if
test
[
'
suite
'
]
=
=
'
talos
'
:
            
attr_try_name
=
'
talos_try_name
'
        
else
:
            
attr_try_name
=
'
unittest_try_name
'
        
attr_build_platform
attr_build_type
=
test
[
'
build
-
platform
'
]
.
split
(
'
/
'
1
)
        
suite
=
test
[
'
suite
'
]
        
if
'
/
'
in
suite
:
            
suite
flavor
=
suite
.
split
(
'
/
'
1
)
        
else
:
            
flavor
=
suite
        
attributes
=
test
.
get
(
'
attributes
'
{
}
)
        
attributes
.
update
(
{
            
'
build_platform
'
:
attr_build_platform
            
'
build_type
'
:
attr_build_type
            
'
test_platform
'
:
test
[
'
test
-
platform
'
]
            
'
test_chunk
'
:
str
(
test
[
'
this
-
chunk
'
]
)
            
'
unittest_suite
'
:
suite
            
'
unittest_flavor
'
:
flavor
            
attr_try_name
:
try_name
        
}
)
        
jobdesc
=
{
}
        
name
=
'
{
}
-
{
}
'
.
format
(
test
[
'
test
-
platform
'
]
test
[
'
test
-
name
'
]
)
        
jobdesc
[
'
name
'
]
=
name
        
jobdesc
[
'
label
'
]
=
label
        
jobdesc
[
'
description
'
]
=
test
[
'
description
'
]
        
jobdesc
[
'
attributes
'
]
=
attributes
        
jobdesc
[
'
dependencies
'
]
=
{
'
build
'
:
build_label
}
        
if
test
[
'
mozharness
'
]
[
'
requires
-
signed
-
builds
'
]
is
True
:
            
jobdesc
[
'
dependencies
'
]
[
'
build
-
signing
'
]
=
test
[
'
build
-
signing
-
label
'
]
        
jobdesc
[
'
expires
-
after
'
]
=
test
[
'
expires
-
after
'
]
        
jobdesc
[
'
routes
'
]
=
[
]
        
jobdesc
[
'
run
-
on
-
projects
'
]
=
test
[
'
run
-
on
-
projects
'
]
        
jobdesc
[
'
scopes
'
]
=
[
]
        
jobdesc
[
'
tags
'
]
=
test
.
get
(
'
tags
'
{
}
)
        
jobdesc
[
'
extra
'
]
=
{
            
'
chunks
'
:
{
                
'
current
'
:
test
[
'
this
-
chunk
'
]
                
'
total
'
:
test
[
'
chunks
'
]
            
}
            
'
suite
'
:
{
                
'
name
'
:
suite
                
'
flavor
'
:
flavor
            
}
        
}
        
jobdesc
[
'
treeherder
'
]
=
{
            
'
symbol
'
:
test
[
'
treeherder
-
symbol
'
]
            
'
kind
'
:
'
test
'
            
'
tier
'
:
test
[
'
tier
'
]
            
'
platform
'
:
test
.
get
(
'
treeherder
-
machine
-
platform
'
test
[
'
build
-
platform
'
]
)
        
}
        
if
config
.
params
[
'
project
'
]
=
=
'
try
'
:
            
jobdesc
[
'
when
'
]
=
test
.
get
(
'
when
'
{
}
)
        
else
:
            
jobdesc
[
'
optimization
'
]
=
{
'
seta
'
:
None
}
        
run
=
jobdesc
[
'
run
'
]
=
{
}
        
run
[
'
using
'
]
=
'
mozharness
-
test
'
        
run
[
'
test
'
]
=
test
        
jobdesc
[
'
worker
-
type
'
]
=
test
.
pop
(
'
worker
-
type
'
)
        
yield
jobdesc
def
normpath
(
path
)
:
    
return
path
.
replace
(
'
/
'
'
\
\
'
)
def
get_firefox_version
(
)
:
    
with
open
(
'
browser
/
config
/
version
.
txt
'
'
r
'
)
as
f
:
        
return
f
.
readline
(
)
.
strip
(
)
