"
"
"
Transform
the
signing
task
into
an
actual
task
description
.
"
"
"
from
__future__
import
absolute_import
print_function
unicode_literals
from
taskgraph
.
loader
.
single_dep
import
schema
from
taskgraph
.
transforms
.
base
import
TransformSequence
from
taskgraph
.
util
.
attributes
import
copy_attributes_from_dependent_job
from
taskgraph
.
util
.
schema
import
taskref_or_string
from
taskgraph
.
util
.
scriptworker
import
(
    
get_signing_cert_scope_per_platform
    
get_worker_type_for_scope
)
from
taskgraph
.
transforms
.
task
import
task_description_schema
from
voluptuous
import
Required
Optional
transforms
=
TransformSequence
(
)
signing_description_schema
=
schema
.
extend
(
{
    
Required
(
'
upstream
-
artifacts
'
)
:
[
{
        
Required
(
'
taskId
'
)
:
taskref_or_string
        
Required
(
'
taskType
'
)
:
basestring
        
Required
(
'
paths
'
)
:
[
basestring
]
        
Required
(
'
formats
'
)
:
[
basestring
]
    
}
]
    
Required
(
'
depname
'
)
:
basestring
    
Optional
(
'
label
'
)
:
basestring
    
Optional
(
'
treeherder
'
)
:
task_description_schema
[
'
treeherder
'
]
    
Optional
(
'
routes
'
)
:
[
basestring
]
    
Optional
(
'
shipping
-
phase
'
)
:
task_description_schema
[
'
shipping
-
phase
'
]
    
Optional
(
'
shipping
-
product
'
)
:
task_description_schema
[
'
shipping
-
product
'
]
    
Optional
(
'
max
-
run
-
time
'
)
:
int
    
Optional
(
'
extra
'
)
:
{
basestring
:
object
}
}
)
transforms
.
add
def
set_defaults
(
config
jobs
)
:
    
for
job
in
jobs
:
        
job
.
setdefault
(
'
depname
'
'
build
'
)
        
yield
job
transforms
.
add_validate
(
signing_description_schema
)
transforms
.
add
def
make_task_description
(
config
jobs
)
:
    
for
job
in
jobs
:
        
dep_job
=
job
[
'
primary
-
dependency
'
]
        
attributes
=
dep_job
.
attributes
        
signing_format_scopes
=
[
]
        
formats
=
set
(
[
]
)
        
for
artifacts
in
job
[
'
upstream
-
artifacts
'
]
:
            
for
f
in
artifacts
[
'
formats
'
]
:
                
formats
.
add
(
f
)
        
is_nightly
=
dep_job
.
attributes
.
get
(
            
'
nightly
'
dep_job
.
attributes
.
get
(
'
shippable
'
False
)
)
        
build_platform
=
dep_job
.
attributes
.
get
(
'
build_platform
'
)
        
treeherder
=
None
        
if
'
partner
'
not
in
config
.
kind
and
'
eme
-
free
'
not
in
config
.
kind
:
            
treeherder
=
job
.
get
(
'
treeherder
'
{
}
)
            
dep_th_platform
=
dep_job
.
task
.
get
(
'
extra
'
{
}
)
.
get
(
                
'
treeherder
'
{
}
)
.
get
(
'
machine
'
{
}
)
.
get
(
'
platform
'
'
'
)
            
build_type
=
dep_job
.
attributes
.
get
(
'
build_type
'
)
            
treeherder
.
setdefault
(
'
platform
'
_generate_treeherder_platform
(
                
dep_th_platform
build_platform
build_type
            
)
)
            
treeherder
.
setdefault
(
                
'
tier
'
                
dep_job
.
task
.
get
(
'
extra
'
{
}
)
.
get
(
'
treeherder
'
{
}
)
.
get
(
'
tier
'
1
)
            
)
            
treeherder
.
setdefault
(
'
symbol
'
_generate_treeherder_symbol
(
                
dep_job
.
task
.
get
(
'
extra
'
{
}
)
.
get
(
'
treeherder
'
{
}
)
.
get
(
'
symbol
'
)
            
)
)
            
treeherder
.
setdefault
(
'
kind
'
'
build
'
)
        
label
=
job
[
'
label
'
]
        
description
=
(
            
"
Initial
Signing
for
locale
'
{
locale
}
'
for
build
'
"
            
"
{
build_platform
}
/
{
build_type
}
'
"
.
format
(
                
locale
=
attributes
.
get
(
'
locale
'
'
en
-
US
'
)
                
build_platform
=
build_platform
                
build_type
=
attributes
.
get
(
'
build_type
'
)
            
)
        
)
        
attributes
=
copy_attributes_from_dependent_job
(
dep_job
)
        
attributes
[
'
signed
'
]
=
True
        
if
dep_job
.
attributes
.
get
(
'
chunk_locales
'
)
:
            
attributes
[
'
chunk_locales
'
]
=
dep_job
.
attributes
.
get
(
'
chunk_locales
'
)
        
signing_cert_scope
=
get_signing_cert_scope_per_platform
(
            
build_platform
is_nightly
config
        
)
        
worker_type
=
get_worker_type_for_scope
(
config
signing_cert_scope
)
        
task
=
{
            
'
label
'
:
label
            
'
description
'
:
description
            
'
worker
-
type
'
:
worker_type
            
'
worker
'
:
{
'
implementation
'
:
'
scriptworker
-
signing
'
                       
'
upstream
-
artifacts
'
:
job
[
'
upstream
-
artifacts
'
]
                       
'
max
-
run
-
time
'
:
job
.
get
(
'
max
-
run
-
time
'
3600
)
}
            
'
scopes
'
:
[
signing_cert_scope
]
+
signing_format_scopes
            
'
dependencies
'
:
{
job
[
'
depname
'
]
:
dep_job
.
label
}
            
'
attributes
'
:
attributes
            
'
run
-
on
-
projects
'
:
dep_job
.
attributes
.
get
(
'
run_on_projects
'
)
            
'
optimization
'
:
dep_job
.
optimization
            
'
routes
'
:
job
.
get
(
'
routes
'
[
]
)
            
'
shipping
-
product
'
:
job
.
get
(
'
shipping
-
product
'
)
            
'
shipping
-
phase
'
:
job
.
get
(
'
shipping
-
phase
'
)
        
}
        
if
treeherder
:
            
task
[
'
treeherder
'
]
=
treeherder
        
if
job
.
get
(
'
extra
'
)
:
            
task
[
'
extra
'
]
=
job
[
'
extra
'
]
        
yield
task
def
_generate_treeherder_platform
(
dep_th_platform
build_platform
build_type
)
:
    
if
'
-
pgo
'
in
build_platform
:
        
actual_build_type
=
'
pgo
'
    
elif
'
-
ccov
'
in
build_platform
:
        
actual_build_type
=
'
ccov
'
    
else
:
        
actual_build_type
=
build_type
    
return
'
{
}
/
{
}
'
.
format
(
dep_th_platform
actual_build_type
)
def
_generate_treeherder_symbol
(
build_symbol
)
:
    
symbol
=
build_symbol
+
'
s
'
    
return
symbol
