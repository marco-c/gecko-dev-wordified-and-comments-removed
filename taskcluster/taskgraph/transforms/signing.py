"
"
"
Transform
the
signing
task
into
an
actual
task
description
.
"
"
"
from
__future__
import
absolute_import
print_function
unicode_literals
from
taskgraph
.
transforms
.
base
import
TransformSequence
from
taskgraph
.
util
.
attributes
import
copy_attributes_from_dependent_job
from
taskgraph
.
util
.
schema
import
validate_schema
Schema
from
taskgraph
.
util
.
scriptworker
import
(
    
get_signing_cert_scope_per_platform
    
get_worker_type_for_scope
)
from
taskgraph
.
transforms
.
task
import
task_description_schema
from
voluptuous
import
Any
Required
Optional
task_description_schema
=
{
str
(
k
)
:
v
for
k
v
in
task_description_schema
.
schema
.
iteritems
(
)
}
transforms
=
TransformSequence
(
)
taskref_or_string
=
Any
(
    
basestring
    
{
Required
(
'
task
-
reference
'
)
:
basestring
}
)
signing_description_schema
=
Schema
(
{
    
Required
(
'
dependent
-
task
'
)
:
object
    
Required
(
'
upstream
-
artifacts
'
)
:
[
{
        
Required
(
'
taskId
'
)
:
taskref_or_string
        
Required
(
'
taskType
'
)
:
basestring
        
Required
(
'
paths
'
)
:
[
basestring
]
        
Required
(
'
formats
'
)
:
[
basestring
]
    
}
]
    
Required
(
'
depname
'
)
:
basestring
    
Optional
(
'
label
'
)
:
basestring
    
Optional
(
'
treeherder
'
)
:
task_description_schema
[
'
treeherder
'
]
    
Optional
(
'
routes
'
)
:
[
basestring
]
    
Optional
(
'
shipping
-
phase
'
)
:
task_description_schema
[
'
shipping
-
phase
'
]
    
Optional
(
'
shipping
-
product
'
)
:
task_description_schema
[
'
shipping
-
product
'
]
}
)
transforms
.
add
def
set_defaults
(
config
jobs
)
:
    
for
job
in
jobs
:
        
job
.
setdefault
(
'
depname
'
'
build
'
)
        
yield
job
transforms
.
add
def
validate
(
config
jobs
)
:
    
for
job
in
jobs
:
        
label
=
job
.
get
(
'
dependent
-
task
'
object
)
.
__dict__
.
get
(
'
label
'
'
?
no
-
label
?
'
)
        
validate_schema
(
            
signing_description_schema
job
            
"
In
signing
(
{
!
r
}
kind
)
task
for
{
!
r
}
:
"
.
format
(
config
.
kind
label
)
)
        
yield
job
transforms
.
add
def
make_task_description
(
config
jobs
)
:
    
for
job
in
jobs
:
        
dep_job
=
job
[
'
dependent
-
task
'
]
        
attributes
=
dep_job
.
attributes
        
signing_format_scopes
=
[
]
        
formats
=
set
(
[
]
)
        
for
artifacts
in
job
[
'
upstream
-
artifacts
'
]
:
            
for
f
in
artifacts
[
'
formats
'
]
:
                
formats
.
add
(
f
)
        
for
format
in
formats
:
            
signing_format_scopes
.
append
(
"
project
:
releng
:
signing
:
format
:
{
}
"
.
format
(
format
)
)
        
treeherder
=
job
.
get
(
'
treeherder
'
{
}
)
        
is_nightly
=
dep_job
.
attributes
.
get
(
'
nightly
'
False
)
        
treeherder
.
setdefault
(
'
symbol
'
_generate_treeherder_symbol
(
is_nightly
)
)
        
dep_th_platform
=
dep_job
.
task
.
get
(
'
extra
'
{
}
)
.
get
(
            
'
treeherder
'
{
}
)
.
get
(
'
machine
'
{
}
)
.
get
(
'
platform
'
'
'
)
        
build_type
=
dep_job
.
attributes
.
get
(
'
build_type
'
)
        
build_platform
=
dep_job
.
attributes
.
get
(
'
build_platform
'
)
        
treeherder
.
setdefault
(
'
platform
'
_generate_treeherder_platform
(
            
dep_th_platform
build_platform
build_type
        
)
)
        
treeherder
.
setdefault
(
'
tier
'
1
)
        
treeherder
.
setdefault
(
'
kind
'
'
build
'
)
        
label
=
job
[
'
label
'
]
        
description
=
(
            
"
Initial
Signing
for
locale
'
{
locale
}
'
for
build
'
"
            
"
{
build_platform
}
/
{
build_type
}
'
"
.
format
(
                
locale
=
attributes
.
get
(
'
locale
'
'
en
-
US
'
)
                
build_platform
=
attributes
.
get
(
'
build_platform
'
)
                
build_type
=
attributes
.
get
(
'
build_type
'
)
            
)
        
)
        
attributes
=
copy_attributes_from_dependent_job
(
dep_job
)
        
attributes
[
'
signed
'
]
=
True
        
if
dep_job
.
attributes
.
get
(
'
chunk_locales
'
)
:
            
attributes
[
'
chunk_locales
'
]
=
dep_job
.
attributes
.
get
(
'
chunk_locales
'
)
        
signing_cert_scope
=
get_signing_cert_scope_per_platform
(
            
dep_job
.
attributes
.
get
(
'
build_platform
'
)
is_nightly
config
        
)
        
task
=
{
            
'
label
'
:
label
            
'
description
'
:
description
            
'
worker
-
type
'
:
get_worker_type_for_scope
(
config
signing_cert_scope
)
            
'
worker
'
:
{
'
implementation
'
:
'
scriptworker
-
signing
'
                       
'
upstream
-
artifacts
'
:
job
[
'
upstream
-
artifacts
'
]
                       
'
max
-
run
-
time
'
:
3600
}
            
'
scopes
'
:
[
signing_cert_scope
]
+
signing_format_scopes
            
'
dependencies
'
:
{
job
[
'
depname
'
]
:
dep_job
.
label
}
            
'
attributes
'
:
attributes
            
'
run
-
on
-
projects
'
:
dep_job
.
attributes
.
get
(
'
run_on_projects
'
)
            
'
treeherder
'
:
treeherder
            
'
routes
'
:
job
.
get
(
'
routes
'
[
]
)
        
}
        
yield
task
def
_generate_treeherder_platform
(
dep_th_platform
build_platform
build_type
)
:
    
actual_build_type
=
'
pgo
'
if
'
-
pgo
'
in
build_platform
else
build_type
    
return
'
{
}
/
{
}
'
.
format
(
dep_th_platform
actual_build_type
)
def
_generate_treeherder_symbol
(
is_nightly
)
:
    
return
'
tc
(
Ns
)
'
if
is_nightly
else
'
tc
(
Bs
)
'
