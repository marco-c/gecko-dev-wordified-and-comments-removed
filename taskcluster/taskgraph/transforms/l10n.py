"
"
"
Do
transforms
specific
to
l10n
kind
"
"
"
from
__future__
import
absolute_import
print_function
unicode_literals
import
copy
import
json
from
mozbuild
.
chunkify
import
chunkify
from
taskgraph
.
transforms
.
base
import
(
    
TransformSequence
)
from
taskgraph
.
util
.
schema
import
(
    
validate_schema
    
optionally_keyed_by
    
resolve_keyed_by
    
Schema
)
from
taskgraph
.
util
.
treeherder
import
split_symbol
join_symbol
from
taskgraph
.
transforms
.
job
import
job_description_schema
from
taskgraph
.
transforms
.
task
import
task_description_schema
from
voluptuous
import
(
    
Any
    
Optional
    
Required
)
def
_by_platform
(
arg
)
:
    
return
optionally_keyed_by
(
'
build
-
platform
'
arg
)
taskref_or_string
=
Any
(
    
basestring
    
{
Required
(
'
task
-
reference
'
)
:
basestring
}
)
job_description_schema
=
{
str
(
k
)
:
v
for
k
v
in
job_description_schema
.
schema
.
iteritems
(
)
}
task_description_schema
=
{
str
(
k
)
:
v
for
k
v
in
task_description_schema
.
schema
.
iteritems
(
)
}
l10n_description_schema
=
Schema
(
{
    
Required
(
'
name
'
)
:
basestring
    
Required
(
'
build
-
platform
'
)
:
basestring
    
Required
(
'
run
-
time
'
)
:
_by_platform
(
int
)
    
Required
(
'
ignore
-
locales
'
)
:
_by_platform
(
[
basestring
]
)
    
Required
(
'
mozharness
'
)
:
{
        
Required
(
'
script
'
)
:
_by_platform
(
basestring
)
        
Required
(
'
config
'
)
:
_by_platform
(
[
basestring
]
)
        
Optional
(
'
config
-
paths
'
)
:
[
basestring
]
        
Required
(
'
options
'
)
:
_by_platform
(
[
basestring
]
)
        
Required
(
'
actions
'
)
:
_by_platform
(
[
basestring
]
)
        
Required
(
'
comm
-
checkout
'
default
=
False
)
:
bool
    
}
    
Optional
(
'
index
'
)
:
{
        
Required
(
'
product
'
)
:
_by_platform
(
basestring
)
        
Required
(
'
job
-
name
'
)
:
_by_platform
(
basestring
)
        
Optional
(
'
type
'
)
:
basestring
    
}
    
Required
(
'
description
'
)
:
_by_platform
(
basestring
)
    
Optional
(
'
run
-
on
-
projects
'
)
:
job_description_schema
[
'
run
-
on
-
projects
'
]
    
Required
(
'
dependent
-
task
'
)
:
object
    
Required
(
'
worker
-
type
'
)
:
_by_platform
(
basestring
)
    
Required
(
'
locales
-
file
'
)
:
_by_platform
(
basestring
)
    
Required
(
'
tooltool
'
)
:
_by_platform
(
Any
(
'
internal
'
'
public
'
)
)
    
Required
(
'
docker
-
image
'
)
:
_by_platform
(
Any
(
        
{
'
in
-
tree
'
:
basestring
}
        
None
    
)
)
    
Optional
(
'
toolchains
'
)
:
_by_platform
(
[
basestring
]
)
    
Required
(
'
secrets
'
default
=
False
)
:
_by_platform
(
Any
(
bool
[
basestring
]
)
)
    
Required
(
'
treeherder
'
)
:
{
        
Required
(
'
platform
'
)
:
_by_platform
(
basestring
)
        
Required
(
'
symbol
'
)
:
basestring
        
Required
(
'
tier
'
)
:
_by_platform
(
int
)
    
}
    
Optional
(
'
env
'
)
:
_by_platform
(
{
basestring
:
taskref_or_string
}
)
    
Optional
(
'
locales
-
per
-
chunk
'
)
:
_by_platform
(
int
)
    
Optional
(
'
dependencies
'
)
:
{
basestring
:
basestring
}
    
Optional
(
'
when
'
)
:
{
        
'
files
-
changed
'
:
[
basestring
]
    
}
    
Optional
(
'
attributes
'
)
:
job_description_schema
[
'
attributes
'
]
    
Optional
(
'
extra
'
)
:
job_description_schema
[
'
extra
'
]
    
Optional
(
'
shipping
-
product
'
)
:
task_description_schema
[
'
shipping
-
product
'
]
    
Optional
(
'
shipping
-
phase
'
)
:
task_description_schema
[
'
shipping
-
phase
'
]
    
Optional
(
'
notifications
'
)
:
task_description_schema
[
'
notifications
'
]
}
)
transforms
=
TransformSequence
(
)
def
_parse_locales_file
(
locales_file
platform
)
:
    
"
"
"
Parse
the
passed
locales
file
for
a
list
of
locales
.
    
"
"
"
    
locales
=
[
]
    
with
open
(
locales_file
mode
=
'
r
'
)
as
f
:
        
if
locales_file
.
endswith
(
'
json
'
)
:
            
all_locales
=
json
.
load
(
f
)
            
locales
=
{
                
locale
:
data
[
'
revision
'
]
                
for
locale
data
in
all_locales
.
items
(
)
                
if
platform
in
data
[
'
platforms
'
]
            
}
        
else
:
            
all_locales
=
f
.
read
(
)
.
split
(
)
            
locales
=
{
locale
:
'
default
'
for
locale
in
all_locales
}
    
return
locales
def
_remove_locales
(
locales
to_remove
=
None
)
:
    
return
{
        
locale
:
revision
for
locale
revision
in
locales
.
items
(
)
if
locale
not
in
to_remove
    
}
transforms
.
add
def
setup_name
(
config
jobs
)
:
    
for
job
in
jobs
:
        
dep
=
job
[
'
dependent
-
task
'
]
        
if
dep
.
attributes
.
get
(
'
nightly
'
)
:
            
job
[
'
name
'
]
=
job
.
get
(
'
name
'
                                  
dep
.
task
[
'
metadata
'
]
[
'
name
'
]
[
                                    
len
(
dep
.
kind
)
+
1
:
]
)
        
else
:
            
name
jobtype
=
dep
.
task
[
'
metadata
'
]
[
'
name
'
]
[
len
(
dep
.
kind
)
+
1
:
]
.
split
(
'
/
'
)
            
job
[
'
name
'
]
=
"
{
}
-
l10n
/
{
}
"
.
format
(
name
jobtype
)
        
yield
job
transforms
.
add
def
copy_in_useful_magic
(
config
jobs
)
:
    
for
job
in
jobs
:
        
dep
=
job
[
'
dependent
-
task
'
]
        
attributes
=
job
.
setdefault
(
'
attributes
'
{
}
)
        
job
[
'
build
-
platform
'
]
=
dep
.
attributes
.
get
(
"
build_platform
"
)
        
attributes
[
'
build_type
'
]
=
dep
.
attributes
.
get
(
"
build_type
"
)
        
if
dep
.
attributes
.
get
(
"
nightly
"
)
:
            
attributes
[
'
nightly
'
]
=
dep
.
attributes
.
get
(
"
nightly
"
)
        
else
:
            
job
[
'
build
-
platform
'
]
=
"
{
}
-
l10n
"
.
format
(
job
[
'
build
-
platform
'
]
)
        
attributes
[
'
build_platform
'
]
=
job
[
'
build
-
platform
'
]
        
yield
job
transforms
.
add
def
validate_early
(
config
jobs
)
:
    
for
job
in
jobs
:
        
validate_schema
(
l10n_description_schema
job
                        
"
In
job
{
!
r
}
:
"
.
format
(
job
.
get
(
'
name
'
'
unknown
'
)
)
)
        
yield
job
transforms
.
add
def
setup_nightly_dependency
(
config
jobs
)
:
    
"
"
"
Sets
up
a
task
dependency
to
the
signing
job
this
relates
to
"
"
"
    
for
job
in
jobs
:
        
if
not
job
[
'
attributes
'
]
.
get
(
'
nightly
'
)
:
            
yield
job
            
continue
        
job
[
'
dependencies
'
]
=
{
'
unsigned
-
build
'
:
job
[
'
dependent
-
task
'
]
.
label
}
        
if
job
[
'
attributes
'
]
[
'
build_platform
'
]
.
startswith
(
'
win
'
)
or
\
                
job
[
'
attributes
'
]
[
'
build_platform
'
]
.
startswith
(
'
linux
'
)
:
            
job
[
'
dependencies
'
]
.
update
(
{
                
'
signed
-
build
'
:
'
build
-
signing
-
{
}
'
.
format
(
job
[
'
name
'
]
)
            
}
)
        
if
job
[
'
attributes
'
]
[
'
build_platform
'
]
.
startswith
(
'
macosx
'
)
:
            
job
[
'
dependencies
'
]
.
update
(
{
                
'
repackage
'
:
'
repackage
-
{
}
'
.
format
(
job
[
'
name
'
]
)
            
}
)
        
if
job
[
'
attributes
'
]
[
'
build_platform
'
]
.
startswith
(
'
win
'
)
:
            
job
[
'
dependencies
'
]
.
update
(
{
                
'
repackage
-
signed
'
:
'
repackage
-
signing
-
{
}
'
.
format
(
job
[
'
name
'
]
)
            
}
)
        
yield
job
transforms
.
add
def
handle_keyed_by
(
config
jobs
)
:
    
"
"
"
Resolve
fields
that
can
be
keyed
by
platform
etc
.
"
"
"
    
fields
=
[
        
"
locales
-
file
"
        
"
locales
-
per
-
chunk
"
        
"
worker
-
type
"
        
"
description
"
        
"
run
-
time
"
        
"
docker
-
image
"
        
"
secrets
"
        
"
toolchains
"
        
"
tooltool
"
        
"
env
"
        
"
ignore
-
locales
"
        
"
mozharness
.
config
"
        
"
mozharness
.
options
"
        
"
mozharness
.
actions
"
        
"
mozharness
.
script
"
        
"
treeherder
.
tier
"
        
"
treeherder
.
platform
"
        
"
index
.
product
"
        
"
index
.
job
-
name
"
        
"
when
.
files
-
changed
"
    
]
    
for
job
in
jobs
:
        
job
=
copy
.
deepcopy
(
job
)
        
for
field
in
fields
:
            
resolve_keyed_by
(
item
=
job
field
=
field
item_name
=
job
[
'
name
'
]
)
        
yield
job
transforms
.
add
def
all_locales_attribute
(
config
jobs
)
:
    
for
job
in
jobs
:
        
locales_platform
=
job
[
'
attributes
'
]
[
'
build_platform
'
]
.
replace
(
"
-
nightly
"
"
"
)
        
locales_with_changesets
=
_parse_locales_file
(
job
[
"
locales
-
file
"
]
                                                      
platform
=
locales_platform
)
        
locales_with_changesets
=
_remove_locales
(
locales_with_changesets
                                                  
to_remove
=
job
[
'
ignore
-
locales
'
]
)
        
locales
=
sorted
(
locales_with_changesets
.
keys
(
)
)
        
attributes
=
job
.
setdefault
(
'
attributes
'
{
}
)
        
attributes
[
"
all_locales
"
]
=
locales
        
attributes
[
"
all_locales_with_changesets
"
]
=
locales_with_changesets
        
if
job
.
get
(
'
shipping
-
product
'
)
:
            
attributes
[
"
shipping_product
"
]
=
job
[
'
shipping
-
product
'
]
        
yield
job
transforms
.
add
def
chunk_locales
(
config
jobs
)
:
    
"
"
"
Utilizes
chunking
for
l10n
stuff
"
"
"
    
for
job
in
jobs
:
        
locales_per_chunk
=
job
.
get
(
'
locales
-
per
-
chunk
'
)
        
locales_with_changesets
=
job
[
'
attributes
'
]
[
'
all_locales_with_changesets
'
]
        
if
locales_per_chunk
:
            
chunks
remainder
=
divmod
(
len
(
locales_with_changesets
)
locales_per_chunk
)
            
if
remainder
:
                
chunks
=
int
(
chunks
+
1
)
            
for
this_chunk
in
range
(
1
chunks
+
1
)
:
                
chunked
=
copy
.
deepcopy
(
job
)
                
chunked
[
'
name
'
]
=
chunked
[
'
name
'
]
.
replace
(
                    
'
/
'
'
-
{
}
/
'
.
format
(
this_chunk
)
1
                
)
                
chunked
[
'
mozharness
'
]
[
'
options
'
]
=
chunked
[
'
mozharness
'
]
.
get
(
'
options
'
[
]
)
                
locales_with_changesets_as_list
=
sorted
(
locales_with_changesets
.
items
(
)
)
                
chunked_locales
=
chunkify
(
locales_with_changesets_as_list
this_chunk
chunks
)
                
chunked
[
'
mozharness
'
]
[
'
options
'
]
.
extend
(
[
                    
'
locale
=
{
}
:
{
}
'
.
format
(
locale
changeset
)
                    
for
locale
changeset
in
chunked_locales
                
]
)
                
chunked
[
'
attributes
'
]
[
'
l10n_chunk
'
]
=
str
(
this_chunk
)
                
chunked
[
'
attributes
'
]
[
'
chunk_locales
'
]
=
[
locale
for
locale
_
in
chunked_locales
]
                
group
symbol
=
split_symbol
(
                    
chunked
.
get
(
'
treeherder
'
{
}
)
.
get
(
'
symbol
'
'
'
)
)
                
symbol
+
=
str
(
this_chunk
)
                
chunked
[
'
treeherder
'
]
[
'
symbol
'
]
=
join_symbol
(
group
symbol
)
                
yield
chunked
        
else
:
            
job
[
'
mozharness
'
]
[
'
options
'
]
=
job
[
'
mozharness
'
]
.
get
(
'
options
'
[
]
)
            
job
[
'
mozharness
'
]
[
'
options
'
]
.
extend
(
[
                
'
locale
=
{
}
:
{
}
'
.
format
(
locale
changeset
)
                
for
locale
changeset
in
sorted
(
locales_with_changesets
.
items
(
)
)
            
]
)
            
yield
job
transforms
.
add
def
mh_config_replace_project
(
config
jobs
)
:
    
"
"
"
Replaces
{
project
}
in
mh
config
entries
with
the
current
project
"
"
"
    
for
job
in
jobs
:
        
job
[
'
mozharness
'
]
[
'
config
'
]
=
map
(
            
lambda
x
:
x
.
format
(
project
=
config
.
params
[
'
project
'
]
)
            
job
[
'
mozharness
'
]
[
'
config
'
]
            
)
        
yield
job
transforms
.
add
def
mh_options_replace_project
(
config
jobs
)
:
    
"
"
"
Replaces
{
project
}
in
mh
option
entries
with
the
current
project
"
"
"
    
for
job
in
jobs
:
        
job
[
'
mozharness
'
]
[
'
options
'
]
=
map
(
            
lambda
x
:
x
.
format
(
project
=
config
.
params
[
'
project
'
]
)
            
job
[
'
mozharness
'
]
[
'
options
'
]
            
)
        
yield
job
transforms
.
add
def
validate_again
(
config
jobs
)
:
    
for
job
in
jobs
:
        
validate_schema
(
l10n_description_schema
job
                        
"
In
job
{
!
r
}
:
"
.
format
(
job
.
get
(
'
name
'
'
unknown
'
)
)
)
        
yield
job
transforms
.
add
def
make_job_description
(
config
jobs
)
:
    
for
job
in
jobs
:
        
job
[
'
mozharness
'
]
.
update
(
{
            
'
using
'
:
'
mozharness
'
            
'
job
-
script
'
:
'
taskcluster
/
scripts
/
builder
/
build
-
l10n
.
sh
'
            
'
secrets
'
:
job
[
'
secrets
'
]
        
}
)
        
job_description
=
{
            
'
name
'
:
job
[
'
name
'
]
            
'
worker
-
type
'
:
job
[
'
worker
-
type
'
]
            
'
description
'
:
job
[
'
description
'
]
            
'
run
'
:
job
[
'
mozharness
'
]
            
'
attributes
'
:
job
[
'
attributes
'
]
            
'
treeherder
'
:
{
                
'
kind
'
:
'
build
'
                
'
tier
'
:
job
[
'
treeherder
'
]
[
'
tier
'
]
                
'
symbol
'
:
job
[
'
treeherder
'
]
[
'
symbol
'
]
                
'
platform
'
:
job
[
'
treeherder
'
]
[
'
platform
'
]
            
}
            
'
run
-
on
-
projects
'
:
job
.
get
(
'
run
-
on
-
projects
'
)
if
job
.
get
(
'
run
-
on
-
projects
'
)
else
[
]
        
}
        
if
job
.
get
(
'
extra
'
)
:
            
job_description
[
'
extra
'
]
=
job
[
'
extra
'
]
        
if
job
[
'
worker
-
type
'
]
.
endswith
(
"
-
b
-
win2012
"
)
:
            
job_description
[
'
worker
'
]
=
{
                
'
os
'
:
'
windows
'
                
'
max
-
run
-
time
'
:
7200
                
'
chain
-
of
-
trust
'
:
True
            
}
            
job_description
[
'
run
'
]
[
'
use
-
simple
-
package
'
]
=
False
            
job_description
[
'
run
'
]
[
'
use
-
magic
-
mh
-
args
'
]
=
False
        
else
:
            
job_description
[
'
worker
'
]
=
{
                
'
max
-
run
-
time
'
:
job
[
'
run
-
time
'
]
                
'
chain
-
of
-
trust
'
:
True
            
}
            
job_description
[
'
run
'
]
[
'
tooltool
-
downloads
'
]
=
job
[
'
tooltool
'
]
            
job_description
[
'
run
'
]
[
'
need
-
xvfb
'
]
=
True
        
if
job
.
get
(
'
docker
-
image
'
)
:
            
job_description
[
'
worker
'
]
[
'
docker
-
image
'
]
=
job
[
'
docker
-
image
'
]
        
if
job
.
get
(
'
toolchains
'
)
:
            
job_description
[
'
toolchains
'
]
=
job
[
'
toolchains
'
]
        
if
job
.
get
(
'
index
'
)
:
            
job_description
[
'
index
'
]
=
{
                
'
product
'
:
job
[
'
index
'
]
[
'
product
'
]
                
'
job
-
name
'
:
job
[
'
index
'
]
[
'
job
-
name
'
]
                
'
type
'
:
job
[
'
index
'
]
.
get
(
'
type
'
'
generic
'
)
            
}
        
if
job
.
get
(
'
dependencies
'
)
:
            
job_description
[
'
dependencies
'
]
=
job
[
'
dependencies
'
]
        
if
job
.
get
(
'
env
'
)
:
            
job_description
[
'
worker
'
]
[
'
env
'
]
=
job
[
'
env
'
]
        
if
job
.
get
(
'
when
'
{
}
)
.
get
(
'
files
-
changed
'
)
:
            
job_description
.
setdefault
(
'
when
'
{
}
)
            
job_description
[
'
when
'
]
[
'
files
-
changed
'
]
=
\
                
[
job
[
'
locales
-
file
'
]
]
+
job
[
'
when
'
]
[
'
files
-
changed
'
]
        
if
'
shipping
-
phase
'
in
job
:
            
job_description
[
'
shipping
-
phase
'
]
=
job
[
'
shipping
-
phase
'
]
        
if
'
shipping
-
product
'
in
job
:
            
job_description
[
'
shipping
-
product
'
]
=
job
[
'
shipping
-
product
'
]
        
if
'
notifications
'
in
job
:
            
job_description
[
'
notifications
'
]
=
job
[
'
notifications
'
]
        
yield
job_description
