"
"
"
Support
for
running
jobs
that
are
invoked
via
the
run
-
task
script
.
"
"
"
from
__future__
import
absolute_import
print_function
unicode_literals
from
taskgraph
.
transforms
.
task
import
taskref_or_string
from
taskgraph
.
transforms
.
job
import
run_job_using
from
taskgraph
.
util
.
schema
import
Schema
from
taskgraph
.
transforms
.
job
.
common
import
support_vcs_checkout
from
voluptuous
import
Required
Any
run_task_schema
=
Schema
(
{
    
Required
(
'
using
'
)
:
'
run
-
task
'
    
Required
(
'
cache
-
dotcache
'
)
:
bool
    
Required
(
'
checkout
'
)
:
bool
    
Required
(
'
sparse
-
profile
'
)
:
Any
(
basestring
None
)
    
Required
(
'
comm
-
checkout
'
)
:
bool
    
Required
(
'
command
'
)
:
Any
(
[
taskref_or_string
]
taskref_or_string
)
    
Required
(
'
workdir
'
)
:
basestring
}
)
def
common_setup
(
config
job
taskdesc
command
)
:
    
run
=
job
[
'
run
'
]
    
if
run
[
'
checkout
'
]
:
        
support_vcs_checkout
(
config
job
taskdesc
                             
sparse
=
bool
(
run
[
'
sparse
-
profile
'
]
)
)
        
command
.
append
(
'
-
-
vcs
-
checkout
=
{
}
'
.
format
(
taskdesc
[
'
worker
'
]
[
'
env
'
]
[
'
GECKO_PATH
'
]
)
)
    
if
run
[
'
sparse
-
profile
'
]
:
        
command
.
append
(
'
-
-
sparse
-
profile
=
build
/
sparse
-
profiles
/
%
s
'
%
                       
run
[
'
sparse
-
profile
'
]
)
    
taskdesc
[
'
worker
'
]
.
setdefault
(
'
env
'
{
}
)
[
'
MOZ_SCM_LEVEL
'
]
=
config
.
params
[
'
level
'
]
worker_defaults
=
{
    
'
cache
-
dotcache
'
:
False
    
'
checkout
'
:
True
    
'
comm
-
checkout
'
:
False
    
'
sparse
-
profile
'
:
None
}
def
run_task_url
(
config
)
:
    
return
'
{
}
/
raw
-
file
/
{
}
/
taskcluster
/
scripts
/
run
-
task
'
.
format
(
                
config
.
params
[
'
head_repository
'
]
config
.
params
[
'
head_rev
'
]
)
run_job_using
(
"
docker
-
worker
"
"
run
-
task
"
schema
=
run_task_schema
defaults
=
worker_defaults
)
def
docker_worker_run_task
(
config
job
taskdesc
)
:
    
run
=
job
[
'
run
'
]
    
worker
=
taskdesc
[
'
worker
'
]
=
job
[
'
worker
'
]
    
command
=
[
'
/
builds
/
worker
/
bin
/
run
-
task
'
]
    
common_setup
(
config
job
taskdesc
command
)
    
if
run
.
get
(
'
cache
-
dotcache
'
)
:
        
worker
[
'
caches
'
]
.
append
(
{
            
'
type
'
:
'
persistent
'
            
'
name
'
:
'
level
-
{
level
}
-
{
project
}
-
dotcache
'
.
format
(
*
*
config
.
params
)
            
'
mount
-
point
'
:
'
{
workdir
}
/
.
cache
'
.
format
(
*
*
run
)
            
'
skip
-
untrusted
'
:
True
        
}
)
    
run_command
=
run
[
'
command
'
]
    
if
isinstance
(
run_command
(
basestring
dict
)
)
:
        
run_command
=
[
'
bash
'
'
-
cx
'
run_command
]
    
if
run
[
'
comm
-
checkout
'
]
:
        
command
.
append
(
'
-
-
comm
-
checkout
=
{
workdir
}
/
checkouts
/
gecko
/
comm
'
.
format
(
*
*
run
)
)
    
command
.
append
(
'
-
-
fetch
-
hgfingerprint
'
)
    
command
.
append
(
'
-
-
'
)
    
command
.
extend
(
run_command
)
    
worker
[
'
command
'
]
=
command
run_job_using
(
"
native
-
engine
"
"
run
-
task
"
schema
=
run_task_schema
defaults
=
worker_defaults
)
def
native_engine_run_task
(
config
job
taskdesc
)
:
    
run
=
job
[
'
run
'
]
    
worker
=
taskdesc
[
'
worker
'
]
=
job
[
'
worker
'
]
    
command
=
[
'
.
/
run
-
task
'
]
    
common_setup
(
config
job
taskdesc
command
)
    
worker
[
'
context
'
]
=
run_task_url
(
config
)
    
if
run
.
get
(
'
cache
-
dotcache
'
)
:
        
raise
Exception
(
"
No
cache
support
on
native
-
worker
;
can
'
t
use
cache
-
dotcache
"
)
    
run_command
=
run
[
'
command
'
]
    
if
isinstance
(
run_command
basestring
)
:
        
run_command
=
[
'
bash
'
'
-
cx
'
run_command
]
    
command
.
append
(
'
-
-
'
)
    
command
.
extend
(
run_command
)
    
worker
[
'
command
'
]
=
command
run_job_using
(
"
generic
-
worker
"
"
run
-
task
"
schema
=
run_task_schema
defaults
=
worker_defaults
)
def
generic_worker_run_task
(
config
job
taskdesc
)
:
    
run
=
job
[
'
run
'
]
    
worker
=
taskdesc
[
'
worker
'
]
=
job
[
'
worker
'
]
    
is_win
=
worker
[
'
os
'
]
=
=
'
windows
'
    
is_mac
=
worker
[
'
os
'
]
=
=
'
macosx
'
    
if
is_win
:
        
command
=
[
'
C
:
/
mozilla
-
build
/
python3
/
python3
.
exe
'
'
run
-
task
'
]
    
elif
is_mac
:
        
command
=
[
'
/
tools
/
python36
/
bin
/
python3
.
6
'
'
run
-
task
'
]
    
else
:
        
command
=
[
'
.
/
run
-
task
'
]
    
common_setup
(
config
job
taskdesc
command
)
    
worker
.
setdefault
(
'
mounts
'
[
]
)
    
if
run
.
get
(
'
cache
-
dotcache
'
)
:
        
worker
[
'
mounts
'
]
.
append
(
{
            
'
cache
-
name
'
:
'
level
-
{
level
}
-
{
project
}
-
dotcache
'
.
format
(
*
*
config
.
params
)
            
'
directory
'
:
'
{
workdir
}
/
.
cache
'
.
format
(
*
*
run
)
        
}
)
    
worker
[
'
mounts
'
]
.
append
(
{
        
'
content
'
:
{
            
'
url
'
:
run_task_url
(
config
)
        
}
        
'
file
'
:
'
.
/
run
-
task
'
    
}
)
    
run_command
=
run
[
'
command
'
]
    
if
isinstance
(
run_command
basestring
)
:
        
if
is_win
:
            
run_command
=
'
"
{
}
"
'
.
format
(
run_command
)
        
run_command
=
[
'
bash
'
'
-
cx
'
run_command
]
    
command
.
append
(
'
-
-
'
)
    
command
.
extend
(
run_command
)
    
if
is_win
:
        
worker
[
'
command
'
]
=
[
'
'
.
join
(
command
)
]
    
else
:
        
worker
[
'
command
'
]
=
[
            
[
'
chmod
'
'
+
x
'
'
run
-
task
'
]
            
command
        
]
