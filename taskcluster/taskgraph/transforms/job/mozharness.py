"
"
"
Support
for
running
jobs
via
mozharness
.
Ideally
most
stuff
gets
run
this
way
and
certainly
anything
using
mozharness
should
use
this
approach
.
"
"
"
from
__future__
import
absolute_import
print_function
unicode_literals
import
json
from
textwrap
import
dedent
from
taskgraph
.
util
.
schema
import
Schema
from
voluptuous
import
Required
Optional
Any
from
voluptuous
.
validators
import
Match
from
taskgraph
.
transforms
.
job
import
run_job_using
from
taskgraph
.
transforms
.
job
.
common
import
(
    
docker_worker_add_workspace_cache
    
setup_secrets
    
docker_worker_add_artifacts
    
docker_worker_add_tooltool
    
generic_worker_add_artifacts
    
generic_worker_hg_commands
    
support_vcs_checkout
)
mozharness_run_schema
=
Schema
(
{
    
Required
(
'
using
'
)
:
'
mozharness
'
    
Required
(
'
script
'
)
:
basestring
    
Optional
(
'
config
-
paths
'
)
:
[
basestring
]
    
Required
(
'
config
'
)
:
[
basestring
]
    
Optional
(
'
actions
'
)
:
[
Match
(
        
'
^
[
a
-
z0
-
9
-
]
+
'
        
"
actions
must
be
-
seperated
alphanumeric
strings
"
    
)
]
    
Optional
(
'
options
'
)
:
[
Match
(
        
'
^
[
a
-
z0
-
9
-
]
+
(
=
[
^
]
+
)
?
'
        
"
options
must
be
-
seperated
alphanumeric
strings
(
with
optional
argument
)
"
    
)
]
    
Optional
(
'
custom
-
build
-
variant
-
cfg
'
)
:
basestring
    
Optional
(
'
extra
-
config
'
)
:
dict
    
Optional
(
'
extra
-
workspace
-
cache
-
key
'
)
:
basestring
    
Required
(
'
tooltool
-
downloads
'
)
:
Any
(
        
False
        
'
public
'
        
'
internal
'
    
)
    
Required
(
'
secrets
'
)
:
Any
(
bool
[
basestring
]
)
    
Required
(
'
taskcluster
-
proxy
'
)
:
bool
    
Required
(
'
need
-
xvfb
'
)
:
bool
    
Required
(
'
keep
-
artifacts
'
)
:
bool
    
Optional
(
'
job
-
script
'
)
:
basestring
    
Required
(
'
requires
-
signed
-
builds
'
)
:
bool
    
Optional
(
'
use
-
caches
'
)
:
bool
    
Required
(
'
use
-
simple
-
package
'
)
:
bool
    
Required
(
'
use
-
magic
-
mh
-
args
'
)
:
bool
    
Required
(
'
comm
-
checkout
'
)
:
bool
    
Required
(
'
workdir
'
)
:
basestring
}
)
mozharness_defaults
=
{
    
'
tooltool
-
downloads
'
:
False
    
'
secrets
'
:
False
    
'
taskcluster
-
proxy
'
:
False
    
'
need
-
xvfb
'
:
False
    
'
keep
-
artifacts
'
:
True
    
'
requires
-
signed
-
builds
'
:
False
    
'
use
-
simple
-
package
'
:
True
    
'
use
-
magic
-
mh
-
args
'
:
True
    
'
comm
-
checkout
'
:
False
}
run_job_using
(
"
docker
-
worker
"
"
mozharness
"
schema
=
mozharness_run_schema
               
defaults
=
mozharness_defaults
)
def
mozharness_on_docker_worker_setup
(
config
job
taskdesc
)
:
    
run
=
job
[
'
run
'
]
    
worker
=
taskdesc
[
'
worker
'
]
    
worker
[
'
implementation
'
]
=
job
[
'
worker
'
]
[
'
implementation
'
]
    
if
not
run
[
'
use
-
simple
-
package
'
]
:
        
raise
NotImplementedError
(
"
Simple
packaging
cannot
be
disabled
via
"
                                  
"
'
use
-
simple
-
package
'
on
docker
-
workers
"
)
    
if
not
run
[
'
use
-
magic
-
mh
-
args
'
]
:
        
raise
NotImplementedError
(
"
Cannot
disabled
mh
magic
arg
passing
via
"
                                  
"
'
use
-
magic
-
mh
-
args
'
on
docker
-
workers
"
)
    
taskdesc
[
'
worker
'
]
.
setdefault
(
'
docker
-
image
'
{
'
in
-
tree
'
:
'
debian7
-
amd64
-
build
'
}
)
    
taskdesc
[
'
worker
'
]
.
setdefault
(
'
artifacts
'
[
]
)
.
append
(
{
        
'
name
'
:
'
public
/
logs
'
        
'
path
'
:
'
{
workdir
}
/
logs
/
'
.
format
(
*
*
run
)
        
'
type
'
:
'
directory
'
    
}
)
    
worker
[
'
taskcluster
-
proxy
'
]
=
run
.
get
(
'
taskcluster
-
proxy
'
)
    
docker_worker_add_artifacts
(
config
job
taskdesc
)
    
docker_worker_add_workspace_cache
(
config
job
taskdesc
                                      
extra
=
run
.
get
(
'
extra
-
workspace
-
cache
-
key
'
)
)
    
support_vcs_checkout
(
config
job
taskdesc
)
    
env
=
worker
.
setdefault
(
'
env
'
{
}
)
    
env
.
update
(
{
        
'
GECKO_PATH
'
:
'
{
workdir
}
/
workspace
/
build
/
src
'
.
format
(
*
*
run
)
        
'
MOZHARNESS_CONFIG
'
:
'
'
.
join
(
run
[
'
config
'
]
)
        
'
MOZHARNESS_SCRIPT
'
:
run
[
'
script
'
]
        
'
MH_BRANCH
'
:
config
.
params
[
'
project
'
]
        
'
MOZ_SOURCE_CHANGESET
'
:
env
[
'
GECKO_HEAD_REV
'
]
        
'
MH_BUILD_POOL
'
:
'
taskcluster
'
        
'
MOZ_BUILD_DATE
'
:
config
.
params
[
'
moz_build_date
'
]
        
'
MOZ_SCM_LEVEL
'
:
config
.
params
[
'
level
'
]
        
'
MOZ_AUTOMATION
'
:
'
1
'
        
'
PYTHONUNBUFFERED
'
:
'
1
'
    
}
)
    
if
'
actions
'
in
run
:
        
env
[
'
MOZHARNESS_ACTIONS
'
]
=
'
'
.
join
(
run
[
'
actions
'
]
)
    
if
'
options
'
in
run
:
        
env
[
'
MOZHARNESS_OPTIONS
'
]
=
'
'
.
join
(
run
[
'
options
'
]
)
    
if
'
config
-
paths
'
in
run
:
        
env
[
'
MOZHARNESS_CONFIG_PATHS
'
]
=
'
'
.
join
(
run
[
'
config
-
paths
'
]
)
    
if
'
custom
-
build
-
variant
-
cfg
'
in
run
:
        
env
[
'
MH_CUSTOM_BUILD_VARIANT_CFG
'
]
=
run
[
'
custom
-
build
-
variant
-
cfg
'
]
    
if
'
extra
-
config
'
in
run
:
        
env
[
'
EXTRA_MOZHARNESS_CONFIG
'
]
=
json
.
dumps
(
run
[
'
extra
-
config
'
]
)
    
if
'
job
-
script
'
in
run
:
        
env
[
'
JOB_SCRIPT
'
]
=
run
[
'
job
-
script
'
]
    
if
config
.
params
.
is_try
(
)
:
        
env
[
'
TRY_COMMIT_MSG
'
]
=
config
.
params
[
'
message
'
]
    
if
run
[
'
comm
-
checkout
'
]
:
        
env
[
'
MOZ_SOURCE_CHANGESET
'
]
=
env
[
'
COMM_HEAD_REV
'
]
    
if
not
run
[
'
keep
-
artifacts
'
]
:
        
env
[
'
DIST_TARGET_UPLOADS
'
]
=
'
'
        
env
[
'
DIST_UPLOADS
'
]
=
'
'
    
if
run
[
'
need
-
xvfb
'
]
:
        
env
[
'
NEED_XVFB
'
]
=
'
true
'
    
else
:
        
env
[
'
NEED_XVFB
'
]
=
'
false
'
    
if
run
[
'
tooltool
-
downloads
'
]
:
        
internal
=
run
[
'
tooltool
-
downloads
'
]
=
=
'
internal
'
        
docker_worker_add_tooltool
(
config
job
taskdesc
internal
=
internal
)
    
worker
[
'
retry
-
exit
-
status
'
]
=
[
4
]
    
setup_secrets
(
config
job
taskdesc
)
    
command
=
[
        
'
{
workdir
}
/
bin
/
run
-
task
'
.
format
(
*
*
run
)
        
'
-
-
gecko
-
checkout
'
env
[
'
GECKO_PATH
'
]
    
]
    
if
run
[
'
comm
-
checkout
'
]
:
        
command
.
append
(
'
-
-
comm
-
checkout
=
{
workdir
}
/
workspace
/
build
/
src
/
comm
'
.
format
(
*
*
run
)
)
    
command
+
=
[
        
'
-
-
'
        
'
{
workdir
}
/
workspace
/
build
/
src
/
{
script
}
'
.
format
(
            
workdir
=
run
[
'
workdir
'
]
            
script
=
run
.
get
(
'
job
-
script
'
'
taskcluster
/
scripts
/
builder
/
build
-
linux
.
sh
'
)
        
)
    
]
    
worker
[
'
command
'
]
=
command
run_job_using
(
"
generic
-
worker
"
"
mozharness
"
schema
=
mozharness_run_schema
               
defaults
=
mozharness_defaults
)
def
mozharness_on_generic_worker
(
config
job
taskdesc
)
:
    
assert
job
[
'
worker
'
]
[
'
os
'
]
=
=
'
windows
'
'
only
supports
windows
right
now
'
    
run
=
job
[
'
run
'
]
    
invalid
=
[
]
    
for
prop
in
[
'
tooltool
-
downloads
'
'
taskcluster
-
proxy
'
'
need
-
xvfb
'
]
:
        
if
prop
in
run
and
run
[
prop
]
:
            
invalid
.
append
(
prop
)
    
if
not
run
.
get
(
'
keep
-
artifacts
'
True
)
:
        
invalid
.
append
(
'
keep
-
artifacts
'
)
    
if
invalid
:
        
raise
Exception
(
"
Jobs
run
using
mozharness
on
Windows
do
not
support
properties
"
+
                        
'
'
.
join
(
invalid
)
)
    
worker
=
taskdesc
[
'
worker
'
]
    
setup_secrets
(
config
job
taskdesc
)
    
taskdesc
[
'
worker
'
]
.
setdefault
(
'
artifacts
'
[
]
)
.
append
(
{
        
'
name
'
:
'
public
/
logs
'
        
'
path
'
:
'
logs
'
        
'
type
'
:
'
directory
'
    
}
)
    
if
not
worker
.
get
(
'
skip
-
artifacts
'
False
)
:
        
generic_worker_add_artifacts
(
config
job
taskdesc
)
    
support_vcs_checkout
(
config
job
taskdesc
)
    
env
=
worker
[
'
env
'
]
    
env
.
update
(
{
        
'
MOZ_BUILD_DATE
'
:
config
.
params
[
'
moz_build_date
'
]
        
'
MOZ_SCM_LEVEL
'
:
config
.
params
[
'
level
'
]
        
'
MOZ_AUTOMATION
'
:
'
1
'
        
'
MH_BRANCH
'
:
config
.
params
[
'
project
'
]
        
'
MOZ_SOURCE_CHANGESET
'
:
env
[
'
GECKO_HEAD_REV
'
]
    
}
)
    
if
run
[
'
use
-
simple
-
package
'
]
:
        
env
.
update
(
{
'
MOZ_SIMPLE_PACKAGE_NAME
'
:
'
target
'
}
)
    
if
'
extra
-
config
'
in
run
:
        
env
[
'
EXTRA_MOZHARNESS_CONFIG
'
]
=
json
.
dumps
(
run
[
'
extra
-
config
'
]
)
    
if
config
.
params
.
is_try
(
)
:
        
env
[
'
TRY_COMMIT_MSG
'
]
=
config
.
params
[
'
message
'
]
or
'
no
commit
message
'
    
if
run
[
'
comm
-
checkout
'
]
:
        
env
[
'
MOZ_SOURCE_CHANGESET
'
]
=
env
[
'
COMM_HEAD_REV
'
]
    
if
not
job
[
'
attributes
'
]
[
'
build_platform
'
]
.
startswith
(
'
win
'
)
:
        
raise
Exception
(
            
"
Task
generation
for
mozharness
build
jobs
currently
only
supported
on
Windows
"
        
)
    
mh_command
=
[
r
'
c
:
\
mozilla
-
build
\
python
\
python
.
exe
'
]
    
mh_command
.
append
(
'
\
\
'
.
join
(
[
r
'
.
\
build
\
src
\
testing
'
run
[
'
script
'
]
.
replace
(
'
/
'
'
\
\
'
)
]
)
)
    
if
'
config
-
paths
'
in
run
:
        
for
path
in
run
[
'
config
-
paths
'
]
:
            
mh_command
.
append
(
r
'
-
-
extra
-
config
-
path
'
                              
r
'
.
\
build
\
src
\
{
}
'
.
format
(
path
.
replace
(
'
/
'
'
\
\
'
)
)
)
    
for
cfg
in
run
[
'
config
'
]
:
        
mh_command
.
append
(
'
-
-
config
'
+
cfg
.
replace
(
'
/
'
'
\
\
'
)
)
    
if
run
[
'
use
-
magic
-
mh
-
args
'
]
:
        
mh_command
.
append
(
'
-
-
branch
'
+
config
.
params
[
'
project
'
]
)
    
mh_command
.
append
(
r
'
-
-
work
-
dir
%
cd
:
Z
:
=
z
:
%
\
build
'
)
    
for
action
in
run
.
get
(
'
actions
'
[
]
)
:
        
mh_command
.
append
(
'
-
-
'
+
action
)
    
for
option
in
run
.
get
(
'
options
'
[
]
)
:
        
mh_command
.
append
(
'
-
-
'
+
option
)
    
if
run
.
get
(
'
custom
-
build
-
variant
-
cfg
'
)
:
        
mh_command
.
append
(
'
-
-
custom
-
build
-
variant
'
)
        
mh_command
.
append
(
run
[
'
custom
-
build
-
variant
-
cfg
'
]
)
    
hg_commands
=
generic_worker_hg_commands
(
        
base_repo
=
env
[
'
GECKO_BASE_REPOSITORY
'
]
        
head_repo
=
env
[
'
GECKO_HEAD_REPOSITORY
'
]
        
head_rev
=
env
[
'
GECKO_HEAD_REV
'
]
        
path
=
r
'
.
\
build
\
src
'
    
)
    
if
run
[
'
comm
-
checkout
'
]
:
        
hg_commands
.
extend
(
            
generic_worker_hg_commands
(
                
base_repo
=
env
[
'
COMM_BASE_REPOSITORY
'
]
                
head_repo
=
env
[
'
COMM_HEAD_REPOSITORY
'
]
                
head_rev
=
env
[
'
COMM_HEAD_REV
'
]
                
path
=
r
'
.
\
build
\
src
\
comm
'
)
)
    
fetch_commands
=
[
]
    
if
'
MOZ_FETCHES
'
in
env
:
        
fetch_commands
.
append
(
'
'
.
join
(
[
            
r
'
c
:
\
mozilla
-
build
\
python3
\
python3
.
exe
'
            
r
'
build
\
src
\
taskcluster
\
scripts
\
misc
\
fetch
-
content
'
            
'
task
-
artifacts
'
        
]
)
)
    
worker
[
'
command
'
]
=
[
]
    
if
taskdesc
.
get
(
'
needs
-
sccache
'
)
:
        
worker
[
'
command
'
]
.
extend
(
[
            
dedent
(
'
'
'
\
            
:
:
sccache
currently
uses
the
full
compiler
commandline
as
input
to
the
            
:
:
cache
hash
key
so
create
a
symlink
to
the
task
dir
and
build
from
            
:
:
the
symlink
dir
to
get
consistent
paths
.
            
if
exist
z
:
\
\
build
rmdir
z
:
\
\
build
'
'
'
)
            
r
'
mklink
/
d
z
:
\
build
%
cd
%
'
            
r
'
icacls
z
:
\
build
/
grant
*
S
-
1
-
1
-
0
:
D
/
L
'
            
r
'
cd
/
d
z
:
\
build
'
        
]
)
    
worker
[
'
command
'
]
.
extend
(
hg_commands
)
    
worker
[
'
command
'
]
.
extend
(
fetch_commands
)
    
worker
[
'
command
'
]
.
extend
(
[
        
'
'
.
join
(
mh_command
)
    
]
)
