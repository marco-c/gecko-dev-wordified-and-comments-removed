"
"
"
Support
for
running
spidermonkey
jobs
via
dedicated
scripts
"
"
"
from
__future__
import
absolute_import
print_function
unicode_literals
import
os
import
re
from
taskgraph
.
util
.
schema
import
Schema
from
voluptuous
import
Any
Optional
Required
from
taskgraph
.
transforms
.
job
import
run_job_using
from
taskgraph
.
transforms
.
job
.
common
import
add_artifacts
from
taskgraph
.
util
.
hash
import
hash_path
from
taskgraph
import
GECKO
from
taskgraph
.
util
.
cached_tasks
import
add_optimization
DSC_PACKAGE_RE
=
re
.
compile
(
'
.
*
(
?
=
_
)
'
)
SOURCE_PACKAGE_RE
=
re
.
compile
(
'
.
*
(
?
=
[
-
_
]
\
d
)
'
)
source_definition
=
{
    
Required
(
'
url
'
)
:
basestring
    
Required
(
'
sha256
'
)
:
basestring
}
run_schema
=
Schema
(
{
    
Required
(
'
using
'
)
:
'
debian
-
package
'
    
Required
(
'
dist
'
)
:
basestring
    
Required
(
'
snapshot
'
)
:
basestring
    
Required
(
Any
(
'
dsc
'
'
tarball
'
)
)
:
source_definition
    
Optional
(
'
patch
'
)
:
basestring
    
Optional
(
'
pre
-
build
-
command
'
)
:
basestring
    
Optional
(
'
arch
'
)
:
basestring
    
Optional
(
'
packages
'
)
:
[
basestring
]
    
Optional
(
'
resolver
'
)
:
Any
(
'
apt
-
get
'
'
aptitude
'
)
    
Required
(
'
workdir
'
)
:
basestring
}
)
run_job_using
(
"
docker
-
worker
"
"
debian
-
package
"
schema
=
run_schema
)
def
docker_worker_debian_package
(
config
job
taskdesc
)
:
    
run
=
job
[
'
run
'
]
    
name
=
taskdesc
[
'
label
'
]
.
replace
(
'
{
}
-
'
.
format
(
config
.
kind
)
'
'
1
)
    
docker_repo
=
'
debian
'
    
arch
=
run
.
get
(
'
arch
'
'
amd64
'
)
    
if
arch
!
=
'
amd64
'
:
        
docker_repo
=
'
{
}
/
{
}
'
.
format
(
arch
docker_repo
)
    
worker
=
taskdesc
[
'
worker
'
]
    
worker
[
'
artifacts
'
]
=
[
]
    
worker
[
'
docker
-
image
'
]
=
'
{
repo
}
:
{
dist
}
-
{
date
}
'
.
format
(
        
repo
=
docker_repo
        
dist
=
run
[
'
dist
'
]
        
date
=
run
[
'
snapshot
'
]
[
:
8
]
)
    
worker
[
'
retry
-
exit
-
status
'
]
=
[
100
]
    
add_artifacts
(
config
job
taskdesc
path
=
'
/
tmp
/
artifacts
'
)
    
env
=
worker
.
setdefault
(
'
env
'
{
}
)
    
env
[
'
DEBFULLNAME
'
]
=
'
Mozilla
build
team
'
    
env
[
'
DEBEMAIL
'
]
=
'
dev
-
builds
lists
.
mozilla
.
org
'
    
if
'
dsc
'
in
run
:
        
src
=
run
[
'
dsc
'
]
        
unpack
=
'
dpkg
-
source
-
x
{
src_file
}
{
package
}
'
        
package_re
=
DSC_PACKAGE_RE
    
elif
'
tarball
'
in
run
:
        
src
=
run
[
'
tarball
'
]
        
unpack
=
(
'
mkdir
{
package
}
&
&
'
                  
'
tar
-
C
{
package
}
-
axf
{
src_file
}
-
-
strip
-
components
=
1
'
)
        
package_re
=
SOURCE_PACKAGE_RE
    
else
:
        
raise
RuntimeError
(
'
Unreachable
'
)
    
src_url
=
src
[
'
url
'
]
    
src_file
=
os
.
path
.
basename
(
src_url
)
    
src_sha256
=
src
[
'
sha256
'
]
    
package
=
package_re
.
match
(
src_file
)
.
group
(
0
)
    
unpack
=
unpack
.
format
(
src_file
=
src_file
package
=
package
)
    
base_deps
=
[
        
'
apt
-
utils
'
        
'
build
-
essential
'
        
'
devscripts
'
        
'
fakeroot
'
    
]
    
resolver
=
run
.
get
(
'
resolver
'
'
apt
-
get
'
)
    
if
resolver
=
=
'
apt
-
get
'
:
        
resolver
=
'
apt
-
get
-
yyq
-
-
no
-
install
-
recommends
'
    
elif
resolver
=
=
'
aptitude
'
:
        
resolver
=
(
'
aptitude
-
y
-
-
without
-
recommends
-
o
'
                    
'
Aptitude
:
:
ProblemResolver
:
:
Hints
:
:
KeepBuildDeps
=
'
                    
'
"
reject
{
}
-
build
-
deps
:
UNINST
"
'
)
.
format
(
package
)
        
base_deps
.
append
(
'
aptitude
'
)
    
else
:
        
raise
RuntimeError
(
'
Unreachable
'
)
    
adjust
=
'
'
    
if
'
patch
'
in
run
:
        
env
[
'
PATCH_URL
'
]
=
'
{
head_repo
}
/
raw
-
file
/
{
head_rev
}
/
build
/
debian
-
packages
/
{
patch
}
'
.
format
(
            
head_repo
=
config
.
params
[
'
head_repository
'
]
            
head_rev
=
config
.
params
[
'
head_rev
'
]
            
patch
=
run
[
'
patch
'
]
        
)
        
adjust
+
=
'
curl
-
sL
PATCH_URL
|
patch
-
p1
&
&
'
    
if
'
pre
-
build
-
command
'
in
run
:
        
adjust
+
=
run
[
'
pre
-
build
-
command
'
]
+
'
&
&
'
    
if
'
tarball
'
in
run
:
        
adjust
+
=
'
mv
.
.
/
{
src_file
}
.
.
/
{
package
}
_
{
ver
}
.
orig
.
tar
.
gz
&
&
'
.
format
(
            
src_file
=
src_file
            
package
=
package
            
ver
=
'
(
dpkg
-
parsechangelog
|
awk
\
'
1
=
=
"
Version
:
"
{
print
2
}
\
'
|
cut
-
f
1
-
d
-
)
'
        
)
    
if
'
patch
'
not
in
run
and
'
pre
-
build
-
command
'
not
in
run
:
        
adjust
+
=
(
'
debchange
-
l
"
.
{
prefix
}
moz
"
-
-
distribution
"
{
dist
}
"
'
                   
'
"
Mozilla
backport
for
{
dist
}
.
"
<
/
dev
/
null
&
&
'
)
.
format
(
            
prefix
=
name
.
split
(
'
-
'
1
)
[
0
]
            
dist
=
run
[
'
dist
'
]
        
)
    
worker
[
'
command
'
]
=
[
        
'
sh
'
        
'
-
x
'
        
'
-
c
'
        
'
echo
"
deb
http
:
/
/
snapshot
.
debian
.
org
/
archive
/
debian
'
        
'
/
{
snapshot
}
/
{
dist
}
main
"
>
/
etc
/
apt
/
sources
.
list
&
&
'
        
'
echo
"
deb
http
:
/
/
snapshot
.
debian
.
org
/
archive
/
debian
'
        
'
/
{
snapshot
}
/
{
dist
}
-
updates
main
"
>
>
/
etc
/
apt
/
sources
.
list
&
&
'
        
'
echo
"
deb
http
:
/
/
snapshot
.
debian
.
org
/
archive
/
debian
'
        
'
/
{
snapshot
}
/
{
dist
}
-
backports
main
"
>
>
/
etc
/
apt
/
sources
.
list
&
&
'
        
'
echo
"
deb
http
:
/
/
snapshot
.
debian
.
org
/
archive
/
debian
-
security
'
        
'
/
{
snapshot
}
/
{
dist
}
/
updates
main
"
>
>
/
etc
/
apt
/
sources
.
list
&
&
'
        
'
apt
-
get
update
-
o
Acquire
:
:
Check
-
Valid
-
Until
=
false
-
q
&
&
'
        
'
apt
-
get
install
-
yyq
apt
-
transport
-
https
ca
-
certificates
&
&
'
        
'
for
task
in
PACKAGES
;
do
'
        
'
echo
"
deb
[
trusted
=
yes
]
https
:
/
/
queue
.
taskcluster
.
net
/
v1
/
task
'
        
'
/
task
/
artifacts
/
public
/
build
/
debian
/
"
'
        
'
>
>
/
etc
/
apt
/
sources
.
list
;
'
        
'
done
&
&
'
        
'
apt
-
get
update
-
o
Acquire
:
:
Check
-
Valid
-
Until
=
false
-
q
&
&
'
        
'
apt
-
get
install
-
yyq
{
base_deps
}
&
&
'
        
'
cd
/
tmp
&
&
'
        
'
dget
-
d
-
u
{
src_url
}
&
&
'
        
'
echo
"
{
src_sha256
}
{
src_file
}
"
|
sha256sum
-
c
&
&
'
        
'
{
unpack
}
&
&
'
        
'
cd
{
package
}
&
&
'
        
'
{
adjust
}
'
        
'
mk
-
build
-
deps
-
i
-
r
debian
/
control
-
t
\
'
{
resolver
}
\
'
&
&
'
        
'
DEB_BUILD_OPTIONS
=
"
parallel
=
(
nproc
)
nocheck
"
dpkg
-
buildpackage
&
&
'
        
'
mkdir
-
p
{
artifacts
}
/
debian
&
&
'
        
'
dcmd
cp
.
.
/
{
package
}
_
*
.
changes
{
artifacts
}
/
debian
/
&
&
'
        
'
cd
{
artifacts
}
&
&
'
        
'
apt
-
ftparchive
sources
debian
|
gzip
-
c9
>
debian
/
Sources
.
gz
&
&
'
        
'
apt
-
ftparchive
packages
debian
|
gzip
-
c9
>
debian
/
Packages
.
gz
'
        
.
format
(
            
package
=
package
            
snapshot
=
run
[
'
snapshot
'
]
            
dist
=
run
[
'
dist
'
]
            
src_url
=
src_url
            
src_file
=
src_file
            
src_sha256
=
src_sha256
            
unpack
=
unpack
            
adjust
=
adjust
            
artifacts
=
'
/
tmp
/
artifacts
'
            
base_deps
=
'
'
.
join
(
base_deps
)
            
resolver
=
resolver
        
)
    
]
    
data
=
list
(
worker
[
'
command
'
]
)
    
if
'
patch
'
in
run
:
        
data
.
append
(
hash_path
(
os
.
path
.
join
(
GECKO
'
build
'
'
debian
-
packages
'
run
[
'
patch
'
]
)
)
)
    
if
docker_repo
!
=
'
debian
'
:
        
data
.
append
(
docker_repo
)
    
if
run
.
get
(
'
packages
'
)
:
        
env
=
worker
.
setdefault
(
'
env
'
{
}
)
        
env
[
'
PACKAGES
'
]
=
{
            
'
task
-
reference
'
:
'
'
.
join
(
'
<
{
}
>
'
.
format
(
p
)
                                       
for
p
in
run
[
'
packages
'
]
)
        
}
        
deps
=
taskdesc
.
setdefault
(
'
dependencies
'
{
}
)
        
for
p
in
run
[
'
packages
'
]
:
            
deps
[
p
]
=
'
packages
-
{
}
'
.
format
(
p
)
            
data
.
append
(
p
)
    
add_optimization
(
config
taskdesc
cache_type
=
'
packages
.
v1
'
                     
cache_name
=
name
digest_data
=
data
)
