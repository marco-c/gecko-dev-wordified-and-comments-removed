from
__future__
import
absolute_import
print_function
unicode_literals
import
logging
import
voluptuous
from
six
import
text_type
from
mozbuild
import
schedules
logger
=
logging
.
getLogger
(
__name__
)
default_optimizations
=
(
    
None
    
{
"
always
"
:
None
}
    
{
"
build
"
:
list
(
schedules
.
ALL_COMPONENTS
)
}
    
{
"
index
-
search
"
:
[
text_type
]
}
    
{
"
never
"
:
None
}
    
{
"
skip
-
unless
-
expanded
"
:
None
}
    
{
"
skip
-
unless
-
backstop
"
:
None
}
    
{
"
skip
-
unless
-
changed
"
:
[
text_type
]
}
    
{
"
skip
-
unless
-
schedules
"
:
list
(
schedules
.
ALL_COMPONENTS
)
}
    
{
"
test
"
:
list
(
schedules
.
ALL_COMPONENTS
)
}
    
{
"
test
-
inclusive
"
:
list
(
schedules
.
ALL_COMPONENTS
)
}
    
{
"
test
-
verify
"
:
list
(
schedules
.
ALL_COMPONENTS
)
}
    
{
"
upload
-
symbols
"
:
None
}
)
OptimizationSchema
=
voluptuous
.
Any
(
*
default_optimizations
)
def
set_optimization_schema
(
schema_tuple
)
:
    
"
"
"
Sets
OptimizationSchema
so
it
can
be
imported
by
the
task
transform
.
    
This
function
is
called
by
projects
that
extend
Firefox
'
s
taskgraph
.
    
It
should
be
called
by
the
project
'
s
taskgraph
:
register
function
before
    
any
transport
or
job
runner
code
is
imported
.
    
:
param
tuple
schema_tuple
:
Tuple
of
possible
optimization
strategies
    
"
"
"
    
global
OptimizationSchema
    
if
OptimizationSchema
.
validators
=
=
default_optimizations
:
        
logger
.
info
(
"
OptimizationSchema
updated
.
"
)
        
OptimizationSchema
=
voluptuous
.
Any
(
*
schema_tuple
)
    
else
:
        
raise
Exception
(
"
Can
only
call
set_optimization_schema
once
.
"
)
