from
__future__
import
absolute_import
print_function
unicode_literals
import
logging
import
os
from
mozbuild
.
base
import
MozbuildObject
from
mozbuild
.
util
import
memoize
from
taskgraph
import
files_changed
from
taskgraph
.
optimize
import
register_strategy
OptimizationStrategy
from
taskgraph
.
util
.
taskcluster
import
find_task_id
logger
=
logging
.
getLogger
(
__name__
)
register_strategy
(
"
index
-
search
"
)
class
IndexSearch
(
OptimizationStrategy
)
:
    
def
should_replace_task
(
self
task
params
index_paths
)
:
        
"
Look
for
a
task
with
one
of
the
given
index
paths
"
        
for
index_path
in
index_paths
:
            
try
:
                
task_id
=
find_task_id
(
                    
index_path
                    
use_proxy
=
bool
(
os
.
environ
.
get
(
'
TASK_ID
'
)
)
)
                
return
task_id
            
except
KeyError
:
                
pass
        
return
False
register_strategy
(
"
skip
-
unless
-
changed
"
)
class
SkipUnlessChanged
(
OptimizationStrategy
)
:
    
def
should_remove_task
(
self
task
params
file_patterns
)
:
        
if
params
.
get
(
'
pushlog_id
'
)
=
=
-
1
:
            
return
False
        
changed
=
files_changed
.
check
(
params
file_patterns
)
        
if
not
changed
:
            
logger
.
debug
(
'
no
files
found
matching
a
pattern
in
skip
-
unless
-
changed
for
'
+
                         
task
.
label
)
            
return
True
        
return
False
register_strategy
(
"
skip
-
unless
-
schedules
"
)
class
SkipUnlessSchedules
(
OptimizationStrategy
)
:
    
memoize
    
def
scheduled_by_push
(
self
repository
revision
)
:
        
changed_files
=
files_changed
.
get_changed_files
(
repository
revision
)
        
mbo
=
MozbuildObject
.
from_environment
(
)
        
rdr
=
mbo
.
mozbuild_reader
(
config_mode
=
'
empty
'
)
        
components
=
set
(
)
        
for
p
m
in
rdr
.
files_info
(
changed_files
)
.
items
(
)
:
            
components
|
=
set
(
m
[
'
SCHEDULES
'
]
.
components
)
        
return
components
    
def
should_remove_task
(
self
task
params
conditions
)
:
        
if
params
.
get
(
'
pushlog_id
'
)
=
=
-
1
:
            
return
False
        
scheduled
=
self
.
scheduled_by_push
(
params
[
'
head_repository
'
]
params
[
'
head_rev
'
]
)
        
conditions
=
set
(
conditions
)
        
if
conditions
&
scheduled
:
            
return
False
        
return
True
