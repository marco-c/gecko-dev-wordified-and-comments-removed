from
__future__
import
absolute_import
print_function
unicode_literals
from
taskgraph
.
optimize
import
All
OptimizationStrategy
register_strategy
from
taskgraph
.
util
.
attributes
import
match_run_on_projects
from
taskgraph
.
util
.
backstop
import
BACKSTOP_PUSH_INTERVAL
register_strategy
(
"
skip
-
unless
-
backstop
"
)
class
SkipUnlessBackstop
(
OptimizationStrategy
)
:
    
"
"
"
Always
removes
tasks
except
on
backstop
pushes
.
"
"
"
    
def
should_remove_task
(
self
task
params
_
)
:
        
return
not
params
[
"
backstop
"
]
register_strategy
(
"
push
-
interval
-
10
"
args
=
(
10
)
)
register_strategy
(
"
push
-
interval
-
20
"
args
=
(
20
)
)
class
SkipUnlessPushInterval
(
OptimizationStrategy
)
:
    
"
"
"
Always
removes
tasks
except
every
N
pushes
.
    
Args
:
        
push_interval
(
int
)
:
Number
of
pushes
        
remove_on_projects
(
set
)
:
For
non
-
autoland
projects
the
task
will
            
be
removed
if
we
'
re
running
on
one
of
these
projects
otherwise
            
it
will
be
kept
.
    
"
"
"
    
def
__init__
(
self
push_interval
remove_on_projects
=
None
)
:
        
self
.
push_interval
=
push_interval
        
self
.
remove_on_projects
=
remove_on_projects
or
{
'
try
'
}
    
property
    
def
description
(
self
)
:
        
return
"
skip
-
unless
-
push
-
interval
-
{
}
"
.
format
(
self
.
push_interval
)
    
def
should_remove_task
(
self
task
params
_
)
:
        
project
=
params
[
"
project
"
]
        
if
project
!
=
'
autoland
'
:
            
return
match_run_on_projects
(
project
self
.
remove_on_projects
)
        
return
int
(
params
[
"
pushlog_id
"
]
)
%
self
.
push_interval
!
=
0
register_strategy
(
    
"
skip
-
unless
-
expanded
"
    
args
=
(
        
"
skip
-
unless
-
backstop
"
        
SkipUnlessPushInterval
(
BACKSTOP_PUSH_INTERVAL
/
2
)
    
)
)
(
All
)
