from
taskgraph
.
transforms
.
base
import
TransformSequence
from
gecko_taskgraph
.
util
.
platforms
import
platform_family
transforms
=
TransformSequence
(
)
transforms
.
add
def
set_build_schedules_optimization
(
config
tasks
)
:
    
"
"
"
Set
the
build
optimization
based
on
the
build
platform
.
"
"
"
    
for
task
in
tasks
:
        
if
"
when
"
in
task
or
"
optimization
"
in
task
:
            
yield
task
            
continue
        
schedules
=
[
]
        
if
config
.
kind
=
=
"
build
"
:
            
family
=
platform_family
(
task
[
"
attributes
"
]
[
"
build_platform
"
]
)
            
schedules
=
[
family
]
            
if
"
android
"
not
in
family
:
                
schedules
.
append
(
"
firefox
"
)
        
elif
config
.
kind
=
=
"
build
-
components
"
:
            
schedules
=
[
"
android
"
"
fenix
"
"
focus
-
android
"
]
        
elif
config
.
kind
in
(
"
build
-
apk
"
"
build
-
bundle
"
"
test
-
apk
"
)
:
            
schedules
=
[
"
android
"
]
            
if
"
fenix
"
in
task
[
"
name
"
]
:
                
schedules
.
append
(
"
fenix
"
)
            
elif
"
focus
"
in
task
[
"
name
"
]
or
"
klar
"
in
task
[
"
name
"
]
:
                
schedules
.
append
(
"
focus
-
android
"
)
        
task
[
"
optimization
"
]
=
{
"
build
"
:
schedules
}
        
yield
task
