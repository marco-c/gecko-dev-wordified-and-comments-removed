"
"
"
These
transformations
take
a
task
description
for
a
visual
metrics
task
and
add
the
necessary
environment
variables
to
run
on
the
given
inputs
.
"
"
"
import
os
from
gecko_taskgraph
.
transforms
.
base
import
TransformSequence
transforms
=
TransformSequence
(
)
SYMBOL
=
"
%
(
groupSymbol
)
s
(
%
(
symbol
)
s
-
vismet
)
"
LABEL
=
"
test
-
vismet
-
%
(
platform
)
s
-
%
(
raptor_try_name
)
s
"
transforms
.
add
def
run_visual_metrics
(
config
jobs
)
:
    
for
job
in
jobs
:
        
dep_job
=
job
.
pop
(
"
primary
-
dependency
"
None
)
        
if
dep_job
is
not
None
:
            
platform
=
dep_job
.
task
[
"
extra
"
]
[
"
treeherder
-
platform
"
]
            
job
[
"
dependencies
"
]
=
{
dep_job
.
label
:
dep_job
.
label
}
            
job
[
"
fetches
"
]
[
dep_job
.
label
]
=
[
                
"
/
public
/
test_info
/
browsertime
-
results
.
tgz
"
            
]
            
attributes
=
dict
(
dep_job
.
attributes
)
            
attributes
[
"
platform
"
]
=
platform
            
job
[
"
label
"
]
=
LABEL
%
attributes
            
treeherder_info
=
dict
(
dep_job
.
task
[
"
extra
"
]
[
"
treeherder
"
]
)
            
job
[
"
treeherder
"
]
[
"
symbol
"
]
=
SYMBOL
%
treeherder_info
            
job
[
"
worker
"
]
.
setdefault
(
"
env
"
{
}
)
[
"
TC_LABEL
"
]
=
dep_job
.
label
            
job
[
"
worker
"
]
[
"
env
"
]
[
"
TC_GROUP_ID
"
]
=
os
.
getenv
(
"
TC_GROUP_ID
"
"
"
)
            
job
[
"
treeherder
"
]
[
"
platform
"
]
=
platform
            
job
[
"
treeherder
"
]
[
"
tier
"
]
=
treeherder_info
[
"
tier
"
]
            
job
[
"
run
-
on
-
projects
"
]
=
attributes
[
"
run_on_projects
"
]
            
yield
job
