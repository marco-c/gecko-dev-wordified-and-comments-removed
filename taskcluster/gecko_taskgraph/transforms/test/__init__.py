"
"
"
These
transforms
construct
a
task
description
to
run
the
given
test
based
on
a
test
description
.
The
implementation
here
is
shared
among
all
test
kinds
but
contains
specific
support
for
how
we
run
tests
in
Gecko
(
via
mozharness
invoked
in
particular
ways
)
.
This
is
a
good
place
to
translate
a
test
-
description
option
such
as
single
-
core
:
true
to
the
implementation
of
that
option
in
a
task
description
(
worker
options
mozharness
commandline
environment
variables
etc
.
)
The
test
description
should
be
fully
formed
by
the
time
it
reaches
these
transforms
and
these
transforms
should
not
embody
any
specific
knowledge
about
what
should
run
where
.
this
is
the
wrong
place
for
special
-
casing
platforms
for
example
-
use
all_tests
.
py
instead
.
"
"
"
import
logging
from
importlib
import
import_module
from
mozbuild
.
schedules
import
INCLUSIVE_COMPONENTS
from
taskgraph
.
util
.
schema
import
Schema
optionally_keyed_by
resolve_keyed_by
from
voluptuous
import
(
    
Any
    
Optional
    
Required
    
Exclusive
)
from
gecko_taskgraph
.
optimize
.
schema
import
OptimizationSchema
from
gecko_taskgraph
.
transforms
.
base
import
TransformSequence
from
gecko_taskgraph
.
transforms
.
test
.
other
import
get_mobile_project
from
gecko_taskgraph
.
util
.
chunking
import
manifest_loaders
logger
=
logging
.
getLogger
(
__name__
)
transforms
=
TransformSequence
(
)
test_description_schema
=
Schema
(
    
{
        
Required
(
"
description
"
)
:
str
        
Optional
(
"
suite
"
)
:
Any
(
            
str
            
{
Optional
(
"
category
"
)
:
str
Optional
(
"
name
"
)
:
str
}
        
)
        
Optional
(
"
workdir
"
)
:
optionally_keyed_by
(
"
test
-
platform
"
Any
(
str
"
default
"
)
)
        
Optional
(
"
try
-
name
"
)
:
str
        
Optional
(
"
tags
"
)
:
{
str
:
object
}
        
Required
(
"
treeherder
-
symbol
"
)
:
str
        
Optional
(
"
treeherder
-
machine
-
platform
"
)
:
str
        
Optional
(
"
attributes
"
)
:
{
str
:
object
}
        
Optional
(
"
job
-
from
"
)
:
str
        
Optional
(
"
run
-
on
-
projects
"
)
:
optionally_keyed_by
(
            
"
app
"
            
"
subtest
"
            
"
test
-
platform
"
            
"
test
-
name
"
            
"
variant
"
            
Any
(
[
str
]
"
built
-
projects
"
)
        
)
        
Optional
(
"
built
-
projects
-
only
"
)
:
bool
        
Optional
(
"
tier
"
)
:
optionally_keyed_by
(
            
"
test
-
platform
"
"
variant
"
"
app
"
"
subtest
"
Any
(
int
"
default
"
)
        
)
        
Required
(
"
chunks
"
)
:
optionally_keyed_by
(
"
test
-
platform
"
Any
(
int
"
dynamic
"
)
)
        
Optional
(
"
test
-
manifest
-
loader
"
)
:
Any
(
None
*
list
(
manifest_loaders
)
)
        
Optional
(
"
expires
-
after
"
)
:
str
        
Optional
(
"
variants
"
)
:
[
str
]
        
Required
(
"
run
-
without
-
variant
"
)
:
optionally_keyed_by
(
"
test
-
platform
"
bool
)
        
Required
(
"
instance
-
size
"
)
:
optionally_keyed_by
(
            
"
test
-
platform
"
Any
(
"
default
"
"
large
"
"
xlarge
"
)
        
)
        
Required
(
"
virtualization
"
)
:
optionally_keyed_by
(
            
"
test
-
platform
"
Any
(
"
virtual
"
"
virtual
-
with
-
gpu
"
"
hardware
"
)
        
)
        
Required
(
"
loopback
-
audio
"
)
:
bool
        
Required
(
"
loopback
-
video
"
)
:
bool
        
Optional
(
"
allow
-
software
-
gl
-
layers
"
)
:
bool
        
Required
(
"
docker
-
image
"
)
:
optionally_keyed_by
(
            
"
test
-
platform
"
            
Any
(
                
str
                
{
"
in
-
tree
"
:
str
}
                
{
"
indexed
"
:
str
}
            
)
        
)
        
Required
(
"
max
-
run
-
time
"
)
:
optionally_keyed_by
(
"
test
-
platform
"
"
subtest
"
int
)
        
Optional
(
"
retry
-
exit
-
status
"
)
:
[
int
]
        
Required
(
"
checkout
"
)
:
bool
        
Optional
(
"
reboot
"
)
:
Any
(
False
"
always
"
"
on
-
exception
"
"
on
-
failure
"
)
        
Required
(
"
mozharness
"
)
:
{
            
Required
(
"
script
"
)
:
optionally_keyed_by
(
"
test
-
platform
"
str
)
            
Required
(
"
config
"
)
:
optionally_keyed_by
(
"
test
-
platform
"
[
str
]
)
            
Optional
(
"
mochitest
-
flavor
"
)
:
str
            
Optional
(
"
actions
"
)
:
[
str
]
            
Required
(
"
extra
-
options
"
)
:
optionally_keyed_by
(
"
test
-
platform
"
[
str
]
)
            
Optional
(
"
build
-
artifact
-
name
"
)
:
str
            
Optional
(
"
installer
-
url
"
)
:
str
            
Required
(
"
tooltool
-
downloads
"
)
:
Any
(
                
False
                
"
public
"
                
"
internal
"
            
)
            
Optional
(
"
include
-
blob
-
upload
-
branch
"
)
:
bool
            
Optional
(
"
download
-
symbols
"
)
:
Any
(
True
"
ondemand
"
)
            
Required
(
"
set
-
moz
-
node
-
path
"
)
:
bool
            
Required
(
"
chunked
"
)
:
optionally_keyed_by
(
"
test
-
platform
"
bool
)
            
Required
(
"
requires
-
signed
-
builds
"
)
:
optionally_keyed_by
(
                
"
test
-
platform
"
bool
            
)
        
}
        
Optional
(
"
test
-
manifests
"
)
:
Any
(
            
[
str
]
            
{
"
active
"
:
[
str
]
"
skipped
"
:
[
str
]
}
        
)
        
Optional
(
"
this
-
chunk
"
)
:
int
        
Optional
(
"
os
-
groups
"
)
:
optionally_keyed_by
(
"
test
-
platform
"
[
str
]
)
        
Optional
(
"
run
-
as
-
administrator
"
)
:
optionally_keyed_by
(
"
test
-
platform
"
bool
)
        
Required
(
"
build
-
platform
"
)
:
str
        
Required
(
"
build
-
label
"
)
:
str
        
Optional
(
"
build
-
signing
-
label
"
)
:
str
        
Required
(
"
build
-
attributes
"
)
:
{
str
:
object
}
        
Required
(
"
test
-
platform
"
)
:
str
        
Optional
(
"
limit
-
platforms
"
)
:
optionally_keyed_by
(
"
app
"
"
subtest
"
[
str
]
)
        
Required
(
"
test
-
name
"
)
:
str
        
Optional
(
"
product
"
)
:
str
        
Exclusive
(
"
when
"
"
optimization
"
)
:
{
            
Optional
(
"
files
-
changed
"
)
:
[
str
]
        
}
        
Exclusive
(
"
optimization
"
"
optimization
"
)
:
OptimizationSchema
        
Exclusive
(
"
schedules
-
component
"
"
optimization
"
)
:
Any
(
            
str
            
[
str
]
        
)
        
Optional
(
"
worker
-
type
"
)
:
optionally_keyed_by
(
            
"
test
-
platform
"
            
Any
(
str
None
)
        
)
        
Optional
(
            
"
require
-
signed
-
extensions
"
            
description
=
"
Whether
the
build
being
tested
requires
extensions
be
signed
.
"
        
)
:
optionally_keyed_by
(
"
release
-
type
"
"
test
-
platform
"
bool
)
        
Optional
(
"
target
"
)
:
optionally_keyed_by
(
            
"
app
"
            
"
test
-
platform
"
            
Any
(
                
str
                
None
                
{
Required
(
"
index
"
)
:
str
Required
(
"
name
"
)
:
str
}
            
)
        
)
        
Optional
(
"
fetches
"
)
:
object
        
Optional
(
"
raptor
"
)
:
object
        
Optional
(
"
app
"
)
:
str
        
Optional
(
"
subtest
"
)
:
str
        
Optional
(
"
supports
-
artifact
-
builds
"
)
:
bool
    
}
)
transforms
.
add
def
handle_keyed_by_mozharness
(
config
tasks
)
:
    
"
"
"
Resolve
a
mozharness
field
if
it
is
keyed
by
something
"
"
"
    
fields
=
[
        
"
mozharness
"
        
"
mozharness
.
chunked
"
        
"
mozharness
.
config
"
        
"
mozharness
.
extra
-
options
"
        
"
mozharness
.
requires
-
signed
-
builds
"
        
"
mozharness
.
script
"
    
]
    
for
task
in
tasks
:
        
for
field
in
fields
:
            
resolve_keyed_by
(
                
task
field
item_name
=
task
[
"
test
-
name
"
]
enforce_single_match
=
False
            
)
        
yield
task
transforms
.
add
def
set_defaults
(
config
tasks
)
:
    
for
task
in
tasks
:
        
build_platform
=
task
[
"
build
-
platform
"
]
        
if
build_platform
.
startswith
(
"
android
"
)
:
            
task
[
"
mozharness
"
]
[
"
tooltool
-
downloads
"
]
=
"
internal
"
            
task
[
"
mozharness
"
]
[
"
actions
"
]
=
[
"
get
-
secrets
"
]
            
task
[
"
loopback
-
video
"
]
=
True
        
task
[
"
mozharness
"
]
[
"
set
-
moz
-
node
-
path
"
]
=
True
        
if
task
[
"
test
-
platform
"
]
.
startswith
(
"
linux
"
)
and
task
[
"
suite
"
]
not
in
[
            
"
talos
"
            
"
raptor
"
        
]
:
            
task
.
setdefault
(
"
allow
-
software
-
gl
-
layers
"
True
)
        
else
:
            
task
[
"
allow
-
software
-
gl
-
layers
"
]
=
False
        
task
.
setdefault
(
"
try
-
name
"
task
[
"
test
-
name
"
]
)
        
task
.
setdefault
(
"
os
-
groups
"
[
]
)
        
task
.
setdefault
(
"
run
-
as
-
administrator
"
False
)
        
task
.
setdefault
(
"
chunks
"
1
)
        
task
.
setdefault
(
"
run
-
on
-
projects
"
"
built
-
projects
"
)
        
task
.
setdefault
(
"
built
-
projects
-
only
"
False
)
        
task
.
setdefault
(
"
instance
-
size
"
"
default
"
)
        
task
.
setdefault
(
"
max
-
run
-
time
"
3600
)
        
task
.
setdefault
(
"
reboot
"
False
)
        
task
.
setdefault
(
"
virtualization
"
"
virtual
"
)
        
task
.
setdefault
(
"
loopback
-
audio
"
False
)
        
task
.
setdefault
(
"
loopback
-
video
"
False
)
        
task
.
setdefault
(
"
limit
-
platforms
"
[
]
)
        
task
.
setdefault
(
"
docker
-
image
"
{
"
in
-
tree
"
:
"
ubuntu1804
-
test
"
}
)
        
task
.
setdefault
(
"
checkout
"
False
)
        
task
.
setdefault
(
"
require
-
signed
-
extensions
"
False
)
        
task
.
setdefault
(
"
run
-
without
-
variant
"
True
)
        
task
.
setdefault
(
"
variants
"
[
]
)
        
task
.
setdefault
(
"
supports
-
artifact
-
builds
"
True
)
        
task
[
"
mozharness
"
]
.
setdefault
(
"
extra
-
options
"
[
]
)
        
task
[
"
mozharness
"
]
.
setdefault
(
"
requires
-
signed
-
builds
"
False
)
        
task
[
"
mozharness
"
]
.
setdefault
(
"
tooltool
-
downloads
"
"
public
"
)
        
task
[
"
mozharness
"
]
.
setdefault
(
"
set
-
moz
-
node
-
path
"
False
)
        
task
[
"
mozharness
"
]
.
setdefault
(
"
chunked
"
False
)
        
yield
task
transforms
.
add_validate
(
test_description_schema
)
transforms
.
add
def
resolve_keys
(
config
tasks
)
:
    
keys
=
(
        
"
require
-
signed
-
extensions
"
        
"
run
-
without
-
variant
"
    
)
    
for
task
in
tasks
:
        
for
key
in
keys
:
            
resolve_keyed_by
(
                
task
                
key
                
item_name
=
task
[
"
test
-
name
"
]
                
enforce_single_match
=
False
                
*
*
{
                    
"
release
-
type
"
:
config
.
params
[
"
release_type
"
]
                
}
            
)
        
yield
task
transforms
.
add
def
run_sibling_transforms
(
config
tasks
)
:
    
"
"
"
Runs
other
transform
files
next
to
this
module
.
"
"
"
    
transform_modules
=
(
        
(
"
variant
"
None
)
        
(
"
raptor
"
lambda
t
:
t
[
"
suite
"
]
=
=
"
raptor
"
)
        
(
"
other
"
None
)
        
(
"
worker
"
None
)
        
(
"
chunk
"
None
)
    
)
    
for
task
in
tasks
:
        
xforms
=
TransformSequence
(
)
        
for
name
filterfn
in
transform_modules
:
            
if
filterfn
and
not
filterfn
(
task
)
:
                
continue
            
mod
=
import_module
(
f
"
gecko_taskgraph
.
transforms
.
test
.
{
name
}
"
)
            
xforms
.
add
(
mod
.
transforms
)
        
yield
from
xforms
(
config
[
task
]
)
transforms
.
add
def
make_job_description
(
config
tasks
)
:
    
"
"
"
Convert
*
test
*
descriptions
to
*
job
*
descriptions
(
input
to
    
gecko_taskgraph
.
transforms
.
job
)
"
"
"
    
for
task
in
tasks
:
        
attributes
=
task
.
get
(
"
attributes
"
{
}
)
        
mobile
=
get_mobile_project
(
task
)
        
if
mobile
and
(
mobile
not
in
task
[
"
test
-
name
"
]
)
:
            
label
=
"
{
}
-
{
}
-
{
}
-
{
}
"
.
format
(
                
config
.
kind
task
[
"
test
-
platform
"
]
mobile
task
[
"
test
-
name
"
]
            
)
        
else
:
            
label
=
"
{
}
-
{
}
-
{
}
"
.
format
(
                
config
.
kind
task
[
"
test
-
platform
"
]
task
[
"
test
-
name
"
]
            
)
        
try_name
=
task
[
"
try
-
name
"
]
        
if
attributes
.
get
(
"
unittest_variant
"
)
:
            
suffix
=
task
.
pop
(
"
variant
-
suffix
"
)
            
label
+
=
suffix
            
try_name
+
=
suffix
        
if
task
[
"
chunks
"
]
>
1
:
            
label
+
=
"
-
{
}
"
.
format
(
task
[
"
this
-
chunk
"
]
)
        
build_label
=
task
[
"
build
-
label
"
]
        
if
task
[
"
suite
"
]
=
=
"
talos
"
:
            
attr_try_name
=
"
talos_try_name
"
        
elif
task
[
"
suite
"
]
=
=
"
raptor
"
:
            
attr_try_name
=
"
raptor_try_name
"
        
else
:
            
attr_try_name
=
"
unittest_try_name
"
        
attr_build_platform
attr_build_type
=
task
[
"
build
-
platform
"
]
.
split
(
"
/
"
1
)
        
attributes
.
update
(
            
{
                
"
build_platform
"
:
attr_build_platform
                
"
build_type
"
:
attr_build_type
                
"
test_platform
"
:
task
[
"
test
-
platform
"
]
                
"
test_chunk
"
:
str
(
task
[
"
this
-
chunk
"
]
)
                
"
supports
-
artifact
-
builds
"
:
task
[
"
supports
-
artifact
-
builds
"
]
                
attr_try_name
:
try_name
            
}
        
)
        
if
"
test
-
manifests
"
in
task
:
            
attributes
[
"
test_manifests
"
]
=
task
[
"
test
-
manifests
"
]
        
jobdesc
=
{
}
        
name
=
"
{
}
-
{
}
"
.
format
(
task
[
"
test
-
platform
"
]
task
[
"
test
-
name
"
]
)
        
jobdesc
[
"
name
"
]
=
name
        
jobdesc
[
"
label
"
]
=
label
        
jobdesc
[
"
description
"
]
=
task
[
"
description
"
]
        
jobdesc
[
"
attributes
"
]
=
attributes
        
jobdesc
[
"
dependencies
"
]
=
{
"
build
"
:
build_label
}
        
jobdesc
[
"
job
-
from
"
]
=
task
[
"
job
-
from
"
]
        
if
task
.
get
(
"
fetches
"
)
:
            
jobdesc
[
"
fetches
"
]
=
task
[
"
fetches
"
]
        
if
task
[
"
mozharness
"
]
[
"
requires
-
signed
-
builds
"
]
is
True
:
            
jobdesc
[
"
dependencies
"
]
[
"
build
-
signing
"
]
=
task
[
"
build
-
signing
-
label
"
]
        
if
"
expires
-
after
"
in
task
:
            
jobdesc
[
"
expires
-
after
"
]
=
task
[
"
expires
-
after
"
]
        
jobdesc
[
"
routes
"
]
=
[
]
        
jobdesc
[
"
run
-
on
-
projects
"
]
=
sorted
(
task
[
"
run
-
on
-
projects
"
]
)
        
jobdesc
[
"
scopes
"
]
=
[
]
        
jobdesc
[
"
tags
"
]
=
task
.
get
(
"
tags
"
{
}
)
        
jobdesc
[
"
extra
"
]
=
{
            
"
chunks
"
:
{
                
"
current
"
:
task
[
"
this
-
chunk
"
]
                
"
total
"
:
task
[
"
chunks
"
]
            
}
            
"
suite
"
:
attributes
[
"
unittest_suite
"
]
            
"
test
-
setting
"
:
task
.
pop
(
"
test
-
setting
"
)
        
}
        
jobdesc
[
"
treeherder
"
]
=
{
            
"
symbol
"
:
task
[
"
treeherder
-
symbol
"
]
            
"
kind
"
:
"
test
"
            
"
tier
"
:
task
[
"
tier
"
]
            
"
platform
"
:
task
.
get
(
"
treeherder
-
machine
-
platform
"
task
[
"
build
-
platform
"
]
)
        
}
        
schedules
=
task
.
get
(
"
schedules
-
component
"
[
]
)
        
if
task
.
get
(
"
when
"
)
:
            
jobdesc
[
"
when
"
]
=
task
[
"
when
"
]
        
elif
"
optimization
"
in
task
:
            
jobdesc
[
"
optimization
"
]
=
task
[
"
optimization
"
]
        
elif
set
(
schedules
)
&
set
(
INCLUSIVE_COMPONENTS
)
:
            
jobdesc
[
"
optimization
"
]
=
{
"
test
-
inclusive
"
:
schedules
}
        
else
:
            
jobdesc
[
"
optimization
"
]
=
{
"
test
"
:
schedules
}
        
run
=
jobdesc
[
"
run
"
]
=
{
}
        
run
[
"
using
"
]
=
"
mozharness
-
test
"
        
run
[
"
test
"
]
=
task
        
if
"
workdir
"
in
task
:
            
run
[
"
workdir
"
]
=
task
.
pop
(
"
workdir
"
)
        
jobdesc
[
"
worker
-
type
"
]
=
task
.
pop
(
"
worker
-
type
"
)
        
if
task
.
get
(
"
fetches
"
)
:
            
jobdesc
[
"
fetches
"
]
=
task
.
pop
(
"
fetches
"
)
        
yield
jobdesc
def
normpath
(
path
)
:
    
return
path
.
replace
(
"
/
"
"
\
\
"
)
def
get_firefox_version
(
)
:
    
with
open
(
"
browser
/
config
/
version
.
txt
"
)
as
f
:
        
return
f
.
readline
(
)
.
strip
(
)
