from
taskgraph
.
transforms
.
base
import
TransformSequence
from
taskgraph
.
util
.
cached_tasks
import
add_optimization
from
taskgraph
.
util
.
dependencies
import
get_primary_dependency
transforms
=
TransformSequence
(
)
transforms
.
add
def
copy_cached_dep
(
config
tasks
)
:
    
"
"
"
Ensure
this
task
is
replaced
anytime
the
primary
dep
is
.
"
"
"
    
for
task
in
tasks
:
        
primary_dep
=
get_primary_dependency
(
config
task
)
        
if
primary_dep
and
"
cached_task
"
in
primary_dep
.
attributes
:
            
add_optimization
(
                
config
                
task
                
f
"
{
config
.
kind
}
.
v1
"
                
task
[
"
name
"
]
                
digest
=
primary_dep
.
attributes
[
"
cached_task
"
]
[
"
digest
"
]
            
)
        
yield
task
