"
"
"
Add
notifications
via
taskcluster
-
notify
for
release
tasks
"
"
"
from
string
import
Formatter
from
gecko_taskgraph
.
transforms
.
base
import
TransformSequence
from
gecko_taskgraph
.
util
.
scriptworker
import
get_release_config
from
gecko_taskgraph
.
util
.
schema
import
resolve_keyed_by
transforms
=
TransformSequence
(
)
class
TitleCaseFormatter
(
Formatter
)
:
    
"
"
"
Support
title
formatter
for
strings
"
"
"
    
def
convert_field
(
self
value
conversion
)
:
        
if
conversion
=
=
"
t
"
:
            
return
str
(
value
)
.
title
(
)
        
super
(
)
.
convert_field
(
value
conversion
)
        
return
value
titleformatter
=
TitleCaseFormatter
(
)
transforms
.
add
def
add_notifications
(
config
jobs
)
:
    
release_config
=
get_release_config
(
config
)
    
for
job
in
jobs
:
        
label
=
"
{
}
-
{
}
"
.
format
(
config
.
kind
job
[
"
name
"
]
)
        
notifications
=
job
.
pop
(
"
notifications
"
None
)
        
if
notifications
:
            
resolve_keyed_by
(
                
notifications
"
emails
"
label
project
=
config
.
params
[
"
project
"
]
            
)
            
emails
=
notifications
[
"
emails
"
]
            
format_kwargs
=
dict
(
                
task
=
job
                
config
=
config
.
__dict__
                
release_config
=
release_config
            
)
            
subject
=
titleformatter
.
format
(
notifications
[
"
subject
"
]
*
*
format_kwargs
)
            
message
=
titleformatter
.
format
(
notifications
[
"
message
"
]
*
*
format_kwargs
)
            
emails
=
[
email
.
format
(
*
*
format_kwargs
)
for
email
in
emails
]
            
status_types
=
notifications
.
get
(
"
status
-
types
"
[
"
on
-
completed
"
]
)
            
for
s
in
status_types
:
                
job
.
setdefault
(
"
routes
"
[
]
)
.
extend
(
                    
[
f
"
notify
.
email
.
{
email
}
.
{
s
}
"
for
email
in
emails
]
                
)
            
job
.
setdefault
(
"
extra
"
{
}
)
.
update
(
                
{
                    
"
notify
"
:
{
                        
"
email
"
:
{
                            
"
subject
"
:
subject
                        
}
                    
}
                
}
            
)
            
if
message
:
                
job
[
"
extra
"
]
[
"
notify
"
]
[
"
email
"
]
[
"
content
"
]
=
message
        
yield
job
