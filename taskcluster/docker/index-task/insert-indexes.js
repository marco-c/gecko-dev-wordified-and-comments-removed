let
taskcluster
=
require
(
"
taskcluster
-
client
"
)
;
let
index
=
new
taskcluster
.
Index
(
{
delayFactor
:
750
retries
:
8
baseUrl
:
"
taskcluster
/
index
/
v1
"
}
)
;
let
queue
=
new
taskcluster
.
Queue
(
{
delayFactor
:
750
retries
:
8
}
)
;
let
taskId
=
process
.
env
.
TARGET_TASKID
;
let
rank
=
parseInt
(
process
.
env
.
INDEX_RANK
10
)
;
let
namespaces
=
process
.
argv
.
slice
(
2
)
;
if
(
!
taskId
)
{
console
.
log
(
"
Expected
target
task
as
environment
variable
:
TARGET_TASKID
"
)
;
process
.
exit
(
1
)
;
}
if
(
isNaN
(
rank
)
)
{
console
.
log
(
"
Expected
index
rank
as
environment
variable
:
INDEX_RANK
"
)
;
process
.
exit
(
1
)
;
}
queue
.
task
(
taskId
)
.
then
(
task
=
>
task
.
expires
)
.
then
(
expires
=
>
{
return
Promise
.
all
(
namespaces
.
map
(
namespace
=
>
{
console
.
log
(
"
Inserting
%
s
into
index
(
rank
%
d
)
under
:
%
s
"
taskId
rank
namespace
)
;
return
index
.
insertTask
(
namespace
{
taskId
rank
data
:
{
}
expires
}
)
;
}
)
)
;
}
)
.
then
(
(
)
=
>
{
console
.
log
(
"
indexing
successfully
completed
.
"
)
;
process
.
exit
(
0
)
;
}
)
.
catch
(
err
=
>
{
console
.
log
(
"
Error
:
\
n
%
s
"
err
)
;
if
(
err
.
stack
)
{
console
.
log
(
"
Stack
:
\
n
%
s
"
err
.
stack
)
;
}
console
.
log
(
"
Properties
:
\
n
%
j
"
err
)
;
throw
err
;
}
)
.
catch
(
(
)
=
>
process
.
exit
(
1
)
)
;
