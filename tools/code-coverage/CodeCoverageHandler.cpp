#
include
<
stdio
.
h
>
#
ifdef
XP_WIN
#
include
<
process
.
h
>
#
define
getpid
_getpid
#
else
#
include
<
signal
.
h
>
#
include
<
unistd
.
h
>
#
endif
#
include
"
mozilla
/
CodeCoverageHandler
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
nsAppRunner
.
h
"
using
namespace
mozilla
;
extern
"
C
"
void
__gcov_flush
(
)
;
StaticAutoPtr
<
CodeCoverageHandler
>
CodeCoverageHandler
:
:
instance
;
void
CodeCoverageHandler
:
:
FlushCounters
(
)
{
printf_stderr
(
"
[
CodeCoverage
]
Requested
flush
for
%
d
.
\
n
"
getpid
(
)
)
;
CrossProcessMutexAutoLock
lock
(
*
CodeCoverageHandler
:
:
Get
(
)
-
>
GetMutex
(
)
)
;
__gcov_flush
(
)
;
printf_stderr
(
"
[
CodeCoverage
]
flush
completed
.
\
n
"
)
;
}
void
CodeCoverageHandler
:
:
FlushCountersSignalHandler
(
int
)
{
FlushCounters
(
)
;
}
void
CodeCoverageHandler
:
:
SetSignalHandlers
(
)
{
#
ifndef
XP_WIN
printf_stderr
(
"
[
CodeCoverage
]
Setting
handlers
for
process
%
d
.
\
n
"
getpid
(
)
)
;
struct
sigaction
dump_sa
;
dump_sa
.
sa_handler
=
CodeCoverageHandler
:
:
FlushCountersSignalHandler
;
dump_sa
.
sa_flags
=
SA_RESTART
;
sigemptyset
(
&
dump_sa
.
sa_mask
)
;
DebugOnly
<
int
>
r1
=
sigaction
(
SIGUSR1
&
dump_sa
nullptr
)
;
MOZ_ASSERT
(
r1
=
=
0
"
Failed
to
install
GCOV
SIGUSR1
handler
"
)
;
#
endif
}
CodeCoverageHandler
:
:
CodeCoverageHandler
(
)
:
mGcovLock
(
"
GcovLock
"
)
{
SetSignalHandlers
(
)
;
}
CodeCoverageHandler
:
:
CodeCoverageHandler
(
const
CrossProcessMutexHandle
&
aHandle
)
:
mGcovLock
(
aHandle
)
{
SetSignalHandlers
(
)
;
}
void
CodeCoverageHandler
:
:
Init
(
)
{
MOZ_ASSERT
(
!
instance
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
instance
=
new
CodeCoverageHandler
(
)
;
ClearOnShutdown
(
&
instance
)
;
}
void
CodeCoverageHandler
:
:
Init
(
const
CrossProcessMutexHandle
&
aHandle
)
{
MOZ_ASSERT
(
!
instance
)
;
MOZ_ASSERT
(
!
XRE_IsParentProcess
(
)
)
;
instance
=
new
CodeCoverageHandler
(
aHandle
)
;
ClearOnShutdown
(
&
instance
)
;
}
CodeCoverageHandler
*
CodeCoverageHandler
:
:
Get
(
)
{
MOZ_ASSERT
(
instance
)
;
return
instance
;
}
CrossProcessMutex
*
CodeCoverageHandler
:
:
GetMutex
(
)
{
return
&
mGcovLock
;
}
CrossProcessMutexHandle
CodeCoverageHandler
:
:
GetMutexHandle
(
int
aProcId
)
{
return
mGcovLock
.
ShareToProcess
(
aProcId
)
;
}
