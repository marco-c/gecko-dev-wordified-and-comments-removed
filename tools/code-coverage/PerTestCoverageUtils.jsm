"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PerTestCoverageUtils
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
const
gcovPrefixPath
=
env
.
get
(
"
GCOV_PREFIX
"
)
;
const
gcovResultsPath
=
env
.
get
(
"
GCOV_RESULTS_DIR
"
)
;
const
jsvmPrefixPath
=
env
.
get
(
"
JS_CODE_COVERAGE_OUTPUT_DIR
"
)
;
const
jsvmResultsPath
=
env
.
get
(
"
JSVM_RESULTS_DIR
"
)
;
const
gcovPrefixDir
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
if
(
gcovPrefixPath
)
{
gcovPrefixDir
.
initWithPath
(
gcovPrefixPath
)
;
}
let
gcovResultsDir
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
if
(
gcovResultsPath
)
{
gcovResultsDir
.
initWithPath
(
gcovResultsPath
)
;
}
const
jsvmPrefixDir
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
if
(
jsvmPrefixPath
)
{
jsvmPrefixDir
.
initWithPath
(
jsvmPrefixPath
)
;
}
let
jsvmResultsDir
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
if
(
jsvmResultsPath
)
{
jsvmResultsDir
.
initWithPath
(
jsvmResultsPath
)
;
}
function
awaitPromise
(
promise
)
{
let
ret
;
let
complete
=
false
;
let
error
=
null
;
promise
.
catch
(
e
=
>
error
=
e
)
.
then
(
v
=
>
{
ret
=
v
;
complete
=
true
;
}
)
;
Services
.
tm
.
spinEventLoopUntil
(
(
)
=
>
complete
)
;
if
(
error
)
{
throw
new
Error
(
error
)
;
}
return
ret
;
}
function
removeDirectoryContents
(
dir
)
{
let
entries
=
dir
.
directoryEntries
;
while
(
entries
.
hasMoreElements
(
)
)
{
entries
.
nextFile
.
remove
(
true
)
;
}
}
function
moveDirectoryContents
(
src
dst
)
{
let
entries
=
src
.
directoryEntries
;
while
(
entries
.
hasMoreElements
(
)
)
{
entries
.
nextFile
.
moveTo
(
dst
null
)
;
}
}
var
PerTestCoverageUtils
=
class
PerTestCoverageUtilsClass
{
static
async
beforeTest
(
)
{
if
(
!
PerTestCoverageUtils
.
enabled
)
{
return
;
}
let
codeCoverageService
=
Cc
[
"
mozilla
.
org
/
tools
/
code
-
coverage
;
1
"
]
.
getService
(
Ci
.
nsICodeCoverage
)
;
await
codeCoverageService
.
flushCounters
(
)
;
removeDirectoryContents
(
gcovPrefixDir
)
;
removeDirectoryContents
(
jsvmPrefixDir
)
;
moveDirectoryContents
(
gcovResultsDir
gcovPrefixDir
)
;
moveDirectoryContents
(
jsvmResultsDir
jsvmPrefixDir
)
;
}
static
beforeTestSync
(
)
{
awaitPromise
(
this
.
beforeTest
(
)
)
;
}
static
async
afterTest
(
)
{
if
(
!
PerTestCoverageUtils
.
enabled
)
{
return
;
}
let
codeCoverageService
=
Cc
[
"
mozilla
.
org
/
tools
/
code
-
coverage
;
1
"
]
.
getService
(
Ci
.
nsICodeCoverage
)
;
await
codeCoverageService
.
flushCounters
(
)
;
moveDirectoryContents
(
gcovPrefixDir
gcovResultsDir
)
;
moveDirectoryContents
(
jsvmPrefixDir
jsvmResultsDir
)
;
}
static
afterTestSync
(
)
{
awaitPromise
(
this
.
afterTest
(
)
)
;
}
}
;
PerTestCoverageUtils
.
enabled
=
!
!
gcovResultsPath
;
