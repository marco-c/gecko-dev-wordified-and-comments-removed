function
warnForPath
(
inputFile
path
message
)
{
const
loc
=
path
.
node
.
loc
;
console
.
warn
(
WARNING
:
{
inputFile
}
:
{
loc
.
start
.
line
}
:
{
loc
.
start
.
column
}
:
{
message
}
)
;
}
function
getPrevStatement
(
path
)
{
const
parent
=
path
.
parent
;
if
(
parent
.
node
.
type
!
=
=
"
Program
"
)
{
return
null
;
}
const
index
=
parent
.
node
.
body
.
findIndex
(
n
=
>
n
=
=
path
.
node
)
;
if
(
index
=
=
=
-
1
)
{
return
null
;
}
if
(
index
=
=
=
0
)
{
return
null
;
}
return
parent
.
node
.
body
[
index
-
1
]
;
}
function
getNextStatement
(
path
)
{
const
parent
=
path
.
parent
;
if
(
parent
.
node
.
type
!
=
=
"
Program
"
)
{
return
null
;
}
const
index
=
parent
.
node
.
body
.
findIndex
(
n
=
>
n
=
=
path
.
node
)
;
if
(
index
=
=
=
-
1
)
{
return
null
;
}
if
(
index
+
1
=
=
parent
.
node
.
body
.
length
)
{
return
null
;
}
return
parent
.
node
.
body
[
index
+
1
]
;
}
function
isIdentifier
(
node
name
)
{
if
(
node
.
type
!
=
=
"
Identifier
"
)
{
return
false
;
}
if
(
node
.
name
!
=
=
name
)
{
return
false
;
}
return
true
;
}
function
isString
(
node
)
{
return
node
.
type
=
=
=
"
Literal
"
&
&
typeof
node
.
value
=
=
=
"
string
"
;
}
const
jsmExtPattern
=
/
\
.
(
jsm
|
js
|
jsm
\
.
js
)
/
;
function
esmifyExtension
(
path
)
{
return
path
.
replace
(
jsmExtPattern
"
.
sys
.
mjs
"
)
;
}
function
memberExpressionsToIdentifiers
(
memberExpr
)
{
let
ids
=
[
]
;
function
f
(
node
)
{
if
(
node
.
type
!
=
=
"
MemberExpression
"
|
|
node
.
computed
)
{
return
false
;
}
if
(
node
.
object
.
type
=
=
=
"
Identifier
"
)
{
ids
.
push
(
node
.
object
)
;
ids
.
push
(
node
.
property
)
;
return
true
;
}
if
(
!
f
(
node
.
object
)
)
{
return
false
;
}
ids
.
push
(
node
.
property
)
;
return
true
;
}
if
(
!
f
(
memberExpr
)
)
{
return
[
]
;
}
return
ids
;
}
function
isMemberExpressionWithIdentifiers
(
node
expectedIDs
)
{
const
actualIDs
=
memberExpressionsToIdentifiers
(
node
)
;
if
(
actualIDs
.
length
!
=
=
expectedIDs
.
length
)
{
return
false
;
}
for
(
let
i
=
0
;
i
<
expectedIDs
.
length
;
i
+
+
)
{
if
(
actualIDs
[
i
]
.
name
!
=
=
expectedIDs
[
i
]
)
{
return
false
;
}
}
return
true
;
}
function
rewriteMemberExpressionWithIdentifiers
(
node
toIDs
)
{
const
actualIDs
=
memberExpressionsToIdentifiers
(
node
)
;
for
(
let
i
=
0
;
i
<
toIDs
.
length
;
i
+
+
)
{
actualIDs
[
i
]
.
name
=
toIDs
[
i
]
;
}
}
function
createMemberExpressionWithIdentifiers
(
jscodeshift
ids
)
{
if
(
ids
.
length
<
2
)
{
throw
new
Error
(
"
Unexpected
length
of
ids
for
member
expression
"
)
;
}
if
(
ids
.
length
>
2
)
{
return
jscodeshift
.
memberExpression
(
createMemberExpressionWithIdentifiers
(
jscodeshift
ids
.
slice
(
0
-
1
)
)
jscodeshift
.
identifier
(
ids
[
ids
.
length
-
1
]
)
)
;
}
return
jscodeshift
.
memberExpression
(
jscodeshift
.
identifier
(
ids
[
0
]
)
jscodeshift
.
identifier
(
ids
[
1
]
)
)
;
}
exports
.
warnForPath
=
warnForPath
;
exports
.
getPrevStatement
=
getPrevStatement
;
exports
.
getNextStatement
=
getNextStatement
;
exports
.
isIdentifier
=
isIdentifier
;
exports
.
isString
=
isString
;
exports
.
jsmExtPattern
=
jsmExtPattern
;
exports
.
esmifyExtension
=
esmifyExtension
;
exports
.
isMemberExpressionWithIdentifiers
=
isMemberExpressionWithIdentifiers
;
exports
.
rewriteMemberExpressionWithIdentifiers
=
rewriteMemberExpressionWithIdentifiers
;
exports
.
createMemberExpressionWithIdentifiers
=
createMemberExpressionWithIdentifiers
;
