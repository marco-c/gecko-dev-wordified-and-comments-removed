import
json
import
os
import
re
import
signal
import
subprocess
import
sys
sys
.
path
.
append
(
os
.
path
.
join
(
os
.
path
.
dirname
(
__file__
)
"
eslint
"
)
)
from
eslint
import
setup_helper
from
mozbuild
.
nodeutil
import
find_node_executable
from
mozlint
import
result
STYLELINT_ERROR_MESSAGE
=
"
"
"
An
error
occurred
running
stylelint
.
Please
check
the
following
error
messages
:
{
}
"
"
"
.
strip
(
)
STYLELINT_NOT_FOUND_MESSAGE
=
"
"
"
Could
not
find
stylelint
!
We
looked
at
the
-
-
binary
option
at
the
STYLELINT
environment
variable
and
then
at
your
local
node_modules
path
.
Please
install
eslint
stylelint
and
needed
plugins
with
:
mach
eslint
-
-
setup
and
try
again
.
"
"
"
.
strip
(
)
FILE_EXT_REGEX
=
re
.
compile
(
r
"
\
.
[
a
-
z0
-
9_
]
{
2
10
}
"
re
.
IGNORECASE
)
def
setup
(
root
*
*
lintargs
)
:
    
setup_helper
.
set_project_root
(
root
)
    
if
not
setup_helper
.
check_node_executables_valid
(
)
:
        
return
1
    
return
setup_helper
.
eslint_maybe_setup
(
)
def
lint
(
paths
config
binary
=
None
fix
=
None
rules
=
[
]
setup
=
None
*
*
lintargs
)
:
    
"
"
"
Run
stylelint
.
"
"
"
    
log
=
lintargs
[
"
log
"
]
    
setup_helper
.
set_project_root
(
lintargs
[
"
root
"
]
)
    
module_path
=
setup_helper
.
get_project_root
(
)
    
modified_paths
=
[
]
    
exts
=
"
*
.
(
"
+
"
|
"
.
join
(
config
[
"
extensions
"
]
)
+
"
)
"
    
for
path
in
paths
:
        
filepath
fileext
=
os
.
path
.
splitext
(
path
)
        
if
fileext
:
            
modified_paths
+
=
[
path
]
        
else
:
            
modified_paths
+
=
[
os
.
path
.
join
(
path
"
*
*
"
+
os
.
path
.
sep
+
exts
)
]
    
if
not
binary
:
        
binary
_
=
find_node_executable
(
)
    
if
not
binary
:
        
print
(
STYLELINT_NOT_FOUND_MESSAGE
)
        
return
1
    
extra_args
=
lintargs
.
get
(
"
extra_args
"
)
or
[
]
    
exclude_args
=
[
]
    
for
path
in
config
.
get
(
"
exclude
"
[
]
)
:
        
exclude_args
.
extend
(
            
[
"
-
-
ignore
-
pattern
"
os
.
path
.
relpath
(
path
lintargs
[
"
root
"
]
)
]
        
)
    
cmd_args
=
(
        
[
            
binary
            
os
.
path
.
join
(
                
module_path
"
node_modules
"
"
stylelint
"
"
bin
"
"
stylelint
.
js
"
            
)
            
"
-
-
formatter
"
            
"
json
"
            
"
-
-
allow
-
empty
-
input
"
            
"
-
-
config
"
            
os
.
path
.
join
(
lintargs
[
"
root
"
]
"
.
stylelintrc
.
js
"
)
        
]
        
+
extra_args
        
+
exclude_args
        
+
modified_paths
    
)
    
if
fix
:
        
cmd_args
.
append
(
"
-
-
fix
"
)
    
log
.
debug
(
"
Stylelint
command
:
{
}
"
.
format
(
"
"
.
join
(
cmd_args
)
)
)
    
result
=
run
(
cmd_args
config
fix
)
    
if
result
=
=
1
:
        
return
result
    
return
result
def
run
(
cmd_args
config
fix
)
:
    
shell
=
False
    
if
(
        
os
.
environ
.
get
(
"
MSYSTEM
"
)
in
(
"
MINGW32
"
"
MINGW64
"
)
        
or
"
MOZILLABUILD
"
in
os
.
environ
    
)
:
        
shell
=
True
    
encoding
=
"
utf
-
8
"
    
orig
=
signal
.
signal
(
signal
.
SIGINT
signal
.
SIG_IGN
)
    
proc
=
subprocess
.
Popen
(
        
cmd_args
shell
=
shell
stdout
=
subprocess
.
PIPE
stderr
=
subprocess
.
PIPE
    
)
    
signal
.
signal
(
signal
.
SIGINT
orig
)
    
try
:
        
output
errors
=
proc
.
communicate
(
)
    
except
KeyboardInterrupt
:
        
proc
.
kill
(
)
        
return
{
"
results
"
:
[
]
"
fixed
"
:
0
}
    
if
errors
:
        
errors
=
errors
.
decode
(
encoding
"
replace
"
)
        
print
(
STYLELINT_ERROR_MESSAGE
.
format
(
errors
)
)
    
if
proc
.
returncode
!
=
0
and
proc
.
returncode
!
=
2
:
        
if
proc
.
returncode
=
=
78
:
            
print
(
"
Stylelint
reported
an
issue
with
its
configuration
file
.
"
)
            
print
(
output
)
        
return
1
    
if
not
output
:
        
return
{
"
results
"
:
[
]
"
fixed
"
:
0
}
    
output
=
output
.
decode
(
encoding
"
replace
"
)
    
try
:
        
jsonresult
=
json
.
loads
(
output
)
    
except
ValueError
:
        
print
(
STYLELINT_ERROR_MESSAGE
.
format
(
output
)
)
        
return
1
    
results
=
[
]
    
fixed
=
0
    
for
obj
in
jsonresult
:
        
errors
=
obj
[
"
warnings
"
]
+
obj
[
"
parseErrors
"
]
        
if
fix
and
not
errors
and
not
obj
.
get
(
"
ignored
"
)
:
            
fixed
+
=
1
        
for
err
in
errors
:
            
msg
=
err
.
get
(
"
text
"
)
            
if
err
.
get
(
"
rule
"
)
:
                
msg
=
msg
.
replace
(
"
(
"
+
err
.
get
(
"
rule
"
)
+
"
)
"
"
"
)
.
strip
(
)
            
err
.
update
(
                
{
                    
"
message
"
:
msg
                    
"
level
"
:
err
.
get
(
"
severity
"
)
or
"
error
"
                    
"
lineno
"
:
err
.
get
(
"
line
"
)
or
0
                    
"
path
"
:
obj
[
"
source
"
]
                    
"
rule
"
:
err
.
get
(
"
rule
"
)
or
"
parseError
"
                
}
            
)
            
results
.
append
(
result
.
from_config
(
config
*
*
err
)
)
    
return
{
"
results
"
:
results
"
fixed
"
:
fixed
}
