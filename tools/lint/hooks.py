from
__future__
import
absolute_import
print_function
import
os
import
signal
import
six
import
subprocess
import
sys
from
distutils
.
spawn
import
find_executable
here
=
os
.
path
.
dirname
(
os
.
path
.
realpath
(
__file__
)
)
topsrcdir
=
os
.
path
.
join
(
here
os
.
pardir
os
.
pardir
)
def
run_process
(
cmd
)
:
    
proc
=
subprocess
.
Popen
(
cmd
)
    
orig_handler
=
signal
.
signal
(
signal
.
SIGINT
signal
.
SIG_IGN
)
    
proc
.
wait
(
)
    
signal
.
signal
(
signal
.
SIGINT
orig_handler
)
    
return
proc
.
returncode
def
run_mozlint
(
hooktype
args
)
:
    
if
isinstance
(
hooktype
six
.
binary_type
)
:
        
hooktype
=
hooktype
.
decode
(
'
UTF
-
8
'
'
replace
'
)
    
python
=
find_executable
(
"
python3
"
)
    
if
not
python
:
        
print
(
"
error
:
Python
3
not
detected
on
your
system
!
Please
install
it
.
"
)
        
sys
.
exit
(
1
)
    
cmd
=
[
python
os
.
path
.
join
(
topsrcdir
"
mach
"
)
"
lint
"
"
-
-
quiet
"
]
    
if
"
commit
"
in
hooktype
:
        
run_process
(
cmd
+
[
"
-
-
workdir
=
staged
"
]
)
        
return
False
    
elif
"
push
"
in
hooktype
:
        
return
run_process
(
cmd
+
[
"
-
-
outgoing
"
]
+
args
)
    
print
(
"
warning
:
'
{
}
'
is
not
a
valid
mozlint
hooktype
"
.
format
(
hooktype
)
)
    
return
False
def
hg
(
ui
repo
*
*
kwargs
)
:
    
hooktype
=
kwargs
[
"
hooktype
"
]
    
return
run_mozlint
(
hooktype
kwargs
.
get
(
"
pats
"
[
]
)
)
def
git
(
)
:
    
hooktype
=
os
.
path
.
basename
(
__file__
)
    
if
hooktype
=
=
"
hooks
.
py
"
:
        
hooktype
=
"
pre
-
push
"
    
return
run_mozlint
(
hooktype
[
]
)
if
__name__
=
=
"
__main__
"
:
    
sys
.
exit
(
git
(
)
)
