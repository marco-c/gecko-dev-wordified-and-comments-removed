from
__future__
import
absolute_import
print_function
import
os
import
sys
import
yaml
from
mozlint
import
result
IGNORE_PREFS
=
{
    
'
devtools
.
console
.
stdout
.
chrome
'
    
'
devtools
.
console
.
stdout
.
content
'
    
'
fission
.
autostart
'
    
'
browser
.
dom
.
window
.
dump
.
enabled
'
}
def
get_names
(
pref_list_filename
)
:
    
pref_names
=
set
(
)
    
file
=
open
(
pref_list_filename
)
.
read
(
)
.
replace
(
'
'
'
'
)
    
try
:
        
pref_list
=
yaml
.
safe_load
(
file
)
    
except
(
IOError
ValueError
)
as
e
:
        
print
(
'
{
}
:
error
:
\
n
{
}
'
              
.
format
(
pref_list_filename
e
)
file
=
sys
.
stderr
)
        
sys
.
exit
(
1
)
    
for
pref
in
pref_list
:
        
if
pref
[
'
name
'
]
not
in
IGNORE_PREFS
:
            
pref_names
.
add
(
pref
[
'
name
'
]
)
    
return
pref_names
def
check_against
(
js_file_to_check
pref_names
)
:
    
with
open
(
js_file_to_check
)
as
source
:
        
found_dupes
=
set
(
)
        
errors
=
[
]
        
for
lineno
line
in
enumerate
(
source
start
=
1
)
:
            
if
'
pref
(
'
in
line
:
                
errors
.
extend
(
check_name_for_pref
(
line
.
strip
(
)
pref_names
found_dupes
lineno
)
)
        
return
errors
def
check_name_for_pref
(
pref
pref_names
found_dupes
lineno
)
:
    
groups
=
pref
.
split
(
'
"
'
)
    
errors
=
[
]
    
if
len
(
groups
)
>
1
and
'
/
/
'
not
in
groups
[
0
]
:
        
if
groups
[
1
]
in
pref_names
and
groups
[
1
]
not
in
found_dupes
:
            
found_dupes
.
add
(
groups
[
1
]
)
            
errors
.
append
(
{
                
'
message
'
:
pref
                
'
lineno
'
:
lineno
                
'
hint
'
:
'
Remove
the
duplicate
pref
or
add
it
to
IGNORE_PREFS
.
'
                
'
level
'
:
'
error
'
            
}
)
    
return
errors
def
checkdupes
(
paths
config
*
*
kwargs
)
:
    
results
=
[
]
    
topdir
=
os
.
path
.
join
(
kwargs
[
'
root
'
]
"
modules
"
"
libpref
"
"
init
"
)
    
pref_names
=
get_names
(
os
.
path
.
join
(
topdir
"
StaticPrefList
.
yaml
"
)
)
    
errors
=
check_against
(
os
.
path
.
join
(
topdir
"
all
.
js
"
)
pref_names
)
    
for
error
in
errors
:
        
results
.
append
(
result
.
from_config
(
config
*
*
error
)
)
    
return
results
