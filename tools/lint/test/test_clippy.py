import
mozunit
LINTER
=
"
clippy
"
fixed
=
0
def
test_good
(
lint
config
paths
)
:
    
results
=
lint
(
paths
(
"
test1
/
good
.
rs
"
)
)
    
print
(
results
)
    
assert
len
(
results
)
=
=
0
def
test_basic
(
lint
config
paths
)
:
    
results
=
lint
(
paths
(
"
test1
/
bad
.
rs
"
)
)
    
print
(
results
)
    
assert
isinstance
(
results
list
)
    
if
len
(
results
)
>
0
:
        
assert
"
bad
.
rs
"
in
results
[
0
]
.
path
        
assert
results
[
0
]
.
level
in
[
"
warning
"
"
error
"
]
def
test_multiple_files
(
lint
config
paths
)
:
    
results
=
lint
(
paths
(
"
test1
/
"
)
)
    
print
(
results
)
    
assert
isinstance
(
results
list
)
    
if
len
(
results
)
>
0
:
        
for
result
in
results
:
            
assert
"
good
.
rs
"
not
in
result
.
path
"
Good
file
should
not
have
lint
issues
"
def
test_non_gkrust_crate
(
lint
config
paths
)
:
    
results
=
lint
(
paths
(
"
test2
/
"
)
)
    
print
(
results
)
    
assert
isinstance
(
results
list
)
    
if
len
(
results
)
>
0
:
        
assert
results
[
0
]
.
level
in
[
"
warning
"
"
error
"
]
        
assert
"
test2
"
in
results
[
0
]
.
path
def
test_fix_gkrust
(
lint
paths
create_temp_file
)
:
    
"
"
"
Test
-
-
fix
option
for
gkrust
crate
files
"
"
"
    
contents
=
"
"
"
fn
main
(
)
{
    
let
mut
x
=
5
;
    
x
=
6
;
    
println
!
(
"
{
}
"
x
)
;
}
"
"
"
    
path
=
create_temp_file
(
contents
"
fixable
.
rs
"
)
    
results_before
=
lint
(
[
path
]
fix
=
False
)
    
results_after
=
lint
(
[
path
]
fix
=
True
)
    
assert
isinstance
(
results_before
list
)
    
assert
isinstance
(
results_after
list
)
    
assert
fixed
>
=
0
def
test_fix_non_gkrust
(
lint
paths
create_temp_file
)
:
    
"
"
"
Test
-
-
fix
option
for
non
-
gkrust
crate
files
"
"
"
    
contents
=
"
"
"
fn
main
(
)
{
    
let
mut
unused_var
=
5
;
    
unused_var
=
6
;
    
let
x
=
vec
!
[
1
2
3
]
;
    
for
i
in
0
.
.
x
.
len
(
)
{
        
println
!
(
"
{
}
"
x
[
i
]
)
;
    
}
}
"
"
"
    
path
=
create_temp_file
(
contents
"
non_gkrust_fixable
.
rs
"
)
    
global
fixed
    
fixed_before
=
fixed
    
results
=
lint
(
[
path
]
fix
=
True
)
    
assert
isinstance
(
results
list
)
    
assert
fixed
>
=
fixed_before
if
__name__
=
=
"
__main__
"
:
    
mozunit
.
main
(
)
