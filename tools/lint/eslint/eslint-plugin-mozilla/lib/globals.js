"
use
strict
"
;
const
path
=
require
(
"
path
"
)
;
const
fs
=
require
(
"
fs
"
)
;
const
helpers
=
require
(
"
.
/
helpers
"
)
;
const
escope
=
require
(
"
escope
"
)
;
const
estraverse
=
require
(
"
estraverse
"
)
;
function
parseBooleanConfig
(
string
comment
)
{
let
items
=
{
}
;
string
=
string
.
replace
(
/
\
s
*
:
\
s
*
/
g
"
:
"
)
;
string
=
string
.
replace
(
/
\
s
*
\
s
*
/
g
"
"
)
;
string
.
split
(
/
\
s
|
+
/
)
.
forEach
(
function
(
name
)
{
if
(
!
name
)
{
return
;
}
let
pos
=
name
.
indexOf
(
"
:
"
)
;
let
value
;
if
(
pos
!
=
=
-
1
)
{
value
=
name
.
substring
(
pos
+
1
name
.
length
)
;
name
=
name
.
substring
(
0
pos
)
;
}
items
[
name
]
=
{
value
:
(
value
=
=
=
"
true
"
)
comment
}
;
}
)
;
return
items
;
}
const
globalCache
=
new
Map
(
)
;
var
globalDiscoveryInProgressForFiles
=
new
Set
(
)
;
function
GlobalsForNode
(
filePath
)
{
this
.
path
=
filePath
;
this
.
dirname
=
path
.
dirname
(
this
.
path
)
;
this
.
root
=
helpers
.
getRootDir
(
this
.
path
)
;
}
GlobalsForNode
.
prototype
=
{
BlockComment
(
node
parents
)
{
let
value
=
node
.
value
.
trim
(
)
;
let
match
=
/
^
import
-
globals
-
from
\
s
+
(
.
+
)
/
.
exec
(
value
)
;
if
(
!
match
)
{
return
[
]
;
}
let
filePath
=
match
[
1
]
.
trim
(
)
;
if
(
!
path
.
isAbsolute
(
filePath
)
)
{
filePath
=
path
.
resolve
(
this
.
dirname
filePath
)
;
}
return
module
.
exports
.
getGlobalsForFile
(
filePath
)
;
}
ExpressionStatement
(
node
parents
globalScope
)
{
let
isGlobal
=
helpers
.
getIsGlobalScope
(
parents
)
;
let
globals
=
helpers
.
convertExpressionToGlobals
(
node
isGlobal
this
.
root
)
;
globals
=
globals
.
map
(
name
=
>
{
return
{
name
writable
:
true
}
;
}
)
;
if
(
globalScope
&
&
globalScope
.
set
.
get
(
"
importScripts
"
)
)
{
let
workerDetails
=
helpers
.
convertWorkerExpressionToGlobals
(
node
isGlobal
this
.
root
this
.
dirname
)
;
globals
=
globals
.
concat
(
workerDetails
)
;
}
return
globals
;
}
}
;
module
.
exports
=
{
getGlobalsForFile
(
path
)
{
if
(
globalCache
.
has
(
path
)
)
{
return
globalCache
.
get
(
path
)
;
}
if
(
globalDiscoveryInProgressForFiles
.
has
(
path
)
)
{
return
[
]
;
}
globalDiscoveryInProgressForFiles
.
add
(
path
)
;
let
content
=
fs
.
readFileSync
(
path
"
utf8
"
)
;
let
ast
=
helpers
.
getAST
(
content
)
;
let
scopeManager
=
escope
.
analyze
(
ast
)
;
let
globalScope
=
scopeManager
.
acquire
(
ast
)
;
let
globals
=
Object
.
keys
(
globalScope
.
variables
)
.
map
(
v
=
>
(
{
name
:
globalScope
.
variables
[
v
]
.
name
writable
:
true
}
)
)
;
let
handler
=
new
GlobalsForNode
(
path
)
;
helpers
.
walkAST
(
ast
(
type
node
parents
)
=
>
{
if
(
type
=
=
"
BlockComment
"
)
{
let
value
=
node
.
value
.
trim
(
)
;
value
=
value
.
replace
(
/
\
n
/
g
"
"
)
;
let
match
=
/
^
globals
?
\
s
+
(
.
+
)
/
.
exec
(
value
)
;
if
(
match
)
{
let
values
=
parseBooleanConfig
(
match
[
1
]
.
trim
(
)
node
)
;
for
(
let
name
of
Object
.
keys
(
values
)
)
{
globals
.
push
(
{
name
writable
:
values
[
name
]
.
value
}
)
;
}
}
}
if
(
type
in
handler
)
{
let
newGlobals
=
handler
[
type
]
(
node
parents
globalScope
)
;
globals
.
push
.
apply
(
globals
newGlobals
)
;
}
}
)
;
globalCache
.
set
(
path
globals
)
;
globalDiscoveryInProgressForFiles
.
delete
(
path
)
;
return
globals
;
}
getESLintGlobalParser
(
context
)
{
let
globalScope
;
let
parser
=
{
Program
(
node
)
{
globalScope
=
context
.
getScope
(
)
;
}
}
;
let
handler
=
new
GlobalsForNode
(
helpers
.
getAbsoluteFilePath
(
context
)
)
;
for
(
let
type
of
Object
.
keys
(
GlobalsForNode
.
prototype
)
)
{
parser
[
type
]
=
function
(
node
)
{
if
(
type
=
=
=
"
Program
"
)
{
globalScope
=
context
.
getScope
(
)
;
}
let
globals
=
handler
[
type
]
(
node
context
.
getAncestors
(
)
globalScope
)
;
helpers
.
addGlobals
(
globals
globalScope
)
;
}
;
}
return
parser
;
}
}
;
