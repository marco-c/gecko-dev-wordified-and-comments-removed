"
use
strict
"
;
const
helpers
=
require
(
"
.
.
/
helpers
"
)
;
const
fs
=
require
(
"
fs
"
)
;
const
path
=
require
(
"
path
"
)
;
var
servicesASTParser
=
{
identifiers
:
{
}
result
:
{
"
nsIPrefBranch
"
:
"
prefs
"
"
nsIPrefService
"
:
"
prefs
"
"
nsIXULRuntime
"
:
"
appInfo
"
"
nsIXULAppInfo
"
:
"
appInfo
"
"
nsIDirectoryService
"
:
"
dirsvc
"
"
nsIProperties
"
:
"
dirsvc
"
"
nsIFrameScriptLoader
"
:
"
mm
"
"
nsIProcessScriptLoader
"
:
"
ppmm
"
"
nsIIOService
"
:
"
io
"
"
nsISpeculativeConnect
"
:
"
io
"
"
nsICookieManager
"
:
"
cookies
"
}
VariableDeclaration
(
node
parents
)
{
if
(
node
.
declarations
.
length
=
=
=
1
&
&
node
.
declarations
[
0
]
.
id
&
&
helpers
.
getIsGlobalScope
(
parents
)
&
&
node
.
declarations
[
0
]
.
init
.
type
=
=
=
"
ObjectExpression
"
)
{
let
name
=
node
.
declarations
[
0
]
.
id
.
name
;
let
interfaces
=
{
}
;
for
(
let
property
of
node
.
declarations
[
0
]
.
init
.
properties
)
{
interfaces
[
property
.
key
.
name
]
=
property
.
value
.
elements
[
1
]
.
value
;
}
this
.
identifiers
[
name
]
=
interfaces
;
}
}
AssignmentExpression
(
node
parents
)
{
if
(
node
.
left
.
type
=
=
=
"
MemberExpression
"
&
&
node
.
right
.
type
=
=
=
"
ArrayExpression
"
&
&
helpers
.
getIsGlobalScope
(
parents
)
)
{
let
variableName
=
node
.
left
.
object
.
name
;
if
(
variableName
in
this
.
identifiers
)
{
let
servicesPropName
=
node
.
left
.
property
.
name
;
this
.
identifiers
[
variableName
]
[
servicesPropName
]
=
node
.
right
.
elements
[
1
]
.
value
;
}
}
}
CallExpression
(
node
)
{
if
(
node
.
callee
.
object
&
&
node
.
callee
.
object
.
name
=
=
=
"
XPCOMUtils
"
&
&
node
.
callee
.
property
&
&
node
.
callee
.
property
.
name
=
=
=
"
defineLazyServiceGetters
"
&
&
node
.
arguments
.
length
>
=
2
)
{
let
gettersVarName
=
node
.
arguments
[
1
]
.
name
;
if
(
!
(
gettersVarName
in
this
.
identifiers
)
)
{
throw
new
Error
(
Could
not
find
definition
for
{
gettersVarName
}
)
;
}
for
(
let
name
of
Object
.
keys
(
this
.
identifiers
[
gettersVarName
]
)
)
{
this
.
result
[
this
.
identifiers
[
gettersVarName
]
[
name
]
]
=
name
;
}
}
}
}
;
function
getInterfacesFromServicesFile
(
)
{
let
filePath
=
path
.
join
(
helpers
.
rootDir
"
toolkit
"
"
modules
"
"
Services
.
jsm
"
)
;
let
content
=
fs
.
readFileSync
(
filePath
"
utf8
"
)
;
let
ast
=
helpers
.
getAST
(
content
)
;
helpers
.
walkAST
(
ast
(
type
node
parents
)
=
>
{
if
(
type
in
servicesASTParser
)
{
servicesASTParser
[
type
]
(
node
parents
)
;
}
}
)
;
return
servicesASTParser
.
result
;
}
let
getServicesInterfaceMap
=
helpers
.
isMozillaCentralBased
(
)
?
getInterfacesFromServicesFile
(
)
:
helpers
.
getSavedRuleData
(
"
use
-
services
.
js
"
)
;
module
.
exports
=
function
(
context
)
{
return
{
getServicesInterfaceMap
(
)
{
return
getServicesInterfaceMap
;
}
CallExpression
(
node
)
{
if
(
!
node
.
callee
|
|
!
node
.
callee
.
property
|
|
node
.
callee
.
property
.
type
!
=
"
Identifier
"
|
|
node
.
callee
.
property
.
name
!
=
"
getService
"
|
|
node
.
arguments
.
length
!
=
1
|
|
!
node
.
arguments
[
0
]
.
property
|
|
node
.
arguments
[
0
]
.
property
.
type
!
=
"
Identifier
"
|
|
!
node
.
arguments
[
0
]
.
property
.
name
|
|
!
(
node
.
arguments
[
0
]
.
property
.
name
in
getServicesInterfaceMap
)
)
{
return
;
}
let
serviceName
=
getServicesInterfaceMap
[
node
.
arguments
[
0
]
.
property
.
name
]
;
context
.
report
(
node
Use
Services
.
{
serviceName
}
rather
than
getService
(
)
.
)
;
}
}
;
}
;
