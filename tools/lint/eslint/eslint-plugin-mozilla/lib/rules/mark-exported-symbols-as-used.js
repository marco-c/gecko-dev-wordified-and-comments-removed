"
use
strict
"
;
function
markArrayElementsAsUsed
(
context
node
expression
)
{
if
(
expression
.
type
!
=
"
ArrayExpression
"
)
{
context
.
report
(
{
node
message
:
"
Unexpected
assignment
of
non
-
Array
to
EXPORTED_SYMBOLS
"
}
)
;
return
;
}
for
(
let
element
of
expression
.
elements
)
{
context
.
markVariableAsUsed
(
element
.
value
)
;
}
}
module
.
exports
=
function
(
context
)
{
function
isGlobalScope
(
)
{
return
!
context
.
getScope
(
)
.
upper
;
}
return
{
AssignmentExpression
(
node
parents
)
{
if
(
node
.
operator
=
=
=
"
=
"
&
&
node
.
left
.
type
=
=
=
"
MemberExpression
"
&
&
node
.
left
.
object
.
type
=
=
=
"
ThisExpression
"
&
&
node
.
left
.
property
.
name
=
=
=
"
EXPORTED_SYMBOLS
"
&
&
isGlobalScope
(
)
)
{
markArrayElementsAsUsed
(
context
node
node
.
right
)
;
}
}
VariableDeclaration
(
node
parents
)
{
if
(
!
isGlobalScope
(
)
)
{
return
;
}
for
(
let
item
of
node
.
declarations
)
{
if
(
item
.
id
&
&
item
.
id
.
type
=
=
"
Identifier
"
&
&
item
.
id
.
name
=
=
=
"
EXPORTED_SYMBOLS
"
)
{
if
(
node
.
kind
=
=
=
"
let
"
)
{
context
.
report
(
{
node
message
:
"
EXPORTED_SYMBOLS
cannot
be
declared
via
let
.
Use
var
or
this
.
EXPORTED_SYMBOLS
=
"
}
)
;
}
markArrayElementsAsUsed
(
context
node
item
.
init
)
;
}
}
}
}
;
}
;
