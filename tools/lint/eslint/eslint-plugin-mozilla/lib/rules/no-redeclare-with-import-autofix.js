"
use
strict
"
;
const
{
dirname
join
}
=
require
(
"
path
"
)
;
const
eslintBasePath
=
dirname
(
require
.
resolve
(
"
eslint
"
)
)
;
const
noredeclarePath
=
join
(
eslintBasePath
"
rules
/
no
-
redeclare
.
js
"
)
;
const
baseRule
=
require
(
noredeclarePath
)
;
const
astUtils
=
require
(
join
(
eslintBasePath
"
rules
/
utils
/
ast
-
utils
.
js
"
)
)
;
const
gIgnoredImports
=
new
Set
(
[
"
loader
"
"
require
"
]
)
;
function
trapReport
(
context
)
{
return
function
(
obj
)
{
let
declarator
=
obj
.
node
.
parent
;
while
(
declarator
&
&
declarator
.
parent
&
&
declarator
.
type
!
=
"
VariableDeclarator
"
)
{
declarator
=
declarator
.
parent
;
}
if
(
declarator
&
&
declarator
.
type
=
=
"
VariableDeclarator
"
&
&
declarator
.
id
.
type
=
=
"
ObjectPattern
"
&
&
declarator
.
init
.
type
=
=
"
CallExpression
"
)
{
let
initialization
=
declarator
.
init
;
if
(
astUtils
.
isSpecificMemberAccess
(
initialization
.
callee
"
ChromeUtils
"
/
^
importESModule
/
)
)
{
if
(
gIgnoredImports
.
has
(
obj
.
node
.
name
)
)
{
return
;
}
if
(
declarator
.
id
.
properties
.
length
=
=
1
)
{
context
.
report
(
{
node
:
declarator
.
parent
messageId
:
"
duplicateImport
"
data
:
{
name
:
declarator
.
id
.
properties
[
0
]
.
key
.
name
}
fix
(
fixer
)
{
return
fixer
.
remove
(
declarator
.
parent
)
;
}
}
)
;
return
;
}
let
node
=
obj
.
node
.
parent
;
let
sourceCode
=
context
.
getSourceCode
(
)
;
let
rangeToRemove
=
node
.
range
;
let
tokenAfter
=
sourceCode
.
getTokenAfter
(
node
)
;
let
tokenBefore
=
sourceCode
.
getTokenBefore
(
node
)
;
if
(
astUtils
.
isCommaToken
(
tokenAfter
)
)
{
rangeToRemove
[
1
]
=
tokenAfter
.
range
[
1
]
;
}
else
if
(
astUtils
.
isCommaToken
(
tokenBefore
)
)
{
rangeToRemove
[
0
]
=
tokenBefore
.
range
[
0
]
;
}
context
.
report
(
{
node
messageId
:
"
duplicateImport
"
data
:
{
name
:
node
.
key
.
name
}
fix
(
fixer
)
{
return
fixer
.
removeRange
(
rangeToRemove
)
;
}
}
)
;
return
;
}
}
if
(
context
.
options
[
0
]
?
.
errorForNonImports
)
{
context
.
report
(
obj
)
;
}
}
;
}
module
.
exports
=
{
meta
:
{
docs
:
{
url
:
"
https
:
/
/
firefox
-
source
-
docs
.
mozilla
.
org
/
code
-
quality
/
lint
/
linters
/
eslint
-
plugin
-
mozilla
/
rules
/
no
-
redeclare
-
with
-
import
-
autofix
.
html
"
}
messages
:
{
.
.
.
baseRule
.
meta
.
messages
duplicateImport
:
"
The
import
of
'
{
{
name
}
}
'
is
redundant
with
one
set
up
earlier
(
e
.
g
.
head
.
js
or
the
browser
window
environment
)
.
It
should
be
removed
.
"
}
schema
:
[
{
type
:
"
object
"
properties
:
{
errorForNonImports
:
{
type
:
"
boolean
"
default
:
true
}
}
additionalProperties
:
false
}
]
type
:
"
suggestion
"
fixable
:
"
code
"
}
create
(
context
)
{
let
newOptions
=
[
{
builtinGlobals
:
true
}
]
;
const
contextForBaseRule
=
Object
.
create
(
context
{
report
:
{
value
:
trapReport
(
context
)
writable
:
false
}
options
:
{
value
:
newOptions
}
}
)
;
return
baseRule
.
create
(
contextForBaseRule
)
;
}
}
;
