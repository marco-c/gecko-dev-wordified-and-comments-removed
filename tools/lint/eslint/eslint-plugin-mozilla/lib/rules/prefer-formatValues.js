"
use
strict
"
;
function
isIdentifier
(
node
id
)
{
return
node
&
&
node
.
type
=
=
=
"
Identifier
"
&
&
node
.
name
=
=
=
id
;
}
const
BlockStack
=
[
]
;
module
.
exports
=
{
meta
:
{
docs
:
{
description
:
"
disallow
multiple
document
.
l10n
.
formatValue
calls
"
url
:
"
https
:
/
/
firefox
-
source
-
docs
.
mozilla
.
org
/
code
-
quality
/
lint
/
linters
/
eslint
-
plugin
-
mozilla
/
prefer
-
formatValues
.
html
"
}
type
:
"
problem
"
}
create
(
context
)
{
function
enterBlock
(
)
{
BlockStack
.
push
(
new
Set
(
)
)
;
}
function
exitBlock
(
)
{
let
calls
=
BlockStack
.
pop
(
)
;
if
(
calls
.
size
>
1
)
{
for
(
let
callNode
of
calls
)
{
context
.
report
(
callNode
"
prefer
to
use
a
single
document
.
l10n
.
formatValues
call
instead
"
+
"
of
multiple
calls
to
document
.
l10n
.
formatValue
or
document
.
l10n
.
formatValues
"
)
;
}
}
}
return
{
Program
:
enterBlock
"
Program
:
exit
"
:
exitBlock
BlockStatement
:
enterBlock
"
BlockStatement
:
exit
"
:
exitBlock
CallExpression
(
node
)
{
if
(
!
BlockStack
.
length
)
{
context
.
report
(
node
"
call
expression
found
outside
of
known
block
"
)
;
}
let
callee
=
node
.
callee
;
if
(
callee
.
type
!
=
=
"
MemberExpression
"
)
{
return
;
}
if
(
!
isIdentifier
(
callee
.
property
"
formatValue
"
)
&
&
!
isIdentifier
(
callee
.
property
"
formatValues
"
)
)
{
return
;
}
if
(
callee
.
object
.
type
!
=
=
"
MemberExpression
"
)
{
return
;
}
if
(
!
isIdentifier
(
callee
.
object
.
object
"
document
"
)
|
|
!
isIdentifier
(
callee
.
object
.
property
"
l10n
"
)
)
{
return
;
}
let
calls
=
BlockStack
[
BlockStack
.
length
-
1
]
;
calls
.
add
(
node
)
;
}
}
;
}
}
;
