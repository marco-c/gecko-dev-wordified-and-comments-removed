"
use
strict
"
;
var
helpers
=
require
(
"
.
.
/
helpers
"
)
;
module
.
exports
=
function
(
context
)
{
return
{
"
CallExpression
"
:
function
(
node
)
{
let
callee
=
node
.
callee
;
if
(
callee
.
type
!
=
=
"
MemberExpression
"
|
|
callee
.
property
.
type
!
=
=
"
Identifier
"
)
{
return
;
}
if
(
(
callee
.
property
.
name
=
=
=
"
addEventListener
"
|
|
callee
.
property
.
name
=
=
=
"
removeEventListener
"
)
&
&
node
.
arguments
.
length
=
=
=
3
)
{
let
arg
=
node
.
arguments
[
2
]
;
if
(
arg
.
type
=
=
=
"
Literal
"
&
&
arg
.
value
=
=
=
false
)
{
context
.
report
(
node
callee
.
property
.
name
+
"
'
s
third
parameter
can
be
omitted
when
it
'
s
false
.
"
)
;
}
}
if
(
callee
.
property
.
name
=
=
"
clearUserPref
"
&
&
node
.
arguments
.
length
>
1
)
{
context
.
report
(
node
callee
.
property
.
name
+
"
takes
only
1
parameter
.
"
)
;
}
if
(
callee
.
property
.
name
=
=
=
"
removeObserver
"
&
&
node
.
arguments
.
length
=
=
=
3
)
{
let
arg
=
node
.
arguments
[
2
]
;
if
(
arg
.
type
=
=
=
"
Literal
"
&
&
(
arg
.
value
=
=
=
false
|
|
arg
.
value
=
=
=
true
)
)
{
context
.
report
(
node
"
removeObserver
only
takes
2
parameters
.
"
)
;
}
}
if
(
callee
.
property
.
name
=
=
=
"
getComputedStyle
"
&
&
node
.
arguments
.
length
=
=
=
2
)
{
let
arg
=
node
.
arguments
[
1
]
;
if
(
arg
.
type
=
=
=
"
Literal
"
&
&
!
arg
.
value
)
{
context
.
report
(
node
"
getComputedStyle
'
s
second
parameter
can
be
omitted
.
"
)
;
}
}
if
(
callee
.
property
.
name
=
=
=
"
newURI
"
&
&
node
.
arguments
.
length
>
1
)
{
let
arg
=
node
.
arguments
[
node
.
arguments
.
length
-
1
]
;
if
(
arg
.
type
=
=
=
"
Literal
"
&
&
!
arg
.
value
)
{
context
.
report
(
node
"
newURI
'
s
last
parameters
are
optional
.
"
)
;
}
}
}
}
;
}
;
