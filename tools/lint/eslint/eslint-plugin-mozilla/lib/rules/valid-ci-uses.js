"
use
strict
"
;
const
os
=
require
(
"
os
"
)
;
const
helpers
=
require
(
"
.
.
/
helpers
"
)
;
const
platformSpecificInterfaces
=
new
Map
(
[
[
"
nsIAboutThirdParty
"
"
windows
"
]
[
"
nsIJumpListItem
"
"
windows
"
]
[
"
nsIJumpListLink
"
"
windows
"
]
[
"
nsIJumpListSeparator
"
"
windows
"
]
[
"
nsIJumpListShortcut
"
"
windows
"
]
[
"
nsITaskbarWindowPreview
"
"
windows
"
]
[
"
nsIWindowsAlertsService
"
"
windows
"
]
[
"
nsIWinAppHelper
"
"
windows
"
]
[
"
nsIWinTaskbar
"
"
windows
"
]
[
"
nsIWinTaskSchedulerService
"
"
windows
"
]
[
"
nsIWindowsRegKey
"
"
windows
"
]
[
"
nsIWindowsPackageManager
"
"
windows
"
]
[
"
nsIWindowsShellService
"
"
windows
"
]
[
"
nsIMacShellService
"
"
darwin
"
]
[
"
nsIMacDockSupport
"
"
darwin
"
]
[
"
nsIMacFinderProgress
"
"
darwin
"
]
[
"
nsIMacSharingService
"
"
darwin
"
]
[
"
nsIMacUserActivityUpdater
"
"
darwin
"
]
[
"
nsIMacWebAppUtils
"
"
darwin
"
]
[
"
nsIStandaloneNativeMenu
"
"
darwin
"
]
[
"
nsITouchBarHelper
"
"
darwin
"
]
[
"
nsITouchBarInput
"
"
darwin
"
]
[
"
nsITouchBarUpdater
"
"
darwin
"
]
[
"
mozISandboxReporter
"
"
linux
"
]
[
"
nsIApplicationChooser
"
"
linux
"
]
[
"
nsIGNOMEShellService
"
"
linux
"
]
[
"
nsIGtkTaskbarProgress
"
"
linux
"
]
[
"
amIFoo
"
"
any
"
]
[
"
nsIMeh
"
"
any
"
]
[
"
nsIAndroidBridge
"
"
any
"
]
[
"
nsIAndroidView
"
"
any
"
]
[
"
nsICodeCoverage
"
"
any
"
]
[
"
nsILayoutDebuggingTools
"
"
any
"
]
[
"
mozISandboxTest
"
"
any
"
]
]
)
;
function
interfaceHasProperty
(
interfaceName
propertyName
)
{
if
(
propertyName
=
=
"
number
"
)
{
return
true
;
}
let
interfaceInfo
=
helpers
.
xpidlData
.
get
(
interfaceName
)
;
if
(
!
interfaceInfo
)
{
return
true
;
}
if
(
!
interfaceInfo
.
consts
.
find
(
e
=
>
e
.
name
=
=
=
propertyName
)
)
{
if
(
interfaceInfo
.
parent
&
&
interfaceInfo
.
parent
!
=
"
nsISupports
"
)
{
return
interfaceHasProperty
(
interfaceName
.
parent
propertyName
)
;
}
return
false
;
}
return
true
;
}
module
.
exports
=
{
meta
:
{
docs
:
{
url
:
"
https
:
/
/
firefox
-
source
-
docs
.
mozilla
.
org
/
code
-
quality
/
lint
/
linters
/
eslint
-
plugin
-
mozilla
/
valid
-
ci
-
uses
.
html
"
}
messages
:
{
missingInterface
:
"
{
{
interface
}
}
is
defined
in
this
rule
'
s
platform
specific
list
but
is
not
available
"
unknownInterface
:
"
Use
of
unknown
interface
Ci
.
{
{
interface
}
}
"
unknownProperty
:
"
Use
of
unknown
property
Ci
.
{
{
interface
}
}
.
{
{
property
}
}
"
}
type
:
"
problem
"
}
create
(
context
)
{
return
{
MemberExpression
(
node
)
{
if
(
node
.
computed
=
=
=
false
&
&
node
.
type
=
=
=
"
MemberExpression
"
&
&
node
.
object
.
type
=
=
=
"
Identifier
"
&
&
node
.
object
.
name
=
=
=
"
Ci
"
&
&
node
.
property
.
type
=
=
=
"
Identifier
"
&
&
node
.
property
.
name
.
includes
(
"
I
"
)
)
{
if
(
!
helpers
.
xpidlData
.
get
(
node
.
property
.
name
)
)
{
let
platformSpecific
=
platformSpecificInterfaces
.
get
(
node
.
property
.
name
)
;
if
(
!
platformSpecific
)
{
context
.
report
(
{
node
messageId
:
"
unknownInterface
"
data
:
{
interface
:
node
.
property
.
name
}
}
)
;
}
else
if
(
platformSpecific
=
=
os
.
platform
)
{
context
.
report
(
{
node
messageId
:
"
missingInterface
"
data
:
{
interface
:
node
.
property
.
name
}
}
)
;
}
}
}
if
(
node
.
computed
=
=
=
false
&
&
node
.
object
.
type
=
=
=
"
MemberExpression
"
&
&
node
.
object
.
object
.
type
=
=
=
"
Identifier
"
&
&
node
.
object
.
object
.
name
=
=
=
"
Ci
"
&
&
node
.
object
.
property
.
type
=
=
=
"
Identifier
"
&
&
node
.
object
.
property
.
name
.
includes
(
"
I
"
)
&
&
node
.
property
.
type
=
=
=
"
Identifier
"
)
{
if
(
!
interfaceHasProperty
(
node
.
object
.
property
.
name
node
.
property
.
name
)
)
{
context
.
report
(
{
node
messageId
:
"
unknownProperty
"
data
:
{
interface
:
node
.
object
.
property
.
name
property
:
node
.
property
.
name
}
}
)
;
}
}
}
}
;
}
}
;
