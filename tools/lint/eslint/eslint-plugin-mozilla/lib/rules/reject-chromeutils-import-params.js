"
use
strict
"
;
function
isIdentifier
(
node
id
)
{
return
node
&
&
node
.
type
=
=
=
"
Identifier
"
&
&
node
.
name
=
=
=
id
;
}
function
getRangeAfterArgToEnd
(
context
argNumber
args
)
{
let
sourceCode
=
context
.
getSourceCode
(
)
;
return
[
sourceCode
.
getTokenAfter
(
args
[
argNumber
]
)
.
range
[
0
]
args
[
args
.
length
-
1
]
.
range
[
1
]
]
;
}
module
.
exports
=
{
meta
:
{
docs
:
{
url
:
"
https
:
/
/
firefox
-
source
-
docs
.
mozilla
.
org
/
code
-
quality
/
lint
/
linters
/
eslint
-
plugin
-
mozilla
/
rules
/
reject
-
chromeutils
-
import
-
params
.
html
"
}
hasSuggestions
:
true
messages
:
{
importOnlyOneArg
:
"
ChromeUtils
.
import
only
takes
one
argument
.
"
importOnlyOneArgSuggestion
:
"
Remove
the
unnecessary
parameters
.
"
}
schema
:
[
]
type
:
"
problem
"
}
create
(
context
)
{
return
{
CallExpression
(
node
)
{
let
{
callee
}
=
node
;
if
(
isIdentifier
(
callee
.
object
"
ChromeUtils
"
)
&
&
isIdentifier
(
callee
.
property
"
import
"
)
&
&
node
.
arguments
.
length
>
=
2
)
{
context
.
report
(
{
node
messageId
:
"
importOnlyOneArg
"
suggest
:
[
{
messageId
:
"
importOnlyOneArgSuggestion
"
fix
:
fixer
=
>
{
return
fixer
.
removeRange
(
getRangeAfterArgToEnd
(
context
0
node
.
arguments
)
)
;
}
}
]
}
)
;
}
}
}
;
}
}
;
