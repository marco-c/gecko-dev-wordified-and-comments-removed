"
use
strict
"
;
var
helpers
=
require
(
"
.
.
/
helpers
"
)
;
var
cpows
=
[
/
^
gBrowser
\
.
contentWindow
/
/
^
gBrowser
\
.
contentDocument
/
/
^
gBrowser
\
.
selectedBrowser
.
contentWindow
/
/
^
browser
\
.
contentDocument
/
/
^
window
\
.
content
/
]
;
var
isInContentTask
=
false
;
module
.
exports
=
function
(
context
)
{
function
showError
(
node
identifier
)
{
if
(
isInContentTask
)
{
return
;
}
context
.
report
(
{
node
message
:
identifier
+
"
is
a
possible
Cross
Process
Object
Wrapper
(
CPOW
)
.
"
}
)
;
}
function
isContentTask
(
node
)
{
return
node
&
&
node
.
type
=
=
=
"
MemberExpression
"
&
&
node
.
property
.
type
=
=
=
"
Identifier
"
&
&
node
.
property
.
name
=
=
=
"
spawn
"
&
&
node
.
object
.
type
=
=
=
"
Identifier
"
&
&
node
.
object
.
name
=
=
=
"
ContentTask
"
;
}
return
{
CallExpression
(
node
)
{
if
(
isContentTask
(
node
.
callee
)
)
{
isInContentTask
=
true
;
}
}
"
CallExpression
:
exit
"
:
function
(
node
)
{
if
(
isContentTask
(
node
.
callee
)
)
{
isInContentTask
=
false
;
}
}
MemberExpression
(
node
)
{
if
(
helpers
.
getTestType
(
context
)
!
=
"
browser
"
)
{
return
;
}
var
expression
=
context
.
getSource
(
node
)
;
var
someCpowFound
=
cpows
.
some
(
function
(
cpow
)
{
if
(
cpow
.
test
(
expression
)
)
{
showError
(
node
expression
)
;
return
true
;
}
return
false
;
}
)
;
if
(
!
someCpowFound
&
&
helpers
.
getIsGlobalScope
(
context
.
getAncestors
(
)
)
)
{
if
(
/
^
content
\
.
/
.
test
(
expression
)
)
{
showError
(
node
expression
)
;
}
}
}
Identifier
(
node
)
{
if
(
helpers
.
getTestType
(
context
)
!
=
"
browser
"
)
{
return
;
}
var
expression
=
context
.
getSource
(
node
)
;
if
(
expression
=
=
"
content
"
|
|
/
^
content
\
.
/
.
test
(
expression
)
)
{
if
(
node
.
parent
.
type
=
=
=
"
MemberExpression
"
&
&
node
.
parent
.
object
&
&
node
.
parent
.
object
.
type
=
=
=
"
Identifier
"
&
&
node
.
parent
.
object
.
name
!
=
"
content
"
)
{
return
;
}
showError
(
node
expression
)
;
}
}
}
;
}
;
