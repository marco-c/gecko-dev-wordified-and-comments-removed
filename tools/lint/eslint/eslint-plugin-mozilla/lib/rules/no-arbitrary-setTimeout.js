"
use
strict
"
;
var
helpers
=
require
(
"
.
.
/
helpers
"
)
;
var
testTypes
=
new
Set
(
[
"
browser
"
"
xpcshell
"
]
)
;
module
.
exports
=
{
meta
:
{
docs
:
{
url
:
"
https
:
/
/
firefox
-
source
-
docs
.
mozilla
.
org
/
code
-
quality
/
lint
/
linters
/
eslint
-
plugin
-
mozilla
/
no
-
arbitrary
-
setTimeout
.
html
"
}
messages
:
{
listenForEvents
:
"
listen
for
events
instead
of
setTimeout
(
)
with
arbitrary
delay
"
}
schema
:
[
]
type
:
"
problem
"
}
create
(
context
)
{
if
(
!
testTypes
.
has
(
helpers
.
getTestType
(
context
)
)
)
{
return
{
}
;
}
return
{
CallExpression
(
node
)
{
let
callee
=
node
.
callee
;
if
(
callee
.
type
=
=
=
"
MemberExpression
"
)
{
if
(
callee
.
property
.
name
!
=
=
"
setTimeout
"
|
|
callee
.
object
.
name
!
=
=
"
window
"
|
|
node
.
arguments
.
length
<
2
)
{
return
;
}
}
else
if
(
callee
.
type
=
=
=
"
Identifier
"
)
{
if
(
callee
.
name
!
=
=
"
setTimeout
"
|
|
node
.
arguments
.
length
<
2
)
{
return
;
}
}
else
{
return
;
}
let
timeout
=
node
.
arguments
[
1
]
;
if
(
timeout
.
type
!
=
=
"
Literal
"
|
|
timeout
.
value
>
0
)
{
context
.
report
(
{
node
messageId
:
"
listenForEvents
"
}
)
;
}
}
}
;
}
}
;
