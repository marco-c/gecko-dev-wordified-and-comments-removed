"
use
strict
"
;
var
helpers
=
require
(
"
.
.
/
helpers
"
)
;
var
frameScriptEnv
=
require
(
"
.
.
/
environments
/
frame
-
script
"
)
;
var
sandboxEnv
=
require
(
"
.
.
/
environments
/
special
-
powers
-
sandbox
"
)
;
module
.
exports
=
{
meta
:
{
docs
:
{
url
:
"
https
:
/
/
firefox
-
source
-
docs
.
mozilla
.
org
/
code
-
quality
/
lint
/
linters
/
eslint
-
plugin
-
mozilla
/
rules
/
import
-
content
-
task
-
globals
.
html
"
}
schema
:
[
]
type
:
"
problem
"
}
create
(
context
)
{
return
{
"
CallExpression
[
callee
.
object
.
name
=
'
ContentTask
'
]
[
callee
.
property
.
name
=
'
spawn
'
]
"
:
function
(
node
)
{
for
(
let
[
name
value
]
of
Object
.
entries
(
frameScriptEnv
.
globals
)
)
{
helpers
.
addVarToScope
(
name
context
.
getScope
(
)
value
)
;
}
}
"
CallExpression
[
callee
.
object
.
name
=
'
SpecialPowers
'
]
[
callee
.
property
.
name
=
'
spawn
'
]
"
:
function
(
node
)
{
for
(
let
[
name
value
]
of
Object
.
entries
(
sandboxEnv
.
globals
)
)
{
helpers
.
addVarToScope
(
name
context
.
getScope
(
)
value
)
;
}
let
globals
=
[
"
SpecialPowers
"
"
ContentTaskUtils
"
"
content
"
"
docShell
"
]
;
for
(
let
global
of
globals
)
{
helpers
.
addVarToScope
(
global
context
.
getScope
(
)
false
)
;
}
}
"
CallExpression
[
callee
.
object
.
name
=
'
SpecialPowers
'
]
[
callee
.
property
.
name
=
'
spawnChrome
'
]
"
:
function
(
node
)
{
for
(
let
[
name
value
]
of
Object
.
entries
(
sandboxEnv
.
globals
)
)
{
helpers
.
addVarToScope
(
name
context
.
getScope
(
)
value
)
;
}
let
globals
=
[
"
windowGlobalParent
"
"
browsingContext
"
]
;
for
(
let
global
of
globals
)
{
helpers
.
addVarToScope
(
global
context
.
getScope
(
)
false
)
;
}
}
}
;
}
}
;
