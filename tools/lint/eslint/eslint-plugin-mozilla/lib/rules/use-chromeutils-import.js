"
use
strict
"
;
function
isIdentifier
(
node
id
)
{
return
node
&
&
node
.
type
=
=
=
"
Identifier
"
&
&
node
.
name
=
=
=
id
;
}
function
isMemberExpression
(
node
object
member
)
{
return
(
node
.
type
=
=
=
"
MemberExpression
"
&
&
isIdentifier
(
node
.
object
object
)
&
&
isIdentifier
(
node
.
property
member
)
)
;
}
module
.
exports
=
{
meta
:
{
schema
:
[
{
type
:
"
object
"
properties
:
{
allowCu
:
{
type
:
"
boolean
"
}
}
additionalProperties
:
false
}
]
fixable
:
"
code
"
}
create
(
context
)
{
return
{
CallExpression
(
node
)
{
if
(
node
.
callee
.
type
!
=
=
"
MemberExpression
"
)
{
return
;
}
let
{
allowCu
}
=
context
.
options
[
0
]
|
|
{
}
;
let
{
callee
}
=
node
;
if
(
(
(
!
allowCu
&
&
isIdentifier
(
callee
.
object
"
Cu
"
)
)
|
|
isMemberExpression
(
callee
.
object
"
Components
"
"
utils
"
)
)
&
&
isIdentifier
(
callee
.
property
"
import
"
)
)
{
context
.
report
(
{
node
message
:
"
Please
use
ChromeUtils
.
import
instead
of
Cu
.
import
"
fix
(
fixer
)
{
return
fixer
.
replaceText
(
callee
"
ChromeUtils
.
import
"
)
;
}
}
)
;
}
if
(
isMemberExpression
(
callee
"
XPCOMUtils
"
"
defineLazyModuleGetter
"
)
&
&
node
.
arguments
.
length
<
4
)
{
context
.
report
(
{
node
message
:
"
Please
use
ChromeUtils
.
defineModuleGetter
instead
of
"
+
"
XPCOMUtils
.
defineLazyModuleGetter
"
fix
(
fixer
)
{
return
fixer
.
replaceText
(
callee
"
ChromeUtils
.
defineModuleGetter
"
)
;
}
}
)
;
}
}
}
;
}
}
;
