"
use
strict
"
;
const
js
=
require
(
"
eslint
/
js
"
)
;
const
coreRules
=
{
rules
:
{
"
arrow
-
body
-
style
"
:
"
off
"
complexity
:
[
"
error
"
34
]
"
consistent
-
return
"
:
"
error
"
"
dot
-
notation
"
:
"
error
"
"
max
-
nested
-
callbacks
"
:
[
"
error
"
10
]
"
mozilla
/
avoid
-
removeChild
"
:
"
error
"
"
mozilla
/
consistent
-
if
-
bracing
"
:
"
error
"
"
mozilla
/
import
-
browser
-
window
-
globals
"
:
"
error
"
"
mozilla
/
import
-
globals
"
:
"
error
"
"
mozilla
/
no
-
compare
-
against
-
boolean
-
literals
"
:
"
error
"
"
mozilla
/
no
-
cu
-
reportError
"
:
"
error
"
"
mozilla
/
no
-
define
-
cc
-
etc
"
:
"
error
"
"
mozilla
/
no
-
throw
-
cr
-
literal
"
:
"
error
"
"
mozilla
/
no
-
useless
-
parameters
"
:
"
error
"
"
mozilla
/
no
-
useless
-
removeEventListener
"
:
"
error
"
"
mozilla
/
prefer
-
boolean
-
length
-
check
"
:
"
error
"
"
mozilla
/
prefer
-
formatValues
"
:
"
error
"
"
mozilla
/
reject
-
addtask
-
only
"
:
"
error
"
"
mozilla
/
reject
-
chromeutils
-
import
"
:
"
error
"
"
mozilla
/
reject
-
chromeutils
-
import
-
params
"
:
"
error
"
"
mozilla
/
reject
-
importGlobalProperties
"
:
[
"
error
"
"
allownonwebidl
"
]
"
mozilla
/
reject
-
multiple
-
await
"
:
"
error
"
"
mozilla
/
reject
-
multiple
-
getters
-
calls
"
:
"
error
"
"
mozilla
/
reject
-
scriptableunicodeconverter
"
:
"
warn
"
"
mozilla
/
rejects
-
requires
-
await
"
:
"
error
"
"
mozilla
/
use
-
cc
-
etc
"
:
"
error
"
"
mozilla
/
use
-
chromeutils
-
definelazygetter
"
:
"
error
"
"
mozilla
/
use
-
chromeutils
-
generateqi
"
:
"
error
"
"
mozilla
/
use
-
chromeutils
-
import
"
:
"
error
"
"
mozilla
/
use
-
console
-
createInstance
"
:
"
error
"
"
mozilla
/
use
-
default
-
preference
-
values
"
:
"
error
"
"
mozilla
/
use
-
includes
-
instead
-
of
-
indexOf
"
:
"
error
"
"
mozilla
/
use
-
isInstance
"
:
"
error
"
"
mozilla
/
use
-
ownerGlobal
"
:
"
error
"
"
mozilla
/
use
-
returnValue
"
:
"
error
"
"
mozilla
/
use
-
services
"
:
"
error
"
"
mozilla
/
valid
-
lazy
"
:
"
error
"
"
mozilla
/
valid
-
services
"
:
"
error
"
"
no
-
array
-
constructor
"
:
"
error
"
"
no
-
caller
"
:
"
error
"
"
no
-
console
"
:
[
"
error
"
{
allow
:
[
"
createInstance
"
"
error
"
"
warn
"
]
}
]
"
no
-
constant
-
binary
-
expression
"
:
"
error
"
"
no
-
else
-
return
"
:
"
error
"
"
no
-
empty
"
:
[
"
error
"
{
allowEmptyCatch
:
true
}
]
"
no
-
empty
-
static
-
block
"
:
"
error
"
"
no
-
eval
"
:
"
error
"
"
no
-
extra
-
bind
"
:
"
error
"
"
no
-
fallthrough
"
:
[
"
error
"
{
commentPattern
:
"
[
Ff
]
[
Aa
]
[
Ll
]
[
Ll
]
[
Ss
]
?
[
\
\
s
-
]
?
(
[
Tt
]
[
Hh
]
[
Rr
]
[
Oo
]
[
Uu
]
[
Gg
]
[
Hh
]
|
[
Tt
]
[
Hh
]
[
Rr
]
[
Uu
]
)
"
}
]
"
no
-
implied
-
eval
"
:
"
error
"
"
no
-
inner
-
declarations
"
:
"
off
"
"
no
-
iterator
"
:
"
error
"
"
no
-
labels
"
:
"
error
"
"
no
-
lone
-
blocks
"
:
"
error
"
"
no
-
lonely
-
if
"
:
"
error
"
"
no
-
nested
-
ternary
"
:
"
error
"
"
no
-
new
-
native
-
nonconstructor
"
:
"
error
"
"
no
-
new
-
wrappers
"
:
"
error
"
"
no
-
object
-
constructor
"
:
"
error
"
"
no
-
prototype
-
builtins
"
:
"
off
"
"
no
-
redeclare
"
:
[
"
error
"
{
builtinGlobals
:
false
}
]
"
no
-
restricted
-
globals
"
:
[
"
error
"
"
event
"
]
"
no
-
self
-
compare
"
:
"
error
"
"
no
-
sequences
"
:
"
error
"
"
no
-
shadow
"
:
"
error
"
"
no
-
throw
-
literal
"
:
"
error
"
"
no
-
unneeded
-
ternary
"
:
"
error
"
"
no
-
unsanitized
/
method
"
:
"
error
"
"
no
-
unsanitized
/
property
"
:
"
error
"
"
no
-
unused
-
private
-
class
-
members
"
:
"
error
"
"
no
-
unused
-
vars
"
:
[
"
error
"
{
argsIgnorePattern
:
"
^
_
"
vars
:
"
local
"
}
]
"
no
-
useless
-
call
"
:
"
error
"
"
no
-
useless
-
concat
"
:
"
error
"
"
no
-
useless
-
escape
"
:
"
off
"
"
no
-
useless
-
return
"
:
"
error
"
"
object
-
shorthand
"
:
[
"
error
"
"
always
"
{
avoidQuotes
:
true
}
]
"
prefer
-
arrow
-
callback
"
:
"
off
"
}
}
;
const
extraRules
=
[
{
env
:
{
"
mozilla
/
privileged
"
:
true
"
mozilla
/
specific
"
:
true
"
mozilla
/
sysmjs
"
:
true
}
files
:
[
"
*
*
/
*
.
sys
.
mjs
"
]
name
:
"
mozilla
/
recommended
/
system
-
modules
"
rules
:
{
"
mozilla
/
lazy
-
getter
-
object
-
name
"
:
"
error
"
"
mozilla
/
reject
-
eager
-
module
-
in
-
lazy
-
getter
"
:
"
error
"
"
mozilla
/
reject
-
global
-
this
"
:
"
error
"
"
mozilla
/
reject
-
globalThis
-
modification
"
:
"
error
"
"
mozilla
/
reject
-
importGlobalProperties
"
:
[
"
error
"
"
everything
"
]
"
mozilla
/
reject
-
mixing
-
eager
-
and
-
lazy
"
:
"
error
"
"
mozilla
/
reject
-
top
-
level
-
await
"
:
"
error
"
}
}
{
files
:
[
"
*
*
/
*
.
mjs
"
"
*
*
/
*
.
jsx
"
"
*
*
/
?
(
*
.
)
worker
.
?
(
m
)
js
"
]
name
:
"
mozilla
/
recommended
/
file
-
scoped
-
globals
-
rules
"
rules
:
{
"
no
-
redeclare
"
:
[
"
error
"
{
builtinGlobals
:
true
}
]
"
no
-
shadow
"
:
[
"
error
"
{
allow
:
[
"
event
"
]
builtinGlobals
:
true
}
]
"
no
-
unused
-
vars
"
:
[
"
error
"
{
argsIgnorePattern
:
"
^
_
"
vars
:
"
all
"
}
]
}
}
{
files
:
[
"
*
*
/
*
.
mjs
"
]
ignores
:
[
"
*
*
/
*
.
sys
.
mjs
"
]
name
:
"
mozilla
/
recommended
/
modules
-
not
-
system
-
modules
"
rules
:
{
"
mozilla
/
reject
-
import
-
system
-
module
-
from
-
non
-
system
"
:
"
error
"
"
mozilla
/
reject
-
lazy
-
imports
-
into
-
globals
"
:
"
error
"
}
}
{
files
:
[
"
*
*
/
*
.
mjs
"
"
*
*
/
*
.
jsx
"
]
name
:
"
mozilla
/
recommended
/
module
-
only
"
parserOptions
:
{
sourceType
:
"
module
"
}
rules
:
{
"
mozilla
/
use
-
static
-
import
"
:
"
error
"
strict
:
"
error
"
}
}
{
env
:
{
"
mozilla
/
sjs
"
:
true
}
files
:
[
"
*
*
/
*
.
sjs
"
]
name
:
"
mozilla
/
recommended
/
sjs
"
rules
:
{
"
mozilla
/
reject
-
importGlobalProperties
"
:
[
"
error
"
"
everything
"
]
}
}
{
env
:
{
worker
:
true
}
files
:
[
"
*
*
/
?
(
*
.
)
worker
.
?
(
m
)
js
"
]
}
]
;
const
legacyConfig
=
{
extends
:
[
"
eslint
:
recommended
"
]
overrides
:
structuredClone
(
extraRules
)
parserOptions
:
{
ecmaVersion
:
"
latest
"
}
plugins
:
[
"
no
-
unsanitized
"
]
rules
:
coreRules
.
rules
}
;
const
flatConfig
=
[
{
languageOptions
:
{
ecmaVersion
:
"
latest
"
}
name
:
"
mozilla
/
recommended
/
main
-
rules
"
rules
:
{
.
.
.
js
.
configs
.
recommended
.
rules
.
.
.
coreRules
.
rules
}
}
.
.
.
structuredClone
(
extraRules
)
]
;
module
.
exports
=
{
getConfig
(
configType
)
{
if
(
configType
=
=
"
flat
"
)
{
return
flatConfig
;
}
return
legacyConfig
;
}
}
;
