"
use
strict
"
;
var
path
=
require
(
"
path
"
)
;
var
helpers
=
require
(
"
.
.
/
helpers
"
)
;
var
globals
=
require
(
"
.
.
/
globals
"
)
;
var
modules
=
helpers
.
modulesGlobalData
;
const
placesOverlayFiles
=
[
"
toolkit
/
content
/
globalOverlay
.
js
"
"
browser
/
base
/
content
/
utilityOverlay
.
js
"
"
browser
/
components
/
places
/
content
/
controller
.
js
"
"
browser
/
components
/
places
/
content
/
treeView
.
js
"
]
;
const
extraPlacesDefinitions
=
[
{
name
:
"
Cc
"
writable
:
false
}
{
name
:
"
Ci
"
writable
:
false
}
{
name
:
"
Cr
"
writable
:
false
}
{
name
:
"
Cu
"
writable
:
false
}
{
name
:
"
XPCOMUtils
"
writable
:
false
}
{
name
:
"
Task
"
writable
:
false
}
{
name
:
"
PlacesUIUtils
"
writable
:
false
}
{
name
:
"
PlacesTransactions
"
writable
:
false
}
]
;
const
placesOverlayModules
=
[
"
PlacesUtils
.
jsm
"
]
;
function
getScriptGlobals
(
)
{
let
fileGlobals
=
[
]
;
for
(
let
file
of
placesOverlayFiles
)
{
let
fileName
=
path
.
join
(
helpers
.
rootDir
file
)
;
try
{
fileGlobals
=
fileGlobals
.
concat
(
globals
.
getGlobalsForFile
(
fileName
)
)
;
}
catch
(
e
)
{
}
}
for
(
let
file
of
placesOverlayModules
)
{
if
(
file
in
modules
)
{
for
(
let
globalVar
of
modules
[
file
]
)
{
fileGlobals
.
push
(
{
name
:
globalVar
writable
:
false
}
)
;
}
}
}
return
fileGlobals
.
concat
(
extraPlacesDefinitions
)
;
}
function
mapGlobals
(
fileGlobals
)
{
var
globalObjects
=
{
}
;
for
(
let
global
of
fileGlobals
)
{
globalObjects
[
global
.
name
]
=
global
.
writable
;
}
return
globalObjects
;
}
module
.
exports
=
{
globals
:
helpers
.
isMozillaCentralBased
(
)
?
mapGlobals
(
getScriptGlobals
(
)
)
:
helpers
.
getSavedEnvironmentItems
(
"
places
-
overlay
"
)
.
globals
}
;
