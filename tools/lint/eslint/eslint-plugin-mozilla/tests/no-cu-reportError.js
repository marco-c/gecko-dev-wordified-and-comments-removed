"
use
strict
"
;
var
rule
=
require
(
"
.
.
/
lib
/
rules
/
no
-
cu
-
reportError
"
)
;
var
RuleTester
=
require
(
"
eslint
"
)
.
RuleTester
;
const
ruleTester
=
new
RuleTester
(
{
parserOptions
:
{
ecmaVersion
:
9
}
}
)
;
function
callError
(
)
{
return
[
{
messageId
:
"
useConsoleError
"
type
:
"
CallExpression
"
}
]
;
}
ruleTester
.
run
(
"
no
-
cu
-
reportError
"
rule
{
valid
:
[
"
console
.
error
(
'
foo
'
)
"
"
Cu
.
cloneInto
(
{
}
{
}
)
"
"
foo
(
)
.
catch
(
console
.
error
)
"
"
Cu
.
reportError
(
'
foo
'
stack
)
"
]
invalid
:
[
{
code
:
"
Cu
.
reportError
(
'
foo
'
)
"
output
:
"
console
.
error
(
'
foo
'
)
"
errors
:
callError
(
)
}
{
code
:
"
Cu
.
reportError
(
bar
)
"
output
:
"
console
.
error
(
bar
)
"
errors
:
callError
(
)
}
{
code
:
"
Cu
.
reportError
(
bar
.
stack
)
"
output
:
"
console
.
error
(
bar
.
stack
)
"
errors
:
callError
(
)
}
{
code
:
"
foo
(
)
.
catch
(
Cu
.
reportError
)
"
output
:
"
foo
(
)
.
catch
(
console
.
error
)
"
errors
:
callError
(
)
}
{
code
:
"
foo
(
)
.
then
(
bar
Cu
.
reportError
)
"
output
:
"
foo
(
)
.
then
(
bar
console
.
error
)
"
errors
:
callError
(
)
}
{
code
:
"
Cu
.
reportError
(
'
foo
'
+
e
)
"
output
:
"
console
.
error
(
'
foo
'
e
)
"
errors
:
callError
(
)
}
{
code
:
"
Cu
.
reportError
(
'
foo
'
+
msg
.
data
)
"
output
:
"
console
.
error
(
'
foo
'
msg
.
data
)
"
errors
:
callError
(
)
}
{
code
:
"
Cu
.
reportError
(
'
foo
'
+
'
bar
'
+
'
baz
'
)
"
output
:
"
console
.
error
(
'
foo
'
+
'
bar
'
+
'
baz
'
)
"
errors
:
callError
(
)
}
{
code
:
"
Cu
.
reportError
(
'
foo
'
+
e
+
'
baz
'
)
"
output
:
"
console
.
error
(
'
foo
'
e
'
baz
'
)
"
errors
:
callError
(
)
}
{
code
:
"
Cu
.
reportError
(
'
foo
'
+
e
+
'
quux
'
+
'
baz
'
)
"
output
:
"
console
.
error
(
'
foo
'
e
'
quux
'
+
'
baz
'
)
"
errors
:
callError
(
)
}
{
code
:
"
Cu
.
reportError
(
'
foo
'
+
'
quux
'
+
e
+
'
baz
'
)
"
output
:
"
console
.
error
(
'
foo
'
+
'
quux
'
e
'
baz
'
)
"
errors
:
callError
(
)
}
{
code
:
"
Cu
.
reportError
(
'
foo
'
+
'
quux
'
+
(
e
+
'
baz
'
)
)
"
output
:
"
console
.
error
(
'
foo
'
+
'
quux
'
+
(
e
+
'
baz
'
)
)
"
errors
:
callError
(
)
}
]
}
)
;
