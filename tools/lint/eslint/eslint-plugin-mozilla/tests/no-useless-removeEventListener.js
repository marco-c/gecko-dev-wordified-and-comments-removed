"
use
strict
"
;
var
rule
=
require
(
"
.
.
/
lib
/
rules
/
no
-
useless
-
removeEventListener
"
)
;
var
RuleTester
=
require
(
"
eslint
"
)
.
RuleTester
;
const
ruleTester
=
new
RuleTester
(
{
parserOptions
:
{
ecmaVersion
:
"
latest
"
}
}
)
;
function
invalidCode
(
code
)
{
return
{
code
errors
:
[
{
messageId
:
"
useOnce
"
type
:
"
CallExpression
"
}
]
}
;
}
ruleTester
.
run
(
"
no
-
useless
-
removeEventListener
"
rule
{
valid
:
[
"
elt
.
addEventListener
(
event1
function
listener
(
)
{
"
+
"
elt
.
removeEventListener
(
)
;
"
+
"
}
)
;
"
"
elt
.
addEventListener
(
'
click
'
handler
)
;
"
"
elt
.
addEventListener
(
'
click
'
handler
true
)
;
"
"
elt
.
addEventListener
(
'
click
'
handler
{
once
:
true
}
)
;
"
"
elt
.
addEventListener
(
'
click
'
function
(
)
{
}
)
;
"
"
elt
.
addEventListener
(
'
click
'
function
listener
(
)
{
"
+
"
elt
.
removeEventListener
(
'
keypress
'
listener
)
;
"
+
"
}
)
;
"
"
elt
.
addEventListener
(
'
click
'
function
listener
(
)
{
"
+
"
elt
.
focus
(
)
;
"
+
"
elt
.
removeEventListener
(
'
click
'
listener
)
;
"
+
"
}
)
;
"
"
elt
.
addEventListener
(
'
click
'
function
listener
(
)
{
"
+
"
elt
.
removeEventListener
(
'
click
'
listener
)
;
"
+
"
}
false
true
)
;
"
"
elt
.
addEventListener
(
'
click
'
function
listener
(
)
{
"
+
"
elt
.
removeEventListener
(
eventName
listener
)
;
"
+
"
}
)
;
"
"
elt
.
addEventListener
(
event1
function
listener
(
)
{
"
+
"
elt
.
removeEventListener
(
event2
listener
)
;
"
+
"
}
)
;
"
"
myfunc
.
addEventListener
(
listener
)
;
"
]
invalid
:
[
invalidCode
(
"
elt
.
addEventListener
(
'
click
'
function
listener
(
)
{
"
+
"
elt
.
removeEventListener
(
'
click
'
listener
)
;
"
+
"
}
)
;
"
)
invalidCode
(
"
elt
.
addEventListener
(
'
click
'
function
listener
(
)
{
"
+
"
elt
.
removeEventListener
(
'
click
'
listener
true
)
;
"
+
"
}
true
)
;
"
)
invalidCode
(
"
elt
.
addEventListener
(
'
click
'
function
listener
(
)
{
"
+
"
elt
.
removeEventListener
(
'
click
'
listener
)
;
"
+
"
}
{
once
:
true
}
)
;
"
)
invalidCode
(
"
elt
.
addEventListener
(
'
click
'
function
listener
(
)
{
"
+
"
/
*
Comment
*
/
"
+
"
elt
.
removeEventListener
(
'
click
'
listener
)
;
"
+
"
}
)
;
"
)
invalidCode
(
"
elt
.
addEventListener
(
'
click
'
function
(
)
{
"
+
"
elt
.
removeEventListener
(
'
click
'
arguments
.
callee
)
;
"
+
"
}
)
;
"
)
invalidCode
(
"
elt
.
addEventListener
(
eventName
function
listener
(
)
{
"
+
"
elt
.
removeEventListener
(
eventName
listener
)
;
"
+
"
}
)
;
"
)
]
}
)
;
