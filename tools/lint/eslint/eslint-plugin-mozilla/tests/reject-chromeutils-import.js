"
use
strict
"
;
var
rule
=
require
(
"
.
.
/
lib
/
rules
/
reject
-
chromeutils
-
import
"
)
;
var
RuleTester
=
require
(
"
eslint
"
)
.
RuleTester
;
const
ruleTester
=
new
RuleTester
(
{
parserOptions
:
{
ecmaVersion
:
"
latest
"
}
}
)
;
const
invalidError
=
[
{
messageId
:
"
useImportESModule
"
type
:
"
CallExpression
"
}
]
;
const
invalidErrorLazy
=
[
{
messageId
:
"
useImportESModuleLazy
"
type
:
"
CallExpression
"
}
]
;
ruleTester
.
run
(
"
reject
-
chromeutils
-
import
"
rule
{
valid
:
[
'
ChromeUtils
.
importESModule
(
"
resource
:
/
/
some
/
path
/
to
/
My
.
sys
.
mjs
"
)
'
'
ChromeUtils
.
defineESModuleGetters
(
obj
{
My
:
"
resource
:
/
/
some
/
path
/
to
/
My
.
sys
.
mjs
"
}
)
'
]
invalid
:
[
{
code
:
'
Components
.
utils
.
import
(
"
resource
:
/
/
some
/
path
/
to
/
My
.
jsm
"
)
'
errors
:
invalidError
}
{
code
:
'
Cu
.
import
(
"
resource
:
/
/
some
/
path
/
to
/
My
.
jsm
"
)
'
errors
:
invalidError
}
{
code
:
'
ChromeUtils
.
import
(
"
resource
:
/
/
some
/
path
/
to
/
My
.
jsm
"
)
'
errors
:
invalidError
}
{
code
:
'
SpecialPowers
.
Cu
.
import
(
"
resource
:
/
/
some
/
path
/
to
/
My
.
jsm
"
)
'
errors
:
invalidError
}
{
code
:
'
SpecialPowers
.
ChromeUtils
.
import
(
"
resource
:
/
/
some
/
path
/
to
/
My
.
jsm
"
)
'
errors
:
invalidError
}
{
code
:
'
ChromeUtils
.
defineModuleGetter
(
obj
"
My
"
"
resource
:
/
/
some
/
path
/
to
/
My
.
jsm
"
)
'
errors
:
invalidErrorLazy
}
{
code
:
'
SpecialPowers
.
ChromeUtils
.
defineModuleGetter
(
obj
"
My
"
"
resource
:
/
/
some
/
path
/
to
/
My
.
jsm
"
)
'
errors
:
invalidErrorLazy
}
{
code
:
'
XPCOMUtils
.
defineLazyModuleGetter
(
obj
"
My
"
"
resource
:
/
/
some
/
path
/
to
/
My
.
jsm
"
)
'
errors
:
invalidErrorLazy
}
{
code
:
'
XPCOMUtils
.
defineLazyModuleGetters
(
obj
{
My
:
"
resource
:
/
/
some
/
path
/
to
/
My
.
jsm
"
}
)
'
errors
:
invalidErrorLazy
}
]
}
)
;
