"
use
strict
"
;
var
rule
=
require
(
"
.
.
/
lib
/
rules
/
avoid
-
nsISupportsString
-
preferences
"
)
;
function
invalidCode
(
code
accessType
=
"
get
"
)
{
let
message
=
"
use
"
+
accessType
+
"
StringPref
instead
of
"
+
accessType
+
"
ComplexValue
with
nsISupportsString
"
;
return
{
code
:
code
errors
:
[
{
message
:
message
type
:
"
CallExpression
"
}
]
}
;
}
exports
.
runTest
=
function
(
ruleTester
)
{
ruleTester
.
run
(
"
no
-
useless
-
removeEventListener
"
rule
{
valid
:
[
"
branch
.
getStringPref
(
'
name
'
)
;
"
"
branch
.
getComplexValue
(
'
name
'
Ci
.
nsIPrefLocalizedString
)
;
"
"
branch
.
setStringPref
(
'
name
'
'
blah
'
)
;
"
"
branch
.
setComplexValue
(
'
name
'
Ci
.
nsIPrefLocalizedString
pref
)
;
"
]
invalid
:
[
invalidCode
(
"
branch
.
getComplexValue
(
'
name
'
Ci
.
nsISupportsString
)
;
"
)
invalidCode
(
"
branch
.
getComplexValue
(
'
name
'
nsISupportsString
)
;
"
)
invalidCode
(
"
branch
.
getComplexValue
(
'
name
'
Ci
.
nsISupportsString
)
.
data
;
"
)
invalidCode
(
"
branch
.
setComplexValue
(
'
name
'
Ci
.
nsISupportsString
str
)
;
"
"
set
"
)
invalidCode
(
"
branch
.
setComplexValue
(
'
name
'
nsISupportsString
str
)
;
"
"
set
"
)
]
}
)
;
}
;
