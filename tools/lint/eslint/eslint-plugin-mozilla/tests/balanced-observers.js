"
use
strict
"
;
var
rule
=
require
(
"
.
.
/
lib
/
rules
/
balanced
-
observers
"
)
;
var
RuleTester
=
require
(
"
eslint
"
)
.
RuleTester
;
const
ruleTester
=
new
RuleTester
(
)
;
function
error
(
code
observable
)
{
return
{
code
errors
:
[
{
messageId
:
"
noCorresponding
"
type
:
"
Identifier
"
data
:
{
observable
}
}
]
}
;
}
ruleTester
.
run
(
"
balanced
-
observers
"
rule
{
valid
:
[
"
Services
.
obs
.
addObserver
(
observer
)
;
"
"
Services
.
obs
.
removeObserver
(
observer
)
;
"
"
Services
.
prefs
.
addObserver
(
)
;
"
"
Services
.
prefs
.
removeObserver
(
)
;
"
"
Services
.
obs
.
addObserver
(
observer
'
observable
'
)
;
"
+
"
Services
.
obs
.
removeObserver
(
observer
'
observable
'
)
;
"
"
Services
.
prefs
.
addObserver
(
'
preference
.
name
'
otherObserver
)
;
"
+
"
Services
.
prefs
.
removeObserver
(
'
preference
.
name
'
otherObserver
)
;
"
]
invalid
:
[
error
(
"
Services
.
obs
.
addObserver
(
observer
'
observable
'
)
;
"
"
observable
"
)
error
(
"
Services
.
obs
.
addObserver
(
observer
'
observable
'
)
;
"
+
"
Services
.
obs
.
removeObserver
(
observer
'
different
-
observable
'
)
;
"
"
observable
"
)
error
(
"
Services
.
prefs
.
addObserver
(
'
preference
.
name
'
otherObserver
)
;
"
"
preference
.
name
"
)
error
(
"
Services
.
prefs
.
addObserver
(
'
preference
.
name
'
otherObserver
)
;
"
+
"
Services
.
prefs
.
removeObserver
(
'
other
.
preference
'
otherObserver
)
;
"
"
preference
.
name
"
)
error
(
"
Services
.
obs
.
addObserver
(
observer
'
observable
'
)
;
"
+
"
Services
.
prefs
.
removeObserver
(
observer
'
observable
'
)
;
"
"
observable
"
)
error
(
"
Services
.
prefs
.
addObserver
(
'
preference
.
name
'
otherObserver
)
;
"
+
"
Services
.
obs
.
removeObserver
(
'
preference
.
name
'
otherObserver
)
;
"
"
preference
.
name
"
)
]
}
)
;
