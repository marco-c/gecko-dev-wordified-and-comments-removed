from
__future__
import
absolute_import
import
os
import
re
from
mozlint
.
types
import
LineType
here
=
os
.
path
.
abspath
(
os
.
path
.
dirname
(
__file__
)
)
HEADERS_FILE
=
os
.
path
.
join
(
here
'
mingw
-
headers
.
txt
'
)
class
MinGWCapitalization
(
LineType
)
:
    
def
__init__
(
self
*
args
*
*
kwargs
)
:
        
super
(
MinGWCapitalization
self
)
.
__init__
(
*
args
*
*
kwargs
)
        
with
open
(
HEADERS_FILE
'
r
'
)
as
fh
:
            
self
.
headers
=
fh
.
read
(
)
.
strip
(
)
.
splitlines
(
)
        
self
.
regex
=
re
.
compile
(
"
^
#
include
\
s
*
<
(
"
+
"
|
"
.
join
(
self
.
headers
)
+
"
)
>
"
)
    
def
condition
(
self
payload
line
)
:
        
if
not
line
.
startswith
(
"
#
include
"
)
:
            
return
False
        
if
self
.
regex
.
search
(
line
re
.
I
)
:
            
return
not
self
.
regex
.
search
(
line
)
def
lint
(
paths
config
*
*
lintargs
)
:
    
results
=
[
]
    
m
=
MinGWCapitalization
(
)
    
for
path
in
paths
:
        
results
.
extend
(
m
.
_lint
(
path
config
*
*
lintargs
)
)
    
return
results
