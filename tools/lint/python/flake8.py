import
json
import
os
import
platform
import
signal
import
subprocess
import
sys
from
collections
import
defaultdict
from
mozprocess
import
ProcessHandlerMixin
from
mozlint
import
result
from
mozlint
.
util
import
pip
from
mozlint
.
pathutils
import
get_ancestors_by_name
here
=
os
.
path
.
abspath
(
os
.
path
.
dirname
(
__file__
)
)
FLAKE8_REQUIREMENTS_PATH
=
os
.
path
.
join
(
here
'
flake8_requirements
.
txt
'
)
FLAKE8_NOT_FOUND
=
"
"
"
Could
not
find
flake8
!
Install
flake8
and
try
again
.
    
pip
install
-
U
-
-
require
-
hashes
-
r
{
}
"
"
"
.
strip
(
)
.
format
(
FLAKE8_REQUIREMENTS_PATH
)
FLAKE8_INSTALL_ERROR
=
"
"
"
Unable
to
install
correct
version
of
flake8
Try
to
install
it
manually
with
:
    
pip
install
-
U
-
-
require
-
hashes
-
r
{
}
"
"
"
.
strip
(
)
.
format
(
FLAKE8_REQUIREMENTS_PATH
)
LINE_OFFSETS
=
{
    
'
E121
'
:
(
-
1
2
)
    
'
E122
'
:
(
-
1
2
)
    
'
E126
'
:
(
-
1
2
)
    
'
E127
'
:
(
-
1
2
)
    
'
E128
'
:
(
-
1
2
)
    
'
E131
'
:
(
-
1
2
)
    
'
E301
'
:
(
-
1
2
)
    
'
E302
'
:
(
-
2
3
)
}
"
"
"
Maps
a
flake8
error
to
a
lineoffset
tuple
.
The
offset
is
of
the
form
(
lineno_offset
num_lines
)
and
is
passed
to
the
lineoffset
property
of
an
Issue
.
"
"
"
if
platform
.
system
(
)
=
=
'
Windows
'
:
    
bindir
=
os
.
path
.
join
(
sys
.
prefix
'
Scripts
'
)
else
:
    
bindir
=
os
.
path
.
join
(
sys
.
prefix
'
bin
'
)
results
=
[
]
class
Flake8Process
(
ProcessHandlerMixin
)
:
    
def
__init__
(
self
config
*
args
*
*
kwargs
)
:
        
self
.
config
=
config
        
kwargs
[
'
processOutputLine
'
]
=
[
self
.
process_line
]
        
ProcessHandlerMixin
.
__init__
(
self
*
args
*
*
kwargs
)
    
def
process_line
(
self
line
)
:
        
line
=
line
.
replace
(
'
\
\
'
'
\
\
\
\
'
)
        
try
:
            
res
=
json
.
loads
(
line
)
        
except
ValueError
:
            
print
(
'
Non
JSON
output
from
linter
will
not
be
processed
:
{
}
'
.
format
(
line
)
)
            
return
        
if
res
.
get
(
'
code
'
)
in
LINE_OFFSETS
:
            
res
[
'
lineoffset
'
]
=
LINE_OFFSETS
[
res
[
'
code
'
]
]
        
results
.
append
(
result
.
from_config
(
self
.
config
*
*
res
)
)
    
def
run
(
self
*
args
*
*
kwargs
)
:
        
orig
=
signal
.
signal
(
signal
.
SIGINT
signal
.
SIG_IGN
)
        
ProcessHandlerMixin
.
run
(
self
*
args
*
*
kwargs
)
        
signal
.
signal
(
signal
.
SIGINT
orig
)
def
run_process
(
config
cmd
)
:
    
proc
=
Flake8Process
(
config
cmd
)
    
proc
.
run
(
)
    
try
:
        
proc
.
wait
(
)
    
except
KeyboardInterrupt
:
        
proc
.
kill
(
)
        
return
1
def
setup
(
root
)
:
    
if
not
pip
.
reinstall_program
(
FLAKE8_REQUIREMENTS_PATH
)
:
        
print
(
FLAKE8_INSTALL_ERROR
)
        
return
1
def
lint
(
paths
config
*
*
lintargs
)
:
    
global
results
    
results
=
[
]
    
cmdargs
=
[
        
os
.
path
.
join
(
bindir
'
flake8
'
)
        
'
-
-
format
'
'
{
"
path
"
:
"
%
(
path
)
s
"
"
lineno
"
:
%
(
row
)
s
'
                    
'
"
column
"
:
%
(
col
)
s
"
rule
"
:
"
%
(
code
)
s
"
"
message
"
:
"
%
(
text
)
s
"
}
'
        
'
-
-
filename
'
'
'
.
join
(
[
'
*
.
{
}
'
.
format
(
e
)
for
e
in
config
[
'
extensions
'
]
]
)
    
]
    
fix_cmdargs
=
[
        
os
.
path
.
join
(
bindir
'
autopep8
'
)
        
'
-
-
global
-
config
'
os
.
path
.
join
(
lintargs
[
'
root
'
]
'
.
flake8
'
)
        
'
-
-
in
-
place
'
'
-
-
recursive
'
    
]
    
if
'
exclude
'
in
lintargs
:
        
fix_cmdargs
.
extend
(
[
'
-
-
exclude
'
'
'
.
join
(
lintargs
[
'
exclude
'
]
)
]
)
    
paths_by_config
=
defaultdict
(
list
)
    
for
path
in
paths
:
        
configs
=
get_ancestors_by_name
(
'
.
flake8
'
path
lintargs
[
'
root
'
]
)
        
paths_by_config
[
os
.
pathsep
.
join
(
configs
)
if
configs
else
'
default
'
]
.
append
(
path
)
    
for
configs
paths
in
paths_by_config
.
items
(
)
:
        
if
lintargs
.
get
(
'
fix
'
)
:
            
subprocess
.
call
(
fix_cmdargs
+
paths
)
        
cmd
=
cmdargs
[
:
]
        
if
configs
!
=
'
default
'
:
            
configs
=
reversed
(
configs
.
split
(
os
.
pathsep
)
)
            
cmd
.
extend
(
[
'
-
-
append
-
config
=
{
}
'
.
format
(
c
)
for
c
in
configs
]
)
        
cmd
.
extend
(
paths
)
        
if
run_process
(
config
cmd
)
:
            
break
    
return
results
