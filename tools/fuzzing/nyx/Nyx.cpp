#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
fuzzing
/
Nyx
.
h
"
namespace
mozilla
{
namespace
fuzzing
{
Nyx
:
:
Nyx
(
)
{
}
Nyx
&
Nyx
:
:
instance
(
)
{
static
Nyx
nyx
;
return
nyx
;
}
extern
"
C
"
{
MOZ_EXPORT
__attribute__
(
(
weak
)
)
void
nyx_start
(
void
)
;
MOZ_EXPORT
__attribute__
(
(
weak
)
)
uint32_t
nyx_get_next_fuzz_data
(
void
*
uint32_t
)
;
MOZ_EXPORT
__attribute__
(
(
weak
)
)
void
nyx_release
(
uint32_t
)
;
MOZ_EXPORT
__attribute__
(
(
weak
)
)
void
nyx_handle_event
(
const
char
*
const
char
*
int
const
char
*
)
;
MOZ_EXPORT
__attribute__
(
(
weak
)
)
void
nyx_puts
(
const
char
*
)
;
}
#
define
NYX_CHECK_API
(
func
)
\
if
(
!
func
)
{
\
fprintf
(
\
stderr
\
"
Error
:
Nyx
library
must
be
in
LD_PRELOAD
.
Missing
function
\
"
%
s
\
"
\
n
"
\
#
func
)
;
\
MOZ_REALLY_CRASH
(
__LINE__
)
;
\
}
void
Nyx
:
:
start
(
void
)
{
MOZ_RELEASE_ASSERT
(
!
mInited
)
;
mInited
=
true
;
NYX_CHECK_API
(
nyx_start
)
;
NYX_CHECK_API
(
nyx_get_next_fuzz_data
)
;
NYX_CHECK_API
(
nyx_release
)
;
NYX_CHECK_API
(
nyx_handle_event
)
;
NYX_CHECK_API
(
nyx_puts
)
;
nyx_start
(
)
;
}
bool
Nyx
:
:
started
(
void
)
{
return
mInited
;
}
bool
Nyx
:
:
is_enabled
(
const
char
*
identifier
)
{
static
char
*
fuzzer
=
getenv
(
"
NYX_FUZZER
"
)
;
if
(
!
fuzzer
|
|
strcmp
(
fuzzer
identifier
)
)
{
return
false
;
}
return
true
;
}
uint32_t
Nyx
:
:
get_data
(
uint8_t
*
data
uint32_t
size
)
{
MOZ_RELEASE_ASSERT
(
mInited
)
;
return
nyx_get_next_fuzz_data
(
data
size
)
;
}
void
Nyx
:
:
release
(
uint32_t
iterations
)
{
MOZ_RELEASE_ASSERT
(
mInited
)
;
nyx_release
(
iterations
)
;
}
void
Nyx
:
:
handle_event
(
const
char
*
type
const
char
*
file
int
line
const
char
*
reason
)
{
MOZ_RELEASE_ASSERT
(
mInited
)
;
nyx_handle_event
(
type
file
line
reason
)
;
}
}
}
