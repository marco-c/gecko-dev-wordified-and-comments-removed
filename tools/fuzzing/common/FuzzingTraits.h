#
ifndef
mozilla_fuzzing_FuzzingTraits_h
#
define
mozilla_fuzzing_FuzzingTraits_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
<
random
>
namespace
mozilla
{
namespace
fuzzing
{
template
<
typename
T
>
T
RandomNumericLimit
(
)
{
static_assert
(
mozilla
:
:
IsArithmetic
<
T
>
:
:
value
=
=
true
"
T
must
be
an
arithmetic
type
"
)
;
return
random
(
)
%
2
=
=
0
?
std
:
:
numeric_limits
<
T
>
:
:
min
(
)
:
std
:
:
numeric_limits
<
T
>
:
:
max
(
)
;
}
template
<
typename
T
>
T
RandomInteger
(
)
{
static_assert
(
mozilla
:
:
IsIntegral
<
T
>
:
:
value
=
=
true
"
T
must
be
an
integral
type
"
)
;
double
r
=
static_cast
<
double
>
(
random
(
)
%
(
(
sizeof
(
T
)
*
CHAR_BIT
)
+
1
)
)
;
T
x
=
static_cast
<
T
>
(
pow
(
2
.
0
r
)
)
-
1
;
if
(
std
:
:
numeric_limits
<
T
>
:
:
is_signed
&
&
random
(
)
%
2
=
=
0
)
{
return
(
x
*
-
1
)
-
1
;
}
return
x
;
}
template
<
typename
T
>
T
RandomIntegerRange
(
T
min
T
max
)
{
static_assert
(
mozilla
:
:
IsIntegral
<
T
>
:
:
value
=
=
true
"
T
must
be
an
integral
type
"
)
;
MOZ_ASSERT
(
min
<
max
)
;
return
static_cast
<
T
>
(
random
(
)
%
(
max
-
min
)
+
min
)
;
}
template
<
typename
T
>
T
RandomFloatingPointRange
(
T
min
T
max
)
{
static_assert
(
mozilla
:
:
IsFloatingPoint
<
T
>
:
:
value
=
=
true
"
T
must
be
a
floating
point
type
"
)
;
MOZ_ASSERT
(
min
<
max
)
;
T
x
=
static_cast
<
T
>
(
random
(
)
)
/
static_cast
<
T
>
(
RAND_MAX
)
;
return
min
+
x
*
(
max
-
min
)
;
}
template
<
typename
T
>
T
RandomFloatingPoint
(
)
{
static_assert
(
mozilla
:
:
IsFloatingPoint
<
T
>
:
:
value
=
=
true
"
T
must
be
a
floating
point
type
"
)
;
int
radix
=
RandomIntegerRange
<
int
>
(
std
:
:
numeric_limits
<
T
>
:
:
min_exponent
std
:
:
numeric_limits
<
T
>
:
:
max_exponent
)
;
T
x
=
static_cast
<
T
>
(
pow
(
2
.
0
static_cast
<
double
>
(
radix
)
)
)
;
return
x
*
RandomFloatingPointRange
<
T
>
(
-
1
.
0
1
.
0
)
;
}
class
FuzzingTraits
{
public
:
static
unsigned
int
Random
(
unsigned
int
aMax
)
;
static
bool
Sometimes
(
unsigned
int
aProbability
)
;
static
size_t
Frequency
(
const
size_t
aSize
const
uint64_t
aFactor
)
;
}
;
}
}
#
endif
