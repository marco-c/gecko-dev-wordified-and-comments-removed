#
ifndef
LLVM_FUZZER_ADAPTER_H
#
define
LLVM_FUZZER_ADAPTER_H
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
algorithm
>
#
include
<
string
>
#
include
<
tuple
>
#
include
<
vector
>
namespace
fuzzer
{
template
<
typename
Fn
>
bool
Adapt
(
Fn
F
const
uint8_t
*
Data
size_t
Size
)
;
namespace
impl
{
template
<
typename
T
>
size_t
UnpackPrimitive
(
const
uint8_t
*
Data
size_t
Size
T
*
Value
)
{
if
(
Size
<
sizeof
(
T
)
)
return
Size
;
*
Value
=
*
reinterpret_cast
<
const
T
*
>
(
Data
)
;
return
Size
-
sizeof
(
T
)
;
}
template
<
typename
T
>
size_t
UnpackSingle
(
const
uint8_t
*
Data
size_t
Size
T
*
Value
)
;
#
define
UNPACK_SINGLE_PRIMITIVE
(
Type
)
\
template
<
>
\
size_t
UnpackSingle
<
Type
>
(
const
uint8_t
*
Data
size_t
Size
Type
*
Value
)
{
\
return
UnpackPrimitive
(
Data
Size
Value
)
;
\
}
UNPACK_SINGLE_PRIMITIVE
(
char
)
UNPACK_SINGLE_PRIMITIVE
(
signed
char
)
UNPACK_SINGLE_PRIMITIVE
(
unsigned
char
)
UNPACK_SINGLE_PRIMITIVE
(
short
int
)
UNPACK_SINGLE_PRIMITIVE
(
unsigned
short
int
)
UNPACK_SINGLE_PRIMITIVE
(
int
)
UNPACK_SINGLE_PRIMITIVE
(
unsigned
int
)
UNPACK_SINGLE_PRIMITIVE
(
long
int
)
UNPACK_SINGLE_PRIMITIVE
(
unsigned
long
int
)
UNPACK_SINGLE_PRIMITIVE
(
bool
)
UNPACK_SINGLE_PRIMITIVE
(
wchar_t
)
UNPACK_SINGLE_PRIMITIVE
(
float
)
UNPACK_SINGLE_PRIMITIVE
(
double
)
UNPACK_SINGLE_PRIMITIVE
(
long
double
)
#
undef
UNPACK_SINGLE_PRIMITIVE
template
<
>
size_t
UnpackSingle
<
std
:
:
vector
<
uint8_t
>
>
(
const
uint8_t
*
Data
size_t
Size
std
:
:
vector
<
uint8_t
>
*
Value
)
{
if
(
Size
<
1
)
return
Size
;
size_t
Len
=
std
:
:
min
(
static_cast
<
size_t
>
(
*
Data
)
Size
-
1
)
;
std
:
:
vector
<
uint8_t
>
V
(
Data
+
1
Data
+
1
+
Len
)
;
Value
-
>
swap
(
V
)
;
return
Size
-
Len
-
1
;
}
template
<
>
size_t
UnpackSingle
<
std
:
:
string
>
(
const
uint8_t
*
Data
size_t
Size
std
:
:
string
*
Value
)
{
if
(
Size
<
1
)
return
Size
;
size_t
Len
=
std
:
:
min
(
static_cast
<
size_t
>
(
*
Data
)
Size
-
1
)
;
std
:
:
string
S
(
Data
+
1
Data
+
1
+
Len
)
;
Value
-
>
swap
(
S
)
;
return
Size
-
Len
-
1
;
}
template
<
int
N
typename
TupleT
>
typename
std
:
:
enable_if
<
N
=
=
std
:
:
tuple_size
<
TupleT
>
:
:
value
bool
>
:
:
type
UnpackImpl
(
const
uint8_t
*
Data
size_t
Size
TupleT
*
Tuple
)
{
return
true
;
}
template
<
int
N
typename
TupleT
>
typename
std
:
:
enable_if
<
N
<
std
:
:
tuple_size
<
TupleT
>
:
:
value
bool
>
:
:
type
UnpackImpl
(
const
uint8_t
*
Data
size_t
Size
TupleT
*
Tuple
)
{
size_t
NewSize
=
UnpackSingle
(
Data
Size
&
std
:
:
get
<
N
>
(
*
Tuple
)
)
;
if
(
NewSize
=
=
Size
)
{
return
false
;
}
return
UnpackImpl
<
N
+
1
TupleT
>
(
Data
+
(
Size
-
NewSize
)
NewSize
Tuple
)
;
}
template
<
typename
.
.
.
Args
>
bool
Unpack
(
const
uint8_t
*
Data
size_t
Size
std
:
:
tuple
<
Args
.
.
.
>
*
Tuple
)
{
return
UnpackImpl
<
0
std
:
:
tuple
<
Args
.
.
.
>
>
(
Data
Size
Tuple
)
;
}
template
<
int
.
.
.
>
struct
Seq
{
}
;
template
<
int
N
int
.
.
.
S
>
struct
GenSeq
:
GenSeq
<
N
-
1
N
-
1
S
.
.
.
>
{
}
;
template
<
int
.
.
.
S
>
struct
GenSeq
<
0
S
.
.
.
>
{
typedef
Seq
<
S
.
.
.
>
type
;
}
;
template
<
typename
T
>
struct
FnTraits
{
}
;
template
<
typename
ReturnType
typename
.
.
.
Args
>
struct
FnTraits
<
ReturnType
(
*
)
(
Args
.
.
.
)
>
{
enum
{
Arity
=
sizeof
.
.
.
(
Args
)
}
;
typedef
std
:
:
tuple
<
Args
.
.
.
>
ArgsTupleT
;
}
;
template
<
typename
Fn
int
.
.
.
S
>
void
ApplyImpl
(
Fn
F
const
typename
FnTraits
<
Fn
>
:
:
ArgsTupleT
&
Params
Seq
<
S
.
.
.
>
)
{
F
(
std
:
:
get
<
S
>
(
Params
)
.
.
.
)
;
}
template
<
typename
Fn
>
void
Apply
(
Fn
F
const
typename
FnTraits
<
Fn
>
:
:
ArgsTupleT
&
Params
)
{
auto
S
=
typename
GenSeq
<
FnTraits
<
Fn
>
:
:
Arity
>
:
:
type
(
)
;
ApplyImpl
(
F
Params
S
)
;
}
template
<
typename
Fn
>
bool
UnpackAndApply
(
Fn
F
const
uint8_t
*
Data
size_t
Size
)
{
typename
FnTraits
<
Fn
>
:
:
ArgsTupleT
Tuple
;
if
(
!
Unpack
(
Data
Size
&
Tuple
)
)
return
false
;
Apply
(
F
Tuple
)
;
return
true
;
}
}
template
<
typename
Fn
>
bool
Adapt
(
Fn
F
const
uint8_t
*
Data
size_t
Size
)
{
return
impl
:
:
UnpackAndApply
(
F
Data
Size
)
;
}
}
#
endif
