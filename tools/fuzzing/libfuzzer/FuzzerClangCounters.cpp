#
include
"
FuzzerDefs
.
h
"
#
if
LIBFUZZER_LINUX
__attribute__
(
(
weak
)
)
extern
uint64_t
__start___llvm_prf_cnts
;
__attribute__
(
(
weak
)
)
extern
uint64_t
__stop___llvm_prf_cnts
;
namespace
fuzzer
{
uint64_t
*
ClangCountersBegin
(
)
{
return
&
__start___llvm_prf_cnts
;
}
uint64_t
*
ClangCountersEnd
(
)
{
return
&
__stop___llvm_prf_cnts
;
}
}
#
else
namespace
fuzzer
{
uint64_t
*
ClangCountersBegin
(
)
{
return
nullptr
;
}
uint64_t
*
ClangCountersEnd
(
)
{
return
nullptr
;
}
}
#
endif
namespace
fuzzer
{
ATTRIBUTE_NO_SANITIZE_ALL
void
ClearClangCounters
(
)
{
for
(
auto
P
=
ClangCountersBegin
(
)
;
P
<
ClangCountersEnd
(
)
;
P
+
+
)
*
P
=
0
;
}
}
