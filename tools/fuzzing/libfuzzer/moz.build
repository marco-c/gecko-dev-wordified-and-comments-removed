Library
(
'
fuzzer
'
)
EXPORTS
+
=
[
'
FuzzerDefs
.
h
'
'
FuzzerExtFunctions
.
def
'
'
FuzzerExtFunctions
.
h
'
]
SOURCES
+
=
[
'
FuzzerCrossOver
.
cpp
'
'
FuzzerDataFlowTrace
.
cpp
'
'
FuzzerDriver
.
cpp
'
'
FuzzerExtFunctionsDlsym
.
cpp
'
'
FuzzerExtFunctionsWeak
.
cpp
'
'
FuzzerExtFunctionsWindows
.
cpp
'
'
FuzzerExtraCounters
.
cpp
'
'
FuzzerFork
.
cpp
'
'
FuzzerIO
.
cpp
'
'
FuzzerIOPosix
.
cpp
'
'
FuzzerIOWindows
.
cpp
'
'
FuzzerLoop
.
cpp
'
'
FuzzerMerge
.
cpp
'
'
FuzzerMutate
.
cpp
'
'
FuzzerSHA1
.
cpp
'
'
FuzzerTracePC
.
cpp
'
'
FuzzerUtil
.
cpp
'
'
FuzzerUtilDarwin
.
cpp
'
'
FuzzerUtilFuchsia
.
cpp
'
'
FuzzerUtilLinux
.
cpp
'
'
FuzzerUtilPosix
.
cpp
'
'
FuzzerUtilWindows
.
cpp
'
]
if
CONFIG
[
'
CC_TYPE
'
]
=
=
'
clang
'
:
CXXFLAGS
+
=
[
'
-
Wno
-
unreachable
-
code
-
return
'
]
for
flags_var
in
(
'
OS_CFLAGS
'
'
OS_CXXFLAGS
'
)
:
COMPILE_FLAGS
[
flags_var
]
=
[
f
for
f
in
COMPILE_FLAGS
.
get
(
flags_var
[
]
)
if
not
f
.
startswith
(
'
-
fsanitize
'
)
]
LINK_FLAGS
[
'
OS
'
]
=
[
f
for
f
in
LINK_FLAGS
.
get
(
'
OS
'
[
]
)
if
not
f
.
startswith
(
'
-
fsanitize
'
)
]
