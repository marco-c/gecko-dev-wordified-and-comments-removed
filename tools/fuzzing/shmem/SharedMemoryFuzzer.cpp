#
include
"
FuzzingMutate
.
h
"
#
include
"
FuzzingTraits
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
prenv
.
h
"
#
include
"
SharedMemoryFuzzer
.
h
"
#
define
SHMEM_FUZZER_DEFAULT_MUTATION_PROBABILITY
2
#
define
SHMEM_FUZZER_DEFAULT_MUTATION_FACTOR
500
#
define
SHMEM_FUZZER_LOG
(
fmt
args
.
.
.
)
\
if
(
SharedMemoryFuzzer
:
:
IsLoggingEnabled
(
)
)
{
\
printf_stderr
(
"
[
SharedMemoryFuzzer
]
"
fmt
"
\
n
"
#
#
args
)
;
\
}
namespace
mozilla
{
namespace
ipc
{
using
namespace
fuzzing
;
bool
SharedMemoryFuzzer
:
:
IsLoggingEnabled
(
)
{
static
bool
sInitialized
=
false
;
static
bool
sIsLoggingEnabled
=
false
;
if
(
!
sInitialized
)
{
sIsLoggingEnabled
=
!
!
PR_GetEnv
(
"
SHMEM_FUZZER_ENABLE_LOGGING
"
)
;
sInitialized
=
true
;
}
return
sIsLoggingEnabled
;
}
bool
SharedMemoryFuzzer
:
:
IsEnabled
(
)
{
static
bool
sInitialized
=
false
;
static
bool
sIsFuzzerEnabled
=
false
;
if
(
!
sInitialized
)
{
sIsFuzzerEnabled
=
!
!
PR_GetEnv
(
"
SHMEM_FUZZER_ENABLE
"
)
;
}
return
sIsFuzzerEnabled
;
}
uint64_t
SharedMemoryFuzzer
:
:
MutationProbability
(
)
{
static
uint64_t
sPropValue
=
SHMEM_FUZZER_DEFAULT_MUTATION_PROBABILITY
;
static
bool
sInitialized
=
false
;
if
(
sInitialized
)
{
return
sPropValue
;
}
sInitialized
=
true
;
const
char
*
probability
=
PR_GetEnv
(
"
SHMEM_FUZZER_MUTATION_PROBABILITY
"
)
;
if
(
probability
)
{
long
n
=
std
:
:
strtol
(
probability
nullptr
10
)
;
if
(
n
!
=
0
)
{
sPropValue
=
n
;
return
sPropValue
;
}
}
return
sPropValue
;
}
uint64_t
SharedMemoryFuzzer
:
:
MutationFactor
(
)
{
static
uint64_t
sPropValue
=
SHMEM_FUZZER_DEFAULT_MUTATION_FACTOR
;
static
bool
sInitialized
=
false
;
if
(
sInitialized
)
{
return
sPropValue
;
}
sInitialized
=
true
;
const
char
*
factor
=
PR_GetEnv
(
"
SHMEM_FUZZER_MUTATION_FACTOR
"
)
;
if
(
factor
)
{
long
n
=
strtol
(
factor
nullptr
10
)
;
if
(
n
!
=
0
)
{
sPropValue
=
n
;
return
sPropValue
;
}
}
return
sPropValue
;
}
void
*
SharedMemoryFuzzer
:
:
MutateSharedMemory
(
void
*
aMemory
size_t
aSize
)
{
if
(
!
IsEnabled
(
)
)
{
return
aMemory
;
}
if
(
aSize
=
=
0
)
{
SHMEM_FUZZER_LOG
(
"
shmem
is
of
size
0
.
"
)
;
return
aMemory
;
}
if
(
!
aMemory
)
{
SHMEM_FUZZER_LOG
(
"
shmem
memory
space
is
not
mapped
.
"
)
;
return
aMemory
;
}
if
(
!
FuzzingTraits
:
:
Sometimes
(
MutationProbability
(
)
)
)
{
return
aMemory
;
}
const
size_t
max
=
FuzzingTraits
:
:
Frequency
(
aSize
MutationFactor
(
)
)
;
SHMEM_FUZZER_LOG
(
"
shmem
of
size
:
%
zu
/
mutations
:
%
zu
"
aSize
max
)
;
for
(
size_t
i
=
0
;
i
<
max
;
i
+
+
)
{
FuzzingMutate
:
:
ChangeBit
(
(
uint8_t
*
)
aMemory
aSize
)
;
}
return
aMemory
;
}
}
}
