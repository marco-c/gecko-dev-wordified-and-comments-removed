#
include
<
cstdlib
>
#
include
"
FuzzerRunner
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
prenv
.
h
"
#
include
"
FuzzerTestHarness
.
h
"
namespace
mozilla
{
class
_InitFuzzer
{
public
:
_InitFuzzer
(
)
{
fuzzerRunner
=
new
FuzzerRunner
(
)
;
}
void
InitXPCOM
(
)
{
mScopedXPCOM
=
new
ScopedXPCOM
(
"
Fuzzer
"
)
;
}
void
DeinitXPCOM
(
)
{
if
(
mScopedXPCOM
)
delete
mScopedXPCOM
;
mScopedXPCOM
=
nullptr
;
}
private
:
ScopedXPCOM
*
mScopedXPCOM
;
}
InitLibFuzzer
;
static
void
DeinitXPCOM
(
)
{
InitLibFuzzer
.
DeinitXPCOM
(
)
;
}
int
FuzzerRunner
:
:
Run
(
int
*
argc
char
*
*
*
argv
)
{
InitLibFuzzer
.
InitXPCOM
(
)
;
std
:
:
atexit
(
DeinitXPCOM
)
;
const
char
*
fuzzerEnv
=
getenv
(
"
FUZZER
"
)
;
if
(
!
fuzzerEnv
)
{
fprintf
(
stderr
"
Must
specify
fuzzing
target
in
FUZZER
environment
variable
\
n
"
)
;
exit
(
1
)
;
}
std
:
:
string
moduleNameStr
(
fuzzerEnv
)
;
if
(
moduleNameStr
=
=
"
list
"
)
{
printf
(
"
FUZZER
=
list
detected
listing
targets
.
.
.
\
n
"
)
;
printf
(
"
=
=
=
=
=
Targets
=
=
=
=
=
\
n
"
)
;
FuzzerRegistry
:
:
getInstance
(
)
.
printModuleNames
(
)
;
printf
(
"
=
=
=
=
=
End
of
list
=
=
=
=
=
\
n
"
)
;
exit
(
0
)
;
}
FuzzerFunctions
funcs
=
FuzzerRegistry
:
:
getInstance
(
)
.
getModuleFunctions
(
moduleNameStr
)
;
FuzzerInitFunc
initFunc
=
funcs
.
first
;
FuzzerTestingFunc
testingFunc
=
funcs
.
second
;
if
(
initFunc
)
{
int
ret
=
initFunc
(
argc
argv
)
;
if
(
ret
)
{
fprintf
(
stderr
"
Fuzzing
Interface
:
Error
:
Initialize
callback
failed
\
n
"
)
;
exit
(
1
)
;
}
}
if
(
!
testingFunc
)
{
fprintf
(
stderr
"
Fuzzing
Interface
:
Error
:
No
testing
callback
found
\
n
"
)
;
exit
(
1
)
;
}
#
ifdef
LIBFUZZER
int
ret
=
mFuzzerDriver
(
argc
argv
testingFunc
)
;
#
else
int
ret
=
testingFunc
(
NULL
0
)
;
#
endif
InitLibFuzzer
.
DeinitXPCOM
(
)
;
return
ret
;
}
#
ifdef
LIBFUZZER
void
FuzzerRunner
:
:
setParams
(
LibFuzzerDriver
aDriver
)
{
mFuzzerDriver
=
aDriver
;
}
#
endif
}
