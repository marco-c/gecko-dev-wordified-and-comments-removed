#
ifndef
mozilla_ipc_ProtocolFuzzer_h
#
define
mozilla_ipc_ProtocolFuzzer_h
#
include
"
chrome
/
common
/
ipc_message
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
namespace
mozilla
{
namespace
ipc
{
template
<
typename
T
>
void
FuzzProtocol
(
T
*
aProtocol
const
uint8_t
*
aData
size_t
aSize
const
nsTArray
<
nsCString
>
&
aIgnoredMessageTypes
)
{
while
(
true
)
{
uint32_t
msg_size
=
IPC
:
:
Message
:
:
MessageSize
(
reinterpret_cast
<
const
char
*
>
(
aData
)
reinterpret_cast
<
const
char
*
>
(
aData
)
+
aSize
)
;
if
(
msg_size
=
=
0
|
|
msg_size
>
aSize
)
{
break
;
}
IPC
:
:
Message
m
(
reinterpret_cast
<
const
char
*
>
(
aData
)
msg_size
)
;
aSize
-
=
msg_size
;
aData
+
=
msg_size
;
if
(
aIgnoredMessageTypes
.
Contains
(
m
.
name
(
)
)
)
{
continue
;
}
if
(
m
.
is_sync
(
)
)
{
nsAutoPtr
<
IPC
:
:
Message
>
reply
;
aProtocol
-
>
OnMessageReceived
(
m
*
getter_Transfers
(
reply
)
)
;
}
else
{
aProtocol
-
>
OnMessageReceived
(
m
)
;
}
}
}
nsTArray
<
nsCString
>
LoadIPCMessageBlacklist
(
const
char
*
aPath
)
;
class
ProtocolFuzzerHelper
{
public
:
static
mozilla
:
:
dom
:
:
ContentParent
*
CreateContentParent
(
mozilla
:
:
dom
:
:
ContentParent
*
aOpener
const
nsAString
&
aRemoteType
)
;
}
;
}
}
#
endif
