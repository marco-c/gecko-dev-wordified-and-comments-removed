#
include
<
map
>
#
include
<
set
>
#
include
<
string
>
#
include
"
processor
/
simple_symbol_supplier
.
h
"
#
ifdef
_WIN32
#
include
<
windows
.
h
>
#
include
<
wininet
.
h
>
#
else
typedef
void
CURL
;
#
endif
namespace
google_breakpad
{
class
CodeModule
;
struct
SystemInfo
;
}
namespace
breakpad_extra
{
using
google_breakpad
:
:
CodeModule
;
using
google_breakpad
:
:
SimpleSymbolSupplier
;
using
google_breakpad
:
:
SymbolSupplier
;
using
google_breakpad
:
:
SystemInfo
;
using
std
:
:
string
;
using
std
:
:
vector
;
class
HTTPSymbolSupplier
:
public
SimpleSymbolSupplier
{
public
:
HTTPSymbolSupplier
(
const
vector
<
string
>
&
server_urls
const
string
&
cache_path
const
vector
<
string
>
&
local_paths
const
string
&
tmp_path
)
;
virtual
~
HTTPSymbolSupplier
(
)
;
virtual
SymbolSupplier
:
:
SymbolResult
GetSymbolFile
(
const
CodeModule
*
module
const
SystemInfo
*
system_info
string
*
symbol_file
)
;
virtual
SymbolSupplier
:
:
SymbolResult
GetSymbolFile
(
const
CodeModule
*
module
const
SystemInfo
*
system_info
string
*
symbol_file
string
*
symbol_data
)
;
virtual
SymbolSupplier
:
:
SymbolResult
GetCStringSymbolData
(
const
CodeModule
*
module
const
SystemInfo
*
system_info
string
*
symbol_file
char
*
*
symbol_data
size_t
*
size
)
;
struct
SymbolStats
{
bool
was_cached_on_disk
;
float
fetch_time_ms
;
}
;
bool
GetStats
(
const
CodeModule
*
module
SymbolStats
*
stats
)
const
;
private
:
bool
FetchSymbolFile
(
const
CodeModule
*
module
const
SystemInfo
*
system_info
)
;
bool
SymbolWasError
(
const
CodeModule
*
module
const
SystemInfo
*
system_info
)
;
void
StoreCacheHit
(
const
CodeModule
*
Module
)
;
void
StoreCacheMiss
(
const
CodeModule
*
module
float
fetch_time
)
;
void
StoreSymbolStats
(
const
CodeModule
*
module
const
SymbolStats
&
stats
)
;
vector
<
string
>
server_urls_
;
string
cache_path_
;
string
tmp_path_
;
std
:
:
set
<
std
:
:
pair
<
string
string
>
>
error_symbols_
;
std
:
:
map
<
std
:
:
pair
<
string
string
>
SymbolStats
>
symbol_stats_
;
#
ifdef
_WIN32
HINTERNET
session_
;
#
else
CURL
*
session_
;
#
endif
}
;
}
