var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
defaultSettings
=
{
entries
:
1000000
interval
:
1
features
:
[
"
threads
"
]
threads
:
[
"
GeckoMain
"
]
}
;
function
startProfiler
(
callersSettings
)
{
const
settings
=
Object
.
assign
(
{
}
defaultSettings
callersSettings
)
;
Services
.
profiler
.
StartProfiler
(
settings
.
entries
settings
.
interval
settings
.
features
settings
.
threads
0
settings
.
duration
)
;
}
function
wait
(
time
)
{
return
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
time
)
;
}
)
;
}
function
getPayloadsOfTypeFromAllThreads
(
profile
type
payloadTarget
=
[
]
)
{
for
(
const
{
markers
}
of
profile
.
threads
)
{
for
(
const
markerTuple
of
markers
.
data
)
{
const
payload
=
markerTuple
[
markers
.
schema
.
data
]
;
if
(
payload
&
&
payload
.
type
=
=
=
type
)
{
payloadTarget
.
push
(
payload
)
;
}
}
}
for
(
const
subProcess
of
profile
.
processes
)
{
getPayloadsOfTypeFromAllThreads
(
subProcess
type
payloadTarget
)
;
}
return
payloadTarget
;
}
function
getPayloadsOfType
(
thread
type
)
{
const
{
markers
}
=
thread
;
const
results
=
[
]
;
for
(
const
markerTuple
of
markers
.
data
)
{
const
payload
=
markerTuple
[
markers
.
schema
.
data
]
;
if
(
payload
&
&
payload
.
type
=
=
=
type
)
{
results
.
push
(
payload
)
;
}
}
return
results
;
}
function
captureAtLeastOneJsSample
(
)
{
function
getProfileSampleCount
(
)
{
const
profile
=
Services
.
profiler
.
getProfileData
(
)
;
return
profile
.
threads
[
0
]
.
samples
.
data
.
length
;
}
const
sampleCount
=
getProfileSampleCount
(
)
;
while
(
true
)
{
if
(
sampleCount
<
getProfileSampleCount
(
)
)
{
return
sampleCount
;
}
}
}
async
function
stopAndGetProfile
(
)
{
Services
.
profiler
.
PauseSampling
(
)
;
const
profile
=
await
Services
.
profiler
.
getProfileDataAsync
(
)
;
Services
.
profiler
.
StopProfiler
(
)
;
return
profile
;
}
