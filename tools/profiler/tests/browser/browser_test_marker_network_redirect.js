add_task
(
async
function
test_network_markers_service_worker_setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
cache
.
disk
.
enable
"
false
]
[
"
browser
.
cache
.
memory
.
enable
"
false
]
]
}
)
;
}
)
;
add_task
(
async
function
test_network_markers_redirect_simple
(
)
{
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
is
not
currently
active
"
)
;
startProfilerForMarkerTests
(
)
;
const
targetFileNameWithCacheBust
=
"
simple
.
html
"
;
const
url
=
BASE_URL_HTTPS
+
"
redirect
.
sjs
?
"
+
encodeURIComponent
(
targetFileNameWithCacheBust
)
;
const
targetUrl
=
BASE_URL_HTTPS
+
targetFileNameWithCacheBust
;
await
BrowserTestUtils
.
withNewTab
(
url
async
contentBrowser
=
>
{
const
contentPid
=
await
SpecialPowers
.
spawn
(
contentBrowser
[
]
(
)
=
>
Services
.
appinfo
.
processID
)
;
const
{
parentThread
contentThread
}
=
await
stopProfilerNowAndGetThreads
(
contentPid
)
;
const
parentNetworkMarkers
=
getInflatedNetworkMarkers
(
parentThread
)
;
const
contentNetworkMarkers
=
getInflatedNetworkMarkers
(
contentThread
)
;
info
(
JSON
.
stringify
(
parentNetworkMarkers
null
2
)
)
;
info
(
JSON
.
stringify
(
contentNetworkMarkers
null
2
)
)
;
Assert
.
equal
(
parentNetworkMarkers
.
length
4
We
should
get
2
pairs
of
network
markers
in
the
parent
thread
.
)
;
Assert
.
equal
(
contentNetworkMarkers
.
length
2
We
should
get
one
pair
of
network
markers
in
the
content
thread
.
)
;
const
parentRedirectMarker
=
parentNetworkMarkers
[
1
]
;
const
parentStopMarker
=
parentNetworkMarkers
[
3
]
;
const
contentStopMarker
=
contentNetworkMarkers
[
1
]
;
Assert
.
objectContains
(
parentRedirectMarker
{
name
:
Expect
.
stringMatches
(
Load
\
\
d
+
:
.
*
{
escapeStringRegexp
(
url
)
}
)
data
:
Expect
.
objectContainsOnly
(
{
type
:
"
Network
"
status
:
"
STATUS_REDIRECT
"
URI
:
url
RedirectURI
:
targetUrl
requestMethod
:
"
GET
"
contentType
:
null
startTime
:
Expect
.
number
(
)
endTime
:
Expect
.
number
(
)
domainLookupStart
:
Expect
.
number
(
)
domainLookupEnd
:
Expect
.
number
(
)
connectStart
:
Expect
.
number
(
)
tcpConnectEnd
:
Expect
.
number
(
)
connectEnd
:
Expect
.
number
(
)
requestStart
:
Expect
.
number
(
)
responseStart
:
Expect
.
number
(
)
responseEnd
:
Expect
.
number
(
)
id
:
Expect
.
number
(
)
redirectId
:
parentStopMarker
.
data
.
id
pri
:
Expect
.
number
(
)
cache
:
Expect
.
stringMatches
(
/
Missed
|
Unresolved
/
)
redirectType
:
"
Permanent
"
isHttpToHttpsRedirect
:
false
}
)
}
)
;
const
expectedProperties
=
{
name
:
Expect
.
stringMatches
(
Load
\
\
d
+
:
.
*
{
escapeStringRegexp
(
targetUrl
)
}
)
}
;
const
expectedDataProperties
=
{
type
:
"
Network
"
status
:
"
STATUS_STOP
"
URI
:
targetUrl
requestMethod
:
"
GET
"
contentType
:
"
text
/
html
"
startTime
:
Expect
.
number
(
)
endTime
:
Expect
.
number
(
)
domainLookupStart
:
Expect
.
number
(
)
domainLookupEnd
:
Expect
.
number
(
)
connectStart
:
Expect
.
number
(
)
tcpConnectEnd
:
Expect
.
number
(
)
connectEnd
:
Expect
.
number
(
)
requestStart
:
Expect
.
number
(
)
responseStart
:
Expect
.
number
(
)
responseEnd
:
Expect
.
number
(
)
id
:
Expect
.
number
(
)
count
:
Expect
.
number
(
)
pri
:
Expect
.
number
(
)
}
;
Assert
.
objectContains
(
parentStopMarker
expectedProperties
)
;
Assert
.
objectContains
(
contentStopMarker
expectedProperties
)
;
Assert
.
objectContainsOnly
(
parentStopMarker
.
data
{
.
.
.
expectedDataProperties
cache
:
Expect
.
stringMatches
(
/
^
(
Missed
|
Unresolved
)
/
)
}
)
;
Assert
.
objectContainsOnly
(
contentStopMarker
.
data
expectedDataProperties
)
;
}
)
;
}
)
;
add_task
(
async
function
test_network_markers_redirect_resources
(
)
{
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
is
not
currently
active
"
)
;
startProfilerForMarkerTests
(
)
;
const
url
=
BASE_URL_HTTPS
+
"
page_with_resources
.
html
?
cacheBust
=
"
+
Math
.
random
(
)
;
await
BrowserTestUtils
.
withNewTab
(
url
async
contentBrowser
=
>
{
const
contentPid
=
await
SpecialPowers
.
spawn
(
contentBrowser
[
]
(
)
=
>
Services
.
appinfo
.
processID
)
;
const
{
parentThread
contentThread
}
=
await
stopProfilerNowAndGetThreads
(
contentPid
)
;
const
parentNetworkMarkers
=
getInflatedNetworkMarkers
(
parentThread
)
;
const
contentNetworkMarkers
=
getInflatedNetworkMarkers
(
contentThread
)
;
info
(
JSON
.
stringify
(
parentNetworkMarkers
null
2
)
)
;
info
(
JSON
.
stringify
(
contentNetworkMarkers
null
2
)
)
;
Assert
.
equal
(
parentNetworkMarkers
.
length
8
We
should
get
4
pairs
of
network
markers
in
the
parent
thread
.
)
;
Assert
.
equal
(
contentNetworkMarkers
.
length
8
We
should
get
4
pairs
of
network
markers
in
the
content
thread
.
)
;
const
parentPairs
=
getPairsOfNetworkMarkers
(
parentNetworkMarkers
)
;
const
contentPairs
=
getPairsOfNetworkMarkers
(
contentNetworkMarkers
)
;
parentPairs
.
forEach
(
pair
=
>
Assert
.
equal
(
pair
.
length
2
For
the
URL
{
pair
[
0
]
.
data
.
URI
}
we
should
get
2
markers
in
the
parent
process
.
)
)
;
contentPairs
.
forEach
(
pair
=
>
Assert
.
equal
(
pair
.
length
2
For
the
URL
{
pair
[
0
]
.
data
.
URI
}
we
should
get
2
markers
in
the
content
process
.
)
)
;
const
parentFirstStopMarker
=
parentPairs
[
1
]
[
1
]
;
const
parentRedirectMarker
=
parentPairs
[
2
]
[
1
]
;
const
parentSecondStopMarker
=
parentPairs
[
3
]
[
1
]
;
const
contentFirstStopMarker
=
contentPairs
[
1
]
[
1
]
;
const
contentRedirectMarker
=
contentPairs
[
2
]
[
1
]
;
const
contentSecondStopMarker
=
contentPairs
[
3
]
[
1
]
;
const
expectedCommonDataProperties
=
{
type
:
"
Network
"
requestMethod
:
"
GET
"
startTime
:
Expect
.
number
(
)
endTime
:
Expect
.
number
(
)
id
:
Expect
.
number
(
)
pri
:
Expect
.
number
(
)
innerWindowID
:
Expect
.
number
(
)
}
;
const
expectedConnectionProperties
=
{
domainLookupStart
:
Expect
.
number
(
)
domainLookupEnd
:
Expect
.
number
(
)
connectStart
:
Expect
.
number
(
)
tcpConnectEnd
:
Expect
.
number
(
)
connectEnd
:
Expect
.
number
(
)
requestStart
:
Expect
.
number
(
)
responseStart
:
Expect
.
number
(
)
responseEnd
:
Expect
.
number
(
)
}
;
const
expectedPropertiesForStopMarker
=
{
name
:
Expect
.
stringMatches
(
/
Load
\
d
+
:
.
*
\
/
firefox
-
logo
-
nightly
\
.
svg
/
)
}
;
const
expectedDataPropertiesForStopMarker
=
{
.
.
.
expectedCommonDataProperties
.
.
.
expectedConnectionProperties
status
:
"
STATUS_STOP
"
URI
:
Expect
.
stringContains
(
"
/
firefox
-
logo
-
nightly
.
svg
"
)
contentType
:
"
image
/
svg
+
xml
"
count
:
Expect
.
number
(
)
}
;
const
expectedPropertiesForRedirectMarker
=
{
name
:
Expect
.
stringMatches
(
/
Load
\
d
+
:
.
*
\
/
redirect
.
sjs
\
?
firefox
-
logo
-
nightly
\
.
svg
/
)
}
;
const
expectedDataPropertiesForRedirectMarker
=
{
.
.
.
expectedCommonDataProperties
.
.
.
expectedConnectionProperties
status
:
"
STATUS_REDIRECT
"
URI
:
Expect
.
stringContains
(
"
/
redirect
.
sjs
?
firefox
-
logo
-
nightly
.
svg
"
)
RedirectURI
:
Expect
.
stringContains
(
"
/
firefox
-
logo
-
nightly
.
svg
"
)
contentType
:
null
redirectType
:
"
Permanent
"
isHttpToHttpsRedirect
:
false
}
;
Assert
.
objectContains
(
parentFirstStopMarker
expectedPropertiesForStopMarker
)
;
Assert
.
objectContainsOnly
(
parentFirstStopMarker
.
data
{
.
.
.
expectedDataPropertiesForStopMarker
cache
:
Expect
.
stringMatches
(
/
^
(
Missed
|
Unresolved
)
/
)
}
)
;
Assert
.
objectContains
(
contentFirstStopMarker
expectedPropertiesForStopMarker
)
;
Assert
.
objectContainsOnly
(
contentFirstStopMarker
.
data
expectedDataPropertiesForStopMarker
)
;
Assert
.
objectContains
(
parentRedirectMarker
expectedPropertiesForRedirectMarker
)
;
Assert
.
objectContainsOnly
(
parentRedirectMarker
.
data
{
.
.
.
expectedDataPropertiesForRedirectMarker
redirectId
:
parentSecondStopMarker
.
data
.
id
cache
:
Expect
.
stringMatches
(
/
^
(
Missed
|
Unresolved
)
/
)
}
)
;
Assert
.
objectContains
(
contentRedirectMarker
expectedPropertiesForRedirectMarker
)
;
Assert
.
objectContainsOnly
(
contentRedirectMarker
.
data
{
.
.
.
expectedDataPropertiesForRedirectMarker
redirectId
:
contentSecondStopMarker
.
data
.
id
}
)
;
Assert
.
objectContains
(
parentSecondStopMarker
expectedPropertiesForStopMarker
)
;
Assert
.
objectContainsOnly
(
parentSecondStopMarker
.
data
{
.
.
.
expectedDataPropertiesForStopMarker
count
:
Expect
.
number
(
)
cache
:
Expect
.
stringMatches
(
/
^
(
Missed
|
Unresolved
)
/
)
}
)
;
Assert
.
objectContains
(
contentSecondStopMarker
expectedPropertiesForStopMarker
)
;
Assert
.
objectContainsOnly
(
contentSecondStopMarker
.
data
expectedDataPropertiesForStopMarker
)
;
}
)
;
}
)
;
