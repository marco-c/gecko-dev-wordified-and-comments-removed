const
serviceWorkerFileName
=
"
serviceworker_no_fetch_handler
.
js
"
;
registerCleanupFunction
(
(
)
=
>
SpecialPowers
.
removeAllServiceWorkerData
(
)
)
;
add_task
(
async
function
test_network_markers_service_worker_setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
cache
.
disk
.
enable
"
false
]
[
"
browser
.
cache
.
memory
.
enable
"
false
]
]
}
)
;
}
)
;
add_task
(
async
function
test_network_markers_service_worker_register
(
)
{
const
url
=
{
BASE_URL_HTTPS
}
serviceworkers
/
serviceworker_register
.
html
;
await
BrowserTestUtils
.
withNewTab
(
url
async
contentBrowser
=
>
{
await
SpecialPowers
.
spawn
(
contentBrowser
[
serviceWorkerFileName
]
async
function
(
serviceWorkerFileName
)
{
await
content
.
wrappedJSObject
.
registerServiceWorkerAndWait
(
serviceWorkerFileName
)
;
}
)
;
const
workers
=
await
SpecialPowers
.
registeredServiceWorkers
(
)
;
Assert
.
equal
(
workers
.
length
1
"
One
service
worker
should
be
properly
registered
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_network_markers_service_worker_use
(
)
{
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
is
not
currently
active
"
)
;
await
ProfilerTestUtils
.
startProfilerForMarkerTests
(
)
;
const
url
=
{
BASE_URL_HTTPS
}
serviceworkers
/
serviceworker_page
.
html
;
await
BrowserTestUtils
.
withNewTab
(
url
async
contentBrowser
=
>
{
const
contentPid
=
await
SpecialPowers
.
spawn
(
contentBrowser
[
]
(
)
=
>
Services
.
appinfo
.
processID
)
;
const
{
parentThread
contentThread
}
=
await
stopProfilerNowAndGetThreads
(
contentPid
)
;
logInformationForThread
(
"
parentThread
information
"
parentThread
)
;
logInformationForThread
(
"
contentThread
information
"
contentThread
)
;
const
parentNetworkMarkers
=
ProfilerTestUtils
.
getInflatedNetworkMarkers
(
parentThread
)
.
filter
(
marker
=
>
!
marker
.
data
.
URI
.
includes
(
serviceWorkerFileName
)
)
;
const
contentNetworkMarkers
=
ProfilerTestUtils
.
getInflatedNetworkMarkers
(
contentThread
)
;
info
(
"
Parent
network
markers
:
"
+
JSON
.
stringify
(
parentNetworkMarkers
null
2
)
)
;
info
(
"
Content
network
markers
:
"
+
JSON
.
stringify
(
contentNetworkMarkers
null
2
)
)
;
const
parentPairs
=
ProfilerTestUtils
.
getPairsOfNetworkMarkers
(
parentNetworkMarkers
)
;
const
contentPairs
=
ProfilerTestUtils
.
getPairsOfNetworkMarkers
(
contentNetworkMarkers
)
;
parentPairs
.
forEach
(
pair
=
>
Assert
.
equal
(
pair
.
length
2
For
the
URL
{
pair
[
0
]
.
data
.
URI
}
we
should
get
2
markers
in
the
parent
process
.
)
)
;
contentPairs
.
forEach
(
pair
=
>
Assert
.
equal
(
pair
.
length
2
For
the
URL
{
pair
[
0
]
.
data
.
URI
}
we
should
get
2
markers
in
the
content
process
.
)
)
;
const
parentStopMarkers
=
parentPairs
.
map
(
(
[
_
stopMarker
]
)
=
>
stopMarker
)
;
const
contentStopMarkers
=
contentPairs
.
map
(
(
[
_
stopMarker
]
)
=
>
stopMarker
)
;
const
expectedFiles
=
[
"
serviceworker_page
.
html
"
"
firefox
-
logo
-
nightly
.
svg
"
]
.
map
(
filename
=
>
{
BASE_URL_HTTPS
}
serviceworkers
/
{
filename
}
)
;
Assert
.
equal
(
parentStopMarkers
.
length
expectedFiles
.
length
"
There
should
be
as
many
stop
markers
in
the
parent
process
as
requested
files
.
"
)
;
Assert
.
equal
(
contentStopMarkers
.
length
expectedFiles
.
length
"
There
should
be
as
many
stop
markers
in
the
content
process
as
requested
files
.
"
)
;
for
(
const
[
i
expectedFile
]
of
expectedFiles
.
entries
(
)
)
{
info
(
Checking
if
"
{
expectedFile
}
"
if
present
in
the
network
markers
in
both
processes
.
)
;
const
parentMarker
=
parentStopMarkers
.
find
(
marker
=
>
marker
.
data
.
URI
=
=
=
expectedFile
)
;
const
contentMarker
=
contentStopMarkers
.
find
(
marker
=
>
marker
.
data
.
URI
=
=
=
expectedFile
)
;
const
commonProperties
=
{
name
:
Expect
.
stringMatches
(
Load
\
\
d
+
:
.
*
{
escapeStringRegexp
(
expectedFile
)
}
)
}
;
Assert
.
objectContains
(
parentMarker
commonProperties
)
;
Assert
.
objectContains
(
contentMarker
commonProperties
)
;
const
commonDataProperties
=
{
type
:
"
Network
"
status
:
"
STATUS_STOP
"
URI
:
expectedFile
httpVersion
:
"
http
/
1
.
1
"
classOfService
:
"
Unset
"
requestStatus
:
"
NS_OK
"
requestMethod
:
"
GET
"
responseStatus
:
200
contentType
:
Expect
.
stringMatches
(
/
^
(
text
\
/
html
|
image
\
/
svg
\
+
xml
)
/
)
startTime
:
Expect
.
number
(
)
endTime
:
Expect
.
number
(
)
id
:
Expect
.
number
(
)
pri
:
Expect
.
number
(
)
count
:
Expect
.
number
(
)
domainLookupStart
:
Expect
.
number
(
)
domainLookupEnd
:
Expect
.
number
(
)
connectStart
:
Expect
.
number
(
)
secureConnectionStart
:
Expect
.
number
(
)
tcpConnectEnd
:
Expect
.
number
(
)
connectEnd
:
Expect
.
number
(
)
requestStart
:
Expect
.
number
(
)
responseStart
:
Expect
.
number
(
)
responseEnd
:
Expect
.
number
(
)
}
;
if
(
i
=
=
=
0
)
{
Assert
.
objectContainsOnly
(
parentMarker
.
data
{
.
.
.
commonDataProperties
cache
:
Expect
.
stringMatches
(
/
^
(
Missed
|
Unresolved
)
/
)
classOfService
:
"
UrgentStart
"
}
)
;
Assert
.
objectContainsOnly
(
contentMarker
.
data
{
.
.
.
commonDataProperties
classOfService
:
"
UrgentStart
"
}
)
;
}
else
{
Assert
.
objectContainsOnly
(
parentMarker
.
data
{
.
.
.
commonDataProperties
cache
:
Expect
.
stringMatches
(
/
^
(
Missed
|
Unresolved
)
/
)
innerWindowID
:
Expect
.
number
(
)
}
)
;
Assert
.
objectContainsOnly
(
contentMarker
.
data
{
.
.
.
commonDataProperties
innerWindowID
:
Expect
.
number
(
)
}
)
;
}
}
}
)
;
}
)
;
