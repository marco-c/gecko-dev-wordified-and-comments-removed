add_task
(
async
function
test_network_markers
(
)
{
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
is
not
currently
active
"
)
;
startProfilerForMarkerTests
(
)
;
const
url
=
BASE_URL_HTTPS
+
"
simple
.
html
?
cacheBust
=
"
+
Math
.
random
(
)
;
await
BrowserTestUtils
.
withNewTab
(
url
async
contentBrowser
=
>
{
const
contentPid
=
await
SpecialPowers
.
spawn
(
contentBrowser
[
]
(
)
=
>
Services
.
appinfo
.
processID
)
;
const
{
parentThread
contentThread
}
=
await
stopProfilerNowAndGetThreads
(
contentPid
)
;
const
parentNetworkMarkers
=
getInflatedNetworkMarkers
(
parentThread
)
;
const
contentNetworkMarkers
=
getInflatedNetworkMarkers
(
contentThread
)
;
info
(
JSON
.
stringify
(
parentNetworkMarkers
null
2
)
)
;
info
(
JSON
.
stringify
(
contentNetworkMarkers
null
2
)
)
;
Assert
.
equal
(
parentNetworkMarkers
.
length
2
We
should
get
a
pair
of
network
markers
in
the
parent
thread
.
)
;
Assert
.
equal
(
contentNetworkMarkers
.
length
2
We
should
get
a
pair
of
network
markers
in
the
content
thread
.
)
;
const
parentStopMarker
=
parentNetworkMarkers
[
1
]
;
const
contentStopMarker
=
contentNetworkMarkers
[
1
]
;
const
expectedProperties
=
{
name
:
Expect
.
stringMatches
(
Load
\
\
d
+
:
.
*
{
escapeStringRegexp
(
url
)
}
)
data
:
Expect
.
objectContains
(
{
status
:
"
STATUS_STOP
"
URI
:
url
httpVersion
:
"
http
/
1
.
1
"
classOfService
:
"
UrgentStart
"
requestMethod
:
"
GET
"
contentType
:
"
text
/
html
"
startTime
:
Expect
.
number
(
)
endTime
:
Expect
.
number
(
)
domainLookupStart
:
Expect
.
number
(
)
domainLookupEnd
:
Expect
.
number
(
)
connectStart
:
Expect
.
number
(
)
tcpConnectEnd
:
Expect
.
number
(
)
connectEnd
:
Expect
.
number
(
)
requestStart
:
Expect
.
number
(
)
responseStart
:
Expect
.
number
(
)
responseEnd
:
Expect
.
number
(
)
id
:
Expect
.
number
(
)
count
:
Expect
.
number
(
)
pri
:
Expect
.
number
(
)
}
)
}
;
Assert
.
objectContains
(
parentStopMarker
expectedProperties
)
;
Assert
.
objectContains
(
parentStopMarker
.
data
{
cache
:
Expect
.
stringMatches
(
/
^
(
Missed
|
Unresolved
)
/
)
}
)
;
Assert
.
objectContains
(
contentStopMarker
expectedProperties
)
;
}
)
;
}
)
;
