function
waitForState
(
worker
state
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
onStateChange
(
)
{
if
(
worker
.
state
=
=
=
state
)
{
worker
.
removeEventListener
(
"
statechange
"
onStateChange
)
;
resolve
(
)
;
}
if
(
worker
.
state
=
=
=
"
redundant
"
)
{
worker
.
removeEventListener
(
"
statechange
"
onStateChange
)
;
reject
(
new
Error
(
"
The
service
worker
failed
to
install
.
"
)
)
;
}
}
worker
.
addEventListener
(
"
statechange
"
onStateChange
)
;
onStateChange
(
)
;
}
)
;
}
async
function
registerServiceWorkerAndWait
(
serviceWorkerFile
)
{
if
(
!
serviceWorkerFile
)
{
throw
new
Error
(
"
No
service
worker
filename
has
been
specified
.
Please
specify
a
valid
filename
.
"
)
;
}
console
.
log
(
.
.
.
registering
the
serviceworker
"
{
serviceWorkerFile
}
"
)
;
const
reg
=
await
navigator
.
serviceWorker
.
register
(
.
/
{
serviceWorkerFile
}
{
scope
:
"
.
/
"
}
)
;
console
.
log
(
"
.
.
.
waiting
for
activation
"
)
;
await
waitForState
(
reg
.
installing
"
activated
"
)
;
console
.
log
(
"
.
.
.
activated
!
"
)
;
}
