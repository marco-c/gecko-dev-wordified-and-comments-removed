registerCleanupFunction
(
(
)
=
>
SpecialPowers
.
removeAllServiceWorkerData
(
)
)
;
add_task
(
async
function
test_network_markers_service_worker_register
(
)
{
if
(
!
AppConstants
.
MOZ_GECKO_PROFILER
)
{
return
;
}
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
is
not
currently
active
"
)
;
startProfilerForMarkerTests
(
)
;
const
url
=
BASE_URL_HTTPS
+
"
serviceworkers
/
serviceworker_register
.
html
?
cacheBust
=
"
+
Math
.
random
(
)
;
await
BrowserTestUtils
.
withNewTab
(
url
async
contentBrowser
=
>
{
const
contentPid
=
await
SpecialPowers
.
spawn
(
contentBrowser
[
]
(
)
=
>
Services
.
appinfo
.
processID
)
;
await
SpecialPowers
.
spawn
(
contentBrowser
[
]
async
function
(
)
{
await
content
.
wrappedJSObject
.
registerServiceWorkerAndWait
(
)
;
}
)
;
const
{
parentThread
contentThread
}
=
await
stopProfilerNowAndGetThreads
(
contentPid
)
;
const
parentNetworkMarkers
=
getInflatedNetworkMarkers
(
parentThread
)
;
const
contentNetworkMarkers
=
getInflatedNetworkMarkers
(
contentThread
)
;
info
(
JSON
.
stringify
(
parentNetworkMarkers
null
2
)
)
;
info
(
JSON
.
stringify
(
contentNetworkMarkers
null
2
)
)
;
const
parentPairs
=
getPairsOfNetworkMarkers
(
parentNetworkMarkers
)
;
const
contentPairs
=
getPairsOfNetworkMarkers
(
contentNetworkMarkers
)
;
parentPairs
.
forEach
(
pair
=
>
Assert
.
equal
(
pair
.
length
2
For
the
URL
{
pair
[
0
]
.
data
.
URI
}
we
should
get
2
markers
in
the
parent
process
.
)
)
;
contentPairs
.
forEach
(
pair
=
>
Assert
.
equal
(
pair
.
length
2
For
the
URL
{
pair
[
0
]
.
data
.
URI
}
we
should
get
2
markers
in
the
content
process
.
)
)
;
const
workers
=
await
SpecialPowers
.
registeredServiceWorkers
(
)
;
Assert
.
equal
(
workers
.
length
1
"
One
service
worker
should
be
properly
registered
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_network_markers_service_worker_use
(
)
{
if
(
!
AppConstants
.
MOZ_GECKO_PROFILER
)
{
return
;
}
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
is
not
currently
active
"
)
;
startProfilerForMarkerTests
(
)
;
const
url
=
BASE_URL_HTTPS
+
"
serviceworkers
/
serviceworker_page
.
html
?
cacheBust
=
"
+
Math
.
random
(
)
;
await
BrowserTestUtils
.
withNewTab
(
url
async
contentBrowser
=
>
{
const
contentPid
=
await
SpecialPowers
.
spawn
(
contentBrowser
[
]
(
)
=
>
Services
.
appinfo
.
processID
)
;
const
{
parentThread
contentThread
}
=
await
stopProfilerNowAndGetThreads
(
contentPid
)
;
const
parentNetworkMarkers
=
getInflatedNetworkMarkers
(
parentThread
)
;
const
contentNetworkMarkers
=
getInflatedNetworkMarkers
(
contentThread
)
;
info
(
JSON
.
stringify
(
parentNetworkMarkers
null
2
)
)
;
info
(
JSON
.
stringify
(
contentNetworkMarkers
null
2
)
)
;
const
contentPairs
=
getPairsOfNetworkMarkers
(
contentNetworkMarkers
)
;
contentPairs
.
forEach
(
pair
=
>
Assert
.
equal
(
pair
.
length
2
For
the
URL
{
pair
[
0
]
.
data
.
URI
}
we
should
get
2
markers
in
the
content
process
.
)
)
;
}
)
;
}
)
;
