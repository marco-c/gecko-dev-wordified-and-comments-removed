if
(
SpecialPowers
.
useRemoteSubframes
)
{
requestLongerTimeout
(
2
)
;
}
add_task
(
async
function
test_profile_multi_frame_page_info
(
)
{
SimpleTest
.
requestCompleteLog
(
)
;
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
)
;
info
(
"
Clear
the
previous
pages
just
in
case
we
still
have
some
open
tabs
.
"
)
;
await
Services
.
profiler
.
ClearAllPages
(
)
;
info
(
"
Start
the
profiler
to
test
the
page
information
with
multi
frame
page
.
"
)
;
await
ProfilerTestUtils
.
startProfiler
(
)
;
info
(
"
Open
a
tab
with
multi_frame
.
html
in
it
.
"
)
;
const
url
=
BASE_URL_HTTPS
+
"
multi_frame
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
url
async
function
(
contentBrowser
)
{
const
contentPid
=
await
SpecialPowers
.
spawn
(
contentBrowser
[
]
(
)
=
>
{
return
Services
.
appinfo
.
processID
;
}
)
;
const
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
const
activeTabID
=
win
.
gBrowser
.
selectedBrowser
.
browsingContext
.
browserId
;
info
(
"
Capture
the
profile
data
.
"
)
;
const
{
contentProcess
}
=
await
stopProfilerNowAndGetThreads
(
contentPid
)
;
info
(
"
Check
if
the
captured
pages
are
the
ones
with
correct
values
we
created
.
"
)
;
let
parentPage
;
let
foundPage
=
0
;
for
(
const
page
of
contentProcess
.
pages
)
{
if
(
page
.
url
=
=
url
)
{
Assert
.
equal
(
page
.
url
url
)
;
Assert
.
equal
(
typeof
page
.
tabID
"
number
"
)
;
Assert
.
equal
(
page
.
tabID
activeTabID
)
;
Assert
.
equal
(
typeof
page
.
innerWindowID
"
number
"
)
;
Assert
.
equal
(
page
.
embedderInnerWindowID
0
)
;
Assert
.
equal
(
typeof
page
.
isPrivateBrowsing
"
boolean
"
)
;
Assert
.
equal
(
page
.
isPrivateBrowsing
false
)
;
parentPage
=
page
;
foundPage
+
+
;
break
;
}
}
Assert
.
notEqual
(
typeof
parentPage
"
undefined
"
)
;
for
(
const
page
of
contentProcess
.
pages
)
{
if
(
page
.
url
=
=
BASE_URL_HTTPS
+
"
single_frame
.
html
"
)
{
Assert
.
equal
(
page
.
url
BASE_URL_HTTPS
+
"
single_frame
.
html
"
)
;
Assert
.
equal
(
typeof
page
.
tabID
"
number
"
)
;
Assert
.
equal
(
page
.
tabID
activeTabID
)
;
Assert
.
equal
(
typeof
page
.
innerWindowID
"
number
"
)
;
Assert
.
equal
(
typeof
page
.
embedderInnerWindowID
"
number
"
)
;
Assert
.
notEqual
(
typeof
parentPage
"
undefined
"
)
;
Assert
.
equal
(
page
.
embedderInnerWindowID
parentPage
.
innerWindowID
)
;
Assert
.
equal
(
typeof
page
.
isPrivateBrowsing
"
boolean
"
)
;
Assert
.
equal
(
page
.
isPrivateBrowsing
false
)
;
foundPage
+
+
;
break
;
}
}
Assert
.
equal
(
foundPage
2
)
;
}
)
;
}
)
;
