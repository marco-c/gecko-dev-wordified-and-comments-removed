"
use
strict
"
;
(
function
(
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
startProfiler
(
settings
)
{
Services
.
profiler
.
StartProfiler
(
settings
.
entries
settings
.
interval
settings
.
features
settings
.
features
.
length
settings
.
threads
settings
.
threads
.
length
)
;
info
(
"
Profiler
has
started
"
)
;
}
function
getProfile
(
)
{
const
profile
=
Services
.
profiler
.
getProfileData
(
)
;
info
(
"
We
got
a
profile
run
the
mochitest
with
-
-
keep
-
open
true
to
see
the
logged
profile
in
the
Web
Console
.
"
)
;
console
.
log
(
profile
)
;
return
profile
;
}
function
stopProfiler
(
)
{
Services
.
profiler
.
StopProfiler
(
)
;
info
(
"
Profiler
has
stopped
"
)
;
}
function
end
(
error
)
{
if
(
error
)
{
ok
(
false
We
got
an
error
:
{
error
}
)
;
}
else
{
ok
(
true
"
We
ran
the
whole
process
"
)
;
}
SimpleTest
.
finish
(
)
;
}
function
getBufferInfo
(
)
{
let
position
=
{
}
totalSize
=
{
}
generation
=
{
}
;
Services
.
profiler
.
GetBufferInfo
(
position
totalSize
generation
)
;
return
{
position
:
position
.
value
totalSize
:
totalSize
.
value
generation
:
generation
.
value
}
;
}
async
function
runTest
(
settings
workload
checkProfileCallback
=
function
(
profile
)
{
}
)
{
SimpleTest
.
waitForExplicitFinish
(
)
;
try
{
await
startProfiler
(
settings
)
;
const
bufferInfoAtStart
=
getBufferInfo
(
)
;
while
(
true
)
{
await
workload
(
)
;
const
bufferInfoAfterWorkload
=
getBufferInfo
(
)
;
if
(
bufferInfoAfterWorkload
.
generation
>
bufferInfoAtStart
.
generation
|
|
bufferInfoAfterWorkload
.
position
>
bufferInfoAtStart
.
position
)
{
break
;
}
}
const
profile
=
await
getProfile
(
)
;
await
checkProfileCallback
(
profile
)
;
await
stopProfiler
(
)
;
await
end
(
)
;
}
catch
(
e
)
{
await
end
(
e
)
;
}
}
window
.
runTest
=
runTest
;
}
)
(
)
;
