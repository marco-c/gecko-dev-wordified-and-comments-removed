const
{
FileUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
add_task
(
async
(
)
=
>
{
if
(
!
AppConstants
.
MOZ_GECKO_PROFILER
)
{
return
;
}
{
const
filename
=
"
profiler
-
mainthreadio
-
test
-
firstrun
"
;
const
markers
=
await
startProfilerAndGetFileIOPayloads
(
[
"
mainthreadio
"
]
filename
)
;
info
(
"
Check
the
FileIO
markers
when
using
the
mainthreadio
feature
"
)
;
checkInflatedFileIOMarkers
(
markers
filename
)
;
}
{
const
filename
=
"
profiler
-
mainthreadio
-
test
-
no
-
instrumentation
"
;
const
markers
=
await
startProfilerAndGetFileIOPayloads
(
[
]
filename
)
;
equal
(
markers
.
length
0
"
No
FileIO
markers
are
found
when
the
mainthreadio
feature
is
not
turned
on
"
+
"
in
the
profiler
.
"
)
;
}
{
const
filename
=
"
profiler
-
mainthreadio
-
test
-
secondrun
"
;
const
markers
=
await
startProfilerAndGetFileIOPayloads
(
[
"
mainthreadio
"
]
filename
)
;
info
(
"
Check
the
FileIO
markers
when
re
-
starting
the
mainthreadio
feature
"
)
;
checkInflatedFileIOMarkers
(
markers
filename
)
;
}
}
)
;
async
function
startProfilerAndGetFileIOPayloads
(
features
filename
)
{
const
entries
=
10000
;
const
interval
=
10
;
const
threads
=
[
]
;
Services
.
profiler
.
StartProfiler
(
entries
interval
features
threads
)
;
info
(
"
Get
the
file
"
)
;
const
file
=
FileUtils
.
getFile
(
"
TmpD
"
[
filename
]
)
;
if
(
file
.
exists
(
)
)
{
console
.
warn
(
"
This
test
is
triggering
FileIO
by
writing
to
a
file
.
However
the
test
found
an
"
+
"
existing
file
at
the
location
it
was
trying
to
write
to
.
This
could
happen
"
+
"
because
a
previous
run
of
the
test
failed
to
clean
up
after
itself
.
This
test
"
+
"
will
now
clean
up
that
file
before
running
the
test
again
.
"
)
;
file
.
remove
(
false
)
;
}
info
(
"
Generate
file
IO
on
the
main
thread
using
FileUtils
.
openSafeFileOutputStream
.
"
)
;
const
outputStream
=
FileUtils
.
openSafeFileOutputStream
(
file
)
;
const
data
=
"
Test
data
.
"
;
info
(
"
Write
to
the
file
"
)
;
outputStream
.
write
(
data
data
.
length
)
;
info
(
"
Close
the
file
"
)
;
FileUtils
.
closeSafeFileOutputStream
(
outputStream
)
;
info
(
"
Remove
the
file
"
)
;
file
.
remove
(
false
)
;
Services
.
profiler
.
Pause
(
)
;
const
profile
=
await
Services
.
profiler
.
getProfileDataAsync
(
)
;
Services
.
profiler
.
StopProfiler
(
)
;
const
mainThread
=
profile
.
threads
.
find
(
(
{
name
}
)
=
>
name
=
=
=
"
GeckoMain
"
)
;
return
getInflatedFileIOMarkers
(
mainThread
filename
)
;
}
