add_task
(
async
(
)
=
>
{
const
entries
=
10000
;
const
interval
=
1
;
const
threads
=
[
]
;
const
features
=
[
"
js
"
"
stackwalk
"
]
;
await
Services
.
profiler
.
StartProfiler
(
entries
interval
features
threads
)
;
const
sampleIndex
=
await
functionA
(
)
;
const
profile
=
await
ProfilerTestUtils
.
stopNowAndGetProfile
(
)
;
const
[
thread
]
=
profile
.
threads
;
const
{
samples
}
=
thread
;
const
inflatedStackFrames
=
getInflatedStackLocations
(
thread
samples
.
data
[
sampleIndex
]
)
;
const
nativeStack
=
/
^
0x
[
0
-
9a
-
f
]
+
/
;
expectStackToContain
(
inflatedStackFrames
[
"
(
root
)
"
nativeStack
nativeStack
"
js
:
:
RunScript
"
nativeStack
nativeStack
/
^
functionA
\
(
.
*
test_merged_stacks
\
.
js
:
\
d
+
:
\
d
+
\
)
/
/
^
functionB
\
(
.
*
test_merged_stacks
\
.
js
:
\
d
+
:
\
d
+
\
)
/
/
^
functionC
\
(
.
*
test_merged_stacks
\
.
js
:
\
d
+
:
\
d
+
\
)
/
nativeStack
nativeStack
]
"
The
stack
contains
a
few
frame
labels
as
well
as
the
JS
functions
that
we
called
.
"
)
;
}
)
;
async
function
functionA
(
)
{
return
functionB
(
)
;
}
async
function
functionB
(
)
{
return
functionC
(
)
;
}
async
function
functionC
(
)
{
return
ProfilerTestUtils
.
captureAtLeastOneJsSample
(
)
;
}
