ChromeUtils
.
defineESModuleGetters
(
this
{
TestUtils
:
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
}
)
;
async
function
cleanupAfterTest
(
)
{
let
profile
=
await
getFullProfilePath
(
Services
.
appinfo
.
processID
)
;
await
IOUtils
.
remove
(
profile
{
ignoreAbsent
:
true
}
)
;
await
Services
.
profiler
.
StopProfiler
(
)
;
}
add_task
(
async
(
)
=
>
{
info
(
"
Test
that
starting
the
profiler
with
a
posix
signal
works
.
"
)
;
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
should
not
begin
the
test
active
.
"
)
;
let
pid
=
Services
.
appinfo
.
processID
;
let
startPromise
=
TestUtils
.
topicObserved
(
"
profiler
-
started
"
)
;
let
result
=
raiseSignal
(
pid
SIGUSR1
)
;
Assert
.
ok
(
result
"
Raising
a
signal
should
succeed
"
)
;
Assert
.
ok
(
await
startPromise
"
The
profiler
should
start
"
)
;
Assert
.
ok
(
Services
.
profiler
.
IsActive
(
)
"
The
profiler
should
now
be
active
.
"
)
;
await
Services
.
profiler
.
waitOnePeriodicSampling
(
)
;
info
(
"
Waiting
a
periodic
sampling
completed
"
)
;
await
Services
.
profiler
.
StopProfiler
(
)
;
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
should
now
be
inactive
.
"
)
;
}
)
;
add_task
(
async
(
)
=
>
{
info
(
"
Test
that
stopping
the
profiler
with
a
posix
signal
works
.
"
)
;
registerCleanupFunction
(
cleanupAfterTest
)
;
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
should
not
begin
the
test
active
.
"
)
;
const
entries
=
100
;
const
interval
=
1
;
const
threads
=
[
]
;
const
features
=
[
]
;
await
Services
.
profiler
.
StartProfiler
(
entries
interval
threads
features
)
;
Assert
.
ok
(
Services
.
profiler
.
IsActive
(
)
"
The
profiler
should
now
be
active
.
"
)
;
let
pid
=
Services
.
appinfo
.
processID
;
let
stopPromise
=
TestUtils
.
topicObserved
(
"
profiler
-
stopped
"
)
;
let
result
=
raiseSignal
(
pid
SIGUSR2
)
;
Assert
.
ok
(
result
"
Raising
a
SIGUSR2
signal
should
succeed
.
"
)
;
Assert
.
ok
(
await
stopPromise
"
The
profiler
should
stop
"
)
;
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
should
now
be
inactive
.
"
)
;
}
)
;
add_task
(
async
(
)
=
>
{
info
(
"
Test
that
stopping
the
profiler
with
a
posix
signal
writes
a
profile
file
disk
.
"
)
;
registerCleanupFunction
(
cleanupAfterTest
)
;
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
should
not
begin
the
test
active
.
"
)
;
const
entries
=
100
;
const
interval
=
1
;
const
threads
=
[
]
;
const
features
=
[
]
;
let
pid
=
Services
.
appinfo
.
processID
;
let
profile
=
await
getFullProfilePath
(
pid
)
;
await
Services
.
profiler
.
StartProfiler
(
entries
interval
threads
features
)
;
Assert
.
ok
(
Services
.
profiler
.
IsActive
(
)
"
The
profiler
should
now
be
active
.
"
)
;
let
stopPromise
=
TestUtils
.
topicObserved
(
"
profiler
-
stopped
"
)
;
let
result
=
raiseSignal
(
pid
SIGUSR2
)
;
Assert
.
ok
(
result
"
Raising
a
SIGUSR2
signal
should
succeed
.
"
)
;
Assert
.
ok
(
await
stopPromise
"
The
profiler
should
stop
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
profile
)
"
A
profile
file
should
be
written
to
disk
.
"
)
;
Assert
.
ok
(
!
Services
.
profiler
.
IsActive
(
)
"
The
profiler
should
now
be
inactive
.
"
)
;
}
)
;
