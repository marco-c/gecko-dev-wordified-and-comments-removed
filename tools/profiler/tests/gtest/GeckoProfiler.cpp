#
include
"
gtest
/
gtest
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
ProfilerMarkerPayload
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
Initialization
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
ProfileJSONWriter
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
<
string
.
h
>
using
namespace
mozilla
;
typedef
Vector
<
const
char
*
>
StrVec
;
static
void
InactiveFeaturesAndParamsCheck
(
)
{
int
entries
;
double
interval
;
uint32_t
features
;
StrVec
filters
;
ASSERT_TRUE
(
!
profiler_is_active
(
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
GPU
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Privacy
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Restyle
)
)
;
profiler_get_start_params
(
&
entries
&
interval
&
features
&
filters
)
;
ASSERT_TRUE
(
entries
=
=
0
)
;
ASSERT_TRUE
(
interval
=
=
0
)
;
ASSERT_TRUE
(
features
=
=
0
)
;
ASSERT_TRUE
(
filters
.
empty
(
)
)
;
}
static
void
ActiveParamsCheck
(
int
aEntries
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
size_t
aFiltersLen
)
{
int
entries
;
double
interval
;
uint32_t
features
;
StrVec
filters
;
profiler_get_start_params
(
&
entries
&
interval
&
features
&
filters
)
;
ASSERT_TRUE
(
entries
=
=
aEntries
)
;
ASSERT_TRUE
(
interval
=
=
aInterval
)
;
ASSERT_TRUE
(
features
=
=
aFeatures
)
;
ASSERT_TRUE
(
filters
.
length
(
)
=
=
aFiltersLen
)
;
for
(
size_t
i
=
0
;
i
<
aFiltersLen
;
i
+
+
)
{
ASSERT_TRUE
(
strcmp
(
filters
[
i
]
aFilters
[
i
]
)
=
=
0
)
;
}
}
TEST
(
GeckoProfiler
FeaturesAndParams
)
{
InactiveFeaturesAndParamsCheck
(
)
;
{
uint32_t
features
=
ProfilerFeature
:
:
JS
|
ProfilerFeature
:
:
Threads
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
"
Compositor
"
}
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
ASSERT_TRUE
(
profiler_is_active
(
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
GPU
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Privacy
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Restyle
)
)
;
ActiveParamsCheck
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
profiler_stop
(
)
;
InactiveFeaturesAndParamsCheck
(
)
;
}
{
uint32_t
features
=
ProfilerFeature
:
:
GPU
|
ProfilerFeature
:
:
Privacy
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
"
Foo
"
"
Bar
"
}
;
profiler_start
(
999999
3
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
ASSERT_TRUE
(
profiler_is_active
(
)
)
;
ASSERT_TRUE
(
profiler_feature_active
(
ProfilerFeature
:
:
GPU
)
)
;
ASSERT_TRUE
(
profiler_feature_active
(
ProfilerFeature
:
:
Privacy
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Restyle
)
)
;
ActiveParamsCheck
(
999999
3
features
|
ProfilerFeature
:
:
Threads
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
profiler_stop
(
)
;
InactiveFeaturesAndParamsCheck
(
)
;
}
{
uint32_t
availableFeatures
=
profiler_get_available_features
(
)
;
const
char
*
filters
[
]
=
{
"
"
}
;
profiler_start
(
88888
10
availableFeatures
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
ASSERT_TRUE
(
profiler_is_active
(
)
)
;
ASSERT_TRUE
(
profiler_feature_active
(
ProfilerFeature
:
:
GPU
)
)
;
ASSERT_TRUE
(
profiler_feature_active
(
ProfilerFeature
:
:
Privacy
)
)
;
ASSERT_TRUE
(
profiler_feature_active
(
ProfilerFeature
:
:
Restyle
)
)
;
ActiveParamsCheck
(
88888
10
availableFeatures
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
}
{
uint32_t
features
=
0
;
const
char
*
filters
[
]
=
{
"
NoThreadWillMatchThis
"
}
;
profiler_start
(
0
0
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
ASSERT_TRUE
(
profiler_is_active
(
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
GPU
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Privacy
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Restyle
)
)
;
ActiveParamsCheck
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
|
ProfilerFeature
:
:
Threads
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
profiler_stop
(
)
;
InactiveFeaturesAndParamsCheck
(
)
;
profiler_stop
(
)
;
profiler_stop
(
)
;
InactiveFeaturesAndParamsCheck
(
)
;
}
}
TEST
(
GeckoProfiler
DifferentThreads
)
{
InactiveFeaturesAndParamsCheck
(
)
;
nsCOMPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewNamedThread
(
"
GeckoProfGTest
"
getter_AddRefs
(
thread
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
{
uint32_t
features
=
ProfilerFeature
:
:
JS
|
ProfilerFeature
:
:
Threads
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
"
Compositor
"
}
;
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
GeckoProfiler_DifferentThreads_Test
:
:
TestBody
"
[
&
]
(
)
{
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
}
)
NS_DISPATCH_SYNC
)
;
ASSERT_TRUE
(
profiler_is_active
(
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
GPU
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Privacy
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Restyle
)
)
;
ActiveParamsCheck
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
GeckoProfiler_DifferentThreads_Test
:
:
TestBody
"
[
&
]
(
)
{
profiler_stop
(
)
;
}
)
NS_DISPATCH_SYNC
)
;
InactiveFeaturesAndParamsCheck
(
)
;
}
{
uint32_t
features
=
ProfilerFeature
:
:
JS
|
ProfilerFeature
:
:
Threads
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
"
Compositor
"
}
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
GeckoProfiler_DifferentThreads_Test
:
:
TestBody
"
[
&
]
(
)
{
ASSERT_TRUE
(
profiler_is_active
(
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
GPU
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Privacy
)
)
;
ASSERT_TRUE
(
!
profiler_feature_active
(
ProfilerFeature
:
:
Restyle
)
)
;
ActiveParamsCheck
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
}
)
NS_DISPATCH_SYNC
)
;
profiler_stop
(
)
;
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
GeckoProfiler_DifferentThreads_Test
:
:
TestBody
"
[
&
]
(
)
{
InactiveFeaturesAndParamsCheck
(
)
;
}
)
NS_DISPATCH_SYNC
)
;
}
thread
-
>
Shutdown
(
)
;
}
TEST
(
GeckoProfiler
GetBacktrace
)
{
ASSERT_TRUE
(
!
profiler_get_backtrace
(
)
)
;
{
uint32_t
features
=
ProfilerFeature
:
:
StackWalk
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
}
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
static
const
int
N
=
100
;
{
UniqueProfilerBacktrace
u
[
N
]
;
for
(
int
i
=
0
;
i
<
N
;
i
+
+
)
{
u
[
i
]
=
profiler_get_backtrace
(
)
;
ASSERT_TRUE
(
u
[
i
]
)
;
}
}
UniqueProfilerBacktrace
u
[
N
]
;
for
(
int
i
=
0
;
i
<
N
;
i
+
+
)
{
u
[
i
]
=
profiler_get_backtrace
(
)
;
ASSERT_TRUE
(
u
[
i
]
)
;
}
profiler_stop
(
)
;
}
{
uint32_t
features
=
ProfilerFeature
:
:
Privacy
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
}
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
ASSERT_TRUE
(
!
profiler_get_backtrace
(
)
)
;
profiler_stop
(
)
;
}
ASSERT_TRUE
(
!
profiler_get_backtrace
(
)
)
;
}
TEST
(
GeckoProfiler
Pause
)
{
uint32_t
features
=
ProfilerFeature
:
:
StackWalk
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
}
;
ASSERT_TRUE
(
!
profiler_is_paused
(
)
)
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
ASSERT_TRUE
(
!
profiler_is_paused
(
)
)
;
uint32_t
currPos1
entries1
generation1
;
uint32_t
currPos2
entries2
generation2
;
profiler_get_buffer_info
(
&
currPos1
&
entries1
&
generation1
)
;
PR_Sleep
(
PR_MillisecondsToInterval
(
500
)
)
;
profiler_get_buffer_info
(
&
currPos2
&
entries2
&
generation2
)
;
ASSERT_TRUE
(
currPos1
!
=
currPos2
)
;
profiler_pause
(
)
;
ASSERT_TRUE
(
profiler_is_paused
(
)
)
;
profiler_get_buffer_info
(
&
currPos1
&
entries1
&
generation1
)
;
PR_Sleep
(
PR_MillisecondsToInterval
(
500
)
)
;
profiler_get_buffer_info
(
&
currPos2
&
entries2
&
generation2
)
;
ASSERT_TRUE
(
currPos1
=
=
currPos2
)
;
profiler_resume
(
)
;
ASSERT_TRUE
(
!
profiler_is_paused
(
)
)
;
profiler_stop
(
)
;
ASSERT_TRUE
(
!
profiler_is_paused
(
)
)
;
}
class
GTestMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
explicit
GTestMarkerPayload
(
int
aN
)
:
mN
(
aN
)
{
sNumCreated
+
+
;
}
virtual
~
GTestMarkerPayload
(
)
{
sNumDestroyed
+
+
;
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
override
{
StreamCommonProps
(
"
gtest
"
aWriter
aStartTime
aUniqueStacks
)
;
char
buf
[
64
]
;
SprintfLiteral
(
buf
"
gtest
-
%
d
"
mN
)
;
aWriter
.
IntProperty
(
buf
mN
)
;
sNumStreamed
+
+
;
}
private
:
int
mN
;
public
:
static
int
sNumCreated
;
static
int
sNumStreamed
;
static
int
sNumDestroyed
;
}
;
int
GTestMarkerPayload
:
:
sNumCreated
=
0
;
int
GTestMarkerPayload
:
:
sNumStreamed
=
0
;
int
GTestMarkerPayload
:
:
sNumDestroyed
=
0
;
TEST
(
GeckoProfiler
Markers
)
{
uint32_t
features
=
ProfilerFeature
:
:
StackWalk
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
}
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
profiler_tracing
(
"
A
"
"
B
"
TRACING_EVENT
)
;
profiler_tracing
(
"
A
"
"
C
"
TRACING_INTERVAL_START
)
;
profiler_tracing
(
"
A
"
"
C
"
TRACING_INTERVAL_END
)
;
UniqueProfilerBacktrace
bt
=
profiler_get_backtrace
(
)
;
profiler_tracing
(
"
B
"
"
A
"
Move
(
bt
)
TRACING_EVENT
)
;
{
AutoProfilerTracing
tracing
(
"
C
"
"
A
"
)
;
profiler_log
(
"
X
"
)
;
}
profiler_add_marker
(
"
M1
"
)
;
profiler_add_marker
(
"
M2
"
MakeUnique
<
TracingMarkerPayload
>
(
"
C
"
TRACING_EVENT
)
)
;
PROFILER_MARKER
(
"
M3
"
)
;
PROFILER_MARKER_PAYLOAD
(
"
M4
"
MakeUnique
<
TracingMarkerPayload
>
(
"
C
"
TRACING_EVENT
profiler_get_backtrace
(
)
)
)
;
for
(
int
i
=
0
;
i
<
10
;
i
+
+
)
{
PROFILER_MARKER_PAYLOAD
(
"
M5
"
MakeUnique
<
GTestMarkerPayload
>
(
i
)
)
;
}
PR_Sleep
(
PR_MillisecondsToInterval
(
500
)
)
;
SpliceableChunkedJSONWriter
w
;
ASSERT_TRUE
(
profiler_stream_json_for_this_process
(
w
)
)
;
UniquePtr
<
char
[
]
>
profile
=
w
.
WriteFunc
(
)
-
>
CopyData
(
)
;
ASSERT_TRUE
(
GTestMarkerPayload
:
:
sNumCreated
=
=
10
)
;
ASSERT_TRUE
(
GTestMarkerPayload
:
:
sNumStreamed
=
=
10
)
;
ASSERT_TRUE
(
GTestMarkerPayload
:
:
sNumDestroyed
=
=
0
)
;
for
(
int
i
=
0
;
i
<
10
;
i
+
+
)
{
char
buf
[
64
]
;
SprintfLiteral
(
buf
"
\
"
gtest
-
%
d
\
"
"
i
)
;
ASSERT_TRUE
(
strstr
(
profile
.
get
(
)
buf
)
)
;
}
profiler_stop
(
)
;
ASSERT_TRUE
(
GTestMarkerPayload
:
:
sNumDestroyed
=
=
10
)
;
for
(
int
i
=
0
;
i
<
10
;
i
+
+
)
{
PROFILER_MARKER_PAYLOAD
(
"
M5
"
MakeUnique
<
GTestMarkerPayload
>
(
i
)
)
;
}
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
ASSERT_TRUE
(
profiler_stream_json_for_this_process
(
w
)
)
;
profiler_stop
(
)
;
ASSERT_TRUE
(
GTestMarkerPayload
:
:
sNumCreated
=
=
20
)
;
ASSERT_TRUE
(
GTestMarkerPayload
:
:
sNumStreamed
=
=
10
)
;
ASSERT_TRUE
(
GTestMarkerPayload
:
:
sNumDestroyed
=
=
20
)
;
}
TEST
(
GeckoProfiler
Time
)
{
uint32_t
features
=
ProfilerFeature
:
:
StackWalk
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
}
;
double
t1
=
profiler_time
(
)
;
double
t2
=
profiler_time
(
)
;
ASSERT_TRUE
(
t1
<
=
t2
)
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
double
t3
=
profiler_time
(
)
;
double
t4
=
profiler_time
(
)
;
ASSERT_TRUE
(
t3
<
=
t4
)
;
profiler_stop
(
)
;
double
t5
=
profiler_time
(
)
;
double
t6
=
profiler_time
(
)
;
ASSERT_TRUE
(
t4
<
=
t5
&
&
t1
<
=
t6
)
;
}
TEST
(
GeckoProfiler
GetProfile
)
{
uint32_t
features
=
ProfilerFeature
:
:
StackWalk
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
}
;
ASSERT_TRUE
(
!
profiler_get_profile
(
)
)
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
UniquePtr
<
char
[
]
>
profile
=
profiler_get_profile
(
)
;
ASSERT_TRUE
(
profile
&
&
profile
[
0
]
=
=
'
{
'
)
;
profiler_stop
(
)
;
ASSERT_TRUE
(
!
profiler_get_profile
(
)
)
;
}
static
void
JSONOutputCheck
(
const
char
*
aOutput
)
{
ASSERT_TRUE
(
aOutput
)
;
ASSERT_TRUE
(
aOutput
[
0
]
=
=
'
{
'
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
libs
\
"
"
)
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
meta
\
"
"
)
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
version
\
"
"
)
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
startTime
\
"
"
)
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
threads
\
"
"
)
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
GeckoMain
\
"
"
)
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
samples
\
"
"
)
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
markers
\
"
"
)
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
stackTable
\
"
"
)
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
frameTable
\
"
"
)
)
;
ASSERT_TRUE
(
strstr
(
aOutput
"
\
"
stringTable
\
"
"
)
)
;
}
TEST
(
GeckoProfiler
StreamJSONForThisProcess
)
{
uint32_t
features
=
ProfilerFeature
:
:
StackWalk
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
}
;
SpliceableChunkedJSONWriter
w
;
ASSERT_TRUE
(
!
profiler_stream_json_for_this_process
(
w
)
)
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
w
.
Start
(
SpliceableJSONWriter
:
:
SingleLineStyle
)
;
ASSERT_TRUE
(
profiler_stream_json_for_this_process
(
w
)
)
;
w
.
End
(
)
;
UniquePtr
<
char
[
]
>
profile
=
w
.
WriteFunc
(
)
-
>
CopyData
(
)
;
JSONOutputCheck
(
profile
.
get
(
)
)
;
profiler_stop
(
)
;
ASSERT_TRUE
(
!
profiler_stream_json_for_this_process
(
w
)
)
;
}
TEST
(
GeckoProfiler
StreamJSONForThisProcessThreaded
)
{
nsCOMPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewNamedThread
(
"
GeckoProfGTest
"
getter_AddRefs
(
thread
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
uint32_t
features
=
ProfilerFeature
:
:
StackWalk
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
}
;
SpliceableChunkedJSONWriter
w
;
ASSERT_TRUE
(
!
profiler_stream_json_for_this_process
(
w
)
)
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
GeckoProfiler_StreamJSONForThisProcessThreaded_Test
:
:
TestBody
"
[
&
]
(
)
{
w
.
Start
(
SpliceableJSONWriter
:
:
SingleLineStyle
)
;
ASSERT_TRUE
(
profiler_stream_json_for_this_process
(
w
)
)
;
w
.
End
(
)
;
}
)
NS_DISPATCH_SYNC
)
;
UniquePtr
<
char
[
]
>
profile
=
w
.
WriteFunc
(
)
-
>
CopyData
(
)
;
JSONOutputCheck
(
profile
.
get
(
)
)
;
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
GeckoProfiler_StreamJSONForThisProcessThreaded_Test
:
:
TestBody
"
[
&
]
(
)
{
profiler_stop
(
)
;
ASSERT_TRUE
(
!
profiler_stream_json_for_this_process
(
w
)
)
;
}
)
NS_DISPATCH_SYNC
)
;
thread
-
>
Shutdown
(
)
;
ASSERT_TRUE
(
!
profiler_stream_json_for_this_process
(
w
)
)
;
}
TEST
(
GeckoProfiler
PseudoStack
)
{
uint32_t
features
=
ProfilerFeature
:
:
StackWalk
;
const
char
*
filters
[
]
=
{
"
GeckoMain
"
}
;
PROFILER_LABEL
(
"
A
"
"
B
"
js
:
:
ProfileEntry
:
:
Category
:
:
OTHER
)
;
PROFILER_LABEL_FUNC
(
js
:
:
ProfileEntry
:
:
Category
:
:
OTHER
)
;
UniqueFreePtr
<
char
>
dynamic
(
strdup
(
"
dynamic
"
)
)
;
{
PROFILER_LABEL_DYNAMIC
(
"
A
"
"
C
"
js
:
:
ProfileEntry
:
:
Category
:
:
JS
dynamic
.
get
(
)
)
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
filters
MOZ_ARRAY_LENGTH
(
filters
)
)
;
ASSERT_TRUE
(
profiler_get_backtrace
(
)
)
;
}
#
if
defined
(
MOZ_GECKO_PROFILER
)
AutoProfilerLabel
label1
(
"
A
"
nullptr
888
js
:
:
ProfileEntry
:
:
Category
:
:
STORAGE
)
;
AutoProfilerLabel
label2
(
"
A
"
dynamic
.
get
(
)
888
js
:
:
ProfileEntry
:
:
Category
:
:
NETWORK
)
;
ASSERT_TRUE
(
profiler_get_backtrace
(
)
)
;
#
endif
profiler_stop
(
)
;
ASSERT_TRUE
(
!
profiler_get_profile
(
)
)
;
}
TEST
(
GeckoProfiler
Bug1355807
)
{
uint32_t
features
=
ProfilerFeature
:
:
JS
;
const
char
*
manyThreadsFilter
[
]
=
{
"
"
}
;
const
char
*
fewThreadsFilter
[
]
=
{
"
GeckoMain
"
}
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
manyThreadsFilter
MOZ_ARRAY_LENGTH
(
manyThreadsFilter
)
)
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
fewThreadsFilter
MOZ_ARRAY_LENGTH
(
fewThreadsFilter
)
)
;
profiler_start
(
PROFILER_DEFAULT_ENTRIES
PROFILER_DEFAULT_INTERVAL
features
fewThreadsFilter
MOZ_ARRAY_LENGTH
(
fewThreadsFilter
)
)
;
profiler_stop
(
)
;
}
