function
run_test
(
)
{
let
p
=
Cc
[
"
mozilla
.
org
/
tools
/
profiler
;
1
"
]
;
if
(
!
p
)
return
;
p
=
p
.
getService
(
Ci
.
nsIProfiler
)
;
if
(
!
p
)
return
;
Assert
.
ok
(
!
p
.
IsActive
(
)
)
;
const
ms
=
5
;
p
.
StartProfiler
(
100
ms
[
"
js
"
]
1
)
;
function
arbitrary_name
(
)
{
var
delayMS
=
5
;
while
(
1
)
{
info
(
"
loop
:
ms
=
"
+
delayMS
)
;
let
then
=
Date
.
now
(
)
;
do
{
let
n
=
10000
;
while
(
-
-
n
)
;
}
while
(
Date
.
now
(
)
-
then
<
delayMS
)
;
let
pr
=
p
.
getProfileData
(
)
.
threads
[
0
]
;
if
(
pr
.
samples
.
data
.
length
>
0
|
|
delayMS
>
30000
)
return
pr
;
delayMS
*
=
2
;
}
}
var
profile
=
arbitrary_name
(
)
;
Assert
.
notEqual
(
profile
.
samples
.
data
.
length
0
)
;
var
lastSample
=
profile
.
samples
.
data
[
profile
.
samples
.
data
.
length
-
1
]
;
var
stack
=
getInflatedStackLocations
(
profile
lastSample
)
;
info
(
stack
)
;
var
gotName
=
false
;
for
(
var
i
=
0
;
i
<
stack
.
length
;
i
+
+
)
{
if
(
stack
[
i
]
.
match
(
/
arbitrary_name
/
)
)
{
Assert
.
equal
(
gotName
false
)
;
gotName
=
true
;
}
}
Assert
.
equal
(
gotName
true
)
;
p
.
StopProfiler
(
)
;
}
