#
include
"
ProfilerParent
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsProfiler
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
class
ProfilerParentTracker
final
{
public
:
static
void
StartTracking
(
ProfilerParent
*
aParent
)
;
static
void
StopTracking
(
ProfilerParent
*
aParent
)
;
template
<
typename
FuncType
>
static
void
Enumerate
(
FuncType
aIterFunc
)
;
ProfilerParentTracker
(
)
;
~
ProfilerParentTracker
(
)
;
private
:
nsTArray
<
ProfilerParent
*
>
mProfilerParents
;
static
UniquePtr
<
ProfilerParentTracker
>
sInstance
;
}
;
UniquePtr
<
ProfilerParentTracker
>
ProfilerParentTracker
:
:
sInstance
;
void
ProfilerParentTracker
:
:
StartTracking
(
ProfilerParent
*
aProfilerParent
)
{
if
(
!
sInstance
)
{
sInstance
=
MakeUnique
<
ProfilerParentTracker
>
(
)
;
ClearOnShutdown
(
&
sInstance
)
;
}
sInstance
-
>
mProfilerParents
.
AppendElement
(
aProfilerParent
)
;
}
void
ProfilerParentTracker
:
:
StopTracking
(
ProfilerParent
*
aParent
)
{
if
(
sInstance
)
{
sInstance
-
>
mProfilerParents
.
RemoveElement
(
aParent
)
;
}
}
template
<
typename
FuncType
>
void
ProfilerParentTracker
:
:
Enumerate
(
FuncType
aIterFunc
)
{
if
(
sInstance
)
{
for
(
ProfilerParent
*
profilerParent
:
sInstance
-
>
mProfilerParents
)
{
if
(
!
profilerParent
-
>
mDestroyed
)
{
aIterFunc
(
profilerParent
)
;
}
}
}
}
ProfilerParentTracker
:
:
ProfilerParentTracker
(
)
{
MOZ_COUNT_CTOR
(
ProfilerParentTracker
)
;
}
ProfilerParentTracker
:
:
~
ProfilerParentTracker
(
)
{
MOZ_COUNT_DTOR
(
ProfilerParentTracker
)
;
nsTArray
<
ProfilerParent
*
>
parents
;
parents
=
mProfilerParents
;
for
(
ProfilerParent
*
profilerParent
:
parents
)
{
if
(
!
profilerParent
-
>
mDestroyed
)
{
RefPtr
<
ProfilerParent
>
actor
=
profilerParent
;
actor
-
>
Close
(
)
;
}
}
}
Endpoint
<
PProfilerChild
>
ProfilerParent
:
:
CreateForProcess
(
base
:
:
ProcessId
aOtherPid
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
Endpoint
<
PProfilerParent
>
parent
;
Endpoint
<
PProfilerChild
>
child
;
nsresult
rv
=
PProfiler
:
:
CreateEndpoints
(
base
:
:
GetCurrentProcId
(
)
aOtherPid
&
parent
&
child
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
Failed
to
create
top
level
actor
for
PProfiler
!
"
)
;
}
RefPtr
<
ProfilerParent
>
actor
=
new
ProfilerParent
(
)
;
if
(
!
parent
.
Bind
(
actor
)
)
{
MOZ_CRASH
(
"
Failed
to
bind
parent
actor
for
PProfiler
!
"
)
;
}
actor
-
>
mSelfRef
=
actor
;
actor
-
>
Init
(
)
;
return
child
;
}
ProfilerParent
:
:
ProfilerParent
(
)
:
mDestroyed
(
false
)
{
MOZ_COUNT_CTOR
(
ProfilerParent
)
;
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
ProfilerParent
:
:
Init
(
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
ProfilerParentTracker
:
:
StartTracking
(
this
)
;
}
ProfilerParent
:
:
~
ProfilerParent
(
)
{
MOZ_COUNT_DTOR
(
ProfilerParent
)
;
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
ProfilerParentTracker
:
:
StopTracking
(
this
)
;
}
nsTArray
<
RefPtr
<
ProfilerParent
:
:
SingleProcessProfilePromise
>
>
ProfilerParent
:
:
GatherProfiles
(
)
{
if
(
!
NS_IsMainThread
(
)
)
{
return
nsTArray
<
RefPtr
<
ProfilerParent
:
:
SingleProcessProfilePromise
>
>
(
)
;
}
nsTArray
<
RefPtr
<
SingleProcessProfilePromise
>
>
results
;
ProfilerParentTracker
:
:
Enumerate
(
[
&
]
(
ProfilerParent
*
profilerParent
)
{
results
.
AppendElement
(
profilerParent
-
>
SendGatherProfile
(
)
)
;
}
)
;
return
results
;
}
void
ProfilerParent
:
:
ProfilerStarted
(
nsIProfilerStartParams
*
aParams
)
{
if
(
!
NS_IsMainThread
(
)
)
{
return
;
}
ProfilerInitParams
ipcParams
;
ipcParams
.
enabled
(
)
=
true
;
aParams
-
>
GetEntries
(
&
ipcParams
.
entries
(
)
)
;
aParams
-
>
GetInterval
(
&
ipcParams
.
interval
(
)
)
;
aParams
-
>
GetFeatures
(
&
ipcParams
.
features
(
)
)
;
ipcParams
.
filters
(
)
=
aParams
-
>
GetFilters
(
)
;
ProfilerParentTracker
:
:
Enumerate
(
[
&
]
(
ProfilerParent
*
profilerParent
)
{
Unused
<
<
profilerParent
-
>
SendStart
(
ipcParams
)
;
}
)
;
}
void
ProfilerParent
:
:
ProfilerStopped
(
)
{
if
(
!
NS_IsMainThread
(
)
)
{
return
;
}
ProfilerParentTracker
:
:
Enumerate
(
[
]
(
ProfilerParent
*
profilerParent
)
{
Unused
<
<
profilerParent
-
>
SendStop
(
)
;
}
)
;
}
void
ProfilerParent
:
:
ProfilerPaused
(
)
{
if
(
!
NS_IsMainThread
(
)
)
{
return
;
}
ProfilerParentTracker
:
:
Enumerate
(
[
]
(
ProfilerParent
*
profilerParent
)
{
Unused
<
<
profilerParent
-
>
SendPause
(
)
;
}
)
;
}
void
ProfilerParent
:
:
ProfilerResumed
(
)
{
if
(
!
NS_IsMainThread
(
)
)
{
return
;
}
ProfilerParentTracker
:
:
Enumerate
(
[
]
(
ProfilerParent
*
profilerParent
)
{
Unused
<
<
profilerParent
-
>
SendResume
(
)
;
}
)
;
}
void
ProfilerParent
:
:
ActorDestroy
(
ActorDestroyReason
aActorDestroyReason
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
mDestroyed
=
true
;
}
void
ProfilerParent
:
:
DeallocPProfilerParent
(
)
{
mSelfRef
=
nullptr
;
}
}
