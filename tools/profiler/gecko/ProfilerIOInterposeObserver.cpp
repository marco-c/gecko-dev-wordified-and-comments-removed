#
include
"
ProfilerIOInterposeObserver
.
h
"
#
include
"
GeckoProfiler
.
h
"
using
namespace
mozilla
;
ProfilerIOInterposeObserver
&
ProfilerIOInterposeObserver
:
:
GetInstance
(
)
{
static
ProfilerIOInterposeObserver
sProfilerIOInterposeObserver
;
return
sProfilerIOInterposeObserver
;
}
namespace
geckoprofiler
:
:
markers
{
struct
FileIOMarker
{
static
constexpr
Span
<
const
char
>
MarkerTypeName
(
)
{
return
MakeStringSpan
(
"
FileIO
"
)
;
}
static
void
StreamJSONMarkerData
(
baseprofiler
:
:
SpliceableJSONWriter
&
aWriter
const
ProfilerString8View
&
aOperation
const
ProfilerString8View
&
aSource
const
ProfilerString8View
&
aFilename
MarkerThreadId
aOperationThreadId
)
{
aWriter
.
StringProperty
(
"
operation
"
aOperation
)
;
aWriter
.
StringProperty
(
"
source
"
aSource
)
;
if
(
aFilename
.
Length
(
)
!
=
0
)
{
aWriter
.
StringProperty
(
"
filename
"
aFilename
)
;
}
if
(
!
aOperationThreadId
.
IsUnspecified
(
)
)
{
aWriter
.
IntProperty
(
"
threadId
"
static_cast
<
int64_t
>
(
aOperationThreadId
.
ThreadId
(
)
.
ToNumber
(
)
)
)
;
}
}
static
MarkerSchema
MarkerTypeDisplay
(
)
{
using
MS
=
MarkerSchema
;
MS
schema
{
MS
:
:
Location
:
:
MarkerChart
MS
:
:
Location
:
:
MarkerTable
MS
:
:
Location
:
:
TimelineFileIO
}
;
schema
.
AddKeyLabelFormatSearchable
(
"
operation
"
"
Operation
"
MS
:
:
Format
:
:
String
MS
:
:
Searchable
:
:
Searchable
)
;
schema
.
AddKeyLabelFormatSearchable
(
"
source
"
"
Source
"
MS
:
:
Format
:
:
String
MS
:
:
Searchable
:
:
Searchable
)
;
schema
.
AddKeyLabelFormatSearchable
(
"
filename
"
"
Filename
"
MS
:
:
Format
:
:
FilePath
MS
:
:
Searchable
:
:
Searchable
)
;
schema
.
AddKeyLabelFormatSearchable
(
"
threadId
"
"
Thread
ID
"
MS
:
:
Format
:
:
String
MS
:
:
Searchable
:
:
Searchable
)
;
return
schema
;
}
}
;
}
static
auto
GetFilename
(
IOInterposeObserver
:
:
Observation
&
aObservation
)
{
AUTO_PROFILER_STATS
(
IO_filename
)
;
constexpr
size_t
scExpectedMaxFilename
=
512
;
nsAutoStringN
<
scExpectedMaxFilename
>
filename16
;
aObservation
.
Filename
(
filename16
)
;
nsAutoCStringN
<
scExpectedMaxFilename
>
filename8
;
if
(
!
filename16
.
IsEmpty
(
)
)
{
CopyUTF16toUTF8
(
filename16
filename8
)
;
}
return
filename8
;
}
void
ProfilerIOInterposeObserver
:
:
Observe
(
Observation
&
aObservation
)
{
if
(
profiler_is_locked_on_current_thread
(
)
)
{
AUTO_PROFILER_STATS
(
IO_profiler_locked
)
;
return
;
}
Maybe
<
uint32_t
>
maybeFeatures
=
profiler_features_if_active_and_unpaused
(
)
;
if
(
maybeFeatures
.
isNothing
(
)
)
{
return
;
}
uint32_t
features
=
*
maybeFeatures
;
if
(
!
profiler_thread_is_being_profiled_for_markers
(
profiler_main_thread_id
(
)
)
&
&
!
profiler_thread_is_being_profiled_for_markers
(
)
)
{
return
;
}
AUTO_PROFILER_LABEL
(
"
ProfilerIOInterposeObserver
"
PROFILER
)
;
if
(
IsMainThread
(
)
)
{
if
(
!
profiler_thread_is_being_profiled_for_markers
(
)
|
|
!
(
features
&
ProfilerFeature
:
:
MainThreadIO
)
)
{
return
;
}
AUTO_PROFILER_STATS
(
IO_MT
)
;
nsAutoCString
type
{
aObservation
.
FileType
(
)
}
;
type
.
AppendLiteral
(
"
IO
"
)
;
PROFILER_MARKER
(
type
OTHER
MarkerOptions
(
MarkerTiming
:
:
Interval
(
aObservation
.
Start
(
)
aObservation
.
End
(
)
)
MarkerStack
:
:
Capture
(
)
)
FileIOMarker
ProfilerString8View
:
:
WrapNullTerminatedString
(
aObservation
.
ObservedOperationString
(
)
)
ProfilerString8View
:
:
WrapNullTerminatedString
(
aObservation
.
Reference
(
)
)
GetFilename
(
aObservation
)
MarkerThreadId
{
}
)
;
}
else
if
(
profiler_thread_is_being_profiled_for_markers
(
)
)
{
if
(
!
(
features
&
ProfilerFeature
:
:
FileIO
)
)
{
return
;
}
AUTO_PROFILER_STATS
(
IO_off_MT
)
;
nsAutoCString
type
{
aObservation
.
FileType
(
)
}
;
type
.
AppendLiteral
(
"
IO
"
)
;
UniquePtr
<
ProfileChunkedBuffer
>
backtrace
=
profiler_capture_backtrace
(
)
;
PROFILER_MARKER
(
type
OTHER
MarkerOptions
(
MarkerTiming
:
:
Interval
(
aObservation
.
Start
(
)
aObservation
.
End
(
)
)
backtrace
?
MarkerStack
:
:
UseBacktrace
(
*
backtrace
)
:
MarkerStack
:
:
NoStack
(
)
)
FileIOMarker
ProfilerString8View
:
:
WrapNullTerminatedString
(
aObservation
.
ObservedOperationString
(
)
)
ProfilerString8View
:
:
WrapNullTerminatedString
(
aObservation
.
Reference
(
)
)
GetFilename
(
aObservation
)
MarkerThreadId
{
}
)
;
type
.
AppendLiteral
(
"
(
non
-
main
thread
)
"
)
;
PROFILER_MARKER
(
type
OTHER
MarkerOptions
(
MarkerTiming
:
:
Interval
(
aObservation
.
Start
(
)
aObservation
.
End
(
)
)
backtrace
?
MarkerStack
:
:
UseBacktrace
(
*
backtrace
)
:
MarkerStack
:
:
NoStack
(
)
MarkerThreadId
:
:
MainThread
(
)
)
FileIOMarker
ProfilerString8View
:
:
WrapNullTerminatedString
(
aObservation
.
ObservedOperationString
(
)
)
ProfilerString8View
:
:
WrapNullTerminatedString
(
aObservation
.
Reference
(
)
)
GetFilename
(
aObservation
)
MarkerThreadId
:
:
CurrentThread
(
)
)
;
}
else
{
if
(
!
(
features
&
ProfilerFeature
:
:
FileIOAll
)
)
{
return
;
}
AUTO_PROFILER_STATS
(
IO_other
)
;
nsAutoCString
type
{
aObservation
.
FileType
(
)
}
;
if
(
profiler_is_active_and_thread_is_registered
(
)
)
{
type
.
AppendLiteral
(
"
IO
(
non
-
profiled
thread
)
"
)
;
}
else
{
type
.
AppendLiteral
(
"
IO
(
unregistered
thread
)
"
)
;
}
PROFILER_MARKER
(
type
OTHER
MarkerOptions
(
MarkerTiming
:
:
Interval
(
aObservation
.
Start
(
)
aObservation
.
End
(
)
)
MarkerStack
:
:
Capture
(
)
MarkerThreadId
:
:
MainThread
(
)
)
FileIOMarker
ProfilerString8View
:
:
WrapNullTerminatedString
(
aObservation
.
ObservedOperationString
(
)
)
ProfilerString8View
:
:
WrapNullTerminatedString
(
aObservation
.
Reference
(
)
)
GetFilename
(
aObservation
)
MarkerThreadId
:
:
CurrentThread
(
)
)
;
}
}
