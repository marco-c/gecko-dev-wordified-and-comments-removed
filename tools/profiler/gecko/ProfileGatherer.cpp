#
include
"
mozilla
/
ProfileGatherer
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
GeckoSampler
.
h
"
using
mozilla
:
:
dom
:
:
AutoJSAPI
;
using
mozilla
:
:
dom
:
:
Promise
;
namespace
mozilla
{
static
const
uint32_t
MAX_SUBPROCESS_EXIT_PROFILES
=
5
;
NS_IMPL_ISUPPORTS
(
ProfileGatherer
nsIObserver
)
ProfileGatherer
:
:
ProfileGatherer
(
GeckoSampler
*
aTicker
)
:
mTicker
(
aTicker
)
mSinceTime
(
0
)
mPendingProfiles
(
0
)
mGathering
(
false
)
{
}
void
ProfileGatherer
:
:
GatheredOOPProfile
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mGathering
)
{
return
;
}
if
(
NS_WARN_IF
(
!
mPromise
)
)
{
return
;
}
mPendingProfiles
-
-
;
if
(
mPendingProfiles
=
=
0
)
{
Finish
(
)
;
}
}
void
ProfileGatherer
:
:
WillGatherOOPProfile
(
)
{
mPendingProfiles
+
+
;
}
void
ProfileGatherer
:
:
Start
(
double
aSinceTime
Promise
*
aPromise
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mGathering
)
{
if
(
aPromise
)
{
aPromise
-
>
MaybeReject
(
NS_ERROR_NOT_AVAILABLE
)
;
}
return
;
}
mSinceTime
=
aSinceTime
;
mPromise
=
aPromise
;
mGathering
=
true
;
mPendingProfiles
=
0
;
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
nsresult
rv
=
os
-
>
AddObserver
(
this
"
profiler
-
subprocess
"
false
)
;
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
rv
=
os
-
>
NotifyObservers
(
this
"
profiler
-
subprocess
-
gather
"
nullptr
)
;
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
}
if
(
!
mPendingProfiles
)
{
Finish
(
)
;
}
}
void
ProfileGatherer
:
:
Finish
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mTicker
)
{
return
;
}
UniquePtr
<
char
[
]
>
buf
=
mTicker
-
>
ToJSON
(
mSinceTime
)
;
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
nsresult
rv
=
os
-
>
RemoveObserver
(
this
"
profiler
-
subprocess
"
)
;
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
}
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
mPromise
-
>
GlobalJSObject
(
)
)
)
)
{
Reset
(
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
RootedValue
val
(
cx
)
;
{
NS_ConvertUTF8toUTF16
js_string
(
nsDependentCString
(
buf
.
get
(
)
)
)
;
if
(
!
JS_ParseJSON
(
cx
static_cast
<
const
char16_t
*
>
(
js_string
.
get
(
)
)
js_string
.
Length
(
)
&
val
)
)
{
if
(
!
jsapi
.
HasException
(
)
)
{
mPromise
-
>
MaybeReject
(
NS_ERROR_DOM_UNKNOWN_ERR
)
;
}
else
{
JS
:
:
RootedValue
exn
(
cx
)
;
DebugOnly
<
bool
>
gotException
=
jsapi
.
StealException
(
&
exn
)
;
MOZ_ASSERT
(
gotException
)
;
jsapi
.
ClearException
(
)
;
mPromise
-
>
MaybeReject
(
cx
exn
)
;
}
}
else
{
mPromise
-
>
MaybeResolve
(
val
)
;
}
}
Reset
(
)
;
}
void
ProfileGatherer
:
:
Reset
(
)
{
mSinceTime
=
0
;
mPromise
=
nullptr
;
mPendingProfiles
=
0
;
mGathering
=
false
;
}
void
ProfileGatherer
:
:
Cancel
(
)
{
if
(
mPromise
)
{
mPromise
-
>
MaybeReject
(
NS_ERROR_DOM_ABORT_ERR
)
;
}
mTicker
=
nullptr
;
}
void
ProfileGatherer
:
:
OOPExitProfile
(
const
nsCString
&
aProfile
)
{
if
(
mExitProfiles
.
Length
(
)
>
=
MAX_SUBPROCESS_EXIT_PROFILES
)
{
mExitProfiles
.
RemoveElementAt
(
0
)
;
}
mExitProfiles
.
AppendElement
(
aProfile
)
;
if
(
mGathering
)
{
GatheredOOPProfile
(
)
;
}
}
NS_IMETHODIMP
ProfileGatherer
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
someData
)
{
if
(
!
strcmp
(
aTopic
"
profiler
-
subprocess
"
)
)
{
nsCOMPtr
<
nsIProfileSaveEvent
>
pse
=
do_QueryInterface
(
aSubject
)
;
if
(
pse
)
{
for
(
size_t
i
=
0
;
i
<
mExitProfiles
.
Length
(
)
;
+
+
i
)
{
if
(
!
mExitProfiles
[
i
]
.
IsEmpty
(
)
)
{
pse
-
>
AddSubProfile
(
mExitProfiles
[
i
]
.
get
(
)
)
;
}
}
mExitProfiles
.
Clear
(
)
;
}
}
return
NS_OK
;
}
}
