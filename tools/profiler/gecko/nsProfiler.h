#
ifndef
nsProfiler_h
#
define
nsProfiler_h
#
include
"
ErrorList
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
ProfileJSONWriter
.
h
"
#
include
"
mozilla
/
ProportionValue
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
ipc
/
IPCCore
.
h
"
#
include
"
nsIProfiler
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
ProfilerCodeAddressService
.
h
"
#
include
"
ProfileAdditionalInformation
.
h
"
namespace
Json
{
class
Value
;
}
class
nsProfiler
final
:
public
nsIProfiler
{
public
:
nsProfiler
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIPROFILER
nsresult
Init
(
)
;
static
nsProfiler
*
GetOrCreate
(
)
{
nsCOMPtr
<
nsIProfiler
>
iprofiler
=
do_GetService
(
"
mozilla
.
org
/
tools
/
profiler
;
1
"
)
;
return
static_cast
<
nsProfiler
*
>
(
iprofiler
.
get
(
)
)
;
}
private
:
~
nsProfiler
(
)
;
using
GatheringPromiseAndroid
=
mozilla
:
:
MozPromise
<
FallibleTArray
<
uint8_t
>
nsresult
true
>
;
using
GatheringPromiseFileDump
=
mozilla
:
:
MozPromise
<
mozilla
:
:
void_t
nsresult
true
>
;
using
GatheringPromise
=
mozilla
:
:
MozPromise
<
mozilla
:
:
ProfileAndAdditionalInformation
nsresult
false
>
;
using
SymbolTablePromise
=
mozilla
:
:
MozPromise
<
mozilla
:
:
SymbolTable
nsresult
true
>
;
RefPtr
<
GatheringPromise
>
StartGathering
(
double
aSinceTime
)
;
void
GatheredOOPProfile
(
base
:
:
ProcessId
aChildPid
const
nsACString
&
aProfile
mozilla
:
:
Maybe
<
mozilla
:
:
ProfileGenerationAdditionalInformation
>
&
&
aAdditionalInformation
)
;
void
FinishGathering
(
)
;
void
ResetGathering
(
nsresult
aPromiseRejectionIfPending
)
;
static
void
GatheringTimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
;
void
RestartGatheringTimer
(
)
;
RefPtr
<
SymbolTablePromise
>
GetSymbolTableMozPromise
(
const
nsACString
&
aDebugPath
const
nsACString
&
aBreakpadID
)
;
struct
ExitProfile
{
nsCString
mJSON
;
uint64_t
mBufferPositionAtGatherTime
;
}
;
struct
PendingProfile
{
base
:
:
ProcessId
childPid
;
mozilla
:
:
ProportionValue
progressProportion
;
nsCString
progressLocation
;
mozilla
:
:
TimeStamp
lastProgressRequest
;
mozilla
:
:
TimeStamp
lastProgressResponse
;
mozilla
:
:
TimeStamp
lastProgressChange
;
explicit
PendingProfile
(
base
:
:
ProcessId
aChildPid
)
:
childPid
(
aChildPid
)
{
}
}
;
PendingProfile
*
GetPendingProfile
(
base
:
:
ProcessId
aChildPid
)
;
bool
SendProgressRequest
(
PendingProfile
&
aPendingProfile
)
;
template
<
typename
JsonLogObjectUpdater
>
void
Log
(
JsonLogObjectUpdater
&
&
aJsonLogObjectUpdater
)
;
template
<
typename
JsonArrayAppender
>
void
LogEvent
(
JsonArrayAppender
&
&
aJsonArrayAppender
)
;
void
LogEventLiteralString
(
const
char
*
aEventString
)
;
mozilla
:
:
Vector
<
ExitProfile
>
mExitProfiles
;
mozilla
:
:
Maybe
<
mozilla
:
:
MozPromiseHolder
<
GatheringPromise
>
>
mPromiseHolder
;
nsCOMPtr
<
nsIThread
>
mSymbolTableThread
;
mozilla
:
:
Maybe
<
mozilla
:
:
FailureLatchSource
>
mFailureLatchSource
;
mozilla
:
:
Maybe
<
SpliceableChunkedJSONWriter
>
mWriter
;
mozilla
:
:
Maybe
<
mozilla
:
:
ProfileGenerationAdditionalInformation
>
mProfileGenerationAdditionalInformation
;
mozilla
:
:
Vector
<
PendingProfile
>
mPendingProfiles
;
bool
mGathering
;
nsCOMPtr
<
nsITimer
>
mGatheringTimer
;
mozilla
:
:
UniquePtr
<
Json
:
:
Value
>
mGatheringLog
;
}
;
#
endif
