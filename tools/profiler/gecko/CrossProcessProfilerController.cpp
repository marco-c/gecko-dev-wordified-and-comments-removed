#
include
"
CrossProcessProfilerController
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
ProfilerTypes
.
h
"
#
include
"
nsIProfiler
.
h
"
#
include
"
nsIProfileSaveEvent
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsProfiler
.
h
"
#
include
"
ProfilerControllingProcess
.
h
"
namespace
mozilla
{
static
const
char
*
sObserverTopics
[
]
=
{
"
profiler
-
started
"
"
profiler
-
stopped
"
"
profiler
-
paused
"
"
profiler
-
resumed
"
"
profiler
-
subprocess
-
gather
"
"
profiler
-
subprocess
"
}
;
class
ProfilerObserver
final
:
public
nsIObserver
{
public
:
explicit
ProfilerObserver
(
CrossProcessProfilerController
&
aController
)
:
mController
(
aController
)
{
}
NS_DECL_ISUPPORTS
NS_IMETHOD
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
override
{
mController
.
Observe
(
aSubject
aTopic
)
;
return
NS_OK
;
}
private
:
~
ProfilerObserver
(
)
{
}
CrossProcessProfilerController
&
mController
;
}
;
NS_IMPL_ISUPPORTS
(
ProfilerObserver
nsIObserver
)
CrossProcessProfilerController
:
:
CrossProcessProfilerController
(
ProfilerControllingProcess
*
aProcess
)
:
mProcess
(
aProcess
)
mObserver
(
new
ProfilerObserver
(
*
this
)
)
{
if
(
profiler_is_active
(
)
)
{
nsCOMPtr
<
nsIProfilerStartParams
>
currentProfilerParams
;
nsCOMPtr
<
nsIProfiler
>
profiler
(
do_GetService
(
"
mozilla
.
org
/
tools
/
profiler
;
1
"
)
)
;
DebugOnly
<
nsresult
>
rv
=
profiler
-
>
GetStartParams
(
getter_AddRefs
(
currentProfilerParams
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
StartProfiler
(
currentProfilerParams
)
;
}
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
size_t
length
=
ArrayLength
(
sObserverTopics
)
;
for
(
size_t
i
=
0
;
i
<
length
;
+
+
i
)
{
obs
-
>
AddObserver
(
mObserver
sObserverTopics
[
i
]
false
)
;
}
}
}
CrossProcessProfilerController
:
:
~
CrossProcessProfilerController
(
)
{
if
(
!
mProfile
.
IsEmpty
(
)
)
{
nsProfiler
:
:
GetOrCreate
(
)
-
>
OOPExitProfile
(
mProfile
)
;
}
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
size_t
length
=
ArrayLength
(
sObserverTopics
)
;
for
(
size_t
i
=
0
;
i
<
length
;
+
+
i
)
{
obs
-
>
RemoveObserver
(
mObserver
sObserverTopics
[
i
]
)
;
}
}
}
void
CrossProcessProfilerController
:
:
StartProfiler
(
nsIProfilerStartParams
*
aParams
)
{
if
(
NS_WARN_IF
(
!
aParams
)
)
{
return
;
}
ProfilerInitParams
ipcParams
;
ipcParams
.
enabled
(
)
=
true
;
aParams
-
>
GetEntries
(
&
ipcParams
.
entries
(
)
)
;
aParams
-
>
GetInterval
(
&
ipcParams
.
interval
(
)
)
;
ipcParams
.
features
(
)
=
aParams
-
>
GetFeatures
(
)
;
ipcParams
.
threadFilters
(
)
=
aParams
-
>
GetThreadFilterNames
(
)
;
mProcess
-
>
SendStartProfiler
(
ipcParams
)
;
}
void
CrossProcessProfilerController
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
)
{
if
(
!
strcmp
(
aTopic
"
profiler
-
subprocess
-
gather
"
)
)
{
nsProfiler
:
:
GetOrCreate
(
)
-
>
WillGatherOOPProfile
(
)
;
mProcess
-
>
SendGatherProfile
(
)
;
}
else
if
(
!
strcmp
(
aTopic
"
profiler
-
subprocess
"
)
)
{
nsCOMPtr
<
nsIProfileSaveEvent
>
pse
=
do_QueryInterface
(
aSubject
)
;
if
(
pse
)
{
if
(
!
mProfile
.
IsEmpty
(
)
)
{
pse
-
>
AddSubProfile
(
mProfile
.
get
(
)
)
;
mProfile
.
Truncate
(
)
;
}
}
}
else
if
(
!
strcmp
(
aTopic
"
profiler
-
started
"
)
)
{
nsCOMPtr
<
nsIProfilerStartParams
>
params
(
do_QueryInterface
(
aSubject
)
)
;
StartProfiler
(
params
)
;
}
else
if
(
!
strcmp
(
aTopic
"
profiler
-
stopped
"
)
)
{
mProcess
-
>
SendStopProfiler
(
)
;
}
else
if
(
!
strcmp
(
aTopic
"
profiler
-
paused
"
)
)
{
mProcess
-
>
SendPauseProfiler
(
true
)
;
}
else
if
(
!
strcmp
(
aTopic
"
profiler
-
resumed
"
)
)
{
mProcess
-
>
SendPauseProfiler
(
false
)
;
}
}
void
CrossProcessProfilerController
:
:
RecvProfile
(
const
nsCString
&
aProfile
bool
aIsExitProfile
)
{
mProfile
=
aProfile
;
nsProfiler
:
:
GetOrCreate
(
)
-
>
GatheredOOPProfile
(
)
;
}
}
