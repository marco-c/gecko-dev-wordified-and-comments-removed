#
include
"
ChildProfilerController
.
h
"
#
include
"
ProfilerChild
.
h
"
#
include
"
mozilla
/
ProfilerState
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
already_AddRefed
<
ChildProfilerController
>
ChildProfilerController
:
:
Create
(
mozilla
:
:
ipc
:
:
Endpoint
<
PProfilerChild
>
&
&
aEndpoint
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
ChildProfilerController
>
cpc
=
new
ChildProfilerController
(
)
;
cpc
-
>
Init
(
std
:
:
move
(
aEndpoint
)
)
;
return
cpc
.
forget
(
)
;
}
ChildProfilerController
:
:
ChildProfilerController
(
)
:
mThread
(
nullptr
"
ChildProfilerController
:
:
mThread
"
)
{
MOZ_COUNT_CTOR
(
ChildProfilerController
)
;
}
void
ChildProfilerController
:
:
Init
(
Endpoint
<
PProfilerChild
>
&
&
aEndpoint
)
{
RefPtr
<
nsIThread
>
newProfilerChildThread
;
if
(
NS_SUCCEEDED
(
NS_NewNamedThread
(
"
ProfilerChild
"
getter_AddRefs
(
newProfilerChildThread
)
)
)
)
{
{
auto
lock
=
mThread
.
Lock
(
)
;
RefPtr
<
nsIThread
>
&
lockedmThread
=
lock
.
ref
(
)
;
MOZ_ASSERT
(
!
lockedmThread
"
There
is
already
a
ProfilerChild
thread
"
)
;
lockedmThread
=
newProfilerChildThread
;
}
newProfilerChildThread
-
>
Dispatch
(
NewRunnableMethod
<
Endpoint
<
PProfilerChild
>
&
&
>
(
"
ChildProfilerController
:
:
SetupProfilerChild
"
this
&
ChildProfilerController
:
:
SetupProfilerChild
std
:
:
move
(
aEndpoint
)
)
NS_DISPATCH_NORMAL
)
;
}
}
ProfileAndAdditionalInformation
ChildProfilerController
:
:
GrabShutdownProfileAndShutdown
(
)
{
ProfileAndAdditionalInformation
profileAndAdditionalInformation
;
ShutdownAndMaybeGrabShutdownProfileFirst
(
&
profileAndAdditionalInformation
)
;
return
profileAndAdditionalInformation
;
}
void
ChildProfilerController
:
:
Shutdown
(
)
{
ShutdownAndMaybeGrabShutdownProfileFirst
(
nullptr
)
;
}
void
ChildProfilerController
:
:
ShutdownAndMaybeGrabShutdownProfileFirst
(
ProfileAndAdditionalInformation
*
aOutShutdownProfileInformation
)
{
RefPtr
<
nsIThread
>
profilerChildThread
;
{
auto
lock
=
mThread
.
Lock
(
)
;
RefPtr
<
nsIThread
>
&
lockedmThread
=
lock
.
ref
(
)
;
lockedmThread
.
swap
(
profilerChildThread
)
;
}
if
(
profilerChildThread
)
{
if
(
profiler_is_active
(
)
)
{
CrashReporter
:
:
RecordAnnotationCString
(
CrashReporter
:
:
Annotation
:
:
ProfilerChildShutdownPhase
"
Profiling
-
Dispatching
ShutdownProfilerChild
"
)
;
profilerChildThread
-
>
Dispatch
(
NewRunnableMethod
<
ProfileAndAdditionalInformation
*
>
(
"
ChildProfilerController
:
:
ShutdownProfilerChild
"
this
&
ChildProfilerController
:
:
ShutdownProfilerChild
aOutShutdownProfileInformation
)
NS_DISPATCH_NORMAL
)
;
profilerChildThread
-
>
Shutdown
(
)
;
}
else
{
CrashReporter
:
:
RecordAnnotationCString
(
CrashReporter
:
:
Annotation
:
:
ProfilerChildShutdownPhase
"
Not
profiling
-
Running
ShutdownProfilerChild
"
)
;
NS_DispatchAndSpinEventLoopUntilComplete
(
"
ChildProfilerController
:
:
ShutdownProfilerChild
SYNC
"
_ns
profilerChildThread
NewRunnableMethod
<
ProfileAndAdditionalInformation
*
>
(
"
ChildProfilerController
:
:
ShutdownProfilerChild
SYNC
"
this
&
ChildProfilerController
:
:
ShutdownProfilerChild
nullptr
)
)
;
}
}
}
ChildProfilerController
:
:
~
ChildProfilerController
(
)
{
MOZ_COUNT_DTOR
(
ChildProfilerController
)
;
#
ifdef
DEBUG
{
auto
lock
=
mThread
.
Lock
(
)
;
RefPtr
<
nsIThread
>
&
lockedmThread
=
lock
.
ref
(
)
;
MOZ_ASSERT
(
!
lockedmThread
"
Please
call
Shutdown
before
destroying
ChildProfilerController
"
)
;
}
#
endif
MOZ_ASSERT
(
!
mProfilerChild
)
;
}
void
ChildProfilerController
:
:
SetupProfilerChild
(
Endpoint
<
PProfilerChild
>
&
&
aEndpoint
)
{
{
auto
lock
=
mThread
.
Lock
(
)
;
RefPtr
<
nsIThread
>
&
lockedmThread
=
lock
.
ref
(
)
;
MOZ_RELEASE_ASSERT
(
!
lockedmThread
|
|
lockedmThread
=
=
NS_GetCurrentThread
(
)
)
;
}
MOZ_ASSERT
(
aEndpoint
.
IsValid
(
)
)
;
mProfilerChild
=
new
ProfilerChild
(
)
;
Endpoint
<
PProfilerChild
>
endpoint
=
std
:
:
move
(
aEndpoint
)
;
if
(
!
endpoint
.
Bind
(
mProfilerChild
)
)
{
MOZ_CRASH
(
"
Failed
to
bind
ProfilerChild
!
"
)
;
}
}
void
ChildProfilerController
:
:
ShutdownProfilerChild
(
ProfileAndAdditionalInformation
*
aOutShutdownProfileInformation
)
{
const
bool
isProfiling
=
profiler_is_active
(
)
;
if
(
aOutShutdownProfileInformation
)
{
CrashReporter
:
:
RecordAnnotationCString
(
CrashReporter
:
:
Annotation
:
:
ProfilerChildShutdownPhase
isProfiling
?
"
Profiling
-
GrabShutdownProfile
"
:
"
Not
profiling
-
GrabShutdownProfile
"
)
;
*
aOutShutdownProfileInformation
=
mProfilerChild
-
>
GrabShutdownProfile
(
)
;
}
CrashReporter
:
:
RecordAnnotationCString
(
CrashReporter
:
:
Annotation
:
:
ProfilerChildShutdownPhase
isProfiling
?
"
Profiling
-
Destroying
ProfilerChild
"
:
"
Not
profiling
-
Destroying
ProfilerChild
"
)
;
mProfilerChild
-
>
Destroy
(
)
;
mProfilerChild
=
nullptr
;
CrashReporter
:
:
RecordAnnotationCString
(
CrashReporter
:
:
Annotation
:
:
ProfilerChildShutdownPhase
isProfiling
?
"
Profiling
-
ShutdownProfilerChild
complete
waiting
for
"
"
thread
shutdown
"
:
"
Not
Profiling
-
ShutdownProfilerChild
complete
waiting
"
"
for
thread
shutdown
"
)
;
}
}
