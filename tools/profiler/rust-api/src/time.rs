use
crate
:
:
gecko_bindings
:
:
{
bindings
structs
:
:
mozilla
}
;
use
std
:
:
mem
:
:
MaybeUninit
;
#
[
derive
(
Debug
)
]
pub
struct
ProfilerTime
(
pub
(
crate
)
mozilla
:
:
TimeStamp
)
;
impl
ProfilerTime
{
pub
fn
now
(
)
-
>
ProfilerTime
{
let
mut
marker_timing
=
MaybeUninit
:
:
<
mozilla
:
:
TimeStamp
>
:
:
uninit
(
)
;
unsafe
{
bindings
:
:
gecko_profiler_construct_timestamp_now
(
marker_timing
.
as_mut_ptr
(
)
)
;
ProfilerTime
(
marker_timing
.
assume_init
(
)
)
}
}
}
impl
Drop
for
ProfilerTime
{
fn
drop
(
&
mut
self
)
{
unsafe
{
bindings
:
:
gecko_profiler_destruct_timestamp
(
&
mut
self
.
0
)
;
}
}
}
