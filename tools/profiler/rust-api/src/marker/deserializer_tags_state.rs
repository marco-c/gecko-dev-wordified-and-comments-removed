use
crate
:
:
json_writer
:
:
JSONWriter
;
use
crate
:
:
marker
:
:
schema
:
:
MarkerSchema
;
use
crate
:
:
marker
:
:
{
transmute_and_stream
ProfilerMarker
}
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
sync
:
:
{
RwLock
RwLockReadGuard
}
;
lazy_static
!
{
static
ref
DESERIALIZER_TAGS_STATE
:
RwLock
<
DeserializerTagsState
>
=
RwLock
:
:
new
(
DeserializerTagsState
:
:
new
(
)
)
;
}
pub
struct
DeserializerTagsState
{
pub
marker_tag_to_deserializer_tag
:
HashMap
<
usize
u8
>
pub
marker_type_functions_1_based
:
Vec
<
MarkerTypeFunctions
>
}
pub
struct
MarkerTypeFunctions
{
pub
marker_type_name_fn
:
fn
(
)
-
>
&
'
static
str
pub
marker_type_display_fn
:
fn
(
)
-
>
MarkerSchema
pub
transmute_and_stream_fn
:
unsafe
fn
(
payload
:
*
const
u8
payload_size
:
usize
json_writer
:
&
mut
JSONWriter
)
}
impl
DeserializerTagsState
{
fn
new
(
)
-
>
Self
{
DeserializerTagsState
{
marker_tag_to_deserializer_tag
:
HashMap
:
:
new
(
)
marker_type_functions_1_based
:
vec
!
[
]
}
}
}
pub
fn
get_or_insert_deserializer_tag
<
T
>
(
)
-
>
u8
where
T
:
ProfilerMarker
{
let
unique_marker_tag
=
&
T
:
:
marker_type_name
as
*
const
_
as
usize
;
let
mut
state
=
DESERIALIZER_TAGS_STATE
.
write
(
)
.
unwrap
(
)
;
match
state
.
marker_tag_to_deserializer_tag
.
get
(
&
unique_marker_tag
)
{
None
=
>
{
let
deserializer_tag
=
state
.
marker_type_functions_1_based
.
len
(
)
as
u8
+
1
;
debug_assert
!
(
deserializer_tag
<
250
"
Too
many
rust
marker
payload
types
!
Please
consider
increasing
the
profiler
\
buffer
tag
size
.
"
)
;
state
.
marker_tag_to_deserializer_tag
.
insert
(
unique_marker_tag
deserializer_tag
)
;
state
.
marker_type_functions_1_based
.
push
(
MarkerTypeFunctions
{
marker_type_name_fn
:
T
:
:
marker_type_name
marker_type_display_fn
:
T
:
:
marker_type_display
transmute_and_stream_fn
:
transmute_and_stream
:
:
<
T
>
}
)
;
deserializer_tag
}
Some
(
deserializer_tag
)
=
>
*
deserializer_tag
}
}
pub
struct
MarkerTypeFunctionsReadGuard
{
guard
:
RwLockReadGuard
<
'
static
DeserializerTagsState
>
}
impl
MarkerTypeFunctionsReadGuard
{
pub
fn
iter
<
'
a
>
(
&
'
a
self
)
-
>
impl
Iterator
<
Item
=
&
'
a
MarkerTypeFunctions
>
{
self
.
guard
.
marker_type_functions_1_based
.
iter
(
)
}
pub
fn
get
<
'
a
>
(
&
'
a
self
deserializer_tag
:
u8
)
-
>
&
'
a
MarkerTypeFunctions
{
self
.
guard
.
marker_type_functions_1_based
.
get
(
deserializer_tag
as
usize
-
1
)
.
expect
(
"
Failed
to
find
the
marker
type
functions
for
given
deserializer
tag
"
)
}
}
pub
fn
get_marker_type_functions_read_guard
(
)
-
>
MarkerTypeFunctionsReadGuard
{
MarkerTypeFunctionsReadGuard
{
guard
:
DESERIALIZER_TAGS_STATE
.
read
(
)
.
unwrap
(
)
}
}
