use
crate
:
:
gecko_bindings
:
:
{
bindings
structs
:
:
mozilla
}
;
use
crate
:
:
ProfilerTime
;
use
std
:
:
mem
:
:
MaybeUninit
;
#
[
derive
(
Debug
)
]
pub
struct
MarkerTiming
(
pub
(
crate
)
MaybeUninit
<
mozilla
:
:
MarkerTiming
>
)
;
impl
MarkerTiming
{
pub
fn
instant_at
(
time
:
ProfilerTime
)
-
>
MarkerTiming
{
let
mut
marker_timing
=
MaybeUninit
:
:
<
mozilla
:
:
MarkerTiming
>
:
:
uninit
(
)
;
unsafe
{
bindings
:
:
gecko_profiler_construct_marker_timing_instant_at
(
marker_timing
.
as_mut_ptr
(
)
&
time
.
0
)
;
}
MarkerTiming
(
marker_timing
)
}
pub
fn
instant_now
(
)
-
>
MarkerTiming
{
let
mut
marker_timing
=
MaybeUninit
:
:
<
mozilla
:
:
MarkerTiming
>
:
:
uninit
(
)
;
unsafe
{
bindings
:
:
gecko_profiler_construct_marker_timing_instant_now
(
marker_timing
.
as_mut_ptr
(
)
)
;
}
MarkerTiming
(
marker_timing
)
}
pub
fn
interval
(
start_time
:
ProfilerTime
end_time
:
ProfilerTime
)
-
>
MarkerTiming
{
let
mut
marker_timing
=
MaybeUninit
:
:
<
mozilla
:
:
MarkerTiming
>
:
:
uninit
(
)
;
unsafe
{
bindings
:
:
gecko_profiler_construct_marker_timing_interval
(
marker_timing
.
as_mut_ptr
(
)
&
start_time
.
0
&
end_time
.
0
)
;
}
MarkerTiming
(
marker_timing
)
}
pub
fn
interval_until_now_from
(
start_time
:
ProfilerTime
)
-
>
MarkerTiming
{
let
mut
marker_timing
=
MaybeUninit
:
:
<
mozilla
:
:
MarkerTiming
>
:
:
uninit
(
)
;
unsafe
{
bindings
:
:
gecko_profiler_construct_marker_timing_interval_until_now_from
(
marker_timing
.
as_mut_ptr
(
)
&
start_time
.
0
)
;
}
MarkerTiming
(
marker_timing
)
}
pub
fn
interval_start
(
time
:
ProfilerTime
)
-
>
MarkerTiming
{
let
mut
marker_timing
=
MaybeUninit
:
:
<
mozilla
:
:
MarkerTiming
>
:
:
uninit
(
)
;
unsafe
{
bindings
:
:
gecko_profiler_construct_marker_timing_interval_start
(
marker_timing
.
as_mut_ptr
(
)
&
time
.
0
)
;
}
MarkerTiming
(
marker_timing
)
}
pub
fn
interval_end
(
time
:
ProfilerTime
)
-
>
MarkerTiming
{
let
mut
marker_timing
=
MaybeUninit
:
:
<
mozilla
:
:
MarkerTiming
>
:
:
uninit
(
)
;
unsafe
{
bindings
:
:
gecko_profiler_construct_marker_timing_interval_end
(
marker_timing
.
as_mut_ptr
(
)
&
time
.
0
)
;
}
MarkerTiming
(
marker_timing
)
}
}
impl
Default
for
MarkerTiming
{
fn
default
(
)
-
>
Self
{
MarkerTiming
:
:
instant_now
(
)
}
}
impl
Drop
for
MarkerTiming
{
fn
drop
(
&
mut
self
)
{
unsafe
{
bindings
:
:
gecko_profiler_destruct_marker_timing
(
self
.
0
.
as_mut_ptr
(
)
)
;
}
}
}
#
[
derive
(
Debug
Default
)
]
pub
struct
MarkerOptions
{
pub
timing
:
MarkerTiming
}
