use
crate
:
:
gecko_bindings
:
:
{
bindings
structs
:
:
mozilla
}
;
use
std
:
:
os
:
:
raw
:
:
c_char
;
pub
type
Location
=
mozilla
:
:
MarkerSchema_Location
;
pub
type
Format
=
mozilla
:
:
MarkerSchema_Format
;
pub
type
Searchable
=
mozilla
:
:
MarkerSchema_Searchable
;
pub
struct
MarkerSchema
{
pub
(
crate
)
ptr
:
*
mut
mozilla
:
:
MarkerSchema
}
impl
MarkerSchema
{
pub
fn
new
(
locations
:
&
[
Location
]
)
-
>
Self
{
MarkerSchema
{
ptr
:
unsafe
{
bindings
:
:
gecko_profiler_construct_marker_schema
(
locations
.
as_ptr
(
)
locations
.
len
(
)
)
}
}
}
pub
fn
new_with_special_frontend_location
(
)
-
>
Self
{
MarkerSchema
{
ptr
:
unsafe
{
bindings
:
:
gecko_profiler_construct_marker_schema_with_special_front_end_location
(
)
}
}
}
pub
fn
set_chart_label
(
&
mut
self
label
:
&
str
)
-
>
&
mut
Self
{
unsafe
{
bindings
:
:
gecko_profiler_marker_schema_set_chart_label
(
self
.
ptr
label
.
as_ptr
(
)
as
*
const
c_char
label
.
len
(
)
)
;
}
self
}
pub
fn
set_tooltip_label
(
&
mut
self
label
:
&
str
)
-
>
&
mut
Self
{
unsafe
{
bindings
:
:
gecko_profiler_marker_schema_set_tooltip_label
(
self
.
ptr
label
.
as_ptr
(
)
as
*
const
c_char
label
.
len
(
)
)
;
}
self
}
pub
fn
set_table_label
(
&
mut
self
label
:
&
str
)
-
>
&
mut
Self
{
unsafe
{
bindings
:
:
gecko_profiler_marker_schema_set_table_label
(
self
.
ptr
label
.
as_ptr
(
)
as
*
const
c_char
label
.
len
(
)
)
;
}
self
}
pub
fn
set_all_labels
(
&
mut
self
label
:
&
str
)
-
>
&
mut
Self
{
unsafe
{
bindings
:
:
gecko_profiler_marker_schema_set_all_labels
(
self
.
ptr
label
.
as_ptr
(
)
as
*
const
c_char
label
.
len
(
)
)
;
}
self
}
pub
fn
add_key_format
(
&
mut
self
key
:
&
str
format
:
Format
)
-
>
&
mut
Self
{
unsafe
{
bindings
:
:
gecko_profiler_marker_schema_add_key_format
(
self
.
ptr
key
.
as_ptr
(
)
as
*
const
c_char
key
.
len
(
)
format
)
;
}
self
}
pub
fn
add_key_label_format
(
&
mut
self
key
:
&
str
label
:
&
str
format
:
Format
)
-
>
&
mut
Self
{
unsafe
{
bindings
:
:
gecko_profiler_marker_schema_add_key_label_format
(
self
.
ptr
key
.
as_ptr
(
)
as
*
const
c_char
key
.
len
(
)
label
.
as_ptr
(
)
as
*
const
c_char
label
.
len
(
)
format
)
;
}
self
}
pub
fn
add_key_format_searchable
(
&
mut
self
key
:
&
str
format
:
Format
searchable
:
Searchable
)
-
>
&
mut
Self
{
unsafe
{
bindings
:
:
gecko_profiler_marker_schema_add_key_format_searchable
(
self
.
ptr
key
.
as_ptr
(
)
as
*
const
c_char
key
.
len
(
)
format
searchable
)
;
}
self
}
pub
fn
add_key_label_format_searchable
(
&
mut
self
key
:
&
str
label
:
&
str
format
:
Format
searchable
:
Searchable
)
-
>
&
mut
Self
{
unsafe
{
bindings
:
:
gecko_profiler_marker_schema_add_key_label_format_searchable
(
self
.
ptr
key
.
as_ptr
(
)
as
*
const
c_char
key
.
len
(
)
label
.
as_ptr
(
)
as
*
const
c_char
label
.
len
(
)
format
searchable
)
;
}
self
}
pub
fn
add_static_label_value
(
&
mut
self
label
:
&
str
value
:
&
str
)
-
>
&
mut
Self
{
unsafe
{
bindings
:
:
gecko_profiler_marker_schema_add_static_label_value
(
self
.
ptr
label
.
as_ptr
(
)
as
*
const
c_char
label
.
len
(
)
value
.
as_ptr
(
)
as
*
const
c_char
value
.
len
(
)
)
;
}
self
}
}
impl
Drop
for
MarkerSchema
{
fn
drop
(
&
mut
self
)
{
unsafe
{
bindings
:
:
gecko_profiler_destruct_marker_schema
(
self
.
ptr
)
;
}
}
}
