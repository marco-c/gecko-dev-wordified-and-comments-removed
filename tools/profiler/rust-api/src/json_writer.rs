use
crate
:
:
gecko_bindings
:
:
{
bindings
structs
:
:
mozilla
}
;
use
std
:
:
os
:
:
raw
:
:
c_char
;
#
[
derive
(
Debug
)
]
pub
struct
JSONWriter
<
'
a
>
(
&
'
a
mut
mozilla
:
:
baseprofiler
:
:
SpliceableJSONWriter
)
;
impl
<
'
a
>
JSONWriter
<
'
a
>
{
pub
(
crate
)
fn
new
(
json_writer
:
&
'
a
mut
mozilla
:
:
baseprofiler
:
:
SpliceableJSONWriter
)
-
>
Self
{
JSONWriter
(
json_writer
)
}
pub
fn
int_property
(
&
mut
self
name
:
&
str
value
:
i64
)
{
unsafe
{
bindings
:
:
gecko_profiler_json_writer_int_property
(
self
.
0
name
.
as_ptr
(
)
as
*
const
c_char
name
.
len
(
)
value
)
;
}
}
pub
fn
float_property
(
&
mut
self
name
:
&
str
value
:
f64
)
{
unsafe
{
bindings
:
:
gecko_profiler_json_writer_float_property
(
self
.
0
name
.
as_ptr
(
)
as
*
const
c_char
name
.
len
(
)
value
)
;
}
}
pub
fn
bool_property
(
&
mut
self
name
:
&
str
value
:
bool
)
{
unsafe
{
bindings
:
:
gecko_profiler_json_writer_bool_property
(
self
.
0
name
.
as_ptr
(
)
as
*
const
c_char
name
.
len
(
)
value
)
;
}
}
pub
fn
string_property
(
&
mut
self
name
:
&
str
value
:
&
str
)
{
unsafe
{
bindings
:
:
gecko_profiler_json_writer_string_property
(
self
.
0
name
.
as_ptr
(
)
as
*
const
c_char
name
.
len
(
)
value
.
as_ptr
(
)
as
*
const
c_char
value
.
len
(
)
)
;
}
}
pub
fn
null_property
(
&
mut
self
name
:
&
str
)
{
unsafe
{
bindings
:
:
gecko_profiler_json_writer_null_property
(
self
.
0
name
.
as_ptr
(
)
as
*
const
c_char
name
.
len
(
)
)
;
}
}
}
