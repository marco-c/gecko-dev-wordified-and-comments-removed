#
[
cfg
(
feature
=
"
enabled
"
)
]
use
crate
:
:
gecko_bindings
:
:
{
bindings
profiling_categories
:
:
ProfilingCategoryPair
structs
:
:
mozilla
}
;
#
[
cfg
(
feature
=
"
enabled
"
)
]
pub
struct
AutoProfilerLabel
<
'
a
>
(
&
'
a
mut
mozilla
:
:
AutoProfilerLabel
)
;
#
[
cfg
(
feature
=
"
enabled
"
)
]
impl
<
'
a
>
AutoProfilerLabel
<
'
a
>
{
#
[
inline
]
pub
unsafe
fn
new
(
label
:
&
mut
std
:
:
mem
:
:
MaybeUninit
<
mozilla
:
:
AutoProfilerLabel
>
category_pair
:
ProfilingCategoryPair
)
-
>
AutoProfilerLabel
{
bindings
:
:
gecko_profiler_construct_label
(
label
.
as_mut_ptr
(
)
category_pair
.
to_cpp_enum_value
(
)
)
;
AutoProfilerLabel
(
&
mut
*
label
.
as_mut_ptr
(
)
)
}
}
#
[
cfg
(
feature
=
"
enabled
"
)
]
impl
<
'
a
>
Drop
for
AutoProfilerLabel
<
'
a
>
{
#
[
inline
]
fn
drop
(
&
mut
self
)
{
unsafe
{
bindings
:
:
gecko_profiler_destruct_label
(
self
.
0
)
;
}
}
}
#
[
cfg
(
feature
=
"
enabled
"
)
]
#
[
macro_export
]
macro_rules
!
gecko_profiler_label
{
(
category
:
ident
)
=
>
{
gecko_profiler_label
!
(
crate
:
:
ProfilingCategoryPair
:
:
category
(
None
)
)
}
;
(
category
:
ident
subcategory
:
ident
)
=
>
{
gecko_profiler_label
!
(
crate
:
:
ProfilingCategoryPair
:
:
category
(
Some
(
crate
:
:
category
:
:
subcategory
)
)
)
}
;
(
category_path
:
expr
)
=
>
{
let
mut
_profiler_label
=
:
:
std
:
:
mem
:
:
MaybeUninit
:
:
<
crate
:
:
gecko_bindings
:
:
structs
:
:
mozilla
:
:
AutoProfilerLabel
>
:
:
uninit
(
)
;
let
_profiler_label
=
if
crate
:
:
is_active
(
)
{
unsafe
{
Some
(
crate
:
:
AutoProfilerLabel
:
:
new
(
&
mut
_profiler_label
category_path
)
)
}
}
else
{
None
}
;
}
;
}
#
[
cfg
(
not
(
feature
=
"
enabled
"
)
)
]
#
[
macro_export
]
macro_rules
!
gecko_profiler_label
{
(
category
:
ident
)
=
>
{
}
;
(
category
:
ident
subcategory
:
ident
)
=
>
{
}
;
}
#
[
cfg
(
test
)
]
mod
tests
{
#
[
test
]
fn
test_gecko_profiler_label
(
)
{
gecko_profiler_label
!
(
Layout
)
;
gecko_profiler_label
!
(
JavaScript
Parsing
)
;
}
}
