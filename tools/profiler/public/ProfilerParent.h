#
ifndef
ProfilerParent_h
#
define
ProfilerParent_h
#
include
"
mozilla
/
PProfilerParent
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
class
nsIProfilerStartParams
;
namespace
mozilla
{
class
ProfileBufferGlobalController
;
class
ProfilerParentTracker
;
class
ProfilerParent
final
:
public
PProfilerParent
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
ProfilerParent
)
static
mozilla
:
:
ipc
:
:
Endpoint
<
PProfilerChild
>
CreateForProcess
(
base
:
:
ProcessId
aOtherPid
)
;
#
ifdef
MOZ_GECKO_PROFILER
using
SingleProcessProfilePromise
=
MozPromise
<
Shmem
ResponseRejectReason
true
>
;
struct
SingleProcessProfilePromiseAndChildPid
{
RefPtr
<
SingleProcessProfilePromise
>
profilePromise
;
base
:
:
ProcessId
childPid
;
}
;
static
nsTArray
<
SingleProcessProfilePromiseAndChildPid
>
GatherProfiles
(
)
;
static
void
ProfilerStarted
(
nsIProfilerStartParams
*
aParams
)
;
static
void
ProfilerWillStopIfStarted
(
)
;
static
void
ProfilerStopped
(
)
;
static
void
ProfilerPaused
(
)
;
static
void
ProfilerResumed
(
)
;
static
void
ProfilerPausedSampling
(
)
;
static
void
ProfilerResumedSampling
(
)
;
static
void
ClearAllPages
(
)
;
static
ProfileBufferChunkManagerUpdate
MakeFinalUpdate
(
)
;
static
bool
IsLockedOnCurrentThread
(
)
;
private
:
friend
class
ProfileBufferGlobalController
;
friend
class
ProfilerParentTracker
;
explicit
ProfilerParent
(
base
:
:
ProcessId
aChildPid
)
;
void
Init
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aActorDestroyReason
)
override
;
void
ActorDealloc
(
)
override
;
void
RequestChunkManagerUpdate
(
)
;
RefPtr
<
ProfilerParent
>
mSelfRef
;
base
:
:
ProcessId
mChildPid
;
nsTArray
<
MozPromiseHolder
<
SingleProcessProfilePromise
>
>
mPendingRequestedProfiles
;
bool
mDestroyed
;
#
endif
private
:
virtual
~
ProfilerParent
(
)
;
}
;
}
#
endif
