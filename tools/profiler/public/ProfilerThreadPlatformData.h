#
ifndef
ProfilerThreadPlatformData_h
#
define
ProfilerThreadPlatformData_h
#
include
"
mozilla
/
ProfilerUtils
.
h
"
#
if
defined
(
__APPLE__
)
#
include
<
mach
/
mach_types
.
h
>
#
elif
defined
(
__linux__
)
|
|
defined
(
__ANDROID__
)
|
|
defined
(
__FreeBSD__
)
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
time
.
h
>
#
endif
namespace
mozilla
:
:
profiler
{
class
PlatformData
{
#
if
(
defined
(
_MSC_VER
)
|
|
defined
(
__MINGW32__
)
)
&
&
defined
(
MOZ_GECKO_PROFILER
)
public
:
explicit
PlatformData
(
ProfilerThreadId
aThreadId
)
;
~
PlatformData
(
)
;
using
WindowsHandle
=
void
*
;
WindowsHandle
ProfiledThread
(
)
const
{
return
mProfiledThread
;
}
private
:
WindowsHandle
mProfiledThread
;
#
elif
defined
(
__APPLE__
)
&
&
defined
(
MOZ_GECKO_PROFILER
)
public
:
explicit
PlatformData
(
ProfilerThreadId
aThreadId
)
;
~
PlatformData
(
)
;
thread_act_t
ProfiledThread
(
)
const
{
return
mProfiledThread
;
}
private
:
thread_act_t
mProfiledThread
;
#
elif
(
defined
(
__linux__
)
|
|
defined
(
__ANDROID__
)
|
|
defined
(
__FreeBSD__
)
)
&
&
\
defined
(
MOZ_GECKO_PROFILER
)
public
:
explicit
PlatformData
(
ProfilerThreadId
aThreadId
)
;
~
PlatformData
(
)
;
Maybe
<
clockid_t
>
GetClockId
(
)
const
{
return
mClockId
;
}
private
:
Maybe
<
clockid_t
>
mClockId
;
#
else
public
:
explicit
PlatformData
(
ProfilerThreadId
aThreadId
)
{
}
#
endif
}
;
#
if
defined
(
MOZ_GECKO_PROFILER
)
bool
GetCpuTimeSinceThreadStartInNs
(
uint64_t
*
aResult
const
PlatformData
&
aPlatformData
)
;
#
else
static
inline
bool
GetCpuTimeSinceThreadStartInNs
(
uint64_t
*
aResult
const
PlatformData
&
aPlatformData
)
{
return
false
;
}
#
endif
}
#
endif
