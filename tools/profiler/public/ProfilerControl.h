#
ifndef
ProfilerControl_h
#
define
ProfilerControl_h
#
include
"
mozilla
/
BaseProfilerRAIIMacro
.
h
"
enum
class
IsFastShutdown
{
No
Yes
}
;
#
ifndef
MOZ_GECKO_PROFILER
#
define
AUTO_PROFILER_INIT
:
:
profiler_init_main_thread_id
(
)
#
define
AUTO_PROFILER_INIT2
static
inline
void
profiler_init
(
void
*
stackTop
)
{
}
static
inline
void
profiler_shutdown
(
IsFastShutdown
aIsFastShutdown
=
IsFastShutdown
:
:
No
)
{
}
static
inline
void
profiler_lookup_async_signal_dump_directory
(
)
{
}
#
else
#
include
"
BaseProfiler
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
PowerOfTwo
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
static
constexpr
mozilla
:
:
PowerOfTwo32
PROFILER_DEFAULT_ENTRIES
=
mozilla
:
:
baseprofiler
:
:
BASE_PROFILER_DEFAULT_ENTRIES
;
static
constexpr
mozilla
:
:
PowerOfTwo32
PROFILER_DEFAULT_STARTUP_ENTRIES
=
mozilla
:
:
baseprofiler
:
:
BASE_PROFILER_DEFAULT_STARTUP_ENTRIES
;
static
constexpr
mozilla
:
:
PowerOfTwo32
PROFILER_DEFAULT_SIGHANDLE_ENTRIES
=
mozilla
:
:
MakePowerOfTwo32
<
64
*
1024
*
1024
>
(
)
;
#
define
PROFILER_DEFAULT_INTERVAL
BASE_PROFILER_DEFAULT_INTERVAL
#
define
PROFILER_MAX_INTERVAL
BASE_PROFILER_MAX_INTERVAL
#
define
PROFILER_DEFAULT_ACTIVE_TAB_ID
0
void
profiler_init
(
void
*
stackTop
)
;
void
profiler_init_threadmanager
(
)
;
#
define
AUTO_PROFILER_INIT
mozilla
:
:
AutoProfilerInit
PROFILER_RAII
#
define
AUTO_PROFILER_INIT2
mozilla
:
:
AutoProfilerInit2
PROFILER_RAII
void
profiler_shutdown
(
IsFastShutdown
aIsFastShutdown
=
IsFastShutdown
:
:
No
)
;
RefPtr
<
mozilla
:
:
GenericPromise
>
profiler_start
(
mozilla
:
:
PowerOfTwo32
aCapacity
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
uint64_t
aActiveTabID
const
mozilla
:
:
Maybe
<
double
>
&
aDuration
=
mozilla
:
:
Nothing
(
)
)
;
RefPtr
<
mozilla
:
:
GenericPromise
>
profiler_stop
(
)
;
void
profiler_ensure_started
(
mozilla
:
:
PowerOfTwo32
aCapacity
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
uint64_t
aActiveTabID
const
mozilla
:
:
Maybe
<
double
>
&
aDuration
=
mozilla
:
:
Nothing
(
)
)
;
void
profiler_lookup_async_signal_dump_directory
(
)
;
RefPtr
<
mozilla
:
:
GenericPromise
>
profiler_pause
(
)
;
RefPtr
<
mozilla
:
:
GenericPromise
>
profiler_resume
(
)
;
RefPtr
<
mozilla
:
:
GenericPromise
>
profiler_pause_sampling
(
)
;
RefPtr
<
mozilla
:
:
GenericPromise
>
profiler_resume_sampling
(
)
;
void
profiler_get_start_params
(
int
*
aEntrySize
mozilla
:
:
Maybe
<
double
>
*
aDuration
double
*
aInterval
uint32_t
*
aFeatures
mozilla
:
:
Vector
<
const
char
*
0
mozilla
:
:
MallocAllocPolicy
>
*
aFilters
uint64_t
*
aActiveTabID
)
;
namespace
mozilla
{
class
MOZ_RAII
AutoProfilerInit
{
public
:
explicit
AutoProfilerInit
(
)
{
profiler_init
(
this
)
;
}
~
AutoProfilerInit
(
)
{
profiler_shutdown
(
)
;
}
private
:
}
;
class
MOZ_RAII
AutoProfilerInit2
{
public
:
explicit
AutoProfilerInit2
(
)
{
profiler_init_threadmanager
(
)
;
}
private
:
}
;
}
#
endif
#
endif
