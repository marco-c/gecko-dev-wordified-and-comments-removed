#
ifndef
ProfilerThreadRegistrationInfo_h
#
define
ProfilerThreadRegistrationInfo_h
#
include
"
mozilla
/
BaseAndGeckoProfilerDetail
.
h
"
#
include
"
mozilla
/
ProfilerUtils
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
<
string
>
namespace
mozilla
:
:
profiler
{
class
ThreadRegistrationInfo
{
public
:
explicit
ThreadRegistrationInfo
(
const
char
*
aName
)
:
mName
(
aName
)
{
}
ThreadRegistrationInfo
(
const
char
*
aName
ProfilerThreadId
aThreadId
bool
aIsMainThread
const
TimeStamp
&
aRegisterTime
)
:
mName
(
aName
)
mRegisterTime
(
aRegisterTime
)
mThreadId
(
aThreadId
)
mIsMainThread
(
aIsMainThread
)
{
}
ThreadRegistrationInfo
(
ThreadRegistrationInfo
&
&
)
=
default
;
ThreadRegistrationInfo
(
const
ThreadRegistrationInfo
&
)
=
delete
;
ThreadRegistrationInfo
&
operator
=
(
const
ThreadRegistrationInfo
&
)
=
delete
;
ThreadRegistrationInfo
&
operator
=
(
ThreadRegistrationInfo
&
&
)
=
delete
;
[
[
nodiscard
]
]
const
char
*
Name
(
)
const
{
return
mName
.
c_str
(
)
;
}
[
[
nodiscard
]
]
const
TimeStamp
&
RegisterTime
(
)
const
{
return
mRegisterTime
;
}
[
[
nodiscard
]
]
ProfilerThreadId
ThreadId
(
)
const
{
return
mThreadId
;
}
[
[
nodiscard
]
]
bool
IsMainThread
(
)
const
{
return
mIsMainThread
;
}
private
:
static
TimeStamp
ExistingRegisterTimeOrNow
(
)
{
TimeStamp
registerTime
;
#
ifdef
MOZ_GECKO_PROFILER
registerTime
=
baseprofiler
:
:
detail
:
:
GetThreadRegistrationTime
(
)
;
#
endif
if
(
!
registerTime
)
{
registerTime
=
TimeStamp
:
:
Now
(
)
;
}
return
registerTime
;
}
const
std
:
:
string
mName
;
const
TimeStamp
mRegisterTime
=
ExistingRegisterTimeOrNow
(
)
;
const
ProfilerThreadId
mThreadId
=
profiler_current_thread_id
(
)
;
const
bool
mIsMainThread
=
profiler_is_main_thread
(
)
;
}
;
}
#
endif
