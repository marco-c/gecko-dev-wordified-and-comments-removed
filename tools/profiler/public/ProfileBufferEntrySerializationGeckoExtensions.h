#
ifndef
ProfileBufferEntrySerializationGeckoExtensions_h
#
define
ProfileBufferEntrySerializationGeckoExtensions_h
#
include
"
mozilla
/
ProfileBufferEntrySerialization
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
template
<
typename
CHAR
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
nsTString
<
CHAR
>
>
{
static
Length
Bytes
(
const
nsTString
<
CHAR
>
&
aS
)
{
const
auto
length
=
aS
.
Length
(
)
;
return
ProfileBufferEntryWriter
:
:
ULEB128Size
(
length
)
+
static_cast
<
Length
>
(
length
*
sizeof
(
CHAR
)
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
nsTString
<
CHAR
>
&
aS
)
{
const
auto
length
=
aS
.
Length
(
)
;
aEW
.
WriteULEB128
(
length
)
;
aEW
.
WriteBytes
(
aS
.
Data
(
)
length
*
sizeof
(
CHAR
)
)
;
}
}
;
template
<
typename
CHAR
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
nsTString
<
CHAR
>
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
nsTString
<
CHAR
>
&
aS
)
{
aS
=
Read
(
aER
)
;
}
static
nsTString
<
CHAR
>
Read
(
ProfileBufferEntryReader
&
aER
)
{
const
Length
length
=
aER
.
ReadULEB128
<
Length
>
(
)
;
nsTString
<
CHAR
>
s
;
nsresult
rv
;
auto
writer
=
s
.
BulkWrite
(
length
0
true
rv
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
aER
.
ReadBytes
(
writer
.
Elements
(
)
length
*
sizeof
(
CHAR
)
)
;
writer
.
Finish
(
length
true
)
;
return
s
;
}
}
;
template
<
typename
CHAR
size_t
N
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
nsTAutoStringN
<
CHAR
N
>
>
{
static
Length
Bytes
(
const
nsTAutoStringN
<
CHAR
N
>
&
aS
)
{
const
auto
length
=
aS
.
Length
(
)
;
return
ProfileBufferEntryWriter
:
:
ULEB128Size
(
length
)
+
static_cast
<
Length
>
(
length
*
sizeof
(
CHAR
)
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
nsTAutoStringN
<
CHAR
N
>
&
aS
)
{
const
auto
length
=
aS
.
Length
(
)
;
aEW
.
WriteULEB128
(
length
)
;
aEW
.
WriteBytes
(
aS
.
BeginReading
(
)
length
*
sizeof
(
CHAR
)
)
;
}
}
;
template
<
typename
CHAR
size_t
N
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
nsTAutoStringN
<
CHAR
N
>
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
nsTAutoStringN
<
CHAR
N
>
&
aS
)
{
aS
=
Read
(
aER
)
;
}
static
nsTAutoStringN
<
CHAR
N
>
Read
(
ProfileBufferEntryReader
&
aER
)
{
const
auto
length
=
aER
.
ReadULEB128
<
Length
>
(
)
;
nsTAutoStringN
<
CHAR
N
>
s
;
nsresult
rv
;
auto
writer
=
s
.
BulkWrite
(
length
0
true
rv
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
aER
.
ReadBytes
(
writer
.
Elements
(
)
length
*
sizeof
(
CHAR
)
)
;
writer
.
Finish
(
length
true
)
;
return
s
;
}
}
;
template
<
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
JS
:
:
UniqueChars
>
{
static
Length
Bytes
(
const
JS
:
:
UniqueChars
&
aS
)
{
if
(
!
aS
)
{
return
ProfileBufferEntryWriter
:
:
ULEB128Size
<
Length
>
(
0
)
;
}
const
auto
len
=
static_cast
<
Length
>
(
strlen
(
aS
.
get
(
)
)
)
;
return
ProfileBufferEntryWriter
:
:
ULEB128Size
(
len
)
+
len
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
JS
:
:
UniqueChars
&
aS
)
{
if
(
!
aS
)
{
aEW
.
WriteULEB128
<
Length
>
(
0
)
;
return
;
}
const
auto
len
=
static_cast
<
Length
>
(
strlen
(
aS
.
get
(
)
)
)
;
aEW
.
WriteULEB128
(
len
)
;
aEW
.
WriteBytes
(
aS
.
get
(
)
len
)
;
}
}
;
template
<
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
JS
:
:
UniqueChars
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
JS
:
:
UniqueChars
&
aS
)
{
aS
=
Read
(
aER
)
;
}
static
JS
:
:
UniqueChars
Read
(
ProfileBufferEntryReader
&
aER
)
{
const
auto
len
=
aER
.
ReadULEB128
<
Length
>
(
)
;
char
*
buffer
=
static_cast
<
char
*
>
(
js
:
:
SystemAllocPolicy
{
}
.
pod_malloc
<
char
>
(
len
+
1
)
)
;
aER
.
ReadBytes
(
buffer
len
)
;
buffer
[
len
]
=
'
\
0
'
;
return
JS
:
:
UniqueChars
(
buffer
)
;
}
}
;
}
#
endif
