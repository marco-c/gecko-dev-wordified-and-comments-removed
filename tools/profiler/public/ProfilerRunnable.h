#
ifndef
ProfilerRunnable_h
#
define
ProfilerRunnable_h
#
include
"
GeckoProfiler
.
h
"
#
include
"
nsIThreadPool
.
h
"
#
if
!
defined
(
MOZ_GECKO_PROFILER
)
|
|
!
defined
(
MOZ_COLLECTING_RUNNABLE_TELEMETRY
)
#
define
AUTO_PROFILE_FOLLOWING_RUNNABLE
(
runnable
)
#
else
#
define
AUTO_PROFILE_FOLLOWING_RUNNABLE
(
runnable
)
\
mozilla
:
:
AutoProfileRunnable
PROFILER_RAII
(
runnable
)
namespace
mozilla
{
class
MOZ_RAII
AutoProfileRunnable
{
public
:
explicit
AutoProfileRunnable
(
Runnable
*
aRunnable
)
:
mStartTime
(
TimeStamp
:
:
Now
(
)
)
{
if
(
!
profiler_thread_is_being_profiled_for_markers
(
)
)
{
return
;
}
aRunnable
-
>
GetName
(
mName
)
;
}
explicit
AutoProfileRunnable
(
nsIRunnable
*
aRunnable
)
:
mStartTime
(
TimeStamp
:
:
Now
(
)
)
{
if
(
!
profiler_thread_is_being_profiled_for_markers
(
)
)
{
return
;
}
nsCOMPtr
<
nsIThreadPool
>
threadPool
=
do_QueryInterface
(
aRunnable
)
;
if
(
threadPool
)
{
return
;
}
nsCOMPtr
<
nsINamed
>
named
=
do_QueryInterface
(
aRunnable
)
;
if
(
named
)
{
named
-
>
GetName
(
mName
)
;
}
}
explicit
AutoProfileRunnable
(
nsACString
&
aName
)
:
mStartTime
(
TimeStamp
:
:
Now
(
)
)
mName
(
aName
)
{
}
~
AutoProfileRunnable
(
)
{
if
(
!
profiler_thread_is_being_profiled_for_markers
(
)
|
|
mName
.
IsEmpty
(
)
)
{
return
;
}
AUTO_PROFILER_LABEL
(
"
AutoProfileRunnable
"
PROFILER
)
;
AUTO_PROFILER_STATS
(
AUTO_PROFILE_RUNNABLE
)
;
profiler_add_marker
(
"
Runnable
"
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
OTHER
MarkerTiming
:
:
IntervalUntilNowFrom
(
mStartTime
)
geckoprofiler
:
:
markers
:
:
TextMarker
{
}
mName
)
;
}
protected
:
TimeStamp
mStartTime
;
nsAutoCString
mName
;
}
;
}
#
endif
#
endif
