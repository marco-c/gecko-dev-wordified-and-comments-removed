#
ifndef
ProfileAdditionalInformation_h
#
define
ProfileAdditionalInformation_h
#
include
"
SharedLibraries
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
nsString
.
h
"
namespace
IPC
{
class
MessageReader
;
class
MessageWriter
;
template
<
typename
T
>
struct
ParamTraits
;
}
namespace
mozilla
{
struct
ProfileGenerationAdditionalInformation
{
ProfileGenerationAdditionalInformation
(
)
=
default
;
explicit
ProfileGenerationAdditionalInformation
(
SharedLibraryInfo
&
&
aSharedLibraries
)
:
mSharedLibraries
(
std
:
:
move
(
aSharedLibraries
)
)
{
}
size_t
SizeOf
(
)
const
{
return
mSharedLibraries
.
SizeOf
(
)
;
}
void
Append
(
ProfileGenerationAdditionalInformation
&
&
aOther
)
{
mSharedLibraries
.
AddAllSharedLibraries
(
aOther
.
mSharedLibraries
)
;
}
void
FinishGathering
(
)
{
mSharedLibraries
.
DeduplicateEntries
(
)
;
}
void
ToJSValue
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
)
const
;
SharedLibraryInfo
mSharedLibraries
;
}
;
struct
ProfileAndAdditionalInformation
{
ProfileAndAdditionalInformation
(
)
=
default
;
explicit
ProfileAndAdditionalInformation
(
nsCString
&
&
aProfile
)
:
mProfile
(
std
:
:
move
(
aProfile
)
)
{
}
ProfileAndAdditionalInformation
(
nsCString
&
&
aProfile
ProfileGenerationAdditionalInformation
&
&
aAdditionalInformation
)
:
mProfile
(
std
:
:
move
(
aProfile
)
)
mAdditionalInformation
(
Some
(
std
:
:
move
(
aAdditionalInformation
)
)
)
{
}
size_t
SizeOf
(
)
const
{
size_t
size
=
mProfile
.
Length
(
)
;
if
(
mAdditionalInformation
.
isSome
(
)
)
{
size
+
=
mAdditionalInformation
-
>
SizeOf
(
)
;
}
return
size
;
}
nsCString
mProfile
;
Maybe
<
ProfileGenerationAdditionalInformation
>
mAdditionalInformation
;
}
;
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
ProfileGenerationAdditionalInformation
>
{
typedef
mozilla
:
:
ProfileGenerationAdditionalInformation
paramType
;
static
void
Write
(
MessageWriter
*
aWriter
const
paramType
&
aParam
)
;
static
bool
Read
(
MessageReader
*
aReader
paramType
*
aResult
)
;
}
;
}
#
endif
