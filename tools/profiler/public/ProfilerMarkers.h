#
ifndef
ProfilerMarkers_h
#
define
ProfilerMarkers_h
#
include
"
mozilla
/
BaseProfilerMarkers
.
h
"
#
include
"
mozilla
/
ProfilerMarkersDetail
.
h
"
#
ifndef
MOZ_GECKO_PROFILER
#
define
PROFILER_MARKER_UNTYPED
(
markerName
categoryName
.
.
.
)
#
define
PROFILER_MARKER
(
markerName
categoryName
options
MarkerType
.
.
.
)
#
define
PROFILER_MARKER_TEXT
(
markerName
categoryName
options
text
)
#
define
AUTO_PROFILER_MARKER_TEXT
(
markerName
categoryName
options
text
)
#
define
AUTO_PROFILER_TRACING_MARKER
(
categoryString
markerName
categoryPair
)
#
define
AUTO_PROFILER_TRACING_MARKER_DOCSHELL
(
categoryString
markerName
\
categoryPair
docShell
)
#
else
namespace
mozilla
{
class
ProfileChunkedBuffer
;
}
bool
profiler_can_accept_markers
(
)
;
bool
profiler_capture_backtrace_into
(
mozilla
:
:
ProfileChunkedBuffer
&
aChunkedBuffer
mozilla
:
:
StackCaptureOptions
aCaptureOptions
)
;
namespace
geckoprofiler
:
:
category
{
using
namespace
:
:
mozilla
:
:
baseprofiler
:
:
category
;
}
template
<
typename
MarkerType
typename
.
.
.
PayloadArguments
>
mozilla
:
:
ProfileBufferBlockIndex
AddMarkerToBuffer
(
mozilla
:
:
ProfileChunkedBuffer
&
aBuffer
const
mozilla
:
:
ProfilerString8View
&
aName
const
mozilla
:
:
MarkerCategory
&
aCategory
mozilla
:
:
MarkerOptions
&
&
aOptions
MarkerType
aMarkerType
const
PayloadArguments
&
.
.
.
aPayloadArguments
)
{
mozilla
:
:
Unused
<
<
aMarkerType
;
return
mozilla
:
:
base_profiler_markers_detail
:
:
AddMarkerToBuffer
<
MarkerType
>
(
aBuffer
aName
aCategory
std
:
:
move
(
aOptions
)
:
:
profiler_capture_backtrace_into
aPayloadArguments
.
.
.
)
;
}
inline
mozilla
:
:
ProfileBufferBlockIndex
AddMarkerToBuffer
(
mozilla
:
:
ProfileChunkedBuffer
&
aBuffer
const
mozilla
:
:
ProfilerString8View
&
aName
const
mozilla
:
:
MarkerCategory
&
aCategory
mozilla
:
:
MarkerOptions
&
&
aOptions
=
{
}
)
{
return
AddMarkerToBuffer
(
aBuffer
aName
aCategory
std
:
:
move
(
aOptions
)
mozilla
:
:
baseprofiler
:
:
markers
:
:
NoPayload
{
}
)
;
}
template
<
typename
MarkerType
typename
.
.
.
PayloadArguments
>
mozilla
:
:
ProfileBufferBlockIndex
profiler_add_marker
(
const
mozilla
:
:
ProfilerString8View
&
aName
const
mozilla
:
:
MarkerCategory
&
aCategory
mozilla
:
:
MarkerOptions
&
&
aOptions
MarkerType
aMarkerType
const
PayloadArguments
&
.
.
.
aPayloadArguments
)
{
if
(
!
profiler_can_accept_markers
(
)
)
{
return
{
}
;
}
return
:
:
AddMarkerToBuffer
(
profiler_markers_detail
:
:
CachedCoreBuffer
(
)
aName
aCategory
std
:
:
move
(
aOptions
)
aMarkerType
aPayloadArguments
.
.
.
)
;
}
inline
mozilla
:
:
ProfileBufferBlockIndex
profiler_add_marker
(
const
mozilla
:
:
ProfilerString8View
&
aName
const
mozilla
:
:
MarkerCategory
&
aCategory
mozilla
:
:
MarkerOptions
&
&
aOptions
=
{
}
)
{
return
profiler_add_marker
(
aName
aCategory
std
:
:
move
(
aOptions
)
mozilla
:
:
baseprofiler
:
:
markers
:
:
NoPayload
{
}
)
;
}
#
define
PROFILER_MARKER_UNTYPED
(
markerName
categoryName
.
.
.
)
\
do
{
\
AUTO_PROFILER_STATS
(
PROFILER_MARKER_UNTYPED
)
;
\
:
:
profiler_add_marker
(
\
markerName
:
:
geckoprofiler
:
:
category
:
:
categoryName
#
#
__VA_ARGS__
)
;
\
}
while
(
false
)
#
define
PROFILER_MARKER
(
markerName
categoryName
options
MarkerType
.
.
.
)
\
do
{
\
AUTO_PROFILER_STATS
(
PROFILER_MARKER_with_
#
#
MarkerType
)
;
\
:
:
profiler_add_marker
(
\
markerName
:
:
geckoprofiler
:
:
category
:
:
categoryName
options
\
:
:
geckoprofiler
:
:
markers
:
:
MarkerType
{
}
#
#
__VA_ARGS__
)
;
\
}
while
(
false
)
namespace
geckoprofiler
:
:
markers
{
using
TextMarker
=
:
:
mozilla
:
:
baseprofiler
:
:
markers
:
:
TextMarker
;
using
Tracing
=
mozilla
:
:
baseprofiler
:
:
markers
:
:
Tracing
;
}
#
define
PROFILER_MARKER_TEXT
(
markerName
categoryName
options
text
)
\
do
{
\
AUTO_PROFILER_STATS
(
PROFILER_MARKER_TEXT
)
;
\
:
:
profiler_add_marker
(
markerName
\
:
:
geckoprofiler
:
:
category
:
:
categoryName
options
\
:
:
geckoprofiler
:
:
markers
:
:
TextMarker
{
}
text
)
;
\
}
while
(
false
)
class
MOZ_RAII
AutoProfilerTextMarker
{
public
:
AutoProfilerTextMarker
(
const
char
*
aMarkerName
const
mozilla
:
:
MarkerCategory
&
aCategory
mozilla
:
:
MarkerOptions
&
&
aOptions
const
nsACString
&
aText
)
:
mMarkerName
(
aMarkerName
)
mCategory
(
aCategory
)
mOptions
(
std
:
:
move
(
aOptions
)
)
mText
(
aText
)
{
MOZ_ASSERT
(
mOptions
.
Timing
(
)
.
EndTime
(
)
.
IsNull
(
)
"
AutoProfilerTextMarker
options
shouldn
'
t
have
an
end
time
"
)
;
if
(
mOptions
.
Timing
(
)
.
StartTime
(
)
.
IsNull
(
)
)
{
mOptions
.
Set
(
mozilla
:
:
MarkerTiming
:
:
InstantNow
(
)
)
;
}
}
~
AutoProfilerTextMarker
(
)
{
mOptions
.
TimingRef
(
)
.
SetIntervalEnd
(
)
;
AUTO_PROFILER_STATS
(
AUTO_PROFILER_MARKER_TEXT
)
;
profiler_add_marker
(
mozilla
:
:
ProfilerString8View
:
:
WrapNullTerminatedString
(
mMarkerName
)
mCategory
std
:
:
move
(
mOptions
)
geckoprofiler
:
:
markers
:
:
TextMarker
{
}
mText
)
;
}
protected
:
const
char
*
mMarkerName
;
mozilla
:
:
MarkerCategory
mCategory
;
mozilla
:
:
MarkerOptions
mOptions
;
nsCString
mText
;
}
;
#
define
AUTO_PROFILER_MARKER_TEXT
(
markerName
categoryName
options
text
)
\
AutoProfilerTextMarker
PROFILER_RAII
(
\
markerName
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
categoryName
options
\
text
)
class
MOZ_RAII
AutoProfilerTracing
{
public
:
AutoProfilerTracing
(
const
char
*
aCategoryString
const
char
*
aMarkerName
mozilla
:
:
MarkerCategory
aCategoryPair
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
)
:
mCategoryString
(
aCategoryString
)
mMarkerName
(
aMarkerName
)
mCategoryPair
(
aCategoryPair
)
mInnerWindowID
(
aInnerWindowID
)
{
profiler_add_marker
(
mozilla
:
:
ProfilerString8View
:
:
WrapNullTerminatedString
(
mMarkerName
)
mCategoryPair
{
mozilla
:
:
MarkerTiming
:
:
IntervalStart
(
)
mozilla
:
:
MarkerInnerWindowId
(
mInnerWindowID
)
}
geckoprofiler
:
:
markers
:
:
Tracing
{
}
mozilla
:
:
ProfilerString8View
:
:
WrapNullTerminatedString
(
mCategoryString
)
)
;
}
AutoProfilerTracing
(
const
char
*
aCategoryString
const
char
*
aMarkerName
mozilla
:
:
MarkerCategory
aCategoryPair
mozilla
:
:
UniquePtr
<
mozilla
:
:
ProfileChunkedBuffer
>
aBacktrace
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
)
:
mCategoryString
(
aCategoryString
)
mMarkerName
(
aMarkerName
)
mCategoryPair
(
aCategoryPair
)
mInnerWindowID
(
aInnerWindowID
)
{
profiler_add_marker
(
mozilla
:
:
ProfilerString8View
:
:
WrapNullTerminatedString
(
mMarkerName
)
mCategoryPair
{
mozilla
:
:
MarkerTiming
:
:
IntervalStart
(
)
mozilla
:
:
MarkerInnerWindowId
(
mInnerWindowID
)
mozilla
:
:
MarkerStack
:
:
TakeBacktrace
(
std
:
:
move
(
aBacktrace
)
)
}
geckoprofiler
:
:
markers
:
:
Tracing
{
}
mozilla
:
:
ProfilerString8View
:
:
WrapNullTerminatedString
(
mCategoryString
)
)
;
}
~
AutoProfilerTracing
(
)
{
profiler_add_marker
(
mozilla
:
:
ProfilerString8View
:
:
WrapNullTerminatedString
(
mMarkerName
)
mCategoryPair
{
mozilla
:
:
MarkerTiming
:
:
IntervalEnd
(
)
mozilla
:
:
MarkerInnerWindowId
(
mInnerWindowID
)
}
geckoprofiler
:
:
markers
:
:
Tracing
{
}
mozilla
:
:
ProfilerString8View
:
:
WrapNullTerminatedString
(
mCategoryString
)
)
;
}
protected
:
const
char
*
mCategoryString
;
const
char
*
mMarkerName
;
const
mozilla
:
:
MarkerCategory
mCategoryPair
;
const
mozilla
:
:
Maybe
<
uint64_t
>
mInnerWindowID
;
}
;
#
define
AUTO_PROFILER_TRACING_MARKER
(
categoryString
markerName
\
categoryPair
)
\
AutoProfilerTracing
PROFILER_RAII
(
categoryString
markerName
\
geckoprofiler
:
:
category
:
:
categoryPair
\
mozilla
:
:
Nothing
(
)
)
#
define
AUTO_PROFILER_TRACING_MARKER_DOCSHELL
(
categoryString
markerName
\
categoryPair
docShell
)
\
AutoProfilerTracing
PROFILER_RAII
(
\
categoryString
markerName
geckoprofiler
:
:
category
:
:
categoryPair
\
profiler_get_inner_window_id_from_docshell
(
docShell
)
)
extern
template
mozilla
:
:
ProfileBufferBlockIndex
AddMarkerToBuffer
(
mozilla
:
:
ProfileChunkedBuffer
&
const
mozilla
:
:
ProfilerString8View
&
const
mozilla
:
:
MarkerCategory
&
mozilla
:
:
MarkerOptions
&
&
mozilla
:
:
baseprofiler
:
:
markers
:
:
NoPayload
)
;
extern
template
mozilla
:
:
ProfileBufferBlockIndex
AddMarkerToBuffer
(
mozilla
:
:
ProfileChunkedBuffer
&
const
mozilla
:
:
ProfilerString8View
&
const
mozilla
:
:
MarkerCategory
&
mozilla
:
:
MarkerOptions
&
&
mozilla
:
:
baseprofiler
:
:
markers
:
:
TextMarker
const
std
:
:
string
&
)
;
extern
template
mozilla
:
:
ProfileBufferBlockIndex
profiler_add_marker
(
const
mozilla
:
:
ProfilerString8View
&
const
mozilla
:
:
MarkerCategory
&
mozilla
:
:
MarkerOptions
&
&
mozilla
:
:
baseprofiler
:
:
markers
:
:
TextMarker
const
std
:
:
string
&
)
;
extern
template
mozilla
:
:
ProfileBufferBlockIndex
profiler_add_marker
(
const
mozilla
:
:
ProfilerString8View
&
const
mozilla
:
:
MarkerCategory
&
mozilla
:
:
MarkerOptions
&
&
mozilla
:
:
baseprofiler
:
:
markers
:
:
TextMarker
const
nsCString
&
)
;
extern
template
mozilla
:
:
ProfileBufferBlockIndex
profiler_add_marker
(
const
mozilla
:
:
ProfilerString8View
&
const
mozilla
:
:
MarkerCategory
&
mozilla
:
:
MarkerOptions
&
&
mozilla
:
:
baseprofiler
:
:
markers
:
:
Tracing
const
mozilla
:
:
ProfilerString8View
&
)
;
#
endif
#
endif
