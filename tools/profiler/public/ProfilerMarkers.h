#
ifndef
ProfilerMarkers_h
#
define
ProfilerMarkers_h
#
include
"
mozilla
/
BaseProfilerMarkers
.
h
"
#
include
"
mozilla
/
ProfilerMarkersDetail
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
ifndef
MOZ_GECKO_PROFILER
#
define
PROFILER_MARKER_UNTYPED
(
markerName
categoryName
.
.
.
)
#
define
PROFILER_MARKER
(
markerName
categoryName
options
MarkerType
.
.
.
)
#
define
PROFILER_MARKER_TEXT
(
markerName
categoryName
options
text
)
#
define
AUTO_PROFILER_MARKER_TEXT
(
markerName
categoryName
options
text
)
#
else
namespace
geckoprofiler
:
:
category
{
using
namespace
:
:
mozilla
:
:
baseprofiler
:
:
category
;
}
template
<
typename
MarkerType
typename
.
.
.
Ts
>
mozilla
:
:
ProfileBufferBlockIndex
AddMarkerToBuffer
(
mozilla
:
:
ProfileChunkedBuffer
&
aBuffer
const
mozilla
:
:
ProfilerString8View
&
aName
const
mozilla
:
:
MarkerCategory
&
aCategory
mozilla
:
:
MarkerOptions
&
&
aOptions
const
Ts
&
.
.
.
aTs
)
{
return
mozilla
:
:
base_profiler_markers_detail
:
:
AddMarkerToBuffer
<
MarkerType
>
(
aBuffer
aName
aCategory
std
:
:
move
(
aOptions
)
:
:
profiler_capture_backtrace_into
aTs
.
.
.
)
;
}
inline
mozilla
:
:
ProfileBufferBlockIndex
AddMarkerToBuffer
(
mozilla
:
:
ProfileChunkedBuffer
&
aBuffer
const
mozilla
:
:
ProfilerString8View
&
aName
const
mozilla
:
:
MarkerCategory
&
aCategory
mozilla
:
:
MarkerOptions
&
&
aOptions
=
{
}
)
{
return
AddMarkerToBuffer
<
mozilla
:
:
baseprofiler
:
:
markers
:
:
NoPayload
>
(
aBuffer
aName
aCategory
std
:
:
move
(
aOptions
)
)
;
}
template
<
typename
MarkerType
typename
.
.
.
Ts
>
mozilla
:
:
ProfileBufferBlockIndex
profiler_add_marker
(
const
mozilla
:
:
ProfilerString8View
&
aName
const
mozilla
:
:
MarkerCategory
&
aCategory
mozilla
:
:
MarkerOptions
&
&
aOptions
const
Ts
&
.
.
.
aTs
)
{
if
(
!
profiler_can_accept_markers
(
)
)
{
return
{
}
;
}
return
:
:
AddMarkerToBuffer
<
MarkerType
>
(
profiler_markers_detail
:
:
CachedCoreBuffer
(
)
aName
aCategory
std
:
:
move
(
aOptions
)
aTs
.
.
.
)
;
}
inline
mozilla
:
:
ProfileBufferBlockIndex
profiler_add_marker
(
const
mozilla
:
:
ProfilerString8View
&
aName
const
mozilla
:
:
MarkerCategory
&
aCategory
mozilla
:
:
MarkerOptions
&
&
aOptions
=
{
}
)
{
return
profiler_add_marker
<
mozilla
:
:
baseprofiler
:
:
markers
:
:
NoPayload
>
(
aName
aCategory
std
:
:
move
(
aOptions
)
)
;
}
#
define
PROFILER_MARKER_UNTYPED
(
markerName
categoryName
.
.
.
)
\
do
{
\
AUTO_PROFILER_STATS
(
PROFILER_MARKER_UNTYPED
)
;
\
:
:
profiler_add_marker
(
\
markerName
:
:
geckoprofiler
:
:
category
:
:
categoryName
#
#
__VA_ARGS__
)
;
\
}
while
(
false
)
#
define
PROFILER_MARKER
(
markerName
categoryName
options
MarkerType
.
.
.
)
\
do
{
\
AUTO_PROFILER_STATS
(
PROFILER_MARKER_with_
#
#
MarkerType
)
;
\
:
:
profiler_add_marker
<
:
:
geckoprofiler
:
:
markers
:
:
MarkerType
>
(
\
markerName
:
:
geckoprofiler
:
:
category
:
:
categoryName
options
\
#
#
__VA_ARGS__
)
;
\
}
while
(
false
)
namespace
geckoprofiler
:
:
markers
{
using
Text
=
:
:
mozilla
:
:
baseprofiler
:
:
markers
:
:
Text
;
}
#
define
PROFILER_MARKER_TEXT
(
markerName
categoryName
options
text
)
\
do
{
\
AUTO_PROFILER_STATS
(
PROFILER_MARKER_TEXT
)
;
\
:
:
profiler_add_marker
<
:
:
geckoprofiler
:
:
markers
:
:
Text
>
(
\
markerName
:
:
geckoprofiler
:
:
category
:
:
categoryName
options
text
)
;
\
}
while
(
false
)
class
MOZ_RAII
AutoProfilerTextMarker
{
public
:
AutoProfilerTextMarker
(
const
char
*
aMarkerName
const
mozilla
:
:
MarkerCategory
&
aCategory
mozilla
:
:
MarkerOptions
&
&
aOptions
const
nsACString
&
aText
)
:
mMarkerName
(
aMarkerName
)
mCategory
(
aCategory
)
mOptions
(
std
:
:
move
(
aOptions
)
)
mText
(
aText
)
{
MOZ_ASSERT
(
mOptions
.
Timing
(
)
.
EndTime
(
)
.
IsNull
(
)
"
AutoProfilerTextMarker
options
shouldn
'
t
have
an
end
time
"
)
;
if
(
mOptions
.
Timing
(
)
.
StartTime
(
)
.
IsNull
(
)
)
{
mOptions
.
Set
(
mozilla
:
:
MarkerTiming
:
:
InstantNow
(
)
)
;
}
}
~
AutoProfilerTextMarker
(
)
{
mOptions
.
TimingRef
(
)
.
SetIntervalEnd
(
)
;
AUTO_PROFILER_STATS
(
AUTO_PROFILER_MARKER_TEXT
)
;
profiler_add_marker
<
geckoprofiler
:
:
markers
:
:
Text
>
(
mozilla
:
:
ProfilerString8View
:
:
WrapNullTerminatedString
(
mMarkerName
)
mCategory
std
:
:
move
(
mOptions
)
mText
)
;
}
protected
:
const
char
*
mMarkerName
;
mozilla
:
:
MarkerCategory
mCategory
;
mozilla
:
:
MarkerOptions
mOptions
;
nsCString
mText
;
}
;
#
define
AUTO_PROFILER_MARKER_TEXT
(
markerName
categoryName
options
text
)
\
AutoProfilerTextMarker
PROFILER_RAII
(
\
markerName
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
categoryName
options
\
text
)
#
endif
#
endif
