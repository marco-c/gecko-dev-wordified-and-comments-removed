#
ifndef
PROFILER_MARKERS_H
#
define
PROFILER_MARKERS_H
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
gfxASurface
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Layer
;
}
}
class
SpliceableJSONWriter
;
class
UniqueStacks
;
class
ProfilerMarkerPayload
{
public
:
explicit
ProfilerMarkerPayload
(
UniqueProfilerBacktrace
aStack
=
nullptr
)
;
ProfilerMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
UniqueProfilerBacktrace
aStack
=
nullptr
)
;
virtual
~
ProfilerMarkerPayload
(
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
=
0
;
mozilla
:
:
TimeStamp
GetStartTime
(
)
const
{
return
mStartTime
;
}
protected
:
void
streamCommonProps
(
const
char
*
aMarkerType
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
;
void
SetStack
(
UniqueProfilerBacktrace
aStack
)
{
mStack
=
mozilla
:
:
Move
(
aStack
)
;
}
private
:
mozilla
:
:
TimeStamp
mStartTime
;
mozilla
:
:
TimeStamp
mEndTime
;
UniqueProfilerBacktrace
mStack
;
}
;
class
ProfilerMarkerTracing
:
public
ProfilerMarkerPayload
{
public
:
ProfilerMarkerTracing
(
const
char
*
aCategory
TracingKind
aKind
)
;
ProfilerMarkerTracing
(
const
char
*
aCategory
TracingKind
aKind
UniqueProfilerBacktrace
aCause
)
;
const
char
*
GetCategory
(
)
const
{
return
mCategory
;
}
TracingKind
GetKind
(
)
const
{
return
mKind
;
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
const
char
*
mCategory
;
TracingKind
mKind
;
}
;
class
ProfilerMarkerImagePayload
:
public
ProfilerMarkerPayload
{
public
:
explicit
ProfilerMarkerImagePayload
(
gfxASurface
*
aImg
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
RefPtr
<
gfxASurface
>
mImg
;
}
;
class
IOMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
IOMarkerPayload
(
const
char
*
aSource
const
char
*
aFilename
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
UniqueProfilerBacktrace
aStack
)
;
~
IOMarkerPayload
(
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
const
char
*
mSource
;
char
*
mFilename
;
}
;
class
DOMEventMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
DOMEventMarkerPayload
(
const
nsAString
&
aType
uint16_t
aPhase
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
;
~
DOMEventMarkerPayload
(
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
nsString
mType
;
uint16_t
mPhase
;
}
;
class
UserTimingMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
UserTimingMarkerPayload
(
const
nsAString
&
aName
const
mozilla
:
:
TimeStamp
&
aStartTime
)
;
UserTimingMarkerPayload
(
const
nsAString
&
aName
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
;
~
UserTimingMarkerPayload
(
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
const
char
*
mEntryType
;
nsString
mName
;
}
;
class
LayerTranslationPayload
:
public
ProfilerMarkerPayload
{
public
:
LayerTranslationPayload
(
mozilla
:
:
layers
:
:
Layer
*
aLayer
mozilla
:
:
gfx
:
:
Point
aPoint
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
mozilla
:
:
layers
:
:
Layer
*
mLayer
;
mozilla
:
:
gfx
:
:
Point
mPoint
;
}
;
#
include
"
Units
.
h
"
class
TouchDataPayload
:
public
ProfilerMarkerPayload
{
public
:
explicit
TouchDataPayload
(
const
mozilla
:
:
ScreenIntPoint
&
aPoint
)
;
virtual
~
TouchDataPayload
(
)
{
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
mozilla
:
:
ScreenIntPoint
mPoint
;
}
;
class
VsyncPayload
:
public
ProfilerMarkerPayload
{
public
:
explicit
VsyncPayload
(
mozilla
:
:
TimeStamp
aVsyncTimestamp
)
;
virtual
~
VsyncPayload
(
)
{
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
mozilla
:
:
TimeStamp
mVsyncTimestamp
;
}
;
class
GPUMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
GPUMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aCpuTimeStart
const
mozilla
:
:
TimeStamp
&
aCpuTimeEnd
uint64_t
aGpuTimeStart
uint64_t
aGpuTimeEnd
)
;
~
GPUMarkerPayload
(
)
{
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
mozilla
:
:
TimeStamp
mCpuTimeStart
;
mozilla
:
:
TimeStamp
mCpuTimeEnd
;
uint64_t
mGpuTimeStart
;
uint64_t
mGpuTimeEnd
;
}
;
#
endif
