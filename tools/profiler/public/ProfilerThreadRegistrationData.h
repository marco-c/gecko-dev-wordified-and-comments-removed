#
ifndef
ProfilerThreadRegistrationData_h
#
define
ProfilerThreadRegistrationData_h
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
ProfilerThreadPlatformData
.
h
"
#
include
"
mozilla
/
ProfilerThreadRegistrationInfo
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIThread
.
h
"
struct
JSContext
;
namespace
mozilla
:
:
profiler
{
class
ThreadRegistrationData
{
public
:
protected
:
ThreadRegistrationData
(
const
char
*
aName
const
void
*
aStackTop
)
;
ThreadRegistrationInfo
mInfo
;
ProfilingStack
mProfilingStack
;
PlatformData
mPlatformData
;
const
void
*
const
mStackTop
;
nsCOMPtr
<
nsIThread
>
mThread
;
JSContext
*
mJSContext
=
nullptr
;
enum
{
INACTIVE
=
0
ACTIVE_REQUESTED
=
1
ACTIVE
=
2
INACTIVE_REQUESTED
=
3
}
mJSSampling
=
INACTIVE
;
uint32_t
mJSFlags
=
0
;
enum
class
JSInstrumentationFlags
{
StackSampling
=
0x1
TraceLogging
=
0x2
Allocations
=
0x4
}
;
[
[
nodiscard
]
]
bool
JSTracerEnabled
(
)
const
{
return
mJSFlags
&
uint32_t
(
JSInstrumentationFlags
:
:
TraceLogging
)
;
}
[
[
nodiscard
]
]
bool
JSAllocationsEnabled
(
)
const
{
return
mJSFlags
&
uint32_t
(
JSInstrumentationFlags
:
:
Allocations
)
;
}
Atomic
<
bool
MemoryOrdering
:
:
Relaxed
>
mIsBeingProfiled
{
false
}
;
static
const
int
AWAKE
=
0
;
static
const
int
SLEEPING_NOT_OBSERVED
=
1
;
static
const
int
SLEEPING_OBSERVED
=
2
;
Atomic
<
int
>
mSleep
{
AWAKE
}
;
}
;
}
#
endif
