#
ifndef
ProfilerBindings_h
#
define
ProfilerBindings_h
#
include
<
stdint
.
h
>
namespace
mozilla
{
class
AutoProfilerLabel
;
class
MarkerTiming
;
class
TimeStamp
;
}
namespace
JS
{
enum
class
ProfilingCategoryPair
:
uint32_t
;
}
extern
"
C
"
{
void
gecko_profiler_register_thread
(
const
char
*
aName
)
;
void
gecko_profiler_unregister_thread
(
)
;
void
gecko_profiler_construct_label
(
mozilla
:
:
AutoProfilerLabel
*
aAutoLabel
JS
:
:
ProfilingCategoryPair
aCategoryPair
)
;
void
gecko_profiler_destruct_label
(
mozilla
:
:
AutoProfilerLabel
*
aAutoLabel
)
;
void
gecko_profiler_construct_timestamp_now
(
mozilla
:
:
TimeStamp
*
aTimeStamp
)
;
void
gecko_profiler_destruct_timestamp
(
mozilla
:
:
TimeStamp
*
aTimeStamp
)
;
void
gecko_profiler_construct_marker_timing_instant_at
(
mozilla
:
:
MarkerTiming
*
aMarkerTiming
const
mozilla
:
:
TimeStamp
*
aTime
)
;
void
gecko_profiler_construct_marker_timing_instant_now
(
mozilla
:
:
MarkerTiming
*
aMarkerTiming
)
;
void
gecko_profiler_construct_marker_timing_interval
(
mozilla
:
:
MarkerTiming
*
aMarkerTiming
const
mozilla
:
:
TimeStamp
*
aStartTime
const
mozilla
:
:
TimeStamp
*
aEndTime
)
;
void
gecko_profiler_construct_marker_timing_interval_until_now_from
(
mozilla
:
:
MarkerTiming
*
aMarkerTiming
const
mozilla
:
:
TimeStamp
*
aStartTime
)
;
void
gecko_profiler_construct_marker_timing_interval_start
(
mozilla
:
:
MarkerTiming
*
aMarkerTiming
const
mozilla
:
:
TimeStamp
*
aTime
)
;
void
gecko_profiler_construct_marker_timing_interval_end
(
mozilla
:
:
MarkerTiming
*
aMarkerTiming
const
mozilla
:
:
TimeStamp
*
aTime
)
;
void
gecko_profiler_destruct_marker_timing
(
mozilla
:
:
MarkerTiming
*
aMarkerTiming
)
;
}
#
endif
