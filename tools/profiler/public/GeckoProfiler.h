#
ifndef
GeckoProfiler_h
#
define
GeckoProfiler_h
#
ifndef
MOZ_GECKO_PROFILER
#
define
AUTO_PROFILER_INIT
#
define
PROFILER_REGISTER_THREAD
(
name
)
#
define
PROFILER_UNREGISTER_THREAD
(
)
#
define
AUTO_PROFILER_REGISTER_THREAD
(
name
)
#
define
AUTO_PROFILER_THREAD_SLEEP
#
define
AUTO_PROFILER_THREAD_WAKE
#
define
PROFILER_JS_INTERRUPT_CALLBACK
(
)
#
define
PROFILER_SET_JS_CONTEXT
(
cx
)
#
define
PROFILER_CLEAR_JS_CONTEXT
(
)
#
define
AUTO_PROFILER_LABEL
(
label
category
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR
(
label
category
cStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
label
category
nsCStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
label
category
nsStr
)
#
define
PROFILER_ADD_MARKER
(
markerName
)
#
define
PROFILER_TRACING
(
category
markerName
kind
)
#
define
AUTO_PROFILER_TRACING
(
category
markerName
)
#
else
#
include
<
functional
>
#
include
<
signal
.
h
>
#
include
<
stdarg
.
h
>
#
include
<
stdint
.
h
>
#
include
<
stdlib
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
nscore
.
h
"
#
ifdef
min
#
undef
min
#
endif
class
ProfilerBacktrace
;
class
ProfilerMarkerPayload
;
class
SpliceableJSONWriter
;
namespace
mozilla
{
class
MallocAllocPolicy
;
template
<
class
T
size_t
MinInlineCapacity
class
AllocPolicy
>
class
Vector
;
class
TimeStamp
;
}
#
define
PROFILER_RAII_PASTE
(
id
line
)
id
#
#
line
#
define
PROFILER_RAII_EXPAND
(
id
line
)
PROFILER_RAII_PASTE
(
id
line
)
#
define
PROFILER_RAII
PROFILER_RAII_EXPAND
(
raiiObject
__LINE__
)
#
define
PROFILER_FOR_EACH_FEATURE
(
macro
)
\
macro
(
0
"
java
"
Java
)
\
\
/
*
Get
the
JS
engine
to
emit
pseudostack
entries
in
prologues
/
epilogues
*
/
\
macro
(
1
"
js
"
JS
)
\
\
/
*
Include
the
C
+
+
leaf
node
if
not
stackwalking
.
*
/
\
/
*
The
DevTools
profiler
doesn
'
t
want
the
native
addresses
.
*
/
\
macro
(
2
"
leaf
"
Leaf
)
\
\
/
*
Add
main
thread
I
/
O
to
the
profile
.
*
/
\
macro
(
3
"
mainthreadio
"
MainThreadIO
)
\
\
/
*
Add
memory
measurements
(
e
.
g
.
RSS
)
.
*
/
\
macro
(
4
"
memory
"
Memory
)
\
\
/
*
Do
not
include
user
-
identifiable
information
.
*
/
\
macro
(
5
"
privacy
"
Privacy
)
\
\
/
*
Restyle
profiling
.
*
/
\
macro
(
6
"
restyle
"
Restyle
)
\
\
/
*
Walk
the
C
+
+
stack
.
Not
available
on
all
platforms
.
*
/
\
macro
(
7
"
stackwalk
"
StackWalk
)
\
\
/
*
Start
profiling
with
feature
TaskTracer
.
*
/
\
macro
(
8
"
tasktracer
"
TaskTracer
)
\
\
/
*
Profile
the
registered
secondary
threads
.
*
/
\
macro
(
9
"
threads
"
Threads
)
struct
ProfilerFeature
{
#
define
DECLARE
(
n_
str_
Name_
)
\
static
const
uint32_t
Name_
=
(
1u
<
<
n_
)
;
\
static
bool
Has
#
#
Name_
(
uint32_t
aFeatures
)
{
return
aFeatures
&
Name_
;
}
\
static
void
Set
#
#
Name_
(
uint32_t
&
aFeatures
)
{
aFeatures
|
=
Name_
;
}
\
static
void
Clear
#
#
Name_
(
uint32_t
&
aFeatures
)
{
aFeatures
&
=
~
Name_
;
}
PROFILER_FOR_EACH_FEATURE
(
DECLARE
)
#
undef
DECLARE
}
;
#
if
!
defined
(
ARCH_ARMV6
)
#
define
PROFILER_DEFAULT_ENTRIES
1000000
#
else
#
define
PROFILER_DEFAULT_ENTRIES
100000
#
endif
#
define
PROFILER_DEFAULT_INTERVAL
1
void
profiler_init
(
void
*
stackTop
)
;
#
define
AUTO_PROFILER_INIT
\
mozilla
:
:
AutoProfilerInit
PROFILER_RAII
void
profiler_shutdown
(
)
;
void
profiler_start
(
int
aEntries
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
)
;
void
profiler_stop
(
)
;
void
profiler_ensure_started
(
int
aEntries
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
)
;
#
define
PROFILER_REGISTER_THREAD
(
name
)
\
do
{
char
stackTop
;
profiler_register_thread
(
name
&
stackTop
)
;
}
while
(
0
)
#
define
PROFILER_UNREGISTER_THREAD
(
)
\
profiler_unregister_thread
(
)
void
profiler_register_thread
(
const
char
*
name
void
*
guessStackTop
)
;
void
profiler_unregister_thread
(
)
;
#
define
AUTO_PROFILER_REGISTER_THREAD
(
name
)
\
mozilla
:
:
AutoProfilerRegisterThread
PROFILER_RAII
(
name
)
void
profiler_pause
(
)
;
void
profiler_resume
(
)
;
void
profiler_thread_sleep
(
)
;
void
profiler_thread_wake
(
)
;
#
define
AUTO_PROFILER_THREAD_SLEEP
\
mozilla
:
:
AutoProfilerThreadSleep
PROFILER_RAII
#
define
AUTO_PROFILER_THREAD_WAKE
\
mozilla
:
:
AutoProfilerThreadWake
PROFILER_RAII
#
define
PROFILER_JS_INTERRUPT_CALLBACK
(
)
profiler_js_interrupt_callback
(
)
void
profiler_js_interrupt_callback
(
)
;
#
define
PROFILER_SET_JS_CONTEXT
(
cx
)
profiler_set_js_context
(
cx
)
#
define
PROFILER_CLEAR_JS_CONTEXT
(
)
profiler_clear_js_context
(
)
void
profiler_set_js_context
(
JSContext
*
aCx
)
;
void
profiler_clear_js_context
(
)
;
bool
profiler_is_active
(
)
;
bool
profiler_is_paused
(
)
;
bool
profiler_thread_is_sleeping
(
)
;
uint32_t
profiler_get_available_features
(
)
;
bool
profiler_feature_active
(
uint32_t
aFeature
)
;
void
profiler_get_start_params
(
int
*
aEntrySize
double
*
aInterval
uint32_t
*
aFeatures
mozilla
:
:
Vector
<
const
char
*
0
mozilla
:
:
MallocAllocPolicy
>
*
aFilters
)
;
double
profiler_time
(
)
;
int
profiler_current_thread_id
(
)
;
class
ProfilerStackCollector
{
public
:
virtual
mozilla
:
:
Maybe
<
uint32_t
>
Generation
(
)
{
return
mozilla
:
:
Nothing
(
)
;
}
virtual
void
SetIsMainThread
(
)
{
}
virtual
void
CollectNativeLeafAddr
(
void
*
aAddr
)
=
0
;
virtual
void
CollectJitReturnAddr
(
void
*
aAddr
)
=
0
;
virtual
void
CollectWasmFrame
(
const
char
*
aLabel
)
=
0
;
virtual
void
CollectPseudoEntry
(
const
js
:
:
ProfileEntry
&
aEntry
)
=
0
;
}
;
void
profiler_suspend_and_sample_thread
(
int
aThreadId
uint32_t
aFeatures
ProfilerStackCollector
&
aCollector
bool
aSampleNative
=
true
)
;
struct
ProfilerBacktraceDestructor
{
void
operator
(
)
(
ProfilerBacktrace
*
)
;
}
;
using
UniqueProfilerBacktrace
=
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
ProfilerBacktraceDestructor
>
;
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
;
void
profiler_get_buffer_info_helper
(
uint32_t
*
aCurrentPosition
uint32_t
*
aEntries
uint32_t
*
aGeneration
)
;
static
inline
void
profiler_get_buffer_info
(
uint32_t
*
aCurrentPosition
uint32_t
*
aEntries
uint32_t
*
aGeneration
)
{
*
aCurrentPosition
=
0
;
*
aEntries
=
0
;
*
aGeneration
=
0
;
profiler_get_buffer_info_helper
(
aCurrentPosition
aEntries
aGeneration
)
;
}
PseudoStack
*
profiler_get_pseudo_stack
(
)
;
#
define
AUTO_PROFILER_LABEL
(
label
category
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
label
nullptr
__LINE__
\
js
:
:
ProfileEntry
:
:
Category
:
:
category
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR
(
label
category
cStr
)
\
mozilla
:
:
AutoProfilerLabel
\
PROFILER_RAII
(
label
cStr
__LINE__
js
:
:
ProfileEntry
:
:
Category
:
:
category
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
label
category
nsCStr
)
\
mozilla
:
:
Maybe
<
nsAutoCString
>
autoCStr
;
\
mozilla
:
:
Maybe
<
AutoProfilerLabel
>
raiiObjectNsCString
;
\
if
(
profiler_is_active
(
)
)
{
\
autoCStr
.
emplace
(
nsCStr
)
;
\
raiiObjectNsCString
.
emplace
(
label
autoCStr
-
>
get
(
)
__LINE__
\
js
:
:
ProfileEntry
:
:
Category
:
:
category
)
;
\
}
#
define
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
label
category
nsStr
)
\
mozilla
:
:
Maybe
<
NS_LossyConvertUTF16toASCII
>
asciiStr
;
\
mozilla
:
:
Maybe
<
AutoProfilerLabel
>
raiiObjectLossyNsString
;
\
if
(
profiler_is_active
(
)
)
{
\
asciiStr
.
emplace
(
nsStr
)
;
\
raiiObjectLossyNsString
.
emplace
(
label
asciiStr
-
>
get
(
)
__LINE__
\
js
:
:
ProfileEntry
:
:
Category
:
:
category
)
;
\
}
#
define
PROFILER_ADD_MARKER
(
markerName
)
\
profiler_add_marker
(
markerName
)
void
profiler_add_marker
(
const
char
*
aMarkerName
)
;
void
profiler_add_marker
(
const
char
*
aMarkerName
mozilla
:
:
UniquePtr
<
ProfilerMarkerPayload
>
aPayload
)
;
enum
TracingKind
{
TRACING_EVENT
TRACING_INTERVAL_START
TRACING_INTERVAL_END
}
;
#
define
PROFILER_TRACING
(
category
markerName
kind
)
\
profiler_tracing
(
category
markerName
kind
)
void
profiler_tracing
(
const
char
*
aCategory
const
char
*
aMarkerName
TracingKind
aKind
)
;
void
profiler_tracing
(
const
char
*
aCategory
const
char
*
aMarkerName
TracingKind
aKind
UniqueProfilerBacktrace
aCause
)
;
#
define
AUTO_PROFILER_TRACING
(
category
markerName
)
\
mozilla
:
:
AutoProfilerTracing
PROFILER_RAII
(
category
markerName
)
mozilla
:
:
UniquePtr
<
char
[
]
>
profiler_get_profile
(
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
)
;
bool
profiler_stream_json_for_this_process
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
mozilla
:
:
TimeStamp
*
aOutFirstSampleTime
=
nullptr
)
;
extern
"
C
"
{
void
profiler_save_profile_to_file
(
const
char
*
aFilename
)
;
}
namespace
mozilla
{
class
MOZ_RAII
AutoProfilerInit
{
public
:
explicit
AutoProfilerInit
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_init
(
this
)
;
}
~
AutoProfilerInit
(
)
{
profiler_shutdown
(
)
;
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoProfilerRegisterThread
final
{
public
:
explicit
AutoProfilerRegisterThread
(
const
char
*
aName
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_register_thread
(
aName
this
)
;
}
~
AutoProfilerRegisterThread
(
)
{
profiler_unregister_thread
(
)
;
}
private
:
AutoProfilerRegisterThread
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
AutoProfilerRegisterThread
&
operator
=
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoProfilerThreadSleep
{
public
:
explicit
AutoProfilerThreadSleep
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_thread_sleep
(
)
;
}
~
AutoProfilerThreadSleep
(
)
{
profiler_thread_wake
(
)
;
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoProfilerThreadWake
{
public
:
explicit
AutoProfilerThreadWake
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
:
mIssuedWake
(
profiler_thread_is_sleeping
(
)
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
if
(
mIssuedWake
)
{
profiler_thread_wake
(
)
;
}
}
~
AutoProfilerThreadWake
(
)
{
if
(
mIssuedWake
)
{
MOZ_ASSERT
(
!
profiler_thread_is_sleeping
(
)
)
;
profiler_thread_sleep
(
)
;
}
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
bool
mIssuedWake
;
}
;
class
MOZ_RAII
AutoProfilerLabel
{
public
:
AutoProfilerLabel
(
const
char
*
aLabel
const
char
*
aDynamicString
uint32_t
aLine
js
:
:
ProfileEntry
:
:
Category
aCategory
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mPseudoStack
=
sPseudoStack
.
get
(
)
;
if
(
mPseudoStack
)
{
mPseudoStack
-
>
pushCppFrame
(
aLabel
aDynamicString
this
aLine
js
:
:
ProfileEntry
:
:
Kind
:
:
CPP_NORMAL
aCategory
)
;
}
}
~
AutoProfilerLabel
(
)
{
if
(
mPseudoStack
)
{
mPseudoStack
-
>
pop
(
)
;
}
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
PseudoStack
*
mPseudoStack
;
public
:
static
MOZ_THREAD_LOCAL
(
PseudoStack
*
)
sPseudoStack
;
}
;
class
MOZ_RAII
AutoProfilerTracing
{
public
:
AutoProfilerTracing
(
const
char
*
aCategory
const
char
*
aMarkerName
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mCategory
(
aCategory
)
mMarkerName
(
aMarkerName
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_tracing
(
mCategory
mMarkerName
TRACING_INTERVAL_START
)
;
}
AutoProfilerTracing
(
const
char
*
aCategory
const
char
*
aMarkerName
UniqueProfilerBacktrace
aBacktrace
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mCategory
(
aCategory
)
mMarkerName
(
aMarkerName
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_tracing
(
mCategory
mMarkerName
TRACING_INTERVAL_START
Move
(
aBacktrace
)
)
;
}
~
AutoProfilerTracing
(
)
{
profiler_tracing
(
mCategory
mMarkerName
TRACING_INTERVAL_END
)
;
}
protected
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
const
char
*
mCategory
;
const
char
*
mMarkerName
;
}
;
class
MOZ_RAII
AutoSetProfilerEnvVarsForChildProcess
{
public
:
explicit
AutoSetProfilerEnvVarsForChildProcess
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
;
~
AutoSetProfilerEnvVarsForChildProcess
(
)
;
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
char
mSetEntries
[
64
]
;
char
mSetInterval
[
64
]
;
char
mSetFeaturesBitfield
[
64
]
;
char
mSetFilters
[
1024
]
;
}
;
}
#
endif
#
endif
