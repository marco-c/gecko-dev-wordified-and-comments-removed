#
ifndef
SAMPLER_H
#
define
SAMPLER_H
#
include
<
stdint
.
h
>
#
include
<
stdarg
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
namespace
mozilla
{
class
TimeStamp
;
namespace
dom
{
class
Promise
;
}
}
class
nsIProfilerStartParams
;
enum
TracingMetadata
{
TRACING_DEFAULT
TRACING_INTERVAL_START
TRACING_INTERVAL_END
TRACING_EVENT
TRACING_EVENT_BACKTRACE
TRACING_TIMESTAMP
}
;
class
ProfilerBacktrace
;
struct
ProfilerBacktraceDestructor
{
void
operator
(
)
(
ProfilerBacktrace
*
)
;
}
;
using
UniqueProfilerBacktrace
=
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
ProfilerBacktraceDestructor
>
;
#
if
!
defined
(
MOZ_GECKO_PROFILER
)
#
define
PROFILER_FUNC
(
decl
rv
)
static
inline
decl
{
return
rv
;
}
#
define
PROFILER_FUNC_VOID
(
decl
)
static
inline
void
decl
{
}
#
define
PROFILER_LABEL
(
name_space
info
category
)
do
{
}
while
(
0
)
#
define
PROFILER_LABEL_FUNC
(
category
)
do
{
}
while
(
0
)
#
define
PROFILER_LABEL_PRINTF
(
name_space
info
category
format
.
.
.
)
do
{
}
while
(
0
)
#
define
PROFILER_MARKER
(
info
)
do
{
}
while
(
0
)
#
define
PROFILER_MARKER_PAYLOAD
(
info
payload
)
do
{
mozilla
:
:
UniquePtr
<
ProfilerMarkerPayload
>
payloadDeletor
(
payload
)
;
}
while
(
0
)
#
else
#
define
PROFILER_FUNC
(
decl
rv
)
decl
;
#
define
PROFILER_FUNC_VOID
(
decl
)
void
decl
;
#
define
PROFILER_LABEL
(
name_space
info
category
)
MOZ_PLATFORM_TRACING
(
name_space
"
:
:
"
info
)
mozilla
:
:
SamplerStackFrameRAII
SAMPLER_APPEND_LINE_NUMBER
(
sampler_raii
)
(
name_space
"
:
:
"
info
category
__LINE__
)
#
define
PROFILER_LABEL_FUNC
(
category
)
MOZ_PLATFORM_TRACING
(
SAMPLE_FUNCTION_NAME
)
mozilla
:
:
SamplerStackFrameRAII
SAMPLER_APPEND_LINE_NUMBER
(
sampler_raii
)
(
SAMPLE_FUNCTION_NAME
category
__LINE__
)
#
define
PROFILER_LABEL_PRINTF
(
name_space
info
category
.
.
.
)
MOZ_PLATFORM_TRACING
(
name_space
"
:
:
"
info
)
mozilla
:
:
SamplerStackFramePrintfRAII
SAMPLER_APPEND_LINE_NUMBER
(
sampler_raii
)
(
name_space
"
:
:
"
info
category
__LINE__
__VA_ARGS__
)
#
define
PROFILER_MARKER
(
info
)
profiler_add_marker
(
info
)
#
define
PROFILER_MARKER_PAYLOAD
(
info
payload
)
profiler_add_marker
(
info
payload
)
#
endif
PROFILER_FUNC_VOID
(
profiler_tracing
(
const
char
*
aCategory
const
char
*
aInfo
TracingMetadata
metaData
=
TRACING_DEFAULT
)
)
PROFILER_FUNC_VOID
(
profiler_tracing
(
const
char
*
aCategory
const
char
*
aInfo
UniqueProfilerBacktrace
aCause
TracingMetadata
metaData
=
TRACING_DEFAULT
)
)
PROFILER_FUNC_VOID
(
profiler_init
(
void
*
stackTop
)
)
PROFILER_FUNC_VOID
(
profiler_shutdown
(
)
)
PROFILER_FUNC_VOID
(
profiler_start
(
int
aProfileEntries
double
aInterval
const
char
*
*
aFeatures
uint32_t
aFeatureCount
const
char
*
*
aThreadNameFilters
uint32_t
aFilterCount
)
)
PROFILER_FUNC_VOID
(
profiler_stop
(
)
)
PROFILER_FUNC
(
bool
profiler_is_paused
(
)
false
)
PROFILER_FUNC_VOID
(
profiler_pause
(
)
)
PROFILER_FUNC_VOID
(
profiler_resume
(
)
)
PROFILER_FUNC
(
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
nullptr
)
PROFILER_FUNC_VOID
(
profiler_get_backtrace_noalloc
(
char
*
output
size_t
outputSize
)
)
#
if
!
defined
(
MOZ_GECKO_PROFILER
)
inline
void
ProfilerBacktraceDestructor
:
:
operator
(
)
(
ProfilerBacktrace
*
aBacktrace
)
{
}
#
endif
PROFILER_FUNC
(
bool
profiler_is_active
(
)
false
)
PROFILER_FUNC
(
bool
profiler_feature_active
(
const
char
*
)
false
)
PROFILER_FUNC_VOID
(
profiler_responsiveness
(
const
mozilla
:
:
TimeStamp
&
aTime
)
)
PROFILER_FUNC_VOID
(
profiler_set_frame_number
(
int
frameNumber
)
)
PROFILER_FUNC
(
mozilla
:
:
UniquePtr
<
char
[
]
>
profiler_get_profile
(
double
aSinceTime
=
0
)
nullptr
)
PROFILER_FUNC
(
JSObject
*
profiler_get_profile_jsobject
(
JSContext
*
aCx
double
aSinceTime
=
0
)
nullptr
)
PROFILER_FUNC_VOID
(
profiler_get_profile_jsobject_async
(
double
aSinceTime
=
0
mozilla
:
:
dom
:
:
Promise
*
=
0
)
)
PROFILER_FUNC_VOID
(
profiler_get_start_params
(
int
*
aEntrySize
double
*
aInterval
mozilla
:
:
Vector
<
const
char
*
>
*
aFilters
mozilla
:
:
Vector
<
const
char
*
>
*
aFeatures
)
)
extern
"
C
"
{
PROFILER_FUNC_VOID
(
profiler_save_profile_to_file
(
const
char
*
aFilename
)
)
}
PROFILER_FUNC
(
const
char
*
*
profiler_get_features
(
)
nullptr
)
PROFILER_FUNC_VOID
(
profiler_get_buffer_info_helper
(
uint32_t
*
aCurrentPosition
uint32_t
*
aTotalSize
uint32_t
*
aGeneration
)
)
static
inline
void
profiler_get_buffer_info
(
uint32_t
*
aCurrentPosition
uint32_t
*
aTotalSize
uint32_t
*
aGeneration
)
{
*
aCurrentPosition
=
0
;
*
aTotalSize
=
0
;
*
aGeneration
=
0
;
profiler_get_buffer_info_helper
(
aCurrentPosition
aTotalSize
aGeneration
)
;
}
PROFILER_FUNC_VOID
(
profiler_lock
(
)
)
PROFILER_FUNC_VOID
(
profiler_unlock
(
)
)
PROFILER_FUNC_VOID
(
profiler_register_thread
(
const
char
*
name
void
*
guessStackTop
)
)
PROFILER_FUNC_VOID
(
profiler_unregister_thread
(
)
)
PROFILER_FUNC_VOID
(
profiler_sleep_start
(
)
)
PROFILER_FUNC_VOID
(
profiler_sleep_end
(
)
)
PROFILER_FUNC
(
bool
profiler_is_sleeping
(
)
false
)
PROFILER_FUNC_VOID
(
profiler_js_operation_callback
(
)
)
PROFILER_FUNC
(
double
profiler_time
(
)
0
)
PROFILER_FUNC
(
double
profiler_time
(
const
mozilla
:
:
TimeStamp
&
aTime
)
0
)
PROFILER_FUNC
(
bool
profiler_in_privacy_mode
(
)
false
)
PROFILER_FUNC_VOID
(
profiler_log
(
const
char
*
str
)
)
PROFILER_FUNC_VOID
(
profiler_log
(
const
char
*
fmt
va_list
args
)
)
#
if
defined
(
MOZ_GECKO_PROFILER
)
#
include
<
stdlib
.
h
>
#
include
<
signal
.
h
>
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
nscore
.
h
"
#
include
"
PseudoStack
.
h
"
#
include
"
ProfilerBacktrace
.
h
"
#
ifdef
min
#
undef
min
#
endif
class
Sampler
;
class
nsISupports
;
class
ProfilerMarkerPayload
;
extern
MOZ_THREAD_LOCAL
(
PseudoStack
*
)
tlsPseudoStack
;
extern
Sampler
*
gSampler
;
extern
bool
stack_key_initialized
;
#
ifndef
SAMPLE_FUNCTION_NAME
#
ifdef
__GNUC__
#
define
SAMPLE_FUNCTION_NAME
__FUNCTION__
#
elif
defined
(
_MSC_VER
)
#
define
SAMPLE_FUNCTION_NAME
__FUNCTION__
#
else
#
define
SAMPLE_FUNCTION_NAME
__func__
/
/
defined
in
C99
supported
in
various
C
+
+
compilers
.
Just
raw
function
name
.
#
endif
#
endif
static
inline
void
*
profiler_call_enter
(
const
char
*
aInfo
js
:
:
ProfileEntry
:
:
Category
aCategory
void
*
aFrameAddress
bool
aCopy
uint32_t
line
)
{
if
(
!
stack_key_initialized
)
return
nullptr
;
PseudoStack
*
stack
=
tlsPseudoStack
.
get
(
)
;
if
(
!
stack
)
{
return
stack
;
}
stack
-
>
push
(
aInfo
aCategory
aFrameAddress
aCopy
line
)
;
return
stack
;
}
static
inline
void
profiler_call_exit
(
void
*
aHandle
)
{
if
(
!
aHandle
)
return
;
PseudoStack
*
stack
=
(
PseudoStack
*
)
aHandle
;
stack
-
>
popAndMaybeDelete
(
)
;
}
void
profiler_add_marker
(
const
char
*
aMarker
ProfilerMarkerPayload
*
aPayload
=
nullptr
)
;
MOZ_EXPORT
void
profiler_save_profile_to_file_async
(
double
aSinceTime
const
char
*
aFileName
)
;
void
profiler_get_gatherer
(
nsISupports
*
*
aRetVal
)
;
#
define
SAMPLER_APPEND_LINE_NUMBER_PASTE
(
id
line
)
id
#
#
line
#
define
SAMPLER_APPEND_LINE_NUMBER_EXPAND
(
id
line
)
SAMPLER_APPEND_LINE_NUMBER_PASTE
(
id
line
)
#
define
SAMPLER_APPEND_LINE_NUMBER
(
id
)
SAMPLER_APPEND_LINE_NUMBER_EXPAND
(
id
__LINE__
)
#
ifdef
MOZ_USE_SYSTRACE
#
ifndef
ATRACE_TAG
#
define
ATRACE_TAG
ATRACE_TAG_ALWAYS
#
endif
#
ifndef
HAVE_ANDROID_OS
#
define
HAVE_ANDROID_OS
#
define
REMOVE_HAVE_ANDROID_OS
#
endif
#
undef
_LIBS_CUTILS_TRACE_H
#
include
<
utils
/
Trace
.
h
>
#
define
MOZ_PLATFORM_TRACING
(
name
)
android
:
:
ScopedTrace
SAMPLER_APPEND_LINE_NUMBER
(
scopedTrace
)
(
ATRACE_TAG
name
)
;
#
ifdef
REMOVE_HAVE_ANDROID_OS
#
undef
HAVE_ANDROID_OS
#
undef
REMOVE_HAVE_ANDROID_OS
#
endif
#
else
#
define
MOZ_PLATFORM_TRACING
(
name
)
#
endif
#
ifdef
MOZ_WIDGET_GONK
#
define
PLATFORM_LIKELY_MEMORY_CONSTRAINED
#
endif
#
if
!
defined
(
PLATFORM_LIKELY_MEMORY_CONSTRAINED
)
&
&
!
defined
(
ARCH_ARMV6
)
#
define
PROFILE_DEFAULT_ENTRY
1000000
#
else
#
define
PROFILE_DEFAULT_ENTRY
100000
#
endif
#
define
GET_BACKTRACE_DEFAULT_ENTRY
1000
#
if
defined
(
PLATFORM_LIKELY_MEMORY_CONSTRAINED
)
#
define
PROFILE_DEFAULT_INTERVAL
10
#
elif
defined
(
ANDROID
)
#
define
PROFILE_DEFAULT_INTERVAL
1
#
else
#
define
PROFILE_DEFAULT_INTERVAL
1
#
endif
#
define
PROFILE_DEFAULT_FEATURES
NULL
#
define
PROFILE_DEFAULT_FEATURE_COUNT
0
namespace
mozilla
{
class
MOZ_RAII
SamplerStackFrameRAII
{
public
:
SamplerStackFrameRAII
(
const
char
*
aInfo
js
:
:
ProfileEntry
:
:
Category
aCategory
uint32_t
line
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mHandle
=
profiler_call_enter
(
aInfo
aCategory
this
false
line
)
;
}
~
SamplerStackFrameRAII
(
)
{
profiler_call_exit
(
mHandle
)
;
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
void
*
mHandle
;
}
;
static
const
int
SAMPLER_MAX_STRING
=
128
;
class
MOZ_RAII
SamplerStackFramePrintfRAII
{
public
:
SamplerStackFramePrintfRAII
(
const
char
*
aInfo
js
:
:
ProfileEntry
:
:
Category
aCategory
uint32_t
line
const
char
*
aFormat
.
.
.
)
:
mHandle
(
nullptr
)
{
if
(
profiler_is_active
(
)
&
&
!
profiler_in_privacy_mode
(
)
)
{
va_list
args
;
va_start
(
args
aFormat
)
;
char
buff
[
SAMPLER_MAX_STRING
]
;
VsprintfLiteral
(
buff
aFormat
args
)
;
SprintfLiteral
(
mDest
"
%
s
%
s
"
aInfo
buff
)
;
mHandle
=
profiler_call_enter
(
mDest
aCategory
this
true
line
)
;
va_end
(
args
)
;
}
else
{
mHandle
=
profiler_call_enter
(
aInfo
aCategory
this
false
line
)
;
}
}
~
SamplerStackFramePrintfRAII
(
)
{
profiler_call_exit
(
mHandle
)
;
}
private
:
char
mDest
[
SAMPLER_MAX_STRING
]
;
void
*
mHandle
;
}
;
}
inline
PseudoStack
*
profiler_get_pseudo_stack
(
void
)
{
if
(
!
stack_key_initialized
)
return
nullptr
;
return
tlsPseudoStack
.
get
(
)
;
}
#
endif
namespace
mozilla
{
class
MOZ_RAII
GeckoProfilerInitRAII
{
public
:
explicit
GeckoProfilerInitRAII
(
void
*
stackTop
)
{
profiler_init
(
stackTop
)
;
}
~
GeckoProfilerInitRAII
(
)
{
profiler_shutdown
(
)
;
}
}
;
class
MOZ_RAII
GeckoProfilerSleepRAII
{
public
:
GeckoProfilerSleepRAII
(
)
{
profiler_sleep_start
(
)
;
}
~
GeckoProfilerSleepRAII
(
)
{
profiler_sleep_end
(
)
;
}
}
;
class
MOZ_RAII
GeckoProfilerWakeRAII
{
public
:
GeckoProfilerWakeRAII
(
)
:
mIssuedWake
(
profiler_is_sleeping
(
)
)
{
if
(
mIssuedWake
)
{
profiler_sleep_end
(
)
;
}
}
~
GeckoProfilerWakeRAII
(
)
{
if
(
mIssuedWake
)
{
MOZ_ASSERT
(
!
profiler_is_sleeping
(
)
)
;
profiler_sleep_start
(
)
;
}
}
private
:
bool
mIssuedWake
;
}
;
class
MOZ_RAII
GeckoProfilerTracingRAII
{
public
:
GeckoProfilerTracingRAII
(
const
char
*
aCategory
const
char
*
aInfo
UniqueProfilerBacktrace
aBacktrace
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mCategory
(
aCategory
)
mInfo
(
aInfo
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_tracing
(
mCategory
mInfo
Move
(
aBacktrace
)
TRACING_INTERVAL_START
)
;
}
GeckoProfilerTracingRAII
(
const
char
*
aCategory
const
char
*
aInfo
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mCategory
(
aCategory
)
mInfo
(
aInfo
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_tracing
(
mCategory
mInfo
TRACING_INTERVAL_START
)
;
}
~
GeckoProfilerTracingRAII
(
)
{
profiler_tracing
(
mCategory
mInfo
TRACING_INTERVAL_END
)
;
}
protected
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
const
char
*
mCategory
;
const
char
*
mInfo
;
}
;
class
MOZ_STACK_CLASS
AutoProfilerRegister
final
{
public
:
explicit
AutoProfilerRegister
(
const
char
*
aName
)
{
profiler_register_thread
(
aName
this
)
;
}
~
AutoProfilerRegister
(
)
{
profiler_unregister_thread
(
)
;
}
private
:
AutoProfilerRegister
(
const
AutoProfilerRegister
&
)
=
delete
;
AutoProfilerRegister
&
operator
=
(
const
AutoProfilerRegister
&
)
=
delete
;
}
;
}
#
endif
