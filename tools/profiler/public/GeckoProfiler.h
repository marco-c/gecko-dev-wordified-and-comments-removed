#
ifndef
SAMPLER_H
#
define
SAMPLER_H
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
GeckoProfilerTypes
.
h
"
namespace
mozilla
{
class
TimeStamp
;
namespace
dom
{
class
Promise
;
}
}
class
nsIProfilerStartParams
;
enum
TracingMetadata
{
TRACING_DEFAULT
TRACING_INTERVAL_START
TRACING_INTERVAL_END
TRACING_EVENT
TRACING_EVENT_BACKTRACE
TRACING_TIMESTAMP
}
;
#
if
!
defined
(
MOZ_ENABLE_PROFILER_SPS
)
#
include
<
stdint
.
h
>
#
include
<
stdarg
.
h
>
#
define
PROFILER_LABEL
(
name_space
info
category
)
do
{
}
while
(
0
)
#
define
PROFILER_LABEL_FUNC
(
category
)
do
{
}
while
(
0
)
#
define
PROFILER_LABEL_PRINTF
(
name_space
info
category
format
.
.
.
)
do
{
}
while
(
0
)
#
define
PROFILER_MARKER
(
info
)
do
{
}
while
(
0
)
#
define
PROFILER_MARKER_PAYLOAD
(
info
payload
)
do
{
mozilla
:
:
UniquePtr
<
ProfilerMarkerPayload
>
payloadDeletor
(
payload
)
;
}
while
(
0
)
static
inline
void
profiler_tracing
(
const
char
*
aCategory
const
char
*
aInfo
TracingMetadata
metaData
=
TRACING_DEFAULT
)
{
}
static
inline
void
profiler_tracing
(
const
char
*
aCategory
const
char
*
aInfo
UniqueProfilerBacktrace
aCause
TracingMetadata
metaData
=
TRACING_DEFAULT
)
{
}
static
inline
void
profiler_init
(
void
*
stackTop
)
{
}
;
static
inline
void
profiler_shutdown
(
)
{
}
;
static
inline
void
profiler_start
(
int
aProfileEntries
double
aInterval
const
char
*
*
aFeatures
uint32_t
aFeatureCount
const
char
*
*
aThreadNameFilters
uint32_t
aFilterCount
)
{
}
static
inline
void
profiler_stop
(
)
{
}
static
inline
bool
profiler_is_paused
(
)
{
return
false
;
}
static
inline
void
profiler_pause
(
)
{
}
static
inline
void
profiler_resume
(
)
{
}
static
inline
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
{
return
nullptr
;
}
static
inline
void
profiler_get_backtrace_noalloc
(
char
*
output
size_t
outputSize
)
{
return
;
}
inline
void
ProfilerBacktraceDestructor
:
:
operator
(
)
(
ProfilerBacktrace
*
aBacktrace
)
{
}
static
inline
bool
profiler_is_active
(
)
{
return
false
;
}
static
inline
bool
profiler_feature_active
(
const
char
*
)
{
return
false
;
}
static
inline
void
profiler_responsiveness
(
const
mozilla
:
:
TimeStamp
&
aTime
)
{
}
static
inline
void
profiler_set_frame_number
(
int
frameNumber
)
{
}
static
inline
mozilla
:
:
UniquePtr
<
char
[
]
>
profiler_get_profile
(
double
aSinceTime
=
0
)
{
return
nullptr
;
}
static
inline
JSObject
*
profiler_get_profile_jsobject
(
JSContext
*
aCx
double
aSinceTime
=
0
)
{
return
nullptr
;
}
static
inline
void
profiler_get_profile_jsobject_async
(
double
aSinceTime
=
0
mozilla
:
:
dom
:
:
Promise
*
=
0
)
{
}
static
inline
void
profiler_get_start_params
(
int
*
aEntrySize
double
*
aInterval
mozilla
:
:
Vector
<
const
char
*
>
*
aFilters
mozilla
:
:
Vector
<
const
char
*
>
*
aFeatures
)
{
}
static
inline
void
profiler_save_profile_to_file
(
char
*
aFilename
)
{
}
static
inline
char
*
*
profiler_get_features
(
)
{
return
nullptr
;
}
static
inline
void
profiler_get_buffer_info
(
uint32_t
*
aCurrentPosition
uint32_t
*
aTotalSize
uint32_t
*
aGeneration
)
{
*
aCurrentPosition
=
0
;
*
aTotalSize
=
0
;
*
aGeneration
=
0
;
}
static
inline
void
profiler_lock
(
)
{
}
static
inline
void
profiler_unlock
(
)
{
}
static
inline
void
profiler_register_thread
(
const
char
*
name
void
*
guessStackTop
)
{
}
static
inline
void
profiler_unregister_thread
(
)
{
}
static
inline
void
profiler_sleep_start
(
)
{
}
static
inline
void
profiler_sleep_end
(
)
{
}
static
inline
bool
profiler_is_sleeping
(
)
{
return
false
;
}
static
inline
void
profiler_js_operation_callback
(
)
{
}
static
inline
double
profiler_time
(
)
{
return
0
;
}
static
inline
double
profiler_time
(
const
mozilla
:
:
TimeStamp
&
aTime
)
{
return
0
;
}
static
inline
bool
profiler_in_privacy_mode
(
)
{
return
false
;
}
static
inline
void
profiler_log
(
const
char
*
str
)
{
}
static
inline
void
profiler_log
(
const
char
*
fmt
va_list
args
)
{
}
#
else
#
include
"
GeckoProfilerImpl
.
h
"
#
endif
namespace
mozilla
{
class
MOZ_RAII
GeckoProfilerInitRAII
{
public
:
explicit
GeckoProfilerInitRAII
(
void
*
stackTop
)
{
profiler_init
(
stackTop
)
;
}
~
GeckoProfilerInitRAII
(
)
{
profiler_shutdown
(
)
;
}
}
;
class
MOZ_RAII
GeckoProfilerSleepRAII
{
public
:
GeckoProfilerSleepRAII
(
)
{
profiler_sleep_start
(
)
;
}
~
GeckoProfilerSleepRAII
(
)
{
profiler_sleep_end
(
)
;
}
}
;
class
MOZ_RAII
GeckoProfilerWakeRAII
{
public
:
GeckoProfilerWakeRAII
(
)
:
mIssuedWake
(
profiler_is_sleeping
(
)
)
{
if
(
mIssuedWake
)
{
profiler_sleep_end
(
)
;
}
}
~
GeckoProfilerWakeRAII
(
)
{
if
(
mIssuedWake
)
{
MOZ_ASSERT
(
!
profiler_is_sleeping
(
)
)
;
profiler_sleep_start
(
)
;
}
}
private
:
bool
mIssuedWake
;
}
;
class
MOZ_RAII
GeckoProfilerTracingRAII
{
public
:
GeckoProfilerTracingRAII
(
const
char
*
aCategory
const
char
*
aInfo
UniqueProfilerBacktrace
aBacktrace
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mCategory
(
aCategory
)
mInfo
(
aInfo
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_tracing
(
mCategory
mInfo
Move
(
aBacktrace
)
TRACING_INTERVAL_START
)
;
}
GeckoProfilerTracingRAII
(
const
char
*
aCategory
const
char
*
aInfo
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mCategory
(
aCategory
)
mInfo
(
aInfo
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_tracing
(
mCategory
mInfo
TRACING_INTERVAL_START
)
;
}
~
GeckoProfilerTracingRAII
(
)
{
profiler_tracing
(
mCategory
mInfo
TRACING_INTERVAL_END
)
;
}
protected
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
const
char
*
mCategory
;
const
char
*
mInfo
;
}
;
class
MOZ_STACK_CLASS
AutoProfilerRegister
final
{
public
:
explicit
AutoProfilerRegister
(
const
char
*
aName
)
{
profiler_register_thread
(
aName
this
)
;
}
~
AutoProfilerRegister
(
)
{
profiler_unregister_thread
(
)
;
}
private
:
AutoProfilerRegister
(
const
AutoProfilerRegister
&
)
=
delete
;
AutoProfilerRegister
&
operator
=
(
const
AutoProfilerRegister
&
)
=
delete
;
}
;
}
#
endif
