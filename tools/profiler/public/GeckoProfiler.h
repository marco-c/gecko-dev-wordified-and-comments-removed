#
ifndef
GeckoProfiler_h
#
define
GeckoProfiler_h
#
include
"
BaseProfiler
.
h
"
#
include
"
mozilla
/
ProfilerCounts
.
h
"
#
ifndef
MOZ_GECKO_PROFILER
#
include
"
mozilla
/
ProfilerMarkers
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
define
AUTO_PROFILER_INIT
#
define
AUTO_PROFILER_INIT2
#
define
PROFILER_REGISTER_THREAD
(
name
)
#
define
PROFILER_UNREGISTER_THREAD
(
)
#
define
AUTO_PROFILER_REGISTER_THREAD
(
name
)
#
define
AUTO_PROFILER_THREAD_SLEEP
#
define
AUTO_PROFILER_THREAD_WAKE
#
define
PROFILER_JS_INTERRUPT_CALLBACK
(
)
#
define
PROFILER_SET_JS_CONTEXT
(
cx
)
#
define
PROFILER_CLEAR_JS_CONTEXT
(
)
#
define
AUTO_PROFILER_LABEL
(
label
categoryPair
)
#
define
AUTO_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR_NONSENSITIVE
(
label
categoryPair
\
cStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
label
categoryPair
nsCStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING_NONSENSITIVE
(
\
label
categoryPair
nsCStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
label
categoryPair
nsStr
)
#
define
AUTO_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
categoryPair
\
ctx
flags
)
#
define
AUTO_PROFILE_FOLLOWING_RUNNABLE
(
runnable
)
struct
ProfilerBacktrace
{
}
;
using
UniqueProfilerBacktrace
=
mozilla
:
:
UniquePtr
<
int
>
;
static
inline
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
{
return
nullptr
;
}
static
inline
bool
profiler_capture_backtrace_into
(
mozilla
:
:
ProfileChunkedBuffer
&
aChunkedBuffer
StackCaptureOptions
aCaptureOptions
)
{
return
false
;
}
static
inline
mozilla
:
:
UniquePtr
<
mozilla
:
:
ProfileChunkedBuffer
>
profiler_capture_backtrace
(
)
{
return
nullptr
;
}
#
else
#
include
"
js
/
ProfilingCategory
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PowerOfTwo
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
<
functional
>
#
include
<
stdint
.
h
>
class
ProfilerBacktrace
;
class
ProfilerCodeAddressService
;
struct
JSContext
;
namespace
JS
{
struct
RecordAllocationInfo
;
}
namespace
mozilla
{
class
ProfileBufferControlledChunkManager
;
class
ProfileChunkedBuffer
;
namespace
baseprofiler
{
class
SpliceableJSONWriter
;
}
namespace
net
{
struct
TimingStruct
;
enum
CacheDisposition
:
uint8_t
;
}
}
class
nsIURI
;
class
nsIDocShell
;
namespace
mozilla
{
class
MallocAllocPolicy
;
template
<
class
T
size_t
MinInlineCapacity
class
AllocPolicy
>
class
Vector
;
}
#
define
PROFILER_RAII_PASTE
(
id
line
)
id
#
#
line
#
define
PROFILER_RAII_EXPAND
(
id
line
)
PROFILER_RAII_PASTE
(
id
line
)
#
define
PROFILER_RAII
PROFILER_RAII_EXPAND
(
raiiObject
__LINE__
)
#
define
PROFILER_FOR_EACH_FEATURE
(
MACRO
)
\
MACRO
(
0
"
java
"
Java
"
Profile
Java
code
Android
only
"
)
\
\
MACRO
(
1
"
js
"
JS
\
"
Get
the
JS
engine
to
expose
the
JS
stack
to
the
profiler
"
)
\
\
/
*
The
DevTools
profiler
doesn
'
t
want
the
native
addresses
.
*
/
\
MACRO
(
2
"
leaf
"
Leaf
"
Include
the
C
+
+
leaf
node
if
not
stackwalking
"
)
\
\
MACRO
(
3
"
mainthreadio
"
MainThreadIO
"
Add
main
thread
file
I
/
O
"
)
\
\
MACRO
(
4
"
fileio
"
FileIO
\
"
Add
file
I
/
O
from
all
profiled
threads
implies
mainthreadio
"
)
\
\
MACRO
(
5
"
fileioall
"
FileIOAll
\
"
Add
file
I
/
O
from
all
threads
implies
fileio
"
)
\
\
MACRO
(
6
"
noiostacks
"
NoIOStacks
\
"
File
I
/
O
markers
do
not
capture
stacks
to
reduce
overhead
"
)
\
\
MACRO
(
7
"
screenshots
"
Screenshots
\
"
Take
a
snapshot
of
the
window
on
every
composition
"
)
\
\
MACRO
(
8
"
seqstyle
"
SequentialStyle
\
"
Disable
parallel
traversal
in
styling
"
)
\
\
MACRO
(
9
"
stackwalk
"
StackWalk
\
"
Walk
the
C
+
+
stack
not
available
on
all
platforms
"
)
\
\
MACRO
(
10
"
tasktracer
"
TaskTracer
\
"
Start
profiling
with
feature
TaskTracer
"
)
\
\
MACRO
(
11
"
threads
"
Threads
"
Profile
the
registered
secondary
threads
"
)
\
\
MACRO
(
12
"
jstracer
"
JSTracer
"
Enable
tracing
of
the
JavaScript
engine
"
)
\
\
MACRO
(
13
"
jsallocations
"
JSAllocations
\
"
Have
the
JavaScript
engine
track
allocations
"
)
\
\
MACRO
(
14
"
nostacksampling
"
NoStackSampling
\
"
Disable
all
stack
sampling
:
Cancels
\
"
js
\
"
\
"
leaf
\
"
"
\
"
\
"
stackwalk
\
"
and
labels
"
)
\
\
MACRO
(
15
"
preferencereads
"
PreferenceReads
\
"
Track
when
preferences
are
read
"
)
\
\
MACRO
(
16
"
nativeallocations
"
NativeAllocations
\
"
Collect
the
stacks
from
a
smaller
subset
of
all
native
"
\
"
allocations
biasing
towards
collecting
larger
allocations
"
)
\
\
MACRO
(
17
"
ipcmessages
"
IPCMessages
\
"
Have
the
IPC
layer
track
cross
-
process
messages
"
)
\
\
MACRO
(
18
"
audiocallbacktracing
"
AudioCallbackTracing
\
"
Audio
callback
tracing
"
)
\
\
MACRO
(
19
"
cpu
"
CPUUtilization
"
CPU
utilization
"
)
struct
ProfilerFeature
{
#
define
DECLARE
(
n_
str_
Name_
desc_
)
\
static
constexpr
uint32_t
Name_
=
(
1u
<
<
n_
)
;
\
static
constexpr
bool
Has
#
#
Name_
(
uint32_t
aFeatures
)
{
\
return
aFeatures
&
Name_
;
\
}
\
static
constexpr
void
Set
#
#
Name_
(
uint32_t
&
aFeatures
)
{
\
aFeatures
|
=
Name_
;
\
}
\
static
constexpr
void
Clear
#
#
Name_
(
uint32_t
&
aFeatures
)
{
\
aFeatures
&
=
~
Name_
;
\
}
PROFILER_FOR_EACH_FEATURE
(
DECLARE
)
#
undef
DECLARE
}
;
namespace
mozilla
{
namespace
profiler
{
namespace
detail
{
class
RacyFeatures
{
public
:
static
void
SetActive
(
uint32_t
aFeatures
)
{
sActiveAndFeatures
=
Active
|
aFeatures
;
}
static
void
SetInactive
(
)
{
sActiveAndFeatures
=
0
;
}
static
void
SetPaused
(
)
{
sActiveAndFeatures
|
=
Paused
;
}
static
void
SetUnpaused
(
)
{
sActiveAndFeatures
&
=
~
Paused
;
}
static
void
SetSamplingPaused
(
)
{
sActiveAndFeatures
|
=
SamplingPaused
;
}
static
void
SetSamplingUnpaused
(
)
{
sActiveAndFeatures
&
=
~
SamplingPaused
;
}
static
mozilla
:
:
Maybe
<
uint32_t
>
FeaturesIfActive
(
)
{
if
(
uint32_t
af
=
sActiveAndFeatures
;
af
&
Active
)
{
return
Some
(
af
&
~
(
Active
|
Paused
|
SamplingPaused
)
)
;
}
return
Nothing
(
)
;
}
static
mozilla
:
:
Maybe
<
uint32_t
>
FeaturesIfActiveAndUnpaused
(
)
{
if
(
uint32_t
af
=
sActiveAndFeatures
;
(
af
&
(
Active
|
Paused
)
)
=
=
Active
)
{
return
Some
(
af
&
~
(
Active
|
SamplingPaused
)
)
;
}
return
Nothing
(
)
;
}
static
bool
IsActive
(
)
{
return
uint32_t
(
sActiveAndFeatures
)
&
Active
;
}
static
bool
IsActiveWithFeature
(
uint32_t
aFeature
)
{
uint32_t
af
=
sActiveAndFeatures
;
return
(
af
&
Active
)
&
&
(
af
&
aFeature
)
;
}
static
bool
IsActiveAndUnpaused
(
)
{
uint32_t
af
=
sActiveAndFeatures
;
return
(
af
&
Active
)
&
&
!
(
af
&
Paused
)
;
}
static
bool
IsActiveAndSamplingUnpaused
(
)
{
uint32_t
af
=
sActiveAndFeatures
;
return
(
af
&
Active
)
&
&
!
(
af
&
(
Paused
|
SamplingPaused
)
)
;
}
private
:
static
constexpr
uint32_t
Active
=
1u
<
<
31
;
static
constexpr
uint32_t
Paused
=
1u
<
<
30
;
static
constexpr
uint32_t
SamplingPaused
=
1u
<
<
29
;
#
define
NO_OVERLAP
(
n_
str_
Name_
desc_
)
\
static_assert
(
ProfilerFeature
:
:
Name_
!
=
SamplingPaused
\
"
bad
feature
value
"
)
;
PROFILER_FOR_EACH_FEATURE
(
NO_OVERLAP
)
;
#
undef
NO_OVERLAP
static
mozilla
:
:
Atomic
<
uint32_t
mozilla
:
:
MemoryOrdering
:
:
Relaxed
>
sActiveAndFeatures
;
}
;
bool
IsThreadBeingProfiled
(
)
;
bool
IsThreadRegistered
(
)
;
}
}
}
static
constexpr
mozilla
:
:
PowerOfTwo32
PROFILER_DEFAULT_ENTRIES
=
#
if
!
defined
(
GP_PLAT_arm_android
)
mozilla
:
:
MakePowerOfTwo32
<
8
*
1024
*
1024
>
(
)
;
#
else
mozilla
:
:
MakePowerOfTwo32
<
2
*
1024
*
1024
>
(
)
;
/
/
2M
entries
=
16MB
#
endif
static
constexpr
mozilla
:
:
PowerOfTwo32
PROFILER_DEFAULT_STARTUP_ENTRIES
=
#
if
!
defined
(
GP_PLAT_arm_android
)
mozilla
:
:
MakePowerOfTwo32
<
64
*
1024
*
1024
>
(
)
;
#
else
mozilla
:
:
MakePowerOfTwo32
<
8
*
1024
*
1024
>
(
)
;
#
endif
#
define
PROFILER_DEFAULT_DURATION
20
/
*
seconds
for
tests
only
*
/
#
define
PROFILER_DEFAULT_INTERVAL
1
/
*
millisecond
*
/
#
define
PROFILER_MAX_INTERVAL
5000
/
*
milliseconds
*
/
void
profiler_init
(
void
*
stackTop
)
;
void
profiler_init_threadmanager
(
)
;
#
define
AUTO_PROFILER_INIT
mozilla
:
:
AutoProfilerInit
PROFILER_RAII
#
define
AUTO_PROFILER_INIT2
mozilla
:
:
AutoProfilerInit2
PROFILER_RAII
enum
class
IsFastShutdown
{
No
Yes
}
;
void
profiler_shutdown
(
IsFastShutdown
aIsFastShutdown
=
IsFastShutdown
:
:
No
)
;
void
profiler_start
(
mozilla
:
:
PowerOfTwo32
aCapacity
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
uint64_t
aActiveBrowsingContextID
const
mozilla
:
:
Maybe
<
double
>
&
aDuration
=
mozilla
:
:
Nothing
(
)
)
;
void
profiler_stop
(
)
;
void
profiler_ensure_started
(
mozilla
:
:
PowerOfTwo32
aCapacity
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
uint64_t
aActiveBrowsingContextID
const
mozilla
:
:
Maybe
<
double
>
&
aDuration
=
mozilla
:
:
Nothing
(
)
)
;
#
define
PROFILER_REGISTER_THREAD
(
name
)
\
do
{
\
char
stackTop
;
\
profiler_register_thread
(
name
&
stackTop
)
;
\
}
while
(
0
)
#
define
PROFILER_UNREGISTER_THREAD
(
)
profiler_unregister_thread
(
)
ProfilingStack
*
profiler_register_thread
(
const
char
*
name
void
*
guessStackTop
)
;
void
profiler_unregister_thread
(
)
;
void
profiler_register_page
(
uint64_t
aBrowsingContextID
uint64_t
aInnerWindowID
const
nsCString
&
aUrl
uint64_t
aEmbedderInnerWindowID
)
;
void
profiler_unregister_page
(
uint64_t
aRegisteredInnerWindowID
)
;
void
profiler_clear_all_pages
(
)
;
class
BaseProfilerCount
;
void
profiler_add_sampled_counter
(
BaseProfilerCount
*
aCounter
)
;
void
profiler_remove_sampled_counter
(
BaseProfilerCount
*
aCounter
)
;
#
define
AUTO_PROFILER_REGISTER_THREAD
(
name
)
\
mozilla
:
:
AutoProfilerRegisterThread
PROFILER_RAII
(
name
)
enum
class
SamplingState
{
JustStopped
SamplingPaused
NoStackSamplingCompleted
SamplingCompleted
}
;
using
PostSamplingCallback
=
std
:
:
function
<
void
(
SamplingState
)
>
;
[
[
nodiscard
]
]
bool
profiler_callback_after_sampling
(
PostSamplingCallback
&
&
aCallback
)
;
void
profiler_pause
(
)
;
void
profiler_resume
(
)
;
void
profiler_pause_sampling
(
)
;
void
profiler_resume_sampling
(
)
;
void
profiler_thread_sleep
(
)
;
void
profiler_thread_wake
(
)
;
#
define
AUTO_PROFILER_THREAD_SLEEP
\
mozilla
:
:
AutoProfilerThreadSleep
PROFILER_RAII
#
define
AUTO_PROFILER_THREAD_WAKE
\
mozilla
:
:
AutoProfilerThreadWake
PROFILER_RAII
#
define
PROFILER_JS_INTERRUPT_CALLBACK
(
)
profiler_js_interrupt_callback
(
)
void
profiler_js_interrupt_callback
(
)
;
#
define
PROFILER_SET_JS_CONTEXT
(
cx
)
profiler_set_js_context
(
cx
)
#
define
PROFILER_CLEAR_JS_CONTEXT
(
)
profiler_clear_js_context
(
)
void
profiler_set_js_context
(
JSContext
*
aCx
)
;
void
profiler_clear_js_context
(
)
;
inline
bool
profiler_is_active
(
)
{
return
mozilla
:
:
profiler
:
:
detail
:
:
RacyFeatures
:
:
IsActive
(
)
;
}
inline
bool
profiler_can_accept_markers
(
)
{
return
mozilla
:
:
profiler
:
:
detail
:
:
RacyFeatures
:
:
IsActiveAndUnpaused
(
)
;
}
inline
bool
profiler_thread_is_being_profiled
(
)
{
return
profiler_is_active
(
)
&
&
mozilla
:
:
profiler
:
:
detail
:
:
IsThreadBeingProfiled
(
)
;
}
inline
bool
profiler_is_active_and_thread_is_registered
(
)
{
return
profiler_is_active
(
)
&
&
mozilla
:
:
profiler
:
:
detail
:
:
IsThreadRegistered
(
)
;
}
bool
profiler_is_paused
(
)
;
bool
profiler_is_sampling_paused
(
)
;
bool
profiler_thread_is_sleeping
(
)
;
uint32_t
profiler_get_available_features
(
)
;
inline
mozilla
:
:
Maybe
<
uint32_t
>
profiler_features_if_active
(
)
{
return
mozilla
:
:
profiler
:
:
detail
:
:
RacyFeatures
:
:
FeaturesIfActive
(
)
;
}
inline
mozilla
:
:
Maybe
<
uint32_t
>
profiler_features_if_active_and_unpaused
(
)
{
return
mozilla
:
:
profiler
:
:
detail
:
:
RacyFeatures
:
:
FeaturesIfActiveAndUnpaused
(
)
;
}
bool
profiler_feature_active
(
uint32_t
aFeature
)
;
void
profiler_get_start_params
(
int
*
aEntrySize
mozilla
:
:
Maybe
<
double
>
*
aDuration
double
*
aInterval
uint32_t
*
aFeatures
mozilla
:
:
Vector
<
const
char
*
0
mozilla
:
:
MallocAllocPolicy
>
*
aFilters
uint64_t
*
aActiveBrowsingContextID
)
;
mozilla
:
:
ProfileBufferControlledChunkManager
*
profiler_get_controlled_chunk_manager
(
)
;
double
profiler_time
(
)
;
int
profiler_current_process_id
(
)
;
int
profiler_current_thread_id
(
)
;
extern
int
scProfilerMainThreadId
;
inline
int
profiler_main_thread_id
(
)
{
return
scProfilerMainThreadId
;
}
inline
bool
profiler_is_main_thread
(
)
{
return
profiler_current_thread_id
(
)
=
=
profiler_main_thread_id
(
)
;
}
class
ProfilerStackCollector
{
public
:
virtual
mozilla
:
:
Maybe
<
uint64_t
>
SamplePositionInBuffer
(
)
{
return
mozilla
:
:
Nothing
(
)
;
}
virtual
mozilla
:
:
Maybe
<
uint64_t
>
BufferRangeStart
(
)
{
return
mozilla
:
:
Nothing
(
)
;
}
virtual
void
SetIsMainThread
(
)
{
}
virtual
void
CollectNativeLeafAddr
(
void
*
aAddr
)
=
0
;
virtual
void
CollectJitReturnAddr
(
void
*
aAddr
)
=
0
;
virtual
void
CollectWasmFrame
(
const
char
*
aLabel
)
=
0
;
virtual
void
CollectProfilingStackFrame
(
const
js
:
:
ProfilingStackFrame
&
aFrame
)
=
0
;
}
;
void
profiler_suspend_and_sample_thread
(
int
aThreadId
uint32_t
aFeatures
ProfilerStackCollector
&
aCollector
bool
aSampleNative
=
true
)
;
struct
ProfilerBacktraceDestructor
{
void
operator
(
)
(
ProfilerBacktrace
*
)
;
}
;
using
UniqueProfilerBacktrace
=
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
ProfilerBacktraceDestructor
>
;
bool
profiler_capture_backtrace_into
(
mozilla
:
:
ProfileChunkedBuffer
&
aChunkedBuffer
mozilla
:
:
StackCaptureOptions
aCaptureOptions
)
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
ProfileChunkedBuffer
>
profiler_capture_backtrace
(
)
;
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
;
struct
ProfilerStats
{
unsigned
n
=
0
;
double
sum
=
0
;
double
min
=
std
:
:
numeric_limits
<
double
>
:
:
max
(
)
;
double
max
=
0
;
void
Count
(
double
v
)
{
+
+
n
;
sum
+
=
v
;
if
(
v
<
min
)
{
min
=
v
;
}
if
(
v
>
max
)
{
max
=
v
;
}
}
}
;
struct
ProfilerBufferInfo
{
uint64_t
mRangeStart
;
uint64_t
mRangeEnd
;
uint32_t
mEntryCount
;
ProfilerStats
mIntervalsUs
;
ProfilerStats
mOverheadsUs
;
ProfilerStats
mLockingsUs
;
ProfilerStats
mCleaningsUs
;
ProfilerStats
mCountersUs
;
ProfilerStats
mThreadsUs
;
}
;
mozilla
:
:
Maybe
<
ProfilerBufferInfo
>
profiler_get_buffer_info
(
)
;
#
include
"
mozilla
/
ProfilerMarkers
.
h
"
#
define
AUTO_PROFILER_LABEL
(
label
categoryPair
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
"
"
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
\
LABEL_DETERMINED_BY_CATEGORY_PAIR
)
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
cStr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR_NONSENSITIVE
(
label
categoryPair
\
cStr
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
cStr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
NONSENSITIVE
)
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
label
categoryPair
nsCStr
)
\
mozilla
:
:
Maybe
<
nsAutoCString
>
autoCStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectNsCString
;
\
if
(
profiler_is_active
(
)
)
{
\
autoCStr
.
emplace
(
nsCStr
)
;
\
raiiObjectNsCString
.
emplace
(
label
autoCStr
-
>
get
(
)
\
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING_NONSENSITIVE
(
\
label
categoryPair
nsCStr
)
\
mozilla
:
:
Maybe
<
nsAutoCString
>
autoCStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectNsCString
;
\
if
(
profiler_is_active
(
)
)
{
\
autoCStr
.
emplace
(
nsCStr
)
;
\
raiiObjectNsCString
.
emplace
(
\
label
autoCStr
-
>
get
(
)
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
NONSENSITIVE
)
)
;
\
}
#
define
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
label
categoryPair
\
nsStr
)
\
mozilla
:
:
Maybe
<
NS_LossyConvertUTF16toASCII
>
asciiStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectLossyNsString
;
\
if
(
profiler_is_active
(
)
)
{
\
asciiStr
.
emplace
(
nsStr
)
;
\
raiiObjectLossyNsString
.
emplace
(
\
label
asciiStr
-
>
get
(
)
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
#
define
AUTO_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
ctx
label
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
categoryPair
\
ctx
flags
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
ctx
label
dynamicString
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
flags
)
void
profiler_add_js_marker
(
const
char
*
aMarkerName
const
char
*
aMarkerText
)
;
void
profiler_add_js_allocation_marker
(
JS
:
:
RecordAllocationInfo
&
&
info
)
;
bool
profiler_add_native_allocation_marker
(
int64_t
aSize
uintptr_t
aMemoryAddress
)
;
bool
profiler_is_locked_on_current_thread
(
)
;
enum
class
NetworkLoadType
{
LOAD_START
LOAD_STOP
LOAD_REDIRECT
}
;
void
profiler_add_network_marker
(
nsIURI
*
aURI
const
nsACString
&
aRequestMethod
int32_t
aPriority
uint64_t
aChannelId
NetworkLoadType
aType
mozilla
:
:
TimeStamp
aStart
mozilla
:
:
TimeStamp
aEnd
int64_t
aCount
mozilla
:
:
net
:
:
CacheDisposition
aCacheDisposition
uint64_t
aInnerWindowID
const
mozilla
:
:
net
:
:
TimingStruct
*
aTimings
=
nullptr
nsIURI
*
aRedirectURI
=
nullptr
mozilla
:
:
UniquePtr
<
mozilla
:
:
ProfileChunkedBuffer
>
aSource
=
nullptr
const
mozilla
:
:
Maybe
<
nsDependentCString
>
&
aContentType
=
mozilla
:
:
Nothing
(
)
)
;
enum
TracingKind
{
TRACING_EVENT
TRACING_INTERVAL_START
TRACING_INTERVAL_END
}
;
mozilla
:
:
Maybe
<
uint64_t
>
profiler_get_inner_window_id_from_docshell
(
nsIDocShell
*
aDocshell
)
;
inline
mozilla
:
:
MarkerInnerWindowId
MarkerInnerWindowIdFromDocShell
(
nsIDocShell
*
aDocshell
)
{
mozilla
:
:
Maybe
<
uint64_t
>
id
=
profiler_get_inner_window_id_from_docshell
(
aDocshell
)
;
if
(
!
id
)
{
return
mozilla
:
:
MarkerInnerWindowId
:
:
NoId
(
)
;
}
return
mozilla
:
:
MarkerInnerWindowId
(
*
id
)
;
}
void
profiler_set_process_name
(
const
nsACString
&
aProcessName
const
nsACString
*
aETLDplus1
=
nullptr
)
;
mozilla
:
:
UniquePtr
<
char
[
]
>
profiler_get_profile
(
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
)
;
bool
profiler_stream_json_for_this_process
(
mozilla
:
:
baseprofiler
:
:
SpliceableJSONWriter
&
aWriter
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
ProfilerCodeAddressService
*
aService
=
nullptr
)
;
extern
"
C
"
{
void
profiler_save_profile_to_file
(
const
char
*
aFilename
)
;
}
class
TLSRegisteredThread
;
namespace
mozilla
{
class
MOZ_RAII
AutoProfilerInit
{
public
:
explicit
AutoProfilerInit
(
)
{
profiler_init
(
this
)
;
}
~
AutoProfilerInit
(
)
{
profiler_shutdown
(
)
;
}
private
:
}
;
class
MOZ_RAII
AutoProfilerInit2
{
public
:
explicit
AutoProfilerInit2
(
)
{
profiler_init_threadmanager
(
)
;
}
private
:
}
;
class
MOZ_RAII
AutoProfilerRegisterThread
final
{
public
:
explicit
AutoProfilerRegisterThread
(
const
char
*
aName
)
{
profiler_register_thread
(
aName
this
)
;
}
~
AutoProfilerRegisterThread
(
)
{
profiler_unregister_thread
(
)
;
}
private
:
AutoProfilerRegisterThread
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
AutoProfilerRegisterThread
&
operator
=
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
}
;
class
MOZ_RAII
AutoProfilerThreadSleep
{
public
:
explicit
AutoProfilerThreadSleep
(
)
{
profiler_thread_sleep
(
)
;
}
~
AutoProfilerThreadSleep
(
)
{
profiler_thread_wake
(
)
;
}
private
:
}
;
class
MOZ_RAII
AutoProfilerThreadWake
{
public
:
explicit
AutoProfilerThreadWake
(
)
:
mIssuedWake
(
profiler_thread_is_sleeping
(
)
)
{
if
(
mIssuedWake
)
{
profiler_thread_wake
(
)
;
}
}
~
AutoProfilerThreadWake
(
)
{
if
(
mIssuedWake
)
{
MOZ_ASSERT
(
!
profiler_thread_is_sleeping
(
)
)
;
profiler_thread_sleep
(
)
;
}
}
private
:
bool
mIssuedWake
;
}
;
class
ProfilingStackOwner
{
public
:
class
ProfilingStack
&
ProfilingStack
(
)
{
return
mProfilingStack
;
}
void
AddRef
(
)
const
{
+
+
mRefCnt
;
}
void
Release
(
)
const
{
MOZ_ASSERT
(
int32_t
(
mRefCnt
)
>
0
)
;
if
(
-
-
mRefCnt
=
=
0
)
{
if
(
mProfilingStack
.
stackSize
(
)
>
0
)
{
DumpStackAndCrash
(
)
;
}
delete
this
;
}
}
private
:
~
ProfilingStackOwner
(
)
=
default
;
MOZ_NORETURN
void
DumpStackAndCrash
(
)
const
;
class
ProfilingStack
mProfilingStack
;
mutable
Atomic
<
int32_t
MemoryOrdering
:
:
ReleaseAcquire
>
mRefCnt
;
}
;
class
MOZ_RAII
AutoProfilerLabel
{
public
:
AutoProfilerLabel
(
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
ProfilingStackOwner
*
profilingStackOwner
=
ProfilingStackOwnerTLS
:
:
Get
(
)
;
Push
(
profilingStackOwner
?
&
profilingStackOwner
-
>
ProfilingStack
(
)
:
nullptr
aLabel
aDynamicString
aCategoryPair
aFlags
)
;
}
AutoProfilerLabel
(
JSContext
*
aJSContext
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
)
{
Push
(
js
:
:
GetContextProfilingStackIfEnabled
(
aJSContext
)
aLabel
aDynamicString
aCategoryPair
aFlags
)
;
}
void
Push
(
ProfilingStack
*
aProfilingStack
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
mProfilingStack
=
aProfilingStack
;
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pushLabelFrame
(
aLabel
aDynamicString
this
aCategoryPair
aFlags
)
;
}
}
~
AutoProfilerLabel
(
)
{
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pop
(
)
;
}
}
private
:
ProfilingStack
*
mProfilingStack
;
public
:
class
ProfilingStackOwnerTLS
{
public
:
static
ProfilingStackOwner
*
Get
(
)
{
MOZ_ASSERT
(
sState
!
=
State
:
:
Uninitialized
"
ProfilingStackOwnerTLS
:
:
Get
(
)
should
only
be
called
after
Init
(
)
"
)
;
if
(
sState
!
=
State
:
:
Initialized
)
{
return
nullptr
;
}
return
sProfilingStackOwnerTLS
.
get
(
)
;
}
static
void
Set
(
ProfilingStackOwner
*
aProfilingStackOwner
)
{
MOZ_ASSERT
(
sState
!
=
State
:
:
Uninitialized
"
ProfilingStackOwnerTLS
:
:
Set
(
)
should
only
be
called
after
Init
(
)
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
sState
=
=
State
:
:
Initialized
"
ProfilingStackOwnerTLS
:
:
Set
(
)
should
only
be
"
"
called
after
a
successful
Init
(
)
"
)
;
sProfilingStackOwnerTLS
.
set
(
aProfilingStackOwner
)
;
}
private
:
friend
TLSRegisteredThread
;
static
void
Init
(
)
;
enum
class
State
{
Uninitialized
=
0
Initialized
Unavailable
}
;
static
State
sState
;
static
MOZ_THREAD_LOCAL
(
ProfilingStackOwner
*
)
sProfilingStackOwnerTLS
;
}
;
}
;
void
GetProfilerEnvVarsForChildProcess
(
std
:
:
function
<
void
(
const
char
*
key
const
char
*
value
)
>
&
&
aSetEnv
)
;
#
ifndef
MOZ_COLLECTING_RUNNABLE_TELEMETRY
#
define
AUTO_PROFILE_FOLLOWING_RUNNABLE
(
runnable
)
#
else
#
define
AUTO_PROFILE_FOLLOWING_RUNNABLE
(
runnable
)
\
mozilla
:
:
AutoProfileRunnable
PROFILER_RAII
(
runnable
)
class
MOZ_RAII
AutoProfileRunnable
{
public
:
explicit
AutoProfileRunnable
(
Runnable
*
aRunnable
)
:
mStartTime
(
TimeStamp
:
:
Now
(
)
)
{
if
(
!
profiler_thread_is_being_profiled
(
)
)
{
return
;
}
aRunnable
-
>
GetName
(
mName
)
;
}
explicit
AutoProfileRunnable
(
nsIRunnable
*
aRunnable
)
:
mStartTime
(
TimeStamp
:
:
Now
(
)
)
{
if
(
!
profiler_thread_is_being_profiled
(
)
)
{
return
;
}
nsCOMPtr
<
nsINamed
>
named
=
do_QueryInterface
(
aRunnable
)
;
if
(
named
)
{
named
-
>
GetName
(
mName
)
;
}
}
~
AutoProfileRunnable
(
)
{
if
(
!
profiler_thread_is_being_profiled
(
)
)
{
return
;
}
AUTO_PROFILER_STATS
(
AUTO_PROFILE_RUNNABLE
)
;
profiler_add_marker
(
"
Runnable
"
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
OTHER
MarkerTiming
:
:
IntervalUntilNowFrom
(
mStartTime
)
geckoprofiler
:
:
markers
:
:
TextMarker
{
}
mName
)
;
}
protected
:
TimeStamp
mStartTime
;
nsAutoCString
mName
;
}
;
#
endif
}
#
endif
#
endif
