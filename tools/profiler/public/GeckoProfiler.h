#
ifndef
GeckoProfiler_h
#
define
GeckoProfiler_h
#
include
"
mozilla
/
ProfilerCounts
.
h
"
#
ifndef
MOZ_GECKO_PROFILER
#
include
"
mozilla
/
UniquePtr
.
h
"
#
define
AUTO_PROFILER_INIT
#
define
PROFILER_REGISTER_THREAD
(
name
)
#
define
PROFILER_UNREGISTER_THREAD
(
)
#
define
AUTO_PROFILER_REGISTER_THREAD
(
name
)
#
define
AUTO_PROFILER_THREAD_SLEEP
#
define
AUTO_PROFILER_THREAD_WAKE
#
define
PROFILER_JS_INTERRUPT_CALLBACK
(
)
#
define
PROFILER_SET_JS_CONTEXT
(
cx
)
#
define
PROFILER_CLEAR_JS_CONTEXT
(
)
#
define
AUTO_PROFILER_LABEL
(
label
categoryPair
)
#
define
AUTO_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
label
categoryPair
nsCStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
label
categoryPair
nsStr
)
#
define
AUTO_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
categoryPair
\
ctx
flags
)
#
define
PROFILER_ADD_MARKER
(
markerName
categoryPair
)
#
define
PROFILER_ADD_MARKER_WITH_PAYLOAD
(
markerName
categoryPair
\
PayloadType
payloadArgs
)
#
define
PROFILER_ADD_NETWORK_MARKER
(
uri
pri
channel
type
start
end
\
count
cache
timings
redirect
.
.
.
)
#
define
PROFILER_TRACING
(
categoryString
markerName
categoryPair
kind
)
#
define
PROFILER_TRACING_DOCSHELL
(
categoryString
markerName
categoryPair
\
kind
docshell
)
#
define
AUTO_PROFILER_TRACING
(
categoryString
markerName
categoryPair
)
#
define
AUTO_PROFILER_TRACING_DOCSHELL
(
categoryString
markerName
\
categoryPair
docShell
)
#
define
AUTO_PROFILER_TEXT_MARKER_CAUSE
(
markerName
text
categoryPair
cause
)
#
define
AUTO_PROFILER_TEXT_MARKER_DOCSHELL
(
markerName
text
categoryPair
\
docShell
)
#
define
AUTO_PROFILER_TEXT_MARKER_DOCSHELL_CAUSE
(
\
markerName
text
categoryPair
docShell
cause
)
using
UniqueProfilerBacktrace
=
mozilla
:
:
UniquePtr
<
int
>
;
static
inline
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
{
return
nullptr
;
}
#
else
#
include
"
BaseProfiler
.
h
"
#
include
"
js
/
AllocationRecording
.
h
"
#
include
"
js
/
ProfilingFrameIterator
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PowerOfTwo
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsString
.
h
"
#
include
<
stdint
.
h
>
class
ProfilerBacktrace
;
class
ProfilerCodeAddressService
;
class
ProfilerMarkerPayload
;
class
SpliceableJSONWriter
;
namespace
mozilla
{
namespace
net
{
struct
TimingStruct
;
enum
CacheDisposition
:
uint8_t
;
}
}
class
nsIURI
;
class
nsIDocShell
;
namespace
mozilla
{
class
MallocAllocPolicy
;
template
<
class
T
size_t
MinInlineCapacity
class
AllocPolicy
>
class
Vector
;
}
#
define
PROFILER_RAII_PASTE
(
id
line
)
id
#
#
line
#
define
PROFILER_RAII_EXPAND
(
id
line
)
PROFILER_RAII_PASTE
(
id
line
)
#
define
PROFILER_RAII
PROFILER_RAII_EXPAND
(
raiiObject
__LINE__
)
#
define
PROFILER_FOR_EACH_FEATURE
(
MACRO
)
\
MACRO
(
0
"
java
"
Java
"
Profile
Java
code
Android
only
"
)
\
\
MACRO
(
1
"
js
"
JS
\
"
Get
the
JS
engine
to
expose
the
JS
stack
to
the
profiler
"
)
\
\
/
*
The
DevTools
profiler
doesn
'
t
want
the
native
addresses
.
*
/
\
MACRO
(
2
"
leaf
"
Leaf
"
Include
the
C
+
+
leaf
node
if
not
stackwalking
"
)
\
\
MACRO
(
3
"
mainthreadio
"
MainThreadIO
\
"
Add
main
thread
I
/
O
to
the
profile
"
)
\
\
MACRO
(
4
"
privacy
"
Privacy
\
"
Do
not
include
user
-
identifiable
information
"
)
\
\
MACRO
(
5
"
responsiveness
"
Responsiveness
\
"
Collect
thread
responsiveness
information
"
)
\
\
MACRO
(
6
"
screenshots
"
Screenshots
\
"
Take
a
snapshot
of
the
window
on
every
composition
"
)
\
\
MACRO
(
7
"
seqstyle
"
SequentialStyle
\
"
Disable
parallel
traversal
in
styling
"
)
\
\
MACRO
(
8
"
stackwalk
"
StackWalk
\
"
Walk
the
C
+
+
stack
not
available
on
all
platforms
"
)
\
\
MACRO
(
9
"
tasktracer
"
TaskTracer
\
"
Start
profiling
with
feature
TaskTracer
"
)
\
\
MACRO
(
10
"
threads
"
Threads
"
Profile
the
registered
secondary
threads
"
)
\
\
MACRO
(
11
"
trackopts
"
TrackOptimizations
\
"
Have
the
JavaScript
engine
track
JIT
optimizations
"
)
\
\
MACRO
(
12
"
jstracer
"
JSTracer
"
Enable
tracing
of
the
JavaScript
engine
"
)
\
\
MACRO
(
13
"
jsallocations
"
JSAllocations
\
"
Have
the
JavaScript
engine
track
allocations
"
)
\
\
MACRO
(
14
"
nostacksampling
"
NoStackSampling
\
"
Disable
all
stack
sampling
:
Cancels
\
"
js
\
"
\
"
leaf
\
"
"
\
"
\
"
stackwalk
\
"
and
labels
"
)
\
\
MACRO
(
15
"
preferencereads
"
PreferenceReads
\
"
Track
when
preferences
are
read
"
)
\
\
MACRO
(
16
"
nativeallocations
"
NativeAllocations
\
"
Collect
the
stacks
from
a
smaller
subset
of
all
native
"
\
"
allocations
biasing
towards
collecting
larger
allocations
"
)
\
\
MACRO
(
17
"
ipcmessages
"
IPCMessages
\
"
Have
the
IPC
layer
track
cross
-
process
messages
"
)
struct
ProfilerFeature
{
#
define
DECLARE
(
n_
str_
Name_
desc_
)
\
static
constexpr
uint32_t
Name_
=
(
1u
<
<
n_
)
;
\
static
constexpr
bool
Has
#
#
Name_
(
uint32_t
aFeatures
)
{
\
return
aFeatures
&
Name_
;
\
}
\
static
constexpr
void
Set
#
#
Name_
(
uint32_t
&
aFeatures
)
{
\
aFeatures
|
=
Name_
;
\
}
\
static
constexpr
void
Clear
#
#
Name_
(
uint32_t
&
aFeatures
)
{
\
aFeatures
&
=
~
Name_
;
\
}
PROFILER_FOR_EACH_FEATURE
(
DECLARE
)
#
undef
DECLARE
}
;
namespace
mozilla
{
namespace
profiler
{
namespace
detail
{
class
RacyFeatures
{
public
:
static
void
SetActive
(
uint32_t
aFeatures
)
{
sActiveAndFeatures
=
Active
|
aFeatures
;
}
static
void
SetInactive
(
)
{
sActiveAndFeatures
=
0
;
}
static
void
SetPaused
(
)
{
sActiveAndFeatures
|
=
Paused
;
}
static
void
SetUnpaused
(
)
{
sActiveAndFeatures
&
=
~
Paused
;
}
static
bool
IsActive
(
)
{
return
uint32_t
(
sActiveAndFeatures
)
&
Active
;
}
static
bool
IsActiveWithFeature
(
uint32_t
aFeature
)
{
uint32_t
af
=
sActiveAndFeatures
;
return
(
af
&
Active
)
&
&
(
af
&
aFeature
)
;
}
static
bool
IsActiveWithoutPrivacy
(
)
{
uint32_t
af
=
sActiveAndFeatures
;
return
(
af
&
Active
)
&
&
!
(
af
&
ProfilerFeature
:
:
Privacy
)
;
}
static
bool
IsActiveAndUnpausedWithoutPrivacy
(
)
{
uint32_t
af
=
sActiveAndFeatures
;
return
(
af
&
Active
)
&
&
!
(
af
&
(
Paused
|
ProfilerFeature
:
:
Privacy
)
)
;
}
private
:
static
constexpr
uint32_t
Active
=
1u
<
<
31
;
static
constexpr
uint32_t
Paused
=
1u
<
<
30
;
#
define
NO_OVERLAP
(
n_
str_
Name_
desc_
)
\
static_assert
(
ProfilerFeature
:
:
Name_
!
=
Paused
"
bad
feature
value
"
)
;
PROFILER_FOR_EACH_FEATURE
(
NO_OVERLAP
)
;
#
undef
NO_OVERLAP
static
mozilla
:
:
Atomic
<
uint32_t
mozilla
:
:
MemoryOrdering
:
:
Relaxed
recordreplay
:
:
Behavior
:
:
DontPreserve
>
sActiveAndFeatures
;
}
;
bool
IsThreadBeingProfiled
(
)
;
}
}
}
static
constexpr
mozilla
:
:
PowerOfTwo32
PROFILER_DEFAULT_ENTRIES
=
#
if
!
defined
(
ARCH_ARMV6
)
mozilla
:
:
MakePowerOfTwo32
<
1u
<
<
20
>
(
)
;
#
else
mozilla
:
:
MakePowerOfTwo32
<
1u
<
<
17
>
(
)
;
/
/
131
'
072
entries
=
1MB
#
endif
static
constexpr
mozilla
:
:
PowerOfTwo32
PROFILER_DEFAULT_STARTUP_ENTRIES
=
#
if
!
defined
(
ARCH_ARMV6
)
mozilla
:
:
MakePowerOfTwo32
<
1u
<
<
22
>
(
)
;
#
else
mozilla
:
:
MakePowerOfTwo32
<
1u
<
<
17
>
(
)
;
#
endif
#
define
PROFILER_DEFAULT_DURATION
20
/
*
seconds
for
tests
only
*
/
#
define
PROFILER_DEFAULT_INTERVAL
1
/
*
millisecond
*
/
#
define
PROFILER_MAX_INTERVAL
5000
/
*
milliseconds
*
/
void
profiler_init
(
void
*
stackTop
)
;
#
define
AUTO_PROFILER_INIT
mozilla
:
:
AutoProfilerInit
PROFILER_RAII
void
profiler_shutdown
(
)
;
void
profiler_start
(
mozilla
:
:
PowerOfTwo32
aCapacity
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
const
mozilla
:
:
Maybe
<
double
>
&
aDuration
=
mozilla
:
:
Nothing
(
)
)
;
void
profiler_stop
(
)
;
void
profiler_ensure_started
(
mozilla
:
:
PowerOfTwo32
aCapacity
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
const
mozilla
:
:
Maybe
<
double
>
&
aDuration
=
mozilla
:
:
Nothing
(
)
)
;
#
define
PROFILER_REGISTER_THREAD
(
name
)
\
do
{
\
char
stackTop
;
\
profiler_register_thread
(
name
&
stackTop
)
;
\
}
while
(
0
)
#
define
PROFILER_UNREGISTER_THREAD
(
)
profiler_unregister_thread
(
)
ProfilingStack
*
profiler_register_thread
(
const
char
*
name
void
*
guessStackTop
)
;
void
profiler_unregister_thread
(
)
;
void
profiler_register_page
(
uint64_t
aBrowsingContextID
uint64_t
aInnerWindowID
const
nsCString
&
aUrl
uint64_t
aEmbedderInnerWindowID
)
;
void
profiler_unregister_page
(
uint64_t
aRegisteredInnerWindowID
)
;
void
profiler_clear_all_pages
(
)
;
class
BaseProfilerCount
;
void
profiler_add_sampled_counter
(
BaseProfilerCount
*
aCounter
)
;
void
profiler_remove_sampled_counter
(
BaseProfilerCount
*
aCounter
)
;
#
define
AUTO_PROFILER_REGISTER_THREAD
(
name
)
\
mozilla
:
:
AutoProfilerRegisterThread
PROFILER_RAII
(
name
)
void
profiler_pause
(
)
;
void
profiler_resume
(
)
;
void
profiler_thread_sleep
(
)
;
void
profiler_thread_wake
(
)
;
#
define
AUTO_PROFILER_THREAD_SLEEP
\
mozilla
:
:
AutoProfilerThreadSleep
PROFILER_RAII
#
define
AUTO_PROFILER_THREAD_WAKE
\
mozilla
:
:
AutoProfilerThreadWake
PROFILER_RAII
#
define
PROFILER_JS_INTERRUPT_CALLBACK
(
)
profiler_js_interrupt_callback
(
)
void
profiler_js_interrupt_callback
(
)
;
#
define
PROFILER_SET_JS_CONTEXT
(
cx
)
profiler_set_js_context
(
cx
)
#
define
PROFILER_CLEAR_JS_CONTEXT
(
)
profiler_clear_js_context
(
)
void
profiler_set_js_context
(
JSContext
*
aCx
)
;
void
profiler_clear_js_context
(
)
;
inline
bool
profiler_is_active
(
)
{
return
mozilla
:
:
profiler
:
:
detail
:
:
RacyFeatures
:
:
IsActive
(
)
;
}
inline
bool
profiler_can_accept_markers
(
)
{
return
mozilla
:
:
profiler
:
:
detail
:
:
RacyFeatures
:
:
IsActiveAndUnpausedWithoutPrivacy
(
)
;
}
inline
bool
profiler_thread_is_being_profiled
(
)
{
return
profiler_is_active
(
)
&
&
mozilla
:
:
profiler
:
:
detail
:
:
IsThreadBeingProfiled
(
)
;
}
bool
profiler_is_paused
(
)
;
bool
profiler_thread_is_sleeping
(
)
;
uint32_t
profiler_get_available_features
(
)
;
bool
profiler_feature_active
(
uint32_t
aFeature
)
;
void
profiler_get_start_params
(
int
*
aEntrySize
mozilla
:
:
Maybe
<
double
>
*
aDuration
double
*
aInterval
uint32_t
*
aFeatures
mozilla
:
:
Vector
<
const
char
*
0
mozilla
:
:
MallocAllocPolicy
>
*
aFilters
)
;
double
profiler_time
(
)
;
int
profiler_current_process_id
(
)
;
int
profiler_current_thread_id
(
)
;
class
ProfilerStackCollector
{
public
:
virtual
mozilla
:
:
Maybe
<
uint64_t
>
SamplePositionInBuffer
(
)
{
return
mozilla
:
:
Nothing
(
)
;
}
virtual
mozilla
:
:
Maybe
<
uint64_t
>
BufferRangeStart
(
)
{
return
mozilla
:
:
Nothing
(
)
;
}
virtual
void
SetIsMainThread
(
)
{
}
virtual
void
CollectNativeLeafAddr
(
void
*
aAddr
)
=
0
;
virtual
void
CollectJitReturnAddr
(
void
*
aAddr
)
=
0
;
virtual
void
CollectWasmFrame
(
const
char
*
aLabel
)
=
0
;
virtual
void
CollectProfilingStackFrame
(
const
js
:
:
ProfilingStackFrame
&
aFrame
)
=
0
;
}
;
void
profiler_suspend_and_sample_thread
(
int
aThreadId
uint32_t
aFeatures
ProfilerStackCollector
&
aCollector
bool
aSampleNative
=
true
)
;
struct
ProfilerBacktraceDestructor
{
void
operator
(
)
(
ProfilerBacktrace
*
)
;
}
;
using
UniqueProfilerBacktrace
=
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
ProfilerBacktraceDestructor
>
;
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
;
struct
ProfilerStats
{
unsigned
n
=
0
;
double
sum
=
0
;
double
min
=
std
:
:
numeric_limits
<
double
>
:
:
max
(
)
;
double
max
=
0
;
void
Count
(
double
v
)
{
+
+
n
;
sum
+
=
v
;
if
(
v
<
min
)
{
min
=
v
;
}
if
(
v
>
max
)
{
max
=
v
;
}
}
}
;
struct
ProfilerBufferInfo
{
uint64_t
mRangeStart
;
uint64_t
mRangeEnd
;
uint32_t
mEntryCount
;
ProfilerStats
mIntervalsNs
;
ProfilerStats
mOverheadsNs
;
ProfilerStats
mLockingsNs
;
ProfilerStats
mCleaningsNs
;
ProfilerStats
mCountersNs
;
ProfilerStats
mThreadsNs
;
}
;
mozilla
:
:
Maybe
<
ProfilerBufferInfo
>
profiler_get_buffer_info
(
)
;
#
define
AUTO_PROFILER_LABEL
(
label
categoryPair
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
"
"
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
\
LABEL_DETERMINED_BY_CATEGORY_PAIR
)
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
cStr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
label
categoryPair
nsCStr
)
\
mozilla
:
:
Maybe
<
nsAutoCString
>
autoCStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectNsCString
;
\
if
(
profiler_is_active
(
)
)
{
\
autoCStr
.
emplace
(
nsCStr
)
;
\
raiiObjectNsCString
.
emplace
(
label
autoCStr
-
>
get
(
)
\
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
#
define
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
label
categoryPair
\
nsStr
)
\
mozilla
:
:
Maybe
<
NS_LossyConvertUTF16toASCII
>
asciiStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectLossyNsString
;
\
if
(
profiler_is_active
(
)
)
{
\
asciiStr
.
emplace
(
nsStr
)
;
\
raiiObjectLossyNsString
.
emplace
(
\
label
asciiStr
-
>
get
(
)
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
#
define
AUTO_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
ctx
label
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
categoryPair
\
ctx
flags
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
ctx
label
dynamicString
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
flags
)
#
define
PROFILER_ADD_MARKER
(
markerName
categoryPair
)
\
do
{
\
AUTO_PROFILER_STATS
(
add_marker
)
;
\
:
:
profiler_add_marker
(
markerName
\
:
:
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
while
(
false
)
void
profiler_add_marker
(
const
char
*
aMarkerName
JS
:
:
ProfilingCategoryPair
aCategoryPair
)
;
#
define
PROFILER_ADD_MARKER_WITH_PAYLOAD
(
\
markerName
categoryPair
PayloadType
parenthesizedPayloadArgs
)
\
do
{
\
AUTO_PROFILER_STATS
(
add_marker_with_
#
#
PayloadType
)
;
\
:
:
profiler_add_marker
(
markerName
\
:
:
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
PayloadType
parenthesizedPayloadArgs
)
;
\
}
while
(
false
)
void
profiler_add_marker
(
const
char
*
aMarkerName
JS
:
:
ProfilingCategoryPair
aCategoryPair
const
ProfilerMarkerPayload
&
aPayload
)
;
void
profiler_add_js_marker
(
const
char
*
aMarkerName
)
;
void
profiler_add_js_allocation_marker
(
JS
:
:
RecordAllocationInfo
&
&
info
)
;
void
profiler_add_native_allocation_marker
(
int64_t
aSize
)
;
bool
profiler_is_locked_on_current_thread
(
)
;
void
profiler_add_marker_for_thread
(
int
aThreadId
JS
:
:
ProfilingCategoryPair
aCategoryPair
const
char
*
aMarkerName
mozilla
:
:
UniquePtr
<
ProfilerMarkerPayload
>
aPayload
)
;
enum
class
NetworkLoadType
{
LOAD_START
LOAD_STOP
LOAD_REDIRECT
}
;
#
define
PROFILER_ADD_NETWORK_MARKER
(
uri
pri
channel
type
start
end
\
count
cache
timings
redirect
.
.
.
)
\
profiler_add_network_marker
(
uri
pri
channel
type
start
end
count
\
cache
timings
redirect
#
#
__VA_ARGS__
)
void
profiler_add_network_marker
(
nsIURI
*
aURI
int32_t
aPriority
uint64_t
aChannelId
NetworkLoadType
aType
mozilla
:
:
TimeStamp
aStart
mozilla
:
:
TimeStamp
aEnd
int64_t
aCount
mozilla
:
:
net
:
:
CacheDisposition
aCacheDisposition
const
mozilla
:
:
net
:
:
TimingStruct
*
aTimings
=
nullptr
nsIURI
*
aRedirectURI
=
nullptr
UniqueProfilerBacktrace
aSource
=
nullptr
)
;
enum
TracingKind
{
TRACING_EVENT
TRACING_INTERVAL_START
TRACING_INTERVAL_END
}
;
mozilla
:
:
Maybe
<
uint64_t
>
profiler_get_inner_window_id_from_docshell
(
nsIDocShell
*
aDocshell
)
;
#
define
PROFILER_TRACING
(
categoryString
markerName
categoryPair
kind
)
\
profiler_tracing
(
categoryString
markerName
\
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
kind
)
#
define
PROFILER_TRACING_DOCSHELL
(
categoryString
markerName
categoryPair
\
kind
docShell
)
\
profiler_tracing
(
categoryString
markerName
\
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
kind
\
profiler_get_inner_window_id_from_docshell
(
docShell
)
)
void
profiler_tracing
(
const
char
*
aCategoryString
const
char
*
aMarkerName
JS
:
:
ProfilingCategoryPair
aCategoryPair
TracingKind
aKind
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
=
mozilla
:
:
Nothing
(
)
)
;
void
profiler_tracing
(
const
char
*
aCategoryString
const
char
*
aMarkerName
JS
:
:
ProfilingCategoryPair
aCategoryPair
TracingKind
aKind
UniqueProfilerBacktrace
aCause
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
=
mozilla
:
:
Nothing
(
)
)
;
#
define
AUTO_PROFILER_TRACING
(
categoryString
markerName
categoryPair
)
\
mozilla
:
:
AutoProfilerTracing
PROFILER_RAII
(
\
categoryString
markerName
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
mozilla
:
:
Nothing
(
)
)
#
define
AUTO_PROFILER_TRACING_DOCSHELL
(
categoryString
markerName
\
categoryPair
docShell
)
\
mozilla
:
:
AutoProfilerTracing
PROFILER_RAII
(
\
categoryString
markerName
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
profiler_get_inner_window_id_from_docshell
(
docShell
)
)
void
profiler_add_text_marker
(
const
char
*
aMarkerName
const
nsACString
&
aText
JS
:
:
ProfilingCategoryPair
aCategoryPair
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
=
mozilla
:
:
Nothing
(
)
UniqueProfilerBacktrace
aCause
=
nullptr
)
;
class
MOZ_RAII
AutoProfilerTextMarker
{
public
:
AutoProfilerTextMarker
(
const
char
*
aMarkerName
const
nsACString
&
aText
JS
:
:
ProfilingCategoryPair
aCategoryPair
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
UniqueProfilerBacktrace
&
&
aCause
=
nullptr
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mMarkerName
(
aMarkerName
)
mText
(
aText
)
mCategoryPair
(
aCategoryPair
)
mStartTime
(
mozilla
:
:
TimeStamp
:
:
NowUnfuzzed
(
)
)
mCause
(
std
:
:
move
(
aCause
)
)
mInnerWindowID
(
aInnerWindowID
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
~
AutoProfilerTextMarker
(
)
{
profiler_add_text_marker
(
mMarkerName
mText
mCategoryPair
mStartTime
mozilla
:
:
TimeStamp
:
:
NowUnfuzzed
(
)
mInnerWindowID
std
:
:
move
(
mCause
)
)
;
}
protected
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
const
char
*
mMarkerName
;
nsCString
mText
;
const
JS
:
:
ProfilingCategoryPair
mCategoryPair
;
mozilla
:
:
TimeStamp
mStartTime
;
UniqueProfilerBacktrace
mCause
;
const
mozilla
:
:
Maybe
<
uint64_t
>
mInnerWindowID
;
}
;
#
define
AUTO_PROFILER_TEXT_MARKER_CAUSE
(
markerName
text
categoryPair
\
cause
)
\
AutoProfilerTextMarker
PROFILER_RAII
(
\
markerName
text
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
mozilla
:
:
Nothing
(
)
cause
)
#
define
AUTO_PROFILER_TEXT_MARKER_DOCSHELL
(
markerName
text
categoryPair
\
docShell
)
\
AutoProfilerTextMarker
PROFILER_RAII
(
\
markerName
text
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
profiler_get_inner_window_id_from_docshell
(
docShell
)
)
#
define
AUTO_PROFILER_TEXT_MARKER_DOCSHELL_CAUSE
(
\
markerName
text
categoryPair
docShell
cause
)
\
AutoProfilerTextMarker
PROFILER_RAII
(
\
markerName
text
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
profiler_get_inner_window_id_from_docshell
(
docShell
)
cause
)
void
profiler_set_process_name
(
const
nsACString
&
aProcessName
)
;
mozilla
:
:
UniquePtr
<
char
[
]
>
profiler_get_profile
(
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
)
;
bool
profiler_stream_json_for_this_process
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
ProfilerCodeAddressService
*
aService
=
nullptr
)
;
extern
"
C
"
{
void
profiler_save_profile_to_file
(
const
char
*
aFilename
)
;
}
namespace
mozilla
{
class
MOZ_RAII
AutoProfilerInit
{
public
:
explicit
AutoProfilerInit
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_init
(
this
)
;
}
~
AutoProfilerInit
(
)
{
profiler_shutdown
(
)
;
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoProfilerRegisterThread
final
{
public
:
explicit
AutoProfilerRegisterThread
(
const
char
*
aName
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_register_thread
(
aName
this
)
;
}
~
AutoProfilerRegisterThread
(
)
{
profiler_unregister_thread
(
)
;
}
private
:
AutoProfilerRegisterThread
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
AutoProfilerRegisterThread
&
operator
=
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoProfilerThreadSleep
{
public
:
explicit
AutoProfilerThreadSleep
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_thread_sleep
(
)
;
}
~
AutoProfilerThreadSleep
(
)
{
profiler_thread_wake
(
)
;
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoProfilerThreadWake
{
public
:
explicit
AutoProfilerThreadWake
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
:
mIssuedWake
(
profiler_thread_is_sleeping
(
)
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
if
(
mIssuedWake
)
{
profiler_thread_wake
(
)
;
}
}
~
AutoProfilerThreadWake
(
)
{
if
(
mIssuedWake
)
{
MOZ_ASSERT
(
!
profiler_thread_is_sleeping
(
)
)
;
profiler_thread_sleep
(
)
;
}
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
bool
mIssuedWake
;
}
;
class
MOZ_RAII
AutoProfilerLabel
{
public
:
AutoProfilerLabel
(
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
Push
(
sProfilingStack
.
get
(
)
aLabel
aDynamicString
aCategoryPair
aFlags
)
;
}
AutoProfilerLabel
(
JSContext
*
aJSContext
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
Push
(
js
:
:
GetContextProfilingStackIfEnabled
(
aJSContext
)
aLabel
aDynamicString
aCategoryPair
aFlags
)
;
}
void
Push
(
ProfilingStack
*
aProfilingStack
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
mProfilingStack
=
aProfilingStack
;
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pushLabelFrame
(
aLabel
aDynamicString
this
aCategoryPair
aFlags
)
;
}
}
~
AutoProfilerLabel
(
)
{
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pop
(
)
;
}
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
ProfilingStack
*
mProfilingStack
;
public
:
static
MOZ_THREAD_LOCAL
(
ProfilingStack
*
)
sProfilingStack
;
}
;
class
MOZ_RAII
AutoProfilerTracing
{
public
:
AutoProfilerTracing
(
const
char
*
aCategoryString
const
char
*
aMarkerName
JS
:
:
ProfilingCategoryPair
aCategoryPair
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mCategoryString
(
aCategoryString
)
mMarkerName
(
aMarkerName
)
mCategoryPair
(
aCategoryPair
)
mInnerWindowID
(
aInnerWindowID
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_tracing
(
mCategoryString
mMarkerName
aCategoryPair
TRACING_INTERVAL_START
mInnerWindowID
)
;
}
AutoProfilerTracing
(
const
char
*
aCategoryString
const
char
*
aMarkerName
JS
:
:
ProfilingCategoryPair
aCategoryPair
UniqueProfilerBacktrace
aBacktrace
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mCategoryString
(
aCategoryString
)
mMarkerName
(
aMarkerName
)
mCategoryPair
(
aCategoryPair
)
mInnerWindowID
(
aInnerWindowID
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_tracing
(
mCategoryString
mMarkerName
aCategoryPair
TRACING_INTERVAL_START
std
:
:
move
(
aBacktrace
)
mInnerWindowID
)
;
}
~
AutoProfilerTracing
(
)
{
profiler_tracing
(
mCategoryString
mMarkerName
mCategoryPair
TRACING_INTERVAL_END
mInnerWindowID
)
;
}
protected
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
const
char
*
mCategoryString
;
const
char
*
mMarkerName
;
const
JS
:
:
ProfilingCategoryPair
mCategoryPair
;
const
mozilla
:
:
Maybe
<
uint64_t
>
mInnerWindowID
;
}
;
void
GetProfilerEnvVarsForChildProcess
(
std
:
:
function
<
void
(
const
char
*
key
const
char
*
value
)
>
&
&
aSetEnv
)
;
}
#
endif
#
endif
