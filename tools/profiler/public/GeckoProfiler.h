#
ifndef
GeckoProfiler_h
#
define
GeckoProfiler_h
#
include
"
BaseProfiler
.
h
"
#
include
"
mozilla
/
ProfilerCounts
.
h
"
#
include
"
mozilla
/
ProfilerLabels
.
h
"
#
include
"
mozilla
/
ProfilerMarkers
.
h
"
#
include
"
mozilla
/
ProfilerState
.
h
"
#
include
"
mozilla
/
ProfilerThreadSleep
.
h
"
#
include
"
mozilla
/
ProfilerThreadState
.
h
"
#
include
"
mozilla
/
ProgressLogger
.
h
"
#
ifndef
MOZ_GECKO_PROFILER
#
include
"
mozilla
/
UniquePtr
.
h
"
#
define
PROFILER_REGISTER_THREAD
(
name
)
#
define
PROFILER_UNREGISTER_THREAD
(
)
#
define
AUTO_PROFILER_REGISTER_THREAD
(
name
)
#
define
PROFILER_JS_INTERRUPT_CALLBACK
(
)
#
define
PROFILER_SET_JS_CONTEXT
(
cx
)
#
define
PROFILER_CLEAR_JS_CONTEXT
(
)
struct
ProfilerBacktrace
{
}
;
using
UniqueProfilerBacktrace
=
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
>
;
static
inline
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
{
return
nullptr
;
}
struct
ProfileChunkedBuffer
{
}
;
static
inline
bool
profiler_capture_backtrace_into
(
mozilla
:
:
ProfileChunkedBuffer
&
aChunkedBuffer
mozilla
:
:
StackCaptureOptions
aCaptureOptions
)
{
return
false
;
}
static
inline
mozilla
:
:
UniquePtr
<
mozilla
:
:
ProfileChunkedBuffer
>
profiler_capture_backtrace
(
)
{
return
nullptr
;
}
static
inline
void
profiler_set_process_name
(
const
nsACString
&
aProcessName
const
nsACString
*
aETLDplus1
=
nullptr
)
{
}
static
inline
void
profiler_received_exit_profile
(
const
nsCString
&
aExitProfile
)
{
}
static
inline
void
profiler_register_page
(
uint64_t
aTabID
uint64_t
aInnerWindowID
const
nsCString
&
aUrl
uint64_t
aEmbedderInnerWindowID
bool
aIsPrivateBrowsing
)
{
}
static
inline
void
profiler_unregister_page
(
uint64_t
aRegisteredInnerWindowID
)
{
}
static
inline
void
GetProfilerEnvVarsForChildProcess
(
std
:
:
function
<
void
(
const
char
*
key
const
char
*
value
)
>
&
&
aSetEnv
)
{
}
#
else
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BaseProfilerRAIIMacro
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PowerOfTwo
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
<
functional
>
#
include
<
stdint
.
h
>
class
ProfilerBacktrace
;
class
ProfilerCodeAddressService
;
struct
JSContext
;
namespace
mozilla
{
class
ProfileBufferControlledChunkManager
;
class
ProfileChunkedBuffer
;
namespace
baseprofiler
{
class
SpliceableJSONWriter
;
}
}
class
nsIURI
;
#
define
PROFILER_REGISTER_THREAD
(
name
)
\
do
{
\
char
stackTop
;
\
profiler_register_thread
(
name
&
stackTop
)
;
\
}
while
(
0
)
#
define
PROFILER_UNREGISTER_THREAD
(
)
profiler_unregister_thread
(
)
ProfilingStack
*
profiler_register_thread
(
const
char
*
name
void
*
guessStackTop
)
;
void
profiler_unregister_thread
(
)
;
void
profiler_register_page
(
uint64_t
aTabID
uint64_t
aInnerWindowID
const
nsCString
&
aUrl
uint64_t
aEmbedderInnerWindowID
bool
aIsPrivateBrowsing
)
;
void
profiler_unregister_page
(
uint64_t
aRegisteredInnerWindowID
)
;
void
profiler_clear_all_pages
(
)
;
class
BaseProfilerCount
;
void
profiler_add_sampled_counter
(
BaseProfilerCount
*
aCounter
)
;
void
profiler_remove_sampled_counter
(
BaseProfilerCount
*
aCounter
)
;
#
define
AUTO_PROFILER_REGISTER_THREAD
(
name
)
\
mozilla
:
:
AutoProfilerRegisterThread
PROFILER_RAII
(
name
)
enum
class
SamplingState
{
JustStopped
SamplingPaused
NoStackSamplingCompleted
SamplingCompleted
}
;
using
PostSamplingCallback
=
std
:
:
function
<
void
(
SamplingState
)
>
;
[
[
nodiscard
]
]
bool
profiler_callback_after_sampling
(
PostSamplingCallback
&
&
aCallback
)
;
#
define
PROFILER_JS_INTERRUPT_CALLBACK
(
)
profiler_js_interrupt_callback
(
)
void
profiler_js_interrupt_callback
(
)
;
#
define
PROFILER_SET_JS_CONTEXT
(
cx
)
profiler_set_js_context
(
cx
)
#
define
PROFILER_CLEAR_JS_CONTEXT
(
)
profiler_clear_js_context
(
)
void
profiler_set_js_context
(
JSContext
*
aCx
)
;
void
profiler_clear_js_context
(
)
;
mozilla
:
:
ProfileBufferControlledChunkManager
*
profiler_get_controlled_chunk_manager
(
)
;
double
profiler_time
(
)
;
class
ProfilerStackCollector
{
public
:
virtual
mozilla
:
:
Maybe
<
uint64_t
>
SamplePositionInBuffer
(
)
{
return
mozilla
:
:
Nothing
(
)
;
}
virtual
mozilla
:
:
Maybe
<
uint64_t
>
BufferRangeStart
(
)
{
return
mozilla
:
:
Nothing
(
)
;
}
virtual
void
SetIsMainThread
(
)
{
}
virtual
void
CollectNativeLeafAddr
(
void
*
aAddr
)
=
0
;
virtual
void
CollectJitReturnAddr
(
void
*
aAddr
)
=
0
;
virtual
void
CollectWasmFrame
(
const
char
*
aLabel
)
=
0
;
virtual
void
CollectProfilingStackFrame
(
const
js
:
:
ProfilingStackFrame
&
aFrame
)
=
0
;
}
;
void
profiler_suspend_and_sample_thread
(
ProfilerThreadId
aThreadId
uint32_t
aFeatures
ProfilerStackCollector
&
aCollector
bool
aSampleNative
=
true
)
;
struct
ProfilerBacktraceDestructor
{
void
operator
(
)
(
ProfilerBacktrace
*
)
;
}
;
using
UniqueProfilerBacktrace
=
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
ProfilerBacktraceDestructor
>
;
bool
profiler_capture_backtrace_into
(
mozilla
:
:
ProfileChunkedBuffer
&
aChunkedBuffer
mozilla
:
:
StackCaptureOptions
aCaptureOptions
)
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
ProfileChunkedBuffer
>
profiler_capture_backtrace
(
)
;
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
;
struct
ProfilerStats
{
unsigned
n
=
0
;
double
sum
=
0
;
double
min
=
std
:
:
numeric_limits
<
double
>
:
:
max
(
)
;
double
max
=
0
;
void
Count
(
double
v
)
{
+
+
n
;
sum
+
=
v
;
if
(
v
<
min
)
{
min
=
v
;
}
if
(
v
>
max
)
{
max
=
v
;
}
}
}
;
struct
ProfilerBufferInfo
{
uint64_t
mRangeStart
;
uint64_t
mRangeEnd
;
uint32_t
mEntryCount
;
ProfilerStats
mIntervalsUs
;
ProfilerStats
mOverheadsUs
;
ProfilerStats
mLockingsUs
;
ProfilerStats
mCleaningsUs
;
ProfilerStats
mCountersUs
;
ProfilerStats
mThreadsUs
;
}
;
mozilla
:
:
Maybe
<
ProfilerBufferInfo
>
profiler_get_buffer_info
(
)
;
void
profiler_set_process_name
(
const
nsACString
&
aProcessName
const
nsACString
*
aETLDplus1
=
nullptr
)
;
void
profiler_received_exit_profile
(
const
nsCString
&
aExitProfile
)
;
mozilla
:
:
UniquePtr
<
char
[
]
>
profiler_get_profile
(
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
)
;
bool
profiler_stream_json_for_this_process
(
mozilla
:
:
baseprofiler
:
:
SpliceableJSONWriter
&
aWriter
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
ProfilerCodeAddressService
*
aService
=
nullptr
mozilla
:
:
ProgressLogger
aProgressLogger
=
{
}
)
;
extern
"
C
"
{
void
profiler_save_profile_to_file
(
const
char
*
aFilename
)
;
}
namespace
mozilla
{
class
MOZ_RAII
AutoProfilerRegisterThread
final
{
public
:
explicit
AutoProfilerRegisterThread
(
const
char
*
aName
)
{
profiler_register_thread
(
aName
this
)
;
}
~
AutoProfilerRegisterThread
(
)
{
profiler_unregister_thread
(
)
;
}
private
:
AutoProfilerRegisterThread
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
AutoProfilerRegisterThread
&
operator
=
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
}
;
void
GetProfilerEnvVarsForChildProcess
(
std
:
:
function
<
void
(
const
char
*
key
const
char
*
value
)
>
&
&
aSetEnv
)
;
}
#
endif
#
endif
