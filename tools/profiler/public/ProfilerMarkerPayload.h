#
ifndef
ProfilerMarkerPayload_h
#
define
ProfilerMarkerPayload_h
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
gfxASurface
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Layer
;
}
}
class
SpliceableJSONWriter
;
class
UniqueStacks
;
class
ProfilerMarkerPayload
{
public
:
explicit
ProfilerMarkerPayload
(
UniqueProfilerBacktrace
aStack
=
nullptr
)
;
ProfilerMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
UniqueProfilerBacktrace
aStack
=
nullptr
)
;
virtual
~
ProfilerMarkerPayload
(
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
=
0
;
mozilla
:
:
TimeStamp
GetStartTime
(
)
const
{
return
mStartTime
;
}
protected
:
void
StreamCommonProps
(
const
char
*
aMarkerType
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
;
void
SetStack
(
UniqueProfilerBacktrace
aStack
)
{
mStack
=
mozilla
:
:
Move
(
aStack
)
;
}
private
:
mozilla
:
:
TimeStamp
mStartTime
;
mozilla
:
:
TimeStamp
mEndTime
;
UniqueProfilerBacktrace
mStack
;
}
;
class
TracingMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
TracingMarkerPayload
(
const
char
*
aCategory
TracingKind
aKind
)
;
TracingMarkerPayload
(
const
char
*
aCategory
TracingKind
aKind
UniqueProfilerBacktrace
aCause
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
const
char
*
mCategory
;
TracingKind
mKind
;
}
;
class
IOMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
IOMarkerPayload
(
const
char
*
aSource
const
char
*
aFilename
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
UniqueProfilerBacktrace
aStack
)
;
~
IOMarkerPayload
(
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
const
char
*
mSource
;
char
*
mFilename
;
}
;
class
DOMEventMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
DOMEventMarkerPayload
(
const
nsAString
&
aType
uint16_t
aPhase
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
;
~
DOMEventMarkerPayload
(
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
nsString
mType
;
uint16_t
mPhase
;
}
;
class
UserTimingMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
UserTimingMarkerPayload
(
const
nsAString
&
aName
const
mozilla
:
:
TimeStamp
&
aStartTime
)
;
UserTimingMarkerPayload
(
const
nsAString
&
aName
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
;
~
UserTimingMarkerPayload
(
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
const
char
*
mEntryType
;
nsString
mName
;
}
;
class
LayerTranslationMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
LayerTranslationMarkerPayload
(
mozilla
:
:
layers
:
:
Layer
*
aLayer
mozilla
:
:
gfx
:
:
Point
aPoint
)
;
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
mozilla
:
:
layers
:
:
Layer
*
mLayer
;
mozilla
:
:
gfx
:
:
Point
mPoint
;
}
;
#
include
"
Units
.
h
"
class
VsyncMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
explicit
VsyncMarkerPayload
(
mozilla
:
:
TimeStamp
aVsyncTimestamp
)
;
virtual
~
VsyncMarkerPayload
(
)
{
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
mozilla
:
:
TimeStamp
mVsyncTimestamp
;
}
;
class
GPUMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
GPUMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aCpuTimeStart
const
mozilla
:
:
TimeStamp
&
aCpuTimeEnd
uint64_t
aGpuTimeStart
uint64_t
aGpuTimeEnd
)
;
~
GPUMarkerPayload
(
)
{
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
mozilla
:
:
TimeStamp
mCpuTimeStart
;
mozilla
:
:
TimeStamp
mCpuTimeEnd
;
uint64_t
mGpuTimeStart
;
uint64_t
mGpuTimeEnd
;
}
;
class
GCSliceMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
GCSliceMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
JS
:
:
UniqueChars
&
&
aTimingJSON
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
nullptr
)
mTimingJSON
(
mozilla
:
:
Move
(
aTimingJSON
)
)
{
}
virtual
~
GCSliceMarkerPayload
(
)
{
}
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
JS
:
:
UniqueChars
mTimingJSON
;
}
;
class
GCMajorMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
GCMajorMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
JS
:
:
UniqueChars
&
&
aTimingJSON
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
nullptr
)
mTimingJSON
(
mozilla
:
:
Move
(
aTimingJSON
)
)
{
}
virtual
~
GCMajorMarkerPayload
(
)
{
}
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
JS
:
:
UniqueChars
mTimingJSON
;
}
;
class
GCMinorMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
GCMinorMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
JS
:
:
UniqueChars
&
&
aTimingData
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
nullptr
)
mTimingData
(
mozilla
:
:
Move
(
aTimingData
)
)
{
}
virtual
~
GCMinorMarkerPayload
(
)
{
}
;
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
;
private
:
JS
:
:
UniqueChars
mTimingData
;
}
;
#
endif
