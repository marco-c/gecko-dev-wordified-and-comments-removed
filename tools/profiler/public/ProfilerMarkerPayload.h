#
ifndef
ProfilerMarkerPayload_h
#
define
ProfilerMarkerPayload_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
net
/
TimingStruct
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
ProfileBufferEntrySerialization
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCRTGlue
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
AllocationRecording
.
h
"
#
include
"
js
/
ProfilingFrameIterator
.
h
"
#
include
"
gfxASurface
.
h
"
#
include
"
mozilla
/
ServoTraversalStatistics
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Layer
;
}
}
class
SpliceableJSONWriter
;
class
UniqueStacks
;
class
ProfilerMarkerPayload
{
public
:
explicit
ProfilerMarkerPayload
(
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
=
mozilla
:
:
Nothing
(
)
UniqueProfilerBacktrace
aStack
=
nullptr
)
:
mCommonProps
{
mozilla
:
:
TimeStamp
{
}
mozilla
:
:
TimeStamp
{
}
std
:
:
move
(
aStack
)
aInnerWindowID
}
{
}
ProfilerMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
=
mozilla
:
:
Nothing
(
)
UniqueProfilerBacktrace
aStack
=
nullptr
)
:
mCommonProps
{
aStartTime
aEndTime
std
:
:
move
(
aStack
)
aInnerWindowID
}
{
}
virtual
~
ProfilerMarkerPayload
(
)
=
default
;
static
mozilla
:
:
ProfileBufferEntryWriter
:
:
Length
TagAndSerializationBytes
(
const
ProfilerMarkerPayload
*
aPayload
)
{
if
(
!
aPayload
)
{
return
sizeof
(
DeserializerTag
)
;
}
return
aPayload
-
>
TagAndSerializationBytes
(
)
;
}
static
void
TagAndSerialize
(
const
ProfilerMarkerPayload
*
aPayload
mozilla
:
:
ProfileBufferEntryWriter
&
aEntryWriter
)
{
if
(
!
aPayload
)
{
aEntryWriter
.
WriteObject
(
DeserializerTag
(
0
)
)
;
return
;
}
aPayload
-
>
SerializeTagAndPayload
(
aEntryWriter
)
;
}
static
mozilla
:
:
UniquePtr
<
ProfilerMarkerPayload
>
DeserializeTagAndPayload
(
mozilla
:
:
ProfileBufferEntryReader
&
aER
)
{
const
auto
tag
=
aER
.
ReadObject
<
DeserializerTag
>
(
)
;
Deserializer
deserializer
=
DeserializerForTag
(
tag
)
;
return
deserializer
(
aER
)
;
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
const
=
0
;
mozilla
:
:
TimeStamp
GetStartTime
(
)
const
{
return
mCommonProps
.
mStartTime
;
}
protected
:
typedef
mozilla
:
:
UniquePtr
<
ProfilerMarkerPayload
>
(
*
Deserializer
)
(
mozilla
:
:
ProfileBufferEntryReader
&
)
;
using
DeserializerTag
=
unsigned
char
;
static
constexpr
DeserializerTag
DeserializerMax
=
32
;
using
DeserializerTagAtomic
=
int
;
static
mozilla
:
:
Atomic
<
DeserializerTagAtomic
mozilla
:
:
ReleaseAcquire
>
sDeserializerCount
;
static
Deserializer
sDeserializers
[
DeserializerMax
]
;
static
DeserializerTag
TagForDeserializer
(
Deserializer
aDeserializer
)
;
static
Deserializer
DeserializerForTag
(
DeserializerTag
aTag
)
;
struct
CommonProps
{
mozilla
:
:
TimeStamp
mStartTime
;
mozilla
:
:
TimeStamp
mEndTime
;
UniqueProfilerBacktrace
mStack
;
mozilla
:
:
Maybe
<
uint64_t
>
mInnerWindowID
;
}
;
explicit
ProfilerMarkerPayload
(
CommonProps
&
&
aCommonProps
)
:
mCommonProps
(
std
:
:
move
(
aCommonProps
)
)
{
}
mozilla
:
:
ProfileBufferEntryWriter
:
:
Length
CommonPropsTagAndSerializationBytes
(
)
const
;
void
SerializeTagAndCommonProps
(
DeserializerTag
aDeserializerTag
mozilla
:
:
ProfileBufferEntryWriter
&
aEntryWriter
)
const
;
static
CommonProps
DeserializeCommonProps
(
mozilla
:
:
ProfileBufferEntryReader
&
aEntryReader
)
;
void
StreamType
(
const
char
*
aMarkerType
SpliceableJSONWriter
&
aWriter
)
const
;
void
StreamCommonProps
(
const
char
*
aMarkerType
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
const
;
private
:
virtual
mozilla
:
:
ProfileBufferEntryWriter
:
:
Length
TagAndSerializationBytes
(
)
const
=
0
;
virtual
void
SerializeTagAndPayload
(
mozilla
:
:
ProfileBufferEntryWriter
&
aEntryWriter
)
const
=
0
;
CommonProps
mCommonProps
;
}
;
#
define
DECL_STREAM_PAYLOAD
\
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
\
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
\
UniqueStacks
&
aUniqueStacks
)
const
override
;
\
static
mozilla
:
:
UniquePtr
<
ProfilerMarkerPayload
>
Deserialize
(
\
mozilla
:
:
ProfileBufferEntryReader
&
aEntryReader
)
;
\
mozilla
:
:
ProfileBufferEntryWriter
:
:
Length
TagAndSerializationBytes
(
)
\
const
override
;
\
void
SerializeTagAndPayload
(
mozilla
:
:
ProfileBufferEntryWriter
&
aEntryWriter
)
\
const
override
;
class
TracingMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
TracingMarkerPayload
(
const
char
*
aCategory
TracingKind
aKind
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
=
mozilla
:
:
Nothing
(
)
UniqueProfilerBacktrace
aCause
=
nullptr
)
:
ProfilerMarkerPayload
(
aInnerWindowID
std
:
:
move
(
aCause
)
)
mCategory
(
aCategory
)
mKind
(
aKind
)
{
}
TracingMarkerPayload
(
const
char
*
aCategory
TracingKind
aKind
const
mozilla
:
:
TimeStamp
&
aTime
)
:
ProfilerMarkerPayload
(
aTime
aTime
mozilla
:
:
Nothing
(
)
nullptr
)
mCategory
(
aCategory
)
mKind
(
aKind
)
{
}
TracingMarkerPayload
(
const
char
*
aCategory
const
mozilla
:
:
TimeStamp
&
aStart
const
mozilla
:
:
TimeStamp
&
aEnd
)
:
ProfilerMarkerPayload
(
aStart
aEnd
mozilla
:
:
Nothing
(
)
nullptr
)
mCategory
(
aCategory
)
mKind
(
TRACING_EVENT
)
{
}
DECL_STREAM_PAYLOAD
protected
:
TracingMarkerPayload
(
CommonProps
&
&
aCommonProps
const
char
*
aCategory
TracingKind
aKind
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mCategory
(
aCategory
)
mKind
(
aKind
)
{
}
void
SerializeTagAndPayload
(
DeserializerTag
aDeserializerTag
mozilla
:
:
ProfileBufferEntryWriter
&
aEntryWriter
)
const
;
private
:
const
char
*
mCategory
;
TracingKind
mKind
;
}
;
class
BudgetMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
BudgetMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
{
}
DECL_STREAM_PAYLOAD
private
:
BudgetMarkerPayload
(
CommonProps
&
&
aCommonProps
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
{
}
}
;
class
FileIOMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
FileIOMarkerPayload
(
const
char
*
aOperation
const
char
*
aSource
const
char
*
aFilename
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
UniqueProfilerBacktrace
aStack
const
mozilla
:
:
Maybe
<
int
>
&
aIOThreadId
=
mozilla
:
:
Nothing
(
)
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
mozilla
:
:
Nothing
(
)
std
:
:
move
(
aStack
)
)
mSource
(
aSource
)
mOperation
(
aOperation
?
strdup
(
aOperation
)
:
nullptr
)
mFilename
(
aFilename
?
strdup
(
aFilename
)
:
nullptr
)
mIOThreadId
(
aIOThreadId
)
{
MOZ_ASSERT
(
aSource
)
;
}
void
SetIOThreadId
(
int
aIOThreadId
)
{
mIOThreadId
=
mozilla
:
:
Some
(
aIOThreadId
)
;
}
DECL_STREAM_PAYLOAD
private
:
FileIOMarkerPayload
(
CommonProps
&
&
aCommonProps
const
char
*
aSource
mozilla
:
:
UniqueFreePtr
<
char
>
&
&
aOperation
mozilla
:
:
UniqueFreePtr
<
char
>
&
&
aFilename
const
mozilla
:
:
Maybe
<
int
>
&
aIOThreadId
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mSource
(
aSource
)
mOperation
(
std
:
:
move
(
aOperation
)
)
mFilename
(
std
:
:
move
(
aFilename
)
)
mIOThreadId
(
aIOThreadId
)
{
}
const
char
*
mSource
;
mozilla
:
:
UniqueFreePtr
<
char
>
mOperation
;
mozilla
:
:
UniqueFreePtr
<
char
>
mFilename
;
mozilla
:
:
Maybe
<
int
>
mIOThreadId
;
}
;
class
DOMEventMarkerPayload
:
public
TracingMarkerPayload
{
public
:
DOMEventMarkerPayload
(
const
nsAString
&
aEventType
const
mozilla
:
:
TimeStamp
&
aTimeStamp
const
char
*
aCategory
TracingKind
aKind
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
)
:
TracingMarkerPayload
(
aCategory
aKind
aInnerWindowID
)
mTimeStamp
(
aTimeStamp
)
mEventType
(
aEventType
)
{
}
DECL_STREAM_PAYLOAD
private
:
DOMEventMarkerPayload
(
CommonProps
&
&
aCommonProps
const
char
*
aCategory
TracingKind
aKind
mozilla
:
:
TimeStamp
aTimeStamp
nsString
aEventType
)
:
TracingMarkerPayload
(
std
:
:
move
(
aCommonProps
)
aCategory
aKind
)
mTimeStamp
(
aTimeStamp
)
mEventType
(
aEventType
)
{
}
mozilla
:
:
TimeStamp
mTimeStamp
;
nsString
mEventType
;
}
;
class
PrefMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
PrefMarkerPayload
(
const
char
*
aPrefName
const
mozilla
:
:
Maybe
<
mozilla
:
:
PrefValueKind
>
&
aPrefKind
const
mozilla
:
:
Maybe
<
mozilla
:
:
PrefType
>
&
aPrefType
const
nsCString
&
aPrefValue
const
mozilla
:
:
TimeStamp
&
aPrefAccessTime
)
:
ProfilerMarkerPayload
(
aPrefAccessTime
aPrefAccessTime
)
mPrefAccessTime
(
aPrefAccessTime
)
mPrefName
(
aPrefName
)
mPrefKind
(
aPrefKind
)
mPrefType
(
aPrefType
)
mPrefValue
(
aPrefValue
)
{
}
DECL_STREAM_PAYLOAD
private
:
PrefMarkerPayload
(
CommonProps
&
&
aCommonProps
mozilla
:
:
TimeStamp
aPrefAccessTime
nsCString
&
&
aPrefName
mozilla
:
:
Maybe
<
mozilla
:
:
PrefValueKind
>
&
&
aPrefKind
mozilla
:
:
Maybe
<
mozilla
:
:
PrefType
>
&
&
aPrefType
nsCString
&
&
aPrefValue
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mPrefAccessTime
(
aPrefAccessTime
)
mPrefName
(
aPrefName
)
mPrefKind
(
aPrefKind
)
mPrefType
(
aPrefType
)
mPrefValue
(
aPrefValue
)
{
}
mozilla
:
:
TimeStamp
mPrefAccessTime
;
nsCString
mPrefName
;
mozilla
:
:
Maybe
<
mozilla
:
:
PrefValueKind
>
mPrefKind
;
mozilla
:
:
Maybe
<
mozilla
:
:
PrefType
>
mPrefType
;
nsCString
mPrefValue
;
}
;
class
UserTimingMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
UserTimingMarkerPayload
(
const
nsAString
&
aName
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
)
:
ProfilerMarkerPayload
(
aStartTime
aStartTime
aInnerWindowID
)
mEntryType
(
"
mark
"
)
mName
(
aName
)
{
}
UserTimingMarkerPayload
(
const
nsAString
&
aName
const
mozilla
:
:
Maybe
<
nsString
>
&
aStartMark
const
mozilla
:
:
Maybe
<
nsString
>
&
aEndMark
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
aInnerWindowID
)
mEntryType
(
"
measure
"
)
mName
(
aName
)
mStartMark
(
aStartMark
)
mEndMark
(
aEndMark
)
{
}
DECL_STREAM_PAYLOAD
private
:
UserTimingMarkerPayload
(
CommonProps
&
&
aCommonProps
const
char
*
aEntryType
nsString
&
&
aName
mozilla
:
:
Maybe
<
nsString
>
&
&
aStartMark
mozilla
:
:
Maybe
<
nsString
>
&
&
aEndMark
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mEntryType
(
aEntryType
)
mName
(
std
:
:
move
(
aName
)
)
mStartMark
(
std
:
:
move
(
aStartMark
)
)
mEndMark
(
std
:
:
move
(
aEndMark
)
)
{
}
const
char
*
mEntryType
;
nsString
mName
;
mozilla
:
:
Maybe
<
nsString
>
mStartMark
;
mozilla
:
:
Maybe
<
nsString
>
mEndMark
;
}
;
class
LayerTranslationMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
LayerTranslationMarkerPayload
(
mozilla
:
:
layers
:
:
Layer
*
aLayer
mozilla
:
:
gfx
:
:
Point
aPoint
mozilla
:
:
TimeStamp
aStartTime
)
:
ProfilerMarkerPayload
(
aStartTime
aStartTime
)
mLayer
(
aLayer
)
mPoint
(
aPoint
)
{
}
DECL_STREAM_PAYLOAD
private
:
LayerTranslationMarkerPayload
(
CommonProps
&
&
aCommonProps
mozilla
:
:
layers
:
:
Layer
*
aLayer
mozilla
:
:
gfx
:
:
Point
aPoint
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mLayer
(
aLayer
)
mPoint
(
aPoint
)
{
}
mozilla
:
:
layers
:
:
Layer
*
mLayer
;
mozilla
:
:
gfx
:
:
Point
mPoint
;
}
;
#
include
"
Units
.
h
"
class
VsyncMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
explicit
VsyncMarkerPayload
(
mozilla
:
:
TimeStamp
aVsyncTimestamp
)
:
ProfilerMarkerPayload
(
aVsyncTimestamp
aVsyncTimestamp
)
{
}
DECL_STREAM_PAYLOAD
private
:
explicit
VsyncMarkerPayload
(
CommonProps
&
&
aCommonProps
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
{
}
}
;
class
NetworkMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
NetworkMarkerPayload
(
int64_t
aID
const
char
*
aURI
NetworkLoadType
aType
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
int32_t
aPri
int64_t
aCount
mozilla
:
:
net
:
:
CacheDisposition
aCacheDisposition
uint64_t
aInnerWindowID
const
mozilla
:
:
net
:
:
TimingStruct
*
aTimings
=
nullptr
const
char
*
aRedirectURI
=
nullptr
UniqueProfilerBacktrace
aSource
=
nullptr
const
mozilla
:
:
Maybe
<
nsDependentCString
>
&
aContentType
=
mozilla
:
:
Nothing
(
)
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
mozilla
:
:
Some
(
aInnerWindowID
)
std
:
:
move
(
aSource
)
)
mID
(
aID
)
mURI
(
aURI
?
strdup
(
aURI
)
:
nullptr
)
mRedirectURI
(
aRedirectURI
&
&
(
strlen
(
aRedirectURI
)
>
0
)
?
strdup
(
aRedirectURI
)
:
nullptr
)
mType
(
aType
)
mPri
(
aPri
)
mCount
(
aCount
)
mCacheDisposition
(
aCacheDisposition
)
mContentType
(
aContentType
)
{
if
(
aTimings
)
{
mTimings
=
*
aTimings
;
}
}
DECL_STREAM_PAYLOAD
private
:
NetworkMarkerPayload
(
CommonProps
&
&
aCommonProps
int64_t
aID
mozilla
:
:
UniqueFreePtr
<
char
>
&
&
aURI
mozilla
:
:
UniqueFreePtr
<
char
>
&
&
aRedirectURI
NetworkLoadType
aType
int32_t
aPri
int64_t
aCount
mozilla
:
:
net
:
:
TimingStruct
aTimings
mozilla
:
:
net
:
:
CacheDisposition
aCacheDisposition
mozilla
:
:
Maybe
<
nsAutoCString
>
&
&
aContentType
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mID
(
aID
)
mURI
(
std
:
:
move
(
aURI
)
)
mRedirectURI
(
std
:
:
move
(
aRedirectURI
)
)
mType
(
aType
)
mPri
(
aPri
)
mCount
(
aCount
)
mTimings
(
aTimings
)
mCacheDisposition
(
aCacheDisposition
)
mContentType
(
std
:
:
move
(
aContentType
)
)
{
}
int64_t
mID
;
mozilla
:
:
UniqueFreePtr
<
char
>
mURI
;
mozilla
:
:
UniqueFreePtr
<
char
>
mRedirectURI
;
NetworkLoadType
mType
;
int32_t
mPri
;
int64_t
mCount
;
mozilla
:
:
net
:
:
TimingStruct
mTimings
;
mozilla
:
:
net
:
:
CacheDisposition
mCacheDisposition
;
mozilla
:
:
Maybe
<
nsAutoCString
>
mContentType
;
}
;
class
ScreenshotPayload
:
public
ProfilerMarkerPayload
{
public
:
explicit
ScreenshotPayload
(
mozilla
:
:
TimeStamp
aTimeStamp
nsCString
&
&
aScreenshotDataURL
const
mozilla
:
:
gfx
:
:
IntSize
&
aWindowSize
uintptr_t
aWindowIdentifier
)
:
ProfilerMarkerPayload
(
aTimeStamp
mozilla
:
:
TimeStamp
(
)
)
mScreenshotDataURL
(
std
:
:
move
(
aScreenshotDataURL
)
)
mWindowSize
(
aWindowSize
)
mWindowIdentifier
(
aWindowIdentifier
)
{
}
DECL_STREAM_PAYLOAD
private
:
ScreenshotPayload
(
CommonProps
&
&
aCommonProps
nsCString
&
&
aScreenshotDataURL
mozilla
:
:
gfx
:
:
IntSize
aWindowSize
uintptr_t
aWindowIdentifier
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mScreenshotDataURL
(
std
:
:
move
(
aScreenshotDataURL
)
)
mWindowSize
(
aWindowSize
)
mWindowIdentifier
(
aWindowIdentifier
)
{
}
nsCString
mScreenshotDataURL
;
mozilla
:
:
gfx
:
:
IntSize
mWindowSize
;
uintptr_t
mWindowIdentifier
;
}
;
class
GCSliceMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
GCSliceMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
JS
:
:
UniqueChars
&
&
aTimingJSON
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
mTimingJSON
(
std
:
:
move
(
aTimingJSON
)
)
{
}
DECL_STREAM_PAYLOAD
private
:
GCSliceMarkerPayload
(
CommonProps
&
&
aCommonProps
JS
:
:
UniqueChars
&
&
aTimingJSON
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mTimingJSON
(
std
:
:
move
(
aTimingJSON
)
)
{
}
JS
:
:
UniqueChars
mTimingJSON
;
}
;
class
GCMajorMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
GCMajorMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
JS
:
:
UniqueChars
&
&
aTimingJSON
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
mTimingJSON
(
std
:
:
move
(
aTimingJSON
)
)
{
}
DECL_STREAM_PAYLOAD
private
:
GCMajorMarkerPayload
(
CommonProps
&
&
aCommonProps
JS
:
:
UniqueChars
&
&
aTimingJSON
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mTimingJSON
(
std
:
:
move
(
aTimingJSON
)
)
{
}
JS
:
:
UniqueChars
mTimingJSON
;
}
;
class
GCMinorMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
GCMinorMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
JS
:
:
UniqueChars
&
&
aTimingData
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
mTimingData
(
std
:
:
move
(
aTimingData
)
)
{
}
DECL_STREAM_PAYLOAD
private
:
GCMinorMarkerPayload
(
CommonProps
&
&
aCommonProps
JS
:
:
UniqueChars
&
&
aTimingData
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mTimingData
(
std
:
:
move
(
aTimingData
)
)
{
}
JS
:
:
UniqueChars
mTimingData
;
}
;
class
HangMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
HangMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
{
}
DECL_STREAM_PAYLOAD
private
:
explicit
HangMarkerPayload
(
CommonProps
&
&
aCommonProps
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
{
}
}
;
class
StyleMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
StyleMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
UniqueProfilerBacktrace
aCause
const
mozilla
:
:
ServoTraversalStatistics
&
aStats
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
aInnerWindowID
std
:
:
move
(
aCause
)
)
mStats
(
aStats
)
{
}
DECL_STREAM_PAYLOAD
private
:
StyleMarkerPayload
(
CommonProps
&
&
aCommonProps
mozilla
:
:
ServoTraversalStatistics
aStats
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mStats
(
aStats
)
{
}
mozilla
:
:
ServoTraversalStatistics
mStats
;
}
;
class
LongTaskMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
LongTaskMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
{
}
DECL_STREAM_PAYLOAD
private
:
explicit
LongTaskMarkerPayload
(
CommonProps
&
&
aCommonProps
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
{
}
}
;
class
TimingMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
TimingMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
{
}
DECL_STREAM_PAYLOAD
private
:
explicit
TimingMarkerPayload
(
CommonProps
&
&
aCommonProps
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
{
}
}
;
class
TextMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
TextMarkerPayload
(
const
nsACString
&
aText
const
mozilla
:
:
TimeStamp
&
aStartTime
)
:
ProfilerMarkerPayload
(
aStartTime
aStartTime
)
mText
(
aText
)
{
}
TextMarkerPayload
(
const
nsACString
&
aText
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
mText
(
aText
)
{
}
TextMarkerPayload
(
const
nsACString
&
aText
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
)
:
ProfilerMarkerPayload
(
aStartTime
aStartTime
aInnerWindowID
)
mText
(
aText
)
{
}
TextMarkerPayload
(
const
nsACString
&
aText
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
const
mozilla
:
:
Maybe
<
uint64_t
>
&
aInnerWindowID
UniqueProfilerBacktrace
aCause
=
nullptr
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
aInnerWindowID
std
:
:
move
(
aCause
)
)
mText
(
aText
)
{
}
DECL_STREAM_PAYLOAD
private
:
TextMarkerPayload
(
CommonProps
&
&
aCommonProps
nsCString
&
&
aText
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mText
(
std
:
:
move
(
aText
)
)
{
}
nsCString
mText
;
}
;
class
LogMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
LogMarkerPayload
(
const
char
*
aModule
const
char
*
aText
const
mozilla
:
:
TimeStamp
&
aStartTime
)
:
ProfilerMarkerPayload
(
aStartTime
aStartTime
)
mModule
(
aModule
)
mText
(
aText
)
{
}
LogMarkerPayload
(
const
char
*
aModule
const
char
*
aText
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
mModule
(
aModule
)
mText
(
aText
)
{
}
DECL_STREAM_PAYLOAD
private
:
LogMarkerPayload
(
CommonProps
&
&
aCommonProps
nsAutoCStringN
<
32
>
&
&
aModule
nsCString
&
&
aText
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mModule
(
std
:
:
move
(
aModule
)
)
mText
(
std
:
:
move
(
aText
)
)
{
}
nsAutoCStringN
<
32
>
mModule
;
nsCString
mText
;
}
;
class
MediaSampleMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
MediaSampleMarkerPayload
(
const
int64_t
aSampleStartTimeUs
const
int64_t
aSampleEndTimeUs
)
;
DECL_STREAM_PAYLOAD
private
:
MediaSampleMarkerPayload
(
CommonProps
&
&
aCommonProps
const
int64_t
aSampleStartTimeUs
const
int64_t
aSampleEndTimeUs
)
;
int64_t
mSampleStartTimeUs
;
int64_t
mSampleEndTimeUs
;
}
;
class
JsAllocationMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
JsAllocationMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
JS
:
:
RecordAllocationInfo
&
&
aInfo
UniqueProfilerBacktrace
aStack
)
:
ProfilerMarkerPayload
(
aStartTime
aStartTime
mozilla
:
:
Nothing
(
)
std
:
:
move
(
aStack
)
)
mTypeName
(
aInfo
.
typeName
?
NS_xstrdup
(
aInfo
.
typeName
)
:
nullptr
)
mClassName
(
aInfo
.
className
?
strdup
(
aInfo
.
className
)
:
nullptr
)
mDescriptiveTypeName
(
aInfo
.
descriptiveTypeName
?
NS_xstrdup
(
aInfo
.
descriptiveTypeName
)
:
nullptr
)
mCoarseType
(
aInfo
.
coarseType
)
mSize
(
aInfo
.
size
)
mInNursery
(
aInfo
.
inNursery
)
{
}
DECL_STREAM_PAYLOAD
private
:
JsAllocationMarkerPayload
(
CommonProps
&
&
aCommonProps
mozilla
:
:
UniqueFreePtr
<
const
char16_t
>
&
&
aTypeName
mozilla
:
:
UniqueFreePtr
<
const
char
>
&
&
aClassName
mozilla
:
:
UniqueFreePtr
<
const
char16_t
>
&
&
aDescriptiveTypeName
const
char
*
aCoarseType
uint64_t
aSize
bool
aInNursery
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mTypeName
(
std
:
:
move
(
aTypeName
)
)
mClassName
(
std
:
:
move
(
aClassName
)
)
mDescriptiveTypeName
(
std
:
:
move
(
aDescriptiveTypeName
)
)
mCoarseType
(
aCoarseType
)
mSize
(
aSize
)
mInNursery
(
aInNursery
)
{
}
mozilla
:
:
UniqueFreePtr
<
const
char16_t
>
mTypeName
;
mozilla
:
:
UniqueFreePtr
<
const
char
>
mClassName
;
mozilla
:
:
UniqueFreePtr
<
const
char16_t
>
mDescriptiveTypeName
;
const
char
*
mCoarseType
;
uint64_t
mSize
;
bool
mInNursery
;
}
;
class
NativeAllocationMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
NativeAllocationMarkerPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
int64_t
aSize
uintptr_t
aMemoryAddress
int
aThreadId
UniqueProfilerBacktrace
aStack
)
:
ProfilerMarkerPayload
(
aStartTime
aStartTime
mozilla
:
:
Nothing
(
)
std
:
:
move
(
aStack
)
)
mSize
(
aSize
)
mMemoryAddress
(
aMemoryAddress
)
mThreadId
(
aThreadId
)
{
}
DECL_STREAM_PAYLOAD
private
:
NativeAllocationMarkerPayload
(
CommonProps
&
&
aCommonProps
int64_t
aSize
uintptr_t
aMemoryAddress
int
aThreadId
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mSize
(
aSize
)
mMemoryAddress
(
aMemoryAddress
)
mThreadId
(
aThreadId
)
{
}
int64_t
mSize
;
uintptr_t
mMemoryAddress
;
int
mThreadId
;
}
;
class
IPCMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
IPCMarkerPayload
(
int32_t
aOtherPid
int32_t
aMessageSeqno
IPC
:
:
Message
:
:
msgid_t
aMessageType
mozilla
:
:
ipc
:
:
Side
aSide
mozilla
:
:
ipc
:
:
MessageDirection
aDirection
bool
aSync
const
mozilla
:
:
TimeStamp
&
aStartTime
)
:
ProfilerMarkerPayload
(
aStartTime
aStartTime
)
mOtherPid
(
aOtherPid
)
mMessageSeqno
(
aMessageSeqno
)
mMessageType
(
aMessageType
)
mSide
(
aSide
)
mDirection
(
aDirection
)
mSync
(
aSync
)
{
}
DECL_STREAM_PAYLOAD
private
:
IPCMarkerPayload
(
CommonProps
&
&
aCommonProps
int32_t
aOtherPid
int32_t
aMessageSeqno
IPC
:
:
Message
:
:
msgid_t
aMessageType
mozilla
:
:
ipc
:
:
Side
aSide
mozilla
:
:
ipc
:
:
MessageDirection
aDirection
bool
aSync
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mOtherPid
(
aOtherPid
)
mMessageSeqno
(
aMessageSeqno
)
mMessageType
(
aMessageType
)
mSide
(
aSide
)
mDirection
(
aDirection
)
mSync
(
aSync
)
{
}
int32_t
mOtherPid
;
int32_t
mMessageSeqno
;
IPC
:
:
Message
:
:
msgid_t
mMessageType
;
mozilla
:
:
ipc
:
:
Side
mSide
;
mozilla
:
:
ipc
:
:
MessageDirection
mDirection
;
bool
mSync
;
}
;
namespace
mozilla
{
template
<
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
const
ProfilerMarkerPayload
*
>
{
static
Length
Bytes
(
const
ProfilerMarkerPayload
*
aPayload
)
{
return
ProfilerMarkerPayload
:
:
TagAndSerializationBytes
(
aPayload
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
ProfilerMarkerPayload
*
aPayload
)
{
ProfilerMarkerPayload
:
:
TagAndSerialize
(
aPayload
aEW
)
;
}
}
;
template
<
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
UniquePtr
<
ProfilerMarkerPayload
>
>
{
static
Length
Bytes
(
const
UniquePtr
<
ProfilerMarkerPayload
>
&
aPayload
)
{
return
ProfilerMarkerPayload
:
:
TagAndSerializationBytes
(
aPayload
.
get
(
)
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
UniquePtr
<
ProfilerMarkerPayload
>
&
aPayload
)
{
ProfilerMarkerPayload
:
:
TagAndSerialize
(
aPayload
.
get
(
)
aEW
)
;
}
}
;
template
<
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
UniquePtr
<
ProfilerMarkerPayload
>
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
UniquePtr
<
ProfilerMarkerPayload
>
&
aPayload
)
{
aPayload
=
Read
(
aER
)
;
}
static
UniquePtr
<
ProfilerMarkerPayload
>
Read
(
ProfileBufferEntryReader
&
aER
)
{
return
ProfilerMarkerPayload
:
:
DeserializeTagAndPayload
(
aER
)
;
}
}
;
}
#
endif
