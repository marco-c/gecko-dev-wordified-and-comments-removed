#
ifndef
ProfilerLabels_h
#
define
ProfilerLabels_h
#
include
"
mozilla
/
ProfilerState
.
h
"
#
include
"
mozilla
/
ProfilerThreadState
.
h
"
#
include
"
js
/
Debug
.
h
"
#
include
"
js
/
ProfilingCategory
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BaseProfilerRAIIMacro
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ProfilerThreadRegistration
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
nsString
.
h
"
#
include
<
stdint
.
h
>
struct
JSContext
;
#
define
AUTO_PROFILER_LABEL
(
label
categoryPair
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_HOT
(
label
categoryPair
)
\
mozilla
:
:
AutoProfilerLabelHot
PROFILER_RAII
(
\
label
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_RELEVANT_FOR_JS
(
label
categoryPair
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
RELEVANT_FOR_JS
)
)
#
define
AUTO_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
"
"
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
\
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
LABEL_DETERMINED_BY_CATEGORY_PAIR
)
)
#
define
AUTO_PROFILER_LABEL_CATEGORY_PAIR_RELEVANT_FOR_JS
(
categoryPair
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
"
"
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
\
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
LABEL_DETERMINED_BY_CATEGORY_PAIR
)
|
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
RELEVANT_FOR_JS
)
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
cStr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR_NONSENSITIVE
(
label
categoryPair
\
cStr
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
cStr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
NONSENSITIVE
)
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
label
categoryPair
nsCStr
)
\
mozilla
:
:
Maybe
<
nsAutoCString
>
autoCStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectNsCString
;
\
if
(
profiler_is_active
(
)
)
{
\
autoCStr
.
emplace
(
nsCStr
)
;
\
raiiObjectNsCString
.
emplace
(
label
autoCStr
-
>
get
(
)
\
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING_RELEVANT_FOR_JS
(
\
label
categoryPair
nsCStr
)
\
mozilla
:
:
Maybe
<
nsAutoCString
>
autoCStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectNsCString
;
\
if
(
profiler_is_active
(
)
)
{
\
autoCStr
.
emplace
(
nsCStr
)
;
\
raiiObjectNsCString
.
emplace
(
\
label
autoCStr
-
>
get
(
)
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
RELEVANT_FOR_JS
)
)
;
\
}
#
if
defined
(
NIGHTLY_BUILD
)
&
&
!
defined
(
MOZ_DEBUG
)
&
&
!
defined
(
MOZ_TSAN
)
&
&
\
!
defined
(
MOZ_ASAN
)
#
define
SHOULD_CREATE_ALL_NONSENSITIVE_LABEL_FRAMES
true
#
else
#
define
SHOULD_CREATE_ALL_NONSENSITIVE_LABEL_FRAMES
profiler_is_active
(
)
#
endif
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING_NONSENSITIVE
(
\
label
categoryPair
nsCStr
)
\
mozilla
:
:
Maybe
<
nsAutoCString
>
autoCStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectNsCString
;
\
if
(
SHOULD_CREATE_ALL_NONSENSITIVE_LABEL_FRAMES
)
{
\
autoCStr
.
emplace
(
nsCStr
)
;
\
raiiObjectNsCString
.
emplace
(
\
label
autoCStr
-
>
get
(
)
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
NONSENSITIVE
)
)
;
\
}
#
define
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
label
categoryPair
nsStr
)
\
mozilla
:
:
Maybe
<
NS_LossyConvertUTF16toASCII
>
asciiStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectLossyNsString
;
\
if
(
profiler_is_active
(
)
)
{
\
asciiStr
.
emplace
(
nsStr
)
;
\
raiiObjectLossyNsString
.
emplace
(
label
asciiStr
-
>
get
(
)
\
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
#
define
AUTO_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
\
mozilla
:
:
AutoProfilerLabelHot
PROFILER_RAII
(
\
ctx
label
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
categoryPair
\
ctx
flags
)
\
mozilla
:
:
AutoProfilerLabelHot
PROFILER_RAII
(
\
ctx
label
dynamicString
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
flags
)
namespace
mozilla
{
#
ifndef
MOZ_GECKO_PROFILER
class
MOZ_RAII
AutoProfilerLabel
{
public
:
AutoProfilerLabel
(
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
}
~
AutoProfilerLabel
(
)
{
}
}
;
class
MOZ_RAII
AutoProfilerLabelHot
{
public
:
AutoProfilerLabelHot
(
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
}
AutoProfilerLabelHot
(
JSContext
*
aJSContext
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
)
{
}
~
AutoProfilerLabelHot
(
)
{
}
}
;
#
else
class
MOZ_RAII
AutoProfilerLabel
{
public
:
AutoProfilerLabel
(
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
mProfilingStack
=
profiler
:
:
ThreadRegistration
:
:
WithOnThreadRefOr
(
[
]
(
profiler
:
:
ThreadRegistration
:
:
OnThreadRef
aThread
)
{
return
&
aThread
.
UnlockedConstReaderAndAtomicRWRef
(
)
.
ProfilingStackRef
(
)
;
}
nullptr
)
;
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pushLabelFrame
(
aLabel
aDynamicString
this
aCategoryPair
aFlags
)
;
}
}
~
AutoProfilerLabel
(
)
{
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pop
(
)
;
}
}
private
:
ProfilingStack
*
mProfilingStack
;
}
;
class
MOZ_RAII
AutoProfilerLabelHot
{
public
:
AutoProfilerLabelHot
(
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
if
(
MOZ_LIKELY
(
!
profiler_is_active
(
)
)
)
{
mProfilingStack
=
nullptr
;
return
;
}
mProfilingStack
=
profiler
:
:
ThreadRegistration
:
:
WithOnThreadRefOr
(
[
]
(
profiler
:
:
ThreadRegistration
:
:
OnThreadRef
aThread
)
{
return
&
aThread
.
UnlockedConstReaderAndAtomicRWRef
(
)
.
ProfilingStackRef
(
)
;
}
nullptr
)
;
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pushLabelFrame
(
aLabel
aDynamicString
this
aCategoryPair
aFlags
)
;
#
ifdef
MOZ_EXECUTION_TRACING
mCx
=
nullptr
;
#
endif
}
}
AutoProfilerLabelHot
(
JSContext
*
aJSContext
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
)
{
mProfilingStack
=
js
:
:
GetContextProfilingStackIfEnabled
(
aJSContext
)
;
if
(
MOZ_UNLIKELY
(
mProfilingStack
)
)
{
mProfilingStack
-
>
pushLabelFrame
(
aLabel
aDynamicString
this
aCategoryPair
aFlags
)
;
#
ifdef
MOZ_EXECUTION_TRACING
if
(
MOZ_UNLIKELY
(
JS_TracerIsTracing
(
aJSContext
)
)
)
{
mCx
=
aJSContext
;
TraceLabel
(
aLabel
aDynamicString
)
;
}
else
{
mCx
=
nullptr
;
}
#
endif
}
}
~
AutoProfilerLabelHot
(
)
{
if
(
MOZ_UNLIKELY
(
mProfilingStack
)
)
{
mProfilingStack
-
>
pop
(
)
;
#
ifdef
MOZ_EXECUTION_TRACING
if
(
MOZ_UNLIKELY
(
mCx
)
)
{
JS_TracerLeaveLabelLatin1
(
mCx
"
"
)
;
}
#
endif
}
}
private
:
#
ifdef
MOZ_EXECUTION_TRACING
MOZ_NEVER_INLINE
void
TraceLabel
(
const
char
*
aLabel
const
char
*
aDynamicString
)
{
char
buffer
[
1024
]
;
SprintfLiteral
(
buffer
"
(
DOM
)
%
s
.
%
s
"
aLabel
aDynamicString
)
;
JS_TracerEnterLabelLatin1
(
mCx
buffer
)
;
}
#
endif
ProfilingStack
*
mProfilingStack
;
#
ifdef
MOZ_EXECUTION_TRACING
JSContext
*
mCx
;
#
endif
}
;
#
endif
}
#
endif
