#
ifndef
ProfilerLabels_h
#
define
ProfilerLabels_h
#
include
"
mozilla
/
ProfilerState
.
h
"
#
ifndef
MOZ_GECKO_PROFILER
#
define
AUTO_PROFILER_LABEL
(
label
categoryPair
)
#
define
AUTO_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR_NONSENSITIVE
(
label
categoryPair
\
cStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
label
categoryPair
nsCStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING_NONSENSITIVE
(
\
label
categoryPair
nsCStr
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
label
categoryPair
nsStr
)
#
define
AUTO_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
categoryPair
\
ctx
flags
)
#
else
#
include
"
js
/
ProfilingCategory
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
nsString
.
h
"
#
include
<
stdint
.
h
>
struct
JSContext
;
#
define
PROFILER_RAII_PASTE
(
id
line
)
id
#
#
line
#
define
PROFILER_RAII_EXPAND
(
id
line
)
PROFILER_RAII_PASTE
(
id
line
)
#
define
PROFILER_RAII
PROFILER_RAII_EXPAND
(
raiiObject
__LINE__
)
#
define
AUTO_PROFILER_LABEL
(
label
categoryPair
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
"
"
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
\
LABEL_DETERMINED_BY_CATEGORY_PAIR
)
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
cStr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_CSTR_NONSENSITIVE
(
label
categoryPair
\
cStr
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
label
cStr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
NONSENSITIVE
)
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
label
categoryPair
nsCStr
)
\
mozilla
:
:
Maybe
<
nsAutoCString
>
autoCStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectNsCString
;
\
if
(
profiler_is_active
(
)
)
{
\
autoCStr
.
emplace
(
nsCStr
)
;
\
raiiObjectNsCString
.
emplace
(
label
autoCStr
-
>
get
(
)
\
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
#
define
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING_NONSENSITIVE
(
\
label
categoryPair
nsCStr
)
\
mozilla
:
:
Maybe
<
nsAutoCString
>
autoCStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectNsCString
;
\
if
(
profiler_is_active
(
)
)
{
\
autoCStr
.
emplace
(
nsCStr
)
;
\
raiiObjectNsCString
.
emplace
(
\
label
autoCStr
-
>
get
(
)
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
NONSENSITIVE
)
)
;
\
}
#
define
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
label
categoryPair
\
nsStr
)
\
mozilla
:
:
Maybe
<
NS_LossyConvertUTF16toASCII
>
asciiStr
;
\
mozilla
:
:
Maybe
<
mozilla
:
:
AutoProfilerLabel
>
raiiObjectLossyNsString
;
\
if
(
profiler_is_active
(
)
)
{
\
asciiStr
.
emplace
(
nsStr
)
;
\
raiiObjectLossyNsString
.
emplace
(
\
label
asciiStr
-
>
get
(
)
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
#
define
AUTO_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
ctx
label
nullptr
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
categoryPair
\
ctx
flags
)
\
mozilla
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
ctx
label
dynamicString
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
\
flags
)
class
TLSRegisteredThread
;
namespace
mozilla
{
class
ProfilingStackOwner
{
public
:
class
ProfilingStack
&
ProfilingStack
(
)
{
return
mProfilingStack
;
}
void
AddRef
(
)
const
{
+
+
mRefCnt
;
}
void
Release
(
)
const
{
MOZ_ASSERT
(
int32_t
(
mRefCnt
)
>
0
)
;
if
(
-
-
mRefCnt
=
=
0
)
{
if
(
mProfilingStack
.
stackSize
(
)
>
0
)
{
DumpStackAndCrash
(
)
;
}
delete
this
;
}
}
private
:
~
ProfilingStackOwner
(
)
=
default
;
MOZ_NORETURN
void
DumpStackAndCrash
(
)
const
;
class
ProfilingStack
mProfilingStack
;
mutable
Atomic
<
int32_t
MemoryOrdering
:
:
ReleaseAcquire
>
mRefCnt
;
}
;
class
MOZ_RAII
AutoProfilerLabel
{
public
:
AutoProfilerLabel
(
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
ProfilingStackOwner
*
profilingStackOwner
=
ProfilingStackOwnerTLS
:
:
Get
(
)
;
Push
(
profilingStackOwner
?
&
profilingStackOwner
-
>
ProfilingStack
(
)
:
nullptr
aLabel
aDynamicString
aCategoryPair
aFlags
)
;
}
AutoProfilerLabel
(
JSContext
*
aJSContext
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
)
{
Push
(
js
:
:
GetContextProfilingStackIfEnabled
(
aJSContext
)
aLabel
aDynamicString
aCategoryPair
aFlags
)
;
}
void
Push
(
ProfilingStack
*
aProfilingStack
const
char
*
aLabel
const
char
*
aDynamicString
JS
:
:
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
mProfilingStack
=
aProfilingStack
;
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pushLabelFrame
(
aLabel
aDynamicString
this
aCategoryPair
aFlags
)
;
}
}
~
AutoProfilerLabel
(
)
{
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pop
(
)
;
}
}
private
:
ProfilingStack
*
mProfilingStack
;
public
:
class
ProfilingStackOwnerTLS
{
public
:
static
ProfilingStackOwner
*
Get
(
)
{
MOZ_ASSERT
(
sState
!
=
State
:
:
Uninitialized
"
ProfilingStackOwnerTLS
:
:
Get
(
)
should
only
be
called
after
Init
(
)
"
)
;
if
(
sState
!
=
State
:
:
Initialized
)
{
return
nullptr
;
}
return
sProfilingStackOwnerTLS
.
get
(
)
;
}
static
void
Set
(
ProfilingStackOwner
*
aProfilingStackOwner
)
{
MOZ_ASSERT
(
sState
!
=
State
:
:
Uninitialized
"
ProfilingStackOwnerTLS
:
:
Set
(
)
should
only
be
called
after
Init
(
)
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
sState
=
=
State
:
:
Initialized
"
ProfilingStackOwnerTLS
:
:
Set
(
)
should
only
be
"
"
called
after
a
successful
Init
(
)
"
)
;
sProfilingStackOwnerTLS
.
set
(
aProfilingStackOwner
)
;
}
private
:
friend
TLSRegisteredThread
;
static
void
Init
(
)
;
enum
class
State
{
Uninitialized
=
0
Initialized
Unavailable
}
;
static
State
sState
;
static
MOZ_THREAD_LOCAL
(
ProfilingStackOwner
*
)
sProfilingStackOwnerTLS
;
}
;
}
;
}
#
endif
#
endif
