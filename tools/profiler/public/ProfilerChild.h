#
ifndef
ProfilerChild_h
#
define
ProfilerChild_h
#
include
"
mozilla
/
BaseProfilerDetail
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
PProfilerChild
.
h
"
#
include
"
mozilla
/
ProfileBufferControlledChunkManager
.
h
"
#
include
"
mozilla
/
ProgressLogger
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
class
nsIThread
;
struct
PRThread
;
namespace
mozilla
{
class
ProfilerChild
final
:
public
PProfilerChild
public
mozilla
:
:
ipc
:
:
IShmemAllocator
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ProfilerChild
)
ProfilerChild
(
)
;
nsCString
GrabShutdownProfile
(
)
;
void
Destroy
(
)
;
static
void
ProcessPendingUpdate
(
)
;
static
bool
IsLockedOnCurrentThread
(
)
;
private
:
virtual
~
ProfilerChild
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStart
(
const
ProfilerInitParams
&
params
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvEnsureStarted
(
const
ProfilerInitParams
&
params
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStop
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPause
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvResume
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPauseSampling
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvResumeSampling
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAwaitNextChunkManagerUpdate
(
AwaitNextChunkManagerUpdateResolver
&
&
aResolve
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDestroyReleasedChunksAtOrBefore
(
const
TimeStamp
&
aTimeStamp
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGatherProfile
(
GatherProfileResolver
&
&
aResolve
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvClearAllPages
(
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aActorDestroyReason
)
override
;
FORWARD_SHMEM_ALLOCATOR_TO
(
PProfilerChild
)
void
SetupChunkManager
(
)
;
void
ResetChunkManager
(
)
;
void
ResolveChunkUpdate
(
PProfilerChild
:
:
AwaitNextChunkManagerUpdateResolver
&
aResolve
)
;
void
ProcessChunkManagerUpdate
(
ProfileBufferControlledChunkManager
:
:
Update
&
&
aUpdate
)
;
static
void
GatherProfileThreadFunction
(
void
*
already_AddRefedParameters
)
;
nsCOMPtr
<
nsIThread
>
mThread
;
bool
mDestroyed
;
ProfileBufferControlledChunkManager
*
mChunkManager
=
nullptr
;
AwaitNextChunkManagerUpdateResolver
mAwaitNextChunkManagerUpdateResolver
;
ProfileBufferControlledChunkManager
:
:
Update
mChunkManagerUpdate
;
struct
ProfilerChildAndUpdate
{
RefPtr
<
ProfilerChild
>
mProfilerChild
;
ProfileBufferControlledChunkManager
:
:
Update
mUpdate
;
}
;
static
DataMutexBase
<
ProfilerChildAndUpdate
baseprofiler
:
:
detail
:
:
BaseProfilerMutex
>
sPendingChunkManagerUpdate
;
RefPtr
<
ProgressLogger
:
:
SharedProgress
>
mGatherProfileProgress
;
}
;
}
#
endif
