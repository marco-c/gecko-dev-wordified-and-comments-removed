#
ifndef
TOOLS_PLATFORM_H_
#
define
TOOLS_PLATFORM_H_
#
include
"
PlatformMacros
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
ProfileBufferEntrySerialization
.
h
"
#
include
"
mozilla
/
ProfilerUtils
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsString
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
functional
>
class
ProfilerCodeAddressService
;
namespace
mozilla
{
struct
SymbolTable
;
}
extern
mozilla
:
:
LazyLogModule
gProfilerLog
;
#
define
LOG_TEST
MOZ_LOG_TEST
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Info
)
#
define
LOG
(
arg
.
.
.
)
\
MOZ_LOG
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Info
\
(
"
[
%
"
PRIu64
"
d
]
"
arg
\
uint64_t
(
profiler_current_process_id
(
)
.
ToNumber
(
)
)
#
#
__VA_ARGS__
)
)
#
define
DEBUG_LOG_TEST
MOZ_LOG_TEST
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Debug
)
#
define
DEBUG_LOG
(
arg
.
.
.
)
\
MOZ_LOG
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
[
%
"
PRIu64
"
]
"
arg
\
uint64_t
(
profiler_current_process_id
(
)
.
ToNumber
(
)
)
#
#
__VA_ARGS__
)
)
typedef
uint8_t
*
Address
;
namespace
mozilla
{
class
JSONWriter
;
}
void
AppendSharedLibraries
(
mozilla
:
:
JSONWriter
&
aWriter
)
;
uint32_t
ParseFeaturesFromStringArray
(
const
char
*
*
aFeatures
uint32_t
aFeatureCount
bool
aIsStartup
=
false
)
;
void
profiler_get_profile_json_into_lazily_allocated_buffer
(
const
std
:
:
function
<
char
*
(
size_t
)
>
&
aAllocator
double
aSinceTime
bool
aIsShuttingDown
)
;
enum
class
JSInstrumentationFlags
{
StackSampling
=
0x1
TraceLogging
=
0x2
Allocations
=
0x4
}
;
void
profiler_write_active_configuration
(
mozilla
:
:
JSONWriter
&
aWriter
)
;
mozilla
:
:
Vector
<
nsCString
>
profiler_move_exit_profiles
(
)
;
mozilla
:
:
UniquePtr
<
ProfilerCodeAddressService
>
profiler_code_address_service_for_presymbolication
(
)
;
extern
"
C
"
{
bool
profiler_get_symbol_table
(
const
char
*
debug_path
const
char
*
breakpad_id
mozilla
:
:
SymbolTable
*
symbol_table
)
;
bool
profiler_demangle_rust
(
const
char
*
mangled
char
*
buffer
size_t
len
)
;
}
#
define
PROFILER_FOR_EACH_RUNNING_TIME
(
MACRO
)
\
MACRO
(
0
ThreadCPU
Delta
threadCPUDelta
)
class
RunningTimes
{
public
:
constexpr
RunningTimes
(
)
=
default
;
constexpr
explicit
RunningTimes
(
const
mozilla
:
:
TimeStamp
&
aTimeStamp
)
:
mPostMeasurementTimeStamp
(
aTimeStamp
)
{
}
constexpr
void
Clear
(
)
{
*
this
=
RunningTimes
{
}
;
}
constexpr
bool
IsEmpty
(
)
const
{
return
mKnownBits
=
=
0
;
}
void
SetPostMeasurementTimeStamp
(
const
mozilla
:
:
TimeStamp
&
aTimeStamp
)
{
mPostMeasurementTimeStamp
=
aTimeStamp
;
}
const
mozilla
:
:
TimeStamp
&
PostMeasurementTimeStamp
(
)
const
{
return
mPostMeasurementTimeStamp
;
}
#
define
RUNNING_TIME_MEMBER
(
index
name
unit
jsonProperty
)
\
constexpr
bool
Is
#
#
name
#
#
unit
#
#
Known
(
)
const
{
\
return
(
mKnownBits
&
mGot
#
#
name
#
#
unit
)
!
=
0
;
\
}
\
\
constexpr
void
Clear
#
#
name
#
#
unit
(
)
{
\
m
#
#
name
#
#
unit
=
0
;
\
mKnownBits
&
=
~
mGot
#
#
name
#
#
unit
;
\
}
\
\
constexpr
void
Reset
#
#
name
#
#
unit
(
uint64_t
a
#
#
name
#
#
unit
)
{
\
m
#
#
name
#
#
unit
=
a
#
#
name
#
#
unit
;
\
mKnownBits
|
=
mGot
#
#
name
#
#
unit
;
\
}
\
\
constexpr
void
Set
#
#
name
#
#
unit
(
uint64_t
a
#
#
name
#
#
unit
)
{
\
MOZ_ASSERT
(
!
Is
#
#
name
#
#
unit
#
#
Known
(
)
#
name
#
unit
"
already
set
"
)
;
\
Reset
#
#
name
#
#
unit
(
a
#
#
name
#
#
unit
)
;
\
}
\
\
constexpr
mozilla
:
:
Maybe
<
uint64_t
>
Get
#
#
name
#
#
unit
(
)
const
{
\
if
(
Is
#
#
name
#
#
unit
#
#
Known
(
)
)
{
\
return
mozilla
:
:
Some
(
m
#
#
name
#
#
unit
)
;
\
}
\
return
mozilla
:
:
Nothing
{
}
;
\
}
PROFILER_FOR_EACH_RUNNING_TIME
(
RUNNING_TIME_MEMBER
)
#
undef
RUNNING_TIME_MEMBER
RunningTimes
&
TakeFrom
(
RunningTimes
&
aOther
)
{
if
(
!
aOther
.
IsEmpty
(
)
)
{
#
define
RUNNING_TIME_TAKE
(
index
name
unit
jsonProperty
)
\
if
(
aOther
.
Is
#
#
name
#
#
unit
#
#
Known
(
)
)
{
\
Set
#
#
name
#
#
unit
(
std
:
:
exchange
(
aOther
.
m
#
#
name
#
#
unit
0
)
)
;
\
}
PROFILER_FOR_EACH_RUNNING_TIME
(
RUNNING_TIME_TAKE
)
#
undef
RUNNING_TIME_TAKE
aOther
.
mKnownBits
=
0
;
}
return
*
this
;
}
RunningTimes
operator
-
(
const
RunningTimes
&
aBefore
)
const
{
RunningTimes
diff
;
diff
.
mPostMeasurementTimeStamp
=
mPostMeasurementTimeStamp
;
#
define
RUNNING_TIME_SUB
(
index
name
unit
jsonProperty
)
\
if
(
Is
#
#
name
#
#
unit
#
#
Known
(
)
&
&
aBefore
.
Is
#
#
name
#
#
unit
#
#
Known
(
)
)
{
\
diff
.
Set
#
#
name
#
#
unit
(
m
#
#
name
#
#
unit
-
aBefore
.
m
#
#
name
#
#
unit
)
;
\
}
PROFILER_FOR_EACH_RUNNING_TIME
(
RUNNING_TIME_SUB
)
#
undef
RUNNING_TIME_SUB
return
diff
;
}
private
:
friend
mozilla
:
:
ProfileBufferEntryWriter
:
:
Serializer
<
RunningTimes
>
;
friend
mozilla
:
:
ProfileBufferEntryReader
:
:
Deserializer
<
RunningTimes
>
;
mozilla
:
:
TimeStamp
mPostMeasurementTimeStamp
;
uint32_t
mKnownBits
=
0u
;
#
define
RUNNING_TIME_MEMBER
(
index
name
unit
jsonProperty
)
\
static
constexpr
uint32_t
mGot
#
#
name
#
#
unit
=
1u
<
<
index
;
\
uint64_t
m
#
#
name
#
#
unit
=
0
;
PROFILER_FOR_EACH_RUNNING_TIME
(
RUNNING_TIME_MEMBER
)
#
undef
RUNNING_TIME_MEMBER
}
;
template
<
>
struct
mozilla
:
:
ProfileBufferEntryWriter
:
:
Serializer
<
RunningTimes
>
{
static
Length
Bytes
(
const
RunningTimes
&
aRunningTimes
)
{
Length
bytes
=
0
;
#
define
RUNNING_TIME_SERIALIZATION_BYTES
(
index
name
unit
jsonProperty
)
\
if
(
aRunningTimes
.
Is
#
#
name
#
#
unit
#
#
Known
(
)
)
{
\
bytes
+
=
ULEB128Size
(
aRunningTimes
.
m
#
#
name
#
#
unit
)
;
\
}
PROFILER_FOR_EACH_RUNNING_TIME
(
RUNNING_TIME_SERIALIZATION_BYTES
)
#
undef
RUNNING_TIME_SERIALIZATION_BYTES
return
ULEB128Size
(
aRunningTimes
.
mKnownBits
)
+
bytes
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
RunningTimes
&
aRunningTimes
)
{
aEW
.
WriteULEB128
(
aRunningTimes
.
mKnownBits
)
;
#
define
RUNNING_TIME_SERIALIZE
(
index
name
unit
jsonProperty
)
\
if
(
aRunningTimes
.
Is
#
#
name
#
#
unit
#
#
Known
(
)
)
{
\
aEW
.
WriteULEB128
(
aRunningTimes
.
m
#
#
name
#
#
unit
)
;
\
}
PROFILER_FOR_EACH_RUNNING_TIME
(
RUNNING_TIME_SERIALIZE
)
#
undef
RUNNING_TIME_SERIALIZE
}
}
;
template
<
>
struct
mozilla
:
:
ProfileBufferEntryReader
:
:
Deserializer
<
RunningTimes
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
RunningTimes
&
aRunningTimes
)
{
aRunningTimes
=
Read
(
aER
)
;
}
static
RunningTimes
Read
(
ProfileBufferEntryReader
&
aER
)
{
RunningTimes
times
;
times
.
mKnownBits
=
aER
.
ReadULEB128
<
uint32_t
>
(
)
;
#
define
RUNNING_TIME_DESERIALIZE
(
index
name
unit
jsonProperty
)
\
if
(
times
.
Is
#
#
name
#
#
unit
#
#
Known
(
)
)
{
\
times
.
m
#
#
name
#
#
unit
=
aER
.
ReadULEB128
<
decltype
(
times
.
m
#
#
name
#
#
unit
)
>
(
)
;
\
}
PROFILER_FOR_EACH_RUNNING_TIME
(
RUNNING_TIME_DESERIALIZE
)
#
undef
RUNNING_TIME_DESERIALIZE
return
times
;
}
}
;
#
endif
