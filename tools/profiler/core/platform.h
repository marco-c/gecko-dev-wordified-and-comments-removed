#
ifndef
TOOLS_PLATFORM_H_
#
define
TOOLS_PLATFORM_H_
#
include
<
stdint
.
h
>
#
include
<
math
.
h
>
#
include
"
MainThreadUtils
.
h
"
#
include
"
ThreadResponsiveness
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
PlatformMacros
.
h
"
#
include
<
vector
>
#
include
"
StackTop
.
h
"
#
if
defined
(
__GLIBC__
)
#
include
<
unistd
.
h
>
#
include
<
sys
/
syscall
.
h
>
static
inline
pid_t
gettid
(
)
{
return
(
pid_t
)
syscall
(
SYS_gettid
)
;
}
#
elif
defined
(
GP_OS_darwin
)
#
include
<
unistd
.
h
>
#
include
<
sys
/
syscall
.
h
>
static
inline
pid_t
gettid
(
)
{
return
(
pid_t
)
syscall
(
SYS_thread_selfid
)
;
}
#
elif
defined
(
GP_OS_android
)
#
include
<
unistd
.
h
>
#
elif
defined
(
GP_OS_windows
)
#
include
<
windows
.
h
>
#
include
<
process
.
h
>
#
ifndef
getpid
#
define
getpid
_getpid
#
endif
#
endif
#
if
defined
(
GP_OS_android
)
&
&
!
defined
(
MOZ_WIDGET_GONK
)
#
define
PROFILE_JAVA
#
endif
extern
mozilla
:
:
LazyLogModule
gProfilerLog
;
#
define
LOG_TEST
\
MOZ_LOG_TEST
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Info
)
#
define
LOG
(
arg
.
.
.
)
\
MOZ_LOG
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Info
\
(
"
[
%
d
]
"
arg
getpid
(
)
#
#
__VA_ARGS__
)
)
#
define
DEBUG_LOG_TEST
\
MOZ_LOG_TEST
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Debug
)
#
define
DEBUG_LOG
(
arg
.
.
.
)
\
MOZ_LOG
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
[
%
d
]
"
arg
getpid
(
)
#
#
__VA_ARGS__
)
)
typedef
uint8_t
*
Address
;
class
Thread
{
public
:
#
if
defined
(
GP_OS_windows
)
typedef
DWORD
tid_t
;
#
else
typedef
:
:
pid_t
tid_t
;
#
endif
static
tid_t
GetCurrentId
(
)
;
}
;
class
PlatformData
;
struct
PlatformDataDestructor
{
void
operator
(
)
(
PlatformData
*
)
;
}
;
typedef
mozilla
:
:
UniquePtr
<
PlatformData
PlatformDataDestructor
>
UniquePlatformData
;
UniquePlatformData
AllocPlatformData
(
int
aThreadId
)
;
namespace
mozilla
{
class
JSONWriter
;
}
void
AppendSharedLibraries
(
mozilla
:
:
JSONWriter
&
aWriter
)
;
#
endif
