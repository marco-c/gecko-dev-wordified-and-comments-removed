#
ifndef
TOOLS_PLATFORM_H_
#
define
TOOLS_PLATFORM_H_
#
include
"
PlatformMacros
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsString
.
h
"
#
include
<
functional
>
#
include
<
stdint
.
h
>
#
if
defined
(
__GLIBC__
)
#
include
<
unistd
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
define
gettid
(
)
static_cast
<
pid_t
>
(
syscall
(
SYS_gettid
)
)
#
elif
defined
(
GP_OS_darwin
)
#
include
<
unistd
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
define
gettid
(
)
static_cast
<
pid_t
>
(
syscall
(
SYS_thread_selfid
)
)
#
elif
defined
(
GP_OS_android
)
#
include
<
unistd
.
h
>
#
elif
defined
(
GP_OS_windows
)
#
include
<
windows
.
h
>
#
include
<
process
.
h
>
#
ifndef
getpid
#
define
getpid
_getpid
#
endif
#
endif
extern
mozilla
:
:
LazyLogModule
gProfilerLog
;
#
define
LOG_TEST
MOZ_LOG_TEST
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Info
)
#
define
LOG
(
arg
.
.
.
)
\
MOZ_LOG
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Info
\
(
"
[
%
d
]
"
arg
getpid
(
)
#
#
__VA_ARGS__
)
)
#
define
DEBUG_LOG_TEST
MOZ_LOG_TEST
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Debug
)
#
define
DEBUG_LOG
(
arg
.
.
.
)
\
MOZ_LOG
(
gProfilerLog
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
[
%
d
]
"
arg
getpid
(
)
#
#
__VA_ARGS__
)
)
typedef
uint8_t
*
Address
;
class
Thread
{
public
:
static
int
GetCurrentId
(
)
;
}
;
class
PlatformData
;
struct
PlatformDataDestructor
{
void
operator
(
)
(
PlatformData
*
)
;
}
;
typedef
mozilla
:
:
UniquePtr
<
PlatformData
PlatformDataDestructor
>
UniquePlatformData
;
UniquePlatformData
AllocPlatformData
(
int
aThreadId
)
;
namespace
mozilla
{
class
JSONWriter
;
}
void
AppendSharedLibraries
(
mozilla
:
:
JSONWriter
&
aWriter
)
;
uint32_t
ParseFeaturesFromStringArray
(
const
char
*
*
aFeatures
uint32_t
aFeatureCount
)
;
void
profiler_get_profile_json_into_lazily_allocated_buffer
(
const
std
:
:
function
<
char
*
(
size_t
)
>
&
aAllocator
double
aSinceTime
bool
aIsShuttingDown
)
;
enum
class
JSSamplingFlags
{
StackSampling
=
0x1
TrackOptimizations
=
0x2
TraceLogging
=
0x4
}
;
void
profiler_received_exit_profile
(
const
nsCString
&
aExitProfile
)
;
mozilla
:
:
Vector
<
nsCString
>
profiler_move_exit_profiles
(
)
;
#
endif
