#
ifndef
TOOLS_PLATFORM_H_
#
define
TOOLS_PLATFORM_H_
#
include
<
stdint
.
h
>
#
include
<
math
.
h
>
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
ThreadResponsiveness
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
PlatformMacros
.
h
"
#
include
<
vector
>
#
include
"
StackTop
.
h
"
#
if
defined
(
__GLIBC__
)
#
include
<
unistd
.
h
>
#
include
<
sys
/
syscall
.
h
>
static
inline
pid_t
gettid
(
)
{
return
(
pid_t
)
syscall
(
SYS_gettid
)
;
}
#
elif
defined
(
GP_OS_darwin
)
#
include
<
unistd
.
h
>
#
include
<
sys
/
syscall
.
h
>
static
inline
pid_t
gettid
(
)
{
return
(
pid_t
)
syscall
(
SYS_thread_selfid
)
;
}
#
endif
#
if
defined
(
GP_OS_windows
)
#
include
<
windows
.
h
>
#
endif
bool
profiler_verbose
(
)
;
#
if
defined
(
GP_OS_android
)
#
include
<
android
/
log
.
h
>
#
define
LOG
(
text
)
\
do
{
if
(
profiler_verbose
(
)
)
\
__android_log_write
(
ANDROID_LOG_ERROR
"
Profiler
"
text
)
;
\
}
while
(
0
)
#
define
LOGF
(
format
.
.
.
)
\
do
{
if
(
profiler_verbose
(
)
)
\
__android_log_print
(
ANDROID_LOG_ERROR
"
Profiler
"
format
\
__VA_ARGS__
)
;
\
}
while
(
0
)
#
else
#
define
LOG
(
text
)
\
do
{
if
(
profiler_verbose
(
)
)
fprintf
(
stderr
"
Profiler
:
%
s
\
n
"
text
)
;
\
}
while
(
0
)
#
define
LOGF
(
format
.
.
.
)
\
do
{
if
(
profiler_verbose
(
)
)
fprintf
(
stderr
"
Profiler
:
"
format
"
\
n
"
\
__VA_ARGS__
)
;
\
}
while
(
0
)
#
endif
#
if
defined
(
GP_OS_android
)
&
&
!
defined
(
MOZ_WIDGET_GONK
)
#
define
PROFILE_JAVA
#
endif
typedef
uint8_t
*
Address
;
class
Thread
{
public
:
#
if
defined
(
GP_OS_windows
)
typedef
DWORD
tid_t
;
#
else
typedef
:
:
pid_t
tid_t
;
#
endif
static
tid_t
GetCurrentId
(
)
;
}
;
#
undef
HAVE_NATIVE_UNWIND
#
if
defined
(
MOZ_PROFILING
)
&
&
\
(
defined
(
GP_OS_windows
)
|
|
\
defined
(
GP_OS_darwin
)
|
|
\
defined
(
GP_OS_linux
)
|
|
\
defined
(
GP_PLAT_arm_android
)
)
#
define
HAVE_NATIVE_UNWIND
#
endif
class
ProfilerStateMutex
:
public
mozilla
:
:
StaticMutex
{
}
;
typedef
const
mozilla
:
:
BaseAutoLock
<
ProfilerStateMutex
>
&
PSLockRef
;
class
PlatformData
;
struct
PlatformDataDestructor
{
void
operator
(
)
(
PlatformData
*
)
;
}
;
typedef
mozilla
:
:
UniquePtr
<
PlatformData
PlatformDataDestructor
>
UniquePlatformData
;
UniquePlatformData
AllocPlatformData
(
int
aThreadId
)
;
mozilla
:
:
UniquePtr
<
char
[
]
>
ToJSON
(
PSLockRef
aLock
double
aSinceTime
)
;
#
endif
