#
include
"
ProfileBuffer
.
h
"
#
include
"
ProfilerMarker
.
h
"
#
include
"
BaseProfiler
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
nsJSPrincipals
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
using
namespace
mozilla
;
static
constexpr
auto
DuplicationBufferBytes
=
MakePowerOfTwo32
<
65536
>
(
)
;
ProfileBuffer
:
:
ProfileBuffer
(
BlocksRingBuffer
&
aBuffer
PowerOfTwo32
aCapacity
)
:
mEntries
(
aBuffer
)
mDuplicationBuffer
(
MakeUnique
<
BlocksRingBuffer
:
:
Byte
[
]
>
(
DuplicationBufferBytes
.
Value
(
)
)
)
{
MOZ_ASSERT
(
mEntries
.
BufferLength
(
)
.
isNothing
(
)
)
;
mEntries
.
Set
(
aCapacity
)
;
}
ProfileBuffer
:
:
~
ProfileBuffer
(
)
{
while
(
mStoredMarkers
.
peek
(
)
)
{
delete
mStoredMarkers
.
popHead
(
)
;
}
mEntries
.
Reset
(
)
;
MOZ_ASSERT
(
mEntries
.
BufferLength
(
)
.
isNothing
(
)
)
;
}
BlocksRingBuffer
:
:
BlockIndex
ProfileBuffer
:
:
AddEntry
(
BlocksRingBuffer
&
aBlocksRingBuffer
const
ProfileBufferEntry
&
aEntry
)
{
switch
(
aEntry
.
GetKind
(
)
)
{
#
define
SWITCH_KIND
(
KIND
TYPE
SIZE
)
\
case
ProfileBufferEntry
:
:
Kind
:
:
KIND
:
{
\
/
*
Rooting
analysis
cannot
get
through
BlocksRingBuffer
'
s
heavy
use
of
\
*
lambdas
and
std
:
:
function
s
which
then
trips
it
when
used
from
\
*
MergeStacks
(
)
where
unrooted
js
objects
are
manipulated
.
*
/
\
JS
:
:
AutoSuppressGCAnalysis
nogc
;
\
return
aBlocksRingBuffer
.
PutFrom
(
&
aEntry
1
+
(
SIZE
)
)
;
\
}
FOR_EACH_PROFILE_BUFFER_ENTRY_KIND
(
SWITCH_KIND
)
#
undef
SWITCH_KIND
default
:
MOZ_ASSERT
(
false
"
Unhandled
ProfilerBuffer
entry
KIND
"
)
;
return
BlockIndex
{
}
;
}
}
uint64_t
ProfileBuffer
:
:
AddEntry
(
const
ProfileBufferEntry
&
aEntry
)
{
return
AddEntry
(
mEntries
aEntry
)
.
ConvertToU64
(
)
;
}
BlocksRingBuffer
:
:
BlockIndex
ProfileBuffer
:
:
AddThreadIdEntry
(
BlocksRingBuffer
&
aBlocksRingBuffer
int
aThreadId
)
{
return
AddEntry
(
aBlocksRingBuffer
ProfileBufferEntry
:
:
ThreadId
(
aThreadId
)
)
;
}
uint64_t
ProfileBuffer
:
:
AddThreadIdEntry
(
int
aThreadId
)
{
return
AddThreadIdEntry
(
mEntries
aThreadId
)
.
ConvertToU64
(
)
;
}
void
ProfileBuffer
:
:
AddMarker
(
ProfilerMarker
*
aMarker
)
{
aMarker
-
>
SetPositionInBuffer
(
AddEntry
(
ProfileBufferEntry
:
:
Marker
(
aMarker
)
)
)
;
mStoredMarkers
.
insert
(
aMarker
)
;
}
void
ProfileBuffer
:
:
CollectCodeLocation
(
const
char
*
aLabel
const
char
*
aStr
uint32_t
aFrameFlags
const
Maybe
<
uint32_t
>
&
aLineNumber
const
Maybe
<
uint32_t
>
&
aColumnNumber
const
Maybe
<
JS
:
:
ProfilingCategoryPair
>
&
aCategoryPair
)
{
AddEntry
(
ProfileBufferEntry
:
:
Label
(
aLabel
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
FrameFlags
(
uint64_t
(
aFrameFlags
)
)
)
;
if
(
aStr
)
{
size_t
strLen
=
strlen
(
aStr
)
+
1
;
for
(
size_t
j
=
0
;
j
<
strLen
;
)
{
char
chars
[
ProfileBufferEntry
:
:
kNumChars
]
;
size_t
len
=
ProfileBufferEntry
:
:
kNumChars
;
if
(
j
+
len
>
=
strLen
)
{
len
=
strLen
-
j
;
}
memcpy
(
chars
&
aStr
[
j
]
len
)
;
j
+
=
ProfileBufferEntry
:
:
kNumChars
;
AddEntry
(
ProfileBufferEntry
:
:
DynamicStringFragment
(
chars
)
)
;
}
}
if
(
aLineNumber
)
{
AddEntry
(
ProfileBufferEntry
:
:
LineNumber
(
*
aLineNumber
)
)
;
}
if
(
aColumnNumber
)
{
AddEntry
(
ProfileBufferEntry
:
:
ColumnNumber
(
*
aColumnNumber
)
)
;
}
if
(
aCategoryPair
.
isSome
(
)
)
{
AddEntry
(
ProfileBufferEntry
:
:
CategoryPair
(
int
(
*
aCategoryPair
)
)
)
;
}
}
void
ProfileBuffer
:
:
DeleteExpiredStoredMarkers
(
)
{
AUTO_PROFILER_STATS
(
gecko_ProfileBuffer_DeleteExpiredStoredMarkers
)
;
while
(
mStoredMarkers
.
peek
(
)
&
&
mStoredMarkers
.
peek
(
)
-
>
HasExpired
(
BufferRangeStart
(
)
)
)
{
delete
mStoredMarkers
.
popHead
(
)
;
}
}
size_t
ProfileBuffer
:
:
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
mEntries
.
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
size_t
ProfileBuffer
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
void
ProfileBuffer
:
:
CollectOverheadStats
(
TimeDuration
aSamplingTime
TimeDuration
aLocking
TimeDuration
aCleaning
TimeDuration
aCounters
TimeDuration
aThreads
)
{
double
time
=
aSamplingTime
.
ToMilliseconds
(
)
*
1000
.
0
;
if
(
mFirstSamplingTimeNs
=
=
0
.
0
)
{
mFirstSamplingTimeNs
=
time
;
}
else
{
mIntervalsNs
.
Count
(
time
-
mLastSamplingTimeNs
)
;
}
mLastSamplingTimeNs
=
time
;
double
locking
=
aLocking
.
ToMilliseconds
(
)
*
1000
.
0
;
double
cleaning
=
aCleaning
.
ToMilliseconds
(
)
*
1000
.
0
;
double
counters
=
aCounters
.
ToMilliseconds
(
)
*
1000
.
0
;
double
threads
=
aThreads
.
ToMilliseconds
(
)
*
1000
.
0
;
mOverheadsNs
.
Count
(
locking
+
cleaning
+
counters
+
threads
)
;
mLockingsNs
.
Count
(
locking
)
;
mCleaningsNs
.
Count
(
cleaning
)
;
mCountersNs
.
Count
(
counters
)
;
mThreadsNs
.
Count
(
threads
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadTime
(
time
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
locking
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
cleaning
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
counters
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
threads
)
)
;
}
ProfilerBufferInfo
ProfileBuffer
:
:
GetProfilerBufferInfo
(
)
const
{
return
{
BufferRangeStart
(
)
BufferRangeEnd
(
)
mEntries
.
BufferLength
(
)
-
>
Value
(
)
/
8
mIntervalsNs
mOverheadsNs
mLockingsNs
mCleaningsNs
mCountersNs
mThreadsNs
}
;
}
static
bool
IsChromeJSScript
(
JSScript
*
aScript
)
{
auto
realm
=
js
:
:
GetScriptRealm
(
aScript
)
;
return
js
:
:
IsSystemRealm
(
realm
)
;
}
void
ProfileBufferCollector
:
:
CollectNativeLeafAddr
(
void
*
aAddr
)
{
mBuf
.
AddEntry
(
ProfileBufferEntry
:
:
NativeLeafAddr
(
aAddr
)
)
;
}
void
ProfileBufferCollector
:
:
CollectJitReturnAddr
(
void
*
aAddr
)
{
mBuf
.
AddEntry
(
ProfileBufferEntry
:
:
JitReturnAddr
(
aAddr
)
)
;
}
void
ProfileBufferCollector
:
:
CollectWasmFrame
(
const
char
*
aLabel
)
{
mBuf
.
CollectCodeLocation
(
"
"
aLabel
0
Nothing
(
)
Nothing
(
)
Nothing
(
)
)
;
}
void
ProfileBufferCollector
:
:
CollectProfilingStackFrame
(
const
js
:
:
ProfilingStackFrame
&
aFrame
)
{
MOZ_ASSERT
(
aFrame
.
isLabelFrame
(
)
|
|
(
aFrame
.
isJsFrame
(
)
&
&
!
aFrame
.
isOSRFrame
(
)
)
)
;
const
char
*
label
=
aFrame
.
label
(
)
;
const
char
*
dynamicString
=
aFrame
.
dynamicString
(
)
;
bool
isChromeJSEntry
=
false
;
Maybe
<
uint32_t
>
line
;
Maybe
<
uint32_t
>
column
;
if
(
aFrame
.
isJsFrame
(
)
)
{
if
(
label
[
0
]
=
=
'
\
0
'
)
{
MOZ_ASSERT
(
dynamicString
)
;
if
(
aFrame
.
script
(
)
)
{
isChromeJSEntry
=
IsChromeJSScript
(
aFrame
.
script
(
)
)
;
if
(
aFrame
.
pc
(
)
)
{
unsigned
col
=
0
;
line
=
Some
(
JS_PCToLineNumber
(
aFrame
.
script
(
)
aFrame
.
pc
(
)
&
col
)
)
;
column
=
Some
(
col
)
;
}
}
}
else
{
MOZ_ASSERT
(
strcmp
(
label
"
js
:
:
RunScript
"
)
=
=
0
&
&
!
dynamicString
)
;
}
}
else
{
MOZ_ASSERT
(
aFrame
.
isLabelFrame
(
)
)
;
}
if
(
dynamicString
)
{
if
(
ProfilerFeature
:
:
HasPrivacy
(
mFeatures
)
&
&
!
isChromeJSEntry
)
{
dynamicString
=
"
(
private
)
"
;
}
else
if
(
strlen
(
dynamicString
)
>
=
ProfileBuffer
:
:
kMaxFrameKeyLength
)
{
dynamicString
=
"
(
too
long
)
"
;
}
}
mBuf
.
CollectCodeLocation
(
label
dynamicString
aFrame
.
flags
(
)
line
column
Some
(
aFrame
.
categoryPair
(
)
)
)
;
}
