#
include
"
ProfileBuffer
.
h
"
#
include
"
BaseProfiler
.
h
"
#
include
"
js
/
ColumnNumber
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
nsJSPrincipals
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
using
namespace
mozilla
;
ProfileBuffer
:
:
ProfileBuffer
(
ProfileChunkedBuffer
&
aBuffer
)
:
mEntries
(
aBuffer
)
{
MOZ_ASSERT
(
mEntries
.
IsInSession
(
)
)
;
}
ProfileBufferBlockIndex
ProfileBuffer
:
:
AddEntry
(
ProfileChunkedBuffer
&
aProfileChunkedBuffer
const
ProfileBufferEntry
&
aEntry
)
{
switch
(
aEntry
.
GetKind
(
)
)
{
#
define
SWITCH_KIND
(
KIND
TYPE
SIZE
)
\
case
ProfileBufferEntry
:
:
Kind
:
:
KIND
:
{
\
return
aProfileChunkedBuffer
.
PutFrom
(
&
aEntry
1
+
(
SIZE
)
)
;
\
}
FOR_EACH_PROFILE_BUFFER_ENTRY_KIND
(
SWITCH_KIND
)
#
undef
SWITCH_KIND
default
:
MOZ_ASSERT
(
false
"
Unhandled
ProfilerBuffer
entry
KIND
"
)
;
return
ProfileBufferBlockIndex
{
}
;
}
}
uint64_t
ProfileBuffer
:
:
AddEntry
(
const
ProfileBufferEntry
&
aEntry
)
{
return
AddEntry
(
mEntries
aEntry
)
.
ConvertToProfileBufferIndex
(
)
;
}
ProfileBufferBlockIndex
ProfileBuffer
:
:
AddThreadIdEntry
(
ProfileChunkedBuffer
&
aProfileChunkedBuffer
ProfilerThreadId
aThreadId
)
{
return
AddEntry
(
aProfileChunkedBuffer
ProfileBufferEntry
:
:
ThreadId
(
aThreadId
)
)
;
}
uint64_t
ProfileBuffer
:
:
AddThreadIdEntry
(
ProfilerThreadId
aThreadId
)
{
return
AddThreadIdEntry
(
mEntries
aThreadId
)
.
ConvertToProfileBufferIndex
(
)
;
}
void
ProfileBuffer
:
:
CollectCodeLocation
(
const
char
*
aLabel
const
char
*
aStr
uint32_t
aFrameFlags
uint64_t
aInnerWindowID
const
Maybe
<
uint32_t
>
&
aLineNumber
const
Maybe
<
uint32_t
>
&
aColumnNumber
const
Maybe
<
JS
:
:
ProfilingCategoryPair
>
&
aCategoryPair
)
{
AddEntry
(
ProfileBufferEntry
:
:
Label
(
aLabel
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
FrameFlags
(
uint64_t
(
aFrameFlags
)
)
)
;
if
(
aStr
)
{
size_t
strLen
=
strlen
(
aStr
)
+
1
;
const
bool
tooBig
=
strLen
>
kMaxFrameKeyLength
;
if
(
tooBig
)
{
strLen
=
kMaxFrameKeyLength
;
}
char
chars
[
ProfileBufferEntry
:
:
kNumChars
]
;
for
(
size_t
j
=
0
;
;
j
+
=
ProfileBufferEntry
:
:
kNumChars
)
{
size_t
len
=
ProfileBufferEntry
:
:
kNumChars
;
const
bool
last
=
j
+
len
>
=
strLen
;
if
(
last
)
{
len
=
strLen
-
j
;
if
(
tooBig
)
{
len
=
std
:
:
max
(
len
size_t
(
4
)
)
;
chars
[
len
-
4
]
=
'
.
'
;
chars
[
len
-
3
]
=
'
.
'
;
chars
[
len
-
2
]
=
'
.
'
;
chars
[
len
-
1
]
=
'
\
0
'
;
len
-
=
4
;
}
}
memcpy
(
chars
&
aStr
[
j
]
len
)
;
AddEntry
(
ProfileBufferEntry
:
:
DynamicStringFragment
(
chars
)
)
;
if
(
last
)
{
break
;
}
}
}
if
(
aInnerWindowID
)
{
AddEntry
(
ProfileBufferEntry
:
:
InnerWindowID
(
aInnerWindowID
)
)
;
}
if
(
aLineNumber
)
{
AddEntry
(
ProfileBufferEntry
:
:
LineNumber
(
*
aLineNumber
)
)
;
}
if
(
aColumnNumber
)
{
AddEntry
(
ProfileBufferEntry
:
:
ColumnNumber
(
*
aColumnNumber
)
)
;
}
if
(
aCategoryPair
.
isSome
(
)
)
{
AddEntry
(
ProfileBufferEntry
:
:
CategoryPair
(
int
(
*
aCategoryPair
)
)
)
;
}
}
size_t
ProfileBuffer
:
:
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
mEntries
.
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
size_t
ProfileBuffer
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
void
ProfileBuffer
:
:
CollectOverheadStats
(
double
aSamplingTimeMs
TimeDuration
aLocking
TimeDuration
aCleaning
TimeDuration
aCounters
TimeDuration
aThreads
)
{
double
timeUs
=
aSamplingTimeMs
*
1000
.
0
;
if
(
mFirstSamplingTimeUs
=
=
0
.
0
)
{
mFirstSamplingTimeUs
=
timeUs
;
}
else
{
mIntervalsUs
.
Count
(
timeUs
-
mLastSamplingTimeUs
)
;
}
mLastSamplingTimeUs
=
timeUs
;
double
locking
=
aLocking
.
ToMilliseconds
(
)
*
1000
.
0
;
double
cleaning
=
aCleaning
.
ToMilliseconds
(
)
*
1000
.
0
;
double
counters
=
aCounters
.
ToMilliseconds
(
)
*
1000
.
0
;
double
threads
=
aThreads
.
ToMilliseconds
(
)
*
1000
.
0
;
mOverheadsUs
.
Count
(
locking
+
cleaning
+
counters
+
threads
)
;
mLockingsUs
.
Count
(
locking
)
;
mCleaningsUs
.
Count
(
cleaning
)
;
mCountersUs
.
Count
(
counters
)
;
mThreadsUs
.
Count
(
threads
)
;
static
const
bool
sRecordSamplingOverhead
=
[
]
(
)
{
const
char
*
recordOverheads
=
getenv
(
"
MOZ_PROFILER_RECORD_OVERHEADS
"
)
;
return
recordOverheads
&
&
recordOverheads
[
0
]
!
=
'
\
0
'
;
}
(
)
;
if
(
sRecordSamplingOverhead
)
{
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadTime
(
aSamplingTimeMs
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
locking
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
cleaning
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
counters
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
threads
)
)
;
}
}
ProfilerBufferInfo
ProfileBuffer
:
:
GetProfilerBufferInfo
(
)
const
{
return
{
BufferRangeStart
(
)
BufferRangeEnd
(
)
static_cast
<
uint32_t
>
(
*
mEntries
.
BufferLength
(
)
/
8
)
mIntervalsUs
mOverheadsUs
mLockingsUs
mCleaningsUs
mCountersUs
mThreadsUs
}
;
}
void
ProfileBufferCollector
:
:
CollectNativeLeafAddr
(
void
*
aAddr
)
{
mBuf
.
AddEntry
(
ProfileBufferEntry
:
:
NativeLeafAddr
(
aAddr
)
)
;
}
void
ProfileBufferCollector
:
:
CollectJitReturnAddr
(
void
*
aAddr
)
{
mBuf
.
AddEntry
(
ProfileBufferEntry
:
:
JitReturnAddr
(
aAddr
)
)
;
}
void
ProfileBufferCollector
:
:
CollectWasmFrame
(
const
char
*
aLabel
)
{
mBuf
.
CollectCodeLocation
(
"
"
aLabel
0
0
Nothing
(
)
Nothing
(
)
Some
(
JS
:
:
ProfilingCategoryPair
:
:
JS_Wasm
)
)
;
}
void
ProfileBufferCollector
:
:
CollectProfilingStackFrame
(
const
js
:
:
ProfilingStackFrame
&
aFrame
)
{
MOZ_ASSERT
(
aFrame
.
isLabelFrame
(
)
|
|
(
aFrame
.
isJsFrame
(
)
&
&
!
aFrame
.
isOSRFrame
(
)
)
)
;
const
char
*
label
=
aFrame
.
label
(
)
;
const
char
*
dynamicString
=
aFrame
.
dynamicString
(
)
;
Maybe
<
uint32_t
>
line
;
Maybe
<
uint32_t
>
column
;
if
(
aFrame
.
isJsFrame
(
)
)
{
if
(
label
[
0
]
=
=
'
\
0
'
)
{
MOZ_ASSERT
(
dynamicString
)
;
if
(
aFrame
.
script
(
)
)
{
if
(
aFrame
.
pc
(
)
)
{
JS
:
:
LimitedColumnNumberOneOrigin
col
;
line
=
Some
(
JS_PCToLineNumber
(
aFrame
.
script
(
)
aFrame
.
pc
(
)
&
col
)
)
;
column
=
Some
(
col
.
zeroOriginValue
(
)
)
;
}
}
}
else
{
MOZ_ASSERT
(
strcmp
(
label
"
js
:
:
RunScript
"
)
=
=
0
&
&
!
dynamicString
)
;
}
}
else
{
MOZ_ASSERT
(
aFrame
.
isLabelFrame
(
)
)
;
}
mBuf
.
CollectCodeLocation
(
label
dynamicString
aFrame
.
flags
(
)
aFrame
.
realmID
(
)
line
column
Some
(
aFrame
.
categoryPair
(
)
)
)
;
}
