#
include
"
ProfileBuffer
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
ProfilerMarker
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
#
include
"
nsJSPrincipals
.
h
"
using
namespace
mozilla
;
ProfileBuffer
:
:
ProfileBuffer
(
uint32_t
aEntrySize
)
:
mEntryIndexMask
(
0
)
mRangeStart
(
0
)
mRangeEnd
(
0
)
mEntrySize
(
0
)
{
const
uint32_t
UINT32_MAX_POWER_OF_TWO
=
1
<
<
31
;
MOZ_RELEASE_ASSERT
(
aEntrySize
<
=
UINT32_MAX_POWER_OF_TWO
"
aEntrySize
is
larger
than
what
we
support
"
)
;
mEntrySize
=
RoundUpPow2
(
aEntrySize
)
;
mEntryIndexMask
=
mEntrySize
-
1
;
mEntries
=
MakeUnique
<
ProfileBufferEntry
[
]
>
(
mEntrySize
)
;
}
ProfileBuffer
:
:
~
ProfileBuffer
(
)
{
while
(
mStoredMarkers
.
peek
(
)
)
{
delete
mStoredMarkers
.
popHead
(
)
;
}
}
void
ProfileBuffer
:
:
AddEntry
(
const
ProfileBufferEntry
&
aEntry
)
{
GetEntry
(
mRangeEnd
+
+
)
=
aEntry
;
if
(
mRangeEnd
-
mRangeStart
>
mEntrySize
)
{
mRangeStart
+
+
;
}
}
uint64_t
ProfileBuffer
:
:
AddThreadIdEntry
(
int
aThreadId
)
{
uint64_t
pos
=
mRangeEnd
;
AddEntry
(
ProfileBufferEntry
:
:
ThreadId
(
aThreadId
)
)
;
return
pos
;
}
void
ProfileBuffer
:
:
AddStoredMarker
(
ProfilerMarker
*
aStoredMarker
)
{
aStoredMarker
-
>
SetPositionInBuffer
(
mRangeEnd
)
;
mStoredMarkers
.
insert
(
aStoredMarker
)
;
}
void
ProfileBuffer
:
:
CollectCodeLocation
(
const
char
*
aLabel
const
char
*
aStr
int
aLineNumber
const
Maybe
<
js
:
:
ProfilingStackFrame
:
:
Category
>
&
aCategory
)
{
AddEntry
(
ProfileBufferEntry
:
:
Label
(
aLabel
)
)
;
if
(
aStr
)
{
size_t
strLen
=
strlen
(
aStr
)
+
1
;
for
(
size_t
j
=
0
;
j
<
strLen
;
)
{
char
chars
[
ProfileBufferEntry
:
:
kNumChars
]
;
size_t
len
=
ProfileBufferEntry
:
:
kNumChars
;
if
(
j
+
len
>
=
strLen
)
{
len
=
strLen
-
j
;
}
memcpy
(
chars
&
aStr
[
j
]
len
)
;
j
+
=
ProfileBufferEntry
:
:
kNumChars
;
AddEntry
(
ProfileBufferEntry
:
:
DynamicStringFragment
(
chars
)
)
;
}
}
if
(
aLineNumber
!
=
-
1
)
{
AddEntry
(
ProfileBufferEntry
:
:
LineNumber
(
aLineNumber
)
)
;
}
if
(
aCategory
.
isSome
(
)
)
{
AddEntry
(
ProfileBufferEntry
:
:
Category
(
int
(
*
aCategory
)
)
)
;
}
}
void
ProfileBuffer
:
:
DeleteExpiredStoredMarkers
(
)
{
while
(
mStoredMarkers
.
peek
(
)
&
&
mStoredMarkers
.
peek
(
)
-
>
HasExpired
(
mRangeStart
)
)
{
delete
mStoredMarkers
.
popHead
(
)
;
}
}
size_t
ProfileBuffer
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
n
+
=
aMallocSizeOf
(
mEntries
.
get
(
)
)
;
return
n
;
}
static
bool
IsChromeJSScript
(
JSScript
*
aScript
)
{
auto
compartment
=
js
:
:
GetScriptCompartment
(
aScript
)
;
return
js
:
:
IsSystemCompartment
(
compartment
)
;
}
void
ProfileBufferCollector
:
:
CollectNativeLeafAddr
(
void
*
aAddr
)
{
mBuf
.
AddEntry
(
ProfileBufferEntry
:
:
NativeLeafAddr
(
aAddr
)
)
;
}
void
ProfileBufferCollector
:
:
CollectJitReturnAddr
(
void
*
aAddr
)
{
mBuf
.
AddEntry
(
ProfileBufferEntry
:
:
JitReturnAddr
(
aAddr
)
)
;
}
void
ProfileBufferCollector
:
:
CollectWasmFrame
(
const
char
*
aLabel
)
{
mBuf
.
CollectCodeLocation
(
"
"
aLabel
-
1
Nothing
(
)
)
;
}
void
ProfileBufferCollector
:
:
CollectProfilingStackFrame
(
const
js
:
:
ProfilingStackFrame
&
aFrame
)
{
MOZ_ASSERT
(
aFrame
.
kind
(
)
=
=
js
:
:
ProfilingStackFrame
:
:
Kind
:
:
LABEL
|
|
aFrame
.
kind
(
)
=
=
js
:
:
ProfilingStackFrame
:
:
Kind
:
:
JS_NORMAL
)
;
const
char
*
label
=
aFrame
.
label
(
)
;
const
char
*
dynamicString
=
aFrame
.
dynamicString
(
)
;
bool
isChromeJSEntry
=
false
;
int
lineno
=
-
1
;
if
(
aFrame
.
isJsFrame
(
)
)
{
if
(
label
[
0
]
=
=
'
\
0
'
)
{
MOZ_ASSERT
(
dynamicString
)
;
if
(
aFrame
.
script
(
)
)
{
isChromeJSEntry
=
IsChromeJSScript
(
aFrame
.
script
(
)
)
;
if
(
aFrame
.
pc
(
)
)
{
lineno
=
JS_PCToLineNumber
(
aFrame
.
script
(
)
aFrame
.
pc
(
)
)
;
}
}
}
else
{
MOZ_ASSERT
(
strcmp
(
label
"
js
:
:
RunScript
"
)
=
=
0
&
&
!
dynamicString
)
;
}
}
else
{
MOZ_ASSERT
(
aFrame
.
isLabelFrame
(
)
)
;
lineno
=
aFrame
.
line
(
)
;
}
if
(
dynamicString
)
{
if
(
ProfilerFeature
:
:
HasPrivacy
(
mFeatures
)
&
&
!
isChromeJSEntry
)
{
dynamicString
=
"
(
private
)
"
;
}
else
if
(
strlen
(
dynamicString
)
>
=
ProfileBuffer
:
:
kMaxFrameKeyLength
)
{
dynamicString
=
"
(
too
long
)
"
;
}
}
mBuf
.
CollectCodeLocation
(
label
dynamicString
lineno
Some
(
aFrame
.
category
(
)
)
)
;
}
