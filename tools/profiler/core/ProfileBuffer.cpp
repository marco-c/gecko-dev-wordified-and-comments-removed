#
include
"
ProfileBuffer
.
h
"
ProfileBuffer
:
:
ProfileBuffer
(
int
aEntrySize
)
:
mEntries
(
mozilla
:
:
MakeUnique
<
ProfileBufferEntry
[
]
>
(
aEntrySize
)
)
mWritePos
(
0
)
mReadPos
(
0
)
mEntrySize
(
aEntrySize
)
mGeneration
(
0
)
{
}
ProfileBuffer
:
:
~
ProfileBuffer
(
)
{
while
(
mStoredMarkers
.
peek
(
)
)
{
delete
mStoredMarkers
.
popHead
(
)
;
}
}
void
ProfileBuffer
:
:
addTag
(
const
ProfileBufferEntry
&
aTag
)
{
mEntries
[
mWritePos
+
+
]
=
aTag
;
if
(
mWritePos
=
=
mEntrySize
)
{
MOZ_ASSERT
(
mGeneration
!
=
UINT32_MAX
)
;
mGeneration
+
+
;
mWritePos
=
0
;
}
if
(
mWritePos
=
=
mReadPos
)
{
mEntries
[
mReadPos
]
=
ProfileBufferEntry
(
)
;
mReadPos
=
(
mReadPos
+
1
)
%
mEntrySize
;
}
}
void
ProfileBuffer
:
:
addTagThreadId
(
int
aThreadId
LastSample
*
aLS
)
{
if
(
aLS
)
{
aLS
-
>
mGeneration
=
mGeneration
;
aLS
-
>
mPos
=
mWritePos
;
}
addTag
(
ProfileBufferEntry
:
:
ThreadId
(
aThreadId
)
)
;
}
void
ProfileBuffer
:
:
addStoredMarker
(
ProfilerMarker
*
aStoredMarker
)
{
aStoredMarker
-
>
SetGeneration
(
mGeneration
)
;
mStoredMarkers
.
insert
(
aStoredMarker
)
;
}
void
ProfileBuffer
:
:
deleteExpiredStoredMarkers
(
)
{
uint32_t
generation
=
mGeneration
;
while
(
mStoredMarkers
.
peek
(
)
&
&
mStoredMarkers
.
peek
(
)
-
>
HasExpired
(
generation
)
)
{
delete
mStoredMarkers
.
popHead
(
)
;
}
}
void
ProfileBuffer
:
:
reset
(
)
{
mGeneration
+
=
2
;
mReadPos
=
mWritePos
=
0
;
}
size_t
ProfileBuffer
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
n
+
=
aMallocSizeOf
(
mEntries
.
get
(
)
)
;
return
n
;
}
#
define
DYNAMIC_MAX_STRING
8192
char
*
ProfileBuffer
:
:
processDynamicTag
(
int
readPos
int
*
tagsConsumed
char
*
tagBuff
)
{
int
readAheadPos
=
(
readPos
+
1
)
%
mEntrySize
;
int
tagBuffPos
=
0
;
bool
seenNullByte
=
false
;
while
(
readAheadPos
!
=
mWritePos
&
&
!
seenNullByte
)
{
(
*
tagsConsumed
)
+
+
;
ProfileBufferEntry
readAheadEntry
=
mEntries
[
readAheadPos
]
;
for
(
size_t
pos
=
0
;
pos
<
sizeof
(
void
*
)
;
pos
+
+
)
{
tagBuff
[
tagBuffPos
]
=
readAheadEntry
.
mTagChars
[
pos
]
;
if
(
tagBuff
[
tagBuffPos
]
=
=
'
\
0
'
|
|
tagBuffPos
=
=
DYNAMIC_MAX_STRING
-
2
)
{
seenNullByte
=
true
;
break
;
}
tagBuffPos
+
+
;
}
if
(
!
seenNullByte
)
readAheadPos
=
(
readAheadPos
+
1
)
%
mEntrySize
;
}
return
tagBuff
;
}
