#
include
"
mozilla
/
ProfilerThreadRegistration
.
h
"
namespace
mozilla
:
:
profiler
{
ThreadRegistration
:
:
TLSInitialization
ThreadRegistration
:
:
sIsTLSInitialized
;
MOZ_THREAD_LOCAL
(
ThreadRegistration
*
)
ThreadRegistration
:
:
tlsThreadRegistration
;
ThreadRegistration
:
:
ThreadRegistration
(
const
char
*
aName
const
void
*
aStackTop
)
:
mData
(
aName
aStackTop
)
{
if
(
mData
.
Info
(
)
.
IsMainThread
(
)
&
&
sIsTLSInitialized
=
=
TLSInitialization
:
:
NOT_YET
)
{
sIsTLSInitialized
=
tlsThreadRegistration
.
init
(
)
?
TLSInitialization
:
:
DONE
:
TLSInitialization
:
:
FAILED
;
}
if
(
auto
*
tls
=
GetTLS
(
)
;
tls
)
{
if
(
ThreadRegistration
*
rootRegistration
=
tls
-
>
get
(
)
;
rootRegistration
)
{
return
;
}
tls
-
>
set
(
this
)
;
}
}
ThreadRegistration
:
:
~
ThreadRegistration
(
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
profiler_current_thread_id
(
)
=
=
mData
.
mInfo
.
ThreadId
(
)
"
ThreadRegistration
must
be
destroyed
on
its
thread
"
)
;
MOZ_ASSERT
(
!
mDataMutex
.
IsLockedOnCurrentThread
(
)
"
Mutex
shouldn
'
t
be
locked
here
as
it
'
s
about
to
be
destroyed
"
"
in
~
ThreadRegistration
(
)
"
)
;
MOZ_ASSERT
(
mDataMutex
.
TryLock
(
)
"
Mutex
shouldn
'
t
be
locked
in
any
thread
as
it
'
s
about
to
be
"
"
destroyed
in
~
ThreadRegistration
(
)
"
)
;
mDataMutex
.
Unlock
(
)
;
#
endif
if
(
auto
*
tls
=
GetTLS
(
)
;
tls
)
{
if
(
tls
-
>
get
(
)
!
=
this
)
{
return
;
}
tls
-
>
set
(
nullptr
)
;
}
}
ProfilingStack
&
ThreadRegistration
:
:
RegisterThread
(
const
char
*
aName
const
void
*
aStackTop
)
{
if
(
ThreadRegistration
*
rootRegistration
=
GetFromTLS
(
)
;
rootRegistration
)
{
+
+
rootRegistration
-
>
mOtherRegistrations
;
return
rootRegistration
-
>
mData
.
mProfilingStack
;
}
ThreadRegistration
*
tr
=
new
ThreadRegistration
(
aName
aStackTop
)
;
return
tr
-
>
mData
.
mProfilingStack
;
}
void
ThreadRegistration
:
:
UnregisterThread
(
)
{
if
(
ThreadRegistration
*
rootRegistration
=
GetFromTLS
(
)
;
rootRegistration
)
{
if
(
rootRegistration
-
>
mOtherRegistrations
!
=
0
)
{
-
-
rootRegistration
-
>
mOtherRegistrations
;
return
;
}
delete
rootRegistration
;
}
}
}
