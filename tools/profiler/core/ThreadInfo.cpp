#
include
"
ThreadInfo
.
h
"
#
include
"
ThreadProfile
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
ThreadInfo
:
:
ThreadInfo
(
const
char
*
aName
int
aThreadId
bool
aIsMainThread
PseudoStack
*
aPseudoStack
void
*
aStackTop
)
:
mName
(
strdup
(
aName
)
)
mThreadId
(
aThreadId
)
mIsMainThread
(
aIsMainThread
)
mPseudoStack
(
aPseudoStack
)
mPlatformData
(
Sampler
:
:
AllocPlatformData
(
aThreadId
)
)
mProfile
(
nullptr
)
mStackTop
(
aStackTop
)
mPendingDelete
(
false
)
{
#
ifndef
SPS_STANDALONE
mThread
=
NS_GetCurrentThread
(
)
;
#
endif
#
ifdef
XP_MACOSX
pthread_t
self
=
pthread_self
(
)
;
mStackTop
=
pthread_get_stackaddr_np
(
self
)
;
#
endif
}
ThreadInfo
:
:
~
ThreadInfo
(
)
{
free
(
mName
)
;
if
(
mProfile
)
delete
mProfile
;
Sampler
:
:
FreePlatformData
(
mPlatformData
)
;
}
void
ThreadInfo
:
:
SetPendingDelete
(
)
{
mPendingDelete
=
true
;
mPseudoStack
=
nullptr
;
if
(
mProfile
)
{
mProfile
-
>
SetPendingDelete
(
)
;
}
}
bool
ThreadInfo
:
:
CanInvokeJS
(
)
const
{
#
ifdef
SPS_STANDALONE
return
false
;
#
else
nsIThread
*
thread
=
GetThread
(
)
;
if
(
!
thread
)
{
MOZ_ASSERT
(
IsMainThread
(
)
)
;
return
true
;
}
bool
result
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
thread
-
>
GetCanInvokeJS
(
&
result
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
result
;
#
endif
}
