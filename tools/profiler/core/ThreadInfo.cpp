#
include
"
ThreadInfo
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
if
defined
(
GP_OS_darwin
)
#
include
<
pthread
.
h
>
#
endif
#
ifdef
XP_WIN
#
include
<
process
.
h
>
#
define
getpid
_getpid
#
else
#
include
<
unistd
.
h
>
#
endif
ThreadInfo
:
:
ThreadInfo
(
const
char
*
aName
int
aThreadId
bool
aIsMainThread
mozilla
:
:
NotNull
<
PseudoStack
*
>
aPseudoStack
void
*
aStackTop
)
:
mName
(
strdup
(
aName
)
)
mThreadId
(
aThreadId
)
mIsMainThread
(
aIsMainThread
)
mPseudoStack
(
aPseudoStack
)
mPlatformData
(
AllocPlatformData
(
aThreadId
)
)
mStackTop
(
aStackTop
)
mPendingDelete
(
false
)
mHasProfile
(
false
)
mLastSample
(
aThreadId
)
{
MOZ_COUNT_CTOR
(
ThreadInfo
)
;
mThread
=
NS_GetCurrentThread
(
)
;
#
if
defined
(
GP_OS_darwin
)
pthread_t
self
=
pthread_self
(
)
;
mStackTop
=
pthread_get_stackaddr_np
(
self
)
;
#
endif
MOZ_ASSERT
(
aThreadId
>
=
0
"
native
thread
ID
is
<
0
"
)
;
MOZ_ASSERT
(
aThreadId
<
=
INT32_MAX
"
native
thread
ID
is
>
INT32_MAX
"
)
;
}
ThreadInfo
:
:
~
ThreadInfo
(
)
{
MOZ_COUNT_DTOR
(
ThreadInfo
)
;
if
(
mPendingDelete
)
{
delete
mPseudoStack
;
}
}
void
ThreadInfo
:
:
SetPendingDelete
(
)
{
mPendingDelete
=
true
;
}
void
ThreadInfo
:
:
StreamJSON
(
ProfileBuffer
*
aBuffer
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aStartTime
double
aSinceTime
)
{
if
(
!
mUniqueStacks
.
isSome
(
)
)
{
mUniqueStacks
.
emplace
(
mPseudoStack
-
>
mContext
)
;
}
aWriter
.
Start
(
SpliceableJSONWriter
:
:
SingleLineStyle
)
;
{
StreamSamplesAndMarkers
(
aBuffer
aWriter
aStartTime
aSinceTime
*
mUniqueStacks
)
;
aWriter
.
StartObjectProperty
(
"
stackTable
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
prefix
"
)
;
schema
.
WriteField
(
"
frame
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
mUniqueStacks
-
>
SpliceStackTableElements
(
aWriter
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
aWriter
.
StartObjectProperty
(
"
frameTable
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
location
"
)
;
schema
.
WriteField
(
"
implementation
"
)
;
schema
.
WriteField
(
"
optimizations
"
)
;
schema
.
WriteField
(
"
line
"
)
;
schema
.
WriteField
(
"
category
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
mUniqueStacks
-
>
SpliceFrameTableElements
(
aWriter
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
aWriter
.
StartArrayProperty
(
"
stringTable
"
)
;
{
mUniqueStacks
-
>
mUniqueStrings
.
SpliceStringTableElements
(
aWriter
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
End
(
)
;
mUniqueStacks
.
reset
(
)
;
}
void
ThreadInfo
:
:
StreamSamplesAndMarkers
(
ProfileBuffer
*
aBuffer
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aStartTime
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
{
aWriter
.
StringProperty
(
"
processType
"
XRE_ChildProcessTypeToString
(
XRE_GetProcessType
(
)
)
)
;
aWriter
.
StringProperty
(
"
name
"
Name
(
)
)
;
aWriter
.
IntProperty
(
"
tid
"
static_cast
<
int64_t
>
(
mThreadId
)
)
;
aWriter
.
IntProperty
(
"
pid
"
static_cast
<
int64_t
>
(
getpid
(
)
)
)
;
aWriter
.
StartObjectProperty
(
"
samples
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
stack
"
)
;
schema
.
WriteField
(
"
time
"
)
;
schema
.
WriteField
(
"
responsiveness
"
)
;
schema
.
WriteField
(
"
rss
"
)
;
schema
.
WriteField
(
"
uss
"
)
;
schema
.
WriteField
(
"
frameNumber
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
if
(
mSavedStreamedSamples
)
{
MOZ_ASSERT
(
aSinceTime
=
=
0
)
;
aWriter
.
Splice
(
mSavedStreamedSamples
.
get
(
)
)
;
mSavedStreamedSamples
.
reset
(
)
;
}
aBuffer
-
>
StreamSamplesToJSON
(
aWriter
mThreadId
aSinceTime
mPseudoStack
-
>
mContext
aUniqueStacks
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
aWriter
.
StartObjectProperty
(
"
markers
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
name
"
)
;
schema
.
WriteField
(
"
time
"
)
;
schema
.
WriteField
(
"
data
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
if
(
mSavedStreamedMarkers
)
{
MOZ_ASSERT
(
aSinceTime
=
=
0
)
;
aWriter
.
Splice
(
mSavedStreamedMarkers
.
get
(
)
)
;
mSavedStreamedMarkers
.
reset
(
)
;
}
aBuffer
-
>
StreamMarkersToJSON
(
aWriter
mThreadId
aStartTime
aSinceTime
aUniqueStacks
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
}
void
ThreadInfo
:
:
FlushSamplesAndMarkers
(
ProfileBuffer
*
aBuffer
const
TimeStamp
&
aStartTime
)
{
MOZ_ASSERT
(
mPseudoStack
-
>
mContext
)
;
mUniqueStacks
.
emplace
(
mPseudoStack
-
>
mContext
)
;
{
SpliceableChunkedJSONWriter
b
;
b
.
StartBareList
(
)
;
{
aBuffer
-
>
StreamSamplesToJSON
(
b
mThreadId
0
mPseudoStack
-
>
mContext
*
mUniqueStacks
)
;
}
b
.
EndBareList
(
)
;
mSavedStreamedSamples
=
b
.
WriteFunc
(
)
-
>
CopyData
(
)
;
}
{
SpliceableChunkedJSONWriter
b
;
b
.
StartBareList
(
)
;
{
aBuffer
-
>
StreamMarkersToJSON
(
b
mThreadId
aStartTime
0
*
mUniqueStacks
)
;
}
b
.
EndBareList
(
)
;
mSavedStreamedMarkers
=
b
.
WriteFunc
(
)
-
>
CopyData
(
)
;
}
aBuffer
-
>
reset
(
)
;
}
size_t
ThreadInfo
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
n
+
=
aMallocSizeOf
(
mName
.
get
(
)
)
;
n
+
=
mPseudoStack
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
return
n
;
}
