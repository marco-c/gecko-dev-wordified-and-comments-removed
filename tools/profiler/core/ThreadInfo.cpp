#
include
"
ThreadInfo
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
if
defined
(
GP_OS_darwin
)
#
include
<
pthread
.
h
>
#
endif
#
ifdef
XP_WIN
#
include
<
process
.
h
>
#
define
getpid
_getpid
#
else
#
include
<
unistd
.
h
>
#
endif
ThreadInfo
:
:
ThreadInfo
(
const
char
*
aName
int
aThreadId
bool
aIsMainThread
nsIEventTarget
*
aThread
void
*
aStackTop
)
:
mName
(
strdup
(
aName
)
)
mRegisterTime
(
TimeStamp
:
:
Now
(
)
)
mIsMainThread
(
aIsMainThread
)
mThread
(
aThread
)
mRacyInfo
(
mozilla
:
:
MakeNotNull
<
RacyThreadInfo
*
>
(
aThreadId
)
)
mPlatformData
(
AllocPlatformData
(
aThreadId
)
)
mStackTop
(
aStackTop
)
mIsBeingProfiled
(
false
)
mContext
(
nullptr
)
mJSSampling
(
INACTIVE
)
mLastSample
(
)
{
MOZ_COUNT_CTOR
(
ThreadInfo
)
;
#
if
defined
(
GP_OS_darwin
)
pthread_t
self
=
pthread_self
(
)
;
mStackTop
=
pthread_get_stackaddr_np
(
self
)
;
#
endif
MOZ_ASSERT
(
aThreadId
>
=
0
"
native
thread
ID
is
<
0
"
)
;
MOZ_ASSERT
(
aThreadId
<
=
INT32_MAX
"
native
thread
ID
is
>
INT32_MAX
"
)
;
}
ThreadInfo
:
:
~
ThreadInfo
(
)
{
MOZ_COUNT_DTOR
(
ThreadInfo
)
;
delete
mRacyInfo
;
}
void
ThreadInfo
:
:
StartProfiling
(
)
{
mIsBeingProfiled
=
true
;
mRacyInfo
-
>
ReinitializeOnResume
(
)
;
mResponsiveness
.
emplace
(
mThread
mIsMainThread
)
;
}
void
ThreadInfo
:
:
StopProfiling
(
)
{
mResponsiveness
.
reset
(
)
;
mPartialProfile
=
nullptr
;
mIsBeingProfiled
=
false
;
}
void
ThreadInfo
:
:
StreamJSON
(
const
ProfileBuffer
&
aBuffer
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
{
UniquePtr
<
PartialThreadProfile
>
partialProfile
=
Move
(
mPartialProfile
)
;
UniquePtr
<
UniqueStacks
>
uniqueStacks
=
partialProfile
?
Move
(
partialProfile
-
>
mUniqueStacks
)
:
MakeUnique
<
UniqueStacks
>
(
mContext
)
;
UniquePtr
<
char
[
]
>
partialSamplesJSON
;
UniquePtr
<
char
[
]
>
partialMarkersJSON
;
if
(
partialProfile
)
{
partialSamplesJSON
=
Move
(
partialProfile
-
>
mSamplesJSON
)
;
partialMarkersJSON
=
Move
(
partialProfile
-
>
mMarkersJSON
)
;
}
aWriter
.
Start
(
)
;
{
StreamSamplesAndMarkers
(
Name
(
)
ThreadId
(
)
aBuffer
aWriter
aProcessStartTime
mRegisterTime
mUnregisterTime
aSinceTime
mContext
Move
(
partialSamplesJSON
)
Move
(
partialMarkersJSON
)
*
uniqueStacks
)
;
aWriter
.
StartObjectProperty
(
"
stackTable
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
prefix
"
)
;
schema
.
WriteField
(
"
frame
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
uniqueStacks
-
>
SpliceStackTableElements
(
aWriter
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
aWriter
.
StartObjectProperty
(
"
frameTable
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
location
"
)
;
schema
.
WriteField
(
"
implementation
"
)
;
schema
.
WriteField
(
"
optimizations
"
)
;
schema
.
WriteField
(
"
line
"
)
;
schema
.
WriteField
(
"
category
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
uniqueStacks
-
>
SpliceFrameTableElements
(
aWriter
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
aWriter
.
StartArrayProperty
(
"
stringTable
"
)
;
{
uniqueStacks
-
>
mUniqueStrings
.
SpliceStringTableElements
(
aWriter
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
End
(
)
;
}
void
StreamSamplesAndMarkers
(
const
char
*
aName
int
aThreadId
const
ProfileBuffer
&
aBuffer
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
const
TimeStamp
&
aRegisterTime
const
TimeStamp
&
aUnregisterTime
double
aSinceTime
JSContext
*
aContext
UniquePtr
<
char
[
]
>
&
&
aPartialSamplesJSON
UniquePtr
<
char
[
]
>
&
&
aPartialMarkersJSON
UniqueStacks
&
aUniqueStacks
)
{
aWriter
.
StringProperty
(
"
processType
"
XRE_ChildProcessTypeToString
(
XRE_GetProcessType
(
)
)
)
;
aWriter
.
StringProperty
(
"
name
"
aName
)
;
aWriter
.
IntProperty
(
"
tid
"
static_cast
<
int64_t
>
(
aThreadId
)
)
;
aWriter
.
IntProperty
(
"
pid
"
static_cast
<
int64_t
>
(
getpid
(
)
)
)
;
if
(
aRegisterTime
)
{
aWriter
.
DoubleProperty
(
"
registerTime
"
(
aRegisterTime
-
aProcessStartTime
)
.
ToMilliseconds
(
)
)
;
}
else
{
aWriter
.
NullProperty
(
"
registerTime
"
)
;
}
if
(
aUnregisterTime
)
{
aWriter
.
DoubleProperty
(
"
unregisterTime
"
(
aUnregisterTime
-
aProcessStartTime
)
.
ToMilliseconds
(
)
)
;
}
else
{
aWriter
.
NullProperty
(
"
unregisterTime
"
)
;
}
aWriter
.
StartObjectProperty
(
"
samples
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
stack
"
)
;
schema
.
WriteField
(
"
time
"
)
;
schema
.
WriteField
(
"
responsiveness
"
)
;
schema
.
WriteField
(
"
rss
"
)
;
schema
.
WriteField
(
"
uss
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
if
(
aPartialSamplesJSON
)
{
MOZ_ASSERT
(
aSinceTime
=
=
0
)
;
aWriter
.
Splice
(
aPartialSamplesJSON
.
get
(
)
)
;
}
aBuffer
.
StreamSamplesToJSON
(
aWriter
aThreadId
aSinceTime
aContext
aUniqueStacks
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
aWriter
.
StartObjectProperty
(
"
markers
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
name
"
)
;
schema
.
WriteField
(
"
time
"
)
;
schema
.
WriteField
(
"
data
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
if
(
aPartialMarkersJSON
)
{
MOZ_ASSERT
(
aSinceTime
=
=
0
)
;
aWriter
.
Splice
(
aPartialMarkersJSON
.
get
(
)
)
;
}
aBuffer
.
StreamMarkersToJSON
(
aWriter
aThreadId
aProcessStartTime
aSinceTime
aUniqueStacks
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
}
void
ThreadInfo
:
:
FlushSamplesAndMarkers
(
const
TimeStamp
&
aProcessStartTime
ProfileBuffer
&
aBuffer
)
{
MOZ_ASSERT
(
mContext
)
;
UniquePtr
<
UniqueStacks
>
uniqueStacks
=
mPartialProfile
?
Move
(
mPartialProfile
-
>
mUniqueStacks
)
:
MakeUnique
<
UniqueStacks
>
(
mContext
)
;
UniquePtr
<
char
[
]
>
samplesJSON
;
UniquePtr
<
char
[
]
>
markersJSON
;
{
SpliceableChunkedJSONWriter
b
;
b
.
StartBareList
(
)
;
bool
haveSamples
=
false
;
{
if
(
mPartialProfile
&
&
mPartialProfile
-
>
mSamplesJSON
)
{
b
.
Splice
(
mPartialProfile
-
>
mSamplesJSON
.
get
(
)
)
;
haveSamples
=
true
;
}
bool
streamedNewSamples
=
aBuffer
.
StreamSamplesToJSON
(
b
ThreadId
(
)
0
mContext
*
uniqueStacks
)
;
haveSamples
=
haveSamples
|
|
streamedNewSamples
;
}
b
.
EndBareList
(
)
;
if
(
haveSamples
)
{
samplesJSON
=
b
.
WriteFunc
(
)
-
>
CopyData
(
)
;
}
}
{
SpliceableChunkedJSONWriter
b
;
b
.
StartBareList
(
)
;
bool
haveMarkers
=
false
;
{
if
(
mPartialProfile
&
&
mPartialProfile
-
>
mMarkersJSON
)
{
b
.
Splice
(
mPartialProfile
-
>
mMarkersJSON
.
get
(
)
)
;
haveMarkers
=
true
;
}
bool
streamedNewMarkers
=
aBuffer
.
StreamMarkersToJSON
(
b
ThreadId
(
)
aProcessStartTime
0
*
uniqueStacks
)
;
haveMarkers
=
haveMarkers
|
|
streamedNewMarkers
;
}
b
.
EndBareList
(
)
;
if
(
haveMarkers
)
{
markersJSON
=
b
.
WriteFunc
(
)
-
>
CopyData
(
)
;
}
}
mPartialProfile
=
MakeUnique
<
PartialThreadProfile
>
(
Move
(
samplesJSON
)
Move
(
markersJSON
)
Move
(
uniqueStacks
)
)
;
aBuffer
.
Reset
(
)
;
}
size_t
ThreadInfo
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
n
+
=
aMallocSizeOf
(
mName
.
get
(
)
)
;
n
+
=
mRacyInfo
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
return
n
;
}
