#
ifndef
ProfiledThreadData_h
#
define
ProfiledThreadData_h
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
platform
.
h
"
#
include
"
ProfileBuffer
.
h
"
#
include
"
ThreadInfo
.
h
"
class
ProfiledThreadData
final
{
public
:
ProfiledThreadData
(
ThreadInfo
*
aThreadInfo
nsIEventTarget
*
aEventTarget
)
;
~
ProfiledThreadData
(
)
;
void
NotifyUnregistered
(
uint64_t
aBufferPosition
)
{
mResponsiveness
.
reset
(
)
;
mLastSample
=
mozilla
:
:
Nothing
(
)
;
MOZ_ASSERT
(
!
mBufferPositionWhenReceivedJSContext
"
JSContext
should
have
been
cleared
before
the
thread
was
unregistered
"
)
;
mUnregisterTime
=
TimeStamp
:
:
Now
(
)
;
mBufferPositionWhenUnregistered
=
mozilla
:
:
Some
(
aBufferPosition
)
;
}
mozilla
:
:
Maybe
<
uint64_t
>
BufferPositionWhenUnregistered
(
)
{
return
mBufferPositionWhenUnregistered
;
}
mozilla
:
:
Maybe
<
uint64_t
>
&
LastSample
(
)
{
return
mLastSample
;
}
void
StreamJSON
(
const
ProfileBuffer
&
aBuffer
JSContext
*
aCx
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
;
ThreadResponsiveness
*
GetThreadResponsiveness
(
)
{
ThreadResponsiveness
*
responsiveness
=
mResponsiveness
.
ptrOr
(
nullptr
)
;
return
responsiveness
;
}
const
RefPtr
<
ThreadInfo
>
Info
(
)
const
{
return
mThreadInfo
;
}
void
NotifyReceivedJSContext
(
uint64_t
aCurrentBufferPosition
)
{
mBufferPositionWhenReceivedJSContext
=
mozilla
:
:
Some
(
aCurrentBufferPosition
)
;
}
void
NotifyAboutToLoseJSContext
(
JSContext
*
aCx
const
TimeStamp
&
aProcessStartTime
ProfileBuffer
&
aBuffer
)
;
private
:
const
RefPtr
<
ThreadInfo
>
mThreadInfo
;
UniquePtr
<
JITFrameInfo
>
mJITFrameInfoForPreviousJSContexts
;
mozilla
:
:
Maybe
<
ThreadResponsiveness
>
mResponsiveness
;
mozilla
:
:
Maybe
<
uint64_t
>
mLastSample
;
mozilla
:
:
Maybe
<
uint64_t
>
mBufferPositionWhenReceivedJSContext
;
mozilla
:
:
Maybe
<
uint64_t
>
mBufferPositionWhenUnregistered
;
mozilla
:
:
TimeStamp
mUnregisterTime
;
}
;
void
StreamSamplesAndMarkers
(
const
char
*
aName
int
aThreadId
const
ProfileBuffer
&
aBuffer
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
const
TimeStamp
&
aRegisterTime
const
TimeStamp
&
aUnregisterTime
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
;
#
endif
