#
ifndef
ProfiledThreadData_h
#
define
ProfiledThreadData_h
#
include
"
platform
.
h
"
#
include
"
ProfileBuffer
.
h
"
#
include
"
ProfileBufferEntry
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
ProfilerThreadRegistrationInfo
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsIEventTarget
;
class
ProfilerCodeAddressService
;
struct
JSContext
;
namespace
mozilla
:
:
baseprofiler
{
class
SpliceableJSONWriter
;
}
class
ProfiledThreadData
final
{
public
:
ProfiledThreadData
(
const
mozilla
:
:
profiler
:
:
ThreadRegistrationInfo
&
aThreadInfo
nsIEventTarget
*
aEventTarget
)
;
~
ProfiledThreadData
(
)
;
void
NotifyUnregistered
(
uint64_t
aBufferPosition
)
{
mLastSample
=
mozilla
:
:
Nothing
(
)
;
MOZ_ASSERT
(
!
mBufferPositionWhenReceivedJSContext
"
JSContext
should
have
been
cleared
before
the
thread
was
"
"
unregistered
"
)
;
mUnregisterTime
=
mozilla
:
:
TimeStamp
:
:
Now
(
)
;
mBufferPositionWhenUnregistered
=
mozilla
:
:
Some
(
aBufferPosition
)
;
mPreviousThreadRunningTimes
.
Clear
(
)
;
}
mozilla
:
:
Maybe
<
uint64_t
>
BufferPositionWhenUnregistered
(
)
{
return
mBufferPositionWhenUnregistered
;
}
mozilla
:
:
Maybe
<
uint64_t
>
&
LastSample
(
)
{
return
mLastSample
;
}
mozilla
:
:
NotNull
<
mozilla
:
:
UniquePtr
<
UniqueStacks
>
>
PrepareUniqueStacks
(
const
ProfileBuffer
&
aBuffer
JSContext
*
aCx
ProfilerCodeAddressService
*
aService
)
;
void
StreamJSON
(
const
ProfileBuffer
&
aBuffer
JSContext
*
aCx
mozilla
:
:
baseprofiler
:
:
SpliceableJSONWriter
&
aWriter
const
nsACString
&
aProcessName
const
nsACString
&
aETLDplus1
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
double
aSinceTime
bool
aJSTracerEnabled
ProfilerCodeAddressService
*
aService
)
;
const
mozilla
:
:
profiler
:
:
ThreadRegistrationInfo
&
Info
(
)
const
{
return
mThreadInfo
;
}
void
NotifyReceivedJSContext
(
uint64_t
aCurrentBufferPosition
)
{
mBufferPositionWhenReceivedJSContext
=
mozilla
:
:
Some
(
aCurrentBufferPosition
)
;
}
void
NotifyAboutToLoseJSContext
(
JSContext
*
aCx
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
ProfileBuffer
&
aBuffer
)
;
RunningTimes
&
PreviousThreadRunningTimesRef
(
)
{
return
mPreviousThreadRunningTimes
;
}
private
:
const
mozilla
:
:
profiler
:
:
ThreadRegistrationInfo
mThreadInfo
;
mozilla
:
:
UniquePtr
<
JITFrameInfo
>
mJITFrameInfoForPreviousJSContexts
;
mozilla
:
:
Maybe
<
uint64_t
>
mLastSample
;
mozilla
:
:
Maybe
<
uint64_t
>
mBufferPositionWhenReceivedJSContext
;
RunningTimes
mPreviousThreadRunningTimes
;
mozilla
:
:
Maybe
<
uint64_t
>
mBufferPositionWhenUnregistered
;
mozilla
:
:
TimeStamp
mUnregisterTime
;
}
;
ProfilerThreadId
StreamSamplesAndMarkers
(
const
char
*
aName
ProfilerThreadId
aThreadId
const
ProfileBuffer
&
aBuffer
mozilla
:
:
baseprofiler
:
:
SpliceableJSONWriter
&
aWriter
const
nsACString
&
aProcessName
const
nsACString
&
aETLDplus1
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
const
mozilla
:
:
TimeStamp
&
aRegisterTime
const
mozilla
:
:
TimeStamp
&
aUnregisterTime
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
;
#
endif
