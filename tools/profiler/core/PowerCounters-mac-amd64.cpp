#
include
"
PowerCounters
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
sysctl
.
h
>
#
define
dgPowerStat
17
#
define
CPU_RTIME_BINS
(
12
)
#
define
CPU_ITIME_BINS
(
CPU_RTIME_BINS
)
typedef
struct
{
uint64_t
caperf
;
uint64_t
cmperf
;
uint64_t
ccres
[
6
]
;
uint64_t
crtimes
[
CPU_RTIME_BINS
]
;
uint64_t
citimes
[
CPU_ITIME_BINS
]
;
uint64_t
crtime_total
;
uint64_t
citime_total
;
uint64_t
cpu_idle_exits
;
uint64_t
cpu_insns
;
uint64_t
cpu_ucc
;
uint64_t
cpu_urc
;
#
if
DIAG_ALL_PMCS
uint64_t
gpmcs
[
4
]
;
#
endif
}
core_energy_stat_t
;
typedef
struct
{
uint64_t
pkes_version
;
uint64_t
pkg_cres
[
2
]
[
7
]
;
uint64_t
pkg_power_unit
;
uint64_t
pkg_energy
;
uint64_t
pp0_energy
;
uint64_t
pp1_energy
;
uint64_t
ddr_energy
;
uint64_t
llc_flushed_cycles
;
uint64_t
ring_ratio_instantaneous
;
uint64_t
IA_frequency_clipping_cause
;
uint64_t
GT_frequency_clipping_cause
;
uint64_t
pkg_idle_exits
;
uint64_t
pkg_rtimes
[
CPU_RTIME_BINS
]
;
uint64_t
pkg_itimes
[
CPU_ITIME_BINS
]
;
uint64_t
mbus_delay_time
;
uint64_t
mint_delay_time
;
uint32_t
ncpus
;
core_energy_stat_t
cest
[
]
;
}
pkg_energy_statistics_t
;
static
int
diagCall64
(
uint64_t
aMode
void
*
aBuf
)
{
#
ifdef
__x86_64__
static
const
uint64_t
diagCallNum
=
0x4000001
;
uint64_t
rv
;
__asm__
__volatile__
(
"
syscall
"
:
"
=
a
"
(
rv
)
:
"
0
"
(
diagCallNum
)
"
D
"
(
aMode
)
"
S
"
(
aBuf
)
:
"
rcx
"
"
r11
"
"
cc
"
"
memory
"
)
;
return
rv
;
#
else
#
error
Sorry
only
x86
-
64
is
supported
#
endif
}
class
RaplDomain
final
:
public
BaseProfilerCount
{
public
:
explicit
RaplDomain
(
const
char
*
aLabel
const
char
*
aDescription
)
:
BaseProfilerCount
(
aLabel
nullptr
nullptr
"
power
"
aDescription
)
mSample
(
0
)
mIsSampleNew
(
false
)
{
}
CountSample
Sample
(
)
override
{
CountSample
result
;
constexpr
double
NANOJOULES_PER_JOULE
=
1
'
000
'
000
'
000
;
constexpr
double
NANOJOULES_TO_PICOWATTHOUR
=
3
.
6
;
result
.
count
=
mSample
*
NANOJOULES_PER_JOULE
/
NANOJOULES_TO_PICOWATTHOUR
;
result
.
number
=
0
;
result
.
isSampleNew
=
mIsSampleNew
;
mIsSampleNew
=
false
;
return
result
;
}
void
AddSample
(
double
aSample
)
{
if
(
aSample
>
mSample
)
{
mIsSampleNew
=
true
;
mSample
=
aSample
;
}
}
private
:
double
mSample
;
bool
mIsSampleNew
;
}
;
class
RAPL
{
bool
mIsGpuSupported
;
bool
mIsRamSupported
;
bool
mHasRamUnitsQuirk
;
static
constexpr
double
kQuirkyRamJoulesPerTick
=
(
double
)
1
/
65536
;
pkg_energy_statistics_t
*
mPkes
;
RaplDomain
*
mPkg
=
nullptr
;
RaplDomain
*
mCores
=
nullptr
;
RaplDomain
*
mGpu
=
nullptr
;
RaplDomain
*
mRam
=
nullptr
;
public
:
explicit
RAPL
(
PowerCounters
:
:
CountVector
&
aCounters
)
:
mHasRamUnitsQuirk
(
false
)
{
int
cpuModel
;
size_t
size
=
sizeof
(
cpuModel
)
;
if
(
sysctlbyname
(
"
machdep
.
cpu
.
model
"
&
cpuModel
&
size
NULL
0
)
!
=
0
)
{
NS_WARNING
(
"
sysctlbyname
(
\
"
machdep
.
cpu
.
model
\
"
)
failed
"
)
;
return
;
}
switch
(
cpuModel
)
{
case
0x2a
:
case
0x3a
:
mIsGpuSupported
=
true
;
mIsRamSupported
=
false
;
break
;
case
0x3f
:
case
0x4f
:
case
0x55
:
case
0x56
:
mIsGpuSupported
=
false
;
mIsRamSupported
=
true
;
mHasRamUnitsQuirk
=
true
;
break
;
case
0x2d
:
case
0x3e
:
mIsGpuSupported
=
false
;
mIsRamSupported
=
true
;
break
;
case
0x3c
:
case
0x3d
:
case
0x45
:
case
0x46
:
case
0x47
:
mIsGpuSupported
=
true
;
mIsRamSupported
=
true
;
break
;
case
0x4e
:
case
0x5e
:
case
0x8e
:
case
0x9e
:
case
0x66
:
case
0x7d
:
case
0x7e
:
case
0xa5
:
case
0xa6
:
mIsGpuSupported
=
true
;
mIsRamSupported
=
true
;
break
;
default
:
NS_WARNING
(
nsPrintfCString
(
"
unknown
CPU
model
:
%
d
"
cpuModel
)
.
get
(
)
)
;
return
;
}
int
logicalcpu_max
;
size
=
sizeof
(
logicalcpu_max
)
;
if
(
sysctlbyname
(
"
hw
.
logicalcpu_max
"
&
logicalcpu_max
&
size
NULL
0
)
!
=
0
)
{
NS_WARNING
(
"
sysctlbyname
(
\
"
hw
.
logicalcpu_max
\
"
)
failed
"
)
;
return
;
}
size_t
pkesSize
=
sizeof
(
pkg_energy_statistics_t
)
+
logicalcpu_max
*
sizeof
(
core_energy_stat_t
)
+
logicalcpu_max
*
1024
;
mPkes
=
(
pkg_energy_statistics_t
*
)
malloc
(
pkesSize
)
;
if
(
mPkes
&
&
aCounters
.
reserve
(
4
)
)
{
mPkg
=
new
RaplDomain
(
"
Power
:
CPU
package
"
"
RAPL
PKG
"
)
;
aCounters
.
infallibleAppend
(
mPkg
)
;
mCores
=
new
RaplDomain
(
"
Power
:
CPU
cores
"
"
RAPL
PP0
"
)
;
aCounters
.
infallibleAppend
(
mCores
)
;
if
(
mIsGpuSupported
)
{
mGpu
=
new
RaplDomain
(
"
Power
:
iGPU
"
"
RAPL
PP1
"
)
;
aCounters
.
infallibleAppend
(
mGpu
)
;
}
if
(
mIsRamSupported
)
{
mRam
=
new
RaplDomain
(
"
Power
:
DRAM
"
"
RAPL
DRAM
"
)
;
aCounters
.
infallibleAppend
(
mRam
)
;
}
}
}
~
RAPL
(
)
{
free
(
mPkes
)
;
delete
mPkg
;
delete
mCores
;
delete
mGpu
;
delete
mRam
;
}
static
double
Joules
(
uint64_t
aTicks
double
aJoulesPerTick
)
{
return
double
(
aTicks
)
*
aJoulesPerTick
;
}
void
Sample
(
)
{
constexpr
uint64_t
kSupportedVersion
=
1
;
mPkes
-
>
pkes_version
=
kSupportedVersion
-
1
;
if
(
diagCall64
(
dgPowerStat
mPkes
)
!
=
1
)
{
NS_WARNING
(
"
diagCall64
(
)
failed
"
)
;
return
;
}
if
(
mPkes
-
>
pkes_version
!
=
kSupportedVersion
)
{
NS_WARNING
(
nsPrintfCString
(
"
unexpected
pkes_version
:
%
llu
"
mPkes
-
>
pkes_version
)
.
get
(
)
)
;
return
;
}
uint32_t
energyStatusUnits
=
(
mPkes
-
>
pkg_power_unit
>
>
8
)
&
0x1f
;
double
joulesPerTick
=
(
(
double
)
1
/
(
1
<
<
energyStatusUnits
)
)
;
mPkg
-
>
AddSample
(
Joules
(
mPkes
-
>
pkg_energy
joulesPerTick
)
)
;
mCores
-
>
AddSample
(
Joules
(
mPkes
-
>
pp0_energy
joulesPerTick
)
)
;
if
(
mIsGpuSupported
)
{
mGpu
-
>
AddSample
(
Joules
(
mPkes
-
>
pp1_energy
joulesPerTick
)
)
;
}
if
(
mIsRamSupported
)
{
mRam
-
>
AddSample
(
Joules
(
mPkes
-
>
ddr_energy
mHasRamUnitsQuirk
?
kQuirkyRamJoulesPerTick
:
joulesPerTick
)
)
;
}
}
}
;
PowerCounters
:
:
PowerCounters
(
)
{
mRapl
=
XRE_IsParentProcess
(
)
?
new
RAPL
(
mCounters
)
:
nullptr
;
}
PowerCounters
:
:
~
PowerCounters
(
)
{
mCounters
.
clear
(
)
;
delete
mRapl
;
mRapl
=
nullptr
;
}
void
PowerCounters
:
:
Sample
(
)
{
if
(
mRapl
)
{
mRapl
-
>
Sample
(
)
;
}
}
