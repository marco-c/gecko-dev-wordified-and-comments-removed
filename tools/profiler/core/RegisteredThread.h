#
ifndef
RegisteredThread_h
#
define
RegisteredThread_h
#
include
"
platform
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
ProfilerThreadRegistration
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsIEventTarget
.
h
"
#
include
"
nsIThread
.
h
"
class
ProfilingStack
;
class
RacyRegisteredThread
final
{
public
:
explicit
RacyRegisteredThread
(
mozilla
:
:
profiler
:
:
ThreadRegistration
&
aThreadRegistration
)
;
MOZ_COUNTED_DTOR
(
RacyRegisteredThread
)
class
ProfilingStack
&
ProfilingStack
(
)
{
return
mThreadRegistration
.
mData
.
ProfilingStackRef
(
)
;
}
const
class
ProfilingStack
&
ProfilingStack
(
)
const
{
return
mThreadRegistration
.
mData
.
ProfilingStackCRef
(
)
;
}
mozilla
:
:
profiler
:
:
ThreadRegistration
&
mThreadRegistration
;
}
;
class
RegisteredThread
final
{
public
:
explicit
RegisteredThread
(
mozilla
:
:
profiler
:
:
ThreadRegistration
&
aThreadRegistration
)
;
~
RegisteredThread
(
)
;
class
RacyRegisteredThread
&
RacyRegisteredThread
(
)
{
return
mRacyRegisteredThread
;
}
const
class
RacyRegisteredThread
&
RacyRegisteredThread
(
)
const
{
return
mRacyRegisteredThread
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
JSContext
*
GetJSContext
(
)
const
{
return
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
mJSContext
;
}
const
mozilla
:
:
profiler
:
:
ThreadRegistrationInfo
&
Info
(
)
const
{
return
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
mInfo
;
}
private
:
class
RacyRegisteredThread
mRacyRegisteredThread
;
}
;
#
endif
