#
ifndef
RegisteredThread_h
#
define
RegisteredThread_h
#
include
"
platform
.
h
"
#
include
"
ThreadInfo
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
ProfilerThreadRegistration
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsIEventTarget
.
h
"
#
include
"
nsIThread
.
h
"
class
ProfilingStack
;
class
RacyRegisteredThread
final
{
public
:
explicit
RacyRegisteredThread
(
ProfilerThreadId
aThreadId
)
;
MOZ_COUNTED_DTOR
(
RacyRegisteredThread
)
void
SetIsBeingProfiled
(
bool
aIsBeingProfiled
)
{
mIsBeingProfiled
=
aIsBeingProfiled
;
}
bool
IsBeingProfiled
(
)
const
{
return
mIsBeingProfiled
;
}
void
ReinitializeOnResume
(
)
{
(
void
)
mSleep
.
compareExchange
(
SLEEPING_OBSERVED
SLEEPING_NOT_OBSERVED
)
;
}
bool
CanDuplicateLastSampleDueToSleep
(
)
{
if
(
mSleep
=
=
AWAKE
)
{
return
false
;
}
if
(
mSleep
.
compareExchange
(
SLEEPING_NOT_OBSERVED
SLEEPING_OBSERVED
)
)
{
return
false
;
}
return
true
;
}
void
SetSleeping
(
)
{
MOZ_ASSERT
(
mSleep
=
=
AWAKE
)
;
mSleep
=
SLEEPING_NOT_OBSERVED
;
}
void
SetAwake
(
)
{
MOZ_ASSERT
(
mSleep
!
=
AWAKE
)
;
mSleep
=
AWAKE
;
}
bool
IsSleeping
(
)
{
return
mSleep
!
=
AWAKE
;
}
ProfilerThreadId
ThreadId
(
)
const
{
return
mThreadId
;
}
class
ProfilingStack
&
ProfilingStack
(
)
{
return
mProfilingStack
;
}
const
class
ProfilingStack
&
ProfilingStack
(
)
const
{
return
mProfilingStack
;
}
private
:
class
ProfilingStack
&
mProfilingStack
;
const
ProfilerThreadId
mThreadId
;
static
const
int
AWAKE
=
0
;
static
const
int
SLEEPING_NOT_OBSERVED
=
1
;
static
const
int
SLEEPING_OBSERVED
=
2
;
mozilla
:
:
Atomic
<
int
>
mSleep
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
MemoryOrdering
:
:
Relaxed
>
mIsBeingProfiled
;
}
;
class
RegisteredThread
final
{
public
:
RegisteredThread
(
ThreadInfo
*
aInfo
nsIThread
*
aThread
void
*
aStackTop
)
;
~
RegisteredThread
(
)
;
class
RacyRegisteredThread
&
RacyRegisteredThread
(
)
{
return
mRacyRegisteredThread
;
}
const
class
RacyRegisteredThread
&
RacyRegisteredThread
(
)
const
{
return
mRacyRegisteredThread
;
}
PlatformData
*
GetPlatformData
(
)
const
{
return
mPlatformData
.
get
(
)
;
}
const
void
*
StackTop
(
)
const
{
return
mStackTop
;
}
void
GetRunningEventDelay
(
const
mozilla
:
:
TimeStamp
&
aNow
mozilla
:
:
TimeDuration
&
aDelay
mozilla
:
:
TimeDuration
&
aRunning
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
void
SetJSContext
(
JSContext
*
aContext
)
;
void
ClearJSContext
(
)
{
mContext
=
nullptr
;
}
JSContext
*
GetJSContext
(
)
const
{
return
mContext
;
}
const
RefPtr
<
ThreadInfo
>
Info
(
)
const
{
return
mThreadInfo
;
}
const
nsCOMPtr
<
nsIEventTarget
>
GetEventTarget
(
)
const
{
return
mThread
;
}
void
ResetMainThread
(
nsIThread
*
aThread
)
{
mThread
=
aThread
;
}
void
StartJSSampling
(
uint32_t
aJSFlags
)
{
MOZ_RELEASE_ASSERT
(
mJSSampling
=
=
INACTIVE
|
|
mJSSampling
=
=
INACTIVE_REQUESTED
)
;
mJSSampling
=
ACTIVE_REQUESTED
;
mJSFlags
=
aJSFlags
;
}
void
StopJSSampling
(
)
{
MOZ_RELEASE_ASSERT
(
mJSSampling
=
=
ACTIVE
|
|
mJSSampling
=
=
ACTIVE_REQUESTED
)
;
mJSSampling
=
INACTIVE_REQUESTED
;
}
void
PollJSSampling
(
)
;
private
:
class
RacyRegisteredThread
mRacyRegisteredThread
;
const
UniquePlatformData
mPlatformData
;
const
void
*
mStackTop
;
const
RefPtr
<
ThreadInfo
>
mThreadInfo
;
nsCOMPtr
<
nsIThread
>
mThread
;
JSContext
*
mContext
;
enum
{
INACTIVE
=
0
ACTIVE_REQUESTED
=
1
ACTIVE
=
2
INACTIVE_REQUESTED
=
3
}
mJSSampling
;
uint32_t
mJSFlags
;
bool
JSTracerEnabled
(
)
{
return
mJSFlags
&
uint32_t
(
JSInstrumentationFlags
:
:
TraceLogging
)
;
}
bool
JSAllocationsEnabled
(
)
{
return
mJSFlags
&
uint32_t
(
JSInstrumentationFlags
:
:
Allocations
)
;
}
}
;
#
endif
