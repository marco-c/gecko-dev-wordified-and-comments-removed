#
ifndef
RegisteredThread_h
#
define
RegisteredThread_h
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
platform
.
h
"
#
include
"
ThreadInfo
.
h
"
class
RacyRegisteredThread
final
{
public
:
explicit
RacyRegisteredThread
(
int
aThreadId
)
:
mThreadId
(
aThreadId
)
mSleep
(
AWAKE
)
{
MOZ_COUNT_CTOR
(
RacyRegisteredThread
)
;
}
~
RacyRegisteredThread
(
)
{
MOZ_COUNT_DTOR
(
RacyRegisteredThread
)
;
}
void
AddPendingMarker
(
const
char
*
aMarkerName
mozilla
:
:
UniquePtr
<
ProfilerMarkerPayload
>
aPayload
double
aTime
)
{
ProfilerMarker
*
marker
=
new
ProfilerMarker
(
aMarkerName
mThreadId
Move
(
aPayload
)
aTime
)
;
mPendingMarkers
.
insert
(
marker
)
;
}
ProfilerMarkerLinkedList
*
GetPendingMarkers
(
)
{
return
mPendingMarkers
.
accessList
(
)
;
}
void
ReinitializeOnResume
(
)
{
(
void
)
mSleep
.
compareExchange
(
SLEEPING_OBSERVED
SLEEPING_NOT_OBSERVED
)
;
}
bool
CanDuplicateLastSampleDueToSleep
(
)
{
if
(
mSleep
=
=
AWAKE
)
{
return
false
;
}
if
(
mSleep
.
compareExchange
(
SLEEPING_NOT_OBSERVED
SLEEPING_OBSERVED
)
)
{
return
false
;
}
return
true
;
}
void
SetSleeping
(
)
{
MOZ_ASSERT
(
mSleep
=
=
AWAKE
)
;
mSleep
=
SLEEPING_NOT_OBSERVED
;
}
void
SetAwake
(
)
{
MOZ_ASSERT
(
mSleep
!
=
AWAKE
)
;
mSleep
=
AWAKE
;
}
bool
IsSleeping
(
)
{
return
mSleep
!
=
AWAKE
;
}
int
ThreadId
(
)
const
{
return
mThreadId
;
}
class
PseudoStack
&
PseudoStack
(
)
{
return
mPseudoStack
;
}
const
class
PseudoStack
&
PseudoStack
(
)
const
{
return
mPseudoStack
;
}
private
:
class
PseudoStack
mPseudoStack
;
ProfilerSignalSafeLinkedList
<
ProfilerMarker
>
mPendingMarkers
;
const
int
mThreadId
;
static
const
int
AWAKE
=
0
;
static
const
int
SLEEPING_NOT_OBSERVED
=
1
;
static
const
int
SLEEPING_OBSERVED
=
2
;
mozilla
:
:
Atomic
<
int
>
mSleep
;
}
;
class
RegisteredThread
final
{
public
:
RegisteredThread
(
ThreadInfo
*
aInfo
nsIEventTarget
*
aThread
void
*
aStackTop
)
;
~
RegisteredThread
(
)
;
class
RacyRegisteredThread
&
RacyRegisteredThread
(
)
{
return
mRacyRegisteredThread
;
}
const
class
RacyRegisteredThread
&
RacyRegisteredThread
(
)
const
{
return
mRacyRegisteredThread
;
}
PlatformData
*
GetPlatformData
(
)
const
{
return
mPlatformData
.
get
(
)
;
}
const
void
*
StackTop
(
)
const
{
return
mStackTop
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
void
SetJSContext
(
JSContext
*
aContext
)
{
MOZ_ASSERT
(
aContext
&
&
!
mContext
)
;
mContext
=
aContext
;
js
:
:
SetContextProfilingStack
(
aContext
&
RacyRegisteredThread
(
)
.
PseudoStack
(
)
)
;
PollJSSampling
(
)
;
}
void
ClearJSContext
(
)
{
mContext
=
nullptr
;
}
JSContext
*
GetJSContext
(
)
const
{
return
mContext
;
}
const
RefPtr
<
ThreadInfo
>
Info
(
)
const
{
return
mThreadInfo
;
}
const
nsCOMPtr
<
nsIEventTarget
>
GetEventTarget
(
)
const
{
return
mThread
;
}
void
StartJSSampling
(
bool
aTrackOptimizations
)
{
MOZ_RELEASE_ASSERT
(
mJSSampling
=
=
INACTIVE
|
|
mJSSampling
=
=
INACTIVE_REQUESTED
)
;
mJSSampling
=
ACTIVE_REQUESTED
;
mJSTrackOptimizations
=
aTrackOptimizations
;
}
void
StopJSSampling
(
)
{
MOZ_RELEASE_ASSERT
(
mJSSampling
=
=
ACTIVE
|
|
mJSSampling
=
=
ACTIVE_REQUESTED
)
;
mJSSampling
=
INACTIVE_REQUESTED
;
}
void
PollJSSampling
(
)
{
if
(
mContext
)
{
if
(
mJSSampling
=
=
ACTIVE_REQUESTED
)
{
mJSSampling
=
ACTIVE
;
js
:
:
EnableContextProfilingStack
(
mContext
true
)
;
JS_SetGlobalJitCompilerOption
(
mContext
JSJITCOMPILER_TRACK_OPTIMIZATIONS
mJSTrackOptimizations
)
;
js
:
:
RegisterContextProfilingEventMarker
(
mContext
profiler_add_marker
)
;
}
else
if
(
mJSSampling
=
=
INACTIVE_REQUESTED
)
{
mJSSampling
=
INACTIVE
;
js
:
:
EnableContextProfilingStack
(
mContext
false
)
;
}
}
}
private
:
class
RacyRegisteredThread
mRacyRegisteredThread
;
const
UniquePlatformData
mPlatformData
;
const
void
*
mStackTop
;
const
RefPtr
<
ThreadInfo
>
mThreadInfo
;
const
nsCOMPtr
<
nsIEventTarget
>
mThread
;
JSContext
*
mContext
;
enum
{
INACTIVE
=
0
ACTIVE_REQUESTED
=
1
ACTIVE
=
2
INACTIVE_REQUESTED
=
3
}
mJSSampling
;
bool
mJSTrackOptimizations
;
}
;
#
endif
