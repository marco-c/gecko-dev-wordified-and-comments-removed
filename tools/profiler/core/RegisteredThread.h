#
ifndef
RegisteredThread_h
#
define
RegisteredThread_h
#
include
"
platform
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
ProfilerThreadRegistration
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsIEventTarget
.
h
"
#
include
"
nsIThread
.
h
"
class
ProfilingStack
;
class
RacyRegisteredThread
final
{
public
:
explicit
RacyRegisteredThread
(
mozilla
:
:
profiler
:
:
ThreadRegistration
&
aThreadRegistration
)
;
MOZ_COUNTED_DTOR
(
RacyRegisteredThread
)
void
SetIsBeingProfiled
(
bool
aIsBeingProfiled
)
{
mThreadRegistration
.
mData
.
mIsBeingProfiled
=
aIsBeingProfiled
;
}
void
ReinitializeOnResume
(
)
{
mThreadRegistration
.
mData
.
ReinitializeOnResume
(
)
;
}
bool
CanDuplicateLastSampleDueToSleep
(
)
{
return
mThreadRegistration
.
mData
.
CanDuplicateLastSampleDueToSleep
(
)
;
}
void
SetSleeping
(
)
{
mThreadRegistration
.
mData
.
SetSleeping
(
)
;
}
void
SetAwake
(
)
{
mThreadRegistration
.
mData
.
SetAwake
(
)
;
}
bool
IsSleeping
(
)
{
return
mThreadRegistration
.
mData
.
IsSleeping
(
)
;
}
class
ProfilingStack
&
ProfilingStack
(
)
{
return
mThreadRegistration
.
mData
.
ProfilingStackRef
(
)
;
}
const
class
ProfilingStack
&
ProfilingStack
(
)
const
{
return
mThreadRegistration
.
mData
.
ProfilingStackCRef
(
)
;
}
mozilla
:
:
profiler
:
:
ThreadRegistration
&
mThreadRegistration
;
}
;
class
RegisteredThread
final
{
public
:
explicit
RegisteredThread
(
mozilla
:
:
profiler
:
:
ThreadRegistration
&
aThreadRegistration
)
;
~
RegisteredThread
(
)
;
class
RacyRegisteredThread
&
RacyRegisteredThread
(
)
{
return
mRacyRegisteredThread
;
}
const
class
RacyRegisteredThread
&
RacyRegisteredThread
(
)
const
{
return
mRacyRegisteredThread
;
}
PlatformData
*
GetPlatformData
(
)
const
{
return
mPlatformData
.
get
(
)
;
}
const
void
*
StackTop
(
)
const
{
return
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
mStackTop
;
}
void
GetRunningEventDelay
(
const
mozilla
:
:
TimeStamp
&
aNow
mozilla
:
:
TimeDuration
&
aDelay
mozilla
:
:
TimeDuration
&
aRunning
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
void
SetJSContext
(
JSContext
*
aContext
)
;
void
ClearJSContext
(
)
{
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
mJSContext
=
nullptr
;
}
JSContext
*
GetJSContext
(
)
const
{
return
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
mJSContext
;
}
const
mozilla
:
:
profiler
:
:
ThreadRegistrationInfo
&
Info
(
)
const
{
return
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
mInfo
;
}
nsCOMPtr
<
nsIEventTarget
>
GetEventTarget
(
)
const
{
return
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
mThread
;
}
void
ResetMainThread
(
nsIThread
*
aThread
)
{
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
mThread
=
aThread
;
}
void
StartJSSampling
(
uint32_t
aJSFlags
)
{
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
StartJSSampling
(
aJSFlags
)
;
}
void
StopJSSampling
(
)
{
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
StopJSSampling
(
)
;
}
void
PollJSSampling
(
)
;
private
:
class
RacyRegisteredThread
mRacyRegisteredThread
;
const
UniquePlatformData
mPlatformData
;
}
;
#
endif
