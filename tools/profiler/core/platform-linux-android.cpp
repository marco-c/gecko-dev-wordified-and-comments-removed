#
include
<
stdio
.
h
>
#
include
<
math
.
h
>
#
include
<
pthread
.
h
>
#
include
<
semaphore
.
h
>
#
include
<
signal
.
h
>
#
include
<
sys
/
time
.
h
>
#
include
<
sys
/
resource
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
prctl
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
sched
.
h
>
#
include
<
ucontext
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
mman
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
<
fcntl
.
h
>
#
include
<
unistd
.
h
>
#
include
<
semaphore
.
h
>
#
ifdef
__GLIBC__
#
include
<
execinfo
.
h
>
#
endif
#
include
<
strings
.
h
>
#
include
<
errno
.
h
>
#
include
<
stdarg
.
h
>
#
include
"
prenv
.
h
"
#
include
"
mozilla
/
LinuxSignal
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
nsMemoryReporterManager
.
h
"
#
include
<
string
.
h
>
#
include
<
list
>
using
namespace
mozilla
;
Thread
:
:
tid_t
Thread
:
:
GetCurrentId
(
)
{
return
gettid
(
)
;
}
static
void
SetSampleContext
(
TickSample
*
sample
mcontext_t
&
mcontext
)
{
#
if
defined
(
GP_ARCH_x86
)
sample
-
>
pc
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_EIP
]
)
;
sample
-
>
sp
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_ESP
]
)
;
sample
-
>
fp
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_EBP
]
)
;
#
elif
defined
(
GP_ARCH_amd64
)
sample
-
>
pc
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_RIP
]
)
;
sample
-
>
sp
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_RSP
]
)
;
sample
-
>
fp
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_RBP
]
)
;
#
elif
defined
(
GP_ARCH_arm
)
sample
-
>
pc
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_pc
)
;
sample
-
>
sp
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_sp
)
;
sample
-
>
fp
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_fp
)
;
sample
-
>
lr
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_lr
)
;
#
else
#
error
"
bad
platform
"
#
endif
}
#
if
defined
(
GP_OS_android
)
#
define
SYS_tgkill
__NR_tgkill
#
endif
int
tgkill
(
pid_t
tgid
pid_t
tid
int
signalno
)
{
return
syscall
(
SYS_tgkill
tgid
tid
signalno
)
;
}
static
void
SleepMicro
(
int
aMicroseconds
)
{
aMicroseconds
=
std
:
:
max
(
0
aMicroseconds
)
;
if
(
aMicroseconds
>
=
1000000
)
{
MOZ_ALWAYS_TRUE
(
!
:
:
usleep
(
aMicroseconds
)
)
;
return
;
}
struct
timespec
ts
;
ts
.
tv_sec
=
0
;
ts
.
tv_nsec
=
aMicroseconds
*
1000UL
;
int
rv
=
:
:
nanosleep
(
&
ts
&
ts
)
;
while
(
rv
!
=
0
&
&
errno
=
=
EINTR
)
{
rv
=
:
:
nanosleep
(
&
ts
&
ts
)
;
}
MOZ_ASSERT
(
!
rv
"
nanosleep
call
failed
"
)
;
}
class
PlatformData
{
public
:
explicit
PlatformData
(
int
aThreadId
)
{
MOZ_COUNT_CTOR
(
PlatformData
)
;
}
~
PlatformData
(
)
{
MOZ_COUNT_DTOR
(
PlatformData
)
;
}
}
;
struct
SigHandlerCoordinator
{
SigHandlerCoordinator
(
)
{
PodZero
(
&
mUContext
)
;
int
r
=
sem_init
(
&
mMessage2
0
0
)
;
r
|
=
sem_init
(
&
mMessage3
0
0
)
;
r
|
=
sem_init
(
&
mMessage4
0
0
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
}
~
SigHandlerCoordinator
(
)
{
int
r
=
sem_destroy
(
&
mMessage2
)
;
r
|
=
sem_destroy
(
&
mMessage3
)
;
r
|
=
sem_destroy
(
&
mMessage4
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
}
sem_t
mMessage2
;
sem_t
mMessage3
;
sem_t
mMessage4
;
ucontext_t
mUContext
;
}
;
struct
SigHandlerCoordinator
*
SamplerThread
:
:
sSigHandlerCoordinator
=
nullptr
;
static
void
SigprofHandler
(
int
aSignal
siginfo_t
*
aInfo
void
*
aContext
)
{
int
savedErrno
=
errno
;
MOZ_ASSERT
(
aSignal
=
=
SIGPROF
)
;
MOZ_ASSERT
(
SamplerThread
:
:
sSigHandlerCoordinator
)
;
SamplerThread
:
:
sSigHandlerCoordinator
-
>
mUContext
=
*
static_cast
<
ucontext_t
*
>
(
aContext
)
;
int
r
=
sem_post
(
&
SamplerThread
:
:
sSigHandlerCoordinator
-
>
mMessage2
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
while
(
true
)
{
r
=
sem_wait
(
&
SamplerThread
:
:
sSigHandlerCoordinator
-
>
mMessage3
)
;
if
(
r
=
=
-
1
&
&
errno
=
=
EINTR
)
{
continue
;
}
MOZ_ASSERT
(
r
=
=
0
)
;
break
;
}
r
=
sem_post
(
&
SamplerThread
:
:
sSigHandlerCoordinator
-
>
mMessage4
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
errno
=
savedErrno
;
}
static
void
*
ThreadEntry
(
void
*
aArg
)
{
auto
thread
=
static_cast
<
SamplerThread
*
>
(
aArg
)
;
prctl
(
PR_SET_NAME
"
SamplerThread
"
0
0
0
)
;
thread
-
>
mSamplerTid
=
gettid
(
)
;
thread
-
>
Run
(
)
;
return
nullptr
;
}
SamplerThread
:
:
SamplerThread
(
PS
:
:
LockRef
aLock
uint32_t
aActivityGeneration
double
aIntervalMilliseconds
)
:
mActivityGeneration
(
aActivityGeneration
)
mIntervalMicroseconds
(
std
:
:
max
(
1
int
(
floor
(
aIntervalMilliseconds
*
1000
+
0
.
5
)
)
)
)
mMyPid
(
getpid
(
)
)
mSamplerTid
(
-
1
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
#
if
defined
(
USE_EHABI_STACKWALK
)
mozilla
:
:
EHABIStackWalkInit
(
)
;
#
elif
defined
(
USE_LUL_STACKWALK
)
bool
createdLUL
=
false
;
lul
:
:
LUL
*
lul
=
gPS
-
>
LUL
(
aLock
)
;
if
(
!
lul
)
{
lul
=
new
lul
:
:
LUL
(
logging_sink_for_LUL
)
;
gPS
-
>
SetLUL
(
aLock
lul
)
;
read_procmaps
(
lul
)
;
createdLUL
=
true
;
}
#
endif
struct
sigaction
sa
;
sa
.
sa_sigaction
=
MOZ_SIGNAL_TRAMPOLINE
(
SigprofHandler
)
;
sigemptyset
(
&
sa
.
sa_mask
)
;
sa
.
sa_flags
=
SA_RESTART
|
SA_SIGINFO
;
if
(
sigaction
(
SIGPROF
&
sa
&
mOldSigprofHandler
)
!
=
0
)
{
MOZ_CRASH
(
"
Error
installing
SIGPROF
handler
in
the
profiler
"
)
;
}
#
if
defined
(
USE_LUL_STACKWALK
)
if
(
createdLUL
)
{
lul
-
>
EnableUnwinding
(
)
;
if
(
PR_GetEnv
(
"
MOZ_PROFILER_LUL_TEST
"
)
)
{
int
nTests
=
0
nTestsPassed
=
0
;
RunLulUnitTests
(
&
nTests
&
nTestsPassed
lul
)
;
}
}
#
endif
if
(
pthread_create
(
&
mThread
nullptr
ThreadEntry
this
)
!
=
0
)
{
MOZ_CRASH
(
"
pthread_create
failed
"
)
;
}
}
SamplerThread
:
:
~
SamplerThread
(
)
{
pthread_join
(
mThread
nullptr
)
;
}
void
SamplerThread
:
:
Stop
(
PS
:
:
LockRef
aLock
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
sigaction
(
SIGPROF
&
mOldSigprofHandler
0
)
;
}
void
SamplerThread
:
:
SuspendAndSampleAndResumeThread
(
PS
:
:
LockRef
aLock
ThreadInfo
*
aThreadInfo
bool
aIsFirstProfiledThread
)
{
MOZ_ASSERT
(
!
sSigHandlerCoordinator
)
;
int
sampleeTid
=
aThreadInfo
-
>
ThreadId
(
)
;
MOZ_RELEASE_ASSERT
(
sampleeTid
!
=
mSamplerTid
)
;
int64_t
rssMemory
=
0
;
int64_t
ussMemory
=
0
;
if
(
aIsFirstProfiledThread
&
&
gPS
-
>
FeatureMemory
(
aLock
)
)
{
rssMemory
=
nsMemoryReporterManager
:
:
ResidentFast
(
)
;
ussMemory
=
nsMemoryReporterManager
:
:
ResidentUnique
(
)
;
}
TickSample
sample
;
sample
.
threadInfo
=
aThreadInfo
;
sample
.
timestamp
=
mozilla
:
:
TimeStamp
:
:
Now
(
)
;
sample
.
rssMemory
=
rssMemory
;
sample
.
ussMemory
=
ussMemory
;
SigHandlerCoordinator
coord
;
sSigHandlerCoordinator
=
&
coord
;
int
r
=
tgkill
(
mMyPid
sampleeTid
SIGPROF
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
while
(
true
)
{
r
=
sem_wait
(
&
sSigHandlerCoordinator
-
>
mMessage2
)
;
if
(
r
=
=
-
1
&
&
errno
=
=
EINTR
)
{
continue
;
}
MOZ_ASSERT
(
r
=
=
0
)
;
break
;
}
sample
.
context
=
&
sSigHandlerCoordinator
-
>
mUContext
;
SetSampleContext
(
&
sample
sSigHandlerCoordinator
-
>
mUContext
.
uc_mcontext
)
;
Tick
(
aLock
gPS
-
>
Buffer
(
aLock
)
&
sample
)
;
r
=
sem_post
(
&
sSigHandlerCoordinator
-
>
mMessage3
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
while
(
true
)
{
r
=
sem_wait
(
&
sSigHandlerCoordinator
-
>
mMessage4
)
;
if
(
r
=
=
-
1
&
&
errno
=
=
EINTR
)
{
continue
;
}
MOZ_ASSERT
(
r
=
=
0
)
;
break
;
}
sSigHandlerCoordinator
=
nullptr
;
}
#
if
defined
(
GP_OS_android
)
static
struct
sigaction
gOldSigstartHandler
;
const
int
SIGSTART
=
SIGUSR2
;
static
void
freeArray
(
const
char
*
*
aArray
int
aSize
)
{
for
(
int
i
=
0
;
i
<
aSize
;
i
+
+
)
{
free
(
(
void
*
)
aArray
[
i
]
)
;
}
}
static
uint32_t
readCSVArray
(
char
*
aCsvList
const
char
*
*
aBuffer
)
{
uint32_t
count
;
char
*
savePtr
;
int
newlinePos
=
strlen
(
aCsvList
)
-
1
;
if
(
aCsvList
[
newlinePos
]
=
=
'
\
n
'
)
{
aCsvList
[
newlinePos
]
=
'
\
0
'
;
}
char
*
item
=
strtok_r
(
aCsvList
"
"
&
savePtr
)
;
for
(
count
=
0
;
item
;
item
=
strtok_r
(
nullptr
"
"
&
savePtr
)
)
{
int
length
=
strlen
(
item
)
+
1
;
char
*
newBuf
=
(
char
*
)
malloc
(
sizeof
(
char
)
*
length
)
;
aBuffer
[
count
]
=
newBuf
;
strncpy
(
newBuf
item
length
)
;
count
+
+
;
}
return
count
;
}
static
void
ReadProfilerVars
(
const
char
*
aFileName
const
char
*
*
aFeatures
uint32_t
*
aFeatureCount
const
char
*
*
aThreadNames
uint32_t
*
aThreadCount
)
{
FILE
*
file
=
fopen
(
aFileName
"
r
"
)
;
const
int
bufferSize
=
1024
;
char
line
[
bufferSize
]
;
char
*
feature
;
char
*
value
;
char
*
savePtr
;
if
(
file
)
{
PS
:
:
AutoLock
lock
(
gPSMutex
)
;
while
(
fgets
(
line
bufferSize
file
)
!
=
nullptr
)
{
feature
=
strtok_r
(
line
"
=
"
&
savePtr
)
;
value
=
strtok_r
(
nullptr
"
"
&
savePtr
)
;
if
(
strncmp
(
feature
"
MOZ_PROFILER_INTERVAL
"
bufferSize
)
=
=
0
)
{
set_profiler_interval
(
lock
value
)
;
}
else
if
(
strncmp
(
feature
"
MOZ_PROFILER_ENTRIES
"
bufferSize
)
=
=
0
)
{
set_profiler_entries
(
lock
value
)
;
}
else
if
(
strncmp
(
feature
"
MOZ_PROFILER_FEATURES
"
bufferSize
)
=
=
0
)
{
*
aFeatureCount
=
readCSVArray
(
value
aFeatures
)
;
}
else
if
(
strncmp
(
feature
"
threads
"
bufferSize
)
=
=
0
)
{
*
aThreadCount
=
readCSVArray
(
value
aThreadNames
)
;
}
}
fclose
(
file
)
;
}
}
static
void
DoStartTask
(
)
{
uint32_t
featureCount
=
0
;
uint32_t
threadCount
=
0
;
const
char
*
threadNames
[
10
]
;
const
char
*
features
[
10
]
;
const
char
*
profilerConfigFile
=
"
/
data
/
local
/
tmp
/
profiler
.
options
"
;
ReadProfilerVars
(
profilerConfigFile
features
&
featureCount
threadNames
&
threadCount
)
;
MOZ_ASSERT
(
featureCount
<
10
)
;
MOZ_ASSERT
(
threadCount
<
10
)
;
profiler_start
(
PROFILE_DEFAULT_ENTRIES
1
features
featureCount
threadNames
threadCount
)
;
freeArray
(
threadNames
threadCount
)
;
freeArray
(
features
featureCount
)
;
}
static
void
SigstartHandler
(
int
aSignal
siginfo_t
*
aInfo
void
*
aContext
)
{
class
StartTask
:
public
Runnable
{
public
:
NS_IMETHOD
Run
(
)
override
{
DoStartTask
(
)
;
return
NS_OK
;
}
}
;
NS_DispatchToMainThread
(
new
StartTask
(
)
)
;
}
static
void
PlatformInit
(
PS
:
:
LockRef
aLock
)
{
struct
sigaction
sa
;
sa
.
sa_sigaction
=
SigstartHandler
;
sigemptyset
(
&
sa
.
sa_mask
)
;
sa
.
sa_flags
=
SA_RESTART
|
SA_SIGINFO
;
if
(
sigaction
(
SIGSTART
&
sa
&
gOldSigstartHandler
)
!
=
0
)
{
MOZ_CRASH
(
"
Error
installing
SIGSTART
handler
in
the
profiler
"
)
;
}
}
#
else
static
void
paf_prepare
(
)
{
MOZ_RELEASE_ASSERT
(
gPS
)
;
PS
:
:
AutoLock
lock
(
gPSMutex
)
;
gPS
-
>
SetWasPaused
(
lock
gPS
-
>
IsPaused
(
lock
)
)
;
gPS
-
>
SetIsPaused
(
lock
true
)
;
}
static
void
paf_parent
(
)
{
MOZ_RELEASE_ASSERT
(
gPS
)
;
PS
:
:
AutoLock
lock
(
gPSMutex
)
;
gPS
-
>
SetIsPaused
(
lock
gPS
-
>
WasPaused
(
lock
)
)
;
gPS
-
>
SetWasPaused
(
lock
false
)
;
}
static
void
PlatformInit
(
PS
:
:
LockRef
aLock
)
{
pthread_atfork
(
paf_prepare
paf_parent
nullptr
)
;
}
#
endif
void
TickSample
:
:
PopulateContext
(
void
*
aContext
)
{
MOZ_ASSERT
(
aContext
)
;
ucontext_t
*
pContext
=
reinterpret_cast
<
ucontext_t
*
>
(
aContext
)
;
if
(
!
getcontext
(
pContext
)
)
{
context
=
pContext
;
SetSampleContext
(
this
reinterpret_cast
<
ucontext_t
*
>
(
aContext
)
-
>
uc_mcontext
)
;
}
}
