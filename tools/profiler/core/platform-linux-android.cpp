#
include
<
stdio
.
h
>
#
include
<
math
.
h
>
#
include
<
pthread
.
h
>
#
include
<
semaphore
.
h
>
#
include
<
signal
.
h
>
#
include
<
sys
/
time
.
h
>
#
include
<
sys
/
resource
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
prctl
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
sched
.
h
>
#
include
<
ucontext
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
mman
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
<
fcntl
.
h
>
#
include
<
unistd
.
h
>
#
include
<
semaphore
.
h
>
#
ifdef
__GLIBC__
#
include
<
execinfo
.
h
>
#
endif
#
include
<
strings
.
h
>
#
include
<
errno
.
h
>
#
include
<
stdarg
.
h
>
#
include
"
prenv
.
h
"
#
include
"
mozilla
/
LinuxSignal
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
nsMemoryReporterManager
.
h
"
#
include
<
string
.
h
>
#
include
<
list
>
using
namespace
mozilla
;
static
struct
sigaction
gOldSigprofHandler
;
static
pthread_t
gSigprofSenderThread
;
#
if
defined
(
USE_LUL_STACKWALK
)
lul
:
:
LUL
*
gLUL
=
nullptr
;
static
void
gLUL_initialization_routine
(
void
)
{
MOZ_ASSERT
(
!
gLUL
)
;
MOZ_ASSERT
(
gettid
(
)
=
=
getpid
(
)
)
;
gLUL
=
new
lul
:
:
LUL
(
logging_sink_for_LUL
)
;
read_procmaps
(
gLUL
)
;
}
#
endif
Thread
:
:
tid_t
Thread
:
:
GetCurrentId
(
)
{
return
gettid
(
)
;
}
#
if
!
defined
(
GP_OS_android
)
static
bool
gWasPaused
=
false
;
static
void
paf_prepare
(
void
)
{
gWasPaused
=
gIsPaused
;
gIsPaused
=
true
;
}
static
void
paf_parent
(
void
)
{
gIsPaused
=
gWasPaused
;
}
static
void
*
setup_atfork
(
)
{
pthread_atfork
(
paf_prepare
paf_parent
NULL
)
;
return
NULL
;
}
#
endif
static
int
gIntervalMicro
;
static
void
SetSampleContext
(
TickSample
*
sample
mcontext_t
&
mcontext
)
{
#
if
defined
(
GP_ARCH_x86
)
sample
-
>
pc
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_EIP
]
)
;
sample
-
>
sp
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_ESP
]
)
;
sample
-
>
fp
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_EBP
]
)
;
#
elif
defined
(
GP_ARCH_amd64
)
sample
-
>
pc
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_RIP
]
)
;
sample
-
>
sp
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_RSP
]
)
;
sample
-
>
fp
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_RBP
]
)
;
#
elif
defined
(
GP_ARCH_arm
)
sample
-
>
pc
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_pc
)
;
sample
-
>
sp
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_sp
)
;
sample
-
>
fp
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_fp
)
;
sample
-
>
lr
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_lr
)
;
#
else
#
error
"
bad
platform
"
#
endif
}
struct
SigHandlerCoordinator
{
SigHandlerCoordinator
(
)
{
PodZero
(
&
mUContext
)
;
int
r
=
sem_init
(
&
mMessage2
0
0
)
;
r
|
=
sem_init
(
&
mMessage3
0
0
)
;
r
|
=
sem_init
(
&
mMessage4
0
0
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
}
~
SigHandlerCoordinator
(
)
{
int
r
=
sem_destroy
(
&
mMessage2
)
;
r
|
=
sem_destroy
(
&
mMessage3
)
;
r
|
=
sem_destroy
(
&
mMessage4
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
}
sem_t
mMessage2
;
sem_t
mMessage3
;
sem_t
mMessage4
;
ucontext_t
mUContext
;
}
;
static
SigHandlerCoordinator
*
gSigHandlerCoordinator
=
nullptr
;
static
void
SigprofHandler
(
int
aSignal
siginfo_t
*
aInfo
void
*
aContext
)
{
int
savedErrno
=
errno
;
MOZ_ASSERT
(
aSignal
=
=
SIGPROF
)
;
MOZ_ASSERT
(
gSigHandlerCoordinator
)
;
gSigHandlerCoordinator
-
>
mUContext
=
*
static_cast
<
ucontext_t
*
>
(
aContext
)
;
int
r
=
sem_post
(
&
gSigHandlerCoordinator
-
>
mMessage2
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
while
(
true
)
{
r
=
sem_wait
(
&
gSigHandlerCoordinator
-
>
mMessage3
)
;
if
(
r
=
=
-
1
&
&
errno
=
=
EINTR
)
{
continue
;
}
MOZ_ASSERT
(
r
=
=
0
)
;
break
;
}
r
=
sem_post
(
&
gSigHandlerCoordinator
-
>
mMessage4
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
errno
=
savedErrno
;
}
#
if
defined
(
GP_OS_android
)
#
define
SYS_tgkill
__NR_tgkill
#
endif
int
tgkill
(
pid_t
tgid
pid_t
tid
int
signalno
)
{
return
syscall
(
SYS_tgkill
tgid
tid
signalno
)
;
}
class
PlatformData
{
public
:
PlatformData
(
)
{
MOZ_COUNT_CTOR
(
PlatformData
)
;
}
~
PlatformData
(
)
{
MOZ_COUNT_DTOR
(
PlatformData
)
;
}
}
;
UniquePlatformData
AllocPlatformData
(
int
aThreadId
)
{
return
UniquePlatformData
(
new
PlatformData
)
;
}
void
PlatformDataDestructor
:
:
operator
(
)
(
PlatformData
*
aData
)
{
delete
aData
;
}
static
void
SleepMicro
(
int
aMicroseconds
)
{
if
(
MOZ_UNLIKELY
(
aMicroseconds
>
=
1000000
)
)
{
MOZ_ALWAYS_TRUE
(
!
:
:
usleep
(
aMicroseconds
)
)
;
return
;
}
struct
timespec
ts
;
ts
.
tv_sec
=
0
;
ts
.
tv_nsec
=
aMicroseconds
*
1000UL
;
int
rv
=
:
:
nanosleep
(
&
ts
&
ts
)
;
while
(
rv
!
=
0
&
&
errno
=
=
EINTR
)
{
rv
=
:
:
nanosleep
(
&
ts
&
ts
)
;
}
MOZ_ASSERT
(
!
rv
"
nanosleep
call
failed
"
)
;
}
static
void
*
SigprofSender
(
void
*
aArg
)
{
prctl
(
PR_SET_NAME
"
SamplerThread
"
0
0
0
)
;
int
vm_tgid_
=
getpid
(
)
;
DebugOnly
<
int
>
my_tid
=
gettid
(
)
;
TimeDuration
lastSleepOverhead
=
0
;
TimeStamp
sampleStart
=
TimeStamp
:
:
Now
(
)
;
while
(
gIsActive
)
{
gBuffer
-
>
deleteExpiredStoredMarkers
(
)
;
if
(
!
gIsPaused
)
{
StaticMutexAutoLock
lock
(
gRegisteredThreadsMutex
)
;
bool
isFirstProfiledThread
=
true
;
for
(
uint32_t
i
=
0
;
i
<
gRegisteredThreads
-
>
size
(
)
;
i
+
+
)
{
ThreadInfo
*
info
=
(
*
gRegisteredThreads
)
[
i
]
;
if
(
!
info
-
>
HasProfile
(
)
|
|
info
-
>
IsPendingDelete
(
)
)
{
continue
;
}
if
(
info
-
>
Stack
(
)
-
>
CanDuplicateLastSampleDueToSleep
(
)
)
{
info
-
>
DuplicateLastSample
(
gBuffer
gStartTime
)
;
continue
;
}
info
-
>
UpdateThreadResponsiveness
(
)
;
int
threadId
=
info
-
>
ThreadId
(
)
;
MOZ_ASSERT
(
threadId
!
=
my_tid
)
;
int64_t
rssMemory
=
0
;
int64_t
ussMemory
=
0
;
if
(
isFirstProfiledThread
&
&
gProfileMemory
)
{
rssMemory
=
nsMemoryReporterManager
:
:
ResidentFast
(
)
;
ussMemory
=
nsMemoryReporterManager
:
:
ResidentUnique
(
)
;
}
SigHandlerCoordinator
coord
;
gSigHandlerCoordinator
=
&
coord
;
int
r
=
tgkill
(
vm_tgid_
threadId
SIGPROF
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
while
(
true
)
{
r
=
sem_wait
(
&
gSigHandlerCoordinator
-
>
mMessage2
)
;
if
(
r
=
=
-
1
&
&
errno
=
=
EINTR
)
{
continue
;
}
MOZ_ASSERT
(
r
=
=
0
)
;
break
;
}
TickSample
sample
;
sample
.
context
=
&
gSigHandlerCoordinator
-
>
mUContext
;
SetSampleContext
(
&
sample
gSigHandlerCoordinator
-
>
mUContext
.
uc_mcontext
)
;
sample
.
threadInfo
=
info
;
sample
.
timestamp
=
mozilla
:
:
TimeStamp
:
:
Now
(
)
;
sample
.
rssMemory
=
rssMemory
;
sample
.
ussMemory
=
ussMemory
;
Tick
(
gBuffer
&
sample
)
;
r
=
sem_post
(
&
gSigHandlerCoordinator
-
>
mMessage3
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
while
(
true
)
{
r
=
sem_wait
(
&
gSigHandlerCoordinator
-
>
mMessage4
)
;
if
(
r
=
=
-
1
&
&
errno
=
=
EINTR
)
{
continue
;
}
MOZ_ASSERT
(
r
=
=
0
)
;
break
;
}
gSigHandlerCoordinator
=
nullptr
;
isFirstProfiledThread
=
false
;
}
#
if
defined
(
USE_LUL_STACKWALK
)
gLUL
-
>
MaybeShowStats
(
)
;
#
endif
}
TimeStamp
targetSleepEndTime
=
sampleStart
+
TimeDuration
:
:
FromMicroseconds
(
gIntervalMicro
)
;
TimeStamp
beforeSleep
=
TimeStamp
:
:
Now
(
)
;
TimeDuration
targetSleepDuration
=
targetSleepEndTime
-
beforeSleep
;
double
sleepTime
=
std
:
:
max
(
0
.
0
(
targetSleepDuration
-
lastSleepOverhead
)
.
ToMicroseconds
(
)
)
;
SleepMicro
(
sleepTime
)
;
sampleStart
=
TimeStamp
:
:
Now
(
)
;
lastSleepOverhead
=
sampleStart
-
(
beforeSleep
+
TimeDuration
:
:
FromMicroseconds
(
sleepTime
)
)
;
}
return
0
;
}
static
void
PlatformStart
(
double
aInterval
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
#
if
defined
(
USE_EHABI_STACKWALK
)
mozilla
:
:
EHABIStackWalkInit
(
)
;
#
elif
defined
(
USE_LUL_STACKWALK
)
if
(
!
gLUL
)
{
gLUL_initialization_routine
(
)
;
}
#
endif
gIntervalMicro
=
floor
(
aInterval
*
1000
+
0
.
5
)
;
if
(
gIntervalMicro
<
=
0
)
{
gIntervalMicro
=
1
;
}
gSigHandlerCoordinator
=
nullptr
;
LOG
(
"
Request
signal
"
)
;
struct
sigaction
sa
;
sa
.
sa_sigaction
=
MOZ_SIGNAL_TRAMPOLINE
(
SigprofHandler
)
;
sigemptyset
(
&
sa
.
sa_mask
)
;
sa
.
sa_flags
=
SA_RESTART
|
SA_SIGINFO
;
if
(
sigaction
(
SIGPROF
&
sa
&
gOldSigprofHandler
)
!
=
0
)
{
MOZ_CRASH
(
"
Error
installing
signal
"
)
;
}
LOG
(
"
Signal
installed
"
)
;
#
if
defined
(
USE_LUL_STACKWALK
)
gLUL
-
>
EnableUnwinding
(
)
;
if
(
PR_GetEnv
(
"
MOZ_PROFILER_LUL_TEST
"
)
)
{
int
nTests
=
0
nTestsPassed
=
0
;
RunLulUnitTests
(
&
nTests
&
nTestsPassed
gLUL
)
;
}
#
endif
if
(
pthread_create
(
&
gSigprofSenderThread
NULL
SigprofSender
NULL
)
!
=
0
)
{
MOZ_CRASH
(
"
pthread_create
failed
"
)
;
}
LOG
(
"
Profiler
thread
started
"
)
;
}
static
void
PlatformStop
(
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
gIntervalMicro
=
0
;
pthread_join
(
gSigprofSenderThread
NULL
)
;
sigaction
(
SIGPROF
&
gOldSigprofHandler
0
)
;
}
#
if
defined
(
GP_OS_android
)
static
struct
sigaction
gOldSigstartHandler
;
const
int
SIGSTART
=
SIGUSR2
;
static
void
freeArray
(
const
char
*
*
array
int
size
)
{
for
(
int
i
=
0
;
i
<
size
;
i
+
+
)
{
free
(
(
void
*
)
array
[
i
]
)
;
}
}
static
uint32_t
readCSVArray
(
char
*
csvList
const
char
*
*
buffer
)
{
uint32_t
count
;
char
*
savePtr
;
int
newlinePos
=
strlen
(
csvList
)
-
1
;
if
(
csvList
[
newlinePos
]
=
=
'
\
n
'
)
{
csvList
[
newlinePos
]
=
'
\
0
'
;
}
char
*
item
=
strtok_r
(
csvList
"
"
&
savePtr
)
;
for
(
count
=
0
;
item
;
item
=
strtok_r
(
NULL
"
"
&
savePtr
)
)
{
int
length
=
strlen
(
item
)
+
1
;
char
*
newBuf
=
(
char
*
)
malloc
(
sizeof
(
char
)
*
length
)
;
buffer
[
count
]
=
newBuf
;
strncpy
(
newBuf
item
length
)
;
count
+
+
;
}
return
count
;
}
static
void
ReadProfilerVars
(
const
char
*
fileName
const
char
*
*
features
uint32_t
*
featureCount
const
char
*
*
threadNames
uint32_t
*
threadCount
)
{
FILE
*
file
=
fopen
(
fileName
"
r
"
)
;
const
int
bufferSize
=
1024
;
char
line
[
bufferSize
]
;
char
*
feature
;
char
*
value
;
char
*
savePtr
;
if
(
file
)
{
while
(
fgets
(
line
bufferSize
file
)
!
=
NULL
)
{
feature
=
strtok_r
(
line
"
=
"
&
savePtr
)
;
value
=
strtok_r
(
NULL
"
"
&
savePtr
)
;
if
(
strncmp
(
feature
"
MOZ_PROFILER_INTERVAL
"
bufferSize
)
=
=
0
)
{
set_profiler_interval
(
value
)
;
}
else
if
(
strncmp
(
feature
"
MOZ_PROFILER_ENTRIES
"
bufferSize
)
=
=
0
)
{
set_profiler_entries
(
value
)
;
}
else
if
(
strncmp
(
feature
"
MOZ_PROFILER_FEATURES
"
bufferSize
)
=
=
0
)
{
*
featureCount
=
readCSVArray
(
value
features
)
;
}
else
if
(
strncmp
(
feature
"
threads
"
bufferSize
)
=
=
0
)
{
*
threadCount
=
readCSVArray
(
value
threadNames
)
;
}
}
fclose
(
file
)
;
}
}
static
void
DoStartTask
(
)
{
uint32_t
featureCount
=
0
;
uint32_t
threadCount
=
0
;
const
char
*
threadNames
[
10
]
;
const
char
*
features
[
10
]
;
const
char
*
profilerConfigFile
=
"
/
data
/
local
/
tmp
/
profiler
.
options
"
;
ReadProfilerVars
(
profilerConfigFile
features
&
featureCount
threadNames
&
threadCount
)
;
MOZ_ASSERT
(
featureCount
<
10
)
;
MOZ_ASSERT
(
threadCount
<
10
)
;
profiler_start
(
PROFILE_DEFAULT_ENTRIES
1
features
featureCount
threadNames
threadCount
)
;
freeArray
(
threadNames
threadCount
)
;
freeArray
(
features
featureCount
)
;
}
static
void
StartSignalHandler
(
int
signal
siginfo_t
*
info
void
*
context
)
{
class
StartTask
:
public
Runnable
{
public
:
NS_IMETHOD
Run
(
)
override
{
DoStartTask
(
)
;
return
NS_OK
;
}
}
;
NS_DispatchToMainThread
(
new
StartTask
(
)
)
;
}
static
void
PlatformInit
(
)
{
LOG
(
"
Registering
start
signal
"
)
;
struct
sigaction
sa
;
sa
.
sa_sigaction
=
StartSignalHandler
;
sigemptyset
(
&
sa
.
sa_mask
)
;
sa
.
sa_flags
=
SA_RESTART
|
SA_SIGINFO
;
if
(
sigaction
(
SIGSTART
&
sa
&
gOldSigstartHandler
)
!
=
0
)
{
LOG
(
"
Error
installing
signal
"
)
;
}
}
#
else
static
void
PlatformInit
(
)
{
setup_atfork
(
)
;
}
#
endif
void
TickSample
:
:
PopulateContext
(
void
*
aContext
)
{
MOZ_ASSERT
(
aContext
)
;
ucontext_t
*
pContext
=
reinterpret_cast
<
ucontext_t
*
>
(
aContext
)
;
if
(
!
getcontext
(
pContext
)
)
{
context
=
pContext
;
SetSampleContext
(
this
reinterpret_cast
<
ucontext_t
*
>
(
aContext
)
-
>
uc_mcontext
)
;
}
}
