#
include
<
stdio
.
h
>
#
include
<
math
.
h
>
#
include
<
pthread
.
h
>
#
include
<
semaphore
.
h
>
#
include
<
signal
.
h
>
#
include
<
sys
/
time
.
h
>
#
include
<
sys
/
resource
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
sched
.
h
>
#
include
<
ucontext
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
mman
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
<
fcntl
.
h
>
#
include
<
unistd
.
h
>
#
include
<
semaphore
.
h
>
#
ifdef
__GLIBC__
#
include
<
execinfo
.
h
>
#
endif
#
include
<
strings
.
h
>
#
include
<
errno
.
h
>
#
include
<
stdarg
.
h
>
#
include
"
prenv
.
h
"
#
include
"
mozilla
/
LinuxSignal
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
<
string
.
h
>
#
include
<
list
>
using
namespace
mozilla
;
Thread
:
:
tid_t
Thread
:
:
GetCurrentId
(
)
{
return
gettid
(
)
;
}
static
void
FillInSample
(
TickSample
&
aSample
ucontext_t
*
aContext
)
{
aSample
.
mContext
=
aContext
;
mcontext_t
&
mcontext
=
aContext
-
>
uc_mcontext
;
#
if
defined
(
GP_ARCH_x86
)
aSample
.
mPC
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_EIP
]
)
;
aSample
.
mSP
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_ESP
]
)
;
aSample
.
mFP
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_EBP
]
)
;
#
elif
defined
(
GP_ARCH_amd64
)
aSample
.
mPC
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_RIP
]
)
;
aSample
.
mSP
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_RSP
]
)
;
aSample
.
mFP
=
reinterpret_cast
<
Address
>
(
mcontext
.
gregs
[
REG_RBP
]
)
;
#
elif
defined
(
GP_ARCH_arm
)
aSample
.
mPC
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_pc
)
;
aSample
.
mSP
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_sp
)
;
aSample
.
mFP
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_fp
)
;
aSample
.
mLR
=
reinterpret_cast
<
Address
>
(
mcontext
.
arm_lr
)
;
#
elif
defined
(
GP_ARCH_aarch64
)
aSample
.
mPC
=
reinterpret_cast
<
Address
>
(
mcontext
.
pc
)
;
aSample
.
mSP
=
reinterpret_cast
<
Address
>
(
mcontext
.
sp
)
;
aSample
.
mFP
=
reinterpret_cast
<
Address
>
(
mcontext
.
regs
[
29
]
)
;
aSample
.
mLR
=
reinterpret_cast
<
Address
>
(
mcontext
.
regs
[
30
]
)
;
#
else
#
error
"
bad
platform
"
#
endif
}
#
if
defined
(
GP_OS_android
)
#
define
SYS_tgkill
__NR_tgkill
#
endif
int
tgkill
(
pid_t
tgid
pid_t
tid
int
signalno
)
{
return
syscall
(
SYS_tgkill
tgid
tid
signalno
)
;
}
class
PlatformData
{
public
:
explicit
PlatformData
(
int
aThreadId
)
{
MOZ_COUNT_CTOR
(
PlatformData
)
;
}
~
PlatformData
(
)
{
MOZ_COUNT_DTOR
(
PlatformData
)
;
}
}
;
struct
SigHandlerCoordinator
{
SigHandlerCoordinator
(
)
{
PodZero
(
&
mUContext
)
;
int
r
=
sem_init
(
&
mMessage2
0
0
)
;
r
|
=
sem_init
(
&
mMessage3
0
0
)
;
r
|
=
sem_init
(
&
mMessage4
0
0
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
}
~
SigHandlerCoordinator
(
)
{
int
r
=
sem_destroy
(
&
mMessage2
)
;
r
|
=
sem_destroy
(
&
mMessage3
)
;
r
|
=
sem_destroy
(
&
mMessage4
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
}
sem_t
mMessage2
;
sem_t
mMessage3
;
sem_t
mMessage4
;
ucontext_t
mUContext
;
}
;
struct
SigHandlerCoordinator
*
SamplerThread
:
:
sSigHandlerCoordinator
=
nullptr
;
static
void
SigprofHandler
(
int
aSignal
siginfo_t
*
aInfo
void
*
aContext
)
{
int
savedErrno
=
errno
;
MOZ_ASSERT
(
aSignal
=
=
SIGPROF
)
;
MOZ_ASSERT
(
SamplerThread
:
:
sSigHandlerCoordinator
)
;
SamplerThread
:
:
sSigHandlerCoordinator
-
>
mUContext
=
*
static_cast
<
ucontext_t
*
>
(
aContext
)
;
int
r
=
sem_post
(
&
SamplerThread
:
:
sSigHandlerCoordinator
-
>
mMessage2
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
while
(
true
)
{
r
=
sem_wait
(
&
SamplerThread
:
:
sSigHandlerCoordinator
-
>
mMessage3
)
;
if
(
r
=
=
-
1
&
&
errno
=
=
EINTR
)
{
continue
;
}
MOZ_ASSERT
(
r
=
=
0
)
;
break
;
}
r
=
sem_post
(
&
SamplerThread
:
:
sSigHandlerCoordinator
-
>
mMessage4
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
errno
=
savedErrno
;
}
static
void
*
ThreadEntry
(
void
*
aArg
)
{
auto
thread
=
static_cast
<
SamplerThread
*
>
(
aArg
)
;
thread
-
>
mSamplerTid
=
gettid
(
)
;
thread
-
>
Run
(
)
;
return
nullptr
;
}
SamplerThread
:
:
SamplerThread
(
PSLockRef
aLock
uint32_t
aActivityGeneration
double
aIntervalMilliseconds
)
:
mActivityGeneration
(
aActivityGeneration
)
mIntervalMicroseconds
(
std
:
:
max
(
1
int
(
floor
(
aIntervalMilliseconds
*
1000
+
0
.
5
)
)
)
)
mMyPid
(
getpid
(
)
)
mSamplerTid
(
-
1
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
#
if
defined
(
USE_EHABI_STACKWALK
)
mozilla
:
:
EHABIStackWalkInit
(
)
;
#
elif
defined
(
USE_LUL_STACKWALK
)
bool
createdLUL
=
false
;
lul
:
:
LUL
*
lul
=
CorePS
:
:
Lul
(
aLock
)
;
if
(
!
lul
)
{
lul
=
new
lul
:
:
LUL
(
logging_sink_for_LUL
)
;
CorePS
:
:
SetLul
(
aLock
lul
)
;
read_procmaps
(
lul
)
;
createdLUL
=
true
;
}
#
endif
struct
sigaction
sa
;
sa
.
sa_sigaction
=
MOZ_SIGNAL_TRAMPOLINE
(
SigprofHandler
)
;
sigemptyset
(
&
sa
.
sa_mask
)
;
sa
.
sa_flags
=
SA_RESTART
|
SA_SIGINFO
;
if
(
sigaction
(
SIGPROF
&
sa
&
mOldSigprofHandler
)
!
=
0
)
{
MOZ_CRASH
(
"
Error
installing
SIGPROF
handler
in
the
profiler
"
)
;
}
#
if
defined
(
USE_LUL_STACKWALK
)
if
(
createdLUL
)
{
lul
-
>
EnableUnwinding
(
)
;
if
(
PR_GetEnv
(
"
MOZ_PROFILER_LUL_TEST
"
)
)
{
int
nTests
=
0
nTestsPassed
=
0
;
RunLulUnitTests
(
&
nTests
&
nTestsPassed
lul
)
;
}
}
#
endif
if
(
pthread_create
(
&
mThread
nullptr
ThreadEntry
this
)
!
=
0
)
{
MOZ_CRASH
(
"
pthread_create
failed
"
)
;
}
}
SamplerThread
:
:
~
SamplerThread
(
)
{
pthread_join
(
mThread
nullptr
)
;
}
void
SamplerThread
:
:
Stop
(
PSLockRef
aLock
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
sigaction
(
SIGPROF
&
mOldSigprofHandler
0
)
;
}
void
SamplerThread
:
:
SleepMicro
(
int
aMicroseconds
)
{
aMicroseconds
=
std
:
:
max
(
0
aMicroseconds
)
;
if
(
aMicroseconds
>
=
1000000
)
{
MOZ_ALWAYS_TRUE
(
!
:
:
usleep
(
aMicroseconds
)
)
;
return
;
}
struct
timespec
ts
;
ts
.
tv_sec
=
0
;
ts
.
tv_nsec
=
aMicroseconds
*
1000UL
;
int
rv
=
:
:
nanosleep
(
&
ts
&
ts
)
;
while
(
rv
!
=
0
&
&
errno
=
=
EINTR
)
{
rv
=
:
:
nanosleep
(
&
ts
&
ts
)
;
}
MOZ_ASSERT
(
!
rv
"
nanosleep
call
failed
"
)
;
}
void
SamplerThread
:
:
SuspendAndSampleAndResumeThread
(
PSLockRef
aLock
TickSample
&
aSample
)
{
MOZ_ASSERT
(
!
sSigHandlerCoordinator
)
;
int
sampleeTid
=
aSample
.
mThreadId
;
MOZ_RELEASE_ASSERT
(
sampleeTid
!
=
mSamplerTid
)
;
SigHandlerCoordinator
coord
;
sSigHandlerCoordinator
=
&
coord
;
int
r
=
tgkill
(
mMyPid
sampleeTid
SIGPROF
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
while
(
true
)
{
r
=
sem_wait
(
&
sSigHandlerCoordinator
-
>
mMessage2
)
;
if
(
r
=
=
-
1
&
&
errno
=
=
EINTR
)
{
continue
;
}
MOZ_ASSERT
(
r
=
=
0
)
;
break
;
}
FillInSample
(
aSample
&
sSigHandlerCoordinator
-
>
mUContext
)
;
Tick
(
aLock
ActivePS
:
:
Buffer
(
aLock
)
aSample
)
;
r
=
sem_post
(
&
sSigHandlerCoordinator
-
>
mMessage3
)
;
MOZ_ASSERT
(
r
=
=
0
)
;
while
(
true
)
{
r
=
sem_wait
(
&
sSigHandlerCoordinator
-
>
mMessage4
)
;
if
(
r
=
=
-
1
&
&
errno
=
=
EINTR
)
{
continue
;
}
MOZ_ASSERT
(
r
=
=
0
)
;
break
;
}
sSigHandlerCoordinator
=
nullptr
;
}
#
if
defined
(
GP_OS_linux
)
static
void
paf_prepare
(
)
{
MOZ_RELEASE_ASSERT
(
CorePS
:
:
Exists
(
)
)
;
PSAutoLock
lock
(
gPSMutex
)
;
if
(
ActivePS
:
:
Exists
(
lock
)
)
{
ActivePS
:
:
SetWasPaused
(
lock
ActivePS
:
:
IsPaused
(
lock
)
)
;
ActivePS
:
:
SetIsPaused
(
lock
true
)
;
}
}
static
void
paf_parent
(
)
{
MOZ_RELEASE_ASSERT
(
CorePS
:
:
Exists
(
)
)
;
PSAutoLock
lock
(
gPSMutex
)
;
if
(
ActivePS
:
:
Exists
(
lock
)
)
{
ActivePS
:
:
SetIsPaused
(
lock
ActivePS
:
:
WasPaused
(
lock
)
)
;
ActivePS
:
:
SetWasPaused
(
lock
false
)
;
}
}
static
void
PlatformInit
(
PSLockRef
aLock
)
{
pthread_atfork
(
paf_prepare
paf_parent
nullptr
)
;
}
#
else
static
void
PlatformInit
(
PSLockRef
aLock
)
{
}
#
endif
void
TickSample
:
:
PopulateContext
(
ucontext_t
*
aContext
)
{
MOZ_ASSERT
(
mIsSynchronous
)
;
MOZ_ASSERT
(
aContext
)
;
if
(
!
getcontext
(
aContext
)
)
{
FillInSample
(
*
this
aContext
)
;
}
}
