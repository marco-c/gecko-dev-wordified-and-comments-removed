#
ifndef
MOZ_PROFILE_BUFFER_H
#
define
MOZ_PROFILE_BUFFER_H
#
include
"
GeckoProfiler
.
h
"
#
include
"
ProfileBufferEntry
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PowerOfTwo
.
h
"
#
include
"
mozilla
/
ProfileBufferChunkManagerSingle
.
h
"
#
include
"
mozilla
/
ProfileChunkedBuffer
.
h
"
class
ProfileBuffer
final
{
public
:
explicit
ProfileBuffer
(
mozilla
:
:
ProfileChunkedBuffer
&
aBuffer
)
;
mozilla
:
:
ProfileChunkedBuffer
&
UnderlyingChunkedBuffer
(
)
const
{
return
mEntries
;
}
bool
IsThreadSafe
(
)
const
{
return
mEntries
.
IsThreadSafe
(
)
;
}
uint64_t
AddEntry
(
const
ProfileBufferEntry
&
aEntry
)
;
uint64_t
AddThreadIdEntry
(
int
aThreadId
)
;
void
CollectCodeLocation
(
const
char
*
aLabel
const
char
*
aStr
uint32_t
aFrameFlags
uint64_t
aInnerWindowID
const
mozilla
:
:
Maybe
<
uint32_t
>
&
aLineNumber
const
mozilla
:
:
Maybe
<
uint32_t
>
&
aColumnNumber
const
mozilla
:
:
Maybe
<
JS
:
:
ProfilingCategoryPair
>
&
aCategoryPair
)
;
static
const
size_t
kMaxFrameKeyLength
=
512
;
void
AddJITInfoForRange
(
uint64_t
aRangeStart
int
aThreadId
JSContext
*
aContext
JITFrameInfo
&
aJITFrameInfo
)
const
;
int
StreamSamplesToJSON
(
SpliceableJSONWriter
&
aWriter
int
aThreadId
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
const
;
void
StreamMarkersToJSON
(
SpliceableJSONWriter
&
aWriter
int
aThreadId
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
const
;
void
StreamPausedRangesToJSON
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
)
const
;
void
StreamProfilerOverheadToJSON
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
const
;
void
StreamCountersToJSON
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
const
;
bool
DuplicateLastSample
(
int
aThreadId
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
mozilla
:
:
Maybe
<
uint64_t
>
&
aLastSample
)
;
void
DiscardSamplesBeforeTime
(
double
aTime
)
;
ProfileBufferEntry
GetEntry
(
uint64_t
aPosition
)
const
{
return
mEntries
.
ReadAt
(
mozilla
:
:
ProfileBufferBlockIndex
:
:
CreateFromProfileBufferIndex
(
aPosition
)
[
&
]
(
mozilla
:
:
Maybe
<
mozilla
:
:
ProfileBufferEntryReader
>
&
&
aMER
)
{
ProfileBufferEntry
entry
;
if
(
aMER
.
isSome
(
)
)
{
if
(
aMER
-
>
CurrentBlockIndex
(
)
.
ConvertToProfileBufferIndex
(
)
=
=
aPosition
)
{
MOZ_RELEASE_ASSERT
(
aMER
-
>
RemainingBytes
(
)
<
=
sizeof
(
entry
)
)
;
aMER
-
>
ReadBytes
(
&
entry
aMER
-
>
RemainingBytes
(
)
)
;
}
else
{
aMER
-
>
SetRemainingBytes
(
0
)
;
}
}
return
entry
;
}
)
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
void
CollectOverheadStats
(
mozilla
:
:
TimeDuration
aSamplingTime
mozilla
:
:
TimeDuration
aLocking
mozilla
:
:
TimeDuration
aCleaning
mozilla
:
:
TimeDuration
aCounters
mozilla
:
:
TimeDuration
aThreads
)
;
ProfilerBufferInfo
GetProfilerBufferInfo
(
)
const
;
private
:
static
mozilla
:
:
ProfileBufferBlockIndex
AddEntry
(
mozilla
:
:
ProfileChunkedBuffer
&
aProfileChunkedBuffer
const
ProfileBufferEntry
&
aEntry
)
;
static
mozilla
:
:
ProfileBufferBlockIndex
AddThreadIdEntry
(
mozilla
:
:
ProfileChunkedBuffer
&
aProfileChunkedBuffer
int
aThreadId
)
;
mozilla
:
:
ProfileChunkedBuffer
&
mEntries
;
public
:
uint64_t
BufferRangeStart
(
)
const
{
return
mEntries
.
GetState
(
)
.
mRangeStart
;
}
uint64_t
BufferRangeEnd
(
)
const
{
return
mEntries
.
GetState
(
)
.
mRangeEnd
;
}
private
:
static
constexpr
auto
WorkerBufferBytes
=
mozilla
:
:
MakePowerOfTwo32
<
65536
>
(
)
;
mutable
mozilla
:
:
ProfileBufferChunkManagerSingle
mWorkerChunkManager
{
mozilla
:
:
ProfileBufferChunk
:
:
Create
(
mozilla
:
:
ProfileBufferChunk
:
:
SizeofChunkMetadata
(
)
+
WorkerBufferBytes
.
Value
(
)
)
}
;
double
mFirstSamplingTimeUs
=
0
.
0
;
double
mLastSamplingTimeUs
=
0
.
0
;
ProfilerStats
mIntervalsUs
;
ProfilerStats
mOverheadsUs
;
ProfilerStats
mLockingsUs
;
ProfilerStats
mCleaningsUs
;
ProfilerStats
mCountersUs
;
ProfilerStats
mThreadsUs
;
}
;
class
ProfileBufferCollector
final
:
public
ProfilerStackCollector
{
public
:
ProfileBufferCollector
(
ProfileBuffer
&
aBuf
uint64_t
aSamplePos
)
:
mBuf
(
aBuf
)
mSamplePositionInBuffer
(
aSamplePos
)
{
}
mozilla
:
:
Maybe
<
uint64_t
>
SamplePositionInBuffer
(
)
override
{
return
mozilla
:
:
Some
(
mSamplePositionInBuffer
)
;
}
mozilla
:
:
Maybe
<
uint64_t
>
BufferRangeStart
(
)
override
{
return
mozilla
:
:
Some
(
mBuf
.
BufferRangeStart
(
)
)
;
}
virtual
void
CollectNativeLeafAddr
(
void
*
aAddr
)
override
;
virtual
void
CollectJitReturnAddr
(
void
*
aAddr
)
override
;
virtual
void
CollectWasmFrame
(
const
char
*
aLabel
)
override
;
virtual
void
CollectProfilingStackFrame
(
const
js
:
:
ProfilingStackFrame
&
aFrame
)
override
;
private
:
ProfileBuffer
&
mBuf
;
uint64_t
mSamplePositionInBuffer
;
}
;
#
endif
