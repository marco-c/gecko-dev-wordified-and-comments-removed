#
ifndef
MOZ_PROFILE_BUFFER_H
#
define
MOZ_PROFILE_BUFFER_H
#
include
"
ProfileBufferEntry
.
h
"
#
include
"
ProfilerMarker
.
h
"
#
include
"
mozilla
/
BlocksRingBuffer
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PowerOfTwo
.
h
"
class
ProfileBuffer
final
{
public
:
using
BlockIndex
=
mozilla
:
:
BlocksRingBuffer
:
:
BlockIndex
;
explicit
ProfileBuffer
(
mozilla
:
:
PowerOfTwo32
aCapacity
)
;
~
ProfileBuffer
(
)
;
bool
IsThreadSafe
(
)
const
{
return
mEntries
.
IsThreadSafe
(
)
;
}
uint64_t
AddEntry
(
const
ProfileBufferEntry
&
aEntry
)
;
uint64_t
AddThreadIdEntry
(
int
aThreadId
)
;
void
CollectCodeLocation
(
const
char
*
aLabel
const
char
*
aStr
uint32_t
aFrameFlags
const
mozilla
:
:
Maybe
<
uint32_t
>
&
aLineNumber
const
mozilla
:
:
Maybe
<
uint32_t
>
&
aColumnNumber
const
mozilla
:
:
Maybe
<
JS
:
:
ProfilingCategoryPair
>
&
aCategoryPair
)
;
static
const
size_t
kMaxFrameKeyLength
=
512
;
void
AddJITInfoForRange
(
uint64_t
aRangeStart
int
aThreadId
JSContext
*
aContext
JITFrameInfo
&
aJITFrameInfo
)
const
;
void
StreamSamplesToJSON
(
SpliceableJSONWriter
&
aWriter
int
aThreadId
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
const
;
void
StreamMarkersToJSON
(
SpliceableJSONWriter
&
aWriter
int
aThreadId
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
const
;
void
StreamPausedRangesToJSON
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
)
const
;
void
StreamProfilerOverheadToJSON
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
const
;
void
StreamCountersToJSON
(
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
const
;
bool
DuplicateLastSample
(
int
aThreadId
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
mozilla
:
:
Maybe
<
uint64_t
>
&
aLastSample
)
;
void
DiscardSamplesBeforeTime
(
double
aTime
)
;
void
AddMarker
(
ProfilerMarker
*
aMarker
)
;
void
DeleteExpiredStoredMarkers
(
)
;
ProfileBufferEntry
GetEntry
(
uint64_t
aPosition
)
const
{
ProfileBufferEntry
entry
;
mEntries
.
Read
(
[
&
]
(
mozilla
:
:
BlocksRingBuffer
:
:
Reader
*
aReader
)
{
MOZ_ASSERT
(
aReader
)
;
for
(
mozilla
:
:
BlocksRingBuffer
:
:
EntryReader
er
:
*
aReader
)
{
if
(
er
.
CurrentBlockIndex
(
)
.
ConvertToU64
(
)
>
aPosition
)
{
return
;
}
if
(
er
.
CurrentBlockIndex
(
)
.
ConvertToU64
(
)
=
=
aPosition
)
{
MOZ_RELEASE_ASSERT
(
er
.
RemainingBytes
(
)
<
=
sizeof
(
entry
)
)
;
er
.
Read
(
&
entry
er
.
RemainingBytes
(
)
)
;
return
;
}
}
}
)
;
return
entry
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
void
CollectOverheadStats
(
mozilla
:
:
TimeDuration
aSamplingTime
mozilla
:
:
TimeDuration
aLocking
mozilla
:
:
TimeDuration
aCleaning
mozilla
:
:
TimeDuration
aCounters
mozilla
:
:
TimeDuration
aThreads
)
;
ProfilerBufferInfo
GetProfilerBufferInfo
(
)
const
;
private
:
static
BlockIndex
AddEntry
(
mozilla
:
:
BlocksRingBuffer
&
aBlocksRingBuffer
const
ProfileBufferEntry
&
aEntry
)
;
static
BlockIndex
AddThreadIdEntry
(
mozilla
:
:
BlocksRingBuffer
&
aBlocksRingBuffer
int
aThreadId
)
;
mozilla
:
:
BlocksRingBuffer
mEntries
;
public
:
uint64_t
BufferRangeStart
(
)
const
{
return
mEntries
.
GetState
(
)
.
mRangeStart
.
ConvertToU64
(
)
;
}
uint64_t
BufferRangeEnd
(
)
const
{
return
mEntries
.
GetState
(
)
.
mRangeEnd
.
ConvertToU64
(
)
;
}
ProfilerMarkerLinkedList
mStoredMarkers
;
private
:
mozilla
:
:
UniquePtr
<
mozilla
:
:
BlocksRingBuffer
:
:
Byte
[
]
>
mDuplicationBuffer
;
double
mFirstSamplingTimeNs
=
0
.
0
;
double
mLastSamplingTimeNs
=
0
.
0
;
ProfilerStats
mIntervalsNs
;
ProfilerStats
mOverheadsNs
;
ProfilerStats
mLockingsNs
;
ProfilerStats
mCleaningsNs
;
ProfilerStats
mCountersNs
;
ProfilerStats
mThreadsNs
;
}
;
class
ProfileBufferCollector
final
:
public
ProfilerStackCollector
{
public
:
ProfileBufferCollector
(
ProfileBuffer
&
aBuf
uint32_t
aFeatures
uint64_t
aSamplePos
)
:
mBuf
(
aBuf
)
mSamplePositionInBuffer
(
aSamplePos
)
mFeatures
(
aFeatures
)
{
}
mozilla
:
:
Maybe
<
uint64_t
>
SamplePositionInBuffer
(
)
override
{
return
mozilla
:
:
Some
(
mSamplePositionInBuffer
)
;
}
mozilla
:
:
Maybe
<
uint64_t
>
BufferRangeStart
(
)
override
{
return
mozilla
:
:
Some
(
mBuf
.
BufferRangeStart
(
)
)
;
}
virtual
void
CollectNativeLeafAddr
(
void
*
aAddr
)
override
;
virtual
void
CollectJitReturnAddr
(
void
*
aAddr
)
override
;
virtual
void
CollectWasmFrame
(
const
char
*
aLabel
)
override
;
virtual
void
CollectProfilingStackFrame
(
const
js
:
:
ProfilingStackFrame
&
aFrame
)
override
;
private
:
ProfileBuffer
&
mBuf
;
uint64_t
mSamplePositionInBuffer
;
uint32_t
mFeatures
;
}
;
#
endif
