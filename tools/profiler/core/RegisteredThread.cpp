#
include
"
RegisteredThread
.
h
"
#
include
"
mozilla
/
ProfilerMarkers
.
h
"
#
include
"
js
/
AllocationRecording
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
js
/
TraceLoggerAPI
.
h
"
RacyRegisteredThread
:
:
RacyRegisteredThread
(
mozilla
:
:
profiler
:
:
ThreadRegistration
&
aThreadRegistration
ProfilerThreadId
aThreadId
)
:
mThreadRegistration
(
aThreadRegistration
)
{
MOZ_COUNT_CTOR
(
RacyRegisteredThread
)
;
}
RegisteredThread
:
:
RegisteredThread
(
mozilla
:
:
profiler
:
:
ThreadRegistration
&
aThreadRegistration
ThreadInfo
*
aInfo
nsIThread
*
aThread
void
*
aStackTop
)
:
mRacyRegisteredThread
(
aThreadRegistration
aInfo
-
>
ThreadId
(
)
)
mPlatformData
(
AllocPlatformData
(
aInfo
-
>
ThreadId
(
)
)
)
mThreadInfo
(
aInfo
)
{
MOZ_COUNT_CTOR
(
RegisteredThread
)
;
}
RegisteredThread
:
:
~
RegisteredThread
(
)
{
MOZ_COUNT_DTOR
(
RegisteredThread
)
;
}
size_t
RegisteredThread
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
return
n
;
}
void
RegisteredThread
:
:
GetRunningEventDelay
(
const
mozilla
:
:
TimeStamp
&
aNow
mozilla
:
:
TimeDuration
&
aDelay
mozilla
:
:
TimeDuration
&
aRunning
)
{
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
GetRunningEventDelay
(
aNow
aDelay
aRunning
)
;
}
void
RegisteredThread
:
:
SetJSContext
(
JSContext
*
aContext
)
{
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
SetJSContext
(
aContext
)
;
}
void
RegisteredThread
:
:
PollJSSampling
(
)
{
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
PollJSSampling
(
)
;
}
