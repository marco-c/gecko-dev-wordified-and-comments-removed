#
include
"
RegisteredThread
.
h
"
#
include
"
mozilla
/
ProfilerMarkers
.
h
"
#
include
"
js
/
AllocationRecording
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
js
/
TraceLoggerAPI
.
h
"
#
include
"
mozilla
/
ProfilerThreadRegistrationData
.
h
"
RacyRegisteredThread
:
:
RacyRegisteredThread
(
mozilla
:
:
profiler
:
:
ThreadRegistration
&
aThreadRegistration
)
:
mThreadRegistration
(
aThreadRegistration
)
{
MOZ_COUNT_CTOR
(
RacyRegisteredThread
)
;
}
RegisteredThread
:
:
RegisteredThread
(
mozilla
:
:
profiler
:
:
ThreadRegistration
&
aThreadRegistration
)
:
mRacyRegisteredThread
(
aThreadRegistration
)
mPlatformData
(
AllocPlatformData
(
aThreadRegistration
.
mData
.
mInfo
.
ThreadId
(
)
)
)
{
MOZ_COUNT_CTOR
(
RegisteredThread
)
;
}
RegisteredThread
:
:
~
RegisteredThread
(
)
{
MOZ_COUNT_DTOR
(
RegisteredThread
)
;
}
size_t
RegisteredThread
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
return
n
;
}
void
RegisteredThread
:
:
SetJSContext
(
JSContext
*
aContext
)
{
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
SetJSContext
(
aContext
)
;
}
void
RegisteredThread
:
:
PollJSSampling
(
)
{
mRacyRegisteredThread
.
mThreadRegistration
.
mData
.
PollJSSampling
(
)
;
}
const
RacyRegisteredThread
&
mozilla
:
:
profiler
:
:
ThreadRegistrationUnlockedConstReader
:
:
RacyRegisteredThreadCRef
(
)
const
{
MOZ_ASSERT
(
mRegisteredThread
)
;
return
mRegisteredThread
-
>
RacyRegisteredThread
(
)
;
}
RacyRegisteredThread
&
mozilla
:
:
profiler
:
:
ThreadRegistrationUnlockedConstReaderAndAtomicRW
:
:
RacyRegisteredThreadRef
(
)
{
MOZ_ASSERT
(
mRegisteredThread
)
;
return
mRegisteredThread
-
>
RacyRegisteredThread
(
)
;
}
RegisteredThread
&
mozilla
:
:
profiler
:
:
ThreadRegistrationLockedRWFromAnyThread
:
:
RegisteredThreadRef
(
)
{
MOZ_ASSERT
(
mRegisteredThread
)
;
return
*
mRegisteredThread
;
}
void
mozilla
:
:
profiler
:
:
ThreadRegistrationLockedRWOnThread
:
:
SetRegisteredThread
(
RegisteredThread
*
aRegisteredThread
)
{
mRegisteredThread
=
aRegisteredThread
;
}
