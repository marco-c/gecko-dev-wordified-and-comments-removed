#
ifndef
__PROFILER_BACKTRACE_H
#
define
__PROFILER_BACKTRACE_H
#
include
"
ProfileBuffer
.
h
"
#
include
"
mozilla
/
ProfileBufferEntrySerialization
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
<
string
>
class
ProfileBuffer
;
class
ProfilerCodeAddressService
;
class
ThreadInfo
;
class
UniqueStacks
;
namespace
mozilla
{
class
ProfileChunkedBuffer
;
class
TimeStamp
;
namespace
baseprofiler
{
class
SpliceableJSONWriter
;
}
}
class
ProfilerBacktrace
{
public
:
ProfilerBacktrace
(
const
char
*
aName
int
aThreadId
mozilla
:
:
UniquePtr
<
mozilla
:
:
ProfileChunkedBuffer
>
aProfileChunkedBufferStorage
mozilla
:
:
UniquePtr
<
ProfileBuffer
>
aProfileBufferStorageOrNull
=
nullptr
)
;
ProfilerBacktrace
(
const
char
*
aName
int
aThreadId
mozilla
:
:
ProfileChunkedBuffer
*
aExternalProfileChunkedBufferOrNull
=
nullptr
ProfileBuffer
*
aExternalProfileBufferOrNull
=
nullptr
)
;
~
ProfilerBacktrace
(
)
;
[
[
nodiscard
]
]
bool
IsEmpty
(
)
const
{
return
!
mProfileChunkedBuffer
|
|
mozilla
:
:
ProfileBufferEntryWriter
:
:
Serializer
<
mozilla
:
:
ProfileChunkedBuffer
>
:
:
Bytes
(
*
mProfileChunkedBuffer
)
<
=
mozilla
:
:
ULEB128Size
(
0u
)
;
}
void
StreamJSON
(
mozilla
:
:
baseprofiler
:
:
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
;
private
:
friend
struct
mozilla
:
:
ProfileBufferEntryWriter
:
:
Serializer
<
ProfilerBacktrace
>
;
friend
struct
mozilla
:
:
ProfileBufferEntryReader
:
:
Deserializer
<
ProfilerBacktrace
>
;
std
:
:
string
mName
;
int
mThreadId
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
ProfileChunkedBuffer
>
mOptionalProfileChunkedBufferStorage
;
mozilla
:
:
ProfileChunkedBuffer
*
mProfileChunkedBuffer
;
mozilla
:
:
UniquePtr
<
ProfileBuffer
>
mOptionalProfileBufferStorage
;
ProfileBuffer
*
mProfileBuffer
;
}
;
namespace
mozilla
{
template
<
>
struct
mozilla
:
:
ProfileBufferEntryWriter
:
:
Serializer
<
ProfilerBacktrace
>
{
static
Length
Bytes
(
const
ProfilerBacktrace
&
aBacktrace
)
{
if
(
!
aBacktrace
.
mProfileChunkedBuffer
)
{
return
ULEB128Size
(
0u
)
;
}
auto
bufferBytes
=
SumBytes
(
*
aBacktrace
.
mProfileChunkedBuffer
)
;
if
(
bufferBytes
<
=
ULEB128Size
(
0u
)
)
{
return
ULEB128Size
(
0u
)
;
}
return
bufferBytes
+
SumBytes
(
aBacktrace
.
mThreadId
aBacktrace
.
mName
)
;
}
static
void
Write
(
mozilla
:
:
ProfileBufferEntryWriter
&
aEW
const
ProfilerBacktrace
&
aBacktrace
)
{
if
(
!
aBacktrace
.
mProfileChunkedBuffer
|
|
SumBytes
(
*
aBacktrace
.
mProfileChunkedBuffer
)
<
=
ULEB128Size
(
0u
)
)
{
aEW
.
WriteULEB128
(
0u
)
;
return
;
}
aEW
.
WriteObject
(
*
aBacktrace
.
mProfileChunkedBuffer
)
;
aEW
.
WriteObject
(
aBacktrace
.
mThreadId
)
;
aEW
.
WriteObject
(
aBacktrace
.
mName
)
;
}
}
;
template
<
typename
Destructor
>
struct
mozilla
:
:
ProfileBufferEntryWriter
:
:
Serializer
<
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
Destructor
>
>
{
static
Length
Bytes
(
const
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
Destructor
>
&
aBacktrace
)
{
if
(
!
aBacktrace
)
{
return
ULEB128Size
(
0u
)
;
}
return
SumBytes
(
*
aBacktrace
)
;
}
static
void
Write
(
mozilla
:
:
ProfileBufferEntryWriter
&
aEW
const
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
Destructor
>
&
aBacktrace
)
{
if
(
!
aBacktrace
)
{
aEW
.
WriteULEB128
(
0u
)
;
return
;
}
aEW
.
WriteObject
(
*
aBacktrace
)
;
}
}
;
template
<
typename
Destructor
>
struct
mozilla
:
:
ProfileBufferEntryReader
:
:
Deserializer
<
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
Destructor
>
>
{
static
void
ReadInto
(
mozilla
:
:
ProfileBufferEntryReader
&
aER
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
Destructor
>
&
aBacktrace
)
{
aBacktrace
=
Read
(
aER
)
;
}
static
mozilla
:
:
UniquePtr
<
ProfilerBacktrace
Destructor
>
Read
(
mozilla
:
:
ProfileBufferEntryReader
&
aER
)
{
auto
profileChunkedBuffer
=
aER
.
ReadObject
<
UniquePtr
<
ProfileChunkedBuffer
>
>
(
)
;
if
(
!
profileChunkedBuffer
)
{
return
nullptr
;
}
MOZ_ASSERT
(
!
profileChunkedBuffer
-
>
IsThreadSafe
(
)
"
ProfilerBacktrace
only
stores
non
-
thread
-
safe
ProfileChunkedBuffers
"
)
;
int
threadId
=
aER
.
ReadObject
<
int
>
(
)
;
std
:
:
string
name
=
aER
.
ReadObject
<
std
:
:
string
>
(
)
;
return
UniquePtr
<
ProfilerBacktrace
Destructor
>
{
new
ProfilerBacktrace
(
name
.
c_str
(
)
threadId
std
:
:
move
(
profileChunkedBuffer
)
)
}
;
}
}
;
}
#
endif
