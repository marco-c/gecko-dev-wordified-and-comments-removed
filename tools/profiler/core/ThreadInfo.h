#
ifndef
ThreadInfo_h
#
define
ThreadInfo_h
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
platform
.
h
"
#
include
"
ProfileBuffer
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
class
RacyThreadInfo
final
:
public
PseudoStack
{
public
:
explicit
RacyThreadInfo
(
int
aThreadId
)
:
PseudoStack
(
)
mThreadId
(
aThreadId
)
mSleep
(
AWAKE
)
{
MOZ_COUNT_CTOR
(
RacyThreadInfo
)
;
}
~
RacyThreadInfo
(
)
{
MOZ_COUNT_DTOR
(
RacyThreadInfo
)
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
return
n
;
}
void
AddPendingMarker
(
const
char
*
aMarkerName
mozilla
:
:
UniquePtr
<
ProfilerMarkerPayload
>
aPayload
double
aTime
)
{
ProfilerMarker
*
marker
=
new
ProfilerMarker
(
aMarkerName
mThreadId
Move
(
aPayload
)
aTime
)
;
mPendingMarkers
.
insert
(
marker
)
;
}
ProfilerMarkerLinkedList
*
GetPendingMarkers
(
)
{
return
mPendingMarkers
.
accessList
(
)
;
}
void
ReinitializeOnResume
(
)
{
(
void
)
mSleep
.
compareExchange
(
SLEEPING_OBSERVED
SLEEPING_NOT_OBSERVED
)
;
}
bool
CanDuplicateLastSampleDueToSleep
(
)
{
if
(
mSleep
=
=
AWAKE
)
{
return
false
;
}
if
(
mSleep
.
compareExchange
(
SLEEPING_NOT_OBSERVED
SLEEPING_OBSERVED
)
)
{
return
false
;
}
return
true
;
}
void
SetSleeping
(
)
{
MOZ_ASSERT
(
mSleep
=
=
AWAKE
)
;
mSleep
=
SLEEPING_NOT_OBSERVED
;
}
void
SetAwake
(
)
{
MOZ_ASSERT
(
mSleep
!
=
AWAKE
)
;
mSleep
=
AWAKE
;
}
bool
IsSleeping
(
)
{
return
mSleep
!
=
AWAKE
;
}
int
ThreadId
(
)
const
{
return
mThreadId
;
}
private
:
ProfilerSignalSafeLinkedList
<
ProfilerMarker
>
mPendingMarkers
;
const
int
mThreadId
;
static
const
int
AWAKE
=
0
;
static
const
int
SLEEPING_NOT_OBSERVED
=
1
;
static
const
int
SLEEPING_OBSERVED
=
2
;
mozilla
:
:
Atomic
<
int
>
mSleep
;
}
;
class
ThreadInfo
final
{
public
:
ThreadInfo
(
const
char
*
aName
int
aThreadId
bool
aIsMainThread
nsIEventTarget
*
aThread
void
*
aStackTop
)
;
~
ThreadInfo
(
)
;
const
char
*
Name
(
)
const
{
return
mName
.
get
(
)
;
}
int
ThreadId
(
)
const
{
return
RacyInfo
(
)
-
>
ThreadId
(
)
;
}
bool
IsMainThread
(
)
const
{
return
mIsMainThread
;
}
mozilla
:
:
NotNull
<
RacyThreadInfo
*
>
RacyInfo
(
)
const
{
return
mRacyInfo
;
}
void
StartProfiling
(
)
;
void
StopProfiling
(
)
;
bool
IsBeingProfiled
(
)
{
return
mIsBeingProfiled
;
}
void
NotifyUnregistered
(
)
{
mUnregisterTime
=
TimeStamp
:
:
Now
(
)
;
}
PlatformData
*
GetPlatformData
(
)
const
{
return
mPlatformData
.
get
(
)
;
}
void
*
StackTop
(
)
const
{
return
mStackTop
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
mozilla
:
:
Maybe
<
uint64_t
>
&
LastSample
(
)
{
return
mLastSample
;
}
private
:
mozilla
:
:
UniqueFreePtr
<
char
>
mName
;
mozilla
:
:
TimeStamp
mRegisterTime
;
mozilla
:
:
TimeStamp
mUnregisterTime
;
const
bool
mIsMainThread
;
nsCOMPtr
<
nsIEventTarget
>
mThread
;
mozilla
:
:
NotNull
<
RacyThreadInfo
*
>
mRacyInfo
;
UniquePlatformData
mPlatformData
;
void
*
mStackTop
;
public
:
void
StreamJSON
(
const
ProfileBuffer
&
aBuffer
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
;
void
FlushSamplesAndMarkers
(
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
ProfileBuffer
&
aBuffer
)
;
ThreadResponsiveness
*
GetThreadResponsiveness
(
)
{
ThreadResponsiveness
*
responsiveness
=
mResponsiveness
.
ptrOr
(
nullptr
)
;
MOZ_ASSERT
(
!
responsiveness
|
|
mIsBeingProfiled
)
;
return
responsiveness
;
}
void
SetJSContext
(
JSContext
*
aContext
)
{
MOZ_ASSERT
(
aContext
&
&
!
mContext
)
;
mContext
=
aContext
;
js
:
:
SetContextProfilingStack
(
aContext
RacyInfo
(
)
)
;
PollJSSampling
(
)
;
}
void
StartJSSampling
(
)
{
MOZ_RELEASE_ASSERT
(
mJSSampling
=
=
INACTIVE
|
|
mJSSampling
=
=
INACTIVE_REQUESTED
)
;
mJSSampling
=
ACTIVE_REQUESTED
;
}
void
StopJSSampling
(
)
{
MOZ_RELEASE_ASSERT
(
mJSSampling
=
=
ACTIVE
|
|
mJSSampling
=
=
ACTIVE_REQUESTED
)
;
mJSSampling
=
INACTIVE_REQUESTED
;
}
void
PollJSSampling
(
)
{
if
(
mContext
)
{
if
(
mJSSampling
=
=
ACTIVE_REQUESTED
)
{
mJSSampling
=
ACTIVE
;
js
:
:
EnableContextProfilingStack
(
mContext
true
)
;
js
:
:
RegisterContextProfilingEventMarker
(
mContext
profiler_add_marker
)
;
}
else
if
(
mJSSampling
=
=
INACTIVE_REQUESTED
)
{
mJSSampling
=
INACTIVE
;
js
:
:
EnableContextProfilingStack
(
mContext
false
)
;
}
}
}
private
:
bool
mIsBeingProfiled
;
mozilla
:
:
UniquePtr
<
char
[
]
>
mSavedStreamedSamples
;
mozilla
:
:
UniquePtr
<
char
[
]
>
mSavedStreamedMarkers
;
mozilla
:
:
Maybe
<
UniqueStacks
>
mUniqueStacks
;
mozilla
:
:
Maybe
<
ThreadResponsiveness
>
mResponsiveness
;
public
:
JSContext
*
mContext
;
private
:
enum
{
INACTIVE
=
0
ACTIVE_REQUESTED
=
1
ACTIVE
=
2
INACTIVE_REQUESTED
=
3
}
mJSSampling
;
mozilla
:
:
Maybe
<
uint64_t
>
mLastSample
;
}
;
void
StreamSamplesAndMarkers
(
const
char
*
aName
int
aThreadId
const
ProfileBuffer
&
aBuffer
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aProcessStartTime
const
TimeStamp
&
aRegisterTime
const
TimeStamp
&
aUnregisterTime
double
aSinceTime
JSContext
*
aContext
char
*
aSavedStreamedSamples
char
*
aSavedStreamedMarkers
UniqueStacks
&
aUniqueStacks
)
;
#
endif
