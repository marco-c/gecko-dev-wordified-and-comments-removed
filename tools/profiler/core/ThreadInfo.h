#
ifndef
MOZ_THREAD_INFO_H
#
define
MOZ_THREAD_INFO_H
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
platform
.
h
"
class
ThreadInfo
{
public
:
ThreadInfo
(
const
char
*
aName
int
aThreadId
bool
aIsMainThread
PseudoStack
*
aPseudoStack
void
*
aStackTop
)
;
virtual
~
ThreadInfo
(
)
;
const
char
*
Name
(
)
const
{
return
mName
.
get
(
)
;
}
int
ThreadId
(
)
const
{
return
mThreadId
;
}
bool
IsMainThread
(
)
const
{
return
mIsMainThread
;
}
PseudoStack
*
Stack
(
)
const
{
return
mPseudoStack
;
}
void
SetProfile
(
mozilla
:
:
UniquePtr
<
ThreadProfile
>
aProfile
)
{
mProfile
=
mozilla
:
:
Move
(
aProfile
)
;
}
ThreadProfile
*
Profile
(
)
const
{
return
mProfile
.
get
(
)
;
}
PlatformData
*
GetPlatformData
(
)
const
{
return
mPlatformData
.
get
(
)
;
}
void
*
StackTop
(
)
const
{
return
mStackTop
;
}
virtual
void
SetPendingDelete
(
)
;
bool
IsPendingDelete
(
)
const
{
return
mPendingDelete
;
}
#
ifndef
SPS_STANDALONE
nsIThread
*
GetThread
(
)
const
{
return
mThread
.
get
(
)
;
}
#
endif
bool
CanInvokeJS
(
)
const
;
private
:
mozilla
:
:
UniqueFreePtr
<
char
>
mName
;
int
mThreadId
;
const
bool
mIsMainThread
;
PseudoStack
*
mPseudoStack
;
Sampler
:
:
UniquePlatformData
mPlatformData
;
mozilla
:
:
UniquePtr
<
ThreadProfile
>
mProfile
;
void
*
mStackTop
;
#
ifndef
SPS_STANDALONE
nsCOMPtr
<
nsIThread
>
mThread
;
#
endif
bool
mPendingDelete
;
}
;
class
StackOwningThreadInfo
:
public
ThreadInfo
{
public
:
StackOwningThreadInfo
(
const
char
*
aName
int
aThreadId
bool
aIsMainThread
PseudoStack
*
aPseudoStack
void
*
aStackTop
)
;
virtual
~
StackOwningThreadInfo
(
)
;
virtual
void
SetPendingDelete
(
)
;
}
;
#
endif
