#
ifndef
MOZ_THREAD_INFO_H
#
define
MOZ_THREAD_INFO_H
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
ProfileBuffer
.
h
"
#
include
"
platform
.
h
"
class
ThreadInfo
final
{
public
:
ThreadInfo
(
const
char
*
aName
int
aThreadId
bool
aIsMainThread
mozilla
:
:
NotNull
<
PseudoStack
*
>
aPseudoStack
void
*
aStackTop
)
;
~
ThreadInfo
(
)
;
const
char
*
Name
(
)
const
{
return
mName
.
get
(
)
;
}
int
ThreadId
(
)
const
{
return
mThreadId
;
}
bool
IsMainThread
(
)
const
{
return
mIsMainThread
;
}
mozilla
:
:
NotNull
<
PseudoStack
*
>
Stack
(
)
const
{
return
mPseudoStack
;
}
void
SetHasProfile
(
)
{
mHasProfile
=
true
;
}
PlatformData
*
GetPlatformData
(
)
const
{
return
mPlatformData
.
get
(
)
;
}
void
*
StackTop
(
)
const
{
return
mStackTop
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
ProfileBuffer
:
:
LastSample
&
LastSample
(
)
{
return
mLastSample
;
}
private
:
mozilla
:
:
UniqueFreePtr
<
char
>
mName
;
int
mThreadId
;
const
bool
mIsMainThread
;
mozilla
:
:
NotNull
<
PseudoStack
*
>
mPseudoStack
;
UniquePlatformData
mPlatformData
;
void
*
mStackTop
;
public
:
bool
HasProfile
(
)
{
return
mHasProfile
;
}
void
StreamJSON
(
ProfileBuffer
*
aBuffer
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
double
aSinceTime
)
;
void
FlushSamplesAndMarkers
(
ProfileBuffer
*
aBuffer
const
mozilla
:
:
TimeStamp
&
aStartTime
)
;
ThreadResponsiveness
*
GetThreadResponsiveness
(
)
{
ThreadResponsiveness
*
responsiveness
=
mResponsiveness
.
ptrOr
(
nullptr
)
;
MOZ_ASSERT
(
!
!
responsiveness
=
=
mIsMainThread
)
;
return
responsiveness
;
}
private
:
bool
mHasProfile
;
mozilla
:
:
UniquePtr
<
char
[
]
>
mSavedStreamedSamples
;
mozilla
:
:
UniquePtr
<
char
[
]
>
mSavedStreamedMarkers
;
mozilla
:
:
Maybe
<
UniqueStacks
>
mUniqueStacks
;
mozilla
:
:
Maybe
<
ThreadResponsiveness
>
mResponsiveness
;
ProfileBuffer
:
:
LastSample
mLastSample
;
}
;
void
StreamSamplesAndMarkers
(
const
char
*
aName
int
aThreadId
ProfileBuffer
*
aBuffer
SpliceableJSONWriter
&
aWriter
const
mozilla
:
:
TimeStamp
&
aStartTime
double
aSinceTime
JSContext
*
aContext
char
*
aSavedStreamedSamples
char
*
aSavedStreamedMarkers
UniqueStacks
&
aUniqueStacks
)
;
#
endif
