#
ifndef
MOZ_THREAD_INFO_H
#
define
MOZ_THREAD_INFO_H
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
ProfileBuffer
.
h
"
#
include
"
platform
.
h
"
class
ThreadInfo
{
public
:
ThreadInfo
(
const
char
*
aName
int
aThreadId
bool
aIsMainThread
PseudoStack
*
aPseudoStack
void
*
aStackTop
)
;
virtual
~
ThreadInfo
(
)
;
const
char
*
Name
(
)
const
{
return
mName
.
get
(
)
;
}
int
ThreadId
(
)
const
{
return
mThreadId
;
}
bool
IsMainThread
(
)
const
{
return
mIsMainThread
;
}
PseudoStack
*
Stack
(
)
const
{
return
mPseudoStack
;
}
void
SetProfile
(
ProfileBuffer
*
aBuffer
)
{
mBuffer
=
aBuffer
;
}
PlatformData
*
GetPlatformData
(
)
const
{
return
mPlatformData
.
get
(
)
;
}
void
*
StackTop
(
)
const
{
return
mStackTop
;
}
virtual
void
SetPendingDelete
(
)
;
bool
IsPendingDelete
(
)
const
{
return
mPendingDelete
;
}
nsIThread
*
GetThread
(
)
const
{
return
mThread
.
get
(
)
;
}
bool
CanInvokeJS
(
)
const
;
private
:
mozilla
:
:
UniqueFreePtr
<
char
>
mName
;
int
mThreadId
;
const
bool
mIsMainThread
;
PseudoStack
*
mPseudoStack
;
Sampler
:
:
UniquePlatformData
mPlatformData
;
void
*
mStackTop
;
nsCOMPtr
<
nsIThread
>
mThread
;
bool
mPendingDelete
;
public
:
bool
hasProfile
(
)
{
return
!
!
mBuffer
;
}
void
addTag
(
const
ProfileEntry
&
aTag
)
;
void
addStoredMarker
(
ProfilerMarker
*
aStoredMarker
)
;
mozilla
:
:
Mutex
&
GetMutex
(
)
;
void
StreamJSON
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
=
0
)
;
void
FlushSamplesAndMarkers
(
)
;
void
BeginUnwind
(
)
;
virtual
void
EndUnwind
(
)
;
void
DuplicateLastSample
(
)
;
ThreadResponsiveness
*
GetThreadResponsiveness
(
)
{
return
&
mRespInfo
;
}
uint32_t
bufferGeneration
(
)
const
{
return
mBuffer
-
>
mGeneration
;
}
protected
:
void
StreamSamplesAndMarkers
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
;
private
:
FRIEND_TEST
(
ThreadProfile
InsertOneTag
)
;
FRIEND_TEST
(
ThreadProfile
InsertOneTagWithTinyBuffer
)
;
FRIEND_TEST
(
ThreadProfile
InsertTagsNoWrap
)
;
FRIEND_TEST
(
ThreadProfile
InsertTagsWrap
)
;
FRIEND_TEST
(
ThreadProfile
MemoryMeasure
)
;
RefPtr
<
ProfileBuffer
>
mBuffer
;
mozilla
:
:
UniquePtr
<
char
[
]
>
mSavedStreamedSamples
;
mozilla
:
:
UniquePtr
<
char
[
]
>
mSavedStreamedMarkers
;
mozilla
:
:
Maybe
<
UniqueStacks
>
mUniqueStacks
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
Mutex
>
mMutex
;
ThreadResponsiveness
mRespInfo
;
#
ifdef
XP_LINUX
public
:
int64_t
mRssMemory
;
int64_t
mUssMemory
;
#
endif
}
;
class
StackOwningThreadInfo
:
public
ThreadInfo
{
public
:
StackOwningThreadInfo
(
const
char
*
aName
int
aThreadId
bool
aIsMainThread
PseudoStack
*
aPseudoStack
void
*
aStackTop
)
;
virtual
~
StackOwningThreadInfo
(
)
;
virtual
void
SetPendingDelete
(
)
;
}
;
#
endif
