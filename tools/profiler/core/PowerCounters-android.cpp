#
include
"
PowerCounters
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
<
dlfcn
.
h
>
#
define
ALOG
(
args
.
.
.
)
\
__android_log_print
(
ANDROID_LOG_INFO
"
GeckoProfiler
"
#
#
args
)
struct
android_namespace_t
;
typedef
struct
{
uint64_t
flags
;
void
*
_Nullable
reserved_addr
;
size_t
reserved_size
;
int
relro_fd
;
int
library_fd
;
off64_t
library_fd_offset
;
struct
android_namespace_t
*
_Nullable
library_namespace
;
}
android_dlextinfo
;
enum
{
ANDROID_DLEXT_USE_NAMESPACE
=
0x200
}
;
extern
"
C
"
__attribute__
(
(
visibility
(
"
default
"
)
)
)
void
*
_Nullable
android_dlopen_ext
(
const
char
*
_Nullable
__filename
int
__flags
const
android_dlextinfo
*
_Nullable
__info
)
;
bool
GetAvailableRails
(
RailDescriptor
*
size_t
*
size_of_arr
)
;
class
RailEnergy
final
:
public
BaseProfilerCount
{
public
:
explicit
RailEnergy
(
RailEnergyData
*
data
const
char
*
aRailName
const
char
*
aSubsystemName
)
:
BaseProfilerCount
(
aSubsystemName
nullptr
nullptr
"
power
"
aRailName
)
mDataPtr
(
data
)
mLastTimestamp
(
0
)
{
}
~
RailEnergy
(
)
{
}
RailEnergy
(
const
RailEnergy
&
)
=
delete
;
RailEnergy
&
operator
=
(
const
RailEnergy
&
)
=
delete
;
CountSample
Sample
(
)
override
{
CountSample
result
=
{
.
count
=
static_cast
<
int64_t
>
(
mDataPtr
-
>
energy
*
1e3
/
3
.
6
)
.
number
=
0
.
isSampleNew
=
mDataPtr
-
>
timestamp
!
=
mLastTimestamp
}
;
mLastTimestamp
=
mDataPtr
-
>
timestamp
;
return
result
;
}
private
:
RailEnergyData
*
mDataPtr
;
uint64_t
mLastTimestamp
;
}
;
PowerCounters
:
:
PowerCounters
(
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
void
*
libcHandle
=
dlopen
(
"
libc
.
so
"
RTLD_LAZY
)
;
if
(
!
libcHandle
)
{
ALOG
(
"
failed
to
dlopen
libc
:
%
s
"
dlerror
(
)
)
;
return
;
}
struct
android_namespace_t
*
(
*
android_get_exported_namespace
)
(
const
char
*
)
=
reinterpret_cast
<
struct
android_namespace_t
*
(
*
)
(
const
char
*
)
>
(
dlsym
(
libcHandle
"
__loader_android_get_exported_namespace
"
)
)
;
if
(
!
android_get_exported_namespace
)
{
ALOG
(
"
failed
to
get
__loader_android_get_exported_namespace
:
%
s
"
dlerror
(
)
)
;
return
;
}
struct
android_namespace_t
*
ns
=
android_get_exported_namespace
(
"
default
"
)
;
const
android_dlextinfo
dlextinfo
=
{
.
flags
=
ANDROID_DLEXT_USE_NAMESPACE
.
library_namespace
=
ns
}
;
mLibperfettoModule
=
android_dlopen_ext
(
"
libperfetto_android_internal
.
so
"
RTLD_LOCAL
|
RTLD_LAZY
&
dlextinfo
)
;
MOZ_ASSERT
(
mLibperfettoModule
)
;
if
(
!
mLibperfettoModule
)
{
ALOG
(
"
failed
to
get
libperfetto
handle
:
%
s
"
dlerror
(
)
)
;
return
;
}
decltype
(
&
GetAvailableRails
)
getAvailableRails
=
reinterpret_cast
<
decltype
(
&
GetAvailableRails
)
>
(
dlsym
(
mLibperfettoModule
"
GetAvailableRails
"
)
)
;
if
(
!
getAvailableRails
)
{
ALOG
(
"
failed
to
get
GetAvailableRails
pointer
:
%
s
"
dlerror
(
)
)
;
return
;
}
constexpr
size_t
kMaxNumRails
=
32
;
if
(
!
mRailDescriptors
.
resize
(
kMaxNumRails
)
)
{
ALOG
(
"
failed
to
grow
mRailDescriptors
"
)
;
return
;
}
size_t
numRails
=
mRailDescriptors
.
length
(
)
;
getAvailableRails
(
&
mRailDescriptors
[
0
]
&
numRails
)
;
mRailDescriptors
.
shrinkTo
(
numRails
)
;
ALOG
(
"
found
%
zu
rails
"
numRails
)
;
if
(
numRails
=
=
0
)
{
return
;
}
if
(
!
mRailEnergyData
.
resize
(
numRails
)
)
{
ALOG
(
"
failed
to
grow
mRailEnergyData
"
)
;
return
;
}
for
(
size_t
i
=
0
;
i
<
numRails
;
+
+
i
)
{
RailDescriptor
&
rail
=
mRailDescriptors
[
i
]
;
ALOG
(
"
rail
%
zu
name
:
%
s
subsystem
:
%
s
"
i
rail
.
rail_name
rail
.
subsys_name
)
;
RailEnergy
*
railEnergy
=
new
RailEnergy
(
&
mRailEnergyData
[
i
]
rail
.
rail_name
rail
.
subsys_name
)
;
if
(
!
mCounters
.
emplaceBack
(
railEnergy
)
)
{
delete
railEnergy
;
}
}
mGetRailEnergyData
=
reinterpret_cast
<
decltype
(
&
GetRailEnergyData
)
>
(
dlsym
(
mLibperfettoModule
"
GetRailEnergyData
"
)
)
;
if
(
!
mGetRailEnergyData
)
{
ALOG
(
"
failed
to
get
GetRailEnergyData
pointer
"
)
;
return
;
}
}
PowerCounters
:
:
~
PowerCounters
(
)
{
if
(
mLibperfettoModule
)
{
dlclose
(
mLibperfettoModule
)
;
}
for
(
auto
*
railEnergy
:
mCounters
)
{
delete
railEnergy
;
}
mCounters
.
clear
(
)
;
}
void
PowerCounters
:
:
Sample
(
)
{
if
(
!
XRE_IsParentProcess
(
)
|
|
!
mGetRailEnergyData
)
{
return
;
}
size_t
length
=
mRailEnergyData
.
length
(
)
;
mGetRailEnergyData
(
&
mRailEnergyData
[
0
]
&
length
)
;
}
