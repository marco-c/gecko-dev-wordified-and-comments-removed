#
include
<
windows
.
h
>
#
include
<
psapi
.
h
>
#
include
"
shared
-
libraries
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WindowsEnumProcessModules
.
h
"
#
include
"
mozilla
/
WindowsProcessMitigations
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
nsPrintfCString
.
h
"
static
nsCString
GetVersion
(
const
WCHAR
*
dllPath
)
{
DWORD
infoSize
=
GetFileVersionInfoSizeW
(
dllPath
nullptr
)
;
if
(
infoSize
=
=
0
)
{
return
"
"
_ns
;
}
mozilla
:
:
UniquePtr
<
unsigned
char
[
]
>
infoData
=
mozilla
:
:
MakeUnique
<
unsigned
char
[
]
>
(
infoSize
)
;
if
(
!
GetFileVersionInfoW
(
dllPath
0
infoSize
infoData
.
get
(
)
)
)
{
return
"
"
_ns
;
}
VS_FIXEDFILEINFO
*
vInfo
;
UINT
vInfoLen
;
if
(
!
VerQueryValueW
(
infoData
.
get
(
)
L
"
\
\
"
(
LPVOID
*
)
&
vInfo
&
vInfoLen
)
)
{
return
"
"
_ns
;
}
if
(
!
vInfo
)
{
return
"
"
_ns
;
}
nsPrintfCString
version
(
"
%
d
.
%
d
.
%
d
.
%
d
"
vInfo
-
>
dwFileVersionMS
>
>
16
vInfo
-
>
dwFileVersionMS
&
0xFFFF
vInfo
-
>
dwFileVersionLS
>
>
16
vInfo
-
>
dwFileVersionLS
&
0xFFFF
)
;
return
std
:
:
move
(
version
)
;
}
SharedLibraryInfo
SharedLibraryInfo
:
:
GetInfoForSelf
(
)
{
SharedLibraryInfo
sharedLibraryInfo
;
auto
addSharedLibraryFromModuleInfo
=
[
&
sharedLibraryInfo
]
(
const
wchar_t
*
aModulePath
HMODULE
aModule
)
{
MODULEINFO
module
=
{
0
}
;
if
(
!
GetModuleInformation
(
mozilla
:
:
nt
:
:
kCurrentProcess
aModule
&
module
sizeof
(
MODULEINFO
)
)
)
{
return
;
}
nsAutoString
modulePathStr
(
aModulePath
)
;
nsAutoString
moduleNameStr
=
modulePathStr
;
int32_t
pos
=
moduleNameStr
.
RFindCharInSet
(
u
"
\
\
/
"
)
;
if
(
pos
!
=
kNotFound
)
{
moduleNameStr
.
Cut
(
0
pos
+
1
)
;
}
#
if
!
defined
(
_M_ARM64
)
#
if
defined
(
_M_AMD64
)
LPCWSTR
kNvidiaShimDriver
=
L
"
nvd3d9wrapx
.
dll
"
;
LPCWSTR
kNvidiaInitDriver
=
L
"
nvinitx
.
dll
"
;
#
elif
defined
(
_M_IX86
)
LPCWSTR
kNvidiaShimDriver
=
L
"
nvd3d9wrap
.
dll
"
;
LPCWSTR
kNvidiaInitDriver
=
L
"
nvinit
.
dll
"
;
#
endif
if
(
moduleNameStr
.
LowerCaseEqualsLiteral
(
"
detoured
.
dll
"
)
&
&
!
mozilla
:
:
IsWin8OrLater
(
)
&
&
:
:
GetModuleHandle
(
kNvidiaShimDriver
)
&
&
!
:
:
GetModuleHandle
(
kNvidiaInitDriver
)
)
{
constexpr
auto
pdbNameStr
=
u
"
detoured
.
pdb
"
_ns
;
SharedLibrary
shlib
(
(
uintptr_t
)
module
.
lpBaseOfDll
(
uintptr_t
)
module
.
lpBaseOfDll
+
module
.
SizeOfImage
0
"
000000000000000000000000000000000
"
_ns
moduleNameStr
modulePathStr
pdbNameStr
pdbNameStr
"
"
_ns
"
"
)
;
sharedLibraryInfo
.
AddSharedLibrary
(
shlib
)
;
return
;
}
#
endif
bool
canGetPdbInfo
=
(
!
mozilla
:
:
IsEafPlusEnabled
(
)
|
|
!
moduleNameStr
.
LowerCaseEqualsLiteral
(
"
ntdll
.
dll
"
)
)
;
nsModuleHandle
handleLock
(
:
:
LoadLibraryExW
(
aModulePath
NULL
LOAD_LIBRARY_AS_DATAFILE
|
LOAD_LIBRARY_AS_IMAGE_RESOURCE
)
)
;
nsAutoCString
breakpadId
;
nsAutoString
pdbPathStr
;
nsAutoString
pdbNameStr
;
if
(
handleLock
&
&
canGetPdbInfo
)
{
mozilla
:
:
nt
:
:
PEHeaders
headers
(
handleLock
.
get
(
)
)
;
if
(
headers
)
{
if
(
const
auto
*
debugInfo
=
headers
.
GetPdbInfo
(
)
)
{
MOZ_ASSERT
(
breakpadId
.
IsEmpty
(
)
)
;
const
GUID
&
pdbSig
=
debugInfo
-
>
pdbSignature
;
breakpadId
.
AppendPrintf
(
"
%
08X
"
"
%
04X
%
04X
"
"
%
02X
%
02X
%
02X
%
02X
%
02X
%
02X
%
02X
%
02X
"
"
%
X
"
pdbSig
.
Data1
pdbSig
.
Data2
pdbSig
.
Data3
pdbSig
.
Data4
[
0
]
pdbSig
.
Data4
[
1
]
pdbSig
.
Data4
[
2
]
pdbSig
.
Data4
[
3
]
pdbSig
.
Data4
[
4
]
pdbSig
.
Data4
[
5
]
pdbSig
.
Data4
[
6
]
pdbSig
.
Data4
[
7
]
debugInfo
-
>
pdbAge
)
;
pdbPathStr
=
NS_ConvertUTF8toUTF16
(
debugInfo
-
>
pdbFileName
)
;
pdbNameStr
=
pdbPathStr
;
int32_t
pos
=
pdbNameStr
.
RFindCharInSet
(
u
"
\
\
/
"
)
;
if
(
pos
!
=
kNotFound
)
{
pdbNameStr
.
Cut
(
0
pos
+
1
)
;
}
}
}
}
SharedLibrary
shlib
(
(
uintptr_t
)
module
.
lpBaseOfDll
(
uintptr_t
)
module
.
lpBaseOfDll
+
module
.
SizeOfImage
0
breakpadId
moduleNameStr
modulePathStr
pdbNameStr
pdbPathStr
GetVersion
(
aModulePath
)
"
"
)
;
sharedLibraryInfo
.
AddSharedLibrary
(
shlib
)
;
}
;
mozilla
:
:
EnumerateProcessModules
(
addSharedLibraryFromModuleInfo
)
;
return
sharedLibraryInfo
;
}
void
SharedLibraryInfo
:
:
Initialize
(
)
{
}
