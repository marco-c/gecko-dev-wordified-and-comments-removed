#
include
<
windows
.
h
>
#
include
"
shared
-
libraries
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
mozilla
/
WindowsEnumProcessModules
.
h
"
#
include
"
mozilla
/
WindowsProcessMitigations
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
nsPrintfCString
.
h
"
static
bool
IsModuleUnsafeToLoad
(
const
nsAString
&
aModuleName
)
{
#
if
defined
(
_M_AMD64
)
|
|
defined
(
_M_IX86
)
#
if
defined
(
_M_AMD64
)
LPCWSTR
kNvidiaShimDriver
=
L
"
nvd3d9wrapx
.
dll
"
;
LPCWSTR
kNvidiaInitDriver
=
L
"
nvinitx
.
dll
"
;
#
elif
defined
(
_M_IX86
)
LPCWSTR
kNvidiaShimDriver
=
L
"
nvd3d9wrap
.
dll
"
;
LPCWSTR
kNvidiaInitDriver
=
L
"
nvinit
.
dll
"
;
#
endif
if
(
aModuleName
.
LowerCaseEqualsLiteral
(
"
detoured
.
dll
"
)
&
&
!
mozilla
:
:
IsWin8OrLater
(
)
&
&
:
:
GetModuleHandleW
(
kNvidiaShimDriver
)
&
&
!
:
:
GetModuleHandleW
(
kNvidiaInitDriver
)
)
{
return
true
;
}
#
endif
if
(
aModuleName
.
LowerCaseEqualsLiteral
(
"
msvp9dec_store
.
dll
"
)
)
{
return
true
;
}
return
false
;
}
void
AddSharedLibraryFromModuleInfo
(
SharedLibraryInfo
&
sharedLibraryInfo
const
wchar_t
*
aModulePath
mozilla
:
:
Maybe
<
HMODULE
>
aModule
)
{
nsDependentSubstring
moduleNameStr
(
mozilla
:
:
nt
:
:
GetLeafName
(
nsDependentString
(
aModulePath
)
)
)
;
if
(
IsModuleUnsafeToLoad
(
moduleNameStr
)
)
{
return
;
}
if
(
mozilla
:
:
IsEafPlusEnabled
(
)
&
&
moduleNameStr
.
LowerCaseEqualsLiteral
(
"
ntdll
.
dll
"
)
)
{
return
;
}
nsModuleHandle
handleLock
(
:
:
LoadLibraryExW
(
aModulePath
NULL
LOAD_LIBRARY_AS_DATAFILE
|
LOAD_LIBRARY_AS_IMAGE_RESOURCE
)
)
;
if
(
!
handleLock
)
{
return
;
}
mozilla
:
:
nt
:
:
PEHeaders
headers
(
handleLock
.
get
(
)
)
;
if
(
!
headers
)
{
return
;
}
mozilla
:
:
Maybe
<
mozilla
:
:
Range
<
const
uint8_t
>
>
bounds
=
headers
.
GetBounds
(
)
;
if
(
!
bounds
)
{
return
;
}
const
uintptr_t
modStart
=
aModule
.
isSome
(
)
?
reinterpret_cast
<
uintptr_t
>
(
*
aModule
)
:
reinterpret_cast
<
uintptr_t
>
(
handleLock
.
get
(
)
)
;
const
uintptr_t
modEnd
=
modStart
+
bounds
-
>
length
(
)
;
nsAutoCString
breakpadId
;
nsAutoString
pdbPathStr
;
if
(
const
auto
*
debugInfo
=
headers
.
GetPdbInfo
(
)
)
{
MOZ_ASSERT
(
breakpadId
.
IsEmpty
(
)
)
;
const
GUID
&
pdbSig
=
debugInfo
-
>
pdbSignature
;
breakpadId
.
AppendPrintf
(
"
%
08lX
"
"
%
04X
%
04X
"
"
%
02X
%
02X
%
02X
%
02X
%
02X
%
02X
%
02X
%
02X
"
"
%
X
"
pdbSig
.
Data1
pdbSig
.
Data2
pdbSig
.
Data3
pdbSig
.
Data4
[
0
]
pdbSig
.
Data4
[
1
]
pdbSig
.
Data4
[
2
]
pdbSig
.
Data4
[
3
]
pdbSig
.
Data4
[
4
]
pdbSig
.
Data4
[
5
]
pdbSig
.
Data4
[
6
]
pdbSig
.
Data4
[
7
]
debugInfo
-
>
pdbAge
)
;
pdbPathStr
=
NS_ConvertUTF8toUTF16
(
debugInfo
-
>
pdbFileName
)
;
}
nsAutoCString
codeId
;
DWORD
timestamp
;
DWORD
imageSize
;
if
(
headers
.
GetTimeStamp
(
timestamp
)
&
&
headers
.
GetImageSize
(
imageSize
)
)
{
codeId
.
AppendPrintf
(
"
%
08lX
"
"
%
lx
"
timestamp
imageSize
)
;
}
nsAutoCString
versionStr
;
uint64_t
version
;
if
(
headers
.
GetVersionInfo
(
version
)
)
{
versionStr
.
AppendPrintf
(
"
%
u
.
%
u
.
%
u
.
%
u
"
static_cast
<
uint32_t
>
(
(
version
>
>
48
)
&
0xFFFFu
)
static_cast
<
uint32_t
>
(
(
version
>
>
32
)
&
0xFFFFu
)
static_cast
<
uint32_t
>
(
(
version
>
>
16
)
&
0xFFFFu
)
static_cast
<
uint32_t
>
(
version
&
0xFFFFu
)
)
;
}
const
nsString
&
pdbNameStr
=
PromiseFlatString
(
mozilla
:
:
nt
:
:
GetLeafName
(
pdbPathStr
)
)
;
SharedLibrary
shlib
(
modStart
modEnd
0
breakpadId
codeId
PromiseFlatString
(
moduleNameStr
)
nsDependentString
(
aModulePath
)
pdbNameStr
pdbPathStr
versionStr
"
"
)
;
sharedLibraryInfo
.
AddSharedLibrary
(
shlib
)
;
}
SharedLibraryInfo
SharedLibraryInfo
:
:
GetInfoForSelf
(
)
{
SharedLibraryInfo
sharedLibraryInfo
;
auto
addSharedLibraryFromModuleInfo
=
[
&
sharedLibraryInfo
]
(
const
wchar_t
*
aModulePath
HMODULE
aModule
)
{
AddSharedLibraryFromModuleInfo
(
sharedLibraryInfo
aModulePath
mozilla
:
:
Some
(
aModule
)
)
;
}
;
mozilla
:
:
EnumerateProcessModules
(
addSharedLibraryFromModuleInfo
)
;
return
sharedLibraryInfo
;
}
SharedLibraryInfo
SharedLibraryInfo
:
:
GetInfoFromPath
(
const
wchar_t
*
aPath
)
{
SharedLibraryInfo
sharedLibraryInfo
;
AddSharedLibraryFromModuleInfo
(
sharedLibraryInfo
aPath
mozilla
:
:
Nothing
(
)
)
;
return
sharedLibraryInfo
;
}
void
SharedLibraryInfo
:
:
Initialize
(
)
{
}
