#
ifndef
PageInformation_h
#
define
PageInformation_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
baseprofiler
{
class
SpliceableJSONWriter
;
}
}
class
PageInformation
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
PageInformation
)
PageInformation
(
uint64_t
aTabID
uint64_t
aInnerWindowID
const
nsCString
&
aUrl
uint64_t
aEmbedderInnerWindowID
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
bool
Equals
(
PageInformation
*
aOtherPageInfo
)
const
;
void
StreamJSON
(
mozilla
:
:
baseprofiler
:
:
SpliceableJSONWriter
&
aWriter
)
const
;
uint64_t
InnerWindowID
(
)
const
{
return
mInnerWindowID
;
}
uint64_t
TabID
(
)
const
{
return
mTabID
;
}
const
nsCString
&
Url
(
)
const
{
return
mUrl
;
}
uint64_t
EmbedderInnerWindowID
(
)
const
{
return
mEmbedderInnerWindowID
;
}
mozilla
:
:
Maybe
<
uint64_t
>
BufferPositionWhenUnregistered
(
)
const
{
return
mBufferPositionWhenUnregistered
;
}
void
NotifyUnregistered
(
uint64_t
aBufferPosition
)
{
mBufferPositionWhenUnregistered
=
mozilla
:
:
Some
(
aBufferPosition
)
;
}
private
:
const
uint64_t
mTabID
;
const
uint64_t
mInnerWindowID
;
const
nsCString
mUrl
;
const
uint64_t
mEmbedderInnerWindowID
;
mozilla
:
:
Maybe
<
uint64_t
>
mBufferPositionWhenUnregistered
;
virtual
~
PageInformation
(
)
=
default
;
}
;
#
endif
