#
ifndef
MOZ_THREAD_PROFILE_H
#
define
MOZ_THREAD_PROFILE_H
#
include
"
ProfileBuffer
.
h
"
#
include
"
ThreadInfo
.
h
"
class
ThreadProfile
{
public
:
ThreadProfile
(
ThreadInfo
*
aThreadInfo
ProfileBuffer
*
aBuffer
)
;
virtual
~
ThreadProfile
(
)
;
void
addTag
(
const
ProfileEntry
&
aTag
)
;
void
addStoredMarker
(
ProfilerMarker
*
aStoredMarker
)
;
PseudoStack
*
GetPseudoStack
(
)
;
mozilla
:
:
Mutex
&
GetMutex
(
)
;
void
StreamJSON
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
=
0
)
;
void
FlushSamplesAndMarkers
(
)
;
void
BeginUnwind
(
)
;
virtual
void
EndUnwind
(
)
;
bool
IsMainThread
(
)
const
{
return
mIsMainThread
;
}
const
char
*
Name
(
)
const
{
return
mThreadInfo
-
>
Name
(
)
;
}
int
ThreadId
(
)
const
{
return
mThreadId
;
}
PlatformData
*
GetPlatformData
(
)
const
{
return
mPlatformData
;
}
void
*
GetStackTop
(
)
const
{
return
mStackTop
;
}
void
DuplicateLastSample
(
)
;
ThreadInfo
*
GetThreadInfo
(
)
const
{
return
mThreadInfo
;
}
ThreadResponsiveness
*
GetThreadResponsiveness
(
)
{
return
&
mRespInfo
;
}
bool
CanInvokeJS
(
)
const
{
return
mThreadInfo
-
>
CanInvokeJS
(
)
;
}
void
SetPendingDelete
(
)
{
mPseudoStack
=
nullptr
;
mPlatformData
=
nullptr
;
}
uint32_t
bufferGeneration
(
)
const
{
return
mBuffer
-
>
mGeneration
;
}
protected
:
void
StreamSamplesAndMarkers
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
;
private
:
FRIEND_TEST
(
ThreadProfile
InsertOneTag
)
;
FRIEND_TEST
(
ThreadProfile
InsertOneTagWithTinyBuffer
)
;
FRIEND_TEST
(
ThreadProfile
InsertTagsNoWrap
)
;
FRIEND_TEST
(
ThreadProfile
InsertTagsWrap
)
;
FRIEND_TEST
(
ThreadProfile
MemoryMeasure
)
;
ThreadInfo
*
mThreadInfo
;
const
RefPtr
<
ProfileBuffer
>
mBuffer
;
mozilla
:
:
UniquePtr
<
char
[
]
>
mSavedStreamedSamples
;
mozilla
:
:
UniquePtr
<
char
[
]
>
mSavedStreamedMarkers
;
mozilla
:
:
Maybe
<
UniqueStacks
>
mUniqueStacks
;
PseudoStack
*
mPseudoStack
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
Mutex
>
mMutex
;
int
mThreadId
;
bool
mIsMainThread
;
PlatformData
*
mPlatformData
;
void
*
const
mStackTop
;
ThreadResponsiveness
mRespInfo
;
#
ifdef
XP_LINUX
public
:
int64_t
mRssMemory
;
int64_t
mUssMemory
;
#
endif
}
;
#
endif
