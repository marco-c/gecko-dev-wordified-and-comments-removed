#
ifndef
TOOLS_POWERCOUNTERS_H_
#
define
TOOLS_POWERCOUNTERS_H_
#
include
"
PlatformMacros
.
h
"
#
include
"
mozilla
/
ProfilerCounts
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
if
defined
(
_MSC_VER
)
class
PowerMeterDevice
;
#
endif
#
if
defined
(
GP_PLAT_arm64_darwin
)
class
ProcessPower
;
#
endif
#
if
defined
(
GP_PLAT_amd64_darwin
)
class
RAPL
;
#
endif
#
if
defined
(
GP_PLAT_arm64_android
)
struct
RailDescriptor
{
uint32_t
index
;
char
rail_name
[
64
]
;
char
subsys_name
[
64
]
;
uint32_t
sampling_rate
;
}
;
struct
RailEnergyData
{
uint32_t
index
;
uint64_t
timestamp
;
uint64_t
energy
;
}
;
bool
GetRailEnergyData
(
RailEnergyData
*
size_t
*
size_of_arr
)
;
#
endif
class
PowerCounters
{
public
:
#
if
defined
(
_MSC_VER
)
|
|
defined
(
GP_OS_darwin
)
|
|
\
defined
(
GP_PLAT_amd64_linux
)
|
|
defined
(
GP_PLAT_arm64_android
)
explicit
PowerCounters
(
)
;
#
else
explicit
PowerCounters
(
)
{
}
;
#
endif
#
if
defined
(
_MSC_VER
)
|
|
defined
(
GP_PLAT_amd64_darwin
)
|
|
\
defined
(
GP_PLAT_arm64_android
)
~
PowerCounters
(
)
;
#
else
~
PowerCounters
(
)
=
default
;
#
endif
#
if
defined
(
_MSC_VER
)
|
|
defined
(
GP_PLAT_amd64_darwin
)
|
|
\
defined
(
GP_PLAT_arm64_android
)
void
Sample
(
)
;
#
else
void
Sample
(
)
{
}
;
#
endif
using
CountVector
=
mozilla
:
:
Vector
<
mozilla
:
:
UniquePtr
<
BaseProfilerCount
>
4
>
;
const
CountVector
&
GetCounters
(
)
{
return
mCounters
;
}
private
:
CountVector
mCounters
;
#
if
defined
(
_MSC_VER
)
mozilla
:
:
Vector
<
mozilla
:
:
UniquePtr
<
PowerMeterDevice
>
>
mPowerMeterDevices
;
#
endif
#
if
defined
(
GP_PLAT_amd64_darwin
)
mozilla
:
:
UniquePtr
<
RAPL
>
mRapl
;
#
endif
#
if
defined
(
GP_PLAT_arm64_android
)
void
*
mLibperfettoModule
=
nullptr
;
decltype
(
&
GetRailEnergyData
)
mGetRailEnergyData
=
nullptr
;
mozilla
:
:
Vector
<
RailDescriptor
>
mRailDescriptors
;
mozilla
:
:
Vector
<
RailEnergyData
>
mRailEnergyData
;
#
endif
}
;
#
endif
