#
include
"
mozilla
/
ProfilerUtils
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
process
.
h
>
#
include
<
processthreadsapi
.
h
>
ProfilerProcessId
profiler_current_process_id
(
)
{
return
ProfilerProcessId
:
:
FromNumber
(
_getpid
(
)
)
;
}
ProfilerThreadId
profiler_current_thread_id
(
)
{
DWORD
threadId
=
GetCurrentThreadId
(
)
;
MOZ_ASSERT
(
threadId
<
=
INT32_MAX
"
native
thread
ID
is
>
INT32_MAX
"
)
;
return
ProfilerThreadId
:
:
FromNumber
(
static_cast
<
ProfilerThreadId
:
:
NumberType
>
(
threadId
)
)
;
}
#
else
#
include
<
unistd
.
h
>
ProfilerProcessId
profiler_current_process_id
(
)
{
return
ProfilerProcessId
:
:
FromNumber
(
getpid
(
)
)
;
}
#
if
defined
(
XP_MACOSX
)
#
include
<
pthread
.
h
>
ProfilerThreadId
profiler_current_thread_id
(
)
{
uint64_t
tid
;
pthread_threadid_np
(
nullptr
&
tid
)
;
return
ProfilerThreadId
:
:
FromNumber
(
static_cast
<
ProfilerThreadId
:
:
NumberType
>
(
tid
)
)
;
}
#
elif
defined
(
__ANDROID__
)
|
|
defined
(
ANDROID
)
#
include
<
sys
/
types
.
h
>
ProfilerThreadId
profiler_current_thread_id
(
)
{
return
ProfilerThreadId
:
:
FromNumber
(
static_cast
<
ProfilerThreadId
:
:
NumberType
>
(
gettid
(
)
)
)
;
}
#
elif
defined
(
XP_LINUX
)
#
include
<
sys
/
syscall
.
h
>
ProfilerThreadId
profiler_current_thread_id
(
)
{
return
ProfilerThreadId
:
:
FromNumber
(
static_cast
<
ProfilerThreadId
:
:
NumberType
>
(
syscall
(
SYS_gettid
)
)
)
;
}
#
elif
defined
(
XP_FREEBSD
)
#
include
<
sys
/
thr
.
h
>
ProfilerThreadId
profiler_current_thread_id
(
)
{
long
id
;
(
void
)
thr_self
(
&
id
)
;
return
ProfilerThreadId
:
:
FromNumber
(
static_cast
<
ProfilerThreadId
:
:
NumberType
>
(
id
)
)
;
}
#
else
ProfilerThreadId
profiler_current_thread_id
(
)
{
return
ProfilerThreadId
{
}
;
}
#
endif
#
endif
namespace
mozilla
:
:
profiler
:
:
detail
{
ProfilerThreadId
scProfilerMainThreadId
;
}
