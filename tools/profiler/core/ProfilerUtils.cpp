#
include
"
mozilla
/
ProfilerUtils
.
h
"
#
if
defined
(
XP_WIN
)
#
include
<
process
.
h
>
#
include
<
processthreadsapi
.
h
>
ProfilerProcessId
profiler_current_process_id
(
)
{
return
ProfilerProcessId
:
:
FromNativeId
(
_getpid
(
)
)
;
}
ProfilerThreadId
profiler_current_thread_id
(
)
{
static_assert
(
std
:
:
is_same_v
<
ProfilerThreadId
:
:
NativeType
decltype
(
GetCurrentThreadId
(
)
)
>
"
ProfilerThreadId
:
:
NativeType
must
be
exactly
the
type
"
"
returned
by
GetCurrentThreadId
(
)
"
)
;
return
ProfilerThreadId
:
:
FromNativeId
(
GetCurrentThreadId
(
)
)
;
}
#
else
#
include
<
unistd
.
h
>
ProfilerProcessId
profiler_current_process_id
(
)
{
return
ProfilerProcessId
:
:
FromNativeId
(
getpid
(
)
)
;
}
#
if
defined
(
XP_MACOSX
)
#
include
<
pthread
.
h
>
ProfilerThreadId
profiler_current_thread_id
(
)
{
uint64_t
tid
;
if
(
pthread_threadid_np
(
nullptr
&
tid
)
!
=
0
)
{
return
ProfilerThreadId
{
}
;
}
return
ProfilerThreadId
:
:
FromNativeId
(
tid
)
;
}
#
elif
defined
(
__ANDROID__
)
|
|
defined
(
ANDROID
)
ProfilerThreadId
profiler_current_thread_id
(
)
{
return
ProfilerThreadId
:
:
FromNativeId
(
gettid
(
)
)
;
}
#
elif
defined
(
XP_LINUX
)
#
include
<
sys
/
syscall
.
h
>
ProfilerThreadId
profiler_current_thread_id
(
)
{
return
ProfilerThreadId
:
:
FromNativeId
(
syscall
(
SYS_gettid
)
)
;
}
#
elif
defined
(
XP_FREEBSD
)
#
include
<
sys
/
thr
.
h
>
ProfilerThreadId
profiler_current_thread_id
(
)
{
long
id
;
if
(
thr_self
(
&
id
)
!
=
0
)
{
return
ProfilerThreadId
{
}
;
}
return
ProfilerThreadId
:
:
FromNativeId
(
id
)
;
}
#
else
ProfilerThreadId
profiler_current_thread_id
(
)
{
return
ProfilerThreadId
{
}
;
}
#
endif
#
endif
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
static
ProfilerThreadId
scProfilerMainThreadId
;
void
profiler_init_main_thread_id
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mozilla
:
:
baseprofiler
:
:
profiler_init_main_thread_id
(
)
;
if
(
!
scProfilerMainThreadId
.
IsSpecified
(
)
)
{
scProfilerMainThreadId
=
profiler_current_thread_id
(
)
;
}
}
[
[
nodiscard
]
]
ProfilerThreadId
profiler_main_thread_id
(
)
{
return
scProfilerMainThreadId
;
}
[
[
nodiscard
]
]
bool
profiler_is_main_thread
(
)
{
return
profiler_current_thread_id
(
)
=
=
scProfilerMainThreadId
;
}
