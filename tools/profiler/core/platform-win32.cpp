#
include
<
windows
.
h
>
#
include
<
mmsystem
.
h
>
#
include
<
process
.
h
>
#
ifdef
__MINGW32__
#
include
<
immintrin
.
h
>
#
endif
#
include
"
nsWindowsDllInterceptor
.
h
"
#
include
"
mozilla
/
StackWalk_windows
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
int
Thread
:
:
GetCurrentId
(
)
{
DWORD
threadId
=
GetCurrentThreadId
(
)
;
MOZ_ASSERT
(
threadId
<
=
INT32_MAX
"
native
thread
ID
is
>
INT32_MAX
"
)
;
return
int
(
threadId
)
;
}
void
*
GetStackTop
(
void
*
aGuess
)
{
PNT_TIB
pTib
=
reinterpret_cast
<
PNT_TIB
>
(
NtCurrentTeb
(
)
)
;
return
reinterpret_cast
<
void
*
>
(
pTib
-
>
StackBase
)
;
}
static
void
PopulateRegsFromContext
(
Registers
&
aRegs
CONTEXT
*
aContext
)
{
#
if
defined
(
GP_ARCH_amd64
)
aRegs
.
mPC
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Rip
)
;
aRegs
.
mSP
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Rsp
)
;
aRegs
.
mFP
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Rbp
)
;
#
elif
defined
(
GP_ARCH_x86
)
aRegs
.
mPC
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Eip
)
;
aRegs
.
mSP
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Esp
)
;
aRegs
.
mFP
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Ebp
)
;
#
else
#
error
"
bad
arch
"
#
endif
aRegs
.
mLR
=
0
;
}
class
PlatformData
{
public
:
explicit
PlatformData
(
int
aThreadId
)
:
mProfiledThread
(
OpenThread
(
THREAD_GET_CONTEXT
|
THREAD_SUSPEND_RESUME
|
THREAD_QUERY_INFORMATION
false
aThreadId
)
)
{
MOZ_COUNT_CTOR
(
PlatformData
)
;
}
~
PlatformData
(
)
{
if
(
mProfiledThread
!
=
nullptr
)
{
CloseHandle
(
mProfiledThread
)
;
mProfiledThread
=
nullptr
;
}
MOZ_COUNT_DTOR
(
PlatformData
)
;
}
HANDLE
ProfiledThread
(
)
{
return
mProfiledThread
;
}
private
:
HANDLE
mProfiledThread
;
}
;
HANDLE
GetThreadHandle
(
PlatformData
*
aData
)
{
return
aData
-
>
ProfiledThread
(
)
;
}
static
const
HANDLE
kNoThread
=
INVALID_HANDLE_VALUE
;
Sampler
:
:
Sampler
(
PSLockRef
aLock
)
{
}
void
Sampler
:
:
Disable
(
PSLockRef
aLock
)
{
}
template
<
typename
Func
>
void
Sampler
:
:
SuspendAndSampleAndResumeThread
(
PSLockRef
aLock
const
RegisteredThread
&
aRegisteredThread
const
Func
&
aProcessRegs
)
{
HANDLE
profiled_thread
=
aRegisteredThread
.
GetPlatformData
(
)
-
>
ProfiledThread
(
)
;
if
(
profiled_thread
=
=
nullptr
)
{
return
;
}
CONTEXT
context
;
memset
(
&
context
0
sizeof
(
context
)
)
;
static
const
DWORD
kSuspendFailed
=
static_cast
<
DWORD
>
(
-
1
)
;
if
(
SuspendThread
(
profiled_thread
)
=
=
kSuspendFailed
)
{
return
;
}
#
if
defined
(
GP_ARCH_amd64
)
context
.
ContextFlags
=
CONTEXT_FULL
;
#
else
context
.
ContextFlags
=
CONTEXT_CONTROL
;
#
endif
if
(
!
GetThreadContext
(
profiled_thread
&
context
)
)
{
ResumeThread
(
profiled_thread
)
;
return
;
}
Registers
regs
;
PopulateRegsFromContext
(
regs
&
context
)
;
aProcessRegs
(
regs
)
;
ResumeThread
(
profiled_thread
)
;
}
static
unsigned
int
__stdcall
ThreadEntry
(
void
*
aArg
)
{
auto
thread
=
static_cast
<
SamplerThread
*
>
(
aArg
)
;
thread
-
>
Run
(
)
;
return
0
;
}
SamplerThread
:
:
SamplerThread
(
PSLockRef
aLock
uint32_t
aActivityGeneration
double
aIntervalMilliseconds
)
:
Sampler
(
aLock
)
mActivityGeneration
(
aActivityGeneration
)
mIntervalMicroseconds
(
std
:
:
max
(
1
int
(
floor
(
aIntervalMilliseconds
*
1000
+
0
.
5
)
)
)
)
{
if
(
mIntervalMicroseconds
<
10
*
1000
)
{
:
:
timeBeginPeriod
(
mIntervalMicroseconds
/
1000
)
;
}
mThread
=
reinterpret_cast
<
HANDLE
>
(
_beginthreadex
(
nullptr
0
ThreadEntry
this
0
nullptr
)
)
;
if
(
mThread
=
=
0
)
{
MOZ_CRASH
(
"
_beginthreadex
failed
"
)
;
}
}
SamplerThread
:
:
~
SamplerThread
(
)
{
WaitForSingleObject
(
mThread
INFINITE
)
;
if
(
mThread
!
=
kNoThread
)
{
CloseHandle
(
mThread
)
;
}
}
void
SamplerThread
:
:
SleepMicro
(
uint32_t
aMicroseconds
)
{
if
(
mIntervalMicroseconds
>
=
1000
)
{
:
:
Sleep
(
std
:
:
max
(
1u
aMicroseconds
/
1000
)
)
;
}
else
{
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
TimeStamp
end
=
start
+
TimeDuration
:
:
FromMicroseconds
(
aMicroseconds
)
;
if
(
aMicroseconds
>
=
1000
)
{
:
:
Sleep
(
aMicroseconds
/
1000
)
;
}
while
(
TimeStamp
:
:
Now
(
)
<
end
)
{
_mm_pause
(
)
;
}
}
}
void
SamplerThread
:
:
Stop
(
PSLockRef
aLock
)
{
if
(
mIntervalMicroseconds
<
10
*
1000
)
{
:
:
timeEndPeriod
(
mIntervalMicroseconds
/
1000
)
;
}
Sampler
:
:
Disable
(
aLock
)
;
}
static
void
PlatformInit
(
PSLockRef
aLock
)
{
}
#
if
defined
(
HAVE_NATIVE_UNWIND
)
void
Registers
:
:
SyncPopulate
(
)
{
CONTEXT
context
;
RtlCaptureContext
(
&
context
)
;
PopulateRegsFromContext
(
*
this
&
context
)
;
}
#
endif
#
if
defined
(
GP_PLAT_amd64_windows
)
static
WindowsDllInterceptor
NtDllIntercept
;
typedef
NTSTATUS
(
NTAPI
*
LdrUnloadDll_func
)
(
HMODULE
module
)
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
LdrUnloadDll_func
>
stub_LdrUnloadDll
;
static
NTSTATUS
NTAPI
patched_LdrUnloadDll
(
HMODULE
module
)
{
AutoSuppressStackWalking
suppress
;
return
stub_LdrUnloadDll
(
module
)
;
}
typedef
PVOID
(
WINAPI
*
LdrResolveDelayLoadedAPI_func
)
(
PVOID
ParentModuleBase
PVOID
DelayloadDescriptor
PVOID
FailureDllHook
PVOID
FailureSystemHook
PVOID
ThunkAddress
ULONG
Flags
)
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
LdrResolveDelayLoadedAPI_func
>
stub_LdrResolveDelayLoadedAPI
;
static
PVOID
WINAPI
patched_LdrResolveDelayLoadedAPI
(
PVOID
ParentModuleBase
PVOID
DelayloadDescriptor
PVOID
FailureDllHook
PVOID
FailureSystemHook
PVOID
ThunkAddress
ULONG
Flags
)
{
AutoSuppressStackWalking
suppress
;
return
stub_LdrResolveDelayLoadedAPI
(
ParentModuleBase
DelayloadDescriptor
FailureDllHook
FailureSystemHook
ThunkAddress
Flags
)
;
}
void
InitializeWin64ProfilerHooks
(
)
{
NtDllIntercept
.
Init
(
"
ntdll
.
dll
"
)
;
stub_LdrUnloadDll
.
Set
(
NtDllIntercept
"
LdrUnloadDll
"
&
patched_LdrUnloadDll
)
;
if
(
IsWin8OrLater
(
)
)
{
stub_LdrResolveDelayLoadedAPI
.
Set
(
NtDllIntercept
"
LdrResolveDelayLoadedAPI
"
&
patched_LdrResolveDelayLoadedAPI
)
;
}
}
#
endif
