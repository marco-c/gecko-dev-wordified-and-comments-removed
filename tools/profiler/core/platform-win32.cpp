#
include
<
windows
.
h
>
#
include
<
mmsystem
.
h
>
#
include
<
process
.
h
>
Thread
:
:
tid_t
Thread
:
:
GetCurrentId
(
)
{
return
GetCurrentThreadId
(
)
;
}
class
PlatformData
{
public
:
explicit
PlatformData
(
int
aThreadId
)
:
mProfiledThread
(
OpenThread
(
THREAD_GET_CONTEXT
|
THREAD_SUSPEND_RESUME
|
THREAD_QUERY_INFORMATION
false
aThreadId
)
)
{
MOZ_COUNT_CTOR
(
PlatformData
)
;
}
~
PlatformData
(
)
{
if
(
mProfiledThread
!
=
nullptr
)
{
CloseHandle
(
mProfiledThread
)
;
mProfiledThread
=
nullptr
;
}
MOZ_COUNT_DTOR
(
PlatformData
)
;
}
HANDLE
ProfiledThread
(
)
{
return
mProfiledThread
;
}
private
:
HANDLE
mProfiledThread
;
}
;
uintptr_t
GetThreadHandle
(
PlatformData
*
aData
)
{
return
(
uintptr_t
)
aData
-
>
ProfiledThread
(
)
;
}
static
const
HANDLE
kNoThread
=
INVALID_HANDLE_VALUE
;
static
unsigned
int
__stdcall
ThreadEntry
(
void
*
aArg
)
{
auto
thread
=
static_cast
<
SamplerThread
*
>
(
aArg
)
;
thread
-
>
Run
(
)
;
return
0
;
}
SamplerThread
:
:
SamplerThread
(
PSLockRef
aLock
uint32_t
aActivityGeneration
double
aIntervalMilliseconds
)
:
mActivityGeneration
(
aActivityGeneration
)
mIntervalMicroseconds
(
std
:
:
max
(
1
int
(
floor
(
aIntervalMilliseconds
*
1000
+
0
.
5
)
)
)
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mIntervalMicroseconds
<
10
*
1000
)
{
:
:
timeBeginPeriod
(
mIntervalMicroseconds
/
1000
)
;
}
mThread
=
reinterpret_cast
<
HANDLE
>
(
_beginthreadex
(
nullptr
0
ThreadEntry
this
0
nullptr
)
)
;
if
(
mThread
=
=
0
)
{
MOZ_CRASH
(
"
_beginthreadex
failed
"
)
;
}
}
SamplerThread
:
:
~
SamplerThread
(
)
{
WaitForSingleObject
(
mThread
INFINITE
)
;
if
(
mThread
!
=
kNoThread
)
{
CloseHandle
(
mThread
)
;
}
}
void
SamplerThread
:
:
Stop
(
PSLockRef
aLock
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mIntervalMicroseconds
<
10
*
1000
)
{
:
:
timeEndPeriod
(
mIntervalMicroseconds
/
1000
)
;
}
}
void
SamplerThread
:
:
SleepMicro
(
uint32_t
aMicroseconds
)
{
if
(
mIntervalMicroseconds
>
=
1000
)
{
:
:
Sleep
(
std
:
:
max
(
1u
aMicroseconds
/
1000
)
)
;
}
else
{
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
TimeStamp
end
=
start
+
TimeDuration
:
:
FromMicroseconds
(
aMicroseconds
)
;
if
(
aMicroseconds
>
=
1000
)
{
:
:
Sleep
(
aMicroseconds
/
1000
)
;
}
while
(
TimeStamp
:
:
Now
(
)
<
end
)
{
_mm_pause
(
)
;
}
}
}
void
SamplerThread
:
:
SuspendAndSampleAndResumeThread
(
PSLockRef
aLock
TickSample
&
aSample
)
{
HANDLE
profiled_thread
=
aSample
.
mPlatformData
-
>
ProfiledThread
(
)
;
if
(
profiled_thread
=
=
nullptr
)
return
;
CONTEXT
context
;
memset
(
&
context
0
sizeof
(
context
)
)
;
static
const
DWORD
kSuspendFailed
=
static_cast
<
DWORD
>
(
-
1
)
;
if
(
SuspendThread
(
profiled_thread
)
=
=
kSuspendFailed
)
{
return
;
}
#
if
defined
(
GP_ARCH_amd64
)
context
.
ContextFlags
=
CONTEXT_FULL
;
#
else
context
.
ContextFlags
=
CONTEXT_CONTROL
;
#
endif
if
(
!
GetThreadContext
(
profiled_thread
&
context
)
)
{
ResumeThread
(
profiled_thread
)
;
return
;
}
#
if
defined
(
GP_ARCH_amd64
)
aSample
.
mPC
=
reinterpret_cast
<
Address
>
(
context
.
Rip
)
;
aSample
.
mSP
=
reinterpret_cast
<
Address
>
(
context
.
Rsp
)
;
aSample
.
mFP
=
reinterpret_cast
<
Address
>
(
context
.
Rbp
)
;
#
else
aSample
.
mPC
=
reinterpret_cast
<
Address
>
(
context
.
Eip
)
;
aSample
.
mSP
=
reinterpret_cast
<
Address
>
(
context
.
Esp
)
;
aSample
.
mFP
=
reinterpret_cast
<
Address
>
(
context
.
Ebp
)
;
#
endif
Tick
(
aLock
ActivePS
:
:
Buffer
(
aLock
)
aSample
)
;
ResumeThread
(
profiled_thread
)
;
}
static
void
PlatformInit
(
PSLockRef
aLock
)
{
}
void
TickSample
:
:
PopulateContext
(
)
{
MOZ_ASSERT
(
mIsSynchronous
)
;
CONTEXT
context
;
RtlCaptureContext
(
&
context
)
;
#
if
defined
(
GP_ARCH_amd64
)
mPC
=
reinterpret_cast
<
Address
>
(
context
.
Rip
)
;
mSP
=
reinterpret_cast
<
Address
>
(
context
.
Rsp
)
;
mFP
=
reinterpret_cast
<
Address
>
(
context
.
Rbp
)
;
#
elif
defined
(
GP_ARCH_x86
)
mPC
=
reinterpret_cast
<
Address
>
(
context
.
Eip
)
;
mSP
=
reinterpret_cast
<
Address
>
(
context
.
Esp
)
;
mFP
=
reinterpret_cast
<
Address
>
(
context
.
Ebp
)
;
#
endif
}
