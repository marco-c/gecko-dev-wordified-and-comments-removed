#
ifndef
VTuneProfiler_h
#
define
VTuneProfiler_h
#
ifndef
MOZ_VTUNE_INSTRUMENTATION
#
define
VTUNE_INIT
(
)
#
define
VTUNE_SHUTDOWN
(
)
#
define
VTUNE_TRACING
(
name
kind
)
#
define
VTUNE_REGISTER_THREAD
(
name
)
#
else
#
include
"
GeckoProfiler
.
h
"
#
include
"
vtune
/
ittnotify
.
h
"
#
include
<
stddef
.
h
>
#
include
<
unordered_map
>
#
include
<
string
>
class
VTuneProfiler
{
public
:
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
enum
TracingKind
{
TRACING_EVENT
TRACING_INTERVAL_START
TRACING_INTERVAL_END
}
;
static
void
Trace
(
const
char
*
aName
TracingKind
aKind
)
{
if
(
mInstance
)
{
mInstance
-
>
TraceInternal
(
aName
aKind
)
;
}
}
static
void
RegisterThread
(
const
char
*
aName
)
{
if
(
mInstance
)
{
mInstance
-
>
RegisterThreadInternal
(
aName
)
;
}
}
private
:
void
TraceInternal
(
const
char
*
aName
TracingKind
aKind
)
;
void
RegisterThreadInternal
(
const
char
*
aName
)
;
static
VTuneProfiler
*
mInstance
;
std
:
:
unordered_map
<
std
:
:
string
__itt_event
>
mStrings
;
}
;
#
define
VTUNE_INIT
(
)
VTuneProfiler
:
:
Initialize
(
)
#
define
VTUNE_SHUTDOWN
(
)
VTuneProfiler
:
:
Shutdown
(
)
#
define
VTUNE_TRACING
(
name
kind
)
VTuneProfiler
:
:
Trace
(
name
kind
)
#
define
VTUNE_REGISTER_THREAD
(
name
)
VTuneProfiler
:
:
RegisterThread
(
name
)
#
endif
#
endif
