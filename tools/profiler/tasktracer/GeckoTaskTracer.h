#
ifndef
GECKO_TASK_TRACER_H
#
define
GECKO_TASK_TRACER_H
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
class
nsIRunnable
;
class
nsCString
;
namespace
mozilla
{
class
TimeStamp
;
class
Runnable
;
namespace
tasktracer
{
enum
{
FORKED_AFTER_NUWA
=
1
<
<
0
}
;
enum
SourceEventType
{
#
define
SOURCE_EVENT_NAME
(
x
)
x
#
include
"
SourceEventTypeMap
.
h
"
#
undef
SOURCE_EVENT_NAME
}
;
class
AutoSaveCurTraceInfo
{
uint64_t
mSavedTaskId
;
uint64_t
mSavedSourceEventId
;
SourceEventType
mSavedSourceEventType
;
public
:
AutoSaveCurTraceInfo
(
)
;
~
AutoSaveCurTraceInfo
(
)
;
}
;
class
AutoSourceEvent
:
public
AutoSaveCurTraceInfo
{
public
:
explicit
AutoSourceEvent
(
SourceEventType
aType
)
;
~
AutoSourceEvent
(
)
;
}
;
void
InitTaskTracer
(
uint32_t
aFlags
=
0
)
;
void
ShutdownTaskTracer
(
)
;
void
AddLabel
(
const
char
*
aFormat
.
.
.
)
;
void
StartLogging
(
)
;
void
StopLogging
(
)
;
UniquePtr
<
nsTArray
<
nsCString
>
>
GetLoggedData
(
TimeStamp
aStartTime
)
;
PRTime
GetStartTime
(
)
;
already_AddRefed
<
Runnable
>
CreateTracedRunnable
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
void
FreeTraceInfo
(
)
;
const
char
*
GetJSLabelPrefix
(
)
;
void
GetCurTraceInfo
(
uint64_t
*
aOutSourceEventId
uint64_t
*
aOutParentTaskId
SourceEventType
*
aOutSourceEventType
)
;
}
}
#
endif
