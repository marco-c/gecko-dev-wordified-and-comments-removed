#
ifndef
TRACED_TASK_COMMON_H
#
define
TRACED_TASK_COMMON_H
#
include
"
GeckoTaskTracer
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
tasktracer
{
class
TracedTaskCommon
{
public
:
TracedTaskCommon
(
)
;
TracedTaskCommon
(
const
TracedTaskCommon
&
aSrc
)
:
mSourceEventType
(
aSrc
.
mSourceEventType
)
mSourceEventId
(
aSrc
.
mSourceEventId
)
mParentTaskId
(
aSrc
.
mParentTaskId
)
mTaskId
(
aSrc
.
mTaskId
)
mIsTraceInfoInit
(
aSrc
.
mIsTraceInfoInit
)
{
}
virtual
~
TracedTaskCommon
(
)
;
void
DispatchTask
(
int
aDelayTimeMs
=
0
)
;
void
SetTLSTraceInfo
(
)
;
void
GetTLSTraceInfo
(
)
;
void
ClearTLSTraceInfo
(
)
;
protected
:
void
Init
(
)
;
SourceEventType
mSourceEventType
;
uint64_t
mSourceEventId
;
uint64_t
mParentTaskId
;
uint64_t
mTaskId
;
bool
mIsTraceInfoInit
;
}
;
class
TracedRunnable
:
public
TracedTaskCommon
public
Runnable
{
public
:
NS_DECL_NSIRUNNABLE
TracedRunnable
(
already_AddRefed
<
nsIRunnable
>
&
&
aOriginalObj
)
;
private
:
virtual
~
TracedRunnable
(
)
;
nsCOMPtr
<
nsIRunnable
>
mOriginalObj
;
}
;
class
VirtualTask
:
public
TracedTaskCommon
{
public
:
VirtualTask
(
)
:
TracedTaskCommon
(
)
{
}
VirtualTask
(
const
VirtualTask
&
aSrc
)
:
TracedTaskCommon
(
aSrc
)
{
}
void
Init
(
uintptr_t
*
aVPtr
=
nullptr
)
{
TracedTaskCommon
:
:
Init
(
)
;
if
(
aVPtr
)
{
extern
void
LogVirtualTablePtr
(
uint64_t
aTaskId
uint64_t
aSourceEventId
uintptr_t
*
aVptr
)
;
LogVirtualTablePtr
(
mTaskId
mSourceEventId
aVPtr
)
;
}
DispatchTask
(
)
;
}
class
AutoRunTask
:
public
AutoSaveCurTraceInfo
{
VirtualTask
*
mTask
;
public
:
AutoRunTask
(
VirtualTask
*
aTask
)
;
~
AutoRunTask
(
)
;
}
;
}
;
}
}
#
endif
