from
__future__
import
absolute_import
print_function
from
subprocess
import
Popen
PIPE
import
atexit
import
os
import
platform
import
re
import
sys
import
six
line_re
=
re
.
compile
(
"
#
\
d
+
:
.
+
\
[
.
+
\
+
0x
[
0
-
9A
-
Fa
-
f
]
+
\
]
"
)
fix_stacks
=
None
def
fixSymbols
(
line
jsonMode
=
False
slowWarning
=
False
breakpadSymsDir
=
None
hide_errors
=
False
)
:
    
global
fix_stacks
    
line
=
six
.
ensure_str
(
line
)
    
result
=
line_re
.
search
(
line
)
    
if
result
is
None
:
        
return
line
    
if
not
fix_stacks
:
        
base
=
os
.
environ
.
get
(
            
'
MOZ_FETCHES_DIR
'
            
os
.
environ
.
get
(
                
'
MOZBUILD_STATE_PATH
'
                
os
.
path
.
expanduser
(
'
~
/
.
mozbuild
'
)
            
)
        
)
        
fix_stacks_exe
=
base
+
'
/
fix
-
stacks
/
fix
-
stacks
'
        
if
platform
.
system
(
)
=
=
'
Windows
'
:
            
fix_stacks_exe
=
fix_stacks_exe
+
'
.
exe
'
        
if
not
(
os
.
path
.
isfile
(
fix_stacks_exe
)
and
os
.
access
(
fix_stacks_exe
os
.
X_OK
)
)
:
            
raise
Exception
(
'
cannot
find
fix
-
stacks
;
please
run
.
/
mach
bootstrap
'
)
        
args
=
[
fix_stacks_exe
]
        
if
jsonMode
:
            
args
.
append
(
'
-
j
'
)
        
if
breakpadSymsDir
:
            
here
=
os
.
path
.
dirname
(
__file__
)
            
fileid_exe
=
os
.
path
.
join
(
here
'
fileid
'
)
            
if
platform
.
system
(
)
=
=
'
Windows
'
:
                
fileid_exe
=
fileid_exe
+
'
.
exe
'
            
args
.
append
(
'
-
b
'
)
            
args
.
append
(
breakpadSymsDir
+
"
"
+
fileid_exe
)
        
stderr
=
open
(
os
.
devnull
)
if
hide_errors
else
None
        
fix_stacks
=
Popen
(
args
stdin
=
PIPE
stdout
=
PIPE
stderr
=
stderr
)
        
def
cleanup
(
fix_stacks
)
:
            
fix_stacks
.
stdin
.
close
(
)
            
fix_stacks
.
terminate
(
)
        
atexit
.
register
(
cleanup
fix_stacks
)
        
if
slowWarning
:
            
print
(
"
Initializing
stack
-
fixing
for
the
first
stack
frame
this
may
take
a
while
.
.
.
"
)
    
is_missing_newline
=
not
line
.
endswith
(
'
\
n
'
)
    
if
is_missing_newline
:
        
line
=
line
+
"
\
n
"
    
fix_stacks
.
stdin
.
write
(
line
)
    
fix_stacks
.
stdin
.
flush
(
)
    
out
=
fix_stacks
.
stdout
.
readline
(
)
    
if
is_missing_newline
:
        
out
=
out
[
:
-
1
]
    
return
out
if
__name__
=
=
"
__main__
"
:
    
for
line
in
sys
.
stdin
:
        
sys
.
stdout
.
write
(
fixSymbols
(
line
)
)
