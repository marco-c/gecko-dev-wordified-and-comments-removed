#
ifndef
memory_profiler_CompactTraceTable_h
#
define
memory_profiler_CompactTraceTable_h
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
struct
TrieNode
final
{
uint32_t
parentIdx
;
uint32_t
nameIdx
;
bool
operator
=
=
(
const
TrieNode
t
)
const
{
return
parentIdx
=
=
t
.
parentIdx
&
&
nameIdx
=
=
t
.
nameIdx
;
}
uint32_t
Hash
(
)
const
{
return
HashGeneric
(
parentIdx
nameIdx
)
;
}
}
;
template
<
typename
KeyClass
typename
T
>
class
NodeIndexMap
final
{
public
:
uint32_t
Insert
(
const
T
&
e
)
{
uint32_t
index
=
mMap
.
Count
(
)
;
if
(
!
mMap
.
Get
(
e
&
index
)
)
{
mMap
.
Put
(
e
index
)
;
}
return
index
;
}
nsTArray
<
T
>
Serialize
(
)
const
{
nsTArray
<
T
>
v
;
v
.
SetLength
(
mMap
.
Count
(
)
)
;
for
(
auto
iter
=
mMap
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
v
[
iter
.
Data
(
)
]
=
iter
.
Key
(
)
;
}
return
v
;
}
uint32_t
Size
(
)
const
{
return
mMap
.
Count
(
)
;
}
void
Clear
(
)
{
mMap
.
Clear
(
)
;
}
private
:
nsDataHashtable
<
KeyClass
uint32_t
>
mMap
;
}
;
class
CompactTraceTable
final
{
public
:
CompactTraceTable
(
)
{
mNames
.
Insert
(
nsAutoCString
(
"
(
unknown
)
"
)
)
;
mTraces
.
Insert
(
TrieNode
{
0
0
}
)
;
}
nsTArray
<
nsCString
>
GetNames
(
)
const
{
return
mNames
.
Serialize
(
)
;
}
nsTArray
<
TrieNode
>
GetTraces
(
)
const
{
return
mTraces
.
Serialize
(
)
;
}
uint32_t
Insert
(
const
nsTArray
<
nsCString
>
&
aRawStacktrace
)
{
uint32_t
parent
=
0
;
for
(
auto
&
frame
:
aRawStacktrace
)
{
parent
=
mTraces
.
Insert
(
TrieNode
{
parent
mNames
.
Insert
(
frame
)
}
)
;
}
return
parent
;
}
void
Reset
(
)
{
mNames
.
Clear
(
)
;
mTraces
.
Clear
(
)
;
}
private
:
NodeIndexMap
<
nsCStringHashKey
nsCString
>
mNames
;
NodeIndexMap
<
nsGenericHashKey
<
TrieNode
>
TrieNode
>
mTraces
;
}
;
}
#
endif
