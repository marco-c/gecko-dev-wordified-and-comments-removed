#
include
"
NativeProfilerImpl
.
h
"
#
include
"
UncensoredAllocator
.
h
"
namespace
mozilla
{
NativeProfilerImpl
:
:
NativeProfilerImpl
(
)
{
mLock
=
PR_NewLock
(
)
;
}
NativeProfilerImpl
:
:
~
NativeProfilerImpl
(
)
{
if
(
mLock
)
{
PR_DestroyLock
(
mLock
)
;
}
}
nsTArray
<
nsCString
>
NativeProfilerImpl
:
:
GetNames
(
)
const
{
return
mTraceTable
.
GetNames
(
)
;
}
nsTArray
<
TrieNode
>
NativeProfilerImpl
:
:
GetTraces
(
)
const
{
return
mTraceTable
.
GetTraces
(
)
;
}
const
nsTArray
<
AllocEvent
>
&
NativeProfilerImpl
:
:
GetEvents
(
)
const
{
return
mAllocEvents
;
}
void
NativeProfilerImpl
:
:
reset
(
)
{
mTraceTable
.
Reset
(
)
;
mAllocEvents
.
Clear
(
)
;
mNativeEntries
.
Clear
(
)
;
}
void
NativeProfilerImpl
:
:
sampleNative
(
void
*
addr
uint32_t
size
)
{
AutoUseUncensoredAllocator
ua
;
AutoMPLock
lock
(
mLock
)
;
size_t
nSamples
=
AddBytesSampled
(
size
)
;
if
(
nSamples
>
0
)
{
nsTArray
<
nsCString
>
trace
=
GetStacktrace
(
)
;
AllocEvent
ai
(
mTraceTable
.
Insert
(
trace
)
nSamples
*
mSampleSize
TimeStamp
:
:
Now
(
)
)
;
mNativeEntries
.
Put
(
addr
AllocEntry
(
mAllocEvents
.
Length
(
)
)
)
;
mAllocEvents
.
AppendElement
(
ai
)
;
}
}
void
NativeProfilerImpl
:
:
removeNative
(
void
*
addr
)
{
AutoUseUncensoredAllocator
ua
;
AutoMPLock
lock
(
mLock
)
;
AllocEntry
entry
;
if
(
!
mNativeEntries
.
Get
(
addr
&
entry
)
)
{
return
;
}
AllocEvent
&
oldEvent
=
mAllocEvents
[
entry
.
mEventIdx
]
;
AllocEvent
newEvent
(
oldEvent
.
mTraceIdx
-
oldEvent
.
mSize
TimeStamp
:
:
Now
(
)
)
;
mAllocEvents
.
AppendElement
(
newEvent
)
;
mNativeEntries
.
Remove
(
addr
)
;
}
}
