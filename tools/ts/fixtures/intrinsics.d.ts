declare
global
{
interface
nsID
<
uuid
=
string
>
{
readonly
number
:
uuid
;
}
type
nsJSIID
<
iface
enums
=
{
}
>
=
nsID
&
Constants
<
iface
>
&
enums
&
{
new
(
_
:
never
)
:
void
;
prototype
:
iface
;
}
type
nsIID
=
nsIXPCComponents_Interfaces
[
keyof
nsIXPCComponents_Interfaces
]
;
export
type
nsQIResult
<
iid
>
=
iid
extends
{
prototype
:
infer
U
}
?
U
:
never
;
type
nsresult
=
u32
;
type
double
=
number
;
type
float
=
number
;
type
i16
=
number
;
type
i32
=
number
;
type
i64
=
number
;
type
u16
=
number
;
type
u32
=
number
;
type
u64
=
number
;
type
u8
=
number
;
}
type
InOutParam
<
T
>
=
{
value
:
T
}
;
type
OutParam
<
T
>
=
{
value
?
:
T
}
;
type
Enums
<
enums
>
=
enums
;
type
Callable
<
iface
>
=
iface
|
Extract
<
iface
[
keyof
iface
]
Function
>
type
Constants
<
T
>
=
{
[
K
in
keyof
T
as
IfConst
<
K
T
[
K
]
>
]
:
T
[
K
]
}
;
type
IfConst
<
K
T
>
=
T
extends
number
?
(
number
extends
T
?
never
:
K
)
:
never
;
export
{
}
;
