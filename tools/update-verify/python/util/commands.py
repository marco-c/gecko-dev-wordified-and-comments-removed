"
"
"
Functions
for
running
commands
"
"
"
from
__future__
import
absolute_import
print_function
import
logging
import
os
import
subprocess
import
time
import
six
log
=
logging
.
getLogger
(
__name__
)
TERMINATED_PROCESS_MSG
=
"
timeout
process
terminated
"
def
log_cmd
(
cmd
*
*
kwargs
)
:
    
kwargs
=
kwargs
.
copy
(
)
    
if
"
cwd
"
not
in
kwargs
:
        
kwargs
[
"
cwd
"
]
=
os
.
getcwd
(
)
    
log
.
info
(
"
command
:
START
"
)
    
log
.
info
(
"
command
:
%
s
"
%
subprocess
.
list2cmdline
(
cmd
)
)
    
for
key
value
in
six
.
iteritems
(
kwargs
)
:
        
log
.
info
(
"
command
:
%
s
:
%
s
"
key
str
(
value
)
)
def
merge_env
(
env
)
:
    
new_env
=
os
.
environ
.
copy
(
)
    
new_env
.
update
(
env
)
    
return
new_env
def
run_cmd
(
cmd
*
*
kwargs
)
:
    
"
"
"
Run
cmd
(
a
list
of
arguments
)
.
Raise
subprocess
.
CalledProcessError
if
    
the
command
exits
with
non
-
zero
.
If
the
command
returns
successfully
    
return
0
.
"
"
"
    
log_cmd
(
cmd
*
*
kwargs
)
    
if
"
env
"
in
kwargs
:
        
kwargs
[
"
env
"
]
=
merge_env
(
kwargs
[
"
env
"
]
)
    
try
:
        
t
=
time
.
time
(
)
        
log
.
info
(
"
command
:
output
:
"
)
        
return
subprocess
.
check_call
(
cmd
*
*
kwargs
)
    
except
subprocess
.
CalledProcessError
:
        
log
.
info
(
"
command
:
ERROR
"
exc_info
=
True
)
        
raise
    
finally
:
        
elapsed
=
time
.
time
(
)
-
t
        
log
.
info
(
"
command
:
END
(
%
.
2fs
elapsed
)
\
n
"
elapsed
)
