from
__future__
import
absolute_import
unicode_literals
import
sys
from
mach
.
decorators
import
(
    
CommandArgument
    
CommandProvider
    
Command
)
from
mozbuild
.
base
import
MachCommandBase
MozbuildObject
CommandProvider
class
SearchProvider
(
object
)
:
    
Command
(
'
searchfox
'
category
=
'
misc
'
             
description
=
'
Search
for
something
in
Searchfox
.
'
)
    
CommandArgument
(
'
term
'
nargs
=
'
+
'
help
=
'
Term
(
s
)
to
search
for
.
'
)
    
def
searchfox
(
self
term
)
:
        
import
webbrowser
        
term
=
'
'
.
join
(
term
)
        
uri
=
'
https
:
/
/
searchfox
.
org
/
mozilla
-
central
/
search
?
q
=
%
s
'
%
term
        
webbrowser
.
open_new_tab
(
uri
)
    
Command
(
'
dxr
'
category
=
'
misc
'
             
description
=
'
Search
for
something
in
DXR
.
'
)
    
CommandArgument
(
'
term
'
nargs
=
'
+
'
help
=
'
Term
(
s
)
to
search
for
.
'
)
    
def
dxr
(
self
term
)
:
        
import
webbrowser
        
term
=
'
'
.
join
(
term
)
        
uri
=
'
http
:
/
/
dxr
.
mozilla
.
org
/
mozilla
-
central
/
search
?
q
=
%
s
&
redirect
=
true
'
%
term
        
webbrowser
.
open_new_tab
(
uri
)
    
Command
(
'
mdn
'
category
=
'
misc
'
             
description
=
'
Search
for
something
on
MDN
.
'
)
    
CommandArgument
(
'
term
'
nargs
=
'
+
'
help
=
'
Term
(
s
)
to
search
for
.
'
)
    
def
mdn
(
self
term
)
:
        
import
webbrowser
        
term
=
'
'
.
join
(
term
)
        
uri
=
'
https
:
/
/
developer
.
mozilla
.
org
/
search
?
q
=
%
s
'
%
term
        
webbrowser
.
open_new_tab
(
uri
)
    
Command
(
'
google
'
category
=
'
misc
'
             
description
=
'
Search
for
something
on
Google
.
'
)
    
CommandArgument
(
'
term
'
nargs
=
'
+
'
help
=
'
Term
(
s
)
to
search
for
.
'
)
    
def
google
(
self
term
)
:
        
import
webbrowser
        
term
=
'
'
.
join
(
term
)
        
uri
=
'
https
:
/
/
www
.
google
.
com
/
search
?
q
=
%
s
'
%
term
        
webbrowser
.
open_new_tab
(
uri
)
    
Command
(
'
search
'
category
=
'
misc
'
             
description
=
'
Search
for
something
on
the
Internets
.
'
             
'
This
will
open
4
new
browser
tabs
and
search
for
the
term
on
Google
'
             
'
MDN
DXR
and
Searchfox
.
'
)
    
CommandArgument
(
'
term
'
nargs
=
'
+
'
help
=
'
Term
(
s
)
to
search
for
.
'
)
    
def
search
(
self
term
)
:
        
self
.
google
(
term
)
        
self
.
mdn
(
term
)
        
self
.
dxr
(
term
)
        
self
.
searchfox
(
term
)
CommandProvider
class
UUIDProvider
(
object
)
:
    
Command
(
'
uuid
'
category
=
'
misc
'
             
description
=
'
Generate
a
uuid
.
'
)
    
CommandArgument
(
'
-
-
format
'
'
-
f
'
choices
=
[
'
idl
'
'
cpp
'
'
c
+
+
'
]
                     
help
=
'
Output
format
for
the
generated
uuid
.
'
)
    
def
uuid
(
self
format
=
None
)
:
        
import
uuid
        
u
=
uuid
.
uuid4
(
)
        
if
format
in
[
None
'
idl
'
]
:
            
print
(
u
)
            
if
format
is
None
:
                
print
(
'
'
)
        
if
format
in
[
None
'
cpp
'
'
c
+
+
'
]
:
            
u
=
u
.
hex
            
print
(
'
{
0x
%
s
0x
%
s
0x
%
s
\
\
'
%
(
u
[
0
:
8
]
u
[
8
:
12
]
u
[
12
:
16
]
)
)
            
pairs
=
tuple
(
map
(
lambda
n
:
u
[
n
:
n
+
2
]
range
(
16
32
2
)
)
)
            
print
(
(
'
{
'
+
'
0x
%
s
'
*
7
+
'
0x
%
s
}
}
'
)
%
pairs
)
def
REMOVED
(
cls
)
:
    
"
"
"
Command
no
longer
exists
!
    
This
functionality
is
no
longer
supported
in
mach
.
    
"
"
"
    
return
False
CommandProvider
class
PastebinProvider
(
object
)
:
    
Command
(
'
pastebin
'
category
=
'
misc
'
conditions
=
[
REMOVED
]
)
    
def
pastebin
(
self
)
:
        
pass
def
mozregression_import
(
)
:
    
try
:
        
import
mozregression
.
mach_interface
    
except
ImportError
:
        
return
None
    
return
mozregression
.
mach_interface
def
mozregression_create_parser
(
)
:
    
cmd
=
MozbuildObject
.
from_environment
(
)
    
cmd
.
_activate_virtualenv
(
)
    
mozregression
=
mozregression_import
(
)
    
if
not
mozregression
:
        
cmd
.
virtualenv_manager
.
install_pip_package
(
'
mozregression
'
)
        
print
(
"
mozregression
was
installed
.
please
re
-
run
your
"
              
"
command
.
If
you
keep
getting
this
message
please
"
              
"
manually
run
:
'
pip
install
-
U
mozregression
'
.
"
)
    
else
:
        
release
=
mozregression
.
new_release_on_pypi
(
)
        
if
release
:
            
print
(
release
)
            
cmd
.
virtualenv_manager
.
_run_pip
(
[
                
'
install
'
                
'
mozregression
=
=
%
s
'
%
release
            
]
)
            
print
(
"
mozregression
was
updated
to
version
%
s
.
please
"
                  
"
re
-
run
your
command
.
"
%
release
)
        
else
:
            
return
mozregression
.
parser
(
)
    
sys
.
exit
(
0
)
CommandProvider
class
MozregressionCommand
(
MachCommandBase
)
:
    
Command
(
'
mozregression
'
             
category
=
'
misc
'
             
description
=
(
"
Regression
range
finder
for
nightly
"
                          
"
and
inbound
builds
.
"
)
             
parser
=
mozregression_create_parser
)
    
def
run
(
self
*
*
options
)
:
        
self
.
_activate_virtualenv
(
)
        
mozregression
=
mozregression_import
(
)
        
mozregression
.
run
(
options
)
