ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
const
CHILD_SCRIPT
=
"
chrome
:
/
/
quitter
/
content
/
contentscript
.
js
"
;
function
QuitterObserver
(
)
{
}
QuitterObserver
.
prototype
=
{
classDescription
:
"
Quitter
Observer
for
use
in
testing
.
"
classID
:
Components
.
ID
(
"
{
c235a986
-
5ac1
-
4f28
-
ad73
-
825dae9bad90
}
"
)
contractID
:
"
mozilla
.
org
/
quitter
-
observer
;
1
"
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Components
.
interfaces
.
nsIObserver
]
)
_xpcom_categories
:
[
{
category
:
"
profile
-
after
-
change
"
service
:
true
}
]
isFrameScriptLoaded
:
false
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
profile
-
after
-
change
"
)
{
this
.
init
(
)
;
}
else
if
(
!
this
.
isFrameScriptLoaded
&
&
aTopic
=
=
"
chrome
-
document
-
global
-
created
"
)
{
var
messageManager
=
Cc
[
"
mozilla
.
org
/
globalmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageBroadcaster
)
;
messageManager
.
addMessageListener
(
"
Quitter
.
Quit
"
this
)
;
messageManager
.
loadFrameScript
(
CHILD_SCRIPT
true
)
;
this
.
isFrameScriptLoaded
=
true
;
}
else
if
(
aTopic
=
=
"
xpcom
-
shutdown
"
)
{
this
.
uninit
(
)
;
}
}
init
(
)
{
var
obs
=
Services
.
obs
;
obs
.
addObserver
(
this
"
xpcom
-
shutdown
"
)
;
obs
.
addObserver
(
this
"
chrome
-
document
-
global
-
created
"
)
;
}
uninit
(
)
{
var
obs
=
Services
.
obs
;
obs
.
removeObserver
(
this
"
chrome
-
document
-
global
-
created
"
)
;
}
receiveMessage
(
aMessage
)
{
switch
(
aMessage
.
name
)
{
case
"
Quitter
.
Quit
"
:
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eForceQuit
)
;
break
;
}
}
}
;
const
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
QuitterObserver
]
)
;
