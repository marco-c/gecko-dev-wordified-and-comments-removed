#
ifndef
mozilla_PageloadEvent_h
#
define
mozilla_PageloadEvent_h
#
include
<
cstdint
>
#
include
"
nsString
.
h
"
namespace
IPC
{
template
<
typename
>
struct
ParamTraits
;
}
namespace
mozilla
:
:
glean
:
:
perf
{
struct
PageLoadExtra
;
struct
PageLoadDomainExtra
;
}
#
define
FOR_EACH_PAGELOAD_METRIC
(
_
)
\
_
(
dnsLookupTime
uint32_t
)
\
_
(
documentFeatures
uint32_t
)
\
_
(
fcpTime
uint32_t
)
\
_
(
hasSsd
bool
)
\
_
(
httpVer
uint32_t
)
\
_
(
jsExecTime
uint32_t
)
\
_
(
delazifyTime
uint32_t
)
\
_
(
lcpTime
uint32_t
)
\
_
(
loadTime
uint32_t
)
\
_
(
loadType
nsCString
)
\
_
(
redirectCount
uint32_t
)
\
_
(
redirectTime
uint32_t
)
\
_
(
responseTime
uint32_t
)
\
_
(
sameOriginNav
bool
)
\
_
(
timeToRequestStart
uint32_t
)
\
_
(
tlsHandshakeTime
uint32_t
)
\
_
(
trrDomain
nsCString
)
\
_
(
userFeatures
uint32_t
)
\
_
(
usingWebdriver
bool
)
\
_
(
cacheDisposition
uint32_t
)
namespace
mozilla
:
:
performance
:
:
pageload_event
{
enum
UserFeature
:
uint32_t
{
USING_A11Y
=
1
<
<
0
}
;
enum
DocumentFeature
:
uint32_t
{
FETCH_PRIORITY_IMAGES
=
1
<
<
0
}
;
enum
class
PageloadEventType
{
kNormal
kDomain
kNone
}
;
extern
PageloadEventType
GetPageloadEventType
(
)
;
#
define
DEFINE_METRIC
(
name
type
)
mozilla
:
:
Maybe
<
type
>
name
;
#
define
DEFINE_SETTER
(
name
type
)
\
void
set_
#
#
name
(
const
type
&
value
)
{
this
-
>
name
=
mozilla
:
:
Some
(
value
)
;
}
class
PageloadEventData
{
friend
struct
IPC
:
:
ParamTraits
<
PageloadEventData
>
;
FOR_EACH_PAGELOAD_METRIC
(
DEFINE_METRIC
)
mozilla
:
:
Maybe
<
nsCString
>
mDomain
;
public
:
FOR_EACH_PAGELOAD_METRIC
(
DEFINE_SETTER
)
bool
MaybeSetDomain
(
nsCString
&
aDomain
)
;
bool
HasDomain
(
)
{
return
mDomain
.
isSome
(
)
&
&
!
mDomain
.
value
(
)
.
IsEmpty
(
)
;
}
bool
HasLoadTime
(
)
{
return
loadTime
.
isSome
(
)
;
}
void
SetUserFeature
(
UserFeature
aFeature
)
;
void
SetDocumentFeature
(
DocumentFeature
aFeature
)
;
mozilla
:
:
glean
:
:
perf
:
:
PageLoadExtra
ToPageLoadExtra
(
)
const
;
mozilla
:
:
glean
:
:
perf
:
:
PageLoadDomainExtra
ToPageLoadDomainExtra
(
)
const
;
}
;
#
undef
DEFINE_METRIC
#
undef
ASSIGN_METRIC
}
#
endif
