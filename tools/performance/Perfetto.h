#
ifndef
mozilla_Perfetto_h
#
define
mozilla_Perfetto_h
#
ifdef
MOZ_PERFETTO
#
include
"
perfetto
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
extern
void
InitPerfetto
(
)
;
#
define
PERFETTO_TRACE_EVENT
(
.
.
.
)
TRACE_EVENT
(
__VA_ARGS__
)
#
define
PERFETTO_TRACE_EVENT_BEGIN
(
.
.
.
)
TRACE_EVENT_BEGIN
(
__VA_ARGS__
)
#
define
PERFETTO_TRACE_EVENT_END
(
.
.
.
)
TRACE_EVENT_END
(
__VA_ARGS__
)
namespace
perfetto
{
template
<
>
struct
TraceTimestampTraits
<
mozilla
:
:
TimeStamp
>
{
static
inline
TraceTimestamp
ConvertTimestampToTraceTimeNs
(
const
mozilla
:
:
TimeStamp
&
timestamp
)
{
return
{
protos
:
:
gen
:
:
BuiltinClock
:
:
BUILTIN_CLOCK_MONOTONIC
timestamp
.
RawClockMonotonicNanosecondsSinceBoot
(
)
}
;
}
}
;
}
PERFETTO_DEFINE_CATEGORIES
(
perfetto
:
:
Category
(
"
task
"
)
perfetto
:
:
Category
(
"
usertiming
"
)
)
;
#
else
#
define
PERFETTO_TRACE_EVENT
(
.
.
.
)
\
do
{
\
}
while
(
0
)
#
define
PERFETTO_TRACE_EVENT_BEGIN
(
.
.
.
)
\
do
{
\
}
while
(
0
)
#
define
PERFETTO_TRACE_EVENT_END
(
.
.
.
)
\
do
{
\
}
while
(
0
)
inline
void
InitPerfetto
(
)
{
}
#
endif
#
endif
