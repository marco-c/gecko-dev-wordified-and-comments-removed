namespace
std
{
template
<
typename
>
struct
remove_reference
;
template
<
typename
_Tp
>
struct
remove_reference
{
typedef
_Tp
type
;
}
;
template
<
typename
_Tp
>
struct
remove_reference
<
_Tp
&
>
{
typedef
_Tp
type
;
}
;
template
<
typename
_Tp
>
struct
remove_reference
<
_Tp
&
&
>
{
typedef
_Tp
type
;
}
;
template
<
typename
_Tp
>
constexpr
typename
std
:
:
remove_reference
<
_Tp
>
:
:
type
&
&
move
(
_Tp
&
&
__t
)
;
}
template
<
typename
T
typename
U
>
void
f1
(
U
&
&
SomeU
)
{
T
SomeT
(
std
:
:
move
(
SomeU
)
)
;
}
void
foo
(
)
{
f1
<
int
int
>
(
2
)
;
}
