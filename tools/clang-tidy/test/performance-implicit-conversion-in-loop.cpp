template
<
typename
T
>
struct
Iterator
{
void
operator
+
+
(
)
;
T
operator
*
(
)
;
bool
operator
!
=
(
const
Iterator
&
other
)
;
}
;
template
<
typename
T
>
struct
View
{
T
begin
(
)
;
T
end
(
)
;
}
;
template
<
typename
T
>
class
ImplicitWrapper
{
public
:
ImplicitWrapper
(
const
T
&
t
)
;
}
;
template
<
typename
T
>
class
OperatorWrapper
{
public
:
OperatorWrapper
(
)
=
delete
;
}
;
struct
SimpleClass
{
int
foo
;
operator
OperatorWrapper
<
SimpleClass
>
(
)
;
}
;
typedef
View
<
Iterator
<
SimpleClass
>
>
SimpleView
;
void
ImplicitSimpleClassIterator
(
)
{
for
(
const
ImplicitWrapper
<
SimpleClass
>
&
foo
:
SimpleView
(
)
)
{
}
for
(
const
ImplicitWrapper
<
SimpleClass
>
foo
:
SimpleView
(
)
)
{
}
for
(
ImplicitWrapper
<
SimpleClass
>
foo
:
SimpleView
(
)
)
{
}
}
