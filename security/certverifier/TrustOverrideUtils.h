#
ifndef
TrustOverrides_h
#
define
TrustOverrides_h
#
include
"
X509CertValidity
.
h
"
#
include
"
nsNSSCertificate
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
using
namespace
mozilla
;
struct
DataAndLength
{
const
uint8_t
*
data
;
uint32_t
len
;
}
;
template
<
size_t
T
>
static
bool
CertDNIsInList
(
const
CERTCertificate
*
aCert
const
DataAndLength
(
&
aDnList
)
[
T
]
)
{
MOZ_ASSERT
(
aCert
)
;
if
(
!
aCert
)
{
return
false
;
}
for
(
auto
&
dn
:
aDnList
)
{
if
(
aCert
-
>
derSubject
.
len
=
=
dn
.
len
&
&
mozilla
:
:
ArrayEqual
(
aCert
-
>
derSubject
.
data
dn
.
data
dn
.
len
)
)
{
return
true
;
}
}
return
false
;
}
template
<
size_t
T
>
static
bool
CertSPKIIsInList
(
const
CERTCertificate
*
aCert
const
DataAndLength
(
&
aSpkiList
)
[
T
]
)
{
MOZ_ASSERT
(
aCert
)
;
if
(
!
aCert
)
{
return
false
;
}
for
(
auto
&
spki
:
aSpkiList
)
{
if
(
aCert
-
>
derPublicKey
.
len
=
=
spki
.
len
&
&
mozilla
:
:
ArrayEqual
(
aCert
-
>
derPublicKey
.
data
spki
.
data
spki
.
len
)
)
{
return
true
;
}
}
return
false
;
}
template
<
size_t
T
size_t
R
>
static
bool
CertMatchesStaticData
(
const
CERTCertificate
*
cert
const
unsigned
char
(
&
subject
)
[
T
]
const
unsigned
char
(
&
spki
)
[
R
]
)
{
MOZ_ASSERT
(
cert
)
;
if
(
!
cert
)
{
return
false
;
}
return
cert
-
>
derSubject
.
len
=
=
T
&
&
mozilla
:
:
ArrayEqual
(
cert
-
>
derSubject
.
data
subject
T
)
&
&
cert
-
>
derPublicKey
.
len
=
=
R
&
&
mozilla
:
:
ArrayEqual
(
cert
-
>
derPublicKey
.
data
spki
R
)
;
}
template
<
size_t
T
>
static
nsresult
CheckForSymantecDistrust
(
const
nsTArray
<
RefPtr
<
nsIX509Cert
>
>
&
intCerts
const
nsCOMPtr
<
nsIX509Cert
>
&
eeCert
const
PRTime
&
permitAfterDate
const
DataAndLength
(
&
whitelist
)
[
T
]
bool
&
isDistrusted
)
{
isDistrusted
=
true
;
if
(
permitAfterDate
>
0
)
{
nsCOMPtr
<
nsIX509CertValidity
>
validity
;
nsresult
rv
=
eeCert
-
>
GetValidity
(
getter_AddRefs
(
validity
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
PRTime
notBefore
;
rv
=
validity
-
>
GetNotBefore
(
&
notBefore
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
notBefore
>
=
permitAfterDate
)
{
isDistrusted
=
false
;
return
NS_OK
;
}
}
for
(
const
auto
&
cert
:
intCerts
)
{
UniqueCERTCertificate
nssCert
(
cert
-
>
GetCert
(
)
)
;
if
(
CertSPKIIsInList
(
nssCert
.
get
(
)
whitelist
)
)
{
isDistrusted
=
false
;
break
;
}
}
return
NS_OK
;
}
#
endif
