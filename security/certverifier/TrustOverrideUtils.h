#
ifndef
TrustOverrides_h
#
define
TrustOverrides_h
#
include
"
mozilla
/
PodOperations
.
h
"
struct
DataAndLength
{
const
uint8_t
*
data
;
uint32_t
len
;
}
;
template
<
size_t
T
>
static
bool
CertDNIsInList
(
const
CERTCertificate
*
aCert
const
DataAndLength
(
&
aDnList
)
[
T
]
)
{
MOZ_ASSERT
(
aCert
)
;
if
(
!
aCert
)
{
return
false
;
}
for
(
auto
&
dn
:
aDnList
)
{
if
(
aCert
-
>
derSubject
.
len
=
=
dn
.
len
&
&
mozilla
:
:
PodEqual
(
aCert
-
>
derSubject
.
data
dn
.
data
dn
.
len
)
)
{
return
true
;
}
}
return
false
;
}
template
<
size_t
T
size_t
R
>
static
bool
CertMatchesStaticData
(
const
CERTCertificate
*
cert
const
unsigned
char
(
&
subject
)
[
T
]
const
unsigned
char
(
&
spki
)
[
R
]
)
{
MOZ_ASSERT
(
cert
)
;
if
(
!
cert
)
{
return
false
;
}
return
cert
-
>
derSubject
.
len
=
=
T
&
&
mozilla
:
:
PodEqual
(
cert
-
>
derSubject
.
data
subject
T
)
&
&
cert
-
>
derPublicKey
.
len
=
=
R
&
&
mozilla
:
:
PodEqual
(
cert
-
>
derPublicKey
.
data
spki
R
)
;
}
#
endif
