#
ifndef
NSSCertDBTrustDomain_h
#
define
NSSCertDBTrustDomain_h
#
include
"
CertVerifier
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozpkix
/
pkixtypes
.
h
"
#
include
"
nsICertStorage
.
h
"
#
include
"
nsString
.
h
"
#
include
"
secmodt
.
h
"
namespace
mozilla
{
namespace
psm
{
enum
class
ValidityCheckingMode
{
CheckingOff
=
0
CheckForEV
=
1
}
;
enum
class
NSSDBConfig
{
ReadWrite
=
0
ReadOnly
=
1
}
;
enum
class
PKCS11DBConfig
{
DoNotLoadModules
=
0
LoadModules
=
1
}
;
enum
class
NetscapeStepUpPolicy
:
uint32_t
{
AlwaysMatch
=
0
MatchBefore23August2016
=
1
MatchBefore23August2015
=
2
NeverMatch
=
3
}
;
SECStatus
InitializeNSS
(
const
nsACString
&
dir
NSSDBConfig
nssDbConfig
PKCS11DBConfig
pkcs11DbConfig
)
;
void
DisableMD5
(
)
;
bool
LoadLoadableRoots
(
const
nsCString
&
dir
)
;
bool
LoadOSClientCertsModule
(
const
nsCString
&
dir
)
;
extern
const
char
*
kOSClientCertsModuleName
;
bool
LoadIPCClientCertsModule
(
const
nsCString
&
dir
)
;
extern
const
char
*
kIPCClientCertsModuleName
;
void
UnloadUserModules
(
)
;
nsresult
DefaultServerNicknameForCert
(
const
CERTCertificate
*
cert
nsCString
&
nickname
)
;
pkix
:
:
Result
BuildRevocationCheckArrays
(
pkix
:
:
Input
certDER
pkix
:
:
EndEntityOrCA
endEntityOrCA
nsTArray
<
uint8_t
>
&
issuerBytes
nsTArray
<
uint8_t
>
&
serialBytes
nsTArray
<
uint8_t
>
&
subjectBytes
nsTArray
<
uint8_t
>
&
pubKeyBytes
)
;
void
SaveIntermediateCerts
(
const
nsTArray
<
nsTArray
<
uint8_t
>
>
&
certList
)
;
class
NSSCertDBTrustDomain
:
public
mozilla
:
:
pkix
:
:
TrustDomain
{
public
:
typedef
mozilla
:
:
pkix
:
:
Result
Result
;
enum
OCSPFetching
{
NeverFetchOCSP
=
0
FetchOCSPForDVSoftFail
=
1
FetchOCSPForDVHardFail
=
2
FetchOCSPForEV
=
3
LocalOnlyOCSPForEV
=
4
}
;
NSSCertDBTrustDomain
(
SECTrustType
certDBTrustType
OCSPFetching
ocspFetching
OCSPCache
&
ocspCache
void
*
pinArg
mozilla
:
:
TimeDuration
ocspTimeoutSoft
mozilla
:
:
TimeDuration
ocspTimeoutHard
uint32_t
certShortLifetimeInDays
unsigned
int
minRSABits
ValidityCheckingMode
validityCheckingMode
CertVerifier
:
:
SHA1Mode
sha1Mode
NetscapeStepUpPolicy
netscapeStepUpPolicy
CRLiteMode
crliteMode
uint64_t
crliteCTMergeDelaySeconds
const
OriginAttributes
&
originAttributes
const
Vector
<
mozilla
:
:
pkix
:
:
Input
>
&
thirdPartyRootInputs
const
Vector
<
mozilla
:
:
pkix
:
:
Input
>
&
thirdPartyIntermediateInputs
const
Maybe
<
nsTArray
<
nsTArray
<
uint8_t
>
>
>
&
extraCertificates
nsTArray
<
nsTArray
<
uint8_t
>
>
&
builtChain
PinningTelemetryInfo
*
pinningTelemetryInfo
=
nullptr
const
char
*
hostname
=
nullptr
)
;
virtual
Result
FindIssuer
(
mozilla
:
:
pkix
:
:
Input
encodedIssuerName
IssuerChecker
&
checker
mozilla
:
:
pkix
:
:
Time
time
)
override
;
virtual
Result
GetCertTrust
(
mozilla
:
:
pkix
:
:
EndEntityOrCA
endEntityOrCA
const
mozilla
:
:
pkix
:
:
CertPolicyId
&
policy
mozilla
:
:
pkix
:
:
Input
candidateCertDER
mozilla
:
:
pkix
:
:
TrustLevel
&
trustLevel
)
override
;
virtual
Result
CheckSignatureDigestAlgorithm
(
mozilla
:
:
pkix
:
:
DigestAlgorithm
digestAlg
mozilla
:
:
pkix
:
:
EndEntityOrCA
endEntityOrCA
mozilla
:
:
pkix
:
:
Time
notBefore
)
override
;
virtual
Result
CheckRSAPublicKeyModulusSizeInBits
(
mozilla
:
:
pkix
:
:
EndEntityOrCA
endEntityOrCA
unsigned
int
modulusSizeInBits
)
override
;
virtual
Result
VerifyRSAPKCS1SignedDigest
(
const
mozilla
:
:
pkix
:
:
SignedDigest
&
signedDigest
mozilla
:
:
pkix
:
:
Input
subjectPublicKeyInfo
)
override
;
virtual
Result
CheckECDSACurveIsAcceptable
(
mozilla
:
:
pkix
:
:
EndEntityOrCA
endEntityOrCA
mozilla
:
:
pkix
:
:
NamedCurve
curve
)
override
;
virtual
Result
VerifyECDSASignedDigest
(
const
mozilla
:
:
pkix
:
:
SignedDigest
&
signedDigest
mozilla
:
:
pkix
:
:
Input
subjectPublicKeyInfo
)
override
;
virtual
Result
DigestBuf
(
mozilla
:
:
pkix
:
:
Input
item
mozilla
:
:
pkix
:
:
DigestAlgorithm
digestAlg
uint8_t
*
digestBuf
size_t
digestBufLen
)
override
;
virtual
Result
CheckValidityIsAcceptable
(
mozilla
:
:
pkix
:
:
Time
notBefore
mozilla
:
:
pkix
:
:
Time
notAfter
mozilla
:
:
pkix
:
:
EndEntityOrCA
endEntityOrCA
mozilla
:
:
pkix
:
:
KeyPurposeId
keyPurpose
)
override
;
virtual
Result
NetscapeStepUpMatchesServerAuth
(
mozilla
:
:
pkix
:
:
Time
notBefore
bool
&
matches
)
override
;
virtual
Result
CheckRevocation
(
mozilla
:
:
pkix
:
:
EndEntityOrCA
endEntityOrCA
const
mozilla
:
:
pkix
:
:
CertID
&
certID
mozilla
:
:
pkix
:
:
Time
time
mozilla
:
:
pkix
:
:
Duration
validityDuration
const
mozilla
:
:
pkix
:
:
Input
*
stapledOCSPResponse
const
mozilla
:
:
pkix
:
:
Input
*
aiaExtension
const
mozilla
:
:
pkix
:
:
Input
*
sctExtension
)
override
;
virtual
Result
IsChainValid
(
const
mozilla
:
:
pkix
:
:
DERArray
&
certChain
mozilla
:
:
pkix
:
:
Time
time
const
mozilla
:
:
pkix
:
:
CertPolicyId
&
requiredPolicy
)
override
;
virtual
void
NoteAuxiliaryExtension
(
mozilla
:
:
pkix
:
:
AuxiliaryExtension
extension
mozilla
:
:
pkix
:
:
Input
extensionData
)
override
;
void
ResetAccumulatedState
(
)
;
CertVerifier
:
:
OCSPStaplingStatus
GetOCSPStaplingStatus
(
)
const
{
return
mOCSPStaplingStatus
;
}
mozilla
:
:
pkix
:
:
Input
GetSCTListFromCertificate
(
)
const
;
mozilla
:
:
pkix
:
:
Input
GetSCTListFromOCSPStapling
(
)
const
;
bool
GetIsErrorDueToDistrustedCAPolicy
(
)
const
;
private
:
Result
CheckCRLiteStash
(
const
nsTArray
<
uint8_t
>
&
issuerSubjectPublicKeyInfoBytes
const
nsTArray
<
uint8_t
>
&
serialNumberBytes
)
;
Result
CheckCRLite
(
const
nsTArray
<
uint8_t
>
&
issuerBytes
const
nsTArray
<
uint8_t
>
&
issuerSubjectPublicKeyInfoBytes
const
nsTArray
<
uint8_t
>
&
serialNumberBytes
uint64_t
earliestSCTTimestamp
bool
&
filterCoversCertificate
)
;
enum
EncodedResponseSource
{
ResponseIsFromNetwork
=
1
ResponseWasStapled
=
2
}
;
Result
VerifyAndMaybeCacheEncodedOCSPResponse
(
const
mozilla
:
:
pkix
:
:
CertID
&
certID
mozilla
:
:
pkix
:
:
Time
time
uint16_t
maxLifetimeInDays
mozilla
:
:
pkix
:
:
Input
encodedResponse
EncodedResponseSource
responseSource
bool
&
expired
)
;
TimeDuration
GetOCSPTimeout
(
)
const
;
Result
SynchronousCheckRevocationWithServer
(
const
mozilla
:
:
pkix
:
:
CertID
&
certID
const
nsCString
&
aiaLocation
mozilla
:
:
pkix
:
:
Time
time
uint16_t
maxOCSPLifetimeInDays
const
Result
cachedResponseResult
const
Result
stapledOCSPResponseResult
const
bool
crliteFilterCoversCertificate
const
Result
crliteResult
)
;
Result
HandleOCSPFailure
(
const
Result
cachedResponseResult
const
Result
stapledOCSPResponseResult
const
Result
error
)
;
const
SECTrustType
mCertDBTrustType
;
const
OCSPFetching
mOCSPFetching
;
OCSPCache
&
mOCSPCache
;
void
*
mPinArg
;
const
mozilla
:
:
TimeDuration
mOCSPTimeoutSoft
;
const
mozilla
:
:
TimeDuration
mOCSPTimeoutHard
;
const
uint32_t
mCertShortLifetimeInDays
;
const
unsigned
int
mMinRSABits
;
ValidityCheckingMode
mValidityCheckingMode
;
CertVerifier
:
:
SHA1Mode
mSHA1Mode
;
NetscapeStepUpPolicy
mNetscapeStepUpPolicy
;
CRLiteMode
mCRLiteMode
;
uint64_t
mCRLiteCTMergeDelaySeconds
;
bool
mSawDistrustedCAByPolicyError
;
const
OriginAttributes
&
mOriginAttributes
;
const
Vector
<
mozilla
:
:
pkix
:
:
Input
>
&
mThirdPartyRootInputs
;
const
Vector
<
mozilla
:
:
pkix
:
:
Input
>
&
mThirdPartyIntermediateInputs
;
const
Maybe
<
nsTArray
<
nsTArray
<
uint8_t
>
>
>
&
mExtraCertificates
;
nsTArray
<
nsTArray
<
uint8_t
>
>
&
mBuiltChain
;
PinningTelemetryInfo
*
mPinningTelemetryInfo
;
const
char
*
mHostname
;
nsCOMPtr
<
nsICertStorage
>
mCertStorage
;
CertVerifier
:
:
OCSPStaplingStatus
mOCSPStaplingStatus
;
UniqueSECItem
mSCTListFromCertificate
;
UniqueSECItem
mSCTListFromOCSPStapling
;
UniqueSECMODModule
mBuiltInRootsModule
;
}
;
}
}
#
endif
