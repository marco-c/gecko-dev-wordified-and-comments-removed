#
include
"
CTLogVerifier
.
h
"
#
include
"
CTObjectsExtractor
.
h
"
#
include
"
CTSerialization
.
h
"
#
include
"
CTTestUtils
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
nss
.
h
"
namespace
mozilla
{
namespace
ct
{
using
namespace
pkix
;
class
CTObjectsExtractorTest
:
public
:
:
testing
:
:
Test
{
public
:
void
SetUp
(
)
override
{
MOZ_RELEASE_ASSERT
(
NSS_NoDB_Init
(
nullptr
)
=
=
SECSuccess
)
;
mTestCert
=
GetDEREncodedX509Cert
(
)
;
mEmbeddedCert
=
GetDEREncodedTestEmbeddedCert
(
)
;
mCaCert
=
GetDEREncodedCACert
(
)
;
mCaCertSPKI
=
ExtractCertSPKI
(
mCaCert
)
;
Buffer
logPublicKey
=
GetTestPublicKey
(
)
;
ASSERT_EQ
(
Success
mLog
.
Init
(
InputForBuffer
(
logPublicKey
)
)
)
;
}
protected
:
Buffer
mTestCert
;
Buffer
mEmbeddedCert
;
Buffer
mCaCert
;
Buffer
mCaCertSPKI
;
CTLogVerifier
mLog
;
}
;
TEST_F
(
CTObjectsExtractorTest
ExtractPrecert
)
{
LogEntry
entry
;
ASSERT_EQ
(
Success
GetPrecertLogEntry
(
InputForBuffer
(
mEmbeddedCert
)
InputForBuffer
(
mCaCertSPKI
)
entry
)
)
;
EXPECT_EQ
(
LogEntry
:
:
Type
:
:
Precert
entry
.
type
)
;
EXPECT_TRUE
(
entry
.
leafCertificate
.
empty
(
)
)
;
EXPECT_EQ
(
GetDefaultIssuerKeyHash
(
)
entry
.
issuerKeyHash
)
;
EXPECT_EQ
(
GetDEREncodedTestTbsCert
(
)
entry
.
tbsCertificate
)
;
}
TEST_F
(
CTObjectsExtractorTest
ExtractOrdinaryX509Cert
)
{
LogEntry
entry
;
ASSERT_EQ
(
Success
GetX509LogEntry
(
InputForBuffer
(
mTestCert
)
entry
)
)
;
EXPECT_EQ
(
LogEntry
:
:
Type
:
:
X509
entry
.
type
)
;
EXPECT_TRUE
(
entry
.
tbsCertificate
.
empty
(
)
)
;
EXPECT_TRUE
(
entry
.
issuerKeyHash
.
empty
(
)
)
;
EXPECT_EQ
(
718U
entry
.
leafCertificate
.
length
(
)
)
;
}
TEST_F
(
CTObjectsExtractorTest
ComplementarySCTVerifies
)
{
SignedCertificateTimestamp
sct
;
GetX509CertSCT
(
sct
)
;
LogEntry
entry
;
ASSERT_EQ
(
Success
GetX509LogEntry
(
InputForBuffer
(
mTestCert
)
entry
)
)
;
EXPECT_EQ
(
Success
mLog
.
Verify
(
entry
sct
)
)
;
}
}
}
