#
ifndef
mozilla_psm__CertVerifier_h
#
define
mozilla_psm__CertVerifier_h
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
pkix
/
pkixtypes
.
h
"
#
include
"
OCSPCache
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
namespace
mozilla
{
namespace
psm
{
enum
class
KeySizeStatus
{
NeverChecked
=
0
LargeMinimumSucceeded
=
1
CompatibilityRisk
=
2
AlreadyBad
=
3
}
;
enum
class
SHA1ModeResult
{
NeverChecked
=
0
SucceededWithoutSHA1
=
1
SucceededWithSHA1Before2016
=
2
SucceededWithImportedRoot
=
3
SucceededWithSHA1
=
4
Failed
=
5
}
;
class
PinningTelemetryInfo
{
public
:
bool
accumulateResult
;
Telemetry
:
:
ID
certPinningResultHistogram
;
int32_t
certPinningResultBucket
;
bool
accumulateForRoot
;
int32_t
rootBucket
;
void
Reset
(
)
{
accumulateForRoot
=
false
;
accumulateResult
=
false
;
}
}
;
class
CertVerifier
{
public
:
typedef
unsigned
int
Flags
;
static
const
Flags
FLAG_LOCAL_ONLY
;
static
const
Flags
FLAG_MUST_BE_EV
;
static
const
Flags
FLAG_TLS_IGNORE_STATUS_REQUEST
;
enum
OCSPStaplingStatus
{
OCSP_STAPLING_NEVER_CHECKED
=
0
OCSP_STAPLING_GOOD
=
1
OCSP_STAPLING_NONE
=
2
OCSP_STAPLING_EXPIRED
=
3
OCSP_STAPLING_INVALID
=
4
}
;
SECStatus
VerifyCert
(
CERTCertificate
*
cert
SECCertificateUsage
usage
mozilla
:
:
pkix
:
:
Time
time
void
*
pinArg
const
char
*
hostname
ScopedCERTCertList
&
builtChain
Flags
flags
=
0
const
SECItem
*
stapledOCSPResponse
=
nullptr
SECOidTag
*
evOidPolicy
=
nullptr
OCSPStaplingStatus
*
ocspStaplingStatus
=
nullptr
KeySizeStatus
*
keySizeStatus
=
nullptr
SHA1ModeResult
*
sha1ModeResult
=
nullptr
PinningTelemetryInfo
*
pinningTelemetryInfo
=
nullptr
)
;
SECStatus
VerifySSLServerCert
(
CERTCertificate
*
peerCert
const
SECItem
*
stapledOCSPResponse
mozilla
:
:
pkix
:
:
Time
time
void
*
pinarg
const
char
*
hostname
ScopedCERTCertList
&
builtChain
bool
saveIntermediatesInPermanentDatabase
=
false
Flags
flags
=
0
SECOidTag
*
evOidPolicy
=
nullptr
OCSPStaplingStatus
*
ocspStaplingStatus
=
nullptr
KeySizeStatus
*
keySizeStatus
=
nullptr
SHA1ModeResult
*
sha1ModeResult
=
nullptr
PinningTelemetryInfo
*
pinningTelemetryInfo
=
nullptr
)
;
enum
PinningMode
{
pinningDisabled
=
0
pinningAllowUserCAMITM
=
1
pinningStrict
=
2
pinningEnforceTestMode
=
3
}
;
enum
class
SHA1Mode
{
Allowed
=
0
Forbidden
=
1
Before2016
=
2
ImportedRoot
=
3
}
;
enum
OcspDownloadConfig
{
ocspOff
=
0
ocspOn
=
1
ocspEVOnly
=
2
}
;
enum
OcspStrictConfig
{
ocspRelaxed
=
0
ocspStrict
}
;
enum
OcspGetConfig
{
ocspGetDisabled
=
0
ocspGetEnabled
=
1
}
;
CertVerifier
(
OcspDownloadConfig
odc
OcspStrictConfig
osc
OcspGetConfig
ogc
uint32_t
certShortLifetimeInDays
PinningMode
pinningMode
SHA1Mode
sha1Mode
)
;
~
CertVerifier
(
)
;
void
ClearOCSPCache
(
)
{
mOCSPCache
.
Clear
(
)
;
}
const
OcspDownloadConfig
mOCSPDownloadConfig
;
const
bool
mOCSPStrict
;
const
bool
mOCSPGETEnabled
;
const
uint32_t
mCertShortLifetimeInDays
;
const
PinningMode
mPinningMode
;
const
SHA1Mode
mSHA1Mode
;
private
:
OCSPCache
mOCSPCache
;
bool
SHA1ModeMoreRestrictiveThanGivenMode
(
SHA1Mode
mode
)
;
}
;
void
InitCertVerifierLog
(
)
;
mozilla
:
:
pkix
:
:
Result
IsCertBuiltInRoot
(
CERTCertificate
*
cert
bool
&
result
)
;
mozilla
:
:
pkix
:
:
Result
CertListContainsExpectedKeys
(
const
CERTCertList
*
certList
const
char
*
hostname
mozilla
:
:
pkix
:
:
Time
time
CertVerifier
:
:
PinningMode
pinningMode
)
;
}
}
#
endif
