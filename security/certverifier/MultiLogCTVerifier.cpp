#
include
"
MultiLogCTVerifier
.
h
"
#
include
"
CTObjectsExtractor
.
h
"
#
include
"
CTSerialization
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Move
.
h
"
namespace
mozilla
{
namespace
ct
{
using
namespace
mozilla
:
:
pkix
;
static
Result
StoreVerifiedSct
(
CTVerifyResult
&
result
VerifiedSCT
&
&
verifiedSct
VerifiedSCT
:
:
Status
status
)
{
verifiedSct
.
status
=
status
;
if
(
!
result
.
verifiedScts
.
append
(
Move
(
verifiedSct
)
)
)
{
return
Result
:
:
FATAL_ERROR_NO_MEMORY
;
}
return
Success
;
}
Result
MultiLogCTVerifier
:
:
AddLog
(
CTLogVerifier
&
&
log
)
{
if
(
!
mLogs
.
append
(
Move
(
log
)
)
)
{
return
Result
:
:
FATAL_ERROR_NO_MEMORY
;
}
return
Success
;
}
Result
MultiLogCTVerifier
:
:
Verify
(
Input
cert
Input
issuerSubjectPublicKeyInfo
Input
sctListFromCert
Input
sctListFromOCSPResponse
Input
sctListFromTLSExtension
Time
time
CTVerifyResult
&
result
)
{
MOZ_ASSERT
(
cert
.
GetLength
(
)
>
0
)
;
result
.
Reset
(
)
;
Result
rv
;
if
(
issuerSubjectPublicKeyInfo
.
GetLength
(
)
>
0
&
&
sctListFromCert
.
GetLength
(
)
>
0
)
{
LogEntry
precertEntry
;
rv
=
GetPrecertLogEntry
(
cert
issuerSubjectPublicKeyInfo
precertEntry
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
rv
=
VerifySCTs
(
sctListFromCert
precertEntry
VerifiedSCT
:
:
Origin
:
:
Embedded
time
result
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
}
LogEntry
x509Entry
;
rv
=
GetX509LogEntry
(
cert
x509Entry
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
if
(
sctListFromOCSPResponse
.
GetLength
(
)
>
0
)
{
rv
=
VerifySCTs
(
sctListFromOCSPResponse
x509Entry
VerifiedSCT
:
:
Origin
:
:
OCSPResponse
time
result
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
}
if
(
sctListFromTLSExtension
.
GetLength
(
)
>
0
)
{
rv
=
VerifySCTs
(
sctListFromTLSExtension
x509Entry
VerifiedSCT
:
:
Origin
:
:
TLSExtension
time
result
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
}
return
Success
;
}
Result
MultiLogCTVerifier
:
:
VerifySCTs
(
Input
encodedSctList
const
LogEntry
&
expectedEntry
VerifiedSCT
:
:
Origin
origin
Time
time
CTVerifyResult
&
result
)
{
Reader
listReader
;
Result
rv
=
DecodeSCTList
(
encodedSctList
listReader
)
;
if
(
rv
!
=
Success
)
{
result
.
decodingErrors
+
+
;
return
Success
;
}
while
(
!
listReader
.
AtEnd
(
)
)
{
Input
encodedSct
;
rv
=
ReadSCTListItem
(
listReader
encodedSct
)
;
if
(
rv
!
=
Success
)
{
result
.
decodingErrors
+
+
;
return
Success
;
}
Reader
encodedSctReader
(
encodedSct
)
;
SignedCertificateTimestamp
sct
;
rv
=
DecodeSignedCertificateTimestamp
(
encodedSctReader
sct
)
;
if
(
rv
!
=
Success
)
{
result
.
decodingErrors
+
+
;
continue
;
}
rv
=
VerifySingleSCT
(
Move
(
sct
)
expectedEntry
origin
time
result
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
}
return
Success
;
}
Result
MultiLogCTVerifier
:
:
VerifySingleSCT
(
SignedCertificateTimestamp
&
&
sct
const
LogEntry
&
expectedEntry
VerifiedSCT
:
:
Origin
origin
Time
time
CTVerifyResult
&
result
)
{
VerifiedSCT
verifiedSct
;
verifiedSct
.
origin
=
origin
;
verifiedSct
.
sct
=
Move
(
sct
)
;
CTLogVerifier
*
matchingLog
=
nullptr
;
for
(
auto
&
log
:
mLogs
)
{
if
(
log
.
keyId
(
)
=
=
verifiedSct
.
sct
.
logId
)
{
matchingLog
=
&
log
;
break
;
}
}
if
(
!
matchingLog
)
{
return
StoreVerifiedSct
(
result
Move
(
verifiedSct
)
VerifiedSCT
:
:
Status
:
:
UnknownLog
)
;
}
if
(
!
matchingLog
-
>
SignatureParametersMatch
(
verifiedSct
.
sct
.
signature
)
)
{
return
StoreVerifiedSct
(
result
Move
(
verifiedSct
)
VerifiedSCT
:
:
Status
:
:
InvalidSignature
)
;
}
Result
rv
=
matchingLog
-
>
Verify
(
expectedEntry
verifiedSct
.
sct
)
;
if
(
rv
!
=
Success
)
{
if
(
rv
=
=
Result
:
:
ERROR_BAD_SIGNATURE
)
{
return
StoreVerifiedSct
(
result
Move
(
verifiedSct
)
VerifiedSCT
:
:
Status
:
:
InvalidSignature
)
;
}
return
rv
;
}
Time
sctTime
=
TimeFromEpochInSeconds
(
(
verifiedSct
.
sct
.
timestamp
+
999u
)
/
1000u
)
;
if
(
sctTime
>
time
)
{
return
StoreVerifiedSct
(
result
Move
(
verifiedSct
)
VerifiedSCT
:
:
Status
:
:
InvalidTimestamp
)
;
}
return
StoreVerifiedSct
(
result
Move
(
verifiedSct
)
VerifiedSCT
:
:
Status
:
:
Valid
)
;
}
}
}
