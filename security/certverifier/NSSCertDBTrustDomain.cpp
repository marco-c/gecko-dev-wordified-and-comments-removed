#
include
"
NSSCertDBTrustDomain
.
h
"
#
include
<
stdint
.
h
>
#
include
<
utility
>
#
include
"
CRLiteTimestamp
.
h
"
#
include
"
ExtendedValidation
.
h
"
#
include
"
MultiLogCTVerifier
.
h
"
#
include
"
NSSErrorsService
.
h
"
#
include
"
PublicKeyPinningService
.
h
"
#
include
"
cert
.
h
"
#
include
"
cert_storage
/
src
/
cert_storage
.
h
"
#
include
"
certdb
.
h
"
#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozpkix
/
Result
.
h
"
#
include
"
mozpkix
/
pkix
.
h
"
#
include
"
mozpkix
/
pkixnss
.
h
"
#
include
"
mozpkix
/
pkixutil
.
h
"
#
include
"
nsCRTGlue
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsNSSCertHelper
.
h
"
#
include
"
nsNSSCertificate
.
h
"
#
include
"
nsNSSCertificateDB
.
h
"
#
include
"
nsNSSIOLayer
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nss
.
h
"
#
include
"
pk11pub
.
h
"
#
include
"
prerror
.
h
"
#
include
"
secder
.
h
"
#
include
"
secerr
.
h
"
#
ifdef
MOZ_WIDGET_COCOA
#
include
"
nsCocoaFeatures
.
h
"
#
endif
#
include
"
TrustOverrideUtils
.
h
"
#
include
"
TrustOverride
-
AppleGoogleDigiCertData
.
inc
"
#
include
"
TrustOverride
-
SymantecData
.
inc
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
ct
;
using
namespace
mozilla
:
:
pkix
;
extern
LazyLogModule
gCertVerifierLog
;
static
const
uint64_t
ServerFailureDelaySeconds
=
5
*
60
;
namespace
mozilla
{
namespace
psm
{
NSSCertDBTrustDomain
:
:
NSSCertDBTrustDomain
(
SECTrustType
certDBTrustType
OCSPFetching
ocspFetching
OCSPCache
&
ocspCache
void
*
pinArg
TimeDuration
ocspTimeoutSoft
TimeDuration
ocspTimeoutHard
uint32_t
certShortLifetimeInDays
unsigned
int
minRSABits
ValidityCheckingMode
validityCheckingMode
NetscapeStepUpPolicy
netscapeStepUpPolicy
CRLiteMode
crliteMode
const
OriginAttributes
&
originAttributes
const
Vector
<
Input
>
&
thirdPartyRootInputs
const
Vector
<
Input
>
&
thirdPartyIntermediateInputs
const
Maybe
<
nsTArray
<
nsTArray
<
uint8_t
>
>
>
&
extraCertificates
nsTArray
<
nsTArray
<
uint8_t
>
>
&
builtChain
PinningTelemetryInfo
*
pinningTelemetryInfo
const
char
*
hostname
)
:
mCertDBTrustType
(
certDBTrustType
)
mOCSPFetching
(
ocspFetching
)
mOCSPCache
(
ocspCache
)
mPinArg
(
pinArg
)
mOCSPTimeoutSoft
(
ocspTimeoutSoft
)
mOCSPTimeoutHard
(
ocspTimeoutHard
)
mCertShortLifetimeInDays
(
certShortLifetimeInDays
)
mMinRSABits
(
minRSABits
)
mValidityCheckingMode
(
validityCheckingMode
)
mNetscapeStepUpPolicy
(
netscapeStepUpPolicy
)
mCRLiteMode
(
crliteMode
)
mSawDistrustedCAByPolicyError
(
false
)
mOriginAttributes
(
originAttributes
)
mThirdPartyRootInputs
(
thirdPartyRootInputs
)
mThirdPartyIntermediateInputs
(
thirdPartyIntermediateInputs
)
mExtraCertificates
(
extraCertificates
)
mBuiltChain
(
builtChain
)
mIsBuiltChainRootBuiltInRoot
(
false
)
mPinningTelemetryInfo
(
pinningTelemetryInfo
)
mHostname
(
hostname
)
mCertStorage
(
do_GetService
(
NS_CERT_STORAGE_CID
)
)
mOCSPStaplingStatus
(
CertVerifier
:
:
OCSP_STAPLING_NEVER_CHECKED
)
mSCTListFromCertificate
(
)
mSCTListFromOCSPStapling
(
)
mBuiltInRootsModule
(
SECMOD_FindModule
(
kRootModuleName
)
)
{
}
static
void
FindRootsWithSubject
(
UniqueSECMODModule
&
rootsModule
SECItem
subject
nsTArray
<
nsTArray
<
uint8_t
>
>
&
roots
)
{
MOZ_ASSERT
(
rootsModule
)
;
AutoSECMODListReadLock
lock
;
for
(
int
slotIndex
=
0
;
slotIndex
<
rootsModule
-
>
slotCount
;
slotIndex
+
+
)
{
CERTCertificateList
*
rawResults
=
nullptr
;
if
(
PK11_FindRawCertsWithSubject
(
rootsModule
-
>
slots
[
slotIndex
]
&
subject
&
rawResults
)
!
=
SECSuccess
)
{
continue
;
}
if
(
!
rawResults
)
{
continue
;
}
UniqueCERTCertificateList
results
(
rawResults
)
;
for
(
int
certIndex
=
0
;
certIndex
<
results
-
>
len
;
certIndex
+
+
)
{
nsTArray
<
uint8_t
>
root
;
root
.
AppendElements
(
results
-
>
certs
[
certIndex
]
.
data
results
-
>
certs
[
certIndex
]
.
len
)
;
roots
.
AppendElement
(
std
:
:
move
(
root
)
)
;
}
}
}
static
bool
ShouldSkipSelfSignedNonTrustAnchor
(
TrustDomain
&
trustDomain
Input
certDER
)
{
BackCert
cert
(
certDER
EndEntityOrCA
:
:
MustBeCA
nullptr
)
;
if
(
cert
.
Init
(
)
!
=
Success
)
{
return
false
;
}
if
(
!
InputsAreEqual
(
cert
.
GetSubject
(
)
cert
.
GetIssuer
(
)
)
)
{
return
false
;
}
TrustLevel
trust
;
if
(
trustDomain
.
GetCertTrust
(
EndEntityOrCA
:
:
MustBeCA
CertPolicyId
:
:
anyPolicy
certDER
trust
)
!
=
Success
)
{
return
false
;
}
if
(
trust
!
=
TrustLevel
:
:
InheritsTrust
)
{
return
false
;
}
if
(
VerifySignedData
(
trustDomain
cert
.
GetSignedData
(
)
cert
.
GetSubjectPublicKeyInfo
(
)
)
!
=
Success
)
{
return
false
;
}
return
true
;
}
static
Result
CheckCandidates
(
TrustDomain
&
trustDomain
TrustDomain
:
:
IssuerChecker
&
checker
nsTArray
<
Input
>
&
candidates
Input
*
nameConstraintsInputPtr
bool
&
keepGoing
)
{
for
(
Input
candidate
:
candidates
)
{
if
(
ShouldSkipSelfSignedNonTrustAnchor
(
trustDomain
candidate
)
)
{
continue
;
}
Result
rv
=
checker
.
Check
(
candidate
nameConstraintsInputPtr
keepGoing
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
if
(
!
keepGoing
)
{
return
Success
;
}
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
FindIssuer
(
Input
encodedIssuerName
IssuerChecker
&
checker
Time
)
{
SECItem
encodedIssuerNameItem
=
UnsafeMapInputToSECItem
(
encodedIssuerName
)
;
ScopedAutoSECItem
nameConstraints
;
Input
nameConstraintsInput
;
Input
*
nameConstraintsInputPtr
=
nullptr
;
SECStatus
srv
=
CERT_GetImposedNameConstraints
(
&
encodedIssuerNameItem
&
nameConstraints
)
;
if
(
srv
=
=
SECSuccess
)
{
if
(
nameConstraintsInput
.
Init
(
nameConstraints
.
data
nameConstraints
.
len
)
!
=
Success
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
nameConstraintsInputPtr
=
&
nameConstraintsInput
;
}
else
if
(
PR_GetError
(
)
!
=
SEC_ERROR_EXTENSION_NOT_FOUND
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
nsTArray
<
Input
>
geckoRootCandidates
;
nsTArray
<
Input
>
geckoIntermediateCandidates
;
if
(
!
mCertStorage
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
nsTArray
<
uint8_t
>
subject
;
subject
.
AppendElements
(
encodedIssuerName
.
UnsafeGetData
(
)
encodedIssuerName
.
GetLength
(
)
)
;
nsTArray
<
nsTArray
<
uint8_t
>
>
certs
;
nsresult
rv
=
mCertStorage
-
>
FindCertsBySubject
(
subject
certs
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
for
(
auto
&
cert
:
certs
)
{
Input
certDER
;
Result
rv
=
certDER
.
Init
(
cert
.
Elements
(
)
cert
.
Length
(
)
)
;
if
(
rv
!
=
Success
)
{
continue
;
}
geckoIntermediateCandidates
.
AppendElement
(
std
:
:
move
(
certDER
)
)
;
}
nsTArray
<
nsTArray
<
uint8_t
>
>
builtInRoots
;
if
(
mBuiltInRootsModule
)
{
FindRootsWithSubject
(
mBuiltInRootsModule
encodedIssuerNameItem
builtInRoots
)
;
for
(
const
auto
&
root
:
builtInRoots
)
{
Input
rootInput
;
Result
rv
=
rootInput
.
Init
(
root
.
Elements
(
)
root
.
Length
(
)
)
;
if
(
rv
!
=
Success
)
{
continue
;
}
geckoRootCandidates
.
AppendElement
(
rootInput
)
;
}
}
else
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
:
FindIssuer
:
no
built
-
in
roots
module
"
)
)
;
}
for
(
const
auto
&
thirdPartyRootInput
:
mThirdPartyRootInputs
)
{
BackCert
root
(
thirdPartyRootInput
EndEntityOrCA
:
:
MustBeCA
nullptr
)
;
Result
rv
=
root
.
Init
(
)
;
if
(
rv
!
=
Success
)
{
continue
;
}
if
(
!
InputsAreEqual
(
encodedIssuerName
root
.
GetSubject
(
)
)
)
{
continue
;
}
geckoRootCandidates
.
AppendElement
(
thirdPartyRootInput
)
;
}
for
(
const
auto
&
thirdPartyIntermediateInput
:
mThirdPartyIntermediateInputs
)
{
BackCert
intermediate
(
thirdPartyIntermediateInput
EndEntityOrCA
:
:
MustBeCA
nullptr
)
;
Result
rv
=
intermediate
.
Init
(
)
;
if
(
rv
!
=
Success
)
{
continue
;
}
if
(
!
InputsAreEqual
(
encodedIssuerName
intermediate
.
GetSubject
(
)
)
)
{
continue
;
}
geckoIntermediateCandidates
.
AppendElement
(
thirdPartyIntermediateInput
)
;
}
if
(
mExtraCertificates
.
isSome
(
)
)
{
for
(
const
auto
&
extraCert
:
*
mExtraCertificates
)
{
Input
certInput
;
Result
rv
=
certInput
.
Init
(
extraCert
.
Elements
(
)
extraCert
.
Length
(
)
)
;
if
(
rv
!
=
Success
)
{
continue
;
}
BackCert
cert
(
certInput
EndEntityOrCA
:
:
MustBeCA
nullptr
)
;
rv
=
cert
.
Init
(
)
;
if
(
rv
!
=
Success
)
{
continue
;
}
if
(
!
InputsAreEqual
(
encodedIssuerName
cert
.
GetSubject
(
)
)
)
{
continue
;
}
geckoIntermediateCandidates
.
AppendElement
(
certInput
)
;
}
}
geckoRootCandidates
.
AppendElements
(
std
:
:
move
(
geckoIntermediateCandidates
)
)
;
bool
keepGoing
=
true
;
Result
result
=
CheckCandidates
(
*
this
checker
geckoRootCandidates
nameConstraintsInputPtr
keepGoing
)
;
if
(
result
!
=
Success
)
{
return
result
;
}
if
(
!
keepGoing
)
{
return
Success
;
}
nsTArray
<
nsTArray
<
uint8_t
>
>
nssRootCandidates
;
nsTArray
<
nsTArray
<
uint8_t
>
>
nssIntermediateCandidates
;
RefPtr
<
Runnable
>
getCandidatesTask
=
NS_NewRunnableFunction
(
"
NSSCertDBTrustDomain
:
:
FindIssuer
"
[
&
]
(
)
{
UniqueCERTCertList
candidates
(
CERT_CreateSubjectCertList
(
nullptr
CERT_GetDefaultCertDB
(
)
&
encodedIssuerNameItem
0
false
)
)
;
if
(
candidates
)
{
for
(
CERTCertListNode
*
n
=
CERT_LIST_HEAD
(
candidates
)
;
!
CERT_LIST_END
(
n
candidates
)
;
n
=
CERT_LIST_NEXT
(
n
)
)
{
nsTArray
<
uint8_t
>
candidate
;
candidate
.
AppendElements
(
n
-
>
cert
-
>
derCert
.
data
n
-
>
cert
-
>
derCert
.
len
)
;
if
(
n
-
>
cert
-
>
isRoot
)
{
nssRootCandidates
.
AppendElement
(
std
:
:
move
(
candidate
)
)
;
}
else
{
nssIntermediateCandidates
.
AppendElement
(
std
:
:
move
(
candidate
)
)
;
}
}
}
}
)
;
nsCOMPtr
<
nsIEventTarget
>
socketThread
(
do_GetService
(
NS_SOCKETTRANSPORTSERVICE_CONTRACTID
)
)
;
if
(
!
socketThread
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
rv
=
SyncRunnable
:
:
DispatchToThread
(
socketThread
getCandidatesTask
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
nsTArray
<
Input
>
nssCandidates
;
for
(
const
auto
&
rootCandidate
:
nssRootCandidates
)
{
Input
certDER
;
Result
rv
=
certDER
.
Init
(
rootCandidate
.
Elements
(
)
rootCandidate
.
Length
(
)
)
;
if
(
rv
!
=
Success
)
{
continue
;
}
nssCandidates
.
AppendElement
(
std
:
:
move
(
certDER
)
)
;
}
for
(
const
auto
&
intermediateCandidate
:
nssIntermediateCandidates
)
{
Input
certDER
;
Result
rv
=
certDER
.
Init
(
intermediateCandidate
.
Elements
(
)
intermediateCandidate
.
Length
(
)
)
;
if
(
rv
!
=
Success
)
{
continue
;
}
nssCandidates
.
AppendElement
(
std
:
:
move
(
certDER
)
)
;
}
return
CheckCandidates
(
*
this
checker
nssCandidates
nameConstraintsInputPtr
keepGoing
)
;
}
Result
NSSCertDBTrustDomain
:
:
GetCertTrust
(
EndEntityOrCA
endEntityOrCA
const
CertPolicyId
&
policy
Input
candidateCertDER
TrustLevel
&
trustLevel
)
{
if
(
!
mCertStorage
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
mCertDBTrustType
=
=
trustSSL
)
{
int16_t
revocationState
;
nsTArray
<
uint8_t
>
issuerBytes
;
nsTArray
<
uint8_t
>
serialBytes
;
nsTArray
<
uint8_t
>
subjectBytes
;
nsTArray
<
uint8_t
>
pubKeyBytes
;
Result
result
=
BuildRevocationCheckArrays
(
candidateCertDER
endEntityOrCA
issuerBytes
serialBytes
subjectBytes
pubKeyBytes
)
;
if
(
result
!
=
Success
)
{
return
result
;
}
nsresult
nsrv
=
mCertStorage
-
>
GetRevocationState
(
issuerBytes
serialBytes
subjectBytes
pubKeyBytes
&
revocationState
)
;
if
(
NS_FAILED
(
nsrv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
revocationState
=
=
nsICertStorage
:
:
STATE_ENFORCE
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
certificate
is
in
blocklist
"
)
)
;
return
Result
:
:
ERROR_REVOKED_CERTIFICATE
;
}
}
for
(
const
auto
&
thirdPartyRootInput
:
mThirdPartyRootInputs
)
{
if
(
InputsAreEqual
(
candidateCertDER
thirdPartyRootInput
)
)
{
trustLevel
=
TrustLevel
:
:
TrustAnchor
;
return
Success
;
}
}
for
(
const
auto
&
thirdPartyIntermediateInput
:
mThirdPartyIntermediateInputs
)
{
if
(
InputsAreEqual
(
candidateCertDER
thirdPartyIntermediateInput
)
)
{
trustLevel
=
TrustLevel
:
:
InheritsTrust
;
return
Success
;
}
}
Result
result
=
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
RefPtr
<
Runnable
>
getTrustTask
=
NS_NewRunnableFunction
(
"
NSSCertDBTrustDomain
:
:
GetCertTrust
"
[
&
]
(
)
{
SECItem
candidateCertDERSECItem
=
UnsafeMapInputToSECItem
(
candidateCertDER
)
;
UniqueCERTCertificate
candidateCert
(
CERT_NewTempCertificate
(
CERT_GetDefaultCertDB
(
)
&
candidateCertDERSECItem
nullptr
false
true
)
)
;
if
(
!
candidateCert
)
{
result
=
MapPRErrorCodeToResult
(
PR_GetError
(
)
)
;
return
;
}
CERTCertTrust
trust
;
if
(
CERT_GetCertTrust
(
candidateCert
.
get
(
)
&
trust
)
=
=
SECSuccess
)
{
uint32_t
flags
=
SEC_GET_TRUST_FLAGS
(
&
trust
mCertDBTrustType
)
;
uint32_t
relevantTrustBit
=
endEntityOrCA
=
=
EndEntityOrCA
:
:
MustBeCA
?
CERTDB_TRUSTED_CA
:
CERTDB_TRUSTED
;
if
(
(
(
flags
&
(
relevantTrustBit
|
CERTDB_TERMINAL_RECORD
)
)
)
=
=
CERTDB_TERMINAL_RECORD
)
{
trustLevel
=
TrustLevel
:
:
ActivelyDistrusted
;
result
=
Success
;
return
;
}
if
(
flags
&
CERTDB_TRUSTED_CA
)
{
if
(
policy
.
IsAnyPolicy
(
)
)
{
trustLevel
=
TrustLevel
:
:
TrustAnchor
;
result
=
Success
;
return
;
}
nsTArray
<
uint8_t
>
certBytes
(
candidateCert
-
>
derCert
.
data
candidateCert
-
>
derCert
.
len
)
;
if
(
CertIsAuthoritativeForEVPolicy
(
certBytes
policy
)
)
{
trustLevel
=
TrustLevel
:
:
TrustAnchor
;
result
=
Success
;
return
;
}
}
}
trustLevel
=
TrustLevel
:
:
InheritsTrust
;
result
=
Success
;
}
)
;
nsCOMPtr
<
nsIEventTarget
>
socketThread
(
do_GetService
(
NS_SOCKETTRANSPORTSERVICE_CONTRACTID
)
)
;
if
(
!
socketThread
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
nsresult
rv
=
SyncRunnable
:
:
DispatchToThread
(
socketThread
getTrustTask
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
return
result
;
}
Result
NSSCertDBTrustDomain
:
:
DigestBuf
(
Input
item
DigestAlgorithm
digestAlg
uint8_t
*
digestBuf
size_t
digestBufLen
)
{
return
DigestBufNSS
(
item
digestAlg
digestBuf
digestBufLen
)
;
}
TimeDuration
NSSCertDBTrustDomain
:
:
GetOCSPTimeout
(
)
const
{
switch
(
mOCSPFetching
)
{
case
NSSCertDBTrustDomain
:
:
FetchOCSPForDVSoftFail
:
return
mOCSPTimeoutSoft
;
case
NSSCertDBTrustDomain
:
:
FetchOCSPForEV
:
case
NSSCertDBTrustDomain
:
:
FetchOCSPForDVHardFail
:
return
mOCSPTimeoutHard
;
case
NSSCertDBTrustDomain
:
:
NeverFetchOCSP
:
case
NSSCertDBTrustDomain
:
:
LocalOnlyOCSPForEV
:
MOZ_ASSERT_UNREACHABLE
(
"
we
should
never
see
this
OCSPFetching
type
here
"
)
;
break
;
}
MOZ_ASSERT_UNREACHABLE
(
"
we
'
re
not
handling
every
OCSPFetching
type
"
)
;
return
mOCSPTimeoutSoft
;
}
static
Result
GetOCSPAuthorityInfoAccessLocation
(
const
UniquePLArenaPool
&
arena
Input
aiaExtension
nsCString
&
result
)
{
MOZ_ASSERT
(
arena
.
get
(
)
)
;
if
(
!
arena
.
get
(
)
)
{
return
Result
:
:
FATAL_ERROR_INVALID_ARGS
;
}
result
.
Assign
(
VoidCString
(
)
)
;
SECItem
aiaExtensionSECItem
=
UnsafeMapInputToSECItem
(
aiaExtension
)
;
CERTAuthInfoAccess
*
*
aia
=
CERT_DecodeAuthInfoAccessExtension
(
arena
.
get
(
)
&
aiaExtensionSECItem
)
;
if
(
!
aia
)
{
return
Result
:
:
ERROR_CERT_BAD_ACCESS_LOCATION
;
}
for
(
size_t
i
=
0
;
aia
[
i
]
;
+
+
i
)
{
if
(
SECOID_FindOIDTag
(
&
aia
[
i
]
-
>
method
)
=
=
SEC_OID_PKIX_OCSP
)
{
CERTGeneralName
*
current
=
aia
[
i
]
-
>
location
;
if
(
!
current
)
{
continue
;
}
do
{
if
(
current
-
>
type
=
=
certURI
)
{
const
SECItem
&
location
=
current
-
>
name
.
other
;
if
(
location
.
len
>
1024
|
|
memchr
(
location
.
data
0
location
.
len
)
)
{
return
Result
:
:
ERROR_CERT_BAD_ACCESS_LOCATION
;
}
result
.
Assign
(
nsDependentCSubstring
(
reinterpret_cast
<
const
char
*
>
(
location
.
data
)
location
.
len
)
)
;
return
Success
;
}
current
=
CERT_GetNextGeneralName
(
current
)
;
}
while
(
current
!
=
aia
[
i
]
-
>
location
)
;
}
}
return
Success
;
}
NS_IMPL_ISUPPORTS
(
CRLiteTimestamp
nsICRLiteTimestamp
)
NS_IMETHODIMP
CRLiteTimestamp
:
:
GetLogID
(
nsTArray
<
uint8_t
>
&
aLogID
)
{
aLogID
.
Clear
(
)
;
aLogID
.
AppendElements
(
mLogID
)
;
return
NS_OK
;
}
NS_IMETHODIMP
CRLiteTimestamp
:
:
GetTimestamp
(
uint64_t
*
aTimestamp
)
{
*
aTimestamp
=
mTimestamp
;
return
NS_OK
;
}
Result
BuildCRLiteTimestampArray
(
Input
sctExtension
nsTArray
<
RefPtr
<
nsICRLiteTimestamp
>
>
&
timestamps
)
{
Input
sctList
;
Result
rv
=
ExtractSignedCertificateTimestampListFromExtension
(
sctExtension
sctList
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
std
:
:
vector
<
SignedCertificateTimestamp
>
decodedSCTs
;
size_t
decodingErrors
;
DecodeSCTs
(
sctList
decodedSCTs
decodingErrors
)
;
Unused
<
<
decodingErrors
;
for
(
const
auto
&
sct
:
decodedSCTs
)
{
timestamps
.
AppendElement
(
new
CRLiteTimestamp
(
sct
)
)
;
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
CheckCRLiteStash
(
const
nsTArray
<
uint8_t
>
&
issuerSubjectPublicKeyInfoBytes
const
nsTArray
<
uint8_t
>
&
serialNumberBytes
)
{
bool
isRevokedByStash
=
false
;
nsresult
rv
=
mCertStorage
-
>
IsCertRevokedByStash
(
issuerSubjectPublicKeyInfoBytes
serialNumberBytes
&
isRevokedByStash
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
:
CheckCRLiteStash
:
IsCertRevokedByStash
"
"
failed
"
)
)
;
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
isRevokedByStash
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
:
CheckCRLiteStash
:
IsCertRevokedByStash
"
"
returned
true
"
)
)
;
return
Result
:
:
ERROR_REVOKED_CERTIFICATE
;
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
CheckCRLite
(
const
nsTArray
<
uint8_t
>
&
issuerBytes
const
nsTArray
<
uint8_t
>
&
issuerSubjectPublicKeyInfoBytes
const
nsTArray
<
uint8_t
>
&
serialNumberBytes
const
nsTArray
<
RefPtr
<
nsICRLiteTimestamp
>
>
&
timestamps
bool
&
filterCoversCertificate
)
{
filterCoversCertificate
=
false
;
int16_t
crliteRevocationState
;
nsresult
rv
=
mCertStorage
-
>
GetCRLiteRevocationState
(
issuerBytes
issuerSubjectPublicKeyInfoBytes
serialNumberBytes
timestamps
&
crliteRevocationState
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
:
CheckCRLite
:
CRLite
call
failed
"
)
)
;
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
:
CheckCRLite
:
CRLite
check
returned
"
"
state
=
%
hd
"
crliteRevocationState
)
)
;
switch
(
crliteRevocationState
)
{
case
nsICertStorage
:
:
STATE_ENFORCE
:
filterCoversCertificate
=
true
;
return
Result
:
:
ERROR_REVOKED_CERTIFICATE
;
case
nsICertStorage
:
:
STATE_UNSET
:
filterCoversCertificate
=
true
;
return
Success
;
case
nsICertStorage
:
:
STATE_NOT_ENROLLED
:
filterCoversCertificate
=
false
;
return
Success
;
case
nsICertStorage
:
:
STATE_NOT_COVERED
:
filterCoversCertificate
=
false
;
return
Success
;
case
nsICertStorage
:
:
STATE_NO_FILTER
:
filterCoversCertificate
=
false
;
return
Success
;
default
:
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
:
CheckCRLite
:
Unknown
CRLite
revocation
"
"
state
"
)
)
;
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
}
Result
NSSCertDBTrustDomain
:
:
CheckRevocation
(
EndEntityOrCA
endEntityOrCA
const
CertID
&
certID
Time
time
Duration
validityDuration
const
Input
*
stapledOCSPResponse
const
Input
*
aiaExtension
const
Input
*
sctExtension
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
Top
of
CheckRevocation
\
n
"
)
)
;
if
(
endEntityOrCA
=
=
EndEntityOrCA
:
:
MustBeCA
)
{
return
Success
;
}
bool
crliteFilterCoversCertificate
=
false
;
Result
crliteResult
=
Success
;
if
(
mCRLiteMode
!
=
CRLiteMode
:
:
Disabled
&
&
sctExtension
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
:
CheckRevocation
:
checking
CRLite
"
)
)
;
nsTArray
<
uint8_t
>
issuerSubjectPublicKeyInfoBytes
;
issuerSubjectPublicKeyInfoBytes
.
AppendElements
(
certID
.
issuerSubjectPublicKeyInfo
.
UnsafeGetData
(
)
certID
.
issuerSubjectPublicKeyInfo
.
GetLength
(
)
)
;
nsTArray
<
uint8_t
>
serialNumberBytes
;
serialNumberBytes
.
AppendElements
(
certID
.
serialNumber
.
UnsafeGetData
(
)
certID
.
serialNumber
.
GetLength
(
)
)
;
Result
rv
=
CheckCRLiteStash
(
issuerSubjectPublicKeyInfoBytes
serialNumberBytes
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
nsTArray
<
uint8_t
>
issuerBytes
;
issuerBytes
.
AppendElements
(
certID
.
issuer
.
UnsafeGetData
(
)
certID
.
issuer
.
GetLength
(
)
)
;
nsTArray
<
RefPtr
<
nsICRLiteTimestamp
>
>
timestamps
;
rv
=
BuildCRLiteTimestampArray
(
*
sctExtension
timestamps
)
;
if
(
rv
!
=
Success
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
decoding
SCT
extension
failed
-
CRLite
will
be
not
be
"
"
consulted
"
)
)
;
}
else
{
crliteResult
=
CheckCRLite
(
issuerBytes
issuerSubjectPublicKeyInfoBytes
serialNumberBytes
timestamps
crliteFilterCoversCertificate
)
;
if
(
crliteResult
!
=
Success
&
&
crliteResult
!
=
Result
:
:
ERROR_REVOKED_CERTIFICATE
)
{
return
crliteResult
;
}
if
(
crliteFilterCoversCertificate
)
{
if
(
mCRLiteMode
=
=
CRLiteMode
:
:
Enforce
|
|
(
mCRLiteMode
=
=
CRLiteMode
:
:
ConfirmRevocations
&
&
crliteResult
=
=
Success
)
)
{
return
crliteResult
;
}
}
}
}
const
uint16_t
maxOCSPLifetimeInDays
=
10
;
Result
stapledOCSPResponseResult
=
Success
;
if
(
stapledOCSPResponse
)
{
bool
expired
;
stapledOCSPResponseResult
=
VerifyAndMaybeCacheEncodedOCSPResponse
(
certID
time
maxOCSPLifetimeInDays
*
stapledOCSPResponse
ResponseWasStapled
expired
)
;
if
(
stapledOCSPResponseResult
=
=
Success
)
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_GOOD
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
stapled
OCSP
response
:
good
"
)
)
;
return
Success
;
}
if
(
stapledOCSPResponseResult
=
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
|
|
expired
)
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_EXPIRED
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
expired
stapled
OCSP
response
"
)
)
;
}
else
if
(
stapledOCSPResponseResult
=
=
Result
:
:
ERROR_OCSP_TRY_SERVER_LATER
|
|
stapledOCSPResponseResult
=
=
Result
:
:
ERROR_OCSP_INVALID_SIGNING_CERT
)
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_INVALID
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
stapled
OCSP
response
:
"
"
failure
(
allowed
for
compatibility
)
"
)
)
;
}
else
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_INVALID
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
stapled
OCSP
response
:
failure
"
)
)
;
return
stapledOCSPResponseResult
;
}
}
else
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_NONE
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
no
stapled
OCSP
response
"
)
)
;
}
Result
cachedResponseResult
=
Success
;
Time
cachedResponseValidThrough
(
Time
:
:
uninitialized
)
;
bool
cachedResponsePresent
=
mOCSPCache
.
Get
(
certID
mOriginAttributes
cachedResponseResult
cachedResponseValidThrough
)
;
if
(
cachedResponsePresent
)
{
if
(
cachedResponseResult
=
=
Success
&
&
cachedResponseValidThrough
>
=
time
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
cached
OCSP
response
:
good
"
)
)
;
return
Success
;
}
if
(
cachedResponseResult
=
=
Result
:
:
ERROR_REVOKED_CERTIFICATE
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
cached
OCSP
response
:
revoked
"
)
)
;
return
Result
:
:
ERROR_REVOKED_CERTIFICATE
;
}
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
cached
OCSP
response
:
error
%
d
"
static_cast
<
int
>
(
cachedResponseResult
)
)
)
;
if
(
cachedResponseResult
=
=
Success
&
&
cachedResponseValidThrough
<
time
)
{
cachedResponseResult
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
;
}
if
(
cachedResponseResult
!
=
Success
&
&
cachedResponseResult
!
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
&
&
cachedResponseResult
!
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
&
&
cachedResponseValidThrough
<
time
)
{
cachedResponseResult
=
Success
;
cachedResponsePresent
=
false
;
}
}
else
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
no
cached
OCSP
response
"
)
)
;
}
MOZ_ASSERT
(
(
!
cachedResponsePresent
&
&
cachedResponseResult
=
=
Success
)
|
|
(
cachedResponsePresent
&
&
cachedResponseResult
!
=
Success
)
)
;
Duration
shortLifetime
(
mCertShortLifetimeInDays
*
Time
:
:
ONE_DAY_IN_SECONDS
)
;
if
(
(
mOCSPFetching
=
=
NeverFetchOCSP
)
|
|
(
validityDuration
<
shortLifetime
)
)
{
if
(
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
return
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
;
}
if
(
mOCSPFetching
=
=
FetchOCSPForDVHardFail
&
&
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
)
{
return
Result
:
:
ERROR_OCSP_OLD_RESPONSE
;
}
return
Success
;
}
if
(
mOCSPFetching
=
=
LocalOnlyOCSPForEV
)
{
if
(
cachedResponseResult
!
=
Success
)
{
return
cachedResponseResult
;
}
return
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
;
}
UniquePLArenaPool
arena
(
PORT_NewArena
(
DER_DEFAULT_CHUNKSIZE
)
)
;
if
(
!
arena
)
{
return
Result
:
:
FATAL_ERROR_NO_MEMORY
;
}
Result
rv
;
nsCString
aiaLocation
(
VoidCString
(
)
)
;
if
(
aiaExtension
)
{
rv
=
GetOCSPAuthorityInfoAccessLocation
(
arena
*
aiaExtension
aiaLocation
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
}
if
(
aiaLocation
.
IsVoid
(
)
)
{
if
(
mOCSPFetching
=
=
FetchOCSPForEV
|
|
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
return
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
;
}
if
(
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
)
{
return
Result
:
:
ERROR_OCSP_OLD_RESPONSE
;
}
if
(
stapledOCSPResponseResult
!
=
Success
)
{
return
stapledOCSPResponseResult
;
}
return
Success
;
}
if
(
cachedResponseResult
=
=
Success
|
|
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
|
|
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
)
{
return
SynchronousCheckRevocationWithServer
(
certID
aiaLocation
time
maxOCSPLifetimeInDays
cachedResponseResult
stapledOCSPResponseResult
crliteFilterCoversCertificate
crliteResult
)
;
}
return
HandleOCSPFailure
(
cachedResponseResult
stapledOCSPResponseResult
cachedResponseResult
)
;
}
Result
NSSCertDBTrustDomain
:
:
SynchronousCheckRevocationWithServer
(
const
CertID
&
certID
const
nsCString
&
aiaLocation
Time
time
uint16_t
maxOCSPLifetimeInDays
const
Result
cachedResponseResult
const
Result
stapledOCSPResponseResult
const
bool
crliteFilterCoversCertificate
const
Result
crliteResult
)
{
uint8_t
ocspRequestBytes
[
OCSP_REQUEST_MAX_LENGTH
]
;
size_t
ocspRequestLength
;
Result
rv
=
CreateEncodedOCSPRequest
(
*
this
certID
ocspRequestBytes
ocspRequestLength
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
Vector
<
uint8_t
>
ocspResponse
;
Input
response
;
rv
=
DoOCSPRequest
(
aiaLocation
mOriginAttributes
ocspRequestBytes
ocspRequestLength
GetOCSPTimeout
(
)
ocspResponse
)
;
if
(
rv
=
=
Success
&
&
response
.
Init
(
ocspResponse
.
begin
(
)
ocspResponse
.
length
(
)
)
!
=
Success
)
{
rv
=
Result
:
:
ERROR_OCSP_MALFORMED_RESPONSE
;
}
if
(
rv
!
=
Success
)
{
Time
timeout
(
time
)
;
if
(
timeout
.
AddSeconds
(
ServerFailureDelaySeconds
)
!
=
Success
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
Result
cacheRV
=
mOCSPCache
.
Put
(
certID
mOriginAttributes
rv
time
timeout
)
;
if
(
cacheRV
!
=
Success
)
{
return
cacheRV
;
}
if
(
crliteFilterCoversCertificate
)
{
if
(
crliteResult
=
=
Success
)
{
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_CRLITE_VS_OCSP_RESULT
:
:
CRLiteOkOCSPFail
)
;
}
else
{
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_CRLITE_VS_OCSP_RESULT
:
:
CRLiteRevOCSPFail
)
;
}
}
return
HandleOCSPFailure
(
cachedResponseResult
stapledOCSPResponseResult
rv
)
;
}
bool
expired
;
rv
=
VerifyAndMaybeCacheEncodedOCSPResponse
(
certID
time
maxOCSPLifetimeInDays
response
ResponseIsFromNetwork
expired
)
;
if
(
crliteFilterCoversCertificate
)
{
if
(
rv
=
=
Success
)
{
if
(
crliteResult
=
=
Success
)
{
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_CRLITE_VS_OCSP_RESULT
:
:
CRLiteOkOCSPOk
)
;
}
else
{
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_CRLITE_VS_OCSP_RESULT
:
:
CRLiteRevOCSPOk
)
;
}
}
else
if
(
rv
=
=
Result
:
:
ERROR_REVOKED_CERTIFICATE
)
{
if
(
crliteResult
=
=
Success
)
{
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_CRLITE_VS_OCSP_RESULT
:
:
CRLiteOkOCSPRev
)
;
}
else
{
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_CRLITE_VS_OCSP_RESULT
:
:
CRLiteRevOCSPRev
)
;
}
}
else
if
(
rv
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
if
(
crliteResult
=
=
Success
)
{
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_CRLITE_VS_OCSP_RESULT
:
:
CRLiteOkOCSPUnk
)
;
}
else
{
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_CRLITE_VS_OCSP_RESULT
:
:
CRLiteRevOCSPUnk
)
;
}
}
else
{
if
(
crliteResult
=
=
Success
)
{
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_CRLITE_VS_OCSP_RESULT
:
:
CRLiteOkOCSPSoft
)
;
}
else
{
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_CRLITE_VS_OCSP_RESULT
:
:
CRLiteRevOCSPSoft
)
;
}
}
}
if
(
rv
=
=
Success
|
|
mOCSPFetching
!
=
FetchOCSPForDVSoftFail
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
after
"
"
VerifyEncodedOCSPResponse
"
)
)
;
return
rv
;
}
if
(
rv
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
|
|
rv
=
=
Result
:
:
ERROR_REVOKED_CERTIFICATE
)
{
return
rv
;
}
if
(
stapledOCSPResponseResult
!
=
Success
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
SECFailure
from
expired
/
invalid
"
"
stapled
response
after
OCSP
request
verification
failure
"
)
)
;
return
stapledOCSPResponseResult
;
}
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
end
of
CheckRevocation
"
)
)
;
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
HandleOCSPFailure
(
const
Result
cachedResponseResult
const
Result
stapledOCSPResponseResult
const
Result
error
)
{
if
(
mOCSPFetching
!
=
FetchOCSPForDVSoftFail
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
SECFailure
after
OCSP
request
"
"
failure
"
)
)
;
return
error
;
}
if
(
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
SECFailure
from
cached
response
"
"
after
OCSP
request
failure
"
)
)
;
return
cachedResponseResult
;
}
if
(
stapledOCSPResponseResult
!
=
Success
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
SECFailure
from
expired
/
invalid
"
"
stapled
response
after
OCSP
request
failure
"
)
)
;
return
stapledOCSPResponseResult
;
}
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
SECSuccess
after
OCSP
request
"
"
failure
"
)
)
;
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
VerifyAndMaybeCacheEncodedOCSPResponse
(
const
CertID
&
certID
Time
time
uint16_t
maxLifetimeInDays
Input
encodedResponse
EncodedResponseSource
responseSource
bool
&
expired
)
{
Time
thisUpdate
(
Time
:
:
uninitialized
)
;
Time
validThrough
(
Time
:
:
uninitialized
)
;
Result
rv
=
VerifyEncodedOCSPResponse
(
*
this
certID
time
maxLifetimeInDays
encodedResponse
expired
&
thisUpdate
&
validThrough
)
;
if
(
responseSource
=
=
ResponseWasStapled
&
&
expired
)
{
MOZ_ASSERT
(
rv
!
=
Success
)
;
return
rv
;
}
if
(
rv
!
=
Success
&
&
rv
!
=
Result
:
:
ERROR_REVOKED_CERTIFICATE
&
&
rv
!
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
validThrough
=
time
;
if
(
validThrough
.
AddSeconds
(
ServerFailureDelaySeconds
)
!
=
Success
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
}
if
(
responseSource
=
=
ResponseIsFromNetwork
|
|
rv
=
=
Success
|
|
rv
=
=
Result
:
:
ERROR_REVOKED_CERTIFICATE
|
|
rv
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
caching
OCSP
response
"
)
)
;
Result
putRV
=
mOCSPCache
.
Put
(
certID
mOriginAttributes
rv
thisUpdate
validThrough
)
;
if
(
putRV
!
=
Success
)
{
return
putRV
;
}
}
return
rv
;
}
SECStatus
GetCertDistrustAfterValue
(
const
SECItem
*
distrustItem
PRTime
&
distrustTime
)
{
if
(
!
distrustItem
|
|
!
distrustItem
-
>
data
|
|
distrustItem
-
>
len
!
=
13
)
{
PR_SetError
(
SEC_ERROR_INVALID_ARGS
0
)
;
return
SECFailure
;
}
return
DER_DecodeTimeChoice
(
&
distrustTime
distrustItem
)
;
}
SECStatus
GetCertNotBeforeValue
(
const
CERTCertificate
*
cert
PRTime
&
distrustTime
)
{
return
DER_DecodeTimeChoice
(
&
distrustTime
&
cert
-
>
validity
.
notBefore
)
;
}
nsresult
isDistrustedCertificateChain
(
const
nsTArray
<
nsTArray
<
uint8_t
>
>
&
certArray
const
SECTrustType
certDBTrustType
bool
&
isDistrusted
)
{
if
(
certArray
.
Length
(
)
=
=
0
)
{
return
NS_ERROR_FAILURE
;
}
isDistrusted
=
true
;
if
(
certDBTrustType
!
=
trustSSL
&
&
certDBTrustType
!
=
trustEmail
)
{
isDistrusted
=
false
;
return
NS_OK
;
}
SECStatus
runnableRV
=
SECFailure
;
RefPtr
<
Runnable
>
isDistrustedChainTask
=
NS_NewRunnableFunction
(
"
isDistrustedCertificateChain
"
[
&
]
(
)
{
CERTCertDBHandle
*
certDB
(
CERT_GetDefaultCertDB
(
)
)
;
const
nsTArray
<
uint8_t
>
&
certRootDER
=
certArray
.
LastElement
(
)
;
SECItem
certRootDERItem
=
{
siBuffer
const_cast
<
unsigned
char
*
>
(
certRootDER
.
Elements
(
)
)
AssertedCast
<
unsigned
int
>
(
certRootDER
.
Length
(
)
)
}
;
UniqueCERTCertificate
certRoot
(
CERT_NewTempCertificate
(
certDB
&
certRootDERItem
nullptr
false
true
)
)
;
if
(
!
certRoot
)
{
runnableRV
=
SECFailure
;
return
;
}
const
nsTArray
<
uint8_t
>
&
certLeafDER
=
certArray
.
ElementAt
(
0
)
;
SECItem
certLeafDERItem
=
{
siBuffer
const_cast
<
unsigned
char
*
>
(
certLeafDER
.
Elements
(
)
)
AssertedCast
<
unsigned
int
>
(
certLeafDER
.
Length
(
)
)
}
;
UniqueCERTCertificate
certLeaf
(
CERT_NewTempCertificate
(
certDB
&
certLeafDERItem
nullptr
false
true
)
)
;
if
(
!
certLeaf
)
{
runnableRV
=
SECFailure
;
return
;
}
if
(
!
certRoot
-
>
distrust
)
{
isDistrusted
=
false
;
runnableRV
=
SECSuccess
;
return
;
}
SECItem
*
distrustPtr
=
nullptr
;
if
(
certDBTrustType
=
=
trustSSL
)
{
distrustPtr
=
&
certRoot
-
>
distrust
-
>
serverDistrustAfter
;
}
if
(
certDBTrustType
=
=
trustEmail
)
{
distrustPtr
=
&
certRoot
-
>
distrust
-
>
emailDistrustAfter
;
}
PRTime
certRootDistrustAfter
;
PRTime
certLeafNotBefore
;
runnableRV
=
GetCertDistrustAfterValue
(
distrustPtr
certRootDistrustAfter
)
;
if
(
runnableRV
!
=
SECSuccess
)
{
return
;
}
runnableRV
=
GetCertNotBeforeValue
(
certLeaf
.
get
(
)
certLeafNotBefore
)
;
if
(
runnableRV
!
=
SECSuccess
)
{
return
;
}
if
(
certLeafNotBefore
<
=
certRootDistrustAfter
)
{
isDistrusted
=
false
;
}
runnableRV
=
SECSuccess
;
}
)
;
nsCOMPtr
<
nsIEventTarget
>
socketThread
(
do_GetService
(
NS_SOCKETTRANSPORTSERVICE_CONTRACTID
)
)
;
if
(
!
socketThread
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
SyncRunnable
:
:
DispatchToThread
(
socketThread
isDistrustedChainTask
)
;
if
(
NS_FAILED
(
rv
)
|
|
runnableRV
!
=
SECSuccess
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
Result
NSSCertDBTrustDomain
:
:
IsChainValid
(
const
DERArray
&
reversedDERArray
Time
time
const
CertPolicyId
&
requiredPolicy
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
IsChainValid
"
)
)
;
size_t
numCerts
=
reversedDERArray
.
GetLength
(
)
;
if
(
numCerts
<
1
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
nsTArray
<
nsTArray
<
uint8_t
>
>
certArray
;
for
(
size_t
i
=
numCerts
;
i
>
0
;
-
-
i
)
{
const
Input
*
derInput
=
reversedDERArray
.
GetDER
(
i
-
1
)
;
certArray
.
EmplaceBack
(
derInput
-
>
UnsafeGetData
(
)
derInput
-
>
GetLength
(
)
)
;
}
const
nsTArray
<
uint8_t
>
&
rootBytes
=
certArray
.
LastElement
(
)
;
Input
rootInput
;
Result
rv
=
rootInput
.
Init
(
rootBytes
.
Elements
(
)
rootBytes
.
Length
(
)
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
rv
=
IsCertBuiltInRoot
(
rootInput
mIsBuiltChainRootBuiltInRoot
)
;
if
(
rv
!
=
Result
:
:
Success
)
{
return
rv
;
}
nsresult
nsrv
;
if
(
mHostname
)
{
nsTArray
<
Span
<
const
uint8_t
>
>
derCertSpanList
;
for
(
const
auto
&
certDER
:
certArray
)
{
derCertSpanList
.
EmplaceBack
(
certDER
.
Elements
(
)
certDER
.
Length
(
)
)
;
}
bool
chainHasValidPins
;
nsrv
=
PublicKeyPinningService
:
:
ChainHasValidPins
(
derCertSpanList
mHostname
time
mIsBuiltChainRootBuiltInRoot
chainHasValidPins
mPinningTelemetryInfo
)
;
if
(
NS_FAILED
(
nsrv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
!
chainHasValidPins
)
{
return
Result
:
:
ERROR_KEY_PINNING_FAILURE
;
}
}
if
(
mIsBuiltChainRootBuiltInRoot
)
{
bool
isDistrusted
;
nsrv
=
isDistrustedCertificateChain
(
certArray
mCertDBTrustType
isDistrusted
)
;
if
(
NS_FAILED
(
nsrv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
isDistrusted
)
{
return
Result
:
:
ERROR_UNTRUSTED_ISSUER
;
}
}
const
nsTArray
<
uint8_t
>
&
rootCertDER
=
certArray
.
LastElement
(
)
;
if
(
mHostname
&
&
CertDNIsInList
(
rootCertDER
RootSymantecDNs
)
)
{
if
(
numCerts
<
=
1
)
{
return
Result
:
:
ERROR_ADDITIONAL_POLICY_CONSTRAINT_FAILED
;
}
nsTArray
<
Input
>
intCerts
;
for
(
size_t
i
=
1
;
i
<
certArray
.
Length
(
)
-
1
;
+
+
i
)
{
const
nsTArray
<
uint8_t
>
&
certBytes
=
certArray
.
ElementAt
(
i
)
;
Input
certInput
;
rv
=
certInput
.
Init
(
certBytes
.
Elements
(
)
certBytes
.
Length
(
)
)
;
if
(
rv
!
=
Success
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
intCerts
.
EmplaceBack
(
certInput
)
;
}
bool
isDistrusted
=
false
;
nsrv
=
CheckForSymantecDistrust
(
intCerts
RootAppleAndGoogleSPKIs
isDistrusted
)
;
if
(
NS_FAILED
(
nsrv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
isDistrusted
)
{
mSawDistrustedCAByPolicyError
=
true
;
return
Result
:
:
ERROR_ADDITIONAL_POLICY_CONSTRAINT_FAILED
;
}
}
mBuiltChain
=
std
:
:
move
(
certArray
)
;
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
CheckSignatureDigestAlgorithm
(
DigestAlgorithm
aAlg
EndEntityOrCA
Time
)
{
switch
(
aAlg
)
{
case
DigestAlgorithm
:
:
sha256
:
case
DigestAlgorithm
:
:
sha384
:
case
DigestAlgorithm
:
:
sha512
:
return
Success
;
case
DigestAlgorithm
:
:
sha1
:
return
Result
:
:
ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
;
}
}
Result
NSSCertDBTrustDomain
:
:
CheckRSAPublicKeyModulusSizeInBits
(
EndEntityOrCA
unsigned
int
modulusSizeInBits
)
{
if
(
modulusSizeInBits
<
mMinRSABits
)
{
return
Result
:
:
ERROR_INADEQUATE_KEY_SIZE
;
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
VerifyRSAPKCS1SignedData
(
Input
data
DigestAlgorithm
digestAlgorithm
Input
signature
Input
subjectPublicKeyInfo
)
{
return
VerifyRSAPKCS1SignedDataNSS
(
data
digestAlgorithm
signature
subjectPublicKeyInfo
mPinArg
)
;
}
Result
NSSCertDBTrustDomain
:
:
VerifyRSAPSSSignedData
(
Input
data
DigestAlgorithm
digestAlgorithm
Input
signature
Input
subjectPublicKeyInfo
)
{
return
VerifyRSAPSSSignedDataNSS
(
data
digestAlgorithm
signature
subjectPublicKeyInfo
mPinArg
)
;
}
Result
NSSCertDBTrustDomain
:
:
CheckECDSACurveIsAcceptable
(
EndEntityOrCA
NamedCurve
curve
)
{
switch
(
curve
)
{
case
NamedCurve
:
:
secp256r1
:
case
NamedCurve
:
:
secp384r1
:
case
NamedCurve
:
:
secp521r1
:
return
Success
;
}
return
Result
:
:
ERROR_UNSUPPORTED_ELLIPTIC_CURVE
;
}
Result
NSSCertDBTrustDomain
:
:
VerifyECDSASignedData
(
Input
data
DigestAlgorithm
digestAlgorithm
Input
signature
Input
subjectPublicKeyInfo
)
{
return
VerifyECDSASignedDataNSS
(
data
digestAlgorithm
signature
subjectPublicKeyInfo
mPinArg
)
;
}
Result
NSSCertDBTrustDomain
:
:
CheckValidityIsAcceptable
(
Time
notBefore
Time
notAfter
EndEntityOrCA
endEntityOrCA
KeyPurposeId
keyPurpose
)
{
if
(
endEntityOrCA
!
=
EndEntityOrCA
:
:
MustBeEndEntity
)
{
return
Success
;
}
if
(
keyPurpose
=
=
KeyPurposeId
:
:
id_kp_OCSPSigning
)
{
return
Success
;
}
Duration
DURATION_27_MONTHS_PLUS_SLOP
(
(
2
*
365
+
3
*
31
+
7
)
*
Time
:
:
ONE_DAY_IN_SECONDS
)
;
Duration
maxValidityDuration
(
UINT64_MAX
)
;
Duration
validityDuration
(
notBefore
notAfter
)
;
switch
(
mValidityCheckingMode
)
{
case
ValidityCheckingMode
:
:
CheckingOff
:
return
Success
;
case
ValidityCheckingMode
:
:
CheckForEV
:
maxValidityDuration
=
DURATION_27_MONTHS_PLUS_SLOP
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
We
'
re
not
handling
every
ValidityCheckingMode
type
"
)
;
}
if
(
validityDuration
>
maxValidityDuration
)
{
return
Result
:
:
ERROR_VALIDITY_TOO_LONG
;
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
NetscapeStepUpMatchesServerAuth
(
Time
notBefore
bool
&
matches
)
{
static
const
Time
AUGUST_23_2015
=
TimeFromEpochInSeconds
(
1440288000
)
;
static
const
Time
AUGUST_23_2016
=
TimeFromEpochInSeconds
(
1471910400
)
;
switch
(
mNetscapeStepUpPolicy
)
{
case
NetscapeStepUpPolicy
:
:
AlwaysMatch
:
matches
=
true
;
return
Success
;
case
NetscapeStepUpPolicy
:
:
MatchBefore23August2016
:
matches
=
notBefore
<
AUGUST_23_2016
;
return
Success
;
case
NetscapeStepUpPolicy
:
:
MatchBefore23August2015
:
matches
=
notBefore
<
AUGUST_23_2015
;
return
Success
;
case
NetscapeStepUpPolicy
:
:
NeverMatch
:
matches
=
false
;
return
Success
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
unhandled
NetscapeStepUpPolicy
type
"
)
;
}
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
void
NSSCertDBTrustDomain
:
:
ResetAccumulatedState
(
)
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_NEVER_CHECKED
;
mSCTListFromOCSPStapling
=
nullptr
;
mSCTListFromCertificate
=
nullptr
;
mSawDistrustedCAByPolicyError
=
false
;
mIsBuiltChainRootBuiltInRoot
=
false
;
}
static
Input
SECItemToInput
(
const
UniqueSECItem
&
item
)
{
Input
result
;
if
(
item
)
{
MOZ_ASSERT
(
item
-
>
type
=
=
siBuffer
)
;
Result
rv
=
result
.
Init
(
item
-
>
data
item
-
>
len
)
;
MOZ_ASSERT
(
rv
=
=
Success
)
;
Unused
<
<
rv
;
}
return
result
;
}
Input
NSSCertDBTrustDomain
:
:
GetSCTListFromCertificate
(
)
const
{
return
SECItemToInput
(
mSCTListFromCertificate
)
;
}
Input
NSSCertDBTrustDomain
:
:
GetSCTListFromOCSPStapling
(
)
const
{
return
SECItemToInput
(
mSCTListFromOCSPStapling
)
;
}
bool
NSSCertDBTrustDomain
:
:
GetIsBuiltChainRootBuiltInRoot
(
)
const
{
return
mIsBuiltChainRootBuiltInRoot
;
}
bool
NSSCertDBTrustDomain
:
:
GetIsErrorDueToDistrustedCAPolicy
(
)
const
{
return
mSawDistrustedCAByPolicyError
;
}
void
NSSCertDBTrustDomain
:
:
NoteAuxiliaryExtension
(
AuxiliaryExtension
extension
Input
extensionData
)
{
UniqueSECItem
*
out
=
nullptr
;
switch
(
extension
)
{
case
AuxiliaryExtension
:
:
EmbeddedSCTList
:
out
=
&
mSCTListFromCertificate
;
break
;
case
AuxiliaryExtension
:
:
SCTListFromOCSPResponse
:
out
=
&
mSCTListFromOCSPStapling
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
unhandled
AuxiliaryExtension
"
)
;
}
if
(
out
)
{
SECItem
extensionDataItem
=
UnsafeMapInputToSECItem
(
extensionData
)
;
out
-
>
reset
(
SECITEM_DupItem
(
&
extensionDataItem
)
)
;
}
}
SECStatus
InitializeNSS
(
const
nsACString
&
dir
NSSDBConfig
nssDbConfig
PKCS11DBConfig
pkcs11DbConfig
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
uint32_t
flags
=
NSS_INIT_NOROOTINIT
|
NSS_INIT_OPTIMIZESPACE
;
if
(
nssDbConfig
=
=
NSSDBConfig
:
:
ReadOnly
)
{
flags
|
=
NSS_INIT_READONLY
;
}
if
(
pkcs11DbConfig
=
=
PKCS11DBConfig
:
:
DoNotLoadModules
)
{
flags
|
=
NSS_INIT_NOMODDB
;
}
nsAutoCString
dbTypeAndDirectory
(
"
sql
:
"
)
;
dbTypeAndDirectory
.
Append
(
dir
)
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
InitializeNSS
(
%
s
%
d
%
d
)
"
dbTypeAndDirectory
.
get
(
)
(
int
)
nssDbConfig
(
int
)
pkcs11DbConfig
)
)
;
SECStatus
srv
=
NSS_Initialize
(
dbTypeAndDirectory
.
get
(
)
"
"
"
"
SECMOD_DB
flags
)
;
if
(
srv
!
=
SECSuccess
)
{
return
srv
;
}
if
(
nssDbConfig
=
=
NSSDBConfig
:
:
ReadWrite
)
{
UniquePK11SlotInfo
slot
(
PK11_GetInternalKeySlot
(
)
)
;
if
(
!
slot
)
{
return
SECFailure
;
}
if
(
PK11_NeedUserInit
(
slot
.
get
(
)
)
)
{
srv
=
PK11_InitPin
(
slot
.
get
(
)
nullptr
nullptr
)
;
MOZ_ASSERT
(
srv
=
=
SECSuccess
)
;
Unused
<
<
srv
;
}
}
return
SECSuccess
;
}
void
DisableMD5
(
)
{
NSS_SetAlgorithmPolicy
(
SEC_OID_MD5
0
NSS_USE_ALG_IN_CERT_SIGNATURE
|
NSS_USE_ALG_IN_CMS_SIGNATURE
)
;
NSS_SetAlgorithmPolicy
(
SEC_OID_PKCS1_MD5_WITH_RSA_ENCRYPTION
0
NSS_USE_ALG_IN_CERT_SIGNATURE
|
NSS_USE_ALG_IN_CMS_SIGNATURE
)
;
NSS_SetAlgorithmPolicy
(
SEC_OID_PKCS5_PBE_WITH_MD5_AND_DES_CBC
0
NSS_USE_ALG_IN_CERT_SIGNATURE
|
NSS_USE_ALG_IN_CMS_SIGNATURE
)
;
}
bool
LoadUserModuleAt
(
const
char
*
moduleName
const
char
*
libraryName
const
nsCString
&
dir
const
char
*
params
)
{
int
unusedModType
;
Unused
<
<
SECMOD_DeleteModule
(
moduleName
&
unusedModType
)
;
nsAutoCString
fullLibraryPath
;
if
(
!
dir
.
IsEmpty
(
)
)
{
fullLibraryPath
.
Assign
(
dir
)
;
fullLibraryPath
.
AppendLiteral
(
FILE_PATH_SEPARATOR
)
;
}
fullLibraryPath
.
Append
(
MOZ_DLL_PREFIX
)
;
fullLibraryPath
.
Append
(
libraryName
)
;
fullLibraryPath
.
Append
(
MOZ_DLL_SUFFIX
)
;
fullLibraryPath
.
ReplaceSubstring
(
"
\
\
"
"
\
\
\
\
"
)
;
fullLibraryPath
.
ReplaceSubstring
(
"
\
"
"
"
\
\
\
"
"
)
;
nsAutoCString
pkcs11ModuleSpec
(
"
name
=
\
"
"
)
;
pkcs11ModuleSpec
.
Append
(
moduleName
)
;
pkcs11ModuleSpec
.
AppendLiteral
(
"
\
"
library
=
\
"
"
)
;
pkcs11ModuleSpec
.
Append
(
fullLibraryPath
)
;
pkcs11ModuleSpec
.
AppendLiteral
(
"
\
"
"
)
;
if
(
params
)
{
pkcs11ModuleSpec
.
AppendLiteral
(
"
\
"
parameters
=
\
"
"
)
;
pkcs11ModuleSpec
.
Append
(
params
)
;
pkcs11ModuleSpec
.
AppendLiteral
(
"
\
"
"
)
;
}
UniqueSECMODModule
userModule
(
SECMOD_LoadUserModule
(
const_cast
<
char
*
>
(
pkcs11ModuleSpec
.
get
(
)
)
nullptr
false
)
)
;
if
(
!
userModule
)
{
return
false
;
}
if
(
!
userModule
-
>
loaded
)
{
return
false
;
}
return
true
;
}
const
char
*
kIPCClientCertsModuleName
=
"
IPC
Client
Cert
Module
"
;
bool
LoadIPCClientCertsModule
(
const
nsCString
&
dir
)
{
nsPrintfCString
addrs
(
"
%
p
%
p
"
DoFindObjects
DoSign
)
;
if
(
!
LoadUserModuleAt
(
kIPCClientCertsModuleName
"
ipcclientcerts
"
dir
addrs
.
get
(
)
)
)
{
return
false
;
}
RunOnShutdown
(
[
]
(
)
{
UniqueSECMODModule
ipcClientCertsModule
(
SECMOD_FindModule
(
kIPCClientCertsModuleName
)
)
;
if
(
ipcClientCertsModule
)
{
SECMOD_UnloadUserModule
(
ipcClientCertsModule
.
get
(
)
)
;
}
}
ShutdownPhase
:
:
XPCOMWillShutdown
)
;
return
true
;
}
const
char
*
kOSClientCertsModuleName
=
"
OS
Client
Cert
Module
"
;
bool
LoadOSClientCertsModule
(
const
nsCString
&
dir
)
{
#
ifdef
MOZ_WIDGET_COCOA
if
(
!
nsCocoaFeatures
:
:
OnMojaveOrLater
(
)
)
{
return
false
;
}
#
endif
return
LoadUserModuleAt
(
kOSClientCertsModuleName
"
osclientcerts
"
dir
nullptr
)
;
}
bool
LoadLoadableRoots
(
const
nsCString
&
dir
)
{
int
unusedModType
;
Unused
<
<
SECMOD_DeleteModule
(
"
Root
Certs
"
&
unusedModType
)
;
return
LoadUserModuleAt
(
kRootModuleName
"
nssckbi
"
dir
nullptr
)
;
}
nsresult
DefaultServerNicknameForCert
(
const
CERTCertificate
*
cert
nsCString
&
nickname
)
{
MOZ_ASSERT
(
cert
)
;
NS_ENSURE_ARG_POINTER
(
cert
)
;
UniquePORTString
baseName
(
CERT_GetCommonName
(
&
cert
-
>
subject
)
)
;
if
(
!
baseName
)
{
baseName
=
UniquePORTString
(
CERT_GetOrgUnitName
(
&
cert
-
>
subject
)
)
;
}
if
(
!
baseName
)
{
baseName
=
UniquePORTString
(
CERT_GetOrgName
(
&
cert
-
>
subject
)
)
;
}
if
(
!
baseName
)
{
baseName
=
UniquePORTString
(
CERT_GetLocalityName
(
&
cert
-
>
subject
)
)
;
}
if
(
!
baseName
)
{
baseName
=
UniquePORTString
(
CERT_GetStateName
(
&
cert
-
>
subject
)
)
;
}
if
(
!
baseName
)
{
baseName
=
UniquePORTString
(
CERT_GetCountryName
(
&
cert
-
>
subject
)
)
;
}
if
(
!
baseName
)
{
return
NS_ERROR_FAILURE
;
}
static
const
uint32_t
ARBITRARY_LIMIT
=
500
;
for
(
uint32_t
count
=
1
;
count
<
ARBITRARY_LIMIT
;
count
+
+
)
{
nickname
=
baseName
.
get
(
)
;
if
(
count
!
=
1
)
{
nickname
.
AppendPrintf
(
"
#
%
u
"
count
)
;
}
if
(
nickname
.
IsEmpty
(
)
)
{
return
NS_ERROR_FAILURE
;
}
bool
conflict
=
SEC_CertNicknameConflict
(
nickname
.
get
(
)
&
cert
-
>
derSubject
cert
-
>
dbhandle
)
;
if
(
!
conflict
)
{
return
NS_OK
;
}
}
return
NS_ERROR_FAILURE
;
}
Result
BuildRevocationCheckArrays
(
Input
certDER
EndEntityOrCA
endEntityOrCA
nsTArray
<
uint8_t
>
&
issuerBytes
nsTArray
<
uint8_t
>
&
serialBytes
nsTArray
<
uint8_t
>
&
subjectBytes
nsTArray
<
uint8_t
>
&
pubKeyBytes
)
{
BackCert
cert
(
certDER
endEntityOrCA
nullptr
)
;
Result
rv
=
cert
.
Init
(
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
issuerBytes
.
Clear
(
)
;
Input
issuer
(
cert
.
GetIssuer
(
)
)
;
issuerBytes
.
AppendElements
(
issuer
.
UnsafeGetData
(
)
issuer
.
GetLength
(
)
)
;
serialBytes
.
Clear
(
)
;
Input
serial
(
cert
.
GetSerialNumber
(
)
)
;
serialBytes
.
AppendElements
(
serial
.
UnsafeGetData
(
)
serial
.
GetLength
(
)
)
;
subjectBytes
.
Clear
(
)
;
Input
subject
(
cert
.
GetSubject
(
)
)
;
subjectBytes
.
AppendElements
(
subject
.
UnsafeGetData
(
)
subject
.
GetLength
(
)
)
;
pubKeyBytes
.
Clear
(
)
;
Input
pubKey
(
cert
.
GetSubjectPublicKeyInfo
(
)
)
;
pubKeyBytes
.
AppendElements
(
pubKey
.
UnsafeGetData
(
)
pubKey
.
GetLength
(
)
)
;
return
Success
;
}
bool
CertIsInCertStorage
(
const
nsTArray
<
uint8_t
>
&
certDER
nsICertStorage
*
certStorage
)
{
MOZ_ASSERT
(
certStorage
)
;
if
(
!
certStorage
)
{
return
false
;
}
Input
certInput
;
Result
rv
=
certInput
.
Init
(
certDER
.
Elements
(
)
certDER
.
Length
(
)
)
;
if
(
rv
!
=
Success
)
{
return
false
;
}
BackCert
cert
(
certInput
EndEntityOrCA
:
:
MustBeCA
nullptr
)
;
rv
=
cert
.
Init
(
)
;
if
(
rv
!
=
Success
)
{
return
false
;
}
nsTArray
<
uint8_t
>
subject
;
subject
.
AppendElements
(
cert
.
GetSubject
(
)
.
UnsafeGetData
(
)
cert
.
GetSubject
(
)
.
GetLength
(
)
)
;
nsTArray
<
nsTArray
<
uint8_t
>
>
certStorageCerts
;
if
(
NS_FAILED
(
certStorage
-
>
FindCertsBySubject
(
subject
certStorageCerts
)
)
)
{
return
false
;
}
for
(
const
auto
&
certStorageCert
:
certStorageCerts
)
{
if
(
certStorageCert
.
Length
(
)
!
=
certDER
.
Length
(
)
)
{
continue
;
}
if
(
memcmp
(
certStorageCert
.
Elements
(
)
certDER
.
Elements
(
)
certStorageCert
.
Length
(
)
)
=
=
0
)
{
return
true
;
}
}
return
false
;
}
void
SaveIntermediateCerts
(
const
nsTArray
<
nsTArray
<
uint8_t
>
>
&
certList
)
{
if
(
certList
.
IsEmpty
(
)
)
{
return
;
}
nsTArray
<
nsTArray
<
uint8_t
>
>
intermediates
;
for
(
size_t
index
=
1
;
index
<
certList
.
Length
(
)
-
1
;
index
+
+
)
{
intermediates
.
AppendElement
(
certList
.
ElementAt
(
index
)
.
Clone
(
)
)
;
}
nsCOMPtr
<
nsIRunnable
>
importCertsRunnable
(
NS_NewRunnableFunction
(
"
IdleSaveIntermediateCerts
"
[
intermediates
=
std
:
:
move
(
intermediates
)
]
(
)
-
>
void
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
return
;
}
UniquePK11SlotInfo
slot
(
PK11_GetInternalKeySlot
(
)
)
;
if
(
!
slot
)
{
return
;
}
size_t
numCertsImported
=
0
;
nsCOMPtr
<
nsICertStorage
>
certStorage
(
do_GetService
(
NS_CERT_STORAGE_CID
)
)
;
for
(
const
auto
&
certDER
:
intermediates
)
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
return
;
}
if
(
CertIsInCertStorage
(
certDER
certStorage
)
)
{
continue
;
}
SECItem
certDERItem
=
{
siBuffer
const_cast
<
unsigned
char
*
>
(
certDER
.
Elements
(
)
)
AssertedCast
<
unsigned
int
>
(
certDER
.
Length
(
)
)
}
;
UniqueCERTCertificate
cert
(
CERT_NewTempCertificate
(
CERT_GetDefaultCertDB
(
)
&
certDERItem
nullptr
false
true
)
)
;
if
(
!
cert
)
{
continue
;
}
if
(
cert
-
>
slot
)
{
continue
;
}
PRBool
isperm
;
if
(
CERT_GetCertIsPerm
(
cert
.
get
(
)
&
isperm
)
!
=
SECSuccess
)
{
continue
;
}
if
(
isperm
)
{
continue
;
}
nsAutoCString
nickname
;
if
(
NS_FAILED
(
DefaultServerNicknameForCert
(
cert
.
get
(
)
nickname
)
)
)
{
continue
;
}
Unused
<
<
PK11_ImportCert
(
slot
.
get
(
)
cert
.
get
(
)
CK_INVALID_HANDLE
nickname
.
get
(
)
false
)
;
numCertsImported
+
+
;
}
nsCOMPtr
<
nsIRunnable
>
runnable
(
NS_NewRunnableFunction
(
"
IdleSaveIntermediateCertsDone
"
[
numCertsImported
]
(
)
-
>
void
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
NS_ConvertUTF8toUTF16
numCertsImportedString
(
nsPrintfCString
(
"
%
zu
"
numCertsImported
)
)
;
observerService
-
>
NotifyObservers
(
nullptr
"
psm
:
intermediate
-
certs
-
cached
"
numCertsImportedString
.
get
(
)
)
;
}
}
)
)
;
Unused
<
<
NS_DispatchToMainThread
(
runnable
.
forget
(
)
)
;
}
)
)
;
Unused
<
<
NS_DispatchToCurrentThreadQueue
(
importCertsRunnable
.
forget
(
)
EventQueuePriority
:
:
Idle
)
;
}
}
}
