#
include
"
NSSCertDBTrustDomain
.
h
"
#
include
<
stdint
.
h
>
#
include
"
ExtendedValidation
.
h
"
#
include
"
NSSErrorsService
.
h
"
#
include
"
OCSPRequestor
.
h
"
#
include
"
OCSPVerificationTrustDomain
.
h
"
#
include
"
PublicKeyPinningService
.
h
"
#
include
"
cert
.
h
"
#
include
"
certdb
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsNSSCertificate
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nss
.
h
"
#
include
"
pk11pub
.
h
"
#
include
"
pkix
/
Result
.
h
"
#
include
"
pkix
/
pkix
.
h
"
#
include
"
pkix
/
pkixnss
.
h
"
#
include
"
prerror
.
h
"
#
include
"
prmem
.
h
"
#
include
"
secerr
.
h
"
#
include
"
CNNICHashWhitelist
.
inc
"
#
include
"
StartComAndWoSignData
.
inc
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
pkix
;
extern
LazyLogModule
gCertVerifierLog
;
static
const
uint64_t
ServerFailureDelaySeconds
=
5
*
60
;
namespace
mozilla
{
namespace
psm
{
NSSCertDBTrustDomain
:
:
NSSCertDBTrustDomain
(
SECTrustType
certDBTrustType
OCSPFetching
ocspFetching
OCSPCache
&
ocspCache
void
*
pinArg
CertVerifier
:
:
OcspGetConfig
ocspGETConfig
uint32_t
certShortLifetimeInDays
CertVerifier
:
:
PinningMode
pinningMode
unsigned
int
minRSABits
ValidityCheckingMode
validityCheckingMode
CertVerifier
:
:
SHA1Mode
sha1Mode
NetscapeStepUpPolicy
netscapeStepUpPolicy
const
OriginAttributes
&
originAttributes
UniqueCERTCertList
&
builtChain
PinningTelemetryInfo
*
pinningTelemetryInfo
const
char
*
hostname
)
:
mCertDBTrustType
(
certDBTrustType
)
mOCSPFetching
(
ocspFetching
)
mOCSPCache
(
ocspCache
)
mPinArg
(
pinArg
)
mOCSPGetConfig
(
ocspGETConfig
)
mCertShortLifetimeInDays
(
certShortLifetimeInDays
)
mPinningMode
(
pinningMode
)
mMinRSABits
(
minRSABits
)
mValidityCheckingMode
(
validityCheckingMode
)
mSHA1Mode
(
sha1Mode
)
mNetscapeStepUpPolicy
(
netscapeStepUpPolicy
)
mOriginAttributes
(
originAttributes
)
mBuiltChain
(
builtChain
)
mPinningTelemetryInfo
(
pinningTelemetryInfo
)
mHostname
(
hostname
)
mCertBlocklist
(
do_GetService
(
NS_CERTBLOCKLIST_CONTRACTID
)
)
mOCSPStaplingStatus
(
CertVerifier
:
:
OCSP_STAPLING_NEVER_CHECKED
)
mSCTListFromCertificate
(
)
mSCTListFromOCSPStapling
(
)
{
}
static
Result
FindIssuerInner
(
const
UniqueCERTCertList
&
candidates
bool
useRoots
Input
encodedIssuerName
TrustDomain
:
:
IssuerChecker
&
checker
bool
&
keepGoing
)
{
keepGoing
=
true
;
for
(
CERTCertListNode
*
n
=
CERT_LIST_HEAD
(
candidates
)
;
!
CERT_LIST_END
(
n
candidates
)
;
n
=
CERT_LIST_NEXT
(
n
)
)
{
bool
candidateIsRoot
=
!
!
n
-
>
cert
-
>
isRoot
;
if
(
candidateIsRoot
!
=
useRoots
)
{
continue
;
}
Input
certDER
;
Result
rv
=
certDER
.
Init
(
n
-
>
cert
-
>
derCert
.
data
n
-
>
cert
-
>
derCert
.
len
)
;
if
(
rv
!
=
Success
)
{
continue
;
}
const
SECItem
encodedIssuerNameItem
=
{
siBuffer
const_cast
<
unsigned
char
*
>
(
encodedIssuerName
.
UnsafeGetData
(
)
)
encodedIssuerName
.
GetLength
(
)
}
;
ScopedAutoSECItem
nameConstraints
;
SECStatus
srv
=
CERT_GetImposedNameConstraints
(
&
encodedIssuerNameItem
&
nameConstraints
)
;
if
(
srv
!
=
SECSuccess
)
{
if
(
PR_GetError
(
)
!
=
SEC_ERROR_EXTENSION_NOT_FOUND
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
rv
=
checker
.
Check
(
certDER
nullptr
keepGoing
)
;
}
else
{
Input
nameConstraintsInput
;
if
(
nameConstraintsInput
.
Init
(
nameConstraints
.
data
nameConstraints
.
len
)
!
=
Success
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
rv
=
checker
.
Check
(
certDER
&
nameConstraintsInput
keepGoing
)
;
}
if
(
rv
!
=
Success
)
{
return
rv
;
}
if
(
!
keepGoing
)
{
break
;
}
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
FindIssuer
(
Input
encodedIssuerName
IssuerChecker
&
checker
Time
)
{
SECItem
encodedIssuerNameItem
=
UnsafeMapInputToSECItem
(
encodedIssuerName
)
;
UniqueCERTCertList
candidates
(
CERT_CreateSubjectCertList
(
nullptr
CERT_GetDefaultCertDB
(
)
&
encodedIssuerNameItem
0
false
)
)
;
if
(
candidates
)
{
bool
keepGoing
;
Result
rv
=
FindIssuerInner
(
candidates
true
encodedIssuerName
checker
keepGoing
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
if
(
keepGoing
)
{
rv
=
FindIssuerInner
(
candidates
false
encodedIssuerName
checker
keepGoing
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
}
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
GetCertTrust
(
EndEntityOrCA
endEntityOrCA
const
CertPolicyId
&
policy
Input
candidateCertDER
TrustLevel
&
trustLevel
)
{
SECItem
candidateCertDERSECItem
=
UnsafeMapInputToSECItem
(
candidateCertDER
)
;
UniqueCERTCertificate
candidateCert
(
CERT_NewTempCertificate
(
CERT_GetDefaultCertDB
(
)
&
candidateCertDERSECItem
nullptr
false
true
)
)
;
if
(
!
candidateCert
)
{
return
MapPRErrorCodeToResult
(
PR_GetError
(
)
)
;
}
if
(
!
mCertBlocklist
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
mCertDBTrustType
=
=
trustSSL
)
{
bool
isCertRevoked
;
nsresult
nsrv
=
mCertBlocklist
-
>
IsCertRevoked
(
candidateCert
-
>
derIssuer
.
data
candidateCert
-
>
derIssuer
.
len
candidateCert
-
>
serialNumber
.
data
candidateCert
-
>
serialNumber
.
len
candidateCert
-
>
derSubject
.
data
candidateCert
-
>
derSubject
.
len
candidateCert
-
>
derPublicKey
.
data
candidateCert
-
>
derPublicKey
.
len
&
isCertRevoked
)
;
if
(
NS_FAILED
(
nsrv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
isCertRevoked
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
certificate
is
in
blocklist
"
)
)
;
return
Result
:
:
ERROR_REVOKED_CERTIFICATE
;
}
}
CERTCertTrust
trust
;
if
(
CERT_GetCertTrust
(
candidateCert
.
get
(
)
&
trust
)
=
=
SECSuccess
)
{
uint32_t
flags
=
SEC_GET_TRUST_FLAGS
(
&
trust
mCertDBTrustType
)
;
uint32_t
relevantTrustBit
=
endEntityOrCA
=
=
EndEntityOrCA
:
:
MustBeCA
?
CERTDB_TRUSTED_CA
:
CERTDB_TRUSTED
;
if
(
(
(
flags
&
(
relevantTrustBit
|
CERTDB_TERMINAL_RECORD
)
)
)
=
=
CERTDB_TERMINAL_RECORD
)
{
trustLevel
=
TrustLevel
:
:
ActivelyDistrusted
;
return
Success
;
}
if
(
flags
&
CERTDB_TRUSTED_CA
)
{
if
(
policy
.
IsAnyPolicy
(
)
)
{
trustLevel
=
TrustLevel
:
:
TrustAnchor
;
return
Success
;
}
if
(
CertIsAuthoritativeForEVPolicy
(
candidateCert
policy
)
)
{
trustLevel
=
TrustLevel
:
:
TrustAnchor
;
return
Success
;
}
}
}
trustLevel
=
TrustLevel
:
:
InheritsTrust
;
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
DigestBuf
(
Input
item
DigestAlgorithm
digestAlg
uint8_t
*
digestBuf
size_t
digestBufLen
)
{
return
DigestBufNSS
(
item
digestAlg
digestBuf
digestBufLen
)
;
}
static
TimeDuration
OCSPFetchingTypeToTimeoutTime
(
NSSCertDBTrustDomain
:
:
OCSPFetching
ocspFetching
)
{
switch
(
ocspFetching
)
{
case
NSSCertDBTrustDomain
:
:
FetchOCSPForDVSoftFail
:
return
TimeDuration
:
:
FromSeconds
(
2
)
;
case
NSSCertDBTrustDomain
:
:
FetchOCSPForEV
:
case
NSSCertDBTrustDomain
:
:
FetchOCSPForDVHardFail
:
return
TimeDuration
:
:
FromSeconds
(
10
)
;
case
NSSCertDBTrustDomain
:
:
NeverFetchOCSP
:
case
NSSCertDBTrustDomain
:
:
LocalOnlyOCSPForEV
:
MOZ_ASSERT_UNREACHABLE
(
"
we
should
never
see
this
OCSPFetching
type
here
"
)
;
break
;
}
MOZ_ASSERT_UNREACHABLE
(
"
we
'
re
not
handling
every
OCSPFetching
type
"
)
;
return
TimeDuration
:
:
FromSeconds
(
2
)
;
}
static
Result
GetOCSPAuthorityInfoAccessLocation
(
const
UniquePLArenaPool
&
arena
Input
aiaExtension
char
const
*
&
url
)
{
MOZ_ASSERT
(
arena
.
get
(
)
)
;
if
(
!
arena
.
get
(
)
)
{
return
Result
:
:
FATAL_ERROR_INVALID_ARGS
;
}
url
=
nullptr
;
SECItem
aiaExtensionSECItem
=
UnsafeMapInputToSECItem
(
aiaExtension
)
;
CERTAuthInfoAccess
*
*
aia
=
CERT_DecodeAuthInfoAccessExtension
(
arena
.
get
(
)
&
aiaExtensionSECItem
)
;
if
(
!
aia
)
{
return
Result
:
:
ERROR_CERT_BAD_ACCESS_LOCATION
;
}
for
(
size_t
i
=
0
;
aia
[
i
]
;
+
+
i
)
{
if
(
SECOID_FindOIDTag
(
&
aia
[
i
]
-
>
method
)
=
=
SEC_OID_PKIX_OCSP
)
{
CERTGeneralName
*
current
=
aia
[
i
]
-
>
location
;
if
(
!
current
)
{
continue
;
}
do
{
if
(
current
-
>
type
=
=
certURI
)
{
const
SECItem
&
location
=
current
-
>
name
.
other
;
if
(
location
.
len
>
1024
|
|
memchr
(
location
.
data
0
location
.
len
)
)
{
return
Result
:
:
ERROR_CERT_BAD_ACCESS_LOCATION
;
}
char
*
nullTerminatedURL
(
static_cast
<
char
*
>
(
PORT_ArenaAlloc
(
arena
.
get
(
)
location
.
len
+
1
)
)
)
;
if
(
!
nullTerminatedURL
)
{
return
Result
:
:
FATAL_ERROR_NO_MEMORY
;
}
memcpy
(
nullTerminatedURL
location
.
data
location
.
len
)
;
nullTerminatedURL
[
location
.
len
]
=
0
;
url
=
nullTerminatedURL
;
return
Success
;
}
current
=
CERT_GetNextGeneralName
(
current
)
;
}
while
(
current
!
=
aia
[
i
]
-
>
location
)
;
}
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
CheckRevocation
(
EndEntityOrCA
endEntityOrCA
const
CertID
&
certID
Time
time
Duration
validityDuration
const
Input
*
stapledOCSPResponse
const
Input
*
aiaExtension
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
Top
of
CheckRevocation
\
n
"
)
)
;
uint16_t
maxOCSPLifetimeInDays
=
10
;
if
(
endEntityOrCA
=
=
EndEntityOrCA
:
:
MustBeCA
)
{
maxOCSPLifetimeInDays
=
365
;
}
Result
stapledOCSPResponseResult
=
Success
;
if
(
stapledOCSPResponse
)
{
MOZ_ASSERT
(
endEntityOrCA
=
=
EndEntityOrCA
:
:
MustBeEndEntity
)
;
bool
expired
;
stapledOCSPResponseResult
=
VerifyAndMaybeCacheEncodedOCSPResponse
(
certID
time
maxOCSPLifetimeInDays
*
stapledOCSPResponse
ResponseWasStapled
expired
)
;
if
(
stapledOCSPResponseResult
=
=
Success
)
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_GOOD
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
stapled
OCSP
response
:
good
"
)
)
;
return
Success
;
}
if
(
stapledOCSPResponseResult
=
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
|
|
expired
)
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_EXPIRED
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
expired
stapled
OCSP
response
"
)
)
;
}
else
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_INVALID
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
stapled
OCSP
response
:
failure
"
)
)
;
return
stapledOCSPResponseResult
;
}
}
else
if
(
endEntityOrCA
=
=
EndEntityOrCA
:
:
MustBeEndEntity
)
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_NONE
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
no
stapled
OCSP
response
"
)
)
;
}
Result
cachedResponseResult
=
Success
;
Time
cachedResponseValidThrough
(
Time
:
:
uninitialized
)
;
bool
cachedResponsePresent
=
mOCSPCache
.
Get
(
certID
mOriginAttributes
cachedResponseResult
cachedResponseValidThrough
)
;
if
(
cachedResponsePresent
)
{
if
(
cachedResponseResult
=
=
Success
&
&
cachedResponseValidThrough
>
=
time
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
cached
OCSP
response
:
good
"
)
)
;
return
Success
;
}
if
(
cachedResponseResult
=
=
Result
:
:
ERROR_REVOKED_CERTIFICATE
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
cached
OCSP
response
:
revoked
"
)
)
;
return
Result
:
:
ERROR_REVOKED_CERTIFICATE
;
}
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
cached
OCSP
response
:
error
%
d
"
cachedResponseResult
)
)
;
if
(
cachedResponseResult
=
=
Success
&
&
cachedResponseValidThrough
<
time
)
{
cachedResponseResult
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
;
}
if
(
cachedResponseResult
!
=
Success
&
&
cachedResponseResult
!
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
&
&
cachedResponseResult
!
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
&
&
cachedResponseValidThrough
<
time
)
{
cachedResponseResult
=
Success
;
cachedResponsePresent
=
false
;
}
}
else
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
no
cached
OCSP
response
"
)
)
;
}
MOZ_ASSERT
(
(
!
cachedResponsePresent
&
&
cachedResponseResult
=
=
Success
)
|
|
(
cachedResponsePresent
&
&
cachedResponseResult
!
=
Success
)
)
;
bool
blocklistIsFresh
;
nsresult
nsrv
=
mCertBlocklist
-
>
IsBlocklistFresh
(
&
blocklistIsFresh
)
;
if
(
NS_FAILED
(
nsrv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
Duration
shortLifetime
(
mCertShortLifetimeInDays
*
Time
:
:
ONE_DAY_IN_SECONDS
)
;
if
(
(
mOCSPFetching
=
=
NeverFetchOCSP
)
|
|
(
validityDuration
<
shortLifetime
)
|
|
(
endEntityOrCA
=
=
EndEntityOrCA
:
:
MustBeCA
&
&
(
mOCSPFetching
=
=
FetchOCSPForDVHardFail
|
|
mOCSPFetching
=
=
FetchOCSPForDVSoftFail
|
|
blocklistIsFresh
)
)
)
{
if
(
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
return
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
;
}
if
(
mOCSPFetching
=
=
FetchOCSPForDVHardFail
&
&
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
)
{
return
Result
:
:
ERROR_OCSP_OLD_RESPONSE
;
}
return
Success
;
}
if
(
mOCSPFetching
=
=
LocalOnlyOCSPForEV
)
{
if
(
cachedResponseResult
!
=
Success
)
{
return
cachedResponseResult
;
}
return
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
;
}
UniquePLArenaPool
arena
(
PORT_NewArena
(
DER_DEFAULT_CHUNKSIZE
)
)
;
if
(
!
arena
)
{
return
Result
:
:
FATAL_ERROR_NO_MEMORY
;
}
Result
rv
;
const
char
*
url
=
nullptr
;
if
(
aiaExtension
)
{
rv
=
GetOCSPAuthorityInfoAccessLocation
(
arena
*
aiaExtension
url
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
}
if
(
!
url
)
{
if
(
mOCSPFetching
=
=
FetchOCSPForEV
|
|
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
return
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
;
}
if
(
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
)
{
return
Result
:
:
ERROR_OCSP_OLD_RESPONSE
;
}
if
(
stapledOCSPResponseResult
!
=
Success
)
{
return
stapledOCSPResponseResult
;
}
return
Success
;
}
Input
response
;
bool
attemptedRequest
;
if
(
cachedResponseResult
=
=
Success
|
|
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
|
|
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_OLD_RESPONSE
)
{
uint8_t
ocspRequest
[
OCSP_REQUEST_MAX_LENGTH
]
;
size_t
ocspRequestLength
;
rv
=
CreateEncodedOCSPRequest
(
*
this
certID
ocspRequest
ocspRequestLength
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
SECItem
ocspRequestItem
=
{
siBuffer
ocspRequest
static_cast
<
unsigned
int
>
(
ocspRequestLength
)
}
;
SECItem
*
responseSECItem
=
nullptr
;
Result
tempRV
=
DoOCSPRequest
(
arena
url
mOriginAttributes
&
ocspRequestItem
OCSPFetchingTypeToTimeoutTime
(
mOCSPFetching
)
mOCSPGetConfig
=
=
CertVerifier
:
:
ocspGetEnabled
responseSECItem
)
;
MOZ_ASSERT
(
(
tempRV
!
=
Success
)
|
|
responseSECItem
)
;
if
(
tempRV
!
=
Success
)
{
rv
=
tempRV
;
}
else
if
(
response
.
Init
(
responseSECItem
-
>
data
responseSECItem
-
>
len
)
!
=
Success
)
{
rv
=
Result
:
:
ERROR_OCSP_MALFORMED_RESPONSE
;
}
attemptedRequest
=
true
;
}
else
{
rv
=
cachedResponseResult
;
attemptedRequest
=
false
;
}
if
(
response
.
GetLength
(
)
=
=
0
)
{
Result
error
=
rv
;
if
(
attemptedRequest
)
{
Time
timeout
(
time
)
;
if
(
timeout
.
AddSeconds
(
ServerFailureDelaySeconds
)
!
=
Success
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
rv
=
mOCSPCache
.
Put
(
certID
mOriginAttributes
error
time
timeout
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
}
if
(
mOCSPFetching
!
=
FetchOCSPForDVSoftFail
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
SECFailure
after
"
"
OCSP
request
failure
"
)
)
;
return
error
;
}
if
(
cachedResponseResult
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
SECFailure
from
cached
"
"
response
after
OCSP
request
failure
"
)
)
;
return
cachedResponseResult
;
}
if
(
stapledOCSPResponseResult
!
=
Success
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
SECFailure
from
expired
"
"
stapled
response
after
OCSP
request
failure
"
)
)
;
return
stapledOCSPResponseResult
;
}
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
SECSuccess
after
"
"
OCSP
request
failure
"
)
)
;
return
Success
;
}
bool
expired
;
rv
=
VerifyAndMaybeCacheEncodedOCSPResponse
(
certID
time
maxOCSPLifetimeInDays
response
ResponseIsFromNetwork
expired
)
;
if
(
rv
=
=
Success
|
|
mOCSPFetching
!
=
FetchOCSPForDVSoftFail
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
after
VerifyEncodedOCSPResponse
"
)
)
;
return
rv
;
}
if
(
rv
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
|
|
rv
=
=
Result
:
:
ERROR_REVOKED_CERTIFICATE
)
{
return
rv
;
}
if
(
stapledOCSPResponseResult
!
=
Success
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
returning
SECFailure
from
expired
stapled
"
"
response
after
OCSP
request
verification
failure
"
)
)
;
return
stapledOCSPResponseResult
;
}
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
end
of
CheckRevocation
"
)
)
;
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
VerifyAndMaybeCacheEncodedOCSPResponse
(
const
CertID
&
certID
Time
time
uint16_t
maxLifetimeInDays
Input
encodedResponse
EncodedResponseSource
responseSource
bool
&
expired
)
{
Time
thisUpdate
(
Time
:
:
uninitialized
)
;
Time
validThrough
(
Time
:
:
uninitialized
)
;
OCSPVerificationTrustDomain
trustDomain
(
*
this
)
;
Result
rv
=
VerifyEncodedOCSPResponse
(
trustDomain
certID
time
maxLifetimeInDays
encodedResponse
expired
&
thisUpdate
&
validThrough
)
;
if
(
responseSource
=
=
ResponseWasStapled
&
&
expired
)
{
MOZ_ASSERT
(
rv
!
=
Success
)
;
return
rv
;
}
if
(
rv
!
=
Success
&
&
rv
!
=
Result
:
:
ERROR_REVOKED_CERTIFICATE
&
&
rv
!
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
validThrough
=
time
;
if
(
validThrough
.
AddSeconds
(
ServerFailureDelaySeconds
)
!
=
Success
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
}
if
(
responseSource
=
=
ResponseIsFromNetwork
|
|
rv
=
=
Success
|
|
rv
=
=
Result
:
:
ERROR_REVOKED_CERTIFICATE
|
|
rv
=
=
Result
:
:
ERROR_OCSP_UNKNOWN_CERT
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
caching
OCSP
response
"
)
)
;
Result
putRV
=
mOCSPCache
.
Put
(
certID
mOriginAttributes
rv
thisUpdate
validThrough
)
;
if
(
putRV
!
=
Success
)
{
return
putRV
;
}
}
return
rv
;
}
static
const
uint8_t
CNNIC_ROOT_CA_SUBJECT_DATA
[
]
=
"
\
x30
\
x32
\
x31
\
x0B
\
x30
\
x09
\
x06
\
x03
\
x55
\
x04
\
x06
\
x13
\
x02
\
x43
\
x4E
\
x31
\
x0E
\
x30
"
"
\
x0C
\
x06
\
x03
\
x55
\
x04
\
x0A
\
x13
\
x05
\
x43
\
x4E
\
x4E
\
x49
\
x43
\
x31
\
x13
\
x30
\
x11
\
x06
"
"
\
x03
\
x55
\
x04
\
x03
\
x13
\
x0A
\
x43
\
x4E
\
x4E
\
x49
\
x43
\
x20
\
x52
\
x4F
\
x4F
\
x54
"
;
static
const
uint8_t
CNNIC_EV_ROOT_CA_SUBJECT_DATA
[
]
=
"
\
x30
\
x81
\
x8A
\
x31
\
x0B
\
x30
\
x09
\
x06
\
x03
\
x55
\
x04
\
x06
\
x13
\
x02
\
x43
\
x4E
\
x31
\
x32
"
"
\
x30
\
x30
\
x06
\
x03
\
x55
\
x04
\
x0A
\
x0C
\
x29
\
x43
\
x68
\
x69
\
x6E
\
x61
\
x20
\
x49
\
x6E
\
x74
"
"
\
x65
\
x72
\
x6E
\
x65
\
x74
\
x20
\
x4E
\
x65
\
x74
\
x77
\
x6F
\
x72
\
x6B
\
x20
\
x49
\
x6E
\
x66
\
x6F
"
"
\
x72
\
x6D
\
x61
\
x74
\
x69
\
x6F
\
x6E
\
x20
\
x43
\
x65
\
x6E
\
x74
\
x65
\
x72
\
x31
\
x47
\
x30
\
x45
"
"
\
x06
\
x03
\
x55
\
x04
\
x03
\
x0C
\
x3E
\
x43
\
x68
\
x69
\
x6E
\
x61
\
x20
\
x49
\
x6E
\
x74
\
x65
\
x72
"
"
\
x6E
\
x65
\
x74
\
x20
\
x4E
\
x65
\
x74
\
x77
\
x6F
\
x72
\
x6B
\
x20
\
x49
\
x6E
\
x66
\
x6F
\
x72
\
x6D
"
"
\
x61
\
x74
\
x69
\
x6F
\
x6E
\
x20
\
x43
\
x65
\
x6E
\
x74
\
x65
\
x72
\
x20
\
x45
\
x56
\
x20
\
x43
\
x65
"
"
\
x72
\
x74
\
x69
\
x66
\
x69
\
x63
\
x61
\
x74
\
x65
\
x73
\
x20
\
x52
\
x6F
\
x6F
\
x74
"
;
class
WhitelistedCNNICHashBinarySearchComparator
{
public
:
explicit
WhitelistedCNNICHashBinarySearchComparator
(
const
uint8_t
*
aTarget
size_t
aTargetLength
)
:
mTarget
(
aTarget
)
{
MOZ_ASSERT
(
aTargetLength
=
=
CNNIC_WHITELIST_HASH_LEN
"
Hashes
should
be
of
the
same
length
.
"
)
;
}
int
operator
(
)
(
const
WhitelistedCNNICHash
val
)
const
{
return
memcmp
(
mTarget
val
.
hash
CNNIC_WHITELIST_HASH_LEN
)
;
}
private
:
const
uint8_t
*
mTarget
;
}
;
static
bool
CertIsStartComOrWoSign
(
const
CERTCertificate
*
cert
)
{
for
(
const
DataAndLength
&
dn
:
StartComAndWoSignDNs
)
{
if
(
cert
-
>
derSubject
.
len
=
=
dn
.
len
&
&
PodEqual
(
cert
-
>
derSubject
.
data
dn
.
data
dn
.
len
)
)
{
return
true
;
}
}
return
false
;
}
static
Result
CheckForStartComOrWoSign
(
const
UniqueCERTCertList
&
certChain
)
{
if
(
CERT_LIST_EMPTY
(
certChain
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
const
CERTCertListNode
*
endEntityNode
=
CERT_LIST_HEAD
(
certChain
)
;
if
(
!
endEntityNode
|
|
!
endEntityNode
-
>
cert
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
PRTime
notBefore
;
PRTime
notAfter
;
if
(
CERT_GetCertTimes
(
endEntityNode
-
>
cert
&
notBefore
&
notAfter
)
!
=
SECSuccess
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
static
const
PRTime
OCTOBER_21_2016
=
1477008000000000
;
if
(
notBefore
<
=
OCTOBER_21_2016
)
{
return
Success
;
}
for
(
const
CERTCertListNode
*
node
=
CERT_LIST_HEAD
(
certChain
)
;
!
CERT_LIST_END
(
node
certChain
)
;
node
=
CERT_LIST_NEXT
(
node
)
)
{
if
(
!
node
|
|
!
node
-
>
cert
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
CertIsStartComOrWoSign
(
node
-
>
cert
)
)
{
return
Result
:
:
ERROR_REVOKED_CERTIFICATE
;
}
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
IsChainValid
(
const
DERArray
&
certArray
Time
time
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
IsChainValid
"
)
)
;
UniqueCERTCertList
certList
;
SECStatus
srv
=
ConstructCERTCertListFromReversedDERArray
(
certArray
certList
)
;
if
(
srv
!
=
SECSuccess
)
{
return
MapPRErrorCodeToResult
(
PR_GetError
(
)
)
;
}
if
(
CERT_LIST_EMPTY
(
certList
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
Result
rv
=
CheckForStartComOrWoSign
(
certList
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
CERTCertListNode
*
rootNode
=
CERT_LIST_TAIL
(
certList
)
;
if
(
!
rootNode
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
CERTCertificate
*
root
=
rootNode
-
>
cert
;
if
(
!
root
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
(
root
-
>
derSubject
.
len
=
=
sizeof
(
CNNIC_ROOT_CA_SUBJECT_DATA
)
-
1
&
&
memcmp
(
root
-
>
derSubject
.
data
CNNIC_ROOT_CA_SUBJECT_DATA
root
-
>
derSubject
.
len
)
=
=
0
)
|
|
(
root
-
>
derSubject
.
len
=
=
sizeof
(
CNNIC_EV_ROOT_CA_SUBJECT_DATA
)
-
1
&
&
memcmp
(
root
-
>
derSubject
.
data
CNNIC_EV_ROOT_CA_SUBJECT_DATA
root
-
>
derSubject
.
len
)
=
=
0
)
)
{
CERTCertListNode
*
certNode
=
CERT_LIST_HEAD
(
certList
)
;
if
(
!
certNode
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
CERTCertificate
*
cert
=
certNode
-
>
cert
;
if
(
!
cert
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
Digest
digest
;
nsresult
nsrv
=
digest
.
DigestBuf
(
SEC_OID_SHA256
cert
-
>
derCert
.
data
cert
-
>
derCert
.
len
)
;
if
(
NS_FAILED
(
nsrv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
const
uint8_t
*
certHash
(
BitwiseCast
<
uint8_t
*
unsigned
char
*
>
(
digest
.
get
(
)
.
data
)
)
;
size_t
certHashLen
=
digest
.
get
(
)
.
len
;
size_t
unused
;
if
(
!
mozilla
:
:
BinarySearchIf
(
WhitelistedCNNICHashes
0
ArrayLength
(
WhitelistedCNNICHashes
)
WhitelistedCNNICHashBinarySearchComparator
(
certHash
certHashLen
)
&
unused
)
)
{
return
Result
:
:
ERROR_REVOKED_CERTIFICATE
;
}
}
bool
isBuiltInRoot
=
false
;
rv
=
IsCertBuiltInRoot
(
root
isBuiltInRoot
)
;
if
(
rv
!
=
Success
)
{
return
rv
;
}
bool
skipPinningChecksBecauseOfMITMMode
=
(
!
isBuiltInRoot
&
&
mPinningMode
=
=
CertVerifier
:
:
pinningAllowUserCAMITM
)
;
if
(
mHostname
&
&
(
mPinningMode
!
=
CertVerifier
:
:
pinningDisabled
)
&
&
!
skipPinningChecksBecauseOfMITMMode
)
{
bool
enforceTestMode
=
(
mPinningMode
=
=
CertVerifier
:
:
pinningEnforceTestMode
)
;
bool
chainHasValidPins
;
nsresult
nsrv
=
PublicKeyPinningService
:
:
ChainHasValidPins
(
certList
mHostname
time
enforceTestMode
chainHasValidPins
mPinningTelemetryInfo
)
;
if
(
NS_FAILED
(
nsrv
)
)
{
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
if
(
!
chainHasValidPins
)
{
return
Result
:
:
ERROR_KEY_PINNING_FAILURE
;
}
}
mBuiltChain
=
Move
(
certList
)
;
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
CheckSignatureDigestAlgorithm
(
DigestAlgorithm
aAlg
EndEntityOrCA
endEntityOrCA
Time
notBefore
)
{
static
const
Time
JANUARY_FIRST_2016
=
TimeFromEpochInSeconds
(
1451606400
)
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
NSSCertDBTrustDomain
:
CheckSignatureDigestAlgorithm
"
)
)
;
if
(
aAlg
=
=
DigestAlgorithm
:
:
sha1
)
{
switch
(
mSHA1Mode
)
{
case
CertVerifier
:
:
SHA1Mode
:
:
Forbidden
:
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
SHA
-
1
certificate
rejected
"
)
)
;
return
Result
:
:
ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
;
case
CertVerifier
:
:
SHA1Mode
:
:
ImportedRootOrBefore2016
:
if
(
JANUARY_FIRST_2016
<
=
notBefore
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
Post
-
2015
SHA
-
1
certificate
rejected
"
)
)
;
return
Result
:
:
ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
;
}
break
;
case
CertVerifier
:
:
SHA1Mode
:
:
Allowed
:
case
CertVerifier
:
:
SHA1Mode
:
:
ImportedRoot
:
default
:
break
;
case
CertVerifier
:
:
SHA1Mode
:
:
UsedToBeBefore2016ButNowIsForbidden
:
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
SHA1Mode
type
"
)
;
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
CheckRSAPublicKeyModulusSizeInBits
(
EndEntityOrCA
unsigned
int
modulusSizeInBits
)
{
if
(
modulusSizeInBits
<
mMinRSABits
)
{
return
Result
:
:
ERROR_INADEQUATE_KEY_SIZE
;
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
VerifyRSAPKCS1SignedDigest
(
const
SignedDigest
&
signedDigest
Input
subjectPublicKeyInfo
)
{
return
VerifyRSAPKCS1SignedDigestNSS
(
signedDigest
subjectPublicKeyInfo
mPinArg
)
;
}
Result
NSSCertDBTrustDomain
:
:
CheckECDSACurveIsAcceptable
(
EndEntityOrCA
NamedCurve
curve
)
{
switch
(
curve
)
{
case
NamedCurve
:
:
secp256r1
:
case
NamedCurve
:
:
secp384r1
:
case
NamedCurve
:
:
secp521r1
:
return
Success
;
}
return
Result
:
:
ERROR_UNSUPPORTED_ELLIPTIC_CURVE
;
}
Result
NSSCertDBTrustDomain
:
:
VerifyECDSASignedDigest
(
const
SignedDigest
&
signedDigest
Input
subjectPublicKeyInfo
)
{
return
VerifyECDSASignedDigestNSS
(
signedDigest
subjectPublicKeyInfo
mPinArg
)
;
}
Result
NSSCertDBTrustDomain
:
:
CheckValidityIsAcceptable
(
Time
notBefore
Time
notAfter
EndEntityOrCA
endEntityOrCA
KeyPurposeId
keyPurpose
)
{
if
(
endEntityOrCA
!
=
EndEntityOrCA
:
:
MustBeEndEntity
)
{
return
Success
;
}
if
(
keyPurpose
=
=
KeyPurposeId
:
:
id_kp_OCSPSigning
)
{
return
Success
;
}
Duration
DURATION_27_MONTHS_PLUS_SLOP
(
(
2
*
365
+
3
*
31
+
7
)
*
Time
:
:
ONE_DAY_IN_SECONDS
)
;
Duration
maxValidityDuration
(
UINT64_MAX
)
;
Duration
validityDuration
(
notBefore
notAfter
)
;
switch
(
mValidityCheckingMode
)
{
case
ValidityCheckingMode
:
:
CheckingOff
:
return
Success
;
case
ValidityCheckingMode
:
:
CheckForEV
:
maxValidityDuration
=
DURATION_27_MONTHS_PLUS_SLOP
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
We
'
re
not
handling
every
ValidityCheckingMode
type
"
)
;
}
if
(
validityDuration
>
maxValidityDuration
)
{
return
Result
:
:
ERROR_VALIDITY_TOO_LONG
;
}
return
Success
;
}
Result
NSSCertDBTrustDomain
:
:
NetscapeStepUpMatchesServerAuth
(
Time
notBefore
bool
&
matches
)
{
static
const
Time
AUGUST_23_2015
=
TimeFromEpochInSeconds
(
1440288000
)
;
static
const
Time
AUGUST_23_2016
=
TimeFromEpochInSeconds
(
1471910400
)
;
switch
(
mNetscapeStepUpPolicy
)
{
case
NetscapeStepUpPolicy
:
:
AlwaysMatch
:
matches
=
true
;
return
Success
;
case
NetscapeStepUpPolicy
:
:
MatchBefore23August2016
:
matches
=
notBefore
<
AUGUST_23_2016
;
return
Success
;
case
NetscapeStepUpPolicy
:
:
MatchBefore23August2015
:
matches
=
notBefore
<
AUGUST_23_2015
;
return
Success
;
case
NetscapeStepUpPolicy
:
:
NeverMatch
:
matches
=
false
;
return
Success
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
unhandled
NetscapeStepUpPolicy
type
"
)
;
}
return
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
;
}
void
NSSCertDBTrustDomain
:
:
ResetAccumulatedState
(
)
{
mOCSPStaplingStatus
=
CertVerifier
:
:
OCSP_STAPLING_NEVER_CHECKED
;
mSCTListFromOCSPStapling
=
nullptr
;
mSCTListFromCertificate
=
nullptr
;
}
static
Input
SECItemToInput
(
const
UniqueSECItem
&
item
)
{
Input
result
;
if
(
item
)
{
MOZ_ASSERT
(
item
-
>
type
=
=
siBuffer
)
;
Result
rv
=
result
.
Init
(
item
-
>
data
item
-
>
len
)
;
MOZ_ASSERT
(
rv
=
=
Success
)
;
Unused
<
<
rv
;
}
return
result
;
}
Input
NSSCertDBTrustDomain
:
:
GetSCTListFromCertificate
(
)
const
{
return
SECItemToInput
(
mSCTListFromCertificate
)
;
}
Input
NSSCertDBTrustDomain
:
:
GetSCTListFromOCSPStapling
(
)
const
{
return
SECItemToInput
(
mSCTListFromOCSPStapling
)
;
}
void
NSSCertDBTrustDomain
:
:
NoteAuxiliaryExtension
(
AuxiliaryExtension
extension
Input
extensionData
)
{
UniqueSECItem
*
out
=
nullptr
;
switch
(
extension
)
{
case
AuxiliaryExtension
:
:
EmbeddedSCTList
:
out
=
&
mSCTListFromCertificate
;
break
;
case
AuxiliaryExtension
:
:
SCTListFromOCSPResponse
:
out
=
&
mSCTListFromOCSPStapling
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
unhandled
AuxiliaryExtension
"
)
;
}
if
(
out
)
{
SECItem
extensionDataItem
=
UnsafeMapInputToSECItem
(
extensionData
)
;
out
-
>
reset
(
SECITEM_DupItem
(
&
extensionDataItem
)
)
;
}
}
SECStatus
InitializeNSS
(
const
char
*
dir
bool
readOnly
bool
loadPKCS11Modules
)
{
uint32_t
flags
=
NSS_INIT_NOROOTINIT
|
NSS_INIT_OPTIMIZESPACE
;
if
(
readOnly
)
{
flags
|
=
NSS_INIT_READONLY
;
}
if
(
!
loadPKCS11Modules
)
{
flags
|
=
NSS_INIT_NOMODDB
;
}
return
:
:
NSS_Initialize
(
dir
"
"
"
"
SECMOD_DB
flags
)
;
}
void
DisableMD5
(
)
{
NSS_SetAlgorithmPolicy
(
SEC_OID_MD5
0
NSS_USE_ALG_IN_CERT_SIGNATURE
|
NSS_USE_ALG_IN_CMS_SIGNATURE
)
;
NSS_SetAlgorithmPolicy
(
SEC_OID_PKCS1_MD5_WITH_RSA_ENCRYPTION
0
NSS_USE_ALG_IN_CERT_SIGNATURE
|
NSS_USE_ALG_IN_CMS_SIGNATURE
)
;
NSS_SetAlgorithmPolicy
(
SEC_OID_PKCS5_PBE_WITH_MD5_AND_DES_CBC
0
NSS_USE_ALG_IN_CERT_SIGNATURE
|
NSS_USE_ALG_IN_CMS_SIGNATURE
)
;
}
bool
LoadLoadableRoots
(
const
nsCString
&
dir
const
nsCString
&
modNameUTF8
)
{
UniquePRLibraryName
fullLibraryPath
(
PR_GetLibraryName
(
dir
.
IsEmpty
(
)
?
nullptr
:
dir
.
get
(
)
"
nssckbi
"
)
)
;
if
(
!
fullLibraryPath
)
{
return
false
;
}
nsAutoCString
escapedFullLibraryPath
(
fullLibraryPath
.
get
(
)
)
;
escapedFullLibraryPath
.
ReplaceSubstring
(
"
\
\
"
"
\
\
\
\
"
)
;
escapedFullLibraryPath
.
ReplaceSubstring
(
"
\
"
"
"
\
\
\
"
"
)
;
if
(
escapedFullLibraryPath
.
IsEmpty
(
)
)
{
return
false
;
}
int
unusedModType
;
Unused
<
<
SECMOD_DeleteModule
(
modNameUTF8
.
get
(
)
&
unusedModType
)
;
nsAutoCString
pkcs11ModuleSpec
;
pkcs11ModuleSpec
.
AppendPrintf
(
"
name
=
\
"
%
s
\
"
library
=
\
"
%
s
\
"
"
modNameUTF8
.
get
(
)
escapedFullLibraryPath
.
get
(
)
)
;
if
(
pkcs11ModuleSpec
.
IsEmpty
(
)
)
{
return
false
;
}
UniqueSECMODModule
rootsModule
(
SECMOD_LoadUserModule
(
const_cast
<
char
*
>
(
pkcs11ModuleSpec
.
get
(
)
)
nullptr
false
)
)
;
if
(
!
rootsModule
)
{
return
false
;
}
if
(
!
rootsModule
-
>
loaded
)
{
return
false
;
}
return
true
;
}
void
UnloadLoadableRoots
(
const
char
*
modNameUTF8
)
{
MOZ_ASSERT
(
modNameUTF8
)
;
UniqueSECMODModule
rootsModule
(
SECMOD_FindModule
(
modNameUTF8
)
)
;
if
(
rootsModule
)
{
SECMOD_UnloadUserModule
(
rootsModule
.
get
(
)
)
;
}
}
nsresult
DefaultServerNicknameForCert
(
const
CERTCertificate
*
cert
nsCString
&
nickname
)
{
MOZ_ASSERT
(
cert
)
;
NS_ENSURE_ARG_POINTER
(
cert
)
;
UniquePORTString
baseName
(
CERT_GetCommonName
(
&
cert
-
>
subject
)
)
;
if
(
!
baseName
)
{
baseName
=
UniquePORTString
(
CERT_GetOrgUnitName
(
&
cert
-
>
subject
)
)
;
}
if
(
!
baseName
)
{
baseName
=
UniquePORTString
(
CERT_GetOrgName
(
&
cert
-
>
subject
)
)
;
}
if
(
!
baseName
)
{
baseName
=
UniquePORTString
(
CERT_GetLocalityName
(
&
cert
-
>
subject
)
)
;
}
if
(
!
baseName
)
{
baseName
=
UniquePORTString
(
CERT_GetStateName
(
&
cert
-
>
subject
)
)
;
}
if
(
!
baseName
)
{
baseName
=
UniquePORTString
(
CERT_GetCountryName
(
&
cert
-
>
subject
)
)
;
}
if
(
!
baseName
)
{
return
NS_ERROR_FAILURE
;
}
static
const
uint32_t
ARBITRARY_LIMIT
=
500
;
for
(
uint32_t
count
=
1
;
count
<
ARBITRARY_LIMIT
;
count
+
+
)
{
nickname
=
baseName
.
get
(
)
;
if
(
count
!
=
1
)
{
nickname
.
AppendPrintf
(
"
#
%
u
"
count
)
;
}
if
(
nickname
.
IsEmpty
(
)
)
{
return
NS_ERROR_FAILURE
;
}
bool
conflict
=
SEC_CertNicknameConflict
(
nickname
.
get
(
)
&
cert
-
>
derSubject
cert
-
>
dbhandle
)
;
if
(
!
conflict
)
{
return
NS_OK
;
}
}
return
NS_ERROR_FAILURE
;
}
void
SaveIntermediateCerts
(
const
UniqueCERTCertList
&
certList
)
{
if
(
!
certList
)
{
return
;
}
UniquePK11SlotInfo
slot
(
PK11_GetInternalKeySlot
(
)
)
;
if
(
!
slot
)
{
return
;
}
bool
isEndEntity
=
true
;
for
(
CERTCertListNode
*
node
=
CERT_LIST_HEAD
(
certList
)
;
!
CERT_LIST_END
(
node
certList
)
;
node
=
CERT_LIST_NEXT
(
node
)
)
{
if
(
isEndEntity
)
{
isEndEntity
=
false
;
continue
;
}
if
(
node
-
>
cert
-
>
slot
)
{
continue
;
}
if
(
node
-
>
cert
-
>
isperm
)
{
continue
;
}
if
(
node
=
=
CERT_LIST_TAIL
(
certList
)
)
{
continue
;
}
nsAutoCString
nickname
;
nsresult
rv
=
DefaultServerNicknameForCert
(
node
-
>
cert
nickname
)
;
if
(
NS_FAILED
(
rv
)
)
{
continue
;
}
Unused
<
<
PK11_ImportCert
(
slot
.
get
(
)
node
-
>
cert
CK_INVALID_HANDLE
nickname
.
get
(
)
false
)
;
}
}
}
}
