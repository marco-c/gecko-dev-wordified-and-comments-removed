extern
crate
hashlink
;
use
hashlink
:
:
LruCache
;
use
std
:
:
sync
:
:
Mutex
;
const
SHA512_LENGTH_IN_BYTES
:
usize
=
64
;
pub
struct
SignatureCache
{
cache
:
Mutex
<
LruCache
<
[
u8
;
SHA512_LENGTH_IN_BYTES
]
(
)
>
>
}
impl
SignatureCache
{
fn
new
(
capacity
:
u16
)
-
>
SignatureCache
{
SignatureCache
{
cache
:
Mutex
:
:
new
(
LruCache
:
:
new
(
capacity
as
usize
)
)
}
}
fn
get
(
&
mut
self
sha512_hash
:
&
[
u8
;
SHA512_LENGTH_IN_BYTES
]
)
-
>
bool
{
let
Ok
(
mut
cache
)
=
self
.
cache
.
lock
(
)
else
{
return
false
;
}
;
cache
.
get
(
sha512_hash
)
.
is_some
(
)
}
fn
insert
(
&
self
sha512_hash
:
[
u8
;
SHA512_LENGTH_IN_BYTES
]
)
{
let
Ok
(
mut
cache
)
=
self
.
cache
.
lock
(
)
else
{
return
;
}
;
let
_
=
cache
.
insert
(
sha512_hash
(
)
)
;
}
}
#
[
no_mangle
]
pub
extern
"
C
"
fn
signature_cache_new
(
capacity
:
u16
)
-
>
*
mut
SignatureCache
{
Box
:
:
into_raw
(
Box
:
:
new
(
SignatureCache
:
:
new
(
capacity
)
)
)
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
signature_cache_free
(
signature_cache
:
*
mut
SignatureCache
)
{
if
signature_cache
.
is_null
(
)
{
return
;
}
let
_
=
Box
:
:
from_raw
(
signature_cache
)
;
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
signature_cache_get
(
signature_cache
:
*
mut
SignatureCache
sha512_hash
:
*
const
u8
)
-
>
bool
{
if
signature_cache
.
is_null
(
)
|
|
sha512_hash
.
is_null
(
)
{
return
false
;
}
let
sha512_hash
=
std
:
:
slice
:
:
from_raw_parts
(
sha512_hash
SHA512_LENGTH_IN_BYTES
)
;
let
Ok
(
sha512_hash
)
=
sha512_hash
.
try_into
(
)
else
{
return
false
;
}
;
let
signature_cache
=
&
mut
*
signature_cache
;
signature_cache
.
get
(
&
sha512_hash
)
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
signature_cache_insert
(
signature_cache
:
*
mut
SignatureCache
sha512_hash
:
*
const
u8
)
{
if
signature_cache
.
is_null
(
)
|
|
sha512_hash
.
is_null
(
)
{
return
;
}
let
sha512_hash
=
std
:
:
slice
:
:
from_raw_parts
(
sha512_hash
SHA512_LENGTH_IN_BYTES
)
;
let
Ok
(
sha512_hash
)
=
sha512_hash
.
try_into
(
)
else
{
return
;
}
;
let
signature_cache
=
&
mut
*
signature_cache
;
signature_cache
.
insert
(
sha512_hash
)
;
}
