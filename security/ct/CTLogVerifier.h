#
ifndef
CTLogVerifier_h
#
define
CTLogVerifier_h
#
include
<
memory
>
#
include
"
CTLog
.
h
"
#
include
"
CTUtils
.
h
"
#
include
"
SignedCertificateTimestamp
.
h
"
#
include
"
SignedTreeHead
.
h
"
#
include
"
pkix
/
Input
.
h
"
#
include
"
pkix
/
Result
.
h
"
#
include
"
pkix
/
pkix
.
h
"
namespace
mozilla
{
namespace
ct
{
class
CTLogVerifier
{
public
:
CTLogVerifier
(
)
;
pkix
:
:
Result
Init
(
pkix
:
:
Input
subjectPublicKeyInfo
CTLogOperatorId
operatorId
CTLogStatus
logStatus
uint64_t
disqualificationTime
)
;
const
Buffer
&
keyId
(
)
const
{
return
mKeyId
;
}
CTLogOperatorId
operatorId
(
)
const
{
return
mOperatorId
;
}
bool
isDisqualified
(
)
const
{
return
mDisqualified
;
}
uint64_t
disqualificationTime
(
)
const
{
return
mDisqualificationTime
;
}
pkix
:
:
Result
Verify
(
const
LogEntry
&
entry
const
SignedCertificateTimestamp
&
sct
)
;
pkix
:
:
Result
VerifySignedTreeHead
(
const
SignedTreeHead
&
sth
)
;
bool
SignatureParametersMatch
(
const
DigitallySigned
&
signature
)
;
private
:
pkix
:
:
Result
VerifySignature
(
pkix
:
:
Input
data
pkix
:
:
Input
signature
)
;
pkix
:
:
Result
VerifySignature
(
const
Buffer
&
data
const
Buffer
&
signature
)
;
UniqueSECKEYPublicKey
mPublicECKey
;
Buffer
mSubjectPublicKeyInfo
;
Buffer
mKeyId
;
DigitallySigned
:
:
SignatureAlgorithm
mSignatureAlgorithm
;
CTLogOperatorId
mOperatorId
;
bool
mDisqualified
;
uint64_t
mDisqualificationTime
;
}
;
}
}
#
endif
