#
include
"
CTPolicyEnforcer
.
h
"
#
include
<
algorithm
>
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
extern
mozilla
:
:
LazyLogModule
gCertVerifierLog
;
namespace
mozilla
{
namespace
ct
{
using
namespace
mozilla
:
:
pkix
;
static
size_t
GetRequiredEmbeddedSctsCount
(
size_t
certLifetimeInFullCalendarMonths
)
{
return
1
+
(
certLifetimeInFullCalendarMonths
+
9
)
/
12
;
}
static
bool
HasValidEmbeddedSct
(
const
VerifiedSCTList
&
verifiedScts
)
{
for
(
const
VerifiedSCT
&
verifiedSct
:
verifiedScts
)
{
if
(
verifiedSct
.
status
=
=
VerifiedSCT
:
:
Status
:
:
Valid
&
&
verifiedSct
.
origin
=
=
VerifiedSCT
:
:
Origin
:
:
Embedded
)
{
return
true
;
}
}
return
false
;
}
static
bool
HasValidNonEmbeddedSct
(
const
VerifiedSCTList
&
verifiedScts
)
{
for
(
const
VerifiedSCT
&
verifiedSct
:
verifiedScts
)
{
if
(
verifiedSct
.
status
=
=
VerifiedSCT
:
:
Status
:
:
Valid
&
&
(
verifiedSct
.
origin
=
=
VerifiedSCT
:
:
Origin
:
:
TLSExtension
|
|
verifiedSct
.
origin
=
=
VerifiedSCT
:
:
Origin
:
:
OCSPResponse
)
)
{
return
true
;
}
}
return
false
;
}
template
<
typename
SelectFunc
>
void
CountIndependentLogOperatorsForSelectedScts
(
const
VerifiedSCTList
&
verifiedScts
const
CTLogOperatorList
&
dependentOperators
size_t
&
count
SelectFunc
selected
)
{
CTLogOperatorList
operatorIds
;
for
(
const
VerifiedSCT
&
verifiedSct
:
verifiedScts
)
{
CTLogOperatorId
sctLogOperatorId
=
verifiedSct
.
logOperatorId
;
bool
isDependentOperator
=
false
;
for
(
CTLogOperatorId
dependentOperator
:
dependentOperators
)
{
if
(
sctLogOperatorId
=
=
dependentOperator
)
{
isDependentOperator
=
true
;
break
;
}
}
if
(
isDependentOperator
|
|
!
selected
(
verifiedSct
)
)
{
continue
;
}
bool
alreadyAdded
=
false
;
for
(
CTLogOperatorId
id
:
operatorIds
)
{
if
(
id
=
=
sctLogOperatorId
)
{
alreadyAdded
=
true
;
break
;
}
}
if
(
!
alreadyAdded
)
{
operatorIds
.
push_back
(
sctLogOperatorId
)
;
}
}
count
=
operatorIds
.
size
(
)
;
}
template
<
typename
SelectFunc
>
static
void
CountLogsForSelectedScts
(
const
VerifiedSCTList
&
verifiedScts
size_t
&
count
SelectFunc
selected
)
{
std
:
:
vector
<
const
Buffer
*
>
logIds
;
for
(
const
VerifiedSCT
&
verifiedSct
:
verifiedScts
)
{
if
(
!
selected
(
verifiedSct
)
)
{
continue
;
}
const
Buffer
*
sctLogId
=
&
verifiedSct
.
sct
.
logId
;
bool
alreadyAdded
=
false
;
for
(
const
Buffer
*
logId
:
logIds
)
{
if
(
*
logId
=
=
*
sctLogId
)
{
alreadyAdded
=
true
;
break
;
}
}
if
(
!
alreadyAdded
)
{
logIds
.
push_back
(
sctLogId
)
;
}
}
count
=
logIds
.
size
(
)
;
}
static
uint64_t
GetEffectiveCertIssuanceTime
(
const
VerifiedSCTList
&
verifiedScts
)
{
uint64_t
result
=
UINT64_MAX
;
for
(
const
VerifiedSCT
&
verifiedSct
:
verifiedScts
)
{
if
(
verifiedSct
.
status
=
=
VerifiedSCT
:
:
Status
:
:
Valid
)
{
result
=
std
:
:
min
(
result
verifiedSct
.
sct
.
timestamp
)
;
}
}
return
result
;
}
static
bool
LogWasQualifiedForSct
(
const
VerifiedSCT
&
verifiedSct
uint64_t
certIssuanceTime
)
{
if
(
verifiedSct
.
status
=
=
VerifiedSCT
:
:
Status
:
:
Valid
)
{
return
true
;
}
if
(
verifiedSct
.
status
=
=
VerifiedSCT
:
:
Status
:
:
ValidFromDisqualifiedLog
)
{
uint64_t
logDisqualificationTime
=
verifiedSct
.
logDisqualificationTime
;
return
certIssuanceTime
<
logDisqualificationTime
&
&
verifiedSct
.
sct
.
timestamp
<
logDisqualificationTime
;
}
return
false
;
}
static
void
CheckOperatorDiversityCompliance
(
const
VerifiedSCTList
&
verifiedScts
uint64_t
certIssuanceTime
const
CTLogOperatorList
&
dependentOperators
bool
&
compliant
)
{
size_t
independentOperatorsCount
;
CountIndependentLogOperatorsForSelectedScts
(
verifiedScts
dependentOperators
independentOperatorsCount
[
certIssuanceTime
]
(
const
VerifiedSCT
&
verifiedSct
)
-
>
bool
{
return
LogWasQualifiedForSct
(
verifiedSct
certIssuanceTime
)
;
}
)
;
compliant
=
independentOperatorsCount
>
=
2
;
}
static
void
CheckNonEmbeddedCompliance
(
const
VerifiedSCTList
&
verifiedScts
bool
&
compliant
)
{
if
(
!
HasValidNonEmbeddedSct
(
verifiedScts
)
)
{
compliant
=
false
;
return
;
}
size_t
validSctsCount
;
CountLogsForSelectedScts
(
verifiedScts
validSctsCount
[
]
(
const
VerifiedSCT
&
verifiedSct
)
-
>
bool
{
return
verifiedSct
.
status
=
=
VerifiedSCT
:
:
Status
:
:
Valid
;
}
)
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
CT
Policy
non
-
embedded
case
status
:
validSCTs
=
%
zu
\
n
"
validSctsCount
)
)
;
compliant
=
validSctsCount
>
=
2
;
}
static
void
CheckEmbeddedCompliance
(
const
VerifiedSCTList
&
verifiedScts
size_t
certLifetimeInCalendarMonths
uint64_t
certIssuanceTime
bool
&
compliant
)
{
if
(
!
HasValidEmbeddedSct
(
verifiedScts
)
)
{
compliant
=
false
;
return
;
}
size_t
embeddedSctsCount
;
CountLogsForSelectedScts
(
verifiedScts
embeddedSctsCount
[
certIssuanceTime
]
(
const
VerifiedSCT
&
verifiedSct
)
-
>
bool
{
return
verifiedSct
.
origin
=
=
VerifiedSCT
:
:
Origin
:
:
Embedded
&
&
LogWasQualifiedForSct
(
verifiedSct
certIssuanceTime
)
;
}
)
;
size_t
requiredSctsCount
=
GetRequiredEmbeddedSctsCount
(
certLifetimeInCalendarMonths
)
;
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
CT
Policy
embedded
case
status
:
"
"
requiredSCTs
=
%
zu
embeddedSCTs
=
%
zu
\
n
"
requiredSctsCount
embeddedSctsCount
)
)
;
compliant
=
embeddedSctsCount
>
=
requiredSctsCount
;
}
void
CTPolicyEnforcer
:
:
CheckCompliance
(
const
VerifiedSCTList
&
verifiedScts
size_t
certLifetimeInCalendarMonths
const
CTLogOperatorList
&
dependentOperators
CTPolicyCompliance
&
compliance
)
{
uint64_t
certIssuanceTime
=
GetEffectiveCertIssuanceTime
(
verifiedScts
)
;
bool
diversityOK
;
CheckOperatorDiversityCompliance
(
verifiedScts
certIssuanceTime
dependentOperators
diversityOK
)
;
if
(
diversityOK
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
CT
Policy
:
diversity
satisfied
\
n
"
)
)
;
}
bool
nonEmbeddedCaseOK
;
CheckNonEmbeddedCompliance
(
verifiedScts
nonEmbeddedCaseOK
)
;
if
(
nonEmbeddedCaseOK
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
CT
Policy
:
non
-
embedded
case
satisfied
)
\
n
"
)
)
;
}
bool
embeddedCaseOK
;
CheckEmbeddedCompliance
(
verifiedScts
certLifetimeInCalendarMonths
certIssuanceTime
embeddedCaseOK
)
;
if
(
embeddedCaseOK
)
{
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
CT
Policy
:
embedded
case
satisfied
\
n
"
)
)
;
}
if
(
nonEmbeddedCaseOK
|
|
embeddedCaseOK
)
{
compliance
=
diversityOK
?
CTPolicyCompliance
:
:
Compliant
:
CTPolicyCompliance
:
:
NotDiverseScts
;
}
else
{
compliance
=
CTPolicyCompliance
:
:
NotEnoughScts
;
}
switch
(
compliance
)
{
case
CTPolicyCompliance
:
:
Compliant
:
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
CT
Policy
compliance
:
Compliant
\
n
"
)
)
;
break
;
case
CTPolicyCompliance
:
:
NotEnoughScts
:
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
CT
Policy
compliance
:
NotEnoughScts
\
n
"
)
)
;
break
;
case
CTPolicyCompliance
:
:
NotDiverseScts
:
MOZ_LOG
(
gCertVerifierLog
LogLevel
:
:
Debug
(
"
CT
Policy
compliance
:
NotDiverseScts
\
n
"
)
)
;
break
;
case
CTPolicyCompliance
:
:
Unknown
:
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
CTPolicyCompliance
type
"
)
;
}
}
}
}
