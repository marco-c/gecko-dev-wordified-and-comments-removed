#
ifndef
CTTestUtils_h
#
define
CTTestUtils_h
#
include
<
iostream
>
#
include
"
mozpkix
/
Input
.
h
"
#
include
"
mozpkix
/
Time
.
h
"
#
include
"
seccomon
.
h
"
#
include
"
SignedCertificateTimestamp
.
h
"
#
include
"
SignedTreeHead
.
h
"
namespace
mozilla
{
namespace
ct
{
void
GetX509CertLogEntry
(
LogEntry
&
entry
)
;
Buffer
GetDEREncodedX509Cert
(
)
;
void
GetPrecertLogEntry
(
LogEntry
&
entry
)
;
Buffer
GetTestDigitallySigned
(
)
;
Buffer
GetTestDigitallySignedData
(
)
;
Buffer
GetTestSignedCertificateTimestamp
(
)
;
Buffer
GetTestInclusionProof
(
)
;
Buffer
GetTestInclusionProofUnexpectedData
(
)
;
Buffer
GetTestInclusionProofInvalidHashSize
(
)
;
Buffer
GetTestInclusionProofInvalidHash
(
)
;
Buffer
GetTestInclusionProofMissingLogId
(
)
;
Buffer
GetTestInclusionProofNullPathLength
(
)
;
Buffer
GetTestInclusionProofPathLengthTooSmall
(
)
;
Buffer
GetTestInclusionProofPathLengthTooLarge
(
)
;
Buffer
GetTestInclusionProofNullTreeSize
(
)
;
Buffer
GetTestInclusionProofLeafIndexOutOfBounds
(
)
;
Buffer
GetTestInclusionProofExtraData
(
)
;
Buffer
GetTestNodeHash0
(
)
;
Buffer
GetTestNodeHash1
(
)
;
Buffer
GetTestPublicKey
(
)
;
Buffer
GetTestPublicKeyId
(
)
;
void
GetX509CertSCT
(
SignedCertificateTimestamp
&
sct
)
;
void
GetPrecertSCT
(
SignedCertificateTimestamp
&
sct
)
;
Buffer
GetDefaultIssuerKeyHash
(
)
;
void
GetSampleSignedTreeHead
(
SignedTreeHead
&
sth
)
;
Buffer
GetSampleSTHSHA256RootHash
(
)
;
Buffer
GetSampleSTHTreeHeadSignature
(
)
;
void
GetSampleSTHTreeHeadDecodedSignature
(
DigitallySigned
&
signature
)
;
Buffer
GetDEREncodedTestEmbeddedCert
(
)
;
Buffer
GetDEREncodedTestTbsCert
(
)
;
Buffer
GetDEREncodedTestEmbeddedWithPreCACert
(
)
;
Buffer
GetDEREncodedCACert
(
)
;
Buffer
GetDEREncodedIntermediateCert
(
)
;
Buffer
GetDEREncodedTestEmbeddedWithIntermediateCert
(
)
;
Buffer
GetDEREncodedTestEmbeddedWithIntermediatePreCACert
(
)
;
Buffer
ExtractCertSPKI
(
pkix
:
:
Input
cert
)
;
Buffer
ExtractCertSPKI
(
const
Buffer
&
cert
)
;
void
ExtractEmbeddedSCTList
(
pkix
:
:
Input
cert
Buffer
&
result
)
;
void
ExtractEmbeddedSCTList
(
const
Buffer
&
cert
Buffer
&
result
)
;
void
ExtractSCTListFromOCSPResponse
(
pkix
:
:
Input
cert
pkix
:
:
Input
issuerSPKI
pkix
:
:
Input
encodedResponse
pkix
:
:
Time
time
Buffer
&
result
)
;
pkix
:
:
Input
InputForBuffer
(
const
Buffer
&
buffer
)
;
pkix
:
:
Input
InputForSECItem
(
const
SECItem
&
item
)
;
}
}
#
endif
