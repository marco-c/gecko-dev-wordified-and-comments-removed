#
include
"
CTLogVerifier
.
h
"
#
include
"
CTTestUtils
.
h
"
#
include
"
nss
.
h
"
#
include
"
signature_cache_ffi
.
h
"
#
include
"
gtest
/
gtest
.
h
"
namespace
mozilla
{
namespace
ct
{
using
namespace
pkix
;
class
CTLogVerifierTest
:
public
:
:
testing
:
:
Test
{
public
:
void
SetUp
(
)
override
{
if
(
NSS_NoDB_Init
(
nullptr
)
!
=
SECSuccess
)
{
abort
(
)
;
}
mSignatureCache
=
signature_cache_new
(
1
)
;
ASSERT_EQ
(
Success
mLog
.
Init
(
InputForBuffer
(
GetTestPublicKey
(
)
)
)
)
;
ASSERT_EQ
(
GetTestPublicKeyId
(
)
mLog
.
keyId
(
)
)
;
}
void
TearDown
(
)
override
{
signature_cache_free
(
mSignatureCache
)
;
}
protected
:
CTLogVerifier
mLog
=
CTLogVerifier
(
-
1
CTLogState
:
:
Admissible
CTLogFormat
:
:
RFC6962
0
)
;
SignatureCache
*
mSignatureCache
;
}
;
TEST_F
(
CTLogVerifierTest
VerifiesCertSCT
)
{
LogEntry
certEntry
;
GetX509CertLogEntry
(
certEntry
)
;
SignedCertificateTimestamp
certSct
;
GetX509CertSCT
(
certSct
)
;
EXPECT_EQ
(
Success
mLog
.
Verify
(
certEntry
certSct
mSignatureCache
)
)
;
}
TEST_F
(
CTLogVerifierTest
VerifiesPrecertSCT
)
{
LogEntry
precertEntry
;
GetPrecertLogEntry
(
precertEntry
)
;
SignedCertificateTimestamp
precertSct
;
GetPrecertSCT
(
precertSct
)
;
EXPECT_EQ
(
Success
mLog
.
Verify
(
precertEntry
precertSct
mSignatureCache
)
)
;
}
TEST_F
(
CTLogVerifierTest
FailsInvalidTimestamp
)
{
LogEntry
certEntry
;
GetX509CertLogEntry
(
certEntry
)
;
SignedCertificateTimestamp
certSct
;
GetX509CertSCT
(
certSct
)
;
certSct
.
timestamp
=
0
;
EXPECT_EQ
(
pkix
:
:
Result
:
:
ERROR_BAD_SIGNATURE
mLog
.
Verify
(
certEntry
certSct
mSignatureCache
)
)
;
}
TEST_F
(
CTLogVerifierTest
FailsInvalidSignature
)
{
LogEntry
certEntry
;
GetX509CertLogEntry
(
certEntry
)
;
SignedCertificateTimestamp
certSct
;
GetX509CertSCT
(
certSct
)
;
certSct
.
signature
.
signatureData
[
20
]
^
=
'
\
xFF
'
;
EXPECT_EQ
(
pkix
:
:
Result
:
:
ERROR_BAD_SIGNATURE
mLog
.
Verify
(
certEntry
certSct
mSignatureCache
)
)
;
SignedCertificateTimestamp
certSct2
;
GetX509CertSCT
(
certSct2
)
;
certSct2
.
signature
.
signatureData
[
0
]
^
=
'
\
xFF
'
;
EXPECT_EQ
(
pkix
:
:
Result
:
:
ERROR_BAD_SIGNATURE
mLog
.
Verify
(
certEntry
certSct2
mSignatureCache
)
)
;
}
TEST_F
(
CTLogVerifierTest
FailsInvalidLogID
)
{
LogEntry
certEntry
;
GetX509CertLogEntry
(
certEntry
)
;
SignedCertificateTimestamp
certSct
;
GetX509CertSCT
(
certSct
)
;
certSct
.
logId
.
push_back
(
'
\
x0
'
)
;
EXPECT_EQ
(
pkix
:
:
Result
:
:
FATAL_ERROR_INVALID_ARGS
mLog
.
Verify
(
certEntry
certSct
mSignatureCache
)
)
;
}
TEST_F
(
CTLogVerifierTest
ExcessDataInPublicKey
)
{
Buffer
key
=
GetTestPublicKey
(
)
;
std
:
:
string
extra
=
"
extra
"
;
key
.
insert
(
key
.
end
(
)
extra
.
begin
(
)
extra
.
end
(
)
)
;
CTLogVerifier
log
(
-
1
CTLogState
:
:
Admissible
CTLogFormat
:
:
RFC6962
0
)
;
EXPECT_NE
(
Success
log
.
Init
(
InputForBuffer
(
key
)
)
)
;
}
}
}
