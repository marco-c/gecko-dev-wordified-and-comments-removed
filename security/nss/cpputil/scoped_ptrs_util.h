#
ifndef
scoped_ptrs_util_h__
#
define
scoped_ptrs_util_h__
#
include
<
memory
>
#
include
"
pkcs11uri
.
h
"
#
include
"
secoid
.
h
"
struct
ScopedDelete
{
void
operator
(
)
(
SECAlgorithmID
*
id
)
{
SECOID_DestroyAlgorithmID
(
id
true
)
;
}
void
operator
(
)
(
SECItem
*
item
)
{
SECITEM_FreeItem
(
item
true
)
;
}
void
operator
(
)
(
PK11URI
*
uri
)
{
PK11URI_DestroyURI
(
uri
)
;
}
void
operator
(
)
(
PLArenaPool
*
arena
)
{
PORT_FreeArena
(
arena
PR_FALSE
)
;
}
}
;
template
<
class
T
>
struct
ScopedMaybeDelete
{
void
operator
(
)
(
T
*
ptr
)
{
if
(
ptr
)
{
ScopedDelete
del
;
del
(
ptr
)
;
}
}
}
;
#
define
SCOPED
(
x
)
typedef
std
:
:
unique_ptr
<
x
ScopedMaybeDelete
<
x
>
>
Scoped
#
#
x
SCOPED
(
SECAlgorithmID
)
;
SCOPED
(
SECItem
)
;
SCOPED
(
PK11URI
)
;
#
undef
SCOPED
#
endif
