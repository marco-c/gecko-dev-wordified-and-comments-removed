#
ifndef
scoped_ptrs_ssl_h__
#
define
scoped_ptrs_ssl_h__
#
include
<
memory
>
#
include
"
sslexp
.
h
"
struct
ScopedDeleteSSL
{
void
operator
(
)
(
SSLAeadContext
*
ctx
)
{
SSL_DestroyAead
(
ctx
)
;
}
void
operator
(
)
(
SSLAntiReplayContext
*
ctx
)
{
SSL_ReleaseAntiReplayContext
(
ctx
)
;
}
void
operator
(
)
(
SSLResumptionTokenInfo
*
token
)
{
SSL_DestroyResumptionTokenInfo
(
token
)
;
}
}
;
template
<
class
T
>
struct
ScopedMaybeDeleteSSL
{
void
operator
(
)
(
T
*
ptr
)
{
if
(
ptr
)
{
ScopedDeleteSSL
del
;
del
(
ptr
)
;
}
}
}
;
#
define
SCOPED
(
x
)
typedef
std
:
:
unique_ptr
<
x
ScopedMaybeDeleteSSL
<
x
>
>
Scoped
#
#
x
SCOPED
(
SSLAeadContext
)
;
SCOPED
(
SSLAntiReplayContext
)
;
SCOPED
(
SSLResumptionTokenInfo
)
;
#
undef
SCOPED
#
endif
