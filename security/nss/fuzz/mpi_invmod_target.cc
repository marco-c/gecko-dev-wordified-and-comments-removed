#
include
"
mpi_helper
.
h
"
#
include
"
mpprime
.
h
"
#
include
<
algorithm
>
extern
"
C
"
int
LLVMFuzzerTestOneInput
(
const
uint8_t
*
data
size_t
size
)
{
if
(
size
<
4
)
{
return
0
;
}
INIT_THREE_NUMBERS
int
count
=
0
;
mp_err
res
=
MP_NO
;
int
primeLen
=
std
:
:
max
(
static_cast
<
int
>
(
size
/
4
)
3
)
;
uint8_t
bp
[
primeLen
]
;
memcpy
(
bp
data
primeLen
)
;
do
{
bp
[
0
]
|
=
0x80
;
bp
[
primeLen
-
1
]
|
=
0x01
;
+
+
count
;
assert
(
mp_read_unsigned_octets
(
&
b
bp
primeLen
)
=
=
MP_OKAY
)
;
}
while
(
(
res
=
mpp_make_prime
(
&
b
primeLen
*
8
PR_FALSE
nullptr
)
)
!
=
MP_YES
&
&
count
<
10
)
;
if
(
res
!
=
MP_YES
)
{
return
0
;
}
char
tmp
[
max_size
]
;
mp_toradix
(
&
b
tmp
16
)
;
int
tmpLen
;
assert
(
(
tmpLen
=
BN_hex2bn
(
&
B
tmp
)
)
!
=
0
)
;
res
=
mp_invmod
(
&
a
&
b
&
c
)
;
BIGNUM
*
X
=
BN_mod_inverse
(
C
A
B
ctx
)
;
if
(
res
!
=
MP_OKAY
)
{
assert
(
X
=
=
nullptr
)
;
}
else
{
check_equal
(
C
&
c
max_size
)
;
assert
(
mp_mulmod
(
&
a
&
c
&
b
&
c
)
=
=
MP_OKAY
)
;
bool
eq
=
mp_cmp_d
(
&
c
1
)
=
=
0
;
if
(
!
eq
)
{
char
cC
[
max_size
]
;
mp_tohex
(
&
c
cC
)
;
std
:
:
cout
<
<
"
c
=
"
<
<
std
:
:
hex
<
<
cC
<
<
std
:
:
endl
;
}
assert
(
eq
)
;
}
CLEANUP_AND_RETURN_THREE
}
