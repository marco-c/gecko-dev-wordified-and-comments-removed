#
include
<
cassert
>
#
include
<
cstring
>
#
include
<
random
>
#
include
<
tuple
>
#
include
"
asn1_mutators
.
h
"
using
namespace
std
;
static
tuple
<
uint8_t
*
size_t
>
ParseItem
(
uint8_t
*
Data
size_t
MaxLength
)
{
if
(
(
Data
[
1
]
&
0x80
)
=
=
0
)
{
size_t
length
=
min
(
static_cast
<
size_t
>
(
Data
[
1
]
)
MaxLength
-
2
)
;
return
make_tuple
(
&
Data
[
2
]
length
)
;
}
if
(
Data
[
1
]
=
=
0x80
)
{
void
*
offset
=
memmem
(
&
Data
[
2
]
MaxLength
-
2
"
\
0
"
2
)
;
size_t
length
=
offset
?
(
static_cast
<
uint8_t
*
>
(
offset
)
-
&
Data
[
2
]
)
+
2
:
MaxLength
-
2
;
return
make_tuple
(
&
Data
[
2
]
length
)
;
}
size_t
octets
=
min
(
static_cast
<
size_t
>
(
Data
[
1
]
&
0x7f
)
MaxLength
-
2
)
;
if
(
octets
>
4
)
{
return
make_tuple
(
&
Data
[
2
]
+
octets
MaxLength
-
2
-
octets
)
;
}
size_t
length
=
0
;
for
(
size_t
j
=
0
;
j
<
octets
;
j
+
+
)
{
length
=
(
length
<
<
8
)
|
Data
[
2
+
j
]
;
}
length
=
min
(
length
MaxLength
-
2
-
octets
)
;
return
make_tuple
(
&
Data
[
2
]
+
octets
length
)
;
}
static
vector
<
uint8_t
*
>
ParseItems
(
uint8_t
*
Data
size_t
Size
)
{
vector
<
uint8_t
*
>
items
;
vector
<
size_t
>
lengths
;
items
.
push_back
(
Data
)
;
lengths
.
push_back
(
Size
)
;
for
(
size_t
i
=
0
;
i
<
items
.
size
(
)
;
i
+
+
)
{
uint8_t
*
item
=
items
.
at
(
i
)
;
size_t
remaining
=
lengths
.
at
(
i
)
;
if
(
remaining
=
=
0
|
|
(
0x20
&
item
[
0
]
)
=
=
0
)
{
continue
;
}
while
(
remaining
>
2
)
{
uint8_t
*
content
;
size_t
length
;
tie
(
content
length
)
=
ParseItem
(
item
remaining
)
;
if
(
length
>
0
)
{
items
.
push_back
(
content
)
;
lengths
.
push_back
(
length
)
;
}
remaining
-
=
length
+
(
content
-
item
)
;
item
=
content
+
length
;
}
}
return
items
;
}
namespace
ASN1Mutators
{
size_t
FlipConstructed
(
uint8_t
*
Data
size_t
Size
size_t
MaxSize
unsigned
int
Seed
)
{
auto
items
=
ParseItems
(
Data
Size
)
;
std
:
:
mt19937
rng
(
Seed
)
;
std
:
:
uniform_int_distribution
<
size_t
>
dist
(
0
items
.
size
(
)
-
1
)
;
uint8_t
*
item
=
items
.
at
(
dist
(
rng
)
)
;
item
[
0
]
^
=
0x20
;
return
Size
;
}
size_t
ChangeType
(
uint8_t
*
Data
size_t
Size
size_t
MaxSize
unsigned
int
Seed
)
{
auto
items
=
ParseItems
(
Data
Size
)
;
std
:
:
mt19937
rng
(
Seed
)
;
std
:
:
uniform_int_distribution
<
size_t
>
dist
(
0
items
.
size
(
)
-
1
)
;
uint8_t
*
item
=
items
.
at
(
dist
(
rng
)
)
;
static
std
:
:
uniform_int_distribution
<
size_t
>
tdist
(
0
30
)
;
item
[
0
]
=
tdist
(
rng
)
;
return
Size
;
}
}
