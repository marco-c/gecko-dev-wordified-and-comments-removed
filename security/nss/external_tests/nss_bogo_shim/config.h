#
ifndef
config_h_
#
define
config_h_
#
include
<
cassert
>
#
include
<
iostream
>
#
include
<
map
>
#
include
<
queue
>
#
include
<
string
>
#
include
<
typeinfo
>
class
ConfigEntryBase
{
public
:
ConfigEntryBase
(
const
std
:
:
string
&
name
const
std
:
:
string
&
type
)
:
name_
(
name
)
type_
(
type
)
{
}
const
std
:
:
string
&
type
(
)
const
{
return
type_
;
}
virtual
bool
Parse
(
std
:
:
queue
<
const
char
*
>
*
args
)
=
0
;
protected
:
bool
ParseInternal
(
std
:
:
queue
<
const
char
*
>
*
args
std
:
:
string
*
out
)
;
bool
ParseInternal
(
std
:
:
queue
<
const
char
*
>
*
args
int
*
out
)
;
bool
ParseInternal
(
std
:
:
queue
<
const
char
*
>
*
args
bool
*
out
)
;
const
std
:
:
string
name_
;
const
std
:
:
string
type_
;
}
;
template
<
typename
T
>
class
ConfigEntry
:
public
ConfigEntryBase
{
public
:
ConfigEntry
(
const
std
:
:
string
&
name
T
init
)
:
ConfigEntryBase
(
name
typeid
(
T
)
.
name
(
)
)
value_
(
init
)
{
}
T
get
(
)
const
{
return
value_
;
}
bool
Parse
(
std
:
:
queue
<
const
char
*
>
*
args
)
{
return
ParseInternal
(
args
&
value_
)
;
}
private
:
T
value_
;
}
;
class
Config
{
public
:
enum
Status
{
kOK
kUnknownFlag
kMalformedArgument
kMissingValue
}
;
Config
(
)
:
entries_
(
)
{
}
template
<
typename
T
>
void
AddEntry
(
const
std
:
:
string
&
name
T
init
)
{
entries_
[
name
]
=
new
ConfigEntry
<
T
>
(
name
init
)
;
}
Status
ParseArgs
(
int
argc
char
*
*
argv
)
;
template
<
typename
T
>
T
get
(
const
std
:
:
string
&
key
)
const
{
auto
e
=
entry
(
key
)
;
assert
(
e
-
>
type
(
)
=
=
typeid
(
T
)
.
name
(
)
)
;
return
static_cast
<
const
ConfigEntry
<
T
>
*
>
(
e
)
-
>
get
(
)
;
}
private
:
static
std
:
:
string
XformFlag
(
const
std
:
:
string
&
arg
)
;
std
:
:
map
<
std
:
:
string
ConfigEntryBase
*
>
entries_
;
const
ConfigEntryBase
*
entry
(
const
std
:
:
string
&
key
)
const
{
auto
e
=
entries_
.
find
(
key
)
;
if
(
e
=
=
entries_
.
end
(
)
)
return
nullptr
;
return
e
-
>
second
;
}
}
;
#
endif
