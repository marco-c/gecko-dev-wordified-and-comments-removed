#
include
"
pk11pub
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
namespace
nss_test
{
class
SSLv2ClientHelloFilter
:
public
PacketFilter
{
public
:
SSLv2ClientHelloFilter
(
TlsAgent
*
client
uint16_t
version
)
:
replaced_
(
false
)
client_
(
client
)
version_
(
version
)
pad_len_
(
0
)
reported_pad_len_
(
0
)
client_random_len_
(
16
)
ciphers_
(
0
)
send_escape_
(
false
)
{
}
void
SetVersion
(
uint16_t
version
)
{
version_
=
version
;
}
void
SetCipherSuites
(
const
std
:
:
vector
<
uint16_t
>
&
ciphers
)
{
ciphers_
=
ciphers
;
}
void
SetPadding
(
uint8_t
pad_len
)
{
SetPadding
(
pad_len
pad_len
)
;
}
void
SetPadding
(
uint8_t
pad_len
uint8_t
reported_pad_len
)
{
pad_len_
=
pad_len
;
reported_pad_len_
=
reported_pad_len
;
}
void
SetClientRandomLength
(
uint16_t
client_random_len
)
{
client_random_len_
=
client_random_len
;
}
void
SetSendEscape
(
bool
send_escape
)
{
send_escape_
=
send_escape
;
}
protected
:
virtual
PacketFilter
:
:
Action
Filter
(
const
DataBuffer
&
input
DataBuffer
*
output
)
{
if
(
replaced_
)
{
return
KEEP
;
}
replaced_
=
true
;
size_t
packet_len
=
SSL_HL_CLIENT_HELLO_HBYTES
+
(
ciphers_
.
size
(
)
*
3
)
+
client_random_len_
+
pad_len_
;
size_t
idx
=
0
;
*
output
=
input
;
output
-
>
Allocate
(
packet_len
)
;
output
-
>
Truncate
(
packet_len
)
;
if
(
pad_len_
>
0
)
{
size_t
masked_len
=
0x3fff
&
packet_len
;
if
(
send_escape_
)
{
masked_len
|
=
0x4000
;
}
idx
=
output
-
>
Write
(
idx
masked_len
2
)
;
idx
=
output
-
>
Write
(
idx
reported_pad_len_
1
)
;
}
else
{
PR_ASSERT
(
!
send_escape_
)
;
idx
=
output
-
>
Write
(
idx
0x8000
|
packet_len
2
)
;
}
size_t
hdr_len
=
idx
;
idx
=
output
-
>
Write
(
idx
SSL_MT_CLIENT_HELLO
1
)
;
idx
=
output
-
>
Write
(
idx
version_
2
)
;
idx
=
output
-
>
Write
(
idx
(
ciphers_
.
size
(
)
*
3
)
2
)
;
idx
=
output
-
>
Write
(
idx
static_cast
<
uint32_t
>
(
0
)
2
)
;
idx
=
output
-
>
Write
(
idx
client_random_len_
2
)
;
for
(
auto
cipher
:
ciphers_
)
{
idx
=
output
-
>
Write
(
idx
static_cast
<
uint32_t
>
(
cipher
)
3
)
;
}
std
:
:
vector
<
uint8_t
>
challenge
(
client_random_len_
)
;
PK11_GenerateRandom
(
challenge
.
data
(
)
challenge
.
size
(
)
)
;
idx
=
output
-
>
Write
(
idx
challenge
.
data
(
)
challenge
.
size
(
)
)
;
if
(
pad_len_
>
0
)
{
std
:
:
vector
<
uint8_t
>
pad
(
pad_len_
)
;
idx
=
output
-
>
Write
(
idx
pad
.
data
(
)
pad
.
size
(
)
)
;
}
SECStatus
rv
=
SSLInt_UpdateSSLv2ClientRandom
(
client_
-
>
ssl_fd
(
)
challenge
.
data
(
)
challenge
.
size
(
)
output
-
>
data
(
)
+
hdr_len
output
-
>
len
(
)
-
hdr_len
)
;
EXPECT_EQ
(
SECSuccess
rv
)
;
return
CHANGE
;
}
private
:
bool
replaced_
;
TlsAgent
*
client_
;
uint16_t
version_
;
uint8_t
pad_len_
;
uint8_t
reported_pad_len_
;
uint16_t
client_random_len_
;
std
:
:
vector
<
uint16_t
>
ciphers_
;
bool
send_escape_
;
}
;
class
SSLv2ClientHelloTestF
:
public
TlsConnectTestBase
{
public
:
SSLv2ClientHelloTestF
(
)
:
TlsConnectTestBase
(
STREAM
0
)
filter_
(
nullptr
)
{
}
SSLv2ClientHelloTestF
(
Mode
mode
uint16_t
version
)
:
TlsConnectTestBase
(
mode
version
)
filter_
(
nullptr
)
{
}
void
SetUp
(
)
{
TlsConnectTestBase
:
:
SetUp
(
)
;
filter_
=
new
SSLv2ClientHelloFilter
(
client_
version_
)
;
client_
-
>
SetPacketFilter
(
filter_
)
;
}
void
RequireSafeRenegotiation
(
)
{
server_
-
>
EnsureTlsSetup
(
)
;
SECStatus
rv
=
SSL_OptionSet
(
server_
-
>
ssl_fd
(
)
SSL_REQUIRE_SAFE_NEGOTIATION
PR_TRUE
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
}
void
SetExpectedVersion
(
uint16_t
version
)
{
TlsConnectTestBase
:
:
SetExpectedVersion
(
version
)
;
filter_
-
>
SetVersion
(
version
)
;
}
void
SetAvailableCipherSuite
(
uint16_t
cipher
)
{
filter_
-
>
SetCipherSuites
(
std
:
:
vector
<
uint16_t
>
(
1
cipher
)
)
;
}
void
SetAvailableCipherSuites
(
const
std
:
:
vector
<
uint16_t
>
&
ciphers
)
{
filter_
-
>
SetCipherSuites
(
ciphers
)
;
}
void
SetPadding
(
uint8_t
pad_len
)
{
filter_
-
>
SetPadding
(
pad_len
)
;
}
void
SetPadding
(
uint8_t
pad_len
uint8_t
reported_pad_len
)
{
filter_
-
>
SetPadding
(
pad_len
reported_pad_len
)
;
}
void
SetClientRandomLength
(
uint16_t
client_random_len
)
{
filter_
-
>
SetClientRandomLength
(
client_random_len
)
;
}
void
SetSendEscape
(
bool
send_escape
)
{
filter_
-
>
SetSendEscape
(
send_escape
)
;
}
private
:
SSLv2ClientHelloFilter
*
filter_
;
}
;
class
SSLv2ClientHelloTest
:
public
SSLv2ClientHelloTestF
public
:
:
testing
:
:
WithParamInterface
<
uint16_t
>
{
public
:
SSLv2ClientHelloTest
(
)
:
SSLv2ClientHelloTestF
(
STREAM
GetParam
(
)
)
{
}
}
;
TEST_P
(
SSLv2ClientHelloTest
Connect
)
{
SetAvailableCipherSuite
(
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
)
;
Connect
(
)
;
}
TEST_F
(
SSLv2ClientHelloTestF
Connect13
)
{
EnsureTlsSetup
(
)
;
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
std
:
:
vector
<
uint16_t
>
cipher_suites
=
{
TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
}
;
SetAvailableCipherSuites
(
cipher_suites
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
SSL_ERROR_RX_MALFORMED_CLIENT_HELLO
server_
-
>
error_code
(
)
)
;
}
TEST_P
(
SSLv2ClientHelloTest
NegotiateECSuite
)
{
SetAvailableCipherSuite
(
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
)
;
Connect
(
)
;
}
TEST_P
(
SSLv2ClientHelloTest
AddPadding
)
{
SetAvailableCipherSuite
(
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
)
;
SetPadding
(
255
)
;
Connect
(
)
;
}
TEST_P
(
SSLv2ClientHelloTest
SendSecurityEscape
)
{
SetAvailableCipherSuite
(
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
)
;
SetSendEscape
(
true
)
;
SetPadding
(
255
)
;
ConnectExpectFail
(
)
;
}
TEST_P
(
SSLv2ClientHelloTest
AddErroneousPadding
)
{
SetAvailableCipherSuite
(
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
)
;
SetPadding
(
5
4
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
SSL_ERROR_RX_MALFORMED_CLIENT_HELLO
server_
-
>
error_code
(
)
)
;
}
TEST_P
(
SSLv2ClientHelloTest
AddErroneousPadding2
)
{
SetAvailableCipherSuite
(
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
)
;
SetPadding
(
5
6
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
SSL_ERROR_RX_MALFORMED_CLIENT_HELLO
server_
-
>
error_code
(
)
)
;
}
TEST_P
(
SSLv2ClientHelloTest
SmallClientRandom
)
{
SetAvailableCipherSuite
(
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
)
;
SetClientRandomLength
(
15
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
SSL_ERROR_RX_MALFORMED_CLIENT_HELLO
server_
-
>
error_code
(
)
)
;
}
TEST_P
(
SSLv2ClientHelloTest
MaxClientRandom
)
{
SetAvailableCipherSuite
(
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
)
;
SetClientRandomLength
(
32
)
;
Connect
(
)
;
}
TEST_P
(
SSLv2ClientHelloTest
BigClientRandom
)
{
SetAvailableCipherSuite
(
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
)
;
SetClientRandomLength
(
33
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
SSL_ERROR_RX_MALFORMED_CLIENT_HELLO
server_
-
>
error_code
(
)
)
;
}
TEST_P
(
SSLv2ClientHelloTest
RequireSafeRenegotiation
)
{
RequireSafeRenegotiation
(
)
;
SetAvailableCipherSuite
(
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
SSL_ERROR_UNSAFE_NEGOTIATION
server_
-
>
error_code
(
)
)
;
}
TEST_P
(
SSLv2ClientHelloTest
RequireSafeRenegotiationWithSCSV
)
{
RequireSafeRenegotiation
(
)
;
std
:
:
vector
<
uint16_t
>
cipher_suites
=
{
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_EMPTY_RENEGOTIATION_INFO_SCSV
}
;
SetAvailableCipherSuites
(
cipher_suites
)
;
Connect
(
)
;
}
TEST_F
(
SSLv2ClientHelloTestF
FallbackSCSV
)
{
EnsureTlsSetup
(
)
;
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_1
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_1
)
;
std
:
:
vector
<
uint16_t
>
cipher_suites
=
{
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_FALLBACK_SCSV
}
;
SetAvailableCipherSuites
(
cipher_suites
)
;
Connect
(
)
;
}
TEST_F
(
SSLv2ClientHelloTestF
InappropriateFallbackSCSV
)
{
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_1
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_1
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_2
)
;
std
:
:
vector
<
uint16_t
>
cipher_suites
=
{
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_FALLBACK_SCSV
}
;
SetAvailableCipherSuites
(
cipher_suites
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
SSL_ERROR_INAPPROPRIATE_FALLBACK_ALERT
server_
-
>
error_code
(
)
)
;
}
INSTANTIATE_TEST_CASE_P
(
VersionsStream10Pre13
SSLv2ClientHelloTest
TlsConnectTestBase
:
:
kTlsV10
)
;
INSTANTIATE_TEST_CASE_P
(
VersionsStreamPre13
SSLv2ClientHelloTest
TlsConnectTestBase
:
:
kTlsV11V12
)
;
}
