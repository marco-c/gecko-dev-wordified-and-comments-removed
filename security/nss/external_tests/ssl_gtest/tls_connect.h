#
ifndef
tls_connect_h_
#
define
tls_connect_h_
#
include
<
tuple
>
#
include
"
sslt
.
h
"
#
include
"
tls_agent
.
h
"
#
define
GTEST_HAS_RTTI
0
#
include
"
gtest
/
gtest
.
h
"
namespace
nss_test
{
class
TlsConnectTestBase
:
public
:
:
testing
:
:
Test
{
public
:
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
std
:
:
string
>
kTlsModesStream
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
std
:
:
string
>
kTlsModesAll
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV10
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV11
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV11V12
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV12Plus
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV13
;
static
inline
Mode
ToMode
(
const
std
:
:
string
&
str
)
{
return
str
=
=
"
TLS
"
?
STREAM
:
DGRAM
;
}
TlsConnectTestBase
(
Mode
mode
uint16_t
version
)
;
virtual
~
TlsConnectTestBase
(
)
;
void
SetUp
(
)
;
void
TearDown
(
)
;
void
Init
(
)
;
void
ResetRsa
(
)
;
void
ResetEcdsa
(
)
;
void
EnsureTlsSetup
(
)
;
void
Handshake
(
)
;
void
Connect
(
)
;
void
CheckConnected
(
)
;
void
ConnectExpectFail
(
)
;
void
CheckKeys
(
SSLKEAType
keyType
SSLAuthType
authType
)
const
;
void
SetExpectedVersion
(
uint16_t
version
)
;
void
ExpectResumption
(
SessionResumptionMode
expected
)
;
void
DisableDheAndEcdheCiphers
(
)
;
void
DisableDheCiphers
(
)
;
void
DisableEcdheCiphers
(
)
;
void
EnableExtendedMasterSecret
(
)
;
void
ConfigureSessionCache
(
SessionResumptionMode
client
SessionResumptionMode
server
)
;
void
EnableAlpn
(
)
;
void
EnableSrtp
(
)
;
void
CheckSrtp
(
)
const
;
void
SendReceive
(
)
;
void
Receive
(
size_t
amount
)
;
void
ExpectExtendedMasterSecret
(
bool
expected
)
;
protected
:
Mode
mode_
;
TlsAgent
*
client_
;
TlsAgent
*
server_
;
uint16_t
version_
;
SessionResumptionMode
expected_resumption_mode_
;
std
:
:
vector
<
std
:
:
vector
<
uint8_t
>
>
session_ids_
;
private
:
void
Reset
(
const
std
:
:
string
&
server_name
SSLKEAType
kea
)
;
void
CheckResumption
(
SessionResumptionMode
expected
)
;
void
CheckExtendedMasterSecret
(
)
;
bool
expect_extended_master_secret_
;
}
;
class
TlsConnectTest
:
public
TlsConnectTestBase
{
public
:
TlsConnectTest
(
)
:
TlsConnectTestBase
(
STREAM
0
)
{
}
}
;
class
DtlsConnectTest
:
public
TlsConnectTestBase
{
public
:
DtlsConnectTest
(
)
:
TlsConnectTestBase
(
DGRAM
0
)
{
}
}
;
class
TlsConnectStream
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
uint16_t
>
{
public
:
TlsConnectStream
(
)
:
TlsConnectTestBase
(
STREAM
GetParam
(
)
)
{
}
}
;
class
TlsConnectStreamPre13
:
public
TlsConnectStream
{
}
;
class
TlsConnectDatagram
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
uint16_t
>
{
public
:
TlsConnectDatagram
(
)
:
TlsConnectTestBase
(
DGRAM
GetParam
(
)
)
{
}
}
;
class
TlsConnectGeneric
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
tuple
<
std
:
:
string
uint16_t
>
>
{
public
:
TlsConnectGeneric
(
)
;
}
;
class
TlsConnectPre12
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
tuple
<
std
:
:
string
uint16_t
>
>
{
public
:
TlsConnectPre12
(
)
;
}
;
class
TlsConnectTls12
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
string
>
{
public
:
TlsConnectTls12
(
)
;
}
;
class
TlsConnectGenericPre13
:
public
TlsConnectGeneric
{
}
;
}
#
endif
