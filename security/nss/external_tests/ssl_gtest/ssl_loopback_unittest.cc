#
include
"
secerr
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
#
include
<
memory
>
#
include
<
functional
>
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
scoped_ptrs
.
h
"
#
include
"
tls_parser
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
gtest_utils
.
h
"
namespace
nss_test
{
TEST_P
(
TlsConnectGeneric
SetupOnly
)
{
}
TEST_P
(
TlsConnectGeneric
Connect
)
{
SetExpectedVersion
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectEcdsa
)
{
SetExpectedVersion
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
Reset
(
TlsAgent
:
:
kServerEcdsa
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectEcdh
)
{
SetExpectedVersion
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
Reset
(
TlsAgent
:
:
kServerEcdhEcdsa
)
;
DisableAllCiphers
(
)
;
EnableSomeEcdhCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdh_ecdsa
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectEcdhWithoutDisablingSuites
)
{
SetExpectedVersion
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
Reset
(
TlsAgent
:
:
kServerEcdhEcdsa
)
;
EnableSomeEcdhCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdh_ecdsa
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectFalseStart
)
{
client_
-
>
EnableFalseStart
(
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectAlpn
)
{
EnableAlpn
(
)
;
Connect
(
)
;
CheckAlpn
(
"
a
"
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectAlpnClone
)
{
EnsureModelSockets
(
)
;
Connect
(
)
;
CheckAlpn
(
"
a
"
)
;
}
TEST_P
(
TlsConnectDatagram
ConnectSrtp
)
{
EnableSrtp
(
)
;
Connect
(
)
;
CheckSrtp
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectAndClientRenegotiate
)
{
Connect
(
)
;
server_
-
>
PrepareForRenegotiate
(
)
;
client_
-
>
StartRenegotiate
(
)
;
Handshake
(
)
;
CheckConnected
(
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectAndServerRenegotiate
)
{
Connect
(
)
;
client_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
StartRenegotiate
(
)
;
Handshake
(
)
;
CheckConnected
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectEcdhe
)
{
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectSendReceive
)
{
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectDatagram
ShortRead
)
{
Connect
(
)
;
client_
-
>
SetExpectedReadError
(
true
)
;
server_
-
>
SendData
(
1200
1200
)
;
WAIT_
(
client_
-
>
error_code
(
)
=
=
SSL_ERROR_RX_SHORT_DTLS_READ
2000
)
;
ASSERT_EQ
(
SSL_ERROR_RX_SHORT_DTLS_READ
client_
-
>
error_code
(
)
)
;
client_
-
>
SetExpectedReadError
(
false
)
;
server_
-
>
ResetSentBytes
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectStream
ShortRead
)
{
if
(
version_
<
SSL_LIBRARY_VERSION_TLS_1_1
)
return
;
Connect
(
)
;
server_
-
>
SendData
(
1200
1200
)
;
WAIT_
(
client_
-
>
received_bytes
(
)
=
=
1024
2000
)
;
ASSERT_EQ
(
1024U
client_
-
>
received_bytes
(
)
)
;
client_
-
>
ReadBytes
(
)
;
ASSERT_EQ
(
1200U
client_
-
>
received_bytes
(
)
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectWithCompressionMaybe
)
{
EnsureTlsSetup
(
)
;
client_
-
>
EnableCompression
(
)
;
server_
-
>
EnableCompression
(
)
;
Connect
(
)
;
EXPECT_EQ
(
client_
-
>
version
(
)
<
SSL_LIBRARY_VERSION_TLS_1_3
&
&
mode_
!
=
DGRAM
client_
-
>
is_compressed
(
)
)
;
SendReceive
(
)
;
}
#
ifdef
NSS_ENABLE_TLS_1_3
TEST_F
(
TlsConnectTest
DamageSecretHandleClientFinished
)
{
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
StartConnect
(
)
;
client_
-
>
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
std
:
:
cerr
<
<
"
Damaging
HS
secret
\
n
"
;
SSLInt_DamageHsTrafficSecret
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTED
client_
-
>
state
(
)
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_BAD_HANDSHAKE_HASH_VALUE
)
;
client_
-
>
Handshake
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_DECRYPT_ERROR_ALERT
)
;
}
TEST_F
(
TlsConnectTest
DamageSecretHandleServerFinished
)
{
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetPacketFilter
(
new
AfterRecordN
(
server_
client_
0
[
this
]
(
)
{
SSLInt_DamageHsTrafficSecret
(
client_
-
>
ssl_fd
(
)
)
;
}
)
)
;
ConnectExpectFail
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_BAD_HANDSHAKE_HASH_VALUE
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_DECRYPT_ERROR_ALERT
)
;
}
#
endif
TEST_P
(
TlsConnectDatagram
TestDtlsHolddownExpiry
)
{
Connect
(
)
;
std
:
:
cerr
<
<
"
Expiring
holddown
timer
\
n
"
;
SSLInt_ForceTimerExpiry
(
client_
-
>
ssl_fd
(
)
)
;
SSLInt_ForceTimerExpiry
(
server_
-
>
ssl_fd
(
)
)
;
SendReceive
(
)
;
if
(
version_
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
EXPECT_EQ
(
2
SSLInt_CountTls13CipherSpecs
(
client_
-
>
ssl_fd
(
)
)
)
;
}
}
class
ECCClientKEXFilter
:
public
TlsHandshakeFilter
{
public
:
ECCClientKEXFilter
(
)
{
}
protected
:
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
if
(
header
.
handshake_type
(
)
!
=
kTlsHandshakeClientKeyExchange
)
{
return
KEEP
;
}
output
-
>
Allocate
(
1
)
;
output
-
>
Write
(
0
0U
1
)
;
return
CHANGE
;
}
}
;
class
ECCServerKEXFilter
:
public
TlsHandshakeFilter
{
public
:
ECCServerKEXFilter
(
)
{
}
protected
:
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
if
(
header
.
handshake_type
(
)
!
=
kTlsHandshakeServerKeyExchange
)
{
return
KEEP
;
}
output
-
>
Allocate
(
4
)
;
output
-
>
Write
(
0
3U
1
)
;
uint32_t
curve
;
EXPECT_TRUE
(
input
.
Read
(
1
2
&
curve
)
)
;
output
-
>
Write
(
1
curve
2
)
;
output
-
>
Write
(
3
0U
1
)
;
return
CHANGE
;
}
}
;
TEST_P
(
TlsConnectGenericPre13
ConnectECDHEmptyServerPoint
)
{
server_
-
>
SetPacketFilter
(
new
ECCServerKEXFilter
(
)
)
;
ConnectExpectFail
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_SERVER_KEY_EXCH
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectECDHEmptyClientPoint
)
{
client_
-
>
SetPacketFilter
(
new
ECCClientKEXFilter
(
)
)
;
ConnectExpectFail
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_CLIENT_KEY_EXCH
)
;
}
INSTANTIATE_TEST_CASE_P
(
GenericStream
TlsConnectGeneric
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesStream
TlsConnectTestBase
:
:
kTlsVAll
)
)
;
INSTANTIATE_TEST_CASE_P
(
GenericDatagram
TlsConnectGeneric
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesDatagram
TlsConnectTestBase
:
:
kTlsV11Plus
)
)
;
INSTANTIATE_TEST_CASE_P
(
StreamOnly
TlsConnectStream
TlsConnectTestBase
:
:
kTlsVAll
)
;
INSTANTIATE_TEST_CASE_P
(
DatagramOnly
TlsConnectDatagram
TlsConnectTestBase
:
:
kTlsV11Plus
)
;
INSTANTIATE_TEST_CASE_P
(
Pre12Stream
TlsConnectPre12
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesStream
TlsConnectTestBase
:
:
kTlsV10V11
)
)
;
INSTANTIATE_TEST_CASE_P
(
Pre12Datagram
TlsConnectPre12
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesDatagram
TlsConnectTestBase
:
:
kTlsV11
)
)
;
INSTANTIATE_TEST_CASE_P
(
Version12Only
TlsConnectTls12
TlsConnectTestBase
:
:
kTlsModesAll
)
;
#
ifdef
NSS_ENABLE_TLS_1_3
INSTANTIATE_TEST_CASE_P
(
Version13Only
TlsConnectTls13
TlsConnectTestBase
:
:
kTlsModesAll
)
;
#
endif
INSTANTIATE_TEST_CASE_P
(
Pre13Stream
TlsConnectGenericPre13
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesStream
TlsConnectTestBase
:
:
kTlsV10ToV12
)
)
;
INSTANTIATE_TEST_CASE_P
(
Pre13Datagram
TlsConnectGenericPre13
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesDatagram
TlsConnectTestBase
:
:
kTlsV11V12
)
)
;
INSTANTIATE_TEST_CASE_P
(
Pre13StreamOnly
TlsConnectStreamPre13
TlsConnectTestBase
:
:
kTlsV10ToV12
)
;
INSTANTIATE_TEST_CASE_P
(
Version12Plus
TlsConnectTls12Plus
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesAll
TlsConnectTestBase
:
:
kTlsV12Plus
)
)
;
}
