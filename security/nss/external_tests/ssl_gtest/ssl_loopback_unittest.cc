#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
#
include
<
memory
>
#
include
<
functional
>
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
tls_parser
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
gtest_utils
.
h
"
namespace
nss_test
{
uint8_t
kBogusClientKeyExchange
[
]
=
{
0x01
0x00
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
}
;
class
TlsInspectorClientHelloVersionChanger
:
public
TlsHandshakeFilter
{
public
:
TlsInspectorClientHelloVersionChanger
(
TlsAgent
*
server
)
:
server_
(
server
)
{
}
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
if
(
header
.
handshake_type
(
)
=
=
kTlsHandshakeClientKeyExchange
)
{
EXPECT_EQ
(
SECSuccess
SSLInt_IncrementClientHandshakeVersion
(
server_
-
>
ssl_fd
(
)
)
)
;
}
return
KEEP
;
}
private
:
TlsAgent
*
server_
;
}
;
class
TlsInspectorClientHelloVersionSetter
:
public
TlsHandshakeFilter
{
public
:
TlsInspectorClientHelloVersionSetter
(
uint16_t
version
)
:
version_
(
version
)
{
}
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
if
(
header
.
handshake_type
(
)
=
=
kTlsHandshakeClientHello
)
{
*
output
=
input
;
output
-
>
Write
(
0
version_
2
)
;
return
CHANGE
;
}
return
KEEP
;
}
private
:
uint16_t
version_
;
}
;
class
TlsServerKeyExchangeEcdhe
{
public
:
bool
Parse
(
const
DataBuffer
&
buffer
)
{
TlsParser
parser
(
buffer
)
;
uint8_t
curve_type
;
if
(
!
parser
.
Read
(
&
curve_type
)
)
{
return
false
;
}
if
(
curve_type
!
=
3
)
{
return
false
;
}
uint32_t
named_curve
;
if
(
!
parser
.
Read
(
&
named_curve
2
)
)
{
return
false
;
}
return
parser
.
ReadVariable
(
&
public_key_
1
)
;
}
DataBuffer
public_key_
;
}
;
TEST_P
(
TlsConnectGeneric
SetupOnly
)
{
}
TEST_P
(
TlsConnectGeneric
Connect
)
{
SetExpectedVersion
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectEcdsa
)
{
SetExpectedVersion
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
ResetEcdsa
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectFalseStart
)
{
client_
-
>
EnableFalseStart
(
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumed
)
{
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_SESSIONID
)
;
Connect
(
)
;
ResetRsa
(
)
;
ExpectResumption
(
RESUME_SESSIONID
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectClientCacheDisabled
)
{
ConfigureSessionCache
(
RESUME_NONE
RESUME_SESSIONID
)
;
Connect
(
)
;
ResetRsa
(
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectServerCacheDisabled
)
{
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_NONE
)
;
Connect
(
)
;
ResetRsa
(
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectSessionCacheDisabled
)
{
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
Connect
(
)
;
ResetRsa
(
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeSupportBoth
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
Connect
(
)
;
ResetRsa
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeClientTicketServerBoth
)
{
ConfigureSessionCache
(
RESUME_TICKET
RESUME_BOTH
)
;
Connect
(
)
;
ResetRsa
(
)
;
ConfigureSessionCache
(
RESUME_TICKET
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeClientBothTicketServerTicket
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
ResetRsa
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectClientServerTicketOnly
)
{
ConfigureSessionCache
(
RESUME_TICKET
RESUME_TICKET
)
;
Connect
(
)
;
ResetRsa
(
)
;
ConfigureSessionCache
(
RESUME_TICKET
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectClientBothServerNone
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_NONE
)
;
Connect
(
)
;
ResetRsa
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_NONE
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectClientNoneServerBoth
)
{
ConfigureSessionCache
(
RESUME_NONE
RESUME_BOTH
)
;
Connect
(
)
;
ResetRsa
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ResumeWithHigherVersion
)
{
EnsureTlsSetup
(
)
;
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_1
)
;
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_SESSIONID
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_1
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_1
)
;
Connect
(
)
;
ResetRsa
(
)
;
EnsureTlsSetup
(
)
;
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_2
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_2
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_2
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ClientAuth
)
{
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa
)
;
}
TEST_P
(
TlsConnectStream
ClientAuth
)
{
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa
)
;
}
TEST_P
(
TlsConnectStream
DISABLED_ClientAuthRequiredRejected
)
{
server_
-
>
RequestClientAuth
(
true
)
;
ConnectExpectFail
(
)
;
}
TEST_P
(
TlsConnectStream
ClientAuthRequestedRejected
)
{
server_
-
>
RequestClientAuth
(
false
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa
)
;
}
TEST_P
(
TlsConnectGeneric
ClientAuthEcdsa
)
{
ResetEcdsa
(
)
;
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
)
;
}
static
const
SSLSignatureAndHashAlg
SignatureEcdsaSha384
[
]
=
{
{
ssl_hash_sha384
ssl_sign_ecdsa
}
}
;
static
const
SSLSignatureAndHashAlg
SignatureEcdsaSha256
[
]
=
{
{
ssl_hash_sha256
ssl_sign_ecdsa
}
}
;
static
const
SSLSignatureAndHashAlg
SignatureRsaSha384
[
]
=
{
{
ssl_hash_sha384
ssl_sign_rsa
}
}
;
static
const
SSLSignatureAndHashAlg
SignatureRsaSha256
[
]
=
{
{
ssl_hash_sha256
ssl_sign_rsa
}
}
;
TEST_P
(
TlsConnectGeneric
SignatureAlgorithmServerAuth
)
{
client_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
server_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
ResetEcdsa
(
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
SignatureAlgorithmClientOnly
)
{
const
SSLSignatureAndHashAlg
clientAlgorithms
[
]
=
{
{
ssl_hash_sha384
ssl_sign_ecdsa
}
{
ssl_hash_sha384
ssl_sign_rsa
}
{
ssl_hash_md5
ssl_sign_ecdsa
}
}
;
client_
-
>
SetSignatureAlgorithms
(
clientAlgorithms
PR_ARRAY_SIZE
(
clientAlgorithms
)
)
;
ResetEcdsa
(
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
SignatureAlgorithmServerOnly
)
{
server_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
ResetEcdsa
(
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
SignatureAlgorithmNoOverlapStaticRsa
)
{
client_
-
>
SetSignatureAlgorithms
(
SignatureRsaSha384
PR_ARRAY_SIZE
(
SignatureRsaSha384
)
)
;
server_
-
>
SetSignatureAlgorithms
(
SignatureRsaSha256
PR_ARRAY_SIZE
(
SignatureRsaSha256
)
)
;
DisableDheAndEcdheCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_rsa
ssl_auth_rsa
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectStaticRSA
)
{
DisableDheAndEcdheCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_rsa
ssl_auth_rsa
)
;
}
TEST_P
(
TlsConnectTls12
SignatureAlgorithmNoOverlapEcdsa
)
{
ResetEcdsa
(
)
;
client_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
server_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha256
PR_ARRAY_SIZE
(
SignatureEcdsaSha256
)
)
;
ConnectExpectFail
(
)
;
}
TEST_P
(
TlsConnectPre12
SignatureAlgorithmNoOverlapEcdsa
)
{
ResetEcdsa
(
)
;
client_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
server_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha256
PR_ARRAY_SIZE
(
SignatureEcdsaSha256
)
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectTls12
RequestClientAuthWithoutSha256
)
{
server_
-
>
SetSignatureAlgorithms
(
SignatureRsaSha384
PR_ARRAY_SIZE
(
SignatureRsaSha384
)
)
;
server_
-
>
RequestClientAuth
(
false
)
;
ConnectExpectFail
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectAlpn
)
{
EnableAlpn
(
)
;
Connect
(
)
;
client_
-
>
CheckAlpn
(
SSL_NEXT_PROTO_SELECTED
"
a
"
)
;
server_
-
>
CheckAlpn
(
SSL_NEXT_PROTO_NEGOTIATED
"
a
"
)
;
}
TEST_P
(
TlsConnectStream
ConnectAlpn
)
{
EnableAlpn
(
)
;
Connect
(
)
;
client_
-
>
CheckAlpn
(
SSL_NEXT_PROTO_SELECTED
"
a
"
)
;
server_
-
>
CheckAlpn
(
SSL_NEXT_PROTO_NEGOTIATED
"
a
"
)
;
}
TEST_P
(
TlsConnectDatagram
ConnectSrtp
)
{
EnableSrtp
(
)
;
Connect
(
)
;
CheckSrtp
(
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectAndClientRenegotiate
)
{
Connect
(
)
;
server_
-
>
PrepareForRenegotiate
(
)
;
client_
-
>
StartRenegotiate
(
)
;
Handshake
(
)
;
CheckConnected
(
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectAndServerRenegotiate
)
{
Connect
(
)
;
client_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
StartRenegotiate
(
)
;
Handshake
(
)
;
CheckConnected
(
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectDhe
)
{
DisableEcdheCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_dh
ssl_auth_rsa
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectStaticRSABogusCKE
)
{
DisableDheAndEcdheCiphers
(
)
;
TlsInspectorReplaceHandshakeMessage
*
i1
=
new
TlsInspectorReplaceHandshakeMessage
(
kTlsHandshakeClientKeyExchange
DataBuffer
(
kBogusClientKeyExchange
sizeof
(
kBogusClientKeyExchange
)
)
)
;
client_
-
>
SetPacketFilter
(
i1
)
;
auto
alert_recorder
=
new
TlsAlertRecorder
(
)
;
server_
-
>
SetPacketFilter
(
alert_recorder
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
kTlsAlertFatal
alert_recorder
-
>
level
(
)
)
;
EXPECT_EQ
(
kTlsAlertBadRecordMac
alert_recorder
-
>
description
(
)
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectStaticRSABogusPMSVersionDetect
)
{
DisableDheAndEcdheCiphers
(
)
;
client_
-
>
SetPacketFilter
(
new
TlsInspectorClientHelloVersionChanger
(
server_
)
)
;
auto
alert_recorder
=
new
TlsAlertRecorder
(
)
;
server_
-
>
SetPacketFilter
(
alert_recorder
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
kTlsAlertFatal
alert_recorder
-
>
level
(
)
)
;
EXPECT_EQ
(
kTlsAlertBadRecordMac
alert_recorder
-
>
description
(
)
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectStaticRSABogusPMSVersionIgnore
)
{
DisableDheAndEcdheCiphers
(
)
;
client_
-
>
SetPacketFilter
(
new
TlsInspectorClientHelloVersionChanger
(
server_
)
)
;
server_
-
>
DisableRollbackDetection
(
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectStream
ConnectEcdhe
)
{
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectEcdheTwiceReuseKey
)
{
TlsInspectorRecordHandshakeMessage
*
i1
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeServerKeyExchange
)
;
server_
-
>
SetPacketFilter
(
i1
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa
)
;
TlsServerKeyExchangeEcdhe
dhe1
;
EXPECT_TRUE
(
dhe1
.
Parse
(
i1
-
>
buffer
(
)
)
)
;
ResetRsa
(
)
;
TlsInspectorRecordHandshakeMessage
*
i2
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeServerKeyExchange
)
;
server_
-
>
SetPacketFilter
(
i2
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa
)
;
TlsServerKeyExchangeEcdhe
dhe2
;
EXPECT_TRUE
(
dhe2
.
Parse
(
i2
-
>
buffer
(
)
)
)
;
EXPECT_EQ
(
dhe1
.
public_key_
.
len
(
)
dhe2
.
public_key_
.
len
(
)
)
;
EXPECT_TRUE
(
!
memcmp
(
dhe1
.
public_key_
.
data
(
)
dhe2
.
public_key_
.
data
(
)
dhe1
.
public_key_
.
len
(
)
)
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectEcdheTwiceNewKey
)
{
server_
-
>
EnsureTlsSetup
(
)
;
SECStatus
rv
=
SSL_OptionSet
(
server_
-
>
ssl_fd
(
)
SSL_REUSE_SERVER_ECDHE_KEY
PR_FALSE
)
;
EXPECT_EQ
(
SECSuccess
rv
)
;
TlsInspectorRecordHandshakeMessage
*
i1
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeServerKeyExchange
)
;
server_
-
>
SetPacketFilter
(
i1
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa
)
;
TlsServerKeyExchangeEcdhe
dhe1
;
EXPECT_TRUE
(
dhe1
.
Parse
(
i1
-
>
buffer
(
)
)
)
;
ResetRsa
(
)
;
server_
-
>
EnsureTlsSetup
(
)
;
rv
=
SSL_OptionSet
(
server_
-
>
ssl_fd
(
)
SSL_REUSE_SERVER_ECDHE_KEY
PR_FALSE
)
;
EXPECT_EQ
(
SECSuccess
rv
)
;
TlsInspectorRecordHandshakeMessage
*
i2
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeServerKeyExchange
)
;
server_
-
>
SetPacketFilter
(
i2
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa
)
;
TlsServerKeyExchangeEcdhe
dhe2
;
EXPECT_TRUE
(
dhe2
.
Parse
(
i2
-
>
buffer
(
)
)
)
;
EXPECT_FALSE
(
(
dhe1
.
public_key_
.
len
(
)
=
=
dhe2
.
public_key_
.
len
(
)
)
&
&
(
!
memcmp
(
dhe1
.
public_key_
.
data
(
)
dhe2
.
public_key_
.
data
(
)
dhe1
.
public_key_
.
len
(
)
)
)
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectSendReceive
)
{
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectDatagram
ShortRead
)
{
Connect
(
)
;
client_
-
>
SetExpectedReadError
(
true
)
;
server_
-
>
SendData
(
1200
1200
)
;
WAIT_
(
client_
-
>
error_code
(
)
=
=
SSL_ERROR_RX_SHORT_DTLS_READ
2000
)
;
ASSERT_EQ
(
SSL_ERROR_RX_SHORT_DTLS_READ
client_
-
>
error_code
(
)
)
;
client_
-
>
SetExpectedReadError
(
false
)
;
server_
-
>
ResetSentBytes
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectStream
ShortRead
)
{
if
(
version_
<
SSL_LIBRARY_VERSION_TLS_1_1
)
return
;
Connect
(
)
;
server_
-
>
SendData
(
1200
1200
)
;
WAIT_
(
client_
-
>
received_bytes
(
)
=
=
1024
2000
)
;
ASSERT_EQ
(
1024U
client_
-
>
received_bytes
(
)
)
;
client_
-
>
ReadBytes
(
)
;
ASSERT_EQ
(
1200U
client_
-
>
received_bytes
(
)
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectExtendedMasterSecret
)
{
EnableExtendedMasterSecret
(
)
;
Connect
(
)
;
ResetRsa
(
)
;
ExpectResumption
(
RESUME_SESSIONID
)
;
EnableExtendedMasterSecret
(
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectExtendedMasterSecretStaticRSA
)
{
DisableDheAndEcdheCiphers
(
)
;
EnableExtendedMasterSecret
(
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectExtendedMasterSecretStaticRSABogusCKE
)
{
DisableDheAndEcdheCiphers
(
)
;
EnableExtendedMasterSecret
(
)
;
TlsInspectorReplaceHandshakeMessage
*
inspect
=
new
TlsInspectorReplaceHandshakeMessage
(
kTlsHandshakeClientKeyExchange
DataBuffer
(
kBogusClientKeyExchange
sizeof
(
kBogusClientKeyExchange
)
)
)
;
client_
-
>
SetPacketFilter
(
inspect
)
;
auto
alert_recorder
=
new
TlsAlertRecorder
(
)
;
server_
-
>
SetPacketFilter
(
alert_recorder
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
kTlsAlertFatal
alert_recorder
-
>
level
(
)
)
;
EXPECT_EQ
(
kTlsAlertBadRecordMac
alert_recorder
-
>
description
(
)
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectExtendedMasterSecretStaticRSABogusPMSVersionDetect
)
{
DisableDheAndEcdheCiphers
(
)
;
EnableExtendedMasterSecret
(
)
;
client_
-
>
SetPacketFilter
(
new
TlsInspectorClientHelloVersionChanger
(
server_
)
)
;
auto
alert_recorder
=
new
TlsAlertRecorder
(
)
;
server_
-
>
SetPacketFilter
(
alert_recorder
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
kTlsAlertFatal
alert_recorder
-
>
level
(
)
)
;
EXPECT_EQ
(
kTlsAlertBadRecordMac
alert_recorder
-
>
description
(
)
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectExtendedMasterSecretStaticRSABogusPMSVersionIgnore
)
{
DisableDheAndEcdheCiphers
(
)
;
EnableExtendedMasterSecret
(
)
;
client_
-
>
SetPacketFilter
(
new
TlsInspectorClientHelloVersionChanger
(
server_
)
)
;
server_
-
>
DisableRollbackDetection
(
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectExtendedMasterSecretECDHE
)
{
EnableExtendedMasterSecret
(
)
;
Connect
(
)
;
ResetRsa
(
)
;
EnableExtendedMasterSecret
(
)
;
ExpectResumption
(
RESUME_SESSIONID
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectExtendedMasterSecretTicket
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
EnableExtendedMasterSecret
(
)
;
Connect
(
)
;
ResetRsa
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
EnableExtendedMasterSecret
(
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectExtendedMasterSecretClientOnly
)
{
client_
-
>
EnableExtendedMasterSecret
(
)
;
ExpectExtendedMasterSecret
(
false
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectExtendedMasterSecretServerOnly
)
{
server_
-
>
EnableExtendedMasterSecret
(
)
;
ExpectExtendedMasterSecret
(
false
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectExtendedMasterSecretResumeWithout
)
{
EnableExtendedMasterSecret
(
)
;
Connect
(
)
;
ResetRsa
(
)
;
server_
-
>
EnableExtendedMasterSecret
(
)
;
auto
alert_recorder
=
new
TlsAlertRecorder
(
)
;
server_
-
>
SetPacketFilter
(
alert_recorder
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
kTlsAlertFatal
alert_recorder
-
>
level
(
)
)
;
EXPECT_EQ
(
kTlsAlertHandshakeFailure
alert_recorder
-
>
description
(
)
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectNormalResumeWithExtendedMasterSecret
)
{
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_SESSIONID
)
;
ExpectExtendedMasterSecret
(
false
)
;
Connect
(
)
;
ResetRsa
(
)
;
EnableExtendedMasterSecret
(
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectStream
ConnectWithCompressionMaybe
)
{
EnsureTlsSetup
(
)
;
client_
-
>
EnableCompression
(
)
;
server_
-
>
EnableCompression
(
)
;
Connect
(
)
;
EXPECT_EQ
(
client_
-
>
version
(
)
<
SSL_LIBRARY_VERSION_TLS_1_3
client_
-
>
is_compressed
(
)
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectStream
ConnectSendReceive
)
{
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectStream
ServerNegotiateTls10
)
{
uint16_t
minver
maxver
;
client_
-
>
GetVersionRange
(
&
minver
&
maxver
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
maxver
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
SSL_LIBRARY_VERSION_TLS_1_0
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectStream
ServerNegotiateTls11
)
{
if
(
version_
<
SSL_LIBRARY_VERSION_TLS_1_1
)
return
;
uint16_t
minver
maxver
;
client_
-
>
GetVersionRange
(
&
minver
&
maxver
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
maxver
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_1
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectStream
ServerNegotiateTls12
)
{
if
(
version_
<
SSL_LIBRARY_VERSION_TLS_1_2
)
return
;
uint16_t
minver
maxver
;
client_
-
>
GetVersionRange
(
&
minver
&
maxver
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
maxver
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_2
)
;
Connect
(
)
;
}
TEST_F
(
TlsConnectTest
TestDowngradeDetectionToTls11
)
{
client_
-
>
SetPacketFilter
(
new
TlsInspectorClientHelloVersionSetter
(
SSL_LIBRARY_VERSION_TLS_1_1
)
)
;
ConnectExpectFail
(
)
;
ASSERT_EQ
(
SSL_ERROR_RX_MALFORMED_SERVER_HELLO
client_
-
>
error_code
(
)
)
;
}
TEST_F
(
DtlsConnectTest
TestDtlsVersion11
)
{
client_
-
>
SetPacketFilter
(
new
TlsInspectorClientHelloVersionSetter
(
(
(
~
0x0101
)
&
0xffff
)
)
)
;
ConnectExpectFail
(
)
;
EXPECT_EQ
(
SSL_ERROR_NO_CYPHER_OVERLAP
client_
-
>
error_code
(
)
)
;
EXPECT_EQ
(
SSL_ERROR_UNSUPPORTED_VERSION
server_
-
>
error_code
(
)
)
;
}
#
ifdef
NSS_ENABLE_TLS_1_3
TEST_F
(
TlsConnectTest
TestDowngradeDetectionToTls12
)
{
EnsureTlsSetup
(
)
;
client_
-
>
SetPacketFilter
(
new
TlsInspectorClientHelloVersionSetter
(
SSL_LIBRARY_VERSION_TLS_1_2
)
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ConnectExpectFail
(
)
;
ASSERT_EQ
(
SSL_ERROR_RX_MALFORMED_SERVER_HELLO
client_
-
>
error_code
(
)
)
;
}
#
endif
TEST_F
(
TlsConnectTest
TestDowngradeDetectionToTls10
)
{
client_
-
>
SetPacketFilter
(
new
TlsInspectorClientHelloVersionSetter
(
SSL_LIBRARY_VERSION_TLS_1_0
)
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
SSL_LIBRARY_VERSION_TLS_1_1
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
SSL_LIBRARY_VERSION_TLS_1_2
)
;
ConnectExpectFail
(
)
;
ASSERT_EQ
(
SSL_ERROR_BAD_HANDSHAKE_HASH_VALUE
server_
-
>
error_code
(
)
)
;
ASSERT_EQ
(
SSL_ERROR_DECRYPT_ERROR_ALERT
client_
-
>
error_code
(
)
)
;
}
TEST_F
(
TlsConnectTest
TestFallbackFromTls12
)
{
EnsureTlsSetup
(
)
;
client_
-
>
SetDowngradeCheckVersion
(
SSL_LIBRARY_VERSION_TLS_1_2
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_1
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_2
)
;
ConnectExpectFail
(
)
;
ASSERT_EQ
(
SSL_ERROR_RX_MALFORMED_SERVER_HELLO
client_
-
>
error_code
(
)
)
;
}
#
ifdef
NSS_ENABLE_TLS_1_3
TEST_F
(
TlsConnectTest
TestFallbackFromTls13
)
{
EnsureTlsSetup
(
)
;
client_
-
>
SetDowngradeCheckVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_2
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ConnectExpectFail
(
)
;
ASSERT_EQ
(
SSL_ERROR_RX_MALFORMED_SERVER_HELLO
client_
-
>
error_code
(
)
)
;
}
#
endif
class
BeforeFinished
:
public
TlsRecordFilter
{
private
:
enum
HandshakeState
{
BEFORE_CCS
AFTER_CCS
DONE
}
;
typedef
std
:
:
function
<
void
(
void
)
>
VoidFunction
;
public
:
BeforeFinished
(
TlsAgent
*
client
TlsAgent
*
server
VoidFunction
before_ccs
VoidFunction
before_finished
)
:
client_
(
client
)
server_
(
server
)
before_ccs_
(
before_ccs
)
before_finished_
(
before_finished
)
state_
(
BEFORE_CCS
)
{
}
protected
:
virtual
PacketFilter
:
:
Action
FilterRecord
(
const
RecordHeader
&
header
const
DataBuffer
&
body
DataBuffer
*
out
)
{
switch
(
state_
)
{
case
BEFORE_CCS
:
if
(
header
.
content_type
(
)
=
=
kTlsChangeCipherSpecType
)
{
before_ccs_
(
)
;
DataBuffer
ccs
;
header
.
Write
(
&
ccs
0
body
)
;
server_
-
>
SendDirect
(
ccs
)
;
ForceRead
(
)
;
state_
=
AFTER_CCS
;
return
DROP
;
}
break
;
case
AFTER_CCS
:
EXPECT_EQ
(
kTlsHandshakeType
header
.
content_type
(
)
)
;
before_finished_
(
)
;
state_
=
DONE
;
break
;
case
DONE
:
break
;
}
return
KEEP
;
}
private
:
void
ForceRead
(
)
{
uint8_t
block
[
10
]
;
int32_t
rv
=
PR_Read
(
client_
-
>
ssl_fd
(
)
block
sizeof
(
block
)
)
;
EXPECT_GT
(
0
rv
)
;
EXPECT_EQ
(
PR_WOULD_BLOCK_ERROR
PR_GetError
(
)
)
;
}
TlsAgent
*
client_
;
TlsAgent
*
server_
;
VoidFunction
before_ccs_
;
VoidFunction
before_finished_
;
HandshakeState
state_
;
}
;
TEST_P
(
TlsConnectGeneric
ClientWriteBetweenCCSAndFinishedWithFalseStart
)
{
client_
-
>
EnableFalseStart
(
)
;
server_
-
>
SetPacketFilter
(
new
BeforeFinished
(
client_
server_
[
this
]
(
)
{
EXPECT_TRUE
(
client_
-
>
can_falsestart_hook_called
(
)
)
;
}
[
this
]
(
)
{
client_
-
>
SendData
(
10
)
;
}
)
)
;
Connect
(
)
;
server_
-
>
SendData
(
10
)
;
Receive
(
10
)
;
}
TEST_P
(
TlsConnectGeneric
AuthCompleteBeforeFinishedWithFalseStart
)
{
client_
-
>
EnableFalseStart
(
)
;
client_
-
>
SetAuthCertificateCallback
(
[
]
(
TlsAgent
&
PRBool
PRBool
)
-
>
SECStatus
{
return
SECWouldBlock
;
}
)
;
server_
-
>
SetPacketFilter
(
new
BeforeFinished
(
client_
server_
[
]
(
)
{
}
[
this
]
(
)
{
EXPECT_FALSE
(
client_
-
>
can_falsestart_hook_called
(
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_AuthCertificateComplete
(
client_
-
>
ssl_fd
(
)
0
)
)
;
EXPECT_TRUE
(
client_
-
>
can_falsestart_hook_called
(
)
)
;
client_
-
>
SendData
(
10
)
;
}
)
)
;
Connect
(
)
;
server_
-
>
SendData
(
10
)
;
Receive
(
10
)
;
}
INSTANTIATE_TEST_CASE_P
(
VariantsStream10
TlsConnectGeneric
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesStream
TlsConnectTestBase
:
:
kTlsV10
)
)
;
INSTANTIATE_TEST_CASE_P
(
VariantsAll
TlsConnectGeneric
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesAll
TlsConnectTestBase
:
:
kTlsV11V12
)
)
;
INSTANTIATE_TEST_CASE_P
(
VersionsDatagram
TlsConnectDatagram
TlsConnectTestBase
:
:
kTlsV11V12
)
;
INSTANTIATE_TEST_CASE_P
(
Variants12
TlsConnectTls12
TlsConnectTestBase
:
:
kTlsModesAll
)
;
INSTANTIATE_TEST_CASE_P
(
Pre12Stream
TlsConnectPre12
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesStream
TlsConnectTestBase
:
:
kTlsV10
)
)
;
INSTANTIATE_TEST_CASE_P
(
Pre12All
TlsConnectPre12
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesAll
TlsConnectTestBase
:
:
kTlsV11
)
)
;
INSTANTIATE_TEST_CASE_P
(
VersionsStream10
TlsConnectStream
TlsConnectTestBase
:
:
kTlsV10
)
;
INSTANTIATE_TEST_CASE_P
(
VersionsStream
TlsConnectStream
TlsConnectTestBase
:
:
kTlsV11V12
)
;
INSTANTIATE_TEST_CASE_P
(
VersionsStream10Pre13
TlsConnectStreamPre13
TlsConnectTestBase
:
:
kTlsV10
)
;
INSTANTIATE_TEST_CASE_P
(
VersionsStreamPre13
TlsConnectStreamPre13
TlsConnectTestBase
:
:
kTlsV11V12
)
;
#
ifdef
NSS_ENABLE_TLS_1_3
INSTANTIATE_TEST_CASE_P
(
VersionsStream13
TlsConnectStream
TlsConnectTestBase
:
:
kTlsV13
)
;
#
endif
}
