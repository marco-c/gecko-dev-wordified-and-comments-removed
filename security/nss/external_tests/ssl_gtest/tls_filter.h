#
ifndef
tls_filter_h_
#
define
tls_filter_h_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
test_io
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
class
TlsRecordFilter
:
public
PacketFilter
{
public
:
TlsRecordFilter
(
)
:
count_
(
0
)
{
}
virtual
PacketFilter
:
:
Action
Filter
(
const
DataBuffer
&
input
DataBuffer
*
output
)
;
size_t
filtered_packets
(
)
const
{
return
count_
;
}
class
Versioned
{
public
:
Versioned
(
)
:
version_
(
0
)
{
}
bool
is_dtls
(
)
const
{
return
IsDtls
(
version_
)
;
}
uint16_t
version
(
)
const
{
return
version_
;
}
protected
:
uint16_t
version_
;
}
;
class
RecordHeader
:
public
Versioned
{
public
:
RecordHeader
(
)
:
Versioned
(
)
content_type_
(
0
)
sequence_number_
(
0
)
{
}
uint8_t
content_type
(
)
const
{
return
content_type_
;
}
uint64_t
sequence_number
(
)
const
{
return
sequence_number_
;
}
size_t
header_length
(
)
const
{
return
is_dtls
(
)
?
11
:
3
;
}
bool
Parse
(
TlsParser
*
parser
DataBuffer
*
body
)
;
size_t
Write
(
DataBuffer
*
buffer
size_t
offset
const
DataBuffer
&
body
)
const
;
private
:
uint8_t
content_type_
;
uint64_t
sequence_number_
;
}
;
protected
:
virtual
PacketFilter
:
:
Action
FilterRecord
(
const
RecordHeader
&
header
const
DataBuffer
&
data
DataBuffer
*
changed
)
=
0
;
private
:
size_t
count_
;
}
;
class
TlsHandshakeFilter
:
public
TlsRecordFilter
{
public
:
TlsHandshakeFilter
(
)
{
}
class
HandshakeHeader
:
public
Versioned
{
public
:
HandshakeHeader
(
)
:
Versioned
(
)
handshake_type_
(
0
)
message_seq_
(
0
)
{
}
uint8_t
handshake_type
(
)
const
{
return
handshake_type_
;
}
bool
Parse
(
TlsParser
*
parser
const
RecordHeader
&
record_header
DataBuffer
*
body
)
;
size_t
Write
(
DataBuffer
*
buffer
size_t
offset
const
DataBuffer
&
body
)
const
;
private
:
bool
ReadLength
(
TlsParser
*
parser
const
RecordHeader
&
header
uint32_t
*
length
)
;
uint8_t
handshake_type_
;
uint16_t
message_seq_
;
}
;
protected
:
virtual
PacketFilter
:
:
Action
FilterRecord
(
const
RecordHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
;
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
=
0
;
private
:
}
;
class
TlsInspectorRecordHandshakeMessage
:
public
TlsHandshakeFilter
{
public
:
TlsInspectorRecordHandshakeMessage
(
uint8_t
handshake_type
)
:
handshake_type_
(
handshake_type
)
buffer_
(
)
{
}
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
;
const
DataBuffer
&
buffer
(
)
const
{
return
buffer_
;
}
private
:
uint8_t
handshake_type_
;
DataBuffer
buffer_
;
}
;
class
TlsInspectorReplaceHandshakeMessage
:
public
TlsHandshakeFilter
{
public
:
TlsInspectorReplaceHandshakeMessage
(
uint8_t
handshake_type
const
DataBuffer
&
replacement
)
:
handshake_type_
(
handshake_type
)
buffer_
(
replacement
)
{
}
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
;
private
:
uint8_t
handshake_type_
;
DataBuffer
buffer_
;
}
;
class
TlsAlertRecorder
:
public
TlsRecordFilter
{
public
:
TlsAlertRecorder
(
)
:
level_
(
255
)
description_
(
255
)
{
}
virtual
PacketFilter
:
:
Action
FilterRecord
(
const
RecordHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
;
uint8_t
level
(
)
const
{
return
level_
;
}
uint8_t
description
(
)
const
{
return
description_
;
}
private
:
uint8_t
level_
;
uint8_t
description_
;
}
;
class
ChainedPacketFilter
:
public
PacketFilter
{
public
:
ChainedPacketFilter
(
)
{
}
ChainedPacketFilter
(
const
std
:
:
vector
<
PacketFilter
*
>
filters
)
:
filters_
(
filters
.
begin
(
)
filters
.
end
(
)
)
{
}
virtual
~
ChainedPacketFilter
(
)
;
virtual
PacketFilter
:
:
Action
Filter
(
const
DataBuffer
&
input
DataBuffer
*
output
)
;
void
Add
(
PacketFilter
*
filter
)
{
filters_
.
push_back
(
filter
)
;
}
private
:
std
:
:
vector
<
PacketFilter
*
>
filters_
;
}
;
class
TlsExtensionFilter
:
public
TlsHandshakeFilter
{
protected
:
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
;
virtual
PacketFilter
:
:
Action
FilterExtension
(
uint16_t
extension_type
const
DataBuffer
&
input
DataBuffer
*
output
)
=
0
;
public
:
static
bool
FindClientHelloExtensions
(
TlsParser
*
parser
const
Versioned
&
header
)
;
static
bool
FindServerHelloExtensions
(
TlsParser
*
parser
)
;
private
:
PacketFilter
:
:
Action
FilterExtensions
(
TlsParser
*
parser
const
DataBuffer
&
input
DataBuffer
*
output
)
;
}
;
class
TlsExtensionCapture
:
public
TlsExtensionFilter
{
public
:
TlsExtensionCapture
(
uint16_t
ext
)
:
extension_
(
ext
)
data_
(
)
{
}
virtual
PacketFilter
:
:
Action
FilterExtension
(
uint16_t
extension_type
const
DataBuffer
&
input
DataBuffer
*
output
)
;
const
DataBuffer
&
extension
(
)
const
{
return
data_
;
}
private
:
const
uint16_t
extension_
;
DataBuffer
data_
;
}
;
}
#
endif
