#
include
"
ssl
.
h
"
#
include
<
functional
>
#
include
<
memory
>
#
include
"
secerr
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
scoped_ptrs
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
TEST_P
(
TlsConnectGenericPre13
ConnectEcdh
)
{
SetExpectedVersion
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
Reset
(
TlsAgent
:
:
kServerEcdhEcdsa
)
;
DisableAllCiphers
(
)
;
EnableSomeEcdhCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdh_ecdsa
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectEcdhWithoutDisablingSuites
)
{
SetExpectedVersion
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
Reset
(
TlsAgent
:
:
kServerEcdhEcdsa
)
;
EnableSomeEcdhCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdh_ecdsa
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectEcdhe
)
{
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
}
TEST_P
(
TlsConnectTls12
ConnectEcdheP384
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa384
)
;
ConnectWithCipherSuite
(
TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
384
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectEcdheP384
)
{
EnsureTlsSetup
(
)
;
client_
-
>
ConfigNamedGroup
(
ssl_grp_ec_secp256r1
false
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
384
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectEcdheGroupMismatch
)
{
EnsureTlsSetup
(
)
;
client_
-
>
ConfigNamedGroup
(
ssl_grp_ec_secp256r1
true
)
;
client_
-
>
ConfigNamedGroup
(
ssl_grp_ec_secp384r1
false
)
;
client_
-
>
ConfigNamedGroup
(
ssl_grp_ec_secp521r1
false
)
;
server_
-
>
ConfigNamedGroup
(
ssl_grp_ec_secp256r1
false
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_dh
ssl_auth_rsa_sign
)
;
}
class
ECCClientKEXFilter
:
public
TlsHandshakeFilter
{
public
:
ECCClientKEXFilter
(
)
{
}
protected
:
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
if
(
header
.
handshake_type
(
)
!
=
kTlsHandshakeClientKeyExchange
)
{
return
KEEP
;
}
output
-
>
Allocate
(
1
)
;
output
-
>
Write
(
0
0U
1
)
;
return
CHANGE
;
}
}
;
class
ECCServerKEXFilter
:
public
TlsHandshakeFilter
{
public
:
ECCServerKEXFilter
(
)
{
}
protected
:
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
if
(
header
.
handshake_type
(
)
!
=
kTlsHandshakeServerKeyExchange
)
{
return
KEEP
;
}
output
-
>
Allocate
(
4
)
;
output
-
>
Write
(
0
3U
1
)
;
uint32_t
curve
;
EXPECT_TRUE
(
input
.
Read
(
1
2
&
curve
)
)
;
output
-
>
Write
(
1
curve
2
)
;
output
-
>
Write
(
3
0U
1
)
;
return
CHANGE
;
}
}
;
TEST_P
(
TlsConnectGenericPre13
ConnectECDHEmptyServerPoint
)
{
server_
-
>
SetPacketFilter
(
new
ECCServerKEXFilter
(
)
)
;
ConnectExpectFail
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_SERVER_KEY_EXCH
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectECDHEmptyClientPoint
)
{
client_
-
>
SetPacketFilter
(
new
ECCClientKEXFilter
(
)
)
;
ConnectExpectFail
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_CLIENT_KEY_EXCH
)
;
}
}
