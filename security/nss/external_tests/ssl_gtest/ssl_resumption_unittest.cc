#
include
<
functional
>
#
include
<
memory
>
#
include
"
secerr
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
scoped_ptrs
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
class
TlsServerKeyExchangeEcdhe
{
public
:
bool
Parse
(
const
DataBuffer
&
buffer
)
{
TlsParser
parser
(
buffer
)
;
uint8_t
curve_type
;
if
(
!
parser
.
Read
(
&
curve_type
)
)
{
return
false
;
}
if
(
curve_type
!
=
3
)
{
return
false
;
}
uint32_t
named_curve
;
if
(
!
parser
.
Read
(
&
named_curve
2
)
)
{
return
false
;
}
return
parser
.
ReadVariable
(
&
public_key_
1
)
;
}
DataBuffer
public_key_
;
}
;
TEST_P
(
TlsConnectGenericPre13
ConnectResumed
)
{
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_SESSIONID
)
;
Connect
(
)
;
Reset
(
)
;
ExpectResumption
(
RESUME_SESSIONID
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectClientCacheDisabled
)
{
ConfigureSessionCache
(
RESUME_NONE
RESUME_SESSIONID
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectServerCacheDisabled
)
{
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectSessionCacheDisabled
)
{
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeSupportBoth
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeClientTicketServerBoth
)
{
ConfigureSessionCache
(
RESUME_TICKET
RESUME_BOTH
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_TICKET
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeClientBothTicketServerTicket
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeClientServerTicketOnly
)
{
ConfigureSessionCache
(
RESUME_TICKET
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_TICKET
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeClientBothServerNone
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_NONE
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeClientNoneServerBoth
)
{
ConfigureSessionCache
(
RESUME_NONE
RESUME_BOTH
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectResumeWithHigherVersion
)
{
EnsureTlsSetup
(
)
;
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_1
)
;
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_SESSIONID
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_1
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_1
)
;
Connect
(
)
;
Reset
(
)
;
EnsureTlsSetup
(
)
;
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_2
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_2
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_2
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeClientBothTicketServerTicketForget
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ClearServerCache
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
static
int32_t
SwitchCertificates
(
TlsAgent
*
agent
const
SECItem
*
srvNameArr
uint32_t
srvNameArrSize
)
{
bool
ok
=
agent
-
>
ConfigServerCert
(
"
client
"
)
;
if
(
!
ok
)
return
SSL_SNI_SEND_ALERT
;
return
0
;
}
;
TEST_P
(
TlsConnectGeneric
ServerSNICertSwitch
)
{
Connect
(
)
;
ScopedCERTCertificate
cert1
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
Reset
(
)
;
EnsureTlsSetup
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
server_
-
>
SetSniCallback
(
SwitchCertificates
)
;
Connect
(
)
;
ScopedCERTCertificate
cert2
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
CheckKeys
(
)
;
EXPECT_FALSE
(
SECITEM_ItemsAreEqual
(
&
cert1
-
>
derCert
&
cert2
-
>
derCert
)
)
;
}
TEST_P
(
TlsConnectGeneric
ServerSNICertTypeSwitch
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
Connect
(
)
;
ScopedCERTCertificate
cert1
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
Reset
(
)
;
EnsureTlsSetup
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
server_
-
>
SetSniCallback
(
SwitchCertificates
)
;
Connect
(
)
;
ScopedCERTCertificate
cert2
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
)
;
EXPECT_TRUE
(
SECITEM_ItemsAreEqual
(
&
cert1
-
>
derCert
&
cert2
-
>
derCert
)
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectEcdheTwiceReuseKey
)
{
TlsInspectorRecordHandshakeMessage
*
i1
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeServerKeyExchange
)
;
server_
-
>
SetPacketFilter
(
i1
)
;
Connect
(
)
;
CheckKeys
(
)
;
TlsServerKeyExchangeEcdhe
dhe1
;
EXPECT_TRUE
(
dhe1
.
Parse
(
i1
-
>
buffer
(
)
)
)
;
Reset
(
)
;
TlsInspectorRecordHandshakeMessage
*
i2
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeServerKeyExchange
)
;
server_
-
>
SetPacketFilter
(
i2
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
Connect
(
)
;
CheckKeys
(
)
;
TlsServerKeyExchangeEcdhe
dhe2
;
EXPECT_TRUE
(
dhe2
.
Parse
(
i2
-
>
buffer
(
)
)
)
;
EXPECT_EQ
(
dhe1
.
public_key_
.
len
(
)
dhe2
.
public_key_
.
len
(
)
)
;
EXPECT_TRUE
(
!
memcmp
(
dhe1
.
public_key_
.
data
(
)
dhe2
.
public_key_
.
data
(
)
dhe1
.
public_key_
.
len
(
)
)
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectEcdheTwiceNewKey
)
{
server_
-
>
EnsureTlsSetup
(
)
;
SECStatus
rv
=
SSL_OptionSet
(
server_
-
>
ssl_fd
(
)
SSL_REUSE_SERVER_ECDHE_KEY
PR_FALSE
)
;
EXPECT_EQ
(
SECSuccess
rv
)
;
TlsInspectorRecordHandshakeMessage
*
i1
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeServerKeyExchange
)
;
server_
-
>
SetPacketFilter
(
i1
)
;
Connect
(
)
;
CheckKeys
(
)
;
TlsServerKeyExchangeEcdhe
dhe1
;
EXPECT_TRUE
(
dhe1
.
Parse
(
i1
-
>
buffer
(
)
)
)
;
Reset
(
)
;
server_
-
>
EnsureTlsSetup
(
)
;
rv
=
SSL_OptionSet
(
server_
-
>
ssl_fd
(
)
SSL_REUSE_SERVER_ECDHE_KEY
PR_FALSE
)
;
EXPECT_EQ
(
SECSuccess
rv
)
;
TlsInspectorRecordHandshakeMessage
*
i2
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeServerKeyExchange
)
;
server_
-
>
SetPacketFilter
(
i2
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
Connect
(
)
;
CheckKeys
(
)
;
TlsServerKeyExchangeEcdhe
dhe2
;
EXPECT_TRUE
(
dhe2
.
Parse
(
i2
-
>
buffer
(
)
)
)
;
EXPECT_FALSE
(
(
dhe1
.
public_key_
.
len
(
)
=
=
dhe2
.
public_key_
.
len
(
)
)
&
&
(
!
memcmp
(
dhe1
.
public_key_
.
data
(
)
dhe2
.
public_key_
.
data
(
)
dhe1
.
public_key_
.
len
(
)
)
)
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ResumeDifferentGroup
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_TICKET
)
;
client_
-
>
ConfigNamedGroups
(
kFFDHEGroups
)
;
server_
-
>
ConfigNamedGroups
(
kFFDHEGroups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_dh
ssl_grp_ffdhe_2048
ssl_auth_rsa_sign
ssl_sig_none
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ResumeClientDifferentCipher
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
client_
-
>
EnableSingleCipher
(
TLS_AES_128_GCM_SHA256
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
client_
-
>
EnableSingleCipher
(
TLS_AES_256_GCM_SHA384
)
;
Connect
(
)
;
CheckKeys
(
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ResumeServerDifferentCipher
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
server_
-
>
EnableSingleCipher
(
TLS_AES_128_GCM_SHA256
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
server_
-
>
EnableSingleCipher
(
TLS_AES_256_GCM_SHA384
)
;
Connect
(
)
;
CheckKeys
(
)
;
}
TEST_F
(
TlsConnectTest
TestTls13ResumptionTwice
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
uint16_t
original_suite
;
EXPECT_TRUE
(
client_
-
>
cipher_suite
(
&
original_suite
)
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
TlsExtensionCapture
*
c1
=
new
TlsExtensionCapture
(
ssl_tls13_pre_shared_key_xtn
)
;
client_
-
>
SetPacketFilter
(
c1
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_none
)
;
DataBuffer
initialTicket
(
c1
-
>
extension
(
)
)
;
ASSERT_LT
(
0U
initialTicket
.
len
(
)
)
;
ScopedCERTCertificate
cert1
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
ASSERT_TRUE
(
!
!
cert1
.
get
(
)
)
;
Reset
(
)
;
ClearStats
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
TlsExtensionCapture
*
c2
=
new
TlsExtensionCapture
(
ssl_tls13_pre_shared_key_xtn
)
;
client_
-
>
SetPacketFilter
(
c2
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_1
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_none
)
;
ASSERT_LT
(
0U
c2
-
>
extension
(
)
.
len
(
)
)
;
ScopedCERTCertificate
cert2
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
ASSERT_TRUE
(
!
!
cert2
.
get
(
)
)
;
uint16_t
resumed_suite
;
EXPECT_TRUE
(
server_
-
>
cipher_suite
(
&
resumed_suite
)
)
;
EXPECT_EQ
(
original_suite
resumed_suite
)
;
EXPECT_TRUE
(
client_
-
>
cipher_suite
(
&
resumed_suite
)
)
;
EXPECT_EQ
(
original_suite
resumed_suite
)
;
ASSERT_NE
(
initialTicket
c2
-
>
extension
(
)
)
;
}
}
