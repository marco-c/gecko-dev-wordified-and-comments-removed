#
include
"
ssl
.
h
"
#
include
"
secerr
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
scoped_ptrs
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
TEST_P
(
TlsConnectGeneric
ServerAuthBigRsa
)
{
Reset
(
TlsAgent
:
:
kRsa2048
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
}
TEST_P
(
TlsConnectGeneric
ClientAuth
)
{
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
}
TEST_P
(
TlsConnectStream
DISABLED_ClientAuthRequiredRejected
)
{
server_
-
>
RequestClientAuth
(
true
)
;
ConnectExpectFail
(
)
;
}
TEST_P
(
TlsConnectGeneric
ClientAuthRequestedRejected
)
{
server_
-
>
RequestClientAuth
(
false
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
}
TEST_P
(
TlsConnectGeneric
ClientAuthEcdsa
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
)
;
}
TEST_P
(
TlsConnectGeneric
ClientAuthBigRsa
)
{
Reset
(
TlsAgent
:
:
kServerRsa
TlsAgent
:
:
kRsa2048
)
;
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
}
static
void
CheckSigAlgs
(
TlsInspectorRecordHandshakeMessage
*
capture
size_t
offset
TlsAgent
*
peer
SSLHashType
expected_hash
size_t
expected_size
)
{
EXPECT_LT
(
offset
+
2U
capture
-
>
buffer
(
)
.
len
(
)
)
;
EXPECT_EQ
(
expected_hash
capture
-
>
buffer
(
)
.
data
(
)
[
offset
]
)
;
EXPECT_EQ
(
ssl_sign_rsa
capture
-
>
buffer
(
)
.
data
(
)
[
offset
+
1
]
)
;
ScopedCERTCertificate
remote_cert
(
SSL_PeerCertificate
(
peer
-
>
ssl_fd
(
)
)
)
;
ScopedSECKEYPublicKey
remote_key
(
CERT_ExtractPublicKey
(
remote_cert
.
get
(
)
)
)
;
EXPECT_EQ
(
expected_size
SECKEY_PublicKeyStrengthInBits
(
remote_key
.
get
(
)
)
)
;
}
TEST_P
(
TlsConnectTls12
ServerAuthCheckSigAlg
)
{
EnsureTlsSetup
(
)
;
auto
capture_ske
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeServerKeyExchange
)
;
server_
-
>
SetPacketFilter
(
capture_ske
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
const
DataBuffer
&
buffer
=
capture_ske
-
>
buffer
(
)
;
EXPECT_LT
(
3U
buffer
.
len
(
)
)
;
EXPECT_EQ
(
3U
buffer
.
data
(
)
[
0
]
)
<
<
"
curve_type
=
=
named_curve
"
;
uint32_t
tmp
;
EXPECT_TRUE
(
buffer
.
Read
(
1
2
&
tmp
)
)
<
<
"
read
NamedCurve
"
;
EXPECT_EQ
(
ssl_grp_ec_secp256r1
tmp
)
;
EXPECT_TRUE
(
buffer
.
Read
(
3
1
&
tmp
)
)
<
<
"
read
ECPoint
"
;
CheckSigAlgs
(
capture_ske
4
+
tmp
client_
ssl_hash_sha256
1024
)
;
}
TEST_P
(
TlsConnectTls12
ClientAuthCheckSigAlg
)
{
EnsureTlsSetup
(
)
;
auto
capture_cert_verify
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeCertificateVerify
)
;
client_
-
>
SetPacketFilter
(
capture_cert_verify
)
;
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
CheckSigAlgs
(
capture_cert_verify
0
server_
ssl_hash_sha1
1024
)
;
}
TEST_P
(
TlsConnectTls12
ClientAuthBigRsaCheckSigAlg
)
{
Reset
(
TlsAgent
:
:
kServerRsa
TlsAgent
:
:
kRsa2048
)
;
auto
capture_cert_verify
=
new
TlsInspectorRecordHandshakeMessage
(
kTlsHandshakeCertificateVerify
)
;
client_
-
>
SetPacketFilter
(
capture_cert_verify
)
;
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
CheckSigAlgs
(
capture_cert_verify
0
server_
ssl_hash_sha256
2048
)
;
}
static
const
SSLSignatureAndHashAlg
SignatureEcdsaSha384
[
]
=
{
{
ssl_hash_sha384
ssl_sign_ecdsa
}
}
;
static
const
SSLSignatureAndHashAlg
SignatureEcdsaSha256
[
]
=
{
{
ssl_hash_sha256
ssl_sign_ecdsa
}
}
;
static
const
SSLSignatureAndHashAlg
SignatureRsaSha384
[
]
=
{
{
ssl_hash_sha384
ssl_sign_rsa
}
}
;
static
const
SSLSignatureAndHashAlg
SignatureRsaSha256
[
]
=
{
{
ssl_hash_sha256
ssl_sign_rsa
}
}
;
TEST_P
(
TlsConnectGeneric
SignatureAlgorithmServerAuth
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa384
)
;
client_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
server_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
)
;
}
TEST_P
(
TlsConnectGeneric
SignatureAlgorithmClientOnly
)
{
const
SSLSignatureAndHashAlg
clientAlgorithms
[
]
=
{
{
ssl_hash_sha384
ssl_sign_ecdsa
}
{
ssl_hash_sha384
ssl_sign_rsa
}
{
ssl_hash_md5
ssl_sign_ecdsa
}
}
;
Reset
(
TlsAgent
:
:
kServerEcdsa384
)
;
client_
-
>
SetSignatureAlgorithms
(
clientAlgorithms
PR_ARRAY_SIZE
(
clientAlgorithms
)
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
)
;
}
TEST_P
(
TlsConnectGeneric
SignatureAlgorithmServerOnly
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa384
)
;
server_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
)
;
}
TEST_P
(
TlsConnectTls12
SignatureSchemeCurveMismatch12
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
client_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
)
;
}
#
ifdef
NSS_ENABLE_TLS_1_3
TEST_P
(
TlsConnectTls13
SignatureAlgorithmServerUnsupported
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
server_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
ConnectExpectFail
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_UNSUPPORTED_SIGNATURE_ALGORITHM
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_NO_CYPHER_OVERLAP
)
;
}
TEST_P
(
TlsConnectTls13
SignatureAlgorithmClientUnsupported
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
client_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
ConnectExpectFail
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_UNSUPPORTED_SIGNATURE_ALGORITHM
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_NO_CYPHER_OVERLAP
)
;
}
#
endif
TEST_P
(
TlsConnectGenericPre13
SignatureAlgorithmNoOverlapStaticRsa
)
{
client_
-
>
SetSignatureAlgorithms
(
SignatureRsaSha384
PR_ARRAY_SIZE
(
SignatureRsaSha384
)
)
;
server_
-
>
SetSignatureAlgorithms
(
SignatureRsaSha256
PR_ARRAY_SIZE
(
SignatureRsaSha256
)
)
;
EnableOnlyStaticRsaCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_rsa
ssl_auth_rsa_decrypt
)
;
}
TEST_P
(
TlsConnectTls12Plus
SignatureAlgorithmNoOverlapEcdsa
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
client_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
server_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha256
PR_ARRAY_SIZE
(
SignatureEcdsaSha256
)
)
;
ConnectExpectFail
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_NO_CYPHER_OVERLAP
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_UNSUPPORTED_SIGNATURE_ALGORITHM
)
;
}
TEST_P
(
TlsConnectPre12
SignatureAlgorithmNoOverlapEcdsa
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
client_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha384
PR_ARRAY_SIZE
(
SignatureEcdsaSha384
)
)
;
server_
-
>
SetSignatureAlgorithms
(
SignatureEcdsaSha256
PR_ARRAY_SIZE
(
SignatureEcdsaSha256
)
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectTls12Plus
RequestClientAuthWithSha384
)
{
server_
-
>
SetSignatureAlgorithms
(
SignatureRsaSha384
PR_ARRAY_SIZE
(
SignatureRsaSha384
)
)
;
server_
-
>
RequestClientAuth
(
false
)
;
Connect
(
)
;
}
class
BeforeFinished
:
public
TlsRecordFilter
{
private
:
enum
HandshakeState
{
BEFORE_CCS
AFTER_CCS
DONE
}
;
public
:
BeforeFinished
(
TlsAgent
*
client
TlsAgent
*
server
VoidFunction
before_ccs
VoidFunction
before_finished
)
:
client_
(
client
)
server_
(
server
)
before_ccs_
(
before_ccs
)
before_finished_
(
before_finished
)
state_
(
BEFORE_CCS
)
{
}
protected
:
virtual
PacketFilter
:
:
Action
FilterRecord
(
const
RecordHeader
&
header
const
DataBuffer
&
body
DataBuffer
*
out
)
{
switch
(
state_
)
{
case
BEFORE_CCS
:
if
(
header
.
content_type
(
)
=
=
kTlsChangeCipherSpecType
)
{
before_ccs_
(
)
;
DataBuffer
ccs
;
header
.
Write
(
&
ccs
0
body
)
;
server_
-
>
SendDirect
(
ccs
)
;
client_
-
>
Handshake
(
)
;
state_
=
AFTER_CCS
;
return
DROP
;
}
break
;
case
AFTER_CCS
:
EXPECT_EQ
(
kTlsHandshakeType
header
.
content_type
(
)
)
;
before_finished_
(
)
;
state_
=
DONE
;
break
;
case
DONE
:
break
;
}
return
KEEP
;
}
private
:
TlsAgent
*
client_
;
TlsAgent
*
server_
;
VoidFunction
before_ccs_
;
VoidFunction
before_finished_
;
HandshakeState
state_
;
}
;
class
BeforeFinished13
:
public
PacketFilter
{
private
:
enum
HandshakeState
{
INIT
BEFORE_FIRST_FRAGMENT
BEFORE_SECOND_FRAGMENT
DONE
}
;
public
:
BeforeFinished13
(
TlsAgent
*
client
TlsAgent
*
server
VoidFunction
before_finished
)
:
client_
(
client
)
server_
(
server
)
before_finished_
(
before_finished
)
records_
(
0
)
{
}
protected
:
virtual
PacketFilter
:
:
Action
Filter
(
const
DataBuffer
&
input
DataBuffer
*
output
)
{
switch
(
+
+
records_
)
{
case
1
:
EXPECT_EQ
(
SECSuccess
SSLInt_SetMTU
(
server_
-
>
ssl_fd
(
)
input
.
len
(
)
-
1
)
)
;
return
DROP
;
case
3
:
client_
-
>
Handshake
(
)
;
before_finished_
(
)
;
break
;
default
:
break
;
}
return
KEEP
;
}
private
:
TlsAgent
*
client_
;
TlsAgent
*
server_
;
VoidFunction
before_finished_
;
size_t
records_
;
}
;
TEST_F
(
TlsConnectDatagram13
AuthCompleteBeforeFinished
)
{
client_
-
>
SetAuthCertificateCallback
(
[
]
(
TlsAgent
*
PRBool
PRBool
)
-
>
SECStatus
{
return
SECWouldBlock
;
}
)
;
server_
-
>
SetPacketFilter
(
new
BeforeFinished13
(
client_
server_
[
this
]
(
)
{
EXPECT_EQ
(
SECSuccess
SSL_AuthCertificateComplete
(
client_
-
>
ssl_fd
(
)
0
)
)
;
}
)
)
;
Connect
(
)
;
}
static
void
TriggerAuthComplete
(
PollTarget
*
target
Event
event
)
{
std
:
:
cerr
<
<
"
client
:
call
SSL_AuthCertificateComplete
"
<
<
std
:
:
endl
;
EXPECT_EQ
(
TIMER_EVENT
event
)
;
TlsAgent
*
client
=
static_cast
<
TlsAgent
*
>
(
target
)
;
EXPECT_EQ
(
SECSuccess
SSL_AuthCertificateComplete
(
client
-
>
ssl_fd
(
)
0
)
)
;
}
TEST_F
(
TlsConnectDatagram13
AuthCompleteAfterFinished
)
{
client_
-
>
SetAuthCertificateCallback
(
[
this
]
(
TlsAgent
*
PRBool
PRBool
)
-
>
SECStatus
{
Poller
:
:
Timer
*
timer_handle
;
Poller
:
:
Instance
(
)
-
>
SetTimer
(
1U
client_
TriggerAuthComplete
&
timer_handle
)
;
return
SECWouldBlock
;
}
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGenericPre13
ClientWriteBetweenCCSAndFinishedWithFalseStart
)
{
client_
-
>
EnableFalseStart
(
)
;
server_
-
>
SetPacketFilter
(
new
BeforeFinished
(
client_
server_
[
this
]
(
)
{
EXPECT_TRUE
(
client_
-
>
can_falsestart_hook_called
(
)
)
;
}
[
this
]
(
)
{
client_
-
>
SendData
(
10
)
;
}
)
)
;
Connect
(
)
;
server_
-
>
SendData
(
10
)
;
Receive
(
10
)
;
}
TEST_P
(
TlsConnectGenericPre13
AuthCompleteBeforeFinishedWithFalseStart
)
{
client_
-
>
EnableFalseStart
(
)
;
client_
-
>
SetAuthCertificateCallback
(
[
]
(
TlsAgent
*
PRBool
PRBool
)
-
>
SECStatus
{
return
SECWouldBlock
;
}
)
;
server_
-
>
SetPacketFilter
(
new
BeforeFinished
(
client_
server_
[
]
(
)
{
}
[
this
]
(
)
{
EXPECT_FALSE
(
client_
-
>
can_falsestart_hook_called
(
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_AuthCertificateComplete
(
client_
-
>
ssl_fd
(
)
0
)
)
;
EXPECT_TRUE
(
client_
-
>
can_falsestart_hook_called
(
)
)
;
client_
-
>
SendData
(
10
)
;
}
)
)
;
Connect
(
)
;
server_
-
>
SendData
(
10
)
;
Receive
(
10
)
;
}
static
const
SSLExtraServerCertData
ServerCertDataRsaPkcs1Decrypt
=
{
ssl_auth_rsa_decrypt
nullptr
nullptr
nullptr
}
;
static
const
SSLExtraServerCertData
ServerCertDataRsaPkcs1Sign
=
{
ssl_auth_rsa_sign
nullptr
nullptr
nullptr
}
;
static
const
SSLExtraServerCertData
ServerCertDataRsaPss
=
{
ssl_auth_rsa_pss
nullptr
nullptr
nullptr
}
;
TEST_F
(
TlsAgentStreamTestServer
ConfigureCertRsaPkcs1SignAndKEX
)
{
Reset
(
TlsAgent
:
:
kServerRsa
)
;
PRFileDesc
*
ssl_fd
=
agent_
-
>
ssl_fd
(
)
;
EXPECT_TRUE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_decrypt
)
)
;
EXPECT_TRUE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_sign
)
)
;
EXPECT_TRUE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_pss
)
)
;
EXPECT_TRUE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsa
false
&
ServerCertDataRsaPkcs1Decrypt
)
)
;
EXPECT_TRUE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsa
false
&
ServerCertDataRsaPkcs1Sign
)
)
;
EXPECT_TRUE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsa
false
&
ServerCertDataRsaPss
)
)
;
}
TEST_F
(
TlsAgentStreamTestServer
ConfigureCertRsaPkcs1Sign
)
{
Reset
(
TlsAgent
:
:
kServerRsaSign
)
;
PRFileDesc
*
ssl_fd
=
agent_
-
>
ssl_fd
(
)
;
EXPECT_FALSE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_decrypt
)
)
;
EXPECT_TRUE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_sign
)
)
;
EXPECT_TRUE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_pss
)
)
;
EXPECT_FALSE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsaSign
false
&
ServerCertDataRsaPkcs1Decrypt
)
)
;
EXPECT_TRUE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsaSign
false
&
ServerCertDataRsaPkcs1Sign
)
)
;
EXPECT_TRUE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsaSign
false
&
ServerCertDataRsaPss
)
)
;
}
TEST_F
(
TlsAgentStreamTestServer
ConfigureCertRsaPkcs1KEX
)
{
Reset
(
TlsAgent
:
:
kServerRsaDecrypt
)
;
PRFileDesc
*
ssl_fd
=
agent_
-
>
ssl_fd
(
)
;
EXPECT_TRUE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_decrypt
)
)
;
EXPECT_FALSE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_sign
)
)
;
EXPECT_FALSE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_pss
)
)
;
EXPECT_FALSE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsaDecrypt
false
&
ServerCertDataRsaPkcs1Sign
)
)
;
EXPECT_FALSE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsaDecrypt
false
&
ServerCertDataRsaPss
)
)
;
EXPECT_TRUE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsaDecrypt
false
&
ServerCertDataRsaPkcs1Decrypt
)
)
;
}
TEST_F
(
TlsAgentStreamTestServer
ConfigureCertRsaPss
)
{
Reset
(
TlsAgent
:
:
kServerRsaPss
)
;
PRFileDesc
*
ssl_fd
=
agent_
-
>
ssl_fd
(
)
;
EXPECT_FALSE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_decrypt
)
)
;
EXPECT_FALSE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_sign
)
)
;
EXPECT_TRUE
(
SSLInt_HasCertWithAuthType
(
ssl_fd
ssl_auth_rsa_pss
)
)
;
EXPECT_FALSE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsaPss
false
&
ServerCertDataRsaPkcs1Sign
)
)
;
EXPECT_FALSE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsaPss
false
&
ServerCertDataRsaPkcs1Decrypt
)
)
;
EXPECT_TRUE
(
agent_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsaPss
false
&
ServerCertDataRsaPss
)
)
;
}
}
