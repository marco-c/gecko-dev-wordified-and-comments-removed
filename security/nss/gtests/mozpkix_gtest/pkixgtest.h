#
ifndef
mozilla_pkix_pkixgtest_h
#
define
mozilla_pkix_pkixgtest_h
#
include
<
ostream
>
#
if
defined
(
__clang__
)
#
pragma
clang
diagnostic
push
#
pragma
clang
diagnostic
ignored
"
-
Wdeprecated
"
#
pragma
clang
diagnostic
ignored
"
-
Wmissing
-
noreturn
"
#
pragma
clang
diagnostic
ignored
"
-
Wshift
-
sign
-
overflow
"
#
pragma
clang
diagnostic
ignored
"
-
Wsign
-
conversion
"
#
pragma
clang
diagnostic
ignored
"
-
Wundef
"
#
elif
defined
(
__GNUC__
)
#
pragma
GCC
diagnostic
push
#
pragma
GCC
diagnostic
ignored
"
-
Wextra
"
#
elif
defined
(
_MSC_VER
)
#
pragma
warning
(
push
3
)
#
pragma
warning
(
disable
:
4224
)
#
pragma
warning
(
disable
:
4826
)
#
endif
#
include
"
gtest
/
gtest
.
h
"
#
if
defined
(
__clang__
)
#
pragma
clang
diagnostic
pop
#
elif
defined
(
__GNUC__
)
#
pragma
GCC
diagnostic
pop
#
elif
defined
(
_MSC_VER
)
#
pragma
warning
(
pop
)
#
endif
#
include
"
mozpkix
/
pkix
.
h
"
#
include
"
mozpkix
/
pkixder
.
h
"
#
include
"
mozpkix
/
test
/
pkixtestutil
.
h
"
namespace
mozilla
{
namespace
pkix
{
inline
void
PrintTo
(
const
Result
&
result
:
:
std
:
:
ostream
*
os
)
{
const
char
*
stringified
=
MapResultToName
(
result
)
;
if
(
stringified
)
{
*
os
<
<
stringified
;
}
else
{
*
os
<
<
"
mozilla
:
:
pkix
:
:
Result
(
"
<
<
static_cast
<
unsigned
int
>
(
result
)
<
<
"
)
"
;
}
}
}
}
namespace
mozilla
{
namespace
pkix
{
namespace
test
{
extern
const
std
:
:
time_t
oneDayBeforeNow
;
extern
const
std
:
:
time_t
oneDayAfterNow
;
extern
const
std
:
:
time_t
twoDaysBeforeNow
;
extern
const
std
:
:
time_t
twoDaysAfterNow
;
extern
const
std
:
:
time_t
tenDaysBeforeNow
;
extern
const
std
:
:
time_t
tenDaysAfterNow
;
class
EverythingFailsByDefaultTrustDomain
:
public
TrustDomain
{
public
:
Result
GetCertTrust
(
EndEntityOrCA
const
CertPolicyId
&
Input
TrustLevel
&
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
GetCertTrust
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
FindIssuer
(
Input
IssuerChecker
&
Time
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
FindIssuer
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
CheckRevocation
(
EndEntityOrCA
const
CertID
&
Time
Duration
const
Input
*
const
Input
*
const
Input
*
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
CheckRevocation
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
IsChainValid
(
const
DERArray
&
Time
const
CertPolicyId
&
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
IsChainValid
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
DigestBuf
(
Input
DigestAlgorithm
uint8_t
*
size_t
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
DigestBuf
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
CheckSignatureDigestAlgorithm
(
DigestAlgorithm
EndEntityOrCA
Time
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
CheckSignatureDigestAlgorithm
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
CheckECDSACurveIsAcceptable
(
EndEntityOrCA
NamedCurve
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
CheckECDSACurveIsAcceptable
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
VerifyECDSASignedData
(
Input
DigestAlgorithm
Input
Input
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
VerifyECDSASignedData
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
CheckRSAPublicKeyModulusSizeInBits
(
EndEntityOrCA
unsigned
int
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
CheckRSAPublicKeyModulusSizeInBits
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
VerifyRSAPKCS1SignedData
(
Input
DigestAlgorithm
Input
Input
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
VerifyRSAPKCS1SignedData
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
VerifyRSAPSSSignedData
(
Input
DigestAlgorithm
Input
Input
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
VerifyRSAPSSSignedData
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
Result
CheckValidityIsAcceptable
(
Time
Time
EndEntityOrCA
KeyPurposeId
)
override
{
ADD_FAILURE
(
)
;
return
NotReached
(
"
CheckValidityIsAcceptable
should
not
be
called
"
Result
:
:
FATAL_ERROR_LIBRARY_FAILURE
)
;
}
virtual
void
NoteAuxiliaryExtension
(
AuxiliaryExtension
Input
)
override
{
ADD_FAILURE
(
)
;
}
}
;
class
DefaultCryptoTrustDomain
:
public
EverythingFailsByDefaultTrustDomain
{
Result
DigestBuf
(
Input
item
DigestAlgorithm
digestAlg
uint8_t
*
digestBuf
size_t
digestBufLen
)
override
{
return
TestDigestBuf
(
item
digestAlg
digestBuf
digestBufLen
)
;
}
Result
CheckSignatureDigestAlgorithm
(
DigestAlgorithm
EndEntityOrCA
Time
)
override
{
return
Success
;
}
Result
CheckECDSACurveIsAcceptable
(
EndEntityOrCA
NamedCurve
)
override
{
return
Success
;
}
Result
VerifyECDSASignedData
(
Input
data
DigestAlgorithm
digestAlgorithm
Input
signature
Input
subjectPublicKeyInfo
)
override
{
return
TestVerifyECDSASignedData
(
data
digestAlgorithm
signature
subjectPublicKeyInfo
)
;
}
Result
CheckRSAPublicKeyModulusSizeInBits
(
EndEntityOrCA
unsigned
int
)
override
{
return
Success
;
}
Result
VerifyRSAPKCS1SignedData
(
Input
data
DigestAlgorithm
digestAlgorithm
Input
signature
Input
subjectPublicKeyInfo
)
override
{
return
TestVerifyRSAPKCS1SignedData
(
data
digestAlgorithm
signature
subjectPublicKeyInfo
)
;
}
Result
CheckValidityIsAcceptable
(
Time
Time
EndEntityOrCA
KeyPurposeId
)
override
{
return
Success
;
}
void
NoteAuxiliaryExtension
(
AuxiliaryExtension
Input
)
override
{
}
}
;
class
DefaultNameMatchingPolicy
:
public
NameMatchingPolicy
{
public
:
virtual
Result
FallBackToCommonName
(
Time
FallBackToSearchWithinSubject
&
fallBackToCommonName
)
override
{
fallBackToCommonName
=
FallBackToSearchWithinSubject
:
:
Yes
;
return
Success
;
}
virtual
HandleInvalidSubjectAlternativeNamesBy
HandleInvalidSubjectAlternativeNames
(
)
override
{
return
HandleInvalidSubjectAlternativeNamesBy
:
:
Halting
;
}
}
;
const
uint8_t
tlv_id_kp_clientAuth
[
]
=
{
0x06
0x08
0x2b
0x06
0x01
0x05
0x05
0x07
0x03
0x02
}
;
const
uint8_t
tlv_id_kp_codeSigning
[
]
=
{
0x06
0x08
0x2b
0x06
0x01
0x05
0x05
0x07
0x03
0x03
}
;
const
uint8_t
tlv_id_ce_extKeyUsage
[
]
=
{
0x06
0x03
0x55
0x1d
0x25
}
;
inline
ByteString
CreateEKUExtension
(
ByteString
ekuOIDs
)
{
return
TLV
(
der
:
:
SEQUENCE
BytesToByteString
(
tlv_id_ce_extKeyUsage
)
+
TLV
(
der
:
:
OCTET_STRING
TLV
(
der
:
:
SEQUENCE
ekuOIDs
)
)
)
;
}
}
}
}
#
endif
