#
include
"
gtest
/
gtest
.
h
"
#
include
"
prenv
.
h
"
#
include
"
seccomon
.
h
"
#
include
<
stdlib
.
h
>
#
include
<
string
>
#
include
<
unistd
.
h
>
#
include
<
sys
/
stat
.
h
>
namespace
nss_test
{
extern
"
C
"
char
*
getUserDB
(
void
)
;
class
Sysinit
:
public
:
:
testing
:
:
Test
{
protected
:
void
SetUp
(
)
{
home_var_
=
PR_GetEnvSecure
(
"
HOME
"
)
;
if
(
home_var_
)
{
old_home_dir_
=
home_var_
;
}
xdg_data_home_var_
=
PR_GetEnvSecure
(
"
XDG_DATA_HOME
"
)
;
if
(
xdg_data_home_var_
)
{
old_xdg_data_home_
=
xdg_data_home_var_
;
ASSERT_EQ
(
0
unsetenv
(
"
XDG_DATA_HOME
"
)
)
;
}
char
tmp
[
]
=
"
/
tmp
/
nss
-
tmp
.
XXXXXX
"
;
tmp_home_
=
mkdtemp
(
tmp
)
;
ASSERT_EQ
(
0
setenv
(
"
HOME
"
tmp_home_
.
c_str
(
)
1
)
)
;
}
void
TearDown
(
)
{
if
(
home_var_
)
{
ASSERT_EQ
(
0
setenv
(
"
HOME
"
old_home_dir_
.
c_str
(
)
1
)
)
;
}
else
{
ASSERT_EQ
(
0
unsetenv
(
"
HOME
"
)
)
;
}
if
(
xdg_data_home_var_
)
{
ASSERT_EQ
(
0
setenv
(
"
XDG_DATA_HOME
"
old_xdg_data_home_
.
c_str
(
)
1
)
)
;
}
if
(
!
nssdir_
.
empty
(
)
)
{
ASSERT_EQ
(
0
RemoveEmptyDirsFromStart
(
nssdir_
tmp_home_
)
)
;
}
}
static
int
RemoveEmptyDirsFromStart
(
std
:
:
string
path
std
:
:
string
start
)
{
if
(
path
.
find
(
start
)
=
=
std
:
:
string
:
:
npos
)
{
return
-
1
;
}
std
:
:
string
temp
=
path
;
if
(
rmdir
(
temp
.
c_str
(
)
)
)
{
return
-
1
;
}
for
(
size_t
i
=
temp
.
length
(
)
-
1
;
i
>
start
.
length
(
)
;
-
-
i
)
{
if
(
temp
[
i
]
=
=
'
/
'
)
{
temp
[
i
]
=
'
\
0
'
;
if
(
rmdir
(
temp
.
c_str
(
)
)
)
{
return
-
1
;
}
}
}
if
(
rmdir
(
start
.
c_str
(
)
)
)
{
return
-
1
;
}
return
0
;
}
static
std
:
:
string
CreateEmptyDirsFromStart
(
std
:
:
string
start
std
:
:
string
path
mode_t
mode
)
{
std
:
:
string
temp
=
start
+
"
/
"
;
for
(
size_t
i
=
1
;
i
<
path
.
length
(
)
;
+
+
i
)
{
if
(
path
[
i
]
=
=
'
/
'
)
{
EXPECT_EQ
(
0
mkdir
(
temp
.
c_str
(
)
mode
)
)
;
}
temp
+
=
path
[
i
]
;
}
EXPECT_EQ
(
0
mkdir
(
temp
.
c_str
(
)
mode
)
)
;
return
temp
;
}
char
*
home_var_
;
char
*
xdg_data_home_var_
;
std
:
:
string
old_home_dir_
;
std
:
:
string
old_xdg_data_home_
;
std
:
:
string
nssdir_
;
std
:
:
string
tmp_home_
;
}
;
class
SysinitSetXdgUserDataHome
:
public
Sysinit
{
protected
:
void
SetUp
(
)
{
Sysinit
:
:
SetUp
(
)
;
ASSERT_EQ
(
0
setenv
(
"
XDG_DATA_HOME
"
tmp_home_
.
c_str
(
)
1
)
)
;
}
}
;
class
SysinitSetTrashXdgUserDataHome
:
public
Sysinit
{
protected
:
void
SetUp
(
)
{
Sysinit
:
:
SetUp
(
)
;
std
:
:
string
trashPath
=
tmp_home_
+
"
/
this
/
path
/
does
/
not
/
exist
"
;
ASSERT_EQ
(
0
setenv
(
"
XDG_DATA_HOME
"
trashPath
.
c_str
(
)
1
)
)
;
}
void
TearDown
(
)
{
ASSERT_EQ
(
0
rmdir
(
tmp_home_
.
c_str
(
)
)
)
;
Sysinit
:
:
TearDown
(
)
;
}
}
;
TEST_F
(
Sysinit
LegacyPath
)
{
nssdir_
=
CreateEmptyDirsFromStart
(
tmp_home_
"
/
.
pki
/
nssdb
"
0760
)
;
char
*
nssdb
=
getUserDB
(
)
;
ASSERT_EQ
(
nssdir_
nssdb
)
;
PORT_Free
(
nssdb
)
;
}
TEST_F
(
Sysinit
XdgDefaultPath
)
{
nssdir_
=
CreateEmptyDirsFromStart
(
tmp_home_
"
/
.
local
/
share
"
0755
)
;
nssdir_
=
CreateEmptyDirsFromStart
(
nssdir_
"
/
pki
/
nssdb
"
0760
)
;
char
*
nssdb
=
getUserDB
(
)
;
ASSERT_EQ
(
nssdir_
nssdb
)
;
PORT_Free
(
nssdb
)
;
}
TEST_F
(
SysinitSetXdgUserDataHome
XdgSetPath
)
{
nssdir_
=
CreateEmptyDirsFromStart
(
tmp_home_
"
/
pki
/
nssdb
"
0760
)
;
char
*
nssdb
=
getUserDB
(
)
;
ASSERT_EQ
(
nssdir_
nssdb
)
;
PORT_Free
(
nssdb
)
;
}
TEST_F
(
SysinitSetTrashXdgUserDataHome
XdgSetToTrashPath
)
{
char
*
nssdb
=
getUserDB
(
)
;
ASSERT_EQ
(
nullptr
nssdb
)
;
}
}
