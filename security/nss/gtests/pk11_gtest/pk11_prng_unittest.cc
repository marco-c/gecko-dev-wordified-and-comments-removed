#
include
<
memory
>
#
include
"
blapi
.
h
"
#
include
"
pk11pub
.
h
"
#
include
"
gtest
/
gtest
.
h
"
namespace
nss_test
{
class
PK11PrngTest
:
public
:
:
testing
:
:
Test
{
}
;
#
ifdef
UNSAFE_FUZZER_MODE
TEST_F
(
PK11PrngTest
Fuzz_DetPRNG
)
{
std
:
:
vector
<
uint8_t
>
rnd1
(
2048
0
)
;
std
:
:
vector
<
uint8_t
>
rnd2
(
2048
0
)
;
SECStatus
rv
=
PK11_GenerateRandom
(
rnd1
.
data
(
)
rnd1
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
rv
=
PK11_GenerateRandom
(
rnd2
.
data
(
)
rnd2
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
EXPECT_NE
(
rnd1
rnd2
)
;
}
TEST_F
(
PK11PrngTest
Fuzz_DetPRNG_Reset
)
{
std
:
:
vector
<
uint8_t
>
rnd1
(
2048
0
)
;
std
:
:
vector
<
uint8_t
>
rnd2
(
2048
0
)
;
EXPECT_EQ
(
SECSuccess
RNG_RandomUpdate
(
NULL
0
)
)
;
SECStatus
rv
=
PK11_GenerateRandom
(
rnd1
.
data
(
)
rnd1
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
EXPECT_EQ
(
SECSuccess
RNG_RandomUpdate
(
NULL
0
)
)
;
rv
=
PK11_GenerateRandom
(
rnd2
.
data
(
)
rnd2
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
EXPECT_EQ
(
rnd1
rnd2
)
;
}
TEST_F
(
PK11PrngTest
Fuzz_DetPRNG_StatefulReset
)
{
std
:
:
vector
<
uint8_t
>
rnd1
(
2048
0
)
;
std
:
:
vector
<
uint8_t
>
rnd2
(
2048
0
)
;
EXPECT_EQ
(
SECSuccess
RNG_RandomUpdate
(
NULL
0
)
)
;
SECStatus
rv
=
PK11_GenerateRandom
(
rnd1
.
data
(
)
rnd1
.
size
(
)
-
1024
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
rv
=
PK11_GenerateRandom
(
rnd1
.
data
(
)
+
1024
rnd1
.
size
(
)
-
1024
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
EXPECT_EQ
(
SECSuccess
RNG_RandomUpdate
(
NULL
0
)
)
;
rv
=
PK11_GenerateRandom
(
rnd2
.
data
(
)
rnd2
.
size
(
)
-
1024
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
rv
=
PK11_GenerateRandom
(
rnd2
.
data
(
)
+
1024
rnd2
.
size
(
)
-
1024
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
EXPECT_EQ
(
rnd1
rnd2
)
;
}
TEST_F
(
PK11PrngTest
Fuzz_DetPRNG_Seed
)
{
std
:
:
vector
<
uint8_t
>
rnd1
(
2048
0
)
;
std
:
:
vector
<
uint8_t
>
rnd2
(
2048
0
)
;
std
:
:
vector
<
uint8_t
>
seed
=
{
0x01
0x22
0xAA
0x45
}
;
SECStatus
rv
=
PK11_RandomUpdate
(
seed
.
data
(
)
seed
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
rv
=
PK11_GenerateRandom
(
rnd1
.
data
(
)
rnd1
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
rv
=
PK11_GenerateRandom
(
rnd2
.
data
(
)
rnd2
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
EXPECT_NE
(
rnd1
rnd2
)
;
}
TEST_F
(
PK11PrngTest
Fuzz_DetPRNG_StatefulReset_Seed
)
{
std
:
:
vector
<
uint8_t
>
rnd1
(
2048
0
)
;
std
:
:
vector
<
uint8_t
>
rnd2
(
2048
0
)
;
std
:
:
vector
<
uint8_t
>
seed
=
{
0x01
0x22
0xAA
0x45
}
;
SECStatus
rv
=
PK11_RandomUpdate
(
seed
.
data
(
)
seed
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
rv
=
PK11_GenerateRandom
(
rnd1
.
data
(
)
rnd1
.
size
(
)
-
1024
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
rv
=
PK11_GenerateRandom
(
rnd1
.
data
(
)
+
1024
rnd1
.
size
(
)
-
1024
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
rv
=
PK11_RandomUpdate
(
seed
.
data
(
)
seed
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
rv
=
PK11_GenerateRandom
(
rnd2
.
data
(
)
rnd2
.
size
(
)
-
1024
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
rv
=
PK11_GenerateRandom
(
rnd2
.
data
(
)
+
1024
rnd2
.
size
(
)
-
1024
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
EXPECT_EQ
(
rnd1
rnd2
)
;
}
#
endif
}
