#
include
<
memory
>
#
include
"
nss
.
h
"
#
include
"
pk11pub
.
h
"
#
include
"
secerr
.
h
"
#
include
"
nss_scoped_ptrs
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
util
.
h
"
namespace
nss_test
{
class
Pkcs11SeedTest
:
public
:
:
testing
:
:
Test
{
protected
:
void
EncryptDecryptSeed
(
SECStatus
expected
unsigned
int
input_size
unsigned
int
output_size
CK_MECHANISM_TYPE
mech
=
CKM_SEED_CBC
)
{
ScopedPK11SlotInfo
slot
(
PK11_GetInternalSlot
(
)
)
;
ScopedPK11SymKey
sym_key
(
PK11_KeyGen
(
slot
.
get
(
)
mech
nullptr
16
nullptr
)
)
;
EXPECT_TRUE
(
!
!
sym_key
)
;
std
:
:
vector
<
uint8_t
>
plaintext
(
input_size
0xFF
)
;
std
:
:
vector
<
uint8_t
>
init_vector
(
16
)
;
std
:
:
vector
<
uint8_t
>
ciphertext
(
output_size
0
)
;
SECItem
iv_param
=
{
siBuffer
init_vector
.
data
(
)
(
unsigned
int
)
init_vector
.
size
(
)
}
;
std
:
:
vector
<
uint8_t
>
decrypted
(
output_size
0
)
;
unsigned
int
output_len
=
0
;
EXPECT_EQ
(
expected
PK11_Encrypt
(
sym_key
.
get
(
)
mech
&
iv_param
ciphertext
.
data
(
)
&
output_len
output_size
plaintext
.
data
(
)
plaintext
.
size
(
)
)
)
;
if
(
expected
=
=
SECSuccess
)
{
EXPECT_EQ
(
expected
PK11_Decrypt
(
sym_key
.
get
(
)
mech
&
iv_param
decrypted
.
data
(
)
&
output_len
output_size
ciphertext
.
data
(
)
output_len
)
)
;
decrypted
.
resize
(
output_len
)
;
EXPECT_EQ
(
plaintext
decrypted
)
;
}
}
}
;
#
ifndef
NSS_DISABLE_DEPRECATED_SEED
TEST_F
(
Pkcs11SeedTest
CBC_ValidArgs
)
{
EncryptDecryptSeed
(
SECSuccess
16
16
)
;
EncryptDecryptSeed
(
SECSuccess
16
32
)
;
}
TEST_F
(
Pkcs11SeedTest
CBC_InvalidArgs
)
{
EncryptDecryptSeed
(
SECFailure
16
10
)
;
EncryptDecryptSeed
(
SECFailure
17
32
)
;
}
TEST_F
(
Pkcs11SeedTest
ECB_Singleblock
)
{
EncryptDecryptSeed
(
SECSuccess
16
16
CKM_SEED_ECB
)
;
}
TEST_F
(
Pkcs11SeedTest
ECB_Multiblock
)
{
EncryptDecryptSeed
(
SECSuccess
64
64
CKM_SEED_ECB
)
;
}
#
endif
}
