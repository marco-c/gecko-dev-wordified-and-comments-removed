#
include
<
memory
>
#
include
"
nss
.
h
"
#
include
"
pk11pub
.
h
"
#
include
"
sechash
.
h
"
#
include
"
secerr
.
h
"
#
include
"
cpputil
.
h
"
#
include
"
nss_scoped_ptrs
.
h
"
#
include
"
testvectors
/
chachapoly
-
vectors
.
h
"
#
include
"
gtest
/
gtest
.
h
"
namespace
nss_test
{
static
const
CK_MECHANISM_TYPE
kMech
=
CKM_NSS_CHACHA20_POLY1305
;
static
const
CK_MECHANISM_TYPE
kMechXor
=
CKM_NSS_CHACHA20_CTR
;
static
const
uint8_t
kKeyData
[
32
]
=
{
'
k
'
}
;
static
const
uint8_t
kCtrNonce
[
16
]
=
{
'
c
'
0
0
0
'
n
'
}
;
static
const
uint8_t
kData
[
16
]
=
{
'
d
'
}
;
class
Pkcs11ChaCha20Poly1305Test
:
public
:
:
testing
:
:
TestWithParam
<
chacha_testvector
>
{
public
:
void
EncryptDecrypt
(
const
ScopedPK11SymKey
&
key
const
bool
invalid_iv
const
bool
invalid_tag
const
uint8_t
*
data
size_t
data_len
const
uint8_t
*
aad
size_t
aad_len
const
uint8_t
*
iv
size_t
iv_len
const
uint8_t
*
ct
=
nullptr
size_t
ct_len
=
0
)
{
CK_NSS_AEAD_PARAMS
aead_params
;
aead_params
.
pNonce
=
toUcharPtr
(
iv
)
;
aead_params
.
ulNonceLen
=
iv_len
;
aead_params
.
pAAD
=
toUcharPtr
(
aad
)
;
aead_params
.
ulAADLen
=
aad_len
;
aead_params
.
ulTagLen
=
16
;
SECItem
params
=
{
siBuffer
reinterpret_cast
<
unsigned
char
*
>
(
&
aead_params
)
sizeof
(
aead_params
)
}
;
unsigned
int
outputLen
=
0
;
std
:
:
vector
<
uint8_t
>
output
(
data_len
+
aead_params
.
ulTagLen
)
;
SECStatus
rv
=
PK11_Encrypt
(
key
.
get
(
)
kMech
&
params
output
.
data
(
)
&
outputLen
output
.
size
(
)
data
data_len
)
;
if
(
invalid_iv
)
{
EXPECT_EQ
(
rv
SECFailure
)
;
return
;
}
else
{
EXPECT_EQ
(
rv
SECSuccess
)
;
}
if
(
ct
)
{
ASSERT_EQ
(
ct_len
outputLen
)
;
EXPECT_TRUE
(
!
memcmp
(
ct
output
.
data
(
)
outputLen
)
!
=
invalid_tag
)
;
}
unsigned
int
decryptedLen
=
0
;
std
:
:
vector
<
uint8_t
>
decrypted
(
data_len
)
;
rv
=
PK11_Decrypt
(
key
.
get
(
)
kMech
&
params
decrypted
.
data
(
)
&
decryptedLen
decrypted
.
size
(
)
output
.
data
(
)
outputLen
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
ASSERT_EQ
(
data_len
decryptedLen
)
;
EXPECT_TRUE
(
!
memcmp
(
data
decrypted
.
data
(
)
decryptedLen
)
)
;
if
(
outputLen
!
=
0
)
{
std
:
:
vector
<
uint8_t
>
bogusCiphertext
(
output
)
;
bogusCiphertext
[
0
]
^
=
0xff
;
rv
=
PK11_Decrypt
(
key
.
get
(
)
kMech
&
params
decrypted
.
data
(
)
&
decryptedLen
decrypted
.
size
(
)
bogusCiphertext
.
data
(
)
outputLen
)
;
EXPECT_NE
(
rv
SECSuccess
)
;
}
if
(
outputLen
!
=
0
)
{
std
:
:
vector
<
uint8_t
>
bogusTag
(
output
)
;
bogusTag
[
outputLen
-
1
]
^
=
0xff
;
rv
=
PK11_Decrypt
(
key
.
get
(
)
kMech
&
params
decrypted
.
data
(
)
&
decryptedLen
decrypted
.
size
(
)
bogusTag
.
data
(
)
outputLen
)
;
EXPECT_NE
(
rv
SECSuccess
)
;
}
if
(
iv_len
!
=
0
)
{
SECItem
bogusParams
(
params
)
;
CK_NSS_AEAD_PARAMS
bogusAeadParams
(
aead_params
)
;
bogusParams
.
data
=
reinterpret_cast
<
unsigned
char
*
>
(
&
bogusAeadParams
)
;
std
:
:
vector
<
uint8_t
>
bogusIV
(
iv
iv
+
iv_len
)
;
bogusAeadParams
.
pNonce
=
toUcharPtr
(
bogusIV
.
data
(
)
)
;
bogusIV
[
0
]
^
=
0xff
;
rv
=
PK11_Decrypt
(
key
.
get
(
)
kMech
&
bogusParams
decrypted
.
data
(
)
&
decryptedLen
data_len
output
.
data
(
)
outputLen
)
;
EXPECT_NE
(
rv
SECSuccess
)
;
}
if
(
aad_len
!
=
0
)
{
SECItem
bogusParams
(
params
)
;
CK_NSS_AEAD_PARAMS
bogusAeadParams
(
aead_params
)
;
bogusParams
.
data
=
reinterpret_cast
<
unsigned
char
*
>
(
&
bogusAeadParams
)
;
std
:
:
vector
<
uint8_t
>
bogusAAD
(
aad
aad
+
aad_len
)
;
bogusAeadParams
.
pAAD
=
toUcharPtr
(
bogusAAD
.
data
(
)
)
;
bogusAAD
[
0
]
^
=
0xff
;
rv
=
PK11_Decrypt
(
key
.
get
(
)
kMech
&
bogusParams
decrypted
.
data
(
)
&
decryptedLen
data_len
output
.
data
(
)
outputLen
)
;
EXPECT_NE
(
rv
SECSuccess
)
;
}
}
void
EncryptDecrypt
(
const
chacha_testvector
testvector
)
{
ScopedPK11SlotInfo
slot
(
PK11_GetInternalSlot
(
)
)
;
SECItem
key_item
=
{
siBuffer
toUcharPtr
(
testvector
.
Key
.
data
(
)
)
static_cast
<
unsigned
int
>
(
testvector
.
Key
.
size
(
)
)
}
;
ScopedPK11SymKey
key
(
PK11_ImportSymKey
(
slot
.
get
(
)
kMech
PK11_OriginUnwrap
CKA_ENCRYPT
&
key_item
nullptr
)
)
;
EXPECT_TRUE
(
!
!
key
)
;
EncryptDecrypt
(
key
testvector
.
invalid_iv
testvector
.
invalid_tag
testvector
.
Data
.
data
(
)
testvector
.
Data
.
size
(
)
testvector
.
AAD
.
data
(
)
testvector
.
AAD
.
size
(
)
testvector
.
IV
.
data
(
)
testvector
.
IV
.
size
(
)
testvector
.
CT
.
data
(
)
testvector
.
CT
.
size
(
)
)
;
}
protected
:
}
;
TEST_F
(
Pkcs11ChaCha20Poly1305Test
GenerateEncryptDecrypt
)
{
ScopedPK11SlotInfo
slot
(
PK11_GetInternalSlot
(
)
)
;
ScopedPK11SymKey
key
(
PK11_KeyGen
(
slot
.
get
(
)
kMech
nullptr
32
nullptr
)
)
;
EXPECT_TRUE
(
!
!
key
)
;
std
:
:
vector
<
uint8_t
>
data
(
512
)
;
SECStatus
rv
=
PK11_GenerateRandomOnSlot
(
slot
.
get
(
)
data
.
data
(
)
data
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
std
:
:
vector
<
uint8_t
>
aad
(
16
)
;
rv
=
PK11_GenerateRandomOnSlot
(
slot
.
get
(
)
aad
.
data
(
)
aad
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
std
:
:
vector
<
uint8_t
>
iv
(
12
)
;
rv
=
PK11_GenerateRandomOnSlot
(
slot
.
get
(
)
iv
.
data
(
)
iv
.
size
(
)
)
;
EXPECT_EQ
(
rv
SECSuccess
)
;
EncryptDecrypt
(
key
false
false
data
.
data
(
)
data
.
size
(
)
aad
.
data
(
)
aad
.
size
(
)
iv
.
data
(
)
iv
.
size
(
)
)
;
}
TEST_F
(
Pkcs11ChaCha20Poly1305Test
Xor
)
{
static
const
uint8_t
kExpected
[
sizeof
(
kData
)
]
=
{
0xd8
0x15
0xd3
0xb3
0xe9
0x34
0x3b
0x7a
0x24
0xf6
0x5f
0xd7
0x95
0x3d
0xd3
0x51
}
;
ScopedPK11SlotInfo
slot
(
PK11_GetInternalSlot
(
)
)
;
SECItem
keyItem
=
{
siBuffer
toUcharPtr
(
kKeyData
)
static_cast
<
unsigned
int
>
(
sizeof
(
kKeyData
)
)
}
;
ScopedPK11SymKey
key
(
PK11_ImportSymKey
(
slot
.
get
(
)
kMechXor
PK11_OriginUnwrap
CKA_ENCRYPT
&
keyItem
nullptr
)
)
;
EXPECT_TRUE
(
!
!
key
)
;
SECItem
ctr_nonce_item
=
{
siBuffer
toUcharPtr
(
kCtrNonce
)
static_cast
<
unsigned
int
>
(
sizeof
(
kCtrNonce
)
)
}
;
uint8_t
output
[
sizeof
(
kData
)
]
;
unsigned
int
output_len
=
88
;
SECStatus
rv
=
PK11_Encrypt
(
key
.
get
(
)
kMechXor
&
ctr_nonce_item
output
&
output_len
sizeof
(
output
)
kData
sizeof
(
kData
)
)
;
ASSERT_EQ
(
SECSuccess
rv
)
;
ASSERT_EQ
(
sizeof
(
kExpected
)
static_cast
<
size_t
>
(
output_len
)
)
;
EXPECT_EQ
(
0
memcmp
(
kExpected
output
sizeof
(
kExpected
)
)
)
;
rv
=
PK11_Decrypt
(
key
.
get
(
)
kMechXor
&
ctr_nonce_item
output
&
output_len
sizeof
(
output
)
kData
sizeof
(
kData
)
)
;
ASSERT_EQ
(
SECSuccess
rv
)
;
ASSERT_EQ
(
sizeof
(
kData
)
static_cast
<
size_t
>
(
output_len
)
)
;
EXPECT_EQ
(
0
memcmp
(
kExpected
output
sizeof
(
kExpected
)
)
)
;
rv
=
PK11_Encrypt
(
key
.
get
(
)
kMechXor
&
ctr_nonce_item
output
&
output_len
sizeof
(
output
)
kExpected
sizeof
(
kExpected
)
)
;
ASSERT_EQ
(
SECSuccess
rv
)
;
ASSERT_EQ
(
sizeof
(
kExpected
)
static_cast
<
size_t
>
(
output_len
)
)
;
EXPECT_EQ
(
0
memcmp
(
kData
output
sizeof
(
kData
)
)
)
;
}
TEST_F
(
Pkcs11ChaCha20Poly1305Test
GenerateXor
)
{
ScopedPK11SlotInfo
slot
(
PK11_GetInternalSlot
(
)
)
;
ScopedPK11SymKey
key
(
PK11_KeyGen
(
slot
.
get
(
)
kMech
nullptr
32
nullptr
)
)
;
EXPECT_TRUE
(
!
!
key
)
;
SECItem
ctr_nonce_item
=
{
siBuffer
toUcharPtr
(
kCtrNonce
)
static_cast
<
unsigned
int
>
(
sizeof
(
kCtrNonce
)
)
}
;
uint8_t
output
[
sizeof
(
kData
)
]
;
unsigned
int
output_len
=
88
;
SECStatus
rv
=
PK11_Encrypt
(
key
.
get
(
)
kMechXor
&
ctr_nonce_item
output
&
output_len
sizeof
(
output
)
kData
sizeof
(
kData
)
)
;
ASSERT_EQ
(
SECSuccess
rv
)
;
ASSERT_EQ
(
sizeof
(
kData
)
static_cast
<
size_t
>
(
output_len
)
)
;
}
TEST_F
(
Pkcs11ChaCha20Poly1305Test
XorInvalidParams
)
{
ScopedPK11SlotInfo
slot
(
PK11_GetInternalSlot
(
)
)
;
ScopedPK11SymKey
key
(
PK11_KeyGen
(
slot
.
get
(
)
kMech
nullptr
32
nullptr
)
)
;
EXPECT_TRUE
(
!
!
key
)
;
SECItem
ctr_nonce_item
=
{
siBuffer
toUcharPtr
(
kCtrNonce
)
static_cast
<
unsigned
int
>
(
sizeof
(
kCtrNonce
)
)
-
1
}
;
uint8_t
output
[
sizeof
(
kData
)
]
;
unsigned
int
output_len
=
88
;
SECStatus
rv
=
PK11_Encrypt
(
key
.
get
(
)
kMechXor
&
ctr_nonce_item
output
&
output_len
sizeof
(
output
)
kData
sizeof
(
kData
)
)
;
EXPECT_EQ
(
SECFailure
rv
)
;
ctr_nonce_item
.
data
=
nullptr
;
rv
=
PK11_Encrypt
(
key
.
get
(
)
kMechXor
&
ctr_nonce_item
output
&
output_len
sizeof
(
output
)
kData
sizeof
(
kData
)
)
;
EXPECT_EQ
(
SECFailure
rv
)
;
EXPECT_EQ
(
SEC_ERROR_BAD_DATA
PORT_GetError
(
)
)
;
}
TEST_P
(
Pkcs11ChaCha20Poly1305Test
TestVectors
)
{
EncryptDecrypt
(
GetParam
(
)
)
;
}
INSTANTIATE_TEST_CASE_P
(
NSSTestVector
Pkcs11ChaCha20Poly1305Test
:
:
testing
:
:
ValuesIn
(
kChaCha20Vectors
)
)
;
INSTANTIATE_TEST_CASE_P
(
WycheproofTestVector
Pkcs11ChaCha20Poly1305Test
:
:
testing
:
:
ValuesIn
(
kChaCha20WycheproofVectors
)
)
;
}
