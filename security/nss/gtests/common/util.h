#
ifndef
util_h__
#
define
util_h__
#
include
<
cassert
>
#
include
<
cstdlib
>
#
include
<
iomanip
>
#
include
<
iostream
>
#
include
<
sstream
>
#
include
<
sys
/
stat
.
h
>
#
include
<
vector
>
#
if
defined
(
_WIN32
)
#
include
<
windows
.
h
>
#
include
<
codecvt
>
#
include
<
direct
.
h
>
#
else
#
include
<
unistd
.
h
>
#
endif
#
include
"
nspr
.
h
"
static
inline
std
:
:
vector
<
uint8_t
>
hex_string_to_bytes
(
std
:
:
string
s
)
{
std
:
:
vector
<
uint8_t
>
bytes
;
for
(
size_t
i
=
0
;
i
<
s
.
length
(
)
;
i
+
=
2
)
{
bytes
.
push_back
(
std
:
:
stoul
(
s
.
substr
(
i
2
)
nullptr
16
)
)
;
}
return
bytes
;
}
class
ScopedUniqueDirectory
{
public
:
explicit
ScopedUniqueDirectory
(
const
std
:
:
string
&
prefix
)
{
std
:
:
string
path
;
const
char
*
workingDirectory
=
PR_GetEnvSecure
(
"
NSS_GTEST_WORKDIR
"
)
;
if
(
workingDirectory
)
{
path
.
assign
(
workingDirectory
)
;
}
path
.
append
(
prefix
)
;
for
(
int
i
=
0
;
i
<
RETRY_LIMIT
;
i
+
+
)
{
std
:
:
string
pathCopy
(
path
)
;
if
(
TryMakingDirectory
(
pathCopy
)
)
{
mPath
.
assign
(
pathCopy
)
;
break
;
}
}
assert
(
mPath
.
length
(
)
>
0
)
;
#
if
defined
(
_WIN32
)
DWORD
len
=
MultiByteToWideChar
(
CP_ACP
0
mPath
.
data
(
)
mPath
.
size
(
)
nullptr
0
)
;
std
:
:
vector
<
wchar_t
>
buf
(
len
L
'
\
0
'
)
;
MultiByteToWideChar
(
CP_ACP
0
mPath
.
data
(
)
mPath
.
size
(
)
buf
.
data
(
)
buf
.
size
(
)
)
;
std
:
:
wstring_convert
<
std
:
:
codecvt_utf8_utf16
<
wchar_t
>
>
converter
;
mUTF8Path
=
converter
.
to_bytes
(
std
:
:
wstring
(
buf
.
begin
(
)
buf
.
end
(
)
)
)
;
#
else
mUTF8Path
=
mPath
;
#
endif
}
~
ScopedUniqueDirectory
(
)
{
assert
(
rmdir
(
mPath
.
c_str
(
)
)
=
=
0
)
;
}
const
std
:
:
string
&
GetPath
(
)
{
return
mPath
;
}
const
std
:
:
string
&
GetUTF8Path
(
)
{
return
mUTF8Path
;
}
private
:
static
const
int
RETRY_LIMIT
=
5
;
static
void
GenerateRandomName
(
std
:
:
string
&
prefix
)
{
std
:
:
stringstream
ss
;
ss
<
<
prefix
;
ss
<
<
std
:
:
setfill
(
'
0
'
)
<
<
std
:
:
setw
(
4
)
<
<
std
:
:
hex
<
<
rand
(
)
<
<
rand
(
)
;
ss
>
>
prefix
;
}
static
bool
TryMakingDirectory
(
std
:
:
string
&
prefix
)
{
GenerateRandomName
(
prefix
)
;
#
if
defined
(
_WIN32
)
return
_mkdir
(
prefix
.
c_str
(
)
)
=
=
0
;
#
else
return
mkdir
(
prefix
.
c_str
(
)
0777
)
=
=
0
;
#
endif
}
std
:
:
string
mPath
;
std
:
:
string
mUTF8Path
;
}
;
#
endif
