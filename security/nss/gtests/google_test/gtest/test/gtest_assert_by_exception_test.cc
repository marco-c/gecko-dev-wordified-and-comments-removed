#
include
"
gtest
/
gtest
.
h
"
#
include
<
stdlib
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
<
stdexcept
>
class
ThrowListener
:
public
testing
:
:
EmptyTestEventListener
{
void
OnTestPartResult
(
const
testing
:
:
TestPartResult
&
result
)
override
{
if
(
result
.
type
(
)
=
=
testing
:
:
TestPartResult
:
:
kFatalFailure
)
{
throw
testing
:
:
AssertionException
(
result
)
;
}
}
}
;
void
Fail
(
const
char
*
msg
)
{
printf
(
"
FAILURE
:
%
s
\
n
"
msg
)
;
fflush
(
stdout
)
;
exit
(
1
)
;
}
static
void
AssertFalse
(
)
{
ASSERT_EQ
(
2
3
)
<
<
"
Expected
failure
"
;
}
TEST
(
Test
Test
)
{
try
{
EXPECT_EQ
(
3
3
)
;
}
catch
(
.
.
.
)
{
Fail
(
"
A
successful
assertion
wrongfully
threw
.
"
)
;
}
try
{
EXPECT_EQ
(
3
4
)
;
}
catch
(
.
.
.
)
{
Fail
(
"
A
failed
non
-
fatal
assertion
wrongfully
threw
.
"
)
;
}
try
{
AssertFalse
(
)
;
}
catch
(
const
testing
:
:
AssertionException
&
e
)
{
if
(
strstr
(
e
.
what
(
)
"
Expected
failure
"
)
!
=
nullptr
)
throw
;
printf
(
"
%
s
"
"
A
failed
assertion
did
throw
an
exception
of
the
right
type
"
"
but
the
message
is
incorrect
.
Instead
of
containing
\
"
Expected
"
"
failure
\
"
it
is
:
\
n
"
)
;
Fail
(
e
.
what
(
)
)
;
}
catch
(
.
.
.
)
{
Fail
(
"
A
failed
assertion
threw
the
wrong
type
of
exception
.
"
)
;
}
Fail
(
"
A
failed
assertion
should
'
ve
thrown
but
didn
'
t
.
"
)
;
}
int
kTestForContinuingTest
=
0
;
TEST
(
Test
Test2
)
{
kTestForContinuingTest
=
1
;
}
int
main
(
int
argc
char
*
*
argv
)
{
testing
:
:
InitGoogleTest
(
&
argc
argv
)
;
testing
:
:
UnitTest
:
:
GetInstance
(
)
-
>
listeners
(
)
.
Append
(
new
ThrowListener
)
;
int
result
=
RUN_ALL_TESTS
(
)
;
if
(
result
=
=
0
)
{
printf
(
"
RUN_ALL_TESTS
returned
%
d
\
n
"
result
)
;
Fail
(
"
Expected
failure
instead
.
"
)
;
}
if
(
kTestForContinuingTest
=
=
0
)
{
Fail
(
"
Should
have
continued
with
other
tests
but
did
not
.
"
)
;
}
return
0
;
}
