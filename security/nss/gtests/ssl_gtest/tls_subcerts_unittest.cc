#
include
<
ctime
>
#
include
"
secerr
.
h
"
#
include
"
ssl
.
h
"
#
include
"
gtest_utils
.
h
"
#
include
"
tls_agent
.
h
"
#
include
"
tls_connect
.
h
"
namespace
nss_test
{
const
std
:
:
string
kDelegatorId
=
TlsAgent
:
:
kDelegatorEcdsa256
;
const
std
:
:
string
kDCId
=
TlsAgent
:
:
kServerEcdsa256
;
const
SSLSignatureScheme
kDCScheme
=
ssl_sig_ecdsa_secp256r1_sha256
;
const
PRUint32
kDCValidFor
=
60
*
60
*
24
*
7
;
TEST_P
(
TlsConnectTls13
DCNotConfigured
)
{
ScopedSECKEYPublicKey
pub
;
ScopedSECKEYPrivateKey
priv
;
EXPECT_TRUE
(
TlsAgent
:
:
LoadKeyPairFromCert
(
kDCId
&
pub
&
priv
)
)
;
StackSECItem
dc
;
TlsAgent
:
:
DelegateCredential
(
kDelegatorId
pub
kDCScheme
kDCValidFor
now
(
)
&
dc
)
;
EnsureTlsSetup
(
)
;
SSLExtraServerCertData
extra_data_missing_dc_priv_key
=
{
ssl_auth_null
nullptr
nullptr
nullptr
&
dc
nullptr
}
;
EXPECT_FALSE
(
server_
-
>
ConfigServerCert
(
kDelegatorId
true
&
extra_data_missing_dc_priv_key
)
)
;
EnsureTlsSetup
(
)
;
SSLExtraServerCertData
extra_data_missing_dc
=
{
ssl_auth_null
nullptr
nullptr
nullptr
nullptr
priv
.
get
(
)
}
;
EXPECT_FALSE
(
server_
-
>
ConfigServerCert
(
kDelegatorId
true
&
extra_data_missing_dc
)
)
;
}
TEST_P
(
TlsConnectTls13
DCConnectEcdsaP256
)
{
Reset
(
kDelegatorId
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
server_
-
>
AddDelegatedCredential
(
kDCId
kDCScheme
kDCValidFor
now
(
)
)
;
auto
cfilter
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_delegated_credentials_xtn
)
;
Connect
(
)
;
EXPECT_TRUE
(
cfilter
-
>
captured
(
)
)
;
client_
-
>
CheckPeerDelegCred
(
true
)
;
}
TEST_P
(
TlsConnectTls13
DCConnectEcdsaP521
)
{
Reset
(
kDelegatorId
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
server_
-
>
AddDelegatedCredential
(
TlsAgent
:
:
kServerEcdsa521
ssl_sig_ecdsa_secp521r1_sha512
kDCValidFor
now
(
)
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
auto
cfilter
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_delegated_credentials_xtn
)
;
Connect
(
)
;
EXPECT_TRUE
(
cfilter
-
>
captured
(
)
)
;
client_
-
>
CheckPeerDelegCred
(
true
)
;
}
TEST_P
(
TlsConnectTls13
DCConnectRsaPss
)
{
Reset
(
kDelegatorId
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
server_
-
>
AddDelegatedCredential
(
TlsAgent
:
:
kServerRsaPss
ssl_sig_rsa_pss_rsae_sha256
kDCValidFor
now
(
)
)
;
auto
cfilter
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_delegated_credentials_xtn
)
;
Connect
(
)
;
EXPECT_TRUE
(
cfilter
-
>
captured
(
)
)
;
client_
-
>
CheckPeerDelegCred
(
true
)
;
}
TEST_P
(
TlsConnectTls13
DCAbortBadExpectedCertVerifyAlg
)
{
Reset
(
kDelegatorId
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
server_
-
>
AddDelegatedCredential
(
TlsAgent
:
:
kServerEcdsa256
ssl_sig_ecdsa_secp521r1_sha512
kDCValidFor
now
(
)
)
;
ConnectExpectAlert
(
client_
kTlsAlertIllegalParameter
)
;
}
TEST_P
(
TlsConnectTls13
DCABortBadSignature
)
{
Reset
(
kDelegatorId
)
;
EnsureTlsSetup
(
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
ScopedSECKEYPublicKey
pub
;
ScopedSECKEYPrivateKey
priv
;
EXPECT_TRUE
(
TlsAgent
:
:
LoadKeyPairFromCert
(
kDCId
&
pub
&
priv
)
)
;
StackSECItem
dc
;
TlsAgent
:
:
DelegateCredential
(
kDelegatorId
pub
kDCScheme
kDCValidFor
now
(
)
&
dc
)
;
dc
.
data
[
0
]
^
=
0x01
;
SSLExtraServerCertData
extra_data
=
{
ssl_auth_null
nullptr
nullptr
nullptr
&
dc
priv
.
get
(
)
}
;
EXPECT_TRUE
(
server_
-
>
ConfigServerCert
(
kDelegatorId
true
&
extra_data
)
)
;
ConnectExpectAlert
(
client_
kTlsAlertIllegalParameter
)
;
}
TEST_P
(
TlsConnectTls13
DCAbortExpired
)
{
Reset
(
kDelegatorId
)
;
server_
-
>
AddDelegatedCredential
(
kDCId
kDCScheme
kDCValidFor
now
(
)
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
AdvanceTime
(
(
static_cast
<
PRTime
>
(
kDCValidFor
)
+
1
)
*
PR_USEC_PER_SEC
)
;
ConnectExpectAlert
(
client_
kTlsAlertIllegalParameter
)
;
}
TEST_P
(
TlsConnectTls13
DCAbortBadKeyUsage
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
server_
-
>
AddDelegatedCredential
(
kDCId
kDCScheme
kDCValidFor
now
(
)
)
;
ConnectExpectAlert
(
client_
kTlsAlertIllegalParameter
)
;
}
TEST_P
(
TlsConnectTls13
DCConnectNoClientSupport
)
{
Reset
(
kDelegatorId
)
;
server_
-
>
AddDelegatedCredential
(
kDCId
kDCScheme
kDCValidFor
now
(
)
)
;
auto
cfilter
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_delegated_credentials_xtn
)
;
Connect
(
)
;
EXPECT_FALSE
(
cfilter
-
>
captured
(
)
)
;
client_
-
>
CheckPeerDelegCred
(
false
)
;
}
TEST_P
(
TlsConnectTls13
DCConnectNoServerSupport
)
{
Reset
(
kDelegatorId
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
auto
cfilter
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_delegated_credentials_xtn
)
;
Connect
(
)
;
EXPECT_TRUE
(
cfilter
-
>
captured
(
)
)
;
client_
-
>
CheckPeerDelegCred
(
false
)
;
}
TEST_P
(
TlsConnectTls13
DCConnectClientNoTls13
)
{
Reset
(
kDelegatorId
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
server_
-
>
AddDelegatedCredential
(
kDCId
kDCScheme
kDCValidFor
now
(
)
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_2
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_3
)
;
auto
cfilter
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_delegated_credentials_xtn
)
;
Connect
(
)
;
EXPECT_FALSE
(
cfilter
-
>
captured
(
)
)
;
client_
-
>
CheckPeerDelegCred
(
false
)
;
}
TEST_P
(
TlsConnectTls13
DCConnectServerNoTls13
)
{
Reset
(
kDelegatorId
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
server_
-
>
AddDelegatedCredential
(
kDCId
kDCScheme
kDCValidFor
now
(
)
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_2
)
;
auto
cfilter
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_delegated_credentials_xtn
)
;
Connect
(
)
;
EXPECT_TRUE
(
cfilter
-
>
captured
(
)
)
;
client_
-
>
CheckPeerDelegCred
(
false
)
;
}
TEST_P
(
TlsConnectTls13
DCConnectExpectedCertVerifyAlgNotSupported
)
{
Reset
(
kDelegatorId
)
;
client_
-
>
EnableDelegatedCredentials
(
)
;
static
const
SSLSignatureScheme
kClientSchemes
[
]
=
{
ssl_sig_ecdsa_secp256r1_sha256
}
;
client_
-
>
SetSignatureSchemes
(
kClientSchemes
PR_ARRAY_SIZE
(
kClientSchemes
)
)
;
server_
-
>
AddDelegatedCredential
(
TlsAgent
:
:
kServerEcdsa521
ssl_sig_ecdsa_secp521r1_sha512
kDCValidFor
now
(
)
)
;
auto
cfilter
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_delegated_credentials_xtn
)
;
Connect
(
)
;
EXPECT_TRUE
(
cfilter
-
>
captured
(
)
)
;
client_
-
>
CheckPeerDelegCred
(
false
)
;
}
}
