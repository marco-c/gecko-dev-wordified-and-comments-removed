#
include
"
sslerr
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
class
TlsHandshakeSkipFilter
:
public
TlsRecordFilter
{
public
:
TlsHandshakeSkipFilter
(
uint8_t
handshake_type
)
:
handshake_type_
(
handshake_type
)
skipped_
(
false
)
{
}
protected
:
virtual
PacketFilter
:
:
Action
FilterRecord
(
const
TlsRecordHeader
&
record_header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
if
(
record_header
.
content_type
(
)
!
=
kTlsHandshakeType
)
{
return
KEEP
;
}
size_t
output_offset
=
0U
;
output
-
>
Allocate
(
input
.
len
(
)
)
;
TlsParser
parser
(
input
)
;
while
(
parser
.
remaining
(
)
)
{
size_t
start
=
parser
.
consumed
(
)
;
TlsHandshakeFilter
:
:
HandshakeHeader
header
;
DataBuffer
ignored
;
if
(
!
header
.
Parse
(
&
parser
record_header
&
ignored
)
)
{
return
KEEP
;
}
if
(
skipped_
|
|
header
.
handshake_type
(
)
!
=
handshake_type_
)
{
size_t
entire_length
=
parser
.
consumed
(
)
-
start
;
output
-
>
Write
(
output_offset
input
.
data
(
)
+
start
entire_length
)
;
if
(
skipped_
&
&
header
.
is_dtls
(
)
)
{
output
-
>
data
(
)
[
start
+
5
]
-
=
1
;
}
output_offset
+
=
entire_length
;
}
else
{
std
:
:
cerr
<
<
"
Dropping
handshake
:
"
<
<
static_cast
<
unsigned
>
(
handshake_type_
)
<
<
std
:
:
endl
;
skipped_
=
true
;
}
}
output
-
>
Truncate
(
output_offset
)
;
return
skipped_
?
CHANGE
:
KEEP
;
}
private
:
uint8_t
handshake_type_
;
bool
skipped_
;
}
;
class
TlsSkipTest
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
tuple
<
std
:
:
string
uint16_t
>
>
{
protected
:
TlsSkipTest
(
)
:
TlsConnectTestBase
(
std
:
:
get
<
0
>
(
GetParam
(
)
)
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
{
}
void
ServerSkipTest
(
PacketFilter
*
filter
uint8_t
alert
=
kTlsAlertUnexpectedMessage
)
{
auto
alert_recorder
=
new
TlsAlertRecorder
(
)
;
client_
-
>
SetPacketFilter
(
alert_recorder
)
;
if
(
filter
)
{
server_
-
>
SetPacketFilter
(
filter
)
;
}
ConnectExpectFail
(
)
;
EXPECT_EQ
(
kTlsAlertFatal
alert_recorder
-
>
level
(
)
)
;
EXPECT_EQ
(
alert
alert_recorder
-
>
description
(
)
)
;
}
}
;
class
Tls13SkipTest
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
string
>
{
protected
:
Tls13SkipTest
(
)
:
TlsConnectTestBase
(
GetParam
(
)
SSL_LIBRARY_VERSION_TLS_1_3
)
{
}
void
ServerSkipTest
(
TlsRecordFilter
*
filter
int32_t
error
)
{
EnsureTlsSetup
(
)
;
server_
-
>
SetPacketFilter
(
filter
)
;
filter
-
>
EnableDecryption
(
)
;
if
(
mode_
=
=
STREAM
)
{
ConnectExpectFail
(
)
;
}
else
{
ConnectExpectFailOneSide
(
TlsAgent
:
:
CLIENT
)
;
}
client_
-
>
CheckErrorCode
(
error
)
;
if
(
mode_
=
=
STREAM
)
{
server_
-
>
CheckErrorCode
(
SSL_ERROR_BAD_MAC_READ
)
;
}
else
{
ASSERT_EQ
(
TlsAgent
:
:
STATE_CONNECTING
server_
-
>
state
(
)
)
;
}
}
void
ClientSkipTest
(
TlsRecordFilter
*
filter
int32_t
error
)
{
EnsureTlsSetup
(
)
;
client_
-
>
SetPacketFilter
(
filter
)
;
filter
-
>
EnableDecryption
(
)
;
ConnectExpectFailOneSide
(
TlsAgent
:
:
SERVER
)
;
server_
-
>
CheckErrorCode
(
error
)
;
ASSERT_EQ
(
TlsAgent
:
:
STATE_CONNECTED
client_
-
>
state
(
)
)
;
}
}
;
TEST_P
(
TlsSkipTest
SkipCertificateRsa
)
{
EnableOnlyStaticRsaCiphers
(
)
;
ServerSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeCertificate
)
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_HELLO_DONE
)
;
}
TEST_P
(
TlsSkipTest
SkipCertificateDhe
)
{
ServerSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeCertificate
)
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_SERVER_KEY_EXCH
)
;
}
TEST_P
(
TlsSkipTest
SkipCertificateEcdhe
)
{
ServerSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeCertificate
)
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_SERVER_KEY_EXCH
)
;
}
TEST_P
(
TlsSkipTest
SkipCertificateEcdsa
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
ServerSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeCertificate
)
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_SERVER_KEY_EXCH
)
;
}
TEST_P
(
TlsSkipTest
SkipServerKeyExchange
)
{
ServerSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeServerKeyExchange
)
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_HELLO_DONE
)
;
}
TEST_P
(
TlsSkipTest
SkipServerKeyExchangeEcdsa
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
ServerSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeServerKeyExchange
)
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_HELLO_DONE
)
;
}
TEST_P
(
TlsSkipTest
SkipCertAndKeyExch
)
{
auto
chain
=
new
ChainedPacketFilter
(
)
;
chain
-
>
Add
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeCertificate
)
)
;
chain
-
>
Add
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeServerKeyExchange
)
)
;
ServerSkipTest
(
chain
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_HELLO_DONE
)
;
}
TEST_P
(
TlsSkipTest
SkipCertAndKeyExchEcdsa
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
auto
chain
=
new
ChainedPacketFilter
(
)
;
chain
-
>
Add
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeCertificate
)
)
;
chain
-
>
Add
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeServerKeyExchange
)
)
;
ServerSkipTest
(
chain
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_HELLO_DONE
)
;
}
TEST_P
(
Tls13SkipTest
SkipEncryptedExtensions
)
{
ServerSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeEncryptedExtensions
)
SSL_ERROR_RX_UNEXPECTED_CERTIFICATE
)
;
}
TEST_P
(
Tls13SkipTest
SkipServerCertificate
)
{
ServerSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeCertificate
)
SSL_ERROR_RX_UNEXPECTED_CERT_VERIFY
)
;
}
TEST_P
(
Tls13SkipTest
SkipServerCertificateVerify
)
{
ServerSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeCertificateVerify
)
SSL_ERROR_RX_UNEXPECTED_FINISHED
)
;
}
TEST_P
(
Tls13SkipTest
SkipClientCertificate
)
{
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
ClientSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeCertificate
)
SSL_ERROR_RX_UNEXPECTED_CERT_VERIFY
)
;
}
TEST_P
(
Tls13SkipTest
SkipClientCertificateVerify
)
{
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
ClientSkipTest
(
new
TlsHandshakeSkipFilter
(
kTlsHandshakeCertificateVerify
)
SSL_ERROR_RX_UNEXPECTED_FINISHED
)
;
}
INSTANTIATE_TEST_CASE_P
(
SkipTls10
TlsSkipTest
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesStream
TlsConnectTestBase
:
:
kTlsV10
)
)
;
INSTANTIATE_TEST_CASE_P
(
SkipVariants
TlsSkipTest
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsModesAll
TlsConnectTestBase
:
:
kTlsV11V12
)
)
;
INSTANTIATE_TEST_CASE_P
(
Skip13Variants
Tls13SkipTest
TlsConnectTestBase
:
:
kTlsModesAll
)
;
}
