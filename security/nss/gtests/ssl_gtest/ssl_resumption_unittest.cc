#
include
<
functional
>
#
include
<
memory
>
#
include
"
secerr
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslexp
.
h
"
#
include
"
sslproto
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
scoped_ptrs
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
#
include
"
tls_protect
.
h
"
namespace
nss_test
{
class
TlsServerKeyExchangeEcdhe
{
public
:
bool
Parse
(
const
DataBuffer
&
buffer
)
{
TlsParser
parser
(
buffer
)
;
uint8_t
curve_type
;
if
(
!
parser
.
Read
(
&
curve_type
)
)
{
return
false
;
}
if
(
curve_type
!
=
3
)
{
return
false
;
}
uint32_t
named_curve
;
if
(
!
parser
.
Read
(
&
named_curve
2
)
)
{
return
false
;
}
return
parser
.
ReadVariable
(
&
public_key_
1
)
;
}
DataBuffer
public_key_
;
}
;
TEST_P
(
TlsConnectGenericPre13
ConnectResumed
)
{
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_SESSIONID
)
;
Connect
(
)
;
Reset
(
)
;
ExpectResumption
(
RESUME_SESSIONID
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectClientCacheDisabled
)
{
ConfigureSessionCache
(
RESUME_NONE
RESUME_SESSIONID
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectServerCacheDisabled
)
{
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectSessionCacheDisabled
)
{
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectResumeSupportBoth
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectResumeClientTicketServerBoth
)
{
ConfigureSessionCache
(
RESUME_TICKET
RESUME_BOTH
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_TICKET
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectResumeClientBothTicketServerTicket
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectResumeClientServerTicketOnly
)
{
ConfigureSessionCache
(
RESUME_TICKET
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_TICKET
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectResumeClientBothServerNone
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_NONE
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectResumeClientNoneServerBoth
)
{
ConfigureSessionCache
(
RESUME_NONE
RESUME_BOTH
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericPre13
ResumeWithHigherVersionTls13
)
{
uint16_t
lower_version
=
version_
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
EnsureTlsSetup
(
)
;
auto
psk_ext
=
std
:
:
make_shared
<
TlsExtensionCapture
>
(
client_
ssl_tls13_pre_shared_key_xtn
)
;
auto
ticket_ext
=
std
:
:
make_shared
<
TlsExtensionCapture
>
(
client_
ssl_session_ticket_xtn
)
;
client_
-
>
SetFilter
(
std
:
:
make_shared
<
ChainedPacketFilter
>
(
ChainedPacketFilterInit
(
{
psk_ext
ticket_ext
}
)
)
)
;
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
client_
-
>
SetVersionRange
(
lower_version
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
lower_version
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
EXPECT_FALSE
(
psk_ext
-
>
captured
(
)
)
;
EXPECT_TRUE
(
ticket_ext
-
>
captured
(
)
)
;
}
class
CaptureSessionId
:
public
TlsHandshakeFilter
{
public
:
CaptureSessionId
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
a
)
:
TlsHandshakeFilter
(
a
{
kTlsHandshakeClientHello
kTlsHandshakeServerHello
}
)
sid_
(
)
{
}
const
DataBuffer
&
sid
(
)
const
{
return
sid_
;
}
protected
:
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
override
{
size_t
offset
=
2
+
32
;
uint32_t
len
=
0
;
EXPECT_TRUE
(
input
.
Read
(
offset
1
&
len
)
)
;
offset
+
+
;
if
(
input
.
len
(
)
<
offset
+
len
)
{
ADD_FAILURE
(
)
<
<
"
session_id
overflows
the
Hello
message
"
;
return
KEEP
;
}
sid_
.
Assign
(
input
.
data
(
)
+
offset
len
)
;
return
KEEP
;
}
private
:
DataBuffer
sid_
;
}
;
TEST_P
(
TlsConnectGenericPre13
ResumeWithHigherVersionTls13SessionId
)
{
uint16_t
lower_version
=
version_
;
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_SESSIONID
)
;
auto
original_sid
=
MakeTlsFilter
<
CaptureSessionId
>
(
server_
)
;
Connect
(
)
;
CheckKeys
(
)
;
EXPECT_EQ
(
32U
original_sid
-
>
sid
(
)
.
len
(
)
)
;
Reset
(
)
;
auto
client_sid
=
MakeTlsFilter
<
CaptureSessionId
>
(
client_
)
;
auto
server_sid
=
MakeTlsFilter
<
CaptureSessionId
>
(
server_
)
;
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_SESSIONID
)
;
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
client_
-
>
SetVersionRange
(
lower_version
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
lower_version
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
EXPECT_EQ
(
client_sid
-
>
sid
(
)
original_sid
-
>
sid
(
)
)
;
if
(
variant_
=
=
ssl_variant_stream
)
{
EXPECT_EQ
(
client_sid
-
>
sid
(
)
server_sid
-
>
sid
(
)
)
;
}
else
{
EXPECT_EQ
(
0U
server_sid
-
>
sid
(
)
.
len
(
)
)
;
}
}
TEST_P
(
TlsConnectPre12
ResumeWithHigherVersionTls12
)
{
uint16_t
lower_version
=
version_
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
Connect
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
EnsureTlsSetup
(
)
;
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
client_
-
>
SetVersionRange
(
lower_version
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
lower_version
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGenericPre13
ResumeWithLowerVersionFromTls13
)
{
uint16_t
original_version
=
version_
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ConfigureVersion
(
original_version
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectPre12
ResumeWithLowerVersionFromTls12
)
{
uint16_t
original_version
=
version_
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_2
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ConfigureVersion
(
original_version
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeClientBothTicketServerTicketForget
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ClearServerCache
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectWithExpiredTicketAtClient
)
{
SSLInt_SetTicketLifetime
(
1
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
WAIT_
(
false
1000
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
SSLExtensionType
xtn
=
(
version_
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
?
ssl_tls13_pre_shared_key_xtn
:
ssl_session_ticket_xtn
;
auto
capture
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
xtn
)
;
Connect
(
)
;
if
(
version_
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
EXPECT_FALSE
(
capture
-
>
captured
(
)
)
;
}
else
{
EXPECT_TRUE
(
capture
-
>
captured
(
)
)
;
EXPECT_EQ
(
0U
capture
-
>
extension
(
)
.
len
(
)
)
;
}
}
TEST_P
(
TlsConnectGeneric
ConnectWithExpiredTicketAtServer
)
{
SSLInt_SetTicketLifetime
(
1
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
SSLExtensionType
xtn
=
(
version_
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
?
ssl_tls13_pre_shared_key_xtn
:
ssl_session_ticket_xtn
;
auto
capture
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
xtn
)
;
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
EXPECT_TRUE
(
capture
-
>
captured
(
)
)
;
EXPECT_LT
(
0U
capture
-
>
extension
(
)
.
len
(
)
)
;
WAIT_
(
false
1000
)
;
Handshake
(
)
;
CheckConnected
(
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectResumeCorruptTicket
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
static
const
uint8_t
kHmacKey1Buf
[
32
]
=
{
0
}
;
static
const
DataBuffer
kHmacKey1
(
kHmacKey1Buf
sizeof
(
kHmacKey1Buf
)
)
;
SECItem
key_item
=
{
siBuffer
const_cast
<
uint8_t
*
>
(
kHmacKey1Buf
)
sizeof
(
kHmacKey1Buf
)
}
;
ScopedPK11SlotInfo
slot
(
PK11_GetInternalSlot
(
)
)
;
PK11SymKey
*
hmac_key
=
PK11_ImportSymKey
(
slot
.
get
(
)
CKM_SHA256_HMAC
PK11_OriginUnwrap
CKA_SIGN
&
key_item
nullptr
)
;
ASSERT_NE
(
nullptr
hmac_key
)
;
SSLInt_SetSelfEncryptMacKey
(
hmac_key
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
if
(
version_
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
ExpectResumption
(
RESUME_NONE
)
;
Connect
(
)
;
}
else
{
ConnectExpectAlert
(
server_
illegal_parameter
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_CLIENT_HELLO
)
;
}
}
static
int32_t
SwitchCertificates
(
TlsAgent
*
agent
const
SECItem
*
srvNameArr
uint32_t
srvNameArrSize
)
{
bool
ok
=
agent
-
>
ConfigServerCert
(
"
client
"
)
;
if
(
!
ok
)
return
SSL_SNI_SEND_ALERT
;
return
0
;
}
;
TEST_P
(
TlsConnectGeneric
ServerSNICertSwitch
)
{
Connect
(
)
;
ScopedCERTCertificate
cert1
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
server_
-
>
SetSniCallback
(
SwitchCertificates
)
;
Connect
(
)
;
ScopedCERTCertificate
cert2
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
CheckKeys
(
)
;
EXPECT_FALSE
(
SECITEM_ItemsAreEqual
(
&
cert1
-
>
derCert
&
cert2
-
>
derCert
)
)
;
}
TEST_P
(
TlsConnectGeneric
ServerSNICertTypeSwitch
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
Connect
(
)
;
ScopedCERTCertificate
cert1
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
server_
-
>
SetSniCallback
(
SwitchCertificates
)
;
Connect
(
)
;
ScopedCERTCertificate
cert2
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_ecdsa
)
;
EXPECT_TRUE
(
SECITEM_ItemsAreEqual
(
&
cert1
-
>
derCert
&
cert2
-
>
derCert
)
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectEcdheTwiceReuseKey
)
{
auto
filter
=
MakeTlsFilter
<
TlsHandshakeRecorder
>
(
server_
kTlsHandshakeServerKeyExchange
)
;
Connect
(
)
;
CheckKeys
(
)
;
TlsServerKeyExchangeEcdhe
dhe1
;
EXPECT_TRUE
(
dhe1
.
Parse
(
filter
-
>
buffer
(
)
)
)
;
Reset
(
)
;
auto
filter2
=
MakeTlsFilter
<
TlsHandshakeRecorder
>
(
server_
kTlsHandshakeServerKeyExchange
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
Connect
(
)
;
CheckKeys
(
)
;
TlsServerKeyExchangeEcdhe
dhe2
;
EXPECT_TRUE
(
dhe2
.
Parse
(
filter2
-
>
buffer
(
)
)
)
;
EXPECT_EQ
(
dhe1
.
public_key_
.
len
(
)
dhe2
.
public_key_
.
len
(
)
)
;
EXPECT_TRUE
(
!
memcmp
(
dhe1
.
public_key_
.
data
(
)
dhe2
.
public_key_
.
data
(
)
dhe1
.
public_key_
.
len
(
)
)
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectEcdheTwiceNewKey
)
{
server_
-
>
SetOption
(
SSL_REUSE_SERVER_ECDHE_KEY
PR_FALSE
)
;
auto
filter
=
MakeTlsFilter
<
TlsHandshakeRecorder
>
(
server_
kTlsHandshakeServerKeyExchange
)
;
Connect
(
)
;
CheckKeys
(
)
;
TlsServerKeyExchangeEcdhe
dhe1
;
EXPECT_TRUE
(
dhe1
.
Parse
(
filter
-
>
buffer
(
)
)
)
;
Reset
(
)
;
server_
-
>
SetOption
(
SSL_REUSE_SERVER_ECDHE_KEY
PR_FALSE
)
;
auto
filter2
=
MakeTlsFilter
<
TlsHandshakeRecorder
>
(
server_
kTlsHandshakeServerKeyExchange
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
Connect
(
)
;
CheckKeys
(
)
;
TlsServerKeyExchangeEcdhe
dhe2
;
EXPECT_TRUE
(
dhe2
.
Parse
(
filter2
-
>
buffer
(
)
)
)
;
EXPECT_FALSE
(
(
dhe1
.
public_key_
.
len
(
)
=
=
dhe2
.
public_key_
.
len
(
)
)
&
&
(
!
memcmp
(
dhe1
.
public_key_
.
data
(
)
dhe2
.
public_key_
.
data
(
)
dhe1
.
public_key_
.
len
(
)
)
)
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ResumeDifferentGroup
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_TICKET
)
;
client_
-
>
ConfigNamedGroups
(
kFFDHEGroups
)
;
server_
-
>
ConfigNamedGroups
(
kFFDHEGroups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_dh
ssl_grp_ffdhe_2048
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ResumeNoCertificateRequest
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
Connect
(
)
;
SendReceive
(
)
;
ScopedCERTCertificate
cert1
(
SSL_LocalCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_TICKET
)
;
server_
-
>
RequestClientAuth
(
false
)
;
auto
cr_capture
=
MakeTlsFilter
<
TlsHandshakeRecorder
>
(
server_
ssl_hs_certificate_request
)
;
cr_capture
-
>
EnableDecryption
(
)
;
Connect
(
)
;
SendReceive
(
)
;
EXPECT_EQ
(
0U
cr_capture
-
>
buffer
(
)
.
len
(
)
)
<
<
"
expect
nothing
captured
yet
"
;
ScopedCERTCertificate
cert2
(
SSL_PeerCertificate
(
server_
-
>
ssl_fd
(
)
)
)
;
EXPECT_TRUE
(
SECITEM_ItemsAreEqual
(
&
cert1
-
>
derCert
&
cert2
-
>
derCert
)
)
;
}
static
uint16_t
ChooseOneCipher
(
uint16_t
version
)
{
if
(
version
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
return
TLS_AES_128_GCM_SHA256
;
}
return
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
;
}
static
uint16_t
ChooseAnotherCipher
(
uint16_t
version
)
{
if
(
version
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
return
TLS_AES_256_GCM_SHA384
;
}
return
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
;
}
TEST_P
(
TlsConnectGenericResumption
TestResumeClientDifferentCipher
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
client_
-
>
EnableSingleCipher
(
ChooseOneCipher
(
version_
)
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
client_
-
>
EnableSingleCipher
(
ChooseAnotherCipher
(
version_
)
)
;
uint16_t
ticket_extension
;
if
(
version_
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
ticket_extension
=
ssl_tls13_pre_shared_key_xtn
;
}
else
{
ticket_extension
=
ssl_session_ticket_xtn
;
}
auto
ticket_capture
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ticket_extension
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
EXPECT_EQ
(
0U
ticket_capture
-
>
extension
(
)
.
len
(
)
)
;
}
TEST_P
(
TlsConnectGenericResumption
TestResumeServerDifferentCipher
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
server_
-
>
EnableSingleCipher
(
ChooseOneCipher
(
version_
)
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
server_
-
>
EnableSingleCipher
(
ChooseAnotherCipher
(
version_
)
)
;
Connect
(
)
;
CheckKeys
(
)
;
}
TEST_P
(
TlsConnectStream
TestResumptionOverrideCipher
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
server_
-
>
EnableSingleCipher
(
ChooseOneCipher
(
version_
)
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
MakeTlsFilter
<
SelectedCipherSuiteReplacer
>
(
server_
ChooseAnotherCipher
(
version_
)
)
;
if
(
version_
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
client_
-
>
ExpectSendAlert
(
kTlsAlertIllegalParameter
)
;
server_
-
>
ExpectSendAlert
(
kTlsAlertBadRecordMac
)
;
}
else
{
ExpectAlert
(
client_
kTlsAlertHandshakeFailure
)
;
}
ConnectExpectFail
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_SERVER_HELLO
)
;
if
(
version_
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
server_
-
>
CheckErrorCode
(
SSL_ERROR_BAD_MAC_READ
)
;
}
else
{
server_
-
>
CheckErrorCode
(
SSL_ERROR_HANDSHAKE_FAILURE_ALERT
)
;
}
}
class
SelectedVersionReplacer
:
public
TlsHandshakeFilter
{
public
:
SelectedVersionReplacer
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
a
uint16_t
version
)
:
TlsHandshakeFilter
(
a
{
kTlsHandshakeServerHello
}
)
version_
(
version
)
{
}
protected
:
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
override
{
*
output
=
input
;
output
-
>
Write
(
0
static_cast
<
uint32_t
>
(
version_
)
2
)
;
return
CHANGE
;
}
private
:
uint16_t
version_
;
}
;
TEST_P
(
TlsConnectGenericPre13
TestResumptionOverrideVersion
)
{
uint16_t
override_version
=
0
;
if
(
variant_
=
=
ssl_variant_stream
)
{
switch
(
version_
)
{
case
SSL_LIBRARY_VERSION_TLS_1_0
:
return
;
case
SSL_LIBRARY_VERSION_TLS_1_1
:
override_version
=
SSL_LIBRARY_VERSION_TLS_1_0
;
break
;
case
SSL_LIBRARY_VERSION_TLS_1_2
:
override_version
=
SSL_LIBRARY_VERSION_TLS_1_1
;
break
;
default
:
ASSERT_TRUE
(
false
)
<
<
"
unknown
version
"
;
}
}
else
{
if
(
version_
=
=
SSL_LIBRARY_VERSION_TLS_1_2
)
{
override_version
=
SSL_LIBRARY_VERSION_DTLS_1_0_WIRE
;
}
else
{
ASSERT_EQ
(
SSL_LIBRARY_VERSION_TLS_1_1
version_
)
;
return
;
}
}
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
server_
-
>
EnableSingleCipher
(
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
client_
-
>
SetVersionRange
(
version_
-
1
version_
)
;
server_
-
>
EnableSingleCipher
(
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
)
;
MakeTlsFilter
<
SelectedVersionReplacer
>
(
server_
override_version
)
;
ConnectExpectAlert
(
client_
kTlsAlertHandshakeFailure
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_SERVER_HELLO
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_HANDSHAKE_FAILURE_ALERT
)
;
}
TEST_F
(
TlsConnectTest
TestTls13ResumptionTwice
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
uint16_t
original_suite
;
EXPECT_TRUE
(
client_
-
>
cipher_suite
(
&
original_suite
)
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ExpectResumption
(
RESUME_TICKET
)
;
auto
c1
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_tls13_pre_shared_key_xtn
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
DataBuffer
initialTicket
(
c1
-
>
extension
(
)
)
;
ASSERT_LT
(
0U
initialTicket
.
len
(
)
)
;
ScopedCERTCertificate
cert1
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
ASSERT_TRUE
(
!
!
cert1
.
get
(
)
)
;
Reset
(
)
;
ClearStats
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
auto
c2
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_tls13_pre_shared_key_xtn
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
ASSERT_LT
(
0U
c2
-
>
extension
(
)
.
len
(
)
)
;
ScopedCERTCertificate
cert2
(
SSL_PeerCertificate
(
client_
-
>
ssl_fd
(
)
)
)
;
ASSERT_TRUE
(
!
!
cert2
.
get
(
)
)
;
uint16_t
resumed_suite
;
EXPECT_TRUE
(
server_
-
>
cipher_suite
(
&
resumed_suite
)
)
;
EXPECT_EQ
(
original_suite
resumed_suite
)
;
EXPECT_TRUE
(
client_
-
>
cipher_suite
(
&
resumed_suite
)
)
;
EXPECT_EQ
(
original_suite
resumed_suite
)
;
ASSERT_NE
(
initialTicket
c2
-
>
extension
(
)
)
;
}
TEST_F
(
TlsConnectTest
TestTls13ResumptionDuplicateNST
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
SSLInt_ClearSelfEncryptKey
(
)
;
SSL_SendSessionTicket
(
server_
-
>
ssl_fd
(
)
NULL
0
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
}
void
NstTicketMatchesPskIdentity
(
const
DataBuffer
&
nst
const
DataBuffer
&
psk
)
{
uint32_t
len
;
size_t
offset
=
4
+
4
;
ASSERT_TRUE
(
nst
.
Read
(
offset
1
&
len
)
)
;
offset
+
=
1
+
len
;
ASSERT_TRUE
(
nst
.
Read
(
offset
2
&
len
)
)
;
offset
+
=
2
;
ASSERT_LE
(
offset
+
len
nst
.
len
(
)
)
;
DataBuffer
nst_ticket
(
nst
.
data
(
)
+
offset
static_cast
<
size_t
>
(
len
)
)
;
offset
=
2
;
ASSERT_TRUE
(
psk
.
Read
(
offset
2
&
len
)
)
;
offset
+
=
2
;
ASSERT_LE
(
offset
+
len
psk
.
len
(
)
)
;
DataBuffer
psk_ticket
(
psk
.
data
(
)
+
offset
static_cast
<
size_t
>
(
len
)
)
;
EXPECT_EQ
(
nst_ticket
psk_ticket
)
;
}
TEST_F
(
TlsConnectTest
TestTls13ResumptionDuplicateNSTWithToken
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
auto
nst_capture
=
MakeTlsFilter
<
TlsHandshakeRecorder
>
(
server_
ssl_hs_new_session_ticket
)
;
nst_capture
-
>
EnableDecryption
(
)
;
Connect
(
)
;
SSLInt_ClearSelfEncryptKey
(
)
;
nst_capture
-
>
Reset
(
)
;
uint8_t
token
[
]
=
{
0x20
0x20
0xff
0x00
}
;
EXPECT_EQ
(
SECSuccess
SSL_SendSessionTicket
(
server_
-
>
ssl_fd
(
)
token
sizeof
(
token
)
)
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
EXPECT_LT
(
0U
nst_capture
-
>
buffer
(
)
.
len
(
)
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ExpectResumption
(
RESUME_TICKET
)
;
auto
psk_capture
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_tls13_pre_shared_key_xtn
)
;
Connect
(
)
;
SendReceive
(
)
;
NstTicketMatchesPskIdentity
(
nst_capture
-
>
buffer
(
)
psk_capture
-
>
extension
(
)
)
;
}
TEST_F
(
TlsConnectTest
SendSessionTicketWithTicketsDisabled
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
EXPECT_EQ
(
SECSuccess
SSL_OptionSet
(
server_
-
>
ssl_fd
(
)
SSL_ENABLE_SESSION_TICKETS
PR_FALSE
)
)
;
auto
nst_capture
=
MakeTlsFilter
<
TlsHandshakeRecorder
>
(
server_
ssl_hs_new_session_ticket
)
;
nst_capture
-
>
EnableDecryption
(
)
;
Connect
(
)
;
EXPECT_EQ
(
0U
nst_capture
-
>
buffer
(
)
.
len
(
)
)
<
<
"
expect
nothing
captured
yet
"
;
EXPECT_EQ
(
SECSuccess
SSL_SendSessionTicket
(
server_
-
>
ssl_fd
(
)
NULL
0
)
)
;
EXPECT_LT
(
0U
nst_capture
-
>
buffer
(
)
.
len
(
)
)
<
<
"
should
capture
now
"
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ExpectResumption
(
RESUME_TICKET
)
;
auto
psk_capture
=
MakeTlsFilter
<
TlsExtensionCapture
>
(
client_
ssl_tls13_pre_shared_key_xtn
)
;
Connect
(
)
;
SendReceive
(
)
;
NstTicketMatchesPskIdentity
(
nst_capture
-
>
buffer
(
)
psk_capture
-
>
extension
(
)
)
;
}
TEST_F
(
TlsConnectTest
SendSessionTicketInappropriate
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_2
)
;
EXPECT_EQ
(
SECFailure
SSL_SendSessionTicket
(
client_
-
>
ssl_fd
(
)
NULL
0
)
)
<
<
"
clients
can
'
t
send
tickets
"
;
EXPECT_EQ
(
SEC_ERROR_INVALID_ARGS
PORT_GetError
(
)
)
;
StartConnect
(
)
;
EXPECT_EQ
(
SECFailure
SSL_SendSessionTicket
(
server_
-
>
ssl_fd
(
)
NULL
0
)
)
<
<
"
no
ticket
before
the
handshake
has
started
"
;
EXPECT_EQ
(
SEC_ERROR_INVALID_ARGS
PORT_GetError
(
)
)
;
Handshake
(
)
;
EXPECT_EQ
(
SECFailure
SSL_SendSessionTicket
(
server_
-
>
ssl_fd
(
)
NULL
0
)
)
<
<
"
no
special
tickets
in
TLS
1
.
2
"
;
EXPECT_EQ
(
SEC_ERROR_INVALID_ARGS
PORT_GetError
(
)
)
;
}
TEST_F
(
TlsConnectTest
SendSessionTicketMassiveToken
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
EXPECT_EQ
(
SECFailure
SSL_SendSessionTicket
(
server_
-
>
ssl_fd
(
)
NULL
0x1ffff
)
)
<
<
"
this
is
clearly
too
big
"
;
EXPECT_EQ
(
SEC_ERROR_INVALID_ARGS
PORT_GetError
(
)
)
;
static
const
uint8_t
big_token
[
0xffff
]
=
{
1
}
;
EXPECT_EQ
(
SECFailure
SSL_SendSessionTicket
(
server_
-
>
ssl_fd
(
)
big_token
sizeof
(
big_token
)
)
)
<
<
"
this
is
too
big
but
that
'
s
not
immediately
obvious
"
;
EXPECT_EQ
(
SEC_ERROR_INVALID_ARGS
PORT_GetError
(
)
)
;
}
TEST_F
(
TlsConnectDatagram13
SendSessionTicketDtls
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
EXPECT_EQ
(
SECFailure
SSL_SendSessionTicket
(
server_
-
>
ssl_fd
(
)
NULL
0
)
)
<
<
"
no
extra
tickets
in
DTLS
until
we
have
Ack
support
"
;
EXPECT_EQ
(
SSL_ERROR_FEATURE_NOT_SUPPORTED_FOR_VERSION
PORT_GetError
(
)
)
;
}
TEST_F
(
TlsConnectTest
TestTls13ResumptionDowngrade
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_2
)
;
Connect
(
)
;
client_
-
>
SetExpectedVersion
(
SSL_LIBRARY_VERSION_TLS_1_2
)
;
client_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
StartRenegotiate
(
)
;
Handshake
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
}
TEST_F
(
TlsConnectTest
TestTls13ResumptionForcedDowngrade
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_3
)
;
std
:
:
vector
<
std
:
:
shared_ptr
<
PacketFilter
>
>
filters
;
filters
.
push_back
(
std
:
:
make_shared
<
SelectedCipherSuiteReplacer
>
(
server_
TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
)
)
;
filters
.
push_back
(
std
:
:
make_shared
<
SelectedVersionReplacer
>
(
server_
SSL_LIBRARY_VERSION_TLS_1_2
)
)
;
filters
.
push_back
(
std
:
:
make_shared
<
TlsExtensionDropper
>
(
server_
ssl_tls13_supported_versions_xtn
)
)
;
filters
.
push_back
(
std
:
:
make_shared
<
TlsExtensionDropper
>
(
server_
ssl_tls13_key_share_xtn
)
)
;
filters
.
push_back
(
std
:
:
make_shared
<
TlsExtensionDropper
>
(
server_
ssl_tls13_pre_shared_key_xtn
)
)
;
server_
-
>
SetFilter
(
std
:
:
make_shared
<
ChainedPacketFilter
>
(
filters
)
)
;
client_
-
>
ExpectSendAlert
(
kTlsAlertUnexpectedMessage
)
;
server_
-
>
ExpectSendAlert
(
kTlsAlertBadRecordMac
)
;
ConnectExpectFail
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_APPLICATION_DATA
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_BAD_MAC_READ
)
;
}
TEST_P
(
TlsConnectGenericResumption
ReConnectTicket
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
server_
-
>
EnableSingleCipher
(
ChooseOneCipher
(
version_
)
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
CheckKeysResumption
(
ssl_kea_ecdh
ssl_grp_none
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
}
TEST_P
(
TlsConnectGenericPre13
ReConnectCache
)
{
ConfigureSessionCache
(
RESUME_SESSIONID
RESUME_SESSIONID
)
;
server_
-
>
EnableSingleCipher
(
ChooseOneCipher
(
version_
)
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
Reset
(
)
;
ExpectResumption
(
RESUME_SESSIONID
)
;
Connect
(
)
;
CheckKeysResumption
(
ssl_kea_ecdh
ssl_grp_none
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
}
TEST_P
(
TlsConnectGenericResumption
ReConnectAgainTicket
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
server_
-
>
EnableSingleCipher
(
ChooseOneCipher
(
version_
)
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
CheckKeysResumption
(
ssl_kea_ecdh
ssl_grp_none
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_TICKET
2
)
;
Connect
(
)
;
CheckKeysResumption
(
ssl_kea_ecdh
ssl_grp_none
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
}
void
CheckGetInfoResult
(
uint32_t
alpnSize
uint32_t
earlyDataSize
ScopedCERTCertificate
&
cert
ScopedSSLResumptionTokenInfo
&
token
)
{
ASSERT_TRUE
(
cert
)
;
ASSERT_TRUE
(
token
-
>
peerCert
)
;
ASSERT_EQ
(
cert
-
>
derCert
.
len
token
-
>
peerCert
-
>
derCert
.
len
)
;
EXPECT_EQ
(
0
memcmp
(
cert
-
>
derCert
.
data
token
-
>
peerCert
-
>
derCert
.
data
cert
-
>
derCert
.
len
)
)
;
ASSERT_EQ
(
alpnSize
token
-
>
alpnSelectionLen
)
;
EXPECT_EQ
(
0
memcmp
(
"
a
"
token
-
>
alpnSelection
token
-
>
alpnSelectionLen
)
)
;
ASSERT_EQ
(
earlyDataSize
token
-
>
maxEarlyDataSize
)
;
}
TEST_P
(
TlsConnectGenericResumptionToken
ConnectResumeGetInfo
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_TICKET
)
;
StartConnect
(
)
;
ASSERT_TRUE
(
client_
-
>
MaybeSetResumptionToken
(
)
)
;
SSLResumptionTokenInfo
tokenInfo
=
{
0
}
;
ScopedSSLResumptionTokenInfo
token
(
&
tokenInfo
)
;
client_
-
>
GetTokenInfo
(
token
)
;
ScopedCERTCertificate
cert
(
PK11_FindCertFromNickname
(
server_
-
>
name
(
)
.
c_str
(
)
nullptr
)
)
;
CheckGetInfoResult
(
0
0
cert
token
)
;
Handshake
(
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumptionToken
ConnectResumeGetInfoAlpn
)
{
EnableAlpn
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
Connect
(
)
;
CheckAlpn
(
"
a
"
)
;
SendReceive
(
)
;
Reset
(
)
;
EnableAlpn
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_TICKET
)
;
StartConnect
(
)
;
ASSERT_TRUE
(
client_
-
>
MaybeSetResumptionToken
(
)
)
;
SSLResumptionTokenInfo
tokenInfo
=
{
0
}
;
ScopedSSLResumptionTokenInfo
token
(
&
tokenInfo
)
;
client_
-
>
GetTokenInfo
(
token
)
;
ScopedCERTCertificate
cert
(
PK11_FindCertFromNickname
(
server_
-
>
name
(
)
.
c_str
(
)
nullptr
)
)
;
CheckGetInfoResult
(
1
0
cert
token
)
;
Handshake
(
)
;
CheckConnected
(
)
;
CheckAlpn
(
"
a
"
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectTls13ResumptionToken
ConnectResumeGetInfoZeroRtt
)
{
EnableAlpn
(
)
;
SSLInt_RolloverAntiReplay
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
Connect
(
)
;
CheckAlpn
(
"
a
"
)
;
SendReceive
(
)
;
Reset
(
)
;
EnableAlpn
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
ExpectResumption
(
RESUME_TICKET
)
;
StartConnect
(
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
ASSERT_TRUE
(
client_
-
>
MaybeSetResumptionToken
(
)
)
;
SSLResumptionTokenInfo
tokenInfo
=
{
0
}
;
ScopedSSLResumptionTokenInfo
token
(
&
tokenInfo
)
;
client_
-
>
GetTokenInfo
(
token
)
;
ScopedCERTCertificate
cert
(
PK11_FindCertFromNickname
(
server_
-
>
name
(
)
.
c_str
(
)
nullptr
)
)
;
CheckGetInfoResult
(
1
1024
cert
token
)
;
ZeroRttSendReceive
(
true
true
)
;
Handshake
(
)
;
ExpectEarlyDataAccepted
(
true
)
;
CheckConnected
(
)
;
CheckAlpn
(
"
a
"
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectGenericResumption
ConnectResumeClientAuth
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
Connect
(
)
;
SendReceive
(
)
;
EXPECT_FALSE
(
client_
-
>
resumption_callback_called
(
)
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_BOTH
)
;
if
(
use_external_cache
(
)
)
{
ExpectResumption
(
RESUME_NONE
)
;
}
else
{
ExpectResumption
(
RESUME_TICKET
)
;
}
Connect
(
)
;
SendReceive
(
)
;
}
}
