#
include
<
functional
>
#
include
<
memory
>
#
include
"
secerr
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
scoped_ptrs
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
TEST_P
(
TlsConnectGenericPre13
ConnectEcdh
)
{
SetExpectedVersion
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
Reset
(
TlsAgent
:
:
kServerEcdhEcdsa
)
;
DisableAllCiphers
(
)
;
EnableSomeEcdhCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp256r1
ssl_auth_ecdh_ecdsa
ssl_sig_none
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectEcdhWithoutDisablingSuites
)
{
SetExpectedVersion
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
Reset
(
TlsAgent
:
:
kServerEcdhEcdsa
)
;
EnableSomeEcdhCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp256r1
ssl_auth_ecdh_ecdsa
ssl_sig_none
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectEcdhe
)
{
Connect
(
)
;
CheckKeys
(
)
;
}
TEST_P
(
TlsConnectTls12
ConnectEcdheP384
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa384
)
;
ConnectWithCipherSuite
(
TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp384r1
ssl_auth_ecdsa
ssl_sig_ecdsa_secp256r1_sha256
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectEcdheP384Client
)
{
EnsureTlsSetup
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
groups
=
{
ssl_grp_ec_secp384r1
ssl_grp_ffdhe_2048
}
;
client_
-
>
ConfigNamedGroups
(
groups
)
;
server_
-
>
ConfigNamedGroups
(
groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp384r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectEcdheP384Server
)
{
EnsureTlsSetup
(
)
;
auto
hrr_capture
=
MakeTlsFilter
<
TlsHandshakeRecorder
>
(
server_
kTlsHandshakeHelloRetryRequest
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
groups
=
{
ssl_grp_ec_secp384r1
}
;
server_
-
>
ConfigNamedGroups
(
groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp384r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
EXPECT_EQ
(
version_
=
=
SSL_LIBRARY_VERSION_TLS_1_3
hrr_capture
-
>
buffer
(
)
.
len
(
)
!
=
0
)
;
}
TEST_P
(
TlsConnectGeneric
ConnectEcdheGroupMismatch
)
{
EnsureTlsSetup
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ffdhe_2048
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ffdhe_2048
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_dh
ssl_auth_rsa_sign
)
;
}
TEST_P
(
TlsKeyExchangeTest
P384Priority
)
{
const
std
:
:
vector
<
SSLNamedGroup
>
groups
=
{
ssl_grp_ec_secp384r1
ssl_grp_ec_secp256r1
ssl_grp_ec_secp521r1
}
;
EnsureKeyShareSetup
(
)
;
ConfigNamedGroups
(
groups
)
;
client_
-
>
DisableAllCiphers
(
)
;
client_
-
>
EnableCiphersByKeyExchange
(
ssl_kea_ecdh
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp384r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_secp384r1
}
;
CheckKEXDetails
(
groups
shares
)
;
}
TEST_P
(
TlsKeyExchangeTest
DuplicateGroupConfig
)
{
const
std
:
:
vector
<
SSLNamedGroup
>
groups
=
{
ssl_grp_ec_secp384r1
ssl_grp_ec_secp384r1
ssl_grp_ec_secp384r1
ssl_grp_ec_secp256r1
ssl_grp_ec_secp256r1
}
;
EnsureKeyShareSetup
(
)
;
ConfigNamedGroups
(
groups
)
;
client_
-
>
DisableAllCiphers
(
)
;
client_
-
>
EnableCiphersByKeyExchange
(
ssl_kea_ecdh
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp384r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_secp384r1
}
;
std
:
:
vector
<
SSLNamedGroup
>
expectedGroups
=
{
ssl_grp_ec_secp384r1
ssl_grp_ec_secp256r1
}
;
CheckKEXDetails
(
expectedGroups
shares
)
;
}
TEST_P
(
TlsKeyExchangeTest
P384PriorityDHEnabled
)
{
const
std
:
:
vector
<
SSLNamedGroup
>
groups
=
{
ssl_grp_ec_secp384r1
ssl_grp_ffdhe_2048
ssl_grp_ec_secp256r1
ssl_grp_ec_secp521r1
}
;
EnsureKeyShareSetup
(
)
;
ConfigNamedGroups
(
groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp384r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
if
(
version_
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_secp384r1
}
;
CheckKEXDetails
(
groups
shares
)
;
}
else
{
std
:
:
vector
<
SSLNamedGroup
>
oldtlsgroups
=
{
ssl_grp_ec_secp384r1
ssl_grp_ec_secp256r1
ssl_grp_ec_secp521r1
}
;
CheckKEXDetails
(
oldtlsgroups
std
:
:
vector
<
SSLNamedGroup
>
(
)
)
;
}
}
TEST_P
(
TlsConnectGenericPre13
P384PriorityOnServer
)
{
EnsureTlsSetup
(
)
;
client_
-
>
DisableAllCiphers
(
)
;
client_
-
>
EnableCiphersByKeyExchange
(
ssl_kea_ecdh
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_secp384r1
ssl_grp_ec_secp256r1
ssl_grp_ec_secp521r1
}
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp384r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
}
TEST_P
(
TlsConnectGenericPre13
P384PriorityFromModelSocket
)
{
EnsureModelSockets
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
groups
=
{
ssl_grp_ec_secp384r1
ssl_grp_ec_secp256r1
ssl_grp_ec_secp521r1
ssl_grp_ffdhe_2048
}
;
client_model_
-
>
ConfigNamedGroups
(
groups
)
;
server_model_
-
>
ConfigNamedGroups
(
groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp384r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
}
class
TlsKeyExchangeGroupCapture
:
public
TlsHandshakeFilter
{
public
:
TlsKeyExchangeGroupCapture
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
a
)
:
TlsHandshakeFilter
(
a
{
kTlsHandshakeServerKeyExchange
}
)
group_
(
ssl_grp_none
)
{
}
SSLNamedGroup
group
(
)
const
{
return
group_
;
}
protected
:
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
uint32_t
value
=
0
;
EXPECT_TRUE
(
input
.
Read
(
0
1
&
value
)
)
;
EXPECT_EQ
(
3U
value
)
<
<
"
curve
type
has
to
be
3
"
;
EXPECT_TRUE
(
input
.
Read
(
1
2
&
value
)
)
;
group_
=
static_cast
<
SSLNamedGroup
>
(
value
)
;
return
KEEP
;
}
private
:
SSLNamedGroup
group_
;
}
;
TEST_P
(
TlsConnectGenericPre13
DropSupportedGroupExtensionP256
)
{
EnsureTlsSetup
(
)
;
MakeTlsFilter
<
TlsExtensionDropper
>
(
client_
ssl_supported_groups_xtn
)
;
auto
group_capture
=
MakeTlsFilter
<
TlsKeyExchangeGroupCapture
>
(
server_
)
;
ConnectExpectAlert
(
server_
kTlsAlertDecryptError
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_DECRYPT_ERROR_ALERT
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_BAD_HANDSHAKE_HASH_VALUE
)
;
EXPECT_EQ
(
ssl_grp_ec_secp256r1
group_capture
-
>
group
(
)
)
;
}
TEST_P
(
TlsConnectTls13
DropSupportedGroupExtension
)
{
EnsureTlsSetup
(
)
;
MakeTlsFilter
<
TlsExtensionDropper
>
(
client_
ssl_supported_groups_xtn
)
;
ConnectExpectAlert
(
server_
kTlsAlertMissingExtension
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_MISSING_EXTENSION_ALERT
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_MISSING_SUPPORTED_GROUPS_EXTENSION
)
;
}
TEST_P
(
TlsConnectGenericPre13
UseLameGroup
)
{
const
std
:
:
vector
<
SSLNamedGroup
>
groups
=
{
ssl_grp_ec_secp192r1
}
;
client_
-
>
ConfigNamedGroups
(
groups
)
;
server_
-
>
ConfigNamedGroups
(
groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_rsa
ssl_grp_none
ssl_auth_rsa_decrypt
ssl_sig_none
)
;
}
TEST_P
(
TlsConnectTls13
UseLameGroup
)
{
const
std
:
:
vector
<
SSLNamedGroup
>
groups
=
{
ssl_grp_ec_sect283k1
}
;
client_
-
>
ConfigNamedGroups
(
groups
)
;
server_
-
>
ConfigNamedGroups
(
groups
)
;
client_
-
>
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_NO_CIPHERS_SUPPORTED
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConfiguredGroupsRenegotiate
)
{
EnsureTlsSetup
(
)
;
client_
-
>
DisableAllCiphers
(
)
;
client_
-
>
EnableCiphersByKeyExchange
(
ssl_kea_ecdh
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_secp256r1
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ec_secp256r1
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp256r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
CheckConnected
(
)
;
server_
-
>
PrepareForRenegotiate
(
)
;
client_
-
>
StartRenegotiate
(
)
;
Handshake
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp256r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
}
TEST_P
(
TlsKeyExchangeTest
Curve25519
)
{
Reset
(
TlsAgent
:
:
kServerEcdsa256
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
groups
=
{
ssl_grp_ec_curve25519
ssl_grp_ec_secp256r1
ssl_grp_ec_secp521r1
}
;
EnsureKeyShareSetup
(
)
;
ConfigNamedGroups
(
groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_curve25519
ssl_auth_ecdsa
ssl_sig_ecdsa_secp256r1_sha256
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_curve25519
}
;
CheckKEXDetails
(
groups
shares
)
;
}
TEST_P
(
TlsConnectGenericPre13
GroupPreferenceServerPriority
)
{
EnsureTlsSetup
(
)
;
client_
-
>
DisableAllCiphers
(
)
;
client_
-
>
EnableCiphersByKeyExchange
(
ssl_kea_ecdh
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ec_curve25519
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_curve25519
ssl_grp_ec_secp256r1
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
}
#
ifndef
NSS_DISABLE_TLS_1_3
TEST_P
(
TlsKeyExchangeTest13
Curve25519P256EqualPriorityClient13
)
{
EnsureKeyShareSetup
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ec_curve25519
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_curve25519
ssl_grp_ec_secp256r1
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp256r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_secp256r1
}
;
CheckKEXDetails
(
client_groups
shares
)
;
}
TEST_P
(
TlsKeyExchangeTest13
Curve25519P256EqualPriorityServer13
)
{
EnsureKeyShareSetup
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_curve25519
ssl_grp_ec_secp256r1
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ec_curve25519
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_curve25519
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_curve25519
}
;
CheckKEXDetails
(
client_groups
shares
)
;
}
TEST_P
(
TlsKeyExchangeTest13
EqualPriorityTestRetryECServer13
)
{
EnsureKeyShareSetup
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_curve25519
ssl_grp_ec_secp256r1
ssl_grp_ec_secp384r1
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ec_secp384r1
ssl_grp_ec_curve25519
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp256r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_curve25519
}
;
CheckKEXDetails
(
client_groups
shares
ssl_grp_ec_secp256r1
)
;
}
TEST_P
(
TlsKeyExchangeTest13
NotEqualPriorityWithIntermediateGroup13
)
{
EnsureKeyShareSetup
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_curve25519
ssl_grp_ec_secp256r1
ssl_grp_ffdhe_2048
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ffdhe_2048
ssl_grp_ec_curve25519
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp256r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_curve25519
}
;
CheckKEXDetails
(
client_groups
shares
ssl_grp_ec_secp256r1
)
;
}
TEST_P
(
TlsKeyExchangeTest13
NotEqualPriorityWithUnsupportedFFIntermediateGroup13
)
{
EnsureKeyShareSetup
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_curve25519
ssl_grp_ec_secp256r1
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ffdhe_2048
ssl_grp_ec_curve25519
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp256r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_curve25519
}
;
CheckKEXDetails
(
client_groups
shares
ssl_grp_ec_secp256r1
)
;
}
TEST_P
(
TlsKeyExchangeTest13
NotEqualPriorityWithUnsupportedECIntermediateGroup13
)
{
EnsureKeyShareSetup
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_curve25519
ssl_grp_ec_secp256r1
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ec_secp384r1
ssl_grp_ec_curve25519
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp256r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_curve25519
}
;
CheckKEXDetails
(
client_groups
shares
ssl_grp_ec_secp256r1
)
;
}
TEST_P
(
TlsKeyExchangeTest13
EqualPriority13
)
{
EnsureKeyShareSetup
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_curve25519
ssl_grp_ffdhe_2048
ssl_grp_ec_secp256r1
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ec_curve25519
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
Connect
(
)
;
CheckKeys
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_curve25519
}
;
CheckKEXDetails
(
client_groups
shares
)
;
}
#
endif
TEST_P
(
TlsConnectGeneric
P256ClientAndCurve25519Server
)
{
EnsureTlsSetup
(
)
;
client_
-
>
DisableAllCiphers
(
)
;
client_
-
>
EnableCiphersByKeyExchange
(
ssl_kea_ecdh
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_secp256r1
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_curve25519
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
ConnectExpectAlert
(
server_
kTlsAlertHandshakeFailure
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_NO_CYPHER_OVERLAP
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_NO_CYPHER_OVERLAP
)
;
}
TEST_P
(
TlsKeyExchangeTest13
MultipleClientShares
)
{
EnsureKeyShareSetup
(
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
client_groups
=
{
ssl_grp_ec_curve25519
ssl_grp_ec_secp256r1
}
;
const
std
:
:
vector
<
SSLNamedGroup
>
server_groups
=
{
ssl_grp_ec_secp256r1
ssl_grp_ec_curve25519
}
;
client_
-
>
ConfigNamedGroups
(
client_groups
)
;
server_
-
>
ConfigNamedGroups
(
server_groups
)
;
EXPECT_EQ
(
SECSuccess
SSL_SendAdditionalKeyShares
(
client_
-
>
ssl_fd
(
)
1
)
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_grp_ec_secp256r1
ssl_auth_rsa_sign
ssl_sig_rsa_pss_rsae_sha256
)
;
const
std
:
:
vector
<
SSLNamedGroup
>
shares
=
{
ssl_grp_ec_curve25519
ssl_grp_ec_secp256r1
}
;
CheckKEXDetails
(
client_groups
shares
)
;
}
class
ECCClientKEXFilter
:
public
TlsHandshakeFilter
{
public
:
ECCClientKEXFilter
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
client
)
:
TlsHandshakeFilter
(
client
{
kTlsHandshakeClientKeyExchange
}
)
{
}
protected
:
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
output
-
>
Allocate
(
1
)
;
output
-
>
Write
(
0
0U
1
)
;
return
CHANGE
;
}
}
;
class
ECCServerKEXFilter
:
public
TlsHandshakeFilter
{
public
:
ECCServerKEXFilter
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
server
)
:
TlsHandshakeFilter
(
server
{
kTlsHandshakeServerKeyExchange
}
)
{
}
protected
:
virtual
PacketFilter
:
:
Action
FilterHandshake
(
const
HandshakeHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
output
-
>
Allocate
(
4
)
;
output
-
>
Write
(
0
3U
1
)
;
uint32_t
curve
=
0
;
EXPECT_TRUE
(
input
.
Read
(
1
2
&
curve
)
)
;
output
-
>
Write
(
1
curve
2
)
;
output
-
>
Write
(
3
0U
1
)
;
return
CHANGE
;
}
}
;
TEST_P
(
TlsConnectGenericPre13
ConnectECDHEmptyServerPoint
)
{
MakeTlsFilter
<
ECCServerKEXFilter
>
(
server_
)
;
ConnectExpectAlert
(
client_
kTlsAlertIllegalParameter
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_SERVER_KEY_EXCH
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectECDHEmptyClientPoint
)
{
MakeTlsFilter
<
ECCClientKEXFilter
>
(
client_
)
;
ConnectExpectAlert
(
server_
kTlsAlertIllegalParameter
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_CLIENT_KEY_EXCH
)
;
}
INSTANTIATE_TEST_CASE_P
(
KeyExchangeTest
TlsKeyExchangeTest
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsVariantsAll
TlsConnectTestBase
:
:
kTlsV11Plus
)
)
;
#
ifndef
NSS_DISABLE_TLS_1_3
INSTANTIATE_TEST_CASE_P
(
KeyExchangeTest
TlsKeyExchangeTest13
:
:
testing
:
:
Combine
(
TlsConnectTestBase
:
:
kTlsVariantsAll
TlsConnectTestBase
:
:
kTlsV13
)
)
;
#
endif
}
