#
include
<
functional
>
#
include
<
memory
>
#
include
"
secerr
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
scoped_ptrs
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
const
uint8_t
kBogusClientKeyExchange
[
]
=
{
0x01
0x00
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
0xff
}
;
TEST_P
(
TlsConnectGenericPre13
ConnectStaticRSA
)
{
EnableOnlyStaticRsaCiphers
(
)
;
Connect
(
)
;
CheckKeys
(
ssl_kea_rsa
ssl_grp_none
ssl_auth_rsa_decrypt
ssl_sig_none
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectStaticRSABogusCKE
)
{
EnableOnlyStaticRsaCiphers
(
)
;
MakeTlsFilter
<
TlsInspectorReplaceHandshakeMessage
>
(
client_
kTlsHandshakeClientKeyExchange
DataBuffer
(
kBogusClientKeyExchange
sizeof
(
kBogusClientKeyExchange
)
)
)
;
ConnectExpectAlert
(
server_
kTlsAlertBadRecordMac
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectStaticRSABogusPMSVersionDetect
)
{
EnableOnlyStaticRsaCiphers
(
)
;
MakeTlsFilter
<
TlsClientHelloVersionChanger
>
(
client_
server_
)
;
ConnectExpectAlert
(
server_
kTlsAlertBadRecordMac
)
;
}
TEST_P
(
TlsConnectGenericPre13
ConnectStaticRSABogusPMSVersionIgnore
)
{
EnableOnlyStaticRsaCiphers
(
)
;
MakeTlsFilter
<
TlsClientHelloVersionChanger
>
(
client_
server_
)
;
server_
-
>
SetOption
(
SSL_ROLLBACK_DETECTION
PR_FALSE
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectExtendedMasterSecretStaticRSABogusCKE
)
{
EnableOnlyStaticRsaCiphers
(
)
;
EnableExtendedMasterSecret
(
)
;
MakeTlsFilter
<
TlsInspectorReplaceHandshakeMessage
>
(
client_
kTlsHandshakeClientKeyExchange
DataBuffer
(
kBogusClientKeyExchange
sizeof
(
kBogusClientKeyExchange
)
)
)
;
ConnectExpectAlert
(
server_
kTlsAlertBadRecordMac
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectExtendedMasterSecretStaticRSABogusPMSVersionDetect
)
{
EnableOnlyStaticRsaCiphers
(
)
;
EnableExtendedMasterSecret
(
)
;
MakeTlsFilter
<
TlsClientHelloVersionChanger
>
(
client_
server_
)
;
ConnectExpectAlert
(
server_
kTlsAlertBadRecordMac
)
;
}
TEST_P
(
TlsConnectStreamPre13
ConnectExtendedMasterSecretStaticRSABogusPMSVersionIgnore
)
{
EnableOnlyStaticRsaCiphers
(
)
;
EnableExtendedMasterSecret
(
)
;
MakeTlsFilter
<
TlsClientHelloVersionChanger
>
(
client_
server_
)
;
server_
-
>
SetOption
(
SSL_ROLLBACK_DETECTION
PR_FALSE
)
;
Connect
(
)
;
}
}
