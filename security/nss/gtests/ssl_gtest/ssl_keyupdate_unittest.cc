#
include
"
secerr
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
nss_scoped_ptrs
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
TEST_F
(
TlsConnectTest
KeyUpdateClient
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
SendReceive
(
50
)
;
SendReceive
(
60
)
;
CheckEpochs
(
4
3
)
;
}
TEST_F
(
TlsConnectStreamTls13
KeyUpdateTooEarly_Client
)
{
StartConnect
(
)
;
auto
filter
=
MakeTlsFilter
<
TlsEncryptedHandshakeMessageReplacer
>
(
server_
kTlsHandshakeFinished
kTlsHandshakeKeyUpdate
)
;
filter
-
>
EnableDecryption
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
ExpectAlert
(
client_
kTlsAlertUnexpectedMessage
)
;
client_
-
>
Handshake
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_KEY_UPDATE
)
;
server_
-
>
Handshake
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_HANDSHAKE_UNEXPECTED_ALERT
)
;
}
TEST_F
(
TlsConnectStreamTls13
KeyUpdateTooEarly_Server
)
{
StartConnect
(
)
;
auto
filter
=
MakeTlsFilter
<
TlsEncryptedHandshakeMessageReplacer
>
(
client_
kTlsHandshakeFinished
kTlsHandshakeKeyUpdate
)
;
filter
-
>
EnableDecryption
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
client_
-
>
Handshake
(
)
;
ExpectAlert
(
server_
kTlsAlertUnexpectedMessage
)
;
server_
-
>
Handshake
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_KEY_UPDATE
)
;
client_
-
>
Handshake
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_HANDSHAKE_UNEXPECTED_ALERT
)
;
}
TEST_F
(
TlsConnectTest
KeyUpdateClientRequestUpdate
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
SendReceive
(
50
)
;
SendReceive
(
60
)
;
CheckEpochs
(
4
4
)
;
}
TEST_F
(
TlsConnectTest
KeyUpdateServer
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
SendReceive
(
50
)
;
SendReceive
(
60
)
;
CheckEpochs
(
3
4
)
;
}
TEST_F
(
TlsConnectTest
KeyUpdateServerRequestUpdate
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
SendReceive
(
50
)
;
SendReceive
(
60
)
;
CheckEpochs
(
4
4
)
;
}
TEST_F
(
TlsConnectTest
KeyUpdateConsecutiveRequests
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
SendReceive
(
50
)
;
SendReceive
(
60
)
;
CheckEpochs
(
4
5
)
;
}
TEST_F
(
TlsConnectTest
KeyUpdateLocalUpdateThenConsecutiveRequests
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
SendReceive
(
50
)
;
SendReceive
(
60
)
;
CheckEpochs
(
5
5
)
;
}
TEST_F
(
TlsConnectTest
KeyUpdateMultiple
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
SendReceive
(
50
)
;
SendReceive
(
60
)
;
CheckEpochs
(
5
6
)
;
}
TEST_F
(
TlsConnectTest
KeyUpdateBothRequest
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
SendReceive
(
50
)
;
SendReceive
(
60
)
;
CheckEpochs
(
5
5
)
;
}
TEST_F
(
TlsConnectTest
KeyUpdateAutomaticOnWrite
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ConnectWithCipherSuite
(
TLS_AES_128_GCM_SHA256
)
;
uint64_t
threshold
=
(
0x5aULL
<
<
28
)
*
3
/
4
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteSeqNum
(
client_
-
>
ssl_fd
(
)
threshold
)
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceReadSeqNum
(
server_
-
>
ssl_fd
(
)
threshold
)
)
;
client_
-
>
SendData
(
10
)
;
server_
-
>
ReadBytes
(
)
;
client_
-
>
SendData
(
20
)
;
server_
-
>
ReadBytes
(
)
;
SendReceive
(
100
)
;
CheckEpochs
(
4
3
)
;
}
TEST_F
(
TlsConnectTest
KeyUpdateAutomaticOnRead
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ConnectWithCipherSuite
(
TLS_AES_128_GCM_SHA256
)
;
uint64_t
threshold
=
(
(
0x5aULL
<
<
28
)
*
7
/
8
)
+
1
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteSeqNum
(
client_
-
>
ssl_fd
(
)
threshold
)
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceReadSeqNum
(
server_
-
>
ssl_fd
(
)
threshold
)
)
;
client_
-
>
SendData
(
10
)
;
server_
-
>
ReadBytes
(
)
;
SendReceive
(
70
)
;
SendReceive
(
80
)
;
CheckEpochs
(
5
4
)
;
}
class
TLSKeyUpdateDamager
:
public
TlsRecordFilter
{
public
:
TLSKeyUpdateDamager
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
a
size_t
byte
uint8_t
val
)
:
TlsRecordFilter
(
a
)
offset_
(
byte
)
value_
(
val
)
{
}
protected
:
PacketFilter
:
:
Action
FilterRecord
(
const
TlsRecordHeader
&
header
const
DataBuffer
&
record
size_t
*
offset
DataBuffer
*
output
)
override
{
if
(
!
header
.
is_protected
(
)
)
{
return
KEEP
;
}
uint16_t
protection_epoch
;
uint8_t
inner_content_type
;
DataBuffer
plaintext
;
TlsRecordHeader
out_header
;
if
(
!
Unprotect
(
header
record
&
protection_epoch
&
inner_content_type
&
plaintext
&
out_header
)
)
{
return
KEEP
;
}
if
(
inner_content_type
!
=
ssl_ct_handshake
)
{
return
KEEP
;
}
if
(
plaintext
.
data
(
)
[
0
]
!
=
ssl_hs_key_update
)
{
return
KEEP
;
}
if
(
offset_
>
=
plaintext
.
len
(
)
)
{
ADD_FAILURE
(
)
<
<
"
TLSKeyUpdateDamager
:
the
input
(
offset_
)
is
out
"
"
of
the
range
(
the
expected
len
is
equal
to
"
<
<
plaintext
.
len
(
)
<
<
"
)
.
"
<
<
std
:
:
endl
;
return
KEEP
;
}
plaintext
.
data
(
)
[
offset_
]
=
value_
;
DataBuffer
ciphertext
;
bool
ok
=
Protect
(
spec
(
protection_epoch
)
out_header
inner_content_type
plaintext
&
ciphertext
&
out_header
)
;
if
(
!
ok
)
{
ADD_FAILURE
(
)
<
<
"
Unable
to
protect
the
plaintext
using
"
<
<
protection_epoch
<
<
"
epoch
.
"
<
<
std
:
:
endl
;
return
KEEP
;
}
*
offset
=
out_header
.
Write
(
output
*
offset
ciphertext
)
;
return
CHANGE
;
}
protected
:
size_t
offset_
;
uint8_t
value_
;
}
;
TEST_F
(
TlsConnectStreamTls13
TLSKeyUpdateWrongValueForUpdateRequested
)
{
EnsureTlsSetup
(
)
;
auto
filter
=
MakeTlsFilter
<
TLSKeyUpdateDamager
>
(
client_
4
2
)
;
filter
-
>
EnableDecryption
(
)
;
filter
-
>
Disable
(
)
;
Connect
(
)
;
filter
-
>
Enable
(
)
;
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
;
filter
-
>
Disable
(
)
;
ExpectAlert
(
server_
kTlsAlertDecodeError
)
;
client_
-
>
ExpectReceiveAlert
(
kTlsAlertDecodeError
)
;
server_
-
>
ExpectReadWriteError
(
)
;
client_
-
>
ExpectReadWriteError
(
)
;
server_
-
>
ReadBytes
(
)
;
client_
-
>
ReadBytes
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_KEY_UPDATE
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_DECODE_ERROR_ALERT
)
;
client_
-
>
CheckEpochs
(
3
4
)
;
server_
-
>
CheckEpochs
(
3
3
)
;
}
TEST_F
(
TlsConnectStreamTls13
TLSKeyUpdateWrongValueForLength_MessageTooLong
)
{
EnsureTlsSetup
(
)
;
auto
filter
=
MakeTlsFilter
<
TLSKeyUpdateDamager
>
(
client_
1
0xff
)
;
filter
-
>
EnableDecryption
(
)
;
filter
-
>
Disable
(
)
;
Connect
(
)
;
filter
-
>
Enable
(
)
;
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
;
filter
-
>
Disable
(
)
;
ExpectAlert
(
server_
kTlsAlertDecodeError
)
;
client_
-
>
ExpectReceiveAlert
(
kTlsAlertDecodeError
)
;
server_
-
>
ExpectReadWriteError
(
)
;
client_
-
>
ExpectReadWriteError
(
)
;
server_
-
>
ReadBytes
(
)
;
client_
-
>
ReadBytes
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_HANDSHAKE
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_DECODE_ERROR_ALERT
)
;
client_
-
>
CheckEpochs
(
3
4
)
;
server_
-
>
CheckEpochs
(
3
3
)
;
}
TEST_F
(
TlsConnectStreamTls13
TLSKeyUpdateWrongValueForLength_MessageTooShort
)
{
EnsureTlsSetup
(
)
;
auto
filter
=
MakeTlsFilter
<
TLSKeyUpdateDamager
>
(
client_
0x3
0x00
)
;
filter
-
>
EnableDecryption
(
)
;
filter
-
>
Disable
(
)
;
Connect
(
)
;
filter
-
>
Enable
(
)
;
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
;
filter
-
>
Disable
(
)
;
ExpectAlert
(
server_
kTlsAlertDecodeError
)
;
client_
-
>
ExpectReceiveAlert
(
kTlsAlertCloseNotify
)
;
client_
-
>
SendData
(
10
)
;
server_
-
>
ReadBytes
(
)
;
}
static
void
SendAndProcessKU
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
sender
const
std
:
:
shared_ptr
<
TlsAgent
>
&
receiver
bool
updateRequested
)
{
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
sender
-
>
ssl_fd
(
)
updateRequested
)
)
;
receiver
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
receiver
-
>
ssl_fd
(
)
)
;
sender
-
>
ReadBytes
(
)
;
if
(
updateRequested
)
{
SSLInt_SendImmediateACK
(
sender
-
>
ssl_fd
(
)
)
;
receiver
-
>
ReadBytes
(
)
;
}
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ClientKUSucceed
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
SendAndProcessKU
(
client_
server_
PR_FALSE
)
;
CheckEpochs
(
4
3
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ClientKUTwiceOnceIgnored
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
server_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
ReadBytes
(
)
;
CheckEpochs
(
4
3
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ServerKUSucceed
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
SendAndProcessKU
(
server_
client_
PR_FALSE
)
;
CheckEpochs
(
3
4
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_PreviousKUNotYetACKed
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
client_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
client_
-
>
ssl_fd
(
)
)
;
server_
-
>
ReadBytes
(
)
;
CheckEpochs
(
3
4
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_TwiceReceivedOnceIgnored
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
auto
filter
=
MakeTlsFilter
<
TLSRecordSaveAndDropNext
>
(
server_
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
client_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
client_
-
>
ssl_fd
(
)
)
;
server_
-
>
ReadBytes
(
)
;
CheckEpochs
(
3
3
)
;
DataBuffer
d
=
filter
-
>
ReturnRecorded
(
)
;
server_
-
>
SendDirect
(
d
)
;
server_
-
>
SendDirect
(
d
)
;
client_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
client_
-
>
ssl_fd
(
)
)
;
server_
-
>
ReadBytes
(
)
;
CheckEpochs
(
3
4
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_UpdateRequestedSucceed
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
SendAndProcessKU
(
client_
server_
PR_TRUE
)
;
CheckEpochs
(
4
4
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_UpdateRequestedTwiceSucceed
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
SendAndProcessKU
(
client_
server_
PR_TRUE
)
;
CheckEpochs
(
4
4
)
;
SendAndProcessKU
(
client_
server_
PR_TRUE
)
;
CheckEpochs
(
5
5
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ServerUpdateRequestedSucceed
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
SendAndProcessKU
(
server_
client_
PR_TRUE
)
;
CheckEpochs
(
4
4
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ServerUpdateRequestedTwiceSucceed
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
SendAndProcessKU
(
server_
client_
PR_TRUE
)
;
CheckEpochs
(
4
4
)
;
SendAndProcessKU
(
server_
client_
PR_TRUE
)
;
CheckEpochs
(
5
5
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ClientServerConseqSucceed
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
SendAndProcessKU
(
client_
server_
PR_FALSE
)
;
CheckEpochs
(
4
3
)
;
SendAndProcessKU
(
server_
client_
PR_FALSE
)
;
CheckEpochs
(
4
4
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ClientServerUpdateRequestedBothSucceed
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
SendAndProcessKU
(
client_
server_
PR_TRUE
)
;
SendAndProcessKU
(
server_
client_
PR_TRUE
)
;
CheckEpochs
(
5
5
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_KUInTheMiddleIsRejected
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
client_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
client_
-
>
ssl_fd
(
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
server_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
ReadBytes
(
)
;
CheckEpochs
(
4
4
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ClientImmediateSend
)
{
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
CheckEpochs
(
3
3
)
;
client_
-
>
SendData
(
10
)
;
WAIT_
(
server_
-
>
received_bytes
(
)
=
=
10
2000
)
;
ASSERT_EQ
(
(
size_t
)
10
server_
-
>
received_bytes
(
)
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ServerImmediateSend
)
{
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
CheckEpochs
(
3
3
)
;
server_
-
>
SendData
(
10
)
;
WAIT_
(
client_
-
>
received_bytes
(
)
=
=
10
2000
)
;
ASSERT_EQ
(
(
size_t
)
10
client_
-
>
received_bytes
(
)
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ClientImmediateSendAfterServerRead
)
{
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
server_
-
>
ReadBytes
(
)
;
server_
-
>
CheckEpochs
(
4
3
)
;
client_
-
>
CheckEpochs
(
3
3
)
;
client_
-
>
SendData
(
10
)
;
WAIT_
(
server_
-
>
received_bytes
(
)
=
=
10
2000
)
;
ASSERT_EQ
(
(
size_t
)
10
server_
-
>
received_bytes
(
)
)
;
server_
-
>
SendData
(
10
)
;
WAIT_
(
client_
-
>
received_bytes
(
)
=
=
10
2000
)
;
ASSERT_EQ
(
(
size_t
)
10
client_
-
>
received_bytes
(
)
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ClientImmediateSendAfterServerReadAndACK
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
server_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
server_
-
>
CheckEpochs
(
4
3
)
;
client_
-
>
CheckEpochs
(
3
3
)
;
client_
-
>
SendData
(
10
)
;
WAIT_
(
server_
-
>
received_bytes
(
)
=
=
10
2000
)
;
ASSERT_EQ
(
(
size_t
)
10
server_
-
>
received_bytes
(
)
)
;
server_
-
>
SendData
(
10
)
;
WAIT_
(
client_
-
>
received_bytes
(
)
=
=
10
2000
)
;
ASSERT_EQ
(
(
size_t
)
10
client_
-
>
received_bytes
(
)
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ClientWritingEpochUpdatedAfterReceivedACK
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
server_
-
>
ReadBytes
(
)
;
server_
-
>
CheckEpochs
(
4
3
)
;
client_
-
>
CheckEpochs
(
3
3
)
;
client_
-
>
SendData
(
10
)
;
WAIT_
(
server_
-
>
received_bytes
(
)
=
=
10
2000
)
;
ASSERT_EQ
(
(
size_t
)
10
server_
-
>
received_bytes
(
)
)
;
server_
-
>
CheckEpochs
(
4
3
)
;
client_
-
>
CheckEpochs
(
3
3
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
ReadBytes
(
)
;
CheckEpochs
(
4
3
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ClientMaxEpochReached
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
PRUint64
max_epoch_type
=
(
0x1ULL
<
<
16
)
-
1
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteEpochNum
(
client_
-
>
ssl_fd
(
)
max_epoch_type
)
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceReadEpochNum
(
server_
-
>
ssl_fd
(
)
max_epoch_type
)
)
;
CheckEpochs
(
max_epoch_type
3
)
;
EXPECT_EQ
(
SECFailure
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ClientMaxEpochReachedUpdateRequested
)
{
Connect
(
)
;
CheckEpochs
(
3
3
)
;
PRUint64
max_epoch_type
=
(
0x1ULL
<
<
16
)
-
1
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteEpochNum
(
client_
-
>
ssl_fd
(
)
max_epoch_type
)
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceReadEpochNum
(
server_
-
>
ssl_fd
(
)
max_epoch_type
)
)
;
CheckEpochs
(
max_epoch_type
3
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
client_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
client_
-
>
ssl_fd
(
)
)
;
server_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
ReadBytes
(
)
;
CheckEpochs
(
max_epoch_type
4
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_AutomaticOnWrite
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ConnectWithCipherSuite
(
TLS_AES_128_GCM_SHA256
)
;
CheckEpochs
(
3
3
)
;
uint64_t
threshold
=
0x438000000
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteSeqNum
(
client_
-
>
ssl_fd
(
)
threshold
)
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceReadSeqNum
(
server_
-
>
ssl_fd
(
)
threshold
)
)
;
client_
-
>
SendData
(
10
)
;
server_
-
>
ReadBytes
(
)
;
client_
-
>
SendData
(
15
)
;
server_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
ReadBytes
(
)
;
CheckEpochs
(
4
3
)
;
SendReceive
(
100
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_AutomaticOnRead
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ConnectWithCipherSuite
(
TLS_AES_128_GCM_SHA256
)
;
CheckEpochs
(
3
3
)
;
uint64_t
threshold
=
0x4ec000000
-
1
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteSeqNum
(
client_
-
>
ssl_fd
(
)
threshold
)
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceReadSeqNum
(
server_
-
>
ssl_fd
(
)
threshold
)
)
;
auto
filter
=
MakeTlsFilter
<
TLSRecordSaveAndDropNext
>
(
client_
)
;
client_
-
>
SendData
(
10
)
;
DataBuffer
d
=
filter
-
>
ReturnRecorded
(
)
;
client_
-
>
SendDirect
(
d
)
;
server_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
client_
-
>
ssl_fd
(
)
)
;
server_
-
>
ReadBytes
(
)
;
CheckEpochs
(
4
4
)
;
SendReceive
(
100
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_CanSendBeforeThreshold
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ConnectWithCipherSuite
(
TLS_AES_128_GCM_SHA256
)
;
CheckEpochs
(
3
3
)
;
uint64_t
threshold
=
0x5a0000000
-
2
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteSeqNum
(
client_
-
>
ssl_fd
(
)
threshold
)
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceReadSeqNum
(
server_
-
>
ssl_fd
(
)
threshold
)
)
;
size_t
received_bytes
=
server_
-
>
received_bytes
(
)
;
client_
-
>
SendData
(
15
)
;
client_
-
>
ExpectReadWriteError
(
)
;
client_
-
>
SendData
(
105
)
;
server_
-
>
ReadBytes
(
)
;
ASSERT_EQ
(
(
size_t
)
received_bytes
+
15
server_
-
>
received_bytes
(
)
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_DiscardAfterThreshold
)
{
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
ConnectWithCipherSuite
(
TLS_AES_128_GCM_SHA256
)
;
CheckEpochs
(
3
3
)
;
uint64_t
threshold
=
0x5a0000000
-
3
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteSeqNum
(
client_
-
>
ssl_fd
(
)
threshold
)
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceReadSeqNum
(
server_
-
>
ssl_fd
(
)
threshold
)
)
;
size_t
received_bytes
=
server_
-
>
received_bytes
(
)
;
auto
filter
=
MakeTlsFilter
<
TLSRecordSaveAndDropNext
>
(
client_
)
;
client_
-
>
SendData
(
30
)
;
DataBuffer
d
=
filter
-
>
ReturnRecorded
(
)
;
client_
-
>
SendDirect
(
d
)
;
client_
-
>
SendDirect
(
d
)
;
server_
-
>
ReadBytes
(
)
;
ASSERT_EQ
(
(
size_t
)
received_bytes
+
30
server_
-
>
received_bytes
(
)
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_PreviousEpochIsAcceptedBeforeNew
)
{
size_t
len
=
10
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
server_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
CheckEpochs
(
3
3
)
;
server_
-
>
CheckEpochs
(
4
3
)
;
auto
filter
=
MakeTlsFilter
<
TLSRecordSaveAndDropNext
>
(
client_
)
;
client_
-
>
SendData
(
len
)
;
DataBuffer
d
=
filter
-
>
ReturnRecorded
(
)
;
client_
-
>
ReadBytes
(
)
;
client_
-
>
CheckEpochs
(
3
4
)
;
server_
-
>
CheckEpochs
(
4
3
)
;
client_
-
>
SendDirect
(
d
)
;
WAIT_
(
server_
-
>
received_bytes
(
)
=
=
len
2000
)
;
ASSERT_EQ
(
len
server_
-
>
received_bytes
(
)
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_2EpochsAgoIsRejected
)
{
size_t
len
=
10
;
Connect
(
)
;
CheckEpochs
(
3
3
)
;
auto
filter
=
MakeTlsFilter
<
TLSRecordSaveAndDropNext
>
(
client_
)
;
client_
-
>
SendData
(
len
)
;
DataBuffer
d
=
filter
-
>
ReturnRecorded
(
)
;
client_
-
>
ResetSentBytes
(
)
;
SendAndProcessKU
(
client_
server_
PR_FALSE
)
;
SendAndProcessKU
(
client_
server_
PR_FALSE
)
;
CheckEpochs
(
5
3
)
;
client_
-
>
SendDirect
(
d
)
;
server_
-
>
ReadBytes
(
)
;
ASSERT_EQ
(
(
size_t
)
0
server_
-
>
received_bytes
(
)
)
;
SendReceive
(
60
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_PreviousEpochIsAcceptedAfterNew
)
{
size_t
len
=
30
;
size_t
legal_message_len
=
20
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
server_
-
>
ReadBytes
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
CheckEpochs
(
3
3
)
;
server_
-
>
CheckEpochs
(
4
3
)
;
auto
filter
=
MakeTlsFilter
<
TLSRecordSaveAndDropNext
>
(
client_
)
;
client_
-
>
SendData
(
len
)
;
DataBuffer
d
=
filter
-
>
ReturnRecorded
(
)
;
client_
-
>
ResetSentBytes
(
)
;
client_
-
>
ReadBytes
(
)
;
client_
-
>
CheckEpochs
(
3
4
)
;
server_
-
>
CheckEpochs
(
4
3
)
;
SendReceive
(
legal_message_len
)
;
server_
-
>
ReadBytes
(
)
;
client_
-
>
SendDirect
(
d
)
;
server_
-
>
ReadBytes
(
)
;
ASSERT_EQ
(
(
size_t
)
legal_message_len
server_
-
>
received_bytes
(
)
)
;
SendReceive
(
50
)
;
}
typedef
struct
sslKeyUpdateReadEpochTVStr
{
DTLSEpoch
epoch
;
PRUint8
header
;
DTLSEpoch
expected_reconstructed_epoch
;
}
sslKeyUpdateReadEpochTV_t
;
static
const
sslKeyUpdateReadEpochTV_t
sslKeyUpdateReadEpochTV
[
26
]
=
{
{
0x1
0x1
0x1
}
{
0x2
0x1
0x1
}
{
0x2
0x2
0x2
}
{
0x3
0x3
0x3
}
{
0x3
0x2
0x2
}
{
0x3
0x1
0x1
}
{
0x4
0x0
0x4
}
{
0x4
0x1
0x1
}
{
0x4
0x2
0x2
}
{
0x4
0x3
0x3
}
{
0x5
0x0
0x4
}
{
0x5
0x1
0x5
}
{
0x5
0x2
0x2
}
{
0x5
0x3
0x3
}
{
0x6
0x0
0x4
}
{
0x6
0x1
0x5
}
{
0x6
0x2
0x6
}
{
0x6
0x3
0x3
}
{
0x7
0x0
0x4
}
{
0x7
0x1
0x5
}
{
0x7
0x2
0x6
}
{
0x7
0x3
0x7
}
{
0x8
0x0
0x8
}
{
0x8
0x1
0x5
}
{
0x8
0x2
0x6
}
{
0x8
0x3
0x7
}
}
;
TEST_F
(
TlsConnectDatagram13
DTLS_EpochReconstruction
)
{
PRUint8
header
[
5
]
=
{
0
}
;
header
[
0
]
=
0x20
;
DTLSEpoch
epoch
;
for
(
size_t
i
=
0
;
i
<
26
;
i
+
+
)
{
epoch
=
sslKeyUpdateReadEpochTV
[
i
]
.
epoch
;
header
[
0
]
=
(
header
[
0
]
&
0xfc
)
|
(
sslKeyUpdateReadEpochTV
[
i
]
.
header
&
0x3
)
;
ASSERT_EQ
(
sslKeyUpdateReadEpochTV
[
i
]
.
expected_reconstructed_epoch
dtls_ReadEpoch
(
SSL_LIBRARY_VERSION_TLS_1_3
epoch
header
)
)
;
}
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_WrongValueForUpdateRequested
)
{
EnsureTlsSetup
(
)
;
auto
filter
=
MakeTlsFilter
<
TLSKeyUpdateDamager
>
(
client_
12
2
)
;
filter
-
>
EnableDecryption
(
)
;
filter
-
>
Disable
(
)
;
Connect
(
)
;
filter
-
>
Enable
(
)
;
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
;
filter
-
>
Disable
(
)
;
ExpectAlert
(
server_
kTlsAlertDecodeError
)
;
client_
-
>
ExpectReceiveAlert
(
kTlsAlertDecodeError
)
;
server_
-
>
ExpectReadWriteError
(
)
;
client_
-
>
ExpectReadWriteError
(
)
;
server_
-
>
ReadBytes
(
)
;
client_
-
>
ReadBytes
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_KEY_UPDATE
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_DECODE_ERROR_ALERT
)
;
CheckEpochs
(
3
3
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_DamagedLength
)
{
EnsureTlsSetup
(
)
;
auto
filter
=
MakeTlsFilter
<
TLSKeyUpdateDamager
>
(
client_
3
0
)
;
filter
-
>
EnableDecryption
(
)
;
filter
-
>
Disable
(
)
;
Connect
(
)
;
filter
-
>
Enable
(
)
;
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
;
filter
-
>
Disable
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
ReadBytes
(
)
;
CheckEpochs
(
3
3
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_DamagedLengthTooLong
)
{
EnsureTlsSetup
(
)
;
auto
filter
=
MakeTlsFilter
<
TLSKeyUpdateDamager
>
(
client_
2
2
)
;
filter
-
>
EnableDecryption
(
)
;
filter
-
>
Disable
(
)
;
Connect
(
)
;
filter
-
>
Enable
(
)
;
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
;
filter
-
>
Disable
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
ReadBytes
(
)
;
CheckEpochs
(
3
3
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_DamagedFragmentLength
)
{
EnsureTlsSetup
(
)
;
auto
filter
=
MakeTlsFilter
<
TLSKeyUpdateDamager
>
(
client_
10
1
)
;
filter
-
>
EnableDecryption
(
)
;
filter
-
>
Disable
(
)
;
Connect
(
)
;
filter
-
>
Enable
(
)
;
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
;
filter
-
>
Disable
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
client_
-
>
ReadBytes
(
)
;
CheckEpochs
(
3
3
)
;
SendReceive
(
50
)
;
}
class
TLSACKDamager
:
public
TlsRecordFilter
{
public
:
TLSACKDamager
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
a
size_t
byte
uint8_t
val
)
:
TlsRecordFilter
(
a
)
offset_
(
byte
)
value_
(
val
)
{
}
protected
:
PacketFilter
:
:
Action
FilterRecord
(
const
TlsRecordHeader
&
header
const
DataBuffer
&
record
size_t
*
offset
DataBuffer
*
output
)
override
{
if
(
!
header
.
is_protected
(
)
)
{
return
KEEP
;
}
uint16_t
protection_epoch
;
uint8_t
inner_content_type
;
DataBuffer
plaintext
;
TlsRecordHeader
out_header
;
if
(
!
Unprotect
(
header
record
&
protection_epoch
&
inner_content_type
&
plaintext
&
out_header
)
)
{
return
KEEP
;
}
if
(
plaintext
.
data
(
)
=
=
NULL
|
|
plaintext
.
len
(
)
=
=
0
)
{
return
KEEP
;
}
if
(
decrypting
(
)
&
&
inner_content_type
!
=
ssl_ct_ack
)
{
return
KEEP
;
}
uint8_t
ack_message_header_len
=
2
;
uint8_t
ack_message_len_one_ACK
=
16
;
uint64_t
acks
=
plaintext
.
len
(
)
-
ack_message_header_len
;
EXPECT_EQ
(
(
uint64_t
)
0
acks
%
ack_message_len_one_ACK
)
;
acks
=
acks
/
ack_message_len_one_ACK
;
if
(
plaintext
.
len
(
)
<
=
ack_message_header_len
+
offset_
+
(
acks
-
1
)
*
ack_message_len_one_ACK
)
{
return
KEEP
;
}
for
(
size_t
i
=
0
;
i
<
acks
;
i
+
+
)
{
plaintext
.
data
(
)
[
ack_message_header_len
+
offset_
+
i
*
ack_message_len_one_ACK
]
=
value_
;
}
DataBuffer
ciphertext
;
bool
ok
=
Protect
(
spec
(
protection_epoch
)
out_header
inner_content_type
plaintext
&
ciphertext
&
out_header
)
;
if
(
!
ok
)
{
return
KEEP
;
}
*
offset
=
out_header
.
Write
(
output
*
offset
ciphertext
)
;
return
CHANGE
;
}
protected
:
size_t
offset_
;
uint8_t
value_
;
}
;
TEST_F
(
TlsConnectDatagram13
DTLSKU_ModifACKEpoch
)
{
EnsureTlsSetup
(
)
;
uint8_t
byte
=
3
;
uint8_t
v
=
1
;
auto
filter
=
MakeTlsFilter
<
TLSACKDamager
>
(
server_
byte
v
)
;
filter
-
>
EnableDecryption
(
)
;
filter
-
>
Disable
(
)
;
Connect
(
)
;
CheckEpochs
(
3
3
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
server_
-
>
ReadBytes
(
)
;
filter
-
>
Enable
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
filter
-
>
Disable
(
)
;
client_
-
>
ReadBytes
(
)
;
server_
-
>
CheckEpochs
(
4
3
)
;
client_
-
>
CheckEpochs
(
3
3
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_ModifACKSeqNum
)
{
EnsureTlsSetup
(
)
;
uint8_t
byte
=
7
;
uint8_t
v
=
1
;
auto
filter
=
MakeTlsFilter
<
TLSACKDamager
>
(
server_
byte
+
8
v
)
;
filter
-
>
EnableDecryption
(
)
;
filter
-
>
Disable
(
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
server_
-
>
ReadBytes
(
)
;
filter
-
>
Enable
(
)
;
SSLInt_SendImmediateACK
(
server_
-
>
ssl_fd
(
)
)
;
filter
-
>
Disable
(
)
;
client_
-
>
ReadBytes
(
)
;
client_
-
>
ReadBytes
(
)
;
server_
-
>
CheckEpochs
(
4
3
)
;
client_
-
>
CheckEpochs
(
3
3
)
;
SendReceive
(
50
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_TooEarly_ClientCannotSendKeyUpdate
)
{
StartConnect
(
)
;
auto
filter
=
MakeTlsFilter
<
TLSRecordSaveAndDropNext
>
(
server_
)
;
filter
-
>
EnableDecryption
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
SECFailure
SSL_KeyUpdate
(
client_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKeyUpdateTooEarly_ServerCannotSendKeyUpdate
)
{
StartConnect
(
)
;
auto
filter
=
MakeTlsFilter
<
TLSRecordSaveAndDropNext
>
(
server_
)
;
filter
-
>
EnableDecryption
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
SECFailure
SSL_KeyUpdate
(
server_
-
>
ssl_fd
(
)
PR_FALSE
)
)
;
}
class
DTlsEncryptedHandshakeHeaderReplacer
:
public
TlsRecordFilter
{
public
:
DTlsEncryptedHandshakeHeaderReplacer
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
a
uint8_t
old_ct
uint8_t
new_ct
)
:
TlsRecordFilter
(
a
)
old_ct_
(
old_ct
)
new_ct_
(
new_ct
)
replaced_
(
false
)
{
}
protected
:
PacketFilter
:
:
Action
FilterRecord
(
const
TlsRecordHeader
&
header
const
DataBuffer
&
record
size_t
*
offset
DataBuffer
*
output
)
override
{
if
(
replaced_
)
return
KEEP
;
uint8_t
inner_content_type
;
DataBuffer
plaintext
;
uint16_t
protection_epoch
=
0
;
TlsRecordHeader
out_header
(
header
)
;
if
(
!
Unprotect
(
header
record
&
protection_epoch
&
inner_content_type
&
plaintext
&
out_header
)
)
{
return
KEEP
;
}
auto
&
protection_spec
=
spec
(
protection_epoch
)
;
uint32_t
msg_type
=
256
;
if
(
!
plaintext
.
Read
(
0
1
&
msg_type
)
|
|
msg_type
=
=
old_ct_
)
{
replaced_
=
true
;
plaintext
.
Write
(
0
new_ct_
1
)
;
}
uint64_t
seq_num
=
protection_spec
.
next_out_seqno
(
)
;
if
(
out_header
.
is_dtls
(
)
)
{
seq_num
|
=
out_header
.
sequence_number
(
)
&
(
0xffffULL
<
<
48
)
;
}
out_header
.
sequence_number
(
seq_num
)
;
DataBuffer
ciphertext
;
bool
rv
=
Protect
(
protection_spec
out_header
inner_content_type
plaintext
&
ciphertext
&
out_header
)
;
if
(
!
rv
)
{
return
KEEP
;
}
*
offset
=
out_header
.
Write
(
output
*
offset
ciphertext
)
;
return
CHANGE
;
}
private
:
uint8_t
old_ct_
;
uint8_t
new_ct_
;
bool
replaced_
;
}
;
TEST_F
(
TlsConnectDatagram13
DTLSKU_TooEarly_Client
)
{
StartConnect
(
)
;
auto
filter
=
MakeTlsFilter
<
DTlsEncryptedHandshakeHeaderReplacer
>
(
server_
kTlsHandshakeFinished
kTlsHandshakeKeyUpdate
)
;
filter
-
>
EnableDecryption
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
ExpectAlert
(
client_
kTlsAlertUnexpectedMessage
)
;
client_
-
>
Handshake
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_KEY_UPDATE
)
;
server_
-
>
Handshake
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_HANDSHAKE_UNEXPECTED_ALERT
)
;
}
TEST_F
(
TlsConnectDatagram13
DTLSKU_TooEarly_Server
)
{
StartConnect
(
)
;
auto
filter
=
MakeTlsFilter
<
DTlsEncryptedHandshakeHeaderReplacer
>
(
client_
kTlsHandshakeFinished
kTlsHandshakeKeyUpdate
)
;
filter
-
>
EnableDecryption
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
client_
-
>
Handshake
(
)
;
ExpectAlert
(
server_
kTlsAlertUnexpectedMessage
)
;
server_
-
>
Handshake
(
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RX_UNEXPECTED_KEY_UPDATE
)
;
client_
-
>
Handshake
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_HANDSHAKE_UNEXPECTED_ALERT
)
;
}
}
