#
include
"
secerr
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
scoped_ptrs
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
TEST_P
(
TlsConnectTls13
ZeroRtt
)
{
SetupForZeroRtt
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ZeroRttSendReceive
(
true
true
)
;
Handshake
(
)
;
ExpectEarlyDataAccepted
(
true
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectTls13
ZeroRttServerRejectByOption
)
{
SetupForZeroRtt
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ZeroRttSendReceive
(
true
false
)
;
Handshake
(
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectTls13
ZeroRttOptionsSetLate
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
ssl_kea_ecdh
ssl_auth_rsa_sign
)
;
Reset
(
)
;
server_
-
>
StartConnect
(
)
;
client_
-
>
StartConnect
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ZeroRttSendReceive
(
false
false
)
;
Handshake
(
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectTls13
ZeroRttServerForgetTicket
)
{
SetupForZeroRtt
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ClearServerCache
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_NONE
)
;
ZeroRttSendReceive
(
true
false
)
;
Handshake
(
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectTls13
ZeroRttServerOnly
)
{
ExpectResumption
(
RESUME_NONE
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
client_
-
>
StartConnect
(
)
;
server_
-
>
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
uint8_t
buf
[
100
]
;
PRInt32
rv
=
PR_Read
(
server_
-
>
ssl_fd
(
)
buf
sizeof
(
buf
)
)
;
EXPECT_EQ
(
SECFailure
rv
)
;
EXPECT_EQ
(
PR_WOULD_BLOCK_ERROR
PORT_GetError
(
)
)
;
Handshake
(
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ZeroRttAlpn
)
{
EnableAlpn
(
)
;
SetupForZeroRtt
(
)
;
EnableAlpn
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ExpectEarlyDataAccepted
(
true
)
;
ZeroRttSendReceive
(
true
true
[
this
]
(
)
{
client_
-
>
CheckAlpn
(
SSL_NEXT_PROTO_EARLY_VALUE
"
a
"
)
;
return
true
;
}
)
;
Handshake
(
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
CheckAlpn
(
"
a
"
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ZeroRttAlpnChangeServer
)
{
EnableAlpn
(
)
;
SetupForZeroRtt
(
)
;
static
const
uint8_t
client_alpn
[
]
=
{
0x01
0x61
0x01
0x62
}
;
static
const
uint8_t
server_alpn
[
]
=
{
0x01
0x62
}
;
client_
-
>
EnableAlpn
(
client_alpn
sizeof
(
client_alpn
)
)
;
server_
-
>
EnableAlpn
(
server_alpn
sizeof
(
server_alpn
)
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ZeroRttSendReceive
(
true
false
[
this
]
(
)
{
client_
-
>
CheckAlpn
(
SSL_NEXT_PROTO_EARLY_VALUE
"
a
"
)
;
return
true
;
}
)
;
Handshake
(
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
CheckAlpn
(
"
b
"
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ZeroRttNoAlpnServer
)
{
EnableAlpn
(
)
;
SetupForZeroRtt
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
EnableAlpn
(
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ZeroRttSendReceive
(
true
true
[
this
]
(
)
{
PRUint8
b
[
]
=
{
'
b
'
}
;
client_
-
>
CheckAlpn
(
SSL_NEXT_PROTO_EARLY_VALUE
"
a
"
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_Set0RttAlpn
(
client_
-
>
ssl_fd
(
)
b
sizeof
(
b
)
)
)
;
client_
-
>
CheckAlpn
(
SSL_NEXT_PROTO_EARLY_VALUE
"
b
"
)
;
ExpectAlert
(
client_
kTlsAlertIllegalParameter
)
;
return
true
;
}
)
;
Handshake
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_NEXT_PROTOCOL_DATA_INVALID
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_ILLEGAL_PARAMETER_ALERT
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ZeroRttNoAlpnClient
)
{
SetupForZeroRtt
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ZeroRttSendReceive
(
true
true
[
this
]
(
)
{
PRUint8
b
[
]
=
{
'
b
'
}
;
EXPECT_EQ
(
SECSuccess
SSLInt_Set0RttAlpn
(
client_
-
>
ssl_fd
(
)
b
1
)
)
;
client_
-
>
CheckAlpn
(
SSL_NEXT_PROTO_EARLY_VALUE
"
b
"
)
;
ExpectAlert
(
client_
kTlsAlertIllegalParameter
)
;
return
true
;
}
)
;
Handshake
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_NEXT_PROTOCOL_DATA_INVALID
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_ILLEGAL_PARAMETER_ALERT
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ZeroRttAlpnChangeBoth
)
{
EnableAlpn
(
)
;
SetupForZeroRtt
(
)
;
static
const
uint8_t
alpn
[
]
=
{
0x01
0x62
}
;
EnableAlpn
(
alpn
sizeof
(
alpn
)
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ZeroRttSendReceive
(
true
false
[
this
]
(
)
{
client_
-
>
CheckAlpn
(
SSL_NEXT_PROTO_NO_SUPPORT
)
;
return
false
;
}
)
;
Handshake
(
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
CheckAlpn
(
"
b
"
)
;
}
TEST_P
(
TlsConnectTls13
TestTls13ZeroRttDowngrade
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_2
)
;
client_
-
>
StartConnect
(
)
;
server_
-
>
StartConnect
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
client_
-
>
ExpectSendAlert
(
kTlsAlertIllegalParameter
)
;
if
(
variant_
=
=
ssl_variant_stream
)
{
server_
-
>
ExpectSendAlert
(
kTlsAlertUnexpectedMessage
)
;
}
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
ASSERT_TRUE_WAIT
(
(
client_
-
>
error_code
(
)
=
=
SSL_ERROR_DOWNGRADE_WITH_EARLY_DATA
)
2000
)
;
if
(
variant_
=
=
ssl_variant_stream
)
{
ASSERT_TRUE_WAIT
(
(
server_
-
>
error_code
(
)
=
=
SSL_ERROR_RX_UNEXPECTED_APPLICATION_DATA
)
2000
)
;
}
}
TEST_P
(
TlsConnectTls13
TestTls13ZeroRttDowngradeEarlyData
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_2
SSL_LIBRARY_VERSION_TLS_1_2
)
;
client_
-
>
StartConnect
(
)
;
server_
-
>
StartConnect
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
ZeroRttSendReceive
(
true
false
[
this
]
(
)
{
client_
-
>
ExpectSendAlert
(
kTlsAlertIllegalParameter
)
;
if
(
variant_
=
=
ssl_variant_stream
)
{
server_
-
>
ExpectSendAlert
(
kTlsAlertUnexpectedMessage
)
;
}
return
true
;
}
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
ASSERT_TRUE_WAIT
(
(
client_
-
>
error_code
(
)
=
=
SSL_ERROR_DOWNGRADE_WITH_EARLY_DATA
)
2000
)
;
if
(
variant_
=
=
ssl_variant_stream
)
{
ASSERT_TRUE_WAIT
(
(
server_
-
>
error_code
(
)
=
=
SSL_ERROR_RX_UNEXPECTED_APPLICATION_DATA
)
2000
)
;
}
}
static
void
CheckEarlyDataLimit
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
agent
size_t
expected_size
)
{
SSLPreliminaryChannelInfo
preinfo
;
SECStatus
rv
=
SSL_GetPreliminaryChannelInfo
(
agent
-
>
ssl_fd
(
)
&
preinfo
sizeof
(
preinfo
)
)
;
EXPECT_EQ
(
SECSuccess
rv
)
;
EXPECT_EQ
(
expected_size
static_cast
<
size_t
>
(
preinfo
.
maxEarlyDataSize
)
)
;
}
TEST_P
(
TlsConnectTls13
SendTooMuchEarlyData
)
{
const
char
*
big_message
=
"
0123456789abcdef
"
;
const
size_t
short_size
=
strlen
(
big_message
)
-
1
;
const
PRInt32
short_length
=
static_cast
<
PRInt32
>
(
short_size
)
;
SSLInt_SetMaxEarlyDataSize
(
static_cast
<
PRUint32
>
(
short_size
)
)
;
SetupForZeroRtt
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ExpectAlert
(
client_
kTlsAlertEndOfEarlyData
)
;
client_
-
>
Handshake
(
)
;
CheckEarlyDataLimit
(
client_
short_size
)
;
PRInt32
sent
;
if
(
variant_
=
=
ssl_variant_stream
)
{
sent
=
PR_Write
(
client_
-
>
ssl_fd
(
)
big_message
static_cast
<
PRInt32
>
(
strlen
(
big_message
)
)
)
;
}
else
{
sent
=
PR_Write
(
client_
-
>
ssl_fd
(
)
big_message
static_cast
<
PRInt32
>
(
strlen
(
big_message
)
)
)
;
EXPECT_GE
(
0
sent
)
;
EXPECT_EQ
(
PR_WOULD_BLOCK_ERROR
PORT_GetError
(
)
)
;
sent
=
PR_Write
(
client_
-
>
ssl_fd
(
)
big_message
short_length
)
;
}
EXPECT_EQ
(
short_length
sent
)
;
sent
=
PR_Write
(
client_
-
>
ssl_fd
(
)
big_message
1
)
;
EXPECT_GE
(
0
sent
)
;
EXPECT_EQ
(
PR_WOULD_BLOCK_ERROR
PORT_GetError
(
)
)
;
server_
-
>
Handshake
(
)
;
CheckEarlyDataLimit
(
server_
short_size
)
;
std
:
:
vector
<
uint8_t
>
buf
(
short_size
+
1
)
;
PRInt32
read
=
PR_Read
(
server_
-
>
ssl_fd
(
)
buf
.
data
(
)
buf
.
capacity
(
)
)
;
EXPECT_EQ
(
short_length
read
)
;
EXPECT_EQ
(
0
memcmp
(
big_message
buf
.
data
(
)
short_size
)
)
;
read
=
PR_Read
(
server_
-
>
ssl_fd
(
)
buf
.
data
(
)
buf
.
capacity
(
)
)
;
EXPECT_EQ
(
SECFailure
read
)
;
EXPECT_EQ
(
PR_WOULD_BLOCK_ERROR
PORT_GetError
(
)
)
;
Handshake
(
)
;
ExpectEarlyDataAccepted
(
true
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectTls13
ReceiveTooMuchEarlyData
)
{
const
size_t
limit
=
5
;
SSLInt_SetMaxEarlyDataSize
(
limit
)
;
SetupForZeroRtt
(
)
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
client_
-
>
ExpectSendAlert
(
kTlsAlertEndOfEarlyData
)
;
client_
-
>
Handshake
(
)
;
CheckEarlyDataLimit
(
client_
limit
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_SetSocketMaxEarlyDataSize
(
client_
-
>
ssl_fd
(
)
1000
)
)
;
const
char
*
message
=
"
0123456789abcdef
"
;
const
PRInt32
message_len
=
static_cast
<
PRInt32
>
(
strlen
(
message
)
)
;
EXPECT_EQ
(
message_len
PR_Write
(
client_
-
>
ssl_fd
(
)
message
message_len
)
)
;
if
(
variant_
=
=
ssl_variant_stream
)
{
ExpectAlert
(
server_
kTlsAlertUnexpectedMessage
)
;
}
server_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
CheckEarlyDataLimit
(
server_
limit
)
;
std
:
:
vector
<
uint8_t
>
buf
(
strlen
(
message
)
+
1
)
;
EXPECT_GT
(
0
PR_Read
(
server_
-
>
ssl_fd
(
)
buf
.
data
(
)
buf
.
capacity
(
)
)
)
;
if
(
variant_
=
=
ssl_variant_stream
)
{
server_
-
>
CheckErrorCode
(
SSL_ERROR_TOO_MUCH_EARLY_DATA
)
;
}
client_
-
>
Handshake
(
)
;
client_
-
>
Handshake
(
)
;
if
(
variant_
=
=
ssl_variant_stream
)
{
client_
-
>
CheckErrorCode
(
SSL_ERROR_HANDSHAKE_UNEXPECTED_ALERT
)
;
}
}
}
