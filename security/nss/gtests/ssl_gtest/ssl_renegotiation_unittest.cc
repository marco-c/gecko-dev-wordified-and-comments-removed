#
include
<
functional
>
#
include
<
memory
>
#
include
"
secerr
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
tls_connect
.
h
"
namespace
nss_test
{
TEST_P
(
TlsConnectStreamPre13
RenegotiateClient
)
{
Connect
(
)
;
server_
-
>
PrepareForRenegotiate
(
)
;
client_
-
>
StartRenegotiate
(
)
;
Handshake
(
)
;
CheckConnected
(
)
;
}
TEST_P
(
TlsConnectStreamPre13
RenegotiateServer
)
{
Connect
(
)
;
client_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
StartRenegotiate
(
)
;
Handshake
(
)
;
CheckConnected
(
)
;
}
TEST_P
(
TlsConnectStreamPre13
RenegotiateRandoms
)
{
SSL3Random
crand1
crand2
srand1
srand2
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_GetHandshakeRandoms
(
client_
-
>
ssl_fd
(
)
crand1
srand1
)
)
;
client_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
StartRenegotiate
(
)
;
Handshake
(
)
;
CheckConnected
(
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_GetHandshakeRandoms
(
client_
-
>
ssl_fd
(
)
crand2
srand2
)
)
;
EXPECT_NE
(
0
memcmp
(
crand1
crand2
sizeof
(
SSL3Random
)
)
)
;
EXPECT_NE
(
0
memcmp
(
srand1
srand2
sizeof
(
SSL3Random
)
)
)
;
}
TEST_F
(
TlsConnectTest
RenegotiationConfigTls13
)
{
EnsureTlsSetup
(
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
server_
-
>
SetOption
(
SSL_ENABLE_RENEGOTIATION
SSL_RENEGOTIATE_UNRESTRICTED
)
;
server_
-
>
SetOption
(
SSL_REQUIRE_SAFE_NEGOTIATION
PR_TRUE
)
;
Connect
(
)
;
SendReceive
(
)
;
CheckKeys
(
)
;
}
TEST_P
(
TlsConnectStream
ConnectTls10AndServerRenegotiateHigher
)
{
if
(
version_
=
=
SSL_LIBRARY_VERSION_TLS_1_0
)
{
GTEST_SKIP
(
)
;
}
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
version_
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
SSL_LIBRARY_VERSION_TLS_1_0
)
;
uint16_t
test_version
=
version_
;
version_
=
SSL_LIBRARY_VERSION_TLS_1_0
;
Connect
(
)
;
client_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
test_version
)
;
server_
-
>
ResetPreliminaryInfo
(
)
;
server_
-
>
StartRenegotiate
(
)
;
if
(
test_version
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
ExpectAlert
(
server_
kTlsAlertUnexpectedMessage
)
;
}
else
{
ExpectAlert
(
server_
kTlsAlertProtocolVersion
)
;
}
Handshake
(
)
;
if
(
test_version
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
client_
-
>
CheckErrorCode
(
SSL_ERROR_HANDSHAKE_UNEXPECTED_ALERT
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RENEGOTIATION_NOT_ALLOWED
)
;
}
else
{
client_
-
>
CheckErrorCode
(
SSL_ERROR_PROTOCOL_VERSION_ALERT
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_UNSUPPORTED_VERSION
)
;
}
}
TEST_P
(
TlsConnectStream
ConnectTls10AndClientRenegotiateHigher
)
{
if
(
version_
=
=
SSL_LIBRARY_VERSION_TLS_1_0
)
{
GTEST_SKIP
(
)
;
}
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
version_
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
SSL_LIBRARY_VERSION_TLS_1_0
)
;
uint16_t
test_version
=
version_
;
version_
=
SSL_LIBRARY_VERSION_TLS_1_0
;
Connect
(
)
;
server_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
test_version
)
;
server_
-
>
ResetPreliminaryInfo
(
)
;
client_
-
>
StartRenegotiate
(
)
;
if
(
test_version
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
ExpectAlert
(
server_
kTlsAlertUnexpectedMessage
)
;
}
else
{
ExpectAlert
(
server_
kTlsAlertProtocolVersion
)
;
}
Handshake
(
)
;
if
(
test_version
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
client_
-
>
CheckErrorCode
(
SSL_ERROR_HANDSHAKE_UNEXPECTED_ALERT
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_RENEGOTIATION_NOT_ALLOWED
)
;
}
else
{
client_
-
>
CheckErrorCode
(
SSL_ERROR_PROTOCOL_VERSION_ALERT
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_UNSUPPORTED_VERSION
)
;
}
}
TEST_P
(
TlsConnectStream
ConnectAndServerRenegotiateLower
)
{
if
(
version_
=
=
SSL_LIBRARY_VERSION_TLS_1_0
)
{
GTEST_SKIP
(
)
;
}
Connect
(
)
;
client_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
PrepareForRenegotiate
(
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
version_
)
;
server_
-
>
ResetPreliminaryInfo
(
)
;
SECStatus
rv
=
SSL_ReHandshake
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
;
if
(
version_
>
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
EXPECT_EQ
(
SECFailure
rv
)
;
return
;
}
ASSERT_EQ
(
SECSuccess
rv
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
SSL_LIBRARY_VERSION_TLS_1_0
)
;
ExpectAlert
(
server_
kTlsAlertProtocolVersion
)
;
Handshake
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_PROTOCOL_VERSION_ALERT
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_UNSUPPORTED_VERSION
)
;
}
TEST_P
(
TlsConnectStream
ConnectAndServerWontRenegotiateLower
)
{
if
(
version_
=
=
SSL_LIBRARY_VERSION_TLS_1_0
)
{
GTEST_SKIP
(
)
;
}
Connect
(
)
;
client_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
PrepareForRenegotiate
(
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
version_
)
;
server_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
SSL_LIBRARY_VERSION_TLS_1_0
)
;
server_
-
>
ResetPreliminaryInfo
(
)
;
EXPECT_EQ
(
SECFailure
SSL_ReHandshake
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
}
TEST_P
(
TlsConnectStream
ConnectAndClientWontRenegotiateLower
)
{
if
(
version_
=
=
SSL_LIBRARY_VERSION_TLS_1_0
)
{
GTEST_SKIP
(
)
;
}
Connect
(
)
;
client_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
PrepareForRenegotiate
(
)
;
server_
-
>
ResetPreliminaryInfo
(
)
;
client_
-
>
SetVersionRange
(
SSL_LIBRARY_VERSION_TLS_1_0
SSL_LIBRARY_VERSION_TLS_1_0
)
;
EXPECT_EQ
(
SECFailure
SSL_ReHandshake
(
client_
-
>
ssl_fd
(
)
PR_TRUE
)
)
;
}
TEST_F
(
TlsConnectTest
Tls13RejectsRehandshakeClient
)
{
EnsureTlsSetup
(
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
SECStatus
rv
=
SSL_ReHandshake
(
client_
-
>
ssl_fd
(
)
PR_TRUE
)
;
EXPECT_EQ
(
SECFailure
rv
)
;
EXPECT_EQ
(
SSL_ERROR_RENEGOTIATION_NOT_ALLOWED
PORT_GetError
(
)
)
;
}
TEST_F
(
TlsConnectTest
Tls13RejectsRehandshakeServer
)
{
EnsureTlsSetup
(
)
;
ConfigureVersion
(
SSL_LIBRARY_VERSION_TLS_1_3
)
;
Connect
(
)
;
SECStatus
rv
=
SSL_ReHandshake
(
server_
-
>
ssl_fd
(
)
PR_TRUE
)
;
EXPECT_EQ
(
SECFailure
rv
)
;
EXPECT_EQ
(
SSL_ERROR_RENEGOTIATION_NOT_ALLOWED
PORT_GetError
(
)
)
;
}
}
