#
ifndef
test_io_h_
#
define
test_io_h_
#
include
<
string
.
h
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
ostream
>
#
include
<
queue
>
#
include
<
string
>
#
include
"
databuffer
.
h
"
#
include
"
dummy_io
.
h
"
#
include
"
prio
.
h
"
#
include
"
scoped_ptrs
.
h
"
namespace
nss_test
{
class
DataBuffer
;
class
DummyPrSocket
;
class
PacketFilter
{
public
:
enum
Action
{
KEEP
CHANGE
DROP
}
;
virtual
~
PacketFilter
(
)
{
}
virtual
Action
Filter
(
const
DataBuffer
&
input
DataBuffer
*
output
)
=
0
;
}
;
enum
Mode
{
STREAM
DGRAM
}
;
inline
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
Mode
m
)
{
return
os
<
<
(
(
m
=
=
STREAM
)
?
"
TLS
"
:
"
DTLS
"
)
;
}
class
DummyPrSocket
:
public
DummyIOLayerMethods
{
public
:
DummyPrSocket
(
const
std
:
:
string
&
name
Mode
mode
)
:
name_
(
name
)
mode_
(
mode
)
peer_
(
)
input_
(
)
filter_
(
nullptr
)
writeable_
(
true
)
{
}
virtual
~
DummyPrSocket
(
)
{
}
ScopedPRFileDesc
CreateFD
(
)
;
std
:
:
weak_ptr
<
DummyPrSocket
>
&
peer
(
)
{
return
peer_
;
}
void
SetPeer
(
const
std
:
:
shared_ptr
<
DummyPrSocket
>
&
peer
)
{
peer_
=
peer
;
}
void
SetPacketFilter
(
std
:
:
shared_ptr
<
PacketFilter
>
filter
)
;
void
Reset
(
)
;
void
PacketReceived
(
const
DataBuffer
&
data
)
;
int32_t
Read
(
PRFileDesc
*
f
void
*
data
int32_t
len
)
override
;
int32_t
Recv
(
PRFileDesc
*
f
void
*
buf
int32_t
buflen
int32_t
flags
PRIntervalTime
to
)
override
;
int32_t
Write
(
PRFileDesc
*
f
const
void
*
buf
int32_t
length
)
override
;
void
CloseWrites
(
)
{
writeable_
=
false
;
}
Mode
mode
(
)
const
{
return
mode_
;
}
bool
readable
(
)
const
{
return
!
input_
.
empty
(
)
;
}
private
:
class
Packet
:
public
DataBuffer
{
public
:
Packet
(
const
DataBuffer
&
buf
)
:
DataBuffer
(
buf
)
offset_
(
0
)
{
}
void
Advance
(
size_t
delta
)
{
PR_ASSERT
(
offset_
+
delta
<
=
len
(
)
)
;
offset_
=
std
:
:
min
(
len
(
)
offset_
+
delta
)
;
}
size_t
offset
(
)
const
{
return
offset_
;
}
size_t
remaining
(
)
const
{
return
len
(
)
-
offset_
;
}
private
:
size_t
offset_
;
}
;
const
std
:
:
string
name_
;
Mode
mode_
;
std
:
:
weak_ptr
<
DummyPrSocket
>
peer_
;
std
:
:
queue
<
Packet
>
input_
;
std
:
:
shared_ptr
<
PacketFilter
>
filter_
;
bool
writeable_
;
}
;
class
PollTarget
{
}
;
enum
Event
{
READABLE_EVENT
TIMER_EVENT
}
;
typedef
void
(
*
PollCallback
)
(
PollTarget
*
Event
)
;
class
Poller
{
public
:
static
Poller
*
Instance
(
)
;
static
void
Shutdown
(
)
;
class
Timer
{
public
:
Timer
(
PRTime
deadline
PollTarget
*
target
PollCallback
callback
)
:
deadline_
(
deadline
)
target_
(
target
)
callback_
(
callback
)
{
}
void
Cancel
(
)
{
callback_
=
nullptr
;
}
PRTime
deadline_
;
PollTarget
*
target_
;
PollCallback
callback_
;
}
;
void
Wait
(
Event
event
std
:
:
shared_ptr
<
DummyPrSocket
>
&
adapter
PollTarget
*
target
PollCallback
cb
)
;
void
Cancel
(
Event
event
std
:
:
shared_ptr
<
DummyPrSocket
>
&
adapter
)
;
void
SetTimer
(
uint32_t
timer_ms
PollTarget
*
target
PollCallback
cb
std
:
:
shared_ptr
<
Timer
>
*
handle
)
;
bool
Poll
(
)
;
private
:
Poller
(
)
:
waiters_
(
)
timers_
(
)
{
}
~
Poller
(
)
{
}
class
Waiter
{
public
:
Waiter
(
std
:
:
shared_ptr
<
DummyPrSocket
>
io
)
:
io_
(
io
)
{
memset
(
&
targets_
[
0
]
0
sizeof
(
targets_
)
)
;
memset
(
&
callbacks_
[
0
]
0
sizeof
(
callbacks_
)
)
;
}
void
WaitFor
(
Event
event
PollCallback
callback
)
;
std
:
:
shared_ptr
<
DummyPrSocket
>
io_
;
PollTarget
*
targets_
[
TIMER_EVENT
]
;
PollCallback
callbacks_
[
TIMER_EVENT
]
;
}
;
class
TimerComparator
{
public
:
bool
operator
(
)
(
const
std
:
:
shared_ptr
<
Timer
>
lhs
const
std
:
:
shared_ptr
<
Timer
>
rhs
)
{
return
lhs
-
>
deadline_
>
rhs
-
>
deadline_
;
}
}
;
static
Poller
*
instance
;
std
:
:
map
<
std
:
:
shared_ptr
<
DummyPrSocket
>
std
:
:
unique_ptr
<
Waiter
>
>
waiters_
;
std
:
:
priority_queue
<
std
:
:
shared_ptr
<
Timer
>
std
:
:
vector
<
std
:
:
shared_ptr
<
Timer
>
>
TimerComparator
>
timers_
;
}
;
}
#
endif
