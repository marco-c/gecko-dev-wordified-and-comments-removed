#
include
"
secerr
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslexp
.
h
"
extern
"
C
"
{
#
include
"
libssl_internals
.
h
"
}
#
include
"
gtest_utils
.
h
"
#
include
"
scoped_ptrs
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
TEST_P
(
TlsConnectDatagramPre13
DropClientFirstFlightOnce
)
{
client_
-
>
SetFilter
(
std
:
:
make_shared
<
SelectiveDropFilter
>
(
0x1
)
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectDatagramPre13
DropServerFirstFlightOnce
)
{
server_
-
>
SetFilter
(
std
:
:
make_shared
<
SelectiveDropFilter
>
(
0x1
)
)
;
Connect
(
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectDatagramPre13
DropAllFirstTransmissions
)
{
client_
-
>
SetFilter
(
std
:
:
make_shared
<
SelectiveDropFilter
>
(
0x15
)
)
;
server_
-
>
SetFilter
(
std
:
:
make_shared
<
SelectiveDropFilter
>
(
0x5
)
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectDatagramPre13
DropServerFirstFlightThrice
)
{
server_
-
>
SetFilter
(
std
:
:
make_shared
<
SelectiveDropFilter
>
(
0x7
)
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectDatagramPre13
DropClientSecondFlightOnce
)
{
client_
-
>
SetFilter
(
std
:
:
make_shared
<
SelectiveDropFilter
>
(
0x2
)
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectDatagramPre13
DropClientSecondFlightThrice
)
{
client_
-
>
SetFilter
(
std
:
:
make_shared
<
SelectiveDropFilter
>
(
0xe
)
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectDatagramPre13
DropServerSecondFlightThrice
)
{
server_
-
>
SetFilter
(
std
:
:
make_shared
<
SelectiveDropFilter
>
(
0xe
)
)
;
Connect
(
)
;
}
class
TlsDropDatagram13
:
public
TlsConnectDatagram13
{
public
:
TlsDropDatagram13
(
)
:
client_filters_
(
)
server_filters_
(
)
expected_client_acks_
(
0
)
expected_server_acks_
(
1
)
{
}
void
SetUp
(
)
override
{
TlsConnectDatagram13
:
:
SetUp
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
SetFilters
(
)
;
}
void
SetFilters
(
)
{
EnsureTlsSetup
(
)
;
client_filters_
.
Init
(
client_
)
;
server_filters_
.
Init
(
server_
)
;
}
void
HandshakeAndAck
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
agent
)
{
agent
-
>
Handshake
(
)
;
ShiftDtlsTimers
(
)
;
agent
-
>
Handshake
(
)
;
}
void
ShrinkPostServerHelloMtu
(
)
{
ASSERT_EQ
(
SECSuccess
SSL_InstallExtensionHooks
(
server_
-
>
ssl_fd
(
)
1
[
]
(
PRFileDesc
*
fd
SSLHandshakeType
message
PRUint8
*
data
unsigned
int
*
len
unsigned
int
maxLen
void
*
arg
)
-
>
PRBool
{
SSLInt_SetMTU
(
fd
500
)
;
return
PR_FALSE
;
}
nullptr
[
]
(
PRFileDesc
*
fd
SSLHandshakeType
message
const
PRUint8
*
data
unsigned
int
len
SSLAlertDescription
*
alert
void
*
arg
)
-
>
SECStatus
{
return
SECSuccess
;
}
nullptr
)
)
;
}
protected
:
class
DropAckChain
{
public
:
DropAckChain
(
)
:
records_
(
nullptr
)
ack_
(
nullptr
)
drop_
(
nullptr
)
chain_
(
nullptr
)
{
}
void
Init
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
agent
)
{
records_
=
std
:
:
make_shared
<
TlsRecordRecorder
>
(
agent
)
;
ack_
=
std
:
:
make_shared
<
TlsRecordRecorder
>
(
agent
content_ack
)
;
ack_
-
>
EnableDecryption
(
)
;
drop_
=
std
:
:
make_shared
<
SelectiveRecordDropFilter
>
(
agent
0
false
)
;
chain_
=
std
:
:
make_shared
<
ChainedPacketFilter
>
(
ChainedPacketFilterInit
(
{
records_
ack_
drop_
}
)
)
;
agent
-
>
SetFilter
(
chain_
)
;
}
const
TlsRecord
&
record
(
size_t
i
)
const
{
return
records_
-
>
record
(
i
)
;
}
std
:
:
shared_ptr
<
TlsRecordRecorder
>
records_
;
std
:
:
shared_ptr
<
TlsRecordRecorder
>
ack_
;
std
:
:
shared_ptr
<
SelectiveRecordDropFilter
>
drop_
;
std
:
:
shared_ptr
<
PacketFilter
>
chain_
;
}
;
void
CheckAcks
(
const
DropAckChain
&
chain
size_t
index
std
:
:
vector
<
uint64_t
>
acks
)
{
const
DataBuffer
&
buf
=
chain
.
ack_
-
>
record
(
index
)
.
buffer
;
size_t
offset
=
0
;
EXPECT_EQ
(
acks
.
size
(
)
*
8
buf
.
len
(
)
)
;
if
(
(
acks
.
size
(
)
*
8
)
!
=
buf
.
len
(
)
)
{
while
(
offset
<
buf
.
len
(
)
)
{
uint64_t
ack
;
ASSERT_TRUE
(
buf
.
Read
(
offset
8
&
ack
)
)
;
offset
+
=
8
;
std
:
:
cerr
<
<
"
Ack
=
0x
"
<
<
std
:
:
hex
<
<
ack
<
<
std
:
:
dec
<
<
std
:
:
endl
;
}
return
;
}
for
(
size_t
i
=
0
;
i
<
acks
.
size
(
)
;
+
+
i
)
{
uint64_t
a
=
acks
[
i
]
;
uint64_t
ack
;
ASSERT_TRUE
(
buf
.
Read
(
offset
8
&
ack
)
)
;
offset
+
=
8
;
if
(
a
!
=
ack
)
{
ADD_FAILURE
(
)
<
<
"
Wrong
ack
"
<
<
i
<
<
"
expected
=
0x
"
<
<
std
:
:
hex
<
<
a
<
<
"
got
=
0x
"
<
<
ack
<
<
std
:
:
dec
;
}
}
}
void
CheckedHandshakeSendReceive
(
)
{
Handshake
(
)
;
CheckPostHandshake
(
)
;
}
void
CheckPostHandshake
(
)
{
CheckConnected
(
)
;
SendReceive
(
)
;
EXPECT_EQ
(
expected_client_acks_
client_filters_
.
ack_
-
>
count
(
)
)
;
EXPECT_EQ
(
expected_server_acks_
server_filters_
.
ack_
-
>
count
(
)
)
;
}
protected
:
DropAckChain
client_filters_
;
DropAckChain
server_filters_
;
size_t
expected_client_acks_
;
size_t
expected_server_acks_
;
}
;
TEST_F
(
TlsDropDatagram13
DropClientFirstFlightOnce
)
{
client_filters_
.
drop_
-
>
Reset
(
{
0
}
)
;
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
CheckedHandshakeSendReceive
(
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
}
TEST_F
(
TlsDropDatagram13
DropServerFirstFlightOnce
)
{
server_filters_
.
drop_
-
>
Reset
(
0xff
)
;
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
server_filters_
.
drop_
-
>
Disable
(
)
;
CheckedHandshakeSendReceive
(
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
}
TEST_F
(
TlsDropDatagram13
DropServerFirstRecordOnce
)
{
server_filters_
.
drop_
-
>
Reset
(
{
0
}
)
;
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
Handshake
(
)
;
CheckedHandshakeSendReceive
(
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
}
TEST_F
(
TlsDropDatagram13
DropServerSecondRecordOnce
)
{
server_filters_
.
drop_
-
>
Reset
(
{
1
}
)
;
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
HandshakeAndAck
(
client_
)
;
expected_client_acks_
=
1
;
CheckedHandshakeSendReceive
(
)
;
CheckAcks
(
client_filters_
0
{
0
}
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
}
TEST_F
(
TlsDropDatagram13
DropServerAckOnce
)
{
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
server_filters_
.
drop_
-
>
Reset
(
{
0
}
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTED
client_
-
>
state
(
)
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTED
server_
-
>
state
(
)
)
;
ShiftDtlsTimers
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
uint8_t
buf
[
1
]
;
PRInt32
rv
=
PR_Read
(
client_
-
>
ssl_fd
(
)
buf
sizeof
(
buf
)
)
;
expected_server_acks_
=
2
;
EXPECT_GT
(
0
rv
)
;
EXPECT_EQ
(
PR_WOULD_BLOCK_ERROR
PORT_GetError
(
)
)
;
CheckPostHandshake
(
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
CheckAcks
(
server_filters_
1
{
0x0002000000000000ULL
}
)
;
}
TEST_F
(
TlsDropDatagram13
DropClientCertVerify
)
{
StartConnect
(
)
;
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
client_filters_
.
drop_
-
>
Reset
(
{
1
}
)
;
expected_server_acks_
=
2
;
CheckedHandshakeSendReceive
(
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
CheckAcks
(
server_filters_
1
{
0x0002000000000000ULL
0x0002000000000003ULL
0x0002000000000004ULL
}
)
;
}
TEST_F
(
TlsDropDatagram13
DropFirstHalfOfServerCertificate
)
{
server_filters_
.
drop_
-
>
Reset
(
{
2
}
)
;
StartConnect
(
)
;
ShrinkPostServerHelloMtu
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
6UL
server_filters_
.
records_
-
>
count
(
)
)
;
size_t
ct1_size
=
server_filters_
.
record
(
2
)
.
buffer
.
len
(
)
;
server_filters_
.
records_
-
>
Clear
(
)
;
expected_client_acks_
=
1
;
HandshakeAndAck
(
client_
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
3UL
server_filters_
.
records_
-
>
count
(
)
)
;
EXPECT_EQ
(
ct1_size
server_filters_
.
record
(
0
)
.
buffer
.
len
(
)
)
;
CheckedHandshakeSendReceive
(
)
;
CheckAcks
(
client_filters_
0
{
0
0x0002000000000000ULL
0x0002000000000002ULL
}
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
}
TEST_F
(
TlsDropDatagram13
DropSecondHalfOfServerCertificate
)
{
server_filters_
.
drop_
-
>
Reset
(
{
3
}
)
;
StartConnect
(
)
;
ShrinkPostServerHelloMtu
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
6UL
server_filters_
.
records_
-
>
count
(
)
)
;
size_t
ct1_size
=
server_filters_
.
record
(
3
)
.
buffer
.
len
(
)
;
server_filters_
.
records_
-
>
Clear
(
)
;
expected_client_acks_
=
1
;
HandshakeAndAck
(
client_
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
3UL
server_filters_
.
records_
-
>
count
(
)
)
;
EXPECT_EQ
(
ct1_size
server_filters_
.
record
(
0
)
.
buffer
.
len
(
)
)
;
CheckedHandshakeSendReceive
(
)
;
CheckAcks
(
client_filters_
0
{
0
0x0002000000000000ULL
0x0002000000000001ULL
}
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
}
class
TlsFragmentationAndRecoveryTest
:
public
TlsDropDatagram13
{
public
:
TlsFragmentationAndRecoveryTest
(
)
:
cert_len_
(
0
)
{
}
protected
:
void
RunTest
(
size_t
dropped_half
)
{
FirstFlightDropCertificate
(
)
;
SecondAttemptDropHalf
(
dropped_half
)
;
size_t
dropped_half_size
=
server_record_len
(
dropped_half
)
;
size_t
second_flight_count
=
server_filters_
.
records_
-
>
count
(
)
;
ThirdAttemptDropMiddle
(
)
;
size_t
repaired_third_size
=
server_record_len
(
(
dropped_half
=
=
0
)
?
0
:
2
)
;
size_t
third_flight_count
=
server_filters_
.
records_
-
>
count
(
)
;
AckAndCompleteRetransmission
(
)
;
size_t
final_server_flight_count
=
server_filters_
.
records_
-
>
count
(
)
;
EXPECT_LE
(
3U
final_server_flight_count
)
;
CheckSizeOfSixth
(
dropped_half_size
repaired_third_size
)
;
SendDelayedAck
(
)
;
EXPECT_EQ
(
final_server_flight_count
server_filters_
.
records_
-
>
count
(
)
)
;
CheckSizeOfSixth
(
dropped_half_size
repaired_third_size
)
;
CompleteHandshake
(
final_server_flight_count
)
;
std
:
:
vector
<
uint64_t
>
client_acks
=
{
0
0x0002000000000000ULL
}
;
CheckAcks
(
client_filters_
0
client_acks
)
;
client_acks
.
push_back
(
0x0002000000000000ULL
+
second_flight_count
+
~
dropped_half
%
2
)
;
CheckAcks
(
client_filters_
1
client_acks
)
;
client_acks
.
push_back
(
0x0002000000000000ULL
+
second_flight_count
+
third_flight_count
-
1
)
;
client_acks
.
push_back
(
0x0002000000000000ULL
+
second_flight_count
+
third_flight_count
+
1
)
;
CheckAcks
(
client_filters_
2
client_acks
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
}
private
:
void
FirstFlightDropCertificate
(
)
{
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
server_filters_
.
drop_
-
>
Reset
(
1
<
<
2
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
5U
server_filters_
.
records_
-
>
count
(
)
)
;
cert_len_
=
server_filters_
.
records_
-
>
record
(
2
)
.
buffer
.
len
(
)
;
HandshakeAndAck
(
client_
)
;
EXPECT_EQ
(
2U
client_filters_
.
records_
-
>
count
(
)
)
;
}
void
SecondAttemptDropHalf
(
size_t
dropped_half
)
{
ASSERT_LE
(
0U
dropped_half
)
;
ASSERT_GT
(
2U
dropped_half
)
;
server_filters_
.
records_
-
>
Clear
(
)
;
server_filters_
.
drop_
-
>
Reset
(
{
dropped_half
}
)
;
SplitServerMtu
(
2
)
;
server_
-
>
Handshake
(
)
;
EXPECT_LE
(
4U
server_filters_
.
records_
-
>
count
(
)
)
;
client_filters_
.
drop_
-
>
Reset
(
{
0
}
)
;
HandshakeAndAck
(
client_
)
;
EXPECT_EQ
(
3U
client_filters_
.
records_
-
>
count
(
)
)
;
}
void
ThirdAttemptDropMiddle
(
)
{
server_filters_
.
records_
-
>
Clear
(
)
;
server_filters_
.
drop_
-
>
Reset
(
{
1
}
)
;
SplitServerMtu
(
3
)
;
ShiftDtlsTimers
(
)
;
server_
-
>
Handshake
(
)
;
EXPECT_LE
(
5U
server_filters_
.
records_
-
>
count
(
)
)
;
}
void
AckAndCompleteRetransmission
(
)
{
HandshakeAndAck
(
client_
)
;
server_filters_
.
records_
-
>
Clear
(
)
;
server_
-
>
Handshake
(
)
;
}
void
CheckSizeOfSixth
(
size_t
size_of_half
size_t
size_of_third
)
{
static
const
size_t
record_overhead
=
12
+
1
+
16
;
EXPECT_EQ
(
size_of_half
-
size_of_third
+
record_overhead
server_filters_
.
records_
-
>
record
(
0
)
.
buffer
.
len
(
)
)
;
}
void
SendDelayedAck
(
)
{
client_
-
>
SendRecordDirect
(
client_filters_
.
records_
-
>
record
(
2
)
)
;
server_filters_
.
records_
-
>
Clear
(
)
;
server_
-
>
Handshake
(
)
;
}
void
CompleteHandshake
(
size_t
extra_retransmissions
)
{
Handshake
(
)
;
for
(
size_t
i
=
0
;
i
<
extra_retransmissions
;
+
+
i
)
{
client_
-
>
Handshake
(
)
;
}
CheckConnected
(
)
;
}
void
SplitServerMtu
(
size_t
count
)
{
static
const
size_t
actual_overhead
=
12
+
1
+
16
;
size_t
bare_size
=
cert_len_
-
actual_overhead
;
static
const
size_t
pessimistic_overhead
=
12
+
1
+
13
+
64
;
size_t
mtu
=
(
bare_size
+
count
-
1
)
/
count
+
pessimistic_overhead
;
if
(
g_ssl_gtest_verbose
)
{
std
:
:
cerr
<
<
"
server
:
set
MTU
to
"
<
<
mtu
<
<
std
:
:
endl
;
}
EXPECT_EQ
(
SECSuccess
SSLInt_SetMTU
(
server_
-
>
ssl_fd
(
)
mtu
)
)
;
}
size_t
server_record_len
(
size_t
index
)
const
{
return
server_filters_
.
records_
-
>
record
(
index
)
.
buffer
.
len
(
)
;
}
size_t
cert_len_
;
}
;
TEST_F
(
TlsFragmentationAndRecoveryTest
DropFirstHalf
)
{
RunTest
(
0
)
;
}
TEST_F
(
TlsFragmentationAndRecoveryTest
DropSecondHalf
)
{
RunTest
(
1
)
;
}
TEST_F
(
TlsDropDatagram13
NoDropsDuringZeroRtt
)
{
SetupForZeroRtt
(
)
;
SetFilters
(
)
;
std
:
:
cerr
<
<
"
Starting
second
handshake
"
<
<
std
:
:
endl
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ZeroRttSendReceive
(
true
true
)
;
Handshake
(
)
;
ExpectEarlyDataAccepted
(
true
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
EXPECT_EQ
(
0U
client_filters_
.
ack_
-
>
count
(
)
)
;
CheckAcks
(
server_filters_
0
{
0x0001000000000001ULL
0x0002000000000000ULL
}
)
;
}
TEST_F
(
TlsDropDatagram13
DropEEDuringZeroRtt
)
{
SetupForZeroRtt
(
)
;
SetFilters
(
)
;
std
:
:
cerr
<
<
"
Starting
second
handshake
"
<
<
std
:
:
endl
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
server_filters_
.
drop_
-
>
Reset
(
{
1
}
)
;
ZeroRttSendReceive
(
true
true
)
;
HandshakeAndAck
(
client_
)
;
Handshake
(
)
;
ExpectEarlyDataAccepted
(
true
)
;
CheckConnected
(
)
;
SendReceive
(
)
;
CheckAcks
(
client_filters_
0
{
0
}
)
;
CheckAcks
(
server_filters_
0
{
0x0001000000000002ULL
0x0002000000000000ULL
}
)
;
}
class
TlsReorderDatagram13
:
public
TlsDropDatagram13
{
public
:
TlsReorderDatagram13
(
)
{
}
void
ReSend
(
TlsAgent
:
:
Role
side
std
:
:
vector
<
size_t
>
indices
)
{
std
:
:
shared_ptr
<
TlsAgent
>
agent
;
std
:
:
shared_ptr
<
TlsRecordRecorder
>
records
;
if
(
side
=
=
TlsAgent
:
:
CLIENT
)
{
agent
=
client_
;
records
=
client_filters_
.
records_
;
}
else
{
agent
=
server_
;
records
=
server_filters_
.
records_
;
}
for
(
auto
i
:
indices
)
{
agent
-
>
SendRecordDirect
(
records
-
>
record
(
i
)
)
;
}
}
}
;
TEST_F
(
TlsDropDatagram13
ReorderServerEE
)
{
server_filters_
.
drop_
-
>
Reset
(
{
1
}
)
;
StartConnect
(
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
server_
-
>
SendRecordDirect
(
server_filters_
.
record
(
1
)
)
;
expected_client_acks_
=
1
;
HandshakeAndAck
(
client_
)
;
CheckedHandshakeSendReceive
(
)
;
CheckAcks
(
client_filters_
0
{
0
0x0002000000000000
}
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
}
class
TlsSendCipherSpecCapturer
{
public
:
TlsSendCipherSpecCapturer
(
std
:
:
shared_ptr
<
TlsAgent
>
&
agent
)
:
send_cipher_specs_
(
)
{
SSLInt_SetCipherSpecChangeFunc
(
agent
-
>
ssl_fd
(
)
CipherSpecChanged
(
void
*
)
this
)
;
}
std
:
:
shared_ptr
<
TlsCipherSpec
>
spec
(
size_t
i
)
{
if
(
i
>
=
send_cipher_specs_
.
size
(
)
)
{
return
nullptr
;
}
return
send_cipher_specs_
[
i
]
;
}
private
:
static
void
CipherSpecChanged
(
void
*
arg
PRBool
sending
ssl3CipherSpec
*
newSpec
)
{
if
(
!
sending
)
{
return
;
}
auto
self
=
static_cast
<
TlsSendCipherSpecCapturer
*
>
(
arg
)
;
auto
spec
=
std
:
:
make_shared
<
TlsCipherSpec
>
(
)
;
bool
ret
=
spec
-
>
Init
(
SSLInt_CipherSpecToEpoch
(
newSpec
)
SSLInt_CipherSpecToAlgorithm
(
newSpec
)
SSLInt_CipherSpecToKey
(
newSpec
)
SSLInt_CipherSpecToIv
(
newSpec
)
)
;
EXPECT_EQ
(
true
ret
)
;
self
-
>
send_cipher_specs_
.
push_back
(
spec
)
;
}
std
:
:
vector
<
std
:
:
shared_ptr
<
TlsCipherSpec
>
>
send_cipher_specs_
;
}
;
TEST_F
(
TlsDropDatagram13
SendOutOfOrderAppWithHandshakeKey
)
{
StartConnect
(
)
;
TlsSendCipherSpecCapturer
capturer
(
client_
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
client_
-
>
Handshake
(
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTED
client_
-
>
state
(
)
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTED
server_
-
>
state
(
)
)
;
uint8_t
buf
[
]
=
{
'
a
'
'
b
'
'
c
'
}
;
auto
spec
=
capturer
.
spec
(
0
)
;
ASSERT_NE
(
nullptr
spec
.
get
(
)
)
;
ASSERT_EQ
(
2
spec
-
>
epoch
(
)
)
;
ASSERT_TRUE
(
client_
-
>
SendEncryptedRecord
(
spec
SSL_LIBRARY_VERSION_DTLS_1_2_WIRE
0x0002000000000002
kTlsApplicationDataType
DataBuffer
(
buf
sizeof
(
buf
)
)
)
)
;
server_
-
>
ExpectSendAlert
(
illegal_parameter
kTlsAlertFatal
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_ERROR
server_
-
>
state
(
)
)
;
EXPECT_EQ
(
SSL_ERROR_RX_UNKNOWN_RECORD_TYPE
PORT_GetError
(
)
)
;
}
TEST_F
(
TlsDropDatagram13
SendOutOfOrderHsNonsenseWithHandshakeKey
)
{
StartConnect
(
)
;
TlsSendCipherSpecCapturer
capturer
(
client_
)
;
client_
-
>
Handshake
(
)
;
server_
-
>
Handshake
(
)
;
client_
-
>
Handshake
(
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTED
client_
-
>
state
(
)
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTED
server_
-
>
state
(
)
)
;
uint8_t
buf
[
]
=
{
'
a
'
'
b
'
'
c
'
}
;
auto
spec
=
capturer
.
spec
(
0
)
;
ASSERT_NE
(
nullptr
spec
.
get
(
)
)
;
ASSERT_EQ
(
2
spec
-
>
epoch
(
)
)
;
ASSERT_TRUE
(
client_
-
>
SendEncryptedRecord
(
spec
SSL_LIBRARY_VERSION_DTLS_1_2_WIRE
0x0002000000000002
kTlsHandshakeType
DataBuffer
(
buf
sizeof
(
buf
)
)
)
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
2UL
server_filters_
.
ack_
-
>
count
(
)
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
CheckAcks
(
server_filters_
1
{
0x0002000000000000ULL
}
)
;
}
TEST_F
(
TlsReorderDatagram13
ReorderServerCertificate
)
{
StartConnect
(
)
;
ShrinkPostServerHelloMtu
(
)
;
client_
-
>
Handshake
(
)
;
server_filters_
.
drop_
-
>
Reset
(
0xff
)
;
server_
-
>
Handshake
(
)
;
EXPECT_EQ
(
6UL
server_filters_
.
records_
-
>
count
(
)
)
;
ReSend
(
TlsAgent
:
:
SERVER
std
:
:
vector
<
size_t
>
{
0
1
3
2
4
5
}
)
;
server_filters_
.
drop_
-
>
Disable
(
)
;
server_filters_
.
records_
-
>
Clear
(
)
;
ShiftDtlsTimers
(
)
;
CheckedHandshakeSendReceive
(
)
;
EXPECT_EQ
(
2UL
server_filters_
.
records_
-
>
count
(
)
)
;
CheckAcks
(
server_filters_
0
{
0x0002000000000000ULL
}
)
;
}
TEST_F
(
TlsReorderDatagram13
DataAfterEOEDDuringZeroRtt
)
{
SetupForZeroRtt
(
)
;
SetFilters
(
)
;
std
:
:
cerr
<
<
"
Starting
second
handshake
"
<
<
std
:
:
endl
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ZeroRttSendReceive
(
true
true
)
;
client_filters_
.
records_
-
>
Clear
(
)
;
client_filters_
.
drop_
-
>
Reset
(
0xff
)
;
const
char
*
k0RttData
=
"
123456
"
;
const
PRInt32
k0RttDataLen
=
static_cast
<
PRInt32
>
(
strlen
(
k0RttData
)
)
;
PRInt32
rv
=
PR_Write
(
client_
-
>
ssl_fd
(
)
k0RttData
k0RttDataLen
)
;
EXPECT_EQ
(
k0RttDataLen
rv
)
;
EXPECT_EQ
(
1UL
client_filters_
.
records_
-
>
count
(
)
)
;
server_
-
>
Handshake
(
)
;
client_
-
>
Handshake
(
)
;
ExpectEarlyDataAccepted
(
true
)
;
EXPECT_EQ
(
3UL
client_filters_
.
records_
-
>
count
(
)
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTED
client_
-
>
state
(
)
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTING
server_
-
>
state
(
)
)
;
ReSend
(
TlsAgent
:
:
CLIENT
std
:
:
vector
<
size_t
>
(
{
1
0
2
}
)
)
;
server_
-
>
Handshake
(
)
;
CheckConnected
(
)
;
EXPECT_EQ
(
0U
client_filters_
.
ack_
-
>
count
(
)
)
;
CheckAcks
(
server_filters_
0
{
0x0001000000000002ULL
0x0002000000000000ULL
}
)
;
uint8_t
buf
[
8
]
;
rv
=
PR_Read
(
server_
-
>
ssl_fd
(
)
buf
sizeof
(
buf
)
)
;
EXPECT_EQ
(
-
1
rv
)
;
EXPECT_EQ
(
PR_WOULD_BLOCK_ERROR
PORT_GetError
(
)
)
;
}
TEST_F
(
TlsReorderDatagram13
DataAfterFinDuringZeroRtt
)
{
SetupForZeroRtt
(
)
;
SetFilters
(
)
;
std
:
:
cerr
<
<
"
Starting
second
handshake
"
<
<
std
:
:
endl
;
client_
-
>
Set0RttEnabled
(
true
)
;
server_
-
>
Set0RttEnabled
(
true
)
;
ExpectResumption
(
RESUME_TICKET
)
;
ZeroRttSendReceive
(
true
true
)
;
client_filters_
.
records_
-
>
Clear
(
)
;
client_filters_
.
drop_
-
>
Reset
(
0xff
)
;
const
char
*
k0RttData
=
"
123456
"
;
const
PRInt32
k0RttDataLen
=
static_cast
<
PRInt32
>
(
strlen
(
k0RttData
)
)
;
PRInt32
rv
=
PR_Write
(
client_
-
>
ssl_fd
(
)
k0RttData
k0RttDataLen
)
;
EXPECT_EQ
(
k0RttDataLen
rv
)
;
EXPECT_EQ
(
1UL
client_filters_
.
records_
-
>
count
(
)
)
;
server_
-
>
Handshake
(
)
;
client_
-
>
Handshake
(
)
;
ExpectEarlyDataAccepted
(
true
)
;
EXPECT_EQ
(
3UL
client_filters_
.
records_
-
>
count
(
)
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTED
client_
-
>
state
(
)
)
;
EXPECT_EQ
(
TlsAgent
:
:
STATE_CONNECTING
server_
-
>
state
(
)
)
;
ReSend
(
TlsAgent
:
:
CLIENT
std
:
:
vector
<
size_t
>
(
{
1
2
0
}
)
)
;
server_
-
>
Handshake
(
)
;
CheckConnected
(
)
;
EXPECT_EQ
(
0U
client_filters_
.
ack_
-
>
count
(
)
)
;
CheckAcks
(
server_filters_
0
{
0x0001000000000002ULL
0x0002000000000000ULL
}
)
;
uint8_t
buf
[
8
]
;
rv
=
PR_Read
(
server_
-
>
ssl_fd
(
)
buf
sizeof
(
buf
)
)
;
EXPECT_EQ
(
-
1
rv
)
;
EXPECT_EQ
(
PR_WOULD_BLOCK_ERROR
PORT_GetError
(
)
)
;
}
static
void
GetCipherAndLimit
(
uint16_t
version
uint16_t
*
cipher
uint64_t
*
limit
=
nullptr
)
{
uint64_t
l
;
if
(
!
limit
)
limit
=
&
l
;
if
(
version
<
SSL_LIBRARY_VERSION_TLS_1_2
)
{
*
cipher
=
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
;
*
limit
=
0x5aULL
<
<
28
;
}
else
if
(
version
=
=
SSL_LIBRARY_VERSION_TLS_1_2
)
{
*
cipher
=
TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
;
*
limit
=
(
1ULL
<
<
48
)
-
1
;
}
else
{
*
cipher
=
TLS_CHACHA20_POLY1305_SHA256
;
*
limit
=
(
1ULL
<
<
48
)
-
1
;
}
}
TEST_P
(
TlsConnectDatagram
MissLotsOfPackets
)
{
uint16_t
cipher
;
uint64_t
limit
;
GetCipherAndLimit
(
version_
&
cipher
&
limit
)
;
EnsureTlsSetup
(
)
;
server_
-
>
EnableSingleCipher
(
cipher
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteSeqNum
(
client_
-
>
ssl_fd
(
)
limit
-
10
)
)
;
SendReceive
(
)
;
}
class
TlsConnectDatagram12Plus
:
public
TlsConnectDatagram
{
public
:
TlsConnectDatagram12Plus
(
)
:
TlsConnectDatagram
(
)
{
}
}
;
TEST_P
(
TlsConnectDatagram12Plus
MissAWindow
)
{
EnsureTlsSetup
(
)
;
uint16_t
cipher
;
GetCipherAndLimit
(
version_
&
cipher
)
;
server_
-
>
EnableSingleCipher
(
cipher
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteSeqByAWindow
(
client_
-
>
ssl_fd
(
)
0
)
)
;
SendReceive
(
)
;
}
TEST_P
(
TlsConnectDatagram12Plus
MissAWindowAndOne
)
{
EnsureTlsSetup
(
)
;
uint16_t
cipher
;
GetCipherAndLimit
(
version_
&
cipher
)
;
server_
-
>
EnableSingleCipher
(
cipher
)
;
Connect
(
)
;
EXPECT_EQ
(
SECSuccess
SSLInt_AdvanceWriteSeqByAWindow
(
client_
-
>
ssl_fd
(
)
1
)
)
;
SendReceive
(
)
;
}
INSTANTIATE_TEST_CASE_P
(
Datagram12Plus
TlsConnectDatagram12Plus
TlsConnectTestBase
:
:
kTlsV12Plus
)
;
INSTANTIATE_TEST_CASE_P
(
DatagramPre13
TlsConnectDatagramPre13
TlsConnectTestBase
:
:
kTlsV11V12
)
;
}
