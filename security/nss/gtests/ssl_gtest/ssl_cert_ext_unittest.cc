#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
#
include
<
memory
>
#
include
"
tls_connect
.
h
"
#
include
"
tls_filter
.
h
"
#
include
"
tls_parser
.
h
"
namespace
nss_test
{
class
SignedCertificateTimestampsExtractor
{
public
:
SignedCertificateTimestampsExtractor
(
std
:
:
shared_ptr
<
TlsAgent
>
&
client
)
:
client_
(
client
)
{
client
-
>
SetAuthCertificateCallback
(
[
this
]
(
TlsAgent
*
agent
bool
checksig
bool
isServer
)
-
>
SECStatus
{
const
SECItem
*
scts
=
SSL_PeerSignedCertTimestamps
(
agent
-
>
ssl_fd
(
)
)
;
EXPECT_TRUE
(
scts
)
;
if
(
!
scts
)
{
return
SECFailure
;
}
auth_timestamps_
.
reset
(
new
DataBuffer
(
scts
-
>
data
scts
-
>
len
)
)
;
return
SECSuccess
;
}
)
;
client
-
>
SetHandshakeCallback
(
[
this
]
(
TlsAgent
*
agent
)
{
const
SECItem
*
scts
=
SSL_PeerSignedCertTimestamps
(
agent
-
>
ssl_fd
(
)
)
;
ASSERT_TRUE
(
scts
)
;
handshake_timestamps_
.
reset
(
new
DataBuffer
(
scts
-
>
data
scts
-
>
len
)
)
;
}
)
;
}
void
assertTimestamps
(
const
DataBuffer
&
timestamps
)
{
EXPECT_TRUE
(
auth_timestamps_
)
;
EXPECT_EQ
(
timestamps
*
auth_timestamps_
)
;
EXPECT_TRUE
(
handshake_timestamps_
)
;
EXPECT_EQ
(
timestamps
*
handshake_timestamps_
)
;
const
SECItem
*
current
=
SSL_PeerSignedCertTimestamps
(
client_
.
lock
(
)
-
>
ssl_fd
(
)
)
;
EXPECT_EQ
(
timestamps
DataBuffer
(
current
-
>
data
current
-
>
len
)
)
;
}
private
:
std
:
:
weak_ptr
<
TlsAgent
>
client_
;
std
:
:
unique_ptr
<
DataBuffer
>
auth_timestamps_
;
std
:
:
unique_ptr
<
DataBuffer
>
handshake_timestamps_
;
}
;
static
const
uint8_t
kSctValue
[
]
=
{
0x01
0x23
0x45
0x67
0x89
}
;
static
const
SECItem
kSctItem
=
{
siBuffer
const_cast
<
uint8_t
*
>
(
kSctValue
)
sizeof
(
kSctValue
)
}
;
static
const
DataBuffer
kSctBuffer
(
kSctValue
sizeof
(
kSctValue
)
)
;
static
const
SSLExtraServerCertData
kExtraSctData
=
{
ssl_auth_null
nullptr
nullptr
&
kSctItem
}
;
TEST_P
(
TlsConnectGenericPre13
SignedCertificateTimestampsLegacy
)
{
EnsureTlsSetup
(
)
;
ScopedCERTCertificate
cert
;
ScopedSECKEYPrivateKey
priv
;
ASSERT_TRUE
(
TlsAgent
:
:
LoadCertificate
(
TlsAgent
:
:
kServerRsa
&
cert
&
priv
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_ConfigSecureServerWithCertChain
(
server_
-
>
ssl_fd
(
)
cert
.
get
(
)
nullptr
priv
.
get
(
)
ssl_kea_rsa
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_SetSignedCertTimestamps
(
server_
-
>
ssl_fd
(
)
&
kSctItem
ssl_kea_rsa
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_OptionSet
(
client_
-
>
ssl_fd
(
)
SSL_ENABLE_SIGNED_CERT_TIMESTAMPS
PR_TRUE
)
)
;
SignedCertificateTimestampsExtractor
timestamps_extractor
(
client_
)
;
Connect
(
)
;
timestamps_extractor
.
assertTimestamps
(
kSctBuffer
)
;
}
TEST_P
(
TlsConnectGeneric
SignedCertificateTimestampsSuccess
)
{
EnsureTlsSetup
(
)
;
EXPECT_TRUE
(
server_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsa
true
&
kExtraSctData
)
)
;
EXPECT_EQ
(
SECSuccess
SSL_OptionSet
(
client_
-
>
ssl_fd
(
)
SSL_ENABLE_SIGNED_CERT_TIMESTAMPS
PR_TRUE
)
)
;
SignedCertificateTimestampsExtractor
timestamps_extractor
(
client_
)
;
Connect
(
)
;
timestamps_extractor
.
assertTimestamps
(
kSctBuffer
)
;
}
TEST_P
(
TlsConnectGeneric
SignedCertificateTimestampsInactiveClient
)
{
EnsureTlsSetup
(
)
;
EXPECT_TRUE
(
server_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsa
true
&
kExtraSctData
)
)
;
SignedCertificateTimestampsExtractor
timestamps_extractor
(
client_
)
;
Connect
(
)
;
timestamps_extractor
.
assertTimestamps
(
DataBuffer
(
)
)
;
}
TEST_P
(
TlsConnectGeneric
SignedCertificateTimestampsInactiveServer
)
{
EnsureTlsSetup
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_OptionSet
(
client_
-
>
ssl_fd
(
)
SSL_ENABLE_SIGNED_CERT_TIMESTAMPS
PR_TRUE
)
)
;
SignedCertificateTimestampsExtractor
timestamps_extractor
(
client_
)
;
Connect
(
)
;
timestamps_extractor
.
assertTimestamps
(
DataBuffer
(
)
)
;
}
TEST_P
(
TlsConnectGeneric
SignedCertificateTimestampsInactiveBoth
)
{
EnsureTlsSetup
(
)
;
SignedCertificateTimestampsExtractor
timestamps_extractor
(
client_
)
;
Connect
(
)
;
timestamps_extractor
.
assertTimestamps
(
DataBuffer
(
)
)
;
}
static
SECStatus
CheckNoOCSP
(
TlsAgent
*
agent
bool
checksig
bool
isServer
)
{
const
SECItemArray
*
ocsp
=
SSL_PeerStapledOCSPResponses
(
agent
-
>
ssl_fd
(
)
)
;
EXPECT_TRUE
(
ocsp
)
;
EXPECT_EQ
(
0U
ocsp
-
>
len
)
;
return
SECSuccess
;
}
static
const
uint8_t
kOcspValue1
[
]
=
{
1
2
3
4
5
6
}
;
static
const
uint8_t
kOcspValue2
[
]
=
{
7
8
9
}
;
static
const
SECItem
kOcspItems
[
]
=
{
{
siBuffer
const_cast
<
uint8_t
*
>
(
kOcspValue1
)
sizeof
(
kOcspValue1
)
}
{
siBuffer
const_cast
<
uint8_t
*
>
(
kOcspValue2
)
sizeof
(
kOcspValue2
)
}
}
;
static
const
SECItemArray
kOcspResponses
=
{
const_cast
<
SECItem
*
>
(
kOcspItems
)
PR_ARRAY_SIZE
(
kOcspItems
)
}
;
const
static
SSLExtraServerCertData
kOcspExtraData
=
{
ssl_auth_null
nullptr
&
kOcspResponses
nullptr
}
;
TEST_P
(
TlsConnectGeneric
NoOcsp
)
{
EnsureTlsSetup
(
)
;
client_
-
>
SetAuthCertificateCallback
(
CheckNoOCSP
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
OcspNotRequested
)
{
EnsureTlsSetup
(
)
;
client_
-
>
SetAuthCertificateCallback
(
CheckNoOCSP
)
;
EXPECT_TRUE
(
server_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsa
true
&
kOcspExtraData
)
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGeneric
OcspNotProvided
)
{
EnsureTlsSetup
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_OptionSet
(
client_
-
>
ssl_fd
(
)
SSL_ENABLE_OCSP_STAPLING
PR_TRUE
)
)
;
client_
-
>
SetAuthCertificateCallback
(
CheckNoOCSP
)
;
Connect
(
)
;
}
TEST_P
(
TlsConnectGenericPre13
OcspMangled
)
{
EnsureTlsSetup
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_OptionSet
(
client_
-
>
ssl_fd
(
)
SSL_ENABLE_OCSP_STAPLING
PR_TRUE
)
)
;
EXPECT_TRUE
(
server_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsa
true
&
kOcspExtraData
)
)
;
static
const
uint8_t
val
[
]
=
{
1
}
;
auto
replacer
=
std
:
:
make_shared
<
TlsExtensionReplacer
>
(
ssl_cert_status_xtn
DataBuffer
(
val
sizeof
(
val
)
)
)
;
server_
-
>
SetPacketFilter
(
replacer
)
;
ConnectExpectFail
(
)
;
client_
-
>
CheckErrorCode
(
SSL_ERROR_RX_MALFORMED_SERVER_HELLO
)
;
server_
-
>
CheckErrorCode
(
SSL_ERROR_ILLEGAL_PARAMETER_ALERT
)
;
}
TEST_P
(
TlsConnectGeneric
OcspSuccess
)
{
EnsureTlsSetup
(
)
;
EXPECT_EQ
(
SECSuccess
SSL_OptionSet
(
client_
-
>
ssl_fd
(
)
SSL_ENABLE_OCSP_STAPLING
PR_TRUE
)
)
;
auto
capture_ocsp
=
std
:
:
make_shared
<
TlsExtensionCapture
>
(
ssl_cert_status_xtn
)
;
server_
-
>
SetPacketFilter
(
capture_ocsp
)
;
client_
-
>
SetAuthCertificateCallback
(
[
]
(
TlsAgent
*
agent
bool
checksig
bool
isServer
)
-
>
SECStatus
{
const
SECItemArray
*
ocsp
=
SSL_PeerStapledOCSPResponses
(
agent
-
>
ssl_fd
(
)
)
;
if
(
!
ocsp
)
{
return
SECFailure
;
}
EXPECT_EQ
(
1U
ocsp
-
>
len
)
<
<
"
We
only
provide
the
first
item
"
;
EXPECT_EQ
(
0
SECITEM_CompareItem
(
&
kOcspItems
[
0
]
&
ocsp
-
>
items
[
0
]
)
)
;
return
SECSuccess
;
}
)
;
EXPECT_TRUE
(
server_
-
>
ConfigServerCert
(
TlsAgent
:
:
kServerRsa
true
&
kOcspExtraData
)
)
;
Connect
(
)
;
EXPECT_EQ
(
0U
capture_ocsp
-
>
extension
(
)
.
len
(
)
)
;
}
}
