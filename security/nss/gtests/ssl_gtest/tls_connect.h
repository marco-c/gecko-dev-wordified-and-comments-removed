#
ifndef
tls_connect_h_
#
define
tls_connect_h_
#
include
<
tuple
>
#
include
"
sslproto
.
h
"
#
include
"
sslt
.
h
"
#
include
"
tls_agent
.
h
"
#
include
"
tls_filter
.
h
"
#
define
GTEST_HAS_RTTI
0
#
include
"
gtest
/
gtest
.
h
"
namespace
nss_test
{
extern
std
:
:
string
VersionString
(
uint16_t
version
)
;
class
TlsConnectTestBase
:
public
:
:
testing
:
:
Test
{
public
:
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
std
:
:
string
>
kTlsModesStream
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
std
:
:
string
>
kTlsModesDatagram
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
std
:
:
string
>
kTlsModesAll
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV10
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV11
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV12
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV10V11
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV11V12
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV10ToV12
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV13
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV11Plus
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsV12Plus
;
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
uint16_t
>
kTlsVAll
;
TlsConnectTestBase
(
Mode
mode
uint16_t
version
)
;
TlsConnectTestBase
(
const
std
:
:
string
&
mode
uint16_t
version
)
;
virtual
~
TlsConnectTestBase
(
)
;
void
SetUp
(
)
;
void
TearDown
(
)
;
void
Init
(
)
;
void
ClearStats
(
)
;
void
ClearServerCache
(
)
;
void
EnsureTlsSetup
(
)
;
void
Reset
(
)
;
void
Reset
(
const
std
:
:
string
&
server_name
const
std
:
:
string
&
client_name
=
"
client
"
)
;
void
Handshake
(
)
;
void
Connect
(
)
;
void
CheckConnected
(
)
;
void
ConnectExpectFail
(
)
;
void
ConnectWithCipherSuite
(
uint16_t
cipher_suite
)
;
void
CheckKeys
(
SSLKEAType
kea_type
SSLNamedGroup
kea_group
SSLAuthType
auth_type
SSLSignatureScheme
sig_scheme
)
const
;
void
CheckKeys
(
SSLKEAType
kea_type
SSLAuthType
auth_type
)
const
;
void
CheckKeys
(
)
const
;
void
CheckGroups
(
const
DataBuffer
&
groups
std
:
:
function
<
void
(
SSLNamedGroup
)
>
check_group
)
;
void
CheckShares
(
const
DataBuffer
&
shares
std
:
:
function
<
void
(
SSLNamedGroup
)
>
check_group
)
;
void
ConfigureVersion
(
uint16_t
version
)
;
void
SetExpectedVersion
(
uint16_t
version
)
;
void
ExpectResumption
(
SessionResumptionMode
expected
)
;
void
DisableAllCiphers
(
)
;
void
EnableOnlyStaticRsaCiphers
(
)
;
void
EnableOnlyDheCiphers
(
)
;
void
EnableSomeEcdhCiphers
(
)
;
void
EnableExtendedMasterSecret
(
)
;
void
ConfigureSessionCache
(
SessionResumptionMode
client
SessionResumptionMode
server
)
;
void
EnableAlpn
(
)
;
void
EnableAlpn
(
const
uint8_t
*
val
size_t
len
)
;
void
EnsureModelSockets
(
)
;
void
CheckAlpn
(
const
std
:
:
string
&
val
)
;
void
EnableSrtp
(
)
;
void
CheckSrtp
(
)
const
;
void
SendReceive
(
)
;
void
SetupForZeroRtt
(
)
;
void
SetupForResume
(
)
;
void
ZeroRttSendReceive
(
bool
expect_writable
bool
expect_readable
std
:
:
function
<
bool
(
)
>
post_clienthello_check
=
nullptr
)
;
void
Receive
(
size_t
amount
)
;
void
ExpectExtendedMasterSecret
(
bool
expected
)
;
void
ExpectEarlyDataAccepted
(
bool
expected
)
;
void
DisableECDHEServerKeyReuse
(
)
;
protected
:
Mode
mode_
;
TlsAgent
*
client_
;
TlsAgent
*
server_
;
TlsAgent
*
client_model_
;
TlsAgent
*
server_model_
;
uint16_t
version_
;
SessionResumptionMode
expected_resumption_mode_
;
std
:
:
vector
<
std
:
:
vector
<
uint8_t
>
>
session_ids_
;
const
uint8_t
alpn_dummy_val_
[
4
]
=
{
0x01
0x62
0x01
0x61
}
;
private
:
static
inline
Mode
ToMode
(
const
std
:
:
string
&
str
)
{
return
str
=
=
"
TLS
"
?
STREAM
:
DGRAM
;
}
void
CheckResumption
(
SessionResumptionMode
expected
)
;
void
CheckExtendedMasterSecret
(
)
;
void
CheckEarlyDataAccepted
(
)
;
bool
expect_extended_master_secret_
;
bool
expect_early_data_accepted_
;
class
DuplicateGroupChecker
{
public
:
void
AddAndCheckGroup
(
SSLNamedGroup
group
)
{
EXPECT_EQ
(
groups_
.
end
(
)
groups_
.
find
(
group
)
)
<
<
"
Group
"
<
<
group
<
<
"
should
not
be
duplicated
"
;
groups_
.
insert
(
group
)
;
}
private
:
std
:
:
set
<
SSLNamedGroup
>
groups_
;
}
;
}
;
class
TlsConnectTest
:
public
TlsConnectTestBase
{
public
:
TlsConnectTest
(
)
:
TlsConnectTestBase
(
STREAM
0
)
{
}
}
;
class
DtlsConnectTest
:
public
TlsConnectTestBase
{
public
:
DtlsConnectTest
(
)
:
TlsConnectTestBase
(
DGRAM
0
)
{
}
}
;
class
TlsConnectStream
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
uint16_t
>
{
public
:
TlsConnectStream
(
)
:
TlsConnectTestBase
(
STREAM
GetParam
(
)
)
{
}
}
;
class
TlsConnectStreamPre13
:
public
TlsConnectStream
{
}
;
class
TlsConnectDatagram
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
uint16_t
>
{
public
:
TlsConnectDatagram
(
)
:
TlsConnectTestBase
(
DGRAM
GetParam
(
)
)
{
}
}
;
class
TlsConnectGeneric
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
tuple
<
std
:
:
string
uint16_t
>
>
{
public
:
TlsConnectGeneric
(
)
;
}
;
class
TlsConnectPre12
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
tuple
<
std
:
:
string
uint16_t
>
>
{
public
:
TlsConnectPre12
(
)
;
}
;
class
TlsConnectTls12
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
string
>
{
public
:
TlsConnectTls12
(
)
;
}
;
class
TlsConnectStreamTls12
:
public
TlsConnectTestBase
{
public
:
TlsConnectStreamTls12
(
)
:
TlsConnectTestBase
(
STREAM
SSL_LIBRARY_VERSION_TLS_1_2
)
{
}
}
;
class
TlsConnectTls12Plus
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
tuple
<
std
:
:
string
uint16_t
>
>
{
public
:
TlsConnectTls12Plus
(
)
;
}
;
class
TlsConnectTls13
:
public
TlsConnectTestBase
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
string
>
{
public
:
TlsConnectTls13
(
)
;
}
;
class
TlsConnectStreamTls13
:
public
TlsConnectTestBase
{
public
:
TlsConnectStreamTls13
(
)
:
TlsConnectTestBase
(
STREAM
SSL_LIBRARY_VERSION_TLS_1_3
)
{
}
}
;
class
TlsConnectDatagram13
:
public
TlsConnectTestBase
{
public
:
TlsConnectDatagram13
(
)
:
TlsConnectTestBase
(
DGRAM
SSL_LIBRARY_VERSION_TLS_1_3
)
{
}
}
;
class
TlsConnectGenericPre13
:
public
TlsConnectGeneric
{
}
;
class
TlsKeyExchangeTest
:
public
TlsConnectGeneric
{
protected
:
TlsExtensionCapture
*
groups_capture_
;
TlsExtensionCapture
*
shares_capture_
;
TlsInspectorRecordHandshakeMessage
*
capture_hrr_
;
void
EnsureKeyShareSetup
(
)
;
void
ConfigNamedGroups
(
const
std
:
:
vector
<
SSLNamedGroup
>
&
groups
)
;
std
:
:
vector
<
SSLNamedGroup
>
GetGroupDetails
(
const
DataBuffer
&
ext
)
;
std
:
:
vector
<
SSLNamedGroup
>
GetShareDetails
(
const
DataBuffer
&
ext
)
;
void
CheckKEXDetails
(
const
std
:
:
vector
<
SSLNamedGroup
>
&
expectedGroups
const
std
:
:
vector
<
SSLNamedGroup
>
&
expectedShares
bool
expect_hrr
=
false
)
;
}
;
class
TlsKeyExchangeTest13
:
public
TlsKeyExchangeTest
{
}
;
class
TlsKeyExchangeTestPre13
:
public
TlsKeyExchangeTest
{
}
;
}
#
endif
