#
include
"
blapi
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslimpl
.
h
"
#
include
"
tls_connect
.
h
"
#
include
"
gtest
/
gtest
.
h
"
namespace
nss_test
{
#
ifdef
UNSAFE_FUZZER_MODE
#
define
FUZZ_F
(
c
f
)
TEST_F
(
c
Fuzz_
#
#
f
)
#
define
FUZZ_P
(
c
f
)
TEST_P
(
c
Fuzz_
#
#
f
)
#
else
#
define
FUZZ_F
(
c
f
)
TEST_F
(
c
DISABLED_Fuzz_
#
#
f
)
#
define
FUZZ_P
(
c
f
)
TEST_P
(
c
DISABLED_Fuzz_
#
#
f
)
#
endif
const
uint8_t
kShortEmptyFinished
[
8
]
=
{
0
}
;
const
uint8_t
kLongEmptyFinished
[
128
]
=
{
0
}
;
class
TlsFuzzTest
:
public
:
:
testing
:
:
Test
{
}
;
class
TlsApplicationDataRecorder
:
public
TlsRecordFilter
{
public
:
TlsApplicationDataRecorder
(
const
std
:
:
shared_ptr
<
TlsAgent
>
&
a
)
:
TlsRecordFilter
(
a
)
buffer_
(
)
{
}
virtual
PacketFilter
:
:
Action
FilterRecord
(
const
TlsRecordHeader
&
header
const
DataBuffer
&
input
DataBuffer
*
output
)
{
if
(
header
.
content_type
(
)
=
=
kTlsApplicationDataType
)
{
buffer_
.
Append
(
input
)
;
}
return
KEEP
;
}
const
DataBuffer
&
buffer
(
)
const
{
return
buffer_
;
}
private
:
DataBuffer
buffer_
;
}
;
FUZZ_F
(
TlsFuzzTest
SSL_Time_Constant
)
{
PRUint32
now
=
ssl_TimeSec
(
)
;
PR_Sleep
(
PR_SecondsToInterval
(
2
)
)
;
EXPECT_EQ
(
ssl_TimeSec
(
)
now
)
;
}
FUZZ_P
(
TlsConnectGeneric
DeterministicExporter
)
{
const
char
kLabel
[
]
=
"
label
"
;
std
:
:
vector
<
unsigned
char
>
out1
(
32
)
out2
(
32
)
;
Connect
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
DisableECDHEServerKeyReuse
(
)
;
EXPECT_EQ
(
SECSuccess
RNG_RandomUpdate
(
NULL
0
)
)
;
Connect
(
)
;
SECStatus
rv
=
SSL_ExportKeyingMaterial
(
client_
-
>
ssl_fd
(
)
kLabel
strlen
(
kLabel
)
false
NULL
0
out1
.
data
(
)
out1
.
size
(
)
)
;
EXPECT_EQ
(
SECSuccess
rv
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
DisableECDHEServerKeyReuse
(
)
;
EXPECT_EQ
(
SECSuccess
RNG_RandomUpdate
(
NULL
0
)
)
;
Connect
(
)
;
rv
=
SSL_ExportKeyingMaterial
(
client_
-
>
ssl_fd
(
)
kLabel
strlen
(
kLabel
)
false
NULL
0
out2
.
data
(
)
out2
.
size
(
)
)
;
EXPECT_EQ
(
SECSuccess
rv
)
;
EXPECT_EQ
(
out1
out2
)
;
}
FUZZ_P
(
TlsConnectGeneric
DeterministicTranscript
)
{
Connect
(
)
;
DataBuffer
last
;
for
(
size_t
i
=
0
;
i
<
5
;
i
+
+
)
{
Reset
(
)
;
ConfigureSessionCache
(
RESUME_NONE
RESUME_NONE
)
;
DisableECDHEServerKeyReuse
(
)
;
DataBuffer
buffer
;
MakeTlsFilter
<
TlsConversationRecorder
>
(
client_
buffer
)
;
MakeTlsFilter
<
TlsConversationRecorder
>
(
server_
buffer
)
;
EXPECT_EQ
(
SECSuccess
RNG_RandomUpdate
(
NULL
0
)
)
;
Connect
(
)
;
client_
-
>
ClearFilter
(
)
;
server_
-
>
ClearFilter
(
)
;
if
(
last
.
len
(
)
>
0
)
{
EXPECT_EQ
(
last
buffer
)
;
}
last
=
buffer
;
}
}
FUZZ_P
(
TlsConnectGeneric
ConnectSendReceive_NullCipher
)
{
EnsureTlsSetup
(
)
;
auto
client_recorder
=
MakeTlsFilter
<
TlsApplicationDataRecorder
>
(
client_
)
;
auto
server_recorder
=
MakeTlsFilter
<
TlsApplicationDataRecorder
>
(
server_
)
;
Connect
(
)
;
DataBuffer
buf
;
buf
.
Allocate
(
50
)
;
for
(
size_t
i
=
0
;
i
<
buf
.
len
(
)
;
+
+
i
)
{
buf
.
data
(
)
[
i
]
=
i
&
0xff
;
}
client_
-
>
SendBuffer
(
buf
)
;
server_
-
>
SendBuffer
(
buf
)
;
Receive
(
buf
.
len
(
)
)
;
EXPECT_EQ
(
buf
client_recorder
-
>
buffer
(
)
)
;
EXPECT_EQ
(
buf
server_recorder
-
>
buffer
(
)
)
;
}
FUZZ_P
(
TlsConnectGeneric
BogusClientFinished
)
{
EnsureTlsSetup
(
)
;
MakeTlsFilter
<
TlsInspectorReplaceHandshakeMessage
>
(
client_
kTlsHandshakeFinished
DataBuffer
(
kShortEmptyFinished
sizeof
(
kShortEmptyFinished
)
)
)
;
Connect
(
)
;
SendReceive
(
)
;
}
FUZZ_P
(
TlsConnectGeneric
BogusServerFinished
)
{
EnsureTlsSetup
(
)
;
MakeTlsFilter
<
TlsInspectorReplaceHandshakeMessage
>
(
server_
kTlsHandshakeFinished
DataBuffer
(
kLongEmptyFinished
sizeof
(
kLongEmptyFinished
)
)
)
;
Connect
(
)
;
SendReceive
(
)
;
}
FUZZ_P
(
TlsConnectGeneric
BogusServerAuthSignature
)
{
EnsureTlsSetup
(
)
;
uint8_t
msg_type
=
version_
=
=
SSL_LIBRARY_VERSION_TLS_1_3
?
kTlsHandshakeCertificateVerify
:
kTlsHandshakeServerKeyExchange
;
MakeTlsFilter
<
TlsLastByteDamager
>
(
server_
msg_type
)
;
Connect
(
)
;
SendReceive
(
)
;
}
FUZZ_P
(
TlsConnectGeneric
BogusClientAuthSignature
)
{
EnsureTlsSetup
(
)
;
client_
-
>
SetupClientAuth
(
)
;
server_
-
>
RequestClientAuth
(
true
)
;
MakeTlsFilter
<
TlsLastByteDamager
>
(
client_
kTlsHandshakeCertificateVerify
)
;
Connect
(
)
;
}
FUZZ_P
(
TlsConnectGeneric
SessionTicketResumption
)
{
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
Reset
(
)
;
ConfigureSessionCache
(
RESUME_BOTH
RESUME_TICKET
)
;
ExpectResumption
(
RESUME_TICKET
)
;
Connect
(
)
;
SendReceive
(
)
;
}
FUZZ_P
(
TlsConnectGeneric
UnencryptedSessionTickets
)
{
ConfigureSessionCache
(
RESUME_TICKET
RESUME_TICKET
)
;
auto
filter
=
MakeTlsFilter
<
TlsHandshakeRecorder
>
(
server_
kTlsHandshakeNewSessionTicket
)
;
Connect
(
)
;
std
:
:
cerr
<
<
"
ticket
"
<
<
filter
-
>
buffer
(
)
<
<
std
:
:
endl
;
size_t
offset
=
4
;
if
(
version_
=
=
SSL_LIBRARY_VERSION_TLS_1_3
)
{
offset
+
=
4
;
uint32_t
nonce_len
=
0
;
EXPECT_TRUE
(
filter
-
>
buffer
(
)
.
Read
(
offset
1
&
nonce_len
)
)
;
offset
+
=
1
+
nonce_len
;
}
offset
+
=
2
+
2
;
uint32_t
tls_version
=
0
;
EXPECT_TRUE
(
filter
-
>
buffer
(
)
.
Read
(
offset
sizeof
(
version_
)
&
tls_version
)
)
;
EXPECT_EQ
(
version_
static_cast
<
decltype
(
version_
)
>
(
tls_version
)
)
;
uint32_t
suite
=
0
;
EXPECT_TRUE
(
filter
-
>
buffer
(
)
.
Read
(
offset
+
sizeof
(
version_
)
2
&
suite
)
)
;
client_
-
>
CheckCipherSuite
(
static_cast
<
uint16_t
>
(
suite
)
)
;
}
}
