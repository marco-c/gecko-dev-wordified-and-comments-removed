#
ifndef
__Hacl_P256_H
#
define
__Hacl_P256_H
#
if
defined
(
__cplusplus
)
extern
"
C
"
{
#
endif
#
include
<
string
.
h
>
#
include
"
krml
/
internal
/
types
.
h
"
#
include
"
krml
/
lowstar_endianness
.
h
"
#
include
"
krml
/
internal
/
target
.
h
"
#
include
"
Hacl_Krmllib
.
h
"
#
include
"
lib_intrinsics
.
h
"
bool
Hacl_P256_ecdsa_sign_p256_without_hash
(
uint8_t
*
signature
uint32_t
msg_len
uint8_t
*
msg
uint8_t
*
private_key
uint8_t
*
nonce
)
;
bool
Hacl_P256_ecdsa_verif_without_hash
(
uint32_t
msg_len
uint8_t
*
msg
uint8_t
*
public_key
uint8_t
*
signature_r
uint8_t
*
signature_s
)
;
bool
Hacl_P256_validate_public_key
(
uint8_t
*
public_key
)
;
bool
Hacl_P256_validate_private_key
(
uint8_t
*
private_key
)
;
bool
Hacl_P256_uncompressed_to_raw
(
uint8_t
*
pk
uint8_t
*
pk_raw
)
;
bool
Hacl_P256_compressed_to_raw
(
uint8_t
*
pk
uint8_t
*
pk_raw
)
;
void
Hacl_P256_raw_to_uncompressed
(
uint8_t
*
pk_raw
uint8_t
*
pk
)
;
void
Hacl_P256_raw_to_compressed
(
uint8_t
*
pk_raw
uint8_t
*
pk
)
;
bool
Hacl_P256_dh_initiator
(
uint8_t
*
public_key
uint8_t
*
private_key
)
;
bool
Hacl_P256_dh_responder
(
uint8_t
*
shared_secret
uint8_t
*
their_pubkey
uint8_t
*
private_key
)
;
#
if
defined
(
__cplusplus
)
}
#
endif
#
define
__Hacl_P256_H_DEFINED
#
endif
