#
ifndef
__libcrux_mlkem_portable_H
#
define
__libcrux_mlkem_portable_H
#
if
defined
(
__cplusplus
)
extern
"
C
"
{
#
endif
#
include
"
eurydice_glue
.
h
"
#
include
"
libcrux_core
.
h
"
#
include
"
libcrux_sha3
.
h
"
#
include
"
libcrux_sha3_internal
.
h
"
void
libcrux_ml_kem_hash_functions_portable_G
(
Eurydice_slice
input
uint8_t
ret
[
64U
]
)
;
void
libcrux_ml_kem_hash_functions_portable_H
(
Eurydice_slice
input
uint8_t
ret
[
32U
]
)
;
#
define
LIBCRUX_ML_KEM_VECTOR_TRAITS_FIELD_ELEMENTS_IN_VECTOR
(
(
size_t
)
16U
)
#
define
LIBCRUX_ML_KEM_VECTOR_TRAITS_FIELD_MODULUS
(
(
int16_t
)
3329
)
#
define
LIBCRUX_ML_KEM_VECTOR_TRAITS_MONTGOMERY_R_SQUARED_MOD_FIELD_MODULUS
\
(
(
int16_t
)
1353
)
#
define
LIBCRUX_ML_KEM_VECTOR_TRAITS_INVERSE_OF_MODULUS_MOD_MONTGOMERY_R
\
(
62209U
)
typedef
struct
libcrux_ml_kem_vector_portable_vector_type_PortableVector_s
{
int16_t
elements
[
16U
]
;
}
libcrux_ml_kem_vector_portable_vector_type_PortableVector
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_vector_type_from_i16_array
(
Eurydice_slice
array
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_from_i16_array_0d
(
Eurydice_slice
array
)
;
typedef
struct
uint8_t_x11_s
{
uint8_t
fst
;
uint8_t
snd
;
uint8_t
thd
;
uint8_t
f3
;
uint8_t
f4
;
uint8_t
f5
;
uint8_t
f6
;
uint8_t
f7
;
uint8_t
f8
;
uint8_t
f9
;
uint8_t
f10
;
}
uint8_t_x11
;
uint8_t_x11
libcrux_ml_kem_vector_portable_serialize_serialize_11_int
(
Eurydice_slice
v
)
;
void
libcrux_ml_kem_vector_portable_serialize_serialize_11
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
uint8_t
ret
[
22U
]
)
;
void
libcrux_ml_kem_vector_portable_serialize_11_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
uint8_t
ret
[
22U
]
)
;
typedef
struct
int16_t_x8_s
{
int16_t
fst
;
int16_t
snd
;
int16_t
thd
;
int16_t
f3
;
int16_t
f4
;
int16_t
f5
;
int16_t
f6
;
int16_t
f7
;
}
int16_t_x8
;
int16_t_x8
libcrux_ml_kem_vector_portable_serialize_deserialize_11_int
(
Eurydice_slice
bytes
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_vector_type_zero
(
void
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_serialize_deserialize_11
(
Eurydice_slice
bytes
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_deserialize_11_0d
(
Eurydice_slice
a
)
;
void
libcrux_ml_kem_vector_portable_vector_type_to_i16_array
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
x
int16_t
ret
[
16U
]
)
;
void
libcrux_ml_kem_vector_portable_to_i16_array_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
x
int16_t
ret
[
16U
]
)
;
extern
const
uint8_t
libcrux_ml_kem_vector_rej_sample_table_REJECTION_SAMPLE_SHUFFLE_TABLE
[
256U
]
[
16U
]
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ZERO_0d
(
void
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_arithmetic_add
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
lhs
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
rhs
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_add_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
lhs
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
rhs
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_arithmetic_sub
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
lhs
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
rhs
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_sub_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
lhs
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
rhs
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_arithmetic_multiply_by_constant
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
c
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_multiply_by_constant_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
c
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_arithmetic_bitwise_and_with_constant
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
c
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_bitwise_and_with_constant_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
c
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_arithmetic_cond_subtract_3329
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_cond_subtract_3329_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
)
;
#
define
LIBCRUX_ML_KEM_VECTOR_PORTABLE_ARITHMETIC_BARRETT_MULTIPLIER
\
(
(
int32_t
)
20159
)
#
define
LIBCRUX_ML_KEM_VECTOR_PORTABLE_ARITHMETIC_BARRETT_SHIFT
(
(
int32_t
)
26
)
#
define
LIBCRUX_ML_KEM_VECTOR_PORTABLE_ARITHMETIC_BARRETT_R
\
(
(
int32_t
)
1
<
<
(
uint32_t
)
\
LIBCRUX_ML_KEM_VECTOR_PORTABLE_ARITHMETIC_BARRETT_SHIFT
)
int16_t
libcrux_ml_kem_vector_portable_arithmetic_barrett_reduce_element
(
int16_t
value
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_arithmetic_barrett_reduce
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_barrett_reduce_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
)
;
#
define
LIBCRUX_ML_KEM_VECTOR_PORTABLE_ARITHMETIC_MONTGOMERY_SHIFT
(
16U
)
#
define
LIBCRUX_ML_KEM_VECTOR_PORTABLE_ARITHMETIC_MONTGOMERY_R
\
(
(
int32_t
)
1
<
<
(
uint32_t
)
\
LIBCRUX_ML_KEM_VECTOR_PORTABLE_ARITHMETIC_MONTGOMERY_SHIFT
)
int16_t
libcrux_ml_kem_vector_portable_arithmetic_montgomery_reduce_element
(
int32_t
value
)
;
int16_t
libcrux_ml_kem_vector_portable_arithmetic_montgomery_multiply_fe_by_fer
(
int16_t
fe
int16_t
fer
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_arithmetic_montgomery_multiply_by_constant
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
c
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_montgomery_multiply_by_constant_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
r
)
;
uint8_t
libcrux_ml_kem_vector_portable_compress_compress_message_coefficient
(
uint16_t
fe
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_compress_compress_1
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_compress_1_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
)
;
uint32_t
libcrux_ml_kem_vector_portable_arithmetic_get_n_least_significant_bits
(
uint8_t
n
uint32_t
value
)
;
int16_t
libcrux_ml_kem_vector_portable_compress_compress_ciphertext_coefficient
(
uint8_t
coefficient_bits
uint16_t
fe
)
;
void
libcrux_ml_kem_vector_portable_ntt_ntt_step
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
v
int16_t
zeta
size_t
i
size_t
j
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_ntt_layer_1_step
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
zeta0
int16_t
zeta1
int16_t
zeta2
int16_t
zeta3
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_layer_1_step_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
int16_t
zeta0
int16_t
zeta1
int16_t
zeta2
int16_t
zeta3
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_ntt_layer_2_step
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
zeta0
int16_t
zeta1
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_layer_2_step_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
int16_t
zeta0
int16_t
zeta1
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_ntt_layer_3_step
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
zeta
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_layer_3_step_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
int16_t
zeta
)
;
void
libcrux_ml_kem_vector_portable_ntt_inv_ntt_step
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
v
int16_t
zeta
size_t
i
size_t
j
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_inv_ntt_layer_1_step
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
zeta0
int16_t
zeta1
int16_t
zeta2
int16_t
zeta3
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_inv_ntt_layer_1_step_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
int16_t
zeta0
int16_t
zeta1
int16_t
zeta2
int16_t
zeta3
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_inv_ntt_layer_2_step
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
zeta0
int16_t
zeta1
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_inv_ntt_layer_2_step_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
int16_t
zeta0
int16_t
zeta1
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_inv_ntt_layer_3_step
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
int16_t
zeta
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_inv_ntt_layer_3_step_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
int16_t
zeta
)
;
void
libcrux_ml_kem_vector_portable_ntt_ntt_multiply_binomials
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
a
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
b
int16_t
zeta
size_t
i
size_t
j
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
out
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_ntt_multiply
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
lhs
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
rhs
int16_t
zeta0
int16_t
zeta1
int16_t
zeta2
int16_t
zeta3
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_ntt_multiply_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
lhs
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
rhs
int16_t
zeta0
int16_t
zeta1
int16_t
zeta2
int16_t
zeta3
)
;
void
libcrux_ml_kem_vector_portable_serialize_serialize_1
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
uint8_t
ret
[
2U
]
)
;
void
libcrux_ml_kem_vector_portable_serialize_1_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
uint8_t
ret
[
2U
]
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_serialize_deserialize_1
(
Eurydice_slice
v
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_deserialize_1_0d
(
Eurydice_slice
a
)
;
typedef
struct
uint8_t_x4_s
{
uint8_t
fst
;
uint8_t
snd
;
uint8_t
thd
;
uint8_t
f3
;
}
uint8_t_x4
;
uint8_t_x4
libcrux_ml_kem_vector_portable_serialize_serialize_4_int
(
Eurydice_slice
v
)
;
void
libcrux_ml_kem_vector_portable_serialize_serialize_4
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
uint8_t
ret
[
8U
]
)
;
void
libcrux_ml_kem_vector_portable_serialize_4_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
uint8_t
ret
[
8U
]
)
;
int16_t_x8
libcrux_ml_kem_vector_portable_serialize_deserialize_4_int
(
Eurydice_slice
bytes
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_serialize_deserialize_4
(
Eurydice_slice
bytes
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_deserialize_4_0d
(
Eurydice_slice
a
)
;
typedef
struct
uint8_t_x5_s
{
uint8_t
fst
;
uint8_t
snd
;
uint8_t
thd
;
uint8_t
f3
;
uint8_t
f4
;
}
uint8_t_x5
;
uint8_t_x5
libcrux_ml_kem_vector_portable_serialize_serialize_5_int
(
Eurydice_slice
v
)
;
void
libcrux_ml_kem_vector_portable_serialize_serialize_5
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
uint8_t
ret
[
10U
]
)
;
void
libcrux_ml_kem_vector_portable_serialize_5_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
uint8_t
ret
[
10U
]
)
;
int16_t_x8
libcrux_ml_kem_vector_portable_serialize_deserialize_5_int
(
Eurydice_slice
bytes
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_serialize_deserialize_5
(
Eurydice_slice
bytes
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_deserialize_5_0d
(
Eurydice_slice
a
)
;
uint8_t_x5
libcrux_ml_kem_vector_portable_serialize_serialize_10_int
(
Eurydice_slice
v
)
;
void
libcrux_ml_kem_vector_portable_serialize_serialize_10
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
uint8_t
ret
[
20U
]
)
;
void
libcrux_ml_kem_vector_portable_serialize_10_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
uint8_t
ret
[
20U
]
)
;
int16_t_x8
libcrux_ml_kem_vector_portable_serialize_deserialize_10_int
(
Eurydice_slice
bytes
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_serialize_deserialize_10
(
Eurydice_slice
bytes
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_deserialize_10_0d
(
Eurydice_slice
a
)
;
typedef
struct
uint8_t_x3_s
{
uint8_t
fst
;
uint8_t
snd
;
uint8_t
thd
;
}
uint8_t_x3
;
uint8_t_x3
libcrux_ml_kem_vector_portable_serialize_serialize_12_int
(
Eurydice_slice
v
)
;
void
libcrux_ml_kem_vector_portable_serialize_serialize_12
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
v
uint8_t
ret
[
24U
]
)
;
void
libcrux_ml_kem_vector_portable_serialize_12_0d
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
a
uint8_t
ret
[
24U
]
)
;
typedef
struct
int16_t_x2_s
{
int16_t
fst
;
int16_t
snd
;
}
int16_t_x2
;
int16_t_x2
libcrux_ml_kem_vector_portable_serialize_deserialize_12_int
(
Eurydice_slice
bytes
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_serialize_deserialize_12
(
Eurydice_slice
bytes
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_deserialize_12_0d
(
Eurydice_slice
a
)
;
size_t
libcrux_ml_kem_vector_portable_sampling_rej_sample
(
Eurydice_slice
a
Eurydice_slice
result
)
;
size_t
libcrux_ml_kem_vector_portable_rej_sample_0d
(
Eurydice_slice
a
Eurydice_slice
out
)
;
libcrux_ml_kem_vector_portable_vector_type_PortableVector
libcrux_ml_kem_vector_portable_vector_type_clone_3b
(
libcrux_ml_kem_vector_portable_vector_type_PortableVector
*
self
)
;
#
if
defined
(
__cplusplus
)
}
#
endif
#
define
__libcrux_mlkem_portable_H_DEFINED
#
endif
