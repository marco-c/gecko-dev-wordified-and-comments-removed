#
ifndef
__sslexp_h_
#
define
__sslexp_h_
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
SEC_BEGIN_PROTOS
#
define
SSL_EXPERIMENTAL_API
(
name
arglist
args
)
\
(
SSL_GetExperimentalAPI
(
name
)
\
?
(
(
SECStatus
(
*
)
arglist
)
SSL_GetExperimentalAPI
(
name
)
)
args
\
:
SECFailure
)
#
define
SSL_DEPRECATED_EXPERIMENTAL_API
\
(
PR_SetError
(
SSL_ERROR_UNSUPPORTED_EXPERIMENTAL_API
0
)
SECFailure
)
typedef
enum
{
ssl_ext_none
ssl_ext_native
ssl_ext_native_only
}
SSLExtensionSupport
;
#
define
SSL_GetExtensionSupport
(
extension
support
)
\
SSL_EXPERIMENTAL_API
(
"
SSL_GetExtensionSupport
"
\
(
PRUint16
_extension
\
SSLExtensionSupport
*
_support
)
\
(
extension
support
)
)
typedef
PRBool
(
PR_CALLBACK
*
SSLExtensionWriter
)
(
PRFileDesc
*
fd
SSLHandshakeType
message
PRUint8
*
data
unsigned
int
*
len
unsigned
int
maxLen
void
*
arg
)
;
typedef
SECStatus
(
PR_CALLBACK
*
SSLExtensionHandler
)
(
PRFileDesc
*
fd
SSLHandshakeType
message
const
PRUint8
*
data
unsigned
int
len
SSLAlertDescription
*
alert
void
*
arg
)
;
#
define
SSL_InstallExtensionHooks
(
fd
extension
writer
writerArg
\
handler
handlerArg
)
\
SSL_EXPERIMENTAL_API
(
"
SSL_InstallExtensionHooks
"
\
(
PRFileDesc
*
_fd
PRUint16
_extension
\
SSLExtensionWriter
_writer
void
*
_writerArg
\
SSLExtensionHandler
_handler
void
*
_handlerArg
)
\
(
fd
extension
writer
writerArg
\
handler
handlerArg
)
)
#
define
SSL_SetupAntiReplay
(
window
k
bits
)
\
SSL_EXPERIMENTAL_API
(
"
SSL_SetupAntiReplay
"
\
(
PRTime
_window
unsigned
int
_k
unsigned
int
_bits
)
\
(
window
k
bits
)
)
#
define
SSL_SendSessionTicket
(
fd
appToken
appTokenLen
)
\
SSL_EXPERIMENTAL_API
(
"
SSL_SendSessionTicket
"
\
(
PRFileDesc
*
_fd
const
PRUint8
*
_appToken
\
unsigned
int
_appTokenLen
)
\
(
fd
appToken
appTokenLen
)
)
typedef
enum
{
ssl_hello_retry_fail
ssl_hello_retry_accept
ssl_hello_retry_request
}
SSLHelloRetryRequestAction
;
typedef
SSLHelloRetryRequestAction
(
PR_CALLBACK
*
SSLHelloRetryRequestCallback
)
(
PRBool
firstHello
const
PRUint8
*
clientToken
unsigned
int
clientTokenLen
PRUint8
*
retryToken
unsigned
int
*
retryTokenLen
unsigned
int
retryTokMax
void
*
arg
)
;
#
define
SSL_HelloRetryRequestCallback
(
fd
cb
arg
)
\
SSL_EXPERIMENTAL_API
(
"
SSL_HelloRetryRequestCallback
"
\
(
PRFileDesc
*
_fd
\
SSLHelloRetryRequestCallback
_cb
void
*
_arg
)
\
(
fd
cb
arg
)
)
#
define
SSL_KeyUpdate
(
fd
requestUpdate
)
\
SSL_EXPERIMENTAL_API
(
"
SSL_KeyUpdate
"
\
(
PRFileDesc
*
_fd
PRBool
_requestUpdate
)
\
(
fd
requestUpdate
)
)
typedef
struct
SSLResumptionTokenInfoStr
{
PRUint16
length
;
CERTCertificate
*
peerCert
;
PRUint8
*
alpnSelection
;
PRUint32
alpnSelectionLen
;
PRUint32
maxEarlyDataSize
;
}
SSLResumptionTokenInfo
;
#
define
SSL_GetResumptionTokenInfo
(
tokenData
tokenLen
token
len
)
\
SSL_EXPERIMENTAL_API
(
"
SSL_GetResumptionTokenInfo
"
\
(
const
PRUint8
*
_tokenData
unsigned
int
_tokenLen
\
SSLResumptionTokenInfo
*
_token
PRUintn
_len
)
\
(
tokenData
tokenLen
token
len
)
)
#
define
SSL_DestroyResumptionTokenInfo
(
tokenInfo
)
\
SSL_EXPERIMENTAL_API
(
\
"
SSL_DestroyResumptionTokenInfo
"
\
(
SSLResumptionTokenInfo
*
_tokenInfo
)
\
(
tokenInfo
)
)
typedef
SECStatus
(
PR_CALLBACK
*
SSLResumptionTokenCallback
)
(
PRFileDesc
*
fd
const
PRUint8
*
resumptionToken
unsigned
int
len
void
*
ctx
)
;
#
define
SSL_SetResumptionTokenCallback
(
fd
cb
ctx
)
\
SSL_EXPERIMENTAL_API
(
\
"
SSL_SetResumptionTokenCallback
"
\
(
PRFileDesc
*
_fd
SSLResumptionTokenCallback
_cb
void
*
_ctx
)
\
(
fd
cb
ctx
)
)
#
define
SSL_SetResumptionToken
(
fd
token
len
)
\
SSL_EXPERIMENTAL_API
(
\
"
SSL_SetResumptionToken
"
\
(
PRFileDesc
*
_fd
const
PRUint8
*
_token
const
unsigned
int
_len
)
\
(
fd
token
len
)
)
#
define
SSL_SetMaxEarlyDataSize
(
fd
size
)
\
SSL_EXPERIMENTAL_API
(
"
SSL_SetMaxEarlyDataSize
"
\
(
PRFileDesc
*
_fd
PRUint32
_size
)
\
(
fd
size
)
)
#
define
SSL_UseAltServerHelloType
(
fd
enable
)
SSL_DEPRECATED_EXPERIMENTAL_API
SEC_END_PROTOS
#
endif
