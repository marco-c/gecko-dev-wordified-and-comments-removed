#
ifndef
__sslimpl_h_
#
define
__sslimpl_h_
#
ifdef
DEBUG
#
undef
NDEBUG
#
else
#
undef
NDEBUG
#
define
NDEBUG
#
endif
#
include
"
secport
.
h
"
#
include
"
secerr
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
ssl3prot
.
h
"
#
include
"
hasht
.
h
"
#
include
"
nssilock
.
h
"
#
include
"
pkcs11t
.
h
"
#
if
defined
(
XP_UNIX
)
|
|
defined
(
XP_BEOS
)
#
include
"
unistd
.
h
"
#
endif
#
include
"
nssrwlk
.
h
"
#
include
"
prthread
.
h
"
#
include
"
prclist
.
h
"
#
include
"
private
/
pprthred
.
h
"
#
include
"
sslt
.
h
"
typedef
struct
sslSocketStr
sslSocket
;
#
include
"
ssl3ext
.
h
"
typedef
SSLMACAlgorithm
SSL3MACAlgorithm
;
#
define
calg_null
ssl_calg_null
#
define
calg_rc4
ssl_calg_rc4
#
define
calg_rc2
ssl_calg_rc2
#
define
calg_des
ssl_calg_des
#
define
calg_3des
ssl_calg_3des
#
define
calg_idea
ssl_calg_idea
#
define
calg_fortezza
ssl_calg_fortezza
/
*
deprecated
must
preserve
*
/
#
define
calg_aes
ssl_calg_aes
#
define
calg_camellia
ssl_calg_camellia
#
define
calg_seed
ssl_calg_seed
#
define
calg_aes_gcm
ssl_calg_aes_gcm
#
define
calg_chacha20
ssl_calg_chacha20
#
define
mac_null
ssl_mac_null
#
define
mac_md5
ssl_mac_md5
#
define
mac_sha
ssl_mac_sha
#
define
hmac_md5
ssl_hmac_md5
#
define
hmac_sha
ssl_hmac_sha
#
define
hmac_sha256
ssl_hmac_sha256
#
define
hmac_sha384
ssl_hmac_sha384
#
define
mac_aead
ssl_mac_aead
#
if
defined
(
DEBUG
)
|
|
defined
(
TRACE
)
#
ifdef
__cplusplus
#
define
Debug
1
#
else
extern
int
Debug
;
#
endif
#
else
#
undef
Debug
#
endif
#
if
defined
(
DEBUG
)
&
&
!
defined
(
TRACE
)
&
&
!
defined
(
NISCC_TEST
)
#
define
TRACE
#
endif
#
ifdef
TRACE
#
define
SSL_TRC
(
a
b
)
\
if
(
ssl_trace
>
=
(
a
)
)
\
ssl_Trace
b
#
define
PRINT_BUF
(
a
b
)
\
if
(
ssl_trace
>
=
(
a
)
)
\
ssl_PrintBuf
b
#
define
PRINT_KEY
(
a
b
)
\
if
(
ssl_trace
>
=
(
a
)
)
\
ssl_PrintKey
b
#
else
#
define
SSL_TRC
(
a
b
)
#
define
PRINT_BUF
(
a
b
)
#
define
PRINT_KEY
(
a
b
)
#
endif
#
ifdef
DEBUG
#
define
SSL_DBG
(
b
)
\
if
(
ssl_debug
)
\
ssl_Trace
b
#
else
#
define
SSL_DBG
(
b
)
#
endif
#
define
LSB
(
x
)
(
(
unsigned
char
)
(
(
x
)
&
0xff
)
)
#
define
MSB
(
x
)
(
(
unsigned
char
)
(
(
(
unsigned
)
(
x
)
)
>
>
8
)
)
#
define
CONST_CAST
(
T
X
)
(
(
T
*
)
(
X
)
)
typedef
enum
{
SSLAppOpRead
=
0
SSLAppOpWrite
SSLAppOpRDWR
SSLAppOpPost
SSLAppOpHeader
}
SSLAppOperation
;
#
define
SSL3_SESSIONID_BYTES
32
#
define
SSL_MIN_CHALLENGE_BYTES
16
#
define
SSL_MAX_CHALLENGE_BYTES
32
#
define
SSL3_MASTER_SECRET_LENGTH
48
#
define
SSL_NUM_WRAP_MECHS
16
#
define
SSL_MAX_CACHED_CERT_LEN
4060
#
ifndef
BPB
#
define
BPB
8
/
*
Bits
Per
Byte
*
/
#
endif
#
define
DTLS_RETRANSMIT_INITIAL_MS
50
#
define
DTLS_RETRANSMIT_MAX_MS
10000
#
define
DTLS_RETRANSMIT_FINISHED_MS
30000
#
define
SSL_NAMED_GROUP_COUNT
31
typedef
enum
{
ec_type_explicitPrime
=
1
ec_type_explicitChar2Curve
=
2
ec_type_named
=
3
}
ECType
;
typedef
enum
{
ticket_allow_early_data
=
1
ticket_allow_psk_ke
=
2
ticket_allow_psk_dhe_ke
=
4
ticket_allow_psk_auth
=
8
ticket_allow_psk_sign_auth
=
16
}
TLS13SessionTicketFlags
;
typedef
struct
{
SSLNamedGroup
name
;
unsigned
int
bits
;
SSLKEAType
keaType
;
SECOidTag
oidTag
;
PRBool
assumeSupported
;
}
sslNamedGroupDef
;
typedef
struct
sslBufferStr
sslBuffer
;
typedef
struct
sslConnectInfoStr
sslConnectInfo
;
typedef
struct
sslGatherStr
sslGather
;
typedef
struct
sslSecurityInfoStr
sslSecurityInfo
;
typedef
struct
sslSessionIDStr
sslSessionID
;
typedef
struct
sslSocketOpsStr
sslSocketOps
;
typedef
struct
ssl3StateStr
ssl3State
;
typedef
struct
ssl3CertNodeStr
ssl3CertNode
;
typedef
struct
ssl3BulkCipherDefStr
ssl3BulkCipherDef
;
typedef
struct
ssl3MACDefStr
ssl3MACDef
;
typedef
struct
sslKeyPairStr
sslKeyPair
;
typedef
struct
ssl3DHParamsStr
ssl3DHParams
;
struct
ssl3CertNodeStr
{
struct
ssl3CertNodeStr
*
next
;
CERTCertificate
*
cert
;
}
;
typedef
SECStatus
(
*
sslHandshakeFunc
)
(
sslSocket
*
ss
)
;
typedef
void
(
*
sslSessionIDCacheFunc
)
(
sslSessionID
*
sid
)
;
typedef
void
(
*
sslSessionIDUncacheFunc
)
(
sslSessionID
*
sid
)
;
typedef
sslSessionID
*
(
*
sslSessionIDLookupFunc
)
(
const
PRIPv6Addr
*
addr
unsigned
char
*
sid
unsigned
int
sidLen
CERTCertDBHandle
*
dbHandle
)
;
struct
sslSocketOpsStr
{
int
(
*
connect
)
(
sslSocket
*
const
PRNetAddr
*
)
;
PRFileDesc
*
(
*
accept
)
(
sslSocket
*
PRNetAddr
*
)
;
int
(
*
bind
)
(
sslSocket
*
const
PRNetAddr
*
)
;
int
(
*
listen
)
(
sslSocket
*
int
)
;
int
(
*
shutdown
)
(
sslSocket
*
int
)
;
int
(
*
close
)
(
sslSocket
*
)
;
int
(
*
recv
)
(
sslSocket
*
unsigned
char
*
int
int
)
;
int
(
*
send
)
(
sslSocket
*
const
unsigned
char
*
int
int
)
;
int
(
*
read
)
(
sslSocket
*
unsigned
char
*
int
)
;
int
(
*
write
)
(
sslSocket
*
const
unsigned
char
*
int
)
;
int
(
*
getpeername
)
(
sslSocket
*
PRNetAddr
*
)
;
int
(
*
getsockname
)
(
sslSocket
*
PRNetAddr
*
)
;
}
;
#
define
ssl_SEND_FLAG_FORCE_INTO_BUFFER
0x40000000
#
define
ssl_SEND_FLAG_NO_BUFFER
0x20000000
#
define
ssl_SEND_FLAG_NO_RETRANSMIT
0x08000000
/
*
DTLS
only
*
/
#
define
ssl_SEND_FLAG_CAP_RECORD_VERSION
\
0x04000000
/
*
TLS
only
*
/
#
define
ssl_SEND_FLAG_MASK
0x7f000000
struct
sslBufferStr
{
unsigned
char
*
buf
;
unsigned
int
len
;
unsigned
int
space
;
}
;
typedef
struct
{
#
if
!
defined
(
_WIN32
)
unsigned
int
cipher_suite
:
16
;
unsigned
int
policy
:
8
;
unsigned
int
enabled
:
1
;
unsigned
int
isPresent
:
1
;
#
else
ssl3CipherSuite
cipher_suite
;
PRUint8
policy
;
unsigned
char
enabled
:
1
;
unsigned
char
isPresent
:
1
;
#
endif
}
ssl3CipherSuiteCfg
;
#
define
ssl_V3_SUITES_IMPLEMENTED
71
#
define
MAX_DTLS_SRTP_CIPHER_SUITES
4
#
define
MAX_SIGNATURE_SCHEMES
15
typedef
struct
sslOptionsStr
{
SECItem
nextProtoNego
;
unsigned
int
useSecurity
:
1
;
unsigned
int
useSocks
:
1
;
unsigned
int
requestCertificate
:
1
;
unsigned
int
requireCertificate
:
2
;
unsigned
int
handshakeAsClient
:
1
;
unsigned
int
handshakeAsServer
:
1
;
unsigned
int
noCache
:
1
;
unsigned
int
fdx
:
1
;
unsigned
int
detectRollBack
:
1
;
unsigned
int
noLocks
:
1
;
unsigned
int
enableSessionTickets
:
1
;
unsigned
int
enableDeflate
:
1
;
unsigned
int
enableRenegotiation
:
2
;
unsigned
int
requireSafeNegotiation
:
1
;
unsigned
int
enableFalseStart
:
1
;
unsigned
int
cbcRandomIV
:
1
;
unsigned
int
enableOCSPStapling
:
1
;
unsigned
int
enableNPN
:
1
;
unsigned
int
enableALPN
:
1
;
unsigned
int
reuseServerECDHEKey
:
1
;
unsigned
int
enableFallbackSCSV
:
1
;
unsigned
int
enableServerDhe
:
1
;
unsigned
int
enableExtendedMS
:
1
;
unsigned
int
enableSignedCertTimestamps
:
1
;
unsigned
int
requireDHENamedGroups
:
1
;
unsigned
int
enable0RttData
:
1
;
}
sslOptions
;
typedef
enum
{
sslHandshakingUndetermined
=
0
sslHandshakingAsClient
sslHandshakingAsServer
}
sslHandshakingType
;
#
define
SSL_LOCK_RANK_SPEC
255
#
define
ssl_SHUTDOWN_NONE
0
/
*
NOT
shutdown
at
all
*
/
#
define
ssl_SHUTDOWN_RCV
1
/
*
PR_SHUTDOWN_RCV
+
1
*
/
#
define
ssl_SHUTDOWN_SEND
2
/
*
PR_SHUTDOWN_SEND
+
1
*
/
#
define
ssl_SHUTDOWN_BOTH
3
/
*
PR_SHUTDOWN_BOTH
+
1
*
/
struct
sslGatherStr
{
int
state
;
sslBuffer
buf
;
unsigned
int
offset
;
unsigned
int
remainder
;
unsigned
int
readOffset
;
unsigned
int
writeOffset
;
sslBuffer
inbuf
;
unsigned
char
hdr
[
13
]
;
sslBuffer
dtlsPacket
;
unsigned
int
dtlsPacketOffset
;
}
;
#
define
GS_INIT
0
#
define
GS_HEADER
1
#
define
GS_DATA
2
typedef
enum
{
cipher_null
cipher_rc4
cipher_des
cipher_3des
cipher_aes_128
cipher_aes_256
cipher_camellia_128
cipher_camellia_256
cipher_seed
cipher_aes_128_gcm
cipher_aes_256_gcm
cipher_chacha20
cipher_missing
}
SSL3BulkCipher
;
typedef
enum
{
type_stream
type_block
type_aead
}
CipherType
;
#
define
MAX_IV_LENGTH
24
typedef
PRUint64
sslSequenceNumber
;
typedef
PRUint16
DTLSEpoch
;
typedef
void
(
*
DTLSTimerCb
)
(
sslSocket
*
)
;
typedef
struct
{
SSL3Opaque
wrapped_master_secret
[
48
]
;
PRUint16
wrapped_master_secret_len
;
PRUint8
msIsWrapped
;
PRUint8
resumable
;
PRUint8
extendedMasterSecretUsed
;
}
ssl3SidKeys
;
typedef
struct
{
PK11SymKey
*
write_key
;
PK11SymKey
*
write_mac_key
;
PK11Context
*
write_mac_context
;
SECItem
write_key_item
;
SECItem
write_iv_item
;
SECItem
write_mac_key_item
;
SSL3Opaque
write_iv
[
MAX_IV_LENGTH
]
;
}
ssl3KeyMaterial
;
typedef
SECStatus
(
*
SSLCipher
)
(
void
*
context
unsigned
char
*
out
int
*
outlen
int
maxout
const
unsigned
char
*
in
int
inlen
)
;
typedef
SECStatus
(
*
SSLAEADCipher
)
(
ssl3KeyMaterial
*
keys
PRBool
doDecrypt
unsigned
char
*
out
int
*
outlen
int
maxout
const
unsigned
char
*
in
int
inlen
const
unsigned
char
*
additionalData
int
additionalDataLen
)
;
typedef
SECStatus
(
*
SSLCompressor
)
(
void
*
context
unsigned
char
*
out
int
*
outlen
int
maxout
const
unsigned
char
*
in
int
inlen
)
;
typedef
SECStatus
(
*
SSLDestroy
)
(
void
*
context
PRBool
freeit
)
;
#
define
DTLS_RECVD_RECORDS_WINDOW
1024
#
define
RECORD_SEQ_MAX
(
(
1ULL
<
<
48
)
-
1
)
PR_STATIC_ASSERT
(
DTLS_RECVD_RECORDS_WINDOW
%
8
=
=
0
)
;
typedef
struct
DTLSRecvdRecordsStr
{
unsigned
char
data
[
DTLS_RECVD_RECORDS_WINDOW
/
8
]
;
sslSequenceNumber
left
;
sslSequenceNumber
right
;
}
DTLSRecvdRecords
;
typedef
struct
{
PRCList
link
;
const
ssl3BulkCipherDef
*
cipher_def
;
const
ssl3MACDef
*
mac_def
;
SSLCompressionMethod
compression_method
;
int
mac_size
;
SSLCipher
encode
;
SSLCipher
decode
;
SSLAEADCipher
aead
;
void
*
encodeContext
;
void
*
decodeContext
;
SSLCompressor
compressor
;
SSLCompressor
decompressor
;
SSLDestroy
destroyCompressContext
;
void
*
compressContext
;
SSLDestroy
destroyDecompressContext
;
void
*
decompressContext
;
PK11SymKey
*
master_secret
;
sslSequenceNumber
write_seq_num
;
sslSequenceNumber
read_seq_num
;
SSL3ProtocolVersion
version
;
ssl3KeyMaterial
client
;
ssl3KeyMaterial
server
;
SECItem
msItem
;
DTLSEpoch
epoch
;
DTLSRecvdRecords
recvdRecords
;
PRUint8
refCt
;
const
char
*
phase
;
}
ssl3CipherSpec
;
typedef
enum
{
never_cached
in_client_cache
in_server_cache
invalid_cache
}
Cached
;
#
include
"
sslcert
.
h
"
struct
sslSessionIDStr
{
sslSessionID
*
next
;
Cached
cached
;
int
references
;
PRUint32
lastAccessTime
;
CERTCertificate
*
peerCert
;
SECItemArray
peerCertStatus
;
const
char
*
peerID
;
const
char
*
urlSvrName
;
sslServerCertType
certType
;
CERTCertificate
*
localCert
;
PRIPv6Addr
addr
;
PRUint16
port
;
SSL3ProtocolVersion
version
;
PRUint32
creationTime
;
PRUint32
expirationTime
;
SSLAuthType
authType
;
PRUint32
authKeyBits
;
SSLKEAType
keaType
;
PRUint32
keaKeyBits
;
union
{
struct
{
PRUint8
sessionIDLength
;
SSL3Opaque
sessionID
[
SSL3_SESSIONID_BYTES
]
;
ssl3CipherSuite
cipherSuite
;
SSLCompressionMethod
compression
;
int
policy
;
ssl3SidKeys
keys
;
CK_MECHANISM_TYPE
masterWrapMech
;
PK11SymKey
*
clientWriteKey
;
PK11SymKey
*
serverWriteKey
;
SECMODModuleID
masterModuleID
;
CK_SLOT_ID
masterSlotID
;
PRUint16
masterWrapIndex
;
PRUint16
masterWrapSeries
;
SECMODModuleID
clAuthModuleID
;
CK_SLOT_ID
clAuthSlotID
;
PRUint16
clAuthSeries
;
char
masterValid
;
char
clAuthValid
;
SECItem
srvName
;
SECItem
signedCertTimestamps
;
SECItem
alpnSelection
;
PRRWLock
*
lock
;
struct
{
NewSessionTicket
sessionTicket
;
}
locked
;
}
ssl3
;
}
u
;
}
;
typedef
struct
ssl3CipherSuiteDefStr
{
ssl3CipherSuite
cipher_suite
;
SSL3BulkCipher
bulk_cipher_alg
;
SSL3MACAlgorithm
mac_alg
;
SSL3KeyExchangeAlgorithm
key_exchange_alg
;
SSLHashType
prf_hash
;
}
ssl3CipherSuiteDef
;
typedef
struct
{
SSL3KeyExchangeAlgorithm
kea
;
SSLKEAType
exchKeyType
;
KeyType
signKeyType
;
SSLAuthType
authKeyType
;
PRBool
ephemeral
;
SECOidTag
oid
;
}
ssl3KEADef
;
struct
ssl3BulkCipherDefStr
{
SSL3BulkCipher
cipher
;
SSLCipherAlgorithm
calg
;
unsigned
int
key_size
;
unsigned
int
secret_key_size
;
CipherType
type
;
unsigned
int
iv_size
;
unsigned
int
block_size
;
unsigned
int
tag_size
;
unsigned
int
explicit_nonce_size
;
SECOidTag
oid
;
const
char
*
short_name
;
PRUint64
max_records
;
}
;
struct
ssl3MACDefStr
{
SSL3MACAlgorithm
mac
;
CK_MECHANISM_TYPE
mmech
;
int
pad_size
;
int
mac_size
;
SECOidTag
oid
;
}
;
typedef
enum
{
ssl_0rtt_none
ssl_0rtt_sent
ssl_0rtt_accepted
ssl_0rtt_ignored
ssl_0rtt_done
}
sslZeroRttState
;
typedef
enum
{
ssl_0rtt_ignore_none
ssl_0rtt_ignore_trial
ssl_0rtt_ignore_hrr
}
sslZeroRttIgnore
;
typedef
enum
{
idle_handshake
wait_client_hello
wait_client_cert
wait_client_key
wait_cert_verify
wait_change_cipher
wait_finished
wait_server_hello
wait_certificate_status
wait_server_cert
wait_server_key
wait_cert_request
wait_hello_done
wait_new_session_ticket
wait_encrypted_extensions
wait_invalid
}
SSL3WaitState
;
typedef
enum
{
client_hello_initial
client_hello_retry
client_hello_retransmit
client_hello_renegotiation
}
sslClientHelloType
;
typedef
struct
SessionTicketDataStr
SessionTicketData
;
typedef
SECStatus
(
*
sslRestartTarget
)
(
sslSocket
*
)
;
typedef
struct
DTLSQueuedMessageStr
{
PRCList
link
;
ssl3CipherSpec
*
cwSpec
;
SSL3ContentType
type
;
unsigned
char
*
data
;
PRUint16
len
;
}
DTLSQueuedMessage
;
typedef
struct
TLS13KeyShareEntryStr
{
PRCList
link
;
const
sslNamedGroupDef
*
group
;
SECItem
key_exchange
;
}
TLS13KeyShareEntry
;
typedef
struct
TLS13EarlyDataStr
{
PRCList
link
;
SECItem
data
;
}
TLS13EarlyData
;
typedef
enum
{
handshake_hash_unknown
=
0
handshake_hash_combo
=
1
handshake_hash_single
=
2
handshake_hash_record
}
SSL3HandshakeHashType
;
typedef
struct
TLS13CertificateRequestStr
{
PLArenaPool
*
arena
;
SECItem
context
;
SSLSignatureScheme
*
signatureSchemes
;
unsigned
int
signatureSchemeCount
;
CERTDistNames
ca_list
;
}
TLS13CertificateRequest
;
typedef
struct
SSL3HandshakeStateStr
{
SSL3Random
server_random
;
SSL3Random
client_random
;
SSL3WaitState
ws
;
SSL3HandshakeHashType
hashType
;
sslBuffer
messages
;
PK11Context
*
md5
;
PK11Context
*
sha
;
SSLSignatureScheme
signatureScheme
;
const
ssl3KEADef
*
kea_def
;
ssl3CipherSuite
cipher_suite
;
const
ssl3CipherSuiteDef
*
suite_def
;
SSLCompressionMethod
compression
;
sslBuffer
msg_body
;
unsigned
int
header_bytes
;
SSL3HandshakeType
msg_type
;
unsigned
long
msg_len
;
PRBool
isResuming
;
PRBool
sendingSCSV
;
sslBuffer
msgState
;
PRBool
receivedNewSessionTicket
;
NewSessionTicket
newSessionTicket
;
PRUint16
finishedBytes
;
union
{
TLSFinished
tFinished
[
2
]
;
SSL3Finished
sFinished
[
2
]
;
SSL3Opaque
data
[
72
]
;
}
finishedMsgs
;
PRBool
authCertificatePending
;
sslRestartTarget
restartTarget
;
PRBool
cacheSID
;
PRBool
canFalseStart
;
PRUint32
preliminaryInfo
;
PRCList
remoteExtensions
;
PRUint16
sendMessageSeq
;
PRCList
lastMessageFlight
;
PRUint16
maxMessageSent
;
PRUint16
recvMessageSeq
;
sslBuffer
recvdFragments
;
PRInt32
recvdHighWater
;
SECItem
cookie
;
PRIntervalTime
rtTimerStarted
;
DTLSTimerCb
rtTimerCb
;
PRUint32
rtTimeoutMs
;
PRUint32
rtRetries
;
SECItem
srvVirtName
;
PK11SymKey
*
currentSecret
;
PK11SymKey
*
resumptionMasterSecret
;
PK11SymKey
*
dheSecret
;
PK11SymKey
*
pskBinderKey
;
PK11SymKey
*
clientEarlyTrafficSecret
;
PK11SymKey
*
clientHsTrafficSecret
;
PK11SymKey
*
serverHsTrafficSecret
;
PK11SymKey
*
clientTrafficSecret
;
PK11SymKey
*
serverTrafficSecret
;
PK11SymKey
*
earlyExporterSecret
;
PK11SymKey
*
exporterSecret
;
TLS13CertificateRequest
*
certificateRequest
;
PRCList
cipherSpecs
;
ssl3CipherSpec
*
nullSpec
;
sslZeroRttState
zeroRttState
;
sslZeroRttIgnore
zeroRttIgnore
;
ssl3CipherSuite
zeroRttSuite
;
PRCList
bufferedEarlyData
;
PRBool
helloRetry
;
ssl3KEADef
kea_def_mutable
;
}
SSL3HandshakeState
;
struct
ssl3StateStr
{
ssl3CipherSpec
*
crSpec
;
ssl3CipherSpec
*
prSpec
;
ssl3CipherSpec
*
cwSpec
;
ssl3CipherSpec
*
pwSpec
;
CERTCertificate
*
clientCertificate
;
SECKEYPrivateKey
*
clientPrivateKey
;
CERTCertificateList
*
clientCertChain
;
PRBool
sendEmptyCert
;
int
policy
;
PLArenaPool
*
peerCertArena
;
void
*
peerCertChain
;
CERTDistNames
*
ca_list
;
PRBool
initialized
;
SSL3HandshakeState
hs
;
ssl3CipherSpec
specs
[
2
]
;
PRUint16
mtu
;
PRUint16
dtlsSRTPCiphers
[
MAX_DTLS_SRTP_CIPHER_SUITES
]
;
PRUint16
dtlsSRTPCipherCount
;
PRBool
fatalAlertSent
;
PRBool
dheWeakGroupEnabled
;
const
sslNamedGroupDef
*
dhePreferredGroup
;
SSLSignatureScheme
signatureSchemes
[
MAX_SIGNATURE_SCHEMES
]
;
unsigned
int
signatureSchemeCount
;
SSL3ProtocolVersion
downgradeCheckVersion
;
}
;
#
define
DTLS_MAX_MTU
1500U
#
define
IS_DTLS
(
ss
)
(
ss
-
>
protocolVariant
=
=
ssl_variant_datagram
)
typedef
struct
{
SSL3ContentType
type
;
SSL3ProtocolVersion
version
;
sslSequenceNumber
seq_num
;
sslBuffer
*
buf
;
}
SSL3Ciphertext
;
struct
sslKeyPairStr
{
SECKEYPrivateKey
*
privKey
;
SECKEYPublicKey
*
pubKey
;
PRInt32
refCount
;
}
;
typedef
struct
{
PRCList
link
;
const
sslNamedGroupDef
*
group
;
sslKeyPair
*
keys
;
}
sslEphemeralKeyPair
;
struct
ssl3DHParamsStr
{
SSLNamedGroup
name
;
SECItem
prime
;
SECItem
base
;
}
;
typedef
struct
SSLWrappedSymWrappingKeyStr
{
SSL3Opaque
wrappedSymmetricWrappingkey
[
512
]
;
CK_MECHANISM_TYPE
symWrapMechanism
;
CK_MECHANISM_TYPE
asymWrapMechanism
;
SSLAuthType
authType
;
PRInt32
symWrapMechIndex
;
PRUint16
wrappedSymKeyLen
;
}
SSLWrappedSymWrappingKey
;
typedef
struct
SessionTicketStr
{
PRUint16
ticket_version
;
SSL3ProtocolVersion
ssl_version
;
ssl3CipherSuite
cipher_suite
;
SSLCompressionMethod
compression_method
;
SSLAuthType
authType
;
PRUint32
authKeyBits
;
SSLKEAType
keaType
;
PRUint32
keaKeyBits
;
sslServerCertType
certType
;
PRUint8
ms_is_wrapped
;
CK_MECHANISM_TYPE
msWrapMech
;
PRUint16
ms_length
;
SSL3Opaque
master_secret
[
48
]
;
PRBool
extendedMasterSecretUsed
;
ClientIdentity
client_identity
;
SECItem
peer_cert
;
PRUint32
timestamp
;
PRUint32
flags
;
SECItem
srvName
;
SECItem
alpnSelection
;
}
SessionTicket
;
struct
sslConnectInfoStr
{
sslBuffer
sendBuf
;
PRIPv6Addr
peer
;
unsigned
short
port
;
sslSessionID
*
sid
;
}
;
struct
sslSecurityInfoStr
{
#
define
SSL_ROLE
(
ss
)
(
ss
-
>
sec
.
isServer
?
"
server
"
:
"
client
"
)
PRBool
isServer
;
sslBuffer
writeBuf
;
CERTCertificate
*
localCert
;
CERTCertificate
*
peerCert
;
SECKEYPublicKey
*
peerKey
;
SSLAuthType
authType
;
PRUint32
authKeyBits
;
SSLSignatureScheme
signatureScheme
;
SSLKEAType
keaType
;
PRUint32
keaKeyBits
;
const
sslNamedGroupDef
*
keaGroup
;
const
sslServerCert
*
serverCert
;
sslSessionIDCacheFunc
cache
;
sslSessionIDUncacheFunc
uncache
;
sslConnectInfo
ci
;
}
;
struct
sslSocketStr
{
PRFileDesc
*
fd
;
const
sslSocketOps
*
ops
;
sslOptions
opt
;
SSLVersionRange
vrange
;
unsigned
long
clientAuthRequested
;
unsigned
long
delayDisabled
;
unsigned
long
firstHsDone
;
unsigned
long
enoughFirstHsDone
;
unsigned
long
handshakeBegun
;
unsigned
long
lastWriteBlocked
;
unsigned
long
recvdCloseNotify
;
unsigned
long
TCPconnected
;
unsigned
long
appDataBuffered
;
unsigned
long
peerRequestedProtection
;
SSL3ProtocolVersion
version
;
SSL3ProtocolVersion
clientHelloVersion
;
sslSecurityInfo
sec
;
const
char
*
url
;
sslHandshakeFunc
handshake
;
char
*
peerID
;
PRCList
ephemeralKeyPairs
;
SSLAuthCertificate
authCertificate
;
void
*
authCertificateArg
;
SSLGetClientAuthData
getClientAuthData
;
void
*
getClientAuthDataArg
;
SSLSNISocketConfig
sniSocketConfig
;
void
*
sniSocketConfigArg
;
SSLBadCertHandler
handleBadCert
;
void
*
badCertArg
;
SSLHandshakeCallback
handshakeCallback
;
void
*
handshakeCallbackData
;
SSLCanFalseStartCallback
canFalseStartCallback
;
void
*
canFalseStartCallbackData
;
void
*
pkcs11PinArg
;
SSLNextProtoCallback
nextProtoCallback
;
void
*
nextProtoArg
;
PRIntervalTime
rTimeout
;
PRIntervalTime
wTimeout
;
PRIntervalTime
cTimeout
;
PZLock
*
recvLock
;
PZLock
*
sendLock
;
PZMonitor
*
recvBufLock
;
PZMonitor
*
xmitBufLock
;
PZMonitor
*
firstHandshakeLock
;
PZMonitor
*
ssl3HandshakeLock
;
NSSRWLock
*
specLock
;
CERTCertDBHandle
*
dbHandle
;
PRThread
*
writerThread
;
PRUint16
shutdownHow
;
sslHandshakingType
handshaking
;
sslGather
gs
;
sslBuffer
saveBuf
;
sslBuffer
pendingBuf
;
PRCList
serverCerts
;
ssl3CipherSuiteCfg
cipherSuites
[
ssl_V3_SUITES_IMPLEMENTED
]
;
const
sslNamedGroupDef
*
namedGroupPreferences
[
SSL_NAMED_GROUP_COUNT
]
;
unsigned
int
additionalShares
;
ssl3State
ssl3
;
PRBool
statelessResume
;
TLSExtensionData
xtnData
;
SSLProtocolVariant
protocolVariant
;
}
;
extern
NSSRWLock
*
ssl_global_data_lock
;
extern
char
ssl_debug
;
extern
char
ssl_trace
;
extern
FILE
*
ssl_trace_iob
;
extern
FILE
*
ssl_keylog_iob
;
extern
CERTDistNames
*
ssl3_server_ca_list
;
extern
PRUint32
ssl_sid_timeout
;
extern
PRUint32
ssl3_sid_timeout
;
extern
const
char
*
const
ssl3_cipherName
[
]
;
extern
sslSessionIDLookupFunc
ssl_sid_lookup
;
extern
sslSessionIDCacheFunc
ssl_sid_cache
;
extern
sslSessionIDUncacheFunc
ssl_sid_uncache
;
extern
const
sslNamedGroupDef
ssl_named_groups
[
]
;
SEC_BEGIN_PROTOS
extern
SECStatus
ssl_Init
(
void
)
;
extern
SECStatus
ssl_InitializePRErrorTable
(
void
)
;
extern
int
ssl_DefConnect
(
sslSocket
*
ss
const
PRNetAddr
*
addr
)
;
extern
PRFileDesc
*
ssl_DefAccept
(
sslSocket
*
ss
PRNetAddr
*
addr
)
;
extern
int
ssl_DefBind
(
sslSocket
*
ss
const
PRNetAddr
*
addr
)
;
extern
int
ssl_DefListen
(
sslSocket
*
ss
int
backlog
)
;
extern
int
ssl_DefShutdown
(
sslSocket
*
ss
int
how
)
;
extern
int
ssl_DefClose
(
sslSocket
*
ss
)
;
extern
int
ssl_DefRecv
(
sslSocket
*
ss
unsigned
char
*
buf
int
len
int
flags
)
;
extern
int
ssl_DefSend
(
sslSocket
*
ss
const
unsigned
char
*
buf
int
len
int
flags
)
;
extern
int
ssl_DefRead
(
sslSocket
*
ss
unsigned
char
*
buf
int
len
)
;
extern
int
ssl_DefWrite
(
sslSocket
*
ss
const
unsigned
char
*
buf
int
len
)
;
extern
int
ssl_DefGetpeername
(
sslSocket
*
ss
PRNetAddr
*
name
)
;
extern
int
ssl_DefGetsockname
(
sslSocket
*
ss
PRNetAddr
*
name
)
;
extern
int
ssl_DefGetsockopt
(
sslSocket
*
ss
PRSockOption
optname
void
*
optval
PRInt32
*
optlen
)
;
extern
int
ssl_DefSetsockopt
(
sslSocket
*
ss
PRSockOption
optname
const
void
*
optval
PRInt32
optlen
)
;
extern
int
ssl_SocksConnect
(
sslSocket
*
ss
const
PRNetAddr
*
addr
)
;
extern
PRFileDesc
*
ssl_SocksAccept
(
sslSocket
*
ss
PRNetAddr
*
addr
)
;
extern
int
ssl_SocksBind
(
sslSocket
*
ss
const
PRNetAddr
*
addr
)
;
extern
int
ssl_SocksListen
(
sslSocket
*
ss
int
backlog
)
;
extern
int
ssl_SocksGetsockname
(
sslSocket
*
ss
PRNetAddr
*
name
)
;
extern
int
ssl_SocksRecv
(
sslSocket
*
ss
unsigned
char
*
buf
int
len
int
flags
)
;
extern
int
ssl_SocksSend
(
sslSocket
*
ss
const
unsigned
char
*
buf
int
len
int
flags
)
;
extern
int
ssl_SocksRead
(
sslSocket
*
ss
unsigned
char
*
buf
int
len
)
;
extern
int
ssl_SocksWrite
(
sslSocket
*
ss
const
unsigned
char
*
buf
int
len
)
;
extern
int
ssl_SecureConnect
(
sslSocket
*
ss
const
PRNetAddr
*
addr
)
;
extern
PRFileDesc
*
ssl_SecureAccept
(
sslSocket
*
ss
PRNetAddr
*
addr
)
;
extern
int
ssl_SecureRecv
(
sslSocket
*
ss
unsigned
char
*
buf
int
len
int
flags
)
;
extern
int
ssl_SecureSend
(
sslSocket
*
ss
const
unsigned
char
*
buf
int
len
int
flags
)
;
extern
int
ssl_SecureRead
(
sslSocket
*
ss
unsigned
char
*
buf
int
len
)
;
extern
int
ssl_SecureWrite
(
sslSocket
*
ss
const
unsigned
char
*
buf
int
len
)
;
extern
int
ssl_SecureShutdown
(
sslSocket
*
ss
int
how
)
;
extern
int
ssl_SecureClose
(
sslSocket
*
ss
)
;
extern
int
ssl_SecureSocksConnect
(
sslSocket
*
ss
const
PRNetAddr
*
addr
)
;
extern
PRFileDesc
*
ssl_SecureSocksAccept
(
sslSocket
*
ss
PRNetAddr
*
addr
)
;
extern
PRFileDesc
*
ssl_FindTop
(
sslSocket
*
ss
)
;
extern
sslGather
*
ssl_NewGather
(
void
)
;
extern
SECStatus
ssl3_InitGather
(
sslGather
*
gs
)
;
extern
void
ssl3_DestroyGather
(
sslGather
*
gs
)
;
extern
SECStatus
ssl_GatherRecord1stHandshake
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl_CreateSecurityInfo
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl_CopySecurityInfo
(
sslSocket
*
ss
sslSocket
*
os
)
;
extern
void
ssl_ResetSecurityInfo
(
sslSecurityInfo
*
sec
PRBool
doMemset
)
;
extern
void
ssl_DestroySecurityInfo
(
sslSecurityInfo
*
sec
)
;
extern
void
ssl_PrintBuf
(
const
sslSocket
*
ss
const
char
*
msg
const
void
*
cp
int
len
)
;
extern
void
ssl_PrintKey
(
const
sslSocket
*
ss
const
char
*
msg
PK11SymKey
*
key
)
;
extern
int
ssl_SendSavedWriteData
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl_SaveWriteData
(
sslSocket
*
ss
const
void
*
p
unsigned
int
l
)
;
extern
SECStatus
ssl_BeginClientHandshake
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl_BeginServerHandshake
(
sslSocket
*
ss
)
;
extern
int
ssl_Do1stHandshake
(
sslSocket
*
ss
)
;
extern
SECStatus
sslBuffer_Grow
(
sslBuffer
*
b
unsigned
int
newLen
)
;
extern
SECStatus
sslBuffer_Append
(
sslBuffer
*
b
const
void
*
data
unsigned
int
len
)
;
extern
void
sslBuffer_Clear
(
sslBuffer
*
b
)
;
extern
void
ssl_ChooseSessionIDProcs
(
sslSecurityInfo
*
sec
)
;
extern
void
ssl3_InitCipherSpec
(
ssl3CipherSpec
*
spec
)
;
extern
sslSessionID
*
ssl3_NewSessionID
(
sslSocket
*
ss
PRBool
is_server
)
;
extern
sslSessionID
*
ssl_LookupSID
(
const
PRIPv6Addr
*
addr
PRUint16
port
const
char
*
peerID
const
char
*
urlSvrName
)
;
extern
void
ssl_FreeSID
(
sslSessionID
*
sid
)
;
extern
int
ssl3_SendApplicationData
(
sslSocket
*
ss
const
PRUint8
*
in
int
len
int
flags
)
;
extern
PRBool
ssl_FdIsBlocking
(
PRFileDesc
*
fd
)
;
extern
PRBool
ssl_SocketIsBlocking
(
sslSocket
*
ss
)
;
extern
void
ssl3_SetAlwaysBlock
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl_EnableNagleDelay
(
sslSocket
*
ss
PRBool
enabled
)
;
extern
void
ssl_FinishHandshake
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl_CipherPolicySet
(
PRInt32
which
PRInt32
policy
)
;
extern
SECStatus
ssl_CipherPrefSetDefault
(
PRInt32
which
PRBool
enabled
)
;
extern
SECStatus
ssl3_ConstrainRangeByPolicy
(
void
)
;
extern
SECStatus
ssl3_InitState
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl3_RestartHandshakeHashes
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl3_UpdateHandshakeHashes
(
sslSocket
*
ss
const
unsigned
char
*
b
unsigned
int
l
)
;
extern
PRBool
ssl3_WaitingForServerSecondRound
(
sslSocket
*
ss
)
;
extern
PRInt32
ssl3_SendRecord
(
sslSocket
*
ss
ssl3CipherSpec
*
cwSpec
SSL3ContentType
type
const
SSL3Opaque
*
pIn
PRInt32
nIn
PRInt32
flags
)
;
#
ifdef
NSS_SSL_ENABLE_ZLIB
#
define
SSL3_COMPRESSION_MAX_EXPANSION
29
#
else
#
define
SSL3_COMPRESSION_MAX_EXPANSION
0
#
endif
#
define
SSL3_BUFFER_FUDGE
100
+
SSL3_COMPRESSION_MAX_EXPANSION
#
define
SSL_LOCK_READER
(
ss
)
\
if
(
ss
-
>
recvLock
)
\
PZ_Lock
(
ss
-
>
recvLock
)
#
define
SSL_UNLOCK_READER
(
ss
)
\
if
(
ss
-
>
recvLock
)
\
PZ_Unlock
(
ss
-
>
recvLock
)
#
define
SSL_LOCK_WRITER
(
ss
)
\
if
(
ss
-
>
sendLock
)
\
PZ_Lock
(
ss
-
>
sendLock
)
#
define
SSL_UNLOCK_WRITER
(
ss
)
\
if
(
ss
-
>
sendLock
)
\
PZ_Unlock
(
ss
-
>
sendLock
)
#
define
ssl_Get1stHandshakeLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
{
\
PORT_Assert
(
PZ_InMonitor
(
(
ss
)
-
>
firstHandshakeLock
)
|
|
\
!
ssl_HaveRecvBufLock
(
ss
)
)
;
\
PZ_EnterMonitor
(
(
ss
)
-
>
firstHandshakeLock
)
;
\
}
\
}
#
define
ssl_Release1stHandshakeLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
\
PZ_ExitMonitor
(
(
ss
)
-
>
firstHandshakeLock
)
;
\
}
#
define
ssl_Have1stHandshakeLock
(
ss
)
\
(
PZ_InMonitor
(
(
ss
)
-
>
firstHandshakeLock
)
)
#
define
ssl_GetSSL3HandshakeLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
{
\
PORT_Assert
(
!
ssl_HaveXmitBufLock
(
ss
)
)
;
\
PZ_EnterMonitor
(
(
ss
)
-
>
ssl3HandshakeLock
)
;
\
}
\
}
#
define
ssl_ReleaseSSL3HandshakeLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
\
PZ_ExitMonitor
(
(
ss
)
-
>
ssl3HandshakeLock
)
;
\
}
#
define
ssl_HaveSSL3HandshakeLock
(
ss
)
\
(
PZ_InMonitor
(
(
ss
)
-
>
ssl3HandshakeLock
)
)
#
define
ssl_GetSpecReadLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
\
NSSRWLock_LockRead
(
(
ss
)
-
>
specLock
)
;
\
}
#
define
ssl_ReleaseSpecReadLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
\
NSSRWLock_UnlockRead
(
(
ss
)
-
>
specLock
)
;
\
}
#
define
ssl_GetSpecWriteLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
\
NSSRWLock_LockWrite
(
(
ss
)
-
>
specLock
)
;
\
}
#
define
ssl_ReleaseSpecWriteLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
\
NSSRWLock_UnlockWrite
(
(
ss
)
-
>
specLock
)
;
\
}
#
define
ssl_HaveSpecWriteLock
(
ss
)
\
(
NSSRWLock_HaveWriteLock
(
(
ss
)
-
>
specLock
)
)
#
define
ssl_GetRecvBufLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
{
\
PORT_Assert
(
!
ssl_HaveSSL3HandshakeLock
(
ss
)
)
;
\
PORT_Assert
(
!
ssl_HaveXmitBufLock
(
ss
)
)
;
\
PZ_EnterMonitor
(
(
ss
)
-
>
recvBufLock
)
;
\
}
\
}
#
define
ssl_ReleaseRecvBufLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
\
PZ_ExitMonitor
(
(
ss
)
-
>
recvBufLock
)
;
\
}
#
define
ssl_HaveRecvBufLock
(
ss
)
\
(
PZ_InMonitor
(
(
ss
)
-
>
recvBufLock
)
)
#
define
ssl_GetXmitBufLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
\
PZ_EnterMonitor
(
(
ss
)
-
>
xmitBufLock
)
;
\
}
#
define
ssl_ReleaseXmitBufLock
(
ss
)
\
{
\
if
(
!
ss
-
>
opt
.
noLocks
)
\
PZ_ExitMonitor
(
(
ss
)
-
>
xmitBufLock
)
;
\
}
#
define
ssl_HaveXmitBufLock
(
ss
)
\
(
PZ_InMonitor
(
(
ss
)
-
>
xmitBufLock
)
)
#
define
SSL_LIBRARY_VERSION_NONE
0
#
ifndef
NSS_DISABLE_TLS_1_3
#
define
SSL_LIBRARY_VERSION_MAX_SUPPORTED
SSL_LIBRARY_VERSION_TLS_1_3
#
else
#
define
SSL_LIBRARY_VERSION_MAX_SUPPORTED
SSL_LIBRARY_VERSION_TLS_1_2
#
endif
#
define
SSL_ALL_VERSIONS_DISABLED
(
vrange
)
\
(
(
vrange
)
-
>
min
=
=
SSL_LIBRARY_VERSION_NONE
)
extern
PRBool
ssl3_VersionIsSupported
(
SSLProtocolVariant
protocolVariant
SSL3ProtocolVersion
version
)
;
extern
int
SSL_RestartHandshakeAfterCertReq
(
struct
sslSocketStr
*
ss
CERTCertificate
*
cert
SECKEYPrivateKey
*
key
CERTCertificateList
*
certChain
)
;
extern
sslSocket
*
ssl_FindSocket
(
PRFileDesc
*
fd
)
;
extern
void
ssl_FreeSocket
(
struct
sslSocketStr
*
ssl
)
;
extern
SECStatus
SSL3_SendAlert
(
sslSocket
*
ss
SSL3AlertLevel
level
SSL3AlertDescription
desc
)
;
extern
SECStatus
ssl3_DecodeError
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl3_AuthCertificateComplete
(
sslSocket
*
ss
PRErrorCode
error
)
;
extern
SECStatus
ssl3_HandleV2ClientHello
(
sslSocket
*
ss
unsigned
char
*
buffer
int
length
PRUint8
padding
)
;
SECStatus
ssl3_SendClientHello
(
sslSocket
*
ss
sslClientHelloType
type
)
;
SECStatus
ssl3_HandleRecord
(
sslSocket
*
ss
SSL3Ciphertext
*
cipher
sslBuffer
*
out
)
;
SECStatus
ssl_RemoveTLSCBCPadding
(
sslBuffer
*
plaintext
unsigned
int
macSize
)
;
int
ssl3_GatherAppDataRecord
(
sslSocket
*
ss
int
flags
)
;
int
ssl3_GatherCompleteHandshake
(
sslSocket
*
ss
int
flags
)
;
extern
sslKeyPair
*
ssl_NewKeyPair
(
SECKEYPrivateKey
*
privKey
SECKEYPublicKey
*
pubKey
)
;
extern
sslKeyPair
*
ssl_GetKeyPairRef
(
sslKeyPair
*
keyPair
)
;
extern
void
ssl_FreeKeyPair
(
sslKeyPair
*
keyPair
)
;
extern
sslEphemeralKeyPair
*
ssl_NewEphemeralKeyPair
(
const
sslNamedGroupDef
*
group
SECKEYPrivateKey
*
privKey
SECKEYPublicKey
*
pubKey
)
;
extern
sslEphemeralKeyPair
*
ssl_CopyEphemeralKeyPair
(
sslEphemeralKeyPair
*
keyPair
)
;
extern
void
ssl_FreeEphemeralKeyPair
(
sslEphemeralKeyPair
*
keyPair
)
;
extern
sslEphemeralKeyPair
*
ssl_LookupEphemeralKeyPair
(
sslSocket
*
ss
const
sslNamedGroupDef
*
groupDef
)
;
extern
PRBool
ssl_HaveEphemeralKeyPair
(
const
sslSocket
*
ss
const
sslNamedGroupDef
*
groupDef
)
;
extern
void
ssl_FreeEphemeralKeyPairs
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl_AppendPaddedDHKeyShare
(
const
sslSocket
*
ss
const
SECKEYPublicKey
*
pubKey
PRBool
appendLength
)
;
extern
const
ssl3DHParams
*
ssl_GetDHEParams
(
const
sslNamedGroupDef
*
groupDef
)
;
extern
SECStatus
ssl_SelectDHEGroup
(
sslSocket
*
ss
const
sslNamedGroupDef
*
*
groupDef
)
;
extern
SECStatus
ssl_CreateDHEKeyPair
(
const
sslNamedGroupDef
*
groupDef
const
ssl3DHParams
*
params
sslEphemeralKeyPair
*
*
keyPair
)
;
extern
PRBool
ssl_IsValidDHEShare
(
const
SECItem
*
dh_p
const
SECItem
*
dh_Ys
)
;
extern
SECStatus
ssl_ValidateDHENamedGroup
(
sslSocket
*
ss
const
SECItem
*
dh_p
const
SECItem
*
dh_g
const
sslNamedGroupDef
*
*
groupDef
const
ssl3DHParams
*
*
dhParams
)
;
extern
PRBool
ssl_IsECCEnabled
(
const
sslSocket
*
ss
)
;
extern
PRBool
ssl_IsDHEEnabled
(
const
sslSocket
*
ss
)
;
#
define
SSL_RSASTRENGTH_TO_ECSTRENGTH
(
s
)
\
(
(
s
<
=
1024
)
?
160
\
:
(
(
s
<
=
2048
)
?
224
\
:
(
(
s
<
=
3072
)
?
256
\
:
(
(
s
<
=
7168
)
?
384
\
:
521
)
)
)
)
extern
const
sslNamedGroupDef
*
ssl_LookupNamedGroup
(
SSLNamedGroup
group
)
;
extern
PRBool
ssl_NamedGroupEnabled
(
const
sslSocket
*
ss
const
sslNamedGroupDef
*
group
)
;
extern
SECStatus
ssl_NamedGroup2ECParams
(
PLArenaPool
*
arena
const
sslNamedGroupDef
*
curve
SECKEYECParams
*
params
)
;
extern
const
sslNamedGroupDef
*
ssl_ECPubKey2NamedGroup
(
const
SECKEYPublicKey
*
pubKey
)
;
extern
const
sslNamedGroupDef
*
ssl_GetECGroupForServerSocket
(
sslSocket
*
ss
)
;
extern
void
ssl_FilterSupportedGroups
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl3_CipherPrefSetDefault
(
ssl3CipherSuite
which
PRBool
on
)
;
extern
SECStatus
ssl3_CipherPrefGetDefault
(
ssl3CipherSuite
which
PRBool
*
on
)
;
extern
SECStatus
ssl3_CipherPrefSet
(
sslSocket
*
ss
ssl3CipherSuite
which
PRBool
on
)
;
extern
SECStatus
ssl3_CipherPrefGet
(
const
sslSocket
*
ss
ssl3CipherSuite
which
PRBool
*
on
)
;
extern
SECStatus
ssl3_SetPolicy
(
ssl3CipherSuite
which
PRInt32
policy
)
;
extern
SECStatus
ssl3_GetPolicy
(
ssl3CipherSuite
which
PRInt32
*
policy
)
;
extern
void
ssl3_InitSocketPolicy
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl3_RedoHandshake
(
sslSocket
*
ss
PRBool
flushCache
)
;
extern
SECStatus
ssl3_HandleHandshakeMessage
(
sslSocket
*
ss
SSL3Opaque
*
b
PRUint32
length
PRBool
endOfRecord
)
;
extern
void
ssl3_DestroySSL3Info
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl_ClientReadVersion
(
sslSocket
*
ss
SSL3Opaque
*
*
b
PRUint32
*
length
SSL3ProtocolVersion
*
version
)
;
extern
SECStatus
ssl3_NegotiateVersion
(
sslSocket
*
ss
SSL3ProtocolVersion
peerVersion
PRBool
allowLargerPeerVersion
)
;
extern
SECStatus
ssl_GetPeerInfo
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl3_SendECDHClientKeyExchange
(
sslSocket
*
ss
SECKEYPublicKey
*
svrPubKey
)
;
extern
SECStatus
ssl3_HandleECDHServerKeyExchange
(
sslSocket
*
ss
SSL3Opaque
*
b
PRUint32
length
)
;
extern
SECStatus
ssl3_HandleECDHClientKeyExchange
(
sslSocket
*
ss
SSL3Opaque
*
b
PRUint32
length
sslKeyPair
*
serverKeys
)
;
extern
SECStatus
ssl3_SendECDHServerKeyExchange
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl_ImportECDHKeyShare
(
sslSocket
*
ss
SECKEYPublicKey
*
peerKey
SSL3Opaque
*
b
PRUint32
length
const
sslNamedGroupDef
*
curve
)
;
unsigned
int
tls13_SizeOfECDHEKeyShareKEX
(
const
SECKEYPublicKey
*
pubKey
)
;
SECStatus
tls13_EncodeECDHEKeyShareKEX
(
const
sslSocket
*
ss
const
SECKEYPublicKey
*
pubKey
)
;
extern
SECStatus
ssl3_ComputeCommonKeyHash
(
SSLHashType
hashAlg
PRUint8
*
hashBuf
unsigned
int
bufLen
SSL3Hashes
*
hashes
)
;
extern
void
ssl3_DestroyCipherSpec
(
ssl3CipherSpec
*
spec
PRBool
freeSrvName
)
;
extern
SECStatus
ssl3_InitPendingCipherSpec
(
sslSocket
*
ss
PK11SymKey
*
pms
)
;
extern
SECStatus
ssl3_AppendHandshake
(
sslSocket
*
ss
const
void
*
void_src
PRInt32
bytes
)
;
extern
SECStatus
ssl3_AppendHandshakeHeader
(
sslSocket
*
ss
SSL3HandshakeType
t
PRUint32
length
)
;
extern
SECStatus
ssl3_AppendHandshakeNumber
(
sslSocket
*
ss
PRInt32
num
PRInt32
lenSize
)
;
extern
SECStatus
ssl3_AppendHandshakeVariable
(
sslSocket
*
ss
const
SSL3Opaque
*
src
PRInt32
bytes
PRInt32
lenSize
)
;
extern
SECStatus
ssl3_AppendSignatureAndHashAlgorithm
(
sslSocket
*
ss
const
SSLSignatureAndHashAlg
*
sigAndHash
)
;
extern
SECStatus
ssl3_ConsumeHandshake
(
sslSocket
*
ss
void
*
v
PRInt32
bytes
SSL3Opaque
*
*
b
PRUint32
*
length
)
;
extern
PRInt32
ssl3_ConsumeHandshakeNumber
(
sslSocket
*
ss
PRInt32
bytes
SSL3Opaque
*
*
b
PRUint32
*
length
)
;
extern
SECStatus
ssl3_ConsumeHandshakeVariable
(
sslSocket
*
ss
SECItem
*
i
PRInt32
bytes
SSL3Opaque
*
*
b
PRUint32
*
length
)
;
extern
PRUint8
*
ssl_EncodeUintX
(
PRUint64
value
unsigned
int
bytes
PRUint8
*
to
)
;
extern
PRBool
ssl_IsSupportedSignatureScheme
(
SSLSignatureScheme
scheme
)
;
extern
SECStatus
ssl_CheckSignatureSchemeConsistency
(
sslSocket
*
ss
SSLSignatureScheme
scheme
CERTCertificate
*
cert
)
;
extern
SECStatus
ssl_ParseSignatureSchemes
(
const
sslSocket
*
ss
PLArenaPool
*
arena
SSLSignatureScheme
*
*
schemesOut
unsigned
int
*
numSchemesOut
unsigned
char
*
*
b
unsigned
int
*
len
)
;
extern
SECStatus
ssl_ConsumeSignatureScheme
(
sslSocket
*
ss
SSL3Opaque
*
*
b
PRUint32
*
length
SSLSignatureScheme
*
out
)
;
extern
SECStatus
ssl3_SignHashes
(
sslSocket
*
ss
SSL3Hashes
*
hash
SECKEYPrivateKey
*
key
SECItem
*
buf
)
;
extern
SECStatus
ssl3_VerifySignedHashes
(
sslSocket
*
ss
SSLSignatureScheme
scheme
SSL3Hashes
*
hash
SECItem
*
buf
)
;
extern
SECStatus
ssl3_CacheWrappedMasterSecret
(
sslSocket
*
ss
sslSessionID
*
sid
ssl3CipherSpec
*
spec
SSLAuthType
authType
)
;
extern
void
ssl3_FreeSniNameArray
(
TLSExtensionData
*
xtnData
)
;
extern
void
ssl3_SetSIDSessionTicket
(
sslSessionID
*
sid
NewSessionTicket
*
session_ticket
)
;
SECStatus
ssl3_EncodeSessionTicket
(
sslSocket
*
ss
const
NewSessionTicket
*
ticket_input
SECItem
*
ticket_data
)
;
extern
PRBool
ssl_GetSessionTicketKeys
(
SECKEYPrivateKey
*
svrPrivKey
SECKEYPublicKey
*
svrPubKey
void
*
pwArg
unsigned
char
*
keyName
PK11SymKey
*
*
aesKey
PK11SymKey
*
*
macKey
)
;
extern
SECStatus
ssl3_SessionTicketShutdown
(
void
*
appData
void
*
nssData
)
;
#
define
TLS_EX_SESS_TICKET_LIFETIME_HINT
(
2
*
24
*
60
*
60
)
/
*
2
days
*
/
#
define
TLS_EX_SESS_TICKET_VERSION
(
0x0103
)
extern
SECStatus
ssl3_ValidateNextProtoNego
(
const
unsigned
char
*
data
unsigned
int
length
)
;
extern
PRFileDesc
*
ssl_NewPRSocket
(
sslSocket
*
ss
PRFileDesc
*
fd
)
;
extern
void
ssl_FreePRSocket
(
PRFileDesc
*
fd
)
;
extern
int
ssl3_config_match_init
(
sslSocket
*
)
;
extern
PRBool
ssl_GetWrappingKey
(
PRInt32
symWrapMechIndex
SSLAuthType
authType
SSLWrappedSymWrappingKey
*
wswk
)
;
extern
PRBool
ssl_SetWrappingKey
(
SSLWrappedSymWrappingKey
*
wswk
)
;
extern
SECStatus
SSL3_ShutdownServerCache
(
void
)
;
extern
SECStatus
ssl_InitSymWrapKeysLock
(
void
)
;
extern
SECStatus
ssl_FreeSymWrapKeysLock
(
void
)
;
extern
SECStatus
ssl_InitSessionCacheLocks
(
PRBool
lazyInit
)
;
extern
SECStatus
ssl_FreeSessionCacheLocks
(
void
)
;
extern
void
dtls_FreeHandshakeMessage
(
DTLSQueuedMessage
*
msg
)
;
extern
void
dtls_FreeHandshakeMessages
(
PRCList
*
lst
)
;
extern
SECStatus
dtls_HandleHandshake
(
sslSocket
*
ss
sslBuffer
*
origBuf
)
;
extern
SECStatus
dtls_HandleHelloVerifyRequest
(
sslSocket
*
ss
SSL3Opaque
*
b
PRUint32
length
)
;
extern
SECStatus
dtls_StageHandshakeMessage
(
sslSocket
*
ss
)
;
extern
SECStatus
dtls_QueueMessage
(
sslSocket
*
ss
SSL3ContentType
type
const
SSL3Opaque
*
pIn
PRInt32
nIn
)
;
extern
SECStatus
dtls_FlushHandshakeMessages
(
sslSocket
*
ss
PRInt32
flags
)
;
SECStatus
ssl3_DisableNonDTLSSuites
(
sslSocket
*
ss
)
;
extern
SECStatus
dtls_StartHolddownTimer
(
sslSocket
*
ss
)
;
extern
void
dtls_CheckTimer
(
sslSocket
*
ss
)
;
extern
void
dtls_CancelTimer
(
sslSocket
*
ss
)
;
extern
void
dtls_SetMTU
(
sslSocket
*
ss
PRUint16
advertised
)
;
extern
void
dtls_InitRecvdRecords
(
DTLSRecvdRecords
*
records
)
;
extern
int
dtls_RecordGetRecvd
(
const
DTLSRecvdRecords
*
records
sslSequenceNumber
seq
)
;
extern
void
dtls_RecordSetRecvd
(
DTLSRecvdRecords
*
records
sslSequenceNumber
seq
)
;
extern
void
dtls_RehandshakeCleanup
(
sslSocket
*
ss
)
;
extern
SSL3ProtocolVersion
dtls_TLSVersionToDTLSVersion
(
SSL3ProtocolVersion
tlsv
)
;
extern
SSL3ProtocolVersion
dtls_DTLSVersionToTLSVersion
(
SSL3ProtocolVersion
dtlsv
)
;
extern
PRBool
dtls_IsRelevant
(
sslSocket
*
ss
const
SSL3Ciphertext
*
cText
PRBool
*
sameEpoch
PRUint64
*
seqNum
)
;
extern
SECStatus
dtls_MaybeRetransmitHandshake
(
sslSocket
*
ss
const
SSL3Ciphertext
*
cText
PRBool
sameEpoch
)
;
CK_MECHANISM_TYPE
ssl3_Alg2Mech
(
SSLCipherAlgorithm
calg
)
;
SECStatus
ssl3_NegotiateCipherSuite
(
sslSocket
*
ss
const
SECItem
*
suites
PRBool
initHashes
)
;
SECStatus
ssl3_InitHandshakeHashes
(
sslSocket
*
ss
)
;
SECStatus
ssl3_ServerCallSNICallback
(
sslSocket
*
ss
)
;
SECStatus
ssl3_SetupPendingCipherSpec
(
sslSocket
*
ss
)
;
SECStatus
ssl3_FlushHandshake
(
sslSocket
*
ss
PRInt32
flags
)
;
SECStatus
ssl3_CompleteHandleCertificate
(
sslSocket
*
ss
SSL3Opaque
*
b
PRUint32
length
)
;
void
ssl3_SendAlertForCertError
(
sslSocket
*
ss
PRErrorCode
errCode
)
;
SECStatus
ssl3_HandleNoCertificate
(
sslSocket
*
ss
)
;
SECStatus
ssl3_SendEmptyCertificate
(
sslSocket
*
ss
)
;
void
ssl3_CleanupPeerCerts
(
sslSocket
*
ss
)
;
SECStatus
ssl3_SendCertificateStatus
(
sslSocket
*
ss
)
;
SECStatus
ssl3_AuthCertificate
(
sslSocket
*
ss
)
;
SECStatus
ssl_ReadCertificateStatus
(
sslSocket
*
ss
SSL3Opaque
*
b
PRUint32
length
)
;
SECStatus
ssl3_EncodeSigAlgs
(
const
sslSocket
*
ss
PRUint8
*
buf
unsigned
maxLen
PRUint32
*
len
)
;
void
ssl3_GetCertificateRequestCAs
(
sslSocket
*
ss
int
*
calenp
SECItem
*
*
namesp
int
*
nnamesp
)
;
SECStatus
ssl3_ParseCertificateRequestCAs
(
sslSocket
*
ss
SSL3Opaque
*
*
b
PRUint32
*
length
PLArenaPool
*
arena
CERTDistNames
*
ca_list
)
;
SECStatus
ssl3_CompleteHandleCertificateRequest
(
sslSocket
*
ss
const
SSLSignatureScheme
*
signatureSchemes
unsigned
int
signatureSchemeCount
CERTDistNames
*
ca_list
)
;
SECStatus
ssl3_SendServerHello
(
sslSocket
*
ss
)
;
SECStatus
ssl3_ComputeHandshakeHashes
(
sslSocket
*
ss
ssl3CipherSpec
*
spec
SSL3Hashes
*
hashes
PRUint32
sender
)
;
SECStatus
ssl_CreateECDHEphemeralKeyPair
(
const
sslSocket
*
ss
const
sslNamedGroupDef
*
ecGroup
sslEphemeralKeyPair
*
*
keyPair
)
;
SECStatus
ssl_CreateStaticECDHEKey
(
sslSocket
*
ss
const
sslNamedGroupDef
*
ecGroup
)
;
SECStatus
ssl3_FlushHandshake
(
sslSocket
*
ss
PRInt32
flags
)
;
PK11SymKey
*
ssl3_GetWrappingKey
(
sslSocket
*
ss
PK11SlotInfo
*
masterSecretSlot
const
sslServerCert
*
serverCert
CK_MECHANISM_TYPE
masterWrapMech
void
*
pwArg
)
;
SECStatus
ssl3_FillInCachedSID
(
sslSocket
*
ss
sslSessionID
*
sid
)
;
const
ssl3CipherSuiteDef
*
ssl_LookupCipherSuiteDef
(
ssl3CipherSuite
suite
)
;
const
ssl3BulkCipherDef
*
ssl_GetBulkCipherDef
(
const
ssl3CipherSuiteDef
*
cipher_def
)
;
SECStatus
ssl3_SelectServerCert
(
sslSocket
*
ss
)
;
SECStatus
ssl_PickSignatureScheme
(
sslSocket
*
ss
SECKEYPublicKey
*
pubKey
SECKEYPrivateKey
*
privKey
const
SSLSignatureScheme
*
peerSchemes
unsigned
int
peerSchemeCount
PRBool
requireSha1
)
;
SECOidTag
ssl3_HashTypeToOID
(
SSLHashType
hashType
)
;
SSLHashType
ssl_SignatureSchemeToHashType
(
SSLSignatureScheme
scheme
)
;
KeyType
ssl_SignatureSchemeToKeyType
(
SSLSignatureScheme
scheme
)
;
SECStatus
ssl3_SetCipherSuite
(
sslSocket
*
ss
ssl3CipherSuite
chosenSuite
PRBool
initHashes
)
;
#
include
"
tls13con
.
h
"
#
ifdef
DEBUG
extern
void
ssl3_CheckCipherSuiteOrderConsistency
(
)
;
#
endif
extern
int
ssl_MapLowLevelError
(
int
hiLevelError
)
;
extern
PRUint32
ssl_Time
(
void
)
;
extern
void
SSL_AtomicIncrementLong
(
long
*
x
)
;
SECStatus
ssl3_ApplyNSSPolicy
(
void
)
;
extern
HASH_HashType
ssl3_GetTls12HashType
(
sslSocket
*
ss
)
;
extern
SECStatus
ssl3_TLSPRFWithMasterSecret
(
ssl3CipherSpec
*
spec
const
char
*
label
unsigned
int
labelLen
const
unsigned
char
*
val
unsigned
int
valLen
unsigned
char
*
out
unsigned
int
outLen
HASH_HashType
tls12HashType
)
;
#
ifdef
TRACE
#
define
SSL_TRACE
(
msg
)
ssl_Trace
msg
#
else
#
define
SSL_TRACE
(
msg
)
#
endif
void
ssl_Trace
(
const
char
*
format
.
.
.
)
;
SEC_END_PROTOS
#
if
defined
(
XP_UNIX
)
|
|
defined
(
XP_OS2
)
|
|
defined
(
XP_BEOS
)
#
define
SSL_GETPID
getpid
#
elif
defined
(
WIN32
)
extern
int
__cdecl
_getpid
(
void
)
;
#
define
SSL_GETPID
_getpid
#
else
#
define
SSL_GETPID
(
)
0
#
endif
#
endif
