#
ifndef
__ssl3ext_h_
#
define
__ssl3ext_h_
#
include
"
pk11hpke
.
h
"
#
include
"
sslencode
.
h
"
typedef
enum
{
sni_nametype_hostname
}
SNINameType
;
typedef
struct
TLSExtensionDataStr
TLSExtensionData
;
typedef
SECStatus
(
*
sslExtensionBuilderFunc
)
(
const
sslSocket
*
ss
TLSExtensionData
*
xtnData
sslBuffer
*
buf
PRBool
*
added
)
;
typedef
struct
{
PRInt32
ex_type
;
sslExtensionBuilderFunc
ex_sender
;
}
sslExtensionBuilder
;
struct
TLSExtensionDataStr
{
sslExtensionBuilder
serverHelloSenders
[
SSL_MAX_EXTENSIONS
]
;
sslExtensionBuilder
encryptedExtensionsSenders
[
SSL_MAX_EXTENSIONS
]
;
sslExtensionBuilder
certificateSenders
[
SSL_MAX_EXTENSIONS
]
;
PRUint16
numAdvertised
;
PRUint16
*
advertised
;
PRUint16
echNumAdvertised
;
PRUint16
*
echAdvertised
;
PRUint16
numNegotiated
;
PRUint16
negotiated
[
SSL_MAX_EXTENSIONS
]
;
PRBool
ticketTimestampVerified
;
PRBool
emptySessionTicket
;
PRBool
sentSessionTicketInClientHello
;
SECItem
psk_ke_modes
;
PRUint32
max_early_data_size
;
SECItem
*
sniNameArr
;
PRUint32
sniNameArrSize
;
SECItem
signedCertTimestamps
;
PRBool
peerSupportsFfdheGroups
;
SSLSignatureScheme
*
sigSchemes
;
unsigned
int
numSigSchemes
;
SSLSignatureScheme
*
delegCredSigSchemes
;
unsigned
int
numDelegCredSigSchemes
;
SSLSignatureScheme
*
delegCredSigSchemesAdvertised
;
unsigned
int
numDelegCredSigSchemesAdvertised
;
SECItem
certReqContext
;
CERTDistNames
certReqAuthorities
;
SECItem
nextProto
;
SSLNextProtoState
nextProtoState
;
PRUint16
dtlsSRTPCipherSuite
;
unsigned
int
echXtnOffset
;
unsigned
int
lastXtnOffset
;
PRCList
remoteKeyShares
;
SECItem
pskBinder
;
unsigned
int
pskBindersLen
;
PRUint32
ticketAge
;
SECItem
cookie
;
const
sslNamedGroupDef
*
selectedGroup
;
SECItem
applicationToken
;
PRUint16
recordSizeLimit
;
sslDelegatedCredential
*
peerDelegCred
;
PRBool
peerRequestedDelegCred
;
PRBool
sendingDelegCredToPeer
;
sslPsk
*
selectedPsk
;
sslEchXtnState
*
ech
;
}
;
typedef
struct
TLSExtensionStr
{
PRCList
link
;
PRUint16
type
;
SECItem
data
;
}
TLSExtension
;
typedef
struct
sslCustomExtensionHooks
{
PRCList
link
;
PRUint16
type
;
SSLExtensionWriter
writer
;
void
*
writerArg
;
SSLExtensionHandler
handler
;
void
*
handlerArg
;
}
sslCustomExtensionHooks
;
SECStatus
ssl3_HandleExtensions
(
sslSocket
*
ss
PRUint8
*
*
b
PRUint32
*
length
SSLHandshakeType
handshakeMessage
)
;
SECStatus
ssl3_ParseExtensions
(
sslSocket
*
ss
PRUint8
*
*
b
PRUint32
*
length
)
;
SECStatus
ssl3_HandleParsedExtensions
(
sslSocket
*
ss
SSLHandshakeType
handshakeMessage
)
;
TLSExtension
*
ssl3_FindExtension
(
sslSocket
*
ss
SSLExtensionType
extension_type
)
;
void
ssl3_DestroyRemoteExtensions
(
PRCList
*
list
)
;
void
ssl3_MoveRemoteExtensions
(
PRCList
*
dst
PRCList
*
src
)
;
void
ssl3_InitExtensionData
(
TLSExtensionData
*
xtnData
const
sslSocket
*
ss
)
;
void
ssl3_DestroyExtensionData
(
TLSExtensionData
*
xtnData
)
;
void
ssl3_ResetExtensionData
(
TLSExtensionData
*
xtnData
const
sslSocket
*
ss
)
;
PRBool
ssl3_ExtensionNegotiated
(
const
sslSocket
*
ss
PRUint16
ex_type
)
;
PRBool
ssl3_ExtensionAdvertised
(
const
sslSocket
*
ss
PRUint16
ex_type
)
;
SECStatus
ssl3_RegisterExtensionSender
(
const
sslSocket
*
ss
TLSExtensionData
*
xtnData
PRUint16
ex_type
sslExtensionBuilderFunc
cb
)
;
SECStatus
ssl_ConstructExtensions
(
sslSocket
*
ss
sslBuffer
*
buf
SSLHandshakeType
message
)
;
SECStatus
ssl_SendEmptyExtension
(
const
sslSocket
*
ss
TLSExtensionData
*
xtnData
sslBuffer
*
buf
PRBool
*
append
)
;
SECStatus
ssl3_EmplaceExtension
(
sslSocket
*
ss
sslBuffer
*
buf
PRUint16
exType
const
PRUint8
*
data
unsigned
int
len
PRBool
advertise
)
;
SECStatus
ssl_InsertPaddingExtension
(
sslSocket
*
ss
unsigned
int
prefixLen
sslBuffer
*
buf
)
;
void
ssl3_ExtSendAlert
(
const
sslSocket
*
ss
SSL3AlertLevel
level
SSL3AlertDescription
desc
)
;
void
ssl3_ExtDecodeError
(
const
sslSocket
*
ss
)
;
SECStatus
ssl3_ExtConsumeHandshake
(
const
sslSocket
*
ss
void
*
v
PRUint32
bytes
PRUint8
*
*
b
PRUint32
*
length
)
;
SECStatus
ssl3_ExtConsumeHandshakeNumber
(
const
sslSocket
*
ss
PRUint32
*
num
PRUint32
bytes
PRUint8
*
*
b
PRUint32
*
length
)
;
SECStatus
ssl3_ExtConsumeHandshakeVariable
(
const
sslSocket
*
ss
SECItem
*
i
PRUint32
bytes
PRUint8
*
*
b
PRUint32
*
length
)
;
SECStatus
SSLExp_GetExtensionSupport
(
PRUint16
type
SSLExtensionSupport
*
support
)
;
SECStatus
SSLExp_InstallExtensionHooks
(
PRFileDesc
*
fd
PRUint16
extension
SSLExtensionWriter
writer
void
*
writerArg
SSLExtensionHandler
handler
void
*
handlerArg
)
;
sslCustomExtensionHooks
*
ssl_FindCustomExtensionHooks
(
sslSocket
*
ss
PRUint16
extension
)
;
SECStatus
ssl_CallCustomExtensionSenders
(
sslSocket
*
ss
sslBuffer
*
buf
SSLHandshakeType
message
)
;
#
endif
