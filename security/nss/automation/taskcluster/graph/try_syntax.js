var
intersect
=
require
(
"
intersect
"
)
;
var
parse_args
=
require
(
"
minimist
"
)
;
function
parseOptions
(
opts
)
{
opts
=
parse_args
(
opts
.
split
(
/
\
s
+
/
)
{
default
:
{
build
:
"
do
"
platform
:
"
all
"
unittests
:
"
none
"
tools
:
"
none
"
}
alias
:
{
b
:
"
build
"
p
:
"
platform
"
u
:
"
unittests
"
t
:
"
tools
"
e
:
"
extra
-
builds
"
}
string
:
[
"
build
"
"
platform
"
"
unittests
"
"
tools
"
"
extra
-
builds
"
]
}
)
;
var
builds
=
intersect
(
opts
.
build
.
split
(
"
"
)
[
"
d
"
"
o
"
]
)
;
if
(
builds
.
length
=
=
0
)
{
builds
=
[
"
d
"
"
o
"
]
;
}
var
allPlatforms
=
[
"
linux
"
"
linux64
"
"
linux64
-
asan
"
"
win64
"
"
arm
"
]
;
var
platforms
=
intersect
(
opts
.
platform
.
split
(
/
\
s
*
\
s
*
/
)
allPlatforms
)
;
if
(
platforms
.
length
=
=
0
&
&
opts
.
platform
!
=
"
none
"
)
{
platforms
=
allPlatforms
;
}
var
allUnitTests
=
[
"
crmf
"
"
chains
"
"
cipher
"
"
db
"
"
ec
"
"
fips
"
"
gtest
"
"
lowhash
"
"
merge
"
"
sdr
"
"
smime
"
"
tools
"
"
ssl
"
]
;
var
unittests
=
intersect
(
opts
.
unittests
.
split
(
/
\
s
*
\
s
*
/
)
allUnitTests
)
;
if
(
opts
.
unittests
=
=
"
all
"
)
{
unittests
=
allUnitTests
;
}
else
if
(
unittests
.
length
=
=
0
)
{
unittests
=
[
]
;
}
var
allTools
=
[
"
clang
-
format
"
"
scan
-
build
"
]
;
var
tools
=
intersect
(
opts
.
tools
.
split
(
/
\
s
*
\
s
*
/
)
allTools
)
;
if
(
opts
.
tools
=
=
"
all
"
)
{
tools
=
allTools
;
}
else
if
(
tools
.
length
=
=
0
)
{
tools
=
[
]
;
}
return
{
builds
:
builds
platforms
:
platforms
unittests
:
unittests
extra
:
(
opts
.
e
=
=
"
all
"
)
tools
:
tools
}
;
}
function
filterTasks
(
tasks
comment
)
{
var
match
=
comment
.
match
(
/
^
\
s
*
try
:
\
s
*
(
.
*
)
\
s
*
/
)
;
if
(
!
match
)
{
return
tasks
;
}
var
opts
=
parseOptions
(
match
[
1
]
)
;
return
tasks
.
filter
(
function
(
task
)
{
var
env
=
task
.
task
.
payload
.
env
|
|
{
}
;
var
th
=
task
.
task
.
extra
.
treeherder
;
var
machine
=
th
.
machine
.
platform
;
var
coll
=
th
.
collection
|
|
{
}
;
var
found
;
if
(
machine
=
=
"
nss
-
tools
"
)
{
return
opts
.
tools
.
some
(
function
(
tool
)
{
var
symbol
=
th
.
symbol
.
toLowerCase
(
)
;
return
symbol
.
startsWith
(
tool
)
;
}
)
;
}
if
(
env
.
NSS_TESTS
&
&
env
.
TC_PARENT_TASK_ID
)
{
found
=
opts
.
unittests
.
some
(
function
(
test
)
{
var
symbol
=
(
th
.
groupSymbol
|
|
th
.
symbol
)
.
toLowerCase
(
)
;
return
symbol
.
startsWith
(
test
)
;
}
)
;
if
(
!
found
)
{
return
false
;
}
}
if
(
th
.
groupSymbol
=
=
"
Builds
"
&
&
!
opts
.
extra
)
{
return
false
;
}
found
=
opts
.
platforms
.
some
(
function
(
platform
)
{
var
aliases
=
{
"
linux
"
:
"
linux32
"
"
linux64
-
asan
"
:
"
linux64
"
"
win64
"
:
"
windows2012
-
64
"
"
arm
"
:
"
linux32
"
}
;
var
keep
=
machine
=
=
(
aliases
[
platform
]
|
|
platform
)
;
if
(
platform
=
=
"
linux64
-
asan
"
)
{
keep
&
=
coll
.
asan
;
}
else
if
(
platform
=
=
"
arm
"
)
{
keep
&
=
(
coll
[
"
arm
-
opt
"
]
|
|
coll
[
"
arm
-
debug
"
]
)
;
}
else
{
keep
&
=
(
coll
.
opt
|
|
coll
.
debug
)
;
}
return
keep
;
}
)
;
if
(
!
found
)
{
return
false
;
}
var
isDebug
=
coll
.
debug
|
|
coll
.
asan
|
|
coll
[
"
arm
-
debug
"
]
;
return
(
isDebug
&
&
opts
.
builds
.
indexOf
(
"
d
"
)
>
-
1
)
|
|
(
!
isDebug
&
&
opts
.
builds
.
indexOf
(
"
o
"
)
>
-
1
)
;
}
)
;
}
module
.
exports
.
filterTasks
=
filterTasks
;
