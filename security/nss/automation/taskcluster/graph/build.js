var
fs
=
require
(
"
fs
"
)
;
var
path
=
require
(
"
path
"
)
;
var
merge
=
require
(
"
merge
"
)
;
var
slugid
=
require
(
"
slugid
"
)
;
var
flatmap
=
require
(
"
flatmap
"
)
;
var
yaml
=
require
(
"
.
/
yaml
"
)
;
var
try_syntax
=
require
(
"
.
/
try_syntax
"
)
;
var
image_builder
=
require
(
"
.
/
image_builder
"
)
;
var
TC_OWNER
=
process
.
env
.
TC_OWNER
|
|
"
{
{
tc_owner
}
}
"
;
var
TC_SOURCE
=
process
.
env
.
TC_SOURCE
|
|
"
{
{
tc_source
}
}
"
;
var
TC_PROJECT
=
process
.
env
.
TC_PROJECT
|
|
"
{
{
tc_project
}
}
"
;
var
TC_COMMENT
=
process
.
env
.
TC_COMMENT
|
|
"
{
{
tc_comment
}
}
"
;
var
NSS_PUSHLOG_ID
=
process
.
env
.
NSS_PUSHLOG_ID
|
|
"
{
{
nss_pushlog_id
}
}
"
;
var
NSS_HEAD_REVISION
=
process
.
env
.
NSS_HEAD_REVISION
|
|
"
{
{
nss_head_rev
}
}
"
;
function
decorateTask
(
task
)
{
task
.
taskId
=
slugid
.
v4
(
)
;
task
.
task
.
routes
=
[
"
tc
-
treeherder
-
stage
.
v2
.
"
+
TC_PROJECT
+
"
.
"
+
NSS_HEAD_REVISION
+
"
.
"
+
NSS_PUSHLOG_ID
"
tc
-
treeherder
.
v2
.
"
+
TC_PROJECT
+
"
.
"
+
NSS_HEAD_REVISION
+
"
.
"
+
NSS_PUSHLOG_ID
]
;
}
function
generateBuildTasks
(
platform
file
)
{
var
dir
=
path
.
join
(
__dirname
"
.
/
"
+
platform
)
;
var
buildBase
=
yaml
.
parse
(
path
.
join
(
dir
"
_build_base
.
yml
"
)
{
}
)
;
var
testBase
=
yaml
.
parse
(
path
.
join
(
dir
"
_test_base
.
yml
"
)
{
}
)
;
return
flatmap
(
yaml
.
parse
(
path
.
join
(
dir
file
)
)
function
(
task
)
{
var
tasks
=
[
task
=
merge
.
recursive
(
true
buildBase
task
)
]
;
decorateTask
(
task
)
;
if
(
task
.
tests
)
{
var
base
=
merge
.
recursive
(
true
{
requires
:
[
task
.
taskId
]
task
:
{
payload
:
{
env
:
{
TC_PARENT_TASK_ID
:
task
.
taskId
}
}
}
}
testBase
)
;
tasks
=
tasks
.
concat
(
flatmap
(
task
.
tests
function
(
name
)
{
return
generateTestTasks
(
name
base
task
)
;
}
)
)
;
delete
task
.
tests
;
}
return
tasks
;
}
)
;
}
function
generateTestTasks
(
name
base
task
)
{
var
dir
=
path
.
join
(
__dirname
"
.
/
tests
"
)
;
var
tests
=
yaml
.
parse
(
path
.
join
(
dir
name
+
"
.
yml
"
)
)
;
return
tests
.
map
(
function
(
test
)
{
test
=
merge
.
recursive
(
true
base
test
)
;
decorateTask
(
test
)
;
test
.
task
.
payload
.
env
=
merge
.
recursive
(
true
task
.
task
.
payload
.
env
test
.
task
.
payload
.
env
)
;
test
.
task
.
extra
.
treeherder
=
merge
.
recursive
(
true
task
.
task
.
extra
.
treeherder
test
.
task
.
extra
.
treeherder
)
;
return
test
;
}
)
;
}
function
generatePlatformTasks
(
platform
)
{
var
dir
=
path
.
join
(
__dirname
"
.
/
"
+
platform
)
;
var
buildBase
=
yaml
.
parse
(
path
.
join
(
dir
"
_build_base
.
yml
"
)
{
}
)
;
var
testBase
=
yaml
.
parse
(
path
.
join
(
dir
"
_test_base
.
yml
"
)
{
}
)
;
return
flatmap
(
fs
.
readdirSync
(
dir
)
function
(
file
)
{
if
(
!
file
.
startsWith
(
"
_
"
)
&
&
file
.
endsWith
(
"
.
yml
"
)
)
{
var
tasks
=
generateBuildTasks
(
platform
file
)
;
tasks
.
forEach
(
function
(
task
)
{
var
env
=
task
.
task
.
payload
.
env
|
|
{
}
;
Object
.
keys
(
env
)
.
forEach
(
function
(
name
)
{
if
(
typeof
(
env
[
name
]
)
!
=
"
undefined
"
)
{
env
[
name
]
=
env
[
name
]
+
"
"
;
}
}
)
;
}
)
;
return
tasks
;
}
}
)
;
}
var
graph
=
{
tasks
:
flatmap
(
[
"
linux
"
"
windows
"
"
arm
"
"
tools
"
]
generatePlatformTasks
)
}
;
if
(
TC_PROJECT
=
=
"
nss
-
try
"
)
{
graph
.
tasks
=
try_syntax
.
filterTasks
(
graph
.
tasks
TC_COMMENT
)
;
}
image_builder
.
asyncTweakTasks
(
graph
.
tasks
)
.
then
(
function
(
tasks
)
{
graph
.
tasks
=
tasks
;
process
.
stdout
.
write
(
JSON
.
stringify
(
graph
null
2
)
)
;
}
)
;
