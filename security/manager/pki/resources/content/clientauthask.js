"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
const
{
Services
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
var
bundle
;
var
certArray
;
var
dialogParams
;
var
rememberBox
;
function
onLoad
(
)
{
dialogParams
=
window
.
arguments
[
0
]
.
QueryInterface
(
Ci
.
nsIDialogParamBlock
)
;
bundle
=
document
.
getElementById
(
"
pippki_bundle
"
)
;
let
rememberSetting
=
Services
.
prefs
.
getBoolPref
(
"
security
.
remember_cert_checkbox_default_setting
"
)
;
rememberBox
=
document
.
getElementById
(
"
rememberBox
"
)
;
rememberBox
.
label
=
bundle
.
getString
(
"
clientAuthRemember
"
)
;
rememberBox
.
checked
=
rememberSetting
;
let
cnAndPort
=
dialogParams
.
GetString
(
0
)
;
let
org
=
dialogParams
.
GetString
(
1
)
;
let
issuerOrg
=
dialogParams
.
GetString
(
2
)
;
let
formattedOrg
=
bundle
.
getFormattedString
(
"
clientAuthMessage1
"
[
org
]
)
;
let
formattedIssuerOrg
=
bundle
.
getFormattedString
(
"
clientAuthMessage2
"
[
issuerOrg
]
)
;
setText
(
"
hostname
"
cnAndPort
)
;
setText
(
"
organization
"
formattedOrg
)
;
setText
(
"
issuer
"
formattedIssuerOrg
)
;
let
selectElement
=
document
.
getElementById
(
"
nicknames
"
)
;
certArray
=
dialogParams
.
objects
.
queryElementAt
(
0
Ci
.
nsIArray
)
;
for
(
let
i
=
0
;
i
<
certArray
.
length
;
i
+
+
)
{
let
menuItemNode
=
document
.
createElement
(
"
menuitem
"
)
;
let
cert
=
certArray
.
queryElementAt
(
i
Ci
.
nsIX509Cert
)
;
let
nickAndSerial
=
bundle
.
getFormattedString
(
"
clientAuthNickAndSerial
"
[
cert
.
nickname
cert
.
serialNumber
]
)
;
menuItemNode
.
setAttribute
(
"
value
"
i
)
;
menuItemNode
.
setAttribute
(
"
label
"
nickAndSerial
)
;
selectElement
.
firstChild
.
appendChild
(
menuItemNode
)
;
if
(
i
=
=
0
)
{
selectElement
.
selectedItem
=
menuItemNode
;
}
}
setDetails
(
)
;
}
function
setDetails
(
)
{
let
index
=
parseInt
(
document
.
getElementById
(
"
nicknames
"
)
.
value
)
;
let
cert
=
certArray
.
queryElementAt
(
index
Ci
.
nsIX509Cert
)
;
let
detailLines
=
[
bundle
.
getFormattedString
(
"
clientAuthIssuedTo
"
[
cert
.
subjectName
]
)
bundle
.
getFormattedString
(
"
clientAuthSerial
"
[
cert
.
serialNumber
]
)
bundle
.
getFormattedString
(
"
clientAuthValidityPeriod
"
[
cert
.
validity
.
notBeforeLocalTime
cert
.
validity
.
notAfterLocalTime
]
)
]
;
let
keyUsages
=
cert
.
keyUsages
;
if
(
keyUsages
)
{
detailLines
.
push
(
bundle
.
getFormattedString
(
"
clientAuthKeyUsages
"
[
keyUsages
]
)
)
;
}
let
emailAddresses
=
cert
.
getEmailAddresses
(
{
}
)
;
if
(
emailAddresses
.
length
>
0
)
{
let
joinedAddresses
=
emailAddresses
.
join
(
"
"
)
;
detailLines
.
push
(
bundle
.
getFormattedString
(
"
clientAuthEmailAddresses
"
[
joinedAddresses
]
)
)
;
}
detailLines
.
push
(
bundle
.
getFormattedString
(
"
clientAuthIssuedBy
"
[
cert
.
issuerName
]
)
)
;
detailLines
.
push
(
bundle
.
getFormattedString
(
"
clientAuthStoredOn
"
[
cert
.
tokenName
]
)
)
;
document
.
getElementById
(
"
details
"
)
.
value
=
detailLines
.
join
(
"
\
n
"
)
;
}
function
onCertSelected
(
)
{
setDetails
(
)
;
}
function
doOK
(
)
{
dialogParams
.
SetInt
(
0
1
)
;
let
index
=
parseInt
(
document
.
getElementById
(
"
nicknames
"
)
.
value
)
;
dialogParams
.
SetInt
(
1
index
)
;
dialogParams
.
SetInt
(
2
rememberBox
.
checked
)
;
return
true
;
}
function
doCancel
(
)
{
dialogParams
.
SetInt
(
0
0
)
;
dialogParams
.
SetInt
(
2
rememberBox
.
checked
)
;
return
true
;
}
