"
use
strict
"
;
function
getLabelForCertTreeItem
(
certTreeItem
)
{
let
element
=
document
.
createXULElement
(
"
label
"
)
;
let
cert
=
certTreeItem
.
cert
;
if
(
!
cert
)
{
element
.
setAttribute
(
"
value
"
certTreeItem
.
hostPort
)
;
return
element
;
}
const
attributes
=
[
cert
.
commonName
cert
.
organizationalUnit
cert
.
organization
cert
.
subjectName
]
;
for
(
let
attribute
of
attributes
)
{
if
(
attribute
)
{
element
.
setAttribute
(
"
value
"
attribute
)
;
return
element
;
}
}
document
.
l10n
.
setAttributes
(
element
"
cert
-
with
-
serial
"
{
serialNumber
:
cert
.
serialNumber
}
)
;
return
element
;
}
function
onLoad
(
)
{
let
typeFlag
=
window
.
arguments
[
0
]
;
let
confirm
=
document
.
getElementById
(
"
confirm
"
)
;
let
impact
=
document
.
getElementById
(
"
impact
"
)
;
let
prefixForType
;
switch
(
typeFlag
)
{
case
"
mine_tab
"
:
prefixForType
=
"
delete
-
user
-
cert
-
"
;
break
;
case
"
websites_tab
"
:
prefixForType
=
"
delete
-
ssl
-
cert
-
"
;
break
;
case
"
ca_tab
"
:
prefixForType
=
"
delete
-
ca
-
cert
-
"
;
break
;
case
"
others_tab
"
:
prefixForType
=
"
delete
-
email
-
cert
-
"
;
break
;
default
:
return
;
}
document
.
l10n
.
setAttributes
(
document
.
documentElement
prefixForType
+
"
title
"
)
;
document
.
l10n
.
setAttributes
(
confirm
prefixForType
+
"
confirm
"
)
;
document
.
l10n
.
setAttributes
(
impact
prefixForType
+
"
impact
"
)
;
let
box
=
document
.
getElementById
(
"
certlist
"
)
;
let
certTreeItems
=
window
.
arguments
[
1
]
;
for
(
let
certTreeItem
of
certTreeItems
)
{
let
listItem
=
document
.
createXULElement
(
"
richlistitem
"
)
;
let
label
=
getLabelForCertTreeItem
(
certTreeItem
)
;
listItem
.
appendChild
(
label
)
;
box
.
appendChild
(
listItem
)
;
}
}
function
onDialogAccept
(
)
{
let
retVals
=
window
.
arguments
[
2
]
;
retVals
.
deleteConfirmed
=
true
;
return
true
;
}
function
onDialogCancel
(
)
{
let
retVals
=
window
.
arguments
[
2
]
;
retVals
.
deleteConfirmed
=
false
;
return
true
;
}
