"
use
strict
"
;
var
gDialog
;
var
gSecInfo
;
var
gCert
;
var
gChecking
;
var
gBroken
;
var
gNeedReset
;
const
{
PrivateBrowsingUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
sys
.
mjs
"
)
;
function
initExceptionDialog
(
)
{
Services
.
telemetry
.
keyedScalarSet
(
"
security
.
psm_ui_interaction
"
"
add_cert_exception_dialog
"
true
)
;
gNeedReset
=
false
;
gDialog
=
document
.
getElementById
(
"
exceptiondialog
"
)
;
let
warningText
=
document
.
getElementById
(
"
warningText
"
)
;
document
.
l10n
.
setAttributes
(
warningText
"
add
-
exception
-
branded
-
warning
"
)
;
let
confirmButton
=
gDialog
.
getButton
(
"
extra1
"
)
;
let
l10nUpdatedElements
=
[
confirmButton
warningText
]
;
confirmButton
.
disabled
=
true
;
var
args
=
window
.
arguments
;
if
(
args
&
&
args
[
0
]
)
{
if
(
args
[
0
]
.
location
)
{
document
.
getElementById
(
"
locationTextBox
"
)
.
value
=
args
[
0
]
.
location
;
document
.
getElementById
(
"
checkCertButton
"
)
.
disabled
=
false
;
if
(
args
[
0
]
.
securityInfo
)
{
gSecInfo
=
args
[
0
]
.
securityInfo
;
gCert
=
gSecInfo
.
serverCert
;
gBroken
=
true
;
l10nUpdatedElements
=
l10nUpdatedElements
.
concat
(
updateCertStatus
(
)
)
;
}
else
if
(
args
[
0
]
.
prefetchCert
)
{
document
.
getElementById
(
"
checkCertButton
"
)
.
disabled
=
true
;
gChecking
=
true
;
l10nUpdatedElements
=
l10nUpdatedElements
.
concat
(
updateCertStatus
(
)
)
;
window
.
setTimeout
(
checkCert
0
)
;
}
}
args
[
0
]
.
exceptionAdded
=
false
;
}
for
(
let
id
of
[
"
warningSupplemental
"
"
certLocationLabel
"
"
checkCertButton
"
"
statusDescription
"
"
statusLongDescription
"
"
viewCertButton
"
"
permanent
"
]
)
{
let
element
=
document
.
getElementById
(
id
)
;
l10nUpdatedElements
.
push
(
element
)
;
}
document
.
l10n
.
translateElements
(
l10nUpdatedElements
)
.
then
(
(
)
=
>
window
.
sizeToContent
(
)
)
;
document
.
addEventListener
(
"
dialogextra1
"
addException
)
;
document
.
addEventListener
(
"
dialogextra2
"
checkCert
)
;
}
function
grabCert
(
req
evt
)
{
if
(
req
.
channel
&
&
req
.
channel
.
securityInfo
)
{
gSecInfo
=
req
.
channel
.
securityInfo
;
gCert
=
gSecInfo
?
gSecInfo
.
serverCert
:
null
;
}
gBroken
=
evt
.
type
=
=
"
error
"
;
gChecking
=
false
;
document
.
l10n
.
translateElements
(
updateCertStatus
(
)
)
.
then
(
(
)
=
>
window
.
sizeToContent
(
)
)
;
}
async
function
checkCert
(
)
{
gCert
=
null
;
gSecInfo
=
null
;
gChecking
=
true
;
gBroken
=
false
;
await
document
.
l10n
.
translateElements
(
updateCertStatus
(
)
)
;
window
.
sizeToContent
(
)
;
let
uri
=
getURI
(
)
;
if
(
uri
)
{
Services
.
telemetry
.
keyedScalarSet
(
"
security
.
psm_ui_interaction
"
"
add_cert_exception_dialog_get
"
true
)
;
let
req
=
new
XMLHttpRequest
(
)
;
req
.
open
(
"
GET
"
uri
.
prePath
)
;
req
.
onerror
=
grabCert
.
bind
(
this
req
)
;
req
.
onload
=
grabCert
.
bind
(
this
req
)
;
req
.
send
(
null
)
;
}
else
{
gChecking
=
false
;
await
document
.
l10n
.
translateElements
(
updateCertStatus
(
)
)
;
window
.
sizeToContent
(
)
;
}
}
function
getURI
(
)
{
let
locationTextBox
=
document
.
getElementById
(
"
locationTextBox
"
)
;
let
{
preferredURI
:
uri
}
=
Services
.
uriFixup
.
getFixupURIInfo
(
locationTextBox
.
value
)
;
if
(
!
uri
)
{
return
null
;
}
let
mutator
=
uri
.
mutate
(
)
;
if
(
uri
.
scheme
=
=
"
http
"
)
{
mutator
.
setScheme
(
"
https
"
)
;
}
if
(
uri
.
port
=
=
-
1
)
{
mutator
.
setPort
(
443
)
;
}
return
mutator
.
finalize
(
)
;
}
function
resetDialog
(
)
{
document
.
getElementById
(
"
viewCertButton
"
)
.
disabled
=
true
;
document
.
getElementById
(
"
permanent
"
)
.
disabled
=
true
;
gDialog
.
getButton
(
"
extra1
"
)
.
disabled
=
true
;
setText
(
"
headerDescription
"
"
"
)
;
setText
(
"
statusDescription
"
"
"
)
;
setText
(
"
statusLongDescription
"
"
"
)
;
setText
(
"
status2Description
"
"
"
)
;
setText
(
"
status2LongDescription
"
"
"
)
;
setText
(
"
status3Description
"
"
"
)
;
setText
(
"
status3LongDescription
"
"
"
)
;
window
.
sizeToContent
(
)
;
}
function
handleTextChange
(
)
{
var
checkCertButton
=
document
.
getElementById
(
"
checkCertButton
"
)
;
checkCertButton
.
disabled
=
!
document
.
getElementById
(
"
locationTextBox
"
)
.
value
;
if
(
gNeedReset
)
{
gNeedReset
=
false
;
resetDialog
(
)
;
}
}
function
updateCertStatus
(
)
{
var
shortDesc
longDesc
;
let
l10nUpdatedElements
=
[
]
;
if
(
gCert
)
{
if
(
gBroken
)
{
var
mms
=
"
add
-
exception
-
domain
-
mismatch
-
short
"
;
var
mml
=
"
add
-
exception
-
domain
-
mismatch
-
long
"
;
var
exs
=
"
add
-
exception
-
expired
-
short
"
;
var
exl
=
"
add
-
exception
-
expired
-
long
"
;
var
uts
=
"
add
-
exception
-
unverified
-
or
-
bad
-
signature
-
short
"
;
var
utl
=
"
add
-
exception
-
unverified
-
or
-
bad
-
signature
-
long
"
;
if
(
gSecInfo
.
overridableErrorCategory
=
=
Ci
.
nsITransportSecurityInfo
.
ERROR_TRUST
)
{
shortDesc
=
uts
;
longDesc
=
utl
;
}
else
if
(
gSecInfo
.
overridableErrorCategory
=
=
Ci
.
nsITransportSecurityInfo
.
ERROR_DOMAIN
)
{
shortDesc
=
mms
;
longDesc
=
mml
;
}
else
if
(
gSecInfo
.
overridableErrorCategory
=
=
Ci
.
nsITransportSecurityInfo
.
ERROR_TIME
)
{
shortDesc
=
exs
;
longDesc
=
exl
;
}
gDialog
.
getButton
(
"
extra1
"
)
.
disabled
=
false
;
var
inPrivateBrowsing
=
inPrivateBrowsingMode
(
)
;
var
pe
=
document
.
getElementById
(
"
permanent
"
)
;
pe
.
disabled
=
inPrivateBrowsing
;
pe
.
checked
=
!
inPrivateBrowsing
;
let
headerDescription
=
document
.
getElementById
(
"
headerDescription
"
)
;
document
.
l10n
.
setAttributes
(
headerDescription
"
add
-
exception
-
invalid
-
header
"
)
;
l10nUpdatedElements
.
push
(
headerDescription
)
;
}
else
{
shortDesc
=
"
add
-
exception
-
valid
-
short
"
;
longDesc
=
"
add
-
exception
-
valid
-
long
"
;
gDialog
.
getButton
(
"
extra1
"
)
.
disabled
=
true
;
document
.
getElementById
(
"
permanent
"
)
.
disabled
=
true
;
}
document
.
getElementById
(
"
checkCertButton
"
)
.
disabled
=
false
;
document
.
getElementById
(
"
viewCertButton
"
)
.
disabled
=
false
;
Services
.
obs
.
notifyObservers
(
null
"
cert
-
exception
-
ui
-
ready
"
)
;
}
else
if
(
gChecking
)
{
shortDesc
=
"
add
-
exception
-
checking
-
short
"
;
longDesc
=
"
add
-
exception
-
checking
-
long
"
;
document
.
getElementById
(
"
checkCertButton
"
)
.
disabled
=
true
;
document
.
getElementById
(
"
viewCertButton
"
)
.
disabled
=
true
;
gDialog
.
getButton
(
"
extra1
"
)
.
disabled
=
true
;
document
.
getElementById
(
"
permanent
"
)
.
disabled
=
true
;
}
else
{
shortDesc
=
"
add
-
exception
-
no
-
cert
-
short
"
;
longDesc
=
"
add
-
exception
-
no
-
cert
-
long
"
;
document
.
getElementById
(
"
checkCertButton
"
)
.
disabled
=
false
;
document
.
getElementById
(
"
viewCertButton
"
)
.
disabled
=
true
;
gDialog
.
getButton
(
"
extra1
"
)
.
disabled
=
true
;
document
.
getElementById
(
"
permanent
"
)
.
disabled
=
true
;
}
let
statusDescription
=
document
.
getElementById
(
"
statusDescription
"
)
;
let
statusLongDescription
=
document
.
getElementById
(
"
statusLongDescription
"
)
;
document
.
l10n
.
setAttributes
(
statusDescription
shortDesc
)
;
document
.
l10n
.
setAttributes
(
statusLongDescription
longDesc
)
;
l10nUpdatedElements
.
push
(
statusDescription
)
;
l10nUpdatedElements
.
push
(
statusLongDescription
)
;
gNeedReset
=
true
;
return
l10nUpdatedElements
;
}
function
viewCertButtonClick
(
)
{
if
(
gCert
)
{
Services
.
telemetry
.
keyedScalarSet
(
"
security
.
psm_ui_interaction
"
"
add_cert_exception_dialog_view
"
true
)
;
viewCertHelper
(
this
gCert
)
;
}
}
function
addException
(
)
{
if
(
!
gCert
|
|
!
gSecInfo
)
{
return
;
}
Services
.
telemetry
.
keyedScalarSet
(
"
security
.
psm_ui_interaction
"
"
add_cert_exception_dialog_confirm
"
true
)
;
var
overrideService
=
Cc
[
"
mozilla
.
org
/
security
/
certoverride
;
1
"
]
.
getService
(
Ci
.
nsICertOverrideService
)
;
var
flags
=
0
;
if
(
gSecInfo
.
isUntrusted
)
{
flags
|
=
overrideService
.
ERROR_UNTRUSTED
;
}
if
(
gSecInfo
.
isDomainMismatch
)
{
flags
|
=
overrideService
.
ERROR_MISMATCH
;
}
if
(
gSecInfo
.
isNotValidAtThisTime
)
{
flags
|
=
overrideService
.
ERROR_TIME
;
}
var
permanentCheckbox
=
document
.
getElementById
(
"
permanent
"
)
;
var
shouldStorePermanently
=
permanentCheckbox
.
checked
&
&
!
inPrivateBrowsingMode
(
)
;
var
uri
=
getURI
(
)
;
overrideService
.
rememberValidityOverride
(
uri
.
asciiHost
uri
.
port
{
}
gCert
flags
!
shouldStorePermanently
)
;
let
args
=
window
.
arguments
;
if
(
args
&
&
args
[
0
]
)
{
args
[
0
]
.
exceptionAdded
=
true
;
}
gDialog
.
acceptDialog
(
)
;
}
function
inPrivateBrowsingMode
(
)
{
return
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
;
}
