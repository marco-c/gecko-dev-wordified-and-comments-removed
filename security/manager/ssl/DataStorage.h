#
ifndef
mozilla_DataStorage_h
#
define
mozilla_DataStorage_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsIDataStorage
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
class
TaskQueue
;
class
DataStorageManager
final
:
public
nsIDataStorageManager
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIDATASTORAGEMANAGER
private
:
~
DataStorageManager
(
)
=
default
;
bool
mAlternateServicesCreated
=
false
;
bool
mClientAuthRememberListCreated
=
false
;
bool
mSiteSecurityServiceStateCreated
=
false
;
}
;
class
DataStorageItem
final
:
public
nsIDataStorageItem
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIDATASTORAGEITEM
DataStorageItem
(
const
nsACString
&
aKey
const
nsACString
&
aValue
nsIDataStorage
:
:
DataType
aType
)
:
key
(
aKey
)
value
(
aValue
)
type
(
aType
)
{
}
private
:
~
DataStorageItem
(
)
=
default
;
nsAutoCString
key
;
nsAutoCString
value
;
nsIDataStorage
:
:
DataType
type
;
}
;
class
DataStorage
final
:
public
nsIDataStorage
public
nsIMemoryReporter
public
nsIObserver
{
MOZ_DEFINE_MALLOC_SIZE_OF
(
MallocSizeOf
)
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIDATASTORAGE
NS_DECL_NSIMEMORYREPORTER
NS_DECL_NSIOBSERVER
explicit
DataStorage
(
const
nsString
&
aFilename
)
;
nsresult
Init
(
)
;
private
:
~
DataStorage
(
)
=
default
;
void
ArmTimer
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
ShutdownTimer
(
)
;
class
Writer
;
class
Reader
;
class
Entry
{
public
:
Entry
(
)
;
bool
UpdateScore
(
)
;
uint32_t
mScore
;
int32_t
mLastAccessed
;
nsCString
mValue
;
}
;
class
KeyAndEntry
{
public
:
nsCString
mKey
;
Entry
mEntry
;
}
;
typedef
nsTHashMap
<
nsCStringHashKey
Entry
>
DataStorageTable
;
typedef
nsRefPtrHashtable
<
nsStringHashKey
DataStorage
>
DataStorages
;
void
WaitForReady
(
)
;
nsresult
AsyncWriteData
(
const
MutexAutoLock
&
aProofOfLock
)
;
nsresult
AsyncReadData
(
const
MutexAutoLock
&
aProofOfLock
)
;
static
nsresult
ValidateKeyAndValue
(
const
nsACString
&
aKey
const
nsACString
&
aValue
)
;
static
void
TimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
;
void
NotifyObservers
(
const
char
*
aTopic
)
;
bool
GetInternal
(
const
nsACString
&
aKey
Entry
*
aEntry
nsIDataStorage
:
:
DataType
aType
const
MutexAutoLock
&
aProofOfLock
)
;
nsresult
PutInternal
(
const
nsACString
&
aKey
Entry
&
aEntry
nsIDataStorage
:
:
DataType
aType
const
MutexAutoLock
&
aProofOfLock
)
;
void
MaybeEvictOneEntry
(
nsIDataStorage
:
:
DataType
aType
const
MutexAutoLock
&
aProofOfLock
)
;
DataStorageTable
&
GetTableForType
(
nsIDataStorage
:
:
DataType
aType
const
MutexAutoLock
&
aProofOfLock
)
;
void
ReadAllFromTable
(
nsIDataStorage
:
:
DataType
aType
nsTArray
<
RefPtr
<
nsIDataStorageItem
>
>
&
aItems
const
MutexAutoLock
&
aProofOfLock
)
;
Mutex
mMutex
;
DataStorageTable
mPersistentDataTable
MOZ_GUARDED_BY
(
mMutex
)
;
DataStorageTable
mTemporaryDataTable
MOZ_GUARDED_BY
(
mMutex
)
;
DataStorageTable
mPrivateDataTable
MOZ_GUARDED_BY
(
mMutex
)
;
nsCOMPtr
<
nsIFile
>
mBackingFile
MOZ_GUARDED_BY
(
mMutex
)
;
bool
mPendingWrite
MOZ_GUARDED_BY
(
mMutex
)
;
bool
mTimerArmed
MOZ_GUARDED_BY
(
mMutex
)
;
bool
mShuttingDown
MOZ_GUARDED_BY
(
mMutex
)
;
RefPtr
<
TaskQueue
>
mBackgroundTaskQueue
MOZ_GUARDED_BY
(
mMutex
)
;
nsCOMPtr
<
nsITimer
>
mTimer
;
mozilla
:
:
Atomic
<
bool
>
mInitCalled
;
uint32_t
mTimerDelayMS
;
Monitor
mReadyMonitor
;
bool
mReady
MOZ_GUARDED_BY
(
mReadyMonitor
)
;
const
nsString
mFilename
;
static
StaticAutoPtr
<
DataStorages
>
sDataStorages
;
}
;
}
#
endif
