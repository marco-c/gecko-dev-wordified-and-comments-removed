#
ifndef
mozilla_DataStorage_h
#
define
mozilla_DataStorage_h
#
include
<
functional
>
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
ipc
/
FileDescriptor
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsString
.
h
"
class
psm_DataStorageTest
;
namespace
mozilla
{
class
DataStorageMemoryReporter
;
class
TaskQueue
;
namespace
dom
{
class
ContentChild
;
}
namespace
psm
{
class
DataStorageEntry
;
class
DataStorageItem
;
}
enum
DataStorageType
{
DataStorage_Persistent
DataStorage_Temporary
DataStorage_Private
}
;
enum
class
DataStorageClass
{
#
define
DATA_STORAGE
(
_
)
_
#
include
"
mozilla
/
DataStorageList
.
h
"
#
undef
DATA_STORAGE
}
;
class
DataStorage
:
public
nsIObserver
{
typedef
psm
:
:
DataStorageItem
DataStorageItem
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
static
already_AddRefed
<
DataStorage
>
Get
(
DataStorageClass
aFilename
)
;
nsresult
Init
(
const
nsTArray
<
mozilla
:
:
psm
:
:
DataStorageItem
>
*
aItems
mozilla
:
:
ipc
:
:
FileDescriptor
aWriteFd
=
mozilla
:
:
ipc
:
:
FileDescriptor
(
)
)
;
nsresult
AsyncTakeFileDesc
(
std
:
:
function
<
void
(
mozilla
:
:
ipc
:
:
FileDescriptor
&
&
)
>
&
&
aResolver
)
;
nsCString
Get
(
const
nsCString
&
aKey
DataStorageType
aType
)
;
nsresult
Put
(
const
nsCString
&
aKey
const
nsCString
&
aValue
DataStorageType
aType
)
;
void
Remove
(
const
nsCString
&
aKey
DataStorageType
aType
)
;
nsresult
Clear
(
)
;
static
void
GetAllFileNames
(
nsTArray
<
nsString
>
&
aItems
)
;
static
void
GetAllChildProcessData
(
nsTArray
<
mozilla
:
:
psm
:
:
DataStorageEntry
>
&
aEntries
)
;
void
GetAll
(
nsTArray
<
DataStorageItem
>
*
aItems
)
;
static
void
SetCachedStorageEntries
(
const
nsTArray
<
mozilla
:
:
psm
:
:
DataStorageEntry
>
&
aEntries
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
bool
IsReady
(
)
;
void
ShutdownTimer
(
)
;
private
:
explicit
DataStorage
(
const
nsString
&
aFilename
)
;
virtual
~
DataStorage
(
)
=
default
;
static
already_AddRefed
<
DataStorage
>
GetFromRawFileName
(
const
nsString
&
aFilename
)
;
friend
class
:
:
psm_DataStorageTest
;
friend
class
mozilla
:
:
dom
:
:
ContentChild
;
friend
class
mozilla
:
:
DataStorageMemoryReporter
;
class
Writer
;
class
Reader
;
class
Opener
;
class
Entry
{
public
:
Entry
(
)
;
bool
UpdateScore
(
)
;
uint32_t
mScore
;
int32_t
mLastAccessed
;
nsCString
mValue
;
}
;
class
KeyAndEntry
{
public
:
nsCString
mKey
;
Entry
mEntry
;
}
;
typedef
nsDataHashtable
<
nsCStringHashKey
Entry
>
DataStorageTable
;
typedef
nsRefPtrHashtable
<
nsStringHashKey
DataStorage
>
DataStorages
;
void
WaitForReady
(
)
;
nsresult
AsyncWriteData
(
const
MutexAutoLock
&
aProofOfLock
)
;
nsresult
AsyncReadData
(
const
MutexAutoLock
&
aProofOfLock
)
;
static
nsresult
ValidateKeyAndValue
(
const
nsCString
&
aKey
const
nsCString
&
aValue
)
;
static
void
TimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
;
void
NotifyObservers
(
const
char
*
aTopic
)
;
bool
GetInternal
(
const
nsCString
&
aKey
Entry
*
aEntry
DataStorageType
aType
const
MutexAutoLock
&
aProofOfLock
)
;
nsresult
PutInternal
(
const
nsCString
&
aKey
Entry
&
aEntry
DataStorageType
aType
const
MutexAutoLock
&
aProofOfLock
)
;
void
MaybeEvictOneEntry
(
DataStorageType
aType
const
MutexAutoLock
&
aProofOfLock
)
;
DataStorageTable
&
GetTableForType
(
DataStorageType
aType
const
MutexAutoLock
&
aProofOfLock
)
;
void
ReadAllFromTable
(
DataStorageType
aType
nsTArray
<
DataStorageItem
>
*
aItems
const
MutexAutoLock
&
aProofOfLock
)
;
Mutex
mMutex
;
DataStorageTable
mPersistentDataTable
;
DataStorageTable
mTemporaryDataTable
;
DataStorageTable
mPrivateDataTable
;
nsCOMPtr
<
nsIFile
>
mBackingFile
;
bool
mPendingWrite
;
bool
mShuttingDown
;
RefPtr
<
TaskQueue
>
mBackgroundTaskQueue
;
nsCOMPtr
<
nsITimer
>
mTimer
;
mozilla
:
:
Atomic
<
bool
>
mInitCalled
;
Monitor
mReadyMonitor
;
bool
mReady
;
const
nsString
mFilename
;
mozilla
:
:
ipc
:
:
FileDescriptor
mWriteFd
;
static
StaticAutoPtr
<
DataStorages
>
sDataStorages
;
}
;
}
#
endif
