#
include
"
nsISupports
.
idl
"
#
include
"
nsIVariant
.
idl
"
[
scriptable
function
uuid
(
3f8fe26a
-
a436
-
4ad4
-
9c1c
-
a53c60973c31
)
]
interface
nsICertStorageCallback
:
nsISupports
{
[
must_use
]
void
done
(
in
nsresult
rv
in
nsIVariant
result
)
;
}
;
[
scriptable
uuid
(
96db6fd7
-
6b64
-
4a5a
-
955d
-
310bd9ca4234
)
]
interface
nsIRevocationState
:
nsISupports
{
readonly
attribute
short
state
;
}
;
[
scriptable
uuid
(
23ce3546
-
f1b9
-
46f6
-
8de3
-
77704da5702f
)
]
interface
nsIIssuerAndSerialRevocationState
:
nsIRevocationState
{
readonly
attribute
ACString
issuer
;
readonly
attribute
ACString
serial
;
}
;
[
scriptable
uuid
(
e78b51b4
-
6fa4
-
41e2
-
92ce
-
e9404f541e96
)
]
interface
nsISubjectAndPubKeyRevocationState
:
nsIRevocationState
{
readonly
attribute
ACString
subject
;
readonly
attribute
ACString
pubKey
;
}
;
[
uuid
(
9676cfc4
-
6e84
-
11ec
-
a30d
-
d3cd0af86e01
)
]
interface
nsICRLiteTimestamp
:
nsISupports
{
readonly
attribute
Array
<
octet
>
logID
;
readonly
attribute
unsigned
long
long
timestamp
;
}
;
[
scriptable
uuid
(
27b66f5e
-
0faf
-
403b
-
95b4
-
bc11691ac50d
)
]
interface
nsICertInfo
:
nsISupports
{
readonly
attribute
ACString
cert
;
readonly
attribute
ACString
subject
;
readonly
attribute
short
trust
;
}
;
[
scriptable
uuid
(
327100a7
-
3401
-
45ef
-
b160
-
bf880f1016fd
)
]
interface
nsICertStorage
:
nsISupports
{
const
octet
DATA_TYPE_REVOCATION
=
1
;
const
octet
DATA_TYPE_CERTIFICATE
=
2
;
const
octet
DATA_TYPE_CRLITE
=
3
;
const
octet
DATA_TYPE_CRLITE_FILTER_FULL
=
4
;
const
octet
DATA_TYPE_CRLITE_FILTER_INCREMENTAL
=
5
;
[
must_use
]
void
hasPriorData
(
in
octet
type
in
nsICertStorageCallback
callback
)
;
const
short
STATE_UNSET
=
0
;
const
short
STATE_ENFORCE
=
1
;
const
short
STATE_NOT_ENROLLED
=
2
;
const
short
STATE_NOT_COVERED
=
3
;
const
short
STATE_NO_FILTER
=
4
;
[
must_use
]
void
setRevocations
(
in
Array
<
nsIRevocationState
>
revocations
in
nsICertStorageCallback
callback
)
;
[
must_use
]
short
getRevocationState
(
in
Array
<
octet
>
issuer
in
Array
<
octet
>
serial
in
Array
<
octet
>
subject
in
Array
<
octet
>
pubkey
)
;
[
must_use
]
void
setFullCRLiteFilter
(
in
Array
<
octet
>
filter
in
nsICertStorageCallback
callback
)
;
[
must_use
noscript
]
short
getCRLiteRevocationState
(
in
Array
<
octet
>
issuerSPKI
in
Array
<
octet
>
serialNumber
in
Array
<
nsICRLiteTimestamp
>
timestamps
)
;
[
must_use
]
void
addCRLiteDelta
(
in
Array
<
octet
>
delta
in
ACString
filename
in
nsICertStorageCallback
callback
)
;
[
must_use
]
void
testNoteCRLiteUpdateTime
(
in
nsICertStorageCallback
callback
)
;
const
short
TRUST_INHERIT
=
0
;
const
short
TRUST_ANCHOR
=
1
;
[
must_use
]
void
addCerts
(
in
Array
<
nsICertInfo
>
certs
in
nsICertStorageCallback
callback
)
;
[
must_use
]
void
removeCertsByHashes
(
in
Array
<
ACString
>
hashes
in
nsICertStorageCallback
callback
)
;
[
must_use
]
Array
<
Array
<
octet
>
>
findCertsBySubject
(
in
Array
<
octet
>
subject
)
;
[
must_use
]
int32_t
GetRemainingOperationCount
(
)
;
}
;
