#
ifndef
_nsNSSComponent_h_
#
define
_nsNSSComponent_h_
#
include
"
nsINSSComponent
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
SharedCertVerifier
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsNSSCallbacks
.
h
"
#
include
"
prerror
.
h
"
#
include
"
sslt
.
h
"
#
ifdef
XP_WIN
#
include
"
windows
.
h
"
#
include
"
wincrypt
.
h
"
#
endif
class
nsIDOMWindow
;
class
nsIPrompt
;
class
nsIX509CertList
;
class
SmartCardThreadList
;
namespace
mozilla
{
namespace
psm
{
MOZ_MUST_USE
:
:
already_AddRefed
<
mozilla
:
:
psm
:
:
SharedCertVerifier
>
GetDefaultCertVerifier
(
)
;
}
}
#
define
NS_NSSCOMPONENT_CID
\
{
0x4cb64dfd
0xca98
0x4e24
{
0xbe
0xfd
0x0d
0x92
0x85
0xa3
0x3b
0xcb
}
}
extern
bool
EnsureNSSInitializedChromeOrContent
(
)
;
class
nsNSSComponent
final
:
public
nsINSSComponent
public
nsIObserver
{
public
:
friend
class
LoadLoadableRootsTask
;
nsNSSComponent
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSINSSCOMPONENT
NS_DECL_NSIOBSERVER
nsresult
Init
(
)
;
static
nsresult
GetNewPrompter
(
nsIPrompt
*
*
result
)
;
static
void
FillTLSVersionRange
(
SSLVersionRange
&
rangeOut
uint32_t
minFromPrefs
uint32_t
maxFromPrefs
SSLVersionRange
defaults
)
;
protected
:
virtual
~
nsNSSComponent
(
)
;
private
:
nsresult
InitializeNSS
(
)
;
void
ShutdownNSS
(
)
;
void
setValidationOptions
(
bool
isInitialSetting
const
mozilla
:
:
MutexAutoLock
&
proofOfLock
)
;
nsresult
setEnabledTLSVersions
(
)
;
nsresult
RegisterObservers
(
)
;
void
MaybeImportEnterpriseRoots
(
)
;
void
UnloadEnterpriseRoots
(
)
;
void
MaybeEnableFamilySafetyCompatibility
(
)
;
void
UnloadFamilySafetyRoot
(
)
;
#
ifdef
XP_WIN
nsresult
MaybeImportFamilySafetyRoot
(
PCCERT_CONTEXT
certificate
bool
&
wasFamilySafetyRoot
)
;
nsresult
LoadFamilySafetyRoot
(
)
;
#
endif
mozilla
:
:
Monitor
mLoadableRootsLoadedMonitor
;
bool
mLoadableRootsLoaded
;
nsresult
mLoadableRootsLoadedResult
;
mozilla
:
:
Mutex
mMutex
;
#
ifdef
DEBUG
nsString
mTestBuiltInRootHash
;
#
endif
nsString
mContentSigningRootHash
;
RefPtr
<
mozilla
:
:
psm
:
:
SharedCertVerifier
>
mDefaultCertVerifier
;
nsString
mMitmCanaryIssuer
;
bool
mMitmDetecionEnabled
;
mozilla
:
:
UniqueCERTCertList
mEnterpriseRoots
;
mozilla
:
:
UniqueCERTCertificate
mFamilySafetyRoot
;
static
int
mInstanceCount
;
bool
mLoadLoadableRootsTaskDispatched
;
}
;
inline
nsresult
BlockUntilLoadableRootsLoaded
(
)
{
nsCOMPtr
<
nsINSSComponent
>
component
(
do_GetService
(
PSM_COMPONENT_CONTRACTID
)
)
;
if
(
!
component
)
{
return
NS_ERROR_FAILURE
;
}
return
component
-
>
BlockUntilLoadableRootsLoaded
(
)
;
}
inline
nsresult
CheckForSmartCardChanges
(
)
{
#
ifndef
MOZ_NO_SMART_CARDS
nsCOMPtr
<
nsINSSComponent
>
component
(
do_GetService
(
PSM_COMPONENT_CONTRACTID
)
)
;
if
(
!
component
)
{
return
NS_ERROR_FAILURE
;
}
return
component
-
>
CheckForSmartCardChanges
(
)
;
#
else
return
NS_OK
;
#
endif
}
#
endif
