#
ifndef
_nsNSSComponent_h_
#
define
_nsNSSComponent_h_
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
SharedCertVerifier
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsNSSCallbacks
.
h
"
#
include
"
prerror
.
h
"
#
include
"
sslt
.
h
"
#
ifdef
XP_WIN
#
include
"
windows
.
h
"
#
include
"
wincrypt
.
h
"
#
endif
class
nsIDOMWindow
;
class
nsIPrompt
;
class
nsIX509CertList
;
class
SmartCardThreadList
;
namespace
mozilla
{
namespace
psm
{
MOZ_MUST_USE
:
:
already_AddRefed
<
mozilla
:
:
psm
:
:
SharedCertVerifier
>
GetDefaultCertVerifier
(
)
;
}
}
#
define
NS_NSSCOMPONENT_CID
\
{
0x4cb64dfd
0xca98
0x4e24
{
0xbe
0xfd
0x0d
0x92
0x85
0xa3
0x3b
0xcb
}
}
#
define
PSM_COMPONENT_CONTRACTID
"
mozilla
.
org
/
psm
;
1
"
#
define
NS_INSSCOMPONENT_IID
\
{
0xa0a8f52b
0xea18
0x4abc
\
{
0xa3
0xca
0xec
0xcf
0x70
0x4f
0xfe
0x63
}
}
extern
bool
EnsureNSSInitializedChromeOrContent
(
)
;
class
NS_NO_VTABLE
nsINSSComponent
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_INSSCOMPONENT_IID
)
NS_IMETHOD
GetPIPNSSBundleString
(
const
char
*
name
nsAString
&
outString
)
=
0
;
NS_IMETHOD
PIPBundleFormatStringFromName
(
const
char
*
name
const
char16_t
*
*
params
uint32_t
numParams
nsAString
&
outString
)
=
0
;
NS_IMETHOD
GetNSSBundleString
(
const
char
*
name
nsAString
&
outString
)
=
0
;
NS_IMETHOD
LogoutAuthenticatedPK11
(
)
=
0
;
#
ifdef
DEBUG
NS_IMETHOD
IsCertTestBuiltInRoot
(
CERTCertificate
*
cert
bool
&
result
)
=
0
;
#
endif
NS_IMETHOD
IsCertContentSigningRoot
(
CERTCertificate
*
cert
bool
&
result
)
=
0
;
#
ifdef
XP_WIN
NS_IMETHOD
GetEnterpriseRoots
(
nsIX509CertList
*
*
enterpriseRoots
)
=
0
;
#
endif
NS_IMETHOD
BlockUntilLoadableRootsLoaded
(
)
=
0
;
NS_IMETHOD
CheckForSmartCardChanges
(
)
=
0
;
NS_IMETHOD
IssuerMatchesMitmCanary
(
const
char
*
aCertIssuer
)
=
0
;
NS_IMETHOD
HasActiveSmartCards
(
bool
&
result
)
=
0
;
NS_IMETHOD
HasUserCertsInstalled
(
bool
&
result
)
=
0
;
virtual
:
:
already_AddRefed
<
mozilla
:
:
psm
:
:
SharedCertVerifier
>
GetDefaultCertVerifier
(
)
=
0
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsINSSComponent
NS_INSSCOMPONENT_IID
)
class
nsNSSComponent
final
:
public
nsINSSComponent
public
nsIObserver
{
public
:
friend
class
LoadLoadableRootsTask
;
NS_DEFINE_STATIC_CID_ACCESSOR
(
NS_NSSCOMPONENT_CID
)
nsNSSComponent
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
nsresult
Init
(
)
;
static
nsresult
GetNewPrompter
(
nsIPrompt
*
*
result
)
;
NS_IMETHOD
GetPIPNSSBundleString
(
const
char
*
name
nsAString
&
outString
)
override
;
NS_IMETHOD
PIPBundleFormatStringFromName
(
const
char
*
name
const
char16_t
*
*
params
uint32_t
numParams
nsAString
&
outString
)
override
;
NS_IMETHOD
GetNSSBundleString
(
const
char
*
name
nsAString
&
outString
)
override
;
NS_IMETHOD
LogoutAuthenticatedPK11
(
)
override
;
#
ifdef
DEBUG
NS_IMETHOD
IsCertTestBuiltInRoot
(
CERTCertificate
*
cert
bool
&
result
)
override
;
#
endif
NS_IMETHOD
IsCertContentSigningRoot
(
CERTCertificate
*
cert
bool
&
result
)
override
;
#
ifdef
XP_WIN
NS_IMETHOD
GetEnterpriseRoots
(
nsIX509CertList
*
*
enterpriseRoots
)
override
;
#
endif
NS_IMETHOD
BlockUntilLoadableRootsLoaded
(
)
override
;
NS_IMETHOD
CheckForSmartCardChanges
(
)
override
;
NS_IMETHOD
IssuerMatchesMitmCanary
(
const
char
*
aCertIssuer
)
override
;
NS_IMETHOD
HasActiveSmartCards
(
bool
&
result
)
override
;
NS_IMETHOD
HasUserCertsInstalled
(
bool
&
result
)
override
;
:
:
already_AddRefed
<
mozilla
:
:
psm
:
:
SharedCertVerifier
>
GetDefaultCertVerifier
(
)
override
;
static
bool
AreAnyWeakCiphersEnabled
(
)
;
static
void
UseWeakCiphersOnSocket
(
PRFileDesc
*
fd
)
;
static
void
FillTLSVersionRange
(
SSLVersionRange
&
rangeOut
uint32_t
minFromPrefs
uint32_t
maxFromPrefs
SSLVersionRange
defaults
)
;
protected
:
virtual
~
nsNSSComponent
(
)
;
private
:
nsresult
InitializeNSS
(
)
;
void
ShutdownNSS
(
)
;
void
UnloadLoadableRoots
(
)
;
void
setValidationOptions
(
bool
isInitialSetting
)
;
nsresult
setEnabledTLSVersions
(
)
;
nsresult
InitializePIPNSSBundle
(
)
;
nsresult
ConfigureInternalPKCS11Token
(
)
;
nsresult
RegisterObservers
(
)
;
void
MaybeEnableFamilySafetyCompatibility
(
)
;
void
MaybeImportEnterpriseRoots
(
)
;
#
ifdef
XP_WIN
void
ImportEnterpriseRootsForLocation
(
DWORD
locationFlag
const
mozilla
:
:
MutexAutoLock
&
proofOfLock
)
;
nsresult
MaybeImportFamilySafetyRoot
(
PCCERT_CONTEXT
certificate
bool
&
wasFamilySafetyRoot
)
;
nsresult
LoadFamilySafetyRoot
(
)
;
void
UnloadFamilySafetyRoot
(
)
;
void
UnloadEnterpriseRoots
(
const
mozilla
:
:
MutexAutoLock
&
proofOfLock
)
;
#
endif
mozilla
:
:
Monitor
mLoadableRootsLoadedMonitor
;
bool
mLoadableRootsLoaded
;
nsresult
mLoadableRootsLoadedResult
;
mozilla
:
:
Mutex
mMutex
;
nsCOMPtr
<
nsIStringBundle
>
mPIPNSSBundle
;
nsCOMPtr
<
nsIStringBundle
>
mNSSErrorsBundle
;
bool
mNSSInitialized
;
#
ifdef
DEBUG
nsString
mTestBuiltInRootHash
;
#
endif
nsString
mContentSigningRootHash
;
RefPtr
<
mozilla
:
:
psm
:
:
SharedCertVerifier
>
mDefaultCertVerifier
;
nsString
mMitmCanaryIssuer
;
bool
mMitmDetecionEnabled
;
#
ifdef
XP_WIN
mozilla
:
:
UniqueCERTCertificate
mFamilySafetyRoot
;
mozilla
:
:
UniqueCERTCertList
mEnterpriseRoots
;
#
endif
static
int
mInstanceCount
;
}
;
inline
nsresult
BlockUntilLoadableRootsLoaded
(
)
{
nsCOMPtr
<
nsINSSComponent
>
component
(
do_GetService
(
PSM_COMPONENT_CONTRACTID
)
)
;
if
(
!
component
)
{
return
NS_ERROR_FAILURE
;
}
return
component
-
>
BlockUntilLoadableRootsLoaded
(
)
;
}
inline
nsresult
CheckForSmartCardChanges
(
)
{
#
ifndef
MOZ_NO_SMART_CARDS
nsCOMPtr
<
nsINSSComponent
>
component
(
do_GetService
(
PSM_COMPONENT_CONTRACTID
)
)
;
if
(
!
component
)
{
return
NS_ERROR_FAILURE
;
}
return
component
-
>
CheckForSmartCardChanges
(
)
;
#
else
return
NS_OK
;
#
endif
}
class
nsNSSErrors
{
public
:
static
const
char
*
getDefaultErrorStringName
(
PRErrorCode
err
)
;
static
const
char
*
getOverrideErrorStringName
(
PRErrorCode
aErrorCode
)
;
}
;
#
endif
