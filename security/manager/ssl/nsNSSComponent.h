#
ifndef
_nsNSSComponent_h_
#
define
_nsNSSComponent_h_
#
include
"
nsINSSComponent
.
h
"
#
include
"
EnterpriseRoots
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
SharedCertVerifier
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsNSSCallbacks
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
prerror
.
h
"
#
include
"
sslt
.
h
"
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
include
<
wincrypt
.
h
>
#
endif
class
nsIDOMWindow
;
class
nsIPrompt
;
class
nsISerialEventTarget
;
class
nsITimer
;
namespace
mozilla
{
namespace
psm
{
[
[
nodiscard
]
]
:
:
already_AddRefed
<
mozilla
:
:
psm
:
:
SharedCertVerifier
>
GetDefaultCertVerifier
(
)
;
UniqueCERTCertList
FindClientCertificatesWithPrivateKeys
(
)
;
}
}
#
define
NS_NSSCOMPONENT_CID
\
{
\
0x4cb64dfd
0xca98
0x4e24
{
\
0xbe
0xfd
0x0d
0x92
0x85
0xa3
0x3b
0xcb
\
}
\
}
bool
EnsureNSSInitializedChromeOrContent
(
)
;
bool
HandleTLSPrefChange
(
const
nsCString
&
aPref
)
;
void
SetValidationOptionsCommon
(
)
;
void
PrepareForShutdownInSocketProcess
(
)
;
class
nsNSSComponent
final
:
public
nsINSSComponent
public
nsIObserver
{
public
:
friend
class
LoadLoadableCertsTask
;
friend
class
BackgroundImportEnterpriseCertsTask
;
nsNSSComponent
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSINSSCOMPONENT
NS_DECL_NSIOBSERVER
nsresult
Init
(
)
;
static
nsresult
GetNewPrompter
(
nsIPrompt
*
*
result
)
;
static
void
FillTLSVersionRange
(
SSLVersionRange
&
rangeOut
uint32_t
minFromPrefs
uint32_t
maxFromPrefs
SSLVersionRange
defaults
)
;
static
nsresult
SetEnabledTLSVersions
(
)
;
static
void
DoClearSSLExternalAndInternalSessionCache
(
)
;
protected
:
virtual
~
nsNSSComponent
(
)
;
private
:
nsresult
InitializeNSS
(
)
;
void
PrepareForShutdown
(
)
;
void
setValidationOptions
(
bool
isInitialSetting
const
mozilla
:
:
MutexAutoLock
&
proofOfLock
)
;
void
GetRevocationBehaviorFromPrefs
(
mozilla
:
:
psm
:
:
CertVerifier
:
:
OcspDownloadConfig
*
odc
mozilla
:
:
psm
:
:
CertVerifier
:
:
OcspStrictConfig
*
osc
uint32_t
*
certShortLifetimeInDays
TimeDuration
&
softTimeout
TimeDuration
&
hardTimeout
)
;
void
UpdateCertVerifierWithEnterpriseRoots
(
)
;
nsresult
RegisterObservers
(
)
;
void
MaybeImportEnterpriseRoots
(
)
;
void
ImportEnterpriseRoots
(
)
;
void
UnloadEnterpriseRoots
(
)
;
nsresult
CommonGetEnterpriseCerts
(
nsTArray
<
nsTArray
<
uint8_t
>
>
&
enterpriseCerts
bool
getRoots
)
;
bool
ShouldEnableEnterpriseRootsForFamilySafety
(
uint32_t
familySafetyMode
)
;
nsresult
MaybeEnableIntermediatePreloadingHealer
(
)
;
mozilla
:
:
Monitor
mLoadableCertsLoadedMonitor
;
bool
mLoadableCertsLoaded
MOZ_GUARDED_BY
(
mLoadableCertsLoadedMonitor
)
;
nsresult
mLoadableCertsLoadedResult
MOZ_GUARDED_BY
(
mLoadableCertsLoadedMonitor
)
;
mozilla
:
:
Mutex
mMutex
;
#
ifdef
DEBUG
nsCString
mTestBuiltInRootHash
MOZ_GUARDED_BY
(
mMutex
)
;
#
endif
RefPtr
<
mozilla
:
:
psm
:
:
SharedCertVerifier
>
mDefaultCertVerifier
MOZ_GUARDED_BY
(
mMutex
)
;
nsString
mMitmCanaryIssuer
MOZ_GUARDED_BY
(
mMutex
)
;
bool
mMitmDetecionEnabled
MOZ_GUARDED_BY
(
mMutex
)
;
mozilla
:
:
Vector
<
EnterpriseCert
>
mEnterpriseCerts
MOZ_GUARDED_BY
(
mMutex
)
;
static
int
mInstanceCount
;
nsCOMPtr
<
nsISerialEventTarget
>
mIntermediatePreloadingHealerTaskQueue
;
nsCOMPtr
<
nsITimer
>
mIntermediatePreloadingHealerTimer
;
}
;
inline
nsresult
BlockUntilLoadableCertsLoaded
(
)
{
nsCOMPtr
<
nsINSSComponent
>
component
(
do_GetService
(
PSM_COMPONENT_CONTRACTID
)
)
;
if
(
!
component
)
{
return
NS_ERROR_FAILURE
;
}
return
component
-
>
BlockUntilLoadableCertsLoaded
(
)
;
}
inline
nsresult
CheckForSmartCardChanges
(
)
{
#
ifndef
MOZ_NO_SMART_CARDS
nsCOMPtr
<
nsINSSComponent
>
component
(
do_GetService
(
PSM_COMPONENT_CONTRACTID
)
)
;
if
(
!
component
)
{
return
NS_ERROR_FAILURE
;
}
return
component
-
>
CheckForSmartCardChanges
(
)
;
#
else
return
NS_OK
;
#
endif
}
#
endif
