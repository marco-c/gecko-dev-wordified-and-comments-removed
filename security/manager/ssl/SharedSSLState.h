#
ifndef
SharedSSLState_h
#
define
SharedSSLState_h
#
include
"
nsNSSIOLayer
.
h
"
class
nsIObserver
;
namespace
mozilla
{
namespace
psm
{
class
SharedSSLState
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SharedSSLState
)
explicit
SharedSSLState
(
uint32_t
aTlsFlags
=
0
)
;
static
void
GlobalInit
(
)
;
static
void
GlobalCleanup
(
)
;
nsSSLIOLayerHelpers
&
IOLayerHelpers
(
)
{
return
mIOLayerHelpers
;
}
void
ResetStoredData
(
)
;
void
NotePrivateBrowsingStatus
(
)
;
void
SetOCSPStaplingEnabled
(
bool
staplingEnabled
)
{
mOCSPStaplingEnabled
=
staplingEnabled
;
}
void
SetOCSPMustStapleEnabled
(
bool
mustStapleEnabled
)
{
mOCSPMustStapleEnabled
=
mustStapleEnabled
;
}
void
SetSignedCertTimestampsEnabled
(
bool
signedCertTimestampsEnabled
)
{
mSignedCertTimestampsEnabled
=
signedCertTimestampsEnabled
;
}
void
SetPinningMode
(
CertVerifier
:
:
PinningMode
aPinningMode
)
{
mPinningMode
=
aPinningMode
;
}
void
SetNameMatchingMode
(
BRNameMatchingPolicy
:
:
Mode
aMode
)
{
mNameMatchingMode
=
aMode
;
}
bool
SocketCreated
(
)
;
void
NoteSocketCreated
(
)
;
static
void
NoteCertOverrideServiceInstantiated
(
)
;
bool
IsOCSPStaplingEnabled
(
)
const
{
return
mOCSPStaplingEnabled
;
}
bool
IsOCSPMustStapleEnabled
(
)
const
{
return
mOCSPMustStapleEnabled
;
}
bool
IsSignedCertTimestampsEnabled
(
)
const
{
return
mSignedCertTimestampsEnabled
;
}
CertVerifier
:
:
PinningMode
PinningMode
(
)
{
return
mPinningMode
;
}
BRNameMatchingPolicy
:
:
Mode
NameMatchingMode
(
)
{
return
mNameMatchingMode
;
}
private
:
~
SharedSSLState
(
)
;
void
Cleanup
(
)
;
nsCOMPtr
<
nsIObserver
>
mObserver
;
nsSSLIOLayerHelpers
mIOLayerHelpers
;
Mutex
mMutex
;
bool
mSocketCreated
;
bool
mOCSPStaplingEnabled
;
bool
mOCSPMustStapleEnabled
;
bool
mSignedCertTimestampsEnabled
;
CertVerifier
:
:
PinningMode
mPinningMode
;
BRNameMatchingPolicy
:
:
Mode
mNameMatchingMode
;
}
;
SharedSSLState
*
PublicSSLState
(
)
;
SharedSSLState
*
PrivateSSLState
(
)
;
}
}
#
endif
