#
include
"
nsNSSCertHelper
.
h
"
#
include
<
algorithm
>
#
include
"
DateTimeFormat
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
mozilla
/
net
/
DNS
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsNSSCertificate
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
prerror
.
h
"
#
include
"
prnetdb
.
h
"
#
include
"
secder
.
h
"
using
namespace
mozilla
;
const
char
*
kRootModuleName
=
"
Builtin
Roots
Module
"
;
const
size_t
kRootModuleNameLen
=
strlen
(
kRootModuleName
)
;
static
nsresult
GetPIPNSSBundle
(
nsIStringBundle
*
*
pipnssBundle
)
{
nsCOMPtr
<
nsIStringBundleService
>
bundleService
(
do_GetService
(
NS_STRINGBUNDLE_CONTRACTID
)
)
;
if
(
!
bundleService
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
bundleService
-
>
CreateBundle
(
"
chrome
:
/
/
pipnss
/
locale
/
pipnss
.
properties
"
pipnssBundle
)
;
}
nsresult
GetPIPNSSBundleString
(
const
char
*
stringName
nsAString
&
result
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
NS_IsMainThread
(
)
)
{
return
NS_ERROR_NOT_SAME_THREAD
;
}
MOZ_ASSERT
(
stringName
)
;
if
(
!
stringName
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsCOMPtr
<
nsIStringBundle
>
pipnssBundle
;
nsresult
rv
=
GetPIPNSSBundle
(
getter_AddRefs
(
pipnssBundle
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
result
.
Truncate
(
)
;
return
pipnssBundle
-
>
GetStringFromName
(
stringName
result
)
;
}
nsresult
GetPIPNSSBundleString
(
const
char
*
stringName
nsACString
&
result
)
{
nsAutoString
tmp
;
nsresult
rv
=
GetPIPNSSBundleString
(
stringName
tmp
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
result
.
Assign
(
NS_ConvertUTF16toUTF8
(
tmp
)
)
;
return
NS_OK
;
}
nsresult
PIPBundleFormatStringFromName
(
const
char
*
stringName
const
nsTArray
<
nsString
>
&
params
nsAString
&
result
)
{
MOZ_ASSERT
(
stringName
)
;
MOZ_ASSERT
(
!
params
.
IsEmpty
(
)
)
;
if
(
!
stringName
|
|
params
.
IsEmpty
(
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsCOMPtr
<
nsIStringBundle
>
pipnssBundle
;
nsresult
rv
=
GetPIPNSSBundle
(
getter_AddRefs
(
pipnssBundle
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
result
.
Truncate
(
)
;
return
pipnssBundle
-
>
FormatStringFromName
(
stringName
params
result
)
;
}
void
LossyUTF8ToUTF16
(
const
char
*
str
uint32_t
len
nsAString
&
result
)
{
auto
span
=
Span
(
str
len
)
;
if
(
IsUtf8
(
span
)
)
{
CopyUTF8toUTF16
(
span
result
)
;
}
else
{
CopyASCIItoUTF16
(
span
result
)
;
}
}
nsresult
GetCertFingerprintByOidTag
(
CERTCertificate
*
nsscert
SECOidTag
aOidTag
nsCString
&
fp
)
{
Digest
digest
;
nsresult
rv
=
digest
.
DigestBuf
(
aOidTag
nsscert
-
>
derCert
.
data
nsscert
-
>
derCert
.
len
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
UniquePORTString
tmpstr
(
CERT_Hexify
(
const_cast
<
SECItem
*
>
(
&
digest
.
get
(
)
)
1
)
)
;
NS_ENSURE_TRUE
(
tmpstr
NS_ERROR_OUT_OF_MEMORY
)
;
fp
.
Assign
(
tmpstr
.
get
(
)
)
;
return
NS_OK
;
}
