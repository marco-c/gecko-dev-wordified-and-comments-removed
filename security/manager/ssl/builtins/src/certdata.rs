use
pkcs11_bindings
:
:
nss
:
:
*
;
use
pkcs11_bindings
:
:
*
;
pub
const
CKC_X_509_BYTES
:
&
[
u8
]
=
&
CKC_X_509
.
to_ne_bytes
(
)
;
pub
const
CKO_CERTIFICATE_BYTES
:
&
[
u8
]
=
&
CKO_CERTIFICATE
.
to_ne_bytes
(
)
;
pub
const
CKO_NSS_BUILTIN_ROOT_LIST_BYTES
:
&
[
u8
]
=
&
CKO_NSS_BUILTIN_ROOT_LIST
.
to_ne_bytes
(
)
;
pub
const
CKO_NSS_TRUST_BYTES
:
&
[
u8
]
=
&
CKO_NSS_TRUST
.
to_ne_bytes
(
)
;
pub
const
CKT_NSS_MUST_VERIFY_TRUST_BYTES
:
&
[
u8
]
=
&
CKT_NSS_MUST_VERIFY_TRUST
.
to_ne_bytes
(
)
;
pub
const
CKT_NSS_NOT_TRUSTED_BYTES
:
&
[
u8
]
=
&
CKT_NSS_NOT_TRUSTED
.
to_ne_bytes
(
)
;
pub
const
CKT_NSS_TRUSTED_DELEGATOR_BYTES
:
&
[
u8
]
=
&
CKT_NSS_TRUSTED_DELEGATOR
.
to_ne_bytes
(
)
;
pub
const
CK_FALSE_BYTES
:
&
[
u8
]
=
&
CK_FALSE
.
to_ne_bytes
(
)
;
pub
const
CK_TRUE_BYTES
:
&
[
u8
]
=
&
CK_TRUE
.
to_ne_bytes
(
)
;
#
[
derive
(
PartialEq
Eq
)
]
pub
struct
Root
{
pub
label
:
&
'
static
str
pub
der_name
:
&
'
static
[
u8
]
pub
der_serial
:
&
'
static
[
u8
]
pub
der_cert
:
&
'
static
[
u8
]
pub
mozilla_ca_policy
:
Option
<
&
'
static
[
u8
]
>
pub
server_distrust_after
:
Option
<
&
'
static
[
u8
]
>
pub
email_distrust_after
:
Option
<
&
'
static
[
u8
]
>
pub
sha1
:
&
'
static
[
u8
]
pub
md5
:
&
'
static
[
u8
]
pub
trust_server
:
&
'
static
[
u8
]
pub
trust_email
:
&
'
static
[
u8
]
}
impl
PartialOrd
for
Root
{
fn
partial_cmp
(
&
self
other
:
&
Root
)
-
>
Option
<
std
:
:
cmp
:
:
Ordering
>
{
self
.
der_name
.
partial_cmp
(
other
.
der_name
)
}
}
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
builtins
.
rs
"
)
)
;
