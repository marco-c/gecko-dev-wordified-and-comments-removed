#
include
"
SecretDecoderRing
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
mozilla
/
Base64
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsITokenPasswordDialogs
.
h
"
#
include
"
nsNSSComponent
.
h
"
#
include
"
nsNSSHelper
.
h
"
#
include
"
pk11func
.
h
"
#
include
"
pk11sdr
.
h
"
#
include
"
ssl
.
h
"
using
namespace
mozilla
;
NS_IMPL_ISUPPORTS
(
SecretDecoderRing
nsISecretDecoderRing
)
SecretDecoderRing
:
:
SecretDecoderRing
(
)
{
}
SecretDecoderRing
:
:
~
SecretDecoderRing
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
;
}
shutdown
(
ShutdownCalledFrom
:
:
Object
)
;
}
nsresult
SecretDecoderRing
:
:
Encrypt
(
const
nsACString
&
data
nsACString
&
result
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
UniquePK11SlotInfo
slot
(
PK11_GetInternalKeySlot
(
)
)
;
if
(
!
slot
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCOMPtr
<
nsIInterfaceRequestor
>
ctx
=
new
PipUIContext
(
)
;
nsresult
rv
=
setPassword
(
slot
.
get
(
)
ctx
locker
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
PK11_Authenticate
(
slot
.
get
(
)
true
ctx
)
!
=
SECSuccess
)
{
return
NS_ERROR_FAILURE
;
}
SECItem
keyid
;
keyid
.
data
=
nullptr
;
keyid
.
len
=
0
;
SECItem
request
;
request
.
data
=
BitwiseCast
<
unsigned
char
*
const
char
*
>
(
data
.
BeginReading
(
)
)
;
request
.
len
=
data
.
Length
(
)
;
ScopedAutoSECItem
reply
;
if
(
PK11SDR_Encrypt
(
&
keyid
&
request
&
reply
ctx
)
!
=
SECSuccess
)
{
return
NS_ERROR_FAILURE
;
}
result
.
Assign
(
BitwiseCast
<
char
*
unsigned
char
*
>
(
reply
.
data
)
reply
.
len
)
;
return
NS_OK
;
}
nsresult
SecretDecoderRing
:
:
Decrypt
(
const
nsACString
&
data
nsACString
&
result
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
UniquePK11SlotInfo
slot
(
PK11_GetInternalKeySlot
(
)
)
;
if
(
!
slot
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCOMPtr
<
nsIInterfaceRequestor
>
ctx
=
new
PipUIContext
(
)
;
if
(
PK11_Authenticate
(
slot
.
get
(
)
true
ctx
)
!
=
SECSuccess
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
SECItem
request
;
request
.
data
=
BitwiseCast
<
unsigned
char
*
const
char
*
>
(
data
.
BeginReading
(
)
)
;
request
.
len
=
data
.
Length
(
)
;
ScopedAutoSECItem
reply
;
if
(
PK11SDR_Decrypt
(
&
request
&
reply
ctx
)
!
=
SECSuccess
)
{
return
NS_ERROR_FAILURE
;
}
result
.
Assign
(
BitwiseCast
<
char
*
unsigned
char
*
>
(
reply
.
data
)
reply
.
len
)
;
return
NS_OK
;
}
NS_IMETHODIMP
SecretDecoderRing
:
:
EncryptString
(
const
nsACString
&
text
nsACString
&
encryptedBase64Text
)
{
nsAutoCString
encryptedText
;
nsresult
rv
=
Encrypt
(
text
encryptedText
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
Base64Encode
(
encryptedText
encryptedBase64Text
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
NS_OK
;
}
NS_IMETHODIMP
SecretDecoderRing
:
:
DecryptString
(
const
nsACString
&
encryptedBase64Text
nsACString
&
decryptedText
)
{
nsAutoCString
encryptedText
;
nsresult
rv
=
Base64Decode
(
encryptedBase64Text
encryptedText
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
Decrypt
(
encryptedText
decryptedText
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
NS_OK
;
}
NS_IMETHODIMP
SecretDecoderRing
:
:
ChangePassword
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
UniquePK11SlotInfo
slot
(
PK11_GetInternalKeySlot
(
)
)
;
if
(
!
slot
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
NS_ConvertUTF8toUTF16
tokenName
(
PK11_GetTokenName
(
slot
.
get
(
)
)
)
;
nsCOMPtr
<
nsITokenPasswordDialogs
>
dialogs
;
nsresult
rv
=
getNSSDialogs
(
getter_AddRefs
(
dialogs
)
NS_GET_IID
(
nsITokenPasswordDialogs
)
NS_TOKENPASSWORDSDIALOG_CONTRACTID
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIInterfaceRequestor
>
ctx
=
new
PipUIContext
(
)
;
bool
canceled
;
return
dialogs
-
>
SetPassword
(
ctx
tokenName
&
canceled
)
;
}
NS_IMETHODIMP
SecretDecoderRing
:
:
Logout
(
)
{
static
NS_DEFINE_CID
(
kNSSComponentCID
NS_NSSCOMPONENT_CID
)
;
nsresult
rv
;
nsCOMPtr
<
nsINSSComponent
>
nssComponent
(
do_GetService
(
kNSSComponentCID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
PK11_LogoutAll
(
)
;
SSL_ClearSessionCache
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
SecretDecoderRing
:
:
LogoutAndTeardown
(
)
{
static
NS_DEFINE_CID
(
kNSSComponentCID
NS_NSSCOMPONENT_CID
)
;
nsresult
rv
;
nsCOMPtr
<
nsINSSComponent
>
nssComponent
(
do_GetService
(
kNSSComponentCID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
PK11_LogoutAll
(
)
;
SSL_ClearSessionCache
(
)
;
}
rv
=
nssComponent
-
>
LogoutAuthenticatedPK11
(
)
;
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
os
-
>
NotifyObservers
(
nullptr
"
net
:
prune
-
dead
-
connections
"
nullptr
)
;
return
rv
;
}
