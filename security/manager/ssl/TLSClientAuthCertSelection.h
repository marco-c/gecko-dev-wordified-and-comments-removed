#
ifndef
SECURITY_MANAGER_SSL_TLSCLIENTAUTHCERTSELECTION_H_
#
define
SECURITY_MANAGER_SSL_TLSCLIENTAUTHCERTSELECTION_H_
#
include
"
NSSSocketControl
.
h
"
#
include
"
nsIX509Cert
.
h
"
#
include
"
nsNSSIOLayer
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
ssl
.
h
"
class
NSSSocketControl
;
SECStatus
SSLGetClientAuthDataHook
(
void
*
arg
PRFileDesc
*
socket
CERTDistNames
*
caNames
CERTCertificate
*
*
pRetCert
SECKEYPrivateKey
*
*
pRetKey
)
;
class
ClientAuthCertificateSelectedBase
:
public
mozilla
:
:
Runnable
{
public
:
ClientAuthCertificateSelectedBase
(
)
:
Runnable
(
"
ClientAuthCertificateSelectedBase
"
)
{
}
void
SetSelectedClientAuthData
(
nsTArray
<
uint8_t
>
&
&
selectedCertBytes
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
selectedCertChainBytes
)
;
protected
:
nsTArray
<
uint8_t
>
mSelectedCertBytes
;
nsTArray
<
nsTArray
<
uint8_t
>
>
mSelectedCertChainBytes
;
}
;
class
ClientAuthCertificateSelected
:
public
ClientAuthCertificateSelectedBase
{
public
:
explicit
ClientAuthCertificateSelected
(
NSSSocketControl
*
socketInfo
)
:
mSocketInfo
(
socketInfo
)
{
}
NS_IMETHOD
Run
(
)
override
;
private
:
RefPtr
<
NSSSocketControl
>
mSocketInfo
;
}
;
class
ClientAuthInfo
final
{
public
:
explicit
ClientAuthInfo
(
const
nsACString
&
hostName
const
mozilla
:
:
OriginAttributes
&
originAttributes
int32_t
port
uint32_t
providerFlags
uint32_t
providerTlsFlags
)
;
~
ClientAuthInfo
(
)
=
default
;
ClientAuthInfo
(
ClientAuthInfo
&
&
aOther
)
noexcept
;
const
nsACString
&
HostName
(
)
const
;
const
mozilla
:
:
OriginAttributes
&
OriginAttributesRef
(
)
const
;
int32_t
Port
(
)
const
;
uint32_t
ProviderFlags
(
)
const
;
uint32_t
ProviderTlsFlags
(
)
const
;
ClientAuthInfo
(
const
ClientAuthInfo
&
)
=
delete
;
void
operator
=
(
const
ClientAuthInfo
&
)
=
delete
;
private
:
nsCString
mHostName
;
mozilla
:
:
OriginAttributes
mOriginAttributes
;
int32_t
mPort
;
uint32_t
mProviderFlags
;
uint32_t
mProviderTlsFlags
;
}
;
class
SelectClientAuthCertificate
:
public
mozilla
:
:
Runnable
{
public
:
SelectClientAuthCertificate
(
ClientAuthInfo
&
&
info
mozilla
:
:
UniqueCERTCertificate
&
&
serverCert
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
caNames
mozilla
:
:
UniqueCERTCertList
&
&
potentialClientCertificates
ClientAuthCertificateSelectedBase
*
continuation
uint64_t
browserId
)
:
Runnable
(
"
SelectClientAuthCertificate
"
)
mInfo
(
std
:
:
move
(
info
)
)
mServerCert
(
std
:
:
move
(
serverCert
)
)
mCANames
(
std
:
:
move
(
caNames
)
)
mPotentialClientCertificates
(
std
:
:
move
(
potentialClientCertificates
)
)
mContinuation
(
continuation
)
mBrowserId
(
browserId
)
{
}
NS_IMETHOD
Run
(
)
override
;
const
ClientAuthInfo
&
Info
(
)
{
return
mInfo
;
}
void
DispatchContinuation
(
nsTArray
<
uint8_t
>
&
&
selectedCertBytes
)
;
private
:
mozilla
:
:
pkix
:
:
Result
BuildChainForCertificate
(
nsTArray
<
uint8_t
>
&
certBytes
nsTArray
<
nsTArray
<
uint8_t
>
>
&
certChainBytes
)
;
ClientAuthInfo
mInfo
;
mozilla
:
:
UniqueCERTCertificate
mServerCert
;
nsTArray
<
nsTArray
<
uint8_t
>
>
mCANames
;
mozilla
:
:
UniqueCERTCertList
mPotentialClientCertificates
;
RefPtr
<
ClientAuthCertificateSelectedBase
>
mContinuation
;
nsTArray
<
nsTArray
<
uint8_t
>
>
mEnterpriseCertificates
;
uint64_t
mBrowserId
;
nsCOMPtr
<
nsIInterfaceRequestor
>
mSecurityCallbacks
;
}
;
#
endif
