#
include
"
CommonSocketControl
.
h
"
#
include
"
SharedCertVerifier
.
h
"
#
include
"
nsNSSComponent
.
h
"
#
include
"
sslt
.
h
"
#
include
"
ssl
.
h
"
using
namespace
mozilla
;
NS_IMPL_ISUPPORTS_INHERITED
(
CommonSocketControl
TransportSecurityInfo
nsISSLSocketControl
)
CommonSocketControl
:
:
CommonSocketControl
(
uint32_t
aProviderFlags
)
:
mNPNCompleted
(
false
)
mHandshakeCompleted
(
false
)
mJoined
(
false
)
mSentClientCert
(
false
)
mFailedVerification
(
false
)
mResumed
(
false
)
mSSLVersionUsed
(
nsISSLSocketControl
:
:
SSL_VERSION_UNKNOWN
)
mProviderFlags
(
aProviderFlags
)
{
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetNotificationCallbacks
(
nsIInterfaceRequestor
*
*
aCallbacks
)
{
*
aCallbacks
=
mCallbacks
;
NS_IF_ADDREF
(
*
aCallbacks
)
;
return
NS_OK
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
SetNotificationCallbacks
(
nsIInterfaceRequestor
*
aCallbacks
)
{
mCallbacks
=
aCallbacks
;
return
NS_OK
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
ProxyStartSSL
(
void
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
StartTLS
(
void
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
SetNPNList
(
nsTArray
<
nsCString
>
&
aNPNList
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetNegotiatedNPN
(
nsACString
&
aNegotiatedNPN
)
{
if
(
!
mNPNCompleted
)
{
return
NS_ERROR_NOT_CONNECTED
;
}
aNegotiatedNPN
=
mNegotiatedNPN
;
return
NS_OK
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetAlpnEarlySelection
(
nsACString
&
_retval
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetEarlyDataAccepted
(
bool
*
aEarlyDataAccepted
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
DriveHandshake
(
void
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
JoinConnection
(
const
nsACString
&
npnProtocol
const
nsACString
&
hostname
int32_t
port
bool
*
_retval
)
{
nsresult
rv
=
TestJoinConnection
(
npnProtocol
hostname
port
_retval
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
*
_retval
)
{
mJoined
=
true
;
}
return
rv
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
TestJoinConnection
(
const
nsACString
&
npnProtocol
const
nsACString
&
hostname
int32_t
port
bool
*
_retval
)
{
*
_retval
=
false
;
if
(
port
!
=
GetPort
(
)
)
return
NS_OK
;
if
(
!
mNPNCompleted
|
|
!
mNegotiatedNPN
.
Equals
(
npnProtocol
)
)
return
NS_OK
;
IsAcceptableForHost
(
hostname
_retval
)
;
return
NS_OK
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
IsAcceptableForHost
(
const
nsACString
&
hostname
bool
*
_retval
)
{
NS_ENSURE_ARG
(
_retval
)
;
*
_retval
=
false
;
if
(
hostname
.
Equals
(
GetHostName
(
)
)
)
{
*
_retval
=
true
;
return
NS_OK
;
}
if
(
!
mHandshakeCompleted
|
|
!
HasServerCert
(
)
)
{
return
NS_OK
;
}
if
(
mHaveCertErrorBits
)
{
return
NS_OK
;
}
if
(
mSentClientCert
)
return
NS_OK
;
UniqueCERTCertificate
nssCert
;
nsCOMPtr
<
nsIX509Cert
>
cert
;
if
(
NS_FAILED
(
GetServerCert
(
getter_AddRefs
(
cert
)
)
)
)
{
return
NS_OK
;
}
if
(
cert
)
{
nssCert
.
reset
(
cert
-
>
GetCert
(
)
)
;
}
if
(
!
nssCert
)
{
return
NS_OK
;
}
RefPtr
<
psm
:
:
SharedCertVerifier
>
certVerifier
(
psm
:
:
GetDefaultCertVerifier
(
)
)
;
if
(
!
certVerifier
)
{
return
NS_OK
;
}
psm
:
:
CertVerifier
:
:
Flags
flags
=
psm
:
:
CertVerifier
:
:
FLAG_LOCAL_ONLY
;
UniqueCERTCertList
unusedBuiltChain
;
mozilla
:
:
pkix
:
:
Result
result
=
certVerifier
-
>
VerifySSLServerCert
(
nssCert
Maybe
<
nsTArray
<
uint8_t
>
>
(
)
Maybe
<
nsTArray
<
uint8_t
>
>
(
)
mozilla
:
:
pkix
:
:
Now
(
)
nullptr
hostname
unusedBuiltChain
false
flags
)
;
if
(
result
!
=
mozilla
:
:
pkix
:
:
Success
)
{
return
NS_OK
;
}
*
_retval
=
true
;
return
NS_OK
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetKEAUsed
(
int16_t
*
aKEAUsed
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetKEAKeyBits
(
uint32_t
*
aKEAKeyBits
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetProviderFlags
(
uint32_t
*
aProviderFlags
)
{
*
aProviderFlags
=
mProviderFlags
;
return
NS_OK
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetProviderTlsFlags
(
uint32_t
*
aProviderTlsFlags
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetSSLVersionUsed
(
int16_t
*
aSSLVersionUsed
)
{
*
aSSLVersionUsed
=
mSSLVersionUsed
;
return
NS_OK
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetSSLVersionOffered
(
int16_t
*
aSSLVersionOffered
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetMACAlgorithmUsed
(
int16_t
*
aMACAlgorithmUsed
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
CommonSocketControl
:
:
GetDenyClientCert
(
)
{
return
true
;
}
void
CommonSocketControl
:
:
SetDenyClientCert
(
bool
aDenyClientCert
)
{
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetClientCert
(
nsIX509Cert
*
*
aClientCert
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
SetClientCert
(
nsIX509Cert
*
aClientCert
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetClientCertSent
(
bool
*
arg
)
{
*
arg
=
mSentClientCert
;
return
NS_OK
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetFailedVerification
(
bool
*
arg
)
{
*
arg
=
mFailedVerification
;
return
NS_OK
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetEsniTxt
(
nsACString
&
aEsniTxt
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
SetEsniTxt
(
const
nsACString
&
aEsniTxt
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
CommonSocketControl
:
:
GetResumed
(
bool
*
aResumed
)
{
*
aResumed
=
mResumed
;
return
NS_OK
;
}
