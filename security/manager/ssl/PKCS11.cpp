#
include
"
PKCS11
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsCRTGlue
.
h
"
#
include
"
nsNSSComponent
.
h
"
#
include
"
nsNativeCharsetUtils
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
namespace
mozilla
{
namespace
psm
{
NS_INTERFACE_MAP_BEGIN
(
PKCS11
)
NS_INTERFACE_MAP_ENTRY
(
nsIPKCS11
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_ADDREF
(
PKCS11
)
NS_IMPL_RELEASE
(
PKCS11
)
PKCS11
:
:
PKCS11
(
)
{
}
PKCS11
:
:
~
PKCS11
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
;
}
shutdown
(
ShutdownCalledFrom
:
:
Object
)
;
}
NS_IMETHODIMP
PKCS11
:
:
DeleteModule
(
const
nsAString
&
aModuleName
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
aModuleName
.
IsEmpty
(
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
NS_ConvertUTF16toUTF8
moduleName
(
aModuleName
)
;
#
ifndef
MOZ_NO_SMART_CARDS
{
UniqueSECMODModule
module
(
SECMOD_FindModule
(
moduleName
.
get
(
)
)
)
;
if
(
!
module
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsINSSComponent
>
nssComponent
(
do_GetService
(
PSM_COMPONENT_CONTRACTID
)
)
;
nssComponent
-
>
ShutdownSmartCardThread
(
module
.
get
(
)
)
;
}
#
endif
int32_t
modType
;
SECStatus
srv
=
SECMOD_DeleteModule
(
moduleName
.
get
(
)
&
modType
)
;
if
(
srv
!
=
SECSuccess
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
void
GetModuleNameForTelemetry
(
const
SECMODModule
*
module
nsString
&
result
)
{
result
.
Truncate
(
)
;
if
(
module
-
>
dllName
)
{
result
.
AssignWithConversion
(
module
-
>
dllName
)
;
int32_t
separatorIndex
=
result
.
RFind
(
FILE_PATH_SEPARATOR
)
;
if
(
separatorIndex
!
=
kNotFound
)
{
result
=
Substring
(
result
separatorIndex
+
1
)
;
}
}
else
{
result
.
AssignWithConversion
(
module
-
>
commonName
)
;
}
if
(
result
.
Length
(
)
>
=
70
)
{
result
.
Truncate
(
69
)
;
}
}
NS_IMETHODIMP
PKCS11
:
:
AddModule
(
const
nsAString
&
aModuleName
const
nsAString
&
aLibraryFullPath
int32_t
aCryptoMechanismFlags
int32_t
aCipherFlags
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
aModuleName
.
IsEmpty
(
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
NS_ConvertUTF16toUTF8
moduleName
(
aModuleName
)
;
nsCString
fullPath
;
NS_CopyUnicodeToNative
(
aLibraryFullPath
fullPath
)
;
uint32_t
mechFlags
=
SECMOD_PubMechFlagstoInternal
(
aCryptoMechanismFlags
)
;
uint32_t
cipherFlags
=
SECMOD_PubCipherFlagstoInternal
(
aCipherFlags
)
;
SECStatus
srv
=
SECMOD_AddNewModule
(
moduleName
.
get
(
)
fullPath
.
get
(
)
mechFlags
cipherFlags
)
;
if
(
srv
!
=
SECSuccess
)
{
return
NS_ERROR_FAILURE
;
}
UniqueSECMODModule
module
(
SECMOD_FindModule
(
moduleName
.
get
(
)
)
)
;
if
(
!
module
)
{
return
NS_ERROR_FAILURE
;
}
#
ifndef
MOZ_NO_SMART_CARDS
nsCOMPtr
<
nsINSSComponent
>
nssComponent
(
do_GetService
(
PSM_COMPONENT_CONTRACTID
)
)
;
nssComponent
-
>
LaunchSmartCardThread
(
module
.
get
(
)
)
;
#
endif
nsAutoString
scalarKey
;
GetModuleNameForTelemetry
(
module
.
get
(
)
scalarKey
)
;
if
(
scalarKey
.
Length
(
)
>
0
)
{
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
SECURITY_PKCS11_MODULES_LOADED
scalarKey
true
)
;
}
return
NS_OK
;
}
}
}
