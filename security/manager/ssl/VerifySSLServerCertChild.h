#
ifndef
mozilla_psm_VerifySSLServerCertChild_h__
#
define
mozilla_psm_VerifySSLServerCertChild_h__
#
include
"
mozilla
/
psm
/
PVerifySSLServerCertChild
.
h
"
#
include
"
SSLServerCertVerification
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
#
include
"
seccomon
.
h
"
namespace
mozilla
{
namespace
psm
{
class
DelegatedCredentialInfo
;
class
VerifySSLServerCertChild
:
public
PVerifySSLServerCertChild
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VerifySSLServerCertChild
override
)
;
explicit
VerifySSLServerCertChild
(
const
UniqueCERTCertificate
&
aCert
SSLServerCertVerificationResult
*
aResultTask
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
aPeerCertChain
)
;
ipc
:
:
IPCResult
RecvOnVerifiedSSLServerCertSuccess
(
nsTArray
<
ByteArray
>
&
&
aBuiltCertChain
const
uint16_t
&
aCertTransparencyStatus
const
uint8_t
&
aEVStatus
)
;
ipc
:
:
IPCResult
RecvOnVerifiedSSLServerCertFailure
(
const
uint32_t
&
aFinalError
const
uint32_t
&
aCollectedErrors
)
;
private
:
~
VerifySSLServerCertChild
(
)
=
default
;
UniqueCERTCertificate
mCert
;
RefPtr
<
SSLServerCertVerificationResult
>
mResultTask
;
nsTArray
<
nsTArray
<
uint8_t
>
>
mPeerCertChain
;
}
;
SECStatus
RemoteProcessCertVerification
(
const
UniqueCERTCertificate
&
aCert
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
aPeerCertChain
const
nsACString
&
aHostName
int32_t
aPort
const
OriginAttributes
&
aOriginAttributes
Maybe
<
nsTArray
<
uint8_t
>
>
&
aStapledOCSPResponse
Maybe
<
nsTArray
<
uint8_t
>
>
&
aSctsFromTLSExtension
Maybe
<
DelegatedCredentialInfo
>
&
aDcInfo
uint32_t
aProviderFlags
uint32_t
aCertVerifierFlags
SSLServerCertVerificationResult
*
aResultTask
)
;
}
}
#
endif
