#
ifndef
nsNSSShutDown_h
#
define
nsNSSShutDown_h
#
include
"
PLDHashTable
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
CondVar
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nspr
.
h
"
class
nsNSSShutDownObject
;
class
nsOnPK11LogoutCancelObject
;
static
int
sSilenceCompilerWarnings
;
class
nsNSSShutDownPreventionLock
{
public
:
nsNSSShutDownPreventionLock
(
)
{
sSilenceCompilerWarnings
+
+
;
}
~
nsNSSShutDownPreventionLock
(
)
{
sSilenceCompilerWarnings
-
-
;
}
}
;
class
nsNSSShutDownList
{
public
:
static
void
remember
(
nsOnPK11LogoutCancelObject
*
o
)
;
static
void
forget
(
nsOnPK11LogoutCancelObject
*
o
)
;
static
nsresult
evaporateAllNSSResourcesAndShutDown
(
)
;
static
nsresult
doPK11Logout
(
)
;
private
:
static
bool
construct
(
const
mozilla
:
:
StaticMutexAutoLock
&
)
;
nsNSSShutDownList
(
)
;
~
nsNSSShutDownList
(
)
;
protected
:
PLDHashTable
mPK11LogoutCancelObjects
;
}
;
class
nsNSSShutDownObject
{
public
:
enum
class
ShutdownCalledFrom
{
List
Object
}
;
nsNSSShutDownObject
(
)
{
}
virtual
~
nsNSSShutDownObject
(
)
{
}
void
shutdown
(
ShutdownCalledFrom
)
{
}
bool
isAlreadyShutDown
(
)
const
;
protected
:
virtual
void
virtualDestroyNSSReference
(
)
=
0
;
}
;
class
nsOnPK11LogoutCancelObject
{
public
:
nsOnPK11LogoutCancelObject
(
)
:
mIsLoggedOut
(
false
)
{
nsNSSShutDownList
:
:
remember
(
this
)
;
}
virtual
~
nsOnPK11LogoutCancelObject
(
)
{
nsNSSShutDownList
:
:
forget
(
this
)
;
}
void
logout
(
)
{
mIsLoggedOut
=
true
;
}
bool
isPK11LoggedOut
(
)
{
return
mIsLoggedOut
;
}
private
:
volatile
bool
mIsLoggedOut
;
}
;
#
endif
