#
ifndef
nsNSSShutDown_h
#
define
nsNSSShutDown_h
#
include
"
PLDHashTable
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
CondVar
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nspr
.
h
"
class
nsNSSShutDownObject
;
class
nsNSSActivityState
{
public
:
nsNSSActivityState
(
)
;
~
nsNSSActivityState
(
)
;
void
enter
(
)
;
void
leave
(
)
;
PRStatus
restrictActivityToCurrentThread
(
)
;
void
releaseCurrentThreadActivityRestriction
(
)
;
private
:
mozilla
:
:
Mutex
mNSSActivityStateLock
;
mozilla
:
:
CondVar
mNSSActivityChanged
;
int
mNSSActivityCounter
;
PRThread
*
mNSSRestrictedThread
;
}
;
class
nsNSSShutDownPreventionLock
{
public
:
nsNSSShutDownPreventionLock
(
)
;
~
nsNSSShutDownPreventionLock
(
)
;
private
:
bool
mEnteredActivityState
;
}
;
class
nsNSSShutDownList
{
public
:
static
void
remember
(
nsNSSShutDownObject
*
o
)
;
static
void
forget
(
nsNSSShutDownObject
*
o
)
;
static
nsresult
evaporateAllNSSResourcesAndShutDown
(
)
;
static
void
enterActivityState
(
bool
&
enteredActivityState
)
;
static
void
leaveActivityState
(
)
;
private
:
static
bool
construct
(
const
mozilla
:
:
StaticMutexAutoLock
&
)
;
nsNSSShutDownList
(
)
;
~
nsNSSShutDownList
(
)
;
protected
:
PLDHashTable
mObjects
;
nsNSSActivityState
mActivityState
;
}
;
class
nsNSSShutDownObject
{
public
:
enum
class
ShutdownCalledFrom
{
List
Object
}
;
nsNSSShutDownObject
(
)
{
mAlreadyShutDown
=
false
;
nsNSSShutDownList
:
:
remember
(
this
)
;
}
virtual
~
nsNSSShutDownObject
(
)
{
}
void
shutdown
(
ShutdownCalledFrom
calledFrom
)
{
if
(
!
mAlreadyShutDown
)
{
switch
(
calledFrom
)
{
case
ShutdownCalledFrom
:
:
Object
:
nsNSSShutDownList
:
:
forget
(
this
)
;
break
;
case
ShutdownCalledFrom
:
:
List
:
virtualDestroyNSSReference
(
)
;
break
;
default
:
MOZ_CRASH
(
"
shutdown
(
)
called
from
an
unknown
source
"
)
;
}
mAlreadyShutDown
=
true
;
}
}
bool
isAlreadyShutDown
(
)
const
;
protected
:
virtual
void
virtualDestroyNSSReference
(
)
=
0
;
private
:
volatile
bool
mAlreadyShutDown
;
}
;
#
endif
