#
ifndef
ContentSignatureVerifier_h
#
define
ContentSignatureVerifier_h
#
include
"
cert
.
h
"
#
include
"
CSTrustDomain
.
h
"
#
include
"
nsIContentSignatureVerifier
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsNSSShutDown
.
h
"
#
include
"
nsString
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
define
NS_CONTENTSIGNATUREVERIFIER_CID
\
{
0x45a5fe2f
0xc350
0x4b86
\
{
0x96
0x2d
0x02
0xd5
0xaa
0xaa
0x95
0x5a
}
}
#
define
NS_CONTENTSIGNATUREVERIFIER_CONTRACTID
\
"
mozilla
.
org
/
security
/
contentsignatureverifier
;
1
"
class
ContentSignatureVerifier
final
:
public
nsIContentSignatureVerifier
public
nsIStreamListener
public
nsNSSShutDownObject
public
nsIInterfaceRequestor
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTSIGNATUREVERIFIER
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIREQUESTOBSERVER
ContentSignatureVerifier
(
)
:
mCx
(
nullptr
)
mInitialised
(
false
)
mHasCertChain
(
false
)
{
}
private
:
~
ContentSignatureVerifier
(
)
{
}
nsresult
UpdateInternal
(
const
nsACString
&
aData
)
;
nsresult
DownloadCertChain
(
)
;
nsresult
CreateContextInternal
(
const
nsACString
&
aData
const
nsACString
&
aCertChain
const
nsACString
&
aName
)
;
nsresult
ParseContentSignatureHeader
(
const
nsACString
&
aContentSignatureHeader
)
;
mozilla
:
:
UniqueVFYContext
mCx
;
bool
mInitialised
;
bool
mHasCertChain
;
nsCString
mSignature
;
nsCString
mCertChainURL
;
FallibleTArray
<
nsCString
>
mCertChain
;
mozilla
:
:
UniqueSECKEYPublicKey
mKey
;
nsCString
mName
;
nsCOMPtr
<
nsIContentSignatureReceiverCallback
>
mCallback
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
}
;
#
endif
