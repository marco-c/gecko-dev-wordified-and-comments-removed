#
include
"
nsNSSComponent
.
h
"
#
include
"
EnterpriseRoots
.
h
"
#
include
"
ExtendedValidation
.
h
"
#
include
"
NSSCertDBTrustDomain
.
h
"
#
include
"
PKCS11ModuleDB
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
SharedSSLState
.
h
"
#
include
"
cert
.
h
"
#
include
"
certdb
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
PublicSSL
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsClientAuthRemember
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsICertOverrideService
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsILocalFileWin
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIPrompt
.
h
"
#
include
"
nsIProperties
.
h
"
#
include
"
nsISiteSecurityService
.
h
"
#
include
"
nsITokenPasswordDialogs
.
h
"
#
include
"
nsIWindowWatcher
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsNSSCertificateDB
.
h
"
#
include
"
nsNSSHelper
.
h
"
#
include
"
nsPK11TokenDB
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nss
.
h
"
#
include
"
p12plcy
.
h
"
#
include
"
mozpkix
/
pkixnss
.
h
"
#
include
"
secerr
.
h
"
#
include
"
secmod
.
h
"
#
include
"
ssl
.
h
"
#
include
"
sslerr
.
h
"
#
include
"
sslproto
.
h
"
#
include
"
prmem
.
h
"
#
if
defined
(
XP_LINUX
)
&
&
!
defined
(
ANDROID
)
#
include
<
linux
/
magic
.
h
>
#
include
<
sys
/
vfs
.
h
>
#
endif
#
ifdef
XP_WIN
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
nsILocalFileWin
.
h
"
#
include
"
windows
.
h
"
#
include
"
lmcons
.
h
"
#
include
"
sddl
.
h
"
#
include
"
wincrypt
.
h
"
#
include
"
nsIWindowsRegKey
.
h
"
#
endif
using
namespace
mozilla
;
using
namespace
mozilla
:
:
psm
;
LazyLogModule
gPIPNSSLog
(
"
pipnss
"
)
;
int
nsNSSComponent
:
:
mInstanceCount
=
0
;
bool
EnsureNSSInitializedChromeOrContent
(
)
{
static
Atomic
<
bool
>
initialized
(
false
)
;
if
(
initialized
)
{
return
true
;
}
if
(
!
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIThread
>
mainThread
;
nsresult
rv
=
NS_GetMainThread
(
getter_AddRefs
(
mainThread
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
mozilla
:
:
SyncRunnable
:
:
DispatchToThread
(
mainThread
new
SyncRunnable
(
NS_NewRunnableFunction
(
"
EnsureNSSInitializedChromeOrContent
"
[
]
(
)
{
EnsureNSSInitializedChromeOrContent
(
)
;
}
)
)
)
;
return
initialized
;
}
if
(
XRE_IsParentProcess
(
)
)
{
nsCOMPtr
<
nsISupports
>
nss
=
do_GetService
(
PSM_COMPONENT_CONTRACTID
)
;
if
(
!
nss
)
{
return
false
;
}
initialized
=
true
;
return
true
;
}
if
(
NSS_IsInitialized
(
)
)
{
initialized
=
true
;
return
true
;
}
if
(
NSS_NoDB_Init
(
nullptr
)
!
=
SECSuccess
)
{
return
false
;
}
if
(
NS_FAILED
(
mozilla
:
:
psm
:
:
InitializeCipherSuite
(
)
)
)
{
return
false
;
}
mozilla
:
:
psm
:
:
DisableMD5
(
)
;
mozilla
:
:
pkix
:
:
RegisterErrorTable
(
)
;
initialized
=
true
;
return
true
;
}
static
const
uint32_t
OCSP_TIMEOUT_MILLISECONDS_SOFT_DEFAULT
=
2000
;
static
const
uint32_t
OCSP_TIMEOUT_MILLISECONDS_SOFT_MAX
=
5000
;
static
const
uint32_t
OCSP_TIMEOUT_MILLISECONDS_HARD_DEFAULT
=
10000
;
static
const
uint32_t
OCSP_TIMEOUT_MILLISECONDS_HARD_MAX
=
20000
;
static
void
GetRevocationBehaviorFromPrefs
(
CertVerifier
:
:
OcspDownloadConfig
*
odc
CertVerifier
:
:
OcspStrictConfig
*
osc
uint32_t
*
certShortLifetimeInDays
TimeDuration
&
softTimeout
TimeDuration
&
hardTimeout
const
MutexAutoLock
&
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
odc
)
;
MOZ_ASSERT
(
osc
)
;
MOZ_ASSERT
(
certShortLifetimeInDays
)
;
int32_t
ocspLevel
=
Preferences
:
:
GetInt
(
"
security
.
OCSP
.
enabled
"
1
)
;
switch
(
ocspLevel
)
{
case
0
:
*
odc
=
CertVerifier
:
:
ocspOff
;
break
;
case
2
:
*
odc
=
CertVerifier
:
:
ocspEVOnly
;
break
;
default
:
*
odc
=
CertVerifier
:
:
ocspOn
;
break
;
}
*
osc
=
Preferences
:
:
GetBool
(
"
security
.
OCSP
.
require
"
false
)
?
CertVerifier
:
:
ocspStrict
:
CertVerifier
:
:
ocspRelaxed
;
*
certShortLifetimeInDays
=
Preferences
:
:
GetUint
(
"
security
.
pki
.
cert_short_lifetime_in_days
"
static_cast
<
uint32_t
>
(
0
)
)
;
uint32_t
softTimeoutMillis
=
Preferences
:
:
GetUint
(
"
security
.
OCSP
.
timeoutMilliseconds
.
soft
"
OCSP_TIMEOUT_MILLISECONDS_SOFT_DEFAULT
)
;
softTimeoutMillis
=
std
:
:
min
(
softTimeoutMillis
OCSP_TIMEOUT_MILLISECONDS_SOFT_MAX
)
;
softTimeout
=
TimeDuration
:
:
FromMilliseconds
(
softTimeoutMillis
)
;
uint32_t
hardTimeoutMillis
=
Preferences
:
:
GetUint
(
"
security
.
OCSP
.
timeoutMilliseconds
.
hard
"
OCSP_TIMEOUT_MILLISECONDS_HARD_DEFAULT
)
;
hardTimeoutMillis
=
std
:
:
min
(
hardTimeoutMillis
OCSP_TIMEOUT_MILLISECONDS_HARD_MAX
)
;
hardTimeout
=
TimeDuration
:
:
FromMilliseconds
(
hardTimeoutMillis
)
;
SSL_ClearSessionCache
(
)
;
}
nsNSSComponent
:
:
nsNSSComponent
(
)
:
mLoadableRootsLoadedMonitor
(
"
nsNSSComponent
.
mLoadableRootsLoadedMonitor
"
)
mLoadableRootsLoaded
(
false
)
mLoadableRootsLoadedResult
(
NS_ERROR_FAILURE
)
mMutex
(
"
nsNSSComponent
.
mMutex
"
)
mMitmDetecionEnabled
(
false
)
mLoadLoadableRootsTaskDispatched
(
false
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
nsNSSComponent
:
:
ctor
\
n
"
)
)
;
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mInstanceCount
=
=
0
"
nsNSSComponent
is
a
singleton
but
instantiated
multiple
times
!
"
)
;
+
+
mInstanceCount
;
}
nsNSSComponent
:
:
~
nsNSSComponent
(
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
nsNSSComponent
:
:
dtor
\
n
"
)
)
;
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
ShutdownNSS
(
)
;
SharedSSLState
:
:
GlobalCleanup
(
)
;
RememberCertErrorsTable
:
:
Cleanup
(
)
;
-
-
mInstanceCount
;
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
nsNSSComponent
:
:
dtor
finished
\
n
"
)
)
;
}
#
ifdef
XP_WIN
static
bool
GetUserSid
(
nsAString
&
sidString
)
{
WCHAR
lpAccountName
[
UNLEN
+
1
]
;
DWORD
lcAccountName
=
sizeof
(
lpAccountName
)
/
sizeof
(
lpAccountName
[
0
]
)
;
BOOL
success
=
GetUserName
(
lpAccountName
&
lcAccountName
)
;
if
(
!
success
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
GetUserName
failed
"
)
)
;
return
false
;
}
char
sid_buffer
[
SECURITY_MAX_SID_SIZE
]
;
SID
*
sid
=
BitwiseCast
<
SID
*
char
*
>
(
sid_buffer
)
;
DWORD
cbSid
=
ArrayLength
(
sid_buffer
)
;
SID_NAME_USE
eUse
;
DWORD
cchReferencedDomainName
=
128
;
auto
ReferencedDomainName
(
MakeUnique
<
WCHAR
[
]
>
(
cchReferencedDomainName
)
)
;
success
=
LookupAccountName
(
nullptr
lpAccountName
sid
&
cbSid
ReferencedDomainName
.
get
(
)
&
cchReferencedDomainName
&
eUse
)
;
if
(
!
success
&
&
GetLastError
(
)
!
=
ERROR_INSUFFICIENT_BUFFER
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
LookupAccountName
failed
"
)
)
;
return
false
;
}
if
(
!
success
)
{
ReferencedDomainName
=
MakeUnique
<
WCHAR
[
]
>
(
cchReferencedDomainName
)
;
success
=
LookupAccountName
(
nullptr
lpAccountName
sid
&
cbSid
ReferencedDomainName
.
get
(
)
&
cchReferencedDomainName
&
eUse
)
;
}
if
(
!
success
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
LookupAccountName
failed
"
)
)
;
return
false
;
}
LPTSTR
StringSid
;
success
=
ConvertSidToStringSid
(
sid
&
StringSid
)
;
if
(
!
success
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
ConvertSidToStringSid
failed
"
)
)
;
return
false
;
}
sidString
.
Assign
(
StringSid
)
;
LocalFree
(
StringSid
)
;
return
true
;
}
static
nsresult
ReadRegKeyValueWithDefault
(
nsCOMPtr
<
nsIWindowsRegKey
>
regKey
uint32_t
flags
const
wchar_t
*
optionalChildName
const
wchar_t
*
valueName
uint32_t
defaultValue
uint32_t
&
valueOut
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
ReadRegKeyValueWithDefault
"
)
)
;
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
attempting
to
read
'
%
S
%
s
%
S
'
with
default
'
%
u
'
"
optionalChildName
?
optionalChildName
:
L
"
"
optionalChildName
?
"
\
\
"
:
"
"
valueName
defaultValue
)
)
;
if
(
optionalChildName
)
{
nsDependentString
childNameString
(
optionalChildName
)
;
bool
hasChild
;
nsresult
rv
=
regKey
-
>
HasChild
(
childNameString
&
hasChild
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
failed
to
determine
if
child
key
is
present
"
)
)
;
return
rv
;
}
if
(
!
hasChild
)
{
valueOut
=
defaultValue
;
return
NS_OK
;
}
nsCOMPtr
<
nsIWindowsRegKey
>
childRegKey
;
rv
=
regKey
-
>
OpenChild
(
childNameString
flags
getter_AddRefs
(
childRegKey
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
open
child
key
"
)
)
;
return
rv
;
}
return
ReadRegKeyValueWithDefault
(
childRegKey
flags
nullptr
valueName
defaultValue
valueOut
)
;
}
nsDependentString
valueNameString
(
valueName
)
;
bool
hasValue
;
nsresult
rv
=
regKey
-
>
HasValue
(
valueNameString
&
hasValue
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
failed
to
determine
if
value
is
present
"
)
)
;
return
rv
;
}
if
(
!
hasValue
)
{
valueOut
=
defaultValue
;
return
NS_OK
;
}
rv
=
regKey
-
>
ReadIntValue
(
valueNameString
&
valueOut
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
failed
to
read
value
"
)
)
;
return
rv
;
}
return
NS_OK
;
}
static
nsresult
AccountHasFamilySafetyEnabled
(
bool
&
enabled
)
{
enabled
=
false
;
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
AccountHasFamilySafetyEnabled
?
"
)
)
;
nsCOMPtr
<
nsIWindowsRegKey
>
parentalControlsKey
(
do_CreateInstance
(
"
mozilla
.
org
/
windows
-
registry
-
key
;
1
"
)
)
;
if
(
!
parentalControlsKey
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
create
nsIWindowsRegKey
"
)
)
;
return
NS_ERROR_FAILURE
;
}
uint32_t
flags
=
nsIWindowsRegKey
:
:
ACCESS_READ
|
nsIWindowsRegKey
:
:
WOW64_64
;
NS_NAMED_LITERAL_STRING
(
familySafetyPath
"
SOFTWARE
\
\
Microsoft
\
\
Windows
\
\
CurrentVersion
\
\
Parental
Controls
"
)
;
nsresult
rv
=
parentalControlsKey
-
>
Open
(
nsIWindowsRegKey
:
:
ROOT_KEY_LOCAL_MACHINE
familySafetyPath
flags
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
open
parentalControlsKey
"
)
)
;
return
rv
;
}
NS_NAMED_LITERAL_STRING
(
usersString
"
Users
"
)
;
bool
hasUsers
;
rv
=
parentalControlsKey
-
>
HasChild
(
usersString
&
hasUsers
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
HasChild
(
Users
)
failed
"
)
)
;
return
rv
;
}
if
(
!
hasUsers
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
Users
subkey
not
present
-
Parental
Controls
not
enabled
"
)
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIWindowsRegKey
>
usersKey
;
rv
=
parentalControlsKey
-
>
OpenChild
(
usersString
flags
getter_AddRefs
(
usersKey
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
failed
to
open
Users
subkey
"
)
)
;
return
rv
;
}
nsAutoString
sid
;
if
(
!
GetUserSid
(
sid
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
get
sid
"
)
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
our
sid
is
'
%
S
'
"
sid
.
get
(
)
)
)
;
bool
hasSid
;
rv
=
usersKey
-
>
HasChild
(
sid
&
hasSid
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
HasChild
(
sid
)
failed
"
)
)
;
return
rv
;
}
if
(
!
hasSid
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
sid
not
present
in
Family
Safety
Users
"
)
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIWindowsRegKey
>
sidKey
;
rv
=
usersKey
-
>
OpenChild
(
sid
flags
getter_AddRefs
(
sidKey
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
open
sid
key
"
)
)
;
return
rv
;
}
uint32_t
parentalControlsOn
;
rv
=
sidKey
-
>
ReadIntValue
(
NS_LITERAL_STRING
(
"
Parental
Controls
On
"
)
&
parentalControlsOn
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
read
Parental
Controls
On
"
)
)
;
return
rv
;
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
Parental
Controls
On
:
%
u
"
parentalControlsOn
)
)
;
if
(
parentalControlsOn
!
=
1
)
{
return
NS_OK
;
}
uint32_t
loggingRequired
;
rv
=
ReadRegKeyValueWithDefault
(
sidKey
flags
nullptr
L
"
Logging
Required
"
1
loggingRequired
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
failed
to
read
value
of
Logging
Required
"
)
)
;
return
rv
;
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
Logging
Required
:
%
u
"
loggingRequired
)
)
;
uint32_t
webFilterOn
;
rv
=
ReadRegKeyValueWithDefault
(
sidKey
flags
L
"
Web
"
L
"
Filter
On
"
0
webFilterOn
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
failed
to
read
value
of
Web
\
\
Filter
On
"
)
)
;
return
rv
;
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
Web
\
\
Filter
On
:
%
u
"
webFilterOn
)
)
;
enabled
=
loggingRequired
=
=
1
|
|
webFilterOn
=
=
1
;
return
NS_OK
;
}
#
endif
const
char
*
kFamilySafetyModePref
=
"
security
.
family_safety
.
mode
"
;
const
uint32_t
kFamilySafetyModeDefault
=
0
;
bool
nsNSSComponent
:
:
ShouldEnableEnterpriseRootsForFamilySafety
(
uint32_t
familySafetyMode
)
{
#
ifdef
XP_WIN
if
(
!
(
IsWin8Point1OrLater
(
)
&
&
!
IsWin10OrLater
(
)
)
)
{
return
false
;
}
if
(
familySafetyMode
!
=
2
)
{
return
false
;
}
bool
familySafetyEnabled
;
nsresult
rv
=
AccountHasFamilySafetyEnabled
(
familySafetyEnabled
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
return
familySafetyEnabled
;
#
else
return
false
;
#
endif
}
void
nsNSSComponent
:
:
UnloadEnterpriseRoots
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
NS_IsMainThread
(
)
)
{
return
;
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
UnloadEnterpriseRoots
"
)
)
;
MutexAutoLock
lock
(
mMutex
)
;
mEnterpriseCerts
.
clear
(
)
;
setValidationOptions
(
false
lock
)
;
}
static
const
char
*
kEnterpriseRootModePref
=
"
security
.
enterprise_roots
.
enabled
"
;
class
BackgroundImportEnterpriseCertsTask
final
:
public
CryptoTask
{
public
:
explicit
BackgroundImportEnterpriseCertsTask
(
nsNSSComponent
*
nssComponent
)
:
mNSSComponent
(
nssComponent
)
{
}
private
:
virtual
nsresult
CalculateResult
(
)
override
{
mNSSComponent
-
>
ImportEnterpriseRoots
(
)
;
mNSSComponent
-
>
UpdateCertVerifierWithEnterpriseRoots
(
)
;
return
NS_OK
;
}
virtual
void
CallCallback
(
nsresult
rv
)
override
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
NotifyObservers
(
nullptr
"
psm
:
enterprise
-
certs
-
imported
"
nullptr
)
;
}
}
RefPtr
<
nsNSSComponent
>
mNSSComponent
;
}
;
void
nsNSSComponent
:
:
MaybeImportEnterpriseRoots
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
NS_IsMainThread
(
)
)
{
return
;
}
bool
importEnterpriseRoots
=
Preferences
:
:
GetBool
(
kEnterpriseRootModePref
false
)
;
uint32_t
familySafetyMode
=
Preferences
:
:
GetUint
(
kFamilySafetyModePref
kFamilySafetyModeDefault
)
;
if
(
ShouldEnableEnterpriseRootsForFamilySafety
(
familySafetyMode
)
)
{
importEnterpriseRoots
=
true
;
}
if
(
importEnterpriseRoots
)
{
RefPtr
<
BackgroundImportEnterpriseCertsTask
>
task
=
new
BackgroundImportEnterpriseCertsTask
(
this
)
;
Unused
<
<
task
-
>
Dispatch
(
"
EnterpriseCrts
"
)
;
}
}
void
nsNSSComponent
:
:
ImportEnterpriseRoots
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
if
(
NS_IsMainThread
(
)
)
{
return
;
}
Vector
<
EnterpriseCert
>
enterpriseCerts
;
nsresult
rv
=
GatherEnterpriseCerts
(
enterpriseCerts
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
MutexAutoLock
lock
(
mMutex
)
;
mEnterpriseCerts
=
std
:
:
move
(
enterpriseCerts
)
;
}
else
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
failed
gathering
enterprise
roots
"
)
)
;
}
}
nsresult
nsNSSComponent
:
:
CommonGetEnterpriseCerts
(
nsTArray
<
nsTArray
<
uint8_t
>
>
&
enterpriseCerts
bool
getRoots
)
{
nsresult
rv
=
BlockUntilLoadableRootsLoaded
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
MutexAutoLock
nsNSSComponentLock
(
mMutex
)
;
enterpriseCerts
.
Clear
(
)
;
for
(
const
auto
&
cert
:
mEnterpriseCerts
)
{
nsTArray
<
uint8_t
>
certCopy
;
if
(
cert
.
GetIsRoot
(
)
=
=
getRoots
)
{
nsresult
rv
=
cert
.
CopyBytes
(
certCopy
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
!
enterpriseCerts
.
AppendElement
(
std
:
:
move
(
certCopy
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
}
return
NS_OK
;
}
NS_IMETHODIMP
nsNSSComponent
:
:
GetEnterpriseRoots
(
nsTArray
<
nsTArray
<
uint8_t
>
>
&
enterpriseRoots
)
{
return
CommonGetEnterpriseCerts
(
enterpriseRoots
true
)
;
}
NS_IMETHODIMP
nsNSSComponent
:
:
GetEnterpriseIntermediates
(
nsTArray
<
nsTArray
<
uint8_t
>
>
&
enterpriseIntermediates
)
{
return
CommonGetEnterpriseCerts
(
enterpriseIntermediates
false
)
;
}
class
LoadLoadableRootsTask
final
:
public
Runnable
{
public
:
LoadLoadableRootsTask
(
nsNSSComponent
*
nssComponent
bool
importEnterpriseRoots
uint32_t
familySafetyMode
Vector
<
nsCString
>
&
&
possibleLoadableRootsLocations
)
:
Runnable
(
"
LoadLoadableRootsTask
"
)
mNSSComponent
(
nssComponent
)
mImportEnterpriseRoots
(
importEnterpriseRoots
)
mFamilySafetyMode
(
familySafetyMode
)
mPossibleLoadableRootsLocations
(
std
:
:
move
(
possibleLoadableRootsLocations
)
)
{
MOZ_ASSERT
(
nssComponent
)
;
}
~
LoadLoadableRootsTask
(
)
=
default
;
nsresult
Dispatch
(
)
;
private
:
NS_IMETHOD
Run
(
)
override
;
nsresult
LoadLoadableRoots
(
)
;
RefPtr
<
nsNSSComponent
>
mNSSComponent
;
bool
mImportEnterpriseRoots
;
uint32_t
mFamilySafetyMode
;
Vector
<
nsCString
>
mPossibleLoadableRootsLocations
;
nsCOMPtr
<
nsIThread
>
mThread
;
}
;
nsresult
LoadLoadableRootsTask
:
:
Dispatch
(
)
{
nsresult
rv
=
NS_NewNamedThread
(
"
LoadRoots
"
getter_AddRefs
(
mThread
)
nullptr
nsIThreadManager
:
:
DEFAULT_STACK_SIZE
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
mThread
-
>
Dispatch
(
this
NS_DISPATCH_NORMAL
)
;
}
NS_IMETHODIMP
LoadLoadableRootsTask
:
:
Run
(
)
{
if
(
NS_IsMainThread
(
)
)
{
if
(
mThread
)
{
mThread
-
>
Shutdown
(
)
;
}
return
NS_OK
;
}
nsresult
loadLoadableRootsResult
=
LoadLoadableRoots
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
loadLoadableRootsResult
)
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Error
(
"
LoadLoadableRoots
failed
"
)
)
;
}
if
(
NS_SUCCEEDED
(
loadLoadableRootsResult
)
)
{
if
(
NS_FAILED
(
LoadExtendedValidationInfo
(
)
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Error
(
"
failed
to
load
EV
info
"
)
)
;
}
}
if
(
mNSSComponent
-
>
ShouldEnableEnterpriseRootsForFamilySafety
(
mFamilySafetyMode
)
)
{
mImportEnterpriseRoots
=
true
;
}
if
(
mImportEnterpriseRoots
)
{
mNSSComponent
-
>
ImportEnterpriseRoots
(
)
;
mNSSComponent
-
>
UpdateCertVerifierWithEnterpriseRoots
(
)
;
}
{
MonitorAutoLock
rootsLoadedLock
(
mNSSComponent
-
>
mLoadableRootsLoadedMonitor
)
;
mNSSComponent
-
>
mLoadableRootsLoaded
=
true
;
mNSSComponent
-
>
mLoadableRootsLoadedResult
=
loadLoadableRootsResult
;
nsresult
rv
=
mNSSComponent
-
>
mLoadableRootsLoadedMonitor
.
NotifyAll
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Error
(
"
failed
to
notify
loadable
roots
loaded
monitor
"
)
)
;
}
}
return
NS_DispatchToMainThread
(
this
)
;
}
NS_IMETHODIMP
nsNSSComponent
:
:
HasActiveSmartCards
(
bool
*
result
)
{
NS_ENSURE_ARG_POINTER
(
result
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Main
thread
only
"
)
;
if
(
!
NS_IsMainThread
(
)
)
{
return
NS_ERROR_NOT_SAME_THREAD
;
}
#
ifndef
MOZ_NO_SMART_CARDS
MutexAutoLock
nsNSSComponentLock
(
mMutex
)
;
AutoSECMODListReadLock
secmodLock
;
SECMODModuleList
*
list
=
SECMOD_GetDefaultModuleList
(
)
;
while
(
list
)
{
if
(
SECMOD_HasRemovableSlots
(
list
-
>
module
)
)
{
*
result
=
true
;
return
NS_OK
;
}
list
=
list
-
>
next
;
}
#
endif
*
result
=
false
;
return
NS_OK
;
}
NS_IMETHODIMP
nsNSSComponent
:
:
HasUserCertsInstalled
(
bool
*
result
)
{
NS_ENSURE_ARG_POINTER
(
result
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Main
thread
only
"
)
;
if
(
!
NS_IsMainThread
(
)
)
{
return
NS_ERROR_NOT_SAME_THREAD
;
}
*
result
=
false
;
UniqueCERTCertList
certList
(
CERT_FindUserCertsByUsage
(
CERT_GetDefaultCertDB
(
)
certUsageSSLClient
false
true
nullptr
)
)
;
if
(
!
certList
)
{
return
NS_OK
;
}
if
(
CERT_LIST_END
(
CERT_LIST_HEAD
(
certList
)
certList
)
)
{
return
NS_OK
;
}
*
result
=
true
;
return
NS_OK
;
}
nsresult
nsNSSComponent
:
:
BlockUntilLoadableRootsLoaded
(
)
{
MonitorAutoLock
rootsLoadedLock
(
mLoadableRootsLoadedMonitor
)
;
while
(
!
mLoadableRootsLoaded
)
{
rootsLoadedLock
.
Wait
(
)
;
}
MOZ_ASSERT
(
mLoadableRootsLoaded
)
;
return
mLoadableRootsLoadedResult
;
}
nsresult
nsNSSComponent
:
:
CheckForSmartCardChanges
(
)
{
#
ifndef
MOZ_NO_SMART_CARDS
Vector
<
UniqueSECMODModule
>
modulesWithRemovableSlots
;
{
AutoSECMODListReadLock
secmodLock
;
SECMODModuleList
*
list
=
SECMOD_GetDefaultModuleList
(
)
;
while
(
list
)
{
if
(
SECMOD_HasRemovableSlots
(
list
-
>
module
)
)
{
UniqueSECMODModule
module
(
SECMOD_ReferenceModule
(
list
-
>
module
)
)
;
if
(
!
modulesWithRemovableSlots
.
append
(
std
:
:
move
(
module
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
list
=
list
-
>
next
;
}
}
for
(
auto
&
module
:
modulesWithRemovableSlots
)
{
Unused
<
<
SECMOD_UpdateSlotList
(
module
.
get
(
)
)
;
for
(
int
i
=
0
;
i
<
module
-
>
slotCount
;
i
+
+
)
{
Unused
<
<
PK11_IsPresent
(
module
-
>
slots
[
i
]
)
;
}
}
#
endif
return
NS_OK
;
}
static
nsresult
GetNSS3Directory
(
nsCString
&
result
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
UniquePRString
nss3Path
(
PR_GetLibraryFilePathname
(
MOZ_DLL_PREFIX
"
nss3
"
MOZ_DLL_SUFFIX
reinterpret_cast
<
PRFuncPtr
>
(
NSS_Initialize
)
)
)
;
if
(
!
nss3Path
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
nss
not
loaded
?
"
)
)
;
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIFile
>
nss3File
(
do_CreateInstance
(
NS_LOCAL_FILE_CONTRACTID
)
)
;
if
(
!
nss3File
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
create
a
file
?
"
)
)
;
return
NS_ERROR_FAILURE
;
}
nsAutoCString
nss3PathAsString
(
nss3Path
.
get
(
)
)
;
nsresult
rv
=
nss3File
-
>
InitWithNativePath
(
nss3PathAsString
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
initialize
file
with
path
'
%
s
'
"
nss3Path
.
get
(
)
)
)
;
return
rv
;
}
nsCOMPtr
<
nsIFile
>
nss3Directory
;
rv
=
nss3File
-
>
GetParent
(
getter_AddRefs
(
nss3Directory
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
get
parent
directory
?
"
)
)
;
return
rv
;
}
#
ifdef
XP_WIN
nsCOMPtr
<
nsILocalFileWin
>
nss3DirectoryWin
=
do_QueryInterface
(
nss3Directory
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
get
nsILocalFileWin
"
)
)
;
return
rv
;
}
return
nss3DirectoryWin
-
>
GetNativeCanonicalPath
(
result
)
;
#
else
return
nss3Directory
-
>
GetNativePath
(
result
)
;
#
endif
}
static
nsresult
GetDirectoryPath
(
const
char
*
directoryKey
nsCString
&
result
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIProperties
>
directoryService
(
do_GetService
(
NS_DIRECTORY_SERVICE_CONTRACTID
)
)
;
if
(
!
directoryService
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
could
not
get
directory
service
"
)
)
;
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIFile
>
directory
;
nsresult
rv
=
directoryService
-
>
Get
(
directoryKey
NS_GET_IID
(
nsIFile
)
getter_AddRefs
(
directory
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
could
not
get
'
%
s
'
from
directory
service
"
directoryKey
)
)
;
return
rv
;
}
#
ifdef
XP_WIN
nsCOMPtr
<
nsILocalFileWin
>
directoryWin
=
do_QueryInterface
(
directory
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
couldn
'
t
get
nsILocalFileWin
"
)
)
;
return
rv
;
}
return
directoryWin
-
>
GetNativeCanonicalPath
(
result
)
;
#
else
return
directory
-
>
GetNativePath
(
result
)
;
#
endif
}
static
nsresult
ListPossibleLoadableRootsLocations
(
Vector
<
nsCString
>
&
possibleLoadableRootsLocations
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
NS_IsMainThread
(
)
)
{
return
NS_ERROR_NOT_SAME_THREAD
;
}
nsAutoCString
nss3Dir
;
nsresult
rv
=
GetNSS3Directory
(
nss3Dir
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
if
(
!
possibleLoadableRootsLocations
.
append
(
std
:
:
move
(
nss3Dir
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
else
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
could
not
determine
where
nss
was
loaded
from
"
)
)
;
}
nsAutoCString
currentProcessDir
;
rv
=
GetDirectoryPath
(
NS_XPCOM_CURRENT_PROCESS_DIR
currentProcessDir
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
if
(
!
possibleLoadableRootsLocations
.
append
(
std
:
:
move
(
currentProcessDir
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
else
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
could
not
get
current
process
directory
"
)
)
;
}
nsAutoCString
greDir
;
rv
=
GetDirectoryPath
(
NS_GRE_DIR
greDir
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
if
(
!
possibleLoadableRootsLocations
.
append
(
std
:
:
move
(
greDir
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
else
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
could
not
get
gre
directory
"
)
)
;
}
nsAutoCString
emptyString
;
if
(
!
possibleLoadableRootsLocations
.
append
(
std
:
:
move
(
emptyString
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
return
NS_OK
;
}
nsresult
LoadLoadableRootsTask
:
:
LoadLoadableRoots
(
)
{
for
(
const
auto
&
possibleLocation
:
mPossibleLoadableRootsLocations
)
{
if
(
mozilla
:
:
psm
:
:
LoadLoadableRoots
(
possibleLocation
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
loaded
CKBI
from
%
s
"
possibleLocation
.
get
(
)
)
)
;
return
NS_OK
;
}
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
could
not
load
loadable
roots
"
)
)
;
return
NS_ERROR_FAILURE
;
}
typedef
struct
{
const
char
*
pref
;
long
id
;
bool
enabledByDefault
;
}
CipherPref
;
static
const
CipherPref
sCipherPrefs
[
]
=
{
{
"
security
.
ssl3
.
ecdhe_rsa_aes_128_gcm_sha256
"
TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
true
}
{
"
security
.
ssl3
.
ecdhe_ecdsa_aes_128_gcm_sha256
"
TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
true
}
{
"
security
.
ssl3
.
ecdhe_ecdsa_chacha20_poly1305_sha256
"
TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
true
}
{
"
security
.
ssl3
.
ecdhe_rsa_chacha20_poly1305_sha256
"
TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
true
}
{
"
security
.
ssl3
.
ecdhe_ecdsa_aes_256_gcm_sha384
"
TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
true
}
{
"
security
.
ssl3
.
ecdhe_rsa_aes_256_gcm_sha384
"
TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
true
}
{
"
security
.
ssl3
.
ecdhe_rsa_aes_128_sha
"
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
true
}
{
"
security
.
ssl3
.
ecdhe_ecdsa_aes_128_sha
"
TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
true
}
{
"
security
.
ssl3
.
ecdhe_rsa_aes_256_sha
"
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
true
}
{
"
security
.
ssl3
.
ecdhe_ecdsa_aes_256_sha
"
TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
true
}
{
"
security
.
ssl3
.
dhe_rsa_aes_128_sha
"
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
true
}
{
"
security
.
ssl3
.
dhe_rsa_aes_256_sha
"
TLS_DHE_RSA_WITH_AES_256_CBC_SHA
true
}
{
"
security
.
tls13
.
aes_128_gcm_sha256
"
TLS_AES_128_GCM_SHA256
true
}
{
"
security
.
tls13
.
chacha20_poly1305_sha256
"
TLS_CHACHA20_POLY1305_SHA256
true
}
{
"
security
.
tls13
.
aes_256_gcm_sha384
"
TLS_AES_256_GCM_SHA384
true
}
{
"
security
.
ssl3
.
rsa_aes_128_sha
"
TLS_RSA_WITH_AES_128_CBC_SHA
true
}
{
"
security
.
ssl3
.
rsa_aes_256_sha
"
TLS_RSA_WITH_AES_256_CBC_SHA
true
}
{
"
security
.
ssl3
.
rsa_des_ede3_sha
"
TLS_RSA_WITH_3DES_EDE_CBC_SHA
true
}
{
nullptr
0
}
}
;
void
nsNSSComponent
:
:
FillTLSVersionRange
(
SSLVersionRange
&
rangeOut
uint32_t
minFromPrefs
uint32_t
maxFromPrefs
SSLVersionRange
defaults
)
{
rangeOut
=
defaults
;
SSLVersionRange
supported
;
if
(
SSL_VersionRangeGetSupported
(
ssl_variant_stream
&
supported
)
!
=
SECSuccess
)
{
return
;
}
rangeOut
.
min
=
std
:
:
max
(
rangeOut
.
min
supported
.
min
)
;
rangeOut
.
max
=
std
:
:
min
(
rangeOut
.
max
supported
.
max
)
;
minFromPrefs
+
=
SSL_LIBRARY_VERSION_3_0
;
maxFromPrefs
+
=
SSL_LIBRARY_VERSION_3_0
;
if
(
minFromPrefs
>
maxFromPrefs
|
|
minFromPrefs
<
supported
.
min
|
|
maxFromPrefs
>
supported
.
max
|
|
minFromPrefs
<
SSL_LIBRARY_VERSION_TLS_1_0
)
{
return
;
}
rangeOut
.
min
=
(
uint16_t
)
minFromPrefs
;
rangeOut
.
max
=
(
uint16_t
)
maxFromPrefs
;
}
static
const
int32_t
OCSP_ENABLED_DEFAULT
=
1
;
static
const
bool
REQUIRE_SAFE_NEGOTIATION_DEFAULT
=
false
;
static
const
bool
FALSE_START_ENABLED_DEFAULT
=
true
;
static
const
bool
ALPN_ENABLED_DEFAULT
=
false
;
static
const
bool
ENABLED_0RTT_DATA_DEFAULT
=
false
;
static
const
bool
HELLO_DOWNGRADE_CHECK_DEFAULT
=
false
;
static
void
ConfigureTLSSessionIdentifiers
(
)
{
bool
disableSessionIdentifiers
=
Preferences
:
:
GetBool
(
"
security
.
ssl
.
disable_session_identifiers
"
false
)
;
SSL_OptionSetDefault
(
SSL_ENABLE_SESSION_TICKETS
!
disableSessionIdentifiers
)
;
SSL_OptionSetDefault
(
SSL_NO_CACHE
disableSessionIdentifiers
)
;
}
namespace
{
class
CipherSuiteChangeObserver
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
static
nsresult
StartObserve
(
)
;
protected
:
virtual
~
CipherSuiteChangeObserver
(
)
{
}
private
:
static
StaticRefPtr
<
CipherSuiteChangeObserver
>
sObserver
;
CipherSuiteChangeObserver
(
)
{
}
}
;
NS_IMPL_ISUPPORTS
(
CipherSuiteChangeObserver
nsIObserver
)
StaticRefPtr
<
CipherSuiteChangeObserver
>
CipherSuiteChangeObserver
:
:
sObserver
;
nsresult
CipherSuiteChangeObserver
:
:
StartObserve
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
CipherSuiteChangeObserver
:
:
StartObserve
(
)
can
only
be
accessed
"
"
on
the
main
thread
"
)
;
if
(
!
sObserver
)
{
RefPtr
<
CipherSuiteChangeObserver
>
observer
=
new
CipherSuiteChangeObserver
(
)
;
nsresult
rv
=
Preferences
:
:
AddStrongObserver
(
observer
.
get
(
)
"
security
.
"
)
;
if
(
NS_FAILED
(
rv
)
)
{
sObserver
=
nullptr
;
return
rv
;
}
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
observerService
-
>
AddObserver
(
observer
NS_XPCOM_SHUTDOWN_OBSERVER_ID
false
)
;
sObserver
=
observer
;
}
return
NS_OK
;
}
nsresult
CipherSuiteChangeObserver
:
:
Observe
(
nsISupports
*
const
char
*
aTopic
const
char16_t
*
someData
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
CipherSuiteChangeObserver
:
:
Observe
can
only
be
accessed
on
main
"
"
thread
"
)
;
if
(
nsCRT
:
:
strcmp
(
aTopic
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
)
=
=
0
)
{
NS_ConvertUTF16toUTF8
prefName
(
someData
)
;
const
CipherPref
*
const
cp
=
sCipherPrefs
;
for
(
size_t
i
=
0
;
cp
[
i
]
.
pref
;
+
+
i
)
{
if
(
prefName
.
Equals
(
cp
[
i
]
.
pref
)
)
{
bool
cipherEnabled
=
Preferences
:
:
GetBool
(
cp
[
i
]
.
pref
cp
[
i
]
.
enabledByDefault
)
;
SSL_CipherPrefSetDefault
(
cp
[
i
]
.
id
cipherEnabled
)
;
SSL_ClearSessionCache
(
)
;
break
;
}
}
}
else
if
(
nsCRT
:
:
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
=
=
0
)
{
Preferences
:
:
RemoveObserver
(
this
"
security
.
"
)
;
MOZ_ASSERT
(
sObserver
.
get
(
)
=
=
this
)
;
sObserver
=
nullptr
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
observerService
-
>
RemoveObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
;
}
return
NS_OK
;
}
}
void
nsNSSComponent
:
:
setValidationOptions
(
bool
isInitialSetting
const
mozilla
:
:
MutexAutoLock
&
proofOfLock
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
NS_WARN_IF
(
!
NS_IsMainThread
(
)
)
)
{
return
;
}
int32_t
ocspEnabled
=
Preferences
:
:
GetInt
(
"
security
.
OCSP
.
enabled
"
OCSP_ENABLED_DEFAULT
)
;
bool
ocspRequired
=
ocspEnabled
&
&
Preferences
:
:
GetBool
(
"
security
.
OCSP
.
require
"
false
)
;
if
(
isInitialSetting
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
CERT_OCSP_ENABLED
ocspEnabled
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
CERT_OCSP_REQUIRED
ocspRequired
)
;
}
bool
ocspStaplingEnabled
=
Preferences
:
:
GetBool
(
"
security
.
ssl
.
enable_ocsp_stapling
"
true
)
;
PublicSSLState
(
)
-
>
SetOCSPStaplingEnabled
(
ocspStaplingEnabled
)
;
PrivateSSLState
(
)
-
>
SetOCSPStaplingEnabled
(
ocspStaplingEnabled
)
;
bool
ocspMustStapleEnabled
=
Preferences
:
:
GetBool
(
"
security
.
ssl
.
enable_ocsp_must_staple
"
true
)
;
PublicSSLState
(
)
-
>
SetOCSPMustStapleEnabled
(
ocspMustStapleEnabled
)
;
PrivateSSLState
(
)
-
>
SetOCSPMustStapleEnabled
(
ocspMustStapleEnabled
)
;
const
CertVerifier
:
:
CertificateTransparencyMode
defaultCTMode
=
CertVerifier
:
:
CertificateTransparencyMode
:
:
TelemetryOnly
;
CertVerifier
:
:
CertificateTransparencyMode
ctMode
=
static_cast
<
CertVerifier
:
:
CertificateTransparencyMode
>
(
Preferences
:
:
GetInt
(
"
security
.
pki
.
certificate_transparency
.
mode
"
static_cast
<
int32_t
>
(
defaultCTMode
)
)
)
;
switch
(
ctMode
)
{
case
CertVerifier
:
:
CertificateTransparencyMode
:
:
Disabled
:
case
CertVerifier
:
:
CertificateTransparencyMode
:
:
TelemetryOnly
:
break
;
default
:
ctMode
=
defaultCTMode
;
break
;
}
bool
sctsEnabled
=
ctMode
!
=
CertVerifier
:
:
CertificateTransparencyMode
:
:
Disabled
;
PublicSSLState
(
)
-
>
SetSignedCertTimestampsEnabled
(
sctsEnabled
)
;
PrivateSSLState
(
)
-
>
SetSignedCertTimestampsEnabled
(
sctsEnabled
)
;
CertVerifier
:
:
PinningMode
pinningMode
=
static_cast
<
CertVerifier
:
:
PinningMode
>
(
Preferences
:
:
GetInt
(
"
security
.
cert_pinning
.
enforcement_level
"
CertVerifier
:
:
pinningDisabled
)
)
;
if
(
pinningMode
>
CertVerifier
:
:
pinningEnforceTestMode
)
{
pinningMode
=
CertVerifier
:
:
pinningDisabled
;
}
CertVerifier
:
:
SHA1Mode
sha1Mode
=
static_cast
<
CertVerifier
:
:
SHA1Mode
>
(
Preferences
:
:
GetInt
(
"
security
.
pki
.
sha1_enforcement_level
"
static_cast
<
int32_t
>
(
CertVerifier
:
:
SHA1Mode
:
:
Allowed
)
)
)
;
switch
(
sha1Mode
)
{
case
CertVerifier
:
:
SHA1Mode
:
:
Allowed
:
case
CertVerifier
:
:
SHA1Mode
:
:
Forbidden
:
case
CertVerifier
:
:
SHA1Mode
:
:
UsedToBeBefore2016ButNowIsForbidden
:
case
CertVerifier
:
:
SHA1Mode
:
:
ImportedRoot
:
case
CertVerifier
:
:
SHA1Mode
:
:
ImportedRootOrBefore2016
:
break
;
default
:
sha1Mode
=
CertVerifier
:
:
SHA1Mode
:
:
Allowed
;
break
;
}
if
(
sha1Mode
=
=
CertVerifier
:
:
SHA1Mode
:
:
UsedToBeBefore2016ButNowIsForbidden
)
{
sha1Mode
=
CertVerifier
:
:
SHA1Mode
:
:
Forbidden
;
}
BRNameMatchingPolicy
:
:
Mode
nameMatchingMode
=
static_cast
<
BRNameMatchingPolicy
:
:
Mode
>
(
Preferences
:
:
GetInt
(
"
security
.
pki
.
name_matching_mode
"
static_cast
<
int32_t
>
(
BRNameMatchingPolicy
:
:
Mode
:
:
DoNotEnforce
)
)
)
;
switch
(
nameMatchingMode
)
{
case
BRNameMatchingPolicy
:
:
Mode
:
:
Enforce
:
case
BRNameMatchingPolicy
:
:
Mode
:
:
EnforceAfter23August2015
:
case
BRNameMatchingPolicy
:
:
Mode
:
:
EnforceAfter23August2016
:
case
BRNameMatchingPolicy
:
:
Mode
:
:
DoNotEnforce
:
break
;
default
:
nameMatchingMode
=
BRNameMatchingPolicy
:
:
Mode
:
:
DoNotEnforce
;
break
;
}
NetscapeStepUpPolicy
netscapeStepUpPolicy
=
static_cast
<
NetscapeStepUpPolicy
>
(
Preferences
:
:
GetUint
(
"
security
.
pki
.
netscape_step_up_policy
"
static_cast
<
uint32_t
>
(
NetscapeStepUpPolicy
:
:
AlwaysMatch
)
)
)
;
switch
(
netscapeStepUpPolicy
)
{
case
NetscapeStepUpPolicy
:
:
AlwaysMatch
:
case
NetscapeStepUpPolicy
:
:
MatchBefore23August2016
:
case
NetscapeStepUpPolicy
:
:
MatchBefore23August2015
:
case
NetscapeStepUpPolicy
:
:
NeverMatch
:
break
;
default
:
netscapeStepUpPolicy
=
NetscapeStepUpPolicy
:
:
AlwaysMatch
;
break
;
}
DistrustedCAPolicy
defaultCAPolicyMode
=
DistrustedCAPolicy
:
:
DistrustSymantecRoots
;
DistrustedCAPolicy
distrustedCAPolicy
=
static_cast
<
DistrustedCAPolicy
>
(
Preferences
:
:
GetUint
(
"
security
.
pki
.
distrust_ca_policy
"
static_cast
<
uint32_t
>
(
defaultCAPolicyMode
)
)
)
;
if
(
distrustedCAPolicy
&
~
DistrustedCAPolicyMaxAllowedValueMask
)
{
distrustedCAPolicy
=
defaultCAPolicyMode
;
}
CertVerifier
:
:
OcspDownloadConfig
odc
;
CertVerifier
:
:
OcspStrictConfig
osc
;
uint32_t
certShortLifetimeInDays
;
TimeDuration
softTimeout
;
TimeDuration
hardTimeout
;
GetRevocationBehaviorFromPrefs
(
&
odc
&
osc
&
certShortLifetimeInDays
softTimeout
hardTimeout
proofOfLock
)
;
mDefaultCertVerifier
=
new
SharedCertVerifier
(
odc
osc
softTimeout
hardTimeout
certShortLifetimeInDays
pinningMode
sha1Mode
nameMatchingMode
netscapeStepUpPolicy
ctMode
distrustedCAPolicy
mEnterpriseCerts
)
;
}
void
nsNSSComponent
:
:
UpdateCertVerifierWithEnterpriseRoots
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
MOZ_ASSERT
(
mDefaultCertVerifier
)
;
if
(
NS_WARN_IF
(
!
mDefaultCertVerifier
)
)
{
return
;
}
RefPtr
<
SharedCertVerifier
>
oldCertVerifier
=
mDefaultCertVerifier
;
mDefaultCertVerifier
=
new
SharedCertVerifier
(
oldCertVerifier
-
>
mOCSPDownloadConfig
oldCertVerifier
-
>
mOCSPStrict
?
CertVerifier
:
:
ocspStrict
:
CertVerifier
:
:
ocspRelaxed
oldCertVerifier
-
>
mOCSPTimeoutSoft
oldCertVerifier
-
>
mOCSPTimeoutHard
oldCertVerifier
-
>
mCertShortLifetimeInDays
oldCertVerifier
-
>
mPinningMode
oldCertVerifier
-
>
mSHA1Mode
oldCertVerifier
-
>
mNameMatchingMode
oldCertVerifier
-
>
mNetscapeStepUpPolicy
oldCertVerifier
-
>
mCTMode
oldCertVerifier
-
>
mDistrustedCAPolicy
mEnterpriseCerts
)
;
}
nsresult
nsNSSComponent
:
:
setEnabledTLSVersions
(
)
{
static
const
uint32_t
PSM_DEFAULT_MIN_TLS_VERSION
=
1
;
static
const
uint32_t
PSM_DEFAULT_MAX_TLS_VERSION
=
4
;
uint32_t
minFromPrefs
=
Preferences
:
:
GetUint
(
"
security
.
tls
.
version
.
min
"
PSM_DEFAULT_MIN_TLS_VERSION
)
;
uint32_t
maxFromPrefs
=
Preferences
:
:
GetUint
(
"
security
.
tls
.
version
.
max
"
PSM_DEFAULT_MAX_TLS_VERSION
)
;
SSLVersionRange
defaults
=
{
SSL_LIBRARY_VERSION_3_0
+
PSM_DEFAULT_MIN_TLS_VERSION
SSL_LIBRARY_VERSION_3_0
+
PSM_DEFAULT_MAX_TLS_VERSION
}
;
SSLVersionRange
filledInRange
;
FillTLSVersionRange
(
filledInRange
minFromPrefs
maxFromPrefs
defaults
)
;
SECStatus
srv
=
SSL_VersionRangeSetDefault
(
ssl_variant_stream
&
filledInRange
)
;
if
(
srv
!
=
SECSuccess
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
#
if
defined
(
XP_WIN
)
|
|
(
defined
(
XP_LINUX
)
&
&
!
defined
(
ANDROID
)
)
static
void
SetNSSDatabaseCacheModeAsAppropriate
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIFile
>
profileFile
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_50_DIR
getter_AddRefs
(
profileFile
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
static
const
char
sNSS_SDB_USE_CACHE
[
]
=
"
NSS_SDB_USE_CACHE
"
;
static
const
char
sNSS_SDB_USE_CACHE_WITH_VALUE
[
]
=
"
NSS_SDB_USE_CACHE
=
yes
"
;
auto
profilePath
=
profileFile
-
>
NativePath
(
)
;
#
if
defined
(
XP_LINUX
)
&
&
!
defined
(
ANDROID
)
struct
statfs
statfs_s
;
if
(
statfs
(
profilePath
.
get
(
)
&
statfs_s
)
=
=
0
&
&
statfs_s
.
f_type
=
=
NFS_SUPER_MAGIC
&
&
!
PR_GetEnv
(
sNSS_SDB_USE_CACHE
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
profile
is
remote
(
and
NSS_SDB_USE_CACHE
wasn
'
t
set
)
:
"
"
setting
NSS_SDB_USE_CACHE
"
)
)
;
PR_SetEnv
(
sNSS_SDB_USE_CACHE_WITH_VALUE
)
;
}
else
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
not
setting
NSS_SDB_USE_CACHE
"
)
)
;
}
#
endif
#
ifdef
XP_WIN
wchar_t
volPath
[
MAX_PATH
]
;
if
(
:
:
GetVolumePathNameW
(
profilePath
.
get
(
)
volPath
MAX_PATH
)
&
&
:
:
GetDriveTypeW
(
volPath
)
=
=
DRIVE_REMOTE
&
&
!
PR_GetEnv
(
sNSS_SDB_USE_CACHE
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
profile
is
remote
(
and
NSS_SDB_USE_CACHE
wasn
'
t
set
)
:
"
"
setting
NSS_SDB_USE_CACHE
"
)
)
;
PR_SetEnv
(
sNSS_SDB_USE_CACHE_WITH_VALUE
)
;
}
else
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
not
setting
NSS_SDB_USE_CACHE
"
)
)
;
}
#
endif
}
#
endif
static
nsresult
GetNSSProfilePath
(
nsAutoCString
&
aProfilePath
)
{
aProfilePath
.
Truncate
(
)
;
nsCOMPtr
<
nsIFile
>
profileFile
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_50_DIR
getter_AddRefs
(
profileFile
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
NSS
will
be
initialized
without
a
profile
directory
.
"
"
Some
things
may
not
work
as
expected
.
"
)
;
return
NS_OK
;
}
#
if
defined
(
XP_WIN
)
nsCOMPtr
<
nsILocalFileWin
>
profileFileWin
(
do_QueryInterface
(
profileFile
)
)
;
if
(
!
profileFileWin
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Error
(
"
Could
not
get
nsILocalFileWin
for
profile
directory
.
\
n
"
)
)
;
return
NS_ERROR_FAILURE
;
}
nsAutoString
u16ProfilePath
;
rv
=
profileFileWin
-
>
GetCanonicalPath
(
u16ProfilePath
)
;
CopyUTF16toUTF8
(
u16ProfilePath
aProfilePath
)
;
#
else
rv
=
profileFile
-
>
GetNativePath
(
aProfilePath
)
;
#
endif
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Error
(
"
Could
not
get
native
path
for
profile
directory
.
\
n
"
)
)
;
return
rv
;
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
NSS
profile
at
'
%
s
'
\
n
"
aProfilePath
.
get
(
)
)
)
;
return
NS_OK
;
}
#
ifndef
ANDROID
static
nsresult
AttemptToRenamePKCS11ModuleDB
(
const
nsACString
&
profilePath
const
nsACString
&
moduleDBFilename
)
{
nsAutoCString
destModuleDBFilename
(
moduleDBFilename
)
;
destModuleDBFilename
.
Append
(
"
.
fips
"
)
;
nsCOMPtr
<
nsIFile
>
dbFile
=
do_CreateInstance
(
"
mozilla
.
org
/
file
/
local
;
1
"
)
;
if
(
!
dbFile
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
dbFile
-
>
InitWithNativePath
(
profilePath
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
dbFile
-
>
AppendNative
(
moduleDBFilename
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
bool
exists
;
rv
=
dbFile
-
>
Exists
(
&
exists
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
!
exists
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
%
s
doesn
'
t
exist
?
"
PromiseFlatCString
(
moduleDBFilename
)
.
get
(
)
)
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIFile
>
destDBFile
=
do_CreateInstance
(
"
mozilla
.
org
/
file
/
local
;
1
"
)
;
if
(
!
destDBFile
)
{
return
NS_ERROR_FAILURE
;
}
rv
=
destDBFile
-
>
InitWithNativePath
(
profilePath
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
destDBFile
-
>
AppendNative
(
destModuleDBFilename
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
destDBFile
-
>
Exists
(
&
exists
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
exists
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
%
s
already
exists
-
not
overwriting
"
destModuleDBFilename
.
get
(
)
)
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIFile
>
profileDir
=
do_CreateInstance
(
"
mozilla
.
org
/
file
/
local
;
1
"
)
;
if
(
!
profileDir
)
{
return
NS_ERROR_FAILURE
;
}
rv
=
profileDir
-
>
InitWithNativePath
(
profilePath
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
Unused
<
<
dbFile
-
>
MoveToNative
(
profileDir
destModuleDBFilename
)
;
return
NS_OK
;
}
static
nsresult
AttemptToRenameBothPKCS11ModuleDBVersions
(
const
nsACString
&
profilePath
)
{
NS_NAMED_LITERAL_CSTRING
(
legacyModuleDBFilename
"
secmod
.
db
"
)
;
NS_NAMED_LITERAL_CSTRING
(
sqlModuleDBFilename
"
pkcs11
.
txt
"
)
;
nsresult
rv
=
AttemptToRenamePKCS11ModuleDB
(
profilePath
legacyModuleDBFilename
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
AttemptToRenamePKCS11ModuleDB
(
profilePath
sqlModuleDBFilename
)
;
}
static
nsresult
GetFileIfExists
(
const
nsACString
&
path
const
nsACString
&
filename
nsIFile
*
*
result
)
{
MOZ_ASSERT
(
result
)
;
if
(
!
result
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
result
=
nullptr
;
nsCOMPtr
<
nsIFile
>
file
=
do_CreateInstance
(
"
mozilla
.
org
/
file
/
local
;
1
"
)
;
if
(
!
file
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
file
-
>
InitWithNativePath
(
path
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
file
-
>
AppendNative
(
filename
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
bool
exists
;
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
exists
)
{
file
.
forget
(
result
)
;
}
return
NS_OK
;
}
static
void
MaybeCleanUpOldNSSFiles
(
const
nsACString
&
profilePath
)
{
UniquePK11SlotInfo
slot
(
PK11_GetInternalKeySlot
(
)
)
;
if
(
!
slot
)
{
return
;
}
bool
hasPassword
=
PK11_NeedLogin
(
slot
.
get
(
)
)
&
&
!
PK11_NeedUserInit
(
slot
.
get
(
)
)
;
if
(
!
hasPassword
)
{
return
;
}
NS_NAMED_LITERAL_CSTRING
(
newKeyDBFilename
"
key4
.
db
"
)
;
nsCOMPtr
<
nsIFile
>
newDBFile
;
nsresult
rv
=
GetFileIfExists
(
profilePath
newKeyDBFilename
getter_AddRefs
(
newDBFile
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
if
(
!
newDBFile
)
{
return
;
}
NS_NAMED_LITERAL_CSTRING
(
oldKeyDBFilename
"
key3
.
db
"
)
;
nsCOMPtr
<
nsIFile
>
oldDBFile
;
rv
=
GetFileIfExists
(
profilePath
oldKeyDBFilename
getter_AddRefs
(
oldDBFile
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
if
(
!
oldDBFile
)
{
return
;
}
Unused
<
<
oldDBFile
-
>
Remove
(
false
)
;
}
#
endif
static
nsresult
InitializeNSSWithFallbacks
(
const
nsACString
&
profilePath
bool
nocertdb
bool
safeMode
)
{
if
(
nocertdb
|
|
profilePath
.
IsEmpty
(
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
nocertdb
mode
or
empty
profile
path
-
>
NSS_NoDB_Init
"
)
)
;
SECStatus
srv
=
NSS_NoDB_Init
(
nullptr
)
;
return
srv
=
=
SECSuccess
?
NS_OK
:
NS_ERROR_FAILURE
;
}
#
ifndef
ANDROID
PRErrorCode
savedPRErrorCode1
;
#
endif
SECStatus
srv
=
:
:
mozilla
:
:
psm
:
:
InitializeNSS
(
profilePath
false
!
safeMode
)
;
if
(
srv
=
=
SECSuccess
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
initialized
NSS
in
r
/
w
mode
"
)
)
;
#
ifndef
ANDROID
MaybeCleanUpOldNSSFiles
(
profilePath
)
;
#
endif
return
NS_OK
;
}
#
ifndef
ANDROID
savedPRErrorCode1
=
PR_GetError
(
)
;
PRErrorCode
savedPRErrorCode2
;
#
endif
srv
=
:
:
mozilla
:
:
psm
:
:
InitializeNSS
(
profilePath
true
!
safeMode
)
;
if
(
srv
=
=
SECSuccess
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
initialized
NSS
in
r
-
o
mode
"
)
)
;
return
NS_OK
;
}
#
ifndef
ANDROID
savedPRErrorCode2
=
PR_GetError
(
)
;
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
failed
to
initialize
NSS
with
codes
%
d
%
d
"
savedPRErrorCode1
savedPRErrorCode2
)
)
;
#
endif
#
ifndef
ANDROID
if
(
!
safeMode
&
&
(
savedPRErrorCode1
=
=
SEC_ERROR_LEGACY_DATABASE
|
|
savedPRErrorCode2
=
=
SEC_ERROR_LEGACY_DATABASE
|
|
savedPRErrorCode1
=
=
SEC_ERROR_PKCS11_DEVICE_ERROR
|
|
savedPRErrorCode2
=
=
SEC_ERROR_PKCS11_DEVICE_ERROR
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
attempting
no
-
module
db
init
"
)
)
;
srv
=
:
:
mozilla
:
:
psm
:
:
InitializeNSS
(
profilePath
false
false
)
;
if
(
srv
=
=
SECSuccess
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
FIPS
may
be
the
problem
"
)
)
;
srv
=
NSS_Shutdown
(
)
;
if
(
srv
!
=
SECSuccess
)
{
return
NS_ERROR_FAILURE
;
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
trying
to
rename
module
db
"
)
)
;
nsresult
rv
=
AttemptToRenameBothPKCS11ModuleDBVersions
(
profilePath
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
srv
=
:
:
mozilla
:
:
psm
:
:
InitializeNSS
(
profilePath
false
true
)
;
if
(
srv
=
=
SECSuccess
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
initialized
in
r
/
w
mode
"
)
)
;
return
NS_OK
;
}
srv
=
:
:
mozilla
:
:
psm
:
:
InitializeNSS
(
profilePath
true
true
)
;
if
(
srv
=
=
SECSuccess
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
initialized
in
r
-
o
mode
"
)
)
;
return
NS_OK
;
}
}
}
#
endif
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
last
-
resort
NSS_NoDB_Init
"
)
)
;
srv
=
NSS_NoDB_Init
(
nullptr
)
;
return
srv
=
=
SECSuccess
?
NS_OK
:
NS_ERROR_FAILURE
;
}
nsresult
nsNSSComponent
:
:
InitializeNSS
(
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
nsNSSComponent
:
:
InitializeNSS
\
n
"
)
)
;
static_assert
(
nsINSSErrorsService
:
:
NSS_SEC_ERROR_BASE
=
=
SEC_ERROR_BASE
&
&
nsINSSErrorsService
:
:
NSS_SEC_ERROR_LIMIT
=
=
SEC_ERROR_LIMIT
&
&
nsINSSErrorsService
:
:
NSS_SSL_ERROR_BASE
=
=
SSL_ERROR_BASE
&
&
nsINSSErrorsService
:
:
NSS_SSL_ERROR_LIMIT
=
=
SSL_ERROR_LIMIT
"
You
must
update
the
values
in
nsINSSErrorsService
.
idl
"
)
;
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
NSS
Initialization
beginning
\
n
"
)
)
;
nsAutoCString
profileStr
;
nsresult
rv
=
GetNSSProfilePath
(
profileStr
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
#
if
defined
(
XP_WIN
)
|
|
(
defined
(
XP_LINUX
)
&
&
!
defined
(
ANDROID
)
)
SetNSSDatabaseCacheModeAsAppropriate
(
)
;
#
endif
bool
nocertdb
=
Preferences
:
:
GetBool
(
"
security
.
nocertdb
"
false
)
;
bool
inSafeMode
=
true
;
nsCOMPtr
<
nsIXULRuntime
>
runtime
(
do_GetService
(
"
mozilla
.
org
/
xre
/
runtime
;
1
"
)
)
;
if
(
runtime
)
{
rv
=
runtime
-
>
GetInSafeMode
(
&
inSafeMode
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
inSafeMode
:
%
u
\
n
"
inSafeMode
)
)
;
rv
=
InitializeNSSWithFallbacks
(
profileStr
nocertdb
inSafeMode
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
failed
to
initialize
NSS
"
)
)
;
return
rv
;
}
PK11_SetPasswordFunc
(
PK11PasswordPrompt
)
;
SharedSSLState
:
:
GlobalInit
(
)
;
Preferences
:
:
AddStrongObserver
(
this
"
security
.
"
)
;
SSL_OptionSetDefault
(
SSL_ENABLE_SSL2
false
)
;
SSL_OptionSetDefault
(
SSL_V2_COMPATIBLE_HELLO
false
)
;
rv
=
setEnabledTLSVersions
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
DisableMD5
(
)
;
ConfigureTLSSessionIdentifiers
(
)
;
bool
requireSafeNegotiation
=
Preferences
:
:
GetBool
(
"
security
.
ssl
.
require_safe_negotiation
"
REQUIRE_SAFE_NEGOTIATION_DEFAULT
)
;
SSL_OptionSetDefault
(
SSL_REQUIRE_SAFE_NEGOTIATION
requireSafeNegotiation
)
;
SSL_OptionSetDefault
(
SSL_ENABLE_RENEGOTIATION
SSL_RENEGOTIATE_REQUIRES_XTN
)
;
SSL_OptionSetDefault
(
SSL_ENABLE_EXTENDED_MASTER_SECRET
true
)
;
bool
enableDowngradeCheck
=
Preferences
:
:
GetBool
(
"
security
.
tls
.
hello_downgrade_check
"
HELLO_DOWNGRADE_CHECK_DEFAULT
)
;
SSL_OptionSetDefault
(
SSL_ENABLE_HELLO_DOWNGRADE_CHECK
enableDowngradeCheck
)
;
SSL_OptionSetDefault
(
SSL_ENABLE_FALSE_START
Preferences
:
:
GetBool
(
"
security
.
ssl
.
enable_false_start
"
FALSE_START_ENABLED_DEFAULT
)
)
;
SSL_OptionSetDefault
(
SSL_ENABLE_ALPN
Preferences
:
:
GetBool
(
"
security
.
ssl
.
enable_alpn
"
ALPN_ENABLED_DEFAULT
)
)
;
SSL_OptionSetDefault
(
SSL_ENABLE_0RTT_DATA
Preferences
:
:
GetBool
(
"
security
.
tls
.
enable_0rtt_data
"
ENABLED_0RTT_DATA_DEFAULT
)
)
;
if
(
NS_FAILED
(
InitializeCipherSuite
(
)
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Error
(
"
Unable
to
initialize
cipher
suite
settings
\
n
"
)
)
;
return
NS_ERROR_FAILURE
;
}
mozilla
:
:
pkix
:
:
RegisterErrorTable
(
)
;
if
(
PK11_IsFIPS
(
)
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
FIPS_ENABLED
true
)
;
}
{
AutoSECMODListReadLock
lock
;
for
(
SECMODModuleList
*
list
=
SECMOD_GetDefaultModuleList
(
)
;
list
;
list
=
list
-
>
next
)
{
nsAutoString
scalarKey
;
GetModuleNameForTelemetry
(
list
-
>
module
scalarKey
)
;
if
(
scalarKey
.
Length
(
)
>
0
)
{
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
SECURITY_PKCS11_MODULES_LOADED
scalarKey
true
)
;
}
}
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
NSS
Initialization
done
\
n
"
)
)
;
{
MutexAutoLock
lock
(
mMutex
)
;
#
ifdef
DEBUG
mTestBuiltInRootHash
.
Truncate
(
)
;
Preferences
:
:
GetString
(
"
security
.
test
.
built_in_root_hash
"
mTestBuiltInRootHash
)
;
#
endif
mContentSigningRootHash
.
Truncate
(
)
;
Preferences
:
:
GetString
(
"
security
.
content
.
signature
.
root_hash
"
mContentSigningRootHash
)
;
mMitmCanaryIssuer
.
Truncate
(
)
;
Preferences
:
:
GetString
(
"
security
.
pki
.
mitm_canary_issuer
"
mMitmCanaryIssuer
)
;
mMitmDetecionEnabled
=
Preferences
:
:
GetBool
(
"
security
.
pki
.
mitm_canary_issuer
.
enabled
"
true
)
;
setValidationOptions
(
true
lock
)
;
bool
importEnterpriseRoots
=
Preferences
:
:
GetBool
(
kEnterpriseRootModePref
false
)
;
uint32_t
familySafetyMode
=
Preferences
:
:
GetUint
(
kFamilySafetyModePref
kFamilySafetyModeDefault
)
;
Vector
<
nsCString
>
possibleLoadableRootsLocations
;
rv
=
ListPossibleLoadableRootsLocations
(
possibleLoadableRootsLocations
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
RefPtr
<
LoadLoadableRootsTask
>
loadLoadableRootsTask
(
new
LoadLoadableRootsTask
(
this
importEnterpriseRoots
familySafetyMode
std
:
:
move
(
possibleLoadableRootsLocations
)
)
)
;
rv
=
loadLoadableRootsTask
-
>
Dispatch
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
mLoadLoadableRootsTaskDispatched
=
true
;
return
NS_OK
;
}
}
void
nsNSSComponent
:
:
ShutdownNSS
(
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
nsNSSComponent
:
:
ShutdownNSS
\
n
"
)
)
;
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
bool
loadLoadableRootsTaskDispatched
;
{
MutexAutoLock
lock
(
mMutex
)
;
loadLoadableRootsTaskDispatched
=
mLoadLoadableRootsTaskDispatched
;
}
if
(
loadLoadableRootsTaskDispatched
)
{
Unused
<
<
BlockUntilLoadableRootsLoaded
(
)
;
}
:
:
mozilla
:
:
psm
:
:
UnloadLoadableRoots
(
)
;
PK11_SetPasswordFunc
(
(
PK11PasswordFunc
)
nullptr
)
;
Preferences
:
:
RemoveObserver
(
this
"
security
.
"
)
;
MutexAutoLock
lock
(
mMutex
)
;
mDefaultCertVerifier
=
nullptr
;
}
nsresult
nsNSSComponent
:
:
Init
(
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
NS_IsMainThread
(
)
)
{
return
NS_ERROR_NOT_SAME_THREAD
;
}
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
XRE_IsParentProcess
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
Beginning
NSS
initialization
\
n
"
)
)
;
nsresult
rv
=
InitializeNSS
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Error
(
"
nsNSSComponent
:
:
InitializeNSS
(
)
failed
\
n
"
)
)
;
return
rv
;
}
RememberCertErrorsTable
:
:
Init
(
)
;
return
RegisterObservers
(
)
;
}
NS_IMPL_ISUPPORTS
(
nsNSSComponent
nsINSSComponent
nsIObserver
)
static
const
char
*
const
PROFILE_BEFORE_CHANGE_TOPIC
=
"
profile
-
before
-
change
"
;
NS_IMETHODIMP
nsNSSComponent
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
someData
)
{
if
(
nsCRT
:
:
strcmp
(
aTopic
PROFILE_BEFORE_CHANGE_TOPIC
)
=
=
0
|
|
nsCRT
:
:
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
=
=
0
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
receiving
profile
change
or
XPCOM
shutdown
notification
"
)
)
;
ShutdownNSS
(
)
;
}
else
if
(
nsCRT
:
:
strcmp
(
aTopic
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
)
=
=
0
)
{
bool
clearSessionCache
=
true
;
NS_ConvertUTF16toUTF8
prefName
(
someData
)
;
if
(
prefName
.
EqualsLiteral
(
"
security
.
tls
.
version
.
min
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
tls
.
version
.
max
"
)
)
{
(
void
)
setEnabledTLSVersions
(
)
;
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
tls
.
hello_downgrade_check
"
)
)
{
bool
enableDowngradeCheck
=
Preferences
:
:
GetBool
(
"
security
.
tls
.
hello_downgrade_check
"
HELLO_DOWNGRADE_CHECK_DEFAULT
)
;
SSL_OptionSetDefault
(
SSL_ENABLE_HELLO_DOWNGRADE_CHECK
enableDowngradeCheck
)
;
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
ssl
.
require_safe_negotiation
"
)
)
{
bool
requireSafeNegotiation
=
Preferences
:
:
GetBool
(
"
security
.
ssl
.
require_safe_negotiation
"
REQUIRE_SAFE_NEGOTIATION_DEFAULT
)
;
SSL_OptionSetDefault
(
SSL_REQUIRE_SAFE_NEGOTIATION
requireSafeNegotiation
)
;
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
ssl
.
enable_false_start
"
)
)
{
SSL_OptionSetDefault
(
SSL_ENABLE_FALSE_START
Preferences
:
:
GetBool
(
"
security
.
ssl
.
enable_false_start
"
FALSE_START_ENABLED_DEFAULT
)
)
;
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
ssl
.
enable_alpn
"
)
)
{
SSL_OptionSetDefault
(
SSL_ENABLE_ALPN
Preferences
:
:
GetBool
(
"
security
.
ssl
.
enable_alpn
"
ALPN_ENABLED_DEFAULT
)
)
;
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
tls
.
enable_0rtt_data
"
)
)
{
SSL_OptionSetDefault
(
SSL_ENABLE_0RTT_DATA
Preferences
:
:
GetBool
(
"
security
.
tls
.
enable_0rtt_data
"
ENABLED_0RTT_DATA_DEFAULT
)
)
;
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
ssl
.
disable_session_identifiers
"
)
)
{
ConfigureTLSSessionIdentifiers
(
)
;
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
OCSP
.
enabled
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
OCSP
.
require
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
pki
.
cert_short_lifetime_in_days
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
ssl
.
enable_ocsp_stapling
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
ssl
.
enable_ocsp_must_staple
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
pki
.
certificate_transparency
.
mode
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
cert_pinning
.
enforcement_level
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
pki
.
sha1_enforcement_level
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
pki
.
name_matching_mode
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
pki
.
netscape_step_up_policy
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
OCSP
.
timeoutMilliseconds
.
soft
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
OCSP
.
timeoutMilliseconds
.
hard
"
)
|
|
prefName
.
EqualsLiteral
(
"
security
.
pki
.
distrust_ca_policy
"
)
)
{
MutexAutoLock
lock
(
mMutex
)
;
setValidationOptions
(
false
lock
)
;
#
ifdef
DEBUG
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
test
.
built_in_root_hash
"
)
)
{
MutexAutoLock
lock
(
mMutex
)
;
mTestBuiltInRootHash
.
Truncate
(
)
;
Preferences
:
:
GetString
(
"
security
.
test
.
built_in_root_hash
"
mTestBuiltInRootHash
)
;
#
endif
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
content
.
signature
.
root_hash
"
)
)
{
MutexAutoLock
lock
(
mMutex
)
;
mContentSigningRootHash
.
Truncate
(
)
;
Preferences
:
:
GetString
(
"
security
.
content
.
signature
.
root_hash
"
mContentSigningRootHash
)
;
}
else
if
(
prefName
.
Equals
(
kEnterpriseRootModePref
)
|
|
prefName
.
Equals
(
kFamilySafetyModePref
)
)
{
UnloadEnterpriseRoots
(
)
;
MaybeImportEnterpriseRoots
(
)
;
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
pki
.
mitm_canary_issuer
"
)
)
{
MutexAutoLock
lock
(
mMutex
)
;
mMitmCanaryIssuer
.
Truncate
(
)
;
Preferences
:
:
GetString
(
"
security
.
pki
.
mitm_canary_issuer
"
mMitmCanaryIssuer
)
;
}
else
if
(
prefName
.
EqualsLiteral
(
"
security
.
pki
.
mitm_canary_issuer
.
enabled
"
)
)
{
MutexAutoLock
lock
(
mMutex
)
;
mMitmDetecionEnabled
=
Preferences
:
:
GetBool
(
"
security
.
pki
.
mitm_canary_issuer
.
enabled
"
true
)
;
}
else
{
clearSessionCache
=
false
;
}
if
(
clearSessionCache
)
SSL_ClearSessionCache
(
)
;
}
return
NS_OK
;
}
nsresult
nsNSSComponent
:
:
GetNewPrompter
(
nsIPrompt
*
*
result
)
{
NS_ENSURE_ARG_POINTER
(
result
)
;
*
result
=
nullptr
;
if
(
!
NS_IsMainThread
(
)
)
{
NS_ERROR
(
"
nsSDRContext
:
:
GetNewPrompter
called
off
the
main
thread
"
)
;
return
NS_ERROR_NOT_SAME_THREAD
;
}
nsresult
rv
;
nsCOMPtr
<
nsIWindowWatcher
>
wwatch
(
do_GetService
(
NS_WINDOWWATCHER_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
wwatch
-
>
GetNewPrompter
(
0
result
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
rv
;
}
nsresult
nsNSSComponent
:
:
LogoutAuthenticatedPK11
(
)
{
nsCOMPtr
<
nsICertOverrideService
>
icos
=
do_GetService
(
"
mozilla
.
org
/
security
/
certoverride
;
1
"
)
;
if
(
icos
)
{
icos
-
>
ClearValidityOverride
(
NS_LITERAL_CSTRING
(
"
all
:
temporary
-
certificates
"
)
0
)
;
}
nsClientAuthRememberService
:
:
ClearAllRememberedDecisions
(
)
;
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
nullptr
"
net
:
cancel
-
all
-
connections
"
nullptr
)
;
}
return
NS_OK
;
}
nsresult
nsNSSComponent
:
:
RegisterObservers
(
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
(
do_GetService
(
"
mozilla
.
org
/
observer
-
service
;
1
"
)
)
;
if
(
!
observerService
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
nsNSSComponent
:
couldn
'
t
get
observer
service
\
n
"
)
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
nsNSSComponent
:
adding
observers
\
n
"
)
)
;
observerService
-
>
AddObserver
(
this
PROFILE_BEFORE_CHANGE_TOPIC
false
)
;
observerService
-
>
AddObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
false
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsNSSComponent
:
:
IsCertTestBuiltInRoot
(
CERTCertificate
*
cert
bool
*
result
)
{
NS_ENSURE_ARG_POINTER
(
cert
)
;
NS_ENSURE_ARG_POINTER
(
result
)
;
*
result
=
false
;
#
ifdef
DEBUG
RefPtr
<
nsNSSCertificate
>
nsc
=
nsNSSCertificate
:
:
Create
(
cert
)
;
if
(
!
nsc
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoString
certHash
;
nsresult
rv
=
nsc
-
>
GetSha256Fingerprint
(
certHash
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
MutexAutoLock
lock
(
mMutex
)
;
if
(
mTestBuiltInRootHash
.
IsEmpty
(
)
)
{
return
NS_OK
;
}
*
result
=
mTestBuiltInRootHash
.
Equals
(
certHash
)
;
#
endif
return
NS_OK
;
}
NS_IMETHODIMP
nsNSSComponent
:
:
IsCertContentSigningRoot
(
CERTCertificate
*
cert
bool
*
result
)
{
NS_ENSURE_ARG_POINTER
(
result
)
;
*
result
=
false
;
RefPtr
<
nsNSSCertificate
>
nsc
=
nsNSSCertificate
:
:
Create
(
cert
)
;
if
(
!
nsc
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
creating
nsNSSCertificate
failed
"
)
)
;
return
NS_ERROR_FAILURE
;
}
nsAutoString
certHash
;
nsresult
rv
=
nsc
-
>
GetSha256Fingerprint
(
certHash
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
getting
cert
fingerprint
failed
"
)
)
;
return
rv
;
}
MutexAutoLock
lock
(
mMutex
)
;
if
(
mContentSigningRootHash
.
IsEmpty
(
)
)
{
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
mContentSigningRootHash
is
empty
"
)
)
;
return
NS_ERROR_FAILURE
;
}
*
result
=
mContentSigningRootHash
.
Equals
(
certHash
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsNSSComponent
:
:
IssuerMatchesMitmCanary
(
const
char
*
aCertIssuer
)
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mMitmDetecionEnabled
&
&
!
mMitmCanaryIssuer
.
IsEmpty
(
)
)
{
nsString
certIssuer
=
NS_ConvertUTF8toUTF16
(
aCertIssuer
)
;
if
(
mMitmCanaryIssuer
.
Equals
(
certIssuer
)
)
{
return
NS_OK
;
}
}
return
NS_ERROR_FAILURE
;
}
SharedCertVerifier
:
:
~
SharedCertVerifier
(
)
{
}
NS_IMETHODIMP
nsNSSComponent
:
:
GetDefaultCertVerifier
(
SharedCertVerifier
*
*
result
)
{
MutexAutoLock
lock
(
mMutex
)
;
NS_ENSURE_ARG_POINTER
(
result
)
;
RefPtr
<
SharedCertVerifier
>
certVerifier
(
mDefaultCertVerifier
)
;
certVerifier
.
forget
(
result
)
;
return
NS_OK
;
}
namespace
mozilla
{
namespace
psm
{
already_AddRefed
<
SharedCertVerifier
>
GetDefaultCertVerifier
(
)
{
static
NS_DEFINE_CID
(
kNSSComponentCID
NS_NSSCOMPONENT_CID
)
;
nsCOMPtr
<
nsINSSComponent
>
nssComponent
(
do_GetService
(
kNSSComponentCID
)
)
;
if
(
!
nssComponent
)
{
return
nullptr
;
}
RefPtr
<
SharedCertVerifier
>
result
;
nsresult
rv
=
nssComponent
-
>
GetDefaultCertVerifier
(
getter_AddRefs
(
result
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
return
result
.
forget
(
)
;
}
}
}
NS_IMPL_ISUPPORTS
(
PipUIContext
nsIInterfaceRequestor
)
PipUIContext
:
:
PipUIContext
(
)
{
}
PipUIContext
:
:
~
PipUIContext
(
)
{
}
NS_IMETHODIMP
PipUIContext
:
:
GetInterface
(
const
nsIID
&
uuid
void
*
*
result
)
{
NS_ENSURE_ARG_POINTER
(
result
)
;
*
result
=
nullptr
;
if
(
!
NS_IsMainThread
(
)
)
{
NS_ERROR
(
"
PipUIContext
:
:
GetInterface
called
off
the
main
thread
"
)
;
return
NS_ERROR_NOT_SAME_THREAD
;
}
if
(
!
uuid
.
Equals
(
NS_GET_IID
(
nsIPrompt
)
)
)
return
NS_ERROR_NO_INTERFACE
;
nsIPrompt
*
prompt
=
nullptr
;
nsresult
rv
=
nsNSSComponent
:
:
GetNewPrompter
(
&
prompt
)
;
*
result
=
prompt
;
return
rv
;
}
nsresult
getNSSDialogs
(
void
*
*
_result
REFNSIID
aIID
const
char
*
contract
)
{
if
(
!
NS_IsMainThread
(
)
)
{
NS_ERROR
(
"
getNSSDialogs
called
off
the
main
thread
"
)
;
return
NS_ERROR_NOT_SAME_THREAD
;
}
nsresult
rv
;
nsCOMPtr
<
nsISupports
>
svc
=
do_GetService
(
contract
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
svc
-
>
QueryInterface
(
aIID
_result
)
;
return
rv
;
}
nsresult
setPassword
(
PK11SlotInfo
*
slot
nsIInterfaceRequestor
*
ctx
)
{
MOZ_ASSERT
(
slot
)
;
MOZ_ASSERT
(
ctx
)
;
NS_ENSURE_ARG_POINTER
(
slot
)
;
NS_ENSURE_ARG_POINTER
(
ctx
)
;
if
(
PK11_NeedUserInit
(
slot
)
)
{
nsCOMPtr
<
nsITokenPasswordDialogs
>
dialogs
;
nsresult
rv
=
getNSSDialogs
(
getter_AddRefs
(
dialogs
)
NS_GET_IID
(
nsITokenPasswordDialogs
)
NS_TOKENPASSWORDSDIALOG_CONTRACTID
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
bool
canceled
;
nsCOMPtr
<
nsIPK11Token
>
token
=
new
nsPK11Token
(
slot
)
;
rv
=
dialogs
-
>
SetPassword
(
ctx
token
&
canceled
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
canceled
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
}
return
NS_OK
;
}
extern
"
C
"
{
PRBool
pkcs12StringEndiannessConversion
(
PRBool
unsigned
char
*
inBuf
unsigned
int
inBufLen
unsigned
char
*
outBuf
unsigned
int
unsigned
int
*
outBufLen
PRBool
)
{
*
outBufLen
=
inBufLen
;
memcpy
(
outBuf
inBuf
inBufLen
)
;
return
true
;
}
}
namespace
mozilla
{
namespace
psm
{
nsresult
InitializeCipherSuite
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
InitializeCipherSuite
(
)
can
only
be
accessed
on
the
main
thread
"
)
;
if
(
NSS_SetDomesticPolicy
(
)
!
=
SECSuccess
)
{
return
NS_ERROR_FAILURE
;
}
for
(
uint16_t
i
=
0
;
i
<
SSL_NumImplementedCiphers
;
+
+
i
)
{
uint16_t
cipher_id
=
SSL_ImplementedCiphers
[
i
]
;
SSL_CipherPrefSetDefault
(
cipher_id
false
)
;
}
const
CipherPref
*
const
cp
=
sCipherPrefs
;
for
(
size_t
i
=
0
;
cp
[
i
]
.
pref
;
+
+
i
)
{
bool
cipherEnabled
=
Preferences
:
:
GetBool
(
cp
[
i
]
.
pref
cp
[
i
]
.
enabledByDefault
)
;
SSL_CipherPrefSetDefault
(
cp
[
i
]
.
id
cipherEnabled
)
;
}
SEC_PKCS12EnableCipher
(
PKCS12_RC4_40
1
)
;
SEC_PKCS12EnableCipher
(
PKCS12_RC4_128
1
)
;
SEC_PKCS12EnableCipher
(
PKCS12_RC2_CBC_40
1
)
;
SEC_PKCS12EnableCipher
(
PKCS12_RC2_CBC_128
1
)
;
SEC_PKCS12EnableCipher
(
PKCS12_DES_56
1
)
;
SEC_PKCS12EnableCipher
(
PKCS12_DES_EDE3_168
1
)
;
SEC_PKCS12SetPreferredCipher
(
PKCS12_DES_EDE3_168
1
)
;
PORT_SetUCS2_ASCIIConversionFunction
(
pkcs12StringEndiannessConversion
)
;
NSS_OptionSet
(
NSS_RSA_MIN_KEY_SIZE
512
)
;
return
CipherSuiteChangeObserver
:
:
StartObserve
(
)
;
}
}
}
