#
include
"
nsISupports
.
idl
"
interface
nsIArray
;
interface
nsIX509Cert
;
%
{
C
+
+
#
define
NS_CERTOVERRIDE_CONTRACTID
"
mozilla
.
org
/
security
/
certoverride
;
1
"
%
}
[
scriptable
builtinclass
uuid
(
ed735e24
-
fa55
-
4163
-
906d
-
17fb78851fe1
)
]
interface
nsICertOverride
:
nsISupports
{
readonly
attribute
ACString
asciiHost
;
readonly
attribute
int32_t
port
;
readonly
attribute
boolean
isTemporary
;
readonly
attribute
ACString
dbKey
;
readonly
attribute
ACString
hostPort
;
}
;
[
scriptable
builtinclass
uuid
(
be019e47
-
22fc
-
4355
-
9f16
-
9ab047d6742d
)
]
interface
nsICertOverrideService
:
nsISupports
{
const
short
ERROR_UNTRUSTED
=
1
;
const
short
ERROR_MISMATCH
=
2
;
const
short
ERROR_TIME
=
4
;
[
must_use
]
void
rememberValidityOverride
(
in
AUTF8String
aHostName
in
int32_t
aPort
in
nsIX509Cert
aCert
in
uint32_t
aOverrideBits
in
boolean
aTemporary
)
;
[
must_use
]
void
rememberTemporaryValidityOverrideUsingFingerprint
(
in
AUTF8String
aHostName
in
int32_t
aPort
in
AUTF8String
aCertFingerprint
in
uint32_t
aOverrideBits
)
;
[
must_use
]
boolean
hasMatchingOverride
(
in
AUTF8String
aHostName
in
int32_t
aPort
in
nsIX509Cert
aCert
out
uint32_t
aOverrideBits
out
boolean
aIsTemporary
)
;
void
clearValidityOverride
(
in
AUTF8String
aHostName
in
int32_t
aPort
)
;
void
clearAllOverrides
(
)
;
[
must_use
]
uint32_t
isCertUsedForOverrides
(
in
nsIX509Cert
aCert
in
boolean
aCheckTemporaries
in
boolean
aCheckPermanents
)
;
Array
<
nsICertOverride
>
getOverrides
(
)
;
void
setDisableAllSecurityChecksAndLetAttackersInterceptMyData
(
in
boolean
aDisable
)
;
}
;
