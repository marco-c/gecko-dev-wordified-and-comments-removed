#
ifndef
_SSLSERVERCERTVERIFICATION_H
#
define
_SSLSERVERCERTVERIFICATION_H
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
seccomon
.
h
"
#
include
"
secoidt
.
h
"
#
include
"
prio
.
h
"
#
include
"
prerror
.
h
"
class
nsNSSCertificate
;
namespace
mozilla
{
namespace
psm
{
class
TransportSecurityInfo
;
enum
class
EVStatus
:
uint8_t
;
SECStatus
AuthCertificateHook
(
void
*
arg
PRFileDesc
*
fd
PRBool
checkSig
PRBool
isServer
)
;
SECStatus
AuthCertificateHookWithInfo
(
TransportSecurityInfo
*
infoObject
const
void
*
aPtrForLogging
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
peerCertChain
Maybe
<
nsTArray
<
nsTArray
<
uint8_t
>
>
>
&
stapledOCSPResponses
Maybe
<
nsTArray
<
uint8_t
>
>
&
sctsFromTLSExtension
uint32_t
providerFlags
)
;
class
BaseSSLServerCertVerificationResult
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
void
Dispatch
(
nsNSSCertificate
*
aCert
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
aBuiltChain
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
aPeerCertChain
uint16_t
aCertificateTransparencyStatus
EVStatus
aEVStatus
bool
aSucceeded
PRErrorCode
aFinalError
uint32_t
aCollectedErrors
)
=
0
;
}
;
class
SSLServerCertVerificationResult
final
:
public
BaseSSLServerCertVerificationResult
public
Runnable
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIRUNNABLE
explicit
SSLServerCertVerificationResult
(
TransportSecurityInfo
*
infoObject
)
;
void
Dispatch
(
nsNSSCertificate
*
aCert
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
aBuiltChain
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
aPeerCertChain
uint16_t
aCertificateTransparencyStatus
EVStatus
aEVStatus
bool
aSucceeded
PRErrorCode
aFinalError
uint32_t
aCollectedErrors
)
override
;
private
:
~
SSLServerCertVerificationResult
(
)
=
default
;
const
RefPtr
<
TransportSecurityInfo
>
mInfoObject
;
RefPtr
<
nsNSSCertificate
>
mCert
;
nsTArray
<
nsTArray
<
uint8_t
>
>
mBuiltChain
;
nsTArray
<
nsTArray
<
uint8_t
>
>
mPeerCertChain
;
uint16_t
mCertificateTransparencyStatus
;
EVStatus
mEVStatus
;
bool
mSucceeded
;
PRErrorCode
mFinalError
;
uint32_t
mCollectedErrors
;
}
;
}
}
#
endif
