#
ifndef
_SSLSERVERCERTVERIFICATION_H
#
define
_SSLSERVERCERTVERIFICATION_H
#
include
"
CertVerifier
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozpkix
/
pkix
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
prerror
.
h
"
#
include
"
prio
.
h
"
#
include
"
seccomon
.
h
"
#
include
"
secoidt
.
h
"
class
nsNSSCertificate
;
using
namespace
mozilla
:
:
pkix
;
namespace
mozilla
{
namespace
psm
{
class
TransportSecurityInfo
;
enum
class
EVStatus
:
uint8_t
;
SECStatus
AuthCertificateHook
(
void
*
arg
PRFileDesc
*
fd
PRBool
checkSig
PRBool
isServer
)
;
SECStatus
AuthCertificateHookWithInfo
(
TransportSecurityInfo
*
infoObject
const
void
*
aPtrForLogging
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
peerCertChain
Maybe
<
nsTArray
<
nsTArray
<
uint8_t
>
>
>
&
stapledOCSPResponses
Maybe
<
nsTArray
<
uint8_t
>
>
&
sctsFromTLSExtension
uint32_t
providerFlags
)
;
class
BaseSSLServerCertVerificationResult
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
void
Dispatch
(
nsNSSCertificate
*
aCert
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
aBuiltChain
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
aPeerCertChain
uint16_t
aCertificateTransparencyStatus
EVStatus
aEVStatus
bool
aSucceeded
PRErrorCode
aFinalError
uint32_t
aCollectedErrors
bool
aIsBuiltCertChainRootBuiltInRoot
)
=
0
;
}
;
class
SSLServerCertVerificationResult
final
:
public
BaseSSLServerCertVerificationResult
public
Runnable
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIRUNNABLE
explicit
SSLServerCertVerificationResult
(
TransportSecurityInfo
*
infoObject
)
;
void
Dispatch
(
nsNSSCertificate
*
aCert
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
aBuiltChain
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
aPeerCertChain
uint16_t
aCertificateTransparencyStatus
EVStatus
aEVStatus
bool
aSucceeded
PRErrorCode
aFinalError
uint32_t
aCollectedErrors
bool
aIsBuiltCertChainRootBuiltInRoot
)
override
;
private
:
~
SSLServerCertVerificationResult
(
)
=
default
;
const
RefPtr
<
TransportSecurityInfo
>
mInfoObject
;
RefPtr
<
nsNSSCertificate
>
mCert
;
nsTArray
<
nsTArray
<
uint8_t
>
>
mBuiltChain
;
nsTArray
<
nsTArray
<
uint8_t
>
>
mPeerCertChain
;
uint16_t
mCertificateTransparencyStatus
;
EVStatus
mEVStatus
;
bool
mSucceeded
;
PRErrorCode
mFinalError
;
uint32_t
mCollectedErrors
;
bool
mIsBuiltCertChainRootBuiltInRoot
;
}
;
class
SSLServerCertVerificationJob
:
public
Runnable
{
public
:
SSLServerCertVerificationJob
(
const
SSLServerCertVerificationJob
&
)
=
delete
;
static
SECStatus
Dispatch
(
uint64_t
addrForLogging
void
*
aPinArg
const
UniqueCERTCertificate
&
serverCert
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
peerCertChain
const
nsACString
&
aHostName
int32_t
aPort
const
OriginAttributes
&
aOriginAttributes
Maybe
<
nsTArray
<
uint8_t
>
>
&
stapledOCSPResponse
Maybe
<
nsTArray
<
uint8_t
>
>
&
sctsFromTLSExtension
Maybe
<
DelegatedCredentialInfo
>
&
dcInfo
uint32_t
providerFlags
Time
time
PRTime
prtime
uint32_t
certVerifierFlags
BaseSSLServerCertVerificationResult
*
aResultTask
)
;
private
:
NS_DECL_NSIRUNNABLE
SSLServerCertVerificationJob
(
uint64_t
addrForLogging
void
*
aPinArg
const
UniqueCERTCertificate
&
cert
nsTArray
<
nsTArray
<
uint8_t
>
>
&
&
peerCertChain
const
nsACString
&
aHostName
int32_t
aPort
const
OriginAttributes
&
aOriginAttributes
Maybe
<
nsTArray
<
uint8_t
>
>
&
stapledOCSPResponse
Maybe
<
nsTArray
<
uint8_t
>
>
&
sctsFromTLSExtension
Maybe
<
DelegatedCredentialInfo
>
&
dcInfo
uint32_t
providerFlags
Time
time
PRTime
prtime
uint32_t
certVerifierFlags
BaseSSLServerCertVerificationResult
*
aResultTask
)
:
Runnable
(
"
psm
:
:
SSLServerCertVerificationJob
"
)
mAddrForLogging
(
addrForLogging
)
mPinArg
(
aPinArg
)
mCert
(
CERT_DupCertificate
(
cert
.
get
(
)
)
)
mPeerCertChain
(
std
:
:
move
(
peerCertChain
)
)
mHostName
(
aHostName
)
mPort
(
aPort
)
mOriginAttributes
(
aOriginAttributes
)
mProviderFlags
(
providerFlags
)
mCertVerifierFlags
(
certVerifierFlags
)
mTime
(
time
)
mPRTime
(
prtime
)
mStapledOCSPResponse
(
std
:
:
move
(
stapledOCSPResponse
)
)
mSCTsFromTLSExtension
(
std
:
:
move
(
sctsFromTLSExtension
)
)
mDCInfo
(
std
:
:
move
(
dcInfo
)
)
mResultTask
(
aResultTask
)
{
}
uint64_t
mAddrForLogging
;
void
*
mPinArg
;
const
UniqueCERTCertificate
mCert
;
nsTArray
<
nsTArray
<
uint8_t
>
>
mPeerCertChain
;
nsCString
mHostName
;
int32_t
mPort
;
OriginAttributes
mOriginAttributes
;
const
uint32_t
mProviderFlags
;
const
uint32_t
mCertVerifierFlags
;
const
Time
mTime
;
const
PRTime
mPRTime
;
Maybe
<
nsTArray
<
uint8_t
>
>
mStapledOCSPResponse
;
Maybe
<
nsTArray
<
uint8_t
>
>
mSCTsFromTLSExtension
;
Maybe
<
DelegatedCredentialInfo
>
mDCInfo
;
RefPtr
<
BaseSSLServerCertVerificationResult
>
mResultTask
;
}
;
}
}
#
endif
