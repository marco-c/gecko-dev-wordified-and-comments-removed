#
include
"
RootCertificateTelemetryUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
RootHashes
.
inc
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
namespace
mozilla
{
namespace
psm
{
mozilla
:
:
LazyLogModule
gPublicKeyPinningTelemetryLog
(
"
PublicKeyPinningTelemetryService
"
)
;
class
BinaryHashSearchArrayComparator
{
public
:
explicit
BinaryHashSearchArrayComparator
(
const
uint8_t
*
aTarget
size_t
len
)
:
mTarget
(
aTarget
)
{
MOZ_ASSERT
(
len
=
=
HASH_LEN
"
Hashes
should
be
of
the
same
length
.
"
)
;
}
int
operator
(
)
(
const
CertAuthorityHash
val
)
const
{
return
memcmp
(
mTarget
val
.
hash
HASH_LEN
)
;
}
private
:
const
uint8_t
*
mTarget
;
}
;
int32_t
RootCABinNumber
(
const
SECItem
*
cert
)
{
Digest
digest
;
nsresult
rv
=
digest
.
DigestBuf
(
SEC_OID_SHA256
cert
-
>
data
cert
-
>
len
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
ROOT_CERTIFICATE_HASH_FAILURE
;
}
size_t
idx
;
MOZ_LOG
(
gPublicKeyPinningTelemetryLog
LogLevel
:
:
Debug
(
"
pkpinTelem
:
First
bytes
%
02x
%
02x
%
02x
%
02x
\
n
"
digest
.
get
(
)
.
data
[
0
]
digest
.
get
(
)
.
data
[
1
]
digest
.
get
(
)
.
data
[
2
]
digest
.
get
(
)
.
data
[
3
]
)
)
;
if
(
mozilla
:
:
BinarySearchIf
(
ROOT_TABLE
0
ArrayLength
(
ROOT_TABLE
)
BinaryHashSearchArrayComparator
(
static_cast
<
uint8_t
*
>
(
digest
.
get
(
)
.
data
)
digest
.
get
(
)
.
len
)
&
idx
)
)
{
MOZ_LOG
(
gPublicKeyPinningTelemetryLog
LogLevel
:
:
Debug
(
"
pkpinTelem
:
Telemetry
index
was
%
zu
bin
is
%
d
\
n
"
idx
ROOT_TABLE
[
idx
]
.
binNumber
)
)
;
return
(
int32_t
)
ROOT_TABLE
[
idx
]
.
binNumber
;
}
return
ROOT_CERTIFICATE_UNKNOWN
;
}
void
AccumulateTelemetryForRootCA
(
mozilla
:
:
Telemetry
:
:
HistogramID
probe
const
CERTCertificate
*
cert
)
{
int32_t
binId
=
RootCABinNumber
(
&
cert
-
>
derCert
)
;
if
(
binId
!
=
ROOT_CERTIFICATE_HASH_FAILURE
)
{
Accumulate
(
probe
binId
)
;
}
}
}
}
