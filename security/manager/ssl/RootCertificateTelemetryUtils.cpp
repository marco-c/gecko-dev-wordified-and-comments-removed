#
include
"
RootCertificateTelemetryUtils
.
h
"
#
include
"
PKCS11ModuleDB
.
h
"
#
include
"
RootHashes
.
inc
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsINSSComponent
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
pk11pub
.
h
"
namespace
mozilla
{
namespace
psm
{
mozilla
:
:
LazyLogModule
gPublicKeyPinningTelemetryLog
(
"
PublicKeyPinningTelemetryService
"
)
;
class
BinaryHashSearchArrayComparator
{
public
:
explicit
BinaryHashSearchArrayComparator
(
const
uint8_t
*
aTarget
size_t
len
)
:
mTarget
(
aTarget
)
{
MOZ_ASSERT
(
len
=
=
HASH_LEN
"
Hashes
should
be
of
the
same
length
.
"
)
;
}
int
operator
(
)
(
const
CertAuthorityHash
val
)
const
{
return
memcmp
(
mTarget
val
.
hash
HASH_LEN
)
;
}
private
:
const
uint8_t
*
mTarget
;
}
;
int32_t
RootCABinNumber
(
Span
<
const
uint8_t
>
cert
)
{
nsTArray
<
uint8_t
>
digestArray
;
nsresult
rv
=
Digest
:
:
DigestBuf
(
SEC_OID_SHA256
cert
digestArray
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
ROOT_CERTIFICATE_HASH_FAILURE
;
}
size_t
idx
;
MOZ_LOG
(
gPublicKeyPinningTelemetryLog
LogLevel
:
:
Debug
(
"
pkpinTelem
:
First
bytes
%
02x
%
02x
%
02x
%
02x
\
n
"
digestArray
.
ElementAt
(
0
)
digestArray
.
ElementAt
(
1
)
digestArray
.
ElementAt
(
2
)
digestArray
.
ElementAt
(
3
)
)
)
;
if
(
mozilla
:
:
BinarySearchIf
(
ROOT_TABLE
0
ArrayLength
(
ROOT_TABLE
)
BinaryHashSearchArrayComparator
(
digestArray
.
Elements
(
)
digestArray
.
Length
(
)
)
&
idx
)
)
{
MOZ_LOG
(
gPublicKeyPinningTelemetryLog
LogLevel
:
:
Debug
(
"
pkpinTelem
:
Telemetry
index
was
%
zu
bin
is
%
d
\
n
"
idx
ROOT_TABLE
[
idx
]
.
binNumber
)
)
;
return
(
int32_t
)
ROOT_TABLE
[
idx
]
.
binNumber
;
}
nsCOMPtr
<
nsINSSComponent
>
component
(
do_GetService
(
PSM_COMPONENT_CONTRACTID
)
)
;
if
(
!
component
)
{
return
ROOT_CERTIFICATE_UNKNOWN
;
}
nsTArray
<
nsTArray
<
uint8_t
>
>
enterpriseRoots
;
rv
=
component
-
>
GetEnterpriseRoots
(
enterpriseRoots
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
ROOT_CERTIFICATE_UNKNOWN
;
}
for
(
const
auto
&
enterpriseRoot
:
enterpriseRoots
)
{
if
(
enterpriseRoot
.
Length
(
)
=
=
cert
.
size
(
)
&
&
memcmp
(
enterpriseRoot
.
Elements
(
)
cert
.
data
(
)
enterpriseRoot
.
Length
(
)
)
=
=
0
)
{
return
ROOT_CERTIFICATE_ENTERPRISE_ROOT
;
}
}
SECItem
certItem
=
{
siBuffer
const_cast
<
uint8_t
*
>
(
cert
.
data
(
)
)
static_cast
<
unsigned
int
>
(
cert
.
size
(
)
)
}
;
UniquePK11SlotInfo
softokenSlot
(
PK11_GetInternalKeySlot
(
)
)
;
if
(
!
softokenSlot
)
{
return
ROOT_CERTIFICATE_UNKNOWN
;
}
CK_OBJECT_HANDLE
softokenCertHandle
=
PK11_FindEncodedCertInSlot
(
softokenSlot
.
get
(
)
&
certItem
nullptr
)
;
if
(
softokenCertHandle
!
=
CK_INVALID_HANDLE
)
{
return
ROOT_CERTIFICATE_SOFTOKEN
;
}
UniqueSECMODModule
rootsModule
(
SECMOD_FindModule
(
kRootModuleName
.
get
(
)
)
)
;
AutoSECMODListReadLock
secmodLock
;
if
(
!
rootsModule
|
|
rootsModule
-
>
slotCount
!
=
1
)
{
return
ROOT_CERTIFICATE_UNKNOWN
;
}
CK_OBJECT_HANDLE
builtinCertHandle
=
PK11_FindEncodedCertInSlot
(
rootsModule
-
>
slots
[
0
]
&
certItem
nullptr
)
;
if
(
builtinCertHandle
=
=
CK_INVALID_HANDLE
)
{
return
ROOT_CERTIFICATE_EXTERNAL_TOKEN
;
}
return
ROOT_CERTIFICATE_UNKNOWN
;
}
void
AccumulateTelemetryForRootCA
(
mozilla
:
:
Telemetry
:
:
HistogramID
probe
const
Span
<
const
uint8_t
>
cert
)
{
int32_t
binId
=
RootCABinNumber
(
cert
)
;
if
(
binId
!
=
ROOT_CERTIFICATE_HASH_FAILURE
)
{
Accumulate
(
probe
binId
)
;
}
}
}
}
