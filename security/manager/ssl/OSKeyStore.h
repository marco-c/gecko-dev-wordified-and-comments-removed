#
ifndef
OSKeyStore_h
#
define
OSKeyStore_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIOSKeyStore
.
h
"
#
include
"
nsString
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
<
memory
>
#
include
<
vector
>
class
AbstractOSKeyStore
{
public
:
virtual
nsresult
RetrieveSecret
(
const
nsACString
&
aLabel
nsACString
&
aSecret
)
=
0
;
virtual
nsresult
StoreSecret
(
const
nsACString
&
secret
const
nsACString
&
label
)
=
0
;
virtual
nsresult
DeleteSecret
(
const
nsACString
&
label
)
=
0
;
virtual
~
AbstractOSKeyStore
(
)
=
default
;
virtual
bool
SecretAvailable
(
const
nsACString
&
label
)
;
virtual
nsresult
EncryptDecrypt
(
const
nsACString
&
label
const
std
:
:
vector
<
uint8_t
>
&
inBytes
std
:
:
vector
<
uint8_t
>
&
outBytes
bool
encrypt
)
;
size_t
GetKeyByteLength
(
)
{
return
mKeyByteLength
;
}
protected
:
nsresult
DoCipher
(
const
mozilla
:
:
UniquePK11SymKey
&
aSymKey
const
std
:
:
vector
<
uint8_t
>
&
inBytes
std
:
:
vector
<
uint8_t
>
&
outBytes
bool
aEncrypt
)
;
nsresult
BuildAesGcmKey
(
std
:
:
vector
<
uint8_t
>
keyBytes
mozilla
:
:
UniquePK11SymKey
&
aKey
)
;
private
:
const
size_t
mKeyByteLength
=
16
;
const
size_t
mIVLength
=
12
;
}
;
#
define
NS_OSKEYSTORE_CONTRACTID
"
mozilla
.
org
/
security
/
oskeystore
;
1
"
#
define
NS_OSKEYSTORE_CID
\
{
\
0x57972956
0x5718
0x42d2
{
\
0x80
0x70
0xb3
0xfc
0x72
0x21
0x2e
0xaf
\
}
\
}
nsresult
GetPromise
(
JSContext
*
aCx
RefPtr
<
mozilla
:
:
dom
:
:
Promise
>
&
aPromise
)
;
class
OSKeyStore
final
:
public
nsIOSKeyStore
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOSKEYSTORE
OSKeyStore
(
)
;
nsresult
GenerateSecret
(
const
nsACString
&
aLabel
nsACString
&
aRecoveryPhrase
)
;
nsresult
SecretAvailable
(
const
nsACString
&
aLabel
bool
*
aAvailable
)
;
nsresult
RecoverSecret
(
const
nsACString
&
aLabel
const
nsACString
&
aRecoveryPhrase
)
;
nsresult
DeleteSecret
(
const
nsACString
&
aLabel
)
;
nsresult
RetrieveRecoveryPhrase
(
const
nsACString
&
aLabel
nsACString
&
aRecoveryPhrase
)
;
nsresult
EncryptBytes
(
const
nsACString
&
aLabel
const
std
:
:
vector
<
uint8_t
>
&
aInBytes
nsACString
&
aEncryptedBase64Text
)
;
nsresult
DecryptBytes
(
const
nsACString
&
aLabel
const
nsACString
&
aEncryptedBase64Text
uint32_t
*
outLen
uint8_t
*
*
outBytes
)
;
private
:
~
OSKeyStore
(
)
=
default
;
std
:
:
unique_ptr
<
AbstractOSKeyStore
>
mKs
;
}
;
#
endif
