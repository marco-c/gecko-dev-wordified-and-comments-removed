#
include
"
nsISupports
.
idl
"
interface
nsIArray
;
interface
nsIX509Cert
;
interface
nsIFile
;
interface
nsIInterfaceRequestor
;
interface
nsIZipReader
;
interface
nsIInputStream
;
%
{
C
+
+
#
define
NS_X509CERTDB_CONTRACTID
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
%
}
typedef
uint32_t
AppTrustedRoot
;
[
scriptable
builtinclass
uuid
(
e5795418
-
86e0
-
4c0b
-
9b98
-
ac7eee0c2af7
)
]
interface
nsIAppSignatureInfo
:
nsISupports
{
cenum
SignatureAlgorithm
:
32
{
PKCS7_WITH_SHA1
PKCS7_WITH_SHA256
COSE_WITH_SHA256
}
;
readonly
attribute
nsIX509Cert
signerCert
;
readonly
attribute
nsIAppSignatureInfo_SignatureAlgorithm
signatureAlgorithm
;
}
;
[
scriptable
function
uuid
(
fc2b60e5
-
9a07
-
47c2
-
a2cd
-
b83b68a660ac
)
]
interface
nsIOpenSignedAppFileCallback
:
nsISupports
{
void
openSignedAppFileFinished
(
in
nsresult
rv
in
nsIZipReader
aZipReader
in
Array
<
nsIAppSignatureInfo
>
aSignatureInfos
)
;
}
;
[
scriptable
function
uuid
(
49e16fc8
-
efac
-
4f57
-
8361
-
956ef6b960a4
)
]
interface
nsICertVerificationCallback
:
nsISupports
{
void
verifyCertFinished
(
in
int32_t
aPRErrorCode
in
Array
<
nsIX509Cert
>
aVerifiedChain
in
boolean
aHasEVPolicy
)
;
}
;
[
scriptable
uuid
(
5c16cd9b
-
5a73
-
47f1
-
ab0f
-
11ede7495cce
)
]
interface
nsIX509CertDB
:
nsISupports
{
const
unsigned
long
UNTRUSTED
=
0
;
const
unsigned
long
TRUSTED_SSL
=
1
<
<
0
;
const
unsigned
long
TRUSTED_EMAIL
=
1
<
<
1
;
[
must_use
]
nsIX509Cert
findCertByDBKey
(
in
ACString
aDBkey
)
;
void
importCertificates
(
[
array
size_is
(
length
)
]
in
octet
data
in
unsigned
long
length
in
unsigned
long
type
in
nsIInterfaceRequestor
ctx
)
;
void
importEmailCertificate
(
[
array
size_is
(
length
)
]
in
octet
data
in
unsigned
long
length
in
nsIInterfaceRequestor
ctx
)
;
void
importUserCertificate
(
[
array
size_is
(
length
)
]
in
octet
data
in
unsigned
long
length
in
nsIInterfaceRequestor
ctx
)
;
void
deleteCertificate
(
in
nsIX509Cert
aCert
)
;
[
must_use
]
void
setCertTrust
(
in
nsIX509Cert
cert
in
unsigned
long
type
in
unsigned
long
trust
)
;
[
must_use
]
void
setCertTrustFromString
(
in
nsIX509Cert
cert
in
ACString
trustString
)
;
[
must_use
]
boolean
isCertTrusted
(
in
nsIX509Cert
cert
in
unsigned
long
certType
in
unsigned
long
trustType
)
;
[
must_use
]
void
importCertsFromFile
(
in
nsIFile
aFile
in
unsigned
long
aType
)
;
const
uint32_t
Success
=
0
;
const
uint32_t
ERROR_UNKNOWN
=
1
;
const
uint32_t
ERROR_PKCS12_NOSMARTCARD_EXPORT
=
2
;
const
uint32_t
ERROR_PKCS12_RESTORE_FAILED
=
3
;
const
uint32_t
ERROR_PKCS12_BACKUP_FAILED
=
4
;
const
uint32_t
ERROR_PKCS12_CERT_COLLISION
=
5
;
const
uint32_t
ERROR_BAD_PASSWORD
=
6
;
const
uint32_t
ERROR_DECODE_ERROR
=
7
;
const
uint32_t
ERROR_PKCS12_DUPLICATE_DATA
=
8
;
[
must_use
]
uint32_t
importPKCS12File
(
in
nsIFile
aFile
in
AString
aPassword
)
;
[
must_use
]
uint32_t
exportPKCS12File
(
in
nsIFile
aFile
in
Array
<
nsIX509Cert
>
aCerts
in
AString
aPassword
)
;
[
must_use
]
nsIX509Cert
constructX509FromBase64
(
in
ACString
base64
)
;
[
must_use
]
nsIX509Cert
constructX509
(
in
Array
<
uint8_t
>
certDER
)
;
const
AppTrustedRoot
AppXPCShellRoot
=
6
;
const
AppTrustedRoot
AddonsPublicRoot
=
7
;
const
AppTrustedRoot
AddonsStageRoot
=
8
;
[
must_use
]
void
openSignedAppFileAsync
(
in
AppTrustedRoot
trustedRoot
in
nsIFile
aJarFile
in
nsIOpenSignedAppFileCallback
callback
)
;
[
must_use
]
nsIX509Cert
addCert
(
in
ACString
certDER
in
ACString
trust
)
;
const
uint32_t
FLAG_LOCAL_ONLY
=
1
<
<
0
;
const
uint32_t
FLAG_MUST_BE_EV
=
1
<
<
1
;
cenum
VerifyUsage
:
8
{
verifyUsageTLSServer
=
1
verifyUsageTLSServerCA
=
2
verifyUsageTLSClient
=
3
verifyUsageTLSClientCA
=
4
verifyUsageEmailSigner
=
5
verifyUsageEmailRecipient
=
6
verifyUsageEmailCA
=
7
}
;
[
must_use
]
void
asyncVerifyCertAtTime
(
in
nsIX509Cert
aCert
in
nsIX509CertDB_VerifyUsage
aUsage
in
uint32_t
aFlags
in
ACString
aHostname
in
uint64_t
aTime
in
Array
<
uint8_t
>
aSctsFromTls
in
nsICertVerificationCallback
aCallback
)
;
[
must_use
]
void
clearOCSPCache
(
)
;
[
must_use
]
nsIX509Cert
addCertFromBase64
(
in
ACString
base64
in
ACString
trust
)
;
[
must_use
]
Array
<
nsIX509Cert
>
getCerts
(
)
;
[
must_use
]
ACString
asPKCS7Blob
(
in
Array
<
nsIX509Cert
>
certList
)
;
[
must_use
]
nsIX509Cert
getAndroidCertificateFromAlias
(
in
AString
alias
)
;
}
;
