#
ifndef
nsPKCS12Blob_h
#
define
nsPKCS12Blob_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIMutableArray
.
h
"
#
include
"
nsString
.
h
"
#
include
"
p12
.
h
"
#
include
"
seccomon
.
h
"
class
nsIFile
;
class
nsIX509Cert
;
class
nsPKCS12Blob
{
public
:
nsPKCS12Blob
(
)
;
~
nsPKCS12Blob
(
)
{
}
nsresult
ImportFromFile
(
nsIFile
*
file
)
;
nsresult
ExportToFile
(
nsIFile
*
file
nsIX509Cert
*
*
certs
int
numCerts
)
;
private
:
nsCOMPtr
<
nsIInterfaceRequestor
>
mUIContext
;
nsresult
getPKCS12FilePassword
(
uint32_t
&
passwordBufferLength
mozilla
:
:
UniquePtr
<
uint8_t
[
]
>
&
passwordBuffer
)
;
nsresult
newPKCS12FilePassword
(
uint32_t
&
passwordBufferLength
mozilla
:
:
UniquePtr
<
uint8_t
[
]
>
&
passwordBuffer
)
;
nsresult
inputToDecoder
(
mozilla
:
:
UniqueSEC_PKCS12DecoderContext
&
dcx
nsIFile
*
file
PRErrorCode
&
nssError
)
;
mozilla
:
:
UniquePtr
<
uint8_t
[
]
>
stringToBigEndianBytes
(
const
nsString
&
uni
uint32_t
&
bytesLength
)
;
void
handleError
(
int
myerr
PRErrorCode
prerr
)
;
enum
class
RetryReason
{
DoNotRetry
BadPassword
AutoRetryEmptyPassword
}
;
enum
class
ImportMode
{
StandardPrompt
TryZeroLengthSecitem
}
;
void
handleImportError
(
PRErrorCode
nssError
RetryReason
&
retryReason
uint32_t
passwordLengthInBytes
)
;
nsresult
ImportFromFileHelper
(
nsIFile
*
file
ImportMode
aImportMode
RetryReason
&
aWantRetry
)
;
static
SECItem
*
nicknameCollision
(
SECItem
*
oldNick
PRBool
*
cancel
void
*
wincx
)
;
static
void
writeExportFile
(
void
*
arg
const
char
*
buf
unsigned
long
len
)
;
}
;
#
endif
