#
ifndef
nsPK11TokenDB_h
#
define
nsPK11TokenDB_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIPK11Token
.
h
"
#
include
"
nsIPK11TokenDB
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsNSSHelper
.
h
"
#
include
"
nsNSSShutDown
.
h
"
#
include
"
nsString
.
h
"
#
include
"
pk11func
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
class
nsPK11Token
:
public
nsIPK11Token
public
nsNSSShutDownObject
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPK11TOKEN
explicit
nsPK11Token
(
PK11SlotInfo
*
slot
)
;
protected
:
virtual
~
nsPK11Token
(
)
;
private
:
friend
class
nsPK11TokenDB
;
nsresult
refreshTokenInfo
(
)
;
nsCString
mTokenName
;
nsCString
mTokenLabel
;
nsCString
mTokenManufacturerID
;
nsCString
mTokenHWVersion
;
nsCString
mTokenFWVersion
;
nsCString
mTokenSerialNum
;
mozilla
:
:
UniquePK11SlotInfo
mSlot
;
int
mSeries
;
nsCOMPtr
<
nsIInterfaceRequestor
>
mUIContext
;
virtual
void
virtualDestroyNSSReference
(
)
override
;
void
destructorSafeDestroyNSSReference
(
)
;
nsresult
GetAttributeHelper
(
const
nsACString
&
attribute
nsACString
&
xpcomOutParam
)
;
}
;
class
nsPK11TokenDB
:
public
nsIPK11TokenDB
public
nsNSSShutDownObject
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPK11TOKENDB
nsPK11TokenDB
(
)
;
protected
:
virtual
~
nsPK11TokenDB
(
)
;
virtual
void
virtualDestroyNSSReference
(
)
override
{
}
}
;
#
define
NS_PK11TOKENDB_CID
\
{
0xb084a2ce
0x1dd1
0x11b2
\
{
0xbf
0x10
0x83
0x24
0xf8
0xe0
0x65
0xcc
}
}
#
endif
