#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
DataStorage
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsStreamUtils
.
h
"
#
include
"
prtime
.
h
"
using
namespace
mozilla
;
class
psm_DataStorageTest
:
public
:
:
testing
:
:
Test
{
protected
:
void
SetUp
(
)
override
{
const
:
:
testing
:
:
TestInfo
*
const
testInfo
=
:
:
testing
:
:
UnitTest
:
:
GetInstance
(
)
-
>
current_test_info
(
)
;
NS_ConvertUTF8toUTF16
testName
(
testInfo
-
>
name
(
)
)
;
storage
=
DataStorage
:
:
GetFromRawFileName
(
testName
)
;
storage
-
>
Init
(
nullptr
)
;
}
RefPtr
<
DataStorage
>
storage
;
}
;
constexpr
auto
testKey
=
"
test
"
_ns
;
constexpr
auto
testValue
=
"
value
"
_ns
;
constexpr
auto
privateTestValue
=
"
private
"
_ns
;
TEST_F
(
psm_DataStorageTest
GetPutRemove
)
{
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
testKey
testValue
DataStorage_Persistent
)
)
;
nsCString
result
=
storage
-
>
Get
(
"
test
"
_ns
DataStorage_Persistent
)
;
EXPECT_STREQ
(
"
value
"
result
.
get
(
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Temporary
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Private
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
constexpr
auto
temporaryTestValue
=
"
temporary
"
_ns
;
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
testKey
temporaryTestValue
DataStorage_Temporary
)
)
;
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
testKey
privateTestValue
DataStorage_Private
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Temporary
)
;
EXPECT_STREQ
(
"
temporary
"
result
.
get
(
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Private
)
;
EXPECT_STREQ
(
"
private
"
result
.
get
(
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Persistent
)
;
EXPECT_STREQ
(
"
value
"
result
.
get
(
)
)
;
constexpr
auto
newValue
=
"
new
"
_ns
;
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
testKey
newValue
DataStorage_Persistent
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Persistent
)
;
EXPECT_STREQ
(
"
new
"
result
.
get
(
)
)
;
storage
-
>
Remove
(
testKey
DataStorage_Temporary
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Temporary
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Private
)
;
EXPECT_STREQ
(
"
private
"
result
.
get
(
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Persistent
)
;
EXPECT_STREQ
(
"
new
"
result
.
get
(
)
)
;
storage
-
>
Remove
(
testKey
DataStorage_Private
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Private
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
storage
-
>
Remove
(
testKey
DataStorage_Persistent
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Persistent
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
}
TEST_F
(
psm_DataStorageTest
InputValidation
)
{
EXPECT_EQ
(
NS_ERROR_INVALID_ARG
storage
-
>
Put
(
"
key
\
thas
tab
"
_ns
testValue
DataStorage_Persistent
)
)
;
nsCString
result
=
storage
-
>
Get
(
"
key
\
thas
tab
"
_ns
DataStorage_Persistent
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
EXPECT_EQ
(
NS_ERROR_INVALID_ARG
storage
-
>
Put
(
"
key
has
\
nnewline
"
_ns
testValue
DataStorage_Persistent
)
)
;
result
=
storage
-
>
Get
(
"
keyhas
\
nnewline
"
_ns
DataStorage_Persistent
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
EXPECT_EQ
(
NS_ERROR_INVALID_ARG
storage
-
>
Put
(
testKey
"
value
\
nhas
newline
"
_ns
DataStorage_Persistent
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Persistent
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
testKey
"
val
\
thas
tab
;
this
is
ok
"
_ns
DataStorage_Persistent
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Persistent
)
;
EXPECT_STREQ
(
"
val
\
thas
tab
;
this
is
ok
"
result
.
get
(
)
)
;
nsCString
longKey
(
"
a
"
)
;
for
(
int
i
=
0
;
i
<
8
;
i
+
+
)
{
longKey
.
Append
(
longKey
)
;
}
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
longKey
testValue
DataStorage_Persistent
)
)
;
result
=
storage
-
>
Get
(
longKey
DataStorage_Persistent
)
;
EXPECT_STREQ
(
"
value
"
result
.
get
(
)
)
;
longKey
.
AppendLiteral
(
"
a
"
)
;
EXPECT_EQ
(
NS_ERROR_INVALID_ARG
storage
-
>
Put
(
longKey
testValue
DataStorage_Persistent
)
)
;
result
=
storage
-
>
Get
(
longKey
DataStorage_Persistent
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
nsCString
longValue
(
"
a
"
)
;
for
(
int
i
=
0
;
i
<
10
;
i
+
+
)
{
longValue
.
Append
(
longValue
)
;
}
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
testKey
longValue
DataStorage_Persistent
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Persistent
)
;
EXPECT_STREQ
(
longValue
.
get
(
)
result
.
get
(
)
)
;
longValue
.
AppendLiteral
(
"
a
"
)
;
storage
-
>
Remove
(
testKey
DataStorage_Persistent
)
;
EXPECT_EQ
(
NS_ERROR_INVALID_ARG
storage
-
>
Put
(
testKey
longValue
DataStorage_Persistent
)
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Persistent
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
}
TEST_F
(
psm_DataStorageTest
Eviction
)
{
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
testKey
testValue
DataStorage_Persistent
)
)
;
for
(
int
i
=
0
;
i
<
1025
;
i
+
+
)
{
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
nsPrintfCString
(
"
%
d
"
i
)
nsPrintfCString
(
"
%
d
"
i
)
DataStorage_Temporary
)
)
;
nsCString
result
=
storage
-
>
Get
(
nsPrintfCString
(
"
%
d
"
i
)
DataStorage_Temporary
)
;
EXPECT_STREQ
(
nsPrintfCString
(
"
%
d
"
i
)
.
get
(
)
result
.
get
(
)
)
;
}
int
entries
=
0
;
for
(
int
i
=
0
;
i
<
1025
;
i
+
+
)
{
nsCString
result
=
storage
-
>
Get
(
nsPrintfCString
(
"
%
d
"
i
)
DataStorage_Temporary
)
;
if
(
!
result
.
IsEmpty
(
)
)
{
entries
+
+
;
}
}
EXPECT_EQ
(
entries
1024
)
;
nsCString
result
=
storage
-
>
Get
(
testKey
DataStorage_Persistent
)
;
EXPECT_STREQ
(
"
value
"
result
.
get
(
)
)
;
}
TEST_F
(
psm_DataStorageTest
ClearPrivateData
)
{
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
testKey
privateTestValue
DataStorage_Private
)
)
;
nsCString
result
=
storage
-
>
Get
(
testKey
DataStorage_Private
)
;
EXPECT_STREQ
(
"
private
"
result
.
get
(
)
)
;
storage
-
>
Observe
(
nullptr
"
last
-
pb
-
context
-
exited
"
nullptr
)
;
result
=
storage
-
>
Get
(
testKey
DataStorage_Private
)
;
EXPECT_TRUE
(
result
.
IsEmpty
(
)
)
;
}
TEST_F
(
psm_DataStorageTest
Shutdown
)
{
EXPECT_EQ
(
NS_OK
storage
-
>
Put
(
testKey
testValue
DataStorage_Persistent
)
)
;
nsCString
result
=
storage
-
>
Get
(
testKey
DataStorage_Persistent
)
;
EXPECT_STREQ
(
"
value
"
result
.
get
(
)
)
;
int64_t
microsecondsPerDay
=
24
*
60
*
60
*
int64_t
(
PR_USEC_PER_SEC
)
;
int32_t
nowInDays
=
int32_t
(
PR_Now
(
)
/
microsecondsPerDay
)
;
storage
-
>
Observe
(
nullptr
"
profile
-
before
-
change
"
nullptr
)
;
nsCOMPtr
<
nsIFile
>
backingFile
;
EXPECT_EQ
(
NS_OK
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_50_DIR
getter_AddRefs
(
backingFile
)
)
)
;
const
:
:
testing
:
:
TestInfo
*
const
testInfo
=
:
:
testing
:
:
UnitTest
:
:
GetInstance
(
)
-
>
current_test_info
(
)
;
NS_ConvertUTF8toUTF16
testName
(
testInfo
-
>
name
(
)
)
;
EXPECT_EQ
(
NS_OK
backingFile
-
>
Append
(
testName
)
)
;
nsCOMPtr
<
nsIInputStream
>
fileInputStream
;
EXPECT_EQ
(
NS_OK
NS_NewLocalFileInputStream
(
getter_AddRefs
(
fileInputStream
)
backingFile
)
)
;
nsCString
data
;
EXPECT_EQ
(
NS_OK
NS_ConsumeStream
(
fileInputStream
UINT32_MAX
data
)
)
;
EXPECT_STREQ
(
nsPrintfCString
(
"
test
\
t0
\
t
%
d
\
tvalue
\
n
"
nowInDays
)
.
get
(
)
data
.
get
(
)
)
;
}
