"
use
strict
"
;
var
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
var
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
add_task
(
async
function
testCAandTitle
(
)
{
let
cert
=
await
readCertificate
(
"
ca
.
pem
"
"
CTu
CTu
CTu
"
)
;
let
url
=
getURL
(
cert
)
;
await
openCertViewerAndCheckTabName
(
url
"
ca
"
)
;
}
)
;
add_task
(
async
function
testSSLEndEntity
(
)
{
let
cert
=
await
readCertificate
(
"
ssl
-
ee
.
pem
"
"
"
)
;
let
url
=
getURL
(
cert
)
;
await
openCertViewerAndCheckTabName
(
url
"
ssl
-
ee
"
)
;
}
)
;
add_task
(
async
function
testEmailEndEntity
(
)
{
let
cert
=
await
readCertificate
(
"
email
-
ee
.
pem
"
"
"
)
;
let
url
=
getURL
(
cert
)
;
await
openCertViewerAndCheckTabName
(
url
"
email
-
ee
"
)
;
}
)
;
add_task
(
async
function
testCodeSignEndEntity
(
)
{
let
cert
=
await
readCertificate
(
"
code
-
ee
.
pem
"
"
"
)
;
let
url
=
getURL
(
cert
)
;
await
openCertViewerAndCheckTabName
(
url
"
code
-
ee
"
)
;
}
)
;
add_task
(
async
function
testExpired
(
)
{
let
cert
=
await
readCertificate
(
"
expired
-
ca
.
pem
"
"
"
)
;
let
url
=
getURL
(
cert
)
;
await
openCertViewerAndCheckTabName
(
url
"
expired
-
ca
"
)
;
}
)
;
add_task
(
async
function
testUntrusted
(
)
{
let
cert
=
await
readCertificate
(
"
untrusted
-
ca
.
pem
"
"
p
p
p
"
)
;
let
url
=
getURL
(
cert
)
;
await
openCertViewerAndCheckTabName
(
url
"
untrusted
-
ca
"
)
;
}
)
;
add_task
(
async
function
testInvalid
(
)
{
let
cert
=
await
readCertificate
(
"
invalid
.
pem
"
"
"
)
;
let
url
=
getURL
(
cert
)
;
await
openCertViewerAndCheckTabName
(
url
"
invalid
"
)
;
}
)
;
add_task
(
async
function
testLongOID
(
)
{
let
cert
=
await
readCertificate
(
"
longOID
.
pem
"
"
"
)
;
let
url
=
getURL
(
cert
)
;
await
openCertViewerAndCheckTabName
(
url
"
Long
OID
"
)
;
}
)
;
function
getURL
(
cert
)
{
let
derb64
=
encodeURIComponent
(
cert
.
getBase64DERString
(
)
)
;
return
about
:
certificate
?
cert
=
{
derb64
}
;
}
async
function
openCertViewerAndCheckTabName
(
url
expectedTabName
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
function
(
browser
)
{
await
SpecialPowers
.
spawn
(
browser
[
expectedTabName
]
async
function
(
expectedTabName
)
{
let
certificateSection
=
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
content
.
document
.
querySelector
(
"
certificate
-
section
"
)
;
}
"
Certificate
section
found
"
)
;
let
tabName
=
certificateSection
.
shadowRoot
.
querySelector
(
"
.
tab
[
idnumber
=
'
0
'
]
"
)
.
textContent
;
Assert
.
equal
(
tabName
expectedTabName
)
;
}
)
;
}
)
;
}
