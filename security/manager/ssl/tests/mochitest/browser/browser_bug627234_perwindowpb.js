"
use
strict
"
;
function
whenNewWindowLoaded
(
aOptions
aCallback
)
{
let
win
=
OpenBrowserWindow
(
aOptions
)
;
win
.
addEventListener
(
"
load
"
function
(
)
{
aCallback
(
win
)
;
}
{
once
:
true
}
)
;
}
function
test
(
)
{
waitForExplicitFinish
(
)
;
let
windowsToClose
=
[
]
;
let
testURI
=
"
about
:
blank
"
;
let
uri
;
let
gSSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
function
privacyFlags
(
aIsPrivateMode
)
{
return
aIsPrivateMode
?
Ci
.
nsISocketProvider
.
NO_PERMANENT_STORAGE
:
0
;
}
function
doTest
(
aIsPrivateMode
aWindow
aCallback
)
{
BrowserTestUtils
.
browserLoaded
(
aWindow
.
gBrowser
.
selectedBrowser
)
.
then
(
(
)
=
>
{
let
secInfo
=
Cc
[
"
mozilla
.
org
/
security
/
transportsecurityinfo
;
1
"
]
.
createInstance
(
Ci
.
nsITransportSecurityInfo
)
;
uri
=
aWindow
.
Services
.
io
.
newURI
(
"
https
:
/
/
localhost
/
img
.
png
"
)
;
gSSService
.
processHeader
(
uri
"
max
-
age
=
1000
"
secInfo
privacyFlags
(
aIsPrivateMode
)
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
ok
(
gSSService
.
isSecureURI
(
uri
privacyFlags
(
aIsPrivateMode
)
)
"
checking
sts
host
"
)
;
aCallback
(
)
;
}
)
;
BrowserTestUtils
.
loadURI
(
aWindow
.
gBrowser
.
selectedBrowser
testURI
)
;
}
function
testOnWindow
(
aOptions
aCallback
)
{
whenNewWindowLoaded
(
aOptions
function
(
aWin
)
{
windowsToClose
.
push
(
aWin
)
;
executeSoon
(
function
(
)
{
aCallback
(
aWin
)
;
}
)
;
}
)
;
}
registerCleanupFunction
(
function
(
)
{
windowsToClose
.
forEach
(
function
(
aWin
)
{
aWin
.
close
(
)
;
}
)
;
uri
=
Services
.
io
.
newURI
(
"
http
:
/
/
localhost
"
)
;
gSSService
.
resetState
(
uri
0
)
;
}
)
;
testOnWindow
(
{
private
:
true
}
function
(
aWin
)
{
doTest
(
true
aWin
function
(
)
{
testOnWindow
(
{
}
function
(
aWin
)
{
doTest
(
false
aWin
function
(
)
{
testOnWindow
(
{
private
:
true
}
function
(
aWin
)
{
doTest
(
true
aWin
function
(
)
{
finish
(
)
;
}
)
;
}
)
;
}
)
;
}
)
;
}
)
;
}
)
;
}
