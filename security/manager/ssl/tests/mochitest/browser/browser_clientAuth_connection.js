"
use
strict
"
;
const
{
MockRegistrar
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
jsm
"
)
;
const
DialogState
=
{
ASSERT_NOT_CALLED
:
"
ASSERT_NOT_CALLED
"
RETURN_CERT_SELECTED
:
"
RETURN_CERT_SELECTED
"
RETURN_CERT_NOT_SELECTED
:
"
RETURN_CERT_NOT_SELECTED
"
}
;
let
sdr
=
Cc
[
"
mozilla
.
org
/
security
/
sdr
;
1
"
]
.
getService
(
Ci
.
nsISecretDecoderRing
)
;
const
gClientAuthDialogs
=
{
_state
:
DialogState
.
ASSERT_NOT_CALLED
set
state
(
newState
)
{
info
(
old
state
:
{
this
.
_state
}
)
;
this
.
_state
=
newState
;
info
(
new
state
:
{
this
.
_state
}
)
;
}
get
state
(
)
{
return
this
.
_state
;
}
chooseCertificate
(
ctx
hostname
port
organization
issuerOrg
certList
selectedIndex
)
{
Assert
.
notEqual
(
this
.
state
DialogState
.
ASSERT_NOT_CALLED
"
chooseCertificate
(
)
should
be
called
only
when
expected
"
)
;
let
caud
=
ctx
.
QueryInterface
(
Ci
.
nsIClientAuthUserDecision
)
;
Assert
.
notEqual
(
caud
null
"
nsIClientAuthUserDecision
should
be
queryable
from
the
"
+
"
given
context
"
)
;
caud
.
rememberClientAuthCertificate
=
false
;
Assert
.
equal
(
hostname
"
requireclientcert
.
example
.
com
"
"
Hostname
should
be
'
requireclientcert
.
example
.
com
'
"
)
;
Assert
.
equal
(
port
443
"
Port
should
be
443
"
)
;
Assert
.
equal
(
organization
"
"
"
Server
cert
Organization
should
be
empty
/
not
present
"
)
;
Assert
.
equal
(
issuerOrg
"
Mozilla
Testing
"
"
Server
cert
issuer
Organization
should
be
'
Mozilla
Testing
'
"
)
;
Assert
.
notEqual
(
certList
null
"
Cert
list
should
not
be
null
"
)
;
Assert
.
equal
(
certList
.
length
1
"
Only
1
certificate
should
be
available
"
)
;
let
cert
=
certList
.
queryElementAt
(
0
Ci
.
nsIX509Cert
)
;
Assert
.
notEqual
(
cert
null
"
Cert
list
should
contain
an
nsIX509Cert
"
)
;
Assert
.
equal
(
cert
.
commonName
"
Mochitest
client
"
"
Cert
CN
should
be
'
Mochitest
client
'
"
)
;
if
(
this
.
state
=
=
DialogState
.
RETURN_CERT_SELECTED
)
{
selectedIndex
.
value
=
0
;
return
true
;
}
return
false
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIClientAuthDialogs
]
)
}
;
add_task
(
async
function
setup
(
)
{
let
clientAuthDialogsCID
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
nsClientAuthDialogs
;
1
"
gClientAuthDialogs
)
;
registerCleanupFunction
(
(
)
=
>
{
MockRegistrar
.
unregister
(
clientAuthDialogsCID
)
;
}
)
;
}
)
;
async
function
testHelper
(
prefValue
expectedURL
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
security
.
default_personal_cert
"
prefValue
]
]
}
)
;
await
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
"
https
:
/
/
requireclientcert
.
example
.
com
:
443
"
)
;
let
loadedURL
=
await
Promise
.
race
(
[
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
BrowserTestUtils
.
waitForErrorPage
(
gBrowser
.
selectedBrowser
)
]
)
;
Assert
.
equal
(
expectedURL
loadedURL
"
Expected
and
actual
URLs
should
match
"
)
;
sdr
.
logoutAndTeardown
(
)
;
}
add_task
(
async
function
testCertChosenAutomatically
(
)
{
gClientAuthDialogs
.
state
=
DialogState
.
ASSERT_NOT_CALLED
;
await
testHelper
(
"
Select
Automatically
"
"
https
:
/
/
requireclientcert
.
example
.
com
/
"
)
;
}
)
;
add_task
(
async
function
testCertNotChosenByUser
(
)
{
gClientAuthDialogs
.
state
=
DialogState
.
RETURN_CERT_NOT_SELECTED
;
await
testHelper
(
"
Ask
Every
Time
"
undefined
)
;
}
)
;
add_task
(
async
function
testCertChosenByUser
(
)
{
gClientAuthDialogs
.
state
=
DialogState
.
RETURN_CERT_SELECTED
;
await
testHelper
(
"
Ask
Every
Time
"
"
https
:
/
/
requireclientcert
.
example
.
com
/
"
)
;
}
)
;
