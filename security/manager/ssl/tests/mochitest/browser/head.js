"
use
strict
"
;
var
gCertDB
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
var
gImportedCerts
=
[
]
;
registerCleanupFunction
(
(
)
=
>
{
for
(
let
cert
of
gImportedCerts
)
{
gCertDB
.
deleteCertificate
(
cert
)
;
}
}
)
;
function
pemToBase64
(
pem
)
{
return
pem
.
replace
(
/
-
-
-
-
-
BEGIN
CERTIFICATE
-
-
-
-
-
/
"
"
)
.
replace
(
/
-
-
-
-
-
END
CERTIFICATE
-
-
-
-
-
/
"
"
)
.
replace
(
/
[
\
r
\
n
]
/
g
"
"
)
;
}
function
readCertificate
(
filename
trustString
)
{
return
IOUtils
.
readUTF8
(
getTestFilePath
(
filename
)
)
.
then
(
pem
=
>
{
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
let
base64
=
pemToBase64
(
pem
)
;
certdb
.
addCertFromBase64
(
base64
trustString
)
;
let
cert
=
certdb
.
constructX509FromBase64
(
base64
)
;
gImportedCerts
.
push
(
cert
)
;
return
cert
;
}
error
=
>
{
throw
error
;
}
)
;
}
async
function
openCertManager
(
)
{
let
win
=
window
.
openDialog
(
"
chrome
:
/
/
pippki
/
content
/
certManager
.
xhtml
"
)
;
return
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
load
"
function
(
)
{
executeSoon
(
(
)
=
>
resolve
(
win
)
)
;
}
{
once
:
true
}
)
;
}
)
;
}
