"
use
strict
"
;
const
TEST_CASES
=
[
{
name
:
"
empty
"
password1
:
"
"
password2
:
"
"
strength
:
"
0
"
}
{
name
:
"
match
-
weak
"
password1
:
"
foo
"
password2
:
"
foo
"
strength
:
"
10
"
}
{
name
:
"
match
-
medium
"
password1
:
"
foo123
"
password2
:
"
foo123
"
strength
:
"
60
"
}
{
name
:
"
match
-
strong
"
password1
:
"
fooBARBAZ
1234567890
~
!
#
%
^
&
*
(
)
-
_
=
+
{
[
}
]
|
\
\
:
;
'
\
"
<
.
>
/
?
"
password2
:
"
fooBARBAZ
1234567890
~
!
#
%
^
&
*
(
)
-
_
=
+
{
[
}
]
|
\
\
:
;
'
\
"
<
.
>
/
?
"
strength
:
"
100
"
}
{
name
:
"
mismatch
-
weak
"
password1
:
"
foo
"
password2
:
"
bar
"
strength
:
"
10
"
}
{
name
:
"
mismatch
-
medium
"
password1
:
"
foo123
"
password2
:
"
bar
"
strength
:
"
60
"
}
{
name
:
"
mismatch
-
strong
"
password1
:
"
fooBARBAZ
1234567890
~
!
#
%
^
&
*
(
)
-
_
=
+
{
[
}
]
|
\
\
:
;
'
\
"
<
.
>
/
?
"
password2
:
"
bar
"
strength
:
"
100
"
}
]
;
function
openSetP12PasswordDialog
(
)
{
let
returnVals
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag2
)
;
let
win
=
window
.
openDialog
(
"
chrome
:
/
/
pippki
/
content
/
setp12password
.
xul
"
"
"
"
"
returnVals
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
win
.
addEventListener
(
"
load
"
function
onLoad
(
)
{
win
.
removeEventListener
(
"
load
"
onLoad
)
;
resolve
(
[
win
returnVals
]
)
;
}
)
;
}
)
;
}
add_task
(
function
*
testFocus
(
)
{
let
[
win
retVals
]
=
yield
openSetP12PasswordDialog
(
)
;
Assert
.
equal
(
win
.
document
.
activeElement
win
.
document
.
getElementById
(
"
pw1
"
)
.
inputField
"
First
password
textbox
should
have
focus
"
)
;
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
function
*
testPasswordStrengthAndEquality
(
)
{
let
[
win
retVals
]
=
yield
openSetP12PasswordDialog
(
)
;
let
password1Textbox
=
win
.
document
.
getElementById
(
"
pw1
"
)
;
let
password2Textbox
=
win
.
document
.
getElementById
(
"
pw2
"
)
;
let
strengthProgressBar
=
win
.
document
.
getElementById
(
"
pwmeter
"
)
;
for
(
let
testCase
of
TEST_CASES
)
{
password1Textbox
.
value
=
testCase
.
password1
;
password2Textbox
.
value
=
testCase
.
password2
;
password1Textbox
.
oninput
(
)
;
password2Textbox
.
oninput
(
)
;
Assert
.
equal
(
win
.
document
.
documentElement
.
getButton
(
"
accept
"
)
.
disabled
password1Textbox
.
value
!
=
password2Textbox
.
value
"
Actual
and
expected
accept
button
disable
state
should
"
+
match
for
{
testCase
.
name
}
)
;
Assert
.
equal
(
strengthProgressBar
.
value
testCase
.
strength
"
Actual
and
expected
strength
value
should
match
for
"
+
{
testCase
.
name
}
)
;
}
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
function
*
testAcceptDialogReturnValues
(
)
{
let
[
win
retVals
]
=
yield
openSetP12PasswordDialog
(
)
;
const
password
=
"
fooBAR
1234567890
~
!
#
%
^
&
*
(
)
-
_
=
+
{
[
}
]
|
\
\
:
;
'
\
"
<
.
>
/
?
"
;
win
.
document
.
getElementById
(
"
pw1
"
)
.
value
=
password
;
win
.
document
.
getElementById
(
"
pw2
"
)
.
value
=
password
;
info
(
"
Accepting
dialog
"
)
;
win
.
document
.
getElementById
(
"
setp12password
"
)
.
acceptDialog
(
)
;
yield
BrowserTestUtils
.
windowClosed
(
win
)
;
Assert
.
ok
(
retVals
.
get
(
"
confirmedPassword
"
)
"
Return
value
should
signal
user
confirmed
a
password
"
)
;
Assert
.
equal
(
retVals
.
get
(
"
password
"
)
password
"
Actual
and
expected
password
should
match
"
)
;
}
)
;
add_task
(
function
*
testCancelDialogReturnValues
(
)
{
let
[
win
retVals
]
=
yield
openSetP12PasswordDialog
(
)
;
info
(
"
Canceling
dialog
"
)
;
win
.
document
.
getElementById
(
"
setp12password
"
)
.
cancelDialog
(
)
;
yield
BrowserTestUtils
.
windowClosed
(
win
)
;
Assert
.
ok
(
!
retVals
.
get
(
"
confirmedPassword
"
)
"
Return
value
should
signal
user
didn
'
t
confirm
a
password
"
)
;
}
)
;
