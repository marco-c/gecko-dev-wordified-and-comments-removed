"
use
strict
"
;
add_setup
(
async
function
register_cleanup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
test
.
wait300msAfterTabSwitch
"
true
]
]
}
)
;
registerCleanupFunction
(
(
)
=
>
{
let
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
sss
.
clearAll
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_no_hsts_information_no_upgrade
(
)
{
let
httpUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
httpUrl
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
http
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
see_hsts_header
(
)
{
let
setHstsUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
hsts_headers
.
sjs
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
setHstsUrl
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
test_http_upgrade
(
)
{
let
httpUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
httpUrl
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
https
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
test_unrelated_domain_no_upgrade
(
)
{
let
differentHttpUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
org
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
differentHttpUrl
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
http
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
test_private_window_no_upgrade
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_first_pbm
"
false
]
]
}
)
;
let
privateWindow
=
OpenBrowserWindow
(
{
private
:
true
}
)
;
await
BrowserTestUtils
.
firstBrowserLoaded
(
privateWindow
false
)
;
let
url
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
privateWindow
.
gBrowser
url
)
;
Assert
.
equal
(
privateWindow
.
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
http
"
)
;
privateWindow
.
gBrowser
.
removeCurrentTab
(
)
;
privateWindow
.
close
(
)
;
}
)
;
add_task
(
async
function
test_subdomain_no_upgrade
(
)
{
let
subdomainHttpUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
test1
.
example
.
com
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
subdomainHttpUrl
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
http
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
see_hsts_header_include_subdomains
(
)
{
let
setHstsUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
hsts_headers
.
sjs
?
includeSubdomains
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
setHstsUrl
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
test_subdomain_upgrade
(
)
{
let
subdomainHttpUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
test1
.
example
.
com
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
subdomainHttpUrl
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
https
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
test_already_https
(
)
{
let
subdomainHttpsUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
test2
.
example
.
com
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
subdomainHttpsUrl
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
https
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
test_iframe_upgrade
(
)
{
let
framedUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
some_content_framed
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
framedUrl
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
let
frame
=
content
.
document
.
getElementById
(
"
frame
"
)
;
if
(
frame
)
{
return
frame
.
baseURI
.
startsWith
(
"
https
:
/
/
"
)
;
}
return
false
;
}
)
;
}
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
clear_hsts_state
(
)
{
let
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
sss
.
clearAll
(
)
;
}
)
;
add_task
(
async
function
test_no_hsts_information_no_upgrade_again
(
)
{
let
httpUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
httpUrl
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
http
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
see_hsts_header_in_framed_first_party_context
(
)
{
let
framedUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
hsts_headers_framed
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
framedUrl
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
content
.
document
.
getElementById
(
"
done
"
)
;
}
)
;
}
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
test_http_upgrade_after_framed_first_party_header
(
)
{
let
httpUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
httpUrl
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
https
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
see_hsts_header_in_third_party_context
(
)
{
let
framedUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
hsts_headers_framed
.
html
?
third
-
party
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
framedUrl
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
content
.
document
.
getElementById
(
"
done
"
)
;
}
)
;
}
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
test_no_upgrade_for_third_party_header
(
)
{
let
url
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
org
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
http
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
clear_hsts_state_again
(
)
{
let
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
sss
.
clearAll
(
)
;
}
)
;
add_task
(
async
function
test_no_upgrade_for_HSTS_information_from_private_window
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_first_pbm
"
false
]
]
}
)
;
let
privateWindow
=
OpenBrowserWindow
(
{
private
:
true
}
)
;
await
BrowserTestUtils
.
firstBrowserLoaded
(
privateWindow
false
)
;
let
setHstsUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
hsts_headers
.
sjs
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
privateWindow
.
gBrowser
setHstsUrl
)
;
privateWindow
.
gBrowser
.
removeCurrentTab
(
)
;
let
httpUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
some_content
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
httpUrl
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
"
http
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
privateWindow
.
close
(
)
;
}
)
;
