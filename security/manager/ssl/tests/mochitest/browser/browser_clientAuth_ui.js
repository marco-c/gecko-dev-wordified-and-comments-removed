"
use
strict
"
;
const
TEST_HOSTNAME
=
"
Test
Hostname
"
;
const
TEST_ORG
=
"
Test
Org
"
;
const
TEST_ISSUER_ORG
=
"
Test
Issuer
Org
"
;
const
TEST_PORT
=
123
;
var
certDB
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
var
cert
;
function
openClientAuthDialog
(
cert
)
{
let
certList
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
certList
.
appendElement
(
cert
)
;
let
returnVals
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag2
)
;
let
win
=
window
.
openDialog
(
"
chrome
:
/
/
pippki
/
content
/
clientauthask
.
xul
"
"
"
"
"
TEST_HOSTNAME
TEST_ORG
TEST_ISSUER_ORG
TEST_PORT
certList
returnVals
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
win
.
addEventListener
(
"
load
"
function
(
)
{
executeSoon
(
(
)
=
>
resolve
(
[
win
returnVals
]
)
)
;
}
{
once
:
true
}
)
;
}
)
;
}
function
checkDialogContents
(
win
notBefore
notAfter
)
{
is
(
win
.
document
.
getElementById
(
"
hostname
"
)
.
textContent
{
TEST_HOSTNAME
}
:
{
TEST_PORT
}
"
Actual
and
expected
hostname
and
port
should
be
equal
"
)
;
is
(
win
.
document
.
getElementById
(
"
organization
"
)
.
textContent
Organization
:
{
TEST_ORG
}
"
Actual
and
expected
organization
should
be
equal
"
)
;
is
(
win
.
document
.
getElementById
(
"
issuer
"
)
.
textContent
Issued
Under
:
{
TEST_ISSUER_ORG
}
"
Actual
and
expected
issuer
organization
should
be
equal
"
)
;
is
(
win
.
document
.
getElementById
(
"
nicknames
"
)
.
label
"
Mochitest
client
[
03
]
"
"
Actual
and
expected
selected
cert
nickname
and
serial
should
be
equal
"
)
;
is
(
win
.
document
.
getElementById
(
"
nicknames
"
)
.
itemCount
1
"
correct
number
of
items
"
)
;
let
[
subject
serialNum
validity
issuer
tokenName
]
=
win
.
document
.
getElementById
(
"
details
"
)
.
value
.
split
(
"
\
n
"
)
;
is
(
subject
"
Issued
to
:
CN
=
Mochitest
client
"
"
Actual
and
expected
subject
should
be
equal
"
)
;
is
(
serialNum
"
Serial
number
:
03
"
"
Actual
and
expected
serial
number
should
be
equal
"
)
;
is
(
validity
Valid
from
{
notBefore
}
to
{
notAfter
}
"
Actual
and
expected
validity
should
be
equal
"
)
;
is
(
issuer
"
Issued
by
:
OU
=
Profile
Guided
Optimization
O
=
Mozilla
Testing
CN
=
Temporary
Certificate
Authority
"
"
Actual
and
expected
issuer
should
be
equal
"
)
;
is
(
tokenName
"
Stored
on
:
Software
Security
Device
"
"
Actual
and
expected
token
name
should
be
equal
"
)
;
}
function
findCertByCommonName
(
commonName
)
{
for
(
let
cert
of
certDB
.
getCerts
(
)
.
getEnumerator
(
)
)
{
if
(
cert
.
commonName
=
=
commonName
)
{
return
cert
;
}
}
return
null
;
}
add_task
(
async
function
setup
(
)
{
cert
=
findCertByCommonName
(
"
Mochitest
client
"
)
;
isnot
(
cert
null
"
Should
be
able
to
find
the
test
client
cert
"
)
;
}
)
;
add_task
(
async
function
testContents
(
)
{
let
[
win
]
=
await
openClientAuthDialog
(
cert
)
;
checkDialogContents
(
win
cert
.
validity
.
notBeforeLocalTime
cert
.
validity
.
notAfterLocalTime
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
testAcceptDialogReturnValues
(
)
{
let
[
win
retVals
]
=
await
openClientAuthDialog
(
cert
)
;
win
.
document
.
getElementById
(
"
rememberBox
"
)
.
checked
=
true
;
info
(
"
Accepting
dialog
"
)
;
win
.
document
.
getElementById
(
"
certAuthAsk
"
)
.
acceptDialog
(
)
;
await
BrowserTestUtils
.
windowClosed
(
win
)
;
ok
(
retVals
.
get
(
"
certChosen
"
)
"
Return
value
should
signal
user
chose
a
certificate
"
)
;
is
(
retVals
.
get
(
"
selectedIndex
"
)
0
"
0
should
be
returned
as
the
selected
index
"
)
;
ok
(
retVals
.
get
(
"
rememberSelection
"
)
"
Return
value
should
signal
'
Remember
this
decision
'
checkbox
was
checked
"
)
;
}
)
;
add_task
(
async
function
testCancelDialogReturnValues
(
)
{
let
[
win
retVals
]
=
await
openClientAuthDialog
(
cert
)
;
win
.
document
.
getElementById
(
"
rememberBox
"
)
.
checked
=
false
;
info
(
"
Canceling
dialog
"
)
;
win
.
document
.
getElementById
(
"
certAuthAsk
"
)
.
cancelDialog
(
)
;
await
BrowserTestUtils
.
windowClosed
(
win
)
;
ok
(
!
retVals
.
get
(
"
certChosen
"
)
"
Return
value
should
signal
user
did
not
choose
a
certificate
"
)
;
ok
(
!
retVals
.
get
(
"
rememberSelection
"
)
"
Return
value
should
signal
'
Remember
this
decision
'
checkbox
was
unchecked
"
)
;
}
)
;
