"
use
strict
"
;
var
gCertArray
=
[
]
;
const
FAKE_HOST_PORT
=
"
Fake
host
and
port
"
;
const
TEST_CASES
=
[
{
certFilename
:
null
expectedDisplayString
:
FAKE_HOST_PORT
expectedSerialNumber
:
null
}
{
certFilename
:
"
has
-
cn
.
pem
"
expectedDisplayString
:
"
Foo
"
expectedSerialNumber
:
null
}
{
certFilename
:
"
has
-
ou
.
pem
"
expectedDisplayString
:
"
Bar
"
expectedSerialNumber
:
null
}
{
certFilename
:
"
has
-
o
.
pem
"
expectedDisplayString
:
"
Baz
"
expectedSerialNumber
:
null
}
{
certFilename
:
"
has
-
non
-
empty
-
subject
.
pem
"
expectedDisplayString
:
"
C
=
US
"
expectedSerialNumber
:
null
}
{
certFilename
:
"
has
-
empty
-
subject
.
pem
"
expectedDisplayString
:
"
Certificate
with
serial
number
:
0A
"
expectedSerialNumber
:
"
0A
"
}
]
;
function
openDeleteCertConfirmDialog
(
tabID
)
{
let
retVals
=
{
deleteConfirmed
:
false
}
;
let
win
=
window
.
openDialog
(
"
chrome
:
/
/
pippki
/
content
/
deletecert
.
xhtml
"
"
"
"
"
tabID
gCertArray
retVals
)
;
return
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
load
"
function
(
)
{
executeSoon
(
(
)
=
>
resolve
(
[
win
retVals
]
)
)
;
}
{
once
:
true
}
)
;
}
)
;
}
add_setup
(
async
function
(
)
{
for
(
let
testCase
of
TEST_CASES
)
{
let
cert
=
null
;
if
(
testCase
.
certFilename
)
{
cert
=
await
readCertificate
(
testCase
.
certFilename
"
"
)
;
}
let
certTreeItem
=
{
hostPort
:
FAKE_HOST_PORT
cert
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsICertTreeItem
"
]
)
}
;
gCertArray
.
push
(
certTreeItem
)
;
}
}
)
;
async
function
testHelper
(
tabID
expectedTitleL10nId
expectedConfirmL10nId
expectedImpactL10nId
)
{
let
[
win
]
=
await
openDeleteCertConfirmDialog
(
tabID
)
;
let
certList
=
win
.
document
.
getElementById
(
"
certlist
"
)
;
Assert
.
deepEqual
(
win
.
document
.
l10n
.
getAttributes
(
win
.
document
.
documentElement
)
expectedTitleL10nId
Actual
and
expected
titles
should
match
for
{
tabID
}
)
;
let
confirm
=
win
.
document
.
getElementById
(
"
confirm
"
)
;
Assert
.
deepEqual
(
win
.
document
.
l10n
.
getAttributes
(
confirm
)
expectedConfirmL10nId
Actual
and
expected
confirm
message
should
match
for
{
tabID
}
)
;
let
impact
=
win
.
document
.
getElementById
(
"
impact
"
)
;
Assert
.
deepEqual
(
win
.
document
.
l10n
.
getAttributes
(
impact
)
expectedImpactL10nId
Actual
and
expected
impact
should
match
for
{
tabID
}
)
;
Assert
.
equal
(
certList
.
itemCount
TEST_CASES
.
length
No
.
of
certs
displayed
should
match
for
{
tabID
}
)
;
for
(
let
i
=
0
;
i
<
certList
.
itemCount
;
i
+
+
)
{
let
item
=
certList
.
getItemAtIndex
(
i
)
;
if
(
TEST_CASES
[
i
]
.
expectedSerialNumber
=
=
null
)
{
Assert
.
equal
(
item
.
label
TEST_CASES
[
i
]
.
expectedDisplayString
"
Actual
and
expected
display
string
should
match
for
"
+
index
{
i
}
for
{
tabID
}
)
;
}
else
{
Assert
.
deepEqual
(
win
.
document
.
l10n
.
getAttributes
(
item
.
children
[
0
]
)
{
id
:
"
cert
-
with
-
serial
"
args
:
{
serialNumber
:
TEST_CASES
[
i
]
.
expectedSerialNumber
}
}
"
Actual
and
expected
display
string
should
match
for
"
+
index
{
i
}
for
{
tabID
}
)
;
}
}
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
add_task
(
async
function
testDeletePersonalCerts
(
)
{
const
expectedTitleL10nId
=
{
id
:
"
delete
-
user
-
cert
-
title
"
args
:
null
}
;
const
expectedConfirmL10nId
=
{
id
:
"
delete
-
user
-
cert
-
confirm
"
args
:
null
}
;
const
expectedImpactL10nId
=
{
id
:
"
delete
-
user
-
cert
-
impact
"
args
:
null
}
;
await
testHelper
(
"
mine_tab
"
expectedTitleL10nId
expectedConfirmL10nId
expectedImpactL10nId
)
;
}
)
;
add_task
(
async
function
testDeleteOtherPeopleCerts
(
)
{
const
expectedTitleL10nId
=
{
id
:
"
delete
-
email
-
cert
-
title
"
args
:
null
}
;
const
expectedConfirmL10nId
=
{
id
:
"
delete
-
email
-
cert
-
confirm
"
args
:
null
}
;
const
expectedImpactL10nId
=
{
id
:
"
delete
-
email
-
cert
-
impact
"
args
:
null
}
;
await
testHelper
(
"
others_tab
"
expectedTitleL10nId
expectedConfirmL10nId
expectedImpactL10nId
)
;
}
)
;
add_task
(
async
function
testDeleteCACerts
(
)
{
const
expectedTitleL10nId
=
{
id
:
"
delete
-
ca
-
cert
-
title
"
args
:
null
}
;
const
expectedConfirmL10nId
=
{
id
:
"
delete
-
ca
-
cert
-
confirm
"
args
:
null
}
;
const
expectedImpactL10nId
=
{
id
:
"
delete
-
ca
-
cert
-
impact
"
args
:
null
}
;
await
testHelper
(
"
ca_tab
"
expectedTitleL10nId
expectedConfirmL10nId
expectedImpactL10nId
)
;
}
)
;
add_task
(
async
function
testAcceptDialogReturnValues
(
)
{
let
[
win
retVals
]
=
await
openDeleteCertConfirmDialog
(
"
ca_tab
"
)
;
info
(
"
Accepting
dialog
"
)
;
win
.
document
.
getElementById
(
"
deleteCertificate
"
)
.
acceptDialog
(
)
;
await
BrowserTestUtils
.
windowClosed
(
win
)
;
Assert
.
ok
(
retVals
.
deleteConfirmed
"
Return
value
should
signal
user
accepted
"
)
;
}
)
;
add_task
(
async
function
testCancelDialogReturnValues
(
)
{
let
[
win
retVals
]
=
await
openDeleteCertConfirmDialog
(
"
ca_tab
"
)
;
info
(
"
Canceling
dialog
"
)
;
win
.
document
.
getElementById
(
"
deleteCertificate
"
)
.
cancelDialog
(
)
;
await
BrowserTestUtils
.
windowClosed
(
win
)
;
Assert
.
ok
(
!
retVals
.
deleteConfirmed
"
Return
value
should
signal
user
did
not
accept
"
)
;
}
)
;
