"
use
strict
"
;
var
gCertArray
=
[
]
;
const
FAKE_HOST_PORT
=
"
Fake
host
and
port
"
;
const
TEST_CASES
=
[
{
certFilename
:
null
expectedDisplayString
:
FAKE_HOST_PORT
}
{
certFilename
:
"
has
-
cn
.
pem
"
expectedDisplayString
:
"
Foo
"
}
{
certFilename
:
"
has
-
ou
.
pem
"
expectedDisplayString
:
"
Bar
"
}
{
certFilename
:
"
has
-
o
.
pem
"
expectedDisplayString
:
"
Baz
"
}
{
certFilename
:
"
has
-
non
-
empty
-
subject
.
pem
"
expectedDisplayString
:
"
C
=
US
"
}
{
certFilename
:
"
has
-
empty
-
subject
.
pem
"
expectedDisplayString
:
"
Certificate
with
serial
number
:
0A
"
}
]
;
function
openDeleteCertConfirmDialog
(
tabID
)
{
let
retVals
=
{
deleteConfirmed
:
false
}
;
let
win
=
window
.
openDialog
(
"
chrome
:
/
/
pippki
/
content
/
deletecert
.
xul
"
"
"
"
"
tabID
gCertArray
retVals
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
win
.
addEventListener
(
"
load
"
function
(
)
{
resolve
(
[
win
retVals
]
)
;
}
{
once
:
true
}
)
;
}
)
;
}
add_task
(
function
*
setup
(
)
{
for
(
let
testCase
of
TEST_CASES
)
{
let
cert
=
null
;
if
(
testCase
.
certFilename
)
{
cert
=
yield
readCertificate
(
testCase
.
certFilename
"
"
)
;
}
let
certTreeItem
=
{
hostPort
:
FAKE_HOST_PORT
cert
:
cert
QueryInterface
(
iid
)
{
if
(
iid
.
equals
(
Ci
.
nsICertTreeItem
)
)
{
return
this
;
}
throw
new
Error
(
Cr
.
NS_ERROR_NO_INTERFACE
)
;
}
}
;
gCertArray
.
push
(
certTreeItem
)
;
}
}
)
;
function
*
testHelper
(
tabID
expectedTitle
expectedConfirmMsg
expectedImpact
)
{
let
[
win
retVals
]
=
yield
openDeleteCertConfirmDialog
(
tabID
)
;
let
certList
=
win
.
document
.
getElementById
(
"
certlist
"
)
;
Assert
.
equal
(
win
.
document
.
title
expectedTitle
Actual
and
expected
titles
should
match
for
{
tabID
}
)
;
Assert
.
equal
(
win
.
document
.
getElementById
(
"
confirm
"
)
.
textContent
expectedConfirmMsg
Actual
and
expected
confirm
message
should
match
for
{
tabID
}
)
;
Assert
.
equal
(
win
.
document
.
getElementById
(
"
impact
"
)
.
textContent
expectedImpact
Actual
and
expected
impact
should
match
for
{
tabID
}
)
;
Assert
.
equal
(
certList
.
itemCount
TEST_CASES
.
length
No
.
of
certs
displayed
should
match
for
{
tabID
}
)
;
for
(
let
i
=
0
;
i
<
certList
.
itemCount
;
i
+
+
)
{
Assert
.
equal
(
certList
.
getItemAtIndex
(
i
)
.
label
TEST_CASES
[
i
]
.
expectedDisplayString
"
Actual
and
expected
display
string
should
match
for
"
+
index
{
i
}
for
{
tabID
}
)
;
}
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
}
add_task
(
function
*
testDeletePersonalCerts
(
)
{
const
expectedTitle
=
"
Delete
your
Certificates
"
;
const
expectedConfirmMsg
=
"
Are
you
sure
you
want
to
delete
these
certificates
?
"
;
const
expectedImpact
=
"
If
you
delete
one
of
your
own
certificates
you
can
no
longer
use
it
to
"
+
"
identify
yourself
.
"
;
yield
*
testHelper
(
"
mine_tab
"
expectedTitle
expectedConfirmMsg
expectedImpact
)
;
}
)
;
add_task
(
function
*
testDeleteOtherPeopleCerts
(
)
{
const
expectedTitle
=
"
Delete
E
-
Mail
Certificates
"
;
const
expectedConfirmMsg
=
"
Are
you
sure
you
want
to
delete
these
people
\
u2019s
e
-
mail
certificates
?
"
;
const
expectedImpact
=
"
If
you
delete
a
person
\
u2019s
e
-
mail
certificate
you
will
no
longer
be
"
+
"
able
to
send
encrypted
e
-
mail
to
that
person
.
"
;
yield
*
testHelper
(
"
others_tab
"
expectedTitle
expectedConfirmMsg
expectedImpact
)
;
}
)
;
add_task
(
function
*
testDeleteServerCerts
(
)
{
const
expectedTitle
=
"
Delete
Server
Certificate
Exceptions
"
;
const
expectedConfirmMsg
=
"
Are
you
sure
you
want
to
delete
these
server
exceptions
?
"
;
const
expectedImpact
=
"
If
you
delete
a
server
exception
you
restore
the
usual
security
checks
"
+
"
for
that
server
and
require
it
uses
a
valid
certificate
.
"
;
yield
*
testHelper
(
"
websites_tab
"
expectedTitle
expectedConfirmMsg
expectedImpact
)
;
}
)
;
add_task
(
function
*
testDeleteCACerts
(
)
{
const
expectedTitle
=
"
Delete
or
Distrust
CA
Certificates
"
;
const
expectedConfirmMsg
=
"
You
have
requested
to
delete
these
CA
certificates
.
For
built
-
in
"
+
"
certificates
all
trust
will
be
removed
which
has
the
same
effect
.
Are
"
+
"
you
sure
you
want
to
delete
or
distrust
?
"
;
const
expectedImpact
=
"
If
you
delete
or
distrust
a
certificate
authority
(
CA
)
certificate
"
+
"
this
application
will
no
longer
trust
any
certificates
issued
by
that
CA
.
"
;
yield
*
testHelper
(
"
ca_tab
"
expectedTitle
expectedConfirmMsg
expectedImpact
)
;
}
)
;
add_task
(
function
*
testDeleteOtherCerts
(
)
{
const
expectedTitle
=
"
Delete
Certificates
"
;
const
expectedConfirmMsg
=
"
Are
you
sure
you
want
to
delete
these
certificates
?
"
;
const
expectedImpact
=
"
"
;
yield
*
testHelper
(
"
orphan_tab
"
expectedTitle
expectedConfirmMsg
expectedImpact
)
;
}
)
;
add_task
(
function
*
testAcceptDialogReturnValues
(
)
{
let
[
win
retVals
]
=
yield
openDeleteCertConfirmDialog
(
"
ca_tab
"
)
;
info
(
"
Accepting
dialog
"
)
;
win
.
document
.
getElementById
(
"
deleteCertificate
"
)
.
acceptDialog
(
)
;
yield
BrowserTestUtils
.
windowClosed
(
win
)
;
Assert
.
ok
(
retVals
.
deleteConfirmed
"
Return
value
should
signal
user
accepted
"
)
;
}
)
;
add_task
(
function
*
testCancelDialogReturnValues
(
)
{
let
[
win
retVals
]
=
yield
openDeleteCertConfirmDialog
(
"
ca_tab
"
)
;
info
(
"
Canceling
dialog
"
)
;
win
.
document
.
getElementById
(
"
deleteCertificate
"
)
.
cancelDialog
(
)
;
yield
BrowserTestUtils
.
windowClosed
(
win
)
;
Assert
.
ok
(
!
retVals
.
deleteConfirmed
"
Return
value
should
signal
user
did
not
accept
"
)
;
}
)
;
