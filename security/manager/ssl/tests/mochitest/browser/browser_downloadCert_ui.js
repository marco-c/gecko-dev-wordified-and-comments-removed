"
use
strict
"
;
const
{
MockRegistrar
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
jsm
"
)
;
const
TEST_CASES
=
[
{
certFilename
:
"
has
-
cn
.
pem
"
expectedDisplayString
:
"
Foo
"
cert
:
null
}
{
certFilename
:
"
has
-
empty
-
subject
.
pem
"
expectedDisplayString
:
"
Certificate
Authority
(
unnamed
)
"
cert
:
null
}
]
;
function
openCertDownloadDialog
(
cert
)
{
let
returnVals
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag2
)
;
let
win
=
window
.
openDialog
(
"
chrome
:
/
/
pippki
/
content
/
downloadcert
.
xhtml
"
"
"
"
"
cert
returnVals
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
win
.
addEventListener
(
"
load
"
function
(
)
{
executeSoon
(
(
)
=
>
resolve
(
[
win
returnVals
]
)
)
;
}
{
once
:
true
}
)
;
}
)
;
}
add_task
(
async
function
setup
(
)
{
for
(
let
testCase
of
TEST_CASES
)
{
testCase
.
cert
=
await
readCertificate
(
testCase
.
certFilename
"
"
)
;
Assert
.
notEqual
(
testCase
.
cert
null
'
{
testCase
.
certFilename
}
'
should
have
been
read
)
;
}
}
)
;
add_task
(
async
function
testTrustHeaderAndViewCertButton
(
)
{
for
(
let
testCase
of
TEST_CASES
)
{
let
[
win
]
=
await
openCertDownloadDialog
(
testCase
.
cert
)
;
let
expectedTrustHeaderString
=
Do
you
want
to
trust
\
u201C
{
testCase
.
expectedDisplayString
}
\
u201D
+
"
for
the
following
purposes
?
"
;
Assert
.
equal
(
win
.
document
.
getElementById
(
"
trustHeader
"
)
.
textContent
expectedTrustHeaderString
"
Actual
and
expected
trust
header
text
should
match
for
"
+
{
testCase
.
certFilename
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
)
;
add_task
(
async
function
testAcceptDialogReturnValues
(
)
{
let
[
win
retVals
]
=
await
openCertDownloadDialog
(
TEST_CASES
[
0
]
.
cert
)
;
win
.
document
.
getElementById
(
"
trustSSL
"
)
.
checked
=
true
;
win
.
document
.
getElementById
(
"
trustEmail
"
)
.
checked
=
false
;
info
(
"
Accepting
dialog
"
)
;
win
.
document
.
getElementById
(
"
download_cert
"
)
.
acceptDialog
(
)
;
await
BrowserTestUtils
.
windowClosed
(
win
)
;
Assert
.
ok
(
retVals
.
get
(
"
importConfirmed
"
)
"
Return
value
should
signal
user
chose
to
import
the
cert
"
)
;
Assert
.
ok
(
retVals
.
get
(
"
trustForSSL
"
)
"
Return
value
should
signal
SSL
trust
checkbox
was
checked
"
)
;
Assert
.
ok
(
!
retVals
.
get
(
"
trustForEmail
"
)
"
Return
value
should
signal
E
-
mail
trust
checkbox
was
unchecked
"
)
;
}
)
;
add_task
(
async
function
testCancelDialogReturnValues
(
)
{
let
[
win
retVals
]
=
await
openCertDownloadDialog
(
TEST_CASES
[
0
]
.
cert
)
;
info
(
"
Canceling
dialog
"
)
;
win
.
document
.
getElementById
(
"
download_cert
"
)
.
cancelDialog
(
)
;
await
BrowserTestUtils
.
windowClosed
(
win
)
;
Assert
.
ok
(
!
retVals
.
get
(
"
importConfirmed
"
)
"
Return
value
should
signal
user
chose
not
to
import
the
cert
"
)
;
}
)
;
