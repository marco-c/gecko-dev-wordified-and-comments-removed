"
use
strict
"
;
function
run_test
(
)
{
let
profileDir
=
do_get_profile
(
)
;
let
stateFile
=
profileDir
.
clone
(
)
;
stateFile
.
append
(
SSS_STATE_OLD_FILE_NAME
)
;
ok
(
!
stateFile
.
exists
(
)
)
;
let
outputStream
=
FileUtils
.
openFileOutputStream
(
stateFile
)
;
let
expiryTime
=
Date
.
now
(
)
+
100000
;
let
lines
=
[
]
;
for
(
let
i
=
0
;
i
<
10000
;
i
+
+
)
{
lines
.
push
(
example
{
i
}
.
example
.
com
\
t
+
"
0000000000000000000000000000000000000000000000000
\
t
"
+
"
00000000000000000000000000000000000000
\
t
"
+
{
expiryTime
}
1
0
)
;
}
writeLinesAndClose
(
lines
outputStream
)
;
let
siteSecurityService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
notEqual
(
siteSecurityService
null
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
example0
.
example
.
com
"
)
)
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
example423
.
example
.
com
"
)
)
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
example1023
.
example
.
com
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
example1024
.
example
.
com
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
example1025
.
example
.
com
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
example9000
.
example
.
com
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
example99999
.
example
.
com
"
)
)
)
;
}
