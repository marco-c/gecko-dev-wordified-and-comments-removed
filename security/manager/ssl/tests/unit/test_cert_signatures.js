"
use
strict
"
;
do_get_profile
(
)
;
var
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
function
readAndTamperWithNthByte
(
certificatePath
n
)
{
let
pem
=
readFile
(
do_get_file
(
certificatePath
false
)
)
;
let
der
=
atob
(
pemToBase64
(
pem
)
)
;
if
(
n
<
0
)
{
n
=
der
.
length
+
n
;
}
let
replacement
=
"
\
x22
"
;
if
(
der
.
charCodeAt
(
n
)
=
=
replacement
)
{
replacement
=
"
\
x23
"
;
}
der
=
der
.
substring
(
0
n
)
+
replacement
+
der
.
substring
(
n
+
1
)
;
return
btoa
(
der
)
;
}
const
BYTE_IN_SIGNATURE
=
-
8
;
function
addSignatureTamperedCertificate
(
certificatePath
)
{
let
base64
=
readAndTamperWithNthByte
(
certificatePath
BYTE_IN_SIGNATURE
)
;
certdb
.
addCertFromBase64
(
base64
"
"
)
;
}
function
ensureSignatureVerificationFailure
(
certificatePath
)
{
let
cert
=
constructCertFromFile
(
certificatePath
)
;
return
checkCertErrorGeneric
(
certdb
cert
SEC_ERROR_BAD_SIGNATURE
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
}
function
tamperWithSignatureAndEnsureVerificationFailure
(
certificatePath
)
{
let
base64
=
readAndTamperWithNthByte
(
certificatePath
BYTE_IN_SIGNATURE
)
;
let
cert
=
certdb
.
constructX509FromBase64
(
base64
)
;
return
checkCertErrorGeneric
(
certdb
cert
SEC_ERROR_BAD_SIGNATURE
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
}
const
BYTE_IN_SERIAL_NUMBER
=
17
;
function
addSerialNumberTamperedCertificate
(
certificatePath
)
{
let
base64
=
readAndTamperWithNthByte
(
certificatePath
BYTE_IN_SERIAL_NUMBER
)
;
certdb
.
addCertFromBase64
(
base64
"
"
)
;
}
function
tamperWithSerialNumberAndEnsureVerificationFailure
(
certificatePath
)
{
let
base64
=
readAndTamperWithNthByte
(
certificatePath
BYTE_IN_SERIAL_NUMBER
)
;
let
cert
=
certdb
.
constructX509FromBase64
(
base64
)
;
return
checkCertErrorGeneric
(
certdb
cert
SEC_ERROR_BAD_SIGNATURE
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
}
add_task
(
async
function
(
)
{
addCertFromFile
(
certdb
"
test_cert_signatures
/
ca
-
rsa
.
pem
"
"
CTu
"
)
;
addCertFromFile
(
certdb
"
test_cert_signatures
/
ca
-
secp384r1
.
pem
"
"
CTu
"
)
;
addSignatureTamperedCertificate
(
"
test_cert_signatures
/
int
-
rsa
.
pem
"
)
;
addSignatureTamperedCertificate
(
"
test_cert_signatures
/
int
-
secp384r1
.
pem
"
)
;
await
ensureSignatureVerificationFailure
(
"
test_cert_signatures
/
ee
-
rsa
.
pem
"
)
;
await
ensureSignatureVerificationFailure
(
"
test_cert_signatures
/
ee
-
secp384r1
.
pem
"
)
;
await
tamperWithSignatureAndEnsureVerificationFailure
(
"
test_cert_signatures
/
ee
-
rsa
-
direct
.
pem
"
)
;
await
tamperWithSignatureAndEnsureVerificationFailure
(
"
test_cert_signatures
/
ee
-
secp384r1
-
direct
.
pem
"
)
;
addSerialNumberTamperedCertificate
(
"
test_cert_signatures
/
int
-
rsa
.
pem
"
)
;
addSerialNumberTamperedCertificate
(
"
test_cert_signatures
/
int
-
secp384r1
.
pem
"
)
;
await
ensureSignatureVerificationFailure
(
"
test_cert_signatures
/
ee
-
rsa
.
pem
"
)
;
await
ensureSignatureVerificationFailure
(
"
test_cert_signatures
/
ee
-
secp384r1
.
pem
"
)
;
await
tamperWithSerialNumberAndEnsureVerificationFailure
(
"
test_cert_signatures
/
ee
-
rsa
-
direct
.
pem
"
)
;
await
tamperWithSerialNumberAndEnsureVerificationFailure
(
"
test_cert_signatures
/
ee
-
secp384r1
-
direct
.
pem
"
)
;
}
)
;
