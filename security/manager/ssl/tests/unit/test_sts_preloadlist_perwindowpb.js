"
use
strict
"
;
var
gSSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
function
Observer
(
)
{
}
Observer
.
prototype
=
{
observe
:
function
(
subject
topic
data
)
{
if
(
topic
=
=
"
last
-
pb
-
context
-
exited
"
)
{
run_next_test
(
)
;
}
}
}
;
var
gObserver
=
new
Observer
(
)
;
var
sslStatus
=
new
FakeSSLStatus
(
)
;
function
cleanup
(
)
{
Services
.
obs
.
removeObserver
(
gObserver
"
last
-
pb
-
context
-
exited
"
)
;
gSSService
.
clearAll
(
)
;
}
function
run_test
(
)
{
do_register_cleanup
(
cleanup
)
;
Services
.
obs
.
addObserver
(
gObserver
"
last
-
pb
-
context
-
exited
"
false
)
;
add_test
(
test_part1
)
;
add_test
(
test_private_browsing1
)
;
add_test
(
test_private_browsing2
)
;
run_next_test
(
)
;
}
function
test_part1
(
)
{
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
nonexistent
.
mozilla
.
com
"
)
0
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
com
"
)
0
)
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
stricttransportsecurity
.
preloadlist
"
false
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
stricttransportsecurity
.
preloadlist
"
true
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
subdomain
.
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
a
.
b
.
c
.
def
.
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
subdomain
.
www
.
torproject
.
org
"
)
0
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
notsts
.
nonexistent
.
mozilla
.
com
.
"
)
0
)
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
bugzilla
.
mozilla
.
org
"
)
;
let
subDomainUri
=
Services
.
io
.
newURI
(
"
https
:
/
/
subdomain
.
bugzilla
.
mozilla
.
org
"
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
0
"
sslStatus
0
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
subDomainUri
0
)
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
1000
"
sslStatus
0
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
subDomainUri
0
)
)
;
gSSService
.
clearAll
(
)
;
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
subdomain
.
www
.
torproject
.
org
"
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
0
"
sslStatus
0
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
www
.
torproject
.
org
"
)
0
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
)
)
;
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
subdomain
.
bugzilla
.
mozilla
.
org
"
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
0
"
sslStatus
0
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
subdomain
.
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
sibling
.
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
another
.
subdomain
.
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
1000
"
sslStatus
0
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
subdomain
.
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
sibling
.
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
another
.
subdomain
.
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
login
.
persona
.
org
"
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
)
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
1
"
sslStatus
0
)
;
do_timeout
(
1250
function
(
)
{
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
)
)
;
run_next_test
(
)
;
}
)
;
}
const
IS_PRIVATE
=
Ci
.
nsISocketProvider
.
NO_PERMANENT_STORAGE
;
function
test_private_browsing1
(
)
{
gSSService
.
clearAll
(
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
bugzilla
.
mozilla
.
org
"
)
;
let
subDomainUri
=
Services
.
io
.
newURI
(
"
https
:
/
/
a
.
b
.
c
.
subdomain
.
bugzilla
.
mozilla
.
org
"
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
IS_PRIVATE
)
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
subDomainUri
IS_PRIVATE
)
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
0
"
sslStatus
IS_PRIVATE
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
IS_PRIVATE
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
subDomainUri
IS_PRIVATE
)
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
1000
"
sslStatus
IS_PRIVATE
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
IS_PRIVATE
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
subDomainUri
IS_PRIVATE
)
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
0
"
sslStatus
IS_PRIVATE
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
IS_PRIVATE
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
subDomainUri
IS_PRIVATE
)
)
;
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
login
.
persona
.
org
"
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
IS_PRIVATE
)
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
1
"
sslStatus
IS_PRIVATE
)
;
do_timeout
(
1250
function
(
)
{
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
IS_PRIVATE
)
)
;
Services
.
obs
.
notifyObservers
(
null
"
last
-
pb
-
context
-
exited
"
null
)
;
}
)
;
}
function
test_private_browsing2
(
)
{
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
subdomain
.
bugzilla
.
mozilla
.
org
"
)
0
)
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
login
.
persona
.
org
"
)
0
)
)
;
run_next_test
(
)
;
}
