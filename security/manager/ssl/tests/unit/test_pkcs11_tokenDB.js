"
use
strict
"
;
do_get_profile
(
)
;
function
run_test
(
)
{
let
tokenDB
=
Cc
[
"
mozilla
.
org
/
security
/
pk11tokendb
;
1
"
]
.
getService
(
Ci
.
nsIPK11TokenDB
)
;
let
tokenListPreLoad
=
tokenDB
.
listTokens
(
)
;
while
(
tokenListPreLoad
.
hasMoreElements
(
)
)
{
let
token
=
tokenListPreLoad
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPK11Token
)
;
notEqual
(
token
.
tokenLabel
"
Test
PKCS11
Toke
Label
"
"
Test
PKCS11
Token
1
should
not
be
listed
prior
to
module
load
"
)
;
notEqual
(
token
.
tokenLabel
"
Test
PKCS11
Toke
2
Label
"
"
Test
PKCS11
Token
2
should
not
be
listed
prior
to
module
load
"
)
;
}
throws
(
(
)
=
>
tokenDB
.
findTokenByName
(
"
Test
PKCS11
Toke
Label
"
)
/
NS_ERROR_FAILURE
/
"
Non
-
present
test
token
1
should
not
be
findable
by
name
"
)
;
throws
(
(
)
=
>
tokenDB
.
findTokenByName
(
"
Test
PKCS11
Toke
2
Label
"
)
/
NS_ERROR_FAILURE
/
"
Non
-
present
test
token
2
should
not
be
findable
by
name
"
)
;
loadPKCS11TestModule
(
false
)
;
let
tokenListPostLoad
=
tokenDB
.
listTokens
(
)
;
let
foundTokenNames
=
[
]
;
while
(
tokenListPostLoad
.
hasMoreElements
(
)
)
{
let
token
=
tokenListPostLoad
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPK11Token
)
;
foundTokenNames
.
push
(
token
.
tokenName
)
;
}
ok
(
foundTokenNames
.
includes
(
"
Test
PKCS11
Toke
2
Label
"
)
"
Test
PKCS11
Token
2
should
be
listed
after
module
load
"
)
;
notEqual
(
tokenDB
.
findTokenByName
(
"
Test
PKCS11
Toke
2
Label
"
)
null
"
Test
token
2
should
be
findable
by
name
after
loading
test
module
"
)
;
throws
(
(
)
=
>
tokenDB
.
findTokenByName
(
"
"
)
/
NS_ERROR_ILLEGAL_VALUE
/
"
nsIPK11TokenDB
.
findTokenByName
should
throw
given
an
empty
name
"
)
;
}
