"
use
strict
"
;
var
gSSService
=
null
;
var
gProfileDir
=
null
;
function
do_state_written
(
aSubject
aTopic
aData
)
{
if
(
aData
=
=
PRELOAD_STATE_FILE_NAME
|
|
aData
=
=
CLIENT_AUTH_FILE_NAME
)
{
return
;
}
equal
(
aData
SSS_STATE_FILE_NAME
)
;
let
stateFile
=
gProfileDir
.
clone
(
)
;
stateFile
.
append
(
SSS_STATE_FILE_NAME
)
;
ok
(
stateFile
.
exists
(
)
)
;
let
stateFileContents
=
readFile
(
stateFile
)
;
let
lines
=
stateFileContents
.
split
(
"
\
n
"
)
.
slice
(
0
-
1
)
;
if
(
lines
.
length
!
=
1024
)
{
return
;
}
let
foundLegitSite
=
false
;
for
(
let
line
of
lines
)
{
if
(
line
.
startsWith
(
"
frequentlyused
.
example
.
com
:
HSTS
"
)
)
{
foundLegitSite
=
true
;
break
;
}
}
ok
(
foundLegitSite
)
;
do_test_finished
(
)
;
}
function
do_state_read
(
aSubject
aTopic
aData
)
{
if
(
aData
=
=
PRELOAD_STATE_FILE_NAME
|
|
aData
=
=
CLIENT_AUTH_FILE_NAME
)
{
return
;
}
equal
(
aData
SSS_STATE_FILE_NAME
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
frequentlyused
.
example
.
com
"
)
0
)
)
;
let
secInfo
=
Cc
[
"
mozilla
.
org
/
security
/
transportsecurityinfo
;
1
"
]
.
createInstance
(
Ci
.
nsITransportSecurityInfo
)
;
for
(
let
i
=
0
;
i
<
2000
;
i
+
+
)
{
let
uri
=
Services
.
io
.
newURI
(
"
http
:
/
/
bad
"
+
i
+
"
.
example
.
com
"
)
;
gSSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
1000
"
secInfo
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
}
do_test_pending
(
)
;
Services
.
obs
.
addObserver
(
do_state_written
"
data
-
storage
-
written
"
)
;
do_test_finished
(
)
;
}
function
run_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
test
.
datastorage
.
write_timer_ms
"
100
)
;
gProfileDir
=
do_get_profile
(
)
;
let
stateFile
=
gProfileDir
.
clone
(
)
;
stateFile
.
append
(
SSS_STATE_FILE_NAME
)
;
ok
(
!
stateFile
.
exists
(
)
)
;
let
outputStream
=
FileUtils
.
openFileOutputStream
(
stateFile
)
;
let
now
=
new
Date
(
)
.
getTime
(
)
;
let
line
=
"
frequentlyused
.
example
.
com
:
HSTS
\
t4
\
t0
\
t
"
+
(
now
+
100000
)
+
"
1
0
\
n
"
;
outputStream
.
write
(
line
line
.
length
)
;
outputStream
.
close
(
)
;
Services
.
obs
.
addObserver
(
do_state_read
"
data
-
storage
-
ready
"
)
;
do_test_pending
(
)
;
gSSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
notEqual
(
gSSService
null
)
;
}
