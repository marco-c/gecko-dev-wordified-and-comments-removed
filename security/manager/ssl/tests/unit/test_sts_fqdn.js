"
use
strict
"
;
function
run_test
(
)
{
let
SSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
let
uri1
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
.
"
)
;
let
uri2
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
.
.
"
)
;
ok
(
!
SSService
.
isSecureURI
(
uri
0
)
)
;
ok
(
!
SSService
.
isSecureURI
(
uri1
0
)
)
;
ok
(
!
SSService
.
isSecureURI
(
uri2
0
)
)
;
let
secInfo
=
Cc
[
"
mozilla
.
org
/
security
/
transportsecurityinfo
;
1
"
]
.
createInstance
(
Ci
.
nsITransportSecurityInfo
)
;
SSService
.
processHeader
(
uri
"
max
-
age
=
1000
;
includeSubdomains
"
secInfo
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
ok
(
SSService
.
isSecureURI
(
uri
0
)
)
;
ok
(
SSService
.
isSecureURI
(
uri1
0
)
)
;
ok
(
SSService
.
isSecureURI
(
uri2
0
)
)
;
SSService
.
resetState
(
uri
0
)
;
ok
(
!
SSService
.
isSecureURI
(
uri
0
)
)
;
ok
(
!
SSService
.
isSecureURI
(
uri1
0
)
)
;
ok
(
!
SSService
.
isSecureURI
(
uri2
0
)
)
;
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
.
.
/
foo
"
)
;
equal
(
uri
.
host
"
.
.
"
)
;
throws
(
(
)
=
>
{
SSService
.
isSecureURI
(
uri
0
)
;
}
/
NS_ERROR_UNEXPECTED
/
"
Malformed
URI
should
be
rejected
"
)
;
}
