"
use
strict
"
;
do_get_profile
(
)
;
function
add_tests_in_mode
(
mode
)
{
add_test
(
function
set_mode
(
)
{
info
(
setting
CT
to
mode
{
mode
}
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
certificate_transparency
.
mode
"
mode
)
;
run_next_test
(
)
;
}
)
;
add_ct_test
(
"
ct
-
via
-
ocsp
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_COMPLIANT
true
)
;
add_ct_test
(
"
ct
-
via
-
tls
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_COMPLIANT
true
)
;
add_ct_test
(
"
ct
-
tampered
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
mode
=
=
CT_MODE_COLLECT_TELEMETRY
)
;
}
function
run_test
(
)
{
let
rootCert
=
constructCertFromFile
(
"
test_ct
/
test
-
ca
.
pem
"
)
;
Services
.
prefs
.
setCharPref
(
"
security
.
test
.
built_in_root_hash
"
rootCert
.
sha256Fingerprint
)
;
add_tls_server_setup
(
"
OCSPStaplingServer
"
"
test_ct
"
)
;
add_tests_in_mode
(
CT_MODE_COLLECT_TELEMETRY
)
;
add_tests_in_mode
(
CT_MODE_ENFORCE
)
;
run_next_test
(
)
;
}
