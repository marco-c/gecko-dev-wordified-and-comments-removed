"
use
strict
"
;
do_get_profile
(
)
;
const
{
RemoteSecuritySettings
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
psm
/
RemoteSecuritySettings
.
sys
.
mjs
"
)
;
const
{
TestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
)
;
const
{
CRLiteFiltersClient
}
=
RemoteSecuritySettings
.
init
(
)
;
const
CRLITE_FILTERS_ENABLED_PREF
=
"
security
.
remote_settings
.
crlite_filters
.
enabled
"
;
const
CRLITE_FILTER_CHANNEL_PREF
=
"
security
.
pki
.
crlite_channel
"
;
const
INTERMEDIATES_ENABLED_PREF
=
"
security
.
remote_settings
.
intermediates
.
enabled
"
;
const
INTERMEDIATES_DL_PER_POLL_PREF
=
"
security
.
remote_settings
.
intermediates
.
downloads_per_poll
"
;
const
ISSUER_PEM_UID
=
"
UbH9
/
ZAnjuqf79Xhah1mFOWo6ZvgQCgsdheWfjvVUM8
=
"
;
const
NO_SCT_ISSUER_PEM_UID
=
"
Myn7EasO1QikOtNmo
/
UZdh6snCAw0BOY6wgU8OsUeeY
=
"
;
function
getHashCommon
(
aStr
useBase64
)
{
let
hasher
=
Cc
[
"
mozilla
.
org
/
security
/
hash
;
1
"
]
.
createInstance
(
Ci
.
nsICryptoHash
)
;
hasher
.
init
(
Ci
.
nsICryptoHash
.
SHA256
)
;
let
stringStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
stringStream
.
setByteStringData
(
aStr
)
;
hasher
.
updateFromStream
(
stringStream
-
1
)
;
return
hasher
.
finish
(
useBase64
)
;
}
function
getHash
(
aStr
)
{
return
hexify
(
getHashCommon
(
aStr
false
)
)
;
}
function
getFilenameForFilter
(
filter
)
{
if
(
filter
.
type
=
=
"
filter
"
)
{
return
"
20201017
-
0
-
filter
"
;
}
if
(
filter
.
id
=
=
"
0001
"
)
{
return
"
20201017
-
1
-
filter
.
delta
"
;
}
return
"
20201201
-
3
-
filter
.
delta
"
;
}
async
function
syncAndDownload
(
filters
clear
=
true
channel
=
undefined
)
{
const
localDB
=
await
CRLiteFiltersClient
.
client
.
db
;
if
(
clear
)
{
await
localDB
.
clear
(
)
;
}
channel
=
typeof
channel
=
=
=
"
undefined
"
?
Services
.
prefs
.
getStringPref
(
CRLITE_FILTER_CHANNEL_PREF
)
:
channel
;
for
(
let
filter
of
filters
)
{
const
filename
=
getFilenameForFilter
(
filter
)
;
const
file
=
do_get_file
(
test_crlite_filters
/
{
filename
}
)
;
const
fileBytes
=
readFile
(
file
)
;
const
incremental
=
filter
.
type
=
=
"
diff
"
;
const
record
=
{
details
:
{
name
:
{
filter
.
timestamp
}
-
{
filter
.
type
}
}
attachment
:
{
hash
:
getHash
(
fileBytes
)
size
:
fileBytes
.
length
filename
location
:
security
-
state
-
workspace
/
cert
-
revocations
/
test_crlite_filters
/
{
filename
}
mimetype
:
"
application
/
octet
-
stream
"
}
incremental
effectiveTimestamp
:
new
Date
(
filter
.
timestamp
)
.
getTime
(
)
parent
:
incremental
?
filter
.
parent
:
undefined
id
:
filter
.
id
coverage
:
!
incremental
?
filter
.
coverage
:
undefined
enrolledIssuers
:
!
incremental
?
filter
.
enrolledIssuers
:
undefined
channel
:
{
channel
}
filter_expression
:
'
{
channel
}
'
=
=
'
{
CRLITE_FILTER_CHANNEL_PREF
}
'
|
preferenceValue
(
'
none
'
)
}
;
await
localDB
.
create
(
record
)
;
}
let
promise
=
TestUtils
.
topicObserved
(
"
remote
-
security
-
settings
:
crlite
-
filters
-
downloaded
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
remote
-
settings
:
changes
-
poll
-
end
"
)
;
let
results
=
await
promise
;
return
results
[
1
]
;
}
function
expectDownloads
(
result
expected
)
{
let
[
status
filters
]
=
result
.
split
(
"
;
"
)
;
equal
(
status
"
finished
"
"
CRLite
filter
download
should
have
run
"
)
;
let
filtersSplit
=
filters
.
split
(
"
"
)
;
deepEqual
(
filtersSplit
expected
.
length
?
expected
:
[
"
"
]
"
Should
have
downloaded
the
expected
CRLite
filters
"
)
;
}
add_task
(
async
function
test_crlite_filters_disabled
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
false
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
01T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
coverage
:
[
{
logID
:
"
9lyUL9F3MCIUVBgIMJRWjuNNExkzv98MLyALzE7xZOM
=
"
minTimestamp
:
0
maxTimestamp
:
9999999999999
}
]
}
]
)
;
equal
(
result
"
disabled
"
"
CRLite
filter
download
should
not
have
run
"
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_no_filters
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
let
result
=
await
syncAndDownload
(
[
]
)
;
equal
(
result
"
unavailable
"
"
CRLite
filter
download
should
have
run
but
nothing
was
available
"
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_no_filters_in_channel
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
01T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
}
]
true
"
other
"
)
;
equal
(
result
"
unavailable
"
"
CRLite
filter
download
should
have
run
but
nothing
was
available
"
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_only_incremental_filters
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
01T06
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0001
"
parent
:
"
0000
"
}
{
timestamp
:
"
2019
-
01
-
01T18
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0002
"
parent
:
"
0001
"
}
{
timestamp
:
"
2019
-
01
-
01T12
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0003
"
parent
:
"
0002
"
}
]
)
;
equal
(
result
"
unavailable
"
"
CRLite
filter
download
should
have
run
but
no
full
filters
were
available
"
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_incremental_filters_with_wrong_parent
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
01T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
}
{
timestamp
:
"
2019
-
01
-
01T06
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0001
"
parent
:
"
0000
"
}
{
timestamp
:
"
2019
-
01
-
01T12
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0003
"
parent
:
"
0002
"
}
{
timestamp
:
"
2019
-
01
-
01T18
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0004
"
parent
:
"
0003
"
}
]
)
;
expectDownloads
(
result
[
"
2019
-
01
-
01T00
:
00
:
00Z
-
filter
"
"
2019
-
01
-
01T06
:
00
:
00Z
-
diff
"
]
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_incremental_filter_too_early
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
02T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
}
{
timestamp
:
"
2019
-
01
-
01T00
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0001
"
parent
:
"
0000
"
}
]
)
;
equal
(
result
"
finished
;
2019
-
01
-
02T00
:
00
:
00Z
-
filter
"
"
CRLite
filter
download
should
have
run
"
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_filters_basic
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
01T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
}
]
)
;
equal
(
result
"
finished
;
2019
-
01
-
01T00
:
00
:
00Z
-
filter
"
"
CRLite
filter
download
should
have
run
"
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_filters_not_cached
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
let
filters
=
[
{
timestamp
:
"
2019
-
01
-
01T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
}
]
;
let
result
=
await
syncAndDownload
(
filters
)
;
equal
(
result
"
finished
;
2019
-
01
-
01T00
:
00
:
00Z
-
filter
"
"
CRLite
filter
download
should
have
run
"
)
;
let
records
=
await
CRLiteFiltersClient
.
client
.
db
.
list
(
)
;
let
attachment
=
await
CRLiteFiltersClient
.
client
.
attachments
.
download
(
records
[
0
]
)
;
equal
(
attachment
.
_source
"
remote_match
"
)
;
await
CRLiteFiltersClient
.
client
.
attachments
.
deleteDownloaded
(
records
[
0
]
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_filters_full_and_incremental
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
01T06
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0001
"
parent
:
"
0000
"
}
{
timestamp
:
"
2019
-
01
-
01T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
}
{
timestamp
:
"
2019
-
01
-
01T18
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0003
"
parent
:
"
0002
"
}
{
timestamp
:
"
2019
-
01
-
01T12
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0002
"
parent
:
"
0001
"
}
]
)
;
expectDownloads
(
result
[
"
2019
-
01
-
01T00
:
00
:
00Z
-
filter
"
"
2019
-
01
-
01T06
:
00
:
00Z
-
diff
"
"
2019
-
01
-
01T12
:
00
:
00Z
-
diff
"
"
2019
-
01
-
01T18
:
00
:
00Z
-
diff
"
]
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_filters_multiple_days
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
02T06
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0011
"
parent
:
"
0010
"
}
{
timestamp
:
"
2019
-
01
-
03T12
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0022
"
parent
:
"
0021
"
}
{
timestamp
:
"
2019
-
01
-
02T12
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0012
"
parent
:
"
0011
"
}
{
timestamp
:
"
2019
-
01
-
03T18
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0023
"
parent
:
"
0022
"
}
{
timestamp
:
"
2019
-
01
-
02T18
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0013
"
parent
:
"
0012
"
}
{
timestamp
:
"
2019
-
01
-
02T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0010
"
}
{
timestamp
:
"
2019
-
01
-
03T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0020
"
}
{
timestamp
:
"
2019
-
01
-
01T06
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0001
"
parent
:
"
0000
"
}
{
timestamp
:
"
2019
-
01
-
01T18
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0003
"
parent
:
"
0002
"
}
{
timestamp
:
"
2019
-
01
-
01T12
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0002
"
parent
:
"
0001
"
}
{
timestamp
:
"
2019
-
01
-
01T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
}
{
timestamp
:
"
2019
-
01
-
03T06
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0021
"
parent
:
"
0020
"
}
]
)
;
expectDownloads
(
result
[
"
2019
-
01
-
03T00
:
00
:
00Z
-
filter
"
"
2019
-
01
-
03T06
:
00
:
00Z
-
diff
"
"
2019
-
01
-
03T12
:
00
:
00Z
-
diff
"
"
2019
-
01
-
03T18
:
00
:
00Z
-
diff
"
]
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_confirm_revocations_mode
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
crlite_mode
"
CRLiteModeConfirmRevocationsValue
)
;
Services
.
prefs
.
setBoolPref
(
INTERMEDIATES_ENABLED_PREF
true
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
test_crlite_filters
/
issuer
.
pem
"
"
"
)
;
addCertFromFile
(
certdb
"
test_crlite_filters
/
no
-
sct
-
issuer
.
pem
"
"
"
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2020
-
10
-
17T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
coverage
:
[
{
logID
:
"
9lyUL9F3MCIUVBgIMJRWjuNNExkzv98MLyALzE7xZOM
=
"
minTimestamp
:
0
maxTimestamp
:
9999999999999
}
{
logID
:
"
pLkJkLQYWBSHuxOizGdwCjw1mAT5G9
+
443fNDsgN3BA
=
"
minTimestamp
:
0
maxTimestamp
:
9999999999999
}
]
enrolledIssuers
:
[
ISSUER_PEM_UID
NO_SCT_ISSUER_PEM_UID
]
}
]
)
;
equal
(
result
"
finished
;
2020
-
10
-
17T00
:
00
:
00Z
-
filter
"
"
CRLite
filter
download
should
have
run
"
)
;
let
validCert
=
constructCertFromFile
(
"
test_crlite_filters
/
valid
.
pem
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
validCert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
undefined
"
vpn
.
worldofspeed
.
org
"
0
)
;
let
revokedCert
=
constructCertFromFile
(
"
test_crlite_filters
/
revoked
.
pem
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedCert
SEC_ERROR_REVOKED_CERTIFICATE
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
undefined
"
us
-
datarecovery
.
com
"
Ci
.
nsIX509CertDB
.
FLAG_LOCAL_ONLY
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_filters_and_check_revocation
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
crlite_mode
"
CRLiteModeEnforcePrefValue
)
;
Services
.
prefs
.
setBoolPref
(
INTERMEDIATES_ENABLED_PREF
true
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
test_crlite_filters
/
issuer
.
pem
"
"
"
)
;
addCertFromFile
(
certdb
"
test_crlite_filters
/
no
-
sct
-
issuer
.
pem
"
"
"
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2020
-
10
-
17T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
}
]
)
;
equal
(
result
finished
;
2020
-
10
-
17T00
:
00
:
00Z
-
filter
"
CRLite
filter
download
should
have
run
"
)
;
let
validCert
=
constructCertFromFile
(
"
test_crlite_filters
/
valid
.
pem
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
validCert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
vpn
.
worldofspeed
.
org
"
0
)
;
let
revokedCert
=
constructCertFromFile
(
"
test_crlite_filters
/
revoked
.
pem
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedCert
SEC_ERROR_REVOKED_CERTIFICATE
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
us
-
datarecovery
.
com
"
0
)
;
let
revokedInStashCert
=
constructCertFromFile
(
"
test_crlite_filters
/
revoked
-
in
-
stash
.
pem
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedInStashCert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
stokedmoto
.
com
"
0
)
;
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2020
-
10
-
17T03
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0001
"
parent
:
"
0000
"
}
]
false
)
;
equal
(
result
"
finished
;
2020
-
10
-
17T03
:
00
:
00Z
-
diff
"
"
Should
have
downloaded
the
expected
CRLite
filters
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedInStashCert
SEC_ERROR_REVOKED_CERTIFICATE
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
stokedmoto
.
com
"
0
)
;
let
revokedInStash2Cert
=
constructCertFromFile
(
"
test_crlite_filters
/
revoked
-
in
-
stash
-
2
.
pem
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedInStash2Cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
icsreps
.
com
"
0
)
;
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2020
-
10
-
17T06
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0002
"
parent
:
"
0001
"
}
]
false
)
;
equal
(
result
"
finished
;
2020
-
10
-
17T06
:
00
:
00Z
-
diff
"
"
Should
have
downloaded
the
expected
CRLite
filters
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedInStash2Cert
SEC_ERROR_REVOKED_CERTIFICATE
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
icsreps
.
com
"
0
)
;
await
checkCertErrorGenericAtTime
(
certdb
validCert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
vpn
.
worldofspeed
.
org
"
0
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedCert
SEC_ERROR_REVOKED_CERTIFICATE
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
us
-
datarecovery
.
com
"
0
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedInStashCert
SEC_ERROR_REVOKED_CERTIFICATE
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
stokedmoto
.
com
"
0
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
[
"
ocsp
.
digicert
.
com
"
"
ocsp
.
godaddy
.
com
"
]
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
OCSP
.
require
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
let
noSCTCert
=
constructCertFromFile
(
"
test_crlite_filters
/
no
-
sct
.
pem
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
noSCTCert
SEC_ERROR_OCSP_SERVER_ERROR
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
mail233
.
messagelabs
.
com
"
0
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
crlite_timestamps_for_coverage
"
100
)
;
await
checkCertErrorGenericAtTime
(
certdb
validCert
SEC_ERROR_OCSP_SERVER_ERROR
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
vpn
.
worldofspeed
.
org
"
0
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
pki
.
crlite_timestamps_for_coverage
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
OCSP
.
require
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
OCSP
.
enabled
"
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_filters_avoid_reprocessing_filters
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
01T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
coverage
:
[
{
logID
:
"
9lyUL9F3MCIUVBgIMJRWjuNNExkzv98MLyALzE7xZOM
=
"
minTimestamp
:
0
maxTimestamp
:
9999999999999
}
]
enrolledIssuers
:
[
ISSUER_PEM_UID
NO_SCT_ISSUER_PEM_UID
]
}
{
timestamp
:
"
2019
-
01
-
01T06
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0001
"
parent
:
"
0000
"
}
{
timestamp
:
"
2019
-
01
-
01T12
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0002
"
parent
:
"
0001
"
}
{
timestamp
:
"
2019
-
01
-
01T18
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0003
"
parent
:
"
0002
"
}
]
)
;
expectDownloads
(
result
[
"
2019
-
01
-
01T00
:
00
:
00Z
-
filter
"
"
2019
-
01
-
01T06
:
00
:
00Z
-
diff
"
"
2019
-
01
-
01T12
:
00
:
00Z
-
diff
"
"
2019
-
01
-
01T18
:
00
:
00Z
-
diff
"
]
)
;
result
=
await
syncAndDownload
(
[
]
false
)
;
equal
(
result
"
finished
;
"
)
;
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
02T00
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0004
"
parent
:
"
0003
"
}
]
false
)
;
equal
(
result
"
finished
;
2019
-
01
-
02T00
:
00
:
00Z
-
diff
"
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
add_task
(
async
function
test_crlite_filters_reprocess_filters_on_channel_change
(
)
{
Services
.
prefs
.
setBoolPref
(
CRLITE_FILTERS_ENABLED_PREF
true
)
;
Services
.
prefs
.
setStringPref
(
CRLITE_FILTER_CHANNEL_PREF
"
specified
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
CRLiteFiltersClient
.
client
.
db
.
clear
(
)
;
Services
.
prefs
.
clearUserPref
(
CRLITE_FILTERS_ENABLED_PREF
)
;
Services
.
prefs
.
clearUserPref
(
CRLITE_FILTER_CHANNEL_PREF
)
;
}
)
;
let
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2019
-
01
-
01T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0000
"
coverage
:
[
{
logID
:
"
9lyUL9F3MCIUVBgIMJRWjuNNExkzv98MLyALzE7xZOM
=
"
minTimestamp
:
0
maxTimestamp
:
9999999999999
}
]
enrolledIssuers
:
[
ISSUER_PEM_UID
NO_SCT_ISSUER_PEM_UID
]
}
{
timestamp
:
"
2019
-
01
-
01T06
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0001
"
parent
:
"
0000
"
}
]
true
"
specified
"
)
;
expectDownloads
(
result
[
"
2019
-
01
-
01T00
:
00
:
00Z
-
filter
"
"
2019
-
01
-
01T06
:
00
:
00Z
-
diff
"
]
)
;
result
=
await
syncAndDownload
(
[
{
timestamp
:
"
2020
-
01
-
01T00
:
00
:
00Z
"
type
:
"
filter
"
id
:
"
0002
"
coverage
:
[
{
logID
:
"
9lyUL9F3MCIUVBgIMJRWjuNNExkzv98MLyALzE7xZOM
=
"
minTimestamp
:
0
maxTimestamp
:
9999999999999
}
]
enrolledIssuers
:
[
ISSUER_PEM_UID
NO_SCT_ISSUER_PEM_UID
]
}
{
timestamp
:
"
2020
-
01
-
01T06
:
00
:
00Z
"
type
:
"
diff
"
id
:
"
0003
"
parent
:
"
0002
"
}
]
false
"
priority
"
)
;
expectDownloads
(
result
[
]
)
;
Services
.
prefs
.
setStringPref
(
CRLITE_FILTER_CHANNEL_PREF
"
priority
"
)
;
result
=
await
syncAndDownload
(
[
]
false
)
;
expectDownloads
(
result
[
"
2020
-
01
-
01T00
:
00
:
00Z
-
filter
"
"
2020
-
01
-
01T06
:
00
:
00Z
-
diff
"
]
)
;
Services
.
prefs
.
setStringPref
(
CRLITE_FILTER_CHANNEL_PREF
"
specified
"
)
;
result
=
await
syncAndDownload
(
[
]
false
)
;
expectDownloads
(
result
[
"
2019
-
01
-
01T00
:
00
:
00Z
-
filter
"
"
2019
-
01
-
01T06
:
00
:
00Z
-
diff
"
]
)
;
await
syncAndDownload
(
[
]
true
)
;
}
)
;
let
server
;
function
run_test
(
)
{
server
=
new
HttpServer
(
)
;
server
.
start
(
-
1
)
;
registerCleanupFunction
(
(
)
=
>
server
.
stop
(
(
)
=
>
{
}
)
)
;
server
.
registerDirectory
(
"
/
cdn
/
security
-
state
-
workspace
/
cert
-
revocations
/
"
do_get_file
(
"
.
"
)
)
;
server
.
registerPathHandler
(
"
/
v1
/
"
(
request
response
)
=
>
{
response
.
write
(
JSON
.
stringify
(
{
capabilities
:
{
attachments
:
{
base_url
:
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
cdn
/
}
}
}
)
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
json
;
charset
=
UTF
-
8
"
)
;
response
.
setStatusLine
(
null
200
"
OK
"
)
;
}
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
settings
.
server
"
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
v1
)
;
Services
.
prefs
.
setIntPref
(
INTERMEDIATES_DL_PER_POLL_PREF
0
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
policies
.
loglevel
"
"
debug
"
)
;
run_next_test
(
)
;
}
