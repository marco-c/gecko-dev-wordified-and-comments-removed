"
use
strict
"
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
function
certFromFile
(
certName
)
{
return
constructCertFromFile
(
test_cert_eku
/
{
certName
}
.
pem
)
;
}
function
loadCertWithTrust
(
certName
trustString
)
{
addCertFromFile
(
certdb
test_cert_eku
/
{
certName
}
.
pem
trustString
)
;
}
function
checkEndEntity
(
cert
expectedResult
)
{
checkCertErrorGeneric
(
certdb
cert
expectedResult
certificateUsageSSLServer
)
;
}
function
run_test
(
)
{
loadCertWithTrust
(
"
ca
"
"
CTu
"
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
SA
"
)
PRErrorCodeSuccess
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
SA
-
CA
"
)
PRErrorCodeSuccess
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
CA
"
)
SEC_ERROR_INADEQUATE_CERT_TYPE
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
SA
-
nsSGC
"
)
PRErrorCodeSuccess
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
nsSGC
"
)
SEC_ERROR_INADEQUATE_CERT_TYPE
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
SA
-
OCSP
"
)
SEC_ERROR_INADEQUATE_CERT_TYPE
)
;
loadCertWithTrust
(
"
int
-
SA
"
"
"
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
int
-
SA
"
)
PRErrorCodeSuccess
)
;
loadCertWithTrust
(
"
int
-
SA
-
CA
"
"
"
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
int
-
SA
-
CA
"
)
PRErrorCodeSuccess
)
;
loadCertWithTrust
(
"
int
-
CA
"
"
"
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
int
-
CA
"
)
SEC_ERROR_INADEQUATE_CERT_TYPE
)
;
loadCertWithTrust
(
"
int
-
SA
-
nsSGC
"
"
"
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
int
-
SA
-
nsSGC
"
)
PRErrorCodeSuccess
)
;
loadCertWithTrust
(
"
int
-
nsSGC
"
"
"
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
int
-
nsSGC
"
)
PRErrorCodeSuccess
)
;
loadCertWithTrust
(
"
int
-
SA
-
OCSP
"
"
"
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
int
-
SA
-
OCSP
"
)
PRErrorCodeSuccess
)
;
}
