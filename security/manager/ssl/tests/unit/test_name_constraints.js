"
use
strict
"
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
function
certFromFile
(
name
)
{
return
constructCertFromFile
(
test_name_constraints
/
{
name
}
.
pem
)
;
}
function
loadCertWithTrust
(
certName
trustString
)
{
addCertFromFile
(
certdb
test_name_constraints
/
{
certName
}
.
pem
trustString
)
;
}
function
checkCertNotInNameSpace
(
cert
)
{
return
checkCertErrorGeneric
(
certdb
cert
SEC_ERROR_CERT_NOT_IN_NAME_SPACE
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
}
function
checkCertInNameSpace
(
cert
)
{
return
checkCertErrorGeneric
(
certdb
cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
}
add_task
(
async
function
(
)
{
loadCertWithTrust
(
"
ca
-
example
-
com
-
permitted
"
"
CTu
"
)
;
loadCertWithTrust
(
"
int
-
example
-
org
-
permitted
"
"
"
)
;
await
checkCertNotInNameSpace
(
certFromFile
(
"
ee
-
example
-
com
-
and
-
org
"
)
)
;
await
checkCertNotInNameSpace
(
certFromFile
(
"
ee
-
example
-
com
"
)
)
;
await
checkCertNotInNameSpace
(
certFromFile
(
"
ee
-
example
-
org
"
)
)
;
await
checkCertNotInNameSpace
(
certFromFile
(
"
ee
-
example
-
test
"
)
)
;
loadCertWithTrust
(
"
dciss
"
"
CTu
"
)
;
await
checkCertInNameSpace
(
certFromFile
(
"
NameConstraints
.
dcissallowed
"
)
)
;
await
checkCertNotInNameSpace
(
certFromFile
(
"
NameConstraints
.
dcissblocked
"
)
)
;
}
)
;
