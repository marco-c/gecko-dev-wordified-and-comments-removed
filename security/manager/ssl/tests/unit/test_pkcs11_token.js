"
use
strict
"
;
do_get_profile
(
)
;
function
checkBasicAttributes
(
token
)
{
let
strBundleSvc
=
Cc
[
"
mozilla
.
org
/
intl
/
stringbundle
;
1
"
]
.
getService
(
Ci
.
nsIStringBundleService
)
;
let
bundle
=
strBundleSvc
.
createBundle
(
"
chrome
:
/
/
pipnss
/
locale
/
pipnss
.
properties
"
)
;
let
expectedTokenName
=
bundle
.
GetStringFromName
(
"
PrivateTokenDescription
"
)
;
equal
(
token
.
tokenName
expectedTokenName
"
Actual
and
expected
name
should
match
"
)
;
equal
(
token
.
tokenLabel
expectedTokenName
"
Actual
and
expected
label
should
match
"
)
;
equal
(
token
.
tokenManID
bundle
.
GetStringFromName
(
"
ManufacturerID
"
)
"
Actual
and
expected
manufacturer
ID
should
match
"
)
;
equal
(
token
.
tokenHWVersion
"
0
.
0
"
"
Actual
and
expected
hardware
version
should
match
"
)
;
equal
(
token
.
tokenFWVersion
"
0
.
0
"
"
Actual
and
expected
firmware
version
should
match
"
)
;
equal
(
token
.
tokenSerialNumber
"
0000000000000000
"
"
Actual
and
expected
serial
number
should
match
"
)
;
}
function
checkPasswordFeaturesAndResetPassword
(
token
initialPW
)
{
ok
(
!
token
.
needsUserInit
"
Token
should
not
need
user
init
after
setting
a
password
"
)
;
ok
(
token
.
hasPassword
"
Token
should
have
a
password
after
setting
a
password
"
)
;
equal
(
token
.
minimumPasswordLength
0
"
Actual
and
expected
min
password
length
should
match
"
)
;
token
.
setAskPasswordDefaults
(
10
20
)
;
equal
(
token
.
getAskPasswordTimes
(
)
10
"
Actual
and
expected
ask
password
times
should
match
"
)
;
equal
(
token
.
getAskPasswordTimeout
(
)
20
"
Actual
and
expected
ask
password
timeout
should
match
"
)
;
ok
(
token
.
checkPassword
(
initialPW
)
"
checkPassword
(
)
should
succeed
if
the
correct
initial
password
is
given
"
)
;
token
.
changePassword
(
initialPW
"
newPW
"
)
;
ok
(
token
.
checkPassword
(
"
newPW
"
)
"
checkPassword
(
)
should
succeed
if
the
correct
new
password
is
given
"
)
;
ok
(
!
token
.
checkPassword
(
"
wrongPW
"
)
"
checkPassword
(
)
should
fail
if
an
incorrect
password
is
given
"
)
;
ok
(
!
token
.
isLoggedIn
(
)
"
Token
should
be
logged
out
after
an
incorrect
password
was
given
"
)
;
ok
(
!
token
.
needsUserInit
"
Token
should
still
be
init
with
a
password
even
if
an
incorrect
"
+
"
password
was
given
"
)
;
token
.
reset
(
)
;
ok
(
token
.
needsUserInit
"
Token
should
need
password
init
after
reset
"
)
;
ok
(
!
token
.
hasPassword
"
Token
should
not
have
a
password
after
reset
"
)
;
ok
(
!
token
.
isLoggedIn
(
)
"
Token
should
be
logged
out
of
after
reset
"
)
;
}
function
run_test
(
)
{
let
tokenDB
=
Cc
[
"
mozilla
.
org
/
security
/
pk11tokendb
;
1
"
]
.
getService
(
Ci
.
nsIPK11TokenDB
)
;
let
token
=
tokenDB
.
getInternalKeyToken
(
)
;
notEqual
(
token
null
"
The
internal
token
should
be
present
"
)
;
checkBasicAttributes
(
token
)
;
ok
(
!
token
.
isLoggedIn
(
)
"
Token
should
not
be
logged
into
yet
"
)
;
token
.
logoutSimple
(
)
;
ok
(
!
token
.
isLoggedIn
(
)
"
Token
should
still
not
be
logged
into
"
)
;
ok
(
!
token
.
hasPassword
"
Token
should
not
have
a
password
before
it
has
been
set
"
)
;
let
initialPW
=
"
foo
1234567890
~
!
#
%
^
&
*
(
)
-
_
=
+
{
[
}
]
|
\
\
:
;
'
\
"
<
.
>
/
?
"
;
token
.
initPassword
(
initialPW
)
;
token
.
login
(
false
)
;
ok
(
token
.
isLoggedIn
(
)
"
Token
should
now
be
logged
into
"
)
;
checkPasswordFeaturesAndResetPassword
(
token
initialPW
)
;
token
.
initPassword
(
"
arbitrary
"
)
;
ok
(
token
.
isLoggedIn
(
)
"
Token
should
be
logged
into
after
initializing
password
again
"
)
;
token
.
logoutSimple
(
)
;
ok
(
!
token
.
isLoggedIn
(
)
"
Token
should
be
logged
out
after
calling
logoutSimple
(
)
"
)
;
ok
(
!
token
.
isHardwareToken
(
)
"
The
internal
token
should
not
be
considered
a
hardware
token
"
)
;
ok
(
token
.
needsLogin
(
)
"
The
internal
token
should
always
need
authentication
"
)
;
}
