"
use
strict
"
;
do_get_profile
(
)
;
function
run_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
add_tls_server_setup
(
"
BadCertServer
"
"
bad_certs
"
)
;
let
fakeOCSPResponder
=
new
HttpServer
(
)
;
fakeOCSPResponder
.
registerPrefixHandler
(
"
/
"
function
(
request
response
)
{
response
.
setStatusLine
(
request
.
httpVersion
500
"
Internal
Server
Error
"
)
;
}
)
;
fakeOCSPResponder
.
start
(
8888
)
;
add_connection_test
(
"
good
.
include
-
subdomains
.
pinning
.
example
.
com
"
PRErrorCodeSuccess
null
function
withSecurityInfo
(
aSecInfo
)
{
equal
(
aSecInfo
.
failedCertChain
null
"
failedCertChain
for
a
successful
connection
should
be
null
"
)
;
ok
(
aSecInfo
.
succeededCertChain
.
equals
(
build_cert_chain
(
[
"
default
-
ee
"
"
test
-
ca
"
]
)
)
"
succeededCertChain
for
a
successful
connection
should
be
as
expected
"
)
;
}
)
;
add_connection_test
(
"
expired
.
example
.
com
"
SEC_ERROR_EXPIRED_CERTIFICATE
null
function
withSecurityInfo
(
aSecInfo
)
{
equal
(
aSecInfo
.
succeededCertChain
null
"
succeededCertChain
for
a
failed
connection
should
be
null
"
)
;
ok
(
aSecInfo
.
failedCertChain
.
equals
(
build_cert_chain
(
[
"
expired
-
ee
"
"
test
-
ca
"
]
)
)
"
failedCertChain
for
a
failed
connection
should
be
as
expected
"
)
;
}
)
;
let
overrideStatus
=
{
failedCertChain
:
build_cert_chain
(
[
"
expired
-
ee
"
"
test
-
ca
"
]
)
}
;
add_cert_override_test
(
"
expired
.
example
.
com
"
Ci
.
nsICertOverrideService
.
ERROR_TIME
SEC_ERROR_EXPIRED_CERTIFICATE
undefined
overrideStatus
)
;
run_next_test
(
)
;
}
