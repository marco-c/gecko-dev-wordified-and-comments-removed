"
use
strict
"
;
add_task
(
async
function
test_crlite_stash_corrupted
(
)
{
let
securityStateDirectory
=
do_get_profile
(
)
;
securityStateDirectory
.
append
(
"
security_state
"
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
crlite_mode
"
CRLiteModeEnforcePrefValue
)
;
let
coverage
=
do_get_file
(
"
test_crlite_preexisting
/
crlite
.
coverage
"
)
;
coverage
.
copyTo
(
securityStateDirectory
"
crlite
.
coverage
"
)
;
let
enrollment
=
do_get_file
(
"
test_crlite_preexisting
/
data
.
safe
.
bin
"
)
;
enrollment
.
copyTo
(
securityStateDirectory
"
data
.
safe
.
bin
"
)
;
let
filter
=
do_get_file
(
"
test_crlite_filters
/
20201017
-
0
-
filter
"
)
;
filter
.
copyTo
(
securityStateDirectory
"
crlite
.
filter
"
)
;
let
stash
=
do_get_file
(
"
test_crlite_corrupted
/
bad
.
stash
"
)
;
stash
.
copyTo
(
securityStateDirectory
"
crlite
.
stash
"
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
let
certStorage
=
Cc
[
"
mozilla
.
org
/
security
/
certstorage
;
1
"
]
.
getService
(
Ci
.
nsICertStorage
)
;
await
new
Promise
(
resolve
=
>
{
certStorage
.
hasPriorData
(
Ci
.
nsICertStorage
.
DATA_TYPE_CRLITE
(
rv
_
)
=
>
{
Assert
.
equal
(
rv
Cr
.
NS_OK
"
hasPriorData
should
succeed
"
)
;
resolve
(
)
;
}
)
;
}
)
;
let
revokedCert
=
constructCertFromFile
(
"
test_crlite_filters
/
revoked
.
pem
"
)
;
let
issuerCert
=
constructCertFromFile
(
"
test_crlite_filters
/
issuer
.
pem
"
)
;
ok
(
issuerCert
"
issuer
certificate
should
decode
successfully
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedCert
SEC_ERROR_REVOKED_CERTIFICATE
certificateUsageSSLServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
undefined
"
us
-
datarecovery
.
com
"
0
)
;
let
hasDB
=
await
new
Promise
(
resolve
=
>
{
certStorage
.
hasPriorData
(
Ci
.
nsICertStorage
.
DATA_TYPE_CRLITE
(
rv
result
)
=
>
{
Assert
.
equal
(
rv
Cr
.
NS_OK
"
hasPriorData
should
succeed
"
)
;
resolve
(
result
)
;
}
)
;
}
)
;
Assert
.
equal
(
hasDB
true
"
CRLite
should
have
a
database
"
)
;
let
hasFilter
=
await
new
Promise
(
resolve
=
>
{
certStorage
.
hasPriorData
(
Ci
.
nsICertStorage
.
DATA_TYPE_CRLITE_FILTER_FULL
(
rv
result
)
=
>
{
Assert
.
equal
(
rv
Cr
.
NS_OK
"
hasPriorData
should
succeed
"
)
;
resolve
(
result
)
;
}
)
;
}
)
;
Assert
.
equal
(
hasFilter
true
"
CRLite
should
have
a
filter
"
)
;
let
hasStash
=
await
new
Promise
(
resolve
=
>
{
certStorage
.
hasPriorData
(
Ci
.
nsICertStorage
.
DATA_TYPE_CRLITE_FILTER_INCREMENTAL
(
rv
result
)
=
>
{
Assert
.
equal
(
rv
Cr
.
NS_OK
"
hasPriorData
should
succeed
"
)
;
resolve
(
result
)
;
}
)
;
}
)
;
Assert
.
equal
(
hasStash
false
"
CRLite
should
not
have
a
stash
"
)
;
}
)
;
