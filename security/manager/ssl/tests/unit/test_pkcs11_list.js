"
use
strict
"
;
do_get_profile
(
)
;
Cc
[
"
mozilla
.
org
/
psm
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
;
const
gModuleDB
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11moduledb
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11ModuleDB
)
;
function
checkTestModuleNotPresent
(
)
{
let
modules
=
gModuleDB
.
listModules
(
)
;
ok
(
modules
.
hasMoreElements
(
)
"
One
or
more
modules
should
be
present
with
test
module
not
present
"
)
;
while
(
modules
.
hasMoreElements
(
)
)
{
let
module
=
modules
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPKCS11Module
)
;
notEqual
(
module
.
name
"
PKCS11
Test
Module
"
"
Non
-
test
module
name
shouldn
'
t
equal
'
PKCS11
Test
Module
'
"
)
;
}
}
function
checkTestModuleExists
(
)
{
let
modules
=
gModuleDB
.
listModules
(
)
;
ok
(
modules
.
hasMoreElements
(
)
"
One
or
more
modules
should
be
present
with
test
module
present
"
)
;
let
testModule
=
null
;
while
(
modules
.
hasMoreElements
(
)
)
{
let
module
=
modules
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPKCS11Module
)
;
if
(
module
.
name
=
=
"
PKCS11
Test
Module
"
)
{
testModule
=
module
;
break
;
}
}
notEqual
(
testModule
null
"
Test
module
should
have
been
found
"
)
;
return
testModule
;
}
function
run_test
(
)
{
let
libraryName
=
ctypes
.
libraryName
(
"
pkcs11testmodule
"
)
;
let
libraryFile
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsILocalFile
)
;
libraryFile
.
append
(
"
pkcs11testmodule
"
)
;
libraryFile
.
append
(
libraryName
)
;
ok
(
libraryFile
.
exists
(
)
"
The
pkcs11testmodule
file
should
exist
"
)
;
checkTestModuleNotPresent
(
)
;
let
pkcs11
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11
)
;
do_register_cleanup
(
(
)
=
>
{
try
{
pkcs11
.
deleteModule
(
"
PKCS11
Test
Module
"
)
;
}
catch
(
e
)
{
}
}
)
;
pkcs11
.
addModule
(
"
PKCS11
Test
Module
"
libraryFile
.
path
0
0
)
;
let
testModule
=
checkTestModuleExists
(
)
;
let
slots
=
testModule
.
listSlots
(
)
;
let
testModuleSlotCount
=
0
;
while
(
slots
.
hasMoreElements
(
)
)
{
let
slot
=
slots
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPKCS11Slot
)
;
equal
(
slot
.
name
"
Test
PKCS11
Slot
"
"
Test
module
slot
should
have
correct
name
"
)
;
testModuleSlotCount
+
+
;
}
equal
(
testModuleSlotCount
1
"
Test
module
should
only
have
one
slot
"
)
;
pkcs11
.
deleteModule
(
"
PKCS11
Test
Module
"
)
;
checkTestModuleNotPresent
(
)
;
}
