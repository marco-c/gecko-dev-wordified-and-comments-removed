"
use
strict
"
;
do_get_profile
(
)
;
const
gCertDB
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
const
PKCS12_FILE
=
"
test_certDB_import
/
cert_from_windows
.
pfx
"
;
const
CERT_COMMON_NAME
=
"
test_cert_from_windows
"
;
const
TEST_CERT_PASSWORD
=
"
"
;
const
TEST_OUTPUT_PASSWORD
=
"
other
password
"
;
let
gPasswordToUse
=
TEST_CERT_PASSWORD
;
const
gCertificateDialogs
=
{
confirmDownloadCACert
:
(
)
=
>
{
ok
(
false
"
confirmDownloadCACert
(
)
should
not
have
been
called
"
)
;
}
setPKCS12FilePassword
:
(
ctx
password
)
=
>
{
password
.
value
=
gPasswordToUse
;
return
true
;
}
getPKCS12FilePassword
:
(
ctx
password
)
=
>
{
password
.
value
=
gPasswordToUse
;
return
true
;
}
viewCert
:
(
ctx
cert
)
=
>
{
ok
(
false
"
viewCert
(
)
should
not
have
been
called
"
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsICertificateDialogs
]
)
}
;
var
gPrompt
=
{
clickOk
:
true
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIPrompt
]
)
alert
(
title
text
)
{
ok
(
false
"
Not
expecting
alert
to
be
called
.
"
)
;
}
promptPassword
(
dialogTitle
text
password
checkMsg
checkValue
)
{
ok
(
false
"
Not
expecting
a
password
prompt
.
"
)
;
return
false
;
}
}
;
const
gPromptFactory
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIPromptFactory
]
)
getPrompt
:
(
aWindow
aIID
)
=
>
gPrompt
}
;
function
findCertByCommonName
(
commonName
)
{
let
certEnumerator
=
gCertDB
.
getCerts
(
)
.
getEnumerator
(
)
;
while
(
certEnumerator
.
hasMoreElements
(
)
)
{
let
cert
=
certEnumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIX509Cert
)
;
if
(
cert
.
commonName
=
=
commonName
)
{
return
cert
;
}
}
return
null
;
}
function
run_test
(
)
{
let
certificateDialogsCID
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
nsCertificateDialogs
;
1
"
gCertificateDialogs
)
;
let
promptFactoryCID
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
prompter
;
1
"
gPromptFactory
)
;
registerCleanupFunction
(
(
)
=
>
{
MockRegistrar
.
unregister
(
certificateDialogsCID
)
;
MockRegistrar
.
unregister
(
promptFactoryCID
)
;
}
)
;
let
cert
=
findCertByCommonName
(
CERT_COMMON_NAME
)
;
equal
(
cert
null
"
cert
should
not
be
found
before
import
"
)
;
let
certFile
=
do_get_file
(
PKCS12_FILE
)
;
ok
(
certFile
{
PKCS12_FILE
}
should
exist
)
;
gPasswordToUse
=
TEST_CERT_PASSWORD
;
gCertDB
.
importPKCS12File
(
certFile
)
;
cert
=
findCertByCommonName
(
CERT_COMMON_NAME
)
;
notEqual
(
cert
null
"
cert
should
be
found
now
"
)
;
let
output
=
do_get_tempdir
(
)
;
output
.
append
(
"
output
.
p12
"
)
;
ok
(
!
output
.
exists
(
)
"
output
shouldn
'
t
exist
before
exporting
PKCS12
file
"
)
;
gPasswordToUse
=
TEST_OUTPUT_PASSWORD
;
gCertDB
.
exportPKCS12File
(
output
1
[
cert
]
)
;
ok
(
output
.
exists
(
)
"
output
should
exist
after
exporting
PKCS12
file
"
)
;
gCertDB
.
importPKCS12File
(
output
)
;
output
.
remove
(
false
)
;
}
