"
use
strict
"
;
var
gMockPrompter
=
{
passwordToTry
:
"
password
"
numPrompts
:
0
promptPassword
(
dialogTitle
text
password
checkMsg
checkValue
)
{
this
.
numPrompts
+
+
;
if
(
this
.
numPrompts
>
1
)
{
return
false
;
}
equal
(
text
"
Please
enter
your
master
password
.
"
"
password
prompt
text
should
be
as
expected
"
)
;
equal
(
checkMsg
null
"
checkMsg
should
be
null
"
)
;
ok
(
this
.
passwordToTry
"
passwordToTry
should
be
non
-
null
"
)
;
password
.
value
=
this
.
passwordToTry
;
return
true
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIPrompt
"
]
)
}
;
var
gWindowWatcher
=
{
getNewPrompter
:
(
)
=
>
gMockPrompter
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIWindowWatcher
"
]
)
}
;
function
run_test
(
)
{
let
windowWatcherCID
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
embedcomp
/
window
-
watcher
;
1
"
gWindowWatcher
)
;
registerCleanupFunction
(
(
)
=
>
{
MockRegistrar
.
unregister
(
windowWatcherCID
)
;
}
)
;
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
profd
=
env
.
get
(
"
XPCSHELL_TEST_PROFILE_DIR
"
)
;
let
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
file
.
initWithPath
(
profd
)
;
file
.
append
(
"
'
1
"
)
;
env
.
set
(
"
XPCSHELL_TEST_PROFILE_DIR
"
file
.
path
)
;
let
profile
=
do_get_profile
(
)
;
Assert
.
ok
(
/
[
^
\
x20
-
\
x7f
]
/
.
test
(
profile
.
path
)
"
the
profile
path
should
contain
a
non
-
ASCII
character
"
)
;
let
key3DBFile
=
do_get_file
(
"
test_sdr_preexisting_with_password
/
key3
.
db
"
)
;
key3DBFile
.
copyTo
(
profile
"
key3
.
db
"
)
;
let
key4DBFile
=
do_get_file
(
"
test_sdr_preexisting_with_password
/
key4
.
db
"
)
;
key4DBFile
.
copyTo
(
profile
"
key4
.
db
"
)
;
let
sdr
=
Cc
[
"
mozilla
.
org
/
security
/
sdr
;
1
"
]
.
getService
(
Ci
.
nsISecretDecoderRing
)
;
let
testcases
=
[
{
ciphertext
:
"
MDoEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECGeDHwVfyFqzBBAYvqMq
/
kDMsrARVNdC1C8d
"
plaintext
:
"
password
"
}
{
ciphertext
:
"
MDIEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECCAzLDVmYG2
/
BAh3IoIsMmT8dQ
=
=
"
plaintext
:
"
a
"
}
{
ciphertext
:
"
MDIEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECPN8zlZzn8FdBAiu2acpT8UHsg
=
=
"
plaintext
:
"
bb
"
}
{
ciphertext
:
"
MDIEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECD5px1eMKkJQBAgUPp35GlrDvQ
=
=
"
plaintext
:
"
!
seven
!
"
}
{
ciphertext
:
"
MDIEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECMh0hLtKDyUdBAixw9UZsMt
+
vA
=
=
"
plaintext
:
"
sixsix
"
}
{
ciphertext
:
"
MFoEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECDRX1qi
+
/
FX1BDATFIcIneQjvBuq3wdFxzllJt2VtUD69ACdOKAXH3eA87oHDvuHqOeCDwRy4UzoG5s
=
"
plaintext
:
"
thisismuchlongerandsotakesupmultipleblocks
"
}
{
ciphertext
:
"
MFoEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECDRX1qi
+
/
FX1BDAbFIcIneQjvBuq3wdFxzllJt2VtUD69ACdOKAXH3eA87oHDvuHqOeCDwRy4UzoG5s
=
"
plaintext
:
"
nnLbuwLRkhlongerandsotakesupmultipleblocks
"
}
]
;
for
(
let
testcase
of
testcases
)
{
let
decrypted
=
sdr
.
decryptString
(
testcase
.
ciphertext
)
;
equal
(
decrypted
testcase
.
plaintext
"
decrypted
ciphertext
should
match
expected
plaintext
"
)
;
}
equal
(
gMockPrompter
.
numPrompts
1
"
Should
have
been
prompted
for
a
password
once
"
)
;
let
key3DBInProfile
=
do_get_profile
(
)
;
key3DBInProfile
.
append
(
"
key3
.
db
"
)
;
ok
(
!
key3DBInProfile
.
exists
(
)
"
key3
.
db
should
not
exist
after
running
with
key4
.
db
with
a
password
"
)
;
}
