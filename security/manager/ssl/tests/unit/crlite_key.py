import
sys
import
base64
from
cryptography
import
x509
from
cryptography
.
hazmat
.
primitives
import
serialization
from
cryptography
.
hazmat
.
primitives
import
hashes
def
uint_to_serial_bytes
(
a
)
:
    
assert
a
>
=
0
    
bit_len
=
1
+
a
.
bit_length
(
)
    
byte_len
=
(
bit_len
+
7
)
/
/
8
    
return
a
.
to_bytes
(
byte_len
byteorder
=
"
big
"
signed
=
False
)
if
len
(
sys
.
argv
)
!
=
3
:
    
print
(
f
"
Usage
:
{
sys
.
argv
[
0
]
}
<
path
to
issuer
cert
>
<
path
to
subscriber
cert
>
"
)
    
sys
.
exit
(
1
)
with
open
(
sys
.
argv
[
1
]
"
r
"
)
as
f
:
    
issuer
=
x509
.
load_pem_x509_certificate
(
f
.
read
(
)
.
encode
(
"
utf
-
8
"
)
backend
=
None
)
with
open
(
sys
.
argv
[
2
]
"
r
"
)
as
f
:
    
subscriber
=
x509
.
load_pem_x509_certificate
(
f
.
read
(
)
.
encode
(
"
utf
-
8
"
)
backend
=
None
)
assert
issuer
.
subject
.
public_bytes
(
)
=
=
subscriber
.
issuer
.
public_bytes
(
)
issuer_spki
=
issuer
.
public_key
(
)
.
public_bytes
(
    
format
=
serialization
.
PublicFormat
.
SubjectPublicKeyInfo
    
encoding
=
serialization
.
Encoding
.
DER
)
hasher
=
hashes
.
Hash
(
hashes
.
SHA256
(
)
backend
=
None
)
hasher
.
update
(
issuer_spki
)
issuer_spki_hash
=
hasher
.
finalize
(
)
subscriber_serial
=
uint_to_serial_bytes
(
int
(
subscriber
.
serial_number
)
)
print
(
base64
.
urlsafe_b64encode
(
issuer_spki_hash
)
.
decode
(
"
utf
-
8
"
)
)
print
(
subscriber_serial
.
hex
(
)
)
