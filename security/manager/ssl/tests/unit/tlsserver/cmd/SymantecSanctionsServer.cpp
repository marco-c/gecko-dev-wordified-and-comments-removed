#
include
<
stdio
.
h
>
#
include
"
TLSServer
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
test
;
struct
SymantecCertHost
{
const
char
*
mHostName
;
const
char
*
mCertName
;
}
;
const
SymantecCertHost
sSymantecCertHosts
[
]
=
{
{
"
symantec
-
whitelist
-
after
-
cutoff
.
example
.
com
"
"
ee
-
from
-
whitelist
-
after
-
cutoff
"
}
{
"
symantec
-
whitelist
-
before
-
cutoff
.
example
.
com
"
"
ee
-
from
-
whitelist
-
before
-
cutoff
"
}
{
"
symantec
-
not
-
whitelisted
-
after
-
cutoff
.
example
.
com
"
"
ee
-
not
-
whitelisted
-
after
-
cutoff
"
}
{
"
symantec
-
not
-
whitelisted
-
before
-
cutoff
.
example
.
com
"
"
ee
-
not
-
whitelisted
-
before
-
cutoff
"
}
{
"
symantec
-
unaffected
.
example
.
com
"
"
ee
-
unaffected
"
}
{
nullptr
nullptr
}
}
;
int32_t
DoSNISocketConfigBySubjectCN
(
PRFileDesc
*
aFd
const
SECItem
*
aSrvNameArr
uint32_t
aSrvNameArrSize
)
{
for
(
uint32_t
i
=
0
;
i
<
aSrvNameArrSize
;
i
+
+
)
{
UniquePORTString
name
(
static_cast
<
char
*
>
(
PORT_ZAlloc
(
aSrvNameArr
[
i
]
.
len
+
1
)
)
)
;
if
(
name
)
{
PORT_Memcpy
(
name
.
get
(
)
aSrvNameArr
[
i
]
.
data
aSrvNameArr
[
i
]
.
len
)
;
if
(
ConfigSecureServerWithNamedCert
(
aFd
name
.
get
(
)
nullptr
nullptr
nullptr
)
=
=
SECSuccess
)
{
return
0
;
}
}
}
return
SSL_SNI_SEND_ALERT
;
}
int32_t
DoSNISocketConfig
(
PRFileDesc
*
aFd
const
SECItem
*
aSrvNameArr
uint32_t
aSrvNameArrSize
void
*
aArg
)
{
const
SymantecCertHost
*
host
=
GetHostForSNI
(
aSrvNameArr
aSrvNameArrSize
sSymantecCertHosts
)
;
if
(
!
host
)
{
return
DoSNISocketConfigBySubjectCN
(
aFd
aSrvNameArr
aSrvNameArrSize
)
;
}
if
(
gDebugLevel
>
=
DEBUG_VERBOSE
)
{
fprintf
(
stderr
"
found
pre
-
defined
host
'
%
s
'
\
n
"
host
-
>
mHostName
)
;
}
UniqueCERTCertificate
cert
;
SSLKEAType
certKEA
;
if
(
SECSuccess
!
=
ConfigSecureServerWithNamedCert
(
aFd
host
-
>
mCertName
&
cert
&
certKEA
nullptr
)
)
{
return
SSL_SNI_SEND_ALERT
;
}
return
0
;
}
int
main
(
int
argc
char
*
argv
[
]
)
{
return
StartServer
(
argc
argv
DoSNISocketConfig
nullptr
)
;
}
