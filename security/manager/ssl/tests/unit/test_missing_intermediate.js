"
use
strict
"
;
const
{
TestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
function
run_certutil_on_directory
(
directory
args
)
{
let
envSvc
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
greBinDir
=
Services
.
dirsvc
.
get
(
"
GreBinD
"
Ci
.
nsIFile
)
;
envSvc
.
set
(
"
DYLD_LIBRARY_PATH
"
greBinDir
.
path
)
;
envSvc
.
set
(
"
LD_LIBRARY_PATH
"
greBinDir
.
path
+
"
:
/
data
/
local
/
xpcb
"
)
;
let
certutilBin
=
_getBinaryUtil
(
"
certutil
"
)
;
let
process
=
Cc
[
"
mozilla
.
org
/
process
/
util
;
1
"
]
.
createInstance
(
Ci
.
nsIProcess
)
;
process
.
init
(
certutilBin
)
;
args
.
push
(
"
-
d
"
)
;
args
.
push
(
sql
:
{
directory
}
)
;
process
.
run
(
true
args
args
.
length
)
;
Assert
.
equal
(
process
.
exitValue
0
"
certutil
should
succeed
"
)
;
}
registerCleanupFunction
(
(
)
=
>
{
let
certDir
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
certDir
.
append
(
"
bad_certs
"
)
;
Assert
.
ok
(
certDir
.
exists
(
)
"
bad_certs
should
exist
"
)
;
let
args
=
[
"
-
D
"
"
-
n
"
"
manually
-
added
-
missing
-
intermediate
"
]
;
run_certutil_on_directory
(
certDir
.
path
args
)
;
}
)
;
function
run_test
(
)
{
add_tls_server_setup
(
"
BadCertAndPinningServer
"
"
bad_certs
"
)
;
add_connection_test
(
"
ee
-
from
-
missing
-
intermediate
.
example
.
com
"
SEC_ERROR_UNKNOWN_ISSUER
)
;
add_test
(
(
)
=
>
{
let
args
=
[
"
-
A
"
"
-
n
"
"
manually
-
added
-
missing
-
intermediate
"
"
-
i
"
"
test_missing_intermediate
/
missing
-
intermediate
.
pem
"
"
-
a
"
"
-
t
"
"
"
]
;
let
certDir
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
certDir
.
append
(
"
bad_certs
"
)
;
Assert
.
ok
(
certDir
.
exists
(
)
"
bad_certs
should
exist
"
)
;
run_certutil_on_directory
(
certDir
.
path
args
)
;
run_next_test
(
)
;
}
)
;
add_test
(
(
)
=
>
{
TestUtils
.
topicObserved
(
"
psm
:
intermediate
-
certs
-
cached
"
)
.
then
(
run_next_test
)
;
run_next_test
(
)
;
}
)
;
add_connection_test
(
"
ee
-
from
-
missing
-
intermediate
.
example
.
com
"
PRErrorCodeSuccess
)
;
add_test
(
(
)
=
>
{
}
)
;
add_test
(
(
)
=
>
{
let
args
=
[
"
-
D
"
"
-
n
"
"
Missing
Intermediate
"
]
;
run_certutil_on_directory
(
do_get_profile
(
)
.
path
args
)
;
run_next_test
(
)
;
}
)
;
add_connection_test
(
"
ee
-
from
-
missing
-
intermediate
.
example
.
com
"
PRErrorCodeSuccess
)
;
run_next_test
(
)
;
}
