"
use
strict
"
;
function
run_test
(
)
{
do_get_profile
(
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
OCSP
.
require
"
true
)
;
add_tls_server_setup
(
"
OCSPStaplingServer
"
"
ocsp_certs
"
)
;
let
args
=
[
[
"
good
"
"
default
-
ee
"
"
unused
"
0
]
]
;
let
ocspResponses
=
generateOCSPResponses
(
args
"
ocsp_certs
"
)
;
let
goodOCSPResponse
=
ocspResponses
[
0
]
;
let
ocspResponder
=
new
HttpServer
(
)
;
ocspResponder
.
registerPrefixHandler
(
"
/
"
function
(
request
response
)
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
ocsp
-
response
"
)
;
response
.
write
(
goodOCSPResponse
)
;
}
)
;
ocspResponder
.
start
(
8888
)
;
add_connection_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
)
;
add_test
(
function
(
)
{
run_next_test
(
)
;
}
)
;
add_test
(
function
(
)
{
ocspResponder
.
stop
(
run_next_test
)
;
}
)
;
let
SSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
let
uri
=
Services
.
io
.
newURI
(
"
http
:
/
/
localhost
"
)
;
let
secInfo
=
new
FakeTransportSecurityInfo
(
)
;
SSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
"
max
-
age
=
10000
"
secInfo
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
ok
(
SSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
)
"
Domain
for
the
OCSP
AIA
URI
should
be
considered
a
HSTS
host
otherwise
"
+
"
we
wouldn
'
t
be
testing
what
we
think
we
'
re
testing
"
)
;
run_next_test
(
)
;
}
