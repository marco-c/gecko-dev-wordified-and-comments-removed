"
use
strict
"
;
var
gSocketListener
=
{
onSocketAccepted
(
serverSocket
socketTransport
)
{
socketTransport
.
setTimeout
(
Ci
.
nsISocketTransport
.
TIMEOUT_CONNECT
30
)
;
socketTransport
.
setTimeout
(
Ci
.
nsISocketTransport
.
TIMEOUT_READ_WRITE
30
)
;
}
onStopListening
(
serverSocket
status
)
{
}
}
;
function
run_test
(
)
{
do_get_profile
(
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
add_tls_server_setup
(
"
OCSPStaplingServer
"
"
ocsp_certs
"
)
;
let
socket
=
Cc
[
"
mozilla
.
org
/
network
/
server
-
socket
;
1
"
]
.
createInstance
(
Ci
.
nsIServerSocket
)
;
socket
.
init
(
8888
true
-
1
)
;
socket
.
asyncListen
(
gSocketListener
)
;
add_one_test
(
false
"
security
.
OCSP
.
timeoutMilliseconds
.
soft
"
1000
)
;
add_one_test
(
false
"
security
.
OCSP
.
timeoutMilliseconds
.
soft
"
2000
)
;
add_one_test
(
false
"
security
.
OCSP
.
timeoutMilliseconds
.
soft
"
4000
)
;
add_one_test
(
true
"
security
.
OCSP
.
timeoutMilliseconds
.
hard
"
3000
)
;
add_one_test
(
true
"
security
.
OCSP
.
timeoutMilliseconds
.
hard
"
10000
)
;
add_one_test
(
true
"
security
.
OCSP
.
timeoutMilliseconds
.
hard
"
15000
)
;
add_test
(
function
(
)
{
socket
.
close
(
)
;
run_next_test
(
)
;
}
)
;
run_next_test
(
)
;
}
function
add_one_test
(
useHardFail
timeoutPrefName
timeoutMilliseconds
)
{
let
startTime
;
add_test
(
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
security
.
OCSP
.
require
"
useHardFail
)
;
Services
.
prefs
.
setIntPref
(
timeoutPrefName
timeoutMilliseconds
)
;
startTime
=
new
Date
(
)
;
run_next_test
(
)
;
}
)
;
add_connection_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
useHardFail
?
SEC_ERROR_OCSP_SERVER_ERROR
:
PRErrorCodeSuccess
clearSessionCache
)
;
add_test
(
function
(
)
{
let
endTime
=
new
Date
(
)
;
let
timeDifference
=
endTime
-
startTime
;
do_print
(
useHardFail
=
{
useHardFail
}
)
;
do_print
(
startTime
=
{
startTime
.
getTime
(
)
}
(
{
startTime
}
)
)
;
do_print
(
endTime
=
{
endTime
.
getTime
(
)
}
(
{
endTime
}
)
)
;
do_print
(
timeDifference
=
{
timeDifference
}
ms
)
;
const
FUZZ_MS
=
300
;
ok
(
timeDifference
+
FUZZ_MS
>
timeoutMilliseconds
OCSP
timeout
should
be
~
{
timeoutMilliseconds
}
s
for
+
{
useHardFail
?
"
hard
"
:
"
soft
"
}
-
fail
)
;
ok
(
timeDifference
<
60000
"
Automatic
OCSP
timeout
shouldn
'
t
be
more
than
60s
"
)
;
clearOCSPCache
(
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
OCSP
.
require
"
)
;
Services
.
prefs
.
clearUserPref
(
timeoutPrefName
)
;
run_next_test
(
)
;
}
)
;
}
