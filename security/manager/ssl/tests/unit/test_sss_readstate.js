"
use
strict
"
;
function
run_test
(
)
{
let
stateFile
=
do_get_profile
(
)
;
stateFile
.
append
(
SSS_STATE_FILE_NAME
)
;
ok
(
!
stateFile
.
exists
(
)
)
;
let
outputStream
=
FileUtils
.
openFileOutputStream
(
stateFile
)
;
let
now
=
Date
.
now
(
)
;
let
keyValuePairs
=
[
{
key
:
"
expired
.
example
.
com
"
value
:
{
now
-
100000
}
1
0
}
{
key
:
"
notexpired
.
example
.
com
"
value
:
{
now
+
100000
}
1
0
}
{
key
:
"
includesubdomains
.
preloaded
.
test
"
value
:
{
now
+
100000
}
1
0
}
{
key
:
"
incsubdomain
.
example
.
com
"
value
:
{
now
+
100000
}
1
1
}
{
key
:
"
includesubdomains2
.
preloaded
.
test
"
value
:
"
0
2
0
"
}
]
;
for
(
let
keyValuePair
of
keyValuePairs
)
{
append_line_to_data_storage_file
(
outputStream
1
1
keyValuePair
.
key
keyValuePair
.
value
)
;
}
append_line_to_data_storage_file
(
outputStream
1
1
"
badchecksum
.
example
.
com
"
{
now
+
100000
}
1
0
24
true
)
;
outputStream
.
close
(
)
;
let
siteSecurityService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
notEqual
(
siteSecurityService
null
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
expired
.
example
.
com
"
)
)
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
notexpired
.
example
.
com
"
)
)
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
includesubdomains
.
preloaded
.
test
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
sub
.
includesubdomains
.
preloaded
.
test
"
)
)
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
incsubdomain
.
example
.
com
"
)
)
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
sub
.
incsubdomain
.
example
.
com
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
includesubdomains2
.
preloaded
.
test
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
sub
.
includesubdomains2
.
preloaded
.
test
"
)
)
)
;
siteSecurityService
.
clearAll
(
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
expired
.
example
.
com
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
notexpired
.
example
.
com
"
)
)
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
includesubdomains
.
preloaded
.
test
"
)
)
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
sub
.
includesubdomains
.
preloaded
.
test
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
incsubdomain
.
example
.
com
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
sub
.
incsubdomain
.
example
.
com
"
)
)
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
includesubdomains2
.
preloaded
.
test
"
)
)
)
;
ok
(
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
sub
.
includesubdomains2
.
preloaded
.
test
"
)
)
)
;
ok
(
!
siteSecurityService
.
isSecureURI
(
Services
.
io
.
newURI
(
"
https
:
/
/
badchecksum
.
example
.
com
"
)
)
)
;
}
