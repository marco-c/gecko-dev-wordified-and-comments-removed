"
use
strict
"
;
const
certService
=
Cc
[
"
mozilla
.
org
/
security
/
local
-
cert
-
service
;
1
"
]
.
getService
(
Ci
.
nsILocalCertService
)
;
const
gNickname
=
"
local
-
cert
-
test
"
;
function
run_test
(
)
{
do_get_profile
(
)
;
Cc
[
"
mozilla
.
org
/
psm
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
;
run_next_test
(
)
;
}
function
getOrCreateCert
(
nickname
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
certService
.
getOrCreateCert
(
nickname
{
handleCert
(
c
rv
)
{
if
(
rv
)
{
reject
(
rv
)
;
return
;
}
resolve
(
c
)
;
}
}
)
;
}
)
;
}
function
removeCert
(
nickname
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
certService
.
removeCert
(
nickname
{
handleResult
(
rv
)
{
if
(
rv
)
{
reject
(
rv
)
;
return
;
}
resolve
(
)
;
}
}
)
;
}
)
;
}
add_task
(
async
function
(
)
{
ok
(
!
certService
.
loginPromptRequired
)
;
let
certA
=
await
getOrCreateCert
(
gNickname
)
;
equal
(
certA
.
displayName
gNickname
)
;
let
certB
=
await
getOrCreateCert
(
gNickname
)
;
equal
(
certB
.
displayName
gNickname
)
;
ok
(
areCertsEqual
(
certA
certB
)
)
;
equal
(
certA
.
certType
Ci
.
nsIX509Cert
.
USER_CERT
)
;
let
diffNameCert
=
await
getOrCreateCert
(
"
cool
-
stuff
"
)
;
ok
(
!
areCertsEqual
(
diffNameCert
certA
)
)
;
await
removeCert
(
gNickname
)
;
let
newCert
=
await
getOrCreateCert
(
gNickname
)
;
ok
(
!
areCertsEqual
(
newCert
certA
)
)
;
let
serial
=
newCert
.
serialNumber
;
certA
=
certB
=
diffNameCert
=
newCert
=
null
;
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
let
certAfterGC
=
await
getOrCreateCert
(
gNickname
)
;
equal
(
certAfterGC
.
serialNumber
serial
)
;
}
)
;
