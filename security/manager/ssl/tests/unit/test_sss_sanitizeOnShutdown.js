"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
Sanitizer
:
"
resource
:
/
/
/
modules
/
Sanitizer
.
sys
.
mjs
"
TestUtils
:
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
}
)
;
Sanitizer
.
onStartup
(
)
;
Cc
[
"
mozilla
.
org
/
serviceworkers
/
manager
;
1
"
]
.
getService
(
Ci
.
nsIServiceWorkerManager
)
;
add_task
(
async
function
run_test
(
)
{
do_get_profile
(
)
;
let
SSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
let
header
=
"
max
-
age
=
50000
"
;
SSService
.
processHeader
(
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
"
)
header
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
stateFileContents
=
get_data_storage_contents
(
SSS_STATE_FILE_NAME
)
;
return
stateFileContents
.
includes
(
"
example
.
com
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
Sanitizer
.
PREF_SHUTDOWN_BRANCH
+
"
siteSettings
"
true
)
;
Services
.
prefs
.
setBoolPref
(
Sanitizer
.
PREF_SANITIZE_ON_SHUTDOWN
true
)
;
Services
.
startup
.
advanceShutdownPhase
(
Services
.
startup
.
SHUTDOWN_PHASE_APPSHUTDOWNTEARDOWN
)
;
Services
.
startup
.
advanceShutdownPhase
(
Services
.
startup
.
SHUTDOWN_PHASE_APPSHUTDOWN
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
stateFile
=
do_get_profile
(
)
;
stateFile
.
append
(
SSS_STATE_FILE_NAME
)
;
return
!
stateFile
.
exists
(
)
;
}
)
;
}
)
;
