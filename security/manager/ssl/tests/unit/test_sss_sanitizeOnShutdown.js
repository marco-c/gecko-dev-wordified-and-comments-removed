"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
TestUtils
:
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
Sanitizer
:
"
resource
:
/
/
/
modules
/
Sanitizer
.
jsm
"
}
)
;
Sanitizer
.
onStartup
(
)
;
function
getStateFileContents
(
)
{
let
stateFile
=
do_get_profile
(
)
;
stateFile
.
append
(
SSS_STATE_FILE_NAME
)
;
ok
(
stateFile
.
exists
(
)
)
;
return
readFile
(
stateFile
)
;
}
add_task
(
async
function
run_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
test
.
datastorage
.
write_timer_ms
"
100
)
;
do_get_profile
(
)
;
let
SSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
let
secInfo
=
Cc
[
"
mozilla
.
org
/
security
/
transportsecurityinfo
;
1
"
]
.
createInstance
(
Ci
.
nsITransportSecurityInfo
)
;
let
header
=
"
max
-
age
=
50000
"
;
SSService
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
"
)
header
secInfo
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
await
TestUtils
.
topicObserved
(
"
data
-
storage
-
written
"
(
_
data
)
=
>
data
=
=
SSS_STATE_FILE_NAME
)
;
let
stateFileContents
=
getStateFileContents
(
)
;
ok
(
stateFileContents
.
includes
(
"
example
.
com
"
)
"
should
have
written
out
state
file
"
)
;
Services
.
prefs
.
setBoolPref
(
Sanitizer
.
PREF_SHUTDOWN_BRANCH
+
"
siteSettings
"
true
)
;
Services
.
prefs
.
setBoolPref
(
Sanitizer
.
PREF_SANITIZE_ON_SHUTDOWN
true
)
;
Services
.
obs
.
notifyObservers
(
null
"
profile
-
change
-
teardown
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
profile
-
before
-
change
"
)
;
equal
(
getStateFileContents
(
)
"
"
"
state
file
should
be
empty
"
)
;
}
)
;
