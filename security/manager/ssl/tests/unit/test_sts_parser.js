"
use
strict
"
;
let
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
let
sslStatus
=
new
FakeSSLStatus
(
)
;
function
testSuccess
(
header
expectedMaxAge
expectedIncludeSubdomains
)
{
let
dummyUri
=
Services
.
io
.
newURI
(
"
https
:
/
/
foo
.
com
/
bar
.
html
"
)
;
let
maxAge
=
{
}
;
let
includeSubdomains
=
{
}
;
sss
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
dummyUri
header
sslStatus
0
maxAge
includeSubdomains
)
;
equal
(
maxAge
.
value
expectedMaxAge
"
Did
not
correctly
parse
maxAge
"
)
;
equal
(
includeSubdomains
.
value
expectedIncludeSubdomains
"
Did
not
correctly
parse
presence
/
absence
of
includeSubdomains
"
)
;
}
function
testFailure
(
header
)
{
let
dummyUri
=
Services
.
io
.
newURI
(
"
https
:
/
/
foo
.
com
/
bar
.
html
"
)
;
let
maxAge
=
{
}
;
let
includeSubdomains
=
{
}
;
throws
(
(
)
=
>
{
sss
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
dummyUri
header
sslStatus
0
maxAge
includeSubdomains
)
;
}
"
Parsed
invalid
header
:
"
+
header
)
;
}
function
run_test
(
)
{
testSuccess
(
"
max
-
age
=
100
"
100
false
)
;
testSuccess
(
"
max
-
age
=
100
"
100
false
)
;
testSuccess
(
"
max
-
age
=
100
"
100
false
)
;
testSuccess
(
"
max
-
age
=
100
"
100
false
)
;
testSuccess
(
'
max
-
age
=
"
100
"
'
100
false
)
;
testSuccess
(
'
max
-
age
=
"
100
"
'
100
false
)
;
testSuccess
(
'
max
-
age
=
"
100
"
'
100
false
)
;
testSuccess
(
"
\
tmax
-
age
\
t
=
\
t
\
"
100
\
"
\
t
"
100
false
)
;
testSuccess
(
"
max
-
age
=
100
"
100
false
)
;
testSuccess
(
"
maX
-
aGe
=
100
"
100
false
)
;
testSuccess
(
"
MAX
-
age
=
100
"
100
false
)
;
testSuccess
(
"
max
-
AGE
=
100
"
100
false
)
;
testSuccess
(
"
Max
-
Age
=
100
"
100
false
)
;
testSuccess
(
"
MAX
-
AGE
=
100
"
100
false
)
;
testSuccess
(
"
max
-
age
=
100
;
includeSubdomains
"
100
true
)
;
testSuccess
(
"
max
-
age
=
100
\
t
;
includeSubdomains
"
100
true
)
;
testSuccess
(
"
max
-
age
=
100
;
includeSubdomains
"
100
true
)
;
testSuccess
(
"
max
-
age
=
100
;
includeSubdomains
"
100
true
)
;
testSuccess
(
"
max
-
age
=
100
;
includeSubdomains
"
100
true
)
;
testSuccess
(
"
maX
-
aGe
=
100
;
includeSUBDOMAINS
"
100
true
)
;
testSuccess
(
"
MAX
-
age
=
100
;
includeSubDomains
"
100
true
)
;
testSuccess
(
"
max
-
AGE
=
100
;
iNcLuDeSuBdoMaInS
"
100
true
)
;
testSuccess
(
"
Max
-
Age
=
100
;
includesubdomains
"
100
true
)
;
testSuccess
(
"
INCLUDESUBDOMAINS
;
MaX
-
AgE
=
100
"
100
true
)
;
testSuccess
(
"
max
-
age
=
100
;
includeSubdomains
;
"
100
true
)
;
testSuccess
(
"
max
-
age
=
100
;
includesubdomainsSomeStuff
"
100
false
)
;
testSuccess
(
"
\
r
\
n
\
t
\
t
\
tcompletelyUnrelated
=
foobar
;
max
-
age
=
34520103
"
+
"
\
t
\
t
;
alsoUnrelated
;
asIsThis
;
\
tincludeSubdomains
\
t
\
t
\
t
"
34520103
true
)
;
testSuccess
(
'
max
-
age
=
100
;
unrelated
=
"
quoted
\
\
"
thingy
\
\
"
"
'
100
false
)
;
testFailure
(
"
max
-
age
"
)
;
testFailure
(
"
max
-
age
"
)
;
testFailure
(
"
max
-
age
=
p
"
)
;
testFailure
(
"
max
-
age
=
*
1p2
"
)
;
testFailure
(
"
max
-
age
=
.
20032
"
)
;
testFailure
(
"
max
-
age
=
!
20032
"
)
;
testFailure
(
"
max
-
age
=
=
20032
"
)
;
testFailure
(
"
foobar
"
)
;
testFailure
(
"
maxage
=
100
"
)
;
testFailure
(
"
maxa
-
ge
=
100
"
)
;
testFailure
(
"
max
-
ag
=
100
"
)
;
testFailure
(
"
includesubdomains
"
)
;
testFailure
(
"
;
"
)
;
testFailure
(
'
max
-
age
=
"
100
'
)
;
testFailure
(
"
max
-
age
=
100
max
-
age
=
200
;
includeSubdomains
"
)
;
testFailure
(
"
max
-
age
=
100
includesubdomains
"
)
;
testFailure
(
"
max
-
age
=
100
bar
foo
"
)
;
testFailure
(
"
max
-
age
=
100randomstuffhere
"
)
;
testFailure
(
"
max
-
age
=
100
;
max
-
age
=
200
"
)
;
testFailure
(
"
includeSubdomains
;
max
-
age
=
200
;
includeSubdomains
"
)
;
testFailure
(
"
max
-
age
=
200
;
includeSubdomains
;
includeSubdomains
"
)
;
testFailure
(
"
max
-
age
=
100
;
includeSubdomains
=
unexpected
"
)
;
testFailure
(
"
\
r
\
nmax
-
age
=
200
"
)
;
}
