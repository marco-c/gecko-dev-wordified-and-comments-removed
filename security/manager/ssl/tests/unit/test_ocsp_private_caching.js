"
use
strict
"
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
const
SERVER_PORT
=
8888
;
function
start_ocsp_responder
(
expectedCertNames
expectedPaths
expectedMethods
)
{
return
startOCSPResponder
(
SERVER_PORT
"
www
.
example
.
com
"
"
test_ocsp_fetch_method
"
expectedCertNames
expectedPaths
expectedMethods
)
;
}
function
add_flush_cache
(
)
{
add_test
(
(
)
=
>
{
let
observed
=
false
;
let
observer
=
{
observe
:
(
)
=
>
{
if
(
!
observed
)
{
observed
=
true
;
run_next_test
(
)
;
}
}
}
;
Services
.
cache2
.
QueryInterface
(
Ci
.
nsICacheTesting
)
.
flush
(
observer
)
;
}
)
;
}
function
add_ocsp_necko_cache_test
(
loadContext
shouldFindEntry
)
{
add_test
(
(
)
=
>
{
Services
.
cache2
.
clear
(
)
;
run_next_test
(
)
;
}
)
;
add_flush_cache
(
)
;
let
responder
;
add_test
(
(
)
=
>
{
clearOCSPCache
(
)
;
clearSessionCache
(
)
;
responder
=
startOCSPResponder
(
SERVER_PORT
"
localhost
"
"
ocsp_certs
"
[
"
default
-
ee
"
]
[
]
[
]
[
]
[
[
"
Cache
-
Control
"
"
max
-
age
:
1000
"
]
]
)
;
run_next_test
(
)
;
}
)
;
add_connection_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
null
null
null
loadContext
.
originAttributes
)
;
add_flush_cache
(
)
;
add_test
(
(
)
=
>
{
let
foundEntry
=
false
;
let
visitor
=
{
onCacheStorageInfo
(
)
{
}
onCacheEntryInfo
(
aURI
aIdEnhance
aDataSize
aFetchCount
aLastModifiedTime
aExpirationTime
aPinned
aInfo
)
{
Assert
.
equal
(
aURI
.
spec
"
http
:
/
/
localhost
:
8888
/
"
"
expected
OCSP
request
URI
should
match
"
)
;
foundEntry
=
true
;
}
onCacheEntryVisitCompleted
(
)
{
Assert
.
equal
(
foundEntry
shouldFindEntry
"
should
only
find
a
cached
entry
if
we
'
re
expecting
one
"
)
;
run_next_test
(
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsICacheStorageVisitor
"
]
)
}
;
Services
.
cache2
.
asyncVisitAllStorages
(
visitor
true
)
;
}
)
;
add_test
(
(
)
=
>
{
responder
.
stop
(
run_next_test
)
;
}
)
;
}
function
run_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
add_tls_server_setup
(
"
OCSPStaplingServer
"
"
ocsp_certs
"
)
;
add_ocsp_necko_cache_test
(
Services
.
loadContextInfo
.
private
false
)
;
add_ocsp_necko_cache_test
(
Services
.
loadContextInfo
.
default
true
)
;
run_next_test
(
)
;
}
