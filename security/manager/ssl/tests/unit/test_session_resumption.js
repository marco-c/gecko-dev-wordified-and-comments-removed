"
use
strict
"
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
OCSP
.
enabled
"
)
;
}
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
addCertFromFile
(
certdb
"
bad_certs
/
evroot
.
pem
"
"
CTu
"
)
;
addCertFromFile
(
certdb
"
bad_certs
/
ev
-
test
-
intermediate
.
pem
"
"
"
)
;
function
add_resume_non_ev_with_override_test
(
)
{
add_cert_override_test
(
"
expired
.
example
.
com
"
Ci
.
nsICertOverrideService
.
ERROR_TIME
SEC_ERROR_EXPIRED_CERTIFICATE
)
;
add_connection_test
(
"
expired
.
example
.
com
"
PRErrorCodeSuccess
null
(
transportSecurityInfo
)
=
>
{
ok
(
transportSecurityInfo
.
securityState
&
Ci
.
nsIWebProgressListener
.
STATE_CERT_USER_OVERRIDDEN
"
expired
.
example
.
com
should
have
STATE_CERT_USER_OVERRIDDEN
flag
"
)
;
let
sslStatus
=
transportSecurityInfo
.
SSLStatus
;
ok
(
!
sslStatus
.
succeededCertChain
"
ev
-
test
.
example
.
com
should
not
have
succeededCertChain
set
"
)
;
ok
(
!
sslStatus
.
isDomainMismatch
"
expired
.
example
.
com
should
not
have
isDomainMismatch
set
"
)
;
ok
(
sslStatus
.
isNotValidAtThisTime
"
expired
.
example
.
com
should
have
isNotValidAtThisTime
set
"
)
;
ok
(
!
sslStatus
.
isUntrusted
"
expired
.
example
.
com
should
not
have
isUntrusted
set
"
)
;
ok
(
!
sslStatus
.
isExtendedValidation
"
expired
.
example
.
com
should
not
have
isExtendedValidation
set
"
)
;
}
)
;
}
function
add_one_ev_test
(
)
{
add_connection_test
(
"
ev
-
test
.
example
.
com
"
PRErrorCodeSuccess
null
(
transportSecurityInfo
)
=
>
{
ok
(
!
(
transportSecurityInfo
.
securityState
&
Ci
.
nsIWebProgressListener
.
STATE_CERT_USER_OVERRIDDEN
)
"
ev
-
test
.
example
.
com
should
not
have
STATE_CERT_USER_OVERRIDDEN
flag
"
)
;
let
sslStatus
=
transportSecurityInfo
.
SSLStatus
;
ok
(
sslStatus
.
succeededCertChain
"
ev
-
test
.
example
.
com
should
have
succeededCertChain
set
"
)
;
ok
(
!
sslStatus
.
isDomainMismatch
"
ev
-
test
.
example
.
com
should
not
have
isDomainMismatch
set
"
)
;
ok
(
!
sslStatus
.
isNotValidAtThisTime
"
ev
-
test
.
example
.
com
should
not
have
isNotValidAtThisTime
set
"
)
;
ok
(
!
sslStatus
.
isUntrusted
"
ev
-
test
.
example
.
com
should
not
have
isUntrusted
set
"
)
;
ok
(
!
gEVExpected
|
|
sslStatus
.
isExtendedValidation
"
ev
-
test
.
example
.
com
should
have
isExtendedValidation
set
"
+
"
(
or
this
is
a
non
-
debug
build
)
"
)
;
}
)
;
}
function
add_resume_ev_test
(
)
{
const
SERVER_PORT
=
8888
;
let
expectedRequestPaths
=
gEVExpected
?
[
"
ev
-
test
-
intermediate
"
"
ev
-
test
"
]
:
[
"
ev
-
test
"
]
;
let
responseTypes
=
gEVExpected
?
[
"
good
"
"
good
"
]
:
[
"
good
"
]
;
let
ocspResponder
;
add_test
(
(
)
=
>
{
ocspResponder
=
startOCSPResponder
(
SERVER_PORT
"
localhost
"
"
bad_certs
"
expectedRequestPaths
expectedRequestPaths
.
slice
(
)
null
responseTypes
)
;
run_next_test
(
)
;
}
)
;
add_one_ev_test
(
)
;
add_one_ev_test
(
)
;
add_test
(
(
)
=
>
{
ocspResponder
.
stop
(
run_next_test
)
;
}
)
;
}
const
GOOD_DOMAIN
=
"
good
.
include
-
subdomains
.
pinning
.
example
.
com
"
;
function
add_one_non_ev_test
(
)
{
add_connection_test
(
GOOD_DOMAIN
PRErrorCodeSuccess
null
(
transportSecurityInfo
)
=
>
{
ok
(
!
(
transportSecurityInfo
.
securityState
&
Ci
.
nsIWebProgressListener
.
STATE_CERT_USER_OVERRIDDEN
)
{
GOOD_DOMAIN
}
should
not
have
STATE_CERT_USER_OVERRIDDEN
flag
)
;
let
sslStatus
=
transportSecurityInfo
.
SSLStatus
;
ok
(
sslStatus
.
succeededCertChain
{
GOOD_DOMAIN
}
should
have
succeededCertChain
set
)
;
ok
(
!
sslStatus
.
isDomainMismatch
{
GOOD_DOMAIN
}
should
not
have
isDomainMismatch
set
)
;
ok
(
!
sslStatus
.
isNotValidAtThisTime
{
GOOD_DOMAIN
}
should
not
have
isNotValidAtThisTime
set
)
;
ok
(
!
sslStatus
.
isUntrusted
{
GOOD_DOMAIN
}
should
not
have
isUntrusted
set
)
;
ok
(
!
sslStatus
.
isExtendedValidation
{
GOOD_DOMAIN
}
should
not
have
isExtendedValidation
set
)
;
}
)
;
}
function
add_resume_non_ev_test
(
)
{
add_one_non_ev_test
(
)
;
add_one_non_ev_test
(
)
;
}
const
statsPtr
=
getSSLStatistics
(
)
;
const
toInt32
=
ctypes
.
Int64
.
lo
;
function
add_origin_attributes_test
(
originAttributes1
originAttributes2
resumeExpected
)
{
add_connection_test
(
GOOD_DOMAIN
PRErrorCodeSuccess
clearSessionCache
null
null
originAttributes1
)
;
let
hitsBeforeConnect
;
let
missesBeforeConnect
;
let
expectedHits
=
resumeExpected
?
1
:
0
;
let
expectedMisses
=
1
-
expectedHits
;
add_connection_test
(
GOOD_DOMAIN
PRErrorCodeSuccess
function
(
)
{
let
stats
=
statsPtr
.
contents
;
hitsBeforeConnect
=
toInt32
(
stats
.
sch_sid_cache_hits
)
;
missesBeforeConnect
=
toInt32
(
stats
.
sch_sid_cache_misses
)
;
}
function
(
)
{
let
stats
=
statsPtr
.
contents
;
equal
(
toInt32
(
stats
.
sch_sid_cache_hits
)
hitsBeforeConnect
+
expectedHits
"
Unexpected
cache
hits
"
)
;
equal
(
toInt32
(
stats
.
sch_sid_cache_misses
)
missesBeforeConnect
+
expectedMisses
"
Unexpected
cache
misses
"
)
;
}
null
originAttributes2
)
;
}
function
run_test
(
)
{
add_tls_server_setup
(
"
BadCertServer
"
"
bad_certs
"
)
;
add_resume_ev_test
(
)
;
add_resume_non_ev_test
(
)
;
add_resume_non_ev_with_override_test
(
)
;
add_origin_attributes_test
(
{
}
{
}
true
)
;
add_origin_attributes_test
(
{
userContextId
:
1
}
{
userContextId
:
2
}
false
)
;
add_origin_attributes_test
(
{
userContextId
:
3
}
{
userContextId
:
3
}
true
)
;
add_origin_attributes_test
(
{
firstPartyDomain
:
"
foo
.
com
"
}
{
firstPartyDomain
:
"
bar
.
com
"
}
false
)
;
add_origin_attributes_test
(
{
firstPartyDomain
:
"
baz
.
com
"
}
{
firstPartyDomain
:
"
baz
.
com
"
}
true
)
;
run_next_test
(
)
;
}
