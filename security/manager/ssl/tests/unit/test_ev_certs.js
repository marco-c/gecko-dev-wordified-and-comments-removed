"
use
strict
"
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
OCSP
.
enabled
"
)
;
}
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
www
.
example
.
com
"
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
const
evroot
=
addCertFromFile
(
certdb
"
test_ev_certs
/
evroot
.
pem
"
"
CTu
"
)
;
addCertFromFile
(
certdb
"
test_ev_certs
/
non
-
evroot
-
ca
.
pem
"
"
CTu
"
)
;
const
SERVER_PORT
=
8888
;
function
failingOCSPResponder
(
)
{
return
getFailingHttpServer
(
SERVER_PORT
[
"
www
.
example
.
com
"
]
)
;
}
class
EVCertVerificationResult
{
constructor
(
testcase
expectedPRErrorCode
expectedEV
resolve
ocspResponder
)
{
this
.
testcase
=
testcase
;
this
.
expectedPRErrorCode
=
expectedPRErrorCode
;
this
.
expectedEV
=
expectedEV
;
this
.
resolve
=
resolve
;
this
.
ocspResponder
=
ocspResponder
;
}
verifyCertFinished
(
prErrorCode
verifiedChain
hasEVPolicy
)
{
equal
(
prErrorCode
this
.
expectedPRErrorCode
{
this
.
testcase
}
should
have
expected
error
code
)
;
equal
(
hasEVPolicy
this
.
expectedEV
{
this
.
testcase
}
should
result
in
expected
EV
status
)
;
this
.
ocspResponder
.
stop
(
this
.
resolve
)
;
}
}
function
asyncTestEV
(
cert
expectedPRErrorCode
expectedEV
expectedOCSPRequestPaths
ocspResponseTypes
=
undefined
)
{
let
now
=
Date
.
now
(
)
/
1000
;
return
new
Promise
(
resolve
=
>
{
let
ocspResponder
=
expectedOCSPRequestPaths
.
length
?
startOCSPResponder
(
SERVER_PORT
"
www
.
example
.
com
"
"
test_ev_certs
"
expectedOCSPRequestPaths
expectedOCSPRequestPaths
.
slice
(
)
null
ocspResponseTypes
)
:
failingOCSPResponder
(
)
;
let
result
=
new
EVCertVerificationResult
(
cert
.
subjectName
expectedPRErrorCode
expectedEV
resolve
ocspResponder
)
;
certdb
.
asyncVerifyCertAtTime
(
cert
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
0
"
ev
-
test
.
example
.
com
"
now
result
)
;
}
)
;
}
function
ensureVerifiesAsEV
(
testcase
)
{
let
cert
=
constructCertFromFile
(
test_ev_certs
/
{
testcase
}
-
ee
.
pem
)
;
addCertFromFile
(
certdb
test_ev_certs
/
{
testcase
}
-
int
.
pem
"
"
)
;
let
expectedOCSPRequestPaths
=
[
{
testcase
}
-
ee
]
;
return
asyncTestEV
(
cert
PRErrorCodeSuccess
gEVExpected
expectedOCSPRequestPaths
)
;
}
function
ensureVerifiesAsEVWithNoOCSPRequests
(
testcase
)
{
let
cert
=
constructCertFromFile
(
test_ev_certs
/
{
testcase
}
-
ee
.
pem
)
;
addCertFromFile
(
certdb
test_ev_certs
/
{
testcase
}
-
int
.
pem
"
"
)
;
return
asyncTestEV
(
cert
PRErrorCodeSuccess
gEVExpected
[
]
)
;
}
function
ensureVerifiesAsDV
(
testcase
expectedOCSPRequestPaths
=
undefined
)
{
let
cert
=
constructCertFromFile
(
test_ev_certs
/
{
testcase
}
-
ee
.
pem
)
;
addCertFromFile
(
certdb
test_ev_certs
/
{
testcase
}
-
int
.
pem
"
"
)
;
return
asyncTestEV
(
cert
PRErrorCodeSuccess
false
expectedOCSPRequestPaths
?
expectedOCSPRequestPaths
:
[
{
testcase
}
-
ee
]
)
;
}
function
ensureVerificationFails
(
testcase
expectedPRErrorCode
)
{
let
cert
=
constructCertFromFile
(
test_ev_certs
/
{
testcase
}
-
ee
.
pem
)
;
addCertFromFile
(
certdb
test_ev_certs
/
{
testcase
}
-
int
.
pem
"
"
)
;
return
asyncTestEV
(
cert
expectedPRErrorCode
false
[
]
)
;
}
function
verifyWithFlags_LOCAL_ONLY_and_MUST_BE_EV
(
testcase
expectSuccess
)
{
let
cert
=
constructCertFromFile
(
test_ev_certs
/
{
testcase
}
-
ee
.
pem
)
;
addCertFromFile
(
certdb
test_ev_certs
/
{
testcase
}
-
int
.
pem
"
"
)
;
let
now
=
Date
.
now
(
)
/
1000
;
let
expectedErrorCode
=
SEC_ERROR_POLICY_VALIDATION_FAILED
;
if
(
expectSuccess
&
&
gEVExpected
)
{
expectedErrorCode
=
PRErrorCodeSuccess
;
}
return
new
Promise
(
resolve
=
>
{
let
ocspResponder
=
failingOCSPResponder
(
)
;
let
result
=
new
EVCertVerificationResult
(
cert
.
subjectName
expectedErrorCode
expectSuccess
&
&
gEVExpected
resolve
ocspResponder
)
;
let
flags
=
Ci
.
nsIX509CertDB
.
FLAG_LOCAL_ONLY
|
Ci
.
nsIX509CertDB
.
FLAG_MUST_BE_EV
;
certdb
.
asyncVerifyCertAtTime
(
cert
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
flags
"
ev
-
test
.
example
.
com
"
now
result
)
;
}
)
;
}
function
ensureNoOCSPMeansNoEV
(
testcase
)
{
return
verifyWithFlags_LOCAL_ONLY_and_MUST_BE_EV
(
testcase
false
)
;
}
function
ensureVerifiesAsEVWithFLAG_LOCAL_ONLY
(
testcase
)
{
return
verifyWithFlags_LOCAL_ONLY_and_MUST_BE_EV
(
testcase
true
)
;
}
function
verifyWithOCSPResponseType
(
testcase
response
expectEV
)
{
let
cert
=
constructCertFromFile
(
test_ev_certs
/
{
testcase
}
-
ee
.
pem
)
;
addCertFromFile
(
certdb
test_ev_certs
/
{
testcase
}
-
int
.
pem
"
"
)
;
let
expectedOCSPRequestPaths
=
[
{
testcase
}
-
ee
]
;
let
ocspResponseTypes
=
[
response
]
;
return
asyncTestEV
(
cert
PRErrorCodeSuccess
gEVExpected
&
&
expectEV
expectedOCSPRequestPaths
ocspResponseTypes
)
;
}
function
ensureVerifiesAsDVWithOldEndEntityOCSPResponse
(
testcase
)
{
return
verifyWithOCSPResponseType
(
testcase
"
longvalidityalmostold
"
false
)
;
}
function
ensureVerifiesAsDVWithVeryOldEndEntityOCSPResponse
(
testcase
)
{
return
verifyWithOCSPResponseType
(
testcase
"
ancientstillvalid
"
false
)
;
}
add_task
(
async
function
plainExpectSuccessEVTests
(
)
{
await
ensureVerifiesAsEV
(
"
anyPolicy
-
int
-
path
"
)
;
await
ensureVerifiesAsEV
(
"
test
-
oid
-
path
"
)
;
await
ensureVerifiesAsEV
(
"
cabforum
-
oid
-
path
"
)
;
await
ensureVerifiesAsEV
(
"
cabforum
-
and
-
test
-
oid
-
ee
-
path
"
)
;
await
ensureVerifiesAsEV
(
"
test
-
and
-
cabforum
-
oid
-
ee
-
path
"
)
;
await
ensureVerifiesAsEV
(
"
reverse
-
order
-
oids
-
path
"
)
;
await
ensureVerifiesAsEV
(
"
cabforum
-
and
-
test
-
oid
-
ee
-
cabforum
-
oid
-
int
-
path
"
)
;
await
ensureVerifiesAsEV
(
"
test
-
and
-
cabforum
-
oid
-
ee
-
cabforum
-
oid
-
int
-
path
"
)
;
}
)
;
add_task
(
async
function
expectDVFallbackTests
(
)
{
await
ensureVerifiesAsDV
(
"
anyPolicy
-
ee
-
path
"
)
;
await
ensureVerifiesAsDV
(
"
non
-
ev
-
root
-
path
"
)
;
await
ensureVerifiesAsDV
(
"
no
-
ocsp
-
ee
-
path
"
[
]
)
;
await
ensureVerifiesAsEV
(
"
no
-
ocsp
-
int
-
path
"
)
;
await
ensureVerifiesAsDV
(
"
test
-
oid
-
ee
-
cabforum
-
oid
-
int
-
path
"
)
;
}
)
;
add_task
(
async
function
evRootTrustTests
(
)
{
clearOCSPCache
(
)
;
info
(
"
untrusting
evroot
"
)
;
certdb
.
setCertTrust
(
evroot
Ci
.
nsIX509Cert
.
CA_CERT
Ci
.
nsIX509CertDB
.
UNTRUSTED
)
;
await
ensureVerificationFails
(
"
test
-
oid
-
path
"
SEC_ERROR_UNKNOWN_ISSUER
)
;
info
(
"
re
-
trusting
evroot
"
)
;
certdb
.
setCertTrust
(
evroot
Ci
.
nsIX509Cert
.
CA_CERT
Ci
.
nsIX509CertDB
.
TRUSTED_SSL
)
;
await
ensureVerifiesAsEV
(
"
test
-
oid
-
path
"
)
;
}
)
;
add_task
(
async
function
localOnlyMustBeEVTests
(
)
{
clearOCSPCache
(
)
;
await
ensureNoOCSPMeansNoEV
(
"
anyPolicy
-
ee
-
path
"
)
;
await
ensureNoOCSPMeansNoEV
(
"
anyPolicy
-
int
-
path
"
)
;
await
ensureNoOCSPMeansNoEV
(
"
non
-
ev
-
root
-
path
"
)
;
await
ensureNoOCSPMeansNoEV
(
"
no
-
ocsp
-
ee
-
path
"
)
;
await
ensureNoOCSPMeansNoEV
(
"
no
-
ocsp
-
int
-
path
"
)
;
await
ensureNoOCSPMeansNoEV
(
"
test
-
oid
-
path
"
)
;
}
)
;
add_task
(
async
function
ocspCachingTests
(
)
{
clearOCSPCache
(
)
;
await
ensureVerifiesAsEV
(
"
anyPolicy
-
int
-
path
"
)
;
await
ensureVerifiesAsEV
(
"
test
-
oid
-
path
"
)
;
await
ensureVerifiesAsEVWithNoOCSPRequests
(
"
anyPolicy
-
int
-
path
"
)
;
await
ensureVerifiesAsEVWithNoOCSPRequests
(
"
test
-
oid
-
path
"
)
;
await
ensureVerifiesAsEVWithFLAG_LOCAL_ONLY
(
"
anyPolicy
-
int
-
path
"
)
;
await
ensureVerifiesAsEVWithFLAG_LOCAL_ONLY
(
"
test
-
oid
-
path
"
)
;
}
)
;
add_task
(
async
function
oldOCSPResponseTests
(
)
{
clearOCSPCache
(
)
;
clearOCSPCache
(
)
;
await
ensureVerifiesAsDVWithOldEndEntityOCSPResponse
(
"
anyPolicy
-
int
-
path
"
)
;
await
ensureVerifiesAsDVWithOldEndEntityOCSPResponse
(
"
test
-
oid
-
path
"
)
;
clearOCSPCache
(
)
;
await
ensureVerifiesAsDVWithVeryOldEndEntityOCSPResponse
(
"
anyPolicy
-
int
-
path
"
)
;
await
ensureVerifiesAsDVWithVeryOldEndEntityOCSPResponse
(
"
test
-
oid
-
path
"
)
;
}
)
;
