"
use
strict
"
;
var
gSSService
=
null
;
function
checkStateRead
(
aSubject
aTopic
aData
)
{
if
(
aData
=
=
PRELOAD_STATE_FILE_NAME
)
{
return
;
}
equal
(
aData
SSS_STATE_FILE_NAME
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
example1
.
example
.
com
"
)
0
)
)
;
ok
(
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
example2
.
example
.
com
"
)
0
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
0
)
)
;
ok
(
!
gSSService
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Services
.
io
.
newURI
(
"
https
:
/
/
example3
.
example
.
com
"
)
0
)
)
;
do_test_finished
(
)
;
}
function
run_test
(
)
{
let
profileDir
=
do_get_profile
(
)
;
let
stateFile
=
profileDir
.
clone
(
)
;
stateFile
.
append
(
SSS_STATE_FILE_NAME
)
;
ok
(
!
stateFile
.
exists
(
)
)
;
let
outputStream
=
FileUtils
.
openFileOutputStream
(
stateFile
)
;
let
expiryTime
=
Date
.
now
(
)
+
100000
;
let
lines
=
[
example1
.
example
.
com
:
HSTS
\
t0
\
t0
\
t
{
expiryTime
}
1
0
"
I
'
m
a
lumberjack
and
I
'
m
okay
;
I
work
all
night
and
I
sleep
all
day
!
"
"
This
is
a
totally
bogus
entry
\
t
"
"
0
\
t0
\
t0
\
t0
\
t
"
"
\
t
\
t
\
t
\
t
\
t
\
t
\
t
"
"
example
.
com
:
HSTS
\
t
\
t
\
t
\
t
\
t
\
t
\
t
"
"
example3
.
example
.
com
:
HSTS
\
t0
\
t
\
t
\
t
\
t
\
t
\
t
"
example2
.
example
.
com
:
HSTS
\
t0
\
t0
\
t
{
expiryTime
}
1
0
]
;
writeLinesAndClose
(
lines
outputStream
)
;
Services
.
obs
.
addObserver
(
checkStateRead
"
data
-
storage
-
ready
"
)
;
do_test_pending
(
)
;
gSSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
notEqual
(
gSSService
null
)
;
}
