"
use
strict
"
;
function
run_test
(
)
{
do_get_profile
(
)
;
let
xulRuntime
=
{
inSafeMode
:
true
logConsoleErrors
:
true
OS
:
"
XPCShell
"
XPCOMABI
:
"
noarch
-
spidermonkey
"
invalidateCachesOnRestart
:
function
invalidateCachesOnRestart
(
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIXULRuntime
"
]
)
}
;
let
xulRuntimeFactory
=
{
createInstance
(
iid
)
{
return
xulRuntime
.
QueryInterface
(
iid
)
;
}
}
;
let
registrar
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
const
XULRUNTIME_CONTRACTID
=
"
mozilla
.
org
/
xre
/
runtime
;
1
"
;
const
XULRUNTIME_CID
=
Components
.
ID
(
"
{
f0f0b230
-
5525
-
4127
-
98dc
-
7bca39059e70
}
"
)
;
registrar
.
registerFactory
(
XULRUNTIME_CID
"
XULRuntime
"
XULRUNTIME_CONTRACTID
xulRuntimeFactory
)
;
let
pkcs11ModuleDB
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11moduledb
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11ModuleDB
)
;
let
libraryName
=
ctypes
.
libraryName
(
"
pkcs11testmodule
"
)
;
let
libraryFile
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
libraryFile
.
append
(
"
pkcs11testmodule
"
)
;
libraryFile
.
append
(
libraryName
)
;
ok
(
libraryFile
.
exists
(
)
"
The
pkcs11testmodule
file
should
exist
"
)
;
throws
(
(
)
=
>
pkcs11ModuleDB
.
addModule
(
"
PKCS11
Test
Module
"
libraryFile
.
path
0
0
)
/
NS_ERROR_FAILURE
/
"
addModule
should
throw
when
in
safe
mode
"
)
;
}
