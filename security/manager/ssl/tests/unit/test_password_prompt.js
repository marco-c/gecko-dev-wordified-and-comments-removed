"
use
strict
"
;
var
gMockPrompter
=
{
passwordToTry
:
null
numPrompts
:
0
promptPassword
(
dialogTitle
text
password
checkMsg
checkValue
)
{
this
.
numPrompts
+
+
;
if
(
this
.
numPrompts
>
1
)
{
return
false
;
}
equal
(
text
"
Please
enter
your
master
password
.
"
"
password
prompt
text
should
be
as
expected
"
)
;
equal
(
checkMsg
null
"
checkMsg
should
be
null
"
)
;
ok
(
this
.
passwordToTry
"
passwordToTry
should
be
non
-
null
"
)
;
password
.
value
=
this
.
passwordToTry
;
return
true
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIPrompt
]
)
}
;
var
gWindowWatcher
=
{
getNewPrompter
:
(
)
=
>
gMockPrompter
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIWindowWatcher
]
)
}
;
function
run_test
(
)
{
do_get_profile
(
)
;
let
windowWatcherCID
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
embedcomp
/
window
-
watcher
;
1
"
gWindowWatcher
)
;
registerCleanupFunction
(
(
)
=
>
{
MockRegistrar
.
unregister
(
windowWatcherCID
)
;
}
)
;
let
tokenDB
=
Cc
[
"
mozilla
.
org
/
security
/
pk11tokendb
;
1
"
]
.
getService
(
Ci
.
nsIPK11TokenDB
)
;
let
token
=
tokenDB
.
getInternalKeyToken
(
)
;
token
.
initPassword
(
"
hunter2
"
)
;
token
.
logoutSimple
(
)
;
gMockPrompter
.
passwordToTry
=
"
hunter2
"
;
let
sdr
=
Cc
[
"
mozilla
.
org
/
security
/
sdr
;
1
"
]
.
getService
(
Ci
.
nsISecretDecoderRing
)
;
sdr
.
encryptString
(
"
poke
"
)
;
equal
(
gMockPrompter
.
numPrompts
1
"
should
have
prompted
for
password
once
"
)
;
gMockPrompter
.
numPrompts
=
0
;
token
.
logoutSimple
(
)
;
gMockPrompter
.
passwordToTry
=
"
*
*
*
*
*
*
*
"
;
throws
(
(
)
=
>
sdr
.
encryptString
(
"
poke2
"
)
/
NS_ERROR_FAILURE
/
"
logging
in
with
the
wrong
password
should
fail
"
)
;
equal
(
gMockPrompter
.
numPrompts
2
"
should
have
prompted
for
password
twice
"
)
;
}
