"
use
strict
"
;
const
CC
=
Components
.
Constructor
;
const
Cm
=
Components
.
manager
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
AppInfo
.
jsm
"
)
;
updateAppInfo
(
)
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
const
reporter
=
Cc
[
"
mozilla
.
org
/
securityreporter
;
1
"
]
.
getService
(
Ci
.
nsISecurityReporter
)
;
const
BinaryInputStream
=
CC
(
"
mozilla
.
org
/
binaryinputstream
;
1
"
"
nsIBinaryInputStream
"
"
setInputStream
"
)
;
var
server
;
function
getReportCheck
(
expectReport
expectedError
)
{
return
function
sendReportWithInfo
(
transportSecurityInfo
)
{
server
.
registerPathHandler
(
"
/
submit
/
sslreports
"
function
(
request
response
)
{
if
(
expectReport
)
{
let
report
=
JSON
.
parse
(
readDataFromRequest
(
request
)
)
;
do_check_eq
(
report
.
errorCode
expectedError
)
;
response
.
setStatusLine
(
null
201
"
Created
"
)
;
response
.
write
(
"
Created
"
)
;
}
else
{
do_throw
(
"
No
report
should
have
been
received
"
)
;
}
}
)
;
reporter
.
reportTLSError
(
transportSecurityInfo
"
example
.
com
"
-
1
)
;
}
}
function
readDataFromRequest
(
aRequest
)
{
if
(
aRequest
.
method
=
=
"
POST
"
|
|
aRequest
.
method
=
=
"
PUT
"
)
{
if
(
aRequest
.
bodyInputStream
)
{
let
inputStream
=
new
BinaryInputStream
(
aRequest
.
bodyInputStream
)
;
let
bytes
=
[
]
;
let
available
;
while
(
(
available
=
inputStream
.
available
(
)
)
>
0
)
{
Array
.
prototype
.
push
.
apply
(
bytes
inputStream
.
readByteArray
(
available
)
)
;
}
return
String
.
fromCharCode
.
apply
(
null
bytes
)
;
}
}
return
null
;
}
function
run_test
(
)
{
server
=
new
HttpServer
(
)
;
server
.
start
(
-
1
)
;
let
port
=
server
.
identity
.
primaryPort
;
Services
.
prefs
.
setCharPref
(
"
security
.
ssl
.
errorReporting
.
url
"
http
:
/
/
localhost
:
{
port
}
/
submit
/
sslreports
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
cert_pinning
.
enforcement_level
"
2
)
;
add_tls_server_setup
(
"
BadCertServer
"
"
bad_certs
"
)
;
addCertFromFile
(
certdb
"
bad_certs
/
other
-
test
-
ca
.
pem
"
"
CTu
u
u
"
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
ssl
.
errorReporting
.
enabled
"
false
)
;
add_connection_test
(
"
expired
.
example
.
com
"
SEC_ERROR_EXPIRED_CERTIFICATE
null
getReportCheck
(
false
)
)
;
add_test
(
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
security
.
ssl
.
errorReporting
.
enabled
"
true
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
(
)
{
server
.
registerPathHandler
(
"
/
submit
/
sslreports
"
function
(
request
response
)
{
do_throw
(
"
No
report
should
be
sent
"
)
;
}
)
;
reporter
.
reportTLSError
(
null
"
example
.
com
"
-
1
)
;
run_next_test
(
)
;
}
)
;
add_connection_test
(
"
good
.
include
-
subdomains
.
pinning
.
example
.
com
"
PRErrorCodeSuccess
null
getReportCheck
(
true
PRErrorCodeSuccess
)
)
;
add_connection_test
(
"
expired
.
example
.
com
"
SEC_ERROR_EXPIRED_CERTIFICATE
null
getReportCheck
(
true
SEC_ERROR_EXPIRED_CERTIFICATE
)
)
;
run_next_test
(
)
;
}
