"
use
strict
"
;
var
{
ForgetAboutSite
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ForgetAboutSite
.
jsm
"
{
}
)
;
do_register_cleanup
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
cert_pinning
.
enforcement_level
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
cert_pinning
.
process_headers_from_non_builtin_roots
"
)
;
}
)
;
const
GOOD_MAX_AGE_SECONDS
=
69403
;
const
NON_ISSUED_KEY_HASH
=
"
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
=
"
;
const
PINNING_ROOT_KEY_HASH
=
"
VCIlmPM9NkgFQtrs4Oa5TeFcDu6MWRTKSNdePEhOgD8
=
"
;
const
VALID_PIN
=
pin
-
sha256
=
"
{
PINNING_ROOT_KEY_HASH
}
"
;
;
const
BACKUP_PIN
=
pin
-
sha256
=
"
{
NON_ISSUED_KEY_HASH
}
"
;
;
const
GOOD_MAX_AGE
=
max
-
age
=
{
GOOD_MAX_AGE_SECONDS
}
;
;
do_get_profile
(
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
cert_pinning
.
enforcement_level
"
2
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
cert_pinning
.
process_headers_from_non_builtin_roots
"
true
)
;
var
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
addCertFromFile
(
certdb
"
test_pinning_dynamic
/
pinningroot
.
pem
"
"
CTu
CTu
CTu
"
)
;
var
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
var
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
a
.
pinning2
.
example
.
com
"
)
;
var
sslStatus
=
new
FakeSSLStatus
(
constructCertFromFile
(
"
test_pinning_dynamic
/
a
.
pinning2
.
example
.
com
-
pinningroot
.
pem
"
)
)
;
add_task
(
function
*
(
)
{
sss
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
GOOD_MAX_AGE
sslStatus
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
sss
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
uri
GOOD_MAX_AGE
+
VALID_PIN
+
BACKUP_PIN
sslStatus
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
)
"
a
.
pinning2
.
example
.
com
should
be
HSTS
"
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
uri
0
)
"
a
.
pinning2
.
example
.
com
should
be
HPKP
"
)
;
yield
ForgetAboutSite
.
removeDataFromDomain
(
"
a
.
pinning2
.
example
.
com
"
)
;
Assert
.
ok
(
!
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
)
"
a
.
pinning2
.
example
.
com
should
not
be
HSTS
now
"
)
;
Assert
.
ok
(
!
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
uri
0
)
"
a
.
pinning2
.
example
.
com
should
not
be
HPKP
now
"
)
;
}
)
;
add_task
(
function
*
(
)
{
sss
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
GOOD_MAX_AGE
sslStatus
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
sss
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
uri
GOOD_MAX_AGE
+
VALID_PIN
+
BACKUP_PIN
sslStatus
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
)
"
a
.
pinning2
.
example
.
com
should
be
HSTS
(
subdomain
case
)
"
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
uri
0
)
"
a
.
pinning2
.
example
.
com
should
be
HPKP
(
subdomain
case
)
"
)
;
let
unrelatedURI
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
org
"
)
;
sss
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
unrelatedURI
GOOD_MAX_AGE
sslStatus
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
unrelatedURI
0
)
"
example
.
org
should
be
HSTS
"
)
;
yield
ForgetAboutSite
.
removeDataFromDomain
(
"
example
.
com
"
)
;
Assert
.
ok
(
!
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
)
"
a
.
pinning2
.
example
.
com
should
not
be
HSTS
now
(
subdomain
case
)
"
)
;
Assert
.
ok
(
!
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
uri
0
)
"
a
.
pinning2
.
example
.
com
should
not
be
HPKP
now
(
subdomain
case
)
"
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
unrelatedURI
0
)
"
example
.
org
should
still
be
HSTS
"
)
;
}
)
;
add_task
(
function
*
(
)
{
let
originAttributesList
=
[
{
}
{
userContextId
:
1
}
{
firstPartyDomain
:
"
foo
.
com
"
}
{
userContextId
:
1
firstPartyDomain
:
"
foo
.
com
"
}
]
;
let
unrelatedURI
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
org
"
)
;
for
(
let
originAttributes
of
originAttributesList
)
{
sss
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
GOOD_MAX_AGE
sslStatus
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
originAttributes
)
;
sss
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
uri
GOOD_MAX_AGE
+
VALID_PIN
+
BACKUP_PIN
sslStatus
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
originAttributes
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
originAttributes
)
"
a
.
pinning2
.
example
.
com
should
be
HSTS
(
originAttributes
case
)
"
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
uri
0
originAttributes
)
"
a
.
pinning2
.
example
.
com
should
be
HPKP
(
originAttributes
case
)
"
)
;
sss
.
processHeader
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
unrelatedURI
GOOD_MAX_AGE
sslStatus
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
originAttributes
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
unrelatedURI
0
originAttributes
)
"
example
.
org
should
be
HSTS
(
originAttributes
case
)
"
)
;
}
yield
ForgetAboutSite
.
removeDataFromDomain
(
"
example
.
com
"
)
;
for
(
let
originAttributes
of
originAttributesList
)
{
Assert
.
ok
(
!
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
uri
0
originAttributes
)
"
a
.
pinning2
.
example
.
com
should
not
be
HSTS
now
"
+
"
(
originAttributes
case
)
"
)
;
Assert
.
ok
(
!
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
uri
0
originAttributes
)
"
a
.
pinning2
.
example
.
com
should
not
be
HPKP
now
"
+
"
(
originAttributes
case
)
"
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
unrelatedURI
0
originAttributes
)
"
example
.
org
should
still
be
HSTS
(
originAttributes
case
)
"
)
;
}
}
)
;
