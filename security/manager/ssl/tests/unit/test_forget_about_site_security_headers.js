"
use
strict
"
;
const
{
ForgetAboutSite
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ForgetAboutSite
.
sys
.
mjs
"
)
;
do_get_profile
(
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
cert_pinning
.
enforcement_level
"
)
;
}
)
;
const
GOOD_MAX_AGE_SECONDS
=
69403
;
const
GOOD_MAX_AGE
=
max
-
age
=
{
GOOD_MAX_AGE_SECONDS
}
;
;
const
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
const
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
a
.
pinning
.
example
.
com
"
)
;
add_task
(
async
function
(
)
{
sss
.
processHeader
(
uri
GOOD_MAX_AGE
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
uri
)
"
a
.
pinning
.
example
.
com
should
be
HSTS
"
)
;
await
ForgetAboutSite
.
removeDataFromDomain
(
"
a
.
pinning
.
example
.
com
"
)
;
Assert
.
ok
(
!
sss
.
isSecureURI
(
uri
)
"
a
.
pinning
.
example
.
com
should
not
be
HSTS
now
"
)
;
}
)
;
add_task
(
async
function
(
)
{
sss
.
processHeader
(
uri
GOOD_MAX_AGE
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
uri
)
"
a
.
pinning
.
example
.
com
should
be
HSTS
(
subdomain
case
)
"
)
;
let
unrelatedURI
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
org
"
)
;
sss
.
processHeader
(
unrelatedURI
GOOD_MAX_AGE
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
unrelatedURI
)
"
example
.
org
should
be
HSTS
"
)
;
await
ForgetAboutSite
.
removeDataFromDomain
(
"
example
.
com
"
)
;
Assert
.
ok
(
!
sss
.
isSecureURI
(
uri
)
"
a
.
pinning
.
example
.
com
should
not
be
HSTS
now
(
subdomain
case
)
"
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
unrelatedURI
)
"
example
.
org
should
still
be
HSTS
"
)
;
}
)
;
add_task
(
async
function
(
)
{
let
originAttributesList
=
[
{
}
{
userContextId
:
1
}
{
firstPartyDomain
:
"
foo
.
com
"
}
{
userContextId
:
1
firstPartyDomain
:
"
foo
.
com
"
}
]
;
let
unrelatedURI
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
org
"
)
;
for
(
let
originAttributes
of
originAttributesList
)
{
sss
.
processHeader
(
uri
GOOD_MAX_AGE
originAttributes
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
uri
originAttributes
)
"
a
.
pinning
.
example
.
com
should
be
HSTS
(
originAttributes
case
)
"
)
;
sss
.
processHeader
(
unrelatedURI
GOOD_MAX_AGE
originAttributes
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
unrelatedURI
originAttributes
)
"
example
.
org
should
be
HSTS
(
originAttributes
case
)
"
)
;
}
await
ForgetAboutSite
.
removeDataFromDomain
(
"
example
.
com
"
)
;
for
(
let
originAttributes
of
originAttributesList
)
{
Assert
.
ok
(
!
sss
.
isSecureURI
(
uri
originAttributes
)
"
a
.
pinning
.
example
.
com
should
not
be
HSTS
now
"
+
"
(
originAttributes
case
)
"
)
;
Assert
.
ok
(
sss
.
isSecureURI
(
unrelatedURI
originAttributes
)
"
example
.
org
should
still
be
HSTS
(
originAttributes
case
)
"
)
;
}
}
)
;
