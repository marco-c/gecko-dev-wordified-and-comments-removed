"
use
strict
"
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
function
checkChain
(
rootKeyType
rootKeySize
intKeyType
intKeySize
eeKeyType
eeKeySize
eeExpectedError
)
{
let
rootName
=
"
root_
"
+
rootKeyType
+
"
_
"
+
rootKeySize
;
let
intName
=
"
int_
"
+
intKeyType
+
"
_
"
+
intKeySize
;
let
eeName
=
"
ee_
"
+
eeKeyType
+
"
_
"
+
eeKeySize
;
let
intFullName
=
intName
+
"
-
"
+
rootName
;
let
eeFullName
=
eeName
+
"
-
"
+
intName
+
"
-
"
+
rootName
;
addCertFromFile
(
certdb
test_keysize
/
{
rootName
}
.
pem
"
CTu
CTu
CTu
"
)
;
addCertFromFile
(
certdb
test_keysize
/
{
intFullName
}
.
pem
"
"
)
;
let
eeCert
=
constructCertFromFile
(
test_keysize
/
{
eeFullName
}
.
pem
)
;
do_print
(
"
cert
o
=
"
+
eeCert
.
organization
)
;
do_print
(
"
cert
issuer
o
=
"
+
eeCert
.
issuerOrganization
)
;
checkCertErrorGeneric
(
certdb
eeCert
eeExpectedError
certificateUsageSSLServer
)
;
}
function
checkRSAChains
(
inadequateKeySize
adequateKeySize
)
{
checkChain
(
"
rsa
"
adequateKeySize
"
rsa
"
adequateKeySize
"
rsa
"
adequateKeySize
PRErrorCodeSuccess
)
;
checkChain
(
"
rsa
"
inadequateKeySize
"
rsa
"
adequateKeySize
"
rsa
"
adequateKeySize
MOZILLA_PKIX_ERROR_INADEQUATE_KEY_SIZE
)
;
checkChain
(
"
rsa
"
adequateKeySize
"
rsa
"
inadequateKeySize
"
rsa
"
adequateKeySize
MOZILLA_PKIX_ERROR_INADEQUATE_KEY_SIZE
)
;
checkChain
(
"
rsa
"
adequateKeySize
"
rsa
"
adequateKeySize
"
rsa
"
inadequateKeySize
MOZILLA_PKIX_ERROR_INADEQUATE_KEY_SIZE
)
;
}
function
checkECCChains
(
)
{
checkChain
(
"
secp256r1
"
256
"
secp384r1
"
384
"
secp521r1
"
521
PRErrorCodeSuccess
)
;
checkChain
(
"
secp256r1
"
256
"
secp224r1
"
224
"
secp256r1
"
256
SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE
)
;
checkChain
(
"
secp256r1
"
256
"
secp256r1
"
256
"
secp224r1
"
224
SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE
)
;
checkChain
(
"
secp224r1
"
224
"
secp256r1
"
256
"
secp256r1
"
256
SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE
)
;
checkChain
(
"
secp256r1
"
256
"
secp256r1
"
256
"
secp256k1
"
256
SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE
)
;
checkChain
(
"
secp256k1
"
256
"
secp256r1
"
256
"
secp256r1
"
256
SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE
)
;
}
function
checkCombinationChains
(
)
{
checkChain
(
"
rsa
"
2048
"
secp256r1
"
256
"
secp384r1
"
384
PRErrorCodeSuccess
)
;
checkChain
(
"
rsa
"
2048
"
secp256r1
"
256
"
secp224r1
"
224
SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE
)
;
checkChain
(
"
secp256r1
"
256
"
rsa
"
1016
"
secp256r1
"
256
MOZILLA_PKIX_ERROR_INADEQUATE_KEY_SIZE
)
;
}
function
run_test
(
)
{
checkRSAChains
(
1016
1024
)
;
checkECCChains
(
)
;
checkCombinationChains
(
)
;
run_next_test
(
)
;
}
