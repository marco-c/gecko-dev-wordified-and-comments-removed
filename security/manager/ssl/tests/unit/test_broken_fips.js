"
use
strict
"
;
function
run_test
(
)
{
let
profile
=
do_get_profile
(
)
;
let
keyDBName
=
"
key4
.
db
"
;
let
keyDBFile
=
do_get_file
(
test_broken_fips
/
{
keyDBName
}
)
;
keyDBFile
.
copyTo
(
profile
keyDBName
)
;
let
pkcs11modDBName
=
"
pkcs11
.
txt
"
;
let
pkcs11modDBFile
=
do_get_file
(
test_broken_fips
/
{
pkcs11modDBName
}
)
;
pkcs11modDBFile
.
copyTo
(
profile
pkcs11modDBName
)
;
let
moduleDB
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11moduledb
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11ModuleDB
)
;
ok
(
!
moduleDB
.
isFIPSEnabled
"
FIPS
should
not
be
enabled
"
)
;
let
sdr
=
Cc
[
"
mozilla
.
org
/
security
/
sdr
;
1
"
]
.
getService
(
Ci
.
nsISecretDecoderRing
)
;
const
encrypted
=
"
MDoEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECGeDHwVfyFqzBBAYvqMq
/
kDMsrARVNdC1C8d
"
;
const
expectedResult
=
"
password
"
;
let
decrypted
=
sdr
.
decryptString
(
encrypted
)
;
equal
(
decrypted
expectedResult
"
decrypted
ciphertext
should
match
expected
plaintext
"
)
;
let
pkcs11modDBFileFIPS
=
do_get_profile
(
)
;
pkcs11modDBFileFIPS
.
append
(
{
pkcs11modDBName
}
.
fips
)
;
ok
(
pkcs11modDBFileFIPS
.
exists
(
)
"
backed
-
up
PKCS
#
11
module
db
should
now
exist
"
)
;
}
