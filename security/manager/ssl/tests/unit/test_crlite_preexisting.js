"
use
strict
"
;
add_task
(
async
function
test_preexisting_crlite_data
(
)
{
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
crlite_mode
"
CRLiteModeEnforcePrefValue
)
;
let
certStorage
=
Cc
[
"
mozilla
.
org
/
security
/
certstorage
;
1
"
]
.
getService
(
Ci
.
nsICertStorage
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
let
issuerCert
=
constructCertFromFile
(
"
test_crlite_filters
/
issuer
.
pem
"
)
;
ok
(
issuerCert
"
issuer
certificate
should
decode
successfully
"
)
;
let
noSCTCertIssuer
=
constructCertFromFile
(
"
test_crlite_filters
/
no
-
sct
-
issuer
.
pem
"
)
;
ok
(
noSCTCertIssuer
"
issuer
certificate
for
certificate
without
SCTs
should
decode
successfully
"
)
;
let
validCert
=
constructCertFromFile
(
"
test_crlite_filters
/
valid
.
pem
"
)
;
let
revokedCert
=
constructCertFromFile
(
"
test_crlite_filters
/
revoked
.
pem
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedCert
PRErrorCodeSuccess
certificateUsageSSLServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
us
-
datarecovery
.
com
"
Ci
.
nsIX509CertDB
.
FLAG_LOCAL_ONLY
)
;
await
new
Promise
(
resolve
=
>
{
certStorage
.
addCRLiteStash
(
new
Uint8Array
(
[
]
)
(
rv
_
)
=
>
{
Assert
.
equal
(
rv
Cr
.
NS_OK
"
marked
filter
as
fresh
"
)
;
resolve
(
)
;
}
)
;
}
)
;
await
checkCertErrorGenericAtTime
(
certdb
validCert
PRErrorCodeSuccess
certificateUsageSSLServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
vpn
.
worldofspeed
.
org
"
0
)
;
await
checkCertErrorGenericAtTime
(
certdb
validCert
PRErrorCodeSuccess
certificateUsageSSLServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
vpn
.
worldofspeed
.
org
"
0
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedCert
SEC_ERROR_REVOKED_CERTIFICATE
certificateUsageSSLServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
us
-
datarecovery
.
com
"
0
)
;
let
revokedInStashCert
=
constructCertFromFile
(
"
test_crlite_filters
/
revoked
-
in
-
stash
.
pem
"
)
;
await
new
Promise
(
resolve
=
>
{
certStorage
.
hasPriorData
(
Ci
.
nsICertStorage
.
DATA_TYPE_CRLITE_FILTER_INCREMENTAL
(
rv
_
)
=
>
{
Assert
.
equal
(
rv
Cr
.
NS_OK
"
hasPriorData
should
succeed
"
)
;
resolve
(
)
;
}
)
;
}
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedInStashCert
SEC_ERROR_REVOKED_CERTIFICATE
certificateUsageSSLServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
stokedmoto
.
com
"
0
)
;
let
revokedInStash2Cert
=
constructCertFromFile
(
"
test_crlite_filters
/
revoked
-
in
-
stash
-
2
.
pem
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
revokedInStash2Cert
SEC_ERROR_REVOKED_CERTIFICATE
certificateUsageSSLServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
icsreps
.
com
"
0
)
;
let
noSCTCert
=
constructCertFromFile
(
"
test_crlite_filters
/
no
-
sct
.
pem
"
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
ocsp
.
digicert
.
com
"
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
OCSP
.
require
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
await
checkCertErrorGenericAtTime
(
certdb
noSCTCert
SEC_ERROR_OCSP_SERVER_ERROR
certificateUsageSSLServer
new
Date
(
"
2020
-
10
-
20T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
mail233
.
messagelabs
.
com
"
0
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
dns
.
localDomains
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
OCSP
.
require
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
OCSP
.
enabled
"
)
;
let
notCoveredCert
=
constructCertFromFile
(
"
test_crlite_filters
/
notcovered
.
pem
"
)
;
await
checkCertErrorGenericAtTime
(
certdb
notCoveredCert
PRErrorCodeSuccess
certificateUsageSSLServer
new
Date
(
"
2022
-
01
-
07T00
:
00
:
00Z
"
)
.
getTime
(
)
/
1000
false
"
peekaboophonics
.
com
"
Ci
.
nsIX509CertDB
.
FLAG_LOCAL_ONLY
)
;
}
)
;
function
run_test
(
)
{
let
securityStateDirectory
=
do_get_profile
(
)
;
securityStateDirectory
.
append
(
"
security_state
"
)
;
let
crilteFile
=
do_get_file
(
"
test_crlite_filters
/
20201017
-
0
-
filter
"
)
;
crilteFile
.
copyTo
(
securityStateDirectory
"
crlite
.
filter
"
)
;
let
stashFile
=
do_get_file
(
"
test_crlite_preexisting
/
crlite
.
stash
"
)
;
stashFile
.
copyTo
(
securityStateDirectory
"
crlite
.
stash
"
)
;
let
coverageFile
=
do_get_file
(
"
test_crlite_preexisting
/
crlite
.
coverage
"
)
;
coverageFile
.
copyTo
(
securityStateDirectory
"
crlite
.
coverage
"
)
;
let
enrollmentFile
=
do_get_file
(
"
test_crlite_preexisting
/
crlite
.
enrollment
"
)
;
enrollmentFile
.
copyTo
(
securityStateDirectory
"
crlite
.
enrollment
"
)
;
let
certStorageFile
=
do_get_file
(
"
test_crlite_preexisting
/
crlite
.
enrollment
"
)
;
certStorageFile
.
copyTo
(
securityStateDirectory
"
crlite
.
enrollment
"
)
;
run_next_test
(
)
;
}
