"
use
strict
"
;
var
gFetchCount
=
0
;
var
gGoodOCSPResponse
=
null
;
var
gResponsePattern
=
[
]
;
var
gMessage
=
"
"
;
function
respondWithGoodOCSP
(
request
response
)
{
info
(
"
returning
200
OK
"
)
;
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
ocsp
-
response
"
)
;
response
.
write
(
gGoodOCSPResponse
)
;
}
function
respondWithSHA1OCSP
(
request
response
)
{
info
(
"
returning
200
OK
with
sha
-
1
delegated
response
"
)
;
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
ocsp
-
response
"
)
;
let
args
=
[
[
"
good
-
delegated
"
"
default
-
ee
"
"
delegatedSHA1Signer
"
0
]
]
;
let
responses
=
generateOCSPResponses
(
args
"
ocsp_certs
"
)
;
response
.
write
(
responses
[
0
]
)
;
}
function
respondWithError
(
request
response
)
{
info
(
"
returning
500
Internal
Server
Error
"
)
;
response
.
setStatusLine
(
request
.
httpVersion
500
"
Internal
Server
Error
"
)
;
let
body
=
"
Refusing
to
return
a
response
"
;
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
function
generateGoodOCSPResponse
(
thisUpdateSkew
)
{
let
args
=
[
[
"
good
"
"
default
-
ee
"
"
unused
"
thisUpdateSkew
]
]
;
let
responses
=
generateOCSPResponses
(
args
"
ocsp_certs
"
)
;
return
responses
[
0
]
;
}
function
add_ocsp_test
(
aHost
aExpectedResult
aResponses
aMessage
aOriginAttributes
)
{
add_connection_test
(
aHost
aExpectedResult
function
(
)
{
clearSessionCache
(
)
;
gFetchCount
=
0
;
gResponsePattern
=
aResponses
;
gMessage
=
aMessage
;
}
function
(
)
{
equal
(
gFetchCount
aResponses
.
length
"
should
have
made
"
+
aResponses
.
length
+
"
OCSP
request
"
+
(
aResponses
.
length
=
=
1
?
"
"
:
"
s
"
)
)
;
}
null
aOriginAttributes
)
;
}
function
run_test
(
)
{
do_get_profile
(
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
ssl
.
enable_ocsp_stapling
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
sha1_enforcement_level
"
4
)
;
add_tls_server_setup
(
"
OCSPStaplingServer
"
"
ocsp_certs
"
)
;
let
ocspResponder
=
new
HttpServer
(
)
;
ocspResponder
.
registerPrefixHandler
(
"
/
"
function
(
request
response
)
{
info
(
"
gFetchCount
:
"
+
gFetchCount
)
;
let
responseFunction
=
gResponsePattern
[
gFetchCount
]
;
Assert
.
notEqual
(
undefined
responseFunction
)
;
+
+
gFetchCount
;
responseFunction
(
request
response
)
;
}
)
;
ocspResponder
.
start
(
8888
)
;
add_tests
(
)
;
add_test
(
function
(
)
{
ocspResponder
.
stop
(
run_next_test
)
;
}
)
;
run_next_test
(
)
;
}
function
add_tests
(
)
{
add_test
(
function
(
)
{
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
cert_short_lifetime_in_days
"
12000
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
]
"
expected
zero
OCSP
requests
for
a
short
-
lived
certificate
"
)
;
add_test
(
function
(
)
{
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
cert_short_lifetime_in_days
"
100
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithError
]
"
expected
one
OCSP
request
for
a
long
-
lived
certificate
"
)
;
add_test
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
security
.
pki
.
cert_short_lifetime_in_days
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
(
)
{
clearOCSPCache
(
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
unknown
.
example
.
com
"
SEC_ERROR_OCSP_UNKNOWN_CERT
[
]
"
Stapled
Unknown
response
-
>
a
fetch
should
not
have
been
attempted
"
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
SEC_ERROR_OCSP_UNKNOWN_CERT
[
respondWithError
respondWithError
respondWithError
respondWithError
respondWithError
respondWithError
]
"
No
stapled
response
-
>
a
fetch
should
have
been
attempted
"
)
;
add_test
(
function
(
)
{
gGoodOCSPResponse
=
generateGoodOCSPResponse
(
1200
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithGoodOCSP
]
"
Cached
Unknown
response
no
stapled
response
-
>
a
fetch
"
+
"
should
have
been
attempted
"
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
]
"
Cached
Good
response
-
>
a
fetch
should
not
have
been
attempted
"
)
;
add_test
(
function
(
)
{
clearOCSPCache
(
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithError
]
"
No
stapled
response
-
>
a
fetch
should
have
been
attempted
"
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
]
"
Noted
OCSP
server
failure
-
>
a
fetch
should
not
have
been
attempted
"
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
revoked
.
example
.
com
"
SEC_ERROR_REVOKED_CERTIFICATE
[
]
"
Stapled
Revoked
response
-
>
a
fetch
should
not
have
been
attempted
"
)
;
add_test
(
function
(
)
{
clearOCSPCache
(
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
OCSP
.
require
"
true
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithSHA1OCSP
]
"
signing
cert
is
good
(
though
sha1
)
-
should
succeed
"
)
;
add_test
(
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
security
.
OCSP
.
require
"
false
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
(
)
{
clearOCSPCache
(
)
;
run_next_test
(
)
;
}
)
;
let
gObservedCnt
=
0
;
let
protocolProxyService
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
-
proxy
-
service
;
1
"
]
.
getService
(
Ci
.
nsIProtocolProxyService
)
;
function
startObservingChannels
(
aFirstPartyDomain
)
{
let
proxyFilter
=
{
applyFilter
(
aChannel
aProxy
aCallback
)
{
if
(
aChannel
.
originalURI
.
spec
=
=
"
http
:
/
/
localhost
:
8888
/
"
)
{
gObservedCnt
+
+
;
equal
(
aChannel
.
loadInfo
.
originAttributes
.
firstPartyDomain
aFirstPartyDomain
"
firstPartyDomain
should
match
"
)
;
}
aCallback
.
onProxyFilterResult
(
aProxy
)
;
}
}
;
protocolProxyService
.
registerChannelFilter
(
proxyFilter
0
)
;
return
(
)
=
>
protocolProxyService
.
unregisterChannelFilter
(
proxyFilter
)
;
}
let
stopObservingChannels
;
add_test
(
function
(
)
{
stopObservingChannels
=
startObservingChannels
(
"
foo
.
com
"
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithGoodOCSP
]
"
No
stapled
response
(
firstPartyDomain
=
foo
.
com
)
-
>
a
fetch
"
+
"
should
have
been
attempted
"
{
firstPartyDomain
:
"
foo
.
com
"
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
]
"
Noted
OCSP
server
failure
(
firstPartyDomain
=
foo
.
com
)
-
>
a
"
+
"
fetch
should
not
have
been
attempted
"
{
firstPartyDomain
:
"
foo
.
com
"
}
)
;
add_test
(
function
(
)
{
stopObservingChannels
(
)
;
equal
(
gObservedCnt
1
"
should
have
observed
only
1
OCSP
requests
"
)
;
gObservedCnt
=
0
;
run_next_test
(
)
;
}
)
;
add_test
(
function
(
)
{
stopObservingChannels
=
startObservingChannels
(
"
bar
.
com
"
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithGoodOCSP
]
"
No
stapled
response
(
firstPartyDomain
=
bar
.
com
)
-
>
a
fetch
"
+
"
should
have
been
attempted
"
{
firstPartyDomain
:
"
bar
.
com
"
}
)
;
add_test
(
function
(
)
{
stopObservingChannels
(
)
;
equal
(
gObservedCnt
1
"
should
have
observed
only
1
OCSP
requests
"
)
;
gObservedCnt
=
0
;
run_next_test
(
)
;
}
)
;
add_test
(
function
(
)
{
clearOCSPCache
(
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithGoodOCSP
]
"
No
stapled
response
(
userContextId
=
1
)
-
>
a
fetch
"
+
"
should
have
been
attempted
"
{
userContextId
:
1
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
]
"
Noted
OCSP
server
failure
(
userContextId
=
1
)
-
>
a
"
+
"
fetch
should
not
have
been
attempted
"
{
userContextId
:
1
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
]
"
Noted
OCSP
server
failure
(
userContextId
=
2
)
-
>
a
"
+
"
fetch
should
not
have
been
attempted
"
{
userContextId
:
2
}
)
;
add_test
(
function
(
)
{
clearOCSPCache
(
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
privacy
.
partition
.
network_state
.
ocsp_cache
"
true
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithGoodOCSP
]
"
No
stapled
response
(
partitionKey
=
(
https
foo
.
com
)
)
-
>
a
fetch
"
+
"
should
have
been
attempted
"
{
partitionKey
:
"
(
https
foo
.
com
)
"
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
]
"
Noted
OCSP
server
failure
(
partitionKey
=
(
https
foo
.
com
)
)
-
>
a
"
+
"
fetch
should
not
have
been
attempted
"
{
partitionKey
:
"
(
https
foo
.
com
)
"
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithGoodOCSP
]
"
Noted
OCSP
server
failure
(
partitionKey
=
(
https
bar
.
com
)
)
-
>
a
"
+
"
fetch
should
have
been
attempted
"
{
partitionKey
:
"
(
https
bar
.
com
)
"
}
)
;
add_test
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
privacy
.
partition
.
network_state
.
ocsp_cache
"
)
;
clearOCSPCache
(
)
;
run_next_test
(
)
;
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithGoodOCSP
]
"
No
stapled
response
(
partitionKey
=
(
https
foo
.
com
)
)
-
>
a
fetch
"
+
"
should
have
been
attempted
"
{
partitionKey
:
"
(
https
foo
.
com
)
"
privateBrowsingId
:
1
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
]
"
Noted
OCSP
server
failure
(
partitionKey
=
(
https
foo
.
com
)
)
-
>
a
"
+
"
fetch
should
not
have
been
attempted
"
{
partitionKey
:
"
(
https
foo
.
com
)
"
privateBrowsingId
:
1
}
)
;
add_ocsp_test
(
"
ocsp
-
stapling
-
none
.
example
.
com
"
PRErrorCodeSuccess
[
respondWithGoodOCSP
]
"
Noted
OCSP
server
failure
(
partitionKey
=
(
https
bar
.
com
)
)
-
>
a
"
+
"
fetch
should
have
been
attempted
"
{
partitionKey
:
"
(
https
bar
.
com
)
"
privateBrowsingId
:
1
}
)
;
add_test
(
function
(
)
{
clearOCSPCache
(
)
;
run_next_test
(
)
;
}
)
;
}
