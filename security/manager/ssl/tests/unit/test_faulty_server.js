"
use
strict
"
;
load
(
"
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
netwerk
/
test
/
unit
/
head_channels
.
js
"
)
;
var
httpServer
=
null
;
let
handlerCallbacks
=
{
}
;
function
listenHandler
(
metadata
response
)
{
info
(
metadata
.
path
)
;
handlerCallbacks
[
metadata
.
path
]
=
(
handlerCallbacks
[
metadata
.
path
]
|
|
0
)
+
1
;
}
function
handlerCount
(
path
)
{
return
handlerCallbacks
[
path
]
|
|
0
;
}
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
do_get_profile
(
)
;
add_setup
(
{
skip_if
:
(
)
=
>
AppConstants
.
MOZ_SYSTEM_NSS
}
async
(
)
=
>
{
httpServer
=
new
HttpServer
(
)
;
httpServer
.
registerPrefixHandler
(
"
/
callback
/
"
listenHandler
)
;
httpServer
.
start
(
-
1
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
httpServer
.
stop
(
)
;
}
)
;
Services
.
env
.
set
(
"
FAULTY_SERVER_CALLBACK_PORT
"
httpServer
.
identity
.
primaryPort
)
;
await
asyncStartTLSTestServer
(
"
FaultyServer
"
"
test_faulty_server
"
)
;
}
)
;
function
makeChan
(
url
)
{
let
chan
=
NetUtil
.
newChannel
(
{
uri
:
url
loadUsingSystemPrincipal
:
true
}
)
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
chan
.
loadFlags
=
Ci
.
nsIChannel
.
LOAD_INITIAL_DOCUMENT_URI
;
return
chan
;
}
function
channelOpenPromise
(
chan
flags
)
{
return
new
Promise
(
resolve
=
>
{
chan
.
asyncOpen
(
new
ChannelListener
(
(
req
buffer
)
=
>
resolve
(
[
req
buffer
]
)
null
flags
)
)
;
}
)
;
}
add_task
(
{
skip_if
:
(
)
=
>
AppConstants
.
MOZ_SYSTEM_NSS
}
async
function
testRetryXyber
(
)
{
const
retryDomains
=
[
"
xyber
-
net
-
interrupt
.
example
.
com
"
"
xyber
-
alert
-
unexpected
.
example
.
com
"
]
;
Services
.
prefs
.
setBoolPref
(
"
security
.
tls
.
enable_kyber
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
retryDomains
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
http
.
speculative
-
parallel
-
limit
"
0
)
;
for
(
let
i
=
0
;
i
<
retryDomains
.
length
;
i
+
+
)
{
let
countOfXyber
=
handlerCount
(
"
/
callback
/
25497
"
)
;
let
countOfX25519
=
handlerCount
(
"
/
callback
/
29
"
)
;
let
chan
=
makeChan
(
https
:
/
/
{
retryDomains
[
i
]
}
:
8443
)
;
let
[
buf
]
=
await
channelOpenPromise
(
chan
CL_ALLOW_UNKNOWN_CL
)
;
ok
(
buf
)
;
equal
(
handlerCount
(
"
/
callback
/
25497
"
)
countOfXyber
+
1
"
negotiated
xyber768d00
"
)
;
equal
(
handlerCount
(
"
/
callback
/
29
"
)
countOfX25519
+
1
"
negotiated
x25519
"
)
;
}
}
)
;
