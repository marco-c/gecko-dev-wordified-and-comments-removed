"
use
strict
"
;
do_get_profile
(
)
;
const
gCertDB
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
function
certFromFile
(
certName
)
{
return
constructCertFromFile
(
test_baseline_requirements
/
{
certName
}
.
pem
)
;
}
function
loadCertWithTrust
(
certName
trustString
)
{
addCertFromFile
(
gCertDB
test_baseline_requirements
/
{
certName
}
.
pem
trustString
)
;
}
function
checkCertOn25August2016
(
cert
expectedResult
)
{
const
VALIDATION_TIME
=
1472083200
;
return
checkCertErrorGenericAtTime
(
gCertDB
cert
expectedResult
certificateUsageSSLServer
VALIDATION_TIME
false
"
example
.
com
"
)
;
}
add_task
(
async
function
(
)
{
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
privacy
.
reduceTimerPrecision
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
reduceTimerPrecision
"
false
)
;
loadCertWithTrust
(
"
ca
"
"
CTu
"
)
;
await
checkCertOn25August2016
(
certFromFile
(
"
no
-
san
-
recent
"
)
SSL_ERROR_BAD_CERT_DOMAIN
)
;
await
checkCertOn25August2016
(
certFromFile
(
"
no
-
san
-
old
"
)
SSL_ERROR_BAD_CERT_DOMAIN
)
;
await
checkCertOn25August2016
(
certFromFile
(
"
no
-
san
-
older
"
)
SSL_ERROR_BAD_CERT_DOMAIN
)
;
await
checkCertOn25August2016
(
certFromFile
(
"
san
-
contains
-
no
-
hostnames
-
recent
"
)
SSL_ERROR_BAD_CERT_DOMAIN
)
;
await
checkCertOn25August2016
(
certFromFile
(
"
san
-
contains
-
no
-
hostnames
-
old
"
)
SSL_ERROR_BAD_CERT_DOMAIN
)
;
await
checkCertOn25August2016
(
certFromFile
(
"
san
-
contains
-
no
-
hostnames
-
older
"
)
SSL_ERROR_BAD_CERT_DOMAIN
)
;
}
)
;
