"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
TestUtils
:
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
}
)
;
const
EXPECTED_ENTRIES
=
5
;
const
EXPECTED_HSTS_COLUMNS
=
3
;
function
contents_is_as_expected
(
)
{
let
contents
=
get_data_storage_contents
(
SSS_STATE_FILE_NAME
)
;
let
keysAndValues
=
contents
.
split
(
"
\
0
"
)
.
filter
(
s
=
>
!
!
s
.
length
)
;
let
keys
=
keysAndValues
.
filter
(
(
_
i
)
=
>
i
%
2
=
=
0
)
.
map
(
key
=
>
key
.
substring
(
3
)
)
;
let
values
=
keysAndValues
.
filter
(
(
_
i
)
=
>
i
%
2
=
=
1
)
;
if
(
keys
.
length
!
=
EXPECTED_ENTRIES
|
|
values
.
length
!
=
EXPECTED_ENTRIES
)
{
return
false
;
}
let
sites
=
{
}
;
for
(
let
i
in
keys
)
{
let
host
=
keys
[
i
]
;
let
entry
=
values
[
i
]
.
split
(
"
"
)
;
equal
(
entry
.
length
EXPECTED_HSTS_COLUMNS
)
;
sites
[
host
]
=
entry
;
}
return
(
sites
[
"
includesubdomains
.
preloaded
.
test
"
]
[
1
]
=
=
1
&
&
sites
[
"
includesubdomains
.
preloaded
.
test
"
]
[
2
]
=
=
0
&
&
sites
[
"
a
.
example
.
com
"
]
[
1
]
=
=
1
&
&
sites
[
"
a
.
example
.
com
"
]
[
2
]
=
=
1
&
&
sites
[
"
b
.
example
.
com
"
]
[
1
]
=
=
1
&
&
sites
[
"
b
.
example
.
com
"
]
[
2
]
=
=
0
&
&
sites
[
"
c
.
c
.
example
.
com
"
]
[
1
]
=
=
1
&
&
sites
[
"
c
.
c
.
example
.
com
"
]
[
2
]
=
=
1
&
&
sites
[
"
d
.
example
.
com
"
]
[
1
]
=
=
1
&
&
sites
[
"
d
.
example
.
com
"
]
[
2
]
=
=
0
)
;
}
function
process_headers
(
)
{
let
SSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
let
uris
=
[
Services
.
io
.
newURI
(
"
http
:
/
/
includesubdomains
.
preloaded
.
test
"
)
Services
.
io
.
newURI
(
"
http
:
/
/
a
.
example
.
com
"
)
Services
.
io
.
newURI
(
"
http
:
/
/
b
.
example
.
com
"
)
Services
.
io
.
newURI
(
"
http
:
/
/
c
.
c
.
example
.
com
"
)
Services
.
io
.
newURI
(
"
http
:
/
/
d
.
example
.
com
"
)
]
;
for
(
let
i
=
0
;
i
<
1000
;
i
+
+
)
{
let
uriIndex
=
i
%
uris
.
length
;
let
maxAge
=
"
max
-
age
=
"
+
(
i
+
31536000
)
;
let
includeSubdomains
=
uriIndex
%
2
=
=
1
?
"
;
includeSubdomains
"
:
"
"
;
SSService
.
processHeader
(
uris
[
uriIndex
]
maxAge
+
includeSubdomains
)
;
}
}
function
run_test
(
)
{
do_get_profile
(
)
;
process_headers
(
)
;
TestUtils
.
waitForCondition
(
contents_is_as_expected
)
;
}
