"
use
strict
"
;
do_get_profile
(
)
;
const
gCertDB
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
const
PKCS12_FILE
=
"
test_certDB_import
/
cert_from_windows
.
pfx
"
;
const
PKCS12_FILE_EMPTY_PASS
=
"
test_certDB_import
/
cert_from_windows_emptypass
.
pfx
"
;
const
PKCS12_FILE_NO_PASS
=
"
test_certDB_import
/
cert_from_windows_nopass
.
pfx
"
;
const
CERT_COMMON_NAME
=
"
test_cert_from_windows
"
;
const
TEST_CERT_PASSWORD
=
"
"
;
let
gGetPKCS12FilePasswordCalled
=
false
;
let
gCurrentTestcase
=
null
;
let
gTestcases
=
[
{
name
:
"
import
using
incorrect
password
"
filename
:
PKCS12_FILE
passwordToUse
:
"
this
is
the
wrong
password
"
successExpected
:
false
errorCode
:
Ci
.
nsIX509CertDB
.
ERROR_BAD_PASSWORD
checkCertExist
:
true
}
{
name
:
"
import
non
-
PKCS12
file
"
filename
:
"
test_certDB_import_pkcs12
.
js
"
passwordToUse
:
TEST_CERT_PASSWORD
successExpected
:
false
errorCode
:
Ci
.
nsIX509CertDB
.
ERROR_DECODE_ERROR
checkCertExist
:
true
}
{
name
:
"
import
PKCS12
file
"
filename
:
PKCS12_FILE
passwordToUse
:
TEST_CERT_PASSWORD
successExpected
:
true
errorCode
:
Ci
.
nsIX509CertDB
.
Success
checkCertExist
:
true
}
{
name
:
"
import
PKCS12
file
empty
password
"
filename
:
PKCS12_FILE_EMPTY_PASS
passwordToUse
:
"
"
successExpected
:
true
errorCode
:
Ci
.
nsIX509CertDB
.
Success
checkCertExist
:
false
}
{
name
:
"
import
PKCS12
file
no
password
"
filename
:
PKCS12_FILE_NO_PASS
passwordToUse
:
null
successExpected
:
true
errorCode
:
Ci
.
nsIX509CertDB
.
Success
checkCertExist
:
false
}
]
;
function
doesCertExist
(
commonName
)
{
let
allCerts
=
gCertDB
.
getCerts
(
)
;
for
(
let
cert
of
allCerts
.
getEnumerator
(
)
)
{
if
(
cert
.
isBuiltInRoot
)
{
continue
;
}
if
(
cert
.
commonName
=
=
commonName
)
{
return
true
;
}
}
return
false
;
}
function
runOneTestcase
(
testcase
)
{
info
(
running
{
testcase
.
name
}
)
;
if
(
testcase
.
checkCertExist
)
{
ok
(
!
doesCertExist
(
CERT_COMMON_NAME
)
"
cert
should
not
be
in
the
database
before
import
"
)
;
}
let
certFile
=
do_get_file
(
testcase
.
filename
)
;
ok
(
certFile
{
testcase
.
filename
}
should
exist
)
;
gGetPKCS12FilePasswordCalled
=
false
;
gCurrentTestcase
=
testcase
;
let
errorCode
=
gCertDB
.
importPKCS12File
(
certFile
testcase
.
passwordToUse
)
;
equal
(
errorCode
testcase
.
errorCode
verifying
error
code
)
;
equal
(
doesCertExist
(
CERT_COMMON_NAME
)
testcase
.
successExpected
cert
should
{
testcase
.
successExpected
?
"
"
:
"
not
"
}
be
found
now
)
;
}
function
run_test
(
)
{
for
(
let
testcase
of
gTestcases
)
{
runOneTestcase
(
testcase
)
;
}
}
