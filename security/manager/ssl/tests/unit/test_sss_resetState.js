"
use
strict
"
;
do_get_profile
(
)
;
var
gSSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
function
test_removeState
(
secInfo
type
flags
)
{
info
(
running
test_removeState
(
type
=
{
type
}
flags
=
{
flags
}
)
)
;
let
notPreloadedURI
=
Services
.
io
.
newURI
(
"
https
:
/
/
not
-
preloaded
.
example
.
com
"
)
;
ok
(
!
gSSService
.
isSecureURI
(
type
notPreloadedURI
flags
)
)
;
gSSService
.
processHeader
(
type
notPreloadedURI
"
max
-
age
=
1000
;
"
secInfo
flags
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
ok
(
gSSService
.
isSecureURI
(
type
notPreloadedURI
flags
)
)
;
gSSService
.
resetState
(
type
notPreloadedURI
flags
)
;
ok
(
!
gSSService
.
isSecureURI
(
type
notPreloadedURI
flags
)
)
;
gSSService
.
processHeader
(
type
notPreloadedURI
"
max
-
age
=
0
;
"
secInfo
flags
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
ok
(
!
gSSService
.
isSecureURI
(
type
notPreloadedURI
flags
)
)
;
gSSService
.
resetState
(
type
notPreloadedURI
flags
)
;
ok
(
!
gSSService
.
isSecureURI
(
type
notPreloadedURI
flags
)
)
;
let
preloadedHost
=
"
includesubdomains
.
preloaded
.
test
"
;
let
preloadedURI
=
Services
.
io
.
newURI
(
https
:
/
/
{
preloadedHost
}
)
;
ok
(
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
gSSService
.
processHeader
(
type
preloadedURI
"
max
-
age
=
1000
;
"
secInfo
flags
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
ok
(
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
gSSService
.
resetState
(
type
preloadedURI
flags
)
;
ok
(
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
gSSService
.
processHeader
(
type
preloadedURI
"
max
-
age
=
0
;
"
secInfo
flags
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
ok
(
!
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
gSSService
.
resetState
(
type
preloadedURI
flags
)
;
ok
(
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
}
function
add_tests
(
)
{
let
secInfo
=
null
;
add_connection_test
(
"
not
-
preloaded
.
example
.
com
"
PRErrorCodeSuccess
undefined
aSecInfo
=
>
{
secInfo
=
aSecInfo
;
}
)
;
add_task
(
(
)
=
>
{
test_removeState
(
secInfo
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
0
)
;
test_removeState
(
secInfo
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Ci
.
nsISocketProvider
.
NO_PERMANENT_STORAGE
)
;
}
)
;
}
function
run_test
(
)
{
add_tls_server_setup
(
"
BadCertAndPinningServer
"
"
bad_certs
"
)
;
add_tests
(
)
;
run_next_test
(
)
;
}
