"
use
strict
"
;
do_get_profile
(
)
;
var
gCertDB
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
const
ROOT_CERT
=
addCertFromFile
(
gCertDB
"
bad_certs
/
test
-
ca
.
pem
"
"
CTu
"
)
;
var
gSSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
function
run_test
(
)
{
Services
.
prefs
.
setBoolPref
(
"
security
.
cert_pinning
.
process_headers_from_non_builtin_roots
"
true
)
;
test_removeState
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
0
)
;
test_removeState
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Ci
.
nsISocketProvider
.
NO_PERMANENT_STORAGE
)
;
test_removeState
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
0
)
;
test_removeState
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
Ci
.
nsISocketProvider
.
NO_PERMANENT_STORAGE
)
;
}
function
test_removeState
(
type
flags
)
{
info
(
running
test_removeState
(
type
=
{
type
}
flags
=
{
flags
}
)
)
;
const
NON_ISSUED_KEY_HASH
=
"
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
=
"
;
const
PINNING_ROOT_KEY_HASH
=
"
VCIlmPM9NkgFQtrs4Oa5TeFcDu6MWRTKSNdePEhOgD8
=
"
;
const
PINNING_HEADERS
=
pin
-
sha256
=
"
{
NON_ISSUED_KEY_HASH
}
"
;
pin
-
sha256
=
"
{
PINNING_ROOT_KEY_HASH
}
"
;
let
headerAddendum
=
type
=
=
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
?
PINNING_HEADERS
:
"
"
;
let
secInfo
=
new
FakeTransportSecurityInfo
(
constructCertFromFile
(
"
bad_certs
/
default
-
ee
.
pem
"
)
)
;
let
notPreloadedURI
=
Services
.
io
.
newURI
(
"
https
:
/
/
not
-
preloaded
.
example
.
com
"
)
;
ok
(
!
gSSService
.
isSecureURI
(
type
notPreloadedURI
flags
)
)
;
gSSService
.
processHeader
(
type
notPreloadedURI
"
max
-
age
=
1000
;
"
+
headerAddendum
secInfo
flags
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
ok
(
gSSService
.
isSecureURI
(
type
notPreloadedURI
flags
)
)
;
gSSService
.
resetState
(
type
notPreloadedURI
flags
)
;
ok
(
!
gSSService
.
isSecureURI
(
type
notPreloadedURI
flags
)
)
;
gSSService
.
processHeader
(
type
notPreloadedURI
"
max
-
age
=
0
;
"
+
headerAddendum
secInfo
flags
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
ok
(
!
gSSService
.
isSecureURI
(
type
notPreloadedURI
flags
)
)
;
gSSService
.
resetState
(
type
notPreloadedURI
flags
)
;
ok
(
!
gSSService
.
isSecureURI
(
type
notPreloadedURI
flags
)
)
;
let
preloadedHost
=
type
=
=
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
?
"
include
-
subdomains
.
pinning
.
example
.
com
"
:
"
includesubdomains
.
preloaded
.
test
"
;
let
preloadedURI
=
Services
.
io
.
newURI
(
https
:
/
/
{
preloadedHost
}
)
;
ok
(
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
gSSService
.
processHeader
(
type
preloadedURI
"
max
-
age
=
1000
;
"
+
headerAddendum
secInfo
flags
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
ok
(
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
gSSService
.
resetState
(
type
preloadedURI
flags
)
;
ok
(
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
gSSService
.
processHeader
(
type
preloadedURI
"
max
-
age
=
0
;
"
+
headerAddendum
secInfo
flags
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
)
;
if
(
type
=
=
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
)
{
ok
(
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
}
else
{
ok
(
!
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
}
gSSService
.
resetState
(
type
preloadedURI
flags
)
;
ok
(
gSSService
.
isSecureURI
(
type
preloadedURI
flags
)
)
;
}
