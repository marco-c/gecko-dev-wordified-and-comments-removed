"
use
strict
"
;
do_get_profile
(
)
;
const
LABELS
=
[
"
mylabel1
"
"
mylabel2
"
"
mylabel3
"
]
;
async
function
delete_all_secrets
(
)
{
let
keystore
=
Cc
[
"
mozilla
.
org
/
security
/
oskeystore
;
1
"
]
.
getService
(
Ci
.
nsIOSKeyStore
)
;
for
(
let
label
of
LABELS
)
{
if
(
await
keystore
.
asyncSecretAvailable
(
label
)
)
{
await
keystore
.
asyncDeleteSecret
(
label
)
;
ok
(
!
await
keystore
.
asyncSecretAvailable
(
label
)
label
+
"
should
be
deleted
now
.
"
)
;
}
}
}
var
gMockPrompter
=
{
passwordToTry
:
null
numPrompts
:
0
promptPassword
(
dialogTitle
text
password
checkMsg
checkValue
)
{
this
.
numPrompts
+
+
;
if
(
this
.
numPrompts
>
1
)
{
return
false
;
}
equal
(
text
"
Please
enter
your
master
password
.
"
"
password
prompt
text
should
be
as
expected
"
)
;
equal
(
checkMsg
null
"
checkMsg
should
be
null
"
)
;
ok
(
this
.
passwordToTry
"
passwordToTry
should
be
non
-
null
"
)
;
password
.
value
=
this
.
passwordToTry
;
return
true
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIPrompt
]
)
}
;
var
gWindowWatcher
=
{
getNewPrompter
:
(
)
=
>
gMockPrompter
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIWindowWatcher
]
)
}
;
async
function
encrypt_decrypt_test
(
)
{
let
keystore
=
Cc
[
"
mozilla
.
org
/
security
/
oskeystore
;
1
"
]
.
getService
(
Ci
.
nsIOSKeyStore
)
;
ok
(
!
await
keystore
.
asyncSecretAvailable
(
LABELS
[
0
]
)
"
The
secret
should
not
be
available
yet
.
"
)
;
let
recoveryPhrase
=
await
keystore
.
asyncGenerateSecret
(
LABELS
[
0
]
)
;
ok
(
recoveryPhrase
"
A
recovery
phrase
should
'
ve
been
created
.
"
)
;
let
recoveryPhrase2
=
await
keystore
.
asyncGenerateSecret
(
LABELS
[
1
]
)
;
ok
(
recoveryPhrase2
"
A
recovery
phrase
should
'
ve
been
created
.
"
)
;
let
text
=
new
Uint8Array
(
[
0x01
0x00
0x01
]
)
;
let
ciphertext
=
"
"
;
try
{
ciphertext
=
await
keystore
.
asyncEncryptBytes
(
LABELS
[
0
]
text
.
length
text
)
;
ok
(
ciphertext
"
We
should
have
a
ciphertext
now
.
"
)
;
}
catch
(
e
)
{
ok
(
false
"
Error
encrypting
"
+
e
)
;
}
try
{
let
plaintext
=
await
keystore
.
asyncDecryptBytes
(
LABELS
[
0
]
ciphertext
)
;
ok
(
plaintext
.
toString
(
)
=
=
text
.
toString
(
)
"
Decrypted
plaintext
should
be
the
same
as
text
.
"
)
;
}
catch
(
e
)
{
ok
(
false
"
Error
decrypting
ciphertext
"
+
e
)
;
}
try
{
await
keystore
.
asyncDecryptBytes
(
LABELS
[
1
]
ciphertext
)
;
ok
(
false
"
Decrypting
with
the
wrong
key
should
fail
.
"
)
;
}
catch
(
e
)
{
ok
(
true
"
Decrypting
with
the
wrong
key
should
fail
"
+
e
)
;
}
}
add_task
(
async
function
(
)
{
let
keystore
=
Cc
[
"
mozilla
.
org
/
security
/
oskeystore
;
1
"
]
.
getService
(
Ci
.
nsIOSKeyStore
)
;
let
windowWatcherCID
;
if
(
keystore
.
isNSSKeyStore
)
{
windowWatcherCID
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
embedcomp
/
window
-
watcher
;
1
"
gWindowWatcher
)
;
registerCleanupFunction
(
(
)
=
>
{
MockRegistrar
.
unregister
(
windowWatcherCID
)
;
}
)
;
}
await
delete_all_secrets
(
)
;
await
encrypt_decrypt_test
(
)
;
await
delete_all_secrets
(
)
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
|
|
AppConstants
.
platform
=
=
"
win
"
)
{
ok
(
!
keystore
.
isNSSKeyStore
"
OS
X
and
Windows
should
use
the
non
-
NSS
implementation
"
)
;
}
if
(
keystore
.
isNSSKeyStore
)
{
let
tokenDB
=
Cc
[
"
mozilla
.
org
/
security
/
pk11tokendb
;
1
"
]
.
getService
(
Ci
.
nsIPK11TokenDB
)
;
let
token
=
tokenDB
.
getInternalKeyToken
(
)
;
token
.
initPassword
(
"
hunter2
"
)
;
await
keystore
.
asyncLock
(
)
;
gMockPrompter
.
passwordToTry
=
"
hunter2
"
;
await
encrypt_decrypt_test
(
)
;
ok
(
gMockPrompter
.
numPrompts
=
=
1
"
There
should
'
ve
been
one
password
prompt
.
"
)
;
await
delete_all_secrets
(
)
;
}
}
)
;
