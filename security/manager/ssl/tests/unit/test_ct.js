"
use
strict
"
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
function
expectCT
(
value
)
{
return
(
securityInfo
)
=
>
{
let
sslStatus
=
securityInfo
.
QueryInterface
(
Ci
.
nsISSLStatusProvider
)
.
SSLStatus
;
Assert
.
equal
(
sslStatus
.
certificateTransparencyStatus
value
"
actual
and
expected
CT
status
should
match
"
)
;
}
;
}
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
pki
.
certificate_transparency
.
mode
"
)
;
}
)
;
function
run_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
certificate_transparency
.
mode
"
1
)
;
add_tls_server_setup
(
"
BadCertServer
"
"
test_ct
"
)
;
add_connection_test
(
"
ct
-
valid
.
example
.
com
"
PRErrorCodeSuccess
null
expectCT
(
Ci
.
nsISSLStatus
.
CERTIFICATE_TRANSPARENCY_POLICY_COMPLIANT
)
)
;
add_connection_test
(
"
ct
-
insufficient
-
scts
.
example
.
com
"
PRErrorCodeSuccess
null
expectCT
(
Ci
.
nsISSLStatus
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
)
)
;
run_next_test
(
)
;
}
