"
use
strict
"
;
do_get_profile
(
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
pki
.
certificate_transparency
.
mode
"
)
;
let
cert
=
constructCertFromFile
(
"
test_ct
/
ct
-
valid
.
example
.
com
.
pem
"
)
;
setCertTrust
(
cert
"
"
)
;
}
)
;
function
run_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
certificate_transparency
.
mode
"
1
)
;
add_tls_server_setup
(
"
BadCertAndPinningServer
"
"
test_ct
"
)
;
add_ct_test
(
"
ct
-
valid
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_COMPLIANT
)
;
add_ct_test
(
"
ct
-
insufficient
-
scts
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
)
;
add_test
(
(
)
=
>
{
let
cert
=
constructCertFromFile
(
"
test_ct
/
ct
-
valid
.
example
.
com
.
pem
"
)
;
setCertTrust
(
cert
"
CTu
"
)
;
clearSessionCache
(
)
;
run_next_test
(
)
;
}
)
;
add_ct_test
(
"
ct
-
valid
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
)
;
add_ct_test
(
"
ct
-
future
-
timestamp
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
)
;
add_ct_test
(
"
ct
-
multiple
-
from
-
same
-
log
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_DIVERSE_SCTS
)
;
add_ct_test
(
"
ct
-
unknown
-
log
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
)
;
run_next_test
(
)
;
}
