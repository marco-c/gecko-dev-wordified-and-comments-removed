"
use
strict
"
;
do_get_profile
(
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
pki
.
certificate_transparency
.
mode
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
test
.
built_in_root_hash
"
)
;
let
cert
=
constructCertFromFile
(
"
test_ct
/
ct
-
valid
.
example
.
com
.
pem
"
)
;
setCertTrust
(
cert
"
"
)
;
}
)
;
function
add_tests_in_mode
(
mode
)
{
add_test
(
function
set_mode
(
)
{
info
(
setting
CT
to
mode
{
mode
}
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
certificate_transparency
.
mode
"
mode
)
;
run_next_test
(
)
;
}
)
;
add_ct_test
(
"
ct
-
unknown
-
log
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_NOT_APPLICABLE
true
)
;
add_test
(
function
set_test_root_as_built_in
(
)
{
let
rootCert
=
constructCertFromFile
(
"
test_ct
/
test
-
ca
.
pem
"
)
;
Services
.
prefs
.
setCharPref
(
"
security
.
test
.
built_in_root_hash
"
rootCert
.
sha256Fingerprint
)
;
run_next_test
(
)
;
}
)
;
add_ct_test
(
"
ct
-
valid
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_COMPLIANT
true
)
;
add_ct_test
(
"
ct
-
insufficient
-
scts
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
mode
=
=
CT_MODE_COLLECT_TELEMETRY
)
;
add_ct_test
(
"
ct
-
future
-
timestamp
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
mode
=
=
CT_MODE_COLLECT_TELEMETRY
)
;
add_ct_test
(
"
ct
-
multiple
-
from
-
same
-
log
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_DIVERSE_SCTS
mode
=
=
CT_MODE_COLLECT_TELEMETRY
)
;
add_ct_test
(
"
ct
-
unknown
-
log
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
mode
=
=
CT_MODE_COLLECT_TELEMETRY
)
;
add_ct_test
(
"
no
-
ct
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
mode
=
=
CT_MODE_COLLECT_TELEMETRY
)
;
add_test
(
function
set_disable_ct_for_hosts_pref
(
)
{
Services
.
prefs
.
setCharPref
(
"
security
.
pki
.
certificate_transparency
.
disable_for_hosts
"
"
.
ct
-
unknown
-
log
.
example
.
com
no
-
ct
.
example
.
com
"
)
;
clearSessionCache
(
)
;
run_next_test
(
)
;
}
)
;
add_ct_test
(
"
ct
-
unknown
-
log
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
true
)
;
add_ct_test
(
"
sub
.
ct
-
unknown
-
log
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
mode
=
=
CT_MODE_COLLECT_TELEMETRY
)
;
add_ct_test
(
"
no
-
ct
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
true
)
;
add_ct_test
(
"
sub
.
no
-
ct
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
true
)
;
add_ct_test
(
"
ct
-
insufficient
-
scts
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
mode
=
=
CT_MODE_COLLECT_TELEMETRY
)
;
add_test
(
function
reset_disable_ct_for_hosts_pref
(
)
{
Services
.
prefs
.
clearUserPref
(
"
security
.
pki
.
certificate_transparency
.
disable_for_hosts
"
)
;
clearSessionCache
(
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
set_disable_ct_for_spki_hashes_pref_nonexistent_keys
(
)
{
Services
.
prefs
.
setCharPref
(
"
security
.
pki
.
certificate_transparency
.
disable_for_spki_hashes
"
"
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
=
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
=
"
)
;
clearSessionCache
(
)
;
run_next_test
(
)
;
}
)
;
add_ct_test
(
"
ct
-
insufficient
-
scts
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
mode
=
=
CT_MODE_COLLECT_TELEMETRY
)
;
add_test
(
function
set_disable_ct_for_spki_hashes_pref
(
)
{
Services
.
prefs
.
setCharPref
(
"
security
.
pki
.
certificate_transparency
.
disable_for_spki_hashes
"
"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
=
VCIlmPM9NkgFQtrs4Oa5TeFcDu6MWRTKSNdePEhOgD8
=
"
)
;
clearSessionCache
(
)
;
run_next_test
(
)
;
}
)
;
add_ct_test
(
"
ct
-
insufficient
-
scts
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
true
)
;
add_test
(
function
set_disable_ct_for_spki_hashes_pref_alternate
(
)
{
Services
.
prefs
.
setCharPref
(
"
security
.
pki
.
certificate_transparency
.
disable_for_spki_hashes
"
"
MQj2tt1yGAfwFpWETYUCVrZxk2CD2705NKBQUlAaKJI
=
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
=
"
)
;
clearSessionCache
(
)
;
run_next_test
(
)
;
}
)
;
add_ct_test
(
"
no
-
ct
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
true
)
;
add_test
(
function
reset_disable_ct_for_spki_hashes_pref
(
)
{
Services
.
prefs
.
clearUserPref
(
"
security
.
pki
.
certificate_transparency
.
disable_for_spki_hashes
"
)
;
clearSessionCache
(
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
set_up_end_entity_trust_anchor_test
(
)
{
let
cert
=
constructCertFromFile
(
"
test_ct
/
ct
-
valid
.
example
.
com
.
pem
"
)
;
Services
.
prefs
.
setCharPref
(
"
security
.
test
.
built_in_root_hash
"
cert
.
sha256Fingerprint
)
;
setCertTrust
(
cert
"
CTu
"
)
;
clearSessionCache
(
)
;
run_next_test
(
)
;
}
)
;
add_ct_test
(
"
ct
-
valid
.
example
.
com
"
Ci
.
nsITransportSecurityInfo
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
mode
=
=
CT_MODE_COLLECT_TELEMETRY
)
;
add_test
(
function
reset_for_next_test_mode
(
)
{
Services
.
prefs
.
clearUserPref
(
"
security
.
test
.
built_in_root_hash
"
)
;
let
cert
=
constructCertFromFile
(
"
test_ct
/
ct
-
valid
.
example
.
com
.
pem
"
)
;
setCertTrust
(
cert
"
u
"
)
;
clearSessionCache
(
)
;
run_next_test
(
)
;
}
)
;
}
function
run_test
(
)
{
add_tls_server_setup
(
"
BadCertAndPinningServer
"
"
test_ct
"
)
;
add_tests_in_mode
(
CT_MODE_COLLECT_TELEMETRY
)
;
add_tests_in_mode
(
CT_MODE_ENFORCE
)
;
run_next_test
(
)
;
}
