"
use
strict
"
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
const
VALIDATION_TIME
=
1456790400
;
function
certFromFile
(
certName
)
{
return
constructCertFromFile
(
"
test_cert_sha1
/
"
+
certName
+
"
.
pem
"
)
;
}
function
loadCertWithTrust
(
certName
trustString
)
{
addCertFromFile
(
certdb
"
test_cert_sha1
/
"
+
certName
+
"
.
pem
"
trustString
)
;
}
function
checkEndEntity
(
cert
expectedResult
)
{
checkCertErrorGenericAtTime
(
certdb
cert
expectedResult
certificateUsageSSLServer
VALIDATION_TIME
)
;
}
function
run_test
(
)
{
loadCertWithTrust
(
"
ca
"
"
CTu
"
)
;
loadCertWithTrust
(
"
int
-
pre
"
"
"
)
;
loadCertWithTrust
(
"
int
-
post
"
"
"
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
sha1_enforcement_level
"
0
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
pre_int
-
pre
"
)
PRErrorCodeSuccess
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
pre
"
)
PRErrorCodeSuccess
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
post
"
)
PRErrorCodeSuccess
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
sha1_enforcement_level
"
1
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
pre_int
-
pre
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
pre
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
post
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
sha1_enforcement_level
"
2
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
pre_int
-
pre
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
pre
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
post
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
sha1_enforcement_level
"
3
)
;
if
(
isDebugBuild
)
{
let
root
=
certFromFile
(
"
ca
"
)
;
Services
.
prefs
.
setCharPref
(
"
security
.
test
.
built_in_root_hash
"
root
.
sha256Fingerprint
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
pre_int
-
pre
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
pre
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
post
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
test
.
built_in_root_hash
"
)
;
}
checkEndEntity
(
certFromFile
(
"
ee
-
pre_int
-
pre
"
)
PRErrorCodeSuccess
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
pre
"
)
PRErrorCodeSuccess
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
post
"
)
PRErrorCodeSuccess
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
pki
.
sha1_enforcement_level
"
4
)
;
if
(
isDebugBuild
)
{
let
root
=
certFromFile
(
"
ca
"
)
;
Services
.
prefs
.
setCharPref
(
"
security
.
test
.
built_in_root_hash
"
root
.
sha256Fingerprint
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
pre_int
-
pre
"
)
PRErrorCodeSuccess
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
pre
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
post
"
)
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
test
.
built_in_root_hash
"
)
;
}
checkEndEntity
(
certFromFile
(
"
ee
-
pre_int
-
pre
"
)
PRErrorCodeSuccess
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
pre
"
)
PRErrorCodeSuccess
)
;
checkEndEntity
(
certFromFile
(
"
ee
-
post_int
-
post
"
)
PRErrorCodeSuccess
)
;
}
