"
use
strict
"
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
function
load_cert
(
cert_name
trust_string
)
{
let
cert_filename
=
cert_name
+
"
.
pem
"
;
return
addCertFromFile
(
certdb
"
test_cert_trust
/
"
+
cert_filename
trust_string
)
;
}
function
setup_basic_trusts
(
ca_cert
int_cert
)
{
certdb
.
setCertTrust
(
ca_cert
Ci
.
nsIX509Cert
.
CA_CERT
Ci
.
nsIX509CertDB
.
TRUSTED_SSL
|
Ci
.
nsIX509CertDB
.
TRUSTED_EMAIL
)
;
certdb
.
setCertTrust
(
int_cert
Ci
.
nsIX509Cert
.
CA_CERT
0
)
;
}
async
function
test_ca_distrust
(
ee_cert
cert_to_modify_trust
isRootCA
)
{
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSClient
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_CA_CERT_INVALID
Ci
.
nsIX509CertDB
.
verifyUsageTLSServerCA
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailSigner
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailRecipient
)
;
setCertTrust
(
cert_to_modify_trust
"
p
p
p
"
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_UNTRUSTED_ISSUER
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_UNTRUSTED_ISSUER
Ci
.
nsIX509CertDB
.
verifyUsageTLSClient
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_CA_CERT_INVALID
Ci
.
nsIX509CertDB
.
verifyUsageTLSServerCA
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_UNTRUSTED_ISSUER
Ci
.
nsIX509CertDB
.
verifyUsageEmailSigner
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_UNTRUSTED_ISSUER
Ci
.
nsIX509CertDB
.
verifyUsageEmailRecipient
)
;
setCertTrust
(
cert_to_modify_trust
"
T
T
T
"
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
isRootCA
?
SEC_ERROR_UNKNOWN_ISSUER
:
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
isRootCA
?
SEC_ERROR_UNKNOWN_ISSUER
:
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSClient
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_CA_CERT_INVALID
Ci
.
nsIX509CertDB
.
verifyUsageTLSServerCA
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
isRootCA
?
SEC_ERROR_UNKNOWN_ISSUER
:
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailSigner
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
isRootCA
?
SEC_ERROR_UNKNOWN_ISSUER
:
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailRecipient
)
;
setCertTrust
(
cert_to_modify_trust
"
p
C
C
"
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_UNTRUSTED_ISSUER
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSClient
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_CA_CERT_INVALID
Ci
.
nsIX509CertDB
.
verifyUsageTLSServerCA
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailSigner
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailRecipient
)
;
setCertTrust
(
cert_to_modify_trust
"
C
C
"
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
isRootCA
?
SEC_ERROR_UNKNOWN_ISSUER
:
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSClient
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_CA_CERT_INVALID
Ci
.
nsIX509CertDB
.
verifyUsageTLSServerCA
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailSigner
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailRecipient
)
;
setCertTrust
(
cert_to_modify_trust
"
C
p
C
"
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_UNTRUSTED_ISSUER
Ci
.
nsIX509CertDB
.
verifyUsageTLSClient
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_CA_CERT_INVALID
Ci
.
nsIX509CertDB
.
verifyUsageTLSServerCA
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_UNTRUSTED_ISSUER
Ci
.
nsIX509CertDB
.
verifyUsageEmailSigner
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_UNTRUSTED_ISSUER
Ci
.
nsIX509CertDB
.
verifyUsageEmailRecipient
)
;
setCertTrust
(
cert_to_modify_trust
"
C
C
"
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
isRootCA
?
SEC_ERROR_UNKNOWN_ISSUER
:
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSClient
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
SEC_ERROR_CA_CERT_INVALID
Ci
.
nsIX509CertDB
.
verifyUsageTLSServerCA
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
isRootCA
?
SEC_ERROR_UNKNOWN_ISSUER
:
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailSigner
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
isRootCA
?
SEC_ERROR_UNKNOWN_ISSUER
:
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailRecipient
)
;
}
add_task
(
async
function
(
)
{
let
certList
=
[
"
ca
"
"
int
"
"
ee
"
]
;
let
loadedCerts
=
[
]
;
for
(
let
certName
of
certList
)
{
loadedCerts
.
push
(
load_cert
(
certName
"
"
)
)
;
}
let
ca_cert
=
loadedCerts
[
0
]
;
notEqual
(
ca_cert
null
"
CA
cert
should
have
successfully
loaded
"
)
;
let
int_cert
=
loadedCerts
[
1
]
;
notEqual
(
int_cert
null
"
Intermediate
cert
should
have
successfully
loaded
"
)
;
let
ee_cert
=
loadedCerts
[
2
]
;
notEqual
(
ee_cert
null
"
EE
cert
should
have
successfully
loaded
"
)
;
setup_basic_trusts
(
ca_cert
int_cert
)
;
await
test_ca_distrust
(
ee_cert
ca_cert
true
)
;
setup_basic_trusts
(
ca_cert
int_cert
)
;
await
test_ca_distrust
(
ee_cert
int_cert
false
)
;
setCertTrust
(
ca_cert
"
"
)
;
setCertTrust
(
int_cert
"
"
)
;
setCertTrust
(
ee_cert
"
CTu
CTu
CTu
"
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSServer
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageTLSClient
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailSigner
)
;
await
checkCertErrorGeneric
(
certdb
ee_cert
PRErrorCodeSuccess
Ci
.
nsIX509CertDB
.
verifyUsageEmailRecipient
)
;
}
)
;
