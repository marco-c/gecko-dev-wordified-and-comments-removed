"
use
strict
"
;
do_get_profile
(
)
;
const
gModuleDB
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11moduledb
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11ModuleDB
)
;
function
checkTestModuleNotPresent
(
)
{
let
modules
=
gModuleDB
.
listModules
(
)
;
ok
(
modules
.
hasMoreElements
(
)
"
One
or
more
modules
should
be
present
with
test
module
not
present
"
)
;
while
(
modules
.
hasMoreElements
(
)
)
{
let
module
=
modules
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPKCS11Module
)
;
notEqual
(
module
.
name
"
PKCS11
Test
Module
"
"
Non
-
test
module
name
shouldn
'
t
equal
'
PKCS11
Test
Module
'
"
)
;
ok
(
!
(
module
.
libName
&
&
module
.
libName
.
includes
(
"
pkcs11testmodule
"
)
)
"
Non
-
test
module
lib
name
should
not
include
'
pkcs11testmodule
'
"
)
;
}
throws
(
(
)
=
>
gModuleDB
.
findModuleByName
(
"
PKCS11
Test
Module
"
)
/
NS_ERROR_FAILURE
/
"
Test
module
should
not
be
findable
by
name
"
)
;
}
function
checkTestModuleExists
(
)
{
let
modules
=
gModuleDB
.
listModules
(
)
;
ok
(
modules
.
hasMoreElements
(
)
"
One
or
more
modules
should
be
present
with
test
module
present
"
)
;
let
testModule
=
null
;
while
(
modules
.
hasMoreElements
(
)
)
{
let
module
=
modules
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPKCS11Module
)
;
if
(
module
.
name
=
=
"
PKCS11
Test
Module
"
)
{
testModule
=
module
;
break
;
}
}
notEqual
(
testModule
null
"
Test
module
should
have
been
found
"
)
;
notEqual
(
testModule
.
libName
null
"
Test
module
lib
name
should
not
be
null
"
)
;
ok
(
testModule
.
libName
.
includes
(
ctypes
.
libraryName
(
"
pkcs11testmodule
"
)
)
"
Test
module
lib
name
should
include
lib
name
of
'
pkcs11testmodule
'
"
)
;
notEqual
(
gModuleDB
.
findModuleByName
(
"
PKCS11
Test
Module
"
)
null
"
Test
module
should
be
findable
by
name
"
)
;
return
testModule
;
}
function
run_test
(
)
{
checkTestModuleNotPresent
(
)
;
loadPKCS11TestModule
(
true
)
;
let
testModule
=
checkTestModuleExists
(
)
;
let
slots
=
testModule
.
listSlots
(
)
;
let
testModuleSlotNames
=
[
]
;
while
(
slots
.
hasMoreElements
(
)
)
{
let
slot
=
slots
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPKCS11Slot
)
;
testModuleSlotNames
.
push
(
slot
.
name
)
;
}
testModuleSlotNames
.
sort
(
)
;
const
expectedSlotNames
=
[
"
Test
PKCS11
Slot
"
"
Test
PKCS11
Slot
"
]
;
deepEqual
(
testModuleSlotNames
expectedSlotNames
"
Actual
and
expected
slot
names
should
be
equal
"
)
;
notEqual
(
testModule
.
findSlotByName
(
"
Test
PKCS11
Slot
"
)
null
"
Test
slot
should
be
findable
by
name
"
)
;
throws
(
(
)
=
>
testModule
.
findSlotByName
(
"
Not
Present
"
)
/
NS_ERROR_FAILURE
/
"
Non
-
present
slot
should
not
be
findable
by
name
"
)
;
let
strBundleSvc
=
Cc
[
"
mozilla
.
org
/
intl
/
stringbundle
;
1
"
]
.
getService
(
Ci
.
nsIStringBundleService
)
;
let
bundle
=
strBundleSvc
.
createBundle
(
"
chrome
:
/
/
pipnss
/
locale
/
pipnss
.
properties
"
)
;
let
internalTokenName
=
bundle
.
GetStringFromName
(
"
PrivateTokenDescription
"
)
;
let
internalTokenAsSlot
=
gModuleDB
.
findSlotByName
(
internalTokenName
)
;
notEqual
(
internalTokenAsSlot
null
"
Internal
'
slot
'
should
be
findable
by
name
via
the
module
DB
"
)
;
ok
(
internalTokenAsSlot
instanceof
Ci
.
nsIPKCS11Slot
"
Module
DB
findSlotByName
(
)
should
return
a
token
as
an
nsIPKCS11Slot
"
)
;
equal
(
internalTokenAsSlot
.
name
bundle
.
GetStringFromName
(
"
PrivateSlotDescription
"
)
"
Spot
check
:
actual
and
expected
internal
'
slot
'
names
should
be
equal
"
)
;
throws
(
(
)
=
>
gModuleDB
.
findSlotByName
(
"
Not
Present
"
)
/
NS_ERROR_FAILURE
/
"
Non
-
present
'
slot
'
should
not
be
findable
by
name
via
the
module
DB
"
)
;
throws
(
(
)
=
>
gModuleDB
.
findSlotByName
(
"
"
)
/
NS_ERROR_ILLEGAL_VALUE
/
"
nsIPKCS11ModuleDB
.
findSlotByName
should
throw
given
an
empty
name
"
)
;
let
pkcs11
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11
)
;
pkcs11
.
deleteModule
(
"
PKCS11
Test
Module
"
)
;
checkTestModuleNotPresent
(
)
;
notEqual
(
gModuleDB
.
getInternal
(
)
null
"
The
internal
module
should
be
present
"
)
;
notEqual
(
gModuleDB
.
getInternalFIPS
(
)
null
"
The
internal
FIPS
module
should
be
present
"
)
;
ok
(
gModuleDB
.
canToggleFIPS
"
It
should
be
possible
to
toggle
FIPS
"
)
;
ok
(
!
gModuleDB
.
isFIPSEnabled
"
FIPS
should
not
be
enabled
"
)
;
}
