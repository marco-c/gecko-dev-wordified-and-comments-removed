"
use
strict
"
;
do_get_profile
(
)
;
const
gModuleDB
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11moduledb
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11ModuleDB
)
;
add_task
(
async
function
test_pkcs11_module
(
)
{
Services
.
fog
.
initializeFOG
(
)
;
equal
(
0
await
Glean
.
pkcs11
.
thirdPartyModulesLoaded
.
testGetValue
(
)
"
should
have
no
third
-
party
modules
to
begin
with
"
)
;
checkPKCS11ModuleNotPresent
(
"
PKCS11
Test
Module
"
"
pkcs11testmodule
"
)
;
let
libraryFile
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
libraryFile
.
append
(
"
pkcs11testmodule
"
)
;
libraryFile
.
append
(
ctypes
.
libraryName
(
"
pkcs11testmodule
"
)
)
;
loadPKCS11Module
(
libraryFile
"
PKCS11
Test
Module
"
true
)
;
equal
(
1
await
Glean
.
pkcs11
.
thirdPartyModulesLoaded
.
testGetValue
(
)
"
should
have
one
third
-
party
module
after
loading
it
"
)
;
let
testModule
=
checkPKCS11ModuleExists
(
"
PKCS11
Test
Module
"
"
pkcs11testmodule
"
)
;
let
testModuleSlotNames
=
Array
.
from
(
testModule
.
listSlots
(
)
slot
=
>
slot
.
name
)
;
testModuleSlotNames
.
sort
(
)
;
const
expectedSlotNames
=
[
"
Empty
PKCS11
Slot
"
"
Test
PKCS11
Slot
"
"
Test
PKCS11
Slot
"
]
;
deepEqual
(
testModuleSlotNames
expectedSlotNames
"
Actual
and
expected
slot
names
should
be
equal
"
)
;
let
pkcs11ModuleDB
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11moduledb
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11ModuleDB
)
;
pkcs11ModuleDB
.
deleteModule
(
"
PKCS11
Test
Module
"
)
;
equal
(
0
await
Glean
.
pkcs11
.
thirdPartyModulesLoaded
.
testGetValue
(
)
"
should
have
no
third
-
party
modules
after
unloading
it
"
)
;
checkPKCS11ModuleNotPresent
(
"
PKCS11
Test
Module
"
"
pkcs11testmodule
"
)
;
ok
(
!
gModuleDB
.
canToggleFIPS
"
It
should
NOT
be
possible
to
toggle
FIPS
"
)
;
ok
(
!
gModuleDB
.
isFIPSEnabled
"
FIPS
should
not
be
enabled
"
)
;
}
)
;
