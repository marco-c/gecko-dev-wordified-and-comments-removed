"
use
strict
"
;
do_get_profile
(
)
;
const
gModuleDB
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11moduledb
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11ModuleDB
)
;
function
checkTestModuleNotPresent
(
)
{
let
modules
=
gModuleDB
.
listModules
(
)
;
ok
(
modules
.
hasMoreElements
(
)
"
One
or
more
modules
should
be
present
with
test
module
not
present
"
)
;
while
(
modules
.
hasMoreElements
(
)
)
{
let
module
=
modules
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPKCS11Module
)
;
notEqual
(
module
.
name
"
PKCS11
Test
Module
"
"
Non
-
test
module
name
shouldn
'
t
equal
'
PKCS11
Test
Module
'
"
)
;
ok
(
!
(
module
.
libName
&
&
module
.
libName
.
includes
(
"
pkcs11testmodule
"
)
)
"
Non
-
test
module
lib
name
should
not
include
'
pkcs11testmodule
'
"
)
;
}
}
function
checkTestModuleExists
(
)
{
let
modules
=
gModuleDB
.
listModules
(
)
;
ok
(
modules
.
hasMoreElements
(
)
"
One
or
more
modules
should
be
present
with
test
module
present
"
)
;
let
testModule
=
null
;
while
(
modules
.
hasMoreElements
(
)
)
{
let
module
=
modules
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPKCS11Module
)
;
if
(
module
.
name
=
=
"
PKCS11
Test
Module
"
)
{
testModule
=
module
;
break
;
}
}
notEqual
(
testModule
null
"
Test
module
should
have
been
found
"
)
;
notEqual
(
testModule
.
libName
null
"
Test
module
lib
name
should
not
be
null
"
)
;
ok
(
testModule
.
libName
.
includes
(
ctypes
.
libraryName
(
"
pkcs11testmodule
"
)
)
"
Test
module
lib
name
should
include
lib
name
of
'
pkcs11testmodule
'
"
)
;
return
testModule
;
}
function
checkModuleTelemetry
(
additionalExpectedModule
=
undefined
)
{
let
expectedModules
=
[
"
NSS
Internal
PKCS
#
11
Module
"
]
;
if
(
additionalExpectedModule
)
{
expectedModules
.
push
(
additionalExpectedModule
)
;
}
expectedModules
.
sort
(
)
;
let
telemetry
=
Services
.
telemetry
.
snapshotKeyedScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTOUT
)
.
parent
;
let
moduleTelemetry
=
telemetry
[
"
security
.
pkcs11_modules_loaded
"
]
;
let
actualModules
=
[
]
;
Object
.
keys
(
moduleTelemetry
)
.
forEach
(
(
key
)
=
>
{
ok
(
moduleTelemetry
[
key
]
"
each
keyed
scalar
should
be
true
"
)
;
actualModules
.
push
(
key
)
;
}
)
;
actualModules
.
sort
(
)
;
equal
(
actualModules
.
length
expectedModules
.
length
"
the
number
of
actual
and
expected
loaded
modules
should
be
the
same
"
)
;
for
(
let
i
in
actualModules
)
{
equal
(
actualModules
[
i
]
expectedModules
[
i
]
"
actual
and
expected
module
names
should
match
"
)
;
}
}
function
run_test
(
)
{
checkTestModuleNotPresent
(
)
;
checkModuleTelemetry
(
)
;
loadPKCS11TestModule
(
true
)
;
checkModuleTelemetry
(
{
AppConstants
.
DLL_PREFIX
}
pkcs11testmodule
{
AppConstants
.
DLL_SUFFIX
}
)
;
let
testModule
=
checkTestModuleExists
(
)
;
let
slots
=
testModule
.
listSlots
(
)
;
let
testModuleSlotNames
=
[
]
;
while
(
slots
.
hasMoreElements
(
)
)
{
let
slot
=
slots
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPKCS11Slot
)
;
testModuleSlotNames
.
push
(
slot
.
name
)
;
}
testModuleSlotNames
.
sort
(
)
;
const
expectedSlotNames
=
[
"
Empty
PKCS11
Slot
"
"
Test
PKCS11
Slot
"
"
Test
PKCS11
Slot
"
]
;
deepEqual
(
testModuleSlotNames
expectedSlotNames
"
Actual
and
expected
slot
names
should
be
equal
"
)
;
let
pkcs11ModuleDB
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11moduledb
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11ModuleDB
)
;
pkcs11ModuleDB
.
deleteModule
(
"
PKCS11
Test
Module
"
)
;
checkTestModuleNotPresent
(
)
;
ok
(
!
gModuleDB
.
canToggleFIPS
"
It
should
NOT
be
possible
to
toggle
FIPS
"
)
;
ok
(
!
gModuleDB
.
isFIPSEnabled
"
FIPS
should
not
be
enabled
"
)
;
}
