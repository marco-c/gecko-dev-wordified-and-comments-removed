"
use
strict
"
;
do_get_profile
(
)
;
const
certDB
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
const
SERVER_PORT
=
8888
;
function
getOCSPResponder
(
expectedCertNames
)
{
let
expectedPaths
=
expectedCertNames
.
slice
(
)
;
return
startOCSPResponder
(
SERVER_PORT
"
www
.
example
.
com
"
"
test_validity
"
expectedCertNames
expectedPaths
)
;
}
function
certFromFile
(
filename
)
{
return
constructCertFromFile
(
test_validity
/
{
filename
}
)
;
}
function
loadCert
(
certFilename
trustString
)
{
addCertFromFile
(
certDB
test_validity
/
{
certFilename
}
trustString
)
;
}
async
function
doEVTest
(
expectedNamesForOCSP
rootCertFileName
intCertFileNames
endEntityCertFileName
expectedResult
)
{
clearOCSPCache
(
)
;
let
ocspResponder
=
getOCSPResponder
(
expectedNamesForOCSP
)
;
loadCert
(
{
rootCertFileName
}
.
pem
"
CTu
CTu
CTu
"
)
;
for
(
let
intCertFileName
of
intCertFileNames
)
{
loadCert
(
{
intCertFileName
}
.
pem
"
"
)
;
}
await
checkEVStatus
(
certDB
certFromFile
(
{
endEntityCertFileName
}
.
pem
)
certificateUsageSSLServer
expectedResult
)
;
await
stopOCSPResponder
(
ocspResponder
)
;
}
async
function
checkEVChains
(
)
{
const
intFullName
=
"
ev_int_60_months
-
evroot
"
;
let
eeFullName
=
ev_ee_27_months
-
{
intFullName
}
;
let
expectedNamesForOCSP
=
gEVExpected
?
[
intFullName
eeFullName
]
:
[
eeFullName
]
;
await
doEVTest
(
expectedNamesForOCSP
"
.
.
/
test_ev_certs
/
evroot
"
[
intFullName
]
eeFullName
gEVExpected
)
;
eeFullName
=
ev_ee_28_months
-
{
intFullName
}
;
expectedNamesForOCSP
=
gEVExpected
?
[
intFullName
eeFullName
]
:
[
eeFullName
]
;
await
doEVTest
(
expectedNamesForOCSP
"
.
.
/
test_ev_certs
/
evroot
"
[
intFullName
]
eeFullName
false
)
;
}
add_task
(
async
function
(
)
{
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
www
.
example
.
com
"
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
await
checkEVChains
(
)
;
}
)
;
