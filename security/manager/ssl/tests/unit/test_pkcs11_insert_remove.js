"
use
strict
"
;
do_get_profile
(
)
;
Cc
[
"
mozilla
.
org
/
psm
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
;
const
gExpectedTokenLabel
=
"
Test
PKCS11
Toke
Label
"
;
const
gTokenDB
=
Cc
[
"
mozilla
.
org
/
security
/
pk11tokendb
;
1
"
]
.
getService
(
Ci
.
nsIPK11TokenDB
)
;
function
SmartcardObserver
(
type
)
{
this
.
type
=
type
;
do_test_pending
(
)
;
}
SmartcardObserver
.
prototype
=
{
observe
:
function
(
subject
topic
data
)
{
equal
(
topic
this
.
type
"
Observed
and
expected
types
should
match
"
)
;
equal
(
gExpectedTokenLabel
data
"
Expected
and
observed
token
labels
should
match
"
)
;
let
tokenList
=
gTokenDB
.
listTokens
(
)
;
let
testTokenLabelFound
=
false
;
while
(
tokenList
.
hasMoreElements
(
)
)
{
let
token
=
tokenList
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPK11Token
)
;
if
(
token
.
tokenLabel
=
=
gExpectedTokenLabel
)
{
testTokenLabelFound
=
true
;
break
;
}
}
let
testTokenShouldBePresent
=
this
.
type
=
=
"
smartcard
-
insert
"
;
equal
(
testTokenLabelFound
testTokenShouldBePresent
"
Should
find
test
token
only
when
the
test
module
is
loaded
"
)
;
if
(
testTokenShouldBePresent
)
{
notEqual
(
gTokenDB
.
findTokenByName
(
gExpectedTokenLabel
)
null
"
Test
token
should
be
findable
by
name
"
)
;
}
else
{
throws
(
(
)
=
>
gTokenDB
.
findTokenByName
(
gExpectedTokenLabel
)
/
NS_ERROR_FAILURE
/
"
Non
-
present
test
token
should
not
be
findable
by
name
"
)
;
}
Services
.
obs
.
removeObserver
(
this
this
.
type
)
;
do_test_finished
(
)
;
}
}
;
function
run_test
(
)
{
Services
.
obs
.
addObserver
(
new
SmartcardObserver
(
"
smartcard
-
insert
"
)
"
smartcard
-
insert
"
false
)
;
Services
.
obs
.
addObserver
(
new
SmartcardObserver
(
"
smartcard
-
remove
"
)
"
smartcard
-
remove
"
false
)
;
loadPKCS11TestModule
(
false
)
;
}
