"
use
strict
"
;
do_get_profile
(
)
;
let
gSetPasswordShownCount
=
0
;
const
gTokenPasswordDialogs
=
{
setPassword
:
(
ctx
tokenName
canceled
)
=
>
{
gSetPasswordShownCount
+
+
;
do_print
(
setPassword
(
)
called
;
shown
{
gSetPasswordShownCount
}
times
)
;
do_print
(
tokenName
:
{
tokenName
}
)
;
canceled
.
value
=
false
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsITokenPasswordDialogs
]
)
}
;
function
run_test
(
)
{
loginToDBWithDefaultPassword
(
)
;
let
sdr
=
Cc
[
"
mozilla
.
org
/
security
/
sdr
;
1
"
]
.
getService
(
Ci
.
nsISecretDecoderRing
)
;
let
inputs
=
[
"
"
"
foo
"
"
1234567890
~
!
#
%
^
&
*
(
)
-
_
=
+
{
[
}
]
|
\
\
:
;
'
\
"
<
.
>
/
?
"
]
;
for
(
let
input
of
inputs
)
{
let
encrypted
=
sdr
.
encryptString
(
input
)
;
notEqual
(
input
encrypted
"
Encypted
input
should
not
just
be
the
input
itself
"
)
;
try
{
atob
(
encrypted
)
;
}
catch
(
e
)
{
ok
(
false
encryptString
(
)
should
have
returned
Base64
:
{
e
}
)
;
}
equal
(
input
sdr
.
decryptString
(
encrypted
)
"
decryptString
(
encryptString
(
input
)
)
should
return
input
"
)
;
}
throws
(
(
)
=
>
sdr
.
decryptString
(
"
*
"
)
/
NS_ERROR_ILLEGAL_VALUE
/
"
decryptString
(
)
should
throw
if
given
non
-
Base64
input
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
let
tokenPasswordDialogsCID
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
nsTokenPasswordDialogs
;
1
"
gTokenPasswordDialogs
)
;
do_register_cleanup
(
(
)
=
>
{
MockRegistrar
.
unregister
(
tokenPasswordDialogsCID
)
;
}
)
;
equal
(
gSetPasswordShownCount
0
"
changePassword
(
)
dialog
should
have
been
shown
zero
times
"
)
;
sdr
.
changePassword
(
)
;
equal
(
gSetPasswordShownCount
1
"
changePassword
(
)
dialog
should
have
been
shown
exactly
once
"
)
;
}
}
