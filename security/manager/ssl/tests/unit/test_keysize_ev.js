"
use
strict
"
;
do_get_profile
(
)
;
const
certDB
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
const
SERVER_PORT
=
8888
;
function
getOCSPResponder
(
expectedCertNames
)
{
let
expectedPaths
=
expectedCertNames
.
slice
(
)
;
return
startOCSPResponder
(
SERVER_PORT
"
www
.
example
.
com
"
"
test_keysize_ev
/
"
expectedCertNames
expectedPaths
)
;
}
function
loadCert
(
certName
trustString
)
{
let
certFilename
=
"
test_keysize_ev
/
"
+
certName
+
"
.
pem
"
;
addCertFromFile
(
certDB
certFilename
trustString
)
;
return
constructCertFromFile
(
certFilename
)
;
}
async
function
keySizeTestForEV
(
expectedNamesForOCSP
rootCertFileName
intCertFileNames
endEntityCertFileName
expectedResult
)
{
clearOCSPCache
(
)
;
let
ocspResponder
=
getOCSPResponder
(
expectedNamesForOCSP
)
;
loadCert
(
rootCertFileName
"
CTu
CTu
CTu
"
)
;
for
(
let
intCertFileName
of
intCertFileNames
)
{
loadCert
(
intCertFileName
"
"
)
;
}
await
checkEVStatus
(
certDB
constructCertFromFile
(
test_keysize_ev
/
{
endEntityCertFileName
}
.
pem
)
certificateUsageSSLServer
expectedResult
)
;
await
stopOCSPResponder
(
ocspResponder
)
;
}
async
function
checkRSAChains
(
inadequateKeySize
adequateKeySize
)
{
let
rootOKCertFileName
=
"
.
.
/
test_ev_certs
/
evroot
"
;
let
rootOKName
=
"
evroot
"
;
let
rootNotOKName
=
"
ev_root_rsa_
"
+
inadequateKeySize
;
let
intOKName
=
"
ev_int_rsa_
"
+
adequateKeySize
;
let
intNotOKName
=
"
ev_int_rsa_
"
+
inadequateKeySize
;
let
eeOKName
=
"
ev_ee_rsa_
"
+
adequateKeySize
;
let
eeNotOKName
=
"
ev_ee_rsa_
"
+
inadequateKeySize
;
let
intFullName
=
intOKName
+
"
-
"
+
rootOKName
;
let
eeFullName
=
eeOKName
+
"
-
"
+
intOKName
+
"
-
"
+
rootOKName
;
let
expectedNamesForOCSP
=
[
eeFullName
]
;
await
keySizeTestForEV
(
expectedNamesForOCSP
rootOKCertFileName
[
intFullName
]
eeFullName
gEVExpected
)
;
intFullName
=
intOKName
+
"
-
"
+
rootNotOKName
;
eeFullName
=
eeOKName
+
"
-
"
+
intOKName
+
"
-
"
+
rootNotOKName
;
expectedNamesForOCSP
=
[
eeFullName
]
;
await
keySizeTestForEV
(
expectedNamesForOCSP
rootNotOKName
[
intFullName
]
eeFullName
false
)
;
intFullName
=
intNotOKName
+
"
-
"
+
rootOKName
;
eeFullName
=
eeOKName
+
"
-
"
+
intNotOKName
+
"
-
"
+
rootOKName
;
expectedNamesForOCSP
=
[
eeFullName
]
;
await
keySizeTestForEV
(
expectedNamesForOCSP
rootOKCertFileName
[
intFullName
]
eeFullName
false
)
;
intFullName
=
intOKName
+
"
-
"
+
rootOKName
;
eeFullName
=
eeNotOKName
+
"
-
"
+
intOKName
+
"
-
"
+
rootOKName
;
expectedNamesForOCSP
=
[
eeFullName
]
;
await
keySizeTestForEV
(
expectedNamesForOCSP
rootOKCertFileName
[
intFullName
]
eeFullName
false
)
;
}
add_task
(
async
function
(
)
{
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
www
.
example
.
com
"
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
let
smallKeyEVRoot
=
constructCertFromFile
(
"
test_keysize_ev
/
ev_root_rsa_2040
.
pem
"
)
;
equal
(
smallKeyEVRoot
.
sha256Fingerprint
"
40
:
AB
:
5D
:
A5
:
89
:
15
:
A9
:
4B
:
82
:
87
:
B8
:
A6
:
9A
:
84
:
B1
:
DB
:
"
+
"
7A
:
9D
:
DB
:
B8
:
4E
:
E1
:
23
:
E3
:
C6
:
64
:
E7
:
50
:
DC
:
35
:
8C
:
68
"
"
test
sanity
check
:
the
small
-
key
EV
root
must
have
the
same
"
+
"
fingerprint
as
the
corresponding
entry
in
ExtendedValidation
.
cpp
"
)
;
await
checkRSAChains
(
2040
2048
)
;
}
)
;
