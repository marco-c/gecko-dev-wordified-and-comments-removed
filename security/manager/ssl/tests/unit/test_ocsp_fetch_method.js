"
use
strict
"
;
do_get_profile
(
)
;
const
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
const
SERVER_PORT
=
8888
;
function
start_ocsp_responder
(
expectedCertNames
expectedPaths
expectedMethods
)
{
return
startOCSPResponder
(
SERVER_PORT
"
www
.
example
.
com
"
"
test_ocsp_fetch_method
"
expectedCertNames
expectedPaths
expectedMethods
)
;
}
function
check_cert_err
(
cert_name
expected_error
)
{
let
cert
=
constructCertFromFile
(
"
test_ocsp_fetch_method
/
"
+
cert_name
+
"
.
pem
"
)
;
return
checkCertErrorGeneric
(
certdb
cert
expected_error
certificateUsageSSLServer
)
;
}
add_task
(
async
function
(
)
{
addCertFromFile
(
certdb
"
test_ocsp_fetch_method
/
ca
.
pem
"
"
CTu
CTu
CTu
"
)
;
addCertFromFile
(
certdb
"
test_ocsp_fetch_method
/
int
.
pem
"
"
"
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
OCSP
.
require
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
dns
.
localDomains
"
"
www
.
example
.
com
"
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
OCSP
.
enabled
"
1
)
;
clearOCSPCache
(
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
OCSP
.
GET
.
enabled
"
false
)
;
let
ocspResponder
=
start_ocsp_responder
(
[
"
a
"
]
[
]
[
"
POST
"
]
)
;
await
check_cert_err
(
"
a
"
PRErrorCodeSuccess
)
;
await
stopOCSPResponder
(
ocspResponder
)
;
clearOCSPCache
(
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
OCSP
.
GET
.
enabled
"
true
)
;
ocspResponder
=
start_ocsp_responder
(
[
"
a
"
]
[
]
[
"
GET
"
]
)
;
await
check_cert_err
(
"
a
"
PRErrorCodeSuccess
)
;
await
stopOCSPResponder
(
ocspResponder
)
;
}
)
;
