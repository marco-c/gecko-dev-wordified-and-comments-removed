#
include
"
nsPKCS11Slot
.
h
"
#
include
<
string
.
h
>
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIMutableArray
.
h
"
#
include
"
nsNSSComponent
.
h
"
#
include
"
nsPK11TokenDB
.
h
"
#
include
"
nsPromiseFlatString
.
h
"
#
include
"
secmod
.
h
"
using
mozilla
:
:
LogLevel
;
extern
mozilla
:
:
LazyLogModule
gPIPNSSLog
;
NS_IMPL_ISUPPORTS
(
nsPKCS11Slot
nsIPKCS11Slot
)
nsPKCS11Slot
:
:
nsPKCS11Slot
(
PK11SlotInfo
*
slot
)
{
MOZ_ASSERT
(
slot
)
;
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
return
;
mSlot
.
reset
(
PK11_ReferenceSlot
(
slot
)
)
;
mSeries
=
PK11_GetSlotSeries
(
slot
)
;
Unused
<
<
refreshSlotInfo
(
locker
)
;
}
nsresult
nsPKCS11Slot
:
:
refreshSlotInfo
(
const
nsNSSShutDownPreventionLock
&
)
{
CK_SLOT_INFO
slotInfo
;
nsresult
rv
=
MapSECStatus
(
PK11_GetSlotInfo
(
mSlot
.
get
(
)
&
slotInfo
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
const
char
*
ccDesc
=
mozilla
:
:
BitwiseCast
<
char
*
CK_UTF8CHAR
*
>
(
slotInfo
.
slotDescription
)
;
mSlotDesc
.
Assign
(
ccDesc
strnlen
(
ccDesc
sizeof
(
slotInfo
.
slotDescription
)
)
)
;
mSlotDesc
.
Trim
(
"
"
false
true
)
;
const
char
*
ccManID
=
mozilla
:
:
BitwiseCast
<
char
*
CK_UTF8CHAR
*
>
(
slotInfo
.
manufacturerID
)
;
mSlotManufacturerID
.
Assign
(
ccManID
strnlen
(
ccManID
sizeof
(
slotInfo
.
manufacturerID
)
)
)
;
mSlotManufacturerID
.
Trim
(
"
"
false
true
)
;
mSlotHWVersion
.
Truncate
(
)
;
mSlotHWVersion
.
AppendInt
(
slotInfo
.
hardwareVersion
.
major
)
;
mSlotHWVersion
.
Append
(
'
.
'
)
;
mSlotHWVersion
.
AppendInt
(
slotInfo
.
hardwareVersion
.
minor
)
;
mSlotFWVersion
.
Truncate
(
)
;
mSlotFWVersion
.
AppendInt
(
slotInfo
.
firmwareVersion
.
major
)
;
mSlotFWVersion
.
Append
(
'
.
'
)
;
mSlotFWVersion
.
AppendInt
(
slotInfo
.
firmwareVersion
.
minor
)
;
return
NS_OK
;
}
nsPKCS11Slot
:
:
~
nsPKCS11Slot
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
;
}
destructorSafeDestroyNSSReference
(
)
;
shutdown
(
ShutdownCalledFrom
:
:
Object
)
;
}
void
nsPKCS11Slot
:
:
virtualDestroyNSSReference
(
)
{
destructorSafeDestroyNSSReference
(
)
;
}
void
nsPKCS11Slot
:
:
destructorSafeDestroyNSSReference
(
)
{
mSlot
=
nullptr
;
}
nsresult
nsPKCS11Slot
:
:
GetAttributeHelper
(
const
nsACString
&
attribute
nsACString
&
xpcomOutParam
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
PK11_GetSlotSeries
(
mSlot
.
get
(
)
)
!
=
mSeries
)
{
nsresult
rv
=
refreshSlotInfo
(
locker
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
xpcomOutParam
=
attribute
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPKCS11Slot
:
:
GetName
(
nsACString
&
name
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
return
NS_ERROR_NOT_AVAILABLE
;
char
*
csn
=
PK11_GetSlotName
(
mSlot
.
get
(
)
)
;
if
(
csn
&
&
*
csn
)
{
name
=
csn
;
}
else
if
(
PK11_HasRootCerts
(
mSlot
.
get
(
)
)
)
{
name
=
NS_LITERAL_CSTRING
(
"
Root
Certificates
"
)
;
}
else
{
name
=
NS_LITERAL_CSTRING
(
"
Unnamed
Slot
"
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPKCS11Slot
:
:
GetDesc
(
nsACString
&
desc
)
{
return
GetAttributeHelper
(
mSlotDesc
desc
)
;
}
NS_IMETHODIMP
nsPKCS11Slot
:
:
GetManID
(
nsACString
&
manufacturerID
)
{
return
GetAttributeHelper
(
mSlotManufacturerID
manufacturerID
)
;
}
NS_IMETHODIMP
nsPKCS11Slot
:
:
GetHWVersion
(
nsACString
&
hwVersion
)
{
return
GetAttributeHelper
(
mSlotHWVersion
hwVersion
)
;
}
NS_IMETHODIMP
nsPKCS11Slot
:
:
GetFWVersion
(
nsACString
&
fwVersion
)
{
return
GetAttributeHelper
(
mSlotFWVersion
fwVersion
)
;
}
NS_IMETHODIMP
nsPKCS11Slot
:
:
GetToken
(
nsIPK11Token
*
*
_retval
)
{
NS_ENSURE_ARG_POINTER
(
_retval
)
;
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
return
NS_ERROR_NOT_AVAILABLE
;
nsCOMPtr
<
nsIPK11Token
>
token
=
new
nsPK11Token
(
mSlot
.
get
(
)
)
;
token
.
forget
(
_retval
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPKCS11Slot
:
:
GetTokenName
(
nsACString
&
tokenName
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
return
NS_ERROR_NOT_AVAILABLE
;
if
(
!
PK11_IsPresent
(
mSlot
.
get
(
)
)
)
{
tokenName
.
SetIsVoid
(
true
)
;
return
NS_OK
;
}
if
(
PK11_GetSlotSeries
(
mSlot
.
get
(
)
)
!
=
mSeries
)
{
nsresult
rv
=
refreshSlotInfo
(
locker
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
tokenName
=
PK11_GetTokenName
(
mSlot
.
get
(
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPKCS11Slot
:
:
GetStatus
(
uint32_t
*
_retval
)
{
NS_ENSURE_ARG_POINTER
(
_retval
)
;
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
return
NS_ERROR_NOT_AVAILABLE
;
if
(
PK11_IsDisabled
(
mSlot
.
get
(
)
)
)
{
*
_retval
=
SLOT_DISABLED
;
}
else
if
(
!
PK11_IsPresent
(
mSlot
.
get
(
)
)
)
{
*
_retval
=
SLOT_NOT_PRESENT
;
}
else
if
(
PK11_NeedLogin
(
mSlot
.
get
(
)
)
&
&
PK11_NeedUserInit
(
mSlot
.
get
(
)
)
)
{
*
_retval
=
SLOT_UNINITIALIZED
;
}
else
if
(
PK11_NeedLogin
(
mSlot
.
get
(
)
)
&
&
!
PK11_IsLoggedIn
(
mSlot
.
get
(
)
nullptr
)
)
{
*
_retval
=
SLOT_NOT_LOGGED_IN
;
}
else
if
(
PK11_NeedLogin
(
mSlot
.
get
(
)
)
)
{
*
_retval
=
SLOT_LOGGED_IN
;
}
else
{
*
_retval
=
SLOT_READY
;
}
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
nsPKCS11Module
nsIPKCS11Module
)
nsPKCS11Module
:
:
nsPKCS11Module
(
SECMODModule
*
module
)
{
MOZ_ASSERT
(
module
)
;
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
return
;
mModule
.
reset
(
SECMOD_ReferenceModule
(
module
)
)
;
}
nsPKCS11Module
:
:
~
nsPKCS11Module
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
;
}
destructorSafeDestroyNSSReference
(
)
;
shutdown
(
ShutdownCalledFrom
:
:
Object
)
;
}
void
nsPKCS11Module
:
:
virtualDestroyNSSReference
(
)
{
destructorSafeDestroyNSSReference
(
)
;
}
void
nsPKCS11Module
:
:
destructorSafeDestroyNSSReference
(
)
{
mModule
=
nullptr
;
}
NS_IMETHODIMP
nsPKCS11Module
:
:
GetName
(
nsACString
&
name
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
return
NS_ERROR_NOT_AVAILABLE
;
name
=
mModule
-
>
commonName
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPKCS11Module
:
:
GetLibName
(
nsACString
&
libName
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
return
NS_ERROR_NOT_AVAILABLE
;
if
(
mModule
-
>
dllName
)
{
libName
=
mModule
-
>
dllName
;
}
else
{
libName
.
SetIsVoid
(
true
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPKCS11Module
:
:
FindSlotByName
(
const
nsACString
&
name
nsIPKCS11Slot
*
*
_retval
)
{
NS_ENSURE_ARG_POINTER
(
_retval
)
;
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
return
NS_ERROR_NOT_AVAILABLE
;
const
nsCString
&
flatName
=
PromiseFlatCString
(
name
)
;
MOZ_LOG
(
gPIPNSSLog
LogLevel
:
:
Debug
(
"
Getting
\
"
%
s
\
"
"
flatName
.
get
(
)
)
)
;
UniquePK11SlotInfo
slotInfo
;
UniquePK11SlotList
slotList
(
PK11_FindSlotsByNames
(
mModule
-
>
dllName
flatName
.
get
(
)
nullptr
false
)
)
;
if
(
!
slotList
)
{
slotList
.
reset
(
PK11_FindSlotsByNames
(
mModule
-
>
dllName
nullptr
flatName
.
get
(
)
false
)
)
;
}
if
(
slotList
&
&
slotList
-
>
head
&
&
slotList
-
>
head
-
>
slot
)
{
slotInfo
.
reset
(
PK11_ReferenceSlot
(
slotList
-
>
head
-
>
slot
)
)
;
}
if
(
!
slotInfo
)
{
if
(
!
flatName
.
EqualsLiteral
(
"
Root
Certificates
"
)
)
{
return
NS_ERROR_FAILURE
;
}
slotInfo
.
reset
(
PK11_ReferenceSlot
(
mModule
-
>
slots
[
0
]
)
)
;
}
nsCOMPtr
<
nsIPKCS11Slot
>
slot
=
new
nsPKCS11Slot
(
slotInfo
.
get
(
)
)
;
slot
.
forget
(
_retval
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPKCS11Module
:
:
ListSlots
(
nsISimpleEnumerator
*
*
_retval
)
{
NS_ENSURE_ARG_POINTER
(
_retval
)
;
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
rv
=
CheckForSmartCardChanges
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIMutableArray
>
array
=
do_CreateInstance
(
NS_ARRAY_CONTRACTID
)
;
if
(
!
array
)
{
return
NS_ERROR_FAILURE
;
}
AutoSECMODListReadLock
lock
;
for
(
int
i
=
0
;
i
<
mModule
-
>
slotCount
;
i
+
+
)
{
if
(
mModule
-
>
slots
[
i
]
)
{
nsCOMPtr
<
nsIPKCS11Slot
>
slot
=
new
nsPKCS11Slot
(
mModule
-
>
slots
[
i
]
)
;
rv
=
array
-
>
AppendElement
(
slot
false
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
}
return
array
-
>
Enumerate
(
_retval
)
;
}
