#
include
"
nsSecureBrowserUIImpl
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocShellTreeItem
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsISecurityEventSink
.
h
"
#
include
"
nsITransportSecurityInfo
.
h
"
#
include
"
nsIWebProgress
.
h
"
using
namespace
mozilla
;
LazyLogModule
gSecureBrowserUILog
(
"
nsSecureBrowserUI
"
)
;
nsSecureBrowserUIImpl
:
:
nsSecureBrowserUIImpl
(
)
:
mOldState
(
0
)
mState
(
0
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
NS_IMPL_ISUPPORTS
(
nsSecureBrowserUIImpl
nsISecureBrowserUI
nsIWebProgressListener
nsISupportsWeakReference
)
NS_IMETHODIMP
nsSecureBrowserUIImpl
:
:
Init
(
nsIDocShell
*
aDocShell
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_ENSURE_ARG
(
aDocShell
)
;
aDocShell
-
>
SetSecurityUI
(
this
)
;
nsresult
rv
;
mDocShell
=
do_GetWeakReference
(
aDocShell
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIWebProgress
>
wp
(
do_GetInterface
(
aDocShell
)
)
;
if
(
!
wp
)
{
return
NS_ERROR_FAILURE
;
}
mWebProgress
=
do_GetWeakReference
(
wp
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
wp
-
>
AddProgressListener
(
this
nsIWebProgress
:
:
NOTIFY_LOCATION
)
;
}
NS_IMETHODIMP
nsSecureBrowserUIImpl
:
:
GetState
(
uint32_t
*
aState
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_ENSURE_ARG
(
aState
)
;
MOZ_LOG
(
gSecureBrowserUILog
LogLevel
:
:
Debug
(
"
GetState
%
p
"
this
)
)
;
CheckForBlockedContent
(
)
;
MOZ_LOG
(
gSecureBrowserUILog
LogLevel
:
:
Debug
(
"
mState
:
%
x
"
mState
)
)
;
*
aState
=
mState
;
return
NS_OK
;
}
NS_IMETHODIMP
nsSecureBrowserUIImpl
:
:
GetSecInfo
(
nsITransportSecurityInfo
*
*
result
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_ENSURE_ARG_POINTER
(
result
)
;
*
result
=
mTopLevelSecurityInfo
;
NS_IF_ADDREF
(
*
result
)
;
return
NS_OK
;
}
void
nsSecureBrowserUIImpl
:
:
CheckForBlockedContent
(
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_QueryReferent
(
mDocShell
)
;
if
(
!
docShell
)
{
return
;
}
if
(
docShell
-
>
ItemType
(
)
=
=
nsIDocShellTreeItem
:
:
typeContent
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
docShellTreeItem
(
do_QueryInterface
(
docShell
)
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
sameTypeRoot
;
Unused
<
<
docShellTreeItem
-
>
GetSameTypeRootTreeItem
(
getter_AddRefs
(
sameTypeRoot
)
)
;
MOZ_ASSERT
(
sameTypeRoot
"
No
document
shell
root
tree
item
from
document
shell
tree
item
!
"
)
;
docShell
=
do_QueryInterface
(
sameTypeRoot
)
;
if
(
!
docShell
)
{
return
;
}
}
mOldState
=
mState
;
if
(
mState
&
STATE_IS_SECURE
)
{
if
(
docShell
-
>
GetHasMixedActiveContentLoaded
(
)
)
{
mState
|
=
STATE_IS_BROKEN
|
STATE_LOADED_MIXED_ACTIVE_CONTENT
;
mState
&
=
~
STATE_IS_SECURE
;
mState
&
=
~
STATE_SECURE_HIGH
;
}
if
(
docShell
-
>
GetHasMixedDisplayContentLoaded
(
)
)
{
mState
|
=
STATE_IS_BROKEN
|
STATE_LOADED_MIXED_DISPLAY_CONTENT
;
mState
&
=
~
STATE_IS_SECURE
;
mState
&
=
~
STATE_SECURE_HIGH
;
}
if
(
docShell
-
>
GetHasMixedActiveContentBlocked
(
)
)
{
mState
|
=
STATE_BLOCKED_MIXED_ACTIVE_CONTENT
;
}
if
(
docShell
-
>
GetHasMixedDisplayContentBlocked
(
)
)
{
mState
|
=
STATE_BLOCKED_MIXED_DISPLAY_CONTENT
;
}
}
if
(
docShell
-
>
GetHasTrackingContentBlocked
(
)
)
{
mState
|
=
STATE_BLOCKED_TRACKING_CONTENT
;
}
if
(
docShell
-
>
GetHasSlowTrackingContentBlocked
(
)
)
{
mState
|
=
STATE_BLOCKED_SLOW_TRACKING_CONTENT
;
}
if
(
docShell
-
>
GetHasTrackingContentLoaded
(
)
)
{
mState
|
=
STATE_LOADED_TRACKING_CONTENT
;
}
if
(
docShell
-
>
GetHasCookiesBlockedByPermission
(
)
)
{
mState
|
=
STATE_COOKIES_BLOCKED_BY_PERMISSION
;
}
if
(
docShell
-
>
GetHasCookiesBlockedDueToTrackers
(
)
)
{
mState
|
=
STATE_COOKIES_BLOCKED_TRACKER
;
}
if
(
docShell
-
>
GetHasForeignCookiesBeenBlocked
(
)
)
{
mState
|
=
STATE_COOKIES_BLOCKED_FOREIGN
;
}
if
(
docShell
-
>
GetHasAllCookiesBeenBlocked
(
)
)
{
mState
|
=
STATE_COOKIES_BLOCKED_ALL
;
}
}
static
void
GetSecurityInfoFromChannel
(
nsIChannel
*
channel
nsITransportSecurityInfo
*
*
securityInfoOut
)
{
MOZ_ASSERT
(
channel
)
;
MOZ_ASSERT
(
securityInfoOut
)
;
NS_ENSURE_TRUE_VOID
(
channel
)
;
NS_ENSURE_TRUE_VOID
(
securityInfoOut
)
;
*
securityInfoOut
=
nullptr
;
nsCOMPtr
<
nsISupports
>
securityInfoSupports
;
nsresult
rv
=
channel
-
>
GetSecurityInfo
(
getter_AddRefs
(
securityInfoSupports
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
nsCOMPtr
<
nsITransportSecurityInfo
>
securityInfo
(
do_QueryInterface
(
securityInfoSupports
)
)
;
securityInfo
.
forget
(
securityInfoOut
)
;
}
nsresult
nsSecureBrowserUIImpl
:
:
UpdateStateAndSecurityInfo
(
nsIChannel
*
channel
nsIURI
*
uri
)
{
MOZ_ASSERT
(
channel
)
;
MOZ_ASSERT
(
uri
)
;
NS_ENSURE_ARG
(
channel
)
;
NS_ENSURE_ARG
(
uri
)
;
mState
=
STATE_IS_INSECURE
;
mTopLevelSecurityInfo
=
nullptr
;
nsCOMPtr
<
nsITransportSecurityInfo
>
securityInfo
;
GetSecurityInfoFromChannel
(
channel
getter_AddRefs
(
securityInfo
)
)
;
if
(
securityInfo
)
{
MOZ_LOG
(
gSecureBrowserUILog
LogLevel
:
:
Debug
(
"
we
have
a
security
info
%
p
"
securityInfo
.
get
(
)
)
)
;
nsresult
rv
=
securityInfo
-
>
GetSecurityState
(
&
mState
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
mState
=
=
STATE_IS_INSECURE
)
{
return
NS_OK
;
}
mTopLevelSecurityInfo
=
securityInfo
;
MOZ_LOG
(
gSecureBrowserUILog
LogLevel
:
:
Debug
(
"
set
mTopLevelSecurityInfo
"
)
)
;
bool
isEV
;
rv
=
mTopLevelSecurityInfo
-
>
GetIsExtendedValidation
(
&
isEV
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
isEV
)
{
MOZ_LOG
(
gSecureBrowserUILog
LogLevel
:
:
Debug
(
"
is
EV
"
)
)
;
mState
|
=
STATE_IDENTITY_EV_TOPLEVEL
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
nsSecureBrowserUIImpl
:
:
OnLocationChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
nsIURI
*
aLocation
uint32_t
aFlags
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_ENSURE_ARG
(
aWebProgress
)
;
NS_ENSURE_ARG
(
aLocation
)
;
MOZ_LOG
(
gSecureBrowserUILog
LogLevel
:
:
Debug
(
"
%
p
OnLocationChange
:
%
p
%
p
%
s
%
x
"
this
aWebProgress
aRequest
aLocation
-
>
GetSpecOrDefault
(
)
.
get
(
)
aFlags
)
)
;
nsCOMPtr
<
nsIWebProgress
>
originalWebProgress
=
do_QueryReferent
(
mWebProgress
)
;
if
(
aWebProgress
!
=
originalWebProgress
)
{
return
NS_OK
;
}
if
(
!
(
aFlags
&
LOCATION_CHANGE_SAME_DOCUMENT
)
)
{
mOldState
=
0
;
mState
=
0
;
mTopLevelSecurityInfo
=
nullptr
;
}
nsCOMPtr
<
nsIChannel
>
channel
(
do_QueryInterface
(
aRequest
)
)
;
if
(
channel
)
{
MOZ_LOG
(
gSecureBrowserUILog
LogLevel
:
:
Debug
(
"
we
have
a
channel
%
p
"
channel
.
get
(
)
)
)
;
nsresult
rv
=
UpdateStateAndSecurityInfo
(
channel
aLocation
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
nsCOMPtr
<
nsISecurityEventSink
>
eventSink
;
NS_QueryNotificationCallbacks
(
channel
eventSink
)
;
if
(
NS_WARN_IF
(
!
eventSink
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
ContentBlockingLog
*
contentBlockingLog
=
nullptr
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_QueryReferent
(
mDocShell
)
;
if
(
docShell
)
{
nsIDocument
*
doc
=
docShell
-
>
GetDocument
(
)
;
if
(
doc
)
{
contentBlockingLog
=
doc
-
>
GetContentBlockingLog
(
)
;
}
}
MOZ_LOG
(
gSecureBrowserUILog
LogLevel
:
:
Debug
(
"
calling
OnSecurityChange
%
p
%
x
\
n
"
aRequest
mState
)
)
;
Unused
<
<
eventSink
-
>
OnSecurityChange
(
aRequest
mOldState
mState
contentBlockingLog
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsSecureBrowserUIImpl
:
:
OnStateChange
(
nsIWebProgress
*
nsIRequest
*
uint32_t
nsresult
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
have
been
excluded
in
AddProgressListener
(
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsSecureBrowserUIImpl
:
:
OnProgressChange
(
nsIWebProgress
*
nsIRequest
*
int32_t
int32_t
int32_t
int32_t
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
have
been
excluded
in
AddProgressListener
(
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsSecureBrowserUIImpl
:
:
OnStatusChange
(
nsIWebProgress
*
nsIRequest
*
nsresult
const
char16_t
*
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
have
been
excluded
in
AddProgressListener
(
)
"
)
;
return
NS_OK
;
}
nsresult
nsSecureBrowserUIImpl
:
:
OnSecurityChange
(
nsIWebProgress
*
nsIRequest
*
uint32_t
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
have
been
excluded
in
AddProgressListener
(
)
"
)
;
return
NS_OK
;
}
