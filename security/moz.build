with
Files
(
"
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
Security
:
PSM
"
)
with
Files
(
"
generate
*
.
py
"
)
:
BUG_COMPONENT
=
(
"
Firefox
Build
System
"
"
General
"
)
with
Files
(
"
nss
/
*
*
"
)
:
BUG_COMPONENT
=
(
"
NSS
"
"
Libraries
"
)
with
Files
(
"
nss
.
symbols
"
)
:
BUG_COMPONENT
=
(
"
NSS
"
"
Libraries
"
)
if
CONFIG
[
"
MOZ_SYSTEM_NSS
"
]
:
Library
(
"
nss
"
)
OS_LIBS
+
=
CONFIG
[
"
NSS_LIBS
"
]
include
(
"
/
build
/
gyp_base
.
mozbuild
"
)
if
CONFIG
[
"
MOZ_FOLD_LIBS
"
]
:
GeckoSharedLibrary
(
"
nss
"
linkage
=
None
)
SHARED_LIBRARY_NAME
=
"
nss3
"
USE_LIBS
+
=
[
"
nspr4
"
"
nss3_static
"
"
nssutil
"
"
plc4
"
"
plds4
"
"
smime3_static
"
"
ssl
"
]
OS_LIBS
+
=
CONFIG
[
"
REALTIME_LIBS
"
]
SYMBOLS_FILE
=
"
nss
.
symbols
"
gyp_vars
[
"
moz_fold_libs
"
]
=
1
gyp_vars
[
"
moz_folded_library_name
"
]
=
"
nss
"
gyp_vars
[
"
nspr_libs
"
]
=
"
nss
"
elif
not
CONFIG
[
"
MOZ_SYSTEM_NSS
"
]
:
Library
(
"
nss
"
)
USE_LIBS
+
=
[
"
nss3
"
"
nssutil3
"
"
smime3
"
"
sqlite
"
"
ssl3
"
]
gyp_vars
[
"
nspr_libs
"
]
=
"
nspr
"
else
:
gyp_vars
[
"
nspr_libs
"
]
=
"
nspr
"
gyp_vars
[
"
mozpkix_only
"
]
=
1
gyp_vars
[
"
mozilla_client
"
]
=
1
if
CONFIG
[
"
MOZ_BUILD_APP
"
]
.
startswith
(
"
comm
/
"
)
:
gyp_vars
[
"
comm_client
"
]
=
1
gyp_vars
[
"
sign_libs
"
]
=
0
gyp_vars
[
"
python
"
]
=
CONFIG
[
"
PYTHON3
"
]
gyp_vars
[
"
nss_dist_dir
"
]
=
"
PRODUCT_DIR
/
dist
"
gyp_vars
[
"
nss_public_dist_dir
"
]
=
"
PRODUCT_DIR
/
dist
"
gyp_vars
[
"
nss_dist_obj_dir
"
]
=
"
PRODUCT_DIR
/
dist
/
bin
"
gyp_vars
[
"
disable_tests
"
]
=
1
gyp_vars
[
"
disable_dbm
"
]
=
1
gyp_vars
[
"
disable_libpkix
"
]
=
1
gyp_vars
[
"
enable_sslkeylogfile
"
]
=
1
gyp_vars
[
"
disable_ckbi
"
]
=
1
gyp_vars
[
"
zlib_libs
"
]
=
"
-
lz
"
gyp_vars
[
"
ssl_enable_zlib
"
]
=
0
gyp_vars
[
"
use_system_sqlite
"
]
=
1
gyp_vars
[
"
sqlite_libs
"
]
=
"
sqlite
"
gyp_vars
[
"
enable_draft_hpke
"
]
=
1
gyp_vars
[
"
iphone_deployment_target
"
]
=
"
doesntmatter
"
if
(
CONFIG
[
"
TARGET_CPU
"
]
=
=
"
x86_64
"
and
CONFIG
[
"
CC_TYPE
"
]
=
=
"
clang
"
and
int
(
CONFIG
[
"
CC_VERSION
"
]
.
split
(
"
.
"
)
[
0
]
)
>
=
9
)
:
gyp_vars
[
"
force_integrated_as
"
]
=
1
if
CONFIG
[
"
MOZ_SYSTEM_NSPR
"
]
:
gyp_vars
[
"
nspr_include_dir
"
]
=
"
%
"
+
CONFIG
[
"
NSPR_INCLUDE_DIR
"
]
gyp_vars
[
"
nspr_lib_dir
"
]
=
"
%
"
+
CONFIG
[
"
NSPR_LIB_DIR
"
]
else
:
gyp_vars
[
"
nspr_include_dir
"
]
=
"
!
/
dist
/
include
/
nspr
"
gyp_vars
[
"
nspr_lib_dir
"
]
=
"
"
if
CONFIG
[
"
CC_TYPE
"
]
in
(
"
clang
"
"
clang
-
cl
"
)
:
gyp_vars
[
"
cc_is_clang
"
]
=
1
if
CONFIG
[
"
GCC_USE_GNU_LD
"
]
:
gyp_vars
[
"
cc_use_gnu_ld
"
]
=
1
GYP_DIRS
+
=
[
"
nss
"
]
GYP_DIRS
[
"
nss
"
]
.
input
=
"
nss
/
nss
.
gyp
"
GYP_DIRS
[
"
nss
"
]
.
variables
=
gyp_vars
sandbox_vars
=
{
"
COMPILE_FLAGS
"
:
{
"
VISIBILITY
"
:
[
]
"
WARNINGS_CFLAGS
"
:
[
f
for
f
in
CONFIG
[
"
WARNINGS_CFLAGS
"
]
if
f
!
=
"
-
Wsign
-
compare
"
]
}
"
NO_PGO
"
:
True
}
if
CONFIG
[
"
OS_TARGET
"
]
=
=
"
WINNT
"
:
sandbox_vars
[
"
CFLAGS
"
]
=
[
"
-
DXP_WIN32
"
"
-
Wno
-
error
=
unused
-
function
"
]
if
CONFIG
[
"
TARGET_CPU
"
]
=
=
"
x86
"
:
sandbox_vars
[
"
ASFLAGS
"
]
=
[
"
-
safeseh
"
]
DELAYLOAD_DLLS
+
=
[
"
winmm
.
dll
"
]
if
CONFIG
[
"
OS_TARGET
"
]
=
=
"
Android
"
:
sandbox_vars
[
"
CFLAGS
"
]
=
[
"
-
include
"
TOPSRCDIR
+
"
/
security
/
manager
/
android_stub
.
h
"
]
if
CONFIG
[
"
ANDROID_VERSION
"
]
:
sandbox_vars
[
"
CFLAGS
"
]
+
=
[
"
-
DANDROID_VERSION
=
"
+
CONFIG
[
"
ANDROID_VERSION
"
]
]
if
CONFIG
[
"
MOZ_SYSTEM_NSS
"
]
:
sandbox_vars
[
"
CXXFLAGS
"
]
=
CONFIG
[
"
NSS_CFLAGS
"
]
GYP_DIRS
[
"
nss
"
]
.
sandbox_vars
=
sandbox_vars
GYP_DIRS
[
"
nss
"
]
.
no_chromium
=
True
GYP_DIRS
[
"
nss
"
]
.
no_unified
=
True
GYP_DIRS
[
"
nss
"
]
.
action_overrides
=
{
"
generate_mapfile
"
:
"
generate_mapfile
.
py
"
}
if
CONFIG
[
"
NSS_EXTRA_SYMBOLS_FILE
"
]
:
DEFINES
[
"
NSS_EXTRA_SYMBOLS_FILE
"
]
=
CONFIG
[
"
NSS_EXTRA_SYMBOLS_FILE
"
]
SPHINX_TREES
[
"
nss
"
]
=
"
nss
/
doc
/
rst
"
with
Files
(
"
nss
/
doc
/
rst
/
*
*
"
)
:
SCHEDULES
.
exclusive
=
[
"
nss
"
]
