#
ifndef
mozilla_Sandbox_h
#
define
mozilla_Sandbox_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
<
vector
>
#
include
"
mozilla
/
ipc
/
UtilityProcessSandboxing
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
FileDescriptor
;
}
MOZ_EXPORT
void
SandboxEarlyInit
(
Maybe
<
mozilla
:
:
UniqueFileHandle
>
&
&
aSandboxReporter
Maybe
<
mozilla
:
:
UniqueFileHandle
>
&
&
aChrootClient
)
;
struct
ContentProcessSandboxParams
{
int
mLevel
=
0
;
int
mBrokerFd
=
-
1
;
bool
mFileProcess
=
false
;
std
:
:
vector
<
int
>
mSyscallWhitelist
;
static
ContentProcessSandboxParams
ForThisProcess
(
const
Maybe
<
ipc
:
:
FileDescriptor
>
&
aBroker
)
;
}
;
struct
SocketProcessSandboxParams
{
int
mLevel
=
0
;
mozilla
:
:
UniqueFileHandle
mBroker
;
static
SocketProcessSandboxParams
ForThisProcess
(
const
Maybe
<
ipc
:
:
FileDescriptor
>
&
aBroker
)
;
}
;
MOZ_EXPORT
bool
SetContentProcessSandbox
(
ContentProcessSandboxParams
&
&
aParams
)
;
MOZ_EXPORT
void
SetMediaPluginSandbox
(
const
char
*
aFilePath
)
;
MOZ_EXPORT
void
SetRemoteDataDecoderSandbox
(
int
aBroker
)
;
MOZ_EXPORT
void
SetSocketProcessSandbox
(
SocketProcessSandboxParams
&
&
aParams
)
;
MOZ_EXPORT
void
SetUtilitySandbox
(
int
aBroker
ipc
:
:
SandboxingKind
aKind
)
;
MOZ_EXPORT
bool
SetSandboxCrashOnError
(
bool
aValue
)
;
MOZ_EXPORT
void
CreateSandboxProfiler
(
)
;
MOZ_EXPORT
void
DestroySandboxProfiler
(
)
;
}
#
endif
