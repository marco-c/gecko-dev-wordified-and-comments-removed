#
ifndef
SANDBOX_PROFILER_STARTUP_H
#
define
SANDBOX_PROFILER_STARTUP_H
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
{
class
ProfilerStartupObserverForSandboxProfiler
final
:
public
nsIObserver
{
~
ProfilerStartupObserverForSandboxProfiler
(
)
=
default
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
}
;
NS_IMPL_ISUPPORTS
(
ProfilerStartupObserverForSandboxProfiler
nsIObserver
)
NS_IMETHODIMP
ProfilerStartupObserverForSandboxProfiler
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
strcmp
(
aTopic
"
profiler
-
started
"
)
=
=
0
)
{
mozilla
:
:
CreateSandboxProfiler
(
)
;
return
NS_OK
;
}
if
(
strcmp
(
aTopic
"
profiler
-
stopped
"
)
=
=
0
)
{
mozilla
:
:
DestroySandboxProfiler
(
)
;
return
NS_OK
;
}
return
NS_OK
;
}
}
inline
void
RegisterProfilerObserversForSandboxProfiler
(
)
{
nsCOMPtr
<
nsIObserverService
>
obsServ
(
mozilla
:
:
services
:
:
GetObserverService
(
)
)
;
MOZ_ASSERT
(
!
!
obsServ
)
;
if
(
!
obsServ
)
{
return
;
}
nsCOMPtr
<
nsIObserver
>
obs
(
new
ProfilerStartupObserverForSandboxProfiler
(
)
)
;
obsServ
-
>
AddObserver
(
obs
"
profiler
-
started
"
false
)
;
obsServ
-
>
AddObserver
(
obs
"
profiler
-
stopped
"
false
)
;
}
#
endif
