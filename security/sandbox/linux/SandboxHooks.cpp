#
include
<
dlfcn
.
h
>
#
include
<
signal
.
h
>
#
include
<
errno
.
h
>
#
include
"
mozilla
/
Types
.
h
"
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
extern
int
gSeccompTsyncBroadcastSignum
;
static
int
HandleSigset
(
int
(
*
aRealFunc
)
(
int
const
sigset_t
*
sigset_t
*
)
int
aHow
const
sigset_t
*
aSet
sigset_t
*
aOldSet
bool
aUseErrno
)
{
if
(
!
aRealFunc
)
{
if
(
aUseErrno
)
{
errno
=
ENOSYS
;
return
-
1
;
}
return
ENOSYS
;
}
if
(
aSet
=
=
nullptr
|
|
aHow
=
=
SIG_UNBLOCK
)
{
return
aRealFunc
(
aHow
aSet
aOldSet
)
;
}
sigset_t
newSet
=
*
aSet
;
if
(
sigdelset
(
&
newSet
SIGSYS
)
!
=
0
|
|
(
gSeccompTsyncBroadcastSignum
&
&
sigdelset
(
&
newSet
gSeccompTsyncBroadcastSignum
)
!
=
0
)
)
{
if
(
aUseErrno
)
{
errno
=
ENOSYS
;
return
-
1
;
}
return
ENOSYS
;
}
return
aRealFunc
(
aHow
&
newSet
aOldSet
)
;
}
extern
"
C
"
MOZ_EXPORT
int
sigprocmask
(
int
how
const
sigset_t
*
set
sigset_t
*
oldset
)
{
static
auto
sRealFunc
=
(
int
(
*
)
(
int
const
sigset_t
*
sigset_t
*
)
)
dlsym
(
RTLD_NEXT
"
sigprocmask
"
)
;
return
HandleSigset
(
sRealFunc
how
set
oldset
true
)
;
}
extern
"
C
"
MOZ_EXPORT
int
pthread_sigmask
(
int
how
const
sigset_t
*
set
sigset_t
*
oldset
)
{
static
auto
sRealFunc
=
(
int
(
*
)
(
int
const
sigset_t
*
sigset_t
*
)
)
dlsym
(
RTLD_NEXT
"
pthread_sigmask
"
)
;
return
HandleSigset
(
sRealFunc
how
set
oldset
false
)
;
}
