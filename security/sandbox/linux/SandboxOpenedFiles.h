#
ifndef
mozilla_SandboxOpenedFiles_h
#
define
mozilla_SandboxOpenedFiles_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
vector
>
#
include
<
string
>
namespace
mozilla
{
class
SandboxOpenedFile
final
{
public
:
explicit
SandboxOpenedFile
(
const
char
*
aPath
bool
aDup
=
false
)
;
int
GetDesc
(
)
const
;
const
char
*
Path
(
)
const
{
return
mPath
.
c_str
(
)
;
}
bool
IsOpen
(
)
const
{
return
mMaybeFd
>
=
0
;
}
~
SandboxOpenedFile
(
)
;
MOZ_IMPLICIT
SandboxOpenedFile
(
SandboxOpenedFile
&
&
aMoved
)
;
private
:
std
:
:
string
mPath
;
mutable
Atomic
<
int
>
mMaybeFd
;
bool
mDup
;
bool
mExpectError
;
int
TakeDesc
(
)
const
{
return
mMaybeFd
.
exchange
(
-
1
)
;
}
}
;
class
SandboxOpenedFiles
{
public
:
SandboxOpenedFiles
(
)
=
default
;
template
<
typename
.
.
.
Args
>
void
Add
(
Args
&
&
.
.
.
aArgs
)
{
mFiles
.
emplace_back
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
}
int
GetDesc
(
const
char
*
aPath
)
const
;
private
:
std
:
:
vector
<
SandboxOpenedFile
>
mFiles
;
~
SandboxOpenedFiles
(
)
=
delete
;
}
;
}
#
endif
