#
include
"
Sandbox
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
namespace
mozilla
{
ContentProcessSandboxParams
ContentProcessSandboxParams
:
:
ForThisProcess
(
const
Maybe
<
ipc
:
:
FileDescriptor
>
&
aBroker
)
{
ContentProcessSandboxParams
params
;
params
.
mLevel
=
GetEffectiveContentSandboxLevel
(
)
;
if
(
aBroker
.
isSome
(
)
)
{
auto
fd
=
aBroker
.
value
(
)
.
ClonePlatformHandle
(
)
;
params
.
mBrokerFd
=
fd
.
release
(
)
;
MOZ_RELEASE_ASSERT
(
params
.
mBrokerFd
>
=
0
)
;
}
auto
*
cc
=
dom
:
:
ContentChild
:
:
GetSingleton
(
)
;
params
.
mFileProcess
=
cc
-
>
GetRemoteType
(
)
=
=
FILE_REMOTE_TYPE
;
nsAutoCString
extraSyscalls
;
nsresult
rv
=
Preferences
:
:
GetCString
(
"
security
.
sandbox
.
content
.
syscall_whitelist
"
extraSyscalls
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
for
(
const
nsACString
&
callNrString
:
extraSyscalls
.
Split
(
'
'
)
)
{
int
callNr
=
PromiseFlatCString
(
callNrString
)
.
ToInteger
(
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
params
.
mSyscallWhitelist
.
push_back
(
callNr
)
;
}
}
}
return
params
;
}
SocketProcessSandboxParams
SocketProcessSandboxParams
:
:
ForThisProcess
(
const
Maybe
<
ipc
:
:
FileDescriptor
>
&
aBroker
)
{
SocketProcessSandboxParams
self
;
if
(
aBroker
.
isSome
(
)
)
{
self
.
mBroker
=
aBroker
-
>
ClonePlatformHandle
(
)
;
MOZ_RELEASE_ASSERT
(
self
.
mBroker
)
;
}
self
.
mLevel
=
GetEffectiveSocketProcessSandboxLevel
(
)
;
return
self
;
}
}
