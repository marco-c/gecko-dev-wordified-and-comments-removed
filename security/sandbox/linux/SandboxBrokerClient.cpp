#
include
"
SandboxBrokerClient
.
h
"
#
include
"
SandboxInfo
.
h
"
#
include
"
SandboxLogging
.
h
"
#
include
<
errno
.
h
>
#
include
<
fcntl
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
<
sys
/
socket
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
unistd
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
NullPtr
.
h
"
#
include
"
base
/
strings
/
safe_sprintf
.
h
"
namespace
mozilla
{
SandboxBrokerClient
:
:
SandboxBrokerClient
(
int
aFd
)
:
mFileDesc
(
aFd
)
{
}
SandboxBrokerClient
:
:
~
SandboxBrokerClient
(
)
{
close
(
mFileDesc
)
;
}
int
SandboxBrokerClient
:
:
DoCall
(
const
Request
*
aReq
const
char
*
aPath
void
*
aResponseBuff
bool
expectFd
)
{
static
const
char
kProcSelf
[
]
=
"
/
proc
/
self
/
"
;
static
const
size_t
kProcSelfLen
=
sizeof
(
kProcSelf
)
-
1
;
const
char
*
path
=
aPath
;
char
rewrittenPath
[
64
]
;
if
(
strncmp
(
aPath
kProcSelf
kProcSelfLen
)
=
=
0
)
{
ssize_t
len
=
base
:
:
strings
:
:
SafeSPrintf
(
rewrittenPath
"
/
proc
/
%
d
/
%
s
"
getpid
(
)
aPath
+
kProcSelfLen
)
;
if
(
static_cast
<
size_t
>
(
len
)
<
sizeof
(
rewrittenPath
)
)
{
if
(
SandboxInfo
:
:
Get
(
)
.
Test
(
SandboxInfo
:
:
kVerbose
)
)
{
SANDBOX_LOG_ERROR
(
"
rewriting
%
s
-
>
%
s
"
aPath
rewrittenPath
)
;
}
path
=
rewrittenPath
;
}
else
{
SANDBOX_LOG_ERROR
(
"
not
rewriting
unexpectedly
long
path
%
s
"
aPath
)
;
}
}
struct
iovec
ios
[
2
]
;
int
respFds
[
2
]
;
ios
[
0
]
.
iov_base
=
const_cast
<
Request
*
>
(
aReq
)
;
ios
[
0
]
.
iov_len
=
sizeof
(
*
aReq
)
;
ios
[
1
]
.
iov_base
=
const_cast
<
char
*
>
(
path
)
;
ios
[
1
]
.
iov_len
=
strlen
(
path
)
;
if
(
ios
[
1
]
.
iov_len
>
kMaxPathLen
)
{
return
-
ENAMETOOLONG
;
}
if
(
socketpair
(
AF_UNIX
SOCK_SEQPACKET
0
respFds
)
<
0
)
{
return
-
errno
;
}
const
ssize_t
sent
=
SendWithFd
(
mFileDesc
ios
2
respFds
[
1
]
)
;
const
int
sendErrno
=
errno
;
MOZ_ASSERT
(
sent
<
0
|
|
static_cast
<
size_t
>
(
sent
)
=
=
ios
[
0
]
.
iov_len
+
ios
[
1
]
.
iov_len
)
;
close
(
respFds
[
1
]
)
;
if
(
sent
<
0
)
{
close
(
respFds
[
0
]
)
;
return
-
sendErrno
;
}
Response
resp
;
ios
[
0
]
.
iov_base
=
&
resp
;
ios
[
0
]
.
iov_len
=
sizeof
(
resp
)
;
if
(
aResponseBuff
)
{
ios
[
1
]
.
iov_base
=
aResponseBuff
;
ios
[
1
]
.
iov_len
=
aReq
-
>
mBufSize
;
}
else
{
ios
[
1
]
.
iov_base
=
nullptr
;
ios
[
1
]
.
iov_len
=
0
;
}
int
openedFd
=
-
1
;
const
ssize_t
recvd
=
RecvWithFd
(
respFds
[
0
]
ios
aResponseBuff
?
2
:
1
expectFd
?
&
openedFd
:
nullptr
)
;
const
int
recvErrno
=
errno
;
close
(
respFds
[
0
]
)
;
if
(
recvd
<
0
)
{
return
-
recvErrno
;
}
if
(
recvd
=
=
0
)
{
SANDBOX_LOG_ERROR
(
"
Unexpected
EOF
op
%
d
flags
0
%
o
path
%
s
"
aReq
-
>
mOp
aReq
-
>
mFlags
path
)
;
return
-
EIO
;
}
MOZ_ASSERT
(
static_cast
<
size_t
>
(
recvd
)
<
=
ios
[
0
]
.
iov_len
+
ios
[
1
]
.
iov_len
)
;
if
(
resp
.
mError
>
=
0
)
{
if
(
expectFd
)
{
MOZ_ASSERT
(
openedFd
>
=
0
)
;
return
openedFd
;
}
return
resp
.
mError
;
}
if
(
SandboxInfo
:
:
Get
(
)
.
Test
(
SandboxInfo
:
:
kVerbose
)
)
{
SANDBOX_LOG_ERROR
(
"
Failed
errno
%
d
op
%
d
flags
0
%
o
path
%
s
"
resp
.
mError
aReq
-
>
mOp
aReq
-
>
mFlags
path
)
;
}
if
(
openedFd
>
=
0
)
{
close
(
openedFd
)
;
}
return
resp
.
mError
;
}
int
SandboxBrokerClient
:
:
Open
(
const
char
*
aPath
int
aFlags
)
{
Request
req
=
{
SANDBOX_FILE_OPEN
aFlags
0
}
;
int
maybeFd
=
DoCall
(
&
req
aPath
nullptr
true
)
;
if
(
maybeFd
>
=
0
)
{
if
(
(
aFlags
&
O_CLOEXEC
)
=
=
0
)
{
fcntl
(
maybeFd
F_SETFD
0
)
;
}
}
return
maybeFd
;
}
int
SandboxBrokerClient
:
:
Access
(
const
char
*
aPath
int
aMode
)
{
Request
req
=
{
SANDBOX_FILE_ACCESS
aMode
0
}
;
return
DoCall
(
&
req
aPath
nullptr
false
)
;
}
int
SandboxBrokerClient
:
:
Stat
(
const
char
*
aPath
statstruct
*
aStat
)
{
Request
req
=
{
SANDBOX_FILE_STAT
0
sizeof
(
statstruct
)
}
;
return
DoCall
(
&
req
aPath
(
void
*
)
aStat
false
)
;
}
int
SandboxBrokerClient
:
:
LStat
(
const
char
*
aPath
statstruct
*
aStat
)
{
Request
req
=
{
SANDBOX_FILE_STAT
O_NOFOLLOW
sizeof
(
statstruct
)
}
;
return
DoCall
(
&
req
aPath
(
void
*
)
aStat
false
)
;
}
int
SandboxBrokerClient
:
:
Chmod
(
const
char
*
aPath
int
aMode
)
{
Request
req
=
{
SANDBOX_FILE_CHMOD
aMode
0
}
;
return
DoCall
(
&
req
aPath
nullptr
false
)
;
}
int
SandboxBrokerClient
:
:
Mkdir
(
const
char
*
aPath
int
aMode
)
{
Request
req
=
{
SANDBOX_FILE_MKDIR
aMode
0
}
;
return
DoCall
(
&
req
aPath
nullptr
false
)
;
}
int
SandboxBrokerClient
:
:
Unlink
(
const
char
*
aPath
)
{
Request
req
=
{
SANDBOX_FILE_UNLINK
0
0
}
;
return
DoCall
(
&
req
aPath
nullptr
false
)
;
}
int
SandboxBrokerClient
:
:
Rmdir
(
const
char
*
aPath
)
{
Request
req
=
{
SANDBOX_FILE_RMDIR
0
0
}
;
return
DoCall
(
&
req
aPath
nullptr
false
)
;
}
int
SandboxBrokerClient
:
:
Readlink
(
const
char
*
aPath
void
*
aBuff
size_t
aSize
)
{
Request
req
=
{
SANDBOX_FILE_READLINK
0
aSize
}
;
return
DoCall
(
&
req
aPath
aBuff
false
)
;
}
}
