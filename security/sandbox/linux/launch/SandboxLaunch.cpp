#
include
"
SandboxLaunch
.
h
"
#
include
<
fcntl
.
h
>
#
include
<
sched
.
h
>
#
include
<
setjmp
.
h
>
#
include
<
signal
.
h
>
#
include
<
sys
/
prctl
.
h
>
#
include
<
sys
/
socket
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
include
<
unistd
.
h
>
#
include
<
utility
>
#
include
"
LinuxCapabilities
.
h
"
#
include
"
LinuxSched
.
h
"
#
include
"
SandboxChrootProto
.
h
"
#
include
"
SandboxInfo
.
h
"
#
include
"
SandboxLogging
.
h
"
#
include
"
base
/
eintr_wrapper
.
h
"
#
include
"
base
/
strings
/
safe_sprintf
.
h
"
#
include
"
mozilla
/
Array
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
SandboxReporter
.
h
"
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
mozilla
/
StaticPrefs_security
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessSandboxing
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsIGfxInfo
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
prenv
.
h
"
#
include
"
sandbox
/
linux
/
system_headers
/
linux_syscalls
.
h
"
#
include
"
sandbox
/
linux
/
services
/
syscall_wrappers
.
h
"
#
include
"
mozilla
/
pthread_atfork
.
h
"
#
ifdef
MOZ_X11
#
ifndef
MOZ_WIDGET_GTK
#
error
"
Unknown
toolkit
"
#
endif
#
include
"
mozilla
/
WidgetUtilsGtk
.
h
"
#
include
<
gdk
/
gdk
.
h
>
#
include
<
gdk
/
gdkx
.
h
>
#
include
"
X11UndefineNone
.
h
"
#
include
"
gfxPlatform
.
h
"
#
endif
#
if
defined
(
__GLIBC__
)
&
&
!
defined
(
__UCLIBC__
)
#
define
LIBC_GLIBC
1
#
endif
namespace
mozilla
{
static
bool
IsGraphicsOkWithoutNetwork
(
)
{
#
ifdef
MOZ_X11
DebugOnly
<
gfxPlatform
*
>
gfxPlatform
=
gfxPlatform
:
:
GetPlatform
(
)
;
const
auto
display
=
gdk_display_get_default
(
)
;
if
(
!
display
)
{
MOZ_ASSERT
(
gfxPlatform
-
>
IsHeadless
(
)
)
;
return
true
;
}
if
(
mozilla
:
:
widget
:
:
GdkIsX11Display
(
display
)
)
{
const
int
xSocketFd
=
ConnectionNumber
(
GDK_DISPLAY_XDISPLAY
(
display
)
)
;
if
(
NS_WARN_IF
(
xSocketFd
<
0
)
)
{
return
false
;
}
int
domain
;
socklen_t
optlen
=
static_cast
<
socklen_t
>
(
sizeof
(
domain
)
)
;
int
rv
=
getsockopt
(
xSocketFd
SOL_SOCKET
SO_DOMAIN
&
domain
&
optlen
)
;
if
(
NS_WARN_IF
(
rv
!
=
0
)
)
{
return
false
;
}
MOZ_RELEASE_ASSERT
(
static_cast
<
size_t
>
(
optlen
)
=
=
sizeof
(
domain
)
)
;
if
(
domain
!
=
AF_LOCAL
)
{
return
false
;
}
const
char
*
const
displayStr
=
PR_GetEnv
(
"
DISPLAY
"
)
;
nsAutoCString
socketPath
(
"
/
tmp
/
.
X11
-
unix
"
)
;
int
accessFlags
=
X_OK
;
int
displayNum
;
if
(
displayStr
&
&
(
sscanf
(
displayStr
"
:
%
d
"
&
displayNum
)
=
=
1
|
|
sscanf
(
displayStr
"
unix
:
%
d
"
&
displayNum
)
=
=
1
)
)
{
socketPath
.
AppendPrintf
(
"
/
X
%
d
"
displayNum
)
;
accessFlags
=
R_OK
|
W_OK
;
}
if
(
access
(
socketPath
.
get
(
)
accessFlags
)
!
=
0
)
{
SANDBOX_LOG_ERRNO
(
"
%
s
is
inaccessible
;
can
'
t
isolate
network
namespace
in
"
"
content
processes
"
socketPath
.
get
(
)
)
;
return
false
;
}
}
#
endif
return
true
;
}
bool
HasAtiDrivers
(
)
{
nsCOMPtr
<
nsIGfxInfo
>
gfxInfo
=
components
:
:
GfxInfo
:
:
Service
(
)
;
nsAutoString
vendorID
;
static
const
Array
<
nsresult
(
nsIGfxInfo
:
:
*
)
(
nsAString
&
)
2
>
kMethods
=
{
&
nsIGfxInfo
:
:
GetAdapterVendorID
&
nsIGfxInfo
:
:
GetAdapterVendorID2
}
;
for
(
const
auto
method
:
kMethods
)
{
if
(
NS_SUCCEEDED
(
(
gfxInfo
-
>
*
method
)
(
vendorID
)
)
)
{
if
(
vendorID
.
EqualsLiteral
(
"
ATI
Technologies
Inc
.
"
)
)
{
return
true
;
}
}
}
return
false
;
}
static
bool
ContentNeedsSysVIPC
(
)
{
#
ifdef
MOZ_ALSA
if
(
!
StaticPrefs
:
:
media_cubeb_sandbox
(
)
)
{
return
true
;
}
#
endif
if
(
!
StaticPrefs
:
:
security_sandbox_content_headless_AtStartup
(
)
)
{
if
(
PR_GetEnv
(
"
VGL_ISACTIVE
"
)
!
=
nullptr
)
{
return
true
;
}
if
(
HasAtiDrivers
(
)
)
{
return
true
;
}
}
return
false
;
}
static
void
PreloadSandboxLib
(
base
:
:
environment_map
*
aEnv
)
{
nsAutoCString
preload
;
preload
.
AssignLiteral
(
"
libmozsandbox
.
so
"
)
;
if
(
const
char
*
oldPreload
=
PR_GetEnv
(
"
LD_PRELOAD
"
)
)
{
preload
.
Append
(
'
'
)
;
preload
.
Append
(
oldPreload
)
;
(
*
aEnv
)
[
"
MOZ_ORIG_LD_PRELOAD
"
]
=
oldPreload
;
}
MOZ_ASSERT
(
aEnv
-
>
count
(
"
LD_PRELOAD
"
)
=
=
0
)
;
(
*
aEnv
)
[
"
LD_PRELOAD
"
]
=
preload
.
get
(
)
;
}
static
bool
AttachSandboxReporter
(
geckoargs
:
:
ChildProcessArgs
&
aExtraOpts
)
{
UniqueFileHandle
clientFileDescriptor
(
dup
(
SandboxReporter
:
:
Singleton
(
)
-
>
GetClientFileDescriptor
(
)
)
)
;
if
(
!
clientFileDescriptor
)
{
SANDBOX_LOG_ERRNO
(
"
dup
"
)
;
return
false
;
}
geckoargs
:
:
sSandboxReporter
.
Put
(
std
:
:
move
(
clientFileDescriptor
)
aExtraOpts
)
;
return
true
;
}
static
bool
AttachSandboxChroot
(
geckoargs
:
:
ChildProcessArgs
&
aExtraOpts
base
:
:
LaunchOptions
*
aOptions
)
{
int
fds
[
2
]
;
int
rv
=
socketpair
(
AF_UNIX
SOCK_STREAM
|
SOCK_CLOEXEC
0
fds
)
;
if
(
rv
!
=
0
)
{
SANDBOX_LOG_ERRNO
(
"
socketpair
"
)
;
return
false
;
}
geckoargs
:
:
sChrootClient
.
Put
(
UniqueFileHandle
{
fds
[
0
]
}
aExtraOpts
)
;
aOptions
-
>
sandbox_chroot_server
.
reset
(
fds
[
1
]
)
;
return
true
;
}
static
int
GetEffectiveSandboxLevel
(
GeckoProcessType
aType
ipc
:
:
SandboxingKind
aKind
)
{
auto
info
=
SandboxInfo
:
:
Get
(
)
;
switch
(
aType
)
{
#
ifdef
MOZ_ENABLE_FORKSERVER
case
GeckoProcessType_ForkServer
:
return
1
;
break
;
#
endif
case
GeckoProcessType_Content
:
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
info
.
Test
(
SandboxInfo
:
:
kEnabledForContent
)
)
{
return
GetEffectiveContentSandboxLevel
(
)
;
}
return
0
;
case
GeckoProcessType_GMPlugin
:
if
(
info
.
Test
(
SandboxInfo
:
:
kEnabledForMedia
)
)
{
return
1
;
}
return
0
;
case
GeckoProcessType_RDD
:
return
PR_GetEnv
(
"
MOZ_DISABLE_RDD_SANDBOX
"
)
=
=
nullptr
?
1
:
0
;
case
GeckoProcessType_Socket
:
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
GetEffectiveSocketProcessSandboxLevel
(
)
;
case
GeckoProcessType_Utility
:
return
IsUtilitySandboxEnabled
(
aKind
)
;
default
:
return
0
;
}
}
bool
SandboxLaunch
:
:
Configure
(
GeckoProcessType
aType
SandboxingKind
aKind
geckoargs
:
:
ChildProcessArgs
&
aExtraOpts
LaunchOptions
*
aOptions
)
{
MOZ_ASSERT
(
aOptions
-
>
fork_flags
=
=
0
&
&
!
aOptions
-
>
sandbox_chroot_server
)
;
auto
info
=
SandboxInfo
:
:
Get
(
)
;
if
(
!
info
.
Test
(
SandboxInfo
:
:
kHasSeccompBPF
)
)
{
return
true
;
}
int
level
=
GetEffectiveSandboxLevel
(
aType
aKind
)
;
if
(
level
=
=
0
)
{
return
true
;
}
PreloadSandboxLib
(
&
aOptions
-
>
env_map
)
;
if
(
!
AttachSandboxReporter
(
aExtraOpts
)
)
{
return
false
;
}
bool
canChroot
=
false
;
int
flags
=
0
;
if
(
aType
=
=
GeckoProcessType_Content
&
&
level
>
=
1
)
{
static
const
bool
needSysV
=
ContentNeedsSysVIPC
(
)
;
if
(
needSysV
)
{
aOptions
-
>
env_map
[
"
MOZ_SANDBOX_ALLOW_SYSV
"
]
=
"
1
"
;
}
else
{
flags
|
=
CLONE_NEWIPC
;
}
if
(
StaticPrefs
:
:
security_sandbox_content_headless_AtStartup
(
)
)
{
aOptions
-
>
env_map
[
"
MOZ_HEADLESS
"
]
=
"
1
"
;
}
}
if
(
!
info
.
Test
(
SandboxInfo
:
:
kHasUserNamespaces
)
)
{
return
true
;
}
switch
(
aType
)
{
case
GeckoProcessType_Socket
:
if
(
level
>
=
1
)
{
canChroot
=
true
;
flags
|
=
CLONE_NEWIPC
;
}
break
;
case
GeckoProcessType_GMPlugin
:
case
GeckoProcessType_RDD
:
if
(
level
>
=
1
)
{
canChroot
=
true
;
flags
|
=
CLONE_NEWNET
;
}
break
;
case
GeckoProcessType_Utility
:
if
(
level
>
=
1
)
{
canChroot
=
true
;
flags
|
=
CLONE_NEWIPC
;
flags
|
=
CLONE_NEWNET
;
}
break
;
case
GeckoProcessType_Content
:
if
(
level
>
=
4
)
{
canChroot
=
true
;
static
const
bool
canCloneNet
=
StaticPrefs
:
:
security_sandbox_content_headless_AtStartup
(
)
|
|
(
IsGraphicsOkWithoutNetwork
(
)
&
&
!
PR_GetEnv
(
"
RENDERDOC_CAPTUREOPTS
"
)
)
;
if
(
canCloneNet
)
{
flags
|
=
CLONE_NEWNET
;
}
}
if
(
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
content
.
force
-
namespace
"
false
)
)
{
flags
|
=
CLONE_NEWUSER
;
}
break
;
default
:
break
;
}
if
(
canChroot
&
&
!
AttachSandboxChroot
(
aExtraOpts
aOptions
)
)
{
return
false
;
}
if
(
canChroot
|
|
flags
!
=
0
)
{
flags
|
=
CLONE_NEWUSER
;
}
aOptions
-
>
env_map
[
kSandboxChrootEnvFlag
]
=
std
:
:
to_string
(
canChroot
?
1
:
0
)
;
aOptions
-
>
fork_flags
=
flags
;
return
true
;
}
SandboxLaunch
:
:
SandboxLaunch
(
)
:
mFlags
(
0
)
mChrootServer
(
-
1
)
{
}
SandboxLaunch
:
:
~
SandboxLaunch
(
)
{
if
(
mChrootServer
>
=
0
)
{
close
(
mChrootServer
)
;
}
}
bool
SandboxLaunch
:
:
Prepare
(
LaunchOptions
*
aOptions
)
{
MOZ_ASSERT
(
mChrootServer
<
0
)
;
mFlags
=
aOptions
-
>
fork_flags
;
mChrootServer
=
aOptions
-
>
sandbox_chroot_server
.
release
(
)
;
return
true
;
}
static
void
BlockAllSignals
(
sigset_t
*
aOldSigs
)
{
sigset_t
allSigs
;
int
rv
=
sigfillset
(
&
allSigs
)
;
MOZ_RELEASE_ASSERT
(
rv
=
=
0
)
;
rv
=
pthread_sigmask
(
SIG_BLOCK
&
allSigs
aOldSigs
)
;
if
(
rv
!
=
0
)
{
SANDBOX_LOG_WITH_ERROR
(
rv
"
pthread_sigmask
(
block
all
)
"
)
;
MOZ_CRASH
(
"
pthread_sigmask
"
)
;
}
}
static
void
RestoreSignals
(
const
sigset_t
*
aOldSigs
)
{
int
rv
=
pthread_sigmask
(
SIG_SETMASK
aOldSigs
nullptr
)
;
if
(
rv
!
=
0
)
{
SANDBOX_LOG_WITH_ERROR
(
rv
"
pthread_sigmask
(
restore
)
"
)
;
MOZ_CRASH
(
"
pthread_sigmask
"
)
;
}
}
static
bool
IsSignalIgnored
(
int
aSig
)
{
struct
sigaction
sa
{
}
;
if
(
sigaction
(
aSig
nullptr
&
sa
)
!
=
0
)
{
if
(
errno
!
=
EINVAL
)
{
SANDBOX_LOG_ERRNO
(
"
sigaction
(
%
d
)
"
aSig
)
;
}
return
false
;
}
return
sa
.
sa_handler
=
=
SIG_IGN
;
}
static
void
ResetSignalHandlers
(
)
{
for
(
int
signum
=
1
;
signum
<
=
SIGRTMAX
;
+
+
signum
)
{
if
(
IsSignalIgnored
(
signum
)
)
{
continue
;
}
if
(
signal
(
signum
SIG_DFL
)
=
=
SIG_ERR
)
{
MOZ_DIAGNOSTIC_ASSERT
(
errno
=
=
EINVAL
)
;
}
}
}
namespace
{
#
if
defined
(
LIBC_GLIBC
)
#
if
!
defined
(
CHECK_EQ
)
#
define
CHECK_EQ
(
a
b
)
MOZ_RELEASE_ASSERT
(
(
a
)
=
=
(
b
)
)
#
endif
using
namespace
sandbox
;
#
include
"
glibc_hack
/
namespace_sandbox
.
inc
"
#
endif
static
int
CloneCallee
(
void
*
aPtr
)
{
auto
ctxPtr
=
reinterpret_cast
<
jmp_buf
*
>
(
aPtr
)
;
longjmp
(
*
ctxPtr
1
)
;
MOZ_CRASH
(
"
unreachable
"
)
;
return
1
;
}
MOZ_NEVER_INLINE
MOZ_ASAN_IGNORE
static
pid_t
DoClone
(
int
aFlags
jmp_buf
*
aCtx
)
{
static
constexpr
size_t
kStackAlignment
=
16
;
uint8_t
miniStack
[
4096
]
__attribute__
(
(
aligned
(
kStackAlignment
)
)
)
;
#
ifdef
__hppa__
void
*
stackPtr
=
miniStack
;
#
else
void
*
stackPtr
=
std
:
:
end
(
miniStack
)
;
#
endif
return
clone
(
CloneCallee
stackPtr
aFlags
aCtx
)
;
}
}
static
pid_t
ForkWithFlags
(
int
aFlags
)
{
static
const
int
kBadFlags
=
CLONE_VM
|
CLONE_VFORK
|
CLONE_SETTLS
|
CLONE_PARENT_SETTID
|
CLONE_CHILD_SETTID
|
CLONE_CHILD_CLEARTID
;
MOZ_RELEASE_ASSERT
(
(
aFlags
&
kBadFlags
)
=
=
0
)
;
sigset_t
oldSigs
;
BlockAllSignals
(
&
oldSigs
)
;
int
ret
=
0
;
jmp_buf
ctx
;
if
(
setjmp
(
ctx
)
=
=
0
)
{
ret
=
DoClone
(
aFlags
|
SIGCHLD
&
ctx
)
;
MOZ_DIAGNOSTIC_ASSERT
(
ret
!
=
0
)
;
}
RestoreSignals
(
&
oldSigs
)
;
#
if
defined
(
LIBC_GLIBC
)
if
(
ret
=
=
0
)
{
MaybeUpdateGlibcTidCache
(
)
;
}
#
endif
return
ret
;
}
static
bool
WriteStringToFile
(
const
char
*
aPath
const
char
*
aStr
const
size_t
aLen
)
{
int
fd
=
open
(
aPath
O_WRONLY
)
;
if
(
fd
<
0
)
{
return
false
;
}
ssize_t
written
=
write
(
fd
aStr
aLen
)
;
if
(
close
(
fd
)
!
=
0
|
|
written
!
=
ssize_t
(
aLen
)
)
{
if
(
written
>
=
0
)
{
errno
=
EMSGSIZE
;
}
return
false
;
}
return
true
;
}
static
void
ConfigureUserNamespace
(
uid_t
uid
gid_t
gid
)
{
using
base
:
:
strings
:
:
SafeSPrintf
;
char
buf
[
sizeof
(
"
18446744073709551615
18446744073709551615
1
"
)
]
;
size_t
len
;
len
=
static_cast
<
size_t
>
(
SafeSPrintf
(
buf
"
%
d
%
d
1
"
uid
uid
)
)
;
MOZ_RELEASE_ASSERT
(
len
<
sizeof
(
buf
)
)
;
if
(
!
WriteStringToFile
(
"
/
proc
/
self
/
uid_map
"
buf
len
)
)
{
SANDBOX_LOG_ERRNO
(
"
writing
/
proc
/
self
/
uid_map
"
)
;
MOZ_CRASH
(
"
Failed
to
write
/
proc
/
self
/
uid_map
"
)
;
}
Unused
<
<
WriteStringToFile
(
"
/
proc
/
self
/
setgroups
"
"
deny
"
4
)
;
len
=
static_cast
<
size_t
>
(
SafeSPrintf
(
buf
"
%
d
%
d
1
"
gid
gid
)
)
;
MOZ_RELEASE_ASSERT
(
len
<
sizeof
(
buf
)
)
;
if
(
!
WriteStringToFile
(
"
/
proc
/
self
/
gid_map
"
buf
len
)
)
{
SANDBOX_LOG_ERRNO
(
"
writing
/
proc
/
self
/
gid_map
"
)
;
MOZ_CRASH
(
"
Failed
to
write
/
proc
/
self
/
gid_map
"
)
;
}
}
static
void
DropAllCaps
(
)
{
if
(
!
LinuxCapabilities
(
)
.
SetCurrent
(
)
)
{
SANDBOX_LOG_ERRNO
(
"
capset
(
drop
all
)
"
)
;
}
}
pid_t
SandboxLaunch
:
:
Fork
(
)
{
if
(
mFlags
=
=
0
)
{
MOZ_ASSERT
(
mChrootServer
<
0
)
;
return
fork
(
)
;
}
uid_t
uid
=
getuid
(
)
;
gid_t
gid
=
getgid
(
)
;
sigset_t
oldSigs
;
BlockAllSignals
(
&
oldSigs
)
;
#
if
defined
(
MOZ_ENABLE_FORKSERVER
)
run_moz_pthread_atfork_handlers_prefork
(
)
;
#
endif
pid_t
pid
=
ForkWithFlags
(
mFlags
)
;
if
(
pid
!
=
0
)
{
#
if
defined
(
MOZ_ENABLE_FORKSERVER
)
run_moz_pthread_atfork_handlers_postfork_parent
(
)
;
#
endif
RestoreSignals
(
&
oldSigs
)
;
return
pid
;
}
#
if
defined
(
MOZ_ENABLE_FORKSERVER
)
run_moz_pthread_atfork_handlers_postfork_child
(
)
;
#
endif
prctl
(
PR_SET_NAME
"
Sandbox
Forked
"
)
;
ResetSignalHandlers
(
)
;
RestoreSignals
(
&
oldSigs
)
;
ConfigureUserNamespace
(
uid
gid
)
;
if
(
mChrootServer
>
=
0
)
{
StartChrootServer
(
)
;
}
DropAllCaps
(
)
;
return
0
;
}
void
SandboxLaunch
:
:
StartChrootServer
(
)
{
pid_t
pid
=
ForkWithFlags
(
CLONE_FS
)
;
if
(
pid
<
0
)
{
MOZ_CRASH
(
"
failed
to
clone
chroot
helper
process
"
)
;
}
if
(
pid
>
0
)
{
return
;
}
prctl
(
PR_SET_NAME
"
Chroot
Helper
"
)
;
LinuxCapabilities
caps
;
caps
.
Effective
(
CAP_SYS_CHROOT
)
=
true
;
if
(
!
caps
.
SetCurrent
(
)
)
{
SANDBOX_LOG_ERRNO
(
"
capset
(
chroot
helper
)
"
)
;
MOZ_DIAGNOSTIC_CRASH
(
"
caps
.
SetCurrent
(
)
failed
"
)
;
}
base
:
:
CloseSuperfluousFds
(
this
[
]
(
void
*
aCtx
int
aFd
)
{
return
aFd
=
=
static_cast
<
decltype
(
this
)
>
(
aCtx
)
-
>
mChrootServer
;
}
)
;
char
msg
;
ssize_t
msgLen
=
HANDLE_EINTR
(
read
(
mChrootServer
&
msg
1
)
)
;
if
(
msgLen
<
0
)
{
SANDBOX_LOG_ERRNO
(
"
chroot
server
couldn
'
t
read
request
"
)
;
}
if
(
msgLen
=
=
0
)
{
_exit
(
0
)
;
}
MOZ_RELEASE_ASSERT
(
msgLen
=
=
1
)
;
MOZ_RELEASE_ASSERT
(
msg
=
=
kSandboxChrootRequest
)
;
int
rv
=
chroot
(
"
/
proc
/
self
/
fdinfo
"
)
;
if
(
rv
!
=
0
)
{
SANDBOX_LOG_ERRNO
(
"
chroot
"
)
;
MOZ_CRASH
(
"
chroot
failed
"
)
;
}
DropAllCaps
(
)
;
rv
=
chdir
(
"
/
"
)
;
if
(
rv
!
=
0
)
{
SANDBOX_LOG_ERRNO
(
"
chdir
(
\
"
/
\
"
)
"
)
;
MOZ_CRASH
(
"
chdir
(
\
"
/
\
"
)
failed
"
)
;
}
msg
=
kSandboxChrootResponse
;
msgLen
=
HANDLE_EINTR
(
write
(
mChrootServer
&
msg
1
)
)
;
if
(
msgLen
<
0
)
{
SANDBOX_LOG_ERRNO
(
"
chroot
server
couldn
'
t
send
response
"
)
;
}
MOZ_RELEASE_ASSERT
(
msgLen
=
=
1
)
;
_exit
(
0
)
;
}
}
