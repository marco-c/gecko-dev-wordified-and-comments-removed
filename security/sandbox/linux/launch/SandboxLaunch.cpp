#
include
"
SandboxLaunch
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
SandboxReporter
.
h
"
#
include
"
nsString
.
h
"
#
include
"
prenv
.
h
"
namespace
mozilla
{
static
void
PreloadSandboxLib
(
base
:
:
environment_map
*
aEnv
)
{
nsAutoCString
preload
;
preload
.
AssignLiteral
(
"
libmozsandbox
.
so
"
)
;
if
(
const
char
*
oldPreload
=
PR_GetEnv
(
"
LD_PRELOAD
"
)
)
{
preload
.
Append
(
'
'
)
;
preload
.
Append
(
oldPreload
)
;
}
MOZ_ASSERT
(
aEnv
-
>
count
(
"
LD_PRELOAD
"
)
=
=
0
)
;
(
*
aEnv
)
[
"
LD_PRELOAD
"
]
=
preload
.
get
(
)
;
}
static
void
AttachSandboxReporter
(
base
:
:
file_handle_mapping_vector
*
aFdMap
)
{
int
srcFd
dstFd
;
SandboxReporter
:
:
Singleton
(
)
-
>
GetClientFileDescriptorMapping
(
&
srcFd
&
dstFd
)
;
aFdMap
-
>
push_back
(
{
srcFd
dstFd
}
)
;
}
void
SandboxLaunchPrepare
(
GeckoProcessType
aType
base
:
:
LaunchOptions
*
aOptions
)
{
PreloadSandboxLib
(
&
aOptions
-
>
environ
)
;
AttachSandboxReporter
(
&
aOptions
-
>
fds_to_remap
)
;
}
}
