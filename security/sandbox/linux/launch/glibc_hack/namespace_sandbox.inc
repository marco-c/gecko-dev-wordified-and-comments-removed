#
if
defined
(
LIBC_GLIBC
)
struct
glibc_pthread
{
union
{
#
if
defined
(
ARCH_CPU_X86_64
)
char
header
[
704
]
;
#
endif
void
*
padding
[
24
]
;
}
header
;
void
*
list
[
2
]
;
pid_t
tid
;
}
;
pid_t
GetGlibcCachedTid
(
)
{
pthread_mutex_t
lock
=
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
;
CHECK_EQ
(
0
pthread_mutex_lock
(
&
lock
)
)
;
pid_t
tid
=
lock
.
__data
.
__owner
;
CHECK_EQ
(
0
pthread_mutex_unlock
(
&
lock
)
)
;
CHECK_EQ
(
0
pthread_mutex_destroy
(
&
lock
)
)
;
return
tid
;
}
void
MaybeUpdateGlibcTidCache
(
)
{
pid_t
real_tid
=
sys_gettid
(
)
;
pid_t
cached_tid
=
GetGlibcCachedTid
(
)
;
if
(
cached_tid
!
=
real_tid
)
{
pid_t
*
cached_tid_location
=
&
reinterpret_cast
<
struct
glibc_pthread
*
>
(
pthread_self
(
)
)
-
>
tid
;
CHECK_EQ
(
cached_tid
*
cached_tid_location
)
;
*
cached_tid_location
=
real_tid
;
CHECK_EQ
(
real_tid
GetGlibcCachedTid
(
)
)
;
}
}
#
endif
