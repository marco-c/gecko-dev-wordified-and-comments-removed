#
ifndef
mozilla_SandboxBroker_h
#
define
mozilla_SandboxBroker_h
#
include
"
mozilla
/
SandboxBrokerCommon
.
h
"
#
include
"
base
/
platform_thread
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
FileDescriptor
;
}
class
SandboxBroker
final
:
private
SandboxBrokerCommon
public
PlatformThread
:
:
Delegate
{
public
:
enum
Perms
{
MAY_ACCESS
=
1
<
<
0
MAY_READ
=
1
<
<
1
MAY_WRITE
=
1
<
<
2
MAY_CREATE
=
1
<
<
3
CRASH_INSTEAD
=
1
<
<
4
RECURSIVE
=
1
<
<
5
MAY_CONNECT
=
1
<
<
6
FORCE_DENY
=
1
<
<
7
}
;
typedef
nsTHashMap
<
nsCStringHashKey
int
>
PathPermissionMap
;
class
Policy
{
PathPermissionMap
mMap
;
public
:
Policy
(
)
;
Policy
(
const
Policy
&
aOther
)
;
~
Policy
(
)
;
void
FixRecursivePermissions
(
)
;
enum
AddCondition
{
AddIfExistsNow
AddAlways
}
;
void
AddPath
(
int
aPerms
const
char
*
aPath
AddCondition
aCond
)
;
void
AddTree
(
int
aPerms
const
char
*
aPath
)
;
void
AddFutureDir
(
int
aPerms
const
char
*
aPath
)
;
void
AddFilePrefix
(
int
aPerms
const
char
*
aDir
const
char
*
aPrefix
)
;
void
AddPrefix
(
int
aPerms
const
char
*
aPath
)
;
void
AddDynamic
(
int
aPerms
const
char
*
aPath
)
;
void
AddAncestors
(
const
char
*
aPath
int
aPerms
=
MAY_ACCESS
)
;
void
AddPath
(
int
aPerms
const
char
*
aPath
)
{
AddPath
(
aPerms
aPath
(
aPerms
&
MAY_CREATE
)
?
AddAlways
:
AddIfExistsNow
)
;
}
int
Lookup
(
const
nsACString
&
aPath
)
const
;
int
Lookup
(
const
char
*
aPath
)
const
{
return
Lookup
(
nsDependentCString
(
aPath
)
)
;
}
bool
IsEmpty
(
)
const
{
return
mMap
.
Count
(
)
=
=
0
;
}
private
:
bool
ValidatePath
(
const
char
*
path
)
const
;
void
AddPrefixInternal
(
int
aPerms
const
nsACString
&
aPath
)
;
void
AddTreeInternal
(
int
aPerms
const
char
*
aPath
)
;
}
;
static
UniquePtr
<
SandboxBroker
>
Create
(
UniquePtr
<
const
Policy
>
aPolicy
int
aChildPid
ipc
:
:
FileDescriptor
&
aClientFdOut
)
;
virtual
~
SandboxBroker
(
)
;
private
:
PlatformThreadHandle
mThread
;
int
mFileDesc
;
const
int
mChildPid
;
const
UniquePtr
<
const
Policy
>
mPolicy
;
typedef
nsTHashMap
<
nsCStringHashKey
nsCString
>
PathMap
;
PathMap
mSymlinkMap
;
SandboxBroker
(
UniquePtr
<
const
Policy
>
aPolicy
int
aChildPid
int
&
aClientFd
)
;
void
ThreadMain
(
void
)
override
;
void
AuditPermissive
(
int
aOp
int
aFlags
uint64_t
aId
int
aPerms
const
char
*
aPath
)
;
void
AuditDenial
(
int
aOp
int
aFlags
uint64_t
aId
int
aPerms
const
char
*
aPath
)
;
size_t
ConvertRelativePath
(
char
*
aPath
size_t
aBufSize
size_t
aPathLen
)
;
size_t
RealPath
(
char
*
aPath
size_t
aBufSize
size_t
aPathLen
)
;
nsCString
ReverseSymlinks
(
const
nsACString
&
aPath
)
;
int
SymlinkPermissions
(
const
char
*
aPath
const
size_t
aPathLen
)
;
char
*
SymlinkPath
(
const
Policy
*
aPolicy
const
char
*
__restrict
aPath
char
*
__restrict
aResolved
int
*
aPermission
)
;
SandboxBroker
(
const
SandboxBroker
&
)
=
delete
;
void
operator
=
(
const
SandboxBroker
&
)
=
delete
;
}
;
}
#
endif
