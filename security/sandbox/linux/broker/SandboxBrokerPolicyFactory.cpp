#
include
"
SandboxBrokerPolicyFactory
.
h
"
#
include
"
SandboxInfo
.
h
"
#
include
"
SandboxLogging
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
SpecialSystemDirectory
.
h
"
#
ifdef
ANDROID
#
include
"
cutils
/
properties
.
h
"
#
endif
#
ifdef
MOZ_WIDGET_GTK
#
include
<
glib
.
h
>
#
endif
namespace
mozilla
{
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
namespace
{
static
const
int
rdonly
=
SandboxBroker
:
:
MAY_READ
;
static
const
int
wronly
=
SandboxBroker
:
:
MAY_WRITE
;
static
const
int
rdwr
=
rdonly
|
wronly
;
static
const
int
rdwrcr
=
rdwr
|
SandboxBroker
:
:
MAY_CREATE
;
}
#
endif
SandboxBrokerPolicyFactory
:
:
SandboxBrokerPolicyFactory
(
)
{
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
SandboxBroker
:
:
Policy
*
policy
=
new
SandboxBroker
:
:
Policy
;
policy
-
>
AddDir
(
rdonly
"
/
"
)
;
policy
-
>
AddDir
(
rdwrcr
"
/
dev
/
shm
"
)
;
nsCOMPtr
<
nsIFile
>
tmpDir
;
nsresult
rv
=
GetSpecialSystemDirectory
(
OS_TemporaryDirectory
getter_AddRefs
(
tmpDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoCString
tmpPath
;
rv
=
tmpDir
-
>
GetNativePath
(
tmpPath
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
policy
-
>
AddDir
(
rdwrcr
tmpPath
.
get
(
)
)
;
}
}
if
(
NS_FAILED
(
rv
)
)
{
policy
-
>
AddDir
(
rdwrcr
"
/
tmp
"
)
;
}
policy
-
>
AddFilePrefix
(
rdwr
"
/
dev
"
"
nvidia
"
)
;
policy
-
>
AddDir
(
rdwr
"
/
dev
/
dri
"
)
;
#
ifdef
MOZ_ALSA
policy
-
>
AddDir
(
rdwr
"
/
dev
/
snd
"
)
;
#
endif
#
ifdef
MOZ_WIDGET_GTK
if
(
const
auto
userDir
=
g_get_user_runtime_dir
(
)
)
{
nsPrintfCString
shmPath
(
"
%
s
/
dconf
/
"
userDir
)
;
policy
-
>
AddPrefix
(
rdwrcr
shmPath
.
get
(
)
)
;
}
#
endif
mCommonContentPolicy
.
reset
(
policy
)
;
#
endif
}
#
ifdef
MOZ_CONTENT_SANDBOX
UniquePtr
<
SandboxBroker
:
:
Policy
>
SandboxBrokerPolicyFactory
:
:
GetContentPolicy
(
int
aPid
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
GetEffectiveContentSandboxLevel
(
)
<
=
1
)
{
return
nullptr
;
}
MOZ_ASSERT
(
mCommonContentPolicy
)
;
UniquePtr
<
SandboxBroker
:
:
Policy
>
policy
(
new
SandboxBroker
:
:
Policy
(
*
mCommonContentPolicy
)
)
;
nsAdoptingCString
extraPathString
=
Preferences
:
:
GetCString
(
"
security
.
sandbox
.
content
.
write_path_whitelist
"
)
;
if
(
extraPathString
)
{
for
(
const
nsACString
&
path
:
extraPathString
.
Split
(
'
'
)
)
{
nsCString
trimPath
(
path
)
;
trimPath
.
Trim
(
"
"
true
true
)
;
policy
-
>
AddDynamic
(
rdwr
trimPath
.
get
(
)
)
;
}
}
return
policy
;
}
#
endif
}
