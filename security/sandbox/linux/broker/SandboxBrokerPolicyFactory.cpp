#
include
"
SandboxBrokerPolicyFactory
.
h
"
#
include
"
SandboxInfo
.
h
"
#
include
"
SandboxLogging
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
SpecialSystemDirectory
.
h
"
#
ifdef
ANDROID
#
include
"
cutils
/
properties
.
h
"
#
endif
#
ifdef
MOZ_WIDGET_GTK
#
include
<
glib
.
h
>
#
endif
namespace
mozilla
{
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
namespace
{
static
const
int
rdonly
=
SandboxBroker
:
:
MAY_READ
;
static
const
int
wronly
=
SandboxBroker
:
:
MAY_WRITE
;
static
const
int
rdwr
=
rdonly
|
wronly
;
static
const
int
rdwrcr
=
rdwr
|
SandboxBroker
:
:
MAY_CREATE
;
}
#
endif
SandboxBrokerPolicyFactory
:
:
SandboxBrokerPolicyFactory
(
)
{
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
SandboxBroker
:
:
Policy
*
policy
=
new
SandboxBroker
:
:
Policy
;
policy
-
>
AddDir
(
rdwrcr
"
/
dev
/
shm
"
)
;
nsCOMPtr
<
nsIFile
>
tmpDir
;
nsresult
rv
=
GetSpecialSystemDirectory
(
OS_TemporaryDirectory
getter_AddRefs
(
tmpDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoCString
tmpPath
;
rv
=
tmpDir
-
>
GetNativePath
(
tmpPath
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
policy
-
>
AddDir
(
rdwrcr
tmpPath
.
get
(
)
)
;
}
}
if
(
NS_FAILED
(
rv
)
)
{
policy
-
>
AddDir
(
rdwrcr
"
/
tmp
"
)
;
}
policy
-
>
AddFilePrefix
(
rdwr
"
/
dev
"
"
nvidia
"
)
;
policy
-
>
AddDir
(
rdwr
"
/
dev
/
dri
"
)
;
#
ifdef
MOZ_ALSA
policy
-
>
AddDir
(
rdwr
"
/
dev
/
snd
"
)
;
#
endif
#
ifdef
MOZ_WIDGET_GTK
if
(
const
auto
userDir
=
g_get_user_runtime_dir
(
)
)
{
nsPrintfCString
shmPath
(
"
%
s
/
dconf
/
"
userDir
)
;
policy
-
>
AddPrefix
(
rdwrcr
shmPath
.
get
(
)
)
;
#
ifdef
MOZ_PULSEAUDIO
nsPrintfCString
pulsePath
(
"
%
s
/
pulse
"
userDir
)
;
policy
-
>
AddPath
(
rdonly
pulsePath
.
get
(
)
)
;
#
endif
}
#
endif
policy
-
>
AddPath
(
rdonly
"
/
dev
/
urandom
"
)
;
policy
-
>
AddPath
(
rdonly
"
/
proc
/
cpuinfo
"
)
;
policy
-
>
AddPath
(
rdonly
"
/
proc
/
meminfo
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
lib
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
etc
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
usr
/
share
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
usr
/
local
/
share
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
usr
/
lib
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
usr
/
lib32
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
usr
/
lib64
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
usr
/
X11R6
/
lib
/
X11
/
fonts
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
usr
/
tmp
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
var
/
tmp
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
sys
/
devices
/
cpu
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
sys
/
devices
/
system
/
cpu
"
)
;
policy
-
>
AddDir
(
rdonly
"
/
nix
/
store
"
)
;
policy
-
>
AddPrefix
(
rdonly
"
/
sys
/
dev
/
char
/
226
:
"
)
;
policy
-
>
AddPath
(
rdonly
"
/
proc
/
modules
"
)
;
#
ifdef
MOZ_PULSEAUDIO
if
(
const
auto
xauth
=
PR_GetEnv
(
"
XAUTHORITY
"
)
)
{
policy
-
>
AddPath
(
rdonly
xauth
)
;
}
#
endif
mozilla
:
:
Array
<
const
char
*
3
>
confDirs
=
{
"
.
config
"
"
.
themes
"
"
.
fonts
"
}
;
nsCOMPtr
<
nsIFile
>
homeDir
;
rv
=
GetSpecialSystemDirectory
(
Unix_HomeDirectory
getter_AddRefs
(
homeDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
nsIFile
>
confDir
;
for
(
auto
dir
:
confDirs
)
{
rv
=
homeDir
-
>
Clone
(
getter_AddRefs
(
confDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
confDir
-
>
AppendNative
(
nsDependentCString
(
dir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoCString
tmpPath
;
rv
=
confDir
-
>
GetNativePath
(
tmpPath
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
policy
-
>
AddDir
(
rdonly
tmpPath
.
get
(
)
)
;
}
}
}
}
rv
=
homeDir
-
>
Clone
(
getter_AddRefs
(
confDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
confDir
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
.
local
"
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
confDir
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
share
"
)
)
;
}
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoCString
tmpPath
;
rv
=
confDir
-
>
GetNativePath
(
tmpPath
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
policy
-
>
AddDir
(
rdonly
tmpPath
.
get
(
)
)
;
}
}
}
rv
=
homeDir
-
>
Clone
(
getter_AddRefs
(
confDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
confDir
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
.
fonts
.
conf
"
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoCString
tmpPath
;
rv
=
confDir
-
>
GetNativePath
(
tmpPath
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
policy
-
>
AddPath
(
rdonly
tmpPath
.
get
(
)
)
;
}
}
}
rv
=
homeDir
-
>
Clone
(
getter_AddRefs
(
confDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
confDir
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
.
pangorc
"
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoCString
tmpPath
;
rv
=
confDir
-
>
GetNativePath
(
tmpPath
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
policy
-
>
AddPath
(
rdonly
tmpPath
.
get
(
)
)
;
}
}
}
}
nsCOMPtr
<
nsIFile
>
ffDir
;
rv
=
NS_GetSpecialDirectory
(
NS_GRE_DIR
getter_AddRefs
(
ffDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoCString
tmpPath
;
rv
=
ffDir
-
>
GetNativePath
(
tmpPath
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
policy
-
>
AddDir
(
rdonly
tmpPath
.
get
(
)
)
;
}
}
if
(
mozilla
:
:
IsDevelopmentBuild
(
)
)
{
const
char
*
developer_repo_dir
=
PR_GetEnv
(
"
MOZ_DEVELOPER_REPO_DIR
"
)
;
if
(
developer_repo_dir
)
{
policy
-
>
AddDir
(
rdonly
developer_repo_dir
)
;
}
}
mCommonContentPolicy
.
reset
(
policy
)
;
#
endif
}
#
ifdef
MOZ_CONTENT_SANDBOX
UniquePtr
<
SandboxBroker
:
:
Policy
>
SandboxBrokerPolicyFactory
:
:
GetContentPolicy
(
int
aPid
bool
aFileProcess
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
GetEffectiveContentSandboxLevel
(
)
<
=
1
)
{
return
nullptr
;
}
MOZ_ASSERT
(
mCommonContentPolicy
)
;
UniquePtr
<
SandboxBroker
:
:
Policy
>
policy
(
new
SandboxBroker
:
:
Policy
(
*
mCommonContentPolicy
)
)
;
AddDynamicPathList
(
policy
.
get
(
)
"
security
.
sandbox
.
content
.
write_path_whitelist
"
rdwr
)
;
if
(
GetEffectiveContentSandboxLevel
(
)
<
=
2
|
|
aFileProcess
)
{
policy
-
>
AddDir
(
rdonly
"
/
"
)
;
return
policy
;
}
AddDynamicPathList
(
policy
.
get
(
)
"
security
.
sandbox
.
content
.
read_path_whitelist
"
rdonly
)
;
policy
-
>
AddPath
(
rdonly
nsPrintfCString
(
"
/
proc
/
%
d
/
maps
"
aPid
)
.
get
(
)
)
;
policy
-
>
AddPath
(
rdonly
nsPrintfCString
(
"
/
proc
/
%
d
/
statm
"
aPid
)
.
get
(
)
)
;
policy
-
>
AddPath
(
rdonly
nsPrintfCString
(
"
/
proc
/
%
d
/
smaps
"
aPid
)
.
get
(
)
)
;
nsCOMPtr
<
nsIFile
>
profileDir
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_50_DIR
getter_AddRefs
(
profileDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
nsIFile
>
workDir
;
rv
=
profileDir
-
>
Clone
(
getter_AddRefs
(
workDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
workDir
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
chrome
"
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
workDir
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
userContent
.
css
"
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoCString
tmpPath
;
rv
=
workDir
-
>
GetNativePath
(
tmpPath
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
policy
-
>
AddPath
(
rdonly
tmpPath
.
get
(
)
)
;
}
}
}
}
rv
=
profileDir
-
>
Clone
(
getter_AddRefs
(
workDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
workDir
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
extensions
"
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoCString
tmpPath
;
rv
=
workDir
-
>
GetNativePath
(
tmpPath
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
policy
-
>
AddDir
(
rdonly
tmpPath
.
get
(
)
)
;
}
}
}
}
return
policy
;
}
void
SandboxBrokerPolicyFactory
:
:
AddDynamicPathList
(
SandboxBroker
:
:
Policy
*
policy
const
char
*
aPathListPref
int
perms
)
{
nsAutoCString
pathList
;
nsresult
rv
=
Preferences
:
:
GetCString
(
aPathListPref
pathList
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
for
(
const
nsACString
&
path
:
pathList
.
Split
(
'
'
)
)
{
nsCString
trimPath
(
path
)
;
trimPath
.
Trim
(
"
"
true
true
)
;
policy
-
>
AddDynamic
(
perms
trimPath
.
get
(
)
)
;
}
}
}
#
endif
}
