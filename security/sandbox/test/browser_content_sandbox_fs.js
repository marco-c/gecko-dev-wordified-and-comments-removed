var
prefs
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefBranch
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
"
+
"
security
/
sandbox
/
test
/
browser_content_sandbox_utils
.
js
"
this
)
;
function
createFile
(
path
)
{
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
let
encoder
=
new
TextEncoder
(
)
;
let
array
=
encoder
.
encode
(
"
WRITING
FROM
CONTENT
PROCESS
"
)
;
return
OS
.
File
.
writeAtomic
(
path
array
)
.
then
(
function
(
value
)
{
return
true
;
}
function
(
reason
)
{
return
false
;
}
)
;
}
function
deleteFile
(
path
)
{
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
return
OS
.
File
.
remove
(
path
{
ignoreAbsent
:
false
}
)
.
then
(
function
(
value
)
{
return
true
;
}
)
.
catch
(
function
(
err
)
{
return
false
;
}
)
;
}
function
isContentFileIOSandboxed
(
level
)
{
let
fileIOSandboxMinLevel
=
0
;
switch
(
Services
.
appinfo
.
OS
)
{
case
"
WINNT
"
:
fileIOSandboxMinLevel
=
1
;
break
;
case
"
Darwin
"
:
fileIOSandboxMinLevel
=
1
;
break
;
case
"
Linux
"
:
fileIOSandboxMinLevel
=
2
;
break
;
default
:
Assert
.
ok
(
false
"
Unknown
OS
"
)
;
}
return
(
level
>
=
fileIOSandboxMinLevel
)
;
}
add_task
(
function
*
(
)
{
if
(
!
gMultiProcessBrowser
)
{
ok
(
false
"
e10s
is
enabled
"
)
;
info
(
"
e10s
is
not
enabled
exiting
"
)
;
return
;
}
let
level
=
0
;
let
prefExists
=
true
;
try
{
level
=
prefs
.
getIntPref
(
"
security
.
sandbox
.
content
.
level
"
)
;
}
catch
(
e
)
{
prefExists
=
false
;
}
if
(
isLinux
(
)
&
&
!
isNightly
(
)
)
{
todo
(
prefExists
"
pref
security
.
sandbox
.
content
.
level
exists
"
)
;
if
(
!
prefExists
)
{
return
;
}
}
ok
(
prefExists
"
pref
security
.
sandbox
.
content
.
level
exists
"
)
;
if
(
!
prefExists
)
{
return
;
}
if
(
isLinux
(
)
&
&
!
isNightly
(
)
)
{
todo
(
level
>
0
"
content
sandbox
enabled
for
!
nightly
.
"
)
;
return
;
}
info
(
security
.
sandbox
.
content
.
level
=
{
level
}
)
;
ok
(
level
>
0
"
content
sandbox
is
enabled
.
"
)
;
if
(
level
=
=
0
)
{
info
(
"
content
sandbox
is
not
enabled
exiting
"
)
;
return
;
}
let
isFileIOSandboxed
=
isContentFileIOSandboxed
(
level
)
;
if
(
isLinux
(
)
&
&
!
isNightly
(
)
)
{
todo
(
isFileIOSandboxed
"
content
file
I
/
O
sandbox
enabled
for
!
nightly
.
"
)
;
return
;
}
ok
(
isFileIOSandboxed
"
content
file
I
/
O
sandboxing
is
enabled
.
"
)
;
if
(
!
isFileIOSandboxed
)
{
info
(
"
content
sandbox
level
too
low
for
file
I
/
O
tests
exiting
\
n
"
)
;
return
;
}
let
browser
=
gBrowser
.
selectedBrowser
;
{
let
homeFile
=
fileInHomeDir
(
)
;
let
path
=
homeFile
.
path
;
let
fileCreated
=
yield
ContentTask
.
spawn
(
browser
path
createFile
)
;
ok
(
fileCreated
=
=
false
"
creating
a
file
in
home
dir
is
not
permitted
"
)
;
if
(
fileCreated
=
=
true
)
{
homeFile
.
remove
(
false
)
;
}
}
{
let
path
=
fileInTempDir
(
)
.
path
;
let
fileCreated
=
yield
ContentTask
.
spawn
(
browser
path
createFile
)
;
if
(
!
fileCreated
&
&
isWin
(
)
)
{
info
(
"
ignoring
failure
to
write
to
content
temp
due
to
1329294
\
n
"
)
;
return
;
}
ok
(
fileCreated
=
=
true
"
creating
a
file
in
content
temp
is
permitted
"
)
;
let
fileDeleted
=
yield
ContentTask
.
spawn
(
browser
path
deleteFile
)
;
ok
(
fileDeleted
=
=
true
"
deleting
a
file
in
content
temp
is
permitted
"
)
;
}
}
)
;
