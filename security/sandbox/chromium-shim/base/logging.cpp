#
include
"
base
/
logging
.
h
"
#
if
defined
(
OS_WIN
)
#
include
<
windows
.
h
>
#
endif
#
if
defined
(
OS_POSIX
)
#
include
<
errno
.
h
>
#
include
<
string
.
h
>
#
endif
#
include
"
base
/
strings
/
stringprintf
.
h
"
#
if
defined
(
OS_WIN
)
#
include
"
base
/
strings
/
utf_string_conversions
.
h
"
#
endif
#
include
<
algorithm
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
logging
{
namespace
{
int
g_min_log_level
=
0
;
LoggingDestination
g_logging_destination
=
LOG_DEFAULT
;
const
int
kAlwaysPrintErrorLevel
=
LOG_ERROR
;
LogMessageHandlerFunction
log_message_handler
=
nullptr
;
}
std
:
:
ostream
*
g_swallow_stream
;
void
SetMinLogLevel
(
int
level
)
{
g_min_log_level
=
std
:
:
min
(
LOG_FATAL
level
)
;
}
int
GetMinLogLevel
(
)
{
return
g_min_log_level
;
}
bool
ShouldCreateLogMessage
(
int
severity
)
{
if
(
severity
<
g_min_log_level
)
return
false
;
return
g_logging_destination
!
=
LOG_NONE
|
|
log_message_handler
|
|
severity
>
=
kAlwaysPrintErrorLevel
;
}
int
GetVlogLevelHelper
(
const
char
*
file
size_t
N
)
{
return
0
;
}
LogMessage
:
:
LogMessage
(
const
char
*
file
int
line
LogSeverity
severity
)
:
severity_
(
severity
)
file_
(
file
)
line_
(
line
)
{
}
LogMessage
:
:
LogMessage
(
const
char
*
file
int
line
const
char
*
condition
)
:
severity_
(
LOG_FATAL
)
file_
(
file
)
line_
(
line
)
{
}
LogMessage
:
:
~
LogMessage
(
)
{
if
(
severity_
=
=
LOG_FATAL
)
{
MOZ_CRASH
(
"
Hit
fatal
chromium
sandbox
condition
.
"
)
;
}
}
SystemErrorCode
GetLastSystemErrorCode
(
)
{
#
if
defined
(
OS_WIN
)
return
:
:
GetLastError
(
)
;
#
elif
defined
(
OS_POSIX
)
return
errno
;
#
else
#
error
Not
implemented
#
endif
}
#
if
BUILDFLAG
(
IS_WIN
)
Win32ErrorLogMessage
:
:
Win32ErrorLogMessage
(
const
char
*
file
int
line
LogSeverity
severity
SystemErrorCode
err
)
:
LogMessage
(
file
line
severity
)
err_
(
err
)
{
mozilla
:
:
Unused
<
<
err_
;
}
Win32ErrorLogMessage
:
:
~
Win32ErrorLogMessage
(
)
{
}
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
ErrnoLogMessage
:
:
ErrnoLogMessage
(
const
char
*
file
int
line
LogSeverity
severity
SystemErrorCode
err
)
:
LogMessage
(
file
line
severity
)
err_
(
err
)
{
mozilla
:
:
Unused
<
<
err_
;
}
ErrnoLogMessage
:
:
~
ErrnoLogMessage
(
)
{
}
#
endif
void
RawLog
(
int
level
const
char
*
message
)
{
}
#
if
!
BUILDFLAG
(
USE_RUNTIME_VLOG
)
int
GetDisableAllVLogLevel
(
)
{
return
-
1
;
}
#
endif
}
