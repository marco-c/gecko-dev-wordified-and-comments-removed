#
include
"
base
/
threading
/
platform_thread
.
h
"
#
include
"
base
/
threading
/
platform_thread_internal_posix
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
namespace
base
{
namespace
internal
{
namespace
{
const
struct
sched_param
kRealTimePrio
=
{
8
}
;
}
const
ThreadPriorityToNiceValuePair
kThreadPriorityToNiceValueMap
[
4
]
=
{
{
ThreadPriority
:
:
BACKGROUND
10
}
{
ThreadPriority
:
:
NORMAL
0
}
{
ThreadPriority
:
:
DISPLAY
-
8
}
{
ThreadPriority
:
:
REALTIME_AUDIO
-
10
}
}
;
bool
SetCurrentThreadPriorityForPlatform
(
ThreadPriority
priority
)
{
MOZ_CRASH
(
)
;
}
bool
GetCurrentThreadPriorityForPlatform
(
ThreadPriority
*
priority
)
{
int
maybe_sched_rr
=
0
;
struct
sched_param
maybe_realtime_prio
=
{
0
}
;
if
(
pthread_getschedparam
(
pthread_self
(
)
&
maybe_sched_rr
&
maybe_realtime_prio
)
=
=
0
&
&
maybe_sched_rr
=
=
SCHED_RR
&
&
maybe_realtime_prio
.
sched_priority
=
=
kRealTimePrio
.
sched_priority
)
{
*
priority
=
ThreadPriority
:
:
REALTIME_AUDIO
;
return
true
;
}
return
false
;
}
}
void
InitThreading
(
)
{
}
void
TerminateOnThread
(
)
{
}
size_t
GetDefaultThreadStackSize
(
const
pthread_attr_t
&
attributes
)
{
#
if
!
defined
(
THREAD_SANITIZER
)
return
0
;
#
else
return
2
*
(
1
<
<
23
)
;
#
endif
}
}
