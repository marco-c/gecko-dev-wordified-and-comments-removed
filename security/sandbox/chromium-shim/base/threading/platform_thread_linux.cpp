#
include
"
base
/
threading
/
platform_thread
.
h
"
#
include
"
base
/
message_loop
/
message_pump_type
.
h
"
#
include
"
base
/
threading
/
platform_thread_internal_posix
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
namespace
base
{
namespace
internal
{
const
ThreadPriorityToNiceValuePairForTest
kThreadPriorityToNiceValueMapForTest
[
7
]
=
{
{
ThreadPriorityForTest
:
:
kRealtimeAudio
-
10
}
{
ThreadPriorityForTest
:
:
kDisplay
-
8
}
{
ThreadPriorityForTest
:
:
kNormal
0
}
{
ThreadPriorityForTest
:
:
kResourceEfficient
1
}
{
ThreadPriorityForTest
:
:
kUtility
2
}
{
ThreadPriorityForTest
:
:
kBackground
10
}
}
;
const
ThreadTypeToNiceValuePair
kThreadTypeToNiceValueMap
[
7
]
=
{
{
ThreadType
:
:
kBackground
10
}
{
ThreadType
:
:
kUtility
2
}
{
ThreadType
:
:
kResourceEfficient
1
}
{
ThreadType
:
:
kDefault
0
}
#
if
BUILDFLAG
(
IS_CHROMEOS
)
{
ThreadType
:
:
kCompositing
-
8
}
#
else
{
ThreadType
:
:
kCompositing
-
1
}
#
endif
{
ThreadType
:
:
kDisplayCritical
-
8
}
{
ThreadType
:
:
kRealtimeAudio
-
10
}
}
;
bool
SetCurrentThreadTypeForPlatform
(
ThreadType
thread_type
MessagePumpType
pump_type_hint
)
{
MOZ_CRASH
(
)
;
}
absl
:
:
optional
<
ThreadPriorityForTest
>
GetCurrentThreadPriorityForPlatformForTest
(
)
{
int
maybe_sched_rr
=
0
;
struct
sched_param
maybe_realtime_prio
=
{
0
}
;
if
(
pthread_getschedparam
(
pthread_self
(
)
&
maybe_sched_rr
&
maybe_realtime_prio
)
=
=
0
&
&
maybe_sched_rr
=
=
SCHED_RR
&
&
maybe_realtime_prio
.
sched_priority
=
=
PlatformThreadLinux
:
:
kRealTimeAudioPrio
.
sched_priority
)
{
return
absl
:
:
make_optional
(
ThreadPriorityForTest
:
:
kRealtimeAudio
)
;
}
return
absl
:
:
nullopt
;
}
}
void
InitThreading
(
)
{
}
void
TerminateOnThread
(
)
{
}
size_t
GetDefaultThreadStackSize
(
const
pthread_attr_t
&
attributes
)
{
#
if
!
defined
(
THREAD_SANITIZER
)
return
0
;
#
else
return
2
*
(
1
<
<
23
)
;
#
endif
}
}
