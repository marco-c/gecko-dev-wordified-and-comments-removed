#
ifndef
BASE_FEATURE_LIST_H_
#
define
BASE_FEATURE_LIST_H_
namespace
base
{
enum
FeatureState
{
FEATURE_DISABLED_BY_DEFAULT
FEATURE_ENABLED_BY_DEFAULT
}
;
#
define
BASE_DECLARE_FEATURE
(
kFeature
)
\
extern
CONSTINIT
const
base
:
:
Feature
kFeature
#
define
BASE_FEATURE
(
feature
name
default_state
)
\
CONSTINIT
const
base
:
:
Feature
feature
(
\
name
default_state
base
:
:
internal
:
:
FeatureMacroHandshake
:
:
kSecret
)
#
define
BASE_DECLARE_FEATURE_PARAM
(
T
feature_object_name
)
\
extern
CONSTINIT
const
base
:
:
FeatureParam
<
T
>
feature_object_name
#
define
BASE_FEATURE_PARAM
(
T
feature_object_name
feature
name
\
default_value
)
\
namespace
field_trial_params_internal
{
\
T
GetFeatureParamWithCacheFor
#
#
feature_object_name
(
\
const
base
:
:
FeatureParam
<
T
>
*
feature_param
)
{
\
static
const
typename
base
:
:
internal
:
:
FeatureParamTraits
<
\
T
>
:
:
CacheStorageType
storage
=
\
base
:
:
internal
:
:
FeatureParamTraits
<
T
>
:
:
ToCacheStorageType
(
\
feature_param
-
>
GetWithoutCache
(
)
)
;
\
return
base
:
:
internal
:
:
FeatureParamTraits
<
T
>
:
:
FromCacheStorageType
(
\
storage
)
;
\
}
\
}
/
*
field_trial_params_internal
*
/
\
CONSTINIT
const
base
:
:
FeatureParam
<
T
>
feature_object_name
(
\
feature
name
default_value
\
&
field_trial_params_internal
:
:
\
GetFeatureParamWithCacheFor
#
#
feature_object_name
)
#
define
BASE_FEATURE_ENUM_PARAM
(
T
feature_object_name
feature
name
\
default_value
options
)
\
namespace
field_trial_params_internal
{
\
T
GetFeatureParamWithCacheFor
#
#
feature_object_name
(
\
const
base
:
:
FeatureParam
<
T
>
*
feature_param
)
{
\
static
const
T
param
=
feature_param
-
>
GetWithoutCache
(
)
;
\
return
param
;
\
}
\
}
/
*
field_trial_params_internal
*
/
\
CONSTINIT
const
base
:
:
FeatureParam
<
T
>
feature_object_name
(
\
feature
name
default_value
options
\
&
field_trial_params_internal
:
:
\
GetFeatureParamWithCacheFor
#
#
feature_object_name
)
namespace
internal
{
enum
class
FeatureMacroHandshake
{
kSecret
}
;
}
struct
BASE_EXPORT
Feature
{
constexpr
Feature
(
const
char
*
name
FeatureState
default_state
internal
:
:
FeatureMacroHandshake
)
:
name
(
name
)
default_state
(
default_state
)
{
}
Feature
(
const
Feature
&
)
=
delete
;
Feature
&
operator
=
(
const
Feature
&
)
=
delete
;
const
char
*
const
name
;
const
FeatureState
default_state
;
}
;
class
BASE_EXPORT
FeatureList
{
public
:
static
bool
IsEnabled
(
const
Feature
&
feature
)
{
return
feature
.
default_state
=
=
FEATURE_ENABLED_BY_DEFAULT
;
}
static
FeatureList
*
GetInstance
(
)
{
return
nullptr
;
}
FeatureList
(
const
FeatureList
&
)
=
delete
;
FeatureList
&
operator
=
(
const
FeatureList
&
)
=
delete
;
}
;
}
#
endif
