#
include
"
base
/
files
/
file_path
.
h
"
namespace
base
{
using
StringType
=
FilePath
:
:
StringType
;
using
StringPieceType
=
FilePath
:
:
StringPieceType
;
namespace
{
const
FilePath
:
:
CharType
kStringTerminator
=
FILE_PATH_LITERAL
(
'
\
0
'
)
;
StringPieceType
:
:
size_type
FindDriveLetter
(
StringPieceType
path
)
{
#
if
defined
(
FILE_PATH_USES_DRIVE_LETTERS
)
if
(
path
.
length
(
)
>
=
2
&
&
path
[
1
]
=
=
L
'
:
'
&
&
(
(
path
[
0
]
>
=
L
'
A
'
&
&
path
[
0
]
<
=
L
'
Z
'
)
|
|
(
path
[
0
]
>
=
L
'
a
'
&
&
path
[
0
]
<
=
L
'
z
'
)
)
)
{
return
1
;
}
#
endif
return
StringType
:
:
npos
;
}
bool
IsPathAbsolute
(
StringPieceType
path
)
{
#
if
defined
(
FILE_PATH_USES_DRIVE_LETTERS
)
StringType
:
:
size_type
letter
=
FindDriveLetter
(
path
)
;
if
(
letter
!
=
StringType
:
:
npos
)
{
return
path
.
length
(
)
>
letter
+
1
&
&
FilePath
:
:
IsSeparator
(
path
[
letter
+
1
]
)
;
}
return
path
.
length
(
)
>
1
&
&
FilePath
:
:
IsSeparator
(
path
[
0
]
)
&
&
FilePath
:
:
IsSeparator
(
path
[
1
]
)
;
#
else
return
path
.
length
(
)
>
0
&
&
FilePath
:
:
IsSeparator
(
path
[
0
]
)
;
#
endif
}
}
FilePath
:
:
FilePath
(
)
=
default
;
FilePath
:
:
FilePath
(
const
FilePath
&
that
)
=
default
;
FilePath
:
:
FilePath
(
FilePath
&
&
that
)
noexcept
=
default
;
FilePath
:
:
FilePath
(
StringPieceType
path
)
:
path_
(
path
)
{
StringType
:
:
size_type
nul_pos
=
path_
.
find
(
kStringTerminator
)
;
if
(
nul_pos
!
=
StringType
:
:
npos
)
path_
.
erase
(
nul_pos
StringType
:
:
npos
)
;
}
FilePath
:
:
~
FilePath
(
)
=
default
;
FilePath
&
FilePath
:
:
operator
=
(
const
FilePath
&
that
)
=
default
;
FilePath
&
FilePath
:
:
operator
=
(
FilePath
&
&
that
)
noexcept
=
default
;
bool
FilePath
:
:
IsSeparator
(
CharType
character
)
{
for
(
size_t
i
=
0
;
i
<
kSeparatorsLength
-
1
;
+
+
i
)
{
if
(
character
=
=
kSeparators
[
i
]
)
{
return
true
;
}
}
return
false
;
}
FilePath
FilePath
:
:
DirName
(
)
const
{
FilePath
new_path
(
path_
)
;
new_path
.
StripTrailingSeparatorsInternal
(
)
;
StringType
:
:
size_type
letter
=
FindDriveLetter
(
new_path
.
path_
)
;
StringType
:
:
size_type
last_separator
=
new_path
.
path_
.
find_last_of
(
kSeparators
StringType
:
:
npos
kSeparatorsLength
-
1
)
;
if
(
last_separator
=
=
StringType
:
:
npos
)
{
new_path
.
path_
.
resize
(
letter
+
1
)
;
}
else
if
(
last_separator
=
=
letter
+
1
)
{
new_path
.
path_
.
resize
(
letter
+
2
)
;
}
else
if
(
last_separator
=
=
letter
+
2
&
&
IsSeparator
(
new_path
.
path_
[
letter
+
1
]
)
)
{
new_path
.
path_
.
resize
(
letter
+
3
)
;
}
else
if
(
last_separator
!
=
0
)
{
new_path
.
path_
.
resize
(
last_separator
)
;
}
new_path
.
StripTrailingSeparatorsInternal
(
)
;
if
(
!
new_path
.
path_
.
length
(
)
)
new_path
.
path_
=
kCurrentDirectory
;
return
new_path
;
}
FilePath
FilePath
:
:
BaseName
(
)
const
{
FilePath
new_path
(
path_
)
;
new_path
.
StripTrailingSeparatorsInternal
(
)
;
StringType
:
:
size_type
letter
=
FindDriveLetter
(
new_path
.
path_
)
;
if
(
letter
!
=
StringType
:
:
npos
)
{
new_path
.
path_
.
erase
(
0
letter
+
1
)
;
}
StringType
:
:
size_type
last_separator
=
new_path
.
path_
.
find_last_of
(
kSeparators
StringType
:
:
npos
kSeparatorsLength
-
1
)
;
if
(
last_separator
!
=
StringType
:
:
npos
&
&
last_separator
<
new_path
.
path_
.
length
(
)
-
1
)
{
new_path
.
path_
.
erase
(
0
last_separator
+
1
)
;
}
return
new_path
;
}
FilePath
FilePath
:
:
Append
(
StringPieceType
component
)
const
{
StringPieceType
appended
=
component
;
StringType
without_nuls
;
StringType
:
:
size_type
nul_pos
=
component
.
find
(
kStringTerminator
)
;
if
(
nul_pos
!
=
StringPieceType
:
:
npos
)
{
without_nuls
=
StringType
(
component
.
substr
(
0
nul_pos
)
)
;
appended
=
StringPieceType
(
without_nuls
)
;
}
DCHECK
(
!
IsPathAbsolute
(
appended
)
)
;
if
(
path_
.
compare
(
kCurrentDirectory
)
=
=
0
&
&
!
appended
.
empty
(
)
)
{
return
FilePath
(
appended
)
;
}
FilePath
new_path
(
path_
)
;
new_path
.
StripTrailingSeparatorsInternal
(
)
;
if
(
!
appended
.
empty
(
)
&
&
!
new_path
.
path_
.
empty
(
)
)
{
if
(
!
IsSeparator
(
new_path
.
path_
.
back
(
)
)
)
{
if
(
FindDriveLetter
(
new_path
.
path_
)
+
1
!
=
new_path
.
path_
.
length
(
)
)
{
new_path
.
path_
.
append
(
1
kSeparators
[
0
]
)
;
}
}
}
new_path
.
path_
.
append
(
appended
.
data
(
)
appended
.
size
(
)
)
;
return
new_path
;
}
FilePath
FilePath
:
:
Append
(
const
FilePath
&
component
)
const
{
return
Append
(
component
.
value
(
)
)
;
}
void
FilePath
:
:
StripTrailingSeparatorsInternal
(
)
{
StringType
:
:
size_type
start
=
FindDriveLetter
(
path_
)
+
2
;
StringType
:
:
size_type
last_stripped
=
StringType
:
:
npos
;
for
(
StringType
:
:
size_type
pos
=
path_
.
length
(
)
;
pos
>
start
&
&
IsSeparator
(
path_
[
pos
-
1
]
)
;
-
-
pos
)
{
if
(
pos
!
=
start
+
1
|
|
last_stripped
=
=
start
+
2
|
|
!
IsSeparator
(
path_
[
start
-
1
]
)
)
{
path_
.
resize
(
pos
-
1
)
;
last_stripped
=
pos
;
}
}
}
}
