#
ifndef
mozilla_sandboxing_permissionsService_h
#
define
mozilla_sandboxing_permissionsService_h
#
include
<
unordered_map
>
namespace
mozilla
{
namespace
sandboxing
{
class
PermissionsService
{
public
:
static
PermissionsService
*
GetInstance
(
)
;
virtual
void
GrantFileAccess
(
uint32_t
aProcessId
const
wchar_t
*
aFilename
bool
aPermitWrite
)
;
typedef
void
(
*
FileAccessViolationFunc
)
(
bool
)
;
virtual
void
SetFileAccessViolationFunc
(
FileAccessViolationFunc
aFavFunc
)
;
virtual
bool
UserGrantedFileAccess
(
uint32_t
aProcessId
const
wchar_t
*
aFilename
uint32_t
aAccess
uint32_t
aDisposition
)
;
virtual
void
RemovePermissionsForProcess
(
uint32_t
aProcessId
)
;
private
:
PermissionsService
(
)
;
void
ReportBlockedFile
(
bool
aNeedsWrite
)
;
typedef
std
:
:
unordered_map
<
std
:
:
wstring
bool
>
FilePermissionMap
;
typedef
std
:
:
unordered_map
<
uint32_t
FilePermissionMap
>
ProcessFilePermissionMap
;
ProcessFilePermissionMap
mProcessFilePermissions
;
FileAccessViolationFunc
mFileAccessViolationFunc
;
}
;
}
}
#
endif
