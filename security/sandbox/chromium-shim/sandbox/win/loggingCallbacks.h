#
ifndef
security_sandbox_loggingCallbacks_h__
#
define
security_sandbox_loggingCallbacks_h__
#
include
<
sstream
>
#
include
<
iostream
>
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
sandboxing
/
loggingTypes
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
StackWalk
.
h
"
namespace
mozilla
{
static
LazyLogModule
sSandboxTargetLog
(
"
SandboxTarget
"
)
;
#
define
LOG_D
(
.
.
.
)
MOZ_LOG
(
sSandboxTargetLog
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
namespace
sandboxing
{
static
uint32_t
sStackTraceDepth
=
0
;
static
void
StackFrameToOStringStream
(
uint32_t
aFrameNumber
void
*
aPC
void
*
aSP
void
*
aClosure
)
{
std
:
:
ostringstream
*
stream
=
static_cast
<
std
:
:
ostringstream
*
>
(
aClosure
)
;
MozCodeAddressDetails
details
;
char
buf
[
1024
]
;
MozDescribeCodeAddress
(
aPC
&
details
)
;
MozFormatCodeAddressDetails
(
buf
sizeof
(
buf
)
aFrameNumber
aPC
&
details
)
;
*
stream
<
<
std
:
:
endl
<
<
"
-
-
"
<
<
buf
;
stream
-
>
flush
(
)
;
}
static
void
Log
(
const
char
*
aMessageType
const
char
*
aFunctionName
const
char
*
aContext
const
bool
aShouldLogStackTrace
=
false
uint32_t
aFramesToSkip
=
0
)
{
std
:
:
ostringstream
msgStream
;
msgStream
<
<
"
Process
Sandbox
"
<
<
aMessageType
<
<
"
:
"
<
<
aFunctionName
;
if
(
aContext
)
{
msgStream
<
<
"
for
:
"
<
<
aContext
;
}
if
(
aShouldLogStackTrace
)
{
if
(
sStackTraceDepth
)
{
msgStream
<
<
std
:
:
endl
<
<
"
Stack
Trace
:
"
;
MozStackWalk
(
StackFrameToOStringStream
aFramesToSkip
sStackTraceDepth
&
msgStream
0
nullptr
)
;
}
}
std
:
:
string
msg
=
msgStream
.
str
(
)
;
#
if
defined
(
DEBUG
)
NS_DebugBreak
(
NS_DEBUG_WARNING
nullptr
msg
.
c_str
(
)
nullptr
-
1
)
;
#
endif
if
(
nsContentUtils
:
:
IsInitialized
(
)
)
{
nsContentUtils
:
:
LogMessageToConsole
(
msg
.
c_str
(
)
)
;
}
LOG_D
(
"
%
s
"
msg
.
c_str
(
)
)
;
}
static
void
InitLoggingIfRequired
(
ProvideLogFunctionCb
aProvideLogFunctionCb
)
{
if
(
!
aProvideLogFunctionCb
)
{
return
;
}
if
(
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
logging
.
enabled
"
)
|
|
PR_GetEnv
(
"
MOZ_SANDBOX_LOGGING
"
)
)
{
aProvideLogFunctionCb
(
Log
)
;
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
if
(
XRE_IsContentProcess
(
)
)
{
Preferences
:
:
AddUintVarCache
(
&
sStackTraceDepth
"
security
.
sandbox
.
windows
.
log
.
stackTraceDepth
"
)
;
}
#
endif
}
}
}
}
#
endif
