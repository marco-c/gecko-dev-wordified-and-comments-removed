#
include
"
sandbox
/
win
/
src
/
line_break_dispatcher
.
h
"
#
include
"
sandbox
/
win
/
src
/
line_break_common
.
h
"
#
include
"
sandbox
/
win
/
src
/
line_break_policy
.
h
"
#
include
"
sandbox
/
win
/
src
/
ipc_tags
.
h
"
#
include
"
sandbox
/
win
/
src
/
policy_params
.
h
"
namespace
sandbox
{
LineBreakDispatcher
:
:
LineBreakDispatcher
(
PolicyBase
*
policy_base
)
:
policy_base_
(
policy_base
)
{
static
const
IPCCall
get_complex_line_breaks
=
{
{
IpcTag
:
:
GETCOMPLEXLINEBREAKS
{
INPTR_TYPE
UINT32_TYPE
INOUTPTR_TYPE
}
}
reinterpret_cast
<
CallbackGeneric
>
(
&
LineBreakDispatcher
:
:
GetComplexLineBreaksCall
)
}
;
ipc_calls_
.
push_back
(
get_complex_line_breaks
)
;
}
bool
LineBreakDispatcher
:
:
SetupService
(
InterceptionManager
*
manager
IpcTag
service
)
{
switch
(
service
)
{
case
IpcTag
:
:
GETCOMPLEXLINEBREAKS
:
return
true
;
default
:
return
false
;
}
}
bool
LineBreakDispatcher
:
:
GetComplexLineBreaksCall
(
IPCInfo
*
ipc
CountedBuffer
*
text_buf
uint32_t
length
CountedBuffer
*
break_before_buf
)
{
if
(
length
>
kMaxBrokeredLen
|
|
text_buf
-
>
Size
(
)
!
=
length
*
sizeof
(
wchar_t
)
|
|
break_before_buf
-
>
Size
(
)
!
=
length
)
{
return
false
;
}
CountedParameterSet
<
EmptyParams
>
params
;
EvalResult
eval
=
policy_base_
-
>
EvalPolicy
(
IpcTag
:
:
GETCOMPLEXLINEBREAKS
params
.
GetBase
(
)
)
;
auto
*
text
=
static_cast
<
wchar_t
*
>
(
text_buf
-
>
Buffer
(
)
)
;
auto
*
break_before
=
static_cast
<
uint8_t
*
>
(
break_before_buf
-
>
Buffer
(
)
)
;
ipc
-
>
return_info
.
win32_result
=
LineBreakPolicy
:
:
GetComplexLineBreaksProxyAction
(
eval
text
length
break_before
)
;
return
true
;
}
}
