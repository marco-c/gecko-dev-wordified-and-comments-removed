#
ifndef
BASE_SYNCHRONIZATION_LOCK_IMPL_H_
#
define
BASE_SYNCHRONIZATION_LOCK_IMPL_H_
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_WIN
)
#
include
<
windows
.
h
>
#
elif
defined
(
OS_POSIX
)
#
include
<
pthread
.
h
>
#
endif
namespace
base
{
namespace
internal
{
class
BASE_EXPORT
LockImpl
{
public
:
#
if
defined
(
OS_WIN
)
using
NativeHandle
=
SRWLOCK
;
#
elif
defined
(
OS_POSIX
)
using
NativeHandle
=
pthread_mutex_t
;
#
endif
LockImpl
(
)
;
~
LockImpl
(
)
;
bool
Try
(
)
;
void
Lock
(
)
;
void
Unlock
(
)
;
NativeHandle
*
native_handle
(
)
{
return
&
native_handle_
;
}
#
if
defined
(
OS_POSIX
)
static
bool
PriorityInheritanceAvailable
(
)
;
#
endif
private
:
NativeHandle
native_handle_
;
DISALLOW_COPY_AND_ASSIGN
(
LockImpl
)
;
}
;
}
}
#
endif
