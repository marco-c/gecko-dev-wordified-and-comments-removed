#
ifndef
BASE_SYNCHRONIZATION_CONDITION_VARIABLE_H_
#
define
BASE_SYNCHRONIZATION_CONDITION_VARIABLE_H_
#
include
"
base
/
dcheck_is_on
.
h
"
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
#
include
<
pthread
.
h
>
#
endif
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
synchronization
/
lock
.
h
"
#
if
BUILDFLAG
(
IS_WIN
)
#
include
"
base
/
win
/
windows_types
.
h
"
#
endif
namespace
base
{
class
TimeDelta
;
class
BASE_EXPORT
ConditionVariable
{
public
:
explicit
ConditionVariable
(
Lock
*
user_lock
)
;
ConditionVariable
(
const
ConditionVariable
&
)
=
delete
;
ConditionVariable
&
operator
=
(
const
ConditionVariable
&
)
=
delete
;
~
ConditionVariable
(
)
;
#
if
BUILDFLAG
(
IS_APPLE
)
static
void
InitializeFeatures
(
)
;
#
endif
NOT_TAIL_CALLED
void
Wait
(
)
;
NOT_TAIL_CALLED
void
TimedWait
(
const
TimeDelta
&
max_time
)
;
void
Broadcast
(
)
;
void
Signal
(
)
;
void
declare_only_used_while_idle
(
)
{
waiting_is_blocking_
=
false
;
}
private
:
#
if
BUILDFLAG
(
IS_WIN
)
CHROME_CONDITION_VARIABLE
cv_
;
const
raw_ptr
<
CHROME_SRWLOCK
>
srwlock_
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
pthread_cond_t
condition_
;
raw_ptr
<
pthread_mutex_t
>
user_mutex_
;
#
endif
#
if
DCHECK_IS_ON
(
)
const
raw_ptr
<
base
:
:
Lock
>
user_lock_
;
#
endif
bool
waiting_is_blocking_
=
true
;
}
;
}
#
endif
