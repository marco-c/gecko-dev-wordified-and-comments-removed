#
ifndef
BASE_SYNCHRONIZATION_LOCK_H_
#
define
BASE_SYNCHRONIZATION_LOCK_H_
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
synchronization
/
lock_impl
.
h
"
#
include
"
base
/
thread_annotations
.
h
"
#
include
"
base
/
threading
/
platform_thread
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
class
LOCKABLE
BASE_EXPORT
Lock
{
public
:
#
if
!
DCHECK_IS_ON
(
)
Lock
(
)
:
lock_
(
)
{
}
~
Lock
(
)
{
}
void
Acquire
(
)
{
lock_
.
Lock
(
)
;
}
void
Release
(
)
{
lock_
.
Unlock
(
)
;
}
bool
Try
(
)
{
return
lock_
.
Try
(
)
;
}
void
AssertAcquired
(
)
const
ASSERT_EXCLUSIVE_LOCK
(
)
{
}
#
else
Lock
(
)
;
~
Lock
(
)
;
void
Acquire
(
)
{
lock_
.
Lock
(
)
;
CheckUnheldAndMark
(
)
;
}
void
Release
(
)
{
CheckHeldAndUnmark
(
)
;
lock_
.
Unlock
(
)
;
}
bool
Try
(
)
{
bool
rv
=
lock_
.
Try
(
)
;
if
(
rv
)
{
CheckUnheldAndMark
(
)
;
}
return
rv
;
}
void
AssertAcquired
(
)
const
ASSERT_EXCLUSIVE_LOCK
(
)
;
#
endif
static
bool
HandlesMultipleThreadPriorities
(
)
{
#
if
defined
(
OS_WIN
)
return
true
;
#
elif
defined
(
OS_POSIX
)
|
|
defined
(
OS_FUCHSIA
)
return
internal
:
:
LockImpl
:
:
PriorityInheritanceAvailable
(
)
;
#
else
#
error
Unsupported
platform
#
endif
}
friend
class
ConditionVariable
;
private
:
#
if
DCHECK_IS_ON
(
)
void
CheckHeldAndUnmark
(
)
;
void
CheckUnheldAndMark
(
)
;
base
:
:
PlatformThreadRef
owning_thread_ref_
;
#
endif
internal
:
:
LockImpl
lock_
;
DISALLOW_COPY_AND_ASSIGN
(
Lock
)
;
}
;
using
AutoLock
=
internal
:
:
BasicAutoLock
<
Lock
>
;
using
AutoUnlock
=
internal
:
:
BasicAutoUnlock
<
Lock
>
;
using
AutoLockMaybe
=
internal
:
:
BasicAutoLockMaybe
<
Lock
>
;
using
ReleasableAutoLock
=
internal
:
:
BasicReleasableAutoLock
<
Lock
>
;
}
#
endif
