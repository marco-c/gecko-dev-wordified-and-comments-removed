#
ifndef
BASE_SYNCHRONIZATION_ATOMIC_FLAG_H_
#
define
BASE_SYNCHRONIZATION_ATOMIC_FLAG_H_
#
include
<
stdint
.
h
>
#
include
<
atomic
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
sequence_checker
.
h
"
namespace
base
{
class
BASE_EXPORT
AtomicFlag
{
public
:
AtomicFlag
(
)
;
AtomicFlag
(
const
AtomicFlag
&
)
=
delete
;
AtomicFlag
&
operator
=
(
const
AtomicFlag
&
)
=
delete
;
~
AtomicFlag
(
)
;
void
Set
(
)
;
bool
IsSet
(
)
const
{
return
flag_
.
load
(
std
:
:
memory_order_acquire
)
!
=
0
;
}
void
UnsafeResetForTesting
(
)
;
private
:
std
:
:
atomic
<
uint_fast8_t
>
flag_
{
0
}
;
SEQUENCE_CHECKER
(
set_sequence_checker_
)
;
}
;
}
#
endif
