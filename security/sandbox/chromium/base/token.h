#
ifndef
BASE_TOKEN_H_
#
define
BASE_TOKEN_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
tuple
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
containers
/
span
.
h
"
#
include
"
base
/
strings
/
string_piece_forward
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
base
{
class
BASE_EXPORT
Token
{
public
:
constexpr
Token
(
)
=
default
;
constexpr
Token
(
uint64_t
high
uint64_t
low
)
:
words_
{
high
low
}
{
}
constexpr
Token
(
const
Token
&
)
=
default
;
constexpr
Token
&
operator
=
(
const
Token
&
)
=
default
;
constexpr
Token
(
Token
&
&
)
noexcept
=
default
;
constexpr
Token
&
operator
=
(
Token
&
&
)
=
default
;
static
Token
CreateRandom
(
)
;
constexpr
uint64_t
high
(
)
const
{
return
words_
[
0
]
;
}
constexpr
uint64_t
low
(
)
const
{
return
words_
[
1
]
;
}
constexpr
bool
is_zero
(
)
const
{
return
words_
[
0
]
=
=
0
&
&
words_
[
1
]
=
=
0
;
}
span
<
const
uint8_t
16
>
AsBytes
(
)
const
{
return
as_bytes
(
make_span
(
words_
)
)
;
}
constexpr
bool
operator
=
=
(
const
Token
&
other
)
const
{
return
words_
[
0
]
=
=
other
.
words_
[
0
]
&
&
words_
[
1
]
=
=
other
.
words_
[
1
]
;
}
constexpr
bool
operator
!
=
(
const
Token
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
constexpr
bool
operator
<
(
const
Token
&
other
)
const
{
return
std
:
:
tie
(
words_
[
0
]
words_
[
1
]
)
<
std
:
:
tie
(
other
.
words_
[
0
]
other
.
words_
[
1
]
)
;
}
std
:
:
string
ToString
(
)
const
;
static
absl
:
:
optional
<
Token
>
FromString
(
StringPiece
string_representation
)
;
private
:
uint64_t
words_
[
2
]
=
{
0
0
}
;
}
;
struct
BASE_EXPORT
TokenHash
{
size_t
operator
(
)
(
const
Token
&
token
)
const
;
}
;
class
Pickle
;
class
PickleIterator
;
BASE_EXPORT
void
WriteTokenToPickle
(
Pickle
*
pickle
const
Token
&
token
)
;
BASE_EXPORT
absl
:
:
optional
<
Token
>
ReadTokenFromPickle
(
PickleIterator
*
pickle_iterator
)
;
}
#
endif
