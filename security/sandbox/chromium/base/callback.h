#
ifndef
BASE_CALLBACK_H_
#
define
BASE_CALLBACK_H_
#
include
"
base
/
callback_forward
.
h
"
#
include
"
base
/
callback_internal
.
h
"
namespace
base
{
template
<
typename
R
typename
.
.
.
Args
>
class
OnceCallback
<
R
(
Args
.
.
.
)
>
:
public
internal
:
:
CallbackBase
{
public
:
using
RunType
=
R
(
Args
.
.
.
)
;
using
PolymorphicInvoke
=
R
(
*
)
(
internal
:
:
BindStateBase
*
Args
&
&
.
.
.
)
;
OnceCallback
(
)
:
internal
:
:
CallbackBase
(
nullptr
)
{
}
explicit
OnceCallback
(
internal
:
:
BindStateBase
*
bind_state
)
:
internal
:
:
CallbackBase
(
bind_state
)
{
}
OnceCallback
(
const
OnceCallback
&
)
=
delete
;
OnceCallback
&
operator
=
(
const
OnceCallback
&
)
=
delete
;
OnceCallback
(
OnceCallback
&
&
)
=
default
;
OnceCallback
&
operator
=
(
OnceCallback
&
&
)
=
default
;
OnceCallback
(
RepeatingCallback
<
RunType
>
other
)
:
internal
:
:
CallbackBase
(
std
:
:
move
(
other
)
)
{
}
OnceCallback
&
operator
=
(
RepeatingCallback
<
RunType
>
other
)
{
static_cast
<
internal
:
:
CallbackBase
&
>
(
*
this
)
=
std
:
:
move
(
other
)
;
return
*
this
;
}
bool
Equals
(
const
OnceCallback
&
other
)
const
{
return
EqualsInternal
(
other
)
;
}
R
Run
(
Args
.
.
.
args
)
const
&
{
static_assert
(
!
sizeof
(
*
this
)
"
OnceCallback
:
:
Run
(
)
may
only
be
invoked
on
a
non
-
const
"
"
rvalue
i
.
e
.
std
:
:
move
(
callback
)
.
Run
(
)
.
"
)
;
NOTREACHED
(
)
;
}
R
Run
(
Args
.
.
.
args
)
&
&
{
OnceCallback
cb
=
std
:
:
move
(
*
this
)
;
PolymorphicInvoke
f
=
reinterpret_cast
<
PolymorphicInvoke
>
(
cb
.
polymorphic_invoke
(
)
)
;
return
f
(
cb
.
bind_state_
.
get
(
)
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
}
;
template
<
typename
R
typename
.
.
.
Args
>
class
RepeatingCallback
<
R
(
Args
.
.
.
)
>
:
public
internal
:
:
CallbackBaseCopyable
{
public
:
using
RunType
=
R
(
Args
.
.
.
)
;
using
PolymorphicInvoke
=
R
(
*
)
(
internal
:
:
BindStateBase
*
Args
&
&
.
.
.
)
;
RepeatingCallback
(
)
:
internal
:
:
CallbackBaseCopyable
(
nullptr
)
{
}
explicit
RepeatingCallback
(
internal
:
:
BindStateBase
*
bind_state
)
:
internal
:
:
CallbackBaseCopyable
(
bind_state
)
{
}
RepeatingCallback
(
const
RepeatingCallback
&
)
=
default
;
RepeatingCallback
&
operator
=
(
const
RepeatingCallback
&
)
=
default
;
RepeatingCallback
(
RepeatingCallback
&
&
)
=
default
;
RepeatingCallback
&
operator
=
(
RepeatingCallback
&
&
)
=
default
;
bool
Equals
(
const
RepeatingCallback
&
other
)
const
{
return
EqualsInternal
(
other
)
;
}
R
Run
(
Args
.
.
.
args
)
const
&
{
PolymorphicInvoke
f
=
reinterpret_cast
<
PolymorphicInvoke
>
(
this
-
>
polymorphic_invoke
(
)
)
;
return
f
(
this
-
>
bind_state_
.
get
(
)
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
R
Run
(
Args
.
.
.
args
)
&
&
{
RepeatingCallback
cb
=
std
:
:
move
(
*
this
)
;
PolymorphicInvoke
f
=
reinterpret_cast
<
PolymorphicInvoke
>
(
cb
.
polymorphic_invoke
(
)
)
;
return
f
(
cb
.
bind_state_
.
get
(
)
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
}
;
}
#
endif
