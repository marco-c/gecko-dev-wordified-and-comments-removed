#
ifndef
BASE_TUPLE_H_
#
define
BASE_TUPLE_H_
#
include
<
stddef
.
h
>
#
include
<
tuple
>
#
include
"
build
/
build_config
.
h
"
namespace
base
{
template
<
size_t
.
.
.
>
struct
IndexSequence
{
}
;
template
<
size_t
.
.
.
Ns
>
struct
MakeIndexSequenceImpl
;
template
<
size_t
.
.
.
Ns
>
struct
MakeIndexSequenceImpl
<
0
Ns
.
.
.
>
{
using
Type
=
IndexSequence
<
Ns
.
.
.
>
;
}
;
template
<
size_t
N
size_t
.
.
.
Ns
>
struct
MakeIndexSequenceImpl
<
N
Ns
.
.
.
>
:
MakeIndexSequenceImpl
<
N
-
1
N
-
1
Ns
.
.
.
>
{
}
;
template
<
size_t
N
>
using
MakeIndexSequence
=
typename
MakeIndexSequenceImpl
<
N
>
:
:
Type
;
template
<
typename
T
>
using
MakeIndexSequenceForTuple
=
MakeIndexSequence
<
std
:
:
tuple_size
<
typename
std
:
:
decay
<
T
>
:
:
type
>
:
:
value
>
;
template
<
typename
ObjT
typename
Method
typename
Tuple
size_t
.
.
.
Ns
>
inline
void
DispatchToMethodImpl
(
const
ObjT
&
obj
Method
method
Tuple
&
&
args
IndexSequence
<
Ns
.
.
.
>
)
{
(
obj
-
>
*
method
)
(
std
:
:
get
<
Ns
>
(
std
:
:
forward
<
Tuple
>
(
args
)
)
.
.
.
)
;
}
template
<
typename
ObjT
typename
Method
typename
Tuple
>
inline
void
DispatchToMethod
(
const
ObjT
&
obj
Method
method
Tuple
&
&
args
)
{
DispatchToMethodImpl
(
obj
method
std
:
:
forward
<
Tuple
>
(
args
)
MakeIndexSequenceForTuple
<
Tuple
>
(
)
)
;
}
template
<
typename
Function
typename
Tuple
size_t
.
.
.
Ns
>
inline
void
DispatchToFunctionImpl
(
Function
function
Tuple
&
&
args
IndexSequence
<
Ns
.
.
.
>
)
{
(
*
function
)
(
std
:
:
get
<
Ns
>
(
std
:
:
forward
<
Tuple
>
(
args
)
)
.
.
.
)
;
}
template
<
typename
Function
typename
Tuple
>
inline
void
DispatchToFunction
(
Function
function
Tuple
&
&
args
)
{
DispatchToFunctionImpl
(
function
std
:
:
forward
<
Tuple
>
(
args
)
MakeIndexSequenceForTuple
<
Tuple
>
(
)
)
;
}
template
<
typename
ObjT
typename
Method
typename
InTuple
typename
OutTuple
size_t
.
.
.
InNs
size_t
.
.
.
OutNs
>
inline
void
DispatchToMethodImpl
(
const
ObjT
&
obj
Method
method
InTuple
&
&
in
OutTuple
*
out
IndexSequence
<
InNs
.
.
.
>
IndexSequence
<
OutNs
.
.
.
>
)
{
(
obj
-
>
*
method
)
(
std
:
:
get
<
InNs
>
(
std
:
:
forward
<
InTuple
>
(
in
)
)
.
.
.
&
std
:
:
get
<
OutNs
>
(
*
out
)
.
.
.
)
;
}
template
<
typename
ObjT
typename
Method
typename
InTuple
typename
OutTuple
>
inline
void
DispatchToMethod
(
const
ObjT
&
obj
Method
method
InTuple
&
&
in
OutTuple
*
out
)
{
DispatchToMethodImpl
(
obj
method
std
:
:
forward
<
InTuple
>
(
in
)
out
MakeIndexSequenceForTuple
<
InTuple
>
(
)
MakeIndexSequenceForTuple
<
OutTuple
>
(
)
)
;
}
}
#
endif
