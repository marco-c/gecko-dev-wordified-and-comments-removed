#
ifndef
BASE_PROCESS_MEMORY_H_
#
define
BASE_PROCESS_MEMORY_H_
#
include
<
stddef
.
h
>
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
oom
.
h
"
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
process
/
process_handle
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
BASE_EXPORT
void
EnableTerminationOnHeapCorruption
(
)
;
BASE_EXPORT
void
EnableTerminationOnOutOfMemory
(
)
;
using
partition_alloc
:
:
TerminateBecauseOutOfMemory
;
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
|
|
\
BUILDFLAG
(
IS_AIX
)
const
int
kMaxOomScore
=
1000
;
BASE_EXPORT
bool
AdjustOOMScore
(
ProcessId
process
int
score
)
;
#
endif
namespace
internal
{
bool
ReleaseAddressSpaceReservation
(
)
;
}
#
if
BUILDFLAG
(
IS_WIN
)
namespace
win
{
using
partition_alloc
:
:
win
:
:
kOomExceptionCode
;
}
#
endif
[
[
nodiscard
]
]
BASE_EXPORT
bool
UncheckedMalloc
(
size_t
size
void
*
*
result
)
;
[
[
nodiscard
]
]
BASE_EXPORT
bool
UncheckedCalloc
(
size_t
num_items
size_t
size
void
*
*
result
)
;
BASE_EXPORT
void
UncheckedFree
(
void
*
ptr
)
;
struct
UncheckedFreeDeleter
{
inline
void
operator
(
)
(
void
*
ptr
)
const
{
UncheckedFree
(
ptr
)
;
}
}
;
}
#
endif
