#
ifndef
BASE_PROCESS_LAUNCH_H_
#
define
BASE_PROCESS_LAUNCH_H_
#
include
<
stddef
.
h
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
environment
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
process
/
process
.
h
"
#
include
"
base
/
process
/
process_handle
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_POSIX
)
#
include
"
base
/
posix
/
file_descriptor_shuffle
.
h
"
#
elif
defined
(
OS_WIN
)
#
include
<
windows
.
h
>
#
endif
namespace
base
{
class
CommandLine
;
#
if
defined
(
OS_WIN
)
typedef
std
:
:
vector
<
HANDLE
>
HandlesToInheritVector
;
#
endif
typedef
std
:
:
vector
<
std
:
:
pair
<
int
int
>
>
FileHandleMappingVector
;
struct
BASE_EXPORT
LaunchOptions
{
#
if
defined
(
OS_POSIX
)
class
BASE_EXPORT
PreExecDelegate
{
public
:
PreExecDelegate
(
)
{
}
virtual
~
PreExecDelegate
(
)
{
}
virtual
void
RunAsyncSafe
(
)
=
0
;
private
:
DISALLOW_COPY_AND_ASSIGN
(
PreExecDelegate
)
;
}
;
#
endif
LaunchOptions
(
)
;
LaunchOptions
(
const
LaunchOptions
&
)
;
~
LaunchOptions
(
)
;
bool
wait
=
false
;
base
:
:
FilePath
current_directory
;
#
if
defined
(
OS_WIN
)
bool
start_hidden
=
false
;
HandlesToInheritVector
*
handles_to_inherit
=
nullptr
;
bool
inherit_handles
=
false
;
UserTokenHandle
as_user
=
nullptr
;
bool
empty_desktop_name
=
false
;
HANDLE
job_handle
=
nullptr
;
HANDLE
stdin_handle
=
nullptr
;
HANDLE
stdout_handle
=
nullptr
;
HANDLE
stderr_handle
=
nullptr
;
bool
force_breakaway_from_job_
=
false
;
#
else
EnvironmentMap
environ
;
bool
clear_environ
=
false
;
const
FileHandleMappingVector
*
fds_to_remap
=
nullptr
;
const
std
:
:
vector
<
int
>
*
maximize_rlimits
=
nullptr
;
bool
new_process_group
=
false
;
#
if
defined
(
OS_LINUX
)
int
clone_flags
=
0
;
bool
allow_new_privs
=
false
;
bool
kill_on_parent_death
=
false
;
#
endif
#
if
defined
(
OS_POSIX
)
base
:
:
FilePath
real_path
;
PreExecDelegate
*
pre_exec_delegate
=
nullptr
;
#
endif
#
if
defined
(
OS_CHROMEOS
)
int
ctrl_terminal_fd
=
-
1
;
#
endif
#
endif
}
;
BASE_EXPORT
Process
LaunchProcess
(
const
CommandLine
&
cmdline
const
LaunchOptions
&
options
)
;
#
if
defined
(
OS_WIN
)
BASE_EXPORT
Process
LaunchProcess
(
const
string16
&
cmdline
const
LaunchOptions
&
options
)
;
BASE_EXPORT
Process
LaunchElevatedProcess
(
const
CommandLine
&
cmdline
const
LaunchOptions
&
options
)
;
#
elif
defined
(
OS_POSIX
)
BASE_EXPORT
Process
LaunchProcess
(
const
std
:
:
vector
<
std
:
:
string
>
&
argv
const
LaunchOptions
&
options
)
;
BASE_EXPORT
void
CloseSuperfluousFds
(
const
InjectiveMultimap
&
saved_map
)
;
#
endif
#
if
defined
(
OS_WIN
)
BASE_EXPORT
bool
SetJobObjectLimitFlags
(
HANDLE
job_object
DWORD
limit_flags
)
;
BASE_EXPORT
void
RouteStdioToConsole
(
bool
create_console_if_not_found
)
;
#
endif
BASE_EXPORT
bool
GetAppOutput
(
const
CommandLine
&
cl
std
:
:
string
*
output
)
;
BASE_EXPORT
bool
GetAppOutputAndError
(
const
CommandLine
&
cl
std
:
:
string
*
output
)
;
#
if
defined
(
OS_WIN
)
BASE_EXPORT
bool
GetAppOutput
(
const
StringPiece16
&
cl
std
:
:
string
*
output
)
;
#
endif
#
if
defined
(
OS_POSIX
)
BASE_EXPORT
bool
GetAppOutput
(
const
std
:
:
vector
<
std
:
:
string
>
&
argv
std
:
:
string
*
output
)
;
BASE_EXPORT
bool
GetAppOutputWithExitCode
(
const
CommandLine
&
cl
std
:
:
string
*
output
int
*
exit_code
)
;
#
endif
BASE_EXPORT
void
RaiseProcessToHighPriority
(
)
;
#
if
defined
(
OS_MACOSX
)
Process
LaunchProcessPosixSpawn
(
const
std
:
:
vector
<
std
:
:
string
>
&
argv
const
LaunchOptions
&
options
)
;
void
RestoreDefaultExceptionHandler
(
)
;
#
endif
BASE_EXPORT
LaunchOptions
LaunchOptionsForTest
(
)
;
#
if
defined
(
OS_LINUX
)
|
|
defined
(
OS_NACL_NONSFI
)
BASE_EXPORT
pid_t
ForkWithFlags
(
unsigned
long
flags
pid_t
*
ptid
pid_t
*
ctid
)
;
#
endif
}
#
endif
