#
ifndef
BASE_PROCESS_PROCESS_H_
#
define
BASE_PROCESS_PROCESS_H_
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
process
/
process_handle
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
#
include
"
base
/
time
/
time
.
h
"
#
include
"
build
/
blink_buildflags
.
h
"
#
include
"
build
/
build_config
.
h
"
#
include
"
build
/
chromeos_buildflags
.
h
"
#
if
BUILDFLAG
(
IS_WIN
)
#
include
"
base
/
win
/
scoped_handle
.
h
"
#
endif
#
if
BUILDFLAG
(
IS_FUCHSIA
)
#
include
<
lib
/
zx
/
process
.
h
>
#
endif
#
if
BUILDFLAG
(
IS_APPLE
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_WIN
)
#
include
"
base
/
feature_list
.
h
"
#
endif
#
if
BUILDFLAG
(
IS_APPLE
)
#
include
"
base
/
process
/
port_provider_mac
.
h
"
#
endif
namespace
base
{
#
if
BUILDFLAG
(
IS_CHROMEOS
)
BASE_EXPORT
BASE_DECLARE_FEATURE
(
kOneGroupPerRenderer
)
;
BASE_EXPORT
BASE_DECLARE_FEATURE
(
kSetThreadBgForBgProcess
)
;
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
BASE_EXPORT
BASE_DECLARE_FEATURE
(
kUseEcoQoSForBackgroundProcess
)
;
#
endif
class
BASE_EXPORT
Process
{
public
:
explicit
Process
(
ProcessHandle
handle
=
kNullProcessHandle
)
;
Process
(
Process
&
&
other
)
;
Process
(
const
Process
&
)
=
delete
;
Process
&
operator
=
(
const
Process
&
)
=
delete
;
~
Process
(
)
;
Process
&
operator
=
(
Process
&
&
other
)
;
static
Process
Current
(
)
;
static
Process
Open
(
ProcessId
pid
)
;
static
Process
OpenWithExtraPrivileges
(
ProcessId
pid
)
;
#
if
BUILDFLAG
(
IS_WIN
)
static
Process
OpenWithAccess
(
ProcessId
pid
DWORD
desired_access
)
;
#
endif
static
bool
CanSetPriority
(
)
;
[
[
noreturn
]
]
static
void
TerminateCurrentProcessImmediately
(
int
exit_code
)
;
bool
IsValid
(
)
const
;
ProcessHandle
Handle
(
)
const
;
Process
Duplicate
(
)
const
;
[
[
nodiscard
]
]
ProcessHandle
Release
(
)
;
ProcessId
Pid
(
)
const
;
Time
CreationTime
(
)
const
;
bool
is_current
(
)
const
;
#
if
BUILDFLAG
(
IS_CHROMEOS
)
const
std
:
:
string
&
unique_token
(
)
const
{
return
unique_token_
;
}
#
endif
void
Close
(
)
;
#
if
BUILDFLAG
(
IS_WIN
)
bool
IsRunning
(
)
const
{
return
!
WaitForExitWithTimeout
(
base
:
:
TimeDelta
(
)
nullptr
)
;
}
#
endif
bool
Terminate
(
int
exit_code
bool
wait
)
const
;
#
if
BUILDFLAG
(
IS_WIN
)
enum
class
WaitExitStatus
{
PROCESS_EXITED
STOP_EVENT_SIGNALED
FAILED
}
;
WaitExitStatus
WaitForExitOrEvent
(
const
base
:
:
win
:
:
ScopedHandle
&
stop_event_handle
int
*
exit_code
)
const
;
#
endif
bool
WaitForExit
(
int
*
exit_code
)
const
;
bool
WaitForExitWithTimeout
(
TimeDelta
timeout
int
*
exit_code
)
const
;
void
Exited
(
int
exit_code
)
const
;
enum
class
Priority
{
kBestEffort
kUserVisible
kUserBlocking
}
;
#
if
BUILDFLAG
(
IS_MAC
)
|
|
(
BUILDFLAG
(
IS_IOS
)
&
&
BUILDFLAG
(
USE_BLINK
)
)
Priority
GetPriority
(
PortProvider
*
port_provider
)
const
;
bool
SetPriority
(
PortProvider
*
port_provider
Priority
priority
)
;
#
else
Priority
GetPriority
(
)
const
;
bool
SetPriority
(
Priority
priority
)
;
#
endif
int
GetOSPriority
(
)
const
;
#
if
BUILDFLAG
(
IS_CHROMEOS_ASH
)
ProcessId
GetPidInNamespace
(
)
const
;
#
endif
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
bool
IsSeccompSandboxed
(
)
;
#
endif
#
if
BUILDFLAG
(
IS_CHROMEOS
)
static
bool
OneGroupPerRendererEnabledForTesting
(
)
;
static
void
CleanUpStaleProcessStates
(
)
;
void
InitializePriority
(
)
;
#
endif
#
if
BUILDFLAG
(
IS_APPLE
)
static
void
SetCurrentTaskDefaultRole
(
)
;
#
endif
private
:
#
if
BUILDFLAG
(
IS_CHROMEOS
)
void
CleanUpProcess
(
int
remaining_retries
)
const
;
void
CleanUpProcessAsync
(
)
const
;
static
void
CleanUpProcessScheduled
(
Process
process
int
remaining_retries
)
;
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
win
:
:
ScopedHandle
process_
;
#
elif
BUILDFLAG
(
IS_FUCHSIA
)
zx
:
:
process
process_
;
#
else
ProcessHandle
process_
;
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
bool
is_current_process_
;
#
endif
#
if
BUILDFLAG
(
IS_CHROMEOS
)
std
:
:
string
unique_token_
;
#
endif
}
;
#
if
BUILDFLAG
(
IS_CHROMEOS
)
BASE_EXPORT
Process
:
:
Priority
GetProcessPriorityCGroup
(
const
StringPiece
&
cgroup_contents
)
;
#
endif
}
#
endif
