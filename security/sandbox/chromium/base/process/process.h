#
ifndef
BASE_PROCESS_PROCESS_H_
#
define
BASE_PROCESS_PROCESS_H_
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
process
/
process_handle
.
h
"
#
include
"
base
/
time
/
time
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_WIN
)
#
include
"
base
/
win
/
scoped_handle
.
h
"
#
endif
#
if
defined
(
OS_FUCHSIA
)
#
include
<
lib
/
zx
/
process
.
h
>
#
endif
#
if
defined
(
OS_MACOSX
)
#
include
"
base
/
feature_list
.
h
"
#
include
"
base
/
process
/
port_provider_mac
.
h
"
#
endif
namespace
base
{
#
if
defined
(
OS_MACOSX
)
extern
const
Feature
kMacAllowBackgroundingProcesses
;
#
endif
class
BASE_EXPORT
Process
{
public
:
explicit
Process
(
ProcessHandle
handle
=
kNullProcessHandle
)
;
Process
(
Process
&
&
other
)
;
~
Process
(
)
;
Process
&
operator
=
(
Process
&
&
other
)
;
static
Process
Current
(
)
;
static
Process
Open
(
ProcessId
pid
)
;
static
Process
OpenWithExtraPrivileges
(
ProcessId
pid
)
;
#
if
defined
(
OS_WIN
)
static
Process
OpenWithAccess
(
ProcessId
pid
DWORD
desired_access
)
;
#
endif
static
Process
DeprecatedGetProcessFromHandle
(
ProcessHandle
handle
)
;
static
bool
CanBackgroundProcesses
(
)
;
[
[
noreturn
]
]
static
void
TerminateCurrentProcessImmediately
(
int
exit_code
)
;
bool
IsValid
(
)
const
;
ProcessHandle
Handle
(
)
const
;
Process
Duplicate
(
)
const
;
ProcessId
Pid
(
)
const
;
#
if
!
defined
(
OS_ANDROID
)
Time
CreationTime
(
)
const
;
#
endif
bool
is_current
(
)
const
;
void
Close
(
)
;
#
if
defined
(
OS_WIN
)
bool
IsRunning
(
)
const
{
return
!
WaitForExitWithTimeout
(
base
:
:
TimeDelta
(
)
nullptr
)
;
}
#
endif
bool
Terminate
(
int
exit_code
bool
wait
)
const
;
bool
WaitForExit
(
int
*
exit_code
)
const
;
bool
WaitForExitWithTimeout
(
TimeDelta
timeout
int
*
exit_code
)
const
;
void
Exited
(
int
exit_code
)
const
;
#
if
defined
(
OS_MACOSX
)
bool
IsProcessBackgrounded
(
PortProvider
*
port_provider
)
const
;
bool
SetProcessBackgrounded
(
PortProvider
*
port_provider
bool
value
)
;
#
else
bool
IsProcessBackgrounded
(
)
const
;
bool
SetProcessBackgrounded
(
bool
value
)
;
#
endif
int
GetPriority
(
)
const
;
#
if
defined
(
OS_CHROMEOS
)
ProcessId
GetPidInNamespace
(
)
const
;
#
endif
private
:
#
if
defined
(
OS_WIN
)
win
:
:
ScopedHandle
process_
;
#
elif
defined
(
OS_FUCHSIA
)
zx
:
:
process
process_
;
#
else
ProcessHandle
process_
;
#
endif
#
if
defined
(
OS_WIN
)
|
|
defined
(
OS_FUCHSIA
)
bool
is_current_process_
;
#
endif
DISALLOW_COPY_AND_ASSIGN
(
Process
)
;
}
;
#
if
defined
(
OS_CHROMEOS
)
BASE_EXPORT
bool
IsProcessBackgroundedCGroup
(
const
StringPiece
&
cgroup_contents
)
;
#
endif
}
#
endif
