#
ifndef
BASE_PROCESS_PROCESS_HANDLE_H_
#
define
BASE_PROCESS_PROCESS_HANDLE_H_
#
include
<
stdint
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
files
/
file_path
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_WIN
)
#
include
<
windows
.
h
>
#
endif
namespace
base
{
#
if
defined
(
OS_WIN
)
typedef
HANDLE
ProcessHandle
;
typedef
DWORD
ProcessId
;
typedef
HANDLE
UserTokenHandle
;
const
ProcessHandle
kNullProcessHandle
=
NULL
;
const
ProcessId
kNullProcessId
=
0
;
#
elif
defined
(
OS_POSIX
)
typedef
pid_t
ProcessHandle
;
typedef
pid_t
ProcessId
;
const
ProcessHandle
kNullProcessHandle
=
0
;
const
ProcessId
kNullProcessId
=
0
;
#
endif
BASE_EXPORT
ProcessId
GetCurrentProcId
(
)
;
BASE_EXPORT
uint32_t
GetUniqueIdForProcess
(
)
;
#
if
defined
(
OS_LINUX
)
BASE_EXPORT
void
InitUniqueIdForProcessInPidNamespace
(
ProcessId
pid_outside_of_namespace
)
;
#
endif
BASE_EXPORT
ProcessHandle
GetCurrentProcessHandle
(
)
;
BASE_EXPORT
ProcessId
GetProcId
(
ProcessHandle
process
)
;
BASE_EXPORT
ProcessId
GetParentProcessId
(
ProcessHandle
process
)
;
#
if
defined
(
OS_POSIX
)
BASE_EXPORT
FilePath
GetProcessExecutablePath
(
ProcessHandle
process
)
;
#
endif
}
#
endif
