#
ifndef
BASE_ALLOCATOR_PARTITION_ALLOCATOR_SRC_PARTITION_ALLOC_ALLOCATION_GUARD_H_
#
define
BASE_ALLOCATOR_PARTITION_ALLOCATOR_SRC_PARTITION_ALLOC_ALLOCATION_GUARD_H_
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
partition_alloc_base
/
component_export
.
h
"
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
partition_alloc_config
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
partition_alloc
{
#
if
PA_CONFIG
(
HAS_ALLOCATION_GUARD
)
class
PA_COMPONENT_EXPORT
(
PARTITION_ALLOC
)
ScopedDisallowAllocations
{
public
:
ScopedDisallowAllocations
(
)
;
~
ScopedDisallowAllocations
(
)
;
}
;
class
PA_COMPONENT_EXPORT
(
PARTITION_ALLOC
)
ScopedAllowAllocations
{
public
:
ScopedAllowAllocations
(
)
;
~
ScopedAllowAllocations
(
)
;
private
:
bool
saved_value_
;
}
;
#
else
struct
[
[
maybe_unused
]
]
ScopedDisallowAllocations
{
}
;
struct
[
[
maybe_unused
]
]
ScopedAllowAllocations
{
}
;
#
endif
}
namespace
base
:
:
internal
{
using
:
:
partition_alloc
:
:
ScopedAllowAllocations
;
using
:
:
partition_alloc
:
:
ScopedDisallowAllocations
;
}
#
endif
