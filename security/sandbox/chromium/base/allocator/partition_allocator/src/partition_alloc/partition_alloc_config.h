#
ifndef
BASE_ALLOCATOR_PARTITION_ALLOCATOR_SRC_PARTITION_ALLOC_PARTITION_ALLOC_CONFIG_H_
#
define
BASE_ALLOCATOR_PARTITION_ALLOCATOR_SRC_PARTITION_ALLOC_PARTITION_ALLOC_CONFIG_H_
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
partition_alloc_base
/
debug
/
debugging_buildflags
.
h
"
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
partition_alloc_buildflags
.
h
"
#
include
"
build
/
build_config
.
h
"
#
define
PA_CONFIG
(
flag
)
(
PA_CONFIG_
#
#
flag
(
)
)
#
if
BUILDFLAG
(
HAS_64_BIT_POINTERS
)
static_assert
(
sizeof
(
void
*
)
=
=
8
"
"
)
;
#
else
static_assert
(
sizeof
(
void
*
)
!
=
8
"
"
)
;
#
endif
#
if
BUILDFLAG
(
HAS_64_BIT_POINTERS
)
&
&
\
(
defined
(
__ARM_NEON
)
|
|
defined
(
__ARM_NEON__
)
)
&
&
defined
(
__ARM_FP
)
#
define
PA_CONFIG_STARSCAN_NEON_SUPPORTED
(
)
1
#
else
#
define
PA_CONFIG_STARSCAN_NEON_SUPPORTED
(
)
0
#
endif
#
if
BUILDFLAG
(
HAS_64_BIT_POINTERS
)
&
&
BUILDFLAG
(
IS_IOS
)
#
define
PA_CONFIG_DYNAMICALLY_SELECT_POOL_SIZE
(
)
1
#
else
#
define
PA_CONFIG_DYNAMICALLY_SELECT_POOL_SIZE
(
)
0
#
endif
#
if
BUILDFLAG
(
HAS_64_BIT_POINTERS
)
&
&
\
(
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_ANDROID
)
)
#
include
<
linux
/
version
.
h
>
#
define
PA_CONFIG_STARSCAN_UFFD_WRITE_PROTECTOR_SUPPORTED
(
)
\
(
LINUX_VERSION_CODE
>
=
KERNEL_VERSION
(
5
8
0
)
)
#
else
#
define
PA_CONFIG_STARSCAN_UFFD_WRITE_PROTECTOR_SUPPORTED
(
)
0
#
endif
#
if
BUILDFLAG
(
USE_STARSCAN
)
#
define
PA_CONFIG_STARSCAN_USE_CARD_TABLE
(
)
1
#
else
#
define
PA_CONFIG_STARSCAN_USE_CARD_TABLE
(
)
0
#
endif
#
define
PA_CONFIG_STARSCAN_BATCHED_FREE
(
)
1
#
define
PA_CONFIG_STARSCAN_NOINLINE_SCAN_FUNCTIONS
(
)
1
#
define
PA_CONFIG_STARSCAN_ENABLE_STARSCAN_ON_RECLAIM
(
)
0
#
define
PA_CONFIG_STARSCAN_EAGER_DOUBLE_FREE_DETECTION_ENABLED
(
)
0
#
define
PA_CONFIG_HAS_LINUX_KERNEL
(
)
\
(
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
)
#
if
PA_CONFIG
(
HAS_LINUX_KERNEL
)
|
|
BUILDFLAG
(
IS_WIN
)
|
|
BUILDFLAG
(
IS_APPLE
)
|
|
\
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
#
define
PA_CONFIG_HAS_FAST_MUTEX
(
)
1
#
else
#
define
PA_CONFIG_HAS_FAST_MUTEX
(
)
0
#
endif
#
define
PA_CONFIG_ZERO_RANDOMLY_ON_FREE
(
)
0
#
define
PA_CONFIG_THREAD_CACHE_SUPPORTED
(
)
\
(
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_WIN
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
)
#
define
PA_CONFIG_THREAD_CACHE_ALLOC_STATS
(
)
\
(
BUILDFLAG
(
USE_PARTITION_ALLOC_AS_MALLOC
)
&
&
!
defined
(
OFFICIAL_BUILD
)
)
#
define
PA_CONFIG_THREAD_CACHE_ENABLE_STATISTICS
(
)
1
#
define
PA_CONFIG_HAS_FREELIST_SHADOW_ENTRY
(
)
\
(
!
BUILDFLAG
(
PUT_REF_COUNT_IN_PREVIOUS_SLOT
)
&
&
\
defined
(
ARCH_CPU_LITTLE_ENDIAN
)
)
#
define
PA_CONFIG_HAS_MEMORY_TAGGING
(
)
\
(
defined
(
ARCH_CPU_ARM64
)
&
&
defined
(
__clang__
)
&
&
\
!
defined
(
ADDRESS_SANITIZER
)
&
&
\
(
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_ANDROID
)
)
)
#
if
PA_CONFIG
(
HAS_MEMORY_TAGGING
)
static_assert
(
sizeof
(
void
*
)
=
=
8
)
;
#
endif
#
if
PA_CONFIG
(
HAS_MEMORY_TAGGING
)
&
&
\
BUILDFLAG
(
ENABLE_BACKUP_REF_PTR_SUPPORT
)
&
&
\
BUILDFLAG
(
PUT_REF_COUNT_IN_PREVIOUS_SLOT
)
#
define
PA_CONFIG_INCREASE_REF_COUNT_SIZE_FOR_MTE
(
)
1
#
else
#
define
PA_CONFIG_INCREASE_REF_COUNT_SIZE_FOR_MTE
(
)
0
#
endif
#
if
BUILDFLAG
(
PA_DCHECK_IS_ON
)
|
|
BUILDFLAG
(
ENABLE_BACKUP_REF_PTR_SUPPORT
)
#
define
PA_CONFIG_EXTRAS_REQUIRED
(
)
1
#
else
#
define
PA_CONFIG_EXTRAS_REQUIRED
(
)
0
#
endif
#
define
PA_CONFIG_COUNT_SYSCALL_TIME
(
)
0
#
define
PA_CONFIG_THREAD_LOCAL_TLS
(
)
\
(
!
(
BUILDFLAG
(
IS_WIN
)
&
&
defined
(
COMPONENT_BUILD
)
)
&
&
!
BUILDFLAG
(
IS_APPLE
)
&
&
\
!
BUILDFLAG
(
IS_LINUX
)
&
&
!
BUILDFLAG
(
IS_CHROMEOS
)
)
#
if
BUILDFLAG
(
PA_DCHECK_IS_ON
)
&
&
BUILDFLAG
(
USE_PARTITION_ALLOC_AS_MALLOC
)
&
&
\
PA_CONFIG
(
THREAD_LOCAL_TLS
)
&
&
!
BUILDFLAG
(
IS_ANDROID
)
#
define
PA_CONFIG_HAS_ALLOCATION_GUARD
(
)
1
#
else
#
define
PA_CONFIG_HAS_ALLOCATION_GUARD
(
)
0
#
endif
#
if
PA_CONFIG
(
THREAD_LOCAL_TLS
)
&
&
!
BUILDFLAG
(
IS_ANDROID
)
#
define
PA_CONFIG_THREAD_CACHE_FAST_TLS
(
)
1
#
else
#
define
PA_CONFIG_THREAD_CACHE_FAST_TLS
(
)
0
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
constexpr
bool
kUseLazyCommit
=
true
;
#
else
constexpr
bool
kUseLazyCommit
=
false
;
#
endif
#
define
PA_CONFIG_HAS_ATFORK_HANDLER
(
)
\
(
BUILDFLAG
(
IS_APPLE
)
|
|
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
)
#
if
BUILDFLAG
(
USE_PARTITION_ALLOC_AS_MALLOC
)
&
&
PA_CONFIG
(
HAS_ATFORK_HANDLER
)
#
define
PA_CONFIG_USE_PARTITION_ROOT_ENUMERATOR
(
)
1
#
else
#
define
PA_CONFIG_USE_PARTITION_ROOT_ENUMERATOR
(
)
0
#
endif
#
define
PA_CONFIG_REF_COUNT_CHECK_COOKIE
(
)
\
(
!
(
BUILDFLAG
(
ENABLE_DANGLING_RAW_PTR_CHECKS
)
&
&
\
BUILDFLAG
(
PUT_REF_COUNT_IN_PREVIOUS_SLOT
)
)
&
&
\
(
BUILDFLAG
(
PA_DCHECK_IS_ON
)
|
|
\
BUILDFLAG
(
ENABLE_BACKUP_REF_PTR_SLOW_CHECKS
)
)
)
#
if
!
PA_CONFIG
(
REF_COUNT_CHECK_COOKIE
)
&
&
\
!
BUILDFLAG
(
ENABLE_DANGLING_RAW_PTR_CHECKS
)
#
define
PA_CONFIG_REF_COUNT_STORE_REQUESTED_SIZE
(
)
0
#
else
#
define
PA_CONFIG_REF_COUNT_STORE_REQUESTED_SIZE
(
)
0
#
endif
#
if
PA_CONFIG
(
REF_COUNT_STORE_REQUESTED_SIZE
)
&
&
\
PA_CONFIG
(
REF_COUNT_CHECK_COOKIE
)
#
error
"
Cannot
use
a
cookie
*
and
*
store
the
allocation
size
"
#
endif
#
define
PA_CONFIG_PREFER_SMALLER_SLOT_SPANS
(
)
\
(
BUILDFLAG
(
IS_LINUX
)
|
|
(
BUILDFLAG
(
IS_MAC
)
&
&
defined
(
ARCH_CPU_ARM64
)
)
)
#
if
BUILDFLAG
(
ENABLE_SHADOW_METADATA_FOR_64_BITS_POINTERS
)
&
&
\
BUILDFLAG
(
HAS_64_BIT_POINTERS
)
#
define
PA_CONFIG_ENABLE_SHADOW_METADATA
(
)
1
#
else
#
define
PA_CONFIG_ENABLE_SHADOW_METADATA
(
)
0
#
endif
#
define
PA_CONFIG_ENABLE_MAC11_MALLOC_SIZE_HACK
(
)
\
(
BUILDFLAG
(
ENABLE_BACKUP_REF_PTR_SUPPORT
)
&
&
BUILDFLAG
(
IS_MAC
)
)
#
if
BUILDFLAG
(
ENABLE_POINTER_COMPRESSION
)
#
if
PA_CONFIG
(
DYNAMICALLY_SELECT_POOL_SIZE
)
#
error
"
Dynamically
selected
pool
size
is
currently
not
supported
"
#
endif
#
if
PA_CONFIG
(
HAS_MEMORY_TAGGING
)
#
error
"
Compressed
pointers
don
'
t
support
tag
in
the
upper
bits
"
#
endif
#
endif
#
if
defined
(
COMPILER_MSVC
)
&
&
!
defined
(
__clang__
)
#
define
PA_CONFIG_IS_NONCLANG_MSVC
(
)
1
#
else
#
define
PA_CONFIG_IS_NONCLANG_MSVC
(
)
0
#
endif
#
endif
