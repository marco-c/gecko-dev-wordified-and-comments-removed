#
ifndef
BASE_ALLOCATOR_PARTITION_ALLOCATOR_SRC_PARTITION_ALLOC_OOM_H_
#
define
BASE_ALLOCATOR_PARTITION_ALLOCATOR_SRC_PARTITION_ALLOC_OOM_H_
#
include
<
cstddef
>
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
allocation_guard
.
h
"
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
partition_alloc_base
/
compiler_specific
.
h
"
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
partition_alloc_base
/
component_export
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
BUILDFLAG
(
IS_WIN
)
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
partition_alloc_base
/
win
/
windows_types
.
h
"
#
endif
namespace
partition_alloc
{
PA_COMPONENT_EXPORT
(
PARTITION_ALLOC
)
void
TerminateBecauseOutOfMemory
(
size_t
size
)
;
PA_COMPONENT_EXPORT
(
PARTITION_ALLOC
)
extern
size_t
g_oom_size
;
#
if
BUILDFLAG
(
IS_WIN
)
namespace
win
{
const
DWORD
kOomExceptionCode
=
0xe0000008
;
}
#
endif
namespace
internal
{
[
[
noreturn
]
]
PA_NOT_TAIL_CALLED
PA_COMPONENT_EXPORT
(
PARTITION_ALLOC
)
void
OnNoMemory
(
size_t
size
)
;
#
define
OOM_CRASH
(
size
)
\
do
{
\
/
*
Raising
an
exception
might
allocate
allow
that
.
*
/
\
:
:
partition_alloc
:
:
ScopedAllowAllocations
guard
{
}
;
\
:
:
partition_alloc
:
:
internal
:
:
OnNoMemory
(
size
)
;
\
}
while
(
0
)
}
}
#
endif
