#
ifndef
BASE_ALLOCATOR_PARTITION_ALLOCATOR_SRC_PARTITION_ALLOC_PARTITION_ALLOC_BASE_THREAD_ANNOTATIONS_H_
#
define
BASE_ALLOCATOR_PARTITION_ALLOCATOR_SRC_PARTITION_ALLOC_PARTITION_ALLOC_BASE_THREAD_ANNOTATIONS_H_
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
partition_alloc_base
/
debug
/
debugging_buildflags
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
__clang__
)
#
define
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
x
)
__attribute__
(
(
x
)
)
#
else
#
define
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
x
)
#
endif
#
define
PA_GUARDED_BY
(
x
)
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
guarded_by
(
x
)
)
#
define
PA_PT_GUARDED_BY
(
x
)
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
pt_guarded_by
(
x
)
)
#
define
PA_ACQUIRED_AFTER
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
acquired_after
(
__VA_ARGS__
)
)
#
define
PA_ACQUIRED_BEFORE
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
acquired_before
(
__VA_ARGS__
)
)
#
define
PA_EXCLUSIVE_LOCKS_REQUIRED
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
exclusive_locks_required
(
__VA_ARGS__
)
)
#
define
PA_SHARED_LOCKS_REQUIRED
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
shared_locks_required
(
__VA_ARGS__
)
)
#
define
PA_LOCKS_EXCLUDED
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
locks_excluded
(
__VA_ARGS__
)
)
#
define
PA_LOCK_RETURNED
(
x
)
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
lock_returned
(
x
)
)
#
define
PA_LOCKABLE
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
lockable
)
#
define
PA_SCOPED_LOCKABLE
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
scoped_lockable
)
#
define
PA_EXCLUSIVE_LOCK_FUNCTION
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
exclusive_lock_function
(
__VA_ARGS__
)
)
#
define
PA_SHARED_LOCK_FUNCTION
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
shared_lock_function
(
__VA_ARGS__
)
)
#
define
PA_UNLOCK_FUNCTION
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
unlock_function
(
__VA_ARGS__
)
)
#
define
PA_EXCLUSIVE_TRYLOCK_FUNCTION
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
exclusive_trylock_function
(
__VA_ARGS__
)
)
#
define
PA_SHARED_TRYLOCK_FUNCTION
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
shared_trylock_function
(
__VA_ARGS__
)
)
#
define
PA_ASSERT_EXCLUSIVE_LOCK
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
assert_exclusive_lock
(
__VA_ARGS__
)
)
#
define
PA_ASSERT_SHARED_LOCK
(
.
.
.
)
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
assert_shared_lock
(
__VA_ARGS__
)
)
#
define
PA_NO_THREAD_SAFETY_ANALYSIS
\
PA_THREAD_ANNOTATION_ATTRIBUTE__
(
no_thread_safety_analysis
)
#
define
PA_TS_UNCHECKED
(
x
)
"
"
#
define
PA_TS_FIXME
(
x
)
"
"
#
define
PA_NO_THREAD_SAFETY_ANALYSIS_FIXME
PA_NO_THREAD_SAFETY_ANALYSIS
#
define
PA_GUARDED_BY_FIXME
(
x
)
#
define
PA_TS_UNCHECKED_READ
(
x
)
\
partition_alloc
:
:
internal
:
:
thread_safety_analysis
:
:
ts_unchecked_read
(
x
)
namespace
partition_alloc
:
:
internal
:
:
thread_safety_analysis
{
template
<
typename
T
>
inline
const
T
&
ts_unchecked_read
(
const
T
&
v
)
PA_NO_THREAD_SAFETY_ANALYSIS
{
return
v
;
}
template
<
typename
T
>
inline
T
&
ts_unchecked_read
(
T
&
v
)
PA_NO_THREAD_SAFETY_ANALYSIS
{
return
v
;
}
}
#
if
BUILDFLAG
(
PA_DCHECK_IS_ON
)
#
define
PA_GUARDED_BY_CONTEXT
(
name
)
PA_GUARDED_BY
(
name
)
#
define
PA_VALID_CONTEXT_REQUIRED
(
name
)
PA_EXCLUSIVE_LOCKS_REQUIRED
(
name
)
#
else
#
define
PA_GUARDED_BY_CONTEXT
(
name
)
#
define
PA_VALID_CONTEXT_REQUIRED
(
name
)
#
endif
#
endif
