#
ifndef
BASE_OPTIONAL_H_
#
define
BASE_OPTIONAL_H_
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
template_util
.
h
"
#
include
"
base
/
thread_annotations
.
h
"
namespace
base
{
struct
nullopt_t
{
constexpr
explicit
nullopt_t
(
int
)
{
}
}
;
constexpr
nullopt_t
nullopt
(
0
)
;
template
<
typename
T
>
class
Optional
;
namespace
internal
{
template
<
typename
T
bool
=
std
:
:
is_trivially_destructible
<
T
>
:
:
value
>
struct
OptionalStorageBase
{
constexpr
OptionalStorageBase
(
)
:
empty_
(
'
\
0
'
)
{
}
template
<
class
.
.
.
Args
>
constexpr
explicit
OptionalStorageBase
(
in_place_t
Args
&
&
.
.
.
args
)
:
is_populated_
(
true
)
value_
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
~
OptionalStorageBase
(
)
{
if
(
is_populated_
)
value_
.
~
T
(
)
;
}
template
<
class
.
.
.
Args
>
void
Init
(
Args
&
&
.
.
.
args
)
{
DCHECK
(
!
is_populated_
)
;
:
:
new
(
&
value_
)
T
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
is_populated_
=
true
;
}
bool
is_populated_
=
false
;
union
{
char
empty_
;
T
value_
;
}
;
}
;
template
<
typename
T
>
struct
OptionalStorageBase
<
T
true
>
{
constexpr
OptionalStorageBase
(
)
:
empty_
(
'
\
0
'
)
{
}
template
<
class
.
.
.
Args
>
constexpr
explicit
OptionalStorageBase
(
in_place_t
Args
&
&
.
.
.
args
)
:
is_populated_
(
true
)
value_
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
class
.
.
.
Args
>
void
Init
(
Args
&
&
.
.
.
args
)
{
DCHECK
(
!
is_populated_
)
;
:
:
new
(
&
value_
)
T
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
is_populated_
=
true
;
}
bool
is_populated_
=
false
;
union
{
char
empty_
;
T
value_
;
}
;
}
;
template
<
typename
T
bool
=
is_trivially_copy_constructible
<
T
>
:
:
value
bool
=
std
:
:
is_trivially_move_constructible
<
T
>
:
:
value
>
struct
OptionalStorage
:
OptionalStorageBase
<
T
>
{
using
OptionalStorageBase
<
T
>
:
:
is_populated_
;
using
OptionalStorageBase
<
T
>
:
:
value_
;
using
OptionalStorageBase
<
T
>
:
:
Init
;
using
OptionalStorageBase
<
T
>
:
:
OptionalStorageBase
;
OptionalStorage
(
)
=
default
;
OptionalStorage
(
const
OptionalStorage
&
other
)
{
if
(
other
.
is_populated_
)
Init
(
other
.
value_
)
;
}
OptionalStorage
(
OptionalStorage
&
&
other
)
noexcept
(
std
:
:
is_nothrow_move_constructible
<
T
>
:
:
value
)
{
if
(
other
.
is_populated_
)
Init
(
std
:
:
move
(
other
.
value_
)
)
;
}
}
;
template
<
typename
T
>
struct
OptionalStorage
<
T
true
false
>
:
OptionalStorageBase
<
T
>
{
using
OptionalStorageBase
<
T
>
:
:
is_populated_
;
using
OptionalStorageBase
<
T
>
:
:
value_
;
using
OptionalStorageBase
<
T
>
:
:
Init
;
using
OptionalStorageBase
<
T
>
:
:
OptionalStorageBase
;
OptionalStorage
(
)
=
default
;
OptionalStorage
(
const
OptionalStorage
&
other
)
=
default
;
OptionalStorage
(
OptionalStorage
&
&
other
)
noexcept
(
std
:
:
is_nothrow_move_constructible
<
T
>
:
:
value
)
{
if
(
other
.
is_populated_
)
Init
(
std
:
:
move
(
other
.
value_
)
)
;
}
}
;
template
<
typename
T
>
struct
OptionalStorage
<
T
false
true
>
:
OptionalStorageBase
<
T
>
{
using
OptionalStorageBase
<
T
>
:
:
is_populated_
;
using
OptionalStorageBase
<
T
>
:
:
value_
;
using
OptionalStorageBase
<
T
>
:
:
Init
;
using
OptionalStorageBase
<
T
>
:
:
OptionalStorageBase
;
OptionalStorage
(
)
=
default
;
OptionalStorage
(
OptionalStorage
&
&
other
)
=
default
;
OptionalStorage
(
const
OptionalStorage
&
other
)
{
if
(
other
.
is_populated_
)
Init
(
other
.
value_
)
;
}
}
;
template
<
typename
T
>
struct
OptionalStorage
<
T
true
true
>
:
OptionalStorageBase
<
T
>
{
using
OptionalStorageBase
<
T
>
:
:
OptionalStorageBase
;
}
;
template
<
typename
T
>
class
OptionalBase
{
protected
:
constexpr
OptionalBase
(
)
=
default
;
constexpr
OptionalBase
(
const
OptionalBase
&
other
)
=
default
;
constexpr
OptionalBase
(
OptionalBase
&
&
other
)
=
default
;
template
<
class
.
.
.
Args
>
constexpr
explicit
OptionalBase
(
in_place_t
Args
&
&
.
.
.
args
)
:
storage_
(
in_place
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
typename
U
>
explicit
OptionalBase
(
const
OptionalBase
<
U
>
&
other
)
{
if
(
other
.
storage_
.
is_populated_
)
storage_
.
Init
(
other
.
storage_
.
value_
)
;
}
template
<
typename
U
>
explicit
OptionalBase
(
OptionalBase
<
U
>
&
&
other
)
{
if
(
other
.
storage_
.
is_populated_
)
storage_
.
Init
(
std
:
:
move
(
other
.
storage_
.
value_
)
)
;
}
~
OptionalBase
(
)
=
default
;
OptionalBase
&
operator
=
(
const
OptionalBase
&
other
)
{
CopyAssign
(
other
)
;
return
*
this
;
}
OptionalBase
&
operator
=
(
OptionalBase
&
&
other
)
noexcept
(
std
:
:
is_nothrow_move_assignable
<
T
>
:
:
value
&
&
std
:
:
is_nothrow_move_constructible
<
T
>
:
:
value
)
{
MoveAssign
(
std
:
:
move
(
other
)
)
;
return
*
this
;
}
template
<
typename
U
>
void
CopyAssign
(
const
OptionalBase
<
U
>
&
other
)
{
if
(
other
.
storage_
.
is_populated_
)
InitOrAssign
(
other
.
storage_
.
value_
)
;
else
FreeIfNeeded
(
)
;
}
template
<
typename
U
>
void
MoveAssign
(
OptionalBase
<
U
>
&
&
other
)
{
if
(
other
.
storage_
.
is_populated_
)
InitOrAssign
(
std
:
:
move
(
other
.
storage_
.
value_
)
)
;
else
FreeIfNeeded
(
)
;
}
template
<
typename
U
>
void
InitOrAssign
(
U
&
&
value
)
{
if
(
storage_
.
is_populated_
)
storage_
.
value_
=
std
:
:
forward
<
U
>
(
value
)
;
else
storage_
.
Init
(
std
:
:
forward
<
U
>
(
value
)
)
;
}
void
FreeIfNeeded
(
)
NO_THREAD_SAFETY_ANALYSIS
{
if
(
!
storage_
.
is_populated_
)
return
;
storage_
.
value_
.
~
T
(
)
;
storage_
.
is_populated_
=
false
;
}
template
<
typename
U
>
friend
class
OptionalBase
;
OptionalStorage
<
T
>
storage_
;
}
;
template
<
bool
is_copy_constructible
>
struct
CopyConstructible
{
}
;
template
<
>
struct
CopyConstructible
<
false
>
{
constexpr
CopyConstructible
(
)
=
default
;
constexpr
CopyConstructible
(
const
CopyConstructible
&
)
=
delete
;
constexpr
CopyConstructible
(
CopyConstructible
&
&
)
=
default
;
CopyConstructible
&
operator
=
(
const
CopyConstructible
&
)
=
default
;
CopyConstructible
&
operator
=
(
CopyConstructible
&
&
)
=
default
;
}
;
template
<
bool
is_move_constructible
>
struct
MoveConstructible
{
}
;
template
<
>
struct
MoveConstructible
<
false
>
{
constexpr
MoveConstructible
(
)
=
default
;
constexpr
MoveConstructible
(
const
MoveConstructible
&
)
=
default
;
constexpr
MoveConstructible
(
MoveConstructible
&
&
)
=
delete
;
MoveConstructible
&
operator
=
(
const
MoveConstructible
&
)
=
default
;
MoveConstructible
&
operator
=
(
MoveConstructible
&
&
)
=
default
;
}
;
template
<
bool
is_copy_assignable
>
struct
CopyAssignable
{
}
;
template
<
>
struct
CopyAssignable
<
false
>
{
constexpr
CopyAssignable
(
)
=
default
;
constexpr
CopyAssignable
(
const
CopyAssignable
&
)
=
default
;
constexpr
CopyAssignable
(
CopyAssignable
&
&
)
=
default
;
CopyAssignable
&
operator
=
(
const
CopyAssignable
&
)
=
delete
;
CopyAssignable
&
operator
=
(
CopyAssignable
&
&
)
=
default
;
}
;
template
<
bool
is_move_assignable
>
struct
MoveAssignable
{
}
;
template
<
>
struct
MoveAssignable
<
false
>
{
constexpr
MoveAssignable
(
)
=
default
;
constexpr
MoveAssignable
(
const
MoveAssignable
&
)
=
default
;
constexpr
MoveAssignable
(
MoveAssignable
&
&
)
=
default
;
MoveAssignable
&
operator
=
(
const
MoveAssignable
&
)
=
default
;
MoveAssignable
&
operator
=
(
MoveAssignable
&
&
)
=
delete
;
}
;
template
<
typename
T
typename
U
>
struct
IsConvertibleFromOptional
:
std
:
:
integral_constant
<
bool
std
:
:
is_constructible
<
T
Optional
<
U
>
&
>
:
:
value
|
|
std
:
:
is_constructible
<
T
const
Optional
<
U
>
&
>
:
:
value
|
|
std
:
:
is_constructible
<
T
Optional
<
U
>
&
&
>
:
:
value
|
|
std
:
:
is_constructible
<
T
const
Optional
<
U
>
&
&
>
:
:
value
|
|
std
:
:
is_convertible
<
Optional
<
U
>
&
T
>
:
:
value
|
|
std
:
:
is_convertible
<
const
Optional
<
U
>
&
T
>
:
:
value
|
|
std
:
:
is_convertible
<
Optional
<
U
>
&
&
T
>
:
:
value
|
|
std
:
:
is_convertible
<
const
Optional
<
U
>
&
&
T
>
:
:
value
>
{
}
;
template
<
typename
T
typename
U
>
struct
IsAssignableFromOptional
:
std
:
:
integral_constant
<
bool
IsConvertibleFromOptional
<
T
U
>
:
:
value
|
|
std
:
:
is_assignable
<
T
&
Optional
<
U
>
&
>
:
:
value
|
|
std
:
:
is_assignable
<
T
&
const
Optional
<
U
>
&
>
:
:
value
|
|
std
:
:
is_assignable
<
T
&
Optional
<
U
>
&
&
>
:
:
value
|
|
std
:
:
is_assignable
<
T
&
const
Optional
<
U
>
&
&
>
:
:
value
>
{
}
;
namespace
swappable_impl
{
using
std
:
:
swap
;
struct
IsSwappableImpl
{
template
<
typename
T
>
static
auto
Check
(
int
)
-
>
decltype
(
swap
(
std
:
:
declval
<
T
>
(
)
std
:
:
declval
<
T
>
(
)
)
std
:
:
true_type
(
)
)
;
template
<
typename
T
>
static
std
:
:
false_type
Check
(
.
.
.
)
;
}
;
}
template
<
typename
T
>
struct
IsSwappable
:
decltype
(
swappable_impl
:
:
IsSwappableImpl
:
:
Check
<
T
&
>
(
0
)
)
{
}
;
template
<
typename
T
>
using
RemoveCvRefT
=
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
T
>
>
;
}
#
ifdef
OS_WIN
#
define
OPTIONAL_DECLSPEC_EMPTY_BASES
__declspec
(
empty_bases
)
#
else
#
define
OPTIONAL_DECLSPEC_EMPTY_BASES
#
endif
template
<
typename
T
>
class
OPTIONAL_DECLSPEC_EMPTY_BASES
Optional
:
public
internal
:
:
OptionalBase
<
T
>
public
internal
:
:
CopyConstructible
<
std
:
:
is_copy_constructible
<
T
>
:
:
value
>
public
internal
:
:
MoveConstructible
<
std
:
:
is_move_constructible
<
T
>
:
:
value
>
public
internal
:
:
CopyAssignable
<
std
:
:
is_copy_constructible
<
T
>
:
:
value
&
&
std
:
:
is_copy_assignable
<
T
>
:
:
value
>
public
internal
:
:
MoveAssignable
<
std
:
:
is_move_constructible
<
T
>
:
:
value
&
&
std
:
:
is_move_assignable
<
T
>
:
:
value
>
{
public
:
#
undef
OPTIONAL_DECLSPEC_EMPTY_BASES
using
value_type
=
T
;
constexpr
Optional
(
)
=
default
;
constexpr
Optional
(
const
Optional
&
other
)
=
default
;
constexpr
Optional
(
Optional
&
&
other
)
noexcept
(
std
:
:
is_nothrow_move_constructible
<
T
>
:
:
value
)
=
default
;
constexpr
Optional
(
nullopt_t
)
{
}
template
<
typename
U
std
:
:
enable_if_t
<
std
:
:
is_constructible
<
T
const
U
&
>
:
:
value
&
&
!
internal
:
:
IsConvertibleFromOptional
<
T
U
>
:
:
value
&
&
std
:
:
is_convertible
<
const
U
&
T
>
:
:
value
bool
>
=
false
>
Optional
(
const
Optional
<
U
>
&
other
)
:
internal
:
:
OptionalBase
<
T
>
(
other
)
{
}
template
<
typename
U
std
:
:
enable_if_t
<
std
:
:
is_constructible
<
T
const
U
&
>
:
:
value
&
&
!
internal
:
:
IsConvertibleFromOptional
<
T
U
>
:
:
value
&
&
!
std
:
:
is_convertible
<
const
U
&
T
>
:
:
value
bool
>
=
false
>
explicit
Optional
(
const
Optional
<
U
>
&
other
)
:
internal
:
:
OptionalBase
<
T
>
(
other
)
{
}
template
<
typename
U
std
:
:
enable_if_t
<
std
:
:
is_constructible
<
T
U
&
&
>
:
:
value
&
&
!
internal
:
:
IsConvertibleFromOptional
<
T
U
>
:
:
value
&
&
std
:
:
is_convertible
<
U
&
&
T
>
:
:
value
bool
>
=
false
>
Optional
(
Optional
<
U
>
&
&
other
)
:
internal
:
:
OptionalBase
<
T
>
(
std
:
:
move
(
other
)
)
{
}
template
<
typename
U
std
:
:
enable_if_t
<
std
:
:
is_constructible
<
T
U
&
&
>
:
:
value
&
&
!
internal
:
:
IsConvertibleFromOptional
<
T
U
>
:
:
value
&
&
!
std
:
:
is_convertible
<
U
&
&
T
>
:
:
value
bool
>
=
false
>
explicit
Optional
(
Optional
<
U
>
&
&
other
)
:
internal
:
:
OptionalBase
<
T
>
(
std
:
:
move
(
other
)
)
{
}
template
<
class
.
.
.
Args
>
constexpr
explicit
Optional
(
in_place_t
Args
&
&
.
.
.
args
)
:
internal
:
:
OptionalBase
<
T
>
(
in_place
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
class
U
class
.
.
.
Args
class
=
std
:
:
enable_if_t
<
std
:
:
is_constructible
<
value_type
std
:
:
initializer_list
<
U
>
&
Args
.
.
.
>
:
:
value
>
>
constexpr
explicit
Optional
(
in_place_t
std
:
:
initializer_list
<
U
>
il
Args
&
&
.
.
.
args
)
:
internal
:
:
OptionalBase
<
T
>
(
in_place
il
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
typename
U
=
value_type
std
:
:
enable_if_t
<
std
:
:
is_constructible
<
T
U
&
&
>
:
:
value
&
&
!
std
:
:
is_same
<
internal
:
:
RemoveCvRefT
<
U
>
in_place_t
>
:
:
value
&
&
!
std
:
:
is_same
<
internal
:
:
RemoveCvRefT
<
U
>
Optional
<
T
>
>
:
:
value
&
&
std
:
:
is_convertible
<
U
&
&
T
>
:
:
value
bool
>
=
false
>
constexpr
Optional
(
U
&
&
value
)
:
internal
:
:
OptionalBase
<
T
>
(
in_place
std
:
:
forward
<
U
>
(
value
)
)
{
}
template
<
typename
U
=
value_type
std
:
:
enable_if_t
<
std
:
:
is_constructible
<
T
U
&
&
>
:
:
value
&
&
!
std
:
:
is_same
<
internal
:
:
RemoveCvRefT
<
U
>
in_place_t
>
:
:
value
&
&
!
std
:
:
is_same
<
internal
:
:
RemoveCvRefT
<
U
>
Optional
<
T
>
>
:
:
value
&
&
!
std
:
:
is_convertible
<
U
&
&
T
>
:
:
value
bool
>
=
false
>
constexpr
explicit
Optional
(
U
&
&
value
)
:
internal
:
:
OptionalBase
<
T
>
(
in_place
std
:
:
forward
<
U
>
(
value
)
)
{
}
~
Optional
(
)
=
default
;
Optional
&
operator
=
(
const
Optional
&
other
)
=
default
;
Optional
&
operator
=
(
Optional
&
&
other
)
noexcept
(
std
:
:
is_nothrow_move_assignable
<
T
>
:
:
value
&
&
std
:
:
is_nothrow_move_constructible
<
T
>
:
:
value
)
=
default
;
Optional
&
operator
=
(
nullopt_t
)
{
FreeIfNeeded
(
)
;
return
*
this
;
}
template
<
typename
U
>
std
:
:
enable_if_t
<
!
std
:
:
is_same
<
internal
:
:
RemoveCvRefT
<
U
>
Optional
<
T
>
>
:
:
value
&
&
std
:
:
is_constructible
<
T
U
>
:
:
value
&
&
std
:
:
is_assignable
<
T
&
U
>
:
:
value
&
&
(
!
std
:
:
is_scalar
<
T
>
:
:
value
|
|
!
std
:
:
is_same
<
std
:
:
decay_t
<
U
>
T
>
:
:
value
)
Optional
&
>
operator
=
(
U
&
&
value
)
{
InitOrAssign
(
std
:
:
forward
<
U
>
(
value
)
)
;
return
*
this
;
}
template
<
typename
U
>
std
:
:
enable_if_t
<
!
internal
:
:
IsAssignableFromOptional
<
T
U
>
:
:
value
&
&
std
:
:
is_constructible
<
T
const
U
&
>
:
:
value
&
&
std
:
:
is_assignable
<
T
&
const
U
&
>
:
:
value
Optional
&
>
operator
=
(
const
Optional
<
U
>
&
other
)
{
CopyAssign
(
other
)
;
return
*
this
;
}
template
<
typename
U
>
std
:
:
enable_if_t
<
!
internal
:
:
IsAssignableFromOptional
<
T
U
>
:
:
value
&
&
std
:
:
is_constructible
<
T
U
>
:
:
value
&
&
std
:
:
is_assignable
<
T
&
U
>
:
:
value
Optional
&
>
operator
=
(
Optional
<
U
>
&
&
other
)
{
MoveAssign
(
std
:
:
move
(
other
)
)
;
return
*
this
;
}
constexpr
const
T
*
operator
-
>
(
)
const
{
DCHECK
(
storage_
.
is_populated_
)
;
return
&
storage_
.
value_
;
}
constexpr
T
*
operator
-
>
(
)
{
DCHECK
(
storage_
.
is_populated_
)
;
return
&
storage_
.
value_
;
}
constexpr
const
T
&
operator
*
(
)
const
&
{
DCHECK
(
storage_
.
is_populated_
)
;
return
storage_
.
value_
;
}
constexpr
T
&
operator
*
(
)
&
{
DCHECK
(
storage_
.
is_populated_
)
;
return
storage_
.
value_
;
}
constexpr
const
T
&
&
operator
*
(
)
const
&
&
{
DCHECK
(
storage_
.
is_populated_
)
;
return
std
:
:
move
(
storage_
.
value_
)
;
}
constexpr
T
&
&
operator
*
(
)
&
&
{
DCHECK
(
storage_
.
is_populated_
)
;
return
std
:
:
move
(
storage_
.
value_
)
;
}
constexpr
explicit
operator
bool
(
)
const
{
return
storage_
.
is_populated_
;
}
constexpr
bool
has_value
(
)
const
{
return
storage_
.
is_populated_
;
}
constexpr
T
&
value
(
)
&
{
CHECK
(
storage_
.
is_populated_
)
;
return
storage_
.
value_
;
}
constexpr
const
T
&
value
(
)
const
&
{
CHECK
(
storage_
.
is_populated_
)
;
return
storage_
.
value_
;
}
constexpr
T
&
&
value
(
)
&
&
{
CHECK
(
storage_
.
is_populated_
)
;
return
std
:
:
move
(
storage_
.
value_
)
;
}
constexpr
const
T
&
&
value
(
)
const
&
&
{
CHECK
(
storage_
.
is_populated_
)
;
return
std
:
:
move
(
storage_
.
value_
)
;
}
template
<
class
U
>
constexpr
T
value_or
(
U
&
&
default_value
)
const
&
{
static_assert
(
std
:
:
is_convertible
<
U
T
>
:
:
value
"
U
must
be
convertible
to
T
"
)
;
return
storage_
.
is_populated_
?
storage_
.
value_
:
static_cast
<
T
>
(
std
:
:
forward
<
U
>
(
default_value
)
)
;
}
template
<
class
U
>
constexpr
T
value_or
(
U
&
&
default_value
)
&
&
{
static_assert
(
std
:
:
is_convertible
<
U
T
>
:
:
value
"
U
must
be
convertible
to
T
"
)
;
return
storage_
.
is_populated_
?
std
:
:
move
(
storage_
.
value_
)
:
static_cast
<
T
>
(
std
:
:
forward
<
U
>
(
default_value
)
)
;
}
void
swap
(
Optional
&
other
)
{
if
(
!
storage_
.
is_populated_
&
&
!
other
.
storage_
.
is_populated_
)
return
;
if
(
storage_
.
is_populated_
!
=
other
.
storage_
.
is_populated_
)
{
if
(
storage_
.
is_populated_
)
{
other
.
storage_
.
Init
(
std
:
:
move
(
storage_
.
value_
)
)
;
FreeIfNeeded
(
)
;
}
else
{
storage_
.
Init
(
std
:
:
move
(
other
.
storage_
.
value_
)
)
;
other
.
FreeIfNeeded
(
)
;
}
return
;
}
DCHECK
(
storage_
.
is_populated_
&
&
other
.
storage_
.
is_populated_
)
;
using
std
:
:
swap
;
swap
(
*
*
this
*
other
)
;
}
void
reset
(
)
{
FreeIfNeeded
(
)
;
}
template
<
class
.
.
.
Args
>
T
&
emplace
(
Args
&
&
.
.
.
args
)
{
FreeIfNeeded
(
)
;
storage_
.
Init
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
return
storage_
.
value_
;
}
template
<
class
U
class
.
.
.
Args
>
std
:
:
enable_if_t
<
std
:
:
is_constructible
<
T
std
:
:
initializer_list
<
U
>
&
Args
&
&
.
.
.
>
:
:
value
T
&
>
emplace
(
std
:
:
initializer_list
<
U
>
il
Args
&
&
.
.
.
args
)
{
FreeIfNeeded
(
)
;
storage_
.
Init
(
il
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
return
storage_
.
value_
;
}
private
:
using
internal
:
:
OptionalBase
<
T
>
:
:
CopyAssign
;
using
internal
:
:
OptionalBase
<
T
>
:
:
FreeIfNeeded
;
using
internal
:
:
OptionalBase
<
T
>
:
:
InitOrAssign
;
using
internal
:
:
OptionalBase
<
T
>
:
:
MoveAssign
;
using
internal
:
:
OptionalBase
<
T
>
:
:
storage_
;
}
;
template
<
class
T
class
U
>
constexpr
bool
operator
=
=
(
const
Optional
<
T
>
&
lhs
const
Optional
<
U
>
&
rhs
)
{
if
(
lhs
.
has_value
(
)
!
=
rhs
.
has_value
(
)
)
return
false
;
if
(
!
lhs
.
has_value
(
)
)
return
true
;
return
*
lhs
=
=
*
rhs
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
!
=
(
const
Optional
<
T
>
&
lhs
const
Optional
<
U
>
&
rhs
)
{
if
(
lhs
.
has_value
(
)
!
=
rhs
.
has_value
(
)
)
return
true
;
if
(
!
lhs
.
has_value
(
)
)
return
false
;
return
*
lhs
!
=
*
rhs
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
<
(
const
Optional
<
T
>
&
lhs
const
Optional
<
U
>
&
rhs
)
{
if
(
!
rhs
.
has_value
(
)
)
return
false
;
if
(
!
lhs
.
has_value
(
)
)
return
true
;
return
*
lhs
<
*
rhs
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
<
=
(
const
Optional
<
T
>
&
lhs
const
Optional
<
U
>
&
rhs
)
{
if
(
!
lhs
.
has_value
(
)
)
return
true
;
if
(
!
rhs
.
has_value
(
)
)
return
false
;
return
*
lhs
<
=
*
rhs
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
>
(
const
Optional
<
T
>
&
lhs
const
Optional
<
U
>
&
rhs
)
{
if
(
!
lhs
.
has_value
(
)
)
return
false
;
if
(
!
rhs
.
has_value
(
)
)
return
true
;
return
*
lhs
>
*
rhs
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
>
=
(
const
Optional
<
T
>
&
lhs
const
Optional
<
U
>
&
rhs
)
{
if
(
!
rhs
.
has_value
(
)
)
return
true
;
if
(
!
lhs
.
has_value
(
)
)
return
false
;
return
*
lhs
>
=
*
rhs
;
}
template
<
class
T
>
constexpr
bool
operator
=
=
(
const
Optional
<
T
>
&
opt
nullopt_t
)
{
return
!
opt
;
}
template
<
class
T
>
constexpr
bool
operator
=
=
(
nullopt_t
const
Optional
<
T
>
&
opt
)
{
return
!
opt
;
}
template
<
class
T
>
constexpr
bool
operator
!
=
(
const
Optional
<
T
>
&
opt
nullopt_t
)
{
return
opt
.
has_value
(
)
;
}
template
<
class
T
>
constexpr
bool
operator
!
=
(
nullopt_t
const
Optional
<
T
>
&
opt
)
{
return
opt
.
has_value
(
)
;
}
template
<
class
T
>
constexpr
bool
operator
<
(
const
Optional
<
T
>
&
opt
nullopt_t
)
{
return
false
;
}
template
<
class
T
>
constexpr
bool
operator
<
(
nullopt_t
const
Optional
<
T
>
&
opt
)
{
return
opt
.
has_value
(
)
;
}
template
<
class
T
>
constexpr
bool
operator
<
=
(
const
Optional
<
T
>
&
opt
nullopt_t
)
{
return
!
opt
;
}
template
<
class
T
>
constexpr
bool
operator
<
=
(
nullopt_t
const
Optional
<
T
>
&
opt
)
{
return
true
;
}
template
<
class
T
>
constexpr
bool
operator
>
(
const
Optional
<
T
>
&
opt
nullopt_t
)
{
return
opt
.
has_value
(
)
;
}
template
<
class
T
>
constexpr
bool
operator
>
(
nullopt_t
const
Optional
<
T
>
&
opt
)
{
return
false
;
}
template
<
class
T
>
constexpr
bool
operator
>
=
(
const
Optional
<
T
>
&
opt
nullopt_t
)
{
return
true
;
}
template
<
class
T
>
constexpr
bool
operator
>
=
(
nullopt_t
const
Optional
<
T
>
&
opt
)
{
return
!
opt
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
=
=
(
const
Optional
<
T
>
&
opt
const
U
&
value
)
{
return
opt
.
has_value
(
)
?
*
opt
=
=
value
:
false
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
=
=
(
const
U
&
value
const
Optional
<
T
>
&
opt
)
{
return
opt
.
has_value
(
)
?
value
=
=
*
opt
:
false
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
!
=
(
const
Optional
<
T
>
&
opt
const
U
&
value
)
{
return
opt
.
has_value
(
)
?
*
opt
!
=
value
:
true
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
!
=
(
const
U
&
value
const
Optional
<
T
>
&
opt
)
{
return
opt
.
has_value
(
)
?
value
!
=
*
opt
:
true
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
<
(
const
Optional
<
T
>
&
opt
const
U
&
value
)
{
return
opt
.
has_value
(
)
?
*
opt
<
value
:
true
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
<
(
const
U
&
value
const
Optional
<
T
>
&
opt
)
{
return
opt
.
has_value
(
)
?
value
<
*
opt
:
false
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
<
=
(
const
Optional
<
T
>
&
opt
const
U
&
value
)
{
return
opt
.
has_value
(
)
?
*
opt
<
=
value
:
true
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
<
=
(
const
U
&
value
const
Optional
<
T
>
&
opt
)
{
return
opt
.
has_value
(
)
?
value
<
=
*
opt
:
false
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
>
(
const
Optional
<
T
>
&
opt
const
U
&
value
)
{
return
opt
.
has_value
(
)
?
*
opt
>
value
:
false
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
>
(
const
U
&
value
const
Optional
<
T
>
&
opt
)
{
return
opt
.
has_value
(
)
?
value
>
*
opt
:
true
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
>
=
(
const
Optional
<
T
>
&
opt
const
U
&
value
)
{
return
opt
.
has_value
(
)
?
*
opt
>
=
value
:
false
;
}
template
<
class
T
class
U
>
constexpr
bool
operator
>
=
(
const
U
&
value
const
Optional
<
T
>
&
opt
)
{
return
opt
.
has_value
(
)
?
value
>
=
*
opt
:
true
;
}
template
<
class
T
>
constexpr
Optional
<
std
:
:
decay_t
<
T
>
>
make_optional
(
T
&
&
value
)
{
return
Optional
<
std
:
:
decay_t
<
T
>
>
(
std
:
:
forward
<
T
>
(
value
)
)
;
}
template
<
class
T
class
.
.
.
Args
>
constexpr
Optional
<
T
>
make_optional
(
Args
&
&
.
.
.
args
)
{
return
Optional
<
T
>
(
in_place
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
template
<
class
T
class
U
class
.
.
.
Args
>
constexpr
Optional
<
T
>
make_optional
(
std
:
:
initializer_list
<
U
>
il
Args
&
&
.
.
.
args
)
{
return
Optional
<
T
>
(
in_place
il
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
template
<
class
T
>
std
:
:
enable_if_t
<
std
:
:
is_move_constructible
<
T
>
:
:
value
&
&
internal
:
:
IsSwappable
<
T
>
:
:
value
>
swap
(
Optional
<
T
>
&
lhs
Optional
<
T
>
&
rhs
)
{
lhs
.
swap
(
rhs
)
;
}
}
namespace
std
{
template
<
class
T
>
struct
hash
<
base
:
:
Optional
<
T
>
>
{
size_t
operator
(
)
(
const
base
:
:
Optional
<
T
>
&
opt
)
const
{
return
opt
=
=
base
:
:
nullopt
?
0
:
std
:
:
hash
<
T
>
(
)
(
*
opt
)
;
}
}
;
}
#
endif
