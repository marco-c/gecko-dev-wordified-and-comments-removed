#
ifndef
BASE_SCOPED_CLEAR_LAST_ERROR_H_
#
define
BASE_SCOPED_CLEAR_LAST_ERROR_H_
#
include
<
errno
.
h
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
namespace
internal
{
class
BASE_EXPORT
ScopedClearLastErrorBase
{
public
:
ScopedClearLastErrorBase
(
)
:
last_errno_
(
errno
)
{
errno
=
0
;
}
~
ScopedClearLastErrorBase
(
)
{
errno
=
last_errno_
;
}
private
:
const
int
last_errno_
;
DISALLOW_COPY_AND_ASSIGN
(
ScopedClearLastErrorBase
)
;
}
;
#
if
defined
(
OS_WIN
)
class
BASE_EXPORT
ScopedClearLastError
:
public
ScopedClearLastErrorBase
{
public
:
ScopedClearLastError
(
)
;
~
ScopedClearLastError
(
)
;
private
:
unsigned
int
last_system_error_
;
DISALLOW_COPY_AND_ASSIGN
(
ScopedClearLastError
)
;
}
;
#
elif
defined
(
OS_POSIX
)
|
|
defined
(
OS_FUCHSIA
)
using
ScopedClearLastError
=
ScopedClearLastErrorBase
;
#
endif
}
}
#
endif
