#
ifndef
BASE_METRICS_FIELD_TRIAL_PARAMS_H_
#
define
BASE_METRICS_FIELD_TRIAL_PARAMS_H_
#
include
<
map
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
feature_list
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
memory
/
raw_ptr_exclusion
.
h
"
#
include
"
base
/
notreached
.
h
"
#
include
"
base
/
time
/
time
.
h
"
namespace
base
{
typedef
std
:
:
map
<
std
:
:
string
std
:
:
string
>
FieldTrialParams
;
typedef
std
:
:
string
(
*
FieldTrialParamsDecodeStringFunc
)
(
const
std
:
:
string
&
str
)
;
BASE_EXPORT
std
:
:
string
UnescapeValue
(
const
std
:
:
string
&
value
)
;
BASE_EXPORT
bool
AssociateFieldTrialParams
(
const
std
:
:
string
&
trial_name
const
std
:
:
string
&
group_name
const
FieldTrialParams
&
params
)
;
BASE_EXPORT
bool
AssociateFieldTrialParamsFromString
(
const
std
:
:
string
&
params_string
FieldTrialParamsDecodeStringFunc
decode_data_func
)
;
BASE_EXPORT
bool
GetFieldTrialParams
(
const
std
:
:
string
&
trial_name
FieldTrialParams
*
params
)
;
BASE_EXPORT
bool
GetFieldTrialParamsByFeature
(
const
base
:
:
Feature
&
feature
FieldTrialParams
*
params
)
;
BASE_EXPORT
std
:
:
string
GetFieldTrialParamValue
(
const
std
:
:
string
&
trial_name
const
std
:
:
string
&
param_name
)
;
BASE_EXPORT
std
:
:
string
GetFieldTrialParamValueByFeature
(
const
base
:
:
Feature
&
feature
const
std
:
:
string
&
param_name
)
;
BASE_EXPORT
int
GetFieldTrialParamByFeatureAsInt
(
const
base
:
:
Feature
&
feature
const
std
:
:
string
&
param_name
int
default_value
)
;
BASE_EXPORT
double
GetFieldTrialParamByFeatureAsDouble
(
const
base
:
:
Feature
&
feature
const
std
:
:
string
&
param_name
double
default_value
)
;
BASE_EXPORT
bool
GetFieldTrialParamByFeatureAsBool
(
const
base
:
:
Feature
&
feature
const
std
:
:
string
&
param_name
bool
default_value
)
;
BASE_EXPORT
base
:
:
TimeDelta
GetFieldTrialParamByFeatureAsTimeDelta
(
const
Feature
&
feature
const
std
:
:
string
&
param_name
base
:
:
TimeDelta
default_value
)
;
template
<
typename
T
bool
IsEnum
=
std
:
:
is_enum_v
<
T
>
>
struct
FeatureParam
{
static_assert
(
!
std
:
:
is_same_v
<
T
T
>
"
unsupported
FeatureParam
<
>
type
"
)
;
}
;
template
<
>
struct
FeatureParam
<
std
:
:
string
>
{
constexpr
FeatureParam
(
const
Feature
*
feature
const
char
*
name
const
char
*
default_value
)
:
feature
(
feature
)
name
(
name
)
default_value
(
default_value
)
{
}
BASE_EXPORT
std
:
:
string
Get
(
)
const
;
RAW_PTR_EXCLUSION
const
Feature
*
const
feature
;
const
char
*
const
name
;
const
char
*
const
default_value
;
}
;
template
<
>
struct
FeatureParam
<
double
>
{
constexpr
FeatureParam
(
const
Feature
*
feature
const
char
*
name
double
default_value
)
:
feature
(
feature
)
name
(
name
)
default_value
(
default_value
)
{
}
BASE_EXPORT
double
Get
(
)
const
;
RAW_PTR_EXCLUSION
const
Feature
*
const
feature
;
const
char
*
const
name
;
const
double
default_value
;
}
;
template
<
>
struct
FeatureParam
<
int
>
{
constexpr
FeatureParam
(
const
Feature
*
feature
const
char
*
name
int
default_value
)
:
feature
(
feature
)
name
(
name
)
default_value
(
default_value
)
{
}
BASE_EXPORT
int
Get
(
)
const
;
RAW_PTR_EXCLUSION
const
Feature
*
const
feature
;
const
char
*
const
name
;
const
int
default_value
;
}
;
template
<
>
struct
FeatureParam
<
bool
>
{
constexpr
FeatureParam
(
const
Feature
*
feature
const
char
*
name
bool
default_value
)
:
feature
(
feature
)
name
(
name
)
default_value
(
default_value
)
{
}
BASE_EXPORT
bool
Get
(
)
const
;
RAW_PTR_EXCLUSION
const
Feature
*
const
feature
;
const
char
*
const
name
;
const
bool
default_value
;
}
;
template
<
>
struct
FeatureParam
<
base
:
:
TimeDelta
>
{
constexpr
FeatureParam
(
const
Feature
*
feature
const
char
*
name
base
:
:
TimeDelta
default_value
)
:
feature
(
feature
)
name
(
name
)
default_value
(
default_value
)
{
}
BASE_EXPORT
base
:
:
TimeDelta
Get
(
)
const
;
RAW_PTR_EXCLUSION
const
Feature
*
const
feature
;
const
char
*
const
name
;
const
base
:
:
TimeDelta
default_value
;
}
;
BASE_EXPORT
void
LogInvalidEnumValue
(
const
Feature
&
feature
const
std
:
:
string
&
param_name
const
std
:
:
string
&
value_as_string
int
default_value_as_int
)
;
template
<
typename
Enum
>
struct
FeatureParam
<
Enum
true
>
{
struct
Option
{
constexpr
Option
(
Enum
value
const
char
*
name
)
:
value
(
value
)
name
(
name
)
{
}
const
Enum
value
;
const
char
*
const
name
;
}
;
template
<
size_t
option_count
>
constexpr
FeatureParam
(
const
Feature
*
feature
const
char
*
name
const
Enum
default_value
const
Option
(
*
options
)
[
option_count
]
)
:
feature
(
feature
)
name
(
name
)
default_value
(
default_value
)
options
(
*
options
)
option_count
(
option_count
)
{
static_assert
(
option_count
>
=
1
"
FeatureParam
<
enum
>
has
no
options
"
)
;
}
Enum
Get
(
)
const
{
std
:
:
string
value
=
GetFieldTrialParamValueByFeature
(
*
feature
name
)
;
if
(
value
.
empty
(
)
)
return
default_value
;
for
(
size_t
i
=
0
;
i
<
option_count
;
+
+
i
)
{
if
(
value
=
=
options
[
i
]
.
name
)
return
options
[
i
]
.
value
;
}
LogInvalidEnumValue
(
*
feature
name
value
static_cast
<
int
>
(
default_value
)
)
;
return
default_value
;
}
std
:
:
string
GetName
(
Enum
value
)
const
{
for
(
size_t
i
=
0
;
i
<
option_count
;
+
+
i
)
{
if
(
value
=
=
options
[
i
]
.
value
)
return
options
[
i
]
.
name
;
}
NOTREACHED
(
)
;
return
"
"
;
}
RAW_PTR_EXCLUSION
const
base
:
:
Feature
*
const
feature
;
const
char
*
const
name
;
const
Enum
default_value
;
RAW_PTR_EXCLUSION
const
Option
*
const
options
;
const
size_t
option_count
;
}
;
}
#
endif
