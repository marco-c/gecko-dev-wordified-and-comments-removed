#
ifndef
BASE_CONTAINERS_ADAPTERS_H_
#
define
BASE_CONTAINERS_ADAPTERS_H_
#
include
<
stddef
.
h
>
#
include
<
iterator
>
#
include
"
base
/
macros
.
h
"
namespace
base
{
namespace
internal
{
template
<
typename
T
>
class
ReversedAdapter
{
public
:
using
Iterator
=
decltype
(
static_cast
<
T
*
>
(
nullptr
)
-
>
rbegin
(
)
)
;
explicit
ReversedAdapter
(
T
&
t
)
:
t_
(
t
)
{
}
ReversedAdapter
(
const
ReversedAdapter
&
ra
)
:
t_
(
ra
.
t_
)
{
}
Iterator
begin
(
)
const
{
return
t_
.
rbegin
(
)
;
}
Iterator
end
(
)
const
{
return
t_
.
rend
(
)
;
}
private
:
T
&
t_
;
DISALLOW_ASSIGN
(
ReversedAdapter
)
;
}
;
template
<
typename
T
size_t
N
>
class
ReversedAdapter
<
T
[
N
]
>
{
public
:
using
Iterator
=
std
:
:
reverse_iterator
<
T
*
>
;
explicit
ReversedAdapter
(
T
(
&
t
)
[
N
]
)
:
t_
(
t
)
{
}
ReversedAdapter
(
const
ReversedAdapter
&
ra
)
:
t_
(
ra
.
t_
)
{
}
Iterator
begin
(
)
const
{
return
Iterator
(
&
t_
[
N
]
)
;
}
Iterator
end
(
)
const
{
return
Iterator
(
&
t_
[
0
]
)
;
}
private
:
T
(
&
t_
)
[
N
]
;
DISALLOW_ASSIGN
(
ReversedAdapter
)
;
}
;
}
template
<
typename
T
>
internal
:
:
ReversedAdapter
<
T
>
Reversed
(
T
&
t
)
{
return
internal
:
:
ReversedAdapter
<
T
>
(
t
)
;
}
}
#
endif
