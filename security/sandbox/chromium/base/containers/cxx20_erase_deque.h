#
ifndef
BASE_CONTAINERS_CXX20_ERASE_DEQUE_H_
#
define
BASE_CONTAINERS_CXX20_ERASE_DEQUE_H_
#
include
<
algorithm
>
#
include
<
deque
>
#
include
<
iterator
>
namespace
base
{
template
<
class
T
class
Allocator
class
Value
>
size_t
Erase
(
std
:
:
deque
<
T
Allocator
>
&
container
const
Value
&
value
)
{
auto
it
=
std
:
:
remove
(
container
.
begin
(
)
container
.
end
(
)
value
)
;
size_t
removed
=
std
:
:
distance
(
it
container
.
end
(
)
)
;
container
.
erase
(
it
container
.
end
(
)
)
;
return
removed
;
}
template
<
class
T
class
Allocator
class
Predicate
>
size_t
EraseIf
(
std
:
:
deque
<
T
Allocator
>
&
container
Predicate
pred
)
{
auto
it
=
std
:
:
remove_if
(
container
.
begin
(
)
container
.
end
(
)
pred
)
;
size_t
removed
=
std
:
:
distance
(
it
container
.
end
(
)
)
;
container
.
erase
(
it
container
.
end
(
)
)
;
return
removed
;
}
}
#
endif
