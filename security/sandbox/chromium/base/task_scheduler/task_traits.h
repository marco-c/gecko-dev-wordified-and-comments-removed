#
ifndef
BASE_TASK_SCHEDULER_TASK_TRAITS_H_
#
define
BASE_TASK_SCHEDULER_TASK_TRAITS_H_
#
include
<
stdint
.
h
>
#
include
<
iosfwd
>
#
include
<
type_traits
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
task_scheduler
/
task_traits_details
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
enum
class
TaskPriority
{
LOWEST
=
0
BACKGROUND
=
LOWEST
USER_VISIBLE
USER_BLOCKING
HIGHEST
=
USER_BLOCKING
}
;
enum
class
TaskShutdownBehavior
{
CONTINUE_ON_SHUTDOWN
SKIP_ON_SHUTDOWN
BLOCK_SHUTDOWN
}
;
struct
MayBlock
{
}
;
struct
WithBaseSyncPrimitives
{
}
;
class
BASE_EXPORT
TaskTraits
{
private
:
struct
ValidTrait
{
ValidTrait
(
TaskPriority
)
{
}
ValidTrait
(
TaskShutdownBehavior
)
{
}
ValidTrait
(
MayBlock
)
{
}
ValidTrait
(
WithBaseSyncPrimitives
)
{
}
}
;
public
:
template
<
class
.
.
.
ArgTypes
class
CheckArgumentsAreValid
=
internal
:
:
InitTypes
<
decltype
(
ValidTrait
(
std
:
:
declval
<
ArgTypes
>
(
)
)
)
.
.
.
>
>
constexpr
TaskTraits
(
ArgTypes
.
.
.
args
)
:
priority_set_explicitly_
(
internal
:
:
HasArgOfType
<
TaskPriority
ArgTypes
.
.
.
>
:
:
value
)
priority_
(
internal
:
:
GetValueFromArgList
(
internal
:
:
EnumArgGetter
<
TaskPriority
TaskPriority
:
:
USER_VISIBLE
>
(
)
args
.
.
.
)
)
shutdown_behavior_set_explicitly_
(
internal
:
:
HasArgOfType
<
TaskShutdownBehavior
ArgTypes
.
.
.
>
:
:
value
)
shutdown_behavior_
(
internal
:
:
GetValueFromArgList
(
internal
:
:
EnumArgGetter
<
TaskShutdownBehavior
TaskShutdownBehavior
:
:
SKIP_ON_SHUTDOWN
>
(
)
args
.
.
.
)
)
may_block_
(
internal
:
:
GetValueFromArgList
(
internal
:
:
BooleanArgGetter
<
MayBlock
>
(
)
args
.
.
.
)
)
with_base_sync_primitives_
(
internal
:
:
GetValueFromArgList
(
internal
:
:
BooleanArgGetter
<
WithBaseSyncPrimitives
>
(
)
args
.
.
.
)
)
{
}
constexpr
TaskTraits
(
const
TaskTraits
&
other
)
=
default
;
TaskTraits
&
operator
=
(
const
TaskTraits
&
other
)
=
default
;
static
constexpr
TaskTraits
Override
(
const
TaskTraits
&
left
const
TaskTraits
&
right
)
{
return
TaskTraits
(
left
right
)
;
}
constexpr
bool
priority_set_explicitly
(
)
const
{
return
priority_set_explicitly_
;
}
constexpr
TaskPriority
priority
(
)
const
{
return
priority_
;
}
constexpr
bool
shutdown_behavior_set_explicitly
(
)
const
{
return
shutdown_behavior_set_explicitly_
;
}
constexpr
TaskShutdownBehavior
shutdown_behavior
(
)
const
{
return
shutdown_behavior_
;
}
constexpr
bool
may_block
(
)
const
{
return
may_block_
;
}
constexpr
bool
with_base_sync_primitives
(
)
const
{
return
with_base_sync_primitives_
;
}
private
:
constexpr
TaskTraits
(
const
TaskTraits
&
left
const
TaskTraits
&
right
)
:
priority_set_explicitly_
(
left
.
priority_set_explicitly_
|
|
right
.
priority_set_explicitly_
)
priority_
(
right
.
priority_set_explicitly_
?
right
.
priority_
:
left
.
priority_
)
shutdown_behavior_set_explicitly_
(
left
.
shutdown_behavior_set_explicitly_
|
|
right
.
shutdown_behavior_set_explicitly_
)
shutdown_behavior_
(
right
.
shutdown_behavior_set_explicitly_
?
right
.
shutdown_behavior_
:
left
.
shutdown_behavior_
)
may_block_
(
left
.
may_block_
|
|
right
.
may_block_
)
with_base_sync_primitives_
(
left
.
with_base_sync_primitives_
|
|
right
.
with_base_sync_primitives_
)
{
}
bool
priority_set_explicitly_
;
TaskPriority
priority_
;
bool
shutdown_behavior_set_explicitly_
;
TaskShutdownBehavior
shutdown_behavior_
;
bool
may_block_
;
bool
with_base_sync_primitives_
;
}
;
BASE_EXPORT
const
char
*
TaskPriorityToString
(
TaskPriority
task_priority
)
;
BASE_EXPORT
const
char
*
TaskShutdownBehaviorToString
(
TaskShutdownBehavior
task_priority
)
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
TaskPriority
&
shutdown_behavior
)
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
TaskShutdownBehavior
&
shutdown_behavior
)
;
}
#
endif
