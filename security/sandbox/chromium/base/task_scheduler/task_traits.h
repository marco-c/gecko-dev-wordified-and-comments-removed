#
ifndef
BASE_TASK_SCHEDULER_TASK_TRAITS_H_
#
define
BASE_TASK_SCHEDULER_TASK_TRAITS_H_
#
include
<
stdint
.
h
>
#
include
<
iosfwd
>
#
include
"
base
/
base_export
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
enum
class
TaskPriority
{
LOWEST
=
0
BACKGROUND
=
LOWEST
USER_VISIBLE
USER_BLOCKING
HIGHEST
=
USER_BLOCKING
}
;
enum
class
TaskShutdownBehavior
{
CONTINUE_ON_SHUTDOWN
SKIP_ON_SHUTDOWN
BLOCK_SHUTDOWN
}
;
class
BASE_EXPORT
TaskTraits
{
public
:
TaskTraits
(
)
;
TaskTraits
(
const
TaskTraits
&
other
)
=
default
;
TaskTraits
&
operator
=
(
const
TaskTraits
&
other
)
=
default
;
~
TaskTraits
(
)
;
TaskTraits
&
WithFileIO
(
)
;
TaskTraits
&
WithPriority
(
TaskPriority
priority
)
;
TaskTraits
&
WithShutdownBehavior
(
TaskShutdownBehavior
shutdown_behavior
)
;
bool
with_file_io
(
)
const
{
return
with_file_io_
;
}
TaskPriority
priority
(
)
const
{
return
priority_
;
}
TaskShutdownBehavior
shutdown_behavior
(
)
const
{
return
shutdown_behavior_
;
}
private
:
bool
with_file_io_
;
TaskPriority
priority_
;
TaskShutdownBehavior
shutdown_behavior_
;
}
;
BASE_EXPORT
const
char
*
TaskPriorityToString
(
TaskPriority
task_priority
)
;
BASE_EXPORT
const
char
*
TaskShutdownBehaviorToString
(
TaskShutdownBehavior
task_priority
)
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
TaskPriority
&
shutdown_behavior
)
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
TaskShutdownBehavior
&
shutdown_behavior
)
;
}
#
endif
