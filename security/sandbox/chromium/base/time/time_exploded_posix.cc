#
include
"
base
/
time
/
time
.
h
"
#
include
<
stdint
.
h
>
#
include
<
sys
/
time
.
h
>
#
include
<
time
.
h
>
#
if
defined
(
OS_ANDROID
)
&
&
!
defined
(
__LP64__
)
#
include
<
time64
.
h
>
#
endif
#
include
<
unistd
.
h
>
#
include
<
limits
>
#
include
"
base
/
numerics
/
safe_math
.
h
"
#
include
"
base
/
synchronization
/
lock
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_ANDROID
)
#
include
"
base
/
os_compat_android
.
h
"
#
elif
defined
(
OS_NACL
)
#
include
"
base
/
os_compat_nacl
.
h
"
#
endif
#
if
defined
(
OS_MACOSX
)
#
error
"
This
implementation
is
for
POSIX
platforms
other
than
Mac
.
"
#
endif
namespace
{
base
:
:
Lock
*
GetSysTimeToTimeStructLock
(
)
{
static
auto
*
lock
=
new
base
:
:
Lock
(
)
;
return
lock
;
}
#
if
defined
(
OS_ANDROID
)
&
&
!
defined
(
__LP64__
)
typedef
time64_t
SysTime
;
SysTime
SysTimeFromTimeStruct
(
struct
tm
*
timestruct
bool
is_local
)
{
base
:
:
AutoLock
locked
(
*
GetSysTimeToTimeStructLock
(
)
)
;
if
(
is_local
)
return
mktime64
(
timestruct
)
;
else
return
timegm64
(
timestruct
)
;
}
void
SysTimeToTimeStruct
(
SysTime
t
struct
tm
*
timestruct
bool
is_local
)
{
base
:
:
AutoLock
locked
(
*
GetSysTimeToTimeStructLock
(
)
)
;
if
(
is_local
)
localtime64_r
(
&
t
timestruct
)
;
else
gmtime64_r
(
&
t
timestruct
)
;
}
#
elif
defined
(
OS_AIX
)
time_t
aix_timegm
(
struct
tm
*
tm
)
{
time_t
ret
;
char
*
tz
;
tz
=
getenv
(
"
TZ
"
)
;
if
(
tz
)
{
tz
=
strdup
(
tz
)
;
}
setenv
(
"
TZ
"
"
GMT0
"
1
)
;
tzset
(
)
;
ret
=
mktime
(
tm
)
;
if
(
tz
)
{
setenv
(
"
TZ
"
tz
1
)
;
free
(
tz
)
;
}
else
{
unsetenv
(
"
TZ
"
)
;
}
tzset
(
)
;
return
ret
;
}
typedef
time_t
SysTime
;
SysTime
SysTimeFromTimeStruct
(
struct
tm
*
timestruct
bool
is_local
)
{
base
:
:
AutoLock
locked
(
*
GetSysTimeToTimeStructLock
(
)
)
;
if
(
is_local
)
return
mktime
(
timestruct
)
;
else
return
aix_timegm
(
timestruct
)
;
}
void
SysTimeToTimeStruct
(
SysTime
t
struct
tm
*
timestruct
bool
is_local
)
{
base
:
:
AutoLock
locked
(
*
GetSysTimeToTimeStructLock
(
)
)
;
if
(
is_local
)
localtime_r
(
&
t
timestruct
)
;
else
gmtime_r
(
&
t
timestruct
)
;
}
#
else
typedef
time_t
SysTime
;
SysTime
SysTimeFromTimeStruct
(
struct
tm
*
timestruct
bool
is_local
)
{
base
:
:
AutoLock
locked
(
*
GetSysTimeToTimeStructLock
(
)
)
;
if
(
is_local
)
return
mktime
(
timestruct
)
;
else
return
timegm
(
timestruct
)
;
}
void
SysTimeToTimeStruct
(
SysTime
t
struct
tm
*
timestruct
bool
is_local
)
{
base
:
:
AutoLock
locked
(
*
GetSysTimeToTimeStructLock
(
)
)
;
if
(
is_local
)
localtime_r
(
&
t
timestruct
)
;
else
gmtime_r
(
&
t
timestruct
)
;
}
#
endif
}
namespace
base
{
void
Time
:
:
Explode
(
bool
is_local
Exploded
*
exploded
)
const
{
int64_t
microseconds
=
us_
-
kTimeTToMicrosecondsOffset
;
int64_t
milliseconds
;
SysTime
seconds
;
int
millisecond
;
if
(
microseconds
>
=
0
)
{
milliseconds
=
microseconds
/
kMicrosecondsPerMillisecond
;
seconds
=
milliseconds
/
kMillisecondsPerSecond
;
millisecond
=
milliseconds
%
kMillisecondsPerSecond
;
}
else
{
milliseconds
=
(
microseconds
-
kMicrosecondsPerMillisecond
+
1
)
/
kMicrosecondsPerMillisecond
;
seconds
=
(
milliseconds
-
kMillisecondsPerSecond
+
1
)
/
kMillisecondsPerSecond
;
millisecond
=
milliseconds
%
kMillisecondsPerSecond
;
if
(
millisecond
<
0
)
millisecond
+
=
kMillisecondsPerSecond
;
}
struct
tm
timestruct
;
SysTimeToTimeStruct
(
seconds
&
timestruct
is_local
)
;
exploded
-
>
year
=
timestruct
.
tm_year
+
1900
;
exploded
-
>
month
=
timestruct
.
tm_mon
+
1
;
exploded
-
>
day_of_week
=
timestruct
.
tm_wday
;
exploded
-
>
day_of_month
=
timestruct
.
tm_mday
;
exploded
-
>
hour
=
timestruct
.
tm_hour
;
exploded
-
>
minute
=
timestruct
.
tm_min
;
exploded
-
>
second
=
timestruct
.
tm_sec
;
exploded
-
>
millisecond
=
millisecond
;
}
bool
Time
:
:
FromExploded
(
bool
is_local
const
Exploded
&
exploded
Time
*
time
)
{
CheckedNumeric
<
int
>
month
=
exploded
.
month
;
month
-
-
;
CheckedNumeric
<
int
>
year
=
exploded
.
year
;
year
-
=
1900
;
if
(
!
month
.
IsValid
(
)
|
|
!
year
.
IsValid
(
)
)
{
*
time
=
Time
(
0
)
;
return
false
;
}
struct
tm
timestruct
;
timestruct
.
tm_sec
=
exploded
.
second
;
timestruct
.
tm_min
=
exploded
.
minute
;
timestruct
.
tm_hour
=
exploded
.
hour
;
timestruct
.
tm_mday
=
exploded
.
day_of_month
;
timestruct
.
tm_mon
=
month
.
ValueOrDie
(
)
;
timestruct
.
tm_year
=
year
.
ValueOrDie
(
)
;
timestruct
.
tm_wday
=
exploded
.
day_of_week
;
timestruct
.
tm_yday
=
0
;
timestruct
.
tm_isdst
=
-
1
;
#
if
!
defined
(
OS_NACL
)
&
&
!
defined
(
OS_SOLARIS
)
&
&
!
defined
(
OS_AIX
)
timestruct
.
tm_gmtoff
=
0
;
timestruct
.
tm_zone
=
NULL
;
#
endif
SysTime
seconds
;
struct
tm
timestruct0
=
timestruct
;
seconds
=
SysTimeFromTimeStruct
(
&
timestruct
is_local
)
;
if
(
seconds
=
=
-
1
)
{
timestruct
=
timestruct0
;
timestruct
.
tm_isdst
=
0
;
int64_t
seconds_isdst0
=
SysTimeFromTimeStruct
(
&
timestruct
is_local
)
;
timestruct
=
timestruct0
;
timestruct
.
tm_isdst
=
1
;
int64_t
seconds_isdst1
=
SysTimeFromTimeStruct
(
&
timestruct
is_local
)
;
if
(
seconds_isdst0
<
0
)
seconds
=
seconds_isdst1
;
else
if
(
seconds_isdst1
<
0
)
seconds
=
seconds_isdst0
;
else
seconds
=
std
:
:
min
(
seconds_isdst0
seconds_isdst1
)
;
}
int64_t
milliseconds
=
0
;
if
(
seconds
=
=
-
1
&
&
(
exploded
.
year
<
1969
|
|
exploded
.
year
>
1970
)
)
{
const
int64_t
min_seconds
=
(
sizeof
(
SysTime
)
<
sizeof
(
int64_t
)
)
?
std
:
:
numeric_limits
<
SysTime
>
:
:
min
(
)
:
std
:
:
numeric_limits
<
int32_t
>
:
:
min
(
)
;
const
int64_t
max_seconds
=
(
sizeof
(
SysTime
)
<
sizeof
(
int64_t
)
)
?
std
:
:
numeric_limits
<
SysTime
>
:
:
max
(
)
:
std
:
:
numeric_limits
<
int32_t
>
:
:
max
(
)
;
if
(
exploded
.
year
<
1969
)
{
milliseconds
=
min_seconds
*
kMillisecondsPerSecond
;
}
else
{
milliseconds
=
max_seconds
*
kMillisecondsPerSecond
;
milliseconds
+
=
(
kMillisecondsPerSecond
-
1
)
;
}
}
else
{
base
:
:
CheckedNumeric
<
int64_t
>
checked_millis
=
seconds
;
checked_millis
*
=
kMillisecondsPerSecond
;
checked_millis
+
=
exploded
.
millisecond
;
if
(
!
checked_millis
.
IsValid
(
)
)
{
*
time
=
base
:
:
Time
(
0
)
;
return
false
;
}
milliseconds
=
checked_millis
.
ValueOrDie
(
)
;
}
base
:
:
CheckedNumeric
<
int64_t
>
checked_microseconds_win_epoch
=
milliseconds
;
checked_microseconds_win_epoch
*
=
kMicrosecondsPerMillisecond
;
checked_microseconds_win_epoch
+
=
kTimeTToMicrosecondsOffset
;
if
(
!
checked_microseconds_win_epoch
.
IsValid
(
)
)
{
*
time
=
base
:
:
Time
(
0
)
;
return
false
;
}
base
:
:
Time
converted_time
(
checked_microseconds_win_epoch
.
ValueOrDie
(
)
)
;
base
:
:
Time
:
:
Exploded
to_exploded
;
if
(
!
is_local
)
converted_time
.
UTCExplode
(
&
to_exploded
)
;
else
converted_time
.
LocalExplode
(
&
to_exploded
)
;
if
(
ExplodedMostlyEquals
(
to_exploded
exploded
)
)
{
*
time
=
converted_time
;
return
true
;
}
*
time
=
Time
(
0
)
;
return
false
;
}
}
