#
include
"
base
/
time
/
time
.
h
"
#
include
<
stdint
.
h
>
#
include
<
sys
/
time
.
h
>
#
include
<
time
.
h
>
#
if
defined
(
OS_ANDROID
)
&
&
!
defined
(
__LP64__
)
#
include
<
time64
.
h
>
#
endif
#
include
<
unistd
.
h
>
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
numerics
/
safe_math
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_FUCHSIA
)
|
|
defined
(
OS_MACOSX
)
#
error
"
This
implementation
is
for
POSIX
platforms
other
than
Fuchsia
or
Mac
.
"
#
endif
namespace
{
int64_t
ConvertTimespecToMicros
(
const
struct
timespec
&
ts
)
{
if
(
sizeof
(
ts
.
tv_sec
)
<
=
4
&
&
sizeof
(
ts
.
tv_nsec
)
<
=
8
)
{
int64_t
result
=
ts
.
tv_sec
;
result
*
=
base
:
:
Time
:
:
kMicrosecondsPerSecond
;
result
+
=
(
ts
.
tv_nsec
/
base
:
:
Time
:
:
kNanosecondsPerMicrosecond
)
;
return
result
;
}
else
{
base
:
:
CheckedNumeric
<
int64_t
>
result
(
ts
.
tv_sec
)
;
result
*
=
base
:
:
Time
:
:
kMicrosecondsPerSecond
;
result
+
=
(
ts
.
tv_nsec
/
base
:
:
Time
:
:
kNanosecondsPerMicrosecond
)
;
return
result
.
ValueOrDie
(
)
;
}
}
#
if
(
defined
(
OS_POSIX
)
&
&
defined
(
_POSIX_MONOTONIC_CLOCK
)
&
&
\
_POSIX_MONOTONIC_CLOCK
>
=
0
)
|
|
\
defined
(
OS_BSD
)
|
|
defined
(
OS_ANDROID
)
int64_t
ClockNow
(
clockid_t
clk_id
)
{
struct
timespec
ts
;
CHECK
(
clock_gettime
(
clk_id
&
ts
)
=
=
0
)
;
return
ConvertTimespecToMicros
(
ts
)
;
}
#
else
#
error
No
usable
tick
clock
function
on
this
platform
.
#
endif
}
namespace
base
{
Time
Time
:
:
Now
(
)
{
struct
timeval
tv
;
struct
timezone
tz
=
{
0
0
}
;
CHECK
(
gettimeofday
(
&
tv
&
tz
)
=
=
0
)
;
return
Time
(
(
tv
.
tv_sec
*
kMicrosecondsPerSecond
+
tv
.
tv_usec
)
+
kTimeTToMicrosecondsOffset
)
;
}
Time
Time
:
:
NowFromSystemTime
(
)
{
return
Now
(
)
;
}
TimeTicks
TimeTicks
:
:
Now
(
)
{
return
TimeTicks
(
ClockNow
(
CLOCK_MONOTONIC
)
)
;
}
TimeTicks
:
:
Clock
TimeTicks
:
:
GetClock
(
)
{
return
Clock
:
:
LINUX_CLOCK_MONOTONIC
;
}
bool
TimeTicks
:
:
IsHighResolution
(
)
{
return
true
;
}
bool
TimeTicks
:
:
IsConsistentAcrossProcesses
(
)
{
return
true
;
}
ThreadTicks
ThreadTicks
:
:
Now
(
)
{
#
if
(
defined
(
_POSIX_THREAD_CPUTIME
)
&
&
(
_POSIX_THREAD_CPUTIME
>
=
0
)
)
|
|
\
defined
(
OS_ANDROID
)
return
ThreadTicks
(
ClockNow
(
CLOCK_THREAD_CPUTIME_ID
)
)
;
#
else
NOTREACHED
(
)
;
return
ThreadTicks
(
)
;
#
endif
}
}
