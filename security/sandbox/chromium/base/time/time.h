#
ifndef
BASE_TIME_TIME_H_
#
define
BASE_TIME_TIME_H_
#
include
<
stdint
.
h
>
#
include
<
time
.
h
>
#
include
<
iosfwd
>
#
include
<
limits
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
numerics
/
safe_math
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_MACOSX
)
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
undef
TYPE_BOOL
#
endif
#
if
defined
(
OS_POSIX
)
#
include
<
unistd
.
h
>
#
include
<
sys
/
time
.
h
>
#
endif
#
if
defined
(
OS_WIN
)
#
include
<
windows
.
h
>
#
include
"
base
/
gtest_prod_util
.
h
"
#
endif
namespace
base
{
class
TimeDelta
;
namespace
time_internal
{
BASE_EXPORT
int64_t
SaturatedAdd
(
TimeDelta
delta
int64_t
value
)
;
BASE_EXPORT
int64_t
SaturatedSub
(
TimeDelta
delta
int64_t
value
)
;
BASE_EXPORT
int64_t
FromCheckedNumeric
(
const
CheckedNumeric
<
int64_t
>
value
)
;
}
class
BASE_EXPORT
TimeDelta
{
public
:
TimeDelta
(
)
:
delta_
(
0
)
{
}
static
TimeDelta
FromDays
(
int
days
)
;
static
TimeDelta
FromHours
(
int
hours
)
;
static
TimeDelta
FromMinutes
(
int
minutes
)
;
static
TimeDelta
FromSeconds
(
int64_t
secs
)
;
static
TimeDelta
FromMilliseconds
(
int64_t
ms
)
;
static
TimeDelta
FromSecondsD
(
double
secs
)
;
static
TimeDelta
FromMillisecondsD
(
double
ms
)
;
static
TimeDelta
FromMicroseconds
(
int64_t
us
)
;
#
if
defined
(
OS_WIN
)
static
TimeDelta
FromQPCValue
(
LONGLONG
qpc_value
)
;
#
endif
static
TimeDelta
FromInternalValue
(
int64_t
delta
)
{
return
TimeDelta
(
delta
)
;
}
static
TimeDelta
Max
(
)
;
int64_t
ToInternalValue
(
)
const
{
return
delta_
;
}
TimeDelta
magnitude
(
)
const
{
const
int64_t
mask
=
delta_
>
>
(
sizeof
(
delta_
)
*
8
-
1
)
;
return
TimeDelta
(
(
delta_
+
mask
)
^
mask
)
;
}
bool
is_zero
(
)
const
{
return
delta_
=
=
0
;
}
bool
is_max
(
)
const
{
return
delta_
=
=
std
:
:
numeric_limits
<
int64_t
>
:
:
max
(
)
;
}
#
if
defined
(
OS_POSIX
)
struct
timespec
ToTimeSpec
(
)
const
;
#
endif
int
InDays
(
)
const
;
int
InHours
(
)
const
;
int
InMinutes
(
)
const
;
double
InSecondsF
(
)
const
;
int64_t
InSeconds
(
)
const
;
double
InMillisecondsF
(
)
const
;
int64_t
InMilliseconds
(
)
const
;
int64_t
InMillisecondsRoundedUp
(
)
const
;
int64_t
InMicroseconds
(
)
const
;
TimeDelta
&
operator
=
(
TimeDelta
other
)
{
delta_
=
other
.
delta_
;
return
*
this
;
}
TimeDelta
operator
+
(
TimeDelta
other
)
const
{
return
TimeDelta
(
time_internal
:
:
SaturatedAdd
(
*
this
other
.
delta_
)
)
;
}
TimeDelta
operator
-
(
TimeDelta
other
)
const
{
return
TimeDelta
(
time_internal
:
:
SaturatedSub
(
*
this
other
.
delta_
)
)
;
}
TimeDelta
&
operator
+
=
(
TimeDelta
other
)
{
return
*
this
=
(
*
this
+
other
)
;
}
TimeDelta
&
operator
-
=
(
TimeDelta
other
)
{
return
*
this
=
(
*
this
-
other
)
;
}
TimeDelta
operator
-
(
)
const
{
return
TimeDelta
(
-
delta_
)
;
}
template
<
typename
T
>
TimeDelta
operator
*
(
T
a
)
const
{
CheckedNumeric
<
int64_t
>
rv
(
delta_
)
;
rv
*
=
a
;
return
TimeDelta
(
time_internal
:
:
FromCheckedNumeric
(
rv
)
)
;
}
template
<
typename
T
>
TimeDelta
operator
/
(
T
a
)
const
{
CheckedNumeric
<
int64_t
>
rv
(
delta_
)
;
rv
/
=
a
;
return
TimeDelta
(
time_internal
:
:
FromCheckedNumeric
(
rv
)
)
;
}
template
<
typename
T
>
TimeDelta
&
operator
*
=
(
T
a
)
{
return
*
this
=
(
*
this
*
a
)
;
}
template
<
typename
T
>
TimeDelta
&
operator
/
=
(
T
a
)
{
return
*
this
=
(
*
this
/
a
)
;
}
int64_t
operator
/
(
TimeDelta
a
)
const
{
return
delta_
/
a
.
delta_
;
}
TimeDelta
operator
%
(
TimeDelta
a
)
const
{
return
TimeDelta
(
delta_
%
a
.
delta_
)
;
}
bool
operator
=
=
(
TimeDelta
other
)
const
{
return
delta_
=
=
other
.
delta_
;
}
bool
operator
!
=
(
TimeDelta
other
)
const
{
return
delta_
!
=
other
.
delta_
;
}
bool
operator
<
(
TimeDelta
other
)
const
{
return
delta_
<
other
.
delta_
;
}
bool
operator
<
=
(
TimeDelta
other
)
const
{
return
delta_
<
=
other
.
delta_
;
}
bool
operator
>
(
TimeDelta
other
)
const
{
return
delta_
>
other
.
delta_
;
}
bool
operator
>
=
(
TimeDelta
other
)
const
{
return
delta_
>
=
other
.
delta_
;
}
private
:
friend
int64_t
time_internal
:
:
SaturatedAdd
(
TimeDelta
delta
int64_t
value
)
;
friend
int64_t
time_internal
:
:
SaturatedSub
(
TimeDelta
delta
int64_t
value
)
;
explicit
TimeDelta
(
int64_t
delta_us
)
:
delta_
(
delta_us
)
{
}
static
TimeDelta
FromDouble
(
double
value
)
;
int64_t
delta_
;
}
;
template
<
typename
T
>
inline
TimeDelta
operator
*
(
T
a
TimeDelta
td
)
{
return
td
*
a
;
}
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
TimeDelta
time_delta
)
;
namespace
time_internal
{
template
<
class
TimeClass
>
class
TimeBase
{
public
:
static
const
int64_t
kHoursPerDay
=
24
;
static
const
int64_t
kMillisecondsPerSecond
=
1000
;
static
const
int64_t
kMillisecondsPerDay
=
kMillisecondsPerSecond
*
60
*
60
*
kHoursPerDay
;
static
const
int64_t
kMicrosecondsPerMillisecond
=
1000
;
static
const
int64_t
kMicrosecondsPerSecond
=
kMicrosecondsPerMillisecond
*
kMillisecondsPerSecond
;
static
const
int64_t
kMicrosecondsPerMinute
=
kMicrosecondsPerSecond
*
60
;
static
const
int64_t
kMicrosecondsPerHour
=
kMicrosecondsPerMinute
*
60
;
static
const
int64_t
kMicrosecondsPerDay
=
kMicrosecondsPerHour
*
kHoursPerDay
;
static
const
int64_t
kMicrosecondsPerWeek
=
kMicrosecondsPerDay
*
7
;
static
const
int64_t
kNanosecondsPerMicrosecond
=
1000
;
static
const
int64_t
kNanosecondsPerSecond
=
kNanosecondsPerMicrosecond
*
kMicrosecondsPerSecond
;
bool
is_null
(
)
const
{
return
us_
=
=
0
;
}
bool
is_max
(
)
const
{
return
us_
=
=
std
:
:
numeric_limits
<
int64_t
>
:
:
max
(
)
;
}
int64_t
ToInternalValue
(
)
const
{
return
us_
;
}
TimeClass
&
operator
=
(
TimeClass
other
)
{
us_
=
other
.
us_
;
return
*
(
static_cast
<
TimeClass
*
>
(
this
)
)
;
}
TimeDelta
operator
-
(
TimeClass
other
)
const
{
return
TimeDelta
:
:
FromMicroseconds
(
us_
-
other
.
us_
)
;
}
TimeClass
operator
+
(
TimeDelta
delta
)
const
{
return
TimeClass
(
time_internal
:
:
SaturatedAdd
(
delta
us_
)
)
;
}
TimeClass
operator
-
(
TimeDelta
delta
)
const
{
return
TimeClass
(
-
time_internal
:
:
SaturatedSub
(
delta
us_
)
)
;
}
TimeClass
&
operator
+
=
(
TimeDelta
delta
)
{
return
static_cast
<
TimeClass
&
>
(
*
this
=
(
*
this
+
delta
)
)
;
}
TimeClass
&
operator
-
=
(
TimeDelta
delta
)
{
return
static_cast
<
TimeClass
&
>
(
*
this
=
(
*
this
-
delta
)
)
;
}
bool
operator
=
=
(
TimeClass
other
)
const
{
return
us_
=
=
other
.
us_
;
}
bool
operator
!
=
(
TimeClass
other
)
const
{
return
us_
!
=
other
.
us_
;
}
bool
operator
<
(
TimeClass
other
)
const
{
return
us_
<
other
.
us_
;
}
bool
operator
<
=
(
TimeClass
other
)
const
{
return
us_
<
=
other
.
us_
;
}
bool
operator
>
(
TimeClass
other
)
const
{
return
us_
>
other
.
us_
;
}
bool
operator
>
=
(
TimeClass
other
)
const
{
return
us_
>
=
other
.
us_
;
}
static
TimeClass
FromInternalValue
(
int64_t
us
)
{
return
TimeClass
(
us
)
;
}
protected
:
explicit
TimeBase
(
int64_t
us
)
:
us_
(
us
)
{
}
int64_t
us_
;
}
;
}
template
<
class
TimeClass
>
inline
TimeClass
operator
+
(
TimeDelta
delta
TimeClass
t
)
{
return
t
+
delta
;
}
class
BASE_EXPORT
Time
:
public
time_internal
:
:
TimeBase
<
Time
>
{
public
:
static
const
int64_t
kTimeTToMicrosecondsOffset
;
#
if
!
defined
(
OS_WIN
)
static
const
int64_t
kWindowsEpochDeltaMicroseconds
;
#
else
enum
:
int64_t
{
kQPCOverflowThreshold
=
0x8637BD05AF7
}
;
#
endif
struct
BASE_EXPORT
Exploded
{
int
year
;
int
month
;
int
day_of_week
;
int
day_of_month
;
int
hour
;
int
minute
;
int
second
;
int
millisecond
;
bool
HasValidValues
(
)
const
;
}
;
Time
(
)
:
TimeBase
(
0
)
{
}
static
Time
UnixEpoch
(
)
;
static
Time
Now
(
)
;
static
Time
Max
(
)
;
static
Time
NowFromSystemTime
(
)
;
static
Time
FromTimeT
(
time_t
tt
)
;
time_t
ToTimeT
(
)
const
;
static
Time
FromDoubleT
(
double
dt
)
;
double
ToDoubleT
(
)
const
;
#
if
defined
(
OS_POSIX
)
static
Time
FromTimeSpec
(
const
timespec
&
ts
)
;
#
endif
static
Time
FromJsTime
(
double
ms_since_epoch
)
;
double
ToJsTime
(
)
const
;
int64_t
ToJavaTime
(
)
const
;
#
if
defined
(
OS_POSIX
)
static
Time
FromTimeVal
(
struct
timeval
t
)
;
struct
timeval
ToTimeVal
(
)
const
;
#
endif
#
if
defined
(
OS_MACOSX
)
static
Time
FromCFAbsoluteTime
(
CFAbsoluteTime
t
)
;
CFAbsoluteTime
ToCFAbsoluteTime
(
)
const
;
#
endif
#
if
defined
(
OS_WIN
)
static
Time
FromFileTime
(
FILETIME
ft
)
;
FILETIME
ToFileTime
(
)
const
;
static
const
int
kMinLowResolutionThresholdMs
=
16
;
static
void
EnableHighResolutionTimer
(
bool
enable
)
;
static
bool
ActivateHighResolutionTimer
(
bool
activate
)
;
static
bool
IsHighResolutionTimerInUse
(
)
;
#
endif
static
Time
FromUTCExploded
(
const
Exploded
&
exploded
)
{
return
FromExploded
(
false
exploded
)
;
}
static
Time
FromLocalExploded
(
const
Exploded
&
exploded
)
{
return
FromExploded
(
true
exploded
)
;
}
#
if
!
defined
(
MOZ_SANDBOX
)
static
bool
FromString
(
const
char
*
time_string
Time
*
parsed_time
)
{
return
FromStringInternal
(
time_string
true
parsed_time
)
;
}
static
bool
FromUTCString
(
const
char
*
time_string
Time
*
parsed_time
)
{
return
FromStringInternal
(
time_string
false
parsed_time
)
;
}
#
endif
void
UTCExplode
(
Exploded
*
exploded
)
const
{
return
Explode
(
false
exploded
)
;
}
void
LocalExplode
(
Exploded
*
exploded
)
const
{
return
Explode
(
true
exploded
)
;
}
Time
LocalMidnight
(
)
const
;
private
:
friend
class
time_internal
:
:
TimeBase
<
Time
>
;
explicit
Time
(
int64_t
us
)
:
TimeBase
(
us
)
{
}
void
Explode
(
bool
is_local
Exploded
*
exploded
)
const
;
static
Time
FromExploded
(
bool
is_local
const
Exploded
&
exploded
)
;
#
if
!
defined
(
MOZ_SANDBOX
)
static
bool
FromStringInternal
(
const
char
*
time_string
bool
is_local
Time
*
parsed_time
)
;
#
endif
}
;
inline
TimeDelta
TimeDelta
:
:
FromDays
(
int
days
)
{
if
(
days
=
=
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
return
Max
(
)
;
return
TimeDelta
(
days
*
Time
:
:
kMicrosecondsPerDay
)
;
}
inline
TimeDelta
TimeDelta
:
:
FromHours
(
int
hours
)
{
if
(
hours
=
=
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
return
Max
(
)
;
return
TimeDelta
(
hours
*
Time
:
:
kMicrosecondsPerHour
)
;
}
inline
TimeDelta
TimeDelta
:
:
FromMinutes
(
int
minutes
)
{
if
(
minutes
=
=
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
return
Max
(
)
;
return
TimeDelta
(
minutes
*
Time
:
:
kMicrosecondsPerMinute
)
;
}
inline
TimeDelta
TimeDelta
:
:
FromSeconds
(
int64_t
secs
)
{
return
TimeDelta
(
secs
)
*
Time
:
:
kMicrosecondsPerSecond
;
}
inline
TimeDelta
TimeDelta
:
:
FromMilliseconds
(
int64_t
ms
)
{
return
TimeDelta
(
ms
)
*
Time
:
:
kMicrosecondsPerMillisecond
;
}
inline
TimeDelta
TimeDelta
:
:
FromSecondsD
(
double
secs
)
{
return
FromDouble
(
secs
*
Time
:
:
kMicrosecondsPerSecond
)
;
}
inline
TimeDelta
TimeDelta
:
:
FromMillisecondsD
(
double
ms
)
{
return
FromDouble
(
ms
*
Time
:
:
kMicrosecondsPerMillisecond
)
;
}
inline
TimeDelta
TimeDelta
:
:
FromMicroseconds
(
int64_t
us
)
{
return
TimeDelta
(
us
)
;
}
inline
TimeDelta
TimeDelta
:
:
FromDouble
(
double
value
)
{
double
max_magnitude
=
std
:
:
numeric_limits
<
int64_t
>
:
:
max
(
)
;
TimeDelta
delta
=
TimeDelta
(
static_cast
<
int64_t
>
(
value
)
)
;
if
(
value
>
max_magnitude
)
delta
=
Max
(
)
;
else
if
(
value
<
-
max_magnitude
)
delta
=
-
Max
(
)
;
return
delta
;
}
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
Time
time
)
;
class
BASE_EXPORT
TimeTicks
:
public
time_internal
:
:
TimeBase
<
TimeTicks
>
{
public
:
TimeTicks
(
)
:
TimeBase
(
0
)
{
}
static
TimeTicks
Now
(
)
;
static
bool
IsHighResolution
(
)
;
#
if
defined
(
OS_WIN
)
static
TimeTicks
FromQPCValue
(
LONGLONG
qpc_value
)
;
#
endif
static
TimeTicks
UnixEpoch
(
)
;
TimeTicks
SnappedToNextTick
(
TimeTicks
tick_phase
TimeDelta
tick_interval
)
const
;
#
if
defined
(
OS_WIN
)
protected
:
typedef
DWORD
(
*
TickFunctionType
)
(
void
)
;
static
TickFunctionType
SetMockTickFunction
(
TickFunctionType
ticker
)
;
#
endif
private
:
friend
class
time_internal
:
:
TimeBase
<
TimeTicks
>
;
explicit
TimeTicks
(
int64_t
us
)
:
TimeBase
(
us
)
{
}
}
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
TimeTicks
time_ticks
)
;
class
BASE_EXPORT
ThreadTicks
:
public
time_internal
:
:
TimeBase
<
ThreadTicks
>
{
public
:
ThreadTicks
(
)
:
TimeBase
(
0
)
{
}
static
bool
IsSupported
(
)
{
#
if
(
defined
(
_POSIX_THREAD_CPUTIME
)
&
&
(
_POSIX_THREAD_CPUTIME
>
=
0
)
)
|
|
\
(
defined
(
OS_MACOSX
)
&
&
!
defined
(
OS_IOS
)
)
|
|
defined
(
OS_ANDROID
)
return
true
;
#
elif
defined
(
OS_WIN
)
return
IsSupportedWin
(
)
;
#
else
return
false
;
#
endif
}
static
void
WaitUntilInitialized
(
)
{
#
if
defined
(
OS_WIN
)
WaitUntilInitializedWin
(
)
;
#
endif
}
static
ThreadTicks
Now
(
)
;
private
:
friend
class
time_internal
:
:
TimeBase
<
ThreadTicks
>
;
explicit
ThreadTicks
(
int64_t
us
)
:
TimeBase
(
us
)
{
}
#
if
defined
(
OS_WIN
)
FRIEND_TEST_ALL_PREFIXES
(
TimeTicks
TSCTicksPerSecond
)
;
static
double
TSCTicksPerSecond
(
)
;
static
bool
IsSupportedWin
(
)
;
static
void
WaitUntilInitializedWin
(
)
;
#
endif
}
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
ThreadTicks
time_ticks
)
;
}
#
endif
