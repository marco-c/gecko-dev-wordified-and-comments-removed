#
ifndef
BASE_STRINGS_STRING_PIECE_H_
#
define
BASE_STRINGS_STRING_PIECE_H_
#
include
<
stddef
.
h
>
#
include
<
iosfwd
>
#
include
<
string
>
#
include
<
type_traits
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
strings
/
char_traits
.
h
"
#
include
"
base
/
strings
/
string16
.
h
"
#
include
"
base
/
strings
/
string_piece_forward
.
h
"
namespace
base
{
namespace
internal
{
BASE_EXPORT
void
CopyToString
(
const
StringPiece
&
self
std
:
:
string
*
target
)
;
BASE_EXPORT
void
CopyToString
(
const
StringPiece16
&
self
string16
*
target
)
;
BASE_EXPORT
void
AppendToString
(
const
StringPiece
&
self
std
:
:
string
*
target
)
;
BASE_EXPORT
void
AppendToString
(
const
StringPiece16
&
self
string16
*
target
)
;
BASE_EXPORT
size_t
copy
(
const
StringPiece
&
self
char
*
buf
size_t
n
size_t
pos
)
;
BASE_EXPORT
size_t
copy
(
const
StringPiece16
&
self
char16
*
buf
size_t
n
size_t
pos
)
;
BASE_EXPORT
size_t
find
(
const
StringPiece
&
self
const
StringPiece
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
find
(
const
StringPiece16
&
self
const
StringPiece16
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
find
(
const
StringPiece
&
self
char
c
size_t
pos
)
;
BASE_EXPORT
size_t
find
(
const
StringPiece16
&
self
char16
c
size_t
pos
)
;
BASE_EXPORT
size_t
rfind
(
const
StringPiece
&
self
const
StringPiece
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
rfind
(
const
StringPiece16
&
self
const
StringPiece16
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
rfind
(
const
StringPiece
&
self
char
c
size_t
pos
)
;
BASE_EXPORT
size_t
rfind
(
const
StringPiece16
&
self
char16
c
size_t
pos
)
;
BASE_EXPORT
size_t
find_first_of
(
const
StringPiece
&
self
const
StringPiece
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
find_first_of
(
const
StringPiece16
&
self
const
StringPiece16
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
find_first_not_of
(
const
StringPiece
&
self
const
StringPiece
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
find_first_not_of
(
const
StringPiece16
&
self
const
StringPiece16
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
find_first_not_of
(
const
StringPiece
&
self
char
c
size_t
pos
)
;
BASE_EXPORT
size_t
find_first_not_of
(
const
StringPiece16
&
self
char16
c
size_t
pos
)
;
BASE_EXPORT
size_t
find_last_of
(
const
StringPiece
&
self
const
StringPiece
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
find_last_of
(
const
StringPiece16
&
self
const
StringPiece16
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
find_last_of
(
const
StringPiece
&
self
char
c
size_t
pos
)
;
BASE_EXPORT
size_t
find_last_of
(
const
StringPiece16
&
self
char16
c
size_t
pos
)
;
BASE_EXPORT
size_t
find_last_not_of
(
const
StringPiece
&
self
const
StringPiece
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
find_last_not_of
(
const
StringPiece16
&
self
const
StringPiece16
&
s
size_t
pos
)
;
BASE_EXPORT
size_t
find_last_not_of
(
const
StringPiece16
&
self
char16
c
size_t
pos
)
;
BASE_EXPORT
size_t
find_last_not_of
(
const
StringPiece
&
self
char
c
size_t
pos
)
;
BASE_EXPORT
StringPiece
substr
(
const
StringPiece
&
self
size_t
pos
size_t
n
)
;
BASE_EXPORT
StringPiece16
substr
(
const
StringPiece16
&
self
size_t
pos
size_t
n
)
;
#
if
DCHECK_IS_ON
(
)
BASE_EXPORT
void
AssertIteratorsInOrder
(
std
:
:
string
:
:
const_iterator
begin
std
:
:
string
:
:
const_iterator
end
)
;
BASE_EXPORT
void
AssertIteratorsInOrder
(
string16
:
:
const_iterator
begin
string16
:
:
const_iterator
end
)
;
#
endif
}
template
<
typename
STRING_TYPE
>
class
BasicStringPiece
{
public
:
typedef
size_t
size_type
;
typedef
typename
STRING_TYPE
:
:
value_type
value_type
;
typedef
const
value_type
*
pointer
;
typedef
const
value_type
&
reference
;
typedef
const
value_type
&
const_reference
;
typedef
ptrdiff_t
difference_type
;
typedef
const
value_type
*
const_iterator
;
typedef
std
:
:
reverse_iterator
<
const_iterator
>
const_reverse_iterator
;
static
const
size_type
npos
;
public
:
constexpr
BasicStringPiece
(
)
:
ptr_
(
NULL
)
length_
(
0
)
{
}
constexpr
BasicStringPiece
(
const
value_type
*
str
)
:
ptr_
(
str
)
length_
(
!
str
?
0
:
CharTraits
<
value_type
>
:
:
length
(
str
)
)
{
}
BasicStringPiece
(
const
STRING_TYPE
&
str
)
:
ptr_
(
str
.
data
(
)
)
length_
(
str
.
size
(
)
)
{
}
constexpr
BasicStringPiece
(
const
value_type
*
offset
size_type
len
)
:
ptr_
(
offset
)
length_
(
len
)
{
}
BasicStringPiece
(
const
typename
STRING_TYPE
:
:
const_iterator
&
begin
const
typename
STRING_TYPE
:
:
const_iterator
&
end
)
{
#
if
DCHECK_IS_ON
(
)
internal
:
:
AssertIteratorsInOrder
(
begin
end
)
;
#
endif
length_
=
static_cast
<
size_t
>
(
std
:
:
distance
(
begin
end
)
)
;
ptr_
=
length_
>
0
?
&
*
begin
:
nullptr
;
}
constexpr
const
value_type
*
data
(
)
const
{
return
ptr_
;
}
constexpr
size_type
size
(
)
const
noexcept
{
return
length_
;
}
constexpr
size_type
length
(
)
const
noexcept
{
return
length_
;
}
bool
empty
(
)
const
{
return
length_
=
=
0
;
}
void
clear
(
)
{
ptr_
=
NULL
;
length_
=
0
;
}
void
set
(
const
value_type
*
data
size_type
len
)
{
ptr_
=
data
;
length_
=
len
;
}
void
set
(
const
value_type
*
str
)
{
ptr_
=
str
;
length_
=
str
?
STRING_TYPE
:
:
traits_type
:
:
length
(
str
)
:
0
;
}
constexpr
value_type
operator
[
]
(
size_type
i
)
const
{
CHECK
(
i
<
length_
)
;
return
ptr_
[
i
]
;
}
value_type
front
(
)
const
{
CHECK_NE
(
0UL
length_
)
;
return
ptr_
[
0
]
;
}
value_type
back
(
)
const
{
CHECK_NE
(
0UL
length_
)
;
return
ptr_
[
length_
-
1
]
;
}
constexpr
void
remove_prefix
(
size_type
n
)
{
CHECK
(
n
<
=
length_
)
;
ptr_
+
=
n
;
length_
-
=
n
;
}
constexpr
void
remove_suffix
(
size_type
n
)
{
CHECK
(
n
<
=
length_
)
;
length_
-
=
n
;
}
constexpr
int
compare
(
BasicStringPiece
x
)
const
noexcept
{
int
r
=
CharTraits
<
value_type
>
:
:
compare
(
ptr_
x
.
ptr_
(
length_
<
x
.
length_
?
length_
:
x
.
length_
)
)
;
if
(
r
=
=
0
)
{
if
(
length_
<
x
.
length_
)
r
=
-
1
;
else
if
(
length_
>
x
.
length_
)
r
=
+
1
;
}
return
r
;
}
explicit
operator
STRING_TYPE
(
)
const
{
return
as_string
(
)
;
}
STRING_TYPE
as_string
(
)
const
{
return
empty
(
)
?
STRING_TYPE
(
)
:
STRING_TYPE
(
data
(
)
size
(
)
)
;
}
const_iterator
begin
(
)
const
{
return
ptr_
;
}
const_iterator
end
(
)
const
{
return
ptr_
+
length_
;
}
const_reverse_iterator
rbegin
(
)
const
{
return
const_reverse_iterator
(
ptr_
+
length_
)
;
}
const_reverse_iterator
rend
(
)
const
{
return
const_reverse_iterator
(
ptr_
)
;
}
size_type
max_size
(
)
const
{
return
length_
;
}
size_type
capacity
(
)
const
{
return
length_
;
}
void
CopyToString
(
STRING_TYPE
*
target
)
const
{
internal
:
:
CopyToString
(
*
this
target
)
;
}
void
AppendToString
(
STRING_TYPE
*
target
)
const
{
internal
:
:
AppendToString
(
*
this
target
)
;
}
size_type
copy
(
value_type
*
buf
size_type
n
size_type
pos
=
0
)
const
{
return
internal
:
:
copy
(
*
this
buf
n
pos
)
;
}
constexpr
bool
starts_with
(
BasicStringPiece
x
)
const
noexcept
{
return
(
(
this
-
>
length_
>
=
x
.
length_
)
&
&
(
CharTraits
<
value_type
>
:
:
compare
(
this
-
>
ptr_
x
.
ptr_
x
.
length_
)
=
=
0
)
)
;
}
constexpr
bool
ends_with
(
BasicStringPiece
x
)
const
noexcept
{
return
(
(
this
-
>
length_
>
=
x
.
length_
)
&
&
(
CharTraits
<
value_type
>
:
:
compare
(
this
-
>
ptr_
+
(
this
-
>
length_
-
x
.
length_
)
x
.
ptr_
x
.
length_
)
=
=
0
)
)
;
}
size_type
find
(
const
BasicStringPiece
<
STRING_TYPE
>
&
s
size_type
pos
=
0
)
const
{
return
internal
:
:
find
(
*
this
s
pos
)
;
}
size_type
find
(
value_type
c
size_type
pos
=
0
)
const
{
return
internal
:
:
find
(
*
this
c
pos
)
;
}
size_type
rfind
(
const
BasicStringPiece
&
s
size_type
pos
=
BasicStringPiece
:
:
npos
)
const
{
return
internal
:
:
rfind
(
*
this
s
pos
)
;
}
size_type
rfind
(
value_type
c
size_type
pos
=
BasicStringPiece
:
:
npos
)
const
{
return
internal
:
:
rfind
(
*
this
c
pos
)
;
}
size_type
find_first_of
(
const
BasicStringPiece
&
s
size_type
pos
=
0
)
const
{
return
internal
:
:
find_first_of
(
*
this
s
pos
)
;
}
size_type
find_first_of
(
value_type
c
size_type
pos
=
0
)
const
{
return
find
(
c
pos
)
;
}
size_type
find_first_not_of
(
const
BasicStringPiece
&
s
size_type
pos
=
0
)
const
{
return
internal
:
:
find_first_not_of
(
*
this
s
pos
)
;
}
size_type
find_first_not_of
(
value_type
c
size_type
pos
=
0
)
const
{
return
internal
:
:
find_first_not_of
(
*
this
c
pos
)
;
}
size_type
find_last_of
(
const
BasicStringPiece
&
s
size_type
pos
=
BasicStringPiece
:
:
npos
)
const
{
return
internal
:
:
find_last_of
(
*
this
s
pos
)
;
}
size_type
find_last_of
(
value_type
c
size_type
pos
=
BasicStringPiece
:
:
npos
)
const
{
return
rfind
(
c
pos
)
;
}
size_type
find_last_not_of
(
const
BasicStringPiece
&
s
size_type
pos
=
BasicStringPiece
:
:
npos
)
const
{
return
internal
:
:
find_last_not_of
(
*
this
s
pos
)
;
}
size_type
find_last_not_of
(
value_type
c
size_type
pos
=
BasicStringPiece
:
:
npos
)
const
{
return
internal
:
:
find_last_not_of
(
*
this
c
pos
)
;
}
BasicStringPiece
substr
(
size_type
pos
size_type
n
=
BasicStringPiece
:
:
npos
)
const
{
return
internal
:
:
substr
(
*
this
pos
n
)
;
}
protected
:
const
value_type
*
ptr_
;
size_type
length_
;
}
;
template
<
typename
STRING_TYPE
>
const
typename
BasicStringPiece
<
STRING_TYPE
>
:
:
size_type
BasicStringPiece
<
STRING_TYPE
>
:
:
npos
=
typename
BasicStringPiece
<
STRING_TYPE
>
:
:
size_type
(
-
1
)
;
#
if
!
defined
(
COMPILER_MSVC
)
extern
template
class
BASE_EXPORT
BasicStringPiece
<
std
:
:
string
>
;
extern
template
class
BASE_EXPORT
BasicStringPiece
<
string16
>
;
#
endif
template
<
typename
StringT
>
constexpr
bool
operator
=
=
(
BasicStringPiece
<
StringT
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
lhs
.
size
(
)
=
=
rhs
.
size
(
)
&
&
lhs
.
compare
(
rhs
)
=
=
0
;
}
template
<
typename
StringT
int
=
1
>
constexpr
bool
operator
=
=
(
BasicStringPiece
<
StringT
>
lhs
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
rhs
)
noexcept
{
return
lhs
.
size
(
)
=
=
rhs
.
size
(
)
&
&
lhs
.
compare
(
rhs
)
=
=
0
;
}
template
<
typename
StringT
int
=
2
>
constexpr
bool
operator
=
=
(
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
lhs
.
size
(
)
=
=
rhs
.
size
(
)
&
&
lhs
.
compare
(
rhs
)
=
=
0
;
}
template
<
typename
StringT
>
constexpr
bool
operator
!
=
(
BasicStringPiece
<
StringT
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
!
(
lhs
=
=
rhs
)
;
}
template
<
typename
StringT
int
=
1
>
constexpr
bool
operator
!
=
(
BasicStringPiece
<
StringT
>
lhs
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
rhs
)
noexcept
{
return
!
(
lhs
=
=
rhs
)
;
}
template
<
typename
StringT
int
=
2
>
constexpr
bool
operator
!
=
(
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
!
(
lhs
=
=
rhs
)
;
}
template
<
typename
StringT
>
constexpr
bool
operator
<
(
BasicStringPiece
<
StringT
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
lhs
.
compare
(
rhs
)
<
0
;
}
template
<
typename
StringT
int
=
1
>
constexpr
bool
operator
<
(
BasicStringPiece
<
StringT
>
lhs
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
rhs
)
noexcept
{
return
lhs
.
compare
(
rhs
)
<
0
;
}
template
<
typename
StringT
int
=
2
>
constexpr
bool
operator
<
(
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
lhs
.
compare
(
rhs
)
<
0
;
}
template
<
typename
StringT
>
constexpr
bool
operator
>
(
BasicStringPiece
<
StringT
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
rhs
<
lhs
;
}
template
<
typename
StringT
int
=
1
>
constexpr
bool
operator
>
(
BasicStringPiece
<
StringT
>
lhs
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
rhs
)
noexcept
{
return
rhs
<
lhs
;
}
template
<
typename
StringT
int
=
2
>
constexpr
bool
operator
>
(
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
rhs
<
lhs
;
}
template
<
typename
StringT
>
constexpr
bool
operator
<
=
(
BasicStringPiece
<
StringT
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
!
(
rhs
<
lhs
)
;
}
template
<
typename
StringT
int
=
1
>
constexpr
bool
operator
<
=
(
BasicStringPiece
<
StringT
>
lhs
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
rhs
)
noexcept
{
return
!
(
rhs
<
lhs
)
;
}
template
<
typename
StringT
int
=
2
>
constexpr
bool
operator
<
=
(
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
!
(
rhs
<
lhs
)
;
}
template
<
typename
StringT
>
constexpr
bool
operator
>
=
(
BasicStringPiece
<
StringT
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
!
(
lhs
<
rhs
)
;
}
template
<
typename
StringT
int
=
1
>
constexpr
bool
operator
>
=
(
BasicStringPiece
<
StringT
>
lhs
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
rhs
)
noexcept
{
return
!
(
lhs
<
rhs
)
;
}
template
<
typename
StringT
int
=
2
>
constexpr
bool
operator
>
=
(
std
:
:
common_type_t
<
BasicStringPiece
<
StringT
>
>
lhs
BasicStringPiece
<
StringT
>
rhs
)
noexcept
{
return
!
(
lhs
<
rhs
)
;
}
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
const
StringPiece
&
piece
)
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
const
StringPiece16
&
piece
)
;
template
<
typename
StringPieceType
>
struct
StringPieceHashImpl
{
std
:
:
size_t
operator
(
)
(
StringPieceType
sp
)
const
{
std
:
:
size_t
result
=
0
;
for
(
auto
c
:
sp
)
result
=
(
result
*
131
)
+
c
;
return
result
;
}
}
;
using
StringPieceHash
=
StringPieceHashImpl
<
StringPiece
>
;
using
StringPiece16Hash
=
StringPieceHashImpl
<
StringPiece16
>
;
using
WStringPieceHash
=
StringPieceHashImpl
<
WStringPiece
>
;
}
#
endif
