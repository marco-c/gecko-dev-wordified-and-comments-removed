#
ifndef
BASE_STRINGS_STRING_SPLIT_H_
#
define
BASE_STRINGS_STRING_SPLIT_H_
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
strings
/
string16
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
namespace
base
{
enum
WhitespaceHandling
{
KEEP_WHITESPACE
TRIM_WHITESPACE
}
;
enum
SplitResult
{
SPLIT_WANT_ALL
SPLIT_WANT_NONEMPTY
}
;
BASE_EXPORT
std
:
:
vector
<
std
:
:
string
>
SplitString
(
StringPiece
input
StringPiece
separators
WhitespaceHandling
whitespace
SplitResult
result_type
)
;
BASE_EXPORT
std
:
:
vector
<
string16
>
SplitString
(
StringPiece16
input
StringPiece16
separators
WhitespaceHandling
whitespace
SplitResult
result_type
)
;
BASE_EXPORT
std
:
:
vector
<
StringPiece
>
SplitStringPiece
(
StringPiece
input
StringPiece
separators
WhitespaceHandling
whitespace
SplitResult
result_type
)
;
BASE_EXPORT
std
:
:
vector
<
StringPiece16
>
SplitStringPiece
(
StringPiece16
input
StringPiece16
separators
WhitespaceHandling
whitespace
SplitResult
result_type
)
;
using
StringPairs
=
std
:
:
vector
<
std
:
:
pair
<
std
:
:
string
std
:
:
string
>
>
;
BASE_EXPORT
bool
SplitStringIntoKeyValuePairs
(
StringPiece
input
char
key_value_delimiter
char
key_value_pair_delimiter
StringPairs
*
key_value_pairs
)
;
BASE_EXPORT
void
SplitStringUsingSubstr
(
StringPiece16
input
StringPiece16
delimiter
std
:
:
vector
<
string16
>
*
result
)
;
BASE_EXPORT
void
SplitStringUsingSubstr
(
StringPiece
input
StringPiece
delimiter
std
:
:
vector
<
std
:
:
string
>
*
result
)
;
BASE_EXPORT
std
:
:
vector
<
StringPiece16
>
SplitStringPieceUsingSubstr
(
StringPiece16
input
StringPiece16
delimiter
WhitespaceHandling
whitespace
SplitResult
result_type
)
;
BASE_EXPORT
std
:
:
vector
<
StringPiece
>
SplitStringPieceUsingSubstr
(
StringPiece
input
StringPiece
delimiter
WhitespaceHandling
whitespace
SplitResult
result_type
)
;
}
#
endif
