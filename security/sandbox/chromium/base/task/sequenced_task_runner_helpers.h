#
ifndef
BASE_TASK_SEQUENCED_TASK_RUNNER_HELPERS_H_
#
define
BASE_TASK_SEQUENCED_TASK_RUNNER_HELPERS_H_
#
include
<
memory
>
namespace
base
{
class
SequencedTaskRunner
;
template
<
class
T
>
class
DeleteHelper
{
private
:
static
void
DoDelete
(
const
void
*
object
)
{
delete
static_cast
<
const
T
*
>
(
object
)
;
}
friend
class
SequencedTaskRunner
;
}
;
template
<
class
T
>
class
DeleteUniquePtrHelper
{
private
:
static
void
DoDelete
(
const
void
*
object
)
{
std
:
:
unique_ptr
<
T
>
destroyer
(
const_cast
<
T
*
>
(
static_cast
<
const
T
*
>
(
object
)
)
)
;
}
friend
class
SequencedTaskRunner
;
}
;
template
<
class
T
>
class
ReleaseHelper
{
private
:
static
void
DoRelease
(
const
void
*
object
)
{
static_cast
<
const
T
*
>
(
object
)
-
>
Release
(
)
;
}
friend
class
SequencedTaskRunner
;
}
;
}
#
endif
