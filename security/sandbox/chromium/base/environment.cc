#
include
"
base
/
environment
.
h
"
#
include
"
base
/
memory
/
ptr_util
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
#
include
"
base
/
strings
/
string_util
.
h
"
#
include
"
base
/
strings
/
utf_string_conversions
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
BUILDFLAG
(
IS_WIN
)
#
include
<
windows
.
h
>
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
#
include
<
stdlib
.
h
>
#
endif
namespace
base
{
namespace
{
class
EnvironmentImpl
:
public
Environment
{
public
:
bool
GetVar
(
StringPiece
variable_name
std
:
:
string
*
result
)
override
{
if
(
GetVarImpl
(
variable_name
result
)
)
return
true
;
char
first_char
=
variable_name
[
0
]
;
std
:
:
string
alternate_case_var
;
if
(
IsAsciiLower
(
first_char
)
)
alternate_case_var
=
ToUpperASCII
(
variable_name
)
;
else
if
(
IsAsciiUpper
(
first_char
)
)
alternate_case_var
=
ToLowerASCII
(
variable_name
)
;
else
return
false
;
return
GetVarImpl
(
alternate_case_var
result
)
;
}
bool
SetVar
(
StringPiece
variable_name
const
std
:
:
string
&
new_value
)
override
{
return
SetVarImpl
(
variable_name
new_value
)
;
}
bool
UnSetVar
(
StringPiece
variable_name
)
override
{
return
UnSetVarImpl
(
variable_name
)
;
}
private
:
bool
GetVarImpl
(
StringPiece
variable_name
std
:
:
string
*
result
)
{
#
if
BUILDFLAG
(
IS_WIN
)
DWORD
value_length
=
:
:
GetEnvironmentVariable
(
UTF8ToWide
(
variable_name
)
.
c_str
(
)
nullptr
0
)
;
if
(
value_length
=
=
0
)
return
false
;
if
(
result
)
{
std
:
:
unique_ptr
<
wchar_t
[
]
>
value
(
new
wchar_t
[
value_length
]
)
;
:
:
GetEnvironmentVariable
(
UTF8ToWide
(
variable_name
)
.
c_str
(
)
value
.
get
(
)
value_length
)
;
*
result
=
WideToUTF8
(
value
.
get
(
)
)
;
}
return
true
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
const
char
*
env_value
=
getenv
(
variable_name
.
data
(
)
)
;
if
(
!
env_value
)
return
false
;
if
(
result
)
*
result
=
env_value
;
return
true
;
#
endif
}
bool
SetVarImpl
(
StringPiece
variable_name
const
std
:
:
string
&
new_value
)
{
#
if
BUILDFLAG
(
IS_WIN
)
return
!
!
SetEnvironmentVariable
(
UTF8ToWide
(
variable_name
)
.
c_str
(
)
UTF8ToWide
(
new_value
)
.
c_str
(
)
)
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
return
!
setenv
(
variable_name
.
data
(
)
new_value
.
c_str
(
)
1
)
;
#
endif
}
bool
UnSetVarImpl
(
StringPiece
variable_name
)
{
#
if
BUILDFLAG
(
IS_WIN
)
return
!
!
SetEnvironmentVariable
(
UTF8ToWide
(
variable_name
)
.
c_str
(
)
nullptr
)
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
return
!
unsetenv
(
variable_name
.
data
(
)
)
;
#
endif
}
}
;
}
namespace
env_vars
{
#
if
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
const
char
kHome
[
]
=
"
HOME
"
;
#
endif
}
Environment
:
:
~
Environment
(
)
=
default
;
std
:
:
unique_ptr
<
Environment
>
Environment
:
:
Create
(
)
{
return
std
:
:
make_unique
<
EnvironmentImpl
>
(
)
;
}
bool
Environment
:
:
HasVar
(
StringPiece
variable_name
)
{
return
GetVar
(
variable_name
nullptr
)
;
}
}
