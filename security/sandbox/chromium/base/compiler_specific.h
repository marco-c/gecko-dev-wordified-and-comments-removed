#
ifndef
BASE_COMPILER_SPECIFIC_H_
#
define
BASE_COMPILER_SPECIFIC_H_
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
COMPILER_MSVC
)
#
include
<
sal
.
h
>
#
define
MSVC_SUPPRESS_WARNING
(
n
)
__pragma
(
warning
(
suppress
:
n
)
)
#
define
MSVC_PUSH_DISABLE_WARNING
(
n
)
__pragma
(
warning
(
push
)
)
\
__pragma
(
warning
(
disable
:
n
)
)
#
define
MSVC_PUSH_WARNING_LEVEL
(
n
)
__pragma
(
warning
(
push
n
)
)
#
define
MSVC_POP_WARNING
(
)
__pragma
(
warning
(
pop
)
)
#
define
MSVC_DISABLE_OPTIMIZE
(
)
__pragma
(
optimize
(
"
"
off
)
)
#
define
MSVC_ENABLE_OPTIMIZE
(
)
__pragma
(
optimize
(
"
"
on
)
)
#
define
NON_EXPORTED_BASE
(
code
)
MSVC_SUPPRESS_WARNING
(
4275
)
\
code
#
else
#
define
_Printf_format_string_
#
define
MSVC_SUPPRESS_WARNING
(
n
)
#
define
MSVC_PUSH_DISABLE_WARNING
(
n
)
#
define
MSVC_PUSH_WARNING_LEVEL
(
n
)
#
define
MSVC_POP_WARNING
(
)
#
define
MSVC_DISABLE_OPTIMIZE
(
)
#
define
MSVC_ENABLE_OPTIMIZE
(
)
#
define
NON_EXPORTED_BASE
(
code
)
code
#
endif
#
define
ALLOW_UNUSED_LOCAL
(
x
)
false
?
(
void
)
x
:
(
void
)
0
#
if
defined
(
COMPILER_GCC
)
|
|
defined
(
__clang__
)
#
define
ALLOW_UNUSED_TYPE
__attribute__
(
(
unused
)
)
#
else
#
define
ALLOW_UNUSED_TYPE
#
endif
#
if
defined
(
COMPILER_GCC
)
#
define
NOINLINE
__attribute__
(
(
noinline
)
)
#
elif
defined
(
COMPILER_MSVC
)
#
define
NOINLINE
__declspec
(
noinline
)
#
else
#
define
NOINLINE
#
endif
#
if
defined
(
COMPILER_MSVC
)
#
define
ALIGNAS
(
byte_alignment
)
__declspec
(
align
(
byte_alignment
)
)
#
elif
defined
(
COMPILER_GCC
)
#
define
ALIGNAS
(
byte_alignment
)
__attribute__
(
(
aligned
(
byte_alignment
)
)
)
#
endif
#
if
defined
(
COMPILER_MSVC
)
#
define
ALIGNOF
(
type
)
__alignof
(
type
)
#
elif
defined
(
COMPILER_GCC
)
#
define
ALIGNOF
(
type
)
__alignof__
(
type
)
#
endif
#
undef
WARN_UNUSED_RESULT
#
if
defined
(
COMPILER_GCC
)
|
|
defined
(
__clang__
)
#
define
WARN_UNUSED_RESULT
__attribute__
(
(
warn_unused_result
)
)
#
else
#
define
WARN_UNUSED_RESULT
#
endif
#
if
defined
(
COMPILER_GCC
)
#
define
PRINTF_FORMAT
(
format_param
dots_param
)
\
__attribute__
(
(
format
(
printf
format_param
dots_param
)
)
)
#
else
#
define
PRINTF_FORMAT
(
format_param
dots_param
)
#
endif
#
define
WPRINTF_FORMAT
(
format_param
dots_param
)
#
if
defined
(
MEMORY_SANITIZER
)
&
&
!
defined
(
OS_NACL
)
#
include
<
sanitizer
/
msan_interface
.
h
>
#
define
MSAN_UNPOISON
(
p
size
)
__msan_unpoison
(
p
size
)
#
define
MSAN_CHECK_MEM_IS_INITIALIZED
(
p
size
)
\
__msan_check_mem_is_initialized
(
p
size
)
#
else
#
define
MSAN_UNPOISON
(
p
size
)
#
define
MSAN_CHECK_MEM_IS_INITIALIZED
(
p
size
)
#
endif
#
if
!
defined
(
CDECL
)
#
if
defined
(
OS_WIN
)
#
define
CDECL
__cdecl
#
else
#
define
CDECL
#
endif
#
endif
#
if
!
defined
(
UNLIKELY
)
#
if
defined
(
COMPILER_GCC
)
#
define
UNLIKELY
(
x
)
__builtin_expect
(
!
!
(
x
)
0
)
#
else
#
define
UNLIKELY
(
x
)
(
x
)
#
endif
#
endif
#
endif
