#
ifndef
BASE_TASK_RUNNER_H_
#
define
BASE_TASK_RUNNER_H_
#
include
<
stddef
.
h
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
callback
.
h
"
#
include
"
base
/
location
.
h
"
#
include
"
base
/
memory
/
ref_counted
.
h
"
#
include
"
base
/
time
/
time
.
h
"
namespace
base
{
struct
TaskRunnerTraits
;
class
BASE_EXPORT
TaskRunner
:
public
RefCountedThreadSafe
<
TaskRunner
TaskRunnerTraits
>
{
public
:
bool
PostTask
(
const
Location
&
from_here
OnceClosure
task
)
;
virtual
bool
PostDelayedTask
(
const
Location
&
from_here
OnceClosure
task
base
:
:
TimeDelta
delay
)
=
0
;
virtual
bool
RunsTasksInCurrentSequence
(
)
const
=
0
;
bool
PostTaskAndReply
(
const
Location
&
from_here
OnceClosure
task
OnceClosure
reply
)
;
protected
:
friend
struct
TaskRunnerTraits
;
TaskRunner
(
)
;
virtual
~
TaskRunner
(
)
;
virtual
void
OnDestruct
(
)
const
;
}
;
struct
BASE_EXPORT
TaskRunnerTraits
{
static
void
Destruct
(
const
TaskRunner
*
task_runner
)
;
}
;
}
#
endif
