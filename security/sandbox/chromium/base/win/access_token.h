#
ifndef
BASE_WIN_ACCESS_TOKEN_H_
#
define
BASE_WIN_ACCESS_TOKEN_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
win
/
access_control_list
.
h
"
#
include
"
base
/
win
/
scoped_handle
.
h
"
#
include
"
base
/
win
/
sid
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
base
:
:
win
{
enum
class
SecurityImpersonationLevel
{
kAnonymous
kIdentification
kImpersonation
kDelegation
}
;
class
BASE_EXPORT
AccessToken
{
public
:
class
BASE_EXPORT
Group
{
public
:
const
Sid
&
GetSid
(
)
const
{
return
sid_
;
}
DWORD
GetAttributes
(
)
const
{
return
attributes_
;
}
bool
IsIntegrity
(
)
const
;
bool
IsEnabled
(
)
const
;
bool
IsDenyOnly
(
)
const
;
bool
IsLogonId
(
)
const
;
Group
(
Sid
&
&
sid
DWORD
attributes
)
;
Group
(
Group
&
&
)
;
~
Group
(
)
;
private
:
Sid
sid_
;
DWORD
attributes_
;
}
;
class
BASE_EXPORT
Privilege
{
public
:
CHROME_LUID
GetLuid
(
)
const
{
return
luid_
;
}
DWORD
GetAttributes
(
)
const
{
return
attributes_
;
}
std
:
:
wstring
GetName
(
)
const
;
bool
IsEnabled
(
)
const
;
Privilege
(
CHROME_LUID
luid
DWORD
attributes
)
;
private
:
CHROME_LUID
luid_
;
DWORD
attributes_
;
}
;
static
absl
:
:
optional
<
AccessToken
>
FromToken
(
HANDLE
token
ACCESS_MASK
desired_access
=
0
)
;
static
absl
:
:
optional
<
AccessToken
>
FromToken
(
ScopedHandle
&
&
token
)
;
static
absl
:
:
optional
<
AccessToken
>
FromProcess
(
HANDLE
process
bool
impersonation
=
false
ACCESS_MASK
desired_access
=
0
)
;
static
absl
:
:
optional
<
AccessToken
>
FromCurrentProcess
(
bool
impersonation
=
false
ACCESS_MASK
desired_access
=
0
)
;
static
absl
:
:
optional
<
AccessToken
>
FromThread
(
HANDLE
thread
bool
open_as_self
=
true
ACCESS_MASK
desired_access
=
0
)
;
static
absl
:
:
optional
<
AccessToken
>
FromCurrentThread
(
bool
open_as_self
=
true
ACCESS_MASK
desired_access
=
0
)
;
static
absl
:
:
optional
<
AccessToken
>
FromEffective
(
ACCESS_MASK
desired_access
=
0
)
;
AccessToken
(
const
AccessToken
&
)
=
delete
;
AccessToken
&
operator
=
(
const
AccessToken
&
)
=
delete
;
AccessToken
(
AccessToken
&
&
)
;
AccessToken
&
operator
=
(
AccessToken
&
&
)
;
~
AccessToken
(
)
;
Sid
User
(
)
const
;
Group
UserGroup
(
)
const
;
Sid
Owner
(
)
const
;
Sid
PrimaryGroup
(
)
const
;
absl
:
:
optional
<
Sid
>
LogonId
(
)
const
;
DWORD
IntegrityLevel
(
)
const
;
bool
SetIntegrityLevel
(
DWORD
integrity_level
)
;
DWORD
SessionId
(
)
const
;
std
:
:
vector
<
Group
>
Groups
(
)
const
;
bool
IsRestricted
(
)
const
;
std
:
:
vector
<
Group
>
RestrictedSids
(
)
const
;
bool
IsAppContainer
(
)
const
;
absl
:
:
optional
<
Sid
>
AppContainerSid
(
)
const
;
std
:
:
vector
<
Group
>
Capabilities
(
)
const
;
absl
:
:
optional
<
AccessToken
>
LinkedToken
(
)
const
;
absl
:
:
optional
<
AccessControlList
>
DefaultDacl
(
)
const
;
bool
SetDefaultDacl
(
const
AccessControlList
&
default_dacl
)
;
CHROME_LUID
Id
(
)
const
;
CHROME_LUID
AuthenticationId
(
)
const
;
std
:
:
vector
<
Privilege
>
Privileges
(
)
const
;
bool
IsElevated
(
)
const
;
bool
IsMember
(
const
Sid
&
sid
)
const
;
bool
IsMember
(
WellKnownSid
known_sid
)
const
;
bool
IsImpersonation
(
)
const
;
bool
IsIdentification
(
)
const
;
SecurityImpersonationLevel
ImpersonationLevel
(
)
const
;
absl
:
:
optional
<
AccessToken
>
DuplicatePrimary
(
ACCESS_MASK
desired_access
=
0
)
const
;
absl
:
:
optional
<
AccessToken
>
DuplicateImpersonation
(
SecurityImpersonationLevel
impersonation_level
=
SecurityImpersonationLevel
:
:
kImpersonation
ACCESS_MASK
desired_access
=
0
)
const
;
absl
:
:
optional
<
AccessToken
>
CreateRestricted
(
DWORD
flags
const
std
:
:
vector
<
Sid
>
&
sids_to_disable
const
std
:
:
vector
<
std
:
:
wstring
>
&
privileges_to_delete
const
std
:
:
vector
<
Sid
>
&
sids_to_restrict
ACCESS_MASK
desired_access
=
0
)
const
;
absl
:
:
optional
<
AccessToken
>
CreateAppContainer
(
const
Sid
&
appcontainer_sid
const
std
:
:
vector
<
Sid
>
&
capabilities
ACCESS_MASK
desired_access
=
0
)
const
;
absl
:
:
optional
<
bool
>
SetPrivilege
(
const
std
:
:
wstring
&
name
bool
enable
)
;
bool
RemovePrivilege
(
const
std
:
:
wstring
&
name
)
;
bool
is_valid
(
)
const
;
HANDLE
get
(
)
const
;
ScopedHandle
release
(
)
;
private
:
explicit
AccessToken
(
HANDLE
token
)
;
ScopedHandle
token_
;
}
;
}
#
endif
