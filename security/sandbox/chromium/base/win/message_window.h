#
ifndef
BASE_WIN_MESSAGE_WINDOW_H_
#
define
BASE_WIN_MESSAGE_WINDOW_H_
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
compiler_specific
.
h
"
#
include
"
base
/
functional
/
callback
.
h
"
#
include
"
base
/
threading
/
thread_checker
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
#
undef
FindWindow
namespace
base
{
namespace
win
{
class
BASE_EXPORT
MessageWindow
{
public
:
class
WindowClass
;
using
MessageCallback
=
base
:
:
RepeatingCallback
<
bool
(
UINT
message
WPARAM
wparam
LPARAM
lparam
LRESULT
*
result
)
>
;
MessageWindow
(
)
;
MessageWindow
(
const
MessageWindow
&
)
=
delete
;
MessageWindow
&
operator
=
(
const
MessageWindow
&
)
=
delete
;
~
MessageWindow
(
)
;
bool
Create
(
MessageCallback
message_callback
)
;
bool
CreateNamed
(
MessageCallback
message_callback
const
std
:
:
wstring
&
window_name
)
;
HWND
hwnd
(
)
const
{
return
window_
;
}
static
HWND
FindWindow
(
const
std
:
:
wstring
&
window_name
)
;
private
:
friend
class
WindowClass
;
bool
DoCreate
(
MessageCallback
message_callback
const
wchar_t
*
window_name
)
;
static
LRESULT
CALLBACK
WindowProc
(
HWND
hwnd
UINT
message
WPARAM
wparam
LPARAM
lparam
)
;
MessageCallback
message_callback_
;
HWND
window_
=
nullptr
;
THREAD_CHECKER
(
thread_checker_
)
;
}
;
}
}
#
endif
