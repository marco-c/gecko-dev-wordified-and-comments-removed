#
ifndef
BASE_WIN_SECURITY_DESCRIPTOR_H_
#
define
BASE_WIN_SECURITY_DESCRIPTOR_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
files
/
file_path
.
h
"
#
include
"
base
/
win
/
access_control_list
.
h
"
#
include
"
base
/
win
/
access_token
.
h
"
#
include
"
base
/
win
/
sid
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
base
:
:
win
{
enum
class
SecurityObjectType
{
kFile
kRegistry
kWindowStation
kDesktop
kKernel
}
;
struct
AccessCheckResult
{
ACCESS_MASK
granted_access
;
bool
access_status
;
}
;
class
BASE_EXPORT
SecurityDescriptor
{
public
:
class
BASE_EXPORT
SelfRelative
{
public
:
friend
SecurityDescriptor
;
SelfRelative
(
const
SelfRelative
&
)
;
~
SelfRelative
(
)
;
size_t
size
(
)
const
{
return
sd_
.
size
(
)
;
}
PSECURITY_DESCRIPTOR
get
(
)
const
{
return
const_cast
<
uint8_t
*
>
(
sd_
.
data
(
)
)
;
}
private
:
explicit
SelfRelative
(
std
:
:
vector
<
uint8_t
>
&
&
sd
)
;
std
:
:
vector
<
uint8_t
>
sd_
;
}
;
static
absl
:
:
optional
<
SecurityDescriptor
>
FromPointer
(
PSECURITY_DESCRIPTOR
security_descriptor
)
;
static
absl
:
:
optional
<
SecurityDescriptor
>
FromFile
(
const
base
:
:
FilePath
&
path
SECURITY_INFORMATION
security_info
)
;
static
absl
:
:
optional
<
SecurityDescriptor
>
FromName
(
const
std
:
:
wstring
&
name
SecurityObjectType
object_type
SECURITY_INFORMATION
security_info
)
;
static
absl
:
:
optional
<
SecurityDescriptor
>
FromHandle
(
HANDLE
handle
SecurityObjectType
object_type
SECURITY_INFORMATION
security_info
)
;
static
absl
:
:
optional
<
SecurityDescriptor
>
FromSddl
(
const
std
:
:
wstring
&
sddl
)
;
SecurityDescriptor
(
)
;
SecurityDescriptor
(
const
SecurityDescriptor
&
)
=
delete
;
SecurityDescriptor
&
operator
=
(
const
SecurityDescriptor
&
)
=
delete
;
SecurityDescriptor
(
SecurityDescriptor
&
&
)
;
SecurityDescriptor
&
operator
=
(
SecurityDescriptor
&
&
)
;
~
SecurityDescriptor
(
)
;
bool
WriteToFile
(
const
base
:
:
FilePath
&
path
SECURITY_INFORMATION
security_info
)
const
;
bool
WriteToName
(
const
std
:
:
wstring
&
name
SecurityObjectType
object_type
SECURITY_INFORMATION
security_info
)
const
;
bool
WriteToHandle
(
HANDLE
handle
SecurityObjectType
object_type
SECURITY_INFORMATION
security_info
)
const
;
absl
:
:
optional
<
std
:
:
wstring
>
ToSddl
(
SECURITY_INFORMATION
security_info
)
const
;
void
ToAbsolute
(
SECURITY_DESCRIPTOR
&
sd
)
const
;
absl
:
:
optional
<
SelfRelative
>
ToSelfRelative
(
)
const
;
SecurityDescriptor
Clone
(
)
const
;
bool
SetMandatoryLabel
(
DWORD
integrity_level
DWORD
inheritance
DWORD
mandatory_policy
)
;
bool
SetDaclEntries
(
const
std
:
:
vector
<
ExplicitAccessEntry
>
&
entries
)
;
bool
SetDaclEntry
(
const
Sid
&
sid
SecurityAccessMode
mode
DWORD
access_mask
DWORD
inheritance
)
;
bool
SetDaclEntry
(
WellKnownSid
known_sid
SecurityAccessMode
mode
DWORD
access_mask
DWORD
inheritance
)
;
absl
:
:
optional
<
AccessCheckResult
>
AccessCheck
(
const
AccessToken
&
token
ACCESS_MASK
desired_access
const
GENERIC_MAPPING
&
generic_mapping
)
;
absl
:
:
optional
<
AccessCheckResult
>
AccessCheck
(
const
AccessToken
&
token
ACCESS_MASK
desired_access
SecurityObjectType
object_type
)
;
const
absl
:
:
optional
<
Sid
>
&
owner
(
)
const
{
return
owner_
;
}
void
set_owner
(
const
Sid
&
owner
)
{
owner_
=
owner
.
Clone
(
)
;
}
void
clear_owner
(
)
{
owner_
=
absl
:
:
nullopt
;
}
const
absl
:
:
optional
<
Sid
>
&
group
(
)
const
{
return
group_
;
}
void
set_group
(
const
Sid
&
group
)
{
group_
=
group
.
Clone
(
)
;
}
void
clear_group
(
)
{
group_
=
absl
:
:
nullopt
;
}
const
absl
:
:
optional
<
AccessControlList
>
&
dacl
(
)
const
{
return
dacl_
;
}
void
set_dacl
(
const
AccessControlList
&
dacl
)
{
dacl_
=
dacl
.
Clone
(
)
;
}
void
clear_dacl
(
)
{
dacl_
=
absl
:
:
nullopt
;
}
bool
dacl_protected
(
)
const
{
return
dacl_protected_
;
}
void
set_dacl_protected
(
bool
dacl_protected
)
{
dacl_protected_
=
dacl_protected
;
}
const
absl
:
:
optional
<
AccessControlList
>
&
sacl
(
)
const
{
return
sacl_
;
}
void
set_sacl
(
const
AccessControlList
&
sacl
)
{
sacl_
=
sacl
.
Clone
(
)
;
}
void
clear_sacl
(
)
{
sacl_
=
absl
:
:
nullopt
;
}
bool
sacl_protected
(
)
const
{
return
sacl_protected_
;
}
void
set_sacl_protected
(
bool
sacl_protected
)
{
sacl_protected_
=
sacl_protected
;
}
private
:
SecurityDescriptor
(
absl
:
:
optional
<
Sid
>
&
&
owner
absl
:
:
optional
<
Sid
>
&
&
group
absl
:
:
optional
<
AccessControlList
>
&
&
dacl
bool
dacl_protected
absl
:
:
optional
<
AccessControlList
>
&
&
sacl
bool
sacl_protected
)
;
absl
:
:
optional
<
Sid
>
owner_
;
absl
:
:
optional
<
Sid
>
group_
;
absl
:
:
optional
<
AccessControlList
>
dacl_
;
bool
dacl_protected_
=
false
;
absl
:
:
optional
<
AccessControlList
>
sacl_
;
bool
sacl_protected_
=
false
;
}
;
}
#
endif
