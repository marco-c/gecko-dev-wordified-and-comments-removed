#
ifndef
BASE_WIN_STARTUP_INFORMATION_H_
#
define
BASE_WIN_STARTUP_INFORMATION_H_
#
include
<
windows
.
h
>
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
"
base
/
base_export
.
h
"
namespace
base
{
namespace
win
{
class
BASE_EXPORT
StartupInformation
{
public
:
StartupInformation
(
)
;
StartupInformation
(
const
StartupInformation
&
)
=
delete
;
StartupInformation
&
operator
=
(
const
StartupInformation
&
)
=
delete
;
~
StartupInformation
(
)
;
bool
InitializeProcThreadAttributeList
(
DWORD
attribute_count
)
;
bool
UpdateProcThreadAttribute
(
DWORD_PTR
attribute
void
*
value
size_t
size
)
;
LPSTARTUPINFOW
startup_info
(
)
{
return
&
startup_info_
.
StartupInfo
;
}
LPSTARTUPINFOW
startup_info
(
)
const
{
return
const_cast
<
const
LPSTARTUPINFOW
>
(
&
startup_info_
.
StartupInfo
)
;
}
bool
has_extended_startup_info
(
)
const
{
return
!
!
startup_info_
.
lpAttributeList
;
}
private
:
std
:
:
unique_ptr
<
char
[
]
>
attribute_list_
;
STARTUPINFOEXW
startup_info_
;
}
;
}
}
#
endif
