#
ifndef
BASE_WIN_SCOPED_HANDLE_VERIFIER_H_
#
define
BASE_WIN_SCOPED_HANDLE_VERIFIER_H_
#
include
"
base
/
win
/
windows_types
.
h
"
#
include
<
unordered_map
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
debug
/
stack_trace
.
h
"
#
include
"
base
/
hash
.
h
"
#
include
"
base
/
synchronization
/
lock_impl
.
h
"
#
include
"
base
/
threading
/
thread_local
.
h
"
namespace
base
{
namespace
win
{
namespace
internal
{
struct
HandleHash
{
size_t
operator
(
)
(
const
HANDLE
&
handle
)
const
{
char
buffer
[
sizeof
(
handle
)
]
;
memcpy
(
buffer
&
handle
sizeof
(
handle
)
)
;
return
base
:
:
Hash
(
buffer
sizeof
(
buffer
)
)
;
}
}
;
struct
ScopedHandleVerifierInfo
{
const
void
*
owner
;
const
void
*
pc1
;
const
void
*
pc2
;
base
:
:
debug
:
:
StackTrace
stack
;
DWORD
thread_id
;
}
;
#
pragma
warning
(
push
)
#
pragma
warning
(
disable
:
5030
)
class
[
[
clang
:
:
lto_visibility_public
]
]
ScopedHandleVerifier
{
#
pragma
warning
(
pop
)
public
:
explicit
ScopedHandleVerifier
(
bool
enabled
)
;
static
ScopedHandleVerifier
*
Get
(
)
;
virtual
bool
CloseHandle
(
HANDLE
handle
)
;
virtual
void
StartTracking
(
HANDLE
handle
const
void
*
owner
const
void
*
pc1
const
void
*
pc2
)
;
virtual
void
StopTracking
(
HANDLE
handle
const
void
*
owner
const
void
*
pc1
const
void
*
pc2
)
;
virtual
void
Disable
(
)
;
virtual
void
OnHandleBeingClosed
(
HANDLE
handle
)
;
virtual
HMODULE
GetModule
(
)
const
;
private
:
~
ScopedHandleVerifier
(
)
;
static
base
:
:
internal
:
:
LockImpl
*
GetLock
(
)
;
static
void
InstallVerifier
(
)
;
base
:
:
debug
:
:
StackTrace
creation_stack_
;
bool
enabled_
;
base
:
:
ThreadLocalBoolean
closing_
;
base
:
:
internal
:
:
LockImpl
*
lock_
;
std
:
:
unordered_map
<
HANDLE
ScopedHandleVerifierInfo
HandleHash
>
map_
;
DISALLOW_COPY_AND_ASSIGN
(
ScopedHandleVerifier
)
;
}
;
BASE_EXPORT
HMODULE
GetHandleVerifierModuleForTesting
(
)
;
}
}
}
#
endif
