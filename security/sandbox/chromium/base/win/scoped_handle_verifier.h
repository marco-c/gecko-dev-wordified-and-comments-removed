#
ifndef
BASE_WIN_SCOPED_HANDLE_VERIFIER_H_
#
define
BASE_WIN_SCOPED_HANDLE_VERIFIER_H_
#
include
<
memory
>
#
include
<
unordered_map
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
debug
/
stack_trace
.
h
"
#
include
"
base
/
hash
/
hash
.
h
"
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
base
/
synchronization
/
lock_impl
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
namespace
base
{
namespace
win
{
enum
class
HandleOperation
;
namespace
internal
{
struct
HandleHash
{
size_t
operator
(
)
(
const
HANDLE
&
handle
)
const
{
return
base
:
:
FastHash
(
as_bytes
(
make_span
(
&
handle
1u
)
)
)
;
}
}
;
struct
ScopedHandleVerifierInfo
{
ScopedHandleVerifierInfo
(
const
void
*
owner
const
void
*
pc1
const
void
*
pc2
std
:
:
unique_ptr
<
debug
:
:
StackTrace
>
stack
DWORD
thread_id
)
;
~
ScopedHandleVerifierInfo
(
)
;
ScopedHandleVerifierInfo
(
const
ScopedHandleVerifierInfo
&
)
=
delete
;
ScopedHandleVerifierInfo
&
operator
=
(
const
ScopedHandleVerifierInfo
&
)
=
delete
;
ScopedHandleVerifierInfo
(
ScopedHandleVerifierInfo
&
&
)
noexcept
;
ScopedHandleVerifierInfo
&
operator
=
(
ScopedHandleVerifierInfo
&
&
)
noexcept
;
raw_ptr
<
const
void
>
owner
;
raw_ptr
<
const
void
>
pc1
;
raw_ptr
<
const
void
>
pc2
;
std
:
:
unique_ptr
<
debug
:
:
StackTrace
>
stack
;
DWORD
thread_id
;
}
;
#
pragma
warning
(
push
)
#
pragma
warning
(
disable
:
5030
)
class
[
[
clang
:
:
lto_visibility_public
nodiscard
]
]
ScopedHandleVerifier
{
#
pragma
warning
(
pop
)
public
:
ScopedHandleVerifier
(
const
ScopedHandleVerifier
&
)
=
delete
;
ScopedHandleVerifier
&
operator
=
(
const
ScopedHandleVerifier
&
)
=
delete
;
static
ScopedHandleVerifier
*
Get
(
)
;
virtual
bool
CloseHandle
(
HANDLE
handle
)
;
virtual
void
StartTracking
(
HANDLE
handle
const
void
*
owner
const
void
*
pc1
const
void
*
pc2
)
;
virtual
void
StopTracking
(
HANDLE
handle
const
void
*
owner
const
void
*
pc1
const
void
*
pc2
)
;
virtual
void
Disable
(
)
;
virtual
void
OnHandleBeingClosed
(
HANDLE
handle
HandleOperation
operation
)
;
virtual
HMODULE
GetModule
(
)
const
;
private
:
explicit
ScopedHandleVerifier
(
bool
enabled
)
;
~
ScopedHandleVerifier
(
)
;
void
StartTrackingImpl
(
HANDLE
handle
const
void
*
owner
const
void
*
pc1
const
void
*
pc2
)
;
void
StopTrackingImpl
(
HANDLE
handle
const
void
*
owner
const
void
*
pc1
const
void
*
pc2
)
;
void
OnHandleBeingClosedImpl
(
HANDLE
handle
HandleOperation
operation
)
;
static
base
:
:
internal
:
:
LockImpl
*
GetLock
(
)
;
static
void
InstallVerifier
(
)
;
static
void
ThreadSafeAssignOrCreateScopedHandleVerifier
(
ScopedHandleVerifier
*
existing_verifier
bool
enabled
)
;
base
:
:
debug
:
:
StackTrace
creation_stack_
;
bool
enabled_
;
raw_ptr
<
base
:
:
internal
:
:
LockImpl
>
lock_
;
std
:
:
unordered_map
<
HANDLE
ScopedHandleVerifierInfo
HandleHash
>
map_
;
}
;
BASE_EXPORT
HMODULE
GetHandleVerifierModuleForTesting
(
)
;
}
}
}
#
endif
