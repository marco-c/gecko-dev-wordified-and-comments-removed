#
ifndef
BASE_WIN_PE_IMAGE_H_
#
define
BASE_WIN_PE_IMAGE_H_
#
include
<
windows
.
h
>
#
include
<
stdint
.
h
>
#
include
<
delayimp
.
h
>
namespace
base
{
namespace
win
{
class
PEImage
{
public
:
using
EnumSectionsFunction
=
bool
(
*
)
(
const
PEImage
&
PIMAGE_SECTION_HEADER
PVOID
DWORD
PVOID
)
;
using
EnumExportsFunction
=
bool
(
*
)
(
const
PEImage
&
DWORD
DWORD
LPCSTR
PVOID
LPCSTR
PVOID
)
;
using
EnumImportChunksFunction
=
bool
(
*
)
(
const
PEImage
&
LPCSTR
PIMAGE_THUNK_DATA
PIMAGE_THUNK_DATA
PVOID
)
;
using
EnumImportsFunction
=
bool
(
*
)
(
const
PEImage
&
LPCSTR
DWORD
LPCSTR
DWORD
PIMAGE_THUNK_DATA
PVOID
)
;
using
EnumDelayImportChunksFunction
=
bool
(
*
)
(
const
PEImage
&
PImgDelayDescr
LPCSTR
PIMAGE_THUNK_DATA
PIMAGE_THUNK_DATA
PVOID
)
;
using
EnumRelocsFunction
=
bool
(
*
)
(
const
PEImage
&
WORD
PVOID
PVOID
)
;
explicit
PEImage
(
HMODULE
module
)
:
module_
(
module
)
{
}
explicit
PEImage
(
const
void
*
module
)
{
module_
=
reinterpret_cast
<
HMODULE
>
(
const_cast
<
void
*
>
(
module
)
)
;
}
virtual
~
PEImage
(
)
=
default
;
HMODULE
module
(
)
const
;
void
set_module
(
HMODULE
module
)
;
static
bool
IsOrdinal
(
LPCSTR
name
)
;
static
WORD
ToOrdinal
(
LPCSTR
name
)
;
PIMAGE_DOS_HEADER
GetDosHeader
(
)
const
;
PIMAGE_NT_HEADERS
GetNTHeaders
(
)
const
;
WORD
GetNumSections
(
)
const
;
PIMAGE_SECTION_HEADER
GetSectionHeader
(
WORD
section
)
const
;
DWORD
GetImageDirectoryEntrySize
(
UINT
directory
)
const
;
PVOID
GetImageDirectoryEntryAddr
(
UINT
directory
)
const
;
PIMAGE_SECTION_HEADER
GetImageSectionFromAddr
(
PVOID
address
)
const
;
PIMAGE_SECTION_HEADER
GetImageSectionHeaderByName
(
LPCSTR
section_name
)
const
;
PIMAGE_IMPORT_DESCRIPTOR
GetFirstImportChunk
(
)
const
;
PIMAGE_EXPORT_DIRECTORY
GetExportDirectory
(
)
const
;
bool
GetDebugId
(
LPGUID
guid
LPDWORD
age
LPCSTR
*
pdb_filename
size_t
*
pdb_filename_length
)
const
;
PDWORD
GetExportEntry
(
LPCSTR
name
)
const
;
FARPROC
GetProcAddress
(
LPCSTR
function_name
)
const
;
bool
GetProcOrdinal
(
LPCSTR
function_name
WORD
*
ordinal
)
const
;
bool
EnumSections
(
EnumSectionsFunction
callback
PVOID
cookie
)
const
;
bool
EnumExports
(
EnumExportsFunction
callback
PVOID
cookie
)
const
;
bool
EnumAllImports
(
EnumImportsFunction
callback
PVOID
cookie
LPCSTR
target_module_name
)
const
;
bool
EnumImportChunks
(
EnumImportChunksFunction
callback
PVOID
cookie
LPCSTR
target_module_name
)
const
;
bool
EnumOneImportChunk
(
EnumImportsFunction
callback
LPCSTR
module_name
PIMAGE_THUNK_DATA
name_table
PIMAGE_THUNK_DATA
iat
PVOID
cookie
)
const
;
bool
EnumAllDelayImports
(
EnumImportsFunction
callback
PVOID
cookie
LPCSTR
target_module_name
)
const
;
bool
EnumDelayImportChunks
(
EnumDelayImportChunksFunction
callback
PVOID
cookie
LPCSTR
target_module_name
)
const
;
bool
EnumOneDelayImportChunk
(
EnumImportsFunction
callback
PImgDelayDescr
delay_descriptor
LPCSTR
module_name
PIMAGE_THUNK_DATA
name_table
PIMAGE_THUNK_DATA
iat
PVOID
cookie
)
const
;
bool
EnumRelocs
(
EnumRelocsFunction
callback
PVOID
cookie
)
const
;
bool
VerifyMagic
(
)
const
;
virtual
PVOID
RVAToAddr
(
uintptr_t
rva
)
const
;
bool
ImageRVAToOnDiskOffset
(
uintptr_t
rva
DWORD
*
on_disk_offset
)
const
;
bool
ImageAddrToOnDiskOffset
(
LPVOID
address
DWORD
*
on_disk_offset
)
const
;
private
:
const
IMAGE_DATA_DIRECTORY
*
GetDataDirectory
(
UINT
directory
)
const
;
HMODULE
module_
;
}
;
class
PEImageAsData
:
public
PEImage
{
public
:
explicit
PEImageAsData
(
HMODULE
hModule
)
:
PEImage
(
hModule
)
{
}
PVOID
RVAToAddr
(
uintptr_t
rva
)
const
override
;
}
;
inline
bool
PEImage
:
:
IsOrdinal
(
LPCSTR
name
)
{
return
reinterpret_cast
<
uintptr_t
>
(
name
)
<
=
0xFFFF
;
}
inline
WORD
PEImage
:
:
ToOrdinal
(
LPCSTR
name
)
{
return
static_cast
<
WORD
>
(
reinterpret_cast
<
intptr_t
>
(
name
)
)
;
}
inline
HMODULE
PEImage
:
:
module
(
)
const
{
return
module_
;
}
inline
PIMAGE_IMPORT_DESCRIPTOR
PEImage
:
:
GetFirstImportChunk
(
)
const
{
return
reinterpret_cast
<
PIMAGE_IMPORT_DESCRIPTOR
>
(
GetImageDirectoryEntryAddr
(
IMAGE_DIRECTORY_ENTRY_IMPORT
)
)
;
}
inline
PIMAGE_EXPORT_DIRECTORY
PEImage
:
:
GetExportDirectory
(
)
const
{
return
reinterpret_cast
<
PIMAGE_EXPORT_DIRECTORY
>
(
GetImageDirectoryEntryAddr
(
IMAGE_DIRECTORY_ENTRY_EXPORT
)
)
;
}
}
}
#
endif
