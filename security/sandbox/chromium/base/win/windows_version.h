#
ifndef
BASE_WIN_WINDOWS_VERSION_H_
#
define
BASE_WIN_WINDOWS_VERSION_H_
#
include
<
stddef
.
h
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
gtest_prod_util
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
version
.
h
"
typedef
void
*
HANDLE
;
struct
_OSVERSIONINFOEXW
;
struct
_SYSTEM_INFO
;
namespace
base
{
namespace
test
{
class
ScopedOSInfoOverride
;
}
}
namespace
base
{
namespace
win
{
enum
Version
{
VERSION_PRE_XP
=
0
VERSION_XP
=
1
VERSION_SERVER_2003
=
2
VERSION_VISTA
=
3
VERSION_WIN7
=
4
VERSION_WIN8
=
5
VERSION_WIN8_1
=
6
VERSION_WIN10
=
7
VERSION_WIN10_TH2
=
8
VERSION_WIN10_RS1
=
9
VERSION_WIN10_RS2
=
10
VERSION_WIN10_RS3
=
11
VERSION_WIN10_RS4
=
12
VERSION_WIN10_RS5
=
13
VERSION_WIN_LAST
}
;
enum
VersionType
{
SUITE_HOME
=
0
SUITE_PROFESSIONAL
SUITE_SERVER
SUITE_ENTERPRISE
SUITE_EDUCATION
SUITE_LAST
}
;
class
BASE_EXPORT
OSInfo
{
public
:
struct
VersionNumber
{
int
major
;
int
minor
;
int
build
;
int
patch
;
}
;
struct
ServicePack
{
int
major
;
int
minor
;
}
;
enum
WindowsArchitecture
{
X86_ARCHITECTURE
X64_ARCHITECTURE
IA64_ARCHITECTURE
ARM64_ARCHITECTURE
OTHER_ARCHITECTURE
}
;
enum
WOW64Status
{
WOW64_DISABLED
WOW64_ENABLED
WOW64_UNKNOWN
}
;
static
OSInfo
*
GetInstance
(
)
;
static
WindowsArchitecture
GetArchitecture
(
)
;
static
WOW64Status
GetWOW64StatusForProcess
(
HANDLE
process_handle
)
;
Version
version
(
)
const
{
return
version_
;
}
Version
Kernel32Version
(
)
const
;
base
:
:
Version
Kernel32BaseVersion
(
)
const
;
VersionNumber
version_number
(
)
const
{
return
version_number_
;
}
VersionType
version_type
(
)
const
{
return
version_type_
;
}
ServicePack
service_pack
(
)
const
{
return
service_pack_
;
}
std
:
:
string
service_pack_str
(
)
const
{
return
service_pack_str_
;
}
WindowsArchitecture
architecture
(
)
const
{
return
GetArchitecture
(
)
;
}
int
processors
(
)
const
{
return
processors_
;
}
size_t
allocation_granularity
(
)
const
{
return
allocation_granularity_
;
}
WOW64Status
wow64_status
(
)
const
{
return
wow64_status_
;
}
std
:
:
string
processor_model_name
(
)
;
private
:
friend
class
base
:
:
test
:
:
ScopedOSInfoOverride
;
FRIEND_TEST_ALL_PREFIXES
(
OSInfo
MajorMinorBuildToVersion
)
;
static
OSInfo
*
*
GetInstanceStorage
(
)
;
OSInfo
(
const
_OSVERSIONINFOEXW
&
version_info
const
_SYSTEM_INFO
&
system_info
int
os_type
)
;
~
OSInfo
(
)
;
static
Version
MajorMinorBuildToVersion
(
int
major
int
minor
int
build
)
;
Version
version_
;
VersionNumber
version_number_
;
VersionType
version_type_
;
ServicePack
service_pack_
;
std
:
:
string
service_pack_str_
;
int
processors_
;
size_t
allocation_granularity_
;
WOW64Status
wow64_status_
;
std
:
:
string
processor_model_name_
;
DISALLOW_COPY_AND_ASSIGN
(
OSInfo
)
;
}
;
BASE_EXPORT
Version
GetVersion
(
)
;
}
}
#
endif
