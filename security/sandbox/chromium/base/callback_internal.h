#
ifndef
BASE_CALLBACK_INTERNAL_H_
#
define
BASE_CALLBACK_INTERNAL_H_
#
include
"
base
/
atomic_ref_count
.
h
"
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
callback_forward
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
memory
/
ref_counted
.
h
"
namespace
base
{
namespace
internal
{
template
<
CopyMode
copy_mode
>
class
CallbackBase
;
class
BASE_EXPORT
BindStateBase
{
public
:
using
InvokeFuncStorage
=
void
(
*
)
(
)
;
protected
:
BindStateBase
(
InvokeFuncStorage
polymorphic_invoke
void
(
*
destructor
)
(
const
BindStateBase
*
)
)
;
BindStateBase
(
InvokeFuncStorage
polymorphic_invoke
void
(
*
destructor
)
(
const
BindStateBase
*
)
bool
(
*
is_cancelled
)
(
const
BindStateBase
*
)
)
;
~
BindStateBase
(
)
=
default
;
private
:
friend
class
scoped_refptr
<
BindStateBase
>
;
template
<
CopyMode
copy_mode
>
friend
class
CallbackBase
;
bool
IsCancelled
(
)
const
{
return
is_cancelled_
(
this
)
;
}
void
AddRef
(
)
const
;
void
Release
(
)
const
;
InvokeFuncStorage
polymorphic_invoke_
;
mutable
AtomicRefCount
ref_count_
;
void
(
*
destructor_
)
(
const
BindStateBase
*
)
;
bool
(
*
is_cancelled_
)
(
const
BindStateBase
*
)
;
DISALLOW_COPY_AND_ASSIGN
(
BindStateBase
)
;
}
;
template
<
>
class
BASE_EXPORT
CallbackBase
<
CopyMode
:
:
MoveOnly
>
{
public
:
CallbackBase
(
CallbackBase
&
&
c
)
;
CallbackBase
&
operator
=
(
CallbackBase
&
&
c
)
;
explicit
CallbackBase
(
const
CallbackBase
<
CopyMode
:
:
Copyable
>
&
c
)
;
CallbackBase
&
operator
=
(
const
CallbackBase
<
CopyMode
:
:
Copyable
>
&
c
)
;
bool
is_null
(
)
const
{
return
bind_state_
.
get
(
)
=
=
NULL
;
}
explicit
operator
bool
(
)
const
{
return
!
is_null
(
)
;
}
bool
IsCancelled
(
)
const
;
void
Reset
(
)
;
protected
:
using
InvokeFuncStorage
=
BindStateBase
:
:
InvokeFuncStorage
;
bool
EqualsInternal
(
const
CallbackBase
&
other
)
const
;
explicit
CallbackBase
(
BindStateBase
*
bind_state
)
;
InvokeFuncStorage
polymorphic_invoke
(
)
const
{
return
bind_state_
-
>
polymorphic_invoke_
;
}
~
CallbackBase
(
)
;
scoped_refptr
<
BindStateBase
>
bind_state_
;
}
;
template
<
>
class
BASE_EXPORT
CallbackBase
<
CopyMode
:
:
Copyable
>
:
public
CallbackBase
<
CopyMode
:
:
MoveOnly
>
{
public
:
CallbackBase
(
const
CallbackBase
&
c
)
;
CallbackBase
(
CallbackBase
&
&
c
)
;
CallbackBase
&
operator
=
(
const
CallbackBase
&
c
)
;
CallbackBase
&
operator
=
(
CallbackBase
&
&
c
)
;
protected
:
explicit
CallbackBase
(
BindStateBase
*
bind_state
)
:
CallbackBase
<
CopyMode
:
:
MoveOnly
>
(
bind_state
)
{
}
~
CallbackBase
(
)
{
}
}
;
extern
template
class
CallbackBase
<
CopyMode
:
:
MoveOnly
>
;
extern
template
class
CallbackBase
<
CopyMode
:
:
Copyable
>
;
}
}
#
endif
