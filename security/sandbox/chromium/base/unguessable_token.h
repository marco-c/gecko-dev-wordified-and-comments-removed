#
ifndef
BASE_UNGUESSABLE_TOKEN_H_
#
define
BASE_UNGUESSABLE_TOKEN_H_
#
include
<
stdint
.
h
>
#
include
<
string
.
h
>
#
include
<
iosfwd
>
#
include
<
tuple
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
hash
.
h
"
#
include
"
base
/
logging
.
h
"
namespace
base
{
struct
UnguessableTokenHash
;
class
BASE_EXPORT
UnguessableToken
{
public
:
static
UnguessableToken
Create
(
)
;
static
UnguessableToken
Deserialize
(
uint64_t
high
uint64_t
low
)
;
constexpr
UnguessableToken
(
)
=
default
;
uint64_t
GetHighForSerialization
(
)
const
{
DCHECK
(
!
is_empty
(
)
)
;
return
high_
;
}
uint64_t
GetLowForSerialization
(
)
const
{
DCHECK
(
!
is_empty
(
)
)
;
return
low_
;
}
bool
is_empty
(
)
const
{
return
high_
=
=
0
&
&
low_
=
=
0
;
}
std
:
:
string
ToString
(
)
const
;
explicit
operator
bool
(
)
const
{
return
!
is_empty
(
)
;
}
bool
operator
<
(
const
UnguessableToken
&
other
)
const
{
return
std
:
:
tie
(
high_
low_
)
<
std
:
:
tie
(
other
.
high_
other
.
low_
)
;
}
bool
operator
=
=
(
const
UnguessableToken
&
other
)
const
{
return
high_
=
=
other
.
high_
&
&
low_
=
=
other
.
low_
;
}
bool
operator
!
=
(
const
UnguessableToken
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
private
:
friend
struct
UnguessableTokenHash
;
UnguessableToken
(
uint64_t
high
uint64_t
low
)
;
uint64_t
high_
=
0
;
uint64_t
low_
=
0
;
}
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
out
const
UnguessableToken
&
token
)
;
struct
UnguessableTokenHash
{
size_t
operator
(
)
(
const
base
:
:
UnguessableToken
&
token
)
const
{
DCHECK
(
token
)
;
return
base
:
:
HashInts64
(
token
.
high_
token
.
low_
)
;
}
}
;
}
#
endif
