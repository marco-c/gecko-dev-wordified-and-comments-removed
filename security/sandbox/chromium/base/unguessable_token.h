#
ifndef
BASE_UNGUESSABLE_TOKEN_H_
#
define
BASE_UNGUESSABLE_TOKEN_H_
#
include
<
stdint
.
h
>
#
include
<
string
.
h
>
#
include
<
iosfwd
>
#
include
<
tuple
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
check
.
h
"
#
include
"
base
/
containers
/
span
.
h
"
#
include
"
base
/
token
.
h
"
namespace
base
{
struct
UnguessableTokenHash
;
class
BASE_EXPORT
UnguessableToken
{
public
:
static
UnguessableToken
Create
(
)
;
static
const
UnguessableToken
&
Null
(
)
;
static
absl
:
:
optional
<
UnguessableToken
>
Deserialize
(
uint64_t
high
uint64_t
low
)
;
constexpr
UnguessableToken
(
)
=
default
;
constexpr
UnguessableToken
(
const
UnguessableToken
&
)
=
default
;
constexpr
UnguessableToken
&
operator
=
(
const
UnguessableToken
&
)
=
default
;
constexpr
UnguessableToken
(
UnguessableToken
&
&
)
noexcept
=
default
;
constexpr
UnguessableToken
&
operator
=
(
UnguessableToken
&
&
)
=
default
;
uint64_t
GetHighForSerialization
(
)
const
{
DCHECK
(
!
is_empty
(
)
)
;
return
token_
.
high
(
)
;
}
uint64_t
GetLowForSerialization
(
)
const
{
DCHECK
(
!
is_empty
(
)
)
;
return
token_
.
low
(
)
;
}
constexpr
bool
is_empty
(
)
const
{
return
token_
.
is_zero
(
)
;
}
std
:
:
string
ToString
(
)
const
{
return
token_
.
ToString
(
)
;
}
explicit
constexpr
operator
bool
(
)
const
{
return
!
is_empty
(
)
;
}
span
<
const
uint8_t
16
>
AsBytes
(
)
const
{
return
token_
.
AsBytes
(
)
;
}
constexpr
bool
operator
<
(
const
UnguessableToken
&
other
)
const
{
return
token_
<
other
.
token_
;
}
bool
operator
=
=
(
const
UnguessableToken
&
other
)
const
;
bool
operator
!
=
(
const
UnguessableToken
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
#
if
defined
(
UNIT_TEST
)
static
UnguessableToken
CreateForTesting
(
uint64_t
high
uint64_t
low
)
{
absl
:
:
optional
<
UnguessableToken
>
token
=
Deserialize
(
high
low
)
;
DCHECK
(
token
.
has_value
(
)
)
;
return
token
.
value
(
)
;
}
#
endif
private
:
friend
struct
UnguessableTokenHash
;
explicit
UnguessableToken
(
const
Token
&
token
)
;
base
:
:
Token
token_
;
}
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
out
const
UnguessableToken
&
token
)
;
struct
UnguessableTokenHash
{
size_t
operator
(
)
(
const
base
:
:
UnguessableToken
&
token
)
const
{
DCHECK
(
token
)
;
return
TokenHash
(
)
(
token
.
token_
)
;
}
}
;
}
#
endif
