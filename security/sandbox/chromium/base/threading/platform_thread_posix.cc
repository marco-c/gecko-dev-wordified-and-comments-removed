#
include
"
base
/
notreached
.
h
"
#
include
"
base
/
threading
/
platform_thread
.
h
"
#
include
<
errno
.
h
>
#
include
<
pthread
.
h
>
#
include
<
sched
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
sys
/
time
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
unistd
.
h
>
#
include
<
memory
>
#
include
<
tuple
>
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
partition_alloc_buildflags
.
h
"
#
include
"
base
/
compiler_specific
.
h
"
#
include
"
base
/
lazy_instance
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
base
/
threading
/
platform_thread_internal_posix
.
h
"
#
include
"
base
/
threading
/
scoped_blocking_call
.
h
"
#
include
"
base
/
threading
/
thread_id_name_manager
.
h
"
#
include
"
base
/
threading
/
thread_restrictions
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
!
BUILDFLAG
(
IS_APPLE
)
&
&
!
BUILDFLAG
(
IS_FUCHSIA
)
&
&
!
BUILDFLAG
(
IS_NACL
)
#
include
"
base
/
posix
/
can_lower_nice_to
.
h
"
#
endif
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
#
include
<
sys
/
syscall
.
h
>
#
include
<
atomic
>
#
endif
#
if
BUILDFLAG
(
IS_FUCHSIA
)
#
include
<
zircon
/
process
.
h
>
#
else
#
include
<
sys
/
resource
.
h
>
#
endif
#
if
BUILDFLAG
(
USE_PARTITION_ALLOC_AS_MALLOC
)
&
&
BUILDFLAG
(
USE_STARSCAN
)
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
starscan
/
pcscan
.
h
"
#
include
"
base
/
allocator
/
partition_allocator
/
src
/
partition_alloc
/
starscan
/
stack
/
stack
.
h
"
#
endif
namespace
base
{
void
InitThreading
(
)
;
void
TerminateOnThread
(
)
;
size_t
GetDefaultThreadStackSize
(
const
pthread_attr_t
&
attributes
)
;
namespace
{
#
if
!
defined
(
MOZ_SANDBOX
)
struct
ThreadParams
{
ThreadParams
(
)
=
default
;
raw_ptr
<
PlatformThread
:
:
Delegate
>
delegate
=
nullptr
;
bool
joinable
=
false
;
ThreadType
thread_type
=
ThreadType
:
:
kDefault
;
MessagePumpType
message_pump_type
=
MessagePumpType
:
:
DEFAULT
;
}
;
void
*
ThreadFunc
(
void
*
params
)
{
PlatformThread
:
:
Delegate
*
delegate
=
nullptr
;
{
std
:
:
unique_ptr
<
ThreadParams
>
thread_params
(
static_cast
<
ThreadParams
*
>
(
params
)
)
;
delegate
=
thread_params
-
>
delegate
;
if
(
!
thread_params
-
>
joinable
)
base
:
:
DisallowSingleton
(
)
;
#
if
BUILDFLAG
(
USE_PARTITION_ALLOC_AS_MALLOC
)
&
&
BUILDFLAG
(
USE_STARSCAN
)
partition_alloc
:
:
internal
:
:
PCScan
:
:
NotifyThreadCreated
(
partition_alloc
:
:
internal
:
:
GetStackPointer
(
)
)
;
#
endif
#
if
!
BUILDFLAG
(
IS_NACL
)
#
if
BUILDFLAG
(
IS_APPLE
)
PlatformThread
:
:
SetCurrentThreadRealtimePeriodValue
(
delegate
-
>
GetRealtimePeriod
(
)
)
;
#
endif
PlatformThread
:
:
SetCurrentThreadType
(
thread_params
-
>
thread_type
)
;
#
endif
}
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
RegisterThread
(
PlatformThread
:
:
CurrentHandle
(
)
.
platform_handle
(
)
PlatformThread
:
:
CurrentId
(
)
)
;
delegate
-
>
ThreadMain
(
)
;
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
RemoveName
(
PlatformThread
:
:
CurrentHandle
(
)
.
platform_handle
(
)
PlatformThread
:
:
CurrentId
(
)
)
;
#
if
BUILDFLAG
(
USE_PARTITION_ALLOC_AS_MALLOC
)
&
&
BUILDFLAG
(
USE_STARSCAN
)
partition_alloc
:
:
internal
:
:
PCScan
:
:
NotifyThreadDestroyed
(
)
;
#
endif
base
:
:
TerminateOnThread
(
)
;
return
nullptr
;
}
bool
CreateThread
(
size_t
stack_size
bool
joinable
PlatformThread
:
:
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
ThreadType
thread_type
MessagePumpType
message_pump_type
)
{
DCHECK
(
thread_handle
)
;
base
:
:
InitThreading
(
)
;
pthread_attr_t
attributes
;
pthread_attr_init
(
&
attributes
)
;
if
(
!
joinable
)
pthread_attr_setdetachstate
(
&
attributes
PTHREAD_CREATE_DETACHED
)
;
if
(
stack_size
=
=
0
)
stack_size
=
base
:
:
GetDefaultThreadStackSize
(
attributes
)
;
if
(
stack_size
>
0
)
pthread_attr_setstacksize
(
&
attributes
stack_size
)
;
std
:
:
unique_ptr
<
ThreadParams
>
params
(
new
ThreadParams
)
;
params
-
>
delegate
=
delegate
;
params
-
>
joinable
=
joinable
;
params
-
>
thread_type
=
thread_type
;
params
-
>
message_pump_type
=
message_pump_type
;
pthread_t
handle
;
int
err
=
pthread_create
(
&
handle
&
attributes
ThreadFunc
params
.
get
(
)
)
;
bool
success
=
!
err
;
if
(
success
)
{
std
:
:
ignore
=
params
.
release
(
)
;
}
else
{
handle
=
0
;
errno
=
err
;
PLOG
(
ERROR
)
<
<
"
pthread_create
"
;
}
*
thread_handle
=
PlatformThreadHandle
(
handle
)
;
pthread_attr_destroy
(
&
attributes
)
;
return
success
;
}
#
endif
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
thread_local
pid_t
g_thread_id
=
-
1
;
std
:
:
atomic
<
bool
>
g_main_thread_tid_cache_valid
=
false
;
thread_local
bool
g_is_main_thread
=
true
;
class
InitAtFork
{
public
:
InitAtFork
(
)
{
pthread_atfork
(
nullptr
nullptr
internal
:
:
InvalidateTidCache
)
;
}
}
;
#
endif
}
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
namespace
internal
{
void
InvalidateTidCache
(
)
{
g_main_thread_tid_cache_valid
.
store
(
false
std
:
:
memory_order_relaxed
)
;
}
}
#
endif
PlatformThreadId
PlatformThreadBase
:
:
CurrentId
(
)
{
#
if
BUILDFLAG
(
IS_APPLE
)
return
pthread_mach_thread_np
(
pthread_self
(
)
)
;
#
elif
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
MSAN_UNPOISON
(
&
g_thread_id
sizeof
(
pid_t
)
)
;
MSAN_UNPOISON
(
&
g_is_main_thread
sizeof
(
bool
)
)
;
static
InitAtFork
init_at_fork
;
if
(
g_thread_id
=
=
-
1
|
|
(
g_is_main_thread
&
&
!
g_main_thread_tid_cache_valid
.
load
(
std
:
:
memory_order_relaxed
)
)
)
{
g_thread_id
=
static_cast
<
pid_t
>
(
syscall
(
__NR_gettid
)
)
;
if
(
g_thread_id
=
=
getpid
(
)
)
{
g_main_thread_tid_cache_valid
.
store
(
true
std
:
:
memory_order_relaxed
)
;
}
else
{
g_is_main_thread
=
false
;
}
}
else
{
#
if
DCHECK_IS_ON
(
)
if
(
g_thread_id
!
=
syscall
(
__NR_gettid
)
)
{
RAW_LOG
(
FATAL
"
Thread
id
stored
in
TLS
is
different
from
thread
id
returned
by
"
"
the
system
.
It
is
likely
that
the
process
was
forked
without
going
"
"
through
fork
(
)
.
"
)
;
}
#
endif
}
return
g_thread_id
;
#
elif
BUILDFLAG
(
IS_ANDROID
)
return
gettid
(
)
;
#
elif
BUILDFLAG
(
IS_FUCHSIA
)
return
zx_thread_self
(
)
;
#
elif
BUILDFLAG
(
IS_SOLARIS
)
|
|
BUILDFLAG
(
IS_QNX
)
return
pthread_self
(
)
;
#
elif
BUILDFLAG
(
IS_NACL
)
&
&
defined
(
__GLIBC__
)
return
pthread_self
(
)
;
#
elif
BUILDFLAG
(
IS_NACL
)
&
&
!
defined
(
__GLIBC__
)
return
reinterpret_cast
<
int32_t
>
(
pthread_self
(
)
)
;
#
elif
BUILDFLAG
(
IS_POSIX
)
&
&
BUILDFLAG
(
IS_AIX
)
return
pthread_self
(
)
;
#
elif
BUILDFLAG
(
IS_POSIX
)
&
&
!
BUILDFLAG
(
IS_AIX
)
return
reinterpret_cast
<
int64_t
>
(
pthread_self
(
)
)
;
#
endif
}
PlatformThreadRef
PlatformThreadBase
:
:
CurrentRef
(
)
{
return
PlatformThreadRef
(
pthread_self
(
)
)
;
}
PlatformThreadHandle
PlatformThreadBase
:
:
CurrentHandle
(
)
{
return
PlatformThreadHandle
(
pthread_self
(
)
)
;
}
#
if
!
BUILDFLAG
(
IS_APPLE
)
void
PlatformThreadBase
:
:
YieldCurrentThread
(
)
{
sched_yield
(
)
;
}
#
endif
void
PlatformThreadBase
:
:
Sleep
(
TimeDelta
duration
)
{
struct
timespec
sleep_time
remaining
;
sleep_time
.
tv_sec
=
static_cast
<
time_t
>
(
duration
.
InSeconds
(
)
)
;
duration
-
=
Seconds
(
sleep_time
.
tv_sec
)
;
sleep_time
.
tv_nsec
=
static_cast
<
long
>
(
duration
.
InMicroseconds
(
)
*
1000
)
;
while
(
nanosleep
(
&
sleep_time
&
remaining
)
=
=
-
1
&
&
errno
=
=
EINTR
)
sleep_time
=
remaining
;
}
const
char
*
PlatformThreadBase
:
:
GetName
(
)
{
return
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
GetName
(
CurrentId
(
)
)
;
}
#
if
!
defined
(
MOZ_SANDBOX
)
bool
PlatformThreadBase
:
:
CreateWithType
(
size_t
stack_size
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
ThreadType
thread_type
MessagePumpType
pump_type_hint
)
{
return
CreateThread
(
stack_size
true
delegate
thread_handle
thread_type
pump_type_hint
)
;
}
bool
PlatformThreadBase
:
:
CreateNonJoinable
(
size_t
stack_size
Delegate
*
delegate
)
{
return
CreateNonJoinableWithType
(
stack_size
delegate
ThreadType
:
:
kDefault
)
;
}
bool
PlatformThreadBase
:
:
CreateNonJoinableWithType
(
size_t
stack_size
Delegate
*
delegate
ThreadType
thread_type
MessagePumpType
pump_type_hint
)
{
PlatformThreadHandle
unused
;
bool
result
=
CreateThread
(
stack_size
false
delegate
&
unused
thread_type
pump_type_hint
)
;
return
result
;
}
#
endif
void
PlatformThreadBase
:
:
Join
(
PlatformThreadHandle
thread_handle
)
{
base
:
:
internal
:
:
ScopedBlockingCallWithBaseSyncPrimitives
scoped_blocking_call
(
FROM_HERE
base
:
:
BlockingType
:
:
MAY_BLOCK
)
;
CHECK_EQ
(
0
pthread_join
(
thread_handle
.
platform_handle
(
)
nullptr
)
)
;
}
void
PlatformThreadBase
:
:
Detach
(
PlatformThreadHandle
thread_handle
)
{
CHECK_EQ
(
0
pthread_detach
(
thread_handle
.
platform_handle
(
)
)
)
;
}
#
if
!
BUILDFLAG
(
IS_APPLE
)
&
&
!
BUILDFLAG
(
IS_FUCHSIA
)
#
if
!
defined
(
MOZ_SANDBOX
)
bool
PlatformThreadBase
:
:
CanChangeThreadType
(
ThreadType
from
ThreadType
to
)
{
#
if
BUILDFLAG
(
IS_NACL
)
return
false
;
#
else
if
(
from
>
=
to
)
{
return
true
;
}
if
(
to
=
=
ThreadType
:
:
kRealtimeAudio
)
{
return
internal
:
:
CanSetThreadTypeToRealtimeAudio
(
)
;
}
return
internal
:
:
CanLowerNiceTo
(
internal
:
:
ThreadTypeToNiceValue
(
to
)
)
;
#
endif
}
#
endif
namespace
internal
{
void
SetCurrentThreadTypeImpl
(
ThreadType
thread_type
MessagePumpType
pump_type_hint
)
{
#
if
BUILDFLAG
(
IS_NACL
)
NOTIMPLEMENTED
(
)
;
#
else
if
(
internal
:
:
SetCurrentThreadTypeForPlatform
(
thread_type
pump_type_hint
)
)
return
;
const
int
nice_setting
=
internal
:
:
ThreadTypeToNiceValue
(
thread_type
)
;
if
(
setpriority
(
PRIO_PROCESS
0
nice_setting
)
)
{
DVPLOG
(
1
)
<
<
"
Failed
to
set
nice
value
of
thread
(
"
<
<
PlatformThread
:
:
CurrentId
(
)
<
<
"
)
to
"
<
<
nice_setting
;
}
#
endif
}
}
ThreadPriorityForTest
PlatformThreadBase
:
:
GetCurrentThreadPriorityForTest
(
)
{
#
if
BUILDFLAG
(
IS_NACL
)
NOTIMPLEMENTED
(
)
;
return
ThreadPriorityForTest
:
:
kNormal
;
#
else
auto
platform_specific_priority
=
internal
:
:
GetCurrentThreadPriorityForPlatformForTest
(
)
;
if
(
platform_specific_priority
)
return
platform_specific_priority
.
value
(
)
;
int
nice_value
=
internal
:
:
GetCurrentThreadNiceValue
(
)
;
return
internal
:
:
NiceValueToThreadPriorityForTest
(
nice_value
)
;
#
endif
}
#
endif
size_t
PlatformThreadBase
:
:
GetDefaultThreadStackSize
(
)
{
pthread_attr_t
attributes
;
pthread_attr_init
(
&
attributes
)
;
return
base
:
:
GetDefaultThreadStackSize
(
attributes
)
;
}
}
