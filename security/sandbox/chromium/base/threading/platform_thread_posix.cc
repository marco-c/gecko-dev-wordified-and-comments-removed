#
include
"
base
/
threading
/
platform_thread
.
h
"
#
include
<
errno
.
h
>
#
include
<
pthread
.
h
>
#
include
<
sched
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
sys
/
resource
.
h
>
#
include
<
sys
/
time
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
unistd
.
h
>
#
include
<
memory
>
#
include
"
base
/
debug
/
activity_tracker
.
h
"
#
include
"
base
/
lazy_instance
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
threading
/
platform_thread_internal_posix
.
h
"
#
include
"
base
/
threading
/
thread_id_name_manager
.
h
"
#
include
"
base
/
threading
/
thread_restrictions
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_LINUX
)
#
include
<
sys
/
syscall
.
h
>
#
endif
#
if
defined
(
OS_FUCHSIA
)
#
include
<
magenta
/
process
.
h
>
#
endif
namespace
base
{
void
InitThreading
(
)
;
void
TerminateOnThread
(
)
;
size_t
GetDefaultThreadStackSize
(
const
pthread_attr_t
&
attributes
)
;
namespace
{
struct
ThreadParams
{
ThreadParams
(
)
:
delegate
(
NULL
)
joinable
(
false
)
priority
(
ThreadPriority
:
:
NORMAL
)
{
}
PlatformThread
:
:
Delegate
*
delegate
;
bool
joinable
;
ThreadPriority
priority
;
}
;
void
*
ThreadFunc
(
void
*
params
)
{
PlatformThread
:
:
Delegate
*
delegate
=
nullptr
;
{
std
:
:
unique_ptr
<
ThreadParams
>
thread_params
(
static_cast
<
ThreadParams
*
>
(
params
)
)
;
delegate
=
thread_params
-
>
delegate
;
if
(
!
thread_params
-
>
joinable
)
base
:
:
ThreadRestrictions
:
:
SetSingletonAllowed
(
false
)
;
#
if
!
defined
(
OS_NACL
)
PlatformThread
:
:
SetCurrentThreadPriority
(
thread_params
-
>
priority
)
;
#
endif
}
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
RegisterThread
(
PlatformThread
:
:
CurrentHandle
(
)
.
platform_handle
(
)
PlatformThread
:
:
CurrentId
(
)
)
;
delegate
-
>
ThreadMain
(
)
;
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
RemoveName
(
PlatformThread
:
:
CurrentHandle
(
)
.
platform_handle
(
)
PlatformThread
:
:
CurrentId
(
)
)
;
base
:
:
TerminateOnThread
(
)
;
return
NULL
;
}
bool
CreateThread
(
size_t
stack_size
bool
joinable
PlatformThread
:
:
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
ThreadPriority
priority
)
{
DCHECK
(
thread_handle
)
;
base
:
:
InitThreading
(
)
;
pthread_attr_t
attributes
;
pthread_attr_init
(
&
attributes
)
;
if
(
!
joinable
)
pthread_attr_setdetachstate
(
&
attributes
PTHREAD_CREATE_DETACHED
)
;
if
(
stack_size
=
=
0
)
stack_size
=
base
:
:
GetDefaultThreadStackSize
(
attributes
)
;
if
(
stack_size
>
0
)
pthread_attr_setstacksize
(
&
attributes
stack_size
)
;
std
:
:
unique_ptr
<
ThreadParams
>
params
(
new
ThreadParams
)
;
params
-
>
delegate
=
delegate
;
params
-
>
joinable
=
joinable
;
params
-
>
priority
=
priority
;
pthread_t
handle
;
int
err
=
pthread_create
(
&
handle
&
attributes
ThreadFunc
params
.
get
(
)
)
;
bool
success
=
!
err
;
if
(
success
)
{
ignore_result
(
params
.
release
(
)
)
;
}
else
{
handle
=
0
;
errno
=
err
;
PLOG
(
ERROR
)
<
<
"
pthread_create
"
;
}
*
thread_handle
=
PlatformThreadHandle
(
handle
)
;
pthread_attr_destroy
(
&
attributes
)
;
return
success
;
}
}
PlatformThreadId
PlatformThread
:
:
CurrentId
(
)
{
#
if
defined
(
OS_MACOSX
)
return
pthread_mach_thread_np
(
pthread_self
(
)
)
;
#
elif
defined
(
OS_LINUX
)
return
syscall
(
__NR_gettid
)
;
#
elif
defined
(
OS_ANDROID
)
return
gettid
(
)
;
#
elif
defined
(
OS_FUCHSIA
)
return
mx_thread_self
(
)
;
#
elif
defined
(
OS_SOLARIS
)
|
|
defined
(
OS_QNX
)
return
pthread_self
(
)
;
#
elif
defined
(
OS_NACL
)
&
&
defined
(
__GLIBC__
)
return
pthread_self
(
)
;
#
elif
defined
(
OS_NACL
)
&
&
!
defined
(
__GLIBC__
)
return
reinterpret_cast
<
int32_t
>
(
pthread_self
(
)
)
;
#
elif
defined
(
OS_POSIX
)
&
&
defined
(
OS_AIX
)
return
pthread_self
(
)
;
#
elif
defined
(
OS_POSIX
)
&
&
!
defined
(
OS_AIX
)
return
reinterpret_cast
<
int64_t
>
(
pthread_self
(
)
)
;
#
endif
}
PlatformThreadRef
PlatformThread
:
:
CurrentRef
(
)
{
return
PlatformThreadRef
(
pthread_self
(
)
)
;
}
PlatformThreadHandle
PlatformThread
:
:
CurrentHandle
(
)
{
return
PlatformThreadHandle
(
pthread_self
(
)
)
;
}
void
PlatformThread
:
:
YieldCurrentThread
(
)
{
sched_yield
(
)
;
}
void
PlatformThread
:
:
Sleep
(
TimeDelta
duration
)
{
struct
timespec
sleep_time
remaining
;
sleep_time
.
tv_sec
=
duration
.
InSeconds
(
)
;
duration
-
=
TimeDelta
:
:
FromSeconds
(
sleep_time
.
tv_sec
)
;
sleep_time
.
tv_nsec
=
duration
.
InMicroseconds
(
)
*
1000
;
while
(
nanosleep
(
&
sleep_time
&
remaining
)
=
=
-
1
&
&
errno
=
=
EINTR
)
sleep_time
=
remaining
;
}
const
char
*
PlatformThread
:
:
GetName
(
)
{
return
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
GetName
(
CurrentId
(
)
)
;
}
bool
PlatformThread
:
:
CreateWithPriority
(
size_t
stack_size
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
ThreadPriority
priority
)
{
return
CreateThread
(
stack_size
true
delegate
thread_handle
priority
)
;
}
bool
PlatformThread
:
:
CreateNonJoinable
(
size_t
stack_size
Delegate
*
delegate
)
{
return
CreateNonJoinableWithPriority
(
stack_size
delegate
ThreadPriority
:
:
NORMAL
)
;
}
bool
PlatformThread
:
:
CreateNonJoinableWithPriority
(
size_t
stack_size
Delegate
*
delegate
ThreadPriority
priority
)
{
PlatformThreadHandle
unused
;
bool
result
=
CreateThread
(
stack_size
false
delegate
&
unused
priority
)
;
return
result
;
}
void
PlatformThread
:
:
Join
(
PlatformThreadHandle
thread_handle
)
{
base
:
:
debug
:
:
ScopedThreadJoinActivity
thread_activity
(
&
thread_handle
)
;
base
:
:
ThreadRestrictions
:
:
AssertIOAllowed
(
)
;
CHECK_EQ
(
0
pthread_join
(
thread_handle
.
platform_handle
(
)
NULL
)
)
;
}
void
PlatformThread
:
:
Detach
(
PlatformThreadHandle
thread_handle
)
{
CHECK_EQ
(
0
pthread_detach
(
thread_handle
.
platform_handle
(
)
)
)
;
}
#
if
!
defined
(
OS_MACOSX
)
bool
PlatformThread
:
:
CanIncreaseCurrentThreadPriority
(
)
{
#
if
defined
(
OS_NACL
)
return
false
;
#
else
return
geteuid
(
)
=
=
0
;
#
endif
}
void
PlatformThread
:
:
SetCurrentThreadPriority
(
ThreadPriority
priority
)
{
#
if
defined
(
OS_NACL
)
NOTIMPLEMENTED
(
)
;
#
else
if
(
internal
:
:
SetCurrentThreadPriorityForPlatform
(
priority
)
)
return
;
const
int
nice_setting
=
internal
:
:
ThreadPriorityToNiceValue
(
priority
)
;
if
(
setpriority
(
PRIO_PROCESS
0
nice_setting
)
)
{
DVPLOG
(
1
)
<
<
"
Failed
to
set
nice
value
of
thread
(
"
<
<
PlatformThread
:
:
CurrentId
(
)
<
<
"
)
to
"
<
<
nice_setting
;
}
#
endif
}
ThreadPriority
PlatformThread
:
:
GetCurrentThreadPriority
(
)
{
#
if
defined
(
OS_NACL
)
NOTIMPLEMENTED
(
)
;
return
ThreadPriority
:
:
NORMAL
;
#
else
ThreadPriority
platform_specific_priority
;
if
(
internal
:
:
GetCurrentThreadPriorityForPlatform
(
&
platform_specific_priority
)
)
{
return
platform_specific_priority
;
}
errno
=
0
;
int
nice_value
=
getpriority
(
PRIO_PROCESS
0
)
;
if
(
errno
!
=
0
)
{
DVPLOG
(
1
)
<
<
"
Failed
to
get
nice
value
of
thread
(
"
<
<
PlatformThread
:
:
CurrentId
(
)
<
<
"
)
"
;
return
ThreadPriority
:
:
NORMAL
;
}
return
internal
:
:
NiceValueToThreadPriority
(
nice_value
)
;
#
endif
}
#
endif
}
