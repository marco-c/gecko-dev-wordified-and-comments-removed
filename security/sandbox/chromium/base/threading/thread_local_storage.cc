#
include
"
base
/
threading
/
thread_local_storage
.
h
"
#
include
"
base
/
atomicops
.
h
"
#
include
"
base
/
compiler_specific
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
no_destructor
.
h
"
#
include
"
base
/
synchronization
/
lock
.
h
"
#
include
"
build
/
build_config
.
h
"
using
base
:
:
internal
:
:
PlatformThreadLocalStorage
;
namespace
{
base
:
:
subtle
:
:
Atomic32
g_native_tls_key
=
PlatformThreadLocalStorage
:
:
TLS_KEY_OUT_OF_INDEXES
;
enum
class
TlsVectorState
{
kUninitialized
=
0
kDestroying
kDestroyed
kInUse
kMaxValue
=
kInUse
}
;
constexpr
uintptr_t
kVectorStateBitMask
=
3
;
static_assert
(
static_cast
<
int
>
(
TlsVectorState
:
:
kMaxValue
)
<
=
kVectorStateBitMask
"
number
of
states
must
fit
in
header
"
)
;
static_assert
(
static_cast
<
int
>
(
TlsVectorState
:
:
kUninitialized
)
=
=
0
"
kUninitialized
must
be
null
"
)
;
constexpr
int
kThreadLocalStorageSize
=
256
;
enum
TlsStatus
{
FREE
IN_USE
}
;
struct
TlsMetadata
{
TlsStatus
status
;
base
:
:
ThreadLocalStorage
:
:
TLSDestructorFunc
destructor
;
uint32_t
version
;
}
;
struct
TlsVectorEntry
{
void
*
data
;
uint32_t
version
;
}
;
base
:
:
Lock
*
GetTLSMetadataLock
(
)
{
static
auto
*
lock
=
new
base
:
:
Lock
(
)
;
return
lock
;
}
TlsMetadata
g_tls_metadata
[
kThreadLocalStorageSize
]
;
size_t
g_last_assigned_slot
=
0
;
constexpr
int
kMaxDestructorIterations
=
kThreadLocalStorageSize
;
void
SetTlsVectorValue
(
PlatformThreadLocalStorage
:
:
TLSKey
key
TlsVectorEntry
*
tls_data
TlsVectorState
state
)
{
DCHECK
(
tls_data
|
|
(
state
=
=
TlsVectorState
:
:
kUninitialized
)
|
|
(
state
=
=
TlsVectorState
:
:
kDestroyed
)
)
;
PlatformThreadLocalStorage
:
:
SetTLSValue
(
key
reinterpret_cast
<
void
*
>
(
reinterpret_cast
<
uintptr_t
>
(
tls_data
)
|
static_cast
<
uintptr_t
>
(
state
)
)
)
;
}
TlsVectorState
GetTlsVectorStateAndValue
(
void
*
tls_value
TlsVectorEntry
*
*
entry
=
nullptr
)
{
if
(
entry
)
{
*
entry
=
reinterpret_cast
<
TlsVectorEntry
*
>
(
reinterpret_cast
<
uintptr_t
>
(
tls_value
)
&
~
kVectorStateBitMask
)
;
}
return
static_cast
<
TlsVectorState
>
(
reinterpret_cast
<
uintptr_t
>
(
tls_value
)
&
kVectorStateBitMask
)
;
}
TlsVectorState
GetTlsVectorStateAndValue
(
PlatformThreadLocalStorage
:
:
TLSKey
key
TlsVectorEntry
*
*
entry
=
nullptr
)
{
return
GetTlsVectorStateAndValue
(
PlatformThreadLocalStorage
:
:
GetTLSValue
(
key
)
entry
)
;
}
TlsVectorEntry
*
ConstructTlsVector
(
)
{
PlatformThreadLocalStorage
:
:
TLSKey
key
=
base
:
:
subtle
:
:
NoBarrier_Load
(
&
g_native_tls_key
)
;
if
(
key
=
=
PlatformThreadLocalStorage
:
:
TLS_KEY_OUT_OF_INDEXES
)
{
CHECK
(
PlatformThreadLocalStorage
:
:
AllocTLS
(
&
key
)
)
;
if
(
key
=
=
PlatformThreadLocalStorage
:
:
TLS_KEY_OUT_OF_INDEXES
)
{
PlatformThreadLocalStorage
:
:
TLSKey
tmp
=
key
;
CHECK
(
PlatformThreadLocalStorage
:
:
AllocTLS
(
&
key
)
&
&
key
!
=
PlatformThreadLocalStorage
:
:
TLS_KEY_OUT_OF_INDEXES
)
;
PlatformThreadLocalStorage
:
:
FreeTLS
(
tmp
)
;
}
if
(
PlatformThreadLocalStorage
:
:
TLS_KEY_OUT_OF_INDEXES
!
=
static_cast
<
PlatformThreadLocalStorage
:
:
TLSKey
>
(
base
:
:
subtle
:
:
NoBarrier_CompareAndSwap
(
&
g_native_tls_key
PlatformThreadLocalStorage
:
:
TLS_KEY_OUT_OF_INDEXES
key
)
)
)
{
PlatformThreadLocalStorage
:
:
FreeTLS
(
key
)
;
key
=
base
:
:
subtle
:
:
NoBarrier_Load
(
&
g_native_tls_key
)
;
}
}
CHECK_EQ
(
GetTlsVectorStateAndValue
(
key
)
TlsVectorState
:
:
kUninitialized
)
;
TlsVectorEntry
stack_allocated_tls_data
[
kThreadLocalStorageSize
]
;
memset
(
stack_allocated_tls_data
0
sizeof
(
stack_allocated_tls_data
)
)
;
SetTlsVectorValue
(
key
stack_allocated_tls_data
TlsVectorState
:
:
kInUse
)
;
TlsVectorEntry
*
tls_data
=
new
TlsVectorEntry
[
kThreadLocalStorageSize
]
;
memcpy
(
tls_data
stack_allocated_tls_data
sizeof
(
stack_allocated_tls_data
)
)
;
SetTlsVectorValue
(
key
tls_data
TlsVectorState
:
:
kInUse
)
;
return
tls_data
;
}
void
OnThreadExitInternal
(
TlsVectorEntry
*
tls_data
)
{
DCHECK
(
tls_data
)
;
TlsVectorEntry
stack_allocated_tls_data
[
kThreadLocalStorageSize
]
;
memcpy
(
stack_allocated_tls_data
tls_data
sizeof
(
stack_allocated_tls_data
)
)
;
PlatformThreadLocalStorage
:
:
TLSKey
key
=
base
:
:
subtle
:
:
NoBarrier_Load
(
&
g_native_tls_key
)
;
SetTlsVectorValue
(
key
stack_allocated_tls_data
TlsVectorState
:
:
kDestroying
)
;
delete
[
]
tls_data
;
TlsMetadata
tls_metadata
[
kThreadLocalStorageSize
]
;
{
base
:
:
AutoLock
auto_lock
(
*
GetTLSMetadataLock
(
)
)
;
memcpy
(
tls_metadata
g_tls_metadata
sizeof
(
g_tls_metadata
)
)
;
}
int
remaining_attempts
=
kMaxDestructorIterations
;
bool
need_to_scan_destructors
=
true
;
while
(
need_to_scan_destructors
)
{
need_to_scan_destructors
=
false
;
for
(
int
slot
=
0
;
slot
<
kThreadLocalStorageSize
;
+
+
slot
)
{
void
*
tls_value
=
stack_allocated_tls_data
[
slot
]
.
data
;
if
(
!
tls_value
|
|
tls_metadata
[
slot
]
.
status
=
=
TlsStatus
:
:
FREE
|
|
stack_allocated_tls_data
[
slot
]
.
version
!
=
tls_metadata
[
slot
]
.
version
)
continue
;
base
:
:
ThreadLocalStorage
:
:
TLSDestructorFunc
destructor
=
tls_metadata
[
slot
]
.
destructor
;
if
(
!
destructor
)
continue
;
stack_allocated_tls_data
[
slot
]
.
data
=
nullptr
;
destructor
(
tls_value
)
;
need_to_scan_destructors
=
true
;
}
if
(
-
-
remaining_attempts
<
=
0
)
{
NOTREACHED
(
)
;
break
;
}
}
SetTlsVectorValue
(
key
nullptr
TlsVectorState
:
:
kDestroyed
)
;
}
}
namespace
base
{
namespace
internal
{
#
if
defined
(
OS_WIN
)
void
PlatformThreadLocalStorage
:
:
OnThreadExit
(
)
{
PlatformThreadLocalStorage
:
:
TLSKey
key
=
base
:
:
subtle
:
:
NoBarrier_Load
(
&
g_native_tls_key
)
;
if
(
key
=
=
PlatformThreadLocalStorage
:
:
TLS_KEY_OUT_OF_INDEXES
)
return
;
TlsVectorEntry
*
tls_vector
=
nullptr
;
const
TlsVectorState
state
=
GetTlsVectorStateAndValue
(
key
&
tls_vector
)
;
DCHECK_NE
(
state
TlsVectorState
:
:
kDestroyed
)
;
if
(
state
=
=
TlsVectorState
:
:
kUninitialized
)
return
;
OnThreadExitInternal
(
tls_vector
)
;
}
#
elif
defined
(
OS_POSIX
)
|
|
defined
(
OS_FUCHSIA
)
void
PlatformThreadLocalStorage
:
:
OnThreadExit
(
void
*
value
)
{
TlsVectorEntry
*
tls_vector
=
nullptr
;
const
TlsVectorState
state
=
GetTlsVectorStateAndValue
(
value
&
tls_vector
)
;
if
(
state
=
=
TlsVectorState
:
:
kDestroyed
)
{
PlatformThreadLocalStorage
:
:
TLSKey
key
=
base
:
:
subtle
:
:
NoBarrier_Load
(
&
g_native_tls_key
)
;
SetTlsVectorValue
(
key
nullptr
TlsVectorState
:
:
kUninitialized
)
;
return
;
}
OnThreadExitInternal
(
tls_vector
)
;
}
#
endif
}
bool
ThreadLocalStorage
:
:
HasBeenDestroyed
(
)
{
PlatformThreadLocalStorage
:
:
TLSKey
key
=
base
:
:
subtle
:
:
NoBarrier_Load
(
&
g_native_tls_key
)
;
if
(
key
=
=
PlatformThreadLocalStorage
:
:
TLS_KEY_OUT_OF_INDEXES
)
return
false
;
const
TlsVectorState
state
=
GetTlsVectorStateAndValue
(
key
)
;
return
state
=
=
TlsVectorState
:
:
kDestroying
|
|
state
=
=
TlsVectorState
:
:
kDestroyed
;
}
void
ThreadLocalStorage
:
:
Slot
:
:
Initialize
(
TLSDestructorFunc
destructor
)
{
PlatformThreadLocalStorage
:
:
TLSKey
key
=
base
:
:
subtle
:
:
NoBarrier_Load
(
&
g_native_tls_key
)
;
if
(
key
=
=
PlatformThreadLocalStorage
:
:
TLS_KEY_OUT_OF_INDEXES
|
|
GetTlsVectorStateAndValue
(
key
)
=
=
TlsVectorState
:
:
kUninitialized
)
{
ConstructTlsVector
(
)
;
}
{
base
:
:
AutoLock
auto_lock
(
*
GetTLSMetadataLock
(
)
)
;
for
(
int
i
=
0
;
i
<
kThreadLocalStorageSize
;
+
+
i
)
{
size_t
slot_candidate
=
(
g_last_assigned_slot
+
1
+
i
)
%
kThreadLocalStorageSize
;
if
(
g_tls_metadata
[
slot_candidate
]
.
status
=
=
TlsStatus
:
:
FREE
)
{
g_tls_metadata
[
slot_candidate
]
.
status
=
TlsStatus
:
:
IN_USE
;
g_tls_metadata
[
slot_candidate
]
.
destructor
=
destructor
;
g_last_assigned_slot
=
slot_candidate
;
DCHECK_EQ
(
kInvalidSlotValue
slot_
)
;
slot_
=
slot_candidate
;
version_
=
g_tls_metadata
[
slot_candidate
]
.
version
;
break
;
}
}
}
CHECK_NE
(
slot_
kInvalidSlotValue
)
;
CHECK_LT
(
slot_
kThreadLocalStorageSize
)
;
}
void
ThreadLocalStorage
:
:
Slot
:
:
Free
(
)
{
DCHECK_NE
(
slot_
kInvalidSlotValue
)
;
DCHECK_LT
(
slot_
kThreadLocalStorageSize
)
;
{
base
:
:
AutoLock
auto_lock
(
*
GetTLSMetadataLock
(
)
)
;
g_tls_metadata
[
slot_
]
.
status
=
TlsStatus
:
:
FREE
;
g_tls_metadata
[
slot_
]
.
destructor
=
nullptr
;
+
+
(
g_tls_metadata
[
slot_
]
.
version
)
;
}
slot_
=
kInvalidSlotValue
;
}
void
*
ThreadLocalStorage
:
:
Slot
:
:
Get
(
)
const
{
TlsVectorEntry
*
tls_data
=
nullptr
;
const
TlsVectorState
state
=
GetTlsVectorStateAndValue
(
base
:
:
subtle
:
:
NoBarrier_Load
(
&
g_native_tls_key
)
&
tls_data
)
;
DCHECK_NE
(
state
TlsVectorState
:
:
kDestroyed
)
;
if
(
!
tls_data
)
return
nullptr
;
DCHECK_NE
(
slot_
kInvalidSlotValue
)
;
DCHECK_LT
(
slot_
kThreadLocalStorageSize
)
;
if
(
tls_data
[
slot_
]
.
version
!
=
version_
)
return
nullptr
;
return
tls_data
[
slot_
]
.
data
;
}
void
ThreadLocalStorage
:
:
Slot
:
:
Set
(
void
*
value
)
{
TlsVectorEntry
*
tls_data
=
nullptr
;
const
TlsVectorState
state
=
GetTlsVectorStateAndValue
(
base
:
:
subtle
:
:
NoBarrier_Load
(
&
g_native_tls_key
)
&
tls_data
)
;
DCHECK_NE
(
state
TlsVectorState
:
:
kDestroyed
)
;
if
(
!
tls_data
)
{
if
(
!
value
)
return
;
tls_data
=
ConstructTlsVector
(
)
;
}
DCHECK_NE
(
slot_
kInvalidSlotValue
)
;
DCHECK_LT
(
slot_
kThreadLocalStorageSize
)
;
tls_data
[
slot_
]
.
data
=
value
;
tls_data
[
slot_
]
.
version
=
version_
;
}
ThreadLocalStorage
:
:
Slot
:
:
Slot
(
TLSDestructorFunc
destructor
)
{
Initialize
(
destructor
)
;
}
ThreadLocalStorage
:
:
Slot
:
:
~
Slot
(
)
{
Free
(
)
;
}
}
