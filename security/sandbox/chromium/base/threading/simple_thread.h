#
ifndef
BASE_THREADING_SIMPLE_THREAD_H_
#
define
BASE_THREADING_SIMPLE_THREAD_H_
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
compiler_specific
.
h
"
#
include
"
base
/
containers
/
queue
.
h
"
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
base
/
synchronization
/
lock
.
h
"
#
include
"
base
/
synchronization
/
waitable_event
.
h
"
#
include
"
base
/
threading
/
platform_thread
.
h
"
namespace
base
{
class
BASE_EXPORT
SimpleThread
:
public
PlatformThread
:
:
Delegate
{
public
:
struct
BASE_EXPORT
Options
{
public
:
Options
(
)
=
default
;
explicit
Options
(
ThreadType
thread_type
)
:
thread_type
(
thread_type
)
{
}
~
Options
(
)
=
default
;
Options
(
const
Options
&
other
)
=
default
;
Options
&
operator
=
(
const
Options
&
other
)
=
default
;
size_t
stack_size
=
0
;
ThreadType
thread_type
=
ThreadType
:
:
kDefault
;
bool
joinable
=
true
;
}
;
explicit
SimpleThread
(
const
std
:
:
string
&
name
)
;
SimpleThread
(
const
std
:
:
string
&
name
const
Options
&
options
)
;
SimpleThread
(
const
SimpleThread
&
)
=
delete
;
SimpleThread
&
operator
=
(
const
SimpleThread
&
)
=
delete
;
~
SimpleThread
(
)
override
;
void
Start
(
)
;
void
Join
(
)
;
void
StartAsync
(
)
;
virtual
void
Run
(
)
=
0
;
PlatformThreadId
tid
(
)
;
bool
HasBeenStarted
(
)
;
bool
HasBeenJoined
(
)
const
{
return
joined_
;
}
bool
HasStartBeenAttempted
(
)
{
return
start_called_
;
}
void
ThreadMain
(
)
override
;
private
:
virtual
void
BeforeStart
(
)
{
}
virtual
void
BeforeRun
(
)
{
}
virtual
void
BeforeJoin
(
)
{
}
const
std
:
:
string
name_
;
const
Options
options_
;
PlatformThreadHandle
thread_
;
WaitableEvent
event_
;
PlatformThreadId
tid_
=
kInvalidThreadId
;
bool
joined_
=
false
;
bool
start_called_
=
false
;
}
;
class
BASE_EXPORT
DelegateSimpleThread
:
public
SimpleThread
{
public
:
class
BASE_EXPORT
Delegate
{
public
:
virtual
~
Delegate
(
)
=
default
;
virtual
void
Run
(
)
=
0
;
}
;
DelegateSimpleThread
(
Delegate
*
delegate
const
std
:
:
string
&
name_prefix
)
;
DelegateSimpleThread
(
Delegate
*
delegate
const
std
:
:
string
&
name_prefix
const
Options
&
options
)
;
DelegateSimpleThread
(
const
DelegateSimpleThread
&
)
=
delete
;
DelegateSimpleThread
&
operator
=
(
const
DelegateSimpleThread
&
)
=
delete
;
~
DelegateSimpleThread
(
)
override
;
void
Run
(
)
override
;
private
:
raw_ptr
<
Delegate
>
delegate_
;
}
;
class
BASE_EXPORT
DelegateSimpleThreadPool
:
public
DelegateSimpleThread
:
:
Delegate
{
public
:
typedef
DelegateSimpleThread
:
:
Delegate
Delegate
;
DelegateSimpleThreadPool
(
const
std
:
:
string
&
name_prefix
size_t
num_threads
)
;
DelegateSimpleThreadPool
(
const
DelegateSimpleThreadPool
&
)
=
delete
;
DelegateSimpleThreadPool
&
operator
=
(
const
DelegateSimpleThreadPool
&
)
=
delete
;
~
DelegateSimpleThreadPool
(
)
override
;
void
Start
(
)
;
void
JoinAll
(
)
;
void
AddWork
(
Delegate
*
work
size_t
repeat_count
=
1
)
;
void
Run
(
)
override
;
private
:
const
std
:
:
string
name_prefix_
;
size_t
num_threads_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
DelegateSimpleThread
>
>
threads_
;
base
:
:
queue
<
Delegate
*
>
delegates_
;
base
:
:
Lock
lock_
;
WaitableEvent
dry_
;
}
;
}
#
endif
