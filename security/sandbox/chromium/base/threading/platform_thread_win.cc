#
include
"
base
/
threading
/
platform_thread
.
h
"
#
include
<
stddef
.
h
>
#
include
"
base
/
debug
/
activity_tracker
.
h
"
#
include
"
base
/
debug
/
alias
.
h
"
#
include
"
base
/
debug
/
profiler
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
strings
/
utf_string_conversions
.
h
"
#
include
"
base
/
threading
/
thread_id_name_manager
.
h
"
#
include
"
base
/
threading
/
thread_restrictions
.
h
"
#
include
"
base
/
tracked_objects
.
h
"
#
include
"
base
/
win
/
scoped_handle
.
h
"
namespace
base
{
namespace
{
const
DWORD
kVCThreadNameException
=
0x406D1388
;
typedef
struct
tagTHREADNAME_INFO
{
DWORD
dwType
;
LPCSTR
szName
;
DWORD
dwThreadID
;
DWORD
dwFlags
;
}
THREADNAME_INFO
;
typedef
HRESULT
(
WINAPI
*
SetThreadDescription
)
(
HANDLE
hThread
PCWSTR
lpThreadDescription
)
;
void
SetNameInternal
(
PlatformThreadId
thread_id
const
char
*
name
)
{
THREADNAME_INFO
info
;
info
.
dwType
=
0x1000
;
info
.
szName
=
name
;
info
.
dwThreadID
=
thread_id
;
info
.
dwFlags
=
0
;
__try
{
RaiseException
(
kVCThreadNameException
0
sizeof
(
info
)
/
sizeof
(
DWORD
)
reinterpret_cast
<
DWORD_PTR
*
>
(
&
info
)
)
;
}
__except
(
EXCEPTION_CONTINUE_EXECUTION
)
{
}
}
struct
ThreadParams
{
PlatformThread
:
:
Delegate
*
delegate
;
bool
joinable
;
ThreadPriority
priority
;
}
;
DWORD
__stdcall
ThreadFunc
(
void
*
params
)
{
ThreadParams
*
thread_params
=
static_cast
<
ThreadParams
*
>
(
params
)
;
PlatformThread
:
:
Delegate
*
delegate
=
thread_params
-
>
delegate
;
if
(
!
thread_params
-
>
joinable
)
base
:
:
ThreadRestrictions
:
:
SetSingletonAllowed
(
false
)
;
if
(
thread_params
-
>
priority
!
=
ThreadPriority
:
:
NORMAL
)
PlatformThread
:
:
SetCurrentThreadPriority
(
thread_params
-
>
priority
)
;
PlatformThreadHandle
:
:
Handle
platform_handle
;
BOOL
did_dup
=
DuplicateHandle
(
GetCurrentProcess
(
)
GetCurrentThread
(
)
GetCurrentProcess
(
)
&
platform_handle
0
FALSE
DUPLICATE_SAME_ACCESS
)
;
win
:
:
ScopedHandle
scoped_platform_handle
;
if
(
did_dup
)
{
scoped_platform_handle
.
Set
(
platform_handle
)
;
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
RegisterThread
(
scoped_platform_handle
.
Get
(
)
PlatformThread
:
:
CurrentId
(
)
)
;
}
delete
thread_params
;
delegate
-
>
ThreadMain
(
)
;
if
(
did_dup
)
{
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
RemoveName
(
scoped_platform_handle
.
Get
(
)
PlatformThread
:
:
CurrentId
(
)
)
;
}
return
0
;
}
bool
CreateThreadInternal
(
size_t
stack_size
PlatformThread
:
:
Delegate
*
delegate
PlatformThreadHandle
*
out_thread_handle
ThreadPriority
priority
)
{
unsigned
int
flags
=
0
;
if
(
stack_size
>
0
)
{
flags
=
STACK_SIZE_PARAM_IS_A_RESERVATION
;
}
ThreadParams
*
params
=
new
ThreadParams
;
params
-
>
delegate
=
delegate
;
params
-
>
joinable
=
out_thread_handle
!
=
nullptr
;
params
-
>
priority
=
priority
;
void
*
thread_handle
=
:
:
CreateThread
(
nullptr
stack_size
ThreadFunc
params
flags
nullptr
)
;
if
(
!
thread_handle
)
{
delete
params
;
return
false
;
}
if
(
out_thread_handle
)
*
out_thread_handle
=
PlatformThreadHandle
(
thread_handle
)
;
else
CloseHandle
(
thread_handle
)
;
return
true
;
}
}
PlatformThreadId
PlatformThread
:
:
CurrentId
(
)
{
return
:
:
GetCurrentThreadId
(
)
;
}
PlatformThreadRef
PlatformThread
:
:
CurrentRef
(
)
{
return
PlatformThreadRef
(
:
:
GetCurrentThreadId
(
)
)
;
}
PlatformThreadHandle
PlatformThread
:
:
CurrentHandle
(
)
{
return
PlatformThreadHandle
(
:
:
GetCurrentThread
(
)
)
;
}
void
PlatformThread
:
:
YieldCurrentThread
(
)
{
:
:
Sleep
(
0
)
;
}
void
PlatformThread
:
:
Sleep
(
TimeDelta
duration
)
{
TimeTicks
end
=
TimeTicks
:
:
Now
(
)
+
duration
;
for
(
TimeTicks
now
=
TimeTicks
:
:
Now
(
)
;
now
<
end
;
now
=
TimeTicks
:
:
Now
(
)
)
:
:
Sleep
(
static_cast
<
DWORD
>
(
(
end
-
now
)
.
InMillisecondsRoundedUp
(
)
)
)
;
}
void
PlatformThread
:
:
SetName
(
const
std
:
:
string
&
name
)
{
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
SetName
(
CurrentId
(
)
name
)
;
if
(
name
!
=
"
BrokerEvent
"
)
tracked_objects
:
:
ThreadData
:
:
InitializeThreadContext
(
name
)
;
auto
set_thread_description_func
=
reinterpret_cast
<
SetThreadDescription
>
(
:
:
GetProcAddress
(
:
:
GetModuleHandle
(
L
"
Kernel32
.
dll
"
)
"
SetThreadDescription
"
)
)
;
if
(
set_thread_description_func
)
{
set_thread_description_func
(
:
:
GetCurrentThread
(
)
base
:
:
UTF8ToWide
(
name
)
.
c_str
(
)
)
;
}
if
(
!
:
:
IsDebuggerPresent
(
)
&
&
!
base
:
:
debug
:
:
IsBinaryInstrumented
(
)
)
return
;
SetNameInternal
(
CurrentId
(
)
name
.
c_str
(
)
)
;
}
const
char
*
PlatformThread
:
:
GetName
(
)
{
return
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
GetName
(
CurrentId
(
)
)
;
}
bool
PlatformThread
:
:
CreateWithPriority
(
size_t
stack_size
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
ThreadPriority
priority
)
{
DCHECK
(
thread_handle
)
;
return
CreateThreadInternal
(
stack_size
delegate
thread_handle
priority
)
;
}
bool
PlatformThread
:
:
CreateNonJoinable
(
size_t
stack_size
Delegate
*
delegate
)
{
return
CreateNonJoinableWithPriority
(
stack_size
delegate
ThreadPriority
:
:
NORMAL
)
;
}
bool
PlatformThread
:
:
CreateNonJoinableWithPriority
(
size_t
stack_size
Delegate
*
delegate
ThreadPriority
priority
)
{
return
CreateThreadInternal
(
stack_size
delegate
nullptr
priority
)
;
}
void
PlatformThread
:
:
Join
(
PlatformThreadHandle
thread_handle
)
{
DCHECK
(
thread_handle
.
platform_handle
(
)
)
;
#
if
0
base
:
:
ThreadRestrictions
:
:
AssertIOAllowed
(
)
;
#
endif
DWORD
thread_id
=
0
;
thread_id
=
:
:
GetThreadId
(
thread_handle
.
platform_handle
(
)
)
;
DWORD
last_error
=
0
;
if
(
!
thread_id
)
last_error
=
:
:
GetLastError
(
)
;
base
:
:
debug
:
:
Alias
(
&
thread_id
)
;
base
:
:
debug
:
:
Alias
(
&
last_error
)
;
base
:
:
debug
:
:
ScopedThreadJoinActivity
thread_activity
(
&
thread_handle
)
;
CHECK_EQ
(
WAIT_OBJECT_0
WaitForSingleObject
(
thread_handle
.
platform_handle
(
)
INFINITE
)
)
;
CloseHandle
(
thread_handle
.
platform_handle
(
)
)
;
}
void
PlatformThread
:
:
Detach
(
PlatformThreadHandle
thread_handle
)
{
CloseHandle
(
thread_handle
.
platform_handle
(
)
)
;
}
bool
PlatformThread
:
:
CanIncreaseCurrentThreadPriority
(
)
{
return
true
;
}
void
PlatformThread
:
:
SetCurrentThreadPriority
(
ThreadPriority
priority
)
{
int
desired_priority
=
THREAD_PRIORITY_ERROR_RETURN
;
switch
(
priority
)
{
case
ThreadPriority
:
:
BACKGROUND
:
desired_priority
=
THREAD_PRIORITY_LOWEST
;
break
;
case
ThreadPriority
:
:
NORMAL
:
desired_priority
=
THREAD_PRIORITY_NORMAL
;
break
;
case
ThreadPriority
:
:
DISPLAY
:
desired_priority
=
THREAD_PRIORITY_ABOVE_NORMAL
;
break
;
case
ThreadPriority
:
:
REALTIME_AUDIO
:
desired_priority
=
THREAD_PRIORITY_TIME_CRITICAL
;
break
;
default
:
NOTREACHED
(
)
<
<
"
Unknown
priority
.
"
;
break
;
}
DCHECK_NE
(
desired_priority
THREAD_PRIORITY_ERROR_RETURN
)
;
#
if
DCHECK_IS_ON
(
)
const
BOOL
success
=
#
endif
:
:
SetThreadPriority
(
PlatformThread
:
:
CurrentHandle
(
)
.
platform_handle
(
)
desired_priority
)
;
DPLOG_IF
(
ERROR
!
success
)
<
<
"
Failed
to
set
thread
priority
to
"
<
<
desired_priority
;
}
ThreadPriority
PlatformThread
:
:
GetCurrentThreadPriority
(
)
{
int
priority
=
:
:
GetThreadPriority
(
PlatformThread
:
:
CurrentHandle
(
)
.
platform_handle
(
)
)
;
switch
(
priority
)
{
case
THREAD_PRIORITY_LOWEST
:
return
ThreadPriority
:
:
BACKGROUND
;
case
THREAD_PRIORITY_NORMAL
:
return
ThreadPriority
:
:
NORMAL
;
case
THREAD_PRIORITY_ABOVE_NORMAL
:
return
ThreadPriority
:
:
DISPLAY
;
case
THREAD_PRIORITY_TIME_CRITICAL
:
return
ThreadPriority
:
:
REALTIME_AUDIO
;
case
THREAD_PRIORITY_ERROR_RETURN
:
DPCHECK
(
false
)
<
<
"
GetThreadPriority
error
"
;
default
:
NOTREACHED
(
)
<
<
"
Unexpected
priority
:
"
<
<
priority
;
return
ThreadPriority
:
:
NORMAL
;
}
}
}
