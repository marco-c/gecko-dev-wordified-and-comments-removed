#
include
"
base
/
threading
/
thread_local_storage
.
h
"
#
include
<
windows
.
h
>
#
include
"
base
/
check
.
h
"
namespace
base
{
namespace
internal
{
bool
PlatformThreadLocalStorage
:
:
AllocTLS
(
TLSKey
*
key
)
{
TLSKey
value
=
TlsAlloc
(
)
;
if
(
value
!
=
TLS_OUT_OF_INDEXES
)
{
*
key
=
value
;
return
true
;
}
return
false
;
}
void
PlatformThreadLocalStorage
:
:
FreeTLS
(
TLSKey
key
)
{
BOOL
ret
=
TlsFree
(
key
)
;
DCHECK
(
ret
)
;
}
void
PlatformThreadLocalStorage
:
:
SetTLSValue
(
TLSKey
key
void
*
value
)
{
BOOL
ret
=
TlsSetValue
(
key
value
)
;
DCHECK
(
ret
)
;
}
}
}
#
ifdef
_WIN64
#
pragma
comment
(
linker
"
/
INCLUDE
:
_tls_used
"
)
#
pragma
comment
(
linker
"
/
INCLUDE
:
p_thread_callback_base
"
)
#
else
#
pragma
comment
(
linker
"
/
INCLUDE
:
__tls_used
"
)
#
pragma
comment
(
linker
"
/
INCLUDE
:
_p_thread_callback_base
"
)
#
endif
void
NTAPI
OnThreadExit
(
PVOID
module
DWORD
reason
PVOID
reserved
)
{
if
(
DLL_THREAD_DETACH
=
=
reason
|
|
DLL_PROCESS_DETACH
=
=
reason
)
base
:
:
internal
:
:
PlatformThreadLocalStorage
:
:
OnThreadExit
(
)
;
}
extern
"
C
"
{
#
ifdef
_WIN64
#
pragma
const_seg
(
"
.
CRT
XLB
"
)
extern
const
PIMAGE_TLS_CALLBACK
p_thread_callback_base
;
const
PIMAGE_TLS_CALLBACK
p_thread_callback_base
=
OnThreadExit
;
#
pragma
const_seg
(
)
#
else
#
pragma
data_seg
(
"
.
CRT
XLB
"
)
PIMAGE_TLS_CALLBACK
p_thread_callback_base
=
OnThreadExit
;
#
pragma
data_seg
(
)
#
endif
}
