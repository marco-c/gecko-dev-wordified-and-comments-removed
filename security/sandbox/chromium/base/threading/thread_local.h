#
ifndef
BASE_THREADING_THREAD_LOCAL_H_
#
define
BASE_THREADING_THREAD_LOCAL_H_
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
threading
/
thread_local_storage
.
h
"
namespace
base
{
template
<
typename
Type
>
class
ThreadLocalPointer
{
public
:
ThreadLocalPointer
(
)
=
default
;
~
ThreadLocalPointer
(
)
=
default
;
Type
*
Get
(
)
{
return
static_cast
<
Type
*
>
(
slot_
.
Get
(
)
)
;
}
void
Set
(
Type
*
ptr
)
{
slot_
.
Set
(
const_cast
<
void
*
>
(
static_cast
<
const
void
*
>
(
ptr
)
)
)
;
}
private
:
ThreadLocalStorage
:
:
Slot
slot_
;
DISALLOW_COPY_AND_ASSIGN
(
ThreadLocalPointer
<
Type
>
)
;
}
;
class
ThreadLocalBoolean
{
public
:
ThreadLocalBoolean
(
)
=
default
;
~
ThreadLocalBoolean
(
)
=
default
;
bool
Get
(
)
{
return
tlp_
.
Get
(
)
!
=
nullptr
;
}
void
Set
(
bool
val
)
{
tlp_
.
Set
(
val
?
this
:
nullptr
)
;
}
private
:
ThreadLocalPointer
<
void
>
tlp_
;
DISALLOW_COPY_AND_ASSIGN
(
ThreadLocalBoolean
)
;
}
;
}
#
endif
