#
ifndef
BASE_THREADING_THREAD_LOCAL_H_
#
define
BASE_THREADING_THREAD_LOCAL_H_
#
include
<
memory
>
#
include
"
base
/
dcheck_is_on
.
h
"
#
include
"
base
/
memory
/
ptr_util
.
h
"
#
include
"
base
/
threading
/
thread_local_internal
.
h
"
#
include
"
base
/
threading
/
thread_local_storage
.
h
"
namespace
base
{
#
if
DCHECK_IS_ON
(
)
template
<
typename
T
>
using
ThreadLocalOwnedPointer
=
internal
:
:
CheckedThreadLocalOwnedPointer
<
T
>
;
#
else
template
<
typename
T
>
class
ThreadLocalOwnedPointer
{
public
:
ThreadLocalOwnedPointer
(
)
=
default
;
ThreadLocalOwnedPointer
(
const
ThreadLocalOwnedPointer
&
)
=
delete
;
ThreadLocalOwnedPointer
&
operator
=
(
const
ThreadLocalOwnedPointer
&
)
=
delete
;
~
ThreadLocalOwnedPointer
(
)
{
Set
(
nullptr
)
;
}
T
*
Get
(
)
const
{
return
static_cast
<
T
*
>
(
slot_
.
Get
(
)
)
;
}
std
:
:
unique_ptr
<
T
>
Set
(
std
:
:
unique_ptr
<
T
>
ptr
)
{
auto
existing
=
WrapUnique
(
Get
(
)
)
;
slot_
.
Set
(
const_cast
<
void
*
>
(
static_cast
<
const
void
*
>
(
ptr
.
release
(
)
)
)
)
;
return
existing
;
}
T
&
operator
*
(
)
{
return
*
Get
(
)
;
}
private
:
static
void
DeleteTlsPtr
(
void
*
ptr
)
{
delete
static_cast
<
T
*
>
(
ptr
)
;
}
ThreadLocalStorage
:
:
Slot
slot_
{
&
DeleteTlsPtr
}
;
}
;
#
endif
}
#
endif
