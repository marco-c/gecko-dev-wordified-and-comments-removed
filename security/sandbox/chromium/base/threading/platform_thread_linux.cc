#
include
"
base
/
threading
/
platform_thread
.
h
"
#
include
<
errno
.
h
>
#
include
<
sched
.
h
>
#
include
<
stddef
.
h
>
#
include
"
base
/
lazy_instance
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
threading
/
platform_thread_internal_posix
.
h
"
#
include
"
base
/
threading
/
thread_id_name_manager
.
h
"
#
include
"
base
/
tracked_objects
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
!
defined
(
OS_NACL
)
#
include
<
pthread
.
h
>
#
include
<
sys
/
prctl
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
unistd
.
h
>
#
endif
namespace
base
{
namespace
internal
{
namespace
{
#
if
!
defined
(
OS_NACL
)
const
struct
sched_param
kRealTimePrio
=
{
8
}
;
const
struct
sched_param
kResetPrio
=
{
0
}
;
#
endif
}
const
ThreadPriorityToNiceValuePair
kThreadPriorityToNiceValueMap
[
4
]
=
{
{
ThreadPriority
:
:
BACKGROUND
10
}
{
ThreadPriority
:
:
NORMAL
0
}
{
ThreadPriority
:
:
DISPLAY
-
6
}
{
ThreadPriority
:
:
REALTIME_AUDIO
-
10
}
}
;
bool
SetCurrentThreadPriorityForPlatform
(
ThreadPriority
priority
)
{
#
if
!
defined
(
OS_NACL
)
ThreadPriority
current_priority
;
if
(
priority
!
=
ThreadPriority
:
:
REALTIME_AUDIO
&
&
GetCurrentThreadPriorityForPlatform
(
&
current_priority
)
&
&
current_priority
=
=
ThreadPriority
:
:
REALTIME_AUDIO
)
{
pthread_setschedparam
(
pthread_self
(
)
SCHED_OTHER
&
kResetPrio
)
;
return
false
;
}
return
priority
=
=
ThreadPriority
:
:
REALTIME_AUDIO
&
&
pthread_setschedparam
(
pthread_self
(
)
SCHED_RR
&
kRealTimePrio
)
=
=
0
;
#
else
return
false
;
#
endif
}
bool
GetCurrentThreadPriorityForPlatform
(
ThreadPriority
*
priority
)
{
#
if
!
defined
(
OS_NACL
)
int
maybe_sched_rr
=
0
;
struct
sched_param
maybe_realtime_prio
=
{
0
}
;
if
(
pthread_getschedparam
(
pthread_self
(
)
&
maybe_sched_rr
&
maybe_realtime_prio
)
=
=
0
&
&
maybe_sched_rr
=
=
SCHED_RR
&
&
maybe_realtime_prio
.
sched_priority
=
=
kRealTimePrio
.
sched_priority
)
{
*
priority
=
ThreadPriority
:
:
REALTIME_AUDIO
;
return
true
;
}
#
endif
return
false
;
}
}
void
PlatformThread
:
:
SetName
(
const
std
:
:
string
&
name
)
{
ThreadIdNameManager
:
:
GetInstance
(
)
-
>
SetName
(
CurrentId
(
)
name
)
;
tracked_objects
:
:
ThreadData
:
:
InitializeThreadContext
(
name
)
;
#
if
!
defined
(
OS_NACL
)
if
(
PlatformThread
:
:
CurrentId
(
)
=
=
getpid
(
)
)
return
;
int
err
=
prctl
(
PR_SET_NAME
name
.
c_str
(
)
)
;
if
(
err
<
0
&
&
errno
!
=
EPERM
)
DPLOG
(
ERROR
)
<
<
"
prctl
(
PR_SET_NAME
)
"
;
#
endif
}
void
InitThreading
(
)
{
}
void
InitOnThread
(
)
{
}
void
TerminateOnThread
(
)
{
}
size_t
GetDefaultThreadStackSize
(
const
pthread_attr_t
&
attributes
)
{
#
if
!
defined
(
THREAD_SANITIZER
)
return
0
;
#
else
return
2
*
(
1
<
<
23
)
;
#
endif
}
}
