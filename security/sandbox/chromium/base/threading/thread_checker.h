#
ifndef
BASE_THREADING_THREAD_CHECKER_H_
#
define
BASE_THREADING_THREAD_CHECKER_H_
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
dcheck_is_on
.
h
"
#
include
"
base
/
macros
/
uniquify
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
#
include
"
base
/
thread_annotations
.
h
"
#
include
"
base
/
threading
/
thread_checker_impl
.
h
"
#
if
DCHECK_IS_ON
(
)
#
define
THREAD_CHECKER
(
name
)
base
:
:
ThreadChecker
name
#
define
DCHECK_CALLED_ON_VALID_THREAD
(
name
.
.
.
)
\
base
:
:
ScopedValidateThreadChecker
BASE_UNIQUIFY
(
\
scoped_validate_thread_checker_
)
(
name
#
#
__VA_ARGS__
)
;
#
define
DETACH_FROM_THREAD
(
name
)
(
name
)
.
DetachFromThread
(
)
#
else
#
define
THREAD_CHECKER
(
name
)
static_assert
(
true
"
"
)
#
define
DCHECK_CALLED_ON_VALID_THREAD
(
name
.
.
.
)
EAT_CHECK_STREAM_PARAMS
(
)
#
define
DETACH_FROM_THREAD
(
name
)
#
endif
namespace
base
{
class
LOCKABLE
ThreadCheckerDoNothing
{
public
:
static
void
EnableStackLogging
(
)
{
}
ThreadCheckerDoNothing
(
)
=
default
;
ThreadCheckerDoNothing
(
const
ThreadCheckerDoNothing
&
)
=
delete
;
ThreadCheckerDoNothing
&
operator
=
(
const
ThreadCheckerDoNothing
&
)
=
delete
;
ThreadCheckerDoNothing
(
ThreadCheckerDoNothing
&
&
other
)
=
default
;
ThreadCheckerDoNothing
&
operator
=
(
ThreadCheckerDoNothing
&
&
other
)
=
default
;
[
[
nodiscard
]
]
bool
CalledOnValidThread
(
std
:
:
unique_ptr
<
void
*
>
=
nullptr
)
const
{
return
true
;
}
void
DetachFromThread
(
)
{
}
}
;
#
if
DCHECK_IS_ON
(
)
class
ThreadChecker
:
public
ThreadCheckerImpl
{
}
;
#
else
class
ThreadChecker
:
public
ThreadCheckerDoNothing
{
}
;
#
endif
#
if
DCHECK_IS_ON
(
)
class
BASE_EXPORT
SCOPED_LOCKABLE
ScopedValidateThreadChecker
{
public
:
explicit
ScopedValidateThreadChecker
(
const
ThreadChecker
&
checker
)
EXCLUSIVE_LOCK_FUNCTION
(
checker
)
;
ScopedValidateThreadChecker
(
const
ThreadChecker
&
checker
const
StringPiece
&
msg
)
EXCLUSIVE_LOCK_FUNCTION
(
checker
)
;
ScopedValidateThreadChecker
(
const
ScopedValidateThreadChecker
&
)
=
delete
;
ScopedValidateThreadChecker
&
operator
=
(
const
ScopedValidateThreadChecker
&
)
=
delete
;
~
ScopedValidateThreadChecker
(
)
UNLOCK_FUNCTION
(
)
;
}
;
#
endif
}
#
endif
