#
ifndef
BASE_THREADING_PLATFORM_THREAD_H_
#
define
BASE_THREADING_PLATFORM_THREAD_H_
#
include
<
stddef
.
h
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
time
/
time
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_WIN
)
#
include
<
windows
.
h
>
#
elif
defined
(
OS_MACOSX
)
#
include
<
mach
/
mach_types
.
h
>
#
elif
defined
(
OS_FUCHSIA
)
#
include
<
magenta
/
types
.
h
>
#
elif
defined
(
OS_POSIX
)
#
include
<
pthread
.
h
>
#
include
<
unistd
.
h
>
#
endif
namespace
base
{
#
if
defined
(
OS_WIN
)
typedef
DWORD
PlatformThreadId
;
#
elif
defined
(
OS_MACOSX
)
typedef
mach_port_t
PlatformThreadId
;
#
elif
defined
(
OS_FUCHSIA
)
typedef
mx_handle_t
PlatformThreadId
;
#
elif
defined
(
OS_POSIX
)
typedef
pid_t
PlatformThreadId
;
#
endif
class
PlatformThreadRef
{
public
:
#
if
defined
(
OS_WIN
)
typedef
DWORD
RefType
;
#
elif
defined
(
OS_POSIX
)
typedef
pthread_t
RefType
;
#
endif
PlatformThreadRef
(
)
:
id_
(
0
)
{
}
explicit
PlatformThreadRef
(
RefType
id
)
:
id_
(
id
)
{
}
bool
operator
=
=
(
PlatformThreadRef
other
)
const
{
return
id_
=
=
other
.
id_
;
}
bool
operator
!
=
(
PlatformThreadRef
other
)
const
{
return
id_
!
=
other
.
id_
;
}
bool
is_null
(
)
const
{
return
id_
=
=
0
;
}
private
:
RefType
id_
;
}
;
class
PlatformThreadHandle
{
public
:
#
if
defined
(
OS_WIN
)
typedef
void
*
Handle
;
#
elif
defined
(
OS_POSIX
)
typedef
pthread_t
Handle
;
#
endif
PlatformThreadHandle
(
)
:
handle_
(
0
)
{
}
explicit
PlatformThreadHandle
(
Handle
handle
)
:
handle_
(
handle
)
{
}
bool
is_equal
(
const
PlatformThreadHandle
&
other
)
const
{
return
handle_
=
=
other
.
handle_
;
}
bool
is_null
(
)
const
{
return
!
handle_
;
}
Handle
platform_handle
(
)
const
{
return
handle_
;
}
private
:
Handle
handle_
;
}
;
const
PlatformThreadId
kInvalidThreadId
(
0
)
;
enum
class
ThreadPriority
:
int
{
BACKGROUND
NORMAL
DISPLAY
REALTIME_AUDIO
}
;
class
BASE_EXPORT
PlatformThread
{
public
:
class
BASE_EXPORT
Delegate
{
public
:
virtual
void
ThreadMain
(
)
=
0
;
protected
:
virtual
~
Delegate
(
)
{
}
}
;
static
PlatformThreadId
CurrentId
(
)
;
static
PlatformThreadRef
CurrentRef
(
)
;
static
PlatformThreadHandle
CurrentHandle
(
)
;
static
void
YieldCurrentThread
(
)
;
static
void
Sleep
(
base
:
:
TimeDelta
duration
)
;
static
void
SetName
(
const
std
:
:
string
&
name
)
;
static
const
char
*
GetName
(
)
;
static
bool
Create
(
size_t
stack_size
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
)
{
return
CreateWithPriority
(
stack_size
delegate
thread_handle
ThreadPriority
:
:
NORMAL
)
;
}
static
bool
CreateWithPriority
(
size_t
stack_size
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
ThreadPriority
priority
)
;
static
bool
CreateNonJoinable
(
size_t
stack_size
Delegate
*
delegate
)
;
static
bool
CreateNonJoinableWithPriority
(
size_t
stack_size
Delegate
*
delegate
ThreadPriority
priority
)
;
static
void
Join
(
PlatformThreadHandle
thread_handle
)
;
static
void
Detach
(
PlatformThreadHandle
thread_handle
)
;
static
bool
CanIncreaseCurrentThreadPriority
(
)
;
static
void
SetCurrentThreadPriority
(
ThreadPriority
priority
)
;
static
ThreadPriority
GetCurrentThreadPriority
(
)
;
#
if
defined
(
OS_LINUX
)
static
void
SetThreadPriority
(
PlatformThreadId
thread_id
ThreadPriority
priority
)
;
#
endif
private
:
DISALLOW_IMPLICIT_CONSTRUCTORS
(
PlatformThread
)
;
}
;
}
#
endif
