#
ifndef
BASE_THREADING_PLATFORM_THREAD_H_
#
define
BASE_THREADING_PLATFORM_THREAD_H_
#
include
<
stddef
.
h
>
#
include
<
iosfwd
>
#
include
<
type_traits
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
message_loop
/
message_pump_type
.
h
"
#
include
"
base
/
process
/
process_handle
.
h
"
#
include
"
base
/
sequence_checker_impl
.
h
"
#
include
"
base
/
threading
/
platform_thread_ref
.
h
"
#
include
"
base
/
time
/
time
.
h
"
#
include
"
base
/
types
/
strong_alias
.
h
"
#
include
"
build
/
build_config
.
h
"
#
include
"
build
/
chromeos_buildflags
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
#
if
BUILDFLAG
(
IS_WIN
)
#
include
"
base
/
win
/
windows_types
.
h
"
#
elif
BUILDFLAG
(
IS_FUCHSIA
)
#
include
<
zircon
/
types
.
h
>
#
elif
BUILDFLAG
(
IS_APPLE
)
#
include
<
mach
/
mach_types
.
h
>
#
elif
BUILDFLAG
(
IS_POSIX
)
#
include
<
pthread
.
h
>
#
include
<
unistd
.
h
>
#
endif
namespace
base
{
#
if
BUILDFLAG
(
IS_WIN
)
typedef
DWORD
PlatformThreadId
;
#
elif
BUILDFLAG
(
IS_FUCHSIA
)
typedef
zx_handle_t
PlatformThreadId
;
#
elif
BUILDFLAG
(
IS_APPLE
)
typedef
mach_port_t
PlatformThreadId
;
#
elif
BUILDFLAG
(
IS_POSIX
)
typedef
pid_t
PlatformThreadId
;
#
endif
static_assert
(
std
:
:
is_integral_v
<
PlatformThreadId
>
"
Always
an
integer
value
.
"
)
;
class
PlatformThreadHandle
{
public
:
#
if
BUILDFLAG
(
IS_WIN
)
typedef
void
*
Handle
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
typedef
pthread_t
Handle
;
#
endif
constexpr
PlatformThreadHandle
(
)
:
handle_
(
0
)
{
}
explicit
constexpr
PlatformThreadHandle
(
Handle
handle
)
:
handle_
(
handle
)
{
}
bool
is_equal
(
const
PlatformThreadHandle
&
other
)
const
{
return
handle_
=
=
other
.
handle_
;
}
bool
is_null
(
)
const
{
return
!
handle_
;
}
Handle
platform_handle
(
)
const
{
return
handle_
;
}
private
:
Handle
handle_
;
}
;
const
PlatformThreadId
kInvalidThreadId
(
0
)
;
enum
class
ThreadType
:
int
{
kBackground
kUtility
kResourceEfficient
kDefault
kCompositing
kDisplayCritical
kRealtimeAudio
kMaxValue
=
kRealtimeAudio
}
;
enum
class
ThreadPriorityForTest
:
int
{
kBackground
kUtility
kResourceEfficient
kNormal
kCompositing
kDisplay
kRealtimeAudio
kMaxValue
=
kRealtimeAudio
}
;
class
BASE_EXPORT
PlatformThreadBase
{
public
:
class
BASE_EXPORT
Delegate
{
public
:
virtual
void
ThreadMain
(
)
=
0
;
#
if
BUILDFLAG
(
IS_APPLE
)
virtual
TimeDelta
GetRealtimePeriod
(
)
;
#
endif
protected
:
virtual
~
Delegate
(
)
=
default
;
}
;
PlatformThreadBase
(
)
=
delete
;
PlatformThreadBase
(
const
PlatformThreadBase
&
)
=
delete
;
PlatformThreadBase
&
operator
=
(
const
PlatformThreadBase
&
)
=
delete
;
static
PlatformThreadId
CurrentId
(
)
;
static
PlatformThreadRef
CurrentRef
(
)
;
static
PlatformThreadHandle
CurrentHandle
(
)
;
static
void
YieldCurrentThread
(
)
;
static
void
Sleep
(
base
:
:
TimeDelta
duration
)
;
static
void
SetName
(
const
std
:
:
string
&
name
)
;
static
const
char
*
GetName
(
)
;
#
if
!
defined
(
MOZ_SANDBOX
)
static
bool
Create
(
size_t
stack_size
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
)
{
return
CreateWithType
(
stack_size
delegate
thread_handle
ThreadType
:
:
kDefault
)
;
}
static
bool
CreateWithType
(
size_t
stack_size
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
ThreadType
thread_type
MessagePumpType
pump_type_hint
=
MessagePumpType
:
:
DEFAULT
)
;
static
bool
CreateNonJoinable
(
size_t
stack_size
Delegate
*
delegate
)
;
static
bool
CreateNonJoinableWithType
(
size_t
stack_size
Delegate
*
delegate
ThreadType
thread_type
MessagePumpType
pump_type_hint
=
MessagePumpType
:
:
DEFAULT
)
;
#
endif
static
void
Join
(
PlatformThreadHandle
thread_handle
)
;
static
void
Detach
(
PlatformThreadHandle
thread_handle
)
;
static
bool
CanChangeThreadType
(
ThreadType
from
ThreadType
to
)
;
static
void
SetCurrentThreadType
(
ThreadType
thread_type
)
;
static
ThreadType
GetCurrentThreadType
(
)
;
static
TimeDelta
GetRealtimePeriod
(
Delegate
*
delegate
)
;
static
absl
:
:
optional
<
TimeDelta
>
GetThreadLeewayOverride
(
)
;
static
size_t
GetDefaultThreadStackSize
(
)
;
static
ThreadPriorityForTest
GetCurrentThreadPriorityForTest
(
)
;
protected
:
static
void
SetNameCommon
(
const
std
:
:
string
&
name
)
;
}
;
#
if
BUILDFLAG
(
IS_APPLE
)
class
BASE_EXPORT
PlatformThreadApple
:
public
PlatformThreadBase
{
public
:
static
void
SetCurrentThreadRealtimePeriodValue
(
TimeDelta
realtime_period
)
;
static
void
InitFeaturesPostFieldTrial
(
)
;
}
;
#
endif
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
class
ThreadTypeDelegate
;
using
IsViaIPC
=
base
:
:
StrongAlias
<
class
IsViaIPCTag
bool
>
;
class
BASE_EXPORT
PlatformThreadLinux
:
public
PlatformThreadBase
{
public
:
static
constexpr
struct
sched_param
kRealTimeAudioPrio
=
{
8
}
;
static
constexpr
struct
sched_param
kRealTimeDisplayPrio
=
{
6
}
;
static
void
SetThreadTypeDelegate
(
ThreadTypeDelegate
*
delegate
)
;
static
void
SetThreadType
(
PlatformThreadId
process_id
PlatformThreadId
thread_id
ThreadType
thread_type
IsViaIPC
via_ipc
)
;
static
void
SetThreadCgroupsForThreadType
(
PlatformThreadId
thread_id
ThreadType
thread_type
)
;
static
bool
IsThreadBackgroundedForTest
(
PlatformThreadId
thread_id
)
;
}
;
#
endif
#
if
BUILDFLAG
(
IS_CHROMEOS
)
class
BASE_EXPORT
PlatformThreadChromeOS
:
public
PlatformThreadLinux
{
public
:
static
void
InitFeaturesPostFieldTrial
(
)
;
static
void
SetThreadType
(
PlatformThreadId
process_id
PlatformThreadId
thread_id
ThreadType
thread_type
IsViaIPC
via_ipc
)
;
static
bool
IsThreadsBgFeatureEnabled
(
)
;
static
bool
IsDisplayThreadsRtFeatureEnabled
(
)
;
static
void
SetThreadBackgrounded
(
ProcessId
process_id
PlatformThreadId
thread_id
bool
backgrounded
)
;
static
absl
:
:
optional
<
ThreadType
>
GetThreadTypeFromThreadId
(
ProcessId
process_id
PlatformThreadId
thread_id
)
;
static
SequenceCheckerImpl
&
GetCrossProcessThreadPrioritySequenceChecker
(
)
;
}
;
#
endif
#
if
BUILDFLAG
(
IS_APPLE
)
using
PlatformThread
=
PlatformThreadApple
;
#
elif
BUILDFLAG
(
IS_CHROMEOS
)
using
PlatformThread
=
PlatformThreadChromeOS
;
#
elif
BUILDFLAG
(
IS_LINUX
)
using
PlatformThread
=
PlatformThreadLinux
;
#
else
using
PlatformThread
=
PlatformThreadBase
;
#
endif
#
if
!
defined
(
MOZ_SANDBOX
)
namespace
internal
{
void
SetCurrentThreadType
(
ThreadType
thread_type
MessagePumpType
pump_type_hint
)
;
void
SetCurrentThreadTypeImpl
(
ThreadType
thread_type
MessagePumpType
pump_type_hint
)
;
}
#
endif
}
#
endif
