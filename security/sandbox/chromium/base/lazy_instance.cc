#
include
"
base
/
lazy_instance
.
h
"
#
include
"
base
/
at_exit
.
h
"
#
include
"
base
/
atomicops
.
h
"
#
include
"
base
/
threading
/
platform_thread
.
h
"
namespace
base
{
namespace
internal
{
bool
NeedsLazyInstance
(
subtle
:
:
AtomicWord
*
state
)
{
if
(
subtle
:
:
NoBarrier_CompareAndSwap
(
state
0
kLazyInstanceStateCreating
)
=
=
0
)
return
true
;
while
(
subtle
:
:
Acquire_Load
(
state
)
=
=
kLazyInstanceStateCreating
)
{
PlatformThread
:
:
YieldCurrentThread
(
)
;
}
return
false
;
}
void
CompleteLazyInstance
(
subtle
:
:
AtomicWord
*
state
subtle
:
:
AtomicWord
new_instance
void
(
*
destructor
)
(
void
*
)
void
*
destructor_arg
)
{
subtle
:
:
Release_Store
(
state
new_instance
)
;
if
(
destructor
)
AtExitManager
:
:
RegisterCallback
(
destructor
destructor_arg
)
;
}
}
}
