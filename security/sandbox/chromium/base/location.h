#
ifndef
BASE_LOCATION_H_
#
define
BASE_LOCATION_H_
#
include
<
stddef
.
h
>
#
include
<
cassert
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
debug
/
debugging_buildflags
.
h
"
#
include
"
base
/
hash
.
h
"
namespace
base
{
class
BASE_EXPORT
Location
{
public
:
Location
(
)
;
Location
(
const
Location
&
other
)
;
Location
(
const
char
*
file_name
const
void
*
program_counter
)
;
Location
(
const
char
*
function_name
const
char
*
file_name
int
line_number
const
void
*
program_counter
)
;
bool
operator
=
=
(
const
Location
&
other
)
const
{
return
program_counter_
=
=
other
.
program_counter_
;
}
bool
has_source_info
(
)
const
{
return
function_name_
&
&
file_name_
;
}
const
char
*
function_name
(
)
const
{
return
function_name_
;
}
const
char
*
file_name
(
)
const
{
return
file_name_
;
}
int
line_number
(
)
const
{
return
line_number_
;
}
const
void
*
program_counter
(
)
const
{
return
program_counter_
;
}
std
:
:
string
ToString
(
)
const
;
static
Location
CreateFromHere
(
const
char
*
file_name
)
;
static
Location
CreateFromHere
(
const
char
*
function_name
const
char
*
file_name
int
line_number
)
;
private
:
const
char
*
function_name_
=
nullptr
;
const
char
*
file_name_
=
nullptr
;
int
line_number_
=
-
1
;
const
void
*
program_counter_
=
nullptr
;
}
;
BASE_EXPORT
const
void
*
GetProgramCounter
(
)
;
#
if
BUILDFLAG
(
ENABLE_LOCATION_SOURCE
)
#
define
FROM_HERE
FROM_HERE_WITH_EXPLICIT_FUNCTION
(
__func__
)
#
define
FROM_HERE_WITH_EXPLICIT_FUNCTION
(
function_name
)
\
:
:
base
:
:
Location
:
:
CreateFromHere
(
function_name
__FILE__
__LINE__
)
#
else
#
define
FROM_HERE
:
:
base
:
:
Location
:
:
CreateFromHere
(
__FILE__
)
#
define
FROM_HERE_WITH_EXPLICIT_FUNCTION
(
function_name
)
\
:
:
base
:
:
Location
:
:
CreateFromHere
(
function_name
__FILE__
-
1
)
#
endif
}
namespace
std
{
template
<
>
struct
hash
<
:
:
base
:
:
Location
>
{
std
:
:
size_t
operator
(
)
(
const
:
:
base
:
:
Location
&
loc
)
const
{
const
void
*
program_counter
=
loc
.
program_counter
(
)
;
return
base
:
:
Hash
(
&
program_counter
sizeof
(
void
*
)
)
;
}
}
;
}
#
endif
