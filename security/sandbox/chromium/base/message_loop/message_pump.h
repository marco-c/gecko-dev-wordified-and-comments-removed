#
ifndef
BASE_MESSAGE_LOOP_MESSAGE_PUMP_H_
#
define
BASE_MESSAGE_LOOP_MESSAGE_PUMP_H_
#
include
<
memory
>
#
include
<
utility
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
check
.
h
"
#
include
"
base
/
check_op
.
h
"
#
include
"
base
/
memory
/
raw_ptr_exclusion
.
h
"
#
include
"
base
/
message_loop
/
message_pump_type
.
h
"
#
include
"
base
/
sequence_checker
.
h
"
#
include
"
base
/
time
/
time
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
class
TimeTicks
;
class
BASE_EXPORT
MessagePump
{
public
:
using
MessagePumpFactory
=
std
:
:
unique_ptr
<
MessagePump
>
(
)
;
static
void
OverrideMessagePumpForUIFactory
(
MessagePumpFactory
*
factory
)
;
static
bool
IsMessagePumpForUIFactoryOveridden
(
)
;
static
void
InitializeFeatures
(
)
;
static
std
:
:
unique_ptr
<
MessagePump
>
Create
(
MessagePumpType
type
)
;
class
BASE_EXPORT
Delegate
{
public
:
virtual
~
Delegate
(
)
=
default
;
struct
NextWorkInfo
{
TimeDelta
remaining_delay
(
)
const
{
DCHECK
(
!
delayed_run_time
.
is_null
(
)
&
&
!
delayed_run_time
.
is_max
(
)
)
;
DCHECK_GE
(
TimeTicks
:
:
Now
(
)
recent_now
)
;
return
delayed_run_time
-
recent_now
;
}
bool
is_immediate
(
)
const
{
return
delayed_run_time
.
is_null
(
)
;
}
TimeTicks
delayed_run_time
;
TimeDelta
leeway
;
TimeTicks
recent_now
;
bool
yield_to_native
=
false
;
}
;
virtual
NextWorkInfo
DoWork
(
)
=
0
;
virtual
bool
DoIdleWork
(
)
=
0
;
class
ScopedDoWorkItem
{
public
:
ScopedDoWorkItem
(
)
:
outer_
(
nullptr
)
work_item_depth_
(
0
)
{
}
~
ScopedDoWorkItem
(
)
{
if
(
outer_
)
{
outer_
-
>
OnEndWorkItem
(
work_item_depth_
)
;
}
}
ScopedDoWorkItem
(
ScopedDoWorkItem
&
&
rhs
)
:
outer_
(
std
:
:
exchange
(
rhs
.
outer_
nullptr
)
)
work_item_depth_
(
rhs
.
work_item_depth_
)
{
}
ScopedDoWorkItem
&
operator
=
(
ScopedDoWorkItem
&
&
rhs
)
{
CHECK_NE
(
IsNull
(
)
rhs
.
IsNull
(
)
)
;
if
(
outer_
)
{
outer_
-
>
OnEndWorkItem
(
work_item_depth_
)
;
}
work_item_depth_
=
rhs
.
work_item_depth_
;
outer_
=
std
:
:
exchange
(
rhs
.
outer_
nullptr
)
;
return
*
this
;
}
bool
IsNull
(
)
{
return
!
outer_
;
}
private
:
friend
Delegate
;
explicit
ScopedDoWorkItem
(
Delegate
*
outer
)
:
outer_
(
outer
)
{
outer_
-
>
OnBeginWorkItem
(
)
;
work_item_depth_
=
outer_
-
>
RunDepth
(
)
;
}
RAW_PTR_EXCLUSION
Delegate
*
outer_
;
int
work_item_depth_
;
}
;
[
[
nodiscard
]
]
ScopedDoWorkItem
BeginWorkItem
(
)
{
return
ScopedDoWorkItem
(
this
)
;
}
virtual
void
BeforeWait
(
)
=
0
;
virtual
int
RunDepth
(
)
=
0
;
private
:
virtual
void
OnBeginWorkItem
(
)
=
0
;
virtual
void
OnEndWorkItem
(
int
work_item_depth
)
=
0
;
}
;
MessagePump
(
)
;
virtual
~
MessagePump
(
)
;
virtual
void
Run
(
Delegate
*
delegate
)
=
0
;
virtual
void
Quit
(
)
=
0
;
virtual
void
ScheduleWork
(
)
=
0
;
virtual
void
ScheduleDelayedWork
(
const
Delegate
:
:
NextWorkInfo
&
next_work_info
)
=
0
;
virtual
TimeTicks
AdjustDelayedRunTime
(
TimeTicks
earliest_time
TimeTicks
run_time
TimeTicks
latest_time
)
;
}
;
}
#
endif
