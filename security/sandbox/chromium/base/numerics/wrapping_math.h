#
ifndef
BASE_NUMERICS_WRAPPING_MATH_H_
#
define
BASE_NUMERICS_WRAPPING_MATH_H_
#
include
<
type_traits
>
namespace
base
{
template
<
typename
T
>
inline
constexpr
T
WrappingAdd
(
T
a
T
b
)
{
static_assert
(
std
:
:
is_integral_v
<
T
>
)
;
using
Unsigned
=
std
:
:
make_unsigned_t
<
T
>
;
return
static_cast
<
T
>
(
static_cast
<
Unsigned
>
(
a
)
+
static_cast
<
Unsigned
>
(
b
)
)
;
}
template
<
typename
T
>
inline
constexpr
T
WrappingSub
(
T
a
T
b
)
{
static_assert
(
std
:
:
is_integral_v
<
T
>
)
;
using
Unsigned
=
std
:
:
make_unsigned_t
<
T
>
;
return
static_cast
<
T
>
(
static_cast
<
Unsigned
>
(
a
)
-
static_cast
<
Unsigned
>
(
b
)
)
;
}
}
#
endif
