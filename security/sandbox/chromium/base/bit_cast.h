#
ifndef
BASE_BIT_CAST_H_
#
define
BASE_BIT_CAST_H_
#
include
<
type_traits
>
#
include
"
base
/
compiler_specific
.
h
"
#
if
!
HAS_BUILTIN
(
__builtin_bit_cast
)
#
include
<
string
.
h
>
#
endif
namespace
base
{
template
<
class
Dest
class
Source
>
#
if
HAS_BUILTIN
(
__builtin_bit_cast
)
constexpr
#
else
inline
#
endif
Dest
bit_cast
(
const
Source
&
source
)
{
#
if
HAS_BUILTIN
(
__builtin_bit_cast
)
return
__builtin_bit_cast
(
Dest
source
)
;
#
else
static_assert
(
sizeof
(
Dest
)
=
=
sizeof
(
Source
)
"
bit_cast
requires
source
and
destination
to
be
the
same
size
"
)
;
static_assert
(
std
:
:
is_trivially_copyable_v
<
Dest
>
"
bit_cast
requires
the
destination
type
to
be
copyable
"
)
;
static_assert
(
std
:
:
is_trivially_copyable_v
<
Source
>
"
bit_cast
requires
the
source
type
to
be
copyable
"
)
;
Dest
dest
;
memcpy
(
&
dest
&
source
sizeof
(
dest
)
)
;
return
dest
;
#
endif
}
}
#
endif
