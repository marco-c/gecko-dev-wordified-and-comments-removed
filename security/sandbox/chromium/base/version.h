#
ifndef
BASE_VERSION_H_
#
define
BASE_VERSION_H_
#
include
<
stdint
.
h
>
#
include
<
iosfwd
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
base
/
base_export
.
h
"
namespace
base
{
class
BASE_EXPORT
Version
{
public
:
Version
(
)
;
Version
(
const
Version
&
other
)
;
explicit
Version
(
const
std
:
:
string
&
version_str
)
;
explicit
Version
(
std
:
:
vector
<
uint32_t
>
components
)
;
~
Version
(
)
;
bool
IsValid
(
)
const
;
static
bool
IsValidWildcardString
(
const
std
:
:
string
&
wildcard_string
)
;
int
CompareTo
(
const
Version
&
other
)
const
;
int
CompareToWildcardString
(
const
std
:
:
string
&
wildcard_string
)
const
;
const
std
:
:
string
GetString
(
)
const
;
const
std
:
:
vector
<
uint32_t
>
&
components
(
)
const
{
return
components_
;
}
private
:
std
:
:
vector
<
uint32_t
>
components_
;
}
;
BASE_EXPORT
bool
operator
=
=
(
const
Version
&
v1
const
Version
&
v2
)
;
BASE_EXPORT
bool
operator
!
=
(
const
Version
&
v1
const
Version
&
v2
)
;
BASE_EXPORT
bool
operator
<
(
const
Version
&
v1
const
Version
&
v2
)
;
BASE_EXPORT
bool
operator
<
=
(
const
Version
&
v1
const
Version
&
v2
)
;
BASE_EXPORT
bool
operator
>
(
const
Version
&
v1
const
Version
&
v2
)
;
BASE_EXPORT
bool
operator
>
=
(
const
Version
&
v1
const
Version
&
v2
)
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
stream
const
Version
&
v
)
;
}
#
endif
