#
ifndef
BASE_RAND_UTIL_H_
#
define
BASE_RAND_UTIL_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
algorithm
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
BASE_EXPORT
uint64_t
RandUint64
(
)
;
BASE_EXPORT
int
RandInt
(
int
min
int
max
)
;
BASE_EXPORT
uint64_t
RandGenerator
(
uint64_t
range
)
;
BASE_EXPORT
double
RandDouble
(
)
;
BASE_EXPORT
double
BitsToOpenEndedUnitInterval
(
uint64_t
bits
)
;
BASE_EXPORT
void
RandBytes
(
void
*
output
size_t
output_length
)
;
BASE_EXPORT
std
:
:
string
RandBytesAsString
(
size_t
length
)
;
class
RandomBitGenerator
{
public
:
using
result_type
=
uint64_t
;
static
constexpr
result_type
min
(
)
{
return
0
;
}
static
constexpr
result_type
max
(
)
{
return
UINT64_MAX
;
}
result_type
operator
(
)
(
)
const
{
return
RandUint64
(
)
;
}
RandomBitGenerator
(
)
=
default
;
~
RandomBitGenerator
(
)
=
default
;
}
;
template
<
typename
Itr
>
void
RandomShuffle
(
Itr
first
Itr
last
)
{
std
:
:
shuffle
(
first
last
RandomBitGenerator
(
)
)
;
}
#
if
defined
(
OS_POSIX
)
BASE_EXPORT
int
GetUrandomFD
(
)
;
#
endif
}
#
endif
