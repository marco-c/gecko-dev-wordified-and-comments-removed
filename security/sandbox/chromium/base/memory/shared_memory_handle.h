#
ifndef
BASE_MEMORY_SHARED_MEMORY_HANDLE_H_
#
define
BASE_MEMORY_SHARED_MEMORY_HANDLE_H_
#
include
<
stddef
.
h
>
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_WIN
)
#
include
<
windows
.
h
>
#
include
"
base
/
process
/
process_handle
.
h
"
#
elif
defined
(
OS_MACOSX
)
&
&
!
defined
(
OS_IOS
)
#
include
<
mach
/
mach
.
h
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
process
/
process_handle
.
h
"
#
elif
defined
(
OS_POSIX
)
#
include
<
sys
/
types
.
h
>
#
include
"
base
/
file_descriptor_posix
.
h
"
#
endif
namespace
base
{
#
if
defined
(
OS_POSIX
)
&
&
!
(
defined
(
OS_MACOSX
)
&
&
!
defined
(
OS_IOS
)
)
typedef
FileDescriptor
SharedMemoryHandle
;
#
elif
defined
(
OS_WIN
)
class
BASE_EXPORT
SharedMemoryHandle
{
public
:
SharedMemoryHandle
(
)
;
SharedMemoryHandle
(
HANDLE
h
base
:
:
ProcessId
pid
)
;
SharedMemoryHandle
(
const
SharedMemoryHandle
&
handle
)
;
SharedMemoryHandle
&
operator
=
(
const
SharedMemoryHandle
&
handle
)
;
bool
operator
=
=
(
const
SharedMemoryHandle
&
handle
)
const
;
bool
operator
!
=
(
const
SharedMemoryHandle
&
handle
)
const
;
void
Close
(
)
const
;
bool
IsValid
(
)
const
;
bool
BelongsToCurrentProcess
(
)
const
;
bool
NeedsBrokering
(
)
const
;
void
SetOwnershipPassesToIPC
(
bool
ownership_passes
)
;
bool
OwnershipPassesToIPC
(
)
const
;
HANDLE
GetHandle
(
)
const
;
base
:
:
ProcessId
GetPID
(
)
const
;
private
:
HANDLE
handle_
;
base
:
:
ProcessId
pid_
;
bool
ownership_passes_to_ipc_
;
}
;
#
else
class
BASE_EXPORT
SharedMemoryHandle
{
public
:
SharedMemoryHandle
(
)
;
explicit
SharedMemoryHandle
(
mach_vm_size_t
size
)
;
SharedMemoryHandle
(
mach_port_t
memory_object
mach_vm_size_t
size
base
:
:
ProcessId
pid
)
;
SharedMemoryHandle
(
const
SharedMemoryHandle
&
handle
)
;
SharedMemoryHandle
&
operator
=
(
const
SharedMemoryHandle
&
handle
)
;
SharedMemoryHandle
Duplicate
(
)
const
;
bool
operator
=
=
(
const
SharedMemoryHandle
&
handle
)
const
;
bool
operator
!
=
(
const
SharedMemoryHandle
&
handle
)
const
;
bool
IsValid
(
)
const
;
mach_port_t
GetMemoryObject
(
)
const
;
bool
GetSize
(
size_t
*
size
)
const
;
bool
MapAt
(
off_t
offset
size_t
bytes
void
*
*
memory
bool
read_only
)
;
void
Close
(
)
const
;
void
SetOwnershipPassesToIPC
(
bool
ownership_passes
)
;
bool
OwnershipPassesToIPC
(
)
const
;
private
:
void
CopyRelevantData
(
const
SharedMemoryHandle
&
handle
)
;
mach_port_t
memory_object_
=
MACH_PORT_NULL
;
mach_vm_size_t
size_
=
0
;
base
:
:
ProcessId
pid_
=
0
;
bool
ownership_passes_to_ipc_
=
false
;
}
;
#
endif
}
#
endif
