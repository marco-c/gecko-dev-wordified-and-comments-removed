#
ifndef
BASE_MEMORY_MEMORY_PRESSURE_LISTENER_H_
#
define
BASE_MEMORY_MEMORY_PRESSURE_LISTENER_H_
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
functional
/
callback
.
h
"
#
include
"
base
/
location
.
h
"
#
include
"
base
/
tracing_buildflags
.
h
"
namespace
base
{
class
BASE_EXPORT
MemoryPressureListener
{
public
:
enum
MemoryPressureLevel
{
MEMORY_PRESSURE_LEVEL_NONE
=
0
MEMORY_PRESSURE_LEVEL_MODERATE
=
1
MEMORY_PRESSURE_LEVEL_CRITICAL
=
2
kMaxValue
=
MEMORY_PRESSURE_LEVEL_CRITICAL
}
;
using
MemoryPressureCallback
=
RepeatingCallback
<
void
(
MemoryPressureLevel
)
>
;
using
SyncMemoryPressureCallback
=
RepeatingCallback
<
void
(
MemoryPressureLevel
)
>
;
MemoryPressureListener
(
const
base
:
:
Location
&
creation_location
const
MemoryPressureCallback
&
memory_pressure_callback
)
;
MemoryPressureListener
(
const
base
:
:
Location
&
creation_location
const
MemoryPressureCallback
&
memory_pressure_callback
const
SyncMemoryPressureCallback
&
sync_memory_pressure_callback
)
;
MemoryPressureListener
(
const
MemoryPressureListener
&
)
=
delete
;
MemoryPressureListener
&
operator
=
(
const
MemoryPressureListener
&
)
=
delete
;
~
MemoryPressureListener
(
)
;
static
void
NotifyMemoryPressure
(
MemoryPressureLevel
memory_pressure_level
)
;
static
bool
AreNotificationsSuppressed
(
)
;
static
void
SetNotificationsSuppressed
(
bool
suppressed
)
;
static
void
SimulatePressureNotification
(
MemoryPressureLevel
memory_pressure_level
)
;
void
Notify
(
MemoryPressureLevel
memory_pressure_level
)
;
void
SyncNotify
(
MemoryPressureLevel
memory_pressure_level
)
;
private
:
static
void
DoNotifyMemoryPressure
(
MemoryPressureLevel
memory_pressure_level
)
;
MemoryPressureCallback
callback_
;
SyncMemoryPressureCallback
sync_memory_pressure_callback_
;
const
base
:
:
Location
creation_location_
;
}
;
}
#
endif
