#
ifndef
BASE_MEMORY_PTR_UTIL_H_
#
define
BASE_MEMORY_PTR_UTIL_H_
#
include
<
memory
>
#
include
<
utility
>
namespace
base
{
template
<
typename
T
>
std
:
:
unique_ptr
<
T
>
WrapUnique
(
T
*
ptr
)
{
return
std
:
:
unique_ptr
<
T
>
(
ptr
)
;
}
template
<
typename
T
typename
.
.
.
Args
>
auto
MakeUnique
(
Args
&
&
.
.
.
args
)
-
>
decltype
(
std
:
:
make_unique
<
T
>
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
)
{
return
std
:
:
make_unique
<
T
>
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
}
#
endif
