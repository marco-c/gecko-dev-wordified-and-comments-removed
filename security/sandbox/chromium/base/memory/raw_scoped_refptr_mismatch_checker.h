#
ifndef
BASE_MEMORY_RAW_SCOPED_REFPTR_MISMATCH_CHECKER_H_
#
define
BASE_MEMORY_RAW_SCOPED_REFPTR_MISMATCH_CHECKER_H_
#
include
<
type_traits
>
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
base
/
memory
/
raw_ref
.
h
"
#
include
"
base
/
template_util
.
h
"
namespace
base
{
namespace
internal
{
template
<
typename
T
typename
=
void
>
struct
IsRefCountedType
:
std
:
:
false_type
{
}
;
template
<
typename
T
>
struct
IsRefCountedType
<
T
std
:
:
void_t
<
decltype
(
std
:
:
declval
<
T
*
>
(
)
-
>
AddRef
(
)
)
decltype
(
std
:
:
declval
<
T
*
>
(
)
-
>
Release
(
)
)
>
>
:
std
:
:
true_type
{
}
;
template
<
typename
T
>
struct
NeedsScopedRefptrButGetsRawPtr
:
std
:
:
disjunction
<
std
:
:
conjunction
<
base
:
:
IsRawRef
<
T
>
IsRefCountedType
<
base
:
:
RemoveRawRefT
<
T
>
>
>
std
:
:
conjunction
<
base
:
:
IsPointer
<
T
>
IsRefCountedType
<
base
:
:
RemovePointerT
<
T
>
>
>
>
{
static_assert
(
!
std
:
:
is_reference_v
<
T
>
"
NeedsScopedRefptrButGetsRawPtr
requires
non
-
reference
type
.
"
)
;
}
;
}
}
#
endif
