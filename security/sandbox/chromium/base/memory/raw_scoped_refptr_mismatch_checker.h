#
ifndef
BASE_MEMORY_RAW_SCOPED_REFPTR_MISMATCH_CHECKER_H_
#
define
BASE_MEMORY_RAW_SCOPED_REFPTR_MISMATCH_CHECKER_H_
#
include
"
base
/
memory
/
ref_counted
.
h
"
#
include
"
base
/
template_util
.
h
"
#
include
"
base
/
tuple
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
namespace
internal
{
template
<
typename
T
>
struct
NeedsScopedRefptrButGetsRawPtr
{
#
if
defined
(
OS_WIN
)
enum
{
value
=
base
:
:
false_type
:
:
value
}
;
#
else
enum
{
value
=
(
is_pointer
<
T
>
:
:
value
&
&
(
is_convertible
<
T
subtle
:
:
RefCountedBase
*
>
:
:
value
|
|
is_convertible
<
T
subtle
:
:
RefCountedThreadSafeBase
*
>
:
:
value
)
)
}
;
#
endif
}
;
template
<
typename
Params
>
struct
ParamsUseScopedRefptrCorrectly
{
enum
{
value
=
0
}
;
}
;
template
<
>
struct
ParamsUseScopedRefptrCorrectly
<
Tuple
<
>
>
{
enum
{
value
=
1
}
;
}
;
template
<
typename
Head
typename
.
.
.
Tail
>
struct
ParamsUseScopedRefptrCorrectly
<
Tuple
<
Head
Tail
.
.
.
>
>
{
enum
{
value
=
!
NeedsScopedRefptrButGetsRawPtr
<
Head
>
:
:
value
&
&
ParamsUseScopedRefptrCorrectly
<
Tuple
<
Tail
.
.
.
>
>
:
:
value
}
;
}
;
}
}
#
endif
