#
ifndef
BASE_MEMORY_PLATFORM_SHARED_MEMORY_REGION_H_
#
define
BASE_MEMORY_PLATFORM_SHARED_MEMORY_REGION_H_
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
containers
/
span
.
h
"
#
include
"
base
/
gtest_prod_util
.
h
"
#
include
"
base
/
memory
/
platform_shared_memory_handle
.
h
"
#
include
"
base
/
memory
/
shared_memory_mapper
.
h
"
#
include
"
base
/
unguessable_token
.
h
"
#
include
"
build
/
build_config
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
#
include
<
stdint
.
h
>
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
namespace
content
{
class
SandboxIPCHandler
;
}
#
endif
namespace
base
{
namespace
subtle
{
class
BASE_EXPORT
PlatformSharedMemoryRegion
{
public
:
enum
class
Mode
{
kReadOnly
kWritable
kUnsafe
kMaxValue
=
kUnsafe
}
;
enum
class
CreateError
{
SUCCESS
=
0
SIZE_ZERO
=
1
SIZE_TOO_LARGE
=
2
INITIALIZE_ACL_FAILURE
=
3
INITIALIZE_SECURITY_DESC_FAILURE
=
4
SET_SECURITY_DESC_FAILURE
=
5
CREATE_FILE_MAPPING_FAILURE
=
6
REDUCE_PERMISSIONS_FAILURE
=
7
ALREADY_EXISTS
=
8
ALLOCATE_FILE_REGION_FAILURE
=
9
FSTAT_FAILURE
=
10
INODES_MISMATCH
=
11
GET_SHMEM_TEMP_DIR_FAILURE
=
12
kMaxValue
=
GET_SHMEM_TEMP_DIR_FAILURE
}
;
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
struct
ExecutableRegion
{
private
:
static
ScopedFD
CreateFD
(
size_t
size
)
;
friend
class
content
:
:
SandboxIPCHandler
;
}
;
#
endif
enum
{
kMapMinimumAlignment
=
32
}
;
static
PlatformSharedMemoryRegion
CreateWritable
(
size_t
size
)
;
static
PlatformSharedMemoryRegion
CreateUnsafe
(
size_t
size
)
;
static
PlatformSharedMemoryRegion
Take
(
ScopedPlatformSharedMemoryHandle
handle
Mode
mode
size_t
size
const
UnguessableToken
&
guid
)
;
#
if
BUILDFLAG
(
IS_POSIX
)
&
&
!
BUILDFLAG
(
IS_ANDROID
)
&
&
!
BUILDFLAG
(
IS_APPLE
)
static
PlatformSharedMemoryRegion
Take
(
ScopedFD
handle
Mode
mode
size_t
size
const
UnguessableToken
&
guid
)
;
#
endif
PlatformSharedMemoryRegion
(
)
;
PlatformSharedMemoryRegion
(
PlatformSharedMemoryRegion
&
&
)
;
PlatformSharedMemoryRegion
&
operator
=
(
PlatformSharedMemoryRegion
&
&
)
;
PlatformSharedMemoryRegion
(
const
PlatformSharedMemoryRegion
&
)
=
delete
;
PlatformSharedMemoryRegion
&
operator
=
(
const
PlatformSharedMemoryRegion
&
)
=
delete
;
~
PlatformSharedMemoryRegion
(
)
;
[
[
nodiscard
]
]
ScopedPlatformSharedMemoryHandle
PassPlatformHandle
(
)
;
PlatformSharedMemoryHandle
GetPlatformHandle
(
)
const
;
bool
IsValid
(
)
const
;
PlatformSharedMemoryRegion
Duplicate
(
)
const
;
bool
ConvertToReadOnly
(
)
;
#
if
BUILDFLAG
(
IS_APPLE
)
bool
ConvertToReadOnly
(
void
*
mapped_addr
)
;
#
endif
bool
ConvertToUnsafe
(
)
;
absl
:
:
optional
<
span
<
uint8_t
>
>
MapAt
(
uint64_t
offset
size_t
size
SharedMemoryMapper
*
mapper
)
const
;
static
void
Unmap
(
span
<
uint8_t
>
mapping
SharedMemoryMapper
*
mapper
)
;
const
UnguessableToken
&
GetGUID
(
)
const
{
return
guid_
;
}
size_t
GetSize
(
)
const
{
return
size_
;
}
Mode
GetMode
(
)
const
{
return
mode_
;
}
private
:
FRIEND_TEST_ALL_PREFIXES
(
PlatformSharedMemoryRegionTest
CreateReadOnlyRegionDeathTest
)
;
FRIEND_TEST_ALL_PREFIXES
(
PlatformSharedMemoryRegionTest
CheckPlatformHandlePermissionsCorrespondToMode
)
;
static
PlatformSharedMemoryRegion
Create
(
Mode
mode
size_t
size
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
bool
executable
=
false
#
endif
)
;
static
bool
CheckPlatformHandlePermissionsCorrespondToMode
(
PlatformSharedMemoryHandle
handle
Mode
mode
size_t
size
)
;
PlatformSharedMemoryRegion
(
ScopedPlatformSharedMemoryHandle
handle
Mode
mode
size_t
size
const
UnguessableToken
&
guid
)
;
ScopedPlatformSharedMemoryHandle
handle_
;
Mode
mode_
=
Mode
:
:
kReadOnly
;
size_t
size_
=
0
;
UnguessableToken
guid_
;
}
;
}
}
#
endif
