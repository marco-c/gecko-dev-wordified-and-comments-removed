#
ifndef
BASE_MEMORY_ALIGNED_MEMORY_H_
#
define
BASE_MEMORY_ALIGNED_MEMORY_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
compiler_specific
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
COMPILER_MSVC
)
#
include
<
malloc
.
h
>
#
else
#
include
<
stdlib
.
h
>
#
endif
namespace
base
{
BASE_EXPORT
void
*
AlignedAlloc
(
size_t
size
size_t
alignment
)
;
inline
void
AlignedFree
(
void
*
ptr
)
{
#
if
defined
(
COMPILER_MSVC
)
_aligned_free
(
ptr
)
;
#
else
free
(
ptr
)
;
#
endif
}
struct
AlignedFreeDeleter
{
inline
void
operator
(
)
(
void
*
ptr
)
const
{
AlignedFree
(
ptr
)
;
}
}
;
}
#
endif
