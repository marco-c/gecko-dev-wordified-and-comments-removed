#
ifndef
BASE_MEMORY_SHARED_MEMORY_H_
#
define
BASE_MEMORY_SHARED_MEMORY_H_
#
include
<
stddef
.
h
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
memory
/
shared_memory_handle
.
h
"
#
include
"
base
/
process
/
process_handle
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
OS_POSIX
)
#
include
<
stdio
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
semaphore
.
h
>
#
include
"
base
/
file_descriptor_posix
.
h
"
#
include
"
base
/
files
/
file_util
.
h
"
#
include
"
base
/
files
/
scoped_file
.
h
"
#
endif
#
if
defined
(
OS_WIN
)
#
include
"
base
/
win
/
scoped_handle
.
h
"
#
endif
namespace
base
{
class
FilePath
;
struct
BASE_EXPORT
SharedMemoryCreateOptions
{
#
if
!
(
defined
(
OS_MACOSX
)
&
&
!
defined
(
OS_IOS
)
)
const
std
:
:
string
*
name_deprecated
=
nullptr
;
bool
open_existing_deprecated
=
false
;
#
endif
size_t
size
=
0
;
bool
executable
=
false
;
bool
share_read_only
=
false
;
}
;
class
BASE_EXPORT
SharedMemory
{
public
:
SharedMemory
(
)
;
#
if
defined
(
OS_WIN
)
explicit
SharedMemory
(
const
std
:
:
wstring
&
name
)
;
#
endif
SharedMemory
(
const
SharedMemoryHandle
&
handle
bool
read_only
)
;
~
SharedMemory
(
)
;
static
bool
IsHandleValid
(
const
SharedMemoryHandle
&
handle
)
;
static
SharedMemoryHandle
NULLHandle
(
)
;
static
void
CloseHandle
(
const
SharedMemoryHandle
&
handle
)
;
static
size_t
GetHandleLimit
(
)
;
static
SharedMemoryHandle
DuplicateHandle
(
const
SharedMemoryHandle
&
handle
)
;
#
if
defined
(
OS_POSIX
)
&
&
!
(
defined
(
OS_MACOSX
)
&
&
!
defined
(
OS_IOS
)
)
static
int
GetFdFromSharedMemoryHandle
(
const
SharedMemoryHandle
&
handle
)
;
#
endif
#
if
defined
(
OS_POSIX
)
&
&
!
defined
(
OS_ANDROID
)
static
bool
GetSizeFromSharedMemoryHandle
(
const
SharedMemoryHandle
&
handle
size_t
*
size
)
;
#
endif
bool
Create
(
const
SharedMemoryCreateOptions
&
options
)
;
bool
CreateAndMapAnonymous
(
size_t
size
)
;
bool
CreateAnonymous
(
size_t
size
)
{
SharedMemoryCreateOptions
options
;
options
.
size
=
size
;
return
Create
(
options
)
;
}
#
if
!
defined
(
OS_MACOSX
)
|
|
defined
(
OS_IOS
)
bool
CreateNamedDeprecated
(
const
std
:
:
string
&
name
bool
open_existing
size_t
size
)
{
SharedMemoryCreateOptions
options
;
options
.
name_deprecated
=
&
name
;
options
.
open_existing_deprecated
=
open_existing
;
options
.
size
=
size
;
return
Create
(
options
)
;
}
bool
Delete
(
const
std
:
:
string
&
name
)
;
bool
Open
(
const
std
:
:
string
&
name
bool
read_only
)
;
#
endif
bool
Map
(
size_t
bytes
)
{
return
MapAt
(
0
bytes
)
;
}
bool
MapAt
(
off_t
offset
size_t
bytes
)
;
enum
{
MAP_MINIMUM_ALIGNMENT
=
32
}
;
bool
Unmap
(
)
;
size_t
requested_size
(
)
const
{
return
requested_size_
;
}
size_t
mapped_size
(
)
const
{
return
mapped_size_
;
}
void
*
memory
(
)
const
{
return
memory_
;
}
SharedMemoryHandle
handle
(
)
const
;
SharedMemoryHandle
TakeHandle
(
)
;
void
Close
(
)
;
bool
ShareReadOnlyToProcess
(
ProcessHandle
process
SharedMemoryHandle
*
new_handle
)
{
return
ShareToProcessCommon
(
process
new_handle
false
SHARE_READONLY
)
;
}
bool
GiveReadOnlyToProcess
(
ProcessHandle
process
SharedMemoryHandle
*
new_handle
)
{
return
ShareToProcessCommon
(
process
new_handle
true
SHARE_READONLY
)
;
}
bool
ShareToProcess
(
ProcessHandle
process
SharedMemoryHandle
*
new_handle
)
{
return
ShareToProcessCommon
(
process
new_handle
false
SHARE_CURRENT_MODE
)
;
}
bool
GiveToProcess
(
ProcessHandle
process
SharedMemoryHandle
*
new_handle
)
{
return
ShareToProcessCommon
(
process
new_handle
true
SHARE_CURRENT_MODE
)
;
}
private
:
#
if
defined
(
OS_POSIX
)
&
&
!
defined
(
OS_NACL
)
&
&
!
defined
(
OS_ANDROID
)
&
&
\
!
(
defined
(
OS_MACOSX
)
&
&
!
defined
(
OS_IOS
)
)
bool
PrepareMapFile
(
ScopedFILE
fp
ScopedFD
readonly
)
;
bool
FilePathForMemoryName
(
const
std
:
:
string
&
mem_name
FilePath
*
path
)
;
#
endif
enum
ShareMode
{
SHARE_READONLY
SHARE_CURRENT_MODE
}
;
bool
ShareToProcessCommon
(
ProcessHandle
process
SharedMemoryHandle
*
new_handle
bool
close_self
ShareMode
)
;
#
if
defined
(
OS_WIN
)
bool
external_section_
;
std
:
:
wstring
name_
;
win
:
:
ScopedHandle
mapped_file_
;
#
elif
defined
(
OS_MACOSX
)
&
&
!
defined
(
OS_IOS
)
SharedMemoryHandle
shm_
;
#
elif
defined
(
OS_POSIX
)
int
mapped_file_
;
int
readonly_mapped_file_
;
#
endif
size_t
mapped_size_
;
void
*
memory_
;
bool
read_only_
;
size_t
requested_size_
;
DISALLOW_COPY_AND_ASSIGN
(
SharedMemory
)
;
}
;
}
#
endif
