#
ifndef
BASE_DEBUG_CRASH_LOGGING_H_
#
define
BASE_DEBUG_CRASH_LOGGING_H_
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
namespace
base
{
namespace
debug
{
enum
class
CrashKeySize
{
Size32
=
32
Size64
=
64
Size256
=
256
}
;
struct
CrashKeyString
;
BASE_EXPORT
CrashKeyString
*
AllocateCrashKeyString
(
const
char
name
[
]
CrashKeySize
size
)
;
BASE_EXPORT
void
SetCrashKeyString
(
CrashKeyString
*
crash_key
base
:
:
StringPiece
value
)
;
BASE_EXPORT
void
ClearCrashKeyString
(
CrashKeyString
*
crash_key
)
;
class
BASE_EXPORT
ScopedCrashKeyString
{
public
:
ScopedCrashKeyString
(
CrashKeyString
*
crash_key
base
:
:
StringPiece
value
)
;
~
ScopedCrashKeyString
(
)
;
private
:
CrashKeyString
*
const
crash_key_
;
DISALLOW_COPY_AND_ASSIGN
(
ScopedCrashKeyString
)
;
}
;
class
CrashKeyImplementation
{
public
:
virtual
~
CrashKeyImplementation
(
)
=
default
;
virtual
CrashKeyString
*
Allocate
(
const
char
name
[
]
CrashKeySize
size
)
=
0
;
virtual
void
Set
(
CrashKeyString
*
crash_key
base
:
:
StringPiece
value
)
=
0
;
virtual
void
Clear
(
CrashKeyString
*
crash_key
)
=
0
;
}
;
BASE_EXPORT
void
SetCrashKeyImplementation
(
std
:
:
unique_ptr
<
CrashKeyImplementation
>
impl
)
;
struct
CrashKeyString
{
constexpr
CrashKeyString
(
const
char
name
[
]
CrashKeySize
size
)
:
name
(
name
)
size
(
size
)
{
}
const
char
*
const
name
;
const
CrashKeySize
size
;
}
;
}
}
#
endif
