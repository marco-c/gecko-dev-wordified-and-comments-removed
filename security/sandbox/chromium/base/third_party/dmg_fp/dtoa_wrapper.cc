#
include
"
base
/
lazy_instance
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
synchronization
/
lock
.
h
"
static
base
:
:
LazyInstance
<
base
:
:
Lock
>
:
:
Leaky
dtoa_lock_0
=
LAZY_INSTANCE_INITIALIZER
;
static
base
:
:
LazyInstance
<
base
:
:
Lock
>
:
:
Leaky
dtoa_lock_1
=
LAZY_INSTANCE_INITIALIZER
;
#
define
MULTIPLE_THREADS
inline
static
void
ACQUIRE_DTOA_LOCK
(
size_t
n
)
{
DCHECK
(
n
<
2
)
;
base
:
:
Lock
*
lock
=
n
=
=
0
?
dtoa_lock_0
.
Pointer
(
)
:
dtoa_lock_1
.
Pointer
(
)
;
lock
-
>
Acquire
(
)
;
}
inline
static
void
FREE_DTOA_LOCK
(
size_t
n
)
{
DCHECK
(
n
<
2
)
;
base
:
:
Lock
*
lock
=
n
=
=
0
?
dtoa_lock_0
.
Pointer
(
)
:
dtoa_lock_1
.
Pointer
(
)
;
lock
-
>
Release
(
)
;
}
#
include
"
base
/
third_party
/
dmg_fp
/
dtoa
.
cc
"
#
undef
Bias
/
/
Avoid
windows
jumbo
build
breakage
.
#
undef
Long
/
/
To
avoid
breaking
jni
code
in
jumbo
builds
