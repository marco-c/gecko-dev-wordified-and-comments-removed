#
ifndef
SANDBOX_LINUX_SECCOMP_BPF_TRAP_H__
#
define
SANDBOX_LINUX_SECCOMP_BPF_TRAP_H__
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
base
/
memory
/
raw_ptr_exclusion
.
h
"
#
include
"
sandbox
/
linux
/
bpf_dsl
/
trap_registry
.
h
"
#
include
"
sandbox
/
linux
/
system_headers
/
linux_signal
.
h
"
#
include
"
sandbox
/
sandbox_export
.
h
"
namespace
sandbox
{
class
SANDBOX_EXPORT
Trap
:
public
bpf_dsl
:
:
TrapRegistry
{
public
:
Trap
(
const
Trap
&
)
=
delete
;
Trap
&
operator
=
(
const
Trap
&
)
=
delete
;
uint16_t
Add
(
const
Handler
&
handler
)
override
;
bool
EnableUnsafeTraps
(
)
override
;
static
bpf_dsl
:
:
TrapRegistry
*
Registry
(
)
;
static
bool
SandboxDebuggingAllowedByUser
(
)
;
private
:
using
HandlerToIdMap
=
std
:
:
map
<
TrapRegistry
:
:
Handler
uint16_t
>
;
Trap
(
)
;
~
Trap
(
)
=
delete
;
static
void
SigSysAction
(
int
nr
LinuxSigInfo
*
info
void
*
void_context
)
;
void
SigSys
(
int
nr
LinuxSigInfo
*
info
ucontext_t
*
ctx
)
__attribute__
(
(
noinline
)
)
;
static
Trap
*
global_trap_
;
HandlerToIdMap
trap_ids_
;
RAW_PTR_EXCLUSION
TrapRegistry
:
:
Handler
*
trap_array_
=
nullptr
;
size_t
trap_array_size_
=
0
;
size_t
trap_array_capacity_
=
0
;
bool
has_unsafe_traps_
=
false
;
}
;
}
#
endif
