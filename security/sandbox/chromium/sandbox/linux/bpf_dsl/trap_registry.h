#
ifndef
SANDBOX_LINUX_BPF_DSL_TRAP_REGISTRY_H_
#
define
SANDBOX_LINUX_BPF_DSL_TRAP_REGISTRY_H_
#
include
<
stdint
.
h
>
#
include
<
tuple
>
#
include
"
base
/
check
.
h
"
#
include
"
sandbox
/
linux
/
system_headers
/
linux_seccomp
.
h
"
#
include
"
sandbox
/
sandbox_export
.
h
"
namespace
sandbox
{
namespace
bpf_dsl
{
class
SANDBOX_EXPORT
TrapRegistry
{
public
:
typedef
intptr_t
(
*
TrapFnc
)
(
const
struct
arch_seccomp_data
&
args
void
*
aux
)
;
struct
Handler
{
Handler
(
)
=
default
;
Handler
(
TrapFnc
f
const
void
*
a
bool
s
)
:
fnc
(
f
)
aux
(
reinterpret_cast
<
uintptr_t
>
(
a
)
)
safe
(
s
)
{
DCHECK
(
fnc
)
;
}
bool
operator
<
(
const
Handler
&
that
)
const
{
return
std
:
:
tie
(
fnc
aux
safe
)
<
std
:
:
tie
(
that
.
fnc
that
.
aux
that
.
safe
)
;
}
TrapFnc
fnc
=
nullptr
;
uintptr_t
aux
=
0
;
bool
safe
=
false
;
}
;
TrapRegistry
(
const
TrapRegistry
&
)
=
delete
;
TrapRegistry
&
operator
=
(
const
TrapRegistry
&
)
=
delete
;
virtual
uint16_t
Add
(
const
Handler
&
handler
)
=
0
;
virtual
bool
EnableUnsafeTraps
(
)
=
0
;
protected
:
TrapRegistry
(
)
{
}
~
TrapRegistry
(
)
{
}
}
;
}
}
#
endif
