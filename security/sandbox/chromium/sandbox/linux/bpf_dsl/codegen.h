#
ifndef
SANDBOX_LINUX_BPF_DSL_CODEGEN_H__
#
define
SANDBOX_LINUX_BPF_DSL_CODEGEN_H__
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
vector
>
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
tuple
.
h
"
#
include
"
sandbox
/
sandbox_export
.
h
"
struct
sock_filter
;
namespace
sandbox
{
class
SANDBOX_EXPORT
CodeGen
{
public
:
typedef
std
:
:
vector
<
struct
sock_filter
>
Program
;
using
Node
=
Program
:
:
size_type
;
static
const
Node
kNullNode
=
-
1
;
CodeGen
(
)
;
~
CodeGen
(
)
;
Node
MakeInstruction
(
uint16_t
code
uint32_t
k
Node
jt
=
kNullNode
Node
jf
=
kNullNode
)
;
Program
Compile
(
Node
head
)
;
private
:
using
MemoKey
=
base
:
:
Tuple
<
uint16_t
uint32_t
Node
Node
>
;
struct
MemoKeyLess
{
bool
operator
(
)
(
const
MemoKey
&
lhs
const
MemoKey
&
rhs
)
const
;
}
;
Node
AppendInstruction
(
uint16_t
code
uint32_t
k
Node
jt
Node
jf
)
;
Node
WithinRange
(
Node
next
size_t
range
)
;
Node
Append
(
uint16_t
code
uint32_t
k
size_t
jt
size_t
jf
)
;
size_t
Offset
(
Node
target
)
const
;
Program
program_
;
std
:
:
vector
<
Node
>
equivalent_
;
std
:
:
map
<
MemoKey
Node
MemoKeyLess
>
memos_
;
DISALLOW_COPY_AND_ASSIGN
(
CodeGen
)
;
}
;
}
#
endif
