#
ifndef
SANDBOX_LINUX_BPF_DSL_POLICY_COMPILER_H_
#
define
SANDBOX_LINUX_BPF_DSL_POLICY_COMPILER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
base
/
macros
.
h
"
#
include
"
sandbox
/
linux
/
bpf_dsl
/
bpf_dsl_forward
.
h
"
#
include
"
sandbox
/
linux
/
bpf_dsl
/
codegen
.
h
"
#
include
"
sandbox
/
linux
/
bpf_dsl
/
trap_registry
.
h
"
#
include
"
sandbox
/
sandbox_export
.
h
"
namespace
sandbox
{
namespace
bpf_dsl
{
class
Policy
;
class
SANDBOX_EXPORT
PolicyCompiler
{
public
:
using
PanicFunc
=
bpf_dsl
:
:
ResultExpr
(
*
)
(
const
char
*
error
)
;
PolicyCompiler
(
const
Policy
*
policy
TrapRegistry
*
registry
)
;
~
PolicyCompiler
(
)
;
CodeGen
:
:
Program
Compile
(
)
;
void
DangerousSetEscapePC
(
uint64_t
escapepc
)
;
void
SetPanicFunc
(
PanicFunc
panic_func
)
;
static
bool
IsRequiredForUnsafeTrap
(
int
sysno
)
;
CodeGen
:
:
Node
Return
(
uint32_t
ret
)
;
CodeGen
:
:
Node
Trap
(
TrapRegistry
:
:
TrapFnc
fnc
const
void
*
aux
bool
safe
)
;
CodeGen
:
:
Node
MaskedEqual
(
int
argno
size_t
width
uint64_t
mask
uint64_t
value
CodeGen
:
:
Node
passed
CodeGen
:
:
Node
failed
)
;
private
:
struct
Range
;
typedef
std
:
:
vector
<
Range
>
Ranges
;
enum
class
ArgHalf
{
LOWER
UPPER
}
;
CodeGen
:
:
Node
AssemblePolicy
(
)
;
CodeGen
:
:
Node
CheckArch
(
CodeGen
:
:
Node
passed
)
;
CodeGen
:
:
Node
MaybeAddEscapeHatch
(
CodeGen
:
:
Node
rest
)
;
CodeGen
:
:
Node
DispatchSyscall
(
)
;
CodeGen
:
:
Node
CheckSyscallNumber
(
CodeGen
:
:
Node
passed
)
;
void
FindRanges
(
Ranges
*
ranges
)
;
CodeGen
:
:
Node
AssembleJumpTable
(
Ranges
:
:
const_iterator
start
Ranges
:
:
const_iterator
stop
)
;
CodeGen
:
:
Node
CompileResult
(
const
ResultExpr
&
res
)
;
CodeGen
:
:
Node
MaskedEqualHalf
(
int
argno
size_t
width
uint64_t
full_mask
uint64_t
full_value
ArgHalf
half
CodeGen
:
:
Node
passed
CodeGen
:
:
Node
failed
)
;
CodeGen
:
:
Node
Unexpected64bitArgument
(
)
;
const
Policy
*
policy_
;
TrapRegistry
*
registry_
;
uint64_t
escapepc_
;
PanicFunc
panic_func_
;
CodeGen
gen_
;
bool
has_unsafe_traps_
;
DISALLOW_COPY_AND_ASSIGN
(
PolicyCompiler
)
;
}
;
}
}
#
endif
