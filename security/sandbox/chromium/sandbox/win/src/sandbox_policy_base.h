#
ifndef
SANDBOX_WIN_SRC_SANDBOX_POLICY_BASE_H_
#
define
SANDBOX_WIN_SRC_SANDBOX_POLICY_BASE_H_
#
include
<
windows
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
list
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
base
/
compiler_specific
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
process
/
launch
.
h
"
#
include
"
base
/
strings
/
string16
.
h
"
#
include
"
base
/
win
/
scoped_handle
.
h
"
#
include
"
sandbox
/
win
/
src
/
crosscall_server
.
h
"
#
include
"
sandbox
/
win
/
src
/
handle_closer
.
h
"
#
include
"
sandbox
/
win
/
src
/
ipc_tags
.
h
"
#
include
"
sandbox
/
win
/
src
/
policy_engine_opcodes
.
h
"
#
include
"
sandbox
/
win
/
src
/
policy_engine_params
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_policy
.
h
"
#
include
"
sandbox
/
win
/
src
/
win_utils
.
h
"
namespace
sandbox
{
class
LowLevelPolicy
;
class
TargetProcess
;
struct
PolicyGlobal
;
class
PolicyBase
final
:
public
TargetPolicy
{
public
:
PolicyBase
(
)
;
void
AddRef
(
)
override
;
void
Release
(
)
override
;
ResultCode
SetTokenLevel
(
TokenLevel
initial
TokenLevel
lockdown
)
override
;
TokenLevel
GetInitialTokenLevel
(
)
const
override
;
TokenLevel
GetLockdownTokenLevel
(
)
const
override
;
void
SetDoNotUseRestrictingSIDs
(
)
final
override
;
ResultCode
SetJobLevel
(
JobLevel
job_level
uint32_t
ui_exceptions
)
override
;
JobLevel
GetJobLevel
(
)
const
override
;
ResultCode
SetJobMemoryLimit
(
size_t
memory_limit
)
override
;
ResultCode
SetAlternateDesktop
(
bool
alternate_winstation
)
override
;
base
:
:
string16
GetAlternateDesktop
(
)
const
override
;
ResultCode
CreateAlternateDesktop
(
bool
alternate_winstation
)
override
;
void
DestroyAlternateDesktop
(
)
override
;
ResultCode
SetIntegrityLevel
(
IntegrityLevel
integrity_level
)
override
;
IntegrityLevel
GetIntegrityLevel
(
)
const
override
;
ResultCode
SetDelayedIntegrityLevel
(
IntegrityLevel
integrity_level
)
override
;
ResultCode
SetCapability
(
const
wchar_t
*
sid
)
override
;
ResultCode
SetLowBox
(
const
wchar_t
*
sid
)
override
;
ResultCode
SetProcessMitigations
(
MitigationFlags
flags
)
override
;
MitigationFlags
GetProcessMitigations
(
)
override
;
ResultCode
SetDelayedProcessMitigations
(
MitigationFlags
flags
)
override
;
MitigationFlags
GetDelayedProcessMitigations
(
)
const
override
;
ResultCode
SetDisconnectCsrss
(
)
override
;
void
SetStrictInterceptions
(
)
override
;
ResultCode
SetStdoutHandle
(
HANDLE
handle
)
override
;
ResultCode
SetStderrHandle
(
HANDLE
handle
)
override
;
ResultCode
AddRule
(
SubSystem
subsystem
Semantics
semantics
const
wchar_t
*
pattern
)
override
;
ResultCode
AddDllToUnload
(
const
wchar_t
*
dll_name
)
override
;
ResultCode
AddKernelObjectToClose
(
const
base
:
:
char16
*
handle_type
const
base
:
:
char16
*
handle_name
)
override
;
void
AddHandleToShare
(
HANDLE
handle
)
override
;
void
SetLockdownDefaultDacl
(
)
override
;
void
SetEnableOPMRedirection
(
)
override
;
bool
GetEnableOPMRedirection
(
)
override
;
ResultCode
MakeJobObject
(
base
:
:
win
:
:
ScopedHandle
*
job
)
;
ResultCode
MakeTokens
(
base
:
:
win
:
:
ScopedHandle
*
initial
base
:
:
win
:
:
ScopedHandle
*
lockdown
base
:
:
win
:
:
ScopedHandle
*
lowbox
)
;
PSID
GetLowBoxSid
(
)
const
;
ResultCode
AddTarget
(
TargetProcess
*
target
)
;
bool
OnJobEmpty
(
HANDLE
job
)
;
EvalResult
EvalPolicy
(
int
service
CountedParameterSetBase
*
params
)
;
HANDLE
GetStdoutHandle
(
)
;
HANDLE
GetStderrHandle
(
)
;
const
base
:
:
HandlesToInheritVector
&
GetHandlesBeingShared
(
)
;
private
:
~
PolicyBase
(
)
;
ResultCode
SetupAllInterceptions
(
TargetProcess
*
target
)
;
bool
SetupHandleCloser
(
TargetProcess
*
target
)
;
ResultCode
AddRuleInternal
(
SubSystem
subsystem
Semantics
semantics
const
wchar_t
*
pattern
)
;
CRITICAL_SECTION
lock_
;
typedef
std
:
:
list
<
TargetProcess
*
>
TargetSet
;
TargetSet
targets_
;
volatile
LONG
ref_count
;
TokenLevel
lockdown_level_
;
TokenLevel
initial_level_
;
bool
use_restricting_sids_
=
true
;
JobLevel
job_level_
;
uint32_t
ui_exceptions_
;
size_t
memory_limit_
;
bool
use_alternate_desktop_
;
bool
use_alternate_winstation_
;
bool
file_system_init_
;
bool
relaxed_interceptions_
;
HANDLE
stdout_handle_
;
HANDLE
stderr_handle_
;
IntegrityLevel
integrity_level_
;
IntegrityLevel
delayed_integrity_level_
;
MitigationFlags
mitigations_
;
MitigationFlags
delayed_mitigations_
;
bool
is_csrss_connected_
;
LowLevelPolicy
*
policy_maker_
;
PolicyGlobal
*
policy_
;
std
:
:
vector
<
base
:
:
string16
>
blacklisted_dlls_
;
HandleCloser
handle_closer_
;
std
:
:
vector
<
base
:
:
string16
>
capabilities_
;
PSID
lowbox_sid_
;
base
:
:
win
:
:
ScopedHandle
lowbox_directory_
;
std
:
:
unique_ptr
<
Dispatcher
>
dispatcher_
;
bool
lockdown_default_dacl_
;
static
HDESK
alternate_desktop_handle_
;
static
HWINSTA
alternate_winstation_handle_
;
static
HDESK
alternate_desktop_local_winstation_handle_
;
static
IntegrityLevel
alternate_desktop_integrity_level_label_
;
static
IntegrityLevel
alternate_desktop_local_winstation_integrity_level_label_
;
base
:
:
HandlesToInheritVector
handles_to_share_
;
bool
enable_opm_redirection_
;
DISALLOW_COPY_AND_ASSIGN
(
PolicyBase
)
;
}
;
}
#
endif
