#
ifndef
SANDBOX_WIN_SRC_BROKER_SERVICES_H_
#
define
SANDBOX_WIN_SRC_BROKER_SERVICES_H_
#
include
<
list
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
utility
>
#
include
"
base
/
compiler_specific
.
h
"
#
include
"
base
/
environment
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
memory
/
scoped_refptr
.
h
"
#
include
"
base
/
win
/
scoped_handle
.
h
"
#
include
"
sandbox
/
win
/
src
/
crosscall_server
.
h
"
#
include
"
sandbox
/
win
/
src
/
job
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_policy_base
.
h
"
#
include
"
sandbox
/
win
/
src
/
sharedmem_ipc_server
.
h
"
#
include
"
sandbox
/
win
/
src
/
win2k_threadpool
.
h
"
#
include
"
sandbox
/
win
/
src
/
win_utils
.
h
"
namespace
sandbox
{
class
BrokerServicesBase
final
:
public
BrokerServices
public
SingletonBase
<
BrokerServicesBase
>
{
public
:
BrokerServicesBase
(
)
;
~
BrokerServicesBase
(
)
;
ResultCode
Init
(
)
override
;
scoped_refptr
<
TargetPolicy
>
CreatePolicy
(
)
override
;
ResultCode
SpawnTarget
(
const
wchar_t
*
exe_path
const
wchar_t
*
command_line
base
:
:
EnvironmentMap
&
env_map
scoped_refptr
<
TargetPolicy
>
policy
ResultCode
*
last_warning
DWORD
*
last_error
PROCESS_INFORMATION
*
target
)
override
;
ResultCode
WaitForAllTargets
(
)
override
;
ResultCode
AddTargetPeer
(
HANDLE
peer_process
)
override
;
bool
IsSafeDuplicationTarget
(
DWORD
process_id
)
;
ResultCode
GetPolicyDiagnostics
(
std
:
:
unique_ptr
<
PolicyDiagnosticsReceiver
>
receiver
)
override
;
private
:
static
DWORD
WINAPI
TargetEventsThread
(
PVOID
param
)
;
base
:
:
win
:
:
ScopedHandle
job_port_
;
base
:
:
win
:
:
ScopedHandle
no_targets_
;
base
:
:
win
:
:
ScopedHandle
job_thread_
;
std
:
:
unique_ptr
<
ThreadProvider
>
thread_pool_
;
std
:
:
set
<
DWORD
>
active_targets_
;
CRITICAL_SECTION
lock_
;
ResultCode
AddTargetPeerInternal
(
HANDLE
peer_process_handle
DWORD
peer_process_id
scoped_refptr
<
PolicyBase
>
policy_base
DWORD
*
last_error
)
;
DISALLOW_COPY_AND_ASSIGN
(
BrokerServicesBase
)
;
}
;
}
#
endif
