#
ifndef
SANDBOX_WIN_SRC_THREADPOOL_H_
#
define
SANDBOX_WIN_SRC_THREADPOOL_H_
#
include
<
list
>
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
base
/
synchronization
/
lock
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
namespace
sandbox
{
typedef
void
(
__stdcall
*
CrossCallIPCCallback
)
(
void
*
context
unsigned
char
reason
)
;
class
ThreadPool
{
public
:
ThreadPool
(
)
;
ThreadPool
(
const
ThreadPool
&
)
=
delete
;
ThreadPool
&
operator
=
(
const
ThreadPool
&
)
=
delete
;
~
ThreadPool
(
)
;
bool
RegisterWait
(
const
void
*
cookie
HANDLE
waitable_object
CrossCallIPCCallback
callback
void
*
context
)
;
bool
UnRegisterWaits
(
void
*
cookie
)
;
size_t
OutstandingWaits
(
)
;
private
:
struct
PoolObject
{
raw_ptr
<
const
void
>
cookie
;
HANDLE
wait
;
}
;
typedef
std
:
:
list
<
PoolObject
>
PoolObjects
;
PoolObjects
pool_objects_
;
base
:
:
Lock
lock_
;
}
;
}
#
endif
