#
ifndef
SANDBOX_WIN_SRC_RESOLVER_H_
#
define
SANDBOX_WIN_SRC_RESOLVER_H_
#
include
<
stddef
.
h
>
#
include
"
base
/
memory
/
raw_ptr_exclusion
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
namespace
sandbox
{
class
[
[
clang
:
:
lto_visibility_public
]
]
ResolverThunk
{
public
:
ResolverThunk
(
)
{
}
ResolverThunk
(
const
ResolverThunk
&
)
=
delete
;
ResolverThunk
&
operator
=
(
const
ResolverThunk
&
)
=
delete
;
virtual
~
ResolverThunk
(
)
{
}
virtual
NTSTATUS
Setup
(
const
void
*
target_module
const
void
*
interceptor_module
const
char
*
target_name
const
char
*
interceptor_name
const
void
*
interceptor_entry_point
void
*
thunk_storage
size_t
storage_bytes
size_t
*
storage_used
)
=
0
;
virtual
NTSTATUS
ResolveInterceptor
(
const
void
*
module
const
char
*
function_name
const
void
*
*
address
)
;
virtual
NTSTATUS
ResolveTarget
(
const
void
*
module
const
char
*
function_name
void
*
*
address
)
;
virtual
size_t
GetThunkSize
(
)
const
=
0
;
protected
:
virtual
NTSTATUS
Init
(
const
void
*
target_module
const
void
*
interceptor_module
const
char
*
target_name
const
char
*
interceptor_name
const
void
*
interceptor_entry_point
void
*
thunk_storage
size_t
storage_bytes
)
;
size_t
GetInternalThunkSize
(
)
const
;
bool
SetInternalThunk
(
void
*
storage
size_t
storage_bytes
const
void
*
original_function
const
void
*
interceptor
)
;
RAW_PTR_EXCLUSION
void
*
target_
;
RAW_PTR_EXCLUSION
const
void
*
interceptor_
;
}
;
}
#
endif
